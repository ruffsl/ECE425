
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00005ae2  00005b76  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005ae2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000303  008001aa  008001aa  00005c20  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00005c20  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000361  00000000  00000000  00005c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001020  00000000  00000000  00005fc1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ae  00000000  00000000  00006fe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d82  00000000  00000000  0000728f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00008014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000acf  00000000  00000000  00008234  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b35  00000000  00000000  00008d03  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 53 19 	jmp	0x32a6	; 0x32a6 <__vector_4>
      14:	0c 94 7c 19 	jmp	0x32f8	; 0x32f8 <__vector_5>
      18:	0c 94 a5 19 	jmp	0x334a	; 0x334a <__vector_6>
      1c:	0c 94 ce 19 	jmp	0x339c	; 0x339c <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 34 18 	jmp	0x3068	; 0x3068 <__vector_9>
      28:	0c 94 5d 18 	jmp	0x30ba	; 0x30ba <__vector_10>
      2c:	0c 94 86 18 	jmp	0x310c	; 0x310c <__vector_11>
      30:	0c 94 01 19 	jmp	0x3202	; 0x3202 <__vector_12>
      34:	0c 94 af 18 	jmp	0x315e	; 0x315e <__vector_13>
      38:	0c 94 d8 18 	jmp	0x31b0	; 0x31b0 <__vector_14>
      3c:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__vector_15>
      40:	0c 94 b9 17 	jmp	0x2f72	; 0x2f72 <__vector_16>
      44:	0c 94 e2 17 	jmp	0x2fc4	; 0x2fc4 <__vector_17>
      48:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	1e 15       	cp	r17, r14
      7e:	21 15       	cp	r18, r1
      80:	24 15       	cp	r18, r4
      82:	27 15       	cp	r18, r7
      84:	30 15       	cp	r19, r0
      86:	2a 15       	cp	r18, r10
      88:	2d 15       	cp	r18, r13
      8a:	33 15       	cp	r19, r3
      8c:	36 15       	cp	r19, r6
      8e:	39 15       	cp	r19, r9
      90:	3c 15       	cp	r19, r12
      92:	3f 15       	cp	r19, r15
      94:	42 15       	cp	r20, r2
      96:	45 15       	cp	r20, r5
      98:	48 15       	cp	r20, r8
      9a:	4b 15       	cp	r20, r11
      9c:	4e 15       	cp	r20, r14
      9e:	51 15       	cp	r21, r1
      a0:	54 15       	cp	r21, r4
      a2:	65 15       	cp	r22, r5
      a4:	68 15       	cp	r22, r8
      a6:	6b 15       	cp	r22, r11
      a8:	6e 15       	cp	r22, r14
      aa:	77 15       	cp	r23, r7
      ac:	71 15       	cp	r23, r1
      ae:	74 15       	cp	r23, r4
      b0:	7a 15       	cp	r23, r10
      b2:	7d 15       	cp	r23, r13
      b4:	80 15       	cp	r24, r0
      b6:	83 15       	cp	r24, r3
      b8:	86 15       	cp	r24, r6
      ba:	89 15       	cp	r24, r9
      bc:	8c 15       	cp	r24, r12
      be:	8f 15       	cp	r24, r15
      c0:	92 15       	cp	r25, r2
      c2:	95 15       	cp	r25, r5
      c4:	98 15       	cp	r25, r8
      c6:	9b 15       	cp	r25, r11
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	11 e0       	ldi	r17, 0x01	; 1
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e2 ee       	ldi	r30, 0xE2	; 226
     676:	fa e5       	ldi	r31, 0x5A	; 90
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	aa 3a       	cpi	r26, 0xAA	; 170
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	14 e0       	ldi	r17, 0x04	; 4
     686:	aa ea       	ldi	r26, 0xAA	; 170
     688:	b1 e0       	ldi	r27, 0x01	; 1
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	ad 3a       	cpi	r26, 0xAD	; 173
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 c8 0f 	call	0x1f90	; 0x1f90 <main>
     698:	0c 94 6f 2d 	jmp	0x5ade	; 0x5ade <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 f7 16 	call	0x2dee	; 0x2dee <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 f7 16 	call	0x2dee	; 0x2dee <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 f7 16 	call	0x2dee	; 0x2dee <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 f7 16 	call	0x2dee	; 0x2dee <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 f7 16 	call	0x2dee	; 0x2dee <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 f7 16 	call	0x2dee	; 0x2dee <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 f7 16 	call	0x2dee	; 0x2dee <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 f7 16 	call	0x2dee	; 0x2dee <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 f7 16 	call	0x2dee	; 0x2dee <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 f7 16 	call	0x2dee	; 0x2dee <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 cb 16 	call	0x2d96	; 0x2d96 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 8a 23 	call	0x4714	; 0x4714 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 8a 23 	call	0x4714	; 0x4714 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 8a 23 	call	0x4714	; 0x4714 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 8a 23 	call	0x4714	; 0x4714 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 8a 23 	call	0x4714	; 0x4714 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 86 0f 	call	0x1f0c	; 0x1f0c <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 69 0f 	call	0x1ed2	; 0x1ed2 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 8a 23 	call	0x4714	; 0x4714 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b0e:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	80 93 48 02 	sts	0x0248, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <ATTINY_get_SW_state>
     b1e:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <ATTINY_get_SW_state>
     b26:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <ATTINY_get_SW_state>
     b2e:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b30:	11 30       	cpi	r17, 0x01	; 1
     b32:	19 f0       	breq	.+6      	; 0xb3a <WaitButton+0x36>
     b34:	c0 e0       	ldi	r28, 0x00	; 0
     b36:	d0 e0       	ldi	r29, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <WaitButton+0x64>
		{
			LCD_printf( "SW1: Pushed\n");
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 c1 2c 	call	0x5982	; 0x5982 <puts>
			TMRSRVC_delay(1000);//wait 1 s
     b42:	88 ee       	ldi	r24, 0xE8	; 232
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TMRSRVC_delay>

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b4a:	80 e2       	ldi	r24, 0x20	; 32
     b4c:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LED_set_pattern>
                	TMRSRVC_delay(2000);//wait 2 seconds
     b50:	80 ed       	ldi	r24, 0xD0	; 208
     b52:	97 e0       	ldi	r25, 0x07	; 7
     b54:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b58:	80 e4       	ldi	r24, 0x40	; 64
     b5a:	0e 94 cb 10 	call	0x2196	; 0x2196 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b5e:	80 e2       	ldi	r24, 0x20	; 32
     b60:	0e 94 cb 10 	call	0x2196	; 0x2196 <LED_clr_pattern>
     b64:	c1 e0       	ldi	r28, 0x01	; 1
     b66:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b68:	01 30       	cpi	r16, 0x01	; 1
     b6a:	b9 f4       	brne	.+46     	; 0xb9a <WaitButton+0x96>
		{
			LCD_printf( "SW2: Pushed\n");
     b6c:	8c e0       	ldi	r24, 0x0C	; 12
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 c1 2c 	call	0x5982	; 0x5982 <puts>
			TMRSRVC_delay(1000);//wait 1 s
     b74:	88 ee       	ldi	r24, 0xE8	; 232
     b76:	93 e0       	ldi	r25, 0x03	; 3
     b78:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TMRSRVC_delay>

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     b7c:	80 e4       	ldi	r24, 0x40	; 64
     b7e:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LED_set_pattern>
                	TMRSRVC_delay(2000);//wait 2 seconds
     b82:	80 ed       	ldi	r24, 0xD0	; 208
     b84:	97 e0       	ldi	r25, 0x07	; 7
     b86:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     b8a:	80 e4       	ldi	r24, 0x40	; 64
     b8c:	0e 94 cb 10 	call	0x2196	; 0x2196 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b90:	80 e2       	ldi	r24, 0x20	; 32
     b92:	0e 94 cb 10 	call	0x2196	; 0x2196 <LED_clr_pattern>
     b96:	c2 e0       	ldi	r28, 0x02	; 2
     b98:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	f8 16       	cp	r15, r24
     b9e:	d1 f4       	brne	.+52     	; 0xbd4 <WaitButton+0xd0>
		{
			LCD_printf( "SW3: Pushed\n");
     ba0:	88 e1       	ldi	r24, 0x18	; 24
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 c1 2c 	call	0x5982	; 0x5982 <puts>
			TMRSRVC_delay(1000);//wait 1 s
     ba8:	88 ee       	ldi	r24, 0xE8	; 232
     baa:	93 e0       	ldi	r25, 0x03	; 3
     bac:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TMRSRVC_delay>

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb0:	80 e4       	ldi	r24, 0x40	; 64
     bb2:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     bb6:	80 e2       	ldi	r24, 0x20	; 32
     bb8:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <LED_set_pattern>
                	TMRSRVC_delay(2000);//wait 2 seconds
     bbc:	80 ed       	ldi	r24, 0xD0	; 208
     bbe:	97 e0       	ldi	r25, 0x07	; 7
     bc0:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc4:	80 e4       	ldi	r24, 0x40	; 64
     bc6:	0e 94 cb 10 	call	0x2196	; 0x2196 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bca:	80 e2       	ldi	r24, 0x20	; 32
     bcc:	0e 94 cb 10 	call	0x2196	; 0x2196 <LED_clr_pattern>
     bd0:	c3 e0       	ldi	r28, 0x03	; 3
     bd2:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     bd4:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     bd8:	ce 01       	movw	r24, r28
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	08 95       	ret

00000be6 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     be6:	2f 92       	push	r2
     be8:	3f 92       	push	r3
     bea:	4f 92       	push	r4
     bec:	5f 92       	push	r5
     bee:	6f 92       	push	r6
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	64 97       	sbiw	r28, 0x14	; 20
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c1a:	88 23       	and	r24, r24
     c1c:	39 f5       	brne	.+78     	; 0xc6c <prefilter+0x86>
     c1e:	89 eb       	ldi	r24, 0xB9	; 185
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	9c 8b       	std	Y+20, r25	; 0x14
     c24:	8b 8b       	std	Y+19, r24	; 0x13
     c26:	a3 e2       	ldi	r26, 0x23	; 35
     c28:	b4 e0       	ldi	r27, 0x04	; 4
     c2a:	be 83       	std	Y+6, r27	; 0x06
     c2c:	ad 83       	std	Y+5, r26	; 0x05
     c2e:	e9 ea       	ldi	r30, 0xA9	; 169
     c30:	f3 e0       	ldi	r31, 0x03	; 3
     c32:	fc 83       	std	Y+4, r31	; 0x04
     c34:	eb 83       	std	Y+3, r30	; 0x03
     c36:	81 e3       	ldi	r24, 0x31	; 49
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	0f 2e       	mov	r0, r31
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	2f 2e       	mov	r2, r31
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	3f 2e       	mov	r3, r31
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	4f 2e       	mov	r4, r31
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	5f 2e       	mov	r5, r31
     c50:	f0 2d       	mov	r31, r0
     c52:	2f 86       	std	Y+15, r2	; 0x0f
     c54:	38 8a       	std	Y+16, r3	; 0x10
     c56:	49 8a       	std	Y+17, r4	; 0x11
     c58:	5a 8a       	std	Y+18, r5	; 0x12
     c5a:	2b 86       	std	Y+11, r2	; 0x0b
     c5c:	3c 86       	std	Y+12, r3	; 0x0c
     c5e:	4d 86       	std	Y+13, r4	; 0x0d
     c60:	5e 86       	std	Y+14, r5	; 0x0e
     c62:	2f 82       	std	Y+7, r2	; 0x07
     c64:	38 86       	std	Y+8, r3	; 0x08
     c66:	49 86       	std	Y+9, r4	; 0x09
     c68:	5a 86       	std	Y+10, r5	; 0x0a
     c6a:	43 c0       	rjmp	.+134    	; 0xcf2 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c6c:	a0 90 b2 01 	lds	r10, 0x01B2
     c70:	b0 90 b3 01 	lds	r11, 0x01B3
     c74:	c0 90 b4 01 	lds	r12, 0x01B4
     c78:	d0 90 b5 01 	lds	r13, 0x01B5
			rtIR_old[i] = rtIR;
     c7c:	e0 90 b6 01 	lds	r14, 0x01B6
     c80:	f0 90 b7 01 	lds	r15, 0x01B7
     c84:	00 91 b8 01 	lds	r16, 0x01B8
     c88:	10 91 b9 01 	lds	r17, 0x01B9
			ftIR_old[i] = ftIR;
     c8c:	20 90 ba 01 	lds	r2, 0x01BA
     c90:	30 90 bb 01 	lds	r3, 0x01BB
     c94:	40 90 bc 01 	lds	r4, 0x01BC
     c98:	50 90 bd 01 	lds	r5, 0x01BD
			bkIR_old[i] = bkIR;
     c9c:	20 91 be 01 	lds	r18, 0x01BE
     ca0:	30 91 bf 01 	lds	r19, 0x01BF
     ca4:	40 91 c0 01 	lds	r20, 0x01C0
     ca8:	50 91 c1 01 	lds	r21, 0x01C1
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cb0:	fc 01       	movw	r30, r24
     cb2:	e7 5b       	subi	r30, 0xB7	; 183
     cb4:	fd 4f       	sbci	r31, 0xFD	; 253
     cb6:	a0 82       	st	Z, r10
     cb8:	b1 82       	std	Z+1, r11	; 0x01
     cba:	c2 82       	std	Z+2, r12	; 0x02
     cbc:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cbe:	fc 01       	movw	r30, r24
     cc0:	ed 54       	subi	r30, 0x4D	; 77
     cc2:	fc 4f       	sbci	r31, 0xFC	; 252
     cc4:	e0 82       	st	Z, r14
     cc6:	f1 82       	std	Z+1, r15	; 0x01
     cc8:	02 83       	std	Z+2, r16	; 0x02
     cca:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     ccc:	fc 01       	movw	r30, r24
     cce:	e7 5c       	subi	r30, 0xC7	; 199
     cd0:	fc 4f       	sbci	r31, 0xFC	; 252
     cd2:	20 82       	st	Z, r2
     cd4:	31 82       	std	Z+1, r3	; 0x01
     cd6:	42 82       	std	Z+2, r4	; 0x02
     cd8:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     cda:	fc 01       	movw	r30, r24
     cdc:	ef 53       	subi	r30, 0x3F	; 63
     cde:	fd 4f       	sbci	r31, 0xFD	; 253
     ce0:	20 83       	st	Z, r18
     ce2:	31 83       	std	Z+1, r19	; 0x01
     ce4:	42 83       	std	Z+2, r20	; 0x02
     ce6:	53 83       	std	Z+3, r21	; 0x03
     ce8:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     cea:	88 37       	cpi	r24, 0x78	; 120
     cec:	91 05       	cpc	r25, r1
     cee:	01 f7       	brne	.-64     	; 0xcb0 <prefilter+0xca>
     cf0:	96 cf       	rjmp	.-212    	; 0xc1e <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     cf2:	ab 89       	ldd	r26, Y+19	; 0x13
     cf4:	bc 89       	ldd	r27, Y+20	; 0x14
     cf6:	2d 91       	ld	r18, X+
     cf8:	3d 91       	ld	r19, X+
     cfa:	4d 91       	ld	r20, X+
     cfc:	5c 91       	ld	r21, X
     cfe:	13 97       	sbiw	r26, 0x03	; 3
     d00:	fd 01       	movw	r30, r26
     d02:	24 83       	std	Z+4, r18	; 0x04
     d04:	35 83       	std	Z+5, r19	; 0x05
     d06:	46 83       	std	Z+6, r20	; 0x06
     d08:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d0a:	ad 81       	ldd	r26, Y+5	; 0x05
     d0c:	be 81       	ldd	r27, Y+6	; 0x06
     d0e:	ed 90       	ld	r14, X+
     d10:	fd 90       	ld	r15, X+
     d12:	0d 91       	ld	r16, X+
     d14:	1c 91       	ld	r17, X
     d16:	13 97       	sbiw	r26, 0x03	; 3
     d18:	fd 01       	movw	r30, r26
     d1a:	e4 82       	std	Z+4, r14	; 0x04
     d1c:	f5 82       	std	Z+5, r15	; 0x05
     d1e:	06 83       	std	Z+6, r16	; 0x06
     d20:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d22:	ab 81       	ldd	r26, Y+3	; 0x03
     d24:	bc 81       	ldd	r27, Y+4	; 0x04
     d26:	ad 90       	ld	r10, X+
     d28:	bd 90       	ld	r11, X+
     d2a:	cd 90       	ld	r12, X+
     d2c:	dc 90       	ld	r13, X
     d2e:	13 97       	sbiw	r26, 0x03	; 3
     d30:	fd 01       	movw	r30, r26
     d32:	a4 82       	std	Z+4, r10	; 0x04
     d34:	b5 82       	std	Z+5, r11	; 0x05
     d36:	c6 82       	std	Z+6, r12	; 0x06
     d38:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d3a:	a9 81       	ldd	r26, Y+1	; 0x01
     d3c:	ba 81       	ldd	r27, Y+2	; 0x02
     d3e:	6d 90       	ld	r6, X+
     d40:	7d 90       	ld	r7, X+
     d42:	8d 90       	ld	r8, X+
     d44:	9c 90       	ld	r9, X
     d46:	13 97       	sbiw	r26, 0x03	; 3
     d48:	fd 01       	movw	r30, r26
     d4a:	64 82       	std	Z+4, r6	; 0x04
     d4c:	75 82       	std	Z+5, r7	; 0x05
     d4e:	86 82       	std	Z+6, r8	; 0x06
     d50:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d52:	c2 01       	movw	r24, r4
     d54:	b1 01       	movw	r22, r2
     d56:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
     d5a:	1b 01       	movw	r2, r22
     d5c:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d5e:	6f 85       	ldd	r22, Y+15	; 0x0f
     d60:	78 89       	ldd	r23, Y+16	; 0x10
     d62:	89 89       	ldd	r24, Y+17	; 0x11
     d64:	9a 89       	ldd	r25, Y+18	; 0x12
     d66:	a8 01       	movw	r20, r16
     d68:	97 01       	movw	r18, r14
     d6a:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
     d6e:	6f 87       	std	Y+15, r22	; 0x0f
     d70:	78 8b       	std	Y+16, r23	; 0x10
     d72:	89 8b       	std	Y+17, r24	; 0x11
     d74:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     d76:	6b 85       	ldd	r22, Y+11	; 0x0b
     d78:	7c 85       	ldd	r23, Y+12	; 0x0c
     d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7e:	a6 01       	movw	r20, r12
     d80:	95 01       	movw	r18, r10
     d82:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
     d86:	6b 87       	std	Y+11, r22	; 0x0b
     d88:	7c 87       	std	Y+12, r23	; 0x0c
     d8a:	8d 87       	std	Y+13, r24	; 0x0d
     d8c:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     d8e:	6f 81       	ldd	r22, Y+7	; 0x07
     d90:	78 85       	ldd	r23, Y+8	; 0x08
     d92:	89 85       	ldd	r24, Y+9	; 0x09
     d94:	9a 85       	ldd	r25, Y+10	; 0x0a
     d96:	a4 01       	movw	r20, r8
     d98:	93 01       	movw	r18, r6
     d9a:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
     d9e:	6f 83       	std	Y+7, r22	; 0x07
     da0:	78 87       	std	Y+8, r23	; 0x08
     da2:	89 87       	std	Y+9, r24	; 0x09
     da4:	9a 87       	std	Y+10, r25	; 0x0a
     da6:	8b 89       	ldd	r24, Y+19	; 0x13
     da8:	9c 89       	ldd	r25, Y+20	; 0x14
     daa:	04 97       	sbiw	r24, 0x04	; 4
     dac:	9c 8b       	std	Y+20, r25	; 0x14
     dae:	8b 8b       	std	Y+19, r24	; 0x13
     db0:	ad 81       	ldd	r26, Y+5	; 0x05
     db2:	be 81       	ldd	r27, Y+6	; 0x06
     db4:	14 97       	sbiw	r26, 0x04	; 4
     db6:	be 83       	std	Y+6, r27	; 0x06
     db8:	ad 83       	std	Y+5, r26	; 0x05
     dba:	eb 81       	ldd	r30, Y+3	; 0x03
     dbc:	fc 81       	ldd	r31, Y+4	; 0x04
     dbe:	34 97       	sbiw	r30, 0x04	; 4
     dc0:	fc 83       	std	Y+4, r31	; 0x04
     dc2:	eb 83       	std	Y+3, r30	; 0x03
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	04 97       	sbiw	r24, 0x04	; 4
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dce:	ab 89       	ldd	r26, Y+19	; 0x13
     dd0:	bc 89       	ldd	r27, Y+20	; 0x14
     dd2:	a1 54       	subi	r26, 0x41	; 65
     dd4:	b2 40       	sbci	r27, 0x02	; 2
     dd6:	09 f0       	breq	.+2      	; 0xdda <prefilter+0x1f4>
     dd8:	8c cf       	rjmp	.-232    	; 0xcf2 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     dda:	80 91 b2 01 	lds	r24, 0x01B2
     dde:	90 91 b3 01 	lds	r25, 0x01B3
     de2:	a0 91 b4 01 	lds	r26, 0x01B4
     de6:	b0 91 b5 01 	lds	r27, 0x01B5
     dea:	eb 89       	ldd	r30, Y+19	; 0x13
     dec:	fc 89       	ldd	r31, Y+20	; 0x14
     dee:	80 87       	std	Z+8, r24	; 0x08
     df0:	91 87       	std	Z+9, r25	; 0x09
     df2:	a2 87       	std	Z+10, r26	; 0x0a
     df4:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     df6:	80 91 b6 01 	lds	r24, 0x01B6
     dfa:	90 91 b7 01 	lds	r25, 0x01B7
     dfe:	a0 91 b8 01 	lds	r26, 0x01B8
     e02:	b0 91 b9 01 	lds	r27, 0x01B9
     e06:	80 93 b3 03 	sts	0x03B3, r24
     e0a:	90 93 b4 03 	sts	0x03B4, r25
     e0e:	a0 93 b5 03 	sts	0x03B5, r26
     e12:	b0 93 b6 03 	sts	0x03B6, r27
	ftIR_old[0] = ftIR;
     e16:	80 91 ba 01 	lds	r24, 0x01BA
     e1a:	90 91 bb 01 	lds	r25, 0x01BB
     e1e:	a0 91 bc 01 	lds	r26, 0x01BC
     e22:	b0 91 bd 01 	lds	r27, 0x01BD
     e26:	80 93 39 03 	sts	0x0339, r24
     e2a:	90 93 3a 03 	sts	0x033A, r25
     e2e:	a0 93 3b 03 	sts	0x033B, r26
     e32:	b0 93 3c 03 	sts	0x033C, r27
	bkIR_old[0] = bkIR;
     e36:	80 91 be 01 	lds	r24, 0x01BE
     e3a:	90 91 bf 01 	lds	r25, 0x01BF
     e3e:	a0 91 c0 01 	lds	r26, 0x01C0
     e42:	b0 91 c1 01 	lds	r27, 0x01C1
     e46:	80 93 c1 02 	sts	0x02C1, r24
     e4a:	90 93 c2 02 	sts	0x02C2, r25
     e4e:	a0 93 c3 02 	sts	0x02C3, r26
     e52:	b0 93 c4 02 	sts	0x02C4, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e56:	c2 01       	movw	r24, r4
     e58:	b1 01       	movw	r22, r2
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 ef       	ldi	r20, 0xF0	; 240
     e60:	51 e4       	ldi	r21, 0x41	; 65
     e62:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
     e66:	60 93 b2 01 	sts	0x01B2, r22
     e6a:	70 93 b3 01 	sts	0x01B3, r23
     e6e:	80 93 b4 01 	sts	0x01B4, r24
     e72:	90 93 b5 01 	sts	0x01B5, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     e76:	6f 85       	ldd	r22, Y+15	; 0x0f
     e78:	78 89       	ldd	r23, Y+16	; 0x10
     e7a:	89 89       	ldd	r24, Y+17	; 0x11
     e7c:	9a 89       	ldd	r25, Y+18	; 0x12
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 ef       	ldi	r20, 0xF0	; 240
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
     e8a:	60 93 b6 01 	sts	0x01B6, r22
     e8e:	70 93 b7 01 	sts	0x01B7, r23
     e92:	80 93 b8 01 	sts	0x01B8, r24
     e96:	90 93 b9 01 	sts	0x01B9, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 ef       	ldi	r20, 0xF0	; 240
     ea8:	51 e4       	ldi	r21, 0x41	; 65
     eaa:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
     eae:	60 93 ba 01 	sts	0x01BA, r22
     eb2:	70 93 bb 01 	sts	0x01BB, r23
     eb6:	80 93 bc 01 	sts	0x01BC, r24
     eba:	90 93 bd 01 	sts	0x01BD, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     ebe:	6f 81       	ldd	r22, Y+7	; 0x07
     ec0:	78 85       	ldd	r23, Y+8	; 0x08
     ec2:	89 85       	ldd	r24, Y+9	; 0x09
     ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 ef       	ldi	r20, 0xF0	; 240
     ecc:	51 e4       	ldi	r21, 0x41	; 65
     ece:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
     ed2:	60 93 be 01 	sts	0x01BE, r22
     ed6:	70 93 bf 01 	sts	0x01BF, r23
     eda:	80 93 c0 01 	sts	0x01C0, r24
     ede:	90 93 c1 01 	sts	0x01C1, r25
}
     ee2:	64 96       	adiw	r28, 0x14	; 20
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	9f 90       	pop	r9
     f04:	8f 90       	pop	r8
     f06:	7f 90       	pop	r7
     f08:	6f 90       	pop	r6
     f0a:	5f 90       	pop	r5
     f0c:	4f 90       	pop	r4
     f0e:	3f 90       	pop	r3
     f10:	2f 90       	pop	r2
     f12:	08 95       	ret

00000f14 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f14:	6f 92       	push	r6
     f16:	7f 92       	push	r7
     f18:	8f 92       	push	r8
     f1a:	9f 92       	push	r9
     f1c:	af 92       	push	r10
     f1e:	bf 92       	push	r11
     f20:	cf 92       	push	r12
     f22:	df 92       	push	r13
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	3b 01       	movw	r6, r22
     f2e:	4c 01       	movw	r8, r24
	// Reset the integrator error if specified
	if(reset){
     f30:	44 23       	and	r20, r20
     f32:	61 f0       	breq	.+24     	; 0xf4c <pidController+0x38>
		Ierror = 0;
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a0 e0       	ldi	r26, 0x00	; 0
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	80 93 aa 01 	sts	0x01AA, r24
     f40:	90 93 ab 01 	sts	0x01AB, r25
     f44:	a0 93 ac 01 	sts	0x01AC, r26
     f48:	b0 93 ad 01 	sts	0x01AD, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f4c:	c4 01       	movw	r24, r8
     f4e:	b3 01       	movw	r22, r6
     f50:	20 91 aa 01 	lds	r18, 0x01AA
     f54:	30 91 ab 01 	lds	r19, 0x01AB
     f58:	40 91 ac 01 	lds	r20, 0x01AC
     f5c:	50 91 ad 01 	lds	r21, 0x01AD
     f60:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
     f64:	5b 01       	movw	r10, r22
     f66:	6c 01       	movw	r12, r24
     f68:	60 93 aa 01 	sts	0x01AA, r22
     f6c:	70 93 ab 01 	sts	0x01AB, r23
     f70:	80 93 ac 01 	sts	0x01AC, r24
     f74:	90 93 ad 01 	sts	0x01AD, r25
     f78:	c4 01       	movw	r24, r8
     f7a:	b3 01       	movw	r22, r6
     f7c:	a4 01       	movw	r20, r8
     f7e:	93 01       	movw	r18, r6
     f80:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
     f84:	7b 01       	movw	r14, r22
     f86:	8c 01       	movw	r16, r24
     f88:	c4 01       	movw	r24, r8
     f8a:	b3 01       	movw	r22, r6
     f8c:	20 91 ae 01 	lds	r18, 0x01AE
     f90:	30 91 af 01 	lds	r19, 0x01AF
     f94:	40 91 b0 01 	lds	r20, 0x01B0
     f98:	50 91 b1 01 	lds	r21, 0x01B1
     f9c:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e2       	ldi	r20, 0x20	; 32
     fa6:	51 e4       	ldi	r21, 0x41	; 65
     fa8:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	c8 01       	movw	r24, r16
     fb2:	b7 01       	movw	r22, r14
     fb4:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
     fb8:	7b 01       	movw	r14, r22
     fba:	8c 01       	movw	r16, r24
     fbc:	c6 01       	movw	r24, r12
     fbe:	b5 01       	movw	r22, r10
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
     fcc:	9b 01       	movw	r18, r22
     fce:	ac 01       	movw	r20, r24
     fd0:	c8 01       	movw	r24, r16
     fd2:	b7 01       	movw	r22, r14
     fd4:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	df 90       	pop	r13
     fe2:	cf 90       	pop	r12
     fe4:	bf 90       	pop	r11
     fe6:	af 90       	pop	r10
     fe8:	9f 90       	pop	r9
     fea:	8f 90       	pop	r8
     fec:	7f 90       	pop	r7
     fee:	6f 90       	pop	r6
     ff0:	08 95       	ret

00000ff2 <check_threshhold>:
* Output Return:	char
* Overview:			This check the IR values to thresholds
********************************************************************/

char check_threshhold(float F, float B, float L, float R)
{
     ff2:	2f 92       	push	r2
     ff4:	6f 92       	push	r6
     ff6:	7f 92       	push	r7
     ff8:	8f 92       	push	r8
     ffa:	9f 92       	push	r9
     ffc:	af 92       	push	r10
     ffe:	bf 92       	push	r11
    1000:	cf 92       	push	r12
    1002:	df 92       	push	r13
    1004:	ef 92       	push	r14
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <check_threshhold+0x20>
    1012:	00 d0       	rcall	.+0      	; 0x1014 <check_threshhold+0x22>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	69 83       	std	Y+1, r22	; 0x01
    101a:	7a 83       	std	Y+2, r23	; 0x02
    101c:	8b 83       	std	Y+3, r24	; 0x03
    101e:	9c 83       	std	Y+4, r25	; 0x04
	char check = 0;
	check += 0b00000001*(ftIR < F);
    1020:	60 90 ba 01 	lds	r6, 0x01BA
    1024:	70 90 bb 01 	lds	r7, 0x01BB
    1028:	80 90 bc 01 	lds	r8, 0x01BC
    102c:	90 90 bd 01 	lds	r9, 0x01BD
	check += 0b00000010*(bkIR < B);
    1030:	60 91 be 01 	lds	r22, 0x01BE
    1034:	70 91 bf 01 	lds	r23, 0x01BF
    1038:	80 91 c0 01 	lds	r24, 0x01C0
    103c:	90 91 c1 01 	lds	r25, 0x01C1
    1040:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    1044:	28 2e       	mov	r2, r24
    1046:	22 1c       	adc	r2, r2
    1048:	22 24       	eor	r2, r2
    104a:	22 1c       	adc	r2, r2
    104c:	22 0c       	add	r2, r2
	check += 0b00000100*(ltIR < L);
    104e:	60 91 b2 01 	lds	r22, 0x01B2
    1052:	70 91 b3 01 	lds	r23, 0x01B3
    1056:	80 91 b4 01 	lds	r24, 0x01B4
    105a:	90 91 b5 01 	lds	r25, 0x01B5
    105e:	a8 01       	movw	r20, r16
    1060:	97 01       	movw	r18, r14
    1062:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    1066:	08 2f       	mov	r16, r24
    1068:	00 1f       	adc	r16, r16
    106a:	00 27       	eor	r16, r16
    106c:	00 1f       	adc	r16, r16
    106e:	00 0f       	add	r16, r16
    1070:	00 0f       	add	r16, r16
	check += 0b00001000*(rtIR < R);
    1072:	60 91 b6 01 	lds	r22, 0x01B6
    1076:	70 91 b7 01 	lds	r23, 0x01B7
    107a:	80 91 b8 01 	lds	r24, 0x01B8
    107e:	90 91 b9 01 	lds	r25, 0x01B9
    1082:	a6 01       	movw	r20, r12
    1084:	95 01       	movw	r18, r10
    1086:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    108a:	18 2f       	mov	r17, r24
    108c:	11 1f       	adc	r17, r17
    108e:	11 27       	eor	r17, r17
    1090:	11 1f       	adc	r17, r17
    1092:	11 0f       	add	r17, r17
    1094:	11 0f       	add	r17, r17
    1096:	11 0f       	add	r17, r17

char check_threshhold(float F, float B, float L, float R)
{
	char check = 0;
	check += 0b00000001*(ftIR < F);
	check += 0b00000010*(bkIR < B);
    1098:	ff 24       	eor	r15, r15
    109a:	c4 01       	movw	r24, r8
    109c:	b3 01       	movw	r22, r6
    109e:	29 81       	ldd	r18, Y+1	; 0x01
    10a0:	3a 81       	ldd	r19, Y+2	; 0x02
    10a2:	4b 81       	ldd	r20, Y+3	; 0x03
    10a4:	5c 81       	ldd	r21, Y+4	; 0x04
    10a6:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    10aa:	88 23       	and	r24, r24
    10ac:	14 f4       	brge	.+4      	; 0x10b2 <check_threshhold+0xc0>
    10ae:	ff 24       	eor	r15, r15
    10b0:	f3 94       	inc	r15
    10b2:	2f 0c       	add	r2, r15
	check += 0b00000100*(ltIR < L);
    10b4:	20 0e       	add	r2, r16
	check += 0b00001000*(rtIR < R);
	return check;	
}
    10b6:	82 2d       	mov	r24, r2
    10b8:	81 0f       	add	r24, r17
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	9f 90       	pop	r9
    10d8:	8f 90       	pop	r8
    10da:	7f 90       	pop	r7
    10dc:	6f 90       	pop	r6
    10de:	2f 90       	pop	r2
    10e0:	08 95       	ret

000010e2 <move_arc_stwt>:
		// bool stepper_FWD = arcLength >= 0;
		// STEPPER_move_stwt( STEPPER_BOTH, 
		// stepper_FWD, stepper_NUM, arcSpeed, arcAccel, arcBrk, // Left
		// stepper_FWD, stepper_NUM, arcSpeed, arcAccel, arcBrk); // Right
	// }
}
    10e2:	08 95       	ret

000010e4 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{
	unsigned char sensors = ATTINY_get_sensors();
    10e4:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    10e8:	28 2f       	mov	r18, r24
    10ea:	21 70       	andi	r18, 0x01	; 1
    10ec:	20 93 b1 03 	sts	0x03B1, r18
	leftContact =  (0b00000010 & sensors)>>1;
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	82 70       	andi	r24, 0x02	; 2
    10f4:	90 70       	andi	r25, 0x00	; 0
    10f6:	95 95       	asr	r25
    10f8:	87 95       	ror	r24
    10fa:	80 93 b2 03 	sts	0x03B2, r24
	
	
}
    10fe:	08 95       	ret

00001100 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1100:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1104:	60 93 c2 01 	sts	0x01C2, r22
    1108:	70 93 c3 01 	sts	0x01C3, r23
    110c:	80 93 c4 01 	sts	0x01C4, r24
    1110:	90 93 c5 01 	sts	0x01C5, r25
	leftLightVolt = getLeftLight();
    1114:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1118:	60 93 c6 01 	sts	0x01C6, r22
    111c:	70 93 c7 01 	sts	0x01C7, r23
    1120:	80 93 c8 01 	sts	0x01C8, r24
    1124:	90 93 c9 01 	sts	0x01C9, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear;
}
    1128:	08 95       	ret

0000112a <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    112a:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    112e:	60 93 ba 01 	sts	0x01BA, r22
    1132:	70 93 bb 01 	sts	0x01BB, r23
    1136:	80 93 bc 01 	sts	0x01BC, r24
    113a:	90 93 bd 01 	sts	0x01BD, r25
	bkIR = 50;
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	a8 e4       	ldi	r26, 0x48	; 72
    1144:	b2 e4       	ldi	r27, 0x42	; 66
    1146:	80 93 be 01 	sts	0x01BE, r24
    114a:	90 93 bf 01 	sts	0x01BF, r25
    114e:	a0 93 c0 01 	sts	0x01C0, r26
    1152:	b0 93 c1 01 	sts	0x01C1, r27
	ltIR = getLeftIR();
    1156:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    115a:	60 93 b2 01 	sts	0x01B2, r22
    115e:	70 93 b3 01 	sts	0x01B3, r23
    1162:	80 93 b4 01 	sts	0x01B4, r24
    1166:	90 93 b5 01 	sts	0x01B5, r25
	rtIR = getRightIR();
    116a:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    116e:	60 93 b6 01 	sts	0x01B6, r22
    1172:	70 93 b7 01 	sts	0x01B7, r23
    1176:	80 93 b8 01 	sts	0x01B8, r24
    117a:	90 93 b9 01 	sts	0x01B9, r25
}
    117e:	08 95       	ret

00001180 <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
    1180:	2f 92       	push	r2
    1182:	3f 92       	push	r3
    1184:	4f 92       	push	r4
    1186:	5f 92       	push	r5
    1188:	6f 92       	push	r6
    118a:	7f 92       	push	r7
    118c:	8f 92       	push	r8
    118e:	9f 92       	push	r9
    1190:	af 92       	push	r10
    1192:	bf 92       	push	r11
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <moveAway+0x26>
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <moveAway+0x28>
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    11ac:	60 90 ba 01 	lds	r6, 0x01BA
    11b0:	70 90 bb 01 	lds	r7, 0x01BB
    11b4:	80 90 bc 01 	lds	r8, 0x01BC
    11b8:	90 90 bd 01 	lds	r9, 0x01BD
    11bc:	a0 90 be 01 	lds	r10, 0x01BE
    11c0:	b0 90 bf 01 	lds	r11, 0x01BF
    11c4:	c0 90 c0 01 	lds	r12, 0x01C0
    11c8:	d0 90 c1 01 	lds	r13, 0x01C1
	float moveX = rtIR - ltIR;
    11cc:	e0 90 b6 01 	lds	r14, 0x01B6
    11d0:	f0 90 b7 01 	lds	r15, 0x01B7
    11d4:	00 91 b8 01 	lds	r16, 0x01B8
    11d8:	10 91 b9 01 	lds	r17, 0x01B9
    11dc:	80 91 b2 01 	lds	r24, 0x01B2
    11e0:	90 91 b3 01 	lds	r25, 0x01B3
    11e4:	a0 91 b4 01 	lds	r26, 0x01B4
    11e8:	b0 91 b5 01 	lds	r27, 0x01B5
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	ab 83       	std	Y+3, r26	; 0x03
    11f2:	bc 83       	std	Y+4, r27	; 0x04
    11f4:	c8 01       	movw	r24, r16
    11f6:	b7 01       	movw	r22, r14
    11f8:	29 81       	ldd	r18, Y+1	; 0x01
    11fa:	3a 81       	ldd	r19, Y+2	; 0x02
    11fc:	4b 81       	ldd	r20, Y+3	; 0x03
    11fe:	5c 81       	ldd	r21, Y+4	; 0x04
    1200:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
    1204:	1b 01       	movw	r2, r22
    1206:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
    1208:	c4 01       	movw	r24, r8
    120a:	b3 01       	movw	r22, r6
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 ee       	ldi	r20, 0xE0	; 224
    1212:	50 e4       	ldi	r21, 0x40	; 64
    1214:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    1218:	87 fd       	sbrc	r24, 7
    121a:	0b c0       	rjmp	.+22     	; 0x1232 <moveAway+0xb2>
    121c:	c6 01       	movw	r24, r12
    121e:	b5 01       	movw	r22, r10
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 ee       	ldi	r20, 0xE0	; 224
    1226:	50 e4       	ldi	r21, 0x40	; 64
    1228:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    122c:	88 23       	and	r24, r24
    122e:	0c f0       	brlt	.+2      	; 0x1232 <moveAway+0xb2>
    1230:	68 c0       	rjmp	.+208    	; 0x1302 <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    1232:	c4 01       	movw	r24, r8
    1234:	b3 01       	movw	r22, r6
    1236:	a6 01       	movw	r20, r12
    1238:	95 01       	movw	r18, r10
    123a:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
    123e:	7b 01       	movw	r14, r22
    1240:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
    1242:	77 24       	eor	r7, r7
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	0e 94 3c 24 	call	0x4878	; 0x4878 <__gesf2>
    1250:	88 23       	and	r24, r24
    1252:	14 f0       	brlt	.+4      	; 0x1258 <moveAway+0xd8>
    1254:	77 24       	eor	r7, r7
    1256:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1258:	c8 01       	movw	r24, r16
    125a:	b7 01       	movw	r22, r14
    125c:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__fixsfsi>
    1260:	9b 01       	movw	r18, r22
    1262:	77 ff       	sbrs	r23, 7
    1264:	03 c0       	rjmp	.+6      	; 0x126c <moveAway+0xec>
    1266:	30 95       	com	r19
    1268:	21 95       	neg	r18
    126a:	3f 4f       	sbci	r19, 0xFF	; 255
    126c:	b9 01       	movw	r22, r18
    126e:	88 27       	eor	r24, r24
    1270:	77 fd       	sbrc	r23, 7
    1272:	80 95       	com	r24
    1274:	98 2f       	mov	r25, r24
    1276:	0e 94 8c 23 	call	0x4718	; 0x4718 <__floatsisf>
    127a:	6b 01       	movw	r12, r22
    127c:	7c 01       	movw	r14, r24
    127e:	ad b7       	in	r26, 0x3d	; 61
    1280:	be b7       	in	r27, 0x3e	; 62
    1282:	19 97       	sbiw	r26, 0x09	; 9
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	be bf       	out	0x3e, r27	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	ad bf       	out	0x3d, r26	; 61
    128e:	0d b7       	in	r16, 0x3d	; 61
    1290:	1e b7       	in	r17, 0x3e	; 62
    1292:	0f 5f       	subi	r16, 0xFF	; 255
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	a2 01       	movw	r20, r4
    1298:	91 01       	movw	r18, r2
    129a:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
    129e:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__fixunssfsi>
    12a2:	4b 01       	movw	r8, r22
    12a4:	5c 01       	movw	r10, r24
    12a6:	82 e3       	ldi	r24, 0x32	; 50
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	f8 01       	movw	r30, r16
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	80 83       	st	Z, r24
    12b0:	c7 01       	movw	r24, r14
    12b2:	b6 01       	movw	r22, r12
    12b4:	a2 01       	movw	r20, r4
    12b6:	91 01       	movw	r18, r2
    12b8:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
    12bc:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__fixunssfsi>
    12c0:	d8 01       	movw	r26, r16
    12c2:	13 96       	adiw	r26, 0x03	; 3
    12c4:	7c 93       	st	X, r23
    12c6:	6e 93       	st	-X, r22
    12c8:	12 97       	sbiw	r26, 0x02	; 2
    12ca:	82 ec       	ldi	r24, 0xC2	; 194
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	15 96       	adiw	r26, 0x05	; 5
    12d0:	9c 93       	st	X, r25
    12d2:	8e 93       	st	-X, r24
    12d4:	14 97       	sbiw	r26, 0x04	; 4
    12d6:	16 96       	adiw	r26, 0x06	; 6
    12d8:	1c 92       	st	X, r1
    12da:	16 97       	sbiw	r26, 0x06	; 6
    12dc:	18 96       	adiw	r26, 0x08	; 8
    12de:	1c 92       	st	X, r1
    12e0:	1e 92       	st	-X, r1
    12e2:	17 97       	sbiw	r26, 0x07	; 7
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	62 e0       	ldi	r22, 0x02	; 2
    12e8:	47 2d       	mov	r20, r7
    12ea:	22 e3       	ldi	r18, 0x32	; 50
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	84 01       	movw	r16, r8
    12f0:	e2 ec       	ldi	r30, 0xC2	; 194
    12f2:	ee 2e       	mov	r14, r30
    12f4:	e1 e0       	ldi	r30, 0x01	; 1
    12f6:	fe 2e       	mov	r15, r30
    12f8:	cc 24       	eor	r12, r12
    12fa:	aa 24       	eor	r10, r10
    12fc:	bb 24       	eor	r11, r11
    12fe:	87 2c       	mov	r8, r7
    1300:	82 c0       	rjmp	.+260    	; 0x1406 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
    1302:	c8 01       	movw	r24, r16
    1304:	b7 01       	movw	r22, r14
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	51 e4       	ldi	r21, 0x41	; 65
    130e:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    1312:	88 23       	and	r24, r24
    1314:	b4 f5       	brge	.+108    	; 0x1382 <moveAway+0x202>
	{
			BOOL moveForwardR = ~(moveX <= 0);
			BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1316:	c2 01       	movw	r24, r4
    1318:	b1 01       	movw	r22, r2
    131a:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__fixsfsi>
    131e:	8b 01       	movw	r16, r22
    1320:	77 ff       	sbrs	r23, 7
    1322:	03 c0       	rjmp	.+6      	; 0x132a <moveAway+0x1aa>
    1324:	10 95       	com	r17
    1326:	01 95       	neg	r16
    1328:	1f 4f       	sbci	r17, 0xFF	; 255
    132a:	2d b7       	in	r18, 0x3d	; 61
    132c:	3e b7       	in	r19, 0x3e	; 62
    132e:	29 50       	subi	r18, 0x09	; 9
    1330:	30 40       	sbci	r19, 0x00	; 0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	3e bf       	out	0x3e, r19	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	2d bf       	out	0x3d, r18	; 61
    133c:	ed b7       	in	r30, 0x3d	; 61
    133e:	fe b7       	in	r31, 0x3e	; 62
    1340:	31 96       	adiw	r30, 0x01	; 1
    1342:	88 ec       	ldi	r24, 0xC8	; 200
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	ad b7       	in	r26, 0x3d	; 61
    1348:	be b7       	in	r27, 0x3e	; 62
    134a:	12 96       	adiw	r26, 0x02	; 2
    134c:	9c 93       	st	X, r25
    134e:	8e 93       	st	-X, r24
    1350:	11 97       	sbiw	r26, 0x01	; 1
    1352:	13 83       	std	Z+3, r17	; 0x03
    1354:	02 83       	std	Z+2, r16	; 0x02
    1356:	82 ec       	ldi	r24, 0xC2	; 194
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	95 83       	std	Z+5, r25	; 0x05
    135c:	84 83       	std	Z+4, r24	; 0x04
    135e:	16 82       	std	Z+6, r1	; 0x06
    1360:	10 86       	std	Z+8, r1	; 0x08
    1362:	17 82       	std	Z+7, r1	; 0x07
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	62 e0       	ldi	r22, 0x02	; 2
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	28 ec       	ldi	r18, 0xC8	; 200
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	72 ec       	ldi	r23, 0xC2	; 194
    1370:	e7 2e       	mov	r14, r23
    1372:	71 e0       	ldi	r23, 0x01	; 1
    1374:	f7 2e       	mov	r15, r23
    1376:	cc 24       	eor	r12, r12
    1378:	aa 24       	eor	r10, r10
    137a:	bb 24       	eor	r11, r11
    137c:	88 24       	eor	r8, r8
    137e:	83 94       	inc	r8
    1380:	42 c0       	rjmp	.+132    	; 0x1406 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
    1382:	69 81       	ldd	r22, Y+1	; 0x01
    1384:	7a 81       	ldd	r23, Y+2	; 0x02
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	51 e4       	ldi	r21, 0x41	; 65
    1392:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    1396:	87 fd       	sbrc	r24, 7
    1398:	02 c0       	rjmp	.+4      	; 0x139e <moveAway+0x21e>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	3f c0       	rjmp	.+126    	; 0x141c <moveAway+0x29c>
	{
			BOOL moveForwardR = ~(moveX <= 0);
			BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    139e:	c2 01       	movw	r24, r4
    13a0:	b1 01       	movw	r22, r2
    13a2:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__fixsfsi>
    13a6:	8b 01       	movw	r16, r22
    13a8:	77 ff       	sbrs	r23, 7
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <moveAway+0x232>
    13ac:	10 95       	com	r17
    13ae:	01 95       	neg	r16
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	2d b7       	in	r18, 0x3d	; 61
    13b4:	3e b7       	in	r19, 0x3e	; 62
    13b6:	29 50       	subi	r18, 0x09	; 9
    13b8:	30 40       	sbci	r19, 0x00	; 0
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	3e bf       	out	0x3e, r19	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	2d bf       	out	0x3d, r18	; 61
    13c4:	ed b7       	in	r30, 0x3d	; 61
    13c6:	fe b7       	in	r31, 0x3e	; 62
    13c8:	31 96       	adiw	r30, 0x01	; 1
    13ca:	88 ec       	ldi	r24, 0xC8	; 200
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	ad b7       	in	r26, 0x3d	; 61
    13d0:	be b7       	in	r27, 0x3e	; 62
    13d2:	12 96       	adiw	r26, 0x02	; 2
    13d4:	9c 93       	st	X, r25
    13d6:	8e 93       	st	-X, r24
    13d8:	11 97       	sbiw	r26, 0x01	; 1
    13da:	13 83       	std	Z+3, r17	; 0x03
    13dc:	02 83       	std	Z+2, r16	; 0x02
    13de:	82 ec       	ldi	r24, 0xC2	; 194
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	95 83       	std	Z+5, r25	; 0x05
    13e4:	84 83       	std	Z+4, r24	; 0x04
    13e6:	16 82       	std	Z+6, r1	; 0x06
    13e8:	10 86       	std	Z+8, r1	; 0x08
    13ea:	17 82       	std	Z+7, r1	; 0x07
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	62 e0       	ldi	r22, 0x02	; 2
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	28 ec       	ldi	r18, 0xC8	; 200
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	52 ec       	ldi	r21, 0xC2	; 194
    13f8:	e5 2e       	mov	r14, r21
    13fa:	51 e0       	ldi	r21, 0x01	; 1
    13fc:	f5 2e       	mov	r15, r21
    13fe:	cc 24       	eor	r12, r12
    1400:	aa 24       	eor	r10, r10
    1402:	bb 24       	eor	r11, r11
    1404:	88 24       	eor	r8, r8
    1406:	0e 94 b2 12 	call	0x2564	; 0x2564 <STEPPER_move>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	ed b7       	in	r30, 0x3d	; 61
    140e:	fe b7       	in	r31, 0x3e	; 62
    1410:	39 96       	adiw	r30, 0x09	; 9
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	fe bf       	out	0x3e, r31	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	bf 90       	pop	r11
    1436:	af 90       	pop	r10
    1438:	9f 90       	pop	r9
    143a:	8f 90       	pop	r8
    143c:	7f 90       	pop	r7
    143e:	6f 90       	pop	r6
    1440:	5f 90       	pop	r5
    1442:	4f 90       	pop	r4
    1444:	3f 90       	pop	r3
    1446:	2f 90       	pop	r2
    1448:	08 95       	ret

0000144a <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    144a:	5f 92       	push	r5
    144c:	6f 92       	push	r6
    144e:	7f 92       	push	r7
    1450:	8f 92       	push	r8
    1452:	9f 92       	push	r9
    1454:	af 92       	push	r10
    1456:	bf 92       	push	r11
    1458:	cf 92       	push	r12
    145a:	df 92       	push	r13
    145c:	ef 92       	push	r14
    145e:	ff 92       	push	r15
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    1464:	e0 90 ba 01 	lds	r14, 0x01BA
    1468:	f0 90 bb 01 	lds	r15, 0x01BB
    146c:	00 91 bc 01 	lds	r16, 0x01BC
    1470:	10 91 bd 01 	lds	r17, 0x01BD
    1474:	55 24       	eor	r5, r5
    1476:	c8 01       	movw	r24, r16
    1478:	b7 01       	movw	r22, r14
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	48 eb       	ldi	r20, 0xB8	; 184
    1480:	51 e4       	ldi	r21, 0x41	; 65
    1482:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    1486:	88 23       	and	r24, r24
    1488:	14 f4       	brge	.+4      	; 0x148e <moveWall+0x44>
    148a:	55 24       	eor	r5, r5
    148c:	53 94       	inc	r5
    148e:	a0 90 b6 01 	lds	r10, 0x01B6
    1492:	b0 90 b7 01 	lds	r11, 0x01B7
    1496:	c0 90 b8 01 	lds	r12, 0x01B8
    149a:	d0 90 b9 01 	lds	r13, 0x01B9
    149e:	60 90 b2 01 	lds	r6, 0x01B2
    14a2:	70 90 b3 01 	lds	r7, 0x01B3
    14a6:	80 90 b4 01 	lds	r8, 0x01B4
    14aa:	90 90 b5 01 	lds	r9, 0x01B5
	if(!isWall){	
    14ae:	55 20       	and	r5, r5
    14b0:	31 f5       	brne	.+76     	; 0x14fe <moveWall+0xb4>
    14b2:	60 91 be 01 	lds	r22, 0x01BE
    14b6:	70 91 bf 01 	lds	r23, 0x01BF
    14ba:	80 91 c0 01 	lds	r24, 0x01C0
    14be:	90 91 c1 01 	lds	r25, 0x01C1
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	48 eb       	ldi	r20, 0xB8	; 184
    14c8:	51 e4       	ldi	r21, 0x41	; 65
    14ca:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    14ce:	87 fd       	sbrc	r24, 7
    14d0:	16 c0       	rjmp	.+44     	; 0x14fe <moveWall+0xb4>
    14d2:	c6 01       	movw	r24, r12
    14d4:	b5 01       	movw	r22, r10
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 ea       	ldi	r20, 0xA0	; 160
    14dc:	51 e4       	ldi	r21, 0x41	; 65
    14de:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    14e2:	87 fd       	sbrc	r24, 7
    14e4:	0c c0       	rjmp	.+24     	; 0x14fe <moveWall+0xb4>
    14e6:	c4 01       	movw	r24, r8
    14e8:	b3 01       	movw	r22, r6
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 ea       	ldi	r20, 0xA0	; 160
    14f0:	51 e4       	ldi	r21, 0x41	; 65
    14f2:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    14f6:	87 fd       	sbrc	r24, 7
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <moveWall+0xb4>
	
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	
}
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	09 c1       	rjmp	.+530    	; 0x1710 <moveWall+0x2c6>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    14fe:	c6 01       	movw	r24, r12
    1500:	b5 01       	movw	r22, r10
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 ea       	ldi	r20, 0xA0	; 160
    1508:	51 e4       	ldi	r21, 0x41	; 65
    150a:	0e 94 3c 24 	call	0x4878	; 0x4878 <__gesf2>
    150e:	18 16       	cp	r1, r24
    1510:	64 f4       	brge	.+24     	; 0x152a <moveWall+0xe0>
		rtIR = IR_WALL_R_THRESH-15;
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	a0 ea       	ldi	r26, 0xA0	; 160
    1518:	b0 e4       	ldi	r27, 0x40	; 64
    151a:	80 93 b6 01 	sts	0x01B6, r24
    151e:	90 93 b7 01 	sts	0x01B7, r25
    1522:	a0 93 b8 01 	sts	0x01B8, r26
    1526:	b0 93 b9 01 	sts	0x01B9, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    152a:	c4 01       	movw	r24, r8
    152c:	b3 01       	movw	r22, r6
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 ea       	ldi	r20, 0xA0	; 160
    1534:	51 e4       	ldi	r21, 0x41	; 65
    1536:	0e 94 3c 24 	call	0x4878	; 0x4878 <__gesf2>
    153a:	18 16       	cp	r1, r24
    153c:	14 f0       	brlt	.+4      	; 0x1542 <moveWall+0xf8>
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	0d c0       	rjmp	.+26     	; 0x155c <moveWall+0x112>
		ltIR = IR_WALL_L_THRESH-15;
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a0 ea       	ldi	r26, 0xA0	; 160
    1548:	b0 e4       	ldi	r27, 0x40	; 64
    154a:	80 93 b2 01 	sts	0x01B2, r24
    154e:	90 93 b3 01 	sts	0x01B3, r25
    1552:	a0 93 b4 01 	sts	0x01B4, r26
    1556:	b0 93 b5 01 	sts	0x01B5, r27
    155a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    155c:	55 20       	and	r5, r5
    155e:	81 f1       	breq	.+96     	; 0x15c0 <moveWall+0x176>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    1560:	88 23       	and	r24, r24
    1562:	89 f0       	breq	.+34     	; 0x1586 <moveWall+0x13c>
		{
			error = rtIR - (ltIR + ftIR*ftIR);
    1564:	c8 01       	movw	r24, r16
    1566:	b7 01       	movw	r22, r14
    1568:	a8 01       	movw	r20, r16
    156a:	97 01       	movw	r18, r14
    156c:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    1570:	20 91 b2 01 	lds	r18, 0x01B2
    1574:	30 91 b3 01 	lds	r19, 0x01B3
    1578:	40 91 b4 01 	lds	r20, 0x01B4
    157c:	50 91 b5 01 	lds	r21, 0x01B5
    1580:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
    1584:	12 c0       	rjmp	.+36     	; 0x15aa <moveWall+0x160>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - ftIR*ftIR);
    1586:	c8 01       	movw	r24, r16
    1588:	b7 01       	movw	r22, r14
    158a:	a8 01       	movw	r20, r16
    158c:	97 01       	movw	r18, r14
    158e:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    1592:	9b 01       	movw	r18, r22
    1594:	ac 01       	movw	r20, r24
    1596:	60 91 b2 01 	lds	r22, 0x01B2
    159a:	70 91 b3 01 	lds	r23, 0x01B3
    159e:	80 91 b4 01 	lds	r24, 0x01B4
    15a2:	90 91 b5 01 	lds	r25, 0x01B5
    15a6:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
    15aa:	9b 01       	movw	r18, r22
    15ac:	ac 01       	movw	r20, r24
    15ae:	60 91 b6 01 	lds	r22, 0x01B6
    15b2:	70 91 b7 01 	lds	r23, 0x01B7
    15b6:	80 91 b8 01 	lds	r24, 0x01B8
    15ba:	90 91 b9 01 	lds	r25, 0x01B9
    15be:	10 c0       	rjmp	.+32     	; 0x15e0 <moveWall+0x196>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    15c0:	60 91 b6 01 	lds	r22, 0x01B6
    15c4:	70 91 b7 01 	lds	r23, 0x01B7
    15c8:	80 91 b8 01 	lds	r24, 0x01B8
    15cc:	90 91 b9 01 	lds	r25, 0x01B9
    15d0:	20 91 b2 01 	lds	r18, 0x01B2
    15d4:	30 91 b3 01 	lds	r19, 0x01B3
    15d8:	40 91 b4 01 	lds	r20, 0x01B4
    15dc:	50 91 b5 01 	lds	r21, 0x01B5
    15e0:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
    15e4:	e6 2f       	mov	r30, r22
	}

	// Use the PID controller function to calculate error
	float effort = pidController(error, 0);
    15e6:	2e 2f       	mov	r18, r30
    15e8:	37 2f       	mov	r19, r23
    15ea:	48 2f       	mov	r20, r24
    15ec:	59 2f       	mov	r21, r25
    15ee:	b9 01       	movw	r22, r18
    15f0:	ca 01       	movw	r24, r20
    15f2:	40 e0       	ldi	r20, 0x00	; 0
    15f4:	0e 94 8a 07 	call	0xf14	; 0xf14 <pidController>
    15f8:	6b 01       	movw	r12, r22
    15fa:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    15fc:	0e 94 59 23 	call	0x46b2	; 0x46b2 <__fixsfsi>
    1600:	8b 01       	movw	r16, r22
    1602:	77 ff       	sbrs	r23, 7
    1604:	03 c0       	rjmp	.+6      	; 0x160c <moveWall+0x1c2>
    1606:	10 95       	com	r17
    1608:	01 95       	neg	r16
    160a:	1f 4f       	sbci	r17, 0xFF	; 255
    160c:	05 36       	cpi	r16, 0x65	; 101
    160e:	11 05       	cpc	r17, r1
    1610:	fc f0       	brlt	.+62     	; 0x1650 <moveWall+0x206>
    1612:	c7 01       	movw	r24, r14
    1614:	b6 01       	movw	r22, r12
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	40 e0       	ldi	r20, 0x00	; 0
    161c:	50 e0       	ldi	r21, 0x00	; 0
    161e:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    1622:	88 23       	and	r24, r24
    1624:	a9 f0       	breq	.+42     	; 0x1650 <moveWall+0x206>
		effort = MAX_EFFORT*(effort/abs(effort));
    1626:	b8 01       	movw	r22, r16
    1628:	88 27       	eor	r24, r24
    162a:	77 fd       	sbrc	r23, 7
    162c:	80 95       	com	r24
    162e:	98 2f       	mov	r25, r24
    1630:	0e 94 8c 23 	call	0x4718	; 0x4718 <__floatsisf>
    1634:	9b 01       	movw	r18, r22
    1636:	ac 01       	movw	r20, r24
    1638:	c7 01       	movw	r24, r14
    163a:	b6 01       	movw	r22, r12
    163c:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
    1640:	20 e0       	ldi	r18, 0x00	; 0
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	48 ec       	ldi	r20, 0xC8	; 200
    1646:	52 e4       	ldi	r21, 0x42	; 66
    1648:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    164c:	6b 01       	movw	r12, r22
    164e:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    1650:	c7 01       	movw	r24, r14
    1652:	b6 01       	movw	r22, r12
    1654:	20 e0       	ldi	r18, 0x00	; 0
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	48 ec       	ldi	r20, 0xC8	; 200
    165a:	52 e4       	ldi	r21, 0x42	; 66
    165c:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
    1660:	6b 01       	movw	r12, r22
    1662:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    1664:	8d b7       	in	r24, 0x3d	; 61
    1666:	9e b7       	in	r25, 0x3e	; 62
    1668:	09 97       	sbiw	r24, 0x09	; 9
    166a:	0f b6       	in	r0, 0x3f	; 63
    166c:	f8 94       	cli
    166e:	9e bf       	out	0x3e, r25	; 62
    1670:	0f be       	out	0x3f, r0	; 63
    1672:	8d bf       	out	0x3d, r24	; 61
    1674:	0d b7       	in	r16, 0x3d	; 61
    1676:	1e b7       	in	r17, 0x3e	; 62
    1678:	0f 5f       	subi	r16, 0xFF	; 255
    167a:	1f 4f       	sbci	r17, 0xFF	; 255
    167c:	c7 01       	movw	r24, r14
    167e:	b6 01       	movw	r22, r12
    1680:	20 e0       	ldi	r18, 0x00	; 0
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	48 ec       	ldi	r20, 0xC8	; 200
    1686:	52 e4       	ldi	r21, 0x42	; 66
    1688:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    168c:	20 e0       	ldi	r18, 0x00	; 0
    168e:	30 e0       	ldi	r19, 0x00	; 0
    1690:	48 ec       	ldi	r20, 0xC8	; 200
    1692:	52 e4       	ldi	r21, 0x42	; 66
    1694:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
    1698:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__fixunssfsi>
    169c:	4b 01       	movw	r8, r22
    169e:	5c 01       	movw	r10, r24
    16a0:	82 e3       	ldi	r24, 0x32	; 50
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	f8 01       	movw	r30, r16
    16a6:	91 83       	std	Z+1, r25	; 0x01
    16a8:	80 83       	st	Z, r24
    16aa:	c7 01       	movw	r24, r14
    16ac:	b6 01       	movw	r22, r12
    16ae:	20 e0       	ldi	r18, 0x00	; 0
    16b0:	30 e0       	ldi	r19, 0x00	; 0
    16b2:	48 ec       	ldi	r20, 0xC8	; 200
    16b4:	52 ec       	ldi	r21, 0xC2	; 194
    16b6:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	48 ec       	ldi	r20, 0xC8	; 200
    16c0:	52 e4       	ldi	r21, 0x42	; 66
    16c2:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
    16c6:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__fixunssfsi>
    16ca:	f8 01       	movw	r30, r16
    16cc:	73 83       	std	Z+3, r23	; 0x03
    16ce:	62 83       	std	Z+2, r22	; 0x02
    16d0:	82 ec       	ldi	r24, 0xC2	; 194
    16d2:	91 e0       	ldi	r25, 0x01	; 1
    16d4:	95 83       	std	Z+5, r25	; 0x05
    16d6:	84 83       	std	Z+4, r24	; 0x04
    16d8:	16 82       	std	Z+6, r1	; 0x06
    16da:	10 86       	std	Z+8, r1	; 0x08
    16dc:	17 82       	std	Z+7, r1	; 0x07
    16de:	81 e0       	ldi	r24, 0x01	; 1
    16e0:	62 e0       	ldi	r22, 0x02	; 2
    16e2:	41 e0       	ldi	r20, 0x01	; 1
    16e4:	22 e3       	ldi	r18, 0x32	; 50
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	84 01       	movw	r16, r8
    16ea:	f2 ec       	ldi	r31, 0xC2	; 194
    16ec:	ef 2e       	mov	r14, r31
    16ee:	f1 e0       	ldi	r31, 0x01	; 1
    16f0:	ff 2e       	mov	r15, r31
    16f2:	cc 24       	eor	r12, r12
    16f4:	aa 24       	eor	r10, r10
    16f6:	bb 24       	eor	r11, r11
    16f8:	88 24       	eor	r8, r8
    16fa:	83 94       	inc	r8
    16fc:	0e 94 b2 12 	call	0x2564	; 0x2564 <STEPPER_move>
    1700:	8d b7       	in	r24, 0x3d	; 61
    1702:	9e b7       	in	r25, 0x3e	; 62
    1704:	09 96       	adiw	r24, 0x09	; 9
    1706:	0f b6       	in	r0, 0x3f	; 63
    1708:	f8 94       	cli
    170a:	9e bf       	out	0x3e, r25	; 62
    170c:	0f be       	out	0x3f, r0	; 63
    170e:	8d bf       	out	0x3d, r24	; 61
	
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	
}
    1710:	1f 91       	pop	r17
    1712:	0f 91       	pop	r16
    1714:	ff 90       	pop	r15
    1716:	ef 90       	pop	r14
    1718:	df 90       	pop	r13
    171a:	cf 90       	pop	r12
    171c:	bf 90       	pop	r11
    171e:	af 90       	pop	r10
    1720:	9f 90       	pop	r9
    1722:	8f 90       	pop	r8
    1724:	7f 90       	pop	r7
    1726:	6f 90       	pop	r6
    1728:	5f 90       	pop	r5
    172a:	08 95       	ret

0000172c <moveLight>:
					 1: Light_Lover = track the light but do not collide
					 2: Light_Aggro = run towards the light and touch it
					 3: Light_Shy = run away from the light
********************************************************************/
char moveLight( int lightBehavior)
{
    172c:	3f 92       	push	r3
    172e:	4f 92       	push	r4
    1730:	5f 92       	push	r5
    1732:	6f 92       	push	r6
    1734:	7f 92       	push	r7
    1736:	8f 92       	push	r8
    1738:	9f 92       	push	r9
    173a:	af 92       	push	r10
    173c:	bf 92       	push	r11
    173e:	cf 92       	push	r12
    1740:	df 92       	push	r13
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	7c 01       	movw	r14, r24
	// call the moveWall() to detect walls and return a Boolean
	
	BOOL isLight = (rightLightVolt > LIGHT_R_THRESH)||(leftLightVolt > LIGHT_L_THRESH);
    174c:	40 90 c2 01 	lds	r4, 0x01C2
    1750:	50 90 c3 01 	lds	r5, 0x01C3
    1754:	60 90 c4 01 	lds	r6, 0x01C4
    1758:	70 90 c5 01 	lds	r7, 0x01C5
    175c:	c3 01       	movw	r24, r6
    175e:	b2 01       	movw	r22, r4
    1760:	2b e7       	ldi	r18, 0x7B	; 123
    1762:	34 e1       	ldi	r19, 0x14	; 20
    1764:	46 e8       	ldi	r20, 0x86	; 134
    1766:	50 e4       	ldi	r21, 0x40	; 64
    1768:	0e 94 3c 24 	call	0x4878	; 0x4878 <__gesf2>
    176c:	18 16       	cp	r1, r24
    176e:	94 f0       	brlt	.+36     	; 0x1794 <moveLight+0x68>
    1770:	00 e0       	ldi	r16, 0x00	; 0
    1772:	10 e0       	ldi	r17, 0x00	; 0
    1774:	60 91 c6 01 	lds	r22, 0x01C6
    1778:	70 91 c7 01 	lds	r23, 0x01C7
    177c:	80 91 c8 01 	lds	r24, 0x01C8
    1780:	90 91 c9 01 	lds	r25, 0x01C9
    1784:	2b e7       	ldi	r18, 0x7B	; 123
    1786:	34 e1       	ldi	r19, 0x14	; 20
    1788:	46 e8       	ldi	r20, 0x86	; 134
    178a:	50 e4       	ldi	r21, 0x40	; 64
    178c:	0e 94 3c 24 	call	0x4878	; 0x4878 <__gesf2>
    1790:	18 16       	cp	r1, r24
    1792:	14 f4       	brge	.+4      	; 0x1798 <moveLight+0x6c>
    1794:	01 e0       	ldi	r16, 0x01	; 1
    1796:	10 e0       	ldi	r17, 0x00	; 0
    1798:	30 2e       	mov	r3, r16
	if(!isLight){
    179a:	00 23       	and	r16, r16
    179c:	09 f4       	brne	.+2      	; 0x17a0 <moveLight+0x74>
    179e:	31 c1       	rjmp	.+610    	; 0x1a02 <moveLight+0x2d6>
	float stepper_speed_L = 0;
	float stepper_speed_R = 0;
	BOOL direction_L = 1;
	BOOL direction_R = 1;
	
	switch(lightBehavior){
    17a0:	81 e0       	ldi	r24, 0x01	; 1
    17a2:	e8 16       	cp	r14, r24
    17a4:	f1 04       	cpc	r15, r1
    17a6:	f1 f0       	breq	.+60     	; 0x17e4 <moveLight+0xb8>
    17a8:	92 e0       	ldi	r25, 0x02	; 2
    17aa:	e9 16       	cp	r14, r25
    17ac:	f1 04       	cpc	r15, r1
    17ae:	1c f4       	brge	.+6      	; 0x17b6 <moveLight+0x8a>
    17b0:	ef 28       	or	r14, r15
    17b2:	c1 f0       	breq	.+48     	; 0x17e4 <moveLight+0xb8>
    17b4:	0a c0       	rjmp	.+20     	; 0x17ca <moveLight+0x9e>
    17b6:	e2 e0       	ldi	r30, 0x02	; 2
    17b8:	ee 16       	cp	r14, r30
    17ba:	f1 04       	cpc	r15, r1
    17bc:	09 f4       	brne	.+2      	; 0x17c0 <moveLight+0x94>
    17be:	4f c0       	rjmp	.+158    	; 0x185e <moveLight+0x132>
    17c0:	f3 e0       	ldi	r31, 0x03	; 3
    17c2:	ef 16       	cp	r14, r31
    17c4:	f1 04       	cpc	r15, r1
    17c6:	09 f4       	brne	.+2      	; 0x17ca <moveLight+0x9e>
    17c8:	7d c0       	rjmp	.+250    	; 0x18c4 <moveLight+0x198>
    17ca:	0f 2e       	mov	r0, r31
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	cf 2e       	mov	r12, r31
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	df 2e       	mov	r13, r31
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	ef 2e       	mov	r14, r31
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	ff 2e       	mov	r15, r31
    17dc:	f0 2d       	mov	r31, r0
    17de:	46 01       	movw	r8, r12
    17e0:	57 01       	movw	r10, r14
    17e2:	a2 c0       	rjmp	.+324    	; 0x1928 <moveLight+0x1fc>
			stepper_speed_L = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_R_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
			stepper_speed_R = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_L_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
			break;
						
		case LIGHT_LOVER:
			stepper_speed_L = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_L_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
    17e4:	60 91 c6 01 	lds	r22, 0x01C6
    17e8:	70 91 c7 01 	lds	r23, 0x01C7
    17ec:	80 91 c8 01 	lds	r24, 0x01C8
    17f0:	90 91 c9 01 	lds	r25, 0x01C9
    17f4:	2b e7       	ldi	r18, 0x7B	; 123
    17f6:	34 e1       	ldi	r19, 0x14	; 20
    17f8:	46 e8       	ldi	r20, 0x86	; 134
    17fa:	50 e4       	ldi	r21, 0x40	; 64
    17fc:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
    1800:	28 e5       	ldi	r18, 0x58	; 88
    1802:	3f e8       	ldi	r19, 0x8F	; 143
    1804:	42 e0       	ldi	r20, 0x02	; 2
    1806:	5f e3       	ldi	r21, 0x3F	; 63
    1808:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
    180c:	20 e0       	ldi	r18, 0x00	; 0
    180e:	30 e0       	ldi	r19, 0x00	; 0
    1810:	48 ec       	ldi	r20, 0xC8	; 200
    1812:	52 ec       	ldi	r21, 0xC2	; 194
    1814:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	48 ec       	ldi	r20, 0xC8	; 200
    181e:	52 e4       	ldi	r21, 0x42	; 66
    1820:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
    1824:	6b 01       	movw	r12, r22
    1826:	7c 01       	movw	r14, r24
			stepper_speed_R = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_R_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
    1828:	c3 01       	movw	r24, r6
    182a:	b2 01       	movw	r22, r4
    182c:	2b e7       	ldi	r18, 0x7B	; 123
    182e:	34 e1       	ldi	r19, 0x14	; 20
    1830:	46 e8       	ldi	r20, 0x86	; 134
    1832:	50 e4       	ldi	r21, 0x40	; 64
    1834:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
    1838:	28 e5       	ldi	r18, 0x58	; 88
    183a:	3f e8       	ldi	r19, 0x8F	; 143
    183c:	42 e0       	ldi	r20, 0x02	; 2
    183e:	5f e3       	ldi	r21, 0x3F	; 63
    1840:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
    1844:	20 e0       	ldi	r18, 0x00	; 0
    1846:	30 e0       	ldi	r19, 0x00	; 0
    1848:	48 ec       	ldi	r20, 0xC8	; 200
    184a:	52 ec       	ldi	r21, 0xC2	; 194
    184c:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    1850:	20 e0       	ldi	r18, 0x00	; 0
    1852:	30 e0       	ldi	r19, 0x00	; 0
    1854:	48 ec       	ldi	r20, 0xC8	; 200
    1856:	52 e4       	ldi	r21, 0x42	; 66
    1858:	0e 94 89 22 	call	0x4512	; 0x4512 <__addsf3>
    185c:	63 c0       	rjmp	.+198    	; 0x1924 <moveLight+0x1f8>
			break;
			
		case LIGHT_AGGRO:	
			stepper_speed_R = MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_L_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
    185e:	60 91 c6 01 	lds	r22, 0x01C6
    1862:	70 91 c7 01 	lds	r23, 0x01C7
    1866:	80 91 c8 01 	lds	r24, 0x01C8
    186a:	90 91 c9 01 	lds	r25, 0x01C9
    186e:	2b e7       	ldi	r18, 0x7B	; 123
    1870:	34 e1       	ldi	r19, 0x14	; 20
    1872:	46 e8       	ldi	r20, 0x86	; 134
    1874:	50 e4       	ldi	r21, 0x40	; 64
    1876:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
    187a:	28 e5       	ldi	r18, 0x58	; 88
    187c:	3f e8       	ldi	r19, 0x8F	; 143
    187e:	42 e0       	ldi	r20, 0x02	; 2
    1880:	5f e3       	ldi	r21, 0x3F	; 63
    1882:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
    1886:	20 e0       	ldi	r18, 0x00	; 0
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	48 ec       	ldi	r20, 0xC8	; 200
    188c:	52 e4       	ldi	r21, 0x42	; 66
    188e:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    1892:	4b 01       	movw	r8, r22
    1894:	5c 01       	movw	r10, r24
			stepper_speed_L = MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_R_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
    1896:	c3 01       	movw	r24, r6
    1898:	b2 01       	movw	r22, r4
    189a:	2b e7       	ldi	r18, 0x7B	; 123
    189c:	34 e1       	ldi	r19, 0x14	; 20
    189e:	46 e8       	ldi	r20, 0x86	; 134
    18a0:	50 e4       	ldi	r21, 0x40	; 64
    18a2:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
    18a6:	28 e5       	ldi	r18, 0x58	; 88
    18a8:	3f e8       	ldi	r19, 0x8F	; 143
    18aa:	42 e0       	ldi	r20, 0x02	; 2
    18ac:	5f e3       	ldi	r21, 0x3F	; 63
    18ae:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
    18b2:	20 e0       	ldi	r18, 0x00	; 0
    18b4:	30 e0       	ldi	r19, 0x00	; 0
    18b6:	48 ec       	ldi	r20, 0xC8	; 200
    18b8:	52 e4       	ldi	r21, 0x42	; 66
    18ba:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    18be:	6b 01       	movw	r12, r22
    18c0:	7c 01       	movw	r14, r24
    18c2:	32 c0       	rjmp	.+100    	; 0x1928 <moveLight+0x1fc>
			break;
			
		case LIGHT_SHY:
			stepper_speed_L = MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_L_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
    18c4:	60 91 c6 01 	lds	r22, 0x01C6
    18c8:	70 91 c7 01 	lds	r23, 0x01C7
    18cc:	80 91 c8 01 	lds	r24, 0x01C8
    18d0:	90 91 c9 01 	lds	r25, 0x01C9
    18d4:	2b e7       	ldi	r18, 0x7B	; 123
    18d6:	34 e1       	ldi	r19, 0x14	; 20
    18d8:	46 e8       	ldi	r20, 0x86	; 134
    18da:	50 e4       	ldi	r21, 0x40	; 64
    18dc:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
    18e0:	28 e5       	ldi	r18, 0x58	; 88
    18e2:	3f e8       	ldi	r19, 0x8F	; 143
    18e4:	42 e0       	ldi	r20, 0x02	; 2
    18e6:	5f e3       	ldi	r21, 0x3F	; 63
    18e8:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
    18ec:	20 e0       	ldi	r18, 0x00	; 0
    18ee:	30 e0       	ldi	r19, 0x00	; 0
    18f0:	48 ec       	ldi	r20, 0xC8	; 200
    18f2:	52 e4       	ldi	r21, 0x42	; 66
    18f4:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    18f8:	6b 01       	movw	r12, r22
    18fa:	7c 01       	movw	r14, r24
			stepper_speed_R = MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_R_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
    18fc:	c3 01       	movw	r24, r6
    18fe:	b2 01       	movw	r22, r4
    1900:	2b e7       	ldi	r18, 0x7B	; 123
    1902:	34 e1       	ldi	r19, 0x14	; 20
    1904:	46 e8       	ldi	r20, 0x86	; 134
    1906:	50 e4       	ldi	r21, 0x40	; 64
    1908:	0e 94 88 22 	call	0x4510	; 0x4510 <__subsf3>
    190c:	28 e5       	ldi	r18, 0x58	; 88
    190e:	3f e8       	ldi	r19, 0x8F	; 143
    1910:	42 e0       	ldi	r20, 0x02	; 2
    1912:	5f e3       	ldi	r21, 0x3F	; 63
    1914:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
    1918:	20 e0       	ldi	r18, 0x00	; 0
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	48 ec       	ldi	r20, 0xC8	; 200
    191e:	52 e4       	ldi	r21, 0x42	; 66
    1920:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    1924:	4b 01       	movw	r8, r22
    1926:	5c 01       	movw	r10, r24
			break;
			
		default: break;
		}
		
		if(stepper_speed_L<0){
    1928:	c7 01       	movw	r24, r14
    192a:	b6 01       	movw	r22, r12
    192c:	20 e0       	ldi	r18, 0x00	; 0
    192e:	30 e0       	ldi	r19, 0x00	; 0
    1930:	40 e0       	ldi	r20, 0x00	; 0
    1932:	50 e0       	ldi	r21, 0x00	; 0
    1934:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    1938:	88 23       	and	r24, r24
    193a:	64 f4       	brge	.+24     	; 0x1954 <moveLight+0x228>
    193c:	66 24       	eor	r6, r6
    193e:	0f 2e       	mov	r0, r31
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	cf 2e       	mov	r12, r31
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	df 2e       	mov	r13, r31
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	ef 2e       	mov	r14, r31
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	ff 2e       	mov	r15, r31
    1950:	f0 2d       	mov	r31, r0
    1952:	02 c0       	rjmp	.+4      	; 0x1958 <moveLight+0x22c>
    1954:	66 24       	eor	r6, r6
    1956:	63 94       	inc	r6
			stepper_speed_L = 0;
			direction_L = 0;}
		
		if(stepper_speed_R<0){
    1958:	c5 01       	movw	r24, r10
    195a:	b4 01       	movw	r22, r8
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	0e 94 ed 22 	call	0x45da	; 0x45da <__cmpsf2>
    1968:	88 23       	and	r24, r24
    196a:	64 f4       	brge	.+24     	; 0x1984 <moveLight+0x258>
    196c:	77 24       	eor	r7, r7
    196e:	0f 2e       	mov	r0, r31
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	8f 2e       	mov	r8, r31
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	9f 2e       	mov	r9, r31
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	af 2e       	mov	r10, r31
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	bf 2e       	mov	r11, r31
    1980:	f0 2d       	mov	r31, r0
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <moveLight+0x25c>
    1984:	77 24       	eor	r7, r7
    1986:	73 94       	inc	r7
			stepper_speed_R = 0;
			direction_R = 0;}
			
		// STEPPER_REV
		STEPPER_move_stnb( STEPPER_BOTH, 
    1988:	8d b7       	in	r24, 0x3d	; 61
    198a:	9e b7       	in	r25, 0x3e	; 62
    198c:	09 97       	sbiw	r24, 0x09	; 9
    198e:	0f b6       	in	r0, 0x3f	; 63
    1990:	f8 94       	cli
    1992:	9e bf       	out	0x3e, r25	; 62
    1994:	0f be       	out	0x3f, r0	; 63
    1996:	8d bf       	out	0x3d, r24	; 61
    1998:	0d b7       	in	r16, 0x3d	; 61
    199a:	1e b7       	in	r17, 0x3e	; 62
    199c:	0f 5f       	subi	r16, 0xFF	; 255
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	c7 01       	movw	r24, r14
    19a2:	b6 01       	movw	r22, r12
    19a4:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__fixunssfsi>
    19a8:	6b 01       	movw	r12, r22
    19aa:	7c 01       	movw	r14, r24
    19ac:	82 e3       	ldi	r24, 0x32	; 50
    19ae:	90 e0       	ldi	r25, 0x00	; 0
    19b0:	f8 01       	movw	r30, r16
    19b2:	91 83       	std	Z+1, r25	; 0x01
    19b4:	80 83       	st	Z, r24
    19b6:	c5 01       	movw	r24, r10
    19b8:	b4 01       	movw	r22, r8
    19ba:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__fixunssfsi>
    19be:	f8 01       	movw	r30, r16
    19c0:	73 83       	std	Z+3, r23	; 0x03
    19c2:	62 83       	std	Z+2, r22	; 0x02
    19c4:	82 ec       	ldi	r24, 0xC2	; 194
    19c6:	91 e0       	ldi	r25, 0x01	; 1
    19c8:	95 83       	std	Z+5, r25	; 0x05
    19ca:	84 83       	std	Z+4, r24	; 0x04
    19cc:	16 82       	std	Z+6, r1	; 0x06
    19ce:	10 86       	std	Z+8, r1	; 0x08
    19d0:	17 82       	std	Z+7, r1	; 0x07
    19d2:	81 e0       	ldi	r24, 0x01	; 1
    19d4:	62 e0       	ldi	r22, 0x02	; 2
    19d6:	46 2d       	mov	r20, r6
    19d8:	22 e3       	ldi	r18, 0x32	; 50
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	86 01       	movw	r16, r12
    19de:	a2 ec       	ldi	r26, 0xC2	; 194
    19e0:	ea 2e       	mov	r14, r26
    19e2:	a1 e0       	ldi	r26, 0x01	; 1
    19e4:	fa 2e       	mov	r15, r26
    19e6:	cc 24       	eor	r12, r12
    19e8:	aa 24       	eor	r10, r10
    19ea:	bb 24       	eor	r11, r11
    19ec:	87 2c       	mov	r8, r7
    19ee:	0e 94 b2 12 	call	0x2564	; 0x2564 <STEPPER_move>
    19f2:	8d b7       	in	r24, 0x3d	; 61
    19f4:	9e b7       	in	r25, 0x3e	; 62
    19f6:	09 96       	adiw	r24, 0x09	; 9
    19f8:	0f b6       	in	r0, 0x3f	; 63
    19fa:	f8 94       	cli
    19fc:	9e bf       	out	0x3e, r25	; 62
    19fe:	0f be       	out	0x3f, r0	; 63
    1a00:	8d bf       	out	0x3d, r24	; 61
		direction_L, 50, stepper_speed_L, 450, STEPPER_BRK_OFF, // Left
		direction_R, 50, stepper_speed_R, 450, STEPPER_BRK_OFF ); // Right

		return isLight;
}
    1a02:	83 2d       	mov	r24, r3
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	df 90       	pop	r13
    1a0e:	cf 90       	pop	r12
    1a10:	bf 90       	pop	r11
    1a12:	af 90       	pop	r10
    1a14:	9f 90       	pop	r9
    1a16:	8f 90       	pop	r8
    1a18:	7f 90       	pop	r7
    1a1a:	6f 90       	pop	r6
    1a1c:	5f 90       	pop	r5
    1a1e:	4f 90       	pop	r4
    1a20:	3f 90       	pop	r3
    1a22:	08 95       	ret

00001a24 <moveRetreat>:
* Output Return:	char
* Overview:		    Moves robot backwards until contact sensors encounter
					a wall or obstacle
********************************************************************/
char moveRetreat( void )
{
    1a24:	4f 92       	push	r4
    1a26:	5f 92       	push	r5
    1a28:	6f 92       	push	r6
    1a2a:	7f 92       	push	r7
    1a2c:	8f 92       	push	r8
    1a2e:	af 92       	push	r10
    1a30:	bf 92       	push	r11
    1a32:	cf 92       	push	r12
    1a34:	ef 92       	push	r14
    1a36:	ff 92       	push	r15
    1a38:	0f 93       	push	r16
    1a3a:	1f 93       	push	r17
	// Make a variable that keeps track of this behavior
	char isRetreat = 0;
	
	// Back up until an object is encountered
	// Check for left and right contact
	if((rightContact != 1)&&(leftContact != 1))
    1a3c:	90 91 b1 03 	lds	r25, 0x03B1
    1a40:	91 30       	cpi	r25, 0x01	; 1
    1a42:	a1 f1       	breq	.+104    	; 0x1aac <moveRetreat+0x88>
    1a44:	80 91 b2 03 	lds	r24, 0x03B2
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	81 f1       	breq	.+96     	; 0x1aac <moveRetreat+0x88>
	{	
		// move backward while nothing is detected
		STEPPER_move_stnb( STEPPER_BOTH, 
    1a4c:	2d b7       	in	r18, 0x3d	; 61
    1a4e:	3e b7       	in	r19, 0x3e	; 62
    1a50:	29 50       	subi	r18, 0x09	; 9
    1a52:	30 40       	sbci	r19, 0x00	; 0
    1a54:	0f b6       	in	r0, 0x3f	; 63
    1a56:	f8 94       	cli
    1a58:	3e bf       	out	0x3e, r19	; 62
    1a5a:	0f be       	out	0x3f, r0	; 63
    1a5c:	2d bf       	out	0x3d, r18	; 61
    1a5e:	ed b7       	in	r30, 0x3d	; 61
    1a60:	fe b7       	in	r31, 0x3e	; 62
    1a62:	31 96       	adiw	r30, 0x01	; 1
    1a64:	88 ec       	ldi	r24, 0xC8	; 200
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	ad b7       	in	r26, 0x3d	; 61
    1a6a:	be b7       	in	r27, 0x3e	; 62
    1a6c:	12 96       	adiw	r26, 0x02	; 2
    1a6e:	9c 93       	st	X, r25
    1a70:	8e 93       	st	-X, r24
    1a72:	11 97       	sbiw	r26, 0x01	; 1
    1a74:	93 83       	std	Z+3, r25	; 0x03
    1a76:	82 83       	std	Z+2, r24	; 0x02
    1a78:	82 ec       	ldi	r24, 0xC2	; 194
    1a7a:	91 e0       	ldi	r25, 0x01	; 1
    1a7c:	95 83       	std	Z+5, r25	; 0x05
    1a7e:	84 83       	std	Z+4, r24	; 0x04
    1a80:	16 82       	std	Z+6, r1	; 0x06
    1a82:	10 86       	std	Z+8, r1	; 0x08
    1a84:	17 82       	std	Z+7, r1	; 0x07
    1a86:	81 e0       	ldi	r24, 0x01	; 1
    1a88:	62 e0       	ldi	r22, 0x02	; 2
    1a8a:	40 e0       	ldi	r20, 0x00	; 0
    1a8c:	28 ec       	ldi	r18, 0xC8	; 200
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	08 ec       	ldi	r16, 0xC8	; 200
    1a92:	10 e0       	ldi	r17, 0x00	; 0
    1a94:	52 ec       	ldi	r21, 0xC2	; 194
    1a96:	e5 2e       	mov	r14, r21
    1a98:	51 e0       	ldi	r21, 0x01	; 1
    1a9a:	f5 2e       	mov	r15, r21
    1a9c:	cc 24       	eor	r12, r12
    1a9e:	aa 24       	eor	r10, r10
    1aa0:	bb 24       	eor	r11, r11
    1aa2:	88 24       	eor	r8, r8
    1aa4:	0e 94 b2 12 	call	0x2564	; 0x2564 <STEPPER_move>
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	a5 c0       	rjmp	.+330    	; 0x1bf6 <moveRetreat+0x1d2>
		
		isRetreat = 1;
	}
	
	// Check right contact
	else if((leftContact == 0)&&(rightContact == 1))
    1aac:	80 91 b2 03 	lds	r24, 0x03B2
    1ab0:	88 23       	and	r24, r24
    1ab2:	09 f0       	breq	.+2      	; 0x1ab6 <moveRetreat+0x92>
    1ab4:	4d c0       	rjmp	.+154    	; 0x1b50 <moveRetreat+0x12c>
    1ab6:	91 30       	cpi	r25, 0x01	; 1
    1ab8:	09 f0       	breq	.+2      	; 0x1abc <moveRetreat+0x98>
    1aba:	aa c0       	rjmp	.+340    	; 0x1c10 <moveRetreat+0x1ec>
	{
		// move forward to leave room for turn
		STEPPER_move_stwt( STEPPER_BOTH, 
    1abc:	8d b7       	in	r24, 0x3d	; 61
    1abe:	9e b7       	in	r25, 0x3e	; 62
    1ac0:	09 97       	sbiw	r24, 0x09	; 9
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	9e bf       	out	0x3e, r25	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	8d bf       	out	0x3d, r24	; 61
    1acc:	ed b7       	in	r30, 0x3d	; 61
    1ace:	fe b7       	in	r31, 0x3e	; 62
    1ad0:	31 96       	adiw	r30, 0x01	; 1
    1ad2:	8b e4       	ldi	r24, 0x4B	; 75
    1ad4:	90 e0       	ldi	r25, 0x00	; 0
    1ad6:	ad b7       	in	r26, 0x3d	; 61
    1ad8:	be b7       	in	r27, 0x3e	; 62
    1ada:	12 96       	adiw	r26, 0x02	; 2
    1adc:	9c 93       	st	X, r25
    1ade:	8e 93       	st	-X, r24
    1ae0:	11 97       	sbiw	r26, 0x01	; 1
    1ae2:	38 ec       	ldi	r19, 0xC8	; 200
    1ae4:	43 2e       	mov	r4, r19
    1ae6:	51 2c       	mov	r5, r1
    1ae8:	53 82       	std	Z+3, r5	; 0x03
    1aea:	42 82       	std	Z+2, r4	; 0x02
    1aec:	2a ef       	ldi	r18, 0xFA	; 250
    1aee:	62 2e       	mov	r6, r18
    1af0:	71 2c       	mov	r7, r1
    1af2:	75 82       	std	Z+5, r7	; 0x05
    1af4:	64 82       	std	Z+4, r6	; 0x04
    1af6:	16 82       	std	Z+6, r1	; 0x06
    1af8:	10 86       	std	Z+8, r1	; 0x08
    1afa:	17 82       	std	Z+7, r1	; 0x07
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	62 e0       	ldi	r22, 0x02	; 2
    1b00:	41 e0       	ldi	r20, 0x01	; 1
    1b02:	2b e4       	ldi	r18, 0x4B	; 75
    1b04:	30 e0       	ldi	r19, 0x00	; 0
    1b06:	08 ec       	ldi	r16, 0xC8	; 200
    1b08:	10 e0       	ldi	r17, 0x00	; 0
    1b0a:	9a ef       	ldi	r25, 0xFA	; 250
    1b0c:	e9 2e       	mov	r14, r25
    1b0e:	f1 2c       	mov	r15, r1
    1b10:	cc 24       	eor	r12, r12
    1b12:	aa 24       	eor	r10, r10
    1b14:	bb 24       	eor	r11, r11
    1b16:	88 24       	eor	r8, r8
    1b18:	83 94       	inc	r8
    1b1a:	0e 94 b2 12 	call	0x2564	; 0x2564 <STEPPER_move>
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF ); // Right
		
		// Turn 1/4 of a revolution CW
		STEPPER_move_stwt( STEPPER_BOTH, 
    1b1e:	ed b7       	in	r30, 0x3d	; 61
    1b20:	fe b7       	in	r31, 0x3e	; 62
    1b22:	31 96       	adiw	r30, 0x01	; 1
    1b24:	84 e6       	ldi	r24, 0x64	; 100
    1b26:	90 e0       	ldi	r25, 0x00	; 0
    1b28:	ad b7       	in	r26, 0x3d	; 61
    1b2a:	be b7       	in	r27, 0x3e	; 62
    1b2c:	12 96       	adiw	r26, 0x02	; 2
    1b2e:	9c 93       	st	X, r25
    1b30:	8e 93       	st	-X, r24
    1b32:	11 97       	sbiw	r26, 0x01	; 1
    1b34:	53 82       	std	Z+3, r5	; 0x03
    1b36:	42 82       	std	Z+2, r4	; 0x02
    1b38:	75 82       	std	Z+5, r7	; 0x05
    1b3a:	64 82       	std	Z+4, r6	; 0x04
    1b3c:	16 82       	std	Z+6, r1	; 0x06
    1b3e:	10 86       	std	Z+8, r1	; 0x08
    1b40:	17 82       	std	Z+7, r1	; 0x07
    1b42:	80 e0       	ldi	r24, 0x00	; 0
    1b44:	62 e0       	ldi	r22, 0x02	; 2
    1b46:	41 e0       	ldi	r20, 0x01	; 1
    1b48:	24 e6       	ldi	r18, 0x64	; 100
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	88 24       	eor	r8, r8
    1b4e:	4e c0       	rjmp	.+156    	; 0x1bec <moveRetreat+0x1c8>
		STEPPER_FWD, 100, 200, 250, STEPPER_BRK_OFF ); // Right
		retreatFlagStatus = 0;
	}
	
	// Check left contact
	else if((leftContact == 1)&&(rightContact == 0))
    1b50:	81 30       	cpi	r24, 0x01	; 1
    1b52:	09 f0       	breq	.+2      	; 0x1b56 <moveRetreat+0x132>
    1b54:	5d c0       	rjmp	.+186    	; 0x1c10 <moveRetreat+0x1ec>
    1b56:	99 23       	and	r25, r25
    1b58:	09 f0       	breq	.+2      	; 0x1b5c <moveRetreat+0x138>
    1b5a:	57 c0       	rjmp	.+174    	; 0x1c0a <moveRetreat+0x1e6>
	{
		// move forward to leave room for turn
		STEPPER_move_stwt( STEPPER_BOTH, 
    1b5c:	8d b7       	in	r24, 0x3d	; 61
    1b5e:	9e b7       	in	r25, 0x3e	; 62
    1b60:	09 97       	sbiw	r24, 0x09	; 9
    1b62:	0f b6       	in	r0, 0x3f	; 63
    1b64:	f8 94       	cli
    1b66:	9e bf       	out	0x3e, r25	; 62
    1b68:	0f be       	out	0x3f, r0	; 63
    1b6a:	8d bf       	out	0x3d, r24	; 61
    1b6c:	ed b7       	in	r30, 0x3d	; 61
    1b6e:	fe b7       	in	r31, 0x3e	; 62
    1b70:	31 96       	adiw	r30, 0x01	; 1
    1b72:	8b e4       	ldi	r24, 0x4B	; 75
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	ad b7       	in	r26, 0x3d	; 61
    1b78:	be b7       	in	r27, 0x3e	; 62
    1b7a:	12 96       	adiw	r26, 0x02	; 2
    1b7c:	9c 93       	st	X, r25
    1b7e:	8e 93       	st	-X, r24
    1b80:	11 97       	sbiw	r26, 0x01	; 1
    1b82:	08 ec       	ldi	r16, 0xC8	; 200
    1b84:	40 2e       	mov	r4, r16
    1b86:	51 2c       	mov	r5, r1
    1b88:	53 82       	std	Z+3, r5	; 0x03
    1b8a:	42 82       	std	Z+2, r4	; 0x02
    1b8c:	1a ef       	ldi	r17, 0xFA	; 250
    1b8e:	61 2e       	mov	r6, r17
    1b90:	71 2c       	mov	r7, r1
    1b92:	75 82       	std	Z+5, r7	; 0x05
    1b94:	64 82       	std	Z+4, r6	; 0x04
    1b96:	16 82       	std	Z+6, r1	; 0x06
    1b98:	10 86       	std	Z+8, r1	; 0x08
    1b9a:	17 82       	std	Z+7, r1	; 0x07
    1b9c:	80 e0       	ldi	r24, 0x00	; 0
    1b9e:	62 e0       	ldi	r22, 0x02	; 2
    1ba0:	41 e0       	ldi	r20, 0x01	; 1
    1ba2:	2b e4       	ldi	r18, 0x4B	; 75
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	08 ec       	ldi	r16, 0xC8	; 200
    1ba8:	10 e0       	ldi	r17, 0x00	; 0
    1baa:	ba ef       	ldi	r27, 0xFA	; 250
    1bac:	eb 2e       	mov	r14, r27
    1bae:	f1 2c       	mov	r15, r1
    1bb0:	cc 24       	eor	r12, r12
    1bb2:	aa 24       	eor	r10, r10
    1bb4:	bb 24       	eor	r11, r11
    1bb6:	88 24       	eor	r8, r8
    1bb8:	83 94       	inc	r8
    1bba:	0e 94 b2 12 	call	0x2564	; 0x2564 <STEPPER_move>
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF ); // Right
			
		// Turn 1/4 of a revolution CCW
		STEPPER_move_stwt( STEPPER_BOTH, 
    1bbe:	ed b7       	in	r30, 0x3d	; 61
    1bc0:	fe b7       	in	r31, 0x3e	; 62
    1bc2:	31 96       	adiw	r30, 0x01	; 1
    1bc4:	84 e6       	ldi	r24, 0x64	; 100
    1bc6:	90 e0       	ldi	r25, 0x00	; 0
    1bc8:	ad b7       	in	r26, 0x3d	; 61
    1bca:	be b7       	in	r27, 0x3e	; 62
    1bcc:	12 96       	adiw	r26, 0x02	; 2
    1bce:	9c 93       	st	X, r25
    1bd0:	8e 93       	st	-X, r24
    1bd2:	11 97       	sbiw	r26, 0x01	; 1
    1bd4:	53 82       	std	Z+3, r5	; 0x03
    1bd6:	42 82       	std	Z+2, r4	; 0x02
    1bd8:	75 82       	std	Z+5, r7	; 0x05
    1bda:	64 82       	std	Z+4, r6	; 0x04
    1bdc:	16 82       	std	Z+6, r1	; 0x06
    1bde:	10 86       	std	Z+8, r1	; 0x08
    1be0:	17 82       	std	Z+7, r1	; 0x07
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	62 e0       	ldi	r22, 0x02	; 2
    1be6:	40 e0       	ldi	r20, 0x00	; 0
    1be8:	24 e6       	ldi	r18, 0x64	; 100
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	0e 94 b2 12 	call	0x2564	; 0x2564 <STEPPER_move>
		STEPPER_FWD, 100, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 100, 200, 250, STEPPER_BRK_OFF ); // Right
		retreatFlagStatus = 0;
    1bf0:	10 92 cb 01 	sts	0x01CB, r1
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	2d b7       	in	r18, 0x3d	; 61
    1bf8:	3e b7       	in	r19, 0x3e	; 62
    1bfa:	27 5f       	subi	r18, 0xF7	; 247
    1bfc:	3f 4f       	sbci	r19, 0xFF	; 255
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	3e bf       	out	0x3e, r19	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	2d bf       	out	0x3d, r18	; 61
    1c08:	04 c0       	rjmp	.+8      	; 0x1c12 <moveRetreat+0x1ee>
	}
	
	// check both contacts
	else if ((leftContact == 1)&&(rightContact == 1))
    1c0a:	91 30       	cpi	r25, 0x01	; 1
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <moveRetreat+0x1ec>
    1c0e:	a6 cf       	rjmp	.-180    	; 0x1b5c <moveRetreat+0x138>
			
		// Turn 1/4 of a revolution CCW
		STEPPER_move_stwt( STEPPER_BOTH, 
		STEPPER_FWD, 100, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 100, 200, 250, STEPPER_BRK_OFF ); // Right
		retreatFlagStatus = 0;
    1c10:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return isRetreat;
}
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	ff 90       	pop	r15
    1c18:	ef 90       	pop	r14
    1c1a:	cf 90       	pop	r12
    1c1c:	bf 90       	pop	r11
    1c1e:	af 90       	pop	r10
    1c20:	8f 90       	pop	r8
    1c22:	7f 90       	pop	r7
    1c24:	6f 90       	pop	r6
    1c26:	5f 90       	pop	r5
    1c28:	4f 90       	pop	r4
    1c2a:	08 95       	ret

00001c2c <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    1c2c:	8f 92       	push	r8
    1c2e:	af 92       	push	r10
    1c30:	bf 92       	push	r11
    1c32:	cf 92       	push	r12
    1c34:	df 92       	push	r13
    1c36:	ef 92       	push	r14
    1c38:	ff 92       	push	r15
    1c3a:	0f 93       	push	r16
    1c3c:	1f 93       	push	r17
    1c3e:	cf 93       	push	r28
    1c40:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    1c42:	0e 94 ea 11 	call	0x23d4	; 0x23d4 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    1c46:	67 2b       	or	r22, r23
    1c48:	09 f0       	breq	.+2      	; 0x1c4c <moveWander+0x20>
    1c4a:	76 c0       	rjmp	.+236    	; 0x1d38 <moveWander+0x10c>
    1c4c:	89 2b       	or	r24, r25
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <moveWander+0x26>
    1c50:	73 c0       	rjmp	.+230    	; 0x1d38 <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    1c52:	0e 94 98 2b 	call	0x5730	; 0x5730 <rand>
    1c56:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    1c58:	0e 94 98 2b 	call	0x5730	; 0x5730 <rand>
    1c5c:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    1c5e:	0e 94 98 2b 	call	0x5730	; 0x5730 <rand>
    1c62:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    1c64:	0e 94 98 2b 	call	0x5730	; 0x5730 <rand>
    1c68:	20 e0       	ldi	r18, 0x00	; 0
    1c6a:	6a e0       	ldi	r22, 0x0A	; 10
    1c6c:	70 e0       	ldi	r23, 0x00	; 0
    1c6e:	0e 94 c9 29 	call	0x5392	; 0x5392 <__divmodhi4>
    1c72:	08 97       	sbiw	r24, 0x08	; 8
    1c74:	0c f0       	brlt	.+2      	; 0x1c78 <moveWander+0x4c>
    1c76:	21 e0       	ldi	r18, 0x01	; 1
    1c78:	82 2e       	mov	r8, r18
    1c7a:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    1c7c:	c8 01       	movw	r24, r16
    1c7e:	60 e9       	ldi	r22, 0x90	; 144
    1c80:	71 e0       	ldi	r23, 0x01	; 1
    1c82:	0e 94 c9 29 	call	0x5392	; 0x5392 <__divmodhi4>
    1c86:	e0 e9       	ldi	r30, 0x90	; 144
    1c88:	ae 2e       	mov	r10, r30
    1c8a:	e1 e0       	ldi	r30, 0x01	; 1
    1c8c:	be 2e       	mov	r11, r30
    1c8e:	a8 0e       	add	r10, r24
    1c90:	b9 1e       	adc	r11, r25
    1c92:	8d b7       	in	r24, 0x3d	; 61
    1c94:	9e b7       	in	r25, 0x3e	; 62
    1c96:	09 97       	sbiw	r24, 0x09	; 9
    1c98:	0f b6       	in	r0, 0x3f	; 63
    1c9a:	f8 94       	cli
    1c9c:	9e bf       	out	0x3e, r25	; 62
    1c9e:	0f be       	out	0x3f, r0	; 63
    1ca0:	8d bf       	out	0x3d, r24	; 61
    1ca2:	0d b7       	in	r16, 0x3d	; 61
    1ca4:	1e b7       	in	r17, 0x3e	; 62
    1ca6:	0f 5f       	subi	r16, 0xFF	; 255
    1ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    1caa:	c7 01       	movw	r24, r14
    1cac:	68 ec       	ldi	r22, 0xC8	; 200
    1cae:	70 e0       	ldi	r23, 0x00	; 0
    1cb0:	0e 94 c9 29 	call	0x5392	; 0x5392 <__divmodhi4>
    1cb4:	88 53       	subi	r24, 0x38	; 56
    1cb6:	9f 4f       	sbci	r25, 0xFF	; 255
    1cb8:	aa 27       	eor	r26, r26
    1cba:	97 fd       	sbrc	r25, 7
    1cbc:	a0 95       	com	r26
    1cbe:	ba 2f       	mov	r27, r26
    1cc0:	bc 01       	movw	r22, r24
    1cc2:	cd 01       	movw	r24, r26
    1cc4:	0e 94 8c 23 	call	0x4718	; 0x4718 <__floatsisf>
    1cc8:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__fixunssfsi>
    1ccc:	6b 01       	movw	r12, r22
    1cce:	7c 01       	movw	r14, r24
    1cd0:	f8 01       	movw	r30, r16
    1cd2:	b1 82       	std	Z+1, r11	; 0x01
    1cd4:	a0 82       	st	Z, r10
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	68 ec       	ldi	r22, 0xC8	; 200
    1cda:	70 e0       	ldi	r23, 0x00	; 0
    1cdc:	0e 94 c9 29 	call	0x5392	; 0x5392 <__divmodhi4>
    1ce0:	88 53       	subi	r24, 0x38	; 56
    1ce2:	9f 4f       	sbci	r25, 0xFF	; 255
    1ce4:	aa 27       	eor	r26, r26
    1ce6:	97 fd       	sbrc	r25, 7
    1ce8:	a0 95       	com	r26
    1cea:	ba 2f       	mov	r27, r26
    1cec:	bc 01       	movw	r22, r24
    1cee:	cd 01       	movw	r24, r26
    1cf0:	0e 94 8c 23 	call	0x4718	; 0x4718 <__floatsisf>
    1cf4:	0e 94 5e 23 	call	0x46bc	; 0x46bc <__fixunssfsi>
    1cf8:	f8 01       	movw	r30, r16
    1cfa:	73 83       	std	Z+3, r23	; 0x03
    1cfc:	62 83       	std	Z+2, r22	; 0x02
    1cfe:	82 ec       	ldi	r24, 0xC2	; 194
    1d00:	91 e0       	ldi	r25, 0x01	; 1
    1d02:	95 83       	std	Z+5, r25	; 0x05
    1d04:	84 83       	std	Z+4, r24	; 0x04
    1d06:	16 82       	std	Z+6, r1	; 0x06
    1d08:	10 86       	std	Z+8, r1	; 0x08
    1d0a:	17 82       	std	Z+7, r1	; 0x07
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	62 e0       	ldi	r22, 0x02	; 2
    1d10:	48 2d       	mov	r20, r8
    1d12:	95 01       	movw	r18, r10
    1d14:	86 01       	movw	r16, r12
    1d16:	72 ec       	ldi	r23, 0xC2	; 194
    1d18:	e7 2e       	mov	r14, r23
    1d1a:	71 e0       	ldi	r23, 0x01	; 1
    1d1c:	f7 2e       	mov	r15, r23
    1d1e:	cc 24       	eor	r12, r12
    1d20:	aa 24       	eor	r10, r10
    1d22:	bb 24       	eor	r11, r11
    1d24:	0e 94 b2 12 	call	0x2564	; 0x2564 <STEPPER_move>
    1d28:	8d b7       	in	r24, 0x3d	; 61
    1d2a:	9e b7       	in	r25, 0x3e	; 62
    1d2c:	09 96       	adiw	r24, 0x09	; 9
    1d2e:	0f b6       	in	r0, 0x3f	; 63
    1d30:	f8 94       	cli
    1d32:	9e bf       	out	0x3e, r25	; 62
    1d34:	0f be       	out	0x3f, r0	; 63
    1d36:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	df 91       	pop	r29
    1d3c:	cf 91       	pop	r28
    1d3e:	1f 91       	pop	r17
    1d40:	0f 91       	pop	r16
    1d42:	ff 90       	pop	r15
    1d44:	ef 90       	pop	r14
    1d46:	df 90       	pop	r13
    1d48:	cf 90       	pop	r12
    1d4a:	bf 90       	pop	r11
    1d4c:	af 90       	pop	r10
    1d4e:	8f 90       	pop	r8
    1d50:	08 95       	ret

00001d52 <moveTrackLight>:
{
	// make a variable that keeps track of the light tracking behavior
	char isTracking = 0;
	
	// check to see if there is too much light (is the robot in front of the light?)
	if((leftLightVolt >= LIGHT_L_MAX)&&(rightLightVolt >= LIGHT_R_MAX))
    1d52:	60 91 c6 01 	lds	r22, 0x01C6
    1d56:	70 91 c7 01 	lds	r23, 0x01C7
    1d5a:	80 91 c8 01 	lds	r24, 0x01C8
    1d5e:	90 91 c9 01 	lds	r25, 0x01C9
    1d62:	26 e6       	ldi	r18, 0x66	; 102
    1d64:	36 e6       	ldi	r19, 0x66	; 102
    1d66:	46 e9       	ldi	r20, 0x96	; 150
    1d68:	50 e4       	ldi	r21, 0x40	; 64
    1d6a:	0e 94 3c 24 	call	0x4878	; 0x4878 <__gesf2>
    1d6e:	88 23       	and	r24, r24
    1d70:	fc f0       	brlt	.+62     	; 0x1db0 <moveTrackLight+0x5e>
    1d72:	60 91 c2 01 	lds	r22, 0x01C2
    1d76:	70 91 c3 01 	lds	r23, 0x01C3
    1d7a:	80 91 c4 01 	lds	r24, 0x01C4
    1d7e:	90 91 c5 01 	lds	r25, 0x01C5
    1d82:	26 e6       	ldi	r18, 0x66	; 102
    1d84:	36 e6       	ldi	r19, 0x66	; 102
    1d86:	46 e9       	ldi	r20, 0x96	; 150
    1d88:	50 e4       	ldi	r21, 0x40	; 64
    1d8a:	0e 94 3c 24 	call	0x4878	; 0x4878 <__gesf2>
    1d8e:	88 23       	and	r24, r24
    1d90:	7c f0       	brlt	.+30     	; 0x1db0 <moveTrackLight+0x5e>
	{
		// set global flags to 1
		lightFlagStatus = 1;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	80 93 ca 01 	sts	0x01CA, r24
		retreatFlagStatus = 1;
    1d98:	80 93 cb 01 	sts	0x01CB, r24
		
		// Act as a docking robot
		LCD_printf("Arkin = Docked.\nPreparing to retreat.\n\n");
    1d9c:	84 e2       	ldi	r24, 0x24	; 36
    1d9e:	91 e0       	ldi	r25, 0x01	; 1
    1da0:	0e 94 c1 2c 	call	0x5982	; 0x5982 <puts>
		TMRSRVC_delay(3000);//wait 3 seconds
    1da4:	88 eb       	ldi	r24, 0xB8	; 184
    1da6:	9b e0       	ldi	r25, 0x0B	; 11
    1da8:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TMRSRVC_delay>
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	08 95       	ret
	}
	// else run moveLight(Lover) behavior
	else
	{
		// inhibit LOVER behavior of move light
		isTracking = moveLight(2);
    1db0:	82 e0       	ldi	r24, 0x02	; 2
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	0e 94 96 0b 	call	0x172c	; 0x172c <moveLight>
	}
	
	return isTracking;
}
    1db8:	08 95       	ret

00001dba <moveBehavior>:
* Overview:		    This is the flow for the behavior of the robot
********************************************************************/
char moveBehavior( int behavior)
{
	// Check the moveAway behavior for obstacles
	if(moveAway()){
    1dba:	0e 94 c0 08 	call	0x1180	; 0x1180 <moveAway>
    1dbe:	88 23       	and	r24, r24
    1dc0:	71 f0       	breq	.+28     	; 0x1dde <moveBehavior+0x24>
		Ierror = 0;
    1dc2:	80 e0       	ldi	r24, 0x00	; 0
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	a0 e0       	ldi	r26, 0x00	; 0
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	80 93 aa 01 	sts	0x01AA, r24
    1dce:	90 93 ab 01 	sts	0x01AB, r25
    1dd2:	a0 93 ac 01 	sts	0x01AC, r26
    1dd6:	b0 93 ad 01 	sts	0x01AD, r27
    1dda:	81 e0       	ldi	r24, 0x01	; 1
    1ddc:	08 95       	ret
	}
	
	// Check the moveLight behavior for light. 
	// If it sees light track the light. 
	// If it is in front of the light kill moveLight and move to moveRetreat
	if(lightFlagStatus==0){
    1dde:	80 91 ca 01 	lds	r24, 0x01CA
    1de2:	88 23       	and	r24, r24
    1de4:	91 f4       	brne	.+36     	; 0x1e0a <moveBehavior+0x50>
		if(moveTrackLight()){
    1de6:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <moveTrackLight>
    1dea:	88 23       	and	r24, r24
    1dec:	71 f0       	breq	.+28     	; 0x1e0a <moveBehavior+0x50>
			Ierror = 0;
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	a0 e0       	ldi	r26, 0x00	; 0
    1df4:	b0 e0       	ldi	r27, 0x00	; 0
    1df6:	80 93 aa 01 	sts	0x01AA, r24
    1dfa:	90 93 ab 01 	sts	0x01AB, r25
    1dfe:	a0 93 ac 01 	sts	0x01AC, r26
    1e02:	b0 93 ad 01 	sts	0x01AD, r27
    1e06:	82 e0       	ldi	r24, 0x02	; 2
    1e08:	08 95       	ret
		}
	}
	
	// Check the moveRetreat behavior.
	// If it returns a zero (contacts detect obstacle) have it stop itself and inhibit moveWall
	if(retreatFlagStatus==1){
    1e0a:	80 91 cb 01 	lds	r24, 0x01CB
    1e0e:	81 30       	cpi	r24, 0x01	; 1
    1e10:	91 f4       	brne	.+36     	; 0x1e36 <moveBehavior+0x7c>
		if(moveRetreat()){
    1e12:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <moveRetreat>
    1e16:	88 23       	and	r24, r24
    1e18:	71 f0       	breq	.+28     	; 0x1e36 <moveBehavior+0x7c>
			Ierror = 0;
    1e1a:	80 e0       	ldi	r24, 0x00	; 0
    1e1c:	90 e0       	ldi	r25, 0x00	; 0
    1e1e:	a0 e0       	ldi	r26, 0x00	; 0
    1e20:	b0 e0       	ldi	r27, 0x00	; 0
    1e22:	80 93 aa 01 	sts	0x01AA, r24
    1e26:	90 93 ab 01 	sts	0x01AB, r25
    1e2a:	a0 93 ac 01 	sts	0x01AC, r26
    1e2e:	b0 93 ad 01 	sts	0x01AD, r27
    1e32:	83 e0       	ldi	r24, 0x03	; 3
    1e34:	08 95       	ret
			return 3;
		}
	}
	
	// Run the moveWall behavior
	if(moveWall()){
    1e36:	0e 94 25 0a 	call	0x144a	; 0x144a <moveWall>
    1e3a:	88 23       	and	r24, r24
    1e3c:	69 f0       	breq	.+26     	; 0x1e58 <moveBehavior+0x9e>
		Ierror = 0;
    1e3e:	80 e0       	ldi	r24, 0x00	; 0
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	a0 e0       	ldi	r26, 0x00	; 0
    1e44:	b0 e0       	ldi	r27, 0x00	; 0
    1e46:	80 93 aa 01 	sts	0x01AA, r24
    1e4a:	90 93 ab 01 	sts	0x01AB, r25
    1e4e:	a0 93 ac 01 	sts	0x01AC, r26
    1e52:	b0 93 ad 01 	sts	0x01AD, r27
    1e56:	84 e0       	ldi	r24, 0x04	; 4
		return 4;
	}

	return 0;	
}
    1e58:	08 95       	ret

00001e5a <CBOT_main>:
void CBOT_main( void )
{
	// Initialize variables
	int btnValue=0;//value of button pushed

	ATopstat = ATTINY_open();//open the tiny microcontroller
    1e5a:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <ATTINY_open>
    1e5e:	90 93 48 02 	sts	0x0248, r25
    1e62:	80 93 47 02 	sts	0x0247, r24
	LEopstat = LED_open(); //open the LED module
    1e66:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LED_open>
    1e6a:	90 93 46 02 	sts	0x0246, r25
    1e6e:	80 93 45 02 	sts	0x0245, r24
	LCopstat = LCD_open(); //open the LCD module
    1e72:	0e 94 ee 0f 	call	0x1fdc	; 0x1fdc <LCD_open>
    1e76:	90 93 44 02 	sts	0x0244, r25
    1e7a:	80 93 43 02 	sts	0x0243, r24
	STEPPER_open(); // Open STEPPER module for use
    1e7e:	0e 94 59 13 	call	0x26b2	; 0x26b2 <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in beep mode
    1e82:	81 e0       	ldi	r24, 0x01	; 1
    1e84:	0e 94 dd 11 	call	0x23ba	; 0x23ba <SPKR_open>
	
	LED_open();
    1e88:	0e 94 d7 10 	call	0x21ae	; 0x21ae <LED_open>
	I2C_open();
    1e8c:	0e 94 77 17 	call	0x2eee	; 0x2eee <I2C_open>
	ADC_open();//open the ADC module
    1e90:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    1e94:	81 e0       	ldi	r24, 0x01	; 1
    1e96:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <ADC_set_VREF>

	// Initialize IR Values and Reset Prefilter
	checkIR();
    1e9a:	0e 94 95 08 	call	0x112a	; 0x112a <checkIR>
	prefilter(1);
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <prefilter>

	// Infinite loop
	while (1)
    {
		// update the sensor values
		checkLightSensor();
    1ea4:	0e 94 80 08 	call	0x1100	; 0x1100 <checkLightSensor>
		checkIR();
    1ea8:	0e 94 95 08 	call	0x112a	; 0x112a <checkIR>
		checkContactIR();
    1eac:	0e 94 72 08 	call	0x10e4	; 0x10e4 <checkContactIR>
		// run the moveBehavior FSM
		//moveBehavior(1);
		
		// debug primitive behaviors
		// moveAway();
		moveWall();
    1eb0:	0e 94 25 0a 	call	0x144a	; 0x144a <moveWall>
    1eb4:	f7 cf       	rjmp	.-18     	; 0x1ea4 <CBOT_main+0x4a>

00001eb6 <ADC_open>:
    1eb6:	8f e0       	ldi	r24, 0x0F	; 15
    1eb8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    1ebc:	88 23       	and	r24, r24
    1ebe:	31 f4       	brne	.+12     	; 0x1ecc <ADC_open+0x16>
    1ec0:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <__ADC_init>
    1ec4:	8f e0       	ldi	r24, 0x0F	; 15
    1ec6:	61 e0       	ldi	r22, 0x01	; 1
    1ec8:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    1ecc:	8f e0       	ldi	r24, 0x0F	; 15
    1ece:	91 e0       	ldi	r25, 0x01	; 1
    1ed0:	08 95       	ret

00001ed2 <ADC_sample>:
    1ed2:	8f e0       	ldi	r24, 0x0F	; 15
    1ed4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    1ed8:	81 30       	cpi	r24, 0x01	; 1
    1eda:	19 f0       	breq	.+6      	; 0x1ee2 <ADC_sample+0x10>
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	13 c0       	rjmp	.+38     	; 0x1f08 <ADC_sample+0x36>
    1ee2:	80 91 7a 00 	lds	r24, 0x007A
    1ee6:	80 64       	ori	r24, 0x40	; 64
    1ee8:	80 93 7a 00 	sts	0x007A, r24
    1eec:	80 91 7a 00 	lds	r24, 0x007A
    1ef0:	86 fd       	sbrc	r24, 6
    1ef2:	fc cf       	rjmp	.-8      	; 0x1eec <ADC_sample+0x1a>
    1ef4:	30 91 78 00 	lds	r19, 0x0078
    1ef8:	20 91 79 00 	lds	r18, 0x0079
    1efc:	92 2f       	mov	r25, r18
    1efe:	80 e0       	ldi	r24, 0x00	; 0
    1f00:	23 2f       	mov	r18, r19
    1f02:	30 e0       	ldi	r19, 0x00	; 0
    1f04:	28 2b       	or	r18, r24
    1f06:	39 2b       	or	r19, r25
    1f08:	c9 01       	movw	r24, r18
    1f0a:	08 95       	ret

00001f0c <ADC_set_channel>:
    1f0c:	58 2f       	mov	r21, r24
    1f0e:	80 91 4b 01 	lds	r24, 0x014B
    1f12:	88 30       	cpi	r24, 0x08	; 8
    1f14:	d8 f4       	brcc	.+54     	; 0x1f4c <ADC_set_channel+0x40>
    1f16:	40 91 7e 00 	lds	r20, 0x007E
    1f1a:	21 e0       	ldi	r18, 0x01	; 1
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	b9 01       	movw	r22, r18
    1f20:	02 c0       	rjmp	.+4      	; 0x1f26 <ADC_set_channel+0x1a>
    1f22:	66 0f       	add	r22, r22
    1f24:	77 1f       	adc	r23, r23
    1f26:	8a 95       	dec	r24
    1f28:	e2 f7       	brpl	.-8      	; 0x1f22 <ADC_set_channel+0x16>
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	80 95       	com	r24
    1f2e:	84 23       	and	r24, r20
    1f30:	80 93 7e 00 	sts	0x007E, r24
    1f34:	80 91 7e 00 	lds	r24, 0x007E
    1f38:	05 2e       	mov	r0, r21
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <ADC_set_channel+0x34>
    1f3c:	22 0f       	add	r18, r18
    1f3e:	33 1f       	adc	r19, r19
    1f40:	0a 94       	dec	r0
    1f42:	e2 f7       	brpl	.-8      	; 0x1f3c <ADC_set_channel+0x30>
    1f44:	82 2b       	or	r24, r18
    1f46:	80 93 7e 00 	sts	0x007E, r24
    1f4a:	0d c0       	rjmp	.+26     	; 0x1f66 <ADC_set_channel+0x5a>
    1f4c:	20 91 7e 00 	lds	r18, 0x007E
    1f50:	81 e0       	ldi	r24, 0x01	; 1
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	05 2e       	mov	r0, r21
    1f56:	02 c0       	rjmp	.+4      	; 0x1f5c <ADC_set_channel+0x50>
    1f58:	88 0f       	add	r24, r24
    1f5a:	99 1f       	adc	r25, r25
    1f5c:	0a 94       	dec	r0
    1f5e:	e2 f7       	brpl	.-8      	; 0x1f58 <ADC_set_channel+0x4c>
    1f60:	28 2b       	or	r18, r24
    1f62:	20 93 7e 00 	sts	0x007E, r18
    1f66:	50 93 4b 01 	sts	0x014B, r21
    1f6a:	80 91 7c 00 	lds	r24, 0x007C
    1f6e:	5f 71       	andi	r21, 0x1F	; 31
    1f70:	80 7e       	andi	r24, 0xE0	; 224
    1f72:	85 2b       	or	r24, r21
    1f74:	80 93 7c 00 	sts	0x007C, r24
    1f78:	08 95       	ret

00001f7a <ADC_set_VREF>:
    1f7a:	ec e7       	ldi	r30, 0x7C	; 124
    1f7c:	f0 e0       	ldi	r31, 0x00	; 0
    1f7e:	90 81       	ld	r25, Z
    1f80:	82 95       	swap	r24
    1f82:	88 0f       	add	r24, r24
    1f84:	88 0f       	add	r24, r24
    1f86:	80 7c       	andi	r24, 0xC0	; 192
    1f88:	9f 73       	andi	r25, 0x3F	; 63
    1f8a:	98 2b       	or	r25, r24
    1f8c:	90 83       	st	Z, r25
    1f8e:	08 95       	ret

00001f90 <main>:
    1f90:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <CBOT_ISR_init>
    1f94:	0e 94 a9 17 	call	0x2f52	; 0x2f52 <CBOT_init>
    1f98:	0e 94 2d 0f 	call	0x1e5a	; 0x1e5a <CBOT_main>
    1f9c:	80 e0       	ldi	r24, 0x00	; 0
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	08 95       	ret

00001fa2 <LCD_clear>:
    1fa2:	0f 93       	push	r16
    1fa4:	1f 93       	push	r17
    1fa6:	80 e4       	ldi	r24, 0x40	; 64
    1fa8:	60 e0       	ldi	r22, 0x00	; 0
    1faa:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    1fae:	00 e0       	ldi	r16, 0x00	; 0
    1fb0:	80 2f       	mov	r24, r16
    1fb2:	60 e0       	ldi	r22, 0x00	; 0
    1fb4:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_set_PGC_addr>
    1fb8:	10 e0       	ldi	r17, 0x00	; 0
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	61 e0       	ldi	r22, 0x01	; 1
    1fbe:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    1fc2:	1f 5f       	subi	r17, 0xFF	; 255
    1fc4:	10 38       	cpi	r17, 0x80	; 128
    1fc6:	c9 f7       	brne	.-14     	; 0x1fba <LCD_clear+0x18>
    1fc8:	0f 5f       	subi	r16, 0xFF	; 255
    1fca:	04 30       	cpi	r16, 0x04	; 4
    1fcc:	89 f7       	brne	.-30     	; 0x1fb0 <LCD_clear+0xe>
    1fce:	83 e0       	ldi	r24, 0x03	; 3
    1fd0:	60 e0       	ldi	r22, 0x00	; 0
    1fd2:	0e 94 90 10 	call	0x2120	; 0x2120 <LCD_set_next_PGC>
    1fd6:	1f 91       	pop	r17
    1fd8:	0f 91       	pop	r16
    1fda:	08 95       	ret

00001fdc <LCD_open>:
    1fdc:	0f 93       	push	r16
    1fde:	1f 93       	push	r17
    1fe0:	82 e0       	ldi	r24, 0x02	; 2
    1fe2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    1fe6:	88 23       	and	r24, r24
    1fe8:	11 f4       	brne	.+4      	; 0x1fee <LCD_open+0x12>
    1fea:	82 e0       	ldi	r24, 0x02	; 2
    1fec:	06 c0       	rjmp	.+12     	; 0x1ffa <LCD_open+0x1e>
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    1ff4:	88 23       	and	r24, r24
    1ff6:	19 f4       	brne	.+6      	; 0x1ffe <LCD_open+0x22>
    1ff8:	81 e0       	ldi	r24, 0x01	; 1
    1ffa:	90 e0       	ldi	r25, 0x00	; 0
    1ffc:	6d c0       	rjmp	.+218    	; 0x20d8 <LCD_open+0xfc>
    1ffe:	0e 94 1f 1a 	call	0x343e	; 0x343e <__LCD_init>
    2002:	85 e0       	ldi	r24, 0x05	; 5
    2004:	61 e0       	ldi	r22, 0x01	; 1
    2006:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    200a:	8e ea       	ldi	r24, 0xAE	; 174
    200c:	60 e0       	ldi	r22, 0x00	; 0
    200e:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    2012:	82 ea       	ldi	r24, 0xA2	; 162
    2014:	60 e0       	ldi	r22, 0x00	; 0
    2016:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    201a:	80 ea       	ldi	r24, 0xA0	; 160
    201c:	60 e0       	ldi	r22, 0x00	; 0
    201e:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    2022:	00 e5       	ldi	r16, 0x50	; 80
    2024:	13 ec       	ldi	r17, 0xC3	; 195
    2026:	c8 01       	movw	r24, r16
    2028:	01 97       	sbiw	r24, 0x01	; 1
    202a:	f1 f7       	brne	.-4      	; 0x2028 <LCD_open+0x4c>
    202c:	80 ec       	ldi	r24, 0xC0	; 192
    202e:	60 e0       	ldi	r22, 0x00	; 0
    2030:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    2034:	8f e2       	ldi	r24, 0x2F	; 47
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    203c:	81 e8       	ldi	r24, 0x81	; 129
    203e:	60 e0       	ldi	r22, 0x00	; 0
    2040:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    2044:	86 e1       	ldi	r24, 0x16	; 22
    2046:	60 e0       	ldi	r22, 0x00	; 0
    2048:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    204c:	82 e2       	ldi	r24, 0x22	; 34
    204e:	60 e0       	ldi	r22, 0x00	; 0
    2050:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    2054:	c8 01       	movw	r24, r16
    2056:	01 97       	sbiw	r24, 0x01	; 1
    2058:	f1 f7       	brne	.-4      	; 0x2056 <LCD_open+0x7a>
    205a:	8f ea       	ldi	r24, 0xAF	; 175
    205c:	60 e0       	ldi	r22, 0x00	; 0
    205e:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    2062:	86 ea       	ldi	r24, 0xA6	; 166
    2064:	60 e0       	ldi	r22, 0x00	; 0
    2066:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    206a:	85 ea       	ldi	r24, 0xA5	; 165
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	28 e8       	ldi	r18, 0x88	; 136
    2078:	33 e1       	ldi	r19, 0x13	; 19
    207a:	f9 01       	movw	r30, r18
    207c:	31 97       	sbiw	r30, 0x01	; 1
    207e:	f1 f7       	brne	.-4      	; 0x207c <LCD_open+0xa0>
    2080:	01 96       	adiw	r24, 0x01	; 1
    2082:	43 e0       	ldi	r20, 0x03	; 3
    2084:	88 3e       	cpi	r24, 0xE8	; 232
    2086:	94 07       	cpc	r25, r20
    2088:	c1 f7       	brne	.-16     	; 0x207a <LCD_open+0x9e>
    208a:	83 eb       	ldi	r24, 0xB3	; 179
    208c:	60 e0       	ldi	r22, 0x00	; 0
    208e:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    2092:	80 e4       	ldi	r24, 0x40	; 64
    2094:	60 e0       	ldi	r22, 0x00	; 0
    2096:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    209a:	83 e0       	ldi	r24, 0x03	; 3
    209c:	60 e0       	ldi	r22, 0x00	; 0
    209e:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_set_PGC_addr>
    20a2:	83 e0       	ldi	r24, 0x03	; 3
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	0e 94 90 10 	call	0x2120	; 0x2120 <LCD_set_next_PGC>
    20aa:	10 92 79 04 	sts	0x0479, r1
    20ae:	10 92 7b 04 	sts	0x047B, r1
    20b2:	10 92 7a 04 	sts	0x047A, r1
    20b6:	8a e5       	ldi	r24, 0x5A	; 90
    20b8:	91 e0       	ldi	r25, 0x01	; 1
    20ba:	90 93 aa 04 	sts	0x04AA, r25
    20be:	80 93 a9 04 	sts	0x04A9, r24
    20c2:	88 e1       	ldi	r24, 0x18	; 24
    20c4:	0e 94 6f 10 	call	0x20de	; 0x20de <LCD_set_backlight>
    20c8:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_clear>
    20cc:	84 ea       	ldi	r24, 0xA4	; 164
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    20d4:	85 e0       	ldi	r24, 0x05	; 5
    20d6:	91 e0       	ldi	r25, 0x01	; 1
    20d8:	1f 91       	pop	r17
    20da:	0f 91       	pop	r16
    20dc:	08 95       	ret

000020de <LCD_set_backlight>:
    20de:	1f 93       	push	r17
    20e0:	18 2f       	mov	r17, r24
    20e2:	85 e0       	ldi	r24, 0x05	; 5
    20e4:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	c1 f4       	brne	.+48     	; 0x211c <LCD_set_backlight+0x3e>
    20ec:	87 e0       	ldi	r24, 0x07	; 7
    20ee:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <SPI_set_slave_addr>
    20f2:	82 e0       	ldi	r24, 0x02	; 2
    20f4:	6a e0       	ldi	r22, 0x0A	; 10
    20f6:	0e 94 3d 11 	call	0x227a	; 0x227a <SPI_transmit>
    20fa:	82 e0       	ldi	r24, 0x02	; 2
    20fc:	61 eb       	ldi	r22, 0xB1	; 177
    20fe:	0e 94 3d 11 	call	0x227a	; 0x227a <SPI_transmit>
    2102:	61 2f       	mov	r22, r17
    2104:	11 32       	cpi	r17, 0x21	; 33
    2106:	08 f0       	brcs	.+2      	; 0x210a <LCD_set_backlight+0x2c>
    2108:	60 e2       	ldi	r22, 0x20	; 32
    210a:	82 e0       	ldi	r24, 0x02	; 2
    210c:	0e 94 3d 11 	call	0x227a	; 0x227a <SPI_transmit>
    2110:	89 ee       	ldi	r24, 0xE9	; 233
    2112:	8a 95       	dec	r24
    2114:	f1 f7       	brne	.-4      	; 0x2112 <LCD_set_backlight+0x34>
    2116:	87 e0       	ldi	r24, 0x07	; 7
    2118:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <SPI_set_slave_addr>
    211c:	1f 91       	pop	r17
    211e:	08 95       	ret

00002120 <LCD_set_next_PGC>:
    2120:	83 70       	andi	r24, 0x03	; 3
    2122:	6f 77       	andi	r22, 0x7F	; 127
    2124:	60 93 77 04 	sts	0x0477, r22
    2128:	80 93 78 04 	sts	0x0478, r24
    212c:	08 95       	ret

0000212e <LCD_set_PGC_addr>:
    212e:	0f 93       	push	r16
    2130:	1f 93       	push	r17
    2132:	06 2f       	mov	r16, r22
    2134:	16 2f       	mov	r17, r22
    2136:	1f 77       	andi	r17, 0x7F	; 127
    2138:	83 70       	andi	r24, 0x03	; 3
    213a:	80 6b       	ori	r24, 0xB0	; 176
    213c:	60 e0       	ldi	r22, 0x00	; 0
    213e:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    2142:	12 95       	swap	r17
    2144:	1f 70       	andi	r17, 0x0F	; 15
    2146:	81 2f       	mov	r24, r17
    2148:	80 61       	ori	r24, 0x10	; 16
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    2150:	80 2f       	mov	r24, r16
    2152:	8f 70       	andi	r24, 0x0F	; 15
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    215a:	1f 91       	pop	r17
    215c:	0f 91       	pop	r16
    215e:	08 95       	ret

00002160 <LCD_write>:
    2160:	0f 93       	push	r16
    2162:	1f 93       	push	r17
    2164:	08 2f       	mov	r16, r24
    2166:	16 2f       	mov	r17, r22
    2168:	85 e0       	ldi	r24, 0x05	; 5
    216a:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    216e:	81 30       	cpi	r24, 0x01	; 1
    2170:	79 f4       	brne	.+30     	; 0x2190 <LCD_write+0x30>
    2172:	11 23       	and	r17, r17
    2174:	19 f0       	breq	.+6      	; 0x217c <LCD_write+0x1c>
    2176:	11 30       	cpi	r17, 0x01	; 1
    2178:	21 f4       	brne	.+8      	; 0x2182 <LCD_write+0x22>
    217a:	02 c0       	rjmp	.+4      	; 0x2180 <LCD_write+0x20>
    217c:	2b 98       	cbi	0x05, 3	; 5
    217e:	01 c0       	rjmp	.+2      	; 0x2182 <LCD_write+0x22>
    2180:	2b 9a       	sbi	0x05, 3	; 5
    2182:	86 e0       	ldi	r24, 0x06	; 6
    2184:	8a 95       	dec	r24
    2186:	f1 f7       	brne	.-4      	; 0x2184 <LCD_write+0x24>
    2188:	80 e0       	ldi	r24, 0x00	; 0
    218a:	60 2f       	mov	r22, r16
    218c:	0e 94 3d 11 	call	0x227a	; 0x227a <SPI_transmit>
    2190:	1f 91       	pop	r17
    2192:	0f 91       	pop	r16
    2194:	08 95       	ret

00002196 <LED_clr_pattern>:
    2196:	1f 93       	push	r17
    2198:	18 2f       	mov	r17, r24
    219a:	86 e0       	ldi	r24, 0x06	; 6
    219c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    21a0:	81 30       	cpi	r24, 0x01	; 1
    21a2:	19 f4       	brne	.+6      	; 0x21aa <LED_clr_pattern+0x14>
    21a4:	81 2f       	mov	r24, r17
    21a6:	0e 94 ce 1a 	call	0x359c	; 0x359c <__LED_clr_pattern>
    21aa:	1f 91       	pop	r17
    21ac:	08 95       	ret

000021ae <LED_open>:
    21ae:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <__LED_init>
    21b2:	86 e0       	ldi	r24, 0x06	; 6
    21b4:	61 e0       	ldi	r22, 0x01	; 1
    21b6:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    21ba:	86 e0       	ldi	r24, 0x06	; 6
    21bc:	91 e0       	ldi	r25, 0x01	; 1
    21be:	08 95       	ret

000021c0 <LED_set_pattern>:
    21c0:	1f 93       	push	r17
    21c2:	18 2f       	mov	r17, r24
    21c4:	86 e0       	ldi	r24, 0x06	; 6
    21c6:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    21ca:	81 30       	cpi	r24, 0x01	; 1
    21cc:	19 f4       	brne	.+6      	; 0x21d4 <LED_set_pattern+0x14>
    21ce:	81 2f       	mov	r24, r17
    21d0:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <__LED_set_pattern>
    21d4:	1f 91       	pop	r17
    21d6:	08 95       	ret

000021d8 <SPI_set_slave_addr>:
    21d8:	1f 93       	push	r17
    21da:	18 2f       	mov	r17, r24
    21dc:	82 e0       	ldi	r24, 0x02	; 2
    21de:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    21e2:	81 30       	cpi	r24, 0x01	; 1
    21e4:	09 f0       	breq	.+2      	; 0x21e8 <SPI_set_slave_addr+0x10>
    21e6:	47 c0       	rjmp	.+142    	; 0x2276 <SPI_set_slave_addr+0x9e>
    21e8:	91 2f       	mov	r25, r17
    21ea:	97 70       	andi	r25, 0x07	; 7
    21ec:	80 91 7c 04 	lds	r24, 0x047C
    21f0:	98 17       	cp	r25, r24
    21f2:	09 f4       	brne	.+2      	; 0x21f6 <SPI_set_slave_addr+0x1e>
    21f4:	40 c0       	rjmp	.+128    	; 0x2276 <SPI_set_slave_addr+0x9e>
    21f6:	90 93 7c 04 	sts	0x047C, r25
    21fa:	85 b1       	in	r24, 0x05	; 5
    21fc:	88 7f       	andi	r24, 0xF8	; 248
    21fe:	89 2b       	or	r24, r25
    2200:	85 b9       	out	0x05, r24	; 5
    2202:	93 30       	cpi	r25, 0x03	; 3
    2204:	11 f1       	breq	.+68     	; 0x224a <SPI_set_slave_addr+0x72>
    2206:	94 30       	cpi	r25, 0x04	; 4
    2208:	28 f4       	brcc	.+10     	; 0x2214 <SPI_set_slave_addr+0x3c>
    220a:	91 30       	cpi	r25, 0x01	; 1
    220c:	51 f0       	breq	.+20     	; 0x2222 <SPI_set_slave_addr+0x4a>
    220e:	92 30       	cpi	r25, 0x02	; 2
    2210:	90 f4       	brcc	.+36     	; 0x2236 <SPI_set_slave_addr+0x5e>
    2212:	0c c0       	rjmp	.+24     	; 0x222c <SPI_set_slave_addr+0x54>
    2214:	95 30       	cpi	r25, 0x05	; 5
    2216:	19 f1       	breq	.+70     	; 0x225e <SPI_set_slave_addr+0x86>
    2218:	95 30       	cpi	r25, 0x05	; 5
    221a:	e0 f0       	brcs	.+56     	; 0x2254 <SPI_set_slave_addr+0x7c>
    221c:	96 30       	cpi	r25, 0x06	; 6
    221e:	21 f5       	brne	.+72     	; 0x2268 <SPI_set_slave_addr+0x90>
    2220:	0f c0       	rjmp	.+30     	; 0x2240 <SPI_set_slave_addr+0x68>
    2222:	e0 91 1e 02 	lds	r30, 0x021E
    2226:	f0 91 1f 02 	lds	r31, 0x021F
    222a:	22 c0       	rjmp	.+68     	; 0x2270 <SPI_set_slave_addr+0x98>
    222c:	e0 91 1c 02 	lds	r30, 0x021C
    2230:	f0 91 1d 02 	lds	r31, 0x021D
    2234:	1d c0       	rjmp	.+58     	; 0x2270 <SPI_set_slave_addr+0x98>
    2236:	e0 91 20 02 	lds	r30, 0x0220
    223a:	f0 91 21 02 	lds	r31, 0x0221
    223e:	18 c0       	rjmp	.+48     	; 0x2270 <SPI_set_slave_addr+0x98>
    2240:	e0 91 28 02 	lds	r30, 0x0228
    2244:	f0 91 29 02 	lds	r31, 0x0229
    2248:	13 c0       	rjmp	.+38     	; 0x2270 <SPI_set_slave_addr+0x98>
    224a:	e0 91 22 02 	lds	r30, 0x0222
    224e:	f0 91 23 02 	lds	r31, 0x0223
    2252:	0e c0       	rjmp	.+28     	; 0x2270 <SPI_set_slave_addr+0x98>
    2254:	e0 91 24 02 	lds	r30, 0x0224
    2258:	f0 91 25 02 	lds	r31, 0x0225
    225c:	09 c0       	rjmp	.+18     	; 0x2270 <SPI_set_slave_addr+0x98>
    225e:	e0 91 26 02 	lds	r30, 0x0226
    2262:	f0 91 27 02 	lds	r31, 0x0227
    2266:	04 c0       	rjmp	.+8      	; 0x2270 <SPI_set_slave_addr+0x98>
    2268:	e0 91 2a 02 	lds	r30, 0x022A
    226c:	f0 91 2b 02 	lds	r31, 0x022B
    2270:	30 97       	sbiw	r30, 0x00	; 0
    2272:	09 f0       	breq	.+2      	; 0x2276 <SPI_set_slave_addr+0x9e>
    2274:	09 95       	icall
    2276:	1f 91       	pop	r17
    2278:	08 95       	ret

0000227a <SPI_transmit>:
    227a:	1f 93       	push	r17
    227c:	16 2f       	mov	r17, r22
    227e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <SPI_set_slave_addr>
    2282:	82 e0       	ldi	r24, 0x02	; 2
    2284:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    2288:	81 30       	cpi	r24, 0x01	; 1
    228a:	21 f4       	brne	.+8      	; 0x2294 <SPI_transmit+0x1a>
    228c:	1e bd       	out	0x2e, r17	; 46
    228e:	0d b4       	in	r0, 0x2d	; 45
    2290:	07 fe       	sbrs	r0, 7
    2292:	fd cf       	rjmp	.-6      	; 0x228e <SPI_transmit+0x14>
    2294:	1f 91       	pop	r17
    2296:	08 95       	ret

00002298 <__SPKR_set_up_freq_LUT>:
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	cf 93       	push	r28
    229e:	df 93       	push	r29
    22a0:	80 e2       	ldi	r24, 0x20	; 32
    22a2:	91 e0       	ldi	r25, 0x01	; 1
    22a4:	0e 94 49 2a 	call	0x5492	; 0x5492 <malloc>
    22a8:	9c 01       	movw	r18, r24
    22aa:	90 93 3b 02 	sts	0x023B, r25
    22ae:	80 93 3a 02 	sts	0x023A, r24
    22b2:	89 2b       	or	r24, r25
    22b4:	11 f4       	brne	.+4      	; 0x22ba <__SPKR_set_up_freq_LUT+0x22>
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	39 c0       	rjmp	.+114    	; 0x232c <__SPKR_set_up_freq_LUT+0x94>
    22ba:	89 01       	movw	r16, r18
    22bc:	c0 e0       	ldi	r28, 0x00	; 0
    22be:	d0 e0       	ldi	r29, 0x00	; 0
    22c0:	be 01       	movw	r22, r28
    22c2:	80 e0       	ldi	r24, 0x00	; 0
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	0e 94 8a 23 	call	0x4714	; 0x4714 <__floatunsisf>
    22ca:	20 e0       	ldi	r18, 0x00	; 0
    22cc:	30 e0       	ldi	r19, 0x00	; 0
    22ce:	40 ea       	ldi	r20, 0xA0	; 160
    22d0:	51 e4       	ldi	r21, 0x41	; 65
    22d2:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <__divsf3>
    22d6:	27 ef       	ldi	r18, 0xF7	; 247
    22d8:	35 e7       	ldi	r19, 0x75	; 117
    22da:	40 e0       	ldi	r20, 0x00	; 0
    22dc:	5f e3       	ldi	r21, 0x3F	; 63
    22de:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    22e2:	9b 01       	movw	r18, r22
    22e4:	ac 01       	movw	r20, r24
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	70 e0       	ldi	r23, 0x00	; 0
    22ea:	80 e2       	ldi	r24, 0x20	; 32
    22ec:	91 e4       	ldi	r25, 0x41	; 65
    22ee:	0e 94 dd 24 	call	0x49ba	; 0x49ba <pow>
    22f2:	9b 01       	movw	r18, r22
    22f4:	ac 01       	movw	r20, r24
    22f6:	ca 01       	movw	r24, r20
    22f8:	b9 01       	movw	r22, r18
    22fa:	2d ec       	ldi	r18, 0xCD	; 205
    22fc:	3c ec       	ldi	r19, 0xCC	; 204
    22fe:	42 e8       	ldi	r20, 0x82	; 130
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <__mulsf3>
    2306:	0e 94 40 24 	call	0x4880	; 0x4880 <lrint>
    230a:	2a e0       	ldi	r18, 0x0A	; 10
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e0       	ldi	r20, 0x00	; 0
    2310:	50 e0       	ldi	r21, 0x00	; 0
    2312:	0e 94 aa 29 	call	0x5354	; 0x5354 <__mulsi3>
    2316:	f8 01       	movw	r30, r16
    2318:	61 93       	st	Z+, r22
    231a:	71 93       	st	Z+, r23
    231c:	81 93       	st	Z+, r24
    231e:	91 93       	st	Z+, r25
    2320:	8f 01       	movw	r16, r30
    2322:	21 96       	adiw	r28, 0x01	; 1
    2324:	c8 34       	cpi	r28, 0x48	; 72
    2326:	d1 05       	cpc	r29, r1
    2328:	59 f6       	brne	.-106    	; 0x22c0 <__SPKR_set_up_freq_LUT+0x28>
    232a:	81 e0       	ldi	r24, 0x01	; 1
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	08 95       	ret

00002336 <__SPKR_open_beep_mode>:
    2336:	8a e0       	ldi	r24, 0x0A	; 10
    2338:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    233c:	88 23       	and	r24, r24
    233e:	71 f4       	brne	.+28     	; 0x235c <__SPKR_open_beep_mode+0x26>
    2340:	10 92 37 02 	sts	0x0237, r1
    2344:	10 92 36 02 	sts	0x0236, r1
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	0e 94 11 1c 	call	0x3822	; 0x3822 <__SPKR_init>
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	80 93 2d 02 	sts	0x022D, r24
    2354:	8a e0       	ldi	r24, 0x0A	; 10
    2356:	61 e0       	ldi	r22, 0x01	; 1
    2358:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    235c:	8a e0       	ldi	r24, 0x0A	; 10
    235e:	91 e0       	ldi	r25, 0x01	; 1
    2360:	08 95       	ret

00002362 <__SPKR_open_tone_mode>:
    2362:	1f 93       	push	r17
    2364:	8b e0       	ldi	r24, 0x0B	; 11
    2366:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    236a:	88 23       	and	r24, r24
    236c:	11 f0       	breq	.+4      	; 0x2372 <__SPKR_open_tone_mode+0x10>
    236e:	90 e0       	ldi	r25, 0x00	; 0
    2370:	21 c0       	rjmp	.+66     	; 0x23b4 <__SPKR_open_tone_mode+0x52>
    2372:	89 e0       	ldi	r24, 0x09	; 9
    2374:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    2378:	88 23       	and	r24, r24
    237a:	d9 f4       	brne	.+54     	; 0x23b2 <__SPKR_open_tone_mode+0x50>
    237c:	0e 94 4c 11 	call	0x2298	; 0x2298 <__SPKR_set_up_freq_LUT>
    2380:	18 2f       	mov	r17, r24
    2382:	81 30       	cpi	r24, 0x01	; 1
    2384:	b1 f4       	brne	.+44     	; 0x23b2 <__SPKR_open_tone_mode+0x50>
    2386:	10 92 2e 02 	sts	0x022E, r1
    238a:	10 92 2f 02 	sts	0x022F, r1
    238e:	10 92 30 02 	sts	0x0230, r1
    2392:	10 92 31 02 	sts	0x0231, r1
    2396:	8d e0       	ldi	r24, 0x0D	; 13
    2398:	64 e9       	ldi	r22, 0x94	; 148
    239a:	7b e1       	ldi	r23, 0x1B	; 27
    239c:	0e 94 f7 19 	call	0x33ee	; 0x33ee <ISR_attach>
    23a0:	82 e0       	ldi	r24, 0x02	; 2
    23a2:	0e 94 11 1c 	call	0x3822	; 0x3822 <__SPKR_init>
    23a6:	10 93 2c 02 	sts	0x022C, r17
    23aa:	89 e0       	ldi	r24, 0x09	; 9
    23ac:	61 e0       	ldi	r22, 0x01	; 1
    23ae:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    23b2:	91 e0       	ldi	r25, 0x01	; 1
    23b4:	89 e0       	ldi	r24, 0x09	; 9
    23b6:	1f 91       	pop	r17
    23b8:	08 95       	ret

000023ba <SPKR_open>:
    23ba:	81 30       	cpi	r24, 0x01	; 1
    23bc:	29 f0       	breq	.+10     	; 0x23c8 <SPKR_open+0xe>
    23be:	82 30       	cpi	r24, 0x02	; 2
    23c0:	31 f0       	breq	.+12     	; 0x23ce <SPKR_open+0x14>
    23c2:	90 e0       	ldi	r25, 0x00	; 0
    23c4:	89 e0       	ldi	r24, 0x09	; 9
    23c6:	08 95       	ret
    23c8:	0e 94 9b 11 	call	0x2336	; 0x2336 <__SPKR_open_beep_mode>
    23cc:	08 95       	ret
    23ce:	0e 94 b1 11 	call	0x2362	; 0x2362 <__SPKR_open_tone_mode>
    23d2:	08 95       	ret

000023d4 <STEPPER_get_nSteps>:
    23d4:	80 91 3d 04 	lds	r24, 0x043D
    23d8:	90 91 3e 04 	lds	r25, 0x043E
    23dc:	20 91 3f 04 	lds	r18, 0x043F
    23e0:	30 91 40 04 	lds	r19, 0x0440
    23e4:	bc 01       	movw	r22, r24
    23e6:	c9 01       	movw	r24, r18
    23e8:	08 95       	ret

000023ea <STEPPER_stepmode>:
    23ea:	2f 92       	push	r2
    23ec:	3f 92       	push	r3
    23ee:	4f 92       	push	r4
    23f0:	5f 92       	push	r5
    23f2:	6f 92       	push	r6
    23f4:	7f 92       	push	r7
    23f6:	8f 92       	push	r8
    23f8:	9f 92       	push	r9
    23fa:	af 92       	push	r10
    23fc:	bf 92       	push	r11
    23fe:	cf 92       	push	r12
    2400:	df 92       	push	r13
    2402:	ef 92       	push	r14
    2404:	ff 92       	push	r15
    2406:	0f 93       	push	r16
    2408:	1f 93       	push	r17
    240a:	df 93       	push	r29
    240c:	cf 93       	push	r28
    240e:	cd b7       	in	r28, 0x3d	; 61
    2410:	de b7       	in	r29, 0x3e	; 62
    2412:	58 2e       	mov	r5, r24
    2414:	96 2e       	mov	r9, r22
    2416:	44 2e       	mov	r4, r20
    2418:	39 01       	movw	r6, r18
    241a:	3c 2c       	mov	r3, r12
    241c:	c9 8c       	ldd	r12, Y+25	; 0x19
    241e:	da 8c       	ldd	r13, Y+26	; 0x1a
    2420:	2b 8c       	ldd	r2, Y+27	; 0x1b
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	68 17       	cp	r22, r24
    2426:	39 f1       	breq	.+78     	; 0x2476 <STEPPER_stepmode+0x8c>
    2428:	68 17       	cp	r22, r24
    242a:	28 f0       	brcs	.+10     	; 0x2436 <STEPPER_stepmode+0x4c>
    242c:	92 e0       	ldi	r25, 0x02	; 2
    242e:	69 17       	cp	r22, r25
    2430:	09 f0       	breq	.+2      	; 0x2434 <STEPPER_stepmode+0x4a>
    2432:	85 c0       	rjmp	.+266    	; 0x253e <STEPPER_stepmode+0x154>
    2434:	49 c0       	rjmp	.+146    	; 0x24c8 <STEPPER_stepmode+0xde>
    2436:	80 e0       	ldi	r24, 0x00	; 0
    2438:	61 e0       	ldi	r22, 0x01	; 1
    243a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <STEPPER_set_mode>
    243e:	80 e0       	ldi	r24, 0x00	; 0
    2440:	b7 01       	movw	r22, r14
    2442:	0e 94 c7 13 	call	0x278e	; 0x278e <STEPPER_set_accel>
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	64 2d       	mov	r22, r4
    244a:	a3 01       	movw	r20, r6
    244c:	98 01       	movw	r18, r16
    244e:	03 2d       	mov	r16, r3
    2450:	ee 24       	eor	r14, r14
    2452:	e3 94       	inc	r14
    2454:	e2 e6       	ldi	r30, 0x62	; 98
    2456:	ce 2e       	mov	r12, r30
    2458:	e4 e0       	ldi	r30, 0x04	; 4
    245a:	de 2e       	mov	r13, r30
    245c:	0e 94 35 14 	call	0x286a	; 0x286a <STEPPER_step>
    2460:	55 20       	and	r5, r5
    2462:	09 f0       	breq	.+2      	; 0x2466 <STEPPER_stepmode+0x7c>
    2464:	6c c0       	rjmp	.+216    	; 0x253e <STEPPER_stepmode+0x154>
    2466:	00 d0       	rcall	.+0      	; 0x2468 <STEPPER_stepmode+0x7e>
    2468:	0f 92       	push	r0
    246a:	ed b7       	in	r30, 0x3d	; 61
    246c:	fe b7       	in	r31, 0x3e	; 62
    246e:	11 82       	std	Z+1, r1	; 0x01
    2470:	b3 82       	std	Z+3, r11	; 0x03
    2472:	a2 82       	std	Z+2, r10	; 0x02
    2474:	23 c0       	rjmp	.+70     	; 0x24bc <STEPPER_stepmode+0xd2>
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	61 e0       	ldi	r22, 0x01	; 1
    247a:	0e 94 fe 13 	call	0x27fc	; 0x27fc <STEPPER_set_mode>
    247e:	81 e0       	ldi	r24, 0x01	; 1
    2480:	b6 01       	movw	r22, r12
    2482:	0e 94 c7 13 	call	0x278e	; 0x278e <STEPPER_set_accel>
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	68 2d       	mov	r22, r8
    248a:	4d 89       	ldd	r20, Y+21	; 0x15
    248c:	5e 89       	ldd	r21, Y+22	; 0x16
    248e:	2f 89       	ldd	r18, Y+23	; 0x17
    2490:	38 8d       	ldd	r19, Y+24	; 0x18
    2492:	02 2d       	mov	r16, r2
    2494:	ee 24       	eor	r14, r14
    2496:	e3 94       	inc	r14
    2498:	72 e6       	ldi	r23, 0x62	; 98
    249a:	c7 2e       	mov	r12, r23
    249c:	74 e0       	ldi	r23, 0x04	; 4
    249e:	d7 2e       	mov	r13, r23
    24a0:	0e 94 35 14 	call	0x286a	; 0x286a <STEPPER_step>
    24a4:	55 20       	and	r5, r5
    24a6:	09 f0       	breq	.+2      	; 0x24aa <STEPPER_stepmode+0xc0>
    24a8:	4a c0       	rjmp	.+148    	; 0x253e <STEPPER_stepmode+0x154>
    24aa:	00 d0       	rcall	.+0      	; 0x24ac <STEPPER_stepmode+0xc2>
    24ac:	0f 92       	push	r0
    24ae:	ed b7       	in	r30, 0x3d	; 61
    24b0:	fe b7       	in	r31, 0x3e	; 62
    24b2:	91 82       	std	Z+1, r9	; 0x01
    24b4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24b6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24b8:	93 83       	std	Z+3, r25	; 0x03
    24ba:	82 83       	std	Z+2, r24	; 0x02
    24bc:	0e 94 c1 14 	call	0x2982	; 0x2982 <STEPPER_wait_and_then>
    24c0:	0f 90       	pop	r0
    24c2:	0f 90       	pop	r0
    24c4:	0f 90       	pop	r0
    24c6:	3b c0       	rjmp	.+118    	; 0x253e <STEPPER_stepmode+0x154>
    24c8:	82 e0       	ldi	r24, 0x02	; 2
    24ca:	61 e0       	ldi	r22, 0x01	; 1
    24cc:	0e 94 fe 13 	call	0x27fc	; 0x27fc <STEPPER_set_mode>
    24d0:	80 e0       	ldi	r24, 0x00	; 0
    24d2:	b7 01       	movw	r22, r14
    24d4:	0e 94 c7 13 	call	0x278e	; 0x278e <STEPPER_set_accel>
    24d8:	81 e0       	ldi	r24, 0x01	; 1
    24da:	b6 01       	movw	r22, r12
    24dc:	0e 94 c7 13 	call	0x278e	; 0x278e <STEPPER_set_accel>
    24e0:	80 e0       	ldi	r24, 0x00	; 0
    24e2:	64 2d       	mov	r22, r4
    24e4:	a3 01       	movw	r20, r6
    24e6:	98 01       	movw	r18, r16
    24e8:	03 2d       	mov	r16, r3
    24ea:	ee 24       	eor	r14, r14
    24ec:	e3 94       	inc	r14
    24ee:	92 e6       	ldi	r25, 0x62	; 98
    24f0:	c9 2e       	mov	r12, r25
    24f2:	94 e0       	ldi	r25, 0x04	; 4
    24f4:	d9 2e       	mov	r13, r25
    24f6:	0e 94 35 14 	call	0x286a	; 0x286a <STEPPER_step>
    24fa:	81 e0       	ldi	r24, 0x01	; 1
    24fc:	68 2d       	mov	r22, r8
    24fe:	4d 89       	ldd	r20, Y+21	; 0x15
    2500:	5e 89       	ldd	r21, Y+22	; 0x16
    2502:	2f 89       	ldd	r18, Y+23	; 0x17
    2504:	38 8d       	ldd	r19, Y+24	; 0x18
    2506:	02 2d       	mov	r16, r2
    2508:	0e 94 35 14 	call	0x286a	; 0x286a <STEPPER_step>
    250c:	55 20       	and	r5, r5
    250e:	b9 f4       	brne	.+46     	; 0x253e <STEPPER_stepmode+0x154>
    2510:	00 d0       	rcall	.+0      	; 0x2512 <STEPPER_stepmode+0x128>
    2512:	00 d0       	rcall	.+0      	; 0x2514 <STEPPER_stepmode+0x12a>
    2514:	0f 92       	push	r0
    2516:	ad b7       	in	r26, 0x3d	; 61
    2518:	be b7       	in	r27, 0x3e	; 62
    251a:	11 96       	adiw	r26, 0x01	; 1
    251c:	ed b7       	in	r30, 0x3d	; 61
    251e:	fe b7       	in	r31, 0x3e	; 62
    2520:	91 82       	std	Z+1, r9	; 0x01
    2522:	fd 01       	movw	r30, r26
    2524:	b2 82       	std	Z+2, r11	; 0x02
    2526:	a1 82       	std	Z+1, r10	; 0x01
    2528:	8c 8d       	ldd	r24, Y+28	; 0x1c
    252a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    252c:	94 83       	std	Z+4, r25	; 0x04
    252e:	83 83       	std	Z+3, r24	; 0x03
    2530:	0e 94 c1 14 	call	0x2982	; 0x2982 <STEPPER_wait_and_then>
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	0f 90       	pop	r0
    253c:	0f 90       	pop	r0
    253e:	cf 91       	pop	r28
    2540:	df 91       	pop	r29
    2542:	1f 91       	pop	r17
    2544:	0f 91       	pop	r16
    2546:	ff 90       	pop	r15
    2548:	ef 90       	pop	r14
    254a:	df 90       	pop	r13
    254c:	cf 90       	pop	r12
    254e:	bf 90       	pop	r11
    2550:	af 90       	pop	r10
    2552:	9f 90       	pop	r9
    2554:	8f 90       	pop	r8
    2556:	7f 90       	pop	r7
    2558:	6f 90       	pop	r6
    255a:	5f 90       	pop	r5
    255c:	4f 90       	pop	r4
    255e:	3f 90       	pop	r3
    2560:	2f 90       	pop	r2
    2562:	08 95       	ret

00002564 <STEPPER_move>:
    2564:	6f 92       	push	r6
    2566:	7f 92       	push	r7
    2568:	8f 92       	push	r8
    256a:	9f 92       	push	r9
    256c:	af 92       	push	r10
    256e:	bf 92       	push	r11
    2570:	cf 92       	push	r12
    2572:	df 92       	push	r13
    2574:	ef 92       	push	r14
    2576:	ff 92       	push	r15
    2578:	0f 93       	push	r16
    257a:	1f 93       	push	r17
    257c:	df 93       	push	r29
    257e:	cf 93       	push	r28
    2580:	cd b7       	in	r28, 0x3d	; 61
    2582:	de b7       	in	r29, 0x3e	; 62
    2584:	94 2e       	mov	r9, r20
    2586:	7c 2d       	mov	r23, r12
    2588:	d5 01       	movw	r26, r10
    258a:	49 89       	ldd	r20, Y+17	; 0x11
    258c:	5a 89       	ldd	r21, Y+18	; 0x12
    258e:	ab 88       	ldd	r10, Y+19	; 0x13
    2590:	bc 88       	ldd	r11, Y+20	; 0x14
    2592:	cd 88       	ldd	r12, Y+21	; 0x15
    2594:	de 88       	ldd	r13, Y+22	; 0x16
    2596:	9f 89       	ldd	r25, Y+23	; 0x17
    2598:	81 30       	cpi	r24, 0x01	; 1
    259a:	09 f4       	brne	.+2      	; 0x259e <STEPPER_move+0x3a>
    259c:	57 c0       	rjmp	.+174    	; 0x264c <STEPPER_move+0xe8>
    259e:	81 30       	cpi	r24, 0x01	; 1
    25a0:	b8 f1       	brcs	.+110    	; 0x2610 <STEPPER_move+0xac>
    25a2:	82 30       	cpi	r24, 0x02	; 2
    25a4:	09 f0       	breq	.+2      	; 0x25a8 <STEPPER_move+0x44>
    25a6:	76 c0       	rjmp	.+236    	; 0x2694 <STEPPER_move+0x130>
    25a8:	61 30       	cpi	r22, 0x01	; 1
    25aa:	91 f0       	breq	.+36     	; 0x25d0 <STEPPER_move+0x6c>
    25ac:	61 30       	cpi	r22, 0x01	; 1
    25ae:	20 f0       	brcs	.+8      	; 0x25b8 <STEPPER_move+0x54>
    25b0:	62 30       	cpi	r22, 0x02	; 2
    25b2:	09 f0       	breq	.+2      	; 0x25b6 <STEPPER_move+0x52>
    25b4:	6f c0       	rjmp	.+222    	; 0x2694 <STEPPER_move+0x130>
    25b6:	15 c0       	rjmp	.+42     	; 0x25e2 <STEPPER_move+0x7e>
    25b8:	80 e0       	ldi	r24, 0x00	; 0
    25ba:	60 e0       	ldi	r22, 0x00	; 0
    25bc:	0e 94 fe 13 	call	0x27fc	; 0x27fc <STEPPER_set_mode>
    25c0:	80 e0       	ldi	r24, 0x00	; 0
    25c2:	b7 01       	movw	r22, r14
    25c4:	0e 94 c7 13 	call	0x278e	; 0x278e <STEPPER_set_accel>
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	69 2d       	mov	r22, r9
    25cc:	a8 01       	movw	r20, r16
    25ce:	1d c0       	rjmp	.+58     	; 0x260a <STEPPER_move+0xa6>
    25d0:	81 e0       	ldi	r24, 0x01	; 1
    25d2:	60 e0       	ldi	r22, 0x00	; 0
    25d4:	0e 94 fe 13 	call	0x27fc	; 0x27fc <STEPPER_set_mode>
    25d8:	81 e0       	ldi	r24, 0x01	; 1
    25da:	b6 01       	movw	r22, r12
    25dc:	0e 94 c7 13 	call	0x278e	; 0x278e <STEPPER_set_accel>
    25e0:	11 c0       	rjmp	.+34     	; 0x2604 <STEPPER_move+0xa0>
    25e2:	82 e0       	ldi	r24, 0x02	; 2
    25e4:	60 e0       	ldi	r22, 0x00	; 0
    25e6:	0e 94 fe 13 	call	0x27fc	; 0x27fc <STEPPER_set_mode>
    25ea:	80 e0       	ldi	r24, 0x00	; 0
    25ec:	b7 01       	movw	r22, r14
    25ee:	0e 94 c7 13 	call	0x278e	; 0x278e <STEPPER_set_accel>
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	b6 01       	movw	r22, r12
    25f6:	0e 94 c7 13 	call	0x278e	; 0x278e <STEPPER_set_accel>
    25fa:	80 e0       	ldi	r24, 0x00	; 0
    25fc:	69 2d       	mov	r22, r9
    25fe:	a8 01       	movw	r20, r16
    2600:	0e 94 b0 13 	call	0x2760	; 0x2760 <STEPPER_run>
    2604:	81 e0       	ldi	r24, 0x01	; 1
    2606:	68 2d       	mov	r22, r8
    2608:	a5 01       	movw	r20, r10
    260a:	0e 94 b0 13 	call	0x2760	; 0x2760 <STEPPER_run>
    260e:	42 c0       	rjmp	.+132    	; 0x2694 <STEPPER_move+0x130>
    2610:	ed b7       	in	r30, 0x3d	; 61
    2612:	fe b7       	in	r31, 0x3e	; 62
    2614:	39 97       	sbiw	r30, 0x09	; 9
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	fe bf       	out	0x3e, r31	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	ed bf       	out	0x3d, r30	; 61
    2620:	6d b6       	in	r6, 0x3d	; 61
    2622:	7e b6       	in	r7, 0x3e	; 62
    2624:	08 94       	sec
    2626:	61 1c       	adc	r6, r1
    2628:	71 1c       	adc	r7, r1
    262a:	52 83       	std	Z+2, r21	; 0x02
    262c:	41 83       	std	Z+1, r20	; 0x01
    262e:	f3 01       	movw	r30, r6
    2630:	b3 82       	std	Z+3, r11	; 0x03
    2632:	a2 82       	std	Z+2, r10	; 0x02
    2634:	d5 82       	std	Z+5, r13	; 0x05
    2636:	c4 82       	std	Z+4, r12	; 0x04
    2638:	96 83       	std	Z+6, r25	; 0x06
    263a:	88 8d       	ldd	r24, Y+24	; 0x18
    263c:	99 8d       	ldd	r25, Y+25	; 0x19
    263e:	90 87       	std	Z+8, r25	; 0x08
    2640:	87 83       	std	Z+7, r24	; 0x07
    2642:	80 e0       	ldi	r24, 0x00	; 0
    2644:	49 2d       	mov	r20, r9
    2646:	c7 2e       	mov	r12, r23
    2648:	5d 01       	movw	r10, r26
    264a:	1a c0       	rjmp	.+52     	; 0x2680 <STEPPER_move+0x11c>
    264c:	ed b7       	in	r30, 0x3d	; 61
    264e:	fe b7       	in	r31, 0x3e	; 62
    2650:	39 97       	sbiw	r30, 0x09	; 9
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	fe bf       	out	0x3e, r31	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	ed bf       	out	0x3d, r30	; 61
    265c:	ad b7       	in	r26, 0x3d	; 61
    265e:	be b7       	in	r27, 0x3e	; 62
    2660:	11 96       	adiw	r26, 0x01	; 1
    2662:	52 83       	std	Z+2, r21	; 0x02
    2664:	41 83       	std	Z+1, r20	; 0x01
    2666:	fd 01       	movw	r30, r26
    2668:	b3 82       	std	Z+3, r11	; 0x03
    266a:	a2 82       	std	Z+2, r10	; 0x02
    266c:	d5 82       	std	Z+5, r13	; 0x05
    266e:	c4 82       	std	Z+4, r12	; 0x04
    2670:	96 83       	std	Z+6, r25	; 0x06
    2672:	10 86       	std	Z+8, r1	; 0x08
    2674:	17 82       	std	Z+7, r1	; 0x07
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	49 2d       	mov	r20, r9
    267a:	c7 2e       	mov	r12, r23
    267c:	aa 24       	eor	r10, r10
    267e:	bb 24       	eor	r11, r11
    2680:	0e 94 f5 11 	call	0x23ea	; 0x23ea <STEPPER_stepmode>
    2684:	8d b7       	in	r24, 0x3d	; 61
    2686:	9e b7       	in	r25, 0x3e	; 62
    2688:	09 96       	adiw	r24, 0x09	; 9
    268a:	0f b6       	in	r0, 0x3f	; 63
    268c:	f8 94       	cli
    268e:	9e bf       	out	0x3e, r25	; 62
    2690:	0f be       	out	0x3f, r0	; 63
    2692:	8d bf       	out	0x3d, r24	; 61
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	1f 91       	pop	r17
    269a:	0f 91       	pop	r16
    269c:	ff 90       	pop	r15
    269e:	ef 90       	pop	r14
    26a0:	df 90       	pop	r13
    26a2:	cf 90       	pop	r12
    26a4:	bf 90       	pop	r11
    26a6:	af 90       	pop	r10
    26a8:	9f 90       	pop	r9
    26aa:	8f 90       	pop	r8
    26ac:	7f 90       	pop	r7
    26ae:	6f 90       	pop	r6
    26b0:	08 95       	ret

000026b2 <STEPPER_open>:
    26b2:	0e 94 a3 1c 	call	0x3946	; 0x3946 <__STEPPER_init>
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	80 93 61 04 	sts	0x0461, r24
    26bc:	eb e2       	ldi	r30, 0x2B	; 43
    26be:	f4 e0       	ldi	r31, 0x04	; 4
    26c0:	11 92       	st	Z+, r1
    26c2:	11 92       	st	Z+, r1
    26c4:	11 82       	std	Z+1, r1	; 0x01
    26c6:	10 82       	st	Z, r1
    26c8:	32 96       	adiw	r30, 0x02	; 2
    26ca:	11 82       	std	Z+1, r1	; 0x01
    26cc:	10 82       	st	Z, r1
    26ce:	32 96       	adiw	r30, 0x02	; 2
    26d0:	11 82       	std	Z+1, r1	; 0x01
    26d2:	10 82       	st	Z, r1
    26d4:	32 96       	adiw	r30, 0x02	; 2
    26d6:	11 82       	std	Z+1, r1	; 0x01
    26d8:	10 82       	st	Z, r1
    26da:	32 96       	adiw	r30, 0x02	; 2
    26dc:	11 82       	std	Z+1, r1	; 0x01
    26de:	10 82       	st	Z, r1
    26e0:	32 96       	adiw	r30, 0x02	; 2
    26e2:	11 82       	std	Z+1, r1	; 0x01
    26e4:	10 82       	st	Z, r1
    26e6:	32 96       	adiw	r30, 0x02	; 2
    26e8:	11 82       	std	Z+1, r1	; 0x01
    26ea:	10 82       	st	Z, r1
    26ec:	32 96       	adiw	r30, 0x02	; 2
    26ee:	11 82       	std	Z+1, r1	; 0x01
    26f0:	10 82       	st	Z, r1
    26f2:	32 96       	adiw	r30, 0x02	; 2
    26f4:	11 82       	std	Z+1, r1	; 0x01
    26f6:	10 82       	st	Z, r1
    26f8:	32 96       	adiw	r30, 0x02	; 2
    26fa:	11 82       	std	Z+1, r1	; 0x01
    26fc:	10 82       	st	Z, r1
    26fe:	32 96       	adiw	r30, 0x02	; 2
    2700:	11 82       	std	Z+1, r1	; 0x01
    2702:	10 82       	st	Z, r1
    2704:	32 96       	adiw	r30, 0x02	; 2
    2706:	11 82       	std	Z+1, r1	; 0x01
    2708:	10 82       	st	Z, r1
    270a:	36 96       	adiw	r30, 0x06	; 6
    270c:	11 92       	st	Z+, r1
    270e:	11 92       	st	Z+, r1
    2710:	11 92       	st	Z+, r1
    2712:	10 82       	st	Z, r1
    2714:	32 96       	adiw	r30, 0x02	; 2
    2716:	11 92       	st	Z+, r1
    2718:	11 92       	st	Z+, r1
    271a:	11 92       	st	Z+, r1
    271c:	11 92       	st	Z+, r1
    271e:	11 92       	st	Z+, r1
    2720:	11 92       	st	Z+, r1
    2722:	11 92       	st	Z+, r1
    2724:	11 82       	std	Z+1, r1	; 0x01
    2726:	10 82       	st	Z, r1
    2728:	32 96       	adiw	r30, 0x02	; 2
    272a:	11 82       	std	Z+1, r1	; 0x01
    272c:	10 82       	st	Z, r1
    272e:	32 96       	adiw	r30, 0x02	; 2
    2730:	11 82       	std	Z+1, r1	; 0x01
    2732:	10 82       	st	Z, r1
    2734:	32 96       	adiw	r30, 0x02	; 2
    2736:	11 82       	std	Z+1, r1	; 0x01
    2738:	10 82       	st	Z, r1
    273a:	76 97       	sbiw	r30, 0x16	; 22
    273c:	11 82       	std	Z+1, r1	; 0x01
    273e:	10 82       	st	Z, r1
    2740:	32 96       	adiw	r30, 0x02	; 2
    2742:	11 82       	std	Z+1, r1	; 0x01
    2744:	10 82       	st	Z, r1
    2746:	10 92 60 04 	sts	0x0460, r1
    274a:	10 92 5f 04 	sts	0x045F, r1
    274e:	10 92 61 04 	sts	0x0461, r1
    2752:	87 e0       	ldi	r24, 0x07	; 7
    2754:	61 e0       	ldi	r22, 0x01	; 1
    2756:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    275a:	87 e0       	ldi	r24, 0x07	; 7
    275c:	91 e0       	ldi	r25, 0x01	; 1
    275e:	08 95       	ret

00002760 <STEPPER_run>:
    2760:	ef 92       	push	r14
    2762:	ff 92       	push	r15
    2764:	0f 93       	push	r16
    2766:	1f 93       	push	r17
    2768:	18 2f       	mov	r17, r24
    276a:	06 2f       	mov	r16, r22
    276c:	7a 01       	movw	r14, r20
    276e:	60 e0       	ldi	r22, 0x00	; 0
    2770:	0e 94 fe 13 	call	0x27fc	; 0x27fc <STEPPER_set_mode>
    2774:	81 2f       	mov	r24, r17
    2776:	60 2f       	mov	r22, r16
    2778:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <STEPPER_set_dir>
    277c:	81 2f       	mov	r24, r17
    277e:	b7 01       	movw	r22, r14
    2780:	0e 94 13 14 	call	0x2826	; 0x2826 <STEPPER_set_speed>
    2784:	1f 91       	pop	r17
    2786:	0f 91       	pop	r16
    2788:	ff 90       	pop	r15
    278a:	ef 90       	pop	r14
    278c:	08 95       	ret

0000278e <STEPPER_set_accel>:
    278e:	48 2f       	mov	r20, r24
    2790:	81 e0       	ldi	r24, 0x01	; 1
    2792:	80 93 61 04 	sts	0x0461, r24
    2796:	cb 01       	movw	r24, r22
    2798:	23 e0       	ldi	r18, 0x03	; 3
    279a:	69 3e       	cpi	r22, 0xE9	; 233
    279c:	72 07       	cpc	r23, r18
    279e:	10 f0       	brcs	.+4      	; 0x27a4 <STEPPER_set_accel+0x16>
    27a0:	88 ee       	ldi	r24, 0xE8	; 232
    27a2:	93 e0       	ldi	r25, 0x03	; 3
    27a4:	41 30       	cpi	r20, 0x01	; 1
    27a6:	71 f0       	breq	.+28     	; 0x27c4 <STEPPER_set_accel+0x36>
    27a8:	41 30       	cpi	r20, 0x01	; 1
    27aa:	18 f0       	brcs	.+6      	; 0x27b2 <STEPPER_set_accel+0x24>
    27ac:	42 30       	cpi	r20, 0x02	; 2
    27ae:	71 f4       	brne	.+28     	; 0x27cc <STEPPER_set_accel+0x3e>
    27b0:	05 c0       	rjmp	.+10     	; 0x27bc <STEPPER_set_accel+0x2e>
    27b2:	90 93 36 04 	sts	0x0436, r25
    27b6:	80 93 35 04 	sts	0x0435, r24
    27ba:	08 c0       	rjmp	.+16     	; 0x27cc <STEPPER_set_accel+0x3e>
    27bc:	90 93 36 04 	sts	0x0436, r25
    27c0:	80 93 35 04 	sts	0x0435, r24
    27c4:	90 93 38 04 	sts	0x0438, r25
    27c8:	80 93 37 04 	sts	0x0437, r24
    27cc:	10 92 61 04 	sts	0x0461, r1
    27d0:	08 95       	ret

000027d2 <STEPPER_set_dir>:
    27d2:	98 2f       	mov	r25, r24
    27d4:	81 e0       	ldi	r24, 0x01	; 1
    27d6:	80 93 61 04 	sts	0x0461, r24
    27da:	91 30       	cpi	r25, 0x01	; 1
    27dc:	51 f0       	breq	.+20     	; 0x27f2 <STEPPER_set_dir+0x20>
    27de:	91 30       	cpi	r25, 0x01	; 1
    27e0:	18 f0       	brcs	.+6      	; 0x27e8 <STEPPER_set_dir+0x16>
    27e2:	92 30       	cpi	r25, 0x02	; 2
    27e4:	41 f4       	brne	.+16     	; 0x27f6 <STEPPER_set_dir+0x24>
    27e6:	03 c0       	rjmp	.+6      	; 0x27ee <STEPPER_set_dir+0x1c>
    27e8:	60 93 4e 04 	sts	0x044E, r22
    27ec:	04 c0       	rjmp	.+8      	; 0x27f6 <STEPPER_set_dir+0x24>
    27ee:	60 93 4e 04 	sts	0x044E, r22
    27f2:	60 93 4f 04 	sts	0x044F, r22
    27f6:	10 92 61 04 	sts	0x0461, r1
    27fa:	08 95       	ret

000027fc <STEPPER_set_mode>:
    27fc:	98 2f       	mov	r25, r24
    27fe:	81 e0       	ldi	r24, 0x01	; 1
    2800:	80 93 61 04 	sts	0x0461, r24
    2804:	91 30       	cpi	r25, 0x01	; 1
    2806:	51 f0       	breq	.+20     	; 0x281c <STEPPER_set_mode+0x20>
    2808:	91 30       	cpi	r25, 0x01	; 1
    280a:	18 f0       	brcs	.+6      	; 0x2812 <STEPPER_set_mode+0x16>
    280c:	92 30       	cpi	r25, 0x02	; 2
    280e:	41 f4       	brne	.+16     	; 0x2820 <STEPPER_set_mode+0x24>
    2810:	03 c0       	rjmp	.+6      	; 0x2818 <STEPPER_set_mode+0x1c>
    2812:	60 93 2b 04 	sts	0x042B, r22
    2816:	04 c0       	rjmp	.+8      	; 0x2820 <STEPPER_set_mode+0x24>
    2818:	60 93 2b 04 	sts	0x042B, r22
    281c:	60 93 2c 04 	sts	0x042C, r22
    2820:	10 92 61 04 	sts	0x0461, r1
    2824:	08 95       	ret

00002826 <STEPPER_set_speed>:
    2826:	48 2f       	mov	r20, r24
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	80 93 61 04 	sts	0x0461, r24
    282e:	cb 01       	movw	r24, r22
    2830:	21 e0       	ldi	r18, 0x01	; 1
    2832:	61 39       	cpi	r22, 0x91	; 145
    2834:	72 07       	cpc	r23, r18
    2836:	10 f0       	brcs	.+4      	; 0x283c <STEPPER_set_speed+0x16>
    2838:	80 e9       	ldi	r24, 0x90	; 144
    283a:	91 e0       	ldi	r25, 0x01	; 1
    283c:	41 30       	cpi	r20, 0x01	; 1
    283e:	71 f0       	breq	.+28     	; 0x285c <STEPPER_set_speed+0x36>
    2840:	41 30       	cpi	r20, 0x01	; 1
    2842:	18 f0       	brcs	.+6      	; 0x284a <STEPPER_set_speed+0x24>
    2844:	42 30       	cpi	r20, 0x02	; 2
    2846:	71 f4       	brne	.+28     	; 0x2864 <STEPPER_set_speed+0x3e>
    2848:	05 c0       	rjmp	.+10     	; 0x2854 <STEPPER_set_speed+0x2e>
    284a:	90 93 2e 04 	sts	0x042E, r25
    284e:	80 93 2d 04 	sts	0x042D, r24
    2852:	08 c0       	rjmp	.+16     	; 0x2864 <STEPPER_set_speed+0x3e>
    2854:	90 93 2e 04 	sts	0x042E, r25
    2858:	80 93 2d 04 	sts	0x042D, r24
    285c:	90 93 30 04 	sts	0x0430, r25
    2860:	80 93 2f 04 	sts	0x042F, r24
    2864:	10 92 61 04 	sts	0x0461, r1
    2868:	08 95       	ret

0000286a <STEPPER_step>:
    286a:	8f 92       	push	r8
    286c:	9f 92       	push	r9
    286e:	af 92       	push	r10
    2870:	bf 92       	push	r11
    2872:	cf 92       	push	r12
    2874:	df 92       	push	r13
    2876:	ef 92       	push	r14
    2878:	ff 92       	push	r15
    287a:	0f 93       	push	r16
    287c:	1f 93       	push	r17
    287e:	cf 93       	push	r28
    2880:	df 93       	push	r29
    2882:	18 2f       	mov	r17, r24
    2884:	f6 2e       	mov	r15, r22
    2886:	5a 01       	movw	r10, r20
    2888:	49 01       	movw	r8, r18
    288a:	e6 01       	movw	r28, r12
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	0e 94 fe 13 	call	0x27fc	; 0x27fc <STEPPER_set_mode>
    2892:	81 2f       	mov	r24, r17
    2894:	b5 01       	movw	r22, r10
    2896:	a4 01       	movw	r20, r8
    2898:	0e 94 dd 1c 	call	0x39ba	; 0x39ba <STEPPER_setup_decels>
    289c:	81 2f       	mov	r24, r17
    289e:	6f 2d       	mov	r22, r15
    28a0:	0e 94 e9 13 	call	0x27d2	; 0x27d2 <STEPPER_set_dir>
    28a4:	81 2f       	mov	r24, r17
    28a6:	60 2f       	mov	r22, r16
    28a8:	0e 94 c8 1c 	call	0x3990	; 0x3990 <STEPPER_set_stop_mode>
    28ac:	81 2f       	mov	r24, r17
    28ae:	b5 01       	movw	r22, r10
    28b0:	0e 94 ad 1c 	call	0x395a	; 0x395a <STEPPER_set_steps>
    28b4:	c1 14       	cp	r12, r1
    28b6:	d1 04       	cpc	r13, r1
    28b8:	99 f0       	breq	.+38     	; 0x28e0 <STEPPER_step+0x76>
    28ba:	11 30       	cpi	r17, 0x01	; 1
    28bc:	49 f0       	breq	.+18     	; 0x28d0 <STEPPER_step+0x66>
    28be:	11 30       	cpi	r17, 0x01	; 1
    28c0:	18 f0       	brcs	.+6      	; 0x28c8 <STEPPER_step+0x5e>
    28c2:	12 30       	cpi	r17, 0x02	; 2
    28c4:	69 f4       	brne	.+26     	; 0x28e0 <STEPPER_step+0x76>
    28c6:	06 c0       	rjmp	.+12     	; 0x28d4 <STEPPER_step+0x6a>
    28c8:	18 82       	st	Y, r1
    28ca:	10 92 5d 04 	sts	0x045D, r1
    28ce:	08 c0       	rjmp	.+16     	; 0x28e0 <STEPPER_step+0x76>
    28d0:	19 82       	std	Y+1, r1	; 0x01
    28d2:	04 c0       	rjmp	.+8      	; 0x28dc <STEPPER_step+0x72>
    28d4:	18 82       	st	Y, r1
    28d6:	19 82       	std	Y+1, r1	; 0x01
    28d8:	10 92 5d 04 	sts	0x045D, r1
    28dc:	10 92 5e 04 	sts	0x045E, r1
    28e0:	d0 93 60 04 	sts	0x0460, r29
    28e4:	c0 93 5f 04 	sts	0x045F, r28
    28e8:	ee 20       	and	r14, r14
    28ea:	b9 f5       	brne	.+110    	; 0x295a <STEPPER_step+0xf0>
    28ec:	8c ec       	ldi	r24, 0xCC	; 204
    28ee:	91 e0       	ldi	r25, 0x01	; 1
    28f0:	90 93 60 04 	sts	0x0460, r25
    28f4:	80 93 5f 04 	sts	0x045F, r24
    28f8:	81 2f       	mov	r24, r17
    28fa:	b4 01       	movw	r22, r8
    28fc:	0e 94 13 14 	call	0x2826	; 0x2826 <STEPPER_set_speed>
    2900:	81 2f       	mov	r24, r17
    2902:	0e 94 8e 1c 	call	0x391c	; 0x391c <STEPPER_go>
    2906:	11 30       	cpi	r17, 0x01	; 1
    2908:	71 f0       	breq	.+28     	; 0x2926 <STEPPER_step+0xbc>
    290a:	11 30       	cpi	r17, 0x01	; 1
    290c:	18 f0       	brcs	.+6      	; 0x2914 <STEPPER_step+0xaa>
    290e:	12 30       	cpi	r17, 0x02	; 2
    2910:	59 f5       	brne	.+86     	; 0x2968 <STEPPER_step+0xfe>
    2912:	12 c0       	rjmp	.+36     	; 0x2938 <STEPPER_step+0xce>
    2914:	10 92 cc 01 	sts	0x01CC, r1
    2918:	10 92 5d 04 	sts	0x045D, r1
    291c:	80 91 cc 01 	lds	r24, 0x01CC
    2920:	88 23       	and	r24, r24
    2922:	e1 f3       	breq	.-8      	; 0x291c <STEPPER_step+0xb2>
    2924:	21 c0       	rjmp	.+66     	; 0x2968 <STEPPER_step+0xfe>
    2926:	10 92 cd 01 	sts	0x01CD, r1
    292a:	10 92 5e 04 	sts	0x045E, r1
    292e:	80 91 cd 01 	lds	r24, 0x01CD
    2932:	88 23       	and	r24, r24
    2934:	e1 f3       	breq	.-8      	; 0x292e <STEPPER_step+0xc4>
    2936:	18 c0       	rjmp	.+48     	; 0x2968 <STEPPER_step+0xfe>
    2938:	10 92 cc 01 	sts	0x01CC, r1
    293c:	10 92 cd 01 	sts	0x01CD, r1
    2940:	10 92 5d 04 	sts	0x045D, r1
    2944:	10 92 5e 04 	sts	0x045E, r1
    2948:	80 91 cc 01 	lds	r24, 0x01CC
    294c:	88 23       	and	r24, r24
    294e:	e1 f3       	breq	.-8      	; 0x2948 <STEPPER_step+0xde>
    2950:	80 91 cd 01 	lds	r24, 0x01CD
    2954:	88 23       	and	r24, r24
    2956:	c1 f3       	breq	.-16     	; 0x2948 <STEPPER_step+0xde>
    2958:	07 c0       	rjmp	.+14     	; 0x2968 <STEPPER_step+0xfe>
    295a:	81 2f       	mov	r24, r17
    295c:	b4 01       	movw	r22, r8
    295e:	0e 94 13 14 	call	0x2826	; 0x2826 <STEPPER_set_speed>
    2962:	81 2f       	mov	r24, r17
    2964:	0e 94 8e 1c 	call	0x391c	; 0x391c <STEPPER_go>
    2968:	df 91       	pop	r29
    296a:	cf 91       	pop	r28
    296c:	1f 91       	pop	r17
    296e:	0f 91       	pop	r16
    2970:	ff 90       	pop	r15
    2972:	ef 90       	pop	r14
    2974:	df 90       	pop	r13
    2976:	cf 90       	pop	r12
    2978:	bf 90       	pop	r11
    297a:	af 90       	pop	r10
    297c:	9f 90       	pop	r9
    297e:	8f 90       	pop	r8
    2980:	08 95       	ret

00002982 <STEPPER_wait_and_then>:
    2982:	cf 92       	push	r12
    2984:	df 92       	push	r13
    2986:	ef 92       	push	r14
    2988:	ff 92       	push	r15
    298a:	0f 93       	push	r16
    298c:	1f 93       	push	r17
    298e:	df 93       	push	r29
    2990:	cf 93       	push	r28
    2992:	cd b7       	in	r28, 0x3d	; 61
    2994:	de b7       	in	r29, 0x3e	; 62
    2996:	8b 85       	ldd	r24, Y+11	; 0x0b
    2998:	81 30       	cpi	r24, 0x01	; 1
    299a:	61 f0       	breq	.+24     	; 0x29b4 <STEPPER_wait_and_then+0x32>
    299c:	81 30       	cpi	r24, 0x01	; 1
    299e:	18 f0       	brcs	.+6      	; 0x29a6 <STEPPER_wait_and_then+0x24>
    29a0:	82 30       	cpi	r24, 0x02	; 2
    29a2:	a1 f5       	brne	.+104    	; 0x2a0c <STEPPER_wait_and_then+0x8a>
    29a4:	11 c0       	rjmp	.+34     	; 0x29c8 <STEPPER_wait_and_then+0x46>
    29a6:	ec 85       	ldd	r30, Y+12	; 0x0c
    29a8:	fd 85       	ldd	r31, Y+13	; 0x0d
    29aa:	80 91 62 04 	lds	r24, 0x0462
    29ae:	88 23       	and	r24, r24
    29b0:	e1 f3       	breq	.-8      	; 0x29aa <STEPPER_wait_and_then+0x28>
    29b2:	06 c0       	rjmp	.+12     	; 0x29c0 <STEPPER_wait_and_then+0x3e>
    29b4:	ec 85       	ldd	r30, Y+12	; 0x0c
    29b6:	fd 85       	ldd	r31, Y+13	; 0x0d
    29b8:	80 91 63 04 	lds	r24, 0x0463
    29bc:	88 23       	and	r24, r24
    29be:	e1 f3       	breq	.-8      	; 0x29b8 <STEPPER_wait_and_then+0x36>
    29c0:	30 97       	sbiw	r30, 0x00	; 0
    29c2:	21 f1       	breq	.+72     	; 0x2a0c <STEPPER_wait_and_then+0x8a>
    29c4:	09 95       	icall
    29c6:	22 c0       	rjmp	.+68     	; 0x2a0c <STEPPER_wait_and_then+0x8a>
    29c8:	cc 84       	ldd	r12, Y+12	; 0x0c
    29ca:	dd 84       	ldd	r13, Y+13	; 0x0d
    29cc:	ee 84       	ldd	r14, Y+14	; 0x0e
    29ce:	ff 84       	ldd	r15, Y+15	; 0x0f
    29d0:	00 e0       	ldi	r16, 0x00	; 0
    29d2:	10 e0       	ldi	r17, 0x00	; 0
    29d4:	00 23       	and	r16, r16
    29d6:	51 f4       	brne	.+20     	; 0x29ec <STEPPER_wait_and_then+0x6a>
    29d8:	80 91 62 04 	lds	r24, 0x0462
    29dc:	88 23       	and	r24, r24
    29de:	31 f0       	breq	.+12     	; 0x29ec <STEPPER_wait_and_then+0x6a>
    29e0:	c1 14       	cp	r12, r1
    29e2:	d1 04       	cpc	r13, r1
    29e4:	11 f0       	breq	.+4      	; 0x29ea <STEPPER_wait_and_then+0x68>
    29e6:	f6 01       	movw	r30, r12
    29e8:	09 95       	icall
    29ea:	01 e0       	ldi	r16, 0x01	; 1
    29ec:	11 23       	and	r17, r17
    29ee:	51 f4       	brne	.+20     	; 0x2a04 <STEPPER_wait_and_then+0x82>
    29f0:	80 91 63 04 	lds	r24, 0x0463
    29f4:	88 23       	and	r24, r24
    29f6:	31 f0       	breq	.+12     	; 0x2a04 <STEPPER_wait_and_then+0x82>
    29f8:	e1 14       	cp	r14, r1
    29fa:	f1 04       	cpc	r15, r1
    29fc:	11 f0       	breq	.+4      	; 0x2a02 <STEPPER_wait_and_then+0x80>
    29fe:	f7 01       	movw	r30, r14
    2a00:	09 95       	icall
    2a02:	11 e0       	ldi	r17, 0x01	; 1
    2a04:	00 23       	and	r16, r16
    2a06:	31 f3       	breq	.-52     	; 0x29d4 <STEPPER_wait_and_then+0x52>
    2a08:	11 23       	and	r17, r17
    2a0a:	21 f3       	breq	.-56     	; 0x29d4 <STEPPER_wait_and_then+0x52>
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	df 90       	pop	r13
    2a1a:	cf 90       	pop	r12
    2a1c:	08 95       	ret

00002a1e <SYS_get_state>:
    2a1e:	e8 2f       	mov	r30, r24
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	e3 31       	cpi	r30, 0x13	; 19
    2a24:	f1 05       	cpc	r31, r1
    2a26:	40 f4       	brcc	.+16     	; 0x2a38 <SYS_get_state+0x1a>
    2a28:	e2 5c       	subi	r30, 0xC2	; 194
    2a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2a2c:	ee 0f       	add	r30, r30
    2a2e:	ff 1f       	adc	r31, r31
    2a30:	05 90       	lpm	r0, Z+
    2a32:	f4 91       	lpm	r31, Z+
    2a34:	e0 2d       	mov	r30, r0
    2a36:	09 94       	ijmp
    2a38:	80 e0       	ldi	r24, 0x00	; 0
    2a3a:	08 95       	ret
    2a3c:	80 91 64 04 	lds	r24, 0x0464
    2a40:	08 95       	ret
    2a42:	80 91 65 04 	lds	r24, 0x0465
    2a46:	08 95       	ret
    2a48:	80 91 66 04 	lds	r24, 0x0466
    2a4c:	08 95       	ret
    2a4e:	80 91 67 04 	lds	r24, 0x0467
    2a52:	08 95       	ret
    2a54:	80 91 68 04 	lds	r24, 0x0468
    2a58:	08 95       	ret
    2a5a:	80 91 6a 04 	lds	r24, 0x046A
    2a5e:	08 95       	ret
    2a60:	80 91 69 04 	lds	r24, 0x0469
    2a64:	08 95       	ret
    2a66:	80 91 6b 04 	lds	r24, 0x046B
    2a6a:	08 95       	ret
    2a6c:	80 91 6c 04 	lds	r24, 0x046C
    2a70:	08 95       	ret
    2a72:	80 91 6d 04 	lds	r24, 0x046D
    2a76:	08 95       	ret
    2a78:	80 91 6e 04 	lds	r24, 0x046E
    2a7c:	08 95       	ret
    2a7e:	80 91 6f 04 	lds	r24, 0x046F
    2a82:	08 95       	ret
    2a84:	80 91 70 04 	lds	r24, 0x0470
    2a88:	08 95       	ret
    2a8a:	80 91 71 04 	lds	r24, 0x0471
    2a8e:	08 95       	ret
    2a90:	80 91 72 04 	lds	r24, 0x0472
    2a94:	08 95       	ret
    2a96:	80 91 73 04 	lds	r24, 0x0473
    2a9a:	08 95       	ret
    2a9c:	80 91 74 04 	lds	r24, 0x0474
    2aa0:	08 95       	ret
    2aa2:	80 91 75 04 	lds	r24, 0x0475
    2aa6:	08 95       	ret
    2aa8:	80 91 76 04 	lds	r24, 0x0476
    2aac:	08 95       	ret

00002aae <SYS_set_state>:
    2aae:	e8 2f       	mov	r30, r24
    2ab0:	f0 e0       	ldi	r31, 0x00	; 0
    2ab2:	e3 31       	cpi	r30, 0x13	; 19
    2ab4:	f1 05       	cpc	r31, r1
    2ab6:	08 f0       	brcs	.+2      	; 0x2aba <SYS_set_state+0xc>
    2ab8:	40 c0       	rjmp	.+128    	; 0x2b3a <SYS_set_state+0x8c>
    2aba:	ef 5a       	subi	r30, 0xAF	; 175
    2abc:	ff 4f       	sbci	r31, 0xFF	; 255
    2abe:	ee 0f       	add	r30, r30
    2ac0:	ff 1f       	adc	r31, r31
    2ac2:	05 90       	lpm	r0, Z+
    2ac4:	f4 91       	lpm	r31, Z+
    2ac6:	e0 2d       	mov	r30, r0
    2ac8:	09 94       	ijmp
    2aca:	60 93 64 04 	sts	0x0464, r22
    2ace:	08 95       	ret
    2ad0:	60 93 65 04 	sts	0x0465, r22
    2ad4:	08 95       	ret
    2ad6:	60 93 66 04 	sts	0x0466, r22
    2ada:	08 95       	ret
    2adc:	60 93 67 04 	sts	0x0467, r22
    2ae0:	08 95       	ret
    2ae2:	60 93 68 04 	sts	0x0468, r22
    2ae6:	08 95       	ret
    2ae8:	60 93 6a 04 	sts	0x046A, r22
    2aec:	08 95       	ret
    2aee:	60 93 69 04 	sts	0x0469, r22
    2af2:	08 95       	ret
    2af4:	60 93 6b 04 	sts	0x046B, r22
    2af8:	08 95       	ret
    2afa:	60 93 6c 04 	sts	0x046C, r22
    2afe:	08 95       	ret
    2b00:	60 93 6d 04 	sts	0x046D, r22
    2b04:	08 95       	ret
    2b06:	60 93 6e 04 	sts	0x046E, r22
    2b0a:	08 95       	ret
    2b0c:	60 93 6f 04 	sts	0x046F, r22
    2b10:	08 95       	ret
    2b12:	60 93 70 04 	sts	0x0470, r22
    2b16:	08 95       	ret
    2b18:	60 93 71 04 	sts	0x0471, r22
    2b1c:	08 95       	ret
    2b1e:	60 93 72 04 	sts	0x0472, r22
    2b22:	08 95       	ret
    2b24:	60 93 73 04 	sts	0x0473, r22
    2b28:	08 95       	ret
    2b2a:	60 93 74 04 	sts	0x0474, r22
    2b2e:	08 95       	ret
    2b30:	60 93 75 04 	sts	0x0475, r22
    2b34:	08 95       	ret
    2b36:	60 93 74 04 	sts	0x0474, r22
    2b3a:	08 95       	ret

00002b3c <ATTINY_get_sensors>:
    2b3c:	0f 93       	push	r16
    2b3e:	1f 93       	push	r17
    2b40:	81 e0       	ldi	r24, 0x01	; 1
    2b42:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    2b46:	81 30       	cpi	r24, 0x01	; 1
    2b48:	11 f0       	breq	.+4      	; 0x2b4e <ATTINY_get_sensors+0x12>
    2b4a:	00 e0       	ldi	r16, 0x00	; 0
    2b4c:	24 c0       	rjmp	.+72     	; 0x2b96 <ATTINY_get_sensors+0x5a>
    2b4e:	87 e0       	ldi	r24, 0x07	; 7
    2b50:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <SPI_set_slave_addr>
    2b54:	82 e0       	ldi	r24, 0x02	; 2
    2b56:	6a e0       	ldi	r22, 0x0A	; 10
    2b58:	0e 94 3d 11 	call	0x227a	; 0x227a <SPI_transmit>
    2b5c:	82 e0       	ldi	r24, 0x02	; 2
    2b5e:	62 eb       	ldi	r22, 0xB2	; 178
    2b60:	0e 94 3d 11 	call	0x227a	; 0x227a <SPI_transmit>
    2b64:	18 ec       	ldi	r17, 0xC8	; 200
    2b66:	81 2f       	mov	r24, r17
    2b68:	8a 95       	dec	r24
    2b6a:	f1 f7       	brne	.-4      	; 0x2b68 <ATTINY_get_sensors+0x2c>
    2b6c:	82 e0       	ldi	r24, 0x02	; 2
    2b6e:	60 e0       	ldi	r22, 0x00	; 0
    2b70:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <SPI_receive>
    2b74:	08 2f       	mov	r16, r24
    2b76:	81 2f       	mov	r24, r17
    2b78:	8a 95       	dec	r24
    2b7a:	f1 f7       	brne	.-4      	; 0x2b78 <ATTINY_get_sensors+0x3c>
    2b7c:	82 e0       	ldi	r24, 0x02	; 2
    2b7e:	60 e0       	ldi	r22, 0x00	; 0
    2b80:	0e 94 79 1b 	call	0x36f2	; 0x36f2 <SPI_receive>
    2b84:	1a 95       	dec	r17
    2b86:	f1 f7       	brne	.-4      	; 0x2b84 <ATTINY_get_sensors+0x48>
    2b88:	87 e0       	ldi	r24, 0x07	; 7
    2b8a:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <SPI_set_slave_addr>
    2b8e:	88 e8       	ldi	r24, 0x88	; 136
    2b90:	93 e1       	ldi	r25, 0x13	; 19
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <ATTINY_get_sensors+0x56>
    2b96:	80 2f       	mov	r24, r16
    2b98:	1f 91       	pop	r17
    2b9a:	0f 91       	pop	r16
    2b9c:	08 95       	ret

00002b9e <ATTINY_get_SW_state>:
    2b9e:	1f 93       	push	r17
    2ba0:	cf 93       	push	r28
    2ba2:	df 93       	push	r29
    2ba4:	18 2f       	mov	r17, r24
    2ba6:	80 91 cf 01 	lds	r24, 0x01CF
    2baa:	88 23       	and	r24, r24
    2bac:	41 f0       	breq	.+16     	; 0x2bbe <ATTINY_get_SW_state+0x20>
    2bae:	80 91 d9 01 	lds	r24, 0x01D9
    2bb2:	88 23       	and	r24, r24
    2bb4:	99 f0       	breq	.+38     	; 0x2bdc <ATTINY_get_SW_state+0x3e>
    2bb6:	10 92 cf 01 	sts	0x01CF, r1
    2bba:	10 92 d9 01 	sts	0x01D9, r1
    2bbe:	0e 94 9e 15 	call	0x2b3c	; 0x2b3c <ATTINY_get_sensors>
    2bc2:	80 93 ce 01 	sts	0x01CE, r24
    2bc6:	83 ed       	ldi	r24, 0xD3	; 211
    2bc8:	91 e0       	ldi	r25, 0x01	; 1
    2bca:	61 e0       	ldi	r22, 0x01	; 1
    2bcc:	40 e0       	ldi	r20, 0x00	; 0
    2bce:	22 e3       	ldi	r18, 0x32	; 50
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <TMRSRVC_new>
    2bd6:	81 e0       	ldi	r24, 0x01	; 1
    2bd8:	80 93 cf 01 	sts	0x01CF, r24
    2bdc:	90 91 ce 01 	lds	r25, 0x01CE
    2be0:	a1 2f       	mov	r26, r17
    2be2:	b0 e0       	ldi	r27, 0x00	; 0
    2be4:	ed 01       	movw	r28, r26
    2be6:	cc 5a       	subi	r28, 0xAC	; 172
    2be8:	de 4f       	sbci	r29, 0xFE	; 254
    2bea:	88 81       	ld	r24, Y
    2bec:	88 23       	and	r24, r24
    2bee:	69 f0       	breq	.+26     	; 0x2c0a <ATTINY_get_SW_state+0x6c>
    2bf0:	fd 01       	movw	r30, r26
    2bf2:	e9 5a       	subi	r30, 0xA9	; 169
    2bf4:	fe 4f       	sbci	r31, 0xFE	; 254
    2bf6:	80 81       	ld	r24, Z
    2bf8:	98 23       	and	r25, r24
    2bfa:	c1 f0       	breq	.+48     	; 0x2c2c <ATTINY_get_SW_state+0x8e>
    2bfc:	fd 01       	movw	r30, r26
    2bfe:	e0 53       	subi	r30, 0x30	; 48
    2c00:	fe 4f       	sbci	r31, 0xFE	; 254
    2c02:	81 e0       	ldi	r24, 0x01	; 1
    2c04:	80 83       	st	Z, r24
    2c06:	18 82       	st	Y, r1
    2c08:	11 c0       	rjmp	.+34     	; 0x2c2c <ATTINY_get_SW_state+0x8e>
    2c0a:	fd 01       	movw	r30, r26
    2c0c:	e0 53       	subi	r30, 0x30	; 48
    2c0e:	fe 4f       	sbci	r31, 0xFE	; 254
    2c10:	80 81       	ld	r24, Z
    2c12:	81 11       	cpse	r24, r1
    2c14:	10 82       	st	Z, r1
    2c16:	fd 01       	movw	r30, r26
    2c18:	e9 5a       	subi	r30, 0xA9	; 169
    2c1a:	fe 4f       	sbci	r31, 0xFE	; 254
    2c1c:	80 81       	ld	r24, Z
    2c1e:	98 23       	and	r25, r24
    2c20:	29 f4       	brne	.+10     	; 0x2c2c <ATTINY_get_SW_state+0x8e>
    2c22:	fd 01       	movw	r30, r26
    2c24:	ec 5a       	subi	r30, 0xAC	; 172
    2c26:	fe 4f       	sbci	r31, 0xFE	; 254
    2c28:	81 e0       	ldi	r24, 0x01	; 1
    2c2a:	80 83       	st	Z, r24
    2c2c:	a0 53       	subi	r26, 0x30	; 48
    2c2e:	be 4f       	sbci	r27, 0xFE	; 254
    2c30:	8c 91       	ld	r24, X
    2c32:	df 91       	pop	r29
    2c34:	cf 91       	pop	r28
    2c36:	1f 91       	pop	r17
    2c38:	08 95       	ret

00002c3a <ATTINY_open>:
    2c3a:	82 e0       	ldi	r24, 0x02	; 2
    2c3c:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    2c40:	88 23       	and	r24, r24
    2c42:	19 f4       	brne	.+6      	; 0x2c4a <ATTINY_open+0x10>
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	82 e0       	ldi	r24, 0x02	; 2
    2c48:	08 95       	ret
    2c4a:	10 92 92 04 	sts	0x0492, r1
    2c4e:	10 92 91 04 	sts	0x0491, r1
    2c52:	10 92 94 04 	sts	0x0494, r1
    2c56:	10 92 93 04 	sts	0x0493, r1
    2c5a:	10 92 96 04 	sts	0x0496, r1
    2c5e:	10 92 95 04 	sts	0x0495, r1
    2c62:	10 92 98 04 	sts	0x0498, r1
    2c66:	10 92 97 04 	sts	0x0497, r1
    2c6a:	10 92 9a 04 	sts	0x049A, r1
    2c6e:	10 92 99 04 	sts	0x0499, r1
    2c72:	80 e9       	ldi	r24, 0x90	; 144
    2c74:	91 e0       	ldi	r25, 0x01	; 1
    2c76:	90 93 7e 04 	sts	0x047E, r25
    2c7a:	80 93 7d 04 	sts	0x047D, r24
    2c7e:	90 93 80 04 	sts	0x0480, r25
    2c82:	80 93 7f 04 	sts	0x047F, r24
    2c86:	90 93 82 04 	sts	0x0482, r25
    2c8a:	80 93 81 04 	sts	0x0481, r24
    2c8e:	90 93 84 04 	sts	0x0484, r25
    2c92:	80 93 83 04 	sts	0x0483, r24
    2c96:	90 93 86 04 	sts	0x0486, r25
    2c9a:	80 93 85 04 	sts	0x0485, r24
    2c9e:	84 e3       	ldi	r24, 0x34	; 52
    2ca0:	98 e0       	ldi	r25, 0x08	; 8
    2ca2:	90 93 88 04 	sts	0x0488, r25
    2ca6:	80 93 87 04 	sts	0x0487, r24
    2caa:	90 93 8a 04 	sts	0x048A, r25
    2cae:	80 93 89 04 	sts	0x0489, r24
    2cb2:	90 93 8c 04 	sts	0x048C, r25
    2cb6:	80 93 8b 04 	sts	0x048B, r24
    2cba:	90 93 8e 04 	sts	0x048E, r25
    2cbe:	80 93 8d 04 	sts	0x048D, r24
    2cc2:	90 93 90 04 	sts	0x0490, r25
    2cc6:	80 93 8f 04 	sts	0x048F, r24
    2cca:	81 e0       	ldi	r24, 0x01	; 1
    2ccc:	61 e0       	ldi	r22, 0x01	; 1
    2cce:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    2cd2:	91 e0       	ldi	r25, 0x01	; 1
    2cd4:	81 e0       	ldi	r24, 0x01	; 1
    2cd6:	08 95       	ret

00002cd8 <TMRSRVC_delay>:
    2cd8:	df 93       	push	r29
    2cda:	cf 93       	push	r28
    2cdc:	cd b7       	in	r28, 0x3d	; 61
    2cde:	de b7       	in	r29, 0x3e	; 62
    2ce0:	29 97       	sbiw	r28, 0x09	; 9
    2ce2:	0f b6       	in	r0, 0x3f	; 63
    2ce4:	f8 94       	cli
    2ce6:	de bf       	out	0x3e, r29	; 62
    2ce8:	0f be       	out	0x3f, r0	; 63
    2cea:	cd bf       	out	0x3d, r28	; 61
    2cec:	9c 01       	movw	r18, r24
    2cee:	ce 01       	movw	r24, r28
    2cf0:	01 96       	adiw	r24, 0x01	; 1
    2cf2:	61 e0       	ldi	r22, 0x01	; 1
    2cf4:	40 e0       	ldi	r20, 0x00	; 0
    2cf6:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <TMRSRVC_new>
    2cfa:	98 2f       	mov	r25, r24
    2cfc:	88 23       	and	r24, r24
    2cfe:	19 f4       	brne	.+6      	; 0x2d06 <TMRSRVC_delay+0x2e>
    2d00:	8f 81       	ldd	r24, Y+7	; 0x07
    2d02:	88 23       	and	r24, r24
    2d04:	e9 f3       	breq	.-6      	; 0x2d00 <TMRSRVC_delay+0x28>
    2d06:	89 2f       	mov	r24, r25
    2d08:	29 96       	adiw	r28, 0x09	; 9
    2d0a:	0f b6       	in	r0, 0x3f	; 63
    2d0c:	f8 94       	cli
    2d0e:	de bf       	out	0x3e, r29	; 62
    2d10:	0f be       	out	0x3f, r0	; 63
    2d12:	cd bf       	out	0x3d, r28	; 61
    2d14:	cf 91       	pop	r28
    2d16:	df 91       	pop	r29
    2d18:	08 95       	ret

00002d1a <TMRSRVC_new>:
    2d1a:	ef 92       	push	r14
    2d1c:	ff 92       	push	r15
    2d1e:	0f 93       	push	r16
    2d20:	1f 93       	push	r17
    2d22:	cf 93       	push	r28
    2d24:	df 93       	push	r29
    2d26:	ec 01       	movw	r28, r24
    2d28:	f6 2e       	mov	r15, r22
    2d2a:	e4 2e       	mov	r14, r20
    2d2c:	89 01       	movw	r16, r18
    2d2e:	88 e0       	ldi	r24, 0x08	; 8
    2d30:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    2d34:	81 30       	cpi	r24, 0x01	; 1
    2d36:	11 f0       	breq	.+4      	; 0x2d3c <TMRSRVC_new+0x22>
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	26 c0       	rjmp	.+76     	; 0x2d88 <TMRSRVC_new+0x6e>
    2d3c:	84 e0       	ldi	r24, 0x04	; 4
    2d3e:	90 e0       	ldi	r25, 0x00	; 0
    2d40:	0e 94 49 2a 	call	0x5492	; 0x5492 <malloc>
    2d44:	fc 01       	movw	r30, r24
    2d46:	00 97       	sbiw	r24, 0x00	; 0
    2d48:	11 f4       	brne	.+4      	; 0x2d4e <TMRSRVC_new+0x34>
    2d4a:	82 e0       	ldi	r24, 0x02	; 2
    2d4c:	1d c0       	rjmp	.+58     	; 0x2d88 <TMRSRVC_new+0x6e>
    2d4e:	f9 82       	std	Y+1, r15	; 0x01
    2d50:	f0 fc       	sbrc	r15, 0
    2d52:	1e 82       	std	Y+6, r1	; 0x06
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	e8 16       	cp	r14, r24
    2d58:	19 f4       	brne	.+6      	; 0x2d60 <TMRSRVC_new+0x46>
    2d5a:	89 81       	ldd	r24, Y+1	; 0x01
    2d5c:	84 60       	ori	r24, 0x04	; 4
    2d5e:	89 83       	std	Y+1, r24	; 0x01
    2d60:	89 81       	ldd	r24, Y+1	; 0x01
    2d62:	88 60       	ori	r24, 0x08	; 8
    2d64:	89 83       	std	Y+1, r24	; 0x01
    2d66:	1b 83       	std	Y+3, r17	; 0x03
    2d68:	0a 83       	std	Y+2, r16	; 0x02
    2d6a:	1d 83       	std	Y+5, r17	; 0x05
    2d6c:	0c 83       	std	Y+4, r16	; 0x04
    2d6e:	d1 83       	std	Z+1, r29	; 0x01
    2d70:	c0 83       	st	Z, r28
    2d72:	13 82       	std	Z+3, r1	; 0x03
    2d74:	12 82       	std	Z+2, r1	; 0x02
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	80 93 3c 02 	sts	0x023C, r24
    2d7c:	cf 01       	movw	r24, r30
    2d7e:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <TMRSRVC_insert>
    2d82:	10 92 3c 02 	sts	0x023C, r1
    2d86:	80 e0       	ldi	r24, 0x00	; 0
    2d88:	df 91       	pop	r29
    2d8a:	cf 91       	pop	r28
    2d8c:	1f 91       	pop	r17
    2d8e:	0f 91       	pop	r16
    2d90:	ff 90       	pop	r15
    2d92:	ef 90       	pop	r14
    2d94:	08 95       	ret

00002d96 <I2C_MSTR_get>:
    2d96:	fc 01       	movw	r30, r24
    2d98:	80 91 9e 04 	lds	r24, 0x049E
    2d9c:	81 30       	cpi	r24, 0x01	; 1
    2d9e:	11 f0       	breq	.+4      	; 0x2da4 <I2C_MSTR_get+0xe>
    2da0:	85 e0       	ldi	r24, 0x05	; 5
    2da2:	08 95       	ret
    2da4:	80 91 9f 04 	lds	r24, 0x049F
    2da8:	81 30       	cpi	r24, 0x01	; 1
    2daa:	11 f0       	breq	.+4      	; 0x2db0 <I2C_MSTR_get+0x1a>
    2dac:	8a e0       	ldi	r24, 0x0A	; 10
    2dae:	08 95       	ret
    2db0:	61 30       	cpi	r22, 0x01	; 1
    2db2:	11 f4       	brne	.+4      	; 0x2db8 <I2C_MSTR_get+0x22>
    2db4:	84 ec       	ldi	r24, 0xC4	; 196
    2db6:	01 c0       	rjmp	.+2      	; 0x2dba <I2C_MSTR_get+0x24>
    2db8:	84 e8       	ldi	r24, 0x84	; 132
    2dba:	80 93 bc 00 	sts	0x00BC, r24
    2dbe:	80 91 bc 00 	lds	r24, 0x00BC
    2dc2:	87 ff       	sbrs	r24, 7
    2dc4:	fc cf       	rjmp	.-8      	; 0x2dbe <I2C_MSTR_get+0x28>
    2dc6:	61 30       	cpi	r22, 0x01	; 1
    2dc8:	31 f4       	brne	.+12     	; 0x2dd6 <I2C_MSTR_get+0x40>
    2dca:	80 91 b9 00 	lds	r24, 0x00B9
    2dce:	88 7f       	andi	r24, 0xF8	; 248
    2dd0:	80 35       	cpi	r24, 0x50	; 80
    2dd2:	59 f4       	brne	.+22     	; 0x2dea <I2C_MSTR_get+0x54>
    2dd4:	05 c0       	rjmp	.+10     	; 0x2de0 <I2C_MSTR_get+0x4a>
    2dd6:	80 91 b9 00 	lds	r24, 0x00B9
    2dda:	88 7f       	andi	r24, 0xF8	; 248
    2ddc:	88 35       	cpi	r24, 0x58	; 88
    2dde:	29 f4       	brne	.+10     	; 0x2dea <I2C_MSTR_get+0x54>
    2de0:	80 91 bb 00 	lds	r24, 0x00BB
    2de4:	80 83       	st	Z, r24
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	08 95       	ret
    2dea:	82 e0       	ldi	r24, 0x02	; 2
    2dec:	08 95       	ret

00002dee <I2C_MSTR_send>:
    2dee:	98 2f       	mov	r25, r24
    2df0:	80 91 9e 04 	lds	r24, 0x049E
    2df4:	81 30       	cpi	r24, 0x01	; 1
    2df6:	11 f0       	breq	.+4      	; 0x2dfc <I2C_MSTR_send+0xe>
    2df8:	85 e0       	ldi	r24, 0x05	; 5
    2dfa:	08 95       	ret
    2dfc:	80 91 9f 04 	lds	r24, 0x049F
    2e00:	81 30       	cpi	r24, 0x01	; 1
    2e02:	11 f0       	breq	.+4      	; 0x2e08 <I2C_MSTR_send+0x1a>
    2e04:	8a e0       	ldi	r24, 0x0A	; 10
    2e06:	08 95       	ret
    2e08:	90 93 bb 00 	sts	0x00BB, r25
    2e0c:	84 e8       	ldi	r24, 0x84	; 132
    2e0e:	80 93 bc 00 	sts	0x00BC, r24
    2e12:	80 91 bc 00 	lds	r24, 0x00BC
    2e16:	87 ff       	sbrs	r24, 7
    2e18:	fc cf       	rjmp	.-8      	; 0x2e12 <I2C_MSTR_send+0x24>
    2e1a:	80 91 b9 00 	lds	r24, 0x00B9
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	88 7f       	andi	r24, 0xF8	; 248
    2e22:	90 70       	andi	r25, 0x00	; 0
    2e24:	88 32       	cpi	r24, 0x28	; 40
    2e26:	91 05       	cpc	r25, r1
    2e28:	21 f0       	breq	.+8      	; 0x2e32 <I2C_MSTR_send+0x44>
    2e2a:	c0 97       	sbiw	r24, 0x30	; 48
    2e2c:	21 f4       	brne	.+8      	; 0x2e36 <I2C_MSTR_send+0x48>
    2e2e:	83 e0       	ldi	r24, 0x03	; 3
    2e30:	08 95       	ret
    2e32:	80 e0       	ldi	r24, 0x00	; 0
    2e34:	08 95       	ret
    2e36:	8c e0       	ldi	r24, 0x0C	; 12
    2e38:	08 95       	ret

00002e3a <I2C_MSTR_start>:
    2e3a:	98 2f       	mov	r25, r24
    2e3c:	20 91 9e 04 	lds	r18, 0x049E
    2e40:	21 30       	cpi	r18, 0x01	; 1
    2e42:	11 f0       	breq	.+4      	; 0x2e48 <I2C_MSTR_start+0xe>
    2e44:	85 e0       	ldi	r24, 0x05	; 5
    2e46:	08 95       	ret
    2e48:	80 91 a0 04 	lds	r24, 0x04A0
    2e4c:	81 30       	cpi	r24, 0x01	; 1
    2e4e:	11 f4       	brne	.+4      	; 0x2e54 <I2C_MSTR_start+0x1a>
    2e50:	89 e0       	ldi	r24, 0x09	; 9
    2e52:	08 95       	ret
    2e54:	20 93 9f 04 	sts	0x049F, r18
    2e58:	84 ea       	ldi	r24, 0xA4	; 164
    2e5a:	80 93 bc 00 	sts	0x00BC, r24
    2e5e:	80 91 bc 00 	lds	r24, 0x00BC
    2e62:	87 ff       	sbrs	r24, 7
    2e64:	fc cf       	rjmp	.-8      	; 0x2e5e <I2C_MSTR_start+0x24>
    2e66:	80 91 b9 00 	lds	r24, 0x00B9
    2e6a:	88 7f       	andi	r24, 0xF8	; 248
    2e6c:	88 30       	cpi	r24, 0x08	; 8
    2e6e:	39 f0       	breq	.+14     	; 0x2e7e <I2C_MSTR_start+0x44>
    2e70:	80 91 b9 00 	lds	r24, 0x00B9
    2e74:	88 7f       	andi	r24, 0xF8	; 248
    2e76:	80 31       	cpi	r24, 0x10	; 16
    2e78:	11 f0       	breq	.+4      	; 0x2e7e <I2C_MSTR_start+0x44>
    2e7a:	81 e0       	ldi	r24, 0x01	; 1
    2e7c:	08 95       	ret
    2e7e:	61 30       	cpi	r22, 0x01	; 1
    2e80:	19 f4       	brne	.+6      	; 0x2e88 <I2C_MSTR_start+0x4e>
    2e82:	99 0f       	add	r25, r25
    2e84:	91 60       	ori	r25, 0x01	; 1
    2e86:	03 c0       	rjmp	.+6      	; 0x2e8e <I2C_MSTR_start+0x54>
    2e88:	66 23       	and	r22, r22
    2e8a:	19 f4       	brne	.+6      	; 0x2e92 <I2C_MSTR_start+0x58>
    2e8c:	99 0f       	add	r25, r25
    2e8e:	90 93 bb 00 	sts	0x00BB, r25
    2e92:	84 e8       	ldi	r24, 0x84	; 132
    2e94:	80 93 bc 00 	sts	0x00BC, r24
    2e98:	80 91 bc 00 	lds	r24, 0x00BC
    2e9c:	87 ff       	sbrs	r24, 7
    2e9e:	fc cf       	rjmp	.-8      	; 0x2e98 <I2C_MSTR_start+0x5e>
    2ea0:	61 30       	cpi	r22, 0x01	; 1
    2ea2:	31 f4       	brne	.+12     	; 0x2eb0 <I2C_MSTR_start+0x76>
    2ea4:	80 91 b9 00 	lds	r24, 0x00B9
    2ea8:	88 7f       	andi	r24, 0xF8	; 248
    2eaa:	80 34       	cpi	r24, 0x40	; 64
    2eac:	41 f4       	brne	.+16     	; 0x2ebe <I2C_MSTR_start+0x84>
    2eae:	09 c0       	rjmp	.+18     	; 0x2ec2 <I2C_MSTR_start+0x88>
    2eb0:	66 23       	and	r22, r22
    2eb2:	39 f4       	brne	.+14     	; 0x2ec2 <I2C_MSTR_start+0x88>
    2eb4:	80 91 b9 00 	lds	r24, 0x00B9
    2eb8:	88 7f       	andi	r24, 0xF8	; 248
    2eba:	88 31       	cpi	r24, 0x18	; 24
    2ebc:	11 f0       	breq	.+4      	; 0x2ec2 <I2C_MSTR_start+0x88>
    2ebe:	82 e0       	ldi	r24, 0x02	; 2
    2ec0:	08 95       	ret
    2ec2:	80 e0       	ldi	r24, 0x00	; 0
    2ec4:	08 95       	ret

00002ec6 <I2C_MSTR_stop>:
    2ec6:	80 91 9f 04 	lds	r24, 0x049F
    2eca:	81 30       	cpi	r24, 0x01	; 1
    2ecc:	11 f0       	breq	.+4      	; 0x2ed2 <I2C_MSTR_stop+0xc>
    2ece:	8a e0       	ldi	r24, 0x0A	; 10
    2ed0:	08 95       	ret
    2ed2:	80 91 a1 04 	lds	r24, 0x04A1
    2ed6:	81 30       	cpi	r24, 0x01	; 1
    2ed8:	29 f4       	brne	.+10     	; 0x2ee4 <I2C_MSTR_stop+0x1e>
    2eda:	85 e9       	ldi	r24, 0x95	; 149
    2edc:	80 93 bc 00 	sts	0x00BC, r24
    2ee0:	80 e0       	ldi	r24, 0x00	; 0
    2ee2:	08 95       	ret
    2ee4:	84 e9       	ldi	r24, 0x94	; 148
    2ee6:	80 93 bc 00 	sts	0x00BC, r24
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	08 95       	ret

00002eee <I2C_open>:
    2eee:	82 e1       	ldi	r24, 0x12	; 18
    2ef0:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    2ef4:	88 23       	and	r24, r24
    2ef6:	b1 f4       	brne	.+44     	; 0x2f24 <I2C_open+0x36>
    2ef8:	10 92 9e 04 	sts	0x049E, r1
    2efc:	10 92 9f 04 	sts	0x049F, r1
    2f00:	10 92 a0 04 	sts	0x04A0, r1
    2f04:	10 92 a1 04 	sts	0x04A1, r1
    2f08:	10 92 a2 04 	sts	0x04A2, r1
    2f0c:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <__I2C_init>
    2f10:	87 e1       	ldi	r24, 0x17	; 23
    2f12:	60 e0       	ldi	r22, 0x00	; 0
    2f14:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <I2C_set_BRG>
    2f18:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <I2C_enable>
    2f1c:	82 e1       	ldi	r24, 0x12	; 18
    2f1e:	61 e0       	ldi	r22, 0x01	; 1
    2f20:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    2f24:	82 e1       	ldi	r24, 0x12	; 18
    2f26:	90 e0       	ldi	r25, 0x00	; 0
    2f28:	08 95       	ret

00002f2a <I2C_set_BRG>:
    2f2a:	63 70       	andi	r22, 0x03	; 3
    2f2c:	60 93 b9 00 	sts	0x00B9, r22
    2f30:	80 93 b8 00 	sts	0x00B8, r24
    2f34:	81 e0       	ldi	r24, 0x01	; 1
    2f36:	80 93 9e 04 	sts	0x049E, r24
    2f3a:	08 95       	ret

00002f3c <__ADC_init>:
    2f3c:	8f e1       	ldi	r24, 0x1F	; 31
    2f3e:	80 93 7c 00 	sts	0x007C, r24
    2f42:	ea e7       	ldi	r30, 0x7A	; 122
    2f44:	f0 e0       	ldi	r31, 0x00	; 0
    2f46:	87 e0       	ldi	r24, 0x07	; 7
    2f48:	80 83       	st	Z, r24
    2f4a:	80 81       	ld	r24, Z
    2f4c:	80 68       	ori	r24, 0x80	; 128
    2f4e:	80 83       	st	Z, r24
    2f50:	08 95       	ret

00002f52 <CBOT_init>:
    2f52:	0e 94 1a 1d 	call	0x3a34	; 0x3a34 <SYS_init>
    2f56:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <ATMEGA_open>
    2f5a:	0e 94 0b 1a 	call	0x3416	; 0x3416 <ISR_open>
    2f5e:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <TMRSRVC_open>
    2f62:	0e 94 40 1b 	call	0x3680	; 0x3680 <SPI_open>
    2f66:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <ATTINY_open>
    2f6a:	78 94       	sei
    2f6c:	08 95       	ret

00002f6e <CBOT_ISR_init>:
    2f6e:	00 00       	nop
    2f70:	08 95       	ret

00002f72 <__vector_16>:
    2f72:	1f 92       	push	r1
    2f74:	0f 92       	push	r0
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	0f 92       	push	r0
    2f7a:	11 24       	eor	r1, r1
    2f7c:	2f 93       	push	r18
    2f7e:	3f 93       	push	r19
    2f80:	4f 93       	push	r20
    2f82:	5f 93       	push	r21
    2f84:	6f 93       	push	r22
    2f86:	7f 93       	push	r23
    2f88:	8f 93       	push	r24
    2f8a:	9f 93       	push	r25
    2f8c:	af 93       	push	r26
    2f8e:	bf 93       	push	r27
    2f90:	ef 93       	push	r30
    2f92:	ff 93       	push	r31
    2f94:	e0 91 fc 01 	lds	r30, 0x01FC
    2f98:	f0 91 fd 01 	lds	r31, 0x01FD
    2f9c:	30 97       	sbiw	r30, 0x00	; 0
    2f9e:	09 f0       	breq	.+2      	; 0x2fa2 <__vector_16+0x30>
    2fa0:	09 95       	icall
    2fa2:	ff 91       	pop	r31
    2fa4:	ef 91       	pop	r30
    2fa6:	bf 91       	pop	r27
    2fa8:	af 91       	pop	r26
    2faa:	9f 91       	pop	r25
    2fac:	8f 91       	pop	r24
    2fae:	7f 91       	pop	r23
    2fb0:	6f 91       	pop	r22
    2fb2:	5f 91       	pop	r21
    2fb4:	4f 91       	pop	r20
    2fb6:	3f 91       	pop	r19
    2fb8:	2f 91       	pop	r18
    2fba:	0f 90       	pop	r0
    2fbc:	0f be       	out	0x3f, r0	; 63
    2fbe:	0f 90       	pop	r0
    2fc0:	1f 90       	pop	r1
    2fc2:	18 95       	reti

00002fc4 <__vector_17>:
    2fc4:	1f 92       	push	r1
    2fc6:	0f 92       	push	r0
    2fc8:	0f b6       	in	r0, 0x3f	; 63
    2fca:	0f 92       	push	r0
    2fcc:	11 24       	eor	r1, r1
    2fce:	2f 93       	push	r18
    2fd0:	3f 93       	push	r19
    2fd2:	4f 93       	push	r20
    2fd4:	5f 93       	push	r21
    2fd6:	6f 93       	push	r22
    2fd8:	7f 93       	push	r23
    2fda:	8f 93       	push	r24
    2fdc:	9f 93       	push	r25
    2fde:	af 93       	push	r26
    2fe0:	bf 93       	push	r27
    2fe2:	ef 93       	push	r30
    2fe4:	ff 93       	push	r31
    2fe6:	e0 91 fe 01 	lds	r30, 0x01FE
    2fea:	f0 91 ff 01 	lds	r31, 0x01FF
    2fee:	30 97       	sbiw	r30, 0x00	; 0
    2ff0:	09 f0       	breq	.+2      	; 0x2ff4 <__vector_17+0x30>
    2ff2:	09 95       	icall
    2ff4:	ff 91       	pop	r31
    2ff6:	ef 91       	pop	r30
    2ff8:	bf 91       	pop	r27
    2ffa:	af 91       	pop	r26
    2ffc:	9f 91       	pop	r25
    2ffe:	8f 91       	pop	r24
    3000:	7f 91       	pop	r23
    3002:	6f 91       	pop	r22
    3004:	5f 91       	pop	r21
    3006:	4f 91       	pop	r20
    3008:	3f 91       	pop	r19
    300a:	2f 91       	pop	r18
    300c:	0f 90       	pop	r0
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	0f 90       	pop	r0
    3012:	1f 90       	pop	r1
    3014:	18 95       	reti

00003016 <__vector_18>:
    3016:	1f 92       	push	r1
    3018:	0f 92       	push	r0
    301a:	0f b6       	in	r0, 0x3f	; 63
    301c:	0f 92       	push	r0
    301e:	11 24       	eor	r1, r1
    3020:	2f 93       	push	r18
    3022:	3f 93       	push	r19
    3024:	4f 93       	push	r20
    3026:	5f 93       	push	r21
    3028:	6f 93       	push	r22
    302a:	7f 93       	push	r23
    302c:	8f 93       	push	r24
    302e:	9f 93       	push	r25
    3030:	af 93       	push	r26
    3032:	bf 93       	push	r27
    3034:	ef 93       	push	r30
    3036:	ff 93       	push	r31
    3038:	e0 91 00 02 	lds	r30, 0x0200
    303c:	f0 91 01 02 	lds	r31, 0x0201
    3040:	30 97       	sbiw	r30, 0x00	; 0
    3042:	09 f0       	breq	.+2      	; 0x3046 <__vector_18+0x30>
    3044:	09 95       	icall
    3046:	ff 91       	pop	r31
    3048:	ef 91       	pop	r30
    304a:	bf 91       	pop	r27
    304c:	af 91       	pop	r26
    304e:	9f 91       	pop	r25
    3050:	8f 91       	pop	r24
    3052:	7f 91       	pop	r23
    3054:	6f 91       	pop	r22
    3056:	5f 91       	pop	r21
    3058:	4f 91       	pop	r20
    305a:	3f 91       	pop	r19
    305c:	2f 91       	pop	r18
    305e:	0f 90       	pop	r0
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	0f 90       	pop	r0
    3064:	1f 90       	pop	r1
    3066:	18 95       	reti

00003068 <__vector_9>:
    3068:	1f 92       	push	r1
    306a:	0f 92       	push	r0
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	0f 92       	push	r0
    3070:	11 24       	eor	r1, r1
    3072:	2f 93       	push	r18
    3074:	3f 93       	push	r19
    3076:	4f 93       	push	r20
    3078:	5f 93       	push	r21
    307a:	6f 93       	push	r22
    307c:	7f 93       	push	r23
    307e:	8f 93       	push	r24
    3080:	9f 93       	push	r25
    3082:	af 93       	push	r26
    3084:	bf 93       	push	r27
    3086:	ef 93       	push	r30
    3088:	ff 93       	push	r31
    308a:	e0 91 ee 01 	lds	r30, 0x01EE
    308e:	f0 91 ef 01 	lds	r31, 0x01EF
    3092:	30 97       	sbiw	r30, 0x00	; 0
    3094:	09 f0       	breq	.+2      	; 0x3098 <__vector_9+0x30>
    3096:	09 95       	icall
    3098:	ff 91       	pop	r31
    309a:	ef 91       	pop	r30
    309c:	bf 91       	pop	r27
    309e:	af 91       	pop	r26
    30a0:	9f 91       	pop	r25
    30a2:	8f 91       	pop	r24
    30a4:	7f 91       	pop	r23
    30a6:	6f 91       	pop	r22
    30a8:	5f 91       	pop	r21
    30aa:	4f 91       	pop	r20
    30ac:	3f 91       	pop	r19
    30ae:	2f 91       	pop	r18
    30b0:	0f 90       	pop	r0
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	0f 90       	pop	r0
    30b6:	1f 90       	pop	r1
    30b8:	18 95       	reti

000030ba <__vector_10>:
    30ba:	1f 92       	push	r1
    30bc:	0f 92       	push	r0
    30be:	0f b6       	in	r0, 0x3f	; 63
    30c0:	0f 92       	push	r0
    30c2:	11 24       	eor	r1, r1
    30c4:	2f 93       	push	r18
    30c6:	3f 93       	push	r19
    30c8:	4f 93       	push	r20
    30ca:	5f 93       	push	r21
    30cc:	6f 93       	push	r22
    30ce:	7f 93       	push	r23
    30d0:	8f 93       	push	r24
    30d2:	9f 93       	push	r25
    30d4:	af 93       	push	r26
    30d6:	bf 93       	push	r27
    30d8:	ef 93       	push	r30
    30da:	ff 93       	push	r31
    30dc:	e0 91 f0 01 	lds	r30, 0x01F0
    30e0:	f0 91 f1 01 	lds	r31, 0x01F1
    30e4:	30 97       	sbiw	r30, 0x00	; 0
    30e6:	09 f0       	breq	.+2      	; 0x30ea <__vector_10+0x30>
    30e8:	09 95       	icall
    30ea:	ff 91       	pop	r31
    30ec:	ef 91       	pop	r30
    30ee:	bf 91       	pop	r27
    30f0:	af 91       	pop	r26
    30f2:	9f 91       	pop	r25
    30f4:	8f 91       	pop	r24
    30f6:	7f 91       	pop	r23
    30f8:	6f 91       	pop	r22
    30fa:	5f 91       	pop	r21
    30fc:	4f 91       	pop	r20
    30fe:	3f 91       	pop	r19
    3100:	2f 91       	pop	r18
    3102:	0f 90       	pop	r0
    3104:	0f be       	out	0x3f, r0	; 63
    3106:	0f 90       	pop	r0
    3108:	1f 90       	pop	r1
    310a:	18 95       	reti

0000310c <__vector_11>:
    310c:	1f 92       	push	r1
    310e:	0f 92       	push	r0
    3110:	0f b6       	in	r0, 0x3f	; 63
    3112:	0f 92       	push	r0
    3114:	11 24       	eor	r1, r1
    3116:	2f 93       	push	r18
    3118:	3f 93       	push	r19
    311a:	4f 93       	push	r20
    311c:	5f 93       	push	r21
    311e:	6f 93       	push	r22
    3120:	7f 93       	push	r23
    3122:	8f 93       	push	r24
    3124:	9f 93       	push	r25
    3126:	af 93       	push	r26
    3128:	bf 93       	push	r27
    312a:	ef 93       	push	r30
    312c:	ff 93       	push	r31
    312e:	e0 91 f2 01 	lds	r30, 0x01F2
    3132:	f0 91 f3 01 	lds	r31, 0x01F3
    3136:	30 97       	sbiw	r30, 0x00	; 0
    3138:	09 f0       	breq	.+2      	; 0x313c <__vector_11+0x30>
    313a:	09 95       	icall
    313c:	ff 91       	pop	r31
    313e:	ef 91       	pop	r30
    3140:	bf 91       	pop	r27
    3142:	af 91       	pop	r26
    3144:	9f 91       	pop	r25
    3146:	8f 91       	pop	r24
    3148:	7f 91       	pop	r23
    314a:	6f 91       	pop	r22
    314c:	5f 91       	pop	r21
    314e:	4f 91       	pop	r20
    3150:	3f 91       	pop	r19
    3152:	2f 91       	pop	r18
    3154:	0f 90       	pop	r0
    3156:	0f be       	out	0x3f, r0	; 63
    3158:	0f 90       	pop	r0
    315a:	1f 90       	pop	r1
    315c:	18 95       	reti

0000315e <__vector_13>:
    315e:	1f 92       	push	r1
    3160:	0f 92       	push	r0
    3162:	0f b6       	in	r0, 0x3f	; 63
    3164:	0f 92       	push	r0
    3166:	11 24       	eor	r1, r1
    3168:	2f 93       	push	r18
    316a:	3f 93       	push	r19
    316c:	4f 93       	push	r20
    316e:	5f 93       	push	r21
    3170:	6f 93       	push	r22
    3172:	7f 93       	push	r23
    3174:	8f 93       	push	r24
    3176:	9f 93       	push	r25
    3178:	af 93       	push	r26
    317a:	bf 93       	push	r27
    317c:	ef 93       	push	r30
    317e:	ff 93       	push	r31
    3180:	e0 91 f6 01 	lds	r30, 0x01F6
    3184:	f0 91 f7 01 	lds	r31, 0x01F7
    3188:	30 97       	sbiw	r30, 0x00	; 0
    318a:	09 f0       	breq	.+2      	; 0x318e <__vector_13+0x30>
    318c:	09 95       	icall
    318e:	ff 91       	pop	r31
    3190:	ef 91       	pop	r30
    3192:	bf 91       	pop	r27
    3194:	af 91       	pop	r26
    3196:	9f 91       	pop	r25
    3198:	8f 91       	pop	r24
    319a:	7f 91       	pop	r23
    319c:	6f 91       	pop	r22
    319e:	5f 91       	pop	r21
    31a0:	4f 91       	pop	r20
    31a2:	3f 91       	pop	r19
    31a4:	2f 91       	pop	r18
    31a6:	0f 90       	pop	r0
    31a8:	0f be       	out	0x3f, r0	; 63
    31aa:	0f 90       	pop	r0
    31ac:	1f 90       	pop	r1
    31ae:	18 95       	reti

000031b0 <__vector_14>:
    31b0:	1f 92       	push	r1
    31b2:	0f 92       	push	r0
    31b4:	0f b6       	in	r0, 0x3f	; 63
    31b6:	0f 92       	push	r0
    31b8:	11 24       	eor	r1, r1
    31ba:	2f 93       	push	r18
    31bc:	3f 93       	push	r19
    31be:	4f 93       	push	r20
    31c0:	5f 93       	push	r21
    31c2:	6f 93       	push	r22
    31c4:	7f 93       	push	r23
    31c6:	8f 93       	push	r24
    31c8:	9f 93       	push	r25
    31ca:	af 93       	push	r26
    31cc:	bf 93       	push	r27
    31ce:	ef 93       	push	r30
    31d0:	ff 93       	push	r31
    31d2:	e0 91 f8 01 	lds	r30, 0x01F8
    31d6:	f0 91 f9 01 	lds	r31, 0x01F9
    31da:	30 97       	sbiw	r30, 0x00	; 0
    31dc:	09 f0       	breq	.+2      	; 0x31e0 <__vector_14+0x30>
    31de:	09 95       	icall
    31e0:	ff 91       	pop	r31
    31e2:	ef 91       	pop	r30
    31e4:	bf 91       	pop	r27
    31e6:	af 91       	pop	r26
    31e8:	9f 91       	pop	r25
    31ea:	8f 91       	pop	r24
    31ec:	7f 91       	pop	r23
    31ee:	6f 91       	pop	r22
    31f0:	5f 91       	pop	r21
    31f2:	4f 91       	pop	r20
    31f4:	3f 91       	pop	r19
    31f6:	2f 91       	pop	r18
    31f8:	0f 90       	pop	r0
    31fa:	0f be       	out	0x3f, r0	; 63
    31fc:	0f 90       	pop	r0
    31fe:	1f 90       	pop	r1
    3200:	18 95       	reti

00003202 <__vector_12>:
    3202:	1f 92       	push	r1
    3204:	0f 92       	push	r0
    3206:	0f b6       	in	r0, 0x3f	; 63
    3208:	0f 92       	push	r0
    320a:	11 24       	eor	r1, r1
    320c:	2f 93       	push	r18
    320e:	3f 93       	push	r19
    3210:	4f 93       	push	r20
    3212:	5f 93       	push	r21
    3214:	6f 93       	push	r22
    3216:	7f 93       	push	r23
    3218:	8f 93       	push	r24
    321a:	9f 93       	push	r25
    321c:	af 93       	push	r26
    321e:	bf 93       	push	r27
    3220:	ef 93       	push	r30
    3222:	ff 93       	push	r31
    3224:	e0 91 f4 01 	lds	r30, 0x01F4
    3228:	f0 91 f5 01 	lds	r31, 0x01F5
    322c:	30 97       	sbiw	r30, 0x00	; 0
    322e:	09 f0       	breq	.+2      	; 0x3232 <__vector_12+0x30>
    3230:	09 95       	icall
    3232:	ff 91       	pop	r31
    3234:	ef 91       	pop	r30
    3236:	bf 91       	pop	r27
    3238:	af 91       	pop	r26
    323a:	9f 91       	pop	r25
    323c:	8f 91       	pop	r24
    323e:	7f 91       	pop	r23
    3240:	6f 91       	pop	r22
    3242:	5f 91       	pop	r21
    3244:	4f 91       	pop	r20
    3246:	3f 91       	pop	r19
    3248:	2f 91       	pop	r18
    324a:	0f 90       	pop	r0
    324c:	0f be       	out	0x3f, r0	; 63
    324e:	0f 90       	pop	r0
    3250:	1f 90       	pop	r1
    3252:	18 95       	reti

00003254 <__vector_15>:
    3254:	1f 92       	push	r1
    3256:	0f 92       	push	r0
    3258:	0f b6       	in	r0, 0x3f	; 63
    325a:	0f 92       	push	r0
    325c:	11 24       	eor	r1, r1
    325e:	2f 93       	push	r18
    3260:	3f 93       	push	r19
    3262:	4f 93       	push	r20
    3264:	5f 93       	push	r21
    3266:	6f 93       	push	r22
    3268:	7f 93       	push	r23
    326a:	8f 93       	push	r24
    326c:	9f 93       	push	r25
    326e:	af 93       	push	r26
    3270:	bf 93       	push	r27
    3272:	ef 93       	push	r30
    3274:	ff 93       	push	r31
    3276:	e0 91 fa 01 	lds	r30, 0x01FA
    327a:	f0 91 fb 01 	lds	r31, 0x01FB
    327e:	30 97       	sbiw	r30, 0x00	; 0
    3280:	09 f0       	breq	.+2      	; 0x3284 <__vector_15+0x30>
    3282:	09 95       	icall
    3284:	ff 91       	pop	r31
    3286:	ef 91       	pop	r30
    3288:	bf 91       	pop	r27
    328a:	af 91       	pop	r26
    328c:	9f 91       	pop	r25
    328e:	8f 91       	pop	r24
    3290:	7f 91       	pop	r23
    3292:	6f 91       	pop	r22
    3294:	5f 91       	pop	r21
    3296:	4f 91       	pop	r20
    3298:	3f 91       	pop	r19
    329a:	2f 91       	pop	r18
    329c:	0f 90       	pop	r0
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	0f 90       	pop	r0
    32a2:	1f 90       	pop	r1
    32a4:	18 95       	reti

000032a6 <__vector_4>:
    32a6:	1f 92       	push	r1
    32a8:	0f 92       	push	r0
    32aa:	0f b6       	in	r0, 0x3f	; 63
    32ac:	0f 92       	push	r0
    32ae:	11 24       	eor	r1, r1
    32b0:	2f 93       	push	r18
    32b2:	3f 93       	push	r19
    32b4:	4f 93       	push	r20
    32b6:	5f 93       	push	r21
    32b8:	6f 93       	push	r22
    32ba:	7f 93       	push	r23
    32bc:	8f 93       	push	r24
    32be:	9f 93       	push	r25
    32c0:	af 93       	push	r26
    32c2:	bf 93       	push	r27
    32c4:	ef 93       	push	r30
    32c6:	ff 93       	push	r31
    32c8:	e0 91 e4 01 	lds	r30, 0x01E4
    32cc:	f0 91 e5 01 	lds	r31, 0x01E5
    32d0:	30 97       	sbiw	r30, 0x00	; 0
    32d2:	09 f0       	breq	.+2      	; 0x32d6 <__vector_4+0x30>
    32d4:	09 95       	icall
    32d6:	ff 91       	pop	r31
    32d8:	ef 91       	pop	r30
    32da:	bf 91       	pop	r27
    32dc:	af 91       	pop	r26
    32de:	9f 91       	pop	r25
    32e0:	8f 91       	pop	r24
    32e2:	7f 91       	pop	r23
    32e4:	6f 91       	pop	r22
    32e6:	5f 91       	pop	r21
    32e8:	4f 91       	pop	r20
    32ea:	3f 91       	pop	r19
    32ec:	2f 91       	pop	r18
    32ee:	0f 90       	pop	r0
    32f0:	0f be       	out	0x3f, r0	; 63
    32f2:	0f 90       	pop	r0
    32f4:	1f 90       	pop	r1
    32f6:	18 95       	reti

000032f8 <__vector_5>:
    32f8:	1f 92       	push	r1
    32fa:	0f 92       	push	r0
    32fc:	0f b6       	in	r0, 0x3f	; 63
    32fe:	0f 92       	push	r0
    3300:	11 24       	eor	r1, r1
    3302:	2f 93       	push	r18
    3304:	3f 93       	push	r19
    3306:	4f 93       	push	r20
    3308:	5f 93       	push	r21
    330a:	6f 93       	push	r22
    330c:	7f 93       	push	r23
    330e:	8f 93       	push	r24
    3310:	9f 93       	push	r25
    3312:	af 93       	push	r26
    3314:	bf 93       	push	r27
    3316:	ef 93       	push	r30
    3318:	ff 93       	push	r31
    331a:	e0 91 e6 01 	lds	r30, 0x01E6
    331e:	f0 91 e7 01 	lds	r31, 0x01E7
    3322:	30 97       	sbiw	r30, 0x00	; 0
    3324:	09 f0       	breq	.+2      	; 0x3328 <__vector_5+0x30>
    3326:	09 95       	icall
    3328:	ff 91       	pop	r31
    332a:	ef 91       	pop	r30
    332c:	bf 91       	pop	r27
    332e:	af 91       	pop	r26
    3330:	9f 91       	pop	r25
    3332:	8f 91       	pop	r24
    3334:	7f 91       	pop	r23
    3336:	6f 91       	pop	r22
    3338:	5f 91       	pop	r21
    333a:	4f 91       	pop	r20
    333c:	3f 91       	pop	r19
    333e:	2f 91       	pop	r18
    3340:	0f 90       	pop	r0
    3342:	0f be       	out	0x3f, r0	; 63
    3344:	0f 90       	pop	r0
    3346:	1f 90       	pop	r1
    3348:	18 95       	reti

0000334a <__vector_6>:
    334a:	1f 92       	push	r1
    334c:	0f 92       	push	r0
    334e:	0f b6       	in	r0, 0x3f	; 63
    3350:	0f 92       	push	r0
    3352:	11 24       	eor	r1, r1
    3354:	2f 93       	push	r18
    3356:	3f 93       	push	r19
    3358:	4f 93       	push	r20
    335a:	5f 93       	push	r21
    335c:	6f 93       	push	r22
    335e:	7f 93       	push	r23
    3360:	8f 93       	push	r24
    3362:	9f 93       	push	r25
    3364:	af 93       	push	r26
    3366:	bf 93       	push	r27
    3368:	ef 93       	push	r30
    336a:	ff 93       	push	r31
    336c:	e0 91 e8 01 	lds	r30, 0x01E8
    3370:	f0 91 e9 01 	lds	r31, 0x01E9
    3374:	30 97       	sbiw	r30, 0x00	; 0
    3376:	09 f0       	breq	.+2      	; 0x337a <__vector_6+0x30>
    3378:	09 95       	icall
    337a:	ff 91       	pop	r31
    337c:	ef 91       	pop	r30
    337e:	bf 91       	pop	r27
    3380:	af 91       	pop	r26
    3382:	9f 91       	pop	r25
    3384:	8f 91       	pop	r24
    3386:	7f 91       	pop	r23
    3388:	6f 91       	pop	r22
    338a:	5f 91       	pop	r21
    338c:	4f 91       	pop	r20
    338e:	3f 91       	pop	r19
    3390:	2f 91       	pop	r18
    3392:	0f 90       	pop	r0
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	0f 90       	pop	r0
    3398:	1f 90       	pop	r1
    339a:	18 95       	reti

0000339c <__vector_7>:
    339c:	1f 92       	push	r1
    339e:	0f 92       	push	r0
    33a0:	0f b6       	in	r0, 0x3f	; 63
    33a2:	0f 92       	push	r0
    33a4:	11 24       	eor	r1, r1
    33a6:	2f 93       	push	r18
    33a8:	3f 93       	push	r19
    33aa:	4f 93       	push	r20
    33ac:	5f 93       	push	r21
    33ae:	6f 93       	push	r22
    33b0:	7f 93       	push	r23
    33b2:	8f 93       	push	r24
    33b4:	9f 93       	push	r25
    33b6:	af 93       	push	r26
    33b8:	bf 93       	push	r27
    33ba:	ef 93       	push	r30
    33bc:	ff 93       	push	r31
    33be:	e0 91 ea 01 	lds	r30, 0x01EA
    33c2:	f0 91 eb 01 	lds	r31, 0x01EB
    33c6:	30 97       	sbiw	r30, 0x00	; 0
    33c8:	09 f0       	breq	.+2      	; 0x33cc <__vector_7+0x30>
    33ca:	09 95       	icall
    33cc:	ff 91       	pop	r31
    33ce:	ef 91       	pop	r30
    33d0:	bf 91       	pop	r27
    33d2:	af 91       	pop	r26
    33d4:	9f 91       	pop	r25
    33d6:	8f 91       	pop	r24
    33d8:	7f 91       	pop	r23
    33da:	6f 91       	pop	r22
    33dc:	5f 91       	pop	r21
    33de:	4f 91       	pop	r20
    33e0:	3f 91       	pop	r19
    33e2:	2f 91       	pop	r18
    33e4:	0f 90       	pop	r0
    33e6:	0f be       	out	0x3f, r0	; 63
    33e8:	0f 90       	pop	r0
    33ea:	1f 90       	pop	r1
    33ec:	18 95       	reti

000033ee <ISR_attach>:
    33ee:	e8 2f       	mov	r30, r24
    33f0:	80 32       	cpi	r24, 0x20	; 32
    33f2:	68 f4       	brcc	.+26     	; 0x340e <ISR_attach+0x20>
    33f4:	80 51       	subi	r24, 0x10	; 16
    33f6:	83 30       	cpi	r24, 0x03	; 3
    33f8:	50 f0       	brcs	.+20     	; 0x340e <ISR_attach+0x20>
    33fa:	f0 e0       	ldi	r31, 0x00	; 0
    33fc:	ee 0f       	add	r30, r30
    33fe:	ff 1f       	adc	r31, r31
    3400:	e4 52       	subi	r30, 0x24	; 36
    3402:	fe 4f       	sbci	r31, 0xFE	; 254
    3404:	20 81       	ld	r18, Z
    3406:	31 81       	ldd	r19, Z+1	; 0x01
    3408:	71 83       	std	Z+1, r23	; 0x01
    340a:	60 83       	st	Z, r22
    340c:	02 c0       	rjmp	.+4      	; 0x3412 <ISR_attach+0x24>
    340e:	20 e0       	ldi	r18, 0x00	; 0
    3410:	30 e0       	ldi	r19, 0x00	; 0
    3412:	c9 01       	movw	r24, r18
    3414:	08 95       	ret

00003416 <ISR_open>:
    3416:	80 e1       	ldi	r24, 0x10	; 16
    3418:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    341c:	88 23       	and	r24, r24
    341e:	61 f4       	brne	.+24     	; 0x3438 <ISR_open+0x22>
    3420:	ec ed       	ldi	r30, 0xDC	; 220
    3422:	f1 e0       	ldi	r31, 0x01	; 1
    3424:	11 92       	st	Z+, r1
    3426:	11 92       	st	Z+, r1
    3428:	82 e0       	ldi	r24, 0x02	; 2
    342a:	ec 31       	cpi	r30, 0x1C	; 28
    342c:	f8 07       	cpc	r31, r24
    342e:	d1 f7       	brne	.-12     	; 0x3424 <ISR_open+0xe>
    3430:	80 e1       	ldi	r24, 0x10	; 16
    3432:	61 e0       	ldi	r22, 0x01	; 1
    3434:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    3438:	80 e1       	ldi	r24, 0x10	; 16
    343a:	91 e0       	ldi	r25, 0x01	; 1
    343c:	08 95       	ret

0000343e <__LCD_init>:
    343e:	23 9a       	sbi	0x04, 3	; 4
    3440:	08 95       	ret

00003442 <__LCD_putchar>:
    3442:	ff 92       	push	r15
    3444:	0f 93       	push	r16
    3446:	1f 93       	push	r17
    3448:	cf 93       	push	r28
    344a:	df 93       	push	r29
    344c:	f8 2e       	mov	r15, r24
    344e:	8a e0       	ldi	r24, 0x0A	; 10
    3450:	f8 16       	cp	r15, r24
    3452:	b1 f0       	breq	.+44     	; 0x3480 <__LCD_putchar+0x3e>
    3454:	8f 15       	cp	r24, r15
    3456:	48 f0       	brcs	.+18     	; 0x346a <__LCD_putchar+0x28>
    3458:	e8 e0       	ldi	r30, 0x08	; 8
    345a:	fe 16       	cp	r15, r30
    345c:	b9 f1       	breq	.+110    	; 0x34cc <__LCD_putchar+0x8a>
    345e:	ef 15       	cp	r30, r15
    3460:	38 f1       	brcs	.+78     	; 0x34b0 <__LCD_putchar+0x6e>
    3462:	f7 e0       	ldi	r31, 0x07	; 7
    3464:	ff 16       	cp	r15, r31
    3466:	51 f4       	brne	.+20     	; 0x347c <__LCD_putchar+0x3a>
    3468:	3b c0       	rjmp	.+118    	; 0x34e0 <__LCD_putchar+0x9e>
    346a:	8d e0       	ldi	r24, 0x0D	; 13
    346c:	f8 16       	cp	r15, r24
    346e:	59 f0       	breq	.+22     	; 0x3486 <__LCD_putchar+0x44>
    3470:	eb e1       	ldi	r30, 0x1B	; 27
    3472:	fe 16       	cp	r15, r30
    3474:	89 f0       	breq	.+34     	; 0x3498 <__LCD_putchar+0x56>
    3476:	fc e0       	ldi	r31, 0x0C	; 12
    3478:	ff 16       	cp	r15, r31
    347a:	41 f0       	breq	.+16     	; 0x348c <__LCD_putchar+0x4a>
    347c:	01 e0       	ldi	r16, 0x01	; 1
    347e:	41 c0       	rjmp	.+130    	; 0x3502 <__LCD_putchar+0xc0>
    3480:	10 92 77 04 	sts	0x0477, r1
    3484:	03 c0       	rjmp	.+6      	; 0x348c <__LCD_putchar+0x4a>
    3486:	10 92 77 04 	sts	0x0477, r1
    348a:	3a c0       	rjmp	.+116    	; 0x3500 <__LCD_putchar+0xbe>
    348c:	80 91 78 04 	lds	r24, 0x0478
    3490:	81 50       	subi	r24, 0x01	; 1
    3492:	80 93 78 04 	sts	0x0478, r24
    3496:	34 c0       	rjmp	.+104    	; 0x3500 <__LCD_putchar+0xbe>
    3498:	0e 94 d1 0f 	call	0x1fa2	; 0x1fa2 <LCD_clear>
    349c:	14 c0       	rjmp	.+40     	; 0x34c6 <__LCD_putchar+0x84>
    349e:	80 e0       	ldi	r24, 0x00	; 0
    34a0:	61 e0       	ldi	r22, 0x01	; 1
    34a2:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    34a6:	80 91 77 04 	lds	r24, 0x0477
    34aa:	8f 5f       	subi	r24, 0xFF	; 255
    34ac:	80 93 77 04 	sts	0x0477, r24
    34b0:	80 91 77 04 	lds	r24, 0x0477
    34b4:	87 ff       	sbrs	r24, 7
    34b6:	f3 cf       	rjmp	.-26     	; 0x349e <__LCD_putchar+0x5c>
    34b8:	10 92 77 04 	sts	0x0477, r1
    34bc:	80 91 78 04 	lds	r24, 0x0478
    34c0:	81 50       	subi	r24, 0x01	; 1
    34c2:	80 93 78 04 	sts	0x0478, r24
    34c6:	00 e0       	ldi	r16, 0x00	; 0
    34c8:	11 e0       	ldi	r17, 0x01	; 1
    34ca:	1c c0       	rjmp	.+56     	; 0x3504 <__LCD_putchar+0xc2>
    34cc:	80 91 77 04 	lds	r24, 0x0477
    34d0:	88 23       	and	r24, r24
    34d2:	b1 f0       	breq	.+44     	; 0x3500 <__LCD_putchar+0xbe>
    34d4:	80 91 77 04 	lds	r24, 0x0477
    34d8:	86 50       	subi	r24, 0x06	; 6
    34da:	80 93 77 04 	sts	0x0477, r24
    34de:	10 c0       	rjmp	.+32     	; 0x3500 <__LCD_putchar+0xbe>
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	0e 94 dd 11 	call	0x23ba	; 0x23ba <SPKR_open>
    34e6:	64 ef       	ldi	r22, 0xF4	; 244
    34e8:	71 e0       	ldi	r23, 0x01	; 1
    34ea:	80 e0       	ldi	r24, 0x00	; 0
    34ec:	90 e0       	ldi	r25, 0x00	; 0
    34ee:	4d e7       	ldi	r20, 0x7D	; 125
    34f0:	50 e0       	ldi	r21, 0x00	; 0
    34f2:	24 e6       	ldi	r18, 0x64	; 100
    34f4:	30 e0       	ldi	r19, 0x00	; 0
    34f6:	0e 94 3b 1c 	call	0x3876	; 0x3876 <SPKR_play_beep>
    34fa:	81 e0       	ldi	r24, 0x01	; 1
    34fc:	0e 94 07 1c 	call	0x380e	; 0x380e <SPKR_close>
    3500:	00 e0       	ldi	r16, 0x00	; 0
    3502:	10 e0       	ldi	r17, 0x00	; 0
    3504:	80 91 78 04 	lds	r24, 0x0478
    3508:	60 91 77 04 	lds	r22, 0x0477
    350c:	0e 94 97 10 	call	0x212e	; 0x212e <LCD_set_PGC_addr>
    3510:	00 23       	and	r16, r16
    3512:	51 f1       	breq	.+84     	; 0x3568 <__LCD_putchar+0x126>
    3514:	85 e0       	ldi	r24, 0x05	; 5
    3516:	f8 9e       	mul	r15, r24
    3518:	c0 01       	movw	r24, r0
    351a:	11 24       	eor	r1, r1
    351c:	ec 01       	movw	r28, r24
    351e:	c3 55       	subi	r28, 0x53	; 83
    3520:	df 4f       	sbci	r29, 0xFF	; 255
    3522:	8c 01       	movw	r16, r24
    3524:	0e 54       	subi	r16, 0x4E	; 78
    3526:	1f 4f       	sbci	r17, 0xFF	; 255
    3528:	fe 01       	movw	r30, r28
    352a:	84 91       	lpm	r24, Z+
    352c:	61 e0       	ldi	r22, 0x01	; 1
    352e:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    3532:	21 96       	adiw	r28, 0x01	; 1
    3534:	c0 17       	cp	r28, r16
    3536:	d1 07       	cpc	r29, r17
    3538:	b9 f7       	brne	.-18     	; 0x3528 <__LCD_putchar+0xe6>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	61 e0       	ldi	r22, 0x01	; 1
    353e:	0e 94 b0 10 	call	0x2160	; 0x2160 <LCD_write>
    3542:	80 91 77 04 	lds	r24, 0x0477
    3546:	8a 5f       	subi	r24, 0xFA	; 250
    3548:	80 93 77 04 	sts	0x0477, r24
    354c:	80 91 77 04 	lds	r24, 0x0477
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	8c 37       	cpi	r24, 0x7C	; 124
    3554:	91 05       	cpc	r25, r1
    3556:	3c f0       	brlt	.+14     	; 0x3566 <__LCD_putchar+0x124>
    3558:	10 92 77 04 	sts	0x0477, r1
    355c:	80 91 78 04 	lds	r24, 0x0478
    3560:	81 50       	subi	r24, 0x01	; 1
    3562:	80 93 78 04 	sts	0x0478, r24
    3566:	11 e0       	ldi	r17, 0x01	; 1
    3568:	80 91 78 04 	lds	r24, 0x0478
    356c:	83 70       	andi	r24, 0x03	; 3
    356e:	80 93 78 04 	sts	0x0478, r24
    3572:	11 30       	cpi	r17, 0x01	; 1
    3574:	59 f4       	brne	.+22     	; 0x358c <__LCD_putchar+0x14a>
    3576:	80 91 79 04 	lds	r24, 0x0479
    357a:	81 30       	cpi	r24, 0x01	; 1
    357c:	39 f4       	brne	.+14     	; 0x358c <__LCD_putchar+0x14a>
    357e:	e0 91 7a 04 	lds	r30, 0x047A
    3582:	f0 91 7b 04 	lds	r31, 0x047B
    3586:	30 97       	sbiw	r30, 0x00	; 0
    3588:	09 f0       	breq	.+2      	; 0x358c <__LCD_putchar+0x14a>
    358a:	09 95       	icall
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	df 91       	pop	r29
    3592:	cf 91       	pop	r28
    3594:	1f 91       	pop	r17
    3596:	0f 91       	pop	r16
    3598:	ff 90       	pop	r15
    359a:	08 95       	ret

0000359c <__LED_clr_pattern>:
    359c:	85 fd       	sbrc	r24, 5
    359e:	5d 98       	cbi	0x0b, 5	; 11
    35a0:	86 fd       	sbrc	r24, 6
    35a2:	5e 98       	cbi	0x0b, 6	; 11
    35a4:	08 95       	ret

000035a6 <__LED_init>:
    35a6:	55 9a       	sbi	0x0a, 5	; 10
    35a8:	56 9a       	sbi	0x0a, 6	; 10
    35aa:	08 95       	ret

000035ac <__LED_set_pattern>:
    35ac:	85 fd       	sbrc	r24, 5
    35ae:	5d 9a       	sbi	0x0b, 5	; 11
    35b0:	86 fd       	sbrc	r24, 6
    35b2:	5e 9a       	sbi	0x0b, 6	; 11
    35b4:	08 95       	ret

000035b6 <ATMEGA_open>:
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    35bc:	88 23       	and	r24, r24
    35be:	51 f4       	brne	.+20     	; 0x35d4 <ATMEGA_open+0x1e>
    35c0:	f8 94       	cli
    35c2:	0e 94 ed 1d 	call	0x3bda	; 0x3bda <__ATMEGA_init>
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	0e 94 ed 1a 	call	0x35da	; 0x35da <ATMEGA_set_clk_mode>
    35cc:	80 e0       	ldi	r24, 0x00	; 0
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    35d4:	80 e0       	ldi	r24, 0x00	; 0
    35d6:	91 e0       	ldi	r25, 0x01	; 1
    35d8:	08 95       	ret

000035da <ATMEGA_set_clk_mode>:
    35da:	81 30       	cpi	r24, 0x01	; 1
    35dc:	49 f0       	breq	.+18     	; 0x35f0 <ATMEGA_set_clk_mode+0x16>
    35de:	f8 94       	cli
    35e0:	81 30       	cpi	r24, 0x01	; 1
    35e2:	20 f1       	brcs	.+72     	; 0x362c <ATMEGA_set_clk_mode+0x52>
    35e4:	82 30       	cpi	r24, 0x02	; 2
    35e6:	b1 f0       	breq	.+44     	; 0x3614 <ATMEGA_set_clk_mode+0x3a>
    35e8:	83 30       	cpi	r24, 0x03	; 3
    35ea:	09 f0       	breq	.+2      	; 0x35ee <ATMEGA_set_clk_mode+0x14>
    35ec:	45 c0       	rjmp	.+138    	; 0x3678 <ATMEGA_set_clk_mode+0x9e>
    35ee:	17 c0       	rjmp	.+46     	; 0x361e <ATMEGA_set_clk_mode+0x44>
    35f0:	2c 9a       	sbi	0x05, 4	; 5
    35f2:	80 e8       	ldi	r24, 0x80	; 128
    35f4:	80 93 61 00 	sts	0x0061, r24
    35f8:	10 92 61 00 	sts	0x0061, r1
    35fc:	80 e0       	ldi	r24, 0x00	; 0
    35fe:	90 e0       	ldi	r25, 0x00	; 0
    3600:	00 00       	nop
    3602:	01 96       	adiw	r24, 0x01	; 1
    3604:	88 32       	cpi	r24, 0x28	; 40
    3606:	91 05       	cpc	r25, r1
    3608:	d9 f7       	brne	.-10     	; 0x3600 <ATMEGA_set_clk_mode+0x26>
    360a:	10 92 68 00 	sts	0x0068, r1
    360e:	10 92 6b 00 	sts	0x006B, r1
    3612:	08 95       	ret
    3614:	80 e8       	ldi	r24, 0x80	; 128
    3616:	80 93 61 00 	sts	0x0061, r24
    361a:	83 e0       	ldi	r24, 0x03	; 3
    361c:	04 c0       	rjmp	.+8      	; 0x3626 <ATMEGA_set_clk_mode+0x4c>
    361e:	80 e8       	ldi	r24, 0x80	; 128
    3620:	80 93 61 00 	sts	0x0061, r24
    3624:	88 e0       	ldi	r24, 0x08	; 8
    3626:	80 93 61 00 	sts	0x0061, r24
    362a:	28 c0       	rjmp	.+80     	; 0x367c <ATMEGA_set_clk_mode+0xa2>
    362c:	80 e0       	ldi	r24, 0x00	; 0
    362e:	90 e0       	ldi	r25, 0x00	; 0
    3630:	00 00       	nop
    3632:	01 96       	adiw	r24, 0x01	; 1
    3634:	2d e6       	ldi	r18, 0x6D	; 109
    3636:	80 36       	cpi	r24, 0x60	; 96
    3638:	92 07       	cpc	r25, r18
    363a:	d1 f7       	brne	.-12     	; 0x3630 <ATMEGA_set_clk_mode+0x56>
    363c:	2c 98       	cbi	0x05, 4	; 5
    363e:	80 e0       	ldi	r24, 0x00	; 0
    3640:	90 e0       	ldi	r25, 0x00	; 0
    3642:	00 00       	nop
    3644:	01 96       	adiw	r24, 0x01	; 1
    3646:	2d e6       	ldi	r18, 0x6D	; 109
    3648:	80 36       	cpi	r24, 0x60	; 96
    364a:	92 07       	cpc	r25, r18
    364c:	d1 f7       	brne	.-12     	; 0x3642 <ATMEGA_set_clk_mode+0x68>
    364e:	10 92 7a 00 	sts	0x007A, r1
    3652:	8f ef       	ldi	r24, 0xFF	; 255
    3654:	80 93 64 00 	sts	0x0064, r24
    3658:	80 91 68 00 	lds	r24, 0x0068
    365c:	81 60       	ori	r24, 0x01	; 1
    365e:	80 93 68 00 	sts	0x0068, r24
    3662:	80 91 6b 00 	lds	r24, 0x006B
    3666:	84 60       	ori	r24, 0x04	; 4
    3668:	80 93 6b 00 	sts	0x006B, r24
    366c:	78 94       	sei
    366e:	83 b7       	in	r24, 0x33	; 51
    3670:	81 60       	ori	r24, 0x01	; 1
    3672:	83 bf       	out	0x33, r24	; 51
    3674:	88 95       	sleep
    3676:	08 95       	ret
    3678:	82 30       	cpi	r24, 0x02	; 2
    367a:	08 f0       	brcs	.+2      	; 0x367e <ATMEGA_set_clk_mode+0xa4>
    367c:	78 94       	sei
    367e:	08 95       	ret

00003680 <SPI_open>:
    3680:	0f 93       	push	r16
    3682:	1f 93       	push	r17
    3684:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <__SPI_init>
    3688:	80 e0       	ldi	r24, 0x00	; 0
    368a:	68 e0       	ldi	r22, 0x08	; 8
    368c:	7e e1       	ldi	r23, 0x1E	; 30
    368e:	0e 94 8b 1b 	call	0x3716	; 0x3716 <SPI_set_config_func>
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	60 e0       	ldi	r22, 0x00	; 0
    3696:	7e e1       	ldi	r23, 0x1E	; 30
    3698:	0e 94 8b 1b 	call	0x3716	; 0x3716 <SPI_set_config_func>
    369c:	82 e0       	ldi	r24, 0x02	; 2
    369e:	68 ef       	ldi	r22, 0xF8	; 248
    36a0:	7d e1       	ldi	r23, 0x1D	; 29
    36a2:	0e 94 8b 1b 	call	0x3716	; 0x3716 <SPI_set_config_func>
    36a6:	86 e0       	ldi	r24, 0x06	; 6
    36a8:	60 e1       	ldi	r22, 0x10	; 16
    36aa:	7e e1       	ldi	r23, 0x1E	; 30
    36ac:	0e 94 8b 1b 	call	0x3716	; 0x3716 <SPI_set_config_func>
    36b0:	00 ef       	ldi	r16, 0xF0	; 240
    36b2:	1d e1       	ldi	r17, 0x1D	; 29
    36b4:	83 e0       	ldi	r24, 0x03	; 3
    36b6:	b8 01       	movw	r22, r16
    36b8:	0e 94 8b 1b 	call	0x3716	; 0x3716 <SPI_set_config_func>
    36bc:	84 e0       	ldi	r24, 0x04	; 4
    36be:	b8 01       	movw	r22, r16
    36c0:	0e 94 8b 1b 	call	0x3716	; 0x3716 <SPI_set_config_func>
    36c4:	85 e0       	ldi	r24, 0x05	; 5
    36c6:	b8 01       	movw	r22, r16
    36c8:	0e 94 8b 1b 	call	0x3716	; 0x3716 <SPI_set_config_func>
    36cc:	87 e0       	ldi	r24, 0x07	; 7
    36ce:	b8 01       	movw	r22, r16
    36d0:	0e 94 8b 1b 	call	0x3716	; 0x3716 <SPI_set_config_func>
    36d4:	82 e0       	ldi	r24, 0x02	; 2
    36d6:	61 e0       	ldi	r22, 0x01	; 1
    36d8:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    36dc:	8f ef       	ldi	r24, 0xFF	; 255
    36de:	80 93 7c 04 	sts	0x047C, r24
    36e2:	87 e0       	ldi	r24, 0x07	; 7
    36e4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <SPI_set_slave_addr>
    36e8:	82 e0       	ldi	r24, 0x02	; 2
    36ea:	91 e0       	ldi	r25, 0x01	; 1
    36ec:	1f 91       	pop	r17
    36ee:	0f 91       	pop	r16
    36f0:	08 95       	ret

000036f2 <SPI_receive>:
    36f2:	1f 93       	push	r17
    36f4:	16 2f       	mov	r17, r22
    36f6:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <SPI_set_slave_addr>
    36fa:	82 e0       	ldi	r24, 0x02	; 2
    36fc:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    3700:	81 30       	cpi	r24, 0x01	; 1
    3702:	11 f0       	breq	.+4      	; 0x3708 <SPI_receive+0x16>
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	05 c0       	rjmp	.+10     	; 0x3712 <SPI_receive+0x20>
    3708:	1e bd       	out	0x2e, r17	; 46
    370a:	0d b4       	in	r0, 0x2d	; 45
    370c:	07 fe       	sbrs	r0, 7
    370e:	fd cf       	rjmp	.-6      	; 0x370a <SPI_receive+0x18>
    3710:	8e b5       	in	r24, 0x2e	; 46
    3712:	1f 91       	pop	r17
    3714:	08 95       	ret

00003716 <SPI_set_config_func>:
    3716:	e8 2f       	mov	r30, r24
    3718:	f0 e0       	ldi	r31, 0x00	; 0
    371a:	ee 0f       	add	r30, r30
    371c:	ff 1f       	adc	r31, r31
    371e:	e4 5e       	subi	r30, 0xE4	; 228
    3720:	fd 4f       	sbci	r31, 0xFD	; 253
    3722:	71 83       	std	Z+1, r23	; 0x01
    3724:	60 83       	st	Z, r22
    3726:	08 95       	ret

00003728 <__SPKR_TIMER1_COMPA_vect>:
    3728:	0e 94 97 1b 	call	0x372e	; 0x372e <SPKR_clk>
    372c:	08 95       	ret

0000372e <SPKR_clk>:
    372e:	80 91 2e 02 	lds	r24, 0x022E
    3732:	90 91 2f 02 	lds	r25, 0x022F
    3736:	a0 91 30 02 	lds	r26, 0x0230
    373a:	b0 91 31 02 	lds	r27, 0x0231
    373e:	20 91 32 02 	lds	r18, 0x0232
    3742:	30 91 33 02 	lds	r19, 0x0233
    3746:	40 91 34 02 	lds	r20, 0x0234
    374a:	50 91 35 02 	lds	r21, 0x0235
    374e:	28 0f       	add	r18, r24
    3750:	39 1f       	adc	r19, r25
    3752:	4a 1f       	adc	r20, r26
    3754:	5b 1f       	adc	r21, r27
    3756:	20 93 2e 02 	sts	0x022E, r18
    375a:	30 93 2f 02 	sts	0x022F, r19
    375e:	40 93 30 02 	sts	0x0230, r20
    3762:	50 93 31 02 	sts	0x0231, r21
    3766:	80 91 2e 02 	lds	r24, 0x022E
    376a:	90 91 2f 02 	lds	r25, 0x022F
    376e:	a0 91 30 02 	lds	r26, 0x0230
    3772:	b0 91 31 02 	lds	r27, 0x0231
    3776:	88 51       	subi	r24, 0x18	; 24
    3778:	96 4f       	sbci	r25, 0xF6	; 246
    377a:	a0 40       	sbci	r26, 0x00	; 0
    377c:	b0 40       	sbci	r27, 0x00	; 0
    377e:	bc f0       	brlt	.+46     	; 0x37ae <SPKR_clk+0x80>
    3780:	8b b1       	in	r24, 0x0b	; 11
    3782:	80 58       	subi	r24, 0x80	; 128
    3784:	8b b9       	out	0x0b, r24	; 11
    3786:	80 91 2e 02 	lds	r24, 0x022E
    378a:	90 91 2f 02 	lds	r25, 0x022F
    378e:	a0 91 30 02 	lds	r26, 0x0230
    3792:	b0 91 31 02 	lds	r27, 0x0231
    3796:	88 51       	subi	r24, 0x18	; 24
    3798:	96 4f       	sbci	r25, 0xF6	; 246
    379a:	a0 40       	sbci	r26, 0x00	; 0
    379c:	b0 40       	sbci	r27, 0x00	; 0
    379e:	80 93 2e 02 	sts	0x022E, r24
    37a2:	90 93 2f 02 	sts	0x022F, r25
    37a6:	a0 93 30 02 	sts	0x0230, r26
    37aa:	b0 93 31 02 	sts	0x0231, r27
    37ae:	08 95       	ret

000037b0 <__SPKR_close_beep_mode>:
    37b0:	8a e0       	ldi	r24, 0x0A	; 10
    37b2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    37b6:	81 30       	cpi	r24, 0x01	; 1
    37b8:	41 f4       	brne	.+16     	; 0x37ca <__SPKR_close_beep_mode+0x1a>
    37ba:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__SPKR_close>
    37be:	10 92 2d 02 	sts	0x022D, r1
    37c2:	8a e0       	ldi	r24, 0x0A	; 10
    37c4:	60 e0       	ldi	r22, 0x00	; 0
    37c6:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    37ca:	08 95       	ret

000037cc <__SPKR_close_tone_mode>:
    37cc:	89 e0       	ldi	r24, 0x09	; 9
    37ce:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    37d2:	81 30       	cpi	r24, 0x01	; 1
    37d4:	d9 f4       	brne	.+54     	; 0x380c <__SPKR_close_tone_mode+0x40>
    37d6:	80 91 2c 02 	lds	r24, 0x022C
    37da:	88 23       	and	r24, r24
    37dc:	11 f0       	breq	.+4      	; 0x37e2 <__SPKR_close_tone_mode+0x16>
    37de:	0e 94 88 1c 	call	0x3910	; 0x3910 <__SPKR_stop>
    37e2:	82 e0       	ldi	r24, 0x02	; 2
    37e4:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <__SPKR_close>
    37e8:	80 91 3a 02 	lds	r24, 0x023A
    37ec:	90 91 3b 02 	lds	r25, 0x023B
    37f0:	00 97       	sbiw	r24, 0x00	; 0
    37f2:	31 f0       	breq	.+12     	; 0x3800 <__SPKR_close_tone_mode+0x34>
    37f4:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <free>
    37f8:	10 92 3b 02 	sts	0x023B, r1
    37fc:	10 92 3a 02 	sts	0x023A, r1
    3800:	10 92 2c 02 	sts	0x022C, r1
    3804:	89 e0       	ldi	r24, 0x09	; 9
    3806:	60 e0       	ldi	r22, 0x00	; 0
    3808:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    380c:	08 95       	ret

0000380e <SPKR_close>:
    380e:	81 30       	cpi	r24, 0x01	; 1
    3810:	29 f0       	breq	.+10     	; 0x381c <SPKR_close+0xe>
    3812:	82 30       	cpi	r24, 0x02	; 2
    3814:	29 f4       	brne	.+10     	; 0x3820 <SPKR_close+0x12>
    3816:	0e 94 e6 1b 	call	0x37cc	; 0x37cc <__SPKR_close_tone_mode>
    381a:	08 95       	ret
    381c:	0e 94 d8 1b 	call	0x37b0	; 0x37b0 <__SPKR_close_beep_mode>
    3820:	08 95       	ret

00003822 <__SPKR_init>:
    3822:	98 2f       	mov	r25, r24
    3824:	80 91 2c 02 	lds	r24, 0x022C
    3828:	88 23       	and	r24, r24
    382a:	31 f4       	brne	.+12     	; 0x3838 <__SPKR_init+0x16>
    382c:	80 91 2d 02 	lds	r24, 0x022D
    3830:	88 23       	and	r24, r24
    3832:	11 f4       	brne	.+4      	; 0x3838 <__SPKR_init+0x16>
    3834:	57 9a       	sbi	0x0a, 7	; 10
    3836:	5f 98       	cbi	0x0b, 7	; 11
    3838:	80 91 2c 02 	lds	r24, 0x022C
    383c:	88 23       	and	r24, r24
    383e:	d1 f4       	brne	.+52     	; 0x3874 <__SPKR_init+0x52>
    3840:	92 30       	cpi	r25, 0x02	; 2
    3842:	c1 f4       	brne	.+48     	; 0x3874 <__SPKR_init+0x52>
    3844:	10 92 80 00 	sts	0x0080, r1
    3848:	10 92 81 00 	sts	0x0081, r1
    384c:	80 91 81 00 	lds	r24, 0x0081
    3850:	88 60       	ori	r24, 0x08	; 8
    3852:	80 93 81 00 	sts	0x0081, r24
    3856:	80 91 81 00 	lds	r24, 0x0081
    385a:	81 60       	ori	r24, 0x01	; 1
    385c:	80 93 81 00 	sts	0x0081, r24
    3860:	10 92 85 00 	sts	0x0085, r1
    3864:	10 92 84 00 	sts	0x0084, r1
    3868:	81 e0       	ldi	r24, 0x01	; 1
    386a:	80 93 89 00 	sts	0x0089, r24
    386e:	80 e9       	ldi	r24, 0x90	; 144
    3870:	80 93 88 00 	sts	0x0088, r24
    3874:	08 95       	ret

00003876 <SPKR_play_beep>:
    3876:	8f 92       	push	r8
    3878:	9f 92       	push	r9
    387a:	af 92       	push	r10
    387c:	bf 92       	push	r11
    387e:	cf 92       	push	r12
    3880:	df 92       	push	r13
    3882:	ef 92       	push	r14
    3884:	ff 92       	push	r15
    3886:	0f 93       	push	r16
    3888:	1f 93       	push	r17
    388a:	cf 93       	push	r28
    388c:	df 93       	push	r29
    388e:	4b 01       	movw	r8, r22
    3890:	5c 01       	movw	r10, r24
    3892:	ea 01       	movw	r28, r20
    3894:	b9 01       	movw	r22, r18
    3896:	21 15       	cp	r18, r1
    3898:	31 05       	cpc	r19, r1
    389a:	39 f1       	breq	.+78     	; 0x38ea <SPKR_play_beep+0x74>
    389c:	9e 01       	movw	r18, r28
    389e:	44 27       	eor	r20, r20
    38a0:	37 fd       	sbrc	r19, 7
    38a2:	40 95       	com	r20
    38a4:	54 2f       	mov	r21, r20
    38a6:	65 36       	cpi	r22, 0x65	; 101
    38a8:	71 05       	cpc	r23, r1
    38aa:	10 f0       	brcs	.+4      	; 0x38b0 <SPKR_play_beep+0x3a>
    38ac:	64 e6       	ldi	r22, 0x64	; 100
    38ae:	70 e0       	ldi	r23, 0x00	; 0
    38b0:	80 e0       	ldi	r24, 0x00	; 0
    38b2:	90 e0       	ldi	r25, 0x00	; 0
    38b4:	0e 94 aa 29 	call	0x5354	; 0x5354 <__mulsi3>
    38b8:	24 e6       	ldi	r18, 0x64	; 100
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	40 e0       	ldi	r20, 0x00	; 0
    38be:	50 e0       	ldi	r21, 0x00	; 0
    38c0:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <__udivmodsi4>
    38c4:	79 01       	movw	r14, r18
    38c6:	8a 01       	movw	r16, r20
    38c8:	c5 01       	movw	r24, r10
    38ca:	b4 01       	movw	r22, r8
    38cc:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <SPKR_beep>
    38d0:	c7 01       	movw	r24, r14
    38d2:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TMRSRVC_delay>
    38d6:	60 e0       	ldi	r22, 0x00	; 0
    38d8:	70 e0       	ldi	r23, 0x00	; 0
    38da:	80 e0       	ldi	r24, 0x00	; 0
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <SPKR_beep>
    38e2:	ce 01       	movw	r24, r28
    38e4:	8e 19       	sub	r24, r14
    38e6:	9f 09       	sbc	r25, r15
    38e8:	04 c0       	rjmp	.+8      	; 0x38f2 <SPKR_play_beep+0x7c>
    38ea:	41 15       	cp	r20, r1
    38ec:	51 05       	cpc	r21, r1
    38ee:	19 f0       	breq	.+6      	; 0x38f6 <SPKR_play_beep+0x80>
    38f0:	ca 01       	movw	r24, r20
    38f2:	0e 94 6c 16 	call	0x2cd8	; 0x2cd8 <TMRSRVC_delay>
    38f6:	df 91       	pop	r29
    38f8:	cf 91       	pop	r28
    38fa:	1f 91       	pop	r17
    38fc:	0f 91       	pop	r16
    38fe:	ff 90       	pop	r15
    3900:	ef 90       	pop	r14
    3902:	df 90       	pop	r13
    3904:	cf 90       	pop	r12
    3906:	bf 90       	pop	r11
    3908:	af 90       	pop	r10
    390a:	9f 90       	pop	r9
    390c:	8f 90       	pop	r8
    390e:	08 95       	ret

00003910 <__SPKR_stop>:
    3910:	ef e6       	ldi	r30, 0x6F	; 111
    3912:	f0 e0       	ldi	r31, 0x00	; 0
    3914:	80 81       	ld	r24, Z
    3916:	8d 7f       	andi	r24, 0xFD	; 253
    3918:	80 83       	st	Z, r24
    391a:	08 95       	ret

0000391c <STEPPER_go>:
    391c:	98 2f       	mov	r25, r24
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	80 93 61 04 	sts	0x0461, r24
    3924:	91 30       	cpi	r25, 0x01	; 1
    3926:	51 f0       	breq	.+20     	; 0x393c <STEPPER_go+0x20>
    3928:	91 30       	cpi	r25, 0x01	; 1
    392a:	18 f0       	brcs	.+6      	; 0x3932 <STEPPER_go+0x16>
    392c:	92 30       	cpi	r25, 0x02	; 2
    392e:	41 f4       	brne	.+16     	; 0x3940 <STEPPER_go+0x24>
    3930:	03 c0       	rjmp	.+6      	; 0x3938 <STEPPER_go+0x1c>
    3932:	10 92 49 04 	sts	0x0449, r1
    3936:	04 c0       	rjmp	.+8      	; 0x3940 <STEPPER_go+0x24>
    3938:	10 92 49 04 	sts	0x0449, r1
    393c:	10 92 4a 04 	sts	0x044A, r1
    3940:	10 92 61 04 	sts	0x0461, r1
    3944:	08 95       	ret

00003946 <__STEPPER_init>:
    3946:	3a 9a       	sbi	0x07, 2	; 7
    3948:	3b 9a       	sbi	0x07, 3	; 7
    394a:	3c 9a       	sbi	0x07, 4	; 7
    394c:	3d 9a       	sbi	0x07, 5	; 7
    394e:	3e 9a       	sbi	0x07, 6	; 7
    3950:	3f 9a       	sbi	0x07, 7	; 7
    3952:	88 b1       	in	r24, 0x08	; 8
    3954:	83 70       	andi	r24, 0x03	; 3
    3956:	88 b9       	out	0x08, r24	; 8
    3958:	08 95       	ret

0000395a <STEPPER_set_steps>:
    395a:	98 2f       	mov	r25, r24
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	80 93 61 04 	sts	0x0461, r24
    3962:	91 30       	cpi	r25, 0x01	; 1
    3964:	71 f0       	breq	.+28     	; 0x3982 <STEPPER_set_steps+0x28>
    3966:	91 30       	cpi	r25, 0x01	; 1
    3968:	18 f0       	brcs	.+6      	; 0x3970 <STEPPER_set_steps+0x16>
    396a:	92 30       	cpi	r25, 0x02	; 2
    396c:	71 f4       	brne	.+28     	; 0x398a <STEPPER_set_steps+0x30>
    396e:	05 c0       	rjmp	.+10     	; 0x397a <STEPPER_set_steps+0x20>
    3970:	70 93 3e 04 	sts	0x043E, r23
    3974:	60 93 3d 04 	sts	0x043D, r22
    3978:	08 c0       	rjmp	.+16     	; 0x398a <STEPPER_set_steps+0x30>
    397a:	70 93 3e 04 	sts	0x043E, r23
    397e:	60 93 3d 04 	sts	0x043D, r22
    3982:	70 93 40 04 	sts	0x0440, r23
    3986:	60 93 3f 04 	sts	0x043F, r22
    398a:	10 92 61 04 	sts	0x0461, r1
    398e:	08 95       	ret

00003990 <STEPPER_set_stop_mode>:
    3990:	98 2f       	mov	r25, r24
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	80 93 61 04 	sts	0x0461, r24
    3998:	91 30       	cpi	r25, 0x01	; 1
    399a:	51 f0       	breq	.+20     	; 0x39b0 <STEPPER_set_stop_mode+0x20>
    399c:	91 30       	cpi	r25, 0x01	; 1
    399e:	18 f0       	brcs	.+6      	; 0x39a6 <STEPPER_set_stop_mode+0x16>
    39a0:	92 30       	cpi	r25, 0x02	; 2
    39a2:	41 f4       	brne	.+16     	; 0x39b4 <STEPPER_set_stop_mode+0x24>
    39a4:	03 c0       	rjmp	.+6      	; 0x39ac <STEPPER_set_stop_mode+0x1c>
    39a6:	60 93 4b 04 	sts	0x044B, r22
    39aa:	04 c0       	rjmp	.+8      	; 0x39b4 <STEPPER_set_stop_mode+0x24>
    39ac:	60 93 4b 04 	sts	0x044B, r22
    39b0:	60 93 4c 04 	sts	0x044C, r22
    39b4:	10 92 61 04 	sts	0x0461, r1
    39b8:	08 95       	ret

000039ba <STEPPER_setup_decels>:
    39ba:	0f 93       	push	r16
    39bc:	1f 93       	push	r17
    39be:	cf 93       	push	r28
    39c0:	df 93       	push	r29
    39c2:	eb 01       	movw	r28, r22
    39c4:	8a 01       	movw	r16, r20
    39c6:	81 30       	cpi	r24, 0x01	; 1
    39c8:	01 f1       	breq	.+64     	; 0x3a0a <STEPPER_setup_decels+0x50>
    39ca:	81 30       	cpi	r24, 0x01	; 1
    39cc:	18 f0       	brcs	.+6      	; 0x39d4 <STEPPER_setup_decels+0x1a>
    39ce:	82 30       	cpi	r24, 0x02	; 2
    39d0:	61 f5       	brne	.+88     	; 0x3a2a <STEPPER_setup_decels+0x70>
    39d2:	0d c0       	rjmp	.+26     	; 0x39ee <STEPPER_setup_decels+0x34>
    39d4:	80 91 35 04 	lds	r24, 0x0435
    39d8:	90 91 36 04 	lds	r25, 0x0436
    39dc:	89 2b       	or	r24, r25
    39de:	11 f0       	breq	.+4      	; 0x39e4 <STEPPER_setup_decels+0x2a>
    39e0:	80 e0       	ldi	r24, 0x00	; 0
    39e2:	1a c0       	rjmp	.+52     	; 0x3a18 <STEPPER_setup_decels+0x5e>
    39e4:	10 92 42 04 	sts	0x0442, r1
    39e8:	10 92 41 04 	sts	0x0441, r1
    39ec:	1e c0       	rjmp	.+60     	; 0x3a2a <STEPPER_setup_decels+0x70>
    39ee:	80 91 35 04 	lds	r24, 0x0435
    39f2:	90 91 36 04 	lds	r25, 0x0436
    39f6:	89 2b       	or	r24, r25
    39f8:	21 f0       	breq	.+8      	; 0x3a02 <STEPPER_setup_decels+0x48>
    39fa:	80 e0       	ldi	r24, 0x00	; 0
    39fc:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <STEPPER_set_decel_step_values>
    3a00:	04 c0       	rjmp	.+8      	; 0x3a0a <STEPPER_setup_decels+0x50>
    3a02:	10 92 42 04 	sts	0x0442, r1
    3a06:	10 92 41 04 	sts	0x0441, r1
    3a0a:	80 91 37 04 	lds	r24, 0x0437
    3a0e:	90 91 38 04 	lds	r25, 0x0438
    3a12:	89 2b       	or	r24, r25
    3a14:	31 f0       	breq	.+12     	; 0x3a22 <STEPPER_setup_decels+0x68>
    3a16:	81 e0       	ldi	r24, 0x01	; 1
    3a18:	be 01       	movw	r22, r28
    3a1a:	a8 01       	movw	r20, r16
    3a1c:	0e 94 53 1e 	call	0x3ca6	; 0x3ca6 <STEPPER_set_decel_step_values>
    3a20:	04 c0       	rjmp	.+8      	; 0x3a2a <STEPPER_setup_decels+0x70>
    3a22:	10 92 44 04 	sts	0x0444, r1
    3a26:	10 92 43 04 	sts	0x0443, r1
    3a2a:	df 91       	pop	r29
    3a2c:	cf 91       	pop	r28
    3a2e:	1f 91       	pop	r17
    3a30:	0f 91       	pop	r16
    3a32:	08 95       	ret

00003a34 <SYS_init>:
    3a34:	10 92 64 04 	sts	0x0464, r1
    3a38:	10 92 65 04 	sts	0x0465, r1
    3a3c:	10 92 69 04 	sts	0x0469, r1
    3a40:	10 92 66 04 	sts	0x0466, r1
    3a44:	10 92 68 04 	sts	0x0468, r1
    3a48:	10 92 6a 04 	sts	0x046A, r1
    3a4c:	10 92 6b 04 	sts	0x046B, r1
    3a50:	10 92 6c 04 	sts	0x046C, r1
    3a54:	10 92 6d 04 	sts	0x046D, r1
    3a58:	10 92 6e 04 	sts	0x046E, r1
    3a5c:	10 92 6f 04 	sts	0x046F, r1
    3a60:	10 92 70 04 	sts	0x0470, r1
    3a64:	10 92 71 04 	sts	0x0471, r1
    3a68:	10 92 72 04 	sts	0x0472, r1
    3a6c:	10 92 73 04 	sts	0x0473, r1
    3a70:	10 92 74 04 	sts	0x0474, r1
    3a74:	10 92 75 04 	sts	0x0475, r1
    3a78:	08 95       	ret

00003a7a <TMRSRVC_insert>:
    3a7a:	cf 92       	push	r12
    3a7c:	df 92       	push	r13
    3a7e:	ef 92       	push	r14
    3a80:	ff 92       	push	r15
    3a82:	0f 93       	push	r16
    3a84:	1f 93       	push	r17
    3a86:	cf 93       	push	r28
    3a88:	df 93       	push	r29
    3a8a:	ec 01       	movw	r28, r24
    3a8c:	80 91 9b 04 	lds	r24, 0x049B
    3a90:	88 23       	and	r24, r24
    3a92:	39 f4       	brne	.+14     	; 0x3aa2 <TMRSRVC_insert+0x28>
    3a94:	d0 93 9d 04 	sts	0x049D, r29
    3a98:	c0 93 9c 04 	sts	0x049C, r28
    3a9c:	0e 94 cb 1d 	call	0x3b96	; 0x3b96 <TMRSRVC_start>
    3aa0:	47 c0       	rjmp	.+142    	; 0x3b30 <TMRSRVC_insert+0xb6>
    3aa2:	c0 90 9c 04 	lds	r12, 0x049C
    3aa6:	d0 90 9d 04 	lds	r13, 0x049D
    3aaa:	00 e0       	ldi	r16, 0x00	; 0
    3aac:	10 e0       	ldi	r17, 0x00	; 0
    3aae:	ee 24       	eor	r14, r14
    3ab0:	ff 24       	eor	r15, r15
    3ab2:	37 c0       	rjmp	.+110    	; 0x3b22 <TMRSRVC_insert+0xa8>
    3ab4:	a8 81       	ld	r26, Y
    3ab6:	b9 81       	ldd	r27, Y+1	; 0x01
    3ab8:	fd 01       	movw	r30, r26
    3aba:	64 81       	ldd	r22, Z+4	; 0x04
    3abc:	75 81       	ldd	r23, Z+5	; 0x05
    3abe:	f6 01       	movw	r30, r12
    3ac0:	40 81       	ld	r20, Z
    3ac2:	51 81       	ldd	r21, Z+1	; 0x01
    3ac4:	fa 01       	movw	r30, r20
    3ac6:	84 81       	ldd	r24, Z+4	; 0x04
    3ac8:	95 81       	ldd	r25, Z+5	; 0x05
    3aca:	9b 01       	movw	r18, r22
    3acc:	28 1b       	sub	r18, r24
    3ace:	39 0b       	sbc	r19, r25
    3ad0:	37 ff       	sbrs	r19, 7
    3ad2:	0f c0       	rjmp	.+30     	; 0x3af2 <TMRSRVC_insert+0x78>
    3ad4:	86 1b       	sub	r24, r22
    3ad6:	97 0b       	sbc	r25, r23
    3ad8:	95 83       	std	Z+5, r25	; 0x05
    3ada:	84 83       	std	Z+4, r24	; 0x04
    3adc:	db 82       	std	Y+3, r13	; 0x03
    3ade:	ca 82       	std	Y+2, r12	; 0x02
    3ae0:	01 2b       	or	r16, r17
    3ae2:	29 f4       	brne	.+10     	; 0x3aee <TMRSRVC_insert+0x74>
    3ae4:	d0 93 9d 04 	sts	0x049D, r29
    3ae8:	c0 93 9c 04 	sts	0x049C, r28
    3aec:	21 c0       	rjmp	.+66     	; 0x3b30 <TMRSRVC_insert+0xb6>
    3aee:	f7 01       	movw	r30, r14
    3af0:	0c c0       	rjmp	.+24     	; 0x3b0a <TMRSRVC_insert+0x90>
    3af2:	f6 01       	movw	r30, r12
    3af4:	82 81       	ldd	r24, Z+2	; 0x02
    3af6:	93 81       	ldd	r25, Z+3	; 0x03
    3af8:	21 15       	cp	r18, r1
    3afa:	31 05       	cpc	r19, r1
    3afc:	49 f4       	brne	.+18     	; 0x3b10 <TMRSRVC_insert+0x96>
    3afe:	fd 01       	movw	r30, r26
    3b00:	15 82       	std	Z+5, r1	; 0x05
    3b02:	14 82       	std	Z+4, r1	; 0x04
    3b04:	9b 83       	std	Y+3, r25	; 0x03
    3b06:	8a 83       	std	Y+2, r24	; 0x02
    3b08:	f6 01       	movw	r30, r12
    3b0a:	d3 83       	std	Z+3, r29	; 0x03
    3b0c:	c2 83       	std	Z+2, r28	; 0x02
    3b0e:	10 c0       	rjmp	.+32     	; 0x3b30 <TMRSRVC_insert+0xb6>
    3b10:	fd 01       	movw	r30, r26
    3b12:	35 83       	std	Z+5, r19	; 0x05
    3b14:	24 83       	std	Z+4, r18	; 0x04
    3b16:	00 97       	sbiw	r24, 0x00	; 0
    3b18:	b9 f3       	breq	.-18     	; 0x3b08 <TMRSRVC_insert+0x8e>
    3b1a:	0f 5f       	subi	r16, 0xFF	; 255
    3b1c:	1f 4f       	sbci	r17, 0xFF	; 255
    3b1e:	76 01       	movw	r14, r12
    3b20:	6c 01       	movw	r12, r24
    3b22:	80 91 9b 04 	lds	r24, 0x049B
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	08 17       	cp	r16, r24
    3b2a:	19 07       	cpc	r17, r25
    3b2c:	18 f2       	brcs	.-122    	; 0x3ab4 <TMRSRVC_insert+0x3a>
    3b2e:	ec cf       	rjmp	.-40     	; 0x3b08 <TMRSRVC_insert+0x8e>
    3b30:	80 91 9b 04 	lds	r24, 0x049B
    3b34:	8f 5f       	subi	r24, 0xFF	; 255
    3b36:	80 93 9b 04 	sts	0x049B, r24
    3b3a:	df 91       	pop	r29
    3b3c:	cf 91       	pop	r28
    3b3e:	1f 91       	pop	r17
    3b40:	0f 91       	pop	r16
    3b42:	ff 90       	pop	r15
    3b44:	ef 90       	pop	r14
    3b46:	df 90       	pop	r13
    3b48:	cf 90       	pop	r12
    3b4a:	08 95       	ret

00003b4c <TMRSRVC_open>:
    3b4c:	88 e0       	ldi	r24, 0x08	; 8
    3b4e:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    3b52:	88 23       	and	r24, r24
    3b54:	b9 f4       	brne	.+46     	; 0x3b84 <TMRSRVC_open+0x38>
    3b56:	10 92 9b 04 	sts	0x049B, r1
    3b5a:	10 92 9d 04 	sts	0x049D, r1
    3b5e:	10 92 9c 04 	sts	0x049C, r1
    3b62:	10 92 3c 02 	sts	0x023C, r1
    3b66:	10 92 3d 02 	sts	0x023D, r1
    3b6a:	80 e1       	ldi	r24, 0x10	; 16
    3b6c:	60 ec       	ldi	r22, 0xC0	; 192
    3b6e:	7e e1       	ldi	r23, 0x1E	; 30
    3b70:	0e 94 dc 1d 	call	0x3bb8	; 0x3bb8 <__ISR_attach>
    3b74:	0e 94 c7 1e 	call	0x3d8e	; 0x3d8e <__TMRSRVC_init>
    3b78:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <__TMRSRVC_start>
    3b7c:	88 e0       	ldi	r24, 0x08	; 8
    3b7e:	61 e0       	ldi	r22, 0x01	; 1
    3b80:	0e 94 57 15 	call	0x2aae	; 0x2aae <SYS_set_state>
    3b84:	88 e0       	ldi	r24, 0x08	; 8
    3b86:	91 e0       	ldi	r25, 0x01	; 1
    3b88:	08 95       	ret

00003b8a <__TMRSRVC_start>:
    3b8a:	ee e6       	ldi	r30, 0x6E	; 110
    3b8c:	f0 e0       	ldi	r31, 0x00	; 0
    3b8e:	80 81       	ld	r24, Z
    3b90:	82 60       	ori	r24, 0x02	; 2
    3b92:	80 83       	st	Z, r24
    3b94:	08 95       	ret

00003b96 <TMRSRVC_start>:
    3b96:	81 e0       	ldi	r24, 0x01	; 1
    3b98:	80 93 3d 02 	sts	0x023D, r24
    3b9c:	08 95       	ret

00003b9e <I2C_enable>:
    3b9e:	80 91 9e 04 	lds	r24, 0x049E
    3ba2:	81 30       	cpi	r24, 0x01	; 1
    3ba4:	29 f4       	brne	.+10     	; 0x3bb0 <I2C_enable+0x12>
    3ba6:	80 91 bc 00 	lds	r24, 0x00BC
    3baa:	84 60       	ori	r24, 0x04	; 4
    3bac:	80 93 bc 00 	sts	0x00BC, r24
    3bb0:	08 95       	ret

00003bb2 <__I2C_init>:
    3bb2:	38 98       	cbi	0x07, 0	; 7
    3bb4:	39 98       	cbi	0x07, 1	; 7
    3bb6:	08 95       	ret

00003bb8 <__ISR_attach>:
    3bb8:	80 32       	cpi	r24, 0x20	; 32
    3bba:	18 f0       	brcs	.+6      	; 0x3bc2 <__ISR_attach+0xa>
    3bbc:	20 e0       	ldi	r18, 0x00	; 0
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	0a c0       	rjmp	.+20     	; 0x3bd6 <__ISR_attach+0x1e>
    3bc2:	e8 2f       	mov	r30, r24
    3bc4:	f0 e0       	ldi	r31, 0x00	; 0
    3bc6:	ee 0f       	add	r30, r30
    3bc8:	ff 1f       	adc	r31, r31
    3bca:	e4 52       	subi	r30, 0x24	; 36
    3bcc:	fe 4f       	sbci	r31, 0xFE	; 254
    3bce:	20 81       	ld	r18, Z
    3bd0:	31 81       	ldd	r19, Z+1	; 0x01
    3bd2:	71 83       	std	Z+1, r23	; 0x01
    3bd4:	60 83       	st	Z, r22
    3bd6:	c9 01       	movw	r24, r18
    3bd8:	08 95       	ret

00003bda <__ATMEGA_init>:
    3bda:	24 9a       	sbi	0x04, 4	; 4
    3bdc:	2c 9a       	sbi	0x05, 4	; 5
    3bde:	08 95       	ret

00003be0 <SPI_default_config>:
    3be0:	83 e5       	ldi	r24, 0x53	; 83
    3be2:	8c bd       	out	0x2c, r24	; 44
    3be4:	81 e0       	ldi	r24, 0x01	; 1
    3be6:	8d bd       	out	0x2d, r24	; 45
    3be8:	8d e0       	ldi	r24, 0x0D	; 13
    3bea:	8a 95       	dec	r24
    3bec:	f1 f7       	brne	.-4      	; 0x3bea <SPI_default_config+0xa>
    3bee:	08 95       	ret

00003bf0 <SPI_ATtiny0_config>:
    3bf0:	83 e5       	ldi	r24, 0x53	; 83
    3bf2:	8c bd       	out	0x2c, r24	; 44
    3bf4:	1d bc       	out	0x2d, r1	; 45
    3bf6:	84 ef       	ldi	r24, 0xF4	; 244
    3bf8:	91 e0       	ldi	r25, 0x01	; 1
    3bfa:	01 97       	sbiw	r24, 0x01	; 1
    3bfc:	f1 f7       	brne	.-4      	; 0x3bfa <SPI_ATtiny0_config+0xa>
    3bfe:	08 95       	ret

00003c00 <SPI_PSXC_config>:
    3c00:	8f e7       	ldi	r24, 0x7F	; 127
    3c02:	8c bd       	out	0x2c, r24	; 44
    3c04:	1d bc       	out	0x2d, r1	; 45
    3c06:	84 ef       	ldi	r24, 0xF4	; 244
    3c08:	91 e0       	ldi	r25, 0x01	; 1
    3c0a:	01 97       	sbiw	r24, 0x01	; 1
    3c0c:	f1 f7       	brne	.-4      	; 0x3c0a <SPI_PSXC_config+0xa>
    3c0e:	08 95       	ret

00003c10 <SPI_LCD_config>:
    3c10:	83 e5       	ldi	r24, 0x53	; 83
    3c12:	8c bd       	out	0x2c, r24	; 44
    3c14:	81 e0       	ldi	r24, 0x01	; 1
    3c16:	8d bd       	out	0x2d, r24	; 45
    3c18:	8d e0       	ldi	r24, 0x0D	; 13
    3c1a:	8a 95       	dec	r24
    3c1c:	f1 f7       	brne	.-4      	; 0x3c1a <SPI_LCD_config+0xa>
    3c1e:	08 95       	ret

00003c20 <SPI_FLASH_config>:
    3c20:	83 e5       	ldi	r24, 0x53	; 83
    3c22:	8c bd       	out	0x2c, r24	; 44
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	8d bd       	out	0x2d, r24	; 45
    3c28:	84 ef       	ldi	r24, 0xF4	; 244
    3c2a:	91 e0       	ldi	r25, 0x01	; 1
    3c2c:	01 97       	sbiw	r24, 0x01	; 1
    3c2e:	f1 f7       	brne	.-4      	; 0x3c2c <SPI_FLASH_config+0xc>
    3c30:	08 95       	ret

00003c32 <__SPI_init>:
    3c32:	25 9a       	sbi	0x04, 5	; 4
    3c34:	26 98       	cbi	0x04, 6	; 4
    3c36:	27 9a       	sbi	0x04, 7	; 4
    3c38:	20 9a       	sbi	0x04, 0	; 4
    3c3a:	21 9a       	sbi	0x04, 1	; 4
    3c3c:	22 9a       	sbi	0x04, 2	; 4
    3c3e:	08 95       	ret

00003c40 <SPKR_beep>:
    3c40:	9b 01       	movw	r18, r22
    3c42:	ac 01       	movw	r20, r24
    3c44:	80 91 2d 02 	lds	r24, 0x022D
    3c48:	88 23       	and	r24, r24
    3c4a:	81 f0       	breq	.+32     	; 0x3c6c <SPKR_beep+0x2c>
    3c4c:	da 01       	movw	r26, r20
    3c4e:	c9 01       	movw	r24, r18
    3c50:	88 0f       	add	r24, r24
    3c52:	99 1f       	adc	r25, r25
    3c54:	aa 1f       	adc	r26, r26
    3c56:	bb 1f       	adc	r27, r27
    3c58:	90 93 39 02 	sts	0x0239, r25
    3c5c:	80 93 38 02 	sts	0x0238, r24
    3c60:	21 15       	cp	r18, r1
    3c62:	31 05       	cpc	r19, r1
    3c64:	41 05       	cpc	r20, r1
    3c66:	51 05       	cpc	r21, r1
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <SPKR_beep+0x2c>
    3c6a:	5f 98       	cbi	0x0b, 7	; 11
    3c6c:	08 95       	ret

00003c6e <__SPKR_close>:
    3c6e:	82 30       	cpi	r24, 0x02	; 2
    3c70:	29 f4       	brne	.+10     	; 0x3c7c <__SPKR_close+0xe>
    3c72:	80 91 81 00 	lds	r24, 0x0081
    3c76:	8e 7f       	andi	r24, 0xFE	; 254
    3c78:	80 93 81 00 	sts	0x0081, r24
    3c7c:	80 91 2c 02 	lds	r24, 0x022C
    3c80:	81 30       	cpi	r24, 0x01	; 1
    3c82:	31 f4       	brne	.+12     	; 0x3c90 <__SPKR_close+0x22>
    3c84:	80 91 2d 02 	lds	r24, 0x022D
    3c88:	81 30       	cpi	r24, 0x01	; 1
    3c8a:	11 f4       	brne	.+4      	; 0x3c90 <__SPKR_close+0x22>
    3c8c:	00 00       	nop
    3c8e:	08 95       	ret
    3c90:	80 91 2c 02 	lds	r24, 0x022C
    3c94:	81 30       	cpi	r24, 0x01	; 1
    3c96:	21 f0       	breq	.+8      	; 0x3ca0 <__SPKR_close+0x32>
    3c98:	80 91 2d 02 	lds	r24, 0x022D
    3c9c:	81 30       	cpi	r24, 0x01	; 1
    3c9e:	11 f4       	brne	.+4      	; 0x3ca4 <__SPKR_close+0x36>
    3ca0:	5f 98       	cbi	0x0b, 7	; 11
    3ca2:	57 98       	cbi	0x0a, 7	; 10
    3ca4:	08 95       	ret

00003ca6 <STEPPER_set_decel_step_values>:
    3ca6:	ef 92       	push	r14
    3ca8:	ff 92       	push	r15
    3caa:	0f 93       	push	r16
    3cac:	1f 93       	push	r17
    3cae:	cf 93       	push	r28
    3cb0:	df 93       	push	r29
    3cb2:	eb 01       	movw	r28, r22
    3cb4:	88 23       	and	r24, r24
    3cb6:	21 f0       	breq	.+8      	; 0x3cc0 <STEPPER_set_decel_step_values+0x1a>
    3cb8:	81 30       	cpi	r24, 0x01	; 1
    3cba:	09 f0       	breq	.+2      	; 0x3cbe <STEPPER_set_decel_step_values+0x18>
    3cbc:	5a c0       	rjmp	.+180    	; 0x3d72 <STEPPER_set_decel_step_values+0xcc>
    3cbe:	2d c0       	rjmp	.+90     	; 0x3d1a <STEPPER_set_decel_step_values+0x74>
    3cc0:	9a 01       	movw	r18, r20
    3cc2:	40 e0       	ldi	r20, 0x00	; 0
    3cc4:	50 e0       	ldi	r21, 0x00	; 0
    3cc6:	ca 01       	movw	r24, r20
    3cc8:	b9 01       	movw	r22, r18
    3cca:	0e 94 aa 29 	call	0x5354	; 0x5354 <__mulsi3>
    3cce:	20 91 35 04 	lds	r18, 0x0435
    3cd2:	30 91 36 04 	lds	r19, 0x0436
    3cd6:	22 0f       	add	r18, r18
    3cd8:	33 1f       	adc	r19, r19
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	50 e0       	ldi	r21, 0x00	; 0
    3cde:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <__udivmodsi4>
    3ce2:	79 01       	movw	r14, r18
    3ce4:	8a 01       	movw	r16, r20
    3ce6:	a8 01       	movw	r20, r16
    3ce8:	97 01       	movw	r18, r14
    3cea:	22 0f       	add	r18, r18
    3cec:	33 1f       	adc	r19, r19
    3cee:	44 1f       	adc	r20, r20
    3cf0:	55 1f       	adc	r21, r21
    3cf2:	ce 01       	movw	r24, r28
    3cf4:	a0 e0       	ldi	r26, 0x00	; 0
    3cf6:	b0 e0       	ldi	r27, 0x00	; 0
    3cf8:	82 17       	cp	r24, r18
    3cfa:	93 07       	cpc	r25, r19
    3cfc:	a4 07       	cpc	r26, r20
    3cfe:	b5 07       	cpc	r27, r21
    3d00:	28 f0       	brcs	.+10     	; 0x3d0c <STEPPER_set_decel_step_values+0x66>
    3d02:	f0 92 42 04 	sts	0x0442, r15
    3d06:	e0 92 41 04 	sts	0x0441, r14
    3d0a:	33 c0       	rjmp	.+102    	; 0x3d72 <STEPPER_set_decel_step_values+0xcc>
    3d0c:	d6 95       	lsr	r29
    3d0e:	c7 95       	ror	r28
    3d10:	d0 93 42 04 	sts	0x0442, r29
    3d14:	c0 93 41 04 	sts	0x0441, r28
    3d18:	2c c0       	rjmp	.+88     	; 0x3d72 <STEPPER_set_decel_step_values+0xcc>
    3d1a:	9a 01       	movw	r18, r20
    3d1c:	40 e0       	ldi	r20, 0x00	; 0
    3d1e:	50 e0       	ldi	r21, 0x00	; 0
    3d20:	ca 01       	movw	r24, r20
    3d22:	b9 01       	movw	r22, r18
    3d24:	0e 94 aa 29 	call	0x5354	; 0x5354 <__mulsi3>
    3d28:	20 91 37 04 	lds	r18, 0x0437
    3d2c:	30 91 38 04 	lds	r19, 0x0438
    3d30:	22 0f       	add	r18, r18
    3d32:	33 1f       	adc	r19, r19
    3d34:	40 e0       	ldi	r20, 0x00	; 0
    3d36:	50 e0       	ldi	r21, 0x00	; 0
    3d38:	0e 94 dc 29 	call	0x53b8	; 0x53b8 <__udivmodsi4>
    3d3c:	79 01       	movw	r14, r18
    3d3e:	8a 01       	movw	r16, r20
    3d40:	a8 01       	movw	r20, r16
    3d42:	97 01       	movw	r18, r14
    3d44:	22 0f       	add	r18, r18
    3d46:	33 1f       	adc	r19, r19
    3d48:	44 1f       	adc	r20, r20
    3d4a:	55 1f       	adc	r21, r21
    3d4c:	ce 01       	movw	r24, r28
    3d4e:	a0 e0       	ldi	r26, 0x00	; 0
    3d50:	b0 e0       	ldi	r27, 0x00	; 0
    3d52:	82 17       	cp	r24, r18
    3d54:	93 07       	cpc	r25, r19
    3d56:	a4 07       	cpc	r26, r20
    3d58:	b5 07       	cpc	r27, r21
    3d5a:	28 f0       	brcs	.+10     	; 0x3d66 <STEPPER_set_decel_step_values+0xc0>
    3d5c:	f0 92 44 04 	sts	0x0444, r15
    3d60:	e0 92 43 04 	sts	0x0443, r14
    3d64:	06 c0       	rjmp	.+12     	; 0x3d72 <STEPPER_set_decel_step_values+0xcc>
    3d66:	d6 95       	lsr	r29
    3d68:	c7 95       	ror	r28
    3d6a:	d0 93 44 04 	sts	0x0444, r29
    3d6e:	c0 93 43 04 	sts	0x0443, r28
    3d72:	df 91       	pop	r29
    3d74:	cf 91       	pop	r28
    3d76:	1f 91       	pop	r17
    3d78:	0f 91       	pop	r16
    3d7a:	ff 90       	pop	r15
    3d7c:	ef 90       	pop	r14
    3d7e:	08 95       	ret

00003d80 <__TIMER0_COMPA_vect>:
    3d80:	0e 94 d0 1e 	call	0x3da0	; 0x3da0 <TMRSRVC_tick>
    3d84:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <STEPPER_clk>
    3d88:	0e 94 e9 1e 	call	0x3dd2	; 0x3dd2 <SPKR_beep_clk>
    3d8c:	08 95       	ret

00003d8e <__TMRSRVC_init>:
    3d8e:	84 b5       	in	r24, 0x24	; 36
    3d90:	82 60       	ori	r24, 0x02	; 2
    3d92:	84 bd       	out	0x24, r24	; 36
    3d94:	85 b5       	in	r24, 0x25	; 37
    3d96:	84 60       	ori	r24, 0x04	; 4
    3d98:	85 bd       	out	0x25, r24	; 37
    3d9a:	8e e4       	ldi	r24, 0x4E	; 78
    3d9c:	87 bd       	out	0x27, r24	; 39
    3d9e:	08 95       	ret

00003da0 <TMRSRVC_tick>:
    3da0:	88 e0       	ldi	r24, 0x08	; 8
    3da2:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    3da6:	88 23       	and	r24, r24
    3da8:	11 f4       	brne	.+4      	; 0x3dae <TMRSRVC_tick+0xe>
    3daa:	84 e0       	ldi	r24, 0x04	; 4
    3dac:	08 95       	ret
    3dae:	80 91 3d 02 	lds	r24, 0x023D
    3db2:	88 23       	and	r24, r24
    3db4:	11 f4       	brne	.+4      	; 0x3dba <TMRSRVC_tick+0x1a>
    3db6:	83 e0       	ldi	r24, 0x03	; 3
    3db8:	08 95       	ret
    3dba:	80 91 3c 02 	lds	r24, 0x023C
    3dbe:	88 23       	and	r24, r24
    3dc0:	11 f0       	breq	.+4      	; 0x3dc6 <TMRSRVC_tick+0x26>
    3dc2:	82 e0       	ldi	r24, 0x02	; 2
    3dc4:	08 95       	ret
    3dc6:	0e 94 82 21 	call	0x4304	; 0x4304 <TMRSRVC_process>
    3dca:	81 30       	cpi	r24, 0x01	; 1
    3dcc:	e1 f3       	breq	.-8      	; 0x3dc6 <TMRSRVC_tick+0x26>
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	08 95       	ret

00003dd2 <SPKR_beep_clk>:
    3dd2:	80 91 2d 02 	lds	r24, 0x022D
    3dd6:	81 30       	cpi	r24, 0x01	; 1
    3dd8:	11 f5       	brne	.+68     	; 0x3e1e <SPKR_beep_clk+0x4c>
    3dda:	80 91 36 02 	lds	r24, 0x0236
    3dde:	90 91 37 02 	lds	r25, 0x0237
    3de2:	20 91 38 02 	lds	r18, 0x0238
    3de6:	30 91 39 02 	lds	r19, 0x0239
    3dea:	28 0f       	add	r18, r24
    3dec:	39 1f       	adc	r19, r25
    3dee:	30 93 37 02 	sts	0x0237, r19
    3df2:	20 93 36 02 	sts	0x0236, r18
    3df6:	80 91 36 02 	lds	r24, 0x0236
    3dfa:	90 91 37 02 	lds	r25, 0x0237
    3dfe:	88 5e       	subi	r24, 0xE8	; 232
    3e00:	93 40       	sbci	r25, 0x03	; 3
    3e02:	6c f0       	brlt	.+26     	; 0x3e1e <SPKR_beep_clk+0x4c>
    3e04:	8b b1       	in	r24, 0x0b	; 11
    3e06:	80 58       	subi	r24, 0x80	; 128
    3e08:	8b b9       	out	0x0b, r24	; 11
    3e0a:	80 91 36 02 	lds	r24, 0x0236
    3e0e:	90 91 37 02 	lds	r25, 0x0237
    3e12:	88 5e       	subi	r24, 0xE8	; 232
    3e14:	93 40       	sbci	r25, 0x03	; 3
    3e16:	90 93 37 02 	sts	0x0237, r25
    3e1a:	80 93 36 02 	sts	0x0236, r24
    3e1e:	08 95       	ret

00003e20 <STEPPER_clk>:
    3e20:	87 e0       	ldi	r24, 0x07	; 7
    3e22:	0e 94 0f 15 	call	0x2a1e	; 0x2a1e <SYS_get_state>
    3e26:	81 30       	cpi	r24, 0x01	; 1
    3e28:	09 f0       	breq	.+2      	; 0x3e2c <STEPPER_clk+0xc>
    3e2a:	aa c0       	rjmp	.+340    	; 0x3f80 <STEPPER_clk+0x160>
    3e2c:	80 91 35 04 	lds	r24, 0x0435
    3e30:	90 91 36 04 	lds	r25, 0x0436
    3e34:	89 2b       	or	r24, r25
    3e36:	09 f1       	breq	.+66     	; 0x3e7a <STEPPER_clk+0x5a>
    3e38:	80 91 59 04 	lds	r24, 0x0459
    3e3c:	90 91 5a 04 	lds	r25, 0x045A
    3e40:	20 91 35 04 	lds	r18, 0x0435
    3e44:	30 91 36 04 	lds	r19, 0x0436
    3e48:	82 0f       	add	r24, r18
    3e4a:	93 1f       	adc	r25, r19
    3e4c:	90 93 5a 04 	sts	0x045A, r25
    3e50:	80 93 59 04 	sts	0x0459, r24
    3e54:	80 91 59 04 	lds	r24, 0x0459
    3e58:	90 91 5a 04 	lds	r25, 0x045A
    3e5c:	88 5e       	subi	r24, 0xE8	; 232
    3e5e:	93 40       	sbci	r25, 0x03	; 3
    3e60:	a4 f0       	brlt	.+40     	; 0x3e8a <STEPPER_clk+0x6a>
    3e62:	80 91 59 04 	lds	r24, 0x0459
    3e66:	90 91 5a 04 	lds	r25, 0x045A
    3e6a:	88 5e       	subi	r24, 0xE8	; 232
    3e6c:	93 40       	sbci	r25, 0x03	; 3
    3e6e:	90 93 5a 04 	sts	0x045A, r25
    3e72:	80 93 59 04 	sts	0x0459, r24
    3e76:	41 e0       	ldi	r20, 0x01	; 1
    3e78:	09 c0       	rjmp	.+18     	; 0x3e8c <STEPPER_clk+0x6c>
    3e7a:	80 91 2d 04 	lds	r24, 0x042D
    3e7e:	90 91 2e 04 	lds	r25, 0x042E
    3e82:	90 93 32 04 	sts	0x0432, r25
    3e86:	80 93 31 04 	sts	0x0431, r24
    3e8a:	40 e0       	ldi	r20, 0x00	; 0
    3e8c:	80 91 37 04 	lds	r24, 0x0437
    3e90:	90 91 38 04 	lds	r25, 0x0438
    3e94:	89 2b       	or	r24, r25
    3e96:	09 f1       	breq	.+66     	; 0x3eda <STEPPER_clk+0xba>
    3e98:	80 91 5b 04 	lds	r24, 0x045B
    3e9c:	90 91 5c 04 	lds	r25, 0x045C
    3ea0:	20 91 37 04 	lds	r18, 0x0437
    3ea4:	30 91 38 04 	lds	r19, 0x0438
    3ea8:	82 0f       	add	r24, r18
    3eaa:	93 1f       	adc	r25, r19
    3eac:	90 93 5c 04 	sts	0x045C, r25
    3eb0:	80 93 5b 04 	sts	0x045B, r24
    3eb4:	80 91 5b 04 	lds	r24, 0x045B
    3eb8:	90 91 5c 04 	lds	r25, 0x045C
    3ebc:	88 5e       	subi	r24, 0xE8	; 232
    3ebe:	93 40       	sbci	r25, 0x03	; 3
    3ec0:	a4 f0       	brlt	.+40     	; 0x3eea <STEPPER_clk+0xca>
    3ec2:	80 91 5b 04 	lds	r24, 0x045B
    3ec6:	90 91 5c 04 	lds	r25, 0x045C
    3eca:	88 5e       	subi	r24, 0xE8	; 232
    3ecc:	93 40       	sbci	r25, 0x03	; 3
    3ece:	90 93 5c 04 	sts	0x045C, r25
    3ed2:	80 93 5b 04 	sts	0x045B, r24
    3ed6:	61 e0       	ldi	r22, 0x01	; 1
    3ed8:	09 c0       	rjmp	.+18     	; 0x3eec <STEPPER_clk+0xcc>
    3eda:	80 91 2f 04 	lds	r24, 0x042F
    3ede:	90 91 30 04 	lds	r25, 0x0430
    3ee2:	90 93 34 04 	sts	0x0434, r25
    3ee6:	80 93 33 04 	sts	0x0433, r24
    3eea:	60 e0       	ldi	r22, 0x00	; 0
    3eec:	84 2f       	mov	r24, r20
    3eee:	0e 94 c1 1f 	call	0x3f82	; 0x3f82 <STEPPER_process_accel>
    3ef2:	80 91 55 04 	lds	r24, 0x0455
    3ef6:	90 91 56 04 	lds	r25, 0x0456
    3efa:	20 91 31 04 	lds	r18, 0x0431
    3efe:	30 91 32 04 	lds	r19, 0x0432
    3f02:	28 0f       	add	r18, r24
    3f04:	39 1f       	adc	r19, r25
    3f06:	30 93 56 04 	sts	0x0456, r19
    3f0a:	20 93 55 04 	sts	0x0455, r18
    3f0e:	80 91 55 04 	lds	r24, 0x0455
    3f12:	90 91 56 04 	lds	r25, 0x0456
    3f16:	88 5e       	subi	r24, 0xE8	; 232
    3f18:	93 40       	sbci	r25, 0x03	; 3
    3f1a:	14 f4       	brge	.+4      	; 0x3f20 <STEPPER_clk+0x100>
    3f1c:	40 e0       	ldi	r20, 0x00	; 0
    3f1e:	0b c0       	rjmp	.+22     	; 0x3f36 <STEPPER_clk+0x116>
    3f20:	80 91 55 04 	lds	r24, 0x0455
    3f24:	90 91 56 04 	lds	r25, 0x0456
    3f28:	88 5e       	subi	r24, 0xE8	; 232
    3f2a:	93 40       	sbci	r25, 0x03	; 3
    3f2c:	90 93 56 04 	sts	0x0456, r25
    3f30:	80 93 55 04 	sts	0x0455, r24
    3f34:	41 e0       	ldi	r20, 0x01	; 1
    3f36:	80 91 57 04 	lds	r24, 0x0457
    3f3a:	90 91 58 04 	lds	r25, 0x0458
    3f3e:	20 91 33 04 	lds	r18, 0x0433
    3f42:	30 91 34 04 	lds	r19, 0x0434
    3f46:	28 0f       	add	r18, r24
    3f48:	39 1f       	adc	r19, r25
    3f4a:	30 93 58 04 	sts	0x0458, r19
    3f4e:	20 93 57 04 	sts	0x0457, r18
    3f52:	80 91 57 04 	lds	r24, 0x0457
    3f56:	90 91 58 04 	lds	r25, 0x0458
    3f5a:	88 5e       	subi	r24, 0xE8	; 232
    3f5c:	93 40       	sbci	r25, 0x03	; 3
    3f5e:	14 f4       	brge	.+4      	; 0x3f64 <STEPPER_clk+0x144>
    3f60:	60 e0       	ldi	r22, 0x00	; 0
    3f62:	0b c0       	rjmp	.+22     	; 0x3f7a <STEPPER_clk+0x15a>
    3f64:	80 91 57 04 	lds	r24, 0x0457
    3f68:	90 91 58 04 	lds	r25, 0x0458
    3f6c:	88 5e       	subi	r24, 0xE8	; 232
    3f6e:	93 40       	sbci	r25, 0x03	; 3
    3f70:	90 93 58 04 	sts	0x0458, r25
    3f74:	80 93 57 04 	sts	0x0457, r24
    3f78:	61 e0       	ldi	r22, 0x01	; 1
    3f7a:	84 2f       	mov	r24, r20
    3f7c:	0e 94 06 20 	call	0x400c	; 0x400c <STEPPER_process_run_mode>
    3f80:	08 95       	ret

00003f82 <STEPPER_process_accel>:
    3f82:	88 23       	and	r24, r24
    3f84:	f1 f0       	breq	.+60     	; 0x3fc2 <STEPPER_process_accel+0x40>
    3f86:	20 91 2d 04 	lds	r18, 0x042D
    3f8a:	30 91 2e 04 	lds	r19, 0x042E
    3f8e:	80 91 31 04 	lds	r24, 0x0431
    3f92:	90 91 32 04 	lds	r25, 0x0432
    3f96:	28 1b       	sub	r18, r24
    3f98:	39 0b       	sbc	r19, r25
    3f9a:	12 16       	cp	r1, r18
    3f9c:	13 06       	cpc	r1, r19
    3f9e:	34 f4       	brge	.+12     	; 0x3fac <STEPPER_process_accel+0x2a>
    3fa0:	80 91 31 04 	lds	r24, 0x0431
    3fa4:	90 91 32 04 	lds	r25, 0x0432
    3fa8:	01 96       	adiw	r24, 0x01	; 1
    3faa:	07 c0       	rjmp	.+14     	; 0x3fba <STEPPER_process_accel+0x38>
    3fac:	23 2b       	or	r18, r19
    3fae:	49 f0       	breq	.+18     	; 0x3fc2 <STEPPER_process_accel+0x40>
    3fb0:	80 91 31 04 	lds	r24, 0x0431
    3fb4:	90 91 32 04 	lds	r25, 0x0432
    3fb8:	01 97       	sbiw	r24, 0x01	; 1
    3fba:	90 93 32 04 	sts	0x0432, r25
    3fbe:	80 93 31 04 	sts	0x0431, r24
    3fc2:	66 23       	and	r22, r22
    3fc4:	11 f1       	breq	.+68     	; 0x400a <STEPPER_process_accel+0x88>
    3fc6:	20 91 2f 04 	lds	r18, 0x042F
    3fca:	30 91 30 04 	lds	r19, 0x0430
    3fce:	80 91 33 04 	lds	r24, 0x0433
    3fd2:	90 91 34 04 	lds	r25, 0x0434
    3fd6:	28 1b       	sub	r18, r24
    3fd8:	39 0b       	sbc	r19, r25
    3fda:	12 16       	cp	r1, r18
    3fdc:	13 06       	cpc	r1, r19
    3fde:	54 f4       	brge	.+20     	; 0x3ff4 <STEPPER_process_accel+0x72>
    3fe0:	80 91 33 04 	lds	r24, 0x0433
    3fe4:	90 91 34 04 	lds	r25, 0x0434
    3fe8:	01 96       	adiw	r24, 0x01	; 1
    3fea:	90 93 34 04 	sts	0x0434, r25
    3fee:	80 93 33 04 	sts	0x0433, r24
    3ff2:	08 95       	ret
    3ff4:	23 2b       	or	r18, r19
    3ff6:	49 f0       	breq	.+18     	; 0x400a <STEPPER_process_accel+0x88>
    3ff8:	80 91 33 04 	lds	r24, 0x0433
    3ffc:	90 91 34 04 	lds	r25, 0x0434
    4000:	01 97       	sbiw	r24, 0x01	; 1
    4002:	90 93 34 04 	sts	0x0434, r25
    4006:	80 93 33 04 	sts	0x0433, r24
    400a:	08 95       	ret

0000400c <STEPPER_process_run_mode>:
    400c:	0f 93       	push	r16
    400e:	1f 93       	push	r17
    4010:	18 2f       	mov	r17, r24
    4012:	06 2f       	mov	r16, r22
    4014:	80 91 61 04 	lds	r24, 0x0461
    4018:	88 23       	and	r24, r24
    401a:	09 f0       	breq	.+2      	; 0x401e <STEPPER_process_run_mode+0x12>
    401c:	e7 c0       	rjmp	.+462    	; 0x41ec <STEPPER_process_run_mode+0x1e0>
    401e:	80 91 49 04 	lds	r24, 0x0449
    4022:	88 23       	and	r24, r24
    4024:	09 f0       	breq	.+2      	; 0x4028 <STEPPER_process_run_mode+0x1c>
    4026:	5a c0       	rjmp	.+180    	; 0x40dc <STEPPER_process_run_mode+0xd0>
    4028:	80 91 31 04 	lds	r24, 0x0431
    402c:	90 91 32 04 	lds	r25, 0x0432
    4030:	89 2b       	or	r24, r25
    4032:	e9 f4       	brne	.+58     	; 0x406e <STEPPER_process_run_mode+0x62>
    4034:	80 91 3e 02 	lds	r24, 0x023E
    4038:	83 7e       	andi	r24, 0xE3	; 227
    403a:	80 93 3e 02 	sts	0x023E, r24
    403e:	10 92 52 04 	sts	0x0452, r1
    4042:	80 91 5d 04 	lds	r24, 0x045D
    4046:	88 23       	and	r24, r24
    4048:	09 f4       	brne	.+2      	; 0x404c <STEPPER_process_run_mode+0x40>
    404a:	5d c0       	rjmp	.+186    	; 0x4106 <STEPPER_process_run_mode+0xfa>
    404c:	60 91 4b 04 	lds	r22, 0x044B
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	0e 94 5d 21 	call	0x42ba	; 0x42ba <STEPPER_stop>
    4056:	e0 91 5f 04 	lds	r30, 0x045F
    405a:	f0 91 60 04 	lds	r31, 0x0460
    405e:	30 97       	sbiw	r30, 0x00	; 0
    4060:	09 f4       	brne	.+2      	; 0x4064 <STEPPER_process_run_mode+0x58>
    4062:	51 c0       	rjmp	.+162    	; 0x4106 <STEPPER_process_run_mode+0xfa>
    4064:	81 e0       	ldi	r24, 0x01	; 1
    4066:	80 83       	st	Z, r24
    4068:	10 92 5d 04 	sts	0x045D, r1
    406c:	4c c0       	rjmp	.+152    	; 0x4106 <STEPPER_process_run_mode+0xfa>
    406e:	80 91 2b 04 	lds	r24, 0x042B
    4072:	81 30       	cpi	r24, 0x01	; 1
    4074:	41 f4       	brne	.+16     	; 0x4086 <STEPPER_process_run_mode+0x7a>
    4076:	80 91 3d 04 	lds	r24, 0x043D
    407a:	90 91 3e 04 	lds	r25, 0x043E
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	11 f4       	brne	.+4      	; 0x4086 <STEPPER_process_run_mode+0x7a>
    4082:	11 e0       	ldi	r17, 0x01	; 1
    4084:	02 c0       	rjmp	.+4      	; 0x408a <STEPPER_process_run_mode+0x7e>
    4086:	11 23       	and	r17, r17
    4088:	f1 f1       	breq	.+124    	; 0x4106 <STEPPER_process_run_mode+0xfa>
    408a:	e0 91 50 04 	lds	r30, 0x0450
    408e:	f0 e0       	ldi	r31, 0x00	; 0
    4090:	e4 5b       	subi	r30, 0xB4	; 180
    4092:	fe 4f       	sbci	r31, 0xFE	; 254
    4094:	90 91 3e 02 	lds	r25, 0x023E
    4098:	93 7e       	andi	r25, 0xE3	; 227
    409a:	80 81       	ld	r24, Z
    409c:	89 2b       	or	r24, r25
    409e:	80 93 3e 02 	sts	0x023E, r24
    40a2:	80 91 4e 04 	lds	r24, 0x044E
    40a6:	88 23       	and	r24, r24
    40a8:	21 f4       	brne	.+8      	; 0x40b2 <STEPPER_process_run_mode+0xa6>
    40aa:	80 91 50 04 	lds	r24, 0x0450
    40ae:	8f 5f       	subi	r24, 0xFF	; 255
    40b0:	03 c0       	rjmp	.+6      	; 0x40b8 <STEPPER_process_run_mode+0xac>
    40b2:	80 91 50 04 	lds	r24, 0x0450
    40b6:	81 50       	subi	r24, 0x01	; 1
    40b8:	80 93 50 04 	sts	0x0450, r24
    40bc:	80 91 50 04 	lds	r24, 0x0450
    40c0:	83 70       	andi	r24, 0x03	; 3
    40c2:	80 93 50 04 	sts	0x0450, r24
    40c6:	81 e0       	ldi	r24, 0x01	; 1
    40c8:	80 93 52 04 	sts	0x0452, r24
    40cc:	80 91 2b 04 	lds	r24, 0x042B
    40d0:	81 30       	cpi	r24, 0x01	; 1
    40d2:	c9 f4       	brne	.+50     	; 0x4106 <STEPPER_process_run_mode+0xfa>
    40d4:	80 e0       	ldi	r24, 0x00	; 0
    40d6:	0e 94 09 21 	call	0x4212	; 0x4212 <STEPPER_process_step_mode>
    40da:	15 c0       	rjmp	.+42     	; 0x4106 <STEPPER_process_run_mode+0xfa>
    40dc:	90 91 3e 02 	lds	r25, 0x023E
    40e0:	93 7e       	andi	r25, 0xE3	; 227
    40e2:	90 93 3e 02 	sts	0x023E, r25
    40e6:	e0 91 50 04 	lds	r30, 0x0450
    40ea:	f0 e0       	ldi	r31, 0x00	; 0
    40ec:	e4 5b       	subi	r30, 0xB4	; 180
    40ee:	fe 4f       	sbci	r31, 0xFE	; 254
    40f0:	80 81       	ld	r24, Z
    40f2:	89 2b       	or	r24, r25
    40f4:	80 93 3e 02 	sts	0x023E, r24
    40f8:	82 e0       	ldi	r24, 0x02	; 2
    40fa:	80 93 52 04 	sts	0x0452, r24
    40fe:	10 92 32 04 	sts	0x0432, r1
    4102:	10 92 31 04 	sts	0x0431, r1
    4106:	80 91 4a 04 	lds	r24, 0x044A
    410a:	88 23       	and	r24, r24
    410c:	09 f0       	breq	.+2      	; 0x4110 <STEPPER_process_run_mode+0x104>
    410e:	59 c0       	rjmp	.+178    	; 0x41c2 <STEPPER_process_run_mode+0x1b6>
    4110:	80 91 33 04 	lds	r24, 0x0433
    4114:	90 91 34 04 	lds	r25, 0x0434
    4118:	89 2b       	or	r24, r25
    411a:	e9 f4       	brne	.+58     	; 0x4156 <STEPPER_process_run_mode+0x14a>
    411c:	80 91 3e 02 	lds	r24, 0x023E
    4120:	8f 71       	andi	r24, 0x1F	; 31
    4122:	80 93 3e 02 	sts	0x023E, r24
    4126:	10 92 53 04 	sts	0x0453, r1
    412a:	80 91 5e 04 	lds	r24, 0x045E
    412e:	88 23       	and	r24, r24
    4130:	09 f4       	brne	.+2      	; 0x4134 <STEPPER_process_run_mode+0x128>
    4132:	5c c0       	rjmp	.+184    	; 0x41ec <STEPPER_process_run_mode+0x1e0>
    4134:	60 91 4c 04 	lds	r22, 0x044C
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	0e 94 5d 21 	call	0x42ba	; 0x42ba <STEPPER_stop>
    413e:	e0 91 5f 04 	lds	r30, 0x045F
    4142:	f0 91 60 04 	lds	r31, 0x0460
    4146:	30 97       	sbiw	r30, 0x00	; 0
    4148:	09 f4       	brne	.+2      	; 0x414c <STEPPER_process_run_mode+0x140>
    414a:	50 c0       	rjmp	.+160    	; 0x41ec <STEPPER_process_run_mode+0x1e0>
    414c:	81 e0       	ldi	r24, 0x01	; 1
    414e:	81 83       	std	Z+1, r24	; 0x01
    4150:	10 92 5e 04 	sts	0x045E, r1
    4154:	4b c0       	rjmp	.+150    	; 0x41ec <STEPPER_process_run_mode+0x1e0>
    4156:	80 91 2c 04 	lds	r24, 0x042C
    415a:	81 30       	cpi	r24, 0x01	; 1
    415c:	41 f4       	brne	.+16     	; 0x416e <STEPPER_process_run_mode+0x162>
    415e:	80 91 3f 04 	lds	r24, 0x043F
    4162:	90 91 40 04 	lds	r25, 0x0440
    4166:	01 97       	sbiw	r24, 0x01	; 1
    4168:	11 f4       	brne	.+4      	; 0x416e <STEPPER_process_run_mode+0x162>
    416a:	01 e0       	ldi	r16, 0x01	; 1
    416c:	02 c0       	rjmp	.+4      	; 0x4172 <STEPPER_process_run_mode+0x166>
    416e:	00 23       	and	r16, r16
    4170:	e9 f1       	breq	.+122    	; 0x41ec <STEPPER_process_run_mode+0x1e0>
    4172:	e0 91 51 04 	lds	r30, 0x0451
    4176:	f0 e0       	ldi	r31, 0x00	; 0
    4178:	e0 5b       	subi	r30, 0xB0	; 176
    417a:	fe 4f       	sbci	r31, 0xFE	; 254
    417c:	90 91 3e 02 	lds	r25, 0x023E
    4180:	9f 71       	andi	r25, 0x1F	; 31
    4182:	80 81       	ld	r24, Z
    4184:	89 2b       	or	r24, r25
    4186:	80 93 3e 02 	sts	0x023E, r24
    418a:	80 91 4f 04 	lds	r24, 0x044F
    418e:	88 23       	and	r24, r24
    4190:	21 f4       	brne	.+8      	; 0x419a <STEPPER_process_run_mode+0x18e>
    4192:	80 91 51 04 	lds	r24, 0x0451
    4196:	8f 5f       	subi	r24, 0xFF	; 255
    4198:	03 c0       	rjmp	.+6      	; 0x41a0 <STEPPER_process_run_mode+0x194>
    419a:	80 91 51 04 	lds	r24, 0x0451
    419e:	81 50       	subi	r24, 0x01	; 1
    41a0:	80 93 51 04 	sts	0x0451, r24
    41a4:	80 91 51 04 	lds	r24, 0x0451
    41a8:	83 70       	andi	r24, 0x03	; 3
    41aa:	80 93 51 04 	sts	0x0451, r24
    41ae:	81 e0       	ldi	r24, 0x01	; 1
    41b0:	80 93 53 04 	sts	0x0453, r24
    41b4:	80 91 2c 04 	lds	r24, 0x042C
    41b8:	81 30       	cpi	r24, 0x01	; 1
    41ba:	c1 f4       	brne	.+48     	; 0x41ec <STEPPER_process_run_mode+0x1e0>
    41bc:	0e 94 09 21 	call	0x4212	; 0x4212 <STEPPER_process_step_mode>
    41c0:	15 c0       	rjmp	.+42     	; 0x41ec <STEPPER_process_run_mode+0x1e0>
    41c2:	90 91 3e 02 	lds	r25, 0x023E
    41c6:	9f 71       	andi	r25, 0x1F	; 31
    41c8:	90 93 3e 02 	sts	0x023E, r25
    41cc:	e0 91 51 04 	lds	r30, 0x0451
    41d0:	f0 e0       	ldi	r31, 0x00	; 0
    41d2:	e0 5b       	subi	r30, 0xB0	; 176
    41d4:	fe 4f       	sbci	r31, 0xFE	; 254
    41d6:	80 81       	ld	r24, Z
    41d8:	89 2b       	or	r24, r25
    41da:	80 93 3e 02 	sts	0x023E, r24
    41de:	82 e0       	ldi	r24, 0x02	; 2
    41e0:	80 93 53 04 	sts	0x0453, r24
    41e4:	10 92 34 04 	sts	0x0434, r1
    41e8:	10 92 33 04 	sts	0x0433, r1
    41ec:	80 91 54 04 	lds	r24, 0x0454
    41f0:	88 23       	and	r24, r24
    41f2:	31 f4       	brne	.+12     	; 0x4200 <STEPPER_process_run_mode+0x1f4>
    41f4:	8e e3       	ldi	r24, 0x3E	; 62
    41f6:	92 e0       	ldi	r25, 0x02	; 2
    41f8:	61 2f       	mov	r22, r17
    41fa:	40 2f       	mov	r20, r16
    41fc:	0e 94 f0 21 	call	0x43e0	; 0x43e0 <STEPPER_process_pwm>
    4200:	88 b1       	in	r24, 0x08	; 8
    4202:	83 70       	andi	r24, 0x03	; 3
    4204:	90 91 3e 02 	lds	r25, 0x023E
    4208:	89 2b       	or	r24, r25
    420a:	88 b9       	out	0x08, r24	; 8
    420c:	1f 91       	pop	r17
    420e:	0f 91       	pop	r16
    4210:	08 95       	ret

00004212 <STEPPER_process_step_mode>:
    4212:	88 23       	and	r24, r24
    4214:	21 f0       	breq	.+8      	; 0x421e <STEPPER_process_step_mode+0xc>
    4216:	81 30       	cpi	r24, 0x01	; 1
    4218:	09 f0       	breq	.+2      	; 0x421c <STEPPER_process_step_mode+0xa>
    421a:	4e c0       	rjmp	.+156    	; 0x42b8 <STEPPER_process_step_mode+0xa6>
    421c:	27 c0       	rjmp	.+78     	; 0x426c <STEPPER_process_step_mode+0x5a>
    421e:	80 91 3d 04 	lds	r24, 0x043D
    4222:	90 91 3e 04 	lds	r25, 0x043E
    4226:	89 2b       	or	r24, r25
    4228:	49 f0       	breq	.+18     	; 0x423c <STEPPER_process_step_mode+0x2a>
    422a:	80 91 3d 04 	lds	r24, 0x043D
    422e:	90 91 3e 04 	lds	r25, 0x043E
    4232:	01 97       	sbiw	r24, 0x01	; 1
    4234:	90 93 3e 04 	sts	0x043E, r25
    4238:	80 93 3d 04 	sts	0x043D, r24
    423c:	80 91 5d 04 	lds	r24, 0x045D
    4240:	88 23       	and	r24, r24
    4242:	d1 f5       	brne	.+116    	; 0x42b8 <STEPPER_process_step_mode+0xa6>
    4244:	20 91 3d 04 	lds	r18, 0x043D
    4248:	30 91 3e 04 	lds	r19, 0x043E
    424c:	80 91 41 04 	lds	r24, 0x0441
    4250:	90 91 42 04 	lds	r25, 0x0442
    4254:	28 17       	cp	r18, r24
    4256:	39 07       	cpc	r19, r25
    4258:	79 f5       	brne	.+94     	; 0x42b8 <STEPPER_process_step_mode+0xa6>
    425a:	80 e0       	ldi	r24, 0x00	; 0
    425c:	60 e0       	ldi	r22, 0x00	; 0
    425e:	70 e0       	ldi	r23, 0x00	; 0
    4260:	0e 94 13 14 	call	0x2826	; 0x2826 <STEPPER_set_speed>
    4264:	81 e0       	ldi	r24, 0x01	; 1
    4266:	80 93 5d 04 	sts	0x045D, r24
    426a:	08 95       	ret
    426c:	80 91 3f 04 	lds	r24, 0x043F
    4270:	90 91 40 04 	lds	r25, 0x0440
    4274:	89 2b       	or	r24, r25
    4276:	49 f0       	breq	.+18     	; 0x428a <STEPPER_process_step_mode+0x78>
    4278:	80 91 3f 04 	lds	r24, 0x043F
    427c:	90 91 40 04 	lds	r25, 0x0440
    4280:	01 97       	sbiw	r24, 0x01	; 1
    4282:	90 93 40 04 	sts	0x0440, r25
    4286:	80 93 3f 04 	sts	0x043F, r24
    428a:	80 91 5e 04 	lds	r24, 0x045E
    428e:	88 23       	and	r24, r24
    4290:	99 f4       	brne	.+38     	; 0x42b8 <STEPPER_process_step_mode+0xa6>
    4292:	20 91 3f 04 	lds	r18, 0x043F
    4296:	30 91 40 04 	lds	r19, 0x0440
    429a:	80 91 43 04 	lds	r24, 0x0443
    429e:	90 91 44 04 	lds	r25, 0x0444
    42a2:	28 17       	cp	r18, r24
    42a4:	39 07       	cpc	r19, r25
    42a6:	41 f4       	brne	.+16     	; 0x42b8 <STEPPER_process_step_mode+0xa6>
    42a8:	81 e0       	ldi	r24, 0x01	; 1
    42aa:	60 e0       	ldi	r22, 0x00	; 0
    42ac:	70 e0       	ldi	r23, 0x00	; 0
    42ae:	0e 94 13 14 	call	0x2826	; 0x2826 <STEPPER_set_speed>
    42b2:	81 e0       	ldi	r24, 0x01	; 1
    42b4:	80 93 5e 04 	sts	0x045E, r24
    42b8:	08 95       	ret

000042ba <STEPPER_stop>:
    42ba:	0f 93       	push	r16
    42bc:	1f 93       	push	r17
    42be:	18 2f       	mov	r17, r24
    42c0:	06 2f       	mov	r16, r22
    42c2:	66 23       	and	r22, r22
    42c4:	49 f4       	brne	.+18     	; 0x42d8 <STEPPER_stop+0x1e>
    42c6:	60 e0       	ldi	r22, 0x00	; 0
    42c8:	70 e0       	ldi	r23, 0x00	; 0
    42ca:	0e 94 13 14 	call	0x2826	; 0x2826 <STEPPER_set_speed>
    42ce:	81 2f       	mov	r24, r17
    42d0:	60 e0       	ldi	r22, 0x00	; 0
    42d2:	70 e0       	ldi	r23, 0x00	; 0
    42d4:	0e 94 ad 1c 	call	0x395a	; 0x395a <STEPPER_set_steps>
    42d8:	81 e0       	ldi	r24, 0x01	; 1
    42da:	80 93 61 04 	sts	0x0461, r24
    42de:	11 30       	cpi	r17, 0x01	; 1
    42e0:	51 f0       	breq	.+20     	; 0x42f6 <STEPPER_stop+0x3c>
    42e2:	11 30       	cpi	r17, 0x01	; 1
    42e4:	18 f0       	brcs	.+6      	; 0x42ec <STEPPER_stop+0x32>
    42e6:	12 30       	cpi	r17, 0x02	; 2
    42e8:	41 f4       	brne	.+16     	; 0x42fa <STEPPER_stop+0x40>
    42ea:	03 c0       	rjmp	.+6      	; 0x42f2 <STEPPER_stop+0x38>
    42ec:	00 93 49 04 	sts	0x0449, r16
    42f0:	04 c0       	rjmp	.+8      	; 0x42fa <STEPPER_stop+0x40>
    42f2:	00 93 49 04 	sts	0x0449, r16
    42f6:	00 93 4a 04 	sts	0x044A, r16
    42fa:	10 92 61 04 	sts	0x0461, r1
    42fe:	1f 91       	pop	r17
    4300:	0f 91       	pop	r16
    4302:	08 95       	ret

00004304 <TMRSRVC_process>:
    4304:	ff 92       	push	r15
    4306:	0f 93       	push	r16
    4308:	1f 93       	push	r17
    430a:	cf 93       	push	r28
    430c:	df 93       	push	r29
    430e:	80 91 9b 04 	lds	r24, 0x049B
    4312:	88 23       	and	r24, r24
    4314:	09 f4       	brne	.+2      	; 0x4318 <TMRSRVC_process+0x14>
    4316:	59 c0       	rjmp	.+178    	; 0x43ca <TMRSRVC_process+0xc6>
    4318:	00 91 9c 04 	lds	r16, 0x049C
    431c:	10 91 9d 04 	lds	r17, 0x049D
    4320:	f8 01       	movw	r30, r16
    4322:	c0 81       	ld	r28, Z
    4324:	d1 81       	ldd	r29, Z+1	; 0x01
    4326:	8c 81       	ldd	r24, Y+4	; 0x04
    4328:	9d 81       	ldd	r25, Y+5	; 0x05
    432a:	01 97       	sbiw	r24, 0x01	; 1
    432c:	9d 83       	std	Y+5, r25	; 0x05
    432e:	8c 83       	std	Y+4, r24	; 0x04
    4330:	18 16       	cp	r1, r24
    4332:	19 06       	cpc	r1, r25
    4334:	0c f4       	brge	.+2      	; 0x4338 <TMRSRVC_process+0x34>
    4336:	49 c0       	rjmp	.+146    	; 0x43ca <TMRSRVC_process+0xc6>
    4338:	89 81       	ldd	r24, Y+1	; 0x01
    433a:	80 ff       	sbrs	r24, 0
    433c:	05 c0       	rjmp	.+10     	; 0x4348 <TMRSRVC_process+0x44>
    433e:	8e 81       	ldd	r24, Y+6	; 0x06
    4340:	88 23       	and	r24, r24
    4342:	11 f4       	brne	.+4      	; 0x4348 <TMRSRVC_process+0x44>
    4344:	81 e0       	ldi	r24, 0x01	; 1
    4346:	8e 83       	std	Y+6, r24	; 0x06
    4348:	89 81       	ldd	r24, Y+1	; 0x01
    434a:	81 ff       	sbrs	r24, 1
    434c:	03 c0       	rjmp	.+6      	; 0x4354 <TMRSRVC_process+0x50>
    434e:	ef 81       	ldd	r30, Y+7	; 0x07
    4350:	f8 85       	ldd	r31, Y+8	; 0x08
    4352:	09 95       	icall
    4354:	80 91 9b 04 	lds	r24, 0x049B
    4358:	82 30       	cpi	r24, 0x02	; 2
    435a:	a8 f0       	brcs	.+42     	; 0x4386 <TMRSRVC_process+0x82>
    435c:	f8 01       	movw	r30, r16
    435e:	82 81       	ldd	r24, Z+2	; 0x02
    4360:	93 81       	ldd	r25, Z+3	; 0x03
    4362:	90 93 9d 04 	sts	0x049D, r25
    4366:	80 93 9c 04 	sts	0x049C, r24
    436a:	13 82       	std	Z+3, r1	; 0x03
    436c:	12 82       	std	Z+2, r1	; 0x02
    436e:	e0 91 00 00 	lds	r30, 0x0000
    4372:	f0 91 01 00 	lds	r31, 0x0001
    4376:	84 81       	ldd	r24, Z+4	; 0x04
    4378:	95 81       	ldd	r25, Z+5	; 0x05
    437a:	18 16       	cp	r1, r24
    437c:	19 06       	cpc	r1, r25
    437e:	3c f0       	brlt	.+14     	; 0x438e <TMRSRVC_process+0x8a>
    4380:	ff 24       	eor	r15, r15
    4382:	f3 94       	inc	r15
    4384:	05 c0       	rjmp	.+10     	; 0x4390 <TMRSRVC_process+0x8c>
    4386:	10 92 9d 04 	sts	0x049D, r1
    438a:	10 92 9c 04 	sts	0x049C, r1
    438e:	ff 24       	eor	r15, r15
    4390:	80 91 9b 04 	lds	r24, 0x049B
    4394:	81 50       	subi	r24, 0x01	; 1
    4396:	80 93 9b 04 	sts	0x049B, r24
    439a:	80 91 9b 04 	lds	r24, 0x049B
    439e:	88 23       	and	r24, r24
    43a0:	11 f4       	brne	.+4      	; 0x43a6 <TMRSRVC_process+0xa2>
    43a2:	0e 94 ed 21 	call	0x43da	; 0x43da <TMRSRVC_stop>
    43a6:	89 81       	ldd	r24, Y+1	; 0x01
    43a8:	82 ff       	sbrs	r24, 2
    43aa:	08 c0       	rjmp	.+16     	; 0x43bc <TMRSRVC_process+0xb8>
    43ac:	8a 81       	ldd	r24, Y+2	; 0x02
    43ae:	9b 81       	ldd	r25, Y+3	; 0x03
    43b0:	9d 83       	std	Y+5, r25	; 0x05
    43b2:	8c 83       	std	Y+4, r24	; 0x04
    43b4:	c8 01       	movw	r24, r16
    43b6:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <TMRSRVC_insert>
    43ba:	08 c0       	rjmp	.+16     	; 0x43cc <TMRSRVC_process+0xc8>
    43bc:	c8 01       	movw	r24, r16
    43be:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <free>
    43c2:	89 81       	ldd	r24, Y+1	; 0x01
    43c4:	8f 7e       	andi	r24, 0xEF	; 239
    43c6:	89 83       	std	Y+1, r24	; 0x01
    43c8:	01 c0       	rjmp	.+2      	; 0x43cc <TMRSRVC_process+0xc8>
    43ca:	ff 24       	eor	r15, r15
    43cc:	8f 2d       	mov	r24, r15
    43ce:	df 91       	pop	r29
    43d0:	cf 91       	pop	r28
    43d2:	1f 91       	pop	r17
    43d4:	0f 91       	pop	r16
    43d6:	ff 90       	pop	r15
    43d8:	08 95       	ret

000043da <TMRSRVC_stop>:
    43da:	10 92 3d 02 	sts	0x023D, r1
    43de:	08 95       	ret

000043e0 <STEPPER_process_pwm>:
    43e0:	fc 01       	movw	r30, r24
    43e2:	80 91 52 04 	lds	r24, 0x0452
    43e6:	82 30       	cpi	r24, 0x02	; 2
    43e8:	69 f4       	brne	.+26     	; 0x4404 <STEPPER_process_pwm+0x24>
    43ea:	80 91 42 02 	lds	r24, 0x0242
    43ee:	91 e0       	ldi	r25, 0x01	; 1
    43f0:	89 27       	eor	r24, r25
    43f2:	80 93 42 02 	sts	0x0242, r24
    43f6:	88 23       	and	r24, r24
    43f8:	09 f0       	breq	.+2      	; 0x43fc <STEPPER_process_pwm+0x1c>
    43fa:	3e c0       	rjmp	.+124    	; 0x4478 <STEPPER_process_pwm+0x98>
    43fc:	80 81       	ld	r24, Z
    43fe:	83 7e       	andi	r24, 0xE3	; 227
    4400:	80 83       	st	Z, r24
    4402:	3a c0       	rjmp	.+116    	; 0x4478 <STEPPER_process_pwm+0x98>
    4404:	80 91 31 04 	lds	r24, 0x0431
    4408:	90 91 32 04 	lds	r25, 0x0432
    440c:	c3 97       	sbiw	r24, 0x33	; 51
    440e:	a4 f5       	brge	.+104    	; 0x4478 <STEPPER_process_pwm+0x98>
    4410:	66 23       	and	r22, r22
    4412:	d1 f0       	breq	.+52     	; 0x4448 <STEPPER_process_pwm+0x68>
    4414:	20 91 31 04 	lds	r18, 0x0431
    4418:	30 91 32 04 	lds	r19, 0x0432
    441c:	80 e6       	ldi	r24, 0x60	; 96
    441e:	90 e0       	ldi	r25, 0x00	; 0
    4420:	bc 01       	movw	r22, r24
    4422:	26 9f       	mul	r18, r22
    4424:	c0 01       	movw	r24, r0
    4426:	27 9f       	mul	r18, r23
    4428:	90 0d       	add	r25, r0
    442a:	36 9f       	mul	r19, r22
    442c:	90 0d       	add	r25, r0
    442e:	11 24       	eor	r1, r1
    4430:	88 0f       	add	r24, r24
    4432:	89 2f       	mov	r24, r25
    4434:	88 1f       	adc	r24, r24
    4436:	99 0b       	sbc	r25, r25
    4438:	90 93 46 04 	sts	0x0446, r25
    443c:	80 93 45 04 	sts	0x0445, r24
    4440:	81 e0       	ldi	r24, 0x01	; 1
    4442:	80 93 40 02 	sts	0x0240, r24
    4446:	18 c0       	rjmp	.+48     	; 0x4478 <STEPPER_process_pwm+0x98>
    4448:	80 91 40 02 	lds	r24, 0x0240
    444c:	88 23       	and	r24, r24
    444e:	a1 f0       	breq	.+40     	; 0x4478 <STEPPER_process_pwm+0x98>
    4450:	80 91 45 04 	lds	r24, 0x0445
    4454:	90 91 46 04 	lds	r25, 0x0446
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	90 93 46 04 	sts	0x0446, r25
    445e:	80 93 45 04 	sts	0x0445, r24
    4462:	80 91 45 04 	lds	r24, 0x0445
    4466:	90 91 46 04 	lds	r25, 0x0446
    446a:	89 2b       	or	r24, r25
    446c:	29 f4       	brne	.+10     	; 0x4478 <STEPPER_process_pwm+0x98>
    446e:	80 81       	ld	r24, Z
    4470:	83 7e       	andi	r24, 0xE3	; 227
    4472:	80 83       	st	Z, r24
    4474:	10 92 40 02 	sts	0x0240, r1
    4478:	80 91 53 04 	lds	r24, 0x0453
    447c:	82 30       	cpi	r24, 0x02	; 2
    447e:	69 f4       	brne	.+26     	; 0x449a <STEPPER_process_pwm+0xba>
    4480:	80 91 41 02 	lds	r24, 0x0241
    4484:	91 e0       	ldi	r25, 0x01	; 1
    4486:	89 27       	eor	r24, r25
    4488:	80 93 41 02 	sts	0x0241, r24
    448c:	88 23       	and	r24, r24
    448e:	09 f0       	breq	.+2      	; 0x4492 <STEPPER_process_pwm+0xb2>
    4490:	3e c0       	rjmp	.+124    	; 0x450e <STEPPER_process_pwm+0x12e>
    4492:	80 81       	ld	r24, Z
    4494:	8f 71       	andi	r24, 0x1F	; 31
    4496:	80 83       	st	Z, r24
    4498:	08 95       	ret
    449a:	80 91 33 04 	lds	r24, 0x0433
    449e:	90 91 34 04 	lds	r25, 0x0434
    44a2:	c3 97       	sbiw	r24, 0x33	; 51
    44a4:	a4 f5       	brge	.+104    	; 0x450e <STEPPER_process_pwm+0x12e>
    44a6:	44 23       	and	r20, r20
    44a8:	d1 f0       	breq	.+52     	; 0x44de <STEPPER_process_pwm+0xfe>
    44aa:	20 91 33 04 	lds	r18, 0x0433
    44ae:	30 91 34 04 	lds	r19, 0x0434
    44b2:	80 e6       	ldi	r24, 0x60	; 96
    44b4:	90 e0       	ldi	r25, 0x00	; 0
    44b6:	ac 01       	movw	r20, r24
    44b8:	24 9f       	mul	r18, r20
    44ba:	c0 01       	movw	r24, r0
    44bc:	25 9f       	mul	r18, r21
    44be:	90 0d       	add	r25, r0
    44c0:	34 9f       	mul	r19, r20
    44c2:	90 0d       	add	r25, r0
    44c4:	11 24       	eor	r1, r1
    44c6:	88 0f       	add	r24, r24
    44c8:	89 2f       	mov	r24, r25
    44ca:	88 1f       	adc	r24, r24
    44cc:	99 0b       	sbc	r25, r25
    44ce:	90 93 48 04 	sts	0x0448, r25
    44d2:	80 93 47 04 	sts	0x0447, r24
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    44d8:	80 93 3f 02 	sts	0x023F, r24
    44dc:	08 95       	ret
    44de:	80 91 3f 02 	lds	r24, 0x023F
    44e2:	88 23       	and	r24, r24
    44e4:	a1 f0       	breq	.+40     	; 0x450e <STEPPER_process_pwm+0x12e>
    44e6:	80 91 47 04 	lds	r24, 0x0447
    44ea:	90 91 48 04 	lds	r25, 0x0448
    44ee:	01 97       	sbiw	r24, 0x01	; 1
    44f0:	90 93 48 04 	sts	0x0448, r25
    44f4:	80 93 47 04 	sts	0x0447, r24
    44f8:	80 91 47 04 	lds	r24, 0x0447
    44fc:	90 91 48 04 	lds	r25, 0x0448
    4500:	89 2b       	or	r24, r25
    4502:	29 f4       	brne	.+10     	; 0x450e <STEPPER_process_pwm+0x12e>
    4504:	80 81       	ld	r24, Z
    4506:	8f 71       	andi	r24, 0x1F	; 31
    4508:	80 83       	st	Z, r24
    450a:	10 92 3f 02 	sts	0x023F, r1
    450e:	08 95       	ret

00004510 <__subsf3>:
    4510:	50 58       	subi	r21, 0x80	; 128

00004512 <__addsf3>:
    4512:	bb 27       	eor	r27, r27
    4514:	aa 27       	eor	r26, r26
    4516:	0e d0       	rcall	.+28     	; 0x4534 <__addsf3x>
    4518:	75 c1       	rjmp	.+746    	; 0x4804 <__fp_round>
    451a:	66 d1       	rcall	.+716    	; 0x47e8 <__fp_pscA>
    451c:	30 f0       	brcs	.+12     	; 0x452a <__addsf3+0x18>
    451e:	6b d1       	rcall	.+726    	; 0x47f6 <__fp_pscB>
    4520:	20 f0       	brcs	.+8      	; 0x452a <__addsf3+0x18>
    4522:	31 f4       	brne	.+12     	; 0x4530 <__addsf3+0x1e>
    4524:	9f 3f       	cpi	r25, 0xFF	; 255
    4526:	11 f4       	brne	.+4      	; 0x452c <__addsf3+0x1a>
    4528:	1e f4       	brtc	.+6      	; 0x4530 <__addsf3+0x1e>
    452a:	5b c1       	rjmp	.+694    	; 0x47e2 <__fp_nan>
    452c:	0e f4       	brtc	.+2      	; 0x4530 <__addsf3+0x1e>
    452e:	e0 95       	com	r30
    4530:	e7 fb       	bst	r30, 7
    4532:	51 c1       	rjmp	.+674    	; 0x47d6 <__fp_inf>

00004534 <__addsf3x>:
    4534:	e9 2f       	mov	r30, r25
    4536:	77 d1       	rcall	.+750    	; 0x4826 <__fp_split3>
    4538:	80 f3       	brcs	.-32     	; 0x451a <__addsf3+0x8>
    453a:	ba 17       	cp	r27, r26
    453c:	62 07       	cpc	r22, r18
    453e:	73 07       	cpc	r23, r19
    4540:	84 07       	cpc	r24, r20
    4542:	95 07       	cpc	r25, r21
    4544:	18 f0       	brcs	.+6      	; 0x454c <__addsf3x+0x18>
    4546:	71 f4       	brne	.+28     	; 0x4564 <__addsf3x+0x30>
    4548:	9e f5       	brtc	.+102    	; 0x45b0 <__addsf3x+0x7c>
    454a:	8f c1       	rjmp	.+798    	; 0x486a <__fp_zero>
    454c:	0e f4       	brtc	.+2      	; 0x4550 <__addsf3x+0x1c>
    454e:	e0 95       	com	r30
    4550:	0b 2e       	mov	r0, r27
    4552:	ba 2f       	mov	r27, r26
    4554:	a0 2d       	mov	r26, r0
    4556:	0b 01       	movw	r0, r22
    4558:	b9 01       	movw	r22, r18
    455a:	90 01       	movw	r18, r0
    455c:	0c 01       	movw	r0, r24
    455e:	ca 01       	movw	r24, r20
    4560:	a0 01       	movw	r20, r0
    4562:	11 24       	eor	r1, r1
    4564:	ff 27       	eor	r31, r31
    4566:	59 1b       	sub	r21, r25
    4568:	99 f0       	breq	.+38     	; 0x4590 <__addsf3x+0x5c>
    456a:	59 3f       	cpi	r21, 0xF9	; 249
    456c:	50 f4       	brcc	.+20     	; 0x4582 <__addsf3x+0x4e>
    456e:	50 3e       	cpi	r21, 0xE0	; 224
    4570:	68 f1       	brcs	.+90     	; 0x45cc <__addsf3x+0x98>
    4572:	1a 16       	cp	r1, r26
    4574:	f0 40       	sbci	r31, 0x00	; 0
    4576:	a2 2f       	mov	r26, r18
    4578:	23 2f       	mov	r18, r19
    457a:	34 2f       	mov	r19, r20
    457c:	44 27       	eor	r20, r20
    457e:	58 5f       	subi	r21, 0xF8	; 248
    4580:	f3 cf       	rjmp	.-26     	; 0x4568 <__addsf3x+0x34>
    4582:	46 95       	lsr	r20
    4584:	37 95       	ror	r19
    4586:	27 95       	ror	r18
    4588:	a7 95       	ror	r26
    458a:	f0 40       	sbci	r31, 0x00	; 0
    458c:	53 95       	inc	r21
    458e:	c9 f7       	brne	.-14     	; 0x4582 <__addsf3x+0x4e>
    4590:	7e f4       	brtc	.+30     	; 0x45b0 <__addsf3x+0x7c>
    4592:	1f 16       	cp	r1, r31
    4594:	ba 0b       	sbc	r27, r26
    4596:	62 0b       	sbc	r22, r18
    4598:	73 0b       	sbc	r23, r19
    459a:	84 0b       	sbc	r24, r20
    459c:	ba f0       	brmi	.+46     	; 0x45cc <__addsf3x+0x98>
    459e:	91 50       	subi	r25, 0x01	; 1
    45a0:	a1 f0       	breq	.+40     	; 0x45ca <__addsf3x+0x96>
    45a2:	ff 0f       	add	r31, r31
    45a4:	bb 1f       	adc	r27, r27
    45a6:	66 1f       	adc	r22, r22
    45a8:	77 1f       	adc	r23, r23
    45aa:	88 1f       	adc	r24, r24
    45ac:	c2 f7       	brpl	.-16     	; 0x459e <__addsf3x+0x6a>
    45ae:	0e c0       	rjmp	.+28     	; 0x45cc <__addsf3x+0x98>
    45b0:	ba 0f       	add	r27, r26
    45b2:	62 1f       	adc	r22, r18
    45b4:	73 1f       	adc	r23, r19
    45b6:	84 1f       	adc	r24, r20
    45b8:	48 f4       	brcc	.+18     	; 0x45cc <__addsf3x+0x98>
    45ba:	87 95       	ror	r24
    45bc:	77 95       	ror	r23
    45be:	67 95       	ror	r22
    45c0:	b7 95       	ror	r27
    45c2:	f7 95       	ror	r31
    45c4:	9e 3f       	cpi	r25, 0xFE	; 254
    45c6:	08 f0       	brcs	.+2      	; 0x45ca <__addsf3x+0x96>
    45c8:	b3 cf       	rjmp	.-154    	; 0x4530 <__addsf3+0x1e>
    45ca:	93 95       	inc	r25
    45cc:	88 0f       	add	r24, r24
    45ce:	08 f0       	brcs	.+2      	; 0x45d2 <__addsf3x+0x9e>
    45d0:	99 27       	eor	r25, r25
    45d2:	ee 0f       	add	r30, r30
    45d4:	97 95       	ror	r25
    45d6:	87 95       	ror	r24
    45d8:	08 95       	ret

000045da <__cmpsf2>:
    45da:	d9 d0       	rcall	.+434    	; 0x478e <__fp_cmp>
    45dc:	08 f4       	brcc	.+2      	; 0x45e0 <__cmpsf2+0x6>
    45de:	81 e0       	ldi	r24, 0x01	; 1
    45e0:	08 95       	ret

000045e2 <__divsf3>:
    45e2:	0c d0       	rcall	.+24     	; 0x45fc <__divsf3x>
    45e4:	0f c1       	rjmp	.+542    	; 0x4804 <__fp_round>
    45e6:	07 d1       	rcall	.+526    	; 0x47f6 <__fp_pscB>
    45e8:	40 f0       	brcs	.+16     	; 0x45fa <__divsf3+0x18>
    45ea:	fe d0       	rcall	.+508    	; 0x47e8 <__fp_pscA>
    45ec:	30 f0       	brcs	.+12     	; 0x45fa <__divsf3+0x18>
    45ee:	21 f4       	brne	.+8      	; 0x45f8 <__divsf3+0x16>
    45f0:	5f 3f       	cpi	r21, 0xFF	; 255
    45f2:	19 f0       	breq	.+6      	; 0x45fa <__divsf3+0x18>
    45f4:	f0 c0       	rjmp	.+480    	; 0x47d6 <__fp_inf>
    45f6:	51 11       	cpse	r21, r1
    45f8:	39 c1       	rjmp	.+626    	; 0x486c <__fp_szero>
    45fa:	f3 c0       	rjmp	.+486    	; 0x47e2 <__fp_nan>

000045fc <__divsf3x>:
    45fc:	14 d1       	rcall	.+552    	; 0x4826 <__fp_split3>
    45fe:	98 f3       	brcs	.-26     	; 0x45e6 <__divsf3+0x4>

00004600 <__divsf3_pse>:
    4600:	99 23       	and	r25, r25
    4602:	c9 f3       	breq	.-14     	; 0x45f6 <__divsf3+0x14>
    4604:	55 23       	and	r21, r21
    4606:	b1 f3       	breq	.-20     	; 0x45f4 <__divsf3+0x12>
    4608:	95 1b       	sub	r25, r21
    460a:	55 0b       	sbc	r21, r21
    460c:	bb 27       	eor	r27, r27
    460e:	aa 27       	eor	r26, r26
    4610:	62 17       	cp	r22, r18
    4612:	73 07       	cpc	r23, r19
    4614:	84 07       	cpc	r24, r20
    4616:	38 f0       	brcs	.+14     	; 0x4626 <__divsf3_pse+0x26>
    4618:	9f 5f       	subi	r25, 0xFF	; 255
    461a:	5f 4f       	sbci	r21, 0xFF	; 255
    461c:	22 0f       	add	r18, r18
    461e:	33 1f       	adc	r19, r19
    4620:	44 1f       	adc	r20, r20
    4622:	aa 1f       	adc	r26, r26
    4624:	a9 f3       	breq	.-22     	; 0x4610 <__divsf3_pse+0x10>
    4626:	33 d0       	rcall	.+102    	; 0x468e <__divsf3_pse+0x8e>
    4628:	0e 2e       	mov	r0, r30
    462a:	3a f0       	brmi	.+14     	; 0x463a <__divsf3_pse+0x3a>
    462c:	e0 e8       	ldi	r30, 0x80	; 128
    462e:	30 d0       	rcall	.+96     	; 0x4690 <__divsf3_pse+0x90>
    4630:	91 50       	subi	r25, 0x01	; 1
    4632:	50 40       	sbci	r21, 0x00	; 0
    4634:	e6 95       	lsr	r30
    4636:	00 1c       	adc	r0, r0
    4638:	ca f7       	brpl	.-14     	; 0x462c <__divsf3_pse+0x2c>
    463a:	29 d0       	rcall	.+82     	; 0x468e <__divsf3_pse+0x8e>
    463c:	fe 2f       	mov	r31, r30
    463e:	27 d0       	rcall	.+78     	; 0x468e <__divsf3_pse+0x8e>
    4640:	66 0f       	add	r22, r22
    4642:	77 1f       	adc	r23, r23
    4644:	88 1f       	adc	r24, r24
    4646:	bb 1f       	adc	r27, r27
    4648:	26 17       	cp	r18, r22
    464a:	37 07       	cpc	r19, r23
    464c:	48 07       	cpc	r20, r24
    464e:	ab 07       	cpc	r26, r27
    4650:	b0 e8       	ldi	r27, 0x80	; 128
    4652:	09 f0       	breq	.+2      	; 0x4656 <__divsf3_pse+0x56>
    4654:	bb 0b       	sbc	r27, r27
    4656:	80 2d       	mov	r24, r0
    4658:	bf 01       	movw	r22, r30
    465a:	ff 27       	eor	r31, r31
    465c:	93 58       	subi	r25, 0x83	; 131
    465e:	5f 4f       	sbci	r21, 0xFF	; 255
    4660:	2a f0       	brmi	.+10     	; 0x466c <__divsf3_pse+0x6c>
    4662:	9e 3f       	cpi	r25, 0xFE	; 254
    4664:	51 05       	cpc	r21, r1
    4666:	68 f0       	brcs	.+26     	; 0x4682 <__divsf3_pse+0x82>
    4668:	b6 c0       	rjmp	.+364    	; 0x47d6 <__fp_inf>
    466a:	00 c1       	rjmp	.+512    	; 0x486c <__fp_szero>
    466c:	5f 3f       	cpi	r21, 0xFF	; 255
    466e:	ec f3       	brlt	.-6      	; 0x466a <__divsf3_pse+0x6a>
    4670:	98 3e       	cpi	r25, 0xE8	; 232
    4672:	dc f3       	brlt	.-10     	; 0x466a <__divsf3_pse+0x6a>
    4674:	86 95       	lsr	r24
    4676:	77 95       	ror	r23
    4678:	67 95       	ror	r22
    467a:	b7 95       	ror	r27
    467c:	f7 95       	ror	r31
    467e:	9f 5f       	subi	r25, 0xFF	; 255
    4680:	c9 f7       	brne	.-14     	; 0x4674 <__divsf3_pse+0x74>
    4682:	88 0f       	add	r24, r24
    4684:	91 1d       	adc	r25, r1
    4686:	96 95       	lsr	r25
    4688:	87 95       	ror	r24
    468a:	97 f9       	bld	r25, 7
    468c:	08 95       	ret
    468e:	e1 e0       	ldi	r30, 0x01	; 1
    4690:	66 0f       	add	r22, r22
    4692:	77 1f       	adc	r23, r23
    4694:	88 1f       	adc	r24, r24
    4696:	bb 1f       	adc	r27, r27
    4698:	62 17       	cp	r22, r18
    469a:	73 07       	cpc	r23, r19
    469c:	84 07       	cpc	r24, r20
    469e:	ba 07       	cpc	r27, r26
    46a0:	20 f0       	brcs	.+8      	; 0x46aa <__divsf3_pse+0xaa>
    46a2:	62 1b       	sub	r22, r18
    46a4:	73 0b       	sbc	r23, r19
    46a6:	84 0b       	sbc	r24, r20
    46a8:	ba 0b       	sbc	r27, r26
    46aa:	ee 1f       	adc	r30, r30
    46ac:	88 f7       	brcc	.-30     	; 0x4690 <__divsf3_pse+0x90>
    46ae:	e0 95       	com	r30
    46b0:	08 95       	ret

000046b2 <__fixsfsi>:
    46b2:	04 d0       	rcall	.+8      	; 0x46bc <__fixunssfsi>
    46b4:	68 94       	set
    46b6:	b1 11       	cpse	r27, r1
    46b8:	d9 c0       	rjmp	.+434    	; 0x486c <__fp_szero>
    46ba:	08 95       	ret

000046bc <__fixunssfsi>:
    46bc:	bc d0       	rcall	.+376    	; 0x4836 <__fp_splitA>
    46be:	88 f0       	brcs	.+34     	; 0x46e2 <__fixunssfsi+0x26>
    46c0:	9f 57       	subi	r25, 0x7F	; 127
    46c2:	90 f0       	brcs	.+36     	; 0x46e8 <__fixunssfsi+0x2c>
    46c4:	b9 2f       	mov	r27, r25
    46c6:	99 27       	eor	r25, r25
    46c8:	b7 51       	subi	r27, 0x17	; 23
    46ca:	a0 f0       	brcs	.+40     	; 0x46f4 <__fixunssfsi+0x38>
    46cc:	d1 f0       	breq	.+52     	; 0x4702 <__fixunssfsi+0x46>
    46ce:	66 0f       	add	r22, r22
    46d0:	77 1f       	adc	r23, r23
    46d2:	88 1f       	adc	r24, r24
    46d4:	99 1f       	adc	r25, r25
    46d6:	1a f0       	brmi	.+6      	; 0x46de <__fixunssfsi+0x22>
    46d8:	ba 95       	dec	r27
    46da:	c9 f7       	brne	.-14     	; 0x46ce <__fixunssfsi+0x12>
    46dc:	12 c0       	rjmp	.+36     	; 0x4702 <__fixunssfsi+0x46>
    46de:	b1 30       	cpi	r27, 0x01	; 1
    46e0:	81 f0       	breq	.+32     	; 0x4702 <__fixunssfsi+0x46>
    46e2:	c3 d0       	rcall	.+390    	; 0x486a <__fp_zero>
    46e4:	b1 e0       	ldi	r27, 0x01	; 1
    46e6:	08 95       	ret
    46e8:	c0 c0       	rjmp	.+384    	; 0x486a <__fp_zero>
    46ea:	67 2f       	mov	r22, r23
    46ec:	78 2f       	mov	r23, r24
    46ee:	88 27       	eor	r24, r24
    46f0:	b8 5f       	subi	r27, 0xF8	; 248
    46f2:	39 f0       	breq	.+14     	; 0x4702 <__fixunssfsi+0x46>
    46f4:	b9 3f       	cpi	r27, 0xF9	; 249
    46f6:	cc f3       	brlt	.-14     	; 0x46ea <__fixunssfsi+0x2e>
    46f8:	86 95       	lsr	r24
    46fa:	77 95       	ror	r23
    46fc:	67 95       	ror	r22
    46fe:	b3 95       	inc	r27
    4700:	d9 f7       	brne	.-10     	; 0x46f8 <__fixunssfsi+0x3c>
    4702:	3e f4       	brtc	.+14     	; 0x4712 <__fixunssfsi+0x56>
    4704:	90 95       	com	r25
    4706:	80 95       	com	r24
    4708:	70 95       	com	r23
    470a:	61 95       	neg	r22
    470c:	7f 4f       	sbci	r23, 0xFF	; 255
    470e:	8f 4f       	sbci	r24, 0xFF	; 255
    4710:	9f 4f       	sbci	r25, 0xFF	; 255
    4712:	08 95       	ret

00004714 <__floatunsisf>:
    4714:	e8 94       	clt
    4716:	09 c0       	rjmp	.+18     	; 0x472a <__floatsisf+0x12>

00004718 <__floatsisf>:
    4718:	97 fb       	bst	r25, 7
    471a:	3e f4       	brtc	.+14     	; 0x472a <__floatsisf+0x12>
    471c:	90 95       	com	r25
    471e:	80 95       	com	r24
    4720:	70 95       	com	r23
    4722:	61 95       	neg	r22
    4724:	7f 4f       	sbci	r23, 0xFF	; 255
    4726:	8f 4f       	sbci	r24, 0xFF	; 255
    4728:	9f 4f       	sbci	r25, 0xFF	; 255
    472a:	99 23       	and	r25, r25
    472c:	a9 f0       	breq	.+42     	; 0x4758 <__floatsisf+0x40>
    472e:	f9 2f       	mov	r31, r25
    4730:	96 e9       	ldi	r25, 0x96	; 150
    4732:	bb 27       	eor	r27, r27
    4734:	93 95       	inc	r25
    4736:	f6 95       	lsr	r31
    4738:	87 95       	ror	r24
    473a:	77 95       	ror	r23
    473c:	67 95       	ror	r22
    473e:	b7 95       	ror	r27
    4740:	f1 11       	cpse	r31, r1
    4742:	f8 cf       	rjmp	.-16     	; 0x4734 <__floatsisf+0x1c>
    4744:	fa f4       	brpl	.+62     	; 0x4784 <__floatsisf+0x6c>
    4746:	bb 0f       	add	r27, r27
    4748:	11 f4       	brne	.+4      	; 0x474e <__floatsisf+0x36>
    474a:	60 ff       	sbrs	r22, 0
    474c:	1b c0       	rjmp	.+54     	; 0x4784 <__floatsisf+0x6c>
    474e:	6f 5f       	subi	r22, 0xFF	; 255
    4750:	7f 4f       	sbci	r23, 0xFF	; 255
    4752:	8f 4f       	sbci	r24, 0xFF	; 255
    4754:	9f 4f       	sbci	r25, 0xFF	; 255
    4756:	16 c0       	rjmp	.+44     	; 0x4784 <__floatsisf+0x6c>
    4758:	88 23       	and	r24, r24
    475a:	11 f0       	breq	.+4      	; 0x4760 <__floatsisf+0x48>
    475c:	96 e9       	ldi	r25, 0x96	; 150
    475e:	11 c0       	rjmp	.+34     	; 0x4782 <__floatsisf+0x6a>
    4760:	77 23       	and	r23, r23
    4762:	21 f0       	breq	.+8      	; 0x476c <__floatsisf+0x54>
    4764:	9e e8       	ldi	r25, 0x8E	; 142
    4766:	87 2f       	mov	r24, r23
    4768:	76 2f       	mov	r23, r22
    476a:	05 c0       	rjmp	.+10     	; 0x4776 <__floatsisf+0x5e>
    476c:	66 23       	and	r22, r22
    476e:	71 f0       	breq	.+28     	; 0x478c <__floatsisf+0x74>
    4770:	96 e8       	ldi	r25, 0x86	; 134
    4772:	86 2f       	mov	r24, r22
    4774:	70 e0       	ldi	r23, 0x00	; 0
    4776:	60 e0       	ldi	r22, 0x00	; 0
    4778:	2a f0       	brmi	.+10     	; 0x4784 <__floatsisf+0x6c>
    477a:	9a 95       	dec	r25
    477c:	66 0f       	add	r22, r22
    477e:	77 1f       	adc	r23, r23
    4780:	88 1f       	adc	r24, r24
    4782:	da f7       	brpl	.-10     	; 0x477a <__floatsisf+0x62>
    4784:	88 0f       	add	r24, r24
    4786:	96 95       	lsr	r25
    4788:	87 95       	ror	r24
    478a:	97 f9       	bld	r25, 7
    478c:	08 95       	ret

0000478e <__fp_cmp>:
    478e:	99 0f       	add	r25, r25
    4790:	00 08       	sbc	r0, r0
    4792:	55 0f       	add	r21, r21
    4794:	aa 0b       	sbc	r26, r26
    4796:	e0 e8       	ldi	r30, 0x80	; 128
    4798:	fe ef       	ldi	r31, 0xFE	; 254
    479a:	16 16       	cp	r1, r22
    479c:	17 06       	cpc	r1, r23
    479e:	e8 07       	cpc	r30, r24
    47a0:	f9 07       	cpc	r31, r25
    47a2:	c0 f0       	brcs	.+48     	; 0x47d4 <__fp_cmp+0x46>
    47a4:	12 16       	cp	r1, r18
    47a6:	13 06       	cpc	r1, r19
    47a8:	e4 07       	cpc	r30, r20
    47aa:	f5 07       	cpc	r31, r21
    47ac:	98 f0       	brcs	.+38     	; 0x47d4 <__fp_cmp+0x46>
    47ae:	62 1b       	sub	r22, r18
    47b0:	73 0b       	sbc	r23, r19
    47b2:	84 0b       	sbc	r24, r20
    47b4:	95 0b       	sbc	r25, r21
    47b6:	39 f4       	brne	.+14     	; 0x47c6 <__fp_cmp+0x38>
    47b8:	0a 26       	eor	r0, r26
    47ba:	61 f0       	breq	.+24     	; 0x47d4 <__fp_cmp+0x46>
    47bc:	23 2b       	or	r18, r19
    47be:	24 2b       	or	r18, r20
    47c0:	25 2b       	or	r18, r21
    47c2:	21 f4       	brne	.+8      	; 0x47cc <__fp_cmp+0x3e>
    47c4:	08 95       	ret
    47c6:	0a 26       	eor	r0, r26
    47c8:	09 f4       	brne	.+2      	; 0x47cc <__fp_cmp+0x3e>
    47ca:	a1 40       	sbci	r26, 0x01	; 1
    47cc:	a6 95       	lsr	r26
    47ce:	8f ef       	ldi	r24, 0xFF	; 255
    47d0:	81 1d       	adc	r24, r1
    47d2:	81 1d       	adc	r24, r1
    47d4:	08 95       	ret

000047d6 <__fp_inf>:
    47d6:	97 f9       	bld	r25, 7
    47d8:	9f 67       	ori	r25, 0x7F	; 127
    47da:	80 e8       	ldi	r24, 0x80	; 128
    47dc:	70 e0       	ldi	r23, 0x00	; 0
    47de:	60 e0       	ldi	r22, 0x00	; 0
    47e0:	08 95       	ret

000047e2 <__fp_nan>:
    47e2:	9f ef       	ldi	r25, 0xFF	; 255
    47e4:	80 ec       	ldi	r24, 0xC0	; 192
    47e6:	08 95       	ret

000047e8 <__fp_pscA>:
    47e8:	00 24       	eor	r0, r0
    47ea:	0a 94       	dec	r0
    47ec:	16 16       	cp	r1, r22
    47ee:	17 06       	cpc	r1, r23
    47f0:	18 06       	cpc	r1, r24
    47f2:	09 06       	cpc	r0, r25
    47f4:	08 95       	ret

000047f6 <__fp_pscB>:
    47f6:	00 24       	eor	r0, r0
    47f8:	0a 94       	dec	r0
    47fa:	12 16       	cp	r1, r18
    47fc:	13 06       	cpc	r1, r19
    47fe:	14 06       	cpc	r1, r20
    4800:	05 06       	cpc	r0, r21
    4802:	08 95       	ret

00004804 <__fp_round>:
    4804:	09 2e       	mov	r0, r25
    4806:	03 94       	inc	r0
    4808:	00 0c       	add	r0, r0
    480a:	11 f4       	brne	.+4      	; 0x4810 <__fp_round+0xc>
    480c:	88 23       	and	r24, r24
    480e:	52 f0       	brmi	.+20     	; 0x4824 <__fp_round+0x20>
    4810:	bb 0f       	add	r27, r27
    4812:	40 f4       	brcc	.+16     	; 0x4824 <__fp_round+0x20>
    4814:	bf 2b       	or	r27, r31
    4816:	11 f4       	brne	.+4      	; 0x481c <__fp_round+0x18>
    4818:	60 ff       	sbrs	r22, 0
    481a:	04 c0       	rjmp	.+8      	; 0x4824 <__fp_round+0x20>
    481c:	6f 5f       	subi	r22, 0xFF	; 255
    481e:	7f 4f       	sbci	r23, 0xFF	; 255
    4820:	8f 4f       	sbci	r24, 0xFF	; 255
    4822:	9f 4f       	sbci	r25, 0xFF	; 255
    4824:	08 95       	ret

00004826 <__fp_split3>:
    4826:	57 fd       	sbrc	r21, 7
    4828:	90 58       	subi	r25, 0x80	; 128
    482a:	44 0f       	add	r20, r20
    482c:	55 1f       	adc	r21, r21
    482e:	59 f0       	breq	.+22     	; 0x4846 <__fp_splitA+0x10>
    4830:	5f 3f       	cpi	r21, 0xFF	; 255
    4832:	71 f0       	breq	.+28     	; 0x4850 <__fp_splitA+0x1a>
    4834:	47 95       	ror	r20

00004836 <__fp_splitA>:
    4836:	88 0f       	add	r24, r24
    4838:	97 fb       	bst	r25, 7
    483a:	99 1f       	adc	r25, r25
    483c:	61 f0       	breq	.+24     	; 0x4856 <__fp_splitA+0x20>
    483e:	9f 3f       	cpi	r25, 0xFF	; 255
    4840:	79 f0       	breq	.+30     	; 0x4860 <__fp_splitA+0x2a>
    4842:	87 95       	ror	r24
    4844:	08 95       	ret
    4846:	12 16       	cp	r1, r18
    4848:	13 06       	cpc	r1, r19
    484a:	14 06       	cpc	r1, r20
    484c:	55 1f       	adc	r21, r21
    484e:	f2 cf       	rjmp	.-28     	; 0x4834 <__fp_split3+0xe>
    4850:	46 95       	lsr	r20
    4852:	f1 df       	rcall	.-30     	; 0x4836 <__fp_splitA>
    4854:	08 c0       	rjmp	.+16     	; 0x4866 <__fp_splitA+0x30>
    4856:	16 16       	cp	r1, r22
    4858:	17 06       	cpc	r1, r23
    485a:	18 06       	cpc	r1, r24
    485c:	99 1f       	adc	r25, r25
    485e:	f1 cf       	rjmp	.-30     	; 0x4842 <__fp_splitA+0xc>
    4860:	86 95       	lsr	r24
    4862:	71 05       	cpc	r23, r1
    4864:	61 05       	cpc	r22, r1
    4866:	08 94       	sec
    4868:	08 95       	ret

0000486a <__fp_zero>:
    486a:	e8 94       	clt

0000486c <__fp_szero>:
    486c:	bb 27       	eor	r27, r27
    486e:	66 27       	eor	r22, r22
    4870:	77 27       	eor	r23, r23
    4872:	cb 01       	movw	r24, r22
    4874:	97 f9       	bld	r25, 7
    4876:	08 95       	ret

00004878 <__gesf2>:
    4878:	8a df       	rcall	.-236    	; 0x478e <__fp_cmp>
    487a:	08 f4       	brcc	.+2      	; 0x487e <__gesf2+0x6>
    487c:	8f ef       	ldi	r24, 0xFF	; 255
    487e:	08 95       	ret

00004880 <lrint>:
    4880:	da df       	rcall	.-76     	; 0x4836 <__fp_splitA>
    4882:	a8 f1       	brcs	.+106    	; 0x48ee <lrint+0x6e>
    4884:	9e 57       	subi	r25, 0x7E	; 126
    4886:	a8 f1       	brcs	.+106    	; 0x48f2 <lrint+0x72>
    4888:	98 51       	subi	r25, 0x18	; 24
    488a:	60 f0       	brcs	.+24     	; 0x48a4 <lrint+0x24>
    488c:	39 f1       	breq	.+78     	; 0x48dc <lrint+0x5c>
    488e:	98 30       	cpi	r25, 0x08	; 8
    4890:	70 f5       	brcc	.+92     	; 0x48ee <lrint+0x6e>
    4892:	09 2e       	mov	r0, r25
    4894:	99 27       	eor	r25, r25
    4896:	66 0f       	add	r22, r22
    4898:	77 1f       	adc	r23, r23
    489a:	88 1f       	adc	r24, r24
    489c:	99 1f       	adc	r25, r25
    489e:	0a 94       	dec	r0
    48a0:	d1 f7       	brne	.-12     	; 0x4896 <lrint+0x16>
    48a2:	1c c0       	rjmp	.+56     	; 0x48dc <lrint+0x5c>
    48a4:	bb 27       	eor	r27, r27
    48a6:	99 3f       	cpi	r25, 0xF9	; 249
    48a8:	4c f4       	brge	.+18     	; 0x48bc <lrint+0x3c>
    48aa:	b1 11       	cpse	r27, r1
    48ac:	b1 e0       	ldi	r27, 0x01	; 1
    48ae:	b6 2b       	or	r27, r22
    48b0:	67 2f       	mov	r22, r23
    48b2:	78 2f       	mov	r23, r24
    48b4:	88 27       	eor	r24, r24
    48b6:	98 5f       	subi	r25, 0xF8	; 248
    48b8:	b1 f7       	brne	.-20     	; 0x48a6 <lrint+0x26>
    48ba:	08 c0       	rjmp	.+16     	; 0x48cc <lrint+0x4c>
    48bc:	86 95       	lsr	r24
    48be:	77 95       	ror	r23
    48c0:	67 95       	ror	r22
    48c2:	b7 95       	ror	r27
    48c4:	08 f4       	brcc	.+2      	; 0x48c8 <lrint+0x48>
    48c6:	b1 60       	ori	r27, 0x01	; 1
    48c8:	93 95       	inc	r25
    48ca:	c1 f7       	brne	.-16     	; 0x48bc <lrint+0x3c>
    48cc:	bb 0f       	add	r27, r27
    48ce:	30 f4       	brcc	.+12     	; 0x48dc <lrint+0x5c>
    48d0:	11 f4       	brne	.+4      	; 0x48d6 <lrint+0x56>
    48d2:	60 ff       	sbrs	r22, 0
    48d4:	03 c0       	rjmp	.+6      	; 0x48dc <lrint+0x5c>
    48d6:	6f 5f       	subi	r22, 0xFF	; 255
    48d8:	7f 4f       	sbci	r23, 0xFF	; 255
    48da:	8f 4f       	sbci	r24, 0xFF	; 255
    48dc:	3e f4       	brtc	.+14     	; 0x48ec <lrint+0x6c>
    48de:	90 95       	com	r25
    48e0:	80 95       	com	r24
    48e2:	70 95       	com	r23
    48e4:	61 95       	neg	r22
    48e6:	7f 4f       	sbci	r23, 0xFF	; 255
    48e8:	8f 4f       	sbci	r24, 0xFF	; 255
    48ea:	9f 4f       	sbci	r25, 0xFF	; 255
    48ec:	08 95       	ret
    48ee:	68 94       	set
    48f0:	bd cf       	rjmp	.-134    	; 0x486c <__fp_szero>
    48f2:	bb cf       	rjmp	.-138    	; 0x486a <__fp_zero>

000048f4 <__mulsf3>:
    48f4:	0b d0       	rcall	.+22     	; 0x490c <__mulsf3x>
    48f6:	86 cf       	rjmp	.-244    	; 0x4804 <__fp_round>
    48f8:	77 df       	rcall	.-274    	; 0x47e8 <__fp_pscA>
    48fa:	28 f0       	brcs	.+10     	; 0x4906 <__mulsf3+0x12>
    48fc:	7c df       	rcall	.-264    	; 0x47f6 <__fp_pscB>
    48fe:	18 f0       	brcs	.+6      	; 0x4906 <__mulsf3+0x12>
    4900:	95 23       	and	r25, r21
    4902:	09 f0       	breq	.+2      	; 0x4906 <__mulsf3+0x12>
    4904:	68 cf       	rjmp	.-304    	; 0x47d6 <__fp_inf>
    4906:	6d cf       	rjmp	.-294    	; 0x47e2 <__fp_nan>
    4908:	11 24       	eor	r1, r1
    490a:	b0 cf       	rjmp	.-160    	; 0x486c <__fp_szero>

0000490c <__mulsf3x>:
    490c:	8c df       	rcall	.-232    	; 0x4826 <__fp_split3>
    490e:	a0 f3       	brcs	.-24     	; 0x48f8 <__mulsf3+0x4>

00004910 <__mulsf3_pse>:
    4910:	95 9f       	mul	r25, r21
    4912:	d1 f3       	breq	.-12     	; 0x4908 <__mulsf3+0x14>
    4914:	95 0f       	add	r25, r21
    4916:	50 e0       	ldi	r21, 0x00	; 0
    4918:	55 1f       	adc	r21, r21
    491a:	62 9f       	mul	r22, r18
    491c:	f0 01       	movw	r30, r0
    491e:	72 9f       	mul	r23, r18
    4920:	bb 27       	eor	r27, r27
    4922:	f0 0d       	add	r31, r0
    4924:	b1 1d       	adc	r27, r1
    4926:	63 9f       	mul	r22, r19
    4928:	aa 27       	eor	r26, r26
    492a:	f0 0d       	add	r31, r0
    492c:	b1 1d       	adc	r27, r1
    492e:	aa 1f       	adc	r26, r26
    4930:	64 9f       	mul	r22, r20
    4932:	66 27       	eor	r22, r22
    4934:	b0 0d       	add	r27, r0
    4936:	a1 1d       	adc	r26, r1
    4938:	66 1f       	adc	r22, r22
    493a:	82 9f       	mul	r24, r18
    493c:	22 27       	eor	r18, r18
    493e:	b0 0d       	add	r27, r0
    4940:	a1 1d       	adc	r26, r1
    4942:	62 1f       	adc	r22, r18
    4944:	73 9f       	mul	r23, r19
    4946:	b0 0d       	add	r27, r0
    4948:	a1 1d       	adc	r26, r1
    494a:	62 1f       	adc	r22, r18
    494c:	83 9f       	mul	r24, r19
    494e:	a0 0d       	add	r26, r0
    4950:	61 1d       	adc	r22, r1
    4952:	22 1f       	adc	r18, r18
    4954:	74 9f       	mul	r23, r20
    4956:	33 27       	eor	r19, r19
    4958:	a0 0d       	add	r26, r0
    495a:	61 1d       	adc	r22, r1
    495c:	23 1f       	adc	r18, r19
    495e:	84 9f       	mul	r24, r20
    4960:	60 0d       	add	r22, r0
    4962:	21 1d       	adc	r18, r1
    4964:	82 2f       	mov	r24, r18
    4966:	76 2f       	mov	r23, r22
    4968:	6a 2f       	mov	r22, r26
    496a:	11 24       	eor	r1, r1
    496c:	9f 57       	subi	r25, 0x7F	; 127
    496e:	50 40       	sbci	r21, 0x00	; 0
    4970:	8a f0       	brmi	.+34     	; 0x4994 <__mulsf3_pse+0x84>
    4972:	e1 f0       	breq	.+56     	; 0x49ac <__mulsf3_pse+0x9c>
    4974:	88 23       	and	r24, r24
    4976:	4a f0       	brmi	.+18     	; 0x498a <__mulsf3_pse+0x7a>
    4978:	ee 0f       	add	r30, r30
    497a:	ff 1f       	adc	r31, r31
    497c:	bb 1f       	adc	r27, r27
    497e:	66 1f       	adc	r22, r22
    4980:	77 1f       	adc	r23, r23
    4982:	88 1f       	adc	r24, r24
    4984:	91 50       	subi	r25, 0x01	; 1
    4986:	50 40       	sbci	r21, 0x00	; 0
    4988:	a9 f7       	brne	.-22     	; 0x4974 <__mulsf3_pse+0x64>
    498a:	9e 3f       	cpi	r25, 0xFE	; 254
    498c:	51 05       	cpc	r21, r1
    498e:	70 f0       	brcs	.+28     	; 0x49ac <__mulsf3_pse+0x9c>
    4990:	22 cf       	rjmp	.-444    	; 0x47d6 <__fp_inf>
    4992:	6c cf       	rjmp	.-296    	; 0x486c <__fp_szero>
    4994:	5f 3f       	cpi	r21, 0xFF	; 255
    4996:	ec f3       	brlt	.-6      	; 0x4992 <__mulsf3_pse+0x82>
    4998:	98 3e       	cpi	r25, 0xE8	; 232
    499a:	dc f3       	brlt	.-10     	; 0x4992 <__mulsf3_pse+0x82>
    499c:	86 95       	lsr	r24
    499e:	77 95       	ror	r23
    49a0:	67 95       	ror	r22
    49a2:	b7 95       	ror	r27
    49a4:	f7 95       	ror	r31
    49a6:	e7 95       	ror	r30
    49a8:	9f 5f       	subi	r25, 0xFF	; 255
    49aa:	c1 f7       	brne	.-16     	; 0x499c <__mulsf3_pse+0x8c>
    49ac:	fe 2b       	or	r31, r30
    49ae:	88 0f       	add	r24, r24
    49b0:	91 1d       	adc	r25, r1
    49b2:	96 95       	lsr	r25
    49b4:	87 95       	ror	r24
    49b6:	97 f9       	bld	r25, 7
    49b8:	08 95       	ret

000049ba <pow>:
    49ba:	fa 01       	movw	r30, r20
    49bc:	ee 0f       	add	r30, r30
    49be:	ff 1f       	adc	r31, r31
    49c0:	30 96       	adiw	r30, 0x00	; 0
    49c2:	21 05       	cpc	r18, r1
    49c4:	31 05       	cpc	r19, r1
    49c6:	99 f1       	breq	.+102    	; 0x4a2e <pow+0x74>
    49c8:	61 15       	cp	r22, r1
    49ca:	71 05       	cpc	r23, r1
    49cc:	61 f4       	brne	.+24     	; 0x49e6 <pow+0x2c>
    49ce:	80 38       	cpi	r24, 0x80	; 128
    49d0:	bf e3       	ldi	r27, 0x3F	; 63
    49d2:	9b 07       	cpc	r25, r27
    49d4:	49 f1       	breq	.+82     	; 0x4a28 <pow+0x6e>
    49d6:	68 94       	set
    49d8:	90 38       	cpi	r25, 0x80	; 128
    49da:	81 05       	cpc	r24, r1
    49dc:	61 f0       	breq	.+24     	; 0x49f6 <pow+0x3c>
    49de:	80 38       	cpi	r24, 0x80	; 128
    49e0:	bf ef       	ldi	r27, 0xFF	; 255
    49e2:	9b 07       	cpc	r25, r27
    49e4:	41 f0       	breq	.+16     	; 0x49f6 <pow+0x3c>
    49e6:	99 23       	and	r25, r25
    49e8:	42 f5       	brpl	.+80     	; 0x4a3a <pow+0x80>
    49ea:	ff 3f       	cpi	r31, 0xFF	; 255
    49ec:	e1 05       	cpc	r30, r1
    49ee:	31 05       	cpc	r19, r1
    49f0:	21 05       	cpc	r18, r1
    49f2:	11 f1       	breq	.+68     	; 0x4a38 <pow+0x7e>
    49f4:	e8 94       	clt
    49f6:	08 94       	sec
    49f8:	e7 95       	ror	r30
    49fa:	d9 01       	movw	r26, r18
    49fc:	aa 23       	and	r26, r26
    49fe:	29 f4       	brne	.+10     	; 0x4a0a <pow+0x50>
    4a00:	ab 2f       	mov	r26, r27
    4a02:	be 2f       	mov	r27, r30
    4a04:	f8 5f       	subi	r31, 0xF8	; 248
    4a06:	d0 f3       	brcs	.-12     	; 0x49fc <pow+0x42>
    4a08:	10 c0       	rjmp	.+32     	; 0x4a2a <pow+0x70>
    4a0a:	ff 5f       	subi	r31, 0xFF	; 255
    4a0c:	70 f4       	brcc	.+28     	; 0x4a2a <pow+0x70>
    4a0e:	a6 95       	lsr	r26
    4a10:	e0 f7       	brcc	.-8      	; 0x4a0a <pow+0x50>
    4a12:	f7 39       	cpi	r31, 0x97	; 151
    4a14:	50 f0       	brcs	.+20     	; 0x4a2a <pow+0x70>
    4a16:	19 f0       	breq	.+6      	; 0x4a1e <pow+0x64>
    4a18:	ff 3a       	cpi	r31, 0xAF	; 175
    4a1a:	38 f4       	brcc	.+14     	; 0x4a2a <pow+0x70>
    4a1c:	9f 77       	andi	r25, 0x7F	; 127
    4a1e:	9f 93       	push	r25
    4a20:	0c d0       	rcall	.+24     	; 0x4a3a <pow+0x80>
    4a22:	0f 90       	pop	r0
    4a24:	07 fc       	sbrc	r0, 7
    4a26:	90 58       	subi	r25, 0x80	; 128
    4a28:	08 95       	ret
    4a2a:	3e f0       	brts	.+14     	; 0x4a3a <pow+0x80>
    4a2c:	da ce       	rjmp	.-588    	; 0x47e2 <__fp_nan>
    4a2e:	60 e0       	ldi	r22, 0x00	; 0
    4a30:	70 e0       	ldi	r23, 0x00	; 0
    4a32:	80 e8       	ldi	r24, 0x80	; 128
    4a34:	9f e3       	ldi	r25, 0x3F	; 63
    4a36:	08 95       	ret
    4a38:	4f e7       	ldi	r20, 0x7F	; 127
    4a3a:	9f 77       	andi	r25, 0x7F	; 127
    4a3c:	5f 93       	push	r21
    4a3e:	4f 93       	push	r20
    4a40:	3f 93       	push	r19
    4a42:	2f 93       	push	r18
    4a44:	9e d0       	rcall	.+316    	; 0x4b82 <log>
    4a46:	2f 91       	pop	r18
    4a48:	3f 91       	pop	r19
    4a4a:	4f 91       	pop	r20
    4a4c:	5f 91       	pop	r21
    4a4e:	52 df       	rcall	.-348    	; 0x48f4 <__mulsf3>
    4a50:	05 c0       	rjmp	.+10     	; 0x4a5c <exp>
    4a52:	19 f4       	brne	.+6      	; 0x4a5a <pow+0xa0>
    4a54:	0e f0       	brts	.+2      	; 0x4a58 <pow+0x9e>
    4a56:	bf ce       	rjmp	.-642    	; 0x47d6 <__fp_inf>
    4a58:	08 cf       	rjmp	.-496    	; 0x486a <__fp_zero>
    4a5a:	c3 ce       	rjmp	.-634    	; 0x47e2 <__fp_nan>

00004a5c <exp>:
    4a5c:	ec de       	rcall	.-552    	; 0x4836 <__fp_splitA>
    4a5e:	c8 f3       	brcs	.-14     	; 0x4a52 <pow+0x98>
    4a60:	96 38       	cpi	r25, 0x86	; 134
    4a62:	c0 f7       	brcc	.-16     	; 0x4a54 <pow+0x9a>
    4a64:	07 f8       	bld	r0, 7
    4a66:	0f 92       	push	r0
    4a68:	e8 94       	clt
    4a6a:	2b e3       	ldi	r18, 0x3B	; 59
    4a6c:	3a ea       	ldi	r19, 0xAA	; 170
    4a6e:	48 eb       	ldi	r20, 0xB8	; 184
    4a70:	5f e7       	ldi	r21, 0x7F	; 127
    4a72:	4e df       	rcall	.-356    	; 0x4910 <__mulsf3_pse>
    4a74:	0f 92       	push	r0
    4a76:	0f 92       	push	r0
    4a78:	0f 92       	push	r0
    4a7a:	4d b7       	in	r20, 0x3d	; 61
    4a7c:	5e b7       	in	r21, 0x3e	; 62
    4a7e:	0f 92       	push	r0
    4a80:	c0 d0       	rcall	.+384    	; 0x4c02 <modf>
    4a82:	e8 ec       	ldi	r30, 0xC8	; 200
    4a84:	f0 e0       	ldi	r31, 0x00	; 0
    4a86:	16 d0       	rcall	.+44     	; 0x4ab4 <__fp_powser>
    4a88:	4f 91       	pop	r20
    4a8a:	5f 91       	pop	r21
    4a8c:	ef 91       	pop	r30
    4a8e:	ff 91       	pop	r31
    4a90:	e5 95       	asr	r30
    4a92:	ee 1f       	adc	r30, r30
    4a94:	ff 1f       	adc	r31, r31
    4a96:	49 f0       	breq	.+18     	; 0x4aaa <exp+0x4e>
    4a98:	fe 57       	subi	r31, 0x7E	; 126
    4a9a:	e0 68       	ori	r30, 0x80	; 128
    4a9c:	44 27       	eor	r20, r20
    4a9e:	ee 0f       	add	r30, r30
    4aa0:	44 1f       	adc	r20, r20
    4aa2:	fa 95       	dec	r31
    4aa4:	e1 f7       	brne	.-8      	; 0x4a9e <exp+0x42>
    4aa6:	41 95       	neg	r20
    4aa8:	55 0b       	sbc	r21, r21
    4aaa:	32 d0       	rcall	.+100    	; 0x4b10 <ldexp>
    4aac:	0f 90       	pop	r0
    4aae:	07 fe       	sbrs	r0, 7
    4ab0:	26 c0       	rjmp	.+76     	; 0x4afe <inverse>
    4ab2:	08 95       	ret

00004ab4 <__fp_powser>:
    4ab4:	df 93       	push	r29
    4ab6:	cf 93       	push	r28
    4ab8:	1f 93       	push	r17
    4aba:	0f 93       	push	r16
    4abc:	ff 92       	push	r15
    4abe:	ef 92       	push	r14
    4ac0:	df 92       	push	r13
    4ac2:	7b 01       	movw	r14, r22
    4ac4:	8c 01       	movw	r16, r24
    4ac6:	68 94       	set
    4ac8:	05 c0       	rjmp	.+10     	; 0x4ad4 <__fp_powser+0x20>
    4aca:	da 2e       	mov	r13, r26
    4acc:	ef 01       	movw	r28, r30
    4ace:	1e df       	rcall	.-452    	; 0x490c <__mulsf3x>
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	e8 94       	clt
    4ad4:	a5 91       	lpm	r26, Z+
    4ad6:	25 91       	lpm	r18, Z+
    4ad8:	35 91       	lpm	r19, Z+
    4ada:	45 91       	lpm	r20, Z+
    4adc:	55 91       	lpm	r21, Z+
    4ade:	ae f3       	brts	.-22     	; 0x4aca <__fp_powser+0x16>
    4ae0:	ef 01       	movw	r28, r30
    4ae2:	28 dd       	rcall	.-1456   	; 0x4534 <__addsf3x>
    4ae4:	fe 01       	movw	r30, r28
    4ae6:	97 01       	movw	r18, r14
    4ae8:	a8 01       	movw	r20, r16
    4aea:	da 94       	dec	r13
    4aec:	79 f7       	brne	.-34     	; 0x4acc <__fp_powser+0x18>
    4aee:	df 90       	pop	r13
    4af0:	ef 90       	pop	r14
    4af2:	ff 90       	pop	r15
    4af4:	0f 91       	pop	r16
    4af6:	1f 91       	pop	r17
    4af8:	cf 91       	pop	r28
    4afa:	df 91       	pop	r29
    4afc:	08 95       	ret

00004afe <inverse>:
    4afe:	9b 01       	movw	r18, r22
    4b00:	ac 01       	movw	r20, r24
    4b02:	60 e0       	ldi	r22, 0x00	; 0
    4b04:	70 e0       	ldi	r23, 0x00	; 0
    4b06:	80 e8       	ldi	r24, 0x80	; 128
    4b08:	9f e3       	ldi	r25, 0x3F	; 63
    4b0a:	6b cd       	rjmp	.-1322   	; 0x45e2 <__divsf3>
    4b0c:	64 ce       	rjmp	.-824    	; 0x47d6 <__fp_inf>
    4b0e:	ac c0       	rjmp	.+344    	; 0x4c68 <__fp_mpack>

00004b10 <ldexp>:
    4b10:	92 de       	rcall	.-732    	; 0x4836 <__fp_splitA>
    4b12:	e8 f3       	brcs	.-6      	; 0x4b0e <inverse+0x10>
    4b14:	99 23       	and	r25, r25
    4b16:	d9 f3       	breq	.-10     	; 0x4b0e <inverse+0x10>
    4b18:	94 0f       	add	r25, r20
    4b1a:	51 1d       	adc	r21, r1
    4b1c:	bb f3       	brvs	.-18     	; 0x4b0c <inverse+0xe>
    4b1e:	91 50       	subi	r25, 0x01	; 1
    4b20:	50 40       	sbci	r21, 0x00	; 0
    4b22:	94 f0       	brlt	.+36     	; 0x4b48 <ldexp+0x38>
    4b24:	59 f0       	breq	.+22     	; 0x4b3c <ldexp+0x2c>
    4b26:	88 23       	and	r24, r24
    4b28:	32 f0       	brmi	.+12     	; 0x4b36 <ldexp+0x26>
    4b2a:	66 0f       	add	r22, r22
    4b2c:	77 1f       	adc	r23, r23
    4b2e:	88 1f       	adc	r24, r24
    4b30:	91 50       	subi	r25, 0x01	; 1
    4b32:	50 40       	sbci	r21, 0x00	; 0
    4b34:	c1 f7       	brne	.-16     	; 0x4b26 <ldexp+0x16>
    4b36:	9e 3f       	cpi	r25, 0xFE	; 254
    4b38:	51 05       	cpc	r21, r1
    4b3a:	44 f7       	brge	.-48     	; 0x4b0c <inverse+0xe>
    4b3c:	88 0f       	add	r24, r24
    4b3e:	91 1d       	adc	r25, r1
    4b40:	96 95       	lsr	r25
    4b42:	87 95       	ror	r24
    4b44:	97 f9       	bld	r25, 7
    4b46:	08 95       	ret
    4b48:	5f 3f       	cpi	r21, 0xFF	; 255
    4b4a:	ac f0       	brlt	.+42     	; 0x4b76 <ldexp+0x66>
    4b4c:	98 3e       	cpi	r25, 0xE8	; 232
    4b4e:	9c f0       	brlt	.+38     	; 0x4b76 <ldexp+0x66>
    4b50:	bb 27       	eor	r27, r27
    4b52:	86 95       	lsr	r24
    4b54:	77 95       	ror	r23
    4b56:	67 95       	ror	r22
    4b58:	b7 95       	ror	r27
    4b5a:	08 f4       	brcc	.+2      	; 0x4b5e <ldexp+0x4e>
    4b5c:	b1 60       	ori	r27, 0x01	; 1
    4b5e:	93 95       	inc	r25
    4b60:	c1 f7       	brne	.-16     	; 0x4b52 <ldexp+0x42>
    4b62:	bb 0f       	add	r27, r27
    4b64:	58 f7       	brcc	.-42     	; 0x4b3c <ldexp+0x2c>
    4b66:	11 f4       	brne	.+4      	; 0x4b6c <ldexp+0x5c>
    4b68:	60 ff       	sbrs	r22, 0
    4b6a:	e8 cf       	rjmp	.-48     	; 0x4b3c <ldexp+0x2c>
    4b6c:	6f 5f       	subi	r22, 0xFF	; 255
    4b6e:	7f 4f       	sbci	r23, 0xFF	; 255
    4b70:	8f 4f       	sbci	r24, 0xFF	; 255
    4b72:	9f 4f       	sbci	r25, 0xFF	; 255
    4b74:	e3 cf       	rjmp	.-58     	; 0x4b3c <ldexp+0x2c>
    4b76:	7a ce       	rjmp	.-780    	; 0x486c <__fp_szero>
    4b78:	0e f0       	brts	.+2      	; 0x4b7c <ldexp+0x6c>
    4b7a:	76 c0       	rjmp	.+236    	; 0x4c68 <__fp_mpack>
    4b7c:	32 ce       	rjmp	.-924    	; 0x47e2 <__fp_nan>
    4b7e:	68 94       	set
    4b80:	2a ce       	rjmp	.-940    	; 0x47d6 <__fp_inf>

00004b82 <log>:
    4b82:	59 de       	rcall	.-846    	; 0x4836 <__fp_splitA>
    4b84:	c8 f3       	brcs	.-14     	; 0x4b78 <ldexp+0x68>
    4b86:	99 23       	and	r25, r25
    4b88:	d1 f3       	breq	.-12     	; 0x4b7e <ldexp+0x6e>
    4b8a:	c6 f3       	brts	.-16     	; 0x4b7c <ldexp+0x6c>
    4b8c:	df 93       	push	r29
    4b8e:	cf 93       	push	r28
    4b90:	1f 93       	push	r17
    4b92:	0f 93       	push	r16
    4b94:	ff 92       	push	r15
    4b96:	c9 2f       	mov	r28, r25
    4b98:	dd 27       	eor	r29, r29
    4b9a:	88 23       	and	r24, r24
    4b9c:	2a f0       	brmi	.+10     	; 0x4ba8 <log+0x26>
    4b9e:	21 97       	sbiw	r28, 0x01	; 1
    4ba0:	66 0f       	add	r22, r22
    4ba2:	77 1f       	adc	r23, r23
    4ba4:	88 1f       	adc	r24, r24
    4ba6:	da f7       	brpl	.-10     	; 0x4b9e <log+0x1c>
    4ba8:	20 e0       	ldi	r18, 0x00	; 0
    4baa:	30 e0       	ldi	r19, 0x00	; 0
    4bac:	40 e8       	ldi	r20, 0x80	; 128
    4bae:	5f eb       	ldi	r21, 0xBF	; 191
    4bb0:	9f e3       	ldi	r25, 0x3F	; 63
    4bb2:	88 39       	cpi	r24, 0x98	; 152
    4bb4:	20 f0       	brcs	.+8      	; 0x4bbe <log+0x3c>
    4bb6:	80 3e       	cpi	r24, 0xE0	; 224
    4bb8:	30 f0       	brcs	.+12     	; 0x4bc6 <log+0x44>
    4bba:	21 96       	adiw	r28, 0x01	; 1
    4bbc:	8f 77       	andi	r24, 0x7F	; 127
    4bbe:	a9 dc       	rcall	.-1710   	; 0x4512 <__addsf3>
    4bc0:	e0 ef       	ldi	r30, 0xF0	; 240
    4bc2:	f0 e0       	ldi	r31, 0x00	; 0
    4bc4:	03 c0       	rjmp	.+6      	; 0x4bcc <log+0x4a>
    4bc6:	a5 dc       	rcall	.-1718   	; 0x4512 <__addsf3>
    4bc8:	ed e1       	ldi	r30, 0x1D	; 29
    4bca:	f1 e0       	ldi	r31, 0x01	; 1
    4bcc:	73 df       	rcall	.-282    	; 0x4ab4 <__fp_powser>
    4bce:	8b 01       	movw	r16, r22
    4bd0:	be 01       	movw	r22, r28
    4bd2:	ec 01       	movw	r28, r24
    4bd4:	fb 2e       	mov	r15, r27
    4bd6:	6f 57       	subi	r22, 0x7F	; 127
    4bd8:	71 09       	sbc	r23, r1
    4bda:	75 95       	asr	r23
    4bdc:	77 1f       	adc	r23, r23
    4bde:	88 0b       	sbc	r24, r24
    4be0:	99 0b       	sbc	r25, r25
    4be2:	9a dd       	rcall	.-1228   	; 0x4718 <__floatsisf>
    4be4:	28 e1       	ldi	r18, 0x18	; 24
    4be6:	32 e7       	ldi	r19, 0x72	; 114
    4be8:	41 e3       	ldi	r20, 0x31	; 49
    4bea:	5f e3       	ldi	r21, 0x3F	; 63
    4bec:	8f de       	rcall	.-738    	; 0x490c <__mulsf3x>
    4bee:	af 2d       	mov	r26, r15
    4bf0:	98 01       	movw	r18, r16
    4bf2:	ae 01       	movw	r20, r28
    4bf4:	ff 90       	pop	r15
    4bf6:	0f 91       	pop	r16
    4bf8:	1f 91       	pop	r17
    4bfa:	cf 91       	pop	r28
    4bfc:	df 91       	pop	r29
    4bfe:	9a dc       	rcall	.-1740   	; 0x4534 <__addsf3x>
    4c00:	01 ce       	rjmp	.-1022   	; 0x4804 <__fp_round>

00004c02 <modf>:
    4c02:	fa 01       	movw	r30, r20
    4c04:	dc 01       	movw	r26, r24
    4c06:	aa 0f       	add	r26, r26
    4c08:	bb 1f       	adc	r27, r27
    4c0a:	9b 01       	movw	r18, r22
    4c0c:	ac 01       	movw	r20, r24
    4c0e:	bf 57       	subi	r27, 0x7F	; 127
    4c10:	28 f4       	brcc	.+10     	; 0x4c1c <modf+0x1a>
    4c12:	22 27       	eor	r18, r18
    4c14:	33 27       	eor	r19, r19
    4c16:	44 27       	eor	r20, r20
    4c18:	50 78       	andi	r21, 0x80	; 128
    4c1a:	1f c0       	rjmp	.+62     	; 0x4c5a <modf+0x58>
    4c1c:	b7 51       	subi	r27, 0x17	; 23
    4c1e:	88 f4       	brcc	.+34     	; 0x4c42 <modf+0x40>
    4c20:	ab 2f       	mov	r26, r27
    4c22:	00 24       	eor	r0, r0
    4c24:	46 95       	lsr	r20
    4c26:	37 95       	ror	r19
    4c28:	27 95       	ror	r18
    4c2a:	01 1c       	adc	r0, r1
    4c2c:	a3 95       	inc	r26
    4c2e:	d2 f3       	brmi	.-12     	; 0x4c24 <modf+0x22>
    4c30:	00 20       	and	r0, r0
    4c32:	69 f0       	breq	.+26     	; 0x4c4e <modf+0x4c>
    4c34:	22 0f       	add	r18, r18
    4c36:	33 1f       	adc	r19, r19
    4c38:	44 1f       	adc	r20, r20
    4c3a:	b3 95       	inc	r27
    4c3c:	da f3       	brmi	.-10     	; 0x4c34 <modf+0x32>
    4c3e:	0d d0       	rcall	.+26     	; 0x4c5a <modf+0x58>
    4c40:	67 cc       	rjmp	.-1842   	; 0x4510 <__subsf3>
    4c42:	61 30       	cpi	r22, 0x01	; 1
    4c44:	71 05       	cpc	r23, r1
    4c46:	a0 e8       	ldi	r26, 0x80	; 128
    4c48:	8a 07       	cpc	r24, r26
    4c4a:	b9 46       	sbci	r27, 0x69	; 105
    4c4c:	30 f4       	brcc	.+12     	; 0x4c5a <modf+0x58>
    4c4e:	9b 01       	movw	r18, r22
    4c50:	ac 01       	movw	r20, r24
    4c52:	66 27       	eor	r22, r22
    4c54:	77 27       	eor	r23, r23
    4c56:	88 27       	eor	r24, r24
    4c58:	90 78       	andi	r25, 0x80	; 128
    4c5a:	30 96       	adiw	r30, 0x00	; 0
    4c5c:	21 f0       	breq	.+8      	; 0x4c66 <modf+0x64>
    4c5e:	20 83       	st	Z, r18
    4c60:	31 83       	std	Z+1, r19	; 0x01
    4c62:	42 83       	std	Z+2, r20	; 0x02
    4c64:	53 83       	std	Z+3, r21	; 0x03
    4c66:	08 95       	ret

00004c68 <__fp_mpack>:
    4c68:	9f 3f       	cpi	r25, 0xFF	; 255
    4c6a:	31 f0       	breq	.+12     	; 0x4c78 <__fp_mpack_finite+0xc>

00004c6c <__fp_mpack_finite>:
    4c6c:	91 50       	subi	r25, 0x01	; 1
    4c6e:	20 f4       	brcc	.+8      	; 0x4c78 <__fp_mpack_finite+0xc>
    4c70:	87 95       	ror	r24
    4c72:	77 95       	ror	r23
    4c74:	67 95       	ror	r22
    4c76:	b7 95       	ror	r27
    4c78:	88 0f       	add	r24, r24
    4c7a:	91 1d       	adc	r25, r1
    4c7c:	96 95       	lsr	r25
    4c7e:	87 95       	ror	r24
    4c80:	97 f9       	bld	r25, 7
    4c82:	08 95       	ret

00004c84 <vfprintf>:
    4c84:	a1 e1       	ldi	r26, 0x11	; 17
    4c86:	b0 e0       	ldi	r27, 0x00	; 0
    4c88:	e7 e4       	ldi	r30, 0x47	; 71
    4c8a:	f6 e2       	ldi	r31, 0x26	; 38
    4c8c:	b7 c3       	rjmp	.+1902   	; 0x53fc <__prologue_saves__>
    4c8e:	3c 01       	movw	r6, r24
    4c90:	7f 87       	std	Y+15, r23	; 0x0f
    4c92:	6e 87       	std	Y+14, r22	; 0x0e
    4c94:	6a 01       	movw	r12, r20
    4c96:	fc 01       	movw	r30, r24
    4c98:	17 82       	std	Z+7, r1	; 0x07
    4c9a:	16 82       	std	Z+6, r1	; 0x06
    4c9c:	83 81       	ldd	r24, Z+3	; 0x03
    4c9e:	81 fd       	sbrc	r24, 1
    4ca0:	03 c0       	rjmp	.+6      	; 0x4ca8 <vfprintf+0x24>
    4ca2:	6f ef       	ldi	r22, 0xFF	; 255
    4ca4:	7f ef       	ldi	r23, 0xFF	; 255
    4ca6:	52 c3       	rjmp	.+1700   	; 0x534c <vfprintf+0x6c8>
    4ca8:	9e 01       	movw	r18, r28
    4caa:	2f 5f       	subi	r18, 0xFF	; 255
    4cac:	3f 4f       	sbci	r19, 0xFF	; 255
    4cae:	39 8b       	std	Y+17, r19	; 0x11
    4cb0:	28 8b       	std	Y+16, r18	; 0x10
    4cb2:	f3 01       	movw	r30, r6
    4cb4:	23 81       	ldd	r18, Z+3	; 0x03
    4cb6:	ee 85       	ldd	r30, Y+14	; 0x0e
    4cb8:	ff 85       	ldd	r31, Y+15	; 0x0f
    4cba:	23 fd       	sbrc	r18, 3
    4cbc:	85 91       	lpm	r24, Z+
    4cbe:	23 ff       	sbrs	r18, 3
    4cc0:	81 91       	ld	r24, Z+
    4cc2:	ff 87       	std	Y+15, r31	; 0x0f
    4cc4:	ee 87       	std	Y+14, r30	; 0x0e
    4cc6:	88 23       	and	r24, r24
    4cc8:	09 f4       	brne	.+2      	; 0x4ccc <vfprintf+0x48>
    4cca:	3d c3       	rjmp	.+1658   	; 0x5346 <vfprintf+0x6c2>
    4ccc:	85 32       	cpi	r24, 0x25	; 37
    4cce:	51 f4       	brne	.+20     	; 0x4ce4 <vfprintf+0x60>
    4cd0:	ee 85       	ldd	r30, Y+14	; 0x0e
    4cd2:	ff 85       	ldd	r31, Y+15	; 0x0f
    4cd4:	23 fd       	sbrc	r18, 3
    4cd6:	85 91       	lpm	r24, Z+
    4cd8:	23 ff       	sbrs	r18, 3
    4cda:	81 91       	ld	r24, Z+
    4cdc:	ff 87       	std	Y+15, r31	; 0x0f
    4cde:	ee 87       	std	Y+14, r30	; 0x0e
    4ce0:	85 32       	cpi	r24, 0x25	; 37
    4ce2:	21 f4       	brne	.+8      	; 0x4cec <vfprintf+0x68>
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	b3 01       	movw	r22, r6
    4ce8:	20 d6       	rcall	.+3136   	; 0x592a <fputc>
    4cea:	e3 cf       	rjmp	.-58     	; 0x4cb2 <vfprintf+0x2e>
    4cec:	98 2f       	mov	r25, r24
    4cee:	10 e0       	ldi	r17, 0x00	; 0
    4cf0:	88 24       	eor	r8, r8
    4cf2:	99 24       	eor	r9, r9
    4cf4:	10 32       	cpi	r17, 0x20	; 32
    4cf6:	b0 f4       	brcc	.+44     	; 0x4d24 <vfprintf+0xa0>
    4cf8:	9b 32       	cpi	r25, 0x2B	; 43
    4cfa:	69 f0       	breq	.+26     	; 0x4d16 <vfprintf+0x92>
    4cfc:	9c 32       	cpi	r25, 0x2C	; 44
    4cfe:	28 f4       	brcc	.+10     	; 0x4d0a <vfprintf+0x86>
    4d00:	90 32       	cpi	r25, 0x20	; 32
    4d02:	51 f0       	breq	.+20     	; 0x4d18 <vfprintf+0x94>
    4d04:	93 32       	cpi	r25, 0x23	; 35
    4d06:	71 f4       	brne	.+28     	; 0x4d24 <vfprintf+0xa0>
    4d08:	0b c0       	rjmp	.+22     	; 0x4d20 <vfprintf+0x9c>
    4d0a:	9d 32       	cpi	r25, 0x2D	; 45
    4d0c:	39 f0       	breq	.+14     	; 0x4d1c <vfprintf+0x98>
    4d0e:	90 33       	cpi	r25, 0x30	; 48
    4d10:	49 f4       	brne	.+18     	; 0x4d24 <vfprintf+0xa0>
    4d12:	11 60       	ori	r17, 0x01	; 1
    4d14:	28 c0       	rjmp	.+80     	; 0x4d66 <vfprintf+0xe2>
    4d16:	12 60       	ori	r17, 0x02	; 2
    4d18:	14 60       	ori	r17, 0x04	; 4
    4d1a:	25 c0       	rjmp	.+74     	; 0x4d66 <vfprintf+0xe2>
    4d1c:	18 60       	ori	r17, 0x08	; 8
    4d1e:	23 c0       	rjmp	.+70     	; 0x4d66 <vfprintf+0xe2>
    4d20:	10 61       	ori	r17, 0x10	; 16
    4d22:	21 c0       	rjmp	.+66     	; 0x4d66 <vfprintf+0xe2>
    4d24:	17 fd       	sbrc	r17, 7
    4d26:	2a c0       	rjmp	.+84     	; 0x4d7c <vfprintf+0xf8>
    4d28:	89 2f       	mov	r24, r25
    4d2a:	80 53       	subi	r24, 0x30	; 48
    4d2c:	8a 30       	cpi	r24, 0x0A	; 10
    4d2e:	78 f4       	brcc	.+30     	; 0x4d4e <vfprintf+0xca>
    4d30:	16 ff       	sbrs	r17, 6
    4d32:	06 c0       	rjmp	.+12     	; 0x4d40 <vfprintf+0xbc>
    4d34:	fa e0       	ldi	r31, 0x0A	; 10
    4d36:	9f 9e       	mul	r9, r31
    4d38:	90 2c       	mov	r9, r0
    4d3a:	11 24       	eor	r1, r1
    4d3c:	98 0e       	add	r9, r24
    4d3e:	13 c0       	rjmp	.+38     	; 0x4d66 <vfprintf+0xe2>
    4d40:	3a e0       	ldi	r19, 0x0A	; 10
    4d42:	83 9e       	mul	r8, r19
    4d44:	80 2c       	mov	r8, r0
    4d46:	11 24       	eor	r1, r1
    4d48:	88 0e       	add	r8, r24
    4d4a:	10 62       	ori	r17, 0x20	; 32
    4d4c:	0c c0       	rjmp	.+24     	; 0x4d66 <vfprintf+0xe2>
    4d4e:	9e 32       	cpi	r25, 0x2E	; 46
    4d50:	21 f4       	brne	.+8      	; 0x4d5a <vfprintf+0xd6>
    4d52:	16 fd       	sbrc	r17, 6
    4d54:	f8 c2       	rjmp	.+1520   	; 0x5346 <vfprintf+0x6c2>
    4d56:	10 64       	ori	r17, 0x40	; 64
    4d58:	06 c0       	rjmp	.+12     	; 0x4d66 <vfprintf+0xe2>
    4d5a:	9c 36       	cpi	r25, 0x6C	; 108
    4d5c:	11 f4       	brne	.+4      	; 0x4d62 <vfprintf+0xde>
    4d5e:	10 68       	ori	r17, 0x80	; 128
    4d60:	02 c0       	rjmp	.+4      	; 0x4d66 <vfprintf+0xe2>
    4d62:	98 36       	cpi	r25, 0x68	; 104
    4d64:	59 f4       	brne	.+22     	; 0x4d7c <vfprintf+0xf8>
    4d66:	ee 85       	ldd	r30, Y+14	; 0x0e
    4d68:	ff 85       	ldd	r31, Y+15	; 0x0f
    4d6a:	23 fd       	sbrc	r18, 3
    4d6c:	95 91       	lpm	r25, Z+
    4d6e:	23 ff       	sbrs	r18, 3
    4d70:	91 91       	ld	r25, Z+
    4d72:	ff 87       	std	Y+15, r31	; 0x0f
    4d74:	ee 87       	std	Y+14, r30	; 0x0e
    4d76:	99 23       	and	r25, r25
    4d78:	09 f0       	breq	.+2      	; 0x4d7c <vfprintf+0xf8>
    4d7a:	bc cf       	rjmp	.-136    	; 0x4cf4 <vfprintf+0x70>
    4d7c:	89 2f       	mov	r24, r25
    4d7e:	85 54       	subi	r24, 0x45	; 69
    4d80:	83 30       	cpi	r24, 0x03	; 3
    4d82:	20 f4       	brcc	.+8      	; 0x4d8c <vfprintf+0x108>
    4d84:	81 2f       	mov	r24, r17
    4d86:	80 61       	ori	r24, 0x10	; 16
    4d88:	90 5e       	subi	r25, 0xE0	; 224
    4d8a:	07 c0       	rjmp	.+14     	; 0x4d9a <vfprintf+0x116>
    4d8c:	89 2f       	mov	r24, r25
    4d8e:	85 56       	subi	r24, 0x65	; 101
    4d90:	83 30       	cpi	r24, 0x03	; 3
    4d92:	08 f0       	brcs	.+2      	; 0x4d96 <vfprintf+0x112>
    4d94:	8f c1       	rjmp	.+798    	; 0x50b4 <vfprintf+0x430>
    4d96:	81 2f       	mov	r24, r17
    4d98:	8f 7e       	andi	r24, 0xEF	; 239
    4d9a:	86 fd       	sbrc	r24, 6
    4d9c:	02 c0       	rjmp	.+4      	; 0x4da2 <vfprintf+0x11e>
    4d9e:	76 e0       	ldi	r23, 0x06	; 6
    4da0:	97 2e       	mov	r9, r23
    4da2:	6f e3       	ldi	r22, 0x3F	; 63
    4da4:	f6 2e       	mov	r15, r22
    4da6:	f8 22       	and	r15, r24
    4da8:	95 36       	cpi	r25, 0x65	; 101
    4daa:	19 f4       	brne	.+6      	; 0x4db2 <vfprintf+0x12e>
    4dac:	f0 e4       	ldi	r31, 0x40	; 64
    4dae:	ff 2a       	or	r15, r31
    4db0:	07 c0       	rjmp	.+14     	; 0x4dc0 <vfprintf+0x13c>
    4db2:	96 36       	cpi	r25, 0x66	; 102
    4db4:	19 f4       	brne	.+6      	; 0x4dbc <vfprintf+0x138>
    4db6:	20 e8       	ldi	r18, 0x80	; 128
    4db8:	f2 2a       	or	r15, r18
    4dba:	02 c0       	rjmp	.+4      	; 0x4dc0 <vfprintf+0x13c>
    4dbc:	91 10       	cpse	r9, r1
    4dbe:	9a 94       	dec	r9
    4dc0:	f7 fe       	sbrs	r15, 7
    4dc2:	0a c0       	rjmp	.+20     	; 0x4dd8 <vfprintf+0x154>
    4dc4:	3b e3       	ldi	r19, 0x3B	; 59
    4dc6:	39 15       	cp	r19, r9
    4dc8:	18 f4       	brcc	.+6      	; 0x4dd0 <vfprintf+0x14c>
    4dca:	5c e3       	ldi	r21, 0x3C	; 60
    4dcc:	b5 2e       	mov	r11, r21
    4dce:	02 c0       	rjmp	.+4      	; 0x4dd4 <vfprintf+0x150>
    4dd0:	b9 2c       	mov	r11, r9
    4dd2:	b3 94       	inc	r11
    4dd4:	27 e0       	ldi	r18, 0x07	; 7
    4dd6:	09 c0       	rjmp	.+18     	; 0x4dea <vfprintf+0x166>
    4dd8:	47 e0       	ldi	r20, 0x07	; 7
    4dda:	49 15       	cp	r20, r9
    4ddc:	20 f4       	brcc	.+8      	; 0x4de6 <vfprintf+0x162>
    4dde:	bb 24       	eor	r11, r11
    4de0:	47 e0       	ldi	r20, 0x07	; 7
    4de2:	94 2e       	mov	r9, r20
    4de4:	f7 cf       	rjmp	.-18     	; 0x4dd4 <vfprintf+0x150>
    4de6:	29 2d       	mov	r18, r9
    4de8:	bb 24       	eor	r11, r11
    4dea:	c6 01       	movw	r24, r12
    4dec:	04 96       	adiw	r24, 0x04	; 4
    4dee:	9d 87       	std	Y+13, r25	; 0x0d
    4df0:	8c 87       	std	Y+12, r24	; 0x0c
    4df2:	f6 01       	movw	r30, r12
    4df4:	60 81       	ld	r22, Z
    4df6:	71 81       	ldd	r23, Z+1	; 0x01
    4df8:	82 81       	ldd	r24, Z+2	; 0x02
    4dfa:	93 81       	ldd	r25, Z+3	; 0x03
    4dfc:	ae 01       	movw	r20, r28
    4dfe:	4f 5f       	subi	r20, 0xFF	; 255
    4e00:	5f 4f       	sbci	r21, 0xFF	; 255
    4e02:	0b 2d       	mov	r16, r11
    4e04:	a4 d4       	rcall	.+2376   	; 0x574e <__ftoa_engine>
    4e06:	6c 01       	movw	r12, r24
    4e08:	09 81       	ldd	r16, Y+1	; 0x01
    4e0a:	20 2e       	mov	r2, r16
    4e0c:	33 24       	eor	r3, r3
    4e0e:	00 ff       	sbrs	r16, 0
    4e10:	04 c0       	rjmp	.+8      	; 0x4e1a <vfprintf+0x196>
    4e12:	03 fd       	sbrc	r16, 3
    4e14:	02 c0       	rjmp	.+4      	; 0x4e1a <vfprintf+0x196>
    4e16:	1d e2       	ldi	r17, 0x2D	; 45
    4e18:	09 c0       	rjmp	.+18     	; 0x4e2c <vfprintf+0x1a8>
    4e1a:	f1 fe       	sbrs	r15, 1
    4e1c:	02 c0       	rjmp	.+4      	; 0x4e22 <vfprintf+0x19e>
    4e1e:	1b e2       	ldi	r17, 0x2B	; 43
    4e20:	05 c0       	rjmp	.+10     	; 0x4e2c <vfprintf+0x1a8>
    4e22:	f2 fc       	sbrc	r15, 2
    4e24:	02 c0       	rjmp	.+4      	; 0x4e2a <vfprintf+0x1a6>
    4e26:	10 e0       	ldi	r17, 0x00	; 0
    4e28:	01 c0       	rjmp	.+2      	; 0x4e2c <vfprintf+0x1a8>
    4e2a:	10 e2       	ldi	r17, 0x20	; 32
    4e2c:	c1 01       	movw	r24, r2
    4e2e:	8c 70       	andi	r24, 0x0C	; 12
    4e30:	90 70       	andi	r25, 0x00	; 0
    4e32:	89 2b       	or	r24, r25
    4e34:	a1 f1       	breq	.+104    	; 0x4e9e <vfprintf+0x21a>
    4e36:	11 23       	and	r17, r17
    4e38:	11 f4       	brne	.+4      	; 0x4e3e <vfprintf+0x1ba>
    4e3a:	83 e0       	ldi	r24, 0x03	; 3
    4e3c:	01 c0       	rjmp	.+2      	; 0x4e40 <vfprintf+0x1bc>
    4e3e:	84 e0       	ldi	r24, 0x04	; 4
    4e40:	88 15       	cp	r24, r8
    4e42:	10 f0       	brcs	.+4      	; 0x4e48 <vfprintf+0x1c4>
    4e44:	88 24       	eor	r8, r8
    4e46:	09 c0       	rjmp	.+18     	; 0x4e5a <vfprintf+0x1d6>
    4e48:	88 1a       	sub	r8, r24
    4e4a:	f3 fc       	sbrc	r15, 3
    4e4c:	06 c0       	rjmp	.+12     	; 0x4e5a <vfprintf+0x1d6>
    4e4e:	80 e2       	ldi	r24, 0x20	; 32
    4e50:	90 e0       	ldi	r25, 0x00	; 0
    4e52:	b3 01       	movw	r22, r6
    4e54:	6a d5       	rcall	.+2772   	; 0x592a <fputc>
    4e56:	8a 94       	dec	r8
    4e58:	d1 f7       	brne	.-12     	; 0x4e4e <vfprintf+0x1ca>
    4e5a:	11 23       	and	r17, r17
    4e5c:	21 f0       	breq	.+8      	; 0x4e66 <vfprintf+0x1e2>
    4e5e:	81 2f       	mov	r24, r17
    4e60:	90 e0       	ldi	r25, 0x00	; 0
    4e62:	b3 01       	movw	r22, r6
    4e64:	62 d5       	rcall	.+2756   	; 0x592a <fputc>
    4e66:	23 fe       	sbrs	r2, 3
    4e68:	03 c0       	rjmp	.+6      	; 0x4e70 <vfprintf+0x1ec>
    4e6a:	0f e5       	ldi	r16, 0x5F	; 95
    4e6c:	15 e0       	ldi	r17, 0x05	; 5
    4e6e:	0d c0       	rjmp	.+26     	; 0x4e8a <vfprintf+0x206>
    4e70:	03 e6       	ldi	r16, 0x63	; 99
    4e72:	15 e0       	ldi	r17, 0x05	; 5
    4e74:	0a c0       	rjmp	.+20     	; 0x4e8a <vfprintf+0x206>
    4e76:	e1 14       	cp	r14, r1
    4e78:	f1 04       	cpc	r15, r1
    4e7a:	09 f0       	breq	.+2      	; 0x4e7e <vfprintf+0x1fa>
    4e7c:	80 52       	subi	r24, 0x20	; 32
    4e7e:	90 e0       	ldi	r25, 0x00	; 0
    4e80:	b3 01       	movw	r22, r6
    4e82:	53 d5       	rcall	.+2726   	; 0x592a <fputc>
    4e84:	0f 5f       	subi	r16, 0xFF	; 255
    4e86:	1f 4f       	sbci	r17, 0xFF	; 255
    4e88:	05 c0       	rjmp	.+10     	; 0x4e94 <vfprintf+0x210>
    4e8a:	ef 2c       	mov	r14, r15
    4e8c:	ff 24       	eor	r15, r15
    4e8e:	f0 e1       	ldi	r31, 0x10	; 16
    4e90:	ef 22       	and	r14, r31
    4e92:	ff 24       	eor	r15, r15
    4e94:	f8 01       	movw	r30, r16
    4e96:	84 91       	lpm	r24, Z+
    4e98:	88 23       	and	r24, r24
    4e9a:	69 f7       	brne	.-38     	; 0x4e76 <vfprintf+0x1f2>
    4e9c:	08 c1       	rjmp	.+528    	; 0x50ae <vfprintf+0x42a>
    4e9e:	f7 fe       	sbrs	r15, 7
    4ea0:	12 c0       	rjmp	.+36     	; 0x4ec6 <vfprintf+0x242>
    4ea2:	bc 0c       	add	r11, r12
    4ea4:	24 fe       	sbrs	r2, 4
    4ea6:	04 c0       	rjmp	.+8      	; 0x4eb0 <vfprintf+0x22c>
    4ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    4eaa:	81 33       	cpi	r24, 0x31	; 49
    4eac:	09 f4       	brne	.+2      	; 0x4eb0 <vfprintf+0x22c>
    4eae:	ba 94       	dec	r11
    4eb0:	1b 14       	cp	r1, r11
    4eb2:	1c f0       	brlt	.+6      	; 0x4eba <vfprintf+0x236>
    4eb4:	bb 24       	eor	r11, r11
    4eb6:	b3 94       	inc	r11
    4eb8:	2d c0       	rjmp	.+90     	; 0x4f14 <vfprintf+0x290>
    4eba:	f8 e0       	ldi	r31, 0x08	; 8
    4ebc:	fb 15       	cp	r31, r11
    4ebe:	50 f5       	brcc	.+84     	; 0x4f14 <vfprintf+0x290>
    4ec0:	38 e0       	ldi	r19, 0x08	; 8
    4ec2:	b3 2e       	mov	r11, r19
    4ec4:	27 c0       	rjmp	.+78     	; 0x4f14 <vfprintf+0x290>
    4ec6:	f6 fc       	sbrc	r15, 6
    4ec8:	25 c0       	rjmp	.+74     	; 0x4f14 <vfprintf+0x290>
    4eca:	89 2d       	mov	r24, r9
    4ecc:	90 e0       	ldi	r25, 0x00	; 0
    4ece:	8c 15       	cp	r24, r12
    4ed0:	9d 05       	cpc	r25, r13
    4ed2:	4c f0       	brlt	.+18     	; 0x4ee6 <vfprintf+0x262>
    4ed4:	2c ef       	ldi	r18, 0xFC	; 252
    4ed6:	c2 16       	cp	r12, r18
    4ed8:	2f ef       	ldi	r18, 0xFF	; 255
    4eda:	d2 06       	cpc	r13, r18
    4edc:	24 f0       	brlt	.+8      	; 0x4ee6 <vfprintf+0x262>
    4ede:	30 e8       	ldi	r19, 0x80	; 128
    4ee0:	f3 2a       	or	r15, r19
    4ee2:	01 c0       	rjmp	.+2      	; 0x4ee6 <vfprintf+0x262>
    4ee4:	9a 94       	dec	r9
    4ee6:	99 20       	and	r9, r9
    4ee8:	49 f0       	breq	.+18     	; 0x4efc <vfprintf+0x278>
    4eea:	e2 e0       	ldi	r30, 0x02	; 2
    4eec:	f0 e0       	ldi	r31, 0x00	; 0
    4eee:	ec 0f       	add	r30, r28
    4ef0:	fd 1f       	adc	r31, r29
    4ef2:	e9 0d       	add	r30, r9
    4ef4:	f1 1d       	adc	r31, r1
    4ef6:	80 81       	ld	r24, Z
    4ef8:	80 33       	cpi	r24, 0x30	; 48
    4efa:	a1 f3       	breq	.-24     	; 0x4ee4 <vfprintf+0x260>
    4efc:	f7 fe       	sbrs	r15, 7
    4efe:	0a c0       	rjmp	.+20     	; 0x4f14 <vfprintf+0x290>
    4f00:	b9 2c       	mov	r11, r9
    4f02:	b3 94       	inc	r11
    4f04:	89 2d       	mov	r24, r9
    4f06:	90 e0       	ldi	r25, 0x00	; 0
    4f08:	c8 16       	cp	r12, r24
    4f0a:	d9 06       	cpc	r13, r25
    4f0c:	14 f0       	brlt	.+4      	; 0x4f12 <vfprintf+0x28e>
    4f0e:	99 24       	eor	r9, r9
    4f10:	01 c0       	rjmp	.+2      	; 0x4f14 <vfprintf+0x290>
    4f12:	9c 18       	sub	r9, r12
    4f14:	f7 fc       	sbrc	r15, 7
    4f16:	03 c0       	rjmp	.+6      	; 0x4f1e <vfprintf+0x29a>
    4f18:	25 e0       	ldi	r18, 0x05	; 5
    4f1a:	30 e0       	ldi	r19, 0x00	; 0
    4f1c:	09 c0       	rjmp	.+18     	; 0x4f30 <vfprintf+0x2ac>
    4f1e:	1c 14       	cp	r1, r12
    4f20:	1d 04       	cpc	r1, r13
    4f22:	1c f0       	brlt	.+6      	; 0x4f2a <vfprintf+0x2a6>
    4f24:	21 e0       	ldi	r18, 0x01	; 1
    4f26:	30 e0       	ldi	r19, 0x00	; 0
    4f28:	03 c0       	rjmp	.+6      	; 0x4f30 <vfprintf+0x2ac>
    4f2a:	96 01       	movw	r18, r12
    4f2c:	2f 5f       	subi	r18, 0xFF	; 255
    4f2e:	3f 4f       	sbci	r19, 0xFF	; 255
    4f30:	11 23       	and	r17, r17
    4f32:	11 f0       	breq	.+4      	; 0x4f38 <vfprintf+0x2b4>
    4f34:	2f 5f       	subi	r18, 0xFF	; 255
    4f36:	3f 4f       	sbci	r19, 0xFF	; 255
    4f38:	99 20       	and	r9, r9
    4f3a:	29 f0       	breq	.+10     	; 0x4f46 <vfprintf+0x2c2>
    4f3c:	89 2d       	mov	r24, r9
    4f3e:	90 e0       	ldi	r25, 0x00	; 0
    4f40:	01 96       	adiw	r24, 0x01	; 1
    4f42:	28 0f       	add	r18, r24
    4f44:	39 1f       	adc	r19, r25
    4f46:	88 2d       	mov	r24, r8
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	28 17       	cp	r18, r24
    4f4c:	39 07       	cpc	r19, r25
    4f4e:	14 f0       	brlt	.+4      	; 0x4f54 <vfprintf+0x2d0>
    4f50:	88 24       	eor	r8, r8
    4f52:	01 c0       	rjmp	.+2      	; 0x4f56 <vfprintf+0x2d2>
    4f54:	82 1a       	sub	r8, r18
    4f56:	4f 2c       	mov	r4, r15
    4f58:	55 24       	eor	r5, r5
    4f5a:	c2 01       	movw	r24, r4
    4f5c:	89 70       	andi	r24, 0x09	; 9
    4f5e:	90 70       	andi	r25, 0x00	; 0
    4f60:	89 2b       	or	r24, r25
    4f62:	31 f0       	breq	.+12     	; 0x4f70 <vfprintf+0x2ec>
    4f64:	07 c0       	rjmp	.+14     	; 0x4f74 <vfprintf+0x2f0>
    4f66:	80 e2       	ldi	r24, 0x20	; 32
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	b3 01       	movw	r22, r6
    4f6c:	de d4       	rcall	.+2492   	; 0x592a <fputc>
    4f6e:	8a 94       	dec	r8
    4f70:	88 20       	and	r8, r8
    4f72:	c9 f7       	brne	.-14     	; 0x4f66 <vfprintf+0x2e2>
    4f74:	11 23       	and	r17, r17
    4f76:	21 f0       	breq	.+8      	; 0x4f80 <vfprintf+0x2fc>
    4f78:	81 2f       	mov	r24, r17
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	b3 01       	movw	r22, r6
    4f7e:	d5 d4       	rcall	.+2474   	; 0x592a <fputc>
    4f80:	43 fe       	sbrs	r4, 3
    4f82:	06 c0       	rjmp	.+12     	; 0x4f90 <vfprintf+0x30c>
    4f84:	07 c0       	rjmp	.+14     	; 0x4f94 <vfprintf+0x310>
    4f86:	80 e3       	ldi	r24, 0x30	; 48
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	b3 01       	movw	r22, r6
    4f8c:	ce d4       	rcall	.+2460   	; 0x592a <fputc>
    4f8e:	8a 94       	dec	r8
    4f90:	88 20       	and	r8, r8
    4f92:	c9 f7       	brne	.-14     	; 0x4f86 <vfprintf+0x302>
    4f94:	f7 fe       	sbrs	r15, 7
    4f96:	44 c0       	rjmp	.+136    	; 0x5020 <vfprintf+0x39c>
    4f98:	86 01       	movw	r16, r12
    4f9a:	d7 fe       	sbrs	r13, 7
    4f9c:	02 c0       	rjmp	.+4      	; 0x4fa2 <vfprintf+0x31e>
    4f9e:	00 e0       	ldi	r16, 0x00	; 0
    4fa0:	10 e0       	ldi	r17, 0x00	; 0
    4fa2:	76 01       	movw	r14, r12
    4fa4:	08 94       	sec
    4fa6:	e1 1c       	adc	r14, r1
    4fa8:	f1 1c       	adc	r15, r1
    4faa:	e0 1a       	sub	r14, r16
    4fac:	f1 0a       	sbc	r15, r17
    4fae:	41 e0       	ldi	r20, 0x01	; 1
    4fb0:	50 e0       	ldi	r21, 0x00	; 0
    4fb2:	4c 0f       	add	r20, r28
    4fb4:	5d 1f       	adc	r21, r29
    4fb6:	e4 0e       	add	r14, r20
    4fb8:	f5 1e       	adc	r15, r21
    4fba:	26 01       	movw	r4, r12
    4fbc:	4b 18       	sub	r4, r11
    4fbe:	51 08       	sbc	r5, r1
    4fc0:	89 2d       	mov	r24, r9
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	aa 24       	eor	r10, r10
    4fc6:	bb 24       	eor	r11, r11
    4fc8:	a8 1a       	sub	r10, r24
    4fca:	b9 0a       	sbc	r11, r25
    4fcc:	5f ef       	ldi	r21, 0xFF	; 255
    4fce:	0f 3f       	cpi	r16, 0xFF	; 255
    4fd0:	15 07       	cpc	r17, r21
    4fd2:	21 f4       	brne	.+8      	; 0x4fdc <vfprintf+0x358>
    4fd4:	8e e2       	ldi	r24, 0x2E	; 46
    4fd6:	90 e0       	ldi	r25, 0x00	; 0
    4fd8:	b3 01       	movw	r22, r6
    4fda:	a7 d4       	rcall	.+2382   	; 0x592a <fputc>
    4fdc:	c0 16       	cp	r12, r16
    4fde:	d1 06       	cpc	r13, r17
    4fe0:	34 f0       	brlt	.+12     	; 0x4fee <vfprintf+0x36a>
    4fe2:	40 16       	cp	r4, r16
    4fe4:	51 06       	cpc	r5, r17
    4fe6:	1c f4       	brge	.+6      	; 0x4fee <vfprintf+0x36a>
    4fe8:	f7 01       	movw	r30, r14
    4fea:	80 81       	ld	r24, Z
    4fec:	01 c0       	rjmp	.+2      	; 0x4ff0 <vfprintf+0x36c>
    4fee:	80 e3       	ldi	r24, 0x30	; 48
    4ff0:	01 50       	subi	r16, 0x01	; 1
    4ff2:	10 40       	sbci	r17, 0x00	; 0
    4ff4:	08 94       	sec
    4ff6:	e1 1c       	adc	r14, r1
    4ff8:	f1 1c       	adc	r15, r1
    4ffa:	0a 15       	cp	r16, r10
    4ffc:	1b 05       	cpc	r17, r11
    4ffe:	24 f0       	brlt	.+8      	; 0x5008 <vfprintf+0x384>
    5000:	90 e0       	ldi	r25, 0x00	; 0
    5002:	b3 01       	movw	r22, r6
    5004:	92 d4       	rcall	.+2340   	; 0x592a <fputc>
    5006:	e2 cf       	rjmp	.-60     	; 0x4fcc <vfprintf+0x348>
    5008:	0c 15       	cp	r16, r12
    500a:	1d 05       	cpc	r17, r13
    500c:	39 f4       	brne	.+14     	; 0x501c <vfprintf+0x398>
    500e:	9a 81       	ldd	r25, Y+2	; 0x02
    5010:	96 33       	cpi	r25, 0x36	; 54
    5012:	18 f4       	brcc	.+6      	; 0x501a <vfprintf+0x396>
    5014:	95 33       	cpi	r25, 0x35	; 53
    5016:	11 f4       	brne	.+4      	; 0x501c <vfprintf+0x398>
    5018:	24 fe       	sbrs	r2, 4
    501a:	81 e3       	ldi	r24, 0x31	; 49
    501c:	90 e0       	ldi	r25, 0x00	; 0
    501e:	45 c0       	rjmp	.+138    	; 0x50aa <vfprintf+0x426>
    5020:	8a 81       	ldd	r24, Y+2	; 0x02
    5022:	81 33       	cpi	r24, 0x31	; 49
    5024:	09 f0       	breq	.+2      	; 0x5028 <vfprintf+0x3a4>
    5026:	0f 7e       	andi	r16, 0xEF	; 239
    5028:	90 e0       	ldi	r25, 0x00	; 0
    502a:	b3 01       	movw	r22, r6
    502c:	7e d4       	rcall	.+2300   	; 0x592a <fputc>
    502e:	99 20       	and	r9, r9
    5030:	91 f0       	breq	.+36     	; 0x5056 <vfprintf+0x3d2>
    5032:	8e e2       	ldi	r24, 0x2E	; 46
    5034:	90 e0       	ldi	r25, 0x00	; 0
    5036:	b3 01       	movw	r22, r6
    5038:	78 d4       	rcall	.+2288   	; 0x592a <fputc>
    503a:	12 e0       	ldi	r17, 0x02	; 2
    503c:	e1 e0       	ldi	r30, 0x01	; 1
    503e:	f0 e0       	ldi	r31, 0x00	; 0
    5040:	ec 0f       	add	r30, r28
    5042:	fd 1f       	adc	r31, r29
    5044:	e1 0f       	add	r30, r17
    5046:	f1 1d       	adc	r31, r1
    5048:	1f 5f       	subi	r17, 0xFF	; 255
    504a:	80 81       	ld	r24, Z
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	b3 01       	movw	r22, r6
    5050:	6c d4       	rcall	.+2264   	; 0x592a <fputc>
    5052:	9a 94       	dec	r9
    5054:	99 f7       	brne	.-26     	; 0x503c <vfprintf+0x3b8>
    5056:	44 fc       	sbrc	r4, 4
    5058:	03 c0       	rjmp	.+6      	; 0x5060 <vfprintf+0x3dc>
    505a:	85 e6       	ldi	r24, 0x65	; 101
    505c:	90 e0       	ldi	r25, 0x00	; 0
    505e:	02 c0       	rjmp	.+4      	; 0x5064 <vfprintf+0x3e0>
    5060:	85 e4       	ldi	r24, 0x45	; 69
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	b3 01       	movw	r22, r6
    5066:	61 d4       	rcall	.+2242   	; 0x592a <fputc>
    5068:	d7 fc       	sbrc	r13, 7
    506a:	05 c0       	rjmp	.+10     	; 0x5076 <vfprintf+0x3f2>
    506c:	c1 14       	cp	r12, r1
    506e:	d1 04       	cpc	r13, r1
    5070:	41 f4       	brne	.+16     	; 0x5082 <vfprintf+0x3fe>
    5072:	04 ff       	sbrs	r16, 4
    5074:	06 c0       	rjmp	.+12     	; 0x5082 <vfprintf+0x3fe>
    5076:	d0 94       	com	r13
    5078:	c1 94       	neg	r12
    507a:	d1 08       	sbc	r13, r1
    507c:	d3 94       	inc	r13
    507e:	8d e2       	ldi	r24, 0x2D	; 45
    5080:	01 c0       	rjmp	.+2      	; 0x5084 <vfprintf+0x400>
    5082:	8b e2       	ldi	r24, 0x2B	; 43
    5084:	90 e0       	ldi	r25, 0x00	; 0
    5086:	b3 01       	movw	r22, r6
    5088:	50 d4       	rcall	.+2208   	; 0x592a <fputc>
    508a:	80 e3       	ldi	r24, 0x30	; 48
    508c:	05 c0       	rjmp	.+10     	; 0x5098 <vfprintf+0x414>
    508e:	8f 5f       	subi	r24, 0xFF	; 255
    5090:	26 ef       	ldi	r18, 0xF6	; 246
    5092:	3f ef       	ldi	r19, 0xFF	; 255
    5094:	c2 0e       	add	r12, r18
    5096:	d3 1e       	adc	r13, r19
    5098:	3a e0       	ldi	r19, 0x0A	; 10
    509a:	c3 16       	cp	r12, r19
    509c:	d1 04       	cpc	r13, r1
    509e:	bc f7       	brge	.-18     	; 0x508e <vfprintf+0x40a>
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	b3 01       	movw	r22, r6
    50a4:	42 d4       	rcall	.+2180   	; 0x592a <fputc>
    50a6:	c6 01       	movw	r24, r12
    50a8:	c0 96       	adiw	r24, 0x30	; 48
    50aa:	b3 01       	movw	r22, r6
    50ac:	3e d4       	rcall	.+2172   	; 0x592a <fputc>
    50ae:	cc 84       	ldd	r12, Y+12	; 0x0c
    50b0:	dd 84       	ldd	r13, Y+13	; 0x0d
    50b2:	46 c1       	rjmp	.+652    	; 0x5340 <vfprintf+0x6bc>
    50b4:	93 36       	cpi	r25, 0x63	; 99
    50b6:	31 f0       	breq	.+12     	; 0x50c4 <vfprintf+0x440>
    50b8:	93 37       	cpi	r25, 0x73	; 115
    50ba:	99 f0       	breq	.+38     	; 0x50e2 <vfprintf+0x45e>
    50bc:	93 35       	cpi	r25, 0x53	; 83
    50be:	09 f0       	breq	.+2      	; 0x50c2 <vfprintf+0x43e>
    50c0:	55 c0       	rjmp	.+170    	; 0x516c <vfprintf+0x4e8>
    50c2:	22 c0       	rjmp	.+68     	; 0x5108 <vfprintf+0x484>
    50c4:	f6 01       	movw	r30, r12
    50c6:	80 81       	ld	r24, Z
    50c8:	89 83       	std	Y+1, r24	; 0x01
    50ca:	5e 01       	movw	r10, r28
    50cc:	08 94       	sec
    50ce:	a1 1c       	adc	r10, r1
    50d0:	b1 1c       	adc	r11, r1
    50d2:	22 e0       	ldi	r18, 0x02	; 2
    50d4:	30 e0       	ldi	r19, 0x00	; 0
    50d6:	c2 0e       	add	r12, r18
    50d8:	d3 1e       	adc	r13, r19
    50da:	21 e0       	ldi	r18, 0x01	; 1
    50dc:	e2 2e       	mov	r14, r18
    50de:	f1 2c       	mov	r15, r1
    50e0:	11 c0       	rjmp	.+34     	; 0x5104 <vfprintf+0x480>
    50e2:	f6 01       	movw	r30, r12
    50e4:	a0 80       	ld	r10, Z
    50e6:	b1 80       	ldd	r11, Z+1	; 0x01
    50e8:	16 fd       	sbrc	r17, 6
    50ea:	03 c0       	rjmp	.+6      	; 0x50f2 <vfprintf+0x46e>
    50ec:	6f ef       	ldi	r22, 0xFF	; 255
    50ee:	7f ef       	ldi	r23, 0xFF	; 255
    50f0:	02 c0       	rjmp	.+4      	; 0x50f6 <vfprintf+0x472>
    50f2:	69 2d       	mov	r22, r9
    50f4:	70 e0       	ldi	r23, 0x00	; 0
    50f6:	22 e0       	ldi	r18, 0x02	; 2
    50f8:	30 e0       	ldi	r19, 0x00	; 0
    50fa:	c2 0e       	add	r12, r18
    50fc:	d3 1e       	adc	r13, r19
    50fe:	c5 01       	movw	r24, r10
    5100:	09 d4       	rcall	.+2066   	; 0x5914 <strnlen>
    5102:	7c 01       	movw	r14, r24
    5104:	1f 77       	andi	r17, 0x7F	; 127
    5106:	12 c0       	rjmp	.+36     	; 0x512c <vfprintf+0x4a8>
    5108:	f6 01       	movw	r30, r12
    510a:	a0 80       	ld	r10, Z
    510c:	b1 80       	ldd	r11, Z+1	; 0x01
    510e:	16 fd       	sbrc	r17, 6
    5110:	03 c0       	rjmp	.+6      	; 0x5118 <vfprintf+0x494>
    5112:	6f ef       	ldi	r22, 0xFF	; 255
    5114:	7f ef       	ldi	r23, 0xFF	; 255
    5116:	02 c0       	rjmp	.+4      	; 0x511c <vfprintf+0x498>
    5118:	69 2d       	mov	r22, r9
    511a:	70 e0       	ldi	r23, 0x00	; 0
    511c:	22 e0       	ldi	r18, 0x02	; 2
    511e:	30 e0       	ldi	r19, 0x00	; 0
    5120:	c2 0e       	add	r12, r18
    5122:	d3 1e       	adc	r13, r19
    5124:	c5 01       	movw	r24, r10
    5126:	eb d3       	rcall	.+2006   	; 0x58fe <strnlen_P>
    5128:	7c 01       	movw	r14, r24
    512a:	10 68       	ori	r17, 0x80	; 128
    512c:	13 ff       	sbrs	r17, 3
    512e:	06 c0       	rjmp	.+12     	; 0x513c <vfprintf+0x4b8>
    5130:	19 c0       	rjmp	.+50     	; 0x5164 <vfprintf+0x4e0>
    5132:	80 e2       	ldi	r24, 0x20	; 32
    5134:	90 e0       	ldi	r25, 0x00	; 0
    5136:	b3 01       	movw	r22, r6
    5138:	f8 d3       	rcall	.+2032   	; 0x592a <fputc>
    513a:	8a 94       	dec	r8
    513c:	88 2d       	mov	r24, r8
    513e:	90 e0       	ldi	r25, 0x00	; 0
    5140:	e8 16       	cp	r14, r24
    5142:	f9 06       	cpc	r15, r25
    5144:	b0 f3       	brcs	.-20     	; 0x5132 <vfprintf+0x4ae>
    5146:	0e c0       	rjmp	.+28     	; 0x5164 <vfprintf+0x4e0>
    5148:	f5 01       	movw	r30, r10
    514a:	17 fd       	sbrc	r17, 7
    514c:	85 91       	lpm	r24, Z+
    514e:	17 ff       	sbrs	r17, 7
    5150:	81 91       	ld	r24, Z+
    5152:	5f 01       	movw	r10, r30
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	b3 01       	movw	r22, r6
    5158:	e8 d3       	rcall	.+2000   	; 0x592a <fputc>
    515a:	81 10       	cpse	r8, r1
    515c:	8a 94       	dec	r8
    515e:	08 94       	sec
    5160:	e1 08       	sbc	r14, r1
    5162:	f1 08       	sbc	r15, r1
    5164:	e1 14       	cp	r14, r1
    5166:	f1 04       	cpc	r15, r1
    5168:	79 f7       	brne	.-34     	; 0x5148 <vfprintf+0x4c4>
    516a:	ea c0       	rjmp	.+468    	; 0x5340 <vfprintf+0x6bc>
    516c:	94 36       	cpi	r25, 0x64	; 100
    516e:	11 f0       	breq	.+4      	; 0x5174 <vfprintf+0x4f0>
    5170:	99 36       	cpi	r25, 0x69	; 105
    5172:	81 f5       	brne	.+96     	; 0x51d4 <vfprintf+0x550>
    5174:	17 ff       	sbrs	r17, 7
    5176:	08 c0       	rjmp	.+16     	; 0x5188 <vfprintf+0x504>
    5178:	f6 01       	movw	r30, r12
    517a:	20 81       	ld	r18, Z
    517c:	31 81       	ldd	r19, Z+1	; 0x01
    517e:	42 81       	ldd	r20, Z+2	; 0x02
    5180:	53 81       	ldd	r21, Z+3	; 0x03
    5182:	84 e0       	ldi	r24, 0x04	; 4
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	0a c0       	rjmp	.+20     	; 0x519c <vfprintf+0x518>
    5188:	f6 01       	movw	r30, r12
    518a:	80 81       	ld	r24, Z
    518c:	91 81       	ldd	r25, Z+1	; 0x01
    518e:	9c 01       	movw	r18, r24
    5190:	44 27       	eor	r20, r20
    5192:	37 fd       	sbrc	r19, 7
    5194:	40 95       	com	r20
    5196:	54 2f       	mov	r21, r20
    5198:	82 e0       	ldi	r24, 0x02	; 2
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	c8 0e       	add	r12, r24
    519e:	d9 1e       	adc	r13, r25
    51a0:	9f e6       	ldi	r25, 0x6F	; 111
    51a2:	f9 2e       	mov	r15, r25
    51a4:	f1 22       	and	r15, r17
    51a6:	57 ff       	sbrs	r21, 7
    51a8:	09 c0       	rjmp	.+18     	; 0x51bc <vfprintf+0x538>
    51aa:	50 95       	com	r21
    51ac:	40 95       	com	r20
    51ae:	30 95       	com	r19
    51b0:	21 95       	neg	r18
    51b2:	3f 4f       	sbci	r19, 0xFF	; 255
    51b4:	4f 4f       	sbci	r20, 0xFF	; 255
    51b6:	5f 4f       	sbci	r21, 0xFF	; 255
    51b8:	90 e8       	ldi	r25, 0x80	; 128
    51ba:	f9 2a       	or	r15, r25
    51bc:	ca 01       	movw	r24, r20
    51be:	b9 01       	movw	r22, r18
    51c0:	ae 01       	movw	r20, r28
    51c2:	4f 5f       	subi	r20, 0xFF	; 255
    51c4:	5f 4f       	sbci	r21, 0xFF	; 255
    51c6:	2a e0       	ldi	r18, 0x0A	; 10
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	10 d4       	rcall	.+2080   	; 0x59ec <__ultoa_invert>
    51cc:	e8 2e       	mov	r14, r24
    51ce:	e8 89       	ldd	r30, Y+16	; 0x10
    51d0:	ee 1a       	sub	r14, r30
    51d2:	40 c0       	rjmp	.+128    	; 0x5254 <vfprintf+0x5d0>
    51d4:	95 37       	cpi	r25, 0x75	; 117
    51d6:	21 f4       	brne	.+8      	; 0x51e0 <vfprintf+0x55c>
    51d8:	1f 7e       	andi	r17, 0xEF	; 239
    51da:	2a e0       	ldi	r18, 0x0A	; 10
    51dc:	30 e0       	ldi	r19, 0x00	; 0
    51de:	1c c0       	rjmp	.+56     	; 0x5218 <vfprintf+0x594>
    51e0:	19 7f       	andi	r17, 0xF9	; 249
    51e2:	9f 36       	cpi	r25, 0x6F	; 111
    51e4:	61 f0       	breq	.+24     	; 0x51fe <vfprintf+0x57a>
    51e6:	90 37       	cpi	r25, 0x70	; 112
    51e8:	20 f4       	brcc	.+8      	; 0x51f2 <vfprintf+0x56e>
    51ea:	98 35       	cpi	r25, 0x58	; 88
    51ec:	09 f0       	breq	.+2      	; 0x51f0 <vfprintf+0x56c>
    51ee:	ab c0       	rjmp	.+342    	; 0x5346 <vfprintf+0x6c2>
    51f0:	0f c0       	rjmp	.+30     	; 0x5210 <vfprintf+0x58c>
    51f2:	90 37       	cpi	r25, 0x70	; 112
    51f4:	39 f0       	breq	.+14     	; 0x5204 <vfprintf+0x580>
    51f6:	98 37       	cpi	r25, 0x78	; 120
    51f8:	09 f0       	breq	.+2      	; 0x51fc <vfprintf+0x578>
    51fa:	a5 c0       	rjmp	.+330    	; 0x5346 <vfprintf+0x6c2>
    51fc:	04 c0       	rjmp	.+8      	; 0x5206 <vfprintf+0x582>
    51fe:	28 e0       	ldi	r18, 0x08	; 8
    5200:	30 e0       	ldi	r19, 0x00	; 0
    5202:	0a c0       	rjmp	.+20     	; 0x5218 <vfprintf+0x594>
    5204:	10 61       	ori	r17, 0x10	; 16
    5206:	14 fd       	sbrc	r17, 4
    5208:	14 60       	ori	r17, 0x04	; 4
    520a:	20 e1       	ldi	r18, 0x10	; 16
    520c:	30 e0       	ldi	r19, 0x00	; 0
    520e:	04 c0       	rjmp	.+8      	; 0x5218 <vfprintf+0x594>
    5210:	14 fd       	sbrc	r17, 4
    5212:	16 60       	ori	r17, 0x06	; 6
    5214:	20 e1       	ldi	r18, 0x10	; 16
    5216:	32 e0       	ldi	r19, 0x02	; 2
    5218:	17 ff       	sbrs	r17, 7
    521a:	08 c0       	rjmp	.+16     	; 0x522c <vfprintf+0x5a8>
    521c:	f6 01       	movw	r30, r12
    521e:	60 81       	ld	r22, Z
    5220:	71 81       	ldd	r23, Z+1	; 0x01
    5222:	82 81       	ldd	r24, Z+2	; 0x02
    5224:	93 81       	ldd	r25, Z+3	; 0x03
    5226:	44 e0       	ldi	r20, 0x04	; 4
    5228:	50 e0       	ldi	r21, 0x00	; 0
    522a:	08 c0       	rjmp	.+16     	; 0x523c <vfprintf+0x5b8>
    522c:	f6 01       	movw	r30, r12
    522e:	80 81       	ld	r24, Z
    5230:	91 81       	ldd	r25, Z+1	; 0x01
    5232:	bc 01       	movw	r22, r24
    5234:	80 e0       	ldi	r24, 0x00	; 0
    5236:	90 e0       	ldi	r25, 0x00	; 0
    5238:	42 e0       	ldi	r20, 0x02	; 2
    523a:	50 e0       	ldi	r21, 0x00	; 0
    523c:	c4 0e       	add	r12, r20
    523e:	d5 1e       	adc	r13, r21
    5240:	ae 01       	movw	r20, r28
    5242:	4f 5f       	subi	r20, 0xFF	; 255
    5244:	5f 4f       	sbci	r21, 0xFF	; 255
    5246:	d2 d3       	rcall	.+1956   	; 0x59ec <__ultoa_invert>
    5248:	e8 2e       	mov	r14, r24
    524a:	58 89       	ldd	r21, Y+16	; 0x10
    524c:	e5 1a       	sub	r14, r21
    524e:	8f e7       	ldi	r24, 0x7F	; 127
    5250:	f8 2e       	mov	r15, r24
    5252:	f1 22       	and	r15, r17
    5254:	f6 fe       	sbrs	r15, 6
    5256:	0b c0       	rjmp	.+22     	; 0x526e <vfprintf+0x5ea>
    5258:	8e ef       	ldi	r24, 0xFE	; 254
    525a:	f8 22       	and	r15, r24
    525c:	e9 14       	cp	r14, r9
    525e:	38 f4       	brcc	.+14     	; 0x526e <vfprintf+0x5ea>
    5260:	f4 fe       	sbrs	r15, 4
    5262:	07 c0       	rjmp	.+14     	; 0x5272 <vfprintf+0x5ee>
    5264:	f2 fc       	sbrc	r15, 2
    5266:	05 c0       	rjmp	.+10     	; 0x5272 <vfprintf+0x5ee>
    5268:	9f ee       	ldi	r25, 0xEF	; 239
    526a:	f9 22       	and	r15, r25
    526c:	02 c0       	rjmp	.+4      	; 0x5272 <vfprintf+0x5ee>
    526e:	1e 2d       	mov	r17, r14
    5270:	01 c0       	rjmp	.+2      	; 0x5274 <vfprintf+0x5f0>
    5272:	19 2d       	mov	r17, r9
    5274:	f4 fe       	sbrs	r15, 4
    5276:	0d c0       	rjmp	.+26     	; 0x5292 <vfprintf+0x60e>
    5278:	fe 01       	movw	r30, r28
    527a:	ee 0d       	add	r30, r14
    527c:	f1 1d       	adc	r31, r1
    527e:	80 81       	ld	r24, Z
    5280:	80 33       	cpi	r24, 0x30	; 48
    5282:	19 f4       	brne	.+6      	; 0x528a <vfprintf+0x606>
    5284:	e9 ee       	ldi	r30, 0xE9	; 233
    5286:	fe 22       	and	r15, r30
    5288:	08 c0       	rjmp	.+16     	; 0x529a <vfprintf+0x616>
    528a:	1f 5f       	subi	r17, 0xFF	; 255
    528c:	f2 fe       	sbrs	r15, 2
    528e:	05 c0       	rjmp	.+10     	; 0x529a <vfprintf+0x616>
    5290:	03 c0       	rjmp	.+6      	; 0x5298 <vfprintf+0x614>
    5292:	8f 2d       	mov	r24, r15
    5294:	86 78       	andi	r24, 0x86	; 134
    5296:	09 f0       	breq	.+2      	; 0x529a <vfprintf+0x616>
    5298:	1f 5f       	subi	r17, 0xFF	; 255
    529a:	0f 2d       	mov	r16, r15
    529c:	f3 fc       	sbrc	r15, 3
    529e:	13 c0       	rjmp	.+38     	; 0x52c6 <vfprintf+0x642>
    52a0:	f0 fe       	sbrs	r15, 0
    52a2:	0e c0       	rjmp	.+28     	; 0x52c0 <vfprintf+0x63c>
    52a4:	18 15       	cp	r17, r8
    52a6:	10 f0       	brcs	.+4      	; 0x52ac <vfprintf+0x628>
    52a8:	9e 2c       	mov	r9, r14
    52aa:	0a c0       	rjmp	.+20     	; 0x52c0 <vfprintf+0x63c>
    52ac:	9e 2c       	mov	r9, r14
    52ae:	98 0c       	add	r9, r8
    52b0:	91 1a       	sub	r9, r17
    52b2:	18 2d       	mov	r17, r8
    52b4:	05 c0       	rjmp	.+10     	; 0x52c0 <vfprintf+0x63c>
    52b6:	80 e2       	ldi	r24, 0x20	; 32
    52b8:	90 e0       	ldi	r25, 0x00	; 0
    52ba:	b3 01       	movw	r22, r6
    52bc:	36 d3       	rcall	.+1644   	; 0x592a <fputc>
    52be:	1f 5f       	subi	r17, 0xFF	; 255
    52c0:	18 15       	cp	r17, r8
    52c2:	c8 f3       	brcs	.-14     	; 0x52b6 <vfprintf+0x632>
    52c4:	04 c0       	rjmp	.+8      	; 0x52ce <vfprintf+0x64a>
    52c6:	18 15       	cp	r17, r8
    52c8:	10 f4       	brcc	.+4      	; 0x52ce <vfprintf+0x64a>
    52ca:	81 1a       	sub	r8, r17
    52cc:	01 c0       	rjmp	.+2      	; 0x52d0 <vfprintf+0x64c>
    52ce:	88 24       	eor	r8, r8
    52d0:	04 ff       	sbrs	r16, 4
    52d2:	0e c0       	rjmp	.+28     	; 0x52f0 <vfprintf+0x66c>
    52d4:	80 e3       	ldi	r24, 0x30	; 48
    52d6:	90 e0       	ldi	r25, 0x00	; 0
    52d8:	b3 01       	movw	r22, r6
    52da:	27 d3       	rcall	.+1614   	; 0x592a <fputc>
    52dc:	02 ff       	sbrs	r16, 2
    52de:	1b c0       	rjmp	.+54     	; 0x5316 <vfprintf+0x692>
    52e0:	01 fd       	sbrc	r16, 1
    52e2:	03 c0       	rjmp	.+6      	; 0x52ea <vfprintf+0x666>
    52e4:	88 e7       	ldi	r24, 0x78	; 120
    52e6:	90 e0       	ldi	r25, 0x00	; 0
    52e8:	0e c0       	rjmp	.+28     	; 0x5306 <vfprintf+0x682>
    52ea:	88 e5       	ldi	r24, 0x58	; 88
    52ec:	90 e0       	ldi	r25, 0x00	; 0
    52ee:	0b c0       	rjmp	.+22     	; 0x5306 <vfprintf+0x682>
    52f0:	80 2f       	mov	r24, r16
    52f2:	86 78       	andi	r24, 0x86	; 134
    52f4:	81 f0       	breq	.+32     	; 0x5316 <vfprintf+0x692>
    52f6:	01 ff       	sbrs	r16, 1
    52f8:	02 c0       	rjmp	.+4      	; 0x52fe <vfprintf+0x67a>
    52fa:	8b e2       	ldi	r24, 0x2B	; 43
    52fc:	01 c0       	rjmp	.+2      	; 0x5300 <vfprintf+0x67c>
    52fe:	80 e2       	ldi	r24, 0x20	; 32
    5300:	f7 fc       	sbrc	r15, 7
    5302:	8d e2       	ldi	r24, 0x2D	; 45
    5304:	90 e0       	ldi	r25, 0x00	; 0
    5306:	b3 01       	movw	r22, r6
    5308:	10 d3       	rcall	.+1568   	; 0x592a <fputc>
    530a:	05 c0       	rjmp	.+10     	; 0x5316 <vfprintf+0x692>
    530c:	80 e3       	ldi	r24, 0x30	; 48
    530e:	90 e0       	ldi	r25, 0x00	; 0
    5310:	b3 01       	movw	r22, r6
    5312:	0b d3       	rcall	.+1558   	; 0x592a <fputc>
    5314:	9a 94       	dec	r9
    5316:	e9 14       	cp	r14, r9
    5318:	c8 f3       	brcs	.-14     	; 0x530c <vfprintf+0x688>
    531a:	ea 94       	dec	r14
    531c:	e1 e0       	ldi	r30, 0x01	; 1
    531e:	f0 e0       	ldi	r31, 0x00	; 0
    5320:	ec 0f       	add	r30, r28
    5322:	fd 1f       	adc	r31, r29
    5324:	ee 0d       	add	r30, r14
    5326:	f1 1d       	adc	r31, r1
    5328:	80 81       	ld	r24, Z
    532a:	90 e0       	ldi	r25, 0x00	; 0
    532c:	b3 01       	movw	r22, r6
    532e:	fd d2       	rcall	.+1530   	; 0x592a <fputc>
    5330:	ee 20       	and	r14, r14
    5332:	99 f7       	brne	.-26     	; 0x531a <vfprintf+0x696>
    5334:	05 c0       	rjmp	.+10     	; 0x5340 <vfprintf+0x6bc>
    5336:	80 e2       	ldi	r24, 0x20	; 32
    5338:	90 e0       	ldi	r25, 0x00	; 0
    533a:	b3 01       	movw	r22, r6
    533c:	f6 d2       	rcall	.+1516   	; 0x592a <fputc>
    533e:	8a 94       	dec	r8
    5340:	88 20       	and	r8, r8
    5342:	c9 f7       	brne	.-14     	; 0x5336 <vfprintf+0x6b2>
    5344:	b6 cc       	rjmp	.-1684   	; 0x4cb2 <vfprintf+0x2e>
    5346:	f3 01       	movw	r30, r6
    5348:	66 81       	ldd	r22, Z+6	; 0x06
    534a:	77 81       	ldd	r23, Z+7	; 0x07
    534c:	cb 01       	movw	r24, r22
    534e:	61 96       	adiw	r28, 0x11	; 17
    5350:	e2 e1       	ldi	r30, 0x12	; 18
    5352:	70 c0       	rjmp	.+224    	; 0x5434 <__epilogue_restores__>

00005354 <__mulsi3>:
    5354:	62 9f       	mul	r22, r18
    5356:	d0 01       	movw	r26, r0
    5358:	73 9f       	mul	r23, r19
    535a:	f0 01       	movw	r30, r0
    535c:	82 9f       	mul	r24, r18
    535e:	e0 0d       	add	r30, r0
    5360:	f1 1d       	adc	r31, r1
    5362:	64 9f       	mul	r22, r20
    5364:	e0 0d       	add	r30, r0
    5366:	f1 1d       	adc	r31, r1
    5368:	92 9f       	mul	r25, r18
    536a:	f0 0d       	add	r31, r0
    536c:	83 9f       	mul	r24, r19
    536e:	f0 0d       	add	r31, r0
    5370:	74 9f       	mul	r23, r20
    5372:	f0 0d       	add	r31, r0
    5374:	65 9f       	mul	r22, r21
    5376:	f0 0d       	add	r31, r0
    5378:	99 27       	eor	r25, r25
    537a:	72 9f       	mul	r23, r18
    537c:	b0 0d       	add	r27, r0
    537e:	e1 1d       	adc	r30, r1
    5380:	f9 1f       	adc	r31, r25
    5382:	63 9f       	mul	r22, r19
    5384:	b0 0d       	add	r27, r0
    5386:	e1 1d       	adc	r30, r1
    5388:	f9 1f       	adc	r31, r25
    538a:	bd 01       	movw	r22, r26
    538c:	cf 01       	movw	r24, r30
    538e:	11 24       	eor	r1, r1
    5390:	08 95       	ret

00005392 <__divmodhi4>:
    5392:	97 fb       	bst	r25, 7
    5394:	09 2e       	mov	r0, r25
    5396:	07 26       	eor	r0, r23
    5398:	0a d0       	rcall	.+20     	; 0x53ae <__divmodhi4_neg1>
    539a:	77 fd       	sbrc	r23, 7
    539c:	04 d0       	rcall	.+8      	; 0x53a6 <__divmodhi4_neg2>
    539e:	65 d0       	rcall	.+202    	; 0x546a <__udivmodhi4>
    53a0:	06 d0       	rcall	.+12     	; 0x53ae <__divmodhi4_neg1>
    53a2:	00 20       	and	r0, r0
    53a4:	1a f4       	brpl	.+6      	; 0x53ac <__divmodhi4_exit>

000053a6 <__divmodhi4_neg2>:
    53a6:	70 95       	com	r23
    53a8:	61 95       	neg	r22
    53aa:	7f 4f       	sbci	r23, 0xFF	; 255

000053ac <__divmodhi4_exit>:
    53ac:	08 95       	ret

000053ae <__divmodhi4_neg1>:
    53ae:	f6 f7       	brtc	.-4      	; 0x53ac <__divmodhi4_exit>
    53b0:	90 95       	com	r25
    53b2:	81 95       	neg	r24
    53b4:	9f 4f       	sbci	r25, 0xFF	; 255
    53b6:	08 95       	ret

000053b8 <__udivmodsi4>:
    53b8:	a1 e2       	ldi	r26, 0x21	; 33
    53ba:	1a 2e       	mov	r1, r26
    53bc:	aa 1b       	sub	r26, r26
    53be:	bb 1b       	sub	r27, r27
    53c0:	fd 01       	movw	r30, r26
    53c2:	0d c0       	rjmp	.+26     	; 0x53de <__udivmodsi4_ep>

000053c4 <__udivmodsi4_loop>:
    53c4:	aa 1f       	adc	r26, r26
    53c6:	bb 1f       	adc	r27, r27
    53c8:	ee 1f       	adc	r30, r30
    53ca:	ff 1f       	adc	r31, r31
    53cc:	a2 17       	cp	r26, r18
    53ce:	b3 07       	cpc	r27, r19
    53d0:	e4 07       	cpc	r30, r20
    53d2:	f5 07       	cpc	r31, r21
    53d4:	20 f0       	brcs	.+8      	; 0x53de <__udivmodsi4_ep>
    53d6:	a2 1b       	sub	r26, r18
    53d8:	b3 0b       	sbc	r27, r19
    53da:	e4 0b       	sbc	r30, r20
    53dc:	f5 0b       	sbc	r31, r21

000053de <__udivmodsi4_ep>:
    53de:	66 1f       	adc	r22, r22
    53e0:	77 1f       	adc	r23, r23
    53e2:	88 1f       	adc	r24, r24
    53e4:	99 1f       	adc	r25, r25
    53e6:	1a 94       	dec	r1
    53e8:	69 f7       	brne	.-38     	; 0x53c4 <__udivmodsi4_loop>
    53ea:	60 95       	com	r22
    53ec:	70 95       	com	r23
    53ee:	80 95       	com	r24
    53f0:	90 95       	com	r25
    53f2:	9b 01       	movw	r18, r22
    53f4:	ac 01       	movw	r20, r24
    53f6:	bd 01       	movw	r22, r26
    53f8:	cf 01       	movw	r24, r30
    53fa:	08 95       	ret

000053fc <__prologue_saves__>:
    53fc:	2f 92       	push	r2
    53fe:	3f 92       	push	r3
    5400:	4f 92       	push	r4
    5402:	5f 92       	push	r5
    5404:	6f 92       	push	r6
    5406:	7f 92       	push	r7
    5408:	8f 92       	push	r8
    540a:	9f 92       	push	r9
    540c:	af 92       	push	r10
    540e:	bf 92       	push	r11
    5410:	cf 92       	push	r12
    5412:	df 92       	push	r13
    5414:	ef 92       	push	r14
    5416:	ff 92       	push	r15
    5418:	0f 93       	push	r16
    541a:	1f 93       	push	r17
    541c:	cf 93       	push	r28
    541e:	df 93       	push	r29
    5420:	cd b7       	in	r28, 0x3d	; 61
    5422:	de b7       	in	r29, 0x3e	; 62
    5424:	ca 1b       	sub	r28, r26
    5426:	db 0b       	sbc	r29, r27
    5428:	0f b6       	in	r0, 0x3f	; 63
    542a:	f8 94       	cli
    542c:	de bf       	out	0x3e, r29	; 62
    542e:	0f be       	out	0x3f, r0	; 63
    5430:	cd bf       	out	0x3d, r28	; 61
    5432:	09 94       	ijmp

00005434 <__epilogue_restores__>:
    5434:	2a 88       	ldd	r2, Y+18	; 0x12
    5436:	39 88       	ldd	r3, Y+17	; 0x11
    5438:	48 88       	ldd	r4, Y+16	; 0x10
    543a:	5f 84       	ldd	r5, Y+15	; 0x0f
    543c:	6e 84       	ldd	r6, Y+14	; 0x0e
    543e:	7d 84       	ldd	r7, Y+13	; 0x0d
    5440:	8c 84       	ldd	r8, Y+12	; 0x0c
    5442:	9b 84       	ldd	r9, Y+11	; 0x0b
    5444:	aa 84       	ldd	r10, Y+10	; 0x0a
    5446:	b9 84       	ldd	r11, Y+9	; 0x09
    5448:	c8 84       	ldd	r12, Y+8	; 0x08
    544a:	df 80       	ldd	r13, Y+7	; 0x07
    544c:	ee 80       	ldd	r14, Y+6	; 0x06
    544e:	fd 80       	ldd	r15, Y+5	; 0x05
    5450:	0c 81       	ldd	r16, Y+4	; 0x04
    5452:	1b 81       	ldd	r17, Y+3	; 0x03
    5454:	aa 81       	ldd	r26, Y+2	; 0x02
    5456:	b9 81       	ldd	r27, Y+1	; 0x01
    5458:	ce 0f       	add	r28, r30
    545a:	d1 1d       	adc	r29, r1
    545c:	0f b6       	in	r0, 0x3f	; 63
    545e:	f8 94       	cli
    5460:	de bf       	out	0x3e, r29	; 62
    5462:	0f be       	out	0x3f, r0	; 63
    5464:	cd bf       	out	0x3d, r28	; 61
    5466:	ed 01       	movw	r28, r26
    5468:	08 95       	ret

0000546a <__udivmodhi4>:
    546a:	aa 1b       	sub	r26, r26
    546c:	bb 1b       	sub	r27, r27
    546e:	51 e1       	ldi	r21, 0x11	; 17
    5470:	07 c0       	rjmp	.+14     	; 0x5480 <__udivmodhi4_ep>

00005472 <__udivmodhi4_loop>:
    5472:	aa 1f       	adc	r26, r26
    5474:	bb 1f       	adc	r27, r27
    5476:	a6 17       	cp	r26, r22
    5478:	b7 07       	cpc	r27, r23
    547a:	10 f0       	brcs	.+4      	; 0x5480 <__udivmodhi4_ep>
    547c:	a6 1b       	sub	r26, r22
    547e:	b7 0b       	sbc	r27, r23

00005480 <__udivmodhi4_ep>:
    5480:	88 1f       	adc	r24, r24
    5482:	99 1f       	adc	r25, r25
    5484:	5a 95       	dec	r21
    5486:	a9 f7       	brne	.-22     	; 0x5472 <__udivmodhi4_loop>
    5488:	80 95       	com	r24
    548a:	90 95       	com	r25
    548c:	bc 01       	movw	r22, r24
    548e:	cd 01       	movw	r24, r26
    5490:	08 95       	ret

00005492 <malloc>:
    5492:	cf 93       	push	r28
    5494:	df 93       	push	r29
    5496:	bc 01       	movw	r22, r24
    5498:	82 30       	cpi	r24, 0x02	; 2
    549a:	91 05       	cpc	r25, r1
    549c:	10 f4       	brcc	.+4      	; 0x54a2 <malloc+0x10>
    549e:	62 e0       	ldi	r22, 0x02	; 2
    54a0:	70 e0       	ldi	r23, 0x00	; 0
    54a2:	a0 91 a5 04 	lds	r26, 0x04A5
    54a6:	b0 91 a6 04 	lds	r27, 0x04A6
    54aa:	ed 01       	movw	r28, r26
    54ac:	e0 e0       	ldi	r30, 0x00	; 0
    54ae:	f0 e0       	ldi	r31, 0x00	; 0
    54b0:	40 e0       	ldi	r20, 0x00	; 0
    54b2:	50 e0       	ldi	r21, 0x00	; 0
    54b4:	21 c0       	rjmp	.+66     	; 0x54f8 <malloc+0x66>
    54b6:	88 81       	ld	r24, Y
    54b8:	99 81       	ldd	r25, Y+1	; 0x01
    54ba:	86 17       	cp	r24, r22
    54bc:	97 07       	cpc	r25, r23
    54be:	69 f4       	brne	.+26     	; 0x54da <malloc+0x48>
    54c0:	8a 81       	ldd	r24, Y+2	; 0x02
    54c2:	9b 81       	ldd	r25, Y+3	; 0x03
    54c4:	30 97       	sbiw	r30, 0x00	; 0
    54c6:	19 f0       	breq	.+6      	; 0x54ce <malloc+0x3c>
    54c8:	93 83       	std	Z+3, r25	; 0x03
    54ca:	82 83       	std	Z+2, r24	; 0x02
    54cc:	04 c0       	rjmp	.+8      	; 0x54d6 <malloc+0x44>
    54ce:	90 93 a6 04 	sts	0x04A6, r25
    54d2:	80 93 a5 04 	sts	0x04A5, r24
    54d6:	fe 01       	movw	r30, r28
    54d8:	34 c0       	rjmp	.+104    	; 0x5542 <malloc+0xb0>
    54da:	68 17       	cp	r22, r24
    54dc:	79 07       	cpc	r23, r25
    54de:	38 f4       	brcc	.+14     	; 0x54ee <malloc+0x5c>
    54e0:	41 15       	cp	r20, r1
    54e2:	51 05       	cpc	r21, r1
    54e4:	19 f0       	breq	.+6      	; 0x54ec <malloc+0x5a>
    54e6:	84 17       	cp	r24, r20
    54e8:	95 07       	cpc	r25, r21
    54ea:	08 f4       	brcc	.+2      	; 0x54ee <malloc+0x5c>
    54ec:	ac 01       	movw	r20, r24
    54ee:	fe 01       	movw	r30, r28
    54f0:	8a 81       	ldd	r24, Y+2	; 0x02
    54f2:	9b 81       	ldd	r25, Y+3	; 0x03
    54f4:	9c 01       	movw	r18, r24
    54f6:	e9 01       	movw	r28, r18
    54f8:	20 97       	sbiw	r28, 0x00	; 0
    54fa:	e9 f6       	brne	.-70     	; 0x54b6 <malloc+0x24>
    54fc:	41 15       	cp	r20, r1
    54fe:	51 05       	cpc	r21, r1
    5500:	a9 f1       	breq	.+106    	; 0x556c <malloc+0xda>
    5502:	ca 01       	movw	r24, r20
    5504:	86 1b       	sub	r24, r22
    5506:	97 0b       	sbc	r25, r23
    5508:	04 97       	sbiw	r24, 0x04	; 4
    550a:	08 f4       	brcc	.+2      	; 0x550e <malloc+0x7c>
    550c:	ba 01       	movw	r22, r20
    550e:	e0 e0       	ldi	r30, 0x00	; 0
    5510:	f0 e0       	ldi	r31, 0x00	; 0
    5512:	2a c0       	rjmp	.+84     	; 0x5568 <malloc+0xd6>
    5514:	8d 91       	ld	r24, X+
    5516:	9c 91       	ld	r25, X
    5518:	11 97       	sbiw	r26, 0x01	; 1
    551a:	84 17       	cp	r24, r20
    551c:	95 07       	cpc	r25, r21
    551e:	f9 f4       	brne	.+62     	; 0x555e <malloc+0xcc>
    5520:	64 17       	cp	r22, r20
    5522:	75 07       	cpc	r23, r21
    5524:	81 f4       	brne	.+32     	; 0x5546 <malloc+0xb4>
    5526:	12 96       	adiw	r26, 0x02	; 2
    5528:	8d 91       	ld	r24, X+
    552a:	9c 91       	ld	r25, X
    552c:	13 97       	sbiw	r26, 0x03	; 3
    552e:	30 97       	sbiw	r30, 0x00	; 0
    5530:	19 f0       	breq	.+6      	; 0x5538 <malloc+0xa6>
    5532:	93 83       	std	Z+3, r25	; 0x03
    5534:	82 83       	std	Z+2, r24	; 0x02
    5536:	04 c0       	rjmp	.+8      	; 0x5540 <malloc+0xae>
    5538:	90 93 a6 04 	sts	0x04A6, r25
    553c:	80 93 a5 04 	sts	0x04A5, r24
    5540:	fd 01       	movw	r30, r26
    5542:	32 96       	adiw	r30, 0x02	; 2
    5544:	4f c0       	rjmp	.+158    	; 0x55e4 <malloc+0x152>
    5546:	ca 01       	movw	r24, r20
    5548:	86 1b       	sub	r24, r22
    554a:	97 0b       	sbc	r25, r23
    554c:	fd 01       	movw	r30, r26
    554e:	e8 0f       	add	r30, r24
    5550:	f9 1f       	adc	r31, r25
    5552:	61 93       	st	Z+, r22
    5554:	71 93       	st	Z+, r23
    5556:	02 97       	sbiw	r24, 0x02	; 2
    5558:	8d 93       	st	X+, r24
    555a:	9c 93       	st	X, r25
    555c:	43 c0       	rjmp	.+134    	; 0x55e4 <malloc+0x152>
    555e:	fd 01       	movw	r30, r26
    5560:	82 81       	ldd	r24, Z+2	; 0x02
    5562:	93 81       	ldd	r25, Z+3	; 0x03
    5564:	9c 01       	movw	r18, r24
    5566:	d9 01       	movw	r26, r18
    5568:	10 97       	sbiw	r26, 0x00	; 0
    556a:	a1 f6       	brne	.-88     	; 0x5514 <malloc+0x82>
    556c:	80 91 a3 04 	lds	r24, 0x04A3
    5570:	90 91 a4 04 	lds	r25, 0x04A4
    5574:	89 2b       	or	r24, r25
    5576:	41 f4       	brne	.+16     	; 0x5588 <malloc+0xf6>
    5578:	80 91 a2 01 	lds	r24, 0x01A2
    557c:	90 91 a3 01 	lds	r25, 0x01A3
    5580:	90 93 a4 04 	sts	0x04A4, r25
    5584:	80 93 a3 04 	sts	0x04A3, r24
    5588:	40 91 a4 01 	lds	r20, 0x01A4
    558c:	50 91 a5 01 	lds	r21, 0x01A5
    5590:	41 15       	cp	r20, r1
    5592:	51 05       	cpc	r21, r1
    5594:	41 f4       	brne	.+16     	; 0x55a6 <malloc+0x114>
    5596:	4d b7       	in	r20, 0x3d	; 61
    5598:	5e b7       	in	r21, 0x3e	; 62
    559a:	80 91 a0 01 	lds	r24, 0x01A0
    559e:	90 91 a1 01 	lds	r25, 0x01A1
    55a2:	48 1b       	sub	r20, r24
    55a4:	59 0b       	sbc	r21, r25
    55a6:	20 91 a3 04 	lds	r18, 0x04A3
    55aa:	30 91 a4 04 	lds	r19, 0x04A4
    55ae:	24 17       	cp	r18, r20
    55b0:	35 07       	cpc	r19, r21
    55b2:	b0 f4       	brcc	.+44     	; 0x55e0 <malloc+0x14e>
    55b4:	ca 01       	movw	r24, r20
    55b6:	82 1b       	sub	r24, r18
    55b8:	93 0b       	sbc	r25, r19
    55ba:	86 17       	cp	r24, r22
    55bc:	97 07       	cpc	r25, r23
    55be:	80 f0       	brcs	.+32     	; 0x55e0 <malloc+0x14e>
    55c0:	ab 01       	movw	r20, r22
    55c2:	4e 5f       	subi	r20, 0xFE	; 254
    55c4:	5f 4f       	sbci	r21, 0xFF	; 255
    55c6:	84 17       	cp	r24, r20
    55c8:	95 07       	cpc	r25, r21
    55ca:	50 f0       	brcs	.+20     	; 0x55e0 <malloc+0x14e>
    55cc:	42 0f       	add	r20, r18
    55ce:	53 1f       	adc	r21, r19
    55d0:	50 93 a4 04 	sts	0x04A4, r21
    55d4:	40 93 a3 04 	sts	0x04A3, r20
    55d8:	f9 01       	movw	r30, r18
    55da:	61 93       	st	Z+, r22
    55dc:	71 93       	st	Z+, r23
    55de:	02 c0       	rjmp	.+4      	; 0x55e4 <malloc+0x152>
    55e0:	e0 e0       	ldi	r30, 0x00	; 0
    55e2:	f0 e0       	ldi	r31, 0x00	; 0
    55e4:	cf 01       	movw	r24, r30
    55e6:	df 91       	pop	r29
    55e8:	cf 91       	pop	r28
    55ea:	08 95       	ret

000055ec <free>:
    55ec:	cf 93       	push	r28
    55ee:	df 93       	push	r29
    55f0:	00 97       	sbiw	r24, 0x00	; 0
    55f2:	09 f4       	brne	.+2      	; 0x55f6 <free+0xa>
    55f4:	50 c0       	rjmp	.+160    	; 0x5696 <free+0xaa>
    55f6:	ec 01       	movw	r28, r24
    55f8:	22 97       	sbiw	r28, 0x02	; 2
    55fa:	1b 82       	std	Y+3, r1	; 0x03
    55fc:	1a 82       	std	Y+2, r1	; 0x02
    55fe:	a0 91 a5 04 	lds	r26, 0x04A5
    5602:	b0 91 a6 04 	lds	r27, 0x04A6
    5606:	10 97       	sbiw	r26, 0x00	; 0
    5608:	09 f1       	breq	.+66     	; 0x564c <free+0x60>
    560a:	40 e0       	ldi	r20, 0x00	; 0
    560c:	50 e0       	ldi	r21, 0x00	; 0
    560e:	ac 17       	cp	r26, r28
    5610:	bd 07       	cpc	r27, r29
    5612:	08 f1       	brcs	.+66     	; 0x5656 <free+0x6a>
    5614:	bb 83       	std	Y+3, r27	; 0x03
    5616:	aa 83       	std	Y+2, r26	; 0x02
    5618:	fe 01       	movw	r30, r28
    561a:	21 91       	ld	r18, Z+
    561c:	31 91       	ld	r19, Z+
    561e:	e2 0f       	add	r30, r18
    5620:	f3 1f       	adc	r31, r19
    5622:	ae 17       	cp	r26, r30
    5624:	bf 07       	cpc	r27, r31
    5626:	79 f4       	brne	.+30     	; 0x5646 <free+0x5a>
    5628:	8d 91       	ld	r24, X+
    562a:	9c 91       	ld	r25, X
    562c:	11 97       	sbiw	r26, 0x01	; 1
    562e:	28 0f       	add	r18, r24
    5630:	39 1f       	adc	r19, r25
    5632:	2e 5f       	subi	r18, 0xFE	; 254
    5634:	3f 4f       	sbci	r19, 0xFF	; 255
    5636:	39 83       	std	Y+1, r19	; 0x01
    5638:	28 83       	st	Y, r18
    563a:	12 96       	adiw	r26, 0x02	; 2
    563c:	8d 91       	ld	r24, X+
    563e:	9c 91       	ld	r25, X
    5640:	13 97       	sbiw	r26, 0x03	; 3
    5642:	9b 83       	std	Y+3, r25	; 0x03
    5644:	8a 83       	std	Y+2, r24	; 0x02
    5646:	41 15       	cp	r20, r1
    5648:	51 05       	cpc	r21, r1
    564a:	71 f4       	brne	.+28     	; 0x5668 <free+0x7c>
    564c:	d0 93 a6 04 	sts	0x04A6, r29
    5650:	c0 93 a5 04 	sts	0x04A5, r28
    5654:	20 c0       	rjmp	.+64     	; 0x5696 <free+0xaa>
    5656:	12 96       	adiw	r26, 0x02	; 2
    5658:	8d 91       	ld	r24, X+
    565a:	9c 91       	ld	r25, X
    565c:	13 97       	sbiw	r26, 0x03	; 3
    565e:	ad 01       	movw	r20, r26
    5660:	00 97       	sbiw	r24, 0x00	; 0
    5662:	11 f0       	breq	.+4      	; 0x5668 <free+0x7c>
    5664:	dc 01       	movw	r26, r24
    5666:	d3 cf       	rjmp	.-90     	; 0x560e <free+0x22>
    5668:	fa 01       	movw	r30, r20
    566a:	d3 83       	std	Z+3, r29	; 0x03
    566c:	c2 83       	std	Z+2, r28	; 0x02
    566e:	21 91       	ld	r18, Z+
    5670:	31 91       	ld	r19, Z+
    5672:	e2 0f       	add	r30, r18
    5674:	f3 1f       	adc	r31, r19
    5676:	ce 17       	cp	r28, r30
    5678:	df 07       	cpc	r29, r31
    567a:	69 f4       	brne	.+26     	; 0x5696 <free+0xaa>
    567c:	88 81       	ld	r24, Y
    567e:	99 81       	ldd	r25, Y+1	; 0x01
    5680:	28 0f       	add	r18, r24
    5682:	39 1f       	adc	r19, r25
    5684:	2e 5f       	subi	r18, 0xFE	; 254
    5686:	3f 4f       	sbci	r19, 0xFF	; 255
    5688:	fa 01       	movw	r30, r20
    568a:	31 83       	std	Z+1, r19	; 0x01
    568c:	20 83       	st	Z, r18
    568e:	8a 81       	ldd	r24, Y+2	; 0x02
    5690:	9b 81       	ldd	r25, Y+3	; 0x03
    5692:	93 83       	std	Z+3, r25	; 0x03
    5694:	82 83       	std	Z+2, r24	; 0x02
    5696:	df 91       	pop	r29
    5698:	cf 91       	pop	r28
    569a:	08 95       	ret

0000569c <do_rand>:
    569c:	a0 e0       	ldi	r26, 0x00	; 0
    569e:	b0 e0       	ldi	r27, 0x00	; 0
    56a0:	e3 e5       	ldi	r30, 0x53	; 83
    56a2:	fb e2       	ldi	r31, 0x2B	; 43
    56a4:	b3 ce       	rjmp	.-666    	; 0x540c <__prologue_saves__+0x10>
    56a6:	ec 01       	movw	r28, r24
    56a8:	a8 80       	ld	r10, Y
    56aa:	b9 80       	ldd	r11, Y+1	; 0x01
    56ac:	ca 80       	ldd	r12, Y+2	; 0x02
    56ae:	db 80       	ldd	r13, Y+3	; 0x03
    56b0:	a1 14       	cp	r10, r1
    56b2:	b1 04       	cpc	r11, r1
    56b4:	c1 04       	cpc	r12, r1
    56b6:	d1 04       	cpc	r13, r1
    56b8:	41 f4       	brne	.+16     	; 0x56ca <do_rand+0x2e>
    56ba:	84 e2       	ldi	r24, 0x24	; 36
    56bc:	a8 2e       	mov	r10, r24
    56be:	89 ed       	ldi	r24, 0xD9	; 217
    56c0:	b8 2e       	mov	r11, r24
    56c2:	8b e5       	ldi	r24, 0x5B	; 91
    56c4:	c8 2e       	mov	r12, r24
    56c6:	87 e0       	ldi	r24, 0x07	; 7
    56c8:	d8 2e       	mov	r13, r24
    56ca:	c6 01       	movw	r24, r12
    56cc:	b5 01       	movw	r22, r10
    56ce:	2d e1       	ldi	r18, 0x1D	; 29
    56d0:	33 ef       	ldi	r19, 0xF3	; 243
    56d2:	41 e0       	ldi	r20, 0x01	; 1
    56d4:	50 e0       	ldi	r21, 0x00	; 0
    56d6:	e8 d1       	rcall	.+976    	; 0x5aa8 <__divmodsi4>
    56d8:	27 ea       	ldi	r18, 0xA7	; 167
    56da:	31 e4       	ldi	r19, 0x41	; 65
    56dc:	40 e0       	ldi	r20, 0x00	; 0
    56de:	50 e0       	ldi	r21, 0x00	; 0
    56e0:	39 de       	rcall	.-910    	; 0x5354 <__mulsi3>
    56e2:	7b 01       	movw	r14, r22
    56e4:	8c 01       	movw	r16, r24
    56e6:	c6 01       	movw	r24, r12
    56e8:	b5 01       	movw	r22, r10
    56ea:	2d e1       	ldi	r18, 0x1D	; 29
    56ec:	33 ef       	ldi	r19, 0xF3	; 243
    56ee:	41 e0       	ldi	r20, 0x01	; 1
    56f0:	50 e0       	ldi	r21, 0x00	; 0
    56f2:	da d1       	rcall	.+948    	; 0x5aa8 <__divmodsi4>
    56f4:	ca 01       	movw	r24, r20
    56f6:	b9 01       	movw	r22, r18
    56f8:	2c ee       	ldi	r18, 0xEC	; 236
    56fa:	34 ef       	ldi	r19, 0xF4	; 244
    56fc:	4f ef       	ldi	r20, 0xFF	; 255
    56fe:	5f ef       	ldi	r21, 0xFF	; 255
    5700:	29 de       	rcall	.-942    	; 0x5354 <__mulsi3>
    5702:	6e 0d       	add	r22, r14
    5704:	7f 1d       	adc	r23, r15
    5706:	80 1f       	adc	r24, r16
    5708:	91 1f       	adc	r25, r17
    570a:	97 ff       	sbrs	r25, 7
    570c:	04 c0       	rjmp	.+8      	; 0x5716 <do_rand+0x7a>
    570e:	61 50       	subi	r22, 0x01	; 1
    5710:	70 40       	sbci	r23, 0x00	; 0
    5712:	80 40       	sbci	r24, 0x00	; 0
    5714:	90 48       	sbci	r25, 0x80	; 128
    5716:	68 83       	st	Y, r22
    5718:	79 83       	std	Y+1, r23	; 0x01
    571a:	8a 83       	std	Y+2, r24	; 0x02
    571c:	9b 83       	std	Y+3, r25	; 0x03
    571e:	9b 01       	movw	r18, r22
    5720:	3f 77       	andi	r19, 0x7F	; 127
    5722:	c9 01       	movw	r24, r18
    5724:	cd b7       	in	r28, 0x3d	; 61
    5726:	de b7       	in	r29, 0x3e	; 62
    5728:	ea e0       	ldi	r30, 0x0A	; 10
    572a:	8c ce       	rjmp	.-744    	; 0x5444 <__epilogue_restores__+0x10>

0000572c <rand_r>:
    572c:	b7 df       	rcall	.-146    	; 0x569c <do_rand>
    572e:	08 95       	ret

00005730 <rand>:
    5730:	86 ea       	ldi	r24, 0xA6	; 166
    5732:	91 e0       	ldi	r25, 0x01	; 1
    5734:	b3 df       	rcall	.-154    	; 0x569c <do_rand>
    5736:	08 95       	ret

00005738 <srand>:
    5738:	a0 e0       	ldi	r26, 0x00	; 0
    573a:	b0 e0       	ldi	r27, 0x00	; 0
    573c:	80 93 a6 01 	sts	0x01A6, r24
    5740:	90 93 a7 01 	sts	0x01A7, r25
    5744:	a0 93 a8 01 	sts	0x01A8, r26
    5748:	b0 93 a9 01 	sts	0x01A9, r27
    574c:	08 95       	ret

0000574e <__ftoa_engine>:
    574e:	28 30       	cpi	r18, 0x08	; 8
    5750:	08 f0       	brcs	.+2      	; 0x5754 <__ftoa_engine+0x6>
    5752:	27 e0       	ldi	r18, 0x07	; 7
    5754:	33 27       	eor	r19, r19
    5756:	da 01       	movw	r26, r20
    5758:	99 0f       	add	r25, r25
    575a:	31 1d       	adc	r19, r1
    575c:	87 fd       	sbrc	r24, 7
    575e:	91 60       	ori	r25, 0x01	; 1
    5760:	00 96       	adiw	r24, 0x00	; 0
    5762:	61 05       	cpc	r22, r1
    5764:	71 05       	cpc	r23, r1
    5766:	39 f4       	brne	.+14     	; 0x5776 <__ftoa_engine+0x28>
    5768:	32 60       	ori	r19, 0x02	; 2
    576a:	2e 5f       	subi	r18, 0xFE	; 254
    576c:	3d 93       	st	X+, r19
    576e:	30 e3       	ldi	r19, 0x30	; 48
    5770:	2a 95       	dec	r18
    5772:	e1 f7       	brne	.-8      	; 0x576c <__ftoa_engine+0x1e>
    5774:	08 95       	ret
    5776:	9f 3f       	cpi	r25, 0xFF	; 255
    5778:	30 f0       	brcs	.+12     	; 0x5786 <__ftoa_engine+0x38>
    577a:	80 38       	cpi	r24, 0x80	; 128
    577c:	71 05       	cpc	r23, r1
    577e:	61 05       	cpc	r22, r1
    5780:	09 f0       	breq	.+2      	; 0x5784 <__ftoa_engine+0x36>
    5782:	3c 5f       	subi	r19, 0xFC	; 252
    5784:	3c 5f       	subi	r19, 0xFC	; 252
    5786:	3d 93       	st	X+, r19
    5788:	91 30       	cpi	r25, 0x01	; 1
    578a:	08 f0       	brcs	.+2      	; 0x578e <__ftoa_engine+0x40>
    578c:	80 68       	ori	r24, 0x80	; 128
    578e:	91 1d       	adc	r25, r1
    5790:	df 93       	push	r29
    5792:	cf 93       	push	r28
    5794:	1f 93       	push	r17
    5796:	0f 93       	push	r16
    5798:	ff 92       	push	r15
    579a:	ef 92       	push	r14
    579c:	19 2f       	mov	r17, r25
    579e:	98 7f       	andi	r25, 0xF8	; 248
    57a0:	96 95       	lsr	r25
    57a2:	e9 2f       	mov	r30, r25
    57a4:	96 95       	lsr	r25
    57a6:	96 95       	lsr	r25
    57a8:	e9 0f       	add	r30, r25
    57aa:	ff 27       	eor	r31, r31
    57ac:	ef 53       	subi	r30, 0x3F	; 63
    57ae:	fa 4f       	sbci	r31, 0xFA	; 250
    57b0:	99 27       	eor	r25, r25
    57b2:	33 27       	eor	r19, r19
    57b4:	ee 24       	eor	r14, r14
    57b6:	ff 24       	eor	r15, r15
    57b8:	a7 01       	movw	r20, r14
    57ba:	e7 01       	movw	r28, r14
    57bc:	05 90       	lpm	r0, Z+
    57be:	08 94       	sec
    57c0:	07 94       	ror	r0
    57c2:	28 f4       	brcc	.+10     	; 0x57ce <__ftoa_engine+0x80>
    57c4:	36 0f       	add	r19, r22
    57c6:	e7 1e       	adc	r14, r23
    57c8:	f8 1e       	adc	r15, r24
    57ca:	49 1f       	adc	r20, r25
    57cc:	51 1d       	adc	r21, r1
    57ce:	66 0f       	add	r22, r22
    57d0:	77 1f       	adc	r23, r23
    57d2:	88 1f       	adc	r24, r24
    57d4:	99 1f       	adc	r25, r25
    57d6:	06 94       	lsr	r0
    57d8:	a1 f7       	brne	.-24     	; 0x57c2 <__ftoa_engine+0x74>
    57da:	05 90       	lpm	r0, Z+
    57dc:	07 94       	ror	r0
    57de:	28 f4       	brcc	.+10     	; 0x57ea <__ftoa_engine+0x9c>
    57e0:	e7 0e       	add	r14, r23
    57e2:	f8 1e       	adc	r15, r24
    57e4:	49 1f       	adc	r20, r25
    57e6:	56 1f       	adc	r21, r22
    57e8:	c1 1d       	adc	r28, r1
    57ea:	77 0f       	add	r23, r23
    57ec:	88 1f       	adc	r24, r24
    57ee:	99 1f       	adc	r25, r25
    57f0:	66 1f       	adc	r22, r22
    57f2:	06 94       	lsr	r0
    57f4:	a1 f7       	brne	.-24     	; 0x57de <__ftoa_engine+0x90>
    57f6:	05 90       	lpm	r0, Z+
    57f8:	07 94       	ror	r0
    57fa:	28 f4       	brcc	.+10     	; 0x5806 <__ftoa_engine+0xb8>
    57fc:	f8 0e       	add	r15, r24
    57fe:	49 1f       	adc	r20, r25
    5800:	56 1f       	adc	r21, r22
    5802:	c7 1f       	adc	r28, r23
    5804:	d1 1d       	adc	r29, r1
    5806:	88 0f       	add	r24, r24
    5808:	99 1f       	adc	r25, r25
    580a:	66 1f       	adc	r22, r22
    580c:	77 1f       	adc	r23, r23
    580e:	06 94       	lsr	r0
    5810:	a1 f7       	brne	.-24     	; 0x57fa <__ftoa_engine+0xac>
    5812:	05 90       	lpm	r0, Z+
    5814:	07 94       	ror	r0
    5816:	20 f4       	brcc	.+8      	; 0x5820 <__ftoa_engine+0xd2>
    5818:	49 0f       	add	r20, r25
    581a:	56 1f       	adc	r21, r22
    581c:	c7 1f       	adc	r28, r23
    581e:	d8 1f       	adc	r29, r24
    5820:	99 0f       	add	r25, r25
    5822:	66 1f       	adc	r22, r22
    5824:	77 1f       	adc	r23, r23
    5826:	88 1f       	adc	r24, r24
    5828:	06 94       	lsr	r0
    582a:	a9 f7       	brne	.-22     	; 0x5816 <__ftoa_engine+0xc8>
    582c:	84 91       	lpm	r24, Z+
    582e:	10 95       	com	r17
    5830:	17 70       	andi	r17, 0x07	; 7
    5832:	41 f0       	breq	.+16     	; 0x5844 <__ftoa_engine+0xf6>
    5834:	d6 95       	lsr	r29
    5836:	c7 95       	ror	r28
    5838:	57 95       	ror	r21
    583a:	47 95       	ror	r20
    583c:	f7 94       	ror	r15
    583e:	e7 94       	ror	r14
    5840:	1a 95       	dec	r17
    5842:	c1 f7       	brne	.-16     	; 0x5834 <__ftoa_engine+0xe6>
    5844:	e7 e6       	ldi	r30, 0x67	; 103
    5846:	f5 e0       	ldi	r31, 0x05	; 5
    5848:	68 94       	set
    584a:	15 90       	lpm	r1, Z+
    584c:	15 91       	lpm	r17, Z+
    584e:	35 91       	lpm	r19, Z+
    5850:	65 91       	lpm	r22, Z+
    5852:	95 91       	lpm	r25, Z+
    5854:	05 90       	lpm	r0, Z+
    5856:	7f e2       	ldi	r23, 0x2F	; 47
    5858:	73 95       	inc	r23
    585a:	e1 18       	sub	r14, r1
    585c:	f1 0a       	sbc	r15, r17
    585e:	43 0b       	sbc	r20, r19
    5860:	56 0b       	sbc	r21, r22
    5862:	c9 0b       	sbc	r28, r25
    5864:	d0 09       	sbc	r29, r0
    5866:	c0 f7       	brcc	.-16     	; 0x5858 <__ftoa_engine+0x10a>
    5868:	e1 0c       	add	r14, r1
    586a:	f1 1e       	adc	r15, r17
    586c:	43 1f       	adc	r20, r19
    586e:	56 1f       	adc	r21, r22
    5870:	c9 1f       	adc	r28, r25
    5872:	d0 1d       	adc	r29, r0
    5874:	7e f4       	brtc	.+30     	; 0x5894 <__ftoa_engine+0x146>
    5876:	70 33       	cpi	r23, 0x30	; 48
    5878:	11 f4       	brne	.+4      	; 0x587e <__ftoa_engine+0x130>
    587a:	8a 95       	dec	r24
    587c:	e6 cf       	rjmp	.-52     	; 0x584a <__ftoa_engine+0xfc>
    587e:	e8 94       	clt
    5880:	01 50       	subi	r16, 0x01	; 1
    5882:	30 f0       	brcs	.+12     	; 0x5890 <__ftoa_engine+0x142>
    5884:	08 0f       	add	r16, r24
    5886:	0a f4       	brpl	.+2      	; 0x588a <__ftoa_engine+0x13c>
    5888:	00 27       	eor	r16, r16
    588a:	02 17       	cp	r16, r18
    588c:	08 f4       	brcc	.+2      	; 0x5890 <__ftoa_engine+0x142>
    588e:	20 2f       	mov	r18, r16
    5890:	23 95       	inc	r18
    5892:	02 2f       	mov	r16, r18
    5894:	7a 33       	cpi	r23, 0x3A	; 58
    5896:	28 f0       	brcs	.+10     	; 0x58a2 <__ftoa_engine+0x154>
    5898:	79 e3       	ldi	r23, 0x39	; 57
    589a:	7d 93       	st	X+, r23
    589c:	2a 95       	dec	r18
    589e:	e9 f7       	brne	.-6      	; 0x589a <__ftoa_engine+0x14c>
    58a0:	10 c0       	rjmp	.+32     	; 0x58c2 <__ftoa_engine+0x174>
    58a2:	7d 93       	st	X+, r23
    58a4:	2a 95       	dec	r18
    58a6:	89 f6       	brne	.-94     	; 0x584a <__ftoa_engine+0xfc>
    58a8:	06 94       	lsr	r0
    58aa:	97 95       	ror	r25
    58ac:	67 95       	ror	r22
    58ae:	37 95       	ror	r19
    58b0:	17 95       	ror	r17
    58b2:	17 94       	ror	r1
    58b4:	e1 18       	sub	r14, r1
    58b6:	f1 0a       	sbc	r15, r17
    58b8:	43 0b       	sbc	r20, r19
    58ba:	56 0b       	sbc	r21, r22
    58bc:	c9 0b       	sbc	r28, r25
    58be:	d0 09       	sbc	r29, r0
    58c0:	98 f0       	brcs	.+38     	; 0x58e8 <__ftoa_engine+0x19a>
    58c2:	23 95       	inc	r18
    58c4:	7e 91       	ld	r23, -X
    58c6:	73 95       	inc	r23
    58c8:	7a 33       	cpi	r23, 0x3A	; 58
    58ca:	08 f0       	brcs	.+2      	; 0x58ce <__ftoa_engine+0x180>
    58cc:	70 e3       	ldi	r23, 0x30	; 48
    58ce:	7c 93       	st	X, r23
    58d0:	20 13       	cpse	r18, r16
    58d2:	b8 f7       	brcc	.-18     	; 0x58c2 <__ftoa_engine+0x174>
    58d4:	7e 91       	ld	r23, -X
    58d6:	70 61       	ori	r23, 0x10	; 16
    58d8:	7d 93       	st	X+, r23
    58da:	30 f0       	brcs	.+12     	; 0x58e8 <__ftoa_engine+0x19a>
    58dc:	83 95       	inc	r24
    58de:	71 e3       	ldi	r23, 0x31	; 49
    58e0:	7d 93       	st	X+, r23
    58e2:	70 e3       	ldi	r23, 0x30	; 48
    58e4:	2a 95       	dec	r18
    58e6:	e1 f7       	brne	.-8      	; 0x58e0 <__ftoa_engine+0x192>
    58e8:	11 24       	eor	r1, r1
    58ea:	ef 90       	pop	r14
    58ec:	ff 90       	pop	r15
    58ee:	0f 91       	pop	r16
    58f0:	1f 91       	pop	r17
    58f2:	cf 91       	pop	r28
    58f4:	df 91       	pop	r29
    58f6:	99 27       	eor	r25, r25
    58f8:	87 fd       	sbrc	r24, 7
    58fa:	90 95       	com	r25
    58fc:	08 95       	ret

000058fe <strnlen_P>:
    58fe:	fc 01       	movw	r30, r24
    5900:	05 90       	lpm	r0, Z+
    5902:	61 50       	subi	r22, 0x01	; 1
    5904:	70 40       	sbci	r23, 0x00	; 0
    5906:	01 10       	cpse	r0, r1
    5908:	d8 f7       	brcc	.-10     	; 0x5900 <strnlen_P+0x2>
    590a:	80 95       	com	r24
    590c:	90 95       	com	r25
    590e:	8e 0f       	add	r24, r30
    5910:	9f 1f       	adc	r25, r31
    5912:	08 95       	ret

00005914 <strnlen>:
    5914:	fc 01       	movw	r30, r24
    5916:	61 50       	subi	r22, 0x01	; 1
    5918:	70 40       	sbci	r23, 0x00	; 0
    591a:	01 90       	ld	r0, Z+
    591c:	01 10       	cpse	r0, r1
    591e:	d8 f7       	brcc	.-10     	; 0x5916 <strnlen+0x2>
    5920:	80 95       	com	r24
    5922:	90 95       	com	r25
    5924:	8e 0f       	add	r24, r30
    5926:	9f 1f       	adc	r25, r31
    5928:	08 95       	ret

0000592a <fputc>:
    592a:	0f 93       	push	r16
    592c:	1f 93       	push	r17
    592e:	cf 93       	push	r28
    5930:	df 93       	push	r29
    5932:	8c 01       	movw	r16, r24
    5934:	eb 01       	movw	r28, r22
    5936:	8b 81       	ldd	r24, Y+3	; 0x03
    5938:	81 ff       	sbrs	r24, 1
    593a:	1b c0       	rjmp	.+54     	; 0x5972 <fputc+0x48>
    593c:	82 ff       	sbrs	r24, 2
    593e:	0d c0       	rjmp	.+26     	; 0x595a <fputc+0x30>
    5940:	2e 81       	ldd	r18, Y+6	; 0x06
    5942:	3f 81       	ldd	r19, Y+7	; 0x07
    5944:	8c 81       	ldd	r24, Y+4	; 0x04
    5946:	9d 81       	ldd	r25, Y+5	; 0x05
    5948:	28 17       	cp	r18, r24
    594a:	39 07       	cpc	r19, r25
    594c:	64 f4       	brge	.+24     	; 0x5966 <fputc+0x3c>
    594e:	e8 81       	ld	r30, Y
    5950:	f9 81       	ldd	r31, Y+1	; 0x01
    5952:	01 93       	st	Z+, r16
    5954:	f9 83       	std	Y+1, r31	; 0x01
    5956:	e8 83       	st	Y, r30
    5958:	06 c0       	rjmp	.+12     	; 0x5966 <fputc+0x3c>
    595a:	e8 85       	ldd	r30, Y+8	; 0x08
    595c:	f9 85       	ldd	r31, Y+9	; 0x09
    595e:	80 2f       	mov	r24, r16
    5960:	09 95       	icall
    5962:	89 2b       	or	r24, r25
    5964:	31 f4       	brne	.+12     	; 0x5972 <fputc+0x48>
    5966:	8e 81       	ldd	r24, Y+6	; 0x06
    5968:	9f 81       	ldd	r25, Y+7	; 0x07
    596a:	01 96       	adiw	r24, 0x01	; 1
    596c:	9f 83       	std	Y+7, r25	; 0x07
    596e:	8e 83       	std	Y+6, r24	; 0x06
    5970:	02 c0       	rjmp	.+4      	; 0x5976 <fputc+0x4c>
    5972:	0f ef       	ldi	r16, 0xFF	; 255
    5974:	1f ef       	ldi	r17, 0xFF	; 255
    5976:	c8 01       	movw	r24, r16
    5978:	df 91       	pop	r29
    597a:	cf 91       	pop	r28
    597c:	1f 91       	pop	r17
    597e:	0f 91       	pop	r16
    5980:	08 95       	ret

00005982 <puts>:
    5982:	0f 93       	push	r16
    5984:	1f 93       	push	r17
    5986:	cf 93       	push	r28
    5988:	df 93       	push	r29
    598a:	8c 01       	movw	r16, r24
    598c:	e0 91 a9 04 	lds	r30, 0x04A9
    5990:	f0 91 aa 04 	lds	r31, 0x04AA
    5994:	83 81       	ldd	r24, Z+3	; 0x03
    5996:	81 ff       	sbrs	r24, 1
    5998:	21 c0       	rjmp	.+66     	; 0x59dc <puts+0x5a>
    599a:	c0 e0       	ldi	r28, 0x00	; 0
    599c:	d0 e0       	ldi	r29, 0x00	; 0
    599e:	0d c0       	rjmp	.+26     	; 0x59ba <puts+0x38>
    59a0:	e0 91 a9 04 	lds	r30, 0x04A9
    59a4:	f0 91 aa 04 	lds	r31, 0x04AA
    59a8:	20 85       	ldd	r18, Z+8	; 0x08
    59aa:	31 85       	ldd	r19, Z+9	; 0x09
    59ac:	bf 01       	movw	r22, r30
    59ae:	f9 01       	movw	r30, r18
    59b0:	09 95       	icall
    59b2:	89 2b       	or	r24, r25
    59b4:	11 f0       	breq	.+4      	; 0x59ba <puts+0x38>
    59b6:	cf ef       	ldi	r28, 0xFF	; 255
    59b8:	df ef       	ldi	r29, 0xFF	; 255
    59ba:	f8 01       	movw	r30, r16
    59bc:	81 91       	ld	r24, Z+
    59be:	8f 01       	movw	r16, r30
    59c0:	88 23       	and	r24, r24
    59c2:	71 f7       	brne	.-36     	; 0x59a0 <puts+0x1e>
    59c4:	e0 91 a9 04 	lds	r30, 0x04A9
    59c8:	f0 91 aa 04 	lds	r31, 0x04AA
    59cc:	20 85       	ldd	r18, Z+8	; 0x08
    59ce:	31 85       	ldd	r19, Z+9	; 0x09
    59d0:	8a e0       	ldi	r24, 0x0A	; 10
    59d2:	bf 01       	movw	r22, r30
    59d4:	f9 01       	movw	r30, r18
    59d6:	09 95       	icall
    59d8:	89 2b       	or	r24, r25
    59da:	11 f0       	breq	.+4      	; 0x59e0 <puts+0x5e>
    59dc:	cf ef       	ldi	r28, 0xFF	; 255
    59de:	df ef       	ldi	r29, 0xFF	; 255
    59e0:	ce 01       	movw	r24, r28
    59e2:	df 91       	pop	r29
    59e4:	cf 91       	pop	r28
    59e6:	1f 91       	pop	r17
    59e8:	0f 91       	pop	r16
    59ea:	08 95       	ret

000059ec <__ultoa_invert>:
    59ec:	fa 01       	movw	r30, r20
    59ee:	aa 27       	eor	r26, r26
    59f0:	28 30       	cpi	r18, 0x08	; 8
    59f2:	51 f1       	breq	.+84     	; 0x5a48 <__ultoa_invert+0x5c>
    59f4:	20 31       	cpi	r18, 0x10	; 16
    59f6:	81 f1       	breq	.+96     	; 0x5a58 <__ultoa_invert+0x6c>
    59f8:	e8 94       	clt
    59fa:	6f 93       	push	r22
    59fc:	6e 7f       	andi	r22, 0xFE	; 254
    59fe:	6e 5f       	subi	r22, 0xFE	; 254
    5a00:	7f 4f       	sbci	r23, 0xFF	; 255
    5a02:	8f 4f       	sbci	r24, 0xFF	; 255
    5a04:	9f 4f       	sbci	r25, 0xFF	; 255
    5a06:	af 4f       	sbci	r26, 0xFF	; 255
    5a08:	b1 e0       	ldi	r27, 0x01	; 1
    5a0a:	3e d0       	rcall	.+124    	; 0x5a88 <__ultoa_invert+0x9c>
    5a0c:	b4 e0       	ldi	r27, 0x04	; 4
    5a0e:	3c d0       	rcall	.+120    	; 0x5a88 <__ultoa_invert+0x9c>
    5a10:	67 0f       	add	r22, r23
    5a12:	78 1f       	adc	r23, r24
    5a14:	89 1f       	adc	r24, r25
    5a16:	9a 1f       	adc	r25, r26
    5a18:	a1 1d       	adc	r26, r1
    5a1a:	68 0f       	add	r22, r24
    5a1c:	79 1f       	adc	r23, r25
    5a1e:	8a 1f       	adc	r24, r26
    5a20:	91 1d       	adc	r25, r1
    5a22:	a1 1d       	adc	r26, r1
    5a24:	6a 0f       	add	r22, r26
    5a26:	71 1d       	adc	r23, r1
    5a28:	81 1d       	adc	r24, r1
    5a2a:	91 1d       	adc	r25, r1
    5a2c:	a1 1d       	adc	r26, r1
    5a2e:	20 d0       	rcall	.+64     	; 0x5a70 <__ultoa_invert+0x84>
    5a30:	09 f4       	brne	.+2      	; 0x5a34 <__ultoa_invert+0x48>
    5a32:	68 94       	set
    5a34:	3f 91       	pop	r19
    5a36:	2a e0       	ldi	r18, 0x0A	; 10
    5a38:	26 9f       	mul	r18, r22
    5a3a:	11 24       	eor	r1, r1
    5a3c:	30 19       	sub	r19, r0
    5a3e:	30 5d       	subi	r19, 0xD0	; 208
    5a40:	31 93       	st	Z+, r19
    5a42:	de f6       	brtc	.-74     	; 0x59fa <__ultoa_invert+0xe>
    5a44:	cf 01       	movw	r24, r30
    5a46:	08 95       	ret
    5a48:	46 2f       	mov	r20, r22
    5a4a:	47 70       	andi	r20, 0x07	; 7
    5a4c:	40 5d       	subi	r20, 0xD0	; 208
    5a4e:	41 93       	st	Z+, r20
    5a50:	b3 e0       	ldi	r27, 0x03	; 3
    5a52:	0f d0       	rcall	.+30     	; 0x5a72 <__ultoa_invert+0x86>
    5a54:	c9 f7       	brne	.-14     	; 0x5a48 <__ultoa_invert+0x5c>
    5a56:	f6 cf       	rjmp	.-20     	; 0x5a44 <__ultoa_invert+0x58>
    5a58:	46 2f       	mov	r20, r22
    5a5a:	4f 70       	andi	r20, 0x0F	; 15
    5a5c:	40 5d       	subi	r20, 0xD0	; 208
    5a5e:	4a 33       	cpi	r20, 0x3A	; 58
    5a60:	18 f0       	brcs	.+6      	; 0x5a68 <__ultoa_invert+0x7c>
    5a62:	49 5d       	subi	r20, 0xD9	; 217
    5a64:	31 fd       	sbrc	r19, 1
    5a66:	40 52       	subi	r20, 0x20	; 32
    5a68:	41 93       	st	Z+, r20
    5a6a:	02 d0       	rcall	.+4      	; 0x5a70 <__ultoa_invert+0x84>
    5a6c:	a9 f7       	brne	.-22     	; 0x5a58 <__ultoa_invert+0x6c>
    5a6e:	ea cf       	rjmp	.-44     	; 0x5a44 <__ultoa_invert+0x58>
    5a70:	b4 e0       	ldi	r27, 0x04	; 4
    5a72:	a6 95       	lsr	r26
    5a74:	97 95       	ror	r25
    5a76:	87 95       	ror	r24
    5a78:	77 95       	ror	r23
    5a7a:	67 95       	ror	r22
    5a7c:	ba 95       	dec	r27
    5a7e:	c9 f7       	brne	.-14     	; 0x5a72 <__ultoa_invert+0x86>
    5a80:	00 97       	sbiw	r24, 0x00	; 0
    5a82:	61 05       	cpc	r22, r1
    5a84:	71 05       	cpc	r23, r1
    5a86:	08 95       	ret
    5a88:	9b 01       	movw	r18, r22
    5a8a:	ac 01       	movw	r20, r24
    5a8c:	0a 2e       	mov	r0, r26
    5a8e:	06 94       	lsr	r0
    5a90:	57 95       	ror	r21
    5a92:	47 95       	ror	r20
    5a94:	37 95       	ror	r19
    5a96:	27 95       	ror	r18
    5a98:	ba 95       	dec	r27
    5a9a:	c9 f7       	brne	.-14     	; 0x5a8e <__ultoa_invert+0xa2>
    5a9c:	62 0f       	add	r22, r18
    5a9e:	73 1f       	adc	r23, r19
    5aa0:	84 1f       	adc	r24, r20
    5aa2:	95 1f       	adc	r25, r21
    5aa4:	a0 1d       	adc	r26, r0
    5aa6:	08 95       	ret

00005aa8 <__divmodsi4>:
    5aa8:	97 fb       	bst	r25, 7
    5aaa:	09 2e       	mov	r0, r25
    5aac:	05 26       	eor	r0, r21
    5aae:	0e d0       	rcall	.+28     	; 0x5acc <__divmodsi4_neg1>
    5ab0:	57 fd       	sbrc	r21, 7
    5ab2:	04 d0       	rcall	.+8      	; 0x5abc <__divmodsi4_neg2>
    5ab4:	81 dc       	rcall	.-1790   	; 0x53b8 <__udivmodsi4>
    5ab6:	0a d0       	rcall	.+20     	; 0x5acc <__divmodsi4_neg1>
    5ab8:	00 1c       	adc	r0, r0
    5aba:	38 f4       	brcc	.+14     	; 0x5aca <__divmodsi4_exit>

00005abc <__divmodsi4_neg2>:
    5abc:	50 95       	com	r21
    5abe:	40 95       	com	r20
    5ac0:	30 95       	com	r19
    5ac2:	21 95       	neg	r18
    5ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    5ac6:	4f 4f       	sbci	r20, 0xFF	; 255
    5ac8:	5f 4f       	sbci	r21, 0xFF	; 255

00005aca <__divmodsi4_exit>:
    5aca:	08 95       	ret

00005acc <__divmodsi4_neg1>:
    5acc:	f6 f7       	brtc	.-4      	; 0x5aca <__divmodsi4_exit>
    5ace:	90 95       	com	r25
    5ad0:	80 95       	com	r24
    5ad2:	70 95       	com	r23
    5ad4:	61 95       	neg	r22
    5ad6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ad8:	8f 4f       	sbci	r24, 0xFF	; 255
    5ada:	9f 4f       	sbci	r25, 0xFF	; 255
    5adc:	08 95       	ret

00005ade <_exit>:
    5ade:	f8 94       	cli

00005ae0 <__stop_program>:
    5ae0:	ff cf       	rjmp	.-2      	; 0x5ae0 <__stop_program>
