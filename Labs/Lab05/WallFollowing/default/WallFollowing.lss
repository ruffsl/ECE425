
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000aa  00800100  00005ace  00005b62  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005ace  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000303  008001aa  008001aa  00005c0c  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00005c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000361  00000000  00000000  00005c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001021  00000000  00000000  00005fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002ae  00000000  00000000  00006fce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d82  00000000  00000000  0000727c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000220  00000000  00000000  00008000  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000acf  00000000  00000000  00008220  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000b2a  00000000  00000000  00008cef  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 49 19 	jmp	0x3292	; 0x3292 <__vector_4>
      14:	0c 94 72 19 	jmp	0x32e4	; 0x32e4 <__vector_5>
      18:	0c 94 9b 19 	jmp	0x3336	; 0x3336 <__vector_6>
      1c:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 2a 18 	jmp	0x3054	; 0x3054 <__vector_9>
      28:	0c 94 53 18 	jmp	0x30a6	; 0x30a6 <__vector_10>
      2c:	0c 94 7c 18 	jmp	0x30f8	; 0x30f8 <__vector_11>
      30:	0c 94 f7 18 	jmp	0x31ee	; 0x31ee <__vector_12>
      34:	0c 94 a5 18 	jmp	0x314a	; 0x314a <__vector_13>
      38:	0c 94 ce 18 	jmp	0x319c	; 0x319c <__vector_14>
      3c:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__vector_15>
      40:	0c 94 af 17 	jmp	0x2f5e	; 0x2f5e <__vector_16>
      44:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__vector_17>
      48:	0c 94 01 18 	jmp	0x3002	; 0x3002 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	14 15       	cp	r17, r4
      7e:	17 15       	cp	r17, r7
      80:	1a 15       	cp	r17, r10
      82:	1d 15       	cp	r17, r13
      84:	26 15       	cp	r18, r6
      86:	20 15       	cp	r18, r0
      88:	23 15       	cp	r18, r3
      8a:	29 15       	cp	r18, r9
      8c:	2c 15       	cp	r18, r12
      8e:	2f 15       	cp	r18, r15
      90:	32 15       	cp	r19, r2
      92:	35 15       	cp	r19, r5
      94:	38 15       	cp	r19, r8
      96:	3b 15       	cp	r19, r11
      98:	3e 15       	cp	r19, r14
      9a:	41 15       	cp	r20, r1
      9c:	44 15       	cp	r20, r4
      9e:	47 15       	cp	r20, r7
      a0:	4a 15       	cp	r20, r10
      a2:	5b 15       	cp	r21, r11
      a4:	5e 15       	cp	r21, r14
      a6:	61 15       	cp	r22, r1
      a8:	64 15       	cp	r22, r4
      aa:	6d 15       	cp	r22, r13
      ac:	67 15       	cp	r22, r7
      ae:	6a 15       	cp	r22, r10
      b0:	70 15       	cp	r23, r0
      b2:	73 15       	cp	r23, r3
      b4:	76 15       	cp	r23, r6
      b6:	79 15       	cp	r23, r9
      b8:	7c 15       	cp	r23, r12
      ba:	7f 15       	cp	r23, r15
      bc:	82 15       	cp	r24, r2
      be:	85 15       	cp	r24, r5
      c0:	88 15       	cp	r24, r8
      c2:	8b 15       	cp	r24, r11
      c4:	8e 15       	cp	r24, r14
      c6:	91 15       	cp	r25, r1
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	11 e0       	ldi	r17, 0x01	; 1
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	ee ec       	ldi	r30, 0xCE	; 206
     676:	fa e5       	ldi	r31, 0x5A	; 90
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	aa 3a       	cpi	r26, 0xAA	; 170
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	14 e0       	ldi	r17, 0x04	; 4
     686:	aa ea       	ldi	r26, 0xAA	; 170
     688:	b1 e0       	ldi	r27, 0x01	; 1
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	ad 3a       	cpi	r26, 0xAD	; 173
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <main>
     698:	0c 94 65 2d 	jmp	0x5aca	; 0x5aca <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 ed 16 	call	0x2dda	; 0x2dda <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 ed 16 	call	0x2dda	; 0x2dda <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 ed 16 	call	0x2dda	; 0x2dda <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 ed 16 	call	0x2dda	; 0x2dda <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 ed 16 	call	0x2dda	; 0x2dda <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 ed 16 	call	0x2dda	; 0x2dda <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 ed 16 	call	0x2dda	; 0x2dda <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 ed 16 	call	0x2dda	; 0x2dda <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 ed 16 	call	0x2dda	; 0x2dda <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 ed 16 	call	0x2dda	; 0x2dda <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 13 17 	call	0x2e26	; 0x2e26 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 c1 16 	call	0x2d82	; 0x2d82 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 80 23 	call	0x4700	; 0x4700 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 80 23 	call	0x4700	; 0x4700 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 80 23 	call	0x4700	; 0x4700 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 80 23 	call	0x4700	; 0x4700 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 80 23 	call	0x4700	; 0x4700 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 7c 0f 	call	0x1ef8	; 0x1ef8 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 80 23 	call	0x4700	; 0x4700 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b0e:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	80 93 48 02 	sts	0x0248, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b18:	80 e0       	ldi	r24, 0x00	; 0
     b1a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <ATTINY_get_SW_state>
     b1e:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <ATTINY_get_SW_state>
     b26:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b28:	82 e0       	ldi	r24, 0x02	; 2
     b2a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <ATTINY_get_SW_state>
     b2e:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b30:	11 30       	cpi	r17, 0x01	; 1
     b32:	19 f0       	breq	.+6      	; 0xb3a <WaitButton+0x36>
     b34:	c0 e0       	ldi	r28, 0x00	; 0
     b36:	d0 e0       	ldi	r29, 0x00	; 0
     b38:	17 c0       	rjmp	.+46     	; 0xb68 <WaitButton+0x64>
		{
			LCD_printf( "SW1: Pushed\n");
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	91 e0       	ldi	r25, 0x01	; 1
     b3e:	0e 94 b7 2c 	call	0x596e	; 0x596e <puts>
			TMRSRVC_delay(1000);//wait 1 s
     b42:	88 ee       	ldi	r24, 0xE8	; 232
     b44:	93 e0       	ldi	r25, 0x03	; 3
     b46:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <TMRSRVC_delay>

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b4a:	80 e2       	ldi	r24, 0x20	; 32
     b4c:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LED_set_pattern>
                	TMRSRVC_delay(2000);//wait 2 seconds
     b50:	80 ed       	ldi	r24, 0xD0	; 208
     b52:	97 e0       	ldi	r25, 0x07	; 7
     b54:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b58:	80 e4       	ldi	r24, 0x40	; 64
     b5a:	0e 94 c1 10 	call	0x2182	; 0x2182 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b5e:	80 e2       	ldi	r24, 0x20	; 32
     b60:	0e 94 c1 10 	call	0x2182	; 0x2182 <LED_clr_pattern>
     b64:	c1 e0       	ldi	r28, 0x01	; 1
     b66:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b68:	01 30       	cpi	r16, 0x01	; 1
     b6a:	b9 f4       	brne	.+46     	; 0xb9a <WaitButton+0x96>
		{
			LCD_printf( "SW2: Pushed\n");
     b6c:	8c e0       	ldi	r24, 0x0C	; 12
     b6e:	91 e0       	ldi	r25, 0x01	; 1
     b70:	0e 94 b7 2c 	call	0x596e	; 0x596e <puts>
			TMRSRVC_delay(1000);//wait 1 s
     b74:	88 ee       	ldi	r24, 0xE8	; 232
     b76:	93 e0       	ldi	r25, 0x03	; 3
     b78:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <TMRSRVC_delay>

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     b7c:	80 e4       	ldi	r24, 0x40	; 64
     b7e:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LED_set_pattern>
                	TMRSRVC_delay(2000);//wait 2 seconds
     b82:	80 ed       	ldi	r24, 0xD0	; 208
     b84:	97 e0       	ldi	r25, 0x07	; 7
     b86:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     b8a:	80 e4       	ldi	r24, 0x40	; 64
     b8c:	0e 94 c1 10 	call	0x2182	; 0x2182 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b90:	80 e2       	ldi	r24, 0x20	; 32
     b92:	0e 94 c1 10 	call	0x2182	; 0x2182 <LED_clr_pattern>
     b96:	c2 e0       	ldi	r28, 0x02	; 2
     b98:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b9a:	81 e0       	ldi	r24, 0x01	; 1
     b9c:	f8 16       	cp	r15, r24
     b9e:	d1 f4       	brne	.+52     	; 0xbd4 <WaitButton+0xd0>
		{
			LCD_printf( "SW3: Pushed\n");
     ba0:	88 e1       	ldi	r24, 0x18	; 24
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 b7 2c 	call	0x596e	; 0x596e <puts>
			TMRSRVC_delay(1000);//wait 1 s
     ba8:	88 ee       	ldi	r24, 0xE8	; 232
     baa:	93 e0       	ldi	r25, 0x03	; 3
     bac:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <TMRSRVC_delay>

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb0:	80 e4       	ldi	r24, 0x40	; 64
     bb2:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     bb6:	80 e2       	ldi	r24, 0x20	; 32
     bb8:	0e 94 d6 10 	call	0x21ac	; 0x21ac <LED_set_pattern>
                	TMRSRVC_delay(2000);//wait 2 seconds
     bbc:	80 ed       	ldi	r24, 0xD0	; 208
     bbe:	97 e0       	ldi	r25, 0x07	; 7
     bc0:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc4:	80 e4       	ldi	r24, 0x40	; 64
     bc6:	0e 94 c1 10 	call	0x2182	; 0x2182 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bca:	80 e2       	ldi	r24, 0x20	; 32
     bcc:	0e 94 c1 10 	call	0x2182	; 0x2182 <LED_clr_pattern>
     bd0:	c3 e0       	ldi	r28, 0x03	; 3
     bd2:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     bd4:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     bd8:	ce 01       	movw	r24, r28
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	08 95       	ret

00000be6 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     be6:	2f 92       	push	r2
     be8:	3f 92       	push	r3
     bea:	4f 92       	push	r4
     bec:	5f 92       	push	r5
     bee:	6f 92       	push	r6
     bf0:	7f 92       	push	r7
     bf2:	8f 92       	push	r8
     bf4:	9f 92       	push	r9
     bf6:	af 92       	push	r10
     bf8:	bf 92       	push	r11
     bfa:	cf 92       	push	r12
     bfc:	df 92       	push	r13
     bfe:	ef 92       	push	r14
     c00:	ff 92       	push	r15
     c02:	0f 93       	push	r16
     c04:	1f 93       	push	r17
     c06:	df 93       	push	r29
     c08:	cf 93       	push	r28
     c0a:	cd b7       	in	r28, 0x3d	; 61
     c0c:	de b7       	in	r29, 0x3e	; 62
     c0e:	64 97       	sbiw	r28, 0x14	; 20
     c10:	0f b6       	in	r0, 0x3f	; 63
     c12:	f8 94       	cli
     c14:	de bf       	out	0x3e, r29	; 62
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c1a:	88 23       	and	r24, r24
     c1c:	39 f5       	brne	.+78     	; 0xc6c <prefilter+0x86>
     c1e:	89 eb       	ldi	r24, 0xB9	; 185
     c20:	92 e0       	ldi	r25, 0x02	; 2
     c22:	9c 8b       	std	Y+20, r25	; 0x14
     c24:	8b 8b       	std	Y+19, r24	; 0x13
     c26:	a3 e2       	ldi	r26, 0x23	; 35
     c28:	b4 e0       	ldi	r27, 0x04	; 4
     c2a:	be 83       	std	Y+6, r27	; 0x06
     c2c:	ad 83       	std	Y+5, r26	; 0x05
     c2e:	e9 ea       	ldi	r30, 0xA9	; 169
     c30:	f3 e0       	ldi	r31, 0x03	; 3
     c32:	fc 83       	std	Y+4, r31	; 0x04
     c34:	eb 83       	std	Y+3, r30	; 0x03
     c36:	81 e3       	ldi	r24, 0x31	; 49
     c38:	93 e0       	ldi	r25, 0x03	; 3
     c3a:	9a 83       	std	Y+2, r25	; 0x02
     c3c:	89 83       	std	Y+1, r24	; 0x01
     c3e:	0f 2e       	mov	r0, r31
     c40:	f0 e0       	ldi	r31, 0x00	; 0
     c42:	2f 2e       	mov	r2, r31
     c44:	f0 e0       	ldi	r31, 0x00	; 0
     c46:	3f 2e       	mov	r3, r31
     c48:	f0 e0       	ldi	r31, 0x00	; 0
     c4a:	4f 2e       	mov	r4, r31
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	5f 2e       	mov	r5, r31
     c50:	f0 2d       	mov	r31, r0
     c52:	2f 86       	std	Y+15, r2	; 0x0f
     c54:	38 8a       	std	Y+16, r3	; 0x10
     c56:	49 8a       	std	Y+17, r4	; 0x11
     c58:	5a 8a       	std	Y+18, r5	; 0x12
     c5a:	2b 86       	std	Y+11, r2	; 0x0b
     c5c:	3c 86       	std	Y+12, r3	; 0x0c
     c5e:	4d 86       	std	Y+13, r4	; 0x0d
     c60:	5e 86       	std	Y+14, r5	; 0x0e
     c62:	2f 82       	std	Y+7, r2	; 0x07
     c64:	38 86       	std	Y+8, r3	; 0x08
     c66:	49 86       	std	Y+9, r4	; 0x09
     c68:	5a 86       	std	Y+10, r5	; 0x0a
     c6a:	43 c0       	rjmp	.+134    	; 0xcf2 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c6c:	a0 90 b2 01 	lds	r10, 0x01B2
     c70:	b0 90 b3 01 	lds	r11, 0x01B3
     c74:	c0 90 b4 01 	lds	r12, 0x01B4
     c78:	d0 90 b5 01 	lds	r13, 0x01B5
			rtIR_old[i] = rtIR;
     c7c:	e0 90 b6 01 	lds	r14, 0x01B6
     c80:	f0 90 b7 01 	lds	r15, 0x01B7
     c84:	00 91 b8 01 	lds	r16, 0x01B8
     c88:	10 91 b9 01 	lds	r17, 0x01B9
			ftIR_old[i] = ftIR;
     c8c:	20 90 ba 01 	lds	r2, 0x01BA
     c90:	30 90 bb 01 	lds	r3, 0x01BB
     c94:	40 90 bc 01 	lds	r4, 0x01BC
     c98:	50 90 bd 01 	lds	r5, 0x01BD
			bkIR_old[i] = bkIR;
     c9c:	20 91 be 01 	lds	r18, 0x01BE
     ca0:	30 91 bf 01 	lds	r19, 0x01BF
     ca4:	40 91 c0 01 	lds	r20, 0x01C0
     ca8:	50 91 c1 01 	lds	r21, 0x01C1
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cb0:	fc 01       	movw	r30, r24
     cb2:	e7 5b       	subi	r30, 0xB7	; 183
     cb4:	fd 4f       	sbci	r31, 0xFD	; 253
     cb6:	a0 82       	st	Z, r10
     cb8:	b1 82       	std	Z+1, r11	; 0x01
     cba:	c2 82       	std	Z+2, r12	; 0x02
     cbc:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cbe:	fc 01       	movw	r30, r24
     cc0:	ed 54       	subi	r30, 0x4D	; 77
     cc2:	fc 4f       	sbci	r31, 0xFC	; 252
     cc4:	e0 82       	st	Z, r14
     cc6:	f1 82       	std	Z+1, r15	; 0x01
     cc8:	02 83       	std	Z+2, r16	; 0x02
     cca:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     ccc:	fc 01       	movw	r30, r24
     cce:	e7 5c       	subi	r30, 0xC7	; 199
     cd0:	fc 4f       	sbci	r31, 0xFC	; 252
     cd2:	20 82       	st	Z, r2
     cd4:	31 82       	std	Z+1, r3	; 0x01
     cd6:	42 82       	std	Z+2, r4	; 0x02
     cd8:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     cda:	fc 01       	movw	r30, r24
     cdc:	ef 53       	subi	r30, 0x3F	; 63
     cde:	fd 4f       	sbci	r31, 0xFD	; 253
     ce0:	20 83       	st	Z, r18
     ce2:	31 83       	std	Z+1, r19	; 0x01
     ce4:	42 83       	std	Z+2, r20	; 0x02
     ce6:	53 83       	std	Z+3, r21	; 0x03
     ce8:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     cea:	88 37       	cpi	r24, 0x78	; 120
     cec:	91 05       	cpc	r25, r1
     cee:	01 f7       	brne	.-64     	; 0xcb0 <prefilter+0xca>
     cf0:	96 cf       	rjmp	.-212    	; 0xc1e <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     cf2:	ab 89       	ldd	r26, Y+19	; 0x13
     cf4:	bc 89       	ldd	r27, Y+20	; 0x14
     cf6:	2d 91       	ld	r18, X+
     cf8:	3d 91       	ld	r19, X+
     cfa:	4d 91       	ld	r20, X+
     cfc:	5c 91       	ld	r21, X
     cfe:	13 97       	sbiw	r26, 0x03	; 3
     d00:	fd 01       	movw	r30, r26
     d02:	24 83       	std	Z+4, r18	; 0x04
     d04:	35 83       	std	Z+5, r19	; 0x05
     d06:	46 83       	std	Z+6, r20	; 0x06
     d08:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d0a:	ad 81       	ldd	r26, Y+5	; 0x05
     d0c:	be 81       	ldd	r27, Y+6	; 0x06
     d0e:	ed 90       	ld	r14, X+
     d10:	fd 90       	ld	r15, X+
     d12:	0d 91       	ld	r16, X+
     d14:	1c 91       	ld	r17, X
     d16:	13 97       	sbiw	r26, 0x03	; 3
     d18:	fd 01       	movw	r30, r26
     d1a:	e4 82       	std	Z+4, r14	; 0x04
     d1c:	f5 82       	std	Z+5, r15	; 0x05
     d1e:	06 83       	std	Z+6, r16	; 0x06
     d20:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d22:	ab 81       	ldd	r26, Y+3	; 0x03
     d24:	bc 81       	ldd	r27, Y+4	; 0x04
     d26:	ad 90       	ld	r10, X+
     d28:	bd 90       	ld	r11, X+
     d2a:	cd 90       	ld	r12, X+
     d2c:	dc 90       	ld	r13, X
     d2e:	13 97       	sbiw	r26, 0x03	; 3
     d30:	fd 01       	movw	r30, r26
     d32:	a4 82       	std	Z+4, r10	; 0x04
     d34:	b5 82       	std	Z+5, r11	; 0x05
     d36:	c6 82       	std	Z+6, r12	; 0x06
     d38:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d3a:	a9 81       	ldd	r26, Y+1	; 0x01
     d3c:	ba 81       	ldd	r27, Y+2	; 0x02
     d3e:	6d 90       	ld	r6, X+
     d40:	7d 90       	ld	r7, X+
     d42:	8d 90       	ld	r8, X+
     d44:	9c 90       	ld	r9, X
     d46:	13 97       	sbiw	r26, 0x03	; 3
     d48:	fd 01       	movw	r30, r26
     d4a:	64 82       	std	Z+4, r6	; 0x04
     d4c:	75 82       	std	Z+5, r7	; 0x05
     d4e:	86 82       	std	Z+6, r8	; 0x06
     d50:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d52:	c2 01       	movw	r24, r4
     d54:	b1 01       	movw	r22, r2
     d56:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
     d5a:	1b 01       	movw	r2, r22
     d5c:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d5e:	6f 85       	ldd	r22, Y+15	; 0x0f
     d60:	78 89       	ldd	r23, Y+16	; 0x10
     d62:	89 89       	ldd	r24, Y+17	; 0x11
     d64:	9a 89       	ldd	r25, Y+18	; 0x12
     d66:	a8 01       	movw	r20, r16
     d68:	97 01       	movw	r18, r14
     d6a:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
     d6e:	6f 87       	std	Y+15, r22	; 0x0f
     d70:	78 8b       	std	Y+16, r23	; 0x10
     d72:	89 8b       	std	Y+17, r24	; 0x11
     d74:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     d76:	6b 85       	ldd	r22, Y+11	; 0x0b
     d78:	7c 85       	ldd	r23, Y+12	; 0x0c
     d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
     d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
     d7e:	a6 01       	movw	r20, r12
     d80:	95 01       	movw	r18, r10
     d82:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
     d86:	6b 87       	std	Y+11, r22	; 0x0b
     d88:	7c 87       	std	Y+12, r23	; 0x0c
     d8a:	8d 87       	std	Y+13, r24	; 0x0d
     d8c:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     d8e:	6f 81       	ldd	r22, Y+7	; 0x07
     d90:	78 85       	ldd	r23, Y+8	; 0x08
     d92:	89 85       	ldd	r24, Y+9	; 0x09
     d94:	9a 85       	ldd	r25, Y+10	; 0x0a
     d96:	a4 01       	movw	r20, r8
     d98:	93 01       	movw	r18, r6
     d9a:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
     d9e:	6f 83       	std	Y+7, r22	; 0x07
     da0:	78 87       	std	Y+8, r23	; 0x08
     da2:	89 87       	std	Y+9, r24	; 0x09
     da4:	9a 87       	std	Y+10, r25	; 0x0a
     da6:	8b 89       	ldd	r24, Y+19	; 0x13
     da8:	9c 89       	ldd	r25, Y+20	; 0x14
     daa:	04 97       	sbiw	r24, 0x04	; 4
     dac:	9c 8b       	std	Y+20, r25	; 0x14
     dae:	8b 8b       	std	Y+19, r24	; 0x13
     db0:	ad 81       	ldd	r26, Y+5	; 0x05
     db2:	be 81       	ldd	r27, Y+6	; 0x06
     db4:	14 97       	sbiw	r26, 0x04	; 4
     db6:	be 83       	std	Y+6, r27	; 0x06
     db8:	ad 83       	std	Y+5, r26	; 0x05
     dba:	eb 81       	ldd	r30, Y+3	; 0x03
     dbc:	fc 81       	ldd	r31, Y+4	; 0x04
     dbe:	34 97       	sbiw	r30, 0x04	; 4
     dc0:	fc 83       	std	Y+4, r31	; 0x04
     dc2:	eb 83       	std	Y+3, r30	; 0x03
     dc4:	89 81       	ldd	r24, Y+1	; 0x01
     dc6:	9a 81       	ldd	r25, Y+2	; 0x02
     dc8:	04 97       	sbiw	r24, 0x04	; 4
     dca:	9a 83       	std	Y+2, r25	; 0x02
     dcc:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dce:	ab 89       	ldd	r26, Y+19	; 0x13
     dd0:	bc 89       	ldd	r27, Y+20	; 0x14
     dd2:	a1 54       	subi	r26, 0x41	; 65
     dd4:	b2 40       	sbci	r27, 0x02	; 2
     dd6:	09 f0       	breq	.+2      	; 0xdda <prefilter+0x1f4>
     dd8:	8c cf       	rjmp	.-232    	; 0xcf2 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     dda:	80 91 b2 01 	lds	r24, 0x01B2
     dde:	90 91 b3 01 	lds	r25, 0x01B3
     de2:	a0 91 b4 01 	lds	r26, 0x01B4
     de6:	b0 91 b5 01 	lds	r27, 0x01B5
     dea:	eb 89       	ldd	r30, Y+19	; 0x13
     dec:	fc 89       	ldd	r31, Y+20	; 0x14
     dee:	80 87       	std	Z+8, r24	; 0x08
     df0:	91 87       	std	Z+9, r25	; 0x09
     df2:	a2 87       	std	Z+10, r26	; 0x0a
     df4:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     df6:	80 91 b6 01 	lds	r24, 0x01B6
     dfa:	90 91 b7 01 	lds	r25, 0x01B7
     dfe:	a0 91 b8 01 	lds	r26, 0x01B8
     e02:	b0 91 b9 01 	lds	r27, 0x01B9
     e06:	80 93 b3 03 	sts	0x03B3, r24
     e0a:	90 93 b4 03 	sts	0x03B4, r25
     e0e:	a0 93 b5 03 	sts	0x03B5, r26
     e12:	b0 93 b6 03 	sts	0x03B6, r27
	ftIR_old[0] = ftIR;
     e16:	80 91 ba 01 	lds	r24, 0x01BA
     e1a:	90 91 bb 01 	lds	r25, 0x01BB
     e1e:	a0 91 bc 01 	lds	r26, 0x01BC
     e22:	b0 91 bd 01 	lds	r27, 0x01BD
     e26:	80 93 39 03 	sts	0x0339, r24
     e2a:	90 93 3a 03 	sts	0x033A, r25
     e2e:	a0 93 3b 03 	sts	0x033B, r26
     e32:	b0 93 3c 03 	sts	0x033C, r27
	bkIR_old[0] = bkIR;
     e36:	80 91 be 01 	lds	r24, 0x01BE
     e3a:	90 91 bf 01 	lds	r25, 0x01BF
     e3e:	a0 91 c0 01 	lds	r26, 0x01C0
     e42:	b0 91 c1 01 	lds	r27, 0x01C1
     e46:	80 93 c1 02 	sts	0x02C1, r24
     e4a:	90 93 c2 02 	sts	0x02C2, r25
     e4e:	a0 93 c3 02 	sts	0x02C3, r26
     e52:	b0 93 c4 02 	sts	0x02C4, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e56:	c2 01       	movw	r24, r4
     e58:	b1 01       	movw	r22, r2
     e5a:	20 e0       	ldi	r18, 0x00	; 0
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	40 ef       	ldi	r20, 0xF0	; 240
     e60:	51 e4       	ldi	r21, 0x41	; 65
     e62:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
     e66:	60 93 b2 01 	sts	0x01B2, r22
     e6a:	70 93 b3 01 	sts	0x01B3, r23
     e6e:	80 93 b4 01 	sts	0x01B4, r24
     e72:	90 93 b5 01 	sts	0x01B5, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     e76:	6f 85       	ldd	r22, Y+15	; 0x0f
     e78:	78 89       	ldd	r23, Y+16	; 0x10
     e7a:	89 89       	ldd	r24, Y+17	; 0x11
     e7c:	9a 89       	ldd	r25, Y+18	; 0x12
     e7e:	20 e0       	ldi	r18, 0x00	; 0
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	40 ef       	ldi	r20, 0xF0	; 240
     e84:	51 e4       	ldi	r21, 0x41	; 65
     e86:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
     e8a:	60 93 b6 01 	sts	0x01B6, r22
     e8e:	70 93 b7 01 	sts	0x01B7, r23
     e92:	80 93 b8 01 	sts	0x01B8, r24
     e96:	90 93 b9 01 	sts	0x01B9, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     e9a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e9c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e9e:	8d 85       	ldd	r24, Y+13	; 0x0d
     ea0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	40 ef       	ldi	r20, 0xF0	; 240
     ea8:	51 e4       	ldi	r21, 0x41	; 65
     eaa:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
     eae:	60 93 ba 01 	sts	0x01BA, r22
     eb2:	70 93 bb 01 	sts	0x01BB, r23
     eb6:	80 93 bc 01 	sts	0x01BC, r24
     eba:	90 93 bd 01 	sts	0x01BD, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     ebe:	6f 81       	ldd	r22, Y+7	; 0x07
     ec0:	78 85       	ldd	r23, Y+8	; 0x08
     ec2:	89 85       	ldd	r24, Y+9	; 0x09
     ec4:	9a 85       	ldd	r25, Y+10	; 0x0a
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	40 ef       	ldi	r20, 0xF0	; 240
     ecc:	51 e4       	ldi	r21, 0x41	; 65
     ece:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
     ed2:	60 93 be 01 	sts	0x01BE, r22
     ed6:	70 93 bf 01 	sts	0x01BF, r23
     eda:	80 93 c0 01 	sts	0x01C0, r24
     ede:	90 93 c1 01 	sts	0x01C1, r25
}
     ee2:	64 96       	adiw	r28, 0x14	; 20
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	de bf       	out	0x3e, r29	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	cd bf       	out	0x3d, r28	; 61
     eee:	cf 91       	pop	r28
     ef0:	df 91       	pop	r29
     ef2:	1f 91       	pop	r17
     ef4:	0f 91       	pop	r16
     ef6:	ff 90       	pop	r15
     ef8:	ef 90       	pop	r14
     efa:	df 90       	pop	r13
     efc:	cf 90       	pop	r12
     efe:	bf 90       	pop	r11
     f00:	af 90       	pop	r10
     f02:	9f 90       	pop	r9
     f04:	8f 90       	pop	r8
     f06:	7f 90       	pop	r7
     f08:	6f 90       	pop	r6
     f0a:	5f 90       	pop	r5
     f0c:	4f 90       	pop	r4
     f0e:	3f 90       	pop	r3
     f10:	2f 90       	pop	r2
     f12:	08 95       	ret

00000f14 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f14:	6f 92       	push	r6
     f16:	7f 92       	push	r7
     f18:	8f 92       	push	r8
     f1a:	9f 92       	push	r9
     f1c:	af 92       	push	r10
     f1e:	bf 92       	push	r11
     f20:	cf 92       	push	r12
     f22:	df 92       	push	r13
     f24:	ef 92       	push	r14
     f26:	ff 92       	push	r15
     f28:	0f 93       	push	r16
     f2a:	1f 93       	push	r17
     f2c:	3b 01       	movw	r6, r22
     f2e:	4c 01       	movw	r8, r24
	// Reset the integrator error if specified
	if(reset){
     f30:	44 23       	and	r20, r20
     f32:	61 f0       	breq	.+24     	; 0xf4c <pidController+0x38>
		Ierror = 0;
     f34:	80 e0       	ldi	r24, 0x00	; 0
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	a0 e0       	ldi	r26, 0x00	; 0
     f3a:	b0 e0       	ldi	r27, 0x00	; 0
     f3c:	80 93 aa 01 	sts	0x01AA, r24
     f40:	90 93 ab 01 	sts	0x01AB, r25
     f44:	a0 93 ac 01 	sts	0x01AC, r26
     f48:	b0 93 ad 01 	sts	0x01AD, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f4c:	c4 01       	movw	r24, r8
     f4e:	b3 01       	movw	r22, r6
     f50:	20 91 aa 01 	lds	r18, 0x01AA
     f54:	30 91 ab 01 	lds	r19, 0x01AB
     f58:	40 91 ac 01 	lds	r20, 0x01AC
     f5c:	50 91 ad 01 	lds	r21, 0x01AD
     f60:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
     f64:	5b 01       	movw	r10, r22
     f66:	6c 01       	movw	r12, r24
     f68:	60 93 aa 01 	sts	0x01AA, r22
     f6c:	70 93 ab 01 	sts	0x01AB, r23
     f70:	80 93 ac 01 	sts	0x01AC, r24
     f74:	90 93 ad 01 	sts	0x01AD, r25
     f78:	c4 01       	movw	r24, r8
     f7a:	b3 01       	movw	r22, r6
     f7c:	a4 01       	movw	r20, r8
     f7e:	93 01       	movw	r18, r6
     f80:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
     f84:	7b 01       	movw	r14, r22
     f86:	8c 01       	movw	r16, r24
     f88:	c4 01       	movw	r24, r8
     f8a:	b3 01       	movw	r22, r6
     f8c:	20 91 ae 01 	lds	r18, 0x01AE
     f90:	30 91 af 01 	lds	r19, 0x01AF
     f94:	40 91 b0 01 	lds	r20, 0x01B0
     f98:	50 91 b1 01 	lds	r21, 0x01B1
     f9c:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
     fa0:	20 e0       	ldi	r18, 0x00	; 0
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	40 e0       	ldi	r20, 0x00	; 0
     fa6:	5f e3       	ldi	r21, 0x3F	; 63
     fa8:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
     fac:	9b 01       	movw	r18, r22
     fae:	ac 01       	movw	r20, r24
     fb0:	c8 01       	movw	r24, r16
     fb2:	b7 01       	movw	r22, r14
     fb4:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
     fb8:	7b 01       	movw	r14, r22
     fba:	8c 01       	movw	r16, r24
     fbc:	c6 01       	movw	r24, r12
     fbe:	b5 01       	movw	r22, r10
     fc0:	20 e0       	ldi	r18, 0x00	; 0
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	40 e0       	ldi	r20, 0x00	; 0
     fc6:	50 e0       	ldi	r21, 0x00	; 0
     fc8:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
     fcc:	9b 01       	movw	r18, r22
     fce:	ac 01       	movw	r20, r24
     fd0:	c8 01       	movw	r24, r16
     fd2:	b7 01       	movw	r22, r14
     fd4:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fd8:	1f 91       	pop	r17
     fda:	0f 91       	pop	r16
     fdc:	ff 90       	pop	r15
     fde:	ef 90       	pop	r14
     fe0:	df 90       	pop	r13
     fe2:	cf 90       	pop	r12
     fe4:	bf 90       	pop	r11
     fe6:	af 90       	pop	r10
     fe8:	9f 90       	pop	r9
     fea:	8f 90       	pop	r8
     fec:	7f 90       	pop	r7
     fee:	6f 90       	pop	r6
     ff0:	08 95       	ret

00000ff2 <check_threshhold>:
* Output Return:	char
* Overview:			This check the IR values to thresholds
********************************************************************/

char check_threshhold(float F, float B, float L, float R)
{
     ff2:	2f 92       	push	r2
     ff4:	6f 92       	push	r6
     ff6:	7f 92       	push	r7
     ff8:	8f 92       	push	r8
     ffa:	9f 92       	push	r9
     ffc:	af 92       	push	r10
     ffe:	bf 92       	push	r11
    1000:	cf 92       	push	r12
    1002:	df 92       	push	r13
    1004:	ef 92       	push	r14
    1006:	ff 92       	push	r15
    1008:	0f 93       	push	r16
    100a:	1f 93       	push	r17
    100c:	df 93       	push	r29
    100e:	cf 93       	push	r28
    1010:	00 d0       	rcall	.+0      	; 0x1012 <check_threshhold+0x20>
    1012:	00 d0       	rcall	.+0      	; 0x1014 <check_threshhold+0x22>
    1014:	cd b7       	in	r28, 0x3d	; 61
    1016:	de b7       	in	r29, 0x3e	; 62
    1018:	69 83       	std	Y+1, r22	; 0x01
    101a:	7a 83       	std	Y+2, r23	; 0x02
    101c:	8b 83       	std	Y+3, r24	; 0x03
    101e:	9c 83       	std	Y+4, r25	; 0x04
	char check = 0;
	check += 0b00000001*(ftIR < F);
    1020:	60 90 ba 01 	lds	r6, 0x01BA
    1024:	70 90 bb 01 	lds	r7, 0x01BB
    1028:	80 90 bc 01 	lds	r8, 0x01BC
    102c:	90 90 bd 01 	lds	r9, 0x01BD
	check += 0b00000010*(bkIR < B);
    1030:	60 91 be 01 	lds	r22, 0x01BE
    1034:	70 91 bf 01 	lds	r23, 0x01BF
    1038:	80 91 c0 01 	lds	r24, 0x01C0
    103c:	90 91 c1 01 	lds	r25, 0x01C1
    1040:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    1044:	28 2e       	mov	r2, r24
    1046:	22 1c       	adc	r2, r2
    1048:	22 24       	eor	r2, r2
    104a:	22 1c       	adc	r2, r2
    104c:	22 0c       	add	r2, r2
	check += 0b00000100*(ltIR < L);
    104e:	60 91 b2 01 	lds	r22, 0x01B2
    1052:	70 91 b3 01 	lds	r23, 0x01B3
    1056:	80 91 b4 01 	lds	r24, 0x01B4
    105a:	90 91 b5 01 	lds	r25, 0x01B5
    105e:	a8 01       	movw	r20, r16
    1060:	97 01       	movw	r18, r14
    1062:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    1066:	08 2f       	mov	r16, r24
    1068:	00 1f       	adc	r16, r16
    106a:	00 27       	eor	r16, r16
    106c:	00 1f       	adc	r16, r16
    106e:	00 0f       	add	r16, r16
    1070:	00 0f       	add	r16, r16
	check += 0b00001000*(rtIR < R);
    1072:	60 91 b6 01 	lds	r22, 0x01B6
    1076:	70 91 b7 01 	lds	r23, 0x01B7
    107a:	80 91 b8 01 	lds	r24, 0x01B8
    107e:	90 91 b9 01 	lds	r25, 0x01B9
    1082:	a6 01       	movw	r20, r12
    1084:	95 01       	movw	r18, r10
    1086:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    108a:	18 2f       	mov	r17, r24
    108c:	11 1f       	adc	r17, r17
    108e:	11 27       	eor	r17, r17
    1090:	11 1f       	adc	r17, r17
    1092:	11 0f       	add	r17, r17
    1094:	11 0f       	add	r17, r17
    1096:	11 0f       	add	r17, r17

char check_threshhold(float F, float B, float L, float R)
{
	char check = 0;
	check += 0b00000001*(ftIR < F);
	check += 0b00000010*(bkIR < B);
    1098:	ff 24       	eor	r15, r15
    109a:	c4 01       	movw	r24, r8
    109c:	b3 01       	movw	r22, r6
    109e:	29 81       	ldd	r18, Y+1	; 0x01
    10a0:	3a 81       	ldd	r19, Y+2	; 0x02
    10a2:	4b 81       	ldd	r20, Y+3	; 0x03
    10a4:	5c 81       	ldd	r21, Y+4	; 0x04
    10a6:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    10aa:	88 23       	and	r24, r24
    10ac:	14 f4       	brge	.+4      	; 0x10b2 <check_threshhold+0xc0>
    10ae:	ff 24       	eor	r15, r15
    10b0:	f3 94       	inc	r15
    10b2:	2f 0c       	add	r2, r15
	check += 0b00000100*(ltIR < L);
    10b4:	20 0e       	add	r2, r16
	check += 0b00001000*(rtIR < R);
	return check;	
}
    10b6:	82 2d       	mov	r24, r2
    10b8:	81 0f       	add	r24, r17
    10ba:	0f 90       	pop	r0
    10bc:	0f 90       	pop	r0
    10be:	0f 90       	pop	r0
    10c0:	0f 90       	pop	r0
    10c2:	cf 91       	pop	r28
    10c4:	df 91       	pop	r29
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	9f 90       	pop	r9
    10d8:	8f 90       	pop	r8
    10da:	7f 90       	pop	r7
    10dc:	6f 90       	pop	r6
    10de:	2f 90       	pop	r2
    10e0:	08 95       	ret

000010e2 <move_arc_stwt>:
		// bool stepper_FWD = arcLength >= 0;
		// STEPPER_move_stwt( STEPPER_BOTH, 
		// stepper_FWD, stepper_NUM, arcSpeed, arcAccel, arcBrk, // Left
		// stepper_FWD, stepper_NUM, arcSpeed, arcAccel, arcBrk); // Right
	// }
}
    10e2:	08 95       	ret

000010e4 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{
	unsigned char sensors = ATTINY_get_sensors();
    10e4:	0e 94 94 15 	call	0x2b28	; 0x2b28 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    10e8:	28 2f       	mov	r18, r24
    10ea:	21 70       	andi	r18, 0x01	; 1
    10ec:	20 93 b1 03 	sts	0x03B1, r18
	leftContact =  (0b00000010 & sensors)>>1;
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	82 70       	andi	r24, 0x02	; 2
    10f4:	90 70       	andi	r25, 0x00	; 0
    10f6:	95 95       	asr	r25
    10f8:	87 95       	ror	r24
    10fa:	80 93 b2 03 	sts	0x03B2, r24
	
	
}
    10fe:	08 95       	ret

00001100 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1100:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1104:	60 93 c2 01 	sts	0x01C2, r22
    1108:	70 93 c3 01 	sts	0x01C3, r23
    110c:	80 93 c4 01 	sts	0x01C4, r24
    1110:	90 93 c5 01 	sts	0x01C5, r25
	leftLightVolt = getLeftLight();
    1114:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1118:	60 93 c6 01 	sts	0x01C6, r22
    111c:	70 93 c7 01 	sts	0x01C7, r23
    1120:	80 93 c8 01 	sts	0x01C8, r24
    1124:	90 93 c9 01 	sts	0x01C9, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear;
}
    1128:	08 95       	ret

0000112a <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    112a:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    112e:	60 93 ba 01 	sts	0x01BA, r22
    1132:	70 93 bb 01 	sts	0x01BB, r23
    1136:	80 93 bc 01 	sts	0x01BC, r24
    113a:	90 93 bd 01 	sts	0x01BD, r25
	bkIR = 50;
    113e:	80 e0       	ldi	r24, 0x00	; 0
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	a8 e4       	ldi	r26, 0x48	; 72
    1144:	b2 e4       	ldi	r27, 0x42	; 66
    1146:	80 93 be 01 	sts	0x01BE, r24
    114a:	90 93 bf 01 	sts	0x01BF, r25
    114e:	a0 93 c0 01 	sts	0x01C0, r26
    1152:	b0 93 c1 01 	sts	0x01C1, r27
	ltIR = getLeftIR();
    1156:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    115a:	60 93 b2 01 	sts	0x01B2, r22
    115e:	70 93 b3 01 	sts	0x01B3, r23
    1162:	80 93 b4 01 	sts	0x01B4, r24
    1166:	90 93 b5 01 	sts	0x01B5, r25
	rtIR = getRightIR();
    116a:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    116e:	60 93 b6 01 	sts	0x01B6, r22
    1172:	70 93 b7 01 	sts	0x01B7, r23
    1176:	80 93 b8 01 	sts	0x01B8, r24
    117a:	90 93 b9 01 	sts	0x01B9, r25
}
    117e:	08 95       	ret

00001180 <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
    1180:	2f 92       	push	r2
    1182:	3f 92       	push	r3
    1184:	4f 92       	push	r4
    1186:	5f 92       	push	r5
    1188:	6f 92       	push	r6
    118a:	7f 92       	push	r7
    118c:	8f 92       	push	r8
    118e:	9f 92       	push	r9
    1190:	af 92       	push	r10
    1192:	bf 92       	push	r11
    1194:	cf 92       	push	r12
    1196:	df 92       	push	r13
    1198:	ef 92       	push	r14
    119a:	ff 92       	push	r15
    119c:	0f 93       	push	r16
    119e:	1f 93       	push	r17
    11a0:	df 93       	push	r29
    11a2:	cf 93       	push	r28
    11a4:	00 d0       	rcall	.+0      	; 0x11a6 <moveAway+0x26>
    11a6:	00 d0       	rcall	.+0      	; 0x11a8 <moveAway+0x28>
    11a8:	cd b7       	in	r28, 0x3d	; 61
    11aa:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    11ac:	60 90 ba 01 	lds	r6, 0x01BA
    11b0:	70 90 bb 01 	lds	r7, 0x01BB
    11b4:	80 90 bc 01 	lds	r8, 0x01BC
    11b8:	90 90 bd 01 	lds	r9, 0x01BD
    11bc:	a0 90 be 01 	lds	r10, 0x01BE
    11c0:	b0 90 bf 01 	lds	r11, 0x01BF
    11c4:	c0 90 c0 01 	lds	r12, 0x01C0
    11c8:	d0 90 c1 01 	lds	r13, 0x01C1
	float moveX = rtIR - ltIR;
    11cc:	e0 90 b6 01 	lds	r14, 0x01B6
    11d0:	f0 90 b7 01 	lds	r15, 0x01B7
    11d4:	00 91 b8 01 	lds	r16, 0x01B8
    11d8:	10 91 b9 01 	lds	r17, 0x01B9
    11dc:	80 91 b2 01 	lds	r24, 0x01B2
    11e0:	90 91 b3 01 	lds	r25, 0x01B3
    11e4:	a0 91 b4 01 	lds	r26, 0x01B4
    11e8:	b0 91 b5 01 	lds	r27, 0x01B5
    11ec:	89 83       	std	Y+1, r24	; 0x01
    11ee:	9a 83       	std	Y+2, r25	; 0x02
    11f0:	ab 83       	std	Y+3, r26	; 0x03
    11f2:	bc 83       	std	Y+4, r27	; 0x04
    11f4:	c8 01       	movw	r24, r16
    11f6:	b7 01       	movw	r22, r14
    11f8:	29 81       	ldd	r18, Y+1	; 0x01
    11fa:	3a 81       	ldd	r19, Y+2	; 0x02
    11fc:	4b 81       	ldd	r20, Y+3	; 0x03
    11fe:	5c 81       	ldd	r21, Y+4	; 0x04
    1200:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
    1204:	1b 01       	movw	r2, r22
    1206:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
    1208:	c4 01       	movw	r24, r8
    120a:	b3 01       	movw	r22, r6
    120c:	20 e0       	ldi	r18, 0x00	; 0
    120e:	30 e0       	ldi	r19, 0x00	; 0
    1210:	40 ee       	ldi	r20, 0xE0	; 224
    1212:	50 e4       	ldi	r21, 0x40	; 64
    1214:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    1218:	87 fd       	sbrc	r24, 7
    121a:	0b c0       	rjmp	.+22     	; 0x1232 <moveAway+0xb2>
    121c:	c6 01       	movw	r24, r12
    121e:	b5 01       	movw	r22, r10
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 ee       	ldi	r20, 0xE0	; 224
    1226:	50 e4       	ldi	r21, 0x40	; 64
    1228:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    122c:	88 23       	and	r24, r24
    122e:	0c f0       	brlt	.+2      	; 0x1232 <moveAway+0xb2>
    1230:	68 c0       	rjmp	.+208    	; 0x1302 <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    1232:	c4 01       	movw	r24, r8
    1234:	b3 01       	movw	r22, r6
    1236:	a6 01       	movw	r20, r12
    1238:	95 01       	movw	r18, r10
    123a:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
    123e:	7b 01       	movw	r14, r22
    1240:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
    1242:	77 24       	eor	r7, r7
    1244:	20 e0       	ldi	r18, 0x00	; 0
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	40 e0       	ldi	r20, 0x00	; 0
    124a:	50 e0       	ldi	r21, 0x00	; 0
    124c:	0e 94 32 24 	call	0x4864	; 0x4864 <__gesf2>
    1250:	88 23       	and	r24, r24
    1252:	14 f0       	brlt	.+4      	; 0x1258 <moveAway+0xd8>
    1254:	77 24       	eor	r7, r7
    1256:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1258:	c8 01       	movw	r24, r16
    125a:	b7 01       	movw	r22, r14
    125c:	0e 94 4f 23 	call	0x469e	; 0x469e <__fixsfsi>
    1260:	9b 01       	movw	r18, r22
    1262:	77 ff       	sbrs	r23, 7
    1264:	03 c0       	rjmp	.+6      	; 0x126c <moveAway+0xec>
    1266:	30 95       	com	r19
    1268:	21 95       	neg	r18
    126a:	3f 4f       	sbci	r19, 0xFF	; 255
    126c:	b9 01       	movw	r22, r18
    126e:	88 27       	eor	r24, r24
    1270:	77 fd       	sbrc	r23, 7
    1272:	80 95       	com	r24
    1274:	98 2f       	mov	r25, r24
    1276:	0e 94 82 23 	call	0x4704	; 0x4704 <__floatsisf>
    127a:	6b 01       	movw	r12, r22
    127c:	7c 01       	movw	r14, r24
    127e:	ad b7       	in	r26, 0x3d	; 61
    1280:	be b7       	in	r27, 0x3e	; 62
    1282:	19 97       	sbiw	r26, 0x09	; 9
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	f8 94       	cli
    1288:	be bf       	out	0x3e, r27	; 62
    128a:	0f be       	out	0x3f, r0	; 63
    128c:	ad bf       	out	0x3d, r26	; 61
    128e:	0d b7       	in	r16, 0x3d	; 61
    1290:	1e b7       	in	r17, 0x3e	; 62
    1292:	0f 5f       	subi	r16, 0xFF	; 255
    1294:	1f 4f       	sbci	r17, 0xFF	; 255
    1296:	a2 01       	movw	r20, r4
    1298:	91 01       	movw	r18, r2
    129a:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
    129e:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__fixunssfsi>
    12a2:	4b 01       	movw	r8, r22
    12a4:	5c 01       	movw	r10, r24
    12a6:	82 e3       	ldi	r24, 0x32	; 50
    12a8:	90 e0       	ldi	r25, 0x00	; 0
    12aa:	f8 01       	movw	r30, r16
    12ac:	91 83       	std	Z+1, r25	; 0x01
    12ae:	80 83       	st	Z, r24
    12b0:	c7 01       	movw	r24, r14
    12b2:	b6 01       	movw	r22, r12
    12b4:	a2 01       	movw	r20, r4
    12b6:	91 01       	movw	r18, r2
    12b8:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
    12bc:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__fixunssfsi>
    12c0:	d8 01       	movw	r26, r16
    12c2:	13 96       	adiw	r26, 0x03	; 3
    12c4:	7c 93       	st	X, r23
    12c6:	6e 93       	st	-X, r22
    12c8:	12 97       	sbiw	r26, 0x02	; 2
    12ca:	82 ec       	ldi	r24, 0xC2	; 194
    12cc:	91 e0       	ldi	r25, 0x01	; 1
    12ce:	15 96       	adiw	r26, 0x05	; 5
    12d0:	9c 93       	st	X, r25
    12d2:	8e 93       	st	-X, r24
    12d4:	14 97       	sbiw	r26, 0x04	; 4
    12d6:	16 96       	adiw	r26, 0x06	; 6
    12d8:	1c 92       	st	X, r1
    12da:	16 97       	sbiw	r26, 0x06	; 6
    12dc:	18 96       	adiw	r26, 0x08	; 8
    12de:	1c 92       	st	X, r1
    12e0:	1e 92       	st	-X, r1
    12e2:	17 97       	sbiw	r26, 0x07	; 7
    12e4:	81 e0       	ldi	r24, 0x01	; 1
    12e6:	62 e0       	ldi	r22, 0x02	; 2
    12e8:	47 2d       	mov	r20, r7
    12ea:	22 e3       	ldi	r18, 0x32	; 50
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	84 01       	movw	r16, r8
    12f0:	e2 ec       	ldi	r30, 0xC2	; 194
    12f2:	ee 2e       	mov	r14, r30
    12f4:	e1 e0       	ldi	r30, 0x01	; 1
    12f6:	fe 2e       	mov	r15, r30
    12f8:	cc 24       	eor	r12, r12
    12fa:	aa 24       	eor	r10, r10
    12fc:	bb 24       	eor	r11, r11
    12fe:	87 2c       	mov	r8, r7
    1300:	82 c0       	rjmp	.+260    	; 0x1406 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
    1302:	c8 01       	movw	r24, r16
    1304:	b7 01       	movw	r22, r14
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e2       	ldi	r20, 0x20	; 32
    130c:	51 e4       	ldi	r21, 0x41	; 65
    130e:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    1312:	88 23       	and	r24, r24
    1314:	b4 f5       	brge	.+108    	; 0x1382 <moveAway+0x202>
	{
			BOOL moveForwardR = ~(moveX <= 0);
			BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1316:	c2 01       	movw	r24, r4
    1318:	b1 01       	movw	r22, r2
    131a:	0e 94 4f 23 	call	0x469e	; 0x469e <__fixsfsi>
    131e:	8b 01       	movw	r16, r22
    1320:	77 ff       	sbrs	r23, 7
    1322:	03 c0       	rjmp	.+6      	; 0x132a <moveAway+0x1aa>
    1324:	10 95       	com	r17
    1326:	01 95       	neg	r16
    1328:	1f 4f       	sbci	r17, 0xFF	; 255
    132a:	2d b7       	in	r18, 0x3d	; 61
    132c:	3e b7       	in	r19, 0x3e	; 62
    132e:	29 50       	subi	r18, 0x09	; 9
    1330:	30 40       	sbci	r19, 0x00	; 0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	3e bf       	out	0x3e, r19	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	2d bf       	out	0x3d, r18	; 61
    133c:	ed b7       	in	r30, 0x3d	; 61
    133e:	fe b7       	in	r31, 0x3e	; 62
    1340:	31 96       	adiw	r30, 0x01	; 1
    1342:	88 ec       	ldi	r24, 0xC8	; 200
    1344:	90 e0       	ldi	r25, 0x00	; 0
    1346:	ad b7       	in	r26, 0x3d	; 61
    1348:	be b7       	in	r27, 0x3e	; 62
    134a:	12 96       	adiw	r26, 0x02	; 2
    134c:	9c 93       	st	X, r25
    134e:	8e 93       	st	-X, r24
    1350:	11 97       	sbiw	r26, 0x01	; 1
    1352:	13 83       	std	Z+3, r17	; 0x03
    1354:	02 83       	std	Z+2, r16	; 0x02
    1356:	82 ec       	ldi	r24, 0xC2	; 194
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	95 83       	std	Z+5, r25	; 0x05
    135c:	84 83       	std	Z+4, r24	; 0x04
    135e:	16 82       	std	Z+6, r1	; 0x06
    1360:	10 86       	std	Z+8, r1	; 0x08
    1362:	17 82       	std	Z+7, r1	; 0x07
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	62 e0       	ldi	r22, 0x02	; 2
    1368:	40 e0       	ldi	r20, 0x00	; 0
    136a:	28 ec       	ldi	r18, 0xC8	; 200
    136c:	30 e0       	ldi	r19, 0x00	; 0
    136e:	72 ec       	ldi	r23, 0xC2	; 194
    1370:	e7 2e       	mov	r14, r23
    1372:	71 e0       	ldi	r23, 0x01	; 1
    1374:	f7 2e       	mov	r15, r23
    1376:	cc 24       	eor	r12, r12
    1378:	aa 24       	eor	r10, r10
    137a:	bb 24       	eor	r11, r11
    137c:	88 24       	eor	r8, r8
    137e:	83 94       	inc	r8
    1380:	42 c0       	rjmp	.+132    	; 0x1406 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
    1382:	69 81       	ldd	r22, Y+1	; 0x01
    1384:	7a 81       	ldd	r23, Y+2	; 0x02
    1386:	8b 81       	ldd	r24, Y+3	; 0x03
    1388:	9c 81       	ldd	r25, Y+4	; 0x04
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	40 e2       	ldi	r20, 0x20	; 32
    1390:	51 e4       	ldi	r21, 0x41	; 65
    1392:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    1396:	87 fd       	sbrc	r24, 7
    1398:	02 c0       	rjmp	.+4      	; 0x139e <moveAway+0x21e>
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	3f c0       	rjmp	.+126    	; 0x141c <moveAway+0x29c>
	{
			BOOL moveForwardR = ~(moveX <= 0);
			BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    139e:	c2 01       	movw	r24, r4
    13a0:	b1 01       	movw	r22, r2
    13a2:	0e 94 4f 23 	call	0x469e	; 0x469e <__fixsfsi>
    13a6:	8b 01       	movw	r16, r22
    13a8:	77 ff       	sbrs	r23, 7
    13aa:	03 c0       	rjmp	.+6      	; 0x13b2 <moveAway+0x232>
    13ac:	10 95       	com	r17
    13ae:	01 95       	neg	r16
    13b0:	1f 4f       	sbci	r17, 0xFF	; 255
    13b2:	2d b7       	in	r18, 0x3d	; 61
    13b4:	3e b7       	in	r19, 0x3e	; 62
    13b6:	29 50       	subi	r18, 0x09	; 9
    13b8:	30 40       	sbci	r19, 0x00	; 0
    13ba:	0f b6       	in	r0, 0x3f	; 63
    13bc:	f8 94       	cli
    13be:	3e bf       	out	0x3e, r19	; 62
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	2d bf       	out	0x3d, r18	; 61
    13c4:	ed b7       	in	r30, 0x3d	; 61
    13c6:	fe b7       	in	r31, 0x3e	; 62
    13c8:	31 96       	adiw	r30, 0x01	; 1
    13ca:	88 ec       	ldi	r24, 0xC8	; 200
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	ad b7       	in	r26, 0x3d	; 61
    13d0:	be b7       	in	r27, 0x3e	; 62
    13d2:	12 96       	adiw	r26, 0x02	; 2
    13d4:	9c 93       	st	X, r25
    13d6:	8e 93       	st	-X, r24
    13d8:	11 97       	sbiw	r26, 0x01	; 1
    13da:	13 83       	std	Z+3, r17	; 0x03
    13dc:	02 83       	std	Z+2, r16	; 0x02
    13de:	82 ec       	ldi	r24, 0xC2	; 194
    13e0:	91 e0       	ldi	r25, 0x01	; 1
    13e2:	95 83       	std	Z+5, r25	; 0x05
    13e4:	84 83       	std	Z+4, r24	; 0x04
    13e6:	16 82       	std	Z+6, r1	; 0x06
    13e8:	10 86       	std	Z+8, r1	; 0x08
    13ea:	17 82       	std	Z+7, r1	; 0x07
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	62 e0       	ldi	r22, 0x02	; 2
    13f0:	41 e0       	ldi	r20, 0x01	; 1
    13f2:	28 ec       	ldi	r18, 0xC8	; 200
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	52 ec       	ldi	r21, 0xC2	; 194
    13f8:	e5 2e       	mov	r14, r21
    13fa:	51 e0       	ldi	r21, 0x01	; 1
    13fc:	f5 2e       	mov	r15, r21
    13fe:	cc 24       	eor	r12, r12
    1400:	aa 24       	eor	r10, r10
    1402:	bb 24       	eor	r11, r11
    1404:	88 24       	eor	r8, r8
    1406:	0e 94 a8 12 	call	0x2550	; 0x2550 <STEPPER_move>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	ed b7       	in	r30, 0x3d	; 61
    140e:	fe b7       	in	r31, 0x3e	; 62
    1410:	39 96       	adiw	r30, 0x09	; 9
    1412:	0f b6       	in	r0, 0x3f	; 63
    1414:	f8 94       	cli
    1416:	fe bf       	out	0x3e, r31	; 62
    1418:	0f be       	out	0x3f, r0	; 63
    141a:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
    141c:	0f 90       	pop	r0
    141e:	0f 90       	pop	r0
    1420:	0f 90       	pop	r0
    1422:	0f 90       	pop	r0
    1424:	cf 91       	pop	r28
    1426:	df 91       	pop	r29
    1428:	1f 91       	pop	r17
    142a:	0f 91       	pop	r16
    142c:	ff 90       	pop	r15
    142e:	ef 90       	pop	r14
    1430:	df 90       	pop	r13
    1432:	cf 90       	pop	r12
    1434:	bf 90       	pop	r11
    1436:	af 90       	pop	r10
    1438:	9f 90       	pop	r9
    143a:	8f 90       	pop	r8
    143c:	7f 90       	pop	r7
    143e:	6f 90       	pop	r6
    1440:	5f 90       	pop	r5
    1442:	4f 90       	pop	r4
    1444:	3f 90       	pop	r3
    1446:	2f 90       	pop	r2
    1448:	08 95       	ret

0000144a <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    144a:	5f 92       	push	r5
    144c:	6f 92       	push	r6
    144e:	7f 92       	push	r7
    1450:	8f 92       	push	r8
    1452:	9f 92       	push	r9
    1454:	af 92       	push	r10
    1456:	bf 92       	push	r11
    1458:	cf 92       	push	r12
    145a:	df 92       	push	r13
    145c:	ef 92       	push	r14
    145e:	ff 92       	push	r15
    1460:	0f 93       	push	r16
    1462:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    1464:	e0 90 ba 01 	lds	r14, 0x01BA
    1468:	f0 90 bb 01 	lds	r15, 0x01BB
    146c:	00 91 bc 01 	lds	r16, 0x01BC
    1470:	10 91 bd 01 	lds	r17, 0x01BD
    1474:	55 24       	eor	r5, r5
    1476:	c8 01       	movw	r24, r16
    1478:	b7 01       	movw	r22, r14
    147a:	20 e0       	ldi	r18, 0x00	; 0
    147c:	30 e0       	ldi	r19, 0x00	; 0
    147e:	48 eb       	ldi	r20, 0xB8	; 184
    1480:	51 e4       	ldi	r21, 0x41	; 65
    1482:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    1486:	88 23       	and	r24, r24
    1488:	14 f4       	brge	.+4      	; 0x148e <moveWall+0x44>
    148a:	55 24       	eor	r5, r5
    148c:	53 94       	inc	r5
    148e:	a0 90 b6 01 	lds	r10, 0x01B6
    1492:	b0 90 b7 01 	lds	r11, 0x01B7
    1496:	c0 90 b8 01 	lds	r12, 0x01B8
    149a:	d0 90 b9 01 	lds	r13, 0x01B9
    149e:	60 90 b2 01 	lds	r6, 0x01B2
    14a2:	70 90 b3 01 	lds	r7, 0x01B3
    14a6:	80 90 b4 01 	lds	r8, 0x01B4
    14aa:	90 90 b5 01 	lds	r9, 0x01B5
	if(!isWall){	
    14ae:	55 20       	and	r5, r5
    14b0:	31 f5       	brne	.+76     	; 0x14fe <moveWall+0xb4>
    14b2:	60 91 be 01 	lds	r22, 0x01BE
    14b6:	70 91 bf 01 	lds	r23, 0x01BF
    14ba:	80 91 c0 01 	lds	r24, 0x01C0
    14be:	90 91 c1 01 	lds	r25, 0x01C1
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	48 eb       	ldi	r20, 0xB8	; 184
    14c8:	51 e4       	ldi	r21, 0x41	; 65
    14ca:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    14ce:	87 fd       	sbrc	r24, 7
    14d0:	16 c0       	rjmp	.+44     	; 0x14fe <moveWall+0xb4>
    14d2:	c6 01       	movw	r24, r12
    14d4:	b5 01       	movw	r22, r10
    14d6:	20 e0       	ldi	r18, 0x00	; 0
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	40 ea       	ldi	r20, 0xA0	; 160
    14dc:	51 e4       	ldi	r21, 0x41	; 65
    14de:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    14e2:	87 fd       	sbrc	r24, 7
    14e4:	0c c0       	rjmp	.+24     	; 0x14fe <moveWall+0xb4>
    14e6:	c4 01       	movw	r24, r8
    14e8:	b3 01       	movw	r22, r6
    14ea:	20 e0       	ldi	r18, 0x00	; 0
    14ec:	30 e0       	ldi	r19, 0x00	; 0
    14ee:	40 ea       	ldi	r20, 0xA0	; 160
    14f0:	51 e4       	ldi	r21, 0x41	; 65
    14f2:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    14f6:	87 fd       	sbrc	r24, 7
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <moveWall+0xb4>
	
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	
}
    14fa:	80 e0       	ldi	r24, 0x00	; 0
    14fc:	fd c0       	rjmp	.+506    	; 0x16f8 <moveWall+0x2ae>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    14fe:	c6 01       	movw	r24, r12
    1500:	b5 01       	movw	r22, r10
    1502:	20 e0       	ldi	r18, 0x00	; 0
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	40 ea       	ldi	r20, 0xA0	; 160
    1508:	51 e4       	ldi	r21, 0x41	; 65
    150a:	0e 94 32 24 	call	0x4864	; 0x4864 <__gesf2>
    150e:	18 16       	cp	r1, r24
    1510:	64 f4       	brge	.+24     	; 0x152a <moveWall+0xe0>
		rtIR = IR_WALL_R_THRESH-15;
    1512:	80 e0       	ldi	r24, 0x00	; 0
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	a0 ea       	ldi	r26, 0xA0	; 160
    1518:	b0 e4       	ldi	r27, 0x40	; 64
    151a:	80 93 b6 01 	sts	0x01B6, r24
    151e:	90 93 b7 01 	sts	0x01B7, r25
    1522:	a0 93 b8 01 	sts	0x01B8, r26
    1526:	b0 93 b9 01 	sts	0x01B9, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    152a:	c4 01       	movw	r24, r8
    152c:	b3 01       	movw	r22, r6
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 ea       	ldi	r20, 0xA0	; 160
    1534:	51 e4       	ldi	r21, 0x41	; 65
    1536:	0e 94 32 24 	call	0x4864	; 0x4864 <__gesf2>
    153a:	18 16       	cp	r1, r24
    153c:	14 f0       	brlt	.+4      	; 0x1542 <moveWall+0xf8>
    153e:	80 e0       	ldi	r24, 0x00	; 0
    1540:	0d c0       	rjmp	.+26     	; 0x155c <moveWall+0x112>
		ltIR = IR_WALL_L_THRESH-15;
    1542:	80 e0       	ldi	r24, 0x00	; 0
    1544:	90 e0       	ldi	r25, 0x00	; 0
    1546:	a0 ea       	ldi	r26, 0xA0	; 160
    1548:	b0 e4       	ldi	r27, 0x40	; 64
    154a:	80 93 b2 01 	sts	0x01B2, r24
    154e:	90 93 b3 01 	sts	0x01B3, r25
    1552:	a0 93 b4 01 	sts	0x01B4, r26
    1556:	b0 93 b5 01 	sts	0x01B5, r27
    155a:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    155c:	55 20       	and	r5, r5
    155e:	21 f1       	breq	.+72     	; 0x15a8 <moveWall+0x15e>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    1560:	88 23       	and	r24, r24
    1562:	29 f0       	breq	.+10     	; 0x156e <moveWall+0x124>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	70 e0       	ldi	r23, 0x00	; 0
    1568:	8a e7       	ldi	r24, 0x7A	; 122
    156a:	94 e4       	ldi	r25, 0x44	; 68
    156c:	04 c0       	rjmp	.+8      	; 0x1576 <moveWall+0x12c>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	70 e0       	ldi	r23, 0x00	; 0
    1572:	8a e7       	ldi	r24, 0x7A	; 122
    1574:	94 ec       	ldi	r25, 0xC4	; 196
    1576:	a8 01       	movw	r20, r16
    1578:	97 01       	movw	r18, r14
    157a:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
    157e:	20 91 b2 01 	lds	r18, 0x01B2
    1582:	30 91 b3 01 	lds	r19, 0x01B3
    1586:	40 91 b4 01 	lds	r20, 0x01B4
    158a:	50 91 b5 01 	lds	r21, 0x01B5
    158e:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
    1592:	9b 01       	movw	r18, r22
    1594:	ac 01       	movw	r20, r24
    1596:	60 91 b6 01 	lds	r22, 0x01B6
    159a:	70 91 b7 01 	lds	r23, 0x01B7
    159e:	80 91 b8 01 	lds	r24, 0x01B8
    15a2:	90 91 b9 01 	lds	r25, 0x01B9
    15a6:	10 c0       	rjmp	.+32     	; 0x15c8 <moveWall+0x17e>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    15a8:	60 91 b6 01 	lds	r22, 0x01B6
    15ac:	70 91 b7 01 	lds	r23, 0x01B7
    15b0:	80 91 b8 01 	lds	r24, 0x01B8
    15b4:	90 91 b9 01 	lds	r25, 0x01B9
    15b8:	20 91 b2 01 	lds	r18, 0x01B2
    15bc:	30 91 b3 01 	lds	r19, 0x01B3
    15c0:	40 91 b4 01 	lds	r20, 0x01B4
    15c4:	50 91 b5 01 	lds	r21, 0x01B5
    15c8:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
    15cc:	e6 2f       	mov	r30, r22
	}

	// Use the PID controller function to calculate error
	float effort = pidController(error, 0);
    15ce:	2e 2f       	mov	r18, r30
    15d0:	37 2f       	mov	r19, r23
    15d2:	48 2f       	mov	r20, r24
    15d4:	59 2f       	mov	r21, r25
    15d6:	b9 01       	movw	r22, r18
    15d8:	ca 01       	movw	r24, r20
    15da:	40 e0       	ldi	r20, 0x00	; 0
    15dc:	0e 94 8a 07 	call	0xf14	; 0xf14 <pidController>
    15e0:	6b 01       	movw	r12, r22
    15e2:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    15e4:	0e 94 4f 23 	call	0x469e	; 0x469e <__fixsfsi>
    15e8:	8b 01       	movw	r16, r22
    15ea:	77 ff       	sbrs	r23, 7
    15ec:	03 c0       	rjmp	.+6      	; 0x15f4 <moveWall+0x1aa>
    15ee:	10 95       	com	r17
    15f0:	01 95       	neg	r16
    15f2:	1f 4f       	sbci	r17, 0xFF	; 255
    15f4:	05 36       	cpi	r16, 0x65	; 101
    15f6:	11 05       	cpc	r17, r1
    15f8:	fc f0       	brlt	.+62     	; 0x1638 <moveWall+0x1ee>
    15fa:	c7 01       	movw	r24, r14
    15fc:	b6 01       	movw	r22, r12
    15fe:	20 e0       	ldi	r18, 0x00	; 0
    1600:	30 e0       	ldi	r19, 0x00	; 0
    1602:	40 e0       	ldi	r20, 0x00	; 0
    1604:	50 e0       	ldi	r21, 0x00	; 0
    1606:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    160a:	88 23       	and	r24, r24
    160c:	a9 f0       	breq	.+42     	; 0x1638 <moveWall+0x1ee>
		effort = MAX_EFFORT*(effort/abs(effort));
    160e:	b8 01       	movw	r22, r16
    1610:	88 27       	eor	r24, r24
    1612:	77 fd       	sbrc	r23, 7
    1614:	80 95       	com	r24
    1616:	98 2f       	mov	r25, r24
    1618:	0e 94 82 23 	call	0x4704	; 0x4704 <__floatsisf>
    161c:	9b 01       	movw	r18, r22
    161e:	ac 01       	movw	r20, r24
    1620:	c7 01       	movw	r24, r14
    1622:	b6 01       	movw	r22, r12
    1624:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	48 ec       	ldi	r20, 0xC8	; 200
    162e:	52 e4       	ldi	r21, 0x42	; 66
    1630:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
    1634:	6b 01       	movw	r12, r22
    1636:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    1638:	c7 01       	movw	r24, r14
    163a:	b6 01       	movw	r22, r12
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	48 ec       	ldi	r20, 0xC8	; 200
    1642:	52 e4       	ldi	r21, 0x42	; 66
    1644:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
    1648:	6b 01       	movw	r12, r22
    164a:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    164c:	8d b7       	in	r24, 0x3d	; 61
    164e:	9e b7       	in	r25, 0x3e	; 62
    1650:	09 97       	sbiw	r24, 0x09	; 9
    1652:	0f b6       	in	r0, 0x3f	; 63
    1654:	f8 94       	cli
    1656:	9e bf       	out	0x3e, r25	; 62
    1658:	0f be       	out	0x3f, r0	; 63
    165a:	8d bf       	out	0x3d, r24	; 61
    165c:	0d b7       	in	r16, 0x3d	; 61
    165e:	1e b7       	in	r17, 0x3e	; 62
    1660:	0f 5f       	subi	r16, 0xFF	; 255
    1662:	1f 4f       	sbci	r17, 0xFF	; 255
    1664:	c7 01       	movw	r24, r14
    1666:	b6 01       	movw	r22, r12
    1668:	20 e0       	ldi	r18, 0x00	; 0
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	48 ec       	ldi	r20, 0xC8	; 200
    166e:	52 e4       	ldi	r21, 0x42	; 66
    1670:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	48 ec       	ldi	r20, 0xC8	; 200
    167a:	52 e4       	ldi	r21, 0x42	; 66
    167c:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
    1680:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__fixunssfsi>
    1684:	4b 01       	movw	r8, r22
    1686:	5c 01       	movw	r10, r24
    1688:	82 e3       	ldi	r24, 0x32	; 50
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	f8 01       	movw	r30, r16
    168e:	91 83       	std	Z+1, r25	; 0x01
    1690:	80 83       	st	Z, r24
    1692:	c7 01       	movw	r24, r14
    1694:	b6 01       	movw	r22, r12
    1696:	20 e0       	ldi	r18, 0x00	; 0
    1698:	30 e0       	ldi	r19, 0x00	; 0
    169a:	48 ec       	ldi	r20, 0xC8	; 200
    169c:	52 ec       	ldi	r21, 0xC2	; 194
    169e:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	48 ec       	ldi	r20, 0xC8	; 200
    16a8:	52 e4       	ldi	r21, 0x42	; 66
    16aa:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
    16ae:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__fixunssfsi>
    16b2:	f8 01       	movw	r30, r16
    16b4:	73 83       	std	Z+3, r23	; 0x03
    16b6:	62 83       	std	Z+2, r22	; 0x02
    16b8:	82 ec       	ldi	r24, 0xC2	; 194
    16ba:	91 e0       	ldi	r25, 0x01	; 1
    16bc:	95 83       	std	Z+5, r25	; 0x05
    16be:	84 83       	std	Z+4, r24	; 0x04
    16c0:	16 82       	std	Z+6, r1	; 0x06
    16c2:	10 86       	std	Z+8, r1	; 0x08
    16c4:	17 82       	std	Z+7, r1	; 0x07
    16c6:	81 e0       	ldi	r24, 0x01	; 1
    16c8:	62 e0       	ldi	r22, 0x02	; 2
    16ca:	41 e0       	ldi	r20, 0x01	; 1
    16cc:	22 e3       	ldi	r18, 0x32	; 50
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	84 01       	movw	r16, r8
    16d2:	f2 ec       	ldi	r31, 0xC2	; 194
    16d4:	ef 2e       	mov	r14, r31
    16d6:	f1 e0       	ldi	r31, 0x01	; 1
    16d8:	ff 2e       	mov	r15, r31
    16da:	cc 24       	eor	r12, r12
    16dc:	aa 24       	eor	r10, r10
    16de:	bb 24       	eor	r11, r11
    16e0:	88 24       	eor	r8, r8
    16e2:	83 94       	inc	r8
    16e4:	0e 94 a8 12 	call	0x2550	; 0x2550 <STEPPER_move>
    16e8:	8d b7       	in	r24, 0x3d	; 61
    16ea:	9e b7       	in	r25, 0x3e	; 62
    16ec:	09 96       	adiw	r24, 0x09	; 9
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	9e bf       	out	0x3e, r25	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	8d bf       	out	0x3d, r24	; 61
	
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	
}
    16f8:	1f 91       	pop	r17
    16fa:	0f 91       	pop	r16
    16fc:	ff 90       	pop	r15
    16fe:	ef 90       	pop	r14
    1700:	df 90       	pop	r13
    1702:	cf 90       	pop	r12
    1704:	bf 90       	pop	r11
    1706:	af 90       	pop	r10
    1708:	9f 90       	pop	r9
    170a:	8f 90       	pop	r8
    170c:	7f 90       	pop	r7
    170e:	6f 90       	pop	r6
    1710:	5f 90       	pop	r5
    1712:	08 95       	ret

00001714 <moveLight>:
					 1: Light_Lover = track the light but do not collide
					 2: Light_Aggro = run towards the light and touch it
					 3: Light_Shy = run away from the light
********************************************************************/
char moveLight( int lightBehavior)
{
    1714:	3f 92       	push	r3
    1716:	4f 92       	push	r4
    1718:	5f 92       	push	r5
    171a:	6f 92       	push	r6
    171c:	7f 92       	push	r7
    171e:	8f 92       	push	r8
    1720:	9f 92       	push	r9
    1722:	af 92       	push	r10
    1724:	bf 92       	push	r11
    1726:	cf 92       	push	r12
    1728:	df 92       	push	r13
    172a:	ef 92       	push	r14
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	7c 01       	movw	r14, r24
	// call the moveWall() to detect walls and return a Boolean
	
	BOOL isLight = (rightLightVolt > LIGHT_R_THRESH)||(leftLightVolt > LIGHT_L_THRESH);
    1734:	40 90 c2 01 	lds	r4, 0x01C2
    1738:	50 90 c3 01 	lds	r5, 0x01C3
    173c:	60 90 c4 01 	lds	r6, 0x01C4
    1740:	70 90 c5 01 	lds	r7, 0x01C5
    1744:	c3 01       	movw	r24, r6
    1746:	b2 01       	movw	r22, r4
    1748:	2b e7       	ldi	r18, 0x7B	; 123
    174a:	34 e1       	ldi	r19, 0x14	; 20
    174c:	46 e8       	ldi	r20, 0x86	; 134
    174e:	50 e4       	ldi	r21, 0x40	; 64
    1750:	0e 94 32 24 	call	0x4864	; 0x4864 <__gesf2>
    1754:	18 16       	cp	r1, r24
    1756:	94 f0       	brlt	.+36     	; 0x177c <moveLight+0x68>
    1758:	00 e0       	ldi	r16, 0x00	; 0
    175a:	10 e0       	ldi	r17, 0x00	; 0
    175c:	60 91 c6 01 	lds	r22, 0x01C6
    1760:	70 91 c7 01 	lds	r23, 0x01C7
    1764:	80 91 c8 01 	lds	r24, 0x01C8
    1768:	90 91 c9 01 	lds	r25, 0x01C9
    176c:	2b e7       	ldi	r18, 0x7B	; 123
    176e:	34 e1       	ldi	r19, 0x14	; 20
    1770:	46 e8       	ldi	r20, 0x86	; 134
    1772:	50 e4       	ldi	r21, 0x40	; 64
    1774:	0e 94 32 24 	call	0x4864	; 0x4864 <__gesf2>
    1778:	18 16       	cp	r1, r24
    177a:	14 f4       	brge	.+4      	; 0x1780 <moveLight+0x6c>
    177c:	01 e0       	ldi	r16, 0x01	; 1
    177e:	10 e0       	ldi	r17, 0x00	; 0
    1780:	30 2e       	mov	r3, r16
	if(isLight == 0){
    1782:	00 23       	and	r16, r16
    1784:	09 f4       	brne	.+2      	; 0x1788 <moveLight+0x74>
    1786:	31 c1       	rjmp	.+610    	; 0x19ea <moveLight+0x2d6>
	float stepper_speed_L = 0;
	float stepper_speed_R = 0;
	BOOL direction_L = 1;
	BOOL direction_R = 1;
	
	switch(lightBehavior){
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	e8 16       	cp	r14, r24
    178c:	f1 04       	cpc	r15, r1
    178e:	f1 f0       	breq	.+60     	; 0x17cc <moveLight+0xb8>
    1790:	92 e0       	ldi	r25, 0x02	; 2
    1792:	e9 16       	cp	r14, r25
    1794:	f1 04       	cpc	r15, r1
    1796:	1c f4       	brge	.+6      	; 0x179e <moveLight+0x8a>
    1798:	ef 28       	or	r14, r15
    179a:	c1 f0       	breq	.+48     	; 0x17cc <moveLight+0xb8>
    179c:	0a c0       	rjmp	.+20     	; 0x17b2 <moveLight+0x9e>
    179e:	e2 e0       	ldi	r30, 0x02	; 2
    17a0:	ee 16       	cp	r14, r30
    17a2:	f1 04       	cpc	r15, r1
    17a4:	09 f4       	brne	.+2      	; 0x17a8 <moveLight+0x94>
    17a6:	4f c0       	rjmp	.+158    	; 0x1846 <moveLight+0x132>
    17a8:	f3 e0       	ldi	r31, 0x03	; 3
    17aa:	ef 16       	cp	r14, r31
    17ac:	f1 04       	cpc	r15, r1
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <moveLight+0x9e>
    17b0:	7d c0       	rjmp	.+250    	; 0x18ac <moveLight+0x198>
    17b2:	0f 2e       	mov	r0, r31
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	cf 2e       	mov	r12, r31
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	df 2e       	mov	r13, r31
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	ef 2e       	mov	r14, r31
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	ff 2e       	mov	r15, r31
    17c4:	f0 2d       	mov	r31, r0
    17c6:	46 01       	movw	r8, r12
    17c8:	57 01       	movw	r10, r14
    17ca:	a2 c0       	rjmp	.+324    	; 0x1910 <moveLight+0x1fc>
			stepper_speed_L = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_R_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
			stepper_speed_R = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_L_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
			break;
						
		case LIGHT_LOVER:
			stepper_speed_L = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_L_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
    17cc:	60 91 c6 01 	lds	r22, 0x01C6
    17d0:	70 91 c7 01 	lds	r23, 0x01C7
    17d4:	80 91 c8 01 	lds	r24, 0x01C8
    17d8:	90 91 c9 01 	lds	r25, 0x01C9
    17dc:	2b e7       	ldi	r18, 0x7B	; 123
    17de:	34 e1       	ldi	r19, 0x14	; 20
    17e0:	46 e8       	ldi	r20, 0x86	; 134
    17e2:	50 e4       	ldi	r21, 0x40	; 64
    17e4:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
    17e8:	28 e5       	ldi	r18, 0x58	; 88
    17ea:	3f e8       	ldi	r19, 0x8F	; 143
    17ec:	42 e0       	ldi	r20, 0x02	; 2
    17ee:	5f e3       	ldi	r21, 0x3F	; 63
    17f0:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
    17f4:	20 e0       	ldi	r18, 0x00	; 0
    17f6:	30 e0       	ldi	r19, 0x00	; 0
    17f8:	48 ec       	ldi	r20, 0xC8	; 200
    17fa:	52 ec       	ldi	r21, 0xC2	; 194
    17fc:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
    1800:	20 e0       	ldi	r18, 0x00	; 0
    1802:	30 e0       	ldi	r19, 0x00	; 0
    1804:	48 ec       	ldi	r20, 0xC8	; 200
    1806:	52 e4       	ldi	r21, 0x42	; 66
    1808:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
    180c:	6b 01       	movw	r12, r22
    180e:	7c 01       	movw	r14, r24
			stepper_speed_R = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_R_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
    1810:	c3 01       	movw	r24, r6
    1812:	b2 01       	movw	r22, r4
    1814:	2b e7       	ldi	r18, 0x7B	; 123
    1816:	34 e1       	ldi	r19, 0x14	; 20
    1818:	46 e8       	ldi	r20, 0x86	; 134
    181a:	50 e4       	ldi	r21, 0x40	; 64
    181c:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
    1820:	28 e5       	ldi	r18, 0x58	; 88
    1822:	3f e8       	ldi	r19, 0x8F	; 143
    1824:	42 e0       	ldi	r20, 0x02	; 2
    1826:	5f e3       	ldi	r21, 0x3F	; 63
    1828:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
    182c:	20 e0       	ldi	r18, 0x00	; 0
    182e:	30 e0       	ldi	r19, 0x00	; 0
    1830:	48 ec       	ldi	r20, 0xC8	; 200
    1832:	52 ec       	ldi	r21, 0xC2	; 194
    1834:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
    1838:	20 e0       	ldi	r18, 0x00	; 0
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	48 ec       	ldi	r20, 0xC8	; 200
    183e:	52 e4       	ldi	r21, 0x42	; 66
    1840:	0e 94 7f 22 	call	0x44fe	; 0x44fe <__addsf3>
    1844:	63 c0       	rjmp	.+198    	; 0x190c <moveLight+0x1f8>
			break;
			
		case LIGHT_AGGRO:	
			stepper_speed_R = MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_L_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
    1846:	60 91 c6 01 	lds	r22, 0x01C6
    184a:	70 91 c7 01 	lds	r23, 0x01C7
    184e:	80 91 c8 01 	lds	r24, 0x01C8
    1852:	90 91 c9 01 	lds	r25, 0x01C9
    1856:	2b e7       	ldi	r18, 0x7B	; 123
    1858:	34 e1       	ldi	r19, 0x14	; 20
    185a:	46 e8       	ldi	r20, 0x86	; 134
    185c:	50 e4       	ldi	r21, 0x40	; 64
    185e:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
    1862:	28 e5       	ldi	r18, 0x58	; 88
    1864:	3f e8       	ldi	r19, 0x8F	; 143
    1866:	42 e0       	ldi	r20, 0x02	; 2
    1868:	5f e3       	ldi	r21, 0x3F	; 63
    186a:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
    186e:	20 e0       	ldi	r18, 0x00	; 0
    1870:	30 e0       	ldi	r19, 0x00	; 0
    1872:	48 ec       	ldi	r20, 0xC8	; 200
    1874:	52 e4       	ldi	r21, 0x42	; 66
    1876:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
    187a:	4b 01       	movw	r8, r22
    187c:	5c 01       	movw	r10, r24
			stepper_speed_L = MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_R_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
    187e:	c3 01       	movw	r24, r6
    1880:	b2 01       	movw	r22, r4
    1882:	2b e7       	ldi	r18, 0x7B	; 123
    1884:	34 e1       	ldi	r19, 0x14	; 20
    1886:	46 e8       	ldi	r20, 0x86	; 134
    1888:	50 e4       	ldi	r21, 0x40	; 64
    188a:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
    188e:	28 e5       	ldi	r18, 0x58	; 88
    1890:	3f e8       	ldi	r19, 0x8F	; 143
    1892:	42 e0       	ldi	r20, 0x02	; 2
    1894:	5f e3       	ldi	r21, 0x3F	; 63
    1896:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	48 ec       	ldi	r20, 0xC8	; 200
    18a0:	52 e4       	ldi	r21, 0x42	; 66
    18a2:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
    18a6:	6b 01       	movw	r12, r22
    18a8:	7c 01       	movw	r14, r24
    18aa:	32 c0       	rjmp	.+100    	; 0x1910 <moveLight+0x1fc>
			break;
			
		case LIGHT_SHY:
			stepper_speed_L = MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_L_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
    18ac:	60 91 c6 01 	lds	r22, 0x01C6
    18b0:	70 91 c7 01 	lds	r23, 0x01C7
    18b4:	80 91 c8 01 	lds	r24, 0x01C8
    18b8:	90 91 c9 01 	lds	r25, 0x01C9
    18bc:	2b e7       	ldi	r18, 0x7B	; 123
    18be:	34 e1       	ldi	r19, 0x14	; 20
    18c0:	46 e8       	ldi	r20, 0x86	; 134
    18c2:	50 e4       	ldi	r21, 0x40	; 64
    18c4:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
    18c8:	28 e5       	ldi	r18, 0x58	; 88
    18ca:	3f e8       	ldi	r19, 0x8F	; 143
    18cc:	42 e0       	ldi	r20, 0x02	; 2
    18ce:	5f e3       	ldi	r21, 0x3F	; 63
    18d0:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
    18d4:	20 e0       	ldi	r18, 0x00	; 0
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	48 ec       	ldi	r20, 0xC8	; 200
    18da:	52 e4       	ldi	r21, 0x42	; 66
    18dc:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
    18e0:	6b 01       	movw	r12, r22
    18e2:	7c 01       	movw	r14, r24
			stepper_speed_R = MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_R_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
    18e4:	c3 01       	movw	r24, r6
    18e6:	b2 01       	movw	r22, r4
    18e8:	2b e7       	ldi	r18, 0x7B	; 123
    18ea:	34 e1       	ldi	r19, 0x14	; 20
    18ec:	46 e8       	ldi	r20, 0x86	; 134
    18ee:	50 e4       	ldi	r21, 0x40	; 64
    18f0:	0e 94 7e 22 	call	0x44fc	; 0x44fc <__subsf3>
    18f4:	28 e5       	ldi	r18, 0x58	; 88
    18f6:	3f e8       	ldi	r19, 0x8F	; 143
    18f8:	42 e0       	ldi	r20, 0x02	; 2
    18fa:	5f e3       	ldi	r21, 0x3F	; 63
    18fc:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
    1900:	20 e0       	ldi	r18, 0x00	; 0
    1902:	30 e0       	ldi	r19, 0x00	; 0
    1904:	48 ec       	ldi	r20, 0xC8	; 200
    1906:	52 e4       	ldi	r21, 0x42	; 66
    1908:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
    190c:	4b 01       	movw	r8, r22
    190e:	5c 01       	movw	r10, r24
			break;
			
		default: break;
		}
		
		if(stepper_speed_L<0){
    1910:	c7 01       	movw	r24, r14
    1912:	b6 01       	movw	r22, r12
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    1920:	88 23       	and	r24, r24
    1922:	64 f4       	brge	.+24     	; 0x193c <moveLight+0x228>
    1924:	66 24       	eor	r6, r6
    1926:	0f 2e       	mov	r0, r31
    1928:	f0 e0       	ldi	r31, 0x00	; 0
    192a:	cf 2e       	mov	r12, r31
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	df 2e       	mov	r13, r31
    1930:	f0 e0       	ldi	r31, 0x00	; 0
    1932:	ef 2e       	mov	r14, r31
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	ff 2e       	mov	r15, r31
    1938:	f0 2d       	mov	r31, r0
    193a:	02 c0       	rjmp	.+4      	; 0x1940 <moveLight+0x22c>
    193c:	66 24       	eor	r6, r6
    193e:	63 94       	inc	r6
			stepper_speed_L = 0;
			direction_L = 0;}
		
		if(stepper_speed_R<0){
    1940:	c5 01       	movw	r24, r10
    1942:	b4 01       	movw	r22, r8
    1944:	20 e0       	ldi	r18, 0x00	; 0
    1946:	30 e0       	ldi	r19, 0x00	; 0
    1948:	40 e0       	ldi	r20, 0x00	; 0
    194a:	50 e0       	ldi	r21, 0x00	; 0
    194c:	0e 94 e3 22 	call	0x45c6	; 0x45c6 <__cmpsf2>
    1950:	88 23       	and	r24, r24
    1952:	64 f4       	brge	.+24     	; 0x196c <moveLight+0x258>
    1954:	77 24       	eor	r7, r7
    1956:	0f 2e       	mov	r0, r31
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	8f 2e       	mov	r8, r31
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	9f 2e       	mov	r9, r31
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	af 2e       	mov	r10, r31
    1964:	f0 e0       	ldi	r31, 0x00	; 0
    1966:	bf 2e       	mov	r11, r31
    1968:	f0 2d       	mov	r31, r0
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <moveLight+0x25c>
    196c:	77 24       	eor	r7, r7
    196e:	73 94       	inc	r7
			stepper_speed_R = 0;
			direction_R = 0;}
			
		// STEPPER_REV
		STEPPER_move_stnb( STEPPER_BOTH, 
    1970:	8d b7       	in	r24, 0x3d	; 61
    1972:	9e b7       	in	r25, 0x3e	; 62
    1974:	09 97       	sbiw	r24, 0x09	; 9
    1976:	0f b6       	in	r0, 0x3f	; 63
    1978:	f8 94       	cli
    197a:	9e bf       	out	0x3e, r25	; 62
    197c:	0f be       	out	0x3f, r0	; 63
    197e:	8d bf       	out	0x3d, r24	; 61
    1980:	0d b7       	in	r16, 0x3d	; 61
    1982:	1e b7       	in	r17, 0x3e	; 62
    1984:	0f 5f       	subi	r16, 0xFF	; 255
    1986:	1f 4f       	sbci	r17, 0xFF	; 255
    1988:	c7 01       	movw	r24, r14
    198a:	b6 01       	movw	r22, r12
    198c:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__fixunssfsi>
    1990:	6b 01       	movw	r12, r22
    1992:	7c 01       	movw	r14, r24
    1994:	82 e3       	ldi	r24, 0x32	; 50
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	f8 01       	movw	r30, r16
    199a:	91 83       	std	Z+1, r25	; 0x01
    199c:	80 83       	st	Z, r24
    199e:	c5 01       	movw	r24, r10
    19a0:	b4 01       	movw	r22, r8
    19a2:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__fixunssfsi>
    19a6:	f8 01       	movw	r30, r16
    19a8:	73 83       	std	Z+3, r23	; 0x03
    19aa:	62 83       	std	Z+2, r22	; 0x02
    19ac:	82 ec       	ldi	r24, 0xC2	; 194
    19ae:	91 e0       	ldi	r25, 0x01	; 1
    19b0:	95 83       	std	Z+5, r25	; 0x05
    19b2:	84 83       	std	Z+4, r24	; 0x04
    19b4:	16 82       	std	Z+6, r1	; 0x06
    19b6:	10 86       	std	Z+8, r1	; 0x08
    19b8:	17 82       	std	Z+7, r1	; 0x07
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	62 e0       	ldi	r22, 0x02	; 2
    19be:	46 2d       	mov	r20, r6
    19c0:	22 e3       	ldi	r18, 0x32	; 50
    19c2:	30 e0       	ldi	r19, 0x00	; 0
    19c4:	86 01       	movw	r16, r12
    19c6:	a2 ec       	ldi	r26, 0xC2	; 194
    19c8:	ea 2e       	mov	r14, r26
    19ca:	a1 e0       	ldi	r26, 0x01	; 1
    19cc:	fa 2e       	mov	r15, r26
    19ce:	cc 24       	eor	r12, r12
    19d0:	aa 24       	eor	r10, r10
    19d2:	bb 24       	eor	r11, r11
    19d4:	87 2c       	mov	r8, r7
    19d6:	0e 94 a8 12 	call	0x2550	; 0x2550 <STEPPER_move>
    19da:	8d b7       	in	r24, 0x3d	; 61
    19dc:	9e b7       	in	r25, 0x3e	; 62
    19de:	09 96       	adiw	r24, 0x09	; 9
    19e0:	0f b6       	in	r0, 0x3f	; 63
    19e2:	f8 94       	cli
    19e4:	9e bf       	out	0x3e, r25	; 62
    19e6:	0f be       	out	0x3f, r0	; 63
    19e8:	8d bf       	out	0x3d, r24	; 61
		direction_L, 50, stepper_speed_L, 450, STEPPER_BRK_OFF, // Left
		direction_R, 50, stepper_speed_R, 450, STEPPER_BRK_OFF ); // Right

		return isLight;
}
    19ea:	83 2d       	mov	r24, r3
    19ec:	1f 91       	pop	r17
    19ee:	0f 91       	pop	r16
    19f0:	ff 90       	pop	r15
    19f2:	ef 90       	pop	r14
    19f4:	df 90       	pop	r13
    19f6:	cf 90       	pop	r12
    19f8:	bf 90       	pop	r11
    19fa:	af 90       	pop	r10
    19fc:	9f 90       	pop	r9
    19fe:	8f 90       	pop	r8
    1a00:	7f 90       	pop	r7
    1a02:	6f 90       	pop	r6
    1a04:	5f 90       	pop	r5
    1a06:	4f 90       	pop	r4
    1a08:	3f 90       	pop	r3
    1a0a:	08 95       	ret

00001a0c <moveRetreat>:
* Output Return:	char
* Overview:		    Moves robot backwards until contact sensors encounter
					a wall or obstacle
********************************************************************/
char moveRetreat( void )
{
    1a0c:	4f 92       	push	r4
    1a0e:	5f 92       	push	r5
    1a10:	6f 92       	push	r6
    1a12:	7f 92       	push	r7
    1a14:	8f 92       	push	r8
    1a16:	af 92       	push	r10
    1a18:	bf 92       	push	r11
    1a1a:	cf 92       	push	r12
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
	// Make a variable that keeps track of this behavior
	char isRetreat = 0;
	
	// Back up until an object is encountered
	// Check for left and right contact
	if((rightContact != 1)&&(leftContact != 1))
    1a24:	90 91 b1 03 	lds	r25, 0x03B1
    1a28:	91 30       	cpi	r25, 0x01	; 1
    1a2a:	a1 f1       	breq	.+104    	; 0x1a94 <moveRetreat+0x88>
    1a2c:	80 91 b2 03 	lds	r24, 0x03B2
    1a30:	81 30       	cpi	r24, 0x01	; 1
    1a32:	81 f1       	breq	.+96     	; 0x1a94 <moveRetreat+0x88>
	{	
		// move backward while nothing is detected
		STEPPER_move_stnb( STEPPER_BOTH, 
    1a34:	2d b7       	in	r18, 0x3d	; 61
    1a36:	3e b7       	in	r19, 0x3e	; 62
    1a38:	29 50       	subi	r18, 0x09	; 9
    1a3a:	30 40       	sbci	r19, 0x00	; 0
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	3e bf       	out	0x3e, r19	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	2d bf       	out	0x3d, r18	; 61
    1a46:	ed b7       	in	r30, 0x3d	; 61
    1a48:	fe b7       	in	r31, 0x3e	; 62
    1a4a:	31 96       	adiw	r30, 0x01	; 1
    1a4c:	88 ec       	ldi	r24, 0xC8	; 200
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	ad b7       	in	r26, 0x3d	; 61
    1a52:	be b7       	in	r27, 0x3e	; 62
    1a54:	12 96       	adiw	r26, 0x02	; 2
    1a56:	9c 93       	st	X, r25
    1a58:	8e 93       	st	-X, r24
    1a5a:	11 97       	sbiw	r26, 0x01	; 1
    1a5c:	93 83       	std	Z+3, r25	; 0x03
    1a5e:	82 83       	std	Z+2, r24	; 0x02
    1a60:	82 ec       	ldi	r24, 0xC2	; 194
    1a62:	91 e0       	ldi	r25, 0x01	; 1
    1a64:	95 83       	std	Z+5, r25	; 0x05
    1a66:	84 83       	std	Z+4, r24	; 0x04
    1a68:	16 82       	std	Z+6, r1	; 0x06
    1a6a:	10 86       	std	Z+8, r1	; 0x08
    1a6c:	17 82       	std	Z+7, r1	; 0x07
    1a6e:	81 e0       	ldi	r24, 0x01	; 1
    1a70:	62 e0       	ldi	r22, 0x02	; 2
    1a72:	40 e0       	ldi	r20, 0x00	; 0
    1a74:	28 ec       	ldi	r18, 0xC8	; 200
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	08 ec       	ldi	r16, 0xC8	; 200
    1a7a:	10 e0       	ldi	r17, 0x00	; 0
    1a7c:	52 ec       	ldi	r21, 0xC2	; 194
    1a7e:	e5 2e       	mov	r14, r21
    1a80:	51 e0       	ldi	r21, 0x01	; 1
    1a82:	f5 2e       	mov	r15, r21
    1a84:	cc 24       	eor	r12, r12
    1a86:	aa 24       	eor	r10, r10
    1a88:	bb 24       	eor	r11, r11
    1a8a:	88 24       	eor	r8, r8
    1a8c:	0e 94 a8 12 	call	0x2550	; 0x2550 <STEPPER_move>
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	a5 c0       	rjmp	.+330    	; 0x1bde <moveRetreat+0x1d2>
		
		isRetreat = 1;
	}
	
	// Check right contact
	else if((leftContact == 0)&&(rightContact == 1))
    1a94:	80 91 b2 03 	lds	r24, 0x03B2
    1a98:	88 23       	and	r24, r24
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <moveRetreat+0x92>
    1a9c:	4d c0       	rjmp	.+154    	; 0x1b38 <moveRetreat+0x12c>
    1a9e:	91 30       	cpi	r25, 0x01	; 1
    1aa0:	09 f0       	breq	.+2      	; 0x1aa4 <moveRetreat+0x98>
    1aa2:	aa c0       	rjmp	.+340    	; 0x1bf8 <moveRetreat+0x1ec>
	{
		// move forward to leave room for turn
		STEPPER_move_stwt( STEPPER_BOTH, 
    1aa4:	8d b7       	in	r24, 0x3d	; 61
    1aa6:	9e b7       	in	r25, 0x3e	; 62
    1aa8:	09 97       	sbiw	r24, 0x09	; 9
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	9e bf       	out	0x3e, r25	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	8d bf       	out	0x3d, r24	; 61
    1ab4:	ed b7       	in	r30, 0x3d	; 61
    1ab6:	fe b7       	in	r31, 0x3e	; 62
    1ab8:	31 96       	adiw	r30, 0x01	; 1
    1aba:	8b e4       	ldi	r24, 0x4B	; 75
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	ad b7       	in	r26, 0x3d	; 61
    1ac0:	be b7       	in	r27, 0x3e	; 62
    1ac2:	12 96       	adiw	r26, 0x02	; 2
    1ac4:	9c 93       	st	X, r25
    1ac6:	8e 93       	st	-X, r24
    1ac8:	11 97       	sbiw	r26, 0x01	; 1
    1aca:	38 ec       	ldi	r19, 0xC8	; 200
    1acc:	43 2e       	mov	r4, r19
    1ace:	51 2c       	mov	r5, r1
    1ad0:	53 82       	std	Z+3, r5	; 0x03
    1ad2:	42 82       	std	Z+2, r4	; 0x02
    1ad4:	2a ef       	ldi	r18, 0xFA	; 250
    1ad6:	62 2e       	mov	r6, r18
    1ad8:	71 2c       	mov	r7, r1
    1ada:	75 82       	std	Z+5, r7	; 0x05
    1adc:	64 82       	std	Z+4, r6	; 0x04
    1ade:	16 82       	std	Z+6, r1	; 0x06
    1ae0:	10 86       	std	Z+8, r1	; 0x08
    1ae2:	17 82       	std	Z+7, r1	; 0x07
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	62 e0       	ldi	r22, 0x02	; 2
    1ae8:	41 e0       	ldi	r20, 0x01	; 1
    1aea:	2b e4       	ldi	r18, 0x4B	; 75
    1aec:	30 e0       	ldi	r19, 0x00	; 0
    1aee:	08 ec       	ldi	r16, 0xC8	; 200
    1af0:	10 e0       	ldi	r17, 0x00	; 0
    1af2:	9a ef       	ldi	r25, 0xFA	; 250
    1af4:	e9 2e       	mov	r14, r25
    1af6:	f1 2c       	mov	r15, r1
    1af8:	cc 24       	eor	r12, r12
    1afa:	aa 24       	eor	r10, r10
    1afc:	bb 24       	eor	r11, r11
    1afe:	88 24       	eor	r8, r8
    1b00:	83 94       	inc	r8
    1b02:	0e 94 a8 12 	call	0x2550	; 0x2550 <STEPPER_move>
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF ); // Right
		
		// Turn 1/4 of a revolution CW
		STEPPER_move_stwt( STEPPER_BOTH, 
    1b06:	ed b7       	in	r30, 0x3d	; 61
    1b08:	fe b7       	in	r31, 0x3e	; 62
    1b0a:	31 96       	adiw	r30, 0x01	; 1
    1b0c:	84 e6       	ldi	r24, 0x64	; 100
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	ad b7       	in	r26, 0x3d	; 61
    1b12:	be b7       	in	r27, 0x3e	; 62
    1b14:	12 96       	adiw	r26, 0x02	; 2
    1b16:	9c 93       	st	X, r25
    1b18:	8e 93       	st	-X, r24
    1b1a:	11 97       	sbiw	r26, 0x01	; 1
    1b1c:	53 82       	std	Z+3, r5	; 0x03
    1b1e:	42 82       	std	Z+2, r4	; 0x02
    1b20:	75 82       	std	Z+5, r7	; 0x05
    1b22:	64 82       	std	Z+4, r6	; 0x04
    1b24:	16 82       	std	Z+6, r1	; 0x06
    1b26:	10 86       	std	Z+8, r1	; 0x08
    1b28:	17 82       	std	Z+7, r1	; 0x07
    1b2a:	80 e0       	ldi	r24, 0x00	; 0
    1b2c:	62 e0       	ldi	r22, 0x02	; 2
    1b2e:	41 e0       	ldi	r20, 0x01	; 1
    1b30:	24 e6       	ldi	r18, 0x64	; 100
    1b32:	30 e0       	ldi	r19, 0x00	; 0
    1b34:	88 24       	eor	r8, r8
    1b36:	4e c0       	rjmp	.+156    	; 0x1bd4 <moveRetreat+0x1c8>
		STEPPER_FWD, 100, 200, 250, STEPPER_BRK_OFF ); // Right
		retreatFlagStatus = 0;
	}
	
	// Check left contact
	else if((leftContact == 1)&&(rightContact == 0))
    1b38:	81 30       	cpi	r24, 0x01	; 1
    1b3a:	09 f0       	breq	.+2      	; 0x1b3e <moveRetreat+0x132>
    1b3c:	5d c0       	rjmp	.+186    	; 0x1bf8 <moveRetreat+0x1ec>
    1b3e:	99 23       	and	r25, r25
    1b40:	09 f0       	breq	.+2      	; 0x1b44 <moveRetreat+0x138>
    1b42:	57 c0       	rjmp	.+174    	; 0x1bf2 <moveRetreat+0x1e6>
	{
		// move forward to leave room for turn
		STEPPER_move_stwt( STEPPER_BOTH, 
    1b44:	8d b7       	in	r24, 0x3d	; 61
    1b46:	9e b7       	in	r25, 0x3e	; 62
    1b48:	09 97       	sbiw	r24, 0x09	; 9
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	9e bf       	out	0x3e, r25	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	8d bf       	out	0x3d, r24	; 61
    1b54:	ed b7       	in	r30, 0x3d	; 61
    1b56:	fe b7       	in	r31, 0x3e	; 62
    1b58:	31 96       	adiw	r30, 0x01	; 1
    1b5a:	8b e4       	ldi	r24, 0x4B	; 75
    1b5c:	90 e0       	ldi	r25, 0x00	; 0
    1b5e:	ad b7       	in	r26, 0x3d	; 61
    1b60:	be b7       	in	r27, 0x3e	; 62
    1b62:	12 96       	adiw	r26, 0x02	; 2
    1b64:	9c 93       	st	X, r25
    1b66:	8e 93       	st	-X, r24
    1b68:	11 97       	sbiw	r26, 0x01	; 1
    1b6a:	08 ec       	ldi	r16, 0xC8	; 200
    1b6c:	40 2e       	mov	r4, r16
    1b6e:	51 2c       	mov	r5, r1
    1b70:	53 82       	std	Z+3, r5	; 0x03
    1b72:	42 82       	std	Z+2, r4	; 0x02
    1b74:	1a ef       	ldi	r17, 0xFA	; 250
    1b76:	61 2e       	mov	r6, r17
    1b78:	71 2c       	mov	r7, r1
    1b7a:	75 82       	std	Z+5, r7	; 0x05
    1b7c:	64 82       	std	Z+4, r6	; 0x04
    1b7e:	16 82       	std	Z+6, r1	; 0x06
    1b80:	10 86       	std	Z+8, r1	; 0x08
    1b82:	17 82       	std	Z+7, r1	; 0x07
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	62 e0       	ldi	r22, 0x02	; 2
    1b88:	41 e0       	ldi	r20, 0x01	; 1
    1b8a:	2b e4       	ldi	r18, 0x4B	; 75
    1b8c:	30 e0       	ldi	r19, 0x00	; 0
    1b8e:	08 ec       	ldi	r16, 0xC8	; 200
    1b90:	10 e0       	ldi	r17, 0x00	; 0
    1b92:	ba ef       	ldi	r27, 0xFA	; 250
    1b94:	eb 2e       	mov	r14, r27
    1b96:	f1 2c       	mov	r15, r1
    1b98:	cc 24       	eor	r12, r12
    1b9a:	aa 24       	eor	r10, r10
    1b9c:	bb 24       	eor	r11, r11
    1b9e:	88 24       	eor	r8, r8
    1ba0:	83 94       	inc	r8
    1ba2:	0e 94 a8 12 	call	0x2550	; 0x2550 <STEPPER_move>
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF ); // Right
			
		// Turn 1/4 of a revolution CCW
		STEPPER_move_stwt( STEPPER_BOTH, 
    1ba6:	ed b7       	in	r30, 0x3d	; 61
    1ba8:	fe b7       	in	r31, 0x3e	; 62
    1baa:	31 96       	adiw	r30, 0x01	; 1
    1bac:	84 e6       	ldi	r24, 0x64	; 100
    1bae:	90 e0       	ldi	r25, 0x00	; 0
    1bb0:	ad b7       	in	r26, 0x3d	; 61
    1bb2:	be b7       	in	r27, 0x3e	; 62
    1bb4:	12 96       	adiw	r26, 0x02	; 2
    1bb6:	9c 93       	st	X, r25
    1bb8:	8e 93       	st	-X, r24
    1bba:	11 97       	sbiw	r26, 0x01	; 1
    1bbc:	53 82       	std	Z+3, r5	; 0x03
    1bbe:	42 82       	std	Z+2, r4	; 0x02
    1bc0:	75 82       	std	Z+5, r7	; 0x05
    1bc2:	64 82       	std	Z+4, r6	; 0x04
    1bc4:	16 82       	std	Z+6, r1	; 0x06
    1bc6:	10 86       	std	Z+8, r1	; 0x08
    1bc8:	17 82       	std	Z+7, r1	; 0x07
    1bca:	80 e0       	ldi	r24, 0x00	; 0
    1bcc:	62 e0       	ldi	r22, 0x02	; 2
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	24 e6       	ldi	r18, 0x64	; 100
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	0e 94 a8 12 	call	0x2550	; 0x2550 <STEPPER_move>
		STEPPER_FWD, 100, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 100, 200, 250, STEPPER_BRK_OFF ); // Right
		retreatFlagStatus = 0;
    1bd8:	10 92 cb 01 	sts	0x01CB, r1
    1bdc:	80 e0       	ldi	r24, 0x00	; 0
    1bde:	2d b7       	in	r18, 0x3d	; 61
    1be0:	3e b7       	in	r19, 0x3e	; 62
    1be2:	27 5f       	subi	r18, 0xF7	; 247
    1be4:	3f 4f       	sbci	r19, 0xFF	; 255
    1be6:	0f b6       	in	r0, 0x3f	; 63
    1be8:	f8 94       	cli
    1bea:	3e bf       	out	0x3e, r19	; 62
    1bec:	0f be       	out	0x3f, r0	; 63
    1bee:	2d bf       	out	0x3d, r18	; 61
    1bf0:	04 c0       	rjmp	.+8      	; 0x1bfa <moveRetreat+0x1ee>
	}
	
	// check both contacts
	else if ((leftContact == 1)&&(rightContact == 1))
    1bf2:	91 30       	cpi	r25, 0x01	; 1
    1bf4:	09 f4       	brne	.+2      	; 0x1bf8 <moveRetreat+0x1ec>
    1bf6:	a6 cf       	rjmp	.-180    	; 0x1b44 <moveRetreat+0x138>
			
		// Turn 1/4 of a revolution CCW
		STEPPER_move_stwt( STEPPER_BOTH, 
		STEPPER_FWD, 100, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 100, 200, 250, STEPPER_BRK_OFF ); // Right
		retreatFlagStatus = 0;
    1bf8:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return isRetreat;
}
    1bfa:	1f 91       	pop	r17
    1bfc:	0f 91       	pop	r16
    1bfe:	ff 90       	pop	r15
    1c00:	ef 90       	pop	r14
    1c02:	cf 90       	pop	r12
    1c04:	bf 90       	pop	r11
    1c06:	af 90       	pop	r10
    1c08:	8f 90       	pop	r8
    1c0a:	7f 90       	pop	r7
    1c0c:	6f 90       	pop	r6
    1c0e:	5f 90       	pop	r5
    1c10:	4f 90       	pop	r4
    1c12:	08 95       	ret

00001c14 <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    1c14:	8f 92       	push	r8
    1c16:	af 92       	push	r10
    1c18:	bf 92       	push	r11
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    1c2a:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    1c2e:	67 2b       	or	r22, r23
    1c30:	09 f0       	breq	.+2      	; 0x1c34 <moveWander+0x20>
    1c32:	76 c0       	rjmp	.+236    	; 0x1d20 <moveWander+0x10c>
    1c34:	89 2b       	or	r24, r25
    1c36:	09 f0       	breq	.+2      	; 0x1c3a <moveWander+0x26>
    1c38:	73 c0       	rjmp	.+230    	; 0x1d20 <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    1c3a:	0e 94 8e 2b 	call	0x571c	; 0x571c <rand>
    1c3e:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    1c40:	0e 94 8e 2b 	call	0x571c	; 0x571c <rand>
    1c44:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    1c46:	0e 94 8e 2b 	call	0x571c	; 0x571c <rand>
    1c4a:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    1c4c:	0e 94 8e 2b 	call	0x571c	; 0x571c <rand>
    1c50:	20 e0       	ldi	r18, 0x00	; 0
    1c52:	6a e0       	ldi	r22, 0x0A	; 10
    1c54:	70 e0       	ldi	r23, 0x00	; 0
    1c56:	0e 94 bf 29 	call	0x537e	; 0x537e <__divmodhi4>
    1c5a:	08 97       	sbiw	r24, 0x08	; 8
    1c5c:	0c f0       	brlt	.+2      	; 0x1c60 <moveWander+0x4c>
    1c5e:	21 e0       	ldi	r18, 0x01	; 1
    1c60:	82 2e       	mov	r8, r18
    1c62:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    1c64:	c8 01       	movw	r24, r16
    1c66:	60 e9       	ldi	r22, 0x90	; 144
    1c68:	71 e0       	ldi	r23, 0x01	; 1
    1c6a:	0e 94 bf 29 	call	0x537e	; 0x537e <__divmodhi4>
    1c6e:	e0 e9       	ldi	r30, 0x90	; 144
    1c70:	ae 2e       	mov	r10, r30
    1c72:	e1 e0       	ldi	r30, 0x01	; 1
    1c74:	be 2e       	mov	r11, r30
    1c76:	a8 0e       	add	r10, r24
    1c78:	b9 1e       	adc	r11, r25
    1c7a:	8d b7       	in	r24, 0x3d	; 61
    1c7c:	9e b7       	in	r25, 0x3e	; 62
    1c7e:	09 97       	sbiw	r24, 0x09	; 9
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	9e bf       	out	0x3e, r25	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	8d bf       	out	0x3d, r24	; 61
    1c8a:	0d b7       	in	r16, 0x3d	; 61
    1c8c:	1e b7       	in	r17, 0x3e	; 62
    1c8e:	0f 5f       	subi	r16, 0xFF	; 255
    1c90:	1f 4f       	sbci	r17, 0xFF	; 255
    1c92:	c7 01       	movw	r24, r14
    1c94:	68 ec       	ldi	r22, 0xC8	; 200
    1c96:	70 e0       	ldi	r23, 0x00	; 0
    1c98:	0e 94 bf 29 	call	0x537e	; 0x537e <__divmodhi4>
    1c9c:	88 53       	subi	r24, 0x38	; 56
    1c9e:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca0:	aa 27       	eor	r26, r26
    1ca2:	97 fd       	sbrc	r25, 7
    1ca4:	a0 95       	com	r26
    1ca6:	ba 2f       	mov	r27, r26
    1ca8:	bc 01       	movw	r22, r24
    1caa:	cd 01       	movw	r24, r26
    1cac:	0e 94 82 23 	call	0x4704	; 0x4704 <__floatsisf>
    1cb0:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__fixunssfsi>
    1cb4:	6b 01       	movw	r12, r22
    1cb6:	7c 01       	movw	r14, r24
    1cb8:	f8 01       	movw	r30, r16
    1cba:	b1 82       	std	Z+1, r11	; 0x01
    1cbc:	a0 82       	st	Z, r10
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	68 ec       	ldi	r22, 0xC8	; 200
    1cc2:	70 e0       	ldi	r23, 0x00	; 0
    1cc4:	0e 94 bf 29 	call	0x537e	; 0x537e <__divmodhi4>
    1cc8:	88 53       	subi	r24, 0x38	; 56
    1cca:	9f 4f       	sbci	r25, 0xFF	; 255
    1ccc:	aa 27       	eor	r26, r26
    1cce:	97 fd       	sbrc	r25, 7
    1cd0:	a0 95       	com	r26
    1cd2:	ba 2f       	mov	r27, r26
    1cd4:	bc 01       	movw	r22, r24
    1cd6:	cd 01       	movw	r24, r26
    1cd8:	0e 94 82 23 	call	0x4704	; 0x4704 <__floatsisf>
    1cdc:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__fixunssfsi>
    1ce0:	f8 01       	movw	r30, r16
    1ce2:	73 83       	std	Z+3, r23	; 0x03
    1ce4:	62 83       	std	Z+2, r22	; 0x02
    1ce6:	82 ec       	ldi	r24, 0xC2	; 194
    1ce8:	91 e0       	ldi	r25, 0x01	; 1
    1cea:	95 83       	std	Z+5, r25	; 0x05
    1cec:	84 83       	std	Z+4, r24	; 0x04
    1cee:	16 82       	std	Z+6, r1	; 0x06
    1cf0:	10 86       	std	Z+8, r1	; 0x08
    1cf2:	17 82       	std	Z+7, r1	; 0x07
    1cf4:	81 e0       	ldi	r24, 0x01	; 1
    1cf6:	62 e0       	ldi	r22, 0x02	; 2
    1cf8:	48 2d       	mov	r20, r8
    1cfa:	95 01       	movw	r18, r10
    1cfc:	86 01       	movw	r16, r12
    1cfe:	72 ec       	ldi	r23, 0xC2	; 194
    1d00:	e7 2e       	mov	r14, r23
    1d02:	71 e0       	ldi	r23, 0x01	; 1
    1d04:	f7 2e       	mov	r15, r23
    1d06:	cc 24       	eor	r12, r12
    1d08:	aa 24       	eor	r10, r10
    1d0a:	bb 24       	eor	r11, r11
    1d0c:	0e 94 a8 12 	call	0x2550	; 0x2550 <STEPPER_move>
    1d10:	8d b7       	in	r24, 0x3d	; 61
    1d12:	9e b7       	in	r25, 0x3e	; 62
    1d14:	09 96       	adiw	r24, 0x09	; 9
    1d16:	0f b6       	in	r0, 0x3f	; 63
    1d18:	f8 94       	cli
    1d1a:	9e bf       	out	0x3e, r25	; 62
    1d1c:	0f be       	out	0x3f, r0	; 63
    1d1e:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    1d20:	81 e0       	ldi	r24, 0x01	; 1
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	1f 91       	pop	r17
    1d28:	0f 91       	pop	r16
    1d2a:	ff 90       	pop	r15
    1d2c:	ef 90       	pop	r14
    1d2e:	df 90       	pop	r13
    1d30:	cf 90       	pop	r12
    1d32:	bf 90       	pop	r11
    1d34:	af 90       	pop	r10
    1d36:	8f 90       	pop	r8
    1d38:	08 95       	ret

00001d3a <moveTrackLight>:
{
	// make a variable that keeps track of the light tracking behavior
	char isTracking = 0;
	
	// check to see if there is too much light (is the robot in front of the light?)
	if((leftLightVolt >= LIGHT_L_MAX)&&(rightLightVolt >= LIGHT_R_MAX))
    1d3a:	60 91 c6 01 	lds	r22, 0x01C6
    1d3e:	70 91 c7 01 	lds	r23, 0x01C7
    1d42:	80 91 c8 01 	lds	r24, 0x01C8
    1d46:	90 91 c9 01 	lds	r25, 0x01C9
    1d4a:	26 e6       	ldi	r18, 0x66	; 102
    1d4c:	36 e6       	ldi	r19, 0x66	; 102
    1d4e:	46 e9       	ldi	r20, 0x96	; 150
    1d50:	50 e4       	ldi	r21, 0x40	; 64
    1d52:	0e 94 32 24 	call	0x4864	; 0x4864 <__gesf2>
    1d56:	88 23       	and	r24, r24
    1d58:	fc f0       	brlt	.+62     	; 0x1d98 <moveTrackLight+0x5e>
    1d5a:	60 91 c2 01 	lds	r22, 0x01C2
    1d5e:	70 91 c3 01 	lds	r23, 0x01C3
    1d62:	80 91 c4 01 	lds	r24, 0x01C4
    1d66:	90 91 c5 01 	lds	r25, 0x01C5
    1d6a:	26 e6       	ldi	r18, 0x66	; 102
    1d6c:	36 e6       	ldi	r19, 0x66	; 102
    1d6e:	46 e9       	ldi	r20, 0x96	; 150
    1d70:	50 e4       	ldi	r21, 0x40	; 64
    1d72:	0e 94 32 24 	call	0x4864	; 0x4864 <__gesf2>
    1d76:	88 23       	and	r24, r24
    1d78:	7c f0       	brlt	.+30     	; 0x1d98 <moveTrackLight+0x5e>
	{
		// set global flags to 1
		lightFlagStatus = 1;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	80 93 ca 01 	sts	0x01CA, r24
		retreatFlagStatus = 1;
    1d80:	80 93 cb 01 	sts	0x01CB, r24
		
		// Act as a docking robot
		LCD_printf("Arkin = Docked.\nPreparing to retreat.\n\n");
    1d84:	84 e2       	ldi	r24, 0x24	; 36
    1d86:	91 e0       	ldi	r25, 0x01	; 1
    1d88:	0e 94 b7 2c 	call	0x596e	; 0x596e <puts>
		TMRSRVC_delay(3000);//wait 3 seconds
    1d8c:	88 eb       	ldi	r24, 0xB8	; 184
    1d8e:	9b e0       	ldi	r25, 0x0B	; 11
    1d90:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <TMRSRVC_delay>
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	08 95       	ret
	}
	// else run moveLight(Lover) behavior
	else
	{
		// inhibit LOVER behavior of move light
		isTracking = moveLight(LIGHT_LOVER);
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	90 e0       	ldi	r25, 0x00	; 0
    1d9c:	0e 94 8a 0b 	call	0x1714	; 0x1714 <moveLight>
	}
	
	return isTracking;
}
    1da0:	08 95       	ret

00001da2 <moveBehavior>:
* Overview:		    This is the flow for the behavior of the robot
********************************************************************/
char moveBehavior( int behavior)
{
	// Check the moveAway behavior for obstacles
	if(moveAway()){
    1da2:	0e 94 c0 08 	call	0x1180	; 0x1180 <moveAway>
    1da6:	88 23       	and	r24, r24
    1da8:	71 f0       	breq	.+28     	; 0x1dc6 <moveBehavior+0x24>
		Ierror = 0;
    1daa:	80 e0       	ldi	r24, 0x00	; 0
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	a0 e0       	ldi	r26, 0x00	; 0
    1db0:	b0 e0       	ldi	r27, 0x00	; 0
    1db2:	80 93 aa 01 	sts	0x01AA, r24
    1db6:	90 93 ab 01 	sts	0x01AB, r25
    1dba:	a0 93 ac 01 	sts	0x01AC, r26
    1dbe:	b0 93 ad 01 	sts	0x01AD, r27
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	08 95       	ret
	}
	
	// Check the moveLight behavior for light. 
	// If it sees light track the light. 
	// If it is in front of the light kill moveLight and move to moveRetreat
	if(lightFlagStatus==0){
    1dc6:	80 91 ca 01 	lds	r24, 0x01CA
    1dca:	88 23       	and	r24, r24
    1dcc:	91 f4       	brne	.+36     	; 0x1df2 <moveBehavior+0x50>
		if(moveTrackLight()){
    1dce:	0e 94 9d 0e 	call	0x1d3a	; 0x1d3a <moveTrackLight>
    1dd2:	88 23       	and	r24, r24
    1dd4:	71 f0       	breq	.+28     	; 0x1df2 <moveBehavior+0x50>
			Ierror = 0;
    1dd6:	80 e0       	ldi	r24, 0x00	; 0
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	a0 e0       	ldi	r26, 0x00	; 0
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	80 93 aa 01 	sts	0x01AA, r24
    1de2:	90 93 ab 01 	sts	0x01AB, r25
    1de6:	a0 93 ac 01 	sts	0x01AC, r26
    1dea:	b0 93 ad 01 	sts	0x01AD, r27
    1dee:	82 e0       	ldi	r24, 0x02	; 2
    1df0:	08 95       	ret
		}
	}
	
	// Check the moveRetreat behavior.
	// If it returns a zero (contacts detect obstacle) have it stop itself and inhibit moveWall
	if(retreatFlagStatus==1){
    1df2:	80 91 cb 01 	lds	r24, 0x01CB
    1df6:	81 30       	cpi	r24, 0x01	; 1
    1df8:	91 f4       	brne	.+36     	; 0x1e1e <moveBehavior+0x7c>
		if(moveRetreat()){
    1dfa:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <moveRetreat>
    1dfe:	88 23       	and	r24, r24
    1e00:	71 f0       	breq	.+28     	; 0x1e1e <moveBehavior+0x7c>
			Ierror = 0;
    1e02:	80 e0       	ldi	r24, 0x00	; 0
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	a0 e0       	ldi	r26, 0x00	; 0
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	80 93 aa 01 	sts	0x01AA, r24
    1e0e:	90 93 ab 01 	sts	0x01AB, r25
    1e12:	a0 93 ac 01 	sts	0x01AC, r26
    1e16:	b0 93 ad 01 	sts	0x01AD, r27
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	08 95       	ret
			return 3;
		}
	}
	
	// Run the moveWall behavior
	if(moveWall()){
    1e1e:	0e 94 25 0a 	call	0x144a	; 0x144a <moveWall>
    1e22:	88 23       	and	r24, r24
    1e24:	69 f0       	breq	.+26     	; 0x1e40 <moveBehavior+0x9e>
		Ierror = 0;
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	a0 e0       	ldi	r26, 0x00	; 0
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	80 93 aa 01 	sts	0x01AA, r24
    1e32:	90 93 ab 01 	sts	0x01AB, r25
    1e36:	a0 93 ac 01 	sts	0x01AC, r26
    1e3a:	b0 93 ad 01 	sts	0x01AD, r27
    1e3e:	84 e0       	ldi	r24, 0x04	; 4
		// Ierror = 0;
		// return 5;
	// }

	return 0;	
}
    1e40:	08 95       	ret

00001e42 <CBOT_main>:
void CBOT_main( void )
{
	// Initialize variables
	int btnValue=0;//value of button pushed

	ATopstat = ATTINY_open();//open the tiny microcontroller
    1e42:	0e 94 13 16 	call	0x2c26	; 0x2c26 <ATTINY_open>
    1e46:	90 93 48 02 	sts	0x0248, r25
    1e4a:	80 93 47 02 	sts	0x0247, r24
	LEopstat = LED_open(); //open the LED module
    1e4e:	0e 94 cd 10 	call	0x219a	; 0x219a <LED_open>
    1e52:	90 93 46 02 	sts	0x0246, r25
    1e56:	80 93 45 02 	sts	0x0245, r24
	LCopstat = LCD_open(); //open the LCD module
    1e5a:	0e 94 e4 0f 	call	0x1fc8	; 0x1fc8 <LCD_open>
    1e5e:	90 93 44 02 	sts	0x0244, r25
    1e62:	80 93 43 02 	sts	0x0243, r24
	STEPPER_open(); // Open STEPPER module for use
    1e66:	0e 94 4f 13 	call	0x269e	; 0x269e <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in beep mode
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPKR_open>
	
	LED_open();
    1e70:	0e 94 cd 10 	call	0x219a	; 0x219a <LED_open>
	I2C_open();
    1e74:	0e 94 6d 17 	call	0x2eda	; 0x2eda <I2C_open>
	ADC_open();//open the ADC module
    1e78:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    1e7c:	81 e0       	ldi	r24, 0x01	; 1
    1e7e:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <ADC_set_VREF>

	// Initialize IR Values and Reset Prefilter
	checkIR();
    1e82:	0e 94 95 08 	call	0x112a	; 0x112a <checkIR>
	prefilter(1);
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	0e 94 f3 05 	call	0xbe6	; 0xbe6 <prefilter>

	// Infinite loop
	while (1)
    {
		// update the sensor values
		checkLightSensor();
    1e8c:	0e 94 80 08 	call	0x1100	; 0x1100 <checkLightSensor>
		checkIR();
    1e90:	0e 94 95 08 	call	0x112a	; 0x112a <checkIR>
		checkContactIR();
    1e94:	0e 94 72 08 	call	0x10e4	; 0x10e4 <checkContactIR>
		//Test IR Sensors
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(2000);//wait 2 seconds
		
		// run the moveBehavior FSM
		moveBehavior(LIGHT_LOVER);
    1e98:	81 e0       	ldi	r24, 0x01	; 1
    1e9a:	90 e0       	ldi	r25, 0x00	; 0
    1e9c:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <moveBehavior>
    1ea0:	f5 cf       	rjmp	.-22     	; 0x1e8c <CBOT_main+0x4a>

00001ea2 <ADC_open>:
    1ea2:	8f e0       	ldi	r24, 0x0F	; 15
    1ea4:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    1ea8:	88 23       	and	r24, r24
    1eaa:	31 f4       	brne	.+12     	; 0x1eb8 <ADC_open+0x16>
    1eac:	0e 94 94 17 	call	0x2f28	; 0x2f28 <__ADC_init>
    1eb0:	8f e0       	ldi	r24, 0x0F	; 15
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    1eb8:	8f e0       	ldi	r24, 0x0F	; 15
    1eba:	91 e0       	ldi	r25, 0x01	; 1
    1ebc:	08 95       	ret

00001ebe <ADC_sample>:
    1ebe:	8f e0       	ldi	r24, 0x0F	; 15
    1ec0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    1ec4:	81 30       	cpi	r24, 0x01	; 1
    1ec6:	19 f0       	breq	.+6      	; 0x1ece <ADC_sample+0x10>
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	13 c0       	rjmp	.+38     	; 0x1ef4 <ADC_sample+0x36>
    1ece:	80 91 7a 00 	lds	r24, 0x007A
    1ed2:	80 64       	ori	r24, 0x40	; 64
    1ed4:	80 93 7a 00 	sts	0x007A, r24
    1ed8:	80 91 7a 00 	lds	r24, 0x007A
    1edc:	86 fd       	sbrc	r24, 6
    1ede:	fc cf       	rjmp	.-8      	; 0x1ed8 <ADC_sample+0x1a>
    1ee0:	30 91 78 00 	lds	r19, 0x0078
    1ee4:	20 91 79 00 	lds	r18, 0x0079
    1ee8:	92 2f       	mov	r25, r18
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	23 2f       	mov	r18, r19
    1eee:	30 e0       	ldi	r19, 0x00	; 0
    1ef0:	28 2b       	or	r18, r24
    1ef2:	39 2b       	or	r19, r25
    1ef4:	c9 01       	movw	r24, r18
    1ef6:	08 95       	ret

00001ef8 <ADC_set_channel>:
    1ef8:	58 2f       	mov	r21, r24
    1efa:	80 91 4b 01 	lds	r24, 0x014B
    1efe:	88 30       	cpi	r24, 0x08	; 8
    1f00:	d8 f4       	brcc	.+54     	; 0x1f38 <ADC_set_channel+0x40>
    1f02:	40 91 7e 00 	lds	r20, 0x007E
    1f06:	21 e0       	ldi	r18, 0x01	; 1
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	b9 01       	movw	r22, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <ADC_set_channel+0x1a>
    1f0e:	66 0f       	add	r22, r22
    1f10:	77 1f       	adc	r23, r23
    1f12:	8a 95       	dec	r24
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <ADC_set_channel+0x16>
    1f16:	cb 01       	movw	r24, r22
    1f18:	80 95       	com	r24
    1f1a:	84 23       	and	r24, r20
    1f1c:	80 93 7e 00 	sts	0x007E, r24
    1f20:	80 91 7e 00 	lds	r24, 0x007E
    1f24:	05 2e       	mov	r0, r21
    1f26:	02 c0       	rjmp	.+4      	; 0x1f2c <ADC_set_channel+0x34>
    1f28:	22 0f       	add	r18, r18
    1f2a:	33 1f       	adc	r19, r19
    1f2c:	0a 94       	dec	r0
    1f2e:	e2 f7       	brpl	.-8      	; 0x1f28 <ADC_set_channel+0x30>
    1f30:	82 2b       	or	r24, r18
    1f32:	80 93 7e 00 	sts	0x007E, r24
    1f36:	0d c0       	rjmp	.+26     	; 0x1f52 <ADC_set_channel+0x5a>
    1f38:	20 91 7e 00 	lds	r18, 0x007E
    1f3c:	81 e0       	ldi	r24, 0x01	; 1
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	05 2e       	mov	r0, r21
    1f42:	02 c0       	rjmp	.+4      	; 0x1f48 <ADC_set_channel+0x50>
    1f44:	88 0f       	add	r24, r24
    1f46:	99 1f       	adc	r25, r25
    1f48:	0a 94       	dec	r0
    1f4a:	e2 f7       	brpl	.-8      	; 0x1f44 <ADC_set_channel+0x4c>
    1f4c:	28 2b       	or	r18, r24
    1f4e:	20 93 7e 00 	sts	0x007E, r18
    1f52:	50 93 4b 01 	sts	0x014B, r21
    1f56:	80 91 7c 00 	lds	r24, 0x007C
    1f5a:	5f 71       	andi	r21, 0x1F	; 31
    1f5c:	80 7e       	andi	r24, 0xE0	; 224
    1f5e:	85 2b       	or	r24, r21
    1f60:	80 93 7c 00 	sts	0x007C, r24
    1f64:	08 95       	ret

00001f66 <ADC_set_VREF>:
    1f66:	ec e7       	ldi	r30, 0x7C	; 124
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	90 81       	ld	r25, Z
    1f6c:	82 95       	swap	r24
    1f6e:	88 0f       	add	r24, r24
    1f70:	88 0f       	add	r24, r24
    1f72:	80 7c       	andi	r24, 0xC0	; 192
    1f74:	9f 73       	andi	r25, 0x3F	; 63
    1f76:	98 2b       	or	r25, r24
    1f78:	90 83       	st	Z, r25
    1f7a:	08 95       	ret

00001f7c <main>:
    1f7c:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <CBOT_ISR_init>
    1f80:	0e 94 9f 17 	call	0x2f3e	; 0x2f3e <CBOT_init>
    1f84:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <CBOT_main>
    1f88:	80 e0       	ldi	r24, 0x00	; 0
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	08 95       	ret

00001f8e <LCD_clear>:
    1f8e:	0f 93       	push	r16
    1f90:	1f 93       	push	r17
    1f92:	80 e4       	ldi	r24, 0x40	; 64
    1f94:	60 e0       	ldi	r22, 0x00	; 0
    1f96:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    1f9a:	00 e0       	ldi	r16, 0x00	; 0
    1f9c:	80 2f       	mov	r24, r16
    1f9e:	60 e0       	ldi	r22, 0x00	; 0
    1fa0:	0e 94 8d 10 	call	0x211a	; 0x211a <LCD_set_PGC_addr>
    1fa4:	10 e0       	ldi	r17, 0x00	; 0
    1fa6:	80 e0       	ldi	r24, 0x00	; 0
    1fa8:	61 e0       	ldi	r22, 0x01	; 1
    1faa:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    1fae:	1f 5f       	subi	r17, 0xFF	; 255
    1fb0:	10 38       	cpi	r17, 0x80	; 128
    1fb2:	c9 f7       	brne	.-14     	; 0x1fa6 <LCD_clear+0x18>
    1fb4:	0f 5f       	subi	r16, 0xFF	; 255
    1fb6:	04 30       	cpi	r16, 0x04	; 4
    1fb8:	89 f7       	brne	.-30     	; 0x1f9c <LCD_clear+0xe>
    1fba:	83 e0       	ldi	r24, 0x03	; 3
    1fbc:	60 e0       	ldi	r22, 0x00	; 0
    1fbe:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_set_next_PGC>
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	08 95       	ret

00001fc8 <LCD_open>:
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	82 e0       	ldi	r24, 0x02	; 2
    1fce:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    1fd2:	88 23       	and	r24, r24
    1fd4:	11 f4       	brne	.+4      	; 0x1fda <LCD_open+0x12>
    1fd6:	82 e0       	ldi	r24, 0x02	; 2
    1fd8:	06 c0       	rjmp	.+12     	; 0x1fe6 <LCD_open+0x1e>
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    1fe0:	88 23       	and	r24, r24
    1fe2:	19 f4       	brne	.+6      	; 0x1fea <LCD_open+0x22>
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	6d c0       	rjmp	.+218    	; 0x20c4 <LCD_open+0xfc>
    1fea:	0e 94 15 1a 	call	0x342a	; 0x342a <__LCD_init>
    1fee:	85 e0       	ldi	r24, 0x05	; 5
    1ff0:	61 e0       	ldi	r22, 0x01	; 1
    1ff2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    1ff6:	8e ea       	ldi	r24, 0xAE	; 174
    1ff8:	60 e0       	ldi	r22, 0x00	; 0
    1ffa:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    1ffe:	82 ea       	ldi	r24, 0xA2	; 162
    2000:	60 e0       	ldi	r22, 0x00	; 0
    2002:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    2006:	80 ea       	ldi	r24, 0xA0	; 160
    2008:	60 e0       	ldi	r22, 0x00	; 0
    200a:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    200e:	00 e5       	ldi	r16, 0x50	; 80
    2010:	13 ec       	ldi	r17, 0xC3	; 195
    2012:	c8 01       	movw	r24, r16
    2014:	01 97       	sbiw	r24, 0x01	; 1
    2016:	f1 f7       	brne	.-4      	; 0x2014 <LCD_open+0x4c>
    2018:	80 ec       	ldi	r24, 0xC0	; 192
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    2020:	8f e2       	ldi	r24, 0x2F	; 47
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    2028:	81 e8       	ldi	r24, 0x81	; 129
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    2030:	86 e1       	ldi	r24, 0x16	; 22
    2032:	60 e0       	ldi	r22, 0x00	; 0
    2034:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    2038:	82 e2       	ldi	r24, 0x22	; 34
    203a:	60 e0       	ldi	r22, 0x00	; 0
    203c:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    2040:	c8 01       	movw	r24, r16
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	f1 f7       	brne	.-4      	; 0x2042 <LCD_open+0x7a>
    2046:	8f ea       	ldi	r24, 0xAF	; 175
    2048:	60 e0       	ldi	r22, 0x00	; 0
    204a:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    204e:	86 ea       	ldi	r24, 0xA6	; 166
    2050:	60 e0       	ldi	r22, 0x00	; 0
    2052:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    2056:	85 ea       	ldi	r24, 0xA5	; 165
    2058:	60 e0       	ldi	r22, 0x00	; 0
    205a:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    205e:	80 e0       	ldi	r24, 0x00	; 0
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	28 e8       	ldi	r18, 0x88	; 136
    2064:	33 e1       	ldi	r19, 0x13	; 19
    2066:	f9 01       	movw	r30, r18
    2068:	31 97       	sbiw	r30, 0x01	; 1
    206a:	f1 f7       	brne	.-4      	; 0x2068 <LCD_open+0xa0>
    206c:	01 96       	adiw	r24, 0x01	; 1
    206e:	43 e0       	ldi	r20, 0x03	; 3
    2070:	88 3e       	cpi	r24, 0xE8	; 232
    2072:	94 07       	cpc	r25, r20
    2074:	c1 f7       	brne	.-16     	; 0x2066 <LCD_open+0x9e>
    2076:	83 eb       	ldi	r24, 0xB3	; 179
    2078:	60 e0       	ldi	r22, 0x00	; 0
    207a:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    207e:	80 e4       	ldi	r24, 0x40	; 64
    2080:	60 e0       	ldi	r22, 0x00	; 0
    2082:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    2086:	83 e0       	ldi	r24, 0x03	; 3
    2088:	60 e0       	ldi	r22, 0x00	; 0
    208a:	0e 94 8d 10 	call	0x211a	; 0x211a <LCD_set_PGC_addr>
    208e:	83 e0       	ldi	r24, 0x03	; 3
    2090:	60 e0       	ldi	r22, 0x00	; 0
    2092:	0e 94 86 10 	call	0x210c	; 0x210c <LCD_set_next_PGC>
    2096:	10 92 79 04 	sts	0x0479, r1
    209a:	10 92 7b 04 	sts	0x047B, r1
    209e:	10 92 7a 04 	sts	0x047A, r1
    20a2:	8a e5       	ldi	r24, 0x5A	; 90
    20a4:	91 e0       	ldi	r25, 0x01	; 1
    20a6:	90 93 aa 04 	sts	0x04AA, r25
    20aa:	80 93 a9 04 	sts	0x04A9, r24
    20ae:	88 e1       	ldi	r24, 0x18	; 24
    20b0:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_set_backlight>
    20b4:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_clear>
    20b8:	84 ea       	ldi	r24, 0xA4	; 164
    20ba:	60 e0       	ldi	r22, 0x00	; 0
    20bc:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    20c0:	85 e0       	ldi	r24, 0x05	; 5
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	1f 91       	pop	r17
    20c6:	0f 91       	pop	r16
    20c8:	08 95       	ret

000020ca <LCD_set_backlight>:
    20ca:	1f 93       	push	r17
    20cc:	18 2f       	mov	r17, r24
    20ce:	85 e0       	ldi	r24, 0x05	; 5
    20d0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	c1 f4       	brne	.+48     	; 0x2108 <LCD_set_backlight+0x3e>
    20d8:	87 e0       	ldi	r24, 0x07	; 7
    20da:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <SPI_set_slave_addr>
    20de:	82 e0       	ldi	r24, 0x02	; 2
    20e0:	6a e0       	ldi	r22, 0x0A	; 10
    20e2:	0e 94 33 11 	call	0x2266	; 0x2266 <SPI_transmit>
    20e6:	82 e0       	ldi	r24, 0x02	; 2
    20e8:	61 eb       	ldi	r22, 0xB1	; 177
    20ea:	0e 94 33 11 	call	0x2266	; 0x2266 <SPI_transmit>
    20ee:	61 2f       	mov	r22, r17
    20f0:	11 32       	cpi	r17, 0x21	; 33
    20f2:	08 f0       	brcs	.+2      	; 0x20f6 <LCD_set_backlight+0x2c>
    20f4:	60 e2       	ldi	r22, 0x20	; 32
    20f6:	82 e0       	ldi	r24, 0x02	; 2
    20f8:	0e 94 33 11 	call	0x2266	; 0x2266 <SPI_transmit>
    20fc:	89 ee       	ldi	r24, 0xE9	; 233
    20fe:	8a 95       	dec	r24
    2100:	f1 f7       	brne	.-4      	; 0x20fe <LCD_set_backlight+0x34>
    2102:	87 e0       	ldi	r24, 0x07	; 7
    2104:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <SPI_set_slave_addr>
    2108:	1f 91       	pop	r17
    210a:	08 95       	ret

0000210c <LCD_set_next_PGC>:
    210c:	83 70       	andi	r24, 0x03	; 3
    210e:	6f 77       	andi	r22, 0x7F	; 127
    2110:	60 93 77 04 	sts	0x0477, r22
    2114:	80 93 78 04 	sts	0x0478, r24
    2118:	08 95       	ret

0000211a <LCD_set_PGC_addr>:
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	06 2f       	mov	r16, r22
    2120:	16 2f       	mov	r17, r22
    2122:	1f 77       	andi	r17, 0x7F	; 127
    2124:	83 70       	andi	r24, 0x03	; 3
    2126:	80 6b       	ori	r24, 0xB0	; 176
    2128:	60 e0       	ldi	r22, 0x00	; 0
    212a:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    212e:	12 95       	swap	r17
    2130:	1f 70       	andi	r17, 0x0F	; 15
    2132:	81 2f       	mov	r24, r17
    2134:	80 61       	ori	r24, 0x10	; 16
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    213c:	80 2f       	mov	r24, r16
    213e:	8f 70       	andi	r24, 0x0F	; 15
    2140:	60 e0       	ldi	r22, 0x00	; 0
    2142:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    2146:	1f 91       	pop	r17
    2148:	0f 91       	pop	r16
    214a:	08 95       	ret

0000214c <LCD_write>:
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	08 2f       	mov	r16, r24
    2152:	16 2f       	mov	r17, r22
    2154:	85 e0       	ldi	r24, 0x05	; 5
    2156:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    215a:	81 30       	cpi	r24, 0x01	; 1
    215c:	79 f4       	brne	.+30     	; 0x217c <LCD_write+0x30>
    215e:	11 23       	and	r17, r17
    2160:	19 f0       	breq	.+6      	; 0x2168 <LCD_write+0x1c>
    2162:	11 30       	cpi	r17, 0x01	; 1
    2164:	21 f4       	brne	.+8      	; 0x216e <LCD_write+0x22>
    2166:	02 c0       	rjmp	.+4      	; 0x216c <LCD_write+0x20>
    2168:	2b 98       	cbi	0x05, 3	; 5
    216a:	01 c0       	rjmp	.+2      	; 0x216e <LCD_write+0x22>
    216c:	2b 9a       	sbi	0x05, 3	; 5
    216e:	86 e0       	ldi	r24, 0x06	; 6
    2170:	8a 95       	dec	r24
    2172:	f1 f7       	brne	.-4      	; 0x2170 <LCD_write+0x24>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	60 2f       	mov	r22, r16
    2178:	0e 94 33 11 	call	0x2266	; 0x2266 <SPI_transmit>
    217c:	1f 91       	pop	r17
    217e:	0f 91       	pop	r16
    2180:	08 95       	ret

00002182 <LED_clr_pattern>:
    2182:	1f 93       	push	r17
    2184:	18 2f       	mov	r17, r24
    2186:	86 e0       	ldi	r24, 0x06	; 6
    2188:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    218c:	81 30       	cpi	r24, 0x01	; 1
    218e:	19 f4       	brne	.+6      	; 0x2196 <LED_clr_pattern+0x14>
    2190:	81 2f       	mov	r24, r17
    2192:	0e 94 c4 1a 	call	0x3588	; 0x3588 <__LED_clr_pattern>
    2196:	1f 91       	pop	r17
    2198:	08 95       	ret

0000219a <LED_open>:
    219a:	0e 94 c9 1a 	call	0x3592	; 0x3592 <__LED_init>
    219e:	86 e0       	ldi	r24, 0x06	; 6
    21a0:	61 e0       	ldi	r22, 0x01	; 1
    21a2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    21a6:	86 e0       	ldi	r24, 0x06	; 6
    21a8:	91 e0       	ldi	r25, 0x01	; 1
    21aa:	08 95       	ret

000021ac <LED_set_pattern>:
    21ac:	1f 93       	push	r17
    21ae:	18 2f       	mov	r17, r24
    21b0:	86 e0       	ldi	r24, 0x06	; 6
    21b2:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	19 f4       	brne	.+6      	; 0x21c0 <LED_set_pattern+0x14>
    21ba:	81 2f       	mov	r24, r17
    21bc:	0e 94 cc 1a 	call	0x3598	; 0x3598 <__LED_set_pattern>
    21c0:	1f 91       	pop	r17
    21c2:	08 95       	ret

000021c4 <SPI_set_slave_addr>:
    21c4:	1f 93       	push	r17
    21c6:	18 2f       	mov	r17, r24
    21c8:	82 e0       	ldi	r24, 0x02	; 2
    21ca:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    21ce:	81 30       	cpi	r24, 0x01	; 1
    21d0:	09 f0       	breq	.+2      	; 0x21d4 <SPI_set_slave_addr+0x10>
    21d2:	47 c0       	rjmp	.+142    	; 0x2262 <SPI_set_slave_addr+0x9e>
    21d4:	91 2f       	mov	r25, r17
    21d6:	97 70       	andi	r25, 0x07	; 7
    21d8:	80 91 7c 04 	lds	r24, 0x047C
    21dc:	98 17       	cp	r25, r24
    21de:	09 f4       	brne	.+2      	; 0x21e2 <SPI_set_slave_addr+0x1e>
    21e0:	40 c0       	rjmp	.+128    	; 0x2262 <SPI_set_slave_addr+0x9e>
    21e2:	90 93 7c 04 	sts	0x047C, r25
    21e6:	85 b1       	in	r24, 0x05	; 5
    21e8:	88 7f       	andi	r24, 0xF8	; 248
    21ea:	89 2b       	or	r24, r25
    21ec:	85 b9       	out	0x05, r24	; 5
    21ee:	93 30       	cpi	r25, 0x03	; 3
    21f0:	11 f1       	breq	.+68     	; 0x2236 <SPI_set_slave_addr+0x72>
    21f2:	94 30       	cpi	r25, 0x04	; 4
    21f4:	28 f4       	brcc	.+10     	; 0x2200 <SPI_set_slave_addr+0x3c>
    21f6:	91 30       	cpi	r25, 0x01	; 1
    21f8:	51 f0       	breq	.+20     	; 0x220e <SPI_set_slave_addr+0x4a>
    21fa:	92 30       	cpi	r25, 0x02	; 2
    21fc:	90 f4       	brcc	.+36     	; 0x2222 <SPI_set_slave_addr+0x5e>
    21fe:	0c c0       	rjmp	.+24     	; 0x2218 <SPI_set_slave_addr+0x54>
    2200:	95 30       	cpi	r25, 0x05	; 5
    2202:	19 f1       	breq	.+70     	; 0x224a <SPI_set_slave_addr+0x86>
    2204:	95 30       	cpi	r25, 0x05	; 5
    2206:	e0 f0       	brcs	.+56     	; 0x2240 <SPI_set_slave_addr+0x7c>
    2208:	96 30       	cpi	r25, 0x06	; 6
    220a:	21 f5       	brne	.+72     	; 0x2254 <SPI_set_slave_addr+0x90>
    220c:	0f c0       	rjmp	.+30     	; 0x222c <SPI_set_slave_addr+0x68>
    220e:	e0 91 1e 02 	lds	r30, 0x021E
    2212:	f0 91 1f 02 	lds	r31, 0x021F
    2216:	22 c0       	rjmp	.+68     	; 0x225c <SPI_set_slave_addr+0x98>
    2218:	e0 91 1c 02 	lds	r30, 0x021C
    221c:	f0 91 1d 02 	lds	r31, 0x021D
    2220:	1d c0       	rjmp	.+58     	; 0x225c <SPI_set_slave_addr+0x98>
    2222:	e0 91 20 02 	lds	r30, 0x0220
    2226:	f0 91 21 02 	lds	r31, 0x0221
    222a:	18 c0       	rjmp	.+48     	; 0x225c <SPI_set_slave_addr+0x98>
    222c:	e0 91 28 02 	lds	r30, 0x0228
    2230:	f0 91 29 02 	lds	r31, 0x0229
    2234:	13 c0       	rjmp	.+38     	; 0x225c <SPI_set_slave_addr+0x98>
    2236:	e0 91 22 02 	lds	r30, 0x0222
    223a:	f0 91 23 02 	lds	r31, 0x0223
    223e:	0e c0       	rjmp	.+28     	; 0x225c <SPI_set_slave_addr+0x98>
    2240:	e0 91 24 02 	lds	r30, 0x0224
    2244:	f0 91 25 02 	lds	r31, 0x0225
    2248:	09 c0       	rjmp	.+18     	; 0x225c <SPI_set_slave_addr+0x98>
    224a:	e0 91 26 02 	lds	r30, 0x0226
    224e:	f0 91 27 02 	lds	r31, 0x0227
    2252:	04 c0       	rjmp	.+8      	; 0x225c <SPI_set_slave_addr+0x98>
    2254:	e0 91 2a 02 	lds	r30, 0x022A
    2258:	f0 91 2b 02 	lds	r31, 0x022B
    225c:	30 97       	sbiw	r30, 0x00	; 0
    225e:	09 f0       	breq	.+2      	; 0x2262 <SPI_set_slave_addr+0x9e>
    2260:	09 95       	icall
    2262:	1f 91       	pop	r17
    2264:	08 95       	ret

00002266 <SPI_transmit>:
    2266:	1f 93       	push	r17
    2268:	16 2f       	mov	r17, r22
    226a:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <SPI_set_slave_addr>
    226e:	82 e0       	ldi	r24, 0x02	; 2
    2270:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    2274:	81 30       	cpi	r24, 0x01	; 1
    2276:	21 f4       	brne	.+8      	; 0x2280 <SPI_transmit+0x1a>
    2278:	1e bd       	out	0x2e, r17	; 46
    227a:	0d b4       	in	r0, 0x2d	; 45
    227c:	07 fe       	sbrs	r0, 7
    227e:	fd cf       	rjmp	.-6      	; 0x227a <SPI_transmit+0x14>
    2280:	1f 91       	pop	r17
    2282:	08 95       	ret

00002284 <__SPKR_set_up_freq_LUT>:
    2284:	0f 93       	push	r16
    2286:	1f 93       	push	r17
    2288:	cf 93       	push	r28
    228a:	df 93       	push	r29
    228c:	80 e2       	ldi	r24, 0x20	; 32
    228e:	91 e0       	ldi	r25, 0x01	; 1
    2290:	0e 94 3f 2a 	call	0x547e	; 0x547e <malloc>
    2294:	9c 01       	movw	r18, r24
    2296:	90 93 3b 02 	sts	0x023B, r25
    229a:	80 93 3a 02 	sts	0x023A, r24
    229e:	89 2b       	or	r24, r25
    22a0:	11 f4       	brne	.+4      	; 0x22a6 <__SPKR_set_up_freq_LUT+0x22>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	39 c0       	rjmp	.+114    	; 0x2318 <__SPKR_set_up_freq_LUT+0x94>
    22a6:	89 01       	movw	r16, r18
    22a8:	c0 e0       	ldi	r28, 0x00	; 0
    22aa:	d0 e0       	ldi	r29, 0x00	; 0
    22ac:	be 01       	movw	r22, r28
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	0e 94 80 23 	call	0x4700	; 0x4700 <__floatunsisf>
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 ea       	ldi	r20, 0xA0	; 160
    22bc:	51 e4       	ldi	r21, 0x41	; 65
    22be:	0e 94 e7 22 	call	0x45ce	; 0x45ce <__divsf3>
    22c2:	27 ef       	ldi	r18, 0xF7	; 247
    22c4:	35 e7       	ldi	r19, 0x75	; 117
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	5f e3       	ldi	r21, 0x3F	; 63
    22ca:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
    22ce:	9b 01       	movw	r18, r22
    22d0:	ac 01       	movw	r20, r24
    22d2:	60 e0       	ldi	r22, 0x00	; 0
    22d4:	70 e0       	ldi	r23, 0x00	; 0
    22d6:	80 e2       	ldi	r24, 0x20	; 32
    22d8:	91 e4       	ldi	r25, 0x41	; 65
    22da:	0e 94 d3 24 	call	0x49a6	; 0x49a6 <pow>
    22de:	9b 01       	movw	r18, r22
    22e0:	ac 01       	movw	r20, r24
    22e2:	ca 01       	movw	r24, r20
    22e4:	b9 01       	movw	r22, r18
    22e6:	2d ec       	ldi	r18, 0xCD	; 205
    22e8:	3c ec       	ldi	r19, 0xCC	; 204
    22ea:	42 e8       	ldi	r20, 0x82	; 130
    22ec:	51 e4       	ldi	r21, 0x41	; 65
    22ee:	0e 94 70 24 	call	0x48e0	; 0x48e0 <__mulsf3>
    22f2:	0e 94 36 24 	call	0x486c	; 0x486c <lrint>
    22f6:	2a e0       	ldi	r18, 0x0A	; 10
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	40 e0       	ldi	r20, 0x00	; 0
    22fc:	50 e0       	ldi	r21, 0x00	; 0
    22fe:	0e 94 a0 29 	call	0x5340	; 0x5340 <__mulsi3>
    2302:	f8 01       	movw	r30, r16
    2304:	61 93       	st	Z+, r22
    2306:	71 93       	st	Z+, r23
    2308:	81 93       	st	Z+, r24
    230a:	91 93       	st	Z+, r25
    230c:	8f 01       	movw	r16, r30
    230e:	21 96       	adiw	r28, 0x01	; 1
    2310:	c8 34       	cpi	r28, 0x48	; 72
    2312:	d1 05       	cpc	r29, r1
    2314:	59 f6       	brne	.-106    	; 0x22ac <__SPKR_set_up_freq_LUT+0x28>
    2316:	81 e0       	ldi	r24, 0x01	; 1
    2318:	df 91       	pop	r29
    231a:	cf 91       	pop	r28
    231c:	1f 91       	pop	r17
    231e:	0f 91       	pop	r16
    2320:	08 95       	ret

00002322 <__SPKR_open_beep_mode>:
    2322:	8a e0       	ldi	r24, 0x0A	; 10
    2324:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    2328:	88 23       	and	r24, r24
    232a:	71 f4       	brne	.+28     	; 0x2348 <__SPKR_open_beep_mode+0x26>
    232c:	10 92 37 02 	sts	0x0237, r1
    2330:	10 92 36 02 	sts	0x0236, r1
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	0e 94 07 1c 	call	0x380e	; 0x380e <__SPKR_init>
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	80 93 2d 02 	sts	0x022D, r24
    2340:	8a e0       	ldi	r24, 0x0A	; 10
    2342:	61 e0       	ldi	r22, 0x01	; 1
    2344:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    2348:	8a e0       	ldi	r24, 0x0A	; 10
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	08 95       	ret

0000234e <__SPKR_open_tone_mode>:
    234e:	1f 93       	push	r17
    2350:	8b e0       	ldi	r24, 0x0B	; 11
    2352:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    2356:	88 23       	and	r24, r24
    2358:	11 f0       	breq	.+4      	; 0x235e <__SPKR_open_tone_mode+0x10>
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	21 c0       	rjmp	.+66     	; 0x23a0 <__SPKR_open_tone_mode+0x52>
    235e:	89 e0       	ldi	r24, 0x09	; 9
    2360:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    2364:	88 23       	and	r24, r24
    2366:	d9 f4       	brne	.+54     	; 0x239e <__SPKR_open_tone_mode+0x50>
    2368:	0e 94 42 11 	call	0x2284	; 0x2284 <__SPKR_set_up_freq_LUT>
    236c:	18 2f       	mov	r17, r24
    236e:	81 30       	cpi	r24, 0x01	; 1
    2370:	b1 f4       	brne	.+44     	; 0x239e <__SPKR_open_tone_mode+0x50>
    2372:	10 92 2e 02 	sts	0x022E, r1
    2376:	10 92 2f 02 	sts	0x022F, r1
    237a:	10 92 30 02 	sts	0x0230, r1
    237e:	10 92 31 02 	sts	0x0231, r1
    2382:	8d e0       	ldi	r24, 0x0D	; 13
    2384:	6a e8       	ldi	r22, 0x8A	; 138
    2386:	7b e1       	ldi	r23, 0x1B	; 27
    2388:	0e 94 ed 19 	call	0x33da	; 0x33da <ISR_attach>
    238c:	82 e0       	ldi	r24, 0x02	; 2
    238e:	0e 94 07 1c 	call	0x380e	; 0x380e <__SPKR_init>
    2392:	10 93 2c 02 	sts	0x022C, r17
    2396:	89 e0       	ldi	r24, 0x09	; 9
    2398:	61 e0       	ldi	r22, 0x01	; 1
    239a:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    239e:	91 e0       	ldi	r25, 0x01	; 1
    23a0:	89 e0       	ldi	r24, 0x09	; 9
    23a2:	1f 91       	pop	r17
    23a4:	08 95       	ret

000023a6 <SPKR_open>:
    23a6:	81 30       	cpi	r24, 0x01	; 1
    23a8:	29 f0       	breq	.+10     	; 0x23b4 <SPKR_open+0xe>
    23aa:	82 30       	cpi	r24, 0x02	; 2
    23ac:	31 f0       	breq	.+12     	; 0x23ba <SPKR_open+0x14>
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	89 e0       	ldi	r24, 0x09	; 9
    23b2:	08 95       	ret
    23b4:	0e 94 91 11 	call	0x2322	; 0x2322 <__SPKR_open_beep_mode>
    23b8:	08 95       	ret
    23ba:	0e 94 a7 11 	call	0x234e	; 0x234e <__SPKR_open_tone_mode>
    23be:	08 95       	ret

000023c0 <STEPPER_get_nSteps>:
    23c0:	80 91 3d 04 	lds	r24, 0x043D
    23c4:	90 91 3e 04 	lds	r25, 0x043E
    23c8:	20 91 3f 04 	lds	r18, 0x043F
    23cc:	30 91 40 04 	lds	r19, 0x0440
    23d0:	bc 01       	movw	r22, r24
    23d2:	c9 01       	movw	r24, r18
    23d4:	08 95       	ret

000023d6 <STEPPER_stepmode>:
    23d6:	2f 92       	push	r2
    23d8:	3f 92       	push	r3
    23da:	4f 92       	push	r4
    23dc:	5f 92       	push	r5
    23de:	6f 92       	push	r6
    23e0:	7f 92       	push	r7
    23e2:	8f 92       	push	r8
    23e4:	9f 92       	push	r9
    23e6:	af 92       	push	r10
    23e8:	bf 92       	push	r11
    23ea:	cf 92       	push	r12
    23ec:	df 92       	push	r13
    23ee:	ef 92       	push	r14
    23f0:	ff 92       	push	r15
    23f2:	0f 93       	push	r16
    23f4:	1f 93       	push	r17
    23f6:	df 93       	push	r29
    23f8:	cf 93       	push	r28
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	58 2e       	mov	r5, r24
    2400:	96 2e       	mov	r9, r22
    2402:	44 2e       	mov	r4, r20
    2404:	39 01       	movw	r6, r18
    2406:	3c 2c       	mov	r3, r12
    2408:	c9 8c       	ldd	r12, Y+25	; 0x19
    240a:	da 8c       	ldd	r13, Y+26	; 0x1a
    240c:	2b 8c       	ldd	r2, Y+27	; 0x1b
    240e:	81 e0       	ldi	r24, 0x01	; 1
    2410:	68 17       	cp	r22, r24
    2412:	39 f1       	breq	.+78     	; 0x2462 <STEPPER_stepmode+0x8c>
    2414:	68 17       	cp	r22, r24
    2416:	28 f0       	brcs	.+10     	; 0x2422 <STEPPER_stepmode+0x4c>
    2418:	92 e0       	ldi	r25, 0x02	; 2
    241a:	69 17       	cp	r22, r25
    241c:	09 f0       	breq	.+2      	; 0x2420 <STEPPER_stepmode+0x4a>
    241e:	85 c0       	rjmp	.+266    	; 0x252a <STEPPER_stepmode+0x154>
    2420:	49 c0       	rjmp	.+146    	; 0x24b4 <STEPPER_stepmode+0xde>
    2422:	80 e0       	ldi	r24, 0x00	; 0
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <STEPPER_set_mode>
    242a:	80 e0       	ldi	r24, 0x00	; 0
    242c:	b7 01       	movw	r22, r14
    242e:	0e 94 bd 13 	call	0x277a	; 0x277a <STEPPER_set_accel>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	64 2d       	mov	r22, r4
    2436:	a3 01       	movw	r20, r6
    2438:	98 01       	movw	r18, r16
    243a:	03 2d       	mov	r16, r3
    243c:	ee 24       	eor	r14, r14
    243e:	e3 94       	inc	r14
    2440:	e2 e6       	ldi	r30, 0x62	; 98
    2442:	ce 2e       	mov	r12, r30
    2444:	e4 e0       	ldi	r30, 0x04	; 4
    2446:	de 2e       	mov	r13, r30
    2448:	0e 94 2b 14 	call	0x2856	; 0x2856 <STEPPER_step>
    244c:	55 20       	and	r5, r5
    244e:	09 f0       	breq	.+2      	; 0x2452 <STEPPER_stepmode+0x7c>
    2450:	6c c0       	rjmp	.+216    	; 0x252a <STEPPER_stepmode+0x154>
    2452:	00 d0       	rcall	.+0      	; 0x2454 <STEPPER_stepmode+0x7e>
    2454:	0f 92       	push	r0
    2456:	ed b7       	in	r30, 0x3d	; 61
    2458:	fe b7       	in	r31, 0x3e	; 62
    245a:	11 82       	std	Z+1, r1	; 0x01
    245c:	b3 82       	std	Z+3, r11	; 0x03
    245e:	a2 82       	std	Z+2, r10	; 0x02
    2460:	23 c0       	rjmp	.+70     	; 0x24a8 <STEPPER_stepmode+0xd2>
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	61 e0       	ldi	r22, 0x01	; 1
    2466:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <STEPPER_set_mode>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	b6 01       	movw	r22, r12
    246e:	0e 94 bd 13 	call	0x277a	; 0x277a <STEPPER_set_accel>
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	68 2d       	mov	r22, r8
    2476:	4d 89       	ldd	r20, Y+21	; 0x15
    2478:	5e 89       	ldd	r21, Y+22	; 0x16
    247a:	2f 89       	ldd	r18, Y+23	; 0x17
    247c:	38 8d       	ldd	r19, Y+24	; 0x18
    247e:	02 2d       	mov	r16, r2
    2480:	ee 24       	eor	r14, r14
    2482:	e3 94       	inc	r14
    2484:	72 e6       	ldi	r23, 0x62	; 98
    2486:	c7 2e       	mov	r12, r23
    2488:	74 e0       	ldi	r23, 0x04	; 4
    248a:	d7 2e       	mov	r13, r23
    248c:	0e 94 2b 14 	call	0x2856	; 0x2856 <STEPPER_step>
    2490:	55 20       	and	r5, r5
    2492:	09 f0       	breq	.+2      	; 0x2496 <STEPPER_stepmode+0xc0>
    2494:	4a c0       	rjmp	.+148    	; 0x252a <STEPPER_stepmode+0x154>
    2496:	00 d0       	rcall	.+0      	; 0x2498 <STEPPER_stepmode+0xc2>
    2498:	0f 92       	push	r0
    249a:	ed b7       	in	r30, 0x3d	; 61
    249c:	fe b7       	in	r31, 0x3e	; 62
    249e:	91 82       	std	Z+1, r9	; 0x01
    24a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24a4:	93 83       	std	Z+3, r25	; 0x03
    24a6:	82 83       	std	Z+2, r24	; 0x02
    24a8:	0e 94 b7 14 	call	0x296e	; 0x296e <STEPPER_wait_and_then>
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	3b c0       	rjmp	.+118    	; 0x252a <STEPPER_stepmode+0x154>
    24b4:	82 e0       	ldi	r24, 0x02	; 2
    24b6:	61 e0       	ldi	r22, 0x01	; 1
    24b8:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <STEPPER_set_mode>
    24bc:	80 e0       	ldi	r24, 0x00	; 0
    24be:	b7 01       	movw	r22, r14
    24c0:	0e 94 bd 13 	call	0x277a	; 0x277a <STEPPER_set_accel>
    24c4:	81 e0       	ldi	r24, 0x01	; 1
    24c6:	b6 01       	movw	r22, r12
    24c8:	0e 94 bd 13 	call	0x277a	; 0x277a <STEPPER_set_accel>
    24cc:	80 e0       	ldi	r24, 0x00	; 0
    24ce:	64 2d       	mov	r22, r4
    24d0:	a3 01       	movw	r20, r6
    24d2:	98 01       	movw	r18, r16
    24d4:	03 2d       	mov	r16, r3
    24d6:	ee 24       	eor	r14, r14
    24d8:	e3 94       	inc	r14
    24da:	92 e6       	ldi	r25, 0x62	; 98
    24dc:	c9 2e       	mov	r12, r25
    24de:	94 e0       	ldi	r25, 0x04	; 4
    24e0:	d9 2e       	mov	r13, r25
    24e2:	0e 94 2b 14 	call	0x2856	; 0x2856 <STEPPER_step>
    24e6:	81 e0       	ldi	r24, 0x01	; 1
    24e8:	68 2d       	mov	r22, r8
    24ea:	4d 89       	ldd	r20, Y+21	; 0x15
    24ec:	5e 89       	ldd	r21, Y+22	; 0x16
    24ee:	2f 89       	ldd	r18, Y+23	; 0x17
    24f0:	38 8d       	ldd	r19, Y+24	; 0x18
    24f2:	02 2d       	mov	r16, r2
    24f4:	0e 94 2b 14 	call	0x2856	; 0x2856 <STEPPER_step>
    24f8:	55 20       	and	r5, r5
    24fa:	b9 f4       	brne	.+46     	; 0x252a <STEPPER_stepmode+0x154>
    24fc:	00 d0       	rcall	.+0      	; 0x24fe <STEPPER_stepmode+0x128>
    24fe:	00 d0       	rcall	.+0      	; 0x2500 <STEPPER_stepmode+0x12a>
    2500:	0f 92       	push	r0
    2502:	ad b7       	in	r26, 0x3d	; 61
    2504:	be b7       	in	r27, 0x3e	; 62
    2506:	11 96       	adiw	r26, 0x01	; 1
    2508:	ed b7       	in	r30, 0x3d	; 61
    250a:	fe b7       	in	r31, 0x3e	; 62
    250c:	91 82       	std	Z+1, r9	; 0x01
    250e:	fd 01       	movw	r30, r26
    2510:	b2 82       	std	Z+2, r11	; 0x02
    2512:	a1 82       	std	Z+1, r10	; 0x01
    2514:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2516:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2518:	94 83       	std	Z+4, r25	; 0x04
    251a:	83 83       	std	Z+3, r24	; 0x03
    251c:	0e 94 b7 14 	call	0x296e	; 0x296e <STEPPER_wait_and_then>
    2520:	0f 90       	pop	r0
    2522:	0f 90       	pop	r0
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	cf 91       	pop	r28
    252c:	df 91       	pop	r29
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	ff 90       	pop	r15
    2534:	ef 90       	pop	r14
    2536:	df 90       	pop	r13
    2538:	cf 90       	pop	r12
    253a:	bf 90       	pop	r11
    253c:	af 90       	pop	r10
    253e:	9f 90       	pop	r9
    2540:	8f 90       	pop	r8
    2542:	7f 90       	pop	r7
    2544:	6f 90       	pop	r6
    2546:	5f 90       	pop	r5
    2548:	4f 90       	pop	r4
    254a:	3f 90       	pop	r3
    254c:	2f 90       	pop	r2
    254e:	08 95       	ret

00002550 <STEPPER_move>:
    2550:	6f 92       	push	r6
    2552:	7f 92       	push	r7
    2554:	8f 92       	push	r8
    2556:	9f 92       	push	r9
    2558:	af 92       	push	r10
    255a:	bf 92       	push	r11
    255c:	cf 92       	push	r12
    255e:	df 92       	push	r13
    2560:	ef 92       	push	r14
    2562:	ff 92       	push	r15
    2564:	0f 93       	push	r16
    2566:	1f 93       	push	r17
    2568:	df 93       	push	r29
    256a:	cf 93       	push	r28
    256c:	cd b7       	in	r28, 0x3d	; 61
    256e:	de b7       	in	r29, 0x3e	; 62
    2570:	94 2e       	mov	r9, r20
    2572:	7c 2d       	mov	r23, r12
    2574:	d5 01       	movw	r26, r10
    2576:	49 89       	ldd	r20, Y+17	; 0x11
    2578:	5a 89       	ldd	r21, Y+18	; 0x12
    257a:	ab 88       	ldd	r10, Y+19	; 0x13
    257c:	bc 88       	ldd	r11, Y+20	; 0x14
    257e:	cd 88       	ldd	r12, Y+21	; 0x15
    2580:	de 88       	ldd	r13, Y+22	; 0x16
    2582:	9f 89       	ldd	r25, Y+23	; 0x17
    2584:	81 30       	cpi	r24, 0x01	; 1
    2586:	09 f4       	brne	.+2      	; 0x258a <STEPPER_move+0x3a>
    2588:	57 c0       	rjmp	.+174    	; 0x2638 <STEPPER_move+0xe8>
    258a:	81 30       	cpi	r24, 0x01	; 1
    258c:	b8 f1       	brcs	.+110    	; 0x25fc <STEPPER_move+0xac>
    258e:	82 30       	cpi	r24, 0x02	; 2
    2590:	09 f0       	breq	.+2      	; 0x2594 <STEPPER_move+0x44>
    2592:	76 c0       	rjmp	.+236    	; 0x2680 <STEPPER_move+0x130>
    2594:	61 30       	cpi	r22, 0x01	; 1
    2596:	91 f0       	breq	.+36     	; 0x25bc <STEPPER_move+0x6c>
    2598:	61 30       	cpi	r22, 0x01	; 1
    259a:	20 f0       	brcs	.+8      	; 0x25a4 <STEPPER_move+0x54>
    259c:	62 30       	cpi	r22, 0x02	; 2
    259e:	09 f0       	breq	.+2      	; 0x25a2 <STEPPER_move+0x52>
    25a0:	6f c0       	rjmp	.+222    	; 0x2680 <STEPPER_move+0x130>
    25a2:	15 c0       	rjmp	.+42     	; 0x25ce <STEPPER_move+0x7e>
    25a4:	80 e0       	ldi	r24, 0x00	; 0
    25a6:	60 e0       	ldi	r22, 0x00	; 0
    25a8:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <STEPPER_set_mode>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	b7 01       	movw	r22, r14
    25b0:	0e 94 bd 13 	call	0x277a	; 0x277a <STEPPER_set_accel>
    25b4:	80 e0       	ldi	r24, 0x00	; 0
    25b6:	69 2d       	mov	r22, r9
    25b8:	a8 01       	movw	r20, r16
    25ba:	1d c0       	rjmp	.+58     	; 0x25f6 <STEPPER_move+0xa6>
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	60 e0       	ldi	r22, 0x00	; 0
    25c0:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <STEPPER_set_mode>
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	b6 01       	movw	r22, r12
    25c8:	0e 94 bd 13 	call	0x277a	; 0x277a <STEPPER_set_accel>
    25cc:	11 c0       	rjmp	.+34     	; 0x25f0 <STEPPER_move+0xa0>
    25ce:	82 e0       	ldi	r24, 0x02	; 2
    25d0:	60 e0       	ldi	r22, 0x00	; 0
    25d2:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <STEPPER_set_mode>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	b7 01       	movw	r22, r14
    25da:	0e 94 bd 13 	call	0x277a	; 0x277a <STEPPER_set_accel>
    25de:	81 e0       	ldi	r24, 0x01	; 1
    25e0:	b6 01       	movw	r22, r12
    25e2:	0e 94 bd 13 	call	0x277a	; 0x277a <STEPPER_set_accel>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	69 2d       	mov	r22, r9
    25ea:	a8 01       	movw	r20, r16
    25ec:	0e 94 a6 13 	call	0x274c	; 0x274c <STEPPER_run>
    25f0:	81 e0       	ldi	r24, 0x01	; 1
    25f2:	68 2d       	mov	r22, r8
    25f4:	a5 01       	movw	r20, r10
    25f6:	0e 94 a6 13 	call	0x274c	; 0x274c <STEPPER_run>
    25fa:	42 c0       	rjmp	.+132    	; 0x2680 <STEPPER_move+0x130>
    25fc:	ed b7       	in	r30, 0x3d	; 61
    25fe:	fe b7       	in	r31, 0x3e	; 62
    2600:	39 97       	sbiw	r30, 0x09	; 9
    2602:	0f b6       	in	r0, 0x3f	; 63
    2604:	f8 94       	cli
    2606:	fe bf       	out	0x3e, r31	; 62
    2608:	0f be       	out	0x3f, r0	; 63
    260a:	ed bf       	out	0x3d, r30	; 61
    260c:	6d b6       	in	r6, 0x3d	; 61
    260e:	7e b6       	in	r7, 0x3e	; 62
    2610:	08 94       	sec
    2612:	61 1c       	adc	r6, r1
    2614:	71 1c       	adc	r7, r1
    2616:	52 83       	std	Z+2, r21	; 0x02
    2618:	41 83       	std	Z+1, r20	; 0x01
    261a:	f3 01       	movw	r30, r6
    261c:	b3 82       	std	Z+3, r11	; 0x03
    261e:	a2 82       	std	Z+2, r10	; 0x02
    2620:	d5 82       	std	Z+5, r13	; 0x05
    2622:	c4 82       	std	Z+4, r12	; 0x04
    2624:	96 83       	std	Z+6, r25	; 0x06
    2626:	88 8d       	ldd	r24, Y+24	; 0x18
    2628:	99 8d       	ldd	r25, Y+25	; 0x19
    262a:	90 87       	std	Z+8, r25	; 0x08
    262c:	87 83       	std	Z+7, r24	; 0x07
    262e:	80 e0       	ldi	r24, 0x00	; 0
    2630:	49 2d       	mov	r20, r9
    2632:	c7 2e       	mov	r12, r23
    2634:	5d 01       	movw	r10, r26
    2636:	1a c0       	rjmp	.+52     	; 0x266c <STEPPER_move+0x11c>
    2638:	ed b7       	in	r30, 0x3d	; 61
    263a:	fe b7       	in	r31, 0x3e	; 62
    263c:	39 97       	sbiw	r30, 0x09	; 9
    263e:	0f b6       	in	r0, 0x3f	; 63
    2640:	f8 94       	cli
    2642:	fe bf       	out	0x3e, r31	; 62
    2644:	0f be       	out	0x3f, r0	; 63
    2646:	ed bf       	out	0x3d, r30	; 61
    2648:	ad b7       	in	r26, 0x3d	; 61
    264a:	be b7       	in	r27, 0x3e	; 62
    264c:	11 96       	adiw	r26, 0x01	; 1
    264e:	52 83       	std	Z+2, r21	; 0x02
    2650:	41 83       	std	Z+1, r20	; 0x01
    2652:	fd 01       	movw	r30, r26
    2654:	b3 82       	std	Z+3, r11	; 0x03
    2656:	a2 82       	std	Z+2, r10	; 0x02
    2658:	d5 82       	std	Z+5, r13	; 0x05
    265a:	c4 82       	std	Z+4, r12	; 0x04
    265c:	96 83       	std	Z+6, r25	; 0x06
    265e:	10 86       	std	Z+8, r1	; 0x08
    2660:	17 82       	std	Z+7, r1	; 0x07
    2662:	81 e0       	ldi	r24, 0x01	; 1
    2664:	49 2d       	mov	r20, r9
    2666:	c7 2e       	mov	r12, r23
    2668:	aa 24       	eor	r10, r10
    266a:	bb 24       	eor	r11, r11
    266c:	0e 94 eb 11 	call	0x23d6	; 0x23d6 <STEPPER_stepmode>
    2670:	8d b7       	in	r24, 0x3d	; 61
    2672:	9e b7       	in	r25, 0x3e	; 62
    2674:	09 96       	adiw	r24, 0x09	; 9
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	9e bf       	out	0x3e, r25	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	8d bf       	out	0x3d, r24	; 61
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	ff 90       	pop	r15
    268a:	ef 90       	pop	r14
    268c:	df 90       	pop	r13
    268e:	cf 90       	pop	r12
    2690:	bf 90       	pop	r11
    2692:	af 90       	pop	r10
    2694:	9f 90       	pop	r9
    2696:	8f 90       	pop	r8
    2698:	7f 90       	pop	r7
    269a:	6f 90       	pop	r6
    269c:	08 95       	ret

0000269e <STEPPER_open>:
    269e:	0e 94 99 1c 	call	0x3932	; 0x3932 <__STEPPER_init>
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	80 93 61 04 	sts	0x0461, r24
    26a8:	eb e2       	ldi	r30, 0x2B	; 43
    26aa:	f4 e0       	ldi	r31, 0x04	; 4
    26ac:	11 92       	st	Z+, r1
    26ae:	11 92       	st	Z+, r1
    26b0:	11 82       	std	Z+1, r1	; 0x01
    26b2:	10 82       	st	Z, r1
    26b4:	32 96       	adiw	r30, 0x02	; 2
    26b6:	11 82       	std	Z+1, r1	; 0x01
    26b8:	10 82       	st	Z, r1
    26ba:	32 96       	adiw	r30, 0x02	; 2
    26bc:	11 82       	std	Z+1, r1	; 0x01
    26be:	10 82       	st	Z, r1
    26c0:	32 96       	adiw	r30, 0x02	; 2
    26c2:	11 82       	std	Z+1, r1	; 0x01
    26c4:	10 82       	st	Z, r1
    26c6:	32 96       	adiw	r30, 0x02	; 2
    26c8:	11 82       	std	Z+1, r1	; 0x01
    26ca:	10 82       	st	Z, r1
    26cc:	32 96       	adiw	r30, 0x02	; 2
    26ce:	11 82       	std	Z+1, r1	; 0x01
    26d0:	10 82       	st	Z, r1
    26d2:	32 96       	adiw	r30, 0x02	; 2
    26d4:	11 82       	std	Z+1, r1	; 0x01
    26d6:	10 82       	st	Z, r1
    26d8:	32 96       	adiw	r30, 0x02	; 2
    26da:	11 82       	std	Z+1, r1	; 0x01
    26dc:	10 82       	st	Z, r1
    26de:	32 96       	adiw	r30, 0x02	; 2
    26e0:	11 82       	std	Z+1, r1	; 0x01
    26e2:	10 82       	st	Z, r1
    26e4:	32 96       	adiw	r30, 0x02	; 2
    26e6:	11 82       	std	Z+1, r1	; 0x01
    26e8:	10 82       	st	Z, r1
    26ea:	32 96       	adiw	r30, 0x02	; 2
    26ec:	11 82       	std	Z+1, r1	; 0x01
    26ee:	10 82       	st	Z, r1
    26f0:	32 96       	adiw	r30, 0x02	; 2
    26f2:	11 82       	std	Z+1, r1	; 0x01
    26f4:	10 82       	st	Z, r1
    26f6:	36 96       	adiw	r30, 0x06	; 6
    26f8:	11 92       	st	Z+, r1
    26fa:	11 92       	st	Z+, r1
    26fc:	11 92       	st	Z+, r1
    26fe:	10 82       	st	Z, r1
    2700:	32 96       	adiw	r30, 0x02	; 2
    2702:	11 92       	st	Z+, r1
    2704:	11 92       	st	Z+, r1
    2706:	11 92       	st	Z+, r1
    2708:	11 92       	st	Z+, r1
    270a:	11 92       	st	Z+, r1
    270c:	11 92       	st	Z+, r1
    270e:	11 92       	st	Z+, r1
    2710:	11 82       	std	Z+1, r1	; 0x01
    2712:	10 82       	st	Z, r1
    2714:	32 96       	adiw	r30, 0x02	; 2
    2716:	11 82       	std	Z+1, r1	; 0x01
    2718:	10 82       	st	Z, r1
    271a:	32 96       	adiw	r30, 0x02	; 2
    271c:	11 82       	std	Z+1, r1	; 0x01
    271e:	10 82       	st	Z, r1
    2720:	32 96       	adiw	r30, 0x02	; 2
    2722:	11 82       	std	Z+1, r1	; 0x01
    2724:	10 82       	st	Z, r1
    2726:	76 97       	sbiw	r30, 0x16	; 22
    2728:	11 82       	std	Z+1, r1	; 0x01
    272a:	10 82       	st	Z, r1
    272c:	32 96       	adiw	r30, 0x02	; 2
    272e:	11 82       	std	Z+1, r1	; 0x01
    2730:	10 82       	st	Z, r1
    2732:	10 92 60 04 	sts	0x0460, r1
    2736:	10 92 5f 04 	sts	0x045F, r1
    273a:	10 92 61 04 	sts	0x0461, r1
    273e:	87 e0       	ldi	r24, 0x07	; 7
    2740:	61 e0       	ldi	r22, 0x01	; 1
    2742:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    2746:	87 e0       	ldi	r24, 0x07	; 7
    2748:	91 e0       	ldi	r25, 0x01	; 1
    274a:	08 95       	ret

0000274c <STEPPER_run>:
    274c:	ef 92       	push	r14
    274e:	ff 92       	push	r15
    2750:	0f 93       	push	r16
    2752:	1f 93       	push	r17
    2754:	18 2f       	mov	r17, r24
    2756:	06 2f       	mov	r16, r22
    2758:	7a 01       	movw	r14, r20
    275a:	60 e0       	ldi	r22, 0x00	; 0
    275c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <STEPPER_set_mode>
    2760:	81 2f       	mov	r24, r17
    2762:	60 2f       	mov	r22, r16
    2764:	0e 94 df 13 	call	0x27be	; 0x27be <STEPPER_set_dir>
    2768:	81 2f       	mov	r24, r17
    276a:	b7 01       	movw	r22, r14
    276c:	0e 94 09 14 	call	0x2812	; 0x2812 <STEPPER_set_speed>
    2770:	1f 91       	pop	r17
    2772:	0f 91       	pop	r16
    2774:	ff 90       	pop	r15
    2776:	ef 90       	pop	r14
    2778:	08 95       	ret

0000277a <STEPPER_set_accel>:
    277a:	48 2f       	mov	r20, r24
    277c:	81 e0       	ldi	r24, 0x01	; 1
    277e:	80 93 61 04 	sts	0x0461, r24
    2782:	cb 01       	movw	r24, r22
    2784:	23 e0       	ldi	r18, 0x03	; 3
    2786:	69 3e       	cpi	r22, 0xE9	; 233
    2788:	72 07       	cpc	r23, r18
    278a:	10 f0       	brcs	.+4      	; 0x2790 <STEPPER_set_accel+0x16>
    278c:	88 ee       	ldi	r24, 0xE8	; 232
    278e:	93 e0       	ldi	r25, 0x03	; 3
    2790:	41 30       	cpi	r20, 0x01	; 1
    2792:	71 f0       	breq	.+28     	; 0x27b0 <STEPPER_set_accel+0x36>
    2794:	41 30       	cpi	r20, 0x01	; 1
    2796:	18 f0       	brcs	.+6      	; 0x279e <STEPPER_set_accel+0x24>
    2798:	42 30       	cpi	r20, 0x02	; 2
    279a:	71 f4       	brne	.+28     	; 0x27b8 <STEPPER_set_accel+0x3e>
    279c:	05 c0       	rjmp	.+10     	; 0x27a8 <STEPPER_set_accel+0x2e>
    279e:	90 93 36 04 	sts	0x0436, r25
    27a2:	80 93 35 04 	sts	0x0435, r24
    27a6:	08 c0       	rjmp	.+16     	; 0x27b8 <STEPPER_set_accel+0x3e>
    27a8:	90 93 36 04 	sts	0x0436, r25
    27ac:	80 93 35 04 	sts	0x0435, r24
    27b0:	90 93 38 04 	sts	0x0438, r25
    27b4:	80 93 37 04 	sts	0x0437, r24
    27b8:	10 92 61 04 	sts	0x0461, r1
    27bc:	08 95       	ret

000027be <STEPPER_set_dir>:
    27be:	98 2f       	mov	r25, r24
    27c0:	81 e0       	ldi	r24, 0x01	; 1
    27c2:	80 93 61 04 	sts	0x0461, r24
    27c6:	91 30       	cpi	r25, 0x01	; 1
    27c8:	51 f0       	breq	.+20     	; 0x27de <STEPPER_set_dir+0x20>
    27ca:	91 30       	cpi	r25, 0x01	; 1
    27cc:	18 f0       	brcs	.+6      	; 0x27d4 <STEPPER_set_dir+0x16>
    27ce:	92 30       	cpi	r25, 0x02	; 2
    27d0:	41 f4       	brne	.+16     	; 0x27e2 <STEPPER_set_dir+0x24>
    27d2:	03 c0       	rjmp	.+6      	; 0x27da <STEPPER_set_dir+0x1c>
    27d4:	60 93 4e 04 	sts	0x044E, r22
    27d8:	04 c0       	rjmp	.+8      	; 0x27e2 <STEPPER_set_dir+0x24>
    27da:	60 93 4e 04 	sts	0x044E, r22
    27de:	60 93 4f 04 	sts	0x044F, r22
    27e2:	10 92 61 04 	sts	0x0461, r1
    27e6:	08 95       	ret

000027e8 <STEPPER_set_mode>:
    27e8:	98 2f       	mov	r25, r24
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	80 93 61 04 	sts	0x0461, r24
    27f0:	91 30       	cpi	r25, 0x01	; 1
    27f2:	51 f0       	breq	.+20     	; 0x2808 <STEPPER_set_mode+0x20>
    27f4:	91 30       	cpi	r25, 0x01	; 1
    27f6:	18 f0       	brcs	.+6      	; 0x27fe <STEPPER_set_mode+0x16>
    27f8:	92 30       	cpi	r25, 0x02	; 2
    27fa:	41 f4       	brne	.+16     	; 0x280c <STEPPER_set_mode+0x24>
    27fc:	03 c0       	rjmp	.+6      	; 0x2804 <STEPPER_set_mode+0x1c>
    27fe:	60 93 2b 04 	sts	0x042B, r22
    2802:	04 c0       	rjmp	.+8      	; 0x280c <STEPPER_set_mode+0x24>
    2804:	60 93 2b 04 	sts	0x042B, r22
    2808:	60 93 2c 04 	sts	0x042C, r22
    280c:	10 92 61 04 	sts	0x0461, r1
    2810:	08 95       	ret

00002812 <STEPPER_set_speed>:
    2812:	48 2f       	mov	r20, r24
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	80 93 61 04 	sts	0x0461, r24
    281a:	cb 01       	movw	r24, r22
    281c:	21 e0       	ldi	r18, 0x01	; 1
    281e:	61 39       	cpi	r22, 0x91	; 145
    2820:	72 07       	cpc	r23, r18
    2822:	10 f0       	brcs	.+4      	; 0x2828 <STEPPER_set_speed+0x16>
    2824:	80 e9       	ldi	r24, 0x90	; 144
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	41 30       	cpi	r20, 0x01	; 1
    282a:	71 f0       	breq	.+28     	; 0x2848 <STEPPER_set_speed+0x36>
    282c:	41 30       	cpi	r20, 0x01	; 1
    282e:	18 f0       	brcs	.+6      	; 0x2836 <STEPPER_set_speed+0x24>
    2830:	42 30       	cpi	r20, 0x02	; 2
    2832:	71 f4       	brne	.+28     	; 0x2850 <STEPPER_set_speed+0x3e>
    2834:	05 c0       	rjmp	.+10     	; 0x2840 <STEPPER_set_speed+0x2e>
    2836:	90 93 2e 04 	sts	0x042E, r25
    283a:	80 93 2d 04 	sts	0x042D, r24
    283e:	08 c0       	rjmp	.+16     	; 0x2850 <STEPPER_set_speed+0x3e>
    2840:	90 93 2e 04 	sts	0x042E, r25
    2844:	80 93 2d 04 	sts	0x042D, r24
    2848:	90 93 30 04 	sts	0x0430, r25
    284c:	80 93 2f 04 	sts	0x042F, r24
    2850:	10 92 61 04 	sts	0x0461, r1
    2854:	08 95       	ret

00002856 <STEPPER_step>:
    2856:	8f 92       	push	r8
    2858:	9f 92       	push	r9
    285a:	af 92       	push	r10
    285c:	bf 92       	push	r11
    285e:	cf 92       	push	r12
    2860:	df 92       	push	r13
    2862:	ef 92       	push	r14
    2864:	ff 92       	push	r15
    2866:	0f 93       	push	r16
    2868:	1f 93       	push	r17
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	18 2f       	mov	r17, r24
    2870:	f6 2e       	mov	r15, r22
    2872:	5a 01       	movw	r10, r20
    2874:	49 01       	movw	r8, r18
    2876:	e6 01       	movw	r28, r12
    2878:	61 e0       	ldi	r22, 0x01	; 1
    287a:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <STEPPER_set_mode>
    287e:	81 2f       	mov	r24, r17
    2880:	b5 01       	movw	r22, r10
    2882:	a4 01       	movw	r20, r8
    2884:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <STEPPER_setup_decels>
    2888:	81 2f       	mov	r24, r17
    288a:	6f 2d       	mov	r22, r15
    288c:	0e 94 df 13 	call	0x27be	; 0x27be <STEPPER_set_dir>
    2890:	81 2f       	mov	r24, r17
    2892:	60 2f       	mov	r22, r16
    2894:	0e 94 be 1c 	call	0x397c	; 0x397c <STEPPER_set_stop_mode>
    2898:	81 2f       	mov	r24, r17
    289a:	b5 01       	movw	r22, r10
    289c:	0e 94 a3 1c 	call	0x3946	; 0x3946 <STEPPER_set_steps>
    28a0:	c1 14       	cp	r12, r1
    28a2:	d1 04       	cpc	r13, r1
    28a4:	99 f0       	breq	.+38     	; 0x28cc <STEPPER_step+0x76>
    28a6:	11 30       	cpi	r17, 0x01	; 1
    28a8:	49 f0       	breq	.+18     	; 0x28bc <STEPPER_step+0x66>
    28aa:	11 30       	cpi	r17, 0x01	; 1
    28ac:	18 f0       	brcs	.+6      	; 0x28b4 <STEPPER_step+0x5e>
    28ae:	12 30       	cpi	r17, 0x02	; 2
    28b0:	69 f4       	brne	.+26     	; 0x28cc <STEPPER_step+0x76>
    28b2:	06 c0       	rjmp	.+12     	; 0x28c0 <STEPPER_step+0x6a>
    28b4:	18 82       	st	Y, r1
    28b6:	10 92 5d 04 	sts	0x045D, r1
    28ba:	08 c0       	rjmp	.+16     	; 0x28cc <STEPPER_step+0x76>
    28bc:	19 82       	std	Y+1, r1	; 0x01
    28be:	04 c0       	rjmp	.+8      	; 0x28c8 <STEPPER_step+0x72>
    28c0:	18 82       	st	Y, r1
    28c2:	19 82       	std	Y+1, r1	; 0x01
    28c4:	10 92 5d 04 	sts	0x045D, r1
    28c8:	10 92 5e 04 	sts	0x045E, r1
    28cc:	d0 93 60 04 	sts	0x0460, r29
    28d0:	c0 93 5f 04 	sts	0x045F, r28
    28d4:	ee 20       	and	r14, r14
    28d6:	b9 f5       	brne	.+110    	; 0x2946 <STEPPER_step+0xf0>
    28d8:	8c ec       	ldi	r24, 0xCC	; 204
    28da:	91 e0       	ldi	r25, 0x01	; 1
    28dc:	90 93 60 04 	sts	0x0460, r25
    28e0:	80 93 5f 04 	sts	0x045F, r24
    28e4:	81 2f       	mov	r24, r17
    28e6:	b4 01       	movw	r22, r8
    28e8:	0e 94 09 14 	call	0x2812	; 0x2812 <STEPPER_set_speed>
    28ec:	81 2f       	mov	r24, r17
    28ee:	0e 94 84 1c 	call	0x3908	; 0x3908 <STEPPER_go>
    28f2:	11 30       	cpi	r17, 0x01	; 1
    28f4:	71 f0       	breq	.+28     	; 0x2912 <STEPPER_step+0xbc>
    28f6:	11 30       	cpi	r17, 0x01	; 1
    28f8:	18 f0       	brcs	.+6      	; 0x2900 <STEPPER_step+0xaa>
    28fa:	12 30       	cpi	r17, 0x02	; 2
    28fc:	59 f5       	brne	.+86     	; 0x2954 <STEPPER_step+0xfe>
    28fe:	12 c0       	rjmp	.+36     	; 0x2924 <STEPPER_step+0xce>
    2900:	10 92 cc 01 	sts	0x01CC, r1
    2904:	10 92 5d 04 	sts	0x045D, r1
    2908:	80 91 cc 01 	lds	r24, 0x01CC
    290c:	88 23       	and	r24, r24
    290e:	e1 f3       	breq	.-8      	; 0x2908 <STEPPER_step+0xb2>
    2910:	21 c0       	rjmp	.+66     	; 0x2954 <STEPPER_step+0xfe>
    2912:	10 92 cd 01 	sts	0x01CD, r1
    2916:	10 92 5e 04 	sts	0x045E, r1
    291a:	80 91 cd 01 	lds	r24, 0x01CD
    291e:	88 23       	and	r24, r24
    2920:	e1 f3       	breq	.-8      	; 0x291a <STEPPER_step+0xc4>
    2922:	18 c0       	rjmp	.+48     	; 0x2954 <STEPPER_step+0xfe>
    2924:	10 92 cc 01 	sts	0x01CC, r1
    2928:	10 92 cd 01 	sts	0x01CD, r1
    292c:	10 92 5d 04 	sts	0x045D, r1
    2930:	10 92 5e 04 	sts	0x045E, r1
    2934:	80 91 cc 01 	lds	r24, 0x01CC
    2938:	88 23       	and	r24, r24
    293a:	e1 f3       	breq	.-8      	; 0x2934 <STEPPER_step+0xde>
    293c:	80 91 cd 01 	lds	r24, 0x01CD
    2940:	88 23       	and	r24, r24
    2942:	c1 f3       	breq	.-16     	; 0x2934 <STEPPER_step+0xde>
    2944:	07 c0       	rjmp	.+14     	; 0x2954 <STEPPER_step+0xfe>
    2946:	81 2f       	mov	r24, r17
    2948:	b4 01       	movw	r22, r8
    294a:	0e 94 09 14 	call	0x2812	; 0x2812 <STEPPER_set_speed>
    294e:	81 2f       	mov	r24, r17
    2950:	0e 94 84 1c 	call	0x3908	; 0x3908 <STEPPER_go>
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	1f 91       	pop	r17
    295a:	0f 91       	pop	r16
    295c:	ff 90       	pop	r15
    295e:	ef 90       	pop	r14
    2960:	df 90       	pop	r13
    2962:	cf 90       	pop	r12
    2964:	bf 90       	pop	r11
    2966:	af 90       	pop	r10
    2968:	9f 90       	pop	r9
    296a:	8f 90       	pop	r8
    296c:	08 95       	ret

0000296e <STEPPER_wait_and_then>:
    296e:	cf 92       	push	r12
    2970:	df 92       	push	r13
    2972:	ef 92       	push	r14
    2974:	ff 92       	push	r15
    2976:	0f 93       	push	r16
    2978:	1f 93       	push	r17
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	cd b7       	in	r28, 0x3d	; 61
    2980:	de b7       	in	r29, 0x3e	; 62
    2982:	8b 85       	ldd	r24, Y+11	; 0x0b
    2984:	81 30       	cpi	r24, 0x01	; 1
    2986:	61 f0       	breq	.+24     	; 0x29a0 <STEPPER_wait_and_then+0x32>
    2988:	81 30       	cpi	r24, 0x01	; 1
    298a:	18 f0       	brcs	.+6      	; 0x2992 <STEPPER_wait_and_then+0x24>
    298c:	82 30       	cpi	r24, 0x02	; 2
    298e:	a1 f5       	brne	.+104    	; 0x29f8 <STEPPER_wait_and_then+0x8a>
    2990:	11 c0       	rjmp	.+34     	; 0x29b4 <STEPPER_wait_and_then+0x46>
    2992:	ec 85       	ldd	r30, Y+12	; 0x0c
    2994:	fd 85       	ldd	r31, Y+13	; 0x0d
    2996:	80 91 62 04 	lds	r24, 0x0462
    299a:	88 23       	and	r24, r24
    299c:	e1 f3       	breq	.-8      	; 0x2996 <STEPPER_wait_and_then+0x28>
    299e:	06 c0       	rjmp	.+12     	; 0x29ac <STEPPER_wait_and_then+0x3e>
    29a0:	ec 85       	ldd	r30, Y+12	; 0x0c
    29a2:	fd 85       	ldd	r31, Y+13	; 0x0d
    29a4:	80 91 63 04 	lds	r24, 0x0463
    29a8:	88 23       	and	r24, r24
    29aa:	e1 f3       	breq	.-8      	; 0x29a4 <STEPPER_wait_and_then+0x36>
    29ac:	30 97       	sbiw	r30, 0x00	; 0
    29ae:	21 f1       	breq	.+72     	; 0x29f8 <STEPPER_wait_and_then+0x8a>
    29b0:	09 95       	icall
    29b2:	22 c0       	rjmp	.+68     	; 0x29f8 <STEPPER_wait_and_then+0x8a>
    29b4:	cc 84       	ldd	r12, Y+12	; 0x0c
    29b6:	dd 84       	ldd	r13, Y+13	; 0x0d
    29b8:	ee 84       	ldd	r14, Y+14	; 0x0e
    29ba:	ff 84       	ldd	r15, Y+15	; 0x0f
    29bc:	00 e0       	ldi	r16, 0x00	; 0
    29be:	10 e0       	ldi	r17, 0x00	; 0
    29c0:	00 23       	and	r16, r16
    29c2:	51 f4       	brne	.+20     	; 0x29d8 <STEPPER_wait_and_then+0x6a>
    29c4:	80 91 62 04 	lds	r24, 0x0462
    29c8:	88 23       	and	r24, r24
    29ca:	31 f0       	breq	.+12     	; 0x29d8 <STEPPER_wait_and_then+0x6a>
    29cc:	c1 14       	cp	r12, r1
    29ce:	d1 04       	cpc	r13, r1
    29d0:	11 f0       	breq	.+4      	; 0x29d6 <STEPPER_wait_and_then+0x68>
    29d2:	f6 01       	movw	r30, r12
    29d4:	09 95       	icall
    29d6:	01 e0       	ldi	r16, 0x01	; 1
    29d8:	11 23       	and	r17, r17
    29da:	51 f4       	brne	.+20     	; 0x29f0 <STEPPER_wait_and_then+0x82>
    29dc:	80 91 63 04 	lds	r24, 0x0463
    29e0:	88 23       	and	r24, r24
    29e2:	31 f0       	breq	.+12     	; 0x29f0 <STEPPER_wait_and_then+0x82>
    29e4:	e1 14       	cp	r14, r1
    29e6:	f1 04       	cpc	r15, r1
    29e8:	11 f0       	breq	.+4      	; 0x29ee <STEPPER_wait_and_then+0x80>
    29ea:	f7 01       	movw	r30, r14
    29ec:	09 95       	icall
    29ee:	11 e0       	ldi	r17, 0x01	; 1
    29f0:	00 23       	and	r16, r16
    29f2:	31 f3       	breq	.-52     	; 0x29c0 <STEPPER_wait_and_then+0x52>
    29f4:	11 23       	and	r17, r17
    29f6:	21 f3       	breq	.-56     	; 0x29c0 <STEPPER_wait_and_then+0x52>
    29f8:	cf 91       	pop	r28
    29fa:	df 91       	pop	r29
    29fc:	1f 91       	pop	r17
    29fe:	0f 91       	pop	r16
    2a00:	ff 90       	pop	r15
    2a02:	ef 90       	pop	r14
    2a04:	df 90       	pop	r13
    2a06:	cf 90       	pop	r12
    2a08:	08 95       	ret

00002a0a <SYS_get_state>:
    2a0a:	e8 2f       	mov	r30, r24
    2a0c:	f0 e0       	ldi	r31, 0x00	; 0
    2a0e:	e3 31       	cpi	r30, 0x13	; 19
    2a10:	f1 05       	cpc	r31, r1
    2a12:	40 f4       	brcc	.+16     	; 0x2a24 <SYS_get_state+0x1a>
    2a14:	e2 5c       	subi	r30, 0xC2	; 194
    2a16:	ff 4f       	sbci	r31, 0xFF	; 255
    2a18:	ee 0f       	add	r30, r30
    2a1a:	ff 1f       	adc	r31, r31
    2a1c:	05 90       	lpm	r0, Z+
    2a1e:	f4 91       	lpm	r31, Z+
    2a20:	e0 2d       	mov	r30, r0
    2a22:	09 94       	ijmp
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	08 95       	ret
    2a28:	80 91 64 04 	lds	r24, 0x0464
    2a2c:	08 95       	ret
    2a2e:	80 91 65 04 	lds	r24, 0x0465
    2a32:	08 95       	ret
    2a34:	80 91 66 04 	lds	r24, 0x0466
    2a38:	08 95       	ret
    2a3a:	80 91 67 04 	lds	r24, 0x0467
    2a3e:	08 95       	ret
    2a40:	80 91 68 04 	lds	r24, 0x0468
    2a44:	08 95       	ret
    2a46:	80 91 6a 04 	lds	r24, 0x046A
    2a4a:	08 95       	ret
    2a4c:	80 91 69 04 	lds	r24, 0x0469
    2a50:	08 95       	ret
    2a52:	80 91 6b 04 	lds	r24, 0x046B
    2a56:	08 95       	ret
    2a58:	80 91 6c 04 	lds	r24, 0x046C
    2a5c:	08 95       	ret
    2a5e:	80 91 6d 04 	lds	r24, 0x046D
    2a62:	08 95       	ret
    2a64:	80 91 6e 04 	lds	r24, 0x046E
    2a68:	08 95       	ret
    2a6a:	80 91 6f 04 	lds	r24, 0x046F
    2a6e:	08 95       	ret
    2a70:	80 91 70 04 	lds	r24, 0x0470
    2a74:	08 95       	ret
    2a76:	80 91 71 04 	lds	r24, 0x0471
    2a7a:	08 95       	ret
    2a7c:	80 91 72 04 	lds	r24, 0x0472
    2a80:	08 95       	ret
    2a82:	80 91 73 04 	lds	r24, 0x0473
    2a86:	08 95       	ret
    2a88:	80 91 74 04 	lds	r24, 0x0474
    2a8c:	08 95       	ret
    2a8e:	80 91 75 04 	lds	r24, 0x0475
    2a92:	08 95       	ret
    2a94:	80 91 76 04 	lds	r24, 0x0476
    2a98:	08 95       	ret

00002a9a <SYS_set_state>:
    2a9a:	e8 2f       	mov	r30, r24
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	e3 31       	cpi	r30, 0x13	; 19
    2aa0:	f1 05       	cpc	r31, r1
    2aa2:	08 f0       	brcs	.+2      	; 0x2aa6 <SYS_set_state+0xc>
    2aa4:	40 c0       	rjmp	.+128    	; 0x2b26 <SYS_set_state+0x8c>
    2aa6:	ef 5a       	subi	r30, 0xAF	; 175
    2aa8:	ff 4f       	sbci	r31, 0xFF	; 255
    2aaa:	ee 0f       	add	r30, r30
    2aac:	ff 1f       	adc	r31, r31
    2aae:	05 90       	lpm	r0, Z+
    2ab0:	f4 91       	lpm	r31, Z+
    2ab2:	e0 2d       	mov	r30, r0
    2ab4:	09 94       	ijmp
    2ab6:	60 93 64 04 	sts	0x0464, r22
    2aba:	08 95       	ret
    2abc:	60 93 65 04 	sts	0x0465, r22
    2ac0:	08 95       	ret
    2ac2:	60 93 66 04 	sts	0x0466, r22
    2ac6:	08 95       	ret
    2ac8:	60 93 67 04 	sts	0x0467, r22
    2acc:	08 95       	ret
    2ace:	60 93 68 04 	sts	0x0468, r22
    2ad2:	08 95       	ret
    2ad4:	60 93 6a 04 	sts	0x046A, r22
    2ad8:	08 95       	ret
    2ada:	60 93 69 04 	sts	0x0469, r22
    2ade:	08 95       	ret
    2ae0:	60 93 6b 04 	sts	0x046B, r22
    2ae4:	08 95       	ret
    2ae6:	60 93 6c 04 	sts	0x046C, r22
    2aea:	08 95       	ret
    2aec:	60 93 6d 04 	sts	0x046D, r22
    2af0:	08 95       	ret
    2af2:	60 93 6e 04 	sts	0x046E, r22
    2af6:	08 95       	ret
    2af8:	60 93 6f 04 	sts	0x046F, r22
    2afc:	08 95       	ret
    2afe:	60 93 70 04 	sts	0x0470, r22
    2b02:	08 95       	ret
    2b04:	60 93 71 04 	sts	0x0471, r22
    2b08:	08 95       	ret
    2b0a:	60 93 72 04 	sts	0x0472, r22
    2b0e:	08 95       	ret
    2b10:	60 93 73 04 	sts	0x0473, r22
    2b14:	08 95       	ret
    2b16:	60 93 74 04 	sts	0x0474, r22
    2b1a:	08 95       	ret
    2b1c:	60 93 75 04 	sts	0x0475, r22
    2b20:	08 95       	ret
    2b22:	60 93 74 04 	sts	0x0474, r22
    2b26:	08 95       	ret

00002b28 <ATTINY_get_sensors>:
    2b28:	0f 93       	push	r16
    2b2a:	1f 93       	push	r17
    2b2c:	81 e0       	ldi	r24, 0x01	; 1
    2b2e:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    2b32:	81 30       	cpi	r24, 0x01	; 1
    2b34:	11 f0       	breq	.+4      	; 0x2b3a <ATTINY_get_sensors+0x12>
    2b36:	00 e0       	ldi	r16, 0x00	; 0
    2b38:	24 c0       	rjmp	.+72     	; 0x2b82 <ATTINY_get_sensors+0x5a>
    2b3a:	87 e0       	ldi	r24, 0x07	; 7
    2b3c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <SPI_set_slave_addr>
    2b40:	82 e0       	ldi	r24, 0x02	; 2
    2b42:	6a e0       	ldi	r22, 0x0A	; 10
    2b44:	0e 94 33 11 	call	0x2266	; 0x2266 <SPI_transmit>
    2b48:	82 e0       	ldi	r24, 0x02	; 2
    2b4a:	62 eb       	ldi	r22, 0xB2	; 178
    2b4c:	0e 94 33 11 	call	0x2266	; 0x2266 <SPI_transmit>
    2b50:	18 ec       	ldi	r17, 0xC8	; 200
    2b52:	81 2f       	mov	r24, r17
    2b54:	8a 95       	dec	r24
    2b56:	f1 f7       	brne	.-4      	; 0x2b54 <ATTINY_get_sensors+0x2c>
    2b58:	82 e0       	ldi	r24, 0x02	; 2
    2b5a:	60 e0       	ldi	r22, 0x00	; 0
    2b5c:	0e 94 6f 1b 	call	0x36de	; 0x36de <SPI_receive>
    2b60:	08 2f       	mov	r16, r24
    2b62:	81 2f       	mov	r24, r17
    2b64:	8a 95       	dec	r24
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <ATTINY_get_sensors+0x3c>
    2b68:	82 e0       	ldi	r24, 0x02	; 2
    2b6a:	60 e0       	ldi	r22, 0x00	; 0
    2b6c:	0e 94 6f 1b 	call	0x36de	; 0x36de <SPI_receive>
    2b70:	1a 95       	dec	r17
    2b72:	f1 f7       	brne	.-4      	; 0x2b70 <ATTINY_get_sensors+0x48>
    2b74:	87 e0       	ldi	r24, 0x07	; 7
    2b76:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <SPI_set_slave_addr>
    2b7a:	88 e8       	ldi	r24, 0x88	; 136
    2b7c:	93 e1       	ldi	r25, 0x13	; 19
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <ATTINY_get_sensors+0x56>
    2b82:	80 2f       	mov	r24, r16
    2b84:	1f 91       	pop	r17
    2b86:	0f 91       	pop	r16
    2b88:	08 95       	ret

00002b8a <ATTINY_get_SW_state>:
    2b8a:	1f 93       	push	r17
    2b8c:	cf 93       	push	r28
    2b8e:	df 93       	push	r29
    2b90:	18 2f       	mov	r17, r24
    2b92:	80 91 cf 01 	lds	r24, 0x01CF
    2b96:	88 23       	and	r24, r24
    2b98:	41 f0       	breq	.+16     	; 0x2baa <ATTINY_get_SW_state+0x20>
    2b9a:	80 91 d9 01 	lds	r24, 0x01D9
    2b9e:	88 23       	and	r24, r24
    2ba0:	99 f0       	breq	.+38     	; 0x2bc8 <ATTINY_get_SW_state+0x3e>
    2ba2:	10 92 cf 01 	sts	0x01CF, r1
    2ba6:	10 92 d9 01 	sts	0x01D9, r1
    2baa:	0e 94 94 15 	call	0x2b28	; 0x2b28 <ATTINY_get_sensors>
    2bae:	80 93 ce 01 	sts	0x01CE, r24
    2bb2:	83 ed       	ldi	r24, 0xD3	; 211
    2bb4:	91 e0       	ldi	r25, 0x01	; 1
    2bb6:	61 e0       	ldi	r22, 0x01	; 1
    2bb8:	40 e0       	ldi	r20, 0x00	; 0
    2bba:	22 e3       	ldi	r18, 0x32	; 50
    2bbc:	30 e0       	ldi	r19, 0x00	; 0
    2bbe:	0e 94 83 16 	call	0x2d06	; 0x2d06 <TMRSRVC_new>
    2bc2:	81 e0       	ldi	r24, 0x01	; 1
    2bc4:	80 93 cf 01 	sts	0x01CF, r24
    2bc8:	90 91 ce 01 	lds	r25, 0x01CE
    2bcc:	a1 2f       	mov	r26, r17
    2bce:	b0 e0       	ldi	r27, 0x00	; 0
    2bd0:	ed 01       	movw	r28, r26
    2bd2:	cc 5a       	subi	r28, 0xAC	; 172
    2bd4:	de 4f       	sbci	r29, 0xFE	; 254
    2bd6:	88 81       	ld	r24, Y
    2bd8:	88 23       	and	r24, r24
    2bda:	69 f0       	breq	.+26     	; 0x2bf6 <ATTINY_get_SW_state+0x6c>
    2bdc:	fd 01       	movw	r30, r26
    2bde:	e9 5a       	subi	r30, 0xA9	; 169
    2be0:	fe 4f       	sbci	r31, 0xFE	; 254
    2be2:	80 81       	ld	r24, Z
    2be4:	98 23       	and	r25, r24
    2be6:	c1 f0       	breq	.+48     	; 0x2c18 <ATTINY_get_SW_state+0x8e>
    2be8:	fd 01       	movw	r30, r26
    2bea:	e0 53       	subi	r30, 0x30	; 48
    2bec:	fe 4f       	sbci	r31, 0xFE	; 254
    2bee:	81 e0       	ldi	r24, 0x01	; 1
    2bf0:	80 83       	st	Z, r24
    2bf2:	18 82       	st	Y, r1
    2bf4:	11 c0       	rjmp	.+34     	; 0x2c18 <ATTINY_get_SW_state+0x8e>
    2bf6:	fd 01       	movw	r30, r26
    2bf8:	e0 53       	subi	r30, 0x30	; 48
    2bfa:	fe 4f       	sbci	r31, 0xFE	; 254
    2bfc:	80 81       	ld	r24, Z
    2bfe:	81 11       	cpse	r24, r1
    2c00:	10 82       	st	Z, r1
    2c02:	fd 01       	movw	r30, r26
    2c04:	e9 5a       	subi	r30, 0xA9	; 169
    2c06:	fe 4f       	sbci	r31, 0xFE	; 254
    2c08:	80 81       	ld	r24, Z
    2c0a:	98 23       	and	r25, r24
    2c0c:	29 f4       	brne	.+10     	; 0x2c18 <ATTINY_get_SW_state+0x8e>
    2c0e:	fd 01       	movw	r30, r26
    2c10:	ec 5a       	subi	r30, 0xAC	; 172
    2c12:	fe 4f       	sbci	r31, 0xFE	; 254
    2c14:	81 e0       	ldi	r24, 0x01	; 1
    2c16:	80 83       	st	Z, r24
    2c18:	a0 53       	subi	r26, 0x30	; 48
    2c1a:	be 4f       	sbci	r27, 0xFE	; 254
    2c1c:	8c 91       	ld	r24, X
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	08 95       	ret

00002c26 <ATTINY_open>:
    2c26:	82 e0       	ldi	r24, 0x02	; 2
    2c28:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    2c2c:	88 23       	and	r24, r24
    2c2e:	19 f4       	brne	.+6      	; 0x2c36 <ATTINY_open+0x10>
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	82 e0       	ldi	r24, 0x02	; 2
    2c34:	08 95       	ret
    2c36:	10 92 92 04 	sts	0x0492, r1
    2c3a:	10 92 91 04 	sts	0x0491, r1
    2c3e:	10 92 94 04 	sts	0x0494, r1
    2c42:	10 92 93 04 	sts	0x0493, r1
    2c46:	10 92 96 04 	sts	0x0496, r1
    2c4a:	10 92 95 04 	sts	0x0495, r1
    2c4e:	10 92 98 04 	sts	0x0498, r1
    2c52:	10 92 97 04 	sts	0x0497, r1
    2c56:	10 92 9a 04 	sts	0x049A, r1
    2c5a:	10 92 99 04 	sts	0x0499, r1
    2c5e:	80 e9       	ldi	r24, 0x90	; 144
    2c60:	91 e0       	ldi	r25, 0x01	; 1
    2c62:	90 93 7e 04 	sts	0x047E, r25
    2c66:	80 93 7d 04 	sts	0x047D, r24
    2c6a:	90 93 80 04 	sts	0x0480, r25
    2c6e:	80 93 7f 04 	sts	0x047F, r24
    2c72:	90 93 82 04 	sts	0x0482, r25
    2c76:	80 93 81 04 	sts	0x0481, r24
    2c7a:	90 93 84 04 	sts	0x0484, r25
    2c7e:	80 93 83 04 	sts	0x0483, r24
    2c82:	90 93 86 04 	sts	0x0486, r25
    2c86:	80 93 85 04 	sts	0x0485, r24
    2c8a:	84 e3       	ldi	r24, 0x34	; 52
    2c8c:	98 e0       	ldi	r25, 0x08	; 8
    2c8e:	90 93 88 04 	sts	0x0488, r25
    2c92:	80 93 87 04 	sts	0x0487, r24
    2c96:	90 93 8a 04 	sts	0x048A, r25
    2c9a:	80 93 89 04 	sts	0x0489, r24
    2c9e:	90 93 8c 04 	sts	0x048C, r25
    2ca2:	80 93 8b 04 	sts	0x048B, r24
    2ca6:	90 93 8e 04 	sts	0x048E, r25
    2caa:	80 93 8d 04 	sts	0x048D, r24
    2cae:	90 93 90 04 	sts	0x0490, r25
    2cb2:	80 93 8f 04 	sts	0x048F, r24
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	61 e0       	ldi	r22, 0x01	; 1
    2cba:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    2cbe:	91 e0       	ldi	r25, 0x01	; 1
    2cc0:	81 e0       	ldi	r24, 0x01	; 1
    2cc2:	08 95       	ret

00002cc4 <TMRSRVC_delay>:
    2cc4:	df 93       	push	r29
    2cc6:	cf 93       	push	r28
    2cc8:	cd b7       	in	r28, 0x3d	; 61
    2cca:	de b7       	in	r29, 0x3e	; 62
    2ccc:	29 97       	sbiw	r28, 0x09	; 9
    2cce:	0f b6       	in	r0, 0x3f	; 63
    2cd0:	f8 94       	cli
    2cd2:	de bf       	out	0x3e, r29	; 62
    2cd4:	0f be       	out	0x3f, r0	; 63
    2cd6:	cd bf       	out	0x3d, r28	; 61
    2cd8:	9c 01       	movw	r18, r24
    2cda:	ce 01       	movw	r24, r28
    2cdc:	01 96       	adiw	r24, 0x01	; 1
    2cde:	61 e0       	ldi	r22, 0x01	; 1
    2ce0:	40 e0       	ldi	r20, 0x00	; 0
    2ce2:	0e 94 83 16 	call	0x2d06	; 0x2d06 <TMRSRVC_new>
    2ce6:	98 2f       	mov	r25, r24
    2ce8:	88 23       	and	r24, r24
    2cea:	19 f4       	brne	.+6      	; 0x2cf2 <TMRSRVC_delay+0x2e>
    2cec:	8f 81       	ldd	r24, Y+7	; 0x07
    2cee:	88 23       	and	r24, r24
    2cf0:	e9 f3       	breq	.-6      	; 0x2cec <TMRSRVC_delay+0x28>
    2cf2:	89 2f       	mov	r24, r25
    2cf4:	29 96       	adiw	r28, 0x09	; 9
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <TMRSRVC_new>:
    2d06:	ef 92       	push	r14
    2d08:	ff 92       	push	r15
    2d0a:	0f 93       	push	r16
    2d0c:	1f 93       	push	r17
    2d0e:	cf 93       	push	r28
    2d10:	df 93       	push	r29
    2d12:	ec 01       	movw	r28, r24
    2d14:	f6 2e       	mov	r15, r22
    2d16:	e4 2e       	mov	r14, r20
    2d18:	89 01       	movw	r16, r18
    2d1a:	88 e0       	ldi	r24, 0x08	; 8
    2d1c:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    2d20:	81 30       	cpi	r24, 0x01	; 1
    2d22:	11 f0       	breq	.+4      	; 0x2d28 <TMRSRVC_new+0x22>
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	26 c0       	rjmp	.+76     	; 0x2d74 <TMRSRVC_new+0x6e>
    2d28:	84 e0       	ldi	r24, 0x04	; 4
    2d2a:	90 e0       	ldi	r25, 0x00	; 0
    2d2c:	0e 94 3f 2a 	call	0x547e	; 0x547e <malloc>
    2d30:	fc 01       	movw	r30, r24
    2d32:	00 97       	sbiw	r24, 0x00	; 0
    2d34:	11 f4       	brne	.+4      	; 0x2d3a <TMRSRVC_new+0x34>
    2d36:	82 e0       	ldi	r24, 0x02	; 2
    2d38:	1d c0       	rjmp	.+58     	; 0x2d74 <TMRSRVC_new+0x6e>
    2d3a:	f9 82       	std	Y+1, r15	; 0x01
    2d3c:	f0 fc       	sbrc	r15, 0
    2d3e:	1e 82       	std	Y+6, r1	; 0x06
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	e8 16       	cp	r14, r24
    2d44:	19 f4       	brne	.+6      	; 0x2d4c <TMRSRVC_new+0x46>
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	84 60       	ori	r24, 0x04	; 4
    2d4a:	89 83       	std	Y+1, r24	; 0x01
    2d4c:	89 81       	ldd	r24, Y+1	; 0x01
    2d4e:	88 60       	ori	r24, 0x08	; 8
    2d50:	89 83       	std	Y+1, r24	; 0x01
    2d52:	1b 83       	std	Y+3, r17	; 0x03
    2d54:	0a 83       	std	Y+2, r16	; 0x02
    2d56:	1d 83       	std	Y+5, r17	; 0x05
    2d58:	0c 83       	std	Y+4, r16	; 0x04
    2d5a:	d1 83       	std	Z+1, r29	; 0x01
    2d5c:	c0 83       	st	Z, r28
    2d5e:	13 82       	std	Z+3, r1	; 0x03
    2d60:	12 82       	std	Z+2, r1	; 0x02
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	80 93 3c 02 	sts	0x023C, r24
    2d68:	cf 01       	movw	r24, r30
    2d6a:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <TMRSRVC_insert>
    2d6e:	10 92 3c 02 	sts	0x023C, r1
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	df 91       	pop	r29
    2d76:	cf 91       	pop	r28
    2d78:	1f 91       	pop	r17
    2d7a:	0f 91       	pop	r16
    2d7c:	ff 90       	pop	r15
    2d7e:	ef 90       	pop	r14
    2d80:	08 95       	ret

00002d82 <I2C_MSTR_get>:
    2d82:	fc 01       	movw	r30, r24
    2d84:	80 91 9e 04 	lds	r24, 0x049E
    2d88:	81 30       	cpi	r24, 0x01	; 1
    2d8a:	11 f0       	breq	.+4      	; 0x2d90 <I2C_MSTR_get+0xe>
    2d8c:	85 e0       	ldi	r24, 0x05	; 5
    2d8e:	08 95       	ret
    2d90:	80 91 9f 04 	lds	r24, 0x049F
    2d94:	81 30       	cpi	r24, 0x01	; 1
    2d96:	11 f0       	breq	.+4      	; 0x2d9c <I2C_MSTR_get+0x1a>
    2d98:	8a e0       	ldi	r24, 0x0A	; 10
    2d9a:	08 95       	ret
    2d9c:	61 30       	cpi	r22, 0x01	; 1
    2d9e:	11 f4       	brne	.+4      	; 0x2da4 <I2C_MSTR_get+0x22>
    2da0:	84 ec       	ldi	r24, 0xC4	; 196
    2da2:	01 c0       	rjmp	.+2      	; 0x2da6 <I2C_MSTR_get+0x24>
    2da4:	84 e8       	ldi	r24, 0x84	; 132
    2da6:	80 93 bc 00 	sts	0x00BC, r24
    2daa:	80 91 bc 00 	lds	r24, 0x00BC
    2dae:	87 ff       	sbrs	r24, 7
    2db0:	fc cf       	rjmp	.-8      	; 0x2daa <I2C_MSTR_get+0x28>
    2db2:	61 30       	cpi	r22, 0x01	; 1
    2db4:	31 f4       	brne	.+12     	; 0x2dc2 <I2C_MSTR_get+0x40>
    2db6:	80 91 b9 00 	lds	r24, 0x00B9
    2dba:	88 7f       	andi	r24, 0xF8	; 248
    2dbc:	80 35       	cpi	r24, 0x50	; 80
    2dbe:	59 f4       	brne	.+22     	; 0x2dd6 <I2C_MSTR_get+0x54>
    2dc0:	05 c0       	rjmp	.+10     	; 0x2dcc <I2C_MSTR_get+0x4a>
    2dc2:	80 91 b9 00 	lds	r24, 0x00B9
    2dc6:	88 7f       	andi	r24, 0xF8	; 248
    2dc8:	88 35       	cpi	r24, 0x58	; 88
    2dca:	29 f4       	brne	.+10     	; 0x2dd6 <I2C_MSTR_get+0x54>
    2dcc:	80 91 bb 00 	lds	r24, 0x00BB
    2dd0:	80 83       	st	Z, r24
    2dd2:	80 e0       	ldi	r24, 0x00	; 0
    2dd4:	08 95       	ret
    2dd6:	82 e0       	ldi	r24, 0x02	; 2
    2dd8:	08 95       	ret

00002dda <I2C_MSTR_send>:
    2dda:	98 2f       	mov	r25, r24
    2ddc:	80 91 9e 04 	lds	r24, 0x049E
    2de0:	81 30       	cpi	r24, 0x01	; 1
    2de2:	11 f0       	breq	.+4      	; 0x2de8 <I2C_MSTR_send+0xe>
    2de4:	85 e0       	ldi	r24, 0x05	; 5
    2de6:	08 95       	ret
    2de8:	80 91 9f 04 	lds	r24, 0x049F
    2dec:	81 30       	cpi	r24, 0x01	; 1
    2dee:	11 f0       	breq	.+4      	; 0x2df4 <I2C_MSTR_send+0x1a>
    2df0:	8a e0       	ldi	r24, 0x0A	; 10
    2df2:	08 95       	ret
    2df4:	90 93 bb 00 	sts	0x00BB, r25
    2df8:	84 e8       	ldi	r24, 0x84	; 132
    2dfa:	80 93 bc 00 	sts	0x00BC, r24
    2dfe:	80 91 bc 00 	lds	r24, 0x00BC
    2e02:	87 ff       	sbrs	r24, 7
    2e04:	fc cf       	rjmp	.-8      	; 0x2dfe <I2C_MSTR_send+0x24>
    2e06:	80 91 b9 00 	lds	r24, 0x00B9
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	88 7f       	andi	r24, 0xF8	; 248
    2e0e:	90 70       	andi	r25, 0x00	; 0
    2e10:	88 32       	cpi	r24, 0x28	; 40
    2e12:	91 05       	cpc	r25, r1
    2e14:	21 f0       	breq	.+8      	; 0x2e1e <I2C_MSTR_send+0x44>
    2e16:	c0 97       	sbiw	r24, 0x30	; 48
    2e18:	21 f4       	brne	.+8      	; 0x2e22 <I2C_MSTR_send+0x48>
    2e1a:	83 e0       	ldi	r24, 0x03	; 3
    2e1c:	08 95       	ret
    2e1e:	80 e0       	ldi	r24, 0x00	; 0
    2e20:	08 95       	ret
    2e22:	8c e0       	ldi	r24, 0x0C	; 12
    2e24:	08 95       	ret

00002e26 <I2C_MSTR_start>:
    2e26:	98 2f       	mov	r25, r24
    2e28:	20 91 9e 04 	lds	r18, 0x049E
    2e2c:	21 30       	cpi	r18, 0x01	; 1
    2e2e:	11 f0       	breq	.+4      	; 0x2e34 <I2C_MSTR_start+0xe>
    2e30:	85 e0       	ldi	r24, 0x05	; 5
    2e32:	08 95       	ret
    2e34:	80 91 a0 04 	lds	r24, 0x04A0
    2e38:	81 30       	cpi	r24, 0x01	; 1
    2e3a:	11 f4       	brne	.+4      	; 0x2e40 <I2C_MSTR_start+0x1a>
    2e3c:	89 e0       	ldi	r24, 0x09	; 9
    2e3e:	08 95       	ret
    2e40:	20 93 9f 04 	sts	0x049F, r18
    2e44:	84 ea       	ldi	r24, 0xA4	; 164
    2e46:	80 93 bc 00 	sts	0x00BC, r24
    2e4a:	80 91 bc 00 	lds	r24, 0x00BC
    2e4e:	87 ff       	sbrs	r24, 7
    2e50:	fc cf       	rjmp	.-8      	; 0x2e4a <I2C_MSTR_start+0x24>
    2e52:	80 91 b9 00 	lds	r24, 0x00B9
    2e56:	88 7f       	andi	r24, 0xF8	; 248
    2e58:	88 30       	cpi	r24, 0x08	; 8
    2e5a:	39 f0       	breq	.+14     	; 0x2e6a <I2C_MSTR_start+0x44>
    2e5c:	80 91 b9 00 	lds	r24, 0x00B9
    2e60:	88 7f       	andi	r24, 0xF8	; 248
    2e62:	80 31       	cpi	r24, 0x10	; 16
    2e64:	11 f0       	breq	.+4      	; 0x2e6a <I2C_MSTR_start+0x44>
    2e66:	81 e0       	ldi	r24, 0x01	; 1
    2e68:	08 95       	ret
    2e6a:	61 30       	cpi	r22, 0x01	; 1
    2e6c:	19 f4       	brne	.+6      	; 0x2e74 <I2C_MSTR_start+0x4e>
    2e6e:	99 0f       	add	r25, r25
    2e70:	91 60       	ori	r25, 0x01	; 1
    2e72:	03 c0       	rjmp	.+6      	; 0x2e7a <I2C_MSTR_start+0x54>
    2e74:	66 23       	and	r22, r22
    2e76:	19 f4       	brne	.+6      	; 0x2e7e <I2C_MSTR_start+0x58>
    2e78:	99 0f       	add	r25, r25
    2e7a:	90 93 bb 00 	sts	0x00BB, r25
    2e7e:	84 e8       	ldi	r24, 0x84	; 132
    2e80:	80 93 bc 00 	sts	0x00BC, r24
    2e84:	80 91 bc 00 	lds	r24, 0x00BC
    2e88:	87 ff       	sbrs	r24, 7
    2e8a:	fc cf       	rjmp	.-8      	; 0x2e84 <I2C_MSTR_start+0x5e>
    2e8c:	61 30       	cpi	r22, 0x01	; 1
    2e8e:	31 f4       	brne	.+12     	; 0x2e9c <I2C_MSTR_start+0x76>
    2e90:	80 91 b9 00 	lds	r24, 0x00B9
    2e94:	88 7f       	andi	r24, 0xF8	; 248
    2e96:	80 34       	cpi	r24, 0x40	; 64
    2e98:	41 f4       	brne	.+16     	; 0x2eaa <I2C_MSTR_start+0x84>
    2e9a:	09 c0       	rjmp	.+18     	; 0x2eae <I2C_MSTR_start+0x88>
    2e9c:	66 23       	and	r22, r22
    2e9e:	39 f4       	brne	.+14     	; 0x2eae <I2C_MSTR_start+0x88>
    2ea0:	80 91 b9 00 	lds	r24, 0x00B9
    2ea4:	88 7f       	andi	r24, 0xF8	; 248
    2ea6:	88 31       	cpi	r24, 0x18	; 24
    2ea8:	11 f0       	breq	.+4      	; 0x2eae <I2C_MSTR_start+0x88>
    2eaa:	82 e0       	ldi	r24, 0x02	; 2
    2eac:	08 95       	ret
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	08 95       	ret

00002eb2 <I2C_MSTR_stop>:
    2eb2:	80 91 9f 04 	lds	r24, 0x049F
    2eb6:	81 30       	cpi	r24, 0x01	; 1
    2eb8:	11 f0       	breq	.+4      	; 0x2ebe <I2C_MSTR_stop+0xc>
    2eba:	8a e0       	ldi	r24, 0x0A	; 10
    2ebc:	08 95       	ret
    2ebe:	80 91 a1 04 	lds	r24, 0x04A1
    2ec2:	81 30       	cpi	r24, 0x01	; 1
    2ec4:	29 f4       	brne	.+10     	; 0x2ed0 <I2C_MSTR_stop+0x1e>
    2ec6:	85 e9       	ldi	r24, 0x95	; 149
    2ec8:	80 93 bc 00 	sts	0x00BC, r24
    2ecc:	80 e0       	ldi	r24, 0x00	; 0
    2ece:	08 95       	ret
    2ed0:	84 e9       	ldi	r24, 0x94	; 148
    2ed2:	80 93 bc 00 	sts	0x00BC, r24
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	08 95       	ret

00002eda <I2C_open>:
    2eda:	82 e1       	ldi	r24, 0x12	; 18
    2edc:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    2ee0:	88 23       	and	r24, r24
    2ee2:	b1 f4       	brne	.+44     	; 0x2f10 <I2C_open+0x36>
    2ee4:	10 92 9e 04 	sts	0x049E, r1
    2ee8:	10 92 9f 04 	sts	0x049F, r1
    2eec:	10 92 a0 04 	sts	0x04A0, r1
    2ef0:	10 92 a1 04 	sts	0x04A1, r1
    2ef4:	10 92 a2 04 	sts	0x04A2, r1
    2ef8:	0e 94 cf 1d 	call	0x3b9e	; 0x3b9e <__I2C_init>
    2efc:	87 e1       	ldi	r24, 0x17	; 23
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <I2C_set_BRG>
    2f04:	0e 94 c5 1d 	call	0x3b8a	; 0x3b8a <I2C_enable>
    2f08:	82 e1       	ldi	r24, 0x12	; 18
    2f0a:	61 e0       	ldi	r22, 0x01	; 1
    2f0c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    2f10:	82 e1       	ldi	r24, 0x12	; 18
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	08 95       	ret

00002f16 <I2C_set_BRG>:
    2f16:	63 70       	andi	r22, 0x03	; 3
    2f18:	60 93 b9 00 	sts	0x00B9, r22
    2f1c:	80 93 b8 00 	sts	0x00B8, r24
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	80 93 9e 04 	sts	0x049E, r24
    2f26:	08 95       	ret

00002f28 <__ADC_init>:
    2f28:	8f e1       	ldi	r24, 0x1F	; 31
    2f2a:	80 93 7c 00 	sts	0x007C, r24
    2f2e:	ea e7       	ldi	r30, 0x7A	; 122
    2f30:	f0 e0       	ldi	r31, 0x00	; 0
    2f32:	87 e0       	ldi	r24, 0x07	; 7
    2f34:	80 83       	st	Z, r24
    2f36:	80 81       	ld	r24, Z
    2f38:	80 68       	ori	r24, 0x80	; 128
    2f3a:	80 83       	st	Z, r24
    2f3c:	08 95       	ret

00002f3e <CBOT_init>:
    2f3e:	0e 94 10 1d 	call	0x3a20	; 0x3a20 <SYS_init>
    2f42:	0e 94 d1 1a 	call	0x35a2	; 0x35a2 <ATMEGA_open>
    2f46:	0e 94 01 1a 	call	0x3402	; 0x3402 <ISR_open>
    2f4a:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <TMRSRVC_open>
    2f4e:	0e 94 36 1b 	call	0x366c	; 0x366c <SPI_open>
    2f52:	0e 94 13 16 	call	0x2c26	; 0x2c26 <ATTINY_open>
    2f56:	78 94       	sei
    2f58:	08 95       	ret

00002f5a <CBOT_ISR_init>:
    2f5a:	00 00       	nop
    2f5c:	08 95       	ret

00002f5e <__vector_16>:
    2f5e:	1f 92       	push	r1
    2f60:	0f 92       	push	r0
    2f62:	0f b6       	in	r0, 0x3f	; 63
    2f64:	0f 92       	push	r0
    2f66:	11 24       	eor	r1, r1
    2f68:	2f 93       	push	r18
    2f6a:	3f 93       	push	r19
    2f6c:	4f 93       	push	r20
    2f6e:	5f 93       	push	r21
    2f70:	6f 93       	push	r22
    2f72:	7f 93       	push	r23
    2f74:	8f 93       	push	r24
    2f76:	9f 93       	push	r25
    2f78:	af 93       	push	r26
    2f7a:	bf 93       	push	r27
    2f7c:	ef 93       	push	r30
    2f7e:	ff 93       	push	r31
    2f80:	e0 91 fc 01 	lds	r30, 0x01FC
    2f84:	f0 91 fd 01 	lds	r31, 0x01FD
    2f88:	30 97       	sbiw	r30, 0x00	; 0
    2f8a:	09 f0       	breq	.+2      	; 0x2f8e <__vector_16+0x30>
    2f8c:	09 95       	icall
    2f8e:	ff 91       	pop	r31
    2f90:	ef 91       	pop	r30
    2f92:	bf 91       	pop	r27
    2f94:	af 91       	pop	r26
    2f96:	9f 91       	pop	r25
    2f98:	8f 91       	pop	r24
    2f9a:	7f 91       	pop	r23
    2f9c:	6f 91       	pop	r22
    2f9e:	5f 91       	pop	r21
    2fa0:	4f 91       	pop	r20
    2fa2:	3f 91       	pop	r19
    2fa4:	2f 91       	pop	r18
    2fa6:	0f 90       	pop	r0
    2fa8:	0f be       	out	0x3f, r0	; 63
    2faa:	0f 90       	pop	r0
    2fac:	1f 90       	pop	r1
    2fae:	18 95       	reti

00002fb0 <__vector_17>:
    2fb0:	1f 92       	push	r1
    2fb2:	0f 92       	push	r0
    2fb4:	0f b6       	in	r0, 0x3f	; 63
    2fb6:	0f 92       	push	r0
    2fb8:	11 24       	eor	r1, r1
    2fba:	2f 93       	push	r18
    2fbc:	3f 93       	push	r19
    2fbe:	4f 93       	push	r20
    2fc0:	5f 93       	push	r21
    2fc2:	6f 93       	push	r22
    2fc4:	7f 93       	push	r23
    2fc6:	8f 93       	push	r24
    2fc8:	9f 93       	push	r25
    2fca:	af 93       	push	r26
    2fcc:	bf 93       	push	r27
    2fce:	ef 93       	push	r30
    2fd0:	ff 93       	push	r31
    2fd2:	e0 91 fe 01 	lds	r30, 0x01FE
    2fd6:	f0 91 ff 01 	lds	r31, 0x01FF
    2fda:	30 97       	sbiw	r30, 0x00	; 0
    2fdc:	09 f0       	breq	.+2      	; 0x2fe0 <__vector_17+0x30>
    2fde:	09 95       	icall
    2fe0:	ff 91       	pop	r31
    2fe2:	ef 91       	pop	r30
    2fe4:	bf 91       	pop	r27
    2fe6:	af 91       	pop	r26
    2fe8:	9f 91       	pop	r25
    2fea:	8f 91       	pop	r24
    2fec:	7f 91       	pop	r23
    2fee:	6f 91       	pop	r22
    2ff0:	5f 91       	pop	r21
    2ff2:	4f 91       	pop	r20
    2ff4:	3f 91       	pop	r19
    2ff6:	2f 91       	pop	r18
    2ff8:	0f 90       	pop	r0
    2ffa:	0f be       	out	0x3f, r0	; 63
    2ffc:	0f 90       	pop	r0
    2ffe:	1f 90       	pop	r1
    3000:	18 95       	reti

00003002 <__vector_18>:
    3002:	1f 92       	push	r1
    3004:	0f 92       	push	r0
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	0f 92       	push	r0
    300a:	11 24       	eor	r1, r1
    300c:	2f 93       	push	r18
    300e:	3f 93       	push	r19
    3010:	4f 93       	push	r20
    3012:	5f 93       	push	r21
    3014:	6f 93       	push	r22
    3016:	7f 93       	push	r23
    3018:	8f 93       	push	r24
    301a:	9f 93       	push	r25
    301c:	af 93       	push	r26
    301e:	bf 93       	push	r27
    3020:	ef 93       	push	r30
    3022:	ff 93       	push	r31
    3024:	e0 91 00 02 	lds	r30, 0x0200
    3028:	f0 91 01 02 	lds	r31, 0x0201
    302c:	30 97       	sbiw	r30, 0x00	; 0
    302e:	09 f0       	breq	.+2      	; 0x3032 <__vector_18+0x30>
    3030:	09 95       	icall
    3032:	ff 91       	pop	r31
    3034:	ef 91       	pop	r30
    3036:	bf 91       	pop	r27
    3038:	af 91       	pop	r26
    303a:	9f 91       	pop	r25
    303c:	8f 91       	pop	r24
    303e:	7f 91       	pop	r23
    3040:	6f 91       	pop	r22
    3042:	5f 91       	pop	r21
    3044:	4f 91       	pop	r20
    3046:	3f 91       	pop	r19
    3048:	2f 91       	pop	r18
    304a:	0f 90       	pop	r0
    304c:	0f be       	out	0x3f, r0	; 63
    304e:	0f 90       	pop	r0
    3050:	1f 90       	pop	r1
    3052:	18 95       	reti

00003054 <__vector_9>:
    3054:	1f 92       	push	r1
    3056:	0f 92       	push	r0
    3058:	0f b6       	in	r0, 0x3f	; 63
    305a:	0f 92       	push	r0
    305c:	11 24       	eor	r1, r1
    305e:	2f 93       	push	r18
    3060:	3f 93       	push	r19
    3062:	4f 93       	push	r20
    3064:	5f 93       	push	r21
    3066:	6f 93       	push	r22
    3068:	7f 93       	push	r23
    306a:	8f 93       	push	r24
    306c:	9f 93       	push	r25
    306e:	af 93       	push	r26
    3070:	bf 93       	push	r27
    3072:	ef 93       	push	r30
    3074:	ff 93       	push	r31
    3076:	e0 91 ee 01 	lds	r30, 0x01EE
    307a:	f0 91 ef 01 	lds	r31, 0x01EF
    307e:	30 97       	sbiw	r30, 0x00	; 0
    3080:	09 f0       	breq	.+2      	; 0x3084 <__vector_9+0x30>
    3082:	09 95       	icall
    3084:	ff 91       	pop	r31
    3086:	ef 91       	pop	r30
    3088:	bf 91       	pop	r27
    308a:	af 91       	pop	r26
    308c:	9f 91       	pop	r25
    308e:	8f 91       	pop	r24
    3090:	7f 91       	pop	r23
    3092:	6f 91       	pop	r22
    3094:	5f 91       	pop	r21
    3096:	4f 91       	pop	r20
    3098:	3f 91       	pop	r19
    309a:	2f 91       	pop	r18
    309c:	0f 90       	pop	r0
    309e:	0f be       	out	0x3f, r0	; 63
    30a0:	0f 90       	pop	r0
    30a2:	1f 90       	pop	r1
    30a4:	18 95       	reti

000030a6 <__vector_10>:
    30a6:	1f 92       	push	r1
    30a8:	0f 92       	push	r0
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	0f 92       	push	r0
    30ae:	11 24       	eor	r1, r1
    30b0:	2f 93       	push	r18
    30b2:	3f 93       	push	r19
    30b4:	4f 93       	push	r20
    30b6:	5f 93       	push	r21
    30b8:	6f 93       	push	r22
    30ba:	7f 93       	push	r23
    30bc:	8f 93       	push	r24
    30be:	9f 93       	push	r25
    30c0:	af 93       	push	r26
    30c2:	bf 93       	push	r27
    30c4:	ef 93       	push	r30
    30c6:	ff 93       	push	r31
    30c8:	e0 91 f0 01 	lds	r30, 0x01F0
    30cc:	f0 91 f1 01 	lds	r31, 0x01F1
    30d0:	30 97       	sbiw	r30, 0x00	; 0
    30d2:	09 f0       	breq	.+2      	; 0x30d6 <__vector_10+0x30>
    30d4:	09 95       	icall
    30d6:	ff 91       	pop	r31
    30d8:	ef 91       	pop	r30
    30da:	bf 91       	pop	r27
    30dc:	af 91       	pop	r26
    30de:	9f 91       	pop	r25
    30e0:	8f 91       	pop	r24
    30e2:	7f 91       	pop	r23
    30e4:	6f 91       	pop	r22
    30e6:	5f 91       	pop	r21
    30e8:	4f 91       	pop	r20
    30ea:	3f 91       	pop	r19
    30ec:	2f 91       	pop	r18
    30ee:	0f 90       	pop	r0
    30f0:	0f be       	out	0x3f, r0	; 63
    30f2:	0f 90       	pop	r0
    30f4:	1f 90       	pop	r1
    30f6:	18 95       	reti

000030f8 <__vector_11>:
    30f8:	1f 92       	push	r1
    30fa:	0f 92       	push	r0
    30fc:	0f b6       	in	r0, 0x3f	; 63
    30fe:	0f 92       	push	r0
    3100:	11 24       	eor	r1, r1
    3102:	2f 93       	push	r18
    3104:	3f 93       	push	r19
    3106:	4f 93       	push	r20
    3108:	5f 93       	push	r21
    310a:	6f 93       	push	r22
    310c:	7f 93       	push	r23
    310e:	8f 93       	push	r24
    3110:	9f 93       	push	r25
    3112:	af 93       	push	r26
    3114:	bf 93       	push	r27
    3116:	ef 93       	push	r30
    3118:	ff 93       	push	r31
    311a:	e0 91 f2 01 	lds	r30, 0x01F2
    311e:	f0 91 f3 01 	lds	r31, 0x01F3
    3122:	30 97       	sbiw	r30, 0x00	; 0
    3124:	09 f0       	breq	.+2      	; 0x3128 <__vector_11+0x30>
    3126:	09 95       	icall
    3128:	ff 91       	pop	r31
    312a:	ef 91       	pop	r30
    312c:	bf 91       	pop	r27
    312e:	af 91       	pop	r26
    3130:	9f 91       	pop	r25
    3132:	8f 91       	pop	r24
    3134:	7f 91       	pop	r23
    3136:	6f 91       	pop	r22
    3138:	5f 91       	pop	r21
    313a:	4f 91       	pop	r20
    313c:	3f 91       	pop	r19
    313e:	2f 91       	pop	r18
    3140:	0f 90       	pop	r0
    3142:	0f be       	out	0x3f, r0	; 63
    3144:	0f 90       	pop	r0
    3146:	1f 90       	pop	r1
    3148:	18 95       	reti

0000314a <__vector_13>:
    314a:	1f 92       	push	r1
    314c:	0f 92       	push	r0
    314e:	0f b6       	in	r0, 0x3f	; 63
    3150:	0f 92       	push	r0
    3152:	11 24       	eor	r1, r1
    3154:	2f 93       	push	r18
    3156:	3f 93       	push	r19
    3158:	4f 93       	push	r20
    315a:	5f 93       	push	r21
    315c:	6f 93       	push	r22
    315e:	7f 93       	push	r23
    3160:	8f 93       	push	r24
    3162:	9f 93       	push	r25
    3164:	af 93       	push	r26
    3166:	bf 93       	push	r27
    3168:	ef 93       	push	r30
    316a:	ff 93       	push	r31
    316c:	e0 91 f6 01 	lds	r30, 0x01F6
    3170:	f0 91 f7 01 	lds	r31, 0x01F7
    3174:	30 97       	sbiw	r30, 0x00	; 0
    3176:	09 f0       	breq	.+2      	; 0x317a <__vector_13+0x30>
    3178:	09 95       	icall
    317a:	ff 91       	pop	r31
    317c:	ef 91       	pop	r30
    317e:	bf 91       	pop	r27
    3180:	af 91       	pop	r26
    3182:	9f 91       	pop	r25
    3184:	8f 91       	pop	r24
    3186:	7f 91       	pop	r23
    3188:	6f 91       	pop	r22
    318a:	5f 91       	pop	r21
    318c:	4f 91       	pop	r20
    318e:	3f 91       	pop	r19
    3190:	2f 91       	pop	r18
    3192:	0f 90       	pop	r0
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	0f 90       	pop	r0
    3198:	1f 90       	pop	r1
    319a:	18 95       	reti

0000319c <__vector_14>:
    319c:	1f 92       	push	r1
    319e:	0f 92       	push	r0
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	0f 92       	push	r0
    31a4:	11 24       	eor	r1, r1
    31a6:	2f 93       	push	r18
    31a8:	3f 93       	push	r19
    31aa:	4f 93       	push	r20
    31ac:	5f 93       	push	r21
    31ae:	6f 93       	push	r22
    31b0:	7f 93       	push	r23
    31b2:	8f 93       	push	r24
    31b4:	9f 93       	push	r25
    31b6:	af 93       	push	r26
    31b8:	bf 93       	push	r27
    31ba:	ef 93       	push	r30
    31bc:	ff 93       	push	r31
    31be:	e0 91 f8 01 	lds	r30, 0x01F8
    31c2:	f0 91 f9 01 	lds	r31, 0x01F9
    31c6:	30 97       	sbiw	r30, 0x00	; 0
    31c8:	09 f0       	breq	.+2      	; 0x31cc <__vector_14+0x30>
    31ca:	09 95       	icall
    31cc:	ff 91       	pop	r31
    31ce:	ef 91       	pop	r30
    31d0:	bf 91       	pop	r27
    31d2:	af 91       	pop	r26
    31d4:	9f 91       	pop	r25
    31d6:	8f 91       	pop	r24
    31d8:	7f 91       	pop	r23
    31da:	6f 91       	pop	r22
    31dc:	5f 91       	pop	r21
    31de:	4f 91       	pop	r20
    31e0:	3f 91       	pop	r19
    31e2:	2f 91       	pop	r18
    31e4:	0f 90       	pop	r0
    31e6:	0f be       	out	0x3f, r0	; 63
    31e8:	0f 90       	pop	r0
    31ea:	1f 90       	pop	r1
    31ec:	18 95       	reti

000031ee <__vector_12>:
    31ee:	1f 92       	push	r1
    31f0:	0f 92       	push	r0
    31f2:	0f b6       	in	r0, 0x3f	; 63
    31f4:	0f 92       	push	r0
    31f6:	11 24       	eor	r1, r1
    31f8:	2f 93       	push	r18
    31fa:	3f 93       	push	r19
    31fc:	4f 93       	push	r20
    31fe:	5f 93       	push	r21
    3200:	6f 93       	push	r22
    3202:	7f 93       	push	r23
    3204:	8f 93       	push	r24
    3206:	9f 93       	push	r25
    3208:	af 93       	push	r26
    320a:	bf 93       	push	r27
    320c:	ef 93       	push	r30
    320e:	ff 93       	push	r31
    3210:	e0 91 f4 01 	lds	r30, 0x01F4
    3214:	f0 91 f5 01 	lds	r31, 0x01F5
    3218:	30 97       	sbiw	r30, 0x00	; 0
    321a:	09 f0       	breq	.+2      	; 0x321e <__vector_12+0x30>
    321c:	09 95       	icall
    321e:	ff 91       	pop	r31
    3220:	ef 91       	pop	r30
    3222:	bf 91       	pop	r27
    3224:	af 91       	pop	r26
    3226:	9f 91       	pop	r25
    3228:	8f 91       	pop	r24
    322a:	7f 91       	pop	r23
    322c:	6f 91       	pop	r22
    322e:	5f 91       	pop	r21
    3230:	4f 91       	pop	r20
    3232:	3f 91       	pop	r19
    3234:	2f 91       	pop	r18
    3236:	0f 90       	pop	r0
    3238:	0f be       	out	0x3f, r0	; 63
    323a:	0f 90       	pop	r0
    323c:	1f 90       	pop	r1
    323e:	18 95       	reti

00003240 <__vector_15>:
    3240:	1f 92       	push	r1
    3242:	0f 92       	push	r0
    3244:	0f b6       	in	r0, 0x3f	; 63
    3246:	0f 92       	push	r0
    3248:	11 24       	eor	r1, r1
    324a:	2f 93       	push	r18
    324c:	3f 93       	push	r19
    324e:	4f 93       	push	r20
    3250:	5f 93       	push	r21
    3252:	6f 93       	push	r22
    3254:	7f 93       	push	r23
    3256:	8f 93       	push	r24
    3258:	9f 93       	push	r25
    325a:	af 93       	push	r26
    325c:	bf 93       	push	r27
    325e:	ef 93       	push	r30
    3260:	ff 93       	push	r31
    3262:	e0 91 fa 01 	lds	r30, 0x01FA
    3266:	f0 91 fb 01 	lds	r31, 0x01FB
    326a:	30 97       	sbiw	r30, 0x00	; 0
    326c:	09 f0       	breq	.+2      	; 0x3270 <__vector_15+0x30>
    326e:	09 95       	icall
    3270:	ff 91       	pop	r31
    3272:	ef 91       	pop	r30
    3274:	bf 91       	pop	r27
    3276:	af 91       	pop	r26
    3278:	9f 91       	pop	r25
    327a:	8f 91       	pop	r24
    327c:	7f 91       	pop	r23
    327e:	6f 91       	pop	r22
    3280:	5f 91       	pop	r21
    3282:	4f 91       	pop	r20
    3284:	3f 91       	pop	r19
    3286:	2f 91       	pop	r18
    3288:	0f 90       	pop	r0
    328a:	0f be       	out	0x3f, r0	; 63
    328c:	0f 90       	pop	r0
    328e:	1f 90       	pop	r1
    3290:	18 95       	reti

00003292 <__vector_4>:
    3292:	1f 92       	push	r1
    3294:	0f 92       	push	r0
    3296:	0f b6       	in	r0, 0x3f	; 63
    3298:	0f 92       	push	r0
    329a:	11 24       	eor	r1, r1
    329c:	2f 93       	push	r18
    329e:	3f 93       	push	r19
    32a0:	4f 93       	push	r20
    32a2:	5f 93       	push	r21
    32a4:	6f 93       	push	r22
    32a6:	7f 93       	push	r23
    32a8:	8f 93       	push	r24
    32aa:	9f 93       	push	r25
    32ac:	af 93       	push	r26
    32ae:	bf 93       	push	r27
    32b0:	ef 93       	push	r30
    32b2:	ff 93       	push	r31
    32b4:	e0 91 e4 01 	lds	r30, 0x01E4
    32b8:	f0 91 e5 01 	lds	r31, 0x01E5
    32bc:	30 97       	sbiw	r30, 0x00	; 0
    32be:	09 f0       	breq	.+2      	; 0x32c2 <__vector_4+0x30>
    32c0:	09 95       	icall
    32c2:	ff 91       	pop	r31
    32c4:	ef 91       	pop	r30
    32c6:	bf 91       	pop	r27
    32c8:	af 91       	pop	r26
    32ca:	9f 91       	pop	r25
    32cc:	8f 91       	pop	r24
    32ce:	7f 91       	pop	r23
    32d0:	6f 91       	pop	r22
    32d2:	5f 91       	pop	r21
    32d4:	4f 91       	pop	r20
    32d6:	3f 91       	pop	r19
    32d8:	2f 91       	pop	r18
    32da:	0f 90       	pop	r0
    32dc:	0f be       	out	0x3f, r0	; 63
    32de:	0f 90       	pop	r0
    32e0:	1f 90       	pop	r1
    32e2:	18 95       	reti

000032e4 <__vector_5>:
    32e4:	1f 92       	push	r1
    32e6:	0f 92       	push	r0
    32e8:	0f b6       	in	r0, 0x3f	; 63
    32ea:	0f 92       	push	r0
    32ec:	11 24       	eor	r1, r1
    32ee:	2f 93       	push	r18
    32f0:	3f 93       	push	r19
    32f2:	4f 93       	push	r20
    32f4:	5f 93       	push	r21
    32f6:	6f 93       	push	r22
    32f8:	7f 93       	push	r23
    32fa:	8f 93       	push	r24
    32fc:	9f 93       	push	r25
    32fe:	af 93       	push	r26
    3300:	bf 93       	push	r27
    3302:	ef 93       	push	r30
    3304:	ff 93       	push	r31
    3306:	e0 91 e6 01 	lds	r30, 0x01E6
    330a:	f0 91 e7 01 	lds	r31, 0x01E7
    330e:	30 97       	sbiw	r30, 0x00	; 0
    3310:	09 f0       	breq	.+2      	; 0x3314 <__vector_5+0x30>
    3312:	09 95       	icall
    3314:	ff 91       	pop	r31
    3316:	ef 91       	pop	r30
    3318:	bf 91       	pop	r27
    331a:	af 91       	pop	r26
    331c:	9f 91       	pop	r25
    331e:	8f 91       	pop	r24
    3320:	7f 91       	pop	r23
    3322:	6f 91       	pop	r22
    3324:	5f 91       	pop	r21
    3326:	4f 91       	pop	r20
    3328:	3f 91       	pop	r19
    332a:	2f 91       	pop	r18
    332c:	0f 90       	pop	r0
    332e:	0f be       	out	0x3f, r0	; 63
    3330:	0f 90       	pop	r0
    3332:	1f 90       	pop	r1
    3334:	18 95       	reti

00003336 <__vector_6>:
    3336:	1f 92       	push	r1
    3338:	0f 92       	push	r0
    333a:	0f b6       	in	r0, 0x3f	; 63
    333c:	0f 92       	push	r0
    333e:	11 24       	eor	r1, r1
    3340:	2f 93       	push	r18
    3342:	3f 93       	push	r19
    3344:	4f 93       	push	r20
    3346:	5f 93       	push	r21
    3348:	6f 93       	push	r22
    334a:	7f 93       	push	r23
    334c:	8f 93       	push	r24
    334e:	9f 93       	push	r25
    3350:	af 93       	push	r26
    3352:	bf 93       	push	r27
    3354:	ef 93       	push	r30
    3356:	ff 93       	push	r31
    3358:	e0 91 e8 01 	lds	r30, 0x01E8
    335c:	f0 91 e9 01 	lds	r31, 0x01E9
    3360:	30 97       	sbiw	r30, 0x00	; 0
    3362:	09 f0       	breq	.+2      	; 0x3366 <__vector_6+0x30>
    3364:	09 95       	icall
    3366:	ff 91       	pop	r31
    3368:	ef 91       	pop	r30
    336a:	bf 91       	pop	r27
    336c:	af 91       	pop	r26
    336e:	9f 91       	pop	r25
    3370:	8f 91       	pop	r24
    3372:	7f 91       	pop	r23
    3374:	6f 91       	pop	r22
    3376:	5f 91       	pop	r21
    3378:	4f 91       	pop	r20
    337a:	3f 91       	pop	r19
    337c:	2f 91       	pop	r18
    337e:	0f 90       	pop	r0
    3380:	0f be       	out	0x3f, r0	; 63
    3382:	0f 90       	pop	r0
    3384:	1f 90       	pop	r1
    3386:	18 95       	reti

00003388 <__vector_7>:
    3388:	1f 92       	push	r1
    338a:	0f 92       	push	r0
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	0f 92       	push	r0
    3390:	11 24       	eor	r1, r1
    3392:	2f 93       	push	r18
    3394:	3f 93       	push	r19
    3396:	4f 93       	push	r20
    3398:	5f 93       	push	r21
    339a:	6f 93       	push	r22
    339c:	7f 93       	push	r23
    339e:	8f 93       	push	r24
    33a0:	9f 93       	push	r25
    33a2:	af 93       	push	r26
    33a4:	bf 93       	push	r27
    33a6:	ef 93       	push	r30
    33a8:	ff 93       	push	r31
    33aa:	e0 91 ea 01 	lds	r30, 0x01EA
    33ae:	f0 91 eb 01 	lds	r31, 0x01EB
    33b2:	30 97       	sbiw	r30, 0x00	; 0
    33b4:	09 f0       	breq	.+2      	; 0x33b8 <__vector_7+0x30>
    33b6:	09 95       	icall
    33b8:	ff 91       	pop	r31
    33ba:	ef 91       	pop	r30
    33bc:	bf 91       	pop	r27
    33be:	af 91       	pop	r26
    33c0:	9f 91       	pop	r25
    33c2:	8f 91       	pop	r24
    33c4:	7f 91       	pop	r23
    33c6:	6f 91       	pop	r22
    33c8:	5f 91       	pop	r21
    33ca:	4f 91       	pop	r20
    33cc:	3f 91       	pop	r19
    33ce:	2f 91       	pop	r18
    33d0:	0f 90       	pop	r0
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	0f 90       	pop	r0
    33d6:	1f 90       	pop	r1
    33d8:	18 95       	reti

000033da <ISR_attach>:
    33da:	e8 2f       	mov	r30, r24
    33dc:	80 32       	cpi	r24, 0x20	; 32
    33de:	68 f4       	brcc	.+26     	; 0x33fa <ISR_attach+0x20>
    33e0:	80 51       	subi	r24, 0x10	; 16
    33e2:	83 30       	cpi	r24, 0x03	; 3
    33e4:	50 f0       	brcs	.+20     	; 0x33fa <ISR_attach+0x20>
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	ee 0f       	add	r30, r30
    33ea:	ff 1f       	adc	r31, r31
    33ec:	e4 52       	subi	r30, 0x24	; 36
    33ee:	fe 4f       	sbci	r31, 0xFE	; 254
    33f0:	20 81       	ld	r18, Z
    33f2:	31 81       	ldd	r19, Z+1	; 0x01
    33f4:	71 83       	std	Z+1, r23	; 0x01
    33f6:	60 83       	st	Z, r22
    33f8:	02 c0       	rjmp	.+4      	; 0x33fe <ISR_attach+0x24>
    33fa:	20 e0       	ldi	r18, 0x00	; 0
    33fc:	30 e0       	ldi	r19, 0x00	; 0
    33fe:	c9 01       	movw	r24, r18
    3400:	08 95       	ret

00003402 <ISR_open>:
    3402:	80 e1       	ldi	r24, 0x10	; 16
    3404:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    3408:	88 23       	and	r24, r24
    340a:	61 f4       	brne	.+24     	; 0x3424 <ISR_open+0x22>
    340c:	ec ed       	ldi	r30, 0xDC	; 220
    340e:	f1 e0       	ldi	r31, 0x01	; 1
    3410:	11 92       	st	Z+, r1
    3412:	11 92       	st	Z+, r1
    3414:	82 e0       	ldi	r24, 0x02	; 2
    3416:	ec 31       	cpi	r30, 0x1C	; 28
    3418:	f8 07       	cpc	r31, r24
    341a:	d1 f7       	brne	.-12     	; 0x3410 <ISR_open+0xe>
    341c:	80 e1       	ldi	r24, 0x10	; 16
    341e:	61 e0       	ldi	r22, 0x01	; 1
    3420:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    3424:	80 e1       	ldi	r24, 0x10	; 16
    3426:	91 e0       	ldi	r25, 0x01	; 1
    3428:	08 95       	ret

0000342a <__LCD_init>:
    342a:	23 9a       	sbi	0x04, 3	; 4
    342c:	08 95       	ret

0000342e <__LCD_putchar>:
    342e:	ff 92       	push	r15
    3430:	0f 93       	push	r16
    3432:	1f 93       	push	r17
    3434:	cf 93       	push	r28
    3436:	df 93       	push	r29
    3438:	f8 2e       	mov	r15, r24
    343a:	8a e0       	ldi	r24, 0x0A	; 10
    343c:	f8 16       	cp	r15, r24
    343e:	b1 f0       	breq	.+44     	; 0x346c <__LCD_putchar+0x3e>
    3440:	8f 15       	cp	r24, r15
    3442:	48 f0       	brcs	.+18     	; 0x3456 <__LCD_putchar+0x28>
    3444:	e8 e0       	ldi	r30, 0x08	; 8
    3446:	fe 16       	cp	r15, r30
    3448:	b9 f1       	breq	.+110    	; 0x34b8 <__LCD_putchar+0x8a>
    344a:	ef 15       	cp	r30, r15
    344c:	38 f1       	brcs	.+78     	; 0x349c <__LCD_putchar+0x6e>
    344e:	f7 e0       	ldi	r31, 0x07	; 7
    3450:	ff 16       	cp	r15, r31
    3452:	51 f4       	brne	.+20     	; 0x3468 <__LCD_putchar+0x3a>
    3454:	3b c0       	rjmp	.+118    	; 0x34cc <__LCD_putchar+0x9e>
    3456:	8d e0       	ldi	r24, 0x0D	; 13
    3458:	f8 16       	cp	r15, r24
    345a:	59 f0       	breq	.+22     	; 0x3472 <__LCD_putchar+0x44>
    345c:	eb e1       	ldi	r30, 0x1B	; 27
    345e:	fe 16       	cp	r15, r30
    3460:	89 f0       	breq	.+34     	; 0x3484 <__LCD_putchar+0x56>
    3462:	fc e0       	ldi	r31, 0x0C	; 12
    3464:	ff 16       	cp	r15, r31
    3466:	41 f0       	breq	.+16     	; 0x3478 <__LCD_putchar+0x4a>
    3468:	01 e0       	ldi	r16, 0x01	; 1
    346a:	41 c0       	rjmp	.+130    	; 0x34ee <__LCD_putchar+0xc0>
    346c:	10 92 77 04 	sts	0x0477, r1
    3470:	03 c0       	rjmp	.+6      	; 0x3478 <__LCD_putchar+0x4a>
    3472:	10 92 77 04 	sts	0x0477, r1
    3476:	3a c0       	rjmp	.+116    	; 0x34ec <__LCD_putchar+0xbe>
    3478:	80 91 78 04 	lds	r24, 0x0478
    347c:	81 50       	subi	r24, 0x01	; 1
    347e:	80 93 78 04 	sts	0x0478, r24
    3482:	34 c0       	rjmp	.+104    	; 0x34ec <__LCD_putchar+0xbe>
    3484:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <LCD_clear>
    3488:	14 c0       	rjmp	.+40     	; 0x34b2 <__LCD_putchar+0x84>
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	61 e0       	ldi	r22, 0x01	; 1
    348e:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    3492:	80 91 77 04 	lds	r24, 0x0477
    3496:	8f 5f       	subi	r24, 0xFF	; 255
    3498:	80 93 77 04 	sts	0x0477, r24
    349c:	80 91 77 04 	lds	r24, 0x0477
    34a0:	87 ff       	sbrs	r24, 7
    34a2:	f3 cf       	rjmp	.-26     	; 0x348a <__LCD_putchar+0x5c>
    34a4:	10 92 77 04 	sts	0x0477, r1
    34a8:	80 91 78 04 	lds	r24, 0x0478
    34ac:	81 50       	subi	r24, 0x01	; 1
    34ae:	80 93 78 04 	sts	0x0478, r24
    34b2:	00 e0       	ldi	r16, 0x00	; 0
    34b4:	11 e0       	ldi	r17, 0x01	; 1
    34b6:	1c c0       	rjmp	.+56     	; 0x34f0 <__LCD_putchar+0xc2>
    34b8:	80 91 77 04 	lds	r24, 0x0477
    34bc:	88 23       	and	r24, r24
    34be:	b1 f0       	breq	.+44     	; 0x34ec <__LCD_putchar+0xbe>
    34c0:	80 91 77 04 	lds	r24, 0x0477
    34c4:	86 50       	subi	r24, 0x06	; 6
    34c6:	80 93 77 04 	sts	0x0477, r24
    34ca:	10 c0       	rjmp	.+32     	; 0x34ec <__LCD_putchar+0xbe>
    34cc:	81 e0       	ldi	r24, 0x01	; 1
    34ce:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <SPKR_open>
    34d2:	64 ef       	ldi	r22, 0xF4	; 244
    34d4:	71 e0       	ldi	r23, 0x01	; 1
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	4d e7       	ldi	r20, 0x7D	; 125
    34dc:	50 e0       	ldi	r21, 0x00	; 0
    34de:	24 e6       	ldi	r18, 0x64	; 100
    34e0:	30 e0       	ldi	r19, 0x00	; 0
    34e2:	0e 94 31 1c 	call	0x3862	; 0x3862 <SPKR_play_beep>
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	0e 94 fd 1b 	call	0x37fa	; 0x37fa <SPKR_close>
    34ec:	00 e0       	ldi	r16, 0x00	; 0
    34ee:	10 e0       	ldi	r17, 0x00	; 0
    34f0:	80 91 78 04 	lds	r24, 0x0478
    34f4:	60 91 77 04 	lds	r22, 0x0477
    34f8:	0e 94 8d 10 	call	0x211a	; 0x211a <LCD_set_PGC_addr>
    34fc:	00 23       	and	r16, r16
    34fe:	51 f1       	breq	.+84     	; 0x3554 <__LCD_putchar+0x126>
    3500:	85 e0       	ldi	r24, 0x05	; 5
    3502:	f8 9e       	mul	r15, r24
    3504:	c0 01       	movw	r24, r0
    3506:	11 24       	eor	r1, r1
    3508:	ec 01       	movw	r28, r24
    350a:	c3 55       	subi	r28, 0x53	; 83
    350c:	df 4f       	sbci	r29, 0xFF	; 255
    350e:	8c 01       	movw	r16, r24
    3510:	0e 54       	subi	r16, 0x4E	; 78
    3512:	1f 4f       	sbci	r17, 0xFF	; 255
    3514:	fe 01       	movw	r30, r28
    3516:	84 91       	lpm	r24, Z+
    3518:	61 e0       	ldi	r22, 0x01	; 1
    351a:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    351e:	21 96       	adiw	r28, 0x01	; 1
    3520:	c0 17       	cp	r28, r16
    3522:	d1 07       	cpc	r29, r17
    3524:	b9 f7       	brne	.-18     	; 0x3514 <__LCD_putchar+0xe6>
    3526:	80 e0       	ldi	r24, 0x00	; 0
    3528:	61 e0       	ldi	r22, 0x01	; 1
    352a:	0e 94 a6 10 	call	0x214c	; 0x214c <LCD_write>
    352e:	80 91 77 04 	lds	r24, 0x0477
    3532:	8a 5f       	subi	r24, 0xFA	; 250
    3534:	80 93 77 04 	sts	0x0477, r24
    3538:	80 91 77 04 	lds	r24, 0x0477
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	8c 37       	cpi	r24, 0x7C	; 124
    3540:	91 05       	cpc	r25, r1
    3542:	3c f0       	brlt	.+14     	; 0x3552 <__LCD_putchar+0x124>
    3544:	10 92 77 04 	sts	0x0477, r1
    3548:	80 91 78 04 	lds	r24, 0x0478
    354c:	81 50       	subi	r24, 0x01	; 1
    354e:	80 93 78 04 	sts	0x0478, r24
    3552:	11 e0       	ldi	r17, 0x01	; 1
    3554:	80 91 78 04 	lds	r24, 0x0478
    3558:	83 70       	andi	r24, 0x03	; 3
    355a:	80 93 78 04 	sts	0x0478, r24
    355e:	11 30       	cpi	r17, 0x01	; 1
    3560:	59 f4       	brne	.+22     	; 0x3578 <__LCD_putchar+0x14a>
    3562:	80 91 79 04 	lds	r24, 0x0479
    3566:	81 30       	cpi	r24, 0x01	; 1
    3568:	39 f4       	brne	.+14     	; 0x3578 <__LCD_putchar+0x14a>
    356a:	e0 91 7a 04 	lds	r30, 0x047A
    356e:	f0 91 7b 04 	lds	r31, 0x047B
    3572:	30 97       	sbiw	r30, 0x00	; 0
    3574:	09 f0       	breq	.+2      	; 0x3578 <__LCD_putchar+0x14a>
    3576:	09 95       	icall
    3578:	80 e0       	ldi	r24, 0x00	; 0
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	ff 90       	pop	r15
    3586:	08 95       	ret

00003588 <__LED_clr_pattern>:
    3588:	85 fd       	sbrc	r24, 5
    358a:	5d 98       	cbi	0x0b, 5	; 11
    358c:	86 fd       	sbrc	r24, 6
    358e:	5e 98       	cbi	0x0b, 6	; 11
    3590:	08 95       	ret

00003592 <__LED_init>:
    3592:	55 9a       	sbi	0x0a, 5	; 10
    3594:	56 9a       	sbi	0x0a, 6	; 10
    3596:	08 95       	ret

00003598 <__LED_set_pattern>:
    3598:	85 fd       	sbrc	r24, 5
    359a:	5d 9a       	sbi	0x0b, 5	; 11
    359c:	86 fd       	sbrc	r24, 6
    359e:	5e 9a       	sbi	0x0b, 6	; 11
    35a0:	08 95       	ret

000035a2 <ATMEGA_open>:
    35a2:	80 e0       	ldi	r24, 0x00	; 0
    35a4:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    35a8:	88 23       	and	r24, r24
    35aa:	51 f4       	brne	.+20     	; 0x35c0 <ATMEGA_open+0x1e>
    35ac:	f8 94       	cli
    35ae:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <__ATMEGA_init>
    35b2:	81 e0       	ldi	r24, 0x01	; 1
    35b4:	0e 94 e3 1a 	call	0x35c6	; 0x35c6 <ATMEGA_set_clk_mode>
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	61 e0       	ldi	r22, 0x01	; 1
    35bc:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    35c0:	80 e0       	ldi	r24, 0x00	; 0
    35c2:	91 e0       	ldi	r25, 0x01	; 1
    35c4:	08 95       	ret

000035c6 <ATMEGA_set_clk_mode>:
    35c6:	81 30       	cpi	r24, 0x01	; 1
    35c8:	49 f0       	breq	.+18     	; 0x35dc <ATMEGA_set_clk_mode+0x16>
    35ca:	f8 94       	cli
    35cc:	81 30       	cpi	r24, 0x01	; 1
    35ce:	20 f1       	brcs	.+72     	; 0x3618 <ATMEGA_set_clk_mode+0x52>
    35d0:	82 30       	cpi	r24, 0x02	; 2
    35d2:	b1 f0       	breq	.+44     	; 0x3600 <ATMEGA_set_clk_mode+0x3a>
    35d4:	83 30       	cpi	r24, 0x03	; 3
    35d6:	09 f0       	breq	.+2      	; 0x35da <ATMEGA_set_clk_mode+0x14>
    35d8:	45 c0       	rjmp	.+138    	; 0x3664 <ATMEGA_set_clk_mode+0x9e>
    35da:	17 c0       	rjmp	.+46     	; 0x360a <ATMEGA_set_clk_mode+0x44>
    35dc:	2c 9a       	sbi	0x05, 4	; 5
    35de:	80 e8       	ldi	r24, 0x80	; 128
    35e0:	80 93 61 00 	sts	0x0061, r24
    35e4:	10 92 61 00 	sts	0x0061, r1
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	00 00       	nop
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	88 32       	cpi	r24, 0x28	; 40
    35f2:	91 05       	cpc	r25, r1
    35f4:	d9 f7       	brne	.-10     	; 0x35ec <ATMEGA_set_clk_mode+0x26>
    35f6:	10 92 68 00 	sts	0x0068, r1
    35fa:	10 92 6b 00 	sts	0x006B, r1
    35fe:	08 95       	ret
    3600:	80 e8       	ldi	r24, 0x80	; 128
    3602:	80 93 61 00 	sts	0x0061, r24
    3606:	83 e0       	ldi	r24, 0x03	; 3
    3608:	04 c0       	rjmp	.+8      	; 0x3612 <ATMEGA_set_clk_mode+0x4c>
    360a:	80 e8       	ldi	r24, 0x80	; 128
    360c:	80 93 61 00 	sts	0x0061, r24
    3610:	88 e0       	ldi	r24, 0x08	; 8
    3612:	80 93 61 00 	sts	0x0061, r24
    3616:	28 c0       	rjmp	.+80     	; 0x3668 <ATMEGA_set_clk_mode+0xa2>
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	00 00       	nop
    361e:	01 96       	adiw	r24, 0x01	; 1
    3620:	2d e6       	ldi	r18, 0x6D	; 109
    3622:	80 36       	cpi	r24, 0x60	; 96
    3624:	92 07       	cpc	r25, r18
    3626:	d1 f7       	brne	.-12     	; 0x361c <ATMEGA_set_clk_mode+0x56>
    3628:	2c 98       	cbi	0x05, 4	; 5
    362a:	80 e0       	ldi	r24, 0x00	; 0
    362c:	90 e0       	ldi	r25, 0x00	; 0
    362e:	00 00       	nop
    3630:	01 96       	adiw	r24, 0x01	; 1
    3632:	2d e6       	ldi	r18, 0x6D	; 109
    3634:	80 36       	cpi	r24, 0x60	; 96
    3636:	92 07       	cpc	r25, r18
    3638:	d1 f7       	brne	.-12     	; 0x362e <ATMEGA_set_clk_mode+0x68>
    363a:	10 92 7a 00 	sts	0x007A, r1
    363e:	8f ef       	ldi	r24, 0xFF	; 255
    3640:	80 93 64 00 	sts	0x0064, r24
    3644:	80 91 68 00 	lds	r24, 0x0068
    3648:	81 60       	ori	r24, 0x01	; 1
    364a:	80 93 68 00 	sts	0x0068, r24
    364e:	80 91 6b 00 	lds	r24, 0x006B
    3652:	84 60       	ori	r24, 0x04	; 4
    3654:	80 93 6b 00 	sts	0x006B, r24
    3658:	78 94       	sei
    365a:	83 b7       	in	r24, 0x33	; 51
    365c:	81 60       	ori	r24, 0x01	; 1
    365e:	83 bf       	out	0x33, r24	; 51
    3660:	88 95       	sleep
    3662:	08 95       	ret
    3664:	82 30       	cpi	r24, 0x02	; 2
    3666:	08 f0       	brcs	.+2      	; 0x366a <ATMEGA_set_clk_mode+0xa4>
    3668:	78 94       	sei
    366a:	08 95       	ret

0000366c <SPI_open>:
    366c:	0f 93       	push	r16
    366e:	1f 93       	push	r17
    3670:	0e 94 0f 1e 	call	0x3c1e	; 0x3c1e <__SPI_init>
    3674:	80 e0       	ldi	r24, 0x00	; 0
    3676:	6e ef       	ldi	r22, 0xFE	; 254
    3678:	7d e1       	ldi	r23, 0x1D	; 29
    367a:	0e 94 81 1b 	call	0x3702	; 0x3702 <SPI_set_config_func>
    367e:	81 e0       	ldi	r24, 0x01	; 1
    3680:	66 ef       	ldi	r22, 0xF6	; 246
    3682:	7d e1       	ldi	r23, 0x1D	; 29
    3684:	0e 94 81 1b 	call	0x3702	; 0x3702 <SPI_set_config_func>
    3688:	82 e0       	ldi	r24, 0x02	; 2
    368a:	6e ee       	ldi	r22, 0xEE	; 238
    368c:	7d e1       	ldi	r23, 0x1D	; 29
    368e:	0e 94 81 1b 	call	0x3702	; 0x3702 <SPI_set_config_func>
    3692:	86 e0       	ldi	r24, 0x06	; 6
    3694:	66 e0       	ldi	r22, 0x06	; 6
    3696:	7e e1       	ldi	r23, 0x1E	; 30
    3698:	0e 94 81 1b 	call	0x3702	; 0x3702 <SPI_set_config_func>
    369c:	06 ee       	ldi	r16, 0xE6	; 230
    369e:	1d e1       	ldi	r17, 0x1D	; 29
    36a0:	83 e0       	ldi	r24, 0x03	; 3
    36a2:	b8 01       	movw	r22, r16
    36a4:	0e 94 81 1b 	call	0x3702	; 0x3702 <SPI_set_config_func>
    36a8:	84 e0       	ldi	r24, 0x04	; 4
    36aa:	b8 01       	movw	r22, r16
    36ac:	0e 94 81 1b 	call	0x3702	; 0x3702 <SPI_set_config_func>
    36b0:	85 e0       	ldi	r24, 0x05	; 5
    36b2:	b8 01       	movw	r22, r16
    36b4:	0e 94 81 1b 	call	0x3702	; 0x3702 <SPI_set_config_func>
    36b8:	87 e0       	ldi	r24, 0x07	; 7
    36ba:	b8 01       	movw	r22, r16
    36bc:	0e 94 81 1b 	call	0x3702	; 0x3702 <SPI_set_config_func>
    36c0:	82 e0       	ldi	r24, 0x02	; 2
    36c2:	61 e0       	ldi	r22, 0x01	; 1
    36c4:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    36c8:	8f ef       	ldi	r24, 0xFF	; 255
    36ca:	80 93 7c 04 	sts	0x047C, r24
    36ce:	87 e0       	ldi	r24, 0x07	; 7
    36d0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <SPI_set_slave_addr>
    36d4:	82 e0       	ldi	r24, 0x02	; 2
    36d6:	91 e0       	ldi	r25, 0x01	; 1
    36d8:	1f 91       	pop	r17
    36da:	0f 91       	pop	r16
    36dc:	08 95       	ret

000036de <SPI_receive>:
    36de:	1f 93       	push	r17
    36e0:	16 2f       	mov	r17, r22
    36e2:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <SPI_set_slave_addr>
    36e6:	82 e0       	ldi	r24, 0x02	; 2
    36e8:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    36ec:	81 30       	cpi	r24, 0x01	; 1
    36ee:	11 f0       	breq	.+4      	; 0x36f4 <SPI_receive+0x16>
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	05 c0       	rjmp	.+10     	; 0x36fe <SPI_receive+0x20>
    36f4:	1e bd       	out	0x2e, r17	; 46
    36f6:	0d b4       	in	r0, 0x2d	; 45
    36f8:	07 fe       	sbrs	r0, 7
    36fa:	fd cf       	rjmp	.-6      	; 0x36f6 <SPI_receive+0x18>
    36fc:	8e b5       	in	r24, 0x2e	; 46
    36fe:	1f 91       	pop	r17
    3700:	08 95       	ret

00003702 <SPI_set_config_func>:
    3702:	e8 2f       	mov	r30, r24
    3704:	f0 e0       	ldi	r31, 0x00	; 0
    3706:	ee 0f       	add	r30, r30
    3708:	ff 1f       	adc	r31, r31
    370a:	e4 5e       	subi	r30, 0xE4	; 228
    370c:	fd 4f       	sbci	r31, 0xFD	; 253
    370e:	71 83       	std	Z+1, r23	; 0x01
    3710:	60 83       	st	Z, r22
    3712:	08 95       	ret

00003714 <__SPKR_TIMER1_COMPA_vect>:
    3714:	0e 94 8d 1b 	call	0x371a	; 0x371a <SPKR_clk>
    3718:	08 95       	ret

0000371a <SPKR_clk>:
    371a:	80 91 2e 02 	lds	r24, 0x022E
    371e:	90 91 2f 02 	lds	r25, 0x022F
    3722:	a0 91 30 02 	lds	r26, 0x0230
    3726:	b0 91 31 02 	lds	r27, 0x0231
    372a:	20 91 32 02 	lds	r18, 0x0232
    372e:	30 91 33 02 	lds	r19, 0x0233
    3732:	40 91 34 02 	lds	r20, 0x0234
    3736:	50 91 35 02 	lds	r21, 0x0235
    373a:	28 0f       	add	r18, r24
    373c:	39 1f       	adc	r19, r25
    373e:	4a 1f       	adc	r20, r26
    3740:	5b 1f       	adc	r21, r27
    3742:	20 93 2e 02 	sts	0x022E, r18
    3746:	30 93 2f 02 	sts	0x022F, r19
    374a:	40 93 30 02 	sts	0x0230, r20
    374e:	50 93 31 02 	sts	0x0231, r21
    3752:	80 91 2e 02 	lds	r24, 0x022E
    3756:	90 91 2f 02 	lds	r25, 0x022F
    375a:	a0 91 30 02 	lds	r26, 0x0230
    375e:	b0 91 31 02 	lds	r27, 0x0231
    3762:	88 51       	subi	r24, 0x18	; 24
    3764:	96 4f       	sbci	r25, 0xF6	; 246
    3766:	a0 40       	sbci	r26, 0x00	; 0
    3768:	b0 40       	sbci	r27, 0x00	; 0
    376a:	bc f0       	brlt	.+46     	; 0x379a <SPKR_clk+0x80>
    376c:	8b b1       	in	r24, 0x0b	; 11
    376e:	80 58       	subi	r24, 0x80	; 128
    3770:	8b b9       	out	0x0b, r24	; 11
    3772:	80 91 2e 02 	lds	r24, 0x022E
    3776:	90 91 2f 02 	lds	r25, 0x022F
    377a:	a0 91 30 02 	lds	r26, 0x0230
    377e:	b0 91 31 02 	lds	r27, 0x0231
    3782:	88 51       	subi	r24, 0x18	; 24
    3784:	96 4f       	sbci	r25, 0xF6	; 246
    3786:	a0 40       	sbci	r26, 0x00	; 0
    3788:	b0 40       	sbci	r27, 0x00	; 0
    378a:	80 93 2e 02 	sts	0x022E, r24
    378e:	90 93 2f 02 	sts	0x022F, r25
    3792:	a0 93 30 02 	sts	0x0230, r26
    3796:	b0 93 31 02 	sts	0x0231, r27
    379a:	08 95       	ret

0000379c <__SPKR_close_beep_mode>:
    379c:	8a e0       	ldi	r24, 0x0A	; 10
    379e:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    37a2:	81 30       	cpi	r24, 0x01	; 1
    37a4:	41 f4       	brne	.+16     	; 0x37b6 <__SPKR_close_beep_mode+0x1a>
    37a6:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <__SPKR_close>
    37aa:	10 92 2d 02 	sts	0x022D, r1
    37ae:	8a e0       	ldi	r24, 0x0A	; 10
    37b0:	60 e0       	ldi	r22, 0x00	; 0
    37b2:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    37b6:	08 95       	ret

000037b8 <__SPKR_close_tone_mode>:
    37b8:	89 e0       	ldi	r24, 0x09	; 9
    37ba:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    37be:	81 30       	cpi	r24, 0x01	; 1
    37c0:	d9 f4       	brne	.+54     	; 0x37f8 <__SPKR_close_tone_mode+0x40>
    37c2:	80 91 2c 02 	lds	r24, 0x022C
    37c6:	88 23       	and	r24, r24
    37c8:	11 f0       	breq	.+4      	; 0x37ce <__SPKR_close_tone_mode+0x16>
    37ca:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <__SPKR_stop>
    37ce:	82 e0       	ldi	r24, 0x02	; 2
    37d0:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <__SPKR_close>
    37d4:	80 91 3a 02 	lds	r24, 0x023A
    37d8:	90 91 3b 02 	lds	r25, 0x023B
    37dc:	00 97       	sbiw	r24, 0x00	; 0
    37de:	31 f0       	breq	.+12     	; 0x37ec <__SPKR_close_tone_mode+0x34>
    37e0:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <free>
    37e4:	10 92 3b 02 	sts	0x023B, r1
    37e8:	10 92 3a 02 	sts	0x023A, r1
    37ec:	10 92 2c 02 	sts	0x022C, r1
    37f0:	89 e0       	ldi	r24, 0x09	; 9
    37f2:	60 e0       	ldi	r22, 0x00	; 0
    37f4:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    37f8:	08 95       	ret

000037fa <SPKR_close>:
    37fa:	81 30       	cpi	r24, 0x01	; 1
    37fc:	29 f0       	breq	.+10     	; 0x3808 <SPKR_close+0xe>
    37fe:	82 30       	cpi	r24, 0x02	; 2
    3800:	29 f4       	brne	.+10     	; 0x380c <SPKR_close+0x12>
    3802:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <__SPKR_close_tone_mode>
    3806:	08 95       	ret
    3808:	0e 94 ce 1b 	call	0x379c	; 0x379c <__SPKR_close_beep_mode>
    380c:	08 95       	ret

0000380e <__SPKR_init>:
    380e:	98 2f       	mov	r25, r24
    3810:	80 91 2c 02 	lds	r24, 0x022C
    3814:	88 23       	and	r24, r24
    3816:	31 f4       	brne	.+12     	; 0x3824 <__SPKR_init+0x16>
    3818:	80 91 2d 02 	lds	r24, 0x022D
    381c:	88 23       	and	r24, r24
    381e:	11 f4       	brne	.+4      	; 0x3824 <__SPKR_init+0x16>
    3820:	57 9a       	sbi	0x0a, 7	; 10
    3822:	5f 98       	cbi	0x0b, 7	; 11
    3824:	80 91 2c 02 	lds	r24, 0x022C
    3828:	88 23       	and	r24, r24
    382a:	d1 f4       	brne	.+52     	; 0x3860 <__SPKR_init+0x52>
    382c:	92 30       	cpi	r25, 0x02	; 2
    382e:	c1 f4       	brne	.+48     	; 0x3860 <__SPKR_init+0x52>
    3830:	10 92 80 00 	sts	0x0080, r1
    3834:	10 92 81 00 	sts	0x0081, r1
    3838:	80 91 81 00 	lds	r24, 0x0081
    383c:	88 60       	ori	r24, 0x08	; 8
    383e:	80 93 81 00 	sts	0x0081, r24
    3842:	80 91 81 00 	lds	r24, 0x0081
    3846:	81 60       	ori	r24, 0x01	; 1
    3848:	80 93 81 00 	sts	0x0081, r24
    384c:	10 92 85 00 	sts	0x0085, r1
    3850:	10 92 84 00 	sts	0x0084, r1
    3854:	81 e0       	ldi	r24, 0x01	; 1
    3856:	80 93 89 00 	sts	0x0089, r24
    385a:	80 e9       	ldi	r24, 0x90	; 144
    385c:	80 93 88 00 	sts	0x0088, r24
    3860:	08 95       	ret

00003862 <SPKR_play_beep>:
    3862:	8f 92       	push	r8
    3864:	9f 92       	push	r9
    3866:	af 92       	push	r10
    3868:	bf 92       	push	r11
    386a:	cf 92       	push	r12
    386c:	df 92       	push	r13
    386e:	ef 92       	push	r14
    3870:	ff 92       	push	r15
    3872:	0f 93       	push	r16
    3874:	1f 93       	push	r17
    3876:	cf 93       	push	r28
    3878:	df 93       	push	r29
    387a:	4b 01       	movw	r8, r22
    387c:	5c 01       	movw	r10, r24
    387e:	ea 01       	movw	r28, r20
    3880:	b9 01       	movw	r22, r18
    3882:	21 15       	cp	r18, r1
    3884:	31 05       	cpc	r19, r1
    3886:	39 f1       	breq	.+78     	; 0x38d6 <SPKR_play_beep+0x74>
    3888:	9e 01       	movw	r18, r28
    388a:	44 27       	eor	r20, r20
    388c:	37 fd       	sbrc	r19, 7
    388e:	40 95       	com	r20
    3890:	54 2f       	mov	r21, r20
    3892:	65 36       	cpi	r22, 0x65	; 101
    3894:	71 05       	cpc	r23, r1
    3896:	10 f0       	brcs	.+4      	; 0x389c <SPKR_play_beep+0x3a>
    3898:	64 e6       	ldi	r22, 0x64	; 100
    389a:	70 e0       	ldi	r23, 0x00	; 0
    389c:	80 e0       	ldi	r24, 0x00	; 0
    389e:	90 e0       	ldi	r25, 0x00	; 0
    38a0:	0e 94 a0 29 	call	0x5340	; 0x5340 <__mulsi3>
    38a4:	24 e6       	ldi	r18, 0x64	; 100
    38a6:	30 e0       	ldi	r19, 0x00	; 0
    38a8:	40 e0       	ldi	r20, 0x00	; 0
    38aa:	50 e0       	ldi	r21, 0x00	; 0
    38ac:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__udivmodsi4>
    38b0:	79 01       	movw	r14, r18
    38b2:	8a 01       	movw	r16, r20
    38b4:	c5 01       	movw	r24, r10
    38b6:	b4 01       	movw	r22, r8
    38b8:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <SPKR_beep>
    38bc:	c7 01       	movw	r24, r14
    38be:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <TMRSRVC_delay>
    38c2:	60 e0       	ldi	r22, 0x00	; 0
    38c4:	70 e0       	ldi	r23, 0x00	; 0
    38c6:	80 e0       	ldi	r24, 0x00	; 0
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	0e 94 16 1e 	call	0x3c2c	; 0x3c2c <SPKR_beep>
    38ce:	ce 01       	movw	r24, r28
    38d0:	8e 19       	sub	r24, r14
    38d2:	9f 09       	sbc	r25, r15
    38d4:	04 c0       	rjmp	.+8      	; 0x38de <SPKR_play_beep+0x7c>
    38d6:	41 15       	cp	r20, r1
    38d8:	51 05       	cpc	r21, r1
    38da:	19 f0       	breq	.+6      	; 0x38e2 <SPKR_play_beep+0x80>
    38dc:	ca 01       	movw	r24, r20
    38de:	0e 94 62 16 	call	0x2cc4	; 0x2cc4 <TMRSRVC_delay>
    38e2:	df 91       	pop	r29
    38e4:	cf 91       	pop	r28
    38e6:	1f 91       	pop	r17
    38e8:	0f 91       	pop	r16
    38ea:	ff 90       	pop	r15
    38ec:	ef 90       	pop	r14
    38ee:	df 90       	pop	r13
    38f0:	cf 90       	pop	r12
    38f2:	bf 90       	pop	r11
    38f4:	af 90       	pop	r10
    38f6:	9f 90       	pop	r9
    38f8:	8f 90       	pop	r8
    38fa:	08 95       	ret

000038fc <__SPKR_stop>:
    38fc:	ef e6       	ldi	r30, 0x6F	; 111
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	80 81       	ld	r24, Z
    3902:	8d 7f       	andi	r24, 0xFD	; 253
    3904:	80 83       	st	Z, r24
    3906:	08 95       	ret

00003908 <STEPPER_go>:
    3908:	98 2f       	mov	r25, r24
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	80 93 61 04 	sts	0x0461, r24
    3910:	91 30       	cpi	r25, 0x01	; 1
    3912:	51 f0       	breq	.+20     	; 0x3928 <STEPPER_go+0x20>
    3914:	91 30       	cpi	r25, 0x01	; 1
    3916:	18 f0       	brcs	.+6      	; 0x391e <STEPPER_go+0x16>
    3918:	92 30       	cpi	r25, 0x02	; 2
    391a:	41 f4       	brne	.+16     	; 0x392c <STEPPER_go+0x24>
    391c:	03 c0       	rjmp	.+6      	; 0x3924 <STEPPER_go+0x1c>
    391e:	10 92 49 04 	sts	0x0449, r1
    3922:	04 c0       	rjmp	.+8      	; 0x392c <STEPPER_go+0x24>
    3924:	10 92 49 04 	sts	0x0449, r1
    3928:	10 92 4a 04 	sts	0x044A, r1
    392c:	10 92 61 04 	sts	0x0461, r1
    3930:	08 95       	ret

00003932 <__STEPPER_init>:
    3932:	3a 9a       	sbi	0x07, 2	; 7
    3934:	3b 9a       	sbi	0x07, 3	; 7
    3936:	3c 9a       	sbi	0x07, 4	; 7
    3938:	3d 9a       	sbi	0x07, 5	; 7
    393a:	3e 9a       	sbi	0x07, 6	; 7
    393c:	3f 9a       	sbi	0x07, 7	; 7
    393e:	88 b1       	in	r24, 0x08	; 8
    3940:	83 70       	andi	r24, 0x03	; 3
    3942:	88 b9       	out	0x08, r24	; 8
    3944:	08 95       	ret

00003946 <STEPPER_set_steps>:
    3946:	98 2f       	mov	r25, r24
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	80 93 61 04 	sts	0x0461, r24
    394e:	91 30       	cpi	r25, 0x01	; 1
    3950:	71 f0       	breq	.+28     	; 0x396e <STEPPER_set_steps+0x28>
    3952:	91 30       	cpi	r25, 0x01	; 1
    3954:	18 f0       	brcs	.+6      	; 0x395c <STEPPER_set_steps+0x16>
    3956:	92 30       	cpi	r25, 0x02	; 2
    3958:	71 f4       	brne	.+28     	; 0x3976 <STEPPER_set_steps+0x30>
    395a:	05 c0       	rjmp	.+10     	; 0x3966 <STEPPER_set_steps+0x20>
    395c:	70 93 3e 04 	sts	0x043E, r23
    3960:	60 93 3d 04 	sts	0x043D, r22
    3964:	08 c0       	rjmp	.+16     	; 0x3976 <STEPPER_set_steps+0x30>
    3966:	70 93 3e 04 	sts	0x043E, r23
    396a:	60 93 3d 04 	sts	0x043D, r22
    396e:	70 93 40 04 	sts	0x0440, r23
    3972:	60 93 3f 04 	sts	0x043F, r22
    3976:	10 92 61 04 	sts	0x0461, r1
    397a:	08 95       	ret

0000397c <STEPPER_set_stop_mode>:
    397c:	98 2f       	mov	r25, r24
    397e:	81 e0       	ldi	r24, 0x01	; 1
    3980:	80 93 61 04 	sts	0x0461, r24
    3984:	91 30       	cpi	r25, 0x01	; 1
    3986:	51 f0       	breq	.+20     	; 0x399c <STEPPER_set_stop_mode+0x20>
    3988:	91 30       	cpi	r25, 0x01	; 1
    398a:	18 f0       	brcs	.+6      	; 0x3992 <STEPPER_set_stop_mode+0x16>
    398c:	92 30       	cpi	r25, 0x02	; 2
    398e:	41 f4       	brne	.+16     	; 0x39a0 <STEPPER_set_stop_mode+0x24>
    3990:	03 c0       	rjmp	.+6      	; 0x3998 <STEPPER_set_stop_mode+0x1c>
    3992:	60 93 4b 04 	sts	0x044B, r22
    3996:	04 c0       	rjmp	.+8      	; 0x39a0 <STEPPER_set_stop_mode+0x24>
    3998:	60 93 4b 04 	sts	0x044B, r22
    399c:	60 93 4c 04 	sts	0x044C, r22
    39a0:	10 92 61 04 	sts	0x0461, r1
    39a4:	08 95       	ret

000039a6 <STEPPER_setup_decels>:
    39a6:	0f 93       	push	r16
    39a8:	1f 93       	push	r17
    39aa:	cf 93       	push	r28
    39ac:	df 93       	push	r29
    39ae:	eb 01       	movw	r28, r22
    39b0:	8a 01       	movw	r16, r20
    39b2:	81 30       	cpi	r24, 0x01	; 1
    39b4:	01 f1       	breq	.+64     	; 0x39f6 <STEPPER_setup_decels+0x50>
    39b6:	81 30       	cpi	r24, 0x01	; 1
    39b8:	18 f0       	brcs	.+6      	; 0x39c0 <STEPPER_setup_decels+0x1a>
    39ba:	82 30       	cpi	r24, 0x02	; 2
    39bc:	61 f5       	brne	.+88     	; 0x3a16 <STEPPER_setup_decels+0x70>
    39be:	0d c0       	rjmp	.+26     	; 0x39da <STEPPER_setup_decels+0x34>
    39c0:	80 91 35 04 	lds	r24, 0x0435
    39c4:	90 91 36 04 	lds	r25, 0x0436
    39c8:	89 2b       	or	r24, r25
    39ca:	11 f0       	breq	.+4      	; 0x39d0 <STEPPER_setup_decels+0x2a>
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	1a c0       	rjmp	.+52     	; 0x3a04 <STEPPER_setup_decels+0x5e>
    39d0:	10 92 42 04 	sts	0x0442, r1
    39d4:	10 92 41 04 	sts	0x0441, r1
    39d8:	1e c0       	rjmp	.+60     	; 0x3a16 <STEPPER_setup_decels+0x70>
    39da:	80 91 35 04 	lds	r24, 0x0435
    39de:	90 91 36 04 	lds	r25, 0x0436
    39e2:	89 2b       	or	r24, r25
    39e4:	21 f0       	breq	.+8      	; 0x39ee <STEPPER_setup_decels+0x48>
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <STEPPER_set_decel_step_values>
    39ec:	04 c0       	rjmp	.+8      	; 0x39f6 <STEPPER_setup_decels+0x50>
    39ee:	10 92 42 04 	sts	0x0442, r1
    39f2:	10 92 41 04 	sts	0x0441, r1
    39f6:	80 91 37 04 	lds	r24, 0x0437
    39fa:	90 91 38 04 	lds	r25, 0x0438
    39fe:	89 2b       	or	r24, r25
    3a00:	31 f0       	breq	.+12     	; 0x3a0e <STEPPER_setup_decels+0x68>
    3a02:	81 e0       	ldi	r24, 0x01	; 1
    3a04:	be 01       	movw	r22, r28
    3a06:	a8 01       	movw	r20, r16
    3a08:	0e 94 49 1e 	call	0x3c92	; 0x3c92 <STEPPER_set_decel_step_values>
    3a0c:	04 c0       	rjmp	.+8      	; 0x3a16 <STEPPER_setup_decels+0x70>
    3a0e:	10 92 44 04 	sts	0x0444, r1
    3a12:	10 92 43 04 	sts	0x0443, r1
    3a16:	df 91       	pop	r29
    3a18:	cf 91       	pop	r28
    3a1a:	1f 91       	pop	r17
    3a1c:	0f 91       	pop	r16
    3a1e:	08 95       	ret

00003a20 <SYS_init>:
    3a20:	10 92 64 04 	sts	0x0464, r1
    3a24:	10 92 65 04 	sts	0x0465, r1
    3a28:	10 92 69 04 	sts	0x0469, r1
    3a2c:	10 92 66 04 	sts	0x0466, r1
    3a30:	10 92 68 04 	sts	0x0468, r1
    3a34:	10 92 6a 04 	sts	0x046A, r1
    3a38:	10 92 6b 04 	sts	0x046B, r1
    3a3c:	10 92 6c 04 	sts	0x046C, r1
    3a40:	10 92 6d 04 	sts	0x046D, r1
    3a44:	10 92 6e 04 	sts	0x046E, r1
    3a48:	10 92 6f 04 	sts	0x046F, r1
    3a4c:	10 92 70 04 	sts	0x0470, r1
    3a50:	10 92 71 04 	sts	0x0471, r1
    3a54:	10 92 72 04 	sts	0x0472, r1
    3a58:	10 92 73 04 	sts	0x0473, r1
    3a5c:	10 92 74 04 	sts	0x0474, r1
    3a60:	10 92 75 04 	sts	0x0475, r1
    3a64:	08 95       	ret

00003a66 <TMRSRVC_insert>:
    3a66:	cf 92       	push	r12
    3a68:	df 92       	push	r13
    3a6a:	ef 92       	push	r14
    3a6c:	ff 92       	push	r15
    3a6e:	0f 93       	push	r16
    3a70:	1f 93       	push	r17
    3a72:	cf 93       	push	r28
    3a74:	df 93       	push	r29
    3a76:	ec 01       	movw	r28, r24
    3a78:	80 91 9b 04 	lds	r24, 0x049B
    3a7c:	88 23       	and	r24, r24
    3a7e:	39 f4       	brne	.+14     	; 0x3a8e <TMRSRVC_insert+0x28>
    3a80:	d0 93 9d 04 	sts	0x049D, r29
    3a84:	c0 93 9c 04 	sts	0x049C, r28
    3a88:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <TMRSRVC_start>
    3a8c:	47 c0       	rjmp	.+142    	; 0x3b1c <TMRSRVC_insert+0xb6>
    3a8e:	c0 90 9c 04 	lds	r12, 0x049C
    3a92:	d0 90 9d 04 	lds	r13, 0x049D
    3a96:	00 e0       	ldi	r16, 0x00	; 0
    3a98:	10 e0       	ldi	r17, 0x00	; 0
    3a9a:	ee 24       	eor	r14, r14
    3a9c:	ff 24       	eor	r15, r15
    3a9e:	37 c0       	rjmp	.+110    	; 0x3b0e <TMRSRVC_insert+0xa8>
    3aa0:	a8 81       	ld	r26, Y
    3aa2:	b9 81       	ldd	r27, Y+1	; 0x01
    3aa4:	fd 01       	movw	r30, r26
    3aa6:	64 81       	ldd	r22, Z+4	; 0x04
    3aa8:	75 81       	ldd	r23, Z+5	; 0x05
    3aaa:	f6 01       	movw	r30, r12
    3aac:	40 81       	ld	r20, Z
    3aae:	51 81       	ldd	r21, Z+1	; 0x01
    3ab0:	fa 01       	movw	r30, r20
    3ab2:	84 81       	ldd	r24, Z+4	; 0x04
    3ab4:	95 81       	ldd	r25, Z+5	; 0x05
    3ab6:	9b 01       	movw	r18, r22
    3ab8:	28 1b       	sub	r18, r24
    3aba:	39 0b       	sbc	r19, r25
    3abc:	37 ff       	sbrs	r19, 7
    3abe:	0f c0       	rjmp	.+30     	; 0x3ade <TMRSRVC_insert+0x78>
    3ac0:	86 1b       	sub	r24, r22
    3ac2:	97 0b       	sbc	r25, r23
    3ac4:	95 83       	std	Z+5, r25	; 0x05
    3ac6:	84 83       	std	Z+4, r24	; 0x04
    3ac8:	db 82       	std	Y+3, r13	; 0x03
    3aca:	ca 82       	std	Y+2, r12	; 0x02
    3acc:	01 2b       	or	r16, r17
    3ace:	29 f4       	brne	.+10     	; 0x3ada <TMRSRVC_insert+0x74>
    3ad0:	d0 93 9d 04 	sts	0x049D, r29
    3ad4:	c0 93 9c 04 	sts	0x049C, r28
    3ad8:	21 c0       	rjmp	.+66     	; 0x3b1c <TMRSRVC_insert+0xb6>
    3ada:	f7 01       	movw	r30, r14
    3adc:	0c c0       	rjmp	.+24     	; 0x3af6 <TMRSRVC_insert+0x90>
    3ade:	f6 01       	movw	r30, r12
    3ae0:	82 81       	ldd	r24, Z+2	; 0x02
    3ae2:	93 81       	ldd	r25, Z+3	; 0x03
    3ae4:	21 15       	cp	r18, r1
    3ae6:	31 05       	cpc	r19, r1
    3ae8:	49 f4       	brne	.+18     	; 0x3afc <TMRSRVC_insert+0x96>
    3aea:	fd 01       	movw	r30, r26
    3aec:	15 82       	std	Z+5, r1	; 0x05
    3aee:	14 82       	std	Z+4, r1	; 0x04
    3af0:	9b 83       	std	Y+3, r25	; 0x03
    3af2:	8a 83       	std	Y+2, r24	; 0x02
    3af4:	f6 01       	movw	r30, r12
    3af6:	d3 83       	std	Z+3, r29	; 0x03
    3af8:	c2 83       	std	Z+2, r28	; 0x02
    3afa:	10 c0       	rjmp	.+32     	; 0x3b1c <TMRSRVC_insert+0xb6>
    3afc:	fd 01       	movw	r30, r26
    3afe:	35 83       	std	Z+5, r19	; 0x05
    3b00:	24 83       	std	Z+4, r18	; 0x04
    3b02:	00 97       	sbiw	r24, 0x00	; 0
    3b04:	b9 f3       	breq	.-18     	; 0x3af4 <TMRSRVC_insert+0x8e>
    3b06:	0f 5f       	subi	r16, 0xFF	; 255
    3b08:	1f 4f       	sbci	r17, 0xFF	; 255
    3b0a:	76 01       	movw	r14, r12
    3b0c:	6c 01       	movw	r12, r24
    3b0e:	80 91 9b 04 	lds	r24, 0x049B
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	08 17       	cp	r16, r24
    3b16:	19 07       	cpc	r17, r25
    3b18:	18 f2       	brcs	.-122    	; 0x3aa0 <TMRSRVC_insert+0x3a>
    3b1a:	ec cf       	rjmp	.-40     	; 0x3af4 <TMRSRVC_insert+0x8e>
    3b1c:	80 91 9b 04 	lds	r24, 0x049B
    3b20:	8f 5f       	subi	r24, 0xFF	; 255
    3b22:	80 93 9b 04 	sts	0x049B, r24
    3b26:	df 91       	pop	r29
    3b28:	cf 91       	pop	r28
    3b2a:	1f 91       	pop	r17
    3b2c:	0f 91       	pop	r16
    3b2e:	ff 90       	pop	r15
    3b30:	ef 90       	pop	r14
    3b32:	df 90       	pop	r13
    3b34:	cf 90       	pop	r12
    3b36:	08 95       	ret

00003b38 <TMRSRVC_open>:
    3b38:	88 e0       	ldi	r24, 0x08	; 8
    3b3a:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    3b3e:	88 23       	and	r24, r24
    3b40:	b9 f4       	brne	.+46     	; 0x3b70 <TMRSRVC_open+0x38>
    3b42:	10 92 9b 04 	sts	0x049B, r1
    3b46:	10 92 9d 04 	sts	0x049D, r1
    3b4a:	10 92 9c 04 	sts	0x049C, r1
    3b4e:	10 92 3c 02 	sts	0x023C, r1
    3b52:	10 92 3d 02 	sts	0x023D, r1
    3b56:	80 e1       	ldi	r24, 0x10	; 16
    3b58:	66 eb       	ldi	r22, 0xB6	; 182
    3b5a:	7e e1       	ldi	r23, 0x1E	; 30
    3b5c:	0e 94 d2 1d 	call	0x3ba4	; 0x3ba4 <__ISR_attach>
    3b60:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <__TMRSRVC_init>
    3b64:	0e 94 bb 1d 	call	0x3b76	; 0x3b76 <__TMRSRVC_start>
    3b68:	88 e0       	ldi	r24, 0x08	; 8
    3b6a:	61 e0       	ldi	r22, 0x01	; 1
    3b6c:	0e 94 4d 15 	call	0x2a9a	; 0x2a9a <SYS_set_state>
    3b70:	88 e0       	ldi	r24, 0x08	; 8
    3b72:	91 e0       	ldi	r25, 0x01	; 1
    3b74:	08 95       	ret

00003b76 <__TMRSRVC_start>:
    3b76:	ee e6       	ldi	r30, 0x6E	; 110
    3b78:	f0 e0       	ldi	r31, 0x00	; 0
    3b7a:	80 81       	ld	r24, Z
    3b7c:	82 60       	ori	r24, 0x02	; 2
    3b7e:	80 83       	st	Z, r24
    3b80:	08 95       	ret

00003b82 <TMRSRVC_start>:
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	80 93 3d 02 	sts	0x023D, r24
    3b88:	08 95       	ret

00003b8a <I2C_enable>:
    3b8a:	80 91 9e 04 	lds	r24, 0x049E
    3b8e:	81 30       	cpi	r24, 0x01	; 1
    3b90:	29 f4       	brne	.+10     	; 0x3b9c <I2C_enable+0x12>
    3b92:	80 91 bc 00 	lds	r24, 0x00BC
    3b96:	84 60       	ori	r24, 0x04	; 4
    3b98:	80 93 bc 00 	sts	0x00BC, r24
    3b9c:	08 95       	ret

00003b9e <__I2C_init>:
    3b9e:	38 98       	cbi	0x07, 0	; 7
    3ba0:	39 98       	cbi	0x07, 1	; 7
    3ba2:	08 95       	ret

00003ba4 <__ISR_attach>:
    3ba4:	80 32       	cpi	r24, 0x20	; 32
    3ba6:	18 f0       	brcs	.+6      	; 0x3bae <__ISR_attach+0xa>
    3ba8:	20 e0       	ldi	r18, 0x00	; 0
    3baa:	30 e0       	ldi	r19, 0x00	; 0
    3bac:	0a c0       	rjmp	.+20     	; 0x3bc2 <__ISR_attach+0x1e>
    3bae:	e8 2f       	mov	r30, r24
    3bb0:	f0 e0       	ldi	r31, 0x00	; 0
    3bb2:	ee 0f       	add	r30, r30
    3bb4:	ff 1f       	adc	r31, r31
    3bb6:	e4 52       	subi	r30, 0x24	; 36
    3bb8:	fe 4f       	sbci	r31, 0xFE	; 254
    3bba:	20 81       	ld	r18, Z
    3bbc:	31 81       	ldd	r19, Z+1	; 0x01
    3bbe:	71 83       	std	Z+1, r23	; 0x01
    3bc0:	60 83       	st	Z, r22
    3bc2:	c9 01       	movw	r24, r18
    3bc4:	08 95       	ret

00003bc6 <__ATMEGA_init>:
    3bc6:	24 9a       	sbi	0x04, 4	; 4
    3bc8:	2c 9a       	sbi	0x05, 4	; 5
    3bca:	08 95       	ret

00003bcc <SPI_default_config>:
    3bcc:	83 e5       	ldi	r24, 0x53	; 83
    3bce:	8c bd       	out	0x2c, r24	; 44
    3bd0:	81 e0       	ldi	r24, 0x01	; 1
    3bd2:	8d bd       	out	0x2d, r24	; 45
    3bd4:	8d e0       	ldi	r24, 0x0D	; 13
    3bd6:	8a 95       	dec	r24
    3bd8:	f1 f7       	brne	.-4      	; 0x3bd6 <SPI_default_config+0xa>
    3bda:	08 95       	ret

00003bdc <SPI_ATtiny0_config>:
    3bdc:	83 e5       	ldi	r24, 0x53	; 83
    3bde:	8c bd       	out	0x2c, r24	; 44
    3be0:	1d bc       	out	0x2d, r1	; 45
    3be2:	84 ef       	ldi	r24, 0xF4	; 244
    3be4:	91 e0       	ldi	r25, 0x01	; 1
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	f1 f7       	brne	.-4      	; 0x3be6 <SPI_ATtiny0_config+0xa>
    3bea:	08 95       	ret

00003bec <SPI_PSXC_config>:
    3bec:	8f e7       	ldi	r24, 0x7F	; 127
    3bee:	8c bd       	out	0x2c, r24	; 44
    3bf0:	1d bc       	out	0x2d, r1	; 45
    3bf2:	84 ef       	ldi	r24, 0xF4	; 244
    3bf4:	91 e0       	ldi	r25, 0x01	; 1
    3bf6:	01 97       	sbiw	r24, 0x01	; 1
    3bf8:	f1 f7       	brne	.-4      	; 0x3bf6 <SPI_PSXC_config+0xa>
    3bfa:	08 95       	ret

00003bfc <SPI_LCD_config>:
    3bfc:	83 e5       	ldi	r24, 0x53	; 83
    3bfe:	8c bd       	out	0x2c, r24	; 44
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	8d bd       	out	0x2d, r24	; 45
    3c04:	8d e0       	ldi	r24, 0x0D	; 13
    3c06:	8a 95       	dec	r24
    3c08:	f1 f7       	brne	.-4      	; 0x3c06 <SPI_LCD_config+0xa>
    3c0a:	08 95       	ret

00003c0c <SPI_FLASH_config>:
    3c0c:	83 e5       	ldi	r24, 0x53	; 83
    3c0e:	8c bd       	out	0x2c, r24	; 44
    3c10:	81 e0       	ldi	r24, 0x01	; 1
    3c12:	8d bd       	out	0x2d, r24	; 45
    3c14:	84 ef       	ldi	r24, 0xF4	; 244
    3c16:	91 e0       	ldi	r25, 0x01	; 1
    3c18:	01 97       	sbiw	r24, 0x01	; 1
    3c1a:	f1 f7       	brne	.-4      	; 0x3c18 <SPI_FLASH_config+0xc>
    3c1c:	08 95       	ret

00003c1e <__SPI_init>:
    3c1e:	25 9a       	sbi	0x04, 5	; 4
    3c20:	26 98       	cbi	0x04, 6	; 4
    3c22:	27 9a       	sbi	0x04, 7	; 4
    3c24:	20 9a       	sbi	0x04, 0	; 4
    3c26:	21 9a       	sbi	0x04, 1	; 4
    3c28:	22 9a       	sbi	0x04, 2	; 4
    3c2a:	08 95       	ret

00003c2c <SPKR_beep>:
    3c2c:	9b 01       	movw	r18, r22
    3c2e:	ac 01       	movw	r20, r24
    3c30:	80 91 2d 02 	lds	r24, 0x022D
    3c34:	88 23       	and	r24, r24
    3c36:	81 f0       	breq	.+32     	; 0x3c58 <SPKR_beep+0x2c>
    3c38:	da 01       	movw	r26, r20
    3c3a:	c9 01       	movw	r24, r18
    3c3c:	88 0f       	add	r24, r24
    3c3e:	99 1f       	adc	r25, r25
    3c40:	aa 1f       	adc	r26, r26
    3c42:	bb 1f       	adc	r27, r27
    3c44:	90 93 39 02 	sts	0x0239, r25
    3c48:	80 93 38 02 	sts	0x0238, r24
    3c4c:	21 15       	cp	r18, r1
    3c4e:	31 05       	cpc	r19, r1
    3c50:	41 05       	cpc	r20, r1
    3c52:	51 05       	cpc	r21, r1
    3c54:	09 f4       	brne	.+2      	; 0x3c58 <SPKR_beep+0x2c>
    3c56:	5f 98       	cbi	0x0b, 7	; 11
    3c58:	08 95       	ret

00003c5a <__SPKR_close>:
    3c5a:	82 30       	cpi	r24, 0x02	; 2
    3c5c:	29 f4       	brne	.+10     	; 0x3c68 <__SPKR_close+0xe>
    3c5e:	80 91 81 00 	lds	r24, 0x0081
    3c62:	8e 7f       	andi	r24, 0xFE	; 254
    3c64:	80 93 81 00 	sts	0x0081, r24
    3c68:	80 91 2c 02 	lds	r24, 0x022C
    3c6c:	81 30       	cpi	r24, 0x01	; 1
    3c6e:	31 f4       	brne	.+12     	; 0x3c7c <__SPKR_close+0x22>
    3c70:	80 91 2d 02 	lds	r24, 0x022D
    3c74:	81 30       	cpi	r24, 0x01	; 1
    3c76:	11 f4       	brne	.+4      	; 0x3c7c <__SPKR_close+0x22>
    3c78:	00 00       	nop
    3c7a:	08 95       	ret
    3c7c:	80 91 2c 02 	lds	r24, 0x022C
    3c80:	81 30       	cpi	r24, 0x01	; 1
    3c82:	21 f0       	breq	.+8      	; 0x3c8c <__SPKR_close+0x32>
    3c84:	80 91 2d 02 	lds	r24, 0x022D
    3c88:	81 30       	cpi	r24, 0x01	; 1
    3c8a:	11 f4       	brne	.+4      	; 0x3c90 <__SPKR_close+0x36>
    3c8c:	5f 98       	cbi	0x0b, 7	; 11
    3c8e:	57 98       	cbi	0x0a, 7	; 10
    3c90:	08 95       	ret

00003c92 <STEPPER_set_decel_step_values>:
    3c92:	ef 92       	push	r14
    3c94:	ff 92       	push	r15
    3c96:	0f 93       	push	r16
    3c98:	1f 93       	push	r17
    3c9a:	cf 93       	push	r28
    3c9c:	df 93       	push	r29
    3c9e:	eb 01       	movw	r28, r22
    3ca0:	88 23       	and	r24, r24
    3ca2:	21 f0       	breq	.+8      	; 0x3cac <STEPPER_set_decel_step_values+0x1a>
    3ca4:	81 30       	cpi	r24, 0x01	; 1
    3ca6:	09 f0       	breq	.+2      	; 0x3caa <STEPPER_set_decel_step_values+0x18>
    3ca8:	5a c0       	rjmp	.+180    	; 0x3d5e <STEPPER_set_decel_step_values+0xcc>
    3caa:	2d c0       	rjmp	.+90     	; 0x3d06 <STEPPER_set_decel_step_values+0x74>
    3cac:	9a 01       	movw	r18, r20
    3cae:	40 e0       	ldi	r20, 0x00	; 0
    3cb0:	50 e0       	ldi	r21, 0x00	; 0
    3cb2:	ca 01       	movw	r24, r20
    3cb4:	b9 01       	movw	r22, r18
    3cb6:	0e 94 a0 29 	call	0x5340	; 0x5340 <__mulsi3>
    3cba:	20 91 35 04 	lds	r18, 0x0435
    3cbe:	30 91 36 04 	lds	r19, 0x0436
    3cc2:	22 0f       	add	r18, r18
    3cc4:	33 1f       	adc	r19, r19
    3cc6:	40 e0       	ldi	r20, 0x00	; 0
    3cc8:	50 e0       	ldi	r21, 0x00	; 0
    3cca:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__udivmodsi4>
    3cce:	79 01       	movw	r14, r18
    3cd0:	8a 01       	movw	r16, r20
    3cd2:	a8 01       	movw	r20, r16
    3cd4:	97 01       	movw	r18, r14
    3cd6:	22 0f       	add	r18, r18
    3cd8:	33 1f       	adc	r19, r19
    3cda:	44 1f       	adc	r20, r20
    3cdc:	55 1f       	adc	r21, r21
    3cde:	ce 01       	movw	r24, r28
    3ce0:	a0 e0       	ldi	r26, 0x00	; 0
    3ce2:	b0 e0       	ldi	r27, 0x00	; 0
    3ce4:	82 17       	cp	r24, r18
    3ce6:	93 07       	cpc	r25, r19
    3ce8:	a4 07       	cpc	r26, r20
    3cea:	b5 07       	cpc	r27, r21
    3cec:	28 f0       	brcs	.+10     	; 0x3cf8 <STEPPER_set_decel_step_values+0x66>
    3cee:	f0 92 42 04 	sts	0x0442, r15
    3cf2:	e0 92 41 04 	sts	0x0441, r14
    3cf6:	33 c0       	rjmp	.+102    	; 0x3d5e <STEPPER_set_decel_step_values+0xcc>
    3cf8:	d6 95       	lsr	r29
    3cfa:	c7 95       	ror	r28
    3cfc:	d0 93 42 04 	sts	0x0442, r29
    3d00:	c0 93 41 04 	sts	0x0441, r28
    3d04:	2c c0       	rjmp	.+88     	; 0x3d5e <STEPPER_set_decel_step_values+0xcc>
    3d06:	9a 01       	movw	r18, r20
    3d08:	40 e0       	ldi	r20, 0x00	; 0
    3d0a:	50 e0       	ldi	r21, 0x00	; 0
    3d0c:	ca 01       	movw	r24, r20
    3d0e:	b9 01       	movw	r22, r18
    3d10:	0e 94 a0 29 	call	0x5340	; 0x5340 <__mulsi3>
    3d14:	20 91 37 04 	lds	r18, 0x0437
    3d18:	30 91 38 04 	lds	r19, 0x0438
    3d1c:	22 0f       	add	r18, r18
    3d1e:	33 1f       	adc	r19, r19
    3d20:	40 e0       	ldi	r20, 0x00	; 0
    3d22:	50 e0       	ldi	r21, 0x00	; 0
    3d24:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__udivmodsi4>
    3d28:	79 01       	movw	r14, r18
    3d2a:	8a 01       	movw	r16, r20
    3d2c:	a8 01       	movw	r20, r16
    3d2e:	97 01       	movw	r18, r14
    3d30:	22 0f       	add	r18, r18
    3d32:	33 1f       	adc	r19, r19
    3d34:	44 1f       	adc	r20, r20
    3d36:	55 1f       	adc	r21, r21
    3d38:	ce 01       	movw	r24, r28
    3d3a:	a0 e0       	ldi	r26, 0x00	; 0
    3d3c:	b0 e0       	ldi	r27, 0x00	; 0
    3d3e:	82 17       	cp	r24, r18
    3d40:	93 07       	cpc	r25, r19
    3d42:	a4 07       	cpc	r26, r20
    3d44:	b5 07       	cpc	r27, r21
    3d46:	28 f0       	brcs	.+10     	; 0x3d52 <STEPPER_set_decel_step_values+0xc0>
    3d48:	f0 92 44 04 	sts	0x0444, r15
    3d4c:	e0 92 43 04 	sts	0x0443, r14
    3d50:	06 c0       	rjmp	.+12     	; 0x3d5e <STEPPER_set_decel_step_values+0xcc>
    3d52:	d6 95       	lsr	r29
    3d54:	c7 95       	ror	r28
    3d56:	d0 93 44 04 	sts	0x0444, r29
    3d5a:	c0 93 43 04 	sts	0x0443, r28
    3d5e:	df 91       	pop	r29
    3d60:	cf 91       	pop	r28
    3d62:	1f 91       	pop	r17
    3d64:	0f 91       	pop	r16
    3d66:	ff 90       	pop	r15
    3d68:	ef 90       	pop	r14
    3d6a:	08 95       	ret

00003d6c <__TIMER0_COMPA_vect>:
    3d6c:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <TMRSRVC_tick>
    3d70:	0e 94 06 1f 	call	0x3e0c	; 0x3e0c <STEPPER_clk>
    3d74:	0e 94 df 1e 	call	0x3dbe	; 0x3dbe <SPKR_beep_clk>
    3d78:	08 95       	ret

00003d7a <__TMRSRVC_init>:
    3d7a:	84 b5       	in	r24, 0x24	; 36
    3d7c:	82 60       	ori	r24, 0x02	; 2
    3d7e:	84 bd       	out	0x24, r24	; 36
    3d80:	85 b5       	in	r24, 0x25	; 37
    3d82:	84 60       	ori	r24, 0x04	; 4
    3d84:	85 bd       	out	0x25, r24	; 37
    3d86:	8e e4       	ldi	r24, 0x4E	; 78
    3d88:	87 bd       	out	0x27, r24	; 39
    3d8a:	08 95       	ret

00003d8c <TMRSRVC_tick>:
    3d8c:	88 e0       	ldi	r24, 0x08	; 8
    3d8e:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    3d92:	88 23       	and	r24, r24
    3d94:	11 f4       	brne	.+4      	; 0x3d9a <TMRSRVC_tick+0xe>
    3d96:	84 e0       	ldi	r24, 0x04	; 4
    3d98:	08 95       	ret
    3d9a:	80 91 3d 02 	lds	r24, 0x023D
    3d9e:	88 23       	and	r24, r24
    3da0:	11 f4       	brne	.+4      	; 0x3da6 <TMRSRVC_tick+0x1a>
    3da2:	83 e0       	ldi	r24, 0x03	; 3
    3da4:	08 95       	ret
    3da6:	80 91 3c 02 	lds	r24, 0x023C
    3daa:	88 23       	and	r24, r24
    3dac:	11 f0       	breq	.+4      	; 0x3db2 <TMRSRVC_tick+0x26>
    3dae:	82 e0       	ldi	r24, 0x02	; 2
    3db0:	08 95       	ret
    3db2:	0e 94 78 21 	call	0x42f0	; 0x42f0 <TMRSRVC_process>
    3db6:	81 30       	cpi	r24, 0x01	; 1
    3db8:	e1 f3       	breq	.-8      	; 0x3db2 <TMRSRVC_tick+0x26>
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	08 95       	ret

00003dbe <SPKR_beep_clk>:
    3dbe:	80 91 2d 02 	lds	r24, 0x022D
    3dc2:	81 30       	cpi	r24, 0x01	; 1
    3dc4:	11 f5       	brne	.+68     	; 0x3e0a <SPKR_beep_clk+0x4c>
    3dc6:	80 91 36 02 	lds	r24, 0x0236
    3dca:	90 91 37 02 	lds	r25, 0x0237
    3dce:	20 91 38 02 	lds	r18, 0x0238
    3dd2:	30 91 39 02 	lds	r19, 0x0239
    3dd6:	28 0f       	add	r18, r24
    3dd8:	39 1f       	adc	r19, r25
    3dda:	30 93 37 02 	sts	0x0237, r19
    3dde:	20 93 36 02 	sts	0x0236, r18
    3de2:	80 91 36 02 	lds	r24, 0x0236
    3de6:	90 91 37 02 	lds	r25, 0x0237
    3dea:	88 5e       	subi	r24, 0xE8	; 232
    3dec:	93 40       	sbci	r25, 0x03	; 3
    3dee:	6c f0       	brlt	.+26     	; 0x3e0a <SPKR_beep_clk+0x4c>
    3df0:	8b b1       	in	r24, 0x0b	; 11
    3df2:	80 58       	subi	r24, 0x80	; 128
    3df4:	8b b9       	out	0x0b, r24	; 11
    3df6:	80 91 36 02 	lds	r24, 0x0236
    3dfa:	90 91 37 02 	lds	r25, 0x0237
    3dfe:	88 5e       	subi	r24, 0xE8	; 232
    3e00:	93 40       	sbci	r25, 0x03	; 3
    3e02:	90 93 37 02 	sts	0x0237, r25
    3e06:	80 93 36 02 	sts	0x0236, r24
    3e0a:	08 95       	ret

00003e0c <STEPPER_clk>:
    3e0c:	87 e0       	ldi	r24, 0x07	; 7
    3e0e:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <SYS_get_state>
    3e12:	81 30       	cpi	r24, 0x01	; 1
    3e14:	09 f0       	breq	.+2      	; 0x3e18 <STEPPER_clk+0xc>
    3e16:	aa c0       	rjmp	.+340    	; 0x3f6c <STEPPER_clk+0x160>
    3e18:	80 91 35 04 	lds	r24, 0x0435
    3e1c:	90 91 36 04 	lds	r25, 0x0436
    3e20:	89 2b       	or	r24, r25
    3e22:	09 f1       	breq	.+66     	; 0x3e66 <STEPPER_clk+0x5a>
    3e24:	80 91 59 04 	lds	r24, 0x0459
    3e28:	90 91 5a 04 	lds	r25, 0x045A
    3e2c:	20 91 35 04 	lds	r18, 0x0435
    3e30:	30 91 36 04 	lds	r19, 0x0436
    3e34:	82 0f       	add	r24, r18
    3e36:	93 1f       	adc	r25, r19
    3e38:	90 93 5a 04 	sts	0x045A, r25
    3e3c:	80 93 59 04 	sts	0x0459, r24
    3e40:	80 91 59 04 	lds	r24, 0x0459
    3e44:	90 91 5a 04 	lds	r25, 0x045A
    3e48:	88 5e       	subi	r24, 0xE8	; 232
    3e4a:	93 40       	sbci	r25, 0x03	; 3
    3e4c:	a4 f0       	brlt	.+40     	; 0x3e76 <STEPPER_clk+0x6a>
    3e4e:	80 91 59 04 	lds	r24, 0x0459
    3e52:	90 91 5a 04 	lds	r25, 0x045A
    3e56:	88 5e       	subi	r24, 0xE8	; 232
    3e58:	93 40       	sbci	r25, 0x03	; 3
    3e5a:	90 93 5a 04 	sts	0x045A, r25
    3e5e:	80 93 59 04 	sts	0x0459, r24
    3e62:	41 e0       	ldi	r20, 0x01	; 1
    3e64:	09 c0       	rjmp	.+18     	; 0x3e78 <STEPPER_clk+0x6c>
    3e66:	80 91 2d 04 	lds	r24, 0x042D
    3e6a:	90 91 2e 04 	lds	r25, 0x042E
    3e6e:	90 93 32 04 	sts	0x0432, r25
    3e72:	80 93 31 04 	sts	0x0431, r24
    3e76:	40 e0       	ldi	r20, 0x00	; 0
    3e78:	80 91 37 04 	lds	r24, 0x0437
    3e7c:	90 91 38 04 	lds	r25, 0x0438
    3e80:	89 2b       	or	r24, r25
    3e82:	09 f1       	breq	.+66     	; 0x3ec6 <STEPPER_clk+0xba>
    3e84:	80 91 5b 04 	lds	r24, 0x045B
    3e88:	90 91 5c 04 	lds	r25, 0x045C
    3e8c:	20 91 37 04 	lds	r18, 0x0437
    3e90:	30 91 38 04 	lds	r19, 0x0438
    3e94:	82 0f       	add	r24, r18
    3e96:	93 1f       	adc	r25, r19
    3e98:	90 93 5c 04 	sts	0x045C, r25
    3e9c:	80 93 5b 04 	sts	0x045B, r24
    3ea0:	80 91 5b 04 	lds	r24, 0x045B
    3ea4:	90 91 5c 04 	lds	r25, 0x045C
    3ea8:	88 5e       	subi	r24, 0xE8	; 232
    3eaa:	93 40       	sbci	r25, 0x03	; 3
    3eac:	a4 f0       	brlt	.+40     	; 0x3ed6 <STEPPER_clk+0xca>
    3eae:	80 91 5b 04 	lds	r24, 0x045B
    3eb2:	90 91 5c 04 	lds	r25, 0x045C
    3eb6:	88 5e       	subi	r24, 0xE8	; 232
    3eb8:	93 40       	sbci	r25, 0x03	; 3
    3eba:	90 93 5c 04 	sts	0x045C, r25
    3ebe:	80 93 5b 04 	sts	0x045B, r24
    3ec2:	61 e0       	ldi	r22, 0x01	; 1
    3ec4:	09 c0       	rjmp	.+18     	; 0x3ed8 <STEPPER_clk+0xcc>
    3ec6:	80 91 2f 04 	lds	r24, 0x042F
    3eca:	90 91 30 04 	lds	r25, 0x0430
    3ece:	90 93 34 04 	sts	0x0434, r25
    3ed2:	80 93 33 04 	sts	0x0433, r24
    3ed6:	60 e0       	ldi	r22, 0x00	; 0
    3ed8:	84 2f       	mov	r24, r20
    3eda:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <STEPPER_process_accel>
    3ede:	80 91 55 04 	lds	r24, 0x0455
    3ee2:	90 91 56 04 	lds	r25, 0x0456
    3ee6:	20 91 31 04 	lds	r18, 0x0431
    3eea:	30 91 32 04 	lds	r19, 0x0432
    3eee:	28 0f       	add	r18, r24
    3ef0:	39 1f       	adc	r19, r25
    3ef2:	30 93 56 04 	sts	0x0456, r19
    3ef6:	20 93 55 04 	sts	0x0455, r18
    3efa:	80 91 55 04 	lds	r24, 0x0455
    3efe:	90 91 56 04 	lds	r25, 0x0456
    3f02:	88 5e       	subi	r24, 0xE8	; 232
    3f04:	93 40       	sbci	r25, 0x03	; 3
    3f06:	14 f4       	brge	.+4      	; 0x3f0c <STEPPER_clk+0x100>
    3f08:	40 e0       	ldi	r20, 0x00	; 0
    3f0a:	0b c0       	rjmp	.+22     	; 0x3f22 <STEPPER_clk+0x116>
    3f0c:	80 91 55 04 	lds	r24, 0x0455
    3f10:	90 91 56 04 	lds	r25, 0x0456
    3f14:	88 5e       	subi	r24, 0xE8	; 232
    3f16:	93 40       	sbci	r25, 0x03	; 3
    3f18:	90 93 56 04 	sts	0x0456, r25
    3f1c:	80 93 55 04 	sts	0x0455, r24
    3f20:	41 e0       	ldi	r20, 0x01	; 1
    3f22:	80 91 57 04 	lds	r24, 0x0457
    3f26:	90 91 58 04 	lds	r25, 0x0458
    3f2a:	20 91 33 04 	lds	r18, 0x0433
    3f2e:	30 91 34 04 	lds	r19, 0x0434
    3f32:	28 0f       	add	r18, r24
    3f34:	39 1f       	adc	r19, r25
    3f36:	30 93 58 04 	sts	0x0458, r19
    3f3a:	20 93 57 04 	sts	0x0457, r18
    3f3e:	80 91 57 04 	lds	r24, 0x0457
    3f42:	90 91 58 04 	lds	r25, 0x0458
    3f46:	88 5e       	subi	r24, 0xE8	; 232
    3f48:	93 40       	sbci	r25, 0x03	; 3
    3f4a:	14 f4       	brge	.+4      	; 0x3f50 <STEPPER_clk+0x144>
    3f4c:	60 e0       	ldi	r22, 0x00	; 0
    3f4e:	0b c0       	rjmp	.+22     	; 0x3f66 <STEPPER_clk+0x15a>
    3f50:	80 91 57 04 	lds	r24, 0x0457
    3f54:	90 91 58 04 	lds	r25, 0x0458
    3f58:	88 5e       	subi	r24, 0xE8	; 232
    3f5a:	93 40       	sbci	r25, 0x03	; 3
    3f5c:	90 93 58 04 	sts	0x0458, r25
    3f60:	80 93 57 04 	sts	0x0457, r24
    3f64:	61 e0       	ldi	r22, 0x01	; 1
    3f66:	84 2f       	mov	r24, r20
    3f68:	0e 94 fc 1f 	call	0x3ff8	; 0x3ff8 <STEPPER_process_run_mode>
    3f6c:	08 95       	ret

00003f6e <STEPPER_process_accel>:
    3f6e:	88 23       	and	r24, r24
    3f70:	f1 f0       	breq	.+60     	; 0x3fae <STEPPER_process_accel+0x40>
    3f72:	20 91 2d 04 	lds	r18, 0x042D
    3f76:	30 91 2e 04 	lds	r19, 0x042E
    3f7a:	80 91 31 04 	lds	r24, 0x0431
    3f7e:	90 91 32 04 	lds	r25, 0x0432
    3f82:	28 1b       	sub	r18, r24
    3f84:	39 0b       	sbc	r19, r25
    3f86:	12 16       	cp	r1, r18
    3f88:	13 06       	cpc	r1, r19
    3f8a:	34 f4       	brge	.+12     	; 0x3f98 <STEPPER_process_accel+0x2a>
    3f8c:	80 91 31 04 	lds	r24, 0x0431
    3f90:	90 91 32 04 	lds	r25, 0x0432
    3f94:	01 96       	adiw	r24, 0x01	; 1
    3f96:	07 c0       	rjmp	.+14     	; 0x3fa6 <STEPPER_process_accel+0x38>
    3f98:	23 2b       	or	r18, r19
    3f9a:	49 f0       	breq	.+18     	; 0x3fae <STEPPER_process_accel+0x40>
    3f9c:	80 91 31 04 	lds	r24, 0x0431
    3fa0:	90 91 32 04 	lds	r25, 0x0432
    3fa4:	01 97       	sbiw	r24, 0x01	; 1
    3fa6:	90 93 32 04 	sts	0x0432, r25
    3faa:	80 93 31 04 	sts	0x0431, r24
    3fae:	66 23       	and	r22, r22
    3fb0:	11 f1       	breq	.+68     	; 0x3ff6 <STEPPER_process_accel+0x88>
    3fb2:	20 91 2f 04 	lds	r18, 0x042F
    3fb6:	30 91 30 04 	lds	r19, 0x0430
    3fba:	80 91 33 04 	lds	r24, 0x0433
    3fbe:	90 91 34 04 	lds	r25, 0x0434
    3fc2:	28 1b       	sub	r18, r24
    3fc4:	39 0b       	sbc	r19, r25
    3fc6:	12 16       	cp	r1, r18
    3fc8:	13 06       	cpc	r1, r19
    3fca:	54 f4       	brge	.+20     	; 0x3fe0 <STEPPER_process_accel+0x72>
    3fcc:	80 91 33 04 	lds	r24, 0x0433
    3fd0:	90 91 34 04 	lds	r25, 0x0434
    3fd4:	01 96       	adiw	r24, 0x01	; 1
    3fd6:	90 93 34 04 	sts	0x0434, r25
    3fda:	80 93 33 04 	sts	0x0433, r24
    3fde:	08 95       	ret
    3fe0:	23 2b       	or	r18, r19
    3fe2:	49 f0       	breq	.+18     	; 0x3ff6 <STEPPER_process_accel+0x88>
    3fe4:	80 91 33 04 	lds	r24, 0x0433
    3fe8:	90 91 34 04 	lds	r25, 0x0434
    3fec:	01 97       	sbiw	r24, 0x01	; 1
    3fee:	90 93 34 04 	sts	0x0434, r25
    3ff2:	80 93 33 04 	sts	0x0433, r24
    3ff6:	08 95       	ret

00003ff8 <STEPPER_process_run_mode>:
    3ff8:	0f 93       	push	r16
    3ffa:	1f 93       	push	r17
    3ffc:	18 2f       	mov	r17, r24
    3ffe:	06 2f       	mov	r16, r22
    4000:	80 91 61 04 	lds	r24, 0x0461
    4004:	88 23       	and	r24, r24
    4006:	09 f0       	breq	.+2      	; 0x400a <STEPPER_process_run_mode+0x12>
    4008:	e7 c0       	rjmp	.+462    	; 0x41d8 <STEPPER_process_run_mode+0x1e0>
    400a:	80 91 49 04 	lds	r24, 0x0449
    400e:	88 23       	and	r24, r24
    4010:	09 f0       	breq	.+2      	; 0x4014 <STEPPER_process_run_mode+0x1c>
    4012:	5a c0       	rjmp	.+180    	; 0x40c8 <STEPPER_process_run_mode+0xd0>
    4014:	80 91 31 04 	lds	r24, 0x0431
    4018:	90 91 32 04 	lds	r25, 0x0432
    401c:	89 2b       	or	r24, r25
    401e:	e9 f4       	brne	.+58     	; 0x405a <STEPPER_process_run_mode+0x62>
    4020:	80 91 3e 02 	lds	r24, 0x023E
    4024:	83 7e       	andi	r24, 0xE3	; 227
    4026:	80 93 3e 02 	sts	0x023E, r24
    402a:	10 92 52 04 	sts	0x0452, r1
    402e:	80 91 5d 04 	lds	r24, 0x045D
    4032:	88 23       	and	r24, r24
    4034:	09 f4       	brne	.+2      	; 0x4038 <STEPPER_process_run_mode+0x40>
    4036:	5d c0       	rjmp	.+186    	; 0x40f2 <STEPPER_process_run_mode+0xfa>
    4038:	60 91 4b 04 	lds	r22, 0x044B
    403c:	80 e0       	ldi	r24, 0x00	; 0
    403e:	0e 94 53 21 	call	0x42a6	; 0x42a6 <STEPPER_stop>
    4042:	e0 91 5f 04 	lds	r30, 0x045F
    4046:	f0 91 60 04 	lds	r31, 0x0460
    404a:	30 97       	sbiw	r30, 0x00	; 0
    404c:	09 f4       	brne	.+2      	; 0x4050 <STEPPER_process_run_mode+0x58>
    404e:	51 c0       	rjmp	.+162    	; 0x40f2 <STEPPER_process_run_mode+0xfa>
    4050:	81 e0       	ldi	r24, 0x01	; 1
    4052:	80 83       	st	Z, r24
    4054:	10 92 5d 04 	sts	0x045D, r1
    4058:	4c c0       	rjmp	.+152    	; 0x40f2 <STEPPER_process_run_mode+0xfa>
    405a:	80 91 2b 04 	lds	r24, 0x042B
    405e:	81 30       	cpi	r24, 0x01	; 1
    4060:	41 f4       	brne	.+16     	; 0x4072 <STEPPER_process_run_mode+0x7a>
    4062:	80 91 3d 04 	lds	r24, 0x043D
    4066:	90 91 3e 04 	lds	r25, 0x043E
    406a:	01 97       	sbiw	r24, 0x01	; 1
    406c:	11 f4       	brne	.+4      	; 0x4072 <STEPPER_process_run_mode+0x7a>
    406e:	11 e0       	ldi	r17, 0x01	; 1
    4070:	02 c0       	rjmp	.+4      	; 0x4076 <STEPPER_process_run_mode+0x7e>
    4072:	11 23       	and	r17, r17
    4074:	f1 f1       	breq	.+124    	; 0x40f2 <STEPPER_process_run_mode+0xfa>
    4076:	e0 91 50 04 	lds	r30, 0x0450
    407a:	f0 e0       	ldi	r31, 0x00	; 0
    407c:	e4 5b       	subi	r30, 0xB4	; 180
    407e:	fe 4f       	sbci	r31, 0xFE	; 254
    4080:	90 91 3e 02 	lds	r25, 0x023E
    4084:	93 7e       	andi	r25, 0xE3	; 227
    4086:	80 81       	ld	r24, Z
    4088:	89 2b       	or	r24, r25
    408a:	80 93 3e 02 	sts	0x023E, r24
    408e:	80 91 4e 04 	lds	r24, 0x044E
    4092:	88 23       	and	r24, r24
    4094:	21 f4       	brne	.+8      	; 0x409e <STEPPER_process_run_mode+0xa6>
    4096:	80 91 50 04 	lds	r24, 0x0450
    409a:	8f 5f       	subi	r24, 0xFF	; 255
    409c:	03 c0       	rjmp	.+6      	; 0x40a4 <STEPPER_process_run_mode+0xac>
    409e:	80 91 50 04 	lds	r24, 0x0450
    40a2:	81 50       	subi	r24, 0x01	; 1
    40a4:	80 93 50 04 	sts	0x0450, r24
    40a8:	80 91 50 04 	lds	r24, 0x0450
    40ac:	83 70       	andi	r24, 0x03	; 3
    40ae:	80 93 50 04 	sts	0x0450, r24
    40b2:	81 e0       	ldi	r24, 0x01	; 1
    40b4:	80 93 52 04 	sts	0x0452, r24
    40b8:	80 91 2b 04 	lds	r24, 0x042B
    40bc:	81 30       	cpi	r24, 0x01	; 1
    40be:	c9 f4       	brne	.+50     	; 0x40f2 <STEPPER_process_run_mode+0xfa>
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	0e 94 ff 20 	call	0x41fe	; 0x41fe <STEPPER_process_step_mode>
    40c6:	15 c0       	rjmp	.+42     	; 0x40f2 <STEPPER_process_run_mode+0xfa>
    40c8:	90 91 3e 02 	lds	r25, 0x023E
    40cc:	93 7e       	andi	r25, 0xE3	; 227
    40ce:	90 93 3e 02 	sts	0x023E, r25
    40d2:	e0 91 50 04 	lds	r30, 0x0450
    40d6:	f0 e0       	ldi	r31, 0x00	; 0
    40d8:	e4 5b       	subi	r30, 0xB4	; 180
    40da:	fe 4f       	sbci	r31, 0xFE	; 254
    40dc:	80 81       	ld	r24, Z
    40de:	89 2b       	or	r24, r25
    40e0:	80 93 3e 02 	sts	0x023E, r24
    40e4:	82 e0       	ldi	r24, 0x02	; 2
    40e6:	80 93 52 04 	sts	0x0452, r24
    40ea:	10 92 32 04 	sts	0x0432, r1
    40ee:	10 92 31 04 	sts	0x0431, r1
    40f2:	80 91 4a 04 	lds	r24, 0x044A
    40f6:	88 23       	and	r24, r24
    40f8:	09 f0       	breq	.+2      	; 0x40fc <STEPPER_process_run_mode+0x104>
    40fa:	59 c0       	rjmp	.+178    	; 0x41ae <STEPPER_process_run_mode+0x1b6>
    40fc:	80 91 33 04 	lds	r24, 0x0433
    4100:	90 91 34 04 	lds	r25, 0x0434
    4104:	89 2b       	or	r24, r25
    4106:	e9 f4       	brne	.+58     	; 0x4142 <STEPPER_process_run_mode+0x14a>
    4108:	80 91 3e 02 	lds	r24, 0x023E
    410c:	8f 71       	andi	r24, 0x1F	; 31
    410e:	80 93 3e 02 	sts	0x023E, r24
    4112:	10 92 53 04 	sts	0x0453, r1
    4116:	80 91 5e 04 	lds	r24, 0x045E
    411a:	88 23       	and	r24, r24
    411c:	09 f4       	brne	.+2      	; 0x4120 <STEPPER_process_run_mode+0x128>
    411e:	5c c0       	rjmp	.+184    	; 0x41d8 <STEPPER_process_run_mode+0x1e0>
    4120:	60 91 4c 04 	lds	r22, 0x044C
    4124:	81 e0       	ldi	r24, 0x01	; 1
    4126:	0e 94 53 21 	call	0x42a6	; 0x42a6 <STEPPER_stop>
    412a:	e0 91 5f 04 	lds	r30, 0x045F
    412e:	f0 91 60 04 	lds	r31, 0x0460
    4132:	30 97       	sbiw	r30, 0x00	; 0
    4134:	09 f4       	brne	.+2      	; 0x4138 <STEPPER_process_run_mode+0x140>
    4136:	50 c0       	rjmp	.+160    	; 0x41d8 <STEPPER_process_run_mode+0x1e0>
    4138:	81 e0       	ldi	r24, 0x01	; 1
    413a:	81 83       	std	Z+1, r24	; 0x01
    413c:	10 92 5e 04 	sts	0x045E, r1
    4140:	4b c0       	rjmp	.+150    	; 0x41d8 <STEPPER_process_run_mode+0x1e0>
    4142:	80 91 2c 04 	lds	r24, 0x042C
    4146:	81 30       	cpi	r24, 0x01	; 1
    4148:	41 f4       	brne	.+16     	; 0x415a <STEPPER_process_run_mode+0x162>
    414a:	80 91 3f 04 	lds	r24, 0x043F
    414e:	90 91 40 04 	lds	r25, 0x0440
    4152:	01 97       	sbiw	r24, 0x01	; 1
    4154:	11 f4       	brne	.+4      	; 0x415a <STEPPER_process_run_mode+0x162>
    4156:	01 e0       	ldi	r16, 0x01	; 1
    4158:	02 c0       	rjmp	.+4      	; 0x415e <STEPPER_process_run_mode+0x166>
    415a:	00 23       	and	r16, r16
    415c:	e9 f1       	breq	.+122    	; 0x41d8 <STEPPER_process_run_mode+0x1e0>
    415e:	e0 91 51 04 	lds	r30, 0x0451
    4162:	f0 e0       	ldi	r31, 0x00	; 0
    4164:	e0 5b       	subi	r30, 0xB0	; 176
    4166:	fe 4f       	sbci	r31, 0xFE	; 254
    4168:	90 91 3e 02 	lds	r25, 0x023E
    416c:	9f 71       	andi	r25, 0x1F	; 31
    416e:	80 81       	ld	r24, Z
    4170:	89 2b       	or	r24, r25
    4172:	80 93 3e 02 	sts	0x023E, r24
    4176:	80 91 4f 04 	lds	r24, 0x044F
    417a:	88 23       	and	r24, r24
    417c:	21 f4       	brne	.+8      	; 0x4186 <STEPPER_process_run_mode+0x18e>
    417e:	80 91 51 04 	lds	r24, 0x0451
    4182:	8f 5f       	subi	r24, 0xFF	; 255
    4184:	03 c0       	rjmp	.+6      	; 0x418c <STEPPER_process_run_mode+0x194>
    4186:	80 91 51 04 	lds	r24, 0x0451
    418a:	81 50       	subi	r24, 0x01	; 1
    418c:	80 93 51 04 	sts	0x0451, r24
    4190:	80 91 51 04 	lds	r24, 0x0451
    4194:	83 70       	andi	r24, 0x03	; 3
    4196:	80 93 51 04 	sts	0x0451, r24
    419a:	81 e0       	ldi	r24, 0x01	; 1
    419c:	80 93 53 04 	sts	0x0453, r24
    41a0:	80 91 2c 04 	lds	r24, 0x042C
    41a4:	81 30       	cpi	r24, 0x01	; 1
    41a6:	c1 f4       	brne	.+48     	; 0x41d8 <STEPPER_process_run_mode+0x1e0>
    41a8:	0e 94 ff 20 	call	0x41fe	; 0x41fe <STEPPER_process_step_mode>
    41ac:	15 c0       	rjmp	.+42     	; 0x41d8 <STEPPER_process_run_mode+0x1e0>
    41ae:	90 91 3e 02 	lds	r25, 0x023E
    41b2:	9f 71       	andi	r25, 0x1F	; 31
    41b4:	90 93 3e 02 	sts	0x023E, r25
    41b8:	e0 91 51 04 	lds	r30, 0x0451
    41bc:	f0 e0       	ldi	r31, 0x00	; 0
    41be:	e0 5b       	subi	r30, 0xB0	; 176
    41c0:	fe 4f       	sbci	r31, 0xFE	; 254
    41c2:	80 81       	ld	r24, Z
    41c4:	89 2b       	or	r24, r25
    41c6:	80 93 3e 02 	sts	0x023E, r24
    41ca:	82 e0       	ldi	r24, 0x02	; 2
    41cc:	80 93 53 04 	sts	0x0453, r24
    41d0:	10 92 34 04 	sts	0x0434, r1
    41d4:	10 92 33 04 	sts	0x0433, r1
    41d8:	80 91 54 04 	lds	r24, 0x0454
    41dc:	88 23       	and	r24, r24
    41de:	31 f4       	brne	.+12     	; 0x41ec <STEPPER_process_run_mode+0x1f4>
    41e0:	8e e3       	ldi	r24, 0x3E	; 62
    41e2:	92 e0       	ldi	r25, 0x02	; 2
    41e4:	61 2f       	mov	r22, r17
    41e6:	40 2f       	mov	r20, r16
    41e8:	0e 94 e6 21 	call	0x43cc	; 0x43cc <STEPPER_process_pwm>
    41ec:	88 b1       	in	r24, 0x08	; 8
    41ee:	83 70       	andi	r24, 0x03	; 3
    41f0:	90 91 3e 02 	lds	r25, 0x023E
    41f4:	89 2b       	or	r24, r25
    41f6:	88 b9       	out	0x08, r24	; 8
    41f8:	1f 91       	pop	r17
    41fa:	0f 91       	pop	r16
    41fc:	08 95       	ret

000041fe <STEPPER_process_step_mode>:
    41fe:	88 23       	and	r24, r24
    4200:	21 f0       	breq	.+8      	; 0x420a <STEPPER_process_step_mode+0xc>
    4202:	81 30       	cpi	r24, 0x01	; 1
    4204:	09 f0       	breq	.+2      	; 0x4208 <STEPPER_process_step_mode+0xa>
    4206:	4e c0       	rjmp	.+156    	; 0x42a4 <STEPPER_process_step_mode+0xa6>
    4208:	27 c0       	rjmp	.+78     	; 0x4258 <STEPPER_process_step_mode+0x5a>
    420a:	80 91 3d 04 	lds	r24, 0x043D
    420e:	90 91 3e 04 	lds	r25, 0x043E
    4212:	89 2b       	or	r24, r25
    4214:	49 f0       	breq	.+18     	; 0x4228 <STEPPER_process_step_mode+0x2a>
    4216:	80 91 3d 04 	lds	r24, 0x043D
    421a:	90 91 3e 04 	lds	r25, 0x043E
    421e:	01 97       	sbiw	r24, 0x01	; 1
    4220:	90 93 3e 04 	sts	0x043E, r25
    4224:	80 93 3d 04 	sts	0x043D, r24
    4228:	80 91 5d 04 	lds	r24, 0x045D
    422c:	88 23       	and	r24, r24
    422e:	d1 f5       	brne	.+116    	; 0x42a4 <STEPPER_process_step_mode+0xa6>
    4230:	20 91 3d 04 	lds	r18, 0x043D
    4234:	30 91 3e 04 	lds	r19, 0x043E
    4238:	80 91 41 04 	lds	r24, 0x0441
    423c:	90 91 42 04 	lds	r25, 0x0442
    4240:	28 17       	cp	r18, r24
    4242:	39 07       	cpc	r19, r25
    4244:	79 f5       	brne	.+94     	; 0x42a4 <STEPPER_process_step_mode+0xa6>
    4246:	80 e0       	ldi	r24, 0x00	; 0
    4248:	60 e0       	ldi	r22, 0x00	; 0
    424a:	70 e0       	ldi	r23, 0x00	; 0
    424c:	0e 94 09 14 	call	0x2812	; 0x2812 <STEPPER_set_speed>
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	80 93 5d 04 	sts	0x045D, r24
    4256:	08 95       	ret
    4258:	80 91 3f 04 	lds	r24, 0x043F
    425c:	90 91 40 04 	lds	r25, 0x0440
    4260:	89 2b       	or	r24, r25
    4262:	49 f0       	breq	.+18     	; 0x4276 <STEPPER_process_step_mode+0x78>
    4264:	80 91 3f 04 	lds	r24, 0x043F
    4268:	90 91 40 04 	lds	r25, 0x0440
    426c:	01 97       	sbiw	r24, 0x01	; 1
    426e:	90 93 40 04 	sts	0x0440, r25
    4272:	80 93 3f 04 	sts	0x043F, r24
    4276:	80 91 5e 04 	lds	r24, 0x045E
    427a:	88 23       	and	r24, r24
    427c:	99 f4       	brne	.+38     	; 0x42a4 <STEPPER_process_step_mode+0xa6>
    427e:	20 91 3f 04 	lds	r18, 0x043F
    4282:	30 91 40 04 	lds	r19, 0x0440
    4286:	80 91 43 04 	lds	r24, 0x0443
    428a:	90 91 44 04 	lds	r25, 0x0444
    428e:	28 17       	cp	r18, r24
    4290:	39 07       	cpc	r19, r25
    4292:	41 f4       	brne	.+16     	; 0x42a4 <STEPPER_process_step_mode+0xa6>
    4294:	81 e0       	ldi	r24, 0x01	; 1
    4296:	60 e0       	ldi	r22, 0x00	; 0
    4298:	70 e0       	ldi	r23, 0x00	; 0
    429a:	0e 94 09 14 	call	0x2812	; 0x2812 <STEPPER_set_speed>
    429e:	81 e0       	ldi	r24, 0x01	; 1
    42a0:	80 93 5e 04 	sts	0x045E, r24
    42a4:	08 95       	ret

000042a6 <STEPPER_stop>:
    42a6:	0f 93       	push	r16
    42a8:	1f 93       	push	r17
    42aa:	18 2f       	mov	r17, r24
    42ac:	06 2f       	mov	r16, r22
    42ae:	66 23       	and	r22, r22
    42b0:	49 f4       	brne	.+18     	; 0x42c4 <STEPPER_stop+0x1e>
    42b2:	60 e0       	ldi	r22, 0x00	; 0
    42b4:	70 e0       	ldi	r23, 0x00	; 0
    42b6:	0e 94 09 14 	call	0x2812	; 0x2812 <STEPPER_set_speed>
    42ba:	81 2f       	mov	r24, r17
    42bc:	60 e0       	ldi	r22, 0x00	; 0
    42be:	70 e0       	ldi	r23, 0x00	; 0
    42c0:	0e 94 a3 1c 	call	0x3946	; 0x3946 <STEPPER_set_steps>
    42c4:	81 e0       	ldi	r24, 0x01	; 1
    42c6:	80 93 61 04 	sts	0x0461, r24
    42ca:	11 30       	cpi	r17, 0x01	; 1
    42cc:	51 f0       	breq	.+20     	; 0x42e2 <STEPPER_stop+0x3c>
    42ce:	11 30       	cpi	r17, 0x01	; 1
    42d0:	18 f0       	brcs	.+6      	; 0x42d8 <STEPPER_stop+0x32>
    42d2:	12 30       	cpi	r17, 0x02	; 2
    42d4:	41 f4       	brne	.+16     	; 0x42e6 <STEPPER_stop+0x40>
    42d6:	03 c0       	rjmp	.+6      	; 0x42de <STEPPER_stop+0x38>
    42d8:	00 93 49 04 	sts	0x0449, r16
    42dc:	04 c0       	rjmp	.+8      	; 0x42e6 <STEPPER_stop+0x40>
    42de:	00 93 49 04 	sts	0x0449, r16
    42e2:	00 93 4a 04 	sts	0x044A, r16
    42e6:	10 92 61 04 	sts	0x0461, r1
    42ea:	1f 91       	pop	r17
    42ec:	0f 91       	pop	r16
    42ee:	08 95       	ret

000042f0 <TMRSRVC_process>:
    42f0:	ff 92       	push	r15
    42f2:	0f 93       	push	r16
    42f4:	1f 93       	push	r17
    42f6:	cf 93       	push	r28
    42f8:	df 93       	push	r29
    42fa:	80 91 9b 04 	lds	r24, 0x049B
    42fe:	88 23       	and	r24, r24
    4300:	09 f4       	brne	.+2      	; 0x4304 <TMRSRVC_process+0x14>
    4302:	59 c0       	rjmp	.+178    	; 0x43b6 <TMRSRVC_process+0xc6>
    4304:	00 91 9c 04 	lds	r16, 0x049C
    4308:	10 91 9d 04 	lds	r17, 0x049D
    430c:	f8 01       	movw	r30, r16
    430e:	c0 81       	ld	r28, Z
    4310:	d1 81       	ldd	r29, Z+1	; 0x01
    4312:	8c 81       	ldd	r24, Y+4	; 0x04
    4314:	9d 81       	ldd	r25, Y+5	; 0x05
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	9d 83       	std	Y+5, r25	; 0x05
    431a:	8c 83       	std	Y+4, r24	; 0x04
    431c:	18 16       	cp	r1, r24
    431e:	19 06       	cpc	r1, r25
    4320:	0c f4       	brge	.+2      	; 0x4324 <TMRSRVC_process+0x34>
    4322:	49 c0       	rjmp	.+146    	; 0x43b6 <TMRSRVC_process+0xc6>
    4324:	89 81       	ldd	r24, Y+1	; 0x01
    4326:	80 ff       	sbrs	r24, 0
    4328:	05 c0       	rjmp	.+10     	; 0x4334 <TMRSRVC_process+0x44>
    432a:	8e 81       	ldd	r24, Y+6	; 0x06
    432c:	88 23       	and	r24, r24
    432e:	11 f4       	brne	.+4      	; 0x4334 <TMRSRVC_process+0x44>
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	8e 83       	std	Y+6, r24	; 0x06
    4334:	89 81       	ldd	r24, Y+1	; 0x01
    4336:	81 ff       	sbrs	r24, 1
    4338:	03 c0       	rjmp	.+6      	; 0x4340 <TMRSRVC_process+0x50>
    433a:	ef 81       	ldd	r30, Y+7	; 0x07
    433c:	f8 85       	ldd	r31, Y+8	; 0x08
    433e:	09 95       	icall
    4340:	80 91 9b 04 	lds	r24, 0x049B
    4344:	82 30       	cpi	r24, 0x02	; 2
    4346:	a8 f0       	brcs	.+42     	; 0x4372 <TMRSRVC_process+0x82>
    4348:	f8 01       	movw	r30, r16
    434a:	82 81       	ldd	r24, Z+2	; 0x02
    434c:	93 81       	ldd	r25, Z+3	; 0x03
    434e:	90 93 9d 04 	sts	0x049D, r25
    4352:	80 93 9c 04 	sts	0x049C, r24
    4356:	13 82       	std	Z+3, r1	; 0x03
    4358:	12 82       	std	Z+2, r1	; 0x02
    435a:	e0 91 00 00 	lds	r30, 0x0000
    435e:	f0 91 01 00 	lds	r31, 0x0001
    4362:	84 81       	ldd	r24, Z+4	; 0x04
    4364:	95 81       	ldd	r25, Z+5	; 0x05
    4366:	18 16       	cp	r1, r24
    4368:	19 06       	cpc	r1, r25
    436a:	3c f0       	brlt	.+14     	; 0x437a <TMRSRVC_process+0x8a>
    436c:	ff 24       	eor	r15, r15
    436e:	f3 94       	inc	r15
    4370:	05 c0       	rjmp	.+10     	; 0x437c <TMRSRVC_process+0x8c>
    4372:	10 92 9d 04 	sts	0x049D, r1
    4376:	10 92 9c 04 	sts	0x049C, r1
    437a:	ff 24       	eor	r15, r15
    437c:	80 91 9b 04 	lds	r24, 0x049B
    4380:	81 50       	subi	r24, 0x01	; 1
    4382:	80 93 9b 04 	sts	0x049B, r24
    4386:	80 91 9b 04 	lds	r24, 0x049B
    438a:	88 23       	and	r24, r24
    438c:	11 f4       	brne	.+4      	; 0x4392 <TMRSRVC_process+0xa2>
    438e:	0e 94 e3 21 	call	0x43c6	; 0x43c6 <TMRSRVC_stop>
    4392:	89 81       	ldd	r24, Y+1	; 0x01
    4394:	82 ff       	sbrs	r24, 2
    4396:	08 c0       	rjmp	.+16     	; 0x43a8 <TMRSRVC_process+0xb8>
    4398:	8a 81       	ldd	r24, Y+2	; 0x02
    439a:	9b 81       	ldd	r25, Y+3	; 0x03
    439c:	9d 83       	std	Y+5, r25	; 0x05
    439e:	8c 83       	std	Y+4, r24	; 0x04
    43a0:	c8 01       	movw	r24, r16
    43a2:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <TMRSRVC_insert>
    43a6:	08 c0       	rjmp	.+16     	; 0x43b8 <TMRSRVC_process+0xc8>
    43a8:	c8 01       	movw	r24, r16
    43aa:	0e 94 ec 2a 	call	0x55d8	; 0x55d8 <free>
    43ae:	89 81       	ldd	r24, Y+1	; 0x01
    43b0:	8f 7e       	andi	r24, 0xEF	; 239
    43b2:	89 83       	std	Y+1, r24	; 0x01
    43b4:	01 c0       	rjmp	.+2      	; 0x43b8 <TMRSRVC_process+0xc8>
    43b6:	ff 24       	eor	r15, r15
    43b8:	8f 2d       	mov	r24, r15
    43ba:	df 91       	pop	r29
    43bc:	cf 91       	pop	r28
    43be:	1f 91       	pop	r17
    43c0:	0f 91       	pop	r16
    43c2:	ff 90       	pop	r15
    43c4:	08 95       	ret

000043c6 <TMRSRVC_stop>:
    43c6:	10 92 3d 02 	sts	0x023D, r1
    43ca:	08 95       	ret

000043cc <STEPPER_process_pwm>:
    43cc:	fc 01       	movw	r30, r24
    43ce:	80 91 52 04 	lds	r24, 0x0452
    43d2:	82 30       	cpi	r24, 0x02	; 2
    43d4:	69 f4       	brne	.+26     	; 0x43f0 <STEPPER_process_pwm+0x24>
    43d6:	80 91 42 02 	lds	r24, 0x0242
    43da:	91 e0       	ldi	r25, 0x01	; 1
    43dc:	89 27       	eor	r24, r25
    43de:	80 93 42 02 	sts	0x0242, r24
    43e2:	88 23       	and	r24, r24
    43e4:	09 f0       	breq	.+2      	; 0x43e8 <STEPPER_process_pwm+0x1c>
    43e6:	3e c0       	rjmp	.+124    	; 0x4464 <STEPPER_process_pwm+0x98>
    43e8:	80 81       	ld	r24, Z
    43ea:	83 7e       	andi	r24, 0xE3	; 227
    43ec:	80 83       	st	Z, r24
    43ee:	3a c0       	rjmp	.+116    	; 0x4464 <STEPPER_process_pwm+0x98>
    43f0:	80 91 31 04 	lds	r24, 0x0431
    43f4:	90 91 32 04 	lds	r25, 0x0432
    43f8:	c3 97       	sbiw	r24, 0x33	; 51
    43fa:	a4 f5       	brge	.+104    	; 0x4464 <STEPPER_process_pwm+0x98>
    43fc:	66 23       	and	r22, r22
    43fe:	d1 f0       	breq	.+52     	; 0x4434 <STEPPER_process_pwm+0x68>
    4400:	20 91 31 04 	lds	r18, 0x0431
    4404:	30 91 32 04 	lds	r19, 0x0432
    4408:	80 e6       	ldi	r24, 0x60	; 96
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	bc 01       	movw	r22, r24
    440e:	26 9f       	mul	r18, r22
    4410:	c0 01       	movw	r24, r0
    4412:	27 9f       	mul	r18, r23
    4414:	90 0d       	add	r25, r0
    4416:	36 9f       	mul	r19, r22
    4418:	90 0d       	add	r25, r0
    441a:	11 24       	eor	r1, r1
    441c:	88 0f       	add	r24, r24
    441e:	89 2f       	mov	r24, r25
    4420:	88 1f       	adc	r24, r24
    4422:	99 0b       	sbc	r25, r25
    4424:	90 93 46 04 	sts	0x0446, r25
    4428:	80 93 45 04 	sts	0x0445, r24
    442c:	81 e0       	ldi	r24, 0x01	; 1
    442e:	80 93 40 02 	sts	0x0240, r24
    4432:	18 c0       	rjmp	.+48     	; 0x4464 <STEPPER_process_pwm+0x98>
    4434:	80 91 40 02 	lds	r24, 0x0240
    4438:	88 23       	and	r24, r24
    443a:	a1 f0       	breq	.+40     	; 0x4464 <STEPPER_process_pwm+0x98>
    443c:	80 91 45 04 	lds	r24, 0x0445
    4440:	90 91 46 04 	lds	r25, 0x0446
    4444:	01 97       	sbiw	r24, 0x01	; 1
    4446:	90 93 46 04 	sts	0x0446, r25
    444a:	80 93 45 04 	sts	0x0445, r24
    444e:	80 91 45 04 	lds	r24, 0x0445
    4452:	90 91 46 04 	lds	r25, 0x0446
    4456:	89 2b       	or	r24, r25
    4458:	29 f4       	brne	.+10     	; 0x4464 <STEPPER_process_pwm+0x98>
    445a:	80 81       	ld	r24, Z
    445c:	83 7e       	andi	r24, 0xE3	; 227
    445e:	80 83       	st	Z, r24
    4460:	10 92 40 02 	sts	0x0240, r1
    4464:	80 91 53 04 	lds	r24, 0x0453
    4468:	82 30       	cpi	r24, 0x02	; 2
    446a:	69 f4       	brne	.+26     	; 0x4486 <STEPPER_process_pwm+0xba>
    446c:	80 91 41 02 	lds	r24, 0x0241
    4470:	91 e0       	ldi	r25, 0x01	; 1
    4472:	89 27       	eor	r24, r25
    4474:	80 93 41 02 	sts	0x0241, r24
    4478:	88 23       	and	r24, r24
    447a:	09 f0       	breq	.+2      	; 0x447e <STEPPER_process_pwm+0xb2>
    447c:	3e c0       	rjmp	.+124    	; 0x44fa <STEPPER_process_pwm+0x12e>
    447e:	80 81       	ld	r24, Z
    4480:	8f 71       	andi	r24, 0x1F	; 31
    4482:	80 83       	st	Z, r24
    4484:	08 95       	ret
    4486:	80 91 33 04 	lds	r24, 0x0433
    448a:	90 91 34 04 	lds	r25, 0x0434
    448e:	c3 97       	sbiw	r24, 0x33	; 51
    4490:	a4 f5       	brge	.+104    	; 0x44fa <STEPPER_process_pwm+0x12e>
    4492:	44 23       	and	r20, r20
    4494:	d1 f0       	breq	.+52     	; 0x44ca <STEPPER_process_pwm+0xfe>
    4496:	20 91 33 04 	lds	r18, 0x0433
    449a:	30 91 34 04 	lds	r19, 0x0434
    449e:	80 e6       	ldi	r24, 0x60	; 96
    44a0:	90 e0       	ldi	r25, 0x00	; 0
    44a2:	ac 01       	movw	r20, r24
    44a4:	24 9f       	mul	r18, r20
    44a6:	c0 01       	movw	r24, r0
    44a8:	25 9f       	mul	r18, r21
    44aa:	90 0d       	add	r25, r0
    44ac:	34 9f       	mul	r19, r20
    44ae:	90 0d       	add	r25, r0
    44b0:	11 24       	eor	r1, r1
    44b2:	88 0f       	add	r24, r24
    44b4:	89 2f       	mov	r24, r25
    44b6:	88 1f       	adc	r24, r24
    44b8:	99 0b       	sbc	r25, r25
    44ba:	90 93 48 04 	sts	0x0448, r25
    44be:	80 93 47 04 	sts	0x0447, r24
    44c2:	81 e0       	ldi	r24, 0x01	; 1
    44c4:	80 93 3f 02 	sts	0x023F, r24
    44c8:	08 95       	ret
    44ca:	80 91 3f 02 	lds	r24, 0x023F
    44ce:	88 23       	and	r24, r24
    44d0:	a1 f0       	breq	.+40     	; 0x44fa <STEPPER_process_pwm+0x12e>
    44d2:	80 91 47 04 	lds	r24, 0x0447
    44d6:	90 91 48 04 	lds	r25, 0x0448
    44da:	01 97       	sbiw	r24, 0x01	; 1
    44dc:	90 93 48 04 	sts	0x0448, r25
    44e0:	80 93 47 04 	sts	0x0447, r24
    44e4:	80 91 47 04 	lds	r24, 0x0447
    44e8:	90 91 48 04 	lds	r25, 0x0448
    44ec:	89 2b       	or	r24, r25
    44ee:	29 f4       	brne	.+10     	; 0x44fa <STEPPER_process_pwm+0x12e>
    44f0:	80 81       	ld	r24, Z
    44f2:	8f 71       	andi	r24, 0x1F	; 31
    44f4:	80 83       	st	Z, r24
    44f6:	10 92 3f 02 	sts	0x023F, r1
    44fa:	08 95       	ret

000044fc <__subsf3>:
    44fc:	50 58       	subi	r21, 0x80	; 128

000044fe <__addsf3>:
    44fe:	bb 27       	eor	r27, r27
    4500:	aa 27       	eor	r26, r26
    4502:	0e d0       	rcall	.+28     	; 0x4520 <__addsf3x>
    4504:	75 c1       	rjmp	.+746    	; 0x47f0 <__fp_round>
    4506:	66 d1       	rcall	.+716    	; 0x47d4 <__fp_pscA>
    4508:	30 f0       	brcs	.+12     	; 0x4516 <__addsf3+0x18>
    450a:	6b d1       	rcall	.+726    	; 0x47e2 <__fp_pscB>
    450c:	20 f0       	brcs	.+8      	; 0x4516 <__addsf3+0x18>
    450e:	31 f4       	brne	.+12     	; 0x451c <__addsf3+0x1e>
    4510:	9f 3f       	cpi	r25, 0xFF	; 255
    4512:	11 f4       	brne	.+4      	; 0x4518 <__addsf3+0x1a>
    4514:	1e f4       	brtc	.+6      	; 0x451c <__addsf3+0x1e>
    4516:	5b c1       	rjmp	.+694    	; 0x47ce <__fp_nan>
    4518:	0e f4       	brtc	.+2      	; 0x451c <__addsf3+0x1e>
    451a:	e0 95       	com	r30
    451c:	e7 fb       	bst	r30, 7
    451e:	51 c1       	rjmp	.+674    	; 0x47c2 <__fp_inf>

00004520 <__addsf3x>:
    4520:	e9 2f       	mov	r30, r25
    4522:	77 d1       	rcall	.+750    	; 0x4812 <__fp_split3>
    4524:	80 f3       	brcs	.-32     	; 0x4506 <__addsf3+0x8>
    4526:	ba 17       	cp	r27, r26
    4528:	62 07       	cpc	r22, r18
    452a:	73 07       	cpc	r23, r19
    452c:	84 07       	cpc	r24, r20
    452e:	95 07       	cpc	r25, r21
    4530:	18 f0       	brcs	.+6      	; 0x4538 <__addsf3x+0x18>
    4532:	71 f4       	brne	.+28     	; 0x4550 <__addsf3x+0x30>
    4534:	9e f5       	brtc	.+102    	; 0x459c <__addsf3x+0x7c>
    4536:	8f c1       	rjmp	.+798    	; 0x4856 <__fp_zero>
    4538:	0e f4       	brtc	.+2      	; 0x453c <__addsf3x+0x1c>
    453a:	e0 95       	com	r30
    453c:	0b 2e       	mov	r0, r27
    453e:	ba 2f       	mov	r27, r26
    4540:	a0 2d       	mov	r26, r0
    4542:	0b 01       	movw	r0, r22
    4544:	b9 01       	movw	r22, r18
    4546:	90 01       	movw	r18, r0
    4548:	0c 01       	movw	r0, r24
    454a:	ca 01       	movw	r24, r20
    454c:	a0 01       	movw	r20, r0
    454e:	11 24       	eor	r1, r1
    4550:	ff 27       	eor	r31, r31
    4552:	59 1b       	sub	r21, r25
    4554:	99 f0       	breq	.+38     	; 0x457c <__addsf3x+0x5c>
    4556:	59 3f       	cpi	r21, 0xF9	; 249
    4558:	50 f4       	brcc	.+20     	; 0x456e <__addsf3x+0x4e>
    455a:	50 3e       	cpi	r21, 0xE0	; 224
    455c:	68 f1       	brcs	.+90     	; 0x45b8 <__addsf3x+0x98>
    455e:	1a 16       	cp	r1, r26
    4560:	f0 40       	sbci	r31, 0x00	; 0
    4562:	a2 2f       	mov	r26, r18
    4564:	23 2f       	mov	r18, r19
    4566:	34 2f       	mov	r19, r20
    4568:	44 27       	eor	r20, r20
    456a:	58 5f       	subi	r21, 0xF8	; 248
    456c:	f3 cf       	rjmp	.-26     	; 0x4554 <__addsf3x+0x34>
    456e:	46 95       	lsr	r20
    4570:	37 95       	ror	r19
    4572:	27 95       	ror	r18
    4574:	a7 95       	ror	r26
    4576:	f0 40       	sbci	r31, 0x00	; 0
    4578:	53 95       	inc	r21
    457a:	c9 f7       	brne	.-14     	; 0x456e <__addsf3x+0x4e>
    457c:	7e f4       	brtc	.+30     	; 0x459c <__addsf3x+0x7c>
    457e:	1f 16       	cp	r1, r31
    4580:	ba 0b       	sbc	r27, r26
    4582:	62 0b       	sbc	r22, r18
    4584:	73 0b       	sbc	r23, r19
    4586:	84 0b       	sbc	r24, r20
    4588:	ba f0       	brmi	.+46     	; 0x45b8 <__addsf3x+0x98>
    458a:	91 50       	subi	r25, 0x01	; 1
    458c:	a1 f0       	breq	.+40     	; 0x45b6 <__addsf3x+0x96>
    458e:	ff 0f       	add	r31, r31
    4590:	bb 1f       	adc	r27, r27
    4592:	66 1f       	adc	r22, r22
    4594:	77 1f       	adc	r23, r23
    4596:	88 1f       	adc	r24, r24
    4598:	c2 f7       	brpl	.-16     	; 0x458a <__addsf3x+0x6a>
    459a:	0e c0       	rjmp	.+28     	; 0x45b8 <__addsf3x+0x98>
    459c:	ba 0f       	add	r27, r26
    459e:	62 1f       	adc	r22, r18
    45a0:	73 1f       	adc	r23, r19
    45a2:	84 1f       	adc	r24, r20
    45a4:	48 f4       	brcc	.+18     	; 0x45b8 <__addsf3x+0x98>
    45a6:	87 95       	ror	r24
    45a8:	77 95       	ror	r23
    45aa:	67 95       	ror	r22
    45ac:	b7 95       	ror	r27
    45ae:	f7 95       	ror	r31
    45b0:	9e 3f       	cpi	r25, 0xFE	; 254
    45b2:	08 f0       	brcs	.+2      	; 0x45b6 <__addsf3x+0x96>
    45b4:	b3 cf       	rjmp	.-154    	; 0x451c <__addsf3+0x1e>
    45b6:	93 95       	inc	r25
    45b8:	88 0f       	add	r24, r24
    45ba:	08 f0       	brcs	.+2      	; 0x45be <__addsf3x+0x9e>
    45bc:	99 27       	eor	r25, r25
    45be:	ee 0f       	add	r30, r30
    45c0:	97 95       	ror	r25
    45c2:	87 95       	ror	r24
    45c4:	08 95       	ret

000045c6 <__cmpsf2>:
    45c6:	d9 d0       	rcall	.+434    	; 0x477a <__fp_cmp>
    45c8:	08 f4       	brcc	.+2      	; 0x45cc <__cmpsf2+0x6>
    45ca:	81 e0       	ldi	r24, 0x01	; 1
    45cc:	08 95       	ret

000045ce <__divsf3>:
    45ce:	0c d0       	rcall	.+24     	; 0x45e8 <__divsf3x>
    45d0:	0f c1       	rjmp	.+542    	; 0x47f0 <__fp_round>
    45d2:	07 d1       	rcall	.+526    	; 0x47e2 <__fp_pscB>
    45d4:	40 f0       	brcs	.+16     	; 0x45e6 <__divsf3+0x18>
    45d6:	fe d0       	rcall	.+508    	; 0x47d4 <__fp_pscA>
    45d8:	30 f0       	brcs	.+12     	; 0x45e6 <__divsf3+0x18>
    45da:	21 f4       	brne	.+8      	; 0x45e4 <__divsf3+0x16>
    45dc:	5f 3f       	cpi	r21, 0xFF	; 255
    45de:	19 f0       	breq	.+6      	; 0x45e6 <__divsf3+0x18>
    45e0:	f0 c0       	rjmp	.+480    	; 0x47c2 <__fp_inf>
    45e2:	51 11       	cpse	r21, r1
    45e4:	39 c1       	rjmp	.+626    	; 0x4858 <__fp_szero>
    45e6:	f3 c0       	rjmp	.+486    	; 0x47ce <__fp_nan>

000045e8 <__divsf3x>:
    45e8:	14 d1       	rcall	.+552    	; 0x4812 <__fp_split3>
    45ea:	98 f3       	brcs	.-26     	; 0x45d2 <__divsf3+0x4>

000045ec <__divsf3_pse>:
    45ec:	99 23       	and	r25, r25
    45ee:	c9 f3       	breq	.-14     	; 0x45e2 <__divsf3+0x14>
    45f0:	55 23       	and	r21, r21
    45f2:	b1 f3       	breq	.-20     	; 0x45e0 <__divsf3+0x12>
    45f4:	95 1b       	sub	r25, r21
    45f6:	55 0b       	sbc	r21, r21
    45f8:	bb 27       	eor	r27, r27
    45fa:	aa 27       	eor	r26, r26
    45fc:	62 17       	cp	r22, r18
    45fe:	73 07       	cpc	r23, r19
    4600:	84 07       	cpc	r24, r20
    4602:	38 f0       	brcs	.+14     	; 0x4612 <__divsf3_pse+0x26>
    4604:	9f 5f       	subi	r25, 0xFF	; 255
    4606:	5f 4f       	sbci	r21, 0xFF	; 255
    4608:	22 0f       	add	r18, r18
    460a:	33 1f       	adc	r19, r19
    460c:	44 1f       	adc	r20, r20
    460e:	aa 1f       	adc	r26, r26
    4610:	a9 f3       	breq	.-22     	; 0x45fc <__divsf3_pse+0x10>
    4612:	33 d0       	rcall	.+102    	; 0x467a <__divsf3_pse+0x8e>
    4614:	0e 2e       	mov	r0, r30
    4616:	3a f0       	brmi	.+14     	; 0x4626 <__divsf3_pse+0x3a>
    4618:	e0 e8       	ldi	r30, 0x80	; 128
    461a:	30 d0       	rcall	.+96     	; 0x467c <__divsf3_pse+0x90>
    461c:	91 50       	subi	r25, 0x01	; 1
    461e:	50 40       	sbci	r21, 0x00	; 0
    4620:	e6 95       	lsr	r30
    4622:	00 1c       	adc	r0, r0
    4624:	ca f7       	brpl	.-14     	; 0x4618 <__divsf3_pse+0x2c>
    4626:	29 d0       	rcall	.+82     	; 0x467a <__divsf3_pse+0x8e>
    4628:	fe 2f       	mov	r31, r30
    462a:	27 d0       	rcall	.+78     	; 0x467a <__divsf3_pse+0x8e>
    462c:	66 0f       	add	r22, r22
    462e:	77 1f       	adc	r23, r23
    4630:	88 1f       	adc	r24, r24
    4632:	bb 1f       	adc	r27, r27
    4634:	26 17       	cp	r18, r22
    4636:	37 07       	cpc	r19, r23
    4638:	48 07       	cpc	r20, r24
    463a:	ab 07       	cpc	r26, r27
    463c:	b0 e8       	ldi	r27, 0x80	; 128
    463e:	09 f0       	breq	.+2      	; 0x4642 <__divsf3_pse+0x56>
    4640:	bb 0b       	sbc	r27, r27
    4642:	80 2d       	mov	r24, r0
    4644:	bf 01       	movw	r22, r30
    4646:	ff 27       	eor	r31, r31
    4648:	93 58       	subi	r25, 0x83	; 131
    464a:	5f 4f       	sbci	r21, 0xFF	; 255
    464c:	2a f0       	brmi	.+10     	; 0x4658 <__divsf3_pse+0x6c>
    464e:	9e 3f       	cpi	r25, 0xFE	; 254
    4650:	51 05       	cpc	r21, r1
    4652:	68 f0       	brcs	.+26     	; 0x466e <__divsf3_pse+0x82>
    4654:	b6 c0       	rjmp	.+364    	; 0x47c2 <__fp_inf>
    4656:	00 c1       	rjmp	.+512    	; 0x4858 <__fp_szero>
    4658:	5f 3f       	cpi	r21, 0xFF	; 255
    465a:	ec f3       	brlt	.-6      	; 0x4656 <__divsf3_pse+0x6a>
    465c:	98 3e       	cpi	r25, 0xE8	; 232
    465e:	dc f3       	brlt	.-10     	; 0x4656 <__divsf3_pse+0x6a>
    4660:	86 95       	lsr	r24
    4662:	77 95       	ror	r23
    4664:	67 95       	ror	r22
    4666:	b7 95       	ror	r27
    4668:	f7 95       	ror	r31
    466a:	9f 5f       	subi	r25, 0xFF	; 255
    466c:	c9 f7       	brne	.-14     	; 0x4660 <__divsf3_pse+0x74>
    466e:	88 0f       	add	r24, r24
    4670:	91 1d       	adc	r25, r1
    4672:	96 95       	lsr	r25
    4674:	87 95       	ror	r24
    4676:	97 f9       	bld	r25, 7
    4678:	08 95       	ret
    467a:	e1 e0       	ldi	r30, 0x01	; 1
    467c:	66 0f       	add	r22, r22
    467e:	77 1f       	adc	r23, r23
    4680:	88 1f       	adc	r24, r24
    4682:	bb 1f       	adc	r27, r27
    4684:	62 17       	cp	r22, r18
    4686:	73 07       	cpc	r23, r19
    4688:	84 07       	cpc	r24, r20
    468a:	ba 07       	cpc	r27, r26
    468c:	20 f0       	brcs	.+8      	; 0x4696 <__divsf3_pse+0xaa>
    468e:	62 1b       	sub	r22, r18
    4690:	73 0b       	sbc	r23, r19
    4692:	84 0b       	sbc	r24, r20
    4694:	ba 0b       	sbc	r27, r26
    4696:	ee 1f       	adc	r30, r30
    4698:	88 f7       	brcc	.-30     	; 0x467c <__divsf3_pse+0x90>
    469a:	e0 95       	com	r30
    469c:	08 95       	ret

0000469e <__fixsfsi>:
    469e:	04 d0       	rcall	.+8      	; 0x46a8 <__fixunssfsi>
    46a0:	68 94       	set
    46a2:	b1 11       	cpse	r27, r1
    46a4:	d9 c0       	rjmp	.+434    	; 0x4858 <__fp_szero>
    46a6:	08 95       	ret

000046a8 <__fixunssfsi>:
    46a8:	bc d0       	rcall	.+376    	; 0x4822 <__fp_splitA>
    46aa:	88 f0       	brcs	.+34     	; 0x46ce <__fixunssfsi+0x26>
    46ac:	9f 57       	subi	r25, 0x7F	; 127
    46ae:	90 f0       	brcs	.+36     	; 0x46d4 <__fixunssfsi+0x2c>
    46b0:	b9 2f       	mov	r27, r25
    46b2:	99 27       	eor	r25, r25
    46b4:	b7 51       	subi	r27, 0x17	; 23
    46b6:	a0 f0       	brcs	.+40     	; 0x46e0 <__fixunssfsi+0x38>
    46b8:	d1 f0       	breq	.+52     	; 0x46ee <__fixunssfsi+0x46>
    46ba:	66 0f       	add	r22, r22
    46bc:	77 1f       	adc	r23, r23
    46be:	88 1f       	adc	r24, r24
    46c0:	99 1f       	adc	r25, r25
    46c2:	1a f0       	brmi	.+6      	; 0x46ca <__fixunssfsi+0x22>
    46c4:	ba 95       	dec	r27
    46c6:	c9 f7       	brne	.-14     	; 0x46ba <__fixunssfsi+0x12>
    46c8:	12 c0       	rjmp	.+36     	; 0x46ee <__fixunssfsi+0x46>
    46ca:	b1 30       	cpi	r27, 0x01	; 1
    46cc:	81 f0       	breq	.+32     	; 0x46ee <__fixunssfsi+0x46>
    46ce:	c3 d0       	rcall	.+390    	; 0x4856 <__fp_zero>
    46d0:	b1 e0       	ldi	r27, 0x01	; 1
    46d2:	08 95       	ret
    46d4:	c0 c0       	rjmp	.+384    	; 0x4856 <__fp_zero>
    46d6:	67 2f       	mov	r22, r23
    46d8:	78 2f       	mov	r23, r24
    46da:	88 27       	eor	r24, r24
    46dc:	b8 5f       	subi	r27, 0xF8	; 248
    46de:	39 f0       	breq	.+14     	; 0x46ee <__fixunssfsi+0x46>
    46e0:	b9 3f       	cpi	r27, 0xF9	; 249
    46e2:	cc f3       	brlt	.-14     	; 0x46d6 <__fixunssfsi+0x2e>
    46e4:	86 95       	lsr	r24
    46e6:	77 95       	ror	r23
    46e8:	67 95       	ror	r22
    46ea:	b3 95       	inc	r27
    46ec:	d9 f7       	brne	.-10     	; 0x46e4 <__fixunssfsi+0x3c>
    46ee:	3e f4       	brtc	.+14     	; 0x46fe <__fixunssfsi+0x56>
    46f0:	90 95       	com	r25
    46f2:	80 95       	com	r24
    46f4:	70 95       	com	r23
    46f6:	61 95       	neg	r22
    46f8:	7f 4f       	sbci	r23, 0xFF	; 255
    46fa:	8f 4f       	sbci	r24, 0xFF	; 255
    46fc:	9f 4f       	sbci	r25, 0xFF	; 255
    46fe:	08 95       	ret

00004700 <__floatunsisf>:
    4700:	e8 94       	clt
    4702:	09 c0       	rjmp	.+18     	; 0x4716 <__floatsisf+0x12>

00004704 <__floatsisf>:
    4704:	97 fb       	bst	r25, 7
    4706:	3e f4       	brtc	.+14     	; 0x4716 <__floatsisf+0x12>
    4708:	90 95       	com	r25
    470a:	80 95       	com	r24
    470c:	70 95       	com	r23
    470e:	61 95       	neg	r22
    4710:	7f 4f       	sbci	r23, 0xFF	; 255
    4712:	8f 4f       	sbci	r24, 0xFF	; 255
    4714:	9f 4f       	sbci	r25, 0xFF	; 255
    4716:	99 23       	and	r25, r25
    4718:	a9 f0       	breq	.+42     	; 0x4744 <__floatsisf+0x40>
    471a:	f9 2f       	mov	r31, r25
    471c:	96 e9       	ldi	r25, 0x96	; 150
    471e:	bb 27       	eor	r27, r27
    4720:	93 95       	inc	r25
    4722:	f6 95       	lsr	r31
    4724:	87 95       	ror	r24
    4726:	77 95       	ror	r23
    4728:	67 95       	ror	r22
    472a:	b7 95       	ror	r27
    472c:	f1 11       	cpse	r31, r1
    472e:	f8 cf       	rjmp	.-16     	; 0x4720 <__floatsisf+0x1c>
    4730:	fa f4       	brpl	.+62     	; 0x4770 <__floatsisf+0x6c>
    4732:	bb 0f       	add	r27, r27
    4734:	11 f4       	brne	.+4      	; 0x473a <__floatsisf+0x36>
    4736:	60 ff       	sbrs	r22, 0
    4738:	1b c0       	rjmp	.+54     	; 0x4770 <__floatsisf+0x6c>
    473a:	6f 5f       	subi	r22, 0xFF	; 255
    473c:	7f 4f       	sbci	r23, 0xFF	; 255
    473e:	8f 4f       	sbci	r24, 0xFF	; 255
    4740:	9f 4f       	sbci	r25, 0xFF	; 255
    4742:	16 c0       	rjmp	.+44     	; 0x4770 <__floatsisf+0x6c>
    4744:	88 23       	and	r24, r24
    4746:	11 f0       	breq	.+4      	; 0x474c <__floatsisf+0x48>
    4748:	96 e9       	ldi	r25, 0x96	; 150
    474a:	11 c0       	rjmp	.+34     	; 0x476e <__floatsisf+0x6a>
    474c:	77 23       	and	r23, r23
    474e:	21 f0       	breq	.+8      	; 0x4758 <__floatsisf+0x54>
    4750:	9e e8       	ldi	r25, 0x8E	; 142
    4752:	87 2f       	mov	r24, r23
    4754:	76 2f       	mov	r23, r22
    4756:	05 c0       	rjmp	.+10     	; 0x4762 <__floatsisf+0x5e>
    4758:	66 23       	and	r22, r22
    475a:	71 f0       	breq	.+28     	; 0x4778 <__floatsisf+0x74>
    475c:	96 e8       	ldi	r25, 0x86	; 134
    475e:	86 2f       	mov	r24, r22
    4760:	70 e0       	ldi	r23, 0x00	; 0
    4762:	60 e0       	ldi	r22, 0x00	; 0
    4764:	2a f0       	brmi	.+10     	; 0x4770 <__floatsisf+0x6c>
    4766:	9a 95       	dec	r25
    4768:	66 0f       	add	r22, r22
    476a:	77 1f       	adc	r23, r23
    476c:	88 1f       	adc	r24, r24
    476e:	da f7       	brpl	.-10     	; 0x4766 <__floatsisf+0x62>
    4770:	88 0f       	add	r24, r24
    4772:	96 95       	lsr	r25
    4774:	87 95       	ror	r24
    4776:	97 f9       	bld	r25, 7
    4778:	08 95       	ret

0000477a <__fp_cmp>:
    477a:	99 0f       	add	r25, r25
    477c:	00 08       	sbc	r0, r0
    477e:	55 0f       	add	r21, r21
    4780:	aa 0b       	sbc	r26, r26
    4782:	e0 e8       	ldi	r30, 0x80	; 128
    4784:	fe ef       	ldi	r31, 0xFE	; 254
    4786:	16 16       	cp	r1, r22
    4788:	17 06       	cpc	r1, r23
    478a:	e8 07       	cpc	r30, r24
    478c:	f9 07       	cpc	r31, r25
    478e:	c0 f0       	brcs	.+48     	; 0x47c0 <__fp_cmp+0x46>
    4790:	12 16       	cp	r1, r18
    4792:	13 06       	cpc	r1, r19
    4794:	e4 07       	cpc	r30, r20
    4796:	f5 07       	cpc	r31, r21
    4798:	98 f0       	brcs	.+38     	; 0x47c0 <__fp_cmp+0x46>
    479a:	62 1b       	sub	r22, r18
    479c:	73 0b       	sbc	r23, r19
    479e:	84 0b       	sbc	r24, r20
    47a0:	95 0b       	sbc	r25, r21
    47a2:	39 f4       	brne	.+14     	; 0x47b2 <__fp_cmp+0x38>
    47a4:	0a 26       	eor	r0, r26
    47a6:	61 f0       	breq	.+24     	; 0x47c0 <__fp_cmp+0x46>
    47a8:	23 2b       	or	r18, r19
    47aa:	24 2b       	or	r18, r20
    47ac:	25 2b       	or	r18, r21
    47ae:	21 f4       	brne	.+8      	; 0x47b8 <__fp_cmp+0x3e>
    47b0:	08 95       	ret
    47b2:	0a 26       	eor	r0, r26
    47b4:	09 f4       	brne	.+2      	; 0x47b8 <__fp_cmp+0x3e>
    47b6:	a1 40       	sbci	r26, 0x01	; 1
    47b8:	a6 95       	lsr	r26
    47ba:	8f ef       	ldi	r24, 0xFF	; 255
    47bc:	81 1d       	adc	r24, r1
    47be:	81 1d       	adc	r24, r1
    47c0:	08 95       	ret

000047c2 <__fp_inf>:
    47c2:	97 f9       	bld	r25, 7
    47c4:	9f 67       	ori	r25, 0x7F	; 127
    47c6:	80 e8       	ldi	r24, 0x80	; 128
    47c8:	70 e0       	ldi	r23, 0x00	; 0
    47ca:	60 e0       	ldi	r22, 0x00	; 0
    47cc:	08 95       	ret

000047ce <__fp_nan>:
    47ce:	9f ef       	ldi	r25, 0xFF	; 255
    47d0:	80 ec       	ldi	r24, 0xC0	; 192
    47d2:	08 95       	ret

000047d4 <__fp_pscA>:
    47d4:	00 24       	eor	r0, r0
    47d6:	0a 94       	dec	r0
    47d8:	16 16       	cp	r1, r22
    47da:	17 06       	cpc	r1, r23
    47dc:	18 06       	cpc	r1, r24
    47de:	09 06       	cpc	r0, r25
    47e0:	08 95       	ret

000047e2 <__fp_pscB>:
    47e2:	00 24       	eor	r0, r0
    47e4:	0a 94       	dec	r0
    47e6:	12 16       	cp	r1, r18
    47e8:	13 06       	cpc	r1, r19
    47ea:	14 06       	cpc	r1, r20
    47ec:	05 06       	cpc	r0, r21
    47ee:	08 95       	ret

000047f0 <__fp_round>:
    47f0:	09 2e       	mov	r0, r25
    47f2:	03 94       	inc	r0
    47f4:	00 0c       	add	r0, r0
    47f6:	11 f4       	brne	.+4      	; 0x47fc <__fp_round+0xc>
    47f8:	88 23       	and	r24, r24
    47fa:	52 f0       	brmi	.+20     	; 0x4810 <__fp_round+0x20>
    47fc:	bb 0f       	add	r27, r27
    47fe:	40 f4       	brcc	.+16     	; 0x4810 <__fp_round+0x20>
    4800:	bf 2b       	or	r27, r31
    4802:	11 f4       	brne	.+4      	; 0x4808 <__fp_round+0x18>
    4804:	60 ff       	sbrs	r22, 0
    4806:	04 c0       	rjmp	.+8      	; 0x4810 <__fp_round+0x20>
    4808:	6f 5f       	subi	r22, 0xFF	; 255
    480a:	7f 4f       	sbci	r23, 0xFF	; 255
    480c:	8f 4f       	sbci	r24, 0xFF	; 255
    480e:	9f 4f       	sbci	r25, 0xFF	; 255
    4810:	08 95       	ret

00004812 <__fp_split3>:
    4812:	57 fd       	sbrc	r21, 7
    4814:	90 58       	subi	r25, 0x80	; 128
    4816:	44 0f       	add	r20, r20
    4818:	55 1f       	adc	r21, r21
    481a:	59 f0       	breq	.+22     	; 0x4832 <__fp_splitA+0x10>
    481c:	5f 3f       	cpi	r21, 0xFF	; 255
    481e:	71 f0       	breq	.+28     	; 0x483c <__fp_splitA+0x1a>
    4820:	47 95       	ror	r20

00004822 <__fp_splitA>:
    4822:	88 0f       	add	r24, r24
    4824:	97 fb       	bst	r25, 7
    4826:	99 1f       	adc	r25, r25
    4828:	61 f0       	breq	.+24     	; 0x4842 <__fp_splitA+0x20>
    482a:	9f 3f       	cpi	r25, 0xFF	; 255
    482c:	79 f0       	breq	.+30     	; 0x484c <__fp_splitA+0x2a>
    482e:	87 95       	ror	r24
    4830:	08 95       	ret
    4832:	12 16       	cp	r1, r18
    4834:	13 06       	cpc	r1, r19
    4836:	14 06       	cpc	r1, r20
    4838:	55 1f       	adc	r21, r21
    483a:	f2 cf       	rjmp	.-28     	; 0x4820 <__fp_split3+0xe>
    483c:	46 95       	lsr	r20
    483e:	f1 df       	rcall	.-30     	; 0x4822 <__fp_splitA>
    4840:	08 c0       	rjmp	.+16     	; 0x4852 <__fp_splitA+0x30>
    4842:	16 16       	cp	r1, r22
    4844:	17 06       	cpc	r1, r23
    4846:	18 06       	cpc	r1, r24
    4848:	99 1f       	adc	r25, r25
    484a:	f1 cf       	rjmp	.-30     	; 0x482e <__fp_splitA+0xc>
    484c:	86 95       	lsr	r24
    484e:	71 05       	cpc	r23, r1
    4850:	61 05       	cpc	r22, r1
    4852:	08 94       	sec
    4854:	08 95       	ret

00004856 <__fp_zero>:
    4856:	e8 94       	clt

00004858 <__fp_szero>:
    4858:	bb 27       	eor	r27, r27
    485a:	66 27       	eor	r22, r22
    485c:	77 27       	eor	r23, r23
    485e:	cb 01       	movw	r24, r22
    4860:	97 f9       	bld	r25, 7
    4862:	08 95       	ret

00004864 <__gesf2>:
    4864:	8a df       	rcall	.-236    	; 0x477a <__fp_cmp>
    4866:	08 f4       	brcc	.+2      	; 0x486a <__gesf2+0x6>
    4868:	8f ef       	ldi	r24, 0xFF	; 255
    486a:	08 95       	ret

0000486c <lrint>:
    486c:	da df       	rcall	.-76     	; 0x4822 <__fp_splitA>
    486e:	a8 f1       	brcs	.+106    	; 0x48da <lrint+0x6e>
    4870:	9e 57       	subi	r25, 0x7E	; 126
    4872:	a8 f1       	brcs	.+106    	; 0x48de <lrint+0x72>
    4874:	98 51       	subi	r25, 0x18	; 24
    4876:	60 f0       	brcs	.+24     	; 0x4890 <lrint+0x24>
    4878:	39 f1       	breq	.+78     	; 0x48c8 <lrint+0x5c>
    487a:	98 30       	cpi	r25, 0x08	; 8
    487c:	70 f5       	brcc	.+92     	; 0x48da <lrint+0x6e>
    487e:	09 2e       	mov	r0, r25
    4880:	99 27       	eor	r25, r25
    4882:	66 0f       	add	r22, r22
    4884:	77 1f       	adc	r23, r23
    4886:	88 1f       	adc	r24, r24
    4888:	99 1f       	adc	r25, r25
    488a:	0a 94       	dec	r0
    488c:	d1 f7       	brne	.-12     	; 0x4882 <lrint+0x16>
    488e:	1c c0       	rjmp	.+56     	; 0x48c8 <lrint+0x5c>
    4890:	bb 27       	eor	r27, r27
    4892:	99 3f       	cpi	r25, 0xF9	; 249
    4894:	4c f4       	brge	.+18     	; 0x48a8 <lrint+0x3c>
    4896:	b1 11       	cpse	r27, r1
    4898:	b1 e0       	ldi	r27, 0x01	; 1
    489a:	b6 2b       	or	r27, r22
    489c:	67 2f       	mov	r22, r23
    489e:	78 2f       	mov	r23, r24
    48a0:	88 27       	eor	r24, r24
    48a2:	98 5f       	subi	r25, 0xF8	; 248
    48a4:	b1 f7       	brne	.-20     	; 0x4892 <lrint+0x26>
    48a6:	08 c0       	rjmp	.+16     	; 0x48b8 <lrint+0x4c>
    48a8:	86 95       	lsr	r24
    48aa:	77 95       	ror	r23
    48ac:	67 95       	ror	r22
    48ae:	b7 95       	ror	r27
    48b0:	08 f4       	brcc	.+2      	; 0x48b4 <lrint+0x48>
    48b2:	b1 60       	ori	r27, 0x01	; 1
    48b4:	93 95       	inc	r25
    48b6:	c1 f7       	brne	.-16     	; 0x48a8 <lrint+0x3c>
    48b8:	bb 0f       	add	r27, r27
    48ba:	30 f4       	brcc	.+12     	; 0x48c8 <lrint+0x5c>
    48bc:	11 f4       	brne	.+4      	; 0x48c2 <lrint+0x56>
    48be:	60 ff       	sbrs	r22, 0
    48c0:	03 c0       	rjmp	.+6      	; 0x48c8 <lrint+0x5c>
    48c2:	6f 5f       	subi	r22, 0xFF	; 255
    48c4:	7f 4f       	sbci	r23, 0xFF	; 255
    48c6:	8f 4f       	sbci	r24, 0xFF	; 255
    48c8:	3e f4       	brtc	.+14     	; 0x48d8 <lrint+0x6c>
    48ca:	90 95       	com	r25
    48cc:	80 95       	com	r24
    48ce:	70 95       	com	r23
    48d0:	61 95       	neg	r22
    48d2:	7f 4f       	sbci	r23, 0xFF	; 255
    48d4:	8f 4f       	sbci	r24, 0xFF	; 255
    48d6:	9f 4f       	sbci	r25, 0xFF	; 255
    48d8:	08 95       	ret
    48da:	68 94       	set
    48dc:	bd cf       	rjmp	.-134    	; 0x4858 <__fp_szero>
    48de:	bb cf       	rjmp	.-138    	; 0x4856 <__fp_zero>

000048e0 <__mulsf3>:
    48e0:	0b d0       	rcall	.+22     	; 0x48f8 <__mulsf3x>
    48e2:	86 cf       	rjmp	.-244    	; 0x47f0 <__fp_round>
    48e4:	77 df       	rcall	.-274    	; 0x47d4 <__fp_pscA>
    48e6:	28 f0       	brcs	.+10     	; 0x48f2 <__mulsf3+0x12>
    48e8:	7c df       	rcall	.-264    	; 0x47e2 <__fp_pscB>
    48ea:	18 f0       	brcs	.+6      	; 0x48f2 <__mulsf3+0x12>
    48ec:	95 23       	and	r25, r21
    48ee:	09 f0       	breq	.+2      	; 0x48f2 <__mulsf3+0x12>
    48f0:	68 cf       	rjmp	.-304    	; 0x47c2 <__fp_inf>
    48f2:	6d cf       	rjmp	.-294    	; 0x47ce <__fp_nan>
    48f4:	11 24       	eor	r1, r1
    48f6:	b0 cf       	rjmp	.-160    	; 0x4858 <__fp_szero>

000048f8 <__mulsf3x>:
    48f8:	8c df       	rcall	.-232    	; 0x4812 <__fp_split3>
    48fa:	a0 f3       	brcs	.-24     	; 0x48e4 <__mulsf3+0x4>

000048fc <__mulsf3_pse>:
    48fc:	95 9f       	mul	r25, r21
    48fe:	d1 f3       	breq	.-12     	; 0x48f4 <__mulsf3+0x14>
    4900:	95 0f       	add	r25, r21
    4902:	50 e0       	ldi	r21, 0x00	; 0
    4904:	55 1f       	adc	r21, r21
    4906:	62 9f       	mul	r22, r18
    4908:	f0 01       	movw	r30, r0
    490a:	72 9f       	mul	r23, r18
    490c:	bb 27       	eor	r27, r27
    490e:	f0 0d       	add	r31, r0
    4910:	b1 1d       	adc	r27, r1
    4912:	63 9f       	mul	r22, r19
    4914:	aa 27       	eor	r26, r26
    4916:	f0 0d       	add	r31, r0
    4918:	b1 1d       	adc	r27, r1
    491a:	aa 1f       	adc	r26, r26
    491c:	64 9f       	mul	r22, r20
    491e:	66 27       	eor	r22, r22
    4920:	b0 0d       	add	r27, r0
    4922:	a1 1d       	adc	r26, r1
    4924:	66 1f       	adc	r22, r22
    4926:	82 9f       	mul	r24, r18
    4928:	22 27       	eor	r18, r18
    492a:	b0 0d       	add	r27, r0
    492c:	a1 1d       	adc	r26, r1
    492e:	62 1f       	adc	r22, r18
    4930:	73 9f       	mul	r23, r19
    4932:	b0 0d       	add	r27, r0
    4934:	a1 1d       	adc	r26, r1
    4936:	62 1f       	adc	r22, r18
    4938:	83 9f       	mul	r24, r19
    493a:	a0 0d       	add	r26, r0
    493c:	61 1d       	adc	r22, r1
    493e:	22 1f       	adc	r18, r18
    4940:	74 9f       	mul	r23, r20
    4942:	33 27       	eor	r19, r19
    4944:	a0 0d       	add	r26, r0
    4946:	61 1d       	adc	r22, r1
    4948:	23 1f       	adc	r18, r19
    494a:	84 9f       	mul	r24, r20
    494c:	60 0d       	add	r22, r0
    494e:	21 1d       	adc	r18, r1
    4950:	82 2f       	mov	r24, r18
    4952:	76 2f       	mov	r23, r22
    4954:	6a 2f       	mov	r22, r26
    4956:	11 24       	eor	r1, r1
    4958:	9f 57       	subi	r25, 0x7F	; 127
    495a:	50 40       	sbci	r21, 0x00	; 0
    495c:	8a f0       	brmi	.+34     	; 0x4980 <__mulsf3_pse+0x84>
    495e:	e1 f0       	breq	.+56     	; 0x4998 <__mulsf3_pse+0x9c>
    4960:	88 23       	and	r24, r24
    4962:	4a f0       	brmi	.+18     	; 0x4976 <__mulsf3_pse+0x7a>
    4964:	ee 0f       	add	r30, r30
    4966:	ff 1f       	adc	r31, r31
    4968:	bb 1f       	adc	r27, r27
    496a:	66 1f       	adc	r22, r22
    496c:	77 1f       	adc	r23, r23
    496e:	88 1f       	adc	r24, r24
    4970:	91 50       	subi	r25, 0x01	; 1
    4972:	50 40       	sbci	r21, 0x00	; 0
    4974:	a9 f7       	brne	.-22     	; 0x4960 <__mulsf3_pse+0x64>
    4976:	9e 3f       	cpi	r25, 0xFE	; 254
    4978:	51 05       	cpc	r21, r1
    497a:	70 f0       	brcs	.+28     	; 0x4998 <__mulsf3_pse+0x9c>
    497c:	22 cf       	rjmp	.-444    	; 0x47c2 <__fp_inf>
    497e:	6c cf       	rjmp	.-296    	; 0x4858 <__fp_szero>
    4980:	5f 3f       	cpi	r21, 0xFF	; 255
    4982:	ec f3       	brlt	.-6      	; 0x497e <__mulsf3_pse+0x82>
    4984:	98 3e       	cpi	r25, 0xE8	; 232
    4986:	dc f3       	brlt	.-10     	; 0x497e <__mulsf3_pse+0x82>
    4988:	86 95       	lsr	r24
    498a:	77 95       	ror	r23
    498c:	67 95       	ror	r22
    498e:	b7 95       	ror	r27
    4990:	f7 95       	ror	r31
    4992:	e7 95       	ror	r30
    4994:	9f 5f       	subi	r25, 0xFF	; 255
    4996:	c1 f7       	brne	.-16     	; 0x4988 <__mulsf3_pse+0x8c>
    4998:	fe 2b       	or	r31, r30
    499a:	88 0f       	add	r24, r24
    499c:	91 1d       	adc	r25, r1
    499e:	96 95       	lsr	r25
    49a0:	87 95       	ror	r24
    49a2:	97 f9       	bld	r25, 7
    49a4:	08 95       	ret

000049a6 <pow>:
    49a6:	fa 01       	movw	r30, r20
    49a8:	ee 0f       	add	r30, r30
    49aa:	ff 1f       	adc	r31, r31
    49ac:	30 96       	adiw	r30, 0x00	; 0
    49ae:	21 05       	cpc	r18, r1
    49b0:	31 05       	cpc	r19, r1
    49b2:	99 f1       	breq	.+102    	; 0x4a1a <pow+0x74>
    49b4:	61 15       	cp	r22, r1
    49b6:	71 05       	cpc	r23, r1
    49b8:	61 f4       	brne	.+24     	; 0x49d2 <pow+0x2c>
    49ba:	80 38       	cpi	r24, 0x80	; 128
    49bc:	bf e3       	ldi	r27, 0x3F	; 63
    49be:	9b 07       	cpc	r25, r27
    49c0:	49 f1       	breq	.+82     	; 0x4a14 <pow+0x6e>
    49c2:	68 94       	set
    49c4:	90 38       	cpi	r25, 0x80	; 128
    49c6:	81 05       	cpc	r24, r1
    49c8:	61 f0       	breq	.+24     	; 0x49e2 <pow+0x3c>
    49ca:	80 38       	cpi	r24, 0x80	; 128
    49cc:	bf ef       	ldi	r27, 0xFF	; 255
    49ce:	9b 07       	cpc	r25, r27
    49d0:	41 f0       	breq	.+16     	; 0x49e2 <pow+0x3c>
    49d2:	99 23       	and	r25, r25
    49d4:	42 f5       	brpl	.+80     	; 0x4a26 <pow+0x80>
    49d6:	ff 3f       	cpi	r31, 0xFF	; 255
    49d8:	e1 05       	cpc	r30, r1
    49da:	31 05       	cpc	r19, r1
    49dc:	21 05       	cpc	r18, r1
    49de:	11 f1       	breq	.+68     	; 0x4a24 <pow+0x7e>
    49e0:	e8 94       	clt
    49e2:	08 94       	sec
    49e4:	e7 95       	ror	r30
    49e6:	d9 01       	movw	r26, r18
    49e8:	aa 23       	and	r26, r26
    49ea:	29 f4       	brne	.+10     	; 0x49f6 <pow+0x50>
    49ec:	ab 2f       	mov	r26, r27
    49ee:	be 2f       	mov	r27, r30
    49f0:	f8 5f       	subi	r31, 0xF8	; 248
    49f2:	d0 f3       	brcs	.-12     	; 0x49e8 <pow+0x42>
    49f4:	10 c0       	rjmp	.+32     	; 0x4a16 <pow+0x70>
    49f6:	ff 5f       	subi	r31, 0xFF	; 255
    49f8:	70 f4       	brcc	.+28     	; 0x4a16 <pow+0x70>
    49fa:	a6 95       	lsr	r26
    49fc:	e0 f7       	brcc	.-8      	; 0x49f6 <pow+0x50>
    49fe:	f7 39       	cpi	r31, 0x97	; 151
    4a00:	50 f0       	brcs	.+20     	; 0x4a16 <pow+0x70>
    4a02:	19 f0       	breq	.+6      	; 0x4a0a <pow+0x64>
    4a04:	ff 3a       	cpi	r31, 0xAF	; 175
    4a06:	38 f4       	brcc	.+14     	; 0x4a16 <pow+0x70>
    4a08:	9f 77       	andi	r25, 0x7F	; 127
    4a0a:	9f 93       	push	r25
    4a0c:	0c d0       	rcall	.+24     	; 0x4a26 <pow+0x80>
    4a0e:	0f 90       	pop	r0
    4a10:	07 fc       	sbrc	r0, 7
    4a12:	90 58       	subi	r25, 0x80	; 128
    4a14:	08 95       	ret
    4a16:	3e f0       	brts	.+14     	; 0x4a26 <pow+0x80>
    4a18:	da ce       	rjmp	.-588    	; 0x47ce <__fp_nan>
    4a1a:	60 e0       	ldi	r22, 0x00	; 0
    4a1c:	70 e0       	ldi	r23, 0x00	; 0
    4a1e:	80 e8       	ldi	r24, 0x80	; 128
    4a20:	9f e3       	ldi	r25, 0x3F	; 63
    4a22:	08 95       	ret
    4a24:	4f e7       	ldi	r20, 0x7F	; 127
    4a26:	9f 77       	andi	r25, 0x7F	; 127
    4a28:	5f 93       	push	r21
    4a2a:	4f 93       	push	r20
    4a2c:	3f 93       	push	r19
    4a2e:	2f 93       	push	r18
    4a30:	9e d0       	rcall	.+316    	; 0x4b6e <log>
    4a32:	2f 91       	pop	r18
    4a34:	3f 91       	pop	r19
    4a36:	4f 91       	pop	r20
    4a38:	5f 91       	pop	r21
    4a3a:	52 df       	rcall	.-348    	; 0x48e0 <__mulsf3>
    4a3c:	05 c0       	rjmp	.+10     	; 0x4a48 <exp>
    4a3e:	19 f4       	brne	.+6      	; 0x4a46 <pow+0xa0>
    4a40:	0e f0       	brts	.+2      	; 0x4a44 <pow+0x9e>
    4a42:	bf ce       	rjmp	.-642    	; 0x47c2 <__fp_inf>
    4a44:	08 cf       	rjmp	.-496    	; 0x4856 <__fp_zero>
    4a46:	c3 ce       	rjmp	.-634    	; 0x47ce <__fp_nan>

00004a48 <exp>:
    4a48:	ec de       	rcall	.-552    	; 0x4822 <__fp_splitA>
    4a4a:	c8 f3       	brcs	.-14     	; 0x4a3e <pow+0x98>
    4a4c:	96 38       	cpi	r25, 0x86	; 134
    4a4e:	c0 f7       	brcc	.-16     	; 0x4a40 <pow+0x9a>
    4a50:	07 f8       	bld	r0, 7
    4a52:	0f 92       	push	r0
    4a54:	e8 94       	clt
    4a56:	2b e3       	ldi	r18, 0x3B	; 59
    4a58:	3a ea       	ldi	r19, 0xAA	; 170
    4a5a:	48 eb       	ldi	r20, 0xB8	; 184
    4a5c:	5f e7       	ldi	r21, 0x7F	; 127
    4a5e:	4e df       	rcall	.-356    	; 0x48fc <__mulsf3_pse>
    4a60:	0f 92       	push	r0
    4a62:	0f 92       	push	r0
    4a64:	0f 92       	push	r0
    4a66:	4d b7       	in	r20, 0x3d	; 61
    4a68:	5e b7       	in	r21, 0x3e	; 62
    4a6a:	0f 92       	push	r0
    4a6c:	c0 d0       	rcall	.+384    	; 0x4bee <modf>
    4a6e:	e8 ec       	ldi	r30, 0xC8	; 200
    4a70:	f0 e0       	ldi	r31, 0x00	; 0
    4a72:	16 d0       	rcall	.+44     	; 0x4aa0 <__fp_powser>
    4a74:	4f 91       	pop	r20
    4a76:	5f 91       	pop	r21
    4a78:	ef 91       	pop	r30
    4a7a:	ff 91       	pop	r31
    4a7c:	e5 95       	asr	r30
    4a7e:	ee 1f       	adc	r30, r30
    4a80:	ff 1f       	adc	r31, r31
    4a82:	49 f0       	breq	.+18     	; 0x4a96 <exp+0x4e>
    4a84:	fe 57       	subi	r31, 0x7E	; 126
    4a86:	e0 68       	ori	r30, 0x80	; 128
    4a88:	44 27       	eor	r20, r20
    4a8a:	ee 0f       	add	r30, r30
    4a8c:	44 1f       	adc	r20, r20
    4a8e:	fa 95       	dec	r31
    4a90:	e1 f7       	brne	.-8      	; 0x4a8a <exp+0x42>
    4a92:	41 95       	neg	r20
    4a94:	55 0b       	sbc	r21, r21
    4a96:	32 d0       	rcall	.+100    	; 0x4afc <ldexp>
    4a98:	0f 90       	pop	r0
    4a9a:	07 fe       	sbrs	r0, 7
    4a9c:	26 c0       	rjmp	.+76     	; 0x4aea <inverse>
    4a9e:	08 95       	ret

00004aa0 <__fp_powser>:
    4aa0:	df 93       	push	r29
    4aa2:	cf 93       	push	r28
    4aa4:	1f 93       	push	r17
    4aa6:	0f 93       	push	r16
    4aa8:	ff 92       	push	r15
    4aaa:	ef 92       	push	r14
    4aac:	df 92       	push	r13
    4aae:	7b 01       	movw	r14, r22
    4ab0:	8c 01       	movw	r16, r24
    4ab2:	68 94       	set
    4ab4:	05 c0       	rjmp	.+10     	; 0x4ac0 <__fp_powser+0x20>
    4ab6:	da 2e       	mov	r13, r26
    4ab8:	ef 01       	movw	r28, r30
    4aba:	1e df       	rcall	.-452    	; 0x48f8 <__mulsf3x>
    4abc:	fe 01       	movw	r30, r28
    4abe:	e8 94       	clt
    4ac0:	a5 91       	lpm	r26, Z+
    4ac2:	25 91       	lpm	r18, Z+
    4ac4:	35 91       	lpm	r19, Z+
    4ac6:	45 91       	lpm	r20, Z+
    4ac8:	55 91       	lpm	r21, Z+
    4aca:	ae f3       	brts	.-22     	; 0x4ab6 <__fp_powser+0x16>
    4acc:	ef 01       	movw	r28, r30
    4ace:	28 dd       	rcall	.-1456   	; 0x4520 <__addsf3x>
    4ad0:	fe 01       	movw	r30, r28
    4ad2:	97 01       	movw	r18, r14
    4ad4:	a8 01       	movw	r20, r16
    4ad6:	da 94       	dec	r13
    4ad8:	79 f7       	brne	.-34     	; 0x4ab8 <__fp_powser+0x18>
    4ada:	df 90       	pop	r13
    4adc:	ef 90       	pop	r14
    4ade:	ff 90       	pop	r15
    4ae0:	0f 91       	pop	r16
    4ae2:	1f 91       	pop	r17
    4ae4:	cf 91       	pop	r28
    4ae6:	df 91       	pop	r29
    4ae8:	08 95       	ret

00004aea <inverse>:
    4aea:	9b 01       	movw	r18, r22
    4aec:	ac 01       	movw	r20, r24
    4aee:	60 e0       	ldi	r22, 0x00	; 0
    4af0:	70 e0       	ldi	r23, 0x00	; 0
    4af2:	80 e8       	ldi	r24, 0x80	; 128
    4af4:	9f e3       	ldi	r25, 0x3F	; 63
    4af6:	6b cd       	rjmp	.-1322   	; 0x45ce <__divsf3>
    4af8:	64 ce       	rjmp	.-824    	; 0x47c2 <__fp_inf>
    4afa:	ac c0       	rjmp	.+344    	; 0x4c54 <__fp_mpack>

00004afc <ldexp>:
    4afc:	92 de       	rcall	.-732    	; 0x4822 <__fp_splitA>
    4afe:	e8 f3       	brcs	.-6      	; 0x4afa <inverse+0x10>
    4b00:	99 23       	and	r25, r25
    4b02:	d9 f3       	breq	.-10     	; 0x4afa <inverse+0x10>
    4b04:	94 0f       	add	r25, r20
    4b06:	51 1d       	adc	r21, r1
    4b08:	bb f3       	brvs	.-18     	; 0x4af8 <inverse+0xe>
    4b0a:	91 50       	subi	r25, 0x01	; 1
    4b0c:	50 40       	sbci	r21, 0x00	; 0
    4b0e:	94 f0       	brlt	.+36     	; 0x4b34 <ldexp+0x38>
    4b10:	59 f0       	breq	.+22     	; 0x4b28 <ldexp+0x2c>
    4b12:	88 23       	and	r24, r24
    4b14:	32 f0       	brmi	.+12     	; 0x4b22 <ldexp+0x26>
    4b16:	66 0f       	add	r22, r22
    4b18:	77 1f       	adc	r23, r23
    4b1a:	88 1f       	adc	r24, r24
    4b1c:	91 50       	subi	r25, 0x01	; 1
    4b1e:	50 40       	sbci	r21, 0x00	; 0
    4b20:	c1 f7       	brne	.-16     	; 0x4b12 <ldexp+0x16>
    4b22:	9e 3f       	cpi	r25, 0xFE	; 254
    4b24:	51 05       	cpc	r21, r1
    4b26:	44 f7       	brge	.-48     	; 0x4af8 <inverse+0xe>
    4b28:	88 0f       	add	r24, r24
    4b2a:	91 1d       	adc	r25, r1
    4b2c:	96 95       	lsr	r25
    4b2e:	87 95       	ror	r24
    4b30:	97 f9       	bld	r25, 7
    4b32:	08 95       	ret
    4b34:	5f 3f       	cpi	r21, 0xFF	; 255
    4b36:	ac f0       	brlt	.+42     	; 0x4b62 <ldexp+0x66>
    4b38:	98 3e       	cpi	r25, 0xE8	; 232
    4b3a:	9c f0       	brlt	.+38     	; 0x4b62 <ldexp+0x66>
    4b3c:	bb 27       	eor	r27, r27
    4b3e:	86 95       	lsr	r24
    4b40:	77 95       	ror	r23
    4b42:	67 95       	ror	r22
    4b44:	b7 95       	ror	r27
    4b46:	08 f4       	brcc	.+2      	; 0x4b4a <ldexp+0x4e>
    4b48:	b1 60       	ori	r27, 0x01	; 1
    4b4a:	93 95       	inc	r25
    4b4c:	c1 f7       	brne	.-16     	; 0x4b3e <ldexp+0x42>
    4b4e:	bb 0f       	add	r27, r27
    4b50:	58 f7       	brcc	.-42     	; 0x4b28 <ldexp+0x2c>
    4b52:	11 f4       	brne	.+4      	; 0x4b58 <ldexp+0x5c>
    4b54:	60 ff       	sbrs	r22, 0
    4b56:	e8 cf       	rjmp	.-48     	; 0x4b28 <ldexp+0x2c>
    4b58:	6f 5f       	subi	r22, 0xFF	; 255
    4b5a:	7f 4f       	sbci	r23, 0xFF	; 255
    4b5c:	8f 4f       	sbci	r24, 0xFF	; 255
    4b5e:	9f 4f       	sbci	r25, 0xFF	; 255
    4b60:	e3 cf       	rjmp	.-58     	; 0x4b28 <ldexp+0x2c>
    4b62:	7a ce       	rjmp	.-780    	; 0x4858 <__fp_szero>
    4b64:	0e f0       	brts	.+2      	; 0x4b68 <ldexp+0x6c>
    4b66:	76 c0       	rjmp	.+236    	; 0x4c54 <__fp_mpack>
    4b68:	32 ce       	rjmp	.-924    	; 0x47ce <__fp_nan>
    4b6a:	68 94       	set
    4b6c:	2a ce       	rjmp	.-940    	; 0x47c2 <__fp_inf>

00004b6e <log>:
    4b6e:	59 de       	rcall	.-846    	; 0x4822 <__fp_splitA>
    4b70:	c8 f3       	brcs	.-14     	; 0x4b64 <ldexp+0x68>
    4b72:	99 23       	and	r25, r25
    4b74:	d1 f3       	breq	.-12     	; 0x4b6a <ldexp+0x6e>
    4b76:	c6 f3       	brts	.-16     	; 0x4b68 <ldexp+0x6c>
    4b78:	df 93       	push	r29
    4b7a:	cf 93       	push	r28
    4b7c:	1f 93       	push	r17
    4b7e:	0f 93       	push	r16
    4b80:	ff 92       	push	r15
    4b82:	c9 2f       	mov	r28, r25
    4b84:	dd 27       	eor	r29, r29
    4b86:	88 23       	and	r24, r24
    4b88:	2a f0       	brmi	.+10     	; 0x4b94 <log+0x26>
    4b8a:	21 97       	sbiw	r28, 0x01	; 1
    4b8c:	66 0f       	add	r22, r22
    4b8e:	77 1f       	adc	r23, r23
    4b90:	88 1f       	adc	r24, r24
    4b92:	da f7       	brpl	.-10     	; 0x4b8a <log+0x1c>
    4b94:	20 e0       	ldi	r18, 0x00	; 0
    4b96:	30 e0       	ldi	r19, 0x00	; 0
    4b98:	40 e8       	ldi	r20, 0x80	; 128
    4b9a:	5f eb       	ldi	r21, 0xBF	; 191
    4b9c:	9f e3       	ldi	r25, 0x3F	; 63
    4b9e:	88 39       	cpi	r24, 0x98	; 152
    4ba0:	20 f0       	brcs	.+8      	; 0x4baa <log+0x3c>
    4ba2:	80 3e       	cpi	r24, 0xE0	; 224
    4ba4:	30 f0       	brcs	.+12     	; 0x4bb2 <log+0x44>
    4ba6:	21 96       	adiw	r28, 0x01	; 1
    4ba8:	8f 77       	andi	r24, 0x7F	; 127
    4baa:	a9 dc       	rcall	.-1710   	; 0x44fe <__addsf3>
    4bac:	e0 ef       	ldi	r30, 0xF0	; 240
    4bae:	f0 e0       	ldi	r31, 0x00	; 0
    4bb0:	03 c0       	rjmp	.+6      	; 0x4bb8 <log+0x4a>
    4bb2:	a5 dc       	rcall	.-1718   	; 0x44fe <__addsf3>
    4bb4:	ed e1       	ldi	r30, 0x1D	; 29
    4bb6:	f1 e0       	ldi	r31, 0x01	; 1
    4bb8:	73 df       	rcall	.-282    	; 0x4aa0 <__fp_powser>
    4bba:	8b 01       	movw	r16, r22
    4bbc:	be 01       	movw	r22, r28
    4bbe:	ec 01       	movw	r28, r24
    4bc0:	fb 2e       	mov	r15, r27
    4bc2:	6f 57       	subi	r22, 0x7F	; 127
    4bc4:	71 09       	sbc	r23, r1
    4bc6:	75 95       	asr	r23
    4bc8:	77 1f       	adc	r23, r23
    4bca:	88 0b       	sbc	r24, r24
    4bcc:	99 0b       	sbc	r25, r25
    4bce:	9a dd       	rcall	.-1228   	; 0x4704 <__floatsisf>
    4bd0:	28 e1       	ldi	r18, 0x18	; 24
    4bd2:	32 e7       	ldi	r19, 0x72	; 114
    4bd4:	41 e3       	ldi	r20, 0x31	; 49
    4bd6:	5f e3       	ldi	r21, 0x3F	; 63
    4bd8:	8f de       	rcall	.-738    	; 0x48f8 <__mulsf3x>
    4bda:	af 2d       	mov	r26, r15
    4bdc:	98 01       	movw	r18, r16
    4bde:	ae 01       	movw	r20, r28
    4be0:	ff 90       	pop	r15
    4be2:	0f 91       	pop	r16
    4be4:	1f 91       	pop	r17
    4be6:	cf 91       	pop	r28
    4be8:	df 91       	pop	r29
    4bea:	9a dc       	rcall	.-1740   	; 0x4520 <__addsf3x>
    4bec:	01 ce       	rjmp	.-1022   	; 0x47f0 <__fp_round>

00004bee <modf>:
    4bee:	fa 01       	movw	r30, r20
    4bf0:	dc 01       	movw	r26, r24
    4bf2:	aa 0f       	add	r26, r26
    4bf4:	bb 1f       	adc	r27, r27
    4bf6:	9b 01       	movw	r18, r22
    4bf8:	ac 01       	movw	r20, r24
    4bfa:	bf 57       	subi	r27, 0x7F	; 127
    4bfc:	28 f4       	brcc	.+10     	; 0x4c08 <modf+0x1a>
    4bfe:	22 27       	eor	r18, r18
    4c00:	33 27       	eor	r19, r19
    4c02:	44 27       	eor	r20, r20
    4c04:	50 78       	andi	r21, 0x80	; 128
    4c06:	1f c0       	rjmp	.+62     	; 0x4c46 <modf+0x58>
    4c08:	b7 51       	subi	r27, 0x17	; 23
    4c0a:	88 f4       	brcc	.+34     	; 0x4c2e <modf+0x40>
    4c0c:	ab 2f       	mov	r26, r27
    4c0e:	00 24       	eor	r0, r0
    4c10:	46 95       	lsr	r20
    4c12:	37 95       	ror	r19
    4c14:	27 95       	ror	r18
    4c16:	01 1c       	adc	r0, r1
    4c18:	a3 95       	inc	r26
    4c1a:	d2 f3       	brmi	.-12     	; 0x4c10 <modf+0x22>
    4c1c:	00 20       	and	r0, r0
    4c1e:	69 f0       	breq	.+26     	; 0x4c3a <modf+0x4c>
    4c20:	22 0f       	add	r18, r18
    4c22:	33 1f       	adc	r19, r19
    4c24:	44 1f       	adc	r20, r20
    4c26:	b3 95       	inc	r27
    4c28:	da f3       	brmi	.-10     	; 0x4c20 <modf+0x32>
    4c2a:	0d d0       	rcall	.+26     	; 0x4c46 <modf+0x58>
    4c2c:	67 cc       	rjmp	.-1842   	; 0x44fc <__subsf3>
    4c2e:	61 30       	cpi	r22, 0x01	; 1
    4c30:	71 05       	cpc	r23, r1
    4c32:	a0 e8       	ldi	r26, 0x80	; 128
    4c34:	8a 07       	cpc	r24, r26
    4c36:	b9 46       	sbci	r27, 0x69	; 105
    4c38:	30 f4       	brcc	.+12     	; 0x4c46 <modf+0x58>
    4c3a:	9b 01       	movw	r18, r22
    4c3c:	ac 01       	movw	r20, r24
    4c3e:	66 27       	eor	r22, r22
    4c40:	77 27       	eor	r23, r23
    4c42:	88 27       	eor	r24, r24
    4c44:	90 78       	andi	r25, 0x80	; 128
    4c46:	30 96       	adiw	r30, 0x00	; 0
    4c48:	21 f0       	breq	.+8      	; 0x4c52 <modf+0x64>
    4c4a:	20 83       	st	Z, r18
    4c4c:	31 83       	std	Z+1, r19	; 0x01
    4c4e:	42 83       	std	Z+2, r20	; 0x02
    4c50:	53 83       	std	Z+3, r21	; 0x03
    4c52:	08 95       	ret

00004c54 <__fp_mpack>:
    4c54:	9f 3f       	cpi	r25, 0xFF	; 255
    4c56:	31 f0       	breq	.+12     	; 0x4c64 <__fp_mpack_finite+0xc>

00004c58 <__fp_mpack_finite>:
    4c58:	91 50       	subi	r25, 0x01	; 1
    4c5a:	20 f4       	brcc	.+8      	; 0x4c64 <__fp_mpack_finite+0xc>
    4c5c:	87 95       	ror	r24
    4c5e:	77 95       	ror	r23
    4c60:	67 95       	ror	r22
    4c62:	b7 95       	ror	r27
    4c64:	88 0f       	add	r24, r24
    4c66:	91 1d       	adc	r25, r1
    4c68:	96 95       	lsr	r25
    4c6a:	87 95       	ror	r24
    4c6c:	97 f9       	bld	r25, 7
    4c6e:	08 95       	ret

00004c70 <vfprintf>:
    4c70:	a1 e1       	ldi	r26, 0x11	; 17
    4c72:	b0 e0       	ldi	r27, 0x00	; 0
    4c74:	ed e3       	ldi	r30, 0x3D	; 61
    4c76:	f6 e2       	ldi	r31, 0x26	; 38
    4c78:	b7 c3       	rjmp	.+1902   	; 0x53e8 <__prologue_saves__>
    4c7a:	3c 01       	movw	r6, r24
    4c7c:	7f 87       	std	Y+15, r23	; 0x0f
    4c7e:	6e 87       	std	Y+14, r22	; 0x0e
    4c80:	6a 01       	movw	r12, r20
    4c82:	fc 01       	movw	r30, r24
    4c84:	17 82       	std	Z+7, r1	; 0x07
    4c86:	16 82       	std	Z+6, r1	; 0x06
    4c88:	83 81       	ldd	r24, Z+3	; 0x03
    4c8a:	81 fd       	sbrc	r24, 1
    4c8c:	03 c0       	rjmp	.+6      	; 0x4c94 <vfprintf+0x24>
    4c8e:	6f ef       	ldi	r22, 0xFF	; 255
    4c90:	7f ef       	ldi	r23, 0xFF	; 255
    4c92:	52 c3       	rjmp	.+1700   	; 0x5338 <vfprintf+0x6c8>
    4c94:	9e 01       	movw	r18, r28
    4c96:	2f 5f       	subi	r18, 0xFF	; 255
    4c98:	3f 4f       	sbci	r19, 0xFF	; 255
    4c9a:	39 8b       	std	Y+17, r19	; 0x11
    4c9c:	28 8b       	std	Y+16, r18	; 0x10
    4c9e:	f3 01       	movw	r30, r6
    4ca0:	23 81       	ldd	r18, Z+3	; 0x03
    4ca2:	ee 85       	ldd	r30, Y+14	; 0x0e
    4ca4:	ff 85       	ldd	r31, Y+15	; 0x0f
    4ca6:	23 fd       	sbrc	r18, 3
    4ca8:	85 91       	lpm	r24, Z+
    4caa:	23 ff       	sbrs	r18, 3
    4cac:	81 91       	ld	r24, Z+
    4cae:	ff 87       	std	Y+15, r31	; 0x0f
    4cb0:	ee 87       	std	Y+14, r30	; 0x0e
    4cb2:	88 23       	and	r24, r24
    4cb4:	09 f4       	brne	.+2      	; 0x4cb8 <vfprintf+0x48>
    4cb6:	3d c3       	rjmp	.+1658   	; 0x5332 <vfprintf+0x6c2>
    4cb8:	85 32       	cpi	r24, 0x25	; 37
    4cba:	51 f4       	brne	.+20     	; 0x4cd0 <vfprintf+0x60>
    4cbc:	ee 85       	ldd	r30, Y+14	; 0x0e
    4cbe:	ff 85       	ldd	r31, Y+15	; 0x0f
    4cc0:	23 fd       	sbrc	r18, 3
    4cc2:	85 91       	lpm	r24, Z+
    4cc4:	23 ff       	sbrs	r18, 3
    4cc6:	81 91       	ld	r24, Z+
    4cc8:	ff 87       	std	Y+15, r31	; 0x0f
    4cca:	ee 87       	std	Y+14, r30	; 0x0e
    4ccc:	85 32       	cpi	r24, 0x25	; 37
    4cce:	21 f4       	brne	.+8      	; 0x4cd8 <vfprintf+0x68>
    4cd0:	90 e0       	ldi	r25, 0x00	; 0
    4cd2:	b3 01       	movw	r22, r6
    4cd4:	20 d6       	rcall	.+3136   	; 0x5916 <fputc>
    4cd6:	e3 cf       	rjmp	.-58     	; 0x4c9e <vfprintf+0x2e>
    4cd8:	98 2f       	mov	r25, r24
    4cda:	10 e0       	ldi	r17, 0x00	; 0
    4cdc:	88 24       	eor	r8, r8
    4cde:	99 24       	eor	r9, r9
    4ce0:	10 32       	cpi	r17, 0x20	; 32
    4ce2:	b0 f4       	brcc	.+44     	; 0x4d10 <vfprintf+0xa0>
    4ce4:	9b 32       	cpi	r25, 0x2B	; 43
    4ce6:	69 f0       	breq	.+26     	; 0x4d02 <vfprintf+0x92>
    4ce8:	9c 32       	cpi	r25, 0x2C	; 44
    4cea:	28 f4       	brcc	.+10     	; 0x4cf6 <vfprintf+0x86>
    4cec:	90 32       	cpi	r25, 0x20	; 32
    4cee:	51 f0       	breq	.+20     	; 0x4d04 <vfprintf+0x94>
    4cf0:	93 32       	cpi	r25, 0x23	; 35
    4cf2:	71 f4       	brne	.+28     	; 0x4d10 <vfprintf+0xa0>
    4cf4:	0b c0       	rjmp	.+22     	; 0x4d0c <vfprintf+0x9c>
    4cf6:	9d 32       	cpi	r25, 0x2D	; 45
    4cf8:	39 f0       	breq	.+14     	; 0x4d08 <vfprintf+0x98>
    4cfa:	90 33       	cpi	r25, 0x30	; 48
    4cfc:	49 f4       	brne	.+18     	; 0x4d10 <vfprintf+0xa0>
    4cfe:	11 60       	ori	r17, 0x01	; 1
    4d00:	28 c0       	rjmp	.+80     	; 0x4d52 <vfprintf+0xe2>
    4d02:	12 60       	ori	r17, 0x02	; 2
    4d04:	14 60       	ori	r17, 0x04	; 4
    4d06:	25 c0       	rjmp	.+74     	; 0x4d52 <vfprintf+0xe2>
    4d08:	18 60       	ori	r17, 0x08	; 8
    4d0a:	23 c0       	rjmp	.+70     	; 0x4d52 <vfprintf+0xe2>
    4d0c:	10 61       	ori	r17, 0x10	; 16
    4d0e:	21 c0       	rjmp	.+66     	; 0x4d52 <vfprintf+0xe2>
    4d10:	17 fd       	sbrc	r17, 7
    4d12:	2a c0       	rjmp	.+84     	; 0x4d68 <vfprintf+0xf8>
    4d14:	89 2f       	mov	r24, r25
    4d16:	80 53       	subi	r24, 0x30	; 48
    4d18:	8a 30       	cpi	r24, 0x0A	; 10
    4d1a:	78 f4       	brcc	.+30     	; 0x4d3a <vfprintf+0xca>
    4d1c:	16 ff       	sbrs	r17, 6
    4d1e:	06 c0       	rjmp	.+12     	; 0x4d2c <vfprintf+0xbc>
    4d20:	fa e0       	ldi	r31, 0x0A	; 10
    4d22:	9f 9e       	mul	r9, r31
    4d24:	90 2c       	mov	r9, r0
    4d26:	11 24       	eor	r1, r1
    4d28:	98 0e       	add	r9, r24
    4d2a:	13 c0       	rjmp	.+38     	; 0x4d52 <vfprintf+0xe2>
    4d2c:	3a e0       	ldi	r19, 0x0A	; 10
    4d2e:	83 9e       	mul	r8, r19
    4d30:	80 2c       	mov	r8, r0
    4d32:	11 24       	eor	r1, r1
    4d34:	88 0e       	add	r8, r24
    4d36:	10 62       	ori	r17, 0x20	; 32
    4d38:	0c c0       	rjmp	.+24     	; 0x4d52 <vfprintf+0xe2>
    4d3a:	9e 32       	cpi	r25, 0x2E	; 46
    4d3c:	21 f4       	brne	.+8      	; 0x4d46 <vfprintf+0xd6>
    4d3e:	16 fd       	sbrc	r17, 6
    4d40:	f8 c2       	rjmp	.+1520   	; 0x5332 <vfprintf+0x6c2>
    4d42:	10 64       	ori	r17, 0x40	; 64
    4d44:	06 c0       	rjmp	.+12     	; 0x4d52 <vfprintf+0xe2>
    4d46:	9c 36       	cpi	r25, 0x6C	; 108
    4d48:	11 f4       	brne	.+4      	; 0x4d4e <vfprintf+0xde>
    4d4a:	10 68       	ori	r17, 0x80	; 128
    4d4c:	02 c0       	rjmp	.+4      	; 0x4d52 <vfprintf+0xe2>
    4d4e:	98 36       	cpi	r25, 0x68	; 104
    4d50:	59 f4       	brne	.+22     	; 0x4d68 <vfprintf+0xf8>
    4d52:	ee 85       	ldd	r30, Y+14	; 0x0e
    4d54:	ff 85       	ldd	r31, Y+15	; 0x0f
    4d56:	23 fd       	sbrc	r18, 3
    4d58:	95 91       	lpm	r25, Z+
    4d5a:	23 ff       	sbrs	r18, 3
    4d5c:	91 91       	ld	r25, Z+
    4d5e:	ff 87       	std	Y+15, r31	; 0x0f
    4d60:	ee 87       	std	Y+14, r30	; 0x0e
    4d62:	99 23       	and	r25, r25
    4d64:	09 f0       	breq	.+2      	; 0x4d68 <vfprintf+0xf8>
    4d66:	bc cf       	rjmp	.-136    	; 0x4ce0 <vfprintf+0x70>
    4d68:	89 2f       	mov	r24, r25
    4d6a:	85 54       	subi	r24, 0x45	; 69
    4d6c:	83 30       	cpi	r24, 0x03	; 3
    4d6e:	20 f4       	brcc	.+8      	; 0x4d78 <vfprintf+0x108>
    4d70:	81 2f       	mov	r24, r17
    4d72:	80 61       	ori	r24, 0x10	; 16
    4d74:	90 5e       	subi	r25, 0xE0	; 224
    4d76:	07 c0       	rjmp	.+14     	; 0x4d86 <vfprintf+0x116>
    4d78:	89 2f       	mov	r24, r25
    4d7a:	85 56       	subi	r24, 0x65	; 101
    4d7c:	83 30       	cpi	r24, 0x03	; 3
    4d7e:	08 f0       	brcs	.+2      	; 0x4d82 <vfprintf+0x112>
    4d80:	8f c1       	rjmp	.+798    	; 0x50a0 <vfprintf+0x430>
    4d82:	81 2f       	mov	r24, r17
    4d84:	8f 7e       	andi	r24, 0xEF	; 239
    4d86:	86 fd       	sbrc	r24, 6
    4d88:	02 c0       	rjmp	.+4      	; 0x4d8e <vfprintf+0x11e>
    4d8a:	76 e0       	ldi	r23, 0x06	; 6
    4d8c:	97 2e       	mov	r9, r23
    4d8e:	6f e3       	ldi	r22, 0x3F	; 63
    4d90:	f6 2e       	mov	r15, r22
    4d92:	f8 22       	and	r15, r24
    4d94:	95 36       	cpi	r25, 0x65	; 101
    4d96:	19 f4       	brne	.+6      	; 0x4d9e <vfprintf+0x12e>
    4d98:	f0 e4       	ldi	r31, 0x40	; 64
    4d9a:	ff 2a       	or	r15, r31
    4d9c:	07 c0       	rjmp	.+14     	; 0x4dac <vfprintf+0x13c>
    4d9e:	96 36       	cpi	r25, 0x66	; 102
    4da0:	19 f4       	brne	.+6      	; 0x4da8 <vfprintf+0x138>
    4da2:	20 e8       	ldi	r18, 0x80	; 128
    4da4:	f2 2a       	or	r15, r18
    4da6:	02 c0       	rjmp	.+4      	; 0x4dac <vfprintf+0x13c>
    4da8:	91 10       	cpse	r9, r1
    4daa:	9a 94       	dec	r9
    4dac:	f7 fe       	sbrs	r15, 7
    4dae:	0a c0       	rjmp	.+20     	; 0x4dc4 <vfprintf+0x154>
    4db0:	3b e3       	ldi	r19, 0x3B	; 59
    4db2:	39 15       	cp	r19, r9
    4db4:	18 f4       	brcc	.+6      	; 0x4dbc <vfprintf+0x14c>
    4db6:	5c e3       	ldi	r21, 0x3C	; 60
    4db8:	b5 2e       	mov	r11, r21
    4dba:	02 c0       	rjmp	.+4      	; 0x4dc0 <vfprintf+0x150>
    4dbc:	b9 2c       	mov	r11, r9
    4dbe:	b3 94       	inc	r11
    4dc0:	27 e0       	ldi	r18, 0x07	; 7
    4dc2:	09 c0       	rjmp	.+18     	; 0x4dd6 <vfprintf+0x166>
    4dc4:	47 e0       	ldi	r20, 0x07	; 7
    4dc6:	49 15       	cp	r20, r9
    4dc8:	20 f4       	brcc	.+8      	; 0x4dd2 <vfprintf+0x162>
    4dca:	bb 24       	eor	r11, r11
    4dcc:	47 e0       	ldi	r20, 0x07	; 7
    4dce:	94 2e       	mov	r9, r20
    4dd0:	f7 cf       	rjmp	.-18     	; 0x4dc0 <vfprintf+0x150>
    4dd2:	29 2d       	mov	r18, r9
    4dd4:	bb 24       	eor	r11, r11
    4dd6:	c6 01       	movw	r24, r12
    4dd8:	04 96       	adiw	r24, 0x04	; 4
    4dda:	9d 87       	std	Y+13, r25	; 0x0d
    4ddc:	8c 87       	std	Y+12, r24	; 0x0c
    4dde:	f6 01       	movw	r30, r12
    4de0:	60 81       	ld	r22, Z
    4de2:	71 81       	ldd	r23, Z+1	; 0x01
    4de4:	82 81       	ldd	r24, Z+2	; 0x02
    4de6:	93 81       	ldd	r25, Z+3	; 0x03
    4de8:	ae 01       	movw	r20, r28
    4dea:	4f 5f       	subi	r20, 0xFF	; 255
    4dec:	5f 4f       	sbci	r21, 0xFF	; 255
    4dee:	0b 2d       	mov	r16, r11
    4df0:	a4 d4       	rcall	.+2376   	; 0x573a <__ftoa_engine>
    4df2:	6c 01       	movw	r12, r24
    4df4:	09 81       	ldd	r16, Y+1	; 0x01
    4df6:	20 2e       	mov	r2, r16
    4df8:	33 24       	eor	r3, r3
    4dfa:	00 ff       	sbrs	r16, 0
    4dfc:	04 c0       	rjmp	.+8      	; 0x4e06 <vfprintf+0x196>
    4dfe:	03 fd       	sbrc	r16, 3
    4e00:	02 c0       	rjmp	.+4      	; 0x4e06 <vfprintf+0x196>
    4e02:	1d e2       	ldi	r17, 0x2D	; 45
    4e04:	09 c0       	rjmp	.+18     	; 0x4e18 <vfprintf+0x1a8>
    4e06:	f1 fe       	sbrs	r15, 1
    4e08:	02 c0       	rjmp	.+4      	; 0x4e0e <vfprintf+0x19e>
    4e0a:	1b e2       	ldi	r17, 0x2B	; 43
    4e0c:	05 c0       	rjmp	.+10     	; 0x4e18 <vfprintf+0x1a8>
    4e0e:	f2 fc       	sbrc	r15, 2
    4e10:	02 c0       	rjmp	.+4      	; 0x4e16 <vfprintf+0x1a6>
    4e12:	10 e0       	ldi	r17, 0x00	; 0
    4e14:	01 c0       	rjmp	.+2      	; 0x4e18 <vfprintf+0x1a8>
    4e16:	10 e2       	ldi	r17, 0x20	; 32
    4e18:	c1 01       	movw	r24, r2
    4e1a:	8c 70       	andi	r24, 0x0C	; 12
    4e1c:	90 70       	andi	r25, 0x00	; 0
    4e1e:	89 2b       	or	r24, r25
    4e20:	a1 f1       	breq	.+104    	; 0x4e8a <vfprintf+0x21a>
    4e22:	11 23       	and	r17, r17
    4e24:	11 f4       	brne	.+4      	; 0x4e2a <vfprintf+0x1ba>
    4e26:	83 e0       	ldi	r24, 0x03	; 3
    4e28:	01 c0       	rjmp	.+2      	; 0x4e2c <vfprintf+0x1bc>
    4e2a:	84 e0       	ldi	r24, 0x04	; 4
    4e2c:	88 15       	cp	r24, r8
    4e2e:	10 f0       	brcs	.+4      	; 0x4e34 <vfprintf+0x1c4>
    4e30:	88 24       	eor	r8, r8
    4e32:	09 c0       	rjmp	.+18     	; 0x4e46 <vfprintf+0x1d6>
    4e34:	88 1a       	sub	r8, r24
    4e36:	f3 fc       	sbrc	r15, 3
    4e38:	06 c0       	rjmp	.+12     	; 0x4e46 <vfprintf+0x1d6>
    4e3a:	80 e2       	ldi	r24, 0x20	; 32
    4e3c:	90 e0       	ldi	r25, 0x00	; 0
    4e3e:	b3 01       	movw	r22, r6
    4e40:	6a d5       	rcall	.+2772   	; 0x5916 <fputc>
    4e42:	8a 94       	dec	r8
    4e44:	d1 f7       	brne	.-12     	; 0x4e3a <vfprintf+0x1ca>
    4e46:	11 23       	and	r17, r17
    4e48:	21 f0       	breq	.+8      	; 0x4e52 <vfprintf+0x1e2>
    4e4a:	81 2f       	mov	r24, r17
    4e4c:	90 e0       	ldi	r25, 0x00	; 0
    4e4e:	b3 01       	movw	r22, r6
    4e50:	62 d5       	rcall	.+2756   	; 0x5916 <fputc>
    4e52:	23 fe       	sbrs	r2, 3
    4e54:	03 c0       	rjmp	.+6      	; 0x4e5c <vfprintf+0x1ec>
    4e56:	0f e5       	ldi	r16, 0x5F	; 95
    4e58:	15 e0       	ldi	r17, 0x05	; 5
    4e5a:	0d c0       	rjmp	.+26     	; 0x4e76 <vfprintf+0x206>
    4e5c:	03 e6       	ldi	r16, 0x63	; 99
    4e5e:	15 e0       	ldi	r17, 0x05	; 5
    4e60:	0a c0       	rjmp	.+20     	; 0x4e76 <vfprintf+0x206>
    4e62:	e1 14       	cp	r14, r1
    4e64:	f1 04       	cpc	r15, r1
    4e66:	09 f0       	breq	.+2      	; 0x4e6a <vfprintf+0x1fa>
    4e68:	80 52       	subi	r24, 0x20	; 32
    4e6a:	90 e0       	ldi	r25, 0x00	; 0
    4e6c:	b3 01       	movw	r22, r6
    4e6e:	53 d5       	rcall	.+2726   	; 0x5916 <fputc>
    4e70:	0f 5f       	subi	r16, 0xFF	; 255
    4e72:	1f 4f       	sbci	r17, 0xFF	; 255
    4e74:	05 c0       	rjmp	.+10     	; 0x4e80 <vfprintf+0x210>
    4e76:	ef 2c       	mov	r14, r15
    4e78:	ff 24       	eor	r15, r15
    4e7a:	f0 e1       	ldi	r31, 0x10	; 16
    4e7c:	ef 22       	and	r14, r31
    4e7e:	ff 24       	eor	r15, r15
    4e80:	f8 01       	movw	r30, r16
    4e82:	84 91       	lpm	r24, Z+
    4e84:	88 23       	and	r24, r24
    4e86:	69 f7       	brne	.-38     	; 0x4e62 <vfprintf+0x1f2>
    4e88:	08 c1       	rjmp	.+528    	; 0x509a <vfprintf+0x42a>
    4e8a:	f7 fe       	sbrs	r15, 7
    4e8c:	12 c0       	rjmp	.+36     	; 0x4eb2 <vfprintf+0x242>
    4e8e:	bc 0c       	add	r11, r12
    4e90:	24 fe       	sbrs	r2, 4
    4e92:	04 c0       	rjmp	.+8      	; 0x4e9c <vfprintf+0x22c>
    4e94:	8a 81       	ldd	r24, Y+2	; 0x02
    4e96:	81 33       	cpi	r24, 0x31	; 49
    4e98:	09 f4       	brne	.+2      	; 0x4e9c <vfprintf+0x22c>
    4e9a:	ba 94       	dec	r11
    4e9c:	1b 14       	cp	r1, r11
    4e9e:	1c f0       	brlt	.+6      	; 0x4ea6 <vfprintf+0x236>
    4ea0:	bb 24       	eor	r11, r11
    4ea2:	b3 94       	inc	r11
    4ea4:	2d c0       	rjmp	.+90     	; 0x4f00 <vfprintf+0x290>
    4ea6:	f8 e0       	ldi	r31, 0x08	; 8
    4ea8:	fb 15       	cp	r31, r11
    4eaa:	50 f5       	brcc	.+84     	; 0x4f00 <vfprintf+0x290>
    4eac:	38 e0       	ldi	r19, 0x08	; 8
    4eae:	b3 2e       	mov	r11, r19
    4eb0:	27 c0       	rjmp	.+78     	; 0x4f00 <vfprintf+0x290>
    4eb2:	f6 fc       	sbrc	r15, 6
    4eb4:	25 c0       	rjmp	.+74     	; 0x4f00 <vfprintf+0x290>
    4eb6:	89 2d       	mov	r24, r9
    4eb8:	90 e0       	ldi	r25, 0x00	; 0
    4eba:	8c 15       	cp	r24, r12
    4ebc:	9d 05       	cpc	r25, r13
    4ebe:	4c f0       	brlt	.+18     	; 0x4ed2 <vfprintf+0x262>
    4ec0:	2c ef       	ldi	r18, 0xFC	; 252
    4ec2:	c2 16       	cp	r12, r18
    4ec4:	2f ef       	ldi	r18, 0xFF	; 255
    4ec6:	d2 06       	cpc	r13, r18
    4ec8:	24 f0       	brlt	.+8      	; 0x4ed2 <vfprintf+0x262>
    4eca:	30 e8       	ldi	r19, 0x80	; 128
    4ecc:	f3 2a       	or	r15, r19
    4ece:	01 c0       	rjmp	.+2      	; 0x4ed2 <vfprintf+0x262>
    4ed0:	9a 94       	dec	r9
    4ed2:	99 20       	and	r9, r9
    4ed4:	49 f0       	breq	.+18     	; 0x4ee8 <vfprintf+0x278>
    4ed6:	e2 e0       	ldi	r30, 0x02	; 2
    4ed8:	f0 e0       	ldi	r31, 0x00	; 0
    4eda:	ec 0f       	add	r30, r28
    4edc:	fd 1f       	adc	r31, r29
    4ede:	e9 0d       	add	r30, r9
    4ee0:	f1 1d       	adc	r31, r1
    4ee2:	80 81       	ld	r24, Z
    4ee4:	80 33       	cpi	r24, 0x30	; 48
    4ee6:	a1 f3       	breq	.-24     	; 0x4ed0 <vfprintf+0x260>
    4ee8:	f7 fe       	sbrs	r15, 7
    4eea:	0a c0       	rjmp	.+20     	; 0x4f00 <vfprintf+0x290>
    4eec:	b9 2c       	mov	r11, r9
    4eee:	b3 94       	inc	r11
    4ef0:	89 2d       	mov	r24, r9
    4ef2:	90 e0       	ldi	r25, 0x00	; 0
    4ef4:	c8 16       	cp	r12, r24
    4ef6:	d9 06       	cpc	r13, r25
    4ef8:	14 f0       	brlt	.+4      	; 0x4efe <vfprintf+0x28e>
    4efa:	99 24       	eor	r9, r9
    4efc:	01 c0       	rjmp	.+2      	; 0x4f00 <vfprintf+0x290>
    4efe:	9c 18       	sub	r9, r12
    4f00:	f7 fc       	sbrc	r15, 7
    4f02:	03 c0       	rjmp	.+6      	; 0x4f0a <vfprintf+0x29a>
    4f04:	25 e0       	ldi	r18, 0x05	; 5
    4f06:	30 e0       	ldi	r19, 0x00	; 0
    4f08:	09 c0       	rjmp	.+18     	; 0x4f1c <vfprintf+0x2ac>
    4f0a:	1c 14       	cp	r1, r12
    4f0c:	1d 04       	cpc	r1, r13
    4f0e:	1c f0       	brlt	.+6      	; 0x4f16 <vfprintf+0x2a6>
    4f10:	21 e0       	ldi	r18, 0x01	; 1
    4f12:	30 e0       	ldi	r19, 0x00	; 0
    4f14:	03 c0       	rjmp	.+6      	; 0x4f1c <vfprintf+0x2ac>
    4f16:	96 01       	movw	r18, r12
    4f18:	2f 5f       	subi	r18, 0xFF	; 255
    4f1a:	3f 4f       	sbci	r19, 0xFF	; 255
    4f1c:	11 23       	and	r17, r17
    4f1e:	11 f0       	breq	.+4      	; 0x4f24 <vfprintf+0x2b4>
    4f20:	2f 5f       	subi	r18, 0xFF	; 255
    4f22:	3f 4f       	sbci	r19, 0xFF	; 255
    4f24:	99 20       	and	r9, r9
    4f26:	29 f0       	breq	.+10     	; 0x4f32 <vfprintf+0x2c2>
    4f28:	89 2d       	mov	r24, r9
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	01 96       	adiw	r24, 0x01	; 1
    4f2e:	28 0f       	add	r18, r24
    4f30:	39 1f       	adc	r19, r25
    4f32:	88 2d       	mov	r24, r8
    4f34:	90 e0       	ldi	r25, 0x00	; 0
    4f36:	28 17       	cp	r18, r24
    4f38:	39 07       	cpc	r19, r25
    4f3a:	14 f0       	brlt	.+4      	; 0x4f40 <vfprintf+0x2d0>
    4f3c:	88 24       	eor	r8, r8
    4f3e:	01 c0       	rjmp	.+2      	; 0x4f42 <vfprintf+0x2d2>
    4f40:	82 1a       	sub	r8, r18
    4f42:	4f 2c       	mov	r4, r15
    4f44:	55 24       	eor	r5, r5
    4f46:	c2 01       	movw	r24, r4
    4f48:	89 70       	andi	r24, 0x09	; 9
    4f4a:	90 70       	andi	r25, 0x00	; 0
    4f4c:	89 2b       	or	r24, r25
    4f4e:	31 f0       	breq	.+12     	; 0x4f5c <vfprintf+0x2ec>
    4f50:	07 c0       	rjmp	.+14     	; 0x4f60 <vfprintf+0x2f0>
    4f52:	80 e2       	ldi	r24, 0x20	; 32
    4f54:	90 e0       	ldi	r25, 0x00	; 0
    4f56:	b3 01       	movw	r22, r6
    4f58:	de d4       	rcall	.+2492   	; 0x5916 <fputc>
    4f5a:	8a 94       	dec	r8
    4f5c:	88 20       	and	r8, r8
    4f5e:	c9 f7       	brne	.-14     	; 0x4f52 <vfprintf+0x2e2>
    4f60:	11 23       	and	r17, r17
    4f62:	21 f0       	breq	.+8      	; 0x4f6c <vfprintf+0x2fc>
    4f64:	81 2f       	mov	r24, r17
    4f66:	90 e0       	ldi	r25, 0x00	; 0
    4f68:	b3 01       	movw	r22, r6
    4f6a:	d5 d4       	rcall	.+2474   	; 0x5916 <fputc>
    4f6c:	43 fe       	sbrs	r4, 3
    4f6e:	06 c0       	rjmp	.+12     	; 0x4f7c <vfprintf+0x30c>
    4f70:	07 c0       	rjmp	.+14     	; 0x4f80 <vfprintf+0x310>
    4f72:	80 e3       	ldi	r24, 0x30	; 48
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	b3 01       	movw	r22, r6
    4f78:	ce d4       	rcall	.+2460   	; 0x5916 <fputc>
    4f7a:	8a 94       	dec	r8
    4f7c:	88 20       	and	r8, r8
    4f7e:	c9 f7       	brne	.-14     	; 0x4f72 <vfprintf+0x302>
    4f80:	f7 fe       	sbrs	r15, 7
    4f82:	44 c0       	rjmp	.+136    	; 0x500c <vfprintf+0x39c>
    4f84:	86 01       	movw	r16, r12
    4f86:	d7 fe       	sbrs	r13, 7
    4f88:	02 c0       	rjmp	.+4      	; 0x4f8e <vfprintf+0x31e>
    4f8a:	00 e0       	ldi	r16, 0x00	; 0
    4f8c:	10 e0       	ldi	r17, 0x00	; 0
    4f8e:	76 01       	movw	r14, r12
    4f90:	08 94       	sec
    4f92:	e1 1c       	adc	r14, r1
    4f94:	f1 1c       	adc	r15, r1
    4f96:	e0 1a       	sub	r14, r16
    4f98:	f1 0a       	sbc	r15, r17
    4f9a:	41 e0       	ldi	r20, 0x01	; 1
    4f9c:	50 e0       	ldi	r21, 0x00	; 0
    4f9e:	4c 0f       	add	r20, r28
    4fa0:	5d 1f       	adc	r21, r29
    4fa2:	e4 0e       	add	r14, r20
    4fa4:	f5 1e       	adc	r15, r21
    4fa6:	26 01       	movw	r4, r12
    4fa8:	4b 18       	sub	r4, r11
    4faa:	51 08       	sbc	r5, r1
    4fac:	89 2d       	mov	r24, r9
    4fae:	90 e0       	ldi	r25, 0x00	; 0
    4fb0:	aa 24       	eor	r10, r10
    4fb2:	bb 24       	eor	r11, r11
    4fb4:	a8 1a       	sub	r10, r24
    4fb6:	b9 0a       	sbc	r11, r25
    4fb8:	5f ef       	ldi	r21, 0xFF	; 255
    4fba:	0f 3f       	cpi	r16, 0xFF	; 255
    4fbc:	15 07       	cpc	r17, r21
    4fbe:	21 f4       	brne	.+8      	; 0x4fc8 <vfprintf+0x358>
    4fc0:	8e e2       	ldi	r24, 0x2E	; 46
    4fc2:	90 e0       	ldi	r25, 0x00	; 0
    4fc4:	b3 01       	movw	r22, r6
    4fc6:	a7 d4       	rcall	.+2382   	; 0x5916 <fputc>
    4fc8:	c0 16       	cp	r12, r16
    4fca:	d1 06       	cpc	r13, r17
    4fcc:	34 f0       	brlt	.+12     	; 0x4fda <vfprintf+0x36a>
    4fce:	40 16       	cp	r4, r16
    4fd0:	51 06       	cpc	r5, r17
    4fd2:	1c f4       	brge	.+6      	; 0x4fda <vfprintf+0x36a>
    4fd4:	f7 01       	movw	r30, r14
    4fd6:	80 81       	ld	r24, Z
    4fd8:	01 c0       	rjmp	.+2      	; 0x4fdc <vfprintf+0x36c>
    4fda:	80 e3       	ldi	r24, 0x30	; 48
    4fdc:	01 50       	subi	r16, 0x01	; 1
    4fde:	10 40       	sbci	r17, 0x00	; 0
    4fe0:	08 94       	sec
    4fe2:	e1 1c       	adc	r14, r1
    4fe4:	f1 1c       	adc	r15, r1
    4fe6:	0a 15       	cp	r16, r10
    4fe8:	1b 05       	cpc	r17, r11
    4fea:	24 f0       	brlt	.+8      	; 0x4ff4 <vfprintf+0x384>
    4fec:	90 e0       	ldi	r25, 0x00	; 0
    4fee:	b3 01       	movw	r22, r6
    4ff0:	92 d4       	rcall	.+2340   	; 0x5916 <fputc>
    4ff2:	e2 cf       	rjmp	.-60     	; 0x4fb8 <vfprintf+0x348>
    4ff4:	0c 15       	cp	r16, r12
    4ff6:	1d 05       	cpc	r17, r13
    4ff8:	39 f4       	brne	.+14     	; 0x5008 <vfprintf+0x398>
    4ffa:	9a 81       	ldd	r25, Y+2	; 0x02
    4ffc:	96 33       	cpi	r25, 0x36	; 54
    4ffe:	18 f4       	brcc	.+6      	; 0x5006 <vfprintf+0x396>
    5000:	95 33       	cpi	r25, 0x35	; 53
    5002:	11 f4       	brne	.+4      	; 0x5008 <vfprintf+0x398>
    5004:	24 fe       	sbrs	r2, 4
    5006:	81 e3       	ldi	r24, 0x31	; 49
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	45 c0       	rjmp	.+138    	; 0x5096 <vfprintf+0x426>
    500c:	8a 81       	ldd	r24, Y+2	; 0x02
    500e:	81 33       	cpi	r24, 0x31	; 49
    5010:	09 f0       	breq	.+2      	; 0x5014 <vfprintf+0x3a4>
    5012:	0f 7e       	andi	r16, 0xEF	; 239
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	b3 01       	movw	r22, r6
    5018:	7e d4       	rcall	.+2300   	; 0x5916 <fputc>
    501a:	99 20       	and	r9, r9
    501c:	91 f0       	breq	.+36     	; 0x5042 <vfprintf+0x3d2>
    501e:	8e e2       	ldi	r24, 0x2E	; 46
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	b3 01       	movw	r22, r6
    5024:	78 d4       	rcall	.+2288   	; 0x5916 <fputc>
    5026:	12 e0       	ldi	r17, 0x02	; 2
    5028:	e1 e0       	ldi	r30, 0x01	; 1
    502a:	f0 e0       	ldi	r31, 0x00	; 0
    502c:	ec 0f       	add	r30, r28
    502e:	fd 1f       	adc	r31, r29
    5030:	e1 0f       	add	r30, r17
    5032:	f1 1d       	adc	r31, r1
    5034:	1f 5f       	subi	r17, 0xFF	; 255
    5036:	80 81       	ld	r24, Z
    5038:	90 e0       	ldi	r25, 0x00	; 0
    503a:	b3 01       	movw	r22, r6
    503c:	6c d4       	rcall	.+2264   	; 0x5916 <fputc>
    503e:	9a 94       	dec	r9
    5040:	99 f7       	brne	.-26     	; 0x5028 <vfprintf+0x3b8>
    5042:	44 fc       	sbrc	r4, 4
    5044:	03 c0       	rjmp	.+6      	; 0x504c <vfprintf+0x3dc>
    5046:	85 e6       	ldi	r24, 0x65	; 101
    5048:	90 e0       	ldi	r25, 0x00	; 0
    504a:	02 c0       	rjmp	.+4      	; 0x5050 <vfprintf+0x3e0>
    504c:	85 e4       	ldi	r24, 0x45	; 69
    504e:	90 e0       	ldi	r25, 0x00	; 0
    5050:	b3 01       	movw	r22, r6
    5052:	61 d4       	rcall	.+2242   	; 0x5916 <fputc>
    5054:	d7 fc       	sbrc	r13, 7
    5056:	05 c0       	rjmp	.+10     	; 0x5062 <vfprintf+0x3f2>
    5058:	c1 14       	cp	r12, r1
    505a:	d1 04       	cpc	r13, r1
    505c:	41 f4       	brne	.+16     	; 0x506e <vfprintf+0x3fe>
    505e:	04 ff       	sbrs	r16, 4
    5060:	06 c0       	rjmp	.+12     	; 0x506e <vfprintf+0x3fe>
    5062:	d0 94       	com	r13
    5064:	c1 94       	neg	r12
    5066:	d1 08       	sbc	r13, r1
    5068:	d3 94       	inc	r13
    506a:	8d e2       	ldi	r24, 0x2D	; 45
    506c:	01 c0       	rjmp	.+2      	; 0x5070 <vfprintf+0x400>
    506e:	8b e2       	ldi	r24, 0x2B	; 43
    5070:	90 e0       	ldi	r25, 0x00	; 0
    5072:	b3 01       	movw	r22, r6
    5074:	50 d4       	rcall	.+2208   	; 0x5916 <fputc>
    5076:	80 e3       	ldi	r24, 0x30	; 48
    5078:	05 c0       	rjmp	.+10     	; 0x5084 <vfprintf+0x414>
    507a:	8f 5f       	subi	r24, 0xFF	; 255
    507c:	26 ef       	ldi	r18, 0xF6	; 246
    507e:	3f ef       	ldi	r19, 0xFF	; 255
    5080:	c2 0e       	add	r12, r18
    5082:	d3 1e       	adc	r13, r19
    5084:	3a e0       	ldi	r19, 0x0A	; 10
    5086:	c3 16       	cp	r12, r19
    5088:	d1 04       	cpc	r13, r1
    508a:	bc f7       	brge	.-18     	; 0x507a <vfprintf+0x40a>
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	b3 01       	movw	r22, r6
    5090:	42 d4       	rcall	.+2180   	; 0x5916 <fputc>
    5092:	c6 01       	movw	r24, r12
    5094:	c0 96       	adiw	r24, 0x30	; 48
    5096:	b3 01       	movw	r22, r6
    5098:	3e d4       	rcall	.+2172   	; 0x5916 <fputc>
    509a:	cc 84       	ldd	r12, Y+12	; 0x0c
    509c:	dd 84       	ldd	r13, Y+13	; 0x0d
    509e:	46 c1       	rjmp	.+652    	; 0x532c <vfprintf+0x6bc>
    50a0:	93 36       	cpi	r25, 0x63	; 99
    50a2:	31 f0       	breq	.+12     	; 0x50b0 <vfprintf+0x440>
    50a4:	93 37       	cpi	r25, 0x73	; 115
    50a6:	99 f0       	breq	.+38     	; 0x50ce <vfprintf+0x45e>
    50a8:	93 35       	cpi	r25, 0x53	; 83
    50aa:	09 f0       	breq	.+2      	; 0x50ae <vfprintf+0x43e>
    50ac:	55 c0       	rjmp	.+170    	; 0x5158 <vfprintf+0x4e8>
    50ae:	22 c0       	rjmp	.+68     	; 0x50f4 <vfprintf+0x484>
    50b0:	f6 01       	movw	r30, r12
    50b2:	80 81       	ld	r24, Z
    50b4:	89 83       	std	Y+1, r24	; 0x01
    50b6:	5e 01       	movw	r10, r28
    50b8:	08 94       	sec
    50ba:	a1 1c       	adc	r10, r1
    50bc:	b1 1c       	adc	r11, r1
    50be:	22 e0       	ldi	r18, 0x02	; 2
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	c2 0e       	add	r12, r18
    50c4:	d3 1e       	adc	r13, r19
    50c6:	21 e0       	ldi	r18, 0x01	; 1
    50c8:	e2 2e       	mov	r14, r18
    50ca:	f1 2c       	mov	r15, r1
    50cc:	11 c0       	rjmp	.+34     	; 0x50f0 <vfprintf+0x480>
    50ce:	f6 01       	movw	r30, r12
    50d0:	a0 80       	ld	r10, Z
    50d2:	b1 80       	ldd	r11, Z+1	; 0x01
    50d4:	16 fd       	sbrc	r17, 6
    50d6:	03 c0       	rjmp	.+6      	; 0x50de <vfprintf+0x46e>
    50d8:	6f ef       	ldi	r22, 0xFF	; 255
    50da:	7f ef       	ldi	r23, 0xFF	; 255
    50dc:	02 c0       	rjmp	.+4      	; 0x50e2 <vfprintf+0x472>
    50de:	69 2d       	mov	r22, r9
    50e0:	70 e0       	ldi	r23, 0x00	; 0
    50e2:	22 e0       	ldi	r18, 0x02	; 2
    50e4:	30 e0       	ldi	r19, 0x00	; 0
    50e6:	c2 0e       	add	r12, r18
    50e8:	d3 1e       	adc	r13, r19
    50ea:	c5 01       	movw	r24, r10
    50ec:	09 d4       	rcall	.+2066   	; 0x5900 <strnlen>
    50ee:	7c 01       	movw	r14, r24
    50f0:	1f 77       	andi	r17, 0x7F	; 127
    50f2:	12 c0       	rjmp	.+36     	; 0x5118 <vfprintf+0x4a8>
    50f4:	f6 01       	movw	r30, r12
    50f6:	a0 80       	ld	r10, Z
    50f8:	b1 80       	ldd	r11, Z+1	; 0x01
    50fa:	16 fd       	sbrc	r17, 6
    50fc:	03 c0       	rjmp	.+6      	; 0x5104 <vfprintf+0x494>
    50fe:	6f ef       	ldi	r22, 0xFF	; 255
    5100:	7f ef       	ldi	r23, 0xFF	; 255
    5102:	02 c0       	rjmp	.+4      	; 0x5108 <vfprintf+0x498>
    5104:	69 2d       	mov	r22, r9
    5106:	70 e0       	ldi	r23, 0x00	; 0
    5108:	22 e0       	ldi	r18, 0x02	; 2
    510a:	30 e0       	ldi	r19, 0x00	; 0
    510c:	c2 0e       	add	r12, r18
    510e:	d3 1e       	adc	r13, r19
    5110:	c5 01       	movw	r24, r10
    5112:	eb d3       	rcall	.+2006   	; 0x58ea <strnlen_P>
    5114:	7c 01       	movw	r14, r24
    5116:	10 68       	ori	r17, 0x80	; 128
    5118:	13 ff       	sbrs	r17, 3
    511a:	06 c0       	rjmp	.+12     	; 0x5128 <vfprintf+0x4b8>
    511c:	19 c0       	rjmp	.+50     	; 0x5150 <vfprintf+0x4e0>
    511e:	80 e2       	ldi	r24, 0x20	; 32
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	b3 01       	movw	r22, r6
    5124:	f8 d3       	rcall	.+2032   	; 0x5916 <fputc>
    5126:	8a 94       	dec	r8
    5128:	88 2d       	mov	r24, r8
    512a:	90 e0       	ldi	r25, 0x00	; 0
    512c:	e8 16       	cp	r14, r24
    512e:	f9 06       	cpc	r15, r25
    5130:	b0 f3       	brcs	.-20     	; 0x511e <vfprintf+0x4ae>
    5132:	0e c0       	rjmp	.+28     	; 0x5150 <vfprintf+0x4e0>
    5134:	f5 01       	movw	r30, r10
    5136:	17 fd       	sbrc	r17, 7
    5138:	85 91       	lpm	r24, Z+
    513a:	17 ff       	sbrs	r17, 7
    513c:	81 91       	ld	r24, Z+
    513e:	5f 01       	movw	r10, r30
    5140:	90 e0       	ldi	r25, 0x00	; 0
    5142:	b3 01       	movw	r22, r6
    5144:	e8 d3       	rcall	.+2000   	; 0x5916 <fputc>
    5146:	81 10       	cpse	r8, r1
    5148:	8a 94       	dec	r8
    514a:	08 94       	sec
    514c:	e1 08       	sbc	r14, r1
    514e:	f1 08       	sbc	r15, r1
    5150:	e1 14       	cp	r14, r1
    5152:	f1 04       	cpc	r15, r1
    5154:	79 f7       	brne	.-34     	; 0x5134 <vfprintf+0x4c4>
    5156:	ea c0       	rjmp	.+468    	; 0x532c <vfprintf+0x6bc>
    5158:	94 36       	cpi	r25, 0x64	; 100
    515a:	11 f0       	breq	.+4      	; 0x5160 <vfprintf+0x4f0>
    515c:	99 36       	cpi	r25, 0x69	; 105
    515e:	81 f5       	brne	.+96     	; 0x51c0 <vfprintf+0x550>
    5160:	17 ff       	sbrs	r17, 7
    5162:	08 c0       	rjmp	.+16     	; 0x5174 <vfprintf+0x504>
    5164:	f6 01       	movw	r30, r12
    5166:	20 81       	ld	r18, Z
    5168:	31 81       	ldd	r19, Z+1	; 0x01
    516a:	42 81       	ldd	r20, Z+2	; 0x02
    516c:	53 81       	ldd	r21, Z+3	; 0x03
    516e:	84 e0       	ldi	r24, 0x04	; 4
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	0a c0       	rjmp	.+20     	; 0x5188 <vfprintf+0x518>
    5174:	f6 01       	movw	r30, r12
    5176:	80 81       	ld	r24, Z
    5178:	91 81       	ldd	r25, Z+1	; 0x01
    517a:	9c 01       	movw	r18, r24
    517c:	44 27       	eor	r20, r20
    517e:	37 fd       	sbrc	r19, 7
    5180:	40 95       	com	r20
    5182:	54 2f       	mov	r21, r20
    5184:	82 e0       	ldi	r24, 0x02	; 2
    5186:	90 e0       	ldi	r25, 0x00	; 0
    5188:	c8 0e       	add	r12, r24
    518a:	d9 1e       	adc	r13, r25
    518c:	9f e6       	ldi	r25, 0x6F	; 111
    518e:	f9 2e       	mov	r15, r25
    5190:	f1 22       	and	r15, r17
    5192:	57 ff       	sbrs	r21, 7
    5194:	09 c0       	rjmp	.+18     	; 0x51a8 <vfprintf+0x538>
    5196:	50 95       	com	r21
    5198:	40 95       	com	r20
    519a:	30 95       	com	r19
    519c:	21 95       	neg	r18
    519e:	3f 4f       	sbci	r19, 0xFF	; 255
    51a0:	4f 4f       	sbci	r20, 0xFF	; 255
    51a2:	5f 4f       	sbci	r21, 0xFF	; 255
    51a4:	90 e8       	ldi	r25, 0x80	; 128
    51a6:	f9 2a       	or	r15, r25
    51a8:	ca 01       	movw	r24, r20
    51aa:	b9 01       	movw	r22, r18
    51ac:	ae 01       	movw	r20, r28
    51ae:	4f 5f       	subi	r20, 0xFF	; 255
    51b0:	5f 4f       	sbci	r21, 0xFF	; 255
    51b2:	2a e0       	ldi	r18, 0x0A	; 10
    51b4:	30 e0       	ldi	r19, 0x00	; 0
    51b6:	10 d4       	rcall	.+2080   	; 0x59d8 <__ultoa_invert>
    51b8:	e8 2e       	mov	r14, r24
    51ba:	e8 89       	ldd	r30, Y+16	; 0x10
    51bc:	ee 1a       	sub	r14, r30
    51be:	40 c0       	rjmp	.+128    	; 0x5240 <vfprintf+0x5d0>
    51c0:	95 37       	cpi	r25, 0x75	; 117
    51c2:	21 f4       	brne	.+8      	; 0x51cc <vfprintf+0x55c>
    51c4:	1f 7e       	andi	r17, 0xEF	; 239
    51c6:	2a e0       	ldi	r18, 0x0A	; 10
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	1c c0       	rjmp	.+56     	; 0x5204 <vfprintf+0x594>
    51cc:	19 7f       	andi	r17, 0xF9	; 249
    51ce:	9f 36       	cpi	r25, 0x6F	; 111
    51d0:	61 f0       	breq	.+24     	; 0x51ea <vfprintf+0x57a>
    51d2:	90 37       	cpi	r25, 0x70	; 112
    51d4:	20 f4       	brcc	.+8      	; 0x51de <vfprintf+0x56e>
    51d6:	98 35       	cpi	r25, 0x58	; 88
    51d8:	09 f0       	breq	.+2      	; 0x51dc <vfprintf+0x56c>
    51da:	ab c0       	rjmp	.+342    	; 0x5332 <vfprintf+0x6c2>
    51dc:	0f c0       	rjmp	.+30     	; 0x51fc <vfprintf+0x58c>
    51de:	90 37       	cpi	r25, 0x70	; 112
    51e0:	39 f0       	breq	.+14     	; 0x51f0 <vfprintf+0x580>
    51e2:	98 37       	cpi	r25, 0x78	; 120
    51e4:	09 f0       	breq	.+2      	; 0x51e8 <vfprintf+0x578>
    51e6:	a5 c0       	rjmp	.+330    	; 0x5332 <vfprintf+0x6c2>
    51e8:	04 c0       	rjmp	.+8      	; 0x51f2 <vfprintf+0x582>
    51ea:	28 e0       	ldi	r18, 0x08	; 8
    51ec:	30 e0       	ldi	r19, 0x00	; 0
    51ee:	0a c0       	rjmp	.+20     	; 0x5204 <vfprintf+0x594>
    51f0:	10 61       	ori	r17, 0x10	; 16
    51f2:	14 fd       	sbrc	r17, 4
    51f4:	14 60       	ori	r17, 0x04	; 4
    51f6:	20 e1       	ldi	r18, 0x10	; 16
    51f8:	30 e0       	ldi	r19, 0x00	; 0
    51fa:	04 c0       	rjmp	.+8      	; 0x5204 <vfprintf+0x594>
    51fc:	14 fd       	sbrc	r17, 4
    51fe:	16 60       	ori	r17, 0x06	; 6
    5200:	20 e1       	ldi	r18, 0x10	; 16
    5202:	32 e0       	ldi	r19, 0x02	; 2
    5204:	17 ff       	sbrs	r17, 7
    5206:	08 c0       	rjmp	.+16     	; 0x5218 <vfprintf+0x5a8>
    5208:	f6 01       	movw	r30, r12
    520a:	60 81       	ld	r22, Z
    520c:	71 81       	ldd	r23, Z+1	; 0x01
    520e:	82 81       	ldd	r24, Z+2	; 0x02
    5210:	93 81       	ldd	r25, Z+3	; 0x03
    5212:	44 e0       	ldi	r20, 0x04	; 4
    5214:	50 e0       	ldi	r21, 0x00	; 0
    5216:	08 c0       	rjmp	.+16     	; 0x5228 <vfprintf+0x5b8>
    5218:	f6 01       	movw	r30, r12
    521a:	80 81       	ld	r24, Z
    521c:	91 81       	ldd	r25, Z+1	; 0x01
    521e:	bc 01       	movw	r22, r24
    5220:	80 e0       	ldi	r24, 0x00	; 0
    5222:	90 e0       	ldi	r25, 0x00	; 0
    5224:	42 e0       	ldi	r20, 0x02	; 2
    5226:	50 e0       	ldi	r21, 0x00	; 0
    5228:	c4 0e       	add	r12, r20
    522a:	d5 1e       	adc	r13, r21
    522c:	ae 01       	movw	r20, r28
    522e:	4f 5f       	subi	r20, 0xFF	; 255
    5230:	5f 4f       	sbci	r21, 0xFF	; 255
    5232:	d2 d3       	rcall	.+1956   	; 0x59d8 <__ultoa_invert>
    5234:	e8 2e       	mov	r14, r24
    5236:	58 89       	ldd	r21, Y+16	; 0x10
    5238:	e5 1a       	sub	r14, r21
    523a:	8f e7       	ldi	r24, 0x7F	; 127
    523c:	f8 2e       	mov	r15, r24
    523e:	f1 22       	and	r15, r17
    5240:	f6 fe       	sbrs	r15, 6
    5242:	0b c0       	rjmp	.+22     	; 0x525a <vfprintf+0x5ea>
    5244:	8e ef       	ldi	r24, 0xFE	; 254
    5246:	f8 22       	and	r15, r24
    5248:	e9 14       	cp	r14, r9
    524a:	38 f4       	brcc	.+14     	; 0x525a <vfprintf+0x5ea>
    524c:	f4 fe       	sbrs	r15, 4
    524e:	07 c0       	rjmp	.+14     	; 0x525e <vfprintf+0x5ee>
    5250:	f2 fc       	sbrc	r15, 2
    5252:	05 c0       	rjmp	.+10     	; 0x525e <vfprintf+0x5ee>
    5254:	9f ee       	ldi	r25, 0xEF	; 239
    5256:	f9 22       	and	r15, r25
    5258:	02 c0       	rjmp	.+4      	; 0x525e <vfprintf+0x5ee>
    525a:	1e 2d       	mov	r17, r14
    525c:	01 c0       	rjmp	.+2      	; 0x5260 <vfprintf+0x5f0>
    525e:	19 2d       	mov	r17, r9
    5260:	f4 fe       	sbrs	r15, 4
    5262:	0d c0       	rjmp	.+26     	; 0x527e <vfprintf+0x60e>
    5264:	fe 01       	movw	r30, r28
    5266:	ee 0d       	add	r30, r14
    5268:	f1 1d       	adc	r31, r1
    526a:	80 81       	ld	r24, Z
    526c:	80 33       	cpi	r24, 0x30	; 48
    526e:	19 f4       	brne	.+6      	; 0x5276 <vfprintf+0x606>
    5270:	e9 ee       	ldi	r30, 0xE9	; 233
    5272:	fe 22       	and	r15, r30
    5274:	08 c0       	rjmp	.+16     	; 0x5286 <vfprintf+0x616>
    5276:	1f 5f       	subi	r17, 0xFF	; 255
    5278:	f2 fe       	sbrs	r15, 2
    527a:	05 c0       	rjmp	.+10     	; 0x5286 <vfprintf+0x616>
    527c:	03 c0       	rjmp	.+6      	; 0x5284 <vfprintf+0x614>
    527e:	8f 2d       	mov	r24, r15
    5280:	86 78       	andi	r24, 0x86	; 134
    5282:	09 f0       	breq	.+2      	; 0x5286 <vfprintf+0x616>
    5284:	1f 5f       	subi	r17, 0xFF	; 255
    5286:	0f 2d       	mov	r16, r15
    5288:	f3 fc       	sbrc	r15, 3
    528a:	13 c0       	rjmp	.+38     	; 0x52b2 <vfprintf+0x642>
    528c:	f0 fe       	sbrs	r15, 0
    528e:	0e c0       	rjmp	.+28     	; 0x52ac <vfprintf+0x63c>
    5290:	18 15       	cp	r17, r8
    5292:	10 f0       	brcs	.+4      	; 0x5298 <vfprintf+0x628>
    5294:	9e 2c       	mov	r9, r14
    5296:	0a c0       	rjmp	.+20     	; 0x52ac <vfprintf+0x63c>
    5298:	9e 2c       	mov	r9, r14
    529a:	98 0c       	add	r9, r8
    529c:	91 1a       	sub	r9, r17
    529e:	18 2d       	mov	r17, r8
    52a0:	05 c0       	rjmp	.+10     	; 0x52ac <vfprintf+0x63c>
    52a2:	80 e2       	ldi	r24, 0x20	; 32
    52a4:	90 e0       	ldi	r25, 0x00	; 0
    52a6:	b3 01       	movw	r22, r6
    52a8:	36 d3       	rcall	.+1644   	; 0x5916 <fputc>
    52aa:	1f 5f       	subi	r17, 0xFF	; 255
    52ac:	18 15       	cp	r17, r8
    52ae:	c8 f3       	brcs	.-14     	; 0x52a2 <vfprintf+0x632>
    52b0:	04 c0       	rjmp	.+8      	; 0x52ba <vfprintf+0x64a>
    52b2:	18 15       	cp	r17, r8
    52b4:	10 f4       	brcc	.+4      	; 0x52ba <vfprintf+0x64a>
    52b6:	81 1a       	sub	r8, r17
    52b8:	01 c0       	rjmp	.+2      	; 0x52bc <vfprintf+0x64c>
    52ba:	88 24       	eor	r8, r8
    52bc:	04 ff       	sbrs	r16, 4
    52be:	0e c0       	rjmp	.+28     	; 0x52dc <vfprintf+0x66c>
    52c0:	80 e3       	ldi	r24, 0x30	; 48
    52c2:	90 e0       	ldi	r25, 0x00	; 0
    52c4:	b3 01       	movw	r22, r6
    52c6:	27 d3       	rcall	.+1614   	; 0x5916 <fputc>
    52c8:	02 ff       	sbrs	r16, 2
    52ca:	1b c0       	rjmp	.+54     	; 0x5302 <vfprintf+0x692>
    52cc:	01 fd       	sbrc	r16, 1
    52ce:	03 c0       	rjmp	.+6      	; 0x52d6 <vfprintf+0x666>
    52d0:	88 e7       	ldi	r24, 0x78	; 120
    52d2:	90 e0       	ldi	r25, 0x00	; 0
    52d4:	0e c0       	rjmp	.+28     	; 0x52f2 <vfprintf+0x682>
    52d6:	88 e5       	ldi	r24, 0x58	; 88
    52d8:	90 e0       	ldi	r25, 0x00	; 0
    52da:	0b c0       	rjmp	.+22     	; 0x52f2 <vfprintf+0x682>
    52dc:	80 2f       	mov	r24, r16
    52de:	86 78       	andi	r24, 0x86	; 134
    52e0:	81 f0       	breq	.+32     	; 0x5302 <vfprintf+0x692>
    52e2:	01 ff       	sbrs	r16, 1
    52e4:	02 c0       	rjmp	.+4      	; 0x52ea <vfprintf+0x67a>
    52e6:	8b e2       	ldi	r24, 0x2B	; 43
    52e8:	01 c0       	rjmp	.+2      	; 0x52ec <vfprintf+0x67c>
    52ea:	80 e2       	ldi	r24, 0x20	; 32
    52ec:	f7 fc       	sbrc	r15, 7
    52ee:	8d e2       	ldi	r24, 0x2D	; 45
    52f0:	90 e0       	ldi	r25, 0x00	; 0
    52f2:	b3 01       	movw	r22, r6
    52f4:	10 d3       	rcall	.+1568   	; 0x5916 <fputc>
    52f6:	05 c0       	rjmp	.+10     	; 0x5302 <vfprintf+0x692>
    52f8:	80 e3       	ldi	r24, 0x30	; 48
    52fa:	90 e0       	ldi	r25, 0x00	; 0
    52fc:	b3 01       	movw	r22, r6
    52fe:	0b d3       	rcall	.+1558   	; 0x5916 <fputc>
    5300:	9a 94       	dec	r9
    5302:	e9 14       	cp	r14, r9
    5304:	c8 f3       	brcs	.-14     	; 0x52f8 <vfprintf+0x688>
    5306:	ea 94       	dec	r14
    5308:	e1 e0       	ldi	r30, 0x01	; 1
    530a:	f0 e0       	ldi	r31, 0x00	; 0
    530c:	ec 0f       	add	r30, r28
    530e:	fd 1f       	adc	r31, r29
    5310:	ee 0d       	add	r30, r14
    5312:	f1 1d       	adc	r31, r1
    5314:	80 81       	ld	r24, Z
    5316:	90 e0       	ldi	r25, 0x00	; 0
    5318:	b3 01       	movw	r22, r6
    531a:	fd d2       	rcall	.+1530   	; 0x5916 <fputc>
    531c:	ee 20       	and	r14, r14
    531e:	99 f7       	brne	.-26     	; 0x5306 <vfprintf+0x696>
    5320:	05 c0       	rjmp	.+10     	; 0x532c <vfprintf+0x6bc>
    5322:	80 e2       	ldi	r24, 0x20	; 32
    5324:	90 e0       	ldi	r25, 0x00	; 0
    5326:	b3 01       	movw	r22, r6
    5328:	f6 d2       	rcall	.+1516   	; 0x5916 <fputc>
    532a:	8a 94       	dec	r8
    532c:	88 20       	and	r8, r8
    532e:	c9 f7       	brne	.-14     	; 0x5322 <vfprintf+0x6b2>
    5330:	b6 cc       	rjmp	.-1684   	; 0x4c9e <vfprintf+0x2e>
    5332:	f3 01       	movw	r30, r6
    5334:	66 81       	ldd	r22, Z+6	; 0x06
    5336:	77 81       	ldd	r23, Z+7	; 0x07
    5338:	cb 01       	movw	r24, r22
    533a:	61 96       	adiw	r28, 0x11	; 17
    533c:	e2 e1       	ldi	r30, 0x12	; 18
    533e:	70 c0       	rjmp	.+224    	; 0x5420 <__epilogue_restores__>

00005340 <__mulsi3>:
    5340:	62 9f       	mul	r22, r18
    5342:	d0 01       	movw	r26, r0
    5344:	73 9f       	mul	r23, r19
    5346:	f0 01       	movw	r30, r0
    5348:	82 9f       	mul	r24, r18
    534a:	e0 0d       	add	r30, r0
    534c:	f1 1d       	adc	r31, r1
    534e:	64 9f       	mul	r22, r20
    5350:	e0 0d       	add	r30, r0
    5352:	f1 1d       	adc	r31, r1
    5354:	92 9f       	mul	r25, r18
    5356:	f0 0d       	add	r31, r0
    5358:	83 9f       	mul	r24, r19
    535a:	f0 0d       	add	r31, r0
    535c:	74 9f       	mul	r23, r20
    535e:	f0 0d       	add	r31, r0
    5360:	65 9f       	mul	r22, r21
    5362:	f0 0d       	add	r31, r0
    5364:	99 27       	eor	r25, r25
    5366:	72 9f       	mul	r23, r18
    5368:	b0 0d       	add	r27, r0
    536a:	e1 1d       	adc	r30, r1
    536c:	f9 1f       	adc	r31, r25
    536e:	63 9f       	mul	r22, r19
    5370:	b0 0d       	add	r27, r0
    5372:	e1 1d       	adc	r30, r1
    5374:	f9 1f       	adc	r31, r25
    5376:	bd 01       	movw	r22, r26
    5378:	cf 01       	movw	r24, r30
    537a:	11 24       	eor	r1, r1
    537c:	08 95       	ret

0000537e <__divmodhi4>:
    537e:	97 fb       	bst	r25, 7
    5380:	09 2e       	mov	r0, r25
    5382:	07 26       	eor	r0, r23
    5384:	0a d0       	rcall	.+20     	; 0x539a <__divmodhi4_neg1>
    5386:	77 fd       	sbrc	r23, 7
    5388:	04 d0       	rcall	.+8      	; 0x5392 <__divmodhi4_neg2>
    538a:	65 d0       	rcall	.+202    	; 0x5456 <__udivmodhi4>
    538c:	06 d0       	rcall	.+12     	; 0x539a <__divmodhi4_neg1>
    538e:	00 20       	and	r0, r0
    5390:	1a f4       	brpl	.+6      	; 0x5398 <__divmodhi4_exit>

00005392 <__divmodhi4_neg2>:
    5392:	70 95       	com	r23
    5394:	61 95       	neg	r22
    5396:	7f 4f       	sbci	r23, 0xFF	; 255

00005398 <__divmodhi4_exit>:
    5398:	08 95       	ret

0000539a <__divmodhi4_neg1>:
    539a:	f6 f7       	brtc	.-4      	; 0x5398 <__divmodhi4_exit>
    539c:	90 95       	com	r25
    539e:	81 95       	neg	r24
    53a0:	9f 4f       	sbci	r25, 0xFF	; 255
    53a2:	08 95       	ret

000053a4 <__udivmodsi4>:
    53a4:	a1 e2       	ldi	r26, 0x21	; 33
    53a6:	1a 2e       	mov	r1, r26
    53a8:	aa 1b       	sub	r26, r26
    53aa:	bb 1b       	sub	r27, r27
    53ac:	fd 01       	movw	r30, r26
    53ae:	0d c0       	rjmp	.+26     	; 0x53ca <__udivmodsi4_ep>

000053b0 <__udivmodsi4_loop>:
    53b0:	aa 1f       	adc	r26, r26
    53b2:	bb 1f       	adc	r27, r27
    53b4:	ee 1f       	adc	r30, r30
    53b6:	ff 1f       	adc	r31, r31
    53b8:	a2 17       	cp	r26, r18
    53ba:	b3 07       	cpc	r27, r19
    53bc:	e4 07       	cpc	r30, r20
    53be:	f5 07       	cpc	r31, r21
    53c0:	20 f0       	brcs	.+8      	; 0x53ca <__udivmodsi4_ep>
    53c2:	a2 1b       	sub	r26, r18
    53c4:	b3 0b       	sbc	r27, r19
    53c6:	e4 0b       	sbc	r30, r20
    53c8:	f5 0b       	sbc	r31, r21

000053ca <__udivmodsi4_ep>:
    53ca:	66 1f       	adc	r22, r22
    53cc:	77 1f       	adc	r23, r23
    53ce:	88 1f       	adc	r24, r24
    53d0:	99 1f       	adc	r25, r25
    53d2:	1a 94       	dec	r1
    53d4:	69 f7       	brne	.-38     	; 0x53b0 <__udivmodsi4_loop>
    53d6:	60 95       	com	r22
    53d8:	70 95       	com	r23
    53da:	80 95       	com	r24
    53dc:	90 95       	com	r25
    53de:	9b 01       	movw	r18, r22
    53e0:	ac 01       	movw	r20, r24
    53e2:	bd 01       	movw	r22, r26
    53e4:	cf 01       	movw	r24, r30
    53e6:	08 95       	ret

000053e8 <__prologue_saves__>:
    53e8:	2f 92       	push	r2
    53ea:	3f 92       	push	r3
    53ec:	4f 92       	push	r4
    53ee:	5f 92       	push	r5
    53f0:	6f 92       	push	r6
    53f2:	7f 92       	push	r7
    53f4:	8f 92       	push	r8
    53f6:	9f 92       	push	r9
    53f8:	af 92       	push	r10
    53fa:	bf 92       	push	r11
    53fc:	cf 92       	push	r12
    53fe:	df 92       	push	r13
    5400:	ef 92       	push	r14
    5402:	ff 92       	push	r15
    5404:	0f 93       	push	r16
    5406:	1f 93       	push	r17
    5408:	cf 93       	push	r28
    540a:	df 93       	push	r29
    540c:	cd b7       	in	r28, 0x3d	; 61
    540e:	de b7       	in	r29, 0x3e	; 62
    5410:	ca 1b       	sub	r28, r26
    5412:	db 0b       	sbc	r29, r27
    5414:	0f b6       	in	r0, 0x3f	; 63
    5416:	f8 94       	cli
    5418:	de bf       	out	0x3e, r29	; 62
    541a:	0f be       	out	0x3f, r0	; 63
    541c:	cd bf       	out	0x3d, r28	; 61
    541e:	09 94       	ijmp

00005420 <__epilogue_restores__>:
    5420:	2a 88       	ldd	r2, Y+18	; 0x12
    5422:	39 88       	ldd	r3, Y+17	; 0x11
    5424:	48 88       	ldd	r4, Y+16	; 0x10
    5426:	5f 84       	ldd	r5, Y+15	; 0x0f
    5428:	6e 84       	ldd	r6, Y+14	; 0x0e
    542a:	7d 84       	ldd	r7, Y+13	; 0x0d
    542c:	8c 84       	ldd	r8, Y+12	; 0x0c
    542e:	9b 84       	ldd	r9, Y+11	; 0x0b
    5430:	aa 84       	ldd	r10, Y+10	; 0x0a
    5432:	b9 84       	ldd	r11, Y+9	; 0x09
    5434:	c8 84       	ldd	r12, Y+8	; 0x08
    5436:	df 80       	ldd	r13, Y+7	; 0x07
    5438:	ee 80       	ldd	r14, Y+6	; 0x06
    543a:	fd 80       	ldd	r15, Y+5	; 0x05
    543c:	0c 81       	ldd	r16, Y+4	; 0x04
    543e:	1b 81       	ldd	r17, Y+3	; 0x03
    5440:	aa 81       	ldd	r26, Y+2	; 0x02
    5442:	b9 81       	ldd	r27, Y+1	; 0x01
    5444:	ce 0f       	add	r28, r30
    5446:	d1 1d       	adc	r29, r1
    5448:	0f b6       	in	r0, 0x3f	; 63
    544a:	f8 94       	cli
    544c:	de bf       	out	0x3e, r29	; 62
    544e:	0f be       	out	0x3f, r0	; 63
    5450:	cd bf       	out	0x3d, r28	; 61
    5452:	ed 01       	movw	r28, r26
    5454:	08 95       	ret

00005456 <__udivmodhi4>:
    5456:	aa 1b       	sub	r26, r26
    5458:	bb 1b       	sub	r27, r27
    545a:	51 e1       	ldi	r21, 0x11	; 17
    545c:	07 c0       	rjmp	.+14     	; 0x546c <__udivmodhi4_ep>

0000545e <__udivmodhi4_loop>:
    545e:	aa 1f       	adc	r26, r26
    5460:	bb 1f       	adc	r27, r27
    5462:	a6 17       	cp	r26, r22
    5464:	b7 07       	cpc	r27, r23
    5466:	10 f0       	brcs	.+4      	; 0x546c <__udivmodhi4_ep>
    5468:	a6 1b       	sub	r26, r22
    546a:	b7 0b       	sbc	r27, r23

0000546c <__udivmodhi4_ep>:
    546c:	88 1f       	adc	r24, r24
    546e:	99 1f       	adc	r25, r25
    5470:	5a 95       	dec	r21
    5472:	a9 f7       	brne	.-22     	; 0x545e <__udivmodhi4_loop>
    5474:	80 95       	com	r24
    5476:	90 95       	com	r25
    5478:	bc 01       	movw	r22, r24
    547a:	cd 01       	movw	r24, r26
    547c:	08 95       	ret

0000547e <malloc>:
    547e:	cf 93       	push	r28
    5480:	df 93       	push	r29
    5482:	bc 01       	movw	r22, r24
    5484:	82 30       	cpi	r24, 0x02	; 2
    5486:	91 05       	cpc	r25, r1
    5488:	10 f4       	brcc	.+4      	; 0x548e <malloc+0x10>
    548a:	62 e0       	ldi	r22, 0x02	; 2
    548c:	70 e0       	ldi	r23, 0x00	; 0
    548e:	a0 91 a5 04 	lds	r26, 0x04A5
    5492:	b0 91 a6 04 	lds	r27, 0x04A6
    5496:	ed 01       	movw	r28, r26
    5498:	e0 e0       	ldi	r30, 0x00	; 0
    549a:	f0 e0       	ldi	r31, 0x00	; 0
    549c:	40 e0       	ldi	r20, 0x00	; 0
    549e:	50 e0       	ldi	r21, 0x00	; 0
    54a0:	21 c0       	rjmp	.+66     	; 0x54e4 <malloc+0x66>
    54a2:	88 81       	ld	r24, Y
    54a4:	99 81       	ldd	r25, Y+1	; 0x01
    54a6:	86 17       	cp	r24, r22
    54a8:	97 07       	cpc	r25, r23
    54aa:	69 f4       	brne	.+26     	; 0x54c6 <malloc+0x48>
    54ac:	8a 81       	ldd	r24, Y+2	; 0x02
    54ae:	9b 81       	ldd	r25, Y+3	; 0x03
    54b0:	30 97       	sbiw	r30, 0x00	; 0
    54b2:	19 f0       	breq	.+6      	; 0x54ba <malloc+0x3c>
    54b4:	93 83       	std	Z+3, r25	; 0x03
    54b6:	82 83       	std	Z+2, r24	; 0x02
    54b8:	04 c0       	rjmp	.+8      	; 0x54c2 <malloc+0x44>
    54ba:	90 93 a6 04 	sts	0x04A6, r25
    54be:	80 93 a5 04 	sts	0x04A5, r24
    54c2:	fe 01       	movw	r30, r28
    54c4:	34 c0       	rjmp	.+104    	; 0x552e <malloc+0xb0>
    54c6:	68 17       	cp	r22, r24
    54c8:	79 07       	cpc	r23, r25
    54ca:	38 f4       	brcc	.+14     	; 0x54da <malloc+0x5c>
    54cc:	41 15       	cp	r20, r1
    54ce:	51 05       	cpc	r21, r1
    54d0:	19 f0       	breq	.+6      	; 0x54d8 <malloc+0x5a>
    54d2:	84 17       	cp	r24, r20
    54d4:	95 07       	cpc	r25, r21
    54d6:	08 f4       	brcc	.+2      	; 0x54da <malloc+0x5c>
    54d8:	ac 01       	movw	r20, r24
    54da:	fe 01       	movw	r30, r28
    54dc:	8a 81       	ldd	r24, Y+2	; 0x02
    54de:	9b 81       	ldd	r25, Y+3	; 0x03
    54e0:	9c 01       	movw	r18, r24
    54e2:	e9 01       	movw	r28, r18
    54e4:	20 97       	sbiw	r28, 0x00	; 0
    54e6:	e9 f6       	brne	.-70     	; 0x54a2 <malloc+0x24>
    54e8:	41 15       	cp	r20, r1
    54ea:	51 05       	cpc	r21, r1
    54ec:	a9 f1       	breq	.+106    	; 0x5558 <malloc+0xda>
    54ee:	ca 01       	movw	r24, r20
    54f0:	86 1b       	sub	r24, r22
    54f2:	97 0b       	sbc	r25, r23
    54f4:	04 97       	sbiw	r24, 0x04	; 4
    54f6:	08 f4       	brcc	.+2      	; 0x54fa <malloc+0x7c>
    54f8:	ba 01       	movw	r22, r20
    54fa:	e0 e0       	ldi	r30, 0x00	; 0
    54fc:	f0 e0       	ldi	r31, 0x00	; 0
    54fe:	2a c0       	rjmp	.+84     	; 0x5554 <malloc+0xd6>
    5500:	8d 91       	ld	r24, X+
    5502:	9c 91       	ld	r25, X
    5504:	11 97       	sbiw	r26, 0x01	; 1
    5506:	84 17       	cp	r24, r20
    5508:	95 07       	cpc	r25, r21
    550a:	f9 f4       	brne	.+62     	; 0x554a <malloc+0xcc>
    550c:	64 17       	cp	r22, r20
    550e:	75 07       	cpc	r23, r21
    5510:	81 f4       	brne	.+32     	; 0x5532 <malloc+0xb4>
    5512:	12 96       	adiw	r26, 0x02	; 2
    5514:	8d 91       	ld	r24, X+
    5516:	9c 91       	ld	r25, X
    5518:	13 97       	sbiw	r26, 0x03	; 3
    551a:	30 97       	sbiw	r30, 0x00	; 0
    551c:	19 f0       	breq	.+6      	; 0x5524 <malloc+0xa6>
    551e:	93 83       	std	Z+3, r25	; 0x03
    5520:	82 83       	std	Z+2, r24	; 0x02
    5522:	04 c0       	rjmp	.+8      	; 0x552c <malloc+0xae>
    5524:	90 93 a6 04 	sts	0x04A6, r25
    5528:	80 93 a5 04 	sts	0x04A5, r24
    552c:	fd 01       	movw	r30, r26
    552e:	32 96       	adiw	r30, 0x02	; 2
    5530:	4f c0       	rjmp	.+158    	; 0x55d0 <malloc+0x152>
    5532:	ca 01       	movw	r24, r20
    5534:	86 1b       	sub	r24, r22
    5536:	97 0b       	sbc	r25, r23
    5538:	fd 01       	movw	r30, r26
    553a:	e8 0f       	add	r30, r24
    553c:	f9 1f       	adc	r31, r25
    553e:	61 93       	st	Z+, r22
    5540:	71 93       	st	Z+, r23
    5542:	02 97       	sbiw	r24, 0x02	; 2
    5544:	8d 93       	st	X+, r24
    5546:	9c 93       	st	X, r25
    5548:	43 c0       	rjmp	.+134    	; 0x55d0 <malloc+0x152>
    554a:	fd 01       	movw	r30, r26
    554c:	82 81       	ldd	r24, Z+2	; 0x02
    554e:	93 81       	ldd	r25, Z+3	; 0x03
    5550:	9c 01       	movw	r18, r24
    5552:	d9 01       	movw	r26, r18
    5554:	10 97       	sbiw	r26, 0x00	; 0
    5556:	a1 f6       	brne	.-88     	; 0x5500 <malloc+0x82>
    5558:	80 91 a3 04 	lds	r24, 0x04A3
    555c:	90 91 a4 04 	lds	r25, 0x04A4
    5560:	89 2b       	or	r24, r25
    5562:	41 f4       	brne	.+16     	; 0x5574 <malloc+0xf6>
    5564:	80 91 a2 01 	lds	r24, 0x01A2
    5568:	90 91 a3 01 	lds	r25, 0x01A3
    556c:	90 93 a4 04 	sts	0x04A4, r25
    5570:	80 93 a3 04 	sts	0x04A3, r24
    5574:	40 91 a4 01 	lds	r20, 0x01A4
    5578:	50 91 a5 01 	lds	r21, 0x01A5
    557c:	41 15       	cp	r20, r1
    557e:	51 05       	cpc	r21, r1
    5580:	41 f4       	brne	.+16     	; 0x5592 <malloc+0x114>
    5582:	4d b7       	in	r20, 0x3d	; 61
    5584:	5e b7       	in	r21, 0x3e	; 62
    5586:	80 91 a0 01 	lds	r24, 0x01A0
    558a:	90 91 a1 01 	lds	r25, 0x01A1
    558e:	48 1b       	sub	r20, r24
    5590:	59 0b       	sbc	r21, r25
    5592:	20 91 a3 04 	lds	r18, 0x04A3
    5596:	30 91 a4 04 	lds	r19, 0x04A4
    559a:	24 17       	cp	r18, r20
    559c:	35 07       	cpc	r19, r21
    559e:	b0 f4       	brcc	.+44     	; 0x55cc <malloc+0x14e>
    55a0:	ca 01       	movw	r24, r20
    55a2:	82 1b       	sub	r24, r18
    55a4:	93 0b       	sbc	r25, r19
    55a6:	86 17       	cp	r24, r22
    55a8:	97 07       	cpc	r25, r23
    55aa:	80 f0       	brcs	.+32     	; 0x55cc <malloc+0x14e>
    55ac:	ab 01       	movw	r20, r22
    55ae:	4e 5f       	subi	r20, 0xFE	; 254
    55b0:	5f 4f       	sbci	r21, 0xFF	; 255
    55b2:	84 17       	cp	r24, r20
    55b4:	95 07       	cpc	r25, r21
    55b6:	50 f0       	brcs	.+20     	; 0x55cc <malloc+0x14e>
    55b8:	42 0f       	add	r20, r18
    55ba:	53 1f       	adc	r21, r19
    55bc:	50 93 a4 04 	sts	0x04A4, r21
    55c0:	40 93 a3 04 	sts	0x04A3, r20
    55c4:	f9 01       	movw	r30, r18
    55c6:	61 93       	st	Z+, r22
    55c8:	71 93       	st	Z+, r23
    55ca:	02 c0       	rjmp	.+4      	; 0x55d0 <malloc+0x152>
    55cc:	e0 e0       	ldi	r30, 0x00	; 0
    55ce:	f0 e0       	ldi	r31, 0x00	; 0
    55d0:	cf 01       	movw	r24, r30
    55d2:	df 91       	pop	r29
    55d4:	cf 91       	pop	r28
    55d6:	08 95       	ret

000055d8 <free>:
    55d8:	cf 93       	push	r28
    55da:	df 93       	push	r29
    55dc:	00 97       	sbiw	r24, 0x00	; 0
    55de:	09 f4       	brne	.+2      	; 0x55e2 <free+0xa>
    55e0:	50 c0       	rjmp	.+160    	; 0x5682 <free+0xaa>
    55e2:	ec 01       	movw	r28, r24
    55e4:	22 97       	sbiw	r28, 0x02	; 2
    55e6:	1b 82       	std	Y+3, r1	; 0x03
    55e8:	1a 82       	std	Y+2, r1	; 0x02
    55ea:	a0 91 a5 04 	lds	r26, 0x04A5
    55ee:	b0 91 a6 04 	lds	r27, 0x04A6
    55f2:	10 97       	sbiw	r26, 0x00	; 0
    55f4:	09 f1       	breq	.+66     	; 0x5638 <free+0x60>
    55f6:	40 e0       	ldi	r20, 0x00	; 0
    55f8:	50 e0       	ldi	r21, 0x00	; 0
    55fa:	ac 17       	cp	r26, r28
    55fc:	bd 07       	cpc	r27, r29
    55fe:	08 f1       	brcs	.+66     	; 0x5642 <free+0x6a>
    5600:	bb 83       	std	Y+3, r27	; 0x03
    5602:	aa 83       	std	Y+2, r26	; 0x02
    5604:	fe 01       	movw	r30, r28
    5606:	21 91       	ld	r18, Z+
    5608:	31 91       	ld	r19, Z+
    560a:	e2 0f       	add	r30, r18
    560c:	f3 1f       	adc	r31, r19
    560e:	ae 17       	cp	r26, r30
    5610:	bf 07       	cpc	r27, r31
    5612:	79 f4       	brne	.+30     	; 0x5632 <free+0x5a>
    5614:	8d 91       	ld	r24, X+
    5616:	9c 91       	ld	r25, X
    5618:	11 97       	sbiw	r26, 0x01	; 1
    561a:	28 0f       	add	r18, r24
    561c:	39 1f       	adc	r19, r25
    561e:	2e 5f       	subi	r18, 0xFE	; 254
    5620:	3f 4f       	sbci	r19, 0xFF	; 255
    5622:	39 83       	std	Y+1, r19	; 0x01
    5624:	28 83       	st	Y, r18
    5626:	12 96       	adiw	r26, 0x02	; 2
    5628:	8d 91       	ld	r24, X+
    562a:	9c 91       	ld	r25, X
    562c:	13 97       	sbiw	r26, 0x03	; 3
    562e:	9b 83       	std	Y+3, r25	; 0x03
    5630:	8a 83       	std	Y+2, r24	; 0x02
    5632:	41 15       	cp	r20, r1
    5634:	51 05       	cpc	r21, r1
    5636:	71 f4       	brne	.+28     	; 0x5654 <free+0x7c>
    5638:	d0 93 a6 04 	sts	0x04A6, r29
    563c:	c0 93 a5 04 	sts	0x04A5, r28
    5640:	20 c0       	rjmp	.+64     	; 0x5682 <free+0xaa>
    5642:	12 96       	adiw	r26, 0x02	; 2
    5644:	8d 91       	ld	r24, X+
    5646:	9c 91       	ld	r25, X
    5648:	13 97       	sbiw	r26, 0x03	; 3
    564a:	ad 01       	movw	r20, r26
    564c:	00 97       	sbiw	r24, 0x00	; 0
    564e:	11 f0       	breq	.+4      	; 0x5654 <free+0x7c>
    5650:	dc 01       	movw	r26, r24
    5652:	d3 cf       	rjmp	.-90     	; 0x55fa <free+0x22>
    5654:	fa 01       	movw	r30, r20
    5656:	d3 83       	std	Z+3, r29	; 0x03
    5658:	c2 83       	std	Z+2, r28	; 0x02
    565a:	21 91       	ld	r18, Z+
    565c:	31 91       	ld	r19, Z+
    565e:	e2 0f       	add	r30, r18
    5660:	f3 1f       	adc	r31, r19
    5662:	ce 17       	cp	r28, r30
    5664:	df 07       	cpc	r29, r31
    5666:	69 f4       	brne	.+26     	; 0x5682 <free+0xaa>
    5668:	88 81       	ld	r24, Y
    566a:	99 81       	ldd	r25, Y+1	; 0x01
    566c:	28 0f       	add	r18, r24
    566e:	39 1f       	adc	r19, r25
    5670:	2e 5f       	subi	r18, 0xFE	; 254
    5672:	3f 4f       	sbci	r19, 0xFF	; 255
    5674:	fa 01       	movw	r30, r20
    5676:	31 83       	std	Z+1, r19	; 0x01
    5678:	20 83       	st	Z, r18
    567a:	8a 81       	ldd	r24, Y+2	; 0x02
    567c:	9b 81       	ldd	r25, Y+3	; 0x03
    567e:	93 83       	std	Z+3, r25	; 0x03
    5680:	82 83       	std	Z+2, r24	; 0x02
    5682:	df 91       	pop	r29
    5684:	cf 91       	pop	r28
    5686:	08 95       	ret

00005688 <do_rand>:
    5688:	a0 e0       	ldi	r26, 0x00	; 0
    568a:	b0 e0       	ldi	r27, 0x00	; 0
    568c:	e9 e4       	ldi	r30, 0x49	; 73
    568e:	fb e2       	ldi	r31, 0x2B	; 43
    5690:	b3 ce       	rjmp	.-666    	; 0x53f8 <__prologue_saves__+0x10>
    5692:	ec 01       	movw	r28, r24
    5694:	a8 80       	ld	r10, Y
    5696:	b9 80       	ldd	r11, Y+1	; 0x01
    5698:	ca 80       	ldd	r12, Y+2	; 0x02
    569a:	db 80       	ldd	r13, Y+3	; 0x03
    569c:	a1 14       	cp	r10, r1
    569e:	b1 04       	cpc	r11, r1
    56a0:	c1 04       	cpc	r12, r1
    56a2:	d1 04       	cpc	r13, r1
    56a4:	41 f4       	brne	.+16     	; 0x56b6 <do_rand+0x2e>
    56a6:	84 e2       	ldi	r24, 0x24	; 36
    56a8:	a8 2e       	mov	r10, r24
    56aa:	89 ed       	ldi	r24, 0xD9	; 217
    56ac:	b8 2e       	mov	r11, r24
    56ae:	8b e5       	ldi	r24, 0x5B	; 91
    56b0:	c8 2e       	mov	r12, r24
    56b2:	87 e0       	ldi	r24, 0x07	; 7
    56b4:	d8 2e       	mov	r13, r24
    56b6:	c6 01       	movw	r24, r12
    56b8:	b5 01       	movw	r22, r10
    56ba:	2d e1       	ldi	r18, 0x1D	; 29
    56bc:	33 ef       	ldi	r19, 0xF3	; 243
    56be:	41 e0       	ldi	r20, 0x01	; 1
    56c0:	50 e0       	ldi	r21, 0x00	; 0
    56c2:	e8 d1       	rcall	.+976    	; 0x5a94 <__divmodsi4>
    56c4:	27 ea       	ldi	r18, 0xA7	; 167
    56c6:	31 e4       	ldi	r19, 0x41	; 65
    56c8:	40 e0       	ldi	r20, 0x00	; 0
    56ca:	50 e0       	ldi	r21, 0x00	; 0
    56cc:	39 de       	rcall	.-910    	; 0x5340 <__mulsi3>
    56ce:	7b 01       	movw	r14, r22
    56d0:	8c 01       	movw	r16, r24
    56d2:	c6 01       	movw	r24, r12
    56d4:	b5 01       	movw	r22, r10
    56d6:	2d e1       	ldi	r18, 0x1D	; 29
    56d8:	33 ef       	ldi	r19, 0xF3	; 243
    56da:	41 e0       	ldi	r20, 0x01	; 1
    56dc:	50 e0       	ldi	r21, 0x00	; 0
    56de:	da d1       	rcall	.+948    	; 0x5a94 <__divmodsi4>
    56e0:	ca 01       	movw	r24, r20
    56e2:	b9 01       	movw	r22, r18
    56e4:	2c ee       	ldi	r18, 0xEC	; 236
    56e6:	34 ef       	ldi	r19, 0xF4	; 244
    56e8:	4f ef       	ldi	r20, 0xFF	; 255
    56ea:	5f ef       	ldi	r21, 0xFF	; 255
    56ec:	29 de       	rcall	.-942    	; 0x5340 <__mulsi3>
    56ee:	6e 0d       	add	r22, r14
    56f0:	7f 1d       	adc	r23, r15
    56f2:	80 1f       	adc	r24, r16
    56f4:	91 1f       	adc	r25, r17
    56f6:	97 ff       	sbrs	r25, 7
    56f8:	04 c0       	rjmp	.+8      	; 0x5702 <do_rand+0x7a>
    56fa:	61 50       	subi	r22, 0x01	; 1
    56fc:	70 40       	sbci	r23, 0x00	; 0
    56fe:	80 40       	sbci	r24, 0x00	; 0
    5700:	90 48       	sbci	r25, 0x80	; 128
    5702:	68 83       	st	Y, r22
    5704:	79 83       	std	Y+1, r23	; 0x01
    5706:	8a 83       	std	Y+2, r24	; 0x02
    5708:	9b 83       	std	Y+3, r25	; 0x03
    570a:	9b 01       	movw	r18, r22
    570c:	3f 77       	andi	r19, 0x7F	; 127
    570e:	c9 01       	movw	r24, r18
    5710:	cd b7       	in	r28, 0x3d	; 61
    5712:	de b7       	in	r29, 0x3e	; 62
    5714:	ea e0       	ldi	r30, 0x0A	; 10
    5716:	8c ce       	rjmp	.-744    	; 0x5430 <__epilogue_restores__+0x10>

00005718 <rand_r>:
    5718:	b7 df       	rcall	.-146    	; 0x5688 <do_rand>
    571a:	08 95       	ret

0000571c <rand>:
    571c:	86 ea       	ldi	r24, 0xA6	; 166
    571e:	91 e0       	ldi	r25, 0x01	; 1
    5720:	b3 df       	rcall	.-154    	; 0x5688 <do_rand>
    5722:	08 95       	ret

00005724 <srand>:
    5724:	a0 e0       	ldi	r26, 0x00	; 0
    5726:	b0 e0       	ldi	r27, 0x00	; 0
    5728:	80 93 a6 01 	sts	0x01A6, r24
    572c:	90 93 a7 01 	sts	0x01A7, r25
    5730:	a0 93 a8 01 	sts	0x01A8, r26
    5734:	b0 93 a9 01 	sts	0x01A9, r27
    5738:	08 95       	ret

0000573a <__ftoa_engine>:
    573a:	28 30       	cpi	r18, 0x08	; 8
    573c:	08 f0       	brcs	.+2      	; 0x5740 <__ftoa_engine+0x6>
    573e:	27 e0       	ldi	r18, 0x07	; 7
    5740:	33 27       	eor	r19, r19
    5742:	da 01       	movw	r26, r20
    5744:	99 0f       	add	r25, r25
    5746:	31 1d       	adc	r19, r1
    5748:	87 fd       	sbrc	r24, 7
    574a:	91 60       	ori	r25, 0x01	; 1
    574c:	00 96       	adiw	r24, 0x00	; 0
    574e:	61 05       	cpc	r22, r1
    5750:	71 05       	cpc	r23, r1
    5752:	39 f4       	brne	.+14     	; 0x5762 <__ftoa_engine+0x28>
    5754:	32 60       	ori	r19, 0x02	; 2
    5756:	2e 5f       	subi	r18, 0xFE	; 254
    5758:	3d 93       	st	X+, r19
    575a:	30 e3       	ldi	r19, 0x30	; 48
    575c:	2a 95       	dec	r18
    575e:	e1 f7       	brne	.-8      	; 0x5758 <__ftoa_engine+0x1e>
    5760:	08 95       	ret
    5762:	9f 3f       	cpi	r25, 0xFF	; 255
    5764:	30 f0       	brcs	.+12     	; 0x5772 <__ftoa_engine+0x38>
    5766:	80 38       	cpi	r24, 0x80	; 128
    5768:	71 05       	cpc	r23, r1
    576a:	61 05       	cpc	r22, r1
    576c:	09 f0       	breq	.+2      	; 0x5770 <__ftoa_engine+0x36>
    576e:	3c 5f       	subi	r19, 0xFC	; 252
    5770:	3c 5f       	subi	r19, 0xFC	; 252
    5772:	3d 93       	st	X+, r19
    5774:	91 30       	cpi	r25, 0x01	; 1
    5776:	08 f0       	brcs	.+2      	; 0x577a <__ftoa_engine+0x40>
    5778:	80 68       	ori	r24, 0x80	; 128
    577a:	91 1d       	adc	r25, r1
    577c:	df 93       	push	r29
    577e:	cf 93       	push	r28
    5780:	1f 93       	push	r17
    5782:	0f 93       	push	r16
    5784:	ff 92       	push	r15
    5786:	ef 92       	push	r14
    5788:	19 2f       	mov	r17, r25
    578a:	98 7f       	andi	r25, 0xF8	; 248
    578c:	96 95       	lsr	r25
    578e:	e9 2f       	mov	r30, r25
    5790:	96 95       	lsr	r25
    5792:	96 95       	lsr	r25
    5794:	e9 0f       	add	r30, r25
    5796:	ff 27       	eor	r31, r31
    5798:	ef 53       	subi	r30, 0x3F	; 63
    579a:	fa 4f       	sbci	r31, 0xFA	; 250
    579c:	99 27       	eor	r25, r25
    579e:	33 27       	eor	r19, r19
    57a0:	ee 24       	eor	r14, r14
    57a2:	ff 24       	eor	r15, r15
    57a4:	a7 01       	movw	r20, r14
    57a6:	e7 01       	movw	r28, r14
    57a8:	05 90       	lpm	r0, Z+
    57aa:	08 94       	sec
    57ac:	07 94       	ror	r0
    57ae:	28 f4       	brcc	.+10     	; 0x57ba <__ftoa_engine+0x80>
    57b0:	36 0f       	add	r19, r22
    57b2:	e7 1e       	adc	r14, r23
    57b4:	f8 1e       	adc	r15, r24
    57b6:	49 1f       	adc	r20, r25
    57b8:	51 1d       	adc	r21, r1
    57ba:	66 0f       	add	r22, r22
    57bc:	77 1f       	adc	r23, r23
    57be:	88 1f       	adc	r24, r24
    57c0:	99 1f       	adc	r25, r25
    57c2:	06 94       	lsr	r0
    57c4:	a1 f7       	brne	.-24     	; 0x57ae <__ftoa_engine+0x74>
    57c6:	05 90       	lpm	r0, Z+
    57c8:	07 94       	ror	r0
    57ca:	28 f4       	brcc	.+10     	; 0x57d6 <__ftoa_engine+0x9c>
    57cc:	e7 0e       	add	r14, r23
    57ce:	f8 1e       	adc	r15, r24
    57d0:	49 1f       	adc	r20, r25
    57d2:	56 1f       	adc	r21, r22
    57d4:	c1 1d       	adc	r28, r1
    57d6:	77 0f       	add	r23, r23
    57d8:	88 1f       	adc	r24, r24
    57da:	99 1f       	adc	r25, r25
    57dc:	66 1f       	adc	r22, r22
    57de:	06 94       	lsr	r0
    57e0:	a1 f7       	brne	.-24     	; 0x57ca <__ftoa_engine+0x90>
    57e2:	05 90       	lpm	r0, Z+
    57e4:	07 94       	ror	r0
    57e6:	28 f4       	brcc	.+10     	; 0x57f2 <__ftoa_engine+0xb8>
    57e8:	f8 0e       	add	r15, r24
    57ea:	49 1f       	adc	r20, r25
    57ec:	56 1f       	adc	r21, r22
    57ee:	c7 1f       	adc	r28, r23
    57f0:	d1 1d       	adc	r29, r1
    57f2:	88 0f       	add	r24, r24
    57f4:	99 1f       	adc	r25, r25
    57f6:	66 1f       	adc	r22, r22
    57f8:	77 1f       	adc	r23, r23
    57fa:	06 94       	lsr	r0
    57fc:	a1 f7       	brne	.-24     	; 0x57e6 <__ftoa_engine+0xac>
    57fe:	05 90       	lpm	r0, Z+
    5800:	07 94       	ror	r0
    5802:	20 f4       	brcc	.+8      	; 0x580c <__ftoa_engine+0xd2>
    5804:	49 0f       	add	r20, r25
    5806:	56 1f       	adc	r21, r22
    5808:	c7 1f       	adc	r28, r23
    580a:	d8 1f       	adc	r29, r24
    580c:	99 0f       	add	r25, r25
    580e:	66 1f       	adc	r22, r22
    5810:	77 1f       	adc	r23, r23
    5812:	88 1f       	adc	r24, r24
    5814:	06 94       	lsr	r0
    5816:	a9 f7       	brne	.-22     	; 0x5802 <__ftoa_engine+0xc8>
    5818:	84 91       	lpm	r24, Z+
    581a:	10 95       	com	r17
    581c:	17 70       	andi	r17, 0x07	; 7
    581e:	41 f0       	breq	.+16     	; 0x5830 <__ftoa_engine+0xf6>
    5820:	d6 95       	lsr	r29
    5822:	c7 95       	ror	r28
    5824:	57 95       	ror	r21
    5826:	47 95       	ror	r20
    5828:	f7 94       	ror	r15
    582a:	e7 94       	ror	r14
    582c:	1a 95       	dec	r17
    582e:	c1 f7       	brne	.-16     	; 0x5820 <__ftoa_engine+0xe6>
    5830:	e7 e6       	ldi	r30, 0x67	; 103
    5832:	f5 e0       	ldi	r31, 0x05	; 5
    5834:	68 94       	set
    5836:	15 90       	lpm	r1, Z+
    5838:	15 91       	lpm	r17, Z+
    583a:	35 91       	lpm	r19, Z+
    583c:	65 91       	lpm	r22, Z+
    583e:	95 91       	lpm	r25, Z+
    5840:	05 90       	lpm	r0, Z+
    5842:	7f e2       	ldi	r23, 0x2F	; 47
    5844:	73 95       	inc	r23
    5846:	e1 18       	sub	r14, r1
    5848:	f1 0a       	sbc	r15, r17
    584a:	43 0b       	sbc	r20, r19
    584c:	56 0b       	sbc	r21, r22
    584e:	c9 0b       	sbc	r28, r25
    5850:	d0 09       	sbc	r29, r0
    5852:	c0 f7       	brcc	.-16     	; 0x5844 <__ftoa_engine+0x10a>
    5854:	e1 0c       	add	r14, r1
    5856:	f1 1e       	adc	r15, r17
    5858:	43 1f       	adc	r20, r19
    585a:	56 1f       	adc	r21, r22
    585c:	c9 1f       	adc	r28, r25
    585e:	d0 1d       	adc	r29, r0
    5860:	7e f4       	brtc	.+30     	; 0x5880 <__ftoa_engine+0x146>
    5862:	70 33       	cpi	r23, 0x30	; 48
    5864:	11 f4       	brne	.+4      	; 0x586a <__ftoa_engine+0x130>
    5866:	8a 95       	dec	r24
    5868:	e6 cf       	rjmp	.-52     	; 0x5836 <__ftoa_engine+0xfc>
    586a:	e8 94       	clt
    586c:	01 50       	subi	r16, 0x01	; 1
    586e:	30 f0       	brcs	.+12     	; 0x587c <__ftoa_engine+0x142>
    5870:	08 0f       	add	r16, r24
    5872:	0a f4       	brpl	.+2      	; 0x5876 <__ftoa_engine+0x13c>
    5874:	00 27       	eor	r16, r16
    5876:	02 17       	cp	r16, r18
    5878:	08 f4       	brcc	.+2      	; 0x587c <__ftoa_engine+0x142>
    587a:	20 2f       	mov	r18, r16
    587c:	23 95       	inc	r18
    587e:	02 2f       	mov	r16, r18
    5880:	7a 33       	cpi	r23, 0x3A	; 58
    5882:	28 f0       	brcs	.+10     	; 0x588e <__ftoa_engine+0x154>
    5884:	79 e3       	ldi	r23, 0x39	; 57
    5886:	7d 93       	st	X+, r23
    5888:	2a 95       	dec	r18
    588a:	e9 f7       	brne	.-6      	; 0x5886 <__ftoa_engine+0x14c>
    588c:	10 c0       	rjmp	.+32     	; 0x58ae <__ftoa_engine+0x174>
    588e:	7d 93       	st	X+, r23
    5890:	2a 95       	dec	r18
    5892:	89 f6       	brne	.-94     	; 0x5836 <__ftoa_engine+0xfc>
    5894:	06 94       	lsr	r0
    5896:	97 95       	ror	r25
    5898:	67 95       	ror	r22
    589a:	37 95       	ror	r19
    589c:	17 95       	ror	r17
    589e:	17 94       	ror	r1
    58a0:	e1 18       	sub	r14, r1
    58a2:	f1 0a       	sbc	r15, r17
    58a4:	43 0b       	sbc	r20, r19
    58a6:	56 0b       	sbc	r21, r22
    58a8:	c9 0b       	sbc	r28, r25
    58aa:	d0 09       	sbc	r29, r0
    58ac:	98 f0       	brcs	.+38     	; 0x58d4 <__ftoa_engine+0x19a>
    58ae:	23 95       	inc	r18
    58b0:	7e 91       	ld	r23, -X
    58b2:	73 95       	inc	r23
    58b4:	7a 33       	cpi	r23, 0x3A	; 58
    58b6:	08 f0       	brcs	.+2      	; 0x58ba <__ftoa_engine+0x180>
    58b8:	70 e3       	ldi	r23, 0x30	; 48
    58ba:	7c 93       	st	X, r23
    58bc:	20 13       	cpse	r18, r16
    58be:	b8 f7       	brcc	.-18     	; 0x58ae <__ftoa_engine+0x174>
    58c0:	7e 91       	ld	r23, -X
    58c2:	70 61       	ori	r23, 0x10	; 16
    58c4:	7d 93       	st	X+, r23
    58c6:	30 f0       	brcs	.+12     	; 0x58d4 <__ftoa_engine+0x19a>
    58c8:	83 95       	inc	r24
    58ca:	71 e3       	ldi	r23, 0x31	; 49
    58cc:	7d 93       	st	X+, r23
    58ce:	70 e3       	ldi	r23, 0x30	; 48
    58d0:	2a 95       	dec	r18
    58d2:	e1 f7       	brne	.-8      	; 0x58cc <__ftoa_engine+0x192>
    58d4:	11 24       	eor	r1, r1
    58d6:	ef 90       	pop	r14
    58d8:	ff 90       	pop	r15
    58da:	0f 91       	pop	r16
    58dc:	1f 91       	pop	r17
    58de:	cf 91       	pop	r28
    58e0:	df 91       	pop	r29
    58e2:	99 27       	eor	r25, r25
    58e4:	87 fd       	sbrc	r24, 7
    58e6:	90 95       	com	r25
    58e8:	08 95       	ret

000058ea <strnlen_P>:
    58ea:	fc 01       	movw	r30, r24
    58ec:	05 90       	lpm	r0, Z+
    58ee:	61 50       	subi	r22, 0x01	; 1
    58f0:	70 40       	sbci	r23, 0x00	; 0
    58f2:	01 10       	cpse	r0, r1
    58f4:	d8 f7       	brcc	.-10     	; 0x58ec <strnlen_P+0x2>
    58f6:	80 95       	com	r24
    58f8:	90 95       	com	r25
    58fa:	8e 0f       	add	r24, r30
    58fc:	9f 1f       	adc	r25, r31
    58fe:	08 95       	ret

00005900 <strnlen>:
    5900:	fc 01       	movw	r30, r24
    5902:	61 50       	subi	r22, 0x01	; 1
    5904:	70 40       	sbci	r23, 0x00	; 0
    5906:	01 90       	ld	r0, Z+
    5908:	01 10       	cpse	r0, r1
    590a:	d8 f7       	brcc	.-10     	; 0x5902 <strnlen+0x2>
    590c:	80 95       	com	r24
    590e:	90 95       	com	r25
    5910:	8e 0f       	add	r24, r30
    5912:	9f 1f       	adc	r25, r31
    5914:	08 95       	ret

00005916 <fputc>:
    5916:	0f 93       	push	r16
    5918:	1f 93       	push	r17
    591a:	cf 93       	push	r28
    591c:	df 93       	push	r29
    591e:	8c 01       	movw	r16, r24
    5920:	eb 01       	movw	r28, r22
    5922:	8b 81       	ldd	r24, Y+3	; 0x03
    5924:	81 ff       	sbrs	r24, 1
    5926:	1b c0       	rjmp	.+54     	; 0x595e <fputc+0x48>
    5928:	82 ff       	sbrs	r24, 2
    592a:	0d c0       	rjmp	.+26     	; 0x5946 <fputc+0x30>
    592c:	2e 81       	ldd	r18, Y+6	; 0x06
    592e:	3f 81       	ldd	r19, Y+7	; 0x07
    5930:	8c 81       	ldd	r24, Y+4	; 0x04
    5932:	9d 81       	ldd	r25, Y+5	; 0x05
    5934:	28 17       	cp	r18, r24
    5936:	39 07       	cpc	r19, r25
    5938:	64 f4       	brge	.+24     	; 0x5952 <fputc+0x3c>
    593a:	e8 81       	ld	r30, Y
    593c:	f9 81       	ldd	r31, Y+1	; 0x01
    593e:	01 93       	st	Z+, r16
    5940:	f9 83       	std	Y+1, r31	; 0x01
    5942:	e8 83       	st	Y, r30
    5944:	06 c0       	rjmp	.+12     	; 0x5952 <fputc+0x3c>
    5946:	e8 85       	ldd	r30, Y+8	; 0x08
    5948:	f9 85       	ldd	r31, Y+9	; 0x09
    594a:	80 2f       	mov	r24, r16
    594c:	09 95       	icall
    594e:	89 2b       	or	r24, r25
    5950:	31 f4       	brne	.+12     	; 0x595e <fputc+0x48>
    5952:	8e 81       	ldd	r24, Y+6	; 0x06
    5954:	9f 81       	ldd	r25, Y+7	; 0x07
    5956:	01 96       	adiw	r24, 0x01	; 1
    5958:	9f 83       	std	Y+7, r25	; 0x07
    595a:	8e 83       	std	Y+6, r24	; 0x06
    595c:	02 c0       	rjmp	.+4      	; 0x5962 <fputc+0x4c>
    595e:	0f ef       	ldi	r16, 0xFF	; 255
    5960:	1f ef       	ldi	r17, 0xFF	; 255
    5962:	c8 01       	movw	r24, r16
    5964:	df 91       	pop	r29
    5966:	cf 91       	pop	r28
    5968:	1f 91       	pop	r17
    596a:	0f 91       	pop	r16
    596c:	08 95       	ret

0000596e <puts>:
    596e:	0f 93       	push	r16
    5970:	1f 93       	push	r17
    5972:	cf 93       	push	r28
    5974:	df 93       	push	r29
    5976:	8c 01       	movw	r16, r24
    5978:	e0 91 a9 04 	lds	r30, 0x04A9
    597c:	f0 91 aa 04 	lds	r31, 0x04AA
    5980:	83 81       	ldd	r24, Z+3	; 0x03
    5982:	81 ff       	sbrs	r24, 1
    5984:	21 c0       	rjmp	.+66     	; 0x59c8 <puts+0x5a>
    5986:	c0 e0       	ldi	r28, 0x00	; 0
    5988:	d0 e0       	ldi	r29, 0x00	; 0
    598a:	0d c0       	rjmp	.+26     	; 0x59a6 <puts+0x38>
    598c:	e0 91 a9 04 	lds	r30, 0x04A9
    5990:	f0 91 aa 04 	lds	r31, 0x04AA
    5994:	20 85       	ldd	r18, Z+8	; 0x08
    5996:	31 85       	ldd	r19, Z+9	; 0x09
    5998:	bf 01       	movw	r22, r30
    599a:	f9 01       	movw	r30, r18
    599c:	09 95       	icall
    599e:	89 2b       	or	r24, r25
    59a0:	11 f0       	breq	.+4      	; 0x59a6 <puts+0x38>
    59a2:	cf ef       	ldi	r28, 0xFF	; 255
    59a4:	df ef       	ldi	r29, 0xFF	; 255
    59a6:	f8 01       	movw	r30, r16
    59a8:	81 91       	ld	r24, Z+
    59aa:	8f 01       	movw	r16, r30
    59ac:	88 23       	and	r24, r24
    59ae:	71 f7       	brne	.-36     	; 0x598c <puts+0x1e>
    59b0:	e0 91 a9 04 	lds	r30, 0x04A9
    59b4:	f0 91 aa 04 	lds	r31, 0x04AA
    59b8:	20 85       	ldd	r18, Z+8	; 0x08
    59ba:	31 85       	ldd	r19, Z+9	; 0x09
    59bc:	8a e0       	ldi	r24, 0x0A	; 10
    59be:	bf 01       	movw	r22, r30
    59c0:	f9 01       	movw	r30, r18
    59c2:	09 95       	icall
    59c4:	89 2b       	or	r24, r25
    59c6:	11 f0       	breq	.+4      	; 0x59cc <puts+0x5e>
    59c8:	cf ef       	ldi	r28, 0xFF	; 255
    59ca:	df ef       	ldi	r29, 0xFF	; 255
    59cc:	ce 01       	movw	r24, r28
    59ce:	df 91       	pop	r29
    59d0:	cf 91       	pop	r28
    59d2:	1f 91       	pop	r17
    59d4:	0f 91       	pop	r16
    59d6:	08 95       	ret

000059d8 <__ultoa_invert>:
    59d8:	fa 01       	movw	r30, r20
    59da:	aa 27       	eor	r26, r26
    59dc:	28 30       	cpi	r18, 0x08	; 8
    59de:	51 f1       	breq	.+84     	; 0x5a34 <__ultoa_invert+0x5c>
    59e0:	20 31       	cpi	r18, 0x10	; 16
    59e2:	81 f1       	breq	.+96     	; 0x5a44 <__ultoa_invert+0x6c>
    59e4:	e8 94       	clt
    59e6:	6f 93       	push	r22
    59e8:	6e 7f       	andi	r22, 0xFE	; 254
    59ea:	6e 5f       	subi	r22, 0xFE	; 254
    59ec:	7f 4f       	sbci	r23, 0xFF	; 255
    59ee:	8f 4f       	sbci	r24, 0xFF	; 255
    59f0:	9f 4f       	sbci	r25, 0xFF	; 255
    59f2:	af 4f       	sbci	r26, 0xFF	; 255
    59f4:	b1 e0       	ldi	r27, 0x01	; 1
    59f6:	3e d0       	rcall	.+124    	; 0x5a74 <__ultoa_invert+0x9c>
    59f8:	b4 e0       	ldi	r27, 0x04	; 4
    59fa:	3c d0       	rcall	.+120    	; 0x5a74 <__ultoa_invert+0x9c>
    59fc:	67 0f       	add	r22, r23
    59fe:	78 1f       	adc	r23, r24
    5a00:	89 1f       	adc	r24, r25
    5a02:	9a 1f       	adc	r25, r26
    5a04:	a1 1d       	adc	r26, r1
    5a06:	68 0f       	add	r22, r24
    5a08:	79 1f       	adc	r23, r25
    5a0a:	8a 1f       	adc	r24, r26
    5a0c:	91 1d       	adc	r25, r1
    5a0e:	a1 1d       	adc	r26, r1
    5a10:	6a 0f       	add	r22, r26
    5a12:	71 1d       	adc	r23, r1
    5a14:	81 1d       	adc	r24, r1
    5a16:	91 1d       	adc	r25, r1
    5a18:	a1 1d       	adc	r26, r1
    5a1a:	20 d0       	rcall	.+64     	; 0x5a5c <__ultoa_invert+0x84>
    5a1c:	09 f4       	brne	.+2      	; 0x5a20 <__ultoa_invert+0x48>
    5a1e:	68 94       	set
    5a20:	3f 91       	pop	r19
    5a22:	2a e0       	ldi	r18, 0x0A	; 10
    5a24:	26 9f       	mul	r18, r22
    5a26:	11 24       	eor	r1, r1
    5a28:	30 19       	sub	r19, r0
    5a2a:	30 5d       	subi	r19, 0xD0	; 208
    5a2c:	31 93       	st	Z+, r19
    5a2e:	de f6       	brtc	.-74     	; 0x59e6 <__ultoa_invert+0xe>
    5a30:	cf 01       	movw	r24, r30
    5a32:	08 95       	ret
    5a34:	46 2f       	mov	r20, r22
    5a36:	47 70       	andi	r20, 0x07	; 7
    5a38:	40 5d       	subi	r20, 0xD0	; 208
    5a3a:	41 93       	st	Z+, r20
    5a3c:	b3 e0       	ldi	r27, 0x03	; 3
    5a3e:	0f d0       	rcall	.+30     	; 0x5a5e <__ultoa_invert+0x86>
    5a40:	c9 f7       	brne	.-14     	; 0x5a34 <__ultoa_invert+0x5c>
    5a42:	f6 cf       	rjmp	.-20     	; 0x5a30 <__ultoa_invert+0x58>
    5a44:	46 2f       	mov	r20, r22
    5a46:	4f 70       	andi	r20, 0x0F	; 15
    5a48:	40 5d       	subi	r20, 0xD0	; 208
    5a4a:	4a 33       	cpi	r20, 0x3A	; 58
    5a4c:	18 f0       	brcs	.+6      	; 0x5a54 <__ultoa_invert+0x7c>
    5a4e:	49 5d       	subi	r20, 0xD9	; 217
    5a50:	31 fd       	sbrc	r19, 1
    5a52:	40 52       	subi	r20, 0x20	; 32
    5a54:	41 93       	st	Z+, r20
    5a56:	02 d0       	rcall	.+4      	; 0x5a5c <__ultoa_invert+0x84>
    5a58:	a9 f7       	brne	.-22     	; 0x5a44 <__ultoa_invert+0x6c>
    5a5a:	ea cf       	rjmp	.-44     	; 0x5a30 <__ultoa_invert+0x58>
    5a5c:	b4 e0       	ldi	r27, 0x04	; 4
    5a5e:	a6 95       	lsr	r26
    5a60:	97 95       	ror	r25
    5a62:	87 95       	ror	r24
    5a64:	77 95       	ror	r23
    5a66:	67 95       	ror	r22
    5a68:	ba 95       	dec	r27
    5a6a:	c9 f7       	brne	.-14     	; 0x5a5e <__ultoa_invert+0x86>
    5a6c:	00 97       	sbiw	r24, 0x00	; 0
    5a6e:	61 05       	cpc	r22, r1
    5a70:	71 05       	cpc	r23, r1
    5a72:	08 95       	ret
    5a74:	9b 01       	movw	r18, r22
    5a76:	ac 01       	movw	r20, r24
    5a78:	0a 2e       	mov	r0, r26
    5a7a:	06 94       	lsr	r0
    5a7c:	57 95       	ror	r21
    5a7e:	47 95       	ror	r20
    5a80:	37 95       	ror	r19
    5a82:	27 95       	ror	r18
    5a84:	ba 95       	dec	r27
    5a86:	c9 f7       	brne	.-14     	; 0x5a7a <__ultoa_invert+0xa2>
    5a88:	62 0f       	add	r22, r18
    5a8a:	73 1f       	adc	r23, r19
    5a8c:	84 1f       	adc	r24, r20
    5a8e:	95 1f       	adc	r25, r21
    5a90:	a0 1d       	adc	r26, r0
    5a92:	08 95       	ret

00005a94 <__divmodsi4>:
    5a94:	97 fb       	bst	r25, 7
    5a96:	09 2e       	mov	r0, r25
    5a98:	05 26       	eor	r0, r21
    5a9a:	0e d0       	rcall	.+28     	; 0x5ab8 <__divmodsi4_neg1>
    5a9c:	57 fd       	sbrc	r21, 7
    5a9e:	04 d0       	rcall	.+8      	; 0x5aa8 <__divmodsi4_neg2>
    5aa0:	81 dc       	rcall	.-1790   	; 0x53a4 <__udivmodsi4>
    5aa2:	0a d0       	rcall	.+20     	; 0x5ab8 <__divmodsi4_neg1>
    5aa4:	00 1c       	adc	r0, r0
    5aa6:	38 f4       	brcc	.+14     	; 0x5ab6 <__divmodsi4_exit>

00005aa8 <__divmodsi4_neg2>:
    5aa8:	50 95       	com	r21
    5aaa:	40 95       	com	r20
    5aac:	30 95       	com	r19
    5aae:	21 95       	neg	r18
    5ab0:	3f 4f       	sbci	r19, 0xFF	; 255
    5ab2:	4f 4f       	sbci	r20, 0xFF	; 255
    5ab4:	5f 4f       	sbci	r21, 0xFF	; 255

00005ab6 <__divmodsi4_exit>:
    5ab6:	08 95       	ret

00005ab8 <__divmodsi4_neg1>:
    5ab8:	f6 f7       	brtc	.-4      	; 0x5ab6 <__divmodsi4_exit>
    5aba:	90 95       	com	r25
    5abc:	80 95       	com	r24
    5abe:	70 95       	com	r23
    5ac0:	61 95       	neg	r22
    5ac2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ac4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ac6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ac8:	08 95       	ret

00005aca <_exit>:
    5aca:	f8 94       	cli

00005acc <__stop_program>:
    5acc:	ff cf       	rjmp	.-2      	; 0x5acc <__stop_program>
