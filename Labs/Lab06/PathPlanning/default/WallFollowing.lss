
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002bc  00800100  000067c4  00006858  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000067c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000031f  008003bc  008003bc  00006b14  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00006b14  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000455  00000000  00000000  00006b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001454  00000000  00000000  00006fa9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f9  00000000  00000000  000083fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000011c7  00000000  00000000  000086f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000280  00000000  00000000  000098c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c5e  00000000  00000000  00009b40  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ff2  00000000  00000000  0000a79e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 d7 1f 	jmp	0x3fae	; 0x3fae <__vector_4>
      14:	0c 94 00 20 	jmp	0x4000	; 0x4000 <__vector_5>
      18:	0c 94 29 20 	jmp	0x4052	; 0x4052 <__vector_6>
      1c:	0c 94 52 20 	jmp	0x40a4	; 0x40a4 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 b8 1e 	jmp	0x3d70	; 0x3d70 <__vector_9>
      28:	0c 94 e1 1e 	jmp	0x3dc2	; 0x3dc2 <__vector_10>
      2c:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <__vector_11>
      30:	0c 94 85 1f 	jmp	0x3f0a	; 0x3f0a <__vector_12>
      34:	0c 94 33 1f 	jmp	0x3e66	; 0x3e66 <__vector_13>
      38:	0c 94 5c 1f 	jmp	0x3eb8	; 0x3eb8 <__vector_14>
      3c:	0c 94 ae 1f 	jmp	0x3f5c	; 0x3f5c <__vector_15>
      40:	0c 94 3d 1e 	jmp	0x3c7a	; 0x3c7a <__vector_16>
      44:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__vector_17>
      48:	0c 94 8f 1e 	jmp	0x3d1e	; 0x3d1e <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	a2 1b       	sub	r26, r18
      7e:	a5 1b       	sub	r26, r21
      80:	a8 1b       	sub	r26, r24
      82:	ab 1b       	sub	r26, r27
      84:	b4 1b       	sub	r27, r20
      86:	ae 1b       	sub	r26, r30
      88:	b1 1b       	sub	r27, r17
      8a:	b7 1b       	sub	r27, r23
      8c:	ba 1b       	sub	r27, r26
      8e:	bd 1b       	sub	r27, r29
      90:	c0 1b       	sub	r28, r16
      92:	c3 1b       	sub	r28, r19
      94:	c6 1b       	sub	r28, r22
      96:	c9 1b       	sub	r28, r25
      98:	cc 1b       	sub	r28, r28
      9a:	cf 1b       	sub	r28, r31
      9c:	d2 1b       	sub	r29, r18
      9e:	d5 1b       	sub	r29, r21
      a0:	d8 1b       	sub	r29, r24
      a2:	e9 1b       	sub	r30, r25
      a4:	ec 1b       	sub	r30, r28
      a6:	ef 1b       	sub	r30, r31
      a8:	f2 1b       	sub	r31, r18
      aa:	fb 1b       	sub	r31, r27
      ac:	f5 1b       	sub	r31, r21
      ae:	f8 1b       	sub	r31, r24
      b0:	fe 1b       	sub	r31, r30
      b2:	01 1c       	adc	r0, r1
      b4:	04 1c       	adc	r0, r4
      b6:	07 1c       	adc	r0, r7
      b8:	0a 1c       	adc	r0, r10
      ba:	0d 1c       	adc	r0, r13
      bc:	10 1c       	adc	r1, r0
      be:	13 1c       	adc	r1, r3
      c0:	16 1c       	adc	r1, r6
      c2:	19 1c       	adc	r1, r9
      c4:	1c 1c       	adc	r1, r12
      c6:	1f 1c       	adc	r1, r15
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e4 ec       	ldi	r30, 0xC4	; 196
     676:	f7 e6       	ldi	r31, 0x67	; 103
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	ac 3b       	cpi	r26, 0xBC	; 188
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	16 e0       	ldi	r17, 0x06	; 6
     686:	ac eb       	ldi	r26, 0xBC	; 188
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	ab 3d       	cpi	r26, 0xDB	; 219
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 27 16 	call	0x2c4e	; 0x2c4e <main>
     698:	0c 94 e0 33 	jmp	0x67c0	; 0x67c0 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 a1 1d 	call	0x3b42	; 0x3b42 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 e7 1d 	call	0x3bce	; 0x3bce <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 e5 15 	call	0x2bca	; 0x2bca <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 e5 15 	call	0x2bca	; 0x2bca <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 e5 15 	call	0x2bca	; 0x2bca <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 e5 15 	call	0x2bca	; 0x2bca <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 e5 15 	call	0x2bca	; 0x2bca <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 e5 15 	call	0x2bca	; 0x2bca <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 60 04 	sts	0x0460, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 60 04 	sts	0x0460, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 53 1c 	call	0x38a6	; 0x38a6 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 32 33 	call	0x6664	; 0x6664 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 32 33 	call	0x6664	; 0x6664 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 32 33 	call	0x6664	; 0x6664 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <rotateCell>:
* Output Return:	unsigned char
* Overview:		    Rotates the current cell to match the robot's
					orientation, so the robot can recognize gateways
********************************************************************/
unsigned char rotateCell (unsigned char worldCell, unsigned char orientation)
{
     c14:	06 c0       	rjmp	.+12     	; 0xc22 <rotateCell+0xe>
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	while (orient!=0){
		// use the shift array to rotate
		cell = shifted[cell];
     c16:	e8 2f       	mov	r30, r24
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	e3 5c       	subi	r30, 0xC3	; 195
     c1c:	fc 4f       	sbci	r31, 0xFC	; 252
     c1e:	80 81       	ld	r24, Z
		orient--;
     c20:	61 50       	subi	r22, 0x01	; 1
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	while (orient!=0){
     c22:	66 23       	and	r22, r22
     c24:	c1 f7       	brne	.-16     	; 0xc16 <rotateCell+0x2>
		// use the shift array to rotate
		cell = shifted[cell];
		orient--;
	}
	return cell;
}
     c26:	08 95       	ret

00000c28 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
     c30:	60 91 cc 03 	lds	r22, 0x03CC
     c34:	70 91 cd 03 	lds	r23, 0x03CD
     c38:	80 91 ce 03 	lds	r24, 0x03CE
     c3c:	90 91 cf 03 	lds	r25, 0x03CF
     c40:	21 e7       	ldi	r18, 0x71	; 113
     c42:	3d e3       	ldi	r19, 0x3D	; 61
     c44:	46 e8       	ldi	r20, 0x86	; 134
     c46:	51 e4       	ldi	r21, 0x41	; 65
     c48:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
     c4c:	f8 2e       	mov	r15, r24
     c4e:	ff 1c       	adc	r15, r15
     c50:	ff 24       	eor	r15, r15
     c52:	ff 1c       	adc	r15, r15
     c54:	ff 0c       	add	r15, r15
     c56:	ff 0c       	add	r15, r15
     c58:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
     c5a:	60 91 c4 03 	lds	r22, 0x03C4
     c5e:	70 91 c5 03 	lds	r23, 0x03C5
     c62:	80 91 c6 03 	lds	r24, 0x03C6
     c66:	90 91 c7 03 	lds	r25, 0x03C7
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	4a e9       	ldi	r20, 0x9A	; 154
     c70:	51 e4       	ldi	r21, 0x41	; 65
     c72:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
     c76:	08 2f       	mov	r16, r24
     c78:	00 1f       	adc	r16, r16
     c7a:	00 27       	eor	r16, r16
     c7c:	00 1f       	adc	r16, r16
     c7e:	00 0f       	add	r16, r16
     c80:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
     c82:	60 91 d0 03 	lds	r22, 0x03D0
     c86:	70 91 d1 03 	lds	r23, 0x03D1
     c8a:	80 91 d2 03 	lds	r24, 0x03D2
     c8e:	90 91 d3 03 	lds	r25, 0x03D3
     c92:	2d e3       	ldi	r18, 0x3D	; 61
     c94:	3a e0       	ldi	r19, 0x0A	; 10
     c96:	43 ee       	ldi	r20, 0xE3	; 227
     c98:	51 e4       	ldi	r21, 0x41	; 65
     c9a:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
     c9e:	18 2f       	mov	r17, r24
     ca0:	11 1f       	adc	r17, r17
     ca2:	11 27       	eor	r17, r17
     ca4:	11 1f       	adc	r17, r17
     ca6:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
     ca8:	ee 24       	eor	r14, r14
     caa:	60 91 c8 03 	lds	r22, 0x03C8
     cae:	70 91 c9 03 	lds	r23, 0x03C9
     cb2:	80 91 ca 03 	lds	r24, 0x03CA
     cb6:	90 91 cb 03 	lds	r25, 0x03CB
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	4a e9       	ldi	r20, 0x9A	; 154
     cc0:	51 e4       	ldi	r21, 0x41	; 65
     cc2:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	14 f4       	brge	.+4      	; 0xcce <checkWorld+0xa6>
     cca:	ee 24       	eor	r14, r14
     ccc:	e3 94       	inc	r14
     cce:	8f 2d       	mov	r24, r15
     cd0:	8e 0d       	add	r24, r14
     cd2:	80 0f       	add	r24, r16
     cd4:	81 0f       	add	r24, r17
     cd6:	80 93 e2 03 	sts	0x03E2, r24
	nextGateway = moveGateways[currentMoveWorld+1];
     cda:	20 91 df 03 	lds	r18, 0x03DF
     cde:	e2 2f       	mov	r30, r18
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	e2 5b       	subi	r30, 0xB2	; 178
     ce4:	f9 4f       	sbci	r31, 0xF9	; 249
     ce6:	91 81       	ldd	r25, Z+1	; 0x01
     ce8:	90 93 e3 03 	sts	0x03E3, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
     cec:	89 17       	cp	r24, r25
     cee:	19 f4       	brne	.+6      	; 0xcf6 <checkWorld+0xce>
		currentMoveWorld += 1;
     cf0:	2f 5f       	subi	r18, 0xFF	; 255
     cf2:	20 93 df 03 	sts	0x03DF, r18
	}
}
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	08 95       	ret

00000d00 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     d00:	2f 92       	push	r2
     d02:	3f 92       	push	r3
     d04:	4f 92       	push	r4
     d06:	5f 92       	push	r5
     d08:	6f 92       	push	r6
     d0a:	7f 92       	push	r7
     d0c:	8f 92       	push	r8
     d0e:	9f 92       	push	r9
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	64 97       	sbiw	r28, 0x14	; 20
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     d34:	88 23       	and	r24, r24
     d36:	39 f5       	brne	.+78     	; 0xd86 <prefilter+0x86>
     d38:	81 ed       	ldi	r24, 0xD1	; 209
     d3a:	94 e0       	ldi	r25, 0x04	; 4
     d3c:	9c 8b       	std	Y+20, r25	; 0x14
     d3e:	8b 8b       	std	Y+19, r24	; 0x13
     d40:	a6 e4       	ldi	r26, 0x46	; 70
     d42:	b6 e0       	ldi	r27, 0x06	; 6
     d44:	be 83       	std	Y+6, r27	; 0x06
     d46:	ad 83       	std	Y+5, r26	; 0x05
     d48:	ec ec       	ldi	r30, 0xCC	; 204
     d4a:	f5 e0       	ldi	r31, 0x05	; 5
     d4c:	fc 83       	std	Y+4, r31	; 0x04
     d4e:	eb 83       	std	Y+3, r30	; 0x03
     d50:	89 e4       	ldi	r24, 0x49	; 73
     d52:	95 e0       	ldi	r25, 0x05	; 5
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	0f 2e       	mov	r0, r31
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	2f 2e       	mov	r2, r31
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	3f 2e       	mov	r3, r31
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	4f 2e       	mov	r4, r31
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	5f 2e       	mov	r5, r31
     d6a:	f0 2d       	mov	r31, r0
     d6c:	2f 86       	std	Y+15, r2	; 0x0f
     d6e:	38 8a       	std	Y+16, r3	; 0x10
     d70:	49 8a       	std	Y+17, r4	; 0x11
     d72:	5a 8a       	std	Y+18, r5	; 0x12
     d74:	2b 86       	std	Y+11, r2	; 0x0b
     d76:	3c 86       	std	Y+12, r3	; 0x0c
     d78:	4d 86       	std	Y+13, r4	; 0x0d
     d7a:	5e 86       	std	Y+14, r5	; 0x0e
     d7c:	2f 82       	std	Y+7, r2	; 0x07
     d7e:	38 86       	std	Y+8, r3	; 0x08
     d80:	49 86       	std	Y+9, r4	; 0x09
     d82:	5a 86       	std	Y+10, r5	; 0x0a
     d84:	43 c0       	rjmp	.+134    	; 0xe0c <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     d86:	a0 90 c4 03 	lds	r10, 0x03C4
     d8a:	b0 90 c5 03 	lds	r11, 0x03C5
     d8e:	c0 90 c6 03 	lds	r12, 0x03C6
     d92:	d0 90 c7 03 	lds	r13, 0x03C7
			rtIR_old[i] = rtIR;
     d96:	e0 90 c8 03 	lds	r14, 0x03C8
     d9a:	f0 90 c9 03 	lds	r15, 0x03C9
     d9e:	00 91 ca 03 	lds	r16, 0x03CA
     da2:	10 91 cb 03 	lds	r17, 0x03CB
			ftIR_old[i] = ftIR;
     da6:	20 90 cc 03 	lds	r2, 0x03CC
     daa:	30 90 cd 03 	lds	r3, 0x03CD
     dae:	40 90 ce 03 	lds	r4, 0x03CE
     db2:	50 90 cf 03 	lds	r5, 0x03CF
			bkIR_old[i] = bkIR;
     db6:	20 91 d0 03 	lds	r18, 0x03D0
     dba:	30 91 d1 03 	lds	r19, 0x03D1
     dbe:	40 91 d2 03 	lds	r20, 0x03D2
     dc2:	50 91 d3 03 	lds	r21, 0x03D3
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     dca:	fc 01       	movw	r30, r24
     dcc:	ef 59       	subi	r30, 0x9F	; 159
     dce:	fb 4f       	sbci	r31, 0xFB	; 251
     dd0:	a0 82       	st	Z, r10
     dd2:	b1 82       	std	Z+1, r11	; 0x01
     dd4:	c2 82       	std	Z+2, r12	; 0x02
     dd6:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     dd8:	fc 01       	movw	r30, r24
     dda:	ea 52       	subi	r30, 0x2A	; 42
     ddc:	fa 4f       	sbci	r31, 0xFA	; 250
     dde:	e0 82       	st	Z, r14
     de0:	f1 82       	std	Z+1, r15	; 0x01
     de2:	02 83       	std	Z+2, r16	; 0x02
     de4:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     de6:	fc 01       	movw	r30, r24
     de8:	e4 5a       	subi	r30, 0xA4	; 164
     dea:	fa 4f       	sbci	r31, 0xFA	; 250
     dec:	20 82       	st	Z, r2
     dee:	31 82       	std	Z+1, r3	; 0x01
     df0:	42 82       	std	Z+2, r4	; 0x02
     df2:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     df4:	fc 01       	movw	r30, r24
     df6:	e7 52       	subi	r30, 0x27	; 39
     df8:	fb 4f       	sbci	r31, 0xFB	; 251
     dfa:	20 83       	st	Z, r18
     dfc:	31 83       	std	Z+1, r19	; 0x01
     dfe:	42 83       	std	Z+2, r20	; 0x02
     e00:	53 83       	std	Z+3, r21	; 0x03
     e02:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     e04:	88 37       	cpi	r24, 0x78	; 120
     e06:	91 05       	cpc	r25, r1
     e08:	01 f7       	brne	.-64     	; 0xdca <prefilter+0xca>
     e0a:	96 cf       	rjmp	.-212    	; 0xd38 <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     e0c:	ab 89       	ldd	r26, Y+19	; 0x13
     e0e:	bc 89       	ldd	r27, Y+20	; 0x14
     e10:	2d 91       	ld	r18, X+
     e12:	3d 91       	ld	r19, X+
     e14:	4d 91       	ld	r20, X+
     e16:	5c 91       	ld	r21, X
     e18:	13 97       	sbiw	r26, 0x03	; 3
     e1a:	fd 01       	movw	r30, r26
     e1c:	24 83       	std	Z+4, r18	; 0x04
     e1e:	35 83       	std	Z+5, r19	; 0x05
     e20:	46 83       	std	Z+6, r20	; 0x06
     e22:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     e24:	ad 81       	ldd	r26, Y+5	; 0x05
     e26:	be 81       	ldd	r27, Y+6	; 0x06
     e28:	ed 90       	ld	r14, X+
     e2a:	fd 90       	ld	r15, X+
     e2c:	0d 91       	ld	r16, X+
     e2e:	1c 91       	ld	r17, X
     e30:	13 97       	sbiw	r26, 0x03	; 3
     e32:	fd 01       	movw	r30, r26
     e34:	e4 82       	std	Z+4, r14	; 0x04
     e36:	f5 82       	std	Z+5, r15	; 0x05
     e38:	06 83       	std	Z+6, r16	; 0x06
     e3a:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     e3c:	ab 81       	ldd	r26, Y+3	; 0x03
     e3e:	bc 81       	ldd	r27, Y+4	; 0x04
     e40:	ad 90       	ld	r10, X+
     e42:	bd 90       	ld	r11, X+
     e44:	cd 90       	ld	r12, X+
     e46:	dc 90       	ld	r13, X
     e48:	13 97       	sbiw	r26, 0x03	; 3
     e4a:	fd 01       	movw	r30, r26
     e4c:	a4 82       	std	Z+4, r10	; 0x04
     e4e:	b5 82       	std	Z+5, r11	; 0x05
     e50:	c6 82       	std	Z+6, r12	; 0x06
     e52:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     e54:	a9 81       	ldd	r26, Y+1	; 0x01
     e56:	ba 81       	ldd	r27, Y+2	; 0x02
     e58:	6d 90       	ld	r6, X+
     e5a:	7d 90       	ld	r7, X+
     e5c:	8d 90       	ld	r8, X+
     e5e:	9c 90       	ld	r9, X
     e60:	13 97       	sbiw	r26, 0x03	; 3
     e62:	fd 01       	movw	r30, r26
     e64:	64 82       	std	Z+4, r6	; 0x04
     e66:	75 82       	std	Z+5, r7	; 0x05
     e68:	86 82       	std	Z+6, r8	; 0x06
     e6a:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     e6c:	c2 01       	movw	r24, r4
     e6e:	b1 01       	movw	r22, r2
     e70:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
     e74:	1b 01       	movw	r2, r22
     e76:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     e78:	6f 85       	ldd	r22, Y+15	; 0x0f
     e7a:	78 89       	ldd	r23, Y+16	; 0x10
     e7c:	89 89       	ldd	r24, Y+17	; 0x11
     e7e:	9a 89       	ldd	r25, Y+18	; 0x12
     e80:	a8 01       	movw	r20, r16
     e82:	97 01       	movw	r18, r14
     e84:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
     e88:	6f 87       	std	Y+15, r22	; 0x0f
     e8a:	78 8b       	std	Y+16, r23	; 0x10
     e8c:	89 8b       	std	Y+17, r24	; 0x11
     e8e:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     e90:	6b 85       	ldd	r22, Y+11	; 0x0b
     e92:	7c 85       	ldd	r23, Y+12	; 0x0c
     e94:	8d 85       	ldd	r24, Y+13	; 0x0d
     e96:	9e 85       	ldd	r25, Y+14	; 0x0e
     e98:	a6 01       	movw	r20, r12
     e9a:	95 01       	movw	r18, r10
     e9c:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
     ea0:	6b 87       	std	Y+11, r22	; 0x0b
     ea2:	7c 87       	std	Y+12, r23	; 0x0c
     ea4:	8d 87       	std	Y+13, r24	; 0x0d
     ea6:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	a4 01       	movw	r20, r8
     eb2:	93 01       	movw	r18, r6
     eb4:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
     eb8:	6f 83       	std	Y+7, r22	; 0x07
     eba:	78 87       	std	Y+8, r23	; 0x08
     ebc:	89 87       	std	Y+9, r24	; 0x09
     ebe:	9a 87       	std	Y+10, r25	; 0x0a
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	04 97       	sbiw	r24, 0x04	; 4
     ec6:	9c 8b       	std	Y+20, r25	; 0x14
     ec8:	8b 8b       	std	Y+19, r24	; 0x13
     eca:	ad 81       	ldd	r26, Y+5	; 0x05
     ecc:	be 81       	ldd	r27, Y+6	; 0x06
     ece:	14 97       	sbiw	r26, 0x04	; 4
     ed0:	be 83       	std	Y+6, r27	; 0x06
     ed2:	ad 83       	std	Y+5, r26	; 0x05
     ed4:	eb 81       	ldd	r30, Y+3	; 0x03
     ed6:	fc 81       	ldd	r31, Y+4	; 0x04
     ed8:	34 97       	sbiw	r30, 0x04	; 4
     eda:	fc 83       	std	Y+4, r31	; 0x04
     edc:	eb 83       	std	Y+3, r30	; 0x03
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	04 97       	sbiw	r24, 0x04	; 4
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     ee8:	ab 89       	ldd	r26, Y+19	; 0x13
     eea:	bc 89       	ldd	r27, Y+20	; 0x14
     eec:	a9 55       	subi	r26, 0x59	; 89
     eee:	b4 40       	sbci	r27, 0x04	; 4
     ef0:	09 f0       	breq	.+2      	; 0xef4 <prefilter+0x1f4>
     ef2:	8c cf       	rjmp	.-232    	; 0xe0c <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     ef4:	80 91 c4 03 	lds	r24, 0x03C4
     ef8:	90 91 c5 03 	lds	r25, 0x03C5
     efc:	a0 91 c6 03 	lds	r26, 0x03C6
     f00:	b0 91 c7 03 	lds	r27, 0x03C7
     f04:	eb 89       	ldd	r30, Y+19	; 0x13
     f06:	fc 89       	ldd	r31, Y+20	; 0x14
     f08:	80 87       	std	Z+8, r24	; 0x08
     f0a:	91 87       	std	Z+9, r25	; 0x09
     f0c:	a2 87       	std	Z+10, r26	; 0x0a
     f0e:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     f10:	80 91 c8 03 	lds	r24, 0x03C8
     f14:	90 91 c9 03 	lds	r25, 0x03C9
     f18:	a0 91 ca 03 	lds	r26, 0x03CA
     f1c:	b0 91 cb 03 	lds	r27, 0x03CB
     f20:	80 93 d6 05 	sts	0x05D6, r24
     f24:	90 93 d7 05 	sts	0x05D7, r25
     f28:	a0 93 d8 05 	sts	0x05D8, r26
     f2c:	b0 93 d9 05 	sts	0x05D9, r27
	ftIR_old[0] = ftIR;
     f30:	80 91 cc 03 	lds	r24, 0x03CC
     f34:	90 91 cd 03 	lds	r25, 0x03CD
     f38:	a0 91 ce 03 	lds	r26, 0x03CE
     f3c:	b0 91 cf 03 	lds	r27, 0x03CF
     f40:	80 93 5c 05 	sts	0x055C, r24
     f44:	90 93 5d 05 	sts	0x055D, r25
     f48:	a0 93 5e 05 	sts	0x055E, r26
     f4c:	b0 93 5f 05 	sts	0x055F, r27
	bkIR_old[0] = bkIR;
     f50:	80 91 d0 03 	lds	r24, 0x03D0
     f54:	90 91 d1 03 	lds	r25, 0x03D1
     f58:	a0 91 d2 03 	lds	r26, 0x03D2
     f5c:	b0 91 d3 03 	lds	r27, 0x03D3
     f60:	80 93 d9 04 	sts	0x04D9, r24
     f64:	90 93 da 04 	sts	0x04DA, r25
     f68:	a0 93 db 04 	sts	0x04DB, r26
     f6c:	b0 93 dc 04 	sts	0x04DC, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     f70:	c2 01       	movw	r24, r4
     f72:	b1 01       	movw	r22, r2
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 ef       	ldi	r20, 0xF0	; 240
     f7a:	51 e4       	ldi	r21, 0x41	; 65
     f7c:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
     f80:	60 93 c4 03 	sts	0x03C4, r22
     f84:	70 93 c5 03 	sts	0x03C5, r23
     f88:	80 93 c6 03 	sts	0x03C6, r24
     f8c:	90 93 c7 03 	sts	0x03C7, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     f90:	6f 85       	ldd	r22, Y+15	; 0x0f
     f92:	78 89       	ldd	r23, Y+16	; 0x10
     f94:	89 89       	ldd	r24, Y+17	; 0x11
     f96:	9a 89       	ldd	r25, Y+18	; 0x12
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 ef       	ldi	r20, 0xF0	; 240
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
     fa4:	60 93 c8 03 	sts	0x03C8, r22
     fa8:	70 93 c9 03 	sts	0x03C9, r23
     fac:	80 93 ca 03 	sts	0x03CA, r24
     fb0:	90 93 cb 03 	sts	0x03CB, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fba:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 ef       	ldi	r20, 0xF0	; 240
     fc2:	51 e4       	ldi	r21, 0x41	; 65
     fc4:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
     fc8:	60 93 cc 03 	sts	0x03CC, r22
     fcc:	70 93 cd 03 	sts	0x03CD, r23
     fd0:	80 93 ce 03 	sts	0x03CE, r24
     fd4:	90 93 cf 03 	sts	0x03CF, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     fd8:	6f 81       	ldd	r22, Y+7	; 0x07
     fda:	78 85       	ldd	r23, Y+8	; 0x08
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 ef       	ldi	r20, 0xF0	; 240
     fe6:	51 e4       	ldi	r21, 0x41	; 65
     fe8:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
     fec:	60 93 d0 03 	sts	0x03D0, r22
     ff0:	70 93 d1 03 	sts	0x03D1, r23
     ff4:	80 93 d2 03 	sts	0x03D2, r24
     ff8:	90 93 d3 03 	sts	0x03D3, r25
}
     ffc:	64 96       	adiw	r28, 0x14	; 20
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	9f 90       	pop	r9
    101e:	8f 90       	pop	r8
    1020:	7f 90       	pop	r7
    1022:	6f 90       	pop	r6
    1024:	5f 90       	pop	r5
    1026:	4f 90       	pop	r4
    1028:	3f 90       	pop	r3
    102a:	2f 90       	pop	r2
    102c:	08 95       	ret

0000102e <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
    102e:	6f 92       	push	r6
    1030:	7f 92       	push	r7
    1032:	8f 92       	push	r8
    1034:	9f 92       	push	r9
    1036:	af 92       	push	r10
    1038:	bf 92       	push	r11
    103a:	cf 92       	push	r12
    103c:	df 92       	push	r13
    103e:	ef 92       	push	r14
    1040:	ff 92       	push	r15
    1042:	0f 93       	push	r16
    1044:	1f 93       	push	r17
    1046:	3b 01       	movw	r6, r22
    1048:	4c 01       	movw	r8, r24
	// Reset the integrator error if specified
	if(reset){
    104a:	44 23       	and	r20, r20
    104c:	61 f0       	breq	.+24     	; 0x1066 <pidController+0x38>
		Ierror = 0;
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 e0       	ldi	r26, 0x00	; 0
    1054:	b0 e0       	ldi	r27, 0x00	; 0
    1056:	80 93 bc 03 	sts	0x03BC, r24
    105a:	90 93 bd 03 	sts	0x03BD, r25
    105e:	a0 93 be 03 	sts	0x03BE, r26
    1062:	b0 93 bf 03 	sts	0x03BF, r27
	}
	// At the current error to the running sum
	Ierror += error;
    1066:	c4 01       	movw	r24, r8
    1068:	b3 01       	movw	r22, r6
    106a:	20 91 bc 03 	lds	r18, 0x03BC
    106e:	30 91 bd 03 	lds	r19, 0x03BD
    1072:	40 91 be 03 	lds	r20, 0x03BE
    1076:	50 91 bf 03 	lds	r21, 0x03BF
    107a:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    107e:	5b 01       	movw	r10, r22
    1080:	6c 01       	movw	r12, r24
    1082:	60 93 bc 03 	sts	0x03BC, r22
    1086:	70 93 bd 03 	sts	0x03BD, r23
    108a:	80 93 be 03 	sts	0x03BE, r24
    108e:	90 93 bf 03 	sts	0x03BF, r25
    1092:	c4 01       	movw	r24, r8
    1094:	b3 01       	movw	r22, r6
    1096:	a4 01       	movw	r20, r8
    1098:	93 01       	movw	r18, r6
    109a:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    109e:	7b 01       	movw	r14, r22
    10a0:	8c 01       	movw	r16, r24
    10a2:	c4 01       	movw	r24, r8
    10a4:	b3 01       	movw	r22, r6
    10a6:	20 91 c0 03 	lds	r18, 0x03C0
    10aa:	30 91 c1 03 	lds	r19, 0x03C1
    10ae:	40 91 c2 03 	lds	r20, 0x03C2
    10b2:	50 91 c3 03 	lds	r21, 0x03C3
    10b6:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__subsf3>
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	40 e0       	ldi	r20, 0x00	; 0
    10c0:	5f e3       	ldi	r21, 0x3F	; 63
    10c2:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    10c6:	9b 01       	movw	r18, r22
    10c8:	ac 01       	movw	r20, r24
    10ca:	c8 01       	movw	r24, r16
    10cc:	b7 01       	movw	r22, r14
    10ce:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    10d2:	7b 01       	movw	r14, r22
    10d4:	8c 01       	movw	r16, r24
    10d6:	c6 01       	movw	r24, r12
    10d8:	b5 01       	movw	r22, r10
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e0       	ldi	r20, 0x00	; 0
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    10e6:	9b 01       	movw	r18, r22
    10e8:	ac 01       	movw	r20, r24
    10ea:	c8 01       	movw	r24, r16
    10ec:	b7 01       	movw	r22, r14
    10ee:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	ff 90       	pop	r15
    10f8:	ef 90       	pop	r14
    10fa:	df 90       	pop	r13
    10fc:	cf 90       	pop	r12
    10fe:	bf 90       	pop	r11
    1100:	af 90       	pop	r10
    1102:	9f 90       	pop	r9
    1104:	8f 90       	pop	r8
    1106:	7f 90       	pop	r7
    1108:	6f 90       	pop	r6
    110a:	08 95       	ret

0000110c <check_threshhold>:
* Output Return:	char
* Overview:			This check the IR values to thresholds
********************************************************************/

char check_threshhold(float F, float B, float L, float R)
{
    110c:	2f 92       	push	r2
    110e:	6f 92       	push	r6
    1110:	7f 92       	push	r7
    1112:	8f 92       	push	r8
    1114:	9f 92       	push	r9
    1116:	af 92       	push	r10
    1118:	bf 92       	push	r11
    111a:	cf 92       	push	r12
    111c:	df 92       	push	r13
    111e:	ef 92       	push	r14
    1120:	ff 92       	push	r15
    1122:	0f 93       	push	r16
    1124:	1f 93       	push	r17
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	00 d0       	rcall	.+0      	; 0x112c <check_threshhold+0x20>
    112c:	00 d0       	rcall	.+0      	; 0x112e <check_threshhold+0x22>
    112e:	cd b7       	in	r28, 0x3d	; 61
    1130:	de b7       	in	r29, 0x3e	; 62
    1132:	69 83       	std	Y+1, r22	; 0x01
    1134:	7a 83       	std	Y+2, r23	; 0x02
    1136:	8b 83       	std	Y+3, r24	; 0x03
    1138:	9c 83       	std	Y+4, r25	; 0x04
	char check = 0;
	check += 0b00000001*(ftIR < F);
    113a:	60 90 cc 03 	lds	r6, 0x03CC
    113e:	70 90 cd 03 	lds	r7, 0x03CD
    1142:	80 90 ce 03 	lds	r8, 0x03CE
    1146:	90 90 cf 03 	lds	r9, 0x03CF
	check += 0b00000010*(bkIR < B);
    114a:	60 91 d0 03 	lds	r22, 0x03D0
    114e:	70 91 d1 03 	lds	r23, 0x03D1
    1152:	80 91 d2 03 	lds	r24, 0x03D2
    1156:	90 91 d3 03 	lds	r25, 0x03D3
    115a:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    115e:	28 2e       	mov	r2, r24
    1160:	22 1c       	adc	r2, r2
    1162:	22 24       	eor	r2, r2
    1164:	22 1c       	adc	r2, r2
    1166:	22 0c       	add	r2, r2
	check += 0b00000100*(ltIR < L);
    1168:	60 91 c4 03 	lds	r22, 0x03C4
    116c:	70 91 c5 03 	lds	r23, 0x03C5
    1170:	80 91 c6 03 	lds	r24, 0x03C6
    1174:	90 91 c7 03 	lds	r25, 0x03C7
    1178:	a8 01       	movw	r20, r16
    117a:	97 01       	movw	r18, r14
    117c:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    1180:	08 2f       	mov	r16, r24
    1182:	00 1f       	adc	r16, r16
    1184:	00 27       	eor	r16, r16
    1186:	00 1f       	adc	r16, r16
    1188:	00 0f       	add	r16, r16
    118a:	00 0f       	add	r16, r16
	check += 0b00001000*(rtIR < R);
    118c:	60 91 c8 03 	lds	r22, 0x03C8
    1190:	70 91 c9 03 	lds	r23, 0x03C9
    1194:	80 91 ca 03 	lds	r24, 0x03CA
    1198:	90 91 cb 03 	lds	r25, 0x03CB
    119c:	a6 01       	movw	r20, r12
    119e:	95 01       	movw	r18, r10
    11a0:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    11a4:	18 2f       	mov	r17, r24
    11a6:	11 1f       	adc	r17, r17
    11a8:	11 27       	eor	r17, r17
    11aa:	11 1f       	adc	r17, r17
    11ac:	11 0f       	add	r17, r17
    11ae:	11 0f       	add	r17, r17
    11b0:	11 0f       	add	r17, r17

char check_threshhold(float F, float B, float L, float R)
{
	char check = 0;
	check += 0b00000001*(ftIR < F);
	check += 0b00000010*(bkIR < B);
    11b2:	ff 24       	eor	r15, r15
    11b4:	c4 01       	movw	r24, r8
    11b6:	b3 01       	movw	r22, r6
    11b8:	29 81       	ldd	r18, Y+1	; 0x01
    11ba:	3a 81       	ldd	r19, Y+2	; 0x02
    11bc:	4b 81       	ldd	r20, Y+3	; 0x03
    11be:	5c 81       	ldd	r21, Y+4	; 0x04
    11c0:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    11c4:	88 23       	and	r24, r24
    11c6:	14 f4       	brge	.+4      	; 0x11cc <check_threshhold+0xc0>
    11c8:	ff 24       	eor	r15, r15
    11ca:	f3 94       	inc	r15
    11cc:	2f 0c       	add	r2, r15
	check += 0b00000100*(ltIR < L);
    11ce:	20 0e       	add	r2, r16
	check += 0b00001000*(rtIR < R);
	return check;	
}
    11d0:	82 2d       	mov	r24, r2
    11d2:	81 0f       	add	r24, r17
    11d4:	0f 90       	pop	r0
    11d6:	0f 90       	pop	r0
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	cf 91       	pop	r28
    11de:	df 91       	pop	r29
    11e0:	1f 91       	pop	r17
    11e2:	0f 91       	pop	r16
    11e4:	ff 90       	pop	r15
    11e6:	ef 90       	pop	r14
    11e8:	df 90       	pop	r13
    11ea:	cf 90       	pop	r12
    11ec:	bf 90       	pop	r11
    11ee:	af 90       	pop	r10
    11f0:	9f 90       	pop	r9
    11f2:	8f 90       	pop	r8
    11f4:	7f 90       	pop	r7
    11f6:	6f 90       	pop	r6
    11f8:	2f 90       	pop	r2
    11fa:	08 95       	ret

000011fc <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    11fc:	2f 92       	push	r2
    11fe:	3f 92       	push	r3
    1200:	4f 92       	push	r4
    1202:	5f 92       	push	r5
    1204:	6f 92       	push	r6
    1206:	7f 92       	push	r7
    1208:	8f 92       	push	r8
    120a:	9f 92       	push	r9
    120c:	af 92       	push	r10
    120e:	bf 92       	push	r11
    1210:	cf 92       	push	r12
    1212:	df 92       	push	r13
    1214:	ef 92       	push	r14
    1216:	ff 92       	push	r15
    1218:	0f 93       	push	r16
    121a:	1f 93       	push	r17
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	a0 97       	sbiw	r28, 0x20	; 32
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	2b 01       	movw	r4, r22
    1232:	3c 01       	movw	r6, r24
    1234:	2d 83       	std	Y+5, r18	; 0x05
    1236:	3e 83       	std	Y+6, r19	; 0x06
    1238:	4f 83       	std	Y+7, r20	; 0x07
    123a:	58 87       	std	Y+8, r21	; 0x08
    123c:	e9 86       	std	Y+9, r14	; 0x09
    123e:	fa 86       	std	Y+10, r15	; 0x0a
    1240:	0b 87       	std	Y+11, r16	; 0x0b
    1242:	1c 87       	std	Y+12, r17	; 0x0c
    1244:	ad 86       	std	Y+13, r10	; 0x0d
    1246:	be 86       	std	Y+14, r11	; 0x0e
    1248:	cf 86       	std	Y+15, r12	; 0x0f
    124a:	d8 8a       	std	Y+16, r13	; 0x10
    124c:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    124e:	33 24       	eor	r3, r3
    1250:	ca 01       	movw	r24, r20
    1252:	b9 01       	movw	r22, r18
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e0       	ldi	r20, 0x00	; 0
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	0e 94 9b 2a 	call	0x5536	; 0x5536 <__gesf2>
    1260:	18 16       	cp	r1, r24
    1262:	14 f4       	brge	.+4      	; 0x1268 <move_arc_stnb+0x6c>
    1264:	33 24       	eor	r3, r3
    1266:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1268:	6d 81       	ldd	r22, Y+5	; 0x05
    126a:	7e 81       	ldd	r23, Y+6	; 0x06
    126c:	8f 81       	ldd	r24, Y+7	; 0x07
    126e:	98 85       	ldd	r25, Y+8	; 0x08
    1270:	2c ed       	ldi	r18, 0xDC	; 220
    1272:	38 eb       	ldi	r19, 0xB8	; 184
    1274:	48 e0       	ldi	r20, 0x08	; 8
    1276:	5e e3       	ldi	r21, 0x3E	; 62
    1278:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    127c:	0e 94 b8 29 	call	0x5370	; 0x5370 <__fixsfsi>
    1280:	9b 01       	movw	r18, r22
    1282:	77 ff       	sbrs	r23, 7
    1284:	03 c0       	rjmp	.+6      	; 0x128c <move_arc_stnb+0x90>
    1286:	30 95       	com	r19
    1288:	21 95       	neg	r18
    128a:	3f 4f       	sbci	r19, 0xFF	; 255
    128c:	b9 01       	movw	r22, r18
    128e:	88 27       	eor	r24, r24
    1290:	77 fd       	sbrc	r23, 7
    1292:	80 95       	com	r24
    1294:	98 2f       	mov	r25, r24
    1296:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__floatsisf>
    129a:	69 83       	std	Y+1, r22	; 0x01
    129c:	7a 83       	std	Y+2, r23	; 0x02
    129e:	8b 83       	std	Y+3, r24	; 0x03
    12a0:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    12a2:	69 85       	ldd	r22, Y+9	; 0x09
    12a4:	7a 85       	ldd	r23, Y+10	; 0x0a
    12a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    12a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    12aa:	2c ed       	ldi	r18, 0xDC	; 220
    12ac:	38 eb       	ldi	r19, 0xB8	; 184
    12ae:	48 e0       	ldi	r20, 0x08	; 8
    12b0:	5e e3       	ldi	r21, 0x3E	; 62
    12b2:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    12b6:	0e 94 b8 29 	call	0x5370	; 0x5370 <__fixsfsi>
    12ba:	9b 01       	movw	r18, r22
    12bc:	77 ff       	sbrs	r23, 7
    12be:	03 c0       	rjmp	.+6      	; 0x12c6 <move_arc_stnb+0xca>
    12c0:	30 95       	com	r19
    12c2:	21 95       	neg	r18
    12c4:	3f 4f       	sbci	r19, 0xFF	; 255
    12c6:	b9 01       	movw	r22, r18
    12c8:	88 27       	eor	r24, r24
    12ca:	77 fd       	sbrc	r23, 7
    12cc:	80 95       	com	r24
    12ce:	98 2f       	mov	r25, r24
    12d0:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__floatsisf>
    12d4:	4b 01       	movw	r8, r22
    12d6:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    12d8:	6d 85       	ldd	r22, Y+13	; 0x0d
    12da:	7e 85       	ldd	r23, Y+14	; 0x0e
    12dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12de:	98 89       	ldd	r25, Y+16	; 0x10
    12e0:	2c ed       	ldi	r18, 0xDC	; 220
    12e2:	38 eb       	ldi	r19, 0xB8	; 184
    12e4:	48 e0       	ldi	r20, 0x08	; 8
    12e6:	5e e3       	ldi	r21, 0x3E	; 62
    12e8:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    12ec:	0e 94 b8 29 	call	0x5370	; 0x5370 <__fixsfsi>
    12f0:	9b 01       	movw	r18, r22
    12f2:	77 ff       	sbrs	r23, 7
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <move_arc_stnb+0x100>
    12f6:	30 95       	com	r19
    12f8:	21 95       	neg	r18
    12fa:	3f 4f       	sbci	r19, 0xFF	; 255
    12fc:	b9 01       	movw	r22, r18
    12fe:	88 27       	eor	r24, r24
    1300:	77 fd       	sbrc	r23, 7
    1302:	80 95       	com	r24
    1304:	98 2f       	mov	r25, r24
    1306:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__floatsisf>
    130a:	6b 01       	movw	r12, r22
    130c:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    130e:	c3 01       	movw	r24, r6
    1310:	b2 01       	movw	r22, r4
    1312:	20 e0       	ldi	r18, 0x00	; 0
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	40 e0       	ldi	r20, 0x00	; 0
    1318:	5f e4       	ldi	r21, 0x4F	; 79
    131a:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    131e:	88 23       	and	r24, r24
    1320:	a1 f5       	brne	.+104    	; 0x138a <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1322:	69 81       	ldd	r22, Y+1	; 0x01
    1324:	7a 81       	ldd	r23, Y+2	; 0x02
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	9c 81       	ldd	r25, Y+4	; 0x04
    132a:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    132e:	2b 01       	movw	r4, r22
    1330:	3c 01       	movw	r6, r24
    1332:	c5 01       	movw	r24, r10
    1334:	b4 01       	movw	r22, r8
    1336:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    133a:	4b 01       	movw	r8, r22
    133c:	5c 01       	movw	r10, r24
    133e:	c7 01       	movw	r24, r14
    1340:	b6 01       	movw	r22, r12
    1342:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1346:	6b 01       	movw	r12, r22
    1348:	7c 01       	movw	r14, r24
    134a:	2d b7       	in	r18, 0x3d	; 61
    134c:	3e b7       	in	r19, 0x3e	; 62
    134e:	29 50       	subi	r18, 0x09	; 9
    1350:	30 40       	sbci	r19, 0x00	; 0
    1352:	0f b6       	in	r0, 0x3f	; 63
    1354:	f8 94       	cli
    1356:	3e bf       	out	0x3e, r19	; 62
    1358:	0f be       	out	0x3f, r0	; 63
    135a:	2d bf       	out	0x3d, r18	; 61
    135c:	ed b7       	in	r30, 0x3d	; 61
    135e:	fe b7       	in	r31, 0x3e	; 62
    1360:	31 96       	adiw	r30, 0x01	; 1
    1362:	ad b7       	in	r26, 0x3d	; 61
    1364:	be b7       	in	r27, 0x3e	; 62
    1366:	12 96       	adiw	r26, 0x02	; 2
    1368:	5c 92       	st	X, r5
    136a:	4e 92       	st	-X, r4
    136c:	11 97       	sbiw	r26, 0x01	; 1
    136e:	93 82       	std	Z+3, r9	; 0x03
    1370:	82 82       	std	Z+2, r8	; 0x02
    1372:	75 83       	std	Z+5, r23	; 0x05
    1374:	64 83       	std	Z+4, r22	; 0x04
    1376:	26 82       	std	Z+6, r2	; 0x06
    1378:	10 86       	std	Z+8, r1	; 0x08
    137a:	17 82       	std	Z+7, r1	; 0x07
    137c:	81 e0       	ldi	r24, 0x01	; 1
    137e:	62 e0       	ldi	r22, 0x02	; 2
    1380:	43 2d       	mov	r20, r3
    1382:	92 01       	movw	r18, r4
    1384:	84 01       	movw	r16, r8
    1386:	76 01       	movw	r14, r12
    1388:	c1 c1       	rjmp	.+898    	; 0x170c <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    138a:	c3 01       	movw	r24, r6
    138c:	b2 01       	movw	r22, r4
    138e:	20 e0       	ldi	r18, 0x00	; 0
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    139a:	88 23       	and	r24, r24
    139c:	e9 f5       	brne	.+122    	; 0x1418 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    139e:	69 81       	ldd	r22, Y+1	; 0x01
    13a0:	7a 81       	ldd	r23, Y+2	; 0x02
    13a2:	8b 81       	ldd	r24, Y+3	; 0x03
    13a4:	9c 81       	ldd	r25, Y+4	; 0x04
    13a6:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    13aa:	3b 01       	movw	r6, r22
    13ac:	c5 01       	movw	r24, r10
    13ae:	b4 01       	movw	r22, r8
    13b0:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    13b4:	8b 01       	movw	r16, r22
    13b6:	c7 01       	movw	r24, r14
    13b8:	b6 01       	movw	r22, r12
    13ba:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    13be:	7b 01       	movw	r14, r22
    13c0:	2d b7       	in	r18, 0x3d	; 61
    13c2:	3e b7       	in	r19, 0x3e	; 62
    13c4:	29 50       	subi	r18, 0x09	; 9
    13c6:	30 40       	sbci	r19, 0x00	; 0
    13c8:	0f b6       	in	r0, 0x3f	; 63
    13ca:	f8 94       	cli
    13cc:	3e bf       	out	0x3e, r19	; 62
    13ce:	0f be       	out	0x3f, r0	; 63
    13d0:	2d bf       	out	0x3d, r18	; 61
    13d2:	ed b7       	in	r30, 0x3d	; 61
    13d4:	fe b7       	in	r31, 0x3e	; 62
    13d6:	31 96       	adiw	r30, 0x01	; 1
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	33 20       	and	r3, r3
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <move_arc_stnb+0x1e4>
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	71 82       	std	Z+1, r7	; 0x01
    13e2:	60 82       	st	Z, r6
    13e4:	13 83       	std	Z+3, r17	; 0x03
    13e6:	02 83       	std	Z+2, r16	; 0x02
    13e8:	f5 82       	std	Z+5, r15	; 0x05
    13ea:	e4 82       	std	Z+4, r14	; 0x04
    13ec:	26 82       	std	Z+6, r2	; 0x06
    13ee:	10 86       	std	Z+8, r1	; 0x08
    13f0:	17 82       	std	Z+7, r1	; 0x07
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	62 e0       	ldi	r22, 0x02	; 2
    13f6:	93 01       	movw	r18, r6
    13f8:	c2 2c       	mov	r12, r2
    13fa:	aa 24       	eor	r10, r10
    13fc:	bb 24       	eor	r11, r11
    13fe:	83 2c       	mov	r8, r3
    1400:	0e 94 11 19 	call	0x3222	; 0x3222 <STEPPER_move>
    1404:	81 e0       	ldi	r24, 0x01	; 1
    1406:	ad b7       	in	r26, 0x3d	; 61
    1408:	be b7       	in	r27, 0x3e	; 62
    140a:	19 96       	adiw	r26, 0x09	; 9
    140c:	0f b6       	in	r0, 0x3f	; 63
    140e:	f8 94       	cli
    1410:	be bf       	out	0x3e, r27	; 62
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	ad bf       	out	0x3d, r26	; 61
    1416:	89 c1       	rjmp	.+786    	; 0x172a <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1418:	c3 01       	movw	r24, r6
    141a:	b2 01       	movw	r22, r4
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	40 e0       	ldi	r20, 0x00	; 0
    1422:	50 e0       	ldi	r21, 0x00	; 0
    1424:	0e 94 9b 2a 	call	0x5536	; 0x5536 <__gesf2>
    1428:	18 16       	cp	r1, r24
    142a:	0c f0       	brlt	.+2      	; 0x142e <move_arc_stnb+0x232>
    142c:	b1 c0       	rjmp	.+354    	; 0x1590 <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    142e:	66 e6       	ldi	r22, 0x66	; 102
    1430:	76 e6       	ldi	r23, 0x66	; 102
    1432:	8a ea       	ldi	r24, 0xAA	; 170
    1434:	91 ec       	ldi	r25, 0xC1	; 193
    1436:	a3 01       	movw	r20, r6
    1438:	92 01       	movw	r18, r4
    143a:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    144a:	7b 01       	movw	r14, r22
    144c:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    144e:	66 e6       	ldi	r22, 0x66	; 102
    1450:	76 e6       	ldi	r23, 0x66	; 102
    1452:	8a ea       	ldi	r24, 0xAA	; 170
    1454:	91 e4       	ldi	r25, 0x41	; 65
    1456:	a3 01       	movw	r20, r6
    1458:	92 01       	movw	r18, r4
    145a:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    145e:	20 e0       	ldi	r18, 0x00	; 0
    1460:	30 e0       	ldi	r19, 0x00	; 0
    1462:	40 e8       	ldi	r20, 0x80	; 128
    1464:	5f e3       	ldi	r21, 0x3F	; 63
    1466:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    146a:	5b 01       	movw	r10, r22
    146c:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    146e:	ed b7       	in	r30, 0x3d	; 61
    1470:	fe b7       	in	r31, 0x3e	; 62
    1472:	39 97       	sbiw	r30, 0x09	; 9
    1474:	0f b6       	in	r0, 0x3f	; 63
    1476:	f8 94       	cli
    1478:	fe bf       	out	0x3e, r31	; 62
    147a:	0f be       	out	0x3f, r0	; 63
    147c:	ed bf       	out	0x3d, r30	; 61
    147e:	8d b6       	in	r8, 0x3d	; 61
    1480:	9e b6       	in	r9, 0x3e	; 62
    1482:	08 94       	sec
    1484:	81 1c       	adc	r8, r1
    1486:	91 1c       	adc	r9, r1
    1488:	6d 81       	ldd	r22, Y+5	; 0x05
    148a:	7e 81       	ldd	r23, Y+6	; 0x06
    148c:	8f 81       	ldd	r24, Y+7	; 0x07
    148e:	98 85       	ldd	r25, Y+8	; 0x08
    1490:	a8 01       	movw	r20, r16
    1492:	97 01       	movw	r18, r14
    1494:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1498:	2c ed       	ldi	r18, 0xDC	; 220
    149a:	38 eb       	ldi	r19, 0xB8	; 184
    149c:	48 e0       	ldi	r20, 0x08	; 8
    149e:	5e e3       	ldi	r21, 0x3E	; 62
    14a0:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    14a4:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    14a8:	69 8b       	std	Y+17, r22	; 0x11
    14aa:	7a 8b       	std	Y+18, r23	; 0x12
    14ac:	8b 8b       	std	Y+19, r24	; 0x13
    14ae:	9c 8b       	std	Y+20, r25	; 0x14
    14b0:	69 85       	ldd	r22, Y+9	; 0x09
    14b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    14b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    14b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    14b8:	a8 01       	movw	r20, r16
    14ba:	97 01       	movw	r18, r14
    14bc:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    14c0:	2c ed       	ldi	r18, 0xDC	; 220
    14c2:	38 eb       	ldi	r19, 0xB8	; 184
    14c4:	48 e0       	ldi	r20, 0x08	; 8
    14c6:	5e e3       	ldi	r21, 0x3E	; 62
    14c8:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    14cc:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    14d0:	6d 8b       	std	Y+21, r22	; 0x15
    14d2:	7e 8b       	std	Y+22, r23	; 0x16
    14d4:	8f 8b       	std	Y+23, r24	; 0x17
    14d6:	98 8f       	std	Y+24, r25	; 0x18
    14d8:	6d 85       	ldd	r22, Y+13	; 0x0d
    14da:	7e 85       	ldd	r23, Y+14	; 0x0e
    14dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14de:	98 89       	ldd	r25, Y+16	; 0x10
    14e0:	a8 01       	movw	r20, r16
    14e2:	97 01       	movw	r18, r14
    14e4:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    14e8:	2c ed       	ldi	r18, 0xDC	; 220
    14ea:	38 eb       	ldi	r19, 0xB8	; 184
    14ec:	48 e0       	ldi	r20, 0x08	; 8
    14ee:	5e e3       	ldi	r21, 0x3E	; 62
    14f0:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    14f4:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    14f8:	2b 01       	movw	r4, r22
    14fa:	3c 01       	movw	r6, r24
    14fc:	6d 81       	ldd	r22, Y+5	; 0x05
    14fe:	7e 81       	ldd	r23, Y+6	; 0x06
    1500:	8f 81       	ldd	r24, Y+7	; 0x07
    1502:	98 85       	ldd	r25, Y+8	; 0x08
    1504:	a6 01       	movw	r20, r12
    1506:	95 01       	movw	r18, r10
    1508:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    150c:	2c ed       	ldi	r18, 0xDC	; 220
    150e:	38 eb       	ldi	r19, 0xB8	; 184
    1510:	48 e0       	ldi	r20, 0x08	; 8
    1512:	5e e3       	ldi	r21, 0x3E	; 62
    1514:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1518:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    151c:	d4 01       	movw	r26, r8
    151e:	6d 93       	st	X+, r22
    1520:	7c 93       	st	X, r23
    1522:	69 85       	ldd	r22, Y+9	; 0x09
    1524:	7a 85       	ldd	r23, Y+10	; 0x0a
    1526:	8b 85       	ldd	r24, Y+11	; 0x0b
    1528:	9c 85       	ldd	r25, Y+12	; 0x0c
    152a:	a6 01       	movw	r20, r12
    152c:	95 01       	movw	r18, r10
    152e:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1532:	2c ed       	ldi	r18, 0xDC	; 220
    1534:	38 eb       	ldi	r19, 0xB8	; 184
    1536:	48 e0       	ldi	r20, 0x08	; 8
    1538:	5e e3       	ldi	r21, 0x3E	; 62
    153a:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    153e:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1542:	f4 01       	movw	r30, r8
    1544:	73 83       	std	Z+3, r23	; 0x03
    1546:	62 83       	std	Z+2, r22	; 0x02
    1548:	6d 85       	ldd	r22, Y+13	; 0x0d
    154a:	7e 85       	ldd	r23, Y+14	; 0x0e
    154c:	8f 85       	ldd	r24, Y+15	; 0x0f
    154e:	98 89       	ldd	r25, Y+16	; 0x10
    1550:	a6 01       	movw	r20, r12
    1552:	95 01       	movw	r18, r10
    1554:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1558:	2c ed       	ldi	r18, 0xDC	; 220
    155a:	38 eb       	ldi	r19, 0xB8	; 184
    155c:	48 e0       	ldi	r20, 0x08	; 8
    155e:	5e e3       	ldi	r21, 0x3E	; 62
    1560:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1564:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1568:	d4 01       	movw	r26, r8
    156a:	15 96       	adiw	r26, 0x05	; 5
    156c:	7c 93       	st	X, r23
    156e:	6e 93       	st	-X, r22
    1570:	14 97       	sbiw	r26, 0x04	; 4
    1572:	16 96       	adiw	r26, 0x06	; 6
    1574:	2c 92       	st	X, r2
    1576:	16 97       	sbiw	r26, 0x06	; 6
    1578:	18 96       	adiw	r26, 0x08	; 8
    157a:	1c 92       	st	X, r1
    157c:	1e 92       	st	-X, r1
    157e:	17 97       	sbiw	r26, 0x07	; 7
    1580:	81 e0       	ldi	r24, 0x01	; 1
    1582:	62 e0       	ldi	r22, 0x02	; 2
    1584:	43 2d       	mov	r20, r3
    1586:	29 89       	ldd	r18, Y+17	; 0x11
    1588:	3a 89       	ldd	r19, Y+18	; 0x12
    158a:	0d 89       	ldd	r16, Y+21	; 0x15
    158c:	1e 89       	ldd	r17, Y+22	; 0x16
    158e:	bd c0       	rjmp	.+378    	; 0x170a <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    1590:	c3 01       	movw	r24, r6
    1592:	b2 01       	movw	r22, r4
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	40 e0       	ldi	r20, 0x00	; 0
    159a:	50 e0       	ldi	r21, 0x00	; 0
    159c:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    15a0:	87 fd       	sbrc	r24, 7
    15a2:	02 c0       	rjmp	.+4      	; 0x15a8 <move_arc_stnb+0x3ac>
    15a4:	80 e0       	ldi	r24, 0x00	; 0
    15a6:	c1 c0       	rjmp	.+386    	; 0x172a <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    15a8:	66 e6       	ldi	r22, 0x66	; 102
    15aa:	76 e6       	ldi	r23, 0x66	; 102
    15ac:	8a ea       	ldi	r24, 0xAA	; 170
    15ae:	91 e4       	ldi	r25, 0x41	; 65
    15b0:	a3 01       	movw	r20, r6
    15b2:	92 01       	movw	r18, r4
    15b4:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e8       	ldi	r20, 0x80	; 128
    15be:	5f e3       	ldi	r21, 0x3F	; 63
    15c0:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    15c4:	7b 01       	movw	r14, r22
    15c6:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    15c8:	66 e6       	ldi	r22, 0x66	; 102
    15ca:	76 e6       	ldi	r23, 0x66	; 102
    15cc:	8a ea       	ldi	r24, 0xAA	; 170
    15ce:	91 ec       	ldi	r25, 0xC1	; 193
    15d0:	a3 01       	movw	r20, r6
    15d2:	92 01       	movw	r18, r4
    15d4:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    15d8:	20 e0       	ldi	r18, 0x00	; 0
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	40 e8       	ldi	r20, 0x80	; 128
    15de:	5f e3       	ldi	r21, 0x3F	; 63
    15e0:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    15e4:	5b 01       	movw	r10, r22
    15e6:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    15e8:	2d b7       	in	r18, 0x3d	; 61
    15ea:	3e b7       	in	r19, 0x3e	; 62
    15ec:	29 50       	subi	r18, 0x09	; 9
    15ee:	30 40       	sbci	r19, 0x00	; 0
    15f0:	0f b6       	in	r0, 0x3f	; 63
    15f2:	f8 94       	cli
    15f4:	3e bf       	out	0x3e, r19	; 62
    15f6:	0f be       	out	0x3f, r0	; 63
    15f8:	2d bf       	out	0x3d, r18	; 61
    15fa:	8d b6       	in	r8, 0x3d	; 61
    15fc:	9e b6       	in	r9, 0x3e	; 62
    15fe:	08 94       	sec
    1600:	81 1c       	adc	r8, r1
    1602:	91 1c       	adc	r9, r1
    1604:	6d 81       	ldd	r22, Y+5	; 0x05
    1606:	7e 81       	ldd	r23, Y+6	; 0x06
    1608:	8f 81       	ldd	r24, Y+7	; 0x07
    160a:	98 85       	ldd	r25, Y+8	; 0x08
    160c:	a8 01       	movw	r20, r16
    160e:	97 01       	movw	r18, r14
    1610:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1614:	2c ed       	ldi	r18, 0xDC	; 220
    1616:	38 eb       	ldi	r19, 0xB8	; 184
    1618:	48 e0       	ldi	r20, 0x08	; 8
    161a:	5e e3       	ldi	r21, 0x3E	; 62
    161c:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1620:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1624:	69 8f       	std	Y+25, r22	; 0x19
    1626:	7a 8f       	std	Y+26, r23	; 0x1a
    1628:	8b 8f       	std	Y+27, r24	; 0x1b
    162a:	9c 8f       	std	Y+28, r25	; 0x1c
    162c:	69 85       	ldd	r22, Y+9	; 0x09
    162e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1630:	8b 85       	ldd	r24, Y+11	; 0x0b
    1632:	9c 85       	ldd	r25, Y+12	; 0x0c
    1634:	a8 01       	movw	r20, r16
    1636:	97 01       	movw	r18, r14
    1638:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    163c:	2c ed       	ldi	r18, 0xDC	; 220
    163e:	38 eb       	ldi	r19, 0xB8	; 184
    1640:	48 e0       	ldi	r20, 0x08	; 8
    1642:	5e e3       	ldi	r21, 0x3E	; 62
    1644:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1648:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    164c:	6d 8f       	std	Y+29, r22	; 0x1d
    164e:	7e 8f       	std	Y+30, r23	; 0x1e
    1650:	8f 8f       	std	Y+31, r24	; 0x1f
    1652:	98 a3       	std	Y+32, r25	; 0x20
    1654:	6d 85       	ldd	r22, Y+13	; 0x0d
    1656:	7e 85       	ldd	r23, Y+14	; 0x0e
    1658:	8f 85       	ldd	r24, Y+15	; 0x0f
    165a:	98 89       	ldd	r25, Y+16	; 0x10
    165c:	a8 01       	movw	r20, r16
    165e:	97 01       	movw	r18, r14
    1660:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1664:	2c ed       	ldi	r18, 0xDC	; 220
    1666:	38 eb       	ldi	r19, 0xB8	; 184
    1668:	48 e0       	ldi	r20, 0x08	; 8
    166a:	5e e3       	ldi	r21, 0x3E	; 62
    166c:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1670:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1674:	2b 01       	movw	r4, r22
    1676:	3c 01       	movw	r6, r24
    1678:	6d 81       	ldd	r22, Y+5	; 0x05
    167a:	7e 81       	ldd	r23, Y+6	; 0x06
    167c:	8f 81       	ldd	r24, Y+7	; 0x07
    167e:	98 85       	ldd	r25, Y+8	; 0x08
    1680:	a6 01       	movw	r20, r12
    1682:	95 01       	movw	r18, r10
    1684:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1688:	2c ed       	ldi	r18, 0xDC	; 220
    168a:	38 eb       	ldi	r19, 0xB8	; 184
    168c:	48 e0       	ldi	r20, 0x08	; 8
    168e:	5e e3       	ldi	r21, 0x3E	; 62
    1690:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1694:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1698:	d4 01       	movw	r26, r8
    169a:	6d 93       	st	X+, r22
    169c:	7c 93       	st	X, r23
    169e:	69 85       	ldd	r22, Y+9	; 0x09
    16a0:	7a 85       	ldd	r23, Y+10	; 0x0a
    16a2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16a4:	9c 85       	ldd	r25, Y+12	; 0x0c
    16a6:	a6 01       	movw	r20, r12
    16a8:	95 01       	movw	r18, r10
    16aa:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    16ae:	2c ed       	ldi	r18, 0xDC	; 220
    16b0:	38 eb       	ldi	r19, 0xB8	; 184
    16b2:	48 e0       	ldi	r20, 0x08	; 8
    16b4:	5e e3       	ldi	r21, 0x3E	; 62
    16b6:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    16ba:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    16be:	f4 01       	movw	r30, r8
    16c0:	73 83       	std	Z+3, r23	; 0x03
    16c2:	62 83       	std	Z+2, r22	; 0x02
    16c4:	6d 85       	ldd	r22, Y+13	; 0x0d
    16c6:	7e 85       	ldd	r23, Y+14	; 0x0e
    16c8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16ca:	98 89       	ldd	r25, Y+16	; 0x10
    16cc:	a6 01       	movw	r20, r12
    16ce:	95 01       	movw	r18, r10
    16d0:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    16d4:	2c ed       	ldi	r18, 0xDC	; 220
    16d6:	38 eb       	ldi	r19, 0xB8	; 184
    16d8:	48 e0       	ldi	r20, 0x08	; 8
    16da:	5e e3       	ldi	r21, 0x3E	; 62
    16dc:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    16e0:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    16e4:	d4 01       	movw	r26, r8
    16e6:	15 96       	adiw	r26, 0x05	; 5
    16e8:	7c 93       	st	X, r23
    16ea:	6e 93       	st	-X, r22
    16ec:	14 97       	sbiw	r26, 0x04	; 4
    16ee:	16 96       	adiw	r26, 0x06	; 6
    16f0:	2c 92       	st	X, r2
    16f2:	16 97       	sbiw	r26, 0x06	; 6
    16f4:	18 96       	adiw	r26, 0x08	; 8
    16f6:	1c 92       	st	X, r1
    16f8:	1e 92       	st	-X, r1
    16fa:	17 97       	sbiw	r26, 0x07	; 7
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	62 e0       	ldi	r22, 0x02	; 2
    1700:	43 2d       	mov	r20, r3
    1702:	29 8d       	ldd	r18, Y+25	; 0x19
    1704:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1706:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1708:	1e 8d       	ldd	r17, Y+30	; 0x1e
    170a:	72 01       	movw	r14, r4
    170c:	c2 2c       	mov	r12, r2
    170e:	aa 24       	eor	r10, r10
    1710:	bb 24       	eor	r11, r11
    1712:	83 2c       	mov	r8, r3
    1714:	0e 94 11 19 	call	0x3222	; 0x3222 <STEPPER_move>
    1718:	81 e0       	ldi	r24, 0x01	; 1
    171a:	ed b7       	in	r30, 0x3d	; 61
    171c:	fe b7       	in	r31, 0x3e	; 62
    171e:	39 96       	adiw	r30, 0x09	; 9
    1720:	0f b6       	in	r0, 0x3f	; 63
    1722:	f8 94       	cli
    1724:	fe bf       	out	0x3e, r31	; 62
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    172a:	a0 96       	adiw	r28, 0x20	; 32
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	cf 91       	pop	r28
    1738:	df 91       	pop	r29
    173a:	1f 91       	pop	r17
    173c:	0f 91       	pop	r16
    173e:	ff 90       	pop	r15
    1740:	ef 90       	pop	r14
    1742:	df 90       	pop	r13
    1744:	cf 90       	pop	r12
    1746:	bf 90       	pop	r11
    1748:	af 90       	pop	r10
    174a:	9f 90       	pop	r9
    174c:	8f 90       	pop	r8
    174e:	7f 90       	pop	r7
    1750:	6f 90       	pop	r6
    1752:	5f 90       	pop	r5
    1754:	4f 90       	pop	r4
    1756:	3f 90       	pop	r3
    1758:	2f 90       	pop	r2
    175a:	08 95       	ret

0000175c <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    175c:	2f 92       	push	r2
    175e:	3f 92       	push	r3
    1760:	4f 92       	push	r4
    1762:	5f 92       	push	r5
    1764:	6f 92       	push	r6
    1766:	7f 92       	push	r7
    1768:	8f 92       	push	r8
    176a:	9f 92       	push	r9
    176c:	af 92       	push	r10
    176e:	bf 92       	push	r11
    1770:	cf 92       	push	r12
    1772:	df 92       	push	r13
    1774:	ef 92       	push	r14
    1776:	ff 92       	push	r15
    1778:	0f 93       	push	r16
    177a:	1f 93       	push	r17
    177c:	df 93       	push	r29
    177e:	cf 93       	push	r28
    1780:	cd b7       	in	r28, 0x3d	; 61
    1782:	de b7       	in	r29, 0x3e	; 62
    1784:	a0 97       	sbiw	r28, 0x20	; 32
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	de bf       	out	0x3e, r29	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	cd bf       	out	0x3d, r28	; 61
    1790:	2b 01       	movw	r4, r22
    1792:	3c 01       	movw	r6, r24
    1794:	2d 83       	std	Y+5, r18	; 0x05
    1796:	3e 83       	std	Y+6, r19	; 0x06
    1798:	4f 83       	std	Y+7, r20	; 0x07
    179a:	58 87       	std	Y+8, r21	; 0x08
    179c:	e9 86       	std	Y+9, r14	; 0x09
    179e:	fa 86       	std	Y+10, r15	; 0x0a
    17a0:	0b 87       	std	Y+11, r16	; 0x0b
    17a2:	1c 87       	std	Y+12, r17	; 0x0c
    17a4:	ad 86       	std	Y+13, r10	; 0x0d
    17a6:	be 86       	std	Y+14, r11	; 0x0e
    17a8:	cf 86       	std	Y+15, r12	; 0x0f
    17aa:	d8 8a       	std	Y+16, r13	; 0x10
    17ac:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    17ae:	33 24       	eor	r3, r3
    17b0:	ca 01       	movw	r24, r20
    17b2:	b9 01       	movw	r22, r18
    17b4:	20 e0       	ldi	r18, 0x00	; 0
    17b6:	30 e0       	ldi	r19, 0x00	; 0
    17b8:	40 e0       	ldi	r20, 0x00	; 0
    17ba:	50 e0       	ldi	r21, 0x00	; 0
    17bc:	0e 94 9b 2a 	call	0x5536	; 0x5536 <__gesf2>
    17c0:	18 16       	cp	r1, r24
    17c2:	14 f4       	brge	.+4      	; 0x17c8 <move_arc_stwt+0x6c>
    17c4:	33 24       	eor	r3, r3
    17c6:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    17c8:	6d 81       	ldd	r22, Y+5	; 0x05
    17ca:	7e 81       	ldd	r23, Y+6	; 0x06
    17cc:	8f 81       	ldd	r24, Y+7	; 0x07
    17ce:	98 85       	ldd	r25, Y+8	; 0x08
    17d0:	2c ed       	ldi	r18, 0xDC	; 220
    17d2:	38 eb       	ldi	r19, 0xB8	; 184
    17d4:	48 e0       	ldi	r20, 0x08	; 8
    17d6:	5e e3       	ldi	r21, 0x3E	; 62
    17d8:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    17dc:	0e 94 b8 29 	call	0x5370	; 0x5370 <__fixsfsi>
    17e0:	9b 01       	movw	r18, r22
    17e2:	77 ff       	sbrs	r23, 7
    17e4:	03 c0       	rjmp	.+6      	; 0x17ec <move_arc_stwt+0x90>
    17e6:	30 95       	com	r19
    17e8:	21 95       	neg	r18
    17ea:	3f 4f       	sbci	r19, 0xFF	; 255
    17ec:	b9 01       	movw	r22, r18
    17ee:	88 27       	eor	r24, r24
    17f0:	77 fd       	sbrc	r23, 7
    17f2:	80 95       	com	r24
    17f4:	98 2f       	mov	r25, r24
    17f6:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__floatsisf>
    17fa:	69 83       	std	Y+1, r22	; 0x01
    17fc:	7a 83       	std	Y+2, r23	; 0x02
    17fe:	8b 83       	std	Y+3, r24	; 0x03
    1800:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1802:	69 85       	ldd	r22, Y+9	; 0x09
    1804:	7a 85       	ldd	r23, Y+10	; 0x0a
    1806:	8b 85       	ldd	r24, Y+11	; 0x0b
    1808:	9c 85       	ldd	r25, Y+12	; 0x0c
    180a:	2c ed       	ldi	r18, 0xDC	; 220
    180c:	38 eb       	ldi	r19, 0xB8	; 184
    180e:	48 e0       	ldi	r20, 0x08	; 8
    1810:	5e e3       	ldi	r21, 0x3E	; 62
    1812:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1816:	0e 94 b8 29 	call	0x5370	; 0x5370 <__fixsfsi>
    181a:	9b 01       	movw	r18, r22
    181c:	77 ff       	sbrs	r23, 7
    181e:	03 c0       	rjmp	.+6      	; 0x1826 <move_arc_stwt+0xca>
    1820:	30 95       	com	r19
    1822:	21 95       	neg	r18
    1824:	3f 4f       	sbci	r19, 0xFF	; 255
    1826:	b9 01       	movw	r22, r18
    1828:	88 27       	eor	r24, r24
    182a:	77 fd       	sbrc	r23, 7
    182c:	80 95       	com	r24
    182e:	98 2f       	mov	r25, r24
    1830:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__floatsisf>
    1834:	4b 01       	movw	r8, r22
    1836:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1838:	6d 85       	ldd	r22, Y+13	; 0x0d
    183a:	7e 85       	ldd	r23, Y+14	; 0x0e
    183c:	8f 85       	ldd	r24, Y+15	; 0x0f
    183e:	98 89       	ldd	r25, Y+16	; 0x10
    1840:	2c ed       	ldi	r18, 0xDC	; 220
    1842:	38 eb       	ldi	r19, 0xB8	; 184
    1844:	48 e0       	ldi	r20, 0x08	; 8
    1846:	5e e3       	ldi	r21, 0x3E	; 62
    1848:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    184c:	0e 94 b8 29 	call	0x5370	; 0x5370 <__fixsfsi>
    1850:	9b 01       	movw	r18, r22
    1852:	77 ff       	sbrs	r23, 7
    1854:	03 c0       	rjmp	.+6      	; 0x185c <move_arc_stwt+0x100>
    1856:	30 95       	com	r19
    1858:	21 95       	neg	r18
    185a:	3f 4f       	sbci	r19, 0xFF	; 255
    185c:	b9 01       	movw	r22, r18
    185e:	88 27       	eor	r24, r24
    1860:	77 fd       	sbrc	r23, 7
    1862:	80 95       	com	r24
    1864:	98 2f       	mov	r25, r24
    1866:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__floatsisf>
    186a:	6b 01       	movw	r12, r22
    186c:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    186e:	c3 01       	movw	r24, r6
    1870:	b2 01       	movw	r22, r4
    1872:	20 e0       	ldi	r18, 0x00	; 0
    1874:	30 e0       	ldi	r19, 0x00	; 0
    1876:	40 e0       	ldi	r20, 0x00	; 0
    1878:	5f e4       	ldi	r21, 0x4F	; 79
    187a:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    187e:	88 23       	and	r24, r24
    1880:	a1 f5       	brne	.+104    	; 0x18ea <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    1882:	69 81       	ldd	r22, Y+1	; 0x01
    1884:	7a 81       	ldd	r23, Y+2	; 0x02
    1886:	8b 81       	ldd	r24, Y+3	; 0x03
    1888:	9c 81       	ldd	r25, Y+4	; 0x04
    188a:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    188e:	2b 01       	movw	r4, r22
    1890:	3c 01       	movw	r6, r24
    1892:	c5 01       	movw	r24, r10
    1894:	b4 01       	movw	r22, r8
    1896:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    189a:	4b 01       	movw	r8, r22
    189c:	5c 01       	movw	r10, r24
    189e:	c7 01       	movw	r24, r14
    18a0:	b6 01       	movw	r22, r12
    18a2:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    18a6:	6b 01       	movw	r12, r22
    18a8:	7c 01       	movw	r14, r24
    18aa:	2d b7       	in	r18, 0x3d	; 61
    18ac:	3e b7       	in	r19, 0x3e	; 62
    18ae:	29 50       	subi	r18, 0x09	; 9
    18b0:	30 40       	sbci	r19, 0x00	; 0
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	f8 94       	cli
    18b6:	3e bf       	out	0x3e, r19	; 62
    18b8:	0f be       	out	0x3f, r0	; 63
    18ba:	2d bf       	out	0x3d, r18	; 61
    18bc:	ed b7       	in	r30, 0x3d	; 61
    18be:	fe b7       	in	r31, 0x3e	; 62
    18c0:	31 96       	adiw	r30, 0x01	; 1
    18c2:	ad b7       	in	r26, 0x3d	; 61
    18c4:	be b7       	in	r27, 0x3e	; 62
    18c6:	12 96       	adiw	r26, 0x02	; 2
    18c8:	5c 92       	st	X, r5
    18ca:	4e 92       	st	-X, r4
    18cc:	11 97       	sbiw	r26, 0x01	; 1
    18ce:	93 82       	std	Z+3, r9	; 0x03
    18d0:	82 82       	std	Z+2, r8	; 0x02
    18d2:	75 83       	std	Z+5, r23	; 0x05
    18d4:	64 83       	std	Z+4, r22	; 0x04
    18d6:	26 82       	std	Z+6, r2	; 0x06
    18d8:	10 86       	std	Z+8, r1	; 0x08
    18da:	17 82       	std	Z+7, r1	; 0x07
    18dc:	80 e0       	ldi	r24, 0x00	; 0
    18de:	62 e0       	ldi	r22, 0x02	; 2
    18e0:	43 2d       	mov	r20, r3
    18e2:	92 01       	movw	r18, r4
    18e4:	84 01       	movw	r16, r8
    18e6:	76 01       	movw	r14, r12
    18e8:	c1 c1       	rjmp	.+898    	; 0x1c6c <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    18ea:	c3 01       	movw	r24, r6
    18ec:	b2 01       	movw	r22, r4
    18ee:	20 e0       	ldi	r18, 0x00	; 0
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	50 e0       	ldi	r21, 0x00	; 0
    18f6:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    18fa:	88 23       	and	r24, r24
    18fc:	e9 f5       	brne	.+122    	; 0x1978 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    18fe:	69 81       	ldd	r22, Y+1	; 0x01
    1900:	7a 81       	ldd	r23, Y+2	; 0x02
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	9c 81       	ldd	r25, Y+4	; 0x04
    1906:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    190a:	3b 01       	movw	r6, r22
    190c:	c5 01       	movw	r24, r10
    190e:	b4 01       	movw	r22, r8
    1910:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1914:	8b 01       	movw	r16, r22
    1916:	c7 01       	movw	r24, r14
    1918:	b6 01       	movw	r22, r12
    191a:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    191e:	7b 01       	movw	r14, r22
    1920:	2d b7       	in	r18, 0x3d	; 61
    1922:	3e b7       	in	r19, 0x3e	; 62
    1924:	29 50       	subi	r18, 0x09	; 9
    1926:	30 40       	sbci	r19, 0x00	; 0
    1928:	0f b6       	in	r0, 0x3f	; 63
    192a:	f8 94       	cli
    192c:	3e bf       	out	0x3e, r19	; 62
    192e:	0f be       	out	0x3f, r0	; 63
    1930:	2d bf       	out	0x3d, r18	; 61
    1932:	ed b7       	in	r30, 0x3d	; 61
    1934:	fe b7       	in	r31, 0x3e	; 62
    1936:	31 96       	adiw	r30, 0x01	; 1
    1938:	40 e0       	ldi	r20, 0x00	; 0
    193a:	33 20       	and	r3, r3
    193c:	09 f4       	brne	.+2      	; 0x1940 <move_arc_stwt+0x1e4>
    193e:	41 e0       	ldi	r20, 0x01	; 1
    1940:	71 82       	std	Z+1, r7	; 0x01
    1942:	60 82       	st	Z, r6
    1944:	13 83       	std	Z+3, r17	; 0x03
    1946:	02 83       	std	Z+2, r16	; 0x02
    1948:	f5 82       	std	Z+5, r15	; 0x05
    194a:	e4 82       	std	Z+4, r14	; 0x04
    194c:	26 82       	std	Z+6, r2	; 0x06
    194e:	10 86       	std	Z+8, r1	; 0x08
    1950:	17 82       	std	Z+7, r1	; 0x07
    1952:	80 e0       	ldi	r24, 0x00	; 0
    1954:	62 e0       	ldi	r22, 0x02	; 2
    1956:	93 01       	movw	r18, r6
    1958:	c2 2c       	mov	r12, r2
    195a:	aa 24       	eor	r10, r10
    195c:	bb 24       	eor	r11, r11
    195e:	83 2c       	mov	r8, r3
    1960:	0e 94 11 19 	call	0x3222	; 0x3222 <STEPPER_move>
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	ad b7       	in	r26, 0x3d	; 61
    1968:	be b7       	in	r27, 0x3e	; 62
    196a:	19 96       	adiw	r26, 0x09	; 9
    196c:	0f b6       	in	r0, 0x3f	; 63
    196e:	f8 94       	cli
    1970:	be bf       	out	0x3e, r27	; 62
    1972:	0f be       	out	0x3f, r0	; 63
    1974:	ad bf       	out	0x3d, r26	; 61
    1976:	89 c1       	rjmp	.+786    	; 0x1c8a <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1978:	c3 01       	movw	r24, r6
    197a:	b2 01       	movw	r22, r4
    197c:	20 e0       	ldi	r18, 0x00	; 0
    197e:	30 e0       	ldi	r19, 0x00	; 0
    1980:	40 e0       	ldi	r20, 0x00	; 0
    1982:	50 e0       	ldi	r21, 0x00	; 0
    1984:	0e 94 9b 2a 	call	0x5536	; 0x5536 <__gesf2>
    1988:	18 16       	cp	r1, r24
    198a:	0c f0       	brlt	.+2      	; 0x198e <move_arc_stwt+0x232>
    198c:	b1 c0       	rjmp	.+354    	; 0x1af0 <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    198e:	66 e6       	ldi	r22, 0x66	; 102
    1990:	76 e6       	ldi	r23, 0x66	; 102
    1992:	8a ea       	ldi	r24, 0xAA	; 170
    1994:	91 ec       	ldi	r25, 0xC1	; 193
    1996:	a3 01       	movw	r20, r6
    1998:	92 01       	movw	r18, r4
    199a:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    19aa:	7b 01       	movw	r14, r22
    19ac:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    19ae:	66 e6       	ldi	r22, 0x66	; 102
    19b0:	76 e6       	ldi	r23, 0x66	; 102
    19b2:	8a ea       	ldi	r24, 0xAA	; 170
    19b4:	91 e4       	ldi	r25, 0x41	; 65
    19b6:	a3 01       	movw	r20, r6
    19b8:	92 01       	movw	r18, r4
    19ba:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    19be:	20 e0       	ldi	r18, 0x00	; 0
    19c0:	30 e0       	ldi	r19, 0x00	; 0
    19c2:	40 e8       	ldi	r20, 0x80	; 128
    19c4:	5f e3       	ldi	r21, 0x3F	; 63
    19c6:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    19ca:	5b 01       	movw	r10, r22
    19cc:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    19ce:	ed b7       	in	r30, 0x3d	; 61
    19d0:	fe b7       	in	r31, 0x3e	; 62
    19d2:	39 97       	sbiw	r30, 0x09	; 9
    19d4:	0f b6       	in	r0, 0x3f	; 63
    19d6:	f8 94       	cli
    19d8:	fe bf       	out	0x3e, r31	; 62
    19da:	0f be       	out	0x3f, r0	; 63
    19dc:	ed bf       	out	0x3d, r30	; 61
    19de:	8d b6       	in	r8, 0x3d	; 61
    19e0:	9e b6       	in	r9, 0x3e	; 62
    19e2:	08 94       	sec
    19e4:	81 1c       	adc	r8, r1
    19e6:	91 1c       	adc	r9, r1
    19e8:	6d 81       	ldd	r22, Y+5	; 0x05
    19ea:	7e 81       	ldd	r23, Y+6	; 0x06
    19ec:	8f 81       	ldd	r24, Y+7	; 0x07
    19ee:	98 85       	ldd	r25, Y+8	; 0x08
    19f0:	a8 01       	movw	r20, r16
    19f2:	97 01       	movw	r18, r14
    19f4:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    19f8:	2c ed       	ldi	r18, 0xDC	; 220
    19fa:	38 eb       	ldi	r19, 0xB8	; 184
    19fc:	48 e0       	ldi	r20, 0x08	; 8
    19fe:	5e e3       	ldi	r21, 0x3E	; 62
    1a00:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1a04:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1a08:	69 8b       	std	Y+17, r22	; 0x11
    1a0a:	7a 8b       	std	Y+18, r23	; 0x12
    1a0c:	8b 8b       	std	Y+19, r24	; 0x13
    1a0e:	9c 8b       	std	Y+20, r25	; 0x14
    1a10:	69 85       	ldd	r22, Y+9	; 0x09
    1a12:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a14:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a16:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a18:	a8 01       	movw	r20, r16
    1a1a:	97 01       	movw	r18, r14
    1a1c:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1a20:	2c ed       	ldi	r18, 0xDC	; 220
    1a22:	38 eb       	ldi	r19, 0xB8	; 184
    1a24:	48 e0       	ldi	r20, 0x08	; 8
    1a26:	5e e3       	ldi	r21, 0x3E	; 62
    1a28:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1a2c:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1a30:	6d 8b       	std	Y+21, r22	; 0x15
    1a32:	7e 8b       	std	Y+22, r23	; 0x16
    1a34:	8f 8b       	std	Y+23, r24	; 0x17
    1a36:	98 8f       	std	Y+24, r25	; 0x18
    1a38:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a3a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a3c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a3e:	98 89       	ldd	r25, Y+16	; 0x10
    1a40:	a8 01       	movw	r20, r16
    1a42:	97 01       	movw	r18, r14
    1a44:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1a48:	2c ed       	ldi	r18, 0xDC	; 220
    1a4a:	38 eb       	ldi	r19, 0xB8	; 184
    1a4c:	48 e0       	ldi	r20, 0x08	; 8
    1a4e:	5e e3       	ldi	r21, 0x3E	; 62
    1a50:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1a54:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1a58:	2b 01       	movw	r4, r22
    1a5a:	3c 01       	movw	r6, r24
    1a5c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a5e:	7e 81       	ldd	r23, Y+6	; 0x06
    1a60:	8f 81       	ldd	r24, Y+7	; 0x07
    1a62:	98 85       	ldd	r25, Y+8	; 0x08
    1a64:	a6 01       	movw	r20, r12
    1a66:	95 01       	movw	r18, r10
    1a68:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1a6c:	2c ed       	ldi	r18, 0xDC	; 220
    1a6e:	38 eb       	ldi	r19, 0xB8	; 184
    1a70:	48 e0       	ldi	r20, 0x08	; 8
    1a72:	5e e3       	ldi	r21, 0x3E	; 62
    1a74:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1a78:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1a7c:	d4 01       	movw	r26, r8
    1a7e:	6d 93       	st	X+, r22
    1a80:	7c 93       	st	X, r23
    1a82:	69 85       	ldd	r22, Y+9	; 0x09
    1a84:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a86:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a88:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a8a:	a6 01       	movw	r20, r12
    1a8c:	95 01       	movw	r18, r10
    1a8e:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1a92:	2c ed       	ldi	r18, 0xDC	; 220
    1a94:	38 eb       	ldi	r19, 0xB8	; 184
    1a96:	48 e0       	ldi	r20, 0x08	; 8
    1a98:	5e e3       	ldi	r21, 0x3E	; 62
    1a9a:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1a9e:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1aa2:	f4 01       	movw	r30, r8
    1aa4:	73 83       	std	Z+3, r23	; 0x03
    1aa6:	62 83       	std	Z+2, r22	; 0x02
    1aa8:	6d 85       	ldd	r22, Y+13	; 0x0d
    1aaa:	7e 85       	ldd	r23, Y+14	; 0x0e
    1aac:	8f 85       	ldd	r24, Y+15	; 0x0f
    1aae:	98 89       	ldd	r25, Y+16	; 0x10
    1ab0:	a6 01       	movw	r20, r12
    1ab2:	95 01       	movw	r18, r10
    1ab4:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1ab8:	2c ed       	ldi	r18, 0xDC	; 220
    1aba:	38 eb       	ldi	r19, 0xB8	; 184
    1abc:	48 e0       	ldi	r20, 0x08	; 8
    1abe:	5e e3       	ldi	r21, 0x3E	; 62
    1ac0:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1ac4:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1ac8:	d4 01       	movw	r26, r8
    1aca:	15 96       	adiw	r26, 0x05	; 5
    1acc:	7c 93       	st	X, r23
    1ace:	6e 93       	st	-X, r22
    1ad0:	14 97       	sbiw	r26, 0x04	; 4
    1ad2:	16 96       	adiw	r26, 0x06	; 6
    1ad4:	2c 92       	st	X, r2
    1ad6:	16 97       	sbiw	r26, 0x06	; 6
    1ad8:	18 96       	adiw	r26, 0x08	; 8
    1ada:	1c 92       	st	X, r1
    1adc:	1e 92       	st	-X, r1
    1ade:	17 97       	sbiw	r26, 0x07	; 7
    1ae0:	80 e0       	ldi	r24, 0x00	; 0
    1ae2:	62 e0       	ldi	r22, 0x02	; 2
    1ae4:	43 2d       	mov	r20, r3
    1ae6:	29 89       	ldd	r18, Y+17	; 0x11
    1ae8:	3a 89       	ldd	r19, Y+18	; 0x12
    1aea:	0d 89       	ldd	r16, Y+21	; 0x15
    1aec:	1e 89       	ldd	r17, Y+22	; 0x16
    1aee:	bd c0       	rjmp	.+378    	; 0x1c6a <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    1af0:	c3 01       	movw	r24, r6
    1af2:	b2 01       	movw	r22, r4
    1af4:	20 e0       	ldi	r18, 0x00	; 0
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	40 e0       	ldi	r20, 0x00	; 0
    1afa:	50 e0       	ldi	r21, 0x00	; 0
    1afc:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    1b00:	87 fd       	sbrc	r24, 7
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <move_arc_stwt+0x3ac>
    1b04:	80 e0       	ldi	r24, 0x00	; 0
    1b06:	c1 c0       	rjmp	.+386    	; 0x1c8a <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1b08:	66 e6       	ldi	r22, 0x66	; 102
    1b0a:	76 e6       	ldi	r23, 0x66	; 102
    1b0c:	8a ea       	ldi	r24, 0xAA	; 170
    1b0e:	91 e4       	ldi	r25, 0x41	; 65
    1b10:	a3 01       	movw	r20, r6
    1b12:	92 01       	movw	r18, r4
    1b14:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    1b24:	7b 01       	movw	r14, r22
    1b26:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1b28:	66 e6       	ldi	r22, 0x66	; 102
    1b2a:	76 e6       	ldi	r23, 0x66	; 102
    1b2c:	8a ea       	ldi	r24, 0xAA	; 170
    1b2e:	91 ec       	ldi	r25, 0xC1	; 193
    1b30:	a3 01       	movw	r20, r6
    1b32:	92 01       	movw	r18, r4
    1b34:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1b38:	20 e0       	ldi	r18, 0x00	; 0
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	40 e8       	ldi	r20, 0x80	; 128
    1b3e:	5f e3       	ldi	r21, 0x3F	; 63
    1b40:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    1b44:	5b 01       	movw	r10, r22
    1b46:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1b48:	2d b7       	in	r18, 0x3d	; 61
    1b4a:	3e b7       	in	r19, 0x3e	; 62
    1b4c:	29 50       	subi	r18, 0x09	; 9
    1b4e:	30 40       	sbci	r19, 0x00	; 0
    1b50:	0f b6       	in	r0, 0x3f	; 63
    1b52:	f8 94       	cli
    1b54:	3e bf       	out	0x3e, r19	; 62
    1b56:	0f be       	out	0x3f, r0	; 63
    1b58:	2d bf       	out	0x3d, r18	; 61
    1b5a:	8d b6       	in	r8, 0x3d	; 61
    1b5c:	9e b6       	in	r9, 0x3e	; 62
    1b5e:	08 94       	sec
    1b60:	81 1c       	adc	r8, r1
    1b62:	91 1c       	adc	r9, r1
    1b64:	6d 81       	ldd	r22, Y+5	; 0x05
    1b66:	7e 81       	ldd	r23, Y+6	; 0x06
    1b68:	8f 81       	ldd	r24, Y+7	; 0x07
    1b6a:	98 85       	ldd	r25, Y+8	; 0x08
    1b6c:	a8 01       	movw	r20, r16
    1b6e:	97 01       	movw	r18, r14
    1b70:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1b74:	2c ed       	ldi	r18, 0xDC	; 220
    1b76:	38 eb       	ldi	r19, 0xB8	; 184
    1b78:	48 e0       	ldi	r20, 0x08	; 8
    1b7a:	5e e3       	ldi	r21, 0x3E	; 62
    1b7c:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1b80:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1b84:	69 8f       	std	Y+25, r22	; 0x19
    1b86:	7a 8f       	std	Y+26, r23	; 0x1a
    1b88:	8b 8f       	std	Y+27, r24	; 0x1b
    1b8a:	9c 8f       	std	Y+28, r25	; 0x1c
    1b8c:	69 85       	ldd	r22, Y+9	; 0x09
    1b8e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b90:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b92:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b94:	a8 01       	movw	r20, r16
    1b96:	97 01       	movw	r18, r14
    1b98:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1b9c:	2c ed       	ldi	r18, 0xDC	; 220
    1b9e:	38 eb       	ldi	r19, 0xB8	; 184
    1ba0:	48 e0       	ldi	r20, 0x08	; 8
    1ba2:	5e e3       	ldi	r21, 0x3E	; 62
    1ba4:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1ba8:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1bac:	6d 8f       	std	Y+29, r22	; 0x1d
    1bae:	7e 8f       	std	Y+30, r23	; 0x1e
    1bb0:	8f 8f       	std	Y+31, r24	; 0x1f
    1bb2:	98 a3       	std	Y+32, r25	; 0x20
    1bb4:	6d 85       	ldd	r22, Y+13	; 0x0d
    1bb6:	7e 85       	ldd	r23, Y+14	; 0x0e
    1bb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    1bba:	98 89       	ldd	r25, Y+16	; 0x10
    1bbc:	a8 01       	movw	r20, r16
    1bbe:	97 01       	movw	r18, r14
    1bc0:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1bc4:	2c ed       	ldi	r18, 0xDC	; 220
    1bc6:	38 eb       	ldi	r19, 0xB8	; 184
    1bc8:	48 e0       	ldi	r20, 0x08	; 8
    1bca:	5e e3       	ldi	r21, 0x3E	; 62
    1bcc:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1bd0:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1bd4:	2b 01       	movw	r4, r22
    1bd6:	3c 01       	movw	r6, r24
    1bd8:	6d 81       	ldd	r22, Y+5	; 0x05
    1bda:	7e 81       	ldd	r23, Y+6	; 0x06
    1bdc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bde:	98 85       	ldd	r25, Y+8	; 0x08
    1be0:	a6 01       	movw	r20, r12
    1be2:	95 01       	movw	r18, r10
    1be4:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1be8:	2c ed       	ldi	r18, 0xDC	; 220
    1bea:	38 eb       	ldi	r19, 0xB8	; 184
    1bec:	48 e0       	ldi	r20, 0x08	; 8
    1bee:	5e e3       	ldi	r21, 0x3E	; 62
    1bf0:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1bf4:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1bf8:	d4 01       	movw	r26, r8
    1bfa:	6d 93       	st	X+, r22
    1bfc:	7c 93       	st	X, r23
    1bfe:	69 85       	ldd	r22, Y+9	; 0x09
    1c00:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c02:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c04:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c06:	a6 01       	movw	r20, r12
    1c08:	95 01       	movw	r18, r10
    1c0a:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1c0e:	2c ed       	ldi	r18, 0xDC	; 220
    1c10:	38 eb       	ldi	r19, 0xB8	; 184
    1c12:	48 e0       	ldi	r20, 0x08	; 8
    1c14:	5e e3       	ldi	r21, 0x3E	; 62
    1c16:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1c1a:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1c1e:	f4 01       	movw	r30, r8
    1c20:	73 83       	std	Z+3, r23	; 0x03
    1c22:	62 83       	std	Z+2, r22	; 0x02
    1c24:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c26:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c2a:	98 89       	ldd	r25, Y+16	; 0x10
    1c2c:	a6 01       	movw	r20, r12
    1c2e:	95 01       	movw	r18, r10
    1c30:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    1c34:	2c ed       	ldi	r18, 0xDC	; 220
    1c36:	38 eb       	ldi	r19, 0xB8	; 184
    1c38:	48 e0       	ldi	r20, 0x08	; 8
    1c3a:	5e e3       	ldi	r21, 0x3E	; 62
    1c3c:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    1c40:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1c44:	d4 01       	movw	r26, r8
    1c46:	15 96       	adiw	r26, 0x05	; 5
    1c48:	7c 93       	st	X, r23
    1c4a:	6e 93       	st	-X, r22
    1c4c:	14 97       	sbiw	r26, 0x04	; 4
    1c4e:	16 96       	adiw	r26, 0x06	; 6
    1c50:	2c 92       	st	X, r2
    1c52:	16 97       	sbiw	r26, 0x06	; 6
    1c54:	18 96       	adiw	r26, 0x08	; 8
    1c56:	1c 92       	st	X, r1
    1c58:	1e 92       	st	-X, r1
    1c5a:	17 97       	sbiw	r26, 0x07	; 7
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	62 e0       	ldi	r22, 0x02	; 2
    1c60:	43 2d       	mov	r20, r3
    1c62:	29 8d       	ldd	r18, Y+25	; 0x19
    1c64:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1c66:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1c68:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c6a:	72 01       	movw	r14, r4
    1c6c:	c2 2c       	mov	r12, r2
    1c6e:	aa 24       	eor	r10, r10
    1c70:	bb 24       	eor	r11, r11
    1c72:	83 2c       	mov	r8, r3
    1c74:	0e 94 11 19 	call	0x3222	; 0x3222 <STEPPER_move>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	ed b7       	in	r30, 0x3d	; 61
    1c7c:	fe b7       	in	r31, 0x3e	; 62
    1c7e:	39 96       	adiw	r30, 0x09	; 9
    1c80:	0f b6       	in	r0, 0x3f	; 63
    1c82:	f8 94       	cli
    1c84:	fe bf       	out	0x3e, r31	; 62
    1c86:	0f be       	out	0x3f, r0	; 63
    1c88:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1c8a:	a0 96       	adiw	r28, 0x20	; 32
    1c8c:	0f b6       	in	r0, 0x3f	; 63
    1c8e:	f8 94       	cli
    1c90:	de bf       	out	0x3e, r29	; 62
    1c92:	0f be       	out	0x3f, r0	; 63
    1c94:	cd bf       	out	0x3d, r28	; 61
    1c96:	cf 91       	pop	r28
    1c98:	df 91       	pop	r29
    1c9a:	1f 91       	pop	r17
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	df 90       	pop	r13
    1ca4:	cf 90       	pop	r12
    1ca6:	bf 90       	pop	r11
    1ca8:	af 90       	pop	r10
    1caa:	9f 90       	pop	r9
    1cac:	8f 90       	pop	r8
    1cae:	7f 90       	pop	r7
    1cb0:	6f 90       	pop	r6
    1cb2:	5f 90       	pop	r5
    1cb4:	4f 90       	pop	r4
    1cb6:	3f 90       	pop	r3
    1cb8:	2f 90       	pop	r2
    1cba:	08 95       	ret

00001cbc <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
    1cbc:	2f 92       	push	r2
    1cbe:	3f 92       	push	r3
    1cc0:	4f 92       	push	r4
    1cc2:	5f 92       	push	r5
    1cc4:	6f 92       	push	r6
    1cc6:	7f 92       	push	r7
    1cc8:	8f 92       	push	r8
    1cca:	9f 92       	push	r9
    1ccc:	af 92       	push	r10
    1cce:	bf 92       	push	r11
    1cd0:	cf 92       	push	r12
    1cd2:	df 92       	push	r13
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	df 93       	push	r29
    1cde:	cf 93       	push	r28
    1ce0:	00 d0       	rcall	.+0      	; 0x1ce2 <moveAway+0x26>
    1ce2:	00 d0       	rcall	.+0      	; 0x1ce4 <moveAway+0x28>
    1ce4:	cd b7       	in	r28, 0x3d	; 61
    1ce6:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    1ce8:	60 90 cc 03 	lds	r6, 0x03CC
    1cec:	70 90 cd 03 	lds	r7, 0x03CD
    1cf0:	80 90 ce 03 	lds	r8, 0x03CE
    1cf4:	90 90 cf 03 	lds	r9, 0x03CF
    1cf8:	a0 90 d0 03 	lds	r10, 0x03D0
    1cfc:	b0 90 d1 03 	lds	r11, 0x03D1
    1d00:	c0 90 d2 03 	lds	r12, 0x03D2
    1d04:	d0 90 d3 03 	lds	r13, 0x03D3
	float moveX = rtIR - ltIR;
    1d08:	e0 90 c8 03 	lds	r14, 0x03C8
    1d0c:	f0 90 c9 03 	lds	r15, 0x03C9
    1d10:	00 91 ca 03 	lds	r16, 0x03CA
    1d14:	10 91 cb 03 	lds	r17, 0x03CB
    1d18:	80 91 c4 03 	lds	r24, 0x03C4
    1d1c:	90 91 c5 03 	lds	r25, 0x03C5
    1d20:	a0 91 c6 03 	lds	r26, 0x03C6
    1d24:	b0 91 c7 03 	lds	r27, 0x03C7
    1d28:	89 83       	std	Y+1, r24	; 0x01
    1d2a:	9a 83       	std	Y+2, r25	; 0x02
    1d2c:	ab 83       	std	Y+3, r26	; 0x03
    1d2e:	bc 83       	std	Y+4, r27	; 0x04
    1d30:	c8 01       	movw	r24, r16
    1d32:	b7 01       	movw	r22, r14
    1d34:	29 81       	ldd	r18, Y+1	; 0x01
    1d36:	3a 81       	ldd	r19, Y+2	; 0x02
    1d38:	4b 81       	ldd	r20, Y+3	; 0x03
    1d3a:	5c 81       	ldd	r21, Y+4	; 0x04
    1d3c:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__subsf3>
    1d40:	1b 01       	movw	r2, r22
    1d42:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
    1d44:	c4 01       	movw	r24, r8
    1d46:	b3 01       	movw	r22, r6
    1d48:	20 e0       	ldi	r18, 0x00	; 0
    1d4a:	30 e0       	ldi	r19, 0x00	; 0
    1d4c:	40 ee       	ldi	r20, 0xE0	; 224
    1d4e:	50 e4       	ldi	r21, 0x40	; 64
    1d50:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    1d54:	87 fd       	sbrc	r24, 7
    1d56:	0b c0       	rjmp	.+22     	; 0x1d6e <moveAway+0xb2>
    1d58:	c6 01       	movw	r24, r12
    1d5a:	b5 01       	movw	r22, r10
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 ee       	ldi	r20, 0xE0	; 224
    1d62:	50 e4       	ldi	r21, 0x40	; 64
    1d64:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    1d68:	88 23       	and	r24, r24
    1d6a:	0c f0       	brlt	.+2      	; 0x1d6e <moveAway+0xb2>
    1d6c:	68 c0       	rjmp	.+208    	; 0x1e3e <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    1d6e:	c4 01       	movw	r24, r8
    1d70:	b3 01       	movw	r22, r6
    1d72:	a6 01       	movw	r20, r12
    1d74:	95 01       	movw	r18, r10
    1d76:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__subsf3>
    1d7a:	7b 01       	movw	r14, r22
    1d7c:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
    1d7e:	77 24       	eor	r7, r7
    1d80:	20 e0       	ldi	r18, 0x00	; 0
    1d82:	30 e0       	ldi	r19, 0x00	; 0
    1d84:	40 e0       	ldi	r20, 0x00	; 0
    1d86:	50 e0       	ldi	r21, 0x00	; 0
    1d88:	0e 94 9b 2a 	call	0x5536	; 0x5536 <__gesf2>
    1d8c:	88 23       	and	r24, r24
    1d8e:	14 f0       	brlt	.+4      	; 0x1d94 <moveAway+0xd8>
    1d90:	77 24       	eor	r7, r7
    1d92:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1d94:	c8 01       	movw	r24, r16
    1d96:	b7 01       	movw	r22, r14
    1d98:	0e 94 b8 29 	call	0x5370	; 0x5370 <__fixsfsi>
    1d9c:	9b 01       	movw	r18, r22
    1d9e:	77 ff       	sbrs	r23, 7
    1da0:	03 c0       	rjmp	.+6      	; 0x1da8 <moveAway+0xec>
    1da2:	30 95       	com	r19
    1da4:	21 95       	neg	r18
    1da6:	3f 4f       	sbci	r19, 0xFF	; 255
    1da8:	b9 01       	movw	r22, r18
    1daa:	88 27       	eor	r24, r24
    1dac:	77 fd       	sbrc	r23, 7
    1dae:	80 95       	com	r24
    1db0:	98 2f       	mov	r25, r24
    1db2:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__floatsisf>
    1db6:	6b 01       	movw	r12, r22
    1db8:	7c 01       	movw	r14, r24
    1dba:	ad b7       	in	r26, 0x3d	; 61
    1dbc:	be b7       	in	r27, 0x3e	; 62
    1dbe:	19 97       	sbiw	r26, 0x09	; 9
    1dc0:	0f b6       	in	r0, 0x3f	; 63
    1dc2:	f8 94       	cli
    1dc4:	be bf       	out	0x3e, r27	; 62
    1dc6:	0f be       	out	0x3f, r0	; 63
    1dc8:	ad bf       	out	0x3d, r26	; 61
    1dca:	0d b7       	in	r16, 0x3d	; 61
    1dcc:	1e b7       	in	r17, 0x3e	; 62
    1dce:	0f 5f       	subi	r16, 0xFF	; 255
    1dd0:	1f 4f       	sbci	r17, 0xFF	; 255
    1dd2:	a2 01       	movw	r20, r4
    1dd4:	91 01       	movw	r18, r2
    1dd6:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    1dda:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1dde:	4b 01       	movw	r8, r22
    1de0:	5c 01       	movw	r10, r24
    1de2:	82 e3       	ldi	r24, 0x32	; 50
    1de4:	90 e0       	ldi	r25, 0x00	; 0
    1de6:	f8 01       	movw	r30, r16
    1de8:	91 83       	std	Z+1, r25	; 0x01
    1dea:	80 83       	st	Z, r24
    1dec:	c7 01       	movw	r24, r14
    1dee:	b6 01       	movw	r22, r12
    1df0:	a2 01       	movw	r20, r4
    1df2:	91 01       	movw	r18, r2
    1df4:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__subsf3>
    1df8:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    1dfc:	d8 01       	movw	r26, r16
    1dfe:	13 96       	adiw	r26, 0x03	; 3
    1e00:	7c 93       	st	X, r23
    1e02:	6e 93       	st	-X, r22
    1e04:	12 97       	sbiw	r26, 0x02	; 2
    1e06:	82 ec       	ldi	r24, 0xC2	; 194
    1e08:	91 e0       	ldi	r25, 0x01	; 1
    1e0a:	15 96       	adiw	r26, 0x05	; 5
    1e0c:	9c 93       	st	X, r25
    1e0e:	8e 93       	st	-X, r24
    1e10:	14 97       	sbiw	r26, 0x04	; 4
    1e12:	16 96       	adiw	r26, 0x06	; 6
    1e14:	1c 92       	st	X, r1
    1e16:	16 97       	sbiw	r26, 0x06	; 6
    1e18:	18 96       	adiw	r26, 0x08	; 8
    1e1a:	1c 92       	st	X, r1
    1e1c:	1e 92       	st	-X, r1
    1e1e:	17 97       	sbiw	r26, 0x07	; 7
    1e20:	81 e0       	ldi	r24, 0x01	; 1
    1e22:	62 e0       	ldi	r22, 0x02	; 2
    1e24:	47 2d       	mov	r20, r7
    1e26:	22 e3       	ldi	r18, 0x32	; 50
    1e28:	30 e0       	ldi	r19, 0x00	; 0
    1e2a:	84 01       	movw	r16, r8
    1e2c:	72 ec       	ldi	r23, 0xC2	; 194
    1e2e:	e7 2e       	mov	r14, r23
    1e30:	71 e0       	ldi	r23, 0x01	; 1
    1e32:	f7 2e       	mov	r15, r23
    1e34:	cc 24       	eor	r12, r12
    1e36:	aa 24       	eor	r10, r10
    1e38:	bb 24       	eor	r11, r11
    1e3a:	87 2c       	mov	r8, r7
    1e3c:	82 c0       	rjmp	.+260    	; 0x1f42 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
    1e3e:	c8 01       	movw	r24, r16
    1e40:	b7 01       	movw	r22, r14
    1e42:	20 e0       	ldi	r18, 0x00	; 0
    1e44:	30 e0       	ldi	r19, 0x00	; 0
    1e46:	40 e2       	ldi	r20, 0x20	; 32
    1e48:	51 e4       	ldi	r21, 0x41	; 65
    1e4a:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    1e4e:	88 23       	and	r24, r24
    1e50:	b4 f5       	brge	.+108    	; 0x1ebe <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1e52:	c2 01       	movw	r24, r4
    1e54:	b1 01       	movw	r22, r2
    1e56:	0e 94 b8 29 	call	0x5370	; 0x5370 <__fixsfsi>
    1e5a:	8b 01       	movw	r16, r22
    1e5c:	77 ff       	sbrs	r23, 7
    1e5e:	03 c0       	rjmp	.+6      	; 0x1e66 <moveAway+0x1aa>
    1e60:	10 95       	com	r17
    1e62:	01 95       	neg	r16
    1e64:	1f 4f       	sbci	r17, 0xFF	; 255
    1e66:	2d b7       	in	r18, 0x3d	; 61
    1e68:	3e b7       	in	r19, 0x3e	; 62
    1e6a:	29 50       	subi	r18, 0x09	; 9
    1e6c:	30 40       	sbci	r19, 0x00	; 0
    1e6e:	0f b6       	in	r0, 0x3f	; 63
    1e70:	f8 94       	cli
    1e72:	3e bf       	out	0x3e, r19	; 62
    1e74:	0f be       	out	0x3f, r0	; 63
    1e76:	2d bf       	out	0x3d, r18	; 61
    1e78:	ed b7       	in	r30, 0x3d	; 61
    1e7a:	fe b7       	in	r31, 0x3e	; 62
    1e7c:	31 96       	adiw	r30, 0x01	; 1
    1e7e:	88 ec       	ldi	r24, 0xC8	; 200
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	ad b7       	in	r26, 0x3d	; 61
    1e84:	be b7       	in	r27, 0x3e	; 62
    1e86:	12 96       	adiw	r26, 0x02	; 2
    1e88:	9c 93       	st	X, r25
    1e8a:	8e 93       	st	-X, r24
    1e8c:	11 97       	sbiw	r26, 0x01	; 1
    1e8e:	13 83       	std	Z+3, r17	; 0x03
    1e90:	02 83       	std	Z+2, r16	; 0x02
    1e92:	82 ec       	ldi	r24, 0xC2	; 194
    1e94:	91 e0       	ldi	r25, 0x01	; 1
    1e96:	95 83       	std	Z+5, r25	; 0x05
    1e98:	84 83       	std	Z+4, r24	; 0x04
    1e9a:	16 82       	std	Z+6, r1	; 0x06
    1e9c:	10 86       	std	Z+8, r1	; 0x08
    1e9e:	17 82       	std	Z+7, r1	; 0x07
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	62 e0       	ldi	r22, 0x02	; 2
    1ea4:	40 e0       	ldi	r20, 0x00	; 0
    1ea6:	28 ec       	ldi	r18, 0xC8	; 200
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	52 ec       	ldi	r21, 0xC2	; 194
    1eac:	e5 2e       	mov	r14, r21
    1eae:	51 e0       	ldi	r21, 0x01	; 1
    1eb0:	f5 2e       	mov	r15, r21
    1eb2:	cc 24       	eor	r12, r12
    1eb4:	aa 24       	eor	r10, r10
    1eb6:	bb 24       	eor	r11, r11
    1eb8:	88 24       	eor	r8, r8
    1eba:	83 94       	inc	r8
    1ebc:	42 c0       	rjmp	.+132    	; 0x1f42 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
    1ebe:	69 81       	ldd	r22, Y+1	; 0x01
    1ec0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ec2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e2       	ldi	r20, 0x20	; 32
    1ecc:	51 e4       	ldi	r21, 0x41	; 65
    1ece:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    1ed2:	87 fd       	sbrc	r24, 7
    1ed4:	02 c0       	rjmp	.+4      	; 0x1eda <moveAway+0x21e>
    1ed6:	80 e0       	ldi	r24, 0x00	; 0
    1ed8:	3f c0       	rjmp	.+126    	; 0x1f58 <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1eda:	c2 01       	movw	r24, r4
    1edc:	b1 01       	movw	r22, r2
    1ede:	0e 94 b8 29 	call	0x5370	; 0x5370 <__fixsfsi>
    1ee2:	8b 01       	movw	r16, r22
    1ee4:	77 ff       	sbrs	r23, 7
    1ee6:	03 c0       	rjmp	.+6      	; 0x1eee <moveAway+0x232>
    1ee8:	10 95       	com	r17
    1eea:	01 95       	neg	r16
    1eec:	1f 4f       	sbci	r17, 0xFF	; 255
    1eee:	2d b7       	in	r18, 0x3d	; 61
    1ef0:	3e b7       	in	r19, 0x3e	; 62
    1ef2:	29 50       	subi	r18, 0x09	; 9
    1ef4:	30 40       	sbci	r19, 0x00	; 0
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	3e bf       	out	0x3e, r19	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	2d bf       	out	0x3d, r18	; 61
    1f00:	ed b7       	in	r30, 0x3d	; 61
    1f02:	fe b7       	in	r31, 0x3e	; 62
    1f04:	31 96       	adiw	r30, 0x01	; 1
    1f06:	88 ec       	ldi	r24, 0xC8	; 200
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	ad b7       	in	r26, 0x3d	; 61
    1f0c:	be b7       	in	r27, 0x3e	; 62
    1f0e:	12 96       	adiw	r26, 0x02	; 2
    1f10:	9c 93       	st	X, r25
    1f12:	8e 93       	st	-X, r24
    1f14:	11 97       	sbiw	r26, 0x01	; 1
    1f16:	13 83       	std	Z+3, r17	; 0x03
    1f18:	02 83       	std	Z+2, r16	; 0x02
    1f1a:	82 ec       	ldi	r24, 0xC2	; 194
    1f1c:	91 e0       	ldi	r25, 0x01	; 1
    1f1e:	95 83       	std	Z+5, r25	; 0x05
    1f20:	84 83       	std	Z+4, r24	; 0x04
    1f22:	16 82       	std	Z+6, r1	; 0x06
    1f24:	10 86       	std	Z+8, r1	; 0x08
    1f26:	17 82       	std	Z+7, r1	; 0x07
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	62 e0       	ldi	r22, 0x02	; 2
    1f2c:	41 e0       	ldi	r20, 0x01	; 1
    1f2e:	28 ec       	ldi	r18, 0xC8	; 200
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	92 ec       	ldi	r25, 0xC2	; 194
    1f34:	e9 2e       	mov	r14, r25
    1f36:	91 e0       	ldi	r25, 0x01	; 1
    1f38:	f9 2e       	mov	r15, r25
    1f3a:	cc 24       	eor	r12, r12
    1f3c:	aa 24       	eor	r10, r10
    1f3e:	bb 24       	eor	r11, r11
    1f40:	88 24       	eor	r8, r8
    1f42:	0e 94 11 19 	call	0x3222	; 0x3222 <STEPPER_move>
    1f46:	81 e0       	ldi	r24, 0x01	; 1
    1f48:	ed b7       	in	r30, 0x3d	; 61
    1f4a:	fe b7       	in	r31, 0x3e	; 62
    1f4c:	39 96       	adiw	r30, 0x09	; 9
    1f4e:	0f b6       	in	r0, 0x3f	; 63
    1f50:	f8 94       	cli
    1f52:	fe bf       	out	0x3e, r31	; 62
    1f54:	0f be       	out	0x3f, r0	; 63
    1f56:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
    1f58:	0f 90       	pop	r0
    1f5a:	0f 90       	pop	r0
    1f5c:	0f 90       	pop	r0
    1f5e:	0f 90       	pop	r0
    1f60:	cf 91       	pop	r28
    1f62:	df 91       	pop	r29
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	ef 90       	pop	r14
    1f6c:	df 90       	pop	r13
    1f6e:	cf 90       	pop	r12
    1f70:	bf 90       	pop	r11
    1f72:	af 90       	pop	r10
    1f74:	9f 90       	pop	r9
    1f76:	8f 90       	pop	r8
    1f78:	7f 90       	pop	r7
    1f7a:	6f 90       	pop	r6
    1f7c:	5f 90       	pop	r5
    1f7e:	4f 90       	pop	r4
    1f80:	3f 90       	pop	r3
    1f82:	2f 90       	pop	r2
    1f84:	08 95       	ret

00001f86 <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    1f86:	7f 92       	push	r7
    1f88:	8f 92       	push	r8
    1f8a:	9f 92       	push	r9
    1f8c:	af 92       	push	r10
    1f8e:	bf 92       	push	r11
    1f90:	cf 92       	push	r12
    1f92:	df 92       	push	r13
    1f94:	ef 92       	push	r14
    1f96:	ff 92       	push	r15
    1f98:	0f 93       	push	r16
    1f9a:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    1f9c:	00 e0       	ldi	r16, 0x00	; 0
    1f9e:	60 91 cc 03 	lds	r22, 0x03CC
    1fa2:	70 91 cd 03 	lds	r23, 0x03CD
    1fa6:	80 91 ce 03 	lds	r24, 0x03CE
    1faa:	90 91 cf 03 	lds	r25, 0x03CF
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	40 e0       	ldi	r20, 0x00	; 0
    1fb4:	51 e4       	ldi	r21, 0x41	; 65
    1fb6:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    1fba:	88 23       	and	r24, r24
    1fbc:	0c f4       	brge	.+2      	; 0x1fc0 <moveWall+0x3a>
    1fbe:	01 e0       	ldi	r16, 0x01	; 1
    1fc0:	10 e0       	ldi	r17, 0x00	; 0
    1fc2:	60 91 d0 03 	lds	r22, 0x03D0
    1fc6:	70 91 d1 03 	lds	r23, 0x03D1
    1fca:	80 91 d2 03 	lds	r24, 0x03D2
    1fce:	90 91 d3 03 	lds	r25, 0x03D3
    1fd2:	20 e0       	ldi	r18, 0x00	; 0
    1fd4:	30 e0       	ldi	r19, 0x00	; 0
    1fd6:	40 e7       	ldi	r20, 0x70	; 112
    1fd8:	51 e4       	ldi	r21, 0x41	; 65
    1fda:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    1fde:	88 23       	and	r24, r24
    1fe0:	0c f4       	brge	.+2      	; 0x1fe4 <moveWall+0x5e>
    1fe2:	11 e0       	ldi	r17, 0x01	; 1
    1fe4:	01 2b       	or	r16, r17
    1fe6:	10 e0       	ldi	r17, 0x00	; 0
    1fe8:	60 91 c8 03 	lds	r22, 0x03C8
    1fec:	70 91 c9 03 	lds	r23, 0x03C9
    1ff0:	80 91 ca 03 	lds	r24, 0x03CA
    1ff4:	90 91 cb 03 	lds	r25, 0x03CB
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e2       	ldi	r20, 0x20	; 32
    1ffe:	51 e4       	ldi	r21, 0x41	; 65
    2000:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    2004:	88 23       	and	r24, r24
    2006:	0c f4       	brge	.+2      	; 0x200a <moveWall+0x84>
    2008:	11 e0       	ldi	r17, 0x01	; 1
    200a:	01 2b       	or	r16, r17
    200c:	10 e0       	ldi	r17, 0x00	; 0
    200e:	60 91 c4 03 	lds	r22, 0x03C4
    2012:	70 91 c5 03 	lds	r23, 0x03C5
    2016:	80 91 c6 03 	lds	r24, 0x03C6
    201a:	90 91 c7 03 	lds	r25, 0x03C7
    201e:	20 e0       	ldi	r18, 0x00	; 0
    2020:	30 e0       	ldi	r19, 0x00	; 0
    2022:	40 e2       	ldi	r20, 0x20	; 32
    2024:	51 e4       	ldi	r21, 0x41	; 65
    2026:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    202a:	88 23       	and	r24, r24
    202c:	0c f4       	brge	.+2      	; 0x2030 <moveWall+0xaa>
    202e:	11 e0       	ldi	r17, 0x01	; 1
    2030:	70 2e       	mov	r7, r16
    2032:	71 2a       	or	r7, r17
	if(!isWall){	
    2034:	09 f4       	brne	.+2      	; 0x2038 <moveWall+0xb2>
    2036:	27 c1       	rjmp	.+590    	; 0x2286 <moveWall+0x300>
		return isWall;
	}
	
	move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    2038:	60 e0       	ldi	r22, 0x00	; 0
    203a:	70 e0       	ldi	r23, 0x00	; 0
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	9f e4       	ldi	r25, 0x4F	; 79
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	40 e2       	ldi	r20, 0x20	; 32
    2046:	51 e4       	ldi	r21, 0x41	; 65
    2048:	79 01       	movw	r14, r18
    204a:	8a 01       	movw	r16, r20
    204c:	59 01       	movw	r10, r18
    204e:	6a 01       	movw	r12, r20
    2050:	88 24       	eor	r8, r8
    2052:	0e 94 fe 08 	call	0x11fc	; 0x11fc <move_arc_stnb>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2056:	60 91 c8 03 	lds	r22, 0x03C8
    205a:	70 91 c9 03 	lds	r23, 0x03C9
    205e:	80 91 ca 03 	lds	r24, 0x03CA
    2062:	90 91 cb 03 	lds	r25, 0x03CB
    2066:	a8 01       	movw	r20, r16
    2068:	97 01       	movw	r18, r14
    206a:	0e 94 9b 2a 	call	0x5536	; 0x5536 <__gesf2>
    206e:	18 16       	cp	r1, r24
    2070:	64 f4       	brge	.+24     	; 0x208a <moveWall+0x104>
		rtIR = IR_WALL_R_THRESH-15;
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	a0 ea       	ldi	r26, 0xA0	; 160
    2078:	b0 ec       	ldi	r27, 0xC0	; 192
    207a:	80 93 c8 03 	sts	0x03C8, r24
    207e:	90 93 c9 03 	sts	0x03C9, r25
    2082:	a0 93 ca 03 	sts	0x03CA, r26
    2086:	b0 93 cb 03 	sts	0x03CB, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    208a:	60 91 c4 03 	lds	r22, 0x03C4
    208e:	70 91 c5 03 	lds	r23, 0x03C5
    2092:	80 91 c6 03 	lds	r24, 0x03C6
    2096:	90 91 c7 03 	lds	r25, 0x03C7
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e2       	ldi	r20, 0x20	; 32
    20a0:	51 e4       	ldi	r21, 0x41	; 65
    20a2:	0e 94 9b 2a 	call	0x5536	; 0x5536 <__gesf2>
    20a6:	18 16       	cp	r1, r24
    20a8:	14 f0       	brlt	.+4      	; 0x20ae <moveWall+0x128>
    20aa:	dd 24       	eor	r13, r13
    20ac:	0e c0       	rjmp	.+28     	; 0x20ca <moveWall+0x144>
		ltIR = IR_WALL_L_THRESH-15;
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a0 ea       	ldi	r26, 0xA0	; 160
    20b4:	b0 ec       	ldi	r27, 0xC0	; 192
    20b6:	80 93 c4 03 	sts	0x03C4, r24
    20ba:	90 93 c5 03 	sts	0x03C5, r25
    20be:	a0 93 c6 03 	sts	0x03C6, r26
    20c2:	b0 93 c7 03 	sts	0x03C7, r27
    20c6:	dd 24       	eor	r13, r13
    20c8:	d3 94       	inc	r13
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    20ca:	e0 90 cc 03 	lds	r14, 0x03CC
    20ce:	f0 90 cd 03 	lds	r15, 0x03CD
    20d2:	00 91 ce 03 	lds	r16, 0x03CE
    20d6:	10 91 cf 03 	lds	r17, 0x03CF
    20da:	c8 01       	movw	r24, r16
    20dc:	b7 01       	movw	r22, r14
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	30 e0       	ldi	r19, 0x00	; 0
    20e2:	40 e0       	ldi	r20, 0x00	; 0
    20e4:	51 e4       	ldi	r21, 0x41	; 65
    20e6:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    20ea:	88 23       	and	r24, r24
    20ec:	24 f5       	brge	.+72     	; 0x2136 <moveWall+0x1b0>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    20ee:	dd 20       	and	r13, r13
    20f0:	29 f0       	breq	.+10     	; 0x20fc <moveWall+0x176>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    20f2:	60 e0       	ldi	r22, 0x00	; 0
    20f4:	70 e0       	ldi	r23, 0x00	; 0
    20f6:	8a e7       	ldi	r24, 0x7A	; 122
    20f8:	94 e4       	ldi	r25, 0x44	; 68
    20fa:	04 c0       	rjmp	.+8      	; 0x2104 <moveWall+0x17e>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    20fc:	60 e0       	ldi	r22, 0x00	; 0
    20fe:	70 e0       	ldi	r23, 0x00	; 0
    2100:	8a e7       	ldi	r24, 0x7A	; 122
    2102:	94 ec       	ldi	r25, 0xC4	; 196
    2104:	a8 01       	movw	r20, r16
    2106:	97 01       	movw	r18, r14
    2108:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    210c:	20 91 c4 03 	lds	r18, 0x03C4
    2110:	30 91 c5 03 	lds	r19, 0x03C5
    2114:	40 91 c6 03 	lds	r20, 0x03C6
    2118:	50 91 c7 03 	lds	r21, 0x03C7
    211c:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    2120:	9b 01       	movw	r18, r22
    2122:	ac 01       	movw	r20, r24
    2124:	60 91 c8 03 	lds	r22, 0x03C8
    2128:	70 91 c9 03 	lds	r23, 0x03C9
    212c:	80 91 ca 03 	lds	r24, 0x03CA
    2130:	90 91 cb 03 	lds	r25, 0x03CB
    2134:	10 c0       	rjmp	.+32     	; 0x2156 <moveWall+0x1d0>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2136:	60 91 c8 03 	lds	r22, 0x03C8
    213a:	70 91 c9 03 	lds	r23, 0x03C9
    213e:	80 91 ca 03 	lds	r24, 0x03CA
    2142:	90 91 cb 03 	lds	r25, 0x03CB
    2146:	20 91 c4 03 	lds	r18, 0x03C4
    214a:	30 91 c5 03 	lds	r19, 0x03C5
    214e:	40 91 c6 03 	lds	r20, 0x03C6
    2152:	50 91 c7 03 	lds	r21, 0x03C7
    2156:	0e 94 e7 28 	call	0x51ce	; 0x51ce <__subsf3>
    215a:	e6 2f       	mov	r30, r22
	}

	// Use the PID controller function to calculate error
	float effort = pidController(error, 0);
    215c:	2e 2f       	mov	r18, r30
    215e:	37 2f       	mov	r19, r23
    2160:	48 2f       	mov	r20, r24
    2162:	59 2f       	mov	r21, r25
    2164:	b9 01       	movw	r22, r18
    2166:	ca 01       	movw	r24, r20
    2168:	40 e0       	ldi	r20, 0x00	; 0
    216a:	0e 94 17 08 	call	0x102e	; 0x102e <pidController>
    216e:	6b 01       	movw	r12, r22
    2170:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2172:	0e 94 b8 29 	call	0x5370	; 0x5370 <__fixsfsi>
    2176:	8b 01       	movw	r16, r22
    2178:	77 ff       	sbrs	r23, 7
    217a:	03 c0       	rjmp	.+6      	; 0x2182 <moveWall+0x1fc>
    217c:	10 95       	com	r17
    217e:	01 95       	neg	r16
    2180:	1f 4f       	sbci	r17, 0xFF	; 255
    2182:	05 36       	cpi	r16, 0x65	; 101
    2184:	11 05       	cpc	r17, r1
    2186:	fc f0       	brlt	.+62     	; 0x21c6 <moveWall+0x240>
    2188:	c7 01       	movw	r24, r14
    218a:	b6 01       	movw	r22, r12
    218c:	20 e0       	ldi	r18, 0x00	; 0
    218e:	30 e0       	ldi	r19, 0x00	; 0
    2190:	40 e0       	ldi	r20, 0x00	; 0
    2192:	50 e0       	ldi	r21, 0x00	; 0
    2194:	0e 94 4c 29 	call	0x5298	; 0x5298 <__cmpsf2>
    2198:	88 23       	and	r24, r24
    219a:	a9 f0       	breq	.+42     	; 0x21c6 <moveWall+0x240>
		effort = MAX_EFFORT*(effort/abs(effort));
    219c:	b8 01       	movw	r22, r16
    219e:	88 27       	eor	r24, r24
    21a0:	77 fd       	sbrc	r23, 7
    21a2:	80 95       	com	r24
    21a4:	98 2f       	mov	r25, r24
    21a6:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__floatsisf>
    21aa:	9b 01       	movw	r18, r22
    21ac:	ac 01       	movw	r20, r24
    21ae:	c7 01       	movw	r24, r14
    21b0:	b6 01       	movw	r22, r12
    21b2:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	48 ec       	ldi	r20, 0xC8	; 200
    21bc:	52 e4       	ldi	r21, 0x42	; 66
    21be:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    21c2:	6b 01       	movw	r12, r22
    21c4:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    21c6:	c7 01       	movw	r24, r14
    21c8:	b6 01       	movw	r22, r12
    21ca:	20 e0       	ldi	r18, 0x00	; 0
    21cc:	30 e0       	ldi	r19, 0x00	; 0
    21ce:	48 ec       	ldi	r20, 0xC8	; 200
    21d0:	52 e4       	ldi	r21, 0x42	; 66
    21d2:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    21d6:	6b 01       	movw	r12, r22
    21d8:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    21da:	8d b7       	in	r24, 0x3d	; 61
    21dc:	9e b7       	in	r25, 0x3e	; 62
    21de:	09 97       	sbiw	r24, 0x09	; 9
    21e0:	0f b6       	in	r0, 0x3f	; 63
    21e2:	f8 94       	cli
    21e4:	9e bf       	out	0x3e, r25	; 62
    21e6:	0f be       	out	0x3f, r0	; 63
    21e8:	8d bf       	out	0x3d, r24	; 61
    21ea:	0d b7       	in	r16, 0x3d	; 61
    21ec:	1e b7       	in	r17, 0x3e	; 62
    21ee:	0f 5f       	subi	r16, 0xFF	; 255
    21f0:	1f 4f       	sbci	r17, 0xFF	; 255
    21f2:	c7 01       	movw	r24, r14
    21f4:	b6 01       	movw	r22, r12
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	48 ec       	ldi	r20, 0xC8	; 200
    21fc:	52 e4       	ldi	r21, 0x42	; 66
    21fe:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    2202:	20 e0       	ldi	r18, 0x00	; 0
    2204:	30 e0       	ldi	r19, 0x00	; 0
    2206:	48 ec       	ldi	r20, 0xC8	; 200
    2208:	52 e4       	ldi	r21, 0x42	; 66
    220a:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    220e:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    2212:	4b 01       	movw	r8, r22
    2214:	5c 01       	movw	r10, r24
    2216:	82 e3       	ldi	r24, 0x32	; 50
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	f8 01       	movw	r30, r16
    221c:	91 83       	std	Z+1, r25	; 0x01
    221e:	80 83       	st	Z, r24
    2220:	c7 01       	movw	r24, r14
    2222:	b6 01       	movw	r22, r12
    2224:	20 e0       	ldi	r18, 0x00	; 0
    2226:	30 e0       	ldi	r19, 0x00	; 0
    2228:	48 ec       	ldi	r20, 0xC8	; 200
    222a:	52 ec       	ldi	r21, 0xC2	; 194
    222c:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    2230:	20 e0       	ldi	r18, 0x00	; 0
    2232:	30 e0       	ldi	r19, 0x00	; 0
    2234:	48 ec       	ldi	r20, 0xC8	; 200
    2236:	52 e4       	ldi	r21, 0x42	; 66
    2238:	0e 94 e8 28 	call	0x51d0	; 0x51d0 <__addsf3>
    223c:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    2240:	f8 01       	movw	r30, r16
    2242:	73 83       	std	Z+3, r23	; 0x03
    2244:	62 83       	std	Z+2, r22	; 0x02
    2246:	82 ec       	ldi	r24, 0xC2	; 194
    2248:	91 e0       	ldi	r25, 0x01	; 1
    224a:	95 83       	std	Z+5, r25	; 0x05
    224c:	84 83       	std	Z+4, r24	; 0x04
    224e:	16 82       	std	Z+6, r1	; 0x06
    2250:	10 86       	std	Z+8, r1	; 0x08
    2252:	17 82       	std	Z+7, r1	; 0x07
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	62 e0       	ldi	r22, 0x02	; 2
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	22 e3       	ldi	r18, 0x32	; 50
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	84 01       	movw	r16, r8
    2260:	e2 ec       	ldi	r30, 0xC2	; 194
    2262:	ee 2e       	mov	r14, r30
    2264:	e1 e0       	ldi	r30, 0x01	; 1
    2266:	fe 2e       	mov	r15, r30
    2268:	cc 24       	eor	r12, r12
    226a:	aa 24       	eor	r10, r10
    226c:	bb 24       	eor	r11, r11
    226e:	88 24       	eor	r8, r8
    2270:	83 94       	inc	r8
    2272:	0e 94 11 19 	call	0x3222	; 0x3222 <STEPPER_move>
    2276:	8d b7       	in	r24, 0x3d	; 61
    2278:	9e b7       	in	r25, 0x3e	; 62
    227a:	09 96       	adiw	r24, 0x09	; 9
    227c:	0f b6       	in	r0, 0x3f	; 63
    227e:	f8 94       	cli
    2280:	9e bf       	out	0x3e, r25	; 62
    2282:	0f be       	out	0x3f, r0	; 63
    2284:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    2286:	87 2d       	mov	r24, r7
    2288:	1f 91       	pop	r17
    228a:	0f 91       	pop	r16
    228c:	ff 90       	pop	r15
    228e:	ef 90       	pop	r14
    2290:	df 90       	pop	r13
    2292:	cf 90       	pop	r12
    2294:	bf 90       	pop	r11
    2296:	af 90       	pop	r10
    2298:	9f 90       	pop	r9
    229a:	8f 90       	pop	r8
    229c:	7f 90       	pop	r7
    229e:	08 95       	ret

000022a0 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{
	unsigned char sensors = ATTINY_get_sensors();
    22a0:	0e 94 22 1c 	call	0x3844	; 0x3844 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    22a4:	28 2f       	mov	r18, r24
    22a6:	21 70       	andi	r18, 0x01	; 1
    22a8:	20 93 d4 05 	sts	0x05D4, r18
	leftContact =  (0b00000010 & sensors)>>1;
    22ac:	90 e0       	ldi	r25, 0x00	; 0
    22ae:	82 70       	andi	r24, 0x02	; 2
    22b0:	90 70       	andi	r25, 0x00	; 0
    22b2:	95 95       	asr	r25
    22b4:	87 95       	ror	r24
    22b6:	80 93 d5 05 	sts	0x05D5, r24
	
	
}
    22ba:	08 95       	ret

000022bc <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    22bc:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    22c0:	60 93 d4 03 	sts	0x03D4, r22
    22c4:	70 93 d5 03 	sts	0x03D5, r23
    22c8:	80 93 d6 03 	sts	0x03D6, r24
    22cc:	90 93 d7 03 	sts	0x03D7, r25
	leftLightVolt = getLeftLight();
    22d0:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    22d4:	60 93 d8 03 	sts	0x03D8, r22
    22d8:	70 93 d9 03 	sts	0x03D9, r23
    22dc:	80 93 da 03 	sts	0x03DA, r24
    22e0:	90 93 db 03 	sts	0x03DB, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    22e4:	08 95       	ret

000022e6 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    22e6:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    22ea:	60 93 cc 03 	sts	0x03CC, r22
    22ee:	70 93 cd 03 	sts	0x03CD, r23
    22f2:	80 93 ce 03 	sts	0x03CE, r24
    22f6:	90 93 cf 03 	sts	0x03CF, r25
	bkIR = getBackIR();
    22fa:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    22fe:	60 93 d0 03 	sts	0x03D0, r22
    2302:	70 93 d1 03 	sts	0x03D1, r23
    2306:	80 93 d2 03 	sts	0x03D2, r24
    230a:	90 93 d3 03 	sts	0x03D3, r25
	ltIR = getLeftIR();
    230e:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    2312:	60 93 c4 03 	sts	0x03C4, r22
    2316:	70 93 c5 03 	sts	0x03C5, r23
    231a:	80 93 c6 03 	sts	0x03C6, r24
    231e:	90 93 c7 03 	sts	0x03C7, r25
	rtIR = getRightIR();
    2322:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    2326:	60 93 c8 03 	sts	0x03C8, r22
    232a:	70 93 c9 03 	sts	0x03C9, r23
    232e:	80 93 ca 03 	sts	0x03CA, r24
    2332:	90 93 cb 03 	sts	0x03CB, r25
}
    2336:	08 95       	ret

00002338 <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    2338:	8f 92       	push	r8
    233a:	af 92       	push	r10
    233c:	bf 92       	push	r11
    233e:	cf 92       	push	r12
    2340:	df 92       	push	r13
    2342:	ef 92       	push	r14
    2344:	ff 92       	push	r15
    2346:	0f 93       	push	r16
    2348:	1f 93       	push	r17
    234a:	cf 93       	push	r28
    234c:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    234e:	0e 94 49 18 	call	0x3092	; 0x3092 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    2352:	67 2b       	or	r22, r23
    2354:	09 f0       	breq	.+2      	; 0x2358 <moveWander+0x20>
    2356:	76 c0       	rjmp	.+236    	; 0x2444 <moveWander+0x10c>
    2358:	89 2b       	or	r24, r25
    235a:	09 f0       	breq	.+2      	; 0x235e <moveWander+0x26>
    235c:	73 c0       	rjmp	.+230    	; 0x2444 <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    235e:	0e 94 f7 31 	call	0x63ee	; 0x63ee <rand>
    2362:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    2364:	0e 94 f7 31 	call	0x63ee	; 0x63ee <rand>
    2368:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    236a:	0e 94 f7 31 	call	0x63ee	; 0x63ee <rand>
    236e:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    2370:	0e 94 f7 31 	call	0x63ee	; 0x63ee <rand>
    2374:	20 e0       	ldi	r18, 0x00	; 0
    2376:	6a e0       	ldi	r22, 0x0A	; 10
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	0e 94 28 30 	call	0x6050	; 0x6050 <__divmodhi4>
    237e:	08 97       	sbiw	r24, 0x08	; 8
    2380:	0c f0       	brlt	.+2      	; 0x2384 <moveWander+0x4c>
    2382:	21 e0       	ldi	r18, 0x01	; 1
    2384:	82 2e       	mov	r8, r18
    2386:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    2388:	c8 01       	movw	r24, r16
    238a:	60 e9       	ldi	r22, 0x90	; 144
    238c:	71 e0       	ldi	r23, 0x01	; 1
    238e:	0e 94 28 30 	call	0x6050	; 0x6050 <__divmodhi4>
    2392:	b0 e9       	ldi	r27, 0x90	; 144
    2394:	ab 2e       	mov	r10, r27
    2396:	b1 e0       	ldi	r27, 0x01	; 1
    2398:	bb 2e       	mov	r11, r27
    239a:	a8 0e       	add	r10, r24
    239c:	b9 1e       	adc	r11, r25
    239e:	8d b7       	in	r24, 0x3d	; 61
    23a0:	9e b7       	in	r25, 0x3e	; 62
    23a2:	09 97       	sbiw	r24, 0x09	; 9
    23a4:	0f b6       	in	r0, 0x3f	; 63
    23a6:	f8 94       	cli
    23a8:	9e bf       	out	0x3e, r25	; 62
    23aa:	0f be       	out	0x3f, r0	; 63
    23ac:	8d bf       	out	0x3d, r24	; 61
    23ae:	0d b7       	in	r16, 0x3d	; 61
    23b0:	1e b7       	in	r17, 0x3e	; 62
    23b2:	0f 5f       	subi	r16, 0xFF	; 255
    23b4:	1f 4f       	sbci	r17, 0xFF	; 255
    23b6:	c7 01       	movw	r24, r14
    23b8:	68 ec       	ldi	r22, 0xC8	; 200
    23ba:	70 e0       	ldi	r23, 0x00	; 0
    23bc:	0e 94 28 30 	call	0x6050	; 0x6050 <__divmodhi4>
    23c0:	88 53       	subi	r24, 0x38	; 56
    23c2:	9f 4f       	sbci	r25, 0xFF	; 255
    23c4:	aa 27       	eor	r26, r26
    23c6:	97 fd       	sbrc	r25, 7
    23c8:	a0 95       	com	r26
    23ca:	ba 2f       	mov	r27, r26
    23cc:	bc 01       	movw	r22, r24
    23ce:	cd 01       	movw	r24, r26
    23d0:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__floatsisf>
    23d4:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    23d8:	6b 01       	movw	r12, r22
    23da:	7c 01       	movw	r14, r24
    23dc:	f8 01       	movw	r30, r16
    23de:	b1 82       	std	Z+1, r11	; 0x01
    23e0:	a0 82       	st	Z, r10
    23e2:	ce 01       	movw	r24, r28
    23e4:	68 ec       	ldi	r22, 0xC8	; 200
    23e6:	70 e0       	ldi	r23, 0x00	; 0
    23e8:	0e 94 28 30 	call	0x6050	; 0x6050 <__divmodhi4>
    23ec:	88 53       	subi	r24, 0x38	; 56
    23ee:	9f 4f       	sbci	r25, 0xFF	; 255
    23f0:	aa 27       	eor	r26, r26
    23f2:	97 fd       	sbrc	r25, 7
    23f4:	a0 95       	com	r26
    23f6:	ba 2f       	mov	r27, r26
    23f8:	bc 01       	movw	r22, r24
    23fa:	cd 01       	movw	r24, r26
    23fc:	0e 94 eb 29 	call	0x53d6	; 0x53d6 <__floatsisf>
    2400:	0e 94 bd 29 	call	0x537a	; 0x537a <__fixunssfsi>
    2404:	f8 01       	movw	r30, r16
    2406:	73 83       	std	Z+3, r23	; 0x03
    2408:	62 83       	std	Z+2, r22	; 0x02
    240a:	82 ec       	ldi	r24, 0xC2	; 194
    240c:	91 e0       	ldi	r25, 0x01	; 1
    240e:	95 83       	std	Z+5, r25	; 0x05
    2410:	84 83       	std	Z+4, r24	; 0x04
    2412:	16 82       	std	Z+6, r1	; 0x06
    2414:	10 86       	std	Z+8, r1	; 0x08
    2416:	17 82       	std	Z+7, r1	; 0x07
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	62 e0       	ldi	r22, 0x02	; 2
    241c:	48 2d       	mov	r20, r8
    241e:	95 01       	movw	r18, r10
    2420:	86 01       	movw	r16, r12
    2422:	a2 ec       	ldi	r26, 0xC2	; 194
    2424:	ea 2e       	mov	r14, r26
    2426:	a1 e0       	ldi	r26, 0x01	; 1
    2428:	fa 2e       	mov	r15, r26
    242a:	cc 24       	eor	r12, r12
    242c:	aa 24       	eor	r10, r10
    242e:	bb 24       	eor	r11, r11
    2430:	0e 94 11 19 	call	0x3222	; 0x3222 <STEPPER_move>
    2434:	8d b7       	in	r24, 0x3d	; 61
    2436:	9e b7       	in	r25, 0x3e	; 62
    2438:	09 96       	adiw	r24, 0x09	; 9
    243a:	0f b6       	in	r0, 0x3f	; 63
    243c:	f8 94       	cli
    243e:	9e bf       	out	0x3e, r25	; 62
    2440:	0f be       	out	0x3f, r0	; 63
    2442:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	df 91       	pop	r29
    2448:	cf 91       	pop	r28
    244a:	1f 91       	pop	r17
    244c:	0f 91       	pop	r16
    244e:	ff 90       	pop	r15
    2450:	ef 90       	pop	r14
    2452:	df 90       	pop	r13
    2454:	cf 90       	pop	r12
    2456:	bf 90       	pop	r11
    2458:	af 90       	pop	r10
    245a:	8f 90       	pop	r8
    245c:	08 95       	ret

0000245e <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    245e:	ef 92       	push	r14
    2460:	ff 92       	push	r15
    2462:	0f 93       	push	r16
    2464:	1f 93       	push	r17
    2466:	cf 93       	push	r28
    2468:	df 93       	push	r29
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld && 0b1100;
    246a:	e0 91 e0 03 	lds	r30, 0x03E0
    246e:	e1 11       	cpse	r30, r1
    2470:	e1 e0       	ldi	r30, 0x01	; 1
    2472:	6e 2f       	mov	r22, r30
	unsigned char curCol = currentCellWorld && 0b0011;
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    2474:	20 91 e1 03 	lds	r18, 0x03E1
    2478:	7e 2f       	mov	r23, r30
    247a:	40 e0       	ldi	r20, 0x00	; 0
    247c:	50 e0       	ldi	r21, 0x00	; 0
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    247e:	fa 01       	movw	r30, r20
    2480:	ef 5a       	subi	r30, 0xAF	; 175
    2482:	fa 4f       	sbci	r31, 0xFA	; 250
    2484:	30 81       	ld	r19, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    2486:	e6 2f       	mov	r30, r22
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	ee 0f       	add	r30, r30
    248c:	ff 1f       	adc	r31, r31
    248e:	ee 0f       	add	r30, r30
    2490:	ff 1f       	adc	r31, r31
    2492:	e7 0f       	add	r30, r23
    2494:	f1 1d       	adc	r31, r1
    2496:	e3 5b       	subi	r30, 0xB3	; 179
    2498:	fc 4f       	sbci	r31, 0xFC	; 252
    249a:	90 81       	ld	r25, Z
    249c:	82 2f       	mov	r24, r18
    249e:	06 c0       	rjmp	.+12     	; 0x24ac <getGateways+0x4e>
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	while (orient!=0){
		// use the shift array to rotate
		cell = shifted[cell];
    24a0:	e9 2f       	mov	r30, r25
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	e3 5c       	subi	r30, 0xC3	; 195
    24a6:	fc 4f       	sbci	r31, 0xFC	; 252
    24a8:	90 81       	ld	r25, Z
		orient--;
    24aa:	81 50       	subi	r24, 0x01	; 1
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	while (orient!=0){
    24ac:	88 23       	and	r24, r24
    24ae:	c1 f7       	brne	.-16     	; 0x24a0 <getGateways+0x42>
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient);
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    24b0:	fa 01       	movw	r30, r20
    24b2:	e2 5b       	subi	r30, 0xB2	; 178
    24b4:	f9 4f       	sbci	r31, 0xF9	; 249
    24b6:	90 83       	st	Z, r25
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    24b8:	32 30       	cpi	r19, 0x02	; 2
    24ba:	89 f4       	brne	.+34     	; 0x24de <getGateways+0x80>
			switch(curOrient){
    24bc:	21 30       	cpi	r18, 0x01	; 1
    24be:	49 f0       	breq	.+18     	; 0x24d2 <getGateways+0x74>
    24c0:	21 30       	cpi	r18, 0x01	; 1
    24c2:	28 f0       	brcs	.+10     	; 0x24ce <getGateways+0x70>
    24c4:	22 30       	cpi	r18, 0x02	; 2
    24c6:	39 f0       	breq	.+14     	; 0x24d6 <getGateways+0x78>
    24c8:	23 30       	cpi	r18, 0x03	; 3
    24ca:	89 f4       	brne	.+34     	; 0x24ee <getGateways+0x90>
    24cc:	06 c0       	rjmp	.+12     	; 0x24da <getGateways+0x7c>
				case NORTH:
					curRow -= 1;
    24ce:	61 50       	subi	r22, 0x01	; 1
    24d0:	0e c0       	rjmp	.+28     	; 0x24ee <getGateways+0x90>
					break;
				case EAST:
					curCol += 1;
    24d2:	7f 5f       	subi	r23, 0xFF	; 255
    24d4:	0c c0       	rjmp	.+24     	; 0x24ee <getGateways+0x90>
					break;
				case SOUTH:
					curRow += 1;					
    24d6:	6f 5f       	subi	r22, 0xFF	; 255
    24d8:	0a c0       	rjmp	.+20     	; 0x24ee <getGateways+0x90>
					break;
				case WEST:
					curCol -= 1;					
    24da:	71 50       	subi	r23, 0x01	; 1
    24dc:	08 c0       	rjmp	.+16     	; 0x24ee <getGateways+0x90>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    24de:	33 30       	cpi	r19, 0x03	; 3
    24e0:	11 f4       	brne	.+4      	; 0x24e6 <getGateways+0x88>
			curOrient++;
    24e2:	2f 5f       	subi	r18, 0xFF	; 255
    24e4:	03 c0       	rjmp	.+6      	; 0x24ec <getGateways+0x8e>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    24e6:	31 30       	cpi	r19, 0x01	; 1
    24e8:	11 f4       	brne	.+4      	; 0x24ee <getGateways+0x90>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    24ea:	21 50       	subi	r18, 0x01	; 1
			curOrient = curOrient&0b11;
    24ec:	23 70       	andi	r18, 0x03	; 3
    24ee:	4f 5f       	subi	r20, 0xFF	; 255
    24f0:	5f 4f       	sbci	r21, 0xFF	; 255
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    24f2:	4c 30       	cpi	r20, 0x0C	; 12
    24f4:	51 05       	cpc	r21, r1
    24f6:	19 f6       	brne	.-122    	; 0x247e <getGateways+0x20>
    24f8:	c0 e0       	ldi	r28, 0x00	; 0
    24fa:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    24fc:	b4 e2       	ldi	r27, 0x24	; 36
    24fe:	eb 2e       	mov	r14, r27
    2500:	b1 e0       	ldi	r27, 0x01	; 1
    2502:	fb 2e       	mov	r15, r27
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    2504:	fe 01       	movw	r30, r28
    2506:	e2 5b       	subi	r30, 0xB2	; 178
    2508:	f9 4f       	sbci	r31, 0xF9	; 249
    250a:	00 81       	ld	r16, Z
		LCD_clear();
    250c:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2510:	20 2f       	mov	r18, r16
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	8d b7       	in	r24, 0x3d	; 61
    2516:	9e b7       	in	r25, 0x3e	; 62
    2518:	44 97       	sbiw	r24, 0x14	; 20
    251a:	0f b6       	in	r0, 0x3f	; 63
    251c:	f8 94       	cli
    251e:	9e bf       	out	0x3e, r25	; 62
    2520:	0f be       	out	0x3f, r0	; 63
    2522:	8d bf       	out	0x3d, r24	; 61
    2524:	ed b7       	in	r30, 0x3d	; 61
    2526:	fe b7       	in	r31, 0x3e	; 62
    2528:	31 96       	adiw	r30, 0x01	; 1
    252a:	ad b7       	in	r26, 0x3d	; 61
    252c:	be b7       	in	r27, 0x3e	; 62
    252e:	12 96       	adiw	r26, 0x02	; 2
    2530:	fc 92       	st	X, r15
    2532:	ee 92       	st	-X, r14
    2534:	11 97       	sbiw	r26, 0x01	; 1
    2536:	d3 83       	std	Z+3, r29	; 0x03
    2538:	c2 83       	std	Z+2, r28	; 0x02
    253a:	11 27       	eor	r17, r17
    253c:	07 fd       	sbrc	r16, 7
    253e:	10 95       	com	r17
    2540:	00 27       	eor	r16, r16
    2542:	11 0f       	add	r17, r17
    2544:	00 1f       	adc	r16, r16
    2546:	11 27       	eor	r17, r17
    2548:	15 83       	std	Z+5, r17	; 0x05
    254a:	04 83       	std	Z+4, r16	; 0x04
    254c:	c9 01       	movw	r24, r18
    254e:	76 e0       	ldi	r23, 0x06	; 6
    2550:	96 95       	lsr	r25
    2552:	87 95       	ror	r24
    2554:	7a 95       	dec	r23
    2556:	e1 f7       	brne	.-8      	; 0x2550 <getGateways+0xf2>
    2558:	81 70       	andi	r24, 0x01	; 1
    255a:	90 70       	andi	r25, 0x00	; 0
    255c:	97 83       	std	Z+7, r25	; 0x07
    255e:	86 83       	std	Z+6, r24	; 0x06
    2560:	c9 01       	movw	r24, r18
    2562:	65 e0       	ldi	r22, 0x05	; 5
    2564:	96 95       	lsr	r25
    2566:	87 95       	ror	r24
    2568:	6a 95       	dec	r22
    256a:	e1 f7       	brne	.-8      	; 0x2564 <getGateways+0x106>
    256c:	81 70       	andi	r24, 0x01	; 1
    256e:	90 70       	andi	r25, 0x00	; 0
    2570:	91 87       	std	Z+9, r25	; 0x09
    2572:	80 87       	std	Z+8, r24	; 0x08
    2574:	c9 01       	movw	r24, r18
    2576:	54 e0       	ldi	r21, 0x04	; 4
    2578:	96 95       	lsr	r25
    257a:	87 95       	ror	r24
    257c:	5a 95       	dec	r21
    257e:	e1 f7       	brne	.-8      	; 0x2578 <getGateways+0x11a>
    2580:	81 70       	andi	r24, 0x01	; 1
    2582:	90 70       	andi	r25, 0x00	; 0
    2584:	93 87       	std	Z+11, r25	; 0x0b
    2586:	82 87       	std	Z+10, r24	; 0x0a
    2588:	c9 01       	movw	r24, r18
    258a:	43 e0       	ldi	r20, 0x03	; 3
    258c:	96 95       	lsr	r25
    258e:	87 95       	ror	r24
    2590:	4a 95       	dec	r20
    2592:	e1 f7       	brne	.-8      	; 0x258c <getGateways+0x12e>
    2594:	81 70       	andi	r24, 0x01	; 1
    2596:	90 70       	andi	r25, 0x00	; 0
    2598:	95 87       	std	Z+13, r25	; 0x0d
    259a:	84 87       	std	Z+12, r24	; 0x0c
    259c:	c9 01       	movw	r24, r18
    259e:	96 95       	lsr	r25
    25a0:	87 95       	ror	r24
    25a2:	96 95       	lsr	r25
    25a4:	87 95       	ror	r24
    25a6:	81 70       	andi	r24, 0x01	; 1
    25a8:	90 70       	andi	r25, 0x00	; 0
    25aa:	97 87       	std	Z+15, r25	; 0x0f
    25ac:	86 87       	std	Z+14, r24	; 0x0e
    25ae:	c9 01       	movw	r24, r18
    25b0:	96 95       	lsr	r25
    25b2:	87 95       	ror	r24
    25b4:	81 70       	andi	r24, 0x01	; 1
    25b6:	90 70       	andi	r25, 0x00	; 0
    25b8:	91 8b       	std	Z+17, r25	; 0x11
    25ba:	80 8b       	std	Z+16, r24	; 0x10
    25bc:	21 70       	andi	r18, 0x01	; 1
    25be:	30 70       	andi	r19, 0x00	; 0
    25c0:	33 8b       	std	Z+19, r19	; 0x13
    25c2:	22 8b       	std	Z+18, r18	; 0x12
    25c4:	0e 94 20 33 	call	0x6640	; 0x6640 <printf>
		TMRSRVC_delay(500);//wait 1/2 seconds
    25c8:	8d b7       	in	r24, 0x3d	; 61
    25ca:	9e b7       	in	r25, 0x3e	; 62
    25cc:	44 96       	adiw	r24, 0x14	; 20
    25ce:	0f b6       	in	r0, 0x3f	; 63
    25d0:	f8 94       	cli
    25d2:	9e bf       	out	0x3e, r25	; 62
    25d4:	0f be       	out	0x3f, r0	; 63
    25d6:	8d bf       	out	0x3d, r24	; 61
    25d8:	84 ef       	ldi	r24, 0xF4	; 244
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
    25e0:	21 96       	adiw	r28, 0x01	; 1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    25e2:	cc 30       	cpi	r28, 0x0C	; 12
    25e4:	d1 05       	cpc	r29, r1
    25e6:	09 f0       	breq	.+2      	; 0x25ea <getGateways+0x18c>
    25e8:	8d cf       	rjmp	.-230    	; 0x2504 <getGateways+0xa6>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(500);//wait 1/2 seconds
	}
}
    25ea:	df 91       	pop	r29
    25ec:	cf 91       	pop	r28
    25ee:	1f 91       	pop	r17
    25f0:	0f 91       	pop	r16
    25f2:	ff 90       	pop	r15
    25f4:	ef 90       	pop	r14
    25f6:	08 95       	ret

000025f8 <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    25f8:	8f 92       	push	r8
    25fa:	af 92       	push	r10
    25fc:	bf 92       	push	r11
    25fe:	cf 92       	push	r12
    2600:	df 92       	push	r13
    2602:	ef 92       	push	r14
    2604:	ff 92       	push	r15
    2606:	0f 93       	push	r16
    2608:	1f 93       	push	r17
	LCD_clear();
    260a:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    260e:	e0 91 df 03 	lds	r30, 0x03DF
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	ef 5a       	subi	r30, 0xAF	; 175
    2616:	fa 4f       	sbci	r31, 0xFA	; 250
    2618:	e0 81       	ld	r30, Z
    261a:	e0 93 dd 03 	sts	0x03DD, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	e1 30       	cpi	r30, 0x01	; 1
    2622:	09 f4       	brne	.+2      	; 0x2626 <moveWorld+0x2e>
    2624:	81 e0       	ldi	r24, 0x01	; 1
    2626:	90 e0       	ldi	r25, 0x00	; 0
    2628:	e3 30       	cpi	r30, 0x03	; 3
    262a:	09 f4       	brne	.+2      	; 0x262e <moveWorld+0x36>
    262c:	91 e0       	ldi	r25, 0x01	; 1
    262e:	89 2b       	or	r24, r25
    2630:	28 2f       	mov	r18, r24
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e0       	ldi	r20, 0x00	; 0
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	80 91 de 03 	lds	r24, 0x03DE
    263c:	82 30       	cpi	r24, 0x02	; 2
    263e:	11 f4       	brne	.+4      	; 0x2644 <moveWorld+0x4c>
    2640:	41 e0       	ldi	r20, 0x01	; 1
    2642:	50 e0       	ldi	r21, 0x00	; 0
    2644:	24 23       	and	r18, r20
    2646:	35 23       	and	r19, r21
    2648:	23 2b       	or	r18, r19
    264a:	b9 f0       	breq	.+46     	; 0x267a <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE/2, 10, 10, 0);		
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	80 e0       	ldi	r24, 0x00	; 0
    2652:	9f e4       	ldi	r25, 0x4F	; 79
    2654:	28 e4       	ldi	r18, 0x48	; 72
    2656:	31 ee       	ldi	r19, 0xE1	; 225
    2658:	46 eb       	ldi	r20, 0xB6	; 182
    265a:	51 e4       	ldi	r21, 0x41	; 65
    265c:	0f 2e       	mov	r0, r31
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	ef 2e       	mov	r14, r31
    2662:	f0 e0       	ldi	r31, 0x00	; 0
    2664:	ff 2e       	mov	r15, r31
    2666:	f0 e2       	ldi	r31, 0x20	; 32
    2668:	0f 2f       	mov	r16, r31
    266a:	f1 e4       	ldi	r31, 0x41	; 65
    266c:	1f 2f       	mov	r17, r31
    266e:	f0 2d       	mov	r31, r0
    2670:	57 01       	movw	r10, r14
    2672:	68 01       	movw	r12, r16
    2674:	88 24       	eor	r8, r8
    2676:	0e 94 ae 0b 	call	0x175c	; 0x175c <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    267a:	20 91 de 03 	lds	r18, 0x03DE
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	21 30       	cpi	r18, 0x01	; 1
    2682:	09 f4       	brne	.+2      	; 0x2686 <moveWorld+0x8e>
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	23 30       	cpi	r18, 0x03	; 3
    268a:	09 f4       	brne	.+2      	; 0x268e <moveWorld+0x96>
    268c:	91 e0       	ldi	r25, 0x01	; 1
    268e:	89 2b       	or	r24, r25
    2690:	28 2f       	mov	r18, r24
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e0       	ldi	r20, 0x00	; 0
    2696:	50 e0       	ldi	r21, 0x00	; 0
    2698:	80 91 dd 03 	lds	r24, 0x03DD
    269c:	82 30       	cpi	r24, 0x02	; 2
    269e:	11 f4       	brne	.+4      	; 0x26a4 <moveWorld+0xac>
    26a0:	41 e0       	ldi	r20, 0x01	; 1
    26a2:	50 e0       	ldi	r21, 0x00	; 0
    26a4:	24 23       	and	r18, r20
    26a6:	35 23       	and	r19, r21
    26a8:	23 2b       	or	r18, r19
    26aa:	b9 f0       	breq	.+46     	; 0x26da <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE/2, 10, 10, 0);		
    26ac:	60 e0       	ldi	r22, 0x00	; 0
    26ae:	70 e0       	ldi	r23, 0x00	; 0
    26b0:	80 e0       	ldi	r24, 0x00	; 0
    26b2:	9f e4       	ldi	r25, 0x4F	; 79
    26b4:	28 e4       	ldi	r18, 0x48	; 72
    26b6:	31 ee       	ldi	r19, 0xE1	; 225
    26b8:	46 eb       	ldi	r20, 0xB6	; 182
    26ba:	51 e4       	ldi	r21, 0x41	; 65
    26bc:	0f 2e       	mov	r0, r31
    26be:	f0 e0       	ldi	r31, 0x00	; 0
    26c0:	ef 2e       	mov	r14, r31
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	ff 2e       	mov	r15, r31
    26c6:	f0 e2       	ldi	r31, 0x20	; 32
    26c8:	0f 2f       	mov	r16, r31
    26ca:	f1 e4       	ldi	r31, 0x41	; 65
    26cc:	1f 2f       	mov	r17, r31
    26ce:	f0 2d       	mov	r31, r0
    26d0:	57 01       	movw	r10, r14
    26d2:	68 01       	movw	r12, r16
    26d4:	88 24       	eor	r8, r8
    26d6:	0e 94 ae 0b 	call	0x175c	; 0x175c <move_arc_stwt>
	}
	
	switch(currentMove){
    26da:	80 91 dd 03 	lds	r24, 0x03DD
    26de:	82 30       	cpi	r24, 0x02	; 2
    26e0:	e1 f1       	breq	.+120    	; 0x275a <moveWorld+0x162>
    26e2:	83 30       	cpi	r24, 0x03	; 3
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <moveWorld+0xf0>
    26e6:	65 c0       	rjmp	.+202    	; 0x27b2 <moveWorld+0x1ba>
    26e8:	81 30       	cpi	r24, 0x01	; 1
    26ea:	09 f0       	breq	.+2      	; 0x26ee <moveWorld+0xf6>
    26ec:	a7 c0       	rjmp	.+334    	; 0x283c <moveWorld+0x244>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    26ee:	8d b7       	in	r24, 0x3d	; 61
    26f0:	9e b7       	in	r25, 0x3e	; 62
    26f2:	08 97       	sbiw	r24, 0x08	; 8
    26f4:	0f b6       	in	r0, 0x3f	; 63
    26f6:	f8 94       	cli
    26f8:	9e bf       	out	0x3e, r25	; 62
    26fa:	0f be       	out	0x3f, r0	; 63
    26fc:	8d bf       	out	0x3d, r24	; 61
    26fe:	ed b7       	in	r30, 0x3d	; 61
    2700:	fe b7       	in	r31, 0x3e	; 62
    2702:	31 96       	adiw	r30, 0x01	; 1
    2704:	86 e4       	ldi	r24, 0x46	; 70
    2706:	91 e0       	ldi	r25, 0x01	; 1
    2708:	ad b7       	in	r26, 0x3d	; 61
    270a:	be b7       	in	r27, 0x3e	; 62
    270c:	12 96       	adiw	r26, 0x02	; 2
    270e:	9c 93       	st	X, r25
    2710:	8e 93       	st	-X, r24
    2712:	11 97       	sbiw	r26, 0x01	; 1
    2714:	80 91 df 03 	lds	r24, 0x03DF
    2718:	82 83       	std	Z+2, r24	; 0x02
    271a:	13 82       	std	Z+3, r1	; 0x03
    271c:	80 91 e2 03 	lds	r24, 0x03E2
    2720:	84 83       	std	Z+4, r24	; 0x04
    2722:	15 82       	std	Z+5, r1	; 0x05
    2724:	80 91 e3 03 	lds	r24, 0x03E3
    2728:	86 83       	std	Z+6, r24	; 0x06
    272a:	17 82       	std	Z+7, r1	; 0x07
    272c:	0e 94 20 33 	call	0x6640	; 0x6640 <printf>
			TMRSRVC_delay(1000);//wait 1 seconds
    2730:	ed b7       	in	r30, 0x3d	; 61
    2732:	fe b7       	in	r31, 0x3e	; 62
    2734:	38 96       	adiw	r30, 0x08	; 8
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	fe bf       	out	0x3e, r31	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	ed bf       	out	0x3d, r30	; 61
    2740:	88 ee       	ldi	r24, 0xE8	; 232
    2742:	93 e0       	ldi	r25, 0x03	; 3
    2744:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2748:	60 e0       	ldi	r22, 0x00	; 0
    274a:	70 e0       	ldi	r23, 0x00	; 0
    274c:	80 e0       	ldi	r24, 0x00	; 0
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	27 ed       	ldi	r18, 0xD7	; 215
    2752:	33 ea       	ldi	r19, 0xA3	; 163
    2754:	42 e9       	ldi	r20, 0x92	; 146
    2756:	51 ec       	ldi	r21, 0xC1	; 193
    2758:	61 c0       	rjmp	.+194    	; 0x281c <moveWorld+0x224>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    275a:	8d b7       	in	r24, 0x3d	; 61
    275c:	9e b7       	in	r25, 0x3e	; 62
    275e:	08 97       	sbiw	r24, 0x08	; 8
    2760:	0f b6       	in	r0, 0x3f	; 63
    2762:	f8 94       	cli
    2764:	9e bf       	out	0x3e, r25	; 62
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	8d bf       	out	0x3d, r24	; 61
    276a:	ed b7       	in	r30, 0x3d	; 61
    276c:	fe b7       	in	r31, 0x3e	; 62
    276e:	31 96       	adiw	r30, 0x01	; 1
    2770:	81 e7       	ldi	r24, 0x71	; 113
    2772:	91 e0       	ldi	r25, 0x01	; 1
    2774:	ad b7       	in	r26, 0x3d	; 61
    2776:	be b7       	in	r27, 0x3e	; 62
    2778:	12 96       	adiw	r26, 0x02	; 2
    277a:	9c 93       	st	X, r25
    277c:	8e 93       	st	-X, r24
    277e:	11 97       	sbiw	r26, 0x01	; 1
    2780:	80 91 df 03 	lds	r24, 0x03DF
    2784:	82 83       	std	Z+2, r24	; 0x02
    2786:	13 82       	std	Z+3, r1	; 0x03
    2788:	80 91 e2 03 	lds	r24, 0x03E2
    278c:	84 83       	std	Z+4, r24	; 0x04
    278e:	15 82       	std	Z+5, r1	; 0x05
    2790:	80 91 e3 03 	lds	r24, 0x03E3
    2794:	86 83       	std	Z+6, r24	; 0x06
    2796:	17 82       	std	Z+7, r1	; 0x07
    2798:	0e 94 20 33 	call	0x6640	; 0x6640 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    279c:	ed b7       	in	r30, 0x3d	; 61
    279e:	fe b7       	in	r31, 0x3e	; 62
    27a0:	38 96       	adiw	r30, 0x08	; 8
    27a2:	0f b6       	in	r0, 0x3f	; 63
    27a4:	f8 94       	cli
    27a6:	fe bf       	out	0x3e, r31	; 62
    27a8:	0f be       	out	0x3f, r0	; 63
    27aa:	ed bf       	out	0x3d, r30	; 61
    27ac:	0e 94 c3 0f 	call	0x1f86	; 0x1f86 <moveWall>
    27b0:	57 c0       	rjmp	.+174    	; 0x2860 <moveWorld+0x268>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    27b2:	8d b7       	in	r24, 0x3d	; 61
    27b4:	9e b7       	in	r25, 0x3e	; 62
    27b6:	08 97       	sbiw	r24, 0x08	; 8
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	9e bf       	out	0x3e, r25	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	8d bf       	out	0x3d, r24	; 61
    27c2:	ed b7       	in	r30, 0x3d	; 61
    27c4:	fe b7       	in	r31, 0x3e	; 62
    27c6:	31 96       	adiw	r30, 0x01	; 1
    27c8:	8f e9       	ldi	r24, 0x9F	; 159
    27ca:	91 e0       	ldi	r25, 0x01	; 1
    27cc:	ad b7       	in	r26, 0x3d	; 61
    27ce:	be b7       	in	r27, 0x3e	; 62
    27d0:	12 96       	adiw	r26, 0x02	; 2
    27d2:	9c 93       	st	X, r25
    27d4:	8e 93       	st	-X, r24
    27d6:	11 97       	sbiw	r26, 0x01	; 1
    27d8:	80 91 df 03 	lds	r24, 0x03DF
    27dc:	82 83       	std	Z+2, r24	; 0x02
    27de:	13 82       	std	Z+3, r1	; 0x03
    27e0:	80 91 e2 03 	lds	r24, 0x03E2
    27e4:	84 83       	std	Z+4, r24	; 0x04
    27e6:	15 82       	std	Z+5, r1	; 0x05
    27e8:	80 91 e3 03 	lds	r24, 0x03E3
    27ec:	86 83       	std	Z+6, r24	; 0x06
    27ee:	17 82       	std	Z+7, r1	; 0x07
    27f0:	0e 94 20 33 	call	0x6640	; 0x6640 <printf>
			TMRSRVC_delay(1000);//wait 1 seconds
    27f4:	ed b7       	in	r30, 0x3d	; 61
    27f6:	fe b7       	in	r31, 0x3e	; 62
    27f8:	38 96       	adiw	r30, 0x08	; 8
    27fa:	0f b6       	in	r0, 0x3f	; 63
    27fc:	f8 94       	cli
    27fe:	fe bf       	out	0x3e, r31	; 62
    2800:	0f be       	out	0x3f, r0	; 63
    2802:	ed bf       	out	0x3d, r30	; 61
    2804:	88 ee       	ldi	r24, 0xE8	; 232
    2806:	93 e0       	ldi	r25, 0x03	; 3
    2808:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    280c:	60 e0       	ldi	r22, 0x00	; 0
    280e:	70 e0       	ldi	r23, 0x00	; 0
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	27 ed       	ldi	r18, 0xD7	; 215
    2816:	33 ea       	ldi	r19, 0xA3	; 163
    2818:	42 e9       	ldi	r20, 0x92	; 146
    281a:	51 e4       	ldi	r21, 0x41	; 65
    281c:	0f 2e       	mov	r0, r31
    281e:	f0 e0       	ldi	r31, 0x00	; 0
    2820:	ef 2e       	mov	r14, r31
    2822:	f0 e0       	ldi	r31, 0x00	; 0
    2824:	ff 2e       	mov	r15, r31
    2826:	f0 e2       	ldi	r31, 0x20	; 32
    2828:	0f 2f       	mov	r16, r31
    282a:	f1 e4       	ldi	r31, 0x41	; 65
    282c:	1f 2f       	mov	r17, r31
    282e:	f0 2d       	mov	r31, r0
    2830:	57 01       	movw	r10, r14
    2832:	68 01       	movw	r12, r16
    2834:	88 24       	eor	r8, r8
    2836:	0e 94 ae 0b 	call	0x175c	; 0x175c <move_arc_stwt>
    283a:	12 c0       	rjmp	.+36     	; 0x2860 <moveWorld+0x268>
			break;
		default:
			LCD_printf("What?!");
    283c:	00 d0       	rcall	.+0      	; 0x283e <moveWorld+0x246>
    283e:	8b ec       	ldi	r24, 0xCB	; 203
    2840:	91 e0       	ldi	r25, 0x01	; 1
    2842:	ad b7       	in	r26, 0x3d	; 61
    2844:	be b7       	in	r27, 0x3e	; 62
    2846:	12 96       	adiw	r26, 0x02	; 2
    2848:	9c 93       	st	X, r25
    284a:	8e 93       	st	-X, r24
    284c:	11 97       	sbiw	r26, 0x01	; 1
    284e:	0e 94 20 33 	call	0x6640	; 0x6640 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    2852:	0f 90       	pop	r0
    2854:	0f 90       	pop	r0
    2856:	82 e0       	ldi	r24, 0x02	; 2
    2858:	60 e0       	ldi	r22, 0x00	; 0
    285a:	0e 94 20 1b 	call	0x3640	; 0x3640 <STEPPER_stop>
    285e:	ff cf       	rjmp	.-2      	; 0x285e <moveWorld+0x266>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    2860:	80 91 dd 03 	lds	r24, 0x03DD
    2864:	80 93 de 03 	sts	0x03DE, r24
	return 1;
}
    2868:	81 e0       	ldi	r24, 0x01	; 1
    286a:	1f 91       	pop	r17
    286c:	0f 91       	pop	r16
    286e:	ff 90       	pop	r15
    2870:	ef 90       	pop	r14
    2872:	df 90       	pop	r13
    2874:	cf 90       	pop	r12
    2876:	bf 90       	pop	r11
    2878:	af 90       	pop	r10
    287a:	8f 90       	pop	r8
    287c:	08 95       	ret

0000287e <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    287e:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <moveWorld>
    2882:	88 23       	and	r24, r24
    2884:	69 f0       	breq	.+26     	; 0x28a0 <moveBehavior+0x22>
		Ierror = 0;
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	a0 e0       	ldi	r26, 0x00	; 0
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	80 93 bc 03 	sts	0x03BC, r24
    2892:	90 93 bd 03 	sts	0x03BD, r25
    2896:	a0 93 be 03 	sts	0x03BE, r26
    289a:	b0 93 bf 03 	sts	0x03BF, r27
    289e:	81 e0       	ldi	r24, 0x01	; 1
			// Ierror = 0;
			// return 3;
		// }
	// }
	return 0;	
}
    28a0:	08 95       	ret

000028a2 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    28a2:	ef 92       	push	r14
    28a4:	ff 92       	push	r15
    28a6:	0f 93       	push	r16
    28a8:	1f 93       	push	r17
    28aa:	cf 93       	push	r28
    28ac:	df 93       	push	r29
    28ae:	ff 24       	eor	r15, r15
    28b0:	f3 94       	inc	r15
    28b2:	00 e0       	ldi	r16, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    28b4:	c2 ed       	ldi	r28, 0xD2	; 210
    28b6:	d1 e0       	ldi	r29, 0x01	; 1
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
		moveCommands[i] = MOVE_STOP;
    28b8:	84 e0       	ldi	r24, 0x04	; 4
    28ba:	e8 2e       	mov	r14, r24
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < MAX_MOVE_SIZE){
		btnHolder = EnterTopoCommand();
    28bc:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    28c0:	18 2f       	mov	r17, r24
	
		if (btnHolder == MOVE_LEFT){
    28c2:	81 30       	cpi	r24, 0x01	; 1
    28c4:	21 f0       	breq	.+8      	; 0x28ce <movesInput+0x2c>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    28c6:	82 30       	cpi	r24, 0x02	; 2
    28c8:	11 f0       	breq	.+4      	; 0x28ce <movesInput+0x2c>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    28ca:	83 30       	cpi	r24, 0x03	; 3
    28cc:	39 f4       	brne	.+14     	; 0x28dc <movesInput+0x3a>
			moveCommands[i] = MOVE_RIGHT;
    28ce:	e0 2f       	mov	r30, r16
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	ef 5a       	subi	r30, 0xAF	; 175
    28d4:	fa 4f       	sbci	r31, 0xFA	; 250
    28d6:	10 83       	st	Z, r17
			i++;
    28d8:	0f 5f       	subi	r16, 0xFF	; 255
    28da:	02 c0       	rjmp	.+4      	; 0x28e0 <movesInput+0x3e>
		}

		if (btnHolder != 0){
    28dc:	88 23       	and	r24, r24
    28de:	21 f1       	breq	.+72     	; 0x2928 <movesInput+0x86>
			LCD_clear();
    28e0:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    28e4:	8d b7       	in	r24, 0x3d	; 61
    28e6:	9e b7       	in	r25, 0x3e	; 62
    28e8:	08 97       	sbiw	r24, 0x08	; 8
    28ea:	0f b6       	in	r0, 0x3f	; 63
    28ec:	f8 94       	cli
    28ee:	9e bf       	out	0x3e, r25	; 62
    28f0:	0f be       	out	0x3f, r0	; 63
    28f2:	8d bf       	out	0x3d, r24	; 61
    28f4:	ed b7       	in	r30, 0x3d	; 61
    28f6:	fe b7       	in	r31, 0x3e	; 62
    28f8:	31 96       	adiw	r30, 0x01	; 1
    28fa:	ad b7       	in	r26, 0x3d	; 61
    28fc:	be b7       	in	r27, 0x3e	; 62
    28fe:	12 96       	adiw	r26, 0x02	; 2
    2900:	dc 93       	st	X, r29
    2902:	ce 93       	st	-X, r28
    2904:	11 97       	sbiw	r26, 0x01	; 1
    2906:	f2 82       	std	Z+2, r15	; 0x02
    2908:	13 82       	std	Z+3, r1	; 0x03
    290a:	14 83       	std	Z+4, r17	; 0x04
    290c:	15 82       	std	Z+5, r1	; 0x05
    290e:	06 83       	std	Z+6, r16	; 0x06
    2910:	17 82       	std	Z+7, r1	; 0x07
    2912:	0e 94 20 33 	call	0x6640	; 0x6640 <printf>
    2916:	f1 2e       	mov	r15, r17
    2918:	8d b7       	in	r24, 0x3d	; 61
    291a:	9e b7       	in	r25, 0x3e	; 62
    291c:	08 96       	adiw	r24, 0x08	; 8
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	f8 94       	cli
    2922:	9e bf       	out	0x3e, r25	; 62
    2924:	0f be       	out	0x3f, r0	; 63
    2926:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2928:	84 ef       	ldi	r24, 0xF4	; 244
    292a:	91 e0       	ldi	r25, 0x01	; 1
    292c:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
		moveCommands[i] = MOVE_STOP;
    2930:	e0 2f       	mov	r30, r16
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	ef 5a       	subi	r30, 0xAF	; 175
    2936:	fa 4f       	sbci	r31, 0xFA	; 250
    2938:	e0 82       	st	Z, r14
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < MAX_MOVE_SIZE){
    293a:	0b 30       	cpi	r16, 0x0B	; 11
    293c:	08 f4       	brcc	.+2      	; 0x2940 <movesInput+0x9e>
    293e:	be cf       	rjmp	.-132    	; 0x28bc <movesInput+0x1a>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
		moveCommands[i] = MOVE_STOP;
	}
}
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	1f 91       	pop	r17
    2946:	0f 91       	pop	r16
    2948:	ff 90       	pop	r15
    294a:	ef 90       	pop	r14
    294c:	08 95       	ret

0000294e <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    294e:	1f 93       	push	r17
    2950:	cf 93       	push	r28
    2952:	df 93       	push	r29
    2954:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2956:	c3 e0       	ldi	r28, 0x03	; 3
    2958:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    295a:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    295e:	81 30       	cpi	r24, 0x01	; 1
    2960:	21 f4       	brne	.+8      	; 0x296a <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    2962:	80 91 e0 03 	lds	r24, 0x03E0
    2966:	88 0f       	add	r24, r24
    2968:	06 c0       	rjmp	.+12     	; 0x2976 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    296a:	82 30       	cpi	r24, 0x02	; 2
    296c:	39 f4       	brne	.+14     	; 0x297c <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    296e:	80 91 e0 03 	lds	r24, 0x03E0
    2972:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    2974:	8f 5f       	subi	r24, 0xFF	; 255
    2976:	80 93 e0 03 	sts	0x03E0, r24
			i++;
    297a:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    297c:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2980:	00 d0       	rcall	.+0      	; 0x2982 <worldInput+0x34>
    2982:	00 d0       	rcall	.+0      	; 0x2984 <worldInput+0x36>
    2984:	00 d0       	rcall	.+0      	; 0x2986 <worldInput+0x38>
    2986:	ed b7       	in	r30, 0x3d	; 61
    2988:	fe b7       	in	r31, 0x3e	; 62
    298a:	31 96       	adiw	r30, 0x01	; 1
    298c:	ad b7       	in	r26, 0x3d	; 61
    298e:	be b7       	in	r27, 0x3e	; 62
    2990:	12 96       	adiw	r26, 0x02	; 2
    2992:	dc 93       	st	X, r29
    2994:	ce 93       	st	-X, r28
    2996:	11 97       	sbiw	r26, 0x01	; 1
    2998:	80 91 e0 03 	lds	r24, 0x03E0
    299c:	82 83       	std	Z+2, r24	; 0x02
    299e:	13 82       	std	Z+3, r1	; 0x03
    29a0:	14 83       	std	Z+4, r17	; 0x04
    29a2:	15 82       	std	Z+5, r1	; 0x05
    29a4:	0e 94 20 33 	call	0x6640	; 0x6640 <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    29a8:	8d b7       	in	r24, 0x3d	; 61
    29aa:	9e b7       	in	r25, 0x3e	; 62
    29ac:	06 96       	adiw	r24, 0x06	; 6
    29ae:	0f b6       	in	r0, 0x3f	; 63
    29b0:	f8 94       	cli
    29b2:	9e bf       	out	0x3e, r25	; 62
    29b4:	0f be       	out	0x3f, r0	; 63
    29b6:	8d bf       	out	0x3d, r24	; 61
    29b8:	84 ef       	ldi	r24, 0xF4	; 244
    29ba:	91 e0       	ldi	r25, 0x01	; 1
    29bc:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    29c0:	14 30       	cpi	r17, 0x04	; 4
    29c2:	58 f2       	brcs	.-106    	; 0x295a <worldInput+0xc>
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
}
    29c4:	df 91       	pop	r29
    29c6:	cf 91       	pop	r28
    29c8:	1f 91       	pop	r17
    29ca:	08 95       	ret

000029cc <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    29cc:	1f 93       	push	r17
    29ce:	cf 93       	push	r28
    29d0:	df 93       	push	r29
    29d2:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    29d4:	cb e2       	ldi	r28, 0x2B	; 43
    29d6:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    29d8:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    29dc:	81 30       	cpi	r24, 0x01	; 1
    29de:	21 f4       	brne	.+8      	; 0x29e8 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    29e0:	80 91 e1 03 	lds	r24, 0x03E1
    29e4:	88 0f       	add	r24, r24
    29e6:	06 c0       	rjmp	.+12     	; 0x29f4 <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    29e8:	82 30       	cpi	r24, 0x02	; 2
    29ea:	41 f4       	brne	.+16     	; 0x29fc <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    29ec:	80 91 e1 03 	lds	r24, 0x03E1
    29f0:	88 0f       	add	r24, r24
			currentOrientation += 1;
    29f2:	8f 5f       	subi	r24, 0xFF	; 255
    29f4:	80 93 e1 03 	sts	0x03E1, r24
			i++;
    29f8:	1f 5f       	subi	r17, 0xFF	; 255
    29fa:	02 c0       	rjmp	.+4      	; 0x2a00 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    29fc:	88 23       	and	r24, r24
    29fe:	f1 f0       	breq	.+60     	; 0x2a3c <orientationInput+0x70>
			LCD_clear();
    2a00:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2a04:	00 d0       	rcall	.+0      	; 0x2a06 <orientationInput+0x3a>
    2a06:	00 d0       	rcall	.+0      	; 0x2a08 <orientationInput+0x3c>
    2a08:	00 d0       	rcall	.+0      	; 0x2a0a <orientationInput+0x3e>
    2a0a:	ed b7       	in	r30, 0x3d	; 61
    2a0c:	fe b7       	in	r31, 0x3e	; 62
    2a0e:	31 96       	adiw	r30, 0x01	; 1
    2a10:	ad b7       	in	r26, 0x3d	; 61
    2a12:	be b7       	in	r27, 0x3e	; 62
    2a14:	12 96       	adiw	r26, 0x02	; 2
    2a16:	dc 93       	st	X, r29
    2a18:	ce 93       	st	-X, r28
    2a1a:	11 97       	sbiw	r26, 0x01	; 1
    2a1c:	80 91 e1 03 	lds	r24, 0x03E1
    2a20:	82 83       	std	Z+2, r24	; 0x02
    2a22:	13 82       	std	Z+3, r1	; 0x03
    2a24:	14 83       	std	Z+4, r17	; 0x04
    2a26:	15 82       	std	Z+5, r1	; 0x05
    2a28:	0e 94 20 33 	call	0x6640	; 0x6640 <printf>
    2a2c:	8d b7       	in	r24, 0x3d	; 61
    2a2e:	9e b7       	in	r25, 0x3e	; 62
    2a30:	06 96       	adiw	r24, 0x06	; 6
    2a32:	0f b6       	in	r0, 0x3f	; 63
    2a34:	f8 94       	cli
    2a36:	9e bf       	out	0x3e, r25	; 62
    2a38:	0f be       	out	0x3f, r0	; 63
    2a3a:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2a3c:	84 ef       	ldi	r24, 0xF4	; 244
    2a3e:	91 e0       	ldi	r25, 0x01	; 1
    2a40:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    2a44:	12 30       	cpi	r17, 0x02	; 2
    2a46:	40 f2       	brcs	.-112    	; 0x29d8 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    2a48:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
	switch(currentOrientation){
    2a4c:	80 91 e1 03 	lds	r24, 0x03E1
    2a50:	81 30       	cpi	r24, 0x01	; 1
    2a52:	51 f0       	breq	.+20     	; 0x2a68 <orientationInput+0x9c>
    2a54:	81 30       	cpi	r24, 0x01	; 1
    2a56:	28 f0       	brcs	.+10     	; 0x2a62 <orientationInput+0x96>
    2a58:	82 30       	cpi	r24, 0x02	; 2
    2a5a:	49 f0       	breq	.+18     	; 0x2a6e <orientationInput+0xa2>
    2a5c:	83 30       	cpi	r24, 0x03	; 3
    2a5e:	71 f4       	brne	.+28     	; 0x2a7c <orientationInput+0xb0>
    2a60:	09 c0       	rjmp	.+18     	; 0x2a74 <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    2a62:	8a e5       	ldi	r24, 0x5A	; 90
    2a64:	92 e0       	ldi	r25, 0x02	; 2
    2a66:	08 c0       	rjmp	.+16     	; 0x2a78 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    2a68:	8c e7       	ldi	r24, 0x7C	; 124
    2a6a:	92 e0       	ldi	r25, 0x02	; 2
    2a6c:	05 c0       	rjmp	.+10     	; 0x2a78 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    2a6e:	8d e9       	ldi	r24, 0x9D	; 157
    2a70:	92 e0       	ldi	r25, 0x02	; 2
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    2a74:	8f eb       	ldi	r24, 0xBF	; 191
    2a76:	92 e0       	ldi	r25, 0x02	; 2
    2a78:	0e 94 32 33 	call	0x6664	; 0x6664 <puts>
			break;
		default:
			break;
	}
	TMRSRVC_delay(500);	//wait 0.5 seconds
    2a7c:	84 ef       	ldi	r24, 0xF4	; 244
    2a7e:	91 e0       	ldi	r25, 0x01	; 1
    2a80:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
}
    2a84:	df 91       	pop	r29
    2a86:	cf 91       	pop	r28
    2a88:	1f 91       	pop	r17
    2a8a:	08 95       	ret

00002a8c <CBOT_main>:
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2a8c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <ATTINY_open>
    2a90:	90 93 60 04 	sts	0x0460, r25
    2a94:	80 93 5f 04 	sts	0x045F, r24
	LEopstat = LED_open(); //open the LED module
    2a98:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LED_open>
    2a9c:	90 93 5e 04 	sts	0x045E, r25
    2aa0:	80 93 5d 04 	sts	0x045D, r24
	LCopstat = LCD_open(); //open the LCD module
    2aa4:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <LCD_open>
    2aa8:	90 93 5c 04 	sts	0x045C, r25
    2aac:	80 93 5b 04 	sts	0x045B, r24
	STEPPER_open(); // Open STEPPER module for use
    2ab0:	0e 94 b8 19 	call	0x3370	; 0x3370 <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in beep mode
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	0e 94 3c 18 	call	0x3078	; 0x3078 <SPKR_open>
	
	LED_open();
    2aba:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <LED_open>
	I2C_open();
    2abe:	0e 94 fb 1d 	call	0x3bf6	; 0x3bf6 <I2C_open>
	ADC_open();//open the ADC module
    2ac2:	0e 94 ba 15 	call	0x2b74	; 0x2b74 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2ac6:	81 e0       	ldi	r24, 0x01	; 1
    2ac8:	0e 94 1c 16 	call	0x2c38	; 0x2c38 <ADC_set_VREF>

	// Initialize IR Values and Reset Prefilter
	checkIR();
    2acc:	0e 94 73 11 	call	0x22e6	; 0x22e6 <checkIR>
	prefilter(1);
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	0e 94 80 06 	call	0xd00	; 0xd00 <prefilter>
	
	
	// Enter the robot's current (starting) position
	LCD_printf("ENTER start location\n\n\n\n");	
    2ad6:	80 ee       	ldi	r24, 0xE0	; 224
    2ad8:	92 e0       	ldi	r25, 0x02	; 2
    2ada:	0e 94 32 33 	call	0x6664	; 0x6664 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    2ade:	88 ee       	ldi	r24, 0xE8	; 232
    2ae0:	93 e0       	ldi	r25, 0x03	; 3
    2ae2:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
	LCD_clear();
    2ae6:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
	worldInput();
    2aea:	0e 94 a7 14 	call	0x294e	; 0x294e <worldInput>
	TMRSRVC_delay(3000);//wait 3 seconds
    2aee:	88 eb       	ldi	r24, 0xB8	; 184
    2af0:	9b e0       	ldi	r25, 0x0B	; 11
    2af2:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
	LCD_clear();
    2af6:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("ENTER start orientation\n\n\n\n");	
    2afa:	88 ef       	ldi	r24, 0xF8	; 248
    2afc:	92 e0       	ldi	r25, 0x02	; 2
    2afe:	0e 94 32 33 	call	0x6664	; 0x6664 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    2b02:	88 ee       	ldi	r24, 0xE8	; 232
    2b04:	93 e0       	ldi	r25, 0x03	; 3
    2b06:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
	LCD_clear();
    2b0a:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
	orientationInput();
    2b0e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <orientationInput>
	TMRSRVC_delay(3000);//wait 3 seconds
    2b12:	88 eb       	ldi	r24, 0xB8	; 184
    2b14:	9b e0       	ldi	r25, 0x0B	; 11
    2b16:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
	LCD_clear();
    2b1a:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
	
	// Enter the robot topological commands
	LCD_printf("ENTER move commands\n\n\n\n");
    2b1e:	83 e1       	ldi	r24, 0x13	; 19
    2b20:	93 e0       	ldi	r25, 0x03	; 3
    2b22:	0e 94 32 33 	call	0x6664	; 0x6664 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    2b26:	88 ee       	ldi	r24, 0xE8	; 232
    2b28:	93 e0       	ldi	r25, 0x03	; 3
    2b2a:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
	LCD_clear();
    2b2e:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
	movesInput();
    2b32:	0e 94 51 14 	call	0x28a2	; 0x28a2 <movesInput>
	TMRSRVC_delay(3000);//wait 1 seconds
    2b36:	88 eb       	ldi	r24, 0xB8	; 184
    2b38:	9b e0       	ldi	r25, 0x0B	; 11
    2b3a:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
	LCD_clear();
    2b3e:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
	
	// Print the robot gateways
	LCD_printf("Robot Gateways:\n\n\n\n");
    2b42:	8a e2       	ldi	r24, 0x2A	; 42
    2b44:	93 e0       	ldi	r25, 0x03	; 3
    2b46:	0e 94 32 33 	call	0x6664	; 0x6664 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    2b4a:	88 ee       	ldi	r24, 0xE8	; 232
    2b4c:	93 e0       	ldi	r25, 0x03	; 3
    2b4e:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
	LCD_clear();
    2b52:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
	getGateways();
    2b56:	0e 94 2f 12 	call	0x245e	; 0x245e <getGateways>
	TMRSRVC_delay(3000);//wait 1 seconds
    2b5a:	88 eb       	ldi	r24, 0xB8	; 184
    2b5c:	9b e0       	ldi	r25, 0x0B	; 11
    2b5e:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
	LCD_clear();
    2b62:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
	

	// Infinite loop
	while (1)
    {
		checkIR();	
    2b66:	0e 94 73 11 	call	0x22e6	; 0x22e6 <checkIR>
		checkWorld();
    2b6a:	0e 94 14 06 	call	0xc28	; 0xc28 <checkWorld>
		moveWorld();	
    2b6e:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <moveWorld>
    2b72:	f9 cf       	rjmp	.-14     	; 0x2b66 <CBOT_main+0xda>

00002b74 <ADC_open>:
    2b74:	8f e0       	ldi	r24, 0x0F	; 15
    2b76:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    2b7a:	88 23       	and	r24, r24
    2b7c:	31 f4       	brne	.+12     	; 0x2b8a <ADC_open+0x16>
    2b7e:	0e 94 22 1e 	call	0x3c44	; 0x3c44 <__ADC_init>
    2b82:	8f e0       	ldi	r24, 0x0F	; 15
    2b84:	61 e0       	ldi	r22, 0x01	; 1
    2b86:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    2b8a:	8f e0       	ldi	r24, 0x0F	; 15
    2b8c:	91 e0       	ldi	r25, 0x01	; 1
    2b8e:	08 95       	ret

00002b90 <ADC_sample>:
    2b90:	8f e0       	ldi	r24, 0x0F	; 15
    2b92:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    2b96:	81 30       	cpi	r24, 0x01	; 1
    2b98:	19 f0       	breq	.+6      	; 0x2ba0 <ADC_sample+0x10>
    2b9a:	20 e0       	ldi	r18, 0x00	; 0
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	13 c0       	rjmp	.+38     	; 0x2bc6 <ADC_sample+0x36>
    2ba0:	80 91 7a 00 	lds	r24, 0x007A
    2ba4:	80 64       	ori	r24, 0x40	; 64
    2ba6:	80 93 7a 00 	sts	0x007A, r24
    2baa:	80 91 7a 00 	lds	r24, 0x007A
    2bae:	86 fd       	sbrc	r24, 6
    2bb0:	fc cf       	rjmp	.-8      	; 0x2baa <ADC_sample+0x1a>
    2bb2:	30 91 78 00 	lds	r19, 0x0078
    2bb6:	20 91 79 00 	lds	r18, 0x0079
    2bba:	92 2f       	mov	r25, r18
    2bbc:	80 e0       	ldi	r24, 0x00	; 0
    2bbe:	23 2f       	mov	r18, r19
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	28 2b       	or	r18, r24
    2bc4:	39 2b       	or	r19, r25
    2bc6:	c9 01       	movw	r24, r18
    2bc8:	08 95       	ret

00002bca <ADC_set_channel>:
    2bca:	58 2f       	mov	r21, r24
    2bcc:	80 91 5d 03 	lds	r24, 0x035D
    2bd0:	88 30       	cpi	r24, 0x08	; 8
    2bd2:	d8 f4       	brcc	.+54     	; 0x2c0a <ADC_set_channel+0x40>
    2bd4:	40 91 7e 00 	lds	r20, 0x007E
    2bd8:	21 e0       	ldi	r18, 0x01	; 1
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	b9 01       	movw	r22, r18
    2bde:	02 c0       	rjmp	.+4      	; 0x2be4 <ADC_set_channel+0x1a>
    2be0:	66 0f       	add	r22, r22
    2be2:	77 1f       	adc	r23, r23
    2be4:	8a 95       	dec	r24
    2be6:	e2 f7       	brpl	.-8      	; 0x2be0 <ADC_set_channel+0x16>
    2be8:	cb 01       	movw	r24, r22
    2bea:	80 95       	com	r24
    2bec:	84 23       	and	r24, r20
    2bee:	80 93 7e 00 	sts	0x007E, r24
    2bf2:	80 91 7e 00 	lds	r24, 0x007E
    2bf6:	05 2e       	mov	r0, r21
    2bf8:	02 c0       	rjmp	.+4      	; 0x2bfe <ADC_set_channel+0x34>
    2bfa:	22 0f       	add	r18, r18
    2bfc:	33 1f       	adc	r19, r19
    2bfe:	0a 94       	dec	r0
    2c00:	e2 f7       	brpl	.-8      	; 0x2bfa <ADC_set_channel+0x30>
    2c02:	82 2b       	or	r24, r18
    2c04:	80 93 7e 00 	sts	0x007E, r24
    2c08:	0d c0       	rjmp	.+26     	; 0x2c24 <ADC_set_channel+0x5a>
    2c0a:	20 91 7e 00 	lds	r18, 0x007E
    2c0e:	81 e0       	ldi	r24, 0x01	; 1
    2c10:	90 e0       	ldi	r25, 0x00	; 0
    2c12:	05 2e       	mov	r0, r21
    2c14:	02 c0       	rjmp	.+4      	; 0x2c1a <ADC_set_channel+0x50>
    2c16:	88 0f       	add	r24, r24
    2c18:	99 1f       	adc	r25, r25
    2c1a:	0a 94       	dec	r0
    2c1c:	e2 f7       	brpl	.-8      	; 0x2c16 <ADC_set_channel+0x4c>
    2c1e:	28 2b       	or	r18, r24
    2c20:	20 93 7e 00 	sts	0x007E, r18
    2c24:	50 93 5d 03 	sts	0x035D, r21
    2c28:	80 91 7c 00 	lds	r24, 0x007C
    2c2c:	5f 71       	andi	r21, 0x1F	; 31
    2c2e:	80 7e       	andi	r24, 0xE0	; 224
    2c30:	85 2b       	or	r24, r21
    2c32:	80 93 7c 00 	sts	0x007C, r24
    2c36:	08 95       	ret

00002c38 <ADC_set_VREF>:
    2c38:	ec e7       	ldi	r30, 0x7C	; 124
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	90 81       	ld	r25, Z
    2c3e:	82 95       	swap	r24
    2c40:	88 0f       	add	r24, r24
    2c42:	88 0f       	add	r24, r24
    2c44:	80 7c       	andi	r24, 0xC0	; 192
    2c46:	9f 73       	andi	r25, 0x3F	; 63
    2c48:	98 2b       	or	r25, r24
    2c4a:	90 83       	st	Z, r25
    2c4c:	08 95       	ret

00002c4e <main>:
    2c4e:	0e 94 3b 1e 	call	0x3c76	; 0x3c76 <CBOT_ISR_init>
    2c52:	0e 94 2d 1e 	call	0x3c5a	; 0x3c5a <CBOT_init>
    2c56:	0e 94 46 15 	call	0x2a8c	; 0x2a8c <CBOT_main>
    2c5a:	80 e0       	ldi	r24, 0x00	; 0
    2c5c:	90 e0       	ldi	r25, 0x00	; 0
    2c5e:	08 95       	ret

00002c60 <LCD_clear>:
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	80 e4       	ldi	r24, 0x40	; 64
    2c66:	60 e0       	ldi	r22, 0x00	; 0
    2c68:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2c6c:	00 e0       	ldi	r16, 0x00	; 0
    2c6e:	80 2f       	mov	r24, r16
    2c70:	60 e0       	ldi	r22, 0x00	; 0
    2c72:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_set_PGC_addr>
    2c76:	10 e0       	ldi	r17, 0x00	; 0
    2c78:	80 e0       	ldi	r24, 0x00	; 0
    2c7a:	61 e0       	ldi	r22, 0x01	; 1
    2c7c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2c80:	1f 5f       	subi	r17, 0xFF	; 255
    2c82:	10 38       	cpi	r17, 0x80	; 128
    2c84:	c9 f7       	brne	.-14     	; 0x2c78 <LCD_clear+0x18>
    2c86:	0f 5f       	subi	r16, 0xFF	; 255
    2c88:	04 30       	cpi	r16, 0x04	; 4
    2c8a:	89 f7       	brne	.-30     	; 0x2c6e <LCD_clear+0xe>
    2c8c:	83 e0       	ldi	r24, 0x03	; 3
    2c8e:	60 e0       	ldi	r22, 0x00	; 0
    2c90:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_set_next_PGC>
    2c94:	1f 91       	pop	r17
    2c96:	0f 91       	pop	r16
    2c98:	08 95       	ret

00002c9a <LCD_open>:
    2c9a:	0f 93       	push	r16
    2c9c:	1f 93       	push	r17
    2c9e:	82 e0       	ldi	r24, 0x02	; 2
    2ca0:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    2ca4:	88 23       	and	r24, r24
    2ca6:	11 f4       	brne	.+4      	; 0x2cac <LCD_open+0x12>
    2ca8:	82 e0       	ldi	r24, 0x02	; 2
    2caa:	06 c0       	rjmp	.+12     	; 0x2cb8 <LCD_open+0x1e>
    2cac:	81 e0       	ldi	r24, 0x01	; 1
    2cae:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    2cb2:	88 23       	and	r24, r24
    2cb4:	19 f4       	brne	.+6      	; 0x2cbc <LCD_open+0x22>
    2cb6:	81 e0       	ldi	r24, 0x01	; 1
    2cb8:	90 e0       	ldi	r25, 0x00	; 0
    2cba:	6d c0       	rjmp	.+218    	; 0x2d96 <LCD_open+0xfc>
    2cbc:	0e 94 a3 20 	call	0x4146	; 0x4146 <__LCD_init>
    2cc0:	85 e0       	ldi	r24, 0x05	; 5
    2cc2:	61 e0       	ldi	r22, 0x01	; 1
    2cc4:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    2cc8:	8e ea       	ldi	r24, 0xAE	; 174
    2cca:	60 e0       	ldi	r22, 0x00	; 0
    2ccc:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2cd0:	82 ea       	ldi	r24, 0xA2	; 162
    2cd2:	60 e0       	ldi	r22, 0x00	; 0
    2cd4:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2cd8:	80 ea       	ldi	r24, 0xA0	; 160
    2cda:	60 e0       	ldi	r22, 0x00	; 0
    2cdc:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2ce0:	00 e5       	ldi	r16, 0x50	; 80
    2ce2:	13 ec       	ldi	r17, 0xC3	; 195
    2ce4:	c8 01       	movw	r24, r16
    2ce6:	01 97       	sbiw	r24, 0x01	; 1
    2ce8:	f1 f7       	brne	.-4      	; 0x2ce6 <LCD_open+0x4c>
    2cea:	80 ec       	ldi	r24, 0xC0	; 192
    2cec:	60 e0       	ldi	r22, 0x00	; 0
    2cee:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2cf2:	8f e2       	ldi	r24, 0x2F	; 47
    2cf4:	60 e0       	ldi	r22, 0x00	; 0
    2cf6:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2cfa:	81 e8       	ldi	r24, 0x81	; 129
    2cfc:	60 e0       	ldi	r22, 0x00	; 0
    2cfe:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2d02:	86 e1       	ldi	r24, 0x16	; 22
    2d04:	60 e0       	ldi	r22, 0x00	; 0
    2d06:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2d0a:	82 e2       	ldi	r24, 0x22	; 34
    2d0c:	60 e0       	ldi	r22, 0x00	; 0
    2d0e:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2d12:	c8 01       	movw	r24, r16
    2d14:	01 97       	sbiw	r24, 0x01	; 1
    2d16:	f1 f7       	brne	.-4      	; 0x2d14 <LCD_open+0x7a>
    2d18:	8f ea       	ldi	r24, 0xAF	; 175
    2d1a:	60 e0       	ldi	r22, 0x00	; 0
    2d1c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2d20:	86 ea       	ldi	r24, 0xA6	; 166
    2d22:	60 e0       	ldi	r22, 0x00	; 0
    2d24:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2d28:	85 ea       	ldi	r24, 0xA5	; 165
    2d2a:	60 e0       	ldi	r22, 0x00	; 0
    2d2c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2d30:	80 e0       	ldi	r24, 0x00	; 0
    2d32:	90 e0       	ldi	r25, 0x00	; 0
    2d34:	28 e8       	ldi	r18, 0x88	; 136
    2d36:	33 e1       	ldi	r19, 0x13	; 19
    2d38:	f9 01       	movw	r30, r18
    2d3a:	31 97       	sbiw	r30, 0x01	; 1
    2d3c:	f1 f7       	brne	.-4      	; 0x2d3a <LCD_open+0xa0>
    2d3e:	01 96       	adiw	r24, 0x01	; 1
    2d40:	43 e0       	ldi	r20, 0x03	; 3
    2d42:	88 3e       	cpi	r24, 0xE8	; 232
    2d44:	94 07       	cpc	r25, r20
    2d46:	c1 f7       	brne	.-16     	; 0x2d38 <LCD_open+0x9e>
    2d48:	83 eb       	ldi	r24, 0xB3	; 179
    2d4a:	60 e0       	ldi	r22, 0x00	; 0
    2d4c:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2d50:	80 e4       	ldi	r24, 0x40	; 64
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2d58:	83 e0       	ldi	r24, 0x03	; 3
    2d5a:	60 e0       	ldi	r22, 0x00	; 0
    2d5c:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_set_PGC_addr>
    2d60:	83 e0       	ldi	r24, 0x03	; 3
    2d62:	60 e0       	ldi	r22, 0x00	; 0
    2d64:	0e 94 ef 16 	call	0x2dde	; 0x2dde <LCD_set_next_PGC>
    2d68:	10 92 a7 06 	sts	0x06A7, r1
    2d6c:	10 92 a9 06 	sts	0x06A9, r1
    2d70:	10 92 a8 06 	sts	0x06A8, r1
    2d74:	8c e6       	ldi	r24, 0x6C	; 108
    2d76:	93 e0       	ldi	r25, 0x03	; 3
    2d78:	90 93 d8 06 	sts	0x06D8, r25
    2d7c:	80 93 d7 06 	sts	0x06D7, r24
    2d80:	88 e1       	ldi	r24, 0x18	; 24
    2d82:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <LCD_set_backlight>
    2d86:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
    2d8a:	84 ea       	ldi	r24, 0xA4	; 164
    2d8c:	60 e0       	ldi	r22, 0x00	; 0
    2d8e:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2d92:	85 e0       	ldi	r24, 0x05	; 5
    2d94:	91 e0       	ldi	r25, 0x01	; 1
    2d96:	1f 91       	pop	r17
    2d98:	0f 91       	pop	r16
    2d9a:	08 95       	ret

00002d9c <LCD_set_backlight>:
    2d9c:	1f 93       	push	r17
    2d9e:	18 2f       	mov	r17, r24
    2da0:	85 e0       	ldi	r24, 0x05	; 5
    2da2:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    2da6:	81 30       	cpi	r24, 0x01	; 1
    2da8:	c1 f4       	brne	.+48     	; 0x2dda <LCD_set_backlight+0x3e>
    2daa:	87 e0       	ldi	r24, 0x07	; 7
    2dac:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <SPI_set_slave_addr>
    2db0:	82 e0       	ldi	r24, 0x02	; 2
    2db2:	6a e0       	ldi	r22, 0x0A	; 10
    2db4:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <SPI_transmit>
    2db8:	82 e0       	ldi	r24, 0x02	; 2
    2dba:	61 eb       	ldi	r22, 0xB1	; 177
    2dbc:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <SPI_transmit>
    2dc0:	61 2f       	mov	r22, r17
    2dc2:	11 32       	cpi	r17, 0x21	; 33
    2dc4:	08 f0       	brcs	.+2      	; 0x2dc8 <LCD_set_backlight+0x2c>
    2dc6:	60 e2       	ldi	r22, 0x20	; 32
    2dc8:	82 e0       	ldi	r24, 0x02	; 2
    2dca:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <SPI_transmit>
    2dce:	89 ee       	ldi	r24, 0xE9	; 233
    2dd0:	8a 95       	dec	r24
    2dd2:	f1 f7       	brne	.-4      	; 0x2dd0 <LCD_set_backlight+0x34>
    2dd4:	87 e0       	ldi	r24, 0x07	; 7
    2dd6:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <SPI_set_slave_addr>
    2dda:	1f 91       	pop	r17
    2ddc:	08 95       	ret

00002dde <LCD_set_next_PGC>:
    2dde:	83 70       	andi	r24, 0x03	; 3
    2de0:	6f 77       	andi	r22, 0x7F	; 127
    2de2:	60 93 a5 06 	sts	0x06A5, r22
    2de6:	80 93 a6 06 	sts	0x06A6, r24
    2dea:	08 95       	ret

00002dec <LCD_set_PGC_addr>:
    2dec:	0f 93       	push	r16
    2dee:	1f 93       	push	r17
    2df0:	06 2f       	mov	r16, r22
    2df2:	16 2f       	mov	r17, r22
    2df4:	1f 77       	andi	r17, 0x7F	; 127
    2df6:	83 70       	andi	r24, 0x03	; 3
    2df8:	80 6b       	ori	r24, 0xB0	; 176
    2dfa:	60 e0       	ldi	r22, 0x00	; 0
    2dfc:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2e00:	12 95       	swap	r17
    2e02:	1f 70       	andi	r17, 0x0F	; 15
    2e04:	81 2f       	mov	r24, r17
    2e06:	80 61       	ori	r24, 0x10	; 16
    2e08:	60 e0       	ldi	r22, 0x00	; 0
    2e0a:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2e0e:	80 2f       	mov	r24, r16
    2e10:	8f 70       	andi	r24, 0x0F	; 15
    2e12:	60 e0       	ldi	r22, 0x00	; 0
    2e14:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    2e18:	1f 91       	pop	r17
    2e1a:	0f 91       	pop	r16
    2e1c:	08 95       	ret

00002e1e <LCD_write>:
    2e1e:	0f 93       	push	r16
    2e20:	1f 93       	push	r17
    2e22:	08 2f       	mov	r16, r24
    2e24:	16 2f       	mov	r17, r22
    2e26:	85 e0       	ldi	r24, 0x05	; 5
    2e28:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    2e2c:	81 30       	cpi	r24, 0x01	; 1
    2e2e:	79 f4       	brne	.+30     	; 0x2e4e <LCD_write+0x30>
    2e30:	11 23       	and	r17, r17
    2e32:	19 f0       	breq	.+6      	; 0x2e3a <LCD_write+0x1c>
    2e34:	11 30       	cpi	r17, 0x01	; 1
    2e36:	21 f4       	brne	.+8      	; 0x2e40 <LCD_write+0x22>
    2e38:	02 c0       	rjmp	.+4      	; 0x2e3e <LCD_write+0x20>
    2e3a:	2b 98       	cbi	0x05, 3	; 5
    2e3c:	01 c0       	rjmp	.+2      	; 0x2e40 <LCD_write+0x22>
    2e3e:	2b 9a       	sbi	0x05, 3	; 5
    2e40:	86 e0       	ldi	r24, 0x06	; 6
    2e42:	8a 95       	dec	r24
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <LCD_write+0x24>
    2e46:	80 e0       	ldi	r24, 0x00	; 0
    2e48:	60 2f       	mov	r22, r16
    2e4a:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <SPI_transmit>
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	08 95       	ret

00002e54 <LED_clr_pattern>:
    2e54:	1f 93       	push	r17
    2e56:	18 2f       	mov	r17, r24
    2e58:	86 e0       	ldi	r24, 0x06	; 6
    2e5a:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    2e5e:	81 30       	cpi	r24, 0x01	; 1
    2e60:	19 f4       	brne	.+6      	; 0x2e68 <LED_clr_pattern+0x14>
    2e62:	81 2f       	mov	r24, r17
    2e64:	0e 94 52 21 	call	0x42a4	; 0x42a4 <__LED_clr_pattern>
    2e68:	1f 91       	pop	r17
    2e6a:	08 95       	ret

00002e6c <LED_open>:
    2e6c:	0e 94 57 21 	call	0x42ae	; 0x42ae <__LED_init>
    2e70:	86 e0       	ldi	r24, 0x06	; 6
    2e72:	61 e0       	ldi	r22, 0x01	; 1
    2e74:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    2e78:	86 e0       	ldi	r24, 0x06	; 6
    2e7a:	91 e0       	ldi	r25, 0x01	; 1
    2e7c:	08 95       	ret

00002e7e <LED_set_pattern>:
    2e7e:	1f 93       	push	r17
    2e80:	18 2f       	mov	r17, r24
    2e82:	86 e0       	ldi	r24, 0x06	; 6
    2e84:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    2e88:	81 30       	cpi	r24, 0x01	; 1
    2e8a:	19 f4       	brne	.+6      	; 0x2e92 <LED_set_pattern+0x14>
    2e8c:	81 2f       	mov	r24, r17
    2e8e:	0e 94 5a 21 	call	0x42b4	; 0x42b4 <__LED_set_pattern>
    2e92:	1f 91       	pop	r17
    2e94:	08 95       	ret

00002e96 <SPI_set_slave_addr>:
    2e96:	1f 93       	push	r17
    2e98:	18 2f       	mov	r17, r24
    2e9a:	82 e0       	ldi	r24, 0x02	; 2
    2e9c:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    2ea0:	81 30       	cpi	r24, 0x01	; 1
    2ea2:	09 f0       	breq	.+2      	; 0x2ea6 <SPI_set_slave_addr+0x10>
    2ea4:	47 c0       	rjmp	.+142    	; 0x2f34 <SPI_set_slave_addr+0x9e>
    2ea6:	91 2f       	mov	r25, r17
    2ea8:	97 70       	andi	r25, 0x07	; 7
    2eaa:	80 91 aa 06 	lds	r24, 0x06AA
    2eae:	98 17       	cp	r25, r24
    2eb0:	09 f4       	brne	.+2      	; 0x2eb4 <SPI_set_slave_addr+0x1e>
    2eb2:	40 c0       	rjmp	.+128    	; 0x2f34 <SPI_set_slave_addr+0x9e>
    2eb4:	90 93 aa 06 	sts	0x06AA, r25
    2eb8:	85 b1       	in	r24, 0x05	; 5
    2eba:	88 7f       	andi	r24, 0xF8	; 248
    2ebc:	89 2b       	or	r24, r25
    2ebe:	85 b9       	out	0x05, r24	; 5
    2ec0:	93 30       	cpi	r25, 0x03	; 3
    2ec2:	11 f1       	breq	.+68     	; 0x2f08 <SPI_set_slave_addr+0x72>
    2ec4:	94 30       	cpi	r25, 0x04	; 4
    2ec6:	28 f4       	brcc	.+10     	; 0x2ed2 <SPI_set_slave_addr+0x3c>
    2ec8:	91 30       	cpi	r25, 0x01	; 1
    2eca:	51 f0       	breq	.+20     	; 0x2ee0 <SPI_set_slave_addr+0x4a>
    2ecc:	92 30       	cpi	r25, 0x02	; 2
    2ece:	90 f4       	brcc	.+36     	; 0x2ef4 <SPI_set_slave_addr+0x5e>
    2ed0:	0c c0       	rjmp	.+24     	; 0x2eea <SPI_set_slave_addr+0x54>
    2ed2:	95 30       	cpi	r25, 0x05	; 5
    2ed4:	19 f1       	breq	.+70     	; 0x2f1c <SPI_set_slave_addr+0x86>
    2ed6:	95 30       	cpi	r25, 0x05	; 5
    2ed8:	e0 f0       	brcs	.+56     	; 0x2f12 <SPI_set_slave_addr+0x7c>
    2eda:	96 30       	cpi	r25, 0x06	; 6
    2edc:	21 f5       	brne	.+72     	; 0x2f26 <SPI_set_slave_addr+0x90>
    2ede:	0f c0       	rjmp	.+30     	; 0x2efe <SPI_set_slave_addr+0x68>
    2ee0:	e0 91 36 04 	lds	r30, 0x0436
    2ee4:	f0 91 37 04 	lds	r31, 0x0437
    2ee8:	22 c0       	rjmp	.+68     	; 0x2f2e <SPI_set_slave_addr+0x98>
    2eea:	e0 91 34 04 	lds	r30, 0x0434
    2eee:	f0 91 35 04 	lds	r31, 0x0435
    2ef2:	1d c0       	rjmp	.+58     	; 0x2f2e <SPI_set_slave_addr+0x98>
    2ef4:	e0 91 38 04 	lds	r30, 0x0438
    2ef8:	f0 91 39 04 	lds	r31, 0x0439
    2efc:	18 c0       	rjmp	.+48     	; 0x2f2e <SPI_set_slave_addr+0x98>
    2efe:	e0 91 40 04 	lds	r30, 0x0440
    2f02:	f0 91 41 04 	lds	r31, 0x0441
    2f06:	13 c0       	rjmp	.+38     	; 0x2f2e <SPI_set_slave_addr+0x98>
    2f08:	e0 91 3a 04 	lds	r30, 0x043A
    2f0c:	f0 91 3b 04 	lds	r31, 0x043B
    2f10:	0e c0       	rjmp	.+28     	; 0x2f2e <SPI_set_slave_addr+0x98>
    2f12:	e0 91 3c 04 	lds	r30, 0x043C
    2f16:	f0 91 3d 04 	lds	r31, 0x043D
    2f1a:	09 c0       	rjmp	.+18     	; 0x2f2e <SPI_set_slave_addr+0x98>
    2f1c:	e0 91 3e 04 	lds	r30, 0x043E
    2f20:	f0 91 3f 04 	lds	r31, 0x043F
    2f24:	04 c0       	rjmp	.+8      	; 0x2f2e <SPI_set_slave_addr+0x98>
    2f26:	e0 91 42 04 	lds	r30, 0x0442
    2f2a:	f0 91 43 04 	lds	r31, 0x0443
    2f2e:	30 97       	sbiw	r30, 0x00	; 0
    2f30:	09 f0       	breq	.+2      	; 0x2f34 <SPI_set_slave_addr+0x9e>
    2f32:	09 95       	icall
    2f34:	1f 91       	pop	r17
    2f36:	08 95       	ret

00002f38 <SPI_transmit>:
    2f38:	1f 93       	push	r17
    2f3a:	16 2f       	mov	r17, r22
    2f3c:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <SPI_set_slave_addr>
    2f40:	82 e0       	ldi	r24, 0x02	; 2
    2f42:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    2f46:	81 30       	cpi	r24, 0x01	; 1
    2f48:	21 f4       	brne	.+8      	; 0x2f52 <SPI_transmit+0x1a>
    2f4a:	1e bd       	out	0x2e, r17	; 46
    2f4c:	0d b4       	in	r0, 0x2d	; 45
    2f4e:	07 fe       	sbrs	r0, 7
    2f50:	fd cf       	rjmp	.-6      	; 0x2f4c <SPI_transmit+0x14>
    2f52:	1f 91       	pop	r17
    2f54:	08 95       	ret

00002f56 <__SPKR_set_up_freq_LUT>:
    2f56:	0f 93       	push	r16
    2f58:	1f 93       	push	r17
    2f5a:	cf 93       	push	r28
    2f5c:	df 93       	push	r29
    2f5e:	80 e2       	ldi	r24, 0x20	; 32
    2f60:	91 e0       	ldi	r25, 0x01	; 1
    2f62:	0e 94 a8 30 	call	0x6150	; 0x6150 <malloc>
    2f66:	9c 01       	movw	r18, r24
    2f68:	90 93 53 04 	sts	0x0453, r25
    2f6c:	80 93 52 04 	sts	0x0452, r24
    2f70:	89 2b       	or	r24, r25
    2f72:	11 f4       	brne	.+4      	; 0x2f78 <__SPKR_set_up_freq_LUT+0x22>
    2f74:	80 e0       	ldi	r24, 0x00	; 0
    2f76:	39 c0       	rjmp	.+114    	; 0x2fea <__SPKR_set_up_freq_LUT+0x94>
    2f78:	89 01       	movw	r16, r18
    2f7a:	c0 e0       	ldi	r28, 0x00	; 0
    2f7c:	d0 e0       	ldi	r29, 0x00	; 0
    2f7e:	be 01       	movw	r22, r28
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <__floatunsisf>
    2f88:	20 e0       	ldi	r18, 0x00	; 0
    2f8a:	30 e0       	ldi	r19, 0x00	; 0
    2f8c:	40 ea       	ldi	r20, 0xA0	; 160
    2f8e:	51 e4       	ldi	r21, 0x41	; 65
    2f90:	0e 94 50 29 	call	0x52a0	; 0x52a0 <__divsf3>
    2f94:	27 ef       	ldi	r18, 0xF7	; 247
    2f96:	35 e7       	ldi	r19, 0x75	; 117
    2f98:	40 e0       	ldi	r20, 0x00	; 0
    2f9a:	5f e3       	ldi	r21, 0x3F	; 63
    2f9c:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    2fa0:	9b 01       	movw	r18, r22
    2fa2:	ac 01       	movw	r20, r24
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	70 e0       	ldi	r23, 0x00	; 0
    2fa8:	80 e2       	ldi	r24, 0x20	; 32
    2faa:	91 e4       	ldi	r25, 0x41	; 65
    2fac:	0e 94 3c 2b 	call	0x5678	; 0x5678 <pow>
    2fb0:	9b 01       	movw	r18, r22
    2fb2:	ac 01       	movw	r20, r24
    2fb4:	ca 01       	movw	r24, r20
    2fb6:	b9 01       	movw	r22, r18
    2fb8:	2d ec       	ldi	r18, 0xCD	; 205
    2fba:	3c ec       	ldi	r19, 0xCC	; 204
    2fbc:	42 e8       	ldi	r20, 0x82	; 130
    2fbe:	51 e4       	ldi	r21, 0x41	; 65
    2fc0:	0e 94 d9 2a 	call	0x55b2	; 0x55b2 <__mulsf3>
    2fc4:	0e 94 9f 2a 	call	0x553e	; 0x553e <lrint>
    2fc8:	2a e0       	ldi	r18, 0x0A	; 10
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	40 e0       	ldi	r20, 0x00	; 0
    2fce:	50 e0       	ldi	r21, 0x00	; 0
    2fd0:	0e 94 09 30 	call	0x6012	; 0x6012 <__mulsi3>
    2fd4:	f8 01       	movw	r30, r16
    2fd6:	61 93       	st	Z+, r22
    2fd8:	71 93       	st	Z+, r23
    2fda:	81 93       	st	Z+, r24
    2fdc:	91 93       	st	Z+, r25
    2fde:	8f 01       	movw	r16, r30
    2fe0:	21 96       	adiw	r28, 0x01	; 1
    2fe2:	c8 34       	cpi	r28, 0x48	; 72
    2fe4:	d1 05       	cpc	r29, r1
    2fe6:	59 f6       	brne	.-106    	; 0x2f7e <__SPKR_set_up_freq_LUT+0x28>
    2fe8:	81 e0       	ldi	r24, 0x01	; 1
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	1f 91       	pop	r17
    2ff0:	0f 91       	pop	r16
    2ff2:	08 95       	ret

00002ff4 <__SPKR_open_beep_mode>:
    2ff4:	8a e0       	ldi	r24, 0x0A	; 10
    2ff6:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    2ffa:	88 23       	and	r24, r24
    2ffc:	71 f4       	brne	.+28     	; 0x301a <__SPKR_open_beep_mode+0x26>
    2ffe:	10 92 4f 04 	sts	0x044F, r1
    3002:	10 92 4e 04 	sts	0x044E, r1
    3006:	81 e0       	ldi	r24, 0x01	; 1
    3008:	0e 94 95 22 	call	0x452a	; 0x452a <__SPKR_init>
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	80 93 45 04 	sts	0x0445, r24
    3012:	8a e0       	ldi	r24, 0x0A	; 10
    3014:	61 e0       	ldi	r22, 0x01	; 1
    3016:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    301a:	8a e0       	ldi	r24, 0x0A	; 10
    301c:	91 e0       	ldi	r25, 0x01	; 1
    301e:	08 95       	ret

00003020 <__SPKR_open_tone_mode>:
    3020:	1f 93       	push	r17
    3022:	8b e0       	ldi	r24, 0x0B	; 11
    3024:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    3028:	88 23       	and	r24, r24
    302a:	11 f0       	breq	.+4      	; 0x3030 <__SPKR_open_tone_mode+0x10>
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	21 c0       	rjmp	.+66     	; 0x3072 <__SPKR_open_tone_mode+0x52>
    3030:	89 e0       	ldi	r24, 0x09	; 9
    3032:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    3036:	88 23       	and	r24, r24
    3038:	d9 f4       	brne	.+54     	; 0x3070 <__SPKR_open_tone_mode+0x50>
    303a:	0e 94 ab 17 	call	0x2f56	; 0x2f56 <__SPKR_set_up_freq_LUT>
    303e:	18 2f       	mov	r17, r24
    3040:	81 30       	cpi	r24, 0x01	; 1
    3042:	b1 f4       	brne	.+44     	; 0x3070 <__SPKR_open_tone_mode+0x50>
    3044:	10 92 46 04 	sts	0x0446, r1
    3048:	10 92 47 04 	sts	0x0447, r1
    304c:	10 92 48 04 	sts	0x0448, r1
    3050:	10 92 49 04 	sts	0x0449, r1
    3054:	8d e0       	ldi	r24, 0x0D	; 13
    3056:	68 e1       	ldi	r22, 0x18	; 24
    3058:	72 e2       	ldi	r23, 0x22	; 34
    305a:	0e 94 7b 20 	call	0x40f6	; 0x40f6 <ISR_attach>
    305e:	82 e0       	ldi	r24, 0x02	; 2
    3060:	0e 94 95 22 	call	0x452a	; 0x452a <__SPKR_init>
    3064:	10 93 44 04 	sts	0x0444, r17
    3068:	89 e0       	ldi	r24, 0x09	; 9
    306a:	61 e0       	ldi	r22, 0x01	; 1
    306c:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    3070:	91 e0       	ldi	r25, 0x01	; 1
    3072:	89 e0       	ldi	r24, 0x09	; 9
    3074:	1f 91       	pop	r17
    3076:	08 95       	ret

00003078 <SPKR_open>:
    3078:	81 30       	cpi	r24, 0x01	; 1
    307a:	29 f0       	breq	.+10     	; 0x3086 <SPKR_open+0xe>
    307c:	82 30       	cpi	r24, 0x02	; 2
    307e:	31 f0       	breq	.+12     	; 0x308c <SPKR_open+0x14>
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	89 e0       	ldi	r24, 0x09	; 9
    3084:	08 95       	ret
    3086:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <__SPKR_open_beep_mode>
    308a:	08 95       	ret
    308c:	0e 94 10 18 	call	0x3020	; 0x3020 <__SPKR_open_tone_mode>
    3090:	08 95       	ret

00003092 <STEPPER_get_nSteps>:
    3092:	80 91 6b 06 	lds	r24, 0x066B
    3096:	90 91 6c 06 	lds	r25, 0x066C
    309a:	20 91 6d 06 	lds	r18, 0x066D
    309e:	30 91 6e 06 	lds	r19, 0x066E
    30a2:	bc 01       	movw	r22, r24
    30a4:	c9 01       	movw	r24, r18
    30a6:	08 95       	ret

000030a8 <STEPPER_stepmode>:
    30a8:	2f 92       	push	r2
    30aa:	3f 92       	push	r3
    30ac:	4f 92       	push	r4
    30ae:	5f 92       	push	r5
    30b0:	6f 92       	push	r6
    30b2:	7f 92       	push	r7
    30b4:	8f 92       	push	r8
    30b6:	9f 92       	push	r9
    30b8:	af 92       	push	r10
    30ba:	bf 92       	push	r11
    30bc:	cf 92       	push	r12
    30be:	df 92       	push	r13
    30c0:	ef 92       	push	r14
    30c2:	ff 92       	push	r15
    30c4:	0f 93       	push	r16
    30c6:	1f 93       	push	r17
    30c8:	df 93       	push	r29
    30ca:	cf 93       	push	r28
    30cc:	cd b7       	in	r28, 0x3d	; 61
    30ce:	de b7       	in	r29, 0x3e	; 62
    30d0:	58 2e       	mov	r5, r24
    30d2:	96 2e       	mov	r9, r22
    30d4:	44 2e       	mov	r4, r20
    30d6:	39 01       	movw	r6, r18
    30d8:	3c 2c       	mov	r3, r12
    30da:	c9 8c       	ldd	r12, Y+25	; 0x19
    30dc:	da 8c       	ldd	r13, Y+26	; 0x1a
    30de:	2b 8c       	ldd	r2, Y+27	; 0x1b
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	68 17       	cp	r22, r24
    30e4:	39 f1       	breq	.+78     	; 0x3134 <STEPPER_stepmode+0x8c>
    30e6:	68 17       	cp	r22, r24
    30e8:	28 f0       	brcs	.+10     	; 0x30f4 <STEPPER_stepmode+0x4c>
    30ea:	92 e0       	ldi	r25, 0x02	; 2
    30ec:	69 17       	cp	r22, r25
    30ee:	09 f0       	breq	.+2      	; 0x30f2 <STEPPER_stepmode+0x4a>
    30f0:	85 c0       	rjmp	.+266    	; 0x31fc <STEPPER_stepmode+0x154>
    30f2:	49 c0       	rjmp	.+146    	; 0x3186 <STEPPER_stepmode+0xde>
    30f4:	80 e0       	ldi	r24, 0x00	; 0
    30f6:	61 e0       	ldi	r22, 0x01	; 1
    30f8:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <STEPPER_set_mode>
    30fc:	80 e0       	ldi	r24, 0x00	; 0
    30fe:	b7 01       	movw	r22, r14
    3100:	0e 94 26 1a 	call	0x344c	; 0x344c <STEPPER_set_accel>
    3104:	80 e0       	ldi	r24, 0x00	; 0
    3106:	64 2d       	mov	r22, r4
    3108:	a3 01       	movw	r20, r6
    310a:	98 01       	movw	r18, r16
    310c:	03 2d       	mov	r16, r3
    310e:	ee 24       	eor	r14, r14
    3110:	e3 94       	inc	r14
    3112:	e0 e9       	ldi	r30, 0x90	; 144
    3114:	ce 2e       	mov	r12, r30
    3116:	e6 e0       	ldi	r30, 0x06	; 6
    3118:	de 2e       	mov	r13, r30
    311a:	0e 94 94 1a 	call	0x3528	; 0x3528 <STEPPER_step>
    311e:	55 20       	and	r5, r5
    3120:	09 f0       	breq	.+2      	; 0x3124 <STEPPER_stepmode+0x7c>
    3122:	6c c0       	rjmp	.+216    	; 0x31fc <STEPPER_stepmode+0x154>
    3124:	00 d0       	rcall	.+0      	; 0x3126 <STEPPER_stepmode+0x7e>
    3126:	0f 92       	push	r0
    3128:	ed b7       	in	r30, 0x3d	; 61
    312a:	fe b7       	in	r31, 0x3e	; 62
    312c:	11 82       	std	Z+1, r1	; 0x01
    312e:	b3 82       	std	Z+3, r11	; 0x03
    3130:	a2 82       	std	Z+2, r10	; 0x02
    3132:	23 c0       	rjmp	.+70     	; 0x317a <STEPPER_stepmode+0xd2>
    3134:	81 e0       	ldi	r24, 0x01	; 1
    3136:	61 e0       	ldi	r22, 0x01	; 1
    3138:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <STEPPER_set_mode>
    313c:	81 e0       	ldi	r24, 0x01	; 1
    313e:	b6 01       	movw	r22, r12
    3140:	0e 94 26 1a 	call	0x344c	; 0x344c <STEPPER_set_accel>
    3144:	81 e0       	ldi	r24, 0x01	; 1
    3146:	68 2d       	mov	r22, r8
    3148:	4d 89       	ldd	r20, Y+21	; 0x15
    314a:	5e 89       	ldd	r21, Y+22	; 0x16
    314c:	2f 89       	ldd	r18, Y+23	; 0x17
    314e:	38 8d       	ldd	r19, Y+24	; 0x18
    3150:	02 2d       	mov	r16, r2
    3152:	ee 24       	eor	r14, r14
    3154:	e3 94       	inc	r14
    3156:	70 e9       	ldi	r23, 0x90	; 144
    3158:	c7 2e       	mov	r12, r23
    315a:	76 e0       	ldi	r23, 0x06	; 6
    315c:	d7 2e       	mov	r13, r23
    315e:	0e 94 94 1a 	call	0x3528	; 0x3528 <STEPPER_step>
    3162:	55 20       	and	r5, r5
    3164:	09 f0       	breq	.+2      	; 0x3168 <STEPPER_stepmode+0xc0>
    3166:	4a c0       	rjmp	.+148    	; 0x31fc <STEPPER_stepmode+0x154>
    3168:	00 d0       	rcall	.+0      	; 0x316a <STEPPER_stepmode+0xc2>
    316a:	0f 92       	push	r0
    316c:	ed b7       	in	r30, 0x3d	; 61
    316e:	fe b7       	in	r31, 0x3e	; 62
    3170:	91 82       	std	Z+1, r9	; 0x01
    3172:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3174:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3176:	93 83       	std	Z+3, r25	; 0x03
    3178:	82 83       	std	Z+2, r24	; 0x02
    317a:	0e 94 45 1b 	call	0x368a	; 0x368a <STEPPER_wait_and_then>
    317e:	0f 90       	pop	r0
    3180:	0f 90       	pop	r0
    3182:	0f 90       	pop	r0
    3184:	3b c0       	rjmp	.+118    	; 0x31fc <STEPPER_stepmode+0x154>
    3186:	82 e0       	ldi	r24, 0x02	; 2
    3188:	61 e0       	ldi	r22, 0x01	; 1
    318a:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <STEPPER_set_mode>
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	b7 01       	movw	r22, r14
    3192:	0e 94 26 1a 	call	0x344c	; 0x344c <STEPPER_set_accel>
    3196:	81 e0       	ldi	r24, 0x01	; 1
    3198:	b6 01       	movw	r22, r12
    319a:	0e 94 26 1a 	call	0x344c	; 0x344c <STEPPER_set_accel>
    319e:	80 e0       	ldi	r24, 0x00	; 0
    31a0:	64 2d       	mov	r22, r4
    31a2:	a3 01       	movw	r20, r6
    31a4:	98 01       	movw	r18, r16
    31a6:	03 2d       	mov	r16, r3
    31a8:	ee 24       	eor	r14, r14
    31aa:	e3 94       	inc	r14
    31ac:	90 e9       	ldi	r25, 0x90	; 144
    31ae:	c9 2e       	mov	r12, r25
    31b0:	96 e0       	ldi	r25, 0x06	; 6
    31b2:	d9 2e       	mov	r13, r25
    31b4:	0e 94 94 1a 	call	0x3528	; 0x3528 <STEPPER_step>
    31b8:	81 e0       	ldi	r24, 0x01	; 1
    31ba:	68 2d       	mov	r22, r8
    31bc:	4d 89       	ldd	r20, Y+21	; 0x15
    31be:	5e 89       	ldd	r21, Y+22	; 0x16
    31c0:	2f 89       	ldd	r18, Y+23	; 0x17
    31c2:	38 8d       	ldd	r19, Y+24	; 0x18
    31c4:	02 2d       	mov	r16, r2
    31c6:	0e 94 94 1a 	call	0x3528	; 0x3528 <STEPPER_step>
    31ca:	55 20       	and	r5, r5
    31cc:	b9 f4       	brne	.+46     	; 0x31fc <STEPPER_stepmode+0x154>
    31ce:	00 d0       	rcall	.+0      	; 0x31d0 <STEPPER_stepmode+0x128>
    31d0:	00 d0       	rcall	.+0      	; 0x31d2 <STEPPER_stepmode+0x12a>
    31d2:	0f 92       	push	r0
    31d4:	ad b7       	in	r26, 0x3d	; 61
    31d6:	be b7       	in	r27, 0x3e	; 62
    31d8:	11 96       	adiw	r26, 0x01	; 1
    31da:	ed b7       	in	r30, 0x3d	; 61
    31dc:	fe b7       	in	r31, 0x3e	; 62
    31de:	91 82       	std	Z+1, r9	; 0x01
    31e0:	fd 01       	movw	r30, r26
    31e2:	b2 82       	std	Z+2, r11	; 0x02
    31e4:	a1 82       	std	Z+1, r10	; 0x01
    31e6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31e8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    31ea:	94 83       	std	Z+4, r25	; 0x04
    31ec:	83 83       	std	Z+3, r24	; 0x03
    31ee:	0e 94 45 1b 	call	0x368a	; 0x368a <STEPPER_wait_and_then>
    31f2:	0f 90       	pop	r0
    31f4:	0f 90       	pop	r0
    31f6:	0f 90       	pop	r0
    31f8:	0f 90       	pop	r0
    31fa:	0f 90       	pop	r0
    31fc:	cf 91       	pop	r28
    31fe:	df 91       	pop	r29
    3200:	1f 91       	pop	r17
    3202:	0f 91       	pop	r16
    3204:	ff 90       	pop	r15
    3206:	ef 90       	pop	r14
    3208:	df 90       	pop	r13
    320a:	cf 90       	pop	r12
    320c:	bf 90       	pop	r11
    320e:	af 90       	pop	r10
    3210:	9f 90       	pop	r9
    3212:	8f 90       	pop	r8
    3214:	7f 90       	pop	r7
    3216:	6f 90       	pop	r6
    3218:	5f 90       	pop	r5
    321a:	4f 90       	pop	r4
    321c:	3f 90       	pop	r3
    321e:	2f 90       	pop	r2
    3220:	08 95       	ret

00003222 <STEPPER_move>:
    3222:	6f 92       	push	r6
    3224:	7f 92       	push	r7
    3226:	8f 92       	push	r8
    3228:	9f 92       	push	r9
    322a:	af 92       	push	r10
    322c:	bf 92       	push	r11
    322e:	cf 92       	push	r12
    3230:	df 92       	push	r13
    3232:	ef 92       	push	r14
    3234:	ff 92       	push	r15
    3236:	0f 93       	push	r16
    3238:	1f 93       	push	r17
    323a:	df 93       	push	r29
    323c:	cf 93       	push	r28
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	94 2e       	mov	r9, r20
    3244:	7c 2d       	mov	r23, r12
    3246:	d5 01       	movw	r26, r10
    3248:	49 89       	ldd	r20, Y+17	; 0x11
    324a:	5a 89       	ldd	r21, Y+18	; 0x12
    324c:	ab 88       	ldd	r10, Y+19	; 0x13
    324e:	bc 88       	ldd	r11, Y+20	; 0x14
    3250:	cd 88       	ldd	r12, Y+21	; 0x15
    3252:	de 88       	ldd	r13, Y+22	; 0x16
    3254:	9f 89       	ldd	r25, Y+23	; 0x17
    3256:	81 30       	cpi	r24, 0x01	; 1
    3258:	09 f4       	brne	.+2      	; 0x325c <STEPPER_move+0x3a>
    325a:	57 c0       	rjmp	.+174    	; 0x330a <STEPPER_move+0xe8>
    325c:	81 30       	cpi	r24, 0x01	; 1
    325e:	b8 f1       	brcs	.+110    	; 0x32ce <STEPPER_move+0xac>
    3260:	82 30       	cpi	r24, 0x02	; 2
    3262:	09 f0       	breq	.+2      	; 0x3266 <STEPPER_move+0x44>
    3264:	76 c0       	rjmp	.+236    	; 0x3352 <STEPPER_move+0x130>
    3266:	61 30       	cpi	r22, 0x01	; 1
    3268:	91 f0       	breq	.+36     	; 0x328e <STEPPER_move+0x6c>
    326a:	61 30       	cpi	r22, 0x01	; 1
    326c:	20 f0       	brcs	.+8      	; 0x3276 <STEPPER_move+0x54>
    326e:	62 30       	cpi	r22, 0x02	; 2
    3270:	09 f0       	breq	.+2      	; 0x3274 <STEPPER_move+0x52>
    3272:	6f c0       	rjmp	.+222    	; 0x3352 <STEPPER_move+0x130>
    3274:	15 c0       	rjmp	.+42     	; 0x32a0 <STEPPER_move+0x7e>
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	60 e0       	ldi	r22, 0x00	; 0
    327a:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <STEPPER_set_mode>
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	b7 01       	movw	r22, r14
    3282:	0e 94 26 1a 	call	0x344c	; 0x344c <STEPPER_set_accel>
    3286:	80 e0       	ldi	r24, 0x00	; 0
    3288:	69 2d       	mov	r22, r9
    328a:	a8 01       	movw	r20, r16
    328c:	1d c0       	rjmp	.+58     	; 0x32c8 <STEPPER_move+0xa6>
    328e:	81 e0       	ldi	r24, 0x01	; 1
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <STEPPER_set_mode>
    3296:	81 e0       	ldi	r24, 0x01	; 1
    3298:	b6 01       	movw	r22, r12
    329a:	0e 94 26 1a 	call	0x344c	; 0x344c <STEPPER_set_accel>
    329e:	11 c0       	rjmp	.+34     	; 0x32c2 <STEPPER_move+0xa0>
    32a0:	82 e0       	ldi	r24, 0x02	; 2
    32a2:	60 e0       	ldi	r22, 0x00	; 0
    32a4:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <STEPPER_set_mode>
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	b7 01       	movw	r22, r14
    32ac:	0e 94 26 1a 	call	0x344c	; 0x344c <STEPPER_set_accel>
    32b0:	81 e0       	ldi	r24, 0x01	; 1
    32b2:	b6 01       	movw	r22, r12
    32b4:	0e 94 26 1a 	call	0x344c	; 0x344c <STEPPER_set_accel>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	69 2d       	mov	r22, r9
    32bc:	a8 01       	movw	r20, r16
    32be:	0e 94 0f 1a 	call	0x341e	; 0x341e <STEPPER_run>
    32c2:	81 e0       	ldi	r24, 0x01	; 1
    32c4:	68 2d       	mov	r22, r8
    32c6:	a5 01       	movw	r20, r10
    32c8:	0e 94 0f 1a 	call	0x341e	; 0x341e <STEPPER_run>
    32cc:	42 c0       	rjmp	.+132    	; 0x3352 <STEPPER_move+0x130>
    32ce:	ed b7       	in	r30, 0x3d	; 61
    32d0:	fe b7       	in	r31, 0x3e	; 62
    32d2:	39 97       	sbiw	r30, 0x09	; 9
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	fe bf       	out	0x3e, r31	; 62
    32da:	0f be       	out	0x3f, r0	; 63
    32dc:	ed bf       	out	0x3d, r30	; 61
    32de:	6d b6       	in	r6, 0x3d	; 61
    32e0:	7e b6       	in	r7, 0x3e	; 62
    32e2:	08 94       	sec
    32e4:	61 1c       	adc	r6, r1
    32e6:	71 1c       	adc	r7, r1
    32e8:	52 83       	std	Z+2, r21	; 0x02
    32ea:	41 83       	std	Z+1, r20	; 0x01
    32ec:	f3 01       	movw	r30, r6
    32ee:	b3 82       	std	Z+3, r11	; 0x03
    32f0:	a2 82       	std	Z+2, r10	; 0x02
    32f2:	d5 82       	std	Z+5, r13	; 0x05
    32f4:	c4 82       	std	Z+4, r12	; 0x04
    32f6:	96 83       	std	Z+6, r25	; 0x06
    32f8:	88 8d       	ldd	r24, Y+24	; 0x18
    32fa:	99 8d       	ldd	r25, Y+25	; 0x19
    32fc:	90 87       	std	Z+8, r25	; 0x08
    32fe:	87 83       	std	Z+7, r24	; 0x07
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	49 2d       	mov	r20, r9
    3304:	c7 2e       	mov	r12, r23
    3306:	5d 01       	movw	r10, r26
    3308:	1a c0       	rjmp	.+52     	; 0x333e <STEPPER_move+0x11c>
    330a:	ed b7       	in	r30, 0x3d	; 61
    330c:	fe b7       	in	r31, 0x3e	; 62
    330e:	39 97       	sbiw	r30, 0x09	; 9
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	fe bf       	out	0x3e, r31	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	ed bf       	out	0x3d, r30	; 61
    331a:	ad b7       	in	r26, 0x3d	; 61
    331c:	be b7       	in	r27, 0x3e	; 62
    331e:	11 96       	adiw	r26, 0x01	; 1
    3320:	52 83       	std	Z+2, r21	; 0x02
    3322:	41 83       	std	Z+1, r20	; 0x01
    3324:	fd 01       	movw	r30, r26
    3326:	b3 82       	std	Z+3, r11	; 0x03
    3328:	a2 82       	std	Z+2, r10	; 0x02
    332a:	d5 82       	std	Z+5, r13	; 0x05
    332c:	c4 82       	std	Z+4, r12	; 0x04
    332e:	96 83       	std	Z+6, r25	; 0x06
    3330:	10 86       	std	Z+8, r1	; 0x08
    3332:	17 82       	std	Z+7, r1	; 0x07
    3334:	81 e0       	ldi	r24, 0x01	; 1
    3336:	49 2d       	mov	r20, r9
    3338:	c7 2e       	mov	r12, r23
    333a:	aa 24       	eor	r10, r10
    333c:	bb 24       	eor	r11, r11
    333e:	0e 94 54 18 	call	0x30a8	; 0x30a8 <STEPPER_stepmode>
    3342:	8d b7       	in	r24, 0x3d	; 61
    3344:	9e b7       	in	r25, 0x3e	; 62
    3346:	09 96       	adiw	r24, 0x09	; 9
    3348:	0f b6       	in	r0, 0x3f	; 63
    334a:	f8 94       	cli
    334c:	9e bf       	out	0x3e, r25	; 62
    334e:	0f be       	out	0x3f, r0	; 63
    3350:	8d bf       	out	0x3d, r24	; 61
    3352:	cf 91       	pop	r28
    3354:	df 91       	pop	r29
    3356:	1f 91       	pop	r17
    3358:	0f 91       	pop	r16
    335a:	ff 90       	pop	r15
    335c:	ef 90       	pop	r14
    335e:	df 90       	pop	r13
    3360:	cf 90       	pop	r12
    3362:	bf 90       	pop	r11
    3364:	af 90       	pop	r10
    3366:	9f 90       	pop	r9
    3368:	8f 90       	pop	r8
    336a:	7f 90       	pop	r7
    336c:	6f 90       	pop	r6
    336e:	08 95       	ret

00003370 <STEPPER_open>:
    3370:	0e 94 27 23 	call	0x464e	; 0x464e <__STEPPER_init>
    3374:	81 e0       	ldi	r24, 0x01	; 1
    3376:	80 93 8f 06 	sts	0x068F, r24
    337a:	e9 e5       	ldi	r30, 0x59	; 89
    337c:	f6 e0       	ldi	r31, 0x06	; 6
    337e:	11 92       	st	Z+, r1
    3380:	11 92       	st	Z+, r1
    3382:	11 82       	std	Z+1, r1	; 0x01
    3384:	10 82       	st	Z, r1
    3386:	32 96       	adiw	r30, 0x02	; 2
    3388:	11 82       	std	Z+1, r1	; 0x01
    338a:	10 82       	st	Z, r1
    338c:	32 96       	adiw	r30, 0x02	; 2
    338e:	11 82       	std	Z+1, r1	; 0x01
    3390:	10 82       	st	Z, r1
    3392:	32 96       	adiw	r30, 0x02	; 2
    3394:	11 82       	std	Z+1, r1	; 0x01
    3396:	10 82       	st	Z, r1
    3398:	32 96       	adiw	r30, 0x02	; 2
    339a:	11 82       	std	Z+1, r1	; 0x01
    339c:	10 82       	st	Z, r1
    339e:	32 96       	adiw	r30, 0x02	; 2
    33a0:	11 82       	std	Z+1, r1	; 0x01
    33a2:	10 82       	st	Z, r1
    33a4:	32 96       	adiw	r30, 0x02	; 2
    33a6:	11 82       	std	Z+1, r1	; 0x01
    33a8:	10 82       	st	Z, r1
    33aa:	32 96       	adiw	r30, 0x02	; 2
    33ac:	11 82       	std	Z+1, r1	; 0x01
    33ae:	10 82       	st	Z, r1
    33b0:	32 96       	adiw	r30, 0x02	; 2
    33b2:	11 82       	std	Z+1, r1	; 0x01
    33b4:	10 82       	st	Z, r1
    33b6:	32 96       	adiw	r30, 0x02	; 2
    33b8:	11 82       	std	Z+1, r1	; 0x01
    33ba:	10 82       	st	Z, r1
    33bc:	32 96       	adiw	r30, 0x02	; 2
    33be:	11 82       	std	Z+1, r1	; 0x01
    33c0:	10 82       	st	Z, r1
    33c2:	32 96       	adiw	r30, 0x02	; 2
    33c4:	11 82       	std	Z+1, r1	; 0x01
    33c6:	10 82       	st	Z, r1
    33c8:	36 96       	adiw	r30, 0x06	; 6
    33ca:	11 92       	st	Z+, r1
    33cc:	11 92       	st	Z+, r1
    33ce:	11 92       	st	Z+, r1
    33d0:	10 82       	st	Z, r1
    33d2:	32 96       	adiw	r30, 0x02	; 2
    33d4:	11 92       	st	Z+, r1
    33d6:	11 92       	st	Z+, r1
    33d8:	11 92       	st	Z+, r1
    33da:	11 92       	st	Z+, r1
    33dc:	11 92       	st	Z+, r1
    33de:	11 92       	st	Z+, r1
    33e0:	11 92       	st	Z+, r1
    33e2:	11 82       	std	Z+1, r1	; 0x01
    33e4:	10 82       	st	Z, r1
    33e6:	32 96       	adiw	r30, 0x02	; 2
    33e8:	11 82       	std	Z+1, r1	; 0x01
    33ea:	10 82       	st	Z, r1
    33ec:	32 96       	adiw	r30, 0x02	; 2
    33ee:	11 82       	std	Z+1, r1	; 0x01
    33f0:	10 82       	st	Z, r1
    33f2:	32 96       	adiw	r30, 0x02	; 2
    33f4:	11 82       	std	Z+1, r1	; 0x01
    33f6:	10 82       	st	Z, r1
    33f8:	76 97       	sbiw	r30, 0x16	; 22
    33fa:	11 82       	std	Z+1, r1	; 0x01
    33fc:	10 82       	st	Z, r1
    33fe:	32 96       	adiw	r30, 0x02	; 2
    3400:	11 82       	std	Z+1, r1	; 0x01
    3402:	10 82       	st	Z, r1
    3404:	10 92 8e 06 	sts	0x068E, r1
    3408:	10 92 8d 06 	sts	0x068D, r1
    340c:	10 92 8f 06 	sts	0x068F, r1
    3410:	87 e0       	ldi	r24, 0x07	; 7
    3412:	61 e0       	ldi	r22, 0x01	; 1
    3414:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    3418:	87 e0       	ldi	r24, 0x07	; 7
    341a:	91 e0       	ldi	r25, 0x01	; 1
    341c:	08 95       	ret

0000341e <STEPPER_run>:
    341e:	ef 92       	push	r14
    3420:	ff 92       	push	r15
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	18 2f       	mov	r17, r24
    3428:	06 2f       	mov	r16, r22
    342a:	7a 01       	movw	r14, r20
    342c:	60 e0       	ldi	r22, 0x00	; 0
    342e:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <STEPPER_set_mode>
    3432:	81 2f       	mov	r24, r17
    3434:	60 2f       	mov	r22, r16
    3436:	0e 94 48 1a 	call	0x3490	; 0x3490 <STEPPER_set_dir>
    343a:	81 2f       	mov	r24, r17
    343c:	b7 01       	movw	r22, r14
    343e:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <STEPPER_set_speed>
    3442:	1f 91       	pop	r17
    3444:	0f 91       	pop	r16
    3446:	ff 90       	pop	r15
    3448:	ef 90       	pop	r14
    344a:	08 95       	ret

0000344c <STEPPER_set_accel>:
    344c:	48 2f       	mov	r20, r24
    344e:	81 e0       	ldi	r24, 0x01	; 1
    3450:	80 93 8f 06 	sts	0x068F, r24
    3454:	cb 01       	movw	r24, r22
    3456:	23 e0       	ldi	r18, 0x03	; 3
    3458:	69 3e       	cpi	r22, 0xE9	; 233
    345a:	72 07       	cpc	r23, r18
    345c:	10 f0       	brcs	.+4      	; 0x3462 <STEPPER_set_accel+0x16>
    345e:	88 ee       	ldi	r24, 0xE8	; 232
    3460:	93 e0       	ldi	r25, 0x03	; 3
    3462:	41 30       	cpi	r20, 0x01	; 1
    3464:	71 f0       	breq	.+28     	; 0x3482 <STEPPER_set_accel+0x36>
    3466:	41 30       	cpi	r20, 0x01	; 1
    3468:	18 f0       	brcs	.+6      	; 0x3470 <STEPPER_set_accel+0x24>
    346a:	42 30       	cpi	r20, 0x02	; 2
    346c:	71 f4       	brne	.+28     	; 0x348a <STEPPER_set_accel+0x3e>
    346e:	05 c0       	rjmp	.+10     	; 0x347a <STEPPER_set_accel+0x2e>
    3470:	90 93 64 06 	sts	0x0664, r25
    3474:	80 93 63 06 	sts	0x0663, r24
    3478:	08 c0       	rjmp	.+16     	; 0x348a <STEPPER_set_accel+0x3e>
    347a:	90 93 64 06 	sts	0x0664, r25
    347e:	80 93 63 06 	sts	0x0663, r24
    3482:	90 93 66 06 	sts	0x0666, r25
    3486:	80 93 65 06 	sts	0x0665, r24
    348a:	10 92 8f 06 	sts	0x068F, r1
    348e:	08 95       	ret

00003490 <STEPPER_set_dir>:
    3490:	98 2f       	mov	r25, r24
    3492:	81 e0       	ldi	r24, 0x01	; 1
    3494:	80 93 8f 06 	sts	0x068F, r24
    3498:	91 30       	cpi	r25, 0x01	; 1
    349a:	51 f0       	breq	.+20     	; 0x34b0 <STEPPER_set_dir+0x20>
    349c:	91 30       	cpi	r25, 0x01	; 1
    349e:	18 f0       	brcs	.+6      	; 0x34a6 <STEPPER_set_dir+0x16>
    34a0:	92 30       	cpi	r25, 0x02	; 2
    34a2:	41 f4       	brne	.+16     	; 0x34b4 <STEPPER_set_dir+0x24>
    34a4:	03 c0       	rjmp	.+6      	; 0x34ac <STEPPER_set_dir+0x1c>
    34a6:	60 93 7c 06 	sts	0x067C, r22
    34aa:	04 c0       	rjmp	.+8      	; 0x34b4 <STEPPER_set_dir+0x24>
    34ac:	60 93 7c 06 	sts	0x067C, r22
    34b0:	60 93 7d 06 	sts	0x067D, r22
    34b4:	10 92 8f 06 	sts	0x068F, r1
    34b8:	08 95       	ret

000034ba <STEPPER_set_mode>:
    34ba:	98 2f       	mov	r25, r24
    34bc:	81 e0       	ldi	r24, 0x01	; 1
    34be:	80 93 8f 06 	sts	0x068F, r24
    34c2:	91 30       	cpi	r25, 0x01	; 1
    34c4:	51 f0       	breq	.+20     	; 0x34da <STEPPER_set_mode+0x20>
    34c6:	91 30       	cpi	r25, 0x01	; 1
    34c8:	18 f0       	brcs	.+6      	; 0x34d0 <STEPPER_set_mode+0x16>
    34ca:	92 30       	cpi	r25, 0x02	; 2
    34cc:	41 f4       	brne	.+16     	; 0x34de <STEPPER_set_mode+0x24>
    34ce:	03 c0       	rjmp	.+6      	; 0x34d6 <STEPPER_set_mode+0x1c>
    34d0:	60 93 59 06 	sts	0x0659, r22
    34d4:	04 c0       	rjmp	.+8      	; 0x34de <STEPPER_set_mode+0x24>
    34d6:	60 93 59 06 	sts	0x0659, r22
    34da:	60 93 5a 06 	sts	0x065A, r22
    34de:	10 92 8f 06 	sts	0x068F, r1
    34e2:	08 95       	ret

000034e4 <STEPPER_set_speed>:
    34e4:	48 2f       	mov	r20, r24
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	80 93 8f 06 	sts	0x068F, r24
    34ec:	cb 01       	movw	r24, r22
    34ee:	21 e0       	ldi	r18, 0x01	; 1
    34f0:	61 39       	cpi	r22, 0x91	; 145
    34f2:	72 07       	cpc	r23, r18
    34f4:	10 f0       	brcs	.+4      	; 0x34fa <STEPPER_set_speed+0x16>
    34f6:	80 e9       	ldi	r24, 0x90	; 144
    34f8:	91 e0       	ldi	r25, 0x01	; 1
    34fa:	41 30       	cpi	r20, 0x01	; 1
    34fc:	71 f0       	breq	.+28     	; 0x351a <STEPPER_set_speed+0x36>
    34fe:	41 30       	cpi	r20, 0x01	; 1
    3500:	18 f0       	brcs	.+6      	; 0x3508 <STEPPER_set_speed+0x24>
    3502:	42 30       	cpi	r20, 0x02	; 2
    3504:	71 f4       	brne	.+28     	; 0x3522 <STEPPER_set_speed+0x3e>
    3506:	05 c0       	rjmp	.+10     	; 0x3512 <STEPPER_set_speed+0x2e>
    3508:	90 93 5c 06 	sts	0x065C, r25
    350c:	80 93 5b 06 	sts	0x065B, r24
    3510:	08 c0       	rjmp	.+16     	; 0x3522 <STEPPER_set_speed+0x3e>
    3512:	90 93 5c 06 	sts	0x065C, r25
    3516:	80 93 5b 06 	sts	0x065B, r24
    351a:	90 93 5e 06 	sts	0x065E, r25
    351e:	80 93 5d 06 	sts	0x065D, r24
    3522:	10 92 8f 06 	sts	0x068F, r1
    3526:	08 95       	ret

00003528 <STEPPER_step>:
    3528:	8f 92       	push	r8
    352a:	9f 92       	push	r9
    352c:	af 92       	push	r10
    352e:	bf 92       	push	r11
    3530:	cf 92       	push	r12
    3532:	df 92       	push	r13
    3534:	ef 92       	push	r14
    3536:	ff 92       	push	r15
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	cf 93       	push	r28
    353e:	df 93       	push	r29
    3540:	18 2f       	mov	r17, r24
    3542:	f6 2e       	mov	r15, r22
    3544:	5a 01       	movw	r10, r20
    3546:	49 01       	movw	r8, r18
    3548:	e6 01       	movw	r28, r12
    354a:	61 e0       	ldi	r22, 0x01	; 1
    354c:	0e 94 5d 1a 	call	0x34ba	; 0x34ba <STEPPER_set_mode>
    3550:	81 2f       	mov	r24, r17
    3552:	b5 01       	movw	r22, r10
    3554:	a4 01       	movw	r20, r8
    3556:	0e 94 61 23 	call	0x46c2	; 0x46c2 <STEPPER_setup_decels>
    355a:	81 2f       	mov	r24, r17
    355c:	6f 2d       	mov	r22, r15
    355e:	0e 94 48 1a 	call	0x3490	; 0x3490 <STEPPER_set_dir>
    3562:	81 2f       	mov	r24, r17
    3564:	60 2f       	mov	r22, r16
    3566:	0e 94 4c 23 	call	0x4698	; 0x4698 <STEPPER_set_stop_mode>
    356a:	81 2f       	mov	r24, r17
    356c:	b5 01       	movw	r22, r10
    356e:	0e 94 31 23 	call	0x4662	; 0x4662 <STEPPER_set_steps>
    3572:	c1 14       	cp	r12, r1
    3574:	d1 04       	cpc	r13, r1
    3576:	99 f0       	breq	.+38     	; 0x359e <STEPPER_step+0x76>
    3578:	11 30       	cpi	r17, 0x01	; 1
    357a:	49 f0       	breq	.+18     	; 0x358e <STEPPER_step+0x66>
    357c:	11 30       	cpi	r17, 0x01	; 1
    357e:	18 f0       	brcs	.+6      	; 0x3586 <STEPPER_step+0x5e>
    3580:	12 30       	cpi	r17, 0x02	; 2
    3582:	69 f4       	brne	.+26     	; 0x359e <STEPPER_step+0x76>
    3584:	06 c0       	rjmp	.+12     	; 0x3592 <STEPPER_step+0x6a>
    3586:	18 82       	st	Y, r1
    3588:	10 92 8b 06 	sts	0x068B, r1
    358c:	08 c0       	rjmp	.+16     	; 0x359e <STEPPER_step+0x76>
    358e:	19 82       	std	Y+1, r1	; 0x01
    3590:	04 c0       	rjmp	.+8      	; 0x359a <STEPPER_step+0x72>
    3592:	18 82       	st	Y, r1
    3594:	19 82       	std	Y+1, r1	; 0x01
    3596:	10 92 8b 06 	sts	0x068B, r1
    359a:	10 92 8c 06 	sts	0x068C, r1
    359e:	d0 93 8e 06 	sts	0x068E, r29
    35a2:	c0 93 8d 06 	sts	0x068D, r28
    35a6:	ee 20       	and	r14, r14
    35a8:	b9 f5       	brne	.+110    	; 0x3618 <STEPPER_step+0xf0>
    35aa:	84 ee       	ldi	r24, 0xE4	; 228
    35ac:	93 e0       	ldi	r25, 0x03	; 3
    35ae:	90 93 8e 06 	sts	0x068E, r25
    35b2:	80 93 8d 06 	sts	0x068D, r24
    35b6:	81 2f       	mov	r24, r17
    35b8:	b4 01       	movw	r22, r8
    35ba:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <STEPPER_set_speed>
    35be:	81 2f       	mov	r24, r17
    35c0:	0e 94 12 23 	call	0x4624	; 0x4624 <STEPPER_go>
    35c4:	11 30       	cpi	r17, 0x01	; 1
    35c6:	71 f0       	breq	.+28     	; 0x35e4 <STEPPER_step+0xbc>
    35c8:	11 30       	cpi	r17, 0x01	; 1
    35ca:	18 f0       	brcs	.+6      	; 0x35d2 <STEPPER_step+0xaa>
    35cc:	12 30       	cpi	r17, 0x02	; 2
    35ce:	59 f5       	brne	.+86     	; 0x3626 <STEPPER_step+0xfe>
    35d0:	12 c0       	rjmp	.+36     	; 0x35f6 <STEPPER_step+0xce>
    35d2:	10 92 e4 03 	sts	0x03E4, r1
    35d6:	10 92 8b 06 	sts	0x068B, r1
    35da:	80 91 e4 03 	lds	r24, 0x03E4
    35de:	88 23       	and	r24, r24
    35e0:	e1 f3       	breq	.-8      	; 0x35da <STEPPER_step+0xb2>
    35e2:	21 c0       	rjmp	.+66     	; 0x3626 <STEPPER_step+0xfe>
    35e4:	10 92 e5 03 	sts	0x03E5, r1
    35e8:	10 92 8c 06 	sts	0x068C, r1
    35ec:	80 91 e5 03 	lds	r24, 0x03E5
    35f0:	88 23       	and	r24, r24
    35f2:	e1 f3       	breq	.-8      	; 0x35ec <STEPPER_step+0xc4>
    35f4:	18 c0       	rjmp	.+48     	; 0x3626 <STEPPER_step+0xfe>
    35f6:	10 92 e4 03 	sts	0x03E4, r1
    35fa:	10 92 e5 03 	sts	0x03E5, r1
    35fe:	10 92 8b 06 	sts	0x068B, r1
    3602:	10 92 8c 06 	sts	0x068C, r1
    3606:	80 91 e4 03 	lds	r24, 0x03E4
    360a:	88 23       	and	r24, r24
    360c:	e1 f3       	breq	.-8      	; 0x3606 <STEPPER_step+0xde>
    360e:	80 91 e5 03 	lds	r24, 0x03E5
    3612:	88 23       	and	r24, r24
    3614:	c1 f3       	breq	.-16     	; 0x3606 <STEPPER_step+0xde>
    3616:	07 c0       	rjmp	.+14     	; 0x3626 <STEPPER_step+0xfe>
    3618:	81 2f       	mov	r24, r17
    361a:	b4 01       	movw	r22, r8
    361c:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <STEPPER_set_speed>
    3620:	81 2f       	mov	r24, r17
    3622:	0e 94 12 23 	call	0x4624	; 0x4624 <STEPPER_go>
    3626:	df 91       	pop	r29
    3628:	cf 91       	pop	r28
    362a:	1f 91       	pop	r17
    362c:	0f 91       	pop	r16
    362e:	ff 90       	pop	r15
    3630:	ef 90       	pop	r14
    3632:	df 90       	pop	r13
    3634:	cf 90       	pop	r12
    3636:	bf 90       	pop	r11
    3638:	af 90       	pop	r10
    363a:	9f 90       	pop	r9
    363c:	8f 90       	pop	r8
    363e:	08 95       	ret

00003640 <STEPPER_stop>:
    3640:	0f 93       	push	r16
    3642:	1f 93       	push	r17
    3644:	18 2f       	mov	r17, r24
    3646:	06 2f       	mov	r16, r22
    3648:	66 23       	and	r22, r22
    364a:	49 f4       	brne	.+18     	; 0x365e <STEPPER_stop+0x1e>
    364c:	60 e0       	ldi	r22, 0x00	; 0
    364e:	70 e0       	ldi	r23, 0x00	; 0
    3650:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <STEPPER_set_speed>
    3654:	81 2f       	mov	r24, r17
    3656:	60 e0       	ldi	r22, 0x00	; 0
    3658:	70 e0       	ldi	r23, 0x00	; 0
    365a:	0e 94 31 23 	call	0x4662	; 0x4662 <STEPPER_set_steps>
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	80 93 8f 06 	sts	0x068F, r24
    3664:	11 30       	cpi	r17, 0x01	; 1
    3666:	51 f0       	breq	.+20     	; 0x367c <STEPPER_stop+0x3c>
    3668:	11 30       	cpi	r17, 0x01	; 1
    366a:	18 f0       	brcs	.+6      	; 0x3672 <STEPPER_stop+0x32>
    366c:	12 30       	cpi	r17, 0x02	; 2
    366e:	41 f4       	brne	.+16     	; 0x3680 <STEPPER_stop+0x40>
    3670:	03 c0       	rjmp	.+6      	; 0x3678 <STEPPER_stop+0x38>
    3672:	00 93 77 06 	sts	0x0677, r16
    3676:	04 c0       	rjmp	.+8      	; 0x3680 <STEPPER_stop+0x40>
    3678:	00 93 77 06 	sts	0x0677, r16
    367c:	00 93 78 06 	sts	0x0678, r16
    3680:	10 92 8f 06 	sts	0x068F, r1
    3684:	1f 91       	pop	r17
    3686:	0f 91       	pop	r16
    3688:	08 95       	ret

0000368a <STEPPER_wait_and_then>:
    368a:	cf 92       	push	r12
    368c:	df 92       	push	r13
    368e:	ef 92       	push	r14
    3690:	ff 92       	push	r15
    3692:	0f 93       	push	r16
    3694:	1f 93       	push	r17
    3696:	df 93       	push	r29
    3698:	cf 93       	push	r28
    369a:	cd b7       	in	r28, 0x3d	; 61
    369c:	de b7       	in	r29, 0x3e	; 62
    369e:	8b 85       	ldd	r24, Y+11	; 0x0b
    36a0:	81 30       	cpi	r24, 0x01	; 1
    36a2:	61 f0       	breq	.+24     	; 0x36bc <STEPPER_wait_and_then+0x32>
    36a4:	81 30       	cpi	r24, 0x01	; 1
    36a6:	18 f0       	brcs	.+6      	; 0x36ae <STEPPER_wait_and_then+0x24>
    36a8:	82 30       	cpi	r24, 0x02	; 2
    36aa:	a1 f5       	brne	.+104    	; 0x3714 <STEPPER_wait_and_then+0x8a>
    36ac:	11 c0       	rjmp	.+34     	; 0x36d0 <STEPPER_wait_and_then+0x46>
    36ae:	ec 85       	ldd	r30, Y+12	; 0x0c
    36b0:	fd 85       	ldd	r31, Y+13	; 0x0d
    36b2:	80 91 90 06 	lds	r24, 0x0690
    36b6:	88 23       	and	r24, r24
    36b8:	e1 f3       	breq	.-8      	; 0x36b2 <STEPPER_wait_and_then+0x28>
    36ba:	06 c0       	rjmp	.+12     	; 0x36c8 <STEPPER_wait_and_then+0x3e>
    36bc:	ec 85       	ldd	r30, Y+12	; 0x0c
    36be:	fd 85       	ldd	r31, Y+13	; 0x0d
    36c0:	80 91 91 06 	lds	r24, 0x0691
    36c4:	88 23       	and	r24, r24
    36c6:	e1 f3       	breq	.-8      	; 0x36c0 <STEPPER_wait_and_then+0x36>
    36c8:	30 97       	sbiw	r30, 0x00	; 0
    36ca:	21 f1       	breq	.+72     	; 0x3714 <STEPPER_wait_and_then+0x8a>
    36cc:	09 95       	icall
    36ce:	22 c0       	rjmp	.+68     	; 0x3714 <STEPPER_wait_and_then+0x8a>
    36d0:	cc 84       	ldd	r12, Y+12	; 0x0c
    36d2:	dd 84       	ldd	r13, Y+13	; 0x0d
    36d4:	ee 84       	ldd	r14, Y+14	; 0x0e
    36d6:	ff 84       	ldd	r15, Y+15	; 0x0f
    36d8:	00 e0       	ldi	r16, 0x00	; 0
    36da:	10 e0       	ldi	r17, 0x00	; 0
    36dc:	00 23       	and	r16, r16
    36de:	51 f4       	brne	.+20     	; 0x36f4 <STEPPER_wait_and_then+0x6a>
    36e0:	80 91 90 06 	lds	r24, 0x0690
    36e4:	88 23       	and	r24, r24
    36e6:	31 f0       	breq	.+12     	; 0x36f4 <STEPPER_wait_and_then+0x6a>
    36e8:	c1 14       	cp	r12, r1
    36ea:	d1 04       	cpc	r13, r1
    36ec:	11 f0       	breq	.+4      	; 0x36f2 <STEPPER_wait_and_then+0x68>
    36ee:	f6 01       	movw	r30, r12
    36f0:	09 95       	icall
    36f2:	01 e0       	ldi	r16, 0x01	; 1
    36f4:	11 23       	and	r17, r17
    36f6:	51 f4       	brne	.+20     	; 0x370c <STEPPER_wait_and_then+0x82>
    36f8:	80 91 91 06 	lds	r24, 0x0691
    36fc:	88 23       	and	r24, r24
    36fe:	31 f0       	breq	.+12     	; 0x370c <STEPPER_wait_and_then+0x82>
    3700:	e1 14       	cp	r14, r1
    3702:	f1 04       	cpc	r15, r1
    3704:	11 f0       	breq	.+4      	; 0x370a <STEPPER_wait_and_then+0x80>
    3706:	f7 01       	movw	r30, r14
    3708:	09 95       	icall
    370a:	11 e0       	ldi	r17, 0x01	; 1
    370c:	00 23       	and	r16, r16
    370e:	31 f3       	breq	.-52     	; 0x36dc <STEPPER_wait_and_then+0x52>
    3710:	11 23       	and	r17, r17
    3712:	21 f3       	breq	.-56     	; 0x36dc <STEPPER_wait_and_then+0x52>
    3714:	cf 91       	pop	r28
    3716:	df 91       	pop	r29
    3718:	1f 91       	pop	r17
    371a:	0f 91       	pop	r16
    371c:	ff 90       	pop	r15
    371e:	ef 90       	pop	r14
    3720:	df 90       	pop	r13
    3722:	cf 90       	pop	r12
    3724:	08 95       	ret

00003726 <SYS_get_state>:
    3726:	e8 2f       	mov	r30, r24
    3728:	f0 e0       	ldi	r31, 0x00	; 0
    372a:	e3 31       	cpi	r30, 0x13	; 19
    372c:	f1 05       	cpc	r31, r1
    372e:	40 f4       	brcc	.+16     	; 0x3740 <SYS_get_state+0x1a>
    3730:	e2 5c       	subi	r30, 0xC2	; 194
    3732:	ff 4f       	sbci	r31, 0xFF	; 255
    3734:	ee 0f       	add	r30, r30
    3736:	ff 1f       	adc	r31, r31
    3738:	05 90       	lpm	r0, Z+
    373a:	f4 91       	lpm	r31, Z+
    373c:	e0 2d       	mov	r30, r0
    373e:	09 94       	ijmp
    3740:	80 e0       	ldi	r24, 0x00	; 0
    3742:	08 95       	ret
    3744:	80 91 92 06 	lds	r24, 0x0692
    3748:	08 95       	ret
    374a:	80 91 93 06 	lds	r24, 0x0693
    374e:	08 95       	ret
    3750:	80 91 94 06 	lds	r24, 0x0694
    3754:	08 95       	ret
    3756:	80 91 95 06 	lds	r24, 0x0695
    375a:	08 95       	ret
    375c:	80 91 96 06 	lds	r24, 0x0696
    3760:	08 95       	ret
    3762:	80 91 98 06 	lds	r24, 0x0698
    3766:	08 95       	ret
    3768:	80 91 97 06 	lds	r24, 0x0697
    376c:	08 95       	ret
    376e:	80 91 99 06 	lds	r24, 0x0699
    3772:	08 95       	ret
    3774:	80 91 9a 06 	lds	r24, 0x069A
    3778:	08 95       	ret
    377a:	80 91 9b 06 	lds	r24, 0x069B
    377e:	08 95       	ret
    3780:	80 91 9c 06 	lds	r24, 0x069C
    3784:	08 95       	ret
    3786:	80 91 9d 06 	lds	r24, 0x069D
    378a:	08 95       	ret
    378c:	80 91 9e 06 	lds	r24, 0x069E
    3790:	08 95       	ret
    3792:	80 91 9f 06 	lds	r24, 0x069F
    3796:	08 95       	ret
    3798:	80 91 a0 06 	lds	r24, 0x06A0
    379c:	08 95       	ret
    379e:	80 91 a1 06 	lds	r24, 0x06A1
    37a2:	08 95       	ret
    37a4:	80 91 a2 06 	lds	r24, 0x06A2
    37a8:	08 95       	ret
    37aa:	80 91 a3 06 	lds	r24, 0x06A3
    37ae:	08 95       	ret
    37b0:	80 91 a4 06 	lds	r24, 0x06A4
    37b4:	08 95       	ret

000037b6 <SYS_set_state>:
    37b6:	e8 2f       	mov	r30, r24
    37b8:	f0 e0       	ldi	r31, 0x00	; 0
    37ba:	e3 31       	cpi	r30, 0x13	; 19
    37bc:	f1 05       	cpc	r31, r1
    37be:	08 f0       	brcs	.+2      	; 0x37c2 <SYS_set_state+0xc>
    37c0:	40 c0       	rjmp	.+128    	; 0x3842 <SYS_set_state+0x8c>
    37c2:	ef 5a       	subi	r30, 0xAF	; 175
    37c4:	ff 4f       	sbci	r31, 0xFF	; 255
    37c6:	ee 0f       	add	r30, r30
    37c8:	ff 1f       	adc	r31, r31
    37ca:	05 90       	lpm	r0, Z+
    37cc:	f4 91       	lpm	r31, Z+
    37ce:	e0 2d       	mov	r30, r0
    37d0:	09 94       	ijmp
    37d2:	60 93 92 06 	sts	0x0692, r22
    37d6:	08 95       	ret
    37d8:	60 93 93 06 	sts	0x0693, r22
    37dc:	08 95       	ret
    37de:	60 93 94 06 	sts	0x0694, r22
    37e2:	08 95       	ret
    37e4:	60 93 95 06 	sts	0x0695, r22
    37e8:	08 95       	ret
    37ea:	60 93 96 06 	sts	0x0696, r22
    37ee:	08 95       	ret
    37f0:	60 93 98 06 	sts	0x0698, r22
    37f4:	08 95       	ret
    37f6:	60 93 97 06 	sts	0x0697, r22
    37fa:	08 95       	ret
    37fc:	60 93 99 06 	sts	0x0699, r22
    3800:	08 95       	ret
    3802:	60 93 9a 06 	sts	0x069A, r22
    3806:	08 95       	ret
    3808:	60 93 9b 06 	sts	0x069B, r22
    380c:	08 95       	ret
    380e:	60 93 9c 06 	sts	0x069C, r22
    3812:	08 95       	ret
    3814:	60 93 9d 06 	sts	0x069D, r22
    3818:	08 95       	ret
    381a:	60 93 9e 06 	sts	0x069E, r22
    381e:	08 95       	ret
    3820:	60 93 9f 06 	sts	0x069F, r22
    3824:	08 95       	ret
    3826:	60 93 a0 06 	sts	0x06A0, r22
    382a:	08 95       	ret
    382c:	60 93 a1 06 	sts	0x06A1, r22
    3830:	08 95       	ret
    3832:	60 93 a2 06 	sts	0x06A2, r22
    3836:	08 95       	ret
    3838:	60 93 a3 06 	sts	0x06A3, r22
    383c:	08 95       	ret
    383e:	60 93 a2 06 	sts	0x06A2, r22
    3842:	08 95       	ret

00003844 <ATTINY_get_sensors>:
    3844:	0f 93       	push	r16
    3846:	1f 93       	push	r17
    3848:	81 e0       	ldi	r24, 0x01	; 1
    384a:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    384e:	81 30       	cpi	r24, 0x01	; 1
    3850:	11 f0       	breq	.+4      	; 0x3856 <ATTINY_get_sensors+0x12>
    3852:	00 e0       	ldi	r16, 0x00	; 0
    3854:	24 c0       	rjmp	.+72     	; 0x389e <ATTINY_get_sensors+0x5a>
    3856:	87 e0       	ldi	r24, 0x07	; 7
    3858:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <SPI_set_slave_addr>
    385c:	82 e0       	ldi	r24, 0x02	; 2
    385e:	6a e0       	ldi	r22, 0x0A	; 10
    3860:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <SPI_transmit>
    3864:	82 e0       	ldi	r24, 0x02	; 2
    3866:	62 eb       	ldi	r22, 0xB2	; 178
    3868:	0e 94 9c 17 	call	0x2f38	; 0x2f38 <SPI_transmit>
    386c:	18 ec       	ldi	r17, 0xC8	; 200
    386e:	81 2f       	mov	r24, r17
    3870:	8a 95       	dec	r24
    3872:	f1 f7       	brne	.-4      	; 0x3870 <ATTINY_get_sensors+0x2c>
    3874:	82 e0       	ldi	r24, 0x02	; 2
    3876:	60 e0       	ldi	r22, 0x00	; 0
    3878:	0e 94 fd 21 	call	0x43fa	; 0x43fa <SPI_receive>
    387c:	08 2f       	mov	r16, r24
    387e:	81 2f       	mov	r24, r17
    3880:	8a 95       	dec	r24
    3882:	f1 f7       	brne	.-4      	; 0x3880 <ATTINY_get_sensors+0x3c>
    3884:	82 e0       	ldi	r24, 0x02	; 2
    3886:	60 e0       	ldi	r22, 0x00	; 0
    3888:	0e 94 fd 21 	call	0x43fa	; 0x43fa <SPI_receive>
    388c:	1a 95       	dec	r17
    388e:	f1 f7       	brne	.-4      	; 0x388c <ATTINY_get_sensors+0x48>
    3890:	87 e0       	ldi	r24, 0x07	; 7
    3892:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <SPI_set_slave_addr>
    3896:	88 e8       	ldi	r24, 0x88	; 136
    3898:	93 e1       	ldi	r25, 0x13	; 19
    389a:	01 97       	sbiw	r24, 0x01	; 1
    389c:	f1 f7       	brne	.-4      	; 0x389a <ATTINY_get_sensors+0x56>
    389e:	80 2f       	mov	r24, r16
    38a0:	1f 91       	pop	r17
    38a2:	0f 91       	pop	r16
    38a4:	08 95       	ret

000038a6 <ATTINY_get_SW_state>:
    38a6:	1f 93       	push	r17
    38a8:	cf 93       	push	r28
    38aa:	df 93       	push	r29
    38ac:	18 2f       	mov	r17, r24
    38ae:	80 91 e7 03 	lds	r24, 0x03E7
    38b2:	88 23       	and	r24, r24
    38b4:	41 f0       	breq	.+16     	; 0x38c6 <ATTINY_get_SW_state+0x20>
    38b6:	80 91 f1 03 	lds	r24, 0x03F1
    38ba:	88 23       	and	r24, r24
    38bc:	99 f0       	breq	.+38     	; 0x38e4 <ATTINY_get_SW_state+0x3e>
    38be:	10 92 e7 03 	sts	0x03E7, r1
    38c2:	10 92 f1 03 	sts	0x03F1, r1
    38c6:	0e 94 22 1c 	call	0x3844	; 0x3844 <ATTINY_get_sensors>
    38ca:	80 93 e6 03 	sts	0x03E6, r24
    38ce:	8b ee       	ldi	r24, 0xEB	; 235
    38d0:	93 e0       	ldi	r25, 0x03	; 3
    38d2:	61 e0       	ldi	r22, 0x01	; 1
    38d4:	40 e0       	ldi	r20, 0x00	; 0
    38d6:	22 e3       	ldi	r18, 0x32	; 50
    38d8:	30 e0       	ldi	r19, 0x00	; 0
    38da:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TMRSRVC_new>
    38de:	81 e0       	ldi	r24, 0x01	; 1
    38e0:	80 93 e7 03 	sts	0x03E7, r24
    38e4:	90 91 e6 03 	lds	r25, 0x03E6
    38e8:	a1 2f       	mov	r26, r17
    38ea:	b0 e0       	ldi	r27, 0x00	; 0
    38ec:	ed 01       	movw	r28, r26
    38ee:	ca 59       	subi	r28, 0x9A	; 154
    38f0:	dc 4f       	sbci	r29, 0xFC	; 252
    38f2:	88 81       	ld	r24, Y
    38f4:	88 23       	and	r24, r24
    38f6:	69 f0       	breq	.+26     	; 0x3912 <ATTINY_get_SW_state+0x6c>
    38f8:	fd 01       	movw	r30, r26
    38fa:	e7 59       	subi	r30, 0x97	; 151
    38fc:	fc 4f       	sbci	r31, 0xFC	; 252
    38fe:	80 81       	ld	r24, Z
    3900:	98 23       	and	r25, r24
    3902:	c1 f0       	breq	.+48     	; 0x3934 <ATTINY_get_SW_state+0x8e>
    3904:	fd 01       	movw	r30, r26
    3906:	e8 51       	subi	r30, 0x18	; 24
    3908:	fc 4f       	sbci	r31, 0xFC	; 252
    390a:	81 e0       	ldi	r24, 0x01	; 1
    390c:	80 83       	st	Z, r24
    390e:	18 82       	st	Y, r1
    3910:	11 c0       	rjmp	.+34     	; 0x3934 <ATTINY_get_SW_state+0x8e>
    3912:	fd 01       	movw	r30, r26
    3914:	e8 51       	subi	r30, 0x18	; 24
    3916:	fc 4f       	sbci	r31, 0xFC	; 252
    3918:	80 81       	ld	r24, Z
    391a:	81 11       	cpse	r24, r1
    391c:	10 82       	st	Z, r1
    391e:	fd 01       	movw	r30, r26
    3920:	e7 59       	subi	r30, 0x97	; 151
    3922:	fc 4f       	sbci	r31, 0xFC	; 252
    3924:	80 81       	ld	r24, Z
    3926:	98 23       	and	r25, r24
    3928:	29 f4       	brne	.+10     	; 0x3934 <ATTINY_get_SW_state+0x8e>
    392a:	fd 01       	movw	r30, r26
    392c:	ea 59       	subi	r30, 0x9A	; 154
    392e:	fc 4f       	sbci	r31, 0xFC	; 252
    3930:	81 e0       	ldi	r24, 0x01	; 1
    3932:	80 83       	st	Z, r24
    3934:	a8 51       	subi	r26, 0x18	; 24
    3936:	bc 4f       	sbci	r27, 0xFC	; 252
    3938:	8c 91       	ld	r24, X
    393a:	df 91       	pop	r29
    393c:	cf 91       	pop	r28
    393e:	1f 91       	pop	r17
    3940:	08 95       	ret

00003942 <ATTINY_open>:
    3942:	82 e0       	ldi	r24, 0x02	; 2
    3944:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    3948:	88 23       	and	r24, r24
    394a:	19 f4       	brne	.+6      	; 0x3952 <ATTINY_open+0x10>
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	82 e0       	ldi	r24, 0x02	; 2
    3950:	08 95       	ret
    3952:	10 92 c0 06 	sts	0x06C0, r1
    3956:	10 92 bf 06 	sts	0x06BF, r1
    395a:	10 92 c2 06 	sts	0x06C2, r1
    395e:	10 92 c1 06 	sts	0x06C1, r1
    3962:	10 92 c4 06 	sts	0x06C4, r1
    3966:	10 92 c3 06 	sts	0x06C3, r1
    396a:	10 92 c6 06 	sts	0x06C6, r1
    396e:	10 92 c5 06 	sts	0x06C5, r1
    3972:	10 92 c8 06 	sts	0x06C8, r1
    3976:	10 92 c7 06 	sts	0x06C7, r1
    397a:	80 e9       	ldi	r24, 0x90	; 144
    397c:	91 e0       	ldi	r25, 0x01	; 1
    397e:	90 93 ac 06 	sts	0x06AC, r25
    3982:	80 93 ab 06 	sts	0x06AB, r24
    3986:	90 93 ae 06 	sts	0x06AE, r25
    398a:	80 93 ad 06 	sts	0x06AD, r24
    398e:	90 93 b0 06 	sts	0x06B0, r25
    3992:	80 93 af 06 	sts	0x06AF, r24
    3996:	90 93 b2 06 	sts	0x06B2, r25
    399a:	80 93 b1 06 	sts	0x06B1, r24
    399e:	90 93 b4 06 	sts	0x06B4, r25
    39a2:	80 93 b3 06 	sts	0x06B3, r24
    39a6:	84 e3       	ldi	r24, 0x34	; 52
    39a8:	98 e0       	ldi	r25, 0x08	; 8
    39aa:	90 93 b6 06 	sts	0x06B6, r25
    39ae:	80 93 b5 06 	sts	0x06B5, r24
    39b2:	90 93 b8 06 	sts	0x06B8, r25
    39b6:	80 93 b7 06 	sts	0x06B7, r24
    39ba:	90 93 ba 06 	sts	0x06BA, r25
    39be:	80 93 b9 06 	sts	0x06B9, r24
    39c2:	90 93 bc 06 	sts	0x06BC, r25
    39c6:	80 93 bb 06 	sts	0x06BB, r24
    39ca:	90 93 be 06 	sts	0x06BE, r25
    39ce:	80 93 bd 06 	sts	0x06BD, r24
    39d2:	81 e0       	ldi	r24, 0x01	; 1
    39d4:	61 e0       	ldi	r22, 0x01	; 1
    39d6:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    39da:	91 e0       	ldi	r25, 0x01	; 1
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	08 95       	ret

000039e0 <TMRSRVC_delay>:
    39e0:	df 93       	push	r29
    39e2:	cf 93       	push	r28
    39e4:	cd b7       	in	r28, 0x3d	; 61
    39e6:	de b7       	in	r29, 0x3e	; 62
    39e8:	29 97       	sbiw	r28, 0x09	; 9
    39ea:	0f b6       	in	r0, 0x3f	; 63
    39ec:	f8 94       	cli
    39ee:	de bf       	out	0x3e, r29	; 62
    39f0:	0f be       	out	0x3f, r0	; 63
    39f2:	cd bf       	out	0x3d, r28	; 61
    39f4:	9c 01       	movw	r18, r24
    39f6:	ce 01       	movw	r24, r28
    39f8:	01 96       	adiw	r24, 0x01	; 1
    39fa:	61 e0       	ldi	r22, 0x01	; 1
    39fc:	40 e0       	ldi	r20, 0x00	; 0
    39fe:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <TMRSRVC_new>
    3a02:	98 2f       	mov	r25, r24
    3a04:	88 23       	and	r24, r24
    3a06:	19 f4       	brne	.+6      	; 0x3a0e <TMRSRVC_delay+0x2e>
    3a08:	8f 81       	ldd	r24, Y+7	; 0x07
    3a0a:	88 23       	and	r24, r24
    3a0c:	e9 f3       	breq	.-6      	; 0x3a08 <TMRSRVC_delay+0x28>
    3a0e:	89 2f       	mov	r24, r25
    3a10:	29 96       	adiw	r28, 0x09	; 9
    3a12:	0f b6       	in	r0, 0x3f	; 63
    3a14:	f8 94       	cli
    3a16:	de bf       	out	0x3e, r29	; 62
    3a18:	0f be       	out	0x3f, r0	; 63
    3a1a:	cd bf       	out	0x3d, r28	; 61
    3a1c:	cf 91       	pop	r28
    3a1e:	df 91       	pop	r29
    3a20:	08 95       	ret

00003a22 <TMRSRVC_new>:
    3a22:	ef 92       	push	r14
    3a24:	ff 92       	push	r15
    3a26:	0f 93       	push	r16
    3a28:	1f 93       	push	r17
    3a2a:	cf 93       	push	r28
    3a2c:	df 93       	push	r29
    3a2e:	ec 01       	movw	r28, r24
    3a30:	f6 2e       	mov	r15, r22
    3a32:	e4 2e       	mov	r14, r20
    3a34:	89 01       	movw	r16, r18
    3a36:	88 e0       	ldi	r24, 0x08	; 8
    3a38:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    3a3c:	81 30       	cpi	r24, 0x01	; 1
    3a3e:	11 f0       	breq	.+4      	; 0x3a44 <TMRSRVC_new+0x22>
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	26 c0       	rjmp	.+76     	; 0x3a90 <TMRSRVC_new+0x6e>
    3a44:	84 e0       	ldi	r24, 0x04	; 4
    3a46:	90 e0       	ldi	r25, 0x00	; 0
    3a48:	0e 94 a8 30 	call	0x6150	; 0x6150 <malloc>
    3a4c:	fc 01       	movw	r30, r24
    3a4e:	00 97       	sbiw	r24, 0x00	; 0
    3a50:	11 f4       	brne	.+4      	; 0x3a56 <TMRSRVC_new+0x34>
    3a52:	82 e0       	ldi	r24, 0x02	; 2
    3a54:	1d c0       	rjmp	.+58     	; 0x3a90 <TMRSRVC_new+0x6e>
    3a56:	f9 82       	std	Y+1, r15	; 0x01
    3a58:	f0 fc       	sbrc	r15, 0
    3a5a:	1e 82       	std	Y+6, r1	; 0x06
    3a5c:	81 e0       	ldi	r24, 0x01	; 1
    3a5e:	e8 16       	cp	r14, r24
    3a60:	19 f4       	brne	.+6      	; 0x3a68 <TMRSRVC_new+0x46>
    3a62:	89 81       	ldd	r24, Y+1	; 0x01
    3a64:	84 60       	ori	r24, 0x04	; 4
    3a66:	89 83       	std	Y+1, r24	; 0x01
    3a68:	89 81       	ldd	r24, Y+1	; 0x01
    3a6a:	88 60       	ori	r24, 0x08	; 8
    3a6c:	89 83       	std	Y+1, r24	; 0x01
    3a6e:	1b 83       	std	Y+3, r17	; 0x03
    3a70:	0a 83       	std	Y+2, r16	; 0x02
    3a72:	1d 83       	std	Y+5, r17	; 0x05
    3a74:	0c 83       	std	Y+4, r16	; 0x04
    3a76:	d1 83       	std	Z+1, r29	; 0x01
    3a78:	c0 83       	st	Z, r28
    3a7a:	13 82       	std	Z+3, r1	; 0x03
    3a7c:	12 82       	std	Z+2, r1	; 0x02
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	80 93 54 04 	sts	0x0454, r24
    3a84:	cf 01       	movw	r24, r30
    3a86:	0e 94 c1 23 	call	0x4782	; 0x4782 <TMRSRVC_insert>
    3a8a:	10 92 54 04 	sts	0x0454, r1
    3a8e:	80 e0       	ldi	r24, 0x00	; 0
    3a90:	df 91       	pop	r29
    3a92:	cf 91       	pop	r28
    3a94:	1f 91       	pop	r17
    3a96:	0f 91       	pop	r16
    3a98:	ff 90       	pop	r15
    3a9a:	ef 90       	pop	r14
    3a9c:	08 95       	ret

00003a9e <I2C_MSTR_get>:
    3a9e:	fc 01       	movw	r30, r24
    3aa0:	80 91 cc 06 	lds	r24, 0x06CC
    3aa4:	81 30       	cpi	r24, 0x01	; 1
    3aa6:	11 f0       	breq	.+4      	; 0x3aac <I2C_MSTR_get+0xe>
    3aa8:	85 e0       	ldi	r24, 0x05	; 5
    3aaa:	08 95       	ret
    3aac:	80 91 cd 06 	lds	r24, 0x06CD
    3ab0:	81 30       	cpi	r24, 0x01	; 1
    3ab2:	11 f0       	breq	.+4      	; 0x3ab8 <I2C_MSTR_get+0x1a>
    3ab4:	8a e0       	ldi	r24, 0x0A	; 10
    3ab6:	08 95       	ret
    3ab8:	61 30       	cpi	r22, 0x01	; 1
    3aba:	11 f4       	brne	.+4      	; 0x3ac0 <I2C_MSTR_get+0x22>
    3abc:	84 ec       	ldi	r24, 0xC4	; 196
    3abe:	01 c0       	rjmp	.+2      	; 0x3ac2 <I2C_MSTR_get+0x24>
    3ac0:	84 e8       	ldi	r24, 0x84	; 132
    3ac2:	80 93 bc 00 	sts	0x00BC, r24
    3ac6:	80 91 bc 00 	lds	r24, 0x00BC
    3aca:	87 ff       	sbrs	r24, 7
    3acc:	fc cf       	rjmp	.-8      	; 0x3ac6 <I2C_MSTR_get+0x28>
    3ace:	61 30       	cpi	r22, 0x01	; 1
    3ad0:	31 f4       	brne	.+12     	; 0x3ade <I2C_MSTR_get+0x40>
    3ad2:	80 91 b9 00 	lds	r24, 0x00B9
    3ad6:	88 7f       	andi	r24, 0xF8	; 248
    3ad8:	80 35       	cpi	r24, 0x50	; 80
    3ada:	59 f4       	brne	.+22     	; 0x3af2 <I2C_MSTR_get+0x54>
    3adc:	05 c0       	rjmp	.+10     	; 0x3ae8 <I2C_MSTR_get+0x4a>
    3ade:	80 91 b9 00 	lds	r24, 0x00B9
    3ae2:	88 7f       	andi	r24, 0xF8	; 248
    3ae4:	88 35       	cpi	r24, 0x58	; 88
    3ae6:	29 f4       	brne	.+10     	; 0x3af2 <I2C_MSTR_get+0x54>
    3ae8:	80 91 bb 00 	lds	r24, 0x00BB
    3aec:	80 83       	st	Z, r24
    3aee:	80 e0       	ldi	r24, 0x00	; 0
    3af0:	08 95       	ret
    3af2:	82 e0       	ldi	r24, 0x02	; 2
    3af4:	08 95       	ret

00003af6 <I2C_MSTR_send>:
    3af6:	98 2f       	mov	r25, r24
    3af8:	80 91 cc 06 	lds	r24, 0x06CC
    3afc:	81 30       	cpi	r24, 0x01	; 1
    3afe:	11 f0       	breq	.+4      	; 0x3b04 <I2C_MSTR_send+0xe>
    3b00:	85 e0       	ldi	r24, 0x05	; 5
    3b02:	08 95       	ret
    3b04:	80 91 cd 06 	lds	r24, 0x06CD
    3b08:	81 30       	cpi	r24, 0x01	; 1
    3b0a:	11 f0       	breq	.+4      	; 0x3b10 <I2C_MSTR_send+0x1a>
    3b0c:	8a e0       	ldi	r24, 0x0A	; 10
    3b0e:	08 95       	ret
    3b10:	90 93 bb 00 	sts	0x00BB, r25
    3b14:	84 e8       	ldi	r24, 0x84	; 132
    3b16:	80 93 bc 00 	sts	0x00BC, r24
    3b1a:	80 91 bc 00 	lds	r24, 0x00BC
    3b1e:	87 ff       	sbrs	r24, 7
    3b20:	fc cf       	rjmp	.-8      	; 0x3b1a <I2C_MSTR_send+0x24>
    3b22:	80 91 b9 00 	lds	r24, 0x00B9
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	88 7f       	andi	r24, 0xF8	; 248
    3b2a:	90 70       	andi	r25, 0x00	; 0
    3b2c:	88 32       	cpi	r24, 0x28	; 40
    3b2e:	91 05       	cpc	r25, r1
    3b30:	21 f0       	breq	.+8      	; 0x3b3a <I2C_MSTR_send+0x44>
    3b32:	c0 97       	sbiw	r24, 0x30	; 48
    3b34:	21 f4       	brne	.+8      	; 0x3b3e <I2C_MSTR_send+0x48>
    3b36:	83 e0       	ldi	r24, 0x03	; 3
    3b38:	08 95       	ret
    3b3a:	80 e0       	ldi	r24, 0x00	; 0
    3b3c:	08 95       	ret
    3b3e:	8c e0       	ldi	r24, 0x0C	; 12
    3b40:	08 95       	ret

00003b42 <I2C_MSTR_start>:
    3b42:	98 2f       	mov	r25, r24
    3b44:	20 91 cc 06 	lds	r18, 0x06CC
    3b48:	21 30       	cpi	r18, 0x01	; 1
    3b4a:	11 f0       	breq	.+4      	; 0x3b50 <I2C_MSTR_start+0xe>
    3b4c:	85 e0       	ldi	r24, 0x05	; 5
    3b4e:	08 95       	ret
    3b50:	80 91 ce 06 	lds	r24, 0x06CE
    3b54:	81 30       	cpi	r24, 0x01	; 1
    3b56:	11 f4       	brne	.+4      	; 0x3b5c <I2C_MSTR_start+0x1a>
    3b58:	89 e0       	ldi	r24, 0x09	; 9
    3b5a:	08 95       	ret
    3b5c:	20 93 cd 06 	sts	0x06CD, r18
    3b60:	84 ea       	ldi	r24, 0xA4	; 164
    3b62:	80 93 bc 00 	sts	0x00BC, r24
    3b66:	80 91 bc 00 	lds	r24, 0x00BC
    3b6a:	87 ff       	sbrs	r24, 7
    3b6c:	fc cf       	rjmp	.-8      	; 0x3b66 <I2C_MSTR_start+0x24>
    3b6e:	80 91 b9 00 	lds	r24, 0x00B9
    3b72:	88 7f       	andi	r24, 0xF8	; 248
    3b74:	88 30       	cpi	r24, 0x08	; 8
    3b76:	39 f0       	breq	.+14     	; 0x3b86 <I2C_MSTR_start+0x44>
    3b78:	80 91 b9 00 	lds	r24, 0x00B9
    3b7c:	88 7f       	andi	r24, 0xF8	; 248
    3b7e:	80 31       	cpi	r24, 0x10	; 16
    3b80:	11 f0       	breq	.+4      	; 0x3b86 <I2C_MSTR_start+0x44>
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	08 95       	ret
    3b86:	61 30       	cpi	r22, 0x01	; 1
    3b88:	19 f4       	brne	.+6      	; 0x3b90 <I2C_MSTR_start+0x4e>
    3b8a:	99 0f       	add	r25, r25
    3b8c:	91 60       	ori	r25, 0x01	; 1
    3b8e:	03 c0       	rjmp	.+6      	; 0x3b96 <I2C_MSTR_start+0x54>
    3b90:	66 23       	and	r22, r22
    3b92:	19 f4       	brne	.+6      	; 0x3b9a <I2C_MSTR_start+0x58>
    3b94:	99 0f       	add	r25, r25
    3b96:	90 93 bb 00 	sts	0x00BB, r25
    3b9a:	84 e8       	ldi	r24, 0x84	; 132
    3b9c:	80 93 bc 00 	sts	0x00BC, r24
    3ba0:	80 91 bc 00 	lds	r24, 0x00BC
    3ba4:	87 ff       	sbrs	r24, 7
    3ba6:	fc cf       	rjmp	.-8      	; 0x3ba0 <I2C_MSTR_start+0x5e>
    3ba8:	61 30       	cpi	r22, 0x01	; 1
    3baa:	31 f4       	brne	.+12     	; 0x3bb8 <I2C_MSTR_start+0x76>
    3bac:	80 91 b9 00 	lds	r24, 0x00B9
    3bb0:	88 7f       	andi	r24, 0xF8	; 248
    3bb2:	80 34       	cpi	r24, 0x40	; 64
    3bb4:	41 f4       	brne	.+16     	; 0x3bc6 <I2C_MSTR_start+0x84>
    3bb6:	09 c0       	rjmp	.+18     	; 0x3bca <I2C_MSTR_start+0x88>
    3bb8:	66 23       	and	r22, r22
    3bba:	39 f4       	brne	.+14     	; 0x3bca <I2C_MSTR_start+0x88>
    3bbc:	80 91 b9 00 	lds	r24, 0x00B9
    3bc0:	88 7f       	andi	r24, 0xF8	; 248
    3bc2:	88 31       	cpi	r24, 0x18	; 24
    3bc4:	11 f0       	breq	.+4      	; 0x3bca <I2C_MSTR_start+0x88>
    3bc6:	82 e0       	ldi	r24, 0x02	; 2
    3bc8:	08 95       	ret
    3bca:	80 e0       	ldi	r24, 0x00	; 0
    3bcc:	08 95       	ret

00003bce <I2C_MSTR_stop>:
    3bce:	80 91 cd 06 	lds	r24, 0x06CD
    3bd2:	81 30       	cpi	r24, 0x01	; 1
    3bd4:	11 f0       	breq	.+4      	; 0x3bda <I2C_MSTR_stop+0xc>
    3bd6:	8a e0       	ldi	r24, 0x0A	; 10
    3bd8:	08 95       	ret
    3bda:	80 91 cf 06 	lds	r24, 0x06CF
    3bde:	81 30       	cpi	r24, 0x01	; 1
    3be0:	29 f4       	brne	.+10     	; 0x3bec <I2C_MSTR_stop+0x1e>
    3be2:	85 e9       	ldi	r24, 0x95	; 149
    3be4:	80 93 bc 00 	sts	0x00BC, r24
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	08 95       	ret
    3bec:	84 e9       	ldi	r24, 0x94	; 148
    3bee:	80 93 bc 00 	sts	0x00BC, r24
    3bf2:	80 e0       	ldi	r24, 0x00	; 0
    3bf4:	08 95       	ret

00003bf6 <I2C_open>:
    3bf6:	82 e1       	ldi	r24, 0x12	; 18
    3bf8:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    3bfc:	88 23       	and	r24, r24
    3bfe:	b1 f4       	brne	.+44     	; 0x3c2c <I2C_open+0x36>
    3c00:	10 92 cc 06 	sts	0x06CC, r1
    3c04:	10 92 cd 06 	sts	0x06CD, r1
    3c08:	10 92 ce 06 	sts	0x06CE, r1
    3c0c:	10 92 cf 06 	sts	0x06CF, r1
    3c10:	10 92 d0 06 	sts	0x06D0, r1
    3c14:	0e 94 5d 24 	call	0x48ba	; 0x48ba <__I2C_init>
    3c18:	87 e1       	ldi	r24, 0x17	; 23
    3c1a:	60 e0       	ldi	r22, 0x00	; 0
    3c1c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <I2C_set_BRG>
    3c20:	0e 94 53 24 	call	0x48a6	; 0x48a6 <I2C_enable>
    3c24:	82 e1       	ldi	r24, 0x12	; 18
    3c26:	61 e0       	ldi	r22, 0x01	; 1
    3c28:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    3c2c:	82 e1       	ldi	r24, 0x12	; 18
    3c2e:	90 e0       	ldi	r25, 0x00	; 0
    3c30:	08 95       	ret

00003c32 <I2C_set_BRG>:
    3c32:	63 70       	andi	r22, 0x03	; 3
    3c34:	60 93 b9 00 	sts	0x00B9, r22
    3c38:	80 93 b8 00 	sts	0x00B8, r24
    3c3c:	81 e0       	ldi	r24, 0x01	; 1
    3c3e:	80 93 cc 06 	sts	0x06CC, r24
    3c42:	08 95       	ret

00003c44 <__ADC_init>:
    3c44:	8f e1       	ldi	r24, 0x1F	; 31
    3c46:	80 93 7c 00 	sts	0x007C, r24
    3c4a:	ea e7       	ldi	r30, 0x7A	; 122
    3c4c:	f0 e0       	ldi	r31, 0x00	; 0
    3c4e:	87 e0       	ldi	r24, 0x07	; 7
    3c50:	80 83       	st	Z, r24
    3c52:	80 81       	ld	r24, Z
    3c54:	80 68       	ori	r24, 0x80	; 128
    3c56:	80 83       	st	Z, r24
    3c58:	08 95       	ret

00003c5a <CBOT_init>:
    3c5a:	0e 94 9e 23 	call	0x473c	; 0x473c <SYS_init>
    3c5e:	0e 94 5f 21 	call	0x42be	; 0x42be <ATMEGA_open>
    3c62:	0e 94 8f 20 	call	0x411e	; 0x411e <ISR_open>
    3c66:	0e 94 2a 24 	call	0x4854	; 0x4854 <TMRSRVC_open>
    3c6a:	0e 94 c4 21 	call	0x4388	; 0x4388 <SPI_open>
    3c6e:	0e 94 a1 1c 	call	0x3942	; 0x3942 <ATTINY_open>
    3c72:	78 94       	sei
    3c74:	08 95       	ret

00003c76 <CBOT_ISR_init>:
    3c76:	00 00       	nop
    3c78:	08 95       	ret

00003c7a <__vector_16>:
    3c7a:	1f 92       	push	r1
    3c7c:	0f 92       	push	r0
    3c7e:	0f b6       	in	r0, 0x3f	; 63
    3c80:	0f 92       	push	r0
    3c82:	11 24       	eor	r1, r1
    3c84:	2f 93       	push	r18
    3c86:	3f 93       	push	r19
    3c88:	4f 93       	push	r20
    3c8a:	5f 93       	push	r21
    3c8c:	6f 93       	push	r22
    3c8e:	7f 93       	push	r23
    3c90:	8f 93       	push	r24
    3c92:	9f 93       	push	r25
    3c94:	af 93       	push	r26
    3c96:	bf 93       	push	r27
    3c98:	ef 93       	push	r30
    3c9a:	ff 93       	push	r31
    3c9c:	e0 91 14 04 	lds	r30, 0x0414
    3ca0:	f0 91 15 04 	lds	r31, 0x0415
    3ca4:	30 97       	sbiw	r30, 0x00	; 0
    3ca6:	09 f0       	breq	.+2      	; 0x3caa <__vector_16+0x30>
    3ca8:	09 95       	icall
    3caa:	ff 91       	pop	r31
    3cac:	ef 91       	pop	r30
    3cae:	bf 91       	pop	r27
    3cb0:	af 91       	pop	r26
    3cb2:	9f 91       	pop	r25
    3cb4:	8f 91       	pop	r24
    3cb6:	7f 91       	pop	r23
    3cb8:	6f 91       	pop	r22
    3cba:	5f 91       	pop	r21
    3cbc:	4f 91       	pop	r20
    3cbe:	3f 91       	pop	r19
    3cc0:	2f 91       	pop	r18
    3cc2:	0f 90       	pop	r0
    3cc4:	0f be       	out	0x3f, r0	; 63
    3cc6:	0f 90       	pop	r0
    3cc8:	1f 90       	pop	r1
    3cca:	18 95       	reti

00003ccc <__vector_17>:
    3ccc:	1f 92       	push	r1
    3cce:	0f 92       	push	r0
    3cd0:	0f b6       	in	r0, 0x3f	; 63
    3cd2:	0f 92       	push	r0
    3cd4:	11 24       	eor	r1, r1
    3cd6:	2f 93       	push	r18
    3cd8:	3f 93       	push	r19
    3cda:	4f 93       	push	r20
    3cdc:	5f 93       	push	r21
    3cde:	6f 93       	push	r22
    3ce0:	7f 93       	push	r23
    3ce2:	8f 93       	push	r24
    3ce4:	9f 93       	push	r25
    3ce6:	af 93       	push	r26
    3ce8:	bf 93       	push	r27
    3cea:	ef 93       	push	r30
    3cec:	ff 93       	push	r31
    3cee:	e0 91 16 04 	lds	r30, 0x0416
    3cf2:	f0 91 17 04 	lds	r31, 0x0417
    3cf6:	30 97       	sbiw	r30, 0x00	; 0
    3cf8:	09 f0       	breq	.+2      	; 0x3cfc <__vector_17+0x30>
    3cfa:	09 95       	icall
    3cfc:	ff 91       	pop	r31
    3cfe:	ef 91       	pop	r30
    3d00:	bf 91       	pop	r27
    3d02:	af 91       	pop	r26
    3d04:	9f 91       	pop	r25
    3d06:	8f 91       	pop	r24
    3d08:	7f 91       	pop	r23
    3d0a:	6f 91       	pop	r22
    3d0c:	5f 91       	pop	r21
    3d0e:	4f 91       	pop	r20
    3d10:	3f 91       	pop	r19
    3d12:	2f 91       	pop	r18
    3d14:	0f 90       	pop	r0
    3d16:	0f be       	out	0x3f, r0	; 63
    3d18:	0f 90       	pop	r0
    3d1a:	1f 90       	pop	r1
    3d1c:	18 95       	reti

00003d1e <__vector_18>:
    3d1e:	1f 92       	push	r1
    3d20:	0f 92       	push	r0
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	0f 92       	push	r0
    3d26:	11 24       	eor	r1, r1
    3d28:	2f 93       	push	r18
    3d2a:	3f 93       	push	r19
    3d2c:	4f 93       	push	r20
    3d2e:	5f 93       	push	r21
    3d30:	6f 93       	push	r22
    3d32:	7f 93       	push	r23
    3d34:	8f 93       	push	r24
    3d36:	9f 93       	push	r25
    3d38:	af 93       	push	r26
    3d3a:	bf 93       	push	r27
    3d3c:	ef 93       	push	r30
    3d3e:	ff 93       	push	r31
    3d40:	e0 91 18 04 	lds	r30, 0x0418
    3d44:	f0 91 19 04 	lds	r31, 0x0419
    3d48:	30 97       	sbiw	r30, 0x00	; 0
    3d4a:	09 f0       	breq	.+2      	; 0x3d4e <__vector_18+0x30>
    3d4c:	09 95       	icall
    3d4e:	ff 91       	pop	r31
    3d50:	ef 91       	pop	r30
    3d52:	bf 91       	pop	r27
    3d54:	af 91       	pop	r26
    3d56:	9f 91       	pop	r25
    3d58:	8f 91       	pop	r24
    3d5a:	7f 91       	pop	r23
    3d5c:	6f 91       	pop	r22
    3d5e:	5f 91       	pop	r21
    3d60:	4f 91       	pop	r20
    3d62:	3f 91       	pop	r19
    3d64:	2f 91       	pop	r18
    3d66:	0f 90       	pop	r0
    3d68:	0f be       	out	0x3f, r0	; 63
    3d6a:	0f 90       	pop	r0
    3d6c:	1f 90       	pop	r1
    3d6e:	18 95       	reti

00003d70 <__vector_9>:
    3d70:	1f 92       	push	r1
    3d72:	0f 92       	push	r0
    3d74:	0f b6       	in	r0, 0x3f	; 63
    3d76:	0f 92       	push	r0
    3d78:	11 24       	eor	r1, r1
    3d7a:	2f 93       	push	r18
    3d7c:	3f 93       	push	r19
    3d7e:	4f 93       	push	r20
    3d80:	5f 93       	push	r21
    3d82:	6f 93       	push	r22
    3d84:	7f 93       	push	r23
    3d86:	8f 93       	push	r24
    3d88:	9f 93       	push	r25
    3d8a:	af 93       	push	r26
    3d8c:	bf 93       	push	r27
    3d8e:	ef 93       	push	r30
    3d90:	ff 93       	push	r31
    3d92:	e0 91 06 04 	lds	r30, 0x0406
    3d96:	f0 91 07 04 	lds	r31, 0x0407
    3d9a:	30 97       	sbiw	r30, 0x00	; 0
    3d9c:	09 f0       	breq	.+2      	; 0x3da0 <__vector_9+0x30>
    3d9e:	09 95       	icall
    3da0:	ff 91       	pop	r31
    3da2:	ef 91       	pop	r30
    3da4:	bf 91       	pop	r27
    3da6:	af 91       	pop	r26
    3da8:	9f 91       	pop	r25
    3daa:	8f 91       	pop	r24
    3dac:	7f 91       	pop	r23
    3dae:	6f 91       	pop	r22
    3db0:	5f 91       	pop	r21
    3db2:	4f 91       	pop	r20
    3db4:	3f 91       	pop	r19
    3db6:	2f 91       	pop	r18
    3db8:	0f 90       	pop	r0
    3dba:	0f be       	out	0x3f, r0	; 63
    3dbc:	0f 90       	pop	r0
    3dbe:	1f 90       	pop	r1
    3dc0:	18 95       	reti

00003dc2 <__vector_10>:
    3dc2:	1f 92       	push	r1
    3dc4:	0f 92       	push	r0
    3dc6:	0f b6       	in	r0, 0x3f	; 63
    3dc8:	0f 92       	push	r0
    3dca:	11 24       	eor	r1, r1
    3dcc:	2f 93       	push	r18
    3dce:	3f 93       	push	r19
    3dd0:	4f 93       	push	r20
    3dd2:	5f 93       	push	r21
    3dd4:	6f 93       	push	r22
    3dd6:	7f 93       	push	r23
    3dd8:	8f 93       	push	r24
    3dda:	9f 93       	push	r25
    3ddc:	af 93       	push	r26
    3dde:	bf 93       	push	r27
    3de0:	ef 93       	push	r30
    3de2:	ff 93       	push	r31
    3de4:	e0 91 08 04 	lds	r30, 0x0408
    3de8:	f0 91 09 04 	lds	r31, 0x0409
    3dec:	30 97       	sbiw	r30, 0x00	; 0
    3dee:	09 f0       	breq	.+2      	; 0x3df2 <__vector_10+0x30>
    3df0:	09 95       	icall
    3df2:	ff 91       	pop	r31
    3df4:	ef 91       	pop	r30
    3df6:	bf 91       	pop	r27
    3df8:	af 91       	pop	r26
    3dfa:	9f 91       	pop	r25
    3dfc:	8f 91       	pop	r24
    3dfe:	7f 91       	pop	r23
    3e00:	6f 91       	pop	r22
    3e02:	5f 91       	pop	r21
    3e04:	4f 91       	pop	r20
    3e06:	3f 91       	pop	r19
    3e08:	2f 91       	pop	r18
    3e0a:	0f 90       	pop	r0
    3e0c:	0f be       	out	0x3f, r0	; 63
    3e0e:	0f 90       	pop	r0
    3e10:	1f 90       	pop	r1
    3e12:	18 95       	reti

00003e14 <__vector_11>:
    3e14:	1f 92       	push	r1
    3e16:	0f 92       	push	r0
    3e18:	0f b6       	in	r0, 0x3f	; 63
    3e1a:	0f 92       	push	r0
    3e1c:	11 24       	eor	r1, r1
    3e1e:	2f 93       	push	r18
    3e20:	3f 93       	push	r19
    3e22:	4f 93       	push	r20
    3e24:	5f 93       	push	r21
    3e26:	6f 93       	push	r22
    3e28:	7f 93       	push	r23
    3e2a:	8f 93       	push	r24
    3e2c:	9f 93       	push	r25
    3e2e:	af 93       	push	r26
    3e30:	bf 93       	push	r27
    3e32:	ef 93       	push	r30
    3e34:	ff 93       	push	r31
    3e36:	e0 91 0a 04 	lds	r30, 0x040A
    3e3a:	f0 91 0b 04 	lds	r31, 0x040B
    3e3e:	30 97       	sbiw	r30, 0x00	; 0
    3e40:	09 f0       	breq	.+2      	; 0x3e44 <__vector_11+0x30>
    3e42:	09 95       	icall
    3e44:	ff 91       	pop	r31
    3e46:	ef 91       	pop	r30
    3e48:	bf 91       	pop	r27
    3e4a:	af 91       	pop	r26
    3e4c:	9f 91       	pop	r25
    3e4e:	8f 91       	pop	r24
    3e50:	7f 91       	pop	r23
    3e52:	6f 91       	pop	r22
    3e54:	5f 91       	pop	r21
    3e56:	4f 91       	pop	r20
    3e58:	3f 91       	pop	r19
    3e5a:	2f 91       	pop	r18
    3e5c:	0f 90       	pop	r0
    3e5e:	0f be       	out	0x3f, r0	; 63
    3e60:	0f 90       	pop	r0
    3e62:	1f 90       	pop	r1
    3e64:	18 95       	reti

00003e66 <__vector_13>:
    3e66:	1f 92       	push	r1
    3e68:	0f 92       	push	r0
    3e6a:	0f b6       	in	r0, 0x3f	; 63
    3e6c:	0f 92       	push	r0
    3e6e:	11 24       	eor	r1, r1
    3e70:	2f 93       	push	r18
    3e72:	3f 93       	push	r19
    3e74:	4f 93       	push	r20
    3e76:	5f 93       	push	r21
    3e78:	6f 93       	push	r22
    3e7a:	7f 93       	push	r23
    3e7c:	8f 93       	push	r24
    3e7e:	9f 93       	push	r25
    3e80:	af 93       	push	r26
    3e82:	bf 93       	push	r27
    3e84:	ef 93       	push	r30
    3e86:	ff 93       	push	r31
    3e88:	e0 91 0e 04 	lds	r30, 0x040E
    3e8c:	f0 91 0f 04 	lds	r31, 0x040F
    3e90:	30 97       	sbiw	r30, 0x00	; 0
    3e92:	09 f0       	breq	.+2      	; 0x3e96 <__vector_13+0x30>
    3e94:	09 95       	icall
    3e96:	ff 91       	pop	r31
    3e98:	ef 91       	pop	r30
    3e9a:	bf 91       	pop	r27
    3e9c:	af 91       	pop	r26
    3e9e:	9f 91       	pop	r25
    3ea0:	8f 91       	pop	r24
    3ea2:	7f 91       	pop	r23
    3ea4:	6f 91       	pop	r22
    3ea6:	5f 91       	pop	r21
    3ea8:	4f 91       	pop	r20
    3eaa:	3f 91       	pop	r19
    3eac:	2f 91       	pop	r18
    3eae:	0f 90       	pop	r0
    3eb0:	0f be       	out	0x3f, r0	; 63
    3eb2:	0f 90       	pop	r0
    3eb4:	1f 90       	pop	r1
    3eb6:	18 95       	reti

00003eb8 <__vector_14>:
    3eb8:	1f 92       	push	r1
    3eba:	0f 92       	push	r0
    3ebc:	0f b6       	in	r0, 0x3f	; 63
    3ebe:	0f 92       	push	r0
    3ec0:	11 24       	eor	r1, r1
    3ec2:	2f 93       	push	r18
    3ec4:	3f 93       	push	r19
    3ec6:	4f 93       	push	r20
    3ec8:	5f 93       	push	r21
    3eca:	6f 93       	push	r22
    3ecc:	7f 93       	push	r23
    3ece:	8f 93       	push	r24
    3ed0:	9f 93       	push	r25
    3ed2:	af 93       	push	r26
    3ed4:	bf 93       	push	r27
    3ed6:	ef 93       	push	r30
    3ed8:	ff 93       	push	r31
    3eda:	e0 91 10 04 	lds	r30, 0x0410
    3ede:	f0 91 11 04 	lds	r31, 0x0411
    3ee2:	30 97       	sbiw	r30, 0x00	; 0
    3ee4:	09 f0       	breq	.+2      	; 0x3ee8 <__vector_14+0x30>
    3ee6:	09 95       	icall
    3ee8:	ff 91       	pop	r31
    3eea:	ef 91       	pop	r30
    3eec:	bf 91       	pop	r27
    3eee:	af 91       	pop	r26
    3ef0:	9f 91       	pop	r25
    3ef2:	8f 91       	pop	r24
    3ef4:	7f 91       	pop	r23
    3ef6:	6f 91       	pop	r22
    3ef8:	5f 91       	pop	r21
    3efa:	4f 91       	pop	r20
    3efc:	3f 91       	pop	r19
    3efe:	2f 91       	pop	r18
    3f00:	0f 90       	pop	r0
    3f02:	0f be       	out	0x3f, r0	; 63
    3f04:	0f 90       	pop	r0
    3f06:	1f 90       	pop	r1
    3f08:	18 95       	reti

00003f0a <__vector_12>:
    3f0a:	1f 92       	push	r1
    3f0c:	0f 92       	push	r0
    3f0e:	0f b6       	in	r0, 0x3f	; 63
    3f10:	0f 92       	push	r0
    3f12:	11 24       	eor	r1, r1
    3f14:	2f 93       	push	r18
    3f16:	3f 93       	push	r19
    3f18:	4f 93       	push	r20
    3f1a:	5f 93       	push	r21
    3f1c:	6f 93       	push	r22
    3f1e:	7f 93       	push	r23
    3f20:	8f 93       	push	r24
    3f22:	9f 93       	push	r25
    3f24:	af 93       	push	r26
    3f26:	bf 93       	push	r27
    3f28:	ef 93       	push	r30
    3f2a:	ff 93       	push	r31
    3f2c:	e0 91 0c 04 	lds	r30, 0x040C
    3f30:	f0 91 0d 04 	lds	r31, 0x040D
    3f34:	30 97       	sbiw	r30, 0x00	; 0
    3f36:	09 f0       	breq	.+2      	; 0x3f3a <__vector_12+0x30>
    3f38:	09 95       	icall
    3f3a:	ff 91       	pop	r31
    3f3c:	ef 91       	pop	r30
    3f3e:	bf 91       	pop	r27
    3f40:	af 91       	pop	r26
    3f42:	9f 91       	pop	r25
    3f44:	8f 91       	pop	r24
    3f46:	7f 91       	pop	r23
    3f48:	6f 91       	pop	r22
    3f4a:	5f 91       	pop	r21
    3f4c:	4f 91       	pop	r20
    3f4e:	3f 91       	pop	r19
    3f50:	2f 91       	pop	r18
    3f52:	0f 90       	pop	r0
    3f54:	0f be       	out	0x3f, r0	; 63
    3f56:	0f 90       	pop	r0
    3f58:	1f 90       	pop	r1
    3f5a:	18 95       	reti

00003f5c <__vector_15>:
    3f5c:	1f 92       	push	r1
    3f5e:	0f 92       	push	r0
    3f60:	0f b6       	in	r0, 0x3f	; 63
    3f62:	0f 92       	push	r0
    3f64:	11 24       	eor	r1, r1
    3f66:	2f 93       	push	r18
    3f68:	3f 93       	push	r19
    3f6a:	4f 93       	push	r20
    3f6c:	5f 93       	push	r21
    3f6e:	6f 93       	push	r22
    3f70:	7f 93       	push	r23
    3f72:	8f 93       	push	r24
    3f74:	9f 93       	push	r25
    3f76:	af 93       	push	r26
    3f78:	bf 93       	push	r27
    3f7a:	ef 93       	push	r30
    3f7c:	ff 93       	push	r31
    3f7e:	e0 91 12 04 	lds	r30, 0x0412
    3f82:	f0 91 13 04 	lds	r31, 0x0413
    3f86:	30 97       	sbiw	r30, 0x00	; 0
    3f88:	09 f0       	breq	.+2      	; 0x3f8c <__vector_15+0x30>
    3f8a:	09 95       	icall
    3f8c:	ff 91       	pop	r31
    3f8e:	ef 91       	pop	r30
    3f90:	bf 91       	pop	r27
    3f92:	af 91       	pop	r26
    3f94:	9f 91       	pop	r25
    3f96:	8f 91       	pop	r24
    3f98:	7f 91       	pop	r23
    3f9a:	6f 91       	pop	r22
    3f9c:	5f 91       	pop	r21
    3f9e:	4f 91       	pop	r20
    3fa0:	3f 91       	pop	r19
    3fa2:	2f 91       	pop	r18
    3fa4:	0f 90       	pop	r0
    3fa6:	0f be       	out	0x3f, r0	; 63
    3fa8:	0f 90       	pop	r0
    3faa:	1f 90       	pop	r1
    3fac:	18 95       	reti

00003fae <__vector_4>:
    3fae:	1f 92       	push	r1
    3fb0:	0f 92       	push	r0
    3fb2:	0f b6       	in	r0, 0x3f	; 63
    3fb4:	0f 92       	push	r0
    3fb6:	11 24       	eor	r1, r1
    3fb8:	2f 93       	push	r18
    3fba:	3f 93       	push	r19
    3fbc:	4f 93       	push	r20
    3fbe:	5f 93       	push	r21
    3fc0:	6f 93       	push	r22
    3fc2:	7f 93       	push	r23
    3fc4:	8f 93       	push	r24
    3fc6:	9f 93       	push	r25
    3fc8:	af 93       	push	r26
    3fca:	bf 93       	push	r27
    3fcc:	ef 93       	push	r30
    3fce:	ff 93       	push	r31
    3fd0:	e0 91 fc 03 	lds	r30, 0x03FC
    3fd4:	f0 91 fd 03 	lds	r31, 0x03FD
    3fd8:	30 97       	sbiw	r30, 0x00	; 0
    3fda:	09 f0       	breq	.+2      	; 0x3fde <__vector_4+0x30>
    3fdc:	09 95       	icall
    3fde:	ff 91       	pop	r31
    3fe0:	ef 91       	pop	r30
    3fe2:	bf 91       	pop	r27
    3fe4:	af 91       	pop	r26
    3fe6:	9f 91       	pop	r25
    3fe8:	8f 91       	pop	r24
    3fea:	7f 91       	pop	r23
    3fec:	6f 91       	pop	r22
    3fee:	5f 91       	pop	r21
    3ff0:	4f 91       	pop	r20
    3ff2:	3f 91       	pop	r19
    3ff4:	2f 91       	pop	r18
    3ff6:	0f 90       	pop	r0
    3ff8:	0f be       	out	0x3f, r0	; 63
    3ffa:	0f 90       	pop	r0
    3ffc:	1f 90       	pop	r1
    3ffe:	18 95       	reti

00004000 <__vector_5>:
    4000:	1f 92       	push	r1
    4002:	0f 92       	push	r0
    4004:	0f b6       	in	r0, 0x3f	; 63
    4006:	0f 92       	push	r0
    4008:	11 24       	eor	r1, r1
    400a:	2f 93       	push	r18
    400c:	3f 93       	push	r19
    400e:	4f 93       	push	r20
    4010:	5f 93       	push	r21
    4012:	6f 93       	push	r22
    4014:	7f 93       	push	r23
    4016:	8f 93       	push	r24
    4018:	9f 93       	push	r25
    401a:	af 93       	push	r26
    401c:	bf 93       	push	r27
    401e:	ef 93       	push	r30
    4020:	ff 93       	push	r31
    4022:	e0 91 fe 03 	lds	r30, 0x03FE
    4026:	f0 91 ff 03 	lds	r31, 0x03FF
    402a:	30 97       	sbiw	r30, 0x00	; 0
    402c:	09 f0       	breq	.+2      	; 0x4030 <__vector_5+0x30>
    402e:	09 95       	icall
    4030:	ff 91       	pop	r31
    4032:	ef 91       	pop	r30
    4034:	bf 91       	pop	r27
    4036:	af 91       	pop	r26
    4038:	9f 91       	pop	r25
    403a:	8f 91       	pop	r24
    403c:	7f 91       	pop	r23
    403e:	6f 91       	pop	r22
    4040:	5f 91       	pop	r21
    4042:	4f 91       	pop	r20
    4044:	3f 91       	pop	r19
    4046:	2f 91       	pop	r18
    4048:	0f 90       	pop	r0
    404a:	0f be       	out	0x3f, r0	; 63
    404c:	0f 90       	pop	r0
    404e:	1f 90       	pop	r1
    4050:	18 95       	reti

00004052 <__vector_6>:
    4052:	1f 92       	push	r1
    4054:	0f 92       	push	r0
    4056:	0f b6       	in	r0, 0x3f	; 63
    4058:	0f 92       	push	r0
    405a:	11 24       	eor	r1, r1
    405c:	2f 93       	push	r18
    405e:	3f 93       	push	r19
    4060:	4f 93       	push	r20
    4062:	5f 93       	push	r21
    4064:	6f 93       	push	r22
    4066:	7f 93       	push	r23
    4068:	8f 93       	push	r24
    406a:	9f 93       	push	r25
    406c:	af 93       	push	r26
    406e:	bf 93       	push	r27
    4070:	ef 93       	push	r30
    4072:	ff 93       	push	r31
    4074:	e0 91 00 04 	lds	r30, 0x0400
    4078:	f0 91 01 04 	lds	r31, 0x0401
    407c:	30 97       	sbiw	r30, 0x00	; 0
    407e:	09 f0       	breq	.+2      	; 0x4082 <__vector_6+0x30>
    4080:	09 95       	icall
    4082:	ff 91       	pop	r31
    4084:	ef 91       	pop	r30
    4086:	bf 91       	pop	r27
    4088:	af 91       	pop	r26
    408a:	9f 91       	pop	r25
    408c:	8f 91       	pop	r24
    408e:	7f 91       	pop	r23
    4090:	6f 91       	pop	r22
    4092:	5f 91       	pop	r21
    4094:	4f 91       	pop	r20
    4096:	3f 91       	pop	r19
    4098:	2f 91       	pop	r18
    409a:	0f 90       	pop	r0
    409c:	0f be       	out	0x3f, r0	; 63
    409e:	0f 90       	pop	r0
    40a0:	1f 90       	pop	r1
    40a2:	18 95       	reti

000040a4 <__vector_7>:
    40a4:	1f 92       	push	r1
    40a6:	0f 92       	push	r0
    40a8:	0f b6       	in	r0, 0x3f	; 63
    40aa:	0f 92       	push	r0
    40ac:	11 24       	eor	r1, r1
    40ae:	2f 93       	push	r18
    40b0:	3f 93       	push	r19
    40b2:	4f 93       	push	r20
    40b4:	5f 93       	push	r21
    40b6:	6f 93       	push	r22
    40b8:	7f 93       	push	r23
    40ba:	8f 93       	push	r24
    40bc:	9f 93       	push	r25
    40be:	af 93       	push	r26
    40c0:	bf 93       	push	r27
    40c2:	ef 93       	push	r30
    40c4:	ff 93       	push	r31
    40c6:	e0 91 02 04 	lds	r30, 0x0402
    40ca:	f0 91 03 04 	lds	r31, 0x0403
    40ce:	30 97       	sbiw	r30, 0x00	; 0
    40d0:	09 f0       	breq	.+2      	; 0x40d4 <__vector_7+0x30>
    40d2:	09 95       	icall
    40d4:	ff 91       	pop	r31
    40d6:	ef 91       	pop	r30
    40d8:	bf 91       	pop	r27
    40da:	af 91       	pop	r26
    40dc:	9f 91       	pop	r25
    40de:	8f 91       	pop	r24
    40e0:	7f 91       	pop	r23
    40e2:	6f 91       	pop	r22
    40e4:	5f 91       	pop	r21
    40e6:	4f 91       	pop	r20
    40e8:	3f 91       	pop	r19
    40ea:	2f 91       	pop	r18
    40ec:	0f 90       	pop	r0
    40ee:	0f be       	out	0x3f, r0	; 63
    40f0:	0f 90       	pop	r0
    40f2:	1f 90       	pop	r1
    40f4:	18 95       	reti

000040f6 <ISR_attach>:
    40f6:	e8 2f       	mov	r30, r24
    40f8:	80 32       	cpi	r24, 0x20	; 32
    40fa:	68 f4       	brcc	.+26     	; 0x4116 <ISR_attach+0x20>
    40fc:	80 51       	subi	r24, 0x10	; 16
    40fe:	83 30       	cpi	r24, 0x03	; 3
    4100:	50 f0       	brcs	.+20     	; 0x4116 <ISR_attach+0x20>
    4102:	f0 e0       	ldi	r31, 0x00	; 0
    4104:	ee 0f       	add	r30, r30
    4106:	ff 1f       	adc	r31, r31
    4108:	ec 50       	subi	r30, 0x0C	; 12
    410a:	fc 4f       	sbci	r31, 0xFC	; 252
    410c:	20 81       	ld	r18, Z
    410e:	31 81       	ldd	r19, Z+1	; 0x01
    4110:	71 83       	std	Z+1, r23	; 0x01
    4112:	60 83       	st	Z, r22
    4114:	02 c0       	rjmp	.+4      	; 0x411a <ISR_attach+0x24>
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	c9 01       	movw	r24, r18
    411c:	08 95       	ret

0000411e <ISR_open>:
    411e:	80 e1       	ldi	r24, 0x10	; 16
    4120:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    4124:	88 23       	and	r24, r24
    4126:	61 f4       	brne	.+24     	; 0x4140 <ISR_open+0x22>
    4128:	e4 ef       	ldi	r30, 0xF4	; 244
    412a:	f3 e0       	ldi	r31, 0x03	; 3
    412c:	11 92       	st	Z+, r1
    412e:	11 92       	st	Z+, r1
    4130:	84 e0       	ldi	r24, 0x04	; 4
    4132:	e4 33       	cpi	r30, 0x34	; 52
    4134:	f8 07       	cpc	r31, r24
    4136:	d1 f7       	brne	.-12     	; 0x412c <ISR_open+0xe>
    4138:	80 e1       	ldi	r24, 0x10	; 16
    413a:	61 e0       	ldi	r22, 0x01	; 1
    413c:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    4140:	80 e1       	ldi	r24, 0x10	; 16
    4142:	91 e0       	ldi	r25, 0x01	; 1
    4144:	08 95       	ret

00004146 <__LCD_init>:
    4146:	23 9a       	sbi	0x04, 3	; 4
    4148:	08 95       	ret

0000414a <__LCD_putchar>:
    414a:	ff 92       	push	r15
    414c:	0f 93       	push	r16
    414e:	1f 93       	push	r17
    4150:	cf 93       	push	r28
    4152:	df 93       	push	r29
    4154:	f8 2e       	mov	r15, r24
    4156:	8a e0       	ldi	r24, 0x0A	; 10
    4158:	f8 16       	cp	r15, r24
    415a:	b1 f0       	breq	.+44     	; 0x4188 <__LCD_putchar+0x3e>
    415c:	8f 15       	cp	r24, r15
    415e:	48 f0       	brcs	.+18     	; 0x4172 <__LCD_putchar+0x28>
    4160:	e8 e0       	ldi	r30, 0x08	; 8
    4162:	fe 16       	cp	r15, r30
    4164:	b9 f1       	breq	.+110    	; 0x41d4 <__LCD_putchar+0x8a>
    4166:	ef 15       	cp	r30, r15
    4168:	38 f1       	brcs	.+78     	; 0x41b8 <__LCD_putchar+0x6e>
    416a:	f7 e0       	ldi	r31, 0x07	; 7
    416c:	ff 16       	cp	r15, r31
    416e:	51 f4       	brne	.+20     	; 0x4184 <__LCD_putchar+0x3a>
    4170:	3b c0       	rjmp	.+118    	; 0x41e8 <__LCD_putchar+0x9e>
    4172:	8d e0       	ldi	r24, 0x0D	; 13
    4174:	f8 16       	cp	r15, r24
    4176:	59 f0       	breq	.+22     	; 0x418e <__LCD_putchar+0x44>
    4178:	eb e1       	ldi	r30, 0x1B	; 27
    417a:	fe 16       	cp	r15, r30
    417c:	89 f0       	breq	.+34     	; 0x41a0 <__LCD_putchar+0x56>
    417e:	fc e0       	ldi	r31, 0x0C	; 12
    4180:	ff 16       	cp	r15, r31
    4182:	41 f0       	breq	.+16     	; 0x4194 <__LCD_putchar+0x4a>
    4184:	01 e0       	ldi	r16, 0x01	; 1
    4186:	41 c0       	rjmp	.+130    	; 0x420a <__LCD_putchar+0xc0>
    4188:	10 92 a5 06 	sts	0x06A5, r1
    418c:	03 c0       	rjmp	.+6      	; 0x4194 <__LCD_putchar+0x4a>
    418e:	10 92 a5 06 	sts	0x06A5, r1
    4192:	3a c0       	rjmp	.+116    	; 0x4208 <__LCD_putchar+0xbe>
    4194:	80 91 a6 06 	lds	r24, 0x06A6
    4198:	81 50       	subi	r24, 0x01	; 1
    419a:	80 93 a6 06 	sts	0x06A6, r24
    419e:	34 c0       	rjmp	.+104    	; 0x4208 <__LCD_putchar+0xbe>
    41a0:	0e 94 30 16 	call	0x2c60	; 0x2c60 <LCD_clear>
    41a4:	14 c0       	rjmp	.+40     	; 0x41ce <__LCD_putchar+0x84>
    41a6:	80 e0       	ldi	r24, 0x00	; 0
    41a8:	61 e0       	ldi	r22, 0x01	; 1
    41aa:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    41ae:	80 91 a5 06 	lds	r24, 0x06A5
    41b2:	8f 5f       	subi	r24, 0xFF	; 255
    41b4:	80 93 a5 06 	sts	0x06A5, r24
    41b8:	80 91 a5 06 	lds	r24, 0x06A5
    41bc:	87 ff       	sbrs	r24, 7
    41be:	f3 cf       	rjmp	.-26     	; 0x41a6 <__LCD_putchar+0x5c>
    41c0:	10 92 a5 06 	sts	0x06A5, r1
    41c4:	80 91 a6 06 	lds	r24, 0x06A6
    41c8:	81 50       	subi	r24, 0x01	; 1
    41ca:	80 93 a6 06 	sts	0x06A6, r24
    41ce:	00 e0       	ldi	r16, 0x00	; 0
    41d0:	11 e0       	ldi	r17, 0x01	; 1
    41d2:	1c c0       	rjmp	.+56     	; 0x420c <__LCD_putchar+0xc2>
    41d4:	80 91 a5 06 	lds	r24, 0x06A5
    41d8:	88 23       	and	r24, r24
    41da:	b1 f0       	breq	.+44     	; 0x4208 <__LCD_putchar+0xbe>
    41dc:	80 91 a5 06 	lds	r24, 0x06A5
    41e0:	86 50       	subi	r24, 0x06	; 6
    41e2:	80 93 a5 06 	sts	0x06A5, r24
    41e6:	10 c0       	rjmp	.+32     	; 0x4208 <__LCD_putchar+0xbe>
    41e8:	81 e0       	ldi	r24, 0x01	; 1
    41ea:	0e 94 3c 18 	call	0x3078	; 0x3078 <SPKR_open>
    41ee:	64 ef       	ldi	r22, 0xF4	; 244
    41f0:	71 e0       	ldi	r23, 0x01	; 1
    41f2:	80 e0       	ldi	r24, 0x00	; 0
    41f4:	90 e0       	ldi	r25, 0x00	; 0
    41f6:	4d e7       	ldi	r20, 0x7D	; 125
    41f8:	50 e0       	ldi	r21, 0x00	; 0
    41fa:	24 e6       	ldi	r18, 0x64	; 100
    41fc:	30 e0       	ldi	r19, 0x00	; 0
    41fe:	0e 94 bf 22 	call	0x457e	; 0x457e <SPKR_play_beep>
    4202:	81 e0       	ldi	r24, 0x01	; 1
    4204:	0e 94 8b 22 	call	0x4516	; 0x4516 <SPKR_close>
    4208:	00 e0       	ldi	r16, 0x00	; 0
    420a:	10 e0       	ldi	r17, 0x00	; 0
    420c:	80 91 a6 06 	lds	r24, 0x06A6
    4210:	60 91 a5 06 	lds	r22, 0x06A5
    4214:	0e 94 f6 16 	call	0x2dec	; 0x2dec <LCD_set_PGC_addr>
    4218:	00 23       	and	r16, r16
    421a:	51 f1       	breq	.+84     	; 0x4270 <__LCD_putchar+0x126>
    421c:	85 e0       	ldi	r24, 0x05	; 5
    421e:	f8 9e       	mul	r15, r24
    4220:	c0 01       	movw	r24, r0
    4222:	11 24       	eor	r1, r1
    4224:	ec 01       	movw	r28, r24
    4226:	c3 55       	subi	r28, 0x53	; 83
    4228:	df 4f       	sbci	r29, 0xFF	; 255
    422a:	8c 01       	movw	r16, r24
    422c:	0e 54       	subi	r16, 0x4E	; 78
    422e:	1f 4f       	sbci	r17, 0xFF	; 255
    4230:	fe 01       	movw	r30, r28
    4232:	84 91       	lpm	r24, Z+
    4234:	61 e0       	ldi	r22, 0x01	; 1
    4236:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    423a:	21 96       	adiw	r28, 0x01	; 1
    423c:	c0 17       	cp	r28, r16
    423e:	d1 07       	cpc	r29, r17
    4240:	b9 f7       	brne	.-18     	; 0x4230 <__LCD_putchar+0xe6>
    4242:	80 e0       	ldi	r24, 0x00	; 0
    4244:	61 e0       	ldi	r22, 0x01	; 1
    4246:	0e 94 0f 17 	call	0x2e1e	; 0x2e1e <LCD_write>
    424a:	80 91 a5 06 	lds	r24, 0x06A5
    424e:	8a 5f       	subi	r24, 0xFA	; 250
    4250:	80 93 a5 06 	sts	0x06A5, r24
    4254:	80 91 a5 06 	lds	r24, 0x06A5
    4258:	90 e0       	ldi	r25, 0x00	; 0
    425a:	8c 37       	cpi	r24, 0x7C	; 124
    425c:	91 05       	cpc	r25, r1
    425e:	3c f0       	brlt	.+14     	; 0x426e <__LCD_putchar+0x124>
    4260:	10 92 a5 06 	sts	0x06A5, r1
    4264:	80 91 a6 06 	lds	r24, 0x06A6
    4268:	81 50       	subi	r24, 0x01	; 1
    426a:	80 93 a6 06 	sts	0x06A6, r24
    426e:	11 e0       	ldi	r17, 0x01	; 1
    4270:	80 91 a6 06 	lds	r24, 0x06A6
    4274:	83 70       	andi	r24, 0x03	; 3
    4276:	80 93 a6 06 	sts	0x06A6, r24
    427a:	11 30       	cpi	r17, 0x01	; 1
    427c:	59 f4       	brne	.+22     	; 0x4294 <__LCD_putchar+0x14a>
    427e:	80 91 a7 06 	lds	r24, 0x06A7
    4282:	81 30       	cpi	r24, 0x01	; 1
    4284:	39 f4       	brne	.+14     	; 0x4294 <__LCD_putchar+0x14a>
    4286:	e0 91 a8 06 	lds	r30, 0x06A8
    428a:	f0 91 a9 06 	lds	r31, 0x06A9
    428e:	30 97       	sbiw	r30, 0x00	; 0
    4290:	09 f0       	breq	.+2      	; 0x4294 <__LCD_putchar+0x14a>
    4292:	09 95       	icall
    4294:	80 e0       	ldi	r24, 0x00	; 0
    4296:	90 e0       	ldi	r25, 0x00	; 0
    4298:	df 91       	pop	r29
    429a:	cf 91       	pop	r28
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	ff 90       	pop	r15
    42a2:	08 95       	ret

000042a4 <__LED_clr_pattern>:
    42a4:	85 fd       	sbrc	r24, 5
    42a6:	5d 98       	cbi	0x0b, 5	; 11
    42a8:	86 fd       	sbrc	r24, 6
    42aa:	5e 98       	cbi	0x0b, 6	; 11
    42ac:	08 95       	ret

000042ae <__LED_init>:
    42ae:	55 9a       	sbi	0x0a, 5	; 10
    42b0:	56 9a       	sbi	0x0a, 6	; 10
    42b2:	08 95       	ret

000042b4 <__LED_set_pattern>:
    42b4:	85 fd       	sbrc	r24, 5
    42b6:	5d 9a       	sbi	0x0b, 5	; 11
    42b8:	86 fd       	sbrc	r24, 6
    42ba:	5e 9a       	sbi	0x0b, 6	; 11
    42bc:	08 95       	ret

000042be <ATMEGA_open>:
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    42c4:	88 23       	and	r24, r24
    42c6:	51 f4       	brne	.+20     	; 0x42dc <ATMEGA_open+0x1e>
    42c8:	f8 94       	cli
    42ca:	0e 94 71 24 	call	0x48e2	; 0x48e2 <__ATMEGA_init>
    42ce:	81 e0       	ldi	r24, 0x01	; 1
    42d0:	0e 94 71 21 	call	0x42e2	; 0x42e2 <ATMEGA_set_clk_mode>
    42d4:	80 e0       	ldi	r24, 0x00	; 0
    42d6:	61 e0       	ldi	r22, 0x01	; 1
    42d8:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    42dc:	80 e0       	ldi	r24, 0x00	; 0
    42de:	91 e0       	ldi	r25, 0x01	; 1
    42e0:	08 95       	ret

000042e2 <ATMEGA_set_clk_mode>:
    42e2:	81 30       	cpi	r24, 0x01	; 1
    42e4:	49 f0       	breq	.+18     	; 0x42f8 <ATMEGA_set_clk_mode+0x16>
    42e6:	f8 94       	cli
    42e8:	81 30       	cpi	r24, 0x01	; 1
    42ea:	20 f1       	brcs	.+72     	; 0x4334 <ATMEGA_set_clk_mode+0x52>
    42ec:	82 30       	cpi	r24, 0x02	; 2
    42ee:	b1 f0       	breq	.+44     	; 0x431c <ATMEGA_set_clk_mode+0x3a>
    42f0:	83 30       	cpi	r24, 0x03	; 3
    42f2:	09 f0       	breq	.+2      	; 0x42f6 <ATMEGA_set_clk_mode+0x14>
    42f4:	45 c0       	rjmp	.+138    	; 0x4380 <ATMEGA_set_clk_mode+0x9e>
    42f6:	17 c0       	rjmp	.+46     	; 0x4326 <ATMEGA_set_clk_mode+0x44>
    42f8:	2c 9a       	sbi	0x05, 4	; 5
    42fa:	80 e8       	ldi	r24, 0x80	; 128
    42fc:	80 93 61 00 	sts	0x0061, r24
    4300:	10 92 61 00 	sts	0x0061, r1
    4304:	80 e0       	ldi	r24, 0x00	; 0
    4306:	90 e0       	ldi	r25, 0x00	; 0
    4308:	00 00       	nop
    430a:	01 96       	adiw	r24, 0x01	; 1
    430c:	88 32       	cpi	r24, 0x28	; 40
    430e:	91 05       	cpc	r25, r1
    4310:	d9 f7       	brne	.-10     	; 0x4308 <ATMEGA_set_clk_mode+0x26>
    4312:	10 92 68 00 	sts	0x0068, r1
    4316:	10 92 6b 00 	sts	0x006B, r1
    431a:	08 95       	ret
    431c:	80 e8       	ldi	r24, 0x80	; 128
    431e:	80 93 61 00 	sts	0x0061, r24
    4322:	83 e0       	ldi	r24, 0x03	; 3
    4324:	04 c0       	rjmp	.+8      	; 0x432e <ATMEGA_set_clk_mode+0x4c>
    4326:	80 e8       	ldi	r24, 0x80	; 128
    4328:	80 93 61 00 	sts	0x0061, r24
    432c:	88 e0       	ldi	r24, 0x08	; 8
    432e:	80 93 61 00 	sts	0x0061, r24
    4332:	28 c0       	rjmp	.+80     	; 0x4384 <ATMEGA_set_clk_mode+0xa2>
    4334:	80 e0       	ldi	r24, 0x00	; 0
    4336:	90 e0       	ldi	r25, 0x00	; 0
    4338:	00 00       	nop
    433a:	01 96       	adiw	r24, 0x01	; 1
    433c:	2d e6       	ldi	r18, 0x6D	; 109
    433e:	80 36       	cpi	r24, 0x60	; 96
    4340:	92 07       	cpc	r25, r18
    4342:	d1 f7       	brne	.-12     	; 0x4338 <ATMEGA_set_clk_mode+0x56>
    4344:	2c 98       	cbi	0x05, 4	; 5
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	90 e0       	ldi	r25, 0x00	; 0
    434a:	00 00       	nop
    434c:	01 96       	adiw	r24, 0x01	; 1
    434e:	2d e6       	ldi	r18, 0x6D	; 109
    4350:	80 36       	cpi	r24, 0x60	; 96
    4352:	92 07       	cpc	r25, r18
    4354:	d1 f7       	brne	.-12     	; 0x434a <ATMEGA_set_clk_mode+0x68>
    4356:	10 92 7a 00 	sts	0x007A, r1
    435a:	8f ef       	ldi	r24, 0xFF	; 255
    435c:	80 93 64 00 	sts	0x0064, r24
    4360:	80 91 68 00 	lds	r24, 0x0068
    4364:	81 60       	ori	r24, 0x01	; 1
    4366:	80 93 68 00 	sts	0x0068, r24
    436a:	80 91 6b 00 	lds	r24, 0x006B
    436e:	84 60       	ori	r24, 0x04	; 4
    4370:	80 93 6b 00 	sts	0x006B, r24
    4374:	78 94       	sei
    4376:	83 b7       	in	r24, 0x33	; 51
    4378:	81 60       	ori	r24, 0x01	; 1
    437a:	83 bf       	out	0x33, r24	; 51
    437c:	88 95       	sleep
    437e:	08 95       	ret
    4380:	82 30       	cpi	r24, 0x02	; 2
    4382:	08 f0       	brcs	.+2      	; 0x4386 <ATMEGA_set_clk_mode+0xa4>
    4384:	78 94       	sei
    4386:	08 95       	ret

00004388 <SPI_open>:
    4388:	0f 93       	push	r16
    438a:	1f 93       	push	r17
    438c:	0e 94 9d 24 	call	0x493a	; 0x493a <__SPI_init>
    4390:	80 e0       	ldi	r24, 0x00	; 0
    4392:	6c e8       	ldi	r22, 0x8C	; 140
    4394:	74 e2       	ldi	r23, 0x24	; 36
    4396:	0e 94 0f 22 	call	0x441e	; 0x441e <SPI_set_config_func>
    439a:	81 e0       	ldi	r24, 0x01	; 1
    439c:	64 e8       	ldi	r22, 0x84	; 132
    439e:	74 e2       	ldi	r23, 0x24	; 36
    43a0:	0e 94 0f 22 	call	0x441e	; 0x441e <SPI_set_config_func>
    43a4:	82 e0       	ldi	r24, 0x02	; 2
    43a6:	6c e7       	ldi	r22, 0x7C	; 124
    43a8:	74 e2       	ldi	r23, 0x24	; 36
    43aa:	0e 94 0f 22 	call	0x441e	; 0x441e <SPI_set_config_func>
    43ae:	86 e0       	ldi	r24, 0x06	; 6
    43b0:	64 e9       	ldi	r22, 0x94	; 148
    43b2:	74 e2       	ldi	r23, 0x24	; 36
    43b4:	0e 94 0f 22 	call	0x441e	; 0x441e <SPI_set_config_func>
    43b8:	04 e7       	ldi	r16, 0x74	; 116
    43ba:	14 e2       	ldi	r17, 0x24	; 36
    43bc:	83 e0       	ldi	r24, 0x03	; 3
    43be:	b8 01       	movw	r22, r16
    43c0:	0e 94 0f 22 	call	0x441e	; 0x441e <SPI_set_config_func>
    43c4:	84 e0       	ldi	r24, 0x04	; 4
    43c6:	b8 01       	movw	r22, r16
    43c8:	0e 94 0f 22 	call	0x441e	; 0x441e <SPI_set_config_func>
    43cc:	85 e0       	ldi	r24, 0x05	; 5
    43ce:	b8 01       	movw	r22, r16
    43d0:	0e 94 0f 22 	call	0x441e	; 0x441e <SPI_set_config_func>
    43d4:	87 e0       	ldi	r24, 0x07	; 7
    43d6:	b8 01       	movw	r22, r16
    43d8:	0e 94 0f 22 	call	0x441e	; 0x441e <SPI_set_config_func>
    43dc:	82 e0       	ldi	r24, 0x02	; 2
    43de:	61 e0       	ldi	r22, 0x01	; 1
    43e0:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    43e4:	8f ef       	ldi	r24, 0xFF	; 255
    43e6:	80 93 aa 06 	sts	0x06AA, r24
    43ea:	87 e0       	ldi	r24, 0x07	; 7
    43ec:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <SPI_set_slave_addr>
    43f0:	82 e0       	ldi	r24, 0x02	; 2
    43f2:	91 e0       	ldi	r25, 0x01	; 1
    43f4:	1f 91       	pop	r17
    43f6:	0f 91       	pop	r16
    43f8:	08 95       	ret

000043fa <SPI_receive>:
    43fa:	1f 93       	push	r17
    43fc:	16 2f       	mov	r17, r22
    43fe:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <SPI_set_slave_addr>
    4402:	82 e0       	ldi	r24, 0x02	; 2
    4404:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    4408:	81 30       	cpi	r24, 0x01	; 1
    440a:	11 f0       	breq	.+4      	; 0x4410 <SPI_receive+0x16>
    440c:	80 e0       	ldi	r24, 0x00	; 0
    440e:	05 c0       	rjmp	.+10     	; 0x441a <SPI_receive+0x20>
    4410:	1e bd       	out	0x2e, r17	; 46
    4412:	0d b4       	in	r0, 0x2d	; 45
    4414:	07 fe       	sbrs	r0, 7
    4416:	fd cf       	rjmp	.-6      	; 0x4412 <SPI_receive+0x18>
    4418:	8e b5       	in	r24, 0x2e	; 46
    441a:	1f 91       	pop	r17
    441c:	08 95       	ret

0000441e <SPI_set_config_func>:
    441e:	e8 2f       	mov	r30, r24
    4420:	f0 e0       	ldi	r31, 0x00	; 0
    4422:	ee 0f       	add	r30, r30
    4424:	ff 1f       	adc	r31, r31
    4426:	ec 5c       	subi	r30, 0xCC	; 204
    4428:	fb 4f       	sbci	r31, 0xFB	; 251
    442a:	71 83       	std	Z+1, r23	; 0x01
    442c:	60 83       	st	Z, r22
    442e:	08 95       	ret

00004430 <__SPKR_TIMER1_COMPA_vect>:
    4430:	0e 94 1b 22 	call	0x4436	; 0x4436 <SPKR_clk>
    4434:	08 95       	ret

00004436 <SPKR_clk>:
    4436:	80 91 46 04 	lds	r24, 0x0446
    443a:	90 91 47 04 	lds	r25, 0x0447
    443e:	a0 91 48 04 	lds	r26, 0x0448
    4442:	b0 91 49 04 	lds	r27, 0x0449
    4446:	20 91 4a 04 	lds	r18, 0x044A
    444a:	30 91 4b 04 	lds	r19, 0x044B
    444e:	40 91 4c 04 	lds	r20, 0x044C
    4452:	50 91 4d 04 	lds	r21, 0x044D
    4456:	28 0f       	add	r18, r24
    4458:	39 1f       	adc	r19, r25
    445a:	4a 1f       	adc	r20, r26
    445c:	5b 1f       	adc	r21, r27
    445e:	20 93 46 04 	sts	0x0446, r18
    4462:	30 93 47 04 	sts	0x0447, r19
    4466:	40 93 48 04 	sts	0x0448, r20
    446a:	50 93 49 04 	sts	0x0449, r21
    446e:	80 91 46 04 	lds	r24, 0x0446
    4472:	90 91 47 04 	lds	r25, 0x0447
    4476:	a0 91 48 04 	lds	r26, 0x0448
    447a:	b0 91 49 04 	lds	r27, 0x0449
    447e:	88 51       	subi	r24, 0x18	; 24
    4480:	96 4f       	sbci	r25, 0xF6	; 246
    4482:	a0 40       	sbci	r26, 0x00	; 0
    4484:	b0 40       	sbci	r27, 0x00	; 0
    4486:	bc f0       	brlt	.+46     	; 0x44b6 <SPKR_clk+0x80>
    4488:	8b b1       	in	r24, 0x0b	; 11
    448a:	80 58       	subi	r24, 0x80	; 128
    448c:	8b b9       	out	0x0b, r24	; 11
    448e:	80 91 46 04 	lds	r24, 0x0446
    4492:	90 91 47 04 	lds	r25, 0x0447
    4496:	a0 91 48 04 	lds	r26, 0x0448
    449a:	b0 91 49 04 	lds	r27, 0x0449
    449e:	88 51       	subi	r24, 0x18	; 24
    44a0:	96 4f       	sbci	r25, 0xF6	; 246
    44a2:	a0 40       	sbci	r26, 0x00	; 0
    44a4:	b0 40       	sbci	r27, 0x00	; 0
    44a6:	80 93 46 04 	sts	0x0446, r24
    44aa:	90 93 47 04 	sts	0x0447, r25
    44ae:	a0 93 48 04 	sts	0x0448, r26
    44b2:	b0 93 49 04 	sts	0x0449, r27
    44b6:	08 95       	ret

000044b8 <__SPKR_close_beep_mode>:
    44b8:	8a e0       	ldi	r24, 0x0A	; 10
    44ba:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    44be:	81 30       	cpi	r24, 0x01	; 1
    44c0:	41 f4       	brne	.+16     	; 0x44d2 <__SPKR_close_beep_mode+0x1a>
    44c2:	0e 94 bb 24 	call	0x4976	; 0x4976 <__SPKR_close>
    44c6:	10 92 45 04 	sts	0x0445, r1
    44ca:	8a e0       	ldi	r24, 0x0A	; 10
    44cc:	60 e0       	ldi	r22, 0x00	; 0
    44ce:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    44d2:	08 95       	ret

000044d4 <__SPKR_close_tone_mode>:
    44d4:	89 e0       	ldi	r24, 0x09	; 9
    44d6:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    44da:	81 30       	cpi	r24, 0x01	; 1
    44dc:	d9 f4       	brne	.+54     	; 0x4514 <__SPKR_close_tone_mode+0x40>
    44de:	80 91 44 04 	lds	r24, 0x0444
    44e2:	88 23       	and	r24, r24
    44e4:	11 f0       	breq	.+4      	; 0x44ea <__SPKR_close_tone_mode+0x16>
    44e6:	0e 94 0c 23 	call	0x4618	; 0x4618 <__SPKR_stop>
    44ea:	82 e0       	ldi	r24, 0x02	; 2
    44ec:	0e 94 bb 24 	call	0x4976	; 0x4976 <__SPKR_close>
    44f0:	80 91 52 04 	lds	r24, 0x0452
    44f4:	90 91 53 04 	lds	r25, 0x0453
    44f8:	00 97       	sbiw	r24, 0x00	; 0
    44fa:	31 f0       	breq	.+12     	; 0x4508 <__SPKR_close_tone_mode+0x34>
    44fc:	0e 94 55 31 	call	0x62aa	; 0x62aa <free>
    4500:	10 92 53 04 	sts	0x0453, r1
    4504:	10 92 52 04 	sts	0x0452, r1
    4508:	10 92 44 04 	sts	0x0444, r1
    450c:	89 e0       	ldi	r24, 0x09	; 9
    450e:	60 e0       	ldi	r22, 0x00	; 0
    4510:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    4514:	08 95       	ret

00004516 <SPKR_close>:
    4516:	81 30       	cpi	r24, 0x01	; 1
    4518:	29 f0       	breq	.+10     	; 0x4524 <SPKR_close+0xe>
    451a:	82 30       	cpi	r24, 0x02	; 2
    451c:	29 f4       	brne	.+10     	; 0x4528 <SPKR_close+0x12>
    451e:	0e 94 6a 22 	call	0x44d4	; 0x44d4 <__SPKR_close_tone_mode>
    4522:	08 95       	ret
    4524:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <__SPKR_close_beep_mode>
    4528:	08 95       	ret

0000452a <__SPKR_init>:
    452a:	98 2f       	mov	r25, r24
    452c:	80 91 44 04 	lds	r24, 0x0444
    4530:	88 23       	and	r24, r24
    4532:	31 f4       	brne	.+12     	; 0x4540 <__SPKR_init+0x16>
    4534:	80 91 45 04 	lds	r24, 0x0445
    4538:	88 23       	and	r24, r24
    453a:	11 f4       	brne	.+4      	; 0x4540 <__SPKR_init+0x16>
    453c:	57 9a       	sbi	0x0a, 7	; 10
    453e:	5f 98       	cbi	0x0b, 7	; 11
    4540:	80 91 44 04 	lds	r24, 0x0444
    4544:	88 23       	and	r24, r24
    4546:	d1 f4       	brne	.+52     	; 0x457c <__SPKR_init+0x52>
    4548:	92 30       	cpi	r25, 0x02	; 2
    454a:	c1 f4       	brne	.+48     	; 0x457c <__SPKR_init+0x52>
    454c:	10 92 80 00 	sts	0x0080, r1
    4550:	10 92 81 00 	sts	0x0081, r1
    4554:	80 91 81 00 	lds	r24, 0x0081
    4558:	88 60       	ori	r24, 0x08	; 8
    455a:	80 93 81 00 	sts	0x0081, r24
    455e:	80 91 81 00 	lds	r24, 0x0081
    4562:	81 60       	ori	r24, 0x01	; 1
    4564:	80 93 81 00 	sts	0x0081, r24
    4568:	10 92 85 00 	sts	0x0085, r1
    456c:	10 92 84 00 	sts	0x0084, r1
    4570:	81 e0       	ldi	r24, 0x01	; 1
    4572:	80 93 89 00 	sts	0x0089, r24
    4576:	80 e9       	ldi	r24, 0x90	; 144
    4578:	80 93 88 00 	sts	0x0088, r24
    457c:	08 95       	ret

0000457e <SPKR_play_beep>:
    457e:	8f 92       	push	r8
    4580:	9f 92       	push	r9
    4582:	af 92       	push	r10
    4584:	bf 92       	push	r11
    4586:	cf 92       	push	r12
    4588:	df 92       	push	r13
    458a:	ef 92       	push	r14
    458c:	ff 92       	push	r15
    458e:	0f 93       	push	r16
    4590:	1f 93       	push	r17
    4592:	cf 93       	push	r28
    4594:	df 93       	push	r29
    4596:	4b 01       	movw	r8, r22
    4598:	5c 01       	movw	r10, r24
    459a:	ea 01       	movw	r28, r20
    459c:	b9 01       	movw	r22, r18
    459e:	21 15       	cp	r18, r1
    45a0:	31 05       	cpc	r19, r1
    45a2:	39 f1       	breq	.+78     	; 0x45f2 <SPKR_play_beep+0x74>
    45a4:	9e 01       	movw	r18, r28
    45a6:	44 27       	eor	r20, r20
    45a8:	37 fd       	sbrc	r19, 7
    45aa:	40 95       	com	r20
    45ac:	54 2f       	mov	r21, r20
    45ae:	65 36       	cpi	r22, 0x65	; 101
    45b0:	71 05       	cpc	r23, r1
    45b2:	10 f0       	brcs	.+4      	; 0x45b8 <SPKR_play_beep+0x3a>
    45b4:	64 e6       	ldi	r22, 0x64	; 100
    45b6:	70 e0       	ldi	r23, 0x00	; 0
    45b8:	80 e0       	ldi	r24, 0x00	; 0
    45ba:	90 e0       	ldi	r25, 0x00	; 0
    45bc:	0e 94 09 30 	call	0x6012	; 0x6012 <__mulsi3>
    45c0:	24 e6       	ldi	r18, 0x64	; 100
    45c2:	30 e0       	ldi	r19, 0x00	; 0
    45c4:	40 e0       	ldi	r20, 0x00	; 0
    45c6:	50 e0       	ldi	r21, 0x00	; 0
    45c8:	0e 94 3b 30 	call	0x6076	; 0x6076 <__udivmodsi4>
    45cc:	79 01       	movw	r14, r18
    45ce:	8a 01       	movw	r16, r20
    45d0:	c5 01       	movw	r24, r10
    45d2:	b4 01       	movw	r22, r8
    45d4:	0e 94 a4 24 	call	0x4948	; 0x4948 <SPKR_beep>
    45d8:	c7 01       	movw	r24, r14
    45da:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
    45de:	60 e0       	ldi	r22, 0x00	; 0
    45e0:	70 e0       	ldi	r23, 0x00	; 0
    45e2:	80 e0       	ldi	r24, 0x00	; 0
    45e4:	90 e0       	ldi	r25, 0x00	; 0
    45e6:	0e 94 a4 24 	call	0x4948	; 0x4948 <SPKR_beep>
    45ea:	ce 01       	movw	r24, r28
    45ec:	8e 19       	sub	r24, r14
    45ee:	9f 09       	sbc	r25, r15
    45f0:	04 c0       	rjmp	.+8      	; 0x45fa <SPKR_play_beep+0x7c>
    45f2:	41 15       	cp	r20, r1
    45f4:	51 05       	cpc	r21, r1
    45f6:	19 f0       	breq	.+6      	; 0x45fe <SPKR_play_beep+0x80>
    45f8:	ca 01       	movw	r24, r20
    45fa:	0e 94 f0 1c 	call	0x39e0	; 0x39e0 <TMRSRVC_delay>
    45fe:	df 91       	pop	r29
    4600:	cf 91       	pop	r28
    4602:	1f 91       	pop	r17
    4604:	0f 91       	pop	r16
    4606:	ff 90       	pop	r15
    4608:	ef 90       	pop	r14
    460a:	df 90       	pop	r13
    460c:	cf 90       	pop	r12
    460e:	bf 90       	pop	r11
    4610:	af 90       	pop	r10
    4612:	9f 90       	pop	r9
    4614:	8f 90       	pop	r8
    4616:	08 95       	ret

00004618 <__SPKR_stop>:
    4618:	ef e6       	ldi	r30, 0x6F	; 111
    461a:	f0 e0       	ldi	r31, 0x00	; 0
    461c:	80 81       	ld	r24, Z
    461e:	8d 7f       	andi	r24, 0xFD	; 253
    4620:	80 83       	st	Z, r24
    4622:	08 95       	ret

00004624 <STEPPER_go>:
    4624:	98 2f       	mov	r25, r24
    4626:	81 e0       	ldi	r24, 0x01	; 1
    4628:	80 93 8f 06 	sts	0x068F, r24
    462c:	91 30       	cpi	r25, 0x01	; 1
    462e:	51 f0       	breq	.+20     	; 0x4644 <STEPPER_go+0x20>
    4630:	91 30       	cpi	r25, 0x01	; 1
    4632:	18 f0       	brcs	.+6      	; 0x463a <STEPPER_go+0x16>
    4634:	92 30       	cpi	r25, 0x02	; 2
    4636:	41 f4       	brne	.+16     	; 0x4648 <STEPPER_go+0x24>
    4638:	03 c0       	rjmp	.+6      	; 0x4640 <STEPPER_go+0x1c>
    463a:	10 92 77 06 	sts	0x0677, r1
    463e:	04 c0       	rjmp	.+8      	; 0x4648 <STEPPER_go+0x24>
    4640:	10 92 77 06 	sts	0x0677, r1
    4644:	10 92 78 06 	sts	0x0678, r1
    4648:	10 92 8f 06 	sts	0x068F, r1
    464c:	08 95       	ret

0000464e <__STEPPER_init>:
    464e:	3a 9a       	sbi	0x07, 2	; 7
    4650:	3b 9a       	sbi	0x07, 3	; 7
    4652:	3c 9a       	sbi	0x07, 4	; 7
    4654:	3d 9a       	sbi	0x07, 5	; 7
    4656:	3e 9a       	sbi	0x07, 6	; 7
    4658:	3f 9a       	sbi	0x07, 7	; 7
    465a:	88 b1       	in	r24, 0x08	; 8
    465c:	83 70       	andi	r24, 0x03	; 3
    465e:	88 b9       	out	0x08, r24	; 8
    4660:	08 95       	ret

00004662 <STEPPER_set_steps>:
    4662:	98 2f       	mov	r25, r24
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	80 93 8f 06 	sts	0x068F, r24
    466a:	91 30       	cpi	r25, 0x01	; 1
    466c:	71 f0       	breq	.+28     	; 0x468a <STEPPER_set_steps+0x28>
    466e:	91 30       	cpi	r25, 0x01	; 1
    4670:	18 f0       	brcs	.+6      	; 0x4678 <STEPPER_set_steps+0x16>
    4672:	92 30       	cpi	r25, 0x02	; 2
    4674:	71 f4       	brne	.+28     	; 0x4692 <STEPPER_set_steps+0x30>
    4676:	05 c0       	rjmp	.+10     	; 0x4682 <STEPPER_set_steps+0x20>
    4678:	70 93 6c 06 	sts	0x066C, r23
    467c:	60 93 6b 06 	sts	0x066B, r22
    4680:	08 c0       	rjmp	.+16     	; 0x4692 <STEPPER_set_steps+0x30>
    4682:	70 93 6c 06 	sts	0x066C, r23
    4686:	60 93 6b 06 	sts	0x066B, r22
    468a:	70 93 6e 06 	sts	0x066E, r23
    468e:	60 93 6d 06 	sts	0x066D, r22
    4692:	10 92 8f 06 	sts	0x068F, r1
    4696:	08 95       	ret

00004698 <STEPPER_set_stop_mode>:
    4698:	98 2f       	mov	r25, r24
    469a:	81 e0       	ldi	r24, 0x01	; 1
    469c:	80 93 8f 06 	sts	0x068F, r24
    46a0:	91 30       	cpi	r25, 0x01	; 1
    46a2:	51 f0       	breq	.+20     	; 0x46b8 <STEPPER_set_stop_mode+0x20>
    46a4:	91 30       	cpi	r25, 0x01	; 1
    46a6:	18 f0       	brcs	.+6      	; 0x46ae <STEPPER_set_stop_mode+0x16>
    46a8:	92 30       	cpi	r25, 0x02	; 2
    46aa:	41 f4       	brne	.+16     	; 0x46bc <STEPPER_set_stop_mode+0x24>
    46ac:	03 c0       	rjmp	.+6      	; 0x46b4 <STEPPER_set_stop_mode+0x1c>
    46ae:	60 93 79 06 	sts	0x0679, r22
    46b2:	04 c0       	rjmp	.+8      	; 0x46bc <STEPPER_set_stop_mode+0x24>
    46b4:	60 93 79 06 	sts	0x0679, r22
    46b8:	60 93 7a 06 	sts	0x067A, r22
    46bc:	10 92 8f 06 	sts	0x068F, r1
    46c0:	08 95       	ret

000046c2 <STEPPER_setup_decels>:
    46c2:	0f 93       	push	r16
    46c4:	1f 93       	push	r17
    46c6:	cf 93       	push	r28
    46c8:	df 93       	push	r29
    46ca:	eb 01       	movw	r28, r22
    46cc:	8a 01       	movw	r16, r20
    46ce:	81 30       	cpi	r24, 0x01	; 1
    46d0:	01 f1       	breq	.+64     	; 0x4712 <STEPPER_setup_decels+0x50>
    46d2:	81 30       	cpi	r24, 0x01	; 1
    46d4:	18 f0       	brcs	.+6      	; 0x46dc <STEPPER_setup_decels+0x1a>
    46d6:	82 30       	cpi	r24, 0x02	; 2
    46d8:	61 f5       	brne	.+88     	; 0x4732 <STEPPER_setup_decels+0x70>
    46da:	0d c0       	rjmp	.+26     	; 0x46f6 <STEPPER_setup_decels+0x34>
    46dc:	80 91 63 06 	lds	r24, 0x0663
    46e0:	90 91 64 06 	lds	r25, 0x0664
    46e4:	89 2b       	or	r24, r25
    46e6:	11 f0       	breq	.+4      	; 0x46ec <STEPPER_setup_decels+0x2a>
    46e8:	80 e0       	ldi	r24, 0x00	; 0
    46ea:	1a c0       	rjmp	.+52     	; 0x4720 <STEPPER_setup_decels+0x5e>
    46ec:	10 92 70 06 	sts	0x0670, r1
    46f0:	10 92 6f 06 	sts	0x066F, r1
    46f4:	1e c0       	rjmp	.+60     	; 0x4732 <STEPPER_setup_decels+0x70>
    46f6:	80 91 63 06 	lds	r24, 0x0663
    46fa:	90 91 64 06 	lds	r25, 0x0664
    46fe:	89 2b       	or	r24, r25
    4700:	21 f0       	breq	.+8      	; 0x470a <STEPPER_setup_decels+0x48>
    4702:	80 e0       	ldi	r24, 0x00	; 0
    4704:	0e 94 d7 24 	call	0x49ae	; 0x49ae <STEPPER_set_decel_step_values>
    4708:	04 c0       	rjmp	.+8      	; 0x4712 <STEPPER_setup_decels+0x50>
    470a:	10 92 70 06 	sts	0x0670, r1
    470e:	10 92 6f 06 	sts	0x066F, r1
    4712:	80 91 65 06 	lds	r24, 0x0665
    4716:	90 91 66 06 	lds	r25, 0x0666
    471a:	89 2b       	or	r24, r25
    471c:	31 f0       	breq	.+12     	; 0x472a <STEPPER_setup_decels+0x68>
    471e:	81 e0       	ldi	r24, 0x01	; 1
    4720:	be 01       	movw	r22, r28
    4722:	a8 01       	movw	r20, r16
    4724:	0e 94 d7 24 	call	0x49ae	; 0x49ae <STEPPER_set_decel_step_values>
    4728:	04 c0       	rjmp	.+8      	; 0x4732 <STEPPER_setup_decels+0x70>
    472a:	10 92 72 06 	sts	0x0672, r1
    472e:	10 92 71 06 	sts	0x0671, r1
    4732:	df 91       	pop	r29
    4734:	cf 91       	pop	r28
    4736:	1f 91       	pop	r17
    4738:	0f 91       	pop	r16
    473a:	08 95       	ret

0000473c <SYS_init>:
    473c:	10 92 92 06 	sts	0x0692, r1
    4740:	10 92 93 06 	sts	0x0693, r1
    4744:	10 92 97 06 	sts	0x0697, r1
    4748:	10 92 94 06 	sts	0x0694, r1
    474c:	10 92 96 06 	sts	0x0696, r1
    4750:	10 92 98 06 	sts	0x0698, r1
    4754:	10 92 99 06 	sts	0x0699, r1
    4758:	10 92 9a 06 	sts	0x069A, r1
    475c:	10 92 9b 06 	sts	0x069B, r1
    4760:	10 92 9c 06 	sts	0x069C, r1
    4764:	10 92 9d 06 	sts	0x069D, r1
    4768:	10 92 9e 06 	sts	0x069E, r1
    476c:	10 92 9f 06 	sts	0x069F, r1
    4770:	10 92 a0 06 	sts	0x06A0, r1
    4774:	10 92 a1 06 	sts	0x06A1, r1
    4778:	10 92 a2 06 	sts	0x06A2, r1
    477c:	10 92 a3 06 	sts	0x06A3, r1
    4780:	08 95       	ret

00004782 <TMRSRVC_insert>:
    4782:	cf 92       	push	r12
    4784:	df 92       	push	r13
    4786:	ef 92       	push	r14
    4788:	ff 92       	push	r15
    478a:	0f 93       	push	r16
    478c:	1f 93       	push	r17
    478e:	cf 93       	push	r28
    4790:	df 93       	push	r29
    4792:	ec 01       	movw	r28, r24
    4794:	80 91 c9 06 	lds	r24, 0x06C9
    4798:	88 23       	and	r24, r24
    479a:	39 f4       	brne	.+14     	; 0x47aa <TMRSRVC_insert+0x28>
    479c:	d0 93 cb 06 	sts	0x06CB, r29
    47a0:	c0 93 ca 06 	sts	0x06CA, r28
    47a4:	0e 94 4f 24 	call	0x489e	; 0x489e <TMRSRVC_start>
    47a8:	47 c0       	rjmp	.+142    	; 0x4838 <TMRSRVC_insert+0xb6>
    47aa:	c0 90 ca 06 	lds	r12, 0x06CA
    47ae:	d0 90 cb 06 	lds	r13, 0x06CB
    47b2:	00 e0       	ldi	r16, 0x00	; 0
    47b4:	10 e0       	ldi	r17, 0x00	; 0
    47b6:	ee 24       	eor	r14, r14
    47b8:	ff 24       	eor	r15, r15
    47ba:	37 c0       	rjmp	.+110    	; 0x482a <TMRSRVC_insert+0xa8>
    47bc:	a8 81       	ld	r26, Y
    47be:	b9 81       	ldd	r27, Y+1	; 0x01
    47c0:	fd 01       	movw	r30, r26
    47c2:	64 81       	ldd	r22, Z+4	; 0x04
    47c4:	75 81       	ldd	r23, Z+5	; 0x05
    47c6:	f6 01       	movw	r30, r12
    47c8:	40 81       	ld	r20, Z
    47ca:	51 81       	ldd	r21, Z+1	; 0x01
    47cc:	fa 01       	movw	r30, r20
    47ce:	84 81       	ldd	r24, Z+4	; 0x04
    47d0:	95 81       	ldd	r25, Z+5	; 0x05
    47d2:	9b 01       	movw	r18, r22
    47d4:	28 1b       	sub	r18, r24
    47d6:	39 0b       	sbc	r19, r25
    47d8:	37 ff       	sbrs	r19, 7
    47da:	0f c0       	rjmp	.+30     	; 0x47fa <TMRSRVC_insert+0x78>
    47dc:	86 1b       	sub	r24, r22
    47de:	97 0b       	sbc	r25, r23
    47e0:	95 83       	std	Z+5, r25	; 0x05
    47e2:	84 83       	std	Z+4, r24	; 0x04
    47e4:	db 82       	std	Y+3, r13	; 0x03
    47e6:	ca 82       	std	Y+2, r12	; 0x02
    47e8:	01 2b       	or	r16, r17
    47ea:	29 f4       	brne	.+10     	; 0x47f6 <TMRSRVC_insert+0x74>
    47ec:	d0 93 cb 06 	sts	0x06CB, r29
    47f0:	c0 93 ca 06 	sts	0x06CA, r28
    47f4:	21 c0       	rjmp	.+66     	; 0x4838 <TMRSRVC_insert+0xb6>
    47f6:	f7 01       	movw	r30, r14
    47f8:	0c c0       	rjmp	.+24     	; 0x4812 <TMRSRVC_insert+0x90>
    47fa:	f6 01       	movw	r30, r12
    47fc:	82 81       	ldd	r24, Z+2	; 0x02
    47fe:	93 81       	ldd	r25, Z+3	; 0x03
    4800:	21 15       	cp	r18, r1
    4802:	31 05       	cpc	r19, r1
    4804:	49 f4       	brne	.+18     	; 0x4818 <TMRSRVC_insert+0x96>
    4806:	fd 01       	movw	r30, r26
    4808:	15 82       	std	Z+5, r1	; 0x05
    480a:	14 82       	std	Z+4, r1	; 0x04
    480c:	9b 83       	std	Y+3, r25	; 0x03
    480e:	8a 83       	std	Y+2, r24	; 0x02
    4810:	f6 01       	movw	r30, r12
    4812:	d3 83       	std	Z+3, r29	; 0x03
    4814:	c2 83       	std	Z+2, r28	; 0x02
    4816:	10 c0       	rjmp	.+32     	; 0x4838 <TMRSRVC_insert+0xb6>
    4818:	fd 01       	movw	r30, r26
    481a:	35 83       	std	Z+5, r19	; 0x05
    481c:	24 83       	std	Z+4, r18	; 0x04
    481e:	00 97       	sbiw	r24, 0x00	; 0
    4820:	b9 f3       	breq	.-18     	; 0x4810 <TMRSRVC_insert+0x8e>
    4822:	0f 5f       	subi	r16, 0xFF	; 255
    4824:	1f 4f       	sbci	r17, 0xFF	; 255
    4826:	76 01       	movw	r14, r12
    4828:	6c 01       	movw	r12, r24
    482a:	80 91 c9 06 	lds	r24, 0x06C9
    482e:	90 e0       	ldi	r25, 0x00	; 0
    4830:	08 17       	cp	r16, r24
    4832:	19 07       	cpc	r17, r25
    4834:	18 f2       	brcs	.-122    	; 0x47bc <TMRSRVC_insert+0x3a>
    4836:	ec cf       	rjmp	.-40     	; 0x4810 <TMRSRVC_insert+0x8e>
    4838:	80 91 c9 06 	lds	r24, 0x06C9
    483c:	8f 5f       	subi	r24, 0xFF	; 255
    483e:	80 93 c9 06 	sts	0x06C9, r24
    4842:	df 91       	pop	r29
    4844:	cf 91       	pop	r28
    4846:	1f 91       	pop	r17
    4848:	0f 91       	pop	r16
    484a:	ff 90       	pop	r15
    484c:	ef 90       	pop	r14
    484e:	df 90       	pop	r13
    4850:	cf 90       	pop	r12
    4852:	08 95       	ret

00004854 <TMRSRVC_open>:
    4854:	88 e0       	ldi	r24, 0x08	; 8
    4856:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    485a:	88 23       	and	r24, r24
    485c:	b9 f4       	brne	.+46     	; 0x488c <TMRSRVC_open+0x38>
    485e:	10 92 c9 06 	sts	0x06C9, r1
    4862:	10 92 cb 06 	sts	0x06CB, r1
    4866:	10 92 ca 06 	sts	0x06CA, r1
    486a:	10 92 54 04 	sts	0x0454, r1
    486e:	10 92 55 04 	sts	0x0455, r1
    4872:	80 e1       	ldi	r24, 0x10	; 16
    4874:	64 e4       	ldi	r22, 0x44	; 68
    4876:	75 e2       	ldi	r23, 0x25	; 37
    4878:	0e 94 60 24 	call	0x48c0	; 0x48c0 <__ISR_attach>
    487c:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__TMRSRVC_init>
    4880:	0e 94 49 24 	call	0x4892	; 0x4892 <__TMRSRVC_start>
    4884:	88 e0       	ldi	r24, 0x08	; 8
    4886:	61 e0       	ldi	r22, 0x01	; 1
    4888:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <SYS_set_state>
    488c:	88 e0       	ldi	r24, 0x08	; 8
    488e:	91 e0       	ldi	r25, 0x01	; 1
    4890:	08 95       	ret

00004892 <__TMRSRVC_start>:
    4892:	ee e6       	ldi	r30, 0x6E	; 110
    4894:	f0 e0       	ldi	r31, 0x00	; 0
    4896:	80 81       	ld	r24, Z
    4898:	82 60       	ori	r24, 0x02	; 2
    489a:	80 83       	st	Z, r24
    489c:	08 95       	ret

0000489e <TMRSRVC_start>:
    489e:	81 e0       	ldi	r24, 0x01	; 1
    48a0:	80 93 55 04 	sts	0x0455, r24
    48a4:	08 95       	ret

000048a6 <I2C_enable>:
    48a6:	80 91 cc 06 	lds	r24, 0x06CC
    48aa:	81 30       	cpi	r24, 0x01	; 1
    48ac:	29 f4       	brne	.+10     	; 0x48b8 <I2C_enable+0x12>
    48ae:	80 91 bc 00 	lds	r24, 0x00BC
    48b2:	84 60       	ori	r24, 0x04	; 4
    48b4:	80 93 bc 00 	sts	0x00BC, r24
    48b8:	08 95       	ret

000048ba <__I2C_init>:
    48ba:	38 98       	cbi	0x07, 0	; 7
    48bc:	39 98       	cbi	0x07, 1	; 7
    48be:	08 95       	ret

000048c0 <__ISR_attach>:
    48c0:	80 32       	cpi	r24, 0x20	; 32
    48c2:	18 f0       	brcs	.+6      	; 0x48ca <__ISR_attach+0xa>
    48c4:	20 e0       	ldi	r18, 0x00	; 0
    48c6:	30 e0       	ldi	r19, 0x00	; 0
    48c8:	0a c0       	rjmp	.+20     	; 0x48de <__ISR_attach+0x1e>
    48ca:	e8 2f       	mov	r30, r24
    48cc:	f0 e0       	ldi	r31, 0x00	; 0
    48ce:	ee 0f       	add	r30, r30
    48d0:	ff 1f       	adc	r31, r31
    48d2:	ec 50       	subi	r30, 0x0C	; 12
    48d4:	fc 4f       	sbci	r31, 0xFC	; 252
    48d6:	20 81       	ld	r18, Z
    48d8:	31 81       	ldd	r19, Z+1	; 0x01
    48da:	71 83       	std	Z+1, r23	; 0x01
    48dc:	60 83       	st	Z, r22
    48de:	c9 01       	movw	r24, r18
    48e0:	08 95       	ret

000048e2 <__ATMEGA_init>:
    48e2:	24 9a       	sbi	0x04, 4	; 4
    48e4:	2c 9a       	sbi	0x05, 4	; 5
    48e6:	08 95       	ret

000048e8 <SPI_default_config>:
    48e8:	83 e5       	ldi	r24, 0x53	; 83
    48ea:	8c bd       	out	0x2c, r24	; 44
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	8d bd       	out	0x2d, r24	; 45
    48f0:	8d e0       	ldi	r24, 0x0D	; 13
    48f2:	8a 95       	dec	r24
    48f4:	f1 f7       	brne	.-4      	; 0x48f2 <SPI_default_config+0xa>
    48f6:	08 95       	ret

000048f8 <SPI_ATtiny0_config>:
    48f8:	83 e5       	ldi	r24, 0x53	; 83
    48fa:	8c bd       	out	0x2c, r24	; 44
    48fc:	1d bc       	out	0x2d, r1	; 45
    48fe:	84 ef       	ldi	r24, 0xF4	; 244
    4900:	91 e0       	ldi	r25, 0x01	; 1
    4902:	01 97       	sbiw	r24, 0x01	; 1
    4904:	f1 f7       	brne	.-4      	; 0x4902 <SPI_ATtiny0_config+0xa>
    4906:	08 95       	ret

00004908 <SPI_PSXC_config>:
    4908:	8f e7       	ldi	r24, 0x7F	; 127
    490a:	8c bd       	out	0x2c, r24	; 44
    490c:	1d bc       	out	0x2d, r1	; 45
    490e:	84 ef       	ldi	r24, 0xF4	; 244
    4910:	91 e0       	ldi	r25, 0x01	; 1
    4912:	01 97       	sbiw	r24, 0x01	; 1
    4914:	f1 f7       	brne	.-4      	; 0x4912 <SPI_PSXC_config+0xa>
    4916:	08 95       	ret

00004918 <SPI_LCD_config>:
    4918:	83 e5       	ldi	r24, 0x53	; 83
    491a:	8c bd       	out	0x2c, r24	; 44
    491c:	81 e0       	ldi	r24, 0x01	; 1
    491e:	8d bd       	out	0x2d, r24	; 45
    4920:	8d e0       	ldi	r24, 0x0D	; 13
    4922:	8a 95       	dec	r24
    4924:	f1 f7       	brne	.-4      	; 0x4922 <SPI_LCD_config+0xa>
    4926:	08 95       	ret

00004928 <SPI_FLASH_config>:
    4928:	83 e5       	ldi	r24, 0x53	; 83
    492a:	8c bd       	out	0x2c, r24	; 44
    492c:	81 e0       	ldi	r24, 0x01	; 1
    492e:	8d bd       	out	0x2d, r24	; 45
    4930:	84 ef       	ldi	r24, 0xF4	; 244
    4932:	91 e0       	ldi	r25, 0x01	; 1
    4934:	01 97       	sbiw	r24, 0x01	; 1
    4936:	f1 f7       	brne	.-4      	; 0x4934 <SPI_FLASH_config+0xc>
    4938:	08 95       	ret

0000493a <__SPI_init>:
    493a:	25 9a       	sbi	0x04, 5	; 4
    493c:	26 98       	cbi	0x04, 6	; 4
    493e:	27 9a       	sbi	0x04, 7	; 4
    4940:	20 9a       	sbi	0x04, 0	; 4
    4942:	21 9a       	sbi	0x04, 1	; 4
    4944:	22 9a       	sbi	0x04, 2	; 4
    4946:	08 95       	ret

00004948 <SPKR_beep>:
    4948:	9b 01       	movw	r18, r22
    494a:	ac 01       	movw	r20, r24
    494c:	80 91 45 04 	lds	r24, 0x0445
    4950:	88 23       	and	r24, r24
    4952:	81 f0       	breq	.+32     	; 0x4974 <SPKR_beep+0x2c>
    4954:	da 01       	movw	r26, r20
    4956:	c9 01       	movw	r24, r18
    4958:	88 0f       	add	r24, r24
    495a:	99 1f       	adc	r25, r25
    495c:	aa 1f       	adc	r26, r26
    495e:	bb 1f       	adc	r27, r27
    4960:	90 93 51 04 	sts	0x0451, r25
    4964:	80 93 50 04 	sts	0x0450, r24
    4968:	21 15       	cp	r18, r1
    496a:	31 05       	cpc	r19, r1
    496c:	41 05       	cpc	r20, r1
    496e:	51 05       	cpc	r21, r1
    4970:	09 f4       	brne	.+2      	; 0x4974 <SPKR_beep+0x2c>
    4972:	5f 98       	cbi	0x0b, 7	; 11
    4974:	08 95       	ret

00004976 <__SPKR_close>:
    4976:	82 30       	cpi	r24, 0x02	; 2
    4978:	29 f4       	brne	.+10     	; 0x4984 <__SPKR_close+0xe>
    497a:	80 91 81 00 	lds	r24, 0x0081
    497e:	8e 7f       	andi	r24, 0xFE	; 254
    4980:	80 93 81 00 	sts	0x0081, r24
    4984:	80 91 44 04 	lds	r24, 0x0444
    4988:	81 30       	cpi	r24, 0x01	; 1
    498a:	31 f4       	brne	.+12     	; 0x4998 <__SPKR_close+0x22>
    498c:	80 91 45 04 	lds	r24, 0x0445
    4990:	81 30       	cpi	r24, 0x01	; 1
    4992:	11 f4       	brne	.+4      	; 0x4998 <__SPKR_close+0x22>
    4994:	00 00       	nop
    4996:	08 95       	ret
    4998:	80 91 44 04 	lds	r24, 0x0444
    499c:	81 30       	cpi	r24, 0x01	; 1
    499e:	21 f0       	breq	.+8      	; 0x49a8 <__SPKR_close+0x32>
    49a0:	80 91 45 04 	lds	r24, 0x0445
    49a4:	81 30       	cpi	r24, 0x01	; 1
    49a6:	11 f4       	brne	.+4      	; 0x49ac <__SPKR_close+0x36>
    49a8:	5f 98       	cbi	0x0b, 7	; 11
    49aa:	57 98       	cbi	0x0a, 7	; 10
    49ac:	08 95       	ret

000049ae <STEPPER_set_decel_step_values>:
    49ae:	ef 92       	push	r14
    49b0:	ff 92       	push	r15
    49b2:	0f 93       	push	r16
    49b4:	1f 93       	push	r17
    49b6:	cf 93       	push	r28
    49b8:	df 93       	push	r29
    49ba:	eb 01       	movw	r28, r22
    49bc:	88 23       	and	r24, r24
    49be:	21 f0       	breq	.+8      	; 0x49c8 <STEPPER_set_decel_step_values+0x1a>
    49c0:	81 30       	cpi	r24, 0x01	; 1
    49c2:	09 f0       	breq	.+2      	; 0x49c6 <STEPPER_set_decel_step_values+0x18>
    49c4:	5a c0       	rjmp	.+180    	; 0x4a7a <STEPPER_set_decel_step_values+0xcc>
    49c6:	2d c0       	rjmp	.+90     	; 0x4a22 <STEPPER_set_decel_step_values+0x74>
    49c8:	9a 01       	movw	r18, r20
    49ca:	40 e0       	ldi	r20, 0x00	; 0
    49cc:	50 e0       	ldi	r21, 0x00	; 0
    49ce:	ca 01       	movw	r24, r20
    49d0:	b9 01       	movw	r22, r18
    49d2:	0e 94 09 30 	call	0x6012	; 0x6012 <__mulsi3>
    49d6:	20 91 63 06 	lds	r18, 0x0663
    49da:	30 91 64 06 	lds	r19, 0x0664
    49de:	22 0f       	add	r18, r18
    49e0:	33 1f       	adc	r19, r19
    49e2:	40 e0       	ldi	r20, 0x00	; 0
    49e4:	50 e0       	ldi	r21, 0x00	; 0
    49e6:	0e 94 3b 30 	call	0x6076	; 0x6076 <__udivmodsi4>
    49ea:	79 01       	movw	r14, r18
    49ec:	8a 01       	movw	r16, r20
    49ee:	a8 01       	movw	r20, r16
    49f0:	97 01       	movw	r18, r14
    49f2:	22 0f       	add	r18, r18
    49f4:	33 1f       	adc	r19, r19
    49f6:	44 1f       	adc	r20, r20
    49f8:	55 1f       	adc	r21, r21
    49fa:	ce 01       	movw	r24, r28
    49fc:	a0 e0       	ldi	r26, 0x00	; 0
    49fe:	b0 e0       	ldi	r27, 0x00	; 0
    4a00:	82 17       	cp	r24, r18
    4a02:	93 07       	cpc	r25, r19
    4a04:	a4 07       	cpc	r26, r20
    4a06:	b5 07       	cpc	r27, r21
    4a08:	28 f0       	brcs	.+10     	; 0x4a14 <STEPPER_set_decel_step_values+0x66>
    4a0a:	f0 92 70 06 	sts	0x0670, r15
    4a0e:	e0 92 6f 06 	sts	0x066F, r14
    4a12:	33 c0       	rjmp	.+102    	; 0x4a7a <STEPPER_set_decel_step_values+0xcc>
    4a14:	d6 95       	lsr	r29
    4a16:	c7 95       	ror	r28
    4a18:	d0 93 70 06 	sts	0x0670, r29
    4a1c:	c0 93 6f 06 	sts	0x066F, r28
    4a20:	2c c0       	rjmp	.+88     	; 0x4a7a <STEPPER_set_decel_step_values+0xcc>
    4a22:	9a 01       	movw	r18, r20
    4a24:	40 e0       	ldi	r20, 0x00	; 0
    4a26:	50 e0       	ldi	r21, 0x00	; 0
    4a28:	ca 01       	movw	r24, r20
    4a2a:	b9 01       	movw	r22, r18
    4a2c:	0e 94 09 30 	call	0x6012	; 0x6012 <__mulsi3>
    4a30:	20 91 65 06 	lds	r18, 0x0665
    4a34:	30 91 66 06 	lds	r19, 0x0666
    4a38:	22 0f       	add	r18, r18
    4a3a:	33 1f       	adc	r19, r19
    4a3c:	40 e0       	ldi	r20, 0x00	; 0
    4a3e:	50 e0       	ldi	r21, 0x00	; 0
    4a40:	0e 94 3b 30 	call	0x6076	; 0x6076 <__udivmodsi4>
    4a44:	79 01       	movw	r14, r18
    4a46:	8a 01       	movw	r16, r20
    4a48:	a8 01       	movw	r20, r16
    4a4a:	97 01       	movw	r18, r14
    4a4c:	22 0f       	add	r18, r18
    4a4e:	33 1f       	adc	r19, r19
    4a50:	44 1f       	adc	r20, r20
    4a52:	55 1f       	adc	r21, r21
    4a54:	ce 01       	movw	r24, r28
    4a56:	a0 e0       	ldi	r26, 0x00	; 0
    4a58:	b0 e0       	ldi	r27, 0x00	; 0
    4a5a:	82 17       	cp	r24, r18
    4a5c:	93 07       	cpc	r25, r19
    4a5e:	a4 07       	cpc	r26, r20
    4a60:	b5 07       	cpc	r27, r21
    4a62:	28 f0       	brcs	.+10     	; 0x4a6e <STEPPER_set_decel_step_values+0xc0>
    4a64:	f0 92 72 06 	sts	0x0672, r15
    4a68:	e0 92 71 06 	sts	0x0671, r14
    4a6c:	06 c0       	rjmp	.+12     	; 0x4a7a <STEPPER_set_decel_step_values+0xcc>
    4a6e:	d6 95       	lsr	r29
    4a70:	c7 95       	ror	r28
    4a72:	d0 93 72 06 	sts	0x0672, r29
    4a76:	c0 93 71 06 	sts	0x0671, r28
    4a7a:	df 91       	pop	r29
    4a7c:	cf 91       	pop	r28
    4a7e:	1f 91       	pop	r17
    4a80:	0f 91       	pop	r16
    4a82:	ff 90       	pop	r15
    4a84:	ef 90       	pop	r14
    4a86:	08 95       	ret

00004a88 <__TIMER0_COMPA_vect>:
    4a88:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <TMRSRVC_tick>
    4a8c:	0e 94 94 25 	call	0x4b28	; 0x4b28 <STEPPER_clk>
    4a90:	0e 94 6d 25 	call	0x4ada	; 0x4ada <SPKR_beep_clk>
    4a94:	08 95       	ret

00004a96 <__TMRSRVC_init>:
    4a96:	84 b5       	in	r24, 0x24	; 36
    4a98:	82 60       	ori	r24, 0x02	; 2
    4a9a:	84 bd       	out	0x24, r24	; 36
    4a9c:	85 b5       	in	r24, 0x25	; 37
    4a9e:	84 60       	ori	r24, 0x04	; 4
    4aa0:	85 bd       	out	0x25, r24	; 37
    4aa2:	8e e4       	ldi	r24, 0x4E	; 78
    4aa4:	87 bd       	out	0x27, r24	; 39
    4aa6:	08 95       	ret

00004aa8 <TMRSRVC_tick>:
    4aa8:	88 e0       	ldi	r24, 0x08	; 8
    4aaa:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    4aae:	88 23       	and	r24, r24
    4ab0:	11 f4       	brne	.+4      	; 0x4ab6 <TMRSRVC_tick+0xe>
    4ab2:	84 e0       	ldi	r24, 0x04	; 4
    4ab4:	08 95       	ret
    4ab6:	80 91 55 04 	lds	r24, 0x0455
    4aba:	88 23       	and	r24, r24
    4abc:	11 f4       	brne	.+4      	; 0x4ac2 <TMRSRVC_tick+0x1a>
    4abe:	83 e0       	ldi	r24, 0x03	; 3
    4ac0:	08 95       	ret
    4ac2:	80 91 54 04 	lds	r24, 0x0454
    4ac6:	88 23       	and	r24, r24
    4ac8:	11 f0       	breq	.+4      	; 0x4ace <TMRSRVC_tick+0x26>
    4aca:	82 e0       	ldi	r24, 0x02	; 2
    4acc:	08 95       	ret
    4ace:	0e 94 e1 27 	call	0x4fc2	; 0x4fc2 <TMRSRVC_process>
    4ad2:	81 30       	cpi	r24, 0x01	; 1
    4ad4:	e1 f3       	breq	.-8      	; 0x4ace <TMRSRVC_tick+0x26>
    4ad6:	80 e0       	ldi	r24, 0x00	; 0
    4ad8:	08 95       	ret

00004ada <SPKR_beep_clk>:
    4ada:	80 91 45 04 	lds	r24, 0x0445
    4ade:	81 30       	cpi	r24, 0x01	; 1
    4ae0:	11 f5       	brne	.+68     	; 0x4b26 <SPKR_beep_clk+0x4c>
    4ae2:	80 91 4e 04 	lds	r24, 0x044E
    4ae6:	90 91 4f 04 	lds	r25, 0x044F
    4aea:	20 91 50 04 	lds	r18, 0x0450
    4aee:	30 91 51 04 	lds	r19, 0x0451
    4af2:	28 0f       	add	r18, r24
    4af4:	39 1f       	adc	r19, r25
    4af6:	30 93 4f 04 	sts	0x044F, r19
    4afa:	20 93 4e 04 	sts	0x044E, r18
    4afe:	80 91 4e 04 	lds	r24, 0x044E
    4b02:	90 91 4f 04 	lds	r25, 0x044F
    4b06:	88 5e       	subi	r24, 0xE8	; 232
    4b08:	93 40       	sbci	r25, 0x03	; 3
    4b0a:	6c f0       	brlt	.+26     	; 0x4b26 <SPKR_beep_clk+0x4c>
    4b0c:	8b b1       	in	r24, 0x0b	; 11
    4b0e:	80 58       	subi	r24, 0x80	; 128
    4b10:	8b b9       	out	0x0b, r24	; 11
    4b12:	80 91 4e 04 	lds	r24, 0x044E
    4b16:	90 91 4f 04 	lds	r25, 0x044F
    4b1a:	88 5e       	subi	r24, 0xE8	; 232
    4b1c:	93 40       	sbci	r25, 0x03	; 3
    4b1e:	90 93 4f 04 	sts	0x044F, r25
    4b22:	80 93 4e 04 	sts	0x044E, r24
    4b26:	08 95       	ret

00004b28 <STEPPER_clk>:
    4b28:	87 e0       	ldi	r24, 0x07	; 7
    4b2a:	0e 94 93 1b 	call	0x3726	; 0x3726 <SYS_get_state>
    4b2e:	81 30       	cpi	r24, 0x01	; 1
    4b30:	09 f0       	breq	.+2      	; 0x4b34 <STEPPER_clk+0xc>
    4b32:	aa c0       	rjmp	.+340    	; 0x4c88 <STEPPER_clk+0x160>
    4b34:	80 91 63 06 	lds	r24, 0x0663
    4b38:	90 91 64 06 	lds	r25, 0x0664
    4b3c:	89 2b       	or	r24, r25
    4b3e:	09 f1       	breq	.+66     	; 0x4b82 <STEPPER_clk+0x5a>
    4b40:	80 91 87 06 	lds	r24, 0x0687
    4b44:	90 91 88 06 	lds	r25, 0x0688
    4b48:	20 91 63 06 	lds	r18, 0x0663
    4b4c:	30 91 64 06 	lds	r19, 0x0664
    4b50:	82 0f       	add	r24, r18
    4b52:	93 1f       	adc	r25, r19
    4b54:	90 93 88 06 	sts	0x0688, r25
    4b58:	80 93 87 06 	sts	0x0687, r24
    4b5c:	80 91 87 06 	lds	r24, 0x0687
    4b60:	90 91 88 06 	lds	r25, 0x0688
    4b64:	88 5e       	subi	r24, 0xE8	; 232
    4b66:	93 40       	sbci	r25, 0x03	; 3
    4b68:	a4 f0       	brlt	.+40     	; 0x4b92 <STEPPER_clk+0x6a>
    4b6a:	80 91 87 06 	lds	r24, 0x0687
    4b6e:	90 91 88 06 	lds	r25, 0x0688
    4b72:	88 5e       	subi	r24, 0xE8	; 232
    4b74:	93 40       	sbci	r25, 0x03	; 3
    4b76:	90 93 88 06 	sts	0x0688, r25
    4b7a:	80 93 87 06 	sts	0x0687, r24
    4b7e:	41 e0       	ldi	r20, 0x01	; 1
    4b80:	09 c0       	rjmp	.+18     	; 0x4b94 <STEPPER_clk+0x6c>
    4b82:	80 91 5b 06 	lds	r24, 0x065B
    4b86:	90 91 5c 06 	lds	r25, 0x065C
    4b8a:	90 93 60 06 	sts	0x0660, r25
    4b8e:	80 93 5f 06 	sts	0x065F, r24
    4b92:	40 e0       	ldi	r20, 0x00	; 0
    4b94:	80 91 65 06 	lds	r24, 0x0665
    4b98:	90 91 66 06 	lds	r25, 0x0666
    4b9c:	89 2b       	or	r24, r25
    4b9e:	09 f1       	breq	.+66     	; 0x4be2 <STEPPER_clk+0xba>
    4ba0:	80 91 89 06 	lds	r24, 0x0689
    4ba4:	90 91 8a 06 	lds	r25, 0x068A
    4ba8:	20 91 65 06 	lds	r18, 0x0665
    4bac:	30 91 66 06 	lds	r19, 0x0666
    4bb0:	82 0f       	add	r24, r18
    4bb2:	93 1f       	adc	r25, r19
    4bb4:	90 93 8a 06 	sts	0x068A, r25
    4bb8:	80 93 89 06 	sts	0x0689, r24
    4bbc:	80 91 89 06 	lds	r24, 0x0689
    4bc0:	90 91 8a 06 	lds	r25, 0x068A
    4bc4:	88 5e       	subi	r24, 0xE8	; 232
    4bc6:	93 40       	sbci	r25, 0x03	; 3
    4bc8:	a4 f0       	brlt	.+40     	; 0x4bf2 <STEPPER_clk+0xca>
    4bca:	80 91 89 06 	lds	r24, 0x0689
    4bce:	90 91 8a 06 	lds	r25, 0x068A
    4bd2:	88 5e       	subi	r24, 0xE8	; 232
    4bd4:	93 40       	sbci	r25, 0x03	; 3
    4bd6:	90 93 8a 06 	sts	0x068A, r25
    4bda:	80 93 89 06 	sts	0x0689, r24
    4bde:	61 e0       	ldi	r22, 0x01	; 1
    4be0:	09 c0       	rjmp	.+18     	; 0x4bf4 <STEPPER_clk+0xcc>
    4be2:	80 91 5d 06 	lds	r24, 0x065D
    4be6:	90 91 5e 06 	lds	r25, 0x065E
    4bea:	90 93 62 06 	sts	0x0662, r25
    4bee:	80 93 61 06 	sts	0x0661, r24
    4bf2:	60 e0       	ldi	r22, 0x00	; 0
    4bf4:	84 2f       	mov	r24, r20
    4bf6:	0e 94 45 26 	call	0x4c8a	; 0x4c8a <STEPPER_process_accel>
    4bfa:	80 91 83 06 	lds	r24, 0x0683
    4bfe:	90 91 84 06 	lds	r25, 0x0684
    4c02:	20 91 5f 06 	lds	r18, 0x065F
    4c06:	30 91 60 06 	lds	r19, 0x0660
    4c0a:	28 0f       	add	r18, r24
    4c0c:	39 1f       	adc	r19, r25
    4c0e:	30 93 84 06 	sts	0x0684, r19
    4c12:	20 93 83 06 	sts	0x0683, r18
    4c16:	80 91 83 06 	lds	r24, 0x0683
    4c1a:	90 91 84 06 	lds	r25, 0x0684
    4c1e:	88 5e       	subi	r24, 0xE8	; 232
    4c20:	93 40       	sbci	r25, 0x03	; 3
    4c22:	14 f4       	brge	.+4      	; 0x4c28 <STEPPER_clk+0x100>
    4c24:	40 e0       	ldi	r20, 0x00	; 0
    4c26:	0b c0       	rjmp	.+22     	; 0x4c3e <STEPPER_clk+0x116>
    4c28:	80 91 83 06 	lds	r24, 0x0683
    4c2c:	90 91 84 06 	lds	r25, 0x0684
    4c30:	88 5e       	subi	r24, 0xE8	; 232
    4c32:	93 40       	sbci	r25, 0x03	; 3
    4c34:	90 93 84 06 	sts	0x0684, r25
    4c38:	80 93 83 06 	sts	0x0683, r24
    4c3c:	41 e0       	ldi	r20, 0x01	; 1
    4c3e:	80 91 85 06 	lds	r24, 0x0685
    4c42:	90 91 86 06 	lds	r25, 0x0686
    4c46:	20 91 61 06 	lds	r18, 0x0661
    4c4a:	30 91 62 06 	lds	r19, 0x0662
    4c4e:	28 0f       	add	r18, r24
    4c50:	39 1f       	adc	r19, r25
    4c52:	30 93 86 06 	sts	0x0686, r19
    4c56:	20 93 85 06 	sts	0x0685, r18
    4c5a:	80 91 85 06 	lds	r24, 0x0685
    4c5e:	90 91 86 06 	lds	r25, 0x0686
    4c62:	88 5e       	subi	r24, 0xE8	; 232
    4c64:	93 40       	sbci	r25, 0x03	; 3
    4c66:	14 f4       	brge	.+4      	; 0x4c6c <STEPPER_clk+0x144>
    4c68:	60 e0       	ldi	r22, 0x00	; 0
    4c6a:	0b c0       	rjmp	.+22     	; 0x4c82 <STEPPER_clk+0x15a>
    4c6c:	80 91 85 06 	lds	r24, 0x0685
    4c70:	90 91 86 06 	lds	r25, 0x0686
    4c74:	88 5e       	subi	r24, 0xE8	; 232
    4c76:	93 40       	sbci	r25, 0x03	; 3
    4c78:	90 93 86 06 	sts	0x0686, r25
    4c7c:	80 93 85 06 	sts	0x0685, r24
    4c80:	61 e0       	ldi	r22, 0x01	; 1
    4c82:	84 2f       	mov	r24, r20
    4c84:	0e 94 8a 26 	call	0x4d14	; 0x4d14 <STEPPER_process_run_mode>
    4c88:	08 95       	ret

00004c8a <STEPPER_process_accel>:
    4c8a:	88 23       	and	r24, r24
    4c8c:	f1 f0       	breq	.+60     	; 0x4cca <STEPPER_process_accel+0x40>
    4c8e:	20 91 5b 06 	lds	r18, 0x065B
    4c92:	30 91 5c 06 	lds	r19, 0x065C
    4c96:	80 91 5f 06 	lds	r24, 0x065F
    4c9a:	90 91 60 06 	lds	r25, 0x0660
    4c9e:	28 1b       	sub	r18, r24
    4ca0:	39 0b       	sbc	r19, r25
    4ca2:	12 16       	cp	r1, r18
    4ca4:	13 06       	cpc	r1, r19
    4ca6:	34 f4       	brge	.+12     	; 0x4cb4 <STEPPER_process_accel+0x2a>
    4ca8:	80 91 5f 06 	lds	r24, 0x065F
    4cac:	90 91 60 06 	lds	r25, 0x0660
    4cb0:	01 96       	adiw	r24, 0x01	; 1
    4cb2:	07 c0       	rjmp	.+14     	; 0x4cc2 <STEPPER_process_accel+0x38>
    4cb4:	23 2b       	or	r18, r19
    4cb6:	49 f0       	breq	.+18     	; 0x4cca <STEPPER_process_accel+0x40>
    4cb8:	80 91 5f 06 	lds	r24, 0x065F
    4cbc:	90 91 60 06 	lds	r25, 0x0660
    4cc0:	01 97       	sbiw	r24, 0x01	; 1
    4cc2:	90 93 60 06 	sts	0x0660, r25
    4cc6:	80 93 5f 06 	sts	0x065F, r24
    4cca:	66 23       	and	r22, r22
    4ccc:	11 f1       	breq	.+68     	; 0x4d12 <STEPPER_process_accel+0x88>
    4cce:	20 91 5d 06 	lds	r18, 0x065D
    4cd2:	30 91 5e 06 	lds	r19, 0x065E
    4cd6:	80 91 61 06 	lds	r24, 0x0661
    4cda:	90 91 62 06 	lds	r25, 0x0662
    4cde:	28 1b       	sub	r18, r24
    4ce0:	39 0b       	sbc	r19, r25
    4ce2:	12 16       	cp	r1, r18
    4ce4:	13 06       	cpc	r1, r19
    4ce6:	54 f4       	brge	.+20     	; 0x4cfc <STEPPER_process_accel+0x72>
    4ce8:	80 91 61 06 	lds	r24, 0x0661
    4cec:	90 91 62 06 	lds	r25, 0x0662
    4cf0:	01 96       	adiw	r24, 0x01	; 1
    4cf2:	90 93 62 06 	sts	0x0662, r25
    4cf6:	80 93 61 06 	sts	0x0661, r24
    4cfa:	08 95       	ret
    4cfc:	23 2b       	or	r18, r19
    4cfe:	49 f0       	breq	.+18     	; 0x4d12 <STEPPER_process_accel+0x88>
    4d00:	80 91 61 06 	lds	r24, 0x0661
    4d04:	90 91 62 06 	lds	r25, 0x0662
    4d08:	01 97       	sbiw	r24, 0x01	; 1
    4d0a:	90 93 62 06 	sts	0x0662, r25
    4d0e:	80 93 61 06 	sts	0x0661, r24
    4d12:	08 95       	ret

00004d14 <STEPPER_process_run_mode>:
    4d14:	0f 93       	push	r16
    4d16:	1f 93       	push	r17
    4d18:	18 2f       	mov	r17, r24
    4d1a:	06 2f       	mov	r16, r22
    4d1c:	80 91 8f 06 	lds	r24, 0x068F
    4d20:	88 23       	and	r24, r24
    4d22:	09 f0       	breq	.+2      	; 0x4d26 <STEPPER_process_run_mode+0x12>
    4d24:	e7 c0       	rjmp	.+462    	; 0x4ef4 <STEPPER_process_run_mode+0x1e0>
    4d26:	80 91 77 06 	lds	r24, 0x0677
    4d2a:	88 23       	and	r24, r24
    4d2c:	09 f0       	breq	.+2      	; 0x4d30 <STEPPER_process_run_mode+0x1c>
    4d2e:	5a c0       	rjmp	.+180    	; 0x4de4 <STEPPER_process_run_mode+0xd0>
    4d30:	80 91 5f 06 	lds	r24, 0x065F
    4d34:	90 91 60 06 	lds	r25, 0x0660
    4d38:	89 2b       	or	r24, r25
    4d3a:	e9 f4       	brne	.+58     	; 0x4d76 <STEPPER_process_run_mode+0x62>
    4d3c:	80 91 56 04 	lds	r24, 0x0456
    4d40:	83 7e       	andi	r24, 0xE3	; 227
    4d42:	80 93 56 04 	sts	0x0456, r24
    4d46:	10 92 80 06 	sts	0x0680, r1
    4d4a:	80 91 8b 06 	lds	r24, 0x068B
    4d4e:	88 23       	and	r24, r24
    4d50:	09 f4       	brne	.+2      	; 0x4d54 <STEPPER_process_run_mode+0x40>
    4d52:	5d c0       	rjmp	.+186    	; 0x4e0e <STEPPER_process_run_mode+0xfa>
    4d54:	60 91 79 06 	lds	r22, 0x0679
    4d58:	80 e0       	ldi	r24, 0x00	; 0
    4d5a:	0e 94 20 1b 	call	0x3640	; 0x3640 <STEPPER_stop>
    4d5e:	e0 91 8d 06 	lds	r30, 0x068D
    4d62:	f0 91 8e 06 	lds	r31, 0x068E
    4d66:	30 97       	sbiw	r30, 0x00	; 0
    4d68:	09 f4       	brne	.+2      	; 0x4d6c <STEPPER_process_run_mode+0x58>
    4d6a:	51 c0       	rjmp	.+162    	; 0x4e0e <STEPPER_process_run_mode+0xfa>
    4d6c:	81 e0       	ldi	r24, 0x01	; 1
    4d6e:	80 83       	st	Z, r24
    4d70:	10 92 8b 06 	sts	0x068B, r1
    4d74:	4c c0       	rjmp	.+152    	; 0x4e0e <STEPPER_process_run_mode+0xfa>
    4d76:	80 91 59 06 	lds	r24, 0x0659
    4d7a:	81 30       	cpi	r24, 0x01	; 1
    4d7c:	41 f4       	brne	.+16     	; 0x4d8e <STEPPER_process_run_mode+0x7a>
    4d7e:	80 91 6b 06 	lds	r24, 0x066B
    4d82:	90 91 6c 06 	lds	r25, 0x066C
    4d86:	01 97       	sbiw	r24, 0x01	; 1
    4d88:	11 f4       	brne	.+4      	; 0x4d8e <STEPPER_process_run_mode+0x7a>
    4d8a:	11 e0       	ldi	r17, 0x01	; 1
    4d8c:	02 c0       	rjmp	.+4      	; 0x4d92 <STEPPER_process_run_mode+0x7e>
    4d8e:	11 23       	and	r17, r17
    4d90:	f1 f1       	breq	.+124    	; 0x4e0e <STEPPER_process_run_mode+0xfa>
    4d92:	e0 91 7e 06 	lds	r30, 0x067E
    4d96:	f0 e0       	ldi	r31, 0x00	; 0
    4d98:	e2 5a       	subi	r30, 0xA2	; 162
    4d9a:	fc 4f       	sbci	r31, 0xFC	; 252
    4d9c:	90 91 56 04 	lds	r25, 0x0456
    4da0:	93 7e       	andi	r25, 0xE3	; 227
    4da2:	80 81       	ld	r24, Z
    4da4:	89 2b       	or	r24, r25
    4da6:	80 93 56 04 	sts	0x0456, r24
    4daa:	80 91 7c 06 	lds	r24, 0x067C
    4dae:	88 23       	and	r24, r24
    4db0:	21 f4       	brne	.+8      	; 0x4dba <STEPPER_process_run_mode+0xa6>
    4db2:	80 91 7e 06 	lds	r24, 0x067E
    4db6:	8f 5f       	subi	r24, 0xFF	; 255
    4db8:	03 c0       	rjmp	.+6      	; 0x4dc0 <STEPPER_process_run_mode+0xac>
    4dba:	80 91 7e 06 	lds	r24, 0x067E
    4dbe:	81 50       	subi	r24, 0x01	; 1
    4dc0:	80 93 7e 06 	sts	0x067E, r24
    4dc4:	80 91 7e 06 	lds	r24, 0x067E
    4dc8:	83 70       	andi	r24, 0x03	; 3
    4dca:	80 93 7e 06 	sts	0x067E, r24
    4dce:	81 e0       	ldi	r24, 0x01	; 1
    4dd0:	80 93 80 06 	sts	0x0680, r24
    4dd4:	80 91 59 06 	lds	r24, 0x0659
    4dd8:	81 30       	cpi	r24, 0x01	; 1
    4dda:	c9 f4       	brne	.+50     	; 0x4e0e <STEPPER_process_run_mode+0xfa>
    4ddc:	80 e0       	ldi	r24, 0x00	; 0
    4dde:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <STEPPER_process_step_mode>
    4de2:	15 c0       	rjmp	.+42     	; 0x4e0e <STEPPER_process_run_mode+0xfa>
    4de4:	90 91 56 04 	lds	r25, 0x0456
    4de8:	93 7e       	andi	r25, 0xE3	; 227
    4dea:	90 93 56 04 	sts	0x0456, r25
    4dee:	e0 91 7e 06 	lds	r30, 0x067E
    4df2:	f0 e0       	ldi	r31, 0x00	; 0
    4df4:	e2 5a       	subi	r30, 0xA2	; 162
    4df6:	fc 4f       	sbci	r31, 0xFC	; 252
    4df8:	80 81       	ld	r24, Z
    4dfa:	89 2b       	or	r24, r25
    4dfc:	80 93 56 04 	sts	0x0456, r24
    4e00:	82 e0       	ldi	r24, 0x02	; 2
    4e02:	80 93 80 06 	sts	0x0680, r24
    4e06:	10 92 60 06 	sts	0x0660, r1
    4e0a:	10 92 5f 06 	sts	0x065F, r1
    4e0e:	80 91 78 06 	lds	r24, 0x0678
    4e12:	88 23       	and	r24, r24
    4e14:	09 f0       	breq	.+2      	; 0x4e18 <STEPPER_process_run_mode+0x104>
    4e16:	59 c0       	rjmp	.+178    	; 0x4eca <STEPPER_process_run_mode+0x1b6>
    4e18:	80 91 61 06 	lds	r24, 0x0661
    4e1c:	90 91 62 06 	lds	r25, 0x0662
    4e20:	89 2b       	or	r24, r25
    4e22:	e9 f4       	brne	.+58     	; 0x4e5e <STEPPER_process_run_mode+0x14a>
    4e24:	80 91 56 04 	lds	r24, 0x0456
    4e28:	8f 71       	andi	r24, 0x1F	; 31
    4e2a:	80 93 56 04 	sts	0x0456, r24
    4e2e:	10 92 81 06 	sts	0x0681, r1
    4e32:	80 91 8c 06 	lds	r24, 0x068C
    4e36:	88 23       	and	r24, r24
    4e38:	09 f4       	brne	.+2      	; 0x4e3c <STEPPER_process_run_mode+0x128>
    4e3a:	5c c0       	rjmp	.+184    	; 0x4ef4 <STEPPER_process_run_mode+0x1e0>
    4e3c:	60 91 7a 06 	lds	r22, 0x067A
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	0e 94 20 1b 	call	0x3640	; 0x3640 <STEPPER_stop>
    4e46:	e0 91 8d 06 	lds	r30, 0x068D
    4e4a:	f0 91 8e 06 	lds	r31, 0x068E
    4e4e:	30 97       	sbiw	r30, 0x00	; 0
    4e50:	09 f4       	brne	.+2      	; 0x4e54 <STEPPER_process_run_mode+0x140>
    4e52:	50 c0       	rjmp	.+160    	; 0x4ef4 <STEPPER_process_run_mode+0x1e0>
    4e54:	81 e0       	ldi	r24, 0x01	; 1
    4e56:	81 83       	std	Z+1, r24	; 0x01
    4e58:	10 92 8c 06 	sts	0x068C, r1
    4e5c:	4b c0       	rjmp	.+150    	; 0x4ef4 <STEPPER_process_run_mode+0x1e0>
    4e5e:	80 91 5a 06 	lds	r24, 0x065A
    4e62:	81 30       	cpi	r24, 0x01	; 1
    4e64:	41 f4       	brne	.+16     	; 0x4e76 <STEPPER_process_run_mode+0x162>
    4e66:	80 91 6d 06 	lds	r24, 0x066D
    4e6a:	90 91 6e 06 	lds	r25, 0x066E
    4e6e:	01 97       	sbiw	r24, 0x01	; 1
    4e70:	11 f4       	brne	.+4      	; 0x4e76 <STEPPER_process_run_mode+0x162>
    4e72:	01 e0       	ldi	r16, 0x01	; 1
    4e74:	02 c0       	rjmp	.+4      	; 0x4e7a <STEPPER_process_run_mode+0x166>
    4e76:	00 23       	and	r16, r16
    4e78:	e9 f1       	breq	.+122    	; 0x4ef4 <STEPPER_process_run_mode+0x1e0>
    4e7a:	e0 91 7f 06 	lds	r30, 0x067F
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	ee 59       	subi	r30, 0x9E	; 158
    4e82:	fc 4f       	sbci	r31, 0xFC	; 252
    4e84:	90 91 56 04 	lds	r25, 0x0456
    4e88:	9f 71       	andi	r25, 0x1F	; 31
    4e8a:	80 81       	ld	r24, Z
    4e8c:	89 2b       	or	r24, r25
    4e8e:	80 93 56 04 	sts	0x0456, r24
    4e92:	80 91 7d 06 	lds	r24, 0x067D
    4e96:	88 23       	and	r24, r24
    4e98:	21 f4       	brne	.+8      	; 0x4ea2 <STEPPER_process_run_mode+0x18e>
    4e9a:	80 91 7f 06 	lds	r24, 0x067F
    4e9e:	8f 5f       	subi	r24, 0xFF	; 255
    4ea0:	03 c0       	rjmp	.+6      	; 0x4ea8 <STEPPER_process_run_mode+0x194>
    4ea2:	80 91 7f 06 	lds	r24, 0x067F
    4ea6:	81 50       	subi	r24, 0x01	; 1
    4ea8:	80 93 7f 06 	sts	0x067F, r24
    4eac:	80 91 7f 06 	lds	r24, 0x067F
    4eb0:	83 70       	andi	r24, 0x03	; 3
    4eb2:	80 93 7f 06 	sts	0x067F, r24
    4eb6:	81 e0       	ldi	r24, 0x01	; 1
    4eb8:	80 93 81 06 	sts	0x0681, r24
    4ebc:	80 91 5a 06 	lds	r24, 0x065A
    4ec0:	81 30       	cpi	r24, 0x01	; 1
    4ec2:	c1 f4       	brne	.+48     	; 0x4ef4 <STEPPER_process_run_mode+0x1e0>
    4ec4:	0e 94 8d 27 	call	0x4f1a	; 0x4f1a <STEPPER_process_step_mode>
    4ec8:	15 c0       	rjmp	.+42     	; 0x4ef4 <STEPPER_process_run_mode+0x1e0>
    4eca:	90 91 56 04 	lds	r25, 0x0456
    4ece:	9f 71       	andi	r25, 0x1F	; 31
    4ed0:	90 93 56 04 	sts	0x0456, r25
    4ed4:	e0 91 7f 06 	lds	r30, 0x067F
    4ed8:	f0 e0       	ldi	r31, 0x00	; 0
    4eda:	ee 59       	subi	r30, 0x9E	; 158
    4edc:	fc 4f       	sbci	r31, 0xFC	; 252
    4ede:	80 81       	ld	r24, Z
    4ee0:	89 2b       	or	r24, r25
    4ee2:	80 93 56 04 	sts	0x0456, r24
    4ee6:	82 e0       	ldi	r24, 0x02	; 2
    4ee8:	80 93 81 06 	sts	0x0681, r24
    4eec:	10 92 62 06 	sts	0x0662, r1
    4ef0:	10 92 61 06 	sts	0x0661, r1
    4ef4:	80 91 82 06 	lds	r24, 0x0682
    4ef8:	88 23       	and	r24, r24
    4efa:	31 f4       	brne	.+12     	; 0x4f08 <STEPPER_process_run_mode+0x1f4>
    4efc:	86 e5       	ldi	r24, 0x56	; 86
    4efe:	94 e0       	ldi	r25, 0x04	; 4
    4f00:	61 2f       	mov	r22, r17
    4f02:	40 2f       	mov	r20, r16
    4f04:	0e 94 4f 28 	call	0x509e	; 0x509e <STEPPER_process_pwm>
    4f08:	88 b1       	in	r24, 0x08	; 8
    4f0a:	83 70       	andi	r24, 0x03	; 3
    4f0c:	90 91 56 04 	lds	r25, 0x0456
    4f10:	89 2b       	or	r24, r25
    4f12:	88 b9       	out	0x08, r24	; 8
    4f14:	1f 91       	pop	r17
    4f16:	0f 91       	pop	r16
    4f18:	08 95       	ret

00004f1a <STEPPER_process_step_mode>:
    4f1a:	88 23       	and	r24, r24
    4f1c:	21 f0       	breq	.+8      	; 0x4f26 <STEPPER_process_step_mode+0xc>
    4f1e:	81 30       	cpi	r24, 0x01	; 1
    4f20:	09 f0       	breq	.+2      	; 0x4f24 <STEPPER_process_step_mode+0xa>
    4f22:	4e c0       	rjmp	.+156    	; 0x4fc0 <STEPPER_process_step_mode+0xa6>
    4f24:	27 c0       	rjmp	.+78     	; 0x4f74 <STEPPER_process_step_mode+0x5a>
    4f26:	80 91 6b 06 	lds	r24, 0x066B
    4f2a:	90 91 6c 06 	lds	r25, 0x066C
    4f2e:	89 2b       	or	r24, r25
    4f30:	49 f0       	breq	.+18     	; 0x4f44 <STEPPER_process_step_mode+0x2a>
    4f32:	80 91 6b 06 	lds	r24, 0x066B
    4f36:	90 91 6c 06 	lds	r25, 0x066C
    4f3a:	01 97       	sbiw	r24, 0x01	; 1
    4f3c:	90 93 6c 06 	sts	0x066C, r25
    4f40:	80 93 6b 06 	sts	0x066B, r24
    4f44:	80 91 8b 06 	lds	r24, 0x068B
    4f48:	88 23       	and	r24, r24
    4f4a:	d1 f5       	brne	.+116    	; 0x4fc0 <STEPPER_process_step_mode+0xa6>
    4f4c:	20 91 6b 06 	lds	r18, 0x066B
    4f50:	30 91 6c 06 	lds	r19, 0x066C
    4f54:	80 91 6f 06 	lds	r24, 0x066F
    4f58:	90 91 70 06 	lds	r25, 0x0670
    4f5c:	28 17       	cp	r18, r24
    4f5e:	39 07       	cpc	r19, r25
    4f60:	79 f5       	brne	.+94     	; 0x4fc0 <STEPPER_process_step_mode+0xa6>
    4f62:	80 e0       	ldi	r24, 0x00	; 0
    4f64:	60 e0       	ldi	r22, 0x00	; 0
    4f66:	70 e0       	ldi	r23, 0x00	; 0
    4f68:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <STEPPER_set_speed>
    4f6c:	81 e0       	ldi	r24, 0x01	; 1
    4f6e:	80 93 8b 06 	sts	0x068B, r24
    4f72:	08 95       	ret
    4f74:	80 91 6d 06 	lds	r24, 0x066D
    4f78:	90 91 6e 06 	lds	r25, 0x066E
    4f7c:	89 2b       	or	r24, r25
    4f7e:	49 f0       	breq	.+18     	; 0x4f92 <STEPPER_process_step_mode+0x78>
    4f80:	80 91 6d 06 	lds	r24, 0x066D
    4f84:	90 91 6e 06 	lds	r25, 0x066E
    4f88:	01 97       	sbiw	r24, 0x01	; 1
    4f8a:	90 93 6e 06 	sts	0x066E, r25
    4f8e:	80 93 6d 06 	sts	0x066D, r24
    4f92:	80 91 8c 06 	lds	r24, 0x068C
    4f96:	88 23       	and	r24, r24
    4f98:	99 f4       	brne	.+38     	; 0x4fc0 <STEPPER_process_step_mode+0xa6>
    4f9a:	20 91 6d 06 	lds	r18, 0x066D
    4f9e:	30 91 6e 06 	lds	r19, 0x066E
    4fa2:	80 91 71 06 	lds	r24, 0x0671
    4fa6:	90 91 72 06 	lds	r25, 0x0672
    4faa:	28 17       	cp	r18, r24
    4fac:	39 07       	cpc	r19, r25
    4fae:	41 f4       	brne	.+16     	; 0x4fc0 <STEPPER_process_step_mode+0xa6>
    4fb0:	81 e0       	ldi	r24, 0x01	; 1
    4fb2:	60 e0       	ldi	r22, 0x00	; 0
    4fb4:	70 e0       	ldi	r23, 0x00	; 0
    4fb6:	0e 94 72 1a 	call	0x34e4	; 0x34e4 <STEPPER_set_speed>
    4fba:	81 e0       	ldi	r24, 0x01	; 1
    4fbc:	80 93 8c 06 	sts	0x068C, r24
    4fc0:	08 95       	ret

00004fc2 <TMRSRVC_process>:
    4fc2:	ff 92       	push	r15
    4fc4:	0f 93       	push	r16
    4fc6:	1f 93       	push	r17
    4fc8:	cf 93       	push	r28
    4fca:	df 93       	push	r29
    4fcc:	80 91 c9 06 	lds	r24, 0x06C9
    4fd0:	88 23       	and	r24, r24
    4fd2:	09 f4       	brne	.+2      	; 0x4fd6 <TMRSRVC_process+0x14>
    4fd4:	59 c0       	rjmp	.+178    	; 0x5088 <TMRSRVC_process+0xc6>
    4fd6:	00 91 ca 06 	lds	r16, 0x06CA
    4fda:	10 91 cb 06 	lds	r17, 0x06CB
    4fde:	f8 01       	movw	r30, r16
    4fe0:	c0 81       	ld	r28, Z
    4fe2:	d1 81       	ldd	r29, Z+1	; 0x01
    4fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    4fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    4fe8:	01 97       	sbiw	r24, 0x01	; 1
    4fea:	9d 83       	std	Y+5, r25	; 0x05
    4fec:	8c 83       	std	Y+4, r24	; 0x04
    4fee:	18 16       	cp	r1, r24
    4ff0:	19 06       	cpc	r1, r25
    4ff2:	0c f4       	brge	.+2      	; 0x4ff6 <TMRSRVC_process+0x34>
    4ff4:	49 c0       	rjmp	.+146    	; 0x5088 <TMRSRVC_process+0xc6>
    4ff6:	89 81       	ldd	r24, Y+1	; 0x01
    4ff8:	80 ff       	sbrs	r24, 0
    4ffa:	05 c0       	rjmp	.+10     	; 0x5006 <TMRSRVC_process+0x44>
    4ffc:	8e 81       	ldd	r24, Y+6	; 0x06
    4ffe:	88 23       	and	r24, r24
    5000:	11 f4       	brne	.+4      	; 0x5006 <TMRSRVC_process+0x44>
    5002:	81 e0       	ldi	r24, 0x01	; 1
    5004:	8e 83       	std	Y+6, r24	; 0x06
    5006:	89 81       	ldd	r24, Y+1	; 0x01
    5008:	81 ff       	sbrs	r24, 1
    500a:	03 c0       	rjmp	.+6      	; 0x5012 <TMRSRVC_process+0x50>
    500c:	ef 81       	ldd	r30, Y+7	; 0x07
    500e:	f8 85       	ldd	r31, Y+8	; 0x08
    5010:	09 95       	icall
    5012:	80 91 c9 06 	lds	r24, 0x06C9
    5016:	82 30       	cpi	r24, 0x02	; 2
    5018:	a8 f0       	brcs	.+42     	; 0x5044 <TMRSRVC_process+0x82>
    501a:	f8 01       	movw	r30, r16
    501c:	82 81       	ldd	r24, Z+2	; 0x02
    501e:	93 81       	ldd	r25, Z+3	; 0x03
    5020:	90 93 cb 06 	sts	0x06CB, r25
    5024:	80 93 ca 06 	sts	0x06CA, r24
    5028:	13 82       	std	Z+3, r1	; 0x03
    502a:	12 82       	std	Z+2, r1	; 0x02
    502c:	e0 91 00 00 	lds	r30, 0x0000
    5030:	f0 91 01 00 	lds	r31, 0x0001
    5034:	84 81       	ldd	r24, Z+4	; 0x04
    5036:	95 81       	ldd	r25, Z+5	; 0x05
    5038:	18 16       	cp	r1, r24
    503a:	19 06       	cpc	r1, r25
    503c:	3c f0       	brlt	.+14     	; 0x504c <TMRSRVC_process+0x8a>
    503e:	ff 24       	eor	r15, r15
    5040:	f3 94       	inc	r15
    5042:	05 c0       	rjmp	.+10     	; 0x504e <TMRSRVC_process+0x8c>
    5044:	10 92 cb 06 	sts	0x06CB, r1
    5048:	10 92 ca 06 	sts	0x06CA, r1
    504c:	ff 24       	eor	r15, r15
    504e:	80 91 c9 06 	lds	r24, 0x06C9
    5052:	81 50       	subi	r24, 0x01	; 1
    5054:	80 93 c9 06 	sts	0x06C9, r24
    5058:	80 91 c9 06 	lds	r24, 0x06C9
    505c:	88 23       	and	r24, r24
    505e:	11 f4       	brne	.+4      	; 0x5064 <TMRSRVC_process+0xa2>
    5060:	0e 94 4c 28 	call	0x5098	; 0x5098 <TMRSRVC_stop>
    5064:	89 81       	ldd	r24, Y+1	; 0x01
    5066:	82 ff       	sbrs	r24, 2
    5068:	08 c0       	rjmp	.+16     	; 0x507a <TMRSRVC_process+0xb8>
    506a:	8a 81       	ldd	r24, Y+2	; 0x02
    506c:	9b 81       	ldd	r25, Y+3	; 0x03
    506e:	9d 83       	std	Y+5, r25	; 0x05
    5070:	8c 83       	std	Y+4, r24	; 0x04
    5072:	c8 01       	movw	r24, r16
    5074:	0e 94 c1 23 	call	0x4782	; 0x4782 <TMRSRVC_insert>
    5078:	08 c0       	rjmp	.+16     	; 0x508a <TMRSRVC_process+0xc8>
    507a:	c8 01       	movw	r24, r16
    507c:	0e 94 55 31 	call	0x62aa	; 0x62aa <free>
    5080:	89 81       	ldd	r24, Y+1	; 0x01
    5082:	8f 7e       	andi	r24, 0xEF	; 239
    5084:	89 83       	std	Y+1, r24	; 0x01
    5086:	01 c0       	rjmp	.+2      	; 0x508a <TMRSRVC_process+0xc8>
    5088:	ff 24       	eor	r15, r15
    508a:	8f 2d       	mov	r24, r15
    508c:	df 91       	pop	r29
    508e:	cf 91       	pop	r28
    5090:	1f 91       	pop	r17
    5092:	0f 91       	pop	r16
    5094:	ff 90       	pop	r15
    5096:	08 95       	ret

00005098 <TMRSRVC_stop>:
    5098:	10 92 55 04 	sts	0x0455, r1
    509c:	08 95       	ret

0000509e <STEPPER_process_pwm>:
    509e:	fc 01       	movw	r30, r24
    50a0:	80 91 80 06 	lds	r24, 0x0680
    50a4:	82 30       	cpi	r24, 0x02	; 2
    50a6:	69 f4       	brne	.+26     	; 0x50c2 <STEPPER_process_pwm+0x24>
    50a8:	80 91 5a 04 	lds	r24, 0x045A
    50ac:	91 e0       	ldi	r25, 0x01	; 1
    50ae:	89 27       	eor	r24, r25
    50b0:	80 93 5a 04 	sts	0x045A, r24
    50b4:	88 23       	and	r24, r24
    50b6:	09 f0       	breq	.+2      	; 0x50ba <STEPPER_process_pwm+0x1c>
    50b8:	3e c0       	rjmp	.+124    	; 0x5136 <STEPPER_process_pwm+0x98>
    50ba:	80 81       	ld	r24, Z
    50bc:	83 7e       	andi	r24, 0xE3	; 227
    50be:	80 83       	st	Z, r24
    50c0:	3a c0       	rjmp	.+116    	; 0x5136 <STEPPER_process_pwm+0x98>
    50c2:	80 91 5f 06 	lds	r24, 0x065F
    50c6:	90 91 60 06 	lds	r25, 0x0660
    50ca:	c3 97       	sbiw	r24, 0x33	; 51
    50cc:	a4 f5       	brge	.+104    	; 0x5136 <STEPPER_process_pwm+0x98>
    50ce:	66 23       	and	r22, r22
    50d0:	d1 f0       	breq	.+52     	; 0x5106 <STEPPER_process_pwm+0x68>
    50d2:	20 91 5f 06 	lds	r18, 0x065F
    50d6:	30 91 60 06 	lds	r19, 0x0660
    50da:	80 e6       	ldi	r24, 0x60	; 96
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	bc 01       	movw	r22, r24
    50e0:	26 9f       	mul	r18, r22
    50e2:	c0 01       	movw	r24, r0
    50e4:	27 9f       	mul	r18, r23
    50e6:	90 0d       	add	r25, r0
    50e8:	36 9f       	mul	r19, r22
    50ea:	90 0d       	add	r25, r0
    50ec:	11 24       	eor	r1, r1
    50ee:	88 0f       	add	r24, r24
    50f0:	89 2f       	mov	r24, r25
    50f2:	88 1f       	adc	r24, r24
    50f4:	99 0b       	sbc	r25, r25
    50f6:	90 93 74 06 	sts	0x0674, r25
    50fa:	80 93 73 06 	sts	0x0673, r24
    50fe:	81 e0       	ldi	r24, 0x01	; 1
    5100:	80 93 58 04 	sts	0x0458, r24
    5104:	18 c0       	rjmp	.+48     	; 0x5136 <STEPPER_process_pwm+0x98>
    5106:	80 91 58 04 	lds	r24, 0x0458
    510a:	88 23       	and	r24, r24
    510c:	a1 f0       	breq	.+40     	; 0x5136 <STEPPER_process_pwm+0x98>
    510e:	80 91 73 06 	lds	r24, 0x0673
    5112:	90 91 74 06 	lds	r25, 0x0674
    5116:	01 97       	sbiw	r24, 0x01	; 1
    5118:	90 93 74 06 	sts	0x0674, r25
    511c:	80 93 73 06 	sts	0x0673, r24
    5120:	80 91 73 06 	lds	r24, 0x0673
    5124:	90 91 74 06 	lds	r25, 0x0674
    5128:	89 2b       	or	r24, r25
    512a:	29 f4       	brne	.+10     	; 0x5136 <STEPPER_process_pwm+0x98>
    512c:	80 81       	ld	r24, Z
    512e:	83 7e       	andi	r24, 0xE3	; 227
    5130:	80 83       	st	Z, r24
    5132:	10 92 58 04 	sts	0x0458, r1
    5136:	80 91 81 06 	lds	r24, 0x0681
    513a:	82 30       	cpi	r24, 0x02	; 2
    513c:	69 f4       	brne	.+26     	; 0x5158 <STEPPER_process_pwm+0xba>
    513e:	80 91 59 04 	lds	r24, 0x0459
    5142:	91 e0       	ldi	r25, 0x01	; 1
    5144:	89 27       	eor	r24, r25
    5146:	80 93 59 04 	sts	0x0459, r24
    514a:	88 23       	and	r24, r24
    514c:	09 f0       	breq	.+2      	; 0x5150 <STEPPER_process_pwm+0xb2>
    514e:	3e c0       	rjmp	.+124    	; 0x51cc <STEPPER_process_pwm+0x12e>
    5150:	80 81       	ld	r24, Z
    5152:	8f 71       	andi	r24, 0x1F	; 31
    5154:	80 83       	st	Z, r24
    5156:	08 95       	ret
    5158:	80 91 61 06 	lds	r24, 0x0661
    515c:	90 91 62 06 	lds	r25, 0x0662
    5160:	c3 97       	sbiw	r24, 0x33	; 51
    5162:	a4 f5       	brge	.+104    	; 0x51cc <STEPPER_process_pwm+0x12e>
    5164:	44 23       	and	r20, r20
    5166:	d1 f0       	breq	.+52     	; 0x519c <STEPPER_process_pwm+0xfe>
    5168:	20 91 61 06 	lds	r18, 0x0661
    516c:	30 91 62 06 	lds	r19, 0x0662
    5170:	80 e6       	ldi	r24, 0x60	; 96
    5172:	90 e0       	ldi	r25, 0x00	; 0
    5174:	ac 01       	movw	r20, r24
    5176:	24 9f       	mul	r18, r20
    5178:	c0 01       	movw	r24, r0
    517a:	25 9f       	mul	r18, r21
    517c:	90 0d       	add	r25, r0
    517e:	34 9f       	mul	r19, r20
    5180:	90 0d       	add	r25, r0
    5182:	11 24       	eor	r1, r1
    5184:	88 0f       	add	r24, r24
    5186:	89 2f       	mov	r24, r25
    5188:	88 1f       	adc	r24, r24
    518a:	99 0b       	sbc	r25, r25
    518c:	90 93 76 06 	sts	0x0676, r25
    5190:	80 93 75 06 	sts	0x0675, r24
    5194:	81 e0       	ldi	r24, 0x01	; 1
    5196:	80 93 57 04 	sts	0x0457, r24
    519a:	08 95       	ret
    519c:	80 91 57 04 	lds	r24, 0x0457
    51a0:	88 23       	and	r24, r24
    51a2:	a1 f0       	breq	.+40     	; 0x51cc <STEPPER_process_pwm+0x12e>
    51a4:	80 91 75 06 	lds	r24, 0x0675
    51a8:	90 91 76 06 	lds	r25, 0x0676
    51ac:	01 97       	sbiw	r24, 0x01	; 1
    51ae:	90 93 76 06 	sts	0x0676, r25
    51b2:	80 93 75 06 	sts	0x0675, r24
    51b6:	80 91 75 06 	lds	r24, 0x0675
    51ba:	90 91 76 06 	lds	r25, 0x0676
    51be:	89 2b       	or	r24, r25
    51c0:	29 f4       	brne	.+10     	; 0x51cc <STEPPER_process_pwm+0x12e>
    51c2:	80 81       	ld	r24, Z
    51c4:	8f 71       	andi	r24, 0x1F	; 31
    51c6:	80 83       	st	Z, r24
    51c8:	10 92 57 04 	sts	0x0457, r1
    51cc:	08 95       	ret

000051ce <__subsf3>:
    51ce:	50 58       	subi	r21, 0x80	; 128

000051d0 <__addsf3>:
    51d0:	bb 27       	eor	r27, r27
    51d2:	aa 27       	eor	r26, r26
    51d4:	0e d0       	rcall	.+28     	; 0x51f2 <__addsf3x>
    51d6:	75 c1       	rjmp	.+746    	; 0x54c2 <__fp_round>
    51d8:	66 d1       	rcall	.+716    	; 0x54a6 <__fp_pscA>
    51da:	30 f0       	brcs	.+12     	; 0x51e8 <__addsf3+0x18>
    51dc:	6b d1       	rcall	.+726    	; 0x54b4 <__fp_pscB>
    51de:	20 f0       	brcs	.+8      	; 0x51e8 <__addsf3+0x18>
    51e0:	31 f4       	brne	.+12     	; 0x51ee <__addsf3+0x1e>
    51e2:	9f 3f       	cpi	r25, 0xFF	; 255
    51e4:	11 f4       	brne	.+4      	; 0x51ea <__addsf3+0x1a>
    51e6:	1e f4       	brtc	.+6      	; 0x51ee <__addsf3+0x1e>
    51e8:	5b c1       	rjmp	.+694    	; 0x54a0 <__fp_nan>
    51ea:	0e f4       	brtc	.+2      	; 0x51ee <__addsf3+0x1e>
    51ec:	e0 95       	com	r30
    51ee:	e7 fb       	bst	r30, 7
    51f0:	51 c1       	rjmp	.+674    	; 0x5494 <__fp_inf>

000051f2 <__addsf3x>:
    51f2:	e9 2f       	mov	r30, r25
    51f4:	77 d1       	rcall	.+750    	; 0x54e4 <__fp_split3>
    51f6:	80 f3       	brcs	.-32     	; 0x51d8 <__addsf3+0x8>
    51f8:	ba 17       	cp	r27, r26
    51fa:	62 07       	cpc	r22, r18
    51fc:	73 07       	cpc	r23, r19
    51fe:	84 07       	cpc	r24, r20
    5200:	95 07       	cpc	r25, r21
    5202:	18 f0       	brcs	.+6      	; 0x520a <__addsf3x+0x18>
    5204:	71 f4       	brne	.+28     	; 0x5222 <__addsf3x+0x30>
    5206:	9e f5       	brtc	.+102    	; 0x526e <__addsf3x+0x7c>
    5208:	8f c1       	rjmp	.+798    	; 0x5528 <__fp_zero>
    520a:	0e f4       	brtc	.+2      	; 0x520e <__addsf3x+0x1c>
    520c:	e0 95       	com	r30
    520e:	0b 2e       	mov	r0, r27
    5210:	ba 2f       	mov	r27, r26
    5212:	a0 2d       	mov	r26, r0
    5214:	0b 01       	movw	r0, r22
    5216:	b9 01       	movw	r22, r18
    5218:	90 01       	movw	r18, r0
    521a:	0c 01       	movw	r0, r24
    521c:	ca 01       	movw	r24, r20
    521e:	a0 01       	movw	r20, r0
    5220:	11 24       	eor	r1, r1
    5222:	ff 27       	eor	r31, r31
    5224:	59 1b       	sub	r21, r25
    5226:	99 f0       	breq	.+38     	; 0x524e <__addsf3x+0x5c>
    5228:	59 3f       	cpi	r21, 0xF9	; 249
    522a:	50 f4       	brcc	.+20     	; 0x5240 <__addsf3x+0x4e>
    522c:	50 3e       	cpi	r21, 0xE0	; 224
    522e:	68 f1       	brcs	.+90     	; 0x528a <__addsf3x+0x98>
    5230:	1a 16       	cp	r1, r26
    5232:	f0 40       	sbci	r31, 0x00	; 0
    5234:	a2 2f       	mov	r26, r18
    5236:	23 2f       	mov	r18, r19
    5238:	34 2f       	mov	r19, r20
    523a:	44 27       	eor	r20, r20
    523c:	58 5f       	subi	r21, 0xF8	; 248
    523e:	f3 cf       	rjmp	.-26     	; 0x5226 <__addsf3x+0x34>
    5240:	46 95       	lsr	r20
    5242:	37 95       	ror	r19
    5244:	27 95       	ror	r18
    5246:	a7 95       	ror	r26
    5248:	f0 40       	sbci	r31, 0x00	; 0
    524a:	53 95       	inc	r21
    524c:	c9 f7       	brne	.-14     	; 0x5240 <__addsf3x+0x4e>
    524e:	7e f4       	brtc	.+30     	; 0x526e <__addsf3x+0x7c>
    5250:	1f 16       	cp	r1, r31
    5252:	ba 0b       	sbc	r27, r26
    5254:	62 0b       	sbc	r22, r18
    5256:	73 0b       	sbc	r23, r19
    5258:	84 0b       	sbc	r24, r20
    525a:	ba f0       	brmi	.+46     	; 0x528a <__addsf3x+0x98>
    525c:	91 50       	subi	r25, 0x01	; 1
    525e:	a1 f0       	breq	.+40     	; 0x5288 <__addsf3x+0x96>
    5260:	ff 0f       	add	r31, r31
    5262:	bb 1f       	adc	r27, r27
    5264:	66 1f       	adc	r22, r22
    5266:	77 1f       	adc	r23, r23
    5268:	88 1f       	adc	r24, r24
    526a:	c2 f7       	brpl	.-16     	; 0x525c <__addsf3x+0x6a>
    526c:	0e c0       	rjmp	.+28     	; 0x528a <__addsf3x+0x98>
    526e:	ba 0f       	add	r27, r26
    5270:	62 1f       	adc	r22, r18
    5272:	73 1f       	adc	r23, r19
    5274:	84 1f       	adc	r24, r20
    5276:	48 f4       	brcc	.+18     	; 0x528a <__addsf3x+0x98>
    5278:	87 95       	ror	r24
    527a:	77 95       	ror	r23
    527c:	67 95       	ror	r22
    527e:	b7 95       	ror	r27
    5280:	f7 95       	ror	r31
    5282:	9e 3f       	cpi	r25, 0xFE	; 254
    5284:	08 f0       	brcs	.+2      	; 0x5288 <__addsf3x+0x96>
    5286:	b3 cf       	rjmp	.-154    	; 0x51ee <__addsf3+0x1e>
    5288:	93 95       	inc	r25
    528a:	88 0f       	add	r24, r24
    528c:	08 f0       	brcs	.+2      	; 0x5290 <__addsf3x+0x9e>
    528e:	99 27       	eor	r25, r25
    5290:	ee 0f       	add	r30, r30
    5292:	97 95       	ror	r25
    5294:	87 95       	ror	r24
    5296:	08 95       	ret

00005298 <__cmpsf2>:
    5298:	d9 d0       	rcall	.+434    	; 0x544c <__fp_cmp>
    529a:	08 f4       	brcc	.+2      	; 0x529e <__cmpsf2+0x6>
    529c:	81 e0       	ldi	r24, 0x01	; 1
    529e:	08 95       	ret

000052a0 <__divsf3>:
    52a0:	0c d0       	rcall	.+24     	; 0x52ba <__divsf3x>
    52a2:	0f c1       	rjmp	.+542    	; 0x54c2 <__fp_round>
    52a4:	07 d1       	rcall	.+526    	; 0x54b4 <__fp_pscB>
    52a6:	40 f0       	brcs	.+16     	; 0x52b8 <__divsf3+0x18>
    52a8:	fe d0       	rcall	.+508    	; 0x54a6 <__fp_pscA>
    52aa:	30 f0       	brcs	.+12     	; 0x52b8 <__divsf3+0x18>
    52ac:	21 f4       	brne	.+8      	; 0x52b6 <__divsf3+0x16>
    52ae:	5f 3f       	cpi	r21, 0xFF	; 255
    52b0:	19 f0       	breq	.+6      	; 0x52b8 <__divsf3+0x18>
    52b2:	f0 c0       	rjmp	.+480    	; 0x5494 <__fp_inf>
    52b4:	51 11       	cpse	r21, r1
    52b6:	39 c1       	rjmp	.+626    	; 0x552a <__fp_szero>
    52b8:	f3 c0       	rjmp	.+486    	; 0x54a0 <__fp_nan>

000052ba <__divsf3x>:
    52ba:	14 d1       	rcall	.+552    	; 0x54e4 <__fp_split3>
    52bc:	98 f3       	brcs	.-26     	; 0x52a4 <__divsf3+0x4>

000052be <__divsf3_pse>:
    52be:	99 23       	and	r25, r25
    52c0:	c9 f3       	breq	.-14     	; 0x52b4 <__divsf3+0x14>
    52c2:	55 23       	and	r21, r21
    52c4:	b1 f3       	breq	.-20     	; 0x52b2 <__divsf3+0x12>
    52c6:	95 1b       	sub	r25, r21
    52c8:	55 0b       	sbc	r21, r21
    52ca:	bb 27       	eor	r27, r27
    52cc:	aa 27       	eor	r26, r26
    52ce:	62 17       	cp	r22, r18
    52d0:	73 07       	cpc	r23, r19
    52d2:	84 07       	cpc	r24, r20
    52d4:	38 f0       	brcs	.+14     	; 0x52e4 <__divsf3_pse+0x26>
    52d6:	9f 5f       	subi	r25, 0xFF	; 255
    52d8:	5f 4f       	sbci	r21, 0xFF	; 255
    52da:	22 0f       	add	r18, r18
    52dc:	33 1f       	adc	r19, r19
    52de:	44 1f       	adc	r20, r20
    52e0:	aa 1f       	adc	r26, r26
    52e2:	a9 f3       	breq	.-22     	; 0x52ce <__divsf3_pse+0x10>
    52e4:	33 d0       	rcall	.+102    	; 0x534c <__divsf3_pse+0x8e>
    52e6:	0e 2e       	mov	r0, r30
    52e8:	3a f0       	brmi	.+14     	; 0x52f8 <__divsf3_pse+0x3a>
    52ea:	e0 e8       	ldi	r30, 0x80	; 128
    52ec:	30 d0       	rcall	.+96     	; 0x534e <__divsf3_pse+0x90>
    52ee:	91 50       	subi	r25, 0x01	; 1
    52f0:	50 40       	sbci	r21, 0x00	; 0
    52f2:	e6 95       	lsr	r30
    52f4:	00 1c       	adc	r0, r0
    52f6:	ca f7       	brpl	.-14     	; 0x52ea <__divsf3_pse+0x2c>
    52f8:	29 d0       	rcall	.+82     	; 0x534c <__divsf3_pse+0x8e>
    52fa:	fe 2f       	mov	r31, r30
    52fc:	27 d0       	rcall	.+78     	; 0x534c <__divsf3_pse+0x8e>
    52fe:	66 0f       	add	r22, r22
    5300:	77 1f       	adc	r23, r23
    5302:	88 1f       	adc	r24, r24
    5304:	bb 1f       	adc	r27, r27
    5306:	26 17       	cp	r18, r22
    5308:	37 07       	cpc	r19, r23
    530a:	48 07       	cpc	r20, r24
    530c:	ab 07       	cpc	r26, r27
    530e:	b0 e8       	ldi	r27, 0x80	; 128
    5310:	09 f0       	breq	.+2      	; 0x5314 <__divsf3_pse+0x56>
    5312:	bb 0b       	sbc	r27, r27
    5314:	80 2d       	mov	r24, r0
    5316:	bf 01       	movw	r22, r30
    5318:	ff 27       	eor	r31, r31
    531a:	93 58       	subi	r25, 0x83	; 131
    531c:	5f 4f       	sbci	r21, 0xFF	; 255
    531e:	2a f0       	brmi	.+10     	; 0x532a <__divsf3_pse+0x6c>
    5320:	9e 3f       	cpi	r25, 0xFE	; 254
    5322:	51 05       	cpc	r21, r1
    5324:	68 f0       	brcs	.+26     	; 0x5340 <__divsf3_pse+0x82>
    5326:	b6 c0       	rjmp	.+364    	; 0x5494 <__fp_inf>
    5328:	00 c1       	rjmp	.+512    	; 0x552a <__fp_szero>
    532a:	5f 3f       	cpi	r21, 0xFF	; 255
    532c:	ec f3       	brlt	.-6      	; 0x5328 <__divsf3_pse+0x6a>
    532e:	98 3e       	cpi	r25, 0xE8	; 232
    5330:	dc f3       	brlt	.-10     	; 0x5328 <__divsf3_pse+0x6a>
    5332:	86 95       	lsr	r24
    5334:	77 95       	ror	r23
    5336:	67 95       	ror	r22
    5338:	b7 95       	ror	r27
    533a:	f7 95       	ror	r31
    533c:	9f 5f       	subi	r25, 0xFF	; 255
    533e:	c9 f7       	brne	.-14     	; 0x5332 <__divsf3_pse+0x74>
    5340:	88 0f       	add	r24, r24
    5342:	91 1d       	adc	r25, r1
    5344:	96 95       	lsr	r25
    5346:	87 95       	ror	r24
    5348:	97 f9       	bld	r25, 7
    534a:	08 95       	ret
    534c:	e1 e0       	ldi	r30, 0x01	; 1
    534e:	66 0f       	add	r22, r22
    5350:	77 1f       	adc	r23, r23
    5352:	88 1f       	adc	r24, r24
    5354:	bb 1f       	adc	r27, r27
    5356:	62 17       	cp	r22, r18
    5358:	73 07       	cpc	r23, r19
    535a:	84 07       	cpc	r24, r20
    535c:	ba 07       	cpc	r27, r26
    535e:	20 f0       	brcs	.+8      	; 0x5368 <__divsf3_pse+0xaa>
    5360:	62 1b       	sub	r22, r18
    5362:	73 0b       	sbc	r23, r19
    5364:	84 0b       	sbc	r24, r20
    5366:	ba 0b       	sbc	r27, r26
    5368:	ee 1f       	adc	r30, r30
    536a:	88 f7       	brcc	.-30     	; 0x534e <__divsf3_pse+0x90>
    536c:	e0 95       	com	r30
    536e:	08 95       	ret

00005370 <__fixsfsi>:
    5370:	04 d0       	rcall	.+8      	; 0x537a <__fixunssfsi>
    5372:	68 94       	set
    5374:	b1 11       	cpse	r27, r1
    5376:	d9 c0       	rjmp	.+434    	; 0x552a <__fp_szero>
    5378:	08 95       	ret

0000537a <__fixunssfsi>:
    537a:	bc d0       	rcall	.+376    	; 0x54f4 <__fp_splitA>
    537c:	88 f0       	brcs	.+34     	; 0x53a0 <__fixunssfsi+0x26>
    537e:	9f 57       	subi	r25, 0x7F	; 127
    5380:	90 f0       	brcs	.+36     	; 0x53a6 <__fixunssfsi+0x2c>
    5382:	b9 2f       	mov	r27, r25
    5384:	99 27       	eor	r25, r25
    5386:	b7 51       	subi	r27, 0x17	; 23
    5388:	a0 f0       	brcs	.+40     	; 0x53b2 <__fixunssfsi+0x38>
    538a:	d1 f0       	breq	.+52     	; 0x53c0 <__fixunssfsi+0x46>
    538c:	66 0f       	add	r22, r22
    538e:	77 1f       	adc	r23, r23
    5390:	88 1f       	adc	r24, r24
    5392:	99 1f       	adc	r25, r25
    5394:	1a f0       	brmi	.+6      	; 0x539c <__fixunssfsi+0x22>
    5396:	ba 95       	dec	r27
    5398:	c9 f7       	brne	.-14     	; 0x538c <__fixunssfsi+0x12>
    539a:	12 c0       	rjmp	.+36     	; 0x53c0 <__fixunssfsi+0x46>
    539c:	b1 30       	cpi	r27, 0x01	; 1
    539e:	81 f0       	breq	.+32     	; 0x53c0 <__fixunssfsi+0x46>
    53a0:	c3 d0       	rcall	.+390    	; 0x5528 <__fp_zero>
    53a2:	b1 e0       	ldi	r27, 0x01	; 1
    53a4:	08 95       	ret
    53a6:	c0 c0       	rjmp	.+384    	; 0x5528 <__fp_zero>
    53a8:	67 2f       	mov	r22, r23
    53aa:	78 2f       	mov	r23, r24
    53ac:	88 27       	eor	r24, r24
    53ae:	b8 5f       	subi	r27, 0xF8	; 248
    53b0:	39 f0       	breq	.+14     	; 0x53c0 <__fixunssfsi+0x46>
    53b2:	b9 3f       	cpi	r27, 0xF9	; 249
    53b4:	cc f3       	brlt	.-14     	; 0x53a8 <__fixunssfsi+0x2e>
    53b6:	86 95       	lsr	r24
    53b8:	77 95       	ror	r23
    53ba:	67 95       	ror	r22
    53bc:	b3 95       	inc	r27
    53be:	d9 f7       	brne	.-10     	; 0x53b6 <__fixunssfsi+0x3c>
    53c0:	3e f4       	brtc	.+14     	; 0x53d0 <__fixunssfsi+0x56>
    53c2:	90 95       	com	r25
    53c4:	80 95       	com	r24
    53c6:	70 95       	com	r23
    53c8:	61 95       	neg	r22
    53ca:	7f 4f       	sbci	r23, 0xFF	; 255
    53cc:	8f 4f       	sbci	r24, 0xFF	; 255
    53ce:	9f 4f       	sbci	r25, 0xFF	; 255
    53d0:	08 95       	ret

000053d2 <__floatunsisf>:
    53d2:	e8 94       	clt
    53d4:	09 c0       	rjmp	.+18     	; 0x53e8 <__floatsisf+0x12>

000053d6 <__floatsisf>:
    53d6:	97 fb       	bst	r25, 7
    53d8:	3e f4       	brtc	.+14     	; 0x53e8 <__floatsisf+0x12>
    53da:	90 95       	com	r25
    53dc:	80 95       	com	r24
    53de:	70 95       	com	r23
    53e0:	61 95       	neg	r22
    53e2:	7f 4f       	sbci	r23, 0xFF	; 255
    53e4:	8f 4f       	sbci	r24, 0xFF	; 255
    53e6:	9f 4f       	sbci	r25, 0xFF	; 255
    53e8:	99 23       	and	r25, r25
    53ea:	a9 f0       	breq	.+42     	; 0x5416 <__floatsisf+0x40>
    53ec:	f9 2f       	mov	r31, r25
    53ee:	96 e9       	ldi	r25, 0x96	; 150
    53f0:	bb 27       	eor	r27, r27
    53f2:	93 95       	inc	r25
    53f4:	f6 95       	lsr	r31
    53f6:	87 95       	ror	r24
    53f8:	77 95       	ror	r23
    53fa:	67 95       	ror	r22
    53fc:	b7 95       	ror	r27
    53fe:	f1 11       	cpse	r31, r1
    5400:	f8 cf       	rjmp	.-16     	; 0x53f2 <__floatsisf+0x1c>
    5402:	fa f4       	brpl	.+62     	; 0x5442 <__floatsisf+0x6c>
    5404:	bb 0f       	add	r27, r27
    5406:	11 f4       	brne	.+4      	; 0x540c <__floatsisf+0x36>
    5408:	60 ff       	sbrs	r22, 0
    540a:	1b c0       	rjmp	.+54     	; 0x5442 <__floatsisf+0x6c>
    540c:	6f 5f       	subi	r22, 0xFF	; 255
    540e:	7f 4f       	sbci	r23, 0xFF	; 255
    5410:	8f 4f       	sbci	r24, 0xFF	; 255
    5412:	9f 4f       	sbci	r25, 0xFF	; 255
    5414:	16 c0       	rjmp	.+44     	; 0x5442 <__floatsisf+0x6c>
    5416:	88 23       	and	r24, r24
    5418:	11 f0       	breq	.+4      	; 0x541e <__floatsisf+0x48>
    541a:	96 e9       	ldi	r25, 0x96	; 150
    541c:	11 c0       	rjmp	.+34     	; 0x5440 <__floatsisf+0x6a>
    541e:	77 23       	and	r23, r23
    5420:	21 f0       	breq	.+8      	; 0x542a <__floatsisf+0x54>
    5422:	9e e8       	ldi	r25, 0x8E	; 142
    5424:	87 2f       	mov	r24, r23
    5426:	76 2f       	mov	r23, r22
    5428:	05 c0       	rjmp	.+10     	; 0x5434 <__floatsisf+0x5e>
    542a:	66 23       	and	r22, r22
    542c:	71 f0       	breq	.+28     	; 0x544a <__floatsisf+0x74>
    542e:	96 e8       	ldi	r25, 0x86	; 134
    5430:	86 2f       	mov	r24, r22
    5432:	70 e0       	ldi	r23, 0x00	; 0
    5434:	60 e0       	ldi	r22, 0x00	; 0
    5436:	2a f0       	brmi	.+10     	; 0x5442 <__floatsisf+0x6c>
    5438:	9a 95       	dec	r25
    543a:	66 0f       	add	r22, r22
    543c:	77 1f       	adc	r23, r23
    543e:	88 1f       	adc	r24, r24
    5440:	da f7       	brpl	.-10     	; 0x5438 <__floatsisf+0x62>
    5442:	88 0f       	add	r24, r24
    5444:	96 95       	lsr	r25
    5446:	87 95       	ror	r24
    5448:	97 f9       	bld	r25, 7
    544a:	08 95       	ret

0000544c <__fp_cmp>:
    544c:	99 0f       	add	r25, r25
    544e:	00 08       	sbc	r0, r0
    5450:	55 0f       	add	r21, r21
    5452:	aa 0b       	sbc	r26, r26
    5454:	e0 e8       	ldi	r30, 0x80	; 128
    5456:	fe ef       	ldi	r31, 0xFE	; 254
    5458:	16 16       	cp	r1, r22
    545a:	17 06       	cpc	r1, r23
    545c:	e8 07       	cpc	r30, r24
    545e:	f9 07       	cpc	r31, r25
    5460:	c0 f0       	brcs	.+48     	; 0x5492 <__fp_cmp+0x46>
    5462:	12 16       	cp	r1, r18
    5464:	13 06       	cpc	r1, r19
    5466:	e4 07       	cpc	r30, r20
    5468:	f5 07       	cpc	r31, r21
    546a:	98 f0       	brcs	.+38     	; 0x5492 <__fp_cmp+0x46>
    546c:	62 1b       	sub	r22, r18
    546e:	73 0b       	sbc	r23, r19
    5470:	84 0b       	sbc	r24, r20
    5472:	95 0b       	sbc	r25, r21
    5474:	39 f4       	brne	.+14     	; 0x5484 <__fp_cmp+0x38>
    5476:	0a 26       	eor	r0, r26
    5478:	61 f0       	breq	.+24     	; 0x5492 <__fp_cmp+0x46>
    547a:	23 2b       	or	r18, r19
    547c:	24 2b       	or	r18, r20
    547e:	25 2b       	or	r18, r21
    5480:	21 f4       	brne	.+8      	; 0x548a <__fp_cmp+0x3e>
    5482:	08 95       	ret
    5484:	0a 26       	eor	r0, r26
    5486:	09 f4       	brne	.+2      	; 0x548a <__fp_cmp+0x3e>
    5488:	a1 40       	sbci	r26, 0x01	; 1
    548a:	a6 95       	lsr	r26
    548c:	8f ef       	ldi	r24, 0xFF	; 255
    548e:	81 1d       	adc	r24, r1
    5490:	81 1d       	adc	r24, r1
    5492:	08 95       	ret

00005494 <__fp_inf>:
    5494:	97 f9       	bld	r25, 7
    5496:	9f 67       	ori	r25, 0x7F	; 127
    5498:	80 e8       	ldi	r24, 0x80	; 128
    549a:	70 e0       	ldi	r23, 0x00	; 0
    549c:	60 e0       	ldi	r22, 0x00	; 0
    549e:	08 95       	ret

000054a0 <__fp_nan>:
    54a0:	9f ef       	ldi	r25, 0xFF	; 255
    54a2:	80 ec       	ldi	r24, 0xC0	; 192
    54a4:	08 95       	ret

000054a6 <__fp_pscA>:
    54a6:	00 24       	eor	r0, r0
    54a8:	0a 94       	dec	r0
    54aa:	16 16       	cp	r1, r22
    54ac:	17 06       	cpc	r1, r23
    54ae:	18 06       	cpc	r1, r24
    54b0:	09 06       	cpc	r0, r25
    54b2:	08 95       	ret

000054b4 <__fp_pscB>:
    54b4:	00 24       	eor	r0, r0
    54b6:	0a 94       	dec	r0
    54b8:	12 16       	cp	r1, r18
    54ba:	13 06       	cpc	r1, r19
    54bc:	14 06       	cpc	r1, r20
    54be:	05 06       	cpc	r0, r21
    54c0:	08 95       	ret

000054c2 <__fp_round>:
    54c2:	09 2e       	mov	r0, r25
    54c4:	03 94       	inc	r0
    54c6:	00 0c       	add	r0, r0
    54c8:	11 f4       	brne	.+4      	; 0x54ce <__fp_round+0xc>
    54ca:	88 23       	and	r24, r24
    54cc:	52 f0       	brmi	.+20     	; 0x54e2 <__fp_round+0x20>
    54ce:	bb 0f       	add	r27, r27
    54d0:	40 f4       	brcc	.+16     	; 0x54e2 <__fp_round+0x20>
    54d2:	bf 2b       	or	r27, r31
    54d4:	11 f4       	brne	.+4      	; 0x54da <__fp_round+0x18>
    54d6:	60 ff       	sbrs	r22, 0
    54d8:	04 c0       	rjmp	.+8      	; 0x54e2 <__fp_round+0x20>
    54da:	6f 5f       	subi	r22, 0xFF	; 255
    54dc:	7f 4f       	sbci	r23, 0xFF	; 255
    54de:	8f 4f       	sbci	r24, 0xFF	; 255
    54e0:	9f 4f       	sbci	r25, 0xFF	; 255
    54e2:	08 95       	ret

000054e4 <__fp_split3>:
    54e4:	57 fd       	sbrc	r21, 7
    54e6:	90 58       	subi	r25, 0x80	; 128
    54e8:	44 0f       	add	r20, r20
    54ea:	55 1f       	adc	r21, r21
    54ec:	59 f0       	breq	.+22     	; 0x5504 <__fp_splitA+0x10>
    54ee:	5f 3f       	cpi	r21, 0xFF	; 255
    54f0:	71 f0       	breq	.+28     	; 0x550e <__fp_splitA+0x1a>
    54f2:	47 95       	ror	r20

000054f4 <__fp_splitA>:
    54f4:	88 0f       	add	r24, r24
    54f6:	97 fb       	bst	r25, 7
    54f8:	99 1f       	adc	r25, r25
    54fa:	61 f0       	breq	.+24     	; 0x5514 <__fp_splitA+0x20>
    54fc:	9f 3f       	cpi	r25, 0xFF	; 255
    54fe:	79 f0       	breq	.+30     	; 0x551e <__fp_splitA+0x2a>
    5500:	87 95       	ror	r24
    5502:	08 95       	ret
    5504:	12 16       	cp	r1, r18
    5506:	13 06       	cpc	r1, r19
    5508:	14 06       	cpc	r1, r20
    550a:	55 1f       	adc	r21, r21
    550c:	f2 cf       	rjmp	.-28     	; 0x54f2 <__fp_split3+0xe>
    550e:	46 95       	lsr	r20
    5510:	f1 df       	rcall	.-30     	; 0x54f4 <__fp_splitA>
    5512:	08 c0       	rjmp	.+16     	; 0x5524 <__fp_splitA+0x30>
    5514:	16 16       	cp	r1, r22
    5516:	17 06       	cpc	r1, r23
    5518:	18 06       	cpc	r1, r24
    551a:	99 1f       	adc	r25, r25
    551c:	f1 cf       	rjmp	.-30     	; 0x5500 <__fp_splitA+0xc>
    551e:	86 95       	lsr	r24
    5520:	71 05       	cpc	r23, r1
    5522:	61 05       	cpc	r22, r1
    5524:	08 94       	sec
    5526:	08 95       	ret

00005528 <__fp_zero>:
    5528:	e8 94       	clt

0000552a <__fp_szero>:
    552a:	bb 27       	eor	r27, r27
    552c:	66 27       	eor	r22, r22
    552e:	77 27       	eor	r23, r23
    5530:	cb 01       	movw	r24, r22
    5532:	97 f9       	bld	r25, 7
    5534:	08 95       	ret

00005536 <__gesf2>:
    5536:	8a df       	rcall	.-236    	; 0x544c <__fp_cmp>
    5538:	08 f4       	brcc	.+2      	; 0x553c <__gesf2+0x6>
    553a:	8f ef       	ldi	r24, 0xFF	; 255
    553c:	08 95       	ret

0000553e <lrint>:
    553e:	da df       	rcall	.-76     	; 0x54f4 <__fp_splitA>
    5540:	a8 f1       	brcs	.+106    	; 0x55ac <lrint+0x6e>
    5542:	9e 57       	subi	r25, 0x7E	; 126
    5544:	a8 f1       	brcs	.+106    	; 0x55b0 <lrint+0x72>
    5546:	98 51       	subi	r25, 0x18	; 24
    5548:	60 f0       	brcs	.+24     	; 0x5562 <lrint+0x24>
    554a:	39 f1       	breq	.+78     	; 0x559a <lrint+0x5c>
    554c:	98 30       	cpi	r25, 0x08	; 8
    554e:	70 f5       	brcc	.+92     	; 0x55ac <lrint+0x6e>
    5550:	09 2e       	mov	r0, r25
    5552:	99 27       	eor	r25, r25
    5554:	66 0f       	add	r22, r22
    5556:	77 1f       	adc	r23, r23
    5558:	88 1f       	adc	r24, r24
    555a:	99 1f       	adc	r25, r25
    555c:	0a 94       	dec	r0
    555e:	d1 f7       	brne	.-12     	; 0x5554 <lrint+0x16>
    5560:	1c c0       	rjmp	.+56     	; 0x559a <lrint+0x5c>
    5562:	bb 27       	eor	r27, r27
    5564:	99 3f       	cpi	r25, 0xF9	; 249
    5566:	4c f4       	brge	.+18     	; 0x557a <lrint+0x3c>
    5568:	b1 11       	cpse	r27, r1
    556a:	b1 e0       	ldi	r27, 0x01	; 1
    556c:	b6 2b       	or	r27, r22
    556e:	67 2f       	mov	r22, r23
    5570:	78 2f       	mov	r23, r24
    5572:	88 27       	eor	r24, r24
    5574:	98 5f       	subi	r25, 0xF8	; 248
    5576:	b1 f7       	brne	.-20     	; 0x5564 <lrint+0x26>
    5578:	08 c0       	rjmp	.+16     	; 0x558a <lrint+0x4c>
    557a:	86 95       	lsr	r24
    557c:	77 95       	ror	r23
    557e:	67 95       	ror	r22
    5580:	b7 95       	ror	r27
    5582:	08 f4       	brcc	.+2      	; 0x5586 <lrint+0x48>
    5584:	b1 60       	ori	r27, 0x01	; 1
    5586:	93 95       	inc	r25
    5588:	c1 f7       	brne	.-16     	; 0x557a <lrint+0x3c>
    558a:	bb 0f       	add	r27, r27
    558c:	30 f4       	brcc	.+12     	; 0x559a <lrint+0x5c>
    558e:	11 f4       	brne	.+4      	; 0x5594 <lrint+0x56>
    5590:	60 ff       	sbrs	r22, 0
    5592:	03 c0       	rjmp	.+6      	; 0x559a <lrint+0x5c>
    5594:	6f 5f       	subi	r22, 0xFF	; 255
    5596:	7f 4f       	sbci	r23, 0xFF	; 255
    5598:	8f 4f       	sbci	r24, 0xFF	; 255
    559a:	3e f4       	brtc	.+14     	; 0x55aa <lrint+0x6c>
    559c:	90 95       	com	r25
    559e:	80 95       	com	r24
    55a0:	70 95       	com	r23
    55a2:	61 95       	neg	r22
    55a4:	7f 4f       	sbci	r23, 0xFF	; 255
    55a6:	8f 4f       	sbci	r24, 0xFF	; 255
    55a8:	9f 4f       	sbci	r25, 0xFF	; 255
    55aa:	08 95       	ret
    55ac:	68 94       	set
    55ae:	bd cf       	rjmp	.-134    	; 0x552a <__fp_szero>
    55b0:	bb cf       	rjmp	.-138    	; 0x5528 <__fp_zero>

000055b2 <__mulsf3>:
    55b2:	0b d0       	rcall	.+22     	; 0x55ca <__mulsf3x>
    55b4:	86 cf       	rjmp	.-244    	; 0x54c2 <__fp_round>
    55b6:	77 df       	rcall	.-274    	; 0x54a6 <__fp_pscA>
    55b8:	28 f0       	brcs	.+10     	; 0x55c4 <__mulsf3+0x12>
    55ba:	7c df       	rcall	.-264    	; 0x54b4 <__fp_pscB>
    55bc:	18 f0       	brcs	.+6      	; 0x55c4 <__mulsf3+0x12>
    55be:	95 23       	and	r25, r21
    55c0:	09 f0       	breq	.+2      	; 0x55c4 <__mulsf3+0x12>
    55c2:	68 cf       	rjmp	.-304    	; 0x5494 <__fp_inf>
    55c4:	6d cf       	rjmp	.-294    	; 0x54a0 <__fp_nan>
    55c6:	11 24       	eor	r1, r1
    55c8:	b0 cf       	rjmp	.-160    	; 0x552a <__fp_szero>

000055ca <__mulsf3x>:
    55ca:	8c df       	rcall	.-232    	; 0x54e4 <__fp_split3>
    55cc:	a0 f3       	brcs	.-24     	; 0x55b6 <__mulsf3+0x4>

000055ce <__mulsf3_pse>:
    55ce:	95 9f       	mul	r25, r21
    55d0:	d1 f3       	breq	.-12     	; 0x55c6 <__mulsf3+0x14>
    55d2:	95 0f       	add	r25, r21
    55d4:	50 e0       	ldi	r21, 0x00	; 0
    55d6:	55 1f       	adc	r21, r21
    55d8:	62 9f       	mul	r22, r18
    55da:	f0 01       	movw	r30, r0
    55dc:	72 9f       	mul	r23, r18
    55de:	bb 27       	eor	r27, r27
    55e0:	f0 0d       	add	r31, r0
    55e2:	b1 1d       	adc	r27, r1
    55e4:	63 9f       	mul	r22, r19
    55e6:	aa 27       	eor	r26, r26
    55e8:	f0 0d       	add	r31, r0
    55ea:	b1 1d       	adc	r27, r1
    55ec:	aa 1f       	adc	r26, r26
    55ee:	64 9f       	mul	r22, r20
    55f0:	66 27       	eor	r22, r22
    55f2:	b0 0d       	add	r27, r0
    55f4:	a1 1d       	adc	r26, r1
    55f6:	66 1f       	adc	r22, r22
    55f8:	82 9f       	mul	r24, r18
    55fa:	22 27       	eor	r18, r18
    55fc:	b0 0d       	add	r27, r0
    55fe:	a1 1d       	adc	r26, r1
    5600:	62 1f       	adc	r22, r18
    5602:	73 9f       	mul	r23, r19
    5604:	b0 0d       	add	r27, r0
    5606:	a1 1d       	adc	r26, r1
    5608:	62 1f       	adc	r22, r18
    560a:	83 9f       	mul	r24, r19
    560c:	a0 0d       	add	r26, r0
    560e:	61 1d       	adc	r22, r1
    5610:	22 1f       	adc	r18, r18
    5612:	74 9f       	mul	r23, r20
    5614:	33 27       	eor	r19, r19
    5616:	a0 0d       	add	r26, r0
    5618:	61 1d       	adc	r22, r1
    561a:	23 1f       	adc	r18, r19
    561c:	84 9f       	mul	r24, r20
    561e:	60 0d       	add	r22, r0
    5620:	21 1d       	adc	r18, r1
    5622:	82 2f       	mov	r24, r18
    5624:	76 2f       	mov	r23, r22
    5626:	6a 2f       	mov	r22, r26
    5628:	11 24       	eor	r1, r1
    562a:	9f 57       	subi	r25, 0x7F	; 127
    562c:	50 40       	sbci	r21, 0x00	; 0
    562e:	8a f0       	brmi	.+34     	; 0x5652 <__mulsf3_pse+0x84>
    5630:	e1 f0       	breq	.+56     	; 0x566a <__mulsf3_pse+0x9c>
    5632:	88 23       	and	r24, r24
    5634:	4a f0       	brmi	.+18     	; 0x5648 <__mulsf3_pse+0x7a>
    5636:	ee 0f       	add	r30, r30
    5638:	ff 1f       	adc	r31, r31
    563a:	bb 1f       	adc	r27, r27
    563c:	66 1f       	adc	r22, r22
    563e:	77 1f       	adc	r23, r23
    5640:	88 1f       	adc	r24, r24
    5642:	91 50       	subi	r25, 0x01	; 1
    5644:	50 40       	sbci	r21, 0x00	; 0
    5646:	a9 f7       	brne	.-22     	; 0x5632 <__mulsf3_pse+0x64>
    5648:	9e 3f       	cpi	r25, 0xFE	; 254
    564a:	51 05       	cpc	r21, r1
    564c:	70 f0       	brcs	.+28     	; 0x566a <__mulsf3_pse+0x9c>
    564e:	22 cf       	rjmp	.-444    	; 0x5494 <__fp_inf>
    5650:	6c cf       	rjmp	.-296    	; 0x552a <__fp_szero>
    5652:	5f 3f       	cpi	r21, 0xFF	; 255
    5654:	ec f3       	brlt	.-6      	; 0x5650 <__mulsf3_pse+0x82>
    5656:	98 3e       	cpi	r25, 0xE8	; 232
    5658:	dc f3       	brlt	.-10     	; 0x5650 <__mulsf3_pse+0x82>
    565a:	86 95       	lsr	r24
    565c:	77 95       	ror	r23
    565e:	67 95       	ror	r22
    5660:	b7 95       	ror	r27
    5662:	f7 95       	ror	r31
    5664:	e7 95       	ror	r30
    5666:	9f 5f       	subi	r25, 0xFF	; 255
    5668:	c1 f7       	brne	.-16     	; 0x565a <__mulsf3_pse+0x8c>
    566a:	fe 2b       	or	r31, r30
    566c:	88 0f       	add	r24, r24
    566e:	91 1d       	adc	r25, r1
    5670:	96 95       	lsr	r25
    5672:	87 95       	ror	r24
    5674:	97 f9       	bld	r25, 7
    5676:	08 95       	ret

00005678 <pow>:
    5678:	fa 01       	movw	r30, r20
    567a:	ee 0f       	add	r30, r30
    567c:	ff 1f       	adc	r31, r31
    567e:	30 96       	adiw	r30, 0x00	; 0
    5680:	21 05       	cpc	r18, r1
    5682:	31 05       	cpc	r19, r1
    5684:	99 f1       	breq	.+102    	; 0x56ec <pow+0x74>
    5686:	61 15       	cp	r22, r1
    5688:	71 05       	cpc	r23, r1
    568a:	61 f4       	brne	.+24     	; 0x56a4 <pow+0x2c>
    568c:	80 38       	cpi	r24, 0x80	; 128
    568e:	bf e3       	ldi	r27, 0x3F	; 63
    5690:	9b 07       	cpc	r25, r27
    5692:	49 f1       	breq	.+82     	; 0x56e6 <pow+0x6e>
    5694:	68 94       	set
    5696:	90 38       	cpi	r25, 0x80	; 128
    5698:	81 05       	cpc	r24, r1
    569a:	61 f0       	breq	.+24     	; 0x56b4 <pow+0x3c>
    569c:	80 38       	cpi	r24, 0x80	; 128
    569e:	bf ef       	ldi	r27, 0xFF	; 255
    56a0:	9b 07       	cpc	r25, r27
    56a2:	41 f0       	breq	.+16     	; 0x56b4 <pow+0x3c>
    56a4:	99 23       	and	r25, r25
    56a6:	42 f5       	brpl	.+80     	; 0x56f8 <pow+0x80>
    56a8:	ff 3f       	cpi	r31, 0xFF	; 255
    56aa:	e1 05       	cpc	r30, r1
    56ac:	31 05       	cpc	r19, r1
    56ae:	21 05       	cpc	r18, r1
    56b0:	11 f1       	breq	.+68     	; 0x56f6 <pow+0x7e>
    56b2:	e8 94       	clt
    56b4:	08 94       	sec
    56b6:	e7 95       	ror	r30
    56b8:	d9 01       	movw	r26, r18
    56ba:	aa 23       	and	r26, r26
    56bc:	29 f4       	brne	.+10     	; 0x56c8 <pow+0x50>
    56be:	ab 2f       	mov	r26, r27
    56c0:	be 2f       	mov	r27, r30
    56c2:	f8 5f       	subi	r31, 0xF8	; 248
    56c4:	d0 f3       	brcs	.-12     	; 0x56ba <pow+0x42>
    56c6:	10 c0       	rjmp	.+32     	; 0x56e8 <pow+0x70>
    56c8:	ff 5f       	subi	r31, 0xFF	; 255
    56ca:	70 f4       	brcc	.+28     	; 0x56e8 <pow+0x70>
    56cc:	a6 95       	lsr	r26
    56ce:	e0 f7       	brcc	.-8      	; 0x56c8 <pow+0x50>
    56d0:	f7 39       	cpi	r31, 0x97	; 151
    56d2:	50 f0       	brcs	.+20     	; 0x56e8 <pow+0x70>
    56d4:	19 f0       	breq	.+6      	; 0x56dc <pow+0x64>
    56d6:	ff 3a       	cpi	r31, 0xAF	; 175
    56d8:	38 f4       	brcc	.+14     	; 0x56e8 <pow+0x70>
    56da:	9f 77       	andi	r25, 0x7F	; 127
    56dc:	9f 93       	push	r25
    56de:	0c d0       	rcall	.+24     	; 0x56f8 <pow+0x80>
    56e0:	0f 90       	pop	r0
    56e2:	07 fc       	sbrc	r0, 7
    56e4:	90 58       	subi	r25, 0x80	; 128
    56e6:	08 95       	ret
    56e8:	3e f0       	brts	.+14     	; 0x56f8 <pow+0x80>
    56ea:	da ce       	rjmp	.-588    	; 0x54a0 <__fp_nan>
    56ec:	60 e0       	ldi	r22, 0x00	; 0
    56ee:	70 e0       	ldi	r23, 0x00	; 0
    56f0:	80 e8       	ldi	r24, 0x80	; 128
    56f2:	9f e3       	ldi	r25, 0x3F	; 63
    56f4:	08 95       	ret
    56f6:	4f e7       	ldi	r20, 0x7F	; 127
    56f8:	9f 77       	andi	r25, 0x7F	; 127
    56fa:	5f 93       	push	r21
    56fc:	4f 93       	push	r20
    56fe:	3f 93       	push	r19
    5700:	2f 93       	push	r18
    5702:	9e d0       	rcall	.+316    	; 0x5840 <log>
    5704:	2f 91       	pop	r18
    5706:	3f 91       	pop	r19
    5708:	4f 91       	pop	r20
    570a:	5f 91       	pop	r21
    570c:	52 df       	rcall	.-348    	; 0x55b2 <__mulsf3>
    570e:	05 c0       	rjmp	.+10     	; 0x571a <exp>
    5710:	19 f4       	brne	.+6      	; 0x5718 <pow+0xa0>
    5712:	0e f0       	brts	.+2      	; 0x5716 <pow+0x9e>
    5714:	bf ce       	rjmp	.-642    	; 0x5494 <__fp_inf>
    5716:	08 cf       	rjmp	.-496    	; 0x5528 <__fp_zero>
    5718:	c3 ce       	rjmp	.-634    	; 0x54a0 <__fp_nan>

0000571a <exp>:
    571a:	ec de       	rcall	.-552    	; 0x54f4 <__fp_splitA>
    571c:	c8 f3       	brcs	.-14     	; 0x5710 <pow+0x98>
    571e:	96 38       	cpi	r25, 0x86	; 134
    5720:	c0 f7       	brcc	.-16     	; 0x5712 <pow+0x9a>
    5722:	07 f8       	bld	r0, 7
    5724:	0f 92       	push	r0
    5726:	e8 94       	clt
    5728:	2b e3       	ldi	r18, 0x3B	; 59
    572a:	3a ea       	ldi	r19, 0xAA	; 170
    572c:	48 eb       	ldi	r20, 0xB8	; 184
    572e:	5f e7       	ldi	r21, 0x7F	; 127
    5730:	4e df       	rcall	.-356    	; 0x55ce <__mulsf3_pse>
    5732:	0f 92       	push	r0
    5734:	0f 92       	push	r0
    5736:	0f 92       	push	r0
    5738:	4d b7       	in	r20, 0x3d	; 61
    573a:	5e b7       	in	r21, 0x3e	; 62
    573c:	0f 92       	push	r0
    573e:	c0 d0       	rcall	.+384    	; 0x58c0 <modf>
    5740:	e8 ec       	ldi	r30, 0xC8	; 200
    5742:	f0 e0       	ldi	r31, 0x00	; 0
    5744:	16 d0       	rcall	.+44     	; 0x5772 <__fp_powser>
    5746:	4f 91       	pop	r20
    5748:	5f 91       	pop	r21
    574a:	ef 91       	pop	r30
    574c:	ff 91       	pop	r31
    574e:	e5 95       	asr	r30
    5750:	ee 1f       	adc	r30, r30
    5752:	ff 1f       	adc	r31, r31
    5754:	49 f0       	breq	.+18     	; 0x5768 <exp+0x4e>
    5756:	fe 57       	subi	r31, 0x7E	; 126
    5758:	e0 68       	ori	r30, 0x80	; 128
    575a:	44 27       	eor	r20, r20
    575c:	ee 0f       	add	r30, r30
    575e:	44 1f       	adc	r20, r20
    5760:	fa 95       	dec	r31
    5762:	e1 f7       	brne	.-8      	; 0x575c <exp+0x42>
    5764:	41 95       	neg	r20
    5766:	55 0b       	sbc	r21, r21
    5768:	32 d0       	rcall	.+100    	; 0x57ce <ldexp>
    576a:	0f 90       	pop	r0
    576c:	07 fe       	sbrs	r0, 7
    576e:	26 c0       	rjmp	.+76     	; 0x57bc <inverse>
    5770:	08 95       	ret

00005772 <__fp_powser>:
    5772:	df 93       	push	r29
    5774:	cf 93       	push	r28
    5776:	1f 93       	push	r17
    5778:	0f 93       	push	r16
    577a:	ff 92       	push	r15
    577c:	ef 92       	push	r14
    577e:	df 92       	push	r13
    5780:	7b 01       	movw	r14, r22
    5782:	8c 01       	movw	r16, r24
    5784:	68 94       	set
    5786:	05 c0       	rjmp	.+10     	; 0x5792 <__fp_powser+0x20>
    5788:	da 2e       	mov	r13, r26
    578a:	ef 01       	movw	r28, r30
    578c:	1e df       	rcall	.-452    	; 0x55ca <__mulsf3x>
    578e:	fe 01       	movw	r30, r28
    5790:	e8 94       	clt
    5792:	a5 91       	lpm	r26, Z+
    5794:	25 91       	lpm	r18, Z+
    5796:	35 91       	lpm	r19, Z+
    5798:	45 91       	lpm	r20, Z+
    579a:	55 91       	lpm	r21, Z+
    579c:	ae f3       	brts	.-22     	; 0x5788 <__fp_powser+0x16>
    579e:	ef 01       	movw	r28, r30
    57a0:	28 dd       	rcall	.-1456   	; 0x51f2 <__addsf3x>
    57a2:	fe 01       	movw	r30, r28
    57a4:	97 01       	movw	r18, r14
    57a6:	a8 01       	movw	r20, r16
    57a8:	da 94       	dec	r13
    57aa:	79 f7       	brne	.-34     	; 0x578a <__fp_powser+0x18>
    57ac:	df 90       	pop	r13
    57ae:	ef 90       	pop	r14
    57b0:	ff 90       	pop	r15
    57b2:	0f 91       	pop	r16
    57b4:	1f 91       	pop	r17
    57b6:	cf 91       	pop	r28
    57b8:	df 91       	pop	r29
    57ba:	08 95       	ret

000057bc <inverse>:
    57bc:	9b 01       	movw	r18, r22
    57be:	ac 01       	movw	r20, r24
    57c0:	60 e0       	ldi	r22, 0x00	; 0
    57c2:	70 e0       	ldi	r23, 0x00	; 0
    57c4:	80 e8       	ldi	r24, 0x80	; 128
    57c6:	9f e3       	ldi	r25, 0x3F	; 63
    57c8:	6b cd       	rjmp	.-1322   	; 0x52a0 <__divsf3>
    57ca:	64 ce       	rjmp	.-824    	; 0x5494 <__fp_inf>
    57cc:	ac c0       	rjmp	.+344    	; 0x5926 <__fp_mpack>

000057ce <ldexp>:
    57ce:	92 de       	rcall	.-732    	; 0x54f4 <__fp_splitA>
    57d0:	e8 f3       	brcs	.-6      	; 0x57cc <inverse+0x10>
    57d2:	99 23       	and	r25, r25
    57d4:	d9 f3       	breq	.-10     	; 0x57cc <inverse+0x10>
    57d6:	94 0f       	add	r25, r20
    57d8:	51 1d       	adc	r21, r1
    57da:	bb f3       	brvs	.-18     	; 0x57ca <inverse+0xe>
    57dc:	91 50       	subi	r25, 0x01	; 1
    57de:	50 40       	sbci	r21, 0x00	; 0
    57e0:	94 f0       	brlt	.+36     	; 0x5806 <ldexp+0x38>
    57e2:	59 f0       	breq	.+22     	; 0x57fa <ldexp+0x2c>
    57e4:	88 23       	and	r24, r24
    57e6:	32 f0       	brmi	.+12     	; 0x57f4 <ldexp+0x26>
    57e8:	66 0f       	add	r22, r22
    57ea:	77 1f       	adc	r23, r23
    57ec:	88 1f       	adc	r24, r24
    57ee:	91 50       	subi	r25, 0x01	; 1
    57f0:	50 40       	sbci	r21, 0x00	; 0
    57f2:	c1 f7       	brne	.-16     	; 0x57e4 <ldexp+0x16>
    57f4:	9e 3f       	cpi	r25, 0xFE	; 254
    57f6:	51 05       	cpc	r21, r1
    57f8:	44 f7       	brge	.-48     	; 0x57ca <inverse+0xe>
    57fa:	88 0f       	add	r24, r24
    57fc:	91 1d       	adc	r25, r1
    57fe:	96 95       	lsr	r25
    5800:	87 95       	ror	r24
    5802:	97 f9       	bld	r25, 7
    5804:	08 95       	ret
    5806:	5f 3f       	cpi	r21, 0xFF	; 255
    5808:	ac f0       	brlt	.+42     	; 0x5834 <ldexp+0x66>
    580a:	98 3e       	cpi	r25, 0xE8	; 232
    580c:	9c f0       	brlt	.+38     	; 0x5834 <ldexp+0x66>
    580e:	bb 27       	eor	r27, r27
    5810:	86 95       	lsr	r24
    5812:	77 95       	ror	r23
    5814:	67 95       	ror	r22
    5816:	b7 95       	ror	r27
    5818:	08 f4       	brcc	.+2      	; 0x581c <ldexp+0x4e>
    581a:	b1 60       	ori	r27, 0x01	; 1
    581c:	93 95       	inc	r25
    581e:	c1 f7       	brne	.-16     	; 0x5810 <ldexp+0x42>
    5820:	bb 0f       	add	r27, r27
    5822:	58 f7       	brcc	.-42     	; 0x57fa <ldexp+0x2c>
    5824:	11 f4       	brne	.+4      	; 0x582a <ldexp+0x5c>
    5826:	60 ff       	sbrs	r22, 0
    5828:	e8 cf       	rjmp	.-48     	; 0x57fa <ldexp+0x2c>
    582a:	6f 5f       	subi	r22, 0xFF	; 255
    582c:	7f 4f       	sbci	r23, 0xFF	; 255
    582e:	8f 4f       	sbci	r24, 0xFF	; 255
    5830:	9f 4f       	sbci	r25, 0xFF	; 255
    5832:	e3 cf       	rjmp	.-58     	; 0x57fa <ldexp+0x2c>
    5834:	7a ce       	rjmp	.-780    	; 0x552a <__fp_szero>
    5836:	0e f0       	brts	.+2      	; 0x583a <ldexp+0x6c>
    5838:	76 c0       	rjmp	.+236    	; 0x5926 <__fp_mpack>
    583a:	32 ce       	rjmp	.-924    	; 0x54a0 <__fp_nan>
    583c:	68 94       	set
    583e:	2a ce       	rjmp	.-940    	; 0x5494 <__fp_inf>

00005840 <log>:
    5840:	59 de       	rcall	.-846    	; 0x54f4 <__fp_splitA>
    5842:	c8 f3       	brcs	.-14     	; 0x5836 <ldexp+0x68>
    5844:	99 23       	and	r25, r25
    5846:	d1 f3       	breq	.-12     	; 0x583c <ldexp+0x6e>
    5848:	c6 f3       	brts	.-16     	; 0x583a <ldexp+0x6c>
    584a:	df 93       	push	r29
    584c:	cf 93       	push	r28
    584e:	1f 93       	push	r17
    5850:	0f 93       	push	r16
    5852:	ff 92       	push	r15
    5854:	c9 2f       	mov	r28, r25
    5856:	dd 27       	eor	r29, r29
    5858:	88 23       	and	r24, r24
    585a:	2a f0       	brmi	.+10     	; 0x5866 <log+0x26>
    585c:	21 97       	sbiw	r28, 0x01	; 1
    585e:	66 0f       	add	r22, r22
    5860:	77 1f       	adc	r23, r23
    5862:	88 1f       	adc	r24, r24
    5864:	da f7       	brpl	.-10     	; 0x585c <log+0x1c>
    5866:	20 e0       	ldi	r18, 0x00	; 0
    5868:	30 e0       	ldi	r19, 0x00	; 0
    586a:	40 e8       	ldi	r20, 0x80	; 128
    586c:	5f eb       	ldi	r21, 0xBF	; 191
    586e:	9f e3       	ldi	r25, 0x3F	; 63
    5870:	88 39       	cpi	r24, 0x98	; 152
    5872:	20 f0       	brcs	.+8      	; 0x587c <log+0x3c>
    5874:	80 3e       	cpi	r24, 0xE0	; 224
    5876:	30 f0       	brcs	.+12     	; 0x5884 <log+0x44>
    5878:	21 96       	adiw	r28, 0x01	; 1
    587a:	8f 77       	andi	r24, 0x7F	; 127
    587c:	a9 dc       	rcall	.-1710   	; 0x51d0 <__addsf3>
    587e:	e0 ef       	ldi	r30, 0xF0	; 240
    5880:	f0 e0       	ldi	r31, 0x00	; 0
    5882:	03 c0       	rjmp	.+6      	; 0x588a <log+0x4a>
    5884:	a5 dc       	rcall	.-1718   	; 0x51d0 <__addsf3>
    5886:	ed e1       	ldi	r30, 0x1D	; 29
    5888:	f1 e0       	ldi	r31, 0x01	; 1
    588a:	73 df       	rcall	.-282    	; 0x5772 <__fp_powser>
    588c:	8b 01       	movw	r16, r22
    588e:	be 01       	movw	r22, r28
    5890:	ec 01       	movw	r28, r24
    5892:	fb 2e       	mov	r15, r27
    5894:	6f 57       	subi	r22, 0x7F	; 127
    5896:	71 09       	sbc	r23, r1
    5898:	75 95       	asr	r23
    589a:	77 1f       	adc	r23, r23
    589c:	88 0b       	sbc	r24, r24
    589e:	99 0b       	sbc	r25, r25
    58a0:	9a dd       	rcall	.-1228   	; 0x53d6 <__floatsisf>
    58a2:	28 e1       	ldi	r18, 0x18	; 24
    58a4:	32 e7       	ldi	r19, 0x72	; 114
    58a6:	41 e3       	ldi	r20, 0x31	; 49
    58a8:	5f e3       	ldi	r21, 0x3F	; 63
    58aa:	8f de       	rcall	.-738    	; 0x55ca <__mulsf3x>
    58ac:	af 2d       	mov	r26, r15
    58ae:	98 01       	movw	r18, r16
    58b0:	ae 01       	movw	r20, r28
    58b2:	ff 90       	pop	r15
    58b4:	0f 91       	pop	r16
    58b6:	1f 91       	pop	r17
    58b8:	cf 91       	pop	r28
    58ba:	df 91       	pop	r29
    58bc:	9a dc       	rcall	.-1740   	; 0x51f2 <__addsf3x>
    58be:	01 ce       	rjmp	.-1022   	; 0x54c2 <__fp_round>

000058c0 <modf>:
    58c0:	fa 01       	movw	r30, r20
    58c2:	dc 01       	movw	r26, r24
    58c4:	aa 0f       	add	r26, r26
    58c6:	bb 1f       	adc	r27, r27
    58c8:	9b 01       	movw	r18, r22
    58ca:	ac 01       	movw	r20, r24
    58cc:	bf 57       	subi	r27, 0x7F	; 127
    58ce:	28 f4       	brcc	.+10     	; 0x58da <modf+0x1a>
    58d0:	22 27       	eor	r18, r18
    58d2:	33 27       	eor	r19, r19
    58d4:	44 27       	eor	r20, r20
    58d6:	50 78       	andi	r21, 0x80	; 128
    58d8:	1f c0       	rjmp	.+62     	; 0x5918 <modf+0x58>
    58da:	b7 51       	subi	r27, 0x17	; 23
    58dc:	88 f4       	brcc	.+34     	; 0x5900 <modf+0x40>
    58de:	ab 2f       	mov	r26, r27
    58e0:	00 24       	eor	r0, r0
    58e2:	46 95       	lsr	r20
    58e4:	37 95       	ror	r19
    58e6:	27 95       	ror	r18
    58e8:	01 1c       	adc	r0, r1
    58ea:	a3 95       	inc	r26
    58ec:	d2 f3       	brmi	.-12     	; 0x58e2 <modf+0x22>
    58ee:	00 20       	and	r0, r0
    58f0:	69 f0       	breq	.+26     	; 0x590c <modf+0x4c>
    58f2:	22 0f       	add	r18, r18
    58f4:	33 1f       	adc	r19, r19
    58f6:	44 1f       	adc	r20, r20
    58f8:	b3 95       	inc	r27
    58fa:	da f3       	brmi	.-10     	; 0x58f2 <modf+0x32>
    58fc:	0d d0       	rcall	.+26     	; 0x5918 <modf+0x58>
    58fe:	67 cc       	rjmp	.-1842   	; 0x51ce <__subsf3>
    5900:	61 30       	cpi	r22, 0x01	; 1
    5902:	71 05       	cpc	r23, r1
    5904:	a0 e8       	ldi	r26, 0x80	; 128
    5906:	8a 07       	cpc	r24, r26
    5908:	b9 46       	sbci	r27, 0x69	; 105
    590a:	30 f4       	brcc	.+12     	; 0x5918 <modf+0x58>
    590c:	9b 01       	movw	r18, r22
    590e:	ac 01       	movw	r20, r24
    5910:	66 27       	eor	r22, r22
    5912:	77 27       	eor	r23, r23
    5914:	88 27       	eor	r24, r24
    5916:	90 78       	andi	r25, 0x80	; 128
    5918:	30 96       	adiw	r30, 0x00	; 0
    591a:	21 f0       	breq	.+8      	; 0x5924 <modf+0x64>
    591c:	20 83       	st	Z, r18
    591e:	31 83       	std	Z+1, r19	; 0x01
    5920:	42 83       	std	Z+2, r20	; 0x02
    5922:	53 83       	std	Z+3, r21	; 0x03
    5924:	08 95       	ret

00005926 <__fp_mpack>:
    5926:	9f 3f       	cpi	r25, 0xFF	; 255
    5928:	31 f0       	breq	.+12     	; 0x5936 <__fp_mpack_finite+0xc>

0000592a <__fp_mpack_finite>:
    592a:	91 50       	subi	r25, 0x01	; 1
    592c:	20 f4       	brcc	.+8      	; 0x5936 <__fp_mpack_finite+0xc>
    592e:	87 95       	ror	r24
    5930:	77 95       	ror	r23
    5932:	67 95       	ror	r22
    5934:	b7 95       	ror	r27
    5936:	88 0f       	add	r24, r24
    5938:	91 1d       	adc	r25, r1
    593a:	96 95       	lsr	r25
    593c:	87 95       	ror	r24
    593e:	97 f9       	bld	r25, 7
    5940:	08 95       	ret

00005942 <vfprintf>:
    5942:	a1 e1       	ldi	r26, 0x11	; 17
    5944:	b0 e0       	ldi	r27, 0x00	; 0
    5946:	e6 ea       	ldi	r30, 0xA6	; 166
    5948:	fc e2       	ldi	r31, 0x2C	; 44
    594a:	b7 c3       	rjmp	.+1902   	; 0x60ba <__prologue_saves__>
    594c:	3c 01       	movw	r6, r24
    594e:	7f 87       	std	Y+15, r23	; 0x0f
    5950:	6e 87       	std	Y+14, r22	; 0x0e
    5952:	6a 01       	movw	r12, r20
    5954:	fc 01       	movw	r30, r24
    5956:	17 82       	std	Z+7, r1	; 0x07
    5958:	16 82       	std	Z+6, r1	; 0x06
    595a:	83 81       	ldd	r24, Z+3	; 0x03
    595c:	81 fd       	sbrc	r24, 1
    595e:	03 c0       	rjmp	.+6      	; 0x5966 <vfprintf+0x24>
    5960:	6f ef       	ldi	r22, 0xFF	; 255
    5962:	7f ef       	ldi	r23, 0xFF	; 255
    5964:	52 c3       	rjmp	.+1700   	; 0x600a <vfprintf+0x6c8>
    5966:	9e 01       	movw	r18, r28
    5968:	2f 5f       	subi	r18, 0xFF	; 255
    596a:	3f 4f       	sbci	r19, 0xFF	; 255
    596c:	39 8b       	std	Y+17, r19	; 0x11
    596e:	28 8b       	std	Y+16, r18	; 0x10
    5970:	f3 01       	movw	r30, r6
    5972:	23 81       	ldd	r18, Z+3	; 0x03
    5974:	ee 85       	ldd	r30, Y+14	; 0x0e
    5976:	ff 85       	ldd	r31, Y+15	; 0x0f
    5978:	23 fd       	sbrc	r18, 3
    597a:	85 91       	lpm	r24, Z+
    597c:	23 ff       	sbrs	r18, 3
    597e:	81 91       	ld	r24, Z+
    5980:	ff 87       	std	Y+15, r31	; 0x0f
    5982:	ee 87       	std	Y+14, r30	; 0x0e
    5984:	88 23       	and	r24, r24
    5986:	09 f4       	brne	.+2      	; 0x598a <vfprintf+0x48>
    5988:	3d c3       	rjmp	.+1658   	; 0x6004 <vfprintf+0x6c2>
    598a:	85 32       	cpi	r24, 0x25	; 37
    598c:	51 f4       	brne	.+20     	; 0x59a2 <vfprintf+0x60>
    598e:	ee 85       	ldd	r30, Y+14	; 0x0e
    5990:	ff 85       	ldd	r31, Y+15	; 0x0f
    5992:	23 fd       	sbrc	r18, 3
    5994:	85 91       	lpm	r24, Z+
    5996:	23 ff       	sbrs	r18, 3
    5998:	81 91       	ld	r24, Z+
    599a:	ff 87       	std	Y+15, r31	; 0x0f
    599c:	ee 87       	std	Y+14, r30	; 0x0e
    599e:	85 32       	cpi	r24, 0x25	; 37
    59a0:	21 f4       	brne	.+8      	; 0x59aa <vfprintf+0x68>
    59a2:	90 e0       	ldi	r25, 0x00	; 0
    59a4:	b3 01       	movw	r22, r6
    59a6:	20 d6       	rcall	.+3136   	; 0x65e8 <fputc>
    59a8:	e3 cf       	rjmp	.-58     	; 0x5970 <vfprintf+0x2e>
    59aa:	98 2f       	mov	r25, r24
    59ac:	10 e0       	ldi	r17, 0x00	; 0
    59ae:	88 24       	eor	r8, r8
    59b0:	99 24       	eor	r9, r9
    59b2:	10 32       	cpi	r17, 0x20	; 32
    59b4:	b0 f4       	brcc	.+44     	; 0x59e2 <vfprintf+0xa0>
    59b6:	9b 32       	cpi	r25, 0x2B	; 43
    59b8:	69 f0       	breq	.+26     	; 0x59d4 <vfprintf+0x92>
    59ba:	9c 32       	cpi	r25, 0x2C	; 44
    59bc:	28 f4       	brcc	.+10     	; 0x59c8 <vfprintf+0x86>
    59be:	90 32       	cpi	r25, 0x20	; 32
    59c0:	51 f0       	breq	.+20     	; 0x59d6 <vfprintf+0x94>
    59c2:	93 32       	cpi	r25, 0x23	; 35
    59c4:	71 f4       	brne	.+28     	; 0x59e2 <vfprintf+0xa0>
    59c6:	0b c0       	rjmp	.+22     	; 0x59de <vfprintf+0x9c>
    59c8:	9d 32       	cpi	r25, 0x2D	; 45
    59ca:	39 f0       	breq	.+14     	; 0x59da <vfprintf+0x98>
    59cc:	90 33       	cpi	r25, 0x30	; 48
    59ce:	49 f4       	brne	.+18     	; 0x59e2 <vfprintf+0xa0>
    59d0:	11 60       	ori	r17, 0x01	; 1
    59d2:	28 c0       	rjmp	.+80     	; 0x5a24 <vfprintf+0xe2>
    59d4:	12 60       	ori	r17, 0x02	; 2
    59d6:	14 60       	ori	r17, 0x04	; 4
    59d8:	25 c0       	rjmp	.+74     	; 0x5a24 <vfprintf+0xe2>
    59da:	18 60       	ori	r17, 0x08	; 8
    59dc:	23 c0       	rjmp	.+70     	; 0x5a24 <vfprintf+0xe2>
    59de:	10 61       	ori	r17, 0x10	; 16
    59e0:	21 c0       	rjmp	.+66     	; 0x5a24 <vfprintf+0xe2>
    59e2:	17 fd       	sbrc	r17, 7
    59e4:	2a c0       	rjmp	.+84     	; 0x5a3a <vfprintf+0xf8>
    59e6:	89 2f       	mov	r24, r25
    59e8:	80 53       	subi	r24, 0x30	; 48
    59ea:	8a 30       	cpi	r24, 0x0A	; 10
    59ec:	78 f4       	brcc	.+30     	; 0x5a0c <vfprintf+0xca>
    59ee:	16 ff       	sbrs	r17, 6
    59f0:	06 c0       	rjmp	.+12     	; 0x59fe <vfprintf+0xbc>
    59f2:	fa e0       	ldi	r31, 0x0A	; 10
    59f4:	9f 9e       	mul	r9, r31
    59f6:	90 2c       	mov	r9, r0
    59f8:	11 24       	eor	r1, r1
    59fa:	98 0e       	add	r9, r24
    59fc:	13 c0       	rjmp	.+38     	; 0x5a24 <vfprintf+0xe2>
    59fe:	3a e0       	ldi	r19, 0x0A	; 10
    5a00:	83 9e       	mul	r8, r19
    5a02:	80 2c       	mov	r8, r0
    5a04:	11 24       	eor	r1, r1
    5a06:	88 0e       	add	r8, r24
    5a08:	10 62       	ori	r17, 0x20	; 32
    5a0a:	0c c0       	rjmp	.+24     	; 0x5a24 <vfprintf+0xe2>
    5a0c:	9e 32       	cpi	r25, 0x2E	; 46
    5a0e:	21 f4       	brne	.+8      	; 0x5a18 <vfprintf+0xd6>
    5a10:	16 fd       	sbrc	r17, 6
    5a12:	f8 c2       	rjmp	.+1520   	; 0x6004 <vfprintf+0x6c2>
    5a14:	10 64       	ori	r17, 0x40	; 64
    5a16:	06 c0       	rjmp	.+12     	; 0x5a24 <vfprintf+0xe2>
    5a18:	9c 36       	cpi	r25, 0x6C	; 108
    5a1a:	11 f4       	brne	.+4      	; 0x5a20 <vfprintf+0xde>
    5a1c:	10 68       	ori	r17, 0x80	; 128
    5a1e:	02 c0       	rjmp	.+4      	; 0x5a24 <vfprintf+0xe2>
    5a20:	98 36       	cpi	r25, 0x68	; 104
    5a22:	59 f4       	brne	.+22     	; 0x5a3a <vfprintf+0xf8>
    5a24:	ee 85       	ldd	r30, Y+14	; 0x0e
    5a26:	ff 85       	ldd	r31, Y+15	; 0x0f
    5a28:	23 fd       	sbrc	r18, 3
    5a2a:	95 91       	lpm	r25, Z+
    5a2c:	23 ff       	sbrs	r18, 3
    5a2e:	91 91       	ld	r25, Z+
    5a30:	ff 87       	std	Y+15, r31	; 0x0f
    5a32:	ee 87       	std	Y+14, r30	; 0x0e
    5a34:	99 23       	and	r25, r25
    5a36:	09 f0       	breq	.+2      	; 0x5a3a <vfprintf+0xf8>
    5a38:	bc cf       	rjmp	.-136    	; 0x59b2 <vfprintf+0x70>
    5a3a:	89 2f       	mov	r24, r25
    5a3c:	85 54       	subi	r24, 0x45	; 69
    5a3e:	83 30       	cpi	r24, 0x03	; 3
    5a40:	20 f4       	brcc	.+8      	; 0x5a4a <vfprintf+0x108>
    5a42:	81 2f       	mov	r24, r17
    5a44:	80 61       	ori	r24, 0x10	; 16
    5a46:	90 5e       	subi	r25, 0xE0	; 224
    5a48:	07 c0       	rjmp	.+14     	; 0x5a58 <vfprintf+0x116>
    5a4a:	89 2f       	mov	r24, r25
    5a4c:	85 56       	subi	r24, 0x65	; 101
    5a4e:	83 30       	cpi	r24, 0x03	; 3
    5a50:	08 f0       	brcs	.+2      	; 0x5a54 <vfprintf+0x112>
    5a52:	8f c1       	rjmp	.+798    	; 0x5d72 <vfprintf+0x430>
    5a54:	81 2f       	mov	r24, r17
    5a56:	8f 7e       	andi	r24, 0xEF	; 239
    5a58:	86 fd       	sbrc	r24, 6
    5a5a:	02 c0       	rjmp	.+4      	; 0x5a60 <vfprintf+0x11e>
    5a5c:	76 e0       	ldi	r23, 0x06	; 6
    5a5e:	97 2e       	mov	r9, r23
    5a60:	6f e3       	ldi	r22, 0x3F	; 63
    5a62:	f6 2e       	mov	r15, r22
    5a64:	f8 22       	and	r15, r24
    5a66:	95 36       	cpi	r25, 0x65	; 101
    5a68:	19 f4       	brne	.+6      	; 0x5a70 <vfprintf+0x12e>
    5a6a:	f0 e4       	ldi	r31, 0x40	; 64
    5a6c:	ff 2a       	or	r15, r31
    5a6e:	07 c0       	rjmp	.+14     	; 0x5a7e <vfprintf+0x13c>
    5a70:	96 36       	cpi	r25, 0x66	; 102
    5a72:	19 f4       	brne	.+6      	; 0x5a7a <vfprintf+0x138>
    5a74:	20 e8       	ldi	r18, 0x80	; 128
    5a76:	f2 2a       	or	r15, r18
    5a78:	02 c0       	rjmp	.+4      	; 0x5a7e <vfprintf+0x13c>
    5a7a:	91 10       	cpse	r9, r1
    5a7c:	9a 94       	dec	r9
    5a7e:	f7 fe       	sbrs	r15, 7
    5a80:	0a c0       	rjmp	.+20     	; 0x5a96 <vfprintf+0x154>
    5a82:	3b e3       	ldi	r19, 0x3B	; 59
    5a84:	39 15       	cp	r19, r9
    5a86:	18 f4       	brcc	.+6      	; 0x5a8e <vfprintf+0x14c>
    5a88:	5c e3       	ldi	r21, 0x3C	; 60
    5a8a:	b5 2e       	mov	r11, r21
    5a8c:	02 c0       	rjmp	.+4      	; 0x5a92 <vfprintf+0x150>
    5a8e:	b9 2c       	mov	r11, r9
    5a90:	b3 94       	inc	r11
    5a92:	27 e0       	ldi	r18, 0x07	; 7
    5a94:	09 c0       	rjmp	.+18     	; 0x5aa8 <vfprintf+0x166>
    5a96:	47 e0       	ldi	r20, 0x07	; 7
    5a98:	49 15       	cp	r20, r9
    5a9a:	20 f4       	brcc	.+8      	; 0x5aa4 <vfprintf+0x162>
    5a9c:	bb 24       	eor	r11, r11
    5a9e:	47 e0       	ldi	r20, 0x07	; 7
    5aa0:	94 2e       	mov	r9, r20
    5aa2:	f7 cf       	rjmp	.-18     	; 0x5a92 <vfprintf+0x150>
    5aa4:	29 2d       	mov	r18, r9
    5aa6:	bb 24       	eor	r11, r11
    5aa8:	c6 01       	movw	r24, r12
    5aaa:	04 96       	adiw	r24, 0x04	; 4
    5aac:	9d 87       	std	Y+13, r25	; 0x0d
    5aae:	8c 87       	std	Y+12, r24	; 0x0c
    5ab0:	f6 01       	movw	r30, r12
    5ab2:	60 81       	ld	r22, Z
    5ab4:	71 81       	ldd	r23, Z+1	; 0x01
    5ab6:	82 81       	ldd	r24, Z+2	; 0x02
    5ab8:	93 81       	ldd	r25, Z+3	; 0x03
    5aba:	ae 01       	movw	r20, r28
    5abc:	4f 5f       	subi	r20, 0xFF	; 255
    5abe:	5f 4f       	sbci	r21, 0xFF	; 255
    5ac0:	0b 2d       	mov	r16, r11
    5ac2:	a4 d4       	rcall	.+2376   	; 0x640c <__ftoa_engine>
    5ac4:	6c 01       	movw	r12, r24
    5ac6:	09 81       	ldd	r16, Y+1	; 0x01
    5ac8:	20 2e       	mov	r2, r16
    5aca:	33 24       	eor	r3, r3
    5acc:	00 ff       	sbrs	r16, 0
    5ace:	04 c0       	rjmp	.+8      	; 0x5ad8 <vfprintf+0x196>
    5ad0:	03 fd       	sbrc	r16, 3
    5ad2:	02 c0       	rjmp	.+4      	; 0x5ad8 <vfprintf+0x196>
    5ad4:	1d e2       	ldi	r17, 0x2D	; 45
    5ad6:	09 c0       	rjmp	.+18     	; 0x5aea <vfprintf+0x1a8>
    5ad8:	f1 fe       	sbrs	r15, 1
    5ada:	02 c0       	rjmp	.+4      	; 0x5ae0 <vfprintf+0x19e>
    5adc:	1b e2       	ldi	r17, 0x2B	; 43
    5ade:	05 c0       	rjmp	.+10     	; 0x5aea <vfprintf+0x1a8>
    5ae0:	f2 fc       	sbrc	r15, 2
    5ae2:	02 c0       	rjmp	.+4      	; 0x5ae8 <vfprintf+0x1a6>
    5ae4:	10 e0       	ldi	r17, 0x00	; 0
    5ae6:	01 c0       	rjmp	.+2      	; 0x5aea <vfprintf+0x1a8>
    5ae8:	10 e2       	ldi	r17, 0x20	; 32
    5aea:	c1 01       	movw	r24, r2
    5aec:	8c 70       	andi	r24, 0x0C	; 12
    5aee:	90 70       	andi	r25, 0x00	; 0
    5af0:	89 2b       	or	r24, r25
    5af2:	a1 f1       	breq	.+104    	; 0x5b5c <vfprintf+0x21a>
    5af4:	11 23       	and	r17, r17
    5af6:	11 f4       	brne	.+4      	; 0x5afc <vfprintf+0x1ba>
    5af8:	83 e0       	ldi	r24, 0x03	; 3
    5afa:	01 c0       	rjmp	.+2      	; 0x5afe <vfprintf+0x1bc>
    5afc:	84 e0       	ldi	r24, 0x04	; 4
    5afe:	88 15       	cp	r24, r8
    5b00:	10 f0       	brcs	.+4      	; 0x5b06 <vfprintf+0x1c4>
    5b02:	88 24       	eor	r8, r8
    5b04:	09 c0       	rjmp	.+18     	; 0x5b18 <vfprintf+0x1d6>
    5b06:	88 1a       	sub	r8, r24
    5b08:	f3 fc       	sbrc	r15, 3
    5b0a:	06 c0       	rjmp	.+12     	; 0x5b18 <vfprintf+0x1d6>
    5b0c:	80 e2       	ldi	r24, 0x20	; 32
    5b0e:	90 e0       	ldi	r25, 0x00	; 0
    5b10:	b3 01       	movw	r22, r6
    5b12:	6a d5       	rcall	.+2772   	; 0x65e8 <fputc>
    5b14:	8a 94       	dec	r8
    5b16:	d1 f7       	brne	.-12     	; 0x5b0c <vfprintf+0x1ca>
    5b18:	11 23       	and	r17, r17
    5b1a:	21 f0       	breq	.+8      	; 0x5b24 <vfprintf+0x1e2>
    5b1c:	81 2f       	mov	r24, r17
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	b3 01       	movw	r22, r6
    5b22:	62 d5       	rcall	.+2756   	; 0x65e8 <fputc>
    5b24:	23 fe       	sbrs	r2, 3
    5b26:	03 c0       	rjmp	.+6      	; 0x5b2e <vfprintf+0x1ec>
    5b28:	0f e5       	ldi	r16, 0x5F	; 95
    5b2a:	15 e0       	ldi	r17, 0x05	; 5
    5b2c:	0d c0       	rjmp	.+26     	; 0x5b48 <vfprintf+0x206>
    5b2e:	03 e6       	ldi	r16, 0x63	; 99
    5b30:	15 e0       	ldi	r17, 0x05	; 5
    5b32:	0a c0       	rjmp	.+20     	; 0x5b48 <vfprintf+0x206>
    5b34:	e1 14       	cp	r14, r1
    5b36:	f1 04       	cpc	r15, r1
    5b38:	09 f0       	breq	.+2      	; 0x5b3c <vfprintf+0x1fa>
    5b3a:	80 52       	subi	r24, 0x20	; 32
    5b3c:	90 e0       	ldi	r25, 0x00	; 0
    5b3e:	b3 01       	movw	r22, r6
    5b40:	53 d5       	rcall	.+2726   	; 0x65e8 <fputc>
    5b42:	0f 5f       	subi	r16, 0xFF	; 255
    5b44:	1f 4f       	sbci	r17, 0xFF	; 255
    5b46:	05 c0       	rjmp	.+10     	; 0x5b52 <vfprintf+0x210>
    5b48:	ef 2c       	mov	r14, r15
    5b4a:	ff 24       	eor	r15, r15
    5b4c:	f0 e1       	ldi	r31, 0x10	; 16
    5b4e:	ef 22       	and	r14, r31
    5b50:	ff 24       	eor	r15, r15
    5b52:	f8 01       	movw	r30, r16
    5b54:	84 91       	lpm	r24, Z+
    5b56:	88 23       	and	r24, r24
    5b58:	69 f7       	brne	.-38     	; 0x5b34 <vfprintf+0x1f2>
    5b5a:	08 c1       	rjmp	.+528    	; 0x5d6c <vfprintf+0x42a>
    5b5c:	f7 fe       	sbrs	r15, 7
    5b5e:	12 c0       	rjmp	.+36     	; 0x5b84 <vfprintf+0x242>
    5b60:	bc 0c       	add	r11, r12
    5b62:	24 fe       	sbrs	r2, 4
    5b64:	04 c0       	rjmp	.+8      	; 0x5b6e <vfprintf+0x22c>
    5b66:	8a 81       	ldd	r24, Y+2	; 0x02
    5b68:	81 33       	cpi	r24, 0x31	; 49
    5b6a:	09 f4       	brne	.+2      	; 0x5b6e <vfprintf+0x22c>
    5b6c:	ba 94       	dec	r11
    5b6e:	1b 14       	cp	r1, r11
    5b70:	1c f0       	brlt	.+6      	; 0x5b78 <vfprintf+0x236>
    5b72:	bb 24       	eor	r11, r11
    5b74:	b3 94       	inc	r11
    5b76:	2d c0       	rjmp	.+90     	; 0x5bd2 <vfprintf+0x290>
    5b78:	f8 e0       	ldi	r31, 0x08	; 8
    5b7a:	fb 15       	cp	r31, r11
    5b7c:	50 f5       	brcc	.+84     	; 0x5bd2 <vfprintf+0x290>
    5b7e:	38 e0       	ldi	r19, 0x08	; 8
    5b80:	b3 2e       	mov	r11, r19
    5b82:	27 c0       	rjmp	.+78     	; 0x5bd2 <vfprintf+0x290>
    5b84:	f6 fc       	sbrc	r15, 6
    5b86:	25 c0       	rjmp	.+74     	; 0x5bd2 <vfprintf+0x290>
    5b88:	89 2d       	mov	r24, r9
    5b8a:	90 e0       	ldi	r25, 0x00	; 0
    5b8c:	8c 15       	cp	r24, r12
    5b8e:	9d 05       	cpc	r25, r13
    5b90:	4c f0       	brlt	.+18     	; 0x5ba4 <vfprintf+0x262>
    5b92:	2c ef       	ldi	r18, 0xFC	; 252
    5b94:	c2 16       	cp	r12, r18
    5b96:	2f ef       	ldi	r18, 0xFF	; 255
    5b98:	d2 06       	cpc	r13, r18
    5b9a:	24 f0       	brlt	.+8      	; 0x5ba4 <vfprintf+0x262>
    5b9c:	30 e8       	ldi	r19, 0x80	; 128
    5b9e:	f3 2a       	or	r15, r19
    5ba0:	01 c0       	rjmp	.+2      	; 0x5ba4 <vfprintf+0x262>
    5ba2:	9a 94       	dec	r9
    5ba4:	99 20       	and	r9, r9
    5ba6:	49 f0       	breq	.+18     	; 0x5bba <vfprintf+0x278>
    5ba8:	e2 e0       	ldi	r30, 0x02	; 2
    5baa:	f0 e0       	ldi	r31, 0x00	; 0
    5bac:	ec 0f       	add	r30, r28
    5bae:	fd 1f       	adc	r31, r29
    5bb0:	e9 0d       	add	r30, r9
    5bb2:	f1 1d       	adc	r31, r1
    5bb4:	80 81       	ld	r24, Z
    5bb6:	80 33       	cpi	r24, 0x30	; 48
    5bb8:	a1 f3       	breq	.-24     	; 0x5ba2 <vfprintf+0x260>
    5bba:	f7 fe       	sbrs	r15, 7
    5bbc:	0a c0       	rjmp	.+20     	; 0x5bd2 <vfprintf+0x290>
    5bbe:	b9 2c       	mov	r11, r9
    5bc0:	b3 94       	inc	r11
    5bc2:	89 2d       	mov	r24, r9
    5bc4:	90 e0       	ldi	r25, 0x00	; 0
    5bc6:	c8 16       	cp	r12, r24
    5bc8:	d9 06       	cpc	r13, r25
    5bca:	14 f0       	brlt	.+4      	; 0x5bd0 <vfprintf+0x28e>
    5bcc:	99 24       	eor	r9, r9
    5bce:	01 c0       	rjmp	.+2      	; 0x5bd2 <vfprintf+0x290>
    5bd0:	9c 18       	sub	r9, r12
    5bd2:	f7 fc       	sbrc	r15, 7
    5bd4:	03 c0       	rjmp	.+6      	; 0x5bdc <vfprintf+0x29a>
    5bd6:	25 e0       	ldi	r18, 0x05	; 5
    5bd8:	30 e0       	ldi	r19, 0x00	; 0
    5bda:	09 c0       	rjmp	.+18     	; 0x5bee <vfprintf+0x2ac>
    5bdc:	1c 14       	cp	r1, r12
    5bde:	1d 04       	cpc	r1, r13
    5be0:	1c f0       	brlt	.+6      	; 0x5be8 <vfprintf+0x2a6>
    5be2:	21 e0       	ldi	r18, 0x01	; 1
    5be4:	30 e0       	ldi	r19, 0x00	; 0
    5be6:	03 c0       	rjmp	.+6      	; 0x5bee <vfprintf+0x2ac>
    5be8:	96 01       	movw	r18, r12
    5bea:	2f 5f       	subi	r18, 0xFF	; 255
    5bec:	3f 4f       	sbci	r19, 0xFF	; 255
    5bee:	11 23       	and	r17, r17
    5bf0:	11 f0       	breq	.+4      	; 0x5bf6 <vfprintf+0x2b4>
    5bf2:	2f 5f       	subi	r18, 0xFF	; 255
    5bf4:	3f 4f       	sbci	r19, 0xFF	; 255
    5bf6:	99 20       	and	r9, r9
    5bf8:	29 f0       	breq	.+10     	; 0x5c04 <vfprintf+0x2c2>
    5bfa:	89 2d       	mov	r24, r9
    5bfc:	90 e0       	ldi	r25, 0x00	; 0
    5bfe:	01 96       	adiw	r24, 0x01	; 1
    5c00:	28 0f       	add	r18, r24
    5c02:	39 1f       	adc	r19, r25
    5c04:	88 2d       	mov	r24, r8
    5c06:	90 e0       	ldi	r25, 0x00	; 0
    5c08:	28 17       	cp	r18, r24
    5c0a:	39 07       	cpc	r19, r25
    5c0c:	14 f0       	brlt	.+4      	; 0x5c12 <vfprintf+0x2d0>
    5c0e:	88 24       	eor	r8, r8
    5c10:	01 c0       	rjmp	.+2      	; 0x5c14 <vfprintf+0x2d2>
    5c12:	82 1a       	sub	r8, r18
    5c14:	4f 2c       	mov	r4, r15
    5c16:	55 24       	eor	r5, r5
    5c18:	c2 01       	movw	r24, r4
    5c1a:	89 70       	andi	r24, 0x09	; 9
    5c1c:	90 70       	andi	r25, 0x00	; 0
    5c1e:	89 2b       	or	r24, r25
    5c20:	31 f0       	breq	.+12     	; 0x5c2e <vfprintf+0x2ec>
    5c22:	07 c0       	rjmp	.+14     	; 0x5c32 <vfprintf+0x2f0>
    5c24:	80 e2       	ldi	r24, 0x20	; 32
    5c26:	90 e0       	ldi	r25, 0x00	; 0
    5c28:	b3 01       	movw	r22, r6
    5c2a:	de d4       	rcall	.+2492   	; 0x65e8 <fputc>
    5c2c:	8a 94       	dec	r8
    5c2e:	88 20       	and	r8, r8
    5c30:	c9 f7       	brne	.-14     	; 0x5c24 <vfprintf+0x2e2>
    5c32:	11 23       	and	r17, r17
    5c34:	21 f0       	breq	.+8      	; 0x5c3e <vfprintf+0x2fc>
    5c36:	81 2f       	mov	r24, r17
    5c38:	90 e0       	ldi	r25, 0x00	; 0
    5c3a:	b3 01       	movw	r22, r6
    5c3c:	d5 d4       	rcall	.+2474   	; 0x65e8 <fputc>
    5c3e:	43 fe       	sbrs	r4, 3
    5c40:	06 c0       	rjmp	.+12     	; 0x5c4e <vfprintf+0x30c>
    5c42:	07 c0       	rjmp	.+14     	; 0x5c52 <vfprintf+0x310>
    5c44:	80 e3       	ldi	r24, 0x30	; 48
    5c46:	90 e0       	ldi	r25, 0x00	; 0
    5c48:	b3 01       	movw	r22, r6
    5c4a:	ce d4       	rcall	.+2460   	; 0x65e8 <fputc>
    5c4c:	8a 94       	dec	r8
    5c4e:	88 20       	and	r8, r8
    5c50:	c9 f7       	brne	.-14     	; 0x5c44 <vfprintf+0x302>
    5c52:	f7 fe       	sbrs	r15, 7
    5c54:	44 c0       	rjmp	.+136    	; 0x5cde <vfprintf+0x39c>
    5c56:	86 01       	movw	r16, r12
    5c58:	d7 fe       	sbrs	r13, 7
    5c5a:	02 c0       	rjmp	.+4      	; 0x5c60 <vfprintf+0x31e>
    5c5c:	00 e0       	ldi	r16, 0x00	; 0
    5c5e:	10 e0       	ldi	r17, 0x00	; 0
    5c60:	76 01       	movw	r14, r12
    5c62:	08 94       	sec
    5c64:	e1 1c       	adc	r14, r1
    5c66:	f1 1c       	adc	r15, r1
    5c68:	e0 1a       	sub	r14, r16
    5c6a:	f1 0a       	sbc	r15, r17
    5c6c:	41 e0       	ldi	r20, 0x01	; 1
    5c6e:	50 e0       	ldi	r21, 0x00	; 0
    5c70:	4c 0f       	add	r20, r28
    5c72:	5d 1f       	adc	r21, r29
    5c74:	e4 0e       	add	r14, r20
    5c76:	f5 1e       	adc	r15, r21
    5c78:	26 01       	movw	r4, r12
    5c7a:	4b 18       	sub	r4, r11
    5c7c:	51 08       	sbc	r5, r1
    5c7e:	89 2d       	mov	r24, r9
    5c80:	90 e0       	ldi	r25, 0x00	; 0
    5c82:	aa 24       	eor	r10, r10
    5c84:	bb 24       	eor	r11, r11
    5c86:	a8 1a       	sub	r10, r24
    5c88:	b9 0a       	sbc	r11, r25
    5c8a:	5f ef       	ldi	r21, 0xFF	; 255
    5c8c:	0f 3f       	cpi	r16, 0xFF	; 255
    5c8e:	15 07       	cpc	r17, r21
    5c90:	21 f4       	brne	.+8      	; 0x5c9a <vfprintf+0x358>
    5c92:	8e e2       	ldi	r24, 0x2E	; 46
    5c94:	90 e0       	ldi	r25, 0x00	; 0
    5c96:	b3 01       	movw	r22, r6
    5c98:	a7 d4       	rcall	.+2382   	; 0x65e8 <fputc>
    5c9a:	c0 16       	cp	r12, r16
    5c9c:	d1 06       	cpc	r13, r17
    5c9e:	34 f0       	brlt	.+12     	; 0x5cac <vfprintf+0x36a>
    5ca0:	40 16       	cp	r4, r16
    5ca2:	51 06       	cpc	r5, r17
    5ca4:	1c f4       	brge	.+6      	; 0x5cac <vfprintf+0x36a>
    5ca6:	f7 01       	movw	r30, r14
    5ca8:	80 81       	ld	r24, Z
    5caa:	01 c0       	rjmp	.+2      	; 0x5cae <vfprintf+0x36c>
    5cac:	80 e3       	ldi	r24, 0x30	; 48
    5cae:	01 50       	subi	r16, 0x01	; 1
    5cb0:	10 40       	sbci	r17, 0x00	; 0
    5cb2:	08 94       	sec
    5cb4:	e1 1c       	adc	r14, r1
    5cb6:	f1 1c       	adc	r15, r1
    5cb8:	0a 15       	cp	r16, r10
    5cba:	1b 05       	cpc	r17, r11
    5cbc:	24 f0       	brlt	.+8      	; 0x5cc6 <vfprintf+0x384>
    5cbe:	90 e0       	ldi	r25, 0x00	; 0
    5cc0:	b3 01       	movw	r22, r6
    5cc2:	92 d4       	rcall	.+2340   	; 0x65e8 <fputc>
    5cc4:	e2 cf       	rjmp	.-60     	; 0x5c8a <vfprintf+0x348>
    5cc6:	0c 15       	cp	r16, r12
    5cc8:	1d 05       	cpc	r17, r13
    5cca:	39 f4       	brne	.+14     	; 0x5cda <vfprintf+0x398>
    5ccc:	9a 81       	ldd	r25, Y+2	; 0x02
    5cce:	96 33       	cpi	r25, 0x36	; 54
    5cd0:	18 f4       	brcc	.+6      	; 0x5cd8 <vfprintf+0x396>
    5cd2:	95 33       	cpi	r25, 0x35	; 53
    5cd4:	11 f4       	brne	.+4      	; 0x5cda <vfprintf+0x398>
    5cd6:	24 fe       	sbrs	r2, 4
    5cd8:	81 e3       	ldi	r24, 0x31	; 49
    5cda:	90 e0       	ldi	r25, 0x00	; 0
    5cdc:	45 c0       	rjmp	.+138    	; 0x5d68 <vfprintf+0x426>
    5cde:	8a 81       	ldd	r24, Y+2	; 0x02
    5ce0:	81 33       	cpi	r24, 0x31	; 49
    5ce2:	09 f0       	breq	.+2      	; 0x5ce6 <vfprintf+0x3a4>
    5ce4:	0f 7e       	andi	r16, 0xEF	; 239
    5ce6:	90 e0       	ldi	r25, 0x00	; 0
    5ce8:	b3 01       	movw	r22, r6
    5cea:	7e d4       	rcall	.+2300   	; 0x65e8 <fputc>
    5cec:	99 20       	and	r9, r9
    5cee:	91 f0       	breq	.+36     	; 0x5d14 <vfprintf+0x3d2>
    5cf0:	8e e2       	ldi	r24, 0x2E	; 46
    5cf2:	90 e0       	ldi	r25, 0x00	; 0
    5cf4:	b3 01       	movw	r22, r6
    5cf6:	78 d4       	rcall	.+2288   	; 0x65e8 <fputc>
    5cf8:	12 e0       	ldi	r17, 0x02	; 2
    5cfa:	e1 e0       	ldi	r30, 0x01	; 1
    5cfc:	f0 e0       	ldi	r31, 0x00	; 0
    5cfe:	ec 0f       	add	r30, r28
    5d00:	fd 1f       	adc	r31, r29
    5d02:	e1 0f       	add	r30, r17
    5d04:	f1 1d       	adc	r31, r1
    5d06:	1f 5f       	subi	r17, 0xFF	; 255
    5d08:	80 81       	ld	r24, Z
    5d0a:	90 e0       	ldi	r25, 0x00	; 0
    5d0c:	b3 01       	movw	r22, r6
    5d0e:	6c d4       	rcall	.+2264   	; 0x65e8 <fputc>
    5d10:	9a 94       	dec	r9
    5d12:	99 f7       	brne	.-26     	; 0x5cfa <vfprintf+0x3b8>
    5d14:	44 fc       	sbrc	r4, 4
    5d16:	03 c0       	rjmp	.+6      	; 0x5d1e <vfprintf+0x3dc>
    5d18:	85 e6       	ldi	r24, 0x65	; 101
    5d1a:	90 e0       	ldi	r25, 0x00	; 0
    5d1c:	02 c0       	rjmp	.+4      	; 0x5d22 <vfprintf+0x3e0>
    5d1e:	85 e4       	ldi	r24, 0x45	; 69
    5d20:	90 e0       	ldi	r25, 0x00	; 0
    5d22:	b3 01       	movw	r22, r6
    5d24:	61 d4       	rcall	.+2242   	; 0x65e8 <fputc>
    5d26:	d7 fc       	sbrc	r13, 7
    5d28:	05 c0       	rjmp	.+10     	; 0x5d34 <vfprintf+0x3f2>
    5d2a:	c1 14       	cp	r12, r1
    5d2c:	d1 04       	cpc	r13, r1
    5d2e:	41 f4       	brne	.+16     	; 0x5d40 <vfprintf+0x3fe>
    5d30:	04 ff       	sbrs	r16, 4
    5d32:	06 c0       	rjmp	.+12     	; 0x5d40 <vfprintf+0x3fe>
    5d34:	d0 94       	com	r13
    5d36:	c1 94       	neg	r12
    5d38:	d1 08       	sbc	r13, r1
    5d3a:	d3 94       	inc	r13
    5d3c:	8d e2       	ldi	r24, 0x2D	; 45
    5d3e:	01 c0       	rjmp	.+2      	; 0x5d42 <vfprintf+0x400>
    5d40:	8b e2       	ldi	r24, 0x2B	; 43
    5d42:	90 e0       	ldi	r25, 0x00	; 0
    5d44:	b3 01       	movw	r22, r6
    5d46:	50 d4       	rcall	.+2208   	; 0x65e8 <fputc>
    5d48:	80 e3       	ldi	r24, 0x30	; 48
    5d4a:	05 c0       	rjmp	.+10     	; 0x5d56 <vfprintf+0x414>
    5d4c:	8f 5f       	subi	r24, 0xFF	; 255
    5d4e:	26 ef       	ldi	r18, 0xF6	; 246
    5d50:	3f ef       	ldi	r19, 0xFF	; 255
    5d52:	c2 0e       	add	r12, r18
    5d54:	d3 1e       	adc	r13, r19
    5d56:	3a e0       	ldi	r19, 0x0A	; 10
    5d58:	c3 16       	cp	r12, r19
    5d5a:	d1 04       	cpc	r13, r1
    5d5c:	bc f7       	brge	.-18     	; 0x5d4c <vfprintf+0x40a>
    5d5e:	90 e0       	ldi	r25, 0x00	; 0
    5d60:	b3 01       	movw	r22, r6
    5d62:	42 d4       	rcall	.+2180   	; 0x65e8 <fputc>
    5d64:	c6 01       	movw	r24, r12
    5d66:	c0 96       	adiw	r24, 0x30	; 48
    5d68:	b3 01       	movw	r22, r6
    5d6a:	3e d4       	rcall	.+2172   	; 0x65e8 <fputc>
    5d6c:	cc 84       	ldd	r12, Y+12	; 0x0c
    5d6e:	dd 84       	ldd	r13, Y+13	; 0x0d
    5d70:	46 c1       	rjmp	.+652    	; 0x5ffe <vfprintf+0x6bc>
    5d72:	93 36       	cpi	r25, 0x63	; 99
    5d74:	31 f0       	breq	.+12     	; 0x5d82 <vfprintf+0x440>
    5d76:	93 37       	cpi	r25, 0x73	; 115
    5d78:	99 f0       	breq	.+38     	; 0x5da0 <vfprintf+0x45e>
    5d7a:	93 35       	cpi	r25, 0x53	; 83
    5d7c:	09 f0       	breq	.+2      	; 0x5d80 <vfprintf+0x43e>
    5d7e:	55 c0       	rjmp	.+170    	; 0x5e2a <vfprintf+0x4e8>
    5d80:	22 c0       	rjmp	.+68     	; 0x5dc6 <vfprintf+0x484>
    5d82:	f6 01       	movw	r30, r12
    5d84:	80 81       	ld	r24, Z
    5d86:	89 83       	std	Y+1, r24	; 0x01
    5d88:	5e 01       	movw	r10, r28
    5d8a:	08 94       	sec
    5d8c:	a1 1c       	adc	r10, r1
    5d8e:	b1 1c       	adc	r11, r1
    5d90:	22 e0       	ldi	r18, 0x02	; 2
    5d92:	30 e0       	ldi	r19, 0x00	; 0
    5d94:	c2 0e       	add	r12, r18
    5d96:	d3 1e       	adc	r13, r19
    5d98:	21 e0       	ldi	r18, 0x01	; 1
    5d9a:	e2 2e       	mov	r14, r18
    5d9c:	f1 2c       	mov	r15, r1
    5d9e:	11 c0       	rjmp	.+34     	; 0x5dc2 <vfprintf+0x480>
    5da0:	f6 01       	movw	r30, r12
    5da2:	a0 80       	ld	r10, Z
    5da4:	b1 80       	ldd	r11, Z+1	; 0x01
    5da6:	16 fd       	sbrc	r17, 6
    5da8:	03 c0       	rjmp	.+6      	; 0x5db0 <vfprintf+0x46e>
    5daa:	6f ef       	ldi	r22, 0xFF	; 255
    5dac:	7f ef       	ldi	r23, 0xFF	; 255
    5dae:	02 c0       	rjmp	.+4      	; 0x5db4 <vfprintf+0x472>
    5db0:	69 2d       	mov	r22, r9
    5db2:	70 e0       	ldi	r23, 0x00	; 0
    5db4:	22 e0       	ldi	r18, 0x02	; 2
    5db6:	30 e0       	ldi	r19, 0x00	; 0
    5db8:	c2 0e       	add	r12, r18
    5dba:	d3 1e       	adc	r13, r19
    5dbc:	c5 01       	movw	r24, r10
    5dbe:	09 d4       	rcall	.+2066   	; 0x65d2 <strnlen>
    5dc0:	7c 01       	movw	r14, r24
    5dc2:	1f 77       	andi	r17, 0x7F	; 127
    5dc4:	12 c0       	rjmp	.+36     	; 0x5dea <vfprintf+0x4a8>
    5dc6:	f6 01       	movw	r30, r12
    5dc8:	a0 80       	ld	r10, Z
    5dca:	b1 80       	ldd	r11, Z+1	; 0x01
    5dcc:	16 fd       	sbrc	r17, 6
    5dce:	03 c0       	rjmp	.+6      	; 0x5dd6 <vfprintf+0x494>
    5dd0:	6f ef       	ldi	r22, 0xFF	; 255
    5dd2:	7f ef       	ldi	r23, 0xFF	; 255
    5dd4:	02 c0       	rjmp	.+4      	; 0x5dda <vfprintf+0x498>
    5dd6:	69 2d       	mov	r22, r9
    5dd8:	70 e0       	ldi	r23, 0x00	; 0
    5dda:	22 e0       	ldi	r18, 0x02	; 2
    5ddc:	30 e0       	ldi	r19, 0x00	; 0
    5dde:	c2 0e       	add	r12, r18
    5de0:	d3 1e       	adc	r13, r19
    5de2:	c5 01       	movw	r24, r10
    5de4:	eb d3       	rcall	.+2006   	; 0x65bc <strnlen_P>
    5de6:	7c 01       	movw	r14, r24
    5de8:	10 68       	ori	r17, 0x80	; 128
    5dea:	13 ff       	sbrs	r17, 3
    5dec:	06 c0       	rjmp	.+12     	; 0x5dfa <vfprintf+0x4b8>
    5dee:	19 c0       	rjmp	.+50     	; 0x5e22 <vfprintf+0x4e0>
    5df0:	80 e2       	ldi	r24, 0x20	; 32
    5df2:	90 e0       	ldi	r25, 0x00	; 0
    5df4:	b3 01       	movw	r22, r6
    5df6:	f8 d3       	rcall	.+2032   	; 0x65e8 <fputc>
    5df8:	8a 94       	dec	r8
    5dfa:	88 2d       	mov	r24, r8
    5dfc:	90 e0       	ldi	r25, 0x00	; 0
    5dfe:	e8 16       	cp	r14, r24
    5e00:	f9 06       	cpc	r15, r25
    5e02:	b0 f3       	brcs	.-20     	; 0x5df0 <vfprintf+0x4ae>
    5e04:	0e c0       	rjmp	.+28     	; 0x5e22 <vfprintf+0x4e0>
    5e06:	f5 01       	movw	r30, r10
    5e08:	17 fd       	sbrc	r17, 7
    5e0a:	85 91       	lpm	r24, Z+
    5e0c:	17 ff       	sbrs	r17, 7
    5e0e:	81 91       	ld	r24, Z+
    5e10:	5f 01       	movw	r10, r30
    5e12:	90 e0       	ldi	r25, 0x00	; 0
    5e14:	b3 01       	movw	r22, r6
    5e16:	e8 d3       	rcall	.+2000   	; 0x65e8 <fputc>
    5e18:	81 10       	cpse	r8, r1
    5e1a:	8a 94       	dec	r8
    5e1c:	08 94       	sec
    5e1e:	e1 08       	sbc	r14, r1
    5e20:	f1 08       	sbc	r15, r1
    5e22:	e1 14       	cp	r14, r1
    5e24:	f1 04       	cpc	r15, r1
    5e26:	79 f7       	brne	.-34     	; 0x5e06 <vfprintf+0x4c4>
    5e28:	ea c0       	rjmp	.+468    	; 0x5ffe <vfprintf+0x6bc>
    5e2a:	94 36       	cpi	r25, 0x64	; 100
    5e2c:	11 f0       	breq	.+4      	; 0x5e32 <vfprintf+0x4f0>
    5e2e:	99 36       	cpi	r25, 0x69	; 105
    5e30:	81 f5       	brne	.+96     	; 0x5e92 <vfprintf+0x550>
    5e32:	17 ff       	sbrs	r17, 7
    5e34:	08 c0       	rjmp	.+16     	; 0x5e46 <vfprintf+0x504>
    5e36:	f6 01       	movw	r30, r12
    5e38:	20 81       	ld	r18, Z
    5e3a:	31 81       	ldd	r19, Z+1	; 0x01
    5e3c:	42 81       	ldd	r20, Z+2	; 0x02
    5e3e:	53 81       	ldd	r21, Z+3	; 0x03
    5e40:	84 e0       	ldi	r24, 0x04	; 4
    5e42:	90 e0       	ldi	r25, 0x00	; 0
    5e44:	0a c0       	rjmp	.+20     	; 0x5e5a <vfprintf+0x518>
    5e46:	f6 01       	movw	r30, r12
    5e48:	80 81       	ld	r24, Z
    5e4a:	91 81       	ldd	r25, Z+1	; 0x01
    5e4c:	9c 01       	movw	r18, r24
    5e4e:	44 27       	eor	r20, r20
    5e50:	37 fd       	sbrc	r19, 7
    5e52:	40 95       	com	r20
    5e54:	54 2f       	mov	r21, r20
    5e56:	82 e0       	ldi	r24, 0x02	; 2
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	c8 0e       	add	r12, r24
    5e5c:	d9 1e       	adc	r13, r25
    5e5e:	9f e6       	ldi	r25, 0x6F	; 111
    5e60:	f9 2e       	mov	r15, r25
    5e62:	f1 22       	and	r15, r17
    5e64:	57 ff       	sbrs	r21, 7
    5e66:	09 c0       	rjmp	.+18     	; 0x5e7a <vfprintf+0x538>
    5e68:	50 95       	com	r21
    5e6a:	40 95       	com	r20
    5e6c:	30 95       	com	r19
    5e6e:	21 95       	neg	r18
    5e70:	3f 4f       	sbci	r19, 0xFF	; 255
    5e72:	4f 4f       	sbci	r20, 0xFF	; 255
    5e74:	5f 4f       	sbci	r21, 0xFF	; 255
    5e76:	90 e8       	ldi	r25, 0x80	; 128
    5e78:	f9 2a       	or	r15, r25
    5e7a:	ca 01       	movw	r24, r20
    5e7c:	b9 01       	movw	r22, r18
    5e7e:	ae 01       	movw	r20, r28
    5e80:	4f 5f       	subi	r20, 0xFF	; 255
    5e82:	5f 4f       	sbci	r21, 0xFF	; 255
    5e84:	2a e0       	ldi	r18, 0x0A	; 10
    5e86:	30 e0       	ldi	r19, 0x00	; 0
    5e88:	22 d4       	rcall	.+2116   	; 0x66ce <__ultoa_invert>
    5e8a:	e8 2e       	mov	r14, r24
    5e8c:	e8 89       	ldd	r30, Y+16	; 0x10
    5e8e:	ee 1a       	sub	r14, r30
    5e90:	40 c0       	rjmp	.+128    	; 0x5f12 <vfprintf+0x5d0>
    5e92:	95 37       	cpi	r25, 0x75	; 117
    5e94:	21 f4       	brne	.+8      	; 0x5e9e <vfprintf+0x55c>
    5e96:	1f 7e       	andi	r17, 0xEF	; 239
    5e98:	2a e0       	ldi	r18, 0x0A	; 10
    5e9a:	30 e0       	ldi	r19, 0x00	; 0
    5e9c:	1c c0       	rjmp	.+56     	; 0x5ed6 <vfprintf+0x594>
    5e9e:	19 7f       	andi	r17, 0xF9	; 249
    5ea0:	9f 36       	cpi	r25, 0x6F	; 111
    5ea2:	61 f0       	breq	.+24     	; 0x5ebc <vfprintf+0x57a>
    5ea4:	90 37       	cpi	r25, 0x70	; 112
    5ea6:	20 f4       	brcc	.+8      	; 0x5eb0 <vfprintf+0x56e>
    5ea8:	98 35       	cpi	r25, 0x58	; 88
    5eaa:	09 f0       	breq	.+2      	; 0x5eae <vfprintf+0x56c>
    5eac:	ab c0       	rjmp	.+342    	; 0x6004 <vfprintf+0x6c2>
    5eae:	0f c0       	rjmp	.+30     	; 0x5ece <vfprintf+0x58c>
    5eb0:	90 37       	cpi	r25, 0x70	; 112
    5eb2:	39 f0       	breq	.+14     	; 0x5ec2 <vfprintf+0x580>
    5eb4:	98 37       	cpi	r25, 0x78	; 120
    5eb6:	09 f0       	breq	.+2      	; 0x5eba <vfprintf+0x578>
    5eb8:	a5 c0       	rjmp	.+330    	; 0x6004 <vfprintf+0x6c2>
    5eba:	04 c0       	rjmp	.+8      	; 0x5ec4 <vfprintf+0x582>
    5ebc:	28 e0       	ldi	r18, 0x08	; 8
    5ebe:	30 e0       	ldi	r19, 0x00	; 0
    5ec0:	0a c0       	rjmp	.+20     	; 0x5ed6 <vfprintf+0x594>
    5ec2:	10 61       	ori	r17, 0x10	; 16
    5ec4:	14 fd       	sbrc	r17, 4
    5ec6:	14 60       	ori	r17, 0x04	; 4
    5ec8:	20 e1       	ldi	r18, 0x10	; 16
    5eca:	30 e0       	ldi	r19, 0x00	; 0
    5ecc:	04 c0       	rjmp	.+8      	; 0x5ed6 <vfprintf+0x594>
    5ece:	14 fd       	sbrc	r17, 4
    5ed0:	16 60       	ori	r17, 0x06	; 6
    5ed2:	20 e1       	ldi	r18, 0x10	; 16
    5ed4:	32 e0       	ldi	r19, 0x02	; 2
    5ed6:	17 ff       	sbrs	r17, 7
    5ed8:	08 c0       	rjmp	.+16     	; 0x5eea <vfprintf+0x5a8>
    5eda:	f6 01       	movw	r30, r12
    5edc:	60 81       	ld	r22, Z
    5ede:	71 81       	ldd	r23, Z+1	; 0x01
    5ee0:	82 81       	ldd	r24, Z+2	; 0x02
    5ee2:	93 81       	ldd	r25, Z+3	; 0x03
    5ee4:	44 e0       	ldi	r20, 0x04	; 4
    5ee6:	50 e0       	ldi	r21, 0x00	; 0
    5ee8:	08 c0       	rjmp	.+16     	; 0x5efa <vfprintf+0x5b8>
    5eea:	f6 01       	movw	r30, r12
    5eec:	80 81       	ld	r24, Z
    5eee:	91 81       	ldd	r25, Z+1	; 0x01
    5ef0:	bc 01       	movw	r22, r24
    5ef2:	80 e0       	ldi	r24, 0x00	; 0
    5ef4:	90 e0       	ldi	r25, 0x00	; 0
    5ef6:	42 e0       	ldi	r20, 0x02	; 2
    5ef8:	50 e0       	ldi	r21, 0x00	; 0
    5efa:	c4 0e       	add	r12, r20
    5efc:	d5 1e       	adc	r13, r21
    5efe:	ae 01       	movw	r20, r28
    5f00:	4f 5f       	subi	r20, 0xFF	; 255
    5f02:	5f 4f       	sbci	r21, 0xFF	; 255
    5f04:	e4 d3       	rcall	.+1992   	; 0x66ce <__ultoa_invert>
    5f06:	e8 2e       	mov	r14, r24
    5f08:	58 89       	ldd	r21, Y+16	; 0x10
    5f0a:	e5 1a       	sub	r14, r21
    5f0c:	8f e7       	ldi	r24, 0x7F	; 127
    5f0e:	f8 2e       	mov	r15, r24
    5f10:	f1 22       	and	r15, r17
    5f12:	f6 fe       	sbrs	r15, 6
    5f14:	0b c0       	rjmp	.+22     	; 0x5f2c <vfprintf+0x5ea>
    5f16:	8e ef       	ldi	r24, 0xFE	; 254
    5f18:	f8 22       	and	r15, r24
    5f1a:	e9 14       	cp	r14, r9
    5f1c:	38 f4       	brcc	.+14     	; 0x5f2c <vfprintf+0x5ea>
    5f1e:	f4 fe       	sbrs	r15, 4
    5f20:	07 c0       	rjmp	.+14     	; 0x5f30 <vfprintf+0x5ee>
    5f22:	f2 fc       	sbrc	r15, 2
    5f24:	05 c0       	rjmp	.+10     	; 0x5f30 <vfprintf+0x5ee>
    5f26:	9f ee       	ldi	r25, 0xEF	; 239
    5f28:	f9 22       	and	r15, r25
    5f2a:	02 c0       	rjmp	.+4      	; 0x5f30 <vfprintf+0x5ee>
    5f2c:	1e 2d       	mov	r17, r14
    5f2e:	01 c0       	rjmp	.+2      	; 0x5f32 <vfprintf+0x5f0>
    5f30:	19 2d       	mov	r17, r9
    5f32:	f4 fe       	sbrs	r15, 4
    5f34:	0d c0       	rjmp	.+26     	; 0x5f50 <vfprintf+0x60e>
    5f36:	fe 01       	movw	r30, r28
    5f38:	ee 0d       	add	r30, r14
    5f3a:	f1 1d       	adc	r31, r1
    5f3c:	80 81       	ld	r24, Z
    5f3e:	80 33       	cpi	r24, 0x30	; 48
    5f40:	19 f4       	brne	.+6      	; 0x5f48 <vfprintf+0x606>
    5f42:	e9 ee       	ldi	r30, 0xE9	; 233
    5f44:	fe 22       	and	r15, r30
    5f46:	08 c0       	rjmp	.+16     	; 0x5f58 <vfprintf+0x616>
    5f48:	1f 5f       	subi	r17, 0xFF	; 255
    5f4a:	f2 fe       	sbrs	r15, 2
    5f4c:	05 c0       	rjmp	.+10     	; 0x5f58 <vfprintf+0x616>
    5f4e:	03 c0       	rjmp	.+6      	; 0x5f56 <vfprintf+0x614>
    5f50:	8f 2d       	mov	r24, r15
    5f52:	86 78       	andi	r24, 0x86	; 134
    5f54:	09 f0       	breq	.+2      	; 0x5f58 <vfprintf+0x616>
    5f56:	1f 5f       	subi	r17, 0xFF	; 255
    5f58:	0f 2d       	mov	r16, r15
    5f5a:	f3 fc       	sbrc	r15, 3
    5f5c:	13 c0       	rjmp	.+38     	; 0x5f84 <vfprintf+0x642>
    5f5e:	f0 fe       	sbrs	r15, 0
    5f60:	0e c0       	rjmp	.+28     	; 0x5f7e <vfprintf+0x63c>
    5f62:	18 15       	cp	r17, r8
    5f64:	10 f0       	brcs	.+4      	; 0x5f6a <vfprintf+0x628>
    5f66:	9e 2c       	mov	r9, r14
    5f68:	0a c0       	rjmp	.+20     	; 0x5f7e <vfprintf+0x63c>
    5f6a:	9e 2c       	mov	r9, r14
    5f6c:	98 0c       	add	r9, r8
    5f6e:	91 1a       	sub	r9, r17
    5f70:	18 2d       	mov	r17, r8
    5f72:	05 c0       	rjmp	.+10     	; 0x5f7e <vfprintf+0x63c>
    5f74:	80 e2       	ldi	r24, 0x20	; 32
    5f76:	90 e0       	ldi	r25, 0x00	; 0
    5f78:	b3 01       	movw	r22, r6
    5f7a:	36 d3       	rcall	.+1644   	; 0x65e8 <fputc>
    5f7c:	1f 5f       	subi	r17, 0xFF	; 255
    5f7e:	18 15       	cp	r17, r8
    5f80:	c8 f3       	brcs	.-14     	; 0x5f74 <vfprintf+0x632>
    5f82:	04 c0       	rjmp	.+8      	; 0x5f8c <vfprintf+0x64a>
    5f84:	18 15       	cp	r17, r8
    5f86:	10 f4       	brcc	.+4      	; 0x5f8c <vfprintf+0x64a>
    5f88:	81 1a       	sub	r8, r17
    5f8a:	01 c0       	rjmp	.+2      	; 0x5f8e <vfprintf+0x64c>
    5f8c:	88 24       	eor	r8, r8
    5f8e:	04 ff       	sbrs	r16, 4
    5f90:	0e c0       	rjmp	.+28     	; 0x5fae <vfprintf+0x66c>
    5f92:	80 e3       	ldi	r24, 0x30	; 48
    5f94:	90 e0       	ldi	r25, 0x00	; 0
    5f96:	b3 01       	movw	r22, r6
    5f98:	27 d3       	rcall	.+1614   	; 0x65e8 <fputc>
    5f9a:	02 ff       	sbrs	r16, 2
    5f9c:	1b c0       	rjmp	.+54     	; 0x5fd4 <vfprintf+0x692>
    5f9e:	01 fd       	sbrc	r16, 1
    5fa0:	03 c0       	rjmp	.+6      	; 0x5fa8 <vfprintf+0x666>
    5fa2:	88 e7       	ldi	r24, 0x78	; 120
    5fa4:	90 e0       	ldi	r25, 0x00	; 0
    5fa6:	0e c0       	rjmp	.+28     	; 0x5fc4 <vfprintf+0x682>
    5fa8:	88 e5       	ldi	r24, 0x58	; 88
    5faa:	90 e0       	ldi	r25, 0x00	; 0
    5fac:	0b c0       	rjmp	.+22     	; 0x5fc4 <vfprintf+0x682>
    5fae:	80 2f       	mov	r24, r16
    5fb0:	86 78       	andi	r24, 0x86	; 134
    5fb2:	81 f0       	breq	.+32     	; 0x5fd4 <vfprintf+0x692>
    5fb4:	01 ff       	sbrs	r16, 1
    5fb6:	02 c0       	rjmp	.+4      	; 0x5fbc <vfprintf+0x67a>
    5fb8:	8b e2       	ldi	r24, 0x2B	; 43
    5fba:	01 c0       	rjmp	.+2      	; 0x5fbe <vfprintf+0x67c>
    5fbc:	80 e2       	ldi	r24, 0x20	; 32
    5fbe:	f7 fc       	sbrc	r15, 7
    5fc0:	8d e2       	ldi	r24, 0x2D	; 45
    5fc2:	90 e0       	ldi	r25, 0x00	; 0
    5fc4:	b3 01       	movw	r22, r6
    5fc6:	10 d3       	rcall	.+1568   	; 0x65e8 <fputc>
    5fc8:	05 c0       	rjmp	.+10     	; 0x5fd4 <vfprintf+0x692>
    5fca:	80 e3       	ldi	r24, 0x30	; 48
    5fcc:	90 e0       	ldi	r25, 0x00	; 0
    5fce:	b3 01       	movw	r22, r6
    5fd0:	0b d3       	rcall	.+1558   	; 0x65e8 <fputc>
    5fd2:	9a 94       	dec	r9
    5fd4:	e9 14       	cp	r14, r9
    5fd6:	c8 f3       	brcs	.-14     	; 0x5fca <vfprintf+0x688>
    5fd8:	ea 94       	dec	r14
    5fda:	e1 e0       	ldi	r30, 0x01	; 1
    5fdc:	f0 e0       	ldi	r31, 0x00	; 0
    5fde:	ec 0f       	add	r30, r28
    5fe0:	fd 1f       	adc	r31, r29
    5fe2:	ee 0d       	add	r30, r14
    5fe4:	f1 1d       	adc	r31, r1
    5fe6:	80 81       	ld	r24, Z
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	b3 01       	movw	r22, r6
    5fec:	fd d2       	rcall	.+1530   	; 0x65e8 <fputc>
    5fee:	ee 20       	and	r14, r14
    5ff0:	99 f7       	brne	.-26     	; 0x5fd8 <vfprintf+0x696>
    5ff2:	05 c0       	rjmp	.+10     	; 0x5ffe <vfprintf+0x6bc>
    5ff4:	80 e2       	ldi	r24, 0x20	; 32
    5ff6:	90 e0       	ldi	r25, 0x00	; 0
    5ff8:	b3 01       	movw	r22, r6
    5ffa:	f6 d2       	rcall	.+1516   	; 0x65e8 <fputc>
    5ffc:	8a 94       	dec	r8
    5ffe:	88 20       	and	r8, r8
    6000:	c9 f7       	brne	.-14     	; 0x5ff4 <vfprintf+0x6b2>
    6002:	b6 cc       	rjmp	.-1684   	; 0x5970 <vfprintf+0x2e>
    6004:	f3 01       	movw	r30, r6
    6006:	66 81       	ldd	r22, Z+6	; 0x06
    6008:	77 81       	ldd	r23, Z+7	; 0x07
    600a:	cb 01       	movw	r24, r22
    600c:	61 96       	adiw	r28, 0x11	; 17
    600e:	e2 e1       	ldi	r30, 0x12	; 18
    6010:	70 c0       	rjmp	.+224    	; 0x60f2 <__epilogue_restores__>

00006012 <__mulsi3>:
    6012:	62 9f       	mul	r22, r18
    6014:	d0 01       	movw	r26, r0
    6016:	73 9f       	mul	r23, r19
    6018:	f0 01       	movw	r30, r0
    601a:	82 9f       	mul	r24, r18
    601c:	e0 0d       	add	r30, r0
    601e:	f1 1d       	adc	r31, r1
    6020:	64 9f       	mul	r22, r20
    6022:	e0 0d       	add	r30, r0
    6024:	f1 1d       	adc	r31, r1
    6026:	92 9f       	mul	r25, r18
    6028:	f0 0d       	add	r31, r0
    602a:	83 9f       	mul	r24, r19
    602c:	f0 0d       	add	r31, r0
    602e:	74 9f       	mul	r23, r20
    6030:	f0 0d       	add	r31, r0
    6032:	65 9f       	mul	r22, r21
    6034:	f0 0d       	add	r31, r0
    6036:	99 27       	eor	r25, r25
    6038:	72 9f       	mul	r23, r18
    603a:	b0 0d       	add	r27, r0
    603c:	e1 1d       	adc	r30, r1
    603e:	f9 1f       	adc	r31, r25
    6040:	63 9f       	mul	r22, r19
    6042:	b0 0d       	add	r27, r0
    6044:	e1 1d       	adc	r30, r1
    6046:	f9 1f       	adc	r31, r25
    6048:	bd 01       	movw	r22, r26
    604a:	cf 01       	movw	r24, r30
    604c:	11 24       	eor	r1, r1
    604e:	08 95       	ret

00006050 <__divmodhi4>:
    6050:	97 fb       	bst	r25, 7
    6052:	09 2e       	mov	r0, r25
    6054:	07 26       	eor	r0, r23
    6056:	0a d0       	rcall	.+20     	; 0x606c <__divmodhi4_neg1>
    6058:	77 fd       	sbrc	r23, 7
    605a:	04 d0       	rcall	.+8      	; 0x6064 <__divmodhi4_neg2>
    605c:	65 d0       	rcall	.+202    	; 0x6128 <__udivmodhi4>
    605e:	06 d0       	rcall	.+12     	; 0x606c <__divmodhi4_neg1>
    6060:	00 20       	and	r0, r0
    6062:	1a f4       	brpl	.+6      	; 0x606a <__divmodhi4_exit>

00006064 <__divmodhi4_neg2>:
    6064:	70 95       	com	r23
    6066:	61 95       	neg	r22
    6068:	7f 4f       	sbci	r23, 0xFF	; 255

0000606a <__divmodhi4_exit>:
    606a:	08 95       	ret

0000606c <__divmodhi4_neg1>:
    606c:	f6 f7       	brtc	.-4      	; 0x606a <__divmodhi4_exit>
    606e:	90 95       	com	r25
    6070:	81 95       	neg	r24
    6072:	9f 4f       	sbci	r25, 0xFF	; 255
    6074:	08 95       	ret

00006076 <__udivmodsi4>:
    6076:	a1 e2       	ldi	r26, 0x21	; 33
    6078:	1a 2e       	mov	r1, r26
    607a:	aa 1b       	sub	r26, r26
    607c:	bb 1b       	sub	r27, r27
    607e:	fd 01       	movw	r30, r26
    6080:	0d c0       	rjmp	.+26     	; 0x609c <__udivmodsi4_ep>

00006082 <__udivmodsi4_loop>:
    6082:	aa 1f       	adc	r26, r26
    6084:	bb 1f       	adc	r27, r27
    6086:	ee 1f       	adc	r30, r30
    6088:	ff 1f       	adc	r31, r31
    608a:	a2 17       	cp	r26, r18
    608c:	b3 07       	cpc	r27, r19
    608e:	e4 07       	cpc	r30, r20
    6090:	f5 07       	cpc	r31, r21
    6092:	20 f0       	brcs	.+8      	; 0x609c <__udivmodsi4_ep>
    6094:	a2 1b       	sub	r26, r18
    6096:	b3 0b       	sbc	r27, r19
    6098:	e4 0b       	sbc	r30, r20
    609a:	f5 0b       	sbc	r31, r21

0000609c <__udivmodsi4_ep>:
    609c:	66 1f       	adc	r22, r22
    609e:	77 1f       	adc	r23, r23
    60a0:	88 1f       	adc	r24, r24
    60a2:	99 1f       	adc	r25, r25
    60a4:	1a 94       	dec	r1
    60a6:	69 f7       	brne	.-38     	; 0x6082 <__udivmodsi4_loop>
    60a8:	60 95       	com	r22
    60aa:	70 95       	com	r23
    60ac:	80 95       	com	r24
    60ae:	90 95       	com	r25
    60b0:	9b 01       	movw	r18, r22
    60b2:	ac 01       	movw	r20, r24
    60b4:	bd 01       	movw	r22, r26
    60b6:	cf 01       	movw	r24, r30
    60b8:	08 95       	ret

000060ba <__prologue_saves__>:
    60ba:	2f 92       	push	r2
    60bc:	3f 92       	push	r3
    60be:	4f 92       	push	r4
    60c0:	5f 92       	push	r5
    60c2:	6f 92       	push	r6
    60c4:	7f 92       	push	r7
    60c6:	8f 92       	push	r8
    60c8:	9f 92       	push	r9
    60ca:	af 92       	push	r10
    60cc:	bf 92       	push	r11
    60ce:	cf 92       	push	r12
    60d0:	df 92       	push	r13
    60d2:	ef 92       	push	r14
    60d4:	ff 92       	push	r15
    60d6:	0f 93       	push	r16
    60d8:	1f 93       	push	r17
    60da:	cf 93       	push	r28
    60dc:	df 93       	push	r29
    60de:	cd b7       	in	r28, 0x3d	; 61
    60e0:	de b7       	in	r29, 0x3e	; 62
    60e2:	ca 1b       	sub	r28, r26
    60e4:	db 0b       	sbc	r29, r27
    60e6:	0f b6       	in	r0, 0x3f	; 63
    60e8:	f8 94       	cli
    60ea:	de bf       	out	0x3e, r29	; 62
    60ec:	0f be       	out	0x3f, r0	; 63
    60ee:	cd bf       	out	0x3d, r28	; 61
    60f0:	09 94       	ijmp

000060f2 <__epilogue_restores__>:
    60f2:	2a 88       	ldd	r2, Y+18	; 0x12
    60f4:	39 88       	ldd	r3, Y+17	; 0x11
    60f6:	48 88       	ldd	r4, Y+16	; 0x10
    60f8:	5f 84       	ldd	r5, Y+15	; 0x0f
    60fa:	6e 84       	ldd	r6, Y+14	; 0x0e
    60fc:	7d 84       	ldd	r7, Y+13	; 0x0d
    60fe:	8c 84       	ldd	r8, Y+12	; 0x0c
    6100:	9b 84       	ldd	r9, Y+11	; 0x0b
    6102:	aa 84       	ldd	r10, Y+10	; 0x0a
    6104:	b9 84       	ldd	r11, Y+9	; 0x09
    6106:	c8 84       	ldd	r12, Y+8	; 0x08
    6108:	df 80       	ldd	r13, Y+7	; 0x07
    610a:	ee 80       	ldd	r14, Y+6	; 0x06
    610c:	fd 80       	ldd	r15, Y+5	; 0x05
    610e:	0c 81       	ldd	r16, Y+4	; 0x04
    6110:	1b 81       	ldd	r17, Y+3	; 0x03
    6112:	aa 81       	ldd	r26, Y+2	; 0x02
    6114:	b9 81       	ldd	r27, Y+1	; 0x01
    6116:	ce 0f       	add	r28, r30
    6118:	d1 1d       	adc	r29, r1
    611a:	0f b6       	in	r0, 0x3f	; 63
    611c:	f8 94       	cli
    611e:	de bf       	out	0x3e, r29	; 62
    6120:	0f be       	out	0x3f, r0	; 63
    6122:	cd bf       	out	0x3d, r28	; 61
    6124:	ed 01       	movw	r28, r26
    6126:	08 95       	ret

00006128 <__udivmodhi4>:
    6128:	aa 1b       	sub	r26, r26
    612a:	bb 1b       	sub	r27, r27
    612c:	51 e1       	ldi	r21, 0x11	; 17
    612e:	07 c0       	rjmp	.+14     	; 0x613e <__udivmodhi4_ep>

00006130 <__udivmodhi4_loop>:
    6130:	aa 1f       	adc	r26, r26
    6132:	bb 1f       	adc	r27, r27
    6134:	a6 17       	cp	r26, r22
    6136:	b7 07       	cpc	r27, r23
    6138:	10 f0       	brcs	.+4      	; 0x613e <__udivmodhi4_ep>
    613a:	a6 1b       	sub	r26, r22
    613c:	b7 0b       	sbc	r27, r23

0000613e <__udivmodhi4_ep>:
    613e:	88 1f       	adc	r24, r24
    6140:	99 1f       	adc	r25, r25
    6142:	5a 95       	dec	r21
    6144:	a9 f7       	brne	.-22     	; 0x6130 <__udivmodhi4_loop>
    6146:	80 95       	com	r24
    6148:	90 95       	com	r25
    614a:	bc 01       	movw	r22, r24
    614c:	cd 01       	movw	r24, r26
    614e:	08 95       	ret

00006150 <malloc>:
    6150:	cf 93       	push	r28
    6152:	df 93       	push	r29
    6154:	bc 01       	movw	r22, r24
    6156:	82 30       	cpi	r24, 0x02	; 2
    6158:	91 05       	cpc	r25, r1
    615a:	10 f4       	brcc	.+4      	; 0x6160 <malloc+0x10>
    615c:	62 e0       	ldi	r22, 0x02	; 2
    615e:	70 e0       	ldi	r23, 0x00	; 0
    6160:	a0 91 d3 06 	lds	r26, 0x06D3
    6164:	b0 91 d4 06 	lds	r27, 0x06D4
    6168:	ed 01       	movw	r28, r26
    616a:	e0 e0       	ldi	r30, 0x00	; 0
    616c:	f0 e0       	ldi	r31, 0x00	; 0
    616e:	40 e0       	ldi	r20, 0x00	; 0
    6170:	50 e0       	ldi	r21, 0x00	; 0
    6172:	21 c0       	rjmp	.+66     	; 0x61b6 <malloc+0x66>
    6174:	88 81       	ld	r24, Y
    6176:	99 81       	ldd	r25, Y+1	; 0x01
    6178:	86 17       	cp	r24, r22
    617a:	97 07       	cpc	r25, r23
    617c:	69 f4       	brne	.+26     	; 0x6198 <malloc+0x48>
    617e:	8a 81       	ldd	r24, Y+2	; 0x02
    6180:	9b 81       	ldd	r25, Y+3	; 0x03
    6182:	30 97       	sbiw	r30, 0x00	; 0
    6184:	19 f0       	breq	.+6      	; 0x618c <malloc+0x3c>
    6186:	93 83       	std	Z+3, r25	; 0x03
    6188:	82 83       	std	Z+2, r24	; 0x02
    618a:	04 c0       	rjmp	.+8      	; 0x6194 <malloc+0x44>
    618c:	90 93 d4 06 	sts	0x06D4, r25
    6190:	80 93 d3 06 	sts	0x06D3, r24
    6194:	fe 01       	movw	r30, r28
    6196:	34 c0       	rjmp	.+104    	; 0x6200 <malloc+0xb0>
    6198:	68 17       	cp	r22, r24
    619a:	79 07       	cpc	r23, r25
    619c:	38 f4       	brcc	.+14     	; 0x61ac <malloc+0x5c>
    619e:	41 15       	cp	r20, r1
    61a0:	51 05       	cpc	r21, r1
    61a2:	19 f0       	breq	.+6      	; 0x61aa <malloc+0x5a>
    61a4:	84 17       	cp	r24, r20
    61a6:	95 07       	cpc	r25, r21
    61a8:	08 f4       	brcc	.+2      	; 0x61ac <malloc+0x5c>
    61aa:	ac 01       	movw	r20, r24
    61ac:	fe 01       	movw	r30, r28
    61ae:	8a 81       	ldd	r24, Y+2	; 0x02
    61b0:	9b 81       	ldd	r25, Y+3	; 0x03
    61b2:	9c 01       	movw	r18, r24
    61b4:	e9 01       	movw	r28, r18
    61b6:	20 97       	sbiw	r28, 0x00	; 0
    61b8:	e9 f6       	brne	.-70     	; 0x6174 <malloc+0x24>
    61ba:	41 15       	cp	r20, r1
    61bc:	51 05       	cpc	r21, r1
    61be:	a9 f1       	breq	.+106    	; 0x622a <malloc+0xda>
    61c0:	ca 01       	movw	r24, r20
    61c2:	86 1b       	sub	r24, r22
    61c4:	97 0b       	sbc	r25, r23
    61c6:	04 97       	sbiw	r24, 0x04	; 4
    61c8:	08 f4       	brcc	.+2      	; 0x61cc <malloc+0x7c>
    61ca:	ba 01       	movw	r22, r20
    61cc:	e0 e0       	ldi	r30, 0x00	; 0
    61ce:	f0 e0       	ldi	r31, 0x00	; 0
    61d0:	2a c0       	rjmp	.+84     	; 0x6226 <malloc+0xd6>
    61d2:	8d 91       	ld	r24, X+
    61d4:	9c 91       	ld	r25, X
    61d6:	11 97       	sbiw	r26, 0x01	; 1
    61d8:	84 17       	cp	r24, r20
    61da:	95 07       	cpc	r25, r21
    61dc:	f9 f4       	brne	.+62     	; 0x621c <malloc+0xcc>
    61de:	64 17       	cp	r22, r20
    61e0:	75 07       	cpc	r23, r21
    61e2:	81 f4       	brne	.+32     	; 0x6204 <malloc+0xb4>
    61e4:	12 96       	adiw	r26, 0x02	; 2
    61e6:	8d 91       	ld	r24, X+
    61e8:	9c 91       	ld	r25, X
    61ea:	13 97       	sbiw	r26, 0x03	; 3
    61ec:	30 97       	sbiw	r30, 0x00	; 0
    61ee:	19 f0       	breq	.+6      	; 0x61f6 <malloc+0xa6>
    61f0:	93 83       	std	Z+3, r25	; 0x03
    61f2:	82 83       	std	Z+2, r24	; 0x02
    61f4:	04 c0       	rjmp	.+8      	; 0x61fe <malloc+0xae>
    61f6:	90 93 d4 06 	sts	0x06D4, r25
    61fa:	80 93 d3 06 	sts	0x06D3, r24
    61fe:	fd 01       	movw	r30, r26
    6200:	32 96       	adiw	r30, 0x02	; 2
    6202:	4f c0       	rjmp	.+158    	; 0x62a2 <malloc+0x152>
    6204:	ca 01       	movw	r24, r20
    6206:	86 1b       	sub	r24, r22
    6208:	97 0b       	sbc	r25, r23
    620a:	fd 01       	movw	r30, r26
    620c:	e8 0f       	add	r30, r24
    620e:	f9 1f       	adc	r31, r25
    6210:	61 93       	st	Z+, r22
    6212:	71 93       	st	Z+, r23
    6214:	02 97       	sbiw	r24, 0x02	; 2
    6216:	8d 93       	st	X+, r24
    6218:	9c 93       	st	X, r25
    621a:	43 c0       	rjmp	.+134    	; 0x62a2 <malloc+0x152>
    621c:	fd 01       	movw	r30, r26
    621e:	82 81       	ldd	r24, Z+2	; 0x02
    6220:	93 81       	ldd	r25, Z+3	; 0x03
    6222:	9c 01       	movw	r18, r24
    6224:	d9 01       	movw	r26, r18
    6226:	10 97       	sbiw	r26, 0x00	; 0
    6228:	a1 f6       	brne	.-88     	; 0x61d2 <malloc+0x82>
    622a:	80 91 d1 06 	lds	r24, 0x06D1
    622e:	90 91 d2 06 	lds	r25, 0x06D2
    6232:	89 2b       	or	r24, r25
    6234:	41 f4       	brne	.+16     	; 0x6246 <malloc+0xf6>
    6236:	80 91 b4 03 	lds	r24, 0x03B4
    623a:	90 91 b5 03 	lds	r25, 0x03B5
    623e:	90 93 d2 06 	sts	0x06D2, r25
    6242:	80 93 d1 06 	sts	0x06D1, r24
    6246:	40 91 b6 03 	lds	r20, 0x03B6
    624a:	50 91 b7 03 	lds	r21, 0x03B7
    624e:	41 15       	cp	r20, r1
    6250:	51 05       	cpc	r21, r1
    6252:	41 f4       	brne	.+16     	; 0x6264 <malloc+0x114>
    6254:	4d b7       	in	r20, 0x3d	; 61
    6256:	5e b7       	in	r21, 0x3e	; 62
    6258:	80 91 b2 03 	lds	r24, 0x03B2
    625c:	90 91 b3 03 	lds	r25, 0x03B3
    6260:	48 1b       	sub	r20, r24
    6262:	59 0b       	sbc	r21, r25
    6264:	20 91 d1 06 	lds	r18, 0x06D1
    6268:	30 91 d2 06 	lds	r19, 0x06D2
    626c:	24 17       	cp	r18, r20
    626e:	35 07       	cpc	r19, r21
    6270:	b0 f4       	brcc	.+44     	; 0x629e <malloc+0x14e>
    6272:	ca 01       	movw	r24, r20
    6274:	82 1b       	sub	r24, r18
    6276:	93 0b       	sbc	r25, r19
    6278:	86 17       	cp	r24, r22
    627a:	97 07       	cpc	r25, r23
    627c:	80 f0       	brcs	.+32     	; 0x629e <malloc+0x14e>
    627e:	ab 01       	movw	r20, r22
    6280:	4e 5f       	subi	r20, 0xFE	; 254
    6282:	5f 4f       	sbci	r21, 0xFF	; 255
    6284:	84 17       	cp	r24, r20
    6286:	95 07       	cpc	r25, r21
    6288:	50 f0       	brcs	.+20     	; 0x629e <malloc+0x14e>
    628a:	42 0f       	add	r20, r18
    628c:	53 1f       	adc	r21, r19
    628e:	50 93 d2 06 	sts	0x06D2, r21
    6292:	40 93 d1 06 	sts	0x06D1, r20
    6296:	f9 01       	movw	r30, r18
    6298:	61 93       	st	Z+, r22
    629a:	71 93       	st	Z+, r23
    629c:	02 c0       	rjmp	.+4      	; 0x62a2 <malloc+0x152>
    629e:	e0 e0       	ldi	r30, 0x00	; 0
    62a0:	f0 e0       	ldi	r31, 0x00	; 0
    62a2:	cf 01       	movw	r24, r30
    62a4:	df 91       	pop	r29
    62a6:	cf 91       	pop	r28
    62a8:	08 95       	ret

000062aa <free>:
    62aa:	cf 93       	push	r28
    62ac:	df 93       	push	r29
    62ae:	00 97       	sbiw	r24, 0x00	; 0
    62b0:	09 f4       	brne	.+2      	; 0x62b4 <free+0xa>
    62b2:	50 c0       	rjmp	.+160    	; 0x6354 <free+0xaa>
    62b4:	ec 01       	movw	r28, r24
    62b6:	22 97       	sbiw	r28, 0x02	; 2
    62b8:	1b 82       	std	Y+3, r1	; 0x03
    62ba:	1a 82       	std	Y+2, r1	; 0x02
    62bc:	a0 91 d3 06 	lds	r26, 0x06D3
    62c0:	b0 91 d4 06 	lds	r27, 0x06D4
    62c4:	10 97       	sbiw	r26, 0x00	; 0
    62c6:	09 f1       	breq	.+66     	; 0x630a <free+0x60>
    62c8:	40 e0       	ldi	r20, 0x00	; 0
    62ca:	50 e0       	ldi	r21, 0x00	; 0
    62cc:	ac 17       	cp	r26, r28
    62ce:	bd 07       	cpc	r27, r29
    62d0:	08 f1       	brcs	.+66     	; 0x6314 <free+0x6a>
    62d2:	bb 83       	std	Y+3, r27	; 0x03
    62d4:	aa 83       	std	Y+2, r26	; 0x02
    62d6:	fe 01       	movw	r30, r28
    62d8:	21 91       	ld	r18, Z+
    62da:	31 91       	ld	r19, Z+
    62dc:	e2 0f       	add	r30, r18
    62de:	f3 1f       	adc	r31, r19
    62e0:	ae 17       	cp	r26, r30
    62e2:	bf 07       	cpc	r27, r31
    62e4:	79 f4       	brne	.+30     	; 0x6304 <free+0x5a>
    62e6:	8d 91       	ld	r24, X+
    62e8:	9c 91       	ld	r25, X
    62ea:	11 97       	sbiw	r26, 0x01	; 1
    62ec:	28 0f       	add	r18, r24
    62ee:	39 1f       	adc	r19, r25
    62f0:	2e 5f       	subi	r18, 0xFE	; 254
    62f2:	3f 4f       	sbci	r19, 0xFF	; 255
    62f4:	39 83       	std	Y+1, r19	; 0x01
    62f6:	28 83       	st	Y, r18
    62f8:	12 96       	adiw	r26, 0x02	; 2
    62fa:	8d 91       	ld	r24, X+
    62fc:	9c 91       	ld	r25, X
    62fe:	13 97       	sbiw	r26, 0x03	; 3
    6300:	9b 83       	std	Y+3, r25	; 0x03
    6302:	8a 83       	std	Y+2, r24	; 0x02
    6304:	41 15       	cp	r20, r1
    6306:	51 05       	cpc	r21, r1
    6308:	71 f4       	brne	.+28     	; 0x6326 <free+0x7c>
    630a:	d0 93 d4 06 	sts	0x06D4, r29
    630e:	c0 93 d3 06 	sts	0x06D3, r28
    6312:	20 c0       	rjmp	.+64     	; 0x6354 <free+0xaa>
    6314:	12 96       	adiw	r26, 0x02	; 2
    6316:	8d 91       	ld	r24, X+
    6318:	9c 91       	ld	r25, X
    631a:	13 97       	sbiw	r26, 0x03	; 3
    631c:	ad 01       	movw	r20, r26
    631e:	00 97       	sbiw	r24, 0x00	; 0
    6320:	11 f0       	breq	.+4      	; 0x6326 <free+0x7c>
    6322:	dc 01       	movw	r26, r24
    6324:	d3 cf       	rjmp	.-90     	; 0x62cc <free+0x22>
    6326:	fa 01       	movw	r30, r20
    6328:	d3 83       	std	Z+3, r29	; 0x03
    632a:	c2 83       	std	Z+2, r28	; 0x02
    632c:	21 91       	ld	r18, Z+
    632e:	31 91       	ld	r19, Z+
    6330:	e2 0f       	add	r30, r18
    6332:	f3 1f       	adc	r31, r19
    6334:	ce 17       	cp	r28, r30
    6336:	df 07       	cpc	r29, r31
    6338:	69 f4       	brne	.+26     	; 0x6354 <free+0xaa>
    633a:	88 81       	ld	r24, Y
    633c:	99 81       	ldd	r25, Y+1	; 0x01
    633e:	28 0f       	add	r18, r24
    6340:	39 1f       	adc	r19, r25
    6342:	2e 5f       	subi	r18, 0xFE	; 254
    6344:	3f 4f       	sbci	r19, 0xFF	; 255
    6346:	fa 01       	movw	r30, r20
    6348:	31 83       	std	Z+1, r19	; 0x01
    634a:	20 83       	st	Z, r18
    634c:	8a 81       	ldd	r24, Y+2	; 0x02
    634e:	9b 81       	ldd	r25, Y+3	; 0x03
    6350:	93 83       	std	Z+3, r25	; 0x03
    6352:	82 83       	std	Z+2, r24	; 0x02
    6354:	df 91       	pop	r29
    6356:	cf 91       	pop	r28
    6358:	08 95       	ret

0000635a <do_rand>:
    635a:	a0 e0       	ldi	r26, 0x00	; 0
    635c:	b0 e0       	ldi	r27, 0x00	; 0
    635e:	e2 eb       	ldi	r30, 0xB2	; 178
    6360:	f1 e3       	ldi	r31, 0x31	; 49
    6362:	b3 ce       	rjmp	.-666    	; 0x60ca <__prologue_saves__+0x10>
    6364:	ec 01       	movw	r28, r24
    6366:	a8 80       	ld	r10, Y
    6368:	b9 80       	ldd	r11, Y+1	; 0x01
    636a:	ca 80       	ldd	r12, Y+2	; 0x02
    636c:	db 80       	ldd	r13, Y+3	; 0x03
    636e:	a1 14       	cp	r10, r1
    6370:	b1 04       	cpc	r11, r1
    6372:	c1 04       	cpc	r12, r1
    6374:	d1 04       	cpc	r13, r1
    6376:	41 f4       	brne	.+16     	; 0x6388 <do_rand+0x2e>
    6378:	84 e2       	ldi	r24, 0x24	; 36
    637a:	a8 2e       	mov	r10, r24
    637c:	89 ed       	ldi	r24, 0xD9	; 217
    637e:	b8 2e       	mov	r11, r24
    6380:	8b e5       	ldi	r24, 0x5B	; 91
    6382:	c8 2e       	mov	r12, r24
    6384:	87 e0       	ldi	r24, 0x07	; 7
    6386:	d8 2e       	mov	r13, r24
    6388:	c6 01       	movw	r24, r12
    638a:	b5 01       	movw	r22, r10
    638c:	2d e1       	ldi	r18, 0x1D	; 29
    638e:	33 ef       	ldi	r19, 0xF3	; 243
    6390:	41 e0       	ldi	r20, 0x01	; 1
    6392:	50 e0       	ldi	r21, 0x00	; 0
    6394:	fa d1       	rcall	.+1012   	; 0x678a <__divmodsi4>
    6396:	27 ea       	ldi	r18, 0xA7	; 167
    6398:	31 e4       	ldi	r19, 0x41	; 65
    639a:	40 e0       	ldi	r20, 0x00	; 0
    639c:	50 e0       	ldi	r21, 0x00	; 0
    639e:	39 de       	rcall	.-910    	; 0x6012 <__mulsi3>
    63a0:	7b 01       	movw	r14, r22
    63a2:	8c 01       	movw	r16, r24
    63a4:	c6 01       	movw	r24, r12
    63a6:	b5 01       	movw	r22, r10
    63a8:	2d e1       	ldi	r18, 0x1D	; 29
    63aa:	33 ef       	ldi	r19, 0xF3	; 243
    63ac:	41 e0       	ldi	r20, 0x01	; 1
    63ae:	50 e0       	ldi	r21, 0x00	; 0
    63b0:	ec d1       	rcall	.+984    	; 0x678a <__divmodsi4>
    63b2:	ca 01       	movw	r24, r20
    63b4:	b9 01       	movw	r22, r18
    63b6:	2c ee       	ldi	r18, 0xEC	; 236
    63b8:	34 ef       	ldi	r19, 0xF4	; 244
    63ba:	4f ef       	ldi	r20, 0xFF	; 255
    63bc:	5f ef       	ldi	r21, 0xFF	; 255
    63be:	29 de       	rcall	.-942    	; 0x6012 <__mulsi3>
    63c0:	6e 0d       	add	r22, r14
    63c2:	7f 1d       	adc	r23, r15
    63c4:	80 1f       	adc	r24, r16
    63c6:	91 1f       	adc	r25, r17
    63c8:	97 ff       	sbrs	r25, 7
    63ca:	04 c0       	rjmp	.+8      	; 0x63d4 <do_rand+0x7a>
    63cc:	61 50       	subi	r22, 0x01	; 1
    63ce:	70 40       	sbci	r23, 0x00	; 0
    63d0:	80 40       	sbci	r24, 0x00	; 0
    63d2:	90 48       	sbci	r25, 0x80	; 128
    63d4:	68 83       	st	Y, r22
    63d6:	79 83       	std	Y+1, r23	; 0x01
    63d8:	8a 83       	std	Y+2, r24	; 0x02
    63da:	9b 83       	std	Y+3, r25	; 0x03
    63dc:	9b 01       	movw	r18, r22
    63de:	3f 77       	andi	r19, 0x7F	; 127
    63e0:	c9 01       	movw	r24, r18
    63e2:	cd b7       	in	r28, 0x3d	; 61
    63e4:	de b7       	in	r29, 0x3e	; 62
    63e6:	ea e0       	ldi	r30, 0x0A	; 10
    63e8:	8c ce       	rjmp	.-744    	; 0x6102 <__epilogue_restores__+0x10>

000063ea <rand_r>:
    63ea:	b7 df       	rcall	.-146    	; 0x635a <do_rand>
    63ec:	08 95       	ret

000063ee <rand>:
    63ee:	88 eb       	ldi	r24, 0xB8	; 184
    63f0:	93 e0       	ldi	r25, 0x03	; 3
    63f2:	b3 df       	rcall	.-154    	; 0x635a <do_rand>
    63f4:	08 95       	ret

000063f6 <srand>:
    63f6:	a0 e0       	ldi	r26, 0x00	; 0
    63f8:	b0 e0       	ldi	r27, 0x00	; 0
    63fa:	80 93 b8 03 	sts	0x03B8, r24
    63fe:	90 93 b9 03 	sts	0x03B9, r25
    6402:	a0 93 ba 03 	sts	0x03BA, r26
    6406:	b0 93 bb 03 	sts	0x03BB, r27
    640a:	08 95       	ret

0000640c <__ftoa_engine>:
    640c:	28 30       	cpi	r18, 0x08	; 8
    640e:	08 f0       	brcs	.+2      	; 0x6412 <__ftoa_engine+0x6>
    6410:	27 e0       	ldi	r18, 0x07	; 7
    6412:	33 27       	eor	r19, r19
    6414:	da 01       	movw	r26, r20
    6416:	99 0f       	add	r25, r25
    6418:	31 1d       	adc	r19, r1
    641a:	87 fd       	sbrc	r24, 7
    641c:	91 60       	ori	r25, 0x01	; 1
    641e:	00 96       	adiw	r24, 0x00	; 0
    6420:	61 05       	cpc	r22, r1
    6422:	71 05       	cpc	r23, r1
    6424:	39 f4       	brne	.+14     	; 0x6434 <__ftoa_engine+0x28>
    6426:	32 60       	ori	r19, 0x02	; 2
    6428:	2e 5f       	subi	r18, 0xFE	; 254
    642a:	3d 93       	st	X+, r19
    642c:	30 e3       	ldi	r19, 0x30	; 48
    642e:	2a 95       	dec	r18
    6430:	e1 f7       	brne	.-8      	; 0x642a <__ftoa_engine+0x1e>
    6432:	08 95       	ret
    6434:	9f 3f       	cpi	r25, 0xFF	; 255
    6436:	30 f0       	brcs	.+12     	; 0x6444 <__ftoa_engine+0x38>
    6438:	80 38       	cpi	r24, 0x80	; 128
    643a:	71 05       	cpc	r23, r1
    643c:	61 05       	cpc	r22, r1
    643e:	09 f0       	breq	.+2      	; 0x6442 <__ftoa_engine+0x36>
    6440:	3c 5f       	subi	r19, 0xFC	; 252
    6442:	3c 5f       	subi	r19, 0xFC	; 252
    6444:	3d 93       	st	X+, r19
    6446:	91 30       	cpi	r25, 0x01	; 1
    6448:	08 f0       	brcs	.+2      	; 0x644c <__ftoa_engine+0x40>
    644a:	80 68       	ori	r24, 0x80	; 128
    644c:	91 1d       	adc	r25, r1
    644e:	df 93       	push	r29
    6450:	cf 93       	push	r28
    6452:	1f 93       	push	r17
    6454:	0f 93       	push	r16
    6456:	ff 92       	push	r15
    6458:	ef 92       	push	r14
    645a:	19 2f       	mov	r17, r25
    645c:	98 7f       	andi	r25, 0xF8	; 248
    645e:	96 95       	lsr	r25
    6460:	e9 2f       	mov	r30, r25
    6462:	96 95       	lsr	r25
    6464:	96 95       	lsr	r25
    6466:	e9 0f       	add	r30, r25
    6468:	ff 27       	eor	r31, r31
    646a:	ef 53       	subi	r30, 0x3F	; 63
    646c:	fa 4f       	sbci	r31, 0xFA	; 250
    646e:	99 27       	eor	r25, r25
    6470:	33 27       	eor	r19, r19
    6472:	ee 24       	eor	r14, r14
    6474:	ff 24       	eor	r15, r15
    6476:	a7 01       	movw	r20, r14
    6478:	e7 01       	movw	r28, r14
    647a:	05 90       	lpm	r0, Z+
    647c:	08 94       	sec
    647e:	07 94       	ror	r0
    6480:	28 f4       	brcc	.+10     	; 0x648c <__ftoa_engine+0x80>
    6482:	36 0f       	add	r19, r22
    6484:	e7 1e       	adc	r14, r23
    6486:	f8 1e       	adc	r15, r24
    6488:	49 1f       	adc	r20, r25
    648a:	51 1d       	adc	r21, r1
    648c:	66 0f       	add	r22, r22
    648e:	77 1f       	adc	r23, r23
    6490:	88 1f       	adc	r24, r24
    6492:	99 1f       	adc	r25, r25
    6494:	06 94       	lsr	r0
    6496:	a1 f7       	brne	.-24     	; 0x6480 <__ftoa_engine+0x74>
    6498:	05 90       	lpm	r0, Z+
    649a:	07 94       	ror	r0
    649c:	28 f4       	brcc	.+10     	; 0x64a8 <__ftoa_engine+0x9c>
    649e:	e7 0e       	add	r14, r23
    64a0:	f8 1e       	adc	r15, r24
    64a2:	49 1f       	adc	r20, r25
    64a4:	56 1f       	adc	r21, r22
    64a6:	c1 1d       	adc	r28, r1
    64a8:	77 0f       	add	r23, r23
    64aa:	88 1f       	adc	r24, r24
    64ac:	99 1f       	adc	r25, r25
    64ae:	66 1f       	adc	r22, r22
    64b0:	06 94       	lsr	r0
    64b2:	a1 f7       	brne	.-24     	; 0x649c <__ftoa_engine+0x90>
    64b4:	05 90       	lpm	r0, Z+
    64b6:	07 94       	ror	r0
    64b8:	28 f4       	brcc	.+10     	; 0x64c4 <__ftoa_engine+0xb8>
    64ba:	f8 0e       	add	r15, r24
    64bc:	49 1f       	adc	r20, r25
    64be:	56 1f       	adc	r21, r22
    64c0:	c7 1f       	adc	r28, r23
    64c2:	d1 1d       	adc	r29, r1
    64c4:	88 0f       	add	r24, r24
    64c6:	99 1f       	adc	r25, r25
    64c8:	66 1f       	adc	r22, r22
    64ca:	77 1f       	adc	r23, r23
    64cc:	06 94       	lsr	r0
    64ce:	a1 f7       	brne	.-24     	; 0x64b8 <__ftoa_engine+0xac>
    64d0:	05 90       	lpm	r0, Z+
    64d2:	07 94       	ror	r0
    64d4:	20 f4       	brcc	.+8      	; 0x64de <__ftoa_engine+0xd2>
    64d6:	49 0f       	add	r20, r25
    64d8:	56 1f       	adc	r21, r22
    64da:	c7 1f       	adc	r28, r23
    64dc:	d8 1f       	adc	r29, r24
    64de:	99 0f       	add	r25, r25
    64e0:	66 1f       	adc	r22, r22
    64e2:	77 1f       	adc	r23, r23
    64e4:	88 1f       	adc	r24, r24
    64e6:	06 94       	lsr	r0
    64e8:	a9 f7       	brne	.-22     	; 0x64d4 <__ftoa_engine+0xc8>
    64ea:	84 91       	lpm	r24, Z+
    64ec:	10 95       	com	r17
    64ee:	17 70       	andi	r17, 0x07	; 7
    64f0:	41 f0       	breq	.+16     	; 0x6502 <__ftoa_engine+0xf6>
    64f2:	d6 95       	lsr	r29
    64f4:	c7 95       	ror	r28
    64f6:	57 95       	ror	r21
    64f8:	47 95       	ror	r20
    64fa:	f7 94       	ror	r15
    64fc:	e7 94       	ror	r14
    64fe:	1a 95       	dec	r17
    6500:	c1 f7       	brne	.-16     	; 0x64f2 <__ftoa_engine+0xe6>
    6502:	e7 e6       	ldi	r30, 0x67	; 103
    6504:	f5 e0       	ldi	r31, 0x05	; 5
    6506:	68 94       	set
    6508:	15 90       	lpm	r1, Z+
    650a:	15 91       	lpm	r17, Z+
    650c:	35 91       	lpm	r19, Z+
    650e:	65 91       	lpm	r22, Z+
    6510:	95 91       	lpm	r25, Z+
    6512:	05 90       	lpm	r0, Z+
    6514:	7f e2       	ldi	r23, 0x2F	; 47
    6516:	73 95       	inc	r23
    6518:	e1 18       	sub	r14, r1
    651a:	f1 0a       	sbc	r15, r17
    651c:	43 0b       	sbc	r20, r19
    651e:	56 0b       	sbc	r21, r22
    6520:	c9 0b       	sbc	r28, r25
    6522:	d0 09       	sbc	r29, r0
    6524:	c0 f7       	brcc	.-16     	; 0x6516 <__ftoa_engine+0x10a>
    6526:	e1 0c       	add	r14, r1
    6528:	f1 1e       	adc	r15, r17
    652a:	43 1f       	adc	r20, r19
    652c:	56 1f       	adc	r21, r22
    652e:	c9 1f       	adc	r28, r25
    6530:	d0 1d       	adc	r29, r0
    6532:	7e f4       	brtc	.+30     	; 0x6552 <__ftoa_engine+0x146>
    6534:	70 33       	cpi	r23, 0x30	; 48
    6536:	11 f4       	brne	.+4      	; 0x653c <__ftoa_engine+0x130>
    6538:	8a 95       	dec	r24
    653a:	e6 cf       	rjmp	.-52     	; 0x6508 <__ftoa_engine+0xfc>
    653c:	e8 94       	clt
    653e:	01 50       	subi	r16, 0x01	; 1
    6540:	30 f0       	brcs	.+12     	; 0x654e <__ftoa_engine+0x142>
    6542:	08 0f       	add	r16, r24
    6544:	0a f4       	brpl	.+2      	; 0x6548 <__ftoa_engine+0x13c>
    6546:	00 27       	eor	r16, r16
    6548:	02 17       	cp	r16, r18
    654a:	08 f4       	brcc	.+2      	; 0x654e <__ftoa_engine+0x142>
    654c:	20 2f       	mov	r18, r16
    654e:	23 95       	inc	r18
    6550:	02 2f       	mov	r16, r18
    6552:	7a 33       	cpi	r23, 0x3A	; 58
    6554:	28 f0       	brcs	.+10     	; 0x6560 <__ftoa_engine+0x154>
    6556:	79 e3       	ldi	r23, 0x39	; 57
    6558:	7d 93       	st	X+, r23
    655a:	2a 95       	dec	r18
    655c:	e9 f7       	brne	.-6      	; 0x6558 <__ftoa_engine+0x14c>
    655e:	10 c0       	rjmp	.+32     	; 0x6580 <__ftoa_engine+0x174>
    6560:	7d 93       	st	X+, r23
    6562:	2a 95       	dec	r18
    6564:	89 f6       	brne	.-94     	; 0x6508 <__ftoa_engine+0xfc>
    6566:	06 94       	lsr	r0
    6568:	97 95       	ror	r25
    656a:	67 95       	ror	r22
    656c:	37 95       	ror	r19
    656e:	17 95       	ror	r17
    6570:	17 94       	ror	r1
    6572:	e1 18       	sub	r14, r1
    6574:	f1 0a       	sbc	r15, r17
    6576:	43 0b       	sbc	r20, r19
    6578:	56 0b       	sbc	r21, r22
    657a:	c9 0b       	sbc	r28, r25
    657c:	d0 09       	sbc	r29, r0
    657e:	98 f0       	brcs	.+38     	; 0x65a6 <__ftoa_engine+0x19a>
    6580:	23 95       	inc	r18
    6582:	7e 91       	ld	r23, -X
    6584:	73 95       	inc	r23
    6586:	7a 33       	cpi	r23, 0x3A	; 58
    6588:	08 f0       	brcs	.+2      	; 0x658c <__ftoa_engine+0x180>
    658a:	70 e3       	ldi	r23, 0x30	; 48
    658c:	7c 93       	st	X, r23
    658e:	20 13       	cpse	r18, r16
    6590:	b8 f7       	brcc	.-18     	; 0x6580 <__ftoa_engine+0x174>
    6592:	7e 91       	ld	r23, -X
    6594:	70 61       	ori	r23, 0x10	; 16
    6596:	7d 93       	st	X+, r23
    6598:	30 f0       	brcs	.+12     	; 0x65a6 <__ftoa_engine+0x19a>
    659a:	83 95       	inc	r24
    659c:	71 e3       	ldi	r23, 0x31	; 49
    659e:	7d 93       	st	X+, r23
    65a0:	70 e3       	ldi	r23, 0x30	; 48
    65a2:	2a 95       	dec	r18
    65a4:	e1 f7       	brne	.-8      	; 0x659e <__ftoa_engine+0x192>
    65a6:	11 24       	eor	r1, r1
    65a8:	ef 90       	pop	r14
    65aa:	ff 90       	pop	r15
    65ac:	0f 91       	pop	r16
    65ae:	1f 91       	pop	r17
    65b0:	cf 91       	pop	r28
    65b2:	df 91       	pop	r29
    65b4:	99 27       	eor	r25, r25
    65b6:	87 fd       	sbrc	r24, 7
    65b8:	90 95       	com	r25
    65ba:	08 95       	ret

000065bc <strnlen_P>:
    65bc:	fc 01       	movw	r30, r24
    65be:	05 90       	lpm	r0, Z+
    65c0:	61 50       	subi	r22, 0x01	; 1
    65c2:	70 40       	sbci	r23, 0x00	; 0
    65c4:	01 10       	cpse	r0, r1
    65c6:	d8 f7       	brcc	.-10     	; 0x65be <strnlen_P+0x2>
    65c8:	80 95       	com	r24
    65ca:	90 95       	com	r25
    65cc:	8e 0f       	add	r24, r30
    65ce:	9f 1f       	adc	r25, r31
    65d0:	08 95       	ret

000065d2 <strnlen>:
    65d2:	fc 01       	movw	r30, r24
    65d4:	61 50       	subi	r22, 0x01	; 1
    65d6:	70 40       	sbci	r23, 0x00	; 0
    65d8:	01 90       	ld	r0, Z+
    65da:	01 10       	cpse	r0, r1
    65dc:	d8 f7       	brcc	.-10     	; 0x65d4 <strnlen+0x2>
    65de:	80 95       	com	r24
    65e0:	90 95       	com	r25
    65e2:	8e 0f       	add	r24, r30
    65e4:	9f 1f       	adc	r25, r31
    65e6:	08 95       	ret

000065e8 <fputc>:
    65e8:	0f 93       	push	r16
    65ea:	1f 93       	push	r17
    65ec:	cf 93       	push	r28
    65ee:	df 93       	push	r29
    65f0:	8c 01       	movw	r16, r24
    65f2:	eb 01       	movw	r28, r22
    65f4:	8b 81       	ldd	r24, Y+3	; 0x03
    65f6:	81 ff       	sbrs	r24, 1
    65f8:	1b c0       	rjmp	.+54     	; 0x6630 <fputc+0x48>
    65fa:	82 ff       	sbrs	r24, 2
    65fc:	0d c0       	rjmp	.+26     	; 0x6618 <fputc+0x30>
    65fe:	2e 81       	ldd	r18, Y+6	; 0x06
    6600:	3f 81       	ldd	r19, Y+7	; 0x07
    6602:	8c 81       	ldd	r24, Y+4	; 0x04
    6604:	9d 81       	ldd	r25, Y+5	; 0x05
    6606:	28 17       	cp	r18, r24
    6608:	39 07       	cpc	r19, r25
    660a:	64 f4       	brge	.+24     	; 0x6624 <fputc+0x3c>
    660c:	e8 81       	ld	r30, Y
    660e:	f9 81       	ldd	r31, Y+1	; 0x01
    6610:	01 93       	st	Z+, r16
    6612:	f9 83       	std	Y+1, r31	; 0x01
    6614:	e8 83       	st	Y, r30
    6616:	06 c0       	rjmp	.+12     	; 0x6624 <fputc+0x3c>
    6618:	e8 85       	ldd	r30, Y+8	; 0x08
    661a:	f9 85       	ldd	r31, Y+9	; 0x09
    661c:	80 2f       	mov	r24, r16
    661e:	09 95       	icall
    6620:	89 2b       	or	r24, r25
    6622:	31 f4       	brne	.+12     	; 0x6630 <fputc+0x48>
    6624:	8e 81       	ldd	r24, Y+6	; 0x06
    6626:	9f 81       	ldd	r25, Y+7	; 0x07
    6628:	01 96       	adiw	r24, 0x01	; 1
    662a:	9f 83       	std	Y+7, r25	; 0x07
    662c:	8e 83       	std	Y+6, r24	; 0x06
    662e:	02 c0       	rjmp	.+4      	; 0x6634 <fputc+0x4c>
    6630:	0f ef       	ldi	r16, 0xFF	; 255
    6632:	1f ef       	ldi	r17, 0xFF	; 255
    6634:	c8 01       	movw	r24, r16
    6636:	df 91       	pop	r29
    6638:	cf 91       	pop	r28
    663a:	1f 91       	pop	r17
    663c:	0f 91       	pop	r16
    663e:	08 95       	ret

00006640 <printf>:
    6640:	a0 e0       	ldi	r26, 0x00	; 0
    6642:	b0 e0       	ldi	r27, 0x00	; 0
    6644:	e5 e2       	ldi	r30, 0x25	; 37
    6646:	f3 e3       	ldi	r31, 0x33	; 51
    6648:	48 cd       	rjmp	.-1392   	; 0x60da <__prologue_saves__+0x20>
    664a:	fe 01       	movw	r30, r28
    664c:	35 96       	adiw	r30, 0x05	; 5
    664e:	61 91       	ld	r22, Z+
    6650:	71 91       	ld	r23, Z+
    6652:	80 91 d7 06 	lds	r24, 0x06D7
    6656:	90 91 d8 06 	lds	r25, 0x06D8
    665a:	af 01       	movw	r20, r30
    665c:	72 d9       	rcall	.-3356   	; 0x5942 <vfprintf>
    665e:	20 96       	adiw	r28, 0x00	; 0
    6660:	e2 e0       	ldi	r30, 0x02	; 2
    6662:	57 cd       	rjmp	.-1362   	; 0x6112 <__epilogue_restores__+0x20>

00006664 <puts>:
    6664:	0f 93       	push	r16
    6666:	1f 93       	push	r17
    6668:	cf 93       	push	r28
    666a:	df 93       	push	r29
    666c:	8c 01       	movw	r16, r24
    666e:	e0 91 d7 06 	lds	r30, 0x06D7
    6672:	f0 91 d8 06 	lds	r31, 0x06D8
    6676:	83 81       	ldd	r24, Z+3	; 0x03
    6678:	81 ff       	sbrs	r24, 1
    667a:	21 c0       	rjmp	.+66     	; 0x66be <puts+0x5a>
    667c:	c0 e0       	ldi	r28, 0x00	; 0
    667e:	d0 e0       	ldi	r29, 0x00	; 0
    6680:	0d c0       	rjmp	.+26     	; 0x669c <puts+0x38>
    6682:	e0 91 d7 06 	lds	r30, 0x06D7
    6686:	f0 91 d8 06 	lds	r31, 0x06D8
    668a:	20 85       	ldd	r18, Z+8	; 0x08
    668c:	31 85       	ldd	r19, Z+9	; 0x09
    668e:	bf 01       	movw	r22, r30
    6690:	f9 01       	movw	r30, r18
    6692:	09 95       	icall
    6694:	89 2b       	or	r24, r25
    6696:	11 f0       	breq	.+4      	; 0x669c <puts+0x38>
    6698:	cf ef       	ldi	r28, 0xFF	; 255
    669a:	df ef       	ldi	r29, 0xFF	; 255
    669c:	f8 01       	movw	r30, r16
    669e:	81 91       	ld	r24, Z+
    66a0:	8f 01       	movw	r16, r30
    66a2:	88 23       	and	r24, r24
    66a4:	71 f7       	brne	.-36     	; 0x6682 <puts+0x1e>
    66a6:	e0 91 d7 06 	lds	r30, 0x06D7
    66aa:	f0 91 d8 06 	lds	r31, 0x06D8
    66ae:	20 85       	ldd	r18, Z+8	; 0x08
    66b0:	31 85       	ldd	r19, Z+9	; 0x09
    66b2:	8a e0       	ldi	r24, 0x0A	; 10
    66b4:	bf 01       	movw	r22, r30
    66b6:	f9 01       	movw	r30, r18
    66b8:	09 95       	icall
    66ba:	89 2b       	or	r24, r25
    66bc:	11 f0       	breq	.+4      	; 0x66c2 <puts+0x5e>
    66be:	cf ef       	ldi	r28, 0xFF	; 255
    66c0:	df ef       	ldi	r29, 0xFF	; 255
    66c2:	ce 01       	movw	r24, r28
    66c4:	df 91       	pop	r29
    66c6:	cf 91       	pop	r28
    66c8:	1f 91       	pop	r17
    66ca:	0f 91       	pop	r16
    66cc:	08 95       	ret

000066ce <__ultoa_invert>:
    66ce:	fa 01       	movw	r30, r20
    66d0:	aa 27       	eor	r26, r26
    66d2:	28 30       	cpi	r18, 0x08	; 8
    66d4:	51 f1       	breq	.+84     	; 0x672a <__ultoa_invert+0x5c>
    66d6:	20 31       	cpi	r18, 0x10	; 16
    66d8:	81 f1       	breq	.+96     	; 0x673a <__ultoa_invert+0x6c>
    66da:	e8 94       	clt
    66dc:	6f 93       	push	r22
    66de:	6e 7f       	andi	r22, 0xFE	; 254
    66e0:	6e 5f       	subi	r22, 0xFE	; 254
    66e2:	7f 4f       	sbci	r23, 0xFF	; 255
    66e4:	8f 4f       	sbci	r24, 0xFF	; 255
    66e6:	9f 4f       	sbci	r25, 0xFF	; 255
    66e8:	af 4f       	sbci	r26, 0xFF	; 255
    66ea:	b1 e0       	ldi	r27, 0x01	; 1
    66ec:	3e d0       	rcall	.+124    	; 0x676a <__ultoa_invert+0x9c>
    66ee:	b4 e0       	ldi	r27, 0x04	; 4
    66f0:	3c d0       	rcall	.+120    	; 0x676a <__ultoa_invert+0x9c>
    66f2:	67 0f       	add	r22, r23
    66f4:	78 1f       	adc	r23, r24
    66f6:	89 1f       	adc	r24, r25
    66f8:	9a 1f       	adc	r25, r26
    66fa:	a1 1d       	adc	r26, r1
    66fc:	68 0f       	add	r22, r24
    66fe:	79 1f       	adc	r23, r25
    6700:	8a 1f       	adc	r24, r26
    6702:	91 1d       	adc	r25, r1
    6704:	a1 1d       	adc	r26, r1
    6706:	6a 0f       	add	r22, r26
    6708:	71 1d       	adc	r23, r1
    670a:	81 1d       	adc	r24, r1
    670c:	91 1d       	adc	r25, r1
    670e:	a1 1d       	adc	r26, r1
    6710:	20 d0       	rcall	.+64     	; 0x6752 <__ultoa_invert+0x84>
    6712:	09 f4       	brne	.+2      	; 0x6716 <__ultoa_invert+0x48>
    6714:	68 94       	set
    6716:	3f 91       	pop	r19
    6718:	2a e0       	ldi	r18, 0x0A	; 10
    671a:	26 9f       	mul	r18, r22
    671c:	11 24       	eor	r1, r1
    671e:	30 19       	sub	r19, r0
    6720:	30 5d       	subi	r19, 0xD0	; 208
    6722:	31 93       	st	Z+, r19
    6724:	de f6       	brtc	.-74     	; 0x66dc <__ultoa_invert+0xe>
    6726:	cf 01       	movw	r24, r30
    6728:	08 95       	ret
    672a:	46 2f       	mov	r20, r22
    672c:	47 70       	andi	r20, 0x07	; 7
    672e:	40 5d       	subi	r20, 0xD0	; 208
    6730:	41 93       	st	Z+, r20
    6732:	b3 e0       	ldi	r27, 0x03	; 3
    6734:	0f d0       	rcall	.+30     	; 0x6754 <__ultoa_invert+0x86>
    6736:	c9 f7       	brne	.-14     	; 0x672a <__ultoa_invert+0x5c>
    6738:	f6 cf       	rjmp	.-20     	; 0x6726 <__ultoa_invert+0x58>
    673a:	46 2f       	mov	r20, r22
    673c:	4f 70       	andi	r20, 0x0F	; 15
    673e:	40 5d       	subi	r20, 0xD0	; 208
    6740:	4a 33       	cpi	r20, 0x3A	; 58
    6742:	18 f0       	brcs	.+6      	; 0x674a <__ultoa_invert+0x7c>
    6744:	49 5d       	subi	r20, 0xD9	; 217
    6746:	31 fd       	sbrc	r19, 1
    6748:	40 52       	subi	r20, 0x20	; 32
    674a:	41 93       	st	Z+, r20
    674c:	02 d0       	rcall	.+4      	; 0x6752 <__ultoa_invert+0x84>
    674e:	a9 f7       	brne	.-22     	; 0x673a <__ultoa_invert+0x6c>
    6750:	ea cf       	rjmp	.-44     	; 0x6726 <__ultoa_invert+0x58>
    6752:	b4 e0       	ldi	r27, 0x04	; 4
    6754:	a6 95       	lsr	r26
    6756:	97 95       	ror	r25
    6758:	87 95       	ror	r24
    675a:	77 95       	ror	r23
    675c:	67 95       	ror	r22
    675e:	ba 95       	dec	r27
    6760:	c9 f7       	brne	.-14     	; 0x6754 <__ultoa_invert+0x86>
    6762:	00 97       	sbiw	r24, 0x00	; 0
    6764:	61 05       	cpc	r22, r1
    6766:	71 05       	cpc	r23, r1
    6768:	08 95       	ret
    676a:	9b 01       	movw	r18, r22
    676c:	ac 01       	movw	r20, r24
    676e:	0a 2e       	mov	r0, r26
    6770:	06 94       	lsr	r0
    6772:	57 95       	ror	r21
    6774:	47 95       	ror	r20
    6776:	37 95       	ror	r19
    6778:	27 95       	ror	r18
    677a:	ba 95       	dec	r27
    677c:	c9 f7       	brne	.-14     	; 0x6770 <__ultoa_invert+0xa2>
    677e:	62 0f       	add	r22, r18
    6780:	73 1f       	adc	r23, r19
    6782:	84 1f       	adc	r24, r20
    6784:	95 1f       	adc	r25, r21
    6786:	a0 1d       	adc	r26, r0
    6788:	08 95       	ret

0000678a <__divmodsi4>:
    678a:	97 fb       	bst	r25, 7
    678c:	09 2e       	mov	r0, r25
    678e:	05 26       	eor	r0, r21
    6790:	0e d0       	rcall	.+28     	; 0x67ae <__divmodsi4_neg1>
    6792:	57 fd       	sbrc	r21, 7
    6794:	04 d0       	rcall	.+8      	; 0x679e <__divmodsi4_neg2>
    6796:	6f dc       	rcall	.-1826   	; 0x6076 <__udivmodsi4>
    6798:	0a d0       	rcall	.+20     	; 0x67ae <__divmodsi4_neg1>
    679a:	00 1c       	adc	r0, r0
    679c:	38 f4       	brcc	.+14     	; 0x67ac <__divmodsi4_exit>

0000679e <__divmodsi4_neg2>:
    679e:	50 95       	com	r21
    67a0:	40 95       	com	r20
    67a2:	30 95       	com	r19
    67a4:	21 95       	neg	r18
    67a6:	3f 4f       	sbci	r19, 0xFF	; 255
    67a8:	4f 4f       	sbci	r20, 0xFF	; 255
    67aa:	5f 4f       	sbci	r21, 0xFF	; 255

000067ac <__divmodsi4_exit>:
    67ac:	08 95       	ret

000067ae <__divmodsi4_neg1>:
    67ae:	f6 f7       	brtc	.-4      	; 0x67ac <__divmodsi4_exit>
    67b0:	90 95       	com	r25
    67b2:	80 95       	com	r24
    67b4:	70 95       	com	r23
    67b6:	61 95       	neg	r22
    67b8:	7f 4f       	sbci	r23, 0xFF	; 255
    67ba:	8f 4f       	sbci	r24, 0xFF	; 255
    67bc:	9f 4f       	sbci	r25, 0xFF	; 255
    67be:	08 95       	ret

000067c0 <_exit>:
    67c0:	f8 94       	cli

000067c2 <__stop_program>:
    67c2:	ff cf       	rjmp	.-2      	; 0x67c2 <__stop_program>
