
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000106  00800100  00005c3e  00005cd2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005c3e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000030e  00800206  00800206  00005dd8  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00005dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000003d0  00000000  00000000  00005e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001169  00000000  00000000  000061e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000286  00000000  00000000  00007351  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000e89  00000000  00000000  000075d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000250  00000000  00000000  00008460  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000b5d  00000000  00000000  000086b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000c33  00000000  00000000  0000920d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__vector_4>
      14:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__vector_5>
      18:	0c 94 41 1a 	jmp	0x3482	; 0x3482 <__vector_6>
      1c:	0c 94 6a 1a 	jmp	0x34d4	; 0x34d4 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 d0 18 	jmp	0x31a0	; 0x31a0 <__vector_9>
      28:	0c 94 f9 18 	jmp	0x31f2	; 0x31f2 <__vector_10>
      2c:	0c 94 22 19 	jmp	0x3244	; 0x3244 <__vector_11>
      30:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__vector_12>
      34:	0c 94 4b 19 	jmp	0x3296	; 0x3296 <__vector_13>
      38:	0c 94 74 19 	jmp	0x32e8	; 0x32e8 <__vector_14>
      3c:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__vector_15>
      40:	0c 94 55 18 	jmp	0x30aa	; 0x30aa <__vector_16>
      44:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <__vector_17>
      48:	0c 94 a7 18 	jmp	0x314e	; 0x314e <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	ba 15       	cp	r27, r10
      7e:	bd 15       	cp	r27, r13
      80:	c0 15       	cp	r28, r0
      82:	c3 15       	cp	r28, r3
      84:	cc 15       	cp	r28, r12
      86:	c6 15       	cp	r28, r6
      88:	c9 15       	cp	r28, r9
      8a:	cf 15       	cp	r28, r15
      8c:	d2 15       	cp	r29, r2
      8e:	d5 15       	cp	r29, r5
      90:	d8 15       	cp	r29, r8
      92:	db 15       	cp	r29, r11
      94:	de 15       	cp	r29, r14
      96:	e1 15       	cp	r30, r1
      98:	e4 15       	cp	r30, r4
      9a:	e7 15       	cp	r30, r7
      9c:	ea 15       	cp	r30, r10
      9e:	ed 15       	cp	r30, r13
      a0:	f0 15       	cp	r31, r0
      a2:	01 16       	cp	r0, r17
      a4:	04 16       	cp	r0, r20
      a6:	07 16       	cp	r0, r23
      a8:	0a 16       	cp	r0, r26
      aa:	13 16       	cp	r1, r19
      ac:	0d 16       	cp	r0, r29
      ae:	10 16       	cp	r1, r16
      b0:	16 16       	cp	r1, r22
      b2:	19 16       	cp	r1, r25
      b4:	1c 16       	cp	r1, r28
      b6:	1f 16       	cp	r1, r31
      b8:	22 16       	cp	r2, r18
      ba:	25 16       	cp	r2, r21
      bc:	28 16       	cp	r2, r24
      be:	2b 16       	cp	r2, r27
      c0:	2e 16       	cp	r2, r30
      c2:	31 16       	cp	r3, r17
      c4:	34 16       	cp	r3, r20
      c6:	37 16       	cp	r3, r23
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	12 e0       	ldi	r17, 0x02	; 2
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	ee e3       	ldi	r30, 0x3E	; 62
     676:	fc e5       	ldi	r31, 0x5C	; 92
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a6 30       	cpi	r26, 0x06	; 6
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	15 e0       	ldi	r17, 0x05	; 5
     686:	a6 e0       	ldi	r26, 0x06	; 6
     688:	b2 e0       	ldi	r27, 0x02	; 2
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a4 31       	cpi	r26, 0x14	; 20
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 64 10 	call	0x20c8	; 0x20c8 <main>
     698:	0c 94 1d 2e 	jmp	0x5c3a	; 0x5c3a <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 93 17 	call	0x2f26	; 0x2f26 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 67 17 	call	0x2ece	; 0x2ece <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 93 17 	call	0x2f26	; 0x2f26 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 67 17 	call	0x2ece	; 0x2ece <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 93 17 	call	0x2f26	; 0x2f26 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 67 17 	call	0x2ece	; 0x2ece <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 93 17 	call	0x2f26	; 0x2f26 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 67 17 	call	0x2ece	; 0x2ece <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 93 17 	call	0x2f26	; 0x2f26 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 67 17 	call	0x2ece	; 0x2ece <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 93 17 	call	0x2f26	; 0x2f26 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 67 17 	call	0x2ece	; 0x2ece <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 93 17 	call	0x2f26	; 0x2f26 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 67 17 	call	0x2ece	; 0x2ece <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 93 17 	call	0x2f26	; 0x2f26 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 67 17 	call	0x2ece	; 0x2ece <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 93 17 	call	0x2f26	; 0x2f26 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 67 17 	call	0x2ece	; 0x2ece <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 93 17 	call	0x2f26	; 0x2f26 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 67 17 	call	0x2ece	; 0x2ece <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 ff 17 	call	0x2ffe	; 0x2ffe <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 59 10 	call	0x20b2	; 0x20b2 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 22 10 	call	0x2044	; 0x2044 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 05 10 	call	0x200a	; 0x200a <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 26 24 	call	0x484c	; 0x484c <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 59 10 	call	0x20b2	; 0x20b2 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 22 10 	call	0x2044	; 0x2044 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 05 10 	call	0x200a	; 0x200a <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 26 24 	call	0x484c	; 0x484c <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 59 10 	call	0x20b2	; 0x20b2 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 22 10 	call	0x2044	; 0x2044 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 05 10 	call	0x200a	; 0x200a <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 26 24 	call	0x484c	; 0x484c <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 59 10 	call	0x20b2	; 0x20b2 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 22 10 	call	0x2044	; 0x2044 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 05 10 	call	0x200a	; 0x200a <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 26 24 	call	0x484c	; 0x484c <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 59 10 	call	0x20b2	; 0x20b2 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 22 10 	call	0x2044	; 0x2044 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 05 10 	call	0x200a	; 0x200a <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 26 24 	call	0x484c	; 0x484c <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 59 10 	call	0x20b2	; 0x20b2 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 22 10 	call	0x2044	; 0x2044 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 05 10 	call	0x200a	; 0x200a <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 26 24 	call	0x484c	; 0x484c <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 a6 02 	sts	0x02A6, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <ATTINY_get_SW_state>
		if( btnState1 == TRUE ) 
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 a6 02 	sts	0x02A6, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 6b 16 	call	0x2cd6	; 0x2cd6 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 67 11 	call	0x22ce	; 0x22ce <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	87 e1       	ldi	r24, 0x17	; 23
     c4e:	93 e0       	ldi	r25, 0x03	; 3
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	aa e8       	ldi	r26, 0x8A	; 138
     c56:	b4 e0       	ldi	r27, 0x04	; 4
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	e0 e1       	ldi	r30, 0x10	; 16
     c5e:	f4 e0       	ldi	r31, 0x04	; 4
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	8f e8       	ldi	r24, 0x8F	; 143
     c66:	93 e0       	ldi	r25, 0x03	; 3
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 0e 02 	lds	r10, 0x020E
     c9e:	b0 90 0f 02 	lds	r11, 0x020F
     ca2:	c0 90 10 02 	lds	r12, 0x0210
     ca6:	d0 90 11 02 	lds	r13, 0x0211
			rtIR_old[i] = rtIR;
     caa:	e0 90 12 02 	lds	r14, 0x0212
     cae:	f0 90 13 02 	lds	r15, 0x0213
     cb2:	00 91 14 02 	lds	r16, 0x0214
     cb6:	10 91 15 02 	lds	r17, 0x0215
			ftIR_old[i] = ftIR;
     cba:	20 90 16 02 	lds	r2, 0x0216
     cbe:	30 90 17 02 	lds	r3, 0x0217
     cc2:	40 90 18 02 	lds	r4, 0x0218
     cc6:	50 90 19 02 	lds	r5, 0x0219
			bkIR_old[i] = bkIR;
     cca:	20 91 1a 02 	lds	r18, 0x021A
     cce:	30 91 1b 02 	lds	r19, 0x021B
     cd2:	40 91 1c 02 	lds	r20, 0x021C
     cd6:	50 91 1d 02 	lds	r21, 0x021D
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e9 55       	subi	r30, 0x59	; 89
     ce2:	fd 4f       	sbci	r31, 0xFD	; 253
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e6 5e       	subi	r30, 0xE6	; 230
     cf0:	fb 4f       	sbci	r31, 0xFB	; 251
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	e0 56       	subi	r30, 0x60	; 96
     cfe:	fc 4f       	sbci	r31, 0xFC	; 252
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	e1 5e       	subi	r30, 0xE1	; 225
     d0c:	fc 4f       	sbci	r31, 0xFC	; 252
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	af 59       	subi	r26, 0x9F	; 159
     e02:	b2 40       	sbci	r27, 0x02	; 2
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 0e 02 	lds	r24, 0x020E
     e0c:	90 91 0f 02 	lds	r25, 0x020F
     e10:	a0 91 10 02 	lds	r26, 0x0210
     e14:	b0 91 11 02 	lds	r27, 0x0211
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 12 02 	lds	r24, 0x0212
     e28:	90 91 13 02 	lds	r25, 0x0213
     e2c:	a0 91 14 02 	lds	r26, 0x0214
     e30:	b0 91 15 02 	lds	r27, 0x0215
     e34:	80 93 1a 04 	sts	0x041A, r24
     e38:	90 93 1b 04 	sts	0x041B, r25
     e3c:	a0 93 1c 04 	sts	0x041C, r26
     e40:	b0 93 1d 04 	sts	0x041D, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 16 02 	lds	r24, 0x0216
     e48:	90 91 17 02 	lds	r25, 0x0217
     e4c:	a0 91 18 02 	lds	r26, 0x0218
     e50:	b0 91 19 02 	lds	r27, 0x0219
     e54:	80 93 a0 03 	sts	0x03A0, r24
     e58:	90 93 a1 03 	sts	0x03A1, r25
     e5c:	a0 93 a2 03 	sts	0x03A2, r26
     e60:	b0 93 a3 03 	sts	0x03A3, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 1a 02 	lds	r24, 0x021A
     e68:	90 91 1b 02 	lds	r25, 0x021B
     e6c:	a0 91 1c 02 	lds	r26, 0x021C
     e70:	b0 91 1d 02 	lds	r27, 0x021D
     e74:	80 93 1f 03 	sts	0x031F, r24
     e78:	90 93 20 03 	sts	0x0320, r25
     e7c:	a0 93 21 03 	sts	0x0321, r26
     e80:	b0 93 22 03 	sts	0x0322, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
     e94:	60 93 0e 02 	sts	0x020E, r22
     e98:	70 93 0f 02 	sts	0x020F, r23
     e9c:	80 93 10 02 	sts	0x0210, r24
     ea0:	90 93 11 02 	sts	0x0211, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
     eb8:	60 93 12 02 	sts	0x0212, r22
     ebc:	70 93 13 02 	sts	0x0213, r23
     ec0:	80 93 14 02 	sts	0x0214, r24
     ec4:	90 93 15 02 	sts	0x0215, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
     edc:	60 93 16 02 	sts	0x0216, r22
     ee0:	70 93 17 02 	sts	0x0217, r23
     ee4:	80 93 18 02 	sts	0x0218, r24
     ee8:	90 93 19 02 	sts	0x0219, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
     f00:	60 93 1a 02 	sts	0x021A, r22
     f04:	70 93 1b 02 	sts	0x021B, r23
     f08:	80 93 1c 02 	sts	0x021C, r24
     f0c:	90 93 1d 02 	sts	0x021D, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	6f 92       	push	r6
     f44:	7f 92       	push	r7
     f46:	8f 92       	push	r8
     f48:	9f 92       	push	r9
     f4a:	af 92       	push	r10
     f4c:	bf 92       	push	r11
     f4e:	cf 92       	push	r12
     f50:	df 92       	push	r13
     f52:	ef 92       	push	r14
     f54:	ff 92       	push	r15
     f56:	0f 93       	push	r16
     f58:	1f 93       	push	r17
     f5a:	3b 01       	movw	r6, r22
     f5c:	4c 01       	movw	r8, r24
	// Reset the integrator error if specified
	if(reset){
     f5e:	44 23       	and	r20, r20
     f60:	61 f0       	breq	.+24     	; 0xf7a <pidController+0x38>
		Ierror = 0;
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	a0 e0       	ldi	r26, 0x00	; 0
     f68:	b0 e0       	ldi	r27, 0x00	; 0
     f6a:	80 93 06 02 	sts	0x0206, r24
     f6e:	90 93 07 02 	sts	0x0207, r25
     f72:	a0 93 08 02 	sts	0x0208, r26
     f76:	b0 93 09 02 	sts	0x0209, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f7a:	c4 01       	movw	r24, r8
     f7c:	b3 01       	movw	r22, r6
     f7e:	20 91 06 02 	lds	r18, 0x0206
     f82:	30 91 07 02 	lds	r19, 0x0207
     f86:	40 91 08 02 	lds	r20, 0x0208
     f8a:	50 91 09 02 	lds	r21, 0x0209
     f8e:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
     f92:	5b 01       	movw	r10, r22
     f94:	6c 01       	movw	r12, r24
     f96:	60 93 06 02 	sts	0x0206, r22
     f9a:	70 93 07 02 	sts	0x0207, r23
     f9e:	80 93 08 02 	sts	0x0208, r24
     fa2:	90 93 09 02 	sts	0x0209, r25
     fa6:	c4 01       	movw	r24, r8
     fa8:	b3 01       	movw	r22, r6
     faa:	a4 01       	movw	r20, r8
     fac:	93 01       	movw	r18, r6
     fae:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
     fb2:	7b 01       	movw	r14, r22
     fb4:	8c 01       	movw	r16, r24
     fb6:	c4 01       	movw	r24, r8
     fb8:	b3 01       	movw	r22, r6
     fba:	20 91 0a 02 	lds	r18, 0x020A
     fbe:	30 91 0b 02 	lds	r19, 0x020B
     fc2:	40 91 0c 02 	lds	r20, 0x020C
     fc6:	50 91 0d 02 	lds	r21, 0x020D
     fca:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	40 e0       	ldi	r20, 0x00	; 0
     fd4:	5f e3       	ldi	r21, 0x3F	; 63
     fd6:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
     fda:	9b 01       	movw	r18, r22
     fdc:	ac 01       	movw	r20, r24
     fde:	c8 01       	movw	r24, r16
     fe0:	b7 01       	movw	r22, r14
     fe2:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
     fe6:	7b 01       	movw	r14, r22
     fe8:	8c 01       	movw	r16, r24
     fea:	c6 01       	movw	r24, r12
     fec:	b5 01       	movw	r22, r10
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	40 e0       	ldi	r20, 0x00	; 0
     ff4:	50 e0       	ldi	r21, 0x00	; 0
     ff6:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
     ffa:	9b 01       	movw	r18, r22
     ffc:	ac 01       	movw	r20, r24
     ffe:	c8 01       	movw	r24, r16
    1000:	b7 01       	movw	r22, r14
    1002:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
    1006:	1f 91       	pop	r17
    1008:	0f 91       	pop	r16
    100a:	ff 90       	pop	r15
    100c:	ef 90       	pop	r14
    100e:	df 90       	pop	r13
    1010:	cf 90       	pop	r12
    1012:	bf 90       	pop	r11
    1014:	af 90       	pop	r10
    1016:	9f 90       	pop	r9
    1018:	8f 90       	pop	r8
    101a:	7f 90       	pop	r7
    101c:	6f 90       	pop	r6
    101e:	08 95       	ret

00001020 <check_threshhold>:
* Output Return:	char
* Overview:			This check the IR values to thresholds
********************************************************************/

char check_threshhold(float F, float B, float L, float R)
{
    1020:	2f 92       	push	r2
    1022:	6f 92       	push	r6
    1024:	7f 92       	push	r7
    1026:	8f 92       	push	r8
    1028:	9f 92       	push	r9
    102a:	af 92       	push	r10
    102c:	bf 92       	push	r11
    102e:	cf 92       	push	r12
    1030:	df 92       	push	r13
    1032:	ef 92       	push	r14
    1034:	ff 92       	push	r15
    1036:	0f 93       	push	r16
    1038:	1f 93       	push	r17
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <check_threshhold+0x20>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <check_threshhold+0x22>
    1042:	cd b7       	in	r28, 0x3d	; 61
    1044:	de b7       	in	r29, 0x3e	; 62
    1046:	69 83       	std	Y+1, r22	; 0x01
    1048:	7a 83       	std	Y+2, r23	; 0x02
    104a:	8b 83       	std	Y+3, r24	; 0x03
    104c:	9c 83       	std	Y+4, r25	; 0x04
	char check = 0;
	check += 0b00000001*(ftIR < F);
    104e:	60 90 16 02 	lds	r6, 0x0216
    1052:	70 90 17 02 	lds	r7, 0x0217
    1056:	80 90 18 02 	lds	r8, 0x0218
    105a:	90 90 19 02 	lds	r9, 0x0219
	check += 0b00000010*(bkIR < B);
    105e:	60 91 1a 02 	lds	r22, 0x021A
    1062:	70 91 1b 02 	lds	r23, 0x021B
    1066:	80 91 1c 02 	lds	r24, 0x021C
    106a:	90 91 1d 02 	lds	r25, 0x021D
    106e:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    1072:	28 2e       	mov	r2, r24
    1074:	22 1c       	adc	r2, r2
    1076:	22 24       	eor	r2, r2
    1078:	22 1c       	adc	r2, r2
    107a:	22 0c       	add	r2, r2
	check += 0b00000100*(ltIR < L);
    107c:	60 91 0e 02 	lds	r22, 0x020E
    1080:	70 91 0f 02 	lds	r23, 0x020F
    1084:	80 91 10 02 	lds	r24, 0x0210
    1088:	90 91 11 02 	lds	r25, 0x0211
    108c:	a8 01       	movw	r20, r16
    108e:	97 01       	movw	r18, r14
    1090:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    1094:	08 2f       	mov	r16, r24
    1096:	00 1f       	adc	r16, r16
    1098:	00 27       	eor	r16, r16
    109a:	00 1f       	adc	r16, r16
    109c:	00 0f       	add	r16, r16
    109e:	00 0f       	add	r16, r16
	check += 0b00001000*(rtIR < R);
    10a0:	60 91 12 02 	lds	r22, 0x0212
    10a4:	70 91 13 02 	lds	r23, 0x0213
    10a8:	80 91 14 02 	lds	r24, 0x0214
    10ac:	90 91 15 02 	lds	r25, 0x0215
    10b0:	a6 01       	movw	r20, r12
    10b2:	95 01       	movw	r18, r10
    10b4:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    10b8:	18 2f       	mov	r17, r24
    10ba:	11 1f       	adc	r17, r17
    10bc:	11 27       	eor	r17, r17
    10be:	11 1f       	adc	r17, r17
    10c0:	11 0f       	add	r17, r17
    10c2:	11 0f       	add	r17, r17
    10c4:	11 0f       	add	r17, r17

char check_threshhold(float F, float B, float L, float R)
{
	char check = 0;
	check += 0b00000001*(ftIR < F);
	check += 0b00000010*(bkIR < B);
    10c6:	ff 24       	eor	r15, r15
    10c8:	c4 01       	movw	r24, r8
    10ca:	b3 01       	movw	r22, r6
    10cc:	29 81       	ldd	r18, Y+1	; 0x01
    10ce:	3a 81       	ldd	r19, Y+2	; 0x02
    10d0:	4b 81       	ldd	r20, Y+3	; 0x03
    10d2:	5c 81       	ldd	r21, Y+4	; 0x04
    10d4:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    10d8:	88 23       	and	r24, r24
    10da:	14 f4       	brge	.+4      	; 0x10e0 <check_threshhold+0xc0>
    10dc:	ff 24       	eor	r15, r15
    10de:	f3 94       	inc	r15
    10e0:	2f 0c       	add	r2, r15
	check += 0b00000100*(ltIR < L);
    10e2:	20 0e       	add	r2, r16
	check += 0b00001000*(rtIR < R);
	return check;	
}
    10e4:	82 2d       	mov	r24, r2
    10e6:	81 0f       	add	r24, r17
    10e8:	0f 90       	pop	r0
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	cf 91       	pop	r28
    10f2:	df 91       	pop	r29
    10f4:	1f 91       	pop	r17
    10f6:	0f 91       	pop	r16
    10f8:	ff 90       	pop	r15
    10fa:	ef 90       	pop	r14
    10fc:	df 90       	pop	r13
    10fe:	cf 90       	pop	r12
    1100:	bf 90       	pop	r11
    1102:	af 90       	pop	r10
    1104:	9f 90       	pop	r9
    1106:	8f 90       	pop	r8
    1108:	7f 90       	pop	r7
    110a:	6f 90       	pop	r6
    110c:	2f 90       	pop	r2
    110e:	08 95       	ret

00001110 <move_arc_stwt>:
		// bool stepper_FWD = arcLength >= 0;
		// STEPPER_move_stwt( STEPPER_BOTH, 
		// stepper_FWD, stepper_NUM, arcSpeed, arcAccel, arcBrk, // Left
		// stepper_FWD, stepper_NUM, arcSpeed, arcAccel, arcBrk); // Right
	// }
}
    1110:	08 95       	ret

00001112 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{
	unsigned char sensors = ATTINY_get_sensors();
    1112:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1116:	28 2f       	mov	r18, r24
    1118:	21 70       	andi	r18, 0x01	; 1
    111a:	20 93 18 04 	sts	0x0418, r18
	leftContact =  (0b00000010 & sensors)>>1;
    111e:	90 e0       	ldi	r25, 0x00	; 0
    1120:	82 70       	andi	r24, 0x02	; 2
    1122:	90 70       	andi	r25, 0x00	; 0
    1124:	95 95       	asr	r25
    1126:	87 95       	ror	r24
    1128:	80 93 19 04 	sts	0x0419, r24
	
	
}
    112c:	08 95       	ret

0000112e <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    112e:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1132:	60 93 1e 02 	sts	0x021E, r22
    1136:	70 93 1f 02 	sts	0x021F, r23
    113a:	80 93 20 02 	sts	0x0220, r24
    113e:	90 93 21 02 	sts	0x0221, r25
	leftLightVolt = getLeftLight();
    1142:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1146:	60 93 22 02 	sts	0x0222, r22
    114a:	70 93 23 02 	sts	0x0223, r23
    114e:	80 93 24 02 	sts	0x0224, r24
    1152:	90 93 25 02 	sts	0x0225, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear;
}
    1156:	08 95       	ret

00001158 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1158:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    115c:	60 93 16 02 	sts	0x0216, r22
    1160:	70 93 17 02 	sts	0x0217, r23
    1164:	80 93 18 02 	sts	0x0218, r24
    1168:	90 93 19 02 	sts	0x0219, r25
	bkIR = getBackIR();
    116c:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1170:	60 93 1a 02 	sts	0x021A, r22
    1174:	70 93 1b 02 	sts	0x021B, r23
    1178:	80 93 1c 02 	sts	0x021C, r24
    117c:	90 93 1d 02 	sts	0x021D, r25
	ltIR = getLeftIR();
    1180:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1184:	60 93 0e 02 	sts	0x020E, r22
    1188:	70 93 0f 02 	sts	0x020F, r23
    118c:	80 93 10 02 	sts	0x0210, r24
    1190:	90 93 11 02 	sts	0x0211, r25
	rtIR = getRightIR();
    1194:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1198:	60 93 12 02 	sts	0x0212, r22
    119c:	70 93 13 02 	sts	0x0213, r23
    11a0:	80 93 14 02 	sts	0x0214, r24
    11a4:	90 93 15 02 	sts	0x0215, r25
}
    11a8:	08 95       	ret

000011aa <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
    11aa:	2f 92       	push	r2
    11ac:	3f 92       	push	r3
    11ae:	4f 92       	push	r4
    11b0:	5f 92       	push	r5
    11b2:	6f 92       	push	r6
    11b4:	7f 92       	push	r7
    11b6:	8f 92       	push	r8
    11b8:	9f 92       	push	r9
    11ba:	af 92       	push	r10
    11bc:	bf 92       	push	r11
    11be:	cf 92       	push	r12
    11c0:	df 92       	push	r13
    11c2:	ef 92       	push	r14
    11c4:	ff 92       	push	r15
    11c6:	0f 93       	push	r16
    11c8:	1f 93       	push	r17
    11ca:	df 93       	push	r29
    11cc:	cf 93       	push	r28
    11ce:	00 d0       	rcall	.+0      	; 0x11d0 <moveAway+0x26>
    11d0:	00 d0       	rcall	.+0      	; 0x11d2 <moveAway+0x28>
    11d2:	cd b7       	in	r28, 0x3d	; 61
    11d4:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    11d6:	60 90 16 02 	lds	r6, 0x0216
    11da:	70 90 17 02 	lds	r7, 0x0217
    11de:	80 90 18 02 	lds	r8, 0x0218
    11e2:	90 90 19 02 	lds	r9, 0x0219
    11e6:	a0 90 1a 02 	lds	r10, 0x021A
    11ea:	b0 90 1b 02 	lds	r11, 0x021B
    11ee:	c0 90 1c 02 	lds	r12, 0x021C
    11f2:	d0 90 1d 02 	lds	r13, 0x021D
	float moveX = rtIR - ltIR;
    11f6:	e0 90 12 02 	lds	r14, 0x0212
    11fa:	f0 90 13 02 	lds	r15, 0x0213
    11fe:	00 91 14 02 	lds	r16, 0x0214
    1202:	10 91 15 02 	lds	r17, 0x0215
    1206:	80 91 0e 02 	lds	r24, 0x020E
    120a:	90 91 0f 02 	lds	r25, 0x020F
    120e:	a0 91 10 02 	lds	r26, 0x0210
    1212:	b0 91 11 02 	lds	r27, 0x0211
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	9a 83       	std	Y+2, r25	; 0x02
    121a:	ab 83       	std	Y+3, r26	; 0x03
    121c:	bc 83       	std	Y+4, r27	; 0x04
    121e:	c8 01       	movw	r24, r16
    1220:	b7 01       	movw	r22, r14
    1222:	29 81       	ldd	r18, Y+1	; 0x01
    1224:	3a 81       	ldd	r19, Y+2	; 0x02
    1226:	4b 81       	ldd	r20, Y+3	; 0x03
    1228:	5c 81       	ldd	r21, Y+4	; 0x04
    122a:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
    122e:	1b 01       	movw	r2, r22
    1230:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
    1232:	c4 01       	movw	r24, r8
    1234:	b3 01       	movw	r22, r6
    1236:	20 e0       	ldi	r18, 0x00	; 0
    1238:	30 e0       	ldi	r19, 0x00	; 0
    123a:	40 ee       	ldi	r20, 0xE0	; 224
    123c:	50 e4       	ldi	r21, 0x40	; 64
    123e:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    1242:	87 fd       	sbrc	r24, 7
    1244:	0b c0       	rjmp	.+22     	; 0x125c <moveAway+0xb2>
    1246:	c6 01       	movw	r24, r12
    1248:	b5 01       	movw	r22, r10
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 ee       	ldi	r20, 0xE0	; 224
    1250:	50 e4       	ldi	r21, 0x40	; 64
    1252:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    1256:	88 23       	and	r24, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <moveAway+0xb2>
    125a:	68 c0       	rjmp	.+208    	; 0x132c <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    125c:	c4 01       	movw	r24, r8
    125e:	b3 01       	movw	r22, r6
    1260:	a6 01       	movw	r20, r12
    1262:	95 01       	movw	r18, r10
    1264:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
    1268:	7b 01       	movw	r14, r22
    126a:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
    126c:	77 24       	eor	r7, r7
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	40 e0       	ldi	r20, 0x00	; 0
    1274:	50 e0       	ldi	r21, 0x00	; 0
    1276:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__gesf2>
    127a:	88 23       	and	r24, r24
    127c:	14 f0       	brlt	.+4      	; 0x1282 <moveAway+0xd8>
    127e:	77 24       	eor	r7, r7
    1280:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1282:	c8 01       	movw	r24, r16
    1284:	b7 01       	movw	r22, r14
    1286:	0e 94 f5 23 	call	0x47ea	; 0x47ea <__fixsfsi>
    128a:	9b 01       	movw	r18, r22
    128c:	77 ff       	sbrs	r23, 7
    128e:	03 c0       	rjmp	.+6      	; 0x1296 <moveAway+0xec>
    1290:	30 95       	com	r19
    1292:	21 95       	neg	r18
    1294:	3f 4f       	sbci	r19, 0xFF	; 255
    1296:	b9 01       	movw	r22, r18
    1298:	88 27       	eor	r24, r24
    129a:	77 fd       	sbrc	r23, 7
    129c:	80 95       	com	r24
    129e:	98 2f       	mov	r25, r24
    12a0:	0e 94 28 24 	call	0x4850	; 0x4850 <__floatsisf>
    12a4:	6b 01       	movw	r12, r22
    12a6:	7c 01       	movw	r14, r24
    12a8:	ad b7       	in	r26, 0x3d	; 61
    12aa:	be b7       	in	r27, 0x3e	; 62
    12ac:	19 97       	sbiw	r26, 0x09	; 9
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	be bf       	out	0x3e, r27	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	ad bf       	out	0x3d, r26	; 61
    12b8:	0d b7       	in	r16, 0x3d	; 61
    12ba:	1e b7       	in	r17, 0x3e	; 62
    12bc:	0f 5f       	subi	r16, 0xFF	; 255
    12be:	1f 4f       	sbci	r17, 0xFF	; 255
    12c0:	a2 01       	movw	r20, r4
    12c2:	91 01       	movw	r18, r2
    12c4:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
    12c8:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fixunssfsi>
    12cc:	4b 01       	movw	r8, r22
    12ce:	5c 01       	movw	r10, r24
    12d0:	82 e3       	ldi	r24, 0x32	; 50
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	f8 01       	movw	r30, r16
    12d6:	91 83       	std	Z+1, r25	; 0x01
    12d8:	80 83       	st	Z, r24
    12da:	c7 01       	movw	r24, r14
    12dc:	b6 01       	movw	r22, r12
    12de:	a2 01       	movw	r20, r4
    12e0:	91 01       	movw	r18, r2
    12e2:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
    12e6:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fixunssfsi>
    12ea:	d8 01       	movw	r26, r16
    12ec:	13 96       	adiw	r26, 0x03	; 3
    12ee:	7c 93       	st	X, r23
    12f0:	6e 93       	st	-X, r22
    12f2:	12 97       	sbiw	r26, 0x02	; 2
    12f4:	82 ec       	ldi	r24, 0xC2	; 194
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	15 96       	adiw	r26, 0x05	; 5
    12fa:	9c 93       	st	X, r25
    12fc:	8e 93       	st	-X, r24
    12fe:	14 97       	sbiw	r26, 0x04	; 4
    1300:	16 96       	adiw	r26, 0x06	; 6
    1302:	1c 92       	st	X, r1
    1304:	16 97       	sbiw	r26, 0x06	; 6
    1306:	18 96       	adiw	r26, 0x08	; 8
    1308:	1c 92       	st	X, r1
    130a:	1e 92       	st	-X, r1
    130c:	17 97       	sbiw	r26, 0x07	; 7
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	62 e0       	ldi	r22, 0x02	; 2
    1312:	47 2d       	mov	r20, r7
    1314:	22 e3       	ldi	r18, 0x32	; 50
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	84 01       	movw	r16, r8
    131a:	e2 ec       	ldi	r30, 0xC2	; 194
    131c:	ee 2e       	mov	r14, r30
    131e:	e1 e0       	ldi	r30, 0x01	; 1
    1320:	fe 2e       	mov	r15, r30
    1322:	cc 24       	eor	r12, r12
    1324:	aa 24       	eor	r10, r10
    1326:	bb 24       	eor	r11, r11
    1328:	87 2c       	mov	r8, r7
    132a:	82 c0       	rjmp	.+260    	; 0x1430 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
    132c:	c8 01       	movw	r24, r16
    132e:	b7 01       	movw	r22, r14
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e2       	ldi	r20, 0x20	; 32
    1336:	51 e4       	ldi	r21, 0x41	; 65
    1338:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    133c:	88 23       	and	r24, r24
    133e:	b4 f5       	brge	.+108    	; 0x13ac <moveAway+0x202>
	{
			BOOL moveForwardR = ~(moveX <= 0);
			BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1340:	c2 01       	movw	r24, r4
    1342:	b1 01       	movw	r22, r2
    1344:	0e 94 f5 23 	call	0x47ea	; 0x47ea <__fixsfsi>
    1348:	8b 01       	movw	r16, r22
    134a:	77 ff       	sbrs	r23, 7
    134c:	03 c0       	rjmp	.+6      	; 0x1354 <moveAway+0x1aa>
    134e:	10 95       	com	r17
    1350:	01 95       	neg	r16
    1352:	1f 4f       	sbci	r17, 0xFF	; 255
    1354:	2d b7       	in	r18, 0x3d	; 61
    1356:	3e b7       	in	r19, 0x3e	; 62
    1358:	29 50       	subi	r18, 0x09	; 9
    135a:	30 40       	sbci	r19, 0x00	; 0
    135c:	0f b6       	in	r0, 0x3f	; 63
    135e:	f8 94       	cli
    1360:	3e bf       	out	0x3e, r19	; 62
    1362:	0f be       	out	0x3f, r0	; 63
    1364:	2d bf       	out	0x3d, r18	; 61
    1366:	ed b7       	in	r30, 0x3d	; 61
    1368:	fe b7       	in	r31, 0x3e	; 62
    136a:	31 96       	adiw	r30, 0x01	; 1
    136c:	88 ec       	ldi	r24, 0xC8	; 200
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	ad b7       	in	r26, 0x3d	; 61
    1372:	be b7       	in	r27, 0x3e	; 62
    1374:	12 96       	adiw	r26, 0x02	; 2
    1376:	9c 93       	st	X, r25
    1378:	8e 93       	st	-X, r24
    137a:	11 97       	sbiw	r26, 0x01	; 1
    137c:	13 83       	std	Z+3, r17	; 0x03
    137e:	02 83       	std	Z+2, r16	; 0x02
    1380:	82 ec       	ldi	r24, 0xC2	; 194
    1382:	91 e0       	ldi	r25, 0x01	; 1
    1384:	95 83       	std	Z+5, r25	; 0x05
    1386:	84 83       	std	Z+4, r24	; 0x04
    1388:	16 82       	std	Z+6, r1	; 0x06
    138a:	10 86       	std	Z+8, r1	; 0x08
    138c:	17 82       	std	Z+7, r1	; 0x07
    138e:	81 e0       	ldi	r24, 0x01	; 1
    1390:	62 e0       	ldi	r22, 0x02	; 2
    1392:	40 e0       	ldi	r20, 0x00	; 0
    1394:	28 ec       	ldi	r18, 0xC8	; 200
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	72 ec       	ldi	r23, 0xC2	; 194
    139a:	e7 2e       	mov	r14, r23
    139c:	71 e0       	ldi	r23, 0x01	; 1
    139e:	f7 2e       	mov	r15, r23
    13a0:	cc 24       	eor	r12, r12
    13a2:	aa 24       	eor	r10, r10
    13a4:	bb 24       	eor	r11, r11
    13a6:	88 24       	eor	r8, r8
    13a8:	83 94       	inc	r8
    13aa:	42 c0       	rjmp	.+132    	; 0x1430 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
    13ac:	69 81       	ldd	r22, Y+1	; 0x01
    13ae:	7a 81       	ldd	r23, Y+2	; 0x02
    13b0:	8b 81       	ldd	r24, Y+3	; 0x03
    13b2:	9c 81       	ldd	r25, Y+4	; 0x04
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    13c0:	87 fd       	sbrc	r24, 7
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <moveAway+0x21e>
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	3f c0       	rjmp	.+126    	; 0x1446 <moveAway+0x29c>
	{
			BOOL moveForwardR = ~(moveX <= 0);
			BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    13c8:	c2 01       	movw	r24, r4
    13ca:	b1 01       	movw	r22, r2
    13cc:	0e 94 f5 23 	call	0x47ea	; 0x47ea <__fixsfsi>
    13d0:	8b 01       	movw	r16, r22
    13d2:	77 ff       	sbrs	r23, 7
    13d4:	03 c0       	rjmp	.+6      	; 0x13dc <moveAway+0x232>
    13d6:	10 95       	com	r17
    13d8:	01 95       	neg	r16
    13da:	1f 4f       	sbci	r17, 0xFF	; 255
    13dc:	2d b7       	in	r18, 0x3d	; 61
    13de:	3e b7       	in	r19, 0x3e	; 62
    13e0:	29 50       	subi	r18, 0x09	; 9
    13e2:	30 40       	sbci	r19, 0x00	; 0
    13e4:	0f b6       	in	r0, 0x3f	; 63
    13e6:	f8 94       	cli
    13e8:	3e bf       	out	0x3e, r19	; 62
    13ea:	0f be       	out	0x3f, r0	; 63
    13ec:	2d bf       	out	0x3d, r18	; 61
    13ee:	ed b7       	in	r30, 0x3d	; 61
    13f0:	fe b7       	in	r31, 0x3e	; 62
    13f2:	31 96       	adiw	r30, 0x01	; 1
    13f4:	88 ec       	ldi	r24, 0xC8	; 200
    13f6:	90 e0       	ldi	r25, 0x00	; 0
    13f8:	ad b7       	in	r26, 0x3d	; 61
    13fa:	be b7       	in	r27, 0x3e	; 62
    13fc:	12 96       	adiw	r26, 0x02	; 2
    13fe:	9c 93       	st	X, r25
    1400:	8e 93       	st	-X, r24
    1402:	11 97       	sbiw	r26, 0x01	; 1
    1404:	13 83       	std	Z+3, r17	; 0x03
    1406:	02 83       	std	Z+2, r16	; 0x02
    1408:	82 ec       	ldi	r24, 0xC2	; 194
    140a:	91 e0       	ldi	r25, 0x01	; 1
    140c:	95 83       	std	Z+5, r25	; 0x05
    140e:	84 83       	std	Z+4, r24	; 0x04
    1410:	16 82       	std	Z+6, r1	; 0x06
    1412:	10 86       	std	Z+8, r1	; 0x08
    1414:	17 82       	std	Z+7, r1	; 0x07
    1416:	81 e0       	ldi	r24, 0x01	; 1
    1418:	62 e0       	ldi	r22, 0x02	; 2
    141a:	41 e0       	ldi	r20, 0x01	; 1
    141c:	28 ec       	ldi	r18, 0xC8	; 200
    141e:	30 e0       	ldi	r19, 0x00	; 0
    1420:	52 ec       	ldi	r21, 0xC2	; 194
    1422:	e5 2e       	mov	r14, r21
    1424:	51 e0       	ldi	r21, 0x01	; 1
    1426:	f5 2e       	mov	r15, r21
    1428:	cc 24       	eor	r12, r12
    142a:	aa 24       	eor	r10, r10
    142c:	bb 24       	eor	r11, r11
    142e:	88 24       	eor	r8, r8
    1430:	0e 94 4e 13 	call	0x269c	; 0x269c <STEPPER_move>
    1434:	81 e0       	ldi	r24, 0x01	; 1
    1436:	ed b7       	in	r30, 0x3d	; 61
    1438:	fe b7       	in	r31, 0x3e	; 62
    143a:	39 96       	adiw	r30, 0x09	; 9
    143c:	0f b6       	in	r0, 0x3f	; 63
    143e:	f8 94       	cli
    1440:	fe bf       	out	0x3e, r31	; 62
    1442:	0f be       	out	0x3f, r0	; 63
    1444:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
    1446:	0f 90       	pop	r0
    1448:	0f 90       	pop	r0
    144a:	0f 90       	pop	r0
    144c:	0f 90       	pop	r0
    144e:	cf 91       	pop	r28
    1450:	df 91       	pop	r29
    1452:	1f 91       	pop	r17
    1454:	0f 91       	pop	r16
    1456:	ff 90       	pop	r15
    1458:	ef 90       	pop	r14
    145a:	df 90       	pop	r13
    145c:	cf 90       	pop	r12
    145e:	bf 90       	pop	r11
    1460:	af 90       	pop	r10
    1462:	9f 90       	pop	r9
    1464:	8f 90       	pop	r8
    1466:	7f 90       	pop	r7
    1468:	6f 90       	pop	r6
    146a:	5f 90       	pop	r5
    146c:	4f 90       	pop	r4
    146e:	3f 90       	pop	r3
    1470:	2f 90       	pop	r2
    1472:	08 95       	ret

00001474 <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    1474:	5f 92       	push	r5
    1476:	6f 92       	push	r6
    1478:	7f 92       	push	r7
    147a:	8f 92       	push	r8
    147c:	9f 92       	push	r9
    147e:	af 92       	push	r10
    1480:	bf 92       	push	r11
    1482:	cf 92       	push	r12
    1484:	df 92       	push	r13
    1486:	ef 92       	push	r14
    1488:	ff 92       	push	r15
    148a:	0f 93       	push	r16
    148c:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    148e:	e0 90 16 02 	lds	r14, 0x0216
    1492:	f0 90 17 02 	lds	r15, 0x0217
    1496:	00 91 18 02 	lds	r16, 0x0218
    149a:	10 91 19 02 	lds	r17, 0x0219
    149e:	55 24       	eor	r5, r5
    14a0:	c8 01       	movw	r24, r16
    14a2:	b7 01       	movw	r22, r14
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	30 e0       	ldi	r19, 0x00	; 0
    14a8:	48 eb       	ldi	r20, 0xB8	; 184
    14aa:	51 e4       	ldi	r21, 0x41	; 65
    14ac:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    14b0:	88 23       	and	r24, r24
    14b2:	14 f4       	brge	.+4      	; 0x14b8 <moveWall+0x44>
    14b4:	55 24       	eor	r5, r5
    14b6:	53 94       	inc	r5
    14b8:	a0 90 12 02 	lds	r10, 0x0212
    14bc:	b0 90 13 02 	lds	r11, 0x0213
    14c0:	c0 90 14 02 	lds	r12, 0x0214
    14c4:	d0 90 15 02 	lds	r13, 0x0215
    14c8:	60 90 0e 02 	lds	r6, 0x020E
    14cc:	70 90 0f 02 	lds	r7, 0x020F
    14d0:	80 90 10 02 	lds	r8, 0x0210
    14d4:	90 90 11 02 	lds	r9, 0x0211
	if(!isWall){	
    14d8:	55 20       	and	r5, r5
    14da:	31 f5       	brne	.+76     	; 0x1528 <moveWall+0xb4>
    14dc:	60 91 1a 02 	lds	r22, 0x021A
    14e0:	70 91 1b 02 	lds	r23, 0x021B
    14e4:	80 91 1c 02 	lds	r24, 0x021C
    14e8:	90 91 1d 02 	lds	r25, 0x021D
    14ec:	20 e0       	ldi	r18, 0x00	; 0
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	48 eb       	ldi	r20, 0xB8	; 184
    14f2:	51 e4       	ldi	r21, 0x41	; 65
    14f4:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    14f8:	87 fd       	sbrc	r24, 7
    14fa:	16 c0       	rjmp	.+44     	; 0x1528 <moveWall+0xb4>
    14fc:	c6 01       	movw	r24, r12
    14fe:	b5 01       	movw	r22, r10
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 ea       	ldi	r20, 0xA0	; 160
    1506:	51 e4       	ldi	r21, 0x41	; 65
    1508:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    150c:	87 fd       	sbrc	r24, 7
    150e:	0c c0       	rjmp	.+24     	; 0x1528 <moveWall+0xb4>
    1510:	c4 01       	movw	r24, r8
    1512:	b3 01       	movw	r22, r6
    1514:	20 e0       	ldi	r18, 0x00	; 0
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	40 ea       	ldi	r20, 0xA0	; 160
    151a:	51 e4       	ldi	r21, 0x41	; 65
    151c:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    1520:	87 fd       	sbrc	r24, 7
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <moveWall+0xb4>
	
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	
}
    1524:	80 e0       	ldi	r24, 0x00	; 0
    1526:	fd c0       	rjmp	.+506    	; 0x1722 <moveWall+0x2ae>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    1528:	c6 01       	movw	r24, r12
    152a:	b5 01       	movw	r22, r10
    152c:	20 e0       	ldi	r18, 0x00	; 0
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	40 ea       	ldi	r20, 0xA0	; 160
    1532:	51 e4       	ldi	r21, 0x41	; 65
    1534:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__gesf2>
    1538:	18 16       	cp	r1, r24
    153a:	64 f4       	brge	.+24     	; 0x1554 <moveWall+0xe0>
		rtIR = IR_WALL_R_THRESH-15;
    153c:	80 e0       	ldi	r24, 0x00	; 0
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	a0 ea       	ldi	r26, 0xA0	; 160
    1542:	b0 e4       	ldi	r27, 0x40	; 64
    1544:	80 93 12 02 	sts	0x0212, r24
    1548:	90 93 13 02 	sts	0x0213, r25
    154c:	a0 93 14 02 	sts	0x0214, r26
    1550:	b0 93 15 02 	sts	0x0215, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    1554:	c4 01       	movw	r24, r8
    1556:	b3 01       	movw	r22, r6
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 ea       	ldi	r20, 0xA0	; 160
    155e:	51 e4       	ldi	r21, 0x41	; 65
    1560:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__gesf2>
    1564:	18 16       	cp	r1, r24
    1566:	14 f0       	brlt	.+4      	; 0x156c <moveWall+0xf8>
    1568:	80 e0       	ldi	r24, 0x00	; 0
    156a:	0d c0       	rjmp	.+26     	; 0x1586 <moveWall+0x112>
		ltIR = IR_WALL_L_THRESH-15;
    156c:	80 e0       	ldi	r24, 0x00	; 0
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	a0 ea       	ldi	r26, 0xA0	; 160
    1572:	b0 e4       	ldi	r27, 0x40	; 64
    1574:	80 93 0e 02 	sts	0x020E, r24
    1578:	90 93 0f 02 	sts	0x020F, r25
    157c:	a0 93 10 02 	sts	0x0210, r26
    1580:	b0 93 11 02 	sts	0x0211, r27
    1584:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    1586:	55 20       	and	r5, r5
    1588:	21 f1       	breq	.+72     	; 0x15d2 <moveWall+0x15e>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    158a:	88 23       	and	r24, r24
    158c:	29 f0       	breq	.+10     	; 0x1598 <moveWall+0x124>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	8a e7       	ldi	r24, 0x7A	; 122
    1594:	94 e4       	ldi	r25, 0x44	; 68
    1596:	04 c0       	rjmp	.+8      	; 0x15a0 <moveWall+0x12c>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    1598:	60 e0       	ldi	r22, 0x00	; 0
    159a:	70 e0       	ldi	r23, 0x00	; 0
    159c:	8a e7       	ldi	r24, 0x7A	; 122
    159e:	94 ec       	ldi	r25, 0xC4	; 196
    15a0:	a8 01       	movw	r20, r16
    15a2:	97 01       	movw	r18, r14
    15a4:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
    15a8:	20 91 0e 02 	lds	r18, 0x020E
    15ac:	30 91 0f 02 	lds	r19, 0x020F
    15b0:	40 91 10 02 	lds	r20, 0x0210
    15b4:	50 91 11 02 	lds	r21, 0x0211
    15b8:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
    15bc:	9b 01       	movw	r18, r22
    15be:	ac 01       	movw	r20, r24
    15c0:	60 91 12 02 	lds	r22, 0x0212
    15c4:	70 91 13 02 	lds	r23, 0x0213
    15c8:	80 91 14 02 	lds	r24, 0x0214
    15cc:	90 91 15 02 	lds	r25, 0x0215
    15d0:	10 c0       	rjmp	.+32     	; 0x15f2 <moveWall+0x17e>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    15d2:	60 91 12 02 	lds	r22, 0x0212
    15d6:	70 91 13 02 	lds	r23, 0x0213
    15da:	80 91 14 02 	lds	r24, 0x0214
    15de:	90 91 15 02 	lds	r25, 0x0215
    15e2:	20 91 0e 02 	lds	r18, 0x020E
    15e6:	30 91 0f 02 	lds	r19, 0x020F
    15ea:	40 91 10 02 	lds	r20, 0x0210
    15ee:	50 91 11 02 	lds	r21, 0x0211
    15f2:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
    15f6:	e6 2f       	mov	r30, r22
	}

	// Use the PID controller function to calculate error
	float effort = pidController(error, 0);
    15f8:	2e 2f       	mov	r18, r30
    15fa:	37 2f       	mov	r19, r23
    15fc:	48 2f       	mov	r20, r24
    15fe:	59 2f       	mov	r21, r25
    1600:	b9 01       	movw	r22, r18
    1602:	ca 01       	movw	r24, r20
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    160a:	6b 01       	movw	r12, r22
    160c:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    160e:	0e 94 f5 23 	call	0x47ea	; 0x47ea <__fixsfsi>
    1612:	8b 01       	movw	r16, r22
    1614:	77 ff       	sbrs	r23, 7
    1616:	03 c0       	rjmp	.+6      	; 0x161e <moveWall+0x1aa>
    1618:	10 95       	com	r17
    161a:	01 95       	neg	r16
    161c:	1f 4f       	sbci	r17, 0xFF	; 255
    161e:	05 36       	cpi	r16, 0x65	; 101
    1620:	11 05       	cpc	r17, r1
    1622:	fc f0       	brlt	.+62     	; 0x1662 <moveWall+0x1ee>
    1624:	c7 01       	movw	r24, r14
    1626:	b6 01       	movw	r22, r12
    1628:	20 e0       	ldi	r18, 0x00	; 0
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	40 e0       	ldi	r20, 0x00	; 0
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    1634:	88 23       	and	r24, r24
    1636:	a9 f0       	breq	.+42     	; 0x1662 <moveWall+0x1ee>
		effort = MAX_EFFORT*(effort/abs(effort));
    1638:	b8 01       	movw	r22, r16
    163a:	88 27       	eor	r24, r24
    163c:	77 fd       	sbrc	r23, 7
    163e:	80 95       	com	r24
    1640:	98 2f       	mov	r25, r24
    1642:	0e 94 28 24 	call	0x4850	; 0x4850 <__floatsisf>
    1646:	9b 01       	movw	r18, r22
    1648:	ac 01       	movw	r20, r24
    164a:	c7 01       	movw	r24, r14
    164c:	b6 01       	movw	r22, r12
    164e:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
    1652:	20 e0       	ldi	r18, 0x00	; 0
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	48 ec       	ldi	r20, 0xC8	; 200
    1658:	52 e4       	ldi	r21, 0x42	; 66
    165a:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
    165e:	6b 01       	movw	r12, r22
    1660:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    1662:	c7 01       	movw	r24, r14
    1664:	b6 01       	movw	r22, r12
    1666:	20 e0       	ldi	r18, 0x00	; 0
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	48 ec       	ldi	r20, 0xC8	; 200
    166c:	52 e4       	ldi	r21, 0x42	; 66
    166e:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
    1672:	6b 01       	movw	r12, r22
    1674:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    1676:	8d b7       	in	r24, 0x3d	; 61
    1678:	9e b7       	in	r25, 0x3e	; 62
    167a:	09 97       	sbiw	r24, 0x09	; 9
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	9e bf       	out	0x3e, r25	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	8d bf       	out	0x3d, r24	; 61
    1686:	0d b7       	in	r16, 0x3d	; 61
    1688:	1e b7       	in	r17, 0x3e	; 62
    168a:	0f 5f       	subi	r16, 0xFF	; 255
    168c:	1f 4f       	sbci	r17, 0xFF	; 255
    168e:	c7 01       	movw	r24, r14
    1690:	b6 01       	movw	r22, r12
    1692:	20 e0       	ldi	r18, 0x00	; 0
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	48 ec       	ldi	r20, 0xC8	; 200
    1698:	52 e4       	ldi	r21, 0x42	; 66
    169a:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
    169e:	20 e0       	ldi	r18, 0x00	; 0
    16a0:	30 e0       	ldi	r19, 0x00	; 0
    16a2:	48 ec       	ldi	r20, 0xC8	; 200
    16a4:	52 e4       	ldi	r21, 0x42	; 66
    16a6:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
    16aa:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fixunssfsi>
    16ae:	4b 01       	movw	r8, r22
    16b0:	5c 01       	movw	r10, r24
    16b2:	82 e3       	ldi	r24, 0x32	; 50
    16b4:	90 e0       	ldi	r25, 0x00	; 0
    16b6:	f8 01       	movw	r30, r16
    16b8:	91 83       	std	Z+1, r25	; 0x01
    16ba:	80 83       	st	Z, r24
    16bc:	c7 01       	movw	r24, r14
    16be:	b6 01       	movw	r22, r12
    16c0:	20 e0       	ldi	r18, 0x00	; 0
    16c2:	30 e0       	ldi	r19, 0x00	; 0
    16c4:	48 ec       	ldi	r20, 0xC8	; 200
    16c6:	52 ec       	ldi	r21, 0xC2	; 194
    16c8:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
    16cc:	20 e0       	ldi	r18, 0x00	; 0
    16ce:	30 e0       	ldi	r19, 0x00	; 0
    16d0:	48 ec       	ldi	r20, 0xC8	; 200
    16d2:	52 e4       	ldi	r21, 0x42	; 66
    16d4:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
    16d8:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fixunssfsi>
    16dc:	f8 01       	movw	r30, r16
    16de:	73 83       	std	Z+3, r23	; 0x03
    16e0:	62 83       	std	Z+2, r22	; 0x02
    16e2:	82 ec       	ldi	r24, 0xC2	; 194
    16e4:	91 e0       	ldi	r25, 0x01	; 1
    16e6:	95 83       	std	Z+5, r25	; 0x05
    16e8:	84 83       	std	Z+4, r24	; 0x04
    16ea:	16 82       	std	Z+6, r1	; 0x06
    16ec:	10 86       	std	Z+8, r1	; 0x08
    16ee:	17 82       	std	Z+7, r1	; 0x07
    16f0:	81 e0       	ldi	r24, 0x01	; 1
    16f2:	62 e0       	ldi	r22, 0x02	; 2
    16f4:	41 e0       	ldi	r20, 0x01	; 1
    16f6:	22 e3       	ldi	r18, 0x32	; 50
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	84 01       	movw	r16, r8
    16fc:	f2 ec       	ldi	r31, 0xC2	; 194
    16fe:	ef 2e       	mov	r14, r31
    1700:	f1 e0       	ldi	r31, 0x01	; 1
    1702:	ff 2e       	mov	r15, r31
    1704:	cc 24       	eor	r12, r12
    1706:	aa 24       	eor	r10, r10
    1708:	bb 24       	eor	r11, r11
    170a:	88 24       	eor	r8, r8
    170c:	83 94       	inc	r8
    170e:	0e 94 4e 13 	call	0x269c	; 0x269c <STEPPER_move>
    1712:	8d b7       	in	r24, 0x3d	; 61
    1714:	9e b7       	in	r25, 0x3e	; 62
    1716:	09 96       	adiw	r24, 0x09	; 9
    1718:	0f b6       	in	r0, 0x3f	; 63
    171a:	f8 94       	cli
    171c:	9e bf       	out	0x3e, r25	; 62
    171e:	0f be       	out	0x3f, r0	; 63
    1720:	8d bf       	out	0x3d, r24	; 61
	
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	
}
    1722:	1f 91       	pop	r17
    1724:	0f 91       	pop	r16
    1726:	ff 90       	pop	r15
    1728:	ef 90       	pop	r14
    172a:	df 90       	pop	r13
    172c:	cf 90       	pop	r12
    172e:	bf 90       	pop	r11
    1730:	af 90       	pop	r10
    1732:	9f 90       	pop	r9
    1734:	8f 90       	pop	r8
    1736:	7f 90       	pop	r7
    1738:	6f 90       	pop	r6
    173a:	5f 90       	pop	r5
    173c:	08 95       	ret

0000173e <moveLight>:
					 1: Light_Lover = track the light but do not collide
					 2: Light_Aggro = run towards the light and touch it
					 3: Light_Shy = run away from the light
********************************************************************/
char moveLight( int lightBehavior)
{
    173e:	3f 92       	push	r3
    1740:	4f 92       	push	r4
    1742:	5f 92       	push	r5
    1744:	6f 92       	push	r6
    1746:	7f 92       	push	r7
    1748:	8f 92       	push	r8
    174a:	9f 92       	push	r9
    174c:	af 92       	push	r10
    174e:	bf 92       	push	r11
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	7c 01       	movw	r14, r24
	// call the moveWall() to detect walls and return a Boolean
	
	BOOL isLight = (rightLightVolt > LIGHT_R_THRESH)||(leftLightVolt > LIGHT_L_THRESH);
    175e:	40 90 1e 02 	lds	r4, 0x021E
    1762:	50 90 1f 02 	lds	r5, 0x021F
    1766:	60 90 20 02 	lds	r6, 0x0220
    176a:	70 90 21 02 	lds	r7, 0x0221
    176e:	c3 01       	movw	r24, r6
    1770:	b2 01       	movw	r22, r4
    1772:	2b e7       	ldi	r18, 0x7B	; 123
    1774:	34 e1       	ldi	r19, 0x14	; 20
    1776:	46 e8       	ldi	r20, 0x86	; 134
    1778:	50 e4       	ldi	r21, 0x40	; 64
    177a:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__gesf2>
    177e:	18 16       	cp	r1, r24
    1780:	94 f0       	brlt	.+36     	; 0x17a6 <moveLight+0x68>
    1782:	00 e0       	ldi	r16, 0x00	; 0
    1784:	10 e0       	ldi	r17, 0x00	; 0
    1786:	60 91 22 02 	lds	r22, 0x0222
    178a:	70 91 23 02 	lds	r23, 0x0223
    178e:	80 91 24 02 	lds	r24, 0x0224
    1792:	90 91 25 02 	lds	r25, 0x0225
    1796:	2b e7       	ldi	r18, 0x7B	; 123
    1798:	34 e1       	ldi	r19, 0x14	; 20
    179a:	46 e8       	ldi	r20, 0x86	; 134
    179c:	50 e4       	ldi	r21, 0x40	; 64
    179e:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__gesf2>
    17a2:	18 16       	cp	r1, r24
    17a4:	14 f4       	brge	.+4      	; 0x17aa <moveLight+0x6c>
    17a6:	01 e0       	ldi	r16, 0x01	; 1
    17a8:	10 e0       	ldi	r17, 0x00	; 0
    17aa:	30 2e       	mov	r3, r16
	if(isLight == 0){
    17ac:	00 23       	and	r16, r16
    17ae:	09 f4       	brne	.+2      	; 0x17b2 <moveLight+0x74>
    17b0:	31 c1       	rjmp	.+610    	; 0x1a14 <moveLight+0x2d6>
	float stepper_speed_L = 0;
	float stepper_speed_R = 0;
	BOOL direction_L = 1;
	BOOL direction_R = 1;
	
	switch(lightBehavior){
    17b2:	81 e0       	ldi	r24, 0x01	; 1
    17b4:	e8 16       	cp	r14, r24
    17b6:	f1 04       	cpc	r15, r1
    17b8:	f1 f0       	breq	.+60     	; 0x17f6 <moveLight+0xb8>
    17ba:	92 e0       	ldi	r25, 0x02	; 2
    17bc:	e9 16       	cp	r14, r25
    17be:	f1 04       	cpc	r15, r1
    17c0:	1c f4       	brge	.+6      	; 0x17c8 <moveLight+0x8a>
    17c2:	ef 28       	or	r14, r15
    17c4:	c1 f0       	breq	.+48     	; 0x17f6 <moveLight+0xb8>
    17c6:	0a c0       	rjmp	.+20     	; 0x17dc <moveLight+0x9e>
    17c8:	e2 e0       	ldi	r30, 0x02	; 2
    17ca:	ee 16       	cp	r14, r30
    17cc:	f1 04       	cpc	r15, r1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <moveLight+0x94>
    17d0:	4f c0       	rjmp	.+158    	; 0x1870 <moveLight+0x132>
    17d2:	f3 e0       	ldi	r31, 0x03	; 3
    17d4:	ef 16       	cp	r14, r31
    17d6:	f1 04       	cpc	r15, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <moveLight+0x9e>
    17da:	7d c0       	rjmp	.+250    	; 0x18d6 <moveLight+0x198>
    17dc:	0f 2e       	mov	r0, r31
    17de:	f0 e0       	ldi	r31, 0x00	; 0
    17e0:	cf 2e       	mov	r12, r31
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	df 2e       	mov	r13, r31
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	ef 2e       	mov	r14, r31
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	ff 2e       	mov	r15, r31
    17ee:	f0 2d       	mov	r31, r0
    17f0:	46 01       	movw	r8, r12
    17f2:	57 01       	movw	r10, r14
    17f4:	a2 c0       	rjmp	.+324    	; 0x193a <moveLight+0x1fc>
			stepper_speed_L = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_R_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
			stepper_speed_R = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_L_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
			break;
						
		case LIGHT_LOVER:
			stepper_speed_L = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_L_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
    17f6:	60 91 22 02 	lds	r22, 0x0222
    17fa:	70 91 23 02 	lds	r23, 0x0223
    17fe:	80 91 24 02 	lds	r24, 0x0224
    1802:	90 91 25 02 	lds	r25, 0x0225
    1806:	2b e7       	ldi	r18, 0x7B	; 123
    1808:	34 e1       	ldi	r19, 0x14	; 20
    180a:	46 e8       	ldi	r20, 0x86	; 134
    180c:	50 e4       	ldi	r21, 0x40	; 64
    180e:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
    1812:	28 e5       	ldi	r18, 0x58	; 88
    1814:	3f e8       	ldi	r19, 0x8F	; 143
    1816:	42 e0       	ldi	r20, 0x02	; 2
    1818:	5f e3       	ldi	r21, 0x3F	; 63
    181a:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
    181e:	20 e0       	ldi	r18, 0x00	; 0
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	48 ec       	ldi	r20, 0xC8	; 200
    1824:	52 ec       	ldi	r21, 0xC2	; 194
    1826:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
    182a:	20 e0       	ldi	r18, 0x00	; 0
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	48 ec       	ldi	r20, 0xC8	; 200
    1830:	52 e4       	ldi	r21, 0x42	; 66
    1832:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
    1836:	6b 01       	movw	r12, r22
    1838:	7c 01       	movw	r14, r24
			stepper_speed_R = MAX_SPEED_LIGHT - MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_R_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
    183a:	c3 01       	movw	r24, r6
    183c:	b2 01       	movw	r22, r4
    183e:	2b e7       	ldi	r18, 0x7B	; 123
    1840:	34 e1       	ldi	r19, 0x14	; 20
    1842:	46 e8       	ldi	r20, 0x86	; 134
    1844:	50 e4       	ldi	r21, 0x40	; 64
    1846:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
    184a:	28 e5       	ldi	r18, 0x58	; 88
    184c:	3f e8       	ldi	r19, 0x8F	; 143
    184e:	42 e0       	ldi	r20, 0x02	; 2
    1850:	5f e3       	ldi	r21, 0x3F	; 63
    1852:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
    1856:	20 e0       	ldi	r18, 0x00	; 0
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	48 ec       	ldi	r20, 0xC8	; 200
    185c:	52 ec       	ldi	r21, 0xC2	; 194
    185e:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
    1862:	20 e0       	ldi	r18, 0x00	; 0
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	48 ec       	ldi	r20, 0xC8	; 200
    1868:	52 e4       	ldi	r21, 0x42	; 66
    186a:	0e 94 25 23 	call	0x464a	; 0x464a <__addsf3>
    186e:	63 c0       	rjmp	.+198    	; 0x1936 <moveLight+0x1f8>
			break;
			
		case LIGHT_AGGRO:	
			stepper_speed_R = MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_L_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
    1870:	60 91 22 02 	lds	r22, 0x0222
    1874:	70 91 23 02 	lds	r23, 0x0223
    1878:	80 91 24 02 	lds	r24, 0x0224
    187c:	90 91 25 02 	lds	r25, 0x0225
    1880:	2b e7       	ldi	r18, 0x7B	; 123
    1882:	34 e1       	ldi	r19, 0x14	; 20
    1884:	46 e8       	ldi	r20, 0x86	; 134
    1886:	50 e4       	ldi	r21, 0x40	; 64
    1888:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
    188c:	28 e5       	ldi	r18, 0x58	; 88
    188e:	3f e8       	ldi	r19, 0x8F	; 143
    1890:	42 e0       	ldi	r20, 0x02	; 2
    1892:	5f e3       	ldi	r21, 0x3F	; 63
    1894:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	48 ec       	ldi	r20, 0xC8	; 200
    189e:	52 e4       	ldi	r21, 0x42	; 66
    18a0:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
    18a4:	4b 01       	movw	r8, r22
    18a6:	5c 01       	movw	r10, r24
			stepper_speed_L = MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_R_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
    18a8:	c3 01       	movw	r24, r6
    18aa:	b2 01       	movw	r22, r4
    18ac:	2b e7       	ldi	r18, 0x7B	; 123
    18ae:	34 e1       	ldi	r19, 0x14	; 20
    18b0:	46 e8       	ldi	r20, 0x86	; 134
    18b2:	50 e4       	ldi	r21, 0x40	; 64
    18b4:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
    18b8:	28 e5       	ldi	r18, 0x58	; 88
    18ba:	3f e8       	ldi	r19, 0x8F	; 143
    18bc:	42 e0       	ldi	r20, 0x02	; 2
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
    18c4:	20 e0       	ldi	r18, 0x00	; 0
    18c6:	30 e0       	ldi	r19, 0x00	; 0
    18c8:	48 ec       	ldi	r20, 0xC8	; 200
    18ca:	52 e4       	ldi	r21, 0x42	; 66
    18cc:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
    18d0:	6b 01       	movw	r12, r22
    18d2:	7c 01       	movw	r14, r24
    18d4:	32 c0       	rjmp	.+100    	; 0x193a <moveLight+0x1fc>
			break;
			
		case LIGHT_SHY:
			stepper_speed_L = MAX_SPEED_LIGHT*((leftLightVolt - LIGHT_L_THRESH)/(LIGHT_L_MAX - LIGHT_L_THRESH));
    18d6:	60 91 22 02 	lds	r22, 0x0222
    18da:	70 91 23 02 	lds	r23, 0x0223
    18de:	80 91 24 02 	lds	r24, 0x0224
    18e2:	90 91 25 02 	lds	r25, 0x0225
    18e6:	2b e7       	ldi	r18, 0x7B	; 123
    18e8:	34 e1       	ldi	r19, 0x14	; 20
    18ea:	46 e8       	ldi	r20, 0x86	; 134
    18ec:	50 e4       	ldi	r21, 0x40	; 64
    18ee:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
    18f2:	28 e5       	ldi	r18, 0x58	; 88
    18f4:	3f e8       	ldi	r19, 0x8F	; 143
    18f6:	42 e0       	ldi	r20, 0x02	; 2
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	30 e0       	ldi	r19, 0x00	; 0
    1902:	48 ec       	ldi	r20, 0xC8	; 200
    1904:	52 e4       	ldi	r21, 0x42	; 66
    1906:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
    190a:	6b 01       	movw	r12, r22
    190c:	7c 01       	movw	r14, r24
			stepper_speed_R = MAX_SPEED_LIGHT*((rightLightVolt - LIGHT_R_THRESH)/(LIGHT_R_MAX - LIGHT_R_THRESH));
    190e:	c3 01       	movw	r24, r6
    1910:	b2 01       	movw	r22, r4
    1912:	2b e7       	ldi	r18, 0x7B	; 123
    1914:	34 e1       	ldi	r19, 0x14	; 20
    1916:	46 e8       	ldi	r20, 0x86	; 134
    1918:	50 e4       	ldi	r21, 0x40	; 64
    191a:	0e 94 24 23 	call	0x4648	; 0x4648 <__subsf3>
    191e:	28 e5       	ldi	r18, 0x58	; 88
    1920:	3f e8       	ldi	r19, 0x8F	; 143
    1922:	42 e0       	ldi	r20, 0x02	; 2
    1924:	5f e3       	ldi	r21, 0x3F	; 63
    1926:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
    192a:	20 e0       	ldi	r18, 0x00	; 0
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	48 ec       	ldi	r20, 0xC8	; 200
    1930:	52 e4       	ldi	r21, 0x42	; 66
    1932:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
    1936:	4b 01       	movw	r8, r22
    1938:	5c 01       	movw	r10, r24
			break;
			
		default: break;
		}
		
		if(stepper_speed_L<0){
    193a:	c7 01       	movw	r24, r14
    193c:	b6 01       	movw	r22, r12
    193e:	20 e0       	ldi	r18, 0x00	; 0
    1940:	30 e0       	ldi	r19, 0x00	; 0
    1942:	40 e0       	ldi	r20, 0x00	; 0
    1944:	50 e0       	ldi	r21, 0x00	; 0
    1946:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    194a:	88 23       	and	r24, r24
    194c:	64 f4       	brge	.+24     	; 0x1966 <moveLight+0x228>
    194e:	0f 2e       	mov	r0, r31
    1950:	f0 e0       	ldi	r31, 0x00	; 0
    1952:	cf 2e       	mov	r12, r31
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	df 2e       	mov	r13, r31
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	ef 2e       	mov	r14, r31
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	ff 2e       	mov	r15, r31
    1960:	f0 2d       	mov	r31, r0
    1962:	66 24       	eor	r6, r6
    1964:	02 c0       	rjmp	.+4      	; 0x196a <moveLight+0x22c>
    1966:	66 24       	eor	r6, r6
    1968:	63 94       	inc	r6
			stepper_speed_L = 0;
			direction_L = 0;}
		
		if(stepper_speed_R<0){
    196a:	c5 01       	movw	r24, r10
    196c:	b4 01       	movw	r22, r8
    196e:	20 e0       	ldi	r18, 0x00	; 0
    1970:	30 e0       	ldi	r19, 0x00	; 0
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	50 e0       	ldi	r21, 0x00	; 0
    1976:	0e 94 89 23 	call	0x4712	; 0x4712 <__cmpsf2>
    197a:	88 23       	and	r24, r24
    197c:	64 f4       	brge	.+24     	; 0x1996 <moveLight+0x258>
    197e:	0f 2e       	mov	r0, r31
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	8f 2e       	mov	r8, r31
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	9f 2e       	mov	r9, r31
    1988:	f0 e0       	ldi	r31, 0x00	; 0
    198a:	af 2e       	mov	r10, r31
    198c:	f0 e0       	ldi	r31, 0x00	; 0
    198e:	bf 2e       	mov	r11, r31
    1990:	f0 2d       	mov	r31, r0
    1992:	77 24       	eor	r7, r7
    1994:	02 c0       	rjmp	.+4      	; 0x199a <moveLight+0x25c>
    1996:	77 24       	eor	r7, r7
    1998:	73 94       	inc	r7
			stepper_speed_R = 0;
			direction_R = 0;}
			
		// STEPPER_REV
		STEPPER_move_stnb( STEPPER_BOTH, 
    199a:	8d b7       	in	r24, 0x3d	; 61
    199c:	9e b7       	in	r25, 0x3e	; 62
    199e:	09 97       	sbiw	r24, 0x09	; 9
    19a0:	0f b6       	in	r0, 0x3f	; 63
    19a2:	f8 94       	cli
    19a4:	9e bf       	out	0x3e, r25	; 62
    19a6:	0f be       	out	0x3f, r0	; 63
    19a8:	8d bf       	out	0x3d, r24	; 61
    19aa:	0d b7       	in	r16, 0x3d	; 61
    19ac:	1e b7       	in	r17, 0x3e	; 62
    19ae:	0f 5f       	subi	r16, 0xFF	; 255
    19b0:	1f 4f       	sbci	r17, 0xFF	; 255
    19b2:	c7 01       	movw	r24, r14
    19b4:	b6 01       	movw	r22, r12
    19b6:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fixunssfsi>
    19ba:	6b 01       	movw	r12, r22
    19bc:	7c 01       	movw	r14, r24
    19be:	82 e3       	ldi	r24, 0x32	; 50
    19c0:	90 e0       	ldi	r25, 0x00	; 0
    19c2:	f8 01       	movw	r30, r16
    19c4:	91 83       	std	Z+1, r25	; 0x01
    19c6:	80 83       	st	Z, r24
    19c8:	c5 01       	movw	r24, r10
    19ca:	b4 01       	movw	r22, r8
    19cc:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fixunssfsi>
    19d0:	f8 01       	movw	r30, r16
    19d2:	73 83       	std	Z+3, r23	; 0x03
    19d4:	62 83       	std	Z+2, r22	; 0x02
    19d6:	82 ec       	ldi	r24, 0xC2	; 194
    19d8:	91 e0       	ldi	r25, 0x01	; 1
    19da:	95 83       	std	Z+5, r25	; 0x05
    19dc:	84 83       	std	Z+4, r24	; 0x04
    19de:	16 82       	std	Z+6, r1	; 0x06
    19e0:	10 86       	std	Z+8, r1	; 0x08
    19e2:	17 82       	std	Z+7, r1	; 0x07
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	46 2d       	mov	r20, r6
    19ea:	22 e3       	ldi	r18, 0x32	; 50
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	86 01       	movw	r16, r12
    19f0:	a2 ec       	ldi	r26, 0xC2	; 194
    19f2:	ea 2e       	mov	r14, r26
    19f4:	a1 e0       	ldi	r26, 0x01	; 1
    19f6:	fa 2e       	mov	r15, r26
    19f8:	cc 24       	eor	r12, r12
    19fa:	aa 24       	eor	r10, r10
    19fc:	bb 24       	eor	r11, r11
    19fe:	87 2c       	mov	r8, r7
    1a00:	0e 94 4e 13 	call	0x269c	; 0x269c <STEPPER_move>
    1a04:	8d b7       	in	r24, 0x3d	; 61
    1a06:	9e b7       	in	r25, 0x3e	; 62
    1a08:	09 96       	adiw	r24, 0x09	; 9
    1a0a:	0f b6       	in	r0, 0x3f	; 63
    1a0c:	f8 94       	cli
    1a0e:	9e bf       	out	0x3e, r25	; 62
    1a10:	0f be       	out	0x3f, r0	; 63
    1a12:	8d bf       	out	0x3d, r24	; 61
		direction_L, 50, stepper_speed_L, 450, STEPPER_BRK_OFF, // Left
		direction_R, 50, stepper_speed_R, 450, STEPPER_BRK_OFF ); // Right

		return isLight;
}
    1a14:	83 2d       	mov	r24, r3
    1a16:	1f 91       	pop	r17
    1a18:	0f 91       	pop	r16
    1a1a:	ff 90       	pop	r15
    1a1c:	ef 90       	pop	r14
    1a1e:	df 90       	pop	r13
    1a20:	cf 90       	pop	r12
    1a22:	bf 90       	pop	r11
    1a24:	af 90       	pop	r10
    1a26:	9f 90       	pop	r9
    1a28:	8f 90       	pop	r8
    1a2a:	7f 90       	pop	r7
    1a2c:	6f 90       	pop	r6
    1a2e:	5f 90       	pop	r5
    1a30:	4f 90       	pop	r4
    1a32:	3f 90       	pop	r3
    1a34:	08 95       	ret

00001a36 <moveRetreat>:
* Output Return:	char
* Overview:		    Moves robot backwards until contact sensors encounter
					a wall or obstacle
********************************************************************/
char moveRetreat( void )
{
    1a36:	4f 92       	push	r4
    1a38:	5f 92       	push	r5
    1a3a:	6f 92       	push	r6
    1a3c:	7f 92       	push	r7
    1a3e:	8f 92       	push	r8
    1a40:	af 92       	push	r10
    1a42:	bf 92       	push	r11
    1a44:	cf 92       	push	r12
    1a46:	ef 92       	push	r14
    1a48:	ff 92       	push	r15
    1a4a:	0f 93       	push	r16
    1a4c:	1f 93       	push	r17
	// Make a variable that keeps track of this behavior
	char isRetreat = 0;
	
	// Back up until an object is encountered
	// Check for left and right contact
	if((rightContact != 1)&&(leftContact != 1))
    1a4e:	90 91 18 04 	lds	r25, 0x0418
    1a52:	91 30       	cpi	r25, 0x01	; 1
    1a54:	a1 f1       	breq	.+104    	; 0x1abe <moveRetreat+0x88>
    1a56:	80 91 19 04 	lds	r24, 0x0419
    1a5a:	81 30       	cpi	r24, 0x01	; 1
    1a5c:	81 f1       	breq	.+96     	; 0x1abe <moveRetreat+0x88>
	{	
		// move backward while nothing is detected
		STEPPER_move_stnb( STEPPER_BOTH, 
    1a5e:	2d b7       	in	r18, 0x3d	; 61
    1a60:	3e b7       	in	r19, 0x3e	; 62
    1a62:	29 50       	subi	r18, 0x09	; 9
    1a64:	30 40       	sbci	r19, 0x00	; 0
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	3e bf       	out	0x3e, r19	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	2d bf       	out	0x3d, r18	; 61
    1a70:	ed b7       	in	r30, 0x3d	; 61
    1a72:	fe b7       	in	r31, 0x3e	; 62
    1a74:	31 96       	adiw	r30, 0x01	; 1
    1a76:	88 ec       	ldi	r24, 0xC8	; 200
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	ad b7       	in	r26, 0x3d	; 61
    1a7c:	be b7       	in	r27, 0x3e	; 62
    1a7e:	12 96       	adiw	r26, 0x02	; 2
    1a80:	9c 93       	st	X, r25
    1a82:	8e 93       	st	-X, r24
    1a84:	11 97       	sbiw	r26, 0x01	; 1
    1a86:	93 83       	std	Z+3, r25	; 0x03
    1a88:	82 83       	std	Z+2, r24	; 0x02
    1a8a:	82 ec       	ldi	r24, 0xC2	; 194
    1a8c:	91 e0       	ldi	r25, 0x01	; 1
    1a8e:	95 83       	std	Z+5, r25	; 0x05
    1a90:	84 83       	std	Z+4, r24	; 0x04
    1a92:	16 82       	std	Z+6, r1	; 0x06
    1a94:	10 86       	std	Z+8, r1	; 0x08
    1a96:	17 82       	std	Z+7, r1	; 0x07
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	62 e0       	ldi	r22, 0x02	; 2
    1a9c:	40 e0       	ldi	r20, 0x00	; 0
    1a9e:	28 ec       	ldi	r18, 0xC8	; 200
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	08 ec       	ldi	r16, 0xC8	; 200
    1aa4:	10 e0       	ldi	r17, 0x00	; 0
    1aa6:	52 ec       	ldi	r21, 0xC2	; 194
    1aa8:	e5 2e       	mov	r14, r21
    1aaa:	51 e0       	ldi	r21, 0x01	; 1
    1aac:	f5 2e       	mov	r15, r21
    1aae:	cc 24       	eor	r12, r12
    1ab0:	aa 24       	eor	r10, r10
    1ab2:	bb 24       	eor	r11, r11
    1ab4:	88 24       	eor	r8, r8
    1ab6:	0e 94 4e 13 	call	0x269c	; 0x269c <STEPPER_move>
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	a5 c0       	rjmp	.+330    	; 0x1c08 <moveRetreat+0x1d2>
		
		isRetreat = 1;
	}
	
	// Check right contact
	else if((leftContact == 0)&&(rightContact == 1))
    1abe:	80 91 19 04 	lds	r24, 0x0419
    1ac2:	88 23       	and	r24, r24
    1ac4:	09 f0       	breq	.+2      	; 0x1ac8 <moveRetreat+0x92>
    1ac6:	4d c0       	rjmp	.+154    	; 0x1b62 <moveRetreat+0x12c>
    1ac8:	91 30       	cpi	r25, 0x01	; 1
    1aca:	09 f0       	breq	.+2      	; 0x1ace <moveRetreat+0x98>
    1acc:	aa c0       	rjmp	.+340    	; 0x1c22 <moveRetreat+0x1ec>
	{
		// move forward to leave room for turn
		STEPPER_move_stwt( STEPPER_BOTH, 
    1ace:	8d b7       	in	r24, 0x3d	; 61
    1ad0:	9e b7       	in	r25, 0x3e	; 62
    1ad2:	09 97       	sbiw	r24, 0x09	; 9
    1ad4:	0f b6       	in	r0, 0x3f	; 63
    1ad6:	f8 94       	cli
    1ad8:	9e bf       	out	0x3e, r25	; 62
    1ada:	0f be       	out	0x3f, r0	; 63
    1adc:	8d bf       	out	0x3d, r24	; 61
    1ade:	ed b7       	in	r30, 0x3d	; 61
    1ae0:	fe b7       	in	r31, 0x3e	; 62
    1ae2:	31 96       	adiw	r30, 0x01	; 1
    1ae4:	8b e4       	ldi	r24, 0x4B	; 75
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	ad b7       	in	r26, 0x3d	; 61
    1aea:	be b7       	in	r27, 0x3e	; 62
    1aec:	12 96       	adiw	r26, 0x02	; 2
    1aee:	9c 93       	st	X, r25
    1af0:	8e 93       	st	-X, r24
    1af2:	11 97       	sbiw	r26, 0x01	; 1
    1af4:	38 ec       	ldi	r19, 0xC8	; 200
    1af6:	43 2e       	mov	r4, r19
    1af8:	51 2c       	mov	r5, r1
    1afa:	53 82       	std	Z+3, r5	; 0x03
    1afc:	42 82       	std	Z+2, r4	; 0x02
    1afe:	2a ef       	ldi	r18, 0xFA	; 250
    1b00:	62 2e       	mov	r6, r18
    1b02:	71 2c       	mov	r7, r1
    1b04:	75 82       	std	Z+5, r7	; 0x05
    1b06:	64 82       	std	Z+4, r6	; 0x04
    1b08:	16 82       	std	Z+6, r1	; 0x06
    1b0a:	10 86       	std	Z+8, r1	; 0x08
    1b0c:	17 82       	std	Z+7, r1	; 0x07
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	62 e0       	ldi	r22, 0x02	; 2
    1b12:	41 e0       	ldi	r20, 0x01	; 1
    1b14:	2b e4       	ldi	r18, 0x4B	; 75
    1b16:	30 e0       	ldi	r19, 0x00	; 0
    1b18:	08 ec       	ldi	r16, 0xC8	; 200
    1b1a:	10 e0       	ldi	r17, 0x00	; 0
    1b1c:	9a ef       	ldi	r25, 0xFA	; 250
    1b1e:	e9 2e       	mov	r14, r25
    1b20:	f1 2c       	mov	r15, r1
    1b22:	cc 24       	eor	r12, r12
    1b24:	aa 24       	eor	r10, r10
    1b26:	bb 24       	eor	r11, r11
    1b28:	88 24       	eor	r8, r8
    1b2a:	83 94       	inc	r8
    1b2c:	0e 94 4e 13 	call	0x269c	; 0x269c <STEPPER_move>
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF ); // Right
		
		// Turn 1/4 of a revolution CW
		STEPPER_move_stwt( STEPPER_BOTH, 
    1b30:	ed b7       	in	r30, 0x3d	; 61
    1b32:	fe b7       	in	r31, 0x3e	; 62
    1b34:	31 96       	adiw	r30, 0x01	; 1
    1b36:	84 e6       	ldi	r24, 0x64	; 100
    1b38:	90 e0       	ldi	r25, 0x00	; 0
    1b3a:	ad b7       	in	r26, 0x3d	; 61
    1b3c:	be b7       	in	r27, 0x3e	; 62
    1b3e:	12 96       	adiw	r26, 0x02	; 2
    1b40:	9c 93       	st	X, r25
    1b42:	8e 93       	st	-X, r24
    1b44:	11 97       	sbiw	r26, 0x01	; 1
    1b46:	53 82       	std	Z+3, r5	; 0x03
    1b48:	42 82       	std	Z+2, r4	; 0x02
    1b4a:	75 82       	std	Z+5, r7	; 0x05
    1b4c:	64 82       	std	Z+4, r6	; 0x04
    1b4e:	16 82       	std	Z+6, r1	; 0x06
    1b50:	10 86       	std	Z+8, r1	; 0x08
    1b52:	17 82       	std	Z+7, r1	; 0x07
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	62 e0       	ldi	r22, 0x02	; 2
    1b58:	41 e0       	ldi	r20, 0x01	; 1
    1b5a:	24 e6       	ldi	r18, 0x64	; 100
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	88 24       	eor	r8, r8
    1b60:	4e c0       	rjmp	.+156    	; 0x1bfe <moveRetreat+0x1c8>
		STEPPER_FWD, 100, 200, 250, STEPPER_BRK_OFF ); // Right
		retreatFlagStatus = 0;
	}
	
	// Check left contact
	else if((leftContact == 1)&&(rightContact == 0))
    1b62:	81 30       	cpi	r24, 0x01	; 1
    1b64:	09 f0       	breq	.+2      	; 0x1b68 <moveRetreat+0x132>
    1b66:	5d c0       	rjmp	.+186    	; 0x1c22 <moveRetreat+0x1ec>
    1b68:	99 23       	and	r25, r25
    1b6a:	09 f0       	breq	.+2      	; 0x1b6e <moveRetreat+0x138>
    1b6c:	57 c0       	rjmp	.+174    	; 0x1c1c <moveRetreat+0x1e6>
	{
		// move forward to leave room for turn
		STEPPER_move_stwt( STEPPER_BOTH, 
    1b6e:	8d b7       	in	r24, 0x3d	; 61
    1b70:	9e b7       	in	r25, 0x3e	; 62
    1b72:	09 97       	sbiw	r24, 0x09	; 9
    1b74:	0f b6       	in	r0, 0x3f	; 63
    1b76:	f8 94       	cli
    1b78:	9e bf       	out	0x3e, r25	; 62
    1b7a:	0f be       	out	0x3f, r0	; 63
    1b7c:	8d bf       	out	0x3d, r24	; 61
    1b7e:	ed b7       	in	r30, 0x3d	; 61
    1b80:	fe b7       	in	r31, 0x3e	; 62
    1b82:	31 96       	adiw	r30, 0x01	; 1
    1b84:	8b e4       	ldi	r24, 0x4B	; 75
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	ad b7       	in	r26, 0x3d	; 61
    1b8a:	be b7       	in	r27, 0x3e	; 62
    1b8c:	12 96       	adiw	r26, 0x02	; 2
    1b8e:	9c 93       	st	X, r25
    1b90:	8e 93       	st	-X, r24
    1b92:	11 97       	sbiw	r26, 0x01	; 1
    1b94:	08 ec       	ldi	r16, 0xC8	; 200
    1b96:	40 2e       	mov	r4, r16
    1b98:	51 2c       	mov	r5, r1
    1b9a:	53 82       	std	Z+3, r5	; 0x03
    1b9c:	42 82       	std	Z+2, r4	; 0x02
    1b9e:	1a ef       	ldi	r17, 0xFA	; 250
    1ba0:	61 2e       	mov	r6, r17
    1ba2:	71 2c       	mov	r7, r1
    1ba4:	75 82       	std	Z+5, r7	; 0x05
    1ba6:	64 82       	std	Z+4, r6	; 0x04
    1ba8:	16 82       	std	Z+6, r1	; 0x06
    1baa:	10 86       	std	Z+8, r1	; 0x08
    1bac:	17 82       	std	Z+7, r1	; 0x07
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	62 e0       	ldi	r22, 0x02	; 2
    1bb2:	41 e0       	ldi	r20, 0x01	; 1
    1bb4:	2b e4       	ldi	r18, 0x4B	; 75
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	08 ec       	ldi	r16, 0xC8	; 200
    1bba:	10 e0       	ldi	r17, 0x00	; 0
    1bbc:	ba ef       	ldi	r27, 0xFA	; 250
    1bbe:	eb 2e       	mov	r14, r27
    1bc0:	f1 2c       	mov	r15, r1
    1bc2:	cc 24       	eor	r12, r12
    1bc4:	aa 24       	eor	r10, r10
    1bc6:	bb 24       	eor	r11, r11
    1bc8:	88 24       	eor	r8, r8
    1bca:	83 94       	inc	r8
    1bcc:	0e 94 4e 13 	call	0x269c	; 0x269c <STEPPER_move>
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 75, 200, 250, STEPPER_BRK_OFF ); // Right
			
		// Turn 1/4 of a revolution CCW
		STEPPER_move_stwt( STEPPER_BOTH, 
    1bd0:	ed b7       	in	r30, 0x3d	; 61
    1bd2:	fe b7       	in	r31, 0x3e	; 62
    1bd4:	31 96       	adiw	r30, 0x01	; 1
    1bd6:	84 e6       	ldi	r24, 0x64	; 100
    1bd8:	90 e0       	ldi	r25, 0x00	; 0
    1bda:	ad b7       	in	r26, 0x3d	; 61
    1bdc:	be b7       	in	r27, 0x3e	; 62
    1bde:	12 96       	adiw	r26, 0x02	; 2
    1be0:	9c 93       	st	X, r25
    1be2:	8e 93       	st	-X, r24
    1be4:	11 97       	sbiw	r26, 0x01	; 1
    1be6:	53 82       	std	Z+3, r5	; 0x03
    1be8:	42 82       	std	Z+2, r4	; 0x02
    1bea:	75 82       	std	Z+5, r7	; 0x05
    1bec:	64 82       	std	Z+4, r6	; 0x04
    1bee:	16 82       	std	Z+6, r1	; 0x06
    1bf0:	10 86       	std	Z+8, r1	; 0x08
    1bf2:	17 82       	std	Z+7, r1	; 0x07
    1bf4:	80 e0       	ldi	r24, 0x00	; 0
    1bf6:	62 e0       	ldi	r22, 0x02	; 2
    1bf8:	40 e0       	ldi	r20, 0x00	; 0
    1bfa:	24 e6       	ldi	r18, 0x64	; 100
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	0e 94 4e 13 	call	0x269c	; 0x269c <STEPPER_move>
		STEPPER_FWD, 100, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 100, 200, 250, STEPPER_BRK_OFF ); // Right
		retreatFlagStatus = 0;
    1c02:	10 92 27 02 	sts	0x0227, r1
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	2d b7       	in	r18, 0x3d	; 61
    1c0a:	3e b7       	in	r19, 0x3e	; 62
    1c0c:	27 5f       	subi	r18, 0xF7	; 247
    1c0e:	3f 4f       	sbci	r19, 0xFF	; 255
    1c10:	0f b6       	in	r0, 0x3f	; 63
    1c12:	f8 94       	cli
    1c14:	3e bf       	out	0x3e, r19	; 62
    1c16:	0f be       	out	0x3f, r0	; 63
    1c18:	2d bf       	out	0x3d, r18	; 61
    1c1a:	04 c0       	rjmp	.+8      	; 0x1c24 <moveRetreat+0x1ee>
	}
	
	// check both contacts
	else if ((leftContact == 1)&&(rightContact == 1))
    1c1c:	91 30       	cpi	r25, 0x01	; 1
    1c1e:	09 f4       	brne	.+2      	; 0x1c22 <moveRetreat+0x1ec>
    1c20:	a6 cf       	rjmp	.-180    	; 0x1b6e <moveRetreat+0x138>
			
		// Turn 1/4 of a revolution CCW
		STEPPER_move_stwt( STEPPER_BOTH, 
		STEPPER_FWD, 100, 200, 250, STEPPER_BRK_OFF, // Left
		STEPPER_REV, 100, 200, 250, STEPPER_BRK_OFF ); // Right
		retreatFlagStatus = 0;
    1c22:	80 e0       	ldi	r24, 0x00	; 0
	}
	
	return isRetreat;
}
    1c24:	1f 91       	pop	r17
    1c26:	0f 91       	pop	r16
    1c28:	ff 90       	pop	r15
    1c2a:	ef 90       	pop	r14
    1c2c:	cf 90       	pop	r12
    1c2e:	bf 90       	pop	r11
    1c30:	af 90       	pop	r10
    1c32:	8f 90       	pop	r8
    1c34:	7f 90       	pop	r7
    1c36:	6f 90       	pop	r6
    1c38:	5f 90       	pop	r5
    1c3a:	4f 90       	pop	r4
    1c3c:	08 95       	ret

00001c3e <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    1c3e:	8f 92       	push	r8
    1c40:	af 92       	push	r10
    1c42:	bf 92       	push	r11
    1c44:	cf 92       	push	r12
    1c46:	df 92       	push	r13
    1c48:	ef 92       	push	r14
    1c4a:	ff 92       	push	r15
    1c4c:	0f 93       	push	r16
    1c4e:	1f 93       	push	r17
    1c50:	cf 93       	push	r28
    1c52:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    1c54:	0e 94 86 12 	call	0x250c	; 0x250c <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    1c58:	67 2b       	or	r22, r23
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <moveWander+0x20>
    1c5c:	76 c0       	rjmp	.+236    	; 0x1d4a <moveWander+0x10c>
    1c5e:	89 2b       	or	r24, r25
    1c60:	09 f0       	breq	.+2      	; 0x1c64 <moveWander+0x26>
    1c62:	73 c0       	rjmp	.+230    	; 0x1d4a <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    1c64:	0e 94 34 2c 	call	0x5868	; 0x5868 <rand>
    1c68:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    1c6a:	0e 94 34 2c 	call	0x5868	; 0x5868 <rand>
    1c6e:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    1c70:	0e 94 34 2c 	call	0x5868	; 0x5868 <rand>
    1c74:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    1c76:	0e 94 34 2c 	call	0x5868	; 0x5868 <rand>
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	6a e0       	ldi	r22, 0x0A	; 10
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__divmodhi4>
    1c84:	08 97       	sbiw	r24, 0x08	; 8
    1c86:	0c f0       	brlt	.+2      	; 0x1c8a <moveWander+0x4c>
    1c88:	21 e0       	ldi	r18, 0x01	; 1
    1c8a:	82 2e       	mov	r8, r18
    1c8c:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    1c8e:	c8 01       	movw	r24, r16
    1c90:	60 e9       	ldi	r22, 0x90	; 144
    1c92:	71 e0       	ldi	r23, 0x01	; 1
    1c94:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__divmodhi4>
    1c98:	e0 e9       	ldi	r30, 0x90	; 144
    1c9a:	ae 2e       	mov	r10, r30
    1c9c:	e1 e0       	ldi	r30, 0x01	; 1
    1c9e:	be 2e       	mov	r11, r30
    1ca0:	a8 0e       	add	r10, r24
    1ca2:	b9 1e       	adc	r11, r25
    1ca4:	8d b7       	in	r24, 0x3d	; 61
    1ca6:	9e b7       	in	r25, 0x3e	; 62
    1ca8:	09 97       	sbiw	r24, 0x09	; 9
    1caa:	0f b6       	in	r0, 0x3f	; 63
    1cac:	f8 94       	cli
    1cae:	9e bf       	out	0x3e, r25	; 62
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	8d bf       	out	0x3d, r24	; 61
    1cb4:	0d b7       	in	r16, 0x3d	; 61
    1cb6:	1e b7       	in	r17, 0x3e	; 62
    1cb8:	0f 5f       	subi	r16, 0xFF	; 255
    1cba:	1f 4f       	sbci	r17, 0xFF	; 255
    1cbc:	c7 01       	movw	r24, r14
    1cbe:	68 ec       	ldi	r22, 0xC8	; 200
    1cc0:	70 e0       	ldi	r23, 0x00	; 0
    1cc2:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__divmodhi4>
    1cc6:	88 53       	subi	r24, 0x38	; 56
    1cc8:	9f 4f       	sbci	r25, 0xFF	; 255
    1cca:	aa 27       	eor	r26, r26
    1ccc:	97 fd       	sbrc	r25, 7
    1cce:	a0 95       	com	r26
    1cd0:	ba 2f       	mov	r27, r26
    1cd2:	bc 01       	movw	r22, r24
    1cd4:	cd 01       	movw	r24, r26
    1cd6:	0e 94 28 24 	call	0x4850	; 0x4850 <__floatsisf>
    1cda:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fixunssfsi>
    1cde:	6b 01       	movw	r12, r22
    1ce0:	7c 01       	movw	r14, r24
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	b1 82       	std	Z+1, r11	; 0x01
    1ce6:	a0 82       	st	Z, r10
    1ce8:	ce 01       	movw	r24, r28
    1cea:	68 ec       	ldi	r22, 0xC8	; 200
    1cec:	70 e0       	ldi	r23, 0x00	; 0
    1cee:	0e 94 65 2a 	call	0x54ca	; 0x54ca <__divmodhi4>
    1cf2:	88 53       	subi	r24, 0x38	; 56
    1cf4:	9f 4f       	sbci	r25, 0xFF	; 255
    1cf6:	aa 27       	eor	r26, r26
    1cf8:	97 fd       	sbrc	r25, 7
    1cfa:	a0 95       	com	r26
    1cfc:	ba 2f       	mov	r27, r26
    1cfe:	bc 01       	movw	r22, r24
    1d00:	cd 01       	movw	r24, r26
    1d02:	0e 94 28 24 	call	0x4850	; 0x4850 <__floatsisf>
    1d06:	0e 94 fa 23 	call	0x47f4	; 0x47f4 <__fixunssfsi>
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	73 83       	std	Z+3, r23	; 0x03
    1d0e:	62 83       	std	Z+2, r22	; 0x02
    1d10:	82 ec       	ldi	r24, 0xC2	; 194
    1d12:	91 e0       	ldi	r25, 0x01	; 1
    1d14:	95 83       	std	Z+5, r25	; 0x05
    1d16:	84 83       	std	Z+4, r24	; 0x04
    1d18:	16 82       	std	Z+6, r1	; 0x06
    1d1a:	10 86       	std	Z+8, r1	; 0x08
    1d1c:	17 82       	std	Z+7, r1	; 0x07
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	62 e0       	ldi	r22, 0x02	; 2
    1d22:	48 2d       	mov	r20, r8
    1d24:	95 01       	movw	r18, r10
    1d26:	86 01       	movw	r16, r12
    1d28:	72 ec       	ldi	r23, 0xC2	; 194
    1d2a:	e7 2e       	mov	r14, r23
    1d2c:	71 e0       	ldi	r23, 0x01	; 1
    1d2e:	f7 2e       	mov	r15, r23
    1d30:	cc 24       	eor	r12, r12
    1d32:	aa 24       	eor	r10, r10
    1d34:	bb 24       	eor	r11, r11
    1d36:	0e 94 4e 13 	call	0x269c	; 0x269c <STEPPER_move>
    1d3a:	8d b7       	in	r24, 0x3d	; 61
    1d3c:	9e b7       	in	r25, 0x3e	; 62
    1d3e:	09 96       	adiw	r24, 0x09	; 9
    1d40:	0f b6       	in	r0, 0x3f	; 63
    1d42:	f8 94       	cli
    1d44:	9e bf       	out	0x3e, r25	; 62
    1d46:	0f be       	out	0x3f, r0	; 63
    1d48:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	df 91       	pop	r29
    1d4e:	cf 91       	pop	r28
    1d50:	1f 91       	pop	r17
    1d52:	0f 91       	pop	r16
    1d54:	ff 90       	pop	r15
    1d56:	ef 90       	pop	r14
    1d58:	df 90       	pop	r13
    1d5a:	cf 90       	pop	r12
    1d5c:	bf 90       	pop	r11
    1d5e:	af 90       	pop	r10
    1d60:	8f 90       	pop	r8
    1d62:	08 95       	ret

00001d64 <moveTrackLight>:
{
	// make a variable that keeps track of the light tracking behavior
	char isTracking = 0;
	
	// check to see if there is too much light (is the robot in front of the light?)
	if((leftLightVolt >= LIGHT_L_MAX)&&(rightLightVolt >= LIGHT_R_MAX))
    1d64:	60 91 22 02 	lds	r22, 0x0222
    1d68:	70 91 23 02 	lds	r23, 0x0223
    1d6c:	80 91 24 02 	lds	r24, 0x0224
    1d70:	90 91 25 02 	lds	r25, 0x0225
    1d74:	26 e6       	ldi	r18, 0x66	; 102
    1d76:	36 e6       	ldi	r19, 0x66	; 102
    1d78:	46 e9       	ldi	r20, 0x96	; 150
    1d7a:	50 e4       	ldi	r21, 0x40	; 64
    1d7c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__gesf2>
    1d80:	88 23       	and	r24, r24
    1d82:	fc f0       	brlt	.+62     	; 0x1dc2 <moveTrackLight+0x5e>
    1d84:	60 91 1e 02 	lds	r22, 0x021E
    1d88:	70 91 1f 02 	lds	r23, 0x021F
    1d8c:	80 91 20 02 	lds	r24, 0x0220
    1d90:	90 91 21 02 	lds	r25, 0x0221
    1d94:	26 e6       	ldi	r18, 0x66	; 102
    1d96:	36 e6       	ldi	r19, 0x66	; 102
    1d98:	46 e9       	ldi	r20, 0x96	; 150
    1d9a:	50 e4       	ldi	r21, 0x40	; 64
    1d9c:	0e 94 d8 24 	call	0x49b0	; 0x49b0 <__gesf2>
    1da0:	88 23       	and	r24, r24
    1da2:	7c f0       	brlt	.+30     	; 0x1dc2 <moveTrackLight+0x5e>
	{
		// set global flags to 1
		lightFlagStatus = 1;
    1da4:	81 e0       	ldi	r24, 0x01	; 1
    1da6:	80 93 26 02 	sts	0x0226, r24
		retreatFlagStatus = 1;
    1daa:	80 93 27 02 	sts	0x0227, r24
		
		// Act as a docking robot
		LCD_printf("Arkin = Docked.\nPreparing to retreat.\n\n");
    1dae:	84 e2       	ldi	r24, 0x24	; 36
    1db0:	91 e0       	ldi	r25, 0x01	; 1
    1db2:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <puts>
		TMRSRVC_delay(3000);//wait 3 seconds
    1db6:	88 eb       	ldi	r24, 0xB8	; 184
    1db8:	9b e0       	ldi	r25, 0x0B	; 11
    1dba:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TMRSRVC_delay>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	08 95       	ret
	}
	// else run moveLight(Lover) behavior
	else
	{
		// inhibit LOVER behavior of move light
		isTracking = moveLight(LIGHT_LOVER);
    1dc2:	81 e0       	ldi	r24, 0x01	; 1
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	0e 94 9f 0b 	call	0x173e	; 0x173e <moveLight>
	}
	
	return isTracking;
}
    1dca:	08 95       	ret

00001dcc <moveWorld>:
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
	char currentMove = moveCommands[currentMoveWorld];
	switch(currentMove){
    1dcc:	e0 91 29 02 	lds	r30, 0x0229
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	e9 56       	subi	r30, 0x69	; 105
    1dd4:	fc 4f       	sbci	r31, 0xFC	; 252
    1dd6:	e0 81       	ld	r30, Z
    1dd8:	e2 30       	cpi	r30, 0x02	; 2
    1dda:	51 f0       	breq	.+20     	; 0x1df0 <moveWorld+0x24>
    1ddc:	e3 30       	cpi	r30, 0x03	; 3
    1dde:	71 f0       	breq	.+28     	; 0x1dfc <moveWorld+0x30>
    1de0:	e1 30       	cpi	r30, 0x01	; 1
    1de2:	e9 f4       	brne	.+58     	; 0x1e1e <moveWorld+0x52>
	case 1:
		LCD_clear();
    1de4:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_clear>
		LCD_printf("Left");
    1de8:	00 d0       	rcall	.+0      	; 0x1dea <moveWorld+0x1e>
    1dea:	8b e4       	ldi	r24, 0x4B	; 75
    1dec:	91 e0       	ldi	r25, 0x01	; 1
    1dee:	0b c0       	rjmp	.+22     	; 0x1e06 <moveWorld+0x3a>
		TMRSRVC_delay(1000);//wait 1 seconds
		break;
	case 2:
		LCD_clear();
    1df0:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_clear>
		LCD_printf("Forward");
    1df4:	00 d0       	rcall	.+0      	; 0x1df6 <moveWorld+0x2a>
    1df6:	80 e5       	ldi	r24, 0x50	; 80
    1df8:	91 e0       	ldi	r25, 0x01	; 1
    1dfa:	05 c0       	rjmp	.+10     	; 0x1e06 <moveWorld+0x3a>
		TMRSRVC_delay(1000);//wait 1 seconds
		break;
	case 3:
		LCD_clear();
    1dfc:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_clear>
		LCD_printf("Right");
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <moveWorld+0x36>
    1e02:	88 e5       	ldi	r24, 0x58	; 88
    1e04:	91 e0       	ldi	r25, 0x01	; 1
    1e06:	ed b7       	in	r30, 0x3d	; 61
    1e08:	fe b7       	in	r31, 0x3e	; 62
    1e0a:	92 83       	std	Z+2, r25	; 0x02
    1e0c:	81 83       	std	Z+1, r24	; 0x01
    1e0e:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <printf>
		TMRSRVC_delay(1000);//wait 1 seconds
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	88 ee       	ldi	r24, 0xE8	; 232
    1e18:	93 e0       	ldi	r25, 0x03	; 3
    1e1a:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TMRSRVC_delay>
		break;
	default:
		break;
	}
	currentMoveWorld += 1;
    1e1e:	80 91 29 02 	lds	r24, 0x0229
    1e22:	8f 5f       	subi	r24, 0xFF	; 255
    1e24:	80 93 29 02 	sts	0x0229, r24
	return 1;
}
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	08 95       	ret

00001e2c <moveBehavior>:
* Overview:		    This is the flow for the behavior of the robot
********************************************************************/
char moveBehavior( int behavior)
{
	// Check the moveAway behavior for obstacles
	if(moveAway()){
    1e2c:	0e 94 d5 08 	call	0x11aa	; 0x11aa <moveAway>
    1e30:	88 23       	and	r24, r24
    1e32:	71 f0       	breq	.+28     	; 0x1e50 <moveBehavior+0x24>
		Ierror = 0;
    1e34:	80 e0       	ldi	r24, 0x00	; 0
    1e36:	90 e0       	ldi	r25, 0x00	; 0
    1e38:	a0 e0       	ldi	r26, 0x00	; 0
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	80 93 06 02 	sts	0x0206, r24
    1e40:	90 93 07 02 	sts	0x0207, r25
    1e44:	a0 93 08 02 	sts	0x0208, r26
    1e48:	b0 93 09 02 	sts	0x0209, r27
    1e4c:	81 e0       	ldi	r24, 0x01	; 1
    1e4e:	08 95       	ret
		return 1; 
	}
	
	if(moveWorld()){
    1e50:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <moveWorld>
    1e54:	88 23       	and	r24, r24
    1e56:	71 f0       	breq	.+28     	; 0x1e74 <moveBehavior+0x48>
		Ierror = 0;
    1e58:	80 e0       	ldi	r24, 0x00	; 0
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	a0 e0       	ldi	r26, 0x00	; 0
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	80 93 06 02 	sts	0x0206, r24
    1e64:	90 93 07 02 	sts	0x0207, r25
    1e68:	a0 93 08 02 	sts	0x0208, r26
    1e6c:	b0 93 09 02 	sts	0x0209, r27
    1e70:	82 e0       	ldi	r24, 0x02	; 2
    1e72:	08 95       	ret
		return 2; 
	}
	
	if(moveWallFlagStatus){
    1e74:	80 91 28 02 	lds	r24, 0x0228
    1e78:	88 23       	and	r24, r24
    1e7a:	91 f0       	breq	.+36     	; 0x1ea0 <moveBehavior+0x74>
		// Run the moveWall behavior
		if(moveWall()){
    1e7c:	0e 94 3a 0a 	call	0x1474	; 0x1474 <moveWall>
    1e80:	88 23       	and	r24, r24
    1e82:	71 f0       	breq	.+28     	; 0x1ea0 <moveBehavior+0x74>
			Ierror = 0;
    1e84:	80 e0       	ldi	r24, 0x00	; 0
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	a0 e0       	ldi	r26, 0x00	; 0
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	80 93 06 02 	sts	0x0206, r24
    1e90:	90 93 07 02 	sts	0x0207, r25
    1e94:	a0 93 08 02 	sts	0x0208, r26
    1e98:	b0 93 09 02 	sts	0x0209, r27
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	08 95       	ret
			return 3;
    1ea0:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	return 0;	
}
    1ea2:	08 95       	ret

00001ea4 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    1ea4:	af 92       	push	r10
    1ea6:	bf 92       	push	r11
    1ea8:	cf 92       	push	r12
    1eaa:	df 92       	push	r13
    1eac:	ef 92       	push	r14
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
	int btnHolder = 0;
	int btnHolderOld = 0;
	
	char recentButtonState = UNPRESSED;
	
	LCD_clear();
    1eb8:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_clear>
    1ebc:	00 e0       	ldi	r16, 0x00	; 0
    1ebe:	10 e0       	ldi	r17, 0x00	; 0
    1ec0:	ee 24       	eor	r14, r14
    1ec2:	ff 24       	eor	r15, r15
    1ec4:	cc 24       	eor	r12, r12
    1ec6:	dd 24       	eor	r13, r13
			btnHolder = WaitButton();
		}
		LCD_clear();
		
		moveCommands[ii] = btnHolder;
		LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,ii);
    1ec8:	fe e5       	ldi	r31, 0x5E	; 94
    1eca:	af 2e       	mov	r10, r31
    1ecc:	f1 e0       	ldi	r31, 0x01	; 1
    1ece:	bf 2e       	mov	r11, r31
    1ed0:	3f c0       	rjmp	.+126    	; 0x1f50 <movesInput+0xac>
	LCD_clear();
	
	for (ii; ii < MAX_MOVE_SIZE; ii++){
		// while NO buttons are pressed
		while(btnHolder==UNPRESSED){
			btnHolder = WaitButton();
    1ed2:	0e 94 a5 05 	call	0xb4a	; 0xb4a <WaitButton>
    1ed6:	ec 01       	movw	r28, r24
	
	LCD_clear();
	
	for (ii; ii < MAX_MOVE_SIZE; ii++){
		// while NO buttons are pressed
		while(btnHolder==UNPRESSED){
    1ed8:	c1 30       	cpi	r28, 0x01	; 1
    1eda:	d1 05       	cpc	r29, r1
    1edc:	d1 f3       	breq	.-12     	; 0x1ed2 <movesInput+0x2e>
			btnHolder = WaitButton();
		}
		LCD_clear();
    1ede:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_clear>
		
		moveCommands[ii] = btnHolder;
    1ee2:	f7 01       	movw	r30, r14
    1ee4:	e9 56       	subi	r30, 0x69	; 105
    1ee6:	fc 4f       	sbci	r31, 0xFC	; 252
    1ee8:	c0 83       	st	Z, r28
		LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,ii);
    1eea:	8d b7       	in	r24, 0x3d	; 61
    1eec:	9e b7       	in	r25, 0x3e	; 62
    1eee:	08 97       	sbiw	r24, 0x08	; 8
    1ef0:	0f b6       	in	r0, 0x3f	; 63
    1ef2:	f8 94       	cli
    1ef4:	9e bf       	out	0x3e, r25	; 62
    1ef6:	0f be       	out	0x3f, r0	; 63
    1ef8:	8d bf       	out	0x3d, r24	; 61
    1efa:	ed b7       	in	r30, 0x3d	; 61
    1efc:	fe b7       	in	r31, 0x3e	; 62
    1efe:	31 96       	adiw	r30, 0x01	; 1
    1f00:	ad b7       	in	r26, 0x3d	; 61
    1f02:	be b7       	in	r27, 0x3e	; 62
    1f04:	12 96       	adiw	r26, 0x02	; 2
    1f06:	bc 92       	st	X, r11
    1f08:	ae 92       	st	-X, r10
    1f0a:	11 97       	sbiw	r26, 0x01	; 1
    1f0c:	d3 82       	std	Z+3, r13	; 0x03
    1f0e:	c2 82       	std	Z+2, r12	; 0x02
    1f10:	d5 83       	std	Z+5, r29	; 0x05
    1f12:	c4 83       	std	Z+4, r28	; 0x04
    1f14:	f7 82       	std	Z+7, r15	; 0x07
    1f16:	e6 82       	std	Z+6, r14	; 0x06
    1f18:	0e 94 5d 2d 	call	0x5aba	; 0x5aba <printf>
    1f1c:	8d b7       	in	r24, 0x3d	; 61
    1f1e:	9e b7       	in	r25, 0x3e	; 62
    1f20:	08 96       	adiw	r24, 0x08	; 8
    1f22:	0f b6       	in	r0, 0x3f	; 63
    1f24:	f8 94       	cli
    1f26:	9e bf       	out	0x3e, r25	; 62
    1f28:	0f be       	out	0x3f, r0	; 63
    1f2a:	8d bf       	out	0x3d, r24	; 61
		btnHolderOld = btnHolder;		
		
		while(btnHolder==btnHolderOld){
			btnHolder = WaitButton();
    1f2c:	0e 94 a5 05 	call	0xb4a	; 0xb4a <WaitButton>
    1f30:	8c 01       	movw	r16, r24
		
		moveCommands[ii] = btnHolder;
		LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,ii);
		btnHolderOld = btnHolder;		
		
		while(btnHolder==btnHolderOld){
    1f32:	8c 17       	cp	r24, r28
    1f34:	9d 07       	cpc	r25, r29
    1f36:	d1 f3       	breq	.-12     	; 0x1f2c <movesInput+0x88>
			btnHolder = WaitButton();
		}
		TMRSRVC_delay(100);	//wait 0.5 seconds
    1f38:	84 e6       	ldi	r24, 0x64	; 100
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TMRSRVC_delay>
	
	char recentButtonState = UNPRESSED;
	
	LCD_clear();
	
	for (ii; ii < MAX_MOVE_SIZE; ii++){
    1f40:	08 94       	sec
    1f42:	e1 1c       	adc	r14, r1
    1f44:	f1 1c       	adc	r15, r1
    1f46:	6e 01       	movw	r12, r28
    1f48:	99 e0       	ldi	r25, 0x09	; 9
    1f4a:	e9 16       	cp	r14, r25
    1f4c:	f1 04       	cpc	r15, r1
    1f4e:	11 f0       	breq	.+4      	; 0x1f54 <movesInput+0xb0>
    1f50:	e8 01       	movw	r28, r16
    1f52:	c2 cf       	rjmp	.-124    	; 0x1ed8 <movesInput+0x34>
		while(btnHolder==btnHolderOld){
			btnHolder = WaitButton();
		}
		TMRSRVC_delay(100);	//wait 0.5 seconds
	}
}
    1f54:	df 91       	pop	r29
    1f56:	cf 91       	pop	r28
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	df 90       	pop	r13
    1f62:	cf 90       	pop	r12
    1f64:	bf 90       	pop	r11
    1f66:	af 90       	pop	r10
    1f68:	08 95       	ret

00001f6a <CBOT_main>:
void CBOT_main( void )
{
	// Initialize variables
	int btnValue=0;//value of button pushed

	ATopstat = ATTINY_open();//open the tiny microcontroller
    1f6a:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <ATTINY_open>
    1f6e:	90 93 a6 02 	sts	0x02A6, r25
    1f72:	80 93 a5 02 	sts	0x02A5, r24
	LEopstat = LED_open(); //open the LED module
    1f76:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LED_open>
    1f7a:	90 93 a4 02 	sts	0x02A4, r25
    1f7e:	80 93 a3 02 	sts	0x02A3, r24
	LCopstat = LCD_open(); //open the LCD module
    1f82:	0e 94 8a 10 	call	0x2114	; 0x2114 <LCD_open>
    1f86:	90 93 a2 02 	sts	0x02A2, r25
    1f8a:	80 93 a1 02 	sts	0x02A1, r24
	STEPPER_open(); // Open STEPPER module for use
    1f8e:	0e 94 f5 13 	call	0x27ea	; 0x27ea <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in beep mode
    1f92:	81 e0       	ldi	r24, 0x01	; 1
    1f94:	0e 94 79 12 	call	0x24f2	; 0x24f2 <SPKR_open>
	
	LED_open();
    1f98:	0e 94 73 11 	call	0x22e6	; 0x22e6 <LED_open>
	I2C_open();
    1f9c:	0e 94 13 18 	call	0x3026	; 0x3026 <I2C_open>
	ADC_open();//open the ADC module
    1fa0:	0e 94 f7 0f 	call	0x1fee	; 0x1fee <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	0e 94 59 10 	call	0x20b2	; 0x20b2 <ADC_set_VREF>

	// Initialize IR Values and Reset Prefilter
	checkIR();
    1faa:	0e 94 ac 08 	call	0x1158	; 0x1158 <checkIR>
	prefilter(1);
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	
	LCD_printf("ENTER move commands\n\n\n\n");
    1fb4:	8f e8       	ldi	r24, 0x8F	; 143
    1fb6:	91 e0       	ldi	r25, 0x01	; 1
    1fb8:	0e 94 6f 2d 	call	0x5ade	; 0x5ade <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1fbc:	88 ee       	ldi	r24, 0xE8	; 232
    1fbe:	93 e0       	ldi	r25, 0x03	; 3
    1fc0:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TMRSRVC_delay>
	LCD_clear();
    1fc4:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_clear>
	TMRSRVC_delay(1000);//wait 1 seconds
    1fc8:	88 ee       	ldi	r24, 0xE8	; 232
    1fca:	93 e0       	ldi	r25, 0x03	; 3
    1fcc:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TMRSRVC_delay>
	movesInput();
    1fd0:	0e 94 52 0f 	call	0x1ea4	; 0x1ea4 <movesInput>
	TMRSRVC_delay(3000);//wait 3 seconds
    1fd4:	88 eb       	ldi	r24, 0xB8	; 184
    1fd6:	9b e0       	ldi	r25, 0x0B	; 11
    1fd8:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TMRSRVC_delay>
	LCD_clear();
    1fdc:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_clear>
	// Infinite loop
	while (1)
    {
		// update the sensor values
		// checkLightSensor();
		checkIR();
    1fe0:	0e 94 ac 08 	call	0x1158	; 0x1158 <checkIR>
		checkContactIR();
    1fe4:	0e 94 89 08 	call	0x1112	; 0x1112 <checkContactIR>
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
		
		// run the moveBehavior FSM
		// moveBehavior(1);
		moveWorld();
    1fe8:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <moveWorld>
    1fec:	f9 cf       	rjmp	.-14     	; 0x1fe0 <CBOT_main+0x76>

00001fee <ADC_open>:
    1fee:	8f e0       	ldi	r24, 0x0F	; 15
    1ff0:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    1ff4:	88 23       	and	r24, r24
    1ff6:	31 f4       	brne	.+12     	; 0x2004 <ADC_open+0x16>
    1ff8:	0e 94 3a 18 	call	0x3074	; 0x3074 <__ADC_init>
    1ffc:	8f e0       	ldi	r24, 0x0F	; 15
    1ffe:	61 e0       	ldi	r22, 0x01	; 1
    2000:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    2004:	8f e0       	ldi	r24, 0x0F	; 15
    2006:	91 e0       	ldi	r25, 0x01	; 1
    2008:	08 95       	ret

0000200a <ADC_sample>:
    200a:	8f e0       	ldi	r24, 0x0F	; 15
    200c:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    2010:	81 30       	cpi	r24, 0x01	; 1
    2012:	19 f0       	breq	.+6      	; 0x201a <ADC_sample+0x10>
    2014:	20 e0       	ldi	r18, 0x00	; 0
    2016:	30 e0       	ldi	r19, 0x00	; 0
    2018:	13 c0       	rjmp	.+38     	; 0x2040 <ADC_sample+0x36>
    201a:	80 91 7a 00 	lds	r24, 0x007A
    201e:	80 64       	ori	r24, 0x40	; 64
    2020:	80 93 7a 00 	sts	0x007A, r24
    2024:	80 91 7a 00 	lds	r24, 0x007A
    2028:	86 fd       	sbrc	r24, 6
    202a:	fc cf       	rjmp	.-8      	; 0x2024 <ADC_sample+0x1a>
    202c:	30 91 78 00 	lds	r19, 0x0078
    2030:	20 91 79 00 	lds	r18, 0x0079
    2034:	92 2f       	mov	r25, r18
    2036:	80 e0       	ldi	r24, 0x00	; 0
    2038:	23 2f       	mov	r18, r19
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	28 2b       	or	r18, r24
    203e:	39 2b       	or	r19, r25
    2040:	c9 01       	movw	r24, r18
    2042:	08 95       	ret

00002044 <ADC_set_channel>:
    2044:	58 2f       	mov	r21, r24
    2046:	80 91 a6 01 	lds	r24, 0x01A6
    204a:	88 30       	cpi	r24, 0x08	; 8
    204c:	d8 f4       	brcc	.+54     	; 0x2084 <ADC_set_channel+0x40>
    204e:	40 91 7e 00 	lds	r20, 0x007E
    2052:	21 e0       	ldi	r18, 0x01	; 1
    2054:	30 e0       	ldi	r19, 0x00	; 0
    2056:	b9 01       	movw	r22, r18
    2058:	02 c0       	rjmp	.+4      	; 0x205e <ADC_set_channel+0x1a>
    205a:	66 0f       	add	r22, r22
    205c:	77 1f       	adc	r23, r23
    205e:	8a 95       	dec	r24
    2060:	e2 f7       	brpl	.-8      	; 0x205a <ADC_set_channel+0x16>
    2062:	cb 01       	movw	r24, r22
    2064:	80 95       	com	r24
    2066:	84 23       	and	r24, r20
    2068:	80 93 7e 00 	sts	0x007E, r24
    206c:	80 91 7e 00 	lds	r24, 0x007E
    2070:	05 2e       	mov	r0, r21
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <ADC_set_channel+0x34>
    2074:	22 0f       	add	r18, r18
    2076:	33 1f       	adc	r19, r19
    2078:	0a 94       	dec	r0
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <ADC_set_channel+0x30>
    207c:	82 2b       	or	r24, r18
    207e:	80 93 7e 00 	sts	0x007E, r24
    2082:	0d c0       	rjmp	.+26     	; 0x209e <ADC_set_channel+0x5a>
    2084:	20 91 7e 00 	lds	r18, 0x007E
    2088:	81 e0       	ldi	r24, 0x01	; 1
    208a:	90 e0       	ldi	r25, 0x00	; 0
    208c:	05 2e       	mov	r0, r21
    208e:	02 c0       	rjmp	.+4      	; 0x2094 <ADC_set_channel+0x50>
    2090:	88 0f       	add	r24, r24
    2092:	99 1f       	adc	r25, r25
    2094:	0a 94       	dec	r0
    2096:	e2 f7       	brpl	.-8      	; 0x2090 <ADC_set_channel+0x4c>
    2098:	28 2b       	or	r18, r24
    209a:	20 93 7e 00 	sts	0x007E, r18
    209e:	50 93 a6 01 	sts	0x01A6, r21
    20a2:	80 91 7c 00 	lds	r24, 0x007C
    20a6:	5f 71       	andi	r21, 0x1F	; 31
    20a8:	80 7e       	andi	r24, 0xE0	; 224
    20aa:	85 2b       	or	r24, r21
    20ac:	80 93 7c 00 	sts	0x007C, r24
    20b0:	08 95       	ret

000020b2 <ADC_set_VREF>:
    20b2:	ec e7       	ldi	r30, 0x7C	; 124
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	90 81       	ld	r25, Z
    20b8:	82 95       	swap	r24
    20ba:	88 0f       	add	r24, r24
    20bc:	88 0f       	add	r24, r24
    20be:	80 7c       	andi	r24, 0xC0	; 192
    20c0:	9f 73       	andi	r25, 0x3F	; 63
    20c2:	98 2b       	or	r25, r24
    20c4:	90 83       	st	Z, r25
    20c6:	08 95       	ret

000020c8 <main>:
    20c8:	0e 94 53 18 	call	0x30a6	; 0x30a6 <CBOT_ISR_init>
    20cc:	0e 94 45 18 	call	0x308a	; 0x308a <CBOT_init>
    20d0:	0e 94 b5 0f 	call	0x1f6a	; 0x1f6a <CBOT_main>
    20d4:	80 e0       	ldi	r24, 0x00	; 0
    20d6:	90 e0       	ldi	r25, 0x00	; 0
    20d8:	08 95       	ret

000020da <LCD_clear>:
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	80 e4       	ldi	r24, 0x40	; 64
    20e0:	60 e0       	ldi	r22, 0x00	; 0
    20e2:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    20e6:	00 e0       	ldi	r16, 0x00	; 0
    20e8:	80 2f       	mov	r24, r16
    20ea:	60 e0       	ldi	r22, 0x00	; 0
    20ec:	0e 94 33 11 	call	0x2266	; 0x2266 <LCD_set_PGC_addr>
    20f0:	10 e0       	ldi	r17, 0x00	; 0
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	61 e0       	ldi	r22, 0x01	; 1
    20f6:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    20fa:	1f 5f       	subi	r17, 0xFF	; 255
    20fc:	10 38       	cpi	r17, 0x80	; 128
    20fe:	c9 f7       	brne	.-14     	; 0x20f2 <LCD_clear+0x18>
    2100:	0f 5f       	subi	r16, 0xFF	; 255
    2102:	04 30       	cpi	r16, 0x04	; 4
    2104:	89 f7       	brne	.-30     	; 0x20e8 <LCD_clear+0xe>
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	60 e0       	ldi	r22, 0x00	; 0
    210a:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_set_next_PGC>
    210e:	1f 91       	pop	r17
    2110:	0f 91       	pop	r16
    2112:	08 95       	ret

00002114 <LCD_open>:
    2114:	0f 93       	push	r16
    2116:	1f 93       	push	r17
    2118:	82 e0       	ldi	r24, 0x02	; 2
    211a:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    211e:	88 23       	and	r24, r24
    2120:	11 f4       	brne	.+4      	; 0x2126 <LCD_open+0x12>
    2122:	82 e0       	ldi	r24, 0x02	; 2
    2124:	06 c0       	rjmp	.+12     	; 0x2132 <LCD_open+0x1e>
    2126:	81 e0       	ldi	r24, 0x01	; 1
    2128:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    212c:	88 23       	and	r24, r24
    212e:	19 f4       	brne	.+6      	; 0x2136 <LCD_open+0x22>
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	90 e0       	ldi	r25, 0x00	; 0
    2134:	6d c0       	rjmp	.+218    	; 0x2210 <LCD_open+0xfc>
    2136:	0e 94 bb 1a 	call	0x3576	; 0x3576 <__LCD_init>
    213a:	85 e0       	ldi	r24, 0x05	; 5
    213c:	61 e0       	ldi	r22, 0x01	; 1
    213e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    2142:	8e ea       	ldi	r24, 0xAE	; 174
    2144:	60 e0       	ldi	r22, 0x00	; 0
    2146:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    214a:	82 ea       	ldi	r24, 0xA2	; 162
    214c:	60 e0       	ldi	r22, 0x00	; 0
    214e:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    2152:	80 ea       	ldi	r24, 0xA0	; 160
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    215a:	00 e5       	ldi	r16, 0x50	; 80
    215c:	13 ec       	ldi	r17, 0xC3	; 195
    215e:	c8 01       	movw	r24, r16
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <LCD_open+0x4c>
    2164:	80 ec       	ldi	r24, 0xC0	; 192
    2166:	60 e0       	ldi	r22, 0x00	; 0
    2168:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    216c:	8f e2       	ldi	r24, 0x2F	; 47
    216e:	60 e0       	ldi	r22, 0x00	; 0
    2170:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    2174:	81 e8       	ldi	r24, 0x81	; 129
    2176:	60 e0       	ldi	r22, 0x00	; 0
    2178:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    217c:	86 e1       	ldi	r24, 0x16	; 22
    217e:	60 e0       	ldi	r22, 0x00	; 0
    2180:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    2184:	82 e2       	ldi	r24, 0x22	; 34
    2186:	60 e0       	ldi	r22, 0x00	; 0
    2188:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    218c:	c8 01       	movw	r24, r16
    218e:	01 97       	sbiw	r24, 0x01	; 1
    2190:	f1 f7       	brne	.-4      	; 0x218e <LCD_open+0x7a>
    2192:	8f ea       	ldi	r24, 0xAF	; 175
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    219a:	86 ea       	ldi	r24, 0xA6	; 166
    219c:	60 e0       	ldi	r22, 0x00	; 0
    219e:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    21a2:	85 ea       	ldi	r24, 0xA5	; 165
    21a4:	60 e0       	ldi	r22, 0x00	; 0
    21a6:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    21aa:	80 e0       	ldi	r24, 0x00	; 0
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	28 e8       	ldi	r18, 0x88	; 136
    21b0:	33 e1       	ldi	r19, 0x13	; 19
    21b2:	f9 01       	movw	r30, r18
    21b4:	31 97       	sbiw	r30, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <LCD_open+0xa0>
    21b8:	01 96       	adiw	r24, 0x01	; 1
    21ba:	43 e0       	ldi	r20, 0x03	; 3
    21bc:	88 3e       	cpi	r24, 0xE8	; 232
    21be:	94 07       	cpc	r25, r20
    21c0:	c1 f7       	brne	.-16     	; 0x21b2 <LCD_open+0x9e>
    21c2:	83 eb       	ldi	r24, 0xB3	; 179
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    21ca:	80 e4       	ldi	r24, 0x40	; 64
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    21d2:	83 e0       	ldi	r24, 0x03	; 3
    21d4:	60 e0       	ldi	r22, 0x00	; 0
    21d6:	0e 94 33 11 	call	0x2266	; 0x2266 <LCD_set_PGC_addr>
    21da:	83 e0       	ldi	r24, 0x03	; 3
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	0e 94 2c 11 	call	0x2258	; 0x2258 <LCD_set_next_PGC>
    21e2:	10 92 e0 04 	sts	0x04E0, r1
    21e6:	10 92 e2 04 	sts	0x04E2, r1
    21ea:	10 92 e1 04 	sts	0x04E1, r1
    21ee:	85 eb       	ldi	r24, 0xB5	; 181
    21f0:	91 e0       	ldi	r25, 0x01	; 1
    21f2:	90 93 11 05 	sts	0x0511, r25
    21f6:	80 93 10 05 	sts	0x0510, r24
    21fa:	88 e1       	ldi	r24, 0x18	; 24
    21fc:	0e 94 0b 11 	call	0x2216	; 0x2216 <LCD_set_backlight>
    2200:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_clear>
    2204:	84 ea       	ldi	r24, 0xA4	; 164
    2206:	60 e0       	ldi	r22, 0x00	; 0
    2208:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    220c:	85 e0       	ldi	r24, 0x05	; 5
    220e:	91 e0       	ldi	r25, 0x01	; 1
    2210:	1f 91       	pop	r17
    2212:	0f 91       	pop	r16
    2214:	08 95       	ret

00002216 <LCD_set_backlight>:
    2216:	1f 93       	push	r17
    2218:	18 2f       	mov	r17, r24
    221a:	85 e0       	ldi	r24, 0x05	; 5
    221c:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    2220:	81 30       	cpi	r24, 0x01	; 1
    2222:	c1 f4       	brne	.+48     	; 0x2254 <LCD_set_backlight+0x3e>
    2224:	87 e0       	ldi	r24, 0x07	; 7
    2226:	0e 94 88 11 	call	0x2310	; 0x2310 <SPI_set_slave_addr>
    222a:	82 e0       	ldi	r24, 0x02	; 2
    222c:	6a e0       	ldi	r22, 0x0A	; 10
    222e:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <SPI_transmit>
    2232:	82 e0       	ldi	r24, 0x02	; 2
    2234:	61 eb       	ldi	r22, 0xB1	; 177
    2236:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <SPI_transmit>
    223a:	61 2f       	mov	r22, r17
    223c:	11 32       	cpi	r17, 0x21	; 33
    223e:	08 f0       	brcs	.+2      	; 0x2242 <LCD_set_backlight+0x2c>
    2240:	60 e2       	ldi	r22, 0x20	; 32
    2242:	82 e0       	ldi	r24, 0x02	; 2
    2244:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <SPI_transmit>
    2248:	89 ee       	ldi	r24, 0xE9	; 233
    224a:	8a 95       	dec	r24
    224c:	f1 f7       	brne	.-4      	; 0x224a <LCD_set_backlight+0x34>
    224e:	87 e0       	ldi	r24, 0x07	; 7
    2250:	0e 94 88 11 	call	0x2310	; 0x2310 <SPI_set_slave_addr>
    2254:	1f 91       	pop	r17
    2256:	08 95       	ret

00002258 <LCD_set_next_PGC>:
    2258:	83 70       	andi	r24, 0x03	; 3
    225a:	6f 77       	andi	r22, 0x7F	; 127
    225c:	60 93 de 04 	sts	0x04DE, r22
    2260:	80 93 df 04 	sts	0x04DF, r24
    2264:	08 95       	ret

00002266 <LCD_set_PGC_addr>:
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	06 2f       	mov	r16, r22
    226c:	16 2f       	mov	r17, r22
    226e:	1f 77       	andi	r17, 0x7F	; 127
    2270:	83 70       	andi	r24, 0x03	; 3
    2272:	80 6b       	ori	r24, 0xB0	; 176
    2274:	60 e0       	ldi	r22, 0x00	; 0
    2276:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    227a:	12 95       	swap	r17
    227c:	1f 70       	andi	r17, 0x0F	; 15
    227e:	81 2f       	mov	r24, r17
    2280:	80 61       	ori	r24, 0x10	; 16
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    2288:	80 2f       	mov	r24, r16
    228a:	8f 70       	andi	r24, 0x0F	; 15
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    2292:	1f 91       	pop	r17
    2294:	0f 91       	pop	r16
    2296:	08 95       	ret

00002298 <LCD_write>:
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	08 2f       	mov	r16, r24
    229e:	16 2f       	mov	r17, r22
    22a0:	85 e0       	ldi	r24, 0x05	; 5
    22a2:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    22a6:	81 30       	cpi	r24, 0x01	; 1
    22a8:	79 f4       	brne	.+30     	; 0x22c8 <LCD_write+0x30>
    22aa:	11 23       	and	r17, r17
    22ac:	19 f0       	breq	.+6      	; 0x22b4 <LCD_write+0x1c>
    22ae:	11 30       	cpi	r17, 0x01	; 1
    22b0:	21 f4       	brne	.+8      	; 0x22ba <LCD_write+0x22>
    22b2:	02 c0       	rjmp	.+4      	; 0x22b8 <LCD_write+0x20>
    22b4:	2b 98       	cbi	0x05, 3	; 5
    22b6:	01 c0       	rjmp	.+2      	; 0x22ba <LCD_write+0x22>
    22b8:	2b 9a       	sbi	0x05, 3	; 5
    22ba:	86 e0       	ldi	r24, 0x06	; 6
    22bc:	8a 95       	dec	r24
    22be:	f1 f7       	brne	.-4      	; 0x22bc <LCD_write+0x24>
    22c0:	80 e0       	ldi	r24, 0x00	; 0
    22c2:	60 2f       	mov	r22, r16
    22c4:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <SPI_transmit>
    22c8:	1f 91       	pop	r17
    22ca:	0f 91       	pop	r16
    22cc:	08 95       	ret

000022ce <LED_clr_pattern>:
    22ce:	1f 93       	push	r17
    22d0:	18 2f       	mov	r17, r24
    22d2:	86 e0       	ldi	r24, 0x06	; 6
    22d4:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    22d8:	81 30       	cpi	r24, 0x01	; 1
    22da:	19 f4       	brne	.+6      	; 0x22e2 <LED_clr_pattern+0x14>
    22dc:	81 2f       	mov	r24, r17
    22de:	0e 94 6a 1b 	call	0x36d4	; 0x36d4 <__LED_clr_pattern>
    22e2:	1f 91       	pop	r17
    22e4:	08 95       	ret

000022e6 <LED_open>:
    22e6:	0e 94 6f 1b 	call	0x36de	; 0x36de <__LED_init>
    22ea:	86 e0       	ldi	r24, 0x06	; 6
    22ec:	61 e0       	ldi	r22, 0x01	; 1
    22ee:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    22f2:	86 e0       	ldi	r24, 0x06	; 6
    22f4:	91 e0       	ldi	r25, 0x01	; 1
    22f6:	08 95       	ret

000022f8 <LED_set_pattern>:
    22f8:	1f 93       	push	r17
    22fa:	18 2f       	mov	r17, r24
    22fc:	86 e0       	ldi	r24, 0x06	; 6
    22fe:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    2302:	81 30       	cpi	r24, 0x01	; 1
    2304:	19 f4       	brne	.+6      	; 0x230c <LED_set_pattern+0x14>
    2306:	81 2f       	mov	r24, r17
    2308:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <__LED_set_pattern>
    230c:	1f 91       	pop	r17
    230e:	08 95       	ret

00002310 <SPI_set_slave_addr>:
    2310:	1f 93       	push	r17
    2312:	18 2f       	mov	r17, r24
    2314:	82 e0       	ldi	r24, 0x02	; 2
    2316:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    231a:	81 30       	cpi	r24, 0x01	; 1
    231c:	09 f0       	breq	.+2      	; 0x2320 <SPI_set_slave_addr+0x10>
    231e:	47 c0       	rjmp	.+142    	; 0x23ae <SPI_set_slave_addr+0x9e>
    2320:	91 2f       	mov	r25, r17
    2322:	97 70       	andi	r25, 0x07	; 7
    2324:	80 91 e3 04 	lds	r24, 0x04E3
    2328:	98 17       	cp	r25, r24
    232a:	09 f4       	brne	.+2      	; 0x232e <SPI_set_slave_addr+0x1e>
    232c:	40 c0       	rjmp	.+128    	; 0x23ae <SPI_set_slave_addr+0x9e>
    232e:	90 93 e3 04 	sts	0x04E3, r25
    2332:	85 b1       	in	r24, 0x05	; 5
    2334:	88 7f       	andi	r24, 0xF8	; 248
    2336:	89 2b       	or	r24, r25
    2338:	85 b9       	out	0x05, r24	; 5
    233a:	93 30       	cpi	r25, 0x03	; 3
    233c:	11 f1       	breq	.+68     	; 0x2382 <SPI_set_slave_addr+0x72>
    233e:	94 30       	cpi	r25, 0x04	; 4
    2340:	28 f4       	brcc	.+10     	; 0x234c <SPI_set_slave_addr+0x3c>
    2342:	91 30       	cpi	r25, 0x01	; 1
    2344:	51 f0       	breq	.+20     	; 0x235a <SPI_set_slave_addr+0x4a>
    2346:	92 30       	cpi	r25, 0x02	; 2
    2348:	90 f4       	brcc	.+36     	; 0x236e <SPI_set_slave_addr+0x5e>
    234a:	0c c0       	rjmp	.+24     	; 0x2364 <SPI_set_slave_addr+0x54>
    234c:	95 30       	cpi	r25, 0x05	; 5
    234e:	19 f1       	breq	.+70     	; 0x2396 <SPI_set_slave_addr+0x86>
    2350:	95 30       	cpi	r25, 0x05	; 5
    2352:	e0 f0       	brcs	.+56     	; 0x238c <SPI_set_slave_addr+0x7c>
    2354:	96 30       	cpi	r25, 0x06	; 6
    2356:	21 f5       	brne	.+72     	; 0x23a0 <SPI_set_slave_addr+0x90>
    2358:	0f c0       	rjmp	.+30     	; 0x2378 <SPI_set_slave_addr+0x68>
    235a:	e0 91 7c 02 	lds	r30, 0x027C
    235e:	f0 91 7d 02 	lds	r31, 0x027D
    2362:	22 c0       	rjmp	.+68     	; 0x23a8 <SPI_set_slave_addr+0x98>
    2364:	e0 91 7a 02 	lds	r30, 0x027A
    2368:	f0 91 7b 02 	lds	r31, 0x027B
    236c:	1d c0       	rjmp	.+58     	; 0x23a8 <SPI_set_slave_addr+0x98>
    236e:	e0 91 7e 02 	lds	r30, 0x027E
    2372:	f0 91 7f 02 	lds	r31, 0x027F
    2376:	18 c0       	rjmp	.+48     	; 0x23a8 <SPI_set_slave_addr+0x98>
    2378:	e0 91 86 02 	lds	r30, 0x0286
    237c:	f0 91 87 02 	lds	r31, 0x0287
    2380:	13 c0       	rjmp	.+38     	; 0x23a8 <SPI_set_slave_addr+0x98>
    2382:	e0 91 80 02 	lds	r30, 0x0280
    2386:	f0 91 81 02 	lds	r31, 0x0281
    238a:	0e c0       	rjmp	.+28     	; 0x23a8 <SPI_set_slave_addr+0x98>
    238c:	e0 91 82 02 	lds	r30, 0x0282
    2390:	f0 91 83 02 	lds	r31, 0x0283
    2394:	09 c0       	rjmp	.+18     	; 0x23a8 <SPI_set_slave_addr+0x98>
    2396:	e0 91 84 02 	lds	r30, 0x0284
    239a:	f0 91 85 02 	lds	r31, 0x0285
    239e:	04 c0       	rjmp	.+8      	; 0x23a8 <SPI_set_slave_addr+0x98>
    23a0:	e0 91 88 02 	lds	r30, 0x0288
    23a4:	f0 91 89 02 	lds	r31, 0x0289
    23a8:	30 97       	sbiw	r30, 0x00	; 0
    23aa:	09 f0       	breq	.+2      	; 0x23ae <SPI_set_slave_addr+0x9e>
    23ac:	09 95       	icall
    23ae:	1f 91       	pop	r17
    23b0:	08 95       	ret

000023b2 <SPI_transmit>:
    23b2:	1f 93       	push	r17
    23b4:	16 2f       	mov	r17, r22
    23b6:	0e 94 88 11 	call	0x2310	; 0x2310 <SPI_set_slave_addr>
    23ba:	82 e0       	ldi	r24, 0x02	; 2
    23bc:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    23c0:	81 30       	cpi	r24, 0x01	; 1
    23c2:	21 f4       	brne	.+8      	; 0x23cc <SPI_transmit+0x1a>
    23c4:	1e bd       	out	0x2e, r17	; 46
    23c6:	0d b4       	in	r0, 0x2d	; 45
    23c8:	07 fe       	sbrs	r0, 7
    23ca:	fd cf       	rjmp	.-6      	; 0x23c6 <SPI_transmit+0x14>
    23cc:	1f 91       	pop	r17
    23ce:	08 95       	ret

000023d0 <__SPKR_set_up_freq_LUT>:
    23d0:	0f 93       	push	r16
    23d2:	1f 93       	push	r17
    23d4:	cf 93       	push	r28
    23d6:	df 93       	push	r29
    23d8:	80 e2       	ldi	r24, 0x20	; 32
    23da:	91 e0       	ldi	r25, 0x01	; 1
    23dc:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <malloc>
    23e0:	9c 01       	movw	r18, r24
    23e2:	90 93 99 02 	sts	0x0299, r25
    23e6:	80 93 98 02 	sts	0x0298, r24
    23ea:	89 2b       	or	r24, r25
    23ec:	11 f4       	brne	.+4      	; 0x23f2 <__SPKR_set_up_freq_LUT+0x22>
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	39 c0       	rjmp	.+114    	; 0x2464 <__SPKR_set_up_freq_LUT+0x94>
    23f2:	89 01       	movw	r16, r18
    23f4:	c0 e0       	ldi	r28, 0x00	; 0
    23f6:	d0 e0       	ldi	r29, 0x00	; 0
    23f8:	be 01       	movw	r22, r28
    23fa:	80 e0       	ldi	r24, 0x00	; 0
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	0e 94 26 24 	call	0x484c	; 0x484c <__floatunsisf>
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 ea       	ldi	r20, 0xA0	; 160
    2408:	51 e4       	ldi	r21, 0x41	; 65
    240a:	0e 94 8d 23 	call	0x471a	; 0x471a <__divsf3>
    240e:	27 ef       	ldi	r18, 0xF7	; 247
    2410:	35 e7       	ldi	r19, 0x75	; 117
    2412:	40 e0       	ldi	r20, 0x00	; 0
    2414:	5f e3       	ldi	r21, 0x3F	; 63
    2416:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
    241a:	9b 01       	movw	r18, r22
    241c:	ac 01       	movw	r20, r24
    241e:	60 e0       	ldi	r22, 0x00	; 0
    2420:	70 e0       	ldi	r23, 0x00	; 0
    2422:	80 e2       	ldi	r24, 0x20	; 32
    2424:	91 e4       	ldi	r25, 0x41	; 65
    2426:	0e 94 79 25 	call	0x4af2	; 0x4af2 <pow>
    242a:	9b 01       	movw	r18, r22
    242c:	ac 01       	movw	r20, r24
    242e:	ca 01       	movw	r24, r20
    2430:	b9 01       	movw	r22, r18
    2432:	2d ec       	ldi	r18, 0xCD	; 205
    2434:	3c ec       	ldi	r19, 0xCC	; 204
    2436:	42 e8       	ldi	r20, 0x82	; 130
    2438:	51 e4       	ldi	r21, 0x41	; 65
    243a:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__mulsf3>
    243e:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <lrint>
    2442:	2a e0       	ldi	r18, 0x0A	; 10
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	0e 94 46 2a 	call	0x548c	; 0x548c <__mulsi3>
    244e:	f8 01       	movw	r30, r16
    2450:	61 93       	st	Z+, r22
    2452:	71 93       	st	Z+, r23
    2454:	81 93       	st	Z+, r24
    2456:	91 93       	st	Z+, r25
    2458:	8f 01       	movw	r16, r30
    245a:	21 96       	adiw	r28, 0x01	; 1
    245c:	c8 34       	cpi	r28, 0x48	; 72
    245e:	d1 05       	cpc	r29, r1
    2460:	59 f6       	brne	.-106    	; 0x23f8 <__SPKR_set_up_freq_LUT+0x28>
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	08 95       	ret

0000246e <__SPKR_open_beep_mode>:
    246e:	8a e0       	ldi	r24, 0x0A	; 10
    2470:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    2474:	88 23       	and	r24, r24
    2476:	71 f4       	brne	.+28     	; 0x2494 <__SPKR_open_beep_mode+0x26>
    2478:	10 92 95 02 	sts	0x0295, r1
    247c:	10 92 94 02 	sts	0x0294, r1
    2480:	81 e0       	ldi	r24, 0x01	; 1
    2482:	0e 94 ad 1c 	call	0x395a	; 0x395a <__SPKR_init>
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	80 93 8b 02 	sts	0x028B, r24
    248c:	8a e0       	ldi	r24, 0x0A	; 10
    248e:	61 e0       	ldi	r22, 0x01	; 1
    2490:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    2494:	8a e0       	ldi	r24, 0x0A	; 10
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	08 95       	ret

0000249a <__SPKR_open_tone_mode>:
    249a:	1f 93       	push	r17
    249c:	8b e0       	ldi	r24, 0x0B	; 11
    249e:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    24a2:	88 23       	and	r24, r24
    24a4:	11 f0       	breq	.+4      	; 0x24aa <__SPKR_open_tone_mode+0x10>
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	21 c0       	rjmp	.+66     	; 0x24ec <__SPKR_open_tone_mode+0x52>
    24aa:	89 e0       	ldi	r24, 0x09	; 9
    24ac:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    24b0:	88 23       	and	r24, r24
    24b2:	d9 f4       	brne	.+54     	; 0x24ea <__SPKR_open_tone_mode+0x50>
    24b4:	0e 94 e8 11 	call	0x23d0	; 0x23d0 <__SPKR_set_up_freq_LUT>
    24b8:	18 2f       	mov	r17, r24
    24ba:	81 30       	cpi	r24, 0x01	; 1
    24bc:	b1 f4       	brne	.+44     	; 0x24ea <__SPKR_open_tone_mode+0x50>
    24be:	10 92 8c 02 	sts	0x028C, r1
    24c2:	10 92 8d 02 	sts	0x028D, r1
    24c6:	10 92 8e 02 	sts	0x028E, r1
    24ca:	10 92 8f 02 	sts	0x028F, r1
    24ce:	8d e0       	ldi	r24, 0x0D	; 13
    24d0:	60 e3       	ldi	r22, 0x30	; 48
    24d2:	7c e1       	ldi	r23, 0x1C	; 28
    24d4:	0e 94 93 1a 	call	0x3526	; 0x3526 <ISR_attach>
    24d8:	82 e0       	ldi	r24, 0x02	; 2
    24da:	0e 94 ad 1c 	call	0x395a	; 0x395a <__SPKR_init>
    24de:	10 93 8a 02 	sts	0x028A, r17
    24e2:	89 e0       	ldi	r24, 0x09	; 9
    24e4:	61 e0       	ldi	r22, 0x01	; 1
    24e6:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    24ea:	91 e0       	ldi	r25, 0x01	; 1
    24ec:	89 e0       	ldi	r24, 0x09	; 9
    24ee:	1f 91       	pop	r17
    24f0:	08 95       	ret

000024f2 <SPKR_open>:
    24f2:	81 30       	cpi	r24, 0x01	; 1
    24f4:	29 f0       	breq	.+10     	; 0x2500 <SPKR_open+0xe>
    24f6:	82 30       	cpi	r24, 0x02	; 2
    24f8:	31 f0       	breq	.+12     	; 0x2506 <SPKR_open+0x14>
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	89 e0       	ldi	r24, 0x09	; 9
    24fe:	08 95       	ret
    2500:	0e 94 37 12 	call	0x246e	; 0x246e <__SPKR_open_beep_mode>
    2504:	08 95       	ret
    2506:	0e 94 4d 12 	call	0x249a	; 0x249a <__SPKR_open_tone_mode>
    250a:	08 95       	ret

0000250c <STEPPER_get_nSteps>:
    250c:	80 91 a4 04 	lds	r24, 0x04A4
    2510:	90 91 a5 04 	lds	r25, 0x04A5
    2514:	20 91 a6 04 	lds	r18, 0x04A6
    2518:	30 91 a7 04 	lds	r19, 0x04A7
    251c:	bc 01       	movw	r22, r24
    251e:	c9 01       	movw	r24, r18
    2520:	08 95       	ret

00002522 <STEPPER_stepmode>:
    2522:	2f 92       	push	r2
    2524:	3f 92       	push	r3
    2526:	4f 92       	push	r4
    2528:	5f 92       	push	r5
    252a:	6f 92       	push	r6
    252c:	7f 92       	push	r7
    252e:	8f 92       	push	r8
    2530:	9f 92       	push	r9
    2532:	af 92       	push	r10
    2534:	bf 92       	push	r11
    2536:	cf 92       	push	r12
    2538:	df 92       	push	r13
    253a:	ef 92       	push	r14
    253c:	ff 92       	push	r15
    253e:	0f 93       	push	r16
    2540:	1f 93       	push	r17
    2542:	df 93       	push	r29
    2544:	cf 93       	push	r28
    2546:	cd b7       	in	r28, 0x3d	; 61
    2548:	de b7       	in	r29, 0x3e	; 62
    254a:	58 2e       	mov	r5, r24
    254c:	96 2e       	mov	r9, r22
    254e:	44 2e       	mov	r4, r20
    2550:	39 01       	movw	r6, r18
    2552:	3c 2c       	mov	r3, r12
    2554:	c9 8c       	ldd	r12, Y+25	; 0x19
    2556:	da 8c       	ldd	r13, Y+26	; 0x1a
    2558:	2b 8c       	ldd	r2, Y+27	; 0x1b
    255a:	81 e0       	ldi	r24, 0x01	; 1
    255c:	68 17       	cp	r22, r24
    255e:	39 f1       	breq	.+78     	; 0x25ae <STEPPER_stepmode+0x8c>
    2560:	68 17       	cp	r22, r24
    2562:	28 f0       	brcs	.+10     	; 0x256e <STEPPER_stepmode+0x4c>
    2564:	92 e0       	ldi	r25, 0x02	; 2
    2566:	69 17       	cp	r22, r25
    2568:	09 f0       	breq	.+2      	; 0x256c <STEPPER_stepmode+0x4a>
    256a:	85 c0       	rjmp	.+266    	; 0x2676 <STEPPER_stepmode+0x154>
    256c:	49 c0       	rjmp	.+146    	; 0x2600 <STEPPER_stepmode+0xde>
    256e:	80 e0       	ldi	r24, 0x00	; 0
    2570:	61 e0       	ldi	r22, 0x01	; 1
    2572:	0e 94 9a 14 	call	0x2934	; 0x2934 <STEPPER_set_mode>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	b7 01       	movw	r22, r14
    257a:	0e 94 63 14 	call	0x28c6	; 0x28c6 <STEPPER_set_accel>
    257e:	80 e0       	ldi	r24, 0x00	; 0
    2580:	64 2d       	mov	r22, r4
    2582:	a3 01       	movw	r20, r6
    2584:	98 01       	movw	r18, r16
    2586:	03 2d       	mov	r16, r3
    2588:	ee 24       	eor	r14, r14
    258a:	e3 94       	inc	r14
    258c:	e9 ec       	ldi	r30, 0xC9	; 201
    258e:	ce 2e       	mov	r12, r30
    2590:	e4 e0       	ldi	r30, 0x04	; 4
    2592:	de 2e       	mov	r13, r30
    2594:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <STEPPER_step>
    2598:	55 20       	and	r5, r5
    259a:	09 f0       	breq	.+2      	; 0x259e <STEPPER_stepmode+0x7c>
    259c:	6c c0       	rjmp	.+216    	; 0x2676 <STEPPER_stepmode+0x154>
    259e:	00 d0       	rcall	.+0      	; 0x25a0 <STEPPER_stepmode+0x7e>
    25a0:	0f 92       	push	r0
    25a2:	ed b7       	in	r30, 0x3d	; 61
    25a4:	fe b7       	in	r31, 0x3e	; 62
    25a6:	11 82       	std	Z+1, r1	; 0x01
    25a8:	b3 82       	std	Z+3, r11	; 0x03
    25aa:	a2 82       	std	Z+2, r10	; 0x02
    25ac:	23 c0       	rjmp	.+70     	; 0x25f4 <STEPPER_stepmode+0xd2>
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	61 e0       	ldi	r22, 0x01	; 1
    25b2:	0e 94 9a 14 	call	0x2934	; 0x2934 <STEPPER_set_mode>
    25b6:	81 e0       	ldi	r24, 0x01	; 1
    25b8:	b6 01       	movw	r22, r12
    25ba:	0e 94 63 14 	call	0x28c6	; 0x28c6 <STEPPER_set_accel>
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	68 2d       	mov	r22, r8
    25c2:	4d 89       	ldd	r20, Y+21	; 0x15
    25c4:	5e 89       	ldd	r21, Y+22	; 0x16
    25c6:	2f 89       	ldd	r18, Y+23	; 0x17
    25c8:	38 8d       	ldd	r19, Y+24	; 0x18
    25ca:	02 2d       	mov	r16, r2
    25cc:	ee 24       	eor	r14, r14
    25ce:	e3 94       	inc	r14
    25d0:	79 ec       	ldi	r23, 0xC9	; 201
    25d2:	c7 2e       	mov	r12, r23
    25d4:	74 e0       	ldi	r23, 0x04	; 4
    25d6:	d7 2e       	mov	r13, r23
    25d8:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <STEPPER_step>
    25dc:	55 20       	and	r5, r5
    25de:	09 f0       	breq	.+2      	; 0x25e2 <STEPPER_stepmode+0xc0>
    25e0:	4a c0       	rjmp	.+148    	; 0x2676 <STEPPER_stepmode+0x154>
    25e2:	00 d0       	rcall	.+0      	; 0x25e4 <STEPPER_stepmode+0xc2>
    25e4:	0f 92       	push	r0
    25e6:	ed b7       	in	r30, 0x3d	; 61
    25e8:	fe b7       	in	r31, 0x3e	; 62
    25ea:	91 82       	std	Z+1, r9	; 0x01
    25ec:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25ee:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25f0:	93 83       	std	Z+3, r25	; 0x03
    25f2:	82 83       	std	Z+2, r24	; 0x02
    25f4:	0e 94 5d 15 	call	0x2aba	; 0x2aba <STEPPER_wait_and_then>
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	0f 90       	pop	r0
    25fe:	3b c0       	rjmp	.+118    	; 0x2676 <STEPPER_stepmode+0x154>
    2600:	82 e0       	ldi	r24, 0x02	; 2
    2602:	61 e0       	ldi	r22, 0x01	; 1
    2604:	0e 94 9a 14 	call	0x2934	; 0x2934 <STEPPER_set_mode>
    2608:	80 e0       	ldi	r24, 0x00	; 0
    260a:	b7 01       	movw	r22, r14
    260c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <STEPPER_set_accel>
    2610:	81 e0       	ldi	r24, 0x01	; 1
    2612:	b6 01       	movw	r22, r12
    2614:	0e 94 63 14 	call	0x28c6	; 0x28c6 <STEPPER_set_accel>
    2618:	80 e0       	ldi	r24, 0x00	; 0
    261a:	64 2d       	mov	r22, r4
    261c:	a3 01       	movw	r20, r6
    261e:	98 01       	movw	r18, r16
    2620:	03 2d       	mov	r16, r3
    2622:	ee 24       	eor	r14, r14
    2624:	e3 94       	inc	r14
    2626:	99 ec       	ldi	r25, 0xC9	; 201
    2628:	c9 2e       	mov	r12, r25
    262a:	94 e0       	ldi	r25, 0x04	; 4
    262c:	d9 2e       	mov	r13, r25
    262e:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <STEPPER_step>
    2632:	81 e0       	ldi	r24, 0x01	; 1
    2634:	68 2d       	mov	r22, r8
    2636:	4d 89       	ldd	r20, Y+21	; 0x15
    2638:	5e 89       	ldd	r21, Y+22	; 0x16
    263a:	2f 89       	ldd	r18, Y+23	; 0x17
    263c:	38 8d       	ldd	r19, Y+24	; 0x18
    263e:	02 2d       	mov	r16, r2
    2640:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <STEPPER_step>
    2644:	55 20       	and	r5, r5
    2646:	b9 f4       	brne	.+46     	; 0x2676 <STEPPER_stepmode+0x154>
    2648:	00 d0       	rcall	.+0      	; 0x264a <STEPPER_stepmode+0x128>
    264a:	00 d0       	rcall	.+0      	; 0x264c <STEPPER_stepmode+0x12a>
    264c:	0f 92       	push	r0
    264e:	ad b7       	in	r26, 0x3d	; 61
    2650:	be b7       	in	r27, 0x3e	; 62
    2652:	11 96       	adiw	r26, 0x01	; 1
    2654:	ed b7       	in	r30, 0x3d	; 61
    2656:	fe b7       	in	r31, 0x3e	; 62
    2658:	91 82       	std	Z+1, r9	; 0x01
    265a:	fd 01       	movw	r30, r26
    265c:	b2 82       	std	Z+2, r11	; 0x02
    265e:	a1 82       	std	Z+1, r10	; 0x01
    2660:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2662:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2664:	94 83       	std	Z+4, r25	; 0x04
    2666:	83 83       	std	Z+3, r24	; 0x03
    2668:	0e 94 5d 15 	call	0x2aba	; 0x2aba <STEPPER_wait_and_then>
    266c:	0f 90       	pop	r0
    266e:	0f 90       	pop	r0
    2670:	0f 90       	pop	r0
    2672:	0f 90       	pop	r0
    2674:	0f 90       	pop	r0
    2676:	cf 91       	pop	r28
    2678:	df 91       	pop	r29
    267a:	1f 91       	pop	r17
    267c:	0f 91       	pop	r16
    267e:	ff 90       	pop	r15
    2680:	ef 90       	pop	r14
    2682:	df 90       	pop	r13
    2684:	cf 90       	pop	r12
    2686:	bf 90       	pop	r11
    2688:	af 90       	pop	r10
    268a:	9f 90       	pop	r9
    268c:	8f 90       	pop	r8
    268e:	7f 90       	pop	r7
    2690:	6f 90       	pop	r6
    2692:	5f 90       	pop	r5
    2694:	4f 90       	pop	r4
    2696:	3f 90       	pop	r3
    2698:	2f 90       	pop	r2
    269a:	08 95       	ret

0000269c <STEPPER_move>:
    269c:	6f 92       	push	r6
    269e:	7f 92       	push	r7
    26a0:	8f 92       	push	r8
    26a2:	9f 92       	push	r9
    26a4:	af 92       	push	r10
    26a6:	bf 92       	push	r11
    26a8:	cf 92       	push	r12
    26aa:	df 92       	push	r13
    26ac:	ef 92       	push	r14
    26ae:	ff 92       	push	r15
    26b0:	0f 93       	push	r16
    26b2:	1f 93       	push	r17
    26b4:	df 93       	push	r29
    26b6:	cf 93       	push	r28
    26b8:	cd b7       	in	r28, 0x3d	; 61
    26ba:	de b7       	in	r29, 0x3e	; 62
    26bc:	94 2e       	mov	r9, r20
    26be:	7c 2d       	mov	r23, r12
    26c0:	d5 01       	movw	r26, r10
    26c2:	49 89       	ldd	r20, Y+17	; 0x11
    26c4:	5a 89       	ldd	r21, Y+18	; 0x12
    26c6:	ab 88       	ldd	r10, Y+19	; 0x13
    26c8:	bc 88       	ldd	r11, Y+20	; 0x14
    26ca:	cd 88       	ldd	r12, Y+21	; 0x15
    26cc:	de 88       	ldd	r13, Y+22	; 0x16
    26ce:	9f 89       	ldd	r25, Y+23	; 0x17
    26d0:	81 30       	cpi	r24, 0x01	; 1
    26d2:	09 f4       	brne	.+2      	; 0x26d6 <STEPPER_move+0x3a>
    26d4:	57 c0       	rjmp	.+174    	; 0x2784 <STEPPER_move+0xe8>
    26d6:	81 30       	cpi	r24, 0x01	; 1
    26d8:	b8 f1       	brcs	.+110    	; 0x2748 <STEPPER_move+0xac>
    26da:	82 30       	cpi	r24, 0x02	; 2
    26dc:	09 f0       	breq	.+2      	; 0x26e0 <STEPPER_move+0x44>
    26de:	76 c0       	rjmp	.+236    	; 0x27cc <STEPPER_move+0x130>
    26e0:	61 30       	cpi	r22, 0x01	; 1
    26e2:	91 f0       	breq	.+36     	; 0x2708 <STEPPER_move+0x6c>
    26e4:	61 30       	cpi	r22, 0x01	; 1
    26e6:	20 f0       	brcs	.+8      	; 0x26f0 <STEPPER_move+0x54>
    26e8:	62 30       	cpi	r22, 0x02	; 2
    26ea:	09 f0       	breq	.+2      	; 0x26ee <STEPPER_move+0x52>
    26ec:	6f c0       	rjmp	.+222    	; 0x27cc <STEPPER_move+0x130>
    26ee:	15 c0       	rjmp	.+42     	; 0x271a <STEPPER_move+0x7e>
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	60 e0       	ldi	r22, 0x00	; 0
    26f4:	0e 94 9a 14 	call	0x2934	; 0x2934 <STEPPER_set_mode>
    26f8:	80 e0       	ldi	r24, 0x00	; 0
    26fa:	b7 01       	movw	r22, r14
    26fc:	0e 94 63 14 	call	0x28c6	; 0x28c6 <STEPPER_set_accel>
    2700:	80 e0       	ldi	r24, 0x00	; 0
    2702:	69 2d       	mov	r22, r9
    2704:	a8 01       	movw	r20, r16
    2706:	1d c0       	rjmp	.+58     	; 0x2742 <STEPPER_move+0xa6>
    2708:	81 e0       	ldi	r24, 0x01	; 1
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	0e 94 9a 14 	call	0x2934	; 0x2934 <STEPPER_set_mode>
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	b6 01       	movw	r22, r12
    2714:	0e 94 63 14 	call	0x28c6	; 0x28c6 <STEPPER_set_accel>
    2718:	11 c0       	rjmp	.+34     	; 0x273c <STEPPER_move+0xa0>
    271a:	82 e0       	ldi	r24, 0x02	; 2
    271c:	60 e0       	ldi	r22, 0x00	; 0
    271e:	0e 94 9a 14 	call	0x2934	; 0x2934 <STEPPER_set_mode>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	b7 01       	movw	r22, r14
    2726:	0e 94 63 14 	call	0x28c6	; 0x28c6 <STEPPER_set_accel>
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	b6 01       	movw	r22, r12
    272e:	0e 94 63 14 	call	0x28c6	; 0x28c6 <STEPPER_set_accel>
    2732:	80 e0       	ldi	r24, 0x00	; 0
    2734:	69 2d       	mov	r22, r9
    2736:	a8 01       	movw	r20, r16
    2738:	0e 94 4c 14 	call	0x2898	; 0x2898 <STEPPER_run>
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	68 2d       	mov	r22, r8
    2740:	a5 01       	movw	r20, r10
    2742:	0e 94 4c 14 	call	0x2898	; 0x2898 <STEPPER_run>
    2746:	42 c0       	rjmp	.+132    	; 0x27cc <STEPPER_move+0x130>
    2748:	ed b7       	in	r30, 0x3d	; 61
    274a:	fe b7       	in	r31, 0x3e	; 62
    274c:	39 97       	sbiw	r30, 0x09	; 9
    274e:	0f b6       	in	r0, 0x3f	; 63
    2750:	f8 94       	cli
    2752:	fe bf       	out	0x3e, r31	; 62
    2754:	0f be       	out	0x3f, r0	; 63
    2756:	ed bf       	out	0x3d, r30	; 61
    2758:	6d b6       	in	r6, 0x3d	; 61
    275a:	7e b6       	in	r7, 0x3e	; 62
    275c:	08 94       	sec
    275e:	61 1c       	adc	r6, r1
    2760:	71 1c       	adc	r7, r1
    2762:	52 83       	std	Z+2, r21	; 0x02
    2764:	41 83       	std	Z+1, r20	; 0x01
    2766:	f3 01       	movw	r30, r6
    2768:	b3 82       	std	Z+3, r11	; 0x03
    276a:	a2 82       	std	Z+2, r10	; 0x02
    276c:	d5 82       	std	Z+5, r13	; 0x05
    276e:	c4 82       	std	Z+4, r12	; 0x04
    2770:	96 83       	std	Z+6, r25	; 0x06
    2772:	88 8d       	ldd	r24, Y+24	; 0x18
    2774:	99 8d       	ldd	r25, Y+25	; 0x19
    2776:	90 87       	std	Z+8, r25	; 0x08
    2778:	87 83       	std	Z+7, r24	; 0x07
    277a:	80 e0       	ldi	r24, 0x00	; 0
    277c:	49 2d       	mov	r20, r9
    277e:	c7 2e       	mov	r12, r23
    2780:	5d 01       	movw	r10, r26
    2782:	1a c0       	rjmp	.+52     	; 0x27b8 <STEPPER_move+0x11c>
    2784:	ed b7       	in	r30, 0x3d	; 61
    2786:	fe b7       	in	r31, 0x3e	; 62
    2788:	39 97       	sbiw	r30, 0x09	; 9
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	fe bf       	out	0x3e, r31	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	ed bf       	out	0x3d, r30	; 61
    2794:	ad b7       	in	r26, 0x3d	; 61
    2796:	be b7       	in	r27, 0x3e	; 62
    2798:	11 96       	adiw	r26, 0x01	; 1
    279a:	52 83       	std	Z+2, r21	; 0x02
    279c:	41 83       	std	Z+1, r20	; 0x01
    279e:	fd 01       	movw	r30, r26
    27a0:	b3 82       	std	Z+3, r11	; 0x03
    27a2:	a2 82       	std	Z+2, r10	; 0x02
    27a4:	d5 82       	std	Z+5, r13	; 0x05
    27a6:	c4 82       	std	Z+4, r12	; 0x04
    27a8:	96 83       	std	Z+6, r25	; 0x06
    27aa:	10 86       	std	Z+8, r1	; 0x08
    27ac:	17 82       	std	Z+7, r1	; 0x07
    27ae:	81 e0       	ldi	r24, 0x01	; 1
    27b0:	49 2d       	mov	r20, r9
    27b2:	c7 2e       	mov	r12, r23
    27b4:	aa 24       	eor	r10, r10
    27b6:	bb 24       	eor	r11, r11
    27b8:	0e 94 91 12 	call	0x2522	; 0x2522 <STEPPER_stepmode>
    27bc:	8d b7       	in	r24, 0x3d	; 61
    27be:	9e b7       	in	r25, 0x3e	; 62
    27c0:	09 96       	adiw	r24, 0x09	; 9
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	9e bf       	out	0x3e, r25	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	8d bf       	out	0x3d, r24	; 61
    27cc:	cf 91       	pop	r28
    27ce:	df 91       	pop	r29
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	ff 90       	pop	r15
    27d6:	ef 90       	pop	r14
    27d8:	df 90       	pop	r13
    27da:	cf 90       	pop	r12
    27dc:	bf 90       	pop	r11
    27de:	af 90       	pop	r10
    27e0:	9f 90       	pop	r9
    27e2:	8f 90       	pop	r8
    27e4:	7f 90       	pop	r7
    27e6:	6f 90       	pop	r6
    27e8:	08 95       	ret

000027ea <STEPPER_open>:
    27ea:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <__STEPPER_init>
    27ee:	81 e0       	ldi	r24, 0x01	; 1
    27f0:	80 93 c8 04 	sts	0x04C8, r24
    27f4:	e2 e9       	ldi	r30, 0x92	; 146
    27f6:	f4 e0       	ldi	r31, 0x04	; 4
    27f8:	11 92       	st	Z+, r1
    27fa:	11 92       	st	Z+, r1
    27fc:	11 82       	std	Z+1, r1	; 0x01
    27fe:	10 82       	st	Z, r1
    2800:	32 96       	adiw	r30, 0x02	; 2
    2802:	11 82       	std	Z+1, r1	; 0x01
    2804:	10 82       	st	Z, r1
    2806:	32 96       	adiw	r30, 0x02	; 2
    2808:	11 82       	std	Z+1, r1	; 0x01
    280a:	10 82       	st	Z, r1
    280c:	32 96       	adiw	r30, 0x02	; 2
    280e:	11 82       	std	Z+1, r1	; 0x01
    2810:	10 82       	st	Z, r1
    2812:	32 96       	adiw	r30, 0x02	; 2
    2814:	11 82       	std	Z+1, r1	; 0x01
    2816:	10 82       	st	Z, r1
    2818:	32 96       	adiw	r30, 0x02	; 2
    281a:	11 82       	std	Z+1, r1	; 0x01
    281c:	10 82       	st	Z, r1
    281e:	32 96       	adiw	r30, 0x02	; 2
    2820:	11 82       	std	Z+1, r1	; 0x01
    2822:	10 82       	st	Z, r1
    2824:	32 96       	adiw	r30, 0x02	; 2
    2826:	11 82       	std	Z+1, r1	; 0x01
    2828:	10 82       	st	Z, r1
    282a:	32 96       	adiw	r30, 0x02	; 2
    282c:	11 82       	std	Z+1, r1	; 0x01
    282e:	10 82       	st	Z, r1
    2830:	32 96       	adiw	r30, 0x02	; 2
    2832:	11 82       	std	Z+1, r1	; 0x01
    2834:	10 82       	st	Z, r1
    2836:	32 96       	adiw	r30, 0x02	; 2
    2838:	11 82       	std	Z+1, r1	; 0x01
    283a:	10 82       	st	Z, r1
    283c:	32 96       	adiw	r30, 0x02	; 2
    283e:	11 82       	std	Z+1, r1	; 0x01
    2840:	10 82       	st	Z, r1
    2842:	36 96       	adiw	r30, 0x06	; 6
    2844:	11 92       	st	Z+, r1
    2846:	11 92       	st	Z+, r1
    2848:	11 92       	st	Z+, r1
    284a:	10 82       	st	Z, r1
    284c:	32 96       	adiw	r30, 0x02	; 2
    284e:	11 92       	st	Z+, r1
    2850:	11 92       	st	Z+, r1
    2852:	11 92       	st	Z+, r1
    2854:	11 92       	st	Z+, r1
    2856:	11 92       	st	Z+, r1
    2858:	11 92       	st	Z+, r1
    285a:	11 92       	st	Z+, r1
    285c:	11 82       	std	Z+1, r1	; 0x01
    285e:	10 82       	st	Z, r1
    2860:	32 96       	adiw	r30, 0x02	; 2
    2862:	11 82       	std	Z+1, r1	; 0x01
    2864:	10 82       	st	Z, r1
    2866:	32 96       	adiw	r30, 0x02	; 2
    2868:	11 82       	std	Z+1, r1	; 0x01
    286a:	10 82       	st	Z, r1
    286c:	32 96       	adiw	r30, 0x02	; 2
    286e:	11 82       	std	Z+1, r1	; 0x01
    2870:	10 82       	st	Z, r1
    2872:	76 97       	sbiw	r30, 0x16	; 22
    2874:	11 82       	std	Z+1, r1	; 0x01
    2876:	10 82       	st	Z, r1
    2878:	32 96       	adiw	r30, 0x02	; 2
    287a:	11 82       	std	Z+1, r1	; 0x01
    287c:	10 82       	st	Z, r1
    287e:	10 92 c7 04 	sts	0x04C7, r1
    2882:	10 92 c6 04 	sts	0x04C6, r1
    2886:	10 92 c8 04 	sts	0x04C8, r1
    288a:	87 e0       	ldi	r24, 0x07	; 7
    288c:	61 e0       	ldi	r22, 0x01	; 1
    288e:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    2892:	87 e0       	ldi	r24, 0x07	; 7
    2894:	91 e0       	ldi	r25, 0x01	; 1
    2896:	08 95       	ret

00002898 <STEPPER_run>:
    2898:	ef 92       	push	r14
    289a:	ff 92       	push	r15
    289c:	0f 93       	push	r16
    289e:	1f 93       	push	r17
    28a0:	18 2f       	mov	r17, r24
    28a2:	06 2f       	mov	r16, r22
    28a4:	7a 01       	movw	r14, r20
    28a6:	60 e0       	ldi	r22, 0x00	; 0
    28a8:	0e 94 9a 14 	call	0x2934	; 0x2934 <STEPPER_set_mode>
    28ac:	81 2f       	mov	r24, r17
    28ae:	60 2f       	mov	r22, r16
    28b0:	0e 94 85 14 	call	0x290a	; 0x290a <STEPPER_set_dir>
    28b4:	81 2f       	mov	r24, r17
    28b6:	b7 01       	movw	r22, r14
    28b8:	0e 94 af 14 	call	0x295e	; 0x295e <STEPPER_set_speed>
    28bc:	1f 91       	pop	r17
    28be:	0f 91       	pop	r16
    28c0:	ff 90       	pop	r15
    28c2:	ef 90       	pop	r14
    28c4:	08 95       	ret

000028c6 <STEPPER_set_accel>:
    28c6:	48 2f       	mov	r20, r24
    28c8:	81 e0       	ldi	r24, 0x01	; 1
    28ca:	80 93 c8 04 	sts	0x04C8, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	23 e0       	ldi	r18, 0x03	; 3
    28d2:	69 3e       	cpi	r22, 0xE9	; 233
    28d4:	72 07       	cpc	r23, r18
    28d6:	10 f0       	brcs	.+4      	; 0x28dc <STEPPER_set_accel+0x16>
    28d8:	88 ee       	ldi	r24, 0xE8	; 232
    28da:	93 e0       	ldi	r25, 0x03	; 3
    28dc:	41 30       	cpi	r20, 0x01	; 1
    28de:	71 f0       	breq	.+28     	; 0x28fc <STEPPER_set_accel+0x36>
    28e0:	41 30       	cpi	r20, 0x01	; 1
    28e2:	18 f0       	brcs	.+6      	; 0x28ea <STEPPER_set_accel+0x24>
    28e4:	42 30       	cpi	r20, 0x02	; 2
    28e6:	71 f4       	brne	.+28     	; 0x2904 <STEPPER_set_accel+0x3e>
    28e8:	05 c0       	rjmp	.+10     	; 0x28f4 <STEPPER_set_accel+0x2e>
    28ea:	90 93 9d 04 	sts	0x049D, r25
    28ee:	80 93 9c 04 	sts	0x049C, r24
    28f2:	08 c0       	rjmp	.+16     	; 0x2904 <STEPPER_set_accel+0x3e>
    28f4:	90 93 9d 04 	sts	0x049D, r25
    28f8:	80 93 9c 04 	sts	0x049C, r24
    28fc:	90 93 9f 04 	sts	0x049F, r25
    2900:	80 93 9e 04 	sts	0x049E, r24
    2904:	10 92 c8 04 	sts	0x04C8, r1
    2908:	08 95       	ret

0000290a <STEPPER_set_dir>:
    290a:	98 2f       	mov	r25, r24
    290c:	81 e0       	ldi	r24, 0x01	; 1
    290e:	80 93 c8 04 	sts	0x04C8, r24
    2912:	91 30       	cpi	r25, 0x01	; 1
    2914:	51 f0       	breq	.+20     	; 0x292a <STEPPER_set_dir+0x20>
    2916:	91 30       	cpi	r25, 0x01	; 1
    2918:	18 f0       	brcs	.+6      	; 0x2920 <STEPPER_set_dir+0x16>
    291a:	92 30       	cpi	r25, 0x02	; 2
    291c:	41 f4       	brne	.+16     	; 0x292e <STEPPER_set_dir+0x24>
    291e:	03 c0       	rjmp	.+6      	; 0x2926 <STEPPER_set_dir+0x1c>
    2920:	60 93 b5 04 	sts	0x04B5, r22
    2924:	04 c0       	rjmp	.+8      	; 0x292e <STEPPER_set_dir+0x24>
    2926:	60 93 b5 04 	sts	0x04B5, r22
    292a:	60 93 b6 04 	sts	0x04B6, r22
    292e:	10 92 c8 04 	sts	0x04C8, r1
    2932:	08 95       	ret

00002934 <STEPPER_set_mode>:
    2934:	98 2f       	mov	r25, r24
    2936:	81 e0       	ldi	r24, 0x01	; 1
    2938:	80 93 c8 04 	sts	0x04C8, r24
    293c:	91 30       	cpi	r25, 0x01	; 1
    293e:	51 f0       	breq	.+20     	; 0x2954 <STEPPER_set_mode+0x20>
    2940:	91 30       	cpi	r25, 0x01	; 1
    2942:	18 f0       	brcs	.+6      	; 0x294a <STEPPER_set_mode+0x16>
    2944:	92 30       	cpi	r25, 0x02	; 2
    2946:	41 f4       	brne	.+16     	; 0x2958 <STEPPER_set_mode+0x24>
    2948:	03 c0       	rjmp	.+6      	; 0x2950 <STEPPER_set_mode+0x1c>
    294a:	60 93 92 04 	sts	0x0492, r22
    294e:	04 c0       	rjmp	.+8      	; 0x2958 <STEPPER_set_mode+0x24>
    2950:	60 93 92 04 	sts	0x0492, r22
    2954:	60 93 93 04 	sts	0x0493, r22
    2958:	10 92 c8 04 	sts	0x04C8, r1
    295c:	08 95       	ret

0000295e <STEPPER_set_speed>:
    295e:	48 2f       	mov	r20, r24
    2960:	81 e0       	ldi	r24, 0x01	; 1
    2962:	80 93 c8 04 	sts	0x04C8, r24
    2966:	cb 01       	movw	r24, r22
    2968:	21 e0       	ldi	r18, 0x01	; 1
    296a:	61 39       	cpi	r22, 0x91	; 145
    296c:	72 07       	cpc	r23, r18
    296e:	10 f0       	brcs	.+4      	; 0x2974 <STEPPER_set_speed+0x16>
    2970:	80 e9       	ldi	r24, 0x90	; 144
    2972:	91 e0       	ldi	r25, 0x01	; 1
    2974:	41 30       	cpi	r20, 0x01	; 1
    2976:	71 f0       	breq	.+28     	; 0x2994 <STEPPER_set_speed+0x36>
    2978:	41 30       	cpi	r20, 0x01	; 1
    297a:	18 f0       	brcs	.+6      	; 0x2982 <STEPPER_set_speed+0x24>
    297c:	42 30       	cpi	r20, 0x02	; 2
    297e:	71 f4       	brne	.+28     	; 0x299c <STEPPER_set_speed+0x3e>
    2980:	05 c0       	rjmp	.+10     	; 0x298c <STEPPER_set_speed+0x2e>
    2982:	90 93 95 04 	sts	0x0495, r25
    2986:	80 93 94 04 	sts	0x0494, r24
    298a:	08 c0       	rjmp	.+16     	; 0x299c <STEPPER_set_speed+0x3e>
    298c:	90 93 95 04 	sts	0x0495, r25
    2990:	80 93 94 04 	sts	0x0494, r24
    2994:	90 93 97 04 	sts	0x0497, r25
    2998:	80 93 96 04 	sts	0x0496, r24
    299c:	10 92 c8 04 	sts	0x04C8, r1
    29a0:	08 95       	ret

000029a2 <STEPPER_step>:
    29a2:	8f 92       	push	r8
    29a4:	9f 92       	push	r9
    29a6:	af 92       	push	r10
    29a8:	bf 92       	push	r11
    29aa:	cf 92       	push	r12
    29ac:	df 92       	push	r13
    29ae:	ef 92       	push	r14
    29b0:	ff 92       	push	r15
    29b2:	0f 93       	push	r16
    29b4:	1f 93       	push	r17
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	18 2f       	mov	r17, r24
    29bc:	f6 2e       	mov	r15, r22
    29be:	5a 01       	movw	r10, r20
    29c0:	49 01       	movw	r8, r18
    29c2:	e6 01       	movw	r28, r12
    29c4:	61 e0       	ldi	r22, 0x01	; 1
    29c6:	0e 94 9a 14 	call	0x2934	; 0x2934 <STEPPER_set_mode>
    29ca:	81 2f       	mov	r24, r17
    29cc:	b5 01       	movw	r22, r10
    29ce:	a4 01       	movw	r20, r8
    29d0:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <STEPPER_setup_decels>
    29d4:	81 2f       	mov	r24, r17
    29d6:	6f 2d       	mov	r22, r15
    29d8:	0e 94 85 14 	call	0x290a	; 0x290a <STEPPER_set_dir>
    29dc:	81 2f       	mov	r24, r17
    29de:	60 2f       	mov	r22, r16
    29e0:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <STEPPER_set_stop_mode>
    29e4:	81 2f       	mov	r24, r17
    29e6:	b5 01       	movw	r22, r10
    29e8:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <STEPPER_set_steps>
    29ec:	c1 14       	cp	r12, r1
    29ee:	d1 04       	cpc	r13, r1
    29f0:	99 f0       	breq	.+38     	; 0x2a18 <STEPPER_step+0x76>
    29f2:	11 30       	cpi	r17, 0x01	; 1
    29f4:	49 f0       	breq	.+18     	; 0x2a08 <STEPPER_step+0x66>
    29f6:	11 30       	cpi	r17, 0x01	; 1
    29f8:	18 f0       	brcs	.+6      	; 0x2a00 <STEPPER_step+0x5e>
    29fa:	12 30       	cpi	r17, 0x02	; 2
    29fc:	69 f4       	brne	.+26     	; 0x2a18 <STEPPER_step+0x76>
    29fe:	06 c0       	rjmp	.+12     	; 0x2a0c <STEPPER_step+0x6a>
    2a00:	18 82       	st	Y, r1
    2a02:	10 92 c4 04 	sts	0x04C4, r1
    2a06:	08 c0       	rjmp	.+16     	; 0x2a18 <STEPPER_step+0x76>
    2a08:	19 82       	std	Y+1, r1	; 0x01
    2a0a:	04 c0       	rjmp	.+8      	; 0x2a14 <STEPPER_step+0x72>
    2a0c:	18 82       	st	Y, r1
    2a0e:	19 82       	std	Y+1, r1	; 0x01
    2a10:	10 92 c4 04 	sts	0x04C4, r1
    2a14:	10 92 c5 04 	sts	0x04C5, r1
    2a18:	d0 93 c7 04 	sts	0x04C7, r29
    2a1c:	c0 93 c6 04 	sts	0x04C6, r28
    2a20:	ee 20       	and	r14, r14
    2a22:	b9 f5       	brne	.+110    	; 0x2a92 <STEPPER_step+0xf0>
    2a24:	8a e2       	ldi	r24, 0x2A	; 42
    2a26:	92 e0       	ldi	r25, 0x02	; 2
    2a28:	90 93 c7 04 	sts	0x04C7, r25
    2a2c:	80 93 c6 04 	sts	0x04C6, r24
    2a30:	81 2f       	mov	r24, r17
    2a32:	b4 01       	movw	r22, r8
    2a34:	0e 94 af 14 	call	0x295e	; 0x295e <STEPPER_set_speed>
    2a38:	81 2f       	mov	r24, r17
    2a3a:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <STEPPER_go>
    2a3e:	11 30       	cpi	r17, 0x01	; 1
    2a40:	71 f0       	breq	.+28     	; 0x2a5e <STEPPER_step+0xbc>
    2a42:	11 30       	cpi	r17, 0x01	; 1
    2a44:	18 f0       	brcs	.+6      	; 0x2a4c <STEPPER_step+0xaa>
    2a46:	12 30       	cpi	r17, 0x02	; 2
    2a48:	59 f5       	brne	.+86     	; 0x2aa0 <STEPPER_step+0xfe>
    2a4a:	12 c0       	rjmp	.+36     	; 0x2a70 <STEPPER_step+0xce>
    2a4c:	10 92 2a 02 	sts	0x022A, r1
    2a50:	10 92 c4 04 	sts	0x04C4, r1
    2a54:	80 91 2a 02 	lds	r24, 0x022A
    2a58:	88 23       	and	r24, r24
    2a5a:	e1 f3       	breq	.-8      	; 0x2a54 <STEPPER_step+0xb2>
    2a5c:	21 c0       	rjmp	.+66     	; 0x2aa0 <STEPPER_step+0xfe>
    2a5e:	10 92 2b 02 	sts	0x022B, r1
    2a62:	10 92 c5 04 	sts	0x04C5, r1
    2a66:	80 91 2b 02 	lds	r24, 0x022B
    2a6a:	88 23       	and	r24, r24
    2a6c:	e1 f3       	breq	.-8      	; 0x2a66 <STEPPER_step+0xc4>
    2a6e:	18 c0       	rjmp	.+48     	; 0x2aa0 <STEPPER_step+0xfe>
    2a70:	10 92 2a 02 	sts	0x022A, r1
    2a74:	10 92 2b 02 	sts	0x022B, r1
    2a78:	10 92 c4 04 	sts	0x04C4, r1
    2a7c:	10 92 c5 04 	sts	0x04C5, r1
    2a80:	80 91 2a 02 	lds	r24, 0x022A
    2a84:	88 23       	and	r24, r24
    2a86:	e1 f3       	breq	.-8      	; 0x2a80 <STEPPER_step+0xde>
    2a88:	80 91 2b 02 	lds	r24, 0x022B
    2a8c:	88 23       	and	r24, r24
    2a8e:	c1 f3       	breq	.-16     	; 0x2a80 <STEPPER_step+0xde>
    2a90:	07 c0       	rjmp	.+14     	; 0x2aa0 <STEPPER_step+0xfe>
    2a92:	81 2f       	mov	r24, r17
    2a94:	b4 01       	movw	r22, r8
    2a96:	0e 94 af 14 	call	0x295e	; 0x295e <STEPPER_set_speed>
    2a9a:	81 2f       	mov	r24, r17
    2a9c:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <STEPPER_go>
    2aa0:	df 91       	pop	r29
    2aa2:	cf 91       	pop	r28
    2aa4:	1f 91       	pop	r17
    2aa6:	0f 91       	pop	r16
    2aa8:	ff 90       	pop	r15
    2aaa:	ef 90       	pop	r14
    2aac:	df 90       	pop	r13
    2aae:	cf 90       	pop	r12
    2ab0:	bf 90       	pop	r11
    2ab2:	af 90       	pop	r10
    2ab4:	9f 90       	pop	r9
    2ab6:	8f 90       	pop	r8
    2ab8:	08 95       	ret

00002aba <STEPPER_wait_and_then>:
    2aba:	cf 92       	push	r12
    2abc:	df 92       	push	r13
    2abe:	ef 92       	push	r14
    2ac0:	ff 92       	push	r15
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	df 93       	push	r29
    2ac8:	cf 93       	push	r28
    2aca:	cd b7       	in	r28, 0x3d	; 61
    2acc:	de b7       	in	r29, 0x3e	; 62
    2ace:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ad0:	81 30       	cpi	r24, 0x01	; 1
    2ad2:	61 f0       	breq	.+24     	; 0x2aec <STEPPER_wait_and_then+0x32>
    2ad4:	81 30       	cpi	r24, 0x01	; 1
    2ad6:	18 f0       	brcs	.+6      	; 0x2ade <STEPPER_wait_and_then+0x24>
    2ad8:	82 30       	cpi	r24, 0x02	; 2
    2ada:	a1 f5       	brne	.+104    	; 0x2b44 <STEPPER_wait_and_then+0x8a>
    2adc:	11 c0       	rjmp	.+34     	; 0x2b00 <STEPPER_wait_and_then+0x46>
    2ade:	ec 85       	ldd	r30, Y+12	; 0x0c
    2ae0:	fd 85       	ldd	r31, Y+13	; 0x0d
    2ae2:	80 91 c9 04 	lds	r24, 0x04C9
    2ae6:	88 23       	and	r24, r24
    2ae8:	e1 f3       	breq	.-8      	; 0x2ae2 <STEPPER_wait_and_then+0x28>
    2aea:	06 c0       	rjmp	.+12     	; 0x2af8 <STEPPER_wait_and_then+0x3e>
    2aec:	ec 85       	ldd	r30, Y+12	; 0x0c
    2aee:	fd 85       	ldd	r31, Y+13	; 0x0d
    2af0:	80 91 ca 04 	lds	r24, 0x04CA
    2af4:	88 23       	and	r24, r24
    2af6:	e1 f3       	breq	.-8      	; 0x2af0 <STEPPER_wait_and_then+0x36>
    2af8:	30 97       	sbiw	r30, 0x00	; 0
    2afa:	21 f1       	breq	.+72     	; 0x2b44 <STEPPER_wait_and_then+0x8a>
    2afc:	09 95       	icall
    2afe:	22 c0       	rjmp	.+68     	; 0x2b44 <STEPPER_wait_and_then+0x8a>
    2b00:	cc 84       	ldd	r12, Y+12	; 0x0c
    2b02:	dd 84       	ldd	r13, Y+13	; 0x0d
    2b04:	ee 84       	ldd	r14, Y+14	; 0x0e
    2b06:	ff 84       	ldd	r15, Y+15	; 0x0f
    2b08:	00 e0       	ldi	r16, 0x00	; 0
    2b0a:	10 e0       	ldi	r17, 0x00	; 0
    2b0c:	00 23       	and	r16, r16
    2b0e:	51 f4       	brne	.+20     	; 0x2b24 <STEPPER_wait_and_then+0x6a>
    2b10:	80 91 c9 04 	lds	r24, 0x04C9
    2b14:	88 23       	and	r24, r24
    2b16:	31 f0       	breq	.+12     	; 0x2b24 <STEPPER_wait_and_then+0x6a>
    2b18:	c1 14       	cp	r12, r1
    2b1a:	d1 04       	cpc	r13, r1
    2b1c:	11 f0       	breq	.+4      	; 0x2b22 <STEPPER_wait_and_then+0x68>
    2b1e:	f6 01       	movw	r30, r12
    2b20:	09 95       	icall
    2b22:	01 e0       	ldi	r16, 0x01	; 1
    2b24:	11 23       	and	r17, r17
    2b26:	51 f4       	brne	.+20     	; 0x2b3c <STEPPER_wait_and_then+0x82>
    2b28:	80 91 ca 04 	lds	r24, 0x04CA
    2b2c:	88 23       	and	r24, r24
    2b2e:	31 f0       	breq	.+12     	; 0x2b3c <STEPPER_wait_and_then+0x82>
    2b30:	e1 14       	cp	r14, r1
    2b32:	f1 04       	cpc	r15, r1
    2b34:	11 f0       	breq	.+4      	; 0x2b3a <STEPPER_wait_and_then+0x80>
    2b36:	f7 01       	movw	r30, r14
    2b38:	09 95       	icall
    2b3a:	11 e0       	ldi	r17, 0x01	; 1
    2b3c:	00 23       	and	r16, r16
    2b3e:	31 f3       	breq	.-52     	; 0x2b0c <STEPPER_wait_and_then+0x52>
    2b40:	11 23       	and	r17, r17
    2b42:	21 f3       	breq	.-56     	; 0x2b0c <STEPPER_wait_and_then+0x52>
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	1f 91       	pop	r17
    2b4a:	0f 91       	pop	r16
    2b4c:	ff 90       	pop	r15
    2b4e:	ef 90       	pop	r14
    2b50:	df 90       	pop	r13
    2b52:	cf 90       	pop	r12
    2b54:	08 95       	ret

00002b56 <SYS_get_state>:
    2b56:	e8 2f       	mov	r30, r24
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	e3 31       	cpi	r30, 0x13	; 19
    2b5c:	f1 05       	cpc	r31, r1
    2b5e:	40 f4       	brcc	.+16     	; 0x2b70 <SYS_get_state+0x1a>
    2b60:	e2 5c       	subi	r30, 0xC2	; 194
    2b62:	ff 4f       	sbci	r31, 0xFF	; 255
    2b64:	ee 0f       	add	r30, r30
    2b66:	ff 1f       	adc	r31, r31
    2b68:	05 90       	lpm	r0, Z+
    2b6a:	f4 91       	lpm	r31, Z+
    2b6c:	e0 2d       	mov	r30, r0
    2b6e:	09 94       	ijmp
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	08 95       	ret
    2b74:	80 91 cb 04 	lds	r24, 0x04CB
    2b78:	08 95       	ret
    2b7a:	80 91 cc 04 	lds	r24, 0x04CC
    2b7e:	08 95       	ret
    2b80:	80 91 cd 04 	lds	r24, 0x04CD
    2b84:	08 95       	ret
    2b86:	80 91 ce 04 	lds	r24, 0x04CE
    2b8a:	08 95       	ret
    2b8c:	80 91 cf 04 	lds	r24, 0x04CF
    2b90:	08 95       	ret
    2b92:	80 91 d1 04 	lds	r24, 0x04D1
    2b96:	08 95       	ret
    2b98:	80 91 d0 04 	lds	r24, 0x04D0
    2b9c:	08 95       	ret
    2b9e:	80 91 d2 04 	lds	r24, 0x04D2
    2ba2:	08 95       	ret
    2ba4:	80 91 d3 04 	lds	r24, 0x04D3
    2ba8:	08 95       	ret
    2baa:	80 91 d4 04 	lds	r24, 0x04D4
    2bae:	08 95       	ret
    2bb0:	80 91 d5 04 	lds	r24, 0x04D5
    2bb4:	08 95       	ret
    2bb6:	80 91 d6 04 	lds	r24, 0x04D6
    2bba:	08 95       	ret
    2bbc:	80 91 d7 04 	lds	r24, 0x04D7
    2bc0:	08 95       	ret
    2bc2:	80 91 d8 04 	lds	r24, 0x04D8
    2bc6:	08 95       	ret
    2bc8:	80 91 d9 04 	lds	r24, 0x04D9
    2bcc:	08 95       	ret
    2bce:	80 91 da 04 	lds	r24, 0x04DA
    2bd2:	08 95       	ret
    2bd4:	80 91 db 04 	lds	r24, 0x04DB
    2bd8:	08 95       	ret
    2bda:	80 91 dc 04 	lds	r24, 0x04DC
    2bde:	08 95       	ret
    2be0:	80 91 dd 04 	lds	r24, 0x04DD
    2be4:	08 95       	ret

00002be6 <SYS_set_state>:
    2be6:	e8 2f       	mov	r30, r24
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	e3 31       	cpi	r30, 0x13	; 19
    2bec:	f1 05       	cpc	r31, r1
    2bee:	08 f0       	brcs	.+2      	; 0x2bf2 <SYS_set_state+0xc>
    2bf0:	40 c0       	rjmp	.+128    	; 0x2c72 <SYS_set_state+0x8c>
    2bf2:	ef 5a       	subi	r30, 0xAF	; 175
    2bf4:	ff 4f       	sbci	r31, 0xFF	; 255
    2bf6:	ee 0f       	add	r30, r30
    2bf8:	ff 1f       	adc	r31, r31
    2bfa:	05 90       	lpm	r0, Z+
    2bfc:	f4 91       	lpm	r31, Z+
    2bfe:	e0 2d       	mov	r30, r0
    2c00:	09 94       	ijmp
    2c02:	60 93 cb 04 	sts	0x04CB, r22
    2c06:	08 95       	ret
    2c08:	60 93 cc 04 	sts	0x04CC, r22
    2c0c:	08 95       	ret
    2c0e:	60 93 cd 04 	sts	0x04CD, r22
    2c12:	08 95       	ret
    2c14:	60 93 ce 04 	sts	0x04CE, r22
    2c18:	08 95       	ret
    2c1a:	60 93 cf 04 	sts	0x04CF, r22
    2c1e:	08 95       	ret
    2c20:	60 93 d1 04 	sts	0x04D1, r22
    2c24:	08 95       	ret
    2c26:	60 93 d0 04 	sts	0x04D0, r22
    2c2a:	08 95       	ret
    2c2c:	60 93 d2 04 	sts	0x04D2, r22
    2c30:	08 95       	ret
    2c32:	60 93 d3 04 	sts	0x04D3, r22
    2c36:	08 95       	ret
    2c38:	60 93 d4 04 	sts	0x04D4, r22
    2c3c:	08 95       	ret
    2c3e:	60 93 d5 04 	sts	0x04D5, r22
    2c42:	08 95       	ret
    2c44:	60 93 d6 04 	sts	0x04D6, r22
    2c48:	08 95       	ret
    2c4a:	60 93 d7 04 	sts	0x04D7, r22
    2c4e:	08 95       	ret
    2c50:	60 93 d8 04 	sts	0x04D8, r22
    2c54:	08 95       	ret
    2c56:	60 93 d9 04 	sts	0x04D9, r22
    2c5a:	08 95       	ret
    2c5c:	60 93 da 04 	sts	0x04DA, r22
    2c60:	08 95       	ret
    2c62:	60 93 db 04 	sts	0x04DB, r22
    2c66:	08 95       	ret
    2c68:	60 93 dc 04 	sts	0x04DC, r22
    2c6c:	08 95       	ret
    2c6e:	60 93 db 04 	sts	0x04DB, r22
    2c72:	08 95       	ret

00002c74 <ATTINY_get_sensors>:
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	81 e0       	ldi	r24, 0x01	; 1
    2c7a:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    2c7e:	81 30       	cpi	r24, 0x01	; 1
    2c80:	11 f0       	breq	.+4      	; 0x2c86 <ATTINY_get_sensors+0x12>
    2c82:	00 e0       	ldi	r16, 0x00	; 0
    2c84:	24 c0       	rjmp	.+72     	; 0x2cce <ATTINY_get_sensors+0x5a>
    2c86:	87 e0       	ldi	r24, 0x07	; 7
    2c88:	0e 94 88 11 	call	0x2310	; 0x2310 <SPI_set_slave_addr>
    2c8c:	82 e0       	ldi	r24, 0x02	; 2
    2c8e:	6a e0       	ldi	r22, 0x0A	; 10
    2c90:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <SPI_transmit>
    2c94:	82 e0       	ldi	r24, 0x02	; 2
    2c96:	62 eb       	ldi	r22, 0xB2	; 178
    2c98:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <SPI_transmit>
    2c9c:	18 ec       	ldi	r17, 0xC8	; 200
    2c9e:	81 2f       	mov	r24, r17
    2ca0:	8a 95       	dec	r24
    2ca2:	f1 f7       	brne	.-4      	; 0x2ca0 <ATTINY_get_sensors+0x2c>
    2ca4:	82 e0       	ldi	r24, 0x02	; 2
    2ca6:	60 e0       	ldi	r22, 0x00	; 0
    2ca8:	0e 94 15 1c 	call	0x382a	; 0x382a <SPI_receive>
    2cac:	08 2f       	mov	r16, r24
    2cae:	81 2f       	mov	r24, r17
    2cb0:	8a 95       	dec	r24
    2cb2:	f1 f7       	brne	.-4      	; 0x2cb0 <ATTINY_get_sensors+0x3c>
    2cb4:	82 e0       	ldi	r24, 0x02	; 2
    2cb6:	60 e0       	ldi	r22, 0x00	; 0
    2cb8:	0e 94 15 1c 	call	0x382a	; 0x382a <SPI_receive>
    2cbc:	1a 95       	dec	r17
    2cbe:	f1 f7       	brne	.-4      	; 0x2cbc <ATTINY_get_sensors+0x48>
    2cc0:	87 e0       	ldi	r24, 0x07	; 7
    2cc2:	0e 94 88 11 	call	0x2310	; 0x2310 <SPI_set_slave_addr>
    2cc6:	88 e8       	ldi	r24, 0x88	; 136
    2cc8:	93 e1       	ldi	r25, 0x13	; 19
    2cca:	01 97       	sbiw	r24, 0x01	; 1
    2ccc:	f1 f7       	brne	.-4      	; 0x2cca <ATTINY_get_sensors+0x56>
    2cce:	80 2f       	mov	r24, r16
    2cd0:	1f 91       	pop	r17
    2cd2:	0f 91       	pop	r16
    2cd4:	08 95       	ret

00002cd6 <ATTINY_get_SW_state>:
    2cd6:	1f 93       	push	r17
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	18 2f       	mov	r17, r24
    2cde:	80 91 2d 02 	lds	r24, 0x022D
    2ce2:	88 23       	and	r24, r24
    2ce4:	41 f0       	breq	.+16     	; 0x2cf6 <ATTINY_get_SW_state+0x20>
    2ce6:	80 91 37 02 	lds	r24, 0x0237
    2cea:	88 23       	and	r24, r24
    2cec:	99 f0       	breq	.+38     	; 0x2d14 <ATTINY_get_SW_state+0x3e>
    2cee:	10 92 2d 02 	sts	0x022D, r1
    2cf2:	10 92 37 02 	sts	0x0237, r1
    2cf6:	0e 94 3a 16 	call	0x2c74	; 0x2c74 <ATTINY_get_sensors>
    2cfa:	80 93 2c 02 	sts	0x022C, r24
    2cfe:	81 e3       	ldi	r24, 0x31	; 49
    2d00:	92 e0       	ldi	r25, 0x02	; 2
    2d02:	61 e0       	ldi	r22, 0x01	; 1
    2d04:	40 e0       	ldi	r20, 0x00	; 0
    2d06:	22 e3       	ldi	r18, 0x32	; 50
    2d08:	30 e0       	ldi	r19, 0x00	; 0
    2d0a:	0e 94 29 17 	call	0x2e52	; 0x2e52 <TMRSRVC_new>
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	80 93 2d 02 	sts	0x022D, r24
    2d14:	90 91 2c 02 	lds	r25, 0x022C
    2d18:	a1 2f       	mov	r26, r17
    2d1a:	b0 e0       	ldi	r27, 0x00	; 0
    2d1c:	ed 01       	movw	r28, r26
    2d1e:	c1 55       	subi	r28, 0x51	; 81
    2d20:	de 4f       	sbci	r29, 0xFE	; 254
    2d22:	88 81       	ld	r24, Y
    2d24:	88 23       	and	r24, r24
    2d26:	69 f0       	breq	.+26     	; 0x2d42 <ATTINY_get_SW_state+0x6c>
    2d28:	fd 01       	movw	r30, r26
    2d2a:	ee 54       	subi	r30, 0x4E	; 78
    2d2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2d2e:	80 81       	ld	r24, Z
    2d30:	98 23       	and	r25, r24
    2d32:	c1 f0       	breq	.+48     	; 0x2d64 <ATTINY_get_SW_state+0x8e>
    2d34:	fd 01       	movw	r30, r26
    2d36:	e2 5d       	subi	r30, 0xD2	; 210
    2d38:	fd 4f       	sbci	r31, 0xFD	; 253
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	80 83       	st	Z, r24
    2d3e:	18 82       	st	Y, r1
    2d40:	11 c0       	rjmp	.+34     	; 0x2d64 <ATTINY_get_SW_state+0x8e>
    2d42:	fd 01       	movw	r30, r26
    2d44:	e2 5d       	subi	r30, 0xD2	; 210
    2d46:	fd 4f       	sbci	r31, 0xFD	; 253
    2d48:	80 81       	ld	r24, Z
    2d4a:	81 11       	cpse	r24, r1
    2d4c:	10 82       	st	Z, r1
    2d4e:	fd 01       	movw	r30, r26
    2d50:	ee 54       	subi	r30, 0x4E	; 78
    2d52:	fe 4f       	sbci	r31, 0xFE	; 254
    2d54:	80 81       	ld	r24, Z
    2d56:	98 23       	and	r25, r24
    2d58:	29 f4       	brne	.+10     	; 0x2d64 <ATTINY_get_SW_state+0x8e>
    2d5a:	fd 01       	movw	r30, r26
    2d5c:	e1 55       	subi	r30, 0x51	; 81
    2d5e:	fe 4f       	sbci	r31, 0xFE	; 254
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	80 83       	st	Z, r24
    2d64:	a2 5d       	subi	r26, 0xD2	; 210
    2d66:	bd 4f       	sbci	r27, 0xFD	; 253
    2d68:	8c 91       	ld	r24, X
    2d6a:	df 91       	pop	r29
    2d6c:	cf 91       	pop	r28
    2d6e:	1f 91       	pop	r17
    2d70:	08 95       	ret

00002d72 <ATTINY_open>:
    2d72:	82 e0       	ldi	r24, 0x02	; 2
    2d74:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    2d78:	88 23       	and	r24, r24
    2d7a:	19 f4       	brne	.+6      	; 0x2d82 <ATTINY_open+0x10>
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	82 e0       	ldi	r24, 0x02	; 2
    2d80:	08 95       	ret
    2d82:	10 92 f9 04 	sts	0x04F9, r1
    2d86:	10 92 f8 04 	sts	0x04F8, r1
    2d8a:	10 92 fb 04 	sts	0x04FB, r1
    2d8e:	10 92 fa 04 	sts	0x04FA, r1
    2d92:	10 92 fd 04 	sts	0x04FD, r1
    2d96:	10 92 fc 04 	sts	0x04FC, r1
    2d9a:	10 92 ff 04 	sts	0x04FF, r1
    2d9e:	10 92 fe 04 	sts	0x04FE, r1
    2da2:	10 92 01 05 	sts	0x0501, r1
    2da6:	10 92 00 05 	sts	0x0500, r1
    2daa:	80 e9       	ldi	r24, 0x90	; 144
    2dac:	91 e0       	ldi	r25, 0x01	; 1
    2dae:	90 93 e5 04 	sts	0x04E5, r25
    2db2:	80 93 e4 04 	sts	0x04E4, r24
    2db6:	90 93 e7 04 	sts	0x04E7, r25
    2dba:	80 93 e6 04 	sts	0x04E6, r24
    2dbe:	90 93 e9 04 	sts	0x04E9, r25
    2dc2:	80 93 e8 04 	sts	0x04E8, r24
    2dc6:	90 93 eb 04 	sts	0x04EB, r25
    2dca:	80 93 ea 04 	sts	0x04EA, r24
    2dce:	90 93 ed 04 	sts	0x04ED, r25
    2dd2:	80 93 ec 04 	sts	0x04EC, r24
    2dd6:	84 e3       	ldi	r24, 0x34	; 52
    2dd8:	98 e0       	ldi	r25, 0x08	; 8
    2dda:	90 93 ef 04 	sts	0x04EF, r25
    2dde:	80 93 ee 04 	sts	0x04EE, r24
    2de2:	90 93 f1 04 	sts	0x04F1, r25
    2de6:	80 93 f0 04 	sts	0x04F0, r24
    2dea:	90 93 f3 04 	sts	0x04F3, r25
    2dee:	80 93 f2 04 	sts	0x04F2, r24
    2df2:	90 93 f5 04 	sts	0x04F5, r25
    2df6:	80 93 f4 04 	sts	0x04F4, r24
    2dfa:	90 93 f7 04 	sts	0x04F7, r25
    2dfe:	80 93 f6 04 	sts	0x04F6, r24
    2e02:	81 e0       	ldi	r24, 0x01	; 1
    2e04:	61 e0       	ldi	r22, 0x01	; 1
    2e06:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    2e0a:	91 e0       	ldi	r25, 0x01	; 1
    2e0c:	81 e0       	ldi	r24, 0x01	; 1
    2e0e:	08 95       	ret

00002e10 <TMRSRVC_delay>:
    2e10:	df 93       	push	r29
    2e12:	cf 93       	push	r28
    2e14:	cd b7       	in	r28, 0x3d	; 61
    2e16:	de b7       	in	r29, 0x3e	; 62
    2e18:	29 97       	sbiw	r28, 0x09	; 9
    2e1a:	0f b6       	in	r0, 0x3f	; 63
    2e1c:	f8 94       	cli
    2e1e:	de bf       	out	0x3e, r29	; 62
    2e20:	0f be       	out	0x3f, r0	; 63
    2e22:	cd bf       	out	0x3d, r28	; 61
    2e24:	9c 01       	movw	r18, r24
    2e26:	ce 01       	movw	r24, r28
    2e28:	01 96       	adiw	r24, 0x01	; 1
    2e2a:	61 e0       	ldi	r22, 0x01	; 1
    2e2c:	40 e0       	ldi	r20, 0x00	; 0
    2e2e:	0e 94 29 17 	call	0x2e52	; 0x2e52 <TMRSRVC_new>
    2e32:	98 2f       	mov	r25, r24
    2e34:	88 23       	and	r24, r24
    2e36:	19 f4       	brne	.+6      	; 0x2e3e <TMRSRVC_delay+0x2e>
    2e38:	8f 81       	ldd	r24, Y+7	; 0x07
    2e3a:	88 23       	and	r24, r24
    2e3c:	e9 f3       	breq	.-6      	; 0x2e38 <TMRSRVC_delay+0x28>
    2e3e:	89 2f       	mov	r24, r25
    2e40:	29 96       	adiw	r28, 0x09	; 9
    2e42:	0f b6       	in	r0, 0x3f	; 63
    2e44:	f8 94       	cli
    2e46:	de bf       	out	0x3e, r29	; 62
    2e48:	0f be       	out	0x3f, r0	; 63
    2e4a:	cd bf       	out	0x3d, r28	; 61
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <TMRSRVC_new>:
    2e52:	ef 92       	push	r14
    2e54:	ff 92       	push	r15
    2e56:	0f 93       	push	r16
    2e58:	1f 93       	push	r17
    2e5a:	cf 93       	push	r28
    2e5c:	df 93       	push	r29
    2e5e:	ec 01       	movw	r28, r24
    2e60:	f6 2e       	mov	r15, r22
    2e62:	e4 2e       	mov	r14, r20
    2e64:	89 01       	movw	r16, r18
    2e66:	88 e0       	ldi	r24, 0x08	; 8
    2e68:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    2e6c:	81 30       	cpi	r24, 0x01	; 1
    2e6e:	11 f0       	breq	.+4      	; 0x2e74 <TMRSRVC_new+0x22>
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	26 c0       	rjmp	.+76     	; 0x2ec0 <TMRSRVC_new+0x6e>
    2e74:	84 e0       	ldi	r24, 0x04	; 4
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	0e 94 e5 2a 	call	0x55ca	; 0x55ca <malloc>
    2e7c:	fc 01       	movw	r30, r24
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	11 f4       	brne	.+4      	; 0x2e86 <TMRSRVC_new+0x34>
    2e82:	82 e0       	ldi	r24, 0x02	; 2
    2e84:	1d c0       	rjmp	.+58     	; 0x2ec0 <TMRSRVC_new+0x6e>
    2e86:	f9 82       	std	Y+1, r15	; 0x01
    2e88:	f0 fc       	sbrc	r15, 0
    2e8a:	1e 82       	std	Y+6, r1	; 0x06
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	e8 16       	cp	r14, r24
    2e90:	19 f4       	brne	.+6      	; 0x2e98 <TMRSRVC_new+0x46>
    2e92:	89 81       	ldd	r24, Y+1	; 0x01
    2e94:	84 60       	ori	r24, 0x04	; 4
    2e96:	89 83       	std	Y+1, r24	; 0x01
    2e98:	89 81       	ldd	r24, Y+1	; 0x01
    2e9a:	88 60       	ori	r24, 0x08	; 8
    2e9c:	89 83       	std	Y+1, r24	; 0x01
    2e9e:	1b 83       	std	Y+3, r17	; 0x03
    2ea0:	0a 83       	std	Y+2, r16	; 0x02
    2ea2:	1d 83       	std	Y+5, r17	; 0x05
    2ea4:	0c 83       	std	Y+4, r16	; 0x04
    2ea6:	d1 83       	std	Z+1, r29	; 0x01
    2ea8:	c0 83       	st	Z, r28
    2eaa:	13 82       	std	Z+3, r1	; 0x03
    2eac:	12 82       	std	Z+2, r1	; 0x02
    2eae:	81 e0       	ldi	r24, 0x01	; 1
    2eb0:	80 93 9a 02 	sts	0x029A, r24
    2eb4:	cf 01       	movw	r24, r30
    2eb6:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <TMRSRVC_insert>
    2eba:	10 92 9a 02 	sts	0x029A, r1
    2ebe:	80 e0       	ldi	r24, 0x00	; 0
    2ec0:	df 91       	pop	r29
    2ec2:	cf 91       	pop	r28
    2ec4:	1f 91       	pop	r17
    2ec6:	0f 91       	pop	r16
    2ec8:	ff 90       	pop	r15
    2eca:	ef 90       	pop	r14
    2ecc:	08 95       	ret

00002ece <I2C_MSTR_get>:
    2ece:	fc 01       	movw	r30, r24
    2ed0:	80 91 05 05 	lds	r24, 0x0505
    2ed4:	81 30       	cpi	r24, 0x01	; 1
    2ed6:	11 f0       	breq	.+4      	; 0x2edc <I2C_MSTR_get+0xe>
    2ed8:	85 e0       	ldi	r24, 0x05	; 5
    2eda:	08 95       	ret
    2edc:	80 91 06 05 	lds	r24, 0x0506
    2ee0:	81 30       	cpi	r24, 0x01	; 1
    2ee2:	11 f0       	breq	.+4      	; 0x2ee8 <I2C_MSTR_get+0x1a>
    2ee4:	8a e0       	ldi	r24, 0x0A	; 10
    2ee6:	08 95       	ret
    2ee8:	61 30       	cpi	r22, 0x01	; 1
    2eea:	11 f4       	brne	.+4      	; 0x2ef0 <I2C_MSTR_get+0x22>
    2eec:	84 ec       	ldi	r24, 0xC4	; 196
    2eee:	01 c0       	rjmp	.+2      	; 0x2ef2 <I2C_MSTR_get+0x24>
    2ef0:	84 e8       	ldi	r24, 0x84	; 132
    2ef2:	80 93 bc 00 	sts	0x00BC, r24
    2ef6:	80 91 bc 00 	lds	r24, 0x00BC
    2efa:	87 ff       	sbrs	r24, 7
    2efc:	fc cf       	rjmp	.-8      	; 0x2ef6 <I2C_MSTR_get+0x28>
    2efe:	61 30       	cpi	r22, 0x01	; 1
    2f00:	31 f4       	brne	.+12     	; 0x2f0e <I2C_MSTR_get+0x40>
    2f02:	80 91 b9 00 	lds	r24, 0x00B9
    2f06:	88 7f       	andi	r24, 0xF8	; 248
    2f08:	80 35       	cpi	r24, 0x50	; 80
    2f0a:	59 f4       	brne	.+22     	; 0x2f22 <I2C_MSTR_get+0x54>
    2f0c:	05 c0       	rjmp	.+10     	; 0x2f18 <I2C_MSTR_get+0x4a>
    2f0e:	80 91 b9 00 	lds	r24, 0x00B9
    2f12:	88 7f       	andi	r24, 0xF8	; 248
    2f14:	88 35       	cpi	r24, 0x58	; 88
    2f16:	29 f4       	brne	.+10     	; 0x2f22 <I2C_MSTR_get+0x54>
    2f18:	80 91 bb 00 	lds	r24, 0x00BB
    2f1c:	80 83       	st	Z, r24
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	08 95       	ret
    2f22:	82 e0       	ldi	r24, 0x02	; 2
    2f24:	08 95       	ret

00002f26 <I2C_MSTR_send>:
    2f26:	98 2f       	mov	r25, r24
    2f28:	80 91 05 05 	lds	r24, 0x0505
    2f2c:	81 30       	cpi	r24, 0x01	; 1
    2f2e:	11 f0       	breq	.+4      	; 0x2f34 <I2C_MSTR_send+0xe>
    2f30:	85 e0       	ldi	r24, 0x05	; 5
    2f32:	08 95       	ret
    2f34:	80 91 06 05 	lds	r24, 0x0506
    2f38:	81 30       	cpi	r24, 0x01	; 1
    2f3a:	11 f0       	breq	.+4      	; 0x2f40 <I2C_MSTR_send+0x1a>
    2f3c:	8a e0       	ldi	r24, 0x0A	; 10
    2f3e:	08 95       	ret
    2f40:	90 93 bb 00 	sts	0x00BB, r25
    2f44:	84 e8       	ldi	r24, 0x84	; 132
    2f46:	80 93 bc 00 	sts	0x00BC, r24
    2f4a:	80 91 bc 00 	lds	r24, 0x00BC
    2f4e:	87 ff       	sbrs	r24, 7
    2f50:	fc cf       	rjmp	.-8      	; 0x2f4a <I2C_MSTR_send+0x24>
    2f52:	80 91 b9 00 	lds	r24, 0x00B9
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	88 7f       	andi	r24, 0xF8	; 248
    2f5a:	90 70       	andi	r25, 0x00	; 0
    2f5c:	88 32       	cpi	r24, 0x28	; 40
    2f5e:	91 05       	cpc	r25, r1
    2f60:	21 f0       	breq	.+8      	; 0x2f6a <I2C_MSTR_send+0x44>
    2f62:	c0 97       	sbiw	r24, 0x30	; 48
    2f64:	21 f4       	brne	.+8      	; 0x2f6e <I2C_MSTR_send+0x48>
    2f66:	83 e0       	ldi	r24, 0x03	; 3
    2f68:	08 95       	ret
    2f6a:	80 e0       	ldi	r24, 0x00	; 0
    2f6c:	08 95       	ret
    2f6e:	8c e0       	ldi	r24, 0x0C	; 12
    2f70:	08 95       	ret

00002f72 <I2C_MSTR_start>:
    2f72:	98 2f       	mov	r25, r24
    2f74:	20 91 05 05 	lds	r18, 0x0505
    2f78:	21 30       	cpi	r18, 0x01	; 1
    2f7a:	11 f0       	breq	.+4      	; 0x2f80 <I2C_MSTR_start+0xe>
    2f7c:	85 e0       	ldi	r24, 0x05	; 5
    2f7e:	08 95       	ret
    2f80:	80 91 07 05 	lds	r24, 0x0507
    2f84:	81 30       	cpi	r24, 0x01	; 1
    2f86:	11 f4       	brne	.+4      	; 0x2f8c <I2C_MSTR_start+0x1a>
    2f88:	89 e0       	ldi	r24, 0x09	; 9
    2f8a:	08 95       	ret
    2f8c:	20 93 06 05 	sts	0x0506, r18
    2f90:	84 ea       	ldi	r24, 0xA4	; 164
    2f92:	80 93 bc 00 	sts	0x00BC, r24
    2f96:	80 91 bc 00 	lds	r24, 0x00BC
    2f9a:	87 ff       	sbrs	r24, 7
    2f9c:	fc cf       	rjmp	.-8      	; 0x2f96 <I2C_MSTR_start+0x24>
    2f9e:	80 91 b9 00 	lds	r24, 0x00B9
    2fa2:	88 7f       	andi	r24, 0xF8	; 248
    2fa4:	88 30       	cpi	r24, 0x08	; 8
    2fa6:	39 f0       	breq	.+14     	; 0x2fb6 <I2C_MSTR_start+0x44>
    2fa8:	80 91 b9 00 	lds	r24, 0x00B9
    2fac:	88 7f       	andi	r24, 0xF8	; 248
    2fae:	80 31       	cpi	r24, 0x10	; 16
    2fb0:	11 f0       	breq	.+4      	; 0x2fb6 <I2C_MSTR_start+0x44>
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	08 95       	ret
    2fb6:	61 30       	cpi	r22, 0x01	; 1
    2fb8:	19 f4       	brne	.+6      	; 0x2fc0 <I2C_MSTR_start+0x4e>
    2fba:	99 0f       	add	r25, r25
    2fbc:	91 60       	ori	r25, 0x01	; 1
    2fbe:	03 c0       	rjmp	.+6      	; 0x2fc6 <I2C_MSTR_start+0x54>
    2fc0:	66 23       	and	r22, r22
    2fc2:	19 f4       	brne	.+6      	; 0x2fca <I2C_MSTR_start+0x58>
    2fc4:	99 0f       	add	r25, r25
    2fc6:	90 93 bb 00 	sts	0x00BB, r25
    2fca:	84 e8       	ldi	r24, 0x84	; 132
    2fcc:	80 93 bc 00 	sts	0x00BC, r24
    2fd0:	80 91 bc 00 	lds	r24, 0x00BC
    2fd4:	87 ff       	sbrs	r24, 7
    2fd6:	fc cf       	rjmp	.-8      	; 0x2fd0 <I2C_MSTR_start+0x5e>
    2fd8:	61 30       	cpi	r22, 0x01	; 1
    2fda:	31 f4       	brne	.+12     	; 0x2fe8 <I2C_MSTR_start+0x76>
    2fdc:	80 91 b9 00 	lds	r24, 0x00B9
    2fe0:	88 7f       	andi	r24, 0xF8	; 248
    2fe2:	80 34       	cpi	r24, 0x40	; 64
    2fe4:	41 f4       	brne	.+16     	; 0x2ff6 <I2C_MSTR_start+0x84>
    2fe6:	09 c0       	rjmp	.+18     	; 0x2ffa <I2C_MSTR_start+0x88>
    2fe8:	66 23       	and	r22, r22
    2fea:	39 f4       	brne	.+14     	; 0x2ffa <I2C_MSTR_start+0x88>
    2fec:	80 91 b9 00 	lds	r24, 0x00B9
    2ff0:	88 7f       	andi	r24, 0xF8	; 248
    2ff2:	88 31       	cpi	r24, 0x18	; 24
    2ff4:	11 f0       	breq	.+4      	; 0x2ffa <I2C_MSTR_start+0x88>
    2ff6:	82 e0       	ldi	r24, 0x02	; 2
    2ff8:	08 95       	ret
    2ffa:	80 e0       	ldi	r24, 0x00	; 0
    2ffc:	08 95       	ret

00002ffe <I2C_MSTR_stop>:
    2ffe:	80 91 06 05 	lds	r24, 0x0506
    3002:	81 30       	cpi	r24, 0x01	; 1
    3004:	11 f0       	breq	.+4      	; 0x300a <I2C_MSTR_stop+0xc>
    3006:	8a e0       	ldi	r24, 0x0A	; 10
    3008:	08 95       	ret
    300a:	80 91 08 05 	lds	r24, 0x0508
    300e:	81 30       	cpi	r24, 0x01	; 1
    3010:	29 f4       	brne	.+10     	; 0x301c <I2C_MSTR_stop+0x1e>
    3012:	85 e9       	ldi	r24, 0x95	; 149
    3014:	80 93 bc 00 	sts	0x00BC, r24
    3018:	80 e0       	ldi	r24, 0x00	; 0
    301a:	08 95       	ret
    301c:	84 e9       	ldi	r24, 0x94	; 148
    301e:	80 93 bc 00 	sts	0x00BC, r24
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	08 95       	ret

00003026 <I2C_open>:
    3026:	82 e1       	ldi	r24, 0x12	; 18
    3028:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    302c:	88 23       	and	r24, r24
    302e:	b1 f4       	brne	.+44     	; 0x305c <I2C_open+0x36>
    3030:	10 92 05 05 	sts	0x0505, r1
    3034:	10 92 06 05 	sts	0x0506, r1
    3038:	10 92 07 05 	sts	0x0507, r1
    303c:	10 92 08 05 	sts	0x0508, r1
    3040:	10 92 09 05 	sts	0x0509, r1
    3044:	0e 94 75 1e 	call	0x3cea	; 0x3cea <__I2C_init>
    3048:	87 e1       	ldi	r24, 0x17	; 23
    304a:	60 e0       	ldi	r22, 0x00	; 0
    304c:	0e 94 31 18 	call	0x3062	; 0x3062 <I2C_set_BRG>
    3050:	0e 94 6b 1e 	call	0x3cd6	; 0x3cd6 <I2C_enable>
    3054:	82 e1       	ldi	r24, 0x12	; 18
    3056:	61 e0       	ldi	r22, 0x01	; 1
    3058:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    305c:	82 e1       	ldi	r24, 0x12	; 18
    305e:	90 e0       	ldi	r25, 0x00	; 0
    3060:	08 95       	ret

00003062 <I2C_set_BRG>:
    3062:	63 70       	andi	r22, 0x03	; 3
    3064:	60 93 b9 00 	sts	0x00B9, r22
    3068:	80 93 b8 00 	sts	0x00B8, r24
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	80 93 05 05 	sts	0x0505, r24
    3072:	08 95       	ret

00003074 <__ADC_init>:
    3074:	8f e1       	ldi	r24, 0x1F	; 31
    3076:	80 93 7c 00 	sts	0x007C, r24
    307a:	ea e7       	ldi	r30, 0x7A	; 122
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	87 e0       	ldi	r24, 0x07	; 7
    3080:	80 83       	st	Z, r24
    3082:	80 81       	ld	r24, Z
    3084:	80 68       	ori	r24, 0x80	; 128
    3086:	80 83       	st	Z, r24
    3088:	08 95       	ret

0000308a <CBOT_init>:
    308a:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <SYS_init>
    308e:	0e 94 77 1b 	call	0x36ee	; 0x36ee <ATMEGA_open>
    3092:	0e 94 a7 1a 	call	0x354e	; 0x354e <ISR_open>
    3096:	0e 94 42 1e 	call	0x3c84	; 0x3c84 <TMRSRVC_open>
    309a:	0e 94 dc 1b 	call	0x37b8	; 0x37b8 <SPI_open>
    309e:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <ATTINY_open>
    30a2:	78 94       	sei
    30a4:	08 95       	ret

000030a6 <CBOT_ISR_init>:
    30a6:	00 00       	nop
    30a8:	08 95       	ret

000030aa <__vector_16>:
    30aa:	1f 92       	push	r1
    30ac:	0f 92       	push	r0
    30ae:	0f b6       	in	r0, 0x3f	; 63
    30b0:	0f 92       	push	r0
    30b2:	11 24       	eor	r1, r1
    30b4:	2f 93       	push	r18
    30b6:	3f 93       	push	r19
    30b8:	4f 93       	push	r20
    30ba:	5f 93       	push	r21
    30bc:	6f 93       	push	r22
    30be:	7f 93       	push	r23
    30c0:	8f 93       	push	r24
    30c2:	9f 93       	push	r25
    30c4:	af 93       	push	r26
    30c6:	bf 93       	push	r27
    30c8:	ef 93       	push	r30
    30ca:	ff 93       	push	r31
    30cc:	e0 91 5a 02 	lds	r30, 0x025A
    30d0:	f0 91 5b 02 	lds	r31, 0x025B
    30d4:	30 97       	sbiw	r30, 0x00	; 0
    30d6:	09 f0       	breq	.+2      	; 0x30da <__vector_16+0x30>
    30d8:	09 95       	icall
    30da:	ff 91       	pop	r31
    30dc:	ef 91       	pop	r30
    30de:	bf 91       	pop	r27
    30e0:	af 91       	pop	r26
    30e2:	9f 91       	pop	r25
    30e4:	8f 91       	pop	r24
    30e6:	7f 91       	pop	r23
    30e8:	6f 91       	pop	r22
    30ea:	5f 91       	pop	r21
    30ec:	4f 91       	pop	r20
    30ee:	3f 91       	pop	r19
    30f0:	2f 91       	pop	r18
    30f2:	0f 90       	pop	r0
    30f4:	0f be       	out	0x3f, r0	; 63
    30f6:	0f 90       	pop	r0
    30f8:	1f 90       	pop	r1
    30fa:	18 95       	reti

000030fc <__vector_17>:
    30fc:	1f 92       	push	r1
    30fe:	0f 92       	push	r0
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	0f 92       	push	r0
    3104:	11 24       	eor	r1, r1
    3106:	2f 93       	push	r18
    3108:	3f 93       	push	r19
    310a:	4f 93       	push	r20
    310c:	5f 93       	push	r21
    310e:	6f 93       	push	r22
    3110:	7f 93       	push	r23
    3112:	8f 93       	push	r24
    3114:	9f 93       	push	r25
    3116:	af 93       	push	r26
    3118:	bf 93       	push	r27
    311a:	ef 93       	push	r30
    311c:	ff 93       	push	r31
    311e:	e0 91 5c 02 	lds	r30, 0x025C
    3122:	f0 91 5d 02 	lds	r31, 0x025D
    3126:	30 97       	sbiw	r30, 0x00	; 0
    3128:	09 f0       	breq	.+2      	; 0x312c <__vector_17+0x30>
    312a:	09 95       	icall
    312c:	ff 91       	pop	r31
    312e:	ef 91       	pop	r30
    3130:	bf 91       	pop	r27
    3132:	af 91       	pop	r26
    3134:	9f 91       	pop	r25
    3136:	8f 91       	pop	r24
    3138:	7f 91       	pop	r23
    313a:	6f 91       	pop	r22
    313c:	5f 91       	pop	r21
    313e:	4f 91       	pop	r20
    3140:	3f 91       	pop	r19
    3142:	2f 91       	pop	r18
    3144:	0f 90       	pop	r0
    3146:	0f be       	out	0x3f, r0	; 63
    3148:	0f 90       	pop	r0
    314a:	1f 90       	pop	r1
    314c:	18 95       	reti

0000314e <__vector_18>:
    314e:	1f 92       	push	r1
    3150:	0f 92       	push	r0
    3152:	0f b6       	in	r0, 0x3f	; 63
    3154:	0f 92       	push	r0
    3156:	11 24       	eor	r1, r1
    3158:	2f 93       	push	r18
    315a:	3f 93       	push	r19
    315c:	4f 93       	push	r20
    315e:	5f 93       	push	r21
    3160:	6f 93       	push	r22
    3162:	7f 93       	push	r23
    3164:	8f 93       	push	r24
    3166:	9f 93       	push	r25
    3168:	af 93       	push	r26
    316a:	bf 93       	push	r27
    316c:	ef 93       	push	r30
    316e:	ff 93       	push	r31
    3170:	e0 91 5e 02 	lds	r30, 0x025E
    3174:	f0 91 5f 02 	lds	r31, 0x025F
    3178:	30 97       	sbiw	r30, 0x00	; 0
    317a:	09 f0       	breq	.+2      	; 0x317e <__vector_18+0x30>
    317c:	09 95       	icall
    317e:	ff 91       	pop	r31
    3180:	ef 91       	pop	r30
    3182:	bf 91       	pop	r27
    3184:	af 91       	pop	r26
    3186:	9f 91       	pop	r25
    3188:	8f 91       	pop	r24
    318a:	7f 91       	pop	r23
    318c:	6f 91       	pop	r22
    318e:	5f 91       	pop	r21
    3190:	4f 91       	pop	r20
    3192:	3f 91       	pop	r19
    3194:	2f 91       	pop	r18
    3196:	0f 90       	pop	r0
    3198:	0f be       	out	0x3f, r0	; 63
    319a:	0f 90       	pop	r0
    319c:	1f 90       	pop	r1
    319e:	18 95       	reti

000031a0 <__vector_9>:
    31a0:	1f 92       	push	r1
    31a2:	0f 92       	push	r0
    31a4:	0f b6       	in	r0, 0x3f	; 63
    31a6:	0f 92       	push	r0
    31a8:	11 24       	eor	r1, r1
    31aa:	2f 93       	push	r18
    31ac:	3f 93       	push	r19
    31ae:	4f 93       	push	r20
    31b0:	5f 93       	push	r21
    31b2:	6f 93       	push	r22
    31b4:	7f 93       	push	r23
    31b6:	8f 93       	push	r24
    31b8:	9f 93       	push	r25
    31ba:	af 93       	push	r26
    31bc:	bf 93       	push	r27
    31be:	ef 93       	push	r30
    31c0:	ff 93       	push	r31
    31c2:	e0 91 4c 02 	lds	r30, 0x024C
    31c6:	f0 91 4d 02 	lds	r31, 0x024D
    31ca:	30 97       	sbiw	r30, 0x00	; 0
    31cc:	09 f0       	breq	.+2      	; 0x31d0 <__vector_9+0x30>
    31ce:	09 95       	icall
    31d0:	ff 91       	pop	r31
    31d2:	ef 91       	pop	r30
    31d4:	bf 91       	pop	r27
    31d6:	af 91       	pop	r26
    31d8:	9f 91       	pop	r25
    31da:	8f 91       	pop	r24
    31dc:	7f 91       	pop	r23
    31de:	6f 91       	pop	r22
    31e0:	5f 91       	pop	r21
    31e2:	4f 91       	pop	r20
    31e4:	3f 91       	pop	r19
    31e6:	2f 91       	pop	r18
    31e8:	0f 90       	pop	r0
    31ea:	0f be       	out	0x3f, r0	; 63
    31ec:	0f 90       	pop	r0
    31ee:	1f 90       	pop	r1
    31f0:	18 95       	reti

000031f2 <__vector_10>:
    31f2:	1f 92       	push	r1
    31f4:	0f 92       	push	r0
    31f6:	0f b6       	in	r0, 0x3f	; 63
    31f8:	0f 92       	push	r0
    31fa:	11 24       	eor	r1, r1
    31fc:	2f 93       	push	r18
    31fe:	3f 93       	push	r19
    3200:	4f 93       	push	r20
    3202:	5f 93       	push	r21
    3204:	6f 93       	push	r22
    3206:	7f 93       	push	r23
    3208:	8f 93       	push	r24
    320a:	9f 93       	push	r25
    320c:	af 93       	push	r26
    320e:	bf 93       	push	r27
    3210:	ef 93       	push	r30
    3212:	ff 93       	push	r31
    3214:	e0 91 4e 02 	lds	r30, 0x024E
    3218:	f0 91 4f 02 	lds	r31, 0x024F
    321c:	30 97       	sbiw	r30, 0x00	; 0
    321e:	09 f0       	breq	.+2      	; 0x3222 <__vector_10+0x30>
    3220:	09 95       	icall
    3222:	ff 91       	pop	r31
    3224:	ef 91       	pop	r30
    3226:	bf 91       	pop	r27
    3228:	af 91       	pop	r26
    322a:	9f 91       	pop	r25
    322c:	8f 91       	pop	r24
    322e:	7f 91       	pop	r23
    3230:	6f 91       	pop	r22
    3232:	5f 91       	pop	r21
    3234:	4f 91       	pop	r20
    3236:	3f 91       	pop	r19
    3238:	2f 91       	pop	r18
    323a:	0f 90       	pop	r0
    323c:	0f be       	out	0x3f, r0	; 63
    323e:	0f 90       	pop	r0
    3240:	1f 90       	pop	r1
    3242:	18 95       	reti

00003244 <__vector_11>:
    3244:	1f 92       	push	r1
    3246:	0f 92       	push	r0
    3248:	0f b6       	in	r0, 0x3f	; 63
    324a:	0f 92       	push	r0
    324c:	11 24       	eor	r1, r1
    324e:	2f 93       	push	r18
    3250:	3f 93       	push	r19
    3252:	4f 93       	push	r20
    3254:	5f 93       	push	r21
    3256:	6f 93       	push	r22
    3258:	7f 93       	push	r23
    325a:	8f 93       	push	r24
    325c:	9f 93       	push	r25
    325e:	af 93       	push	r26
    3260:	bf 93       	push	r27
    3262:	ef 93       	push	r30
    3264:	ff 93       	push	r31
    3266:	e0 91 50 02 	lds	r30, 0x0250
    326a:	f0 91 51 02 	lds	r31, 0x0251
    326e:	30 97       	sbiw	r30, 0x00	; 0
    3270:	09 f0       	breq	.+2      	; 0x3274 <__vector_11+0x30>
    3272:	09 95       	icall
    3274:	ff 91       	pop	r31
    3276:	ef 91       	pop	r30
    3278:	bf 91       	pop	r27
    327a:	af 91       	pop	r26
    327c:	9f 91       	pop	r25
    327e:	8f 91       	pop	r24
    3280:	7f 91       	pop	r23
    3282:	6f 91       	pop	r22
    3284:	5f 91       	pop	r21
    3286:	4f 91       	pop	r20
    3288:	3f 91       	pop	r19
    328a:	2f 91       	pop	r18
    328c:	0f 90       	pop	r0
    328e:	0f be       	out	0x3f, r0	; 63
    3290:	0f 90       	pop	r0
    3292:	1f 90       	pop	r1
    3294:	18 95       	reti

00003296 <__vector_13>:
    3296:	1f 92       	push	r1
    3298:	0f 92       	push	r0
    329a:	0f b6       	in	r0, 0x3f	; 63
    329c:	0f 92       	push	r0
    329e:	11 24       	eor	r1, r1
    32a0:	2f 93       	push	r18
    32a2:	3f 93       	push	r19
    32a4:	4f 93       	push	r20
    32a6:	5f 93       	push	r21
    32a8:	6f 93       	push	r22
    32aa:	7f 93       	push	r23
    32ac:	8f 93       	push	r24
    32ae:	9f 93       	push	r25
    32b0:	af 93       	push	r26
    32b2:	bf 93       	push	r27
    32b4:	ef 93       	push	r30
    32b6:	ff 93       	push	r31
    32b8:	e0 91 54 02 	lds	r30, 0x0254
    32bc:	f0 91 55 02 	lds	r31, 0x0255
    32c0:	30 97       	sbiw	r30, 0x00	; 0
    32c2:	09 f0       	breq	.+2      	; 0x32c6 <__vector_13+0x30>
    32c4:	09 95       	icall
    32c6:	ff 91       	pop	r31
    32c8:	ef 91       	pop	r30
    32ca:	bf 91       	pop	r27
    32cc:	af 91       	pop	r26
    32ce:	9f 91       	pop	r25
    32d0:	8f 91       	pop	r24
    32d2:	7f 91       	pop	r23
    32d4:	6f 91       	pop	r22
    32d6:	5f 91       	pop	r21
    32d8:	4f 91       	pop	r20
    32da:	3f 91       	pop	r19
    32dc:	2f 91       	pop	r18
    32de:	0f 90       	pop	r0
    32e0:	0f be       	out	0x3f, r0	; 63
    32e2:	0f 90       	pop	r0
    32e4:	1f 90       	pop	r1
    32e6:	18 95       	reti

000032e8 <__vector_14>:
    32e8:	1f 92       	push	r1
    32ea:	0f 92       	push	r0
    32ec:	0f b6       	in	r0, 0x3f	; 63
    32ee:	0f 92       	push	r0
    32f0:	11 24       	eor	r1, r1
    32f2:	2f 93       	push	r18
    32f4:	3f 93       	push	r19
    32f6:	4f 93       	push	r20
    32f8:	5f 93       	push	r21
    32fa:	6f 93       	push	r22
    32fc:	7f 93       	push	r23
    32fe:	8f 93       	push	r24
    3300:	9f 93       	push	r25
    3302:	af 93       	push	r26
    3304:	bf 93       	push	r27
    3306:	ef 93       	push	r30
    3308:	ff 93       	push	r31
    330a:	e0 91 56 02 	lds	r30, 0x0256
    330e:	f0 91 57 02 	lds	r31, 0x0257
    3312:	30 97       	sbiw	r30, 0x00	; 0
    3314:	09 f0       	breq	.+2      	; 0x3318 <__vector_14+0x30>
    3316:	09 95       	icall
    3318:	ff 91       	pop	r31
    331a:	ef 91       	pop	r30
    331c:	bf 91       	pop	r27
    331e:	af 91       	pop	r26
    3320:	9f 91       	pop	r25
    3322:	8f 91       	pop	r24
    3324:	7f 91       	pop	r23
    3326:	6f 91       	pop	r22
    3328:	5f 91       	pop	r21
    332a:	4f 91       	pop	r20
    332c:	3f 91       	pop	r19
    332e:	2f 91       	pop	r18
    3330:	0f 90       	pop	r0
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	0f 90       	pop	r0
    3336:	1f 90       	pop	r1
    3338:	18 95       	reti

0000333a <__vector_12>:
    333a:	1f 92       	push	r1
    333c:	0f 92       	push	r0
    333e:	0f b6       	in	r0, 0x3f	; 63
    3340:	0f 92       	push	r0
    3342:	11 24       	eor	r1, r1
    3344:	2f 93       	push	r18
    3346:	3f 93       	push	r19
    3348:	4f 93       	push	r20
    334a:	5f 93       	push	r21
    334c:	6f 93       	push	r22
    334e:	7f 93       	push	r23
    3350:	8f 93       	push	r24
    3352:	9f 93       	push	r25
    3354:	af 93       	push	r26
    3356:	bf 93       	push	r27
    3358:	ef 93       	push	r30
    335a:	ff 93       	push	r31
    335c:	e0 91 52 02 	lds	r30, 0x0252
    3360:	f0 91 53 02 	lds	r31, 0x0253
    3364:	30 97       	sbiw	r30, 0x00	; 0
    3366:	09 f0       	breq	.+2      	; 0x336a <__vector_12+0x30>
    3368:	09 95       	icall
    336a:	ff 91       	pop	r31
    336c:	ef 91       	pop	r30
    336e:	bf 91       	pop	r27
    3370:	af 91       	pop	r26
    3372:	9f 91       	pop	r25
    3374:	8f 91       	pop	r24
    3376:	7f 91       	pop	r23
    3378:	6f 91       	pop	r22
    337a:	5f 91       	pop	r21
    337c:	4f 91       	pop	r20
    337e:	3f 91       	pop	r19
    3380:	2f 91       	pop	r18
    3382:	0f 90       	pop	r0
    3384:	0f be       	out	0x3f, r0	; 63
    3386:	0f 90       	pop	r0
    3388:	1f 90       	pop	r1
    338a:	18 95       	reti

0000338c <__vector_15>:
    338c:	1f 92       	push	r1
    338e:	0f 92       	push	r0
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	0f 92       	push	r0
    3394:	11 24       	eor	r1, r1
    3396:	2f 93       	push	r18
    3398:	3f 93       	push	r19
    339a:	4f 93       	push	r20
    339c:	5f 93       	push	r21
    339e:	6f 93       	push	r22
    33a0:	7f 93       	push	r23
    33a2:	8f 93       	push	r24
    33a4:	9f 93       	push	r25
    33a6:	af 93       	push	r26
    33a8:	bf 93       	push	r27
    33aa:	ef 93       	push	r30
    33ac:	ff 93       	push	r31
    33ae:	e0 91 58 02 	lds	r30, 0x0258
    33b2:	f0 91 59 02 	lds	r31, 0x0259
    33b6:	30 97       	sbiw	r30, 0x00	; 0
    33b8:	09 f0       	breq	.+2      	; 0x33bc <__vector_15+0x30>
    33ba:	09 95       	icall
    33bc:	ff 91       	pop	r31
    33be:	ef 91       	pop	r30
    33c0:	bf 91       	pop	r27
    33c2:	af 91       	pop	r26
    33c4:	9f 91       	pop	r25
    33c6:	8f 91       	pop	r24
    33c8:	7f 91       	pop	r23
    33ca:	6f 91       	pop	r22
    33cc:	5f 91       	pop	r21
    33ce:	4f 91       	pop	r20
    33d0:	3f 91       	pop	r19
    33d2:	2f 91       	pop	r18
    33d4:	0f 90       	pop	r0
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	0f 90       	pop	r0
    33da:	1f 90       	pop	r1
    33dc:	18 95       	reti

000033de <__vector_4>:
    33de:	1f 92       	push	r1
    33e0:	0f 92       	push	r0
    33e2:	0f b6       	in	r0, 0x3f	; 63
    33e4:	0f 92       	push	r0
    33e6:	11 24       	eor	r1, r1
    33e8:	2f 93       	push	r18
    33ea:	3f 93       	push	r19
    33ec:	4f 93       	push	r20
    33ee:	5f 93       	push	r21
    33f0:	6f 93       	push	r22
    33f2:	7f 93       	push	r23
    33f4:	8f 93       	push	r24
    33f6:	9f 93       	push	r25
    33f8:	af 93       	push	r26
    33fa:	bf 93       	push	r27
    33fc:	ef 93       	push	r30
    33fe:	ff 93       	push	r31
    3400:	e0 91 42 02 	lds	r30, 0x0242
    3404:	f0 91 43 02 	lds	r31, 0x0243
    3408:	30 97       	sbiw	r30, 0x00	; 0
    340a:	09 f0       	breq	.+2      	; 0x340e <__vector_4+0x30>
    340c:	09 95       	icall
    340e:	ff 91       	pop	r31
    3410:	ef 91       	pop	r30
    3412:	bf 91       	pop	r27
    3414:	af 91       	pop	r26
    3416:	9f 91       	pop	r25
    3418:	8f 91       	pop	r24
    341a:	7f 91       	pop	r23
    341c:	6f 91       	pop	r22
    341e:	5f 91       	pop	r21
    3420:	4f 91       	pop	r20
    3422:	3f 91       	pop	r19
    3424:	2f 91       	pop	r18
    3426:	0f 90       	pop	r0
    3428:	0f be       	out	0x3f, r0	; 63
    342a:	0f 90       	pop	r0
    342c:	1f 90       	pop	r1
    342e:	18 95       	reti

00003430 <__vector_5>:
    3430:	1f 92       	push	r1
    3432:	0f 92       	push	r0
    3434:	0f b6       	in	r0, 0x3f	; 63
    3436:	0f 92       	push	r0
    3438:	11 24       	eor	r1, r1
    343a:	2f 93       	push	r18
    343c:	3f 93       	push	r19
    343e:	4f 93       	push	r20
    3440:	5f 93       	push	r21
    3442:	6f 93       	push	r22
    3444:	7f 93       	push	r23
    3446:	8f 93       	push	r24
    3448:	9f 93       	push	r25
    344a:	af 93       	push	r26
    344c:	bf 93       	push	r27
    344e:	ef 93       	push	r30
    3450:	ff 93       	push	r31
    3452:	e0 91 44 02 	lds	r30, 0x0244
    3456:	f0 91 45 02 	lds	r31, 0x0245
    345a:	30 97       	sbiw	r30, 0x00	; 0
    345c:	09 f0       	breq	.+2      	; 0x3460 <__vector_5+0x30>
    345e:	09 95       	icall
    3460:	ff 91       	pop	r31
    3462:	ef 91       	pop	r30
    3464:	bf 91       	pop	r27
    3466:	af 91       	pop	r26
    3468:	9f 91       	pop	r25
    346a:	8f 91       	pop	r24
    346c:	7f 91       	pop	r23
    346e:	6f 91       	pop	r22
    3470:	5f 91       	pop	r21
    3472:	4f 91       	pop	r20
    3474:	3f 91       	pop	r19
    3476:	2f 91       	pop	r18
    3478:	0f 90       	pop	r0
    347a:	0f be       	out	0x3f, r0	; 63
    347c:	0f 90       	pop	r0
    347e:	1f 90       	pop	r1
    3480:	18 95       	reti

00003482 <__vector_6>:
    3482:	1f 92       	push	r1
    3484:	0f 92       	push	r0
    3486:	0f b6       	in	r0, 0x3f	; 63
    3488:	0f 92       	push	r0
    348a:	11 24       	eor	r1, r1
    348c:	2f 93       	push	r18
    348e:	3f 93       	push	r19
    3490:	4f 93       	push	r20
    3492:	5f 93       	push	r21
    3494:	6f 93       	push	r22
    3496:	7f 93       	push	r23
    3498:	8f 93       	push	r24
    349a:	9f 93       	push	r25
    349c:	af 93       	push	r26
    349e:	bf 93       	push	r27
    34a0:	ef 93       	push	r30
    34a2:	ff 93       	push	r31
    34a4:	e0 91 46 02 	lds	r30, 0x0246
    34a8:	f0 91 47 02 	lds	r31, 0x0247
    34ac:	30 97       	sbiw	r30, 0x00	; 0
    34ae:	09 f0       	breq	.+2      	; 0x34b2 <__vector_6+0x30>
    34b0:	09 95       	icall
    34b2:	ff 91       	pop	r31
    34b4:	ef 91       	pop	r30
    34b6:	bf 91       	pop	r27
    34b8:	af 91       	pop	r26
    34ba:	9f 91       	pop	r25
    34bc:	8f 91       	pop	r24
    34be:	7f 91       	pop	r23
    34c0:	6f 91       	pop	r22
    34c2:	5f 91       	pop	r21
    34c4:	4f 91       	pop	r20
    34c6:	3f 91       	pop	r19
    34c8:	2f 91       	pop	r18
    34ca:	0f 90       	pop	r0
    34cc:	0f be       	out	0x3f, r0	; 63
    34ce:	0f 90       	pop	r0
    34d0:	1f 90       	pop	r1
    34d2:	18 95       	reti

000034d4 <__vector_7>:
    34d4:	1f 92       	push	r1
    34d6:	0f 92       	push	r0
    34d8:	0f b6       	in	r0, 0x3f	; 63
    34da:	0f 92       	push	r0
    34dc:	11 24       	eor	r1, r1
    34de:	2f 93       	push	r18
    34e0:	3f 93       	push	r19
    34e2:	4f 93       	push	r20
    34e4:	5f 93       	push	r21
    34e6:	6f 93       	push	r22
    34e8:	7f 93       	push	r23
    34ea:	8f 93       	push	r24
    34ec:	9f 93       	push	r25
    34ee:	af 93       	push	r26
    34f0:	bf 93       	push	r27
    34f2:	ef 93       	push	r30
    34f4:	ff 93       	push	r31
    34f6:	e0 91 48 02 	lds	r30, 0x0248
    34fa:	f0 91 49 02 	lds	r31, 0x0249
    34fe:	30 97       	sbiw	r30, 0x00	; 0
    3500:	09 f0       	breq	.+2      	; 0x3504 <__vector_7+0x30>
    3502:	09 95       	icall
    3504:	ff 91       	pop	r31
    3506:	ef 91       	pop	r30
    3508:	bf 91       	pop	r27
    350a:	af 91       	pop	r26
    350c:	9f 91       	pop	r25
    350e:	8f 91       	pop	r24
    3510:	7f 91       	pop	r23
    3512:	6f 91       	pop	r22
    3514:	5f 91       	pop	r21
    3516:	4f 91       	pop	r20
    3518:	3f 91       	pop	r19
    351a:	2f 91       	pop	r18
    351c:	0f 90       	pop	r0
    351e:	0f be       	out	0x3f, r0	; 63
    3520:	0f 90       	pop	r0
    3522:	1f 90       	pop	r1
    3524:	18 95       	reti

00003526 <ISR_attach>:
    3526:	e8 2f       	mov	r30, r24
    3528:	80 32       	cpi	r24, 0x20	; 32
    352a:	68 f4       	brcc	.+26     	; 0x3546 <ISR_attach+0x20>
    352c:	80 51       	subi	r24, 0x10	; 16
    352e:	83 30       	cpi	r24, 0x03	; 3
    3530:	50 f0       	brcs	.+20     	; 0x3546 <ISR_attach+0x20>
    3532:	f0 e0       	ldi	r31, 0x00	; 0
    3534:	ee 0f       	add	r30, r30
    3536:	ff 1f       	adc	r31, r31
    3538:	e6 5c       	subi	r30, 0xC6	; 198
    353a:	fd 4f       	sbci	r31, 0xFD	; 253
    353c:	20 81       	ld	r18, Z
    353e:	31 81       	ldd	r19, Z+1	; 0x01
    3540:	71 83       	std	Z+1, r23	; 0x01
    3542:	60 83       	st	Z, r22
    3544:	02 c0       	rjmp	.+4      	; 0x354a <ISR_attach+0x24>
    3546:	20 e0       	ldi	r18, 0x00	; 0
    3548:	30 e0       	ldi	r19, 0x00	; 0
    354a:	c9 01       	movw	r24, r18
    354c:	08 95       	ret

0000354e <ISR_open>:
    354e:	80 e1       	ldi	r24, 0x10	; 16
    3550:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    3554:	88 23       	and	r24, r24
    3556:	61 f4       	brne	.+24     	; 0x3570 <ISR_open+0x22>
    3558:	ea e3       	ldi	r30, 0x3A	; 58
    355a:	f2 e0       	ldi	r31, 0x02	; 2
    355c:	11 92       	st	Z+, r1
    355e:	11 92       	st	Z+, r1
    3560:	82 e0       	ldi	r24, 0x02	; 2
    3562:	ea 37       	cpi	r30, 0x7A	; 122
    3564:	f8 07       	cpc	r31, r24
    3566:	d1 f7       	brne	.-12     	; 0x355c <ISR_open+0xe>
    3568:	80 e1       	ldi	r24, 0x10	; 16
    356a:	61 e0       	ldi	r22, 0x01	; 1
    356c:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    3570:	80 e1       	ldi	r24, 0x10	; 16
    3572:	91 e0       	ldi	r25, 0x01	; 1
    3574:	08 95       	ret

00003576 <__LCD_init>:
    3576:	23 9a       	sbi	0x04, 3	; 4
    3578:	08 95       	ret

0000357a <__LCD_putchar>:
    357a:	ff 92       	push	r15
    357c:	0f 93       	push	r16
    357e:	1f 93       	push	r17
    3580:	cf 93       	push	r28
    3582:	df 93       	push	r29
    3584:	f8 2e       	mov	r15, r24
    3586:	8a e0       	ldi	r24, 0x0A	; 10
    3588:	f8 16       	cp	r15, r24
    358a:	b1 f0       	breq	.+44     	; 0x35b8 <__LCD_putchar+0x3e>
    358c:	8f 15       	cp	r24, r15
    358e:	48 f0       	brcs	.+18     	; 0x35a2 <__LCD_putchar+0x28>
    3590:	e8 e0       	ldi	r30, 0x08	; 8
    3592:	fe 16       	cp	r15, r30
    3594:	b9 f1       	breq	.+110    	; 0x3604 <__LCD_putchar+0x8a>
    3596:	ef 15       	cp	r30, r15
    3598:	38 f1       	brcs	.+78     	; 0x35e8 <__LCD_putchar+0x6e>
    359a:	f7 e0       	ldi	r31, 0x07	; 7
    359c:	ff 16       	cp	r15, r31
    359e:	51 f4       	brne	.+20     	; 0x35b4 <__LCD_putchar+0x3a>
    35a0:	3b c0       	rjmp	.+118    	; 0x3618 <__LCD_putchar+0x9e>
    35a2:	8d e0       	ldi	r24, 0x0D	; 13
    35a4:	f8 16       	cp	r15, r24
    35a6:	59 f0       	breq	.+22     	; 0x35be <__LCD_putchar+0x44>
    35a8:	eb e1       	ldi	r30, 0x1B	; 27
    35aa:	fe 16       	cp	r15, r30
    35ac:	89 f0       	breq	.+34     	; 0x35d0 <__LCD_putchar+0x56>
    35ae:	fc e0       	ldi	r31, 0x0C	; 12
    35b0:	ff 16       	cp	r15, r31
    35b2:	41 f0       	breq	.+16     	; 0x35c4 <__LCD_putchar+0x4a>
    35b4:	01 e0       	ldi	r16, 0x01	; 1
    35b6:	41 c0       	rjmp	.+130    	; 0x363a <__LCD_putchar+0xc0>
    35b8:	10 92 de 04 	sts	0x04DE, r1
    35bc:	03 c0       	rjmp	.+6      	; 0x35c4 <__LCD_putchar+0x4a>
    35be:	10 92 de 04 	sts	0x04DE, r1
    35c2:	3a c0       	rjmp	.+116    	; 0x3638 <__LCD_putchar+0xbe>
    35c4:	80 91 df 04 	lds	r24, 0x04DF
    35c8:	81 50       	subi	r24, 0x01	; 1
    35ca:	80 93 df 04 	sts	0x04DF, r24
    35ce:	34 c0       	rjmp	.+104    	; 0x3638 <__LCD_putchar+0xbe>
    35d0:	0e 94 6d 10 	call	0x20da	; 0x20da <LCD_clear>
    35d4:	14 c0       	rjmp	.+40     	; 0x35fe <__LCD_putchar+0x84>
    35d6:	80 e0       	ldi	r24, 0x00	; 0
    35d8:	61 e0       	ldi	r22, 0x01	; 1
    35da:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    35de:	80 91 de 04 	lds	r24, 0x04DE
    35e2:	8f 5f       	subi	r24, 0xFF	; 255
    35e4:	80 93 de 04 	sts	0x04DE, r24
    35e8:	80 91 de 04 	lds	r24, 0x04DE
    35ec:	87 ff       	sbrs	r24, 7
    35ee:	f3 cf       	rjmp	.-26     	; 0x35d6 <__LCD_putchar+0x5c>
    35f0:	10 92 de 04 	sts	0x04DE, r1
    35f4:	80 91 df 04 	lds	r24, 0x04DF
    35f8:	81 50       	subi	r24, 0x01	; 1
    35fa:	80 93 df 04 	sts	0x04DF, r24
    35fe:	00 e0       	ldi	r16, 0x00	; 0
    3600:	11 e0       	ldi	r17, 0x01	; 1
    3602:	1c c0       	rjmp	.+56     	; 0x363c <__LCD_putchar+0xc2>
    3604:	80 91 de 04 	lds	r24, 0x04DE
    3608:	88 23       	and	r24, r24
    360a:	b1 f0       	breq	.+44     	; 0x3638 <__LCD_putchar+0xbe>
    360c:	80 91 de 04 	lds	r24, 0x04DE
    3610:	86 50       	subi	r24, 0x06	; 6
    3612:	80 93 de 04 	sts	0x04DE, r24
    3616:	10 c0       	rjmp	.+32     	; 0x3638 <__LCD_putchar+0xbe>
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	0e 94 79 12 	call	0x24f2	; 0x24f2 <SPKR_open>
    361e:	64 ef       	ldi	r22, 0xF4	; 244
    3620:	71 e0       	ldi	r23, 0x01	; 1
    3622:	80 e0       	ldi	r24, 0x00	; 0
    3624:	90 e0       	ldi	r25, 0x00	; 0
    3626:	4d e7       	ldi	r20, 0x7D	; 125
    3628:	50 e0       	ldi	r21, 0x00	; 0
    362a:	24 e6       	ldi	r18, 0x64	; 100
    362c:	30 e0       	ldi	r19, 0x00	; 0
    362e:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <SPKR_play_beep>
    3632:	81 e0       	ldi	r24, 0x01	; 1
    3634:	0e 94 a3 1c 	call	0x3946	; 0x3946 <SPKR_close>
    3638:	00 e0       	ldi	r16, 0x00	; 0
    363a:	10 e0       	ldi	r17, 0x00	; 0
    363c:	80 91 df 04 	lds	r24, 0x04DF
    3640:	60 91 de 04 	lds	r22, 0x04DE
    3644:	0e 94 33 11 	call	0x2266	; 0x2266 <LCD_set_PGC_addr>
    3648:	00 23       	and	r16, r16
    364a:	51 f1       	breq	.+84     	; 0x36a0 <__LCD_putchar+0x126>
    364c:	85 e0       	ldi	r24, 0x05	; 5
    364e:	f8 9e       	mul	r15, r24
    3650:	c0 01       	movw	r24, r0
    3652:	11 24       	eor	r1, r1
    3654:	ec 01       	movw	r28, r24
    3656:	c3 55       	subi	r28, 0x53	; 83
    3658:	df 4f       	sbci	r29, 0xFF	; 255
    365a:	8c 01       	movw	r16, r24
    365c:	0e 54       	subi	r16, 0x4E	; 78
    365e:	1f 4f       	sbci	r17, 0xFF	; 255
    3660:	fe 01       	movw	r30, r28
    3662:	84 91       	lpm	r24, Z+
    3664:	61 e0       	ldi	r22, 0x01	; 1
    3666:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    366a:	21 96       	adiw	r28, 0x01	; 1
    366c:	c0 17       	cp	r28, r16
    366e:	d1 07       	cpc	r29, r17
    3670:	b9 f7       	brne	.-18     	; 0x3660 <__LCD_putchar+0xe6>
    3672:	80 e0       	ldi	r24, 0x00	; 0
    3674:	61 e0       	ldi	r22, 0x01	; 1
    3676:	0e 94 4c 11 	call	0x2298	; 0x2298 <LCD_write>
    367a:	80 91 de 04 	lds	r24, 0x04DE
    367e:	8a 5f       	subi	r24, 0xFA	; 250
    3680:	80 93 de 04 	sts	0x04DE, r24
    3684:	80 91 de 04 	lds	r24, 0x04DE
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	8c 37       	cpi	r24, 0x7C	; 124
    368c:	91 05       	cpc	r25, r1
    368e:	3c f0       	brlt	.+14     	; 0x369e <__LCD_putchar+0x124>
    3690:	10 92 de 04 	sts	0x04DE, r1
    3694:	80 91 df 04 	lds	r24, 0x04DF
    3698:	81 50       	subi	r24, 0x01	; 1
    369a:	80 93 df 04 	sts	0x04DF, r24
    369e:	11 e0       	ldi	r17, 0x01	; 1
    36a0:	80 91 df 04 	lds	r24, 0x04DF
    36a4:	83 70       	andi	r24, 0x03	; 3
    36a6:	80 93 df 04 	sts	0x04DF, r24
    36aa:	11 30       	cpi	r17, 0x01	; 1
    36ac:	59 f4       	brne	.+22     	; 0x36c4 <__LCD_putchar+0x14a>
    36ae:	80 91 e0 04 	lds	r24, 0x04E0
    36b2:	81 30       	cpi	r24, 0x01	; 1
    36b4:	39 f4       	brne	.+14     	; 0x36c4 <__LCD_putchar+0x14a>
    36b6:	e0 91 e1 04 	lds	r30, 0x04E1
    36ba:	f0 91 e2 04 	lds	r31, 0x04E2
    36be:	30 97       	sbiw	r30, 0x00	; 0
    36c0:	09 f0       	breq	.+2      	; 0x36c4 <__LCD_putchar+0x14a>
    36c2:	09 95       	icall
    36c4:	80 e0       	ldi	r24, 0x00	; 0
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	ff 90       	pop	r15
    36d2:	08 95       	ret

000036d4 <__LED_clr_pattern>:
    36d4:	85 fd       	sbrc	r24, 5
    36d6:	5d 98       	cbi	0x0b, 5	; 11
    36d8:	86 fd       	sbrc	r24, 6
    36da:	5e 98       	cbi	0x0b, 6	; 11
    36dc:	08 95       	ret

000036de <__LED_init>:
    36de:	55 9a       	sbi	0x0a, 5	; 10
    36e0:	56 9a       	sbi	0x0a, 6	; 10
    36e2:	08 95       	ret

000036e4 <__LED_set_pattern>:
    36e4:	85 fd       	sbrc	r24, 5
    36e6:	5d 9a       	sbi	0x0b, 5	; 11
    36e8:	86 fd       	sbrc	r24, 6
    36ea:	5e 9a       	sbi	0x0b, 6	; 11
    36ec:	08 95       	ret

000036ee <ATMEGA_open>:
    36ee:	80 e0       	ldi	r24, 0x00	; 0
    36f0:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    36f4:	88 23       	and	r24, r24
    36f6:	51 f4       	brne	.+20     	; 0x370c <ATMEGA_open+0x1e>
    36f8:	f8 94       	cli
    36fa:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <__ATMEGA_init>
    36fe:	81 e0       	ldi	r24, 0x01	; 1
    3700:	0e 94 89 1b 	call	0x3712	; 0x3712 <ATMEGA_set_clk_mode>
    3704:	80 e0       	ldi	r24, 0x00	; 0
    3706:	61 e0       	ldi	r22, 0x01	; 1
    3708:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    370c:	80 e0       	ldi	r24, 0x00	; 0
    370e:	91 e0       	ldi	r25, 0x01	; 1
    3710:	08 95       	ret

00003712 <ATMEGA_set_clk_mode>:
    3712:	81 30       	cpi	r24, 0x01	; 1
    3714:	49 f0       	breq	.+18     	; 0x3728 <ATMEGA_set_clk_mode+0x16>
    3716:	f8 94       	cli
    3718:	81 30       	cpi	r24, 0x01	; 1
    371a:	20 f1       	brcs	.+72     	; 0x3764 <ATMEGA_set_clk_mode+0x52>
    371c:	82 30       	cpi	r24, 0x02	; 2
    371e:	b1 f0       	breq	.+44     	; 0x374c <ATMEGA_set_clk_mode+0x3a>
    3720:	83 30       	cpi	r24, 0x03	; 3
    3722:	09 f0       	breq	.+2      	; 0x3726 <ATMEGA_set_clk_mode+0x14>
    3724:	45 c0       	rjmp	.+138    	; 0x37b0 <ATMEGA_set_clk_mode+0x9e>
    3726:	17 c0       	rjmp	.+46     	; 0x3756 <ATMEGA_set_clk_mode+0x44>
    3728:	2c 9a       	sbi	0x05, 4	; 5
    372a:	80 e8       	ldi	r24, 0x80	; 128
    372c:	80 93 61 00 	sts	0x0061, r24
    3730:	10 92 61 00 	sts	0x0061, r1
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	90 e0       	ldi	r25, 0x00	; 0
    3738:	00 00       	nop
    373a:	01 96       	adiw	r24, 0x01	; 1
    373c:	88 32       	cpi	r24, 0x28	; 40
    373e:	91 05       	cpc	r25, r1
    3740:	d9 f7       	brne	.-10     	; 0x3738 <ATMEGA_set_clk_mode+0x26>
    3742:	10 92 68 00 	sts	0x0068, r1
    3746:	10 92 6b 00 	sts	0x006B, r1
    374a:	08 95       	ret
    374c:	80 e8       	ldi	r24, 0x80	; 128
    374e:	80 93 61 00 	sts	0x0061, r24
    3752:	83 e0       	ldi	r24, 0x03	; 3
    3754:	04 c0       	rjmp	.+8      	; 0x375e <ATMEGA_set_clk_mode+0x4c>
    3756:	80 e8       	ldi	r24, 0x80	; 128
    3758:	80 93 61 00 	sts	0x0061, r24
    375c:	88 e0       	ldi	r24, 0x08	; 8
    375e:	80 93 61 00 	sts	0x0061, r24
    3762:	28 c0       	rjmp	.+80     	; 0x37b4 <ATMEGA_set_clk_mode+0xa2>
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	00 00       	nop
    376a:	01 96       	adiw	r24, 0x01	; 1
    376c:	2d e6       	ldi	r18, 0x6D	; 109
    376e:	80 36       	cpi	r24, 0x60	; 96
    3770:	92 07       	cpc	r25, r18
    3772:	d1 f7       	brne	.-12     	; 0x3768 <ATMEGA_set_clk_mode+0x56>
    3774:	2c 98       	cbi	0x05, 4	; 5
    3776:	80 e0       	ldi	r24, 0x00	; 0
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	00 00       	nop
    377c:	01 96       	adiw	r24, 0x01	; 1
    377e:	2d e6       	ldi	r18, 0x6D	; 109
    3780:	80 36       	cpi	r24, 0x60	; 96
    3782:	92 07       	cpc	r25, r18
    3784:	d1 f7       	brne	.-12     	; 0x377a <ATMEGA_set_clk_mode+0x68>
    3786:	10 92 7a 00 	sts	0x007A, r1
    378a:	8f ef       	ldi	r24, 0xFF	; 255
    378c:	80 93 64 00 	sts	0x0064, r24
    3790:	80 91 68 00 	lds	r24, 0x0068
    3794:	81 60       	ori	r24, 0x01	; 1
    3796:	80 93 68 00 	sts	0x0068, r24
    379a:	80 91 6b 00 	lds	r24, 0x006B
    379e:	84 60       	ori	r24, 0x04	; 4
    37a0:	80 93 6b 00 	sts	0x006B, r24
    37a4:	78 94       	sei
    37a6:	83 b7       	in	r24, 0x33	; 51
    37a8:	81 60       	ori	r24, 0x01	; 1
    37aa:	83 bf       	out	0x33, r24	; 51
    37ac:	88 95       	sleep
    37ae:	08 95       	ret
    37b0:	82 30       	cpi	r24, 0x02	; 2
    37b2:	08 f0       	brcs	.+2      	; 0x37b6 <ATMEGA_set_clk_mode+0xa4>
    37b4:	78 94       	sei
    37b6:	08 95       	ret

000037b8 <SPI_open>:
    37b8:	0f 93       	push	r16
    37ba:	1f 93       	push	r17
    37bc:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__SPI_init>
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	64 ea       	ldi	r22, 0xA4	; 164
    37c4:	7e e1       	ldi	r23, 0x1E	; 30
    37c6:	0e 94 27 1c 	call	0x384e	; 0x384e <SPI_set_config_func>
    37ca:	81 e0       	ldi	r24, 0x01	; 1
    37cc:	6c e9       	ldi	r22, 0x9C	; 156
    37ce:	7e e1       	ldi	r23, 0x1E	; 30
    37d0:	0e 94 27 1c 	call	0x384e	; 0x384e <SPI_set_config_func>
    37d4:	82 e0       	ldi	r24, 0x02	; 2
    37d6:	64 e9       	ldi	r22, 0x94	; 148
    37d8:	7e e1       	ldi	r23, 0x1E	; 30
    37da:	0e 94 27 1c 	call	0x384e	; 0x384e <SPI_set_config_func>
    37de:	86 e0       	ldi	r24, 0x06	; 6
    37e0:	6c ea       	ldi	r22, 0xAC	; 172
    37e2:	7e e1       	ldi	r23, 0x1E	; 30
    37e4:	0e 94 27 1c 	call	0x384e	; 0x384e <SPI_set_config_func>
    37e8:	0c e8       	ldi	r16, 0x8C	; 140
    37ea:	1e e1       	ldi	r17, 0x1E	; 30
    37ec:	83 e0       	ldi	r24, 0x03	; 3
    37ee:	b8 01       	movw	r22, r16
    37f0:	0e 94 27 1c 	call	0x384e	; 0x384e <SPI_set_config_func>
    37f4:	84 e0       	ldi	r24, 0x04	; 4
    37f6:	b8 01       	movw	r22, r16
    37f8:	0e 94 27 1c 	call	0x384e	; 0x384e <SPI_set_config_func>
    37fc:	85 e0       	ldi	r24, 0x05	; 5
    37fe:	b8 01       	movw	r22, r16
    3800:	0e 94 27 1c 	call	0x384e	; 0x384e <SPI_set_config_func>
    3804:	87 e0       	ldi	r24, 0x07	; 7
    3806:	b8 01       	movw	r22, r16
    3808:	0e 94 27 1c 	call	0x384e	; 0x384e <SPI_set_config_func>
    380c:	82 e0       	ldi	r24, 0x02	; 2
    380e:	61 e0       	ldi	r22, 0x01	; 1
    3810:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    3814:	8f ef       	ldi	r24, 0xFF	; 255
    3816:	80 93 e3 04 	sts	0x04E3, r24
    381a:	87 e0       	ldi	r24, 0x07	; 7
    381c:	0e 94 88 11 	call	0x2310	; 0x2310 <SPI_set_slave_addr>
    3820:	82 e0       	ldi	r24, 0x02	; 2
    3822:	91 e0       	ldi	r25, 0x01	; 1
    3824:	1f 91       	pop	r17
    3826:	0f 91       	pop	r16
    3828:	08 95       	ret

0000382a <SPI_receive>:
    382a:	1f 93       	push	r17
    382c:	16 2f       	mov	r17, r22
    382e:	0e 94 88 11 	call	0x2310	; 0x2310 <SPI_set_slave_addr>
    3832:	82 e0       	ldi	r24, 0x02	; 2
    3834:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    3838:	81 30       	cpi	r24, 0x01	; 1
    383a:	11 f0       	breq	.+4      	; 0x3840 <SPI_receive+0x16>
    383c:	80 e0       	ldi	r24, 0x00	; 0
    383e:	05 c0       	rjmp	.+10     	; 0x384a <SPI_receive+0x20>
    3840:	1e bd       	out	0x2e, r17	; 46
    3842:	0d b4       	in	r0, 0x2d	; 45
    3844:	07 fe       	sbrs	r0, 7
    3846:	fd cf       	rjmp	.-6      	; 0x3842 <SPI_receive+0x18>
    3848:	8e b5       	in	r24, 0x2e	; 46
    384a:	1f 91       	pop	r17
    384c:	08 95       	ret

0000384e <SPI_set_config_func>:
    384e:	e8 2f       	mov	r30, r24
    3850:	f0 e0       	ldi	r31, 0x00	; 0
    3852:	ee 0f       	add	r30, r30
    3854:	ff 1f       	adc	r31, r31
    3856:	e6 58       	subi	r30, 0x86	; 134
    3858:	fd 4f       	sbci	r31, 0xFD	; 253
    385a:	71 83       	std	Z+1, r23	; 0x01
    385c:	60 83       	st	Z, r22
    385e:	08 95       	ret

00003860 <__SPKR_TIMER1_COMPA_vect>:
    3860:	0e 94 33 1c 	call	0x3866	; 0x3866 <SPKR_clk>
    3864:	08 95       	ret

00003866 <SPKR_clk>:
    3866:	80 91 8c 02 	lds	r24, 0x028C
    386a:	90 91 8d 02 	lds	r25, 0x028D
    386e:	a0 91 8e 02 	lds	r26, 0x028E
    3872:	b0 91 8f 02 	lds	r27, 0x028F
    3876:	20 91 90 02 	lds	r18, 0x0290
    387a:	30 91 91 02 	lds	r19, 0x0291
    387e:	40 91 92 02 	lds	r20, 0x0292
    3882:	50 91 93 02 	lds	r21, 0x0293
    3886:	28 0f       	add	r18, r24
    3888:	39 1f       	adc	r19, r25
    388a:	4a 1f       	adc	r20, r26
    388c:	5b 1f       	adc	r21, r27
    388e:	20 93 8c 02 	sts	0x028C, r18
    3892:	30 93 8d 02 	sts	0x028D, r19
    3896:	40 93 8e 02 	sts	0x028E, r20
    389a:	50 93 8f 02 	sts	0x028F, r21
    389e:	80 91 8c 02 	lds	r24, 0x028C
    38a2:	90 91 8d 02 	lds	r25, 0x028D
    38a6:	a0 91 8e 02 	lds	r26, 0x028E
    38aa:	b0 91 8f 02 	lds	r27, 0x028F
    38ae:	88 51       	subi	r24, 0x18	; 24
    38b0:	96 4f       	sbci	r25, 0xF6	; 246
    38b2:	a0 40       	sbci	r26, 0x00	; 0
    38b4:	b0 40       	sbci	r27, 0x00	; 0
    38b6:	bc f0       	brlt	.+46     	; 0x38e6 <SPKR_clk+0x80>
    38b8:	8b b1       	in	r24, 0x0b	; 11
    38ba:	80 58       	subi	r24, 0x80	; 128
    38bc:	8b b9       	out	0x0b, r24	; 11
    38be:	80 91 8c 02 	lds	r24, 0x028C
    38c2:	90 91 8d 02 	lds	r25, 0x028D
    38c6:	a0 91 8e 02 	lds	r26, 0x028E
    38ca:	b0 91 8f 02 	lds	r27, 0x028F
    38ce:	88 51       	subi	r24, 0x18	; 24
    38d0:	96 4f       	sbci	r25, 0xF6	; 246
    38d2:	a0 40       	sbci	r26, 0x00	; 0
    38d4:	b0 40       	sbci	r27, 0x00	; 0
    38d6:	80 93 8c 02 	sts	0x028C, r24
    38da:	90 93 8d 02 	sts	0x028D, r25
    38de:	a0 93 8e 02 	sts	0x028E, r26
    38e2:	b0 93 8f 02 	sts	0x028F, r27
    38e6:	08 95       	ret

000038e8 <__SPKR_close_beep_mode>:
    38e8:	8a e0       	ldi	r24, 0x0A	; 10
    38ea:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    38ee:	81 30       	cpi	r24, 0x01	; 1
    38f0:	41 f4       	brne	.+16     	; 0x3902 <__SPKR_close_beep_mode+0x1a>
    38f2:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__SPKR_close>
    38f6:	10 92 8b 02 	sts	0x028B, r1
    38fa:	8a e0       	ldi	r24, 0x0A	; 10
    38fc:	60 e0       	ldi	r22, 0x00	; 0
    38fe:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    3902:	08 95       	ret

00003904 <__SPKR_close_tone_mode>:
    3904:	89 e0       	ldi	r24, 0x09	; 9
    3906:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    390a:	81 30       	cpi	r24, 0x01	; 1
    390c:	d9 f4       	brne	.+54     	; 0x3944 <__SPKR_close_tone_mode+0x40>
    390e:	80 91 8a 02 	lds	r24, 0x028A
    3912:	88 23       	and	r24, r24
    3914:	11 f0       	breq	.+4      	; 0x391a <__SPKR_close_tone_mode+0x16>
    3916:	0e 94 24 1d 	call	0x3a48	; 0x3a48 <__SPKR_stop>
    391a:	82 e0       	ldi	r24, 0x02	; 2
    391c:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <__SPKR_close>
    3920:	80 91 98 02 	lds	r24, 0x0298
    3924:	90 91 99 02 	lds	r25, 0x0299
    3928:	00 97       	sbiw	r24, 0x00	; 0
    392a:	31 f0       	breq	.+12     	; 0x3938 <__SPKR_close_tone_mode+0x34>
    392c:	0e 94 92 2b 	call	0x5724	; 0x5724 <free>
    3930:	10 92 99 02 	sts	0x0299, r1
    3934:	10 92 98 02 	sts	0x0298, r1
    3938:	10 92 8a 02 	sts	0x028A, r1
    393c:	89 e0       	ldi	r24, 0x09	; 9
    393e:	60 e0       	ldi	r22, 0x00	; 0
    3940:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    3944:	08 95       	ret

00003946 <SPKR_close>:
    3946:	81 30       	cpi	r24, 0x01	; 1
    3948:	29 f0       	breq	.+10     	; 0x3954 <SPKR_close+0xe>
    394a:	82 30       	cpi	r24, 0x02	; 2
    394c:	29 f4       	brne	.+10     	; 0x3958 <SPKR_close+0x12>
    394e:	0e 94 82 1c 	call	0x3904	; 0x3904 <__SPKR_close_tone_mode>
    3952:	08 95       	ret
    3954:	0e 94 74 1c 	call	0x38e8	; 0x38e8 <__SPKR_close_beep_mode>
    3958:	08 95       	ret

0000395a <__SPKR_init>:
    395a:	98 2f       	mov	r25, r24
    395c:	80 91 8a 02 	lds	r24, 0x028A
    3960:	88 23       	and	r24, r24
    3962:	31 f4       	brne	.+12     	; 0x3970 <__SPKR_init+0x16>
    3964:	80 91 8b 02 	lds	r24, 0x028B
    3968:	88 23       	and	r24, r24
    396a:	11 f4       	brne	.+4      	; 0x3970 <__SPKR_init+0x16>
    396c:	57 9a       	sbi	0x0a, 7	; 10
    396e:	5f 98       	cbi	0x0b, 7	; 11
    3970:	80 91 8a 02 	lds	r24, 0x028A
    3974:	88 23       	and	r24, r24
    3976:	d1 f4       	brne	.+52     	; 0x39ac <__SPKR_init+0x52>
    3978:	92 30       	cpi	r25, 0x02	; 2
    397a:	c1 f4       	brne	.+48     	; 0x39ac <__SPKR_init+0x52>
    397c:	10 92 80 00 	sts	0x0080, r1
    3980:	10 92 81 00 	sts	0x0081, r1
    3984:	80 91 81 00 	lds	r24, 0x0081
    3988:	88 60       	ori	r24, 0x08	; 8
    398a:	80 93 81 00 	sts	0x0081, r24
    398e:	80 91 81 00 	lds	r24, 0x0081
    3992:	81 60       	ori	r24, 0x01	; 1
    3994:	80 93 81 00 	sts	0x0081, r24
    3998:	10 92 85 00 	sts	0x0085, r1
    399c:	10 92 84 00 	sts	0x0084, r1
    39a0:	81 e0       	ldi	r24, 0x01	; 1
    39a2:	80 93 89 00 	sts	0x0089, r24
    39a6:	80 e9       	ldi	r24, 0x90	; 144
    39a8:	80 93 88 00 	sts	0x0088, r24
    39ac:	08 95       	ret

000039ae <SPKR_play_beep>:
    39ae:	8f 92       	push	r8
    39b0:	9f 92       	push	r9
    39b2:	af 92       	push	r10
    39b4:	bf 92       	push	r11
    39b6:	cf 92       	push	r12
    39b8:	df 92       	push	r13
    39ba:	ef 92       	push	r14
    39bc:	ff 92       	push	r15
    39be:	0f 93       	push	r16
    39c0:	1f 93       	push	r17
    39c2:	cf 93       	push	r28
    39c4:	df 93       	push	r29
    39c6:	4b 01       	movw	r8, r22
    39c8:	5c 01       	movw	r10, r24
    39ca:	ea 01       	movw	r28, r20
    39cc:	b9 01       	movw	r22, r18
    39ce:	21 15       	cp	r18, r1
    39d0:	31 05       	cpc	r19, r1
    39d2:	39 f1       	breq	.+78     	; 0x3a22 <SPKR_play_beep+0x74>
    39d4:	9e 01       	movw	r18, r28
    39d6:	44 27       	eor	r20, r20
    39d8:	37 fd       	sbrc	r19, 7
    39da:	40 95       	com	r20
    39dc:	54 2f       	mov	r21, r20
    39de:	65 36       	cpi	r22, 0x65	; 101
    39e0:	71 05       	cpc	r23, r1
    39e2:	10 f0       	brcs	.+4      	; 0x39e8 <SPKR_play_beep+0x3a>
    39e4:	64 e6       	ldi	r22, 0x64	; 100
    39e6:	70 e0       	ldi	r23, 0x00	; 0
    39e8:	80 e0       	ldi	r24, 0x00	; 0
    39ea:	90 e0       	ldi	r25, 0x00	; 0
    39ec:	0e 94 46 2a 	call	0x548c	; 0x548c <__mulsi3>
    39f0:	24 e6       	ldi	r18, 0x64	; 100
    39f2:	30 e0       	ldi	r19, 0x00	; 0
    39f4:	40 e0       	ldi	r20, 0x00	; 0
    39f6:	50 e0       	ldi	r21, 0x00	; 0
    39f8:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__udivmodsi4>
    39fc:	79 01       	movw	r14, r18
    39fe:	8a 01       	movw	r16, r20
    3a00:	c5 01       	movw	r24, r10
    3a02:	b4 01       	movw	r22, r8
    3a04:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <SPKR_beep>
    3a08:	c7 01       	movw	r24, r14
    3a0a:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TMRSRVC_delay>
    3a0e:	60 e0       	ldi	r22, 0x00	; 0
    3a10:	70 e0       	ldi	r23, 0x00	; 0
    3a12:	80 e0       	ldi	r24, 0x00	; 0
    3a14:	90 e0       	ldi	r25, 0x00	; 0
    3a16:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <SPKR_beep>
    3a1a:	ce 01       	movw	r24, r28
    3a1c:	8e 19       	sub	r24, r14
    3a1e:	9f 09       	sbc	r25, r15
    3a20:	04 c0       	rjmp	.+8      	; 0x3a2a <SPKR_play_beep+0x7c>
    3a22:	41 15       	cp	r20, r1
    3a24:	51 05       	cpc	r21, r1
    3a26:	19 f0       	breq	.+6      	; 0x3a2e <SPKR_play_beep+0x80>
    3a28:	ca 01       	movw	r24, r20
    3a2a:	0e 94 08 17 	call	0x2e10	; 0x2e10 <TMRSRVC_delay>
    3a2e:	df 91       	pop	r29
    3a30:	cf 91       	pop	r28
    3a32:	1f 91       	pop	r17
    3a34:	0f 91       	pop	r16
    3a36:	ff 90       	pop	r15
    3a38:	ef 90       	pop	r14
    3a3a:	df 90       	pop	r13
    3a3c:	cf 90       	pop	r12
    3a3e:	bf 90       	pop	r11
    3a40:	af 90       	pop	r10
    3a42:	9f 90       	pop	r9
    3a44:	8f 90       	pop	r8
    3a46:	08 95       	ret

00003a48 <__SPKR_stop>:
    3a48:	ef e6       	ldi	r30, 0x6F	; 111
    3a4a:	f0 e0       	ldi	r31, 0x00	; 0
    3a4c:	80 81       	ld	r24, Z
    3a4e:	8d 7f       	andi	r24, 0xFD	; 253
    3a50:	80 83       	st	Z, r24
    3a52:	08 95       	ret

00003a54 <STEPPER_go>:
    3a54:	98 2f       	mov	r25, r24
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	80 93 c8 04 	sts	0x04C8, r24
    3a5c:	91 30       	cpi	r25, 0x01	; 1
    3a5e:	51 f0       	breq	.+20     	; 0x3a74 <STEPPER_go+0x20>
    3a60:	91 30       	cpi	r25, 0x01	; 1
    3a62:	18 f0       	brcs	.+6      	; 0x3a6a <STEPPER_go+0x16>
    3a64:	92 30       	cpi	r25, 0x02	; 2
    3a66:	41 f4       	brne	.+16     	; 0x3a78 <STEPPER_go+0x24>
    3a68:	03 c0       	rjmp	.+6      	; 0x3a70 <STEPPER_go+0x1c>
    3a6a:	10 92 b0 04 	sts	0x04B0, r1
    3a6e:	04 c0       	rjmp	.+8      	; 0x3a78 <STEPPER_go+0x24>
    3a70:	10 92 b0 04 	sts	0x04B0, r1
    3a74:	10 92 b1 04 	sts	0x04B1, r1
    3a78:	10 92 c8 04 	sts	0x04C8, r1
    3a7c:	08 95       	ret

00003a7e <__STEPPER_init>:
    3a7e:	3a 9a       	sbi	0x07, 2	; 7
    3a80:	3b 9a       	sbi	0x07, 3	; 7
    3a82:	3c 9a       	sbi	0x07, 4	; 7
    3a84:	3d 9a       	sbi	0x07, 5	; 7
    3a86:	3e 9a       	sbi	0x07, 6	; 7
    3a88:	3f 9a       	sbi	0x07, 7	; 7
    3a8a:	88 b1       	in	r24, 0x08	; 8
    3a8c:	83 70       	andi	r24, 0x03	; 3
    3a8e:	88 b9       	out	0x08, r24	; 8
    3a90:	08 95       	ret

00003a92 <STEPPER_set_steps>:
    3a92:	98 2f       	mov	r25, r24
    3a94:	81 e0       	ldi	r24, 0x01	; 1
    3a96:	80 93 c8 04 	sts	0x04C8, r24
    3a9a:	91 30       	cpi	r25, 0x01	; 1
    3a9c:	71 f0       	breq	.+28     	; 0x3aba <STEPPER_set_steps+0x28>
    3a9e:	91 30       	cpi	r25, 0x01	; 1
    3aa0:	18 f0       	brcs	.+6      	; 0x3aa8 <STEPPER_set_steps+0x16>
    3aa2:	92 30       	cpi	r25, 0x02	; 2
    3aa4:	71 f4       	brne	.+28     	; 0x3ac2 <STEPPER_set_steps+0x30>
    3aa6:	05 c0       	rjmp	.+10     	; 0x3ab2 <STEPPER_set_steps+0x20>
    3aa8:	70 93 a5 04 	sts	0x04A5, r23
    3aac:	60 93 a4 04 	sts	0x04A4, r22
    3ab0:	08 c0       	rjmp	.+16     	; 0x3ac2 <STEPPER_set_steps+0x30>
    3ab2:	70 93 a5 04 	sts	0x04A5, r23
    3ab6:	60 93 a4 04 	sts	0x04A4, r22
    3aba:	70 93 a7 04 	sts	0x04A7, r23
    3abe:	60 93 a6 04 	sts	0x04A6, r22
    3ac2:	10 92 c8 04 	sts	0x04C8, r1
    3ac6:	08 95       	ret

00003ac8 <STEPPER_set_stop_mode>:
    3ac8:	98 2f       	mov	r25, r24
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	80 93 c8 04 	sts	0x04C8, r24
    3ad0:	91 30       	cpi	r25, 0x01	; 1
    3ad2:	51 f0       	breq	.+20     	; 0x3ae8 <STEPPER_set_stop_mode+0x20>
    3ad4:	91 30       	cpi	r25, 0x01	; 1
    3ad6:	18 f0       	brcs	.+6      	; 0x3ade <STEPPER_set_stop_mode+0x16>
    3ad8:	92 30       	cpi	r25, 0x02	; 2
    3ada:	41 f4       	brne	.+16     	; 0x3aec <STEPPER_set_stop_mode+0x24>
    3adc:	03 c0       	rjmp	.+6      	; 0x3ae4 <STEPPER_set_stop_mode+0x1c>
    3ade:	60 93 b2 04 	sts	0x04B2, r22
    3ae2:	04 c0       	rjmp	.+8      	; 0x3aec <STEPPER_set_stop_mode+0x24>
    3ae4:	60 93 b2 04 	sts	0x04B2, r22
    3ae8:	60 93 b3 04 	sts	0x04B3, r22
    3aec:	10 92 c8 04 	sts	0x04C8, r1
    3af0:	08 95       	ret

00003af2 <STEPPER_setup_decels>:
    3af2:	0f 93       	push	r16
    3af4:	1f 93       	push	r17
    3af6:	cf 93       	push	r28
    3af8:	df 93       	push	r29
    3afa:	eb 01       	movw	r28, r22
    3afc:	8a 01       	movw	r16, r20
    3afe:	81 30       	cpi	r24, 0x01	; 1
    3b00:	01 f1       	breq	.+64     	; 0x3b42 <STEPPER_setup_decels+0x50>
    3b02:	81 30       	cpi	r24, 0x01	; 1
    3b04:	18 f0       	brcs	.+6      	; 0x3b0c <STEPPER_setup_decels+0x1a>
    3b06:	82 30       	cpi	r24, 0x02	; 2
    3b08:	61 f5       	brne	.+88     	; 0x3b62 <STEPPER_setup_decels+0x70>
    3b0a:	0d c0       	rjmp	.+26     	; 0x3b26 <STEPPER_setup_decels+0x34>
    3b0c:	80 91 9c 04 	lds	r24, 0x049C
    3b10:	90 91 9d 04 	lds	r25, 0x049D
    3b14:	89 2b       	or	r24, r25
    3b16:	11 f0       	breq	.+4      	; 0x3b1c <STEPPER_setup_decels+0x2a>
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	1a c0       	rjmp	.+52     	; 0x3b50 <STEPPER_setup_decels+0x5e>
    3b1c:	10 92 a9 04 	sts	0x04A9, r1
    3b20:	10 92 a8 04 	sts	0x04A8, r1
    3b24:	1e c0       	rjmp	.+60     	; 0x3b62 <STEPPER_setup_decels+0x70>
    3b26:	80 91 9c 04 	lds	r24, 0x049C
    3b2a:	90 91 9d 04 	lds	r25, 0x049D
    3b2e:	89 2b       	or	r24, r25
    3b30:	21 f0       	breq	.+8      	; 0x3b3a <STEPPER_setup_decels+0x48>
    3b32:	80 e0       	ldi	r24, 0x00	; 0
    3b34:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <STEPPER_set_decel_step_values>
    3b38:	04 c0       	rjmp	.+8      	; 0x3b42 <STEPPER_setup_decels+0x50>
    3b3a:	10 92 a9 04 	sts	0x04A9, r1
    3b3e:	10 92 a8 04 	sts	0x04A8, r1
    3b42:	80 91 9e 04 	lds	r24, 0x049E
    3b46:	90 91 9f 04 	lds	r25, 0x049F
    3b4a:	89 2b       	or	r24, r25
    3b4c:	31 f0       	breq	.+12     	; 0x3b5a <STEPPER_setup_decels+0x68>
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	be 01       	movw	r22, r28
    3b52:	a8 01       	movw	r20, r16
    3b54:	0e 94 ef 1e 	call	0x3dde	; 0x3dde <STEPPER_set_decel_step_values>
    3b58:	04 c0       	rjmp	.+8      	; 0x3b62 <STEPPER_setup_decels+0x70>
    3b5a:	10 92 ab 04 	sts	0x04AB, r1
    3b5e:	10 92 aa 04 	sts	0x04AA, r1
    3b62:	df 91       	pop	r29
    3b64:	cf 91       	pop	r28
    3b66:	1f 91       	pop	r17
    3b68:	0f 91       	pop	r16
    3b6a:	08 95       	ret

00003b6c <SYS_init>:
    3b6c:	10 92 cb 04 	sts	0x04CB, r1
    3b70:	10 92 cc 04 	sts	0x04CC, r1
    3b74:	10 92 d0 04 	sts	0x04D0, r1
    3b78:	10 92 cd 04 	sts	0x04CD, r1
    3b7c:	10 92 cf 04 	sts	0x04CF, r1
    3b80:	10 92 d1 04 	sts	0x04D1, r1
    3b84:	10 92 d2 04 	sts	0x04D2, r1
    3b88:	10 92 d3 04 	sts	0x04D3, r1
    3b8c:	10 92 d4 04 	sts	0x04D4, r1
    3b90:	10 92 d5 04 	sts	0x04D5, r1
    3b94:	10 92 d6 04 	sts	0x04D6, r1
    3b98:	10 92 d7 04 	sts	0x04D7, r1
    3b9c:	10 92 d8 04 	sts	0x04D8, r1
    3ba0:	10 92 d9 04 	sts	0x04D9, r1
    3ba4:	10 92 da 04 	sts	0x04DA, r1
    3ba8:	10 92 db 04 	sts	0x04DB, r1
    3bac:	10 92 dc 04 	sts	0x04DC, r1
    3bb0:	08 95       	ret

00003bb2 <TMRSRVC_insert>:
    3bb2:	cf 92       	push	r12
    3bb4:	df 92       	push	r13
    3bb6:	ef 92       	push	r14
    3bb8:	ff 92       	push	r15
    3bba:	0f 93       	push	r16
    3bbc:	1f 93       	push	r17
    3bbe:	cf 93       	push	r28
    3bc0:	df 93       	push	r29
    3bc2:	ec 01       	movw	r28, r24
    3bc4:	80 91 02 05 	lds	r24, 0x0502
    3bc8:	88 23       	and	r24, r24
    3bca:	39 f4       	brne	.+14     	; 0x3bda <TMRSRVC_insert+0x28>
    3bcc:	d0 93 04 05 	sts	0x0504, r29
    3bd0:	c0 93 03 05 	sts	0x0503, r28
    3bd4:	0e 94 67 1e 	call	0x3cce	; 0x3cce <TMRSRVC_start>
    3bd8:	47 c0       	rjmp	.+142    	; 0x3c68 <TMRSRVC_insert+0xb6>
    3bda:	c0 90 03 05 	lds	r12, 0x0503
    3bde:	d0 90 04 05 	lds	r13, 0x0504
    3be2:	00 e0       	ldi	r16, 0x00	; 0
    3be4:	10 e0       	ldi	r17, 0x00	; 0
    3be6:	ee 24       	eor	r14, r14
    3be8:	ff 24       	eor	r15, r15
    3bea:	37 c0       	rjmp	.+110    	; 0x3c5a <TMRSRVC_insert+0xa8>
    3bec:	a8 81       	ld	r26, Y
    3bee:	b9 81       	ldd	r27, Y+1	; 0x01
    3bf0:	fd 01       	movw	r30, r26
    3bf2:	64 81       	ldd	r22, Z+4	; 0x04
    3bf4:	75 81       	ldd	r23, Z+5	; 0x05
    3bf6:	f6 01       	movw	r30, r12
    3bf8:	40 81       	ld	r20, Z
    3bfa:	51 81       	ldd	r21, Z+1	; 0x01
    3bfc:	fa 01       	movw	r30, r20
    3bfe:	84 81       	ldd	r24, Z+4	; 0x04
    3c00:	95 81       	ldd	r25, Z+5	; 0x05
    3c02:	9b 01       	movw	r18, r22
    3c04:	28 1b       	sub	r18, r24
    3c06:	39 0b       	sbc	r19, r25
    3c08:	37 ff       	sbrs	r19, 7
    3c0a:	0f c0       	rjmp	.+30     	; 0x3c2a <TMRSRVC_insert+0x78>
    3c0c:	86 1b       	sub	r24, r22
    3c0e:	97 0b       	sbc	r25, r23
    3c10:	95 83       	std	Z+5, r25	; 0x05
    3c12:	84 83       	std	Z+4, r24	; 0x04
    3c14:	db 82       	std	Y+3, r13	; 0x03
    3c16:	ca 82       	std	Y+2, r12	; 0x02
    3c18:	01 2b       	or	r16, r17
    3c1a:	29 f4       	brne	.+10     	; 0x3c26 <TMRSRVC_insert+0x74>
    3c1c:	d0 93 04 05 	sts	0x0504, r29
    3c20:	c0 93 03 05 	sts	0x0503, r28
    3c24:	21 c0       	rjmp	.+66     	; 0x3c68 <TMRSRVC_insert+0xb6>
    3c26:	f7 01       	movw	r30, r14
    3c28:	0c c0       	rjmp	.+24     	; 0x3c42 <TMRSRVC_insert+0x90>
    3c2a:	f6 01       	movw	r30, r12
    3c2c:	82 81       	ldd	r24, Z+2	; 0x02
    3c2e:	93 81       	ldd	r25, Z+3	; 0x03
    3c30:	21 15       	cp	r18, r1
    3c32:	31 05       	cpc	r19, r1
    3c34:	49 f4       	brne	.+18     	; 0x3c48 <TMRSRVC_insert+0x96>
    3c36:	fd 01       	movw	r30, r26
    3c38:	15 82       	std	Z+5, r1	; 0x05
    3c3a:	14 82       	std	Z+4, r1	; 0x04
    3c3c:	9b 83       	std	Y+3, r25	; 0x03
    3c3e:	8a 83       	std	Y+2, r24	; 0x02
    3c40:	f6 01       	movw	r30, r12
    3c42:	d3 83       	std	Z+3, r29	; 0x03
    3c44:	c2 83       	std	Z+2, r28	; 0x02
    3c46:	10 c0       	rjmp	.+32     	; 0x3c68 <TMRSRVC_insert+0xb6>
    3c48:	fd 01       	movw	r30, r26
    3c4a:	35 83       	std	Z+5, r19	; 0x05
    3c4c:	24 83       	std	Z+4, r18	; 0x04
    3c4e:	00 97       	sbiw	r24, 0x00	; 0
    3c50:	b9 f3       	breq	.-18     	; 0x3c40 <TMRSRVC_insert+0x8e>
    3c52:	0f 5f       	subi	r16, 0xFF	; 255
    3c54:	1f 4f       	sbci	r17, 0xFF	; 255
    3c56:	76 01       	movw	r14, r12
    3c58:	6c 01       	movw	r12, r24
    3c5a:	80 91 02 05 	lds	r24, 0x0502
    3c5e:	90 e0       	ldi	r25, 0x00	; 0
    3c60:	08 17       	cp	r16, r24
    3c62:	19 07       	cpc	r17, r25
    3c64:	18 f2       	brcs	.-122    	; 0x3bec <TMRSRVC_insert+0x3a>
    3c66:	ec cf       	rjmp	.-40     	; 0x3c40 <TMRSRVC_insert+0x8e>
    3c68:	80 91 02 05 	lds	r24, 0x0502
    3c6c:	8f 5f       	subi	r24, 0xFF	; 255
    3c6e:	80 93 02 05 	sts	0x0502, r24
    3c72:	df 91       	pop	r29
    3c74:	cf 91       	pop	r28
    3c76:	1f 91       	pop	r17
    3c78:	0f 91       	pop	r16
    3c7a:	ff 90       	pop	r15
    3c7c:	ef 90       	pop	r14
    3c7e:	df 90       	pop	r13
    3c80:	cf 90       	pop	r12
    3c82:	08 95       	ret

00003c84 <TMRSRVC_open>:
    3c84:	88 e0       	ldi	r24, 0x08	; 8
    3c86:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    3c8a:	88 23       	and	r24, r24
    3c8c:	b9 f4       	brne	.+46     	; 0x3cbc <TMRSRVC_open+0x38>
    3c8e:	10 92 02 05 	sts	0x0502, r1
    3c92:	10 92 04 05 	sts	0x0504, r1
    3c96:	10 92 03 05 	sts	0x0503, r1
    3c9a:	10 92 9a 02 	sts	0x029A, r1
    3c9e:	10 92 9b 02 	sts	0x029B, r1
    3ca2:	80 e1       	ldi	r24, 0x10	; 16
    3ca4:	6c e5       	ldi	r22, 0x5C	; 92
    3ca6:	7f e1       	ldi	r23, 0x1F	; 31
    3ca8:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__ISR_attach>
    3cac:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <__TMRSRVC_init>
    3cb0:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <__TMRSRVC_start>
    3cb4:	88 e0       	ldi	r24, 0x08	; 8
    3cb6:	61 e0       	ldi	r22, 0x01	; 1
    3cb8:	0e 94 f3 15 	call	0x2be6	; 0x2be6 <SYS_set_state>
    3cbc:	88 e0       	ldi	r24, 0x08	; 8
    3cbe:	91 e0       	ldi	r25, 0x01	; 1
    3cc0:	08 95       	ret

00003cc2 <__TMRSRVC_start>:
    3cc2:	ee e6       	ldi	r30, 0x6E	; 110
    3cc4:	f0 e0       	ldi	r31, 0x00	; 0
    3cc6:	80 81       	ld	r24, Z
    3cc8:	82 60       	ori	r24, 0x02	; 2
    3cca:	80 83       	st	Z, r24
    3ccc:	08 95       	ret

00003cce <TMRSRVC_start>:
    3cce:	81 e0       	ldi	r24, 0x01	; 1
    3cd0:	80 93 9b 02 	sts	0x029B, r24
    3cd4:	08 95       	ret

00003cd6 <I2C_enable>:
    3cd6:	80 91 05 05 	lds	r24, 0x0505
    3cda:	81 30       	cpi	r24, 0x01	; 1
    3cdc:	29 f4       	brne	.+10     	; 0x3ce8 <I2C_enable+0x12>
    3cde:	80 91 bc 00 	lds	r24, 0x00BC
    3ce2:	84 60       	ori	r24, 0x04	; 4
    3ce4:	80 93 bc 00 	sts	0x00BC, r24
    3ce8:	08 95       	ret

00003cea <__I2C_init>:
    3cea:	38 98       	cbi	0x07, 0	; 7
    3cec:	39 98       	cbi	0x07, 1	; 7
    3cee:	08 95       	ret

00003cf0 <__ISR_attach>:
    3cf0:	80 32       	cpi	r24, 0x20	; 32
    3cf2:	18 f0       	brcs	.+6      	; 0x3cfa <__ISR_attach+0xa>
    3cf4:	20 e0       	ldi	r18, 0x00	; 0
    3cf6:	30 e0       	ldi	r19, 0x00	; 0
    3cf8:	0a c0       	rjmp	.+20     	; 0x3d0e <__ISR_attach+0x1e>
    3cfa:	e8 2f       	mov	r30, r24
    3cfc:	f0 e0       	ldi	r31, 0x00	; 0
    3cfe:	ee 0f       	add	r30, r30
    3d00:	ff 1f       	adc	r31, r31
    3d02:	e6 5c       	subi	r30, 0xC6	; 198
    3d04:	fd 4f       	sbci	r31, 0xFD	; 253
    3d06:	20 81       	ld	r18, Z
    3d08:	31 81       	ldd	r19, Z+1	; 0x01
    3d0a:	71 83       	std	Z+1, r23	; 0x01
    3d0c:	60 83       	st	Z, r22
    3d0e:	c9 01       	movw	r24, r18
    3d10:	08 95       	ret

00003d12 <__ATMEGA_init>:
    3d12:	24 9a       	sbi	0x04, 4	; 4
    3d14:	2c 9a       	sbi	0x05, 4	; 5
    3d16:	08 95       	ret

00003d18 <SPI_default_config>:
    3d18:	83 e5       	ldi	r24, 0x53	; 83
    3d1a:	8c bd       	out	0x2c, r24	; 44
    3d1c:	81 e0       	ldi	r24, 0x01	; 1
    3d1e:	8d bd       	out	0x2d, r24	; 45
    3d20:	8d e0       	ldi	r24, 0x0D	; 13
    3d22:	8a 95       	dec	r24
    3d24:	f1 f7       	brne	.-4      	; 0x3d22 <SPI_default_config+0xa>
    3d26:	08 95       	ret

00003d28 <SPI_ATtiny0_config>:
    3d28:	83 e5       	ldi	r24, 0x53	; 83
    3d2a:	8c bd       	out	0x2c, r24	; 44
    3d2c:	1d bc       	out	0x2d, r1	; 45
    3d2e:	84 ef       	ldi	r24, 0xF4	; 244
    3d30:	91 e0       	ldi	r25, 0x01	; 1
    3d32:	01 97       	sbiw	r24, 0x01	; 1
    3d34:	f1 f7       	brne	.-4      	; 0x3d32 <SPI_ATtiny0_config+0xa>
    3d36:	08 95       	ret

00003d38 <SPI_PSXC_config>:
    3d38:	8f e7       	ldi	r24, 0x7F	; 127
    3d3a:	8c bd       	out	0x2c, r24	; 44
    3d3c:	1d bc       	out	0x2d, r1	; 45
    3d3e:	84 ef       	ldi	r24, 0xF4	; 244
    3d40:	91 e0       	ldi	r25, 0x01	; 1
    3d42:	01 97       	sbiw	r24, 0x01	; 1
    3d44:	f1 f7       	brne	.-4      	; 0x3d42 <SPI_PSXC_config+0xa>
    3d46:	08 95       	ret

00003d48 <SPI_LCD_config>:
    3d48:	83 e5       	ldi	r24, 0x53	; 83
    3d4a:	8c bd       	out	0x2c, r24	; 44
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	8d bd       	out	0x2d, r24	; 45
    3d50:	8d e0       	ldi	r24, 0x0D	; 13
    3d52:	8a 95       	dec	r24
    3d54:	f1 f7       	brne	.-4      	; 0x3d52 <SPI_LCD_config+0xa>
    3d56:	08 95       	ret

00003d58 <SPI_FLASH_config>:
    3d58:	83 e5       	ldi	r24, 0x53	; 83
    3d5a:	8c bd       	out	0x2c, r24	; 44
    3d5c:	81 e0       	ldi	r24, 0x01	; 1
    3d5e:	8d bd       	out	0x2d, r24	; 45
    3d60:	84 ef       	ldi	r24, 0xF4	; 244
    3d62:	91 e0       	ldi	r25, 0x01	; 1
    3d64:	01 97       	sbiw	r24, 0x01	; 1
    3d66:	f1 f7       	brne	.-4      	; 0x3d64 <SPI_FLASH_config+0xc>
    3d68:	08 95       	ret

00003d6a <__SPI_init>:
    3d6a:	25 9a       	sbi	0x04, 5	; 4
    3d6c:	26 98       	cbi	0x04, 6	; 4
    3d6e:	27 9a       	sbi	0x04, 7	; 4
    3d70:	20 9a       	sbi	0x04, 0	; 4
    3d72:	21 9a       	sbi	0x04, 1	; 4
    3d74:	22 9a       	sbi	0x04, 2	; 4
    3d76:	08 95       	ret

00003d78 <SPKR_beep>:
    3d78:	9b 01       	movw	r18, r22
    3d7a:	ac 01       	movw	r20, r24
    3d7c:	80 91 8b 02 	lds	r24, 0x028B
    3d80:	88 23       	and	r24, r24
    3d82:	81 f0       	breq	.+32     	; 0x3da4 <SPKR_beep+0x2c>
    3d84:	da 01       	movw	r26, r20
    3d86:	c9 01       	movw	r24, r18
    3d88:	88 0f       	add	r24, r24
    3d8a:	99 1f       	adc	r25, r25
    3d8c:	aa 1f       	adc	r26, r26
    3d8e:	bb 1f       	adc	r27, r27
    3d90:	90 93 97 02 	sts	0x0297, r25
    3d94:	80 93 96 02 	sts	0x0296, r24
    3d98:	21 15       	cp	r18, r1
    3d9a:	31 05       	cpc	r19, r1
    3d9c:	41 05       	cpc	r20, r1
    3d9e:	51 05       	cpc	r21, r1
    3da0:	09 f4       	brne	.+2      	; 0x3da4 <SPKR_beep+0x2c>
    3da2:	5f 98       	cbi	0x0b, 7	; 11
    3da4:	08 95       	ret

00003da6 <__SPKR_close>:
    3da6:	82 30       	cpi	r24, 0x02	; 2
    3da8:	29 f4       	brne	.+10     	; 0x3db4 <__SPKR_close+0xe>
    3daa:	80 91 81 00 	lds	r24, 0x0081
    3dae:	8e 7f       	andi	r24, 0xFE	; 254
    3db0:	80 93 81 00 	sts	0x0081, r24
    3db4:	80 91 8a 02 	lds	r24, 0x028A
    3db8:	81 30       	cpi	r24, 0x01	; 1
    3dba:	31 f4       	brne	.+12     	; 0x3dc8 <__SPKR_close+0x22>
    3dbc:	80 91 8b 02 	lds	r24, 0x028B
    3dc0:	81 30       	cpi	r24, 0x01	; 1
    3dc2:	11 f4       	brne	.+4      	; 0x3dc8 <__SPKR_close+0x22>
    3dc4:	00 00       	nop
    3dc6:	08 95       	ret
    3dc8:	80 91 8a 02 	lds	r24, 0x028A
    3dcc:	81 30       	cpi	r24, 0x01	; 1
    3dce:	21 f0       	breq	.+8      	; 0x3dd8 <__SPKR_close+0x32>
    3dd0:	80 91 8b 02 	lds	r24, 0x028B
    3dd4:	81 30       	cpi	r24, 0x01	; 1
    3dd6:	11 f4       	brne	.+4      	; 0x3ddc <__SPKR_close+0x36>
    3dd8:	5f 98       	cbi	0x0b, 7	; 11
    3dda:	57 98       	cbi	0x0a, 7	; 10
    3ddc:	08 95       	ret

00003dde <STEPPER_set_decel_step_values>:
    3dde:	ef 92       	push	r14
    3de0:	ff 92       	push	r15
    3de2:	0f 93       	push	r16
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	eb 01       	movw	r28, r22
    3dec:	88 23       	and	r24, r24
    3dee:	21 f0       	breq	.+8      	; 0x3df8 <STEPPER_set_decel_step_values+0x1a>
    3df0:	81 30       	cpi	r24, 0x01	; 1
    3df2:	09 f0       	breq	.+2      	; 0x3df6 <STEPPER_set_decel_step_values+0x18>
    3df4:	5a c0       	rjmp	.+180    	; 0x3eaa <STEPPER_set_decel_step_values+0xcc>
    3df6:	2d c0       	rjmp	.+90     	; 0x3e52 <STEPPER_set_decel_step_values+0x74>
    3df8:	9a 01       	movw	r18, r20
    3dfa:	40 e0       	ldi	r20, 0x00	; 0
    3dfc:	50 e0       	ldi	r21, 0x00	; 0
    3dfe:	ca 01       	movw	r24, r20
    3e00:	b9 01       	movw	r22, r18
    3e02:	0e 94 46 2a 	call	0x548c	; 0x548c <__mulsi3>
    3e06:	20 91 9c 04 	lds	r18, 0x049C
    3e0a:	30 91 9d 04 	lds	r19, 0x049D
    3e0e:	22 0f       	add	r18, r18
    3e10:	33 1f       	adc	r19, r19
    3e12:	40 e0       	ldi	r20, 0x00	; 0
    3e14:	50 e0       	ldi	r21, 0x00	; 0
    3e16:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__udivmodsi4>
    3e1a:	79 01       	movw	r14, r18
    3e1c:	8a 01       	movw	r16, r20
    3e1e:	a8 01       	movw	r20, r16
    3e20:	97 01       	movw	r18, r14
    3e22:	22 0f       	add	r18, r18
    3e24:	33 1f       	adc	r19, r19
    3e26:	44 1f       	adc	r20, r20
    3e28:	55 1f       	adc	r21, r21
    3e2a:	ce 01       	movw	r24, r28
    3e2c:	a0 e0       	ldi	r26, 0x00	; 0
    3e2e:	b0 e0       	ldi	r27, 0x00	; 0
    3e30:	82 17       	cp	r24, r18
    3e32:	93 07       	cpc	r25, r19
    3e34:	a4 07       	cpc	r26, r20
    3e36:	b5 07       	cpc	r27, r21
    3e38:	28 f0       	brcs	.+10     	; 0x3e44 <STEPPER_set_decel_step_values+0x66>
    3e3a:	f0 92 a9 04 	sts	0x04A9, r15
    3e3e:	e0 92 a8 04 	sts	0x04A8, r14
    3e42:	33 c0       	rjmp	.+102    	; 0x3eaa <STEPPER_set_decel_step_values+0xcc>
    3e44:	d6 95       	lsr	r29
    3e46:	c7 95       	ror	r28
    3e48:	d0 93 a9 04 	sts	0x04A9, r29
    3e4c:	c0 93 a8 04 	sts	0x04A8, r28
    3e50:	2c c0       	rjmp	.+88     	; 0x3eaa <STEPPER_set_decel_step_values+0xcc>
    3e52:	9a 01       	movw	r18, r20
    3e54:	40 e0       	ldi	r20, 0x00	; 0
    3e56:	50 e0       	ldi	r21, 0x00	; 0
    3e58:	ca 01       	movw	r24, r20
    3e5a:	b9 01       	movw	r22, r18
    3e5c:	0e 94 46 2a 	call	0x548c	; 0x548c <__mulsi3>
    3e60:	20 91 9e 04 	lds	r18, 0x049E
    3e64:	30 91 9f 04 	lds	r19, 0x049F
    3e68:	22 0f       	add	r18, r18
    3e6a:	33 1f       	adc	r19, r19
    3e6c:	40 e0       	ldi	r20, 0x00	; 0
    3e6e:	50 e0       	ldi	r21, 0x00	; 0
    3e70:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <__udivmodsi4>
    3e74:	79 01       	movw	r14, r18
    3e76:	8a 01       	movw	r16, r20
    3e78:	a8 01       	movw	r20, r16
    3e7a:	97 01       	movw	r18, r14
    3e7c:	22 0f       	add	r18, r18
    3e7e:	33 1f       	adc	r19, r19
    3e80:	44 1f       	adc	r20, r20
    3e82:	55 1f       	adc	r21, r21
    3e84:	ce 01       	movw	r24, r28
    3e86:	a0 e0       	ldi	r26, 0x00	; 0
    3e88:	b0 e0       	ldi	r27, 0x00	; 0
    3e8a:	82 17       	cp	r24, r18
    3e8c:	93 07       	cpc	r25, r19
    3e8e:	a4 07       	cpc	r26, r20
    3e90:	b5 07       	cpc	r27, r21
    3e92:	28 f0       	brcs	.+10     	; 0x3e9e <STEPPER_set_decel_step_values+0xc0>
    3e94:	f0 92 ab 04 	sts	0x04AB, r15
    3e98:	e0 92 aa 04 	sts	0x04AA, r14
    3e9c:	06 c0       	rjmp	.+12     	; 0x3eaa <STEPPER_set_decel_step_values+0xcc>
    3e9e:	d6 95       	lsr	r29
    3ea0:	c7 95       	ror	r28
    3ea2:	d0 93 ab 04 	sts	0x04AB, r29
    3ea6:	c0 93 aa 04 	sts	0x04AA, r28
    3eaa:	df 91       	pop	r29
    3eac:	cf 91       	pop	r28
    3eae:	1f 91       	pop	r17
    3eb0:	0f 91       	pop	r16
    3eb2:	ff 90       	pop	r15
    3eb4:	ef 90       	pop	r14
    3eb6:	08 95       	ret

00003eb8 <__TIMER0_COMPA_vect>:
    3eb8:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <TMRSRVC_tick>
    3ebc:	0e 94 ac 1f 	call	0x3f58	; 0x3f58 <STEPPER_clk>
    3ec0:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <SPKR_beep_clk>
    3ec4:	08 95       	ret

00003ec6 <__TMRSRVC_init>:
    3ec6:	84 b5       	in	r24, 0x24	; 36
    3ec8:	82 60       	ori	r24, 0x02	; 2
    3eca:	84 bd       	out	0x24, r24	; 36
    3ecc:	85 b5       	in	r24, 0x25	; 37
    3ece:	84 60       	ori	r24, 0x04	; 4
    3ed0:	85 bd       	out	0x25, r24	; 37
    3ed2:	8e e4       	ldi	r24, 0x4E	; 78
    3ed4:	87 bd       	out	0x27, r24	; 39
    3ed6:	08 95       	ret

00003ed8 <TMRSRVC_tick>:
    3ed8:	88 e0       	ldi	r24, 0x08	; 8
    3eda:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    3ede:	88 23       	and	r24, r24
    3ee0:	11 f4       	brne	.+4      	; 0x3ee6 <TMRSRVC_tick+0xe>
    3ee2:	84 e0       	ldi	r24, 0x04	; 4
    3ee4:	08 95       	ret
    3ee6:	80 91 9b 02 	lds	r24, 0x029B
    3eea:	88 23       	and	r24, r24
    3eec:	11 f4       	brne	.+4      	; 0x3ef2 <TMRSRVC_tick+0x1a>
    3eee:	83 e0       	ldi	r24, 0x03	; 3
    3ef0:	08 95       	ret
    3ef2:	80 91 9a 02 	lds	r24, 0x029A
    3ef6:	88 23       	and	r24, r24
    3ef8:	11 f0       	breq	.+4      	; 0x3efe <TMRSRVC_tick+0x26>
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	08 95       	ret
    3efe:	0e 94 1e 22 	call	0x443c	; 0x443c <TMRSRVC_process>
    3f02:	81 30       	cpi	r24, 0x01	; 1
    3f04:	e1 f3       	breq	.-8      	; 0x3efe <TMRSRVC_tick+0x26>
    3f06:	80 e0       	ldi	r24, 0x00	; 0
    3f08:	08 95       	ret

00003f0a <SPKR_beep_clk>:
    3f0a:	80 91 8b 02 	lds	r24, 0x028B
    3f0e:	81 30       	cpi	r24, 0x01	; 1
    3f10:	11 f5       	brne	.+68     	; 0x3f56 <SPKR_beep_clk+0x4c>
    3f12:	80 91 94 02 	lds	r24, 0x0294
    3f16:	90 91 95 02 	lds	r25, 0x0295
    3f1a:	20 91 96 02 	lds	r18, 0x0296
    3f1e:	30 91 97 02 	lds	r19, 0x0297
    3f22:	28 0f       	add	r18, r24
    3f24:	39 1f       	adc	r19, r25
    3f26:	30 93 95 02 	sts	0x0295, r19
    3f2a:	20 93 94 02 	sts	0x0294, r18
    3f2e:	80 91 94 02 	lds	r24, 0x0294
    3f32:	90 91 95 02 	lds	r25, 0x0295
    3f36:	88 5e       	subi	r24, 0xE8	; 232
    3f38:	93 40       	sbci	r25, 0x03	; 3
    3f3a:	6c f0       	brlt	.+26     	; 0x3f56 <SPKR_beep_clk+0x4c>
    3f3c:	8b b1       	in	r24, 0x0b	; 11
    3f3e:	80 58       	subi	r24, 0x80	; 128
    3f40:	8b b9       	out	0x0b, r24	; 11
    3f42:	80 91 94 02 	lds	r24, 0x0294
    3f46:	90 91 95 02 	lds	r25, 0x0295
    3f4a:	88 5e       	subi	r24, 0xE8	; 232
    3f4c:	93 40       	sbci	r25, 0x03	; 3
    3f4e:	90 93 95 02 	sts	0x0295, r25
    3f52:	80 93 94 02 	sts	0x0294, r24
    3f56:	08 95       	ret

00003f58 <STEPPER_clk>:
    3f58:	87 e0       	ldi	r24, 0x07	; 7
    3f5a:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <SYS_get_state>
    3f5e:	81 30       	cpi	r24, 0x01	; 1
    3f60:	09 f0       	breq	.+2      	; 0x3f64 <STEPPER_clk+0xc>
    3f62:	aa c0       	rjmp	.+340    	; 0x40b8 <STEPPER_clk+0x160>
    3f64:	80 91 9c 04 	lds	r24, 0x049C
    3f68:	90 91 9d 04 	lds	r25, 0x049D
    3f6c:	89 2b       	or	r24, r25
    3f6e:	09 f1       	breq	.+66     	; 0x3fb2 <STEPPER_clk+0x5a>
    3f70:	80 91 c0 04 	lds	r24, 0x04C0
    3f74:	90 91 c1 04 	lds	r25, 0x04C1
    3f78:	20 91 9c 04 	lds	r18, 0x049C
    3f7c:	30 91 9d 04 	lds	r19, 0x049D
    3f80:	82 0f       	add	r24, r18
    3f82:	93 1f       	adc	r25, r19
    3f84:	90 93 c1 04 	sts	0x04C1, r25
    3f88:	80 93 c0 04 	sts	0x04C0, r24
    3f8c:	80 91 c0 04 	lds	r24, 0x04C0
    3f90:	90 91 c1 04 	lds	r25, 0x04C1
    3f94:	88 5e       	subi	r24, 0xE8	; 232
    3f96:	93 40       	sbci	r25, 0x03	; 3
    3f98:	a4 f0       	brlt	.+40     	; 0x3fc2 <STEPPER_clk+0x6a>
    3f9a:	80 91 c0 04 	lds	r24, 0x04C0
    3f9e:	90 91 c1 04 	lds	r25, 0x04C1
    3fa2:	88 5e       	subi	r24, 0xE8	; 232
    3fa4:	93 40       	sbci	r25, 0x03	; 3
    3fa6:	90 93 c1 04 	sts	0x04C1, r25
    3faa:	80 93 c0 04 	sts	0x04C0, r24
    3fae:	41 e0       	ldi	r20, 0x01	; 1
    3fb0:	09 c0       	rjmp	.+18     	; 0x3fc4 <STEPPER_clk+0x6c>
    3fb2:	80 91 94 04 	lds	r24, 0x0494
    3fb6:	90 91 95 04 	lds	r25, 0x0495
    3fba:	90 93 99 04 	sts	0x0499, r25
    3fbe:	80 93 98 04 	sts	0x0498, r24
    3fc2:	40 e0       	ldi	r20, 0x00	; 0
    3fc4:	80 91 9e 04 	lds	r24, 0x049E
    3fc8:	90 91 9f 04 	lds	r25, 0x049F
    3fcc:	89 2b       	or	r24, r25
    3fce:	09 f1       	breq	.+66     	; 0x4012 <STEPPER_clk+0xba>
    3fd0:	80 91 c2 04 	lds	r24, 0x04C2
    3fd4:	90 91 c3 04 	lds	r25, 0x04C3
    3fd8:	20 91 9e 04 	lds	r18, 0x049E
    3fdc:	30 91 9f 04 	lds	r19, 0x049F
    3fe0:	82 0f       	add	r24, r18
    3fe2:	93 1f       	adc	r25, r19
    3fe4:	90 93 c3 04 	sts	0x04C3, r25
    3fe8:	80 93 c2 04 	sts	0x04C2, r24
    3fec:	80 91 c2 04 	lds	r24, 0x04C2
    3ff0:	90 91 c3 04 	lds	r25, 0x04C3
    3ff4:	88 5e       	subi	r24, 0xE8	; 232
    3ff6:	93 40       	sbci	r25, 0x03	; 3
    3ff8:	a4 f0       	brlt	.+40     	; 0x4022 <STEPPER_clk+0xca>
    3ffa:	80 91 c2 04 	lds	r24, 0x04C2
    3ffe:	90 91 c3 04 	lds	r25, 0x04C3
    4002:	88 5e       	subi	r24, 0xE8	; 232
    4004:	93 40       	sbci	r25, 0x03	; 3
    4006:	90 93 c3 04 	sts	0x04C3, r25
    400a:	80 93 c2 04 	sts	0x04C2, r24
    400e:	61 e0       	ldi	r22, 0x01	; 1
    4010:	09 c0       	rjmp	.+18     	; 0x4024 <STEPPER_clk+0xcc>
    4012:	80 91 96 04 	lds	r24, 0x0496
    4016:	90 91 97 04 	lds	r25, 0x0497
    401a:	90 93 9b 04 	sts	0x049B, r25
    401e:	80 93 9a 04 	sts	0x049A, r24
    4022:	60 e0       	ldi	r22, 0x00	; 0
    4024:	84 2f       	mov	r24, r20
    4026:	0e 94 5d 20 	call	0x40ba	; 0x40ba <STEPPER_process_accel>
    402a:	80 91 bc 04 	lds	r24, 0x04BC
    402e:	90 91 bd 04 	lds	r25, 0x04BD
    4032:	20 91 98 04 	lds	r18, 0x0498
    4036:	30 91 99 04 	lds	r19, 0x0499
    403a:	28 0f       	add	r18, r24
    403c:	39 1f       	adc	r19, r25
    403e:	30 93 bd 04 	sts	0x04BD, r19
    4042:	20 93 bc 04 	sts	0x04BC, r18
    4046:	80 91 bc 04 	lds	r24, 0x04BC
    404a:	90 91 bd 04 	lds	r25, 0x04BD
    404e:	88 5e       	subi	r24, 0xE8	; 232
    4050:	93 40       	sbci	r25, 0x03	; 3
    4052:	14 f4       	brge	.+4      	; 0x4058 <STEPPER_clk+0x100>
    4054:	40 e0       	ldi	r20, 0x00	; 0
    4056:	0b c0       	rjmp	.+22     	; 0x406e <STEPPER_clk+0x116>
    4058:	80 91 bc 04 	lds	r24, 0x04BC
    405c:	90 91 bd 04 	lds	r25, 0x04BD
    4060:	88 5e       	subi	r24, 0xE8	; 232
    4062:	93 40       	sbci	r25, 0x03	; 3
    4064:	90 93 bd 04 	sts	0x04BD, r25
    4068:	80 93 bc 04 	sts	0x04BC, r24
    406c:	41 e0       	ldi	r20, 0x01	; 1
    406e:	80 91 be 04 	lds	r24, 0x04BE
    4072:	90 91 bf 04 	lds	r25, 0x04BF
    4076:	20 91 9a 04 	lds	r18, 0x049A
    407a:	30 91 9b 04 	lds	r19, 0x049B
    407e:	28 0f       	add	r18, r24
    4080:	39 1f       	adc	r19, r25
    4082:	30 93 bf 04 	sts	0x04BF, r19
    4086:	20 93 be 04 	sts	0x04BE, r18
    408a:	80 91 be 04 	lds	r24, 0x04BE
    408e:	90 91 bf 04 	lds	r25, 0x04BF
    4092:	88 5e       	subi	r24, 0xE8	; 232
    4094:	93 40       	sbci	r25, 0x03	; 3
    4096:	14 f4       	brge	.+4      	; 0x409c <STEPPER_clk+0x144>
    4098:	60 e0       	ldi	r22, 0x00	; 0
    409a:	0b c0       	rjmp	.+22     	; 0x40b2 <STEPPER_clk+0x15a>
    409c:	80 91 be 04 	lds	r24, 0x04BE
    40a0:	90 91 bf 04 	lds	r25, 0x04BF
    40a4:	88 5e       	subi	r24, 0xE8	; 232
    40a6:	93 40       	sbci	r25, 0x03	; 3
    40a8:	90 93 bf 04 	sts	0x04BF, r25
    40ac:	80 93 be 04 	sts	0x04BE, r24
    40b0:	61 e0       	ldi	r22, 0x01	; 1
    40b2:	84 2f       	mov	r24, r20
    40b4:	0e 94 a2 20 	call	0x4144	; 0x4144 <STEPPER_process_run_mode>
    40b8:	08 95       	ret

000040ba <STEPPER_process_accel>:
    40ba:	88 23       	and	r24, r24
    40bc:	f1 f0       	breq	.+60     	; 0x40fa <STEPPER_process_accel+0x40>
    40be:	20 91 94 04 	lds	r18, 0x0494
    40c2:	30 91 95 04 	lds	r19, 0x0495
    40c6:	80 91 98 04 	lds	r24, 0x0498
    40ca:	90 91 99 04 	lds	r25, 0x0499
    40ce:	28 1b       	sub	r18, r24
    40d0:	39 0b       	sbc	r19, r25
    40d2:	12 16       	cp	r1, r18
    40d4:	13 06       	cpc	r1, r19
    40d6:	34 f4       	brge	.+12     	; 0x40e4 <STEPPER_process_accel+0x2a>
    40d8:	80 91 98 04 	lds	r24, 0x0498
    40dc:	90 91 99 04 	lds	r25, 0x0499
    40e0:	01 96       	adiw	r24, 0x01	; 1
    40e2:	07 c0       	rjmp	.+14     	; 0x40f2 <STEPPER_process_accel+0x38>
    40e4:	23 2b       	or	r18, r19
    40e6:	49 f0       	breq	.+18     	; 0x40fa <STEPPER_process_accel+0x40>
    40e8:	80 91 98 04 	lds	r24, 0x0498
    40ec:	90 91 99 04 	lds	r25, 0x0499
    40f0:	01 97       	sbiw	r24, 0x01	; 1
    40f2:	90 93 99 04 	sts	0x0499, r25
    40f6:	80 93 98 04 	sts	0x0498, r24
    40fa:	66 23       	and	r22, r22
    40fc:	11 f1       	breq	.+68     	; 0x4142 <STEPPER_process_accel+0x88>
    40fe:	20 91 96 04 	lds	r18, 0x0496
    4102:	30 91 97 04 	lds	r19, 0x0497
    4106:	80 91 9a 04 	lds	r24, 0x049A
    410a:	90 91 9b 04 	lds	r25, 0x049B
    410e:	28 1b       	sub	r18, r24
    4110:	39 0b       	sbc	r19, r25
    4112:	12 16       	cp	r1, r18
    4114:	13 06       	cpc	r1, r19
    4116:	54 f4       	brge	.+20     	; 0x412c <STEPPER_process_accel+0x72>
    4118:	80 91 9a 04 	lds	r24, 0x049A
    411c:	90 91 9b 04 	lds	r25, 0x049B
    4120:	01 96       	adiw	r24, 0x01	; 1
    4122:	90 93 9b 04 	sts	0x049B, r25
    4126:	80 93 9a 04 	sts	0x049A, r24
    412a:	08 95       	ret
    412c:	23 2b       	or	r18, r19
    412e:	49 f0       	breq	.+18     	; 0x4142 <STEPPER_process_accel+0x88>
    4130:	80 91 9a 04 	lds	r24, 0x049A
    4134:	90 91 9b 04 	lds	r25, 0x049B
    4138:	01 97       	sbiw	r24, 0x01	; 1
    413a:	90 93 9b 04 	sts	0x049B, r25
    413e:	80 93 9a 04 	sts	0x049A, r24
    4142:	08 95       	ret

00004144 <STEPPER_process_run_mode>:
    4144:	0f 93       	push	r16
    4146:	1f 93       	push	r17
    4148:	18 2f       	mov	r17, r24
    414a:	06 2f       	mov	r16, r22
    414c:	80 91 c8 04 	lds	r24, 0x04C8
    4150:	88 23       	and	r24, r24
    4152:	09 f0       	breq	.+2      	; 0x4156 <STEPPER_process_run_mode+0x12>
    4154:	e7 c0       	rjmp	.+462    	; 0x4324 <STEPPER_process_run_mode+0x1e0>
    4156:	80 91 b0 04 	lds	r24, 0x04B0
    415a:	88 23       	and	r24, r24
    415c:	09 f0       	breq	.+2      	; 0x4160 <STEPPER_process_run_mode+0x1c>
    415e:	5a c0       	rjmp	.+180    	; 0x4214 <STEPPER_process_run_mode+0xd0>
    4160:	80 91 98 04 	lds	r24, 0x0498
    4164:	90 91 99 04 	lds	r25, 0x0499
    4168:	89 2b       	or	r24, r25
    416a:	e9 f4       	brne	.+58     	; 0x41a6 <STEPPER_process_run_mode+0x62>
    416c:	80 91 9c 02 	lds	r24, 0x029C
    4170:	83 7e       	andi	r24, 0xE3	; 227
    4172:	80 93 9c 02 	sts	0x029C, r24
    4176:	10 92 b9 04 	sts	0x04B9, r1
    417a:	80 91 c4 04 	lds	r24, 0x04C4
    417e:	88 23       	and	r24, r24
    4180:	09 f4       	brne	.+2      	; 0x4184 <STEPPER_process_run_mode+0x40>
    4182:	5d c0       	rjmp	.+186    	; 0x423e <STEPPER_process_run_mode+0xfa>
    4184:	60 91 b2 04 	lds	r22, 0x04B2
    4188:	80 e0       	ldi	r24, 0x00	; 0
    418a:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <STEPPER_stop>
    418e:	e0 91 c6 04 	lds	r30, 0x04C6
    4192:	f0 91 c7 04 	lds	r31, 0x04C7
    4196:	30 97       	sbiw	r30, 0x00	; 0
    4198:	09 f4       	brne	.+2      	; 0x419c <STEPPER_process_run_mode+0x58>
    419a:	51 c0       	rjmp	.+162    	; 0x423e <STEPPER_process_run_mode+0xfa>
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	80 83       	st	Z, r24
    41a0:	10 92 c4 04 	sts	0x04C4, r1
    41a4:	4c c0       	rjmp	.+152    	; 0x423e <STEPPER_process_run_mode+0xfa>
    41a6:	80 91 92 04 	lds	r24, 0x0492
    41aa:	81 30       	cpi	r24, 0x01	; 1
    41ac:	41 f4       	brne	.+16     	; 0x41be <STEPPER_process_run_mode+0x7a>
    41ae:	80 91 a4 04 	lds	r24, 0x04A4
    41b2:	90 91 a5 04 	lds	r25, 0x04A5
    41b6:	01 97       	sbiw	r24, 0x01	; 1
    41b8:	11 f4       	brne	.+4      	; 0x41be <STEPPER_process_run_mode+0x7a>
    41ba:	11 e0       	ldi	r17, 0x01	; 1
    41bc:	02 c0       	rjmp	.+4      	; 0x41c2 <STEPPER_process_run_mode+0x7e>
    41be:	11 23       	and	r17, r17
    41c0:	f1 f1       	breq	.+124    	; 0x423e <STEPPER_process_run_mode+0xfa>
    41c2:	e0 91 b7 04 	lds	r30, 0x04B7
    41c6:	f0 e0       	ldi	r31, 0x00	; 0
    41c8:	e9 55       	subi	r30, 0x59	; 89
    41ca:	fe 4f       	sbci	r31, 0xFE	; 254
    41cc:	90 91 9c 02 	lds	r25, 0x029C
    41d0:	93 7e       	andi	r25, 0xE3	; 227
    41d2:	80 81       	ld	r24, Z
    41d4:	89 2b       	or	r24, r25
    41d6:	80 93 9c 02 	sts	0x029C, r24
    41da:	80 91 b5 04 	lds	r24, 0x04B5
    41de:	88 23       	and	r24, r24
    41e0:	21 f4       	brne	.+8      	; 0x41ea <STEPPER_process_run_mode+0xa6>
    41e2:	80 91 b7 04 	lds	r24, 0x04B7
    41e6:	8f 5f       	subi	r24, 0xFF	; 255
    41e8:	03 c0       	rjmp	.+6      	; 0x41f0 <STEPPER_process_run_mode+0xac>
    41ea:	80 91 b7 04 	lds	r24, 0x04B7
    41ee:	81 50       	subi	r24, 0x01	; 1
    41f0:	80 93 b7 04 	sts	0x04B7, r24
    41f4:	80 91 b7 04 	lds	r24, 0x04B7
    41f8:	83 70       	andi	r24, 0x03	; 3
    41fa:	80 93 b7 04 	sts	0x04B7, r24
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	80 93 b9 04 	sts	0x04B9, r24
    4204:	80 91 92 04 	lds	r24, 0x0492
    4208:	81 30       	cpi	r24, 0x01	; 1
    420a:	c9 f4       	brne	.+50     	; 0x423e <STEPPER_process_run_mode+0xfa>
    420c:	80 e0       	ldi	r24, 0x00	; 0
    420e:	0e 94 a5 21 	call	0x434a	; 0x434a <STEPPER_process_step_mode>
    4212:	15 c0       	rjmp	.+42     	; 0x423e <STEPPER_process_run_mode+0xfa>
    4214:	90 91 9c 02 	lds	r25, 0x029C
    4218:	93 7e       	andi	r25, 0xE3	; 227
    421a:	90 93 9c 02 	sts	0x029C, r25
    421e:	e0 91 b7 04 	lds	r30, 0x04B7
    4222:	f0 e0       	ldi	r31, 0x00	; 0
    4224:	e9 55       	subi	r30, 0x59	; 89
    4226:	fe 4f       	sbci	r31, 0xFE	; 254
    4228:	80 81       	ld	r24, Z
    422a:	89 2b       	or	r24, r25
    422c:	80 93 9c 02 	sts	0x029C, r24
    4230:	82 e0       	ldi	r24, 0x02	; 2
    4232:	80 93 b9 04 	sts	0x04B9, r24
    4236:	10 92 99 04 	sts	0x0499, r1
    423a:	10 92 98 04 	sts	0x0498, r1
    423e:	80 91 b1 04 	lds	r24, 0x04B1
    4242:	88 23       	and	r24, r24
    4244:	09 f0       	breq	.+2      	; 0x4248 <STEPPER_process_run_mode+0x104>
    4246:	59 c0       	rjmp	.+178    	; 0x42fa <STEPPER_process_run_mode+0x1b6>
    4248:	80 91 9a 04 	lds	r24, 0x049A
    424c:	90 91 9b 04 	lds	r25, 0x049B
    4250:	89 2b       	or	r24, r25
    4252:	e9 f4       	brne	.+58     	; 0x428e <STEPPER_process_run_mode+0x14a>
    4254:	80 91 9c 02 	lds	r24, 0x029C
    4258:	8f 71       	andi	r24, 0x1F	; 31
    425a:	80 93 9c 02 	sts	0x029C, r24
    425e:	10 92 ba 04 	sts	0x04BA, r1
    4262:	80 91 c5 04 	lds	r24, 0x04C5
    4266:	88 23       	and	r24, r24
    4268:	09 f4       	brne	.+2      	; 0x426c <STEPPER_process_run_mode+0x128>
    426a:	5c c0       	rjmp	.+184    	; 0x4324 <STEPPER_process_run_mode+0x1e0>
    426c:	60 91 b3 04 	lds	r22, 0x04B3
    4270:	81 e0       	ldi	r24, 0x01	; 1
    4272:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <STEPPER_stop>
    4276:	e0 91 c6 04 	lds	r30, 0x04C6
    427a:	f0 91 c7 04 	lds	r31, 0x04C7
    427e:	30 97       	sbiw	r30, 0x00	; 0
    4280:	09 f4       	brne	.+2      	; 0x4284 <STEPPER_process_run_mode+0x140>
    4282:	50 c0       	rjmp	.+160    	; 0x4324 <STEPPER_process_run_mode+0x1e0>
    4284:	81 e0       	ldi	r24, 0x01	; 1
    4286:	81 83       	std	Z+1, r24	; 0x01
    4288:	10 92 c5 04 	sts	0x04C5, r1
    428c:	4b c0       	rjmp	.+150    	; 0x4324 <STEPPER_process_run_mode+0x1e0>
    428e:	80 91 93 04 	lds	r24, 0x0493
    4292:	81 30       	cpi	r24, 0x01	; 1
    4294:	41 f4       	brne	.+16     	; 0x42a6 <STEPPER_process_run_mode+0x162>
    4296:	80 91 a6 04 	lds	r24, 0x04A6
    429a:	90 91 a7 04 	lds	r25, 0x04A7
    429e:	01 97       	sbiw	r24, 0x01	; 1
    42a0:	11 f4       	brne	.+4      	; 0x42a6 <STEPPER_process_run_mode+0x162>
    42a2:	01 e0       	ldi	r16, 0x01	; 1
    42a4:	02 c0       	rjmp	.+4      	; 0x42aa <STEPPER_process_run_mode+0x166>
    42a6:	00 23       	and	r16, r16
    42a8:	e9 f1       	breq	.+122    	; 0x4324 <STEPPER_process_run_mode+0x1e0>
    42aa:	e0 91 b8 04 	lds	r30, 0x04B8
    42ae:	f0 e0       	ldi	r31, 0x00	; 0
    42b0:	e5 55       	subi	r30, 0x55	; 85
    42b2:	fe 4f       	sbci	r31, 0xFE	; 254
    42b4:	90 91 9c 02 	lds	r25, 0x029C
    42b8:	9f 71       	andi	r25, 0x1F	; 31
    42ba:	80 81       	ld	r24, Z
    42bc:	89 2b       	or	r24, r25
    42be:	80 93 9c 02 	sts	0x029C, r24
    42c2:	80 91 b6 04 	lds	r24, 0x04B6
    42c6:	88 23       	and	r24, r24
    42c8:	21 f4       	brne	.+8      	; 0x42d2 <STEPPER_process_run_mode+0x18e>
    42ca:	80 91 b8 04 	lds	r24, 0x04B8
    42ce:	8f 5f       	subi	r24, 0xFF	; 255
    42d0:	03 c0       	rjmp	.+6      	; 0x42d8 <STEPPER_process_run_mode+0x194>
    42d2:	80 91 b8 04 	lds	r24, 0x04B8
    42d6:	81 50       	subi	r24, 0x01	; 1
    42d8:	80 93 b8 04 	sts	0x04B8, r24
    42dc:	80 91 b8 04 	lds	r24, 0x04B8
    42e0:	83 70       	andi	r24, 0x03	; 3
    42e2:	80 93 b8 04 	sts	0x04B8, r24
    42e6:	81 e0       	ldi	r24, 0x01	; 1
    42e8:	80 93 ba 04 	sts	0x04BA, r24
    42ec:	80 91 93 04 	lds	r24, 0x0493
    42f0:	81 30       	cpi	r24, 0x01	; 1
    42f2:	c1 f4       	brne	.+48     	; 0x4324 <STEPPER_process_run_mode+0x1e0>
    42f4:	0e 94 a5 21 	call	0x434a	; 0x434a <STEPPER_process_step_mode>
    42f8:	15 c0       	rjmp	.+42     	; 0x4324 <STEPPER_process_run_mode+0x1e0>
    42fa:	90 91 9c 02 	lds	r25, 0x029C
    42fe:	9f 71       	andi	r25, 0x1F	; 31
    4300:	90 93 9c 02 	sts	0x029C, r25
    4304:	e0 91 b8 04 	lds	r30, 0x04B8
    4308:	f0 e0       	ldi	r31, 0x00	; 0
    430a:	e5 55       	subi	r30, 0x55	; 85
    430c:	fe 4f       	sbci	r31, 0xFE	; 254
    430e:	80 81       	ld	r24, Z
    4310:	89 2b       	or	r24, r25
    4312:	80 93 9c 02 	sts	0x029C, r24
    4316:	82 e0       	ldi	r24, 0x02	; 2
    4318:	80 93 ba 04 	sts	0x04BA, r24
    431c:	10 92 9b 04 	sts	0x049B, r1
    4320:	10 92 9a 04 	sts	0x049A, r1
    4324:	80 91 bb 04 	lds	r24, 0x04BB
    4328:	88 23       	and	r24, r24
    432a:	31 f4       	brne	.+12     	; 0x4338 <STEPPER_process_run_mode+0x1f4>
    432c:	8c e9       	ldi	r24, 0x9C	; 156
    432e:	92 e0       	ldi	r25, 0x02	; 2
    4330:	61 2f       	mov	r22, r17
    4332:	40 2f       	mov	r20, r16
    4334:	0e 94 8c 22 	call	0x4518	; 0x4518 <STEPPER_process_pwm>
    4338:	88 b1       	in	r24, 0x08	; 8
    433a:	83 70       	andi	r24, 0x03	; 3
    433c:	90 91 9c 02 	lds	r25, 0x029C
    4340:	89 2b       	or	r24, r25
    4342:	88 b9       	out	0x08, r24	; 8
    4344:	1f 91       	pop	r17
    4346:	0f 91       	pop	r16
    4348:	08 95       	ret

0000434a <STEPPER_process_step_mode>:
    434a:	88 23       	and	r24, r24
    434c:	21 f0       	breq	.+8      	; 0x4356 <STEPPER_process_step_mode+0xc>
    434e:	81 30       	cpi	r24, 0x01	; 1
    4350:	09 f0       	breq	.+2      	; 0x4354 <STEPPER_process_step_mode+0xa>
    4352:	4e c0       	rjmp	.+156    	; 0x43f0 <STEPPER_process_step_mode+0xa6>
    4354:	27 c0       	rjmp	.+78     	; 0x43a4 <STEPPER_process_step_mode+0x5a>
    4356:	80 91 a4 04 	lds	r24, 0x04A4
    435a:	90 91 a5 04 	lds	r25, 0x04A5
    435e:	89 2b       	or	r24, r25
    4360:	49 f0       	breq	.+18     	; 0x4374 <STEPPER_process_step_mode+0x2a>
    4362:	80 91 a4 04 	lds	r24, 0x04A4
    4366:	90 91 a5 04 	lds	r25, 0x04A5
    436a:	01 97       	sbiw	r24, 0x01	; 1
    436c:	90 93 a5 04 	sts	0x04A5, r25
    4370:	80 93 a4 04 	sts	0x04A4, r24
    4374:	80 91 c4 04 	lds	r24, 0x04C4
    4378:	88 23       	and	r24, r24
    437a:	d1 f5       	brne	.+116    	; 0x43f0 <STEPPER_process_step_mode+0xa6>
    437c:	20 91 a4 04 	lds	r18, 0x04A4
    4380:	30 91 a5 04 	lds	r19, 0x04A5
    4384:	80 91 a8 04 	lds	r24, 0x04A8
    4388:	90 91 a9 04 	lds	r25, 0x04A9
    438c:	28 17       	cp	r18, r24
    438e:	39 07       	cpc	r19, r25
    4390:	79 f5       	brne	.+94     	; 0x43f0 <STEPPER_process_step_mode+0xa6>
    4392:	80 e0       	ldi	r24, 0x00	; 0
    4394:	60 e0       	ldi	r22, 0x00	; 0
    4396:	70 e0       	ldi	r23, 0x00	; 0
    4398:	0e 94 af 14 	call	0x295e	; 0x295e <STEPPER_set_speed>
    439c:	81 e0       	ldi	r24, 0x01	; 1
    439e:	80 93 c4 04 	sts	0x04C4, r24
    43a2:	08 95       	ret
    43a4:	80 91 a6 04 	lds	r24, 0x04A6
    43a8:	90 91 a7 04 	lds	r25, 0x04A7
    43ac:	89 2b       	or	r24, r25
    43ae:	49 f0       	breq	.+18     	; 0x43c2 <STEPPER_process_step_mode+0x78>
    43b0:	80 91 a6 04 	lds	r24, 0x04A6
    43b4:	90 91 a7 04 	lds	r25, 0x04A7
    43b8:	01 97       	sbiw	r24, 0x01	; 1
    43ba:	90 93 a7 04 	sts	0x04A7, r25
    43be:	80 93 a6 04 	sts	0x04A6, r24
    43c2:	80 91 c5 04 	lds	r24, 0x04C5
    43c6:	88 23       	and	r24, r24
    43c8:	99 f4       	brne	.+38     	; 0x43f0 <STEPPER_process_step_mode+0xa6>
    43ca:	20 91 a6 04 	lds	r18, 0x04A6
    43ce:	30 91 a7 04 	lds	r19, 0x04A7
    43d2:	80 91 aa 04 	lds	r24, 0x04AA
    43d6:	90 91 ab 04 	lds	r25, 0x04AB
    43da:	28 17       	cp	r18, r24
    43dc:	39 07       	cpc	r19, r25
    43de:	41 f4       	brne	.+16     	; 0x43f0 <STEPPER_process_step_mode+0xa6>
    43e0:	81 e0       	ldi	r24, 0x01	; 1
    43e2:	60 e0       	ldi	r22, 0x00	; 0
    43e4:	70 e0       	ldi	r23, 0x00	; 0
    43e6:	0e 94 af 14 	call	0x295e	; 0x295e <STEPPER_set_speed>
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	80 93 c5 04 	sts	0x04C5, r24
    43f0:	08 95       	ret

000043f2 <STEPPER_stop>:
    43f2:	0f 93       	push	r16
    43f4:	1f 93       	push	r17
    43f6:	18 2f       	mov	r17, r24
    43f8:	06 2f       	mov	r16, r22
    43fa:	66 23       	and	r22, r22
    43fc:	49 f4       	brne	.+18     	; 0x4410 <STEPPER_stop+0x1e>
    43fe:	60 e0       	ldi	r22, 0x00	; 0
    4400:	70 e0       	ldi	r23, 0x00	; 0
    4402:	0e 94 af 14 	call	0x295e	; 0x295e <STEPPER_set_speed>
    4406:	81 2f       	mov	r24, r17
    4408:	60 e0       	ldi	r22, 0x00	; 0
    440a:	70 e0       	ldi	r23, 0x00	; 0
    440c:	0e 94 49 1d 	call	0x3a92	; 0x3a92 <STEPPER_set_steps>
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	80 93 c8 04 	sts	0x04C8, r24
    4416:	11 30       	cpi	r17, 0x01	; 1
    4418:	51 f0       	breq	.+20     	; 0x442e <STEPPER_stop+0x3c>
    441a:	11 30       	cpi	r17, 0x01	; 1
    441c:	18 f0       	brcs	.+6      	; 0x4424 <STEPPER_stop+0x32>
    441e:	12 30       	cpi	r17, 0x02	; 2
    4420:	41 f4       	brne	.+16     	; 0x4432 <STEPPER_stop+0x40>
    4422:	03 c0       	rjmp	.+6      	; 0x442a <STEPPER_stop+0x38>
    4424:	00 93 b0 04 	sts	0x04B0, r16
    4428:	04 c0       	rjmp	.+8      	; 0x4432 <STEPPER_stop+0x40>
    442a:	00 93 b0 04 	sts	0x04B0, r16
    442e:	00 93 b1 04 	sts	0x04B1, r16
    4432:	10 92 c8 04 	sts	0x04C8, r1
    4436:	1f 91       	pop	r17
    4438:	0f 91       	pop	r16
    443a:	08 95       	ret

0000443c <TMRSRVC_process>:
    443c:	ff 92       	push	r15
    443e:	0f 93       	push	r16
    4440:	1f 93       	push	r17
    4442:	cf 93       	push	r28
    4444:	df 93       	push	r29
    4446:	80 91 02 05 	lds	r24, 0x0502
    444a:	88 23       	and	r24, r24
    444c:	09 f4       	brne	.+2      	; 0x4450 <TMRSRVC_process+0x14>
    444e:	59 c0       	rjmp	.+178    	; 0x4502 <TMRSRVC_process+0xc6>
    4450:	00 91 03 05 	lds	r16, 0x0503
    4454:	10 91 04 05 	lds	r17, 0x0504
    4458:	f8 01       	movw	r30, r16
    445a:	c0 81       	ld	r28, Z
    445c:	d1 81       	ldd	r29, Z+1	; 0x01
    445e:	8c 81       	ldd	r24, Y+4	; 0x04
    4460:	9d 81       	ldd	r25, Y+5	; 0x05
    4462:	01 97       	sbiw	r24, 0x01	; 1
    4464:	9d 83       	std	Y+5, r25	; 0x05
    4466:	8c 83       	std	Y+4, r24	; 0x04
    4468:	18 16       	cp	r1, r24
    446a:	19 06       	cpc	r1, r25
    446c:	0c f4       	brge	.+2      	; 0x4470 <TMRSRVC_process+0x34>
    446e:	49 c0       	rjmp	.+146    	; 0x4502 <TMRSRVC_process+0xc6>
    4470:	89 81       	ldd	r24, Y+1	; 0x01
    4472:	80 ff       	sbrs	r24, 0
    4474:	05 c0       	rjmp	.+10     	; 0x4480 <TMRSRVC_process+0x44>
    4476:	8e 81       	ldd	r24, Y+6	; 0x06
    4478:	88 23       	and	r24, r24
    447a:	11 f4       	brne	.+4      	; 0x4480 <TMRSRVC_process+0x44>
    447c:	81 e0       	ldi	r24, 0x01	; 1
    447e:	8e 83       	std	Y+6, r24	; 0x06
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	81 ff       	sbrs	r24, 1
    4484:	03 c0       	rjmp	.+6      	; 0x448c <TMRSRVC_process+0x50>
    4486:	ef 81       	ldd	r30, Y+7	; 0x07
    4488:	f8 85       	ldd	r31, Y+8	; 0x08
    448a:	09 95       	icall
    448c:	80 91 02 05 	lds	r24, 0x0502
    4490:	82 30       	cpi	r24, 0x02	; 2
    4492:	a8 f0       	brcs	.+42     	; 0x44be <TMRSRVC_process+0x82>
    4494:	f8 01       	movw	r30, r16
    4496:	82 81       	ldd	r24, Z+2	; 0x02
    4498:	93 81       	ldd	r25, Z+3	; 0x03
    449a:	90 93 04 05 	sts	0x0504, r25
    449e:	80 93 03 05 	sts	0x0503, r24
    44a2:	13 82       	std	Z+3, r1	; 0x03
    44a4:	12 82       	std	Z+2, r1	; 0x02
    44a6:	e0 91 00 00 	lds	r30, 0x0000
    44aa:	f0 91 01 00 	lds	r31, 0x0001
    44ae:	84 81       	ldd	r24, Z+4	; 0x04
    44b0:	95 81       	ldd	r25, Z+5	; 0x05
    44b2:	18 16       	cp	r1, r24
    44b4:	19 06       	cpc	r1, r25
    44b6:	3c f0       	brlt	.+14     	; 0x44c6 <TMRSRVC_process+0x8a>
    44b8:	ff 24       	eor	r15, r15
    44ba:	f3 94       	inc	r15
    44bc:	05 c0       	rjmp	.+10     	; 0x44c8 <TMRSRVC_process+0x8c>
    44be:	10 92 04 05 	sts	0x0504, r1
    44c2:	10 92 03 05 	sts	0x0503, r1
    44c6:	ff 24       	eor	r15, r15
    44c8:	80 91 02 05 	lds	r24, 0x0502
    44cc:	81 50       	subi	r24, 0x01	; 1
    44ce:	80 93 02 05 	sts	0x0502, r24
    44d2:	80 91 02 05 	lds	r24, 0x0502
    44d6:	88 23       	and	r24, r24
    44d8:	11 f4       	brne	.+4      	; 0x44de <TMRSRVC_process+0xa2>
    44da:	0e 94 89 22 	call	0x4512	; 0x4512 <TMRSRVC_stop>
    44de:	89 81       	ldd	r24, Y+1	; 0x01
    44e0:	82 ff       	sbrs	r24, 2
    44e2:	08 c0       	rjmp	.+16     	; 0x44f4 <TMRSRVC_process+0xb8>
    44e4:	8a 81       	ldd	r24, Y+2	; 0x02
    44e6:	9b 81       	ldd	r25, Y+3	; 0x03
    44e8:	9d 83       	std	Y+5, r25	; 0x05
    44ea:	8c 83       	std	Y+4, r24	; 0x04
    44ec:	c8 01       	movw	r24, r16
    44ee:	0e 94 d9 1d 	call	0x3bb2	; 0x3bb2 <TMRSRVC_insert>
    44f2:	08 c0       	rjmp	.+16     	; 0x4504 <TMRSRVC_process+0xc8>
    44f4:	c8 01       	movw	r24, r16
    44f6:	0e 94 92 2b 	call	0x5724	; 0x5724 <free>
    44fa:	89 81       	ldd	r24, Y+1	; 0x01
    44fc:	8f 7e       	andi	r24, 0xEF	; 239
    44fe:	89 83       	std	Y+1, r24	; 0x01
    4500:	01 c0       	rjmp	.+2      	; 0x4504 <TMRSRVC_process+0xc8>
    4502:	ff 24       	eor	r15, r15
    4504:	8f 2d       	mov	r24, r15
    4506:	df 91       	pop	r29
    4508:	cf 91       	pop	r28
    450a:	1f 91       	pop	r17
    450c:	0f 91       	pop	r16
    450e:	ff 90       	pop	r15
    4510:	08 95       	ret

00004512 <TMRSRVC_stop>:
    4512:	10 92 9b 02 	sts	0x029B, r1
    4516:	08 95       	ret

00004518 <STEPPER_process_pwm>:
    4518:	fc 01       	movw	r30, r24
    451a:	80 91 b9 04 	lds	r24, 0x04B9
    451e:	82 30       	cpi	r24, 0x02	; 2
    4520:	69 f4       	brne	.+26     	; 0x453c <STEPPER_process_pwm+0x24>
    4522:	80 91 a0 02 	lds	r24, 0x02A0
    4526:	91 e0       	ldi	r25, 0x01	; 1
    4528:	89 27       	eor	r24, r25
    452a:	80 93 a0 02 	sts	0x02A0, r24
    452e:	88 23       	and	r24, r24
    4530:	09 f0       	breq	.+2      	; 0x4534 <STEPPER_process_pwm+0x1c>
    4532:	3e c0       	rjmp	.+124    	; 0x45b0 <STEPPER_process_pwm+0x98>
    4534:	80 81       	ld	r24, Z
    4536:	83 7e       	andi	r24, 0xE3	; 227
    4538:	80 83       	st	Z, r24
    453a:	3a c0       	rjmp	.+116    	; 0x45b0 <STEPPER_process_pwm+0x98>
    453c:	80 91 98 04 	lds	r24, 0x0498
    4540:	90 91 99 04 	lds	r25, 0x0499
    4544:	c3 97       	sbiw	r24, 0x33	; 51
    4546:	a4 f5       	brge	.+104    	; 0x45b0 <STEPPER_process_pwm+0x98>
    4548:	66 23       	and	r22, r22
    454a:	d1 f0       	breq	.+52     	; 0x4580 <STEPPER_process_pwm+0x68>
    454c:	20 91 98 04 	lds	r18, 0x0498
    4550:	30 91 99 04 	lds	r19, 0x0499
    4554:	80 e6       	ldi	r24, 0x60	; 96
    4556:	90 e0       	ldi	r25, 0x00	; 0
    4558:	bc 01       	movw	r22, r24
    455a:	26 9f       	mul	r18, r22
    455c:	c0 01       	movw	r24, r0
    455e:	27 9f       	mul	r18, r23
    4560:	90 0d       	add	r25, r0
    4562:	36 9f       	mul	r19, r22
    4564:	90 0d       	add	r25, r0
    4566:	11 24       	eor	r1, r1
    4568:	88 0f       	add	r24, r24
    456a:	89 2f       	mov	r24, r25
    456c:	88 1f       	adc	r24, r24
    456e:	99 0b       	sbc	r25, r25
    4570:	90 93 ad 04 	sts	0x04AD, r25
    4574:	80 93 ac 04 	sts	0x04AC, r24
    4578:	81 e0       	ldi	r24, 0x01	; 1
    457a:	80 93 9e 02 	sts	0x029E, r24
    457e:	18 c0       	rjmp	.+48     	; 0x45b0 <STEPPER_process_pwm+0x98>
    4580:	80 91 9e 02 	lds	r24, 0x029E
    4584:	88 23       	and	r24, r24
    4586:	a1 f0       	breq	.+40     	; 0x45b0 <STEPPER_process_pwm+0x98>
    4588:	80 91 ac 04 	lds	r24, 0x04AC
    458c:	90 91 ad 04 	lds	r25, 0x04AD
    4590:	01 97       	sbiw	r24, 0x01	; 1
    4592:	90 93 ad 04 	sts	0x04AD, r25
    4596:	80 93 ac 04 	sts	0x04AC, r24
    459a:	80 91 ac 04 	lds	r24, 0x04AC
    459e:	90 91 ad 04 	lds	r25, 0x04AD
    45a2:	89 2b       	or	r24, r25
    45a4:	29 f4       	brne	.+10     	; 0x45b0 <STEPPER_process_pwm+0x98>
    45a6:	80 81       	ld	r24, Z
    45a8:	83 7e       	andi	r24, 0xE3	; 227
    45aa:	80 83       	st	Z, r24
    45ac:	10 92 9e 02 	sts	0x029E, r1
    45b0:	80 91 ba 04 	lds	r24, 0x04BA
    45b4:	82 30       	cpi	r24, 0x02	; 2
    45b6:	69 f4       	brne	.+26     	; 0x45d2 <STEPPER_process_pwm+0xba>
    45b8:	80 91 9f 02 	lds	r24, 0x029F
    45bc:	91 e0       	ldi	r25, 0x01	; 1
    45be:	89 27       	eor	r24, r25
    45c0:	80 93 9f 02 	sts	0x029F, r24
    45c4:	88 23       	and	r24, r24
    45c6:	09 f0       	breq	.+2      	; 0x45ca <STEPPER_process_pwm+0xb2>
    45c8:	3e c0       	rjmp	.+124    	; 0x4646 <STEPPER_process_pwm+0x12e>
    45ca:	80 81       	ld	r24, Z
    45cc:	8f 71       	andi	r24, 0x1F	; 31
    45ce:	80 83       	st	Z, r24
    45d0:	08 95       	ret
    45d2:	80 91 9a 04 	lds	r24, 0x049A
    45d6:	90 91 9b 04 	lds	r25, 0x049B
    45da:	c3 97       	sbiw	r24, 0x33	; 51
    45dc:	a4 f5       	brge	.+104    	; 0x4646 <STEPPER_process_pwm+0x12e>
    45de:	44 23       	and	r20, r20
    45e0:	d1 f0       	breq	.+52     	; 0x4616 <STEPPER_process_pwm+0xfe>
    45e2:	20 91 9a 04 	lds	r18, 0x049A
    45e6:	30 91 9b 04 	lds	r19, 0x049B
    45ea:	80 e6       	ldi	r24, 0x60	; 96
    45ec:	90 e0       	ldi	r25, 0x00	; 0
    45ee:	ac 01       	movw	r20, r24
    45f0:	24 9f       	mul	r18, r20
    45f2:	c0 01       	movw	r24, r0
    45f4:	25 9f       	mul	r18, r21
    45f6:	90 0d       	add	r25, r0
    45f8:	34 9f       	mul	r19, r20
    45fa:	90 0d       	add	r25, r0
    45fc:	11 24       	eor	r1, r1
    45fe:	88 0f       	add	r24, r24
    4600:	89 2f       	mov	r24, r25
    4602:	88 1f       	adc	r24, r24
    4604:	99 0b       	sbc	r25, r25
    4606:	90 93 af 04 	sts	0x04AF, r25
    460a:	80 93 ae 04 	sts	0x04AE, r24
    460e:	81 e0       	ldi	r24, 0x01	; 1
    4610:	80 93 9d 02 	sts	0x029D, r24
    4614:	08 95       	ret
    4616:	80 91 9d 02 	lds	r24, 0x029D
    461a:	88 23       	and	r24, r24
    461c:	a1 f0       	breq	.+40     	; 0x4646 <STEPPER_process_pwm+0x12e>
    461e:	80 91 ae 04 	lds	r24, 0x04AE
    4622:	90 91 af 04 	lds	r25, 0x04AF
    4626:	01 97       	sbiw	r24, 0x01	; 1
    4628:	90 93 af 04 	sts	0x04AF, r25
    462c:	80 93 ae 04 	sts	0x04AE, r24
    4630:	80 91 ae 04 	lds	r24, 0x04AE
    4634:	90 91 af 04 	lds	r25, 0x04AF
    4638:	89 2b       	or	r24, r25
    463a:	29 f4       	brne	.+10     	; 0x4646 <STEPPER_process_pwm+0x12e>
    463c:	80 81       	ld	r24, Z
    463e:	8f 71       	andi	r24, 0x1F	; 31
    4640:	80 83       	st	Z, r24
    4642:	10 92 9d 02 	sts	0x029D, r1
    4646:	08 95       	ret

00004648 <__subsf3>:
    4648:	50 58       	subi	r21, 0x80	; 128

0000464a <__addsf3>:
    464a:	bb 27       	eor	r27, r27
    464c:	aa 27       	eor	r26, r26
    464e:	0e d0       	rcall	.+28     	; 0x466c <__addsf3x>
    4650:	75 c1       	rjmp	.+746    	; 0x493c <__fp_round>
    4652:	66 d1       	rcall	.+716    	; 0x4920 <__fp_pscA>
    4654:	30 f0       	brcs	.+12     	; 0x4662 <__addsf3+0x18>
    4656:	6b d1       	rcall	.+726    	; 0x492e <__fp_pscB>
    4658:	20 f0       	brcs	.+8      	; 0x4662 <__addsf3+0x18>
    465a:	31 f4       	brne	.+12     	; 0x4668 <__addsf3+0x1e>
    465c:	9f 3f       	cpi	r25, 0xFF	; 255
    465e:	11 f4       	brne	.+4      	; 0x4664 <__addsf3+0x1a>
    4660:	1e f4       	brtc	.+6      	; 0x4668 <__addsf3+0x1e>
    4662:	5b c1       	rjmp	.+694    	; 0x491a <__fp_nan>
    4664:	0e f4       	brtc	.+2      	; 0x4668 <__addsf3+0x1e>
    4666:	e0 95       	com	r30
    4668:	e7 fb       	bst	r30, 7
    466a:	51 c1       	rjmp	.+674    	; 0x490e <__fp_inf>

0000466c <__addsf3x>:
    466c:	e9 2f       	mov	r30, r25
    466e:	77 d1       	rcall	.+750    	; 0x495e <__fp_split3>
    4670:	80 f3       	brcs	.-32     	; 0x4652 <__addsf3+0x8>
    4672:	ba 17       	cp	r27, r26
    4674:	62 07       	cpc	r22, r18
    4676:	73 07       	cpc	r23, r19
    4678:	84 07       	cpc	r24, r20
    467a:	95 07       	cpc	r25, r21
    467c:	18 f0       	brcs	.+6      	; 0x4684 <__addsf3x+0x18>
    467e:	71 f4       	brne	.+28     	; 0x469c <__addsf3x+0x30>
    4680:	9e f5       	brtc	.+102    	; 0x46e8 <__addsf3x+0x7c>
    4682:	8f c1       	rjmp	.+798    	; 0x49a2 <__fp_zero>
    4684:	0e f4       	brtc	.+2      	; 0x4688 <__addsf3x+0x1c>
    4686:	e0 95       	com	r30
    4688:	0b 2e       	mov	r0, r27
    468a:	ba 2f       	mov	r27, r26
    468c:	a0 2d       	mov	r26, r0
    468e:	0b 01       	movw	r0, r22
    4690:	b9 01       	movw	r22, r18
    4692:	90 01       	movw	r18, r0
    4694:	0c 01       	movw	r0, r24
    4696:	ca 01       	movw	r24, r20
    4698:	a0 01       	movw	r20, r0
    469a:	11 24       	eor	r1, r1
    469c:	ff 27       	eor	r31, r31
    469e:	59 1b       	sub	r21, r25
    46a0:	99 f0       	breq	.+38     	; 0x46c8 <__addsf3x+0x5c>
    46a2:	59 3f       	cpi	r21, 0xF9	; 249
    46a4:	50 f4       	brcc	.+20     	; 0x46ba <__addsf3x+0x4e>
    46a6:	50 3e       	cpi	r21, 0xE0	; 224
    46a8:	68 f1       	brcs	.+90     	; 0x4704 <__addsf3x+0x98>
    46aa:	1a 16       	cp	r1, r26
    46ac:	f0 40       	sbci	r31, 0x00	; 0
    46ae:	a2 2f       	mov	r26, r18
    46b0:	23 2f       	mov	r18, r19
    46b2:	34 2f       	mov	r19, r20
    46b4:	44 27       	eor	r20, r20
    46b6:	58 5f       	subi	r21, 0xF8	; 248
    46b8:	f3 cf       	rjmp	.-26     	; 0x46a0 <__addsf3x+0x34>
    46ba:	46 95       	lsr	r20
    46bc:	37 95       	ror	r19
    46be:	27 95       	ror	r18
    46c0:	a7 95       	ror	r26
    46c2:	f0 40       	sbci	r31, 0x00	; 0
    46c4:	53 95       	inc	r21
    46c6:	c9 f7       	brne	.-14     	; 0x46ba <__addsf3x+0x4e>
    46c8:	7e f4       	brtc	.+30     	; 0x46e8 <__addsf3x+0x7c>
    46ca:	1f 16       	cp	r1, r31
    46cc:	ba 0b       	sbc	r27, r26
    46ce:	62 0b       	sbc	r22, r18
    46d0:	73 0b       	sbc	r23, r19
    46d2:	84 0b       	sbc	r24, r20
    46d4:	ba f0       	brmi	.+46     	; 0x4704 <__addsf3x+0x98>
    46d6:	91 50       	subi	r25, 0x01	; 1
    46d8:	a1 f0       	breq	.+40     	; 0x4702 <__addsf3x+0x96>
    46da:	ff 0f       	add	r31, r31
    46dc:	bb 1f       	adc	r27, r27
    46de:	66 1f       	adc	r22, r22
    46e0:	77 1f       	adc	r23, r23
    46e2:	88 1f       	adc	r24, r24
    46e4:	c2 f7       	brpl	.-16     	; 0x46d6 <__addsf3x+0x6a>
    46e6:	0e c0       	rjmp	.+28     	; 0x4704 <__addsf3x+0x98>
    46e8:	ba 0f       	add	r27, r26
    46ea:	62 1f       	adc	r22, r18
    46ec:	73 1f       	adc	r23, r19
    46ee:	84 1f       	adc	r24, r20
    46f0:	48 f4       	brcc	.+18     	; 0x4704 <__addsf3x+0x98>
    46f2:	87 95       	ror	r24
    46f4:	77 95       	ror	r23
    46f6:	67 95       	ror	r22
    46f8:	b7 95       	ror	r27
    46fa:	f7 95       	ror	r31
    46fc:	9e 3f       	cpi	r25, 0xFE	; 254
    46fe:	08 f0       	brcs	.+2      	; 0x4702 <__addsf3x+0x96>
    4700:	b3 cf       	rjmp	.-154    	; 0x4668 <__addsf3+0x1e>
    4702:	93 95       	inc	r25
    4704:	88 0f       	add	r24, r24
    4706:	08 f0       	brcs	.+2      	; 0x470a <__addsf3x+0x9e>
    4708:	99 27       	eor	r25, r25
    470a:	ee 0f       	add	r30, r30
    470c:	97 95       	ror	r25
    470e:	87 95       	ror	r24
    4710:	08 95       	ret

00004712 <__cmpsf2>:
    4712:	d9 d0       	rcall	.+434    	; 0x48c6 <__fp_cmp>
    4714:	08 f4       	brcc	.+2      	; 0x4718 <__cmpsf2+0x6>
    4716:	81 e0       	ldi	r24, 0x01	; 1
    4718:	08 95       	ret

0000471a <__divsf3>:
    471a:	0c d0       	rcall	.+24     	; 0x4734 <__divsf3x>
    471c:	0f c1       	rjmp	.+542    	; 0x493c <__fp_round>
    471e:	07 d1       	rcall	.+526    	; 0x492e <__fp_pscB>
    4720:	40 f0       	brcs	.+16     	; 0x4732 <__divsf3+0x18>
    4722:	fe d0       	rcall	.+508    	; 0x4920 <__fp_pscA>
    4724:	30 f0       	brcs	.+12     	; 0x4732 <__divsf3+0x18>
    4726:	21 f4       	brne	.+8      	; 0x4730 <__divsf3+0x16>
    4728:	5f 3f       	cpi	r21, 0xFF	; 255
    472a:	19 f0       	breq	.+6      	; 0x4732 <__divsf3+0x18>
    472c:	f0 c0       	rjmp	.+480    	; 0x490e <__fp_inf>
    472e:	51 11       	cpse	r21, r1
    4730:	39 c1       	rjmp	.+626    	; 0x49a4 <__fp_szero>
    4732:	f3 c0       	rjmp	.+486    	; 0x491a <__fp_nan>

00004734 <__divsf3x>:
    4734:	14 d1       	rcall	.+552    	; 0x495e <__fp_split3>
    4736:	98 f3       	brcs	.-26     	; 0x471e <__divsf3+0x4>

00004738 <__divsf3_pse>:
    4738:	99 23       	and	r25, r25
    473a:	c9 f3       	breq	.-14     	; 0x472e <__divsf3+0x14>
    473c:	55 23       	and	r21, r21
    473e:	b1 f3       	breq	.-20     	; 0x472c <__divsf3+0x12>
    4740:	95 1b       	sub	r25, r21
    4742:	55 0b       	sbc	r21, r21
    4744:	bb 27       	eor	r27, r27
    4746:	aa 27       	eor	r26, r26
    4748:	62 17       	cp	r22, r18
    474a:	73 07       	cpc	r23, r19
    474c:	84 07       	cpc	r24, r20
    474e:	38 f0       	brcs	.+14     	; 0x475e <__divsf3_pse+0x26>
    4750:	9f 5f       	subi	r25, 0xFF	; 255
    4752:	5f 4f       	sbci	r21, 0xFF	; 255
    4754:	22 0f       	add	r18, r18
    4756:	33 1f       	adc	r19, r19
    4758:	44 1f       	adc	r20, r20
    475a:	aa 1f       	adc	r26, r26
    475c:	a9 f3       	breq	.-22     	; 0x4748 <__divsf3_pse+0x10>
    475e:	33 d0       	rcall	.+102    	; 0x47c6 <__divsf3_pse+0x8e>
    4760:	0e 2e       	mov	r0, r30
    4762:	3a f0       	brmi	.+14     	; 0x4772 <__divsf3_pse+0x3a>
    4764:	e0 e8       	ldi	r30, 0x80	; 128
    4766:	30 d0       	rcall	.+96     	; 0x47c8 <__divsf3_pse+0x90>
    4768:	91 50       	subi	r25, 0x01	; 1
    476a:	50 40       	sbci	r21, 0x00	; 0
    476c:	e6 95       	lsr	r30
    476e:	00 1c       	adc	r0, r0
    4770:	ca f7       	brpl	.-14     	; 0x4764 <__divsf3_pse+0x2c>
    4772:	29 d0       	rcall	.+82     	; 0x47c6 <__divsf3_pse+0x8e>
    4774:	fe 2f       	mov	r31, r30
    4776:	27 d0       	rcall	.+78     	; 0x47c6 <__divsf3_pse+0x8e>
    4778:	66 0f       	add	r22, r22
    477a:	77 1f       	adc	r23, r23
    477c:	88 1f       	adc	r24, r24
    477e:	bb 1f       	adc	r27, r27
    4780:	26 17       	cp	r18, r22
    4782:	37 07       	cpc	r19, r23
    4784:	48 07       	cpc	r20, r24
    4786:	ab 07       	cpc	r26, r27
    4788:	b0 e8       	ldi	r27, 0x80	; 128
    478a:	09 f0       	breq	.+2      	; 0x478e <__divsf3_pse+0x56>
    478c:	bb 0b       	sbc	r27, r27
    478e:	80 2d       	mov	r24, r0
    4790:	bf 01       	movw	r22, r30
    4792:	ff 27       	eor	r31, r31
    4794:	93 58       	subi	r25, 0x83	; 131
    4796:	5f 4f       	sbci	r21, 0xFF	; 255
    4798:	2a f0       	brmi	.+10     	; 0x47a4 <__divsf3_pse+0x6c>
    479a:	9e 3f       	cpi	r25, 0xFE	; 254
    479c:	51 05       	cpc	r21, r1
    479e:	68 f0       	brcs	.+26     	; 0x47ba <__divsf3_pse+0x82>
    47a0:	b6 c0       	rjmp	.+364    	; 0x490e <__fp_inf>
    47a2:	00 c1       	rjmp	.+512    	; 0x49a4 <__fp_szero>
    47a4:	5f 3f       	cpi	r21, 0xFF	; 255
    47a6:	ec f3       	brlt	.-6      	; 0x47a2 <__divsf3_pse+0x6a>
    47a8:	98 3e       	cpi	r25, 0xE8	; 232
    47aa:	dc f3       	brlt	.-10     	; 0x47a2 <__divsf3_pse+0x6a>
    47ac:	86 95       	lsr	r24
    47ae:	77 95       	ror	r23
    47b0:	67 95       	ror	r22
    47b2:	b7 95       	ror	r27
    47b4:	f7 95       	ror	r31
    47b6:	9f 5f       	subi	r25, 0xFF	; 255
    47b8:	c9 f7       	brne	.-14     	; 0x47ac <__divsf3_pse+0x74>
    47ba:	88 0f       	add	r24, r24
    47bc:	91 1d       	adc	r25, r1
    47be:	96 95       	lsr	r25
    47c0:	87 95       	ror	r24
    47c2:	97 f9       	bld	r25, 7
    47c4:	08 95       	ret
    47c6:	e1 e0       	ldi	r30, 0x01	; 1
    47c8:	66 0f       	add	r22, r22
    47ca:	77 1f       	adc	r23, r23
    47cc:	88 1f       	adc	r24, r24
    47ce:	bb 1f       	adc	r27, r27
    47d0:	62 17       	cp	r22, r18
    47d2:	73 07       	cpc	r23, r19
    47d4:	84 07       	cpc	r24, r20
    47d6:	ba 07       	cpc	r27, r26
    47d8:	20 f0       	brcs	.+8      	; 0x47e2 <__divsf3_pse+0xaa>
    47da:	62 1b       	sub	r22, r18
    47dc:	73 0b       	sbc	r23, r19
    47de:	84 0b       	sbc	r24, r20
    47e0:	ba 0b       	sbc	r27, r26
    47e2:	ee 1f       	adc	r30, r30
    47e4:	88 f7       	brcc	.-30     	; 0x47c8 <__divsf3_pse+0x90>
    47e6:	e0 95       	com	r30
    47e8:	08 95       	ret

000047ea <__fixsfsi>:
    47ea:	04 d0       	rcall	.+8      	; 0x47f4 <__fixunssfsi>
    47ec:	68 94       	set
    47ee:	b1 11       	cpse	r27, r1
    47f0:	d9 c0       	rjmp	.+434    	; 0x49a4 <__fp_szero>
    47f2:	08 95       	ret

000047f4 <__fixunssfsi>:
    47f4:	bc d0       	rcall	.+376    	; 0x496e <__fp_splitA>
    47f6:	88 f0       	brcs	.+34     	; 0x481a <__fixunssfsi+0x26>
    47f8:	9f 57       	subi	r25, 0x7F	; 127
    47fa:	90 f0       	brcs	.+36     	; 0x4820 <__fixunssfsi+0x2c>
    47fc:	b9 2f       	mov	r27, r25
    47fe:	99 27       	eor	r25, r25
    4800:	b7 51       	subi	r27, 0x17	; 23
    4802:	a0 f0       	brcs	.+40     	; 0x482c <__fixunssfsi+0x38>
    4804:	d1 f0       	breq	.+52     	; 0x483a <__fixunssfsi+0x46>
    4806:	66 0f       	add	r22, r22
    4808:	77 1f       	adc	r23, r23
    480a:	88 1f       	adc	r24, r24
    480c:	99 1f       	adc	r25, r25
    480e:	1a f0       	brmi	.+6      	; 0x4816 <__fixunssfsi+0x22>
    4810:	ba 95       	dec	r27
    4812:	c9 f7       	brne	.-14     	; 0x4806 <__fixunssfsi+0x12>
    4814:	12 c0       	rjmp	.+36     	; 0x483a <__fixunssfsi+0x46>
    4816:	b1 30       	cpi	r27, 0x01	; 1
    4818:	81 f0       	breq	.+32     	; 0x483a <__fixunssfsi+0x46>
    481a:	c3 d0       	rcall	.+390    	; 0x49a2 <__fp_zero>
    481c:	b1 e0       	ldi	r27, 0x01	; 1
    481e:	08 95       	ret
    4820:	c0 c0       	rjmp	.+384    	; 0x49a2 <__fp_zero>
    4822:	67 2f       	mov	r22, r23
    4824:	78 2f       	mov	r23, r24
    4826:	88 27       	eor	r24, r24
    4828:	b8 5f       	subi	r27, 0xF8	; 248
    482a:	39 f0       	breq	.+14     	; 0x483a <__fixunssfsi+0x46>
    482c:	b9 3f       	cpi	r27, 0xF9	; 249
    482e:	cc f3       	brlt	.-14     	; 0x4822 <__fixunssfsi+0x2e>
    4830:	86 95       	lsr	r24
    4832:	77 95       	ror	r23
    4834:	67 95       	ror	r22
    4836:	b3 95       	inc	r27
    4838:	d9 f7       	brne	.-10     	; 0x4830 <__fixunssfsi+0x3c>
    483a:	3e f4       	brtc	.+14     	; 0x484a <__fixunssfsi+0x56>
    483c:	90 95       	com	r25
    483e:	80 95       	com	r24
    4840:	70 95       	com	r23
    4842:	61 95       	neg	r22
    4844:	7f 4f       	sbci	r23, 0xFF	; 255
    4846:	8f 4f       	sbci	r24, 0xFF	; 255
    4848:	9f 4f       	sbci	r25, 0xFF	; 255
    484a:	08 95       	ret

0000484c <__floatunsisf>:
    484c:	e8 94       	clt
    484e:	09 c0       	rjmp	.+18     	; 0x4862 <__floatsisf+0x12>

00004850 <__floatsisf>:
    4850:	97 fb       	bst	r25, 7
    4852:	3e f4       	brtc	.+14     	; 0x4862 <__floatsisf+0x12>
    4854:	90 95       	com	r25
    4856:	80 95       	com	r24
    4858:	70 95       	com	r23
    485a:	61 95       	neg	r22
    485c:	7f 4f       	sbci	r23, 0xFF	; 255
    485e:	8f 4f       	sbci	r24, 0xFF	; 255
    4860:	9f 4f       	sbci	r25, 0xFF	; 255
    4862:	99 23       	and	r25, r25
    4864:	a9 f0       	breq	.+42     	; 0x4890 <__floatsisf+0x40>
    4866:	f9 2f       	mov	r31, r25
    4868:	96 e9       	ldi	r25, 0x96	; 150
    486a:	bb 27       	eor	r27, r27
    486c:	93 95       	inc	r25
    486e:	f6 95       	lsr	r31
    4870:	87 95       	ror	r24
    4872:	77 95       	ror	r23
    4874:	67 95       	ror	r22
    4876:	b7 95       	ror	r27
    4878:	f1 11       	cpse	r31, r1
    487a:	f8 cf       	rjmp	.-16     	; 0x486c <__floatsisf+0x1c>
    487c:	fa f4       	brpl	.+62     	; 0x48bc <__floatsisf+0x6c>
    487e:	bb 0f       	add	r27, r27
    4880:	11 f4       	brne	.+4      	; 0x4886 <__floatsisf+0x36>
    4882:	60 ff       	sbrs	r22, 0
    4884:	1b c0       	rjmp	.+54     	; 0x48bc <__floatsisf+0x6c>
    4886:	6f 5f       	subi	r22, 0xFF	; 255
    4888:	7f 4f       	sbci	r23, 0xFF	; 255
    488a:	8f 4f       	sbci	r24, 0xFF	; 255
    488c:	9f 4f       	sbci	r25, 0xFF	; 255
    488e:	16 c0       	rjmp	.+44     	; 0x48bc <__floatsisf+0x6c>
    4890:	88 23       	and	r24, r24
    4892:	11 f0       	breq	.+4      	; 0x4898 <__floatsisf+0x48>
    4894:	96 e9       	ldi	r25, 0x96	; 150
    4896:	11 c0       	rjmp	.+34     	; 0x48ba <__floatsisf+0x6a>
    4898:	77 23       	and	r23, r23
    489a:	21 f0       	breq	.+8      	; 0x48a4 <__floatsisf+0x54>
    489c:	9e e8       	ldi	r25, 0x8E	; 142
    489e:	87 2f       	mov	r24, r23
    48a0:	76 2f       	mov	r23, r22
    48a2:	05 c0       	rjmp	.+10     	; 0x48ae <__floatsisf+0x5e>
    48a4:	66 23       	and	r22, r22
    48a6:	71 f0       	breq	.+28     	; 0x48c4 <__floatsisf+0x74>
    48a8:	96 e8       	ldi	r25, 0x86	; 134
    48aa:	86 2f       	mov	r24, r22
    48ac:	70 e0       	ldi	r23, 0x00	; 0
    48ae:	60 e0       	ldi	r22, 0x00	; 0
    48b0:	2a f0       	brmi	.+10     	; 0x48bc <__floatsisf+0x6c>
    48b2:	9a 95       	dec	r25
    48b4:	66 0f       	add	r22, r22
    48b6:	77 1f       	adc	r23, r23
    48b8:	88 1f       	adc	r24, r24
    48ba:	da f7       	brpl	.-10     	; 0x48b2 <__floatsisf+0x62>
    48bc:	88 0f       	add	r24, r24
    48be:	96 95       	lsr	r25
    48c0:	87 95       	ror	r24
    48c2:	97 f9       	bld	r25, 7
    48c4:	08 95       	ret

000048c6 <__fp_cmp>:
    48c6:	99 0f       	add	r25, r25
    48c8:	00 08       	sbc	r0, r0
    48ca:	55 0f       	add	r21, r21
    48cc:	aa 0b       	sbc	r26, r26
    48ce:	e0 e8       	ldi	r30, 0x80	; 128
    48d0:	fe ef       	ldi	r31, 0xFE	; 254
    48d2:	16 16       	cp	r1, r22
    48d4:	17 06       	cpc	r1, r23
    48d6:	e8 07       	cpc	r30, r24
    48d8:	f9 07       	cpc	r31, r25
    48da:	c0 f0       	brcs	.+48     	; 0x490c <__fp_cmp+0x46>
    48dc:	12 16       	cp	r1, r18
    48de:	13 06       	cpc	r1, r19
    48e0:	e4 07       	cpc	r30, r20
    48e2:	f5 07       	cpc	r31, r21
    48e4:	98 f0       	brcs	.+38     	; 0x490c <__fp_cmp+0x46>
    48e6:	62 1b       	sub	r22, r18
    48e8:	73 0b       	sbc	r23, r19
    48ea:	84 0b       	sbc	r24, r20
    48ec:	95 0b       	sbc	r25, r21
    48ee:	39 f4       	brne	.+14     	; 0x48fe <__fp_cmp+0x38>
    48f0:	0a 26       	eor	r0, r26
    48f2:	61 f0       	breq	.+24     	; 0x490c <__fp_cmp+0x46>
    48f4:	23 2b       	or	r18, r19
    48f6:	24 2b       	or	r18, r20
    48f8:	25 2b       	or	r18, r21
    48fa:	21 f4       	brne	.+8      	; 0x4904 <__fp_cmp+0x3e>
    48fc:	08 95       	ret
    48fe:	0a 26       	eor	r0, r26
    4900:	09 f4       	brne	.+2      	; 0x4904 <__fp_cmp+0x3e>
    4902:	a1 40       	sbci	r26, 0x01	; 1
    4904:	a6 95       	lsr	r26
    4906:	8f ef       	ldi	r24, 0xFF	; 255
    4908:	81 1d       	adc	r24, r1
    490a:	81 1d       	adc	r24, r1
    490c:	08 95       	ret

0000490e <__fp_inf>:
    490e:	97 f9       	bld	r25, 7
    4910:	9f 67       	ori	r25, 0x7F	; 127
    4912:	80 e8       	ldi	r24, 0x80	; 128
    4914:	70 e0       	ldi	r23, 0x00	; 0
    4916:	60 e0       	ldi	r22, 0x00	; 0
    4918:	08 95       	ret

0000491a <__fp_nan>:
    491a:	9f ef       	ldi	r25, 0xFF	; 255
    491c:	80 ec       	ldi	r24, 0xC0	; 192
    491e:	08 95       	ret

00004920 <__fp_pscA>:
    4920:	00 24       	eor	r0, r0
    4922:	0a 94       	dec	r0
    4924:	16 16       	cp	r1, r22
    4926:	17 06       	cpc	r1, r23
    4928:	18 06       	cpc	r1, r24
    492a:	09 06       	cpc	r0, r25
    492c:	08 95       	ret

0000492e <__fp_pscB>:
    492e:	00 24       	eor	r0, r0
    4930:	0a 94       	dec	r0
    4932:	12 16       	cp	r1, r18
    4934:	13 06       	cpc	r1, r19
    4936:	14 06       	cpc	r1, r20
    4938:	05 06       	cpc	r0, r21
    493a:	08 95       	ret

0000493c <__fp_round>:
    493c:	09 2e       	mov	r0, r25
    493e:	03 94       	inc	r0
    4940:	00 0c       	add	r0, r0
    4942:	11 f4       	brne	.+4      	; 0x4948 <__fp_round+0xc>
    4944:	88 23       	and	r24, r24
    4946:	52 f0       	brmi	.+20     	; 0x495c <__fp_round+0x20>
    4948:	bb 0f       	add	r27, r27
    494a:	40 f4       	brcc	.+16     	; 0x495c <__fp_round+0x20>
    494c:	bf 2b       	or	r27, r31
    494e:	11 f4       	brne	.+4      	; 0x4954 <__fp_round+0x18>
    4950:	60 ff       	sbrs	r22, 0
    4952:	04 c0       	rjmp	.+8      	; 0x495c <__fp_round+0x20>
    4954:	6f 5f       	subi	r22, 0xFF	; 255
    4956:	7f 4f       	sbci	r23, 0xFF	; 255
    4958:	8f 4f       	sbci	r24, 0xFF	; 255
    495a:	9f 4f       	sbci	r25, 0xFF	; 255
    495c:	08 95       	ret

0000495e <__fp_split3>:
    495e:	57 fd       	sbrc	r21, 7
    4960:	90 58       	subi	r25, 0x80	; 128
    4962:	44 0f       	add	r20, r20
    4964:	55 1f       	adc	r21, r21
    4966:	59 f0       	breq	.+22     	; 0x497e <__fp_splitA+0x10>
    4968:	5f 3f       	cpi	r21, 0xFF	; 255
    496a:	71 f0       	breq	.+28     	; 0x4988 <__fp_splitA+0x1a>
    496c:	47 95       	ror	r20

0000496e <__fp_splitA>:
    496e:	88 0f       	add	r24, r24
    4970:	97 fb       	bst	r25, 7
    4972:	99 1f       	adc	r25, r25
    4974:	61 f0       	breq	.+24     	; 0x498e <__fp_splitA+0x20>
    4976:	9f 3f       	cpi	r25, 0xFF	; 255
    4978:	79 f0       	breq	.+30     	; 0x4998 <__fp_splitA+0x2a>
    497a:	87 95       	ror	r24
    497c:	08 95       	ret
    497e:	12 16       	cp	r1, r18
    4980:	13 06       	cpc	r1, r19
    4982:	14 06       	cpc	r1, r20
    4984:	55 1f       	adc	r21, r21
    4986:	f2 cf       	rjmp	.-28     	; 0x496c <__fp_split3+0xe>
    4988:	46 95       	lsr	r20
    498a:	f1 df       	rcall	.-30     	; 0x496e <__fp_splitA>
    498c:	08 c0       	rjmp	.+16     	; 0x499e <__fp_splitA+0x30>
    498e:	16 16       	cp	r1, r22
    4990:	17 06       	cpc	r1, r23
    4992:	18 06       	cpc	r1, r24
    4994:	99 1f       	adc	r25, r25
    4996:	f1 cf       	rjmp	.-30     	; 0x497a <__fp_splitA+0xc>
    4998:	86 95       	lsr	r24
    499a:	71 05       	cpc	r23, r1
    499c:	61 05       	cpc	r22, r1
    499e:	08 94       	sec
    49a0:	08 95       	ret

000049a2 <__fp_zero>:
    49a2:	e8 94       	clt

000049a4 <__fp_szero>:
    49a4:	bb 27       	eor	r27, r27
    49a6:	66 27       	eor	r22, r22
    49a8:	77 27       	eor	r23, r23
    49aa:	cb 01       	movw	r24, r22
    49ac:	97 f9       	bld	r25, 7
    49ae:	08 95       	ret

000049b0 <__gesf2>:
    49b0:	8a df       	rcall	.-236    	; 0x48c6 <__fp_cmp>
    49b2:	08 f4       	brcc	.+2      	; 0x49b6 <__gesf2+0x6>
    49b4:	8f ef       	ldi	r24, 0xFF	; 255
    49b6:	08 95       	ret

000049b8 <lrint>:
    49b8:	da df       	rcall	.-76     	; 0x496e <__fp_splitA>
    49ba:	a8 f1       	brcs	.+106    	; 0x4a26 <lrint+0x6e>
    49bc:	9e 57       	subi	r25, 0x7E	; 126
    49be:	a8 f1       	brcs	.+106    	; 0x4a2a <lrint+0x72>
    49c0:	98 51       	subi	r25, 0x18	; 24
    49c2:	60 f0       	brcs	.+24     	; 0x49dc <lrint+0x24>
    49c4:	39 f1       	breq	.+78     	; 0x4a14 <lrint+0x5c>
    49c6:	98 30       	cpi	r25, 0x08	; 8
    49c8:	70 f5       	brcc	.+92     	; 0x4a26 <lrint+0x6e>
    49ca:	09 2e       	mov	r0, r25
    49cc:	99 27       	eor	r25, r25
    49ce:	66 0f       	add	r22, r22
    49d0:	77 1f       	adc	r23, r23
    49d2:	88 1f       	adc	r24, r24
    49d4:	99 1f       	adc	r25, r25
    49d6:	0a 94       	dec	r0
    49d8:	d1 f7       	brne	.-12     	; 0x49ce <lrint+0x16>
    49da:	1c c0       	rjmp	.+56     	; 0x4a14 <lrint+0x5c>
    49dc:	bb 27       	eor	r27, r27
    49de:	99 3f       	cpi	r25, 0xF9	; 249
    49e0:	4c f4       	brge	.+18     	; 0x49f4 <lrint+0x3c>
    49e2:	b1 11       	cpse	r27, r1
    49e4:	b1 e0       	ldi	r27, 0x01	; 1
    49e6:	b6 2b       	or	r27, r22
    49e8:	67 2f       	mov	r22, r23
    49ea:	78 2f       	mov	r23, r24
    49ec:	88 27       	eor	r24, r24
    49ee:	98 5f       	subi	r25, 0xF8	; 248
    49f0:	b1 f7       	brne	.-20     	; 0x49de <lrint+0x26>
    49f2:	08 c0       	rjmp	.+16     	; 0x4a04 <lrint+0x4c>
    49f4:	86 95       	lsr	r24
    49f6:	77 95       	ror	r23
    49f8:	67 95       	ror	r22
    49fa:	b7 95       	ror	r27
    49fc:	08 f4       	brcc	.+2      	; 0x4a00 <lrint+0x48>
    49fe:	b1 60       	ori	r27, 0x01	; 1
    4a00:	93 95       	inc	r25
    4a02:	c1 f7       	brne	.-16     	; 0x49f4 <lrint+0x3c>
    4a04:	bb 0f       	add	r27, r27
    4a06:	30 f4       	brcc	.+12     	; 0x4a14 <lrint+0x5c>
    4a08:	11 f4       	brne	.+4      	; 0x4a0e <lrint+0x56>
    4a0a:	60 ff       	sbrs	r22, 0
    4a0c:	03 c0       	rjmp	.+6      	; 0x4a14 <lrint+0x5c>
    4a0e:	6f 5f       	subi	r22, 0xFF	; 255
    4a10:	7f 4f       	sbci	r23, 0xFF	; 255
    4a12:	8f 4f       	sbci	r24, 0xFF	; 255
    4a14:	3e f4       	brtc	.+14     	; 0x4a24 <lrint+0x6c>
    4a16:	90 95       	com	r25
    4a18:	80 95       	com	r24
    4a1a:	70 95       	com	r23
    4a1c:	61 95       	neg	r22
    4a1e:	7f 4f       	sbci	r23, 0xFF	; 255
    4a20:	8f 4f       	sbci	r24, 0xFF	; 255
    4a22:	9f 4f       	sbci	r25, 0xFF	; 255
    4a24:	08 95       	ret
    4a26:	68 94       	set
    4a28:	bd cf       	rjmp	.-134    	; 0x49a4 <__fp_szero>
    4a2a:	bb cf       	rjmp	.-138    	; 0x49a2 <__fp_zero>

00004a2c <__mulsf3>:
    4a2c:	0b d0       	rcall	.+22     	; 0x4a44 <__mulsf3x>
    4a2e:	86 cf       	rjmp	.-244    	; 0x493c <__fp_round>
    4a30:	77 df       	rcall	.-274    	; 0x4920 <__fp_pscA>
    4a32:	28 f0       	brcs	.+10     	; 0x4a3e <__mulsf3+0x12>
    4a34:	7c df       	rcall	.-264    	; 0x492e <__fp_pscB>
    4a36:	18 f0       	brcs	.+6      	; 0x4a3e <__mulsf3+0x12>
    4a38:	95 23       	and	r25, r21
    4a3a:	09 f0       	breq	.+2      	; 0x4a3e <__mulsf3+0x12>
    4a3c:	68 cf       	rjmp	.-304    	; 0x490e <__fp_inf>
    4a3e:	6d cf       	rjmp	.-294    	; 0x491a <__fp_nan>
    4a40:	11 24       	eor	r1, r1
    4a42:	b0 cf       	rjmp	.-160    	; 0x49a4 <__fp_szero>

00004a44 <__mulsf3x>:
    4a44:	8c df       	rcall	.-232    	; 0x495e <__fp_split3>
    4a46:	a0 f3       	brcs	.-24     	; 0x4a30 <__mulsf3+0x4>

00004a48 <__mulsf3_pse>:
    4a48:	95 9f       	mul	r25, r21
    4a4a:	d1 f3       	breq	.-12     	; 0x4a40 <__mulsf3+0x14>
    4a4c:	95 0f       	add	r25, r21
    4a4e:	50 e0       	ldi	r21, 0x00	; 0
    4a50:	55 1f       	adc	r21, r21
    4a52:	62 9f       	mul	r22, r18
    4a54:	f0 01       	movw	r30, r0
    4a56:	72 9f       	mul	r23, r18
    4a58:	bb 27       	eor	r27, r27
    4a5a:	f0 0d       	add	r31, r0
    4a5c:	b1 1d       	adc	r27, r1
    4a5e:	63 9f       	mul	r22, r19
    4a60:	aa 27       	eor	r26, r26
    4a62:	f0 0d       	add	r31, r0
    4a64:	b1 1d       	adc	r27, r1
    4a66:	aa 1f       	adc	r26, r26
    4a68:	64 9f       	mul	r22, r20
    4a6a:	66 27       	eor	r22, r22
    4a6c:	b0 0d       	add	r27, r0
    4a6e:	a1 1d       	adc	r26, r1
    4a70:	66 1f       	adc	r22, r22
    4a72:	82 9f       	mul	r24, r18
    4a74:	22 27       	eor	r18, r18
    4a76:	b0 0d       	add	r27, r0
    4a78:	a1 1d       	adc	r26, r1
    4a7a:	62 1f       	adc	r22, r18
    4a7c:	73 9f       	mul	r23, r19
    4a7e:	b0 0d       	add	r27, r0
    4a80:	a1 1d       	adc	r26, r1
    4a82:	62 1f       	adc	r22, r18
    4a84:	83 9f       	mul	r24, r19
    4a86:	a0 0d       	add	r26, r0
    4a88:	61 1d       	adc	r22, r1
    4a8a:	22 1f       	adc	r18, r18
    4a8c:	74 9f       	mul	r23, r20
    4a8e:	33 27       	eor	r19, r19
    4a90:	a0 0d       	add	r26, r0
    4a92:	61 1d       	adc	r22, r1
    4a94:	23 1f       	adc	r18, r19
    4a96:	84 9f       	mul	r24, r20
    4a98:	60 0d       	add	r22, r0
    4a9a:	21 1d       	adc	r18, r1
    4a9c:	82 2f       	mov	r24, r18
    4a9e:	76 2f       	mov	r23, r22
    4aa0:	6a 2f       	mov	r22, r26
    4aa2:	11 24       	eor	r1, r1
    4aa4:	9f 57       	subi	r25, 0x7F	; 127
    4aa6:	50 40       	sbci	r21, 0x00	; 0
    4aa8:	8a f0       	brmi	.+34     	; 0x4acc <__mulsf3_pse+0x84>
    4aaa:	e1 f0       	breq	.+56     	; 0x4ae4 <__mulsf3_pse+0x9c>
    4aac:	88 23       	and	r24, r24
    4aae:	4a f0       	brmi	.+18     	; 0x4ac2 <__mulsf3_pse+0x7a>
    4ab0:	ee 0f       	add	r30, r30
    4ab2:	ff 1f       	adc	r31, r31
    4ab4:	bb 1f       	adc	r27, r27
    4ab6:	66 1f       	adc	r22, r22
    4ab8:	77 1f       	adc	r23, r23
    4aba:	88 1f       	adc	r24, r24
    4abc:	91 50       	subi	r25, 0x01	; 1
    4abe:	50 40       	sbci	r21, 0x00	; 0
    4ac0:	a9 f7       	brne	.-22     	; 0x4aac <__mulsf3_pse+0x64>
    4ac2:	9e 3f       	cpi	r25, 0xFE	; 254
    4ac4:	51 05       	cpc	r21, r1
    4ac6:	70 f0       	brcs	.+28     	; 0x4ae4 <__mulsf3_pse+0x9c>
    4ac8:	22 cf       	rjmp	.-444    	; 0x490e <__fp_inf>
    4aca:	6c cf       	rjmp	.-296    	; 0x49a4 <__fp_szero>
    4acc:	5f 3f       	cpi	r21, 0xFF	; 255
    4ace:	ec f3       	brlt	.-6      	; 0x4aca <__mulsf3_pse+0x82>
    4ad0:	98 3e       	cpi	r25, 0xE8	; 232
    4ad2:	dc f3       	brlt	.-10     	; 0x4aca <__mulsf3_pse+0x82>
    4ad4:	86 95       	lsr	r24
    4ad6:	77 95       	ror	r23
    4ad8:	67 95       	ror	r22
    4ada:	b7 95       	ror	r27
    4adc:	f7 95       	ror	r31
    4ade:	e7 95       	ror	r30
    4ae0:	9f 5f       	subi	r25, 0xFF	; 255
    4ae2:	c1 f7       	brne	.-16     	; 0x4ad4 <__mulsf3_pse+0x8c>
    4ae4:	fe 2b       	or	r31, r30
    4ae6:	88 0f       	add	r24, r24
    4ae8:	91 1d       	adc	r25, r1
    4aea:	96 95       	lsr	r25
    4aec:	87 95       	ror	r24
    4aee:	97 f9       	bld	r25, 7
    4af0:	08 95       	ret

00004af2 <pow>:
    4af2:	fa 01       	movw	r30, r20
    4af4:	ee 0f       	add	r30, r30
    4af6:	ff 1f       	adc	r31, r31
    4af8:	30 96       	adiw	r30, 0x00	; 0
    4afa:	21 05       	cpc	r18, r1
    4afc:	31 05       	cpc	r19, r1
    4afe:	99 f1       	breq	.+102    	; 0x4b66 <pow+0x74>
    4b00:	61 15       	cp	r22, r1
    4b02:	71 05       	cpc	r23, r1
    4b04:	61 f4       	brne	.+24     	; 0x4b1e <pow+0x2c>
    4b06:	80 38       	cpi	r24, 0x80	; 128
    4b08:	bf e3       	ldi	r27, 0x3F	; 63
    4b0a:	9b 07       	cpc	r25, r27
    4b0c:	49 f1       	breq	.+82     	; 0x4b60 <pow+0x6e>
    4b0e:	68 94       	set
    4b10:	90 38       	cpi	r25, 0x80	; 128
    4b12:	81 05       	cpc	r24, r1
    4b14:	61 f0       	breq	.+24     	; 0x4b2e <pow+0x3c>
    4b16:	80 38       	cpi	r24, 0x80	; 128
    4b18:	bf ef       	ldi	r27, 0xFF	; 255
    4b1a:	9b 07       	cpc	r25, r27
    4b1c:	41 f0       	breq	.+16     	; 0x4b2e <pow+0x3c>
    4b1e:	99 23       	and	r25, r25
    4b20:	42 f5       	brpl	.+80     	; 0x4b72 <pow+0x80>
    4b22:	ff 3f       	cpi	r31, 0xFF	; 255
    4b24:	e1 05       	cpc	r30, r1
    4b26:	31 05       	cpc	r19, r1
    4b28:	21 05       	cpc	r18, r1
    4b2a:	11 f1       	breq	.+68     	; 0x4b70 <pow+0x7e>
    4b2c:	e8 94       	clt
    4b2e:	08 94       	sec
    4b30:	e7 95       	ror	r30
    4b32:	d9 01       	movw	r26, r18
    4b34:	aa 23       	and	r26, r26
    4b36:	29 f4       	brne	.+10     	; 0x4b42 <pow+0x50>
    4b38:	ab 2f       	mov	r26, r27
    4b3a:	be 2f       	mov	r27, r30
    4b3c:	f8 5f       	subi	r31, 0xF8	; 248
    4b3e:	d0 f3       	brcs	.-12     	; 0x4b34 <pow+0x42>
    4b40:	10 c0       	rjmp	.+32     	; 0x4b62 <pow+0x70>
    4b42:	ff 5f       	subi	r31, 0xFF	; 255
    4b44:	70 f4       	brcc	.+28     	; 0x4b62 <pow+0x70>
    4b46:	a6 95       	lsr	r26
    4b48:	e0 f7       	brcc	.-8      	; 0x4b42 <pow+0x50>
    4b4a:	f7 39       	cpi	r31, 0x97	; 151
    4b4c:	50 f0       	brcs	.+20     	; 0x4b62 <pow+0x70>
    4b4e:	19 f0       	breq	.+6      	; 0x4b56 <pow+0x64>
    4b50:	ff 3a       	cpi	r31, 0xAF	; 175
    4b52:	38 f4       	brcc	.+14     	; 0x4b62 <pow+0x70>
    4b54:	9f 77       	andi	r25, 0x7F	; 127
    4b56:	9f 93       	push	r25
    4b58:	0c d0       	rcall	.+24     	; 0x4b72 <pow+0x80>
    4b5a:	0f 90       	pop	r0
    4b5c:	07 fc       	sbrc	r0, 7
    4b5e:	90 58       	subi	r25, 0x80	; 128
    4b60:	08 95       	ret
    4b62:	3e f0       	brts	.+14     	; 0x4b72 <pow+0x80>
    4b64:	da ce       	rjmp	.-588    	; 0x491a <__fp_nan>
    4b66:	60 e0       	ldi	r22, 0x00	; 0
    4b68:	70 e0       	ldi	r23, 0x00	; 0
    4b6a:	80 e8       	ldi	r24, 0x80	; 128
    4b6c:	9f e3       	ldi	r25, 0x3F	; 63
    4b6e:	08 95       	ret
    4b70:	4f e7       	ldi	r20, 0x7F	; 127
    4b72:	9f 77       	andi	r25, 0x7F	; 127
    4b74:	5f 93       	push	r21
    4b76:	4f 93       	push	r20
    4b78:	3f 93       	push	r19
    4b7a:	2f 93       	push	r18
    4b7c:	9e d0       	rcall	.+316    	; 0x4cba <log>
    4b7e:	2f 91       	pop	r18
    4b80:	3f 91       	pop	r19
    4b82:	4f 91       	pop	r20
    4b84:	5f 91       	pop	r21
    4b86:	52 df       	rcall	.-348    	; 0x4a2c <__mulsf3>
    4b88:	05 c0       	rjmp	.+10     	; 0x4b94 <exp>
    4b8a:	19 f4       	brne	.+6      	; 0x4b92 <pow+0xa0>
    4b8c:	0e f0       	brts	.+2      	; 0x4b90 <pow+0x9e>
    4b8e:	bf ce       	rjmp	.-642    	; 0x490e <__fp_inf>
    4b90:	08 cf       	rjmp	.-496    	; 0x49a2 <__fp_zero>
    4b92:	c3 ce       	rjmp	.-634    	; 0x491a <__fp_nan>

00004b94 <exp>:
    4b94:	ec de       	rcall	.-552    	; 0x496e <__fp_splitA>
    4b96:	c8 f3       	brcs	.-14     	; 0x4b8a <pow+0x98>
    4b98:	96 38       	cpi	r25, 0x86	; 134
    4b9a:	c0 f7       	brcc	.-16     	; 0x4b8c <pow+0x9a>
    4b9c:	07 f8       	bld	r0, 7
    4b9e:	0f 92       	push	r0
    4ba0:	e8 94       	clt
    4ba2:	2b e3       	ldi	r18, 0x3B	; 59
    4ba4:	3a ea       	ldi	r19, 0xAA	; 170
    4ba6:	48 eb       	ldi	r20, 0xB8	; 184
    4ba8:	5f e7       	ldi	r21, 0x7F	; 127
    4baa:	4e df       	rcall	.-356    	; 0x4a48 <__mulsf3_pse>
    4bac:	0f 92       	push	r0
    4bae:	0f 92       	push	r0
    4bb0:	0f 92       	push	r0
    4bb2:	4d b7       	in	r20, 0x3d	; 61
    4bb4:	5e b7       	in	r21, 0x3e	; 62
    4bb6:	0f 92       	push	r0
    4bb8:	c0 d0       	rcall	.+384    	; 0x4d3a <modf>
    4bba:	e8 ec       	ldi	r30, 0xC8	; 200
    4bbc:	f0 e0       	ldi	r31, 0x00	; 0
    4bbe:	16 d0       	rcall	.+44     	; 0x4bec <__fp_powser>
    4bc0:	4f 91       	pop	r20
    4bc2:	5f 91       	pop	r21
    4bc4:	ef 91       	pop	r30
    4bc6:	ff 91       	pop	r31
    4bc8:	e5 95       	asr	r30
    4bca:	ee 1f       	adc	r30, r30
    4bcc:	ff 1f       	adc	r31, r31
    4bce:	49 f0       	breq	.+18     	; 0x4be2 <exp+0x4e>
    4bd0:	fe 57       	subi	r31, 0x7E	; 126
    4bd2:	e0 68       	ori	r30, 0x80	; 128
    4bd4:	44 27       	eor	r20, r20
    4bd6:	ee 0f       	add	r30, r30
    4bd8:	44 1f       	adc	r20, r20
    4bda:	fa 95       	dec	r31
    4bdc:	e1 f7       	brne	.-8      	; 0x4bd6 <exp+0x42>
    4bde:	41 95       	neg	r20
    4be0:	55 0b       	sbc	r21, r21
    4be2:	32 d0       	rcall	.+100    	; 0x4c48 <ldexp>
    4be4:	0f 90       	pop	r0
    4be6:	07 fe       	sbrs	r0, 7
    4be8:	26 c0       	rjmp	.+76     	; 0x4c36 <inverse>
    4bea:	08 95       	ret

00004bec <__fp_powser>:
    4bec:	df 93       	push	r29
    4bee:	cf 93       	push	r28
    4bf0:	1f 93       	push	r17
    4bf2:	0f 93       	push	r16
    4bf4:	ff 92       	push	r15
    4bf6:	ef 92       	push	r14
    4bf8:	df 92       	push	r13
    4bfa:	7b 01       	movw	r14, r22
    4bfc:	8c 01       	movw	r16, r24
    4bfe:	68 94       	set
    4c00:	05 c0       	rjmp	.+10     	; 0x4c0c <__fp_powser+0x20>
    4c02:	da 2e       	mov	r13, r26
    4c04:	ef 01       	movw	r28, r30
    4c06:	1e df       	rcall	.-452    	; 0x4a44 <__mulsf3x>
    4c08:	fe 01       	movw	r30, r28
    4c0a:	e8 94       	clt
    4c0c:	a5 91       	lpm	r26, Z+
    4c0e:	25 91       	lpm	r18, Z+
    4c10:	35 91       	lpm	r19, Z+
    4c12:	45 91       	lpm	r20, Z+
    4c14:	55 91       	lpm	r21, Z+
    4c16:	ae f3       	brts	.-22     	; 0x4c02 <__fp_powser+0x16>
    4c18:	ef 01       	movw	r28, r30
    4c1a:	28 dd       	rcall	.-1456   	; 0x466c <__addsf3x>
    4c1c:	fe 01       	movw	r30, r28
    4c1e:	97 01       	movw	r18, r14
    4c20:	a8 01       	movw	r20, r16
    4c22:	da 94       	dec	r13
    4c24:	79 f7       	brne	.-34     	; 0x4c04 <__fp_powser+0x18>
    4c26:	df 90       	pop	r13
    4c28:	ef 90       	pop	r14
    4c2a:	ff 90       	pop	r15
    4c2c:	0f 91       	pop	r16
    4c2e:	1f 91       	pop	r17
    4c30:	cf 91       	pop	r28
    4c32:	df 91       	pop	r29
    4c34:	08 95       	ret

00004c36 <inverse>:
    4c36:	9b 01       	movw	r18, r22
    4c38:	ac 01       	movw	r20, r24
    4c3a:	60 e0       	ldi	r22, 0x00	; 0
    4c3c:	70 e0       	ldi	r23, 0x00	; 0
    4c3e:	80 e8       	ldi	r24, 0x80	; 128
    4c40:	9f e3       	ldi	r25, 0x3F	; 63
    4c42:	6b cd       	rjmp	.-1322   	; 0x471a <__divsf3>
    4c44:	64 ce       	rjmp	.-824    	; 0x490e <__fp_inf>
    4c46:	ac c0       	rjmp	.+344    	; 0x4da0 <__fp_mpack>

00004c48 <ldexp>:
    4c48:	92 de       	rcall	.-732    	; 0x496e <__fp_splitA>
    4c4a:	e8 f3       	brcs	.-6      	; 0x4c46 <inverse+0x10>
    4c4c:	99 23       	and	r25, r25
    4c4e:	d9 f3       	breq	.-10     	; 0x4c46 <inverse+0x10>
    4c50:	94 0f       	add	r25, r20
    4c52:	51 1d       	adc	r21, r1
    4c54:	bb f3       	brvs	.-18     	; 0x4c44 <inverse+0xe>
    4c56:	91 50       	subi	r25, 0x01	; 1
    4c58:	50 40       	sbci	r21, 0x00	; 0
    4c5a:	94 f0       	brlt	.+36     	; 0x4c80 <ldexp+0x38>
    4c5c:	59 f0       	breq	.+22     	; 0x4c74 <ldexp+0x2c>
    4c5e:	88 23       	and	r24, r24
    4c60:	32 f0       	brmi	.+12     	; 0x4c6e <ldexp+0x26>
    4c62:	66 0f       	add	r22, r22
    4c64:	77 1f       	adc	r23, r23
    4c66:	88 1f       	adc	r24, r24
    4c68:	91 50       	subi	r25, 0x01	; 1
    4c6a:	50 40       	sbci	r21, 0x00	; 0
    4c6c:	c1 f7       	brne	.-16     	; 0x4c5e <ldexp+0x16>
    4c6e:	9e 3f       	cpi	r25, 0xFE	; 254
    4c70:	51 05       	cpc	r21, r1
    4c72:	44 f7       	brge	.-48     	; 0x4c44 <inverse+0xe>
    4c74:	88 0f       	add	r24, r24
    4c76:	91 1d       	adc	r25, r1
    4c78:	96 95       	lsr	r25
    4c7a:	87 95       	ror	r24
    4c7c:	97 f9       	bld	r25, 7
    4c7e:	08 95       	ret
    4c80:	5f 3f       	cpi	r21, 0xFF	; 255
    4c82:	ac f0       	brlt	.+42     	; 0x4cae <ldexp+0x66>
    4c84:	98 3e       	cpi	r25, 0xE8	; 232
    4c86:	9c f0       	brlt	.+38     	; 0x4cae <ldexp+0x66>
    4c88:	bb 27       	eor	r27, r27
    4c8a:	86 95       	lsr	r24
    4c8c:	77 95       	ror	r23
    4c8e:	67 95       	ror	r22
    4c90:	b7 95       	ror	r27
    4c92:	08 f4       	brcc	.+2      	; 0x4c96 <ldexp+0x4e>
    4c94:	b1 60       	ori	r27, 0x01	; 1
    4c96:	93 95       	inc	r25
    4c98:	c1 f7       	brne	.-16     	; 0x4c8a <ldexp+0x42>
    4c9a:	bb 0f       	add	r27, r27
    4c9c:	58 f7       	brcc	.-42     	; 0x4c74 <ldexp+0x2c>
    4c9e:	11 f4       	brne	.+4      	; 0x4ca4 <ldexp+0x5c>
    4ca0:	60 ff       	sbrs	r22, 0
    4ca2:	e8 cf       	rjmp	.-48     	; 0x4c74 <ldexp+0x2c>
    4ca4:	6f 5f       	subi	r22, 0xFF	; 255
    4ca6:	7f 4f       	sbci	r23, 0xFF	; 255
    4ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    4caa:	9f 4f       	sbci	r25, 0xFF	; 255
    4cac:	e3 cf       	rjmp	.-58     	; 0x4c74 <ldexp+0x2c>
    4cae:	7a ce       	rjmp	.-780    	; 0x49a4 <__fp_szero>
    4cb0:	0e f0       	brts	.+2      	; 0x4cb4 <ldexp+0x6c>
    4cb2:	76 c0       	rjmp	.+236    	; 0x4da0 <__fp_mpack>
    4cb4:	32 ce       	rjmp	.-924    	; 0x491a <__fp_nan>
    4cb6:	68 94       	set
    4cb8:	2a ce       	rjmp	.-940    	; 0x490e <__fp_inf>

00004cba <log>:
    4cba:	59 de       	rcall	.-846    	; 0x496e <__fp_splitA>
    4cbc:	c8 f3       	brcs	.-14     	; 0x4cb0 <ldexp+0x68>
    4cbe:	99 23       	and	r25, r25
    4cc0:	d1 f3       	breq	.-12     	; 0x4cb6 <ldexp+0x6e>
    4cc2:	c6 f3       	brts	.-16     	; 0x4cb4 <ldexp+0x6c>
    4cc4:	df 93       	push	r29
    4cc6:	cf 93       	push	r28
    4cc8:	1f 93       	push	r17
    4cca:	0f 93       	push	r16
    4ccc:	ff 92       	push	r15
    4cce:	c9 2f       	mov	r28, r25
    4cd0:	dd 27       	eor	r29, r29
    4cd2:	88 23       	and	r24, r24
    4cd4:	2a f0       	brmi	.+10     	; 0x4ce0 <log+0x26>
    4cd6:	21 97       	sbiw	r28, 0x01	; 1
    4cd8:	66 0f       	add	r22, r22
    4cda:	77 1f       	adc	r23, r23
    4cdc:	88 1f       	adc	r24, r24
    4cde:	da f7       	brpl	.-10     	; 0x4cd6 <log+0x1c>
    4ce0:	20 e0       	ldi	r18, 0x00	; 0
    4ce2:	30 e0       	ldi	r19, 0x00	; 0
    4ce4:	40 e8       	ldi	r20, 0x80	; 128
    4ce6:	5f eb       	ldi	r21, 0xBF	; 191
    4ce8:	9f e3       	ldi	r25, 0x3F	; 63
    4cea:	88 39       	cpi	r24, 0x98	; 152
    4cec:	20 f0       	brcs	.+8      	; 0x4cf6 <log+0x3c>
    4cee:	80 3e       	cpi	r24, 0xE0	; 224
    4cf0:	30 f0       	brcs	.+12     	; 0x4cfe <log+0x44>
    4cf2:	21 96       	adiw	r28, 0x01	; 1
    4cf4:	8f 77       	andi	r24, 0x7F	; 127
    4cf6:	a9 dc       	rcall	.-1710   	; 0x464a <__addsf3>
    4cf8:	e0 ef       	ldi	r30, 0xF0	; 240
    4cfa:	f0 e0       	ldi	r31, 0x00	; 0
    4cfc:	03 c0       	rjmp	.+6      	; 0x4d04 <log+0x4a>
    4cfe:	a5 dc       	rcall	.-1718   	; 0x464a <__addsf3>
    4d00:	ed e1       	ldi	r30, 0x1D	; 29
    4d02:	f1 e0       	ldi	r31, 0x01	; 1
    4d04:	73 df       	rcall	.-282    	; 0x4bec <__fp_powser>
    4d06:	8b 01       	movw	r16, r22
    4d08:	be 01       	movw	r22, r28
    4d0a:	ec 01       	movw	r28, r24
    4d0c:	fb 2e       	mov	r15, r27
    4d0e:	6f 57       	subi	r22, 0x7F	; 127
    4d10:	71 09       	sbc	r23, r1
    4d12:	75 95       	asr	r23
    4d14:	77 1f       	adc	r23, r23
    4d16:	88 0b       	sbc	r24, r24
    4d18:	99 0b       	sbc	r25, r25
    4d1a:	9a dd       	rcall	.-1228   	; 0x4850 <__floatsisf>
    4d1c:	28 e1       	ldi	r18, 0x18	; 24
    4d1e:	32 e7       	ldi	r19, 0x72	; 114
    4d20:	41 e3       	ldi	r20, 0x31	; 49
    4d22:	5f e3       	ldi	r21, 0x3F	; 63
    4d24:	8f de       	rcall	.-738    	; 0x4a44 <__mulsf3x>
    4d26:	af 2d       	mov	r26, r15
    4d28:	98 01       	movw	r18, r16
    4d2a:	ae 01       	movw	r20, r28
    4d2c:	ff 90       	pop	r15
    4d2e:	0f 91       	pop	r16
    4d30:	1f 91       	pop	r17
    4d32:	cf 91       	pop	r28
    4d34:	df 91       	pop	r29
    4d36:	9a dc       	rcall	.-1740   	; 0x466c <__addsf3x>
    4d38:	01 ce       	rjmp	.-1022   	; 0x493c <__fp_round>

00004d3a <modf>:
    4d3a:	fa 01       	movw	r30, r20
    4d3c:	dc 01       	movw	r26, r24
    4d3e:	aa 0f       	add	r26, r26
    4d40:	bb 1f       	adc	r27, r27
    4d42:	9b 01       	movw	r18, r22
    4d44:	ac 01       	movw	r20, r24
    4d46:	bf 57       	subi	r27, 0x7F	; 127
    4d48:	28 f4       	brcc	.+10     	; 0x4d54 <modf+0x1a>
    4d4a:	22 27       	eor	r18, r18
    4d4c:	33 27       	eor	r19, r19
    4d4e:	44 27       	eor	r20, r20
    4d50:	50 78       	andi	r21, 0x80	; 128
    4d52:	1f c0       	rjmp	.+62     	; 0x4d92 <modf+0x58>
    4d54:	b7 51       	subi	r27, 0x17	; 23
    4d56:	88 f4       	brcc	.+34     	; 0x4d7a <modf+0x40>
    4d58:	ab 2f       	mov	r26, r27
    4d5a:	00 24       	eor	r0, r0
    4d5c:	46 95       	lsr	r20
    4d5e:	37 95       	ror	r19
    4d60:	27 95       	ror	r18
    4d62:	01 1c       	adc	r0, r1
    4d64:	a3 95       	inc	r26
    4d66:	d2 f3       	brmi	.-12     	; 0x4d5c <modf+0x22>
    4d68:	00 20       	and	r0, r0
    4d6a:	69 f0       	breq	.+26     	; 0x4d86 <modf+0x4c>
    4d6c:	22 0f       	add	r18, r18
    4d6e:	33 1f       	adc	r19, r19
    4d70:	44 1f       	adc	r20, r20
    4d72:	b3 95       	inc	r27
    4d74:	da f3       	brmi	.-10     	; 0x4d6c <modf+0x32>
    4d76:	0d d0       	rcall	.+26     	; 0x4d92 <modf+0x58>
    4d78:	67 cc       	rjmp	.-1842   	; 0x4648 <__subsf3>
    4d7a:	61 30       	cpi	r22, 0x01	; 1
    4d7c:	71 05       	cpc	r23, r1
    4d7e:	a0 e8       	ldi	r26, 0x80	; 128
    4d80:	8a 07       	cpc	r24, r26
    4d82:	b9 46       	sbci	r27, 0x69	; 105
    4d84:	30 f4       	brcc	.+12     	; 0x4d92 <modf+0x58>
    4d86:	9b 01       	movw	r18, r22
    4d88:	ac 01       	movw	r20, r24
    4d8a:	66 27       	eor	r22, r22
    4d8c:	77 27       	eor	r23, r23
    4d8e:	88 27       	eor	r24, r24
    4d90:	90 78       	andi	r25, 0x80	; 128
    4d92:	30 96       	adiw	r30, 0x00	; 0
    4d94:	21 f0       	breq	.+8      	; 0x4d9e <modf+0x64>
    4d96:	20 83       	st	Z, r18
    4d98:	31 83       	std	Z+1, r19	; 0x01
    4d9a:	42 83       	std	Z+2, r20	; 0x02
    4d9c:	53 83       	std	Z+3, r21	; 0x03
    4d9e:	08 95       	ret

00004da0 <__fp_mpack>:
    4da0:	9f 3f       	cpi	r25, 0xFF	; 255
    4da2:	31 f0       	breq	.+12     	; 0x4db0 <__fp_mpack_finite+0xc>

00004da4 <__fp_mpack_finite>:
    4da4:	91 50       	subi	r25, 0x01	; 1
    4da6:	20 f4       	brcc	.+8      	; 0x4db0 <__fp_mpack_finite+0xc>
    4da8:	87 95       	ror	r24
    4daa:	77 95       	ror	r23
    4dac:	67 95       	ror	r22
    4dae:	b7 95       	ror	r27
    4db0:	88 0f       	add	r24, r24
    4db2:	91 1d       	adc	r25, r1
    4db4:	96 95       	lsr	r25
    4db6:	87 95       	ror	r24
    4db8:	97 f9       	bld	r25, 7
    4dba:	08 95       	ret

00004dbc <vfprintf>:
    4dbc:	a1 e1       	ldi	r26, 0x11	; 17
    4dbe:	b0 e0       	ldi	r27, 0x00	; 0
    4dc0:	e3 ee       	ldi	r30, 0xE3	; 227
    4dc2:	f6 e2       	ldi	r31, 0x26	; 38
    4dc4:	b7 c3       	rjmp	.+1902   	; 0x5534 <__prologue_saves__>
    4dc6:	3c 01       	movw	r6, r24
    4dc8:	7f 87       	std	Y+15, r23	; 0x0f
    4dca:	6e 87       	std	Y+14, r22	; 0x0e
    4dcc:	6a 01       	movw	r12, r20
    4dce:	fc 01       	movw	r30, r24
    4dd0:	17 82       	std	Z+7, r1	; 0x07
    4dd2:	16 82       	std	Z+6, r1	; 0x06
    4dd4:	83 81       	ldd	r24, Z+3	; 0x03
    4dd6:	81 fd       	sbrc	r24, 1
    4dd8:	03 c0       	rjmp	.+6      	; 0x4de0 <vfprintf+0x24>
    4dda:	6f ef       	ldi	r22, 0xFF	; 255
    4ddc:	7f ef       	ldi	r23, 0xFF	; 255
    4dde:	52 c3       	rjmp	.+1700   	; 0x5484 <vfprintf+0x6c8>
    4de0:	9e 01       	movw	r18, r28
    4de2:	2f 5f       	subi	r18, 0xFF	; 255
    4de4:	3f 4f       	sbci	r19, 0xFF	; 255
    4de6:	39 8b       	std	Y+17, r19	; 0x11
    4de8:	28 8b       	std	Y+16, r18	; 0x10
    4dea:	f3 01       	movw	r30, r6
    4dec:	23 81       	ldd	r18, Z+3	; 0x03
    4dee:	ee 85       	ldd	r30, Y+14	; 0x0e
    4df0:	ff 85       	ldd	r31, Y+15	; 0x0f
    4df2:	23 fd       	sbrc	r18, 3
    4df4:	85 91       	lpm	r24, Z+
    4df6:	23 ff       	sbrs	r18, 3
    4df8:	81 91       	ld	r24, Z+
    4dfa:	ff 87       	std	Y+15, r31	; 0x0f
    4dfc:	ee 87       	std	Y+14, r30	; 0x0e
    4dfe:	88 23       	and	r24, r24
    4e00:	09 f4       	brne	.+2      	; 0x4e04 <vfprintf+0x48>
    4e02:	3d c3       	rjmp	.+1658   	; 0x547e <vfprintf+0x6c2>
    4e04:	85 32       	cpi	r24, 0x25	; 37
    4e06:	51 f4       	brne	.+20     	; 0x4e1c <vfprintf+0x60>
    4e08:	ee 85       	ldd	r30, Y+14	; 0x0e
    4e0a:	ff 85       	ldd	r31, Y+15	; 0x0f
    4e0c:	23 fd       	sbrc	r18, 3
    4e0e:	85 91       	lpm	r24, Z+
    4e10:	23 ff       	sbrs	r18, 3
    4e12:	81 91       	ld	r24, Z+
    4e14:	ff 87       	std	Y+15, r31	; 0x0f
    4e16:	ee 87       	std	Y+14, r30	; 0x0e
    4e18:	85 32       	cpi	r24, 0x25	; 37
    4e1a:	21 f4       	brne	.+8      	; 0x4e24 <vfprintf+0x68>
    4e1c:	90 e0       	ldi	r25, 0x00	; 0
    4e1e:	b3 01       	movw	r22, r6
    4e20:	20 d6       	rcall	.+3136   	; 0x5a62 <fputc>
    4e22:	e3 cf       	rjmp	.-58     	; 0x4dea <vfprintf+0x2e>
    4e24:	98 2f       	mov	r25, r24
    4e26:	10 e0       	ldi	r17, 0x00	; 0
    4e28:	88 24       	eor	r8, r8
    4e2a:	99 24       	eor	r9, r9
    4e2c:	10 32       	cpi	r17, 0x20	; 32
    4e2e:	b0 f4       	brcc	.+44     	; 0x4e5c <vfprintf+0xa0>
    4e30:	9b 32       	cpi	r25, 0x2B	; 43
    4e32:	69 f0       	breq	.+26     	; 0x4e4e <vfprintf+0x92>
    4e34:	9c 32       	cpi	r25, 0x2C	; 44
    4e36:	28 f4       	brcc	.+10     	; 0x4e42 <vfprintf+0x86>
    4e38:	90 32       	cpi	r25, 0x20	; 32
    4e3a:	51 f0       	breq	.+20     	; 0x4e50 <vfprintf+0x94>
    4e3c:	93 32       	cpi	r25, 0x23	; 35
    4e3e:	71 f4       	brne	.+28     	; 0x4e5c <vfprintf+0xa0>
    4e40:	0b c0       	rjmp	.+22     	; 0x4e58 <vfprintf+0x9c>
    4e42:	9d 32       	cpi	r25, 0x2D	; 45
    4e44:	39 f0       	breq	.+14     	; 0x4e54 <vfprintf+0x98>
    4e46:	90 33       	cpi	r25, 0x30	; 48
    4e48:	49 f4       	brne	.+18     	; 0x4e5c <vfprintf+0xa0>
    4e4a:	11 60       	ori	r17, 0x01	; 1
    4e4c:	28 c0       	rjmp	.+80     	; 0x4e9e <vfprintf+0xe2>
    4e4e:	12 60       	ori	r17, 0x02	; 2
    4e50:	14 60       	ori	r17, 0x04	; 4
    4e52:	25 c0       	rjmp	.+74     	; 0x4e9e <vfprintf+0xe2>
    4e54:	18 60       	ori	r17, 0x08	; 8
    4e56:	23 c0       	rjmp	.+70     	; 0x4e9e <vfprintf+0xe2>
    4e58:	10 61       	ori	r17, 0x10	; 16
    4e5a:	21 c0       	rjmp	.+66     	; 0x4e9e <vfprintf+0xe2>
    4e5c:	17 fd       	sbrc	r17, 7
    4e5e:	2a c0       	rjmp	.+84     	; 0x4eb4 <vfprintf+0xf8>
    4e60:	89 2f       	mov	r24, r25
    4e62:	80 53       	subi	r24, 0x30	; 48
    4e64:	8a 30       	cpi	r24, 0x0A	; 10
    4e66:	78 f4       	brcc	.+30     	; 0x4e86 <vfprintf+0xca>
    4e68:	16 ff       	sbrs	r17, 6
    4e6a:	06 c0       	rjmp	.+12     	; 0x4e78 <vfprintf+0xbc>
    4e6c:	fa e0       	ldi	r31, 0x0A	; 10
    4e6e:	9f 9e       	mul	r9, r31
    4e70:	90 2c       	mov	r9, r0
    4e72:	11 24       	eor	r1, r1
    4e74:	98 0e       	add	r9, r24
    4e76:	13 c0       	rjmp	.+38     	; 0x4e9e <vfprintf+0xe2>
    4e78:	3a e0       	ldi	r19, 0x0A	; 10
    4e7a:	83 9e       	mul	r8, r19
    4e7c:	80 2c       	mov	r8, r0
    4e7e:	11 24       	eor	r1, r1
    4e80:	88 0e       	add	r8, r24
    4e82:	10 62       	ori	r17, 0x20	; 32
    4e84:	0c c0       	rjmp	.+24     	; 0x4e9e <vfprintf+0xe2>
    4e86:	9e 32       	cpi	r25, 0x2E	; 46
    4e88:	21 f4       	brne	.+8      	; 0x4e92 <vfprintf+0xd6>
    4e8a:	16 fd       	sbrc	r17, 6
    4e8c:	f8 c2       	rjmp	.+1520   	; 0x547e <vfprintf+0x6c2>
    4e8e:	10 64       	ori	r17, 0x40	; 64
    4e90:	06 c0       	rjmp	.+12     	; 0x4e9e <vfprintf+0xe2>
    4e92:	9c 36       	cpi	r25, 0x6C	; 108
    4e94:	11 f4       	brne	.+4      	; 0x4e9a <vfprintf+0xde>
    4e96:	10 68       	ori	r17, 0x80	; 128
    4e98:	02 c0       	rjmp	.+4      	; 0x4e9e <vfprintf+0xe2>
    4e9a:	98 36       	cpi	r25, 0x68	; 104
    4e9c:	59 f4       	brne	.+22     	; 0x4eb4 <vfprintf+0xf8>
    4e9e:	ee 85       	ldd	r30, Y+14	; 0x0e
    4ea0:	ff 85       	ldd	r31, Y+15	; 0x0f
    4ea2:	23 fd       	sbrc	r18, 3
    4ea4:	95 91       	lpm	r25, Z+
    4ea6:	23 ff       	sbrs	r18, 3
    4ea8:	91 91       	ld	r25, Z+
    4eaa:	ff 87       	std	Y+15, r31	; 0x0f
    4eac:	ee 87       	std	Y+14, r30	; 0x0e
    4eae:	99 23       	and	r25, r25
    4eb0:	09 f0       	breq	.+2      	; 0x4eb4 <vfprintf+0xf8>
    4eb2:	bc cf       	rjmp	.-136    	; 0x4e2c <vfprintf+0x70>
    4eb4:	89 2f       	mov	r24, r25
    4eb6:	85 54       	subi	r24, 0x45	; 69
    4eb8:	83 30       	cpi	r24, 0x03	; 3
    4eba:	20 f4       	brcc	.+8      	; 0x4ec4 <vfprintf+0x108>
    4ebc:	81 2f       	mov	r24, r17
    4ebe:	80 61       	ori	r24, 0x10	; 16
    4ec0:	90 5e       	subi	r25, 0xE0	; 224
    4ec2:	07 c0       	rjmp	.+14     	; 0x4ed2 <vfprintf+0x116>
    4ec4:	89 2f       	mov	r24, r25
    4ec6:	85 56       	subi	r24, 0x65	; 101
    4ec8:	83 30       	cpi	r24, 0x03	; 3
    4eca:	08 f0       	brcs	.+2      	; 0x4ece <vfprintf+0x112>
    4ecc:	8f c1       	rjmp	.+798    	; 0x51ec <vfprintf+0x430>
    4ece:	81 2f       	mov	r24, r17
    4ed0:	8f 7e       	andi	r24, 0xEF	; 239
    4ed2:	86 fd       	sbrc	r24, 6
    4ed4:	02 c0       	rjmp	.+4      	; 0x4eda <vfprintf+0x11e>
    4ed6:	76 e0       	ldi	r23, 0x06	; 6
    4ed8:	97 2e       	mov	r9, r23
    4eda:	6f e3       	ldi	r22, 0x3F	; 63
    4edc:	f6 2e       	mov	r15, r22
    4ede:	f8 22       	and	r15, r24
    4ee0:	95 36       	cpi	r25, 0x65	; 101
    4ee2:	19 f4       	brne	.+6      	; 0x4eea <vfprintf+0x12e>
    4ee4:	f0 e4       	ldi	r31, 0x40	; 64
    4ee6:	ff 2a       	or	r15, r31
    4ee8:	07 c0       	rjmp	.+14     	; 0x4ef8 <vfprintf+0x13c>
    4eea:	96 36       	cpi	r25, 0x66	; 102
    4eec:	19 f4       	brne	.+6      	; 0x4ef4 <vfprintf+0x138>
    4eee:	20 e8       	ldi	r18, 0x80	; 128
    4ef0:	f2 2a       	or	r15, r18
    4ef2:	02 c0       	rjmp	.+4      	; 0x4ef8 <vfprintf+0x13c>
    4ef4:	91 10       	cpse	r9, r1
    4ef6:	9a 94       	dec	r9
    4ef8:	f7 fe       	sbrs	r15, 7
    4efa:	0a c0       	rjmp	.+20     	; 0x4f10 <vfprintf+0x154>
    4efc:	3b e3       	ldi	r19, 0x3B	; 59
    4efe:	39 15       	cp	r19, r9
    4f00:	18 f4       	brcc	.+6      	; 0x4f08 <vfprintf+0x14c>
    4f02:	5c e3       	ldi	r21, 0x3C	; 60
    4f04:	b5 2e       	mov	r11, r21
    4f06:	02 c0       	rjmp	.+4      	; 0x4f0c <vfprintf+0x150>
    4f08:	b9 2c       	mov	r11, r9
    4f0a:	b3 94       	inc	r11
    4f0c:	27 e0       	ldi	r18, 0x07	; 7
    4f0e:	09 c0       	rjmp	.+18     	; 0x4f22 <vfprintf+0x166>
    4f10:	47 e0       	ldi	r20, 0x07	; 7
    4f12:	49 15       	cp	r20, r9
    4f14:	20 f4       	brcc	.+8      	; 0x4f1e <vfprintf+0x162>
    4f16:	bb 24       	eor	r11, r11
    4f18:	47 e0       	ldi	r20, 0x07	; 7
    4f1a:	94 2e       	mov	r9, r20
    4f1c:	f7 cf       	rjmp	.-18     	; 0x4f0c <vfprintf+0x150>
    4f1e:	29 2d       	mov	r18, r9
    4f20:	bb 24       	eor	r11, r11
    4f22:	c6 01       	movw	r24, r12
    4f24:	04 96       	adiw	r24, 0x04	; 4
    4f26:	9d 87       	std	Y+13, r25	; 0x0d
    4f28:	8c 87       	std	Y+12, r24	; 0x0c
    4f2a:	f6 01       	movw	r30, r12
    4f2c:	60 81       	ld	r22, Z
    4f2e:	71 81       	ldd	r23, Z+1	; 0x01
    4f30:	82 81       	ldd	r24, Z+2	; 0x02
    4f32:	93 81       	ldd	r25, Z+3	; 0x03
    4f34:	ae 01       	movw	r20, r28
    4f36:	4f 5f       	subi	r20, 0xFF	; 255
    4f38:	5f 4f       	sbci	r21, 0xFF	; 255
    4f3a:	0b 2d       	mov	r16, r11
    4f3c:	a4 d4       	rcall	.+2376   	; 0x5886 <__ftoa_engine>
    4f3e:	6c 01       	movw	r12, r24
    4f40:	09 81       	ldd	r16, Y+1	; 0x01
    4f42:	20 2e       	mov	r2, r16
    4f44:	33 24       	eor	r3, r3
    4f46:	00 ff       	sbrs	r16, 0
    4f48:	04 c0       	rjmp	.+8      	; 0x4f52 <vfprintf+0x196>
    4f4a:	03 fd       	sbrc	r16, 3
    4f4c:	02 c0       	rjmp	.+4      	; 0x4f52 <vfprintf+0x196>
    4f4e:	1d e2       	ldi	r17, 0x2D	; 45
    4f50:	09 c0       	rjmp	.+18     	; 0x4f64 <vfprintf+0x1a8>
    4f52:	f1 fe       	sbrs	r15, 1
    4f54:	02 c0       	rjmp	.+4      	; 0x4f5a <vfprintf+0x19e>
    4f56:	1b e2       	ldi	r17, 0x2B	; 43
    4f58:	05 c0       	rjmp	.+10     	; 0x4f64 <vfprintf+0x1a8>
    4f5a:	f2 fc       	sbrc	r15, 2
    4f5c:	02 c0       	rjmp	.+4      	; 0x4f62 <vfprintf+0x1a6>
    4f5e:	10 e0       	ldi	r17, 0x00	; 0
    4f60:	01 c0       	rjmp	.+2      	; 0x4f64 <vfprintf+0x1a8>
    4f62:	10 e2       	ldi	r17, 0x20	; 32
    4f64:	c1 01       	movw	r24, r2
    4f66:	8c 70       	andi	r24, 0x0C	; 12
    4f68:	90 70       	andi	r25, 0x00	; 0
    4f6a:	89 2b       	or	r24, r25
    4f6c:	a1 f1       	breq	.+104    	; 0x4fd6 <vfprintf+0x21a>
    4f6e:	11 23       	and	r17, r17
    4f70:	11 f4       	brne	.+4      	; 0x4f76 <vfprintf+0x1ba>
    4f72:	83 e0       	ldi	r24, 0x03	; 3
    4f74:	01 c0       	rjmp	.+2      	; 0x4f78 <vfprintf+0x1bc>
    4f76:	84 e0       	ldi	r24, 0x04	; 4
    4f78:	88 15       	cp	r24, r8
    4f7a:	10 f0       	brcs	.+4      	; 0x4f80 <vfprintf+0x1c4>
    4f7c:	88 24       	eor	r8, r8
    4f7e:	09 c0       	rjmp	.+18     	; 0x4f92 <vfprintf+0x1d6>
    4f80:	88 1a       	sub	r8, r24
    4f82:	f3 fc       	sbrc	r15, 3
    4f84:	06 c0       	rjmp	.+12     	; 0x4f92 <vfprintf+0x1d6>
    4f86:	80 e2       	ldi	r24, 0x20	; 32
    4f88:	90 e0       	ldi	r25, 0x00	; 0
    4f8a:	b3 01       	movw	r22, r6
    4f8c:	6a d5       	rcall	.+2772   	; 0x5a62 <fputc>
    4f8e:	8a 94       	dec	r8
    4f90:	d1 f7       	brne	.-12     	; 0x4f86 <vfprintf+0x1ca>
    4f92:	11 23       	and	r17, r17
    4f94:	21 f0       	breq	.+8      	; 0x4f9e <vfprintf+0x1e2>
    4f96:	81 2f       	mov	r24, r17
    4f98:	90 e0       	ldi	r25, 0x00	; 0
    4f9a:	b3 01       	movw	r22, r6
    4f9c:	62 d5       	rcall	.+2756   	; 0x5a62 <fputc>
    4f9e:	23 fe       	sbrs	r2, 3
    4fa0:	03 c0       	rjmp	.+6      	; 0x4fa8 <vfprintf+0x1ec>
    4fa2:	0f e5       	ldi	r16, 0x5F	; 95
    4fa4:	15 e0       	ldi	r17, 0x05	; 5
    4fa6:	0d c0       	rjmp	.+26     	; 0x4fc2 <vfprintf+0x206>
    4fa8:	03 e6       	ldi	r16, 0x63	; 99
    4faa:	15 e0       	ldi	r17, 0x05	; 5
    4fac:	0a c0       	rjmp	.+20     	; 0x4fc2 <vfprintf+0x206>
    4fae:	e1 14       	cp	r14, r1
    4fb0:	f1 04       	cpc	r15, r1
    4fb2:	09 f0       	breq	.+2      	; 0x4fb6 <vfprintf+0x1fa>
    4fb4:	80 52       	subi	r24, 0x20	; 32
    4fb6:	90 e0       	ldi	r25, 0x00	; 0
    4fb8:	b3 01       	movw	r22, r6
    4fba:	53 d5       	rcall	.+2726   	; 0x5a62 <fputc>
    4fbc:	0f 5f       	subi	r16, 0xFF	; 255
    4fbe:	1f 4f       	sbci	r17, 0xFF	; 255
    4fc0:	05 c0       	rjmp	.+10     	; 0x4fcc <vfprintf+0x210>
    4fc2:	ef 2c       	mov	r14, r15
    4fc4:	ff 24       	eor	r15, r15
    4fc6:	f0 e1       	ldi	r31, 0x10	; 16
    4fc8:	ef 22       	and	r14, r31
    4fca:	ff 24       	eor	r15, r15
    4fcc:	f8 01       	movw	r30, r16
    4fce:	84 91       	lpm	r24, Z+
    4fd0:	88 23       	and	r24, r24
    4fd2:	69 f7       	brne	.-38     	; 0x4fae <vfprintf+0x1f2>
    4fd4:	08 c1       	rjmp	.+528    	; 0x51e6 <vfprintf+0x42a>
    4fd6:	f7 fe       	sbrs	r15, 7
    4fd8:	12 c0       	rjmp	.+36     	; 0x4ffe <vfprintf+0x242>
    4fda:	bc 0c       	add	r11, r12
    4fdc:	24 fe       	sbrs	r2, 4
    4fde:	04 c0       	rjmp	.+8      	; 0x4fe8 <vfprintf+0x22c>
    4fe0:	8a 81       	ldd	r24, Y+2	; 0x02
    4fe2:	81 33       	cpi	r24, 0x31	; 49
    4fe4:	09 f4       	brne	.+2      	; 0x4fe8 <vfprintf+0x22c>
    4fe6:	ba 94       	dec	r11
    4fe8:	1b 14       	cp	r1, r11
    4fea:	1c f0       	brlt	.+6      	; 0x4ff2 <vfprintf+0x236>
    4fec:	bb 24       	eor	r11, r11
    4fee:	b3 94       	inc	r11
    4ff0:	2d c0       	rjmp	.+90     	; 0x504c <vfprintf+0x290>
    4ff2:	f8 e0       	ldi	r31, 0x08	; 8
    4ff4:	fb 15       	cp	r31, r11
    4ff6:	50 f5       	brcc	.+84     	; 0x504c <vfprintf+0x290>
    4ff8:	38 e0       	ldi	r19, 0x08	; 8
    4ffa:	b3 2e       	mov	r11, r19
    4ffc:	27 c0       	rjmp	.+78     	; 0x504c <vfprintf+0x290>
    4ffe:	f6 fc       	sbrc	r15, 6
    5000:	25 c0       	rjmp	.+74     	; 0x504c <vfprintf+0x290>
    5002:	89 2d       	mov	r24, r9
    5004:	90 e0       	ldi	r25, 0x00	; 0
    5006:	8c 15       	cp	r24, r12
    5008:	9d 05       	cpc	r25, r13
    500a:	4c f0       	brlt	.+18     	; 0x501e <vfprintf+0x262>
    500c:	2c ef       	ldi	r18, 0xFC	; 252
    500e:	c2 16       	cp	r12, r18
    5010:	2f ef       	ldi	r18, 0xFF	; 255
    5012:	d2 06       	cpc	r13, r18
    5014:	24 f0       	brlt	.+8      	; 0x501e <vfprintf+0x262>
    5016:	30 e8       	ldi	r19, 0x80	; 128
    5018:	f3 2a       	or	r15, r19
    501a:	01 c0       	rjmp	.+2      	; 0x501e <vfprintf+0x262>
    501c:	9a 94       	dec	r9
    501e:	99 20       	and	r9, r9
    5020:	49 f0       	breq	.+18     	; 0x5034 <vfprintf+0x278>
    5022:	e2 e0       	ldi	r30, 0x02	; 2
    5024:	f0 e0       	ldi	r31, 0x00	; 0
    5026:	ec 0f       	add	r30, r28
    5028:	fd 1f       	adc	r31, r29
    502a:	e9 0d       	add	r30, r9
    502c:	f1 1d       	adc	r31, r1
    502e:	80 81       	ld	r24, Z
    5030:	80 33       	cpi	r24, 0x30	; 48
    5032:	a1 f3       	breq	.-24     	; 0x501c <vfprintf+0x260>
    5034:	f7 fe       	sbrs	r15, 7
    5036:	0a c0       	rjmp	.+20     	; 0x504c <vfprintf+0x290>
    5038:	b9 2c       	mov	r11, r9
    503a:	b3 94       	inc	r11
    503c:	89 2d       	mov	r24, r9
    503e:	90 e0       	ldi	r25, 0x00	; 0
    5040:	c8 16       	cp	r12, r24
    5042:	d9 06       	cpc	r13, r25
    5044:	14 f0       	brlt	.+4      	; 0x504a <vfprintf+0x28e>
    5046:	99 24       	eor	r9, r9
    5048:	01 c0       	rjmp	.+2      	; 0x504c <vfprintf+0x290>
    504a:	9c 18       	sub	r9, r12
    504c:	f7 fc       	sbrc	r15, 7
    504e:	03 c0       	rjmp	.+6      	; 0x5056 <vfprintf+0x29a>
    5050:	25 e0       	ldi	r18, 0x05	; 5
    5052:	30 e0       	ldi	r19, 0x00	; 0
    5054:	09 c0       	rjmp	.+18     	; 0x5068 <vfprintf+0x2ac>
    5056:	1c 14       	cp	r1, r12
    5058:	1d 04       	cpc	r1, r13
    505a:	1c f0       	brlt	.+6      	; 0x5062 <vfprintf+0x2a6>
    505c:	21 e0       	ldi	r18, 0x01	; 1
    505e:	30 e0       	ldi	r19, 0x00	; 0
    5060:	03 c0       	rjmp	.+6      	; 0x5068 <vfprintf+0x2ac>
    5062:	96 01       	movw	r18, r12
    5064:	2f 5f       	subi	r18, 0xFF	; 255
    5066:	3f 4f       	sbci	r19, 0xFF	; 255
    5068:	11 23       	and	r17, r17
    506a:	11 f0       	breq	.+4      	; 0x5070 <vfprintf+0x2b4>
    506c:	2f 5f       	subi	r18, 0xFF	; 255
    506e:	3f 4f       	sbci	r19, 0xFF	; 255
    5070:	99 20       	and	r9, r9
    5072:	29 f0       	breq	.+10     	; 0x507e <vfprintf+0x2c2>
    5074:	89 2d       	mov	r24, r9
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	01 96       	adiw	r24, 0x01	; 1
    507a:	28 0f       	add	r18, r24
    507c:	39 1f       	adc	r19, r25
    507e:	88 2d       	mov	r24, r8
    5080:	90 e0       	ldi	r25, 0x00	; 0
    5082:	28 17       	cp	r18, r24
    5084:	39 07       	cpc	r19, r25
    5086:	14 f0       	brlt	.+4      	; 0x508c <vfprintf+0x2d0>
    5088:	88 24       	eor	r8, r8
    508a:	01 c0       	rjmp	.+2      	; 0x508e <vfprintf+0x2d2>
    508c:	82 1a       	sub	r8, r18
    508e:	4f 2c       	mov	r4, r15
    5090:	55 24       	eor	r5, r5
    5092:	c2 01       	movw	r24, r4
    5094:	89 70       	andi	r24, 0x09	; 9
    5096:	90 70       	andi	r25, 0x00	; 0
    5098:	89 2b       	or	r24, r25
    509a:	31 f0       	breq	.+12     	; 0x50a8 <vfprintf+0x2ec>
    509c:	07 c0       	rjmp	.+14     	; 0x50ac <vfprintf+0x2f0>
    509e:	80 e2       	ldi	r24, 0x20	; 32
    50a0:	90 e0       	ldi	r25, 0x00	; 0
    50a2:	b3 01       	movw	r22, r6
    50a4:	de d4       	rcall	.+2492   	; 0x5a62 <fputc>
    50a6:	8a 94       	dec	r8
    50a8:	88 20       	and	r8, r8
    50aa:	c9 f7       	brne	.-14     	; 0x509e <vfprintf+0x2e2>
    50ac:	11 23       	and	r17, r17
    50ae:	21 f0       	breq	.+8      	; 0x50b8 <vfprintf+0x2fc>
    50b0:	81 2f       	mov	r24, r17
    50b2:	90 e0       	ldi	r25, 0x00	; 0
    50b4:	b3 01       	movw	r22, r6
    50b6:	d5 d4       	rcall	.+2474   	; 0x5a62 <fputc>
    50b8:	43 fe       	sbrs	r4, 3
    50ba:	06 c0       	rjmp	.+12     	; 0x50c8 <vfprintf+0x30c>
    50bc:	07 c0       	rjmp	.+14     	; 0x50cc <vfprintf+0x310>
    50be:	80 e3       	ldi	r24, 0x30	; 48
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	b3 01       	movw	r22, r6
    50c4:	ce d4       	rcall	.+2460   	; 0x5a62 <fputc>
    50c6:	8a 94       	dec	r8
    50c8:	88 20       	and	r8, r8
    50ca:	c9 f7       	brne	.-14     	; 0x50be <vfprintf+0x302>
    50cc:	f7 fe       	sbrs	r15, 7
    50ce:	44 c0       	rjmp	.+136    	; 0x5158 <vfprintf+0x39c>
    50d0:	86 01       	movw	r16, r12
    50d2:	d7 fe       	sbrs	r13, 7
    50d4:	02 c0       	rjmp	.+4      	; 0x50da <vfprintf+0x31e>
    50d6:	00 e0       	ldi	r16, 0x00	; 0
    50d8:	10 e0       	ldi	r17, 0x00	; 0
    50da:	76 01       	movw	r14, r12
    50dc:	08 94       	sec
    50de:	e1 1c       	adc	r14, r1
    50e0:	f1 1c       	adc	r15, r1
    50e2:	e0 1a       	sub	r14, r16
    50e4:	f1 0a       	sbc	r15, r17
    50e6:	41 e0       	ldi	r20, 0x01	; 1
    50e8:	50 e0       	ldi	r21, 0x00	; 0
    50ea:	4c 0f       	add	r20, r28
    50ec:	5d 1f       	adc	r21, r29
    50ee:	e4 0e       	add	r14, r20
    50f0:	f5 1e       	adc	r15, r21
    50f2:	26 01       	movw	r4, r12
    50f4:	4b 18       	sub	r4, r11
    50f6:	51 08       	sbc	r5, r1
    50f8:	89 2d       	mov	r24, r9
    50fa:	90 e0       	ldi	r25, 0x00	; 0
    50fc:	aa 24       	eor	r10, r10
    50fe:	bb 24       	eor	r11, r11
    5100:	a8 1a       	sub	r10, r24
    5102:	b9 0a       	sbc	r11, r25
    5104:	5f ef       	ldi	r21, 0xFF	; 255
    5106:	0f 3f       	cpi	r16, 0xFF	; 255
    5108:	15 07       	cpc	r17, r21
    510a:	21 f4       	brne	.+8      	; 0x5114 <vfprintf+0x358>
    510c:	8e e2       	ldi	r24, 0x2E	; 46
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	b3 01       	movw	r22, r6
    5112:	a7 d4       	rcall	.+2382   	; 0x5a62 <fputc>
    5114:	c0 16       	cp	r12, r16
    5116:	d1 06       	cpc	r13, r17
    5118:	34 f0       	brlt	.+12     	; 0x5126 <vfprintf+0x36a>
    511a:	40 16       	cp	r4, r16
    511c:	51 06       	cpc	r5, r17
    511e:	1c f4       	brge	.+6      	; 0x5126 <vfprintf+0x36a>
    5120:	f7 01       	movw	r30, r14
    5122:	80 81       	ld	r24, Z
    5124:	01 c0       	rjmp	.+2      	; 0x5128 <vfprintf+0x36c>
    5126:	80 e3       	ldi	r24, 0x30	; 48
    5128:	01 50       	subi	r16, 0x01	; 1
    512a:	10 40       	sbci	r17, 0x00	; 0
    512c:	08 94       	sec
    512e:	e1 1c       	adc	r14, r1
    5130:	f1 1c       	adc	r15, r1
    5132:	0a 15       	cp	r16, r10
    5134:	1b 05       	cpc	r17, r11
    5136:	24 f0       	brlt	.+8      	; 0x5140 <vfprintf+0x384>
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	b3 01       	movw	r22, r6
    513c:	92 d4       	rcall	.+2340   	; 0x5a62 <fputc>
    513e:	e2 cf       	rjmp	.-60     	; 0x5104 <vfprintf+0x348>
    5140:	0c 15       	cp	r16, r12
    5142:	1d 05       	cpc	r17, r13
    5144:	39 f4       	brne	.+14     	; 0x5154 <vfprintf+0x398>
    5146:	9a 81       	ldd	r25, Y+2	; 0x02
    5148:	96 33       	cpi	r25, 0x36	; 54
    514a:	18 f4       	brcc	.+6      	; 0x5152 <vfprintf+0x396>
    514c:	95 33       	cpi	r25, 0x35	; 53
    514e:	11 f4       	brne	.+4      	; 0x5154 <vfprintf+0x398>
    5150:	24 fe       	sbrs	r2, 4
    5152:	81 e3       	ldi	r24, 0x31	; 49
    5154:	90 e0       	ldi	r25, 0x00	; 0
    5156:	45 c0       	rjmp	.+138    	; 0x51e2 <vfprintf+0x426>
    5158:	8a 81       	ldd	r24, Y+2	; 0x02
    515a:	81 33       	cpi	r24, 0x31	; 49
    515c:	09 f0       	breq	.+2      	; 0x5160 <vfprintf+0x3a4>
    515e:	0f 7e       	andi	r16, 0xEF	; 239
    5160:	90 e0       	ldi	r25, 0x00	; 0
    5162:	b3 01       	movw	r22, r6
    5164:	7e d4       	rcall	.+2300   	; 0x5a62 <fputc>
    5166:	99 20       	and	r9, r9
    5168:	91 f0       	breq	.+36     	; 0x518e <vfprintf+0x3d2>
    516a:	8e e2       	ldi	r24, 0x2E	; 46
    516c:	90 e0       	ldi	r25, 0x00	; 0
    516e:	b3 01       	movw	r22, r6
    5170:	78 d4       	rcall	.+2288   	; 0x5a62 <fputc>
    5172:	12 e0       	ldi	r17, 0x02	; 2
    5174:	e1 e0       	ldi	r30, 0x01	; 1
    5176:	f0 e0       	ldi	r31, 0x00	; 0
    5178:	ec 0f       	add	r30, r28
    517a:	fd 1f       	adc	r31, r29
    517c:	e1 0f       	add	r30, r17
    517e:	f1 1d       	adc	r31, r1
    5180:	1f 5f       	subi	r17, 0xFF	; 255
    5182:	80 81       	ld	r24, Z
    5184:	90 e0       	ldi	r25, 0x00	; 0
    5186:	b3 01       	movw	r22, r6
    5188:	6c d4       	rcall	.+2264   	; 0x5a62 <fputc>
    518a:	9a 94       	dec	r9
    518c:	99 f7       	brne	.-26     	; 0x5174 <vfprintf+0x3b8>
    518e:	44 fc       	sbrc	r4, 4
    5190:	03 c0       	rjmp	.+6      	; 0x5198 <vfprintf+0x3dc>
    5192:	85 e6       	ldi	r24, 0x65	; 101
    5194:	90 e0       	ldi	r25, 0x00	; 0
    5196:	02 c0       	rjmp	.+4      	; 0x519c <vfprintf+0x3e0>
    5198:	85 e4       	ldi	r24, 0x45	; 69
    519a:	90 e0       	ldi	r25, 0x00	; 0
    519c:	b3 01       	movw	r22, r6
    519e:	61 d4       	rcall	.+2242   	; 0x5a62 <fputc>
    51a0:	d7 fc       	sbrc	r13, 7
    51a2:	05 c0       	rjmp	.+10     	; 0x51ae <vfprintf+0x3f2>
    51a4:	c1 14       	cp	r12, r1
    51a6:	d1 04       	cpc	r13, r1
    51a8:	41 f4       	brne	.+16     	; 0x51ba <vfprintf+0x3fe>
    51aa:	04 ff       	sbrs	r16, 4
    51ac:	06 c0       	rjmp	.+12     	; 0x51ba <vfprintf+0x3fe>
    51ae:	d0 94       	com	r13
    51b0:	c1 94       	neg	r12
    51b2:	d1 08       	sbc	r13, r1
    51b4:	d3 94       	inc	r13
    51b6:	8d e2       	ldi	r24, 0x2D	; 45
    51b8:	01 c0       	rjmp	.+2      	; 0x51bc <vfprintf+0x400>
    51ba:	8b e2       	ldi	r24, 0x2B	; 43
    51bc:	90 e0       	ldi	r25, 0x00	; 0
    51be:	b3 01       	movw	r22, r6
    51c0:	50 d4       	rcall	.+2208   	; 0x5a62 <fputc>
    51c2:	80 e3       	ldi	r24, 0x30	; 48
    51c4:	05 c0       	rjmp	.+10     	; 0x51d0 <vfprintf+0x414>
    51c6:	8f 5f       	subi	r24, 0xFF	; 255
    51c8:	26 ef       	ldi	r18, 0xF6	; 246
    51ca:	3f ef       	ldi	r19, 0xFF	; 255
    51cc:	c2 0e       	add	r12, r18
    51ce:	d3 1e       	adc	r13, r19
    51d0:	3a e0       	ldi	r19, 0x0A	; 10
    51d2:	c3 16       	cp	r12, r19
    51d4:	d1 04       	cpc	r13, r1
    51d6:	bc f7       	brge	.-18     	; 0x51c6 <vfprintf+0x40a>
    51d8:	90 e0       	ldi	r25, 0x00	; 0
    51da:	b3 01       	movw	r22, r6
    51dc:	42 d4       	rcall	.+2180   	; 0x5a62 <fputc>
    51de:	c6 01       	movw	r24, r12
    51e0:	c0 96       	adiw	r24, 0x30	; 48
    51e2:	b3 01       	movw	r22, r6
    51e4:	3e d4       	rcall	.+2172   	; 0x5a62 <fputc>
    51e6:	cc 84       	ldd	r12, Y+12	; 0x0c
    51e8:	dd 84       	ldd	r13, Y+13	; 0x0d
    51ea:	46 c1       	rjmp	.+652    	; 0x5478 <vfprintf+0x6bc>
    51ec:	93 36       	cpi	r25, 0x63	; 99
    51ee:	31 f0       	breq	.+12     	; 0x51fc <vfprintf+0x440>
    51f0:	93 37       	cpi	r25, 0x73	; 115
    51f2:	99 f0       	breq	.+38     	; 0x521a <vfprintf+0x45e>
    51f4:	93 35       	cpi	r25, 0x53	; 83
    51f6:	09 f0       	breq	.+2      	; 0x51fa <vfprintf+0x43e>
    51f8:	55 c0       	rjmp	.+170    	; 0x52a4 <vfprintf+0x4e8>
    51fa:	22 c0       	rjmp	.+68     	; 0x5240 <vfprintf+0x484>
    51fc:	f6 01       	movw	r30, r12
    51fe:	80 81       	ld	r24, Z
    5200:	89 83       	std	Y+1, r24	; 0x01
    5202:	5e 01       	movw	r10, r28
    5204:	08 94       	sec
    5206:	a1 1c       	adc	r10, r1
    5208:	b1 1c       	adc	r11, r1
    520a:	22 e0       	ldi	r18, 0x02	; 2
    520c:	30 e0       	ldi	r19, 0x00	; 0
    520e:	c2 0e       	add	r12, r18
    5210:	d3 1e       	adc	r13, r19
    5212:	21 e0       	ldi	r18, 0x01	; 1
    5214:	e2 2e       	mov	r14, r18
    5216:	f1 2c       	mov	r15, r1
    5218:	11 c0       	rjmp	.+34     	; 0x523c <vfprintf+0x480>
    521a:	f6 01       	movw	r30, r12
    521c:	a0 80       	ld	r10, Z
    521e:	b1 80       	ldd	r11, Z+1	; 0x01
    5220:	16 fd       	sbrc	r17, 6
    5222:	03 c0       	rjmp	.+6      	; 0x522a <vfprintf+0x46e>
    5224:	6f ef       	ldi	r22, 0xFF	; 255
    5226:	7f ef       	ldi	r23, 0xFF	; 255
    5228:	02 c0       	rjmp	.+4      	; 0x522e <vfprintf+0x472>
    522a:	69 2d       	mov	r22, r9
    522c:	70 e0       	ldi	r23, 0x00	; 0
    522e:	22 e0       	ldi	r18, 0x02	; 2
    5230:	30 e0       	ldi	r19, 0x00	; 0
    5232:	c2 0e       	add	r12, r18
    5234:	d3 1e       	adc	r13, r19
    5236:	c5 01       	movw	r24, r10
    5238:	09 d4       	rcall	.+2066   	; 0x5a4c <strnlen>
    523a:	7c 01       	movw	r14, r24
    523c:	1f 77       	andi	r17, 0x7F	; 127
    523e:	12 c0       	rjmp	.+36     	; 0x5264 <vfprintf+0x4a8>
    5240:	f6 01       	movw	r30, r12
    5242:	a0 80       	ld	r10, Z
    5244:	b1 80       	ldd	r11, Z+1	; 0x01
    5246:	16 fd       	sbrc	r17, 6
    5248:	03 c0       	rjmp	.+6      	; 0x5250 <vfprintf+0x494>
    524a:	6f ef       	ldi	r22, 0xFF	; 255
    524c:	7f ef       	ldi	r23, 0xFF	; 255
    524e:	02 c0       	rjmp	.+4      	; 0x5254 <vfprintf+0x498>
    5250:	69 2d       	mov	r22, r9
    5252:	70 e0       	ldi	r23, 0x00	; 0
    5254:	22 e0       	ldi	r18, 0x02	; 2
    5256:	30 e0       	ldi	r19, 0x00	; 0
    5258:	c2 0e       	add	r12, r18
    525a:	d3 1e       	adc	r13, r19
    525c:	c5 01       	movw	r24, r10
    525e:	eb d3       	rcall	.+2006   	; 0x5a36 <strnlen_P>
    5260:	7c 01       	movw	r14, r24
    5262:	10 68       	ori	r17, 0x80	; 128
    5264:	13 ff       	sbrs	r17, 3
    5266:	06 c0       	rjmp	.+12     	; 0x5274 <vfprintf+0x4b8>
    5268:	19 c0       	rjmp	.+50     	; 0x529c <vfprintf+0x4e0>
    526a:	80 e2       	ldi	r24, 0x20	; 32
    526c:	90 e0       	ldi	r25, 0x00	; 0
    526e:	b3 01       	movw	r22, r6
    5270:	f8 d3       	rcall	.+2032   	; 0x5a62 <fputc>
    5272:	8a 94       	dec	r8
    5274:	88 2d       	mov	r24, r8
    5276:	90 e0       	ldi	r25, 0x00	; 0
    5278:	e8 16       	cp	r14, r24
    527a:	f9 06       	cpc	r15, r25
    527c:	b0 f3       	brcs	.-20     	; 0x526a <vfprintf+0x4ae>
    527e:	0e c0       	rjmp	.+28     	; 0x529c <vfprintf+0x4e0>
    5280:	f5 01       	movw	r30, r10
    5282:	17 fd       	sbrc	r17, 7
    5284:	85 91       	lpm	r24, Z+
    5286:	17 ff       	sbrs	r17, 7
    5288:	81 91       	ld	r24, Z+
    528a:	5f 01       	movw	r10, r30
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	b3 01       	movw	r22, r6
    5290:	e8 d3       	rcall	.+2000   	; 0x5a62 <fputc>
    5292:	81 10       	cpse	r8, r1
    5294:	8a 94       	dec	r8
    5296:	08 94       	sec
    5298:	e1 08       	sbc	r14, r1
    529a:	f1 08       	sbc	r15, r1
    529c:	e1 14       	cp	r14, r1
    529e:	f1 04       	cpc	r15, r1
    52a0:	79 f7       	brne	.-34     	; 0x5280 <vfprintf+0x4c4>
    52a2:	ea c0       	rjmp	.+468    	; 0x5478 <vfprintf+0x6bc>
    52a4:	94 36       	cpi	r25, 0x64	; 100
    52a6:	11 f0       	breq	.+4      	; 0x52ac <vfprintf+0x4f0>
    52a8:	99 36       	cpi	r25, 0x69	; 105
    52aa:	81 f5       	brne	.+96     	; 0x530c <vfprintf+0x550>
    52ac:	17 ff       	sbrs	r17, 7
    52ae:	08 c0       	rjmp	.+16     	; 0x52c0 <vfprintf+0x504>
    52b0:	f6 01       	movw	r30, r12
    52b2:	20 81       	ld	r18, Z
    52b4:	31 81       	ldd	r19, Z+1	; 0x01
    52b6:	42 81       	ldd	r20, Z+2	; 0x02
    52b8:	53 81       	ldd	r21, Z+3	; 0x03
    52ba:	84 e0       	ldi	r24, 0x04	; 4
    52bc:	90 e0       	ldi	r25, 0x00	; 0
    52be:	0a c0       	rjmp	.+20     	; 0x52d4 <vfprintf+0x518>
    52c0:	f6 01       	movw	r30, r12
    52c2:	80 81       	ld	r24, Z
    52c4:	91 81       	ldd	r25, Z+1	; 0x01
    52c6:	9c 01       	movw	r18, r24
    52c8:	44 27       	eor	r20, r20
    52ca:	37 fd       	sbrc	r19, 7
    52cc:	40 95       	com	r20
    52ce:	54 2f       	mov	r21, r20
    52d0:	82 e0       	ldi	r24, 0x02	; 2
    52d2:	90 e0       	ldi	r25, 0x00	; 0
    52d4:	c8 0e       	add	r12, r24
    52d6:	d9 1e       	adc	r13, r25
    52d8:	9f e6       	ldi	r25, 0x6F	; 111
    52da:	f9 2e       	mov	r15, r25
    52dc:	f1 22       	and	r15, r17
    52de:	57 ff       	sbrs	r21, 7
    52e0:	09 c0       	rjmp	.+18     	; 0x52f4 <vfprintf+0x538>
    52e2:	50 95       	com	r21
    52e4:	40 95       	com	r20
    52e6:	30 95       	com	r19
    52e8:	21 95       	neg	r18
    52ea:	3f 4f       	sbci	r19, 0xFF	; 255
    52ec:	4f 4f       	sbci	r20, 0xFF	; 255
    52ee:	5f 4f       	sbci	r21, 0xFF	; 255
    52f0:	90 e8       	ldi	r25, 0x80	; 128
    52f2:	f9 2a       	or	r15, r25
    52f4:	ca 01       	movw	r24, r20
    52f6:	b9 01       	movw	r22, r18
    52f8:	ae 01       	movw	r20, r28
    52fa:	4f 5f       	subi	r20, 0xFF	; 255
    52fc:	5f 4f       	sbci	r21, 0xFF	; 255
    52fe:	2a e0       	ldi	r18, 0x0A	; 10
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	22 d4       	rcall	.+2116   	; 0x5b48 <__ultoa_invert>
    5304:	e8 2e       	mov	r14, r24
    5306:	e8 89       	ldd	r30, Y+16	; 0x10
    5308:	ee 1a       	sub	r14, r30
    530a:	40 c0       	rjmp	.+128    	; 0x538c <vfprintf+0x5d0>
    530c:	95 37       	cpi	r25, 0x75	; 117
    530e:	21 f4       	brne	.+8      	; 0x5318 <vfprintf+0x55c>
    5310:	1f 7e       	andi	r17, 0xEF	; 239
    5312:	2a e0       	ldi	r18, 0x0A	; 10
    5314:	30 e0       	ldi	r19, 0x00	; 0
    5316:	1c c0       	rjmp	.+56     	; 0x5350 <vfprintf+0x594>
    5318:	19 7f       	andi	r17, 0xF9	; 249
    531a:	9f 36       	cpi	r25, 0x6F	; 111
    531c:	61 f0       	breq	.+24     	; 0x5336 <vfprintf+0x57a>
    531e:	90 37       	cpi	r25, 0x70	; 112
    5320:	20 f4       	brcc	.+8      	; 0x532a <vfprintf+0x56e>
    5322:	98 35       	cpi	r25, 0x58	; 88
    5324:	09 f0       	breq	.+2      	; 0x5328 <vfprintf+0x56c>
    5326:	ab c0       	rjmp	.+342    	; 0x547e <vfprintf+0x6c2>
    5328:	0f c0       	rjmp	.+30     	; 0x5348 <vfprintf+0x58c>
    532a:	90 37       	cpi	r25, 0x70	; 112
    532c:	39 f0       	breq	.+14     	; 0x533c <vfprintf+0x580>
    532e:	98 37       	cpi	r25, 0x78	; 120
    5330:	09 f0       	breq	.+2      	; 0x5334 <vfprintf+0x578>
    5332:	a5 c0       	rjmp	.+330    	; 0x547e <vfprintf+0x6c2>
    5334:	04 c0       	rjmp	.+8      	; 0x533e <vfprintf+0x582>
    5336:	28 e0       	ldi	r18, 0x08	; 8
    5338:	30 e0       	ldi	r19, 0x00	; 0
    533a:	0a c0       	rjmp	.+20     	; 0x5350 <vfprintf+0x594>
    533c:	10 61       	ori	r17, 0x10	; 16
    533e:	14 fd       	sbrc	r17, 4
    5340:	14 60       	ori	r17, 0x04	; 4
    5342:	20 e1       	ldi	r18, 0x10	; 16
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	04 c0       	rjmp	.+8      	; 0x5350 <vfprintf+0x594>
    5348:	14 fd       	sbrc	r17, 4
    534a:	16 60       	ori	r17, 0x06	; 6
    534c:	20 e1       	ldi	r18, 0x10	; 16
    534e:	32 e0       	ldi	r19, 0x02	; 2
    5350:	17 ff       	sbrs	r17, 7
    5352:	08 c0       	rjmp	.+16     	; 0x5364 <vfprintf+0x5a8>
    5354:	f6 01       	movw	r30, r12
    5356:	60 81       	ld	r22, Z
    5358:	71 81       	ldd	r23, Z+1	; 0x01
    535a:	82 81       	ldd	r24, Z+2	; 0x02
    535c:	93 81       	ldd	r25, Z+3	; 0x03
    535e:	44 e0       	ldi	r20, 0x04	; 4
    5360:	50 e0       	ldi	r21, 0x00	; 0
    5362:	08 c0       	rjmp	.+16     	; 0x5374 <vfprintf+0x5b8>
    5364:	f6 01       	movw	r30, r12
    5366:	80 81       	ld	r24, Z
    5368:	91 81       	ldd	r25, Z+1	; 0x01
    536a:	bc 01       	movw	r22, r24
    536c:	80 e0       	ldi	r24, 0x00	; 0
    536e:	90 e0       	ldi	r25, 0x00	; 0
    5370:	42 e0       	ldi	r20, 0x02	; 2
    5372:	50 e0       	ldi	r21, 0x00	; 0
    5374:	c4 0e       	add	r12, r20
    5376:	d5 1e       	adc	r13, r21
    5378:	ae 01       	movw	r20, r28
    537a:	4f 5f       	subi	r20, 0xFF	; 255
    537c:	5f 4f       	sbci	r21, 0xFF	; 255
    537e:	e4 d3       	rcall	.+1992   	; 0x5b48 <__ultoa_invert>
    5380:	e8 2e       	mov	r14, r24
    5382:	58 89       	ldd	r21, Y+16	; 0x10
    5384:	e5 1a       	sub	r14, r21
    5386:	8f e7       	ldi	r24, 0x7F	; 127
    5388:	f8 2e       	mov	r15, r24
    538a:	f1 22       	and	r15, r17
    538c:	f6 fe       	sbrs	r15, 6
    538e:	0b c0       	rjmp	.+22     	; 0x53a6 <vfprintf+0x5ea>
    5390:	8e ef       	ldi	r24, 0xFE	; 254
    5392:	f8 22       	and	r15, r24
    5394:	e9 14       	cp	r14, r9
    5396:	38 f4       	brcc	.+14     	; 0x53a6 <vfprintf+0x5ea>
    5398:	f4 fe       	sbrs	r15, 4
    539a:	07 c0       	rjmp	.+14     	; 0x53aa <vfprintf+0x5ee>
    539c:	f2 fc       	sbrc	r15, 2
    539e:	05 c0       	rjmp	.+10     	; 0x53aa <vfprintf+0x5ee>
    53a0:	9f ee       	ldi	r25, 0xEF	; 239
    53a2:	f9 22       	and	r15, r25
    53a4:	02 c0       	rjmp	.+4      	; 0x53aa <vfprintf+0x5ee>
    53a6:	1e 2d       	mov	r17, r14
    53a8:	01 c0       	rjmp	.+2      	; 0x53ac <vfprintf+0x5f0>
    53aa:	19 2d       	mov	r17, r9
    53ac:	f4 fe       	sbrs	r15, 4
    53ae:	0d c0       	rjmp	.+26     	; 0x53ca <vfprintf+0x60e>
    53b0:	fe 01       	movw	r30, r28
    53b2:	ee 0d       	add	r30, r14
    53b4:	f1 1d       	adc	r31, r1
    53b6:	80 81       	ld	r24, Z
    53b8:	80 33       	cpi	r24, 0x30	; 48
    53ba:	19 f4       	brne	.+6      	; 0x53c2 <vfprintf+0x606>
    53bc:	e9 ee       	ldi	r30, 0xE9	; 233
    53be:	fe 22       	and	r15, r30
    53c0:	08 c0       	rjmp	.+16     	; 0x53d2 <vfprintf+0x616>
    53c2:	1f 5f       	subi	r17, 0xFF	; 255
    53c4:	f2 fe       	sbrs	r15, 2
    53c6:	05 c0       	rjmp	.+10     	; 0x53d2 <vfprintf+0x616>
    53c8:	03 c0       	rjmp	.+6      	; 0x53d0 <vfprintf+0x614>
    53ca:	8f 2d       	mov	r24, r15
    53cc:	86 78       	andi	r24, 0x86	; 134
    53ce:	09 f0       	breq	.+2      	; 0x53d2 <vfprintf+0x616>
    53d0:	1f 5f       	subi	r17, 0xFF	; 255
    53d2:	0f 2d       	mov	r16, r15
    53d4:	f3 fc       	sbrc	r15, 3
    53d6:	13 c0       	rjmp	.+38     	; 0x53fe <vfprintf+0x642>
    53d8:	f0 fe       	sbrs	r15, 0
    53da:	0e c0       	rjmp	.+28     	; 0x53f8 <vfprintf+0x63c>
    53dc:	18 15       	cp	r17, r8
    53de:	10 f0       	brcs	.+4      	; 0x53e4 <vfprintf+0x628>
    53e0:	9e 2c       	mov	r9, r14
    53e2:	0a c0       	rjmp	.+20     	; 0x53f8 <vfprintf+0x63c>
    53e4:	9e 2c       	mov	r9, r14
    53e6:	98 0c       	add	r9, r8
    53e8:	91 1a       	sub	r9, r17
    53ea:	18 2d       	mov	r17, r8
    53ec:	05 c0       	rjmp	.+10     	; 0x53f8 <vfprintf+0x63c>
    53ee:	80 e2       	ldi	r24, 0x20	; 32
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	b3 01       	movw	r22, r6
    53f4:	36 d3       	rcall	.+1644   	; 0x5a62 <fputc>
    53f6:	1f 5f       	subi	r17, 0xFF	; 255
    53f8:	18 15       	cp	r17, r8
    53fa:	c8 f3       	brcs	.-14     	; 0x53ee <vfprintf+0x632>
    53fc:	04 c0       	rjmp	.+8      	; 0x5406 <vfprintf+0x64a>
    53fe:	18 15       	cp	r17, r8
    5400:	10 f4       	brcc	.+4      	; 0x5406 <vfprintf+0x64a>
    5402:	81 1a       	sub	r8, r17
    5404:	01 c0       	rjmp	.+2      	; 0x5408 <vfprintf+0x64c>
    5406:	88 24       	eor	r8, r8
    5408:	04 ff       	sbrs	r16, 4
    540a:	0e c0       	rjmp	.+28     	; 0x5428 <vfprintf+0x66c>
    540c:	80 e3       	ldi	r24, 0x30	; 48
    540e:	90 e0       	ldi	r25, 0x00	; 0
    5410:	b3 01       	movw	r22, r6
    5412:	27 d3       	rcall	.+1614   	; 0x5a62 <fputc>
    5414:	02 ff       	sbrs	r16, 2
    5416:	1b c0       	rjmp	.+54     	; 0x544e <vfprintf+0x692>
    5418:	01 fd       	sbrc	r16, 1
    541a:	03 c0       	rjmp	.+6      	; 0x5422 <vfprintf+0x666>
    541c:	88 e7       	ldi	r24, 0x78	; 120
    541e:	90 e0       	ldi	r25, 0x00	; 0
    5420:	0e c0       	rjmp	.+28     	; 0x543e <vfprintf+0x682>
    5422:	88 e5       	ldi	r24, 0x58	; 88
    5424:	90 e0       	ldi	r25, 0x00	; 0
    5426:	0b c0       	rjmp	.+22     	; 0x543e <vfprintf+0x682>
    5428:	80 2f       	mov	r24, r16
    542a:	86 78       	andi	r24, 0x86	; 134
    542c:	81 f0       	breq	.+32     	; 0x544e <vfprintf+0x692>
    542e:	01 ff       	sbrs	r16, 1
    5430:	02 c0       	rjmp	.+4      	; 0x5436 <vfprintf+0x67a>
    5432:	8b e2       	ldi	r24, 0x2B	; 43
    5434:	01 c0       	rjmp	.+2      	; 0x5438 <vfprintf+0x67c>
    5436:	80 e2       	ldi	r24, 0x20	; 32
    5438:	f7 fc       	sbrc	r15, 7
    543a:	8d e2       	ldi	r24, 0x2D	; 45
    543c:	90 e0       	ldi	r25, 0x00	; 0
    543e:	b3 01       	movw	r22, r6
    5440:	10 d3       	rcall	.+1568   	; 0x5a62 <fputc>
    5442:	05 c0       	rjmp	.+10     	; 0x544e <vfprintf+0x692>
    5444:	80 e3       	ldi	r24, 0x30	; 48
    5446:	90 e0       	ldi	r25, 0x00	; 0
    5448:	b3 01       	movw	r22, r6
    544a:	0b d3       	rcall	.+1558   	; 0x5a62 <fputc>
    544c:	9a 94       	dec	r9
    544e:	e9 14       	cp	r14, r9
    5450:	c8 f3       	brcs	.-14     	; 0x5444 <vfprintf+0x688>
    5452:	ea 94       	dec	r14
    5454:	e1 e0       	ldi	r30, 0x01	; 1
    5456:	f0 e0       	ldi	r31, 0x00	; 0
    5458:	ec 0f       	add	r30, r28
    545a:	fd 1f       	adc	r31, r29
    545c:	ee 0d       	add	r30, r14
    545e:	f1 1d       	adc	r31, r1
    5460:	80 81       	ld	r24, Z
    5462:	90 e0       	ldi	r25, 0x00	; 0
    5464:	b3 01       	movw	r22, r6
    5466:	fd d2       	rcall	.+1530   	; 0x5a62 <fputc>
    5468:	ee 20       	and	r14, r14
    546a:	99 f7       	brne	.-26     	; 0x5452 <vfprintf+0x696>
    546c:	05 c0       	rjmp	.+10     	; 0x5478 <vfprintf+0x6bc>
    546e:	80 e2       	ldi	r24, 0x20	; 32
    5470:	90 e0       	ldi	r25, 0x00	; 0
    5472:	b3 01       	movw	r22, r6
    5474:	f6 d2       	rcall	.+1516   	; 0x5a62 <fputc>
    5476:	8a 94       	dec	r8
    5478:	88 20       	and	r8, r8
    547a:	c9 f7       	brne	.-14     	; 0x546e <vfprintf+0x6b2>
    547c:	b6 cc       	rjmp	.-1684   	; 0x4dea <vfprintf+0x2e>
    547e:	f3 01       	movw	r30, r6
    5480:	66 81       	ldd	r22, Z+6	; 0x06
    5482:	77 81       	ldd	r23, Z+7	; 0x07
    5484:	cb 01       	movw	r24, r22
    5486:	61 96       	adiw	r28, 0x11	; 17
    5488:	e2 e1       	ldi	r30, 0x12	; 18
    548a:	70 c0       	rjmp	.+224    	; 0x556c <__epilogue_restores__>

0000548c <__mulsi3>:
    548c:	62 9f       	mul	r22, r18
    548e:	d0 01       	movw	r26, r0
    5490:	73 9f       	mul	r23, r19
    5492:	f0 01       	movw	r30, r0
    5494:	82 9f       	mul	r24, r18
    5496:	e0 0d       	add	r30, r0
    5498:	f1 1d       	adc	r31, r1
    549a:	64 9f       	mul	r22, r20
    549c:	e0 0d       	add	r30, r0
    549e:	f1 1d       	adc	r31, r1
    54a0:	92 9f       	mul	r25, r18
    54a2:	f0 0d       	add	r31, r0
    54a4:	83 9f       	mul	r24, r19
    54a6:	f0 0d       	add	r31, r0
    54a8:	74 9f       	mul	r23, r20
    54aa:	f0 0d       	add	r31, r0
    54ac:	65 9f       	mul	r22, r21
    54ae:	f0 0d       	add	r31, r0
    54b0:	99 27       	eor	r25, r25
    54b2:	72 9f       	mul	r23, r18
    54b4:	b0 0d       	add	r27, r0
    54b6:	e1 1d       	adc	r30, r1
    54b8:	f9 1f       	adc	r31, r25
    54ba:	63 9f       	mul	r22, r19
    54bc:	b0 0d       	add	r27, r0
    54be:	e1 1d       	adc	r30, r1
    54c0:	f9 1f       	adc	r31, r25
    54c2:	bd 01       	movw	r22, r26
    54c4:	cf 01       	movw	r24, r30
    54c6:	11 24       	eor	r1, r1
    54c8:	08 95       	ret

000054ca <__divmodhi4>:
    54ca:	97 fb       	bst	r25, 7
    54cc:	09 2e       	mov	r0, r25
    54ce:	07 26       	eor	r0, r23
    54d0:	0a d0       	rcall	.+20     	; 0x54e6 <__divmodhi4_neg1>
    54d2:	77 fd       	sbrc	r23, 7
    54d4:	04 d0       	rcall	.+8      	; 0x54de <__divmodhi4_neg2>
    54d6:	65 d0       	rcall	.+202    	; 0x55a2 <__udivmodhi4>
    54d8:	06 d0       	rcall	.+12     	; 0x54e6 <__divmodhi4_neg1>
    54da:	00 20       	and	r0, r0
    54dc:	1a f4       	brpl	.+6      	; 0x54e4 <__divmodhi4_exit>

000054de <__divmodhi4_neg2>:
    54de:	70 95       	com	r23
    54e0:	61 95       	neg	r22
    54e2:	7f 4f       	sbci	r23, 0xFF	; 255

000054e4 <__divmodhi4_exit>:
    54e4:	08 95       	ret

000054e6 <__divmodhi4_neg1>:
    54e6:	f6 f7       	brtc	.-4      	; 0x54e4 <__divmodhi4_exit>
    54e8:	90 95       	com	r25
    54ea:	81 95       	neg	r24
    54ec:	9f 4f       	sbci	r25, 0xFF	; 255
    54ee:	08 95       	ret

000054f0 <__udivmodsi4>:
    54f0:	a1 e2       	ldi	r26, 0x21	; 33
    54f2:	1a 2e       	mov	r1, r26
    54f4:	aa 1b       	sub	r26, r26
    54f6:	bb 1b       	sub	r27, r27
    54f8:	fd 01       	movw	r30, r26
    54fa:	0d c0       	rjmp	.+26     	; 0x5516 <__udivmodsi4_ep>

000054fc <__udivmodsi4_loop>:
    54fc:	aa 1f       	adc	r26, r26
    54fe:	bb 1f       	adc	r27, r27
    5500:	ee 1f       	adc	r30, r30
    5502:	ff 1f       	adc	r31, r31
    5504:	a2 17       	cp	r26, r18
    5506:	b3 07       	cpc	r27, r19
    5508:	e4 07       	cpc	r30, r20
    550a:	f5 07       	cpc	r31, r21
    550c:	20 f0       	brcs	.+8      	; 0x5516 <__udivmodsi4_ep>
    550e:	a2 1b       	sub	r26, r18
    5510:	b3 0b       	sbc	r27, r19
    5512:	e4 0b       	sbc	r30, r20
    5514:	f5 0b       	sbc	r31, r21

00005516 <__udivmodsi4_ep>:
    5516:	66 1f       	adc	r22, r22
    5518:	77 1f       	adc	r23, r23
    551a:	88 1f       	adc	r24, r24
    551c:	99 1f       	adc	r25, r25
    551e:	1a 94       	dec	r1
    5520:	69 f7       	brne	.-38     	; 0x54fc <__udivmodsi4_loop>
    5522:	60 95       	com	r22
    5524:	70 95       	com	r23
    5526:	80 95       	com	r24
    5528:	90 95       	com	r25
    552a:	9b 01       	movw	r18, r22
    552c:	ac 01       	movw	r20, r24
    552e:	bd 01       	movw	r22, r26
    5530:	cf 01       	movw	r24, r30
    5532:	08 95       	ret

00005534 <__prologue_saves__>:
    5534:	2f 92       	push	r2
    5536:	3f 92       	push	r3
    5538:	4f 92       	push	r4
    553a:	5f 92       	push	r5
    553c:	6f 92       	push	r6
    553e:	7f 92       	push	r7
    5540:	8f 92       	push	r8
    5542:	9f 92       	push	r9
    5544:	af 92       	push	r10
    5546:	bf 92       	push	r11
    5548:	cf 92       	push	r12
    554a:	df 92       	push	r13
    554c:	ef 92       	push	r14
    554e:	ff 92       	push	r15
    5550:	0f 93       	push	r16
    5552:	1f 93       	push	r17
    5554:	cf 93       	push	r28
    5556:	df 93       	push	r29
    5558:	cd b7       	in	r28, 0x3d	; 61
    555a:	de b7       	in	r29, 0x3e	; 62
    555c:	ca 1b       	sub	r28, r26
    555e:	db 0b       	sbc	r29, r27
    5560:	0f b6       	in	r0, 0x3f	; 63
    5562:	f8 94       	cli
    5564:	de bf       	out	0x3e, r29	; 62
    5566:	0f be       	out	0x3f, r0	; 63
    5568:	cd bf       	out	0x3d, r28	; 61
    556a:	09 94       	ijmp

0000556c <__epilogue_restores__>:
    556c:	2a 88       	ldd	r2, Y+18	; 0x12
    556e:	39 88       	ldd	r3, Y+17	; 0x11
    5570:	48 88       	ldd	r4, Y+16	; 0x10
    5572:	5f 84       	ldd	r5, Y+15	; 0x0f
    5574:	6e 84       	ldd	r6, Y+14	; 0x0e
    5576:	7d 84       	ldd	r7, Y+13	; 0x0d
    5578:	8c 84       	ldd	r8, Y+12	; 0x0c
    557a:	9b 84       	ldd	r9, Y+11	; 0x0b
    557c:	aa 84       	ldd	r10, Y+10	; 0x0a
    557e:	b9 84       	ldd	r11, Y+9	; 0x09
    5580:	c8 84       	ldd	r12, Y+8	; 0x08
    5582:	df 80       	ldd	r13, Y+7	; 0x07
    5584:	ee 80       	ldd	r14, Y+6	; 0x06
    5586:	fd 80       	ldd	r15, Y+5	; 0x05
    5588:	0c 81       	ldd	r16, Y+4	; 0x04
    558a:	1b 81       	ldd	r17, Y+3	; 0x03
    558c:	aa 81       	ldd	r26, Y+2	; 0x02
    558e:	b9 81       	ldd	r27, Y+1	; 0x01
    5590:	ce 0f       	add	r28, r30
    5592:	d1 1d       	adc	r29, r1
    5594:	0f b6       	in	r0, 0x3f	; 63
    5596:	f8 94       	cli
    5598:	de bf       	out	0x3e, r29	; 62
    559a:	0f be       	out	0x3f, r0	; 63
    559c:	cd bf       	out	0x3d, r28	; 61
    559e:	ed 01       	movw	r28, r26
    55a0:	08 95       	ret

000055a2 <__udivmodhi4>:
    55a2:	aa 1b       	sub	r26, r26
    55a4:	bb 1b       	sub	r27, r27
    55a6:	51 e1       	ldi	r21, 0x11	; 17
    55a8:	07 c0       	rjmp	.+14     	; 0x55b8 <__udivmodhi4_ep>

000055aa <__udivmodhi4_loop>:
    55aa:	aa 1f       	adc	r26, r26
    55ac:	bb 1f       	adc	r27, r27
    55ae:	a6 17       	cp	r26, r22
    55b0:	b7 07       	cpc	r27, r23
    55b2:	10 f0       	brcs	.+4      	; 0x55b8 <__udivmodhi4_ep>
    55b4:	a6 1b       	sub	r26, r22
    55b6:	b7 0b       	sbc	r27, r23

000055b8 <__udivmodhi4_ep>:
    55b8:	88 1f       	adc	r24, r24
    55ba:	99 1f       	adc	r25, r25
    55bc:	5a 95       	dec	r21
    55be:	a9 f7       	brne	.-22     	; 0x55aa <__udivmodhi4_loop>
    55c0:	80 95       	com	r24
    55c2:	90 95       	com	r25
    55c4:	bc 01       	movw	r22, r24
    55c6:	cd 01       	movw	r24, r26
    55c8:	08 95       	ret

000055ca <malloc>:
    55ca:	cf 93       	push	r28
    55cc:	df 93       	push	r29
    55ce:	bc 01       	movw	r22, r24
    55d0:	82 30       	cpi	r24, 0x02	; 2
    55d2:	91 05       	cpc	r25, r1
    55d4:	10 f4       	brcc	.+4      	; 0x55da <malloc+0x10>
    55d6:	62 e0       	ldi	r22, 0x02	; 2
    55d8:	70 e0       	ldi	r23, 0x00	; 0
    55da:	a0 91 0c 05 	lds	r26, 0x050C
    55de:	b0 91 0d 05 	lds	r27, 0x050D
    55e2:	ed 01       	movw	r28, r26
    55e4:	e0 e0       	ldi	r30, 0x00	; 0
    55e6:	f0 e0       	ldi	r31, 0x00	; 0
    55e8:	40 e0       	ldi	r20, 0x00	; 0
    55ea:	50 e0       	ldi	r21, 0x00	; 0
    55ec:	21 c0       	rjmp	.+66     	; 0x5630 <malloc+0x66>
    55ee:	88 81       	ld	r24, Y
    55f0:	99 81       	ldd	r25, Y+1	; 0x01
    55f2:	86 17       	cp	r24, r22
    55f4:	97 07       	cpc	r25, r23
    55f6:	69 f4       	brne	.+26     	; 0x5612 <malloc+0x48>
    55f8:	8a 81       	ldd	r24, Y+2	; 0x02
    55fa:	9b 81       	ldd	r25, Y+3	; 0x03
    55fc:	30 97       	sbiw	r30, 0x00	; 0
    55fe:	19 f0       	breq	.+6      	; 0x5606 <malloc+0x3c>
    5600:	93 83       	std	Z+3, r25	; 0x03
    5602:	82 83       	std	Z+2, r24	; 0x02
    5604:	04 c0       	rjmp	.+8      	; 0x560e <malloc+0x44>
    5606:	90 93 0d 05 	sts	0x050D, r25
    560a:	80 93 0c 05 	sts	0x050C, r24
    560e:	fe 01       	movw	r30, r28
    5610:	34 c0       	rjmp	.+104    	; 0x567a <malloc+0xb0>
    5612:	68 17       	cp	r22, r24
    5614:	79 07       	cpc	r23, r25
    5616:	38 f4       	brcc	.+14     	; 0x5626 <malloc+0x5c>
    5618:	41 15       	cp	r20, r1
    561a:	51 05       	cpc	r21, r1
    561c:	19 f0       	breq	.+6      	; 0x5624 <malloc+0x5a>
    561e:	84 17       	cp	r24, r20
    5620:	95 07       	cpc	r25, r21
    5622:	08 f4       	brcc	.+2      	; 0x5626 <malloc+0x5c>
    5624:	ac 01       	movw	r20, r24
    5626:	fe 01       	movw	r30, r28
    5628:	8a 81       	ldd	r24, Y+2	; 0x02
    562a:	9b 81       	ldd	r25, Y+3	; 0x03
    562c:	9c 01       	movw	r18, r24
    562e:	e9 01       	movw	r28, r18
    5630:	20 97       	sbiw	r28, 0x00	; 0
    5632:	e9 f6       	brne	.-70     	; 0x55ee <malloc+0x24>
    5634:	41 15       	cp	r20, r1
    5636:	51 05       	cpc	r21, r1
    5638:	a9 f1       	breq	.+106    	; 0x56a4 <malloc+0xda>
    563a:	ca 01       	movw	r24, r20
    563c:	86 1b       	sub	r24, r22
    563e:	97 0b       	sbc	r25, r23
    5640:	04 97       	sbiw	r24, 0x04	; 4
    5642:	08 f4       	brcc	.+2      	; 0x5646 <malloc+0x7c>
    5644:	ba 01       	movw	r22, r20
    5646:	e0 e0       	ldi	r30, 0x00	; 0
    5648:	f0 e0       	ldi	r31, 0x00	; 0
    564a:	2a c0       	rjmp	.+84     	; 0x56a0 <malloc+0xd6>
    564c:	8d 91       	ld	r24, X+
    564e:	9c 91       	ld	r25, X
    5650:	11 97       	sbiw	r26, 0x01	; 1
    5652:	84 17       	cp	r24, r20
    5654:	95 07       	cpc	r25, r21
    5656:	f9 f4       	brne	.+62     	; 0x5696 <malloc+0xcc>
    5658:	64 17       	cp	r22, r20
    565a:	75 07       	cpc	r23, r21
    565c:	81 f4       	brne	.+32     	; 0x567e <malloc+0xb4>
    565e:	12 96       	adiw	r26, 0x02	; 2
    5660:	8d 91       	ld	r24, X+
    5662:	9c 91       	ld	r25, X
    5664:	13 97       	sbiw	r26, 0x03	; 3
    5666:	30 97       	sbiw	r30, 0x00	; 0
    5668:	19 f0       	breq	.+6      	; 0x5670 <malloc+0xa6>
    566a:	93 83       	std	Z+3, r25	; 0x03
    566c:	82 83       	std	Z+2, r24	; 0x02
    566e:	04 c0       	rjmp	.+8      	; 0x5678 <malloc+0xae>
    5670:	90 93 0d 05 	sts	0x050D, r25
    5674:	80 93 0c 05 	sts	0x050C, r24
    5678:	fd 01       	movw	r30, r26
    567a:	32 96       	adiw	r30, 0x02	; 2
    567c:	4f c0       	rjmp	.+158    	; 0x571c <malloc+0x152>
    567e:	ca 01       	movw	r24, r20
    5680:	86 1b       	sub	r24, r22
    5682:	97 0b       	sbc	r25, r23
    5684:	fd 01       	movw	r30, r26
    5686:	e8 0f       	add	r30, r24
    5688:	f9 1f       	adc	r31, r25
    568a:	61 93       	st	Z+, r22
    568c:	71 93       	st	Z+, r23
    568e:	02 97       	sbiw	r24, 0x02	; 2
    5690:	8d 93       	st	X+, r24
    5692:	9c 93       	st	X, r25
    5694:	43 c0       	rjmp	.+134    	; 0x571c <malloc+0x152>
    5696:	fd 01       	movw	r30, r26
    5698:	82 81       	ldd	r24, Z+2	; 0x02
    569a:	93 81       	ldd	r25, Z+3	; 0x03
    569c:	9c 01       	movw	r18, r24
    569e:	d9 01       	movw	r26, r18
    56a0:	10 97       	sbiw	r26, 0x00	; 0
    56a2:	a1 f6       	brne	.-88     	; 0x564c <malloc+0x82>
    56a4:	80 91 0a 05 	lds	r24, 0x050A
    56a8:	90 91 0b 05 	lds	r25, 0x050B
    56ac:	89 2b       	or	r24, r25
    56ae:	41 f4       	brne	.+16     	; 0x56c0 <malloc+0xf6>
    56b0:	80 91 fd 01 	lds	r24, 0x01FD
    56b4:	90 91 fe 01 	lds	r25, 0x01FE
    56b8:	90 93 0b 05 	sts	0x050B, r25
    56bc:	80 93 0a 05 	sts	0x050A, r24
    56c0:	40 91 ff 01 	lds	r20, 0x01FF
    56c4:	50 91 00 02 	lds	r21, 0x0200
    56c8:	41 15       	cp	r20, r1
    56ca:	51 05       	cpc	r21, r1
    56cc:	41 f4       	brne	.+16     	; 0x56de <malloc+0x114>
    56ce:	4d b7       	in	r20, 0x3d	; 61
    56d0:	5e b7       	in	r21, 0x3e	; 62
    56d2:	80 91 fb 01 	lds	r24, 0x01FB
    56d6:	90 91 fc 01 	lds	r25, 0x01FC
    56da:	48 1b       	sub	r20, r24
    56dc:	59 0b       	sbc	r21, r25
    56de:	20 91 0a 05 	lds	r18, 0x050A
    56e2:	30 91 0b 05 	lds	r19, 0x050B
    56e6:	24 17       	cp	r18, r20
    56e8:	35 07       	cpc	r19, r21
    56ea:	b0 f4       	brcc	.+44     	; 0x5718 <malloc+0x14e>
    56ec:	ca 01       	movw	r24, r20
    56ee:	82 1b       	sub	r24, r18
    56f0:	93 0b       	sbc	r25, r19
    56f2:	86 17       	cp	r24, r22
    56f4:	97 07       	cpc	r25, r23
    56f6:	80 f0       	brcs	.+32     	; 0x5718 <malloc+0x14e>
    56f8:	ab 01       	movw	r20, r22
    56fa:	4e 5f       	subi	r20, 0xFE	; 254
    56fc:	5f 4f       	sbci	r21, 0xFF	; 255
    56fe:	84 17       	cp	r24, r20
    5700:	95 07       	cpc	r25, r21
    5702:	50 f0       	brcs	.+20     	; 0x5718 <malloc+0x14e>
    5704:	42 0f       	add	r20, r18
    5706:	53 1f       	adc	r21, r19
    5708:	50 93 0b 05 	sts	0x050B, r21
    570c:	40 93 0a 05 	sts	0x050A, r20
    5710:	f9 01       	movw	r30, r18
    5712:	61 93       	st	Z+, r22
    5714:	71 93       	st	Z+, r23
    5716:	02 c0       	rjmp	.+4      	; 0x571c <malloc+0x152>
    5718:	e0 e0       	ldi	r30, 0x00	; 0
    571a:	f0 e0       	ldi	r31, 0x00	; 0
    571c:	cf 01       	movw	r24, r30
    571e:	df 91       	pop	r29
    5720:	cf 91       	pop	r28
    5722:	08 95       	ret

00005724 <free>:
    5724:	cf 93       	push	r28
    5726:	df 93       	push	r29
    5728:	00 97       	sbiw	r24, 0x00	; 0
    572a:	09 f4       	brne	.+2      	; 0x572e <free+0xa>
    572c:	50 c0       	rjmp	.+160    	; 0x57ce <free+0xaa>
    572e:	ec 01       	movw	r28, r24
    5730:	22 97       	sbiw	r28, 0x02	; 2
    5732:	1b 82       	std	Y+3, r1	; 0x03
    5734:	1a 82       	std	Y+2, r1	; 0x02
    5736:	a0 91 0c 05 	lds	r26, 0x050C
    573a:	b0 91 0d 05 	lds	r27, 0x050D
    573e:	10 97       	sbiw	r26, 0x00	; 0
    5740:	09 f1       	breq	.+66     	; 0x5784 <free+0x60>
    5742:	40 e0       	ldi	r20, 0x00	; 0
    5744:	50 e0       	ldi	r21, 0x00	; 0
    5746:	ac 17       	cp	r26, r28
    5748:	bd 07       	cpc	r27, r29
    574a:	08 f1       	brcs	.+66     	; 0x578e <free+0x6a>
    574c:	bb 83       	std	Y+3, r27	; 0x03
    574e:	aa 83       	std	Y+2, r26	; 0x02
    5750:	fe 01       	movw	r30, r28
    5752:	21 91       	ld	r18, Z+
    5754:	31 91       	ld	r19, Z+
    5756:	e2 0f       	add	r30, r18
    5758:	f3 1f       	adc	r31, r19
    575a:	ae 17       	cp	r26, r30
    575c:	bf 07       	cpc	r27, r31
    575e:	79 f4       	brne	.+30     	; 0x577e <free+0x5a>
    5760:	8d 91       	ld	r24, X+
    5762:	9c 91       	ld	r25, X
    5764:	11 97       	sbiw	r26, 0x01	; 1
    5766:	28 0f       	add	r18, r24
    5768:	39 1f       	adc	r19, r25
    576a:	2e 5f       	subi	r18, 0xFE	; 254
    576c:	3f 4f       	sbci	r19, 0xFF	; 255
    576e:	39 83       	std	Y+1, r19	; 0x01
    5770:	28 83       	st	Y, r18
    5772:	12 96       	adiw	r26, 0x02	; 2
    5774:	8d 91       	ld	r24, X+
    5776:	9c 91       	ld	r25, X
    5778:	13 97       	sbiw	r26, 0x03	; 3
    577a:	9b 83       	std	Y+3, r25	; 0x03
    577c:	8a 83       	std	Y+2, r24	; 0x02
    577e:	41 15       	cp	r20, r1
    5780:	51 05       	cpc	r21, r1
    5782:	71 f4       	brne	.+28     	; 0x57a0 <free+0x7c>
    5784:	d0 93 0d 05 	sts	0x050D, r29
    5788:	c0 93 0c 05 	sts	0x050C, r28
    578c:	20 c0       	rjmp	.+64     	; 0x57ce <free+0xaa>
    578e:	12 96       	adiw	r26, 0x02	; 2
    5790:	8d 91       	ld	r24, X+
    5792:	9c 91       	ld	r25, X
    5794:	13 97       	sbiw	r26, 0x03	; 3
    5796:	ad 01       	movw	r20, r26
    5798:	00 97       	sbiw	r24, 0x00	; 0
    579a:	11 f0       	breq	.+4      	; 0x57a0 <free+0x7c>
    579c:	dc 01       	movw	r26, r24
    579e:	d3 cf       	rjmp	.-90     	; 0x5746 <free+0x22>
    57a0:	fa 01       	movw	r30, r20
    57a2:	d3 83       	std	Z+3, r29	; 0x03
    57a4:	c2 83       	std	Z+2, r28	; 0x02
    57a6:	21 91       	ld	r18, Z+
    57a8:	31 91       	ld	r19, Z+
    57aa:	e2 0f       	add	r30, r18
    57ac:	f3 1f       	adc	r31, r19
    57ae:	ce 17       	cp	r28, r30
    57b0:	df 07       	cpc	r29, r31
    57b2:	69 f4       	brne	.+26     	; 0x57ce <free+0xaa>
    57b4:	88 81       	ld	r24, Y
    57b6:	99 81       	ldd	r25, Y+1	; 0x01
    57b8:	28 0f       	add	r18, r24
    57ba:	39 1f       	adc	r19, r25
    57bc:	2e 5f       	subi	r18, 0xFE	; 254
    57be:	3f 4f       	sbci	r19, 0xFF	; 255
    57c0:	fa 01       	movw	r30, r20
    57c2:	31 83       	std	Z+1, r19	; 0x01
    57c4:	20 83       	st	Z, r18
    57c6:	8a 81       	ldd	r24, Y+2	; 0x02
    57c8:	9b 81       	ldd	r25, Y+3	; 0x03
    57ca:	93 83       	std	Z+3, r25	; 0x03
    57cc:	82 83       	std	Z+2, r24	; 0x02
    57ce:	df 91       	pop	r29
    57d0:	cf 91       	pop	r28
    57d2:	08 95       	ret

000057d4 <do_rand>:
    57d4:	a0 e0       	ldi	r26, 0x00	; 0
    57d6:	b0 e0       	ldi	r27, 0x00	; 0
    57d8:	ef ee       	ldi	r30, 0xEF	; 239
    57da:	fb e2       	ldi	r31, 0x2B	; 43
    57dc:	b3 ce       	rjmp	.-666    	; 0x5544 <__prologue_saves__+0x10>
    57de:	ec 01       	movw	r28, r24
    57e0:	a8 80       	ld	r10, Y
    57e2:	b9 80       	ldd	r11, Y+1	; 0x01
    57e4:	ca 80       	ldd	r12, Y+2	; 0x02
    57e6:	db 80       	ldd	r13, Y+3	; 0x03
    57e8:	a1 14       	cp	r10, r1
    57ea:	b1 04       	cpc	r11, r1
    57ec:	c1 04       	cpc	r12, r1
    57ee:	d1 04       	cpc	r13, r1
    57f0:	41 f4       	brne	.+16     	; 0x5802 <do_rand+0x2e>
    57f2:	84 e2       	ldi	r24, 0x24	; 36
    57f4:	a8 2e       	mov	r10, r24
    57f6:	89 ed       	ldi	r24, 0xD9	; 217
    57f8:	b8 2e       	mov	r11, r24
    57fa:	8b e5       	ldi	r24, 0x5B	; 91
    57fc:	c8 2e       	mov	r12, r24
    57fe:	87 e0       	ldi	r24, 0x07	; 7
    5800:	d8 2e       	mov	r13, r24
    5802:	c6 01       	movw	r24, r12
    5804:	b5 01       	movw	r22, r10
    5806:	2d e1       	ldi	r18, 0x1D	; 29
    5808:	33 ef       	ldi	r19, 0xF3	; 243
    580a:	41 e0       	ldi	r20, 0x01	; 1
    580c:	50 e0       	ldi	r21, 0x00	; 0
    580e:	fa d1       	rcall	.+1012   	; 0x5c04 <__divmodsi4>
    5810:	27 ea       	ldi	r18, 0xA7	; 167
    5812:	31 e4       	ldi	r19, 0x41	; 65
    5814:	40 e0       	ldi	r20, 0x00	; 0
    5816:	50 e0       	ldi	r21, 0x00	; 0
    5818:	39 de       	rcall	.-910    	; 0x548c <__mulsi3>
    581a:	7b 01       	movw	r14, r22
    581c:	8c 01       	movw	r16, r24
    581e:	c6 01       	movw	r24, r12
    5820:	b5 01       	movw	r22, r10
    5822:	2d e1       	ldi	r18, 0x1D	; 29
    5824:	33 ef       	ldi	r19, 0xF3	; 243
    5826:	41 e0       	ldi	r20, 0x01	; 1
    5828:	50 e0       	ldi	r21, 0x00	; 0
    582a:	ec d1       	rcall	.+984    	; 0x5c04 <__divmodsi4>
    582c:	ca 01       	movw	r24, r20
    582e:	b9 01       	movw	r22, r18
    5830:	2c ee       	ldi	r18, 0xEC	; 236
    5832:	34 ef       	ldi	r19, 0xF4	; 244
    5834:	4f ef       	ldi	r20, 0xFF	; 255
    5836:	5f ef       	ldi	r21, 0xFF	; 255
    5838:	29 de       	rcall	.-942    	; 0x548c <__mulsi3>
    583a:	6e 0d       	add	r22, r14
    583c:	7f 1d       	adc	r23, r15
    583e:	80 1f       	adc	r24, r16
    5840:	91 1f       	adc	r25, r17
    5842:	97 ff       	sbrs	r25, 7
    5844:	04 c0       	rjmp	.+8      	; 0x584e <do_rand+0x7a>
    5846:	61 50       	subi	r22, 0x01	; 1
    5848:	70 40       	sbci	r23, 0x00	; 0
    584a:	80 40       	sbci	r24, 0x00	; 0
    584c:	90 48       	sbci	r25, 0x80	; 128
    584e:	68 83       	st	Y, r22
    5850:	79 83       	std	Y+1, r23	; 0x01
    5852:	8a 83       	std	Y+2, r24	; 0x02
    5854:	9b 83       	std	Y+3, r25	; 0x03
    5856:	9b 01       	movw	r18, r22
    5858:	3f 77       	andi	r19, 0x7F	; 127
    585a:	c9 01       	movw	r24, r18
    585c:	cd b7       	in	r28, 0x3d	; 61
    585e:	de b7       	in	r29, 0x3e	; 62
    5860:	ea e0       	ldi	r30, 0x0A	; 10
    5862:	8c ce       	rjmp	.-744    	; 0x557c <__epilogue_restores__+0x10>

00005864 <rand_r>:
    5864:	b7 df       	rcall	.-146    	; 0x57d4 <do_rand>
    5866:	08 95       	ret

00005868 <rand>:
    5868:	81 e0       	ldi	r24, 0x01	; 1
    586a:	92 e0       	ldi	r25, 0x02	; 2
    586c:	b3 df       	rcall	.-154    	; 0x57d4 <do_rand>
    586e:	08 95       	ret

00005870 <srand>:
    5870:	a0 e0       	ldi	r26, 0x00	; 0
    5872:	b0 e0       	ldi	r27, 0x00	; 0
    5874:	80 93 01 02 	sts	0x0201, r24
    5878:	90 93 02 02 	sts	0x0202, r25
    587c:	a0 93 03 02 	sts	0x0203, r26
    5880:	b0 93 04 02 	sts	0x0204, r27
    5884:	08 95       	ret

00005886 <__ftoa_engine>:
    5886:	28 30       	cpi	r18, 0x08	; 8
    5888:	08 f0       	brcs	.+2      	; 0x588c <__ftoa_engine+0x6>
    588a:	27 e0       	ldi	r18, 0x07	; 7
    588c:	33 27       	eor	r19, r19
    588e:	da 01       	movw	r26, r20
    5890:	99 0f       	add	r25, r25
    5892:	31 1d       	adc	r19, r1
    5894:	87 fd       	sbrc	r24, 7
    5896:	91 60       	ori	r25, 0x01	; 1
    5898:	00 96       	adiw	r24, 0x00	; 0
    589a:	61 05       	cpc	r22, r1
    589c:	71 05       	cpc	r23, r1
    589e:	39 f4       	brne	.+14     	; 0x58ae <__ftoa_engine+0x28>
    58a0:	32 60       	ori	r19, 0x02	; 2
    58a2:	2e 5f       	subi	r18, 0xFE	; 254
    58a4:	3d 93       	st	X+, r19
    58a6:	30 e3       	ldi	r19, 0x30	; 48
    58a8:	2a 95       	dec	r18
    58aa:	e1 f7       	brne	.-8      	; 0x58a4 <__ftoa_engine+0x1e>
    58ac:	08 95       	ret
    58ae:	9f 3f       	cpi	r25, 0xFF	; 255
    58b0:	30 f0       	brcs	.+12     	; 0x58be <__ftoa_engine+0x38>
    58b2:	80 38       	cpi	r24, 0x80	; 128
    58b4:	71 05       	cpc	r23, r1
    58b6:	61 05       	cpc	r22, r1
    58b8:	09 f0       	breq	.+2      	; 0x58bc <__ftoa_engine+0x36>
    58ba:	3c 5f       	subi	r19, 0xFC	; 252
    58bc:	3c 5f       	subi	r19, 0xFC	; 252
    58be:	3d 93       	st	X+, r19
    58c0:	91 30       	cpi	r25, 0x01	; 1
    58c2:	08 f0       	brcs	.+2      	; 0x58c6 <__ftoa_engine+0x40>
    58c4:	80 68       	ori	r24, 0x80	; 128
    58c6:	91 1d       	adc	r25, r1
    58c8:	df 93       	push	r29
    58ca:	cf 93       	push	r28
    58cc:	1f 93       	push	r17
    58ce:	0f 93       	push	r16
    58d0:	ff 92       	push	r15
    58d2:	ef 92       	push	r14
    58d4:	19 2f       	mov	r17, r25
    58d6:	98 7f       	andi	r25, 0xF8	; 248
    58d8:	96 95       	lsr	r25
    58da:	e9 2f       	mov	r30, r25
    58dc:	96 95       	lsr	r25
    58de:	96 95       	lsr	r25
    58e0:	e9 0f       	add	r30, r25
    58e2:	ff 27       	eor	r31, r31
    58e4:	ef 53       	subi	r30, 0x3F	; 63
    58e6:	fa 4f       	sbci	r31, 0xFA	; 250
    58e8:	99 27       	eor	r25, r25
    58ea:	33 27       	eor	r19, r19
    58ec:	ee 24       	eor	r14, r14
    58ee:	ff 24       	eor	r15, r15
    58f0:	a7 01       	movw	r20, r14
    58f2:	e7 01       	movw	r28, r14
    58f4:	05 90       	lpm	r0, Z+
    58f6:	08 94       	sec
    58f8:	07 94       	ror	r0
    58fa:	28 f4       	brcc	.+10     	; 0x5906 <__ftoa_engine+0x80>
    58fc:	36 0f       	add	r19, r22
    58fe:	e7 1e       	adc	r14, r23
    5900:	f8 1e       	adc	r15, r24
    5902:	49 1f       	adc	r20, r25
    5904:	51 1d       	adc	r21, r1
    5906:	66 0f       	add	r22, r22
    5908:	77 1f       	adc	r23, r23
    590a:	88 1f       	adc	r24, r24
    590c:	99 1f       	adc	r25, r25
    590e:	06 94       	lsr	r0
    5910:	a1 f7       	brne	.-24     	; 0x58fa <__ftoa_engine+0x74>
    5912:	05 90       	lpm	r0, Z+
    5914:	07 94       	ror	r0
    5916:	28 f4       	brcc	.+10     	; 0x5922 <__ftoa_engine+0x9c>
    5918:	e7 0e       	add	r14, r23
    591a:	f8 1e       	adc	r15, r24
    591c:	49 1f       	adc	r20, r25
    591e:	56 1f       	adc	r21, r22
    5920:	c1 1d       	adc	r28, r1
    5922:	77 0f       	add	r23, r23
    5924:	88 1f       	adc	r24, r24
    5926:	99 1f       	adc	r25, r25
    5928:	66 1f       	adc	r22, r22
    592a:	06 94       	lsr	r0
    592c:	a1 f7       	brne	.-24     	; 0x5916 <__ftoa_engine+0x90>
    592e:	05 90       	lpm	r0, Z+
    5930:	07 94       	ror	r0
    5932:	28 f4       	brcc	.+10     	; 0x593e <__ftoa_engine+0xb8>
    5934:	f8 0e       	add	r15, r24
    5936:	49 1f       	adc	r20, r25
    5938:	56 1f       	adc	r21, r22
    593a:	c7 1f       	adc	r28, r23
    593c:	d1 1d       	adc	r29, r1
    593e:	88 0f       	add	r24, r24
    5940:	99 1f       	adc	r25, r25
    5942:	66 1f       	adc	r22, r22
    5944:	77 1f       	adc	r23, r23
    5946:	06 94       	lsr	r0
    5948:	a1 f7       	brne	.-24     	; 0x5932 <__ftoa_engine+0xac>
    594a:	05 90       	lpm	r0, Z+
    594c:	07 94       	ror	r0
    594e:	20 f4       	brcc	.+8      	; 0x5958 <__ftoa_engine+0xd2>
    5950:	49 0f       	add	r20, r25
    5952:	56 1f       	adc	r21, r22
    5954:	c7 1f       	adc	r28, r23
    5956:	d8 1f       	adc	r29, r24
    5958:	99 0f       	add	r25, r25
    595a:	66 1f       	adc	r22, r22
    595c:	77 1f       	adc	r23, r23
    595e:	88 1f       	adc	r24, r24
    5960:	06 94       	lsr	r0
    5962:	a9 f7       	brne	.-22     	; 0x594e <__ftoa_engine+0xc8>
    5964:	84 91       	lpm	r24, Z+
    5966:	10 95       	com	r17
    5968:	17 70       	andi	r17, 0x07	; 7
    596a:	41 f0       	breq	.+16     	; 0x597c <__ftoa_engine+0xf6>
    596c:	d6 95       	lsr	r29
    596e:	c7 95       	ror	r28
    5970:	57 95       	ror	r21
    5972:	47 95       	ror	r20
    5974:	f7 94       	ror	r15
    5976:	e7 94       	ror	r14
    5978:	1a 95       	dec	r17
    597a:	c1 f7       	brne	.-16     	; 0x596c <__ftoa_engine+0xe6>
    597c:	e7 e6       	ldi	r30, 0x67	; 103
    597e:	f5 e0       	ldi	r31, 0x05	; 5
    5980:	68 94       	set
    5982:	15 90       	lpm	r1, Z+
    5984:	15 91       	lpm	r17, Z+
    5986:	35 91       	lpm	r19, Z+
    5988:	65 91       	lpm	r22, Z+
    598a:	95 91       	lpm	r25, Z+
    598c:	05 90       	lpm	r0, Z+
    598e:	7f e2       	ldi	r23, 0x2F	; 47
    5990:	73 95       	inc	r23
    5992:	e1 18       	sub	r14, r1
    5994:	f1 0a       	sbc	r15, r17
    5996:	43 0b       	sbc	r20, r19
    5998:	56 0b       	sbc	r21, r22
    599a:	c9 0b       	sbc	r28, r25
    599c:	d0 09       	sbc	r29, r0
    599e:	c0 f7       	brcc	.-16     	; 0x5990 <__ftoa_engine+0x10a>
    59a0:	e1 0c       	add	r14, r1
    59a2:	f1 1e       	adc	r15, r17
    59a4:	43 1f       	adc	r20, r19
    59a6:	56 1f       	adc	r21, r22
    59a8:	c9 1f       	adc	r28, r25
    59aa:	d0 1d       	adc	r29, r0
    59ac:	7e f4       	brtc	.+30     	; 0x59cc <__ftoa_engine+0x146>
    59ae:	70 33       	cpi	r23, 0x30	; 48
    59b0:	11 f4       	brne	.+4      	; 0x59b6 <__ftoa_engine+0x130>
    59b2:	8a 95       	dec	r24
    59b4:	e6 cf       	rjmp	.-52     	; 0x5982 <__ftoa_engine+0xfc>
    59b6:	e8 94       	clt
    59b8:	01 50       	subi	r16, 0x01	; 1
    59ba:	30 f0       	brcs	.+12     	; 0x59c8 <__ftoa_engine+0x142>
    59bc:	08 0f       	add	r16, r24
    59be:	0a f4       	brpl	.+2      	; 0x59c2 <__ftoa_engine+0x13c>
    59c0:	00 27       	eor	r16, r16
    59c2:	02 17       	cp	r16, r18
    59c4:	08 f4       	brcc	.+2      	; 0x59c8 <__ftoa_engine+0x142>
    59c6:	20 2f       	mov	r18, r16
    59c8:	23 95       	inc	r18
    59ca:	02 2f       	mov	r16, r18
    59cc:	7a 33       	cpi	r23, 0x3A	; 58
    59ce:	28 f0       	brcs	.+10     	; 0x59da <__ftoa_engine+0x154>
    59d0:	79 e3       	ldi	r23, 0x39	; 57
    59d2:	7d 93       	st	X+, r23
    59d4:	2a 95       	dec	r18
    59d6:	e9 f7       	brne	.-6      	; 0x59d2 <__ftoa_engine+0x14c>
    59d8:	10 c0       	rjmp	.+32     	; 0x59fa <__ftoa_engine+0x174>
    59da:	7d 93       	st	X+, r23
    59dc:	2a 95       	dec	r18
    59de:	89 f6       	brne	.-94     	; 0x5982 <__ftoa_engine+0xfc>
    59e0:	06 94       	lsr	r0
    59e2:	97 95       	ror	r25
    59e4:	67 95       	ror	r22
    59e6:	37 95       	ror	r19
    59e8:	17 95       	ror	r17
    59ea:	17 94       	ror	r1
    59ec:	e1 18       	sub	r14, r1
    59ee:	f1 0a       	sbc	r15, r17
    59f0:	43 0b       	sbc	r20, r19
    59f2:	56 0b       	sbc	r21, r22
    59f4:	c9 0b       	sbc	r28, r25
    59f6:	d0 09       	sbc	r29, r0
    59f8:	98 f0       	brcs	.+38     	; 0x5a20 <__ftoa_engine+0x19a>
    59fa:	23 95       	inc	r18
    59fc:	7e 91       	ld	r23, -X
    59fe:	73 95       	inc	r23
    5a00:	7a 33       	cpi	r23, 0x3A	; 58
    5a02:	08 f0       	brcs	.+2      	; 0x5a06 <__ftoa_engine+0x180>
    5a04:	70 e3       	ldi	r23, 0x30	; 48
    5a06:	7c 93       	st	X, r23
    5a08:	20 13       	cpse	r18, r16
    5a0a:	b8 f7       	brcc	.-18     	; 0x59fa <__ftoa_engine+0x174>
    5a0c:	7e 91       	ld	r23, -X
    5a0e:	70 61       	ori	r23, 0x10	; 16
    5a10:	7d 93       	st	X+, r23
    5a12:	30 f0       	brcs	.+12     	; 0x5a20 <__ftoa_engine+0x19a>
    5a14:	83 95       	inc	r24
    5a16:	71 e3       	ldi	r23, 0x31	; 49
    5a18:	7d 93       	st	X+, r23
    5a1a:	70 e3       	ldi	r23, 0x30	; 48
    5a1c:	2a 95       	dec	r18
    5a1e:	e1 f7       	brne	.-8      	; 0x5a18 <__ftoa_engine+0x192>
    5a20:	11 24       	eor	r1, r1
    5a22:	ef 90       	pop	r14
    5a24:	ff 90       	pop	r15
    5a26:	0f 91       	pop	r16
    5a28:	1f 91       	pop	r17
    5a2a:	cf 91       	pop	r28
    5a2c:	df 91       	pop	r29
    5a2e:	99 27       	eor	r25, r25
    5a30:	87 fd       	sbrc	r24, 7
    5a32:	90 95       	com	r25
    5a34:	08 95       	ret

00005a36 <strnlen_P>:
    5a36:	fc 01       	movw	r30, r24
    5a38:	05 90       	lpm	r0, Z+
    5a3a:	61 50       	subi	r22, 0x01	; 1
    5a3c:	70 40       	sbci	r23, 0x00	; 0
    5a3e:	01 10       	cpse	r0, r1
    5a40:	d8 f7       	brcc	.-10     	; 0x5a38 <strnlen_P+0x2>
    5a42:	80 95       	com	r24
    5a44:	90 95       	com	r25
    5a46:	8e 0f       	add	r24, r30
    5a48:	9f 1f       	adc	r25, r31
    5a4a:	08 95       	ret

00005a4c <strnlen>:
    5a4c:	fc 01       	movw	r30, r24
    5a4e:	61 50       	subi	r22, 0x01	; 1
    5a50:	70 40       	sbci	r23, 0x00	; 0
    5a52:	01 90       	ld	r0, Z+
    5a54:	01 10       	cpse	r0, r1
    5a56:	d8 f7       	brcc	.-10     	; 0x5a4e <strnlen+0x2>
    5a58:	80 95       	com	r24
    5a5a:	90 95       	com	r25
    5a5c:	8e 0f       	add	r24, r30
    5a5e:	9f 1f       	adc	r25, r31
    5a60:	08 95       	ret

00005a62 <fputc>:
    5a62:	0f 93       	push	r16
    5a64:	1f 93       	push	r17
    5a66:	cf 93       	push	r28
    5a68:	df 93       	push	r29
    5a6a:	8c 01       	movw	r16, r24
    5a6c:	eb 01       	movw	r28, r22
    5a6e:	8b 81       	ldd	r24, Y+3	; 0x03
    5a70:	81 ff       	sbrs	r24, 1
    5a72:	1b c0       	rjmp	.+54     	; 0x5aaa <fputc+0x48>
    5a74:	82 ff       	sbrs	r24, 2
    5a76:	0d c0       	rjmp	.+26     	; 0x5a92 <fputc+0x30>
    5a78:	2e 81       	ldd	r18, Y+6	; 0x06
    5a7a:	3f 81       	ldd	r19, Y+7	; 0x07
    5a7c:	8c 81       	ldd	r24, Y+4	; 0x04
    5a7e:	9d 81       	ldd	r25, Y+5	; 0x05
    5a80:	28 17       	cp	r18, r24
    5a82:	39 07       	cpc	r19, r25
    5a84:	64 f4       	brge	.+24     	; 0x5a9e <fputc+0x3c>
    5a86:	e8 81       	ld	r30, Y
    5a88:	f9 81       	ldd	r31, Y+1	; 0x01
    5a8a:	01 93       	st	Z+, r16
    5a8c:	f9 83       	std	Y+1, r31	; 0x01
    5a8e:	e8 83       	st	Y, r30
    5a90:	06 c0       	rjmp	.+12     	; 0x5a9e <fputc+0x3c>
    5a92:	e8 85       	ldd	r30, Y+8	; 0x08
    5a94:	f9 85       	ldd	r31, Y+9	; 0x09
    5a96:	80 2f       	mov	r24, r16
    5a98:	09 95       	icall
    5a9a:	89 2b       	or	r24, r25
    5a9c:	31 f4       	brne	.+12     	; 0x5aaa <fputc+0x48>
    5a9e:	8e 81       	ldd	r24, Y+6	; 0x06
    5aa0:	9f 81       	ldd	r25, Y+7	; 0x07
    5aa2:	01 96       	adiw	r24, 0x01	; 1
    5aa4:	9f 83       	std	Y+7, r25	; 0x07
    5aa6:	8e 83       	std	Y+6, r24	; 0x06
    5aa8:	02 c0       	rjmp	.+4      	; 0x5aae <fputc+0x4c>
    5aaa:	0f ef       	ldi	r16, 0xFF	; 255
    5aac:	1f ef       	ldi	r17, 0xFF	; 255
    5aae:	c8 01       	movw	r24, r16
    5ab0:	df 91       	pop	r29
    5ab2:	cf 91       	pop	r28
    5ab4:	1f 91       	pop	r17
    5ab6:	0f 91       	pop	r16
    5ab8:	08 95       	ret

00005aba <printf>:
    5aba:	a0 e0       	ldi	r26, 0x00	; 0
    5abc:	b0 e0       	ldi	r27, 0x00	; 0
    5abe:	e2 e6       	ldi	r30, 0x62	; 98
    5ac0:	fd e2       	ldi	r31, 0x2D	; 45
    5ac2:	48 cd       	rjmp	.-1392   	; 0x5554 <__prologue_saves__+0x20>
    5ac4:	fe 01       	movw	r30, r28
    5ac6:	35 96       	adiw	r30, 0x05	; 5
    5ac8:	61 91       	ld	r22, Z+
    5aca:	71 91       	ld	r23, Z+
    5acc:	80 91 10 05 	lds	r24, 0x0510
    5ad0:	90 91 11 05 	lds	r25, 0x0511
    5ad4:	af 01       	movw	r20, r30
    5ad6:	72 d9       	rcall	.-3356   	; 0x4dbc <vfprintf>
    5ad8:	20 96       	adiw	r28, 0x00	; 0
    5ada:	e2 e0       	ldi	r30, 0x02	; 2
    5adc:	57 cd       	rjmp	.-1362   	; 0x558c <__epilogue_restores__+0x20>

00005ade <puts>:
    5ade:	0f 93       	push	r16
    5ae0:	1f 93       	push	r17
    5ae2:	cf 93       	push	r28
    5ae4:	df 93       	push	r29
    5ae6:	8c 01       	movw	r16, r24
    5ae8:	e0 91 10 05 	lds	r30, 0x0510
    5aec:	f0 91 11 05 	lds	r31, 0x0511
    5af0:	83 81       	ldd	r24, Z+3	; 0x03
    5af2:	81 ff       	sbrs	r24, 1
    5af4:	21 c0       	rjmp	.+66     	; 0x5b38 <puts+0x5a>
    5af6:	c0 e0       	ldi	r28, 0x00	; 0
    5af8:	d0 e0       	ldi	r29, 0x00	; 0
    5afa:	0d c0       	rjmp	.+26     	; 0x5b16 <puts+0x38>
    5afc:	e0 91 10 05 	lds	r30, 0x0510
    5b00:	f0 91 11 05 	lds	r31, 0x0511
    5b04:	20 85       	ldd	r18, Z+8	; 0x08
    5b06:	31 85       	ldd	r19, Z+9	; 0x09
    5b08:	bf 01       	movw	r22, r30
    5b0a:	f9 01       	movw	r30, r18
    5b0c:	09 95       	icall
    5b0e:	89 2b       	or	r24, r25
    5b10:	11 f0       	breq	.+4      	; 0x5b16 <puts+0x38>
    5b12:	cf ef       	ldi	r28, 0xFF	; 255
    5b14:	df ef       	ldi	r29, 0xFF	; 255
    5b16:	f8 01       	movw	r30, r16
    5b18:	81 91       	ld	r24, Z+
    5b1a:	8f 01       	movw	r16, r30
    5b1c:	88 23       	and	r24, r24
    5b1e:	71 f7       	brne	.-36     	; 0x5afc <puts+0x1e>
    5b20:	e0 91 10 05 	lds	r30, 0x0510
    5b24:	f0 91 11 05 	lds	r31, 0x0511
    5b28:	20 85       	ldd	r18, Z+8	; 0x08
    5b2a:	31 85       	ldd	r19, Z+9	; 0x09
    5b2c:	8a e0       	ldi	r24, 0x0A	; 10
    5b2e:	bf 01       	movw	r22, r30
    5b30:	f9 01       	movw	r30, r18
    5b32:	09 95       	icall
    5b34:	89 2b       	or	r24, r25
    5b36:	11 f0       	breq	.+4      	; 0x5b3c <puts+0x5e>
    5b38:	cf ef       	ldi	r28, 0xFF	; 255
    5b3a:	df ef       	ldi	r29, 0xFF	; 255
    5b3c:	ce 01       	movw	r24, r28
    5b3e:	df 91       	pop	r29
    5b40:	cf 91       	pop	r28
    5b42:	1f 91       	pop	r17
    5b44:	0f 91       	pop	r16
    5b46:	08 95       	ret

00005b48 <__ultoa_invert>:
    5b48:	fa 01       	movw	r30, r20
    5b4a:	aa 27       	eor	r26, r26
    5b4c:	28 30       	cpi	r18, 0x08	; 8
    5b4e:	51 f1       	breq	.+84     	; 0x5ba4 <__ultoa_invert+0x5c>
    5b50:	20 31       	cpi	r18, 0x10	; 16
    5b52:	81 f1       	breq	.+96     	; 0x5bb4 <__ultoa_invert+0x6c>
    5b54:	e8 94       	clt
    5b56:	6f 93       	push	r22
    5b58:	6e 7f       	andi	r22, 0xFE	; 254
    5b5a:	6e 5f       	subi	r22, 0xFE	; 254
    5b5c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b5e:	8f 4f       	sbci	r24, 0xFF	; 255
    5b60:	9f 4f       	sbci	r25, 0xFF	; 255
    5b62:	af 4f       	sbci	r26, 0xFF	; 255
    5b64:	b1 e0       	ldi	r27, 0x01	; 1
    5b66:	3e d0       	rcall	.+124    	; 0x5be4 <__ultoa_invert+0x9c>
    5b68:	b4 e0       	ldi	r27, 0x04	; 4
    5b6a:	3c d0       	rcall	.+120    	; 0x5be4 <__ultoa_invert+0x9c>
    5b6c:	67 0f       	add	r22, r23
    5b6e:	78 1f       	adc	r23, r24
    5b70:	89 1f       	adc	r24, r25
    5b72:	9a 1f       	adc	r25, r26
    5b74:	a1 1d       	adc	r26, r1
    5b76:	68 0f       	add	r22, r24
    5b78:	79 1f       	adc	r23, r25
    5b7a:	8a 1f       	adc	r24, r26
    5b7c:	91 1d       	adc	r25, r1
    5b7e:	a1 1d       	adc	r26, r1
    5b80:	6a 0f       	add	r22, r26
    5b82:	71 1d       	adc	r23, r1
    5b84:	81 1d       	adc	r24, r1
    5b86:	91 1d       	adc	r25, r1
    5b88:	a1 1d       	adc	r26, r1
    5b8a:	20 d0       	rcall	.+64     	; 0x5bcc <__ultoa_invert+0x84>
    5b8c:	09 f4       	brne	.+2      	; 0x5b90 <__ultoa_invert+0x48>
    5b8e:	68 94       	set
    5b90:	3f 91       	pop	r19
    5b92:	2a e0       	ldi	r18, 0x0A	; 10
    5b94:	26 9f       	mul	r18, r22
    5b96:	11 24       	eor	r1, r1
    5b98:	30 19       	sub	r19, r0
    5b9a:	30 5d       	subi	r19, 0xD0	; 208
    5b9c:	31 93       	st	Z+, r19
    5b9e:	de f6       	brtc	.-74     	; 0x5b56 <__ultoa_invert+0xe>
    5ba0:	cf 01       	movw	r24, r30
    5ba2:	08 95       	ret
    5ba4:	46 2f       	mov	r20, r22
    5ba6:	47 70       	andi	r20, 0x07	; 7
    5ba8:	40 5d       	subi	r20, 0xD0	; 208
    5baa:	41 93       	st	Z+, r20
    5bac:	b3 e0       	ldi	r27, 0x03	; 3
    5bae:	0f d0       	rcall	.+30     	; 0x5bce <__ultoa_invert+0x86>
    5bb0:	c9 f7       	brne	.-14     	; 0x5ba4 <__ultoa_invert+0x5c>
    5bb2:	f6 cf       	rjmp	.-20     	; 0x5ba0 <__ultoa_invert+0x58>
    5bb4:	46 2f       	mov	r20, r22
    5bb6:	4f 70       	andi	r20, 0x0F	; 15
    5bb8:	40 5d       	subi	r20, 0xD0	; 208
    5bba:	4a 33       	cpi	r20, 0x3A	; 58
    5bbc:	18 f0       	brcs	.+6      	; 0x5bc4 <__ultoa_invert+0x7c>
    5bbe:	49 5d       	subi	r20, 0xD9	; 217
    5bc0:	31 fd       	sbrc	r19, 1
    5bc2:	40 52       	subi	r20, 0x20	; 32
    5bc4:	41 93       	st	Z+, r20
    5bc6:	02 d0       	rcall	.+4      	; 0x5bcc <__ultoa_invert+0x84>
    5bc8:	a9 f7       	brne	.-22     	; 0x5bb4 <__ultoa_invert+0x6c>
    5bca:	ea cf       	rjmp	.-44     	; 0x5ba0 <__ultoa_invert+0x58>
    5bcc:	b4 e0       	ldi	r27, 0x04	; 4
    5bce:	a6 95       	lsr	r26
    5bd0:	97 95       	ror	r25
    5bd2:	87 95       	ror	r24
    5bd4:	77 95       	ror	r23
    5bd6:	67 95       	ror	r22
    5bd8:	ba 95       	dec	r27
    5bda:	c9 f7       	brne	.-14     	; 0x5bce <__ultoa_invert+0x86>
    5bdc:	00 97       	sbiw	r24, 0x00	; 0
    5bde:	61 05       	cpc	r22, r1
    5be0:	71 05       	cpc	r23, r1
    5be2:	08 95       	ret
    5be4:	9b 01       	movw	r18, r22
    5be6:	ac 01       	movw	r20, r24
    5be8:	0a 2e       	mov	r0, r26
    5bea:	06 94       	lsr	r0
    5bec:	57 95       	ror	r21
    5bee:	47 95       	ror	r20
    5bf0:	37 95       	ror	r19
    5bf2:	27 95       	ror	r18
    5bf4:	ba 95       	dec	r27
    5bf6:	c9 f7       	brne	.-14     	; 0x5bea <__ultoa_invert+0xa2>
    5bf8:	62 0f       	add	r22, r18
    5bfa:	73 1f       	adc	r23, r19
    5bfc:	84 1f       	adc	r24, r20
    5bfe:	95 1f       	adc	r25, r21
    5c00:	a0 1d       	adc	r26, r0
    5c02:	08 95       	ret

00005c04 <__divmodsi4>:
    5c04:	97 fb       	bst	r25, 7
    5c06:	09 2e       	mov	r0, r25
    5c08:	05 26       	eor	r0, r21
    5c0a:	0e d0       	rcall	.+28     	; 0x5c28 <__divmodsi4_neg1>
    5c0c:	57 fd       	sbrc	r21, 7
    5c0e:	04 d0       	rcall	.+8      	; 0x5c18 <__divmodsi4_neg2>
    5c10:	6f dc       	rcall	.-1826   	; 0x54f0 <__udivmodsi4>
    5c12:	0a d0       	rcall	.+20     	; 0x5c28 <__divmodsi4_neg1>
    5c14:	00 1c       	adc	r0, r0
    5c16:	38 f4       	brcc	.+14     	; 0x5c26 <__divmodsi4_exit>

00005c18 <__divmodsi4_neg2>:
    5c18:	50 95       	com	r21
    5c1a:	40 95       	com	r20
    5c1c:	30 95       	com	r19
    5c1e:	21 95       	neg	r18
    5c20:	3f 4f       	sbci	r19, 0xFF	; 255
    5c22:	4f 4f       	sbci	r20, 0xFF	; 255
    5c24:	5f 4f       	sbci	r21, 0xFF	; 255

00005c26 <__divmodsi4_exit>:
    5c26:	08 95       	ret

00005c28 <__divmodsi4_neg1>:
    5c28:	f6 f7       	brtc	.-4      	; 0x5c26 <__divmodsi4_exit>
    5c2a:	90 95       	com	r25
    5c2c:	80 95       	com	r24
    5c2e:	70 95       	com	r23
    5c30:	61 95       	neg	r22
    5c32:	7f 4f       	sbci	r23, 0xFF	; 255
    5c34:	8f 4f       	sbci	r24, 0xFF	; 255
    5c36:	9f 4f       	sbci	r25, 0xFF	; 255
    5c38:	08 95       	ret

00005c3a <_exit>:
    5c3a:	f8 94       	cli

00005c3c <__stop_program>:
    5c3c:	ff cf       	rjmp	.-2      	; 0x5c3c <__stop_program>
