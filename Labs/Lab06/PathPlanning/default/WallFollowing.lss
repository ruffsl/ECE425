
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b0  00800100  00006936  000069ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006936  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000321  008003b0  008003b0  00006c7a  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  00006c7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000464  00000000  00000000  00006cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001476  00000000  00000000  0000711e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002f9  00000000  00000000  00008594  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001230  00000000  00000000  0000888d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000290  00000000  00000000  00009ac0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000c69  00000000  00000000  00009d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f94  00000000  00000000  0000a9b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 90 20 	jmp	0x4120	; 0x4120 <__vector_4>
      14:	0c 94 b9 20 	jmp	0x4172	; 0x4172 <__vector_5>
      18:	0c 94 e2 20 	jmp	0x41c4	; 0x41c4 <__vector_6>
      1c:	0c 94 0b 21 	jmp	0x4216	; 0x4216 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 71 1f 	jmp	0x3ee2	; 0x3ee2 <__vector_9>
      28:	0c 94 9a 1f 	jmp	0x3f34	; 0x3f34 <__vector_10>
      2c:	0c 94 c3 1f 	jmp	0x3f86	; 0x3f86 <__vector_11>
      30:	0c 94 3e 20 	jmp	0x407c	; 0x407c <__vector_12>
      34:	0c 94 ec 1f 	jmp	0x3fd8	; 0x3fd8 <__vector_13>
      38:	0c 94 15 20 	jmp	0x402a	; 0x402a <__vector_14>
      3c:	0c 94 67 20 	jmp	0x40ce	; 0x40ce <__vector_15>
      40:	0c 94 f6 1e 	jmp	0x3dec	; 0x3dec <__vector_16>
      44:	0c 94 1f 1f 	jmp	0x3e3e	; 0x3e3e <__vector_17>
      48:	0c 94 48 1f 	jmp	0x3e90	; 0x3e90 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	5b 1c       	adc	r5, r11
      7e:	5e 1c       	adc	r5, r14
      80:	61 1c       	adc	r6, r1
      82:	64 1c       	adc	r6, r4
      84:	6d 1c       	adc	r6, r13
      86:	67 1c       	adc	r6, r7
      88:	6a 1c       	adc	r6, r10
      8a:	70 1c       	adc	r7, r0
      8c:	73 1c       	adc	r7, r3
      8e:	76 1c       	adc	r7, r6
      90:	79 1c       	adc	r7, r9
      92:	7c 1c       	adc	r7, r12
      94:	7f 1c       	adc	r7, r15
      96:	82 1c       	adc	r8, r2
      98:	85 1c       	adc	r8, r5
      9a:	88 1c       	adc	r8, r8
      9c:	8b 1c       	adc	r8, r11
      9e:	8e 1c       	adc	r8, r14
      a0:	91 1c       	adc	r9, r1
      a2:	a2 1c       	adc	r10, r2
      a4:	a5 1c       	adc	r10, r5
      a6:	a8 1c       	adc	r10, r8
      a8:	ab 1c       	adc	r10, r11
      aa:	b4 1c       	adc	r11, r4
      ac:	ae 1c       	adc	r10, r14
      ae:	b1 1c       	adc	r11, r1
      b0:	b7 1c       	adc	r11, r7
      b2:	ba 1c       	adc	r11, r10
      b4:	bd 1c       	adc	r11, r13
      b6:	c0 1c       	adc	r12, r0
      b8:	c3 1c       	adc	r12, r3
      ba:	c6 1c       	adc	r12, r6
      bc:	c9 1c       	adc	r12, r9
      be:	cc 1c       	adc	r12, r12
      c0:	cf 1c       	adc	r12, r15
      c2:	d2 1c       	adc	r13, r2
      c4:	d5 1c       	adc	r13, r5
      c6:	d8 1c       	adc	r13, r8
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e6 e3       	ldi	r30, 0x36	; 54
     676:	f9 e6       	ldi	r31, 0x69	; 105
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a0 3b       	cpi	r26, 0xB0	; 176
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	16 e0       	ldi	r17, 0x06	; 6
     686:	a0 eb       	ldi	r26, 0xB0	; 176
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a1 3d       	cpi	r26, 0xD1	; 209
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <main>
     698:	0c 94 99 34 	jmp	0x6932	; 0x6932 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 34 1e 	call	0x3c68	; 0x3c68 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 5a 1e 	call	0x3cb4	; 0x3cb4 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 08 1e 	call	0x3c10	; 0x3c10 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 a0 1e 	call	0x3d40	; 0x3d40 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 d5 16 	call	0x2daa	; 0x2daa <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 81 16 	call	0x2d02	; 0x2d02 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 a0 29 	call	0x5340	; 0x5340 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 d5 16 	call	0x2daa	; 0x2daa <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 81 16 	call	0x2d02	; 0x2d02 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 a0 29 	call	0x5340	; 0x5340 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 d5 16 	call	0x2daa	; 0x2daa <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 81 16 	call	0x2d02	; 0x2d02 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 a0 29 	call	0x5340	; 0x5340 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 d5 16 	call	0x2daa	; 0x2daa <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 81 16 	call	0x2d02	; 0x2d02 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 a0 29 	call	0x5340	; 0x5340 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 d5 16 	call	0x2daa	; 0x2daa <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 81 16 	call	0x2d02	; 0x2d02 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 d5 16 	call	0x2daa	; 0x2daa <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 9e 16 	call	0x2d3c	; 0x2d3c <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 81 16 	call	0x2d02	; 0x2d02 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 54 04 	sts	0x0454, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 54 04 	sts	0x0454, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 0c 1d 	call	0x3a18	; 0x3a18 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 e3 17 	call	0x2fc6	; 0x2fc6 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <rotateCell>:
* Output Return:	unsigned char
* Overview:		    Rotates the current cell to match the robot's
					orientation, so the robot can recognize gateways
********************************************************************/
unsigned char rotateCell (unsigned char worldCell, unsigned char orientation)
{
     c14:	06 c0       	rjmp	.+12     	; 0xc22 <rotateCell+0xe>
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	while (orient!=0){
		// use the shift array to rotate
		cell = shifted[cell];
     c16:	e8 2f       	mov	r30, r24
     c18:	f0 e0       	ldi	r31, 0x00	; 0
     c1a:	ef 5c       	subi	r30, 0xCF	; 207
     c1c:	fc 4f       	sbci	r31, 0xFC	; 252
     c1e:	80 81       	ld	r24, Z
		orient--;
     c20:	61 50       	subi	r22, 0x01	; 1
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	while (orient!=0){
     c22:	66 23       	and	r22, r22
     c24:	c1 f7       	brne	.-16     	; 0xc16 <rotateCell+0x2>
		// use the shift array to rotate
		cell = shifted[cell];
		orient--;
	}
	return cell;
}
     c26:	08 95       	ret

00000c28 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
     c28:	ef 92       	push	r14
     c2a:	ff 92       	push	r15
     c2c:	0f 93       	push	r16
     c2e:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
     c30:	60 91 c0 03 	lds	r22, 0x03C0
     c34:	70 91 c1 03 	lds	r23, 0x03C1
     c38:	80 91 c2 03 	lds	r24, 0x03C2
     c3c:	90 91 c3 03 	lds	r25, 0x03C3
     c40:	20 e0       	ldi	r18, 0x00	; 0
     c42:	30 e0       	ldi	r19, 0x00	; 0
     c44:	40 ef       	ldi	r20, 0xF0	; 240
     c46:	51 e4       	ldi	r21, 0x41	; 65
     c48:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
     c4c:	f8 2e       	mov	r15, r24
     c4e:	ff 1c       	adc	r15, r15
     c50:	ff 24       	eor	r15, r15
     c52:	ff 1c       	adc	r15, r15
     c54:	ff 0c       	add	r15, r15
     c56:	ff 0c       	add	r15, r15
     c58:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
     c5a:	60 91 b8 03 	lds	r22, 0x03B8
     c5e:	70 91 b9 03 	lds	r23, 0x03B9
     c62:	80 91 ba 03 	lds	r24, 0x03BA
     c66:	90 91 bb 03 	lds	r25, 0x03BB
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 ef       	ldi	r20, 0xF0	; 240
     c70:	51 e4       	ldi	r21, 0x41	; 65
     c72:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
     c76:	08 2f       	mov	r16, r24
     c78:	00 1f       	adc	r16, r16
     c7a:	00 27       	eor	r16, r16
     c7c:	00 1f       	adc	r16, r16
     c7e:	00 0f       	add	r16, r16
     c80:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
     c82:	60 91 c4 03 	lds	r22, 0x03C4
     c86:	70 91 c5 03 	lds	r23, 0x03C5
     c8a:	80 91 c6 03 	lds	r24, 0x03C6
     c8e:	90 91 c7 03 	lds	r25, 0x03C7
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	4c e0       	ldi	r20, 0x0C	; 12
     c98:	52 e4       	ldi	r21, 0x42	; 66
     c9a:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
     c9e:	18 2f       	mov	r17, r24
     ca0:	11 1f       	adc	r17, r17
     ca2:	11 27       	eor	r17, r17
     ca4:	11 1f       	adc	r17, r17
     ca6:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
     ca8:	ee 24       	eor	r14, r14
     caa:	60 91 bc 03 	lds	r22, 0x03BC
     cae:	70 91 bd 03 	lds	r23, 0x03BD
     cb2:	80 91 be 03 	lds	r24, 0x03BE
     cb6:	90 91 bf 03 	lds	r25, 0x03BF
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	40 ef       	ldi	r20, 0xF0	; 240
     cc0:	51 e4       	ldi	r21, 0x41	; 65
     cc2:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
     cc6:	88 23       	and	r24, r24
     cc8:	14 f4       	brge	.+4      	; 0xcce <checkWorld+0xa6>
     cca:	ee 24       	eor	r14, r14
     ccc:	e3 94       	inc	r14
     cce:	8f 2d       	mov	r24, r15
     cd0:	8e 0d       	add	r24, r14
     cd2:	80 0f       	add	r24, r16
     cd4:	81 0f       	add	r24, r17
     cd6:	80 93 d6 03 	sts	0x03D6, r24
	nextGateway = moveGateways[currentMoveWorld+1];
     cda:	20 91 d3 03 	lds	r18, 0x03D3
     cde:	e2 2f       	mov	r30, r18
     ce0:	f0 e0       	ldi	r31, 0x00	; 0
     ce2:	ed 5b       	subi	r30, 0xBD	; 189
     ce4:	f9 4f       	sbci	r31, 0xF9	; 249
     ce6:	91 81       	ldd	r25, Z+1	; 0x01
     ce8:	90 93 d7 03 	sts	0x03D7, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
     cec:	89 17       	cp	r24, r25
     cee:	19 f4       	brne	.+6      	; 0xcf6 <checkWorld+0xce>
		currentMoveWorld += 1;
     cf0:	2f 5f       	subi	r18, 0xFF	; 255
     cf2:	20 93 d3 03 	sts	0x03D3, r18
	}
}
     cf6:	1f 91       	pop	r17
     cf8:	0f 91       	pop	r16
     cfa:	ff 90       	pop	r15
     cfc:	ef 90       	pop	r14
     cfe:	08 95       	ret

00000d00 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     d00:	2f 92       	push	r2
     d02:	3f 92       	push	r3
     d04:	4f 92       	push	r4
     d06:	5f 92       	push	r5
     d08:	6f 92       	push	r6
     d0a:	7f 92       	push	r7
     d0c:	8f 92       	push	r8
     d0e:	9f 92       	push	r9
     d10:	af 92       	push	r10
     d12:	bf 92       	push	r11
     d14:	cf 92       	push	r12
     d16:	df 92       	push	r13
     d18:	ef 92       	push	r14
     d1a:	ff 92       	push	r15
     d1c:	0f 93       	push	r16
     d1e:	1f 93       	push	r17
     d20:	df 93       	push	r29
     d22:	cf 93       	push	r28
     d24:	cd b7       	in	r28, 0x3d	; 61
     d26:	de b7       	in	r29, 0x3e	; 62
     d28:	64 97       	sbiw	r28, 0x14	; 20
     d2a:	0f b6       	in	r0, 0x3f	; 63
     d2c:	f8 94       	cli
     d2e:	de bf       	out	0x3e, r29	; 62
     d30:	0f be       	out	0x3f, r0	; 63
     d32:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     d34:	88 23       	and	r24, r24
     d36:	39 f5       	brne	.+78     	; 0xd86 <prefilter+0x86>
     d38:	85 ec       	ldi	r24, 0xC5	; 197
     d3a:	94 e0       	ldi	r25, 0x04	; 4
     d3c:	9c 8b       	std	Y+20, r25	; 0x14
     d3e:	8b 8b       	std	Y+19, r24	; 0x13
     d40:	ab e3       	ldi	r26, 0x3B	; 59
     d42:	b6 e0       	ldi	r27, 0x06	; 6
     d44:	be 83       	std	Y+6, r27	; 0x06
     d46:	ad 83       	std	Y+5, r26	; 0x05
     d48:	e1 ec       	ldi	r30, 0xC1	; 193
     d4a:	f5 e0       	ldi	r31, 0x05	; 5
     d4c:	fc 83       	std	Y+4, r31	; 0x04
     d4e:	eb 83       	std	Y+3, r30	; 0x03
     d50:	8d e3       	ldi	r24, 0x3D	; 61
     d52:	95 e0       	ldi	r25, 0x05	; 5
     d54:	9a 83       	std	Y+2, r25	; 0x02
     d56:	89 83       	std	Y+1, r24	; 0x01
     d58:	0f 2e       	mov	r0, r31
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	2f 2e       	mov	r2, r31
     d5e:	f0 e0       	ldi	r31, 0x00	; 0
     d60:	3f 2e       	mov	r3, r31
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	4f 2e       	mov	r4, r31
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	5f 2e       	mov	r5, r31
     d6a:	f0 2d       	mov	r31, r0
     d6c:	2f 86       	std	Y+15, r2	; 0x0f
     d6e:	38 8a       	std	Y+16, r3	; 0x10
     d70:	49 8a       	std	Y+17, r4	; 0x11
     d72:	5a 8a       	std	Y+18, r5	; 0x12
     d74:	2b 86       	std	Y+11, r2	; 0x0b
     d76:	3c 86       	std	Y+12, r3	; 0x0c
     d78:	4d 86       	std	Y+13, r4	; 0x0d
     d7a:	5e 86       	std	Y+14, r5	; 0x0e
     d7c:	2f 82       	std	Y+7, r2	; 0x07
     d7e:	38 86       	std	Y+8, r3	; 0x08
     d80:	49 86       	std	Y+9, r4	; 0x09
     d82:	5a 86       	std	Y+10, r5	; 0x0a
     d84:	43 c0       	rjmp	.+134    	; 0xe0c <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     d86:	a0 90 b8 03 	lds	r10, 0x03B8
     d8a:	b0 90 b9 03 	lds	r11, 0x03B9
     d8e:	c0 90 ba 03 	lds	r12, 0x03BA
     d92:	d0 90 bb 03 	lds	r13, 0x03BB
			rtIR_old[i] = rtIR;
     d96:	e0 90 bc 03 	lds	r14, 0x03BC
     d9a:	f0 90 bd 03 	lds	r15, 0x03BD
     d9e:	00 91 be 03 	lds	r16, 0x03BE
     da2:	10 91 bf 03 	lds	r17, 0x03BF
			ftIR_old[i] = ftIR;
     da6:	20 90 c0 03 	lds	r2, 0x03C0
     daa:	30 90 c1 03 	lds	r3, 0x03C1
     dae:	40 90 c2 03 	lds	r4, 0x03C2
     db2:	50 90 c3 03 	lds	r5, 0x03C3
			bkIR_old[i] = bkIR;
     db6:	20 91 c4 03 	lds	r18, 0x03C4
     dba:	30 91 c5 03 	lds	r19, 0x03C5
     dbe:	40 91 c6 03 	lds	r20, 0x03C6
     dc2:	50 91 c7 03 	lds	r21, 0x03C7
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     dca:	fc 01       	movw	r30, r24
     dcc:	eb 5a       	subi	r30, 0xAB	; 171
     dce:	fb 4f       	sbci	r31, 0xFB	; 251
     dd0:	a0 82       	st	Z, r10
     dd2:	b1 82       	std	Z+1, r11	; 0x01
     dd4:	c2 82       	std	Z+2, r12	; 0x02
     dd6:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     dd8:	fc 01       	movw	r30, r24
     dda:	e5 53       	subi	r30, 0x35	; 53
     ddc:	fa 4f       	sbci	r31, 0xFA	; 250
     dde:	e0 82       	st	Z, r14
     de0:	f1 82       	std	Z+1, r15	; 0x01
     de2:	02 83       	std	Z+2, r16	; 0x02
     de4:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     de6:	fc 01       	movw	r30, r24
     de8:	ef 5a       	subi	r30, 0xAF	; 175
     dea:	fa 4f       	sbci	r31, 0xFA	; 250
     dec:	20 82       	st	Z, r2
     dee:	31 82       	std	Z+1, r3	; 0x01
     df0:	42 82       	std	Z+2, r4	; 0x02
     df2:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     df4:	fc 01       	movw	r30, r24
     df6:	e3 53       	subi	r30, 0x33	; 51
     df8:	fb 4f       	sbci	r31, 0xFB	; 251
     dfa:	20 83       	st	Z, r18
     dfc:	31 83       	std	Z+1, r19	; 0x01
     dfe:	42 83       	std	Z+2, r20	; 0x02
     e00:	53 83       	std	Z+3, r21	; 0x03
     e02:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     e04:	88 37       	cpi	r24, 0x78	; 120
     e06:	91 05       	cpc	r25, r1
     e08:	01 f7       	brne	.-64     	; 0xdca <prefilter+0xca>
     e0a:	96 cf       	rjmp	.-212    	; 0xd38 <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     e0c:	ab 89       	ldd	r26, Y+19	; 0x13
     e0e:	bc 89       	ldd	r27, Y+20	; 0x14
     e10:	2d 91       	ld	r18, X+
     e12:	3d 91       	ld	r19, X+
     e14:	4d 91       	ld	r20, X+
     e16:	5c 91       	ld	r21, X
     e18:	13 97       	sbiw	r26, 0x03	; 3
     e1a:	fd 01       	movw	r30, r26
     e1c:	24 83       	std	Z+4, r18	; 0x04
     e1e:	35 83       	std	Z+5, r19	; 0x05
     e20:	46 83       	std	Z+6, r20	; 0x06
     e22:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     e24:	ad 81       	ldd	r26, Y+5	; 0x05
     e26:	be 81       	ldd	r27, Y+6	; 0x06
     e28:	ed 90       	ld	r14, X+
     e2a:	fd 90       	ld	r15, X+
     e2c:	0d 91       	ld	r16, X+
     e2e:	1c 91       	ld	r17, X
     e30:	13 97       	sbiw	r26, 0x03	; 3
     e32:	fd 01       	movw	r30, r26
     e34:	e4 82       	std	Z+4, r14	; 0x04
     e36:	f5 82       	std	Z+5, r15	; 0x05
     e38:	06 83       	std	Z+6, r16	; 0x06
     e3a:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     e3c:	ab 81       	ldd	r26, Y+3	; 0x03
     e3e:	bc 81       	ldd	r27, Y+4	; 0x04
     e40:	ad 90       	ld	r10, X+
     e42:	bd 90       	ld	r11, X+
     e44:	cd 90       	ld	r12, X+
     e46:	dc 90       	ld	r13, X
     e48:	13 97       	sbiw	r26, 0x03	; 3
     e4a:	fd 01       	movw	r30, r26
     e4c:	a4 82       	std	Z+4, r10	; 0x04
     e4e:	b5 82       	std	Z+5, r11	; 0x05
     e50:	c6 82       	std	Z+6, r12	; 0x06
     e52:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     e54:	a9 81       	ldd	r26, Y+1	; 0x01
     e56:	ba 81       	ldd	r27, Y+2	; 0x02
     e58:	6d 90       	ld	r6, X+
     e5a:	7d 90       	ld	r7, X+
     e5c:	8d 90       	ld	r8, X+
     e5e:	9c 90       	ld	r9, X
     e60:	13 97       	sbiw	r26, 0x03	; 3
     e62:	fd 01       	movw	r30, r26
     e64:	64 82       	std	Z+4, r6	; 0x04
     e66:	75 82       	std	Z+5, r7	; 0x05
     e68:	86 82       	std	Z+6, r8	; 0x06
     e6a:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     e6c:	c2 01       	movw	r24, r4
     e6e:	b1 01       	movw	r22, r2
     e70:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
     e74:	1b 01       	movw	r2, r22
     e76:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     e78:	6f 85       	ldd	r22, Y+15	; 0x0f
     e7a:	78 89       	ldd	r23, Y+16	; 0x10
     e7c:	89 89       	ldd	r24, Y+17	; 0x11
     e7e:	9a 89       	ldd	r25, Y+18	; 0x12
     e80:	a8 01       	movw	r20, r16
     e82:	97 01       	movw	r18, r14
     e84:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
     e88:	6f 87       	std	Y+15, r22	; 0x0f
     e8a:	78 8b       	std	Y+16, r23	; 0x10
     e8c:	89 8b       	std	Y+17, r24	; 0x11
     e8e:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     e90:	6b 85       	ldd	r22, Y+11	; 0x0b
     e92:	7c 85       	ldd	r23, Y+12	; 0x0c
     e94:	8d 85       	ldd	r24, Y+13	; 0x0d
     e96:	9e 85       	ldd	r25, Y+14	; 0x0e
     e98:	a6 01       	movw	r20, r12
     e9a:	95 01       	movw	r18, r10
     e9c:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
     ea0:	6b 87       	std	Y+11, r22	; 0x0b
     ea2:	7c 87       	std	Y+12, r23	; 0x0c
     ea4:	8d 87       	std	Y+13, r24	; 0x0d
     ea6:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     ea8:	6f 81       	ldd	r22, Y+7	; 0x07
     eaa:	78 85       	ldd	r23, Y+8	; 0x08
     eac:	89 85       	ldd	r24, Y+9	; 0x09
     eae:	9a 85       	ldd	r25, Y+10	; 0x0a
     eb0:	a4 01       	movw	r20, r8
     eb2:	93 01       	movw	r18, r6
     eb4:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
     eb8:	6f 83       	std	Y+7, r22	; 0x07
     eba:	78 87       	std	Y+8, r23	; 0x08
     ebc:	89 87       	std	Y+9, r24	; 0x09
     ebe:	9a 87       	std	Y+10, r25	; 0x0a
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	04 97       	sbiw	r24, 0x04	; 4
     ec6:	9c 8b       	std	Y+20, r25	; 0x14
     ec8:	8b 8b       	std	Y+19, r24	; 0x13
     eca:	ad 81       	ldd	r26, Y+5	; 0x05
     ecc:	be 81       	ldd	r27, Y+6	; 0x06
     ece:	14 97       	sbiw	r26, 0x04	; 4
     ed0:	be 83       	std	Y+6, r27	; 0x06
     ed2:	ad 83       	std	Y+5, r26	; 0x05
     ed4:	eb 81       	ldd	r30, Y+3	; 0x03
     ed6:	fc 81       	ldd	r31, Y+4	; 0x04
     ed8:	34 97       	sbiw	r30, 0x04	; 4
     eda:	fc 83       	std	Y+4, r31	; 0x04
     edc:	eb 83       	std	Y+3, r30	; 0x03
     ede:	89 81       	ldd	r24, Y+1	; 0x01
     ee0:	9a 81       	ldd	r25, Y+2	; 0x02
     ee2:	04 97       	sbiw	r24, 0x04	; 4
     ee4:	9a 83       	std	Y+2, r25	; 0x02
     ee6:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     ee8:	ab 89       	ldd	r26, Y+19	; 0x13
     eea:	bc 89       	ldd	r27, Y+20	; 0x14
     eec:	ad 54       	subi	r26, 0x4D	; 77
     eee:	b4 40       	sbci	r27, 0x04	; 4
     ef0:	09 f0       	breq	.+2      	; 0xef4 <prefilter+0x1f4>
     ef2:	8c cf       	rjmp	.-232    	; 0xe0c <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     ef4:	80 91 b8 03 	lds	r24, 0x03B8
     ef8:	90 91 b9 03 	lds	r25, 0x03B9
     efc:	a0 91 ba 03 	lds	r26, 0x03BA
     f00:	b0 91 bb 03 	lds	r27, 0x03BB
     f04:	eb 89       	ldd	r30, Y+19	; 0x13
     f06:	fc 89       	ldd	r31, Y+20	; 0x14
     f08:	80 87       	std	Z+8, r24	; 0x08
     f0a:	91 87       	std	Z+9, r25	; 0x09
     f0c:	a2 87       	std	Z+10, r26	; 0x0a
     f0e:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     f10:	80 91 bc 03 	lds	r24, 0x03BC
     f14:	90 91 bd 03 	lds	r25, 0x03BD
     f18:	a0 91 be 03 	lds	r26, 0x03BE
     f1c:	b0 91 bf 03 	lds	r27, 0x03BF
     f20:	80 93 cb 05 	sts	0x05CB, r24
     f24:	90 93 cc 05 	sts	0x05CC, r25
     f28:	a0 93 cd 05 	sts	0x05CD, r26
     f2c:	b0 93 ce 05 	sts	0x05CE, r27
	ftIR_old[0] = ftIR;
     f30:	80 91 c0 03 	lds	r24, 0x03C0
     f34:	90 91 c1 03 	lds	r25, 0x03C1
     f38:	a0 91 c2 03 	lds	r26, 0x03C2
     f3c:	b0 91 c3 03 	lds	r27, 0x03C3
     f40:	80 93 51 05 	sts	0x0551, r24
     f44:	90 93 52 05 	sts	0x0552, r25
     f48:	a0 93 53 05 	sts	0x0553, r26
     f4c:	b0 93 54 05 	sts	0x0554, r27
	bkIR_old[0] = bkIR;
     f50:	80 91 c4 03 	lds	r24, 0x03C4
     f54:	90 91 c5 03 	lds	r25, 0x03C5
     f58:	a0 91 c6 03 	lds	r26, 0x03C6
     f5c:	b0 91 c7 03 	lds	r27, 0x03C7
     f60:	80 93 cd 04 	sts	0x04CD, r24
     f64:	90 93 ce 04 	sts	0x04CE, r25
     f68:	a0 93 cf 04 	sts	0x04CF, r26
     f6c:	b0 93 d0 04 	sts	0x04D0, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     f70:	c2 01       	movw	r24, r4
     f72:	b1 01       	movw	r22, r2
     f74:	20 e0       	ldi	r18, 0x00	; 0
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	40 ef       	ldi	r20, 0xF0	; 240
     f7a:	51 e4       	ldi	r21, 0x41	; 65
     f7c:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
     f80:	60 93 b8 03 	sts	0x03B8, r22
     f84:	70 93 b9 03 	sts	0x03B9, r23
     f88:	80 93 ba 03 	sts	0x03BA, r24
     f8c:	90 93 bb 03 	sts	0x03BB, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     f90:	6f 85       	ldd	r22, Y+15	; 0x0f
     f92:	78 89       	ldd	r23, Y+16	; 0x10
     f94:	89 89       	ldd	r24, Y+17	; 0x11
     f96:	9a 89       	ldd	r25, Y+18	; 0x12
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	40 ef       	ldi	r20, 0xF0	; 240
     f9e:	51 e4       	ldi	r21, 0x41	; 65
     fa0:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
     fa4:	60 93 bc 03 	sts	0x03BC, r22
     fa8:	70 93 bd 03 	sts	0x03BD, r23
     fac:	80 93 be 03 	sts	0x03BE, r24
     fb0:	90 93 bf 03 	sts	0x03BF, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     fb4:	6b 85       	ldd	r22, Y+11	; 0x0b
     fb6:	7c 85       	ldd	r23, Y+12	; 0x0c
     fb8:	8d 85       	ldd	r24, Y+13	; 0x0d
     fba:	9e 85       	ldd	r25, Y+14	; 0x0e
     fbc:	20 e0       	ldi	r18, 0x00	; 0
     fbe:	30 e0       	ldi	r19, 0x00	; 0
     fc0:	40 ef       	ldi	r20, 0xF0	; 240
     fc2:	51 e4       	ldi	r21, 0x41	; 65
     fc4:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
     fc8:	60 93 c0 03 	sts	0x03C0, r22
     fcc:	70 93 c1 03 	sts	0x03C1, r23
     fd0:	80 93 c2 03 	sts	0x03C2, r24
     fd4:	90 93 c3 03 	sts	0x03C3, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     fd8:	6f 81       	ldd	r22, Y+7	; 0x07
     fda:	78 85       	ldd	r23, Y+8	; 0x08
     fdc:	89 85       	ldd	r24, Y+9	; 0x09
     fde:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe0:	20 e0       	ldi	r18, 0x00	; 0
     fe2:	30 e0       	ldi	r19, 0x00	; 0
     fe4:	40 ef       	ldi	r20, 0xF0	; 240
     fe6:	51 e4       	ldi	r21, 0x41	; 65
     fe8:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
     fec:	60 93 c4 03 	sts	0x03C4, r22
     ff0:	70 93 c5 03 	sts	0x03C5, r23
     ff4:	80 93 c6 03 	sts	0x03C6, r24
     ff8:	90 93 c7 03 	sts	0x03C7, r25
}
     ffc:	64 96       	adiw	r28, 0x14	; 20
     ffe:	0f b6       	in	r0, 0x3f	; 63
    1000:	f8 94       	cli
    1002:	de bf       	out	0x3e, r29	; 62
    1004:	0f be       	out	0x3f, r0	; 63
    1006:	cd bf       	out	0x3d, r28	; 61
    1008:	cf 91       	pop	r28
    100a:	df 91       	pop	r29
    100c:	1f 91       	pop	r17
    100e:	0f 91       	pop	r16
    1010:	ff 90       	pop	r15
    1012:	ef 90       	pop	r14
    1014:	df 90       	pop	r13
    1016:	cf 90       	pop	r12
    1018:	bf 90       	pop	r11
    101a:	af 90       	pop	r10
    101c:	9f 90       	pop	r9
    101e:	8f 90       	pop	r8
    1020:	7f 90       	pop	r7
    1022:	6f 90       	pop	r6
    1024:	5f 90       	pop	r5
    1026:	4f 90       	pop	r4
    1028:	3f 90       	pop	r3
    102a:	2f 90       	pop	r2
    102c:	08 95       	ret

0000102e <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
    102e:	af 92       	push	r10
    1030:	bf 92       	push	r11
    1032:	cf 92       	push	r12
    1034:	df 92       	push	r13
    1036:	ef 92       	push	r14
    1038:	ff 92       	push	r15
    103a:	0f 93       	push	r16
    103c:	1f 93       	push	r17
    103e:	7b 01       	movw	r14, r22
    1040:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
    1042:	44 23       	and	r20, r20
    1044:	61 f0       	breq	.+24     	; 0x105e <pidController+0x30>
		Ierror = 0;
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	90 e0       	ldi	r25, 0x00	; 0
    104a:	a0 e0       	ldi	r26, 0x00	; 0
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	80 93 b0 03 	sts	0x03B0, r24
    1052:	90 93 b1 03 	sts	0x03B1, r25
    1056:	a0 93 b2 03 	sts	0x03B2, r26
    105a:	b0 93 b3 03 	sts	0x03B3, r27
	}
	// At the current error to the running sum
	Ierror += error;
    105e:	c8 01       	movw	r24, r16
    1060:	b7 01       	movw	r22, r14
    1062:	20 91 b0 03 	lds	r18, 0x03B0
    1066:	30 91 b1 03 	lds	r19, 0x03B1
    106a:	40 91 b2 03 	lds	r20, 0x03B2
    106e:	50 91 b3 03 	lds	r21, 0x03B3
    1072:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    1076:	5b 01       	movw	r10, r22
    1078:	6c 01       	movw	r12, r24
    107a:	60 93 b0 03 	sts	0x03B0, r22
    107e:	70 93 b1 03 	sts	0x03B1, r23
    1082:	80 93 b2 03 	sts	0x03B2, r24
    1086:	90 93 b3 03 	sts	0x03B3, r25
    108a:	c8 01       	movw	r24, r16
    108c:	b7 01       	movw	r22, r14
    108e:	20 91 b4 03 	lds	r18, 0x03B4
    1092:	30 91 b5 03 	lds	r19, 0x03B5
    1096:	40 91 b6 03 	lds	r20, 0x03B6
    109a:	50 91 b7 03 	lds	r21, 0x03B7
    109e:	0e 94 a0 29 	call	0x5340	; 0x5340 <__subsf3>
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    10ae:	9b 01       	movw	r18, r22
    10b0:	ac 01       	movw	r20, r24
    10b2:	c8 01       	movw	r24, r16
    10b4:	b7 01       	movw	r22, r14
    10b6:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    10ba:	7b 01       	movw	r14, r22
    10bc:	8c 01       	movw	r16, r24
    10be:	c6 01       	movw	r24, r12
    10c0:	b5 01       	movw	r22, r10
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e0       	ldi	r20, 0x00	; 0
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    10ce:	9b 01       	movw	r18, r22
    10d0:	ac 01       	movw	r20, r24
    10d2:	c8 01       	movw	r24, r16
    10d4:	b7 01       	movw	r22, r14
    10d6:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
    10da:	1f 91       	pop	r17
    10dc:	0f 91       	pop	r16
    10de:	ff 90       	pop	r15
    10e0:	ef 90       	pop	r14
    10e2:	df 90       	pop	r13
    10e4:	cf 90       	pop	r12
    10e6:	bf 90       	pop	r11
    10e8:	af 90       	pop	r10
    10ea:	08 95       	ret

000010ec <check_threshhold>:
* Output Return:	char
* Overview:			This check the IR values to thresholds
********************************************************************/

char check_threshhold(float F, float B, float L, float R)
{
    10ec:	2f 92       	push	r2
    10ee:	6f 92       	push	r6
    10f0:	7f 92       	push	r7
    10f2:	8f 92       	push	r8
    10f4:	9f 92       	push	r9
    10f6:	af 92       	push	r10
    10f8:	bf 92       	push	r11
    10fa:	cf 92       	push	r12
    10fc:	df 92       	push	r13
    10fe:	ef 92       	push	r14
    1100:	ff 92       	push	r15
    1102:	0f 93       	push	r16
    1104:	1f 93       	push	r17
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	00 d0       	rcall	.+0      	; 0x110c <check_threshhold+0x20>
    110c:	00 d0       	rcall	.+0      	; 0x110e <check_threshhold+0x22>
    110e:	cd b7       	in	r28, 0x3d	; 61
    1110:	de b7       	in	r29, 0x3e	; 62
    1112:	69 83       	std	Y+1, r22	; 0x01
    1114:	7a 83       	std	Y+2, r23	; 0x02
    1116:	8b 83       	std	Y+3, r24	; 0x03
    1118:	9c 83       	std	Y+4, r25	; 0x04
	char check = 0;
	check += 0b00000001*(ftIR < F);
    111a:	60 90 c0 03 	lds	r6, 0x03C0
    111e:	70 90 c1 03 	lds	r7, 0x03C1
    1122:	80 90 c2 03 	lds	r8, 0x03C2
    1126:	90 90 c3 03 	lds	r9, 0x03C3
	check += 0b00000010*(bkIR < B);
    112a:	60 91 c4 03 	lds	r22, 0x03C4
    112e:	70 91 c5 03 	lds	r23, 0x03C5
    1132:	80 91 c6 03 	lds	r24, 0x03C6
    1136:	90 91 c7 03 	lds	r25, 0x03C7
    113a:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    113e:	28 2e       	mov	r2, r24
    1140:	22 1c       	adc	r2, r2
    1142:	22 24       	eor	r2, r2
    1144:	22 1c       	adc	r2, r2
    1146:	22 0c       	add	r2, r2
	check += 0b00000100*(ltIR < L);
    1148:	60 91 b8 03 	lds	r22, 0x03B8
    114c:	70 91 b9 03 	lds	r23, 0x03B9
    1150:	80 91 ba 03 	lds	r24, 0x03BA
    1154:	90 91 bb 03 	lds	r25, 0x03BB
    1158:	a8 01       	movw	r20, r16
    115a:	97 01       	movw	r18, r14
    115c:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    1160:	08 2f       	mov	r16, r24
    1162:	00 1f       	adc	r16, r16
    1164:	00 27       	eor	r16, r16
    1166:	00 1f       	adc	r16, r16
    1168:	00 0f       	add	r16, r16
    116a:	00 0f       	add	r16, r16
	check += 0b00001000*(rtIR < R);
    116c:	60 91 bc 03 	lds	r22, 0x03BC
    1170:	70 91 bd 03 	lds	r23, 0x03BD
    1174:	80 91 be 03 	lds	r24, 0x03BE
    1178:	90 91 bf 03 	lds	r25, 0x03BF
    117c:	a6 01       	movw	r20, r12
    117e:	95 01       	movw	r18, r10
    1180:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    1184:	18 2f       	mov	r17, r24
    1186:	11 1f       	adc	r17, r17
    1188:	11 27       	eor	r17, r17
    118a:	11 1f       	adc	r17, r17
    118c:	11 0f       	add	r17, r17
    118e:	11 0f       	add	r17, r17
    1190:	11 0f       	add	r17, r17

char check_threshhold(float F, float B, float L, float R)
{
	char check = 0;
	check += 0b00000001*(ftIR < F);
	check += 0b00000010*(bkIR < B);
    1192:	ff 24       	eor	r15, r15
    1194:	c4 01       	movw	r24, r8
    1196:	b3 01       	movw	r22, r6
    1198:	29 81       	ldd	r18, Y+1	; 0x01
    119a:	3a 81       	ldd	r19, Y+2	; 0x02
    119c:	4b 81       	ldd	r20, Y+3	; 0x03
    119e:	5c 81       	ldd	r21, Y+4	; 0x04
    11a0:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    11a4:	88 23       	and	r24, r24
    11a6:	14 f4       	brge	.+4      	; 0x11ac <check_threshhold+0xc0>
    11a8:	ff 24       	eor	r15, r15
    11aa:	f3 94       	inc	r15
    11ac:	2f 0c       	add	r2, r15
	check += 0b00000100*(ltIR < L);
    11ae:	20 0e       	add	r2, r16
	check += 0b00001000*(rtIR < R);
	return check;	
}
    11b0:	82 2d       	mov	r24, r2
    11b2:	81 0f       	add	r24, r17
    11b4:	0f 90       	pop	r0
    11b6:	0f 90       	pop	r0
    11b8:	0f 90       	pop	r0
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	1f 91       	pop	r17
    11c2:	0f 91       	pop	r16
    11c4:	ff 90       	pop	r15
    11c6:	ef 90       	pop	r14
    11c8:	df 90       	pop	r13
    11ca:	cf 90       	pop	r12
    11cc:	bf 90       	pop	r11
    11ce:	af 90       	pop	r10
    11d0:	9f 90       	pop	r9
    11d2:	8f 90       	pop	r8
    11d4:	7f 90       	pop	r7
    11d6:	6f 90       	pop	r6
    11d8:	2f 90       	pop	r2
    11da:	08 95       	ret

000011dc <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    11dc:	2f 92       	push	r2
    11de:	3f 92       	push	r3
    11e0:	4f 92       	push	r4
    11e2:	5f 92       	push	r5
    11e4:	6f 92       	push	r6
    11e6:	7f 92       	push	r7
    11e8:	8f 92       	push	r8
    11ea:	9f 92       	push	r9
    11ec:	af 92       	push	r10
    11ee:	bf 92       	push	r11
    11f0:	cf 92       	push	r12
    11f2:	df 92       	push	r13
    11f4:	ef 92       	push	r14
    11f6:	ff 92       	push	r15
    11f8:	0f 93       	push	r16
    11fa:	1f 93       	push	r17
    11fc:	df 93       	push	r29
    11fe:	cf 93       	push	r28
    1200:	cd b7       	in	r28, 0x3d	; 61
    1202:	de b7       	in	r29, 0x3e	; 62
    1204:	a0 97       	sbiw	r28, 0x20	; 32
    1206:	0f b6       	in	r0, 0x3f	; 63
    1208:	f8 94       	cli
    120a:	de bf       	out	0x3e, r29	; 62
    120c:	0f be       	out	0x3f, r0	; 63
    120e:	cd bf       	out	0x3d, r28	; 61
    1210:	2b 01       	movw	r4, r22
    1212:	3c 01       	movw	r6, r24
    1214:	2d 83       	std	Y+5, r18	; 0x05
    1216:	3e 83       	std	Y+6, r19	; 0x06
    1218:	4f 83       	std	Y+7, r20	; 0x07
    121a:	58 87       	std	Y+8, r21	; 0x08
    121c:	e9 86       	std	Y+9, r14	; 0x09
    121e:	fa 86       	std	Y+10, r15	; 0x0a
    1220:	0b 87       	std	Y+11, r16	; 0x0b
    1222:	1c 87       	std	Y+12, r17	; 0x0c
    1224:	ad 86       	std	Y+13, r10	; 0x0d
    1226:	be 86       	std	Y+14, r11	; 0x0e
    1228:	cf 86       	std	Y+15, r12	; 0x0f
    122a:	d8 8a       	std	Y+16, r13	; 0x10
    122c:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    122e:	33 24       	eor	r3, r3
    1230:	ca 01       	movw	r24, r20
    1232:	b9 01       	movw	r22, r18
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	40 e0       	ldi	r20, 0x00	; 0
    123a:	50 e0       	ldi	r21, 0x00	; 0
    123c:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__gesf2>
    1240:	18 16       	cp	r1, r24
    1242:	14 f4       	brge	.+4      	; 0x1248 <move_arc_stnb+0x6c>
    1244:	33 24       	eor	r3, r3
    1246:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1248:	6d 81       	ldd	r22, Y+5	; 0x05
    124a:	7e 81       	ldd	r23, Y+6	; 0x06
    124c:	8f 81       	ldd	r24, Y+7	; 0x07
    124e:	98 85       	ldd	r25, Y+8	; 0x08
    1250:	2c ed       	ldi	r18, 0xDC	; 220
    1252:	38 eb       	ldi	r19, 0xB8	; 184
    1254:	48 e0       	ldi	r20, 0x08	; 8
    1256:	5e e3       	ldi	r21, 0x3E	; 62
    1258:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    125c:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fixsfsi>
    1260:	9b 01       	movw	r18, r22
    1262:	77 ff       	sbrs	r23, 7
    1264:	03 c0       	rjmp	.+6      	; 0x126c <move_arc_stnb+0x90>
    1266:	30 95       	com	r19
    1268:	21 95       	neg	r18
    126a:	3f 4f       	sbci	r19, 0xFF	; 255
    126c:	b9 01       	movw	r22, r18
    126e:	88 27       	eor	r24, r24
    1270:	77 fd       	sbrc	r23, 7
    1272:	80 95       	com	r24
    1274:	98 2f       	mov	r25, r24
    1276:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__floatsisf>
    127a:	69 83       	std	Y+1, r22	; 0x01
    127c:	7a 83       	std	Y+2, r23	; 0x02
    127e:	8b 83       	std	Y+3, r24	; 0x03
    1280:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1282:	69 85       	ldd	r22, Y+9	; 0x09
    1284:	7a 85       	ldd	r23, Y+10	; 0x0a
    1286:	8b 85       	ldd	r24, Y+11	; 0x0b
    1288:	9c 85       	ldd	r25, Y+12	; 0x0c
    128a:	2c ed       	ldi	r18, 0xDC	; 220
    128c:	38 eb       	ldi	r19, 0xB8	; 184
    128e:	48 e0       	ldi	r20, 0x08	; 8
    1290:	5e e3       	ldi	r21, 0x3E	; 62
    1292:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1296:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fixsfsi>
    129a:	9b 01       	movw	r18, r22
    129c:	77 ff       	sbrs	r23, 7
    129e:	03 c0       	rjmp	.+6      	; 0x12a6 <move_arc_stnb+0xca>
    12a0:	30 95       	com	r19
    12a2:	21 95       	neg	r18
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	b9 01       	movw	r22, r18
    12a8:	88 27       	eor	r24, r24
    12aa:	77 fd       	sbrc	r23, 7
    12ac:	80 95       	com	r24
    12ae:	98 2f       	mov	r25, r24
    12b0:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__floatsisf>
    12b4:	4b 01       	movw	r8, r22
    12b6:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    12b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    12ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    12bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    12be:	98 89       	ldd	r25, Y+16	; 0x10
    12c0:	2c ed       	ldi	r18, 0xDC	; 220
    12c2:	38 eb       	ldi	r19, 0xB8	; 184
    12c4:	48 e0       	ldi	r20, 0x08	; 8
    12c6:	5e e3       	ldi	r21, 0x3E	; 62
    12c8:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    12cc:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fixsfsi>
    12d0:	9b 01       	movw	r18, r22
    12d2:	77 ff       	sbrs	r23, 7
    12d4:	03 c0       	rjmp	.+6      	; 0x12dc <move_arc_stnb+0x100>
    12d6:	30 95       	com	r19
    12d8:	21 95       	neg	r18
    12da:	3f 4f       	sbci	r19, 0xFF	; 255
    12dc:	b9 01       	movw	r22, r18
    12de:	88 27       	eor	r24, r24
    12e0:	77 fd       	sbrc	r23, 7
    12e2:	80 95       	com	r24
    12e4:	98 2f       	mov	r25, r24
    12e6:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__floatsisf>
    12ea:	6b 01       	movw	r12, r22
    12ec:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    12ee:	c3 01       	movw	r24, r6
    12f0:	b2 01       	movw	r22, r4
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e0       	ldi	r20, 0x00	; 0
    12f8:	5f e4       	ldi	r21, 0x4F	; 79
    12fa:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    12fe:	88 23       	and	r24, r24
    1300:	a1 f5       	brne	.+104    	; 0x136a <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1302:	69 81       	ldd	r22, Y+1	; 0x01
    1304:	7a 81       	ldd	r23, Y+2	; 0x02
    1306:	8b 81       	ldd	r24, Y+3	; 0x03
    1308:	9c 81       	ldd	r25, Y+4	; 0x04
    130a:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    130e:	2b 01       	movw	r4, r22
    1310:	3c 01       	movw	r6, r24
    1312:	c5 01       	movw	r24, r10
    1314:	b4 01       	movw	r22, r8
    1316:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    131a:	4b 01       	movw	r8, r22
    131c:	5c 01       	movw	r10, r24
    131e:	c7 01       	movw	r24, r14
    1320:	b6 01       	movw	r22, r12
    1322:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1326:	6b 01       	movw	r12, r22
    1328:	7c 01       	movw	r14, r24
    132a:	2d b7       	in	r18, 0x3d	; 61
    132c:	3e b7       	in	r19, 0x3e	; 62
    132e:	29 50       	subi	r18, 0x09	; 9
    1330:	30 40       	sbci	r19, 0x00	; 0
    1332:	0f b6       	in	r0, 0x3f	; 63
    1334:	f8 94       	cli
    1336:	3e bf       	out	0x3e, r19	; 62
    1338:	0f be       	out	0x3f, r0	; 63
    133a:	2d bf       	out	0x3d, r18	; 61
    133c:	ed b7       	in	r30, 0x3d	; 61
    133e:	fe b7       	in	r31, 0x3e	; 62
    1340:	31 96       	adiw	r30, 0x01	; 1
    1342:	ad b7       	in	r26, 0x3d	; 61
    1344:	be b7       	in	r27, 0x3e	; 62
    1346:	12 96       	adiw	r26, 0x02	; 2
    1348:	5c 92       	st	X, r5
    134a:	4e 92       	st	-X, r4
    134c:	11 97       	sbiw	r26, 0x01	; 1
    134e:	93 82       	std	Z+3, r9	; 0x03
    1350:	82 82       	std	Z+2, r8	; 0x02
    1352:	75 83       	std	Z+5, r23	; 0x05
    1354:	64 83       	std	Z+4, r22	; 0x04
    1356:	26 82       	std	Z+6, r2	; 0x06
    1358:	10 86       	std	Z+8, r1	; 0x08
    135a:	17 82       	std	Z+7, r1	; 0x07
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	62 e0       	ldi	r22, 0x02	; 2
    1360:	43 2d       	mov	r20, r3
    1362:	92 01       	movw	r18, r4
    1364:	84 01       	movw	r16, r8
    1366:	76 01       	movw	r14, r12
    1368:	c1 c1       	rjmp	.+898    	; 0x16ec <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    136a:	c3 01       	movw	r24, r6
    136c:	b2 01       	movw	r22, r4
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e0       	ldi	r20, 0x00	; 0
    1374:	50 e0       	ldi	r21, 0x00	; 0
    1376:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    137a:	88 23       	and	r24, r24
    137c:	e9 f5       	brne	.+122    	; 0x13f8 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    137e:	69 81       	ldd	r22, Y+1	; 0x01
    1380:	7a 81       	ldd	r23, Y+2	; 0x02
    1382:	8b 81       	ldd	r24, Y+3	; 0x03
    1384:	9c 81       	ldd	r25, Y+4	; 0x04
    1386:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    138a:	3b 01       	movw	r6, r22
    138c:	c5 01       	movw	r24, r10
    138e:	b4 01       	movw	r22, r8
    1390:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1394:	8b 01       	movw	r16, r22
    1396:	c7 01       	movw	r24, r14
    1398:	b6 01       	movw	r22, r12
    139a:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    139e:	7b 01       	movw	r14, r22
    13a0:	2d b7       	in	r18, 0x3d	; 61
    13a2:	3e b7       	in	r19, 0x3e	; 62
    13a4:	29 50       	subi	r18, 0x09	; 9
    13a6:	30 40       	sbci	r19, 0x00	; 0
    13a8:	0f b6       	in	r0, 0x3f	; 63
    13aa:	f8 94       	cli
    13ac:	3e bf       	out	0x3e, r19	; 62
    13ae:	0f be       	out	0x3f, r0	; 63
    13b0:	2d bf       	out	0x3d, r18	; 61
    13b2:	ed b7       	in	r30, 0x3d	; 61
    13b4:	fe b7       	in	r31, 0x3e	; 62
    13b6:	31 96       	adiw	r30, 0x01	; 1
    13b8:	40 e0       	ldi	r20, 0x00	; 0
    13ba:	33 20       	and	r3, r3
    13bc:	09 f4       	brne	.+2      	; 0x13c0 <move_arc_stnb+0x1e4>
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	71 82       	std	Z+1, r7	; 0x01
    13c2:	60 82       	st	Z, r6
    13c4:	13 83       	std	Z+3, r17	; 0x03
    13c6:	02 83       	std	Z+2, r16	; 0x02
    13c8:	f5 82       	std	Z+5, r15	; 0x05
    13ca:	e4 82       	std	Z+4, r14	; 0x04
    13cc:	26 82       	std	Z+6, r2	; 0x06
    13ce:	10 86       	std	Z+8, r1	; 0x08
    13d0:	17 82       	std	Z+7, r1	; 0x07
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	62 e0       	ldi	r22, 0x02	; 2
    13d6:	93 01       	movw	r18, r6
    13d8:	c2 2c       	mov	r12, r2
    13da:	aa 24       	eor	r10, r10
    13dc:	bb 24       	eor	r11, r11
    13de:	83 2c       	mov	r8, r3
    13e0:	0e 94 ca 19 	call	0x3394	; 0x3394 <STEPPER_move>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	ad b7       	in	r26, 0x3d	; 61
    13e8:	be b7       	in	r27, 0x3e	; 62
    13ea:	19 96       	adiw	r26, 0x09	; 9
    13ec:	0f b6       	in	r0, 0x3f	; 63
    13ee:	f8 94       	cli
    13f0:	be bf       	out	0x3e, r27	; 62
    13f2:	0f be       	out	0x3f, r0	; 63
    13f4:	ad bf       	out	0x3d, r26	; 61
    13f6:	89 c1       	rjmp	.+786    	; 0x170a <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    13f8:	c3 01       	movw	r24, r6
    13fa:	b2 01       	movw	r22, r4
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__gesf2>
    1408:	18 16       	cp	r1, r24
    140a:	0c f0       	brlt	.+2      	; 0x140e <move_arc_stnb+0x232>
    140c:	b1 c0       	rjmp	.+354    	; 0x1570 <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    140e:	66 e6       	ldi	r22, 0x66	; 102
    1410:	76 e6       	ldi	r23, 0x66	; 102
    1412:	8a ea       	ldi	r24, 0xAA	; 170
    1414:	91 ec       	ldi	r25, 0xC1	; 193
    1416:	a3 01       	movw	r20, r6
    1418:	92 01       	movw	r18, r4
    141a:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	30 e0       	ldi	r19, 0x00	; 0
    1422:	40 e8       	ldi	r20, 0x80	; 128
    1424:	5f e3       	ldi	r21, 0x3F	; 63
    1426:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    142a:	7b 01       	movw	r14, r22
    142c:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    142e:	66 e6       	ldi	r22, 0x66	; 102
    1430:	76 e6       	ldi	r23, 0x66	; 102
    1432:	8a ea       	ldi	r24, 0xAA	; 170
    1434:	91 e4       	ldi	r25, 0x41	; 65
    1436:	a3 01       	movw	r20, r6
    1438:	92 01       	movw	r18, r4
    143a:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    143e:	20 e0       	ldi	r18, 0x00	; 0
    1440:	30 e0       	ldi	r19, 0x00	; 0
    1442:	40 e8       	ldi	r20, 0x80	; 128
    1444:	5f e3       	ldi	r21, 0x3F	; 63
    1446:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    144a:	5b 01       	movw	r10, r22
    144c:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    144e:	ed b7       	in	r30, 0x3d	; 61
    1450:	fe b7       	in	r31, 0x3e	; 62
    1452:	39 97       	sbiw	r30, 0x09	; 9
    1454:	0f b6       	in	r0, 0x3f	; 63
    1456:	f8 94       	cli
    1458:	fe bf       	out	0x3e, r31	; 62
    145a:	0f be       	out	0x3f, r0	; 63
    145c:	ed bf       	out	0x3d, r30	; 61
    145e:	8d b6       	in	r8, 0x3d	; 61
    1460:	9e b6       	in	r9, 0x3e	; 62
    1462:	08 94       	sec
    1464:	81 1c       	adc	r8, r1
    1466:	91 1c       	adc	r9, r1
    1468:	6d 81       	ldd	r22, Y+5	; 0x05
    146a:	7e 81       	ldd	r23, Y+6	; 0x06
    146c:	8f 81       	ldd	r24, Y+7	; 0x07
    146e:	98 85       	ldd	r25, Y+8	; 0x08
    1470:	a8 01       	movw	r20, r16
    1472:	97 01       	movw	r18, r14
    1474:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1478:	2c ed       	ldi	r18, 0xDC	; 220
    147a:	38 eb       	ldi	r19, 0xB8	; 184
    147c:	48 e0       	ldi	r20, 0x08	; 8
    147e:	5e e3       	ldi	r21, 0x3E	; 62
    1480:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1484:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1488:	69 8b       	std	Y+17, r22	; 0x11
    148a:	7a 8b       	std	Y+18, r23	; 0x12
    148c:	8b 8b       	std	Y+19, r24	; 0x13
    148e:	9c 8b       	std	Y+20, r25	; 0x14
    1490:	69 85       	ldd	r22, Y+9	; 0x09
    1492:	7a 85       	ldd	r23, Y+10	; 0x0a
    1494:	8b 85       	ldd	r24, Y+11	; 0x0b
    1496:	9c 85       	ldd	r25, Y+12	; 0x0c
    1498:	a8 01       	movw	r20, r16
    149a:	97 01       	movw	r18, r14
    149c:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    14a0:	2c ed       	ldi	r18, 0xDC	; 220
    14a2:	38 eb       	ldi	r19, 0xB8	; 184
    14a4:	48 e0       	ldi	r20, 0x08	; 8
    14a6:	5e e3       	ldi	r21, 0x3E	; 62
    14a8:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    14ac:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    14b0:	6d 8b       	std	Y+21, r22	; 0x15
    14b2:	7e 8b       	std	Y+22, r23	; 0x16
    14b4:	8f 8b       	std	Y+23, r24	; 0x17
    14b6:	98 8f       	std	Y+24, r25	; 0x18
    14b8:	6d 85       	ldd	r22, Y+13	; 0x0d
    14ba:	7e 85       	ldd	r23, Y+14	; 0x0e
    14bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    14be:	98 89       	ldd	r25, Y+16	; 0x10
    14c0:	a8 01       	movw	r20, r16
    14c2:	97 01       	movw	r18, r14
    14c4:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    14c8:	2c ed       	ldi	r18, 0xDC	; 220
    14ca:	38 eb       	ldi	r19, 0xB8	; 184
    14cc:	48 e0       	ldi	r20, 0x08	; 8
    14ce:	5e e3       	ldi	r21, 0x3E	; 62
    14d0:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    14d4:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    14d8:	2b 01       	movw	r4, r22
    14da:	3c 01       	movw	r6, r24
    14dc:	6d 81       	ldd	r22, Y+5	; 0x05
    14de:	7e 81       	ldd	r23, Y+6	; 0x06
    14e0:	8f 81       	ldd	r24, Y+7	; 0x07
    14e2:	98 85       	ldd	r25, Y+8	; 0x08
    14e4:	a6 01       	movw	r20, r12
    14e6:	95 01       	movw	r18, r10
    14e8:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    14ec:	2c ed       	ldi	r18, 0xDC	; 220
    14ee:	38 eb       	ldi	r19, 0xB8	; 184
    14f0:	48 e0       	ldi	r20, 0x08	; 8
    14f2:	5e e3       	ldi	r21, 0x3E	; 62
    14f4:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    14f8:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    14fc:	d4 01       	movw	r26, r8
    14fe:	6d 93       	st	X+, r22
    1500:	7c 93       	st	X, r23
    1502:	69 85       	ldd	r22, Y+9	; 0x09
    1504:	7a 85       	ldd	r23, Y+10	; 0x0a
    1506:	8b 85       	ldd	r24, Y+11	; 0x0b
    1508:	9c 85       	ldd	r25, Y+12	; 0x0c
    150a:	a6 01       	movw	r20, r12
    150c:	95 01       	movw	r18, r10
    150e:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1512:	2c ed       	ldi	r18, 0xDC	; 220
    1514:	38 eb       	ldi	r19, 0xB8	; 184
    1516:	48 e0       	ldi	r20, 0x08	; 8
    1518:	5e e3       	ldi	r21, 0x3E	; 62
    151a:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    151e:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1522:	f4 01       	movw	r30, r8
    1524:	73 83       	std	Z+3, r23	; 0x03
    1526:	62 83       	std	Z+2, r22	; 0x02
    1528:	6d 85       	ldd	r22, Y+13	; 0x0d
    152a:	7e 85       	ldd	r23, Y+14	; 0x0e
    152c:	8f 85       	ldd	r24, Y+15	; 0x0f
    152e:	98 89       	ldd	r25, Y+16	; 0x10
    1530:	a6 01       	movw	r20, r12
    1532:	95 01       	movw	r18, r10
    1534:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1538:	2c ed       	ldi	r18, 0xDC	; 220
    153a:	38 eb       	ldi	r19, 0xB8	; 184
    153c:	48 e0       	ldi	r20, 0x08	; 8
    153e:	5e e3       	ldi	r21, 0x3E	; 62
    1540:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1544:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1548:	d4 01       	movw	r26, r8
    154a:	15 96       	adiw	r26, 0x05	; 5
    154c:	7c 93       	st	X, r23
    154e:	6e 93       	st	-X, r22
    1550:	14 97       	sbiw	r26, 0x04	; 4
    1552:	16 96       	adiw	r26, 0x06	; 6
    1554:	2c 92       	st	X, r2
    1556:	16 97       	sbiw	r26, 0x06	; 6
    1558:	18 96       	adiw	r26, 0x08	; 8
    155a:	1c 92       	st	X, r1
    155c:	1e 92       	st	-X, r1
    155e:	17 97       	sbiw	r26, 0x07	; 7
    1560:	81 e0       	ldi	r24, 0x01	; 1
    1562:	62 e0       	ldi	r22, 0x02	; 2
    1564:	43 2d       	mov	r20, r3
    1566:	29 89       	ldd	r18, Y+17	; 0x11
    1568:	3a 89       	ldd	r19, Y+18	; 0x12
    156a:	0d 89       	ldd	r16, Y+21	; 0x15
    156c:	1e 89       	ldd	r17, Y+22	; 0x16
    156e:	bd c0       	rjmp	.+378    	; 0x16ea <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    1570:	c3 01       	movw	r24, r6
    1572:	b2 01       	movw	r22, r4
    1574:	20 e0       	ldi	r18, 0x00	; 0
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    1580:	87 fd       	sbrc	r24, 7
    1582:	02 c0       	rjmp	.+4      	; 0x1588 <move_arc_stnb+0x3ac>
    1584:	80 e0       	ldi	r24, 0x00	; 0
    1586:	c1 c0       	rjmp	.+386    	; 0x170a <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1588:	66 e6       	ldi	r22, 0x66	; 102
    158a:	76 e6       	ldi	r23, 0x66	; 102
    158c:	8a ea       	ldi	r24, 0xAA	; 170
    158e:	91 e4       	ldi	r25, 0x41	; 65
    1590:	a3 01       	movw	r20, r6
    1592:	92 01       	movw	r18, r4
    1594:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1598:	20 e0       	ldi	r18, 0x00	; 0
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	40 e8       	ldi	r20, 0x80	; 128
    159e:	5f e3       	ldi	r21, 0x3F	; 63
    15a0:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    15a4:	7b 01       	movw	r14, r22
    15a6:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    15a8:	66 e6       	ldi	r22, 0x66	; 102
    15aa:	76 e6       	ldi	r23, 0x66	; 102
    15ac:	8a ea       	ldi	r24, 0xAA	; 170
    15ae:	91 ec       	ldi	r25, 0xC1	; 193
    15b0:	a3 01       	movw	r20, r6
    15b2:	92 01       	movw	r18, r4
    15b4:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e8       	ldi	r20, 0x80	; 128
    15be:	5f e3       	ldi	r21, 0x3F	; 63
    15c0:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    15c4:	5b 01       	movw	r10, r22
    15c6:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    15c8:	2d b7       	in	r18, 0x3d	; 61
    15ca:	3e b7       	in	r19, 0x3e	; 62
    15cc:	29 50       	subi	r18, 0x09	; 9
    15ce:	30 40       	sbci	r19, 0x00	; 0
    15d0:	0f b6       	in	r0, 0x3f	; 63
    15d2:	f8 94       	cli
    15d4:	3e bf       	out	0x3e, r19	; 62
    15d6:	0f be       	out	0x3f, r0	; 63
    15d8:	2d bf       	out	0x3d, r18	; 61
    15da:	8d b6       	in	r8, 0x3d	; 61
    15dc:	9e b6       	in	r9, 0x3e	; 62
    15de:	08 94       	sec
    15e0:	81 1c       	adc	r8, r1
    15e2:	91 1c       	adc	r9, r1
    15e4:	6d 81       	ldd	r22, Y+5	; 0x05
    15e6:	7e 81       	ldd	r23, Y+6	; 0x06
    15e8:	8f 81       	ldd	r24, Y+7	; 0x07
    15ea:	98 85       	ldd	r25, Y+8	; 0x08
    15ec:	a8 01       	movw	r20, r16
    15ee:	97 01       	movw	r18, r14
    15f0:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    15f4:	2c ed       	ldi	r18, 0xDC	; 220
    15f6:	38 eb       	ldi	r19, 0xB8	; 184
    15f8:	48 e0       	ldi	r20, 0x08	; 8
    15fa:	5e e3       	ldi	r21, 0x3E	; 62
    15fc:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1600:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1604:	69 8f       	std	Y+25, r22	; 0x19
    1606:	7a 8f       	std	Y+26, r23	; 0x1a
    1608:	8b 8f       	std	Y+27, r24	; 0x1b
    160a:	9c 8f       	std	Y+28, r25	; 0x1c
    160c:	69 85       	ldd	r22, Y+9	; 0x09
    160e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1610:	8b 85       	ldd	r24, Y+11	; 0x0b
    1612:	9c 85       	ldd	r25, Y+12	; 0x0c
    1614:	a8 01       	movw	r20, r16
    1616:	97 01       	movw	r18, r14
    1618:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    161c:	2c ed       	ldi	r18, 0xDC	; 220
    161e:	38 eb       	ldi	r19, 0xB8	; 184
    1620:	48 e0       	ldi	r20, 0x08	; 8
    1622:	5e e3       	ldi	r21, 0x3E	; 62
    1624:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1628:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    162c:	6d 8f       	std	Y+29, r22	; 0x1d
    162e:	7e 8f       	std	Y+30, r23	; 0x1e
    1630:	8f 8f       	std	Y+31, r24	; 0x1f
    1632:	98 a3       	std	Y+32, r25	; 0x20
    1634:	6d 85       	ldd	r22, Y+13	; 0x0d
    1636:	7e 85       	ldd	r23, Y+14	; 0x0e
    1638:	8f 85       	ldd	r24, Y+15	; 0x0f
    163a:	98 89       	ldd	r25, Y+16	; 0x10
    163c:	a8 01       	movw	r20, r16
    163e:	97 01       	movw	r18, r14
    1640:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1644:	2c ed       	ldi	r18, 0xDC	; 220
    1646:	38 eb       	ldi	r19, 0xB8	; 184
    1648:	48 e0       	ldi	r20, 0x08	; 8
    164a:	5e e3       	ldi	r21, 0x3E	; 62
    164c:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1650:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1654:	2b 01       	movw	r4, r22
    1656:	3c 01       	movw	r6, r24
    1658:	6d 81       	ldd	r22, Y+5	; 0x05
    165a:	7e 81       	ldd	r23, Y+6	; 0x06
    165c:	8f 81       	ldd	r24, Y+7	; 0x07
    165e:	98 85       	ldd	r25, Y+8	; 0x08
    1660:	a6 01       	movw	r20, r12
    1662:	95 01       	movw	r18, r10
    1664:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1668:	2c ed       	ldi	r18, 0xDC	; 220
    166a:	38 eb       	ldi	r19, 0xB8	; 184
    166c:	48 e0       	ldi	r20, 0x08	; 8
    166e:	5e e3       	ldi	r21, 0x3E	; 62
    1670:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1674:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1678:	d4 01       	movw	r26, r8
    167a:	6d 93       	st	X+, r22
    167c:	7c 93       	st	X, r23
    167e:	69 85       	ldd	r22, Y+9	; 0x09
    1680:	7a 85       	ldd	r23, Y+10	; 0x0a
    1682:	8b 85       	ldd	r24, Y+11	; 0x0b
    1684:	9c 85       	ldd	r25, Y+12	; 0x0c
    1686:	a6 01       	movw	r20, r12
    1688:	95 01       	movw	r18, r10
    168a:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    168e:	2c ed       	ldi	r18, 0xDC	; 220
    1690:	38 eb       	ldi	r19, 0xB8	; 184
    1692:	48 e0       	ldi	r20, 0x08	; 8
    1694:	5e e3       	ldi	r21, 0x3E	; 62
    1696:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    169a:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    169e:	f4 01       	movw	r30, r8
    16a0:	73 83       	std	Z+3, r23	; 0x03
    16a2:	62 83       	std	Z+2, r22	; 0x02
    16a4:	6d 85       	ldd	r22, Y+13	; 0x0d
    16a6:	7e 85       	ldd	r23, Y+14	; 0x0e
    16a8:	8f 85       	ldd	r24, Y+15	; 0x0f
    16aa:	98 89       	ldd	r25, Y+16	; 0x10
    16ac:	a6 01       	movw	r20, r12
    16ae:	95 01       	movw	r18, r10
    16b0:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    16b4:	2c ed       	ldi	r18, 0xDC	; 220
    16b6:	38 eb       	ldi	r19, 0xB8	; 184
    16b8:	48 e0       	ldi	r20, 0x08	; 8
    16ba:	5e e3       	ldi	r21, 0x3E	; 62
    16bc:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    16c0:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    16c4:	d4 01       	movw	r26, r8
    16c6:	15 96       	adiw	r26, 0x05	; 5
    16c8:	7c 93       	st	X, r23
    16ca:	6e 93       	st	-X, r22
    16cc:	14 97       	sbiw	r26, 0x04	; 4
    16ce:	16 96       	adiw	r26, 0x06	; 6
    16d0:	2c 92       	st	X, r2
    16d2:	16 97       	sbiw	r26, 0x06	; 6
    16d4:	18 96       	adiw	r26, 0x08	; 8
    16d6:	1c 92       	st	X, r1
    16d8:	1e 92       	st	-X, r1
    16da:	17 97       	sbiw	r26, 0x07	; 7
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	62 e0       	ldi	r22, 0x02	; 2
    16e0:	43 2d       	mov	r20, r3
    16e2:	29 8d       	ldd	r18, Y+25	; 0x19
    16e4:	3a 8d       	ldd	r19, Y+26	; 0x1a
    16e6:	0d 8d       	ldd	r16, Y+29	; 0x1d
    16e8:	1e 8d       	ldd	r17, Y+30	; 0x1e
    16ea:	72 01       	movw	r14, r4
    16ec:	c2 2c       	mov	r12, r2
    16ee:	aa 24       	eor	r10, r10
    16f0:	bb 24       	eor	r11, r11
    16f2:	83 2c       	mov	r8, r3
    16f4:	0e 94 ca 19 	call	0x3394	; 0x3394 <STEPPER_move>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	ed b7       	in	r30, 0x3d	; 61
    16fc:	fe b7       	in	r31, 0x3e	; 62
    16fe:	39 96       	adiw	r30, 0x09	; 9
    1700:	0f b6       	in	r0, 0x3f	; 63
    1702:	f8 94       	cli
    1704:	fe bf       	out	0x3e, r31	; 62
    1706:	0f be       	out	0x3f, r0	; 63
    1708:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    170a:	a0 96       	adiw	r28, 0x20	; 32
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	cf 91       	pop	r28
    1718:	df 91       	pop	r29
    171a:	1f 91       	pop	r17
    171c:	0f 91       	pop	r16
    171e:	ff 90       	pop	r15
    1720:	ef 90       	pop	r14
    1722:	df 90       	pop	r13
    1724:	cf 90       	pop	r12
    1726:	bf 90       	pop	r11
    1728:	af 90       	pop	r10
    172a:	9f 90       	pop	r9
    172c:	8f 90       	pop	r8
    172e:	7f 90       	pop	r7
    1730:	6f 90       	pop	r6
    1732:	5f 90       	pop	r5
    1734:	4f 90       	pop	r4
    1736:	3f 90       	pop	r3
    1738:	2f 90       	pop	r2
    173a:	08 95       	ret

0000173c <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    173c:	2f 92       	push	r2
    173e:	3f 92       	push	r3
    1740:	4f 92       	push	r4
    1742:	5f 92       	push	r5
    1744:	6f 92       	push	r6
    1746:	7f 92       	push	r7
    1748:	8f 92       	push	r8
    174a:	9f 92       	push	r9
    174c:	af 92       	push	r10
    174e:	bf 92       	push	r11
    1750:	cf 92       	push	r12
    1752:	df 92       	push	r13
    1754:	ef 92       	push	r14
    1756:	ff 92       	push	r15
    1758:	0f 93       	push	r16
    175a:	1f 93       	push	r17
    175c:	df 93       	push	r29
    175e:	cf 93       	push	r28
    1760:	cd b7       	in	r28, 0x3d	; 61
    1762:	de b7       	in	r29, 0x3e	; 62
    1764:	a0 97       	sbiw	r28, 0x20	; 32
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	f8 94       	cli
    176a:	de bf       	out	0x3e, r29	; 62
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	cd bf       	out	0x3d, r28	; 61
    1770:	2b 01       	movw	r4, r22
    1772:	3c 01       	movw	r6, r24
    1774:	2d 83       	std	Y+5, r18	; 0x05
    1776:	3e 83       	std	Y+6, r19	; 0x06
    1778:	4f 83       	std	Y+7, r20	; 0x07
    177a:	58 87       	std	Y+8, r21	; 0x08
    177c:	e9 86       	std	Y+9, r14	; 0x09
    177e:	fa 86       	std	Y+10, r15	; 0x0a
    1780:	0b 87       	std	Y+11, r16	; 0x0b
    1782:	1c 87       	std	Y+12, r17	; 0x0c
    1784:	ad 86       	std	Y+13, r10	; 0x0d
    1786:	be 86       	std	Y+14, r11	; 0x0e
    1788:	cf 86       	std	Y+15, r12	; 0x0f
    178a:	d8 8a       	std	Y+16, r13	; 0x10
    178c:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    178e:	33 24       	eor	r3, r3
    1790:	ca 01       	movw	r24, r20
    1792:	b9 01       	movw	r22, r18
    1794:	20 e0       	ldi	r18, 0x00	; 0
    1796:	30 e0       	ldi	r19, 0x00	; 0
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	50 e0       	ldi	r21, 0x00	; 0
    179c:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__gesf2>
    17a0:	18 16       	cp	r1, r24
    17a2:	14 f4       	brge	.+4      	; 0x17a8 <move_arc_stwt+0x6c>
    17a4:	33 24       	eor	r3, r3
    17a6:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    17a8:	6d 81       	ldd	r22, Y+5	; 0x05
    17aa:	7e 81       	ldd	r23, Y+6	; 0x06
    17ac:	8f 81       	ldd	r24, Y+7	; 0x07
    17ae:	98 85       	ldd	r25, Y+8	; 0x08
    17b0:	2c ed       	ldi	r18, 0xDC	; 220
    17b2:	38 eb       	ldi	r19, 0xB8	; 184
    17b4:	48 e0       	ldi	r20, 0x08	; 8
    17b6:	5e e3       	ldi	r21, 0x3E	; 62
    17b8:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    17bc:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fixsfsi>
    17c0:	9b 01       	movw	r18, r22
    17c2:	77 ff       	sbrs	r23, 7
    17c4:	03 c0       	rjmp	.+6      	; 0x17cc <move_arc_stwt+0x90>
    17c6:	30 95       	com	r19
    17c8:	21 95       	neg	r18
    17ca:	3f 4f       	sbci	r19, 0xFF	; 255
    17cc:	b9 01       	movw	r22, r18
    17ce:	88 27       	eor	r24, r24
    17d0:	77 fd       	sbrc	r23, 7
    17d2:	80 95       	com	r24
    17d4:	98 2f       	mov	r25, r24
    17d6:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__floatsisf>
    17da:	69 83       	std	Y+1, r22	; 0x01
    17dc:	7a 83       	std	Y+2, r23	; 0x02
    17de:	8b 83       	std	Y+3, r24	; 0x03
    17e0:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    17e2:	69 85       	ldd	r22, Y+9	; 0x09
    17e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    17e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    17e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    17ea:	2c ed       	ldi	r18, 0xDC	; 220
    17ec:	38 eb       	ldi	r19, 0xB8	; 184
    17ee:	48 e0       	ldi	r20, 0x08	; 8
    17f0:	5e e3       	ldi	r21, 0x3E	; 62
    17f2:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    17f6:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fixsfsi>
    17fa:	9b 01       	movw	r18, r22
    17fc:	77 ff       	sbrs	r23, 7
    17fe:	03 c0       	rjmp	.+6      	; 0x1806 <move_arc_stwt+0xca>
    1800:	30 95       	com	r19
    1802:	21 95       	neg	r18
    1804:	3f 4f       	sbci	r19, 0xFF	; 255
    1806:	b9 01       	movw	r22, r18
    1808:	88 27       	eor	r24, r24
    180a:	77 fd       	sbrc	r23, 7
    180c:	80 95       	com	r24
    180e:	98 2f       	mov	r25, r24
    1810:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__floatsisf>
    1814:	4b 01       	movw	r8, r22
    1816:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1818:	6d 85       	ldd	r22, Y+13	; 0x0d
    181a:	7e 85       	ldd	r23, Y+14	; 0x0e
    181c:	8f 85       	ldd	r24, Y+15	; 0x0f
    181e:	98 89       	ldd	r25, Y+16	; 0x10
    1820:	2c ed       	ldi	r18, 0xDC	; 220
    1822:	38 eb       	ldi	r19, 0xB8	; 184
    1824:	48 e0       	ldi	r20, 0x08	; 8
    1826:	5e e3       	ldi	r21, 0x3E	; 62
    1828:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    182c:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fixsfsi>
    1830:	9b 01       	movw	r18, r22
    1832:	77 ff       	sbrs	r23, 7
    1834:	03 c0       	rjmp	.+6      	; 0x183c <move_arc_stwt+0x100>
    1836:	30 95       	com	r19
    1838:	21 95       	neg	r18
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	b9 01       	movw	r22, r18
    183e:	88 27       	eor	r24, r24
    1840:	77 fd       	sbrc	r23, 7
    1842:	80 95       	com	r24
    1844:	98 2f       	mov	r25, r24
    1846:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__floatsisf>
    184a:	6b 01       	movw	r12, r22
    184c:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    184e:	c3 01       	movw	r24, r6
    1850:	b2 01       	movw	r22, r4
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e0       	ldi	r20, 0x00	; 0
    1858:	5f e4       	ldi	r21, 0x4F	; 79
    185a:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    185e:	88 23       	and	r24, r24
    1860:	a1 f5       	brne	.+104    	; 0x18ca <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    1862:	69 81       	ldd	r22, Y+1	; 0x01
    1864:	7a 81       	ldd	r23, Y+2	; 0x02
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    186e:	2b 01       	movw	r4, r22
    1870:	3c 01       	movw	r6, r24
    1872:	c5 01       	movw	r24, r10
    1874:	b4 01       	movw	r22, r8
    1876:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    187a:	4b 01       	movw	r8, r22
    187c:	5c 01       	movw	r10, r24
    187e:	c7 01       	movw	r24, r14
    1880:	b6 01       	movw	r22, r12
    1882:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1886:	6b 01       	movw	r12, r22
    1888:	7c 01       	movw	r14, r24
    188a:	2d b7       	in	r18, 0x3d	; 61
    188c:	3e b7       	in	r19, 0x3e	; 62
    188e:	29 50       	subi	r18, 0x09	; 9
    1890:	30 40       	sbci	r19, 0x00	; 0
    1892:	0f b6       	in	r0, 0x3f	; 63
    1894:	f8 94       	cli
    1896:	3e bf       	out	0x3e, r19	; 62
    1898:	0f be       	out	0x3f, r0	; 63
    189a:	2d bf       	out	0x3d, r18	; 61
    189c:	ed b7       	in	r30, 0x3d	; 61
    189e:	fe b7       	in	r31, 0x3e	; 62
    18a0:	31 96       	adiw	r30, 0x01	; 1
    18a2:	ad b7       	in	r26, 0x3d	; 61
    18a4:	be b7       	in	r27, 0x3e	; 62
    18a6:	12 96       	adiw	r26, 0x02	; 2
    18a8:	5c 92       	st	X, r5
    18aa:	4e 92       	st	-X, r4
    18ac:	11 97       	sbiw	r26, 0x01	; 1
    18ae:	93 82       	std	Z+3, r9	; 0x03
    18b0:	82 82       	std	Z+2, r8	; 0x02
    18b2:	75 83       	std	Z+5, r23	; 0x05
    18b4:	64 83       	std	Z+4, r22	; 0x04
    18b6:	26 82       	std	Z+6, r2	; 0x06
    18b8:	10 86       	std	Z+8, r1	; 0x08
    18ba:	17 82       	std	Z+7, r1	; 0x07
    18bc:	80 e0       	ldi	r24, 0x00	; 0
    18be:	62 e0       	ldi	r22, 0x02	; 2
    18c0:	43 2d       	mov	r20, r3
    18c2:	92 01       	movw	r18, r4
    18c4:	84 01       	movw	r16, r8
    18c6:	76 01       	movw	r14, r12
    18c8:	c1 c1       	rjmp	.+898    	; 0x1c4c <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    18ca:	c3 01       	movw	r24, r6
    18cc:	b2 01       	movw	r22, r4
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    18da:	88 23       	and	r24, r24
    18dc:	e9 f5       	brne	.+122    	; 0x1958 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    18de:	69 81       	ldd	r22, Y+1	; 0x01
    18e0:	7a 81       	ldd	r23, Y+2	; 0x02
    18e2:	8b 81       	ldd	r24, Y+3	; 0x03
    18e4:	9c 81       	ldd	r25, Y+4	; 0x04
    18e6:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    18ea:	3b 01       	movw	r6, r22
    18ec:	c5 01       	movw	r24, r10
    18ee:	b4 01       	movw	r22, r8
    18f0:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    18f4:	8b 01       	movw	r16, r22
    18f6:	c7 01       	movw	r24, r14
    18f8:	b6 01       	movw	r22, r12
    18fa:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    18fe:	7b 01       	movw	r14, r22
    1900:	2d b7       	in	r18, 0x3d	; 61
    1902:	3e b7       	in	r19, 0x3e	; 62
    1904:	29 50       	subi	r18, 0x09	; 9
    1906:	30 40       	sbci	r19, 0x00	; 0
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	3e bf       	out	0x3e, r19	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	2d bf       	out	0x3d, r18	; 61
    1912:	ed b7       	in	r30, 0x3d	; 61
    1914:	fe b7       	in	r31, 0x3e	; 62
    1916:	31 96       	adiw	r30, 0x01	; 1
    1918:	40 e0       	ldi	r20, 0x00	; 0
    191a:	33 20       	and	r3, r3
    191c:	09 f4       	brne	.+2      	; 0x1920 <move_arc_stwt+0x1e4>
    191e:	41 e0       	ldi	r20, 0x01	; 1
    1920:	71 82       	std	Z+1, r7	; 0x01
    1922:	60 82       	st	Z, r6
    1924:	13 83       	std	Z+3, r17	; 0x03
    1926:	02 83       	std	Z+2, r16	; 0x02
    1928:	f5 82       	std	Z+5, r15	; 0x05
    192a:	e4 82       	std	Z+4, r14	; 0x04
    192c:	26 82       	std	Z+6, r2	; 0x06
    192e:	10 86       	std	Z+8, r1	; 0x08
    1930:	17 82       	std	Z+7, r1	; 0x07
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	62 e0       	ldi	r22, 0x02	; 2
    1936:	93 01       	movw	r18, r6
    1938:	c2 2c       	mov	r12, r2
    193a:	aa 24       	eor	r10, r10
    193c:	bb 24       	eor	r11, r11
    193e:	83 2c       	mov	r8, r3
    1940:	0e 94 ca 19 	call	0x3394	; 0x3394 <STEPPER_move>
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	ad b7       	in	r26, 0x3d	; 61
    1948:	be b7       	in	r27, 0x3e	; 62
    194a:	19 96       	adiw	r26, 0x09	; 9
    194c:	0f b6       	in	r0, 0x3f	; 63
    194e:	f8 94       	cli
    1950:	be bf       	out	0x3e, r27	; 62
    1952:	0f be       	out	0x3f, r0	; 63
    1954:	ad bf       	out	0x3d, r26	; 61
    1956:	89 c1       	rjmp	.+786    	; 0x1c6a <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1958:	c3 01       	movw	r24, r6
    195a:	b2 01       	movw	r22, r4
    195c:	20 e0       	ldi	r18, 0x00	; 0
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	40 e0       	ldi	r20, 0x00	; 0
    1962:	50 e0       	ldi	r21, 0x00	; 0
    1964:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__gesf2>
    1968:	18 16       	cp	r1, r24
    196a:	0c f0       	brlt	.+2      	; 0x196e <move_arc_stwt+0x232>
    196c:	b1 c0       	rjmp	.+354    	; 0x1ad0 <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    196e:	66 e6       	ldi	r22, 0x66	; 102
    1970:	76 e6       	ldi	r23, 0x66	; 102
    1972:	8a ea       	ldi	r24, 0xAA	; 170
    1974:	91 ec       	ldi	r25, 0xC1	; 193
    1976:	a3 01       	movw	r20, r6
    1978:	92 01       	movw	r18, r4
    197a:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    198a:	7b 01       	movw	r14, r22
    198c:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    198e:	66 e6       	ldi	r22, 0x66	; 102
    1990:	76 e6       	ldi	r23, 0x66	; 102
    1992:	8a ea       	ldi	r24, 0xAA	; 170
    1994:	91 e4       	ldi	r25, 0x41	; 65
    1996:	a3 01       	movw	r20, r6
    1998:	92 01       	movw	r18, r4
    199a:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    199e:	20 e0       	ldi	r18, 0x00	; 0
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	40 e8       	ldi	r20, 0x80	; 128
    19a4:	5f e3       	ldi	r21, 0x3F	; 63
    19a6:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    19aa:	5b 01       	movw	r10, r22
    19ac:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    19ae:	ed b7       	in	r30, 0x3d	; 61
    19b0:	fe b7       	in	r31, 0x3e	; 62
    19b2:	39 97       	sbiw	r30, 0x09	; 9
    19b4:	0f b6       	in	r0, 0x3f	; 63
    19b6:	f8 94       	cli
    19b8:	fe bf       	out	0x3e, r31	; 62
    19ba:	0f be       	out	0x3f, r0	; 63
    19bc:	ed bf       	out	0x3d, r30	; 61
    19be:	8d b6       	in	r8, 0x3d	; 61
    19c0:	9e b6       	in	r9, 0x3e	; 62
    19c2:	08 94       	sec
    19c4:	81 1c       	adc	r8, r1
    19c6:	91 1c       	adc	r9, r1
    19c8:	6d 81       	ldd	r22, Y+5	; 0x05
    19ca:	7e 81       	ldd	r23, Y+6	; 0x06
    19cc:	8f 81       	ldd	r24, Y+7	; 0x07
    19ce:	98 85       	ldd	r25, Y+8	; 0x08
    19d0:	a8 01       	movw	r20, r16
    19d2:	97 01       	movw	r18, r14
    19d4:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    19d8:	2c ed       	ldi	r18, 0xDC	; 220
    19da:	38 eb       	ldi	r19, 0xB8	; 184
    19dc:	48 e0       	ldi	r20, 0x08	; 8
    19de:	5e e3       	ldi	r21, 0x3E	; 62
    19e0:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    19e4:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    19e8:	69 8b       	std	Y+17, r22	; 0x11
    19ea:	7a 8b       	std	Y+18, r23	; 0x12
    19ec:	8b 8b       	std	Y+19, r24	; 0x13
    19ee:	9c 8b       	std	Y+20, r25	; 0x14
    19f0:	69 85       	ldd	r22, Y+9	; 0x09
    19f2:	7a 85       	ldd	r23, Y+10	; 0x0a
    19f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    19f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    19f8:	a8 01       	movw	r20, r16
    19fa:	97 01       	movw	r18, r14
    19fc:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1a00:	2c ed       	ldi	r18, 0xDC	; 220
    1a02:	38 eb       	ldi	r19, 0xB8	; 184
    1a04:	48 e0       	ldi	r20, 0x08	; 8
    1a06:	5e e3       	ldi	r21, 0x3E	; 62
    1a08:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1a0c:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1a10:	6d 8b       	std	Y+21, r22	; 0x15
    1a12:	7e 8b       	std	Y+22, r23	; 0x16
    1a14:	8f 8b       	std	Y+23, r24	; 0x17
    1a16:	98 8f       	std	Y+24, r25	; 0x18
    1a18:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a1a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a1e:	98 89       	ldd	r25, Y+16	; 0x10
    1a20:	a8 01       	movw	r20, r16
    1a22:	97 01       	movw	r18, r14
    1a24:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1a28:	2c ed       	ldi	r18, 0xDC	; 220
    1a2a:	38 eb       	ldi	r19, 0xB8	; 184
    1a2c:	48 e0       	ldi	r20, 0x08	; 8
    1a2e:	5e e3       	ldi	r21, 0x3E	; 62
    1a30:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1a34:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1a38:	2b 01       	movw	r4, r22
    1a3a:	3c 01       	movw	r6, r24
    1a3c:	6d 81       	ldd	r22, Y+5	; 0x05
    1a3e:	7e 81       	ldd	r23, Y+6	; 0x06
    1a40:	8f 81       	ldd	r24, Y+7	; 0x07
    1a42:	98 85       	ldd	r25, Y+8	; 0x08
    1a44:	a6 01       	movw	r20, r12
    1a46:	95 01       	movw	r18, r10
    1a48:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1a4c:	2c ed       	ldi	r18, 0xDC	; 220
    1a4e:	38 eb       	ldi	r19, 0xB8	; 184
    1a50:	48 e0       	ldi	r20, 0x08	; 8
    1a52:	5e e3       	ldi	r21, 0x3E	; 62
    1a54:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1a58:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1a5c:	d4 01       	movw	r26, r8
    1a5e:	6d 93       	st	X+, r22
    1a60:	7c 93       	st	X, r23
    1a62:	69 85       	ldd	r22, Y+9	; 0x09
    1a64:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a66:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a68:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a6a:	a6 01       	movw	r20, r12
    1a6c:	95 01       	movw	r18, r10
    1a6e:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1a72:	2c ed       	ldi	r18, 0xDC	; 220
    1a74:	38 eb       	ldi	r19, 0xB8	; 184
    1a76:	48 e0       	ldi	r20, 0x08	; 8
    1a78:	5e e3       	ldi	r21, 0x3E	; 62
    1a7a:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1a7e:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1a82:	f4 01       	movw	r30, r8
    1a84:	73 83       	std	Z+3, r23	; 0x03
    1a86:	62 83       	std	Z+2, r22	; 0x02
    1a88:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a8a:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8e:	98 89       	ldd	r25, Y+16	; 0x10
    1a90:	a6 01       	movw	r20, r12
    1a92:	95 01       	movw	r18, r10
    1a94:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1a98:	2c ed       	ldi	r18, 0xDC	; 220
    1a9a:	38 eb       	ldi	r19, 0xB8	; 184
    1a9c:	48 e0       	ldi	r20, 0x08	; 8
    1a9e:	5e e3       	ldi	r21, 0x3E	; 62
    1aa0:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1aa4:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1aa8:	d4 01       	movw	r26, r8
    1aaa:	15 96       	adiw	r26, 0x05	; 5
    1aac:	7c 93       	st	X, r23
    1aae:	6e 93       	st	-X, r22
    1ab0:	14 97       	sbiw	r26, 0x04	; 4
    1ab2:	16 96       	adiw	r26, 0x06	; 6
    1ab4:	2c 92       	st	X, r2
    1ab6:	16 97       	sbiw	r26, 0x06	; 6
    1ab8:	18 96       	adiw	r26, 0x08	; 8
    1aba:	1c 92       	st	X, r1
    1abc:	1e 92       	st	-X, r1
    1abe:	17 97       	sbiw	r26, 0x07	; 7
    1ac0:	80 e0       	ldi	r24, 0x00	; 0
    1ac2:	62 e0       	ldi	r22, 0x02	; 2
    1ac4:	43 2d       	mov	r20, r3
    1ac6:	29 89       	ldd	r18, Y+17	; 0x11
    1ac8:	3a 89       	ldd	r19, Y+18	; 0x12
    1aca:	0d 89       	ldd	r16, Y+21	; 0x15
    1acc:	1e 89       	ldd	r17, Y+22	; 0x16
    1ace:	bd c0       	rjmp	.+378    	; 0x1c4a <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    1ad0:	c3 01       	movw	r24, r6
    1ad2:	b2 01       	movw	r22, r4
    1ad4:	20 e0       	ldi	r18, 0x00	; 0
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	40 e0       	ldi	r20, 0x00	; 0
    1ada:	50 e0       	ldi	r21, 0x00	; 0
    1adc:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    1ae0:	87 fd       	sbrc	r24, 7
    1ae2:	02 c0       	rjmp	.+4      	; 0x1ae8 <move_arc_stwt+0x3ac>
    1ae4:	80 e0       	ldi	r24, 0x00	; 0
    1ae6:	c1 c0       	rjmp	.+386    	; 0x1c6a <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1ae8:	66 e6       	ldi	r22, 0x66	; 102
    1aea:	76 e6       	ldi	r23, 0x66	; 102
    1aec:	8a ea       	ldi	r24, 0xAA	; 170
    1aee:	91 e4       	ldi	r25, 0x41	; 65
    1af0:	a3 01       	movw	r20, r6
    1af2:	92 01       	movw	r18, r4
    1af4:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e8       	ldi	r20, 0x80	; 128
    1afe:	5f e3       	ldi	r21, 0x3F	; 63
    1b00:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    1b04:	7b 01       	movw	r14, r22
    1b06:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1b08:	66 e6       	ldi	r22, 0x66	; 102
    1b0a:	76 e6       	ldi	r23, 0x66	; 102
    1b0c:	8a ea       	ldi	r24, 0xAA	; 170
    1b0e:	91 ec       	ldi	r25, 0xC1	; 193
    1b10:	a3 01       	movw	r20, r6
    1b12:	92 01       	movw	r18, r4
    1b14:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1b18:	20 e0       	ldi	r18, 0x00	; 0
    1b1a:	30 e0       	ldi	r19, 0x00	; 0
    1b1c:	40 e8       	ldi	r20, 0x80	; 128
    1b1e:	5f e3       	ldi	r21, 0x3F	; 63
    1b20:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    1b24:	5b 01       	movw	r10, r22
    1b26:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1b28:	2d b7       	in	r18, 0x3d	; 61
    1b2a:	3e b7       	in	r19, 0x3e	; 62
    1b2c:	29 50       	subi	r18, 0x09	; 9
    1b2e:	30 40       	sbci	r19, 0x00	; 0
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	3e bf       	out	0x3e, r19	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	2d bf       	out	0x3d, r18	; 61
    1b3a:	8d b6       	in	r8, 0x3d	; 61
    1b3c:	9e b6       	in	r9, 0x3e	; 62
    1b3e:	08 94       	sec
    1b40:	81 1c       	adc	r8, r1
    1b42:	91 1c       	adc	r9, r1
    1b44:	6d 81       	ldd	r22, Y+5	; 0x05
    1b46:	7e 81       	ldd	r23, Y+6	; 0x06
    1b48:	8f 81       	ldd	r24, Y+7	; 0x07
    1b4a:	98 85       	ldd	r25, Y+8	; 0x08
    1b4c:	a8 01       	movw	r20, r16
    1b4e:	97 01       	movw	r18, r14
    1b50:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1b54:	2c ed       	ldi	r18, 0xDC	; 220
    1b56:	38 eb       	ldi	r19, 0xB8	; 184
    1b58:	48 e0       	ldi	r20, 0x08	; 8
    1b5a:	5e e3       	ldi	r21, 0x3E	; 62
    1b5c:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1b60:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1b64:	69 8f       	std	Y+25, r22	; 0x19
    1b66:	7a 8f       	std	Y+26, r23	; 0x1a
    1b68:	8b 8f       	std	Y+27, r24	; 0x1b
    1b6a:	9c 8f       	std	Y+28, r25	; 0x1c
    1b6c:	69 85       	ldd	r22, Y+9	; 0x09
    1b6e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1b70:	8b 85       	ldd	r24, Y+11	; 0x0b
    1b72:	9c 85       	ldd	r25, Y+12	; 0x0c
    1b74:	a8 01       	movw	r20, r16
    1b76:	97 01       	movw	r18, r14
    1b78:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1b7c:	2c ed       	ldi	r18, 0xDC	; 220
    1b7e:	38 eb       	ldi	r19, 0xB8	; 184
    1b80:	48 e0       	ldi	r20, 0x08	; 8
    1b82:	5e e3       	ldi	r21, 0x3E	; 62
    1b84:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1b88:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1b8c:	6d 8f       	std	Y+29, r22	; 0x1d
    1b8e:	7e 8f       	std	Y+30, r23	; 0x1e
    1b90:	8f 8f       	std	Y+31, r24	; 0x1f
    1b92:	98 a3       	std	Y+32, r25	; 0x20
    1b94:	6d 85       	ldd	r22, Y+13	; 0x0d
    1b96:	7e 85       	ldd	r23, Y+14	; 0x0e
    1b98:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b9a:	98 89       	ldd	r25, Y+16	; 0x10
    1b9c:	a8 01       	movw	r20, r16
    1b9e:	97 01       	movw	r18, r14
    1ba0:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1ba4:	2c ed       	ldi	r18, 0xDC	; 220
    1ba6:	38 eb       	ldi	r19, 0xB8	; 184
    1ba8:	48 e0       	ldi	r20, 0x08	; 8
    1baa:	5e e3       	ldi	r21, 0x3E	; 62
    1bac:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1bb0:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1bb4:	2b 01       	movw	r4, r22
    1bb6:	3c 01       	movw	r6, r24
    1bb8:	6d 81       	ldd	r22, Y+5	; 0x05
    1bba:	7e 81       	ldd	r23, Y+6	; 0x06
    1bbc:	8f 81       	ldd	r24, Y+7	; 0x07
    1bbe:	98 85       	ldd	r25, Y+8	; 0x08
    1bc0:	a6 01       	movw	r20, r12
    1bc2:	95 01       	movw	r18, r10
    1bc4:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1bc8:	2c ed       	ldi	r18, 0xDC	; 220
    1bca:	38 eb       	ldi	r19, 0xB8	; 184
    1bcc:	48 e0       	ldi	r20, 0x08	; 8
    1bce:	5e e3       	ldi	r21, 0x3E	; 62
    1bd0:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1bd4:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1bd8:	d4 01       	movw	r26, r8
    1bda:	6d 93       	st	X+, r22
    1bdc:	7c 93       	st	X, r23
    1bde:	69 85       	ldd	r22, Y+9	; 0x09
    1be0:	7a 85       	ldd	r23, Y+10	; 0x0a
    1be2:	8b 85       	ldd	r24, Y+11	; 0x0b
    1be4:	9c 85       	ldd	r25, Y+12	; 0x0c
    1be6:	a6 01       	movw	r20, r12
    1be8:	95 01       	movw	r18, r10
    1bea:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1bee:	2c ed       	ldi	r18, 0xDC	; 220
    1bf0:	38 eb       	ldi	r19, 0xB8	; 184
    1bf2:	48 e0       	ldi	r20, 0x08	; 8
    1bf4:	5e e3       	ldi	r21, 0x3E	; 62
    1bf6:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1bfa:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1bfe:	f4 01       	movw	r30, r8
    1c00:	73 83       	std	Z+3, r23	; 0x03
    1c02:	62 83       	std	Z+2, r22	; 0x02
    1c04:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c06:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c08:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c0a:	98 89       	ldd	r25, Y+16	; 0x10
    1c0c:	a6 01       	movw	r20, r12
    1c0e:	95 01       	movw	r18, r10
    1c10:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    1c14:	2c ed       	ldi	r18, 0xDC	; 220
    1c16:	38 eb       	ldi	r19, 0xB8	; 184
    1c18:	48 e0       	ldi	r20, 0x08	; 8
    1c1a:	5e e3       	ldi	r21, 0x3E	; 62
    1c1c:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    1c20:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1c24:	d4 01       	movw	r26, r8
    1c26:	15 96       	adiw	r26, 0x05	; 5
    1c28:	7c 93       	st	X, r23
    1c2a:	6e 93       	st	-X, r22
    1c2c:	14 97       	sbiw	r26, 0x04	; 4
    1c2e:	16 96       	adiw	r26, 0x06	; 6
    1c30:	2c 92       	st	X, r2
    1c32:	16 97       	sbiw	r26, 0x06	; 6
    1c34:	18 96       	adiw	r26, 0x08	; 8
    1c36:	1c 92       	st	X, r1
    1c38:	1e 92       	st	-X, r1
    1c3a:	17 97       	sbiw	r26, 0x07	; 7
    1c3c:	80 e0       	ldi	r24, 0x00	; 0
    1c3e:	62 e0       	ldi	r22, 0x02	; 2
    1c40:	43 2d       	mov	r20, r3
    1c42:	29 8d       	ldd	r18, Y+25	; 0x19
    1c44:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1c46:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1c48:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1c4a:	72 01       	movw	r14, r4
    1c4c:	c2 2c       	mov	r12, r2
    1c4e:	aa 24       	eor	r10, r10
    1c50:	bb 24       	eor	r11, r11
    1c52:	83 2c       	mov	r8, r3
    1c54:	0e 94 ca 19 	call	0x3394	; 0x3394 <STEPPER_move>
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	ed b7       	in	r30, 0x3d	; 61
    1c5c:	fe b7       	in	r31, 0x3e	; 62
    1c5e:	39 96       	adiw	r30, 0x09	; 9
    1c60:	0f b6       	in	r0, 0x3f	; 63
    1c62:	f8 94       	cli
    1c64:	fe bf       	out	0x3e, r31	; 62
    1c66:	0f be       	out	0x3f, r0	; 63
    1c68:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1c6a:	a0 96       	adiw	r28, 0x20	; 32
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	1f 91       	pop	r17
    1c7c:	0f 91       	pop	r16
    1c7e:	ff 90       	pop	r15
    1c80:	ef 90       	pop	r14
    1c82:	df 90       	pop	r13
    1c84:	cf 90       	pop	r12
    1c86:	bf 90       	pop	r11
    1c88:	af 90       	pop	r10
    1c8a:	9f 90       	pop	r9
    1c8c:	8f 90       	pop	r8
    1c8e:	7f 90       	pop	r7
    1c90:	6f 90       	pop	r6
    1c92:	5f 90       	pop	r5
    1c94:	4f 90       	pop	r4
    1c96:	3f 90       	pop	r3
    1c98:	2f 90       	pop	r2
    1c9a:	08 95       	ret

00001c9c <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
    1c9c:	2f 92       	push	r2
    1c9e:	3f 92       	push	r3
    1ca0:	4f 92       	push	r4
    1ca2:	5f 92       	push	r5
    1ca4:	6f 92       	push	r6
    1ca6:	7f 92       	push	r7
    1ca8:	8f 92       	push	r8
    1caa:	9f 92       	push	r9
    1cac:	af 92       	push	r10
    1cae:	bf 92       	push	r11
    1cb0:	cf 92       	push	r12
    1cb2:	df 92       	push	r13
    1cb4:	ef 92       	push	r14
    1cb6:	ff 92       	push	r15
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	00 d0       	rcall	.+0      	; 0x1cc2 <moveAway+0x26>
    1cc2:	00 d0       	rcall	.+0      	; 0x1cc4 <moveAway+0x28>
    1cc4:	cd b7       	in	r28, 0x3d	; 61
    1cc6:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    1cc8:	60 90 c0 03 	lds	r6, 0x03C0
    1ccc:	70 90 c1 03 	lds	r7, 0x03C1
    1cd0:	80 90 c2 03 	lds	r8, 0x03C2
    1cd4:	90 90 c3 03 	lds	r9, 0x03C3
    1cd8:	a0 90 c4 03 	lds	r10, 0x03C4
    1cdc:	b0 90 c5 03 	lds	r11, 0x03C5
    1ce0:	c0 90 c6 03 	lds	r12, 0x03C6
    1ce4:	d0 90 c7 03 	lds	r13, 0x03C7
	float moveX = rtIR - ltIR;
    1ce8:	e0 90 bc 03 	lds	r14, 0x03BC
    1cec:	f0 90 bd 03 	lds	r15, 0x03BD
    1cf0:	00 91 be 03 	lds	r16, 0x03BE
    1cf4:	10 91 bf 03 	lds	r17, 0x03BF
    1cf8:	80 91 b8 03 	lds	r24, 0x03B8
    1cfc:	90 91 b9 03 	lds	r25, 0x03B9
    1d00:	a0 91 ba 03 	lds	r26, 0x03BA
    1d04:	b0 91 bb 03 	lds	r27, 0x03BB
    1d08:	89 83       	std	Y+1, r24	; 0x01
    1d0a:	9a 83       	std	Y+2, r25	; 0x02
    1d0c:	ab 83       	std	Y+3, r26	; 0x03
    1d0e:	bc 83       	std	Y+4, r27	; 0x04
    1d10:	c8 01       	movw	r24, r16
    1d12:	b7 01       	movw	r22, r14
    1d14:	29 81       	ldd	r18, Y+1	; 0x01
    1d16:	3a 81       	ldd	r19, Y+2	; 0x02
    1d18:	4b 81       	ldd	r20, Y+3	; 0x03
    1d1a:	5c 81       	ldd	r21, Y+4	; 0x04
    1d1c:	0e 94 a0 29 	call	0x5340	; 0x5340 <__subsf3>
    1d20:	1b 01       	movw	r2, r22
    1d22:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
    1d24:	c4 01       	movw	r24, r8
    1d26:	b3 01       	movw	r22, r6
    1d28:	20 e0       	ldi	r18, 0x00	; 0
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 ee       	ldi	r20, 0xE0	; 224
    1d2e:	50 e4       	ldi	r21, 0x40	; 64
    1d30:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    1d34:	87 fd       	sbrc	r24, 7
    1d36:	0b c0       	rjmp	.+22     	; 0x1d4e <moveAway+0xb2>
    1d38:	c6 01       	movw	r24, r12
    1d3a:	b5 01       	movw	r22, r10
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 ee       	ldi	r20, 0xE0	; 224
    1d42:	50 e4       	ldi	r21, 0x40	; 64
    1d44:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    1d48:	88 23       	and	r24, r24
    1d4a:	0c f0       	brlt	.+2      	; 0x1d4e <moveAway+0xb2>
    1d4c:	68 c0       	rjmp	.+208    	; 0x1e1e <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    1d4e:	c4 01       	movw	r24, r8
    1d50:	b3 01       	movw	r22, r6
    1d52:	a6 01       	movw	r20, r12
    1d54:	95 01       	movw	r18, r10
    1d56:	0e 94 a0 29 	call	0x5340	; 0x5340 <__subsf3>
    1d5a:	7b 01       	movw	r14, r22
    1d5c:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
    1d5e:	77 24       	eor	r7, r7
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__gesf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	14 f0       	brlt	.+4      	; 0x1d74 <moveAway+0xd8>
    1d70:	77 24       	eor	r7, r7
    1d72:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1d74:	c8 01       	movw	r24, r16
    1d76:	b7 01       	movw	r22, r14
    1d78:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fixsfsi>
    1d7c:	9b 01       	movw	r18, r22
    1d7e:	77 ff       	sbrs	r23, 7
    1d80:	03 c0       	rjmp	.+6      	; 0x1d88 <moveAway+0xec>
    1d82:	30 95       	com	r19
    1d84:	21 95       	neg	r18
    1d86:	3f 4f       	sbci	r19, 0xFF	; 255
    1d88:	b9 01       	movw	r22, r18
    1d8a:	88 27       	eor	r24, r24
    1d8c:	77 fd       	sbrc	r23, 7
    1d8e:	80 95       	com	r24
    1d90:	98 2f       	mov	r25, r24
    1d92:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__floatsisf>
    1d96:	6b 01       	movw	r12, r22
    1d98:	7c 01       	movw	r14, r24
    1d9a:	ad b7       	in	r26, 0x3d	; 61
    1d9c:	be b7       	in	r27, 0x3e	; 62
    1d9e:	19 97       	sbiw	r26, 0x09	; 9
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	be bf       	out	0x3e, r27	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	ad bf       	out	0x3d, r26	; 61
    1daa:	0d b7       	in	r16, 0x3d	; 61
    1dac:	1e b7       	in	r17, 0x3e	; 62
    1dae:	0f 5f       	subi	r16, 0xFF	; 255
    1db0:	1f 4f       	sbci	r17, 0xFF	; 255
    1db2:	a2 01       	movw	r20, r4
    1db4:	91 01       	movw	r18, r2
    1db6:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    1dba:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1dbe:	4b 01       	movw	r8, r22
    1dc0:	5c 01       	movw	r10, r24
    1dc2:	82 e3       	ldi	r24, 0x32	; 50
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	f8 01       	movw	r30, r16
    1dc8:	91 83       	std	Z+1, r25	; 0x01
    1dca:	80 83       	st	Z, r24
    1dcc:	c7 01       	movw	r24, r14
    1dce:	b6 01       	movw	r22, r12
    1dd0:	a2 01       	movw	r20, r4
    1dd2:	91 01       	movw	r18, r2
    1dd4:	0e 94 a0 29 	call	0x5340	; 0x5340 <__subsf3>
    1dd8:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    1ddc:	d8 01       	movw	r26, r16
    1dde:	13 96       	adiw	r26, 0x03	; 3
    1de0:	7c 93       	st	X, r23
    1de2:	6e 93       	st	-X, r22
    1de4:	12 97       	sbiw	r26, 0x02	; 2
    1de6:	82 ec       	ldi	r24, 0xC2	; 194
    1de8:	91 e0       	ldi	r25, 0x01	; 1
    1dea:	15 96       	adiw	r26, 0x05	; 5
    1dec:	9c 93       	st	X, r25
    1dee:	8e 93       	st	-X, r24
    1df0:	14 97       	sbiw	r26, 0x04	; 4
    1df2:	16 96       	adiw	r26, 0x06	; 6
    1df4:	1c 92       	st	X, r1
    1df6:	16 97       	sbiw	r26, 0x06	; 6
    1df8:	18 96       	adiw	r26, 0x08	; 8
    1dfa:	1c 92       	st	X, r1
    1dfc:	1e 92       	st	-X, r1
    1dfe:	17 97       	sbiw	r26, 0x07	; 7
    1e00:	81 e0       	ldi	r24, 0x01	; 1
    1e02:	62 e0       	ldi	r22, 0x02	; 2
    1e04:	47 2d       	mov	r20, r7
    1e06:	22 e3       	ldi	r18, 0x32	; 50
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	84 01       	movw	r16, r8
    1e0c:	72 ec       	ldi	r23, 0xC2	; 194
    1e0e:	e7 2e       	mov	r14, r23
    1e10:	71 e0       	ldi	r23, 0x01	; 1
    1e12:	f7 2e       	mov	r15, r23
    1e14:	cc 24       	eor	r12, r12
    1e16:	aa 24       	eor	r10, r10
    1e18:	bb 24       	eor	r11, r11
    1e1a:	87 2c       	mov	r8, r7
    1e1c:	82 c0       	rjmp	.+260    	; 0x1f22 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
    1e1e:	c8 01       	movw	r24, r16
    1e20:	b7 01       	movw	r22, r14
    1e22:	20 e0       	ldi	r18, 0x00	; 0
    1e24:	30 e0       	ldi	r19, 0x00	; 0
    1e26:	40 e2       	ldi	r20, 0x20	; 32
    1e28:	51 e4       	ldi	r21, 0x41	; 65
    1e2a:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    1e2e:	88 23       	and	r24, r24
    1e30:	b4 f5       	brge	.+108    	; 0x1e9e <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1e32:	c2 01       	movw	r24, r4
    1e34:	b1 01       	movw	r22, r2
    1e36:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fixsfsi>
    1e3a:	8b 01       	movw	r16, r22
    1e3c:	77 ff       	sbrs	r23, 7
    1e3e:	03 c0       	rjmp	.+6      	; 0x1e46 <moveAway+0x1aa>
    1e40:	10 95       	com	r17
    1e42:	01 95       	neg	r16
    1e44:	1f 4f       	sbci	r17, 0xFF	; 255
    1e46:	2d b7       	in	r18, 0x3d	; 61
    1e48:	3e b7       	in	r19, 0x3e	; 62
    1e4a:	29 50       	subi	r18, 0x09	; 9
    1e4c:	30 40       	sbci	r19, 0x00	; 0
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	3e bf       	out	0x3e, r19	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	2d bf       	out	0x3d, r18	; 61
    1e58:	ed b7       	in	r30, 0x3d	; 61
    1e5a:	fe b7       	in	r31, 0x3e	; 62
    1e5c:	31 96       	adiw	r30, 0x01	; 1
    1e5e:	88 ec       	ldi	r24, 0xC8	; 200
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	ad b7       	in	r26, 0x3d	; 61
    1e64:	be b7       	in	r27, 0x3e	; 62
    1e66:	12 96       	adiw	r26, 0x02	; 2
    1e68:	9c 93       	st	X, r25
    1e6a:	8e 93       	st	-X, r24
    1e6c:	11 97       	sbiw	r26, 0x01	; 1
    1e6e:	13 83       	std	Z+3, r17	; 0x03
    1e70:	02 83       	std	Z+2, r16	; 0x02
    1e72:	82 ec       	ldi	r24, 0xC2	; 194
    1e74:	91 e0       	ldi	r25, 0x01	; 1
    1e76:	95 83       	std	Z+5, r25	; 0x05
    1e78:	84 83       	std	Z+4, r24	; 0x04
    1e7a:	16 82       	std	Z+6, r1	; 0x06
    1e7c:	10 86       	std	Z+8, r1	; 0x08
    1e7e:	17 82       	std	Z+7, r1	; 0x07
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	62 e0       	ldi	r22, 0x02	; 2
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	28 ec       	ldi	r18, 0xC8	; 200
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	52 ec       	ldi	r21, 0xC2	; 194
    1e8c:	e5 2e       	mov	r14, r21
    1e8e:	51 e0       	ldi	r21, 0x01	; 1
    1e90:	f5 2e       	mov	r15, r21
    1e92:	cc 24       	eor	r12, r12
    1e94:	aa 24       	eor	r10, r10
    1e96:	bb 24       	eor	r11, r11
    1e98:	88 24       	eor	r8, r8
    1e9a:	83 94       	inc	r8
    1e9c:	42 c0       	rjmp	.+132    	; 0x1f22 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
    1e9e:	69 81       	ldd	r22, Y+1	; 0x01
    1ea0:	7a 81       	ldd	r23, Y+2	; 0x02
    1ea2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ea6:	20 e0       	ldi	r18, 0x00	; 0
    1ea8:	30 e0       	ldi	r19, 0x00	; 0
    1eaa:	40 e2       	ldi	r20, 0x20	; 32
    1eac:	51 e4       	ldi	r21, 0x41	; 65
    1eae:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    1eb2:	87 fd       	sbrc	r24, 7
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <moveAway+0x21e>
    1eb6:	80 e0       	ldi	r24, 0x00	; 0
    1eb8:	3f c0       	rjmp	.+126    	; 0x1f38 <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1eba:	c2 01       	movw	r24, r4
    1ebc:	b1 01       	movw	r22, r2
    1ebe:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fixsfsi>
    1ec2:	8b 01       	movw	r16, r22
    1ec4:	77 ff       	sbrs	r23, 7
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <moveAway+0x232>
    1ec8:	10 95       	com	r17
    1eca:	01 95       	neg	r16
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	2d b7       	in	r18, 0x3d	; 61
    1ed0:	3e b7       	in	r19, 0x3e	; 62
    1ed2:	29 50       	subi	r18, 0x09	; 9
    1ed4:	30 40       	sbci	r19, 0x00	; 0
    1ed6:	0f b6       	in	r0, 0x3f	; 63
    1ed8:	f8 94       	cli
    1eda:	3e bf       	out	0x3e, r19	; 62
    1edc:	0f be       	out	0x3f, r0	; 63
    1ede:	2d bf       	out	0x3d, r18	; 61
    1ee0:	ed b7       	in	r30, 0x3d	; 61
    1ee2:	fe b7       	in	r31, 0x3e	; 62
    1ee4:	31 96       	adiw	r30, 0x01	; 1
    1ee6:	88 ec       	ldi	r24, 0xC8	; 200
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	ad b7       	in	r26, 0x3d	; 61
    1eec:	be b7       	in	r27, 0x3e	; 62
    1eee:	12 96       	adiw	r26, 0x02	; 2
    1ef0:	9c 93       	st	X, r25
    1ef2:	8e 93       	st	-X, r24
    1ef4:	11 97       	sbiw	r26, 0x01	; 1
    1ef6:	13 83       	std	Z+3, r17	; 0x03
    1ef8:	02 83       	std	Z+2, r16	; 0x02
    1efa:	82 ec       	ldi	r24, 0xC2	; 194
    1efc:	91 e0       	ldi	r25, 0x01	; 1
    1efe:	95 83       	std	Z+5, r25	; 0x05
    1f00:	84 83       	std	Z+4, r24	; 0x04
    1f02:	16 82       	std	Z+6, r1	; 0x06
    1f04:	10 86       	std	Z+8, r1	; 0x08
    1f06:	17 82       	std	Z+7, r1	; 0x07
    1f08:	81 e0       	ldi	r24, 0x01	; 1
    1f0a:	62 e0       	ldi	r22, 0x02	; 2
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	28 ec       	ldi	r18, 0xC8	; 200
    1f10:	30 e0       	ldi	r19, 0x00	; 0
    1f12:	92 ec       	ldi	r25, 0xC2	; 194
    1f14:	e9 2e       	mov	r14, r25
    1f16:	91 e0       	ldi	r25, 0x01	; 1
    1f18:	f9 2e       	mov	r15, r25
    1f1a:	cc 24       	eor	r12, r12
    1f1c:	aa 24       	eor	r10, r10
    1f1e:	bb 24       	eor	r11, r11
    1f20:	88 24       	eor	r8, r8
    1f22:	0e 94 ca 19 	call	0x3394	; 0x3394 <STEPPER_move>
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	ed b7       	in	r30, 0x3d	; 61
    1f2a:	fe b7       	in	r31, 0x3e	; 62
    1f2c:	39 96       	adiw	r30, 0x09	; 9
    1f2e:	0f b6       	in	r0, 0x3f	; 63
    1f30:	f8 94       	cli
    1f32:	fe bf       	out	0x3e, r31	; 62
    1f34:	0f be       	out	0x3f, r0	; 63
    1f36:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	df 90       	pop	r13
    1f4e:	cf 90       	pop	r12
    1f50:	bf 90       	pop	r11
    1f52:	af 90       	pop	r10
    1f54:	9f 90       	pop	r9
    1f56:	8f 90       	pop	r8
    1f58:	7f 90       	pop	r7
    1f5a:	6f 90       	pop	r6
    1f5c:	5f 90       	pop	r5
    1f5e:	4f 90       	pop	r4
    1f60:	3f 90       	pop	r3
    1f62:	2f 90       	pop	r2
    1f64:	08 95       	ret

00001f66 <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    1f66:	2f 92       	push	r2
    1f68:	3f 92       	push	r3
    1f6a:	4f 92       	push	r4
    1f6c:	5f 92       	push	r5
    1f6e:	6f 92       	push	r6
    1f70:	7f 92       	push	r7
    1f72:	8f 92       	push	r8
    1f74:	9f 92       	push	r9
    1f76:	af 92       	push	r10
    1f78:	bf 92       	push	r11
    1f7a:	cf 92       	push	r12
    1f7c:	df 92       	push	r13
    1f7e:	ef 92       	push	r14
    1f80:	ff 92       	push	r15
    1f82:	0f 93       	push	r16
    1f84:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    1f86:	e0 90 c0 03 	lds	r14, 0x03C0
    1f8a:	f0 90 c1 03 	lds	r15, 0x03C1
    1f8e:	00 91 c2 03 	lds	r16, 0x03C2
    1f92:	10 91 c3 03 	lds	r17, 0x03C3
    1f96:	33 24       	eor	r3, r3
    1f98:	c8 01       	movw	r24, r16
    1f9a:	b7 01       	movw	r22, r14
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 e0       	ldi	r20, 0x00	; 0
    1fa2:	50 e0       	ldi	r21, 0x00	; 0
    1fa4:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    1fa8:	88 23       	and	r24, r24
    1faa:	14 f4       	brge	.+4      	; 0x1fb0 <moveWall+0x4a>
    1fac:	33 24       	eor	r3, r3
    1fae:	33 94       	inc	r3
    1fb0:	a0 90 bc 03 	lds	r10, 0x03BC
    1fb4:	b0 90 bd 03 	lds	r11, 0x03BD
    1fb8:	c0 90 be 03 	lds	r12, 0x03BE
    1fbc:	d0 90 bf 03 	lds	r13, 0x03BF
    1fc0:	40 90 b8 03 	lds	r4, 0x03B8
    1fc4:	50 90 b9 03 	lds	r5, 0x03B9
    1fc8:	60 90 ba 03 	lds	r6, 0x03BA
    1fcc:	70 90 bb 03 	lds	r7, 0x03BB
    1fd0:	88 24       	eor	r8, r8
    1fd2:	60 91 c4 03 	lds	r22, 0x03C4
    1fd6:	70 91 c5 03 	lds	r23, 0x03C5
    1fda:	80 91 c6 03 	lds	r24, 0x03C6
    1fde:	90 91 c7 03 	lds	r25, 0x03C7
    1fe2:	20 e0       	ldi	r18, 0x00	; 0
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	40 e7       	ldi	r20, 0x70	; 112
    1fe8:	51 e4       	ldi	r21, 0x41	; 65
    1fea:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    1fee:	88 23       	and	r24, r24
    1ff0:	14 f4       	brge	.+4      	; 0x1ff6 <moveWall+0x90>
    1ff2:	88 24       	eor	r8, r8
    1ff4:	83 94       	inc	r8
    1ff6:	93 2c       	mov	r9, r3
    1ff8:	98 28       	or	r9, r8
    1ffa:	88 24       	eor	r8, r8
    1ffc:	c6 01       	movw	r24, r12
    1ffe:	b5 01       	movw	r22, r10
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e2       	ldi	r20, 0x20	; 32
    2006:	51 e4       	ldi	r21, 0x41	; 65
    2008:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    200c:	88 23       	and	r24, r24
    200e:	14 f4       	brge	.+4      	; 0x2014 <moveWall+0xae>
    2010:	88 24       	eor	r8, r8
    2012:	83 94       	inc	r8
    2014:	98 28       	or	r9, r8
    2016:	88 24       	eor	r8, r8
    2018:	c3 01       	movw	r24, r6
    201a:	b2 01       	movw	r22, r4
    201c:	20 e0       	ldi	r18, 0x00	; 0
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	40 e2       	ldi	r20, 0x20	; 32
    2022:	51 e4       	ldi	r21, 0x41	; 65
    2024:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    2028:	88 23       	and	r24, r24
    202a:	14 f4       	brge	.+4      	; 0x2030 <moveWall+0xca>
    202c:	88 24       	eor	r8, r8
    202e:	83 94       	inc	r8
    2030:	29 2c       	mov	r2, r9
    2032:	28 28       	or	r2, r8
	if(!isWall){	
    2034:	81 f4       	brne	.+32     	; 0x2056 <moveWall+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	70 e0       	ldi	r23, 0x00	; 0
    203a:	80 e0       	ldi	r24, 0x00	; 0
    203c:	9f e4       	ldi	r25, 0x4F	; 79
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	79 01       	movw	r14, r18
    2048:	8a 01       	movw	r16, r20
    204a:	59 01       	movw	r10, r18
    204c:	6a 01       	movw	r12, r20
    204e:	88 24       	eor	r8, r8
    2050:	0e 94 ee 08 	call	0x11dc	; 0x11dc <move_arc_stnb>
    2054:	f7 c0       	rjmp	.+494    	; 0x2244 <moveWall+0x2de>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2056:	c6 01       	movw	r24, r12
    2058:	b5 01       	movw	r22, r10
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	40 e2       	ldi	r20, 0x20	; 32
    2060:	51 e4       	ldi	r21, 0x41	; 65
    2062:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__gesf2>
    2066:	18 16       	cp	r1, r24
    2068:	64 f4       	brge	.+24     	; 0x2082 <moveWall+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e0       	ldi	r26, 0x00	; 0
    2070:	b1 ec       	ldi	r27, 0xC1	; 193
    2072:	80 93 bc 03 	sts	0x03BC, r24
    2076:	90 93 bd 03 	sts	0x03BD, r25
    207a:	a0 93 be 03 	sts	0x03BE, r26
    207e:	b0 93 bf 03 	sts	0x03BF, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    2082:	c3 01       	movw	r24, r6
    2084:	b2 01       	movw	r22, r4
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e2       	ldi	r20, 0x20	; 32
    208c:	51 e4       	ldi	r21, 0x41	; 65
    208e:	0e 94 54 2b 	call	0x56a8	; 0x56a8 <__gesf2>
    2092:	18 16       	cp	r1, r24
    2094:	14 f0       	brlt	.+4      	; 0x209a <moveWall+0x134>
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	0d c0       	rjmp	.+26     	; 0x20b4 <moveWall+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	90 e0       	ldi	r25, 0x00	; 0
    209e:	a0 e0       	ldi	r26, 0x00	; 0
    20a0:	b1 ec       	ldi	r27, 0xC1	; 193
    20a2:	80 93 b8 03 	sts	0x03B8, r24
    20a6:	90 93 b9 03 	sts	0x03B9, r25
    20aa:	a0 93 ba 03 	sts	0x03BA, r26
    20ae:	b0 93 bb 03 	sts	0x03BB, r27
    20b2:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    20b4:	33 20       	and	r3, r3
    20b6:	21 f1       	breq	.+72     	; 0x2100 <moveWall+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    20b8:	88 23       	and	r24, r24
    20ba:	29 f0       	breq	.+10     	; 0x20c6 <moveWall+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    20bc:	60 e0       	ldi	r22, 0x00	; 0
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	8a e7       	ldi	r24, 0x7A	; 122
    20c2:	94 e4       	ldi	r25, 0x44	; 68
    20c4:	04 c0       	rjmp	.+8      	; 0x20ce <moveWall+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    20c6:	60 e0       	ldi	r22, 0x00	; 0
    20c8:	70 e0       	ldi	r23, 0x00	; 0
    20ca:	8a e7       	ldi	r24, 0x7A	; 122
    20cc:	94 ec       	ldi	r25, 0xC4	; 196
    20ce:	a8 01       	movw	r20, r16
    20d0:	97 01       	movw	r18, r14
    20d2:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    20d6:	20 91 b8 03 	lds	r18, 0x03B8
    20da:	30 91 b9 03 	lds	r19, 0x03B9
    20de:	40 91 ba 03 	lds	r20, 0x03BA
    20e2:	50 91 bb 03 	lds	r21, 0x03BB
    20e6:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    20ea:	9b 01       	movw	r18, r22
    20ec:	ac 01       	movw	r20, r24
    20ee:	60 91 bc 03 	lds	r22, 0x03BC
    20f2:	70 91 bd 03 	lds	r23, 0x03BD
    20f6:	80 91 be 03 	lds	r24, 0x03BE
    20fa:	90 91 bf 03 	lds	r25, 0x03BF
    20fe:	10 c0       	rjmp	.+32     	; 0x2120 <moveWall+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2100:	60 91 bc 03 	lds	r22, 0x03BC
    2104:	70 91 bd 03 	lds	r23, 0x03BD
    2108:	80 91 be 03 	lds	r24, 0x03BE
    210c:	90 91 bf 03 	lds	r25, 0x03BF
    2110:	20 91 b8 03 	lds	r18, 0x03B8
    2114:	30 91 b9 03 	lds	r19, 0x03B9
    2118:	40 91 ba 03 	lds	r20, 0x03BA
    211c:	50 91 bb 03 	lds	r21, 0x03BB
    2120:	0e 94 a0 29 	call	0x5340	; 0x5340 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2124:	90 58       	subi	r25, 0x80	; 128
    2126:	40 e0       	ldi	r20, 0x00	; 0
    2128:	0e 94 17 08 	call	0x102e	; 0x102e <pidController>
    212c:	6b 01       	movw	r12, r22
    212e:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2130:	0e 94 71 2a 	call	0x54e2	; 0x54e2 <__fixsfsi>
    2134:	8b 01       	movw	r16, r22
    2136:	77 ff       	sbrs	r23, 7
    2138:	03 c0       	rjmp	.+6      	; 0x2140 <moveWall+0x1da>
    213a:	10 95       	com	r17
    213c:	01 95       	neg	r16
    213e:	1f 4f       	sbci	r17, 0xFF	; 255
    2140:	05 36       	cpi	r16, 0x65	; 101
    2142:	11 05       	cpc	r17, r1
    2144:	fc f0       	brlt	.+62     	; 0x2184 <moveWall+0x21e>
    2146:	c7 01       	movw	r24, r14
    2148:	b6 01       	movw	r22, r12
    214a:	20 e0       	ldi	r18, 0x00	; 0
    214c:	30 e0       	ldi	r19, 0x00	; 0
    214e:	40 e0       	ldi	r20, 0x00	; 0
    2150:	50 e0       	ldi	r21, 0x00	; 0
    2152:	0e 94 05 2a 	call	0x540a	; 0x540a <__cmpsf2>
    2156:	88 23       	and	r24, r24
    2158:	a9 f0       	breq	.+42     	; 0x2184 <moveWall+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    215a:	b8 01       	movw	r22, r16
    215c:	88 27       	eor	r24, r24
    215e:	77 fd       	sbrc	r23, 7
    2160:	80 95       	com	r24
    2162:	98 2f       	mov	r25, r24
    2164:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__floatsisf>
    2168:	9b 01       	movw	r18, r22
    216a:	ac 01       	movw	r20, r24
    216c:	c7 01       	movw	r24, r14
    216e:	b6 01       	movw	r22, r12
    2170:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	48 ec       	ldi	r20, 0xC8	; 200
    217a:	52 e4       	ldi	r21, 0x42	; 66
    217c:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    2180:	6b 01       	movw	r12, r22
    2182:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2184:	c7 01       	movw	r24, r14
    2186:	b6 01       	movw	r22, r12
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	48 ec       	ldi	r20, 0xC8	; 200
    218e:	52 e4       	ldi	r21, 0x42	; 66
    2190:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    2194:	6b 01       	movw	r12, r22
    2196:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    2198:	8d b7       	in	r24, 0x3d	; 61
    219a:	9e b7       	in	r25, 0x3e	; 62
    219c:	09 97       	sbiw	r24, 0x09	; 9
    219e:	0f b6       	in	r0, 0x3f	; 63
    21a0:	f8 94       	cli
    21a2:	9e bf       	out	0x3e, r25	; 62
    21a4:	0f be       	out	0x3f, r0	; 63
    21a6:	8d bf       	out	0x3d, r24	; 61
    21a8:	0d b7       	in	r16, 0x3d	; 61
    21aa:	1e b7       	in	r17, 0x3e	; 62
    21ac:	0f 5f       	subi	r16, 0xFF	; 255
    21ae:	1f 4f       	sbci	r17, 0xFF	; 255
    21b0:	c7 01       	movw	r24, r14
    21b2:	b6 01       	movw	r22, r12
    21b4:	20 e0       	ldi	r18, 0x00	; 0
    21b6:	30 e0       	ldi	r19, 0x00	; 0
    21b8:	48 ec       	ldi	r20, 0xC8	; 200
    21ba:	52 e4       	ldi	r21, 0x42	; 66
    21bc:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    21c0:	20 e0       	ldi	r18, 0x00	; 0
    21c2:	30 e0       	ldi	r19, 0x00	; 0
    21c4:	48 ec       	ldi	r20, 0xC8	; 200
    21c6:	52 e4       	ldi	r21, 0x42	; 66
    21c8:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    21cc:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    21d0:	4b 01       	movw	r8, r22
    21d2:	5c 01       	movw	r10, r24
    21d4:	82 e3       	ldi	r24, 0x32	; 50
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	f8 01       	movw	r30, r16
    21da:	91 83       	std	Z+1, r25	; 0x01
    21dc:	80 83       	st	Z, r24
    21de:	c7 01       	movw	r24, r14
    21e0:	b6 01       	movw	r22, r12
    21e2:	20 e0       	ldi	r18, 0x00	; 0
    21e4:	30 e0       	ldi	r19, 0x00	; 0
    21e6:	48 ec       	ldi	r20, 0xC8	; 200
    21e8:	52 ec       	ldi	r21, 0xC2	; 194
    21ea:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    21ee:	20 e0       	ldi	r18, 0x00	; 0
    21f0:	30 e0       	ldi	r19, 0x00	; 0
    21f2:	48 ec       	ldi	r20, 0xC8	; 200
    21f4:	52 e4       	ldi	r21, 0x42	; 66
    21f6:	0e 94 a1 29 	call	0x5342	; 0x5342 <__addsf3>
    21fa:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    21fe:	f8 01       	movw	r30, r16
    2200:	73 83       	std	Z+3, r23	; 0x03
    2202:	62 83       	std	Z+2, r22	; 0x02
    2204:	82 ec       	ldi	r24, 0xC2	; 194
    2206:	91 e0       	ldi	r25, 0x01	; 1
    2208:	95 83       	std	Z+5, r25	; 0x05
    220a:	84 83       	std	Z+4, r24	; 0x04
    220c:	16 82       	std	Z+6, r1	; 0x06
    220e:	10 86       	std	Z+8, r1	; 0x08
    2210:	17 82       	std	Z+7, r1	; 0x07
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	62 e0       	ldi	r22, 0x02	; 2
    2216:	41 e0       	ldi	r20, 0x01	; 1
    2218:	22 e3       	ldi	r18, 0x32	; 50
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	84 01       	movw	r16, r8
    221e:	e2 ec       	ldi	r30, 0xC2	; 194
    2220:	ee 2e       	mov	r14, r30
    2222:	e1 e0       	ldi	r30, 0x01	; 1
    2224:	fe 2e       	mov	r15, r30
    2226:	cc 24       	eor	r12, r12
    2228:	aa 24       	eor	r10, r10
    222a:	bb 24       	eor	r11, r11
    222c:	88 24       	eor	r8, r8
    222e:	83 94       	inc	r8
    2230:	0e 94 ca 19 	call	0x3394	; 0x3394 <STEPPER_move>
    2234:	8d b7       	in	r24, 0x3d	; 61
    2236:	9e b7       	in	r25, 0x3e	; 62
    2238:	09 96       	adiw	r24, 0x09	; 9
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	9e bf       	out	0x3e, r25	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    2244:	82 2d       	mov	r24, r2
    2246:	1f 91       	pop	r17
    2248:	0f 91       	pop	r16
    224a:	ff 90       	pop	r15
    224c:	ef 90       	pop	r14
    224e:	df 90       	pop	r13
    2250:	cf 90       	pop	r12
    2252:	bf 90       	pop	r11
    2254:	af 90       	pop	r10
    2256:	9f 90       	pop	r9
    2258:	8f 90       	pop	r8
    225a:	7f 90       	pop	r7
    225c:	6f 90       	pop	r6
    225e:	5f 90       	pop	r5
    2260:	4f 90       	pop	r4
    2262:	3f 90       	pop	r3
    2264:	2f 90       	pop	r2
    2266:	08 95       	ret

00002268 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{
	unsigned char sensors = ATTINY_get_sensors();
    2268:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    226c:	28 2f       	mov	r18, r24
    226e:	21 70       	andi	r18, 0x01	; 1
    2270:	20 93 c9 05 	sts	0x05C9, r18
	leftContact =  (0b00000010 & sensors)>>1;
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	82 70       	andi	r24, 0x02	; 2
    2278:	90 70       	andi	r25, 0x00	; 0
    227a:	95 95       	asr	r25
    227c:	87 95       	ror	r24
    227e:	80 93 ca 05 	sts	0x05CA, r24
	
	
}
    2282:	08 95       	ret

00002284 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    2284:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    2288:	60 93 c8 03 	sts	0x03C8, r22
    228c:	70 93 c9 03 	sts	0x03C9, r23
    2290:	80 93 ca 03 	sts	0x03CA, r24
    2294:	90 93 cb 03 	sts	0x03CB, r25
	leftLightVolt = getLeftLight();
    2298:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    229c:	60 93 cc 03 	sts	0x03CC, r22
    22a0:	70 93 cd 03 	sts	0x03CD, r23
    22a4:	80 93 ce 03 	sts	0x03CE, r24
    22a8:	90 93 cf 03 	sts	0x03CF, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    22ac:	08 95       	ret

000022ae <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    22ae:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    22b2:	60 93 c0 03 	sts	0x03C0, r22
    22b6:	70 93 c1 03 	sts	0x03C1, r23
    22ba:	80 93 c2 03 	sts	0x03C2, r24
    22be:	90 93 c3 03 	sts	0x03C3, r25
	bkIR = getBackIR();
    22c2:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    22c6:	60 93 c4 03 	sts	0x03C4, r22
    22ca:	70 93 c5 03 	sts	0x03C5, r23
    22ce:	80 93 c6 03 	sts	0x03C6, r24
    22d2:	90 93 c7 03 	sts	0x03C7, r25
	ltIR = getLeftIR();
    22d6:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    22da:	60 93 b8 03 	sts	0x03B8, r22
    22de:	70 93 b9 03 	sts	0x03B9, r23
    22e2:	80 93 ba 03 	sts	0x03BA, r24
    22e6:	90 93 bb 03 	sts	0x03BB, r25
	rtIR = getRightIR();
    22ea:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    22ee:	60 93 bc 03 	sts	0x03BC, r22
    22f2:	70 93 bd 03 	sts	0x03BD, r23
    22f6:	80 93 be 03 	sts	0x03BE, r24
    22fa:	90 93 bf 03 	sts	0x03BF, r25
}
    22fe:	08 95       	ret

00002300 <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    2300:	8f 92       	push	r8
    2302:	af 92       	push	r10
    2304:	bf 92       	push	r11
    2306:	cf 92       	push	r12
    2308:	df 92       	push	r13
    230a:	ef 92       	push	r14
    230c:	ff 92       	push	r15
    230e:	0f 93       	push	r16
    2310:	1f 93       	push	r17
    2312:	cf 93       	push	r28
    2314:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    2316:	0e 94 02 19 	call	0x3204	; 0x3204 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    231a:	67 2b       	or	r22, r23
    231c:	09 f0       	breq	.+2      	; 0x2320 <moveWander+0x20>
    231e:	76 c0       	rjmp	.+236    	; 0x240c <moveWander+0x10c>
    2320:	89 2b       	or	r24, r25
    2322:	09 f0       	breq	.+2      	; 0x2326 <moveWander+0x26>
    2324:	73 c0       	rjmp	.+230    	; 0x240c <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    2326:	0e 94 b0 32 	call	0x6560	; 0x6560 <rand>
    232a:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    232c:	0e 94 b0 32 	call	0x6560	; 0x6560 <rand>
    2330:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    2332:	0e 94 b0 32 	call	0x6560	; 0x6560 <rand>
    2336:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    2338:	0e 94 b0 32 	call	0x6560	; 0x6560 <rand>
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	6a e0       	ldi	r22, 0x0A	; 10
    2340:	70 e0       	ldi	r23, 0x00	; 0
    2342:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__divmodhi4>
    2346:	08 97       	sbiw	r24, 0x08	; 8
    2348:	0c f0       	brlt	.+2      	; 0x234c <moveWander+0x4c>
    234a:	21 e0       	ldi	r18, 0x01	; 1
    234c:	82 2e       	mov	r8, r18
    234e:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    2350:	c8 01       	movw	r24, r16
    2352:	60 e9       	ldi	r22, 0x90	; 144
    2354:	71 e0       	ldi	r23, 0x01	; 1
    2356:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__divmodhi4>
    235a:	b0 e9       	ldi	r27, 0x90	; 144
    235c:	ab 2e       	mov	r10, r27
    235e:	b1 e0       	ldi	r27, 0x01	; 1
    2360:	bb 2e       	mov	r11, r27
    2362:	a8 0e       	add	r10, r24
    2364:	b9 1e       	adc	r11, r25
    2366:	8d b7       	in	r24, 0x3d	; 61
    2368:	9e b7       	in	r25, 0x3e	; 62
    236a:	09 97       	sbiw	r24, 0x09	; 9
    236c:	0f b6       	in	r0, 0x3f	; 63
    236e:	f8 94       	cli
    2370:	9e bf       	out	0x3e, r25	; 62
    2372:	0f be       	out	0x3f, r0	; 63
    2374:	8d bf       	out	0x3d, r24	; 61
    2376:	0d b7       	in	r16, 0x3d	; 61
    2378:	1e b7       	in	r17, 0x3e	; 62
    237a:	0f 5f       	subi	r16, 0xFF	; 255
    237c:	1f 4f       	sbci	r17, 0xFF	; 255
    237e:	c7 01       	movw	r24, r14
    2380:	68 ec       	ldi	r22, 0xC8	; 200
    2382:	70 e0       	ldi	r23, 0x00	; 0
    2384:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__divmodhi4>
    2388:	88 53       	subi	r24, 0x38	; 56
    238a:	9f 4f       	sbci	r25, 0xFF	; 255
    238c:	aa 27       	eor	r26, r26
    238e:	97 fd       	sbrc	r25, 7
    2390:	a0 95       	com	r26
    2392:	ba 2f       	mov	r27, r26
    2394:	bc 01       	movw	r22, r24
    2396:	cd 01       	movw	r24, r26
    2398:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__floatsisf>
    239c:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    23a0:	6b 01       	movw	r12, r22
    23a2:	7c 01       	movw	r14, r24
    23a4:	f8 01       	movw	r30, r16
    23a6:	b1 82       	std	Z+1, r11	; 0x01
    23a8:	a0 82       	st	Z, r10
    23aa:	ce 01       	movw	r24, r28
    23ac:	68 ec       	ldi	r22, 0xC8	; 200
    23ae:	70 e0       	ldi	r23, 0x00	; 0
    23b0:	0e 94 e1 30 	call	0x61c2	; 0x61c2 <__divmodhi4>
    23b4:	88 53       	subi	r24, 0x38	; 56
    23b6:	9f 4f       	sbci	r25, 0xFF	; 255
    23b8:	aa 27       	eor	r26, r26
    23ba:	97 fd       	sbrc	r25, 7
    23bc:	a0 95       	com	r26
    23be:	ba 2f       	mov	r27, r26
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 a4 2a 	call	0x5548	; 0x5548 <__floatsisf>
    23c8:	0e 94 76 2a 	call	0x54ec	; 0x54ec <__fixunssfsi>
    23cc:	f8 01       	movw	r30, r16
    23ce:	73 83       	std	Z+3, r23	; 0x03
    23d0:	62 83       	std	Z+2, r22	; 0x02
    23d2:	82 ec       	ldi	r24, 0xC2	; 194
    23d4:	91 e0       	ldi	r25, 0x01	; 1
    23d6:	95 83       	std	Z+5, r25	; 0x05
    23d8:	84 83       	std	Z+4, r24	; 0x04
    23da:	16 82       	std	Z+6, r1	; 0x06
    23dc:	10 86       	std	Z+8, r1	; 0x08
    23de:	17 82       	std	Z+7, r1	; 0x07
    23e0:	81 e0       	ldi	r24, 0x01	; 1
    23e2:	62 e0       	ldi	r22, 0x02	; 2
    23e4:	48 2d       	mov	r20, r8
    23e6:	95 01       	movw	r18, r10
    23e8:	86 01       	movw	r16, r12
    23ea:	a2 ec       	ldi	r26, 0xC2	; 194
    23ec:	ea 2e       	mov	r14, r26
    23ee:	a1 e0       	ldi	r26, 0x01	; 1
    23f0:	fa 2e       	mov	r15, r26
    23f2:	cc 24       	eor	r12, r12
    23f4:	aa 24       	eor	r10, r10
    23f6:	bb 24       	eor	r11, r11
    23f8:	0e 94 ca 19 	call	0x3394	; 0x3394 <STEPPER_move>
    23fc:	8d b7       	in	r24, 0x3d	; 61
    23fe:	9e b7       	in	r25, 0x3e	; 62
    2400:	09 96       	adiw	r24, 0x09	; 9
    2402:	0f b6       	in	r0, 0x3f	; 63
    2404:	f8 94       	cli
    2406:	9e bf       	out	0x3e, r25	; 62
    2408:	0f be       	out	0x3f, r0	; 63
    240a:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    240c:	81 e0       	ldi	r24, 0x01	; 1
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
    2414:	0f 91       	pop	r16
    2416:	ff 90       	pop	r15
    2418:	ef 90       	pop	r14
    241a:	df 90       	pop	r13
    241c:	cf 90       	pop	r12
    241e:	bf 90       	pop	r11
    2420:	af 90       	pop	r10
    2422:	8f 90       	pop	r8
    2424:	08 95       	ret

00002426 <moveMetric>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveMetric( void )
{	
    2426:	8f 92       	push	r8
    2428:	af 92       	push	r10
    242a:	bf 92       	push	r11
    242c:	cf 92       	push	r12
    242e:	df 92       	push	r13
    2430:	ef 92       	push	r14
    2432:	ff 92       	push	r15
    2434:	0f 93       	push	r16
    2436:	1f 93       	push	r17
	LCD_clear();
    2438:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    243c:	80 91 d3 03 	lds	r24, 0x03D3
    2440:	28 2f       	mov	r18, r24
    2442:	30 e0       	ldi	r19, 0x00	; 0
    2444:	f9 01       	movw	r30, r18
    2446:	eb 5b       	subi	r30, 0xBB	; 187
    2448:	fa 4f       	sbci	r31, 0xFA	; 250
    244a:	e0 81       	ld	r30, Z
    244c:	e0 93 d1 03 	sts	0x03D1, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	switch(currentMove){
    2450:	e2 30       	cpi	r30, 0x02	; 2
    2452:	b1 f1       	breq	.+108    	; 0x24c0 <moveMetric+0x9a>
    2454:	e3 30       	cpi	r30, 0x03	; 3
    2456:	09 f4       	brne	.+2      	; 0x245a <moveMetric+0x34>
    2458:	63 c0       	rjmp	.+198    	; 0x2520 <moveMetric+0xfa>
    245a:	e1 30       	cpi	r30, 0x01	; 1
    245c:	09 f0       	breq	.+2      	; 0x2460 <moveMetric+0x3a>
    245e:	b2 c0       	rjmp	.+356    	; 0x25c4 <moveMetric+0x19e>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2460:	8d b7       	in	r24, 0x3d	; 61
    2462:	9e b7       	in	r25, 0x3e	; 62
    2464:	08 97       	sbiw	r24, 0x08	; 8
    2466:	0f b6       	in	r0, 0x3f	; 63
    2468:	f8 94       	cli
    246a:	9e bf       	out	0x3e, r25	; 62
    246c:	0f be       	out	0x3f, r0	; 63
    246e:	8d bf       	out	0x3d, r24	; 61
    2470:	ed b7       	in	r30, 0x3d	; 61
    2472:	fe b7       	in	r31, 0x3e	; 62
    2474:	31 96       	adiw	r30, 0x01	; 1
    2476:	84 e2       	ldi	r24, 0x24	; 36
    2478:	91 e0       	ldi	r25, 0x01	; 1
    247a:	ad b7       	in	r26, 0x3d	; 61
    247c:	be b7       	in	r27, 0x3e	; 62
    247e:	12 96       	adiw	r26, 0x02	; 2
    2480:	9c 93       	st	X, r25
    2482:	8e 93       	st	-X, r24
    2484:	11 97       	sbiw	r26, 0x01	; 1
    2486:	33 83       	std	Z+3, r19	; 0x03
    2488:	22 83       	std	Z+2, r18	; 0x02
    248a:	80 91 d6 03 	lds	r24, 0x03D6
    248e:	84 83       	std	Z+4, r24	; 0x04
    2490:	15 82       	std	Z+5, r1	; 0x05
    2492:	80 91 d7 03 	lds	r24, 0x03D7
    2496:	86 83       	std	Z+6, r24	; 0x06
    2498:	17 82       	std	Z+7, r1	; 0x07
    249a:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    249e:	ed b7       	in	r30, 0x3d	; 61
    24a0:	fe b7       	in	r31, 0x3e	; 62
    24a2:	38 96       	adiw	r30, 0x08	; 8
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	fe bf       	out	0x3e, r31	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	ed bf       	out	0x3d, r30	; 61
    24ae:	60 e0       	ldi	r22, 0x00	; 0
    24b0:	70 e0       	ldi	r23, 0x00	; 0
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	44 e8       	ldi	r20, 0x84	; 132
    24bc:	51 ec       	ldi	r21, 0xC1	; 193
    24be:	5f c0       	rjmp	.+190    	; 0x257e <moveMetric+0x158>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    24c0:	8d b7       	in	r24, 0x3d	; 61
    24c2:	9e b7       	in	r25, 0x3e	; 62
    24c4:	08 97       	sbiw	r24, 0x08	; 8
    24c6:	0f b6       	in	r0, 0x3f	; 63
    24c8:	f8 94       	cli
    24ca:	9e bf       	out	0x3e, r25	; 62
    24cc:	0f be       	out	0x3f, r0	; 63
    24ce:	8d bf       	out	0x3d, r24	; 61
    24d0:	ed b7       	in	r30, 0x3d	; 61
    24d2:	fe b7       	in	r31, 0x3e	; 62
    24d4:	31 96       	adiw	r30, 0x01	; 1
    24d6:	8f e4       	ldi	r24, 0x4F	; 79
    24d8:	91 e0       	ldi	r25, 0x01	; 1
    24da:	ad b7       	in	r26, 0x3d	; 61
    24dc:	be b7       	in	r27, 0x3e	; 62
    24de:	12 96       	adiw	r26, 0x02	; 2
    24e0:	9c 93       	st	X, r25
    24e2:	8e 93       	st	-X, r24
    24e4:	11 97       	sbiw	r26, 0x01	; 1
    24e6:	33 83       	std	Z+3, r19	; 0x03
    24e8:	22 83       	std	Z+2, r18	; 0x02
    24ea:	80 91 d6 03 	lds	r24, 0x03D6
    24ee:	84 83       	std	Z+4, r24	; 0x04
    24f0:	15 82       	std	Z+5, r1	; 0x05
    24f2:	80 91 d7 03 	lds	r24, 0x03D7
    24f6:	86 83       	std	Z+6, r24	; 0x06
    24f8:	17 82       	std	Z+7, r1	; 0x07
    24fa:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(12/10), 10, 10, 0);
    24fe:	ed b7       	in	r30, 0x3d	; 61
    2500:	fe b7       	in	r31, 0x3e	; 62
    2502:	38 96       	adiw	r30, 0x08	; 8
    2504:	0f b6       	in	r0, 0x3f	; 63
    2506:	f8 94       	cli
    2508:	fe bf       	out	0x3e, r31	; 62
    250a:	0f be       	out	0x3f, r0	; 63
    250c:	ed bf       	out	0x3d, r30	; 61
    250e:	60 e0       	ldi	r22, 0x00	; 0
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	9f e4       	ldi	r25, 0x4F	; 79
    2516:	28 e4       	ldi	r18, 0x48	; 72
    2518:	31 ee       	ldi	r19, 0xE1	; 225
    251a:	46 e3       	ldi	r20, 0x36	; 54
    251c:	52 e4       	ldi	r21, 0x42	; 66
    251e:	2f c0       	rjmp	.+94     	; 0x257e <moveMetric+0x158>
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2520:	8d b7       	in	r24, 0x3d	; 61
    2522:	9e b7       	in	r25, 0x3e	; 62
    2524:	08 97       	sbiw	r24, 0x08	; 8
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	9e bf       	out	0x3e, r25	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	8d bf       	out	0x3d, r24	; 61
    2530:	ed b7       	in	r30, 0x3d	; 61
    2532:	fe b7       	in	r31, 0x3e	; 62
    2534:	31 96       	adiw	r30, 0x01	; 1
    2536:	8d e7       	ldi	r24, 0x7D	; 125
    2538:	91 e0       	ldi	r25, 0x01	; 1
    253a:	ad b7       	in	r26, 0x3d	; 61
    253c:	be b7       	in	r27, 0x3e	; 62
    253e:	12 96       	adiw	r26, 0x02	; 2
    2540:	9c 93       	st	X, r25
    2542:	8e 93       	st	-X, r24
    2544:	11 97       	sbiw	r26, 0x01	; 1
    2546:	33 83       	std	Z+3, r19	; 0x03
    2548:	22 83       	std	Z+2, r18	; 0x02
    254a:	80 91 d6 03 	lds	r24, 0x03D6
    254e:	84 83       	std	Z+4, r24	; 0x04
    2550:	15 82       	std	Z+5, r1	; 0x05
    2552:	80 91 d7 03 	lds	r24, 0x03D7
    2556:	86 83       	std	Z+6, r24	; 0x06
    2558:	17 82       	std	Z+7, r1	; 0x07
    255a:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    255e:	ed b7       	in	r30, 0x3d	; 61
    2560:	fe b7       	in	r31, 0x3e	; 62
    2562:	38 96       	adiw	r30, 0x08	; 8
    2564:	0f b6       	in	r0, 0x3f	; 63
    2566:	f8 94       	cli
    2568:	fe bf       	out	0x3e, r31	; 62
    256a:	0f be       	out	0x3f, r0	; 63
    256c:	ed bf       	out	0x3d, r30	; 61
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	70 e0       	ldi	r23, 0x00	; 0
    2572:	80 e0       	ldi	r24, 0x00	; 0
    2574:	90 e0       	ldi	r25, 0x00	; 0
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	44 e8       	ldi	r20, 0x84	; 132
    257c:	51 e4       	ldi	r21, 0x41	; 65
    257e:	0f 2e       	mov	r0, r31
    2580:	f0 e0       	ldi	r31, 0x00	; 0
    2582:	ef 2e       	mov	r14, r31
    2584:	f0 e0       	ldi	r31, 0x00	; 0
    2586:	ff 2e       	mov	r15, r31
    2588:	f0 e2       	ldi	r31, 0x20	; 32
    258a:	0f 2f       	mov	r16, r31
    258c:	f1 e4       	ldi	r31, 0x41	; 65
    258e:	1f 2f       	mov	r17, r31
    2590:	f0 2d       	mov	r31, r0
    2592:	57 01       	movw	r10, r14
    2594:	68 01       	movw	r12, r16
    2596:	88 24       	eor	r8, r8
    2598:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_arc_stwt>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    259c:	80 91 d1 03 	lds	r24, 0x03D1
    25a0:	80 93 d2 03 	sts	0x03D2, r24
	currentMoveWorld++;
    25a4:	80 91 d3 03 	lds	r24, 0x03D3
    25a8:	8f 5f       	subi	r24, 0xFF	; 255
    25aa:	80 93 d3 03 	sts	0x03D3, r24
	return 1;
}
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	1f 91       	pop	r17
    25b2:	0f 91       	pop	r16
    25b4:	ff 90       	pop	r15
    25b6:	ef 90       	pop	r14
    25b8:	df 90       	pop	r13
    25ba:	cf 90       	pop	r12
    25bc:	bf 90       	pop	r11
    25be:	af 90       	pop	r10
    25c0:	8f 90       	pop	r8
    25c2:	08 95       	ret
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
			break;
		default:
			LCD_printf("What?!");
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <moveMetric+0x1a0>
    25c6:	89 ea       	ldi	r24, 0xA9	; 169
    25c8:	91 e0       	ldi	r25, 0x01	; 1
    25ca:	ad b7       	in	r26, 0x3d	; 61
    25cc:	be b7       	in	r27, 0x3e	; 62
    25ce:	12 96       	adiw	r26, 0x02	; 2
    25d0:	9c 93       	st	X, r25
    25d2:	8e 93       	st	-X, r24
    25d4:	11 97       	sbiw	r26, 0x01	; 1
    25d6:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    25da:	0f 90       	pop	r0
    25dc:	0f 90       	pop	r0
    25de:	82 e0       	ldi	r24, 0x02	; 2
    25e0:	60 e0       	ldi	r22, 0x00	; 0
    25e2:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <STEPPER_stop>
    25e6:	ff cf       	rjmp	.-2      	; 0x25e6 <moveMetric+0x1c0>

000025e8 <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    25e8:	8f 92       	push	r8
    25ea:	af 92       	push	r10
    25ec:	bf 92       	push	r11
    25ee:	cf 92       	push	r12
    25f0:	df 92       	push	r13
    25f2:	ef 92       	push	r14
    25f4:	ff 92       	push	r15
    25f6:	0f 93       	push	r16
    25f8:	1f 93       	push	r17
	LCD_clear();
    25fa:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    25fe:	e0 91 d3 03 	lds	r30, 0x03D3
    2602:	f0 e0       	ldi	r31, 0x00	; 0
    2604:	eb 5b       	subi	r30, 0xBB	; 187
    2606:	fa 4f       	sbci	r31, 0xFA	; 250
    2608:	e0 81       	ld	r30, Z
    260a:	e0 93 d1 03 	sts	0x03D1, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    260e:	80 e0       	ldi	r24, 0x00	; 0
    2610:	e1 30       	cpi	r30, 0x01	; 1
    2612:	09 f4       	brne	.+2      	; 0x2616 <moveWorld+0x2e>
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	e3 30       	cpi	r30, 0x03	; 3
    261a:	09 f4       	brne	.+2      	; 0x261e <moveWorld+0x36>
    261c:	91 e0       	ldi	r25, 0x01	; 1
    261e:	89 2b       	or	r24, r25
    2620:	28 2f       	mov	r18, r24
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	80 91 d2 03 	lds	r24, 0x03D2
    262c:	82 30       	cpi	r24, 0x02	; 2
    262e:	11 f4       	brne	.+4      	; 0x2634 <moveWorld+0x4c>
    2630:	41 e0       	ldi	r20, 0x01	; 1
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	24 23       	and	r18, r20
    2636:	35 23       	and	r19, r21
    2638:	23 2b       	or	r18, r19
    263a:	b9 f0       	breq	.+46     	; 0x266a <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    263c:	60 e0       	ldi	r22, 0x00	; 0
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	9f e4       	ldi	r25, 0x4F	; 79
    2644:	2d eb       	ldi	r18, 0xBD	; 189
    2646:	34 e7       	ldi	r19, 0x74	; 116
    2648:	4b ed       	ldi	r20, 0xDB	; 219
    264a:	51 e4       	ldi	r21, 0x41	; 65
    264c:	0f 2e       	mov	r0, r31
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	ef 2e       	mov	r14, r31
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	ff 2e       	mov	r15, r31
    2656:	f0 e2       	ldi	r31, 0x20	; 32
    2658:	0f 2f       	mov	r16, r31
    265a:	f1 e4       	ldi	r31, 0x41	; 65
    265c:	1f 2f       	mov	r17, r31
    265e:	f0 2d       	mov	r31, r0
    2660:	57 01       	movw	r10, r14
    2662:	68 01       	movw	r12, r16
    2664:	88 24       	eor	r8, r8
    2666:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    266a:	20 91 d2 03 	lds	r18, 0x03D2
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	21 30       	cpi	r18, 0x01	; 1
    2672:	09 f4       	brne	.+2      	; 0x2676 <moveWorld+0x8e>
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	23 30       	cpi	r18, 0x03	; 3
    267a:	09 f4       	brne	.+2      	; 0x267e <moveWorld+0x96>
    267c:	91 e0       	ldi	r25, 0x01	; 1
    267e:	89 2b       	or	r24, r25
    2680:	28 2f       	mov	r18, r24
    2682:	30 e0       	ldi	r19, 0x00	; 0
    2684:	40 e0       	ldi	r20, 0x00	; 0
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	80 91 d1 03 	lds	r24, 0x03D1
    268c:	82 30       	cpi	r24, 0x02	; 2
    268e:	11 f4       	brne	.+4      	; 0x2694 <moveWorld+0xac>
    2690:	41 e0       	ldi	r20, 0x01	; 1
    2692:	50 e0       	ldi	r21, 0x00	; 0
    2694:	24 23       	and	r18, r20
    2696:	35 23       	and	r19, r21
    2698:	23 2b       	or	r18, r19
    269a:	b9 f0       	breq	.+46     	; 0x26ca <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    269c:	60 e0       	ldi	r22, 0x00	; 0
    269e:	70 e0       	ldi	r23, 0x00	; 0
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	9f e4       	ldi	r25, 0x4F	; 79
    26a4:	2d eb       	ldi	r18, 0xBD	; 189
    26a6:	34 e7       	ldi	r19, 0x74	; 116
    26a8:	4b ed       	ldi	r20, 0xDB	; 219
    26aa:	51 e4       	ldi	r21, 0x41	; 65
    26ac:	0f 2e       	mov	r0, r31
    26ae:	f0 e0       	ldi	r31, 0x00	; 0
    26b0:	ef 2e       	mov	r14, r31
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	ff 2e       	mov	r15, r31
    26b6:	f0 e2       	ldi	r31, 0x20	; 32
    26b8:	0f 2f       	mov	r16, r31
    26ba:	f1 e4       	ldi	r31, 0x41	; 65
    26bc:	1f 2f       	mov	r17, r31
    26be:	f0 2d       	mov	r31, r0
    26c0:	57 01       	movw	r10, r14
    26c2:	68 01       	movw	r12, r16
    26c4:	88 24       	eor	r8, r8
    26c6:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_arc_stwt>
	}
	
	switch(currentMove){
    26ca:	80 91 d1 03 	lds	r24, 0x03D1
    26ce:	82 30       	cpi	r24, 0x02	; 2
    26d0:	c1 f1       	breq	.+112    	; 0x2742 <moveWorld+0x15a>
    26d2:	83 30       	cpi	r24, 0x03	; 3
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <moveWorld+0xf0>
    26d6:	61 c0       	rjmp	.+194    	; 0x279a <moveWorld+0x1b2>
    26d8:	81 30       	cpi	r24, 0x01	; 1
    26da:	09 f0       	breq	.+2      	; 0x26de <moveWorld+0xf6>
    26dc:	9f c0       	rjmp	.+318    	; 0x281c <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    26de:	8d b7       	in	r24, 0x3d	; 61
    26e0:	9e b7       	in	r25, 0x3e	; 62
    26e2:	08 97       	sbiw	r24, 0x08	; 8
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	9e bf       	out	0x3e, r25	; 62
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	8d bf       	out	0x3d, r24	; 61
    26ee:	ed b7       	in	r30, 0x3d	; 61
    26f0:	fe b7       	in	r31, 0x3e	; 62
    26f2:	31 96       	adiw	r30, 0x01	; 1
    26f4:	84 e2       	ldi	r24, 0x24	; 36
    26f6:	91 e0       	ldi	r25, 0x01	; 1
    26f8:	ad b7       	in	r26, 0x3d	; 61
    26fa:	be b7       	in	r27, 0x3e	; 62
    26fc:	12 96       	adiw	r26, 0x02	; 2
    26fe:	9c 93       	st	X, r25
    2700:	8e 93       	st	-X, r24
    2702:	11 97       	sbiw	r26, 0x01	; 1
    2704:	80 91 d3 03 	lds	r24, 0x03D3
    2708:	82 83       	std	Z+2, r24	; 0x02
    270a:	13 82       	std	Z+3, r1	; 0x03
    270c:	80 91 d6 03 	lds	r24, 0x03D6
    2710:	84 83       	std	Z+4, r24	; 0x04
    2712:	15 82       	std	Z+5, r1	; 0x05
    2714:	80 91 d7 03 	lds	r24, 0x03D7
    2718:	86 83       	std	Z+6, r24	; 0x06
    271a:	17 82       	std	Z+7, r1	; 0x07
    271c:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2720:	ed b7       	in	r30, 0x3d	; 61
    2722:	fe b7       	in	r31, 0x3e	; 62
    2724:	38 96       	adiw	r30, 0x08	; 8
    2726:	0f b6       	in	r0, 0x3f	; 63
    2728:	f8 94       	cli
    272a:	fe bf       	out	0x3e, r31	; 62
    272c:	0f be       	out	0x3f, r0	; 63
    272e:	ed bf       	out	0x3d, r30	; 61
    2730:	60 e0       	ldi	r22, 0x00	; 0
    2732:	70 e0       	ldi	r23, 0x00	; 0
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	20 e0       	ldi	r18, 0x00	; 0
    273a:	30 e0       	ldi	r19, 0x00	; 0
    273c:	44 e8       	ldi	r20, 0x84	; 132
    273e:	51 ec       	ldi	r21, 0xC1	; 193
    2740:	5d c0       	rjmp	.+186    	; 0x27fc <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2742:	8d b7       	in	r24, 0x3d	; 61
    2744:	9e b7       	in	r25, 0x3e	; 62
    2746:	08 97       	sbiw	r24, 0x08	; 8
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	9e bf       	out	0x3e, r25	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	8d bf       	out	0x3d, r24	; 61
    2752:	ed b7       	in	r30, 0x3d	; 61
    2754:	fe b7       	in	r31, 0x3e	; 62
    2756:	31 96       	adiw	r30, 0x01	; 1
    2758:	8f e4       	ldi	r24, 0x4F	; 79
    275a:	91 e0       	ldi	r25, 0x01	; 1
    275c:	ad b7       	in	r26, 0x3d	; 61
    275e:	be b7       	in	r27, 0x3e	; 62
    2760:	12 96       	adiw	r26, 0x02	; 2
    2762:	9c 93       	st	X, r25
    2764:	8e 93       	st	-X, r24
    2766:	11 97       	sbiw	r26, 0x01	; 1
    2768:	80 91 d3 03 	lds	r24, 0x03D3
    276c:	82 83       	std	Z+2, r24	; 0x02
    276e:	13 82       	std	Z+3, r1	; 0x03
    2770:	80 91 d6 03 	lds	r24, 0x03D6
    2774:	84 83       	std	Z+4, r24	; 0x04
    2776:	15 82       	std	Z+5, r1	; 0x05
    2778:	80 91 d7 03 	lds	r24, 0x03D7
    277c:	86 83       	std	Z+6, r24	; 0x06
    277e:	17 82       	std	Z+7, r1	; 0x07
    2780:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    2784:	ed b7       	in	r30, 0x3d	; 61
    2786:	fe b7       	in	r31, 0x3e	; 62
    2788:	38 96       	adiw	r30, 0x08	; 8
    278a:	0f b6       	in	r0, 0x3f	; 63
    278c:	f8 94       	cli
    278e:	fe bf       	out	0x3e, r31	; 62
    2790:	0f be       	out	0x3f, r0	; 63
    2792:	ed bf       	out	0x3d, r30	; 61
    2794:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <moveWall>
    2798:	53 c0       	rjmp	.+166    	; 0x2840 <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    279a:	8d b7       	in	r24, 0x3d	; 61
    279c:	9e b7       	in	r25, 0x3e	; 62
    279e:	08 97       	sbiw	r24, 0x08	; 8
    27a0:	0f b6       	in	r0, 0x3f	; 63
    27a2:	f8 94       	cli
    27a4:	9e bf       	out	0x3e, r25	; 62
    27a6:	0f be       	out	0x3f, r0	; 63
    27a8:	8d bf       	out	0x3d, r24	; 61
    27aa:	ed b7       	in	r30, 0x3d	; 61
    27ac:	fe b7       	in	r31, 0x3e	; 62
    27ae:	31 96       	adiw	r30, 0x01	; 1
    27b0:	8d e7       	ldi	r24, 0x7D	; 125
    27b2:	91 e0       	ldi	r25, 0x01	; 1
    27b4:	ad b7       	in	r26, 0x3d	; 61
    27b6:	be b7       	in	r27, 0x3e	; 62
    27b8:	12 96       	adiw	r26, 0x02	; 2
    27ba:	9c 93       	st	X, r25
    27bc:	8e 93       	st	-X, r24
    27be:	11 97       	sbiw	r26, 0x01	; 1
    27c0:	80 91 d3 03 	lds	r24, 0x03D3
    27c4:	82 83       	std	Z+2, r24	; 0x02
    27c6:	13 82       	std	Z+3, r1	; 0x03
    27c8:	80 91 d6 03 	lds	r24, 0x03D6
    27cc:	84 83       	std	Z+4, r24	; 0x04
    27ce:	15 82       	std	Z+5, r1	; 0x05
    27d0:	80 91 d7 03 	lds	r24, 0x03D7
    27d4:	86 83       	std	Z+6, r24	; 0x06
    27d6:	17 82       	std	Z+7, r1	; 0x07
    27d8:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    27dc:	ed b7       	in	r30, 0x3d	; 61
    27de:	fe b7       	in	r31, 0x3e	; 62
    27e0:	38 96       	adiw	r30, 0x08	; 8
    27e2:	0f b6       	in	r0, 0x3f	; 63
    27e4:	f8 94       	cli
    27e6:	fe bf       	out	0x3e, r31	; 62
    27e8:	0f be       	out	0x3f, r0	; 63
    27ea:	ed bf       	out	0x3d, r30	; 61
    27ec:	60 e0       	ldi	r22, 0x00	; 0
    27ee:	70 e0       	ldi	r23, 0x00	; 0
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	20 e0       	ldi	r18, 0x00	; 0
    27f6:	30 e0       	ldi	r19, 0x00	; 0
    27f8:	44 e8       	ldi	r20, 0x84	; 132
    27fa:	51 e4       	ldi	r21, 0x41	; 65
    27fc:	0f 2e       	mov	r0, r31
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	ef 2e       	mov	r14, r31
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	ff 2e       	mov	r15, r31
    2806:	f0 e2       	ldi	r31, 0x20	; 32
    2808:	0f 2f       	mov	r16, r31
    280a:	f1 e4       	ldi	r31, 0x41	; 65
    280c:	1f 2f       	mov	r17, r31
    280e:	f0 2d       	mov	r31, r0
    2810:	57 01       	movw	r10, r14
    2812:	68 01       	movw	r12, r16
    2814:	88 24       	eor	r8, r8
    2816:	0e 94 9e 0b 	call	0x173c	; 0x173c <move_arc_stwt>
    281a:	12 c0       	rjmp	.+36     	; 0x2840 <moveWorld+0x258>
			break;
		default:
			LCD_printf("What?!");
    281c:	00 d0       	rcall	.+0      	; 0x281e <moveWorld+0x236>
    281e:	89 ea       	ldi	r24, 0xA9	; 169
    2820:	91 e0       	ldi	r25, 0x01	; 1
    2822:	ad b7       	in	r26, 0x3d	; 61
    2824:	be b7       	in	r27, 0x3e	; 62
    2826:	12 96       	adiw	r26, 0x02	; 2
    2828:	9c 93       	st	X, r25
    282a:	8e 93       	st	-X, r24
    282c:	11 97       	sbiw	r26, 0x01	; 1
    282e:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	82 e0       	ldi	r24, 0x02	; 2
    2838:	60 e0       	ldi	r22, 0x00	; 0
    283a:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <STEPPER_stop>
    283e:	ff cf       	rjmp	.-2      	; 0x283e <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    2840:	80 91 d1 03 	lds	r24, 0x03D1
    2844:	80 93 d2 03 	sts	0x03D2, r24
	return 1;
}
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	1f 91       	pop	r17
    284c:	0f 91       	pop	r16
    284e:	ff 90       	pop	r15
    2850:	ef 90       	pop	r14
    2852:	df 90       	pop	r13
    2854:	cf 90       	pop	r12
    2856:	bf 90       	pop	r11
    2858:	af 90       	pop	r10
    285a:	8f 90       	pop	r8
    285c:	08 95       	ret

0000285e <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    285e:	0e 94 f4 12 	call	0x25e8	; 0x25e8 <moveWorld>
    2862:	88 23       	and	r24, r24
    2864:	69 f0       	breq	.+26     	; 0x2880 <moveBehavior+0x22>
		Ierror = 0;
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	a0 e0       	ldi	r26, 0x00	; 0
    286c:	b0 e0       	ldi	r27, 0x00	; 0
    286e:	80 93 b0 03 	sts	0x03B0, r24
    2872:	90 93 b1 03 	sts	0x03B1, r25
    2876:	a0 93 b2 03 	sts	0x03B2, r26
    287a:	b0 93 b3 03 	sts	0x03B3, r27
    287e:	81 e0       	ldi	r24, 0x01	; 1
			// Ierror = 0;
			// return 3;
		// }
	// }
	return 0;	
}
    2880:	08 95       	ret

00002882 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    2882:	ff 92       	push	r15
    2884:	0f 93       	push	r16
    2886:	1f 93       	push	r17
    2888:	cf 93       	push	r28
    288a:	df 93       	push	r29
    288c:	10 e0       	ldi	r17, 0x00	; 0
    288e:	ff 24       	eor	r15, r15
    2890:	f3 94       	inc	r15
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2892:	c0 eb       	ldi	r28, 0xB0	; 176
    2894:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    2896:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    289a:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    289c:	81 30       	cpi	r24, 0x01	; 1
    289e:	21 f0       	breq	.+8      	; 0x28a8 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    28a0:	82 30       	cpi	r24, 0x02	; 2
    28a2:	11 f0       	breq	.+4      	; 0x28a8 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    28a4:	83 30       	cpi	r24, 0x03	; 3
    28a6:	39 f4       	brne	.+14     	; 0x28b6 <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    28a8:	e1 2f       	mov	r30, r17
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	eb 5b       	subi	r30, 0xBB	; 187
    28ae:	fa 4f       	sbci	r31, 0xFA	; 250
    28b0:	00 83       	st	Z, r16
			i++;
    28b2:	1f 5f       	subi	r17, 0xFF	; 255
    28b4:	02 c0       	rjmp	.+4      	; 0x28ba <movesInput+0x38>
		}

		if (btnHolder != 0){
    28b6:	88 23       	and	r24, r24
    28b8:	21 f1       	breq	.+72     	; 0x2902 <movesInput+0x80>
			LCD_clear();
    28ba:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    28be:	8d b7       	in	r24, 0x3d	; 61
    28c0:	9e b7       	in	r25, 0x3e	; 62
    28c2:	08 97       	sbiw	r24, 0x08	; 8
    28c4:	0f b6       	in	r0, 0x3f	; 63
    28c6:	f8 94       	cli
    28c8:	9e bf       	out	0x3e, r25	; 62
    28ca:	0f be       	out	0x3f, r0	; 63
    28cc:	8d bf       	out	0x3d, r24	; 61
    28ce:	ed b7       	in	r30, 0x3d	; 61
    28d0:	fe b7       	in	r31, 0x3e	; 62
    28d2:	31 96       	adiw	r30, 0x01	; 1
    28d4:	ad b7       	in	r26, 0x3d	; 61
    28d6:	be b7       	in	r27, 0x3e	; 62
    28d8:	12 96       	adiw	r26, 0x02	; 2
    28da:	dc 93       	st	X, r29
    28dc:	ce 93       	st	-X, r28
    28de:	11 97       	sbiw	r26, 0x01	; 1
    28e0:	f2 82       	std	Z+2, r15	; 0x02
    28e2:	13 82       	std	Z+3, r1	; 0x03
    28e4:	04 83       	std	Z+4, r16	; 0x04
    28e6:	15 82       	std	Z+5, r1	; 0x05
    28e8:	16 83       	std	Z+6, r17	; 0x06
    28ea:	17 82       	std	Z+7, r1	; 0x07
    28ec:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
    28f0:	f0 2e       	mov	r15, r16
    28f2:	8d b7       	in	r24, 0x3d	; 61
    28f4:	9e b7       	in	r25, 0x3e	; 62
    28f6:	08 96       	adiw	r24, 0x08	; 8
    28f8:	0f b6       	in	r0, 0x3f	; 63
    28fa:	f8 94       	cli
    28fc:	9e bf       	out	0x3e, r25	; 62
    28fe:	0f be       	out	0x3f, r0	; 63
    2900:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2902:	84 ef       	ldi	r24, 0xF4	; 244
    2904:	91 e0       	ldi	r25, 0x01	; 1
    2906:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    290a:	1b 30       	cpi	r17, 0x0B	; 11
    290c:	20 f2       	brcs	.-120    	; 0x2896 <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    290e:	1f 5f       	subi	r17, 0xFF	; 255
    2910:	e1 2f       	mov	r30, r17
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	eb 5b       	subi	r30, 0xBB	; 187
    2916:	fa 4f       	sbci	r31, 0xFA	; 250
    2918:	84 e0       	ldi	r24, 0x04	; 4
    291a:	80 83       	st	Z, r24
}
    291c:	df 91       	pop	r29
    291e:	cf 91       	pop	r28
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	ff 90       	pop	r15
    2926:	08 95       	ret

00002928 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    2928:	1f 93       	push	r17
    292a:	cf 93       	push	r28
    292c:	df 93       	push	r29
    292e:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2930:	c1 ee       	ldi	r28, 0xE1	; 225
    2932:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    2934:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2938:	81 30       	cpi	r24, 0x01	; 1
    293a:	21 f4       	brne	.+8      	; 0x2944 <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    293c:	80 91 d4 03 	lds	r24, 0x03D4
    2940:	88 0f       	add	r24, r24
    2942:	06 c0       	rjmp	.+12     	; 0x2950 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2944:	82 30       	cpi	r24, 0x02	; 2
    2946:	39 f4       	brne	.+14     	; 0x2956 <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    2948:	80 91 d4 03 	lds	r24, 0x03D4
    294c:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    294e:	8f 5f       	subi	r24, 0xFF	; 255
    2950:	80 93 d4 03 	sts	0x03D4, r24
			i++;
    2954:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    2956:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    295a:	00 d0       	rcall	.+0      	; 0x295c <worldInput+0x34>
    295c:	00 d0       	rcall	.+0      	; 0x295e <worldInput+0x36>
    295e:	00 d0       	rcall	.+0      	; 0x2960 <worldInput+0x38>
    2960:	ed b7       	in	r30, 0x3d	; 61
    2962:	fe b7       	in	r31, 0x3e	; 62
    2964:	31 96       	adiw	r30, 0x01	; 1
    2966:	ad b7       	in	r26, 0x3d	; 61
    2968:	be b7       	in	r27, 0x3e	; 62
    296a:	12 96       	adiw	r26, 0x02	; 2
    296c:	dc 93       	st	X, r29
    296e:	ce 93       	st	-X, r28
    2970:	11 97       	sbiw	r26, 0x01	; 1
    2972:	80 91 d4 03 	lds	r24, 0x03D4
    2976:	82 83       	std	Z+2, r24	; 0x02
    2978:	13 82       	std	Z+3, r1	; 0x03
    297a:	14 83       	std	Z+4, r17	; 0x04
    297c:	15 82       	std	Z+5, r1	; 0x05
    297e:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2982:	8d b7       	in	r24, 0x3d	; 61
    2984:	9e b7       	in	r25, 0x3e	; 62
    2986:	06 96       	adiw	r24, 0x06	; 6
    2988:	0f b6       	in	r0, 0x3f	; 63
    298a:	f8 94       	cli
    298c:	9e bf       	out	0x3e, r25	; 62
    298e:	0f be       	out	0x3f, r0	; 63
    2990:	8d bf       	out	0x3d, r24	; 61
    2992:	84 ef       	ldi	r24, 0xF4	; 244
    2994:	91 e0       	ldi	r25, 0x01	; 1
    2996:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    299a:	14 30       	cpi	r17, 0x04	; 4
    299c:	58 f2       	brcs	.-106    	; 0x2934 <worldInput+0xc>
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
}
    299e:	df 91       	pop	r29
    29a0:	cf 91       	pop	r28
    29a2:	1f 91       	pop	r17
    29a4:	08 95       	ret

000029a6 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    29a6:	ef 92       	push	r14
    29a8:	ff 92       	push	r15
    29aa:	0f 93       	push	r16
    29ac:	1f 93       	push	r17
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
	// Get the start location of the robot
	unsigned char curRow = (currentCellWorld>>2) & 0b1100;
    29b2:	80 91 d4 03 	lds	r24, 0x03D4
    29b6:	68 2f       	mov	r22, r24
    29b8:	66 95       	lsr	r22
    29ba:	66 95       	lsr	r22
    29bc:	6c 70       	andi	r22, 0x0C	; 12
	unsigned char curCol = currentCellWorld & 0b0011;
    29be:	83 70       	andi	r24, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    29c0:	30 91 d5 03 	lds	r19, 0x03D5
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	50 e0       	ldi	r21, 0x00	; 0
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    29c8:	fa 01       	movw	r30, r20
    29ca:	eb 5b       	subi	r30, 0xBB	; 187
    29cc:	fa 4f       	sbci	r31, 0xFA	; 250
    29ce:	70 81       	ld	r23, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    29d0:	e6 2f       	mov	r30, r22
    29d2:	f0 e0       	ldi	r31, 0x00	; 0
    29d4:	ee 0f       	add	r30, r30
    29d6:	ff 1f       	adc	r31, r31
    29d8:	ee 0f       	add	r30, r30
    29da:	ff 1f       	adc	r31, r31
    29dc:	e8 0f       	add	r30, r24
    29de:	f1 1d       	adc	r31, r1
    29e0:	ef 5b       	subi	r30, 0xBF	; 191
    29e2:	fc 4f       	sbci	r31, 0xFC	; 252
    29e4:	20 81       	ld	r18, Z
    29e6:	93 2f       	mov	r25, r19
    29e8:	06 c0       	rjmp	.+12     	; 0x29f6 <getGateways+0x50>
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	while (orient!=0){
		// use the shift array to rotate
		cell = shifted[cell];
    29ea:	e2 2f       	mov	r30, r18
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	ef 5c       	subi	r30, 0xCF	; 207
    29f0:	fc 4f       	sbci	r31, 0xFC	; 252
    29f2:	20 81       	ld	r18, Z
		orient--;
    29f4:	91 50       	subi	r25, 0x01	; 1
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	while (orient!=0){
    29f6:	99 23       	and	r25, r25
    29f8:	c1 f7       	brne	.-16     	; 0x29ea <getGateways+0x44>
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient);
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    29fa:	fa 01       	movw	r30, r20
    29fc:	ed 5b       	subi	r30, 0xBD	; 189
    29fe:	f9 4f       	sbci	r31, 0xF9	; 249
    2a00:	20 83       	st	Z, r18
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    2a02:	72 30       	cpi	r23, 0x02	; 2
    2a04:	89 f4       	brne	.+34     	; 0x2a28 <getGateways+0x82>
			switch(curOrient){
    2a06:	31 30       	cpi	r19, 0x01	; 1
    2a08:	49 f0       	breq	.+18     	; 0x2a1c <getGateways+0x76>
    2a0a:	31 30       	cpi	r19, 0x01	; 1
    2a0c:	28 f0       	brcs	.+10     	; 0x2a18 <getGateways+0x72>
    2a0e:	32 30       	cpi	r19, 0x02	; 2
    2a10:	39 f0       	breq	.+14     	; 0x2a20 <getGateways+0x7a>
    2a12:	33 30       	cpi	r19, 0x03	; 3
    2a14:	89 f4       	brne	.+34     	; 0x2a38 <getGateways+0x92>
    2a16:	06 c0       	rjmp	.+12     	; 0x2a24 <getGateways+0x7e>
				case NORTH:
					curRow -= 1;
    2a18:	61 50       	subi	r22, 0x01	; 1
    2a1a:	0e c0       	rjmp	.+28     	; 0x2a38 <getGateways+0x92>
					break;
				case EAST:
					curCol += 1;
    2a1c:	8f 5f       	subi	r24, 0xFF	; 255
    2a1e:	0c c0       	rjmp	.+24     	; 0x2a38 <getGateways+0x92>
					break;
				case SOUTH:
					curRow += 1;					
    2a20:	6f 5f       	subi	r22, 0xFF	; 255
    2a22:	0a c0       	rjmp	.+20     	; 0x2a38 <getGateways+0x92>
					break;
				case WEST:
					curCol -= 1;					
    2a24:	81 50       	subi	r24, 0x01	; 1
    2a26:	08 c0       	rjmp	.+16     	; 0x2a38 <getGateways+0x92>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    2a28:	73 30       	cpi	r23, 0x03	; 3
    2a2a:	11 f4       	brne	.+4      	; 0x2a30 <getGateways+0x8a>
			curOrient++;
    2a2c:	3f 5f       	subi	r19, 0xFF	; 255
    2a2e:	03 c0       	rjmp	.+6      	; 0x2a36 <getGateways+0x90>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    2a30:	71 30       	cpi	r23, 0x01	; 1
    2a32:	11 f4       	brne	.+4      	; 0x2a38 <getGateways+0x92>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    2a34:	31 50       	subi	r19, 0x01	; 1
			curOrient = curOrient&0b11;
    2a36:	33 70       	andi	r19, 0x03	; 3
    2a38:	4f 5f       	subi	r20, 0xFF	; 255
    2a3a:	5f 4f       	sbci	r21, 0xFF	; 255
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2a3c:	4d 30       	cpi	r20, 0x0D	; 13
    2a3e:	51 05       	cpc	r21, r1
    2a40:	19 f6       	brne	.-122    	; 0x29c8 <getGateways+0x22>
    2a42:	c0 e0       	ldi	r28, 0x00	; 0
    2a44:	d0 e0       	ldi	r29, 0x00	; 0
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2a46:	b9 e0       	ldi	r27, 0x09	; 9
    2a48:	eb 2e       	mov	r14, r27
    2a4a:	b2 e0       	ldi	r27, 0x02	; 2
    2a4c:	fb 2e       	mov	r15, r27
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    2a4e:	fe 01       	movw	r30, r28
    2a50:	ed 5b       	subi	r30, 0xBD	; 189
    2a52:	f9 4f       	sbci	r31, 0xF9	; 249
    2a54:	00 81       	ld	r16, Z
		LCD_clear();
    2a56:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2a5a:	20 2f       	mov	r18, r16
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	8d b7       	in	r24, 0x3d	; 61
    2a60:	9e b7       	in	r25, 0x3e	; 62
    2a62:	44 97       	sbiw	r24, 0x14	; 20
    2a64:	0f b6       	in	r0, 0x3f	; 63
    2a66:	f8 94       	cli
    2a68:	9e bf       	out	0x3e, r25	; 62
    2a6a:	0f be       	out	0x3f, r0	; 63
    2a6c:	8d bf       	out	0x3d, r24	; 61
    2a6e:	ed b7       	in	r30, 0x3d	; 61
    2a70:	fe b7       	in	r31, 0x3e	; 62
    2a72:	31 96       	adiw	r30, 0x01	; 1
    2a74:	ad b7       	in	r26, 0x3d	; 61
    2a76:	be b7       	in	r27, 0x3e	; 62
    2a78:	12 96       	adiw	r26, 0x02	; 2
    2a7a:	fc 92       	st	X, r15
    2a7c:	ee 92       	st	-X, r14
    2a7e:	11 97       	sbiw	r26, 0x01	; 1
    2a80:	d3 83       	std	Z+3, r29	; 0x03
    2a82:	c2 83       	std	Z+2, r28	; 0x02
    2a84:	11 27       	eor	r17, r17
    2a86:	07 fd       	sbrc	r16, 7
    2a88:	10 95       	com	r17
    2a8a:	00 27       	eor	r16, r16
    2a8c:	11 0f       	add	r17, r17
    2a8e:	00 1f       	adc	r16, r16
    2a90:	11 27       	eor	r17, r17
    2a92:	15 83       	std	Z+5, r17	; 0x05
    2a94:	04 83       	std	Z+4, r16	; 0x04
    2a96:	c9 01       	movw	r24, r18
    2a98:	76 e0       	ldi	r23, 0x06	; 6
    2a9a:	96 95       	lsr	r25
    2a9c:	87 95       	ror	r24
    2a9e:	7a 95       	dec	r23
    2aa0:	e1 f7       	brne	.-8      	; 0x2a9a <getGateways+0xf4>
    2aa2:	81 70       	andi	r24, 0x01	; 1
    2aa4:	90 70       	andi	r25, 0x00	; 0
    2aa6:	97 83       	std	Z+7, r25	; 0x07
    2aa8:	86 83       	std	Z+6, r24	; 0x06
    2aaa:	c9 01       	movw	r24, r18
    2aac:	65 e0       	ldi	r22, 0x05	; 5
    2aae:	96 95       	lsr	r25
    2ab0:	87 95       	ror	r24
    2ab2:	6a 95       	dec	r22
    2ab4:	e1 f7       	brne	.-8      	; 0x2aae <getGateways+0x108>
    2ab6:	81 70       	andi	r24, 0x01	; 1
    2ab8:	90 70       	andi	r25, 0x00	; 0
    2aba:	91 87       	std	Z+9, r25	; 0x09
    2abc:	80 87       	std	Z+8, r24	; 0x08
    2abe:	c9 01       	movw	r24, r18
    2ac0:	54 e0       	ldi	r21, 0x04	; 4
    2ac2:	96 95       	lsr	r25
    2ac4:	87 95       	ror	r24
    2ac6:	5a 95       	dec	r21
    2ac8:	e1 f7       	brne	.-8      	; 0x2ac2 <getGateways+0x11c>
    2aca:	81 70       	andi	r24, 0x01	; 1
    2acc:	90 70       	andi	r25, 0x00	; 0
    2ace:	93 87       	std	Z+11, r25	; 0x0b
    2ad0:	82 87       	std	Z+10, r24	; 0x0a
    2ad2:	c9 01       	movw	r24, r18
    2ad4:	43 e0       	ldi	r20, 0x03	; 3
    2ad6:	96 95       	lsr	r25
    2ad8:	87 95       	ror	r24
    2ada:	4a 95       	dec	r20
    2adc:	e1 f7       	brne	.-8      	; 0x2ad6 <getGateways+0x130>
    2ade:	81 70       	andi	r24, 0x01	; 1
    2ae0:	90 70       	andi	r25, 0x00	; 0
    2ae2:	95 87       	std	Z+13, r25	; 0x0d
    2ae4:	84 87       	std	Z+12, r24	; 0x0c
    2ae6:	c9 01       	movw	r24, r18
    2ae8:	96 95       	lsr	r25
    2aea:	87 95       	ror	r24
    2aec:	96 95       	lsr	r25
    2aee:	87 95       	ror	r24
    2af0:	81 70       	andi	r24, 0x01	; 1
    2af2:	90 70       	andi	r25, 0x00	; 0
    2af4:	97 87       	std	Z+15, r25	; 0x0f
    2af6:	86 87       	std	Z+14, r24	; 0x0e
    2af8:	c9 01       	movw	r24, r18
    2afa:	96 95       	lsr	r25
    2afc:	87 95       	ror	r24
    2afe:	81 70       	andi	r24, 0x01	; 1
    2b00:	90 70       	andi	r25, 0x00	; 0
    2b02:	91 8b       	std	Z+17, r25	; 0x11
    2b04:	80 8b       	std	Z+16, r24	; 0x10
    2b06:	21 70       	andi	r18, 0x01	; 1
    2b08:	30 70       	andi	r19, 0x00	; 0
    2b0a:	33 8b       	std	Z+19, r19	; 0x13
    2b0c:	22 8b       	std	Z+18, r18	; 0x12
    2b0e:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
		TMRSRVC_delay(500);//wait 1/2 seconds
    2b12:	8d b7       	in	r24, 0x3d	; 61
    2b14:	9e b7       	in	r25, 0x3e	; 62
    2b16:	44 96       	adiw	r24, 0x14	; 20
    2b18:	0f b6       	in	r0, 0x3f	; 63
    2b1a:	f8 94       	cli
    2b1c:	9e bf       	out	0x3e, r25	; 62
    2b1e:	0f be       	out	0x3f, r0	; 63
    2b20:	8d bf       	out	0x3d, r24	; 61
    2b22:	84 ef       	ldi	r24, 0xF4	; 244
    2b24:	91 e0       	ldi	r25, 0x01	; 1
    2b26:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
    2b2a:	21 96       	adiw	r28, 0x01	; 1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2b2c:	cd 30       	cpi	r28, 0x0D	; 13
    2b2e:	d1 05       	cpc	r29, r1
    2b30:	09 f0       	breq	.+2      	; 0x2b34 <getGateways+0x18e>
    2b32:	8d cf       	rjmp	.-230    	; 0x2a4e <getGateways+0xa8>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(500);//wait 1/2 seconds
	}
}
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	0f 91       	pop	r16
    2b3c:	ff 90       	pop	r15
    2b3e:	ef 90       	pop	r14
    2b40:	08 95       	ret

00002b42 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    2b42:	1f 93       	push	r17
    2b44:	cf 93       	push	r28
    2b46:	df 93       	push	r29
    2b48:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2b4a:	cb e2       	ldi	r28, 0x2B	; 43
    2b4c:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    2b4e:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2b52:	81 30       	cpi	r24, 0x01	; 1
    2b54:	21 f4       	brne	.+8      	; 0x2b5e <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    2b56:	80 91 d5 03 	lds	r24, 0x03D5
    2b5a:	88 0f       	add	r24, r24
    2b5c:	06 c0       	rjmp	.+12     	; 0x2b6a <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2b5e:	82 30       	cpi	r24, 0x02	; 2
    2b60:	41 f4       	brne	.+16     	; 0x2b72 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    2b62:	80 91 d5 03 	lds	r24, 0x03D5
    2b66:	88 0f       	add	r24, r24
			currentOrientation += 1;
    2b68:	8f 5f       	subi	r24, 0xFF	; 255
    2b6a:	80 93 d5 03 	sts	0x03D5, r24
			i++;
    2b6e:	1f 5f       	subi	r17, 0xFF	; 255
    2b70:	02 c0       	rjmp	.+4      	; 0x2b76 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    2b72:	88 23       	and	r24, r24
    2b74:	f1 f0       	breq	.+60     	; 0x2bb2 <orientationInput+0x70>
			LCD_clear();
    2b76:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2b7a:	00 d0       	rcall	.+0      	; 0x2b7c <orientationInput+0x3a>
    2b7c:	00 d0       	rcall	.+0      	; 0x2b7e <orientationInput+0x3c>
    2b7e:	00 d0       	rcall	.+0      	; 0x2b80 <orientationInput+0x3e>
    2b80:	ed b7       	in	r30, 0x3d	; 61
    2b82:	fe b7       	in	r31, 0x3e	; 62
    2b84:	31 96       	adiw	r30, 0x01	; 1
    2b86:	ad b7       	in	r26, 0x3d	; 61
    2b88:	be b7       	in	r27, 0x3e	; 62
    2b8a:	12 96       	adiw	r26, 0x02	; 2
    2b8c:	dc 93       	st	X, r29
    2b8e:	ce 93       	st	-X, r28
    2b90:	11 97       	sbiw	r26, 0x01	; 1
    2b92:	80 91 d5 03 	lds	r24, 0x03D5
    2b96:	82 83       	std	Z+2, r24	; 0x02
    2b98:	13 82       	std	Z+3, r1	; 0x03
    2b9a:	14 83       	std	Z+4, r17	; 0x04
    2b9c:	15 82       	std	Z+5, r1	; 0x05
    2b9e:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <printf>
    2ba2:	8d b7       	in	r24, 0x3d	; 61
    2ba4:	9e b7       	in	r25, 0x3e	; 62
    2ba6:	06 96       	adiw	r24, 0x06	; 6
    2ba8:	0f b6       	in	r0, 0x3f	; 63
    2baa:	f8 94       	cli
    2bac:	9e bf       	out	0x3e, r25	; 62
    2bae:	0f be       	out	0x3f, r0	; 63
    2bb0:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2bb2:	84 ef       	ldi	r24, 0xF4	; 244
    2bb4:	91 e0       	ldi	r25, 0x01	; 1
    2bb6:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    2bba:	12 30       	cpi	r17, 0x02	; 2
    2bbc:	40 f2       	brcs	.-112    	; 0x2b4e <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    2bbe:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
	switch(currentOrientation){
    2bc2:	80 91 d5 03 	lds	r24, 0x03D5
    2bc6:	81 30       	cpi	r24, 0x01	; 1
    2bc8:	51 f0       	breq	.+20     	; 0x2bde <orientationInput+0x9c>
    2bca:	81 30       	cpi	r24, 0x01	; 1
    2bcc:	28 f0       	brcs	.+10     	; 0x2bd8 <orientationInput+0x96>
    2bce:	82 30       	cpi	r24, 0x02	; 2
    2bd0:	49 f0       	breq	.+18     	; 0x2be4 <orientationInput+0xa2>
    2bd2:	83 30       	cpi	r24, 0x03	; 3
    2bd4:	71 f4       	brne	.+28     	; 0x2bf2 <orientationInput+0xb0>
    2bd6:	09 c0       	rjmp	.+18     	; 0x2bea <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    2bd8:	8a e5       	ldi	r24, 0x5A	; 90
    2bda:	92 e0       	ldi	r25, 0x02	; 2
    2bdc:	08 c0       	rjmp	.+16     	; 0x2bee <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    2bde:	8c e7       	ldi	r24, 0x7C	; 124
    2be0:	92 e0       	ldi	r25, 0x02	; 2
    2be2:	05 c0       	rjmp	.+10     	; 0x2bee <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    2be4:	8d e9       	ldi	r24, 0x9D	; 157
    2be6:	92 e0       	ldi	r25, 0x02	; 2
    2be8:	02 c0       	rjmp	.+4      	; 0x2bee <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    2bea:	8f eb       	ldi	r24, 0xBF	; 191
    2bec:	92 e0       	ldi	r25, 0x02	; 2
    2bee:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <puts>
			break;
		default:
			break;
	}
	TMRSRVC_delay(500);	//wait 0.5 seconds
    2bf2:	84 ef       	ldi	r24, 0xF4	; 244
    2bf4:	91 e0       	ldi	r25, 0x01	; 1
    2bf6:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
}
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	1f 91       	pop	r17
    2c00:	08 95       	ret

00002c02 <CBOT_main>:
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2c02:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <ATTINY_open>
    2c06:	90 93 54 04 	sts	0x0454, r25
    2c0a:	80 93 53 04 	sts	0x0453, r24
	LEopstat = LED_open(); //open the LED module
    2c0e:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LED_open>
    2c12:	90 93 52 04 	sts	0x0452, r25
    2c16:	80 93 51 04 	sts	0x0451, r24
	LCopstat = LCD_open(); //open the LCD module
    2c1a:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <LCD_open>
    2c1e:	90 93 50 04 	sts	0x0450, r25
    2c22:	80 93 4f 04 	sts	0x044F, r24
	STEPPER_open(); // Open STEPPER module for use
    2c26:	0e 94 71 1a 	call	0x34e2	; 0x34e2 <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in beep mode
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <SPKR_open>
	
	LED_open();
    2c30:	0e 94 ef 17 	call	0x2fde	; 0x2fde <LED_open>
	I2C_open();
    2c34:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <I2C_open>
	ADC_open();//open the ADC module
    2c38:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	0e 94 d5 16 	call	0x2daa	; 0x2daa <ADC_set_VREF>

	// Initialize IR Values and Reset Prefilter
	checkIR();
    2c42:	0e 94 57 11 	call	0x22ae	; 0x22ae <checkIR>
	prefilter(1);
    2c46:	81 e0       	ldi	r24, 0x01	; 1
    2c48:	0e 94 80 06 	call	0xd00	; 0xd00 <prefilter>
	
	
	// Enter the robot's current (starting) position
	LCD_printf("START location\n\n\n\n");	
    2c4c:	80 ee       	ldi	r24, 0xE0	; 224
    2c4e:	92 e0       	ldi	r25, 0x02	; 2
    2c50:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    2c54:	88 ee       	ldi	r24, 0xE8	; 232
    2c56:	93 e0       	ldi	r25, 0x03	; 3
    2c58:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
	LCD_clear();
    2c5c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
	worldInput();
    2c60:	0e 94 94 14 	call	0x2928	; 0x2928 <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    2c64:	88 ee       	ldi	r24, 0xE8	; 232
    2c66:	93 e0       	ldi	r25, 0x03	; 3
    2c68:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
	LCD_clear();
    2c6c:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START orientation\n\n\n\n");	
    2c70:	82 ef       	ldi	r24, 0xF2	; 242
    2c72:	92 e0       	ldi	r25, 0x02	; 2
    2c74:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    2c78:	88 ee       	ldi	r24, 0xE8	; 232
    2c7a:	93 e0       	ldi	r25, 0x03	; 3
    2c7c:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
	LCD_clear();
    2c80:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
	orientationInput();
    2c84:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    2c88:	88 ee       	ldi	r24, 0xE8	; 232
    2c8a:	93 e0       	ldi	r25, 0x03	; 3
    2c8c:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
	LCD_clear();
    2c90:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
	
	// Enter the robot topological commands
	LCD_printf("ENTER move commands\n\n\n\n");
    2c94:	87 e0       	ldi	r24, 0x07	; 7
    2c96:	93 e0       	ldi	r25, 0x03	; 3
    2c98:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    2c9c:	88 ee       	ldi	r24, 0xE8	; 232
    2c9e:	93 e0       	ldi	r25, 0x03	; 3
    2ca0:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
	LCD_clear();
    2ca4:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
	movesInput();
    2ca8:	0e 94 41 14 	call	0x2882	; 0x2882 <movesInput>
	TMRSRVC_delay(1000);//wait 1 seconds
    2cac:	88 ee       	ldi	r24, 0xE8	; 232
    2cae:	93 e0       	ldi	r25, 0x03	; 3
    2cb0:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
	LCD_clear();
    2cb4:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
	
	// Print the robot gateways
	LCD_printf("Robot Gateways:\n\n\n\n");
    2cb8:	8e e1       	ldi	r24, 0x1E	; 30
    2cba:	93 e0       	ldi	r25, 0x03	; 3
    2cbc:	0e 94 eb 33 	call	0x67d6	; 0x67d6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    2cc0:	88 ee       	ldi	r24, 0xE8	; 232
    2cc2:	93 e0       	ldi	r25, 0x03	; 3
    2cc4:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
	LCD_clear();
    2cc8:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
	getGateways();
    2ccc:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <getGateways>
	TMRSRVC_delay(1000);//wait 1 seconds
    2cd0:	88 ee       	ldi	r24, 0xE8	; 232
    2cd2:	93 e0       	ldi	r25, 0x03	; 3
    2cd4:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
	LCD_clear();
    2cd8:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
	

	// Infinite loop
	while (1)
    {
		checkIR();	
    2cdc:	0e 94 57 11 	call	0x22ae	; 0x22ae <checkIR>
		// checkWorld();
		// moveWorld();	
		moveMetric();	
    2ce0:	0e 94 13 12 	call	0x2426	; 0x2426 <moveMetric>
    2ce4:	fb cf       	rjmp	.-10     	; 0x2cdc <CBOT_main+0xda>

00002ce6 <ADC_open>:
    2ce6:	8f e0       	ldi	r24, 0x0F	; 15
    2ce8:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    2cec:	88 23       	and	r24, r24
    2cee:	31 f4       	brne	.+12     	; 0x2cfc <ADC_open+0x16>
    2cf0:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <__ADC_init>
    2cf4:	8f e0       	ldi	r24, 0x0F	; 15
    2cf6:	61 e0       	ldi	r22, 0x01	; 1
    2cf8:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    2cfc:	8f e0       	ldi	r24, 0x0F	; 15
    2cfe:	91 e0       	ldi	r25, 0x01	; 1
    2d00:	08 95       	ret

00002d02 <ADC_sample>:
    2d02:	8f e0       	ldi	r24, 0x0F	; 15
    2d04:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    2d08:	81 30       	cpi	r24, 0x01	; 1
    2d0a:	19 f0       	breq	.+6      	; 0x2d12 <ADC_sample+0x10>
    2d0c:	20 e0       	ldi	r18, 0x00	; 0
    2d0e:	30 e0       	ldi	r19, 0x00	; 0
    2d10:	13 c0       	rjmp	.+38     	; 0x2d38 <ADC_sample+0x36>
    2d12:	80 91 7a 00 	lds	r24, 0x007A
    2d16:	80 64       	ori	r24, 0x40	; 64
    2d18:	80 93 7a 00 	sts	0x007A, r24
    2d1c:	80 91 7a 00 	lds	r24, 0x007A
    2d20:	86 fd       	sbrc	r24, 6
    2d22:	fc cf       	rjmp	.-8      	; 0x2d1c <ADC_sample+0x1a>
    2d24:	30 91 78 00 	lds	r19, 0x0078
    2d28:	20 91 79 00 	lds	r18, 0x0079
    2d2c:	92 2f       	mov	r25, r18
    2d2e:	80 e0       	ldi	r24, 0x00	; 0
    2d30:	23 2f       	mov	r18, r19
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	28 2b       	or	r18, r24
    2d36:	39 2b       	or	r19, r25
    2d38:	c9 01       	movw	r24, r18
    2d3a:	08 95       	ret

00002d3c <ADC_set_channel>:
    2d3c:	58 2f       	mov	r21, r24
    2d3e:	80 91 51 03 	lds	r24, 0x0351
    2d42:	88 30       	cpi	r24, 0x08	; 8
    2d44:	d8 f4       	brcc	.+54     	; 0x2d7c <ADC_set_channel+0x40>
    2d46:	40 91 7e 00 	lds	r20, 0x007E
    2d4a:	21 e0       	ldi	r18, 0x01	; 1
    2d4c:	30 e0       	ldi	r19, 0x00	; 0
    2d4e:	b9 01       	movw	r22, r18
    2d50:	02 c0       	rjmp	.+4      	; 0x2d56 <ADC_set_channel+0x1a>
    2d52:	66 0f       	add	r22, r22
    2d54:	77 1f       	adc	r23, r23
    2d56:	8a 95       	dec	r24
    2d58:	e2 f7       	brpl	.-8      	; 0x2d52 <ADC_set_channel+0x16>
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	80 95       	com	r24
    2d5e:	84 23       	and	r24, r20
    2d60:	80 93 7e 00 	sts	0x007E, r24
    2d64:	80 91 7e 00 	lds	r24, 0x007E
    2d68:	05 2e       	mov	r0, r21
    2d6a:	02 c0       	rjmp	.+4      	; 0x2d70 <ADC_set_channel+0x34>
    2d6c:	22 0f       	add	r18, r18
    2d6e:	33 1f       	adc	r19, r19
    2d70:	0a 94       	dec	r0
    2d72:	e2 f7       	brpl	.-8      	; 0x2d6c <ADC_set_channel+0x30>
    2d74:	82 2b       	or	r24, r18
    2d76:	80 93 7e 00 	sts	0x007E, r24
    2d7a:	0d c0       	rjmp	.+26     	; 0x2d96 <ADC_set_channel+0x5a>
    2d7c:	20 91 7e 00 	lds	r18, 0x007E
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	90 e0       	ldi	r25, 0x00	; 0
    2d84:	05 2e       	mov	r0, r21
    2d86:	02 c0       	rjmp	.+4      	; 0x2d8c <ADC_set_channel+0x50>
    2d88:	88 0f       	add	r24, r24
    2d8a:	99 1f       	adc	r25, r25
    2d8c:	0a 94       	dec	r0
    2d8e:	e2 f7       	brpl	.-8      	; 0x2d88 <ADC_set_channel+0x4c>
    2d90:	28 2b       	or	r18, r24
    2d92:	20 93 7e 00 	sts	0x007E, r18
    2d96:	50 93 51 03 	sts	0x0351, r21
    2d9a:	80 91 7c 00 	lds	r24, 0x007C
    2d9e:	5f 71       	andi	r21, 0x1F	; 31
    2da0:	80 7e       	andi	r24, 0xE0	; 224
    2da2:	85 2b       	or	r24, r21
    2da4:	80 93 7c 00 	sts	0x007C, r24
    2da8:	08 95       	ret

00002daa <ADC_set_VREF>:
    2daa:	ec e7       	ldi	r30, 0x7C	; 124
    2dac:	f0 e0       	ldi	r31, 0x00	; 0
    2dae:	90 81       	ld	r25, Z
    2db0:	82 95       	swap	r24
    2db2:	88 0f       	add	r24, r24
    2db4:	88 0f       	add	r24, r24
    2db6:	80 7c       	andi	r24, 0xC0	; 192
    2db8:	9f 73       	andi	r25, 0x3F	; 63
    2dba:	98 2b       	or	r25, r24
    2dbc:	90 83       	st	Z, r25
    2dbe:	08 95       	ret

00002dc0 <main>:
    2dc0:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <CBOT_ISR_init>
    2dc4:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <CBOT_init>
    2dc8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <CBOT_main>
    2dcc:	80 e0       	ldi	r24, 0x00	; 0
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	08 95       	ret

00002dd2 <LCD_clear>:
    2dd2:	0f 93       	push	r16
    2dd4:	1f 93       	push	r17
    2dd6:	80 e4       	ldi	r24, 0x40	; 64
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2dde:	00 e0       	ldi	r16, 0x00	; 0
    2de0:	80 2f       	mov	r24, r16
    2de2:	60 e0       	ldi	r22, 0x00	; 0
    2de4:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <LCD_set_PGC_addr>
    2de8:	10 e0       	ldi	r17, 0x00	; 0
    2dea:	80 e0       	ldi	r24, 0x00	; 0
    2dec:	61 e0       	ldi	r22, 0x01	; 1
    2dee:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2df2:	1f 5f       	subi	r17, 0xFF	; 255
    2df4:	10 38       	cpi	r17, 0x80	; 128
    2df6:	c9 f7       	brne	.-14     	; 0x2dea <LCD_clear+0x18>
    2df8:	0f 5f       	subi	r16, 0xFF	; 255
    2dfa:	04 30       	cpi	r16, 0x04	; 4
    2dfc:	89 f7       	brne	.-30     	; 0x2de0 <LCD_clear+0xe>
    2dfe:	83 e0       	ldi	r24, 0x03	; 3
    2e00:	60 e0       	ldi	r22, 0x00	; 0
    2e02:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <LCD_set_next_PGC>
    2e06:	1f 91       	pop	r17
    2e08:	0f 91       	pop	r16
    2e0a:	08 95       	ret

00002e0c <LCD_open>:
    2e0c:	0f 93       	push	r16
    2e0e:	1f 93       	push	r17
    2e10:	82 e0       	ldi	r24, 0x02	; 2
    2e12:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    2e16:	88 23       	and	r24, r24
    2e18:	11 f4       	brne	.+4      	; 0x2e1e <LCD_open+0x12>
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	06 c0       	rjmp	.+12     	; 0x2e2a <LCD_open+0x1e>
    2e1e:	81 e0       	ldi	r24, 0x01	; 1
    2e20:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    2e24:	88 23       	and	r24, r24
    2e26:	19 f4       	brne	.+6      	; 0x2e2e <LCD_open+0x22>
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	6d c0       	rjmp	.+218    	; 0x2f08 <LCD_open+0xfc>
    2e2e:	0e 94 5c 21 	call	0x42b8	; 0x42b8 <__LCD_init>
    2e32:	85 e0       	ldi	r24, 0x05	; 5
    2e34:	61 e0       	ldi	r22, 0x01	; 1
    2e36:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    2e3a:	8e ea       	ldi	r24, 0xAE	; 174
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2e42:	82 ea       	ldi	r24, 0xA2	; 162
    2e44:	60 e0       	ldi	r22, 0x00	; 0
    2e46:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2e4a:	80 ea       	ldi	r24, 0xA0	; 160
    2e4c:	60 e0       	ldi	r22, 0x00	; 0
    2e4e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2e52:	00 e5       	ldi	r16, 0x50	; 80
    2e54:	13 ec       	ldi	r17, 0xC3	; 195
    2e56:	c8 01       	movw	r24, r16
    2e58:	01 97       	sbiw	r24, 0x01	; 1
    2e5a:	f1 f7       	brne	.-4      	; 0x2e58 <LCD_open+0x4c>
    2e5c:	80 ec       	ldi	r24, 0xC0	; 192
    2e5e:	60 e0       	ldi	r22, 0x00	; 0
    2e60:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2e64:	8f e2       	ldi	r24, 0x2F	; 47
    2e66:	60 e0       	ldi	r22, 0x00	; 0
    2e68:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2e6c:	81 e8       	ldi	r24, 0x81	; 129
    2e6e:	60 e0       	ldi	r22, 0x00	; 0
    2e70:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2e74:	86 e1       	ldi	r24, 0x16	; 22
    2e76:	60 e0       	ldi	r22, 0x00	; 0
    2e78:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2e7c:	82 e2       	ldi	r24, 0x22	; 34
    2e7e:	60 e0       	ldi	r22, 0x00	; 0
    2e80:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2e84:	c8 01       	movw	r24, r16
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	f1 f7       	brne	.-4      	; 0x2e86 <LCD_open+0x7a>
    2e8a:	8f ea       	ldi	r24, 0xAF	; 175
    2e8c:	60 e0       	ldi	r22, 0x00	; 0
    2e8e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2e92:	86 ea       	ldi	r24, 0xA6	; 166
    2e94:	60 e0       	ldi	r22, 0x00	; 0
    2e96:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2e9a:	85 ea       	ldi	r24, 0xA5	; 165
    2e9c:	60 e0       	ldi	r22, 0x00	; 0
    2e9e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	90 e0       	ldi	r25, 0x00	; 0
    2ea6:	28 e8       	ldi	r18, 0x88	; 136
    2ea8:	33 e1       	ldi	r19, 0x13	; 19
    2eaa:	f9 01       	movw	r30, r18
    2eac:	31 97       	sbiw	r30, 0x01	; 1
    2eae:	f1 f7       	brne	.-4      	; 0x2eac <LCD_open+0xa0>
    2eb0:	01 96       	adiw	r24, 0x01	; 1
    2eb2:	43 e0       	ldi	r20, 0x03	; 3
    2eb4:	88 3e       	cpi	r24, 0xE8	; 232
    2eb6:	94 07       	cpc	r25, r20
    2eb8:	c1 f7       	brne	.-16     	; 0x2eaa <LCD_open+0x9e>
    2eba:	83 eb       	ldi	r24, 0xB3	; 179
    2ebc:	60 e0       	ldi	r22, 0x00	; 0
    2ebe:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2ec2:	80 e4       	ldi	r24, 0x40	; 64
    2ec4:	60 e0       	ldi	r22, 0x00	; 0
    2ec6:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2eca:	83 e0       	ldi	r24, 0x03	; 3
    2ecc:	60 e0       	ldi	r22, 0x00	; 0
    2ece:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <LCD_set_PGC_addr>
    2ed2:	83 e0       	ldi	r24, 0x03	; 3
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	0e 94 a8 17 	call	0x2f50	; 0x2f50 <LCD_set_next_PGC>
    2eda:	10 92 9d 06 	sts	0x069D, r1
    2ede:	10 92 9f 06 	sts	0x069F, r1
    2ee2:	10 92 9e 06 	sts	0x069E, r1
    2ee6:	80 e6       	ldi	r24, 0x60	; 96
    2ee8:	93 e0       	ldi	r25, 0x03	; 3
    2eea:	90 93 ce 06 	sts	0x06CE, r25
    2eee:	80 93 cd 06 	sts	0x06CD, r24
    2ef2:	88 e1       	ldi	r24, 0x18	; 24
    2ef4:	0e 94 87 17 	call	0x2f0e	; 0x2f0e <LCD_set_backlight>
    2ef8:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
    2efc:	84 ea       	ldi	r24, 0xA4	; 164
    2efe:	60 e0       	ldi	r22, 0x00	; 0
    2f00:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2f04:	85 e0       	ldi	r24, 0x05	; 5
    2f06:	91 e0       	ldi	r25, 0x01	; 1
    2f08:	1f 91       	pop	r17
    2f0a:	0f 91       	pop	r16
    2f0c:	08 95       	ret

00002f0e <LCD_set_backlight>:
    2f0e:	1f 93       	push	r17
    2f10:	18 2f       	mov	r17, r24
    2f12:	85 e0       	ldi	r24, 0x05	; 5
    2f14:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    2f18:	81 30       	cpi	r24, 0x01	; 1
    2f1a:	c1 f4       	brne	.+48     	; 0x2f4c <LCD_set_backlight+0x3e>
    2f1c:	87 e0       	ldi	r24, 0x07	; 7
    2f1e:	0e 94 04 18 	call	0x3008	; 0x3008 <SPI_set_slave_addr>
    2f22:	82 e0       	ldi	r24, 0x02	; 2
    2f24:	6a e0       	ldi	r22, 0x0A	; 10
    2f26:	0e 94 55 18 	call	0x30aa	; 0x30aa <SPI_transmit>
    2f2a:	82 e0       	ldi	r24, 0x02	; 2
    2f2c:	61 eb       	ldi	r22, 0xB1	; 177
    2f2e:	0e 94 55 18 	call	0x30aa	; 0x30aa <SPI_transmit>
    2f32:	61 2f       	mov	r22, r17
    2f34:	11 32       	cpi	r17, 0x21	; 33
    2f36:	08 f0       	brcs	.+2      	; 0x2f3a <LCD_set_backlight+0x2c>
    2f38:	60 e2       	ldi	r22, 0x20	; 32
    2f3a:	82 e0       	ldi	r24, 0x02	; 2
    2f3c:	0e 94 55 18 	call	0x30aa	; 0x30aa <SPI_transmit>
    2f40:	89 ee       	ldi	r24, 0xE9	; 233
    2f42:	8a 95       	dec	r24
    2f44:	f1 f7       	brne	.-4      	; 0x2f42 <LCD_set_backlight+0x34>
    2f46:	87 e0       	ldi	r24, 0x07	; 7
    2f48:	0e 94 04 18 	call	0x3008	; 0x3008 <SPI_set_slave_addr>
    2f4c:	1f 91       	pop	r17
    2f4e:	08 95       	ret

00002f50 <LCD_set_next_PGC>:
    2f50:	83 70       	andi	r24, 0x03	; 3
    2f52:	6f 77       	andi	r22, 0x7F	; 127
    2f54:	60 93 9b 06 	sts	0x069B, r22
    2f58:	80 93 9c 06 	sts	0x069C, r24
    2f5c:	08 95       	ret

00002f5e <LCD_set_PGC_addr>:
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    2f62:	06 2f       	mov	r16, r22
    2f64:	16 2f       	mov	r17, r22
    2f66:	1f 77       	andi	r17, 0x7F	; 127
    2f68:	83 70       	andi	r24, 0x03	; 3
    2f6a:	80 6b       	ori	r24, 0xB0	; 176
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2f72:	12 95       	swap	r17
    2f74:	1f 70       	andi	r17, 0x0F	; 15
    2f76:	81 2f       	mov	r24, r17
    2f78:	80 61       	ori	r24, 0x10	; 16
    2f7a:	60 e0       	ldi	r22, 0x00	; 0
    2f7c:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2f80:	80 2f       	mov	r24, r16
    2f82:	8f 70       	andi	r24, 0x0F	; 15
    2f84:	60 e0       	ldi	r22, 0x00	; 0
    2f86:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    2f8a:	1f 91       	pop	r17
    2f8c:	0f 91       	pop	r16
    2f8e:	08 95       	ret

00002f90 <LCD_write>:
    2f90:	0f 93       	push	r16
    2f92:	1f 93       	push	r17
    2f94:	08 2f       	mov	r16, r24
    2f96:	16 2f       	mov	r17, r22
    2f98:	85 e0       	ldi	r24, 0x05	; 5
    2f9a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    2f9e:	81 30       	cpi	r24, 0x01	; 1
    2fa0:	79 f4       	brne	.+30     	; 0x2fc0 <LCD_write+0x30>
    2fa2:	11 23       	and	r17, r17
    2fa4:	19 f0       	breq	.+6      	; 0x2fac <LCD_write+0x1c>
    2fa6:	11 30       	cpi	r17, 0x01	; 1
    2fa8:	21 f4       	brne	.+8      	; 0x2fb2 <LCD_write+0x22>
    2faa:	02 c0       	rjmp	.+4      	; 0x2fb0 <LCD_write+0x20>
    2fac:	2b 98       	cbi	0x05, 3	; 5
    2fae:	01 c0       	rjmp	.+2      	; 0x2fb2 <LCD_write+0x22>
    2fb0:	2b 9a       	sbi	0x05, 3	; 5
    2fb2:	86 e0       	ldi	r24, 0x06	; 6
    2fb4:	8a 95       	dec	r24
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <LCD_write+0x24>
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	60 2f       	mov	r22, r16
    2fbc:	0e 94 55 18 	call	0x30aa	; 0x30aa <SPI_transmit>
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	08 95       	ret

00002fc6 <LED_clr_pattern>:
    2fc6:	1f 93       	push	r17
    2fc8:	18 2f       	mov	r17, r24
    2fca:	86 e0       	ldi	r24, 0x06	; 6
    2fcc:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    2fd0:	81 30       	cpi	r24, 0x01	; 1
    2fd2:	19 f4       	brne	.+6      	; 0x2fda <LED_clr_pattern+0x14>
    2fd4:	81 2f       	mov	r24, r17
    2fd6:	0e 94 0b 22 	call	0x4416	; 0x4416 <__LED_clr_pattern>
    2fda:	1f 91       	pop	r17
    2fdc:	08 95       	ret

00002fde <LED_open>:
    2fde:	0e 94 10 22 	call	0x4420	; 0x4420 <__LED_init>
    2fe2:	86 e0       	ldi	r24, 0x06	; 6
    2fe4:	61 e0       	ldi	r22, 0x01	; 1
    2fe6:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    2fea:	86 e0       	ldi	r24, 0x06	; 6
    2fec:	91 e0       	ldi	r25, 0x01	; 1
    2fee:	08 95       	ret

00002ff0 <LED_set_pattern>:
    2ff0:	1f 93       	push	r17
    2ff2:	18 2f       	mov	r17, r24
    2ff4:	86 e0       	ldi	r24, 0x06	; 6
    2ff6:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    2ffa:	81 30       	cpi	r24, 0x01	; 1
    2ffc:	19 f4       	brne	.+6      	; 0x3004 <LED_set_pattern+0x14>
    2ffe:	81 2f       	mov	r24, r17
    3000:	0e 94 13 22 	call	0x4426	; 0x4426 <__LED_set_pattern>
    3004:	1f 91       	pop	r17
    3006:	08 95       	ret

00003008 <SPI_set_slave_addr>:
    3008:	1f 93       	push	r17
    300a:	18 2f       	mov	r17, r24
    300c:	82 e0       	ldi	r24, 0x02	; 2
    300e:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    3012:	81 30       	cpi	r24, 0x01	; 1
    3014:	09 f0       	breq	.+2      	; 0x3018 <SPI_set_slave_addr+0x10>
    3016:	47 c0       	rjmp	.+142    	; 0x30a6 <SPI_set_slave_addr+0x9e>
    3018:	91 2f       	mov	r25, r17
    301a:	97 70       	andi	r25, 0x07	; 7
    301c:	80 91 a0 06 	lds	r24, 0x06A0
    3020:	98 17       	cp	r25, r24
    3022:	09 f4       	brne	.+2      	; 0x3026 <SPI_set_slave_addr+0x1e>
    3024:	40 c0       	rjmp	.+128    	; 0x30a6 <SPI_set_slave_addr+0x9e>
    3026:	90 93 a0 06 	sts	0x06A0, r25
    302a:	85 b1       	in	r24, 0x05	; 5
    302c:	88 7f       	andi	r24, 0xF8	; 248
    302e:	89 2b       	or	r24, r25
    3030:	85 b9       	out	0x05, r24	; 5
    3032:	93 30       	cpi	r25, 0x03	; 3
    3034:	11 f1       	breq	.+68     	; 0x307a <SPI_set_slave_addr+0x72>
    3036:	94 30       	cpi	r25, 0x04	; 4
    3038:	28 f4       	brcc	.+10     	; 0x3044 <SPI_set_slave_addr+0x3c>
    303a:	91 30       	cpi	r25, 0x01	; 1
    303c:	51 f0       	breq	.+20     	; 0x3052 <SPI_set_slave_addr+0x4a>
    303e:	92 30       	cpi	r25, 0x02	; 2
    3040:	90 f4       	brcc	.+36     	; 0x3066 <SPI_set_slave_addr+0x5e>
    3042:	0c c0       	rjmp	.+24     	; 0x305c <SPI_set_slave_addr+0x54>
    3044:	95 30       	cpi	r25, 0x05	; 5
    3046:	19 f1       	breq	.+70     	; 0x308e <SPI_set_slave_addr+0x86>
    3048:	95 30       	cpi	r25, 0x05	; 5
    304a:	e0 f0       	brcs	.+56     	; 0x3084 <SPI_set_slave_addr+0x7c>
    304c:	96 30       	cpi	r25, 0x06	; 6
    304e:	21 f5       	brne	.+72     	; 0x3098 <SPI_set_slave_addr+0x90>
    3050:	0f c0       	rjmp	.+30     	; 0x3070 <SPI_set_slave_addr+0x68>
    3052:	e0 91 2a 04 	lds	r30, 0x042A
    3056:	f0 91 2b 04 	lds	r31, 0x042B
    305a:	22 c0       	rjmp	.+68     	; 0x30a0 <SPI_set_slave_addr+0x98>
    305c:	e0 91 28 04 	lds	r30, 0x0428
    3060:	f0 91 29 04 	lds	r31, 0x0429
    3064:	1d c0       	rjmp	.+58     	; 0x30a0 <SPI_set_slave_addr+0x98>
    3066:	e0 91 2c 04 	lds	r30, 0x042C
    306a:	f0 91 2d 04 	lds	r31, 0x042D
    306e:	18 c0       	rjmp	.+48     	; 0x30a0 <SPI_set_slave_addr+0x98>
    3070:	e0 91 34 04 	lds	r30, 0x0434
    3074:	f0 91 35 04 	lds	r31, 0x0435
    3078:	13 c0       	rjmp	.+38     	; 0x30a0 <SPI_set_slave_addr+0x98>
    307a:	e0 91 2e 04 	lds	r30, 0x042E
    307e:	f0 91 2f 04 	lds	r31, 0x042F
    3082:	0e c0       	rjmp	.+28     	; 0x30a0 <SPI_set_slave_addr+0x98>
    3084:	e0 91 30 04 	lds	r30, 0x0430
    3088:	f0 91 31 04 	lds	r31, 0x0431
    308c:	09 c0       	rjmp	.+18     	; 0x30a0 <SPI_set_slave_addr+0x98>
    308e:	e0 91 32 04 	lds	r30, 0x0432
    3092:	f0 91 33 04 	lds	r31, 0x0433
    3096:	04 c0       	rjmp	.+8      	; 0x30a0 <SPI_set_slave_addr+0x98>
    3098:	e0 91 36 04 	lds	r30, 0x0436
    309c:	f0 91 37 04 	lds	r31, 0x0437
    30a0:	30 97       	sbiw	r30, 0x00	; 0
    30a2:	09 f0       	breq	.+2      	; 0x30a6 <SPI_set_slave_addr+0x9e>
    30a4:	09 95       	icall
    30a6:	1f 91       	pop	r17
    30a8:	08 95       	ret

000030aa <SPI_transmit>:
    30aa:	1f 93       	push	r17
    30ac:	16 2f       	mov	r17, r22
    30ae:	0e 94 04 18 	call	0x3008	; 0x3008 <SPI_set_slave_addr>
    30b2:	82 e0       	ldi	r24, 0x02	; 2
    30b4:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    30b8:	81 30       	cpi	r24, 0x01	; 1
    30ba:	21 f4       	brne	.+8      	; 0x30c4 <SPI_transmit+0x1a>
    30bc:	1e bd       	out	0x2e, r17	; 46
    30be:	0d b4       	in	r0, 0x2d	; 45
    30c0:	07 fe       	sbrs	r0, 7
    30c2:	fd cf       	rjmp	.-6      	; 0x30be <SPI_transmit+0x14>
    30c4:	1f 91       	pop	r17
    30c6:	08 95       	ret

000030c8 <__SPKR_set_up_freq_LUT>:
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	cf 93       	push	r28
    30ce:	df 93       	push	r29
    30d0:	80 e2       	ldi	r24, 0x20	; 32
    30d2:	91 e0       	ldi	r25, 0x01	; 1
    30d4:	0e 94 61 31 	call	0x62c2	; 0x62c2 <malloc>
    30d8:	9c 01       	movw	r18, r24
    30da:	90 93 47 04 	sts	0x0447, r25
    30de:	80 93 46 04 	sts	0x0446, r24
    30e2:	89 2b       	or	r24, r25
    30e4:	11 f4       	brne	.+4      	; 0x30ea <__SPKR_set_up_freq_LUT+0x22>
    30e6:	80 e0       	ldi	r24, 0x00	; 0
    30e8:	39 c0       	rjmp	.+114    	; 0x315c <__SPKR_set_up_freq_LUT+0x94>
    30ea:	89 01       	movw	r16, r18
    30ec:	c0 e0       	ldi	r28, 0x00	; 0
    30ee:	d0 e0       	ldi	r29, 0x00	; 0
    30f0:	be 01       	movw	r22, r28
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	90 e0       	ldi	r25, 0x00	; 0
    30f6:	0e 94 a2 2a 	call	0x5544	; 0x5544 <__floatunsisf>
    30fa:	20 e0       	ldi	r18, 0x00	; 0
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	40 ea       	ldi	r20, 0xA0	; 160
    3100:	51 e4       	ldi	r21, 0x41	; 65
    3102:	0e 94 09 2a 	call	0x5412	; 0x5412 <__divsf3>
    3106:	27 ef       	ldi	r18, 0xF7	; 247
    3108:	35 e7       	ldi	r19, 0x75	; 117
    310a:	40 e0       	ldi	r20, 0x00	; 0
    310c:	5f e3       	ldi	r21, 0x3F	; 63
    310e:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    3112:	9b 01       	movw	r18, r22
    3114:	ac 01       	movw	r20, r24
    3116:	60 e0       	ldi	r22, 0x00	; 0
    3118:	70 e0       	ldi	r23, 0x00	; 0
    311a:	80 e2       	ldi	r24, 0x20	; 32
    311c:	91 e4       	ldi	r25, 0x41	; 65
    311e:	0e 94 f5 2b 	call	0x57ea	; 0x57ea <pow>
    3122:	9b 01       	movw	r18, r22
    3124:	ac 01       	movw	r20, r24
    3126:	ca 01       	movw	r24, r20
    3128:	b9 01       	movw	r22, r18
    312a:	2d ec       	ldi	r18, 0xCD	; 205
    312c:	3c ec       	ldi	r19, 0xCC	; 204
    312e:	42 e8       	ldi	r20, 0x82	; 130
    3130:	51 e4       	ldi	r21, 0x41	; 65
    3132:	0e 94 92 2b 	call	0x5724	; 0x5724 <__mulsf3>
    3136:	0e 94 58 2b 	call	0x56b0	; 0x56b0 <lrint>
    313a:	2a e0       	ldi	r18, 0x0A	; 10
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	40 e0       	ldi	r20, 0x00	; 0
    3140:	50 e0       	ldi	r21, 0x00	; 0
    3142:	0e 94 c2 30 	call	0x6184	; 0x6184 <__mulsi3>
    3146:	f8 01       	movw	r30, r16
    3148:	61 93       	st	Z+, r22
    314a:	71 93       	st	Z+, r23
    314c:	81 93       	st	Z+, r24
    314e:	91 93       	st	Z+, r25
    3150:	8f 01       	movw	r16, r30
    3152:	21 96       	adiw	r28, 0x01	; 1
    3154:	c8 34       	cpi	r28, 0x48	; 72
    3156:	d1 05       	cpc	r29, r1
    3158:	59 f6       	brne	.-106    	; 0x30f0 <__SPKR_set_up_freq_LUT+0x28>
    315a:	81 e0       	ldi	r24, 0x01	; 1
    315c:	df 91       	pop	r29
    315e:	cf 91       	pop	r28
    3160:	1f 91       	pop	r17
    3162:	0f 91       	pop	r16
    3164:	08 95       	ret

00003166 <__SPKR_open_beep_mode>:
    3166:	8a e0       	ldi	r24, 0x0A	; 10
    3168:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    316c:	88 23       	and	r24, r24
    316e:	71 f4       	brne	.+28     	; 0x318c <__SPKR_open_beep_mode+0x26>
    3170:	10 92 43 04 	sts	0x0443, r1
    3174:	10 92 42 04 	sts	0x0442, r1
    3178:	81 e0       	ldi	r24, 0x01	; 1
    317a:	0e 94 4e 23 	call	0x469c	; 0x469c <__SPKR_init>
    317e:	81 e0       	ldi	r24, 0x01	; 1
    3180:	80 93 39 04 	sts	0x0439, r24
    3184:	8a e0       	ldi	r24, 0x0A	; 10
    3186:	61 e0       	ldi	r22, 0x01	; 1
    3188:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    318c:	8a e0       	ldi	r24, 0x0A	; 10
    318e:	91 e0       	ldi	r25, 0x01	; 1
    3190:	08 95       	ret

00003192 <__SPKR_open_tone_mode>:
    3192:	1f 93       	push	r17
    3194:	8b e0       	ldi	r24, 0x0B	; 11
    3196:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    319a:	88 23       	and	r24, r24
    319c:	11 f0       	breq	.+4      	; 0x31a2 <__SPKR_open_tone_mode+0x10>
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	21 c0       	rjmp	.+66     	; 0x31e4 <__SPKR_open_tone_mode+0x52>
    31a2:	89 e0       	ldi	r24, 0x09	; 9
    31a4:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    31a8:	88 23       	and	r24, r24
    31aa:	d9 f4       	brne	.+54     	; 0x31e2 <__SPKR_open_tone_mode+0x50>
    31ac:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__SPKR_set_up_freq_LUT>
    31b0:	18 2f       	mov	r17, r24
    31b2:	81 30       	cpi	r24, 0x01	; 1
    31b4:	b1 f4       	brne	.+44     	; 0x31e2 <__SPKR_open_tone_mode+0x50>
    31b6:	10 92 3a 04 	sts	0x043A, r1
    31ba:	10 92 3b 04 	sts	0x043B, r1
    31be:	10 92 3c 04 	sts	0x043C, r1
    31c2:	10 92 3d 04 	sts	0x043D, r1
    31c6:	8d e0       	ldi	r24, 0x0D	; 13
    31c8:	61 ed       	ldi	r22, 0xD1	; 209
    31ca:	72 e2       	ldi	r23, 0x22	; 34
    31cc:	0e 94 34 21 	call	0x4268	; 0x4268 <ISR_attach>
    31d0:	82 e0       	ldi	r24, 0x02	; 2
    31d2:	0e 94 4e 23 	call	0x469c	; 0x469c <__SPKR_init>
    31d6:	10 93 38 04 	sts	0x0438, r17
    31da:	89 e0       	ldi	r24, 0x09	; 9
    31dc:	61 e0       	ldi	r22, 0x01	; 1
    31de:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    31e2:	91 e0       	ldi	r25, 0x01	; 1
    31e4:	89 e0       	ldi	r24, 0x09	; 9
    31e6:	1f 91       	pop	r17
    31e8:	08 95       	ret

000031ea <SPKR_open>:
    31ea:	81 30       	cpi	r24, 0x01	; 1
    31ec:	29 f0       	breq	.+10     	; 0x31f8 <SPKR_open+0xe>
    31ee:	82 30       	cpi	r24, 0x02	; 2
    31f0:	31 f0       	breq	.+12     	; 0x31fe <SPKR_open+0x14>
    31f2:	90 e0       	ldi	r25, 0x00	; 0
    31f4:	89 e0       	ldi	r24, 0x09	; 9
    31f6:	08 95       	ret
    31f8:	0e 94 b3 18 	call	0x3166	; 0x3166 <__SPKR_open_beep_mode>
    31fc:	08 95       	ret
    31fe:	0e 94 c9 18 	call	0x3192	; 0x3192 <__SPKR_open_tone_mode>
    3202:	08 95       	ret

00003204 <STEPPER_get_nSteps>:
    3204:	80 91 61 06 	lds	r24, 0x0661
    3208:	90 91 62 06 	lds	r25, 0x0662
    320c:	20 91 63 06 	lds	r18, 0x0663
    3210:	30 91 64 06 	lds	r19, 0x0664
    3214:	bc 01       	movw	r22, r24
    3216:	c9 01       	movw	r24, r18
    3218:	08 95       	ret

0000321a <STEPPER_stepmode>:
    321a:	2f 92       	push	r2
    321c:	3f 92       	push	r3
    321e:	4f 92       	push	r4
    3220:	5f 92       	push	r5
    3222:	6f 92       	push	r6
    3224:	7f 92       	push	r7
    3226:	8f 92       	push	r8
    3228:	9f 92       	push	r9
    322a:	af 92       	push	r10
    322c:	bf 92       	push	r11
    322e:	cf 92       	push	r12
    3230:	df 92       	push	r13
    3232:	ef 92       	push	r14
    3234:	ff 92       	push	r15
    3236:	0f 93       	push	r16
    3238:	1f 93       	push	r17
    323a:	df 93       	push	r29
    323c:	cf 93       	push	r28
    323e:	cd b7       	in	r28, 0x3d	; 61
    3240:	de b7       	in	r29, 0x3e	; 62
    3242:	58 2e       	mov	r5, r24
    3244:	96 2e       	mov	r9, r22
    3246:	44 2e       	mov	r4, r20
    3248:	39 01       	movw	r6, r18
    324a:	3c 2c       	mov	r3, r12
    324c:	c9 8c       	ldd	r12, Y+25	; 0x19
    324e:	da 8c       	ldd	r13, Y+26	; 0x1a
    3250:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3252:	81 e0       	ldi	r24, 0x01	; 1
    3254:	68 17       	cp	r22, r24
    3256:	39 f1       	breq	.+78     	; 0x32a6 <STEPPER_stepmode+0x8c>
    3258:	68 17       	cp	r22, r24
    325a:	28 f0       	brcs	.+10     	; 0x3266 <STEPPER_stepmode+0x4c>
    325c:	92 e0       	ldi	r25, 0x02	; 2
    325e:	69 17       	cp	r22, r25
    3260:	09 f0       	breq	.+2      	; 0x3264 <STEPPER_stepmode+0x4a>
    3262:	85 c0       	rjmp	.+266    	; 0x336e <STEPPER_stepmode+0x154>
    3264:	49 c0       	rjmp	.+146    	; 0x32f8 <STEPPER_stepmode+0xde>
    3266:	80 e0       	ldi	r24, 0x00	; 0
    3268:	61 e0       	ldi	r22, 0x01	; 1
    326a:	0e 94 16 1b 	call	0x362c	; 0x362c <STEPPER_set_mode>
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	b7 01       	movw	r22, r14
    3272:	0e 94 df 1a 	call	0x35be	; 0x35be <STEPPER_set_accel>
    3276:	80 e0       	ldi	r24, 0x00	; 0
    3278:	64 2d       	mov	r22, r4
    327a:	a3 01       	movw	r20, r6
    327c:	98 01       	movw	r18, r16
    327e:	03 2d       	mov	r16, r3
    3280:	ee 24       	eor	r14, r14
    3282:	e3 94       	inc	r14
    3284:	e6 e8       	ldi	r30, 0x86	; 134
    3286:	ce 2e       	mov	r12, r30
    3288:	e6 e0       	ldi	r30, 0x06	; 6
    328a:	de 2e       	mov	r13, r30
    328c:	0e 94 4d 1b 	call	0x369a	; 0x369a <STEPPER_step>
    3290:	55 20       	and	r5, r5
    3292:	09 f0       	breq	.+2      	; 0x3296 <STEPPER_stepmode+0x7c>
    3294:	6c c0       	rjmp	.+216    	; 0x336e <STEPPER_stepmode+0x154>
    3296:	00 d0       	rcall	.+0      	; 0x3298 <STEPPER_stepmode+0x7e>
    3298:	0f 92       	push	r0
    329a:	ed b7       	in	r30, 0x3d	; 61
    329c:	fe b7       	in	r31, 0x3e	; 62
    329e:	11 82       	std	Z+1, r1	; 0x01
    32a0:	b3 82       	std	Z+3, r11	; 0x03
    32a2:	a2 82       	std	Z+2, r10	; 0x02
    32a4:	23 c0       	rjmp	.+70     	; 0x32ec <STEPPER_stepmode+0xd2>
    32a6:	81 e0       	ldi	r24, 0x01	; 1
    32a8:	61 e0       	ldi	r22, 0x01	; 1
    32aa:	0e 94 16 1b 	call	0x362c	; 0x362c <STEPPER_set_mode>
    32ae:	81 e0       	ldi	r24, 0x01	; 1
    32b0:	b6 01       	movw	r22, r12
    32b2:	0e 94 df 1a 	call	0x35be	; 0x35be <STEPPER_set_accel>
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	68 2d       	mov	r22, r8
    32ba:	4d 89       	ldd	r20, Y+21	; 0x15
    32bc:	5e 89       	ldd	r21, Y+22	; 0x16
    32be:	2f 89       	ldd	r18, Y+23	; 0x17
    32c0:	38 8d       	ldd	r19, Y+24	; 0x18
    32c2:	02 2d       	mov	r16, r2
    32c4:	ee 24       	eor	r14, r14
    32c6:	e3 94       	inc	r14
    32c8:	76 e8       	ldi	r23, 0x86	; 134
    32ca:	c7 2e       	mov	r12, r23
    32cc:	76 e0       	ldi	r23, 0x06	; 6
    32ce:	d7 2e       	mov	r13, r23
    32d0:	0e 94 4d 1b 	call	0x369a	; 0x369a <STEPPER_step>
    32d4:	55 20       	and	r5, r5
    32d6:	09 f0       	breq	.+2      	; 0x32da <STEPPER_stepmode+0xc0>
    32d8:	4a c0       	rjmp	.+148    	; 0x336e <STEPPER_stepmode+0x154>
    32da:	00 d0       	rcall	.+0      	; 0x32dc <STEPPER_stepmode+0xc2>
    32dc:	0f 92       	push	r0
    32de:	ed b7       	in	r30, 0x3d	; 61
    32e0:	fe b7       	in	r31, 0x3e	; 62
    32e2:	91 82       	std	Z+1, r9	; 0x01
    32e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    32e6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    32e8:	93 83       	std	Z+3, r25	; 0x03
    32ea:	82 83       	std	Z+2, r24	; 0x02
    32ec:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <STEPPER_wait_and_then>
    32f0:	0f 90       	pop	r0
    32f2:	0f 90       	pop	r0
    32f4:	0f 90       	pop	r0
    32f6:	3b c0       	rjmp	.+118    	; 0x336e <STEPPER_stepmode+0x154>
    32f8:	82 e0       	ldi	r24, 0x02	; 2
    32fa:	61 e0       	ldi	r22, 0x01	; 1
    32fc:	0e 94 16 1b 	call	0x362c	; 0x362c <STEPPER_set_mode>
    3300:	80 e0       	ldi	r24, 0x00	; 0
    3302:	b7 01       	movw	r22, r14
    3304:	0e 94 df 1a 	call	0x35be	; 0x35be <STEPPER_set_accel>
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	b6 01       	movw	r22, r12
    330c:	0e 94 df 1a 	call	0x35be	; 0x35be <STEPPER_set_accel>
    3310:	80 e0       	ldi	r24, 0x00	; 0
    3312:	64 2d       	mov	r22, r4
    3314:	a3 01       	movw	r20, r6
    3316:	98 01       	movw	r18, r16
    3318:	03 2d       	mov	r16, r3
    331a:	ee 24       	eor	r14, r14
    331c:	e3 94       	inc	r14
    331e:	96 e8       	ldi	r25, 0x86	; 134
    3320:	c9 2e       	mov	r12, r25
    3322:	96 e0       	ldi	r25, 0x06	; 6
    3324:	d9 2e       	mov	r13, r25
    3326:	0e 94 4d 1b 	call	0x369a	; 0x369a <STEPPER_step>
    332a:	81 e0       	ldi	r24, 0x01	; 1
    332c:	68 2d       	mov	r22, r8
    332e:	4d 89       	ldd	r20, Y+21	; 0x15
    3330:	5e 89       	ldd	r21, Y+22	; 0x16
    3332:	2f 89       	ldd	r18, Y+23	; 0x17
    3334:	38 8d       	ldd	r19, Y+24	; 0x18
    3336:	02 2d       	mov	r16, r2
    3338:	0e 94 4d 1b 	call	0x369a	; 0x369a <STEPPER_step>
    333c:	55 20       	and	r5, r5
    333e:	b9 f4       	brne	.+46     	; 0x336e <STEPPER_stepmode+0x154>
    3340:	00 d0       	rcall	.+0      	; 0x3342 <STEPPER_stepmode+0x128>
    3342:	00 d0       	rcall	.+0      	; 0x3344 <STEPPER_stepmode+0x12a>
    3344:	0f 92       	push	r0
    3346:	ad b7       	in	r26, 0x3d	; 61
    3348:	be b7       	in	r27, 0x3e	; 62
    334a:	11 96       	adiw	r26, 0x01	; 1
    334c:	ed b7       	in	r30, 0x3d	; 61
    334e:	fe b7       	in	r31, 0x3e	; 62
    3350:	91 82       	std	Z+1, r9	; 0x01
    3352:	fd 01       	movw	r30, r26
    3354:	b2 82       	std	Z+2, r11	; 0x02
    3356:	a1 82       	std	Z+1, r10	; 0x01
    3358:	8c 8d       	ldd	r24, Y+28	; 0x1c
    335a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    335c:	94 83       	std	Z+4, r25	; 0x04
    335e:	83 83       	std	Z+3, r24	; 0x03
    3360:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <STEPPER_wait_and_then>
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	0f 90       	pop	r0
    336a:	0f 90       	pop	r0
    336c:	0f 90       	pop	r0
    336e:	cf 91       	pop	r28
    3370:	df 91       	pop	r29
    3372:	1f 91       	pop	r17
    3374:	0f 91       	pop	r16
    3376:	ff 90       	pop	r15
    3378:	ef 90       	pop	r14
    337a:	df 90       	pop	r13
    337c:	cf 90       	pop	r12
    337e:	bf 90       	pop	r11
    3380:	af 90       	pop	r10
    3382:	9f 90       	pop	r9
    3384:	8f 90       	pop	r8
    3386:	7f 90       	pop	r7
    3388:	6f 90       	pop	r6
    338a:	5f 90       	pop	r5
    338c:	4f 90       	pop	r4
    338e:	3f 90       	pop	r3
    3390:	2f 90       	pop	r2
    3392:	08 95       	ret

00003394 <STEPPER_move>:
    3394:	6f 92       	push	r6
    3396:	7f 92       	push	r7
    3398:	8f 92       	push	r8
    339a:	9f 92       	push	r9
    339c:	af 92       	push	r10
    339e:	bf 92       	push	r11
    33a0:	cf 92       	push	r12
    33a2:	df 92       	push	r13
    33a4:	ef 92       	push	r14
    33a6:	ff 92       	push	r15
    33a8:	0f 93       	push	r16
    33aa:	1f 93       	push	r17
    33ac:	df 93       	push	r29
    33ae:	cf 93       	push	r28
    33b0:	cd b7       	in	r28, 0x3d	; 61
    33b2:	de b7       	in	r29, 0x3e	; 62
    33b4:	94 2e       	mov	r9, r20
    33b6:	7c 2d       	mov	r23, r12
    33b8:	d5 01       	movw	r26, r10
    33ba:	49 89       	ldd	r20, Y+17	; 0x11
    33bc:	5a 89       	ldd	r21, Y+18	; 0x12
    33be:	ab 88       	ldd	r10, Y+19	; 0x13
    33c0:	bc 88       	ldd	r11, Y+20	; 0x14
    33c2:	cd 88       	ldd	r12, Y+21	; 0x15
    33c4:	de 88       	ldd	r13, Y+22	; 0x16
    33c6:	9f 89       	ldd	r25, Y+23	; 0x17
    33c8:	81 30       	cpi	r24, 0x01	; 1
    33ca:	09 f4       	brne	.+2      	; 0x33ce <STEPPER_move+0x3a>
    33cc:	57 c0       	rjmp	.+174    	; 0x347c <STEPPER_move+0xe8>
    33ce:	81 30       	cpi	r24, 0x01	; 1
    33d0:	b8 f1       	brcs	.+110    	; 0x3440 <STEPPER_move+0xac>
    33d2:	82 30       	cpi	r24, 0x02	; 2
    33d4:	09 f0       	breq	.+2      	; 0x33d8 <STEPPER_move+0x44>
    33d6:	76 c0       	rjmp	.+236    	; 0x34c4 <STEPPER_move+0x130>
    33d8:	61 30       	cpi	r22, 0x01	; 1
    33da:	91 f0       	breq	.+36     	; 0x3400 <STEPPER_move+0x6c>
    33dc:	61 30       	cpi	r22, 0x01	; 1
    33de:	20 f0       	brcs	.+8      	; 0x33e8 <STEPPER_move+0x54>
    33e0:	62 30       	cpi	r22, 0x02	; 2
    33e2:	09 f0       	breq	.+2      	; 0x33e6 <STEPPER_move+0x52>
    33e4:	6f c0       	rjmp	.+222    	; 0x34c4 <STEPPER_move+0x130>
    33e6:	15 c0       	rjmp	.+42     	; 0x3412 <STEPPER_move+0x7e>
    33e8:	80 e0       	ldi	r24, 0x00	; 0
    33ea:	60 e0       	ldi	r22, 0x00	; 0
    33ec:	0e 94 16 1b 	call	0x362c	; 0x362c <STEPPER_set_mode>
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	b7 01       	movw	r22, r14
    33f4:	0e 94 df 1a 	call	0x35be	; 0x35be <STEPPER_set_accel>
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	69 2d       	mov	r22, r9
    33fc:	a8 01       	movw	r20, r16
    33fe:	1d c0       	rjmp	.+58     	; 0x343a <STEPPER_move+0xa6>
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	60 e0       	ldi	r22, 0x00	; 0
    3404:	0e 94 16 1b 	call	0x362c	; 0x362c <STEPPER_set_mode>
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	b6 01       	movw	r22, r12
    340c:	0e 94 df 1a 	call	0x35be	; 0x35be <STEPPER_set_accel>
    3410:	11 c0       	rjmp	.+34     	; 0x3434 <STEPPER_move+0xa0>
    3412:	82 e0       	ldi	r24, 0x02	; 2
    3414:	60 e0       	ldi	r22, 0x00	; 0
    3416:	0e 94 16 1b 	call	0x362c	; 0x362c <STEPPER_set_mode>
    341a:	80 e0       	ldi	r24, 0x00	; 0
    341c:	b7 01       	movw	r22, r14
    341e:	0e 94 df 1a 	call	0x35be	; 0x35be <STEPPER_set_accel>
    3422:	81 e0       	ldi	r24, 0x01	; 1
    3424:	b6 01       	movw	r22, r12
    3426:	0e 94 df 1a 	call	0x35be	; 0x35be <STEPPER_set_accel>
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	69 2d       	mov	r22, r9
    342e:	a8 01       	movw	r20, r16
    3430:	0e 94 c8 1a 	call	0x3590	; 0x3590 <STEPPER_run>
    3434:	81 e0       	ldi	r24, 0x01	; 1
    3436:	68 2d       	mov	r22, r8
    3438:	a5 01       	movw	r20, r10
    343a:	0e 94 c8 1a 	call	0x3590	; 0x3590 <STEPPER_run>
    343e:	42 c0       	rjmp	.+132    	; 0x34c4 <STEPPER_move+0x130>
    3440:	ed b7       	in	r30, 0x3d	; 61
    3442:	fe b7       	in	r31, 0x3e	; 62
    3444:	39 97       	sbiw	r30, 0x09	; 9
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	f8 94       	cli
    344a:	fe bf       	out	0x3e, r31	; 62
    344c:	0f be       	out	0x3f, r0	; 63
    344e:	ed bf       	out	0x3d, r30	; 61
    3450:	6d b6       	in	r6, 0x3d	; 61
    3452:	7e b6       	in	r7, 0x3e	; 62
    3454:	08 94       	sec
    3456:	61 1c       	adc	r6, r1
    3458:	71 1c       	adc	r7, r1
    345a:	52 83       	std	Z+2, r21	; 0x02
    345c:	41 83       	std	Z+1, r20	; 0x01
    345e:	f3 01       	movw	r30, r6
    3460:	b3 82       	std	Z+3, r11	; 0x03
    3462:	a2 82       	std	Z+2, r10	; 0x02
    3464:	d5 82       	std	Z+5, r13	; 0x05
    3466:	c4 82       	std	Z+4, r12	; 0x04
    3468:	96 83       	std	Z+6, r25	; 0x06
    346a:	88 8d       	ldd	r24, Y+24	; 0x18
    346c:	99 8d       	ldd	r25, Y+25	; 0x19
    346e:	90 87       	std	Z+8, r25	; 0x08
    3470:	87 83       	std	Z+7, r24	; 0x07
    3472:	80 e0       	ldi	r24, 0x00	; 0
    3474:	49 2d       	mov	r20, r9
    3476:	c7 2e       	mov	r12, r23
    3478:	5d 01       	movw	r10, r26
    347a:	1a c0       	rjmp	.+52     	; 0x34b0 <STEPPER_move+0x11c>
    347c:	ed b7       	in	r30, 0x3d	; 61
    347e:	fe b7       	in	r31, 0x3e	; 62
    3480:	39 97       	sbiw	r30, 0x09	; 9
    3482:	0f b6       	in	r0, 0x3f	; 63
    3484:	f8 94       	cli
    3486:	fe bf       	out	0x3e, r31	; 62
    3488:	0f be       	out	0x3f, r0	; 63
    348a:	ed bf       	out	0x3d, r30	; 61
    348c:	ad b7       	in	r26, 0x3d	; 61
    348e:	be b7       	in	r27, 0x3e	; 62
    3490:	11 96       	adiw	r26, 0x01	; 1
    3492:	52 83       	std	Z+2, r21	; 0x02
    3494:	41 83       	std	Z+1, r20	; 0x01
    3496:	fd 01       	movw	r30, r26
    3498:	b3 82       	std	Z+3, r11	; 0x03
    349a:	a2 82       	std	Z+2, r10	; 0x02
    349c:	d5 82       	std	Z+5, r13	; 0x05
    349e:	c4 82       	std	Z+4, r12	; 0x04
    34a0:	96 83       	std	Z+6, r25	; 0x06
    34a2:	10 86       	std	Z+8, r1	; 0x08
    34a4:	17 82       	std	Z+7, r1	; 0x07
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	49 2d       	mov	r20, r9
    34aa:	c7 2e       	mov	r12, r23
    34ac:	aa 24       	eor	r10, r10
    34ae:	bb 24       	eor	r11, r11
    34b0:	0e 94 0d 19 	call	0x321a	; 0x321a <STEPPER_stepmode>
    34b4:	8d b7       	in	r24, 0x3d	; 61
    34b6:	9e b7       	in	r25, 0x3e	; 62
    34b8:	09 96       	adiw	r24, 0x09	; 9
    34ba:	0f b6       	in	r0, 0x3f	; 63
    34bc:	f8 94       	cli
    34be:	9e bf       	out	0x3e, r25	; 62
    34c0:	0f be       	out	0x3f, r0	; 63
    34c2:	8d bf       	out	0x3d, r24	; 61
    34c4:	cf 91       	pop	r28
    34c6:	df 91       	pop	r29
    34c8:	1f 91       	pop	r17
    34ca:	0f 91       	pop	r16
    34cc:	ff 90       	pop	r15
    34ce:	ef 90       	pop	r14
    34d0:	df 90       	pop	r13
    34d2:	cf 90       	pop	r12
    34d4:	bf 90       	pop	r11
    34d6:	af 90       	pop	r10
    34d8:	9f 90       	pop	r9
    34da:	8f 90       	pop	r8
    34dc:	7f 90       	pop	r7
    34de:	6f 90       	pop	r6
    34e0:	08 95       	ret

000034e2 <STEPPER_open>:
    34e2:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <__STEPPER_init>
    34e6:	81 e0       	ldi	r24, 0x01	; 1
    34e8:	80 93 85 06 	sts	0x0685, r24
    34ec:	ef e4       	ldi	r30, 0x4F	; 79
    34ee:	f6 e0       	ldi	r31, 0x06	; 6
    34f0:	11 92       	st	Z+, r1
    34f2:	11 92       	st	Z+, r1
    34f4:	11 82       	std	Z+1, r1	; 0x01
    34f6:	10 82       	st	Z, r1
    34f8:	32 96       	adiw	r30, 0x02	; 2
    34fa:	11 82       	std	Z+1, r1	; 0x01
    34fc:	10 82       	st	Z, r1
    34fe:	32 96       	adiw	r30, 0x02	; 2
    3500:	11 82       	std	Z+1, r1	; 0x01
    3502:	10 82       	st	Z, r1
    3504:	32 96       	adiw	r30, 0x02	; 2
    3506:	11 82       	std	Z+1, r1	; 0x01
    3508:	10 82       	st	Z, r1
    350a:	32 96       	adiw	r30, 0x02	; 2
    350c:	11 82       	std	Z+1, r1	; 0x01
    350e:	10 82       	st	Z, r1
    3510:	32 96       	adiw	r30, 0x02	; 2
    3512:	11 82       	std	Z+1, r1	; 0x01
    3514:	10 82       	st	Z, r1
    3516:	32 96       	adiw	r30, 0x02	; 2
    3518:	11 82       	std	Z+1, r1	; 0x01
    351a:	10 82       	st	Z, r1
    351c:	32 96       	adiw	r30, 0x02	; 2
    351e:	11 82       	std	Z+1, r1	; 0x01
    3520:	10 82       	st	Z, r1
    3522:	32 96       	adiw	r30, 0x02	; 2
    3524:	11 82       	std	Z+1, r1	; 0x01
    3526:	10 82       	st	Z, r1
    3528:	32 96       	adiw	r30, 0x02	; 2
    352a:	11 82       	std	Z+1, r1	; 0x01
    352c:	10 82       	st	Z, r1
    352e:	32 96       	adiw	r30, 0x02	; 2
    3530:	11 82       	std	Z+1, r1	; 0x01
    3532:	10 82       	st	Z, r1
    3534:	32 96       	adiw	r30, 0x02	; 2
    3536:	11 82       	std	Z+1, r1	; 0x01
    3538:	10 82       	st	Z, r1
    353a:	36 96       	adiw	r30, 0x06	; 6
    353c:	11 92       	st	Z+, r1
    353e:	11 92       	st	Z+, r1
    3540:	11 92       	st	Z+, r1
    3542:	10 82       	st	Z, r1
    3544:	32 96       	adiw	r30, 0x02	; 2
    3546:	11 92       	st	Z+, r1
    3548:	11 92       	st	Z+, r1
    354a:	11 92       	st	Z+, r1
    354c:	11 92       	st	Z+, r1
    354e:	11 92       	st	Z+, r1
    3550:	11 92       	st	Z+, r1
    3552:	11 92       	st	Z+, r1
    3554:	11 82       	std	Z+1, r1	; 0x01
    3556:	10 82       	st	Z, r1
    3558:	32 96       	adiw	r30, 0x02	; 2
    355a:	11 82       	std	Z+1, r1	; 0x01
    355c:	10 82       	st	Z, r1
    355e:	32 96       	adiw	r30, 0x02	; 2
    3560:	11 82       	std	Z+1, r1	; 0x01
    3562:	10 82       	st	Z, r1
    3564:	32 96       	adiw	r30, 0x02	; 2
    3566:	11 82       	std	Z+1, r1	; 0x01
    3568:	10 82       	st	Z, r1
    356a:	76 97       	sbiw	r30, 0x16	; 22
    356c:	11 82       	std	Z+1, r1	; 0x01
    356e:	10 82       	st	Z, r1
    3570:	32 96       	adiw	r30, 0x02	; 2
    3572:	11 82       	std	Z+1, r1	; 0x01
    3574:	10 82       	st	Z, r1
    3576:	10 92 84 06 	sts	0x0684, r1
    357a:	10 92 83 06 	sts	0x0683, r1
    357e:	10 92 85 06 	sts	0x0685, r1
    3582:	87 e0       	ldi	r24, 0x07	; 7
    3584:	61 e0       	ldi	r22, 0x01	; 1
    3586:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    358a:	87 e0       	ldi	r24, 0x07	; 7
    358c:	91 e0       	ldi	r25, 0x01	; 1
    358e:	08 95       	ret

00003590 <STEPPER_run>:
    3590:	ef 92       	push	r14
    3592:	ff 92       	push	r15
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	18 2f       	mov	r17, r24
    359a:	06 2f       	mov	r16, r22
    359c:	7a 01       	movw	r14, r20
    359e:	60 e0       	ldi	r22, 0x00	; 0
    35a0:	0e 94 16 1b 	call	0x362c	; 0x362c <STEPPER_set_mode>
    35a4:	81 2f       	mov	r24, r17
    35a6:	60 2f       	mov	r22, r16
    35a8:	0e 94 01 1b 	call	0x3602	; 0x3602 <STEPPER_set_dir>
    35ac:	81 2f       	mov	r24, r17
    35ae:	b7 01       	movw	r22, r14
    35b0:	0e 94 2b 1b 	call	0x3656	; 0x3656 <STEPPER_set_speed>
    35b4:	1f 91       	pop	r17
    35b6:	0f 91       	pop	r16
    35b8:	ff 90       	pop	r15
    35ba:	ef 90       	pop	r14
    35bc:	08 95       	ret

000035be <STEPPER_set_accel>:
    35be:	48 2f       	mov	r20, r24
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	80 93 85 06 	sts	0x0685, r24
    35c6:	cb 01       	movw	r24, r22
    35c8:	23 e0       	ldi	r18, 0x03	; 3
    35ca:	69 3e       	cpi	r22, 0xE9	; 233
    35cc:	72 07       	cpc	r23, r18
    35ce:	10 f0       	brcs	.+4      	; 0x35d4 <STEPPER_set_accel+0x16>
    35d0:	88 ee       	ldi	r24, 0xE8	; 232
    35d2:	93 e0       	ldi	r25, 0x03	; 3
    35d4:	41 30       	cpi	r20, 0x01	; 1
    35d6:	71 f0       	breq	.+28     	; 0x35f4 <STEPPER_set_accel+0x36>
    35d8:	41 30       	cpi	r20, 0x01	; 1
    35da:	18 f0       	brcs	.+6      	; 0x35e2 <STEPPER_set_accel+0x24>
    35dc:	42 30       	cpi	r20, 0x02	; 2
    35de:	71 f4       	brne	.+28     	; 0x35fc <STEPPER_set_accel+0x3e>
    35e0:	05 c0       	rjmp	.+10     	; 0x35ec <STEPPER_set_accel+0x2e>
    35e2:	90 93 5a 06 	sts	0x065A, r25
    35e6:	80 93 59 06 	sts	0x0659, r24
    35ea:	08 c0       	rjmp	.+16     	; 0x35fc <STEPPER_set_accel+0x3e>
    35ec:	90 93 5a 06 	sts	0x065A, r25
    35f0:	80 93 59 06 	sts	0x0659, r24
    35f4:	90 93 5c 06 	sts	0x065C, r25
    35f8:	80 93 5b 06 	sts	0x065B, r24
    35fc:	10 92 85 06 	sts	0x0685, r1
    3600:	08 95       	ret

00003602 <STEPPER_set_dir>:
    3602:	98 2f       	mov	r25, r24
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	80 93 85 06 	sts	0x0685, r24
    360a:	91 30       	cpi	r25, 0x01	; 1
    360c:	51 f0       	breq	.+20     	; 0x3622 <STEPPER_set_dir+0x20>
    360e:	91 30       	cpi	r25, 0x01	; 1
    3610:	18 f0       	brcs	.+6      	; 0x3618 <STEPPER_set_dir+0x16>
    3612:	92 30       	cpi	r25, 0x02	; 2
    3614:	41 f4       	brne	.+16     	; 0x3626 <STEPPER_set_dir+0x24>
    3616:	03 c0       	rjmp	.+6      	; 0x361e <STEPPER_set_dir+0x1c>
    3618:	60 93 72 06 	sts	0x0672, r22
    361c:	04 c0       	rjmp	.+8      	; 0x3626 <STEPPER_set_dir+0x24>
    361e:	60 93 72 06 	sts	0x0672, r22
    3622:	60 93 73 06 	sts	0x0673, r22
    3626:	10 92 85 06 	sts	0x0685, r1
    362a:	08 95       	ret

0000362c <STEPPER_set_mode>:
    362c:	98 2f       	mov	r25, r24
    362e:	81 e0       	ldi	r24, 0x01	; 1
    3630:	80 93 85 06 	sts	0x0685, r24
    3634:	91 30       	cpi	r25, 0x01	; 1
    3636:	51 f0       	breq	.+20     	; 0x364c <STEPPER_set_mode+0x20>
    3638:	91 30       	cpi	r25, 0x01	; 1
    363a:	18 f0       	brcs	.+6      	; 0x3642 <STEPPER_set_mode+0x16>
    363c:	92 30       	cpi	r25, 0x02	; 2
    363e:	41 f4       	brne	.+16     	; 0x3650 <STEPPER_set_mode+0x24>
    3640:	03 c0       	rjmp	.+6      	; 0x3648 <STEPPER_set_mode+0x1c>
    3642:	60 93 4f 06 	sts	0x064F, r22
    3646:	04 c0       	rjmp	.+8      	; 0x3650 <STEPPER_set_mode+0x24>
    3648:	60 93 4f 06 	sts	0x064F, r22
    364c:	60 93 50 06 	sts	0x0650, r22
    3650:	10 92 85 06 	sts	0x0685, r1
    3654:	08 95       	ret

00003656 <STEPPER_set_speed>:
    3656:	48 2f       	mov	r20, r24
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	80 93 85 06 	sts	0x0685, r24
    365e:	cb 01       	movw	r24, r22
    3660:	21 e0       	ldi	r18, 0x01	; 1
    3662:	61 39       	cpi	r22, 0x91	; 145
    3664:	72 07       	cpc	r23, r18
    3666:	10 f0       	brcs	.+4      	; 0x366c <STEPPER_set_speed+0x16>
    3668:	80 e9       	ldi	r24, 0x90	; 144
    366a:	91 e0       	ldi	r25, 0x01	; 1
    366c:	41 30       	cpi	r20, 0x01	; 1
    366e:	71 f0       	breq	.+28     	; 0x368c <STEPPER_set_speed+0x36>
    3670:	41 30       	cpi	r20, 0x01	; 1
    3672:	18 f0       	brcs	.+6      	; 0x367a <STEPPER_set_speed+0x24>
    3674:	42 30       	cpi	r20, 0x02	; 2
    3676:	71 f4       	brne	.+28     	; 0x3694 <STEPPER_set_speed+0x3e>
    3678:	05 c0       	rjmp	.+10     	; 0x3684 <STEPPER_set_speed+0x2e>
    367a:	90 93 52 06 	sts	0x0652, r25
    367e:	80 93 51 06 	sts	0x0651, r24
    3682:	08 c0       	rjmp	.+16     	; 0x3694 <STEPPER_set_speed+0x3e>
    3684:	90 93 52 06 	sts	0x0652, r25
    3688:	80 93 51 06 	sts	0x0651, r24
    368c:	90 93 54 06 	sts	0x0654, r25
    3690:	80 93 53 06 	sts	0x0653, r24
    3694:	10 92 85 06 	sts	0x0685, r1
    3698:	08 95       	ret

0000369a <STEPPER_step>:
    369a:	8f 92       	push	r8
    369c:	9f 92       	push	r9
    369e:	af 92       	push	r10
    36a0:	bf 92       	push	r11
    36a2:	cf 92       	push	r12
    36a4:	df 92       	push	r13
    36a6:	ef 92       	push	r14
    36a8:	ff 92       	push	r15
    36aa:	0f 93       	push	r16
    36ac:	1f 93       	push	r17
    36ae:	cf 93       	push	r28
    36b0:	df 93       	push	r29
    36b2:	18 2f       	mov	r17, r24
    36b4:	f6 2e       	mov	r15, r22
    36b6:	5a 01       	movw	r10, r20
    36b8:	49 01       	movw	r8, r18
    36ba:	e6 01       	movw	r28, r12
    36bc:	61 e0       	ldi	r22, 0x01	; 1
    36be:	0e 94 16 1b 	call	0x362c	; 0x362c <STEPPER_set_mode>
    36c2:	81 2f       	mov	r24, r17
    36c4:	b5 01       	movw	r22, r10
    36c6:	a4 01       	movw	r20, r8
    36c8:	0e 94 1a 24 	call	0x4834	; 0x4834 <STEPPER_setup_decels>
    36cc:	81 2f       	mov	r24, r17
    36ce:	6f 2d       	mov	r22, r15
    36d0:	0e 94 01 1b 	call	0x3602	; 0x3602 <STEPPER_set_dir>
    36d4:	81 2f       	mov	r24, r17
    36d6:	60 2f       	mov	r22, r16
    36d8:	0e 94 05 24 	call	0x480a	; 0x480a <STEPPER_set_stop_mode>
    36dc:	81 2f       	mov	r24, r17
    36de:	b5 01       	movw	r22, r10
    36e0:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <STEPPER_set_steps>
    36e4:	c1 14       	cp	r12, r1
    36e6:	d1 04       	cpc	r13, r1
    36e8:	99 f0       	breq	.+38     	; 0x3710 <STEPPER_step+0x76>
    36ea:	11 30       	cpi	r17, 0x01	; 1
    36ec:	49 f0       	breq	.+18     	; 0x3700 <STEPPER_step+0x66>
    36ee:	11 30       	cpi	r17, 0x01	; 1
    36f0:	18 f0       	brcs	.+6      	; 0x36f8 <STEPPER_step+0x5e>
    36f2:	12 30       	cpi	r17, 0x02	; 2
    36f4:	69 f4       	brne	.+26     	; 0x3710 <STEPPER_step+0x76>
    36f6:	06 c0       	rjmp	.+12     	; 0x3704 <STEPPER_step+0x6a>
    36f8:	18 82       	st	Y, r1
    36fa:	10 92 81 06 	sts	0x0681, r1
    36fe:	08 c0       	rjmp	.+16     	; 0x3710 <STEPPER_step+0x76>
    3700:	19 82       	std	Y+1, r1	; 0x01
    3702:	04 c0       	rjmp	.+8      	; 0x370c <STEPPER_step+0x72>
    3704:	18 82       	st	Y, r1
    3706:	19 82       	std	Y+1, r1	; 0x01
    3708:	10 92 81 06 	sts	0x0681, r1
    370c:	10 92 82 06 	sts	0x0682, r1
    3710:	d0 93 84 06 	sts	0x0684, r29
    3714:	c0 93 83 06 	sts	0x0683, r28
    3718:	ee 20       	and	r14, r14
    371a:	b9 f5       	brne	.+110    	; 0x378a <STEPPER_step+0xf0>
    371c:	88 ed       	ldi	r24, 0xD8	; 216
    371e:	93 e0       	ldi	r25, 0x03	; 3
    3720:	90 93 84 06 	sts	0x0684, r25
    3724:	80 93 83 06 	sts	0x0683, r24
    3728:	81 2f       	mov	r24, r17
    372a:	b4 01       	movw	r22, r8
    372c:	0e 94 2b 1b 	call	0x3656	; 0x3656 <STEPPER_set_speed>
    3730:	81 2f       	mov	r24, r17
    3732:	0e 94 cb 23 	call	0x4796	; 0x4796 <STEPPER_go>
    3736:	11 30       	cpi	r17, 0x01	; 1
    3738:	71 f0       	breq	.+28     	; 0x3756 <STEPPER_step+0xbc>
    373a:	11 30       	cpi	r17, 0x01	; 1
    373c:	18 f0       	brcs	.+6      	; 0x3744 <STEPPER_step+0xaa>
    373e:	12 30       	cpi	r17, 0x02	; 2
    3740:	59 f5       	brne	.+86     	; 0x3798 <STEPPER_step+0xfe>
    3742:	12 c0       	rjmp	.+36     	; 0x3768 <STEPPER_step+0xce>
    3744:	10 92 d8 03 	sts	0x03D8, r1
    3748:	10 92 81 06 	sts	0x0681, r1
    374c:	80 91 d8 03 	lds	r24, 0x03D8
    3750:	88 23       	and	r24, r24
    3752:	e1 f3       	breq	.-8      	; 0x374c <STEPPER_step+0xb2>
    3754:	21 c0       	rjmp	.+66     	; 0x3798 <STEPPER_step+0xfe>
    3756:	10 92 d9 03 	sts	0x03D9, r1
    375a:	10 92 82 06 	sts	0x0682, r1
    375e:	80 91 d9 03 	lds	r24, 0x03D9
    3762:	88 23       	and	r24, r24
    3764:	e1 f3       	breq	.-8      	; 0x375e <STEPPER_step+0xc4>
    3766:	18 c0       	rjmp	.+48     	; 0x3798 <STEPPER_step+0xfe>
    3768:	10 92 d8 03 	sts	0x03D8, r1
    376c:	10 92 d9 03 	sts	0x03D9, r1
    3770:	10 92 81 06 	sts	0x0681, r1
    3774:	10 92 82 06 	sts	0x0682, r1
    3778:	80 91 d8 03 	lds	r24, 0x03D8
    377c:	88 23       	and	r24, r24
    377e:	e1 f3       	breq	.-8      	; 0x3778 <STEPPER_step+0xde>
    3780:	80 91 d9 03 	lds	r24, 0x03D9
    3784:	88 23       	and	r24, r24
    3786:	c1 f3       	breq	.-16     	; 0x3778 <STEPPER_step+0xde>
    3788:	07 c0       	rjmp	.+14     	; 0x3798 <STEPPER_step+0xfe>
    378a:	81 2f       	mov	r24, r17
    378c:	b4 01       	movw	r22, r8
    378e:	0e 94 2b 1b 	call	0x3656	; 0x3656 <STEPPER_set_speed>
    3792:	81 2f       	mov	r24, r17
    3794:	0e 94 cb 23 	call	0x4796	; 0x4796 <STEPPER_go>
    3798:	df 91       	pop	r29
    379a:	cf 91       	pop	r28
    379c:	1f 91       	pop	r17
    379e:	0f 91       	pop	r16
    37a0:	ff 90       	pop	r15
    37a2:	ef 90       	pop	r14
    37a4:	df 90       	pop	r13
    37a6:	cf 90       	pop	r12
    37a8:	bf 90       	pop	r11
    37aa:	af 90       	pop	r10
    37ac:	9f 90       	pop	r9
    37ae:	8f 90       	pop	r8
    37b0:	08 95       	ret

000037b2 <STEPPER_stop>:
    37b2:	0f 93       	push	r16
    37b4:	1f 93       	push	r17
    37b6:	18 2f       	mov	r17, r24
    37b8:	06 2f       	mov	r16, r22
    37ba:	66 23       	and	r22, r22
    37bc:	49 f4       	brne	.+18     	; 0x37d0 <STEPPER_stop+0x1e>
    37be:	60 e0       	ldi	r22, 0x00	; 0
    37c0:	70 e0       	ldi	r23, 0x00	; 0
    37c2:	0e 94 2b 1b 	call	0x3656	; 0x3656 <STEPPER_set_speed>
    37c6:	81 2f       	mov	r24, r17
    37c8:	60 e0       	ldi	r22, 0x00	; 0
    37ca:	70 e0       	ldi	r23, 0x00	; 0
    37cc:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <STEPPER_set_steps>
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	80 93 85 06 	sts	0x0685, r24
    37d6:	11 30       	cpi	r17, 0x01	; 1
    37d8:	51 f0       	breq	.+20     	; 0x37ee <STEPPER_stop+0x3c>
    37da:	11 30       	cpi	r17, 0x01	; 1
    37dc:	18 f0       	brcs	.+6      	; 0x37e4 <STEPPER_stop+0x32>
    37de:	12 30       	cpi	r17, 0x02	; 2
    37e0:	41 f4       	brne	.+16     	; 0x37f2 <STEPPER_stop+0x40>
    37e2:	03 c0       	rjmp	.+6      	; 0x37ea <STEPPER_stop+0x38>
    37e4:	00 93 6d 06 	sts	0x066D, r16
    37e8:	04 c0       	rjmp	.+8      	; 0x37f2 <STEPPER_stop+0x40>
    37ea:	00 93 6d 06 	sts	0x066D, r16
    37ee:	00 93 6e 06 	sts	0x066E, r16
    37f2:	10 92 85 06 	sts	0x0685, r1
    37f6:	1f 91       	pop	r17
    37f8:	0f 91       	pop	r16
    37fa:	08 95       	ret

000037fc <STEPPER_wait_and_then>:
    37fc:	cf 92       	push	r12
    37fe:	df 92       	push	r13
    3800:	ef 92       	push	r14
    3802:	ff 92       	push	r15
    3804:	0f 93       	push	r16
    3806:	1f 93       	push	r17
    3808:	df 93       	push	r29
    380a:	cf 93       	push	r28
    380c:	cd b7       	in	r28, 0x3d	; 61
    380e:	de b7       	in	r29, 0x3e	; 62
    3810:	8b 85       	ldd	r24, Y+11	; 0x0b
    3812:	81 30       	cpi	r24, 0x01	; 1
    3814:	61 f0       	breq	.+24     	; 0x382e <STEPPER_wait_and_then+0x32>
    3816:	81 30       	cpi	r24, 0x01	; 1
    3818:	18 f0       	brcs	.+6      	; 0x3820 <STEPPER_wait_and_then+0x24>
    381a:	82 30       	cpi	r24, 0x02	; 2
    381c:	a1 f5       	brne	.+104    	; 0x3886 <STEPPER_wait_and_then+0x8a>
    381e:	11 c0       	rjmp	.+34     	; 0x3842 <STEPPER_wait_and_then+0x46>
    3820:	ec 85       	ldd	r30, Y+12	; 0x0c
    3822:	fd 85       	ldd	r31, Y+13	; 0x0d
    3824:	80 91 86 06 	lds	r24, 0x0686
    3828:	88 23       	and	r24, r24
    382a:	e1 f3       	breq	.-8      	; 0x3824 <STEPPER_wait_and_then+0x28>
    382c:	06 c0       	rjmp	.+12     	; 0x383a <STEPPER_wait_and_then+0x3e>
    382e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3830:	fd 85       	ldd	r31, Y+13	; 0x0d
    3832:	80 91 87 06 	lds	r24, 0x0687
    3836:	88 23       	and	r24, r24
    3838:	e1 f3       	breq	.-8      	; 0x3832 <STEPPER_wait_and_then+0x36>
    383a:	30 97       	sbiw	r30, 0x00	; 0
    383c:	21 f1       	breq	.+72     	; 0x3886 <STEPPER_wait_and_then+0x8a>
    383e:	09 95       	icall
    3840:	22 c0       	rjmp	.+68     	; 0x3886 <STEPPER_wait_and_then+0x8a>
    3842:	cc 84       	ldd	r12, Y+12	; 0x0c
    3844:	dd 84       	ldd	r13, Y+13	; 0x0d
    3846:	ee 84       	ldd	r14, Y+14	; 0x0e
    3848:	ff 84       	ldd	r15, Y+15	; 0x0f
    384a:	00 e0       	ldi	r16, 0x00	; 0
    384c:	10 e0       	ldi	r17, 0x00	; 0
    384e:	00 23       	and	r16, r16
    3850:	51 f4       	brne	.+20     	; 0x3866 <STEPPER_wait_and_then+0x6a>
    3852:	80 91 86 06 	lds	r24, 0x0686
    3856:	88 23       	and	r24, r24
    3858:	31 f0       	breq	.+12     	; 0x3866 <STEPPER_wait_and_then+0x6a>
    385a:	c1 14       	cp	r12, r1
    385c:	d1 04       	cpc	r13, r1
    385e:	11 f0       	breq	.+4      	; 0x3864 <STEPPER_wait_and_then+0x68>
    3860:	f6 01       	movw	r30, r12
    3862:	09 95       	icall
    3864:	01 e0       	ldi	r16, 0x01	; 1
    3866:	11 23       	and	r17, r17
    3868:	51 f4       	brne	.+20     	; 0x387e <STEPPER_wait_and_then+0x82>
    386a:	80 91 87 06 	lds	r24, 0x0687
    386e:	88 23       	and	r24, r24
    3870:	31 f0       	breq	.+12     	; 0x387e <STEPPER_wait_and_then+0x82>
    3872:	e1 14       	cp	r14, r1
    3874:	f1 04       	cpc	r15, r1
    3876:	11 f0       	breq	.+4      	; 0x387c <STEPPER_wait_and_then+0x80>
    3878:	f7 01       	movw	r30, r14
    387a:	09 95       	icall
    387c:	11 e0       	ldi	r17, 0x01	; 1
    387e:	00 23       	and	r16, r16
    3880:	31 f3       	breq	.-52     	; 0x384e <STEPPER_wait_and_then+0x52>
    3882:	11 23       	and	r17, r17
    3884:	21 f3       	breq	.-56     	; 0x384e <STEPPER_wait_and_then+0x52>
    3886:	cf 91       	pop	r28
    3888:	df 91       	pop	r29
    388a:	1f 91       	pop	r17
    388c:	0f 91       	pop	r16
    388e:	ff 90       	pop	r15
    3890:	ef 90       	pop	r14
    3892:	df 90       	pop	r13
    3894:	cf 90       	pop	r12
    3896:	08 95       	ret

00003898 <SYS_get_state>:
    3898:	e8 2f       	mov	r30, r24
    389a:	f0 e0       	ldi	r31, 0x00	; 0
    389c:	e3 31       	cpi	r30, 0x13	; 19
    389e:	f1 05       	cpc	r31, r1
    38a0:	40 f4       	brcc	.+16     	; 0x38b2 <SYS_get_state+0x1a>
    38a2:	e2 5c       	subi	r30, 0xC2	; 194
    38a4:	ff 4f       	sbci	r31, 0xFF	; 255
    38a6:	ee 0f       	add	r30, r30
    38a8:	ff 1f       	adc	r31, r31
    38aa:	05 90       	lpm	r0, Z+
    38ac:	f4 91       	lpm	r31, Z+
    38ae:	e0 2d       	mov	r30, r0
    38b0:	09 94       	ijmp
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	08 95       	ret
    38b6:	80 91 88 06 	lds	r24, 0x0688
    38ba:	08 95       	ret
    38bc:	80 91 89 06 	lds	r24, 0x0689
    38c0:	08 95       	ret
    38c2:	80 91 8a 06 	lds	r24, 0x068A
    38c6:	08 95       	ret
    38c8:	80 91 8b 06 	lds	r24, 0x068B
    38cc:	08 95       	ret
    38ce:	80 91 8c 06 	lds	r24, 0x068C
    38d2:	08 95       	ret
    38d4:	80 91 8e 06 	lds	r24, 0x068E
    38d8:	08 95       	ret
    38da:	80 91 8d 06 	lds	r24, 0x068D
    38de:	08 95       	ret
    38e0:	80 91 8f 06 	lds	r24, 0x068F
    38e4:	08 95       	ret
    38e6:	80 91 90 06 	lds	r24, 0x0690
    38ea:	08 95       	ret
    38ec:	80 91 91 06 	lds	r24, 0x0691
    38f0:	08 95       	ret
    38f2:	80 91 92 06 	lds	r24, 0x0692
    38f6:	08 95       	ret
    38f8:	80 91 93 06 	lds	r24, 0x0693
    38fc:	08 95       	ret
    38fe:	80 91 94 06 	lds	r24, 0x0694
    3902:	08 95       	ret
    3904:	80 91 95 06 	lds	r24, 0x0695
    3908:	08 95       	ret
    390a:	80 91 96 06 	lds	r24, 0x0696
    390e:	08 95       	ret
    3910:	80 91 97 06 	lds	r24, 0x0697
    3914:	08 95       	ret
    3916:	80 91 98 06 	lds	r24, 0x0698
    391a:	08 95       	ret
    391c:	80 91 99 06 	lds	r24, 0x0699
    3920:	08 95       	ret
    3922:	80 91 9a 06 	lds	r24, 0x069A
    3926:	08 95       	ret

00003928 <SYS_set_state>:
    3928:	e8 2f       	mov	r30, r24
    392a:	f0 e0       	ldi	r31, 0x00	; 0
    392c:	e3 31       	cpi	r30, 0x13	; 19
    392e:	f1 05       	cpc	r31, r1
    3930:	08 f0       	brcs	.+2      	; 0x3934 <SYS_set_state+0xc>
    3932:	40 c0       	rjmp	.+128    	; 0x39b4 <SYS_set_state+0x8c>
    3934:	ef 5a       	subi	r30, 0xAF	; 175
    3936:	ff 4f       	sbci	r31, 0xFF	; 255
    3938:	ee 0f       	add	r30, r30
    393a:	ff 1f       	adc	r31, r31
    393c:	05 90       	lpm	r0, Z+
    393e:	f4 91       	lpm	r31, Z+
    3940:	e0 2d       	mov	r30, r0
    3942:	09 94       	ijmp
    3944:	60 93 88 06 	sts	0x0688, r22
    3948:	08 95       	ret
    394a:	60 93 89 06 	sts	0x0689, r22
    394e:	08 95       	ret
    3950:	60 93 8a 06 	sts	0x068A, r22
    3954:	08 95       	ret
    3956:	60 93 8b 06 	sts	0x068B, r22
    395a:	08 95       	ret
    395c:	60 93 8c 06 	sts	0x068C, r22
    3960:	08 95       	ret
    3962:	60 93 8e 06 	sts	0x068E, r22
    3966:	08 95       	ret
    3968:	60 93 8d 06 	sts	0x068D, r22
    396c:	08 95       	ret
    396e:	60 93 8f 06 	sts	0x068F, r22
    3972:	08 95       	ret
    3974:	60 93 90 06 	sts	0x0690, r22
    3978:	08 95       	ret
    397a:	60 93 91 06 	sts	0x0691, r22
    397e:	08 95       	ret
    3980:	60 93 92 06 	sts	0x0692, r22
    3984:	08 95       	ret
    3986:	60 93 93 06 	sts	0x0693, r22
    398a:	08 95       	ret
    398c:	60 93 94 06 	sts	0x0694, r22
    3990:	08 95       	ret
    3992:	60 93 95 06 	sts	0x0695, r22
    3996:	08 95       	ret
    3998:	60 93 96 06 	sts	0x0696, r22
    399c:	08 95       	ret
    399e:	60 93 97 06 	sts	0x0697, r22
    39a2:	08 95       	ret
    39a4:	60 93 98 06 	sts	0x0698, r22
    39a8:	08 95       	ret
    39aa:	60 93 99 06 	sts	0x0699, r22
    39ae:	08 95       	ret
    39b0:	60 93 98 06 	sts	0x0698, r22
    39b4:	08 95       	ret

000039b6 <ATTINY_get_sensors>:
    39b6:	0f 93       	push	r16
    39b8:	1f 93       	push	r17
    39ba:	81 e0       	ldi	r24, 0x01	; 1
    39bc:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    39c0:	81 30       	cpi	r24, 0x01	; 1
    39c2:	11 f0       	breq	.+4      	; 0x39c8 <ATTINY_get_sensors+0x12>
    39c4:	00 e0       	ldi	r16, 0x00	; 0
    39c6:	24 c0       	rjmp	.+72     	; 0x3a10 <ATTINY_get_sensors+0x5a>
    39c8:	87 e0       	ldi	r24, 0x07	; 7
    39ca:	0e 94 04 18 	call	0x3008	; 0x3008 <SPI_set_slave_addr>
    39ce:	82 e0       	ldi	r24, 0x02	; 2
    39d0:	6a e0       	ldi	r22, 0x0A	; 10
    39d2:	0e 94 55 18 	call	0x30aa	; 0x30aa <SPI_transmit>
    39d6:	82 e0       	ldi	r24, 0x02	; 2
    39d8:	62 eb       	ldi	r22, 0xB2	; 178
    39da:	0e 94 55 18 	call	0x30aa	; 0x30aa <SPI_transmit>
    39de:	18 ec       	ldi	r17, 0xC8	; 200
    39e0:	81 2f       	mov	r24, r17
    39e2:	8a 95       	dec	r24
    39e4:	f1 f7       	brne	.-4      	; 0x39e2 <ATTINY_get_sensors+0x2c>
    39e6:	82 e0       	ldi	r24, 0x02	; 2
    39e8:	60 e0       	ldi	r22, 0x00	; 0
    39ea:	0e 94 b6 22 	call	0x456c	; 0x456c <SPI_receive>
    39ee:	08 2f       	mov	r16, r24
    39f0:	81 2f       	mov	r24, r17
    39f2:	8a 95       	dec	r24
    39f4:	f1 f7       	brne	.-4      	; 0x39f2 <ATTINY_get_sensors+0x3c>
    39f6:	82 e0       	ldi	r24, 0x02	; 2
    39f8:	60 e0       	ldi	r22, 0x00	; 0
    39fa:	0e 94 b6 22 	call	0x456c	; 0x456c <SPI_receive>
    39fe:	1a 95       	dec	r17
    3a00:	f1 f7       	brne	.-4      	; 0x39fe <ATTINY_get_sensors+0x48>
    3a02:	87 e0       	ldi	r24, 0x07	; 7
    3a04:	0e 94 04 18 	call	0x3008	; 0x3008 <SPI_set_slave_addr>
    3a08:	88 e8       	ldi	r24, 0x88	; 136
    3a0a:	93 e1       	ldi	r25, 0x13	; 19
    3a0c:	01 97       	sbiw	r24, 0x01	; 1
    3a0e:	f1 f7       	brne	.-4      	; 0x3a0c <ATTINY_get_sensors+0x56>
    3a10:	80 2f       	mov	r24, r16
    3a12:	1f 91       	pop	r17
    3a14:	0f 91       	pop	r16
    3a16:	08 95       	ret

00003a18 <ATTINY_get_SW_state>:
    3a18:	1f 93       	push	r17
    3a1a:	cf 93       	push	r28
    3a1c:	df 93       	push	r29
    3a1e:	18 2f       	mov	r17, r24
    3a20:	80 91 db 03 	lds	r24, 0x03DB
    3a24:	88 23       	and	r24, r24
    3a26:	41 f0       	breq	.+16     	; 0x3a38 <ATTINY_get_SW_state+0x20>
    3a28:	80 91 e5 03 	lds	r24, 0x03E5
    3a2c:	88 23       	and	r24, r24
    3a2e:	99 f0       	breq	.+38     	; 0x3a56 <ATTINY_get_SW_state+0x3e>
    3a30:	10 92 db 03 	sts	0x03DB, r1
    3a34:	10 92 e5 03 	sts	0x03E5, r1
    3a38:	0e 94 db 1c 	call	0x39b6	; 0x39b6 <ATTINY_get_sensors>
    3a3c:	80 93 da 03 	sts	0x03DA, r24
    3a40:	8f ed       	ldi	r24, 0xDF	; 223
    3a42:	93 e0       	ldi	r25, 0x03	; 3
    3a44:	61 e0       	ldi	r22, 0x01	; 1
    3a46:	40 e0       	ldi	r20, 0x00	; 0
    3a48:	22 e3       	ldi	r18, 0x32	; 50
    3a4a:	30 e0       	ldi	r19, 0x00	; 0
    3a4c:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <TMRSRVC_new>
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	80 93 db 03 	sts	0x03DB, r24
    3a56:	90 91 da 03 	lds	r25, 0x03DA
    3a5a:	a1 2f       	mov	r26, r17
    3a5c:	b0 e0       	ldi	r27, 0x00	; 0
    3a5e:	ed 01       	movw	r28, r26
    3a60:	c6 5a       	subi	r28, 0xA6	; 166
    3a62:	dc 4f       	sbci	r29, 0xFC	; 252
    3a64:	88 81       	ld	r24, Y
    3a66:	88 23       	and	r24, r24
    3a68:	69 f0       	breq	.+26     	; 0x3a84 <ATTINY_get_SW_state+0x6c>
    3a6a:	fd 01       	movw	r30, r26
    3a6c:	e3 5a       	subi	r30, 0xA3	; 163
    3a6e:	fc 4f       	sbci	r31, 0xFC	; 252
    3a70:	80 81       	ld	r24, Z
    3a72:	98 23       	and	r25, r24
    3a74:	c1 f0       	breq	.+48     	; 0x3aa6 <ATTINY_get_SW_state+0x8e>
    3a76:	fd 01       	movw	r30, r26
    3a78:	e4 52       	subi	r30, 0x24	; 36
    3a7a:	fc 4f       	sbci	r31, 0xFC	; 252
    3a7c:	81 e0       	ldi	r24, 0x01	; 1
    3a7e:	80 83       	st	Z, r24
    3a80:	18 82       	st	Y, r1
    3a82:	11 c0       	rjmp	.+34     	; 0x3aa6 <ATTINY_get_SW_state+0x8e>
    3a84:	fd 01       	movw	r30, r26
    3a86:	e4 52       	subi	r30, 0x24	; 36
    3a88:	fc 4f       	sbci	r31, 0xFC	; 252
    3a8a:	80 81       	ld	r24, Z
    3a8c:	81 11       	cpse	r24, r1
    3a8e:	10 82       	st	Z, r1
    3a90:	fd 01       	movw	r30, r26
    3a92:	e3 5a       	subi	r30, 0xA3	; 163
    3a94:	fc 4f       	sbci	r31, 0xFC	; 252
    3a96:	80 81       	ld	r24, Z
    3a98:	98 23       	and	r25, r24
    3a9a:	29 f4       	brne	.+10     	; 0x3aa6 <ATTINY_get_SW_state+0x8e>
    3a9c:	fd 01       	movw	r30, r26
    3a9e:	e6 5a       	subi	r30, 0xA6	; 166
    3aa0:	fc 4f       	sbci	r31, 0xFC	; 252
    3aa2:	81 e0       	ldi	r24, 0x01	; 1
    3aa4:	80 83       	st	Z, r24
    3aa6:	a4 52       	subi	r26, 0x24	; 36
    3aa8:	bc 4f       	sbci	r27, 0xFC	; 252
    3aaa:	8c 91       	ld	r24, X
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	08 95       	ret

00003ab4 <ATTINY_open>:
    3ab4:	82 e0       	ldi	r24, 0x02	; 2
    3ab6:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    3aba:	88 23       	and	r24, r24
    3abc:	19 f4       	brne	.+6      	; 0x3ac4 <ATTINY_open+0x10>
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	82 e0       	ldi	r24, 0x02	; 2
    3ac2:	08 95       	ret
    3ac4:	10 92 b6 06 	sts	0x06B6, r1
    3ac8:	10 92 b5 06 	sts	0x06B5, r1
    3acc:	10 92 b8 06 	sts	0x06B8, r1
    3ad0:	10 92 b7 06 	sts	0x06B7, r1
    3ad4:	10 92 ba 06 	sts	0x06BA, r1
    3ad8:	10 92 b9 06 	sts	0x06B9, r1
    3adc:	10 92 bc 06 	sts	0x06BC, r1
    3ae0:	10 92 bb 06 	sts	0x06BB, r1
    3ae4:	10 92 be 06 	sts	0x06BE, r1
    3ae8:	10 92 bd 06 	sts	0x06BD, r1
    3aec:	80 e9       	ldi	r24, 0x90	; 144
    3aee:	91 e0       	ldi	r25, 0x01	; 1
    3af0:	90 93 a2 06 	sts	0x06A2, r25
    3af4:	80 93 a1 06 	sts	0x06A1, r24
    3af8:	90 93 a4 06 	sts	0x06A4, r25
    3afc:	80 93 a3 06 	sts	0x06A3, r24
    3b00:	90 93 a6 06 	sts	0x06A6, r25
    3b04:	80 93 a5 06 	sts	0x06A5, r24
    3b08:	90 93 a8 06 	sts	0x06A8, r25
    3b0c:	80 93 a7 06 	sts	0x06A7, r24
    3b10:	90 93 aa 06 	sts	0x06AA, r25
    3b14:	80 93 a9 06 	sts	0x06A9, r24
    3b18:	84 e3       	ldi	r24, 0x34	; 52
    3b1a:	98 e0       	ldi	r25, 0x08	; 8
    3b1c:	90 93 ac 06 	sts	0x06AC, r25
    3b20:	80 93 ab 06 	sts	0x06AB, r24
    3b24:	90 93 ae 06 	sts	0x06AE, r25
    3b28:	80 93 ad 06 	sts	0x06AD, r24
    3b2c:	90 93 b0 06 	sts	0x06B0, r25
    3b30:	80 93 af 06 	sts	0x06AF, r24
    3b34:	90 93 b2 06 	sts	0x06B2, r25
    3b38:	80 93 b1 06 	sts	0x06B1, r24
    3b3c:	90 93 b4 06 	sts	0x06B4, r25
    3b40:	80 93 b3 06 	sts	0x06B3, r24
    3b44:	81 e0       	ldi	r24, 0x01	; 1
    3b46:	61 e0       	ldi	r22, 0x01	; 1
    3b48:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    3b4c:	91 e0       	ldi	r25, 0x01	; 1
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	08 95       	ret

00003b52 <TMRSRVC_delay>:
    3b52:	df 93       	push	r29
    3b54:	cf 93       	push	r28
    3b56:	cd b7       	in	r28, 0x3d	; 61
    3b58:	de b7       	in	r29, 0x3e	; 62
    3b5a:	29 97       	sbiw	r28, 0x09	; 9
    3b5c:	0f b6       	in	r0, 0x3f	; 63
    3b5e:	f8 94       	cli
    3b60:	de bf       	out	0x3e, r29	; 62
    3b62:	0f be       	out	0x3f, r0	; 63
    3b64:	cd bf       	out	0x3d, r28	; 61
    3b66:	9c 01       	movw	r18, r24
    3b68:	ce 01       	movw	r24, r28
    3b6a:	01 96       	adiw	r24, 0x01	; 1
    3b6c:	61 e0       	ldi	r22, 0x01	; 1
    3b6e:	40 e0       	ldi	r20, 0x00	; 0
    3b70:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <TMRSRVC_new>
    3b74:	98 2f       	mov	r25, r24
    3b76:	88 23       	and	r24, r24
    3b78:	19 f4       	brne	.+6      	; 0x3b80 <TMRSRVC_delay+0x2e>
    3b7a:	8f 81       	ldd	r24, Y+7	; 0x07
    3b7c:	88 23       	and	r24, r24
    3b7e:	e9 f3       	breq	.-6      	; 0x3b7a <TMRSRVC_delay+0x28>
    3b80:	89 2f       	mov	r24, r25
    3b82:	29 96       	adiw	r28, 0x09	; 9
    3b84:	0f b6       	in	r0, 0x3f	; 63
    3b86:	f8 94       	cli
    3b88:	de bf       	out	0x3e, r29	; 62
    3b8a:	0f be       	out	0x3f, r0	; 63
    3b8c:	cd bf       	out	0x3d, r28	; 61
    3b8e:	cf 91       	pop	r28
    3b90:	df 91       	pop	r29
    3b92:	08 95       	ret

00003b94 <TMRSRVC_new>:
    3b94:	ef 92       	push	r14
    3b96:	ff 92       	push	r15
    3b98:	0f 93       	push	r16
    3b9a:	1f 93       	push	r17
    3b9c:	cf 93       	push	r28
    3b9e:	df 93       	push	r29
    3ba0:	ec 01       	movw	r28, r24
    3ba2:	f6 2e       	mov	r15, r22
    3ba4:	e4 2e       	mov	r14, r20
    3ba6:	89 01       	movw	r16, r18
    3ba8:	88 e0       	ldi	r24, 0x08	; 8
    3baa:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    3bae:	81 30       	cpi	r24, 0x01	; 1
    3bb0:	11 f0       	breq	.+4      	; 0x3bb6 <TMRSRVC_new+0x22>
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	26 c0       	rjmp	.+76     	; 0x3c02 <TMRSRVC_new+0x6e>
    3bb6:	84 e0       	ldi	r24, 0x04	; 4
    3bb8:	90 e0       	ldi	r25, 0x00	; 0
    3bba:	0e 94 61 31 	call	0x62c2	; 0x62c2 <malloc>
    3bbe:	fc 01       	movw	r30, r24
    3bc0:	00 97       	sbiw	r24, 0x00	; 0
    3bc2:	11 f4       	brne	.+4      	; 0x3bc8 <TMRSRVC_new+0x34>
    3bc4:	82 e0       	ldi	r24, 0x02	; 2
    3bc6:	1d c0       	rjmp	.+58     	; 0x3c02 <TMRSRVC_new+0x6e>
    3bc8:	f9 82       	std	Y+1, r15	; 0x01
    3bca:	f0 fc       	sbrc	r15, 0
    3bcc:	1e 82       	std	Y+6, r1	; 0x06
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	e8 16       	cp	r14, r24
    3bd2:	19 f4       	brne	.+6      	; 0x3bda <TMRSRVC_new+0x46>
    3bd4:	89 81       	ldd	r24, Y+1	; 0x01
    3bd6:	84 60       	ori	r24, 0x04	; 4
    3bd8:	89 83       	std	Y+1, r24	; 0x01
    3bda:	89 81       	ldd	r24, Y+1	; 0x01
    3bdc:	88 60       	ori	r24, 0x08	; 8
    3bde:	89 83       	std	Y+1, r24	; 0x01
    3be0:	1b 83       	std	Y+3, r17	; 0x03
    3be2:	0a 83       	std	Y+2, r16	; 0x02
    3be4:	1d 83       	std	Y+5, r17	; 0x05
    3be6:	0c 83       	std	Y+4, r16	; 0x04
    3be8:	d1 83       	std	Z+1, r29	; 0x01
    3bea:	c0 83       	st	Z, r28
    3bec:	13 82       	std	Z+3, r1	; 0x03
    3bee:	12 82       	std	Z+2, r1	; 0x02
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	80 93 48 04 	sts	0x0448, r24
    3bf6:	cf 01       	movw	r24, r30
    3bf8:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <TMRSRVC_insert>
    3bfc:	10 92 48 04 	sts	0x0448, r1
    3c00:	80 e0       	ldi	r24, 0x00	; 0
    3c02:	df 91       	pop	r29
    3c04:	cf 91       	pop	r28
    3c06:	1f 91       	pop	r17
    3c08:	0f 91       	pop	r16
    3c0a:	ff 90       	pop	r15
    3c0c:	ef 90       	pop	r14
    3c0e:	08 95       	ret

00003c10 <I2C_MSTR_get>:
    3c10:	fc 01       	movw	r30, r24
    3c12:	80 91 c2 06 	lds	r24, 0x06C2
    3c16:	81 30       	cpi	r24, 0x01	; 1
    3c18:	11 f0       	breq	.+4      	; 0x3c1e <I2C_MSTR_get+0xe>
    3c1a:	85 e0       	ldi	r24, 0x05	; 5
    3c1c:	08 95       	ret
    3c1e:	80 91 c3 06 	lds	r24, 0x06C3
    3c22:	81 30       	cpi	r24, 0x01	; 1
    3c24:	11 f0       	breq	.+4      	; 0x3c2a <I2C_MSTR_get+0x1a>
    3c26:	8a e0       	ldi	r24, 0x0A	; 10
    3c28:	08 95       	ret
    3c2a:	61 30       	cpi	r22, 0x01	; 1
    3c2c:	11 f4       	brne	.+4      	; 0x3c32 <I2C_MSTR_get+0x22>
    3c2e:	84 ec       	ldi	r24, 0xC4	; 196
    3c30:	01 c0       	rjmp	.+2      	; 0x3c34 <I2C_MSTR_get+0x24>
    3c32:	84 e8       	ldi	r24, 0x84	; 132
    3c34:	80 93 bc 00 	sts	0x00BC, r24
    3c38:	80 91 bc 00 	lds	r24, 0x00BC
    3c3c:	87 ff       	sbrs	r24, 7
    3c3e:	fc cf       	rjmp	.-8      	; 0x3c38 <I2C_MSTR_get+0x28>
    3c40:	61 30       	cpi	r22, 0x01	; 1
    3c42:	31 f4       	brne	.+12     	; 0x3c50 <I2C_MSTR_get+0x40>
    3c44:	80 91 b9 00 	lds	r24, 0x00B9
    3c48:	88 7f       	andi	r24, 0xF8	; 248
    3c4a:	80 35       	cpi	r24, 0x50	; 80
    3c4c:	59 f4       	brne	.+22     	; 0x3c64 <I2C_MSTR_get+0x54>
    3c4e:	05 c0       	rjmp	.+10     	; 0x3c5a <I2C_MSTR_get+0x4a>
    3c50:	80 91 b9 00 	lds	r24, 0x00B9
    3c54:	88 7f       	andi	r24, 0xF8	; 248
    3c56:	88 35       	cpi	r24, 0x58	; 88
    3c58:	29 f4       	brne	.+10     	; 0x3c64 <I2C_MSTR_get+0x54>
    3c5a:	80 91 bb 00 	lds	r24, 0x00BB
    3c5e:	80 83       	st	Z, r24
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	08 95       	ret
    3c64:	82 e0       	ldi	r24, 0x02	; 2
    3c66:	08 95       	ret

00003c68 <I2C_MSTR_send>:
    3c68:	98 2f       	mov	r25, r24
    3c6a:	80 91 c2 06 	lds	r24, 0x06C2
    3c6e:	81 30       	cpi	r24, 0x01	; 1
    3c70:	11 f0       	breq	.+4      	; 0x3c76 <I2C_MSTR_send+0xe>
    3c72:	85 e0       	ldi	r24, 0x05	; 5
    3c74:	08 95       	ret
    3c76:	80 91 c3 06 	lds	r24, 0x06C3
    3c7a:	81 30       	cpi	r24, 0x01	; 1
    3c7c:	11 f0       	breq	.+4      	; 0x3c82 <I2C_MSTR_send+0x1a>
    3c7e:	8a e0       	ldi	r24, 0x0A	; 10
    3c80:	08 95       	ret
    3c82:	90 93 bb 00 	sts	0x00BB, r25
    3c86:	84 e8       	ldi	r24, 0x84	; 132
    3c88:	80 93 bc 00 	sts	0x00BC, r24
    3c8c:	80 91 bc 00 	lds	r24, 0x00BC
    3c90:	87 ff       	sbrs	r24, 7
    3c92:	fc cf       	rjmp	.-8      	; 0x3c8c <I2C_MSTR_send+0x24>
    3c94:	80 91 b9 00 	lds	r24, 0x00B9
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	88 7f       	andi	r24, 0xF8	; 248
    3c9c:	90 70       	andi	r25, 0x00	; 0
    3c9e:	88 32       	cpi	r24, 0x28	; 40
    3ca0:	91 05       	cpc	r25, r1
    3ca2:	21 f0       	breq	.+8      	; 0x3cac <I2C_MSTR_send+0x44>
    3ca4:	c0 97       	sbiw	r24, 0x30	; 48
    3ca6:	21 f4       	brne	.+8      	; 0x3cb0 <I2C_MSTR_send+0x48>
    3ca8:	83 e0       	ldi	r24, 0x03	; 3
    3caa:	08 95       	ret
    3cac:	80 e0       	ldi	r24, 0x00	; 0
    3cae:	08 95       	ret
    3cb0:	8c e0       	ldi	r24, 0x0C	; 12
    3cb2:	08 95       	ret

00003cb4 <I2C_MSTR_start>:
    3cb4:	98 2f       	mov	r25, r24
    3cb6:	20 91 c2 06 	lds	r18, 0x06C2
    3cba:	21 30       	cpi	r18, 0x01	; 1
    3cbc:	11 f0       	breq	.+4      	; 0x3cc2 <I2C_MSTR_start+0xe>
    3cbe:	85 e0       	ldi	r24, 0x05	; 5
    3cc0:	08 95       	ret
    3cc2:	80 91 c4 06 	lds	r24, 0x06C4
    3cc6:	81 30       	cpi	r24, 0x01	; 1
    3cc8:	11 f4       	brne	.+4      	; 0x3cce <I2C_MSTR_start+0x1a>
    3cca:	89 e0       	ldi	r24, 0x09	; 9
    3ccc:	08 95       	ret
    3cce:	20 93 c3 06 	sts	0x06C3, r18
    3cd2:	84 ea       	ldi	r24, 0xA4	; 164
    3cd4:	80 93 bc 00 	sts	0x00BC, r24
    3cd8:	80 91 bc 00 	lds	r24, 0x00BC
    3cdc:	87 ff       	sbrs	r24, 7
    3cde:	fc cf       	rjmp	.-8      	; 0x3cd8 <I2C_MSTR_start+0x24>
    3ce0:	80 91 b9 00 	lds	r24, 0x00B9
    3ce4:	88 7f       	andi	r24, 0xF8	; 248
    3ce6:	88 30       	cpi	r24, 0x08	; 8
    3ce8:	39 f0       	breq	.+14     	; 0x3cf8 <I2C_MSTR_start+0x44>
    3cea:	80 91 b9 00 	lds	r24, 0x00B9
    3cee:	88 7f       	andi	r24, 0xF8	; 248
    3cf0:	80 31       	cpi	r24, 0x10	; 16
    3cf2:	11 f0       	breq	.+4      	; 0x3cf8 <I2C_MSTR_start+0x44>
    3cf4:	81 e0       	ldi	r24, 0x01	; 1
    3cf6:	08 95       	ret
    3cf8:	61 30       	cpi	r22, 0x01	; 1
    3cfa:	19 f4       	brne	.+6      	; 0x3d02 <I2C_MSTR_start+0x4e>
    3cfc:	99 0f       	add	r25, r25
    3cfe:	91 60       	ori	r25, 0x01	; 1
    3d00:	03 c0       	rjmp	.+6      	; 0x3d08 <I2C_MSTR_start+0x54>
    3d02:	66 23       	and	r22, r22
    3d04:	19 f4       	brne	.+6      	; 0x3d0c <I2C_MSTR_start+0x58>
    3d06:	99 0f       	add	r25, r25
    3d08:	90 93 bb 00 	sts	0x00BB, r25
    3d0c:	84 e8       	ldi	r24, 0x84	; 132
    3d0e:	80 93 bc 00 	sts	0x00BC, r24
    3d12:	80 91 bc 00 	lds	r24, 0x00BC
    3d16:	87 ff       	sbrs	r24, 7
    3d18:	fc cf       	rjmp	.-8      	; 0x3d12 <I2C_MSTR_start+0x5e>
    3d1a:	61 30       	cpi	r22, 0x01	; 1
    3d1c:	31 f4       	brne	.+12     	; 0x3d2a <I2C_MSTR_start+0x76>
    3d1e:	80 91 b9 00 	lds	r24, 0x00B9
    3d22:	88 7f       	andi	r24, 0xF8	; 248
    3d24:	80 34       	cpi	r24, 0x40	; 64
    3d26:	41 f4       	brne	.+16     	; 0x3d38 <I2C_MSTR_start+0x84>
    3d28:	09 c0       	rjmp	.+18     	; 0x3d3c <I2C_MSTR_start+0x88>
    3d2a:	66 23       	and	r22, r22
    3d2c:	39 f4       	brne	.+14     	; 0x3d3c <I2C_MSTR_start+0x88>
    3d2e:	80 91 b9 00 	lds	r24, 0x00B9
    3d32:	88 7f       	andi	r24, 0xF8	; 248
    3d34:	88 31       	cpi	r24, 0x18	; 24
    3d36:	11 f0       	breq	.+4      	; 0x3d3c <I2C_MSTR_start+0x88>
    3d38:	82 e0       	ldi	r24, 0x02	; 2
    3d3a:	08 95       	ret
    3d3c:	80 e0       	ldi	r24, 0x00	; 0
    3d3e:	08 95       	ret

00003d40 <I2C_MSTR_stop>:
    3d40:	80 91 c3 06 	lds	r24, 0x06C3
    3d44:	81 30       	cpi	r24, 0x01	; 1
    3d46:	11 f0       	breq	.+4      	; 0x3d4c <I2C_MSTR_stop+0xc>
    3d48:	8a e0       	ldi	r24, 0x0A	; 10
    3d4a:	08 95       	ret
    3d4c:	80 91 c5 06 	lds	r24, 0x06C5
    3d50:	81 30       	cpi	r24, 0x01	; 1
    3d52:	29 f4       	brne	.+10     	; 0x3d5e <I2C_MSTR_stop+0x1e>
    3d54:	85 e9       	ldi	r24, 0x95	; 149
    3d56:	80 93 bc 00 	sts	0x00BC, r24
    3d5a:	80 e0       	ldi	r24, 0x00	; 0
    3d5c:	08 95       	ret
    3d5e:	84 e9       	ldi	r24, 0x94	; 148
    3d60:	80 93 bc 00 	sts	0x00BC, r24
    3d64:	80 e0       	ldi	r24, 0x00	; 0
    3d66:	08 95       	ret

00003d68 <I2C_open>:
    3d68:	82 e1       	ldi	r24, 0x12	; 18
    3d6a:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    3d6e:	88 23       	and	r24, r24
    3d70:	b1 f4       	brne	.+44     	; 0x3d9e <I2C_open+0x36>
    3d72:	10 92 c2 06 	sts	0x06C2, r1
    3d76:	10 92 c3 06 	sts	0x06C3, r1
    3d7a:	10 92 c4 06 	sts	0x06C4, r1
    3d7e:	10 92 c5 06 	sts	0x06C5, r1
    3d82:	10 92 c6 06 	sts	0x06C6, r1
    3d86:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__I2C_init>
    3d8a:	87 e1       	ldi	r24, 0x17	; 23
    3d8c:	60 e0       	ldi	r22, 0x00	; 0
    3d8e:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <I2C_set_BRG>
    3d92:	0e 94 0c 25 	call	0x4a18	; 0x4a18 <I2C_enable>
    3d96:	82 e1       	ldi	r24, 0x12	; 18
    3d98:	61 e0       	ldi	r22, 0x01	; 1
    3d9a:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    3d9e:	82 e1       	ldi	r24, 0x12	; 18
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	08 95       	ret

00003da4 <I2C_set_BRG>:
    3da4:	63 70       	andi	r22, 0x03	; 3
    3da6:	60 93 b9 00 	sts	0x00B9, r22
    3daa:	80 93 b8 00 	sts	0x00B8, r24
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	80 93 c2 06 	sts	0x06C2, r24
    3db4:	08 95       	ret

00003db6 <__ADC_init>:
    3db6:	8f e1       	ldi	r24, 0x1F	; 31
    3db8:	80 93 7c 00 	sts	0x007C, r24
    3dbc:	ea e7       	ldi	r30, 0x7A	; 122
    3dbe:	f0 e0       	ldi	r31, 0x00	; 0
    3dc0:	87 e0       	ldi	r24, 0x07	; 7
    3dc2:	80 83       	st	Z, r24
    3dc4:	80 81       	ld	r24, Z
    3dc6:	80 68       	ori	r24, 0x80	; 128
    3dc8:	80 83       	st	Z, r24
    3dca:	08 95       	ret

00003dcc <CBOT_init>:
    3dcc:	0e 94 57 24 	call	0x48ae	; 0x48ae <SYS_init>
    3dd0:	0e 94 18 22 	call	0x4430	; 0x4430 <ATMEGA_open>
    3dd4:	0e 94 48 21 	call	0x4290	; 0x4290 <ISR_open>
    3dd8:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <TMRSRVC_open>
    3ddc:	0e 94 7d 22 	call	0x44fa	; 0x44fa <SPI_open>
    3de0:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <ATTINY_open>
    3de4:	78 94       	sei
    3de6:	08 95       	ret

00003de8 <CBOT_ISR_init>:
    3de8:	00 00       	nop
    3dea:	08 95       	ret

00003dec <__vector_16>:
    3dec:	1f 92       	push	r1
    3dee:	0f 92       	push	r0
    3df0:	0f b6       	in	r0, 0x3f	; 63
    3df2:	0f 92       	push	r0
    3df4:	11 24       	eor	r1, r1
    3df6:	2f 93       	push	r18
    3df8:	3f 93       	push	r19
    3dfa:	4f 93       	push	r20
    3dfc:	5f 93       	push	r21
    3dfe:	6f 93       	push	r22
    3e00:	7f 93       	push	r23
    3e02:	8f 93       	push	r24
    3e04:	9f 93       	push	r25
    3e06:	af 93       	push	r26
    3e08:	bf 93       	push	r27
    3e0a:	ef 93       	push	r30
    3e0c:	ff 93       	push	r31
    3e0e:	e0 91 08 04 	lds	r30, 0x0408
    3e12:	f0 91 09 04 	lds	r31, 0x0409
    3e16:	30 97       	sbiw	r30, 0x00	; 0
    3e18:	09 f0       	breq	.+2      	; 0x3e1c <__vector_16+0x30>
    3e1a:	09 95       	icall
    3e1c:	ff 91       	pop	r31
    3e1e:	ef 91       	pop	r30
    3e20:	bf 91       	pop	r27
    3e22:	af 91       	pop	r26
    3e24:	9f 91       	pop	r25
    3e26:	8f 91       	pop	r24
    3e28:	7f 91       	pop	r23
    3e2a:	6f 91       	pop	r22
    3e2c:	5f 91       	pop	r21
    3e2e:	4f 91       	pop	r20
    3e30:	3f 91       	pop	r19
    3e32:	2f 91       	pop	r18
    3e34:	0f 90       	pop	r0
    3e36:	0f be       	out	0x3f, r0	; 63
    3e38:	0f 90       	pop	r0
    3e3a:	1f 90       	pop	r1
    3e3c:	18 95       	reti

00003e3e <__vector_17>:
    3e3e:	1f 92       	push	r1
    3e40:	0f 92       	push	r0
    3e42:	0f b6       	in	r0, 0x3f	; 63
    3e44:	0f 92       	push	r0
    3e46:	11 24       	eor	r1, r1
    3e48:	2f 93       	push	r18
    3e4a:	3f 93       	push	r19
    3e4c:	4f 93       	push	r20
    3e4e:	5f 93       	push	r21
    3e50:	6f 93       	push	r22
    3e52:	7f 93       	push	r23
    3e54:	8f 93       	push	r24
    3e56:	9f 93       	push	r25
    3e58:	af 93       	push	r26
    3e5a:	bf 93       	push	r27
    3e5c:	ef 93       	push	r30
    3e5e:	ff 93       	push	r31
    3e60:	e0 91 0a 04 	lds	r30, 0x040A
    3e64:	f0 91 0b 04 	lds	r31, 0x040B
    3e68:	30 97       	sbiw	r30, 0x00	; 0
    3e6a:	09 f0       	breq	.+2      	; 0x3e6e <__vector_17+0x30>
    3e6c:	09 95       	icall
    3e6e:	ff 91       	pop	r31
    3e70:	ef 91       	pop	r30
    3e72:	bf 91       	pop	r27
    3e74:	af 91       	pop	r26
    3e76:	9f 91       	pop	r25
    3e78:	8f 91       	pop	r24
    3e7a:	7f 91       	pop	r23
    3e7c:	6f 91       	pop	r22
    3e7e:	5f 91       	pop	r21
    3e80:	4f 91       	pop	r20
    3e82:	3f 91       	pop	r19
    3e84:	2f 91       	pop	r18
    3e86:	0f 90       	pop	r0
    3e88:	0f be       	out	0x3f, r0	; 63
    3e8a:	0f 90       	pop	r0
    3e8c:	1f 90       	pop	r1
    3e8e:	18 95       	reti

00003e90 <__vector_18>:
    3e90:	1f 92       	push	r1
    3e92:	0f 92       	push	r0
    3e94:	0f b6       	in	r0, 0x3f	; 63
    3e96:	0f 92       	push	r0
    3e98:	11 24       	eor	r1, r1
    3e9a:	2f 93       	push	r18
    3e9c:	3f 93       	push	r19
    3e9e:	4f 93       	push	r20
    3ea0:	5f 93       	push	r21
    3ea2:	6f 93       	push	r22
    3ea4:	7f 93       	push	r23
    3ea6:	8f 93       	push	r24
    3ea8:	9f 93       	push	r25
    3eaa:	af 93       	push	r26
    3eac:	bf 93       	push	r27
    3eae:	ef 93       	push	r30
    3eb0:	ff 93       	push	r31
    3eb2:	e0 91 0c 04 	lds	r30, 0x040C
    3eb6:	f0 91 0d 04 	lds	r31, 0x040D
    3eba:	30 97       	sbiw	r30, 0x00	; 0
    3ebc:	09 f0       	breq	.+2      	; 0x3ec0 <__vector_18+0x30>
    3ebe:	09 95       	icall
    3ec0:	ff 91       	pop	r31
    3ec2:	ef 91       	pop	r30
    3ec4:	bf 91       	pop	r27
    3ec6:	af 91       	pop	r26
    3ec8:	9f 91       	pop	r25
    3eca:	8f 91       	pop	r24
    3ecc:	7f 91       	pop	r23
    3ece:	6f 91       	pop	r22
    3ed0:	5f 91       	pop	r21
    3ed2:	4f 91       	pop	r20
    3ed4:	3f 91       	pop	r19
    3ed6:	2f 91       	pop	r18
    3ed8:	0f 90       	pop	r0
    3eda:	0f be       	out	0x3f, r0	; 63
    3edc:	0f 90       	pop	r0
    3ede:	1f 90       	pop	r1
    3ee0:	18 95       	reti

00003ee2 <__vector_9>:
    3ee2:	1f 92       	push	r1
    3ee4:	0f 92       	push	r0
    3ee6:	0f b6       	in	r0, 0x3f	; 63
    3ee8:	0f 92       	push	r0
    3eea:	11 24       	eor	r1, r1
    3eec:	2f 93       	push	r18
    3eee:	3f 93       	push	r19
    3ef0:	4f 93       	push	r20
    3ef2:	5f 93       	push	r21
    3ef4:	6f 93       	push	r22
    3ef6:	7f 93       	push	r23
    3ef8:	8f 93       	push	r24
    3efa:	9f 93       	push	r25
    3efc:	af 93       	push	r26
    3efe:	bf 93       	push	r27
    3f00:	ef 93       	push	r30
    3f02:	ff 93       	push	r31
    3f04:	e0 91 fa 03 	lds	r30, 0x03FA
    3f08:	f0 91 fb 03 	lds	r31, 0x03FB
    3f0c:	30 97       	sbiw	r30, 0x00	; 0
    3f0e:	09 f0       	breq	.+2      	; 0x3f12 <__vector_9+0x30>
    3f10:	09 95       	icall
    3f12:	ff 91       	pop	r31
    3f14:	ef 91       	pop	r30
    3f16:	bf 91       	pop	r27
    3f18:	af 91       	pop	r26
    3f1a:	9f 91       	pop	r25
    3f1c:	8f 91       	pop	r24
    3f1e:	7f 91       	pop	r23
    3f20:	6f 91       	pop	r22
    3f22:	5f 91       	pop	r21
    3f24:	4f 91       	pop	r20
    3f26:	3f 91       	pop	r19
    3f28:	2f 91       	pop	r18
    3f2a:	0f 90       	pop	r0
    3f2c:	0f be       	out	0x3f, r0	; 63
    3f2e:	0f 90       	pop	r0
    3f30:	1f 90       	pop	r1
    3f32:	18 95       	reti

00003f34 <__vector_10>:
    3f34:	1f 92       	push	r1
    3f36:	0f 92       	push	r0
    3f38:	0f b6       	in	r0, 0x3f	; 63
    3f3a:	0f 92       	push	r0
    3f3c:	11 24       	eor	r1, r1
    3f3e:	2f 93       	push	r18
    3f40:	3f 93       	push	r19
    3f42:	4f 93       	push	r20
    3f44:	5f 93       	push	r21
    3f46:	6f 93       	push	r22
    3f48:	7f 93       	push	r23
    3f4a:	8f 93       	push	r24
    3f4c:	9f 93       	push	r25
    3f4e:	af 93       	push	r26
    3f50:	bf 93       	push	r27
    3f52:	ef 93       	push	r30
    3f54:	ff 93       	push	r31
    3f56:	e0 91 fc 03 	lds	r30, 0x03FC
    3f5a:	f0 91 fd 03 	lds	r31, 0x03FD
    3f5e:	30 97       	sbiw	r30, 0x00	; 0
    3f60:	09 f0       	breq	.+2      	; 0x3f64 <__vector_10+0x30>
    3f62:	09 95       	icall
    3f64:	ff 91       	pop	r31
    3f66:	ef 91       	pop	r30
    3f68:	bf 91       	pop	r27
    3f6a:	af 91       	pop	r26
    3f6c:	9f 91       	pop	r25
    3f6e:	8f 91       	pop	r24
    3f70:	7f 91       	pop	r23
    3f72:	6f 91       	pop	r22
    3f74:	5f 91       	pop	r21
    3f76:	4f 91       	pop	r20
    3f78:	3f 91       	pop	r19
    3f7a:	2f 91       	pop	r18
    3f7c:	0f 90       	pop	r0
    3f7e:	0f be       	out	0x3f, r0	; 63
    3f80:	0f 90       	pop	r0
    3f82:	1f 90       	pop	r1
    3f84:	18 95       	reti

00003f86 <__vector_11>:
    3f86:	1f 92       	push	r1
    3f88:	0f 92       	push	r0
    3f8a:	0f b6       	in	r0, 0x3f	; 63
    3f8c:	0f 92       	push	r0
    3f8e:	11 24       	eor	r1, r1
    3f90:	2f 93       	push	r18
    3f92:	3f 93       	push	r19
    3f94:	4f 93       	push	r20
    3f96:	5f 93       	push	r21
    3f98:	6f 93       	push	r22
    3f9a:	7f 93       	push	r23
    3f9c:	8f 93       	push	r24
    3f9e:	9f 93       	push	r25
    3fa0:	af 93       	push	r26
    3fa2:	bf 93       	push	r27
    3fa4:	ef 93       	push	r30
    3fa6:	ff 93       	push	r31
    3fa8:	e0 91 fe 03 	lds	r30, 0x03FE
    3fac:	f0 91 ff 03 	lds	r31, 0x03FF
    3fb0:	30 97       	sbiw	r30, 0x00	; 0
    3fb2:	09 f0       	breq	.+2      	; 0x3fb6 <__vector_11+0x30>
    3fb4:	09 95       	icall
    3fb6:	ff 91       	pop	r31
    3fb8:	ef 91       	pop	r30
    3fba:	bf 91       	pop	r27
    3fbc:	af 91       	pop	r26
    3fbe:	9f 91       	pop	r25
    3fc0:	8f 91       	pop	r24
    3fc2:	7f 91       	pop	r23
    3fc4:	6f 91       	pop	r22
    3fc6:	5f 91       	pop	r21
    3fc8:	4f 91       	pop	r20
    3fca:	3f 91       	pop	r19
    3fcc:	2f 91       	pop	r18
    3fce:	0f 90       	pop	r0
    3fd0:	0f be       	out	0x3f, r0	; 63
    3fd2:	0f 90       	pop	r0
    3fd4:	1f 90       	pop	r1
    3fd6:	18 95       	reti

00003fd8 <__vector_13>:
    3fd8:	1f 92       	push	r1
    3fda:	0f 92       	push	r0
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	0f 92       	push	r0
    3fe0:	11 24       	eor	r1, r1
    3fe2:	2f 93       	push	r18
    3fe4:	3f 93       	push	r19
    3fe6:	4f 93       	push	r20
    3fe8:	5f 93       	push	r21
    3fea:	6f 93       	push	r22
    3fec:	7f 93       	push	r23
    3fee:	8f 93       	push	r24
    3ff0:	9f 93       	push	r25
    3ff2:	af 93       	push	r26
    3ff4:	bf 93       	push	r27
    3ff6:	ef 93       	push	r30
    3ff8:	ff 93       	push	r31
    3ffa:	e0 91 02 04 	lds	r30, 0x0402
    3ffe:	f0 91 03 04 	lds	r31, 0x0403
    4002:	30 97       	sbiw	r30, 0x00	; 0
    4004:	09 f0       	breq	.+2      	; 0x4008 <__vector_13+0x30>
    4006:	09 95       	icall
    4008:	ff 91       	pop	r31
    400a:	ef 91       	pop	r30
    400c:	bf 91       	pop	r27
    400e:	af 91       	pop	r26
    4010:	9f 91       	pop	r25
    4012:	8f 91       	pop	r24
    4014:	7f 91       	pop	r23
    4016:	6f 91       	pop	r22
    4018:	5f 91       	pop	r21
    401a:	4f 91       	pop	r20
    401c:	3f 91       	pop	r19
    401e:	2f 91       	pop	r18
    4020:	0f 90       	pop	r0
    4022:	0f be       	out	0x3f, r0	; 63
    4024:	0f 90       	pop	r0
    4026:	1f 90       	pop	r1
    4028:	18 95       	reti

0000402a <__vector_14>:
    402a:	1f 92       	push	r1
    402c:	0f 92       	push	r0
    402e:	0f b6       	in	r0, 0x3f	; 63
    4030:	0f 92       	push	r0
    4032:	11 24       	eor	r1, r1
    4034:	2f 93       	push	r18
    4036:	3f 93       	push	r19
    4038:	4f 93       	push	r20
    403a:	5f 93       	push	r21
    403c:	6f 93       	push	r22
    403e:	7f 93       	push	r23
    4040:	8f 93       	push	r24
    4042:	9f 93       	push	r25
    4044:	af 93       	push	r26
    4046:	bf 93       	push	r27
    4048:	ef 93       	push	r30
    404a:	ff 93       	push	r31
    404c:	e0 91 04 04 	lds	r30, 0x0404
    4050:	f0 91 05 04 	lds	r31, 0x0405
    4054:	30 97       	sbiw	r30, 0x00	; 0
    4056:	09 f0       	breq	.+2      	; 0x405a <__vector_14+0x30>
    4058:	09 95       	icall
    405a:	ff 91       	pop	r31
    405c:	ef 91       	pop	r30
    405e:	bf 91       	pop	r27
    4060:	af 91       	pop	r26
    4062:	9f 91       	pop	r25
    4064:	8f 91       	pop	r24
    4066:	7f 91       	pop	r23
    4068:	6f 91       	pop	r22
    406a:	5f 91       	pop	r21
    406c:	4f 91       	pop	r20
    406e:	3f 91       	pop	r19
    4070:	2f 91       	pop	r18
    4072:	0f 90       	pop	r0
    4074:	0f be       	out	0x3f, r0	; 63
    4076:	0f 90       	pop	r0
    4078:	1f 90       	pop	r1
    407a:	18 95       	reti

0000407c <__vector_12>:
    407c:	1f 92       	push	r1
    407e:	0f 92       	push	r0
    4080:	0f b6       	in	r0, 0x3f	; 63
    4082:	0f 92       	push	r0
    4084:	11 24       	eor	r1, r1
    4086:	2f 93       	push	r18
    4088:	3f 93       	push	r19
    408a:	4f 93       	push	r20
    408c:	5f 93       	push	r21
    408e:	6f 93       	push	r22
    4090:	7f 93       	push	r23
    4092:	8f 93       	push	r24
    4094:	9f 93       	push	r25
    4096:	af 93       	push	r26
    4098:	bf 93       	push	r27
    409a:	ef 93       	push	r30
    409c:	ff 93       	push	r31
    409e:	e0 91 00 04 	lds	r30, 0x0400
    40a2:	f0 91 01 04 	lds	r31, 0x0401
    40a6:	30 97       	sbiw	r30, 0x00	; 0
    40a8:	09 f0       	breq	.+2      	; 0x40ac <__vector_12+0x30>
    40aa:	09 95       	icall
    40ac:	ff 91       	pop	r31
    40ae:	ef 91       	pop	r30
    40b0:	bf 91       	pop	r27
    40b2:	af 91       	pop	r26
    40b4:	9f 91       	pop	r25
    40b6:	8f 91       	pop	r24
    40b8:	7f 91       	pop	r23
    40ba:	6f 91       	pop	r22
    40bc:	5f 91       	pop	r21
    40be:	4f 91       	pop	r20
    40c0:	3f 91       	pop	r19
    40c2:	2f 91       	pop	r18
    40c4:	0f 90       	pop	r0
    40c6:	0f be       	out	0x3f, r0	; 63
    40c8:	0f 90       	pop	r0
    40ca:	1f 90       	pop	r1
    40cc:	18 95       	reti

000040ce <__vector_15>:
    40ce:	1f 92       	push	r1
    40d0:	0f 92       	push	r0
    40d2:	0f b6       	in	r0, 0x3f	; 63
    40d4:	0f 92       	push	r0
    40d6:	11 24       	eor	r1, r1
    40d8:	2f 93       	push	r18
    40da:	3f 93       	push	r19
    40dc:	4f 93       	push	r20
    40de:	5f 93       	push	r21
    40e0:	6f 93       	push	r22
    40e2:	7f 93       	push	r23
    40e4:	8f 93       	push	r24
    40e6:	9f 93       	push	r25
    40e8:	af 93       	push	r26
    40ea:	bf 93       	push	r27
    40ec:	ef 93       	push	r30
    40ee:	ff 93       	push	r31
    40f0:	e0 91 06 04 	lds	r30, 0x0406
    40f4:	f0 91 07 04 	lds	r31, 0x0407
    40f8:	30 97       	sbiw	r30, 0x00	; 0
    40fa:	09 f0       	breq	.+2      	; 0x40fe <__vector_15+0x30>
    40fc:	09 95       	icall
    40fe:	ff 91       	pop	r31
    4100:	ef 91       	pop	r30
    4102:	bf 91       	pop	r27
    4104:	af 91       	pop	r26
    4106:	9f 91       	pop	r25
    4108:	8f 91       	pop	r24
    410a:	7f 91       	pop	r23
    410c:	6f 91       	pop	r22
    410e:	5f 91       	pop	r21
    4110:	4f 91       	pop	r20
    4112:	3f 91       	pop	r19
    4114:	2f 91       	pop	r18
    4116:	0f 90       	pop	r0
    4118:	0f be       	out	0x3f, r0	; 63
    411a:	0f 90       	pop	r0
    411c:	1f 90       	pop	r1
    411e:	18 95       	reti

00004120 <__vector_4>:
    4120:	1f 92       	push	r1
    4122:	0f 92       	push	r0
    4124:	0f b6       	in	r0, 0x3f	; 63
    4126:	0f 92       	push	r0
    4128:	11 24       	eor	r1, r1
    412a:	2f 93       	push	r18
    412c:	3f 93       	push	r19
    412e:	4f 93       	push	r20
    4130:	5f 93       	push	r21
    4132:	6f 93       	push	r22
    4134:	7f 93       	push	r23
    4136:	8f 93       	push	r24
    4138:	9f 93       	push	r25
    413a:	af 93       	push	r26
    413c:	bf 93       	push	r27
    413e:	ef 93       	push	r30
    4140:	ff 93       	push	r31
    4142:	e0 91 f0 03 	lds	r30, 0x03F0
    4146:	f0 91 f1 03 	lds	r31, 0x03F1
    414a:	30 97       	sbiw	r30, 0x00	; 0
    414c:	09 f0       	breq	.+2      	; 0x4150 <__vector_4+0x30>
    414e:	09 95       	icall
    4150:	ff 91       	pop	r31
    4152:	ef 91       	pop	r30
    4154:	bf 91       	pop	r27
    4156:	af 91       	pop	r26
    4158:	9f 91       	pop	r25
    415a:	8f 91       	pop	r24
    415c:	7f 91       	pop	r23
    415e:	6f 91       	pop	r22
    4160:	5f 91       	pop	r21
    4162:	4f 91       	pop	r20
    4164:	3f 91       	pop	r19
    4166:	2f 91       	pop	r18
    4168:	0f 90       	pop	r0
    416a:	0f be       	out	0x3f, r0	; 63
    416c:	0f 90       	pop	r0
    416e:	1f 90       	pop	r1
    4170:	18 95       	reti

00004172 <__vector_5>:
    4172:	1f 92       	push	r1
    4174:	0f 92       	push	r0
    4176:	0f b6       	in	r0, 0x3f	; 63
    4178:	0f 92       	push	r0
    417a:	11 24       	eor	r1, r1
    417c:	2f 93       	push	r18
    417e:	3f 93       	push	r19
    4180:	4f 93       	push	r20
    4182:	5f 93       	push	r21
    4184:	6f 93       	push	r22
    4186:	7f 93       	push	r23
    4188:	8f 93       	push	r24
    418a:	9f 93       	push	r25
    418c:	af 93       	push	r26
    418e:	bf 93       	push	r27
    4190:	ef 93       	push	r30
    4192:	ff 93       	push	r31
    4194:	e0 91 f2 03 	lds	r30, 0x03F2
    4198:	f0 91 f3 03 	lds	r31, 0x03F3
    419c:	30 97       	sbiw	r30, 0x00	; 0
    419e:	09 f0       	breq	.+2      	; 0x41a2 <__vector_5+0x30>
    41a0:	09 95       	icall
    41a2:	ff 91       	pop	r31
    41a4:	ef 91       	pop	r30
    41a6:	bf 91       	pop	r27
    41a8:	af 91       	pop	r26
    41aa:	9f 91       	pop	r25
    41ac:	8f 91       	pop	r24
    41ae:	7f 91       	pop	r23
    41b0:	6f 91       	pop	r22
    41b2:	5f 91       	pop	r21
    41b4:	4f 91       	pop	r20
    41b6:	3f 91       	pop	r19
    41b8:	2f 91       	pop	r18
    41ba:	0f 90       	pop	r0
    41bc:	0f be       	out	0x3f, r0	; 63
    41be:	0f 90       	pop	r0
    41c0:	1f 90       	pop	r1
    41c2:	18 95       	reti

000041c4 <__vector_6>:
    41c4:	1f 92       	push	r1
    41c6:	0f 92       	push	r0
    41c8:	0f b6       	in	r0, 0x3f	; 63
    41ca:	0f 92       	push	r0
    41cc:	11 24       	eor	r1, r1
    41ce:	2f 93       	push	r18
    41d0:	3f 93       	push	r19
    41d2:	4f 93       	push	r20
    41d4:	5f 93       	push	r21
    41d6:	6f 93       	push	r22
    41d8:	7f 93       	push	r23
    41da:	8f 93       	push	r24
    41dc:	9f 93       	push	r25
    41de:	af 93       	push	r26
    41e0:	bf 93       	push	r27
    41e2:	ef 93       	push	r30
    41e4:	ff 93       	push	r31
    41e6:	e0 91 f4 03 	lds	r30, 0x03F4
    41ea:	f0 91 f5 03 	lds	r31, 0x03F5
    41ee:	30 97       	sbiw	r30, 0x00	; 0
    41f0:	09 f0       	breq	.+2      	; 0x41f4 <__vector_6+0x30>
    41f2:	09 95       	icall
    41f4:	ff 91       	pop	r31
    41f6:	ef 91       	pop	r30
    41f8:	bf 91       	pop	r27
    41fa:	af 91       	pop	r26
    41fc:	9f 91       	pop	r25
    41fe:	8f 91       	pop	r24
    4200:	7f 91       	pop	r23
    4202:	6f 91       	pop	r22
    4204:	5f 91       	pop	r21
    4206:	4f 91       	pop	r20
    4208:	3f 91       	pop	r19
    420a:	2f 91       	pop	r18
    420c:	0f 90       	pop	r0
    420e:	0f be       	out	0x3f, r0	; 63
    4210:	0f 90       	pop	r0
    4212:	1f 90       	pop	r1
    4214:	18 95       	reti

00004216 <__vector_7>:
    4216:	1f 92       	push	r1
    4218:	0f 92       	push	r0
    421a:	0f b6       	in	r0, 0x3f	; 63
    421c:	0f 92       	push	r0
    421e:	11 24       	eor	r1, r1
    4220:	2f 93       	push	r18
    4222:	3f 93       	push	r19
    4224:	4f 93       	push	r20
    4226:	5f 93       	push	r21
    4228:	6f 93       	push	r22
    422a:	7f 93       	push	r23
    422c:	8f 93       	push	r24
    422e:	9f 93       	push	r25
    4230:	af 93       	push	r26
    4232:	bf 93       	push	r27
    4234:	ef 93       	push	r30
    4236:	ff 93       	push	r31
    4238:	e0 91 f6 03 	lds	r30, 0x03F6
    423c:	f0 91 f7 03 	lds	r31, 0x03F7
    4240:	30 97       	sbiw	r30, 0x00	; 0
    4242:	09 f0       	breq	.+2      	; 0x4246 <__vector_7+0x30>
    4244:	09 95       	icall
    4246:	ff 91       	pop	r31
    4248:	ef 91       	pop	r30
    424a:	bf 91       	pop	r27
    424c:	af 91       	pop	r26
    424e:	9f 91       	pop	r25
    4250:	8f 91       	pop	r24
    4252:	7f 91       	pop	r23
    4254:	6f 91       	pop	r22
    4256:	5f 91       	pop	r21
    4258:	4f 91       	pop	r20
    425a:	3f 91       	pop	r19
    425c:	2f 91       	pop	r18
    425e:	0f 90       	pop	r0
    4260:	0f be       	out	0x3f, r0	; 63
    4262:	0f 90       	pop	r0
    4264:	1f 90       	pop	r1
    4266:	18 95       	reti

00004268 <ISR_attach>:
    4268:	e8 2f       	mov	r30, r24
    426a:	80 32       	cpi	r24, 0x20	; 32
    426c:	68 f4       	brcc	.+26     	; 0x4288 <ISR_attach+0x20>
    426e:	80 51       	subi	r24, 0x10	; 16
    4270:	83 30       	cpi	r24, 0x03	; 3
    4272:	50 f0       	brcs	.+20     	; 0x4288 <ISR_attach+0x20>
    4274:	f0 e0       	ldi	r31, 0x00	; 0
    4276:	ee 0f       	add	r30, r30
    4278:	ff 1f       	adc	r31, r31
    427a:	e8 51       	subi	r30, 0x18	; 24
    427c:	fc 4f       	sbci	r31, 0xFC	; 252
    427e:	20 81       	ld	r18, Z
    4280:	31 81       	ldd	r19, Z+1	; 0x01
    4282:	71 83       	std	Z+1, r23	; 0x01
    4284:	60 83       	st	Z, r22
    4286:	02 c0       	rjmp	.+4      	; 0x428c <ISR_attach+0x24>
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	c9 01       	movw	r24, r18
    428e:	08 95       	ret

00004290 <ISR_open>:
    4290:	80 e1       	ldi	r24, 0x10	; 16
    4292:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    4296:	88 23       	and	r24, r24
    4298:	61 f4       	brne	.+24     	; 0x42b2 <ISR_open+0x22>
    429a:	e8 ee       	ldi	r30, 0xE8	; 232
    429c:	f3 e0       	ldi	r31, 0x03	; 3
    429e:	11 92       	st	Z+, r1
    42a0:	11 92       	st	Z+, r1
    42a2:	84 e0       	ldi	r24, 0x04	; 4
    42a4:	e8 32       	cpi	r30, 0x28	; 40
    42a6:	f8 07       	cpc	r31, r24
    42a8:	d1 f7       	brne	.-12     	; 0x429e <ISR_open+0xe>
    42aa:	80 e1       	ldi	r24, 0x10	; 16
    42ac:	61 e0       	ldi	r22, 0x01	; 1
    42ae:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    42b2:	80 e1       	ldi	r24, 0x10	; 16
    42b4:	91 e0       	ldi	r25, 0x01	; 1
    42b6:	08 95       	ret

000042b8 <__LCD_init>:
    42b8:	23 9a       	sbi	0x04, 3	; 4
    42ba:	08 95       	ret

000042bc <__LCD_putchar>:
    42bc:	ff 92       	push	r15
    42be:	0f 93       	push	r16
    42c0:	1f 93       	push	r17
    42c2:	cf 93       	push	r28
    42c4:	df 93       	push	r29
    42c6:	f8 2e       	mov	r15, r24
    42c8:	8a e0       	ldi	r24, 0x0A	; 10
    42ca:	f8 16       	cp	r15, r24
    42cc:	b1 f0       	breq	.+44     	; 0x42fa <__LCD_putchar+0x3e>
    42ce:	8f 15       	cp	r24, r15
    42d0:	48 f0       	brcs	.+18     	; 0x42e4 <__LCD_putchar+0x28>
    42d2:	e8 e0       	ldi	r30, 0x08	; 8
    42d4:	fe 16       	cp	r15, r30
    42d6:	b9 f1       	breq	.+110    	; 0x4346 <__LCD_putchar+0x8a>
    42d8:	ef 15       	cp	r30, r15
    42da:	38 f1       	brcs	.+78     	; 0x432a <__LCD_putchar+0x6e>
    42dc:	f7 e0       	ldi	r31, 0x07	; 7
    42de:	ff 16       	cp	r15, r31
    42e0:	51 f4       	brne	.+20     	; 0x42f6 <__LCD_putchar+0x3a>
    42e2:	3b c0       	rjmp	.+118    	; 0x435a <__LCD_putchar+0x9e>
    42e4:	8d e0       	ldi	r24, 0x0D	; 13
    42e6:	f8 16       	cp	r15, r24
    42e8:	59 f0       	breq	.+22     	; 0x4300 <__LCD_putchar+0x44>
    42ea:	eb e1       	ldi	r30, 0x1B	; 27
    42ec:	fe 16       	cp	r15, r30
    42ee:	89 f0       	breq	.+34     	; 0x4312 <__LCD_putchar+0x56>
    42f0:	fc e0       	ldi	r31, 0x0C	; 12
    42f2:	ff 16       	cp	r15, r31
    42f4:	41 f0       	breq	.+16     	; 0x4306 <__LCD_putchar+0x4a>
    42f6:	01 e0       	ldi	r16, 0x01	; 1
    42f8:	41 c0       	rjmp	.+130    	; 0x437c <__LCD_putchar+0xc0>
    42fa:	10 92 9b 06 	sts	0x069B, r1
    42fe:	03 c0       	rjmp	.+6      	; 0x4306 <__LCD_putchar+0x4a>
    4300:	10 92 9b 06 	sts	0x069B, r1
    4304:	3a c0       	rjmp	.+116    	; 0x437a <__LCD_putchar+0xbe>
    4306:	80 91 9c 06 	lds	r24, 0x069C
    430a:	81 50       	subi	r24, 0x01	; 1
    430c:	80 93 9c 06 	sts	0x069C, r24
    4310:	34 c0       	rjmp	.+104    	; 0x437a <__LCD_putchar+0xbe>
    4312:	0e 94 e9 16 	call	0x2dd2	; 0x2dd2 <LCD_clear>
    4316:	14 c0       	rjmp	.+40     	; 0x4340 <__LCD_putchar+0x84>
    4318:	80 e0       	ldi	r24, 0x00	; 0
    431a:	61 e0       	ldi	r22, 0x01	; 1
    431c:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    4320:	80 91 9b 06 	lds	r24, 0x069B
    4324:	8f 5f       	subi	r24, 0xFF	; 255
    4326:	80 93 9b 06 	sts	0x069B, r24
    432a:	80 91 9b 06 	lds	r24, 0x069B
    432e:	87 ff       	sbrs	r24, 7
    4330:	f3 cf       	rjmp	.-26     	; 0x4318 <__LCD_putchar+0x5c>
    4332:	10 92 9b 06 	sts	0x069B, r1
    4336:	80 91 9c 06 	lds	r24, 0x069C
    433a:	81 50       	subi	r24, 0x01	; 1
    433c:	80 93 9c 06 	sts	0x069C, r24
    4340:	00 e0       	ldi	r16, 0x00	; 0
    4342:	11 e0       	ldi	r17, 0x01	; 1
    4344:	1c c0       	rjmp	.+56     	; 0x437e <__LCD_putchar+0xc2>
    4346:	80 91 9b 06 	lds	r24, 0x069B
    434a:	88 23       	and	r24, r24
    434c:	b1 f0       	breq	.+44     	; 0x437a <__LCD_putchar+0xbe>
    434e:	80 91 9b 06 	lds	r24, 0x069B
    4352:	86 50       	subi	r24, 0x06	; 6
    4354:	80 93 9b 06 	sts	0x069B, r24
    4358:	10 c0       	rjmp	.+32     	; 0x437a <__LCD_putchar+0xbe>
    435a:	81 e0       	ldi	r24, 0x01	; 1
    435c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <SPKR_open>
    4360:	64 ef       	ldi	r22, 0xF4	; 244
    4362:	71 e0       	ldi	r23, 0x01	; 1
    4364:	80 e0       	ldi	r24, 0x00	; 0
    4366:	90 e0       	ldi	r25, 0x00	; 0
    4368:	4d e7       	ldi	r20, 0x7D	; 125
    436a:	50 e0       	ldi	r21, 0x00	; 0
    436c:	24 e6       	ldi	r18, 0x64	; 100
    436e:	30 e0       	ldi	r19, 0x00	; 0
    4370:	0e 94 78 23 	call	0x46f0	; 0x46f0 <SPKR_play_beep>
    4374:	81 e0       	ldi	r24, 0x01	; 1
    4376:	0e 94 44 23 	call	0x4688	; 0x4688 <SPKR_close>
    437a:	00 e0       	ldi	r16, 0x00	; 0
    437c:	10 e0       	ldi	r17, 0x00	; 0
    437e:	80 91 9c 06 	lds	r24, 0x069C
    4382:	60 91 9b 06 	lds	r22, 0x069B
    4386:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <LCD_set_PGC_addr>
    438a:	00 23       	and	r16, r16
    438c:	51 f1       	breq	.+84     	; 0x43e2 <__LCD_putchar+0x126>
    438e:	85 e0       	ldi	r24, 0x05	; 5
    4390:	f8 9e       	mul	r15, r24
    4392:	c0 01       	movw	r24, r0
    4394:	11 24       	eor	r1, r1
    4396:	ec 01       	movw	r28, r24
    4398:	c3 55       	subi	r28, 0x53	; 83
    439a:	df 4f       	sbci	r29, 0xFF	; 255
    439c:	8c 01       	movw	r16, r24
    439e:	0e 54       	subi	r16, 0x4E	; 78
    43a0:	1f 4f       	sbci	r17, 0xFF	; 255
    43a2:	fe 01       	movw	r30, r28
    43a4:	84 91       	lpm	r24, Z+
    43a6:	61 e0       	ldi	r22, 0x01	; 1
    43a8:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    43ac:	21 96       	adiw	r28, 0x01	; 1
    43ae:	c0 17       	cp	r28, r16
    43b0:	d1 07       	cpc	r29, r17
    43b2:	b9 f7       	brne	.-18     	; 0x43a2 <__LCD_putchar+0xe6>
    43b4:	80 e0       	ldi	r24, 0x00	; 0
    43b6:	61 e0       	ldi	r22, 0x01	; 1
    43b8:	0e 94 c8 17 	call	0x2f90	; 0x2f90 <LCD_write>
    43bc:	80 91 9b 06 	lds	r24, 0x069B
    43c0:	8a 5f       	subi	r24, 0xFA	; 250
    43c2:	80 93 9b 06 	sts	0x069B, r24
    43c6:	80 91 9b 06 	lds	r24, 0x069B
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	8c 37       	cpi	r24, 0x7C	; 124
    43ce:	91 05       	cpc	r25, r1
    43d0:	3c f0       	brlt	.+14     	; 0x43e0 <__LCD_putchar+0x124>
    43d2:	10 92 9b 06 	sts	0x069B, r1
    43d6:	80 91 9c 06 	lds	r24, 0x069C
    43da:	81 50       	subi	r24, 0x01	; 1
    43dc:	80 93 9c 06 	sts	0x069C, r24
    43e0:	11 e0       	ldi	r17, 0x01	; 1
    43e2:	80 91 9c 06 	lds	r24, 0x069C
    43e6:	83 70       	andi	r24, 0x03	; 3
    43e8:	80 93 9c 06 	sts	0x069C, r24
    43ec:	11 30       	cpi	r17, 0x01	; 1
    43ee:	59 f4       	brne	.+22     	; 0x4406 <__LCD_putchar+0x14a>
    43f0:	80 91 9d 06 	lds	r24, 0x069D
    43f4:	81 30       	cpi	r24, 0x01	; 1
    43f6:	39 f4       	brne	.+14     	; 0x4406 <__LCD_putchar+0x14a>
    43f8:	e0 91 9e 06 	lds	r30, 0x069E
    43fc:	f0 91 9f 06 	lds	r31, 0x069F
    4400:	30 97       	sbiw	r30, 0x00	; 0
    4402:	09 f0       	breq	.+2      	; 0x4406 <__LCD_putchar+0x14a>
    4404:	09 95       	icall
    4406:	80 e0       	ldi	r24, 0x00	; 0
    4408:	90 e0       	ldi	r25, 0x00	; 0
    440a:	df 91       	pop	r29
    440c:	cf 91       	pop	r28
    440e:	1f 91       	pop	r17
    4410:	0f 91       	pop	r16
    4412:	ff 90       	pop	r15
    4414:	08 95       	ret

00004416 <__LED_clr_pattern>:
    4416:	85 fd       	sbrc	r24, 5
    4418:	5d 98       	cbi	0x0b, 5	; 11
    441a:	86 fd       	sbrc	r24, 6
    441c:	5e 98       	cbi	0x0b, 6	; 11
    441e:	08 95       	ret

00004420 <__LED_init>:
    4420:	55 9a       	sbi	0x0a, 5	; 10
    4422:	56 9a       	sbi	0x0a, 6	; 10
    4424:	08 95       	ret

00004426 <__LED_set_pattern>:
    4426:	85 fd       	sbrc	r24, 5
    4428:	5d 9a       	sbi	0x0b, 5	; 11
    442a:	86 fd       	sbrc	r24, 6
    442c:	5e 9a       	sbi	0x0b, 6	; 11
    442e:	08 95       	ret

00004430 <ATMEGA_open>:
    4430:	80 e0       	ldi	r24, 0x00	; 0
    4432:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    4436:	88 23       	and	r24, r24
    4438:	51 f4       	brne	.+20     	; 0x444e <ATMEGA_open+0x1e>
    443a:	f8 94       	cli
    443c:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <__ATMEGA_init>
    4440:	81 e0       	ldi	r24, 0x01	; 1
    4442:	0e 94 2a 22 	call	0x4454	; 0x4454 <ATMEGA_set_clk_mode>
    4446:	80 e0       	ldi	r24, 0x00	; 0
    4448:	61 e0       	ldi	r22, 0x01	; 1
    444a:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    444e:	80 e0       	ldi	r24, 0x00	; 0
    4450:	91 e0       	ldi	r25, 0x01	; 1
    4452:	08 95       	ret

00004454 <ATMEGA_set_clk_mode>:
    4454:	81 30       	cpi	r24, 0x01	; 1
    4456:	49 f0       	breq	.+18     	; 0x446a <ATMEGA_set_clk_mode+0x16>
    4458:	f8 94       	cli
    445a:	81 30       	cpi	r24, 0x01	; 1
    445c:	20 f1       	brcs	.+72     	; 0x44a6 <ATMEGA_set_clk_mode+0x52>
    445e:	82 30       	cpi	r24, 0x02	; 2
    4460:	b1 f0       	breq	.+44     	; 0x448e <ATMEGA_set_clk_mode+0x3a>
    4462:	83 30       	cpi	r24, 0x03	; 3
    4464:	09 f0       	breq	.+2      	; 0x4468 <ATMEGA_set_clk_mode+0x14>
    4466:	45 c0       	rjmp	.+138    	; 0x44f2 <ATMEGA_set_clk_mode+0x9e>
    4468:	17 c0       	rjmp	.+46     	; 0x4498 <ATMEGA_set_clk_mode+0x44>
    446a:	2c 9a       	sbi	0x05, 4	; 5
    446c:	80 e8       	ldi	r24, 0x80	; 128
    446e:	80 93 61 00 	sts	0x0061, r24
    4472:	10 92 61 00 	sts	0x0061, r1
    4476:	80 e0       	ldi	r24, 0x00	; 0
    4478:	90 e0       	ldi	r25, 0x00	; 0
    447a:	00 00       	nop
    447c:	01 96       	adiw	r24, 0x01	; 1
    447e:	88 32       	cpi	r24, 0x28	; 40
    4480:	91 05       	cpc	r25, r1
    4482:	d9 f7       	brne	.-10     	; 0x447a <ATMEGA_set_clk_mode+0x26>
    4484:	10 92 68 00 	sts	0x0068, r1
    4488:	10 92 6b 00 	sts	0x006B, r1
    448c:	08 95       	ret
    448e:	80 e8       	ldi	r24, 0x80	; 128
    4490:	80 93 61 00 	sts	0x0061, r24
    4494:	83 e0       	ldi	r24, 0x03	; 3
    4496:	04 c0       	rjmp	.+8      	; 0x44a0 <ATMEGA_set_clk_mode+0x4c>
    4498:	80 e8       	ldi	r24, 0x80	; 128
    449a:	80 93 61 00 	sts	0x0061, r24
    449e:	88 e0       	ldi	r24, 0x08	; 8
    44a0:	80 93 61 00 	sts	0x0061, r24
    44a4:	28 c0       	rjmp	.+80     	; 0x44f6 <ATMEGA_set_clk_mode+0xa2>
    44a6:	80 e0       	ldi	r24, 0x00	; 0
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	00 00       	nop
    44ac:	01 96       	adiw	r24, 0x01	; 1
    44ae:	2d e6       	ldi	r18, 0x6D	; 109
    44b0:	80 36       	cpi	r24, 0x60	; 96
    44b2:	92 07       	cpc	r25, r18
    44b4:	d1 f7       	brne	.-12     	; 0x44aa <ATMEGA_set_clk_mode+0x56>
    44b6:	2c 98       	cbi	0x05, 4	; 5
    44b8:	80 e0       	ldi	r24, 0x00	; 0
    44ba:	90 e0       	ldi	r25, 0x00	; 0
    44bc:	00 00       	nop
    44be:	01 96       	adiw	r24, 0x01	; 1
    44c0:	2d e6       	ldi	r18, 0x6D	; 109
    44c2:	80 36       	cpi	r24, 0x60	; 96
    44c4:	92 07       	cpc	r25, r18
    44c6:	d1 f7       	brne	.-12     	; 0x44bc <ATMEGA_set_clk_mode+0x68>
    44c8:	10 92 7a 00 	sts	0x007A, r1
    44cc:	8f ef       	ldi	r24, 0xFF	; 255
    44ce:	80 93 64 00 	sts	0x0064, r24
    44d2:	80 91 68 00 	lds	r24, 0x0068
    44d6:	81 60       	ori	r24, 0x01	; 1
    44d8:	80 93 68 00 	sts	0x0068, r24
    44dc:	80 91 6b 00 	lds	r24, 0x006B
    44e0:	84 60       	ori	r24, 0x04	; 4
    44e2:	80 93 6b 00 	sts	0x006B, r24
    44e6:	78 94       	sei
    44e8:	83 b7       	in	r24, 0x33	; 51
    44ea:	81 60       	ori	r24, 0x01	; 1
    44ec:	83 bf       	out	0x33, r24	; 51
    44ee:	88 95       	sleep
    44f0:	08 95       	ret
    44f2:	82 30       	cpi	r24, 0x02	; 2
    44f4:	08 f0       	brcs	.+2      	; 0x44f8 <ATMEGA_set_clk_mode+0xa4>
    44f6:	78 94       	sei
    44f8:	08 95       	ret

000044fa <SPI_open>:
    44fa:	0f 93       	push	r16
    44fc:	1f 93       	push	r17
    44fe:	0e 94 56 25 	call	0x4aac	; 0x4aac <__SPI_init>
    4502:	80 e0       	ldi	r24, 0x00	; 0
    4504:	65 e4       	ldi	r22, 0x45	; 69
    4506:	75 e2       	ldi	r23, 0x25	; 37
    4508:	0e 94 c8 22 	call	0x4590	; 0x4590 <SPI_set_config_func>
    450c:	81 e0       	ldi	r24, 0x01	; 1
    450e:	6d e3       	ldi	r22, 0x3D	; 61
    4510:	75 e2       	ldi	r23, 0x25	; 37
    4512:	0e 94 c8 22 	call	0x4590	; 0x4590 <SPI_set_config_func>
    4516:	82 e0       	ldi	r24, 0x02	; 2
    4518:	65 e3       	ldi	r22, 0x35	; 53
    451a:	75 e2       	ldi	r23, 0x25	; 37
    451c:	0e 94 c8 22 	call	0x4590	; 0x4590 <SPI_set_config_func>
    4520:	86 e0       	ldi	r24, 0x06	; 6
    4522:	6d e4       	ldi	r22, 0x4D	; 77
    4524:	75 e2       	ldi	r23, 0x25	; 37
    4526:	0e 94 c8 22 	call	0x4590	; 0x4590 <SPI_set_config_func>
    452a:	0d e2       	ldi	r16, 0x2D	; 45
    452c:	15 e2       	ldi	r17, 0x25	; 37
    452e:	83 e0       	ldi	r24, 0x03	; 3
    4530:	b8 01       	movw	r22, r16
    4532:	0e 94 c8 22 	call	0x4590	; 0x4590 <SPI_set_config_func>
    4536:	84 e0       	ldi	r24, 0x04	; 4
    4538:	b8 01       	movw	r22, r16
    453a:	0e 94 c8 22 	call	0x4590	; 0x4590 <SPI_set_config_func>
    453e:	85 e0       	ldi	r24, 0x05	; 5
    4540:	b8 01       	movw	r22, r16
    4542:	0e 94 c8 22 	call	0x4590	; 0x4590 <SPI_set_config_func>
    4546:	87 e0       	ldi	r24, 0x07	; 7
    4548:	b8 01       	movw	r22, r16
    454a:	0e 94 c8 22 	call	0x4590	; 0x4590 <SPI_set_config_func>
    454e:	82 e0       	ldi	r24, 0x02	; 2
    4550:	61 e0       	ldi	r22, 0x01	; 1
    4552:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    4556:	8f ef       	ldi	r24, 0xFF	; 255
    4558:	80 93 a0 06 	sts	0x06A0, r24
    455c:	87 e0       	ldi	r24, 0x07	; 7
    455e:	0e 94 04 18 	call	0x3008	; 0x3008 <SPI_set_slave_addr>
    4562:	82 e0       	ldi	r24, 0x02	; 2
    4564:	91 e0       	ldi	r25, 0x01	; 1
    4566:	1f 91       	pop	r17
    4568:	0f 91       	pop	r16
    456a:	08 95       	ret

0000456c <SPI_receive>:
    456c:	1f 93       	push	r17
    456e:	16 2f       	mov	r17, r22
    4570:	0e 94 04 18 	call	0x3008	; 0x3008 <SPI_set_slave_addr>
    4574:	82 e0       	ldi	r24, 0x02	; 2
    4576:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    457a:	81 30       	cpi	r24, 0x01	; 1
    457c:	11 f0       	breq	.+4      	; 0x4582 <SPI_receive+0x16>
    457e:	80 e0       	ldi	r24, 0x00	; 0
    4580:	05 c0       	rjmp	.+10     	; 0x458c <SPI_receive+0x20>
    4582:	1e bd       	out	0x2e, r17	; 46
    4584:	0d b4       	in	r0, 0x2d	; 45
    4586:	07 fe       	sbrs	r0, 7
    4588:	fd cf       	rjmp	.-6      	; 0x4584 <SPI_receive+0x18>
    458a:	8e b5       	in	r24, 0x2e	; 46
    458c:	1f 91       	pop	r17
    458e:	08 95       	ret

00004590 <SPI_set_config_func>:
    4590:	e8 2f       	mov	r30, r24
    4592:	f0 e0       	ldi	r31, 0x00	; 0
    4594:	ee 0f       	add	r30, r30
    4596:	ff 1f       	adc	r31, r31
    4598:	e8 5d       	subi	r30, 0xD8	; 216
    459a:	fb 4f       	sbci	r31, 0xFB	; 251
    459c:	71 83       	std	Z+1, r23	; 0x01
    459e:	60 83       	st	Z, r22
    45a0:	08 95       	ret

000045a2 <__SPKR_TIMER1_COMPA_vect>:
    45a2:	0e 94 d4 22 	call	0x45a8	; 0x45a8 <SPKR_clk>
    45a6:	08 95       	ret

000045a8 <SPKR_clk>:
    45a8:	80 91 3a 04 	lds	r24, 0x043A
    45ac:	90 91 3b 04 	lds	r25, 0x043B
    45b0:	a0 91 3c 04 	lds	r26, 0x043C
    45b4:	b0 91 3d 04 	lds	r27, 0x043D
    45b8:	20 91 3e 04 	lds	r18, 0x043E
    45bc:	30 91 3f 04 	lds	r19, 0x043F
    45c0:	40 91 40 04 	lds	r20, 0x0440
    45c4:	50 91 41 04 	lds	r21, 0x0441
    45c8:	28 0f       	add	r18, r24
    45ca:	39 1f       	adc	r19, r25
    45cc:	4a 1f       	adc	r20, r26
    45ce:	5b 1f       	adc	r21, r27
    45d0:	20 93 3a 04 	sts	0x043A, r18
    45d4:	30 93 3b 04 	sts	0x043B, r19
    45d8:	40 93 3c 04 	sts	0x043C, r20
    45dc:	50 93 3d 04 	sts	0x043D, r21
    45e0:	80 91 3a 04 	lds	r24, 0x043A
    45e4:	90 91 3b 04 	lds	r25, 0x043B
    45e8:	a0 91 3c 04 	lds	r26, 0x043C
    45ec:	b0 91 3d 04 	lds	r27, 0x043D
    45f0:	88 51       	subi	r24, 0x18	; 24
    45f2:	96 4f       	sbci	r25, 0xF6	; 246
    45f4:	a0 40       	sbci	r26, 0x00	; 0
    45f6:	b0 40       	sbci	r27, 0x00	; 0
    45f8:	bc f0       	brlt	.+46     	; 0x4628 <SPKR_clk+0x80>
    45fa:	8b b1       	in	r24, 0x0b	; 11
    45fc:	80 58       	subi	r24, 0x80	; 128
    45fe:	8b b9       	out	0x0b, r24	; 11
    4600:	80 91 3a 04 	lds	r24, 0x043A
    4604:	90 91 3b 04 	lds	r25, 0x043B
    4608:	a0 91 3c 04 	lds	r26, 0x043C
    460c:	b0 91 3d 04 	lds	r27, 0x043D
    4610:	88 51       	subi	r24, 0x18	; 24
    4612:	96 4f       	sbci	r25, 0xF6	; 246
    4614:	a0 40       	sbci	r26, 0x00	; 0
    4616:	b0 40       	sbci	r27, 0x00	; 0
    4618:	80 93 3a 04 	sts	0x043A, r24
    461c:	90 93 3b 04 	sts	0x043B, r25
    4620:	a0 93 3c 04 	sts	0x043C, r26
    4624:	b0 93 3d 04 	sts	0x043D, r27
    4628:	08 95       	ret

0000462a <__SPKR_close_beep_mode>:
    462a:	8a e0       	ldi	r24, 0x0A	; 10
    462c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    4630:	81 30       	cpi	r24, 0x01	; 1
    4632:	41 f4       	brne	.+16     	; 0x4644 <__SPKR_close_beep_mode+0x1a>
    4634:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <__SPKR_close>
    4638:	10 92 39 04 	sts	0x0439, r1
    463c:	8a e0       	ldi	r24, 0x0A	; 10
    463e:	60 e0       	ldi	r22, 0x00	; 0
    4640:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    4644:	08 95       	ret

00004646 <__SPKR_close_tone_mode>:
    4646:	89 e0       	ldi	r24, 0x09	; 9
    4648:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    464c:	81 30       	cpi	r24, 0x01	; 1
    464e:	d9 f4       	brne	.+54     	; 0x4686 <__SPKR_close_tone_mode+0x40>
    4650:	80 91 38 04 	lds	r24, 0x0438
    4654:	88 23       	and	r24, r24
    4656:	11 f0       	breq	.+4      	; 0x465c <__SPKR_close_tone_mode+0x16>
    4658:	0e 94 c5 23 	call	0x478a	; 0x478a <__SPKR_stop>
    465c:	82 e0       	ldi	r24, 0x02	; 2
    465e:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <__SPKR_close>
    4662:	80 91 46 04 	lds	r24, 0x0446
    4666:	90 91 47 04 	lds	r25, 0x0447
    466a:	00 97       	sbiw	r24, 0x00	; 0
    466c:	31 f0       	breq	.+12     	; 0x467a <__SPKR_close_tone_mode+0x34>
    466e:	0e 94 0e 32 	call	0x641c	; 0x641c <free>
    4672:	10 92 47 04 	sts	0x0447, r1
    4676:	10 92 46 04 	sts	0x0446, r1
    467a:	10 92 38 04 	sts	0x0438, r1
    467e:	89 e0       	ldi	r24, 0x09	; 9
    4680:	60 e0       	ldi	r22, 0x00	; 0
    4682:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    4686:	08 95       	ret

00004688 <SPKR_close>:
    4688:	81 30       	cpi	r24, 0x01	; 1
    468a:	29 f0       	breq	.+10     	; 0x4696 <SPKR_close+0xe>
    468c:	82 30       	cpi	r24, 0x02	; 2
    468e:	29 f4       	brne	.+10     	; 0x469a <SPKR_close+0x12>
    4690:	0e 94 23 23 	call	0x4646	; 0x4646 <__SPKR_close_tone_mode>
    4694:	08 95       	ret
    4696:	0e 94 15 23 	call	0x462a	; 0x462a <__SPKR_close_beep_mode>
    469a:	08 95       	ret

0000469c <__SPKR_init>:
    469c:	98 2f       	mov	r25, r24
    469e:	80 91 38 04 	lds	r24, 0x0438
    46a2:	88 23       	and	r24, r24
    46a4:	31 f4       	brne	.+12     	; 0x46b2 <__SPKR_init+0x16>
    46a6:	80 91 39 04 	lds	r24, 0x0439
    46aa:	88 23       	and	r24, r24
    46ac:	11 f4       	brne	.+4      	; 0x46b2 <__SPKR_init+0x16>
    46ae:	57 9a       	sbi	0x0a, 7	; 10
    46b0:	5f 98       	cbi	0x0b, 7	; 11
    46b2:	80 91 38 04 	lds	r24, 0x0438
    46b6:	88 23       	and	r24, r24
    46b8:	d1 f4       	brne	.+52     	; 0x46ee <__SPKR_init+0x52>
    46ba:	92 30       	cpi	r25, 0x02	; 2
    46bc:	c1 f4       	brne	.+48     	; 0x46ee <__SPKR_init+0x52>
    46be:	10 92 80 00 	sts	0x0080, r1
    46c2:	10 92 81 00 	sts	0x0081, r1
    46c6:	80 91 81 00 	lds	r24, 0x0081
    46ca:	88 60       	ori	r24, 0x08	; 8
    46cc:	80 93 81 00 	sts	0x0081, r24
    46d0:	80 91 81 00 	lds	r24, 0x0081
    46d4:	81 60       	ori	r24, 0x01	; 1
    46d6:	80 93 81 00 	sts	0x0081, r24
    46da:	10 92 85 00 	sts	0x0085, r1
    46de:	10 92 84 00 	sts	0x0084, r1
    46e2:	81 e0       	ldi	r24, 0x01	; 1
    46e4:	80 93 89 00 	sts	0x0089, r24
    46e8:	80 e9       	ldi	r24, 0x90	; 144
    46ea:	80 93 88 00 	sts	0x0088, r24
    46ee:	08 95       	ret

000046f0 <SPKR_play_beep>:
    46f0:	8f 92       	push	r8
    46f2:	9f 92       	push	r9
    46f4:	af 92       	push	r10
    46f6:	bf 92       	push	r11
    46f8:	cf 92       	push	r12
    46fa:	df 92       	push	r13
    46fc:	ef 92       	push	r14
    46fe:	ff 92       	push	r15
    4700:	0f 93       	push	r16
    4702:	1f 93       	push	r17
    4704:	cf 93       	push	r28
    4706:	df 93       	push	r29
    4708:	4b 01       	movw	r8, r22
    470a:	5c 01       	movw	r10, r24
    470c:	ea 01       	movw	r28, r20
    470e:	b9 01       	movw	r22, r18
    4710:	21 15       	cp	r18, r1
    4712:	31 05       	cpc	r19, r1
    4714:	39 f1       	breq	.+78     	; 0x4764 <SPKR_play_beep+0x74>
    4716:	9e 01       	movw	r18, r28
    4718:	44 27       	eor	r20, r20
    471a:	37 fd       	sbrc	r19, 7
    471c:	40 95       	com	r20
    471e:	54 2f       	mov	r21, r20
    4720:	65 36       	cpi	r22, 0x65	; 101
    4722:	71 05       	cpc	r23, r1
    4724:	10 f0       	brcs	.+4      	; 0x472a <SPKR_play_beep+0x3a>
    4726:	64 e6       	ldi	r22, 0x64	; 100
    4728:	70 e0       	ldi	r23, 0x00	; 0
    472a:	80 e0       	ldi	r24, 0x00	; 0
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	0e 94 c2 30 	call	0x6184	; 0x6184 <__mulsi3>
    4732:	24 e6       	ldi	r18, 0x64	; 100
    4734:	30 e0       	ldi	r19, 0x00	; 0
    4736:	40 e0       	ldi	r20, 0x00	; 0
    4738:	50 e0       	ldi	r21, 0x00	; 0
    473a:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__udivmodsi4>
    473e:	79 01       	movw	r14, r18
    4740:	8a 01       	movw	r16, r20
    4742:	c5 01       	movw	r24, r10
    4744:	b4 01       	movw	r22, r8
    4746:	0e 94 5d 25 	call	0x4aba	; 0x4aba <SPKR_beep>
    474a:	c7 01       	movw	r24, r14
    474c:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
    4750:	60 e0       	ldi	r22, 0x00	; 0
    4752:	70 e0       	ldi	r23, 0x00	; 0
    4754:	80 e0       	ldi	r24, 0x00	; 0
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	0e 94 5d 25 	call	0x4aba	; 0x4aba <SPKR_beep>
    475c:	ce 01       	movw	r24, r28
    475e:	8e 19       	sub	r24, r14
    4760:	9f 09       	sbc	r25, r15
    4762:	04 c0       	rjmp	.+8      	; 0x476c <SPKR_play_beep+0x7c>
    4764:	41 15       	cp	r20, r1
    4766:	51 05       	cpc	r21, r1
    4768:	19 f0       	breq	.+6      	; 0x4770 <SPKR_play_beep+0x80>
    476a:	ca 01       	movw	r24, r20
    476c:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <TMRSRVC_delay>
    4770:	df 91       	pop	r29
    4772:	cf 91       	pop	r28
    4774:	1f 91       	pop	r17
    4776:	0f 91       	pop	r16
    4778:	ff 90       	pop	r15
    477a:	ef 90       	pop	r14
    477c:	df 90       	pop	r13
    477e:	cf 90       	pop	r12
    4780:	bf 90       	pop	r11
    4782:	af 90       	pop	r10
    4784:	9f 90       	pop	r9
    4786:	8f 90       	pop	r8
    4788:	08 95       	ret

0000478a <__SPKR_stop>:
    478a:	ef e6       	ldi	r30, 0x6F	; 111
    478c:	f0 e0       	ldi	r31, 0x00	; 0
    478e:	80 81       	ld	r24, Z
    4790:	8d 7f       	andi	r24, 0xFD	; 253
    4792:	80 83       	st	Z, r24
    4794:	08 95       	ret

00004796 <STEPPER_go>:
    4796:	98 2f       	mov	r25, r24
    4798:	81 e0       	ldi	r24, 0x01	; 1
    479a:	80 93 85 06 	sts	0x0685, r24
    479e:	91 30       	cpi	r25, 0x01	; 1
    47a0:	51 f0       	breq	.+20     	; 0x47b6 <STEPPER_go+0x20>
    47a2:	91 30       	cpi	r25, 0x01	; 1
    47a4:	18 f0       	brcs	.+6      	; 0x47ac <STEPPER_go+0x16>
    47a6:	92 30       	cpi	r25, 0x02	; 2
    47a8:	41 f4       	brne	.+16     	; 0x47ba <STEPPER_go+0x24>
    47aa:	03 c0       	rjmp	.+6      	; 0x47b2 <STEPPER_go+0x1c>
    47ac:	10 92 6d 06 	sts	0x066D, r1
    47b0:	04 c0       	rjmp	.+8      	; 0x47ba <STEPPER_go+0x24>
    47b2:	10 92 6d 06 	sts	0x066D, r1
    47b6:	10 92 6e 06 	sts	0x066E, r1
    47ba:	10 92 85 06 	sts	0x0685, r1
    47be:	08 95       	ret

000047c0 <__STEPPER_init>:
    47c0:	3a 9a       	sbi	0x07, 2	; 7
    47c2:	3b 9a       	sbi	0x07, 3	; 7
    47c4:	3c 9a       	sbi	0x07, 4	; 7
    47c6:	3d 9a       	sbi	0x07, 5	; 7
    47c8:	3e 9a       	sbi	0x07, 6	; 7
    47ca:	3f 9a       	sbi	0x07, 7	; 7
    47cc:	88 b1       	in	r24, 0x08	; 8
    47ce:	83 70       	andi	r24, 0x03	; 3
    47d0:	88 b9       	out	0x08, r24	; 8
    47d2:	08 95       	ret

000047d4 <STEPPER_set_steps>:
    47d4:	98 2f       	mov	r25, r24
    47d6:	81 e0       	ldi	r24, 0x01	; 1
    47d8:	80 93 85 06 	sts	0x0685, r24
    47dc:	91 30       	cpi	r25, 0x01	; 1
    47de:	71 f0       	breq	.+28     	; 0x47fc <STEPPER_set_steps+0x28>
    47e0:	91 30       	cpi	r25, 0x01	; 1
    47e2:	18 f0       	brcs	.+6      	; 0x47ea <STEPPER_set_steps+0x16>
    47e4:	92 30       	cpi	r25, 0x02	; 2
    47e6:	71 f4       	brne	.+28     	; 0x4804 <STEPPER_set_steps+0x30>
    47e8:	05 c0       	rjmp	.+10     	; 0x47f4 <STEPPER_set_steps+0x20>
    47ea:	70 93 62 06 	sts	0x0662, r23
    47ee:	60 93 61 06 	sts	0x0661, r22
    47f2:	08 c0       	rjmp	.+16     	; 0x4804 <STEPPER_set_steps+0x30>
    47f4:	70 93 62 06 	sts	0x0662, r23
    47f8:	60 93 61 06 	sts	0x0661, r22
    47fc:	70 93 64 06 	sts	0x0664, r23
    4800:	60 93 63 06 	sts	0x0663, r22
    4804:	10 92 85 06 	sts	0x0685, r1
    4808:	08 95       	ret

0000480a <STEPPER_set_stop_mode>:
    480a:	98 2f       	mov	r25, r24
    480c:	81 e0       	ldi	r24, 0x01	; 1
    480e:	80 93 85 06 	sts	0x0685, r24
    4812:	91 30       	cpi	r25, 0x01	; 1
    4814:	51 f0       	breq	.+20     	; 0x482a <STEPPER_set_stop_mode+0x20>
    4816:	91 30       	cpi	r25, 0x01	; 1
    4818:	18 f0       	brcs	.+6      	; 0x4820 <STEPPER_set_stop_mode+0x16>
    481a:	92 30       	cpi	r25, 0x02	; 2
    481c:	41 f4       	brne	.+16     	; 0x482e <STEPPER_set_stop_mode+0x24>
    481e:	03 c0       	rjmp	.+6      	; 0x4826 <STEPPER_set_stop_mode+0x1c>
    4820:	60 93 6f 06 	sts	0x066F, r22
    4824:	04 c0       	rjmp	.+8      	; 0x482e <STEPPER_set_stop_mode+0x24>
    4826:	60 93 6f 06 	sts	0x066F, r22
    482a:	60 93 70 06 	sts	0x0670, r22
    482e:	10 92 85 06 	sts	0x0685, r1
    4832:	08 95       	ret

00004834 <STEPPER_setup_decels>:
    4834:	0f 93       	push	r16
    4836:	1f 93       	push	r17
    4838:	cf 93       	push	r28
    483a:	df 93       	push	r29
    483c:	eb 01       	movw	r28, r22
    483e:	8a 01       	movw	r16, r20
    4840:	81 30       	cpi	r24, 0x01	; 1
    4842:	01 f1       	breq	.+64     	; 0x4884 <STEPPER_setup_decels+0x50>
    4844:	81 30       	cpi	r24, 0x01	; 1
    4846:	18 f0       	brcs	.+6      	; 0x484e <STEPPER_setup_decels+0x1a>
    4848:	82 30       	cpi	r24, 0x02	; 2
    484a:	61 f5       	brne	.+88     	; 0x48a4 <STEPPER_setup_decels+0x70>
    484c:	0d c0       	rjmp	.+26     	; 0x4868 <STEPPER_setup_decels+0x34>
    484e:	80 91 59 06 	lds	r24, 0x0659
    4852:	90 91 5a 06 	lds	r25, 0x065A
    4856:	89 2b       	or	r24, r25
    4858:	11 f0       	breq	.+4      	; 0x485e <STEPPER_setup_decels+0x2a>
    485a:	80 e0       	ldi	r24, 0x00	; 0
    485c:	1a c0       	rjmp	.+52     	; 0x4892 <STEPPER_setup_decels+0x5e>
    485e:	10 92 66 06 	sts	0x0666, r1
    4862:	10 92 65 06 	sts	0x0665, r1
    4866:	1e c0       	rjmp	.+60     	; 0x48a4 <STEPPER_setup_decels+0x70>
    4868:	80 91 59 06 	lds	r24, 0x0659
    486c:	90 91 5a 06 	lds	r25, 0x065A
    4870:	89 2b       	or	r24, r25
    4872:	21 f0       	breq	.+8      	; 0x487c <STEPPER_setup_decels+0x48>
    4874:	80 e0       	ldi	r24, 0x00	; 0
    4876:	0e 94 90 25 	call	0x4b20	; 0x4b20 <STEPPER_set_decel_step_values>
    487a:	04 c0       	rjmp	.+8      	; 0x4884 <STEPPER_setup_decels+0x50>
    487c:	10 92 66 06 	sts	0x0666, r1
    4880:	10 92 65 06 	sts	0x0665, r1
    4884:	80 91 5b 06 	lds	r24, 0x065B
    4888:	90 91 5c 06 	lds	r25, 0x065C
    488c:	89 2b       	or	r24, r25
    488e:	31 f0       	breq	.+12     	; 0x489c <STEPPER_setup_decels+0x68>
    4890:	81 e0       	ldi	r24, 0x01	; 1
    4892:	be 01       	movw	r22, r28
    4894:	a8 01       	movw	r20, r16
    4896:	0e 94 90 25 	call	0x4b20	; 0x4b20 <STEPPER_set_decel_step_values>
    489a:	04 c0       	rjmp	.+8      	; 0x48a4 <STEPPER_setup_decels+0x70>
    489c:	10 92 68 06 	sts	0x0668, r1
    48a0:	10 92 67 06 	sts	0x0667, r1
    48a4:	df 91       	pop	r29
    48a6:	cf 91       	pop	r28
    48a8:	1f 91       	pop	r17
    48aa:	0f 91       	pop	r16
    48ac:	08 95       	ret

000048ae <SYS_init>:
    48ae:	10 92 88 06 	sts	0x0688, r1
    48b2:	10 92 89 06 	sts	0x0689, r1
    48b6:	10 92 8d 06 	sts	0x068D, r1
    48ba:	10 92 8a 06 	sts	0x068A, r1
    48be:	10 92 8c 06 	sts	0x068C, r1
    48c2:	10 92 8e 06 	sts	0x068E, r1
    48c6:	10 92 8f 06 	sts	0x068F, r1
    48ca:	10 92 90 06 	sts	0x0690, r1
    48ce:	10 92 91 06 	sts	0x0691, r1
    48d2:	10 92 92 06 	sts	0x0692, r1
    48d6:	10 92 93 06 	sts	0x0693, r1
    48da:	10 92 94 06 	sts	0x0694, r1
    48de:	10 92 95 06 	sts	0x0695, r1
    48e2:	10 92 96 06 	sts	0x0696, r1
    48e6:	10 92 97 06 	sts	0x0697, r1
    48ea:	10 92 98 06 	sts	0x0698, r1
    48ee:	10 92 99 06 	sts	0x0699, r1
    48f2:	08 95       	ret

000048f4 <TMRSRVC_insert>:
    48f4:	cf 92       	push	r12
    48f6:	df 92       	push	r13
    48f8:	ef 92       	push	r14
    48fa:	ff 92       	push	r15
    48fc:	0f 93       	push	r16
    48fe:	1f 93       	push	r17
    4900:	cf 93       	push	r28
    4902:	df 93       	push	r29
    4904:	ec 01       	movw	r28, r24
    4906:	80 91 bf 06 	lds	r24, 0x06BF
    490a:	88 23       	and	r24, r24
    490c:	39 f4       	brne	.+14     	; 0x491c <TMRSRVC_insert+0x28>
    490e:	d0 93 c1 06 	sts	0x06C1, r29
    4912:	c0 93 c0 06 	sts	0x06C0, r28
    4916:	0e 94 08 25 	call	0x4a10	; 0x4a10 <TMRSRVC_start>
    491a:	47 c0       	rjmp	.+142    	; 0x49aa <TMRSRVC_insert+0xb6>
    491c:	c0 90 c0 06 	lds	r12, 0x06C0
    4920:	d0 90 c1 06 	lds	r13, 0x06C1
    4924:	00 e0       	ldi	r16, 0x00	; 0
    4926:	10 e0       	ldi	r17, 0x00	; 0
    4928:	ee 24       	eor	r14, r14
    492a:	ff 24       	eor	r15, r15
    492c:	37 c0       	rjmp	.+110    	; 0x499c <TMRSRVC_insert+0xa8>
    492e:	a8 81       	ld	r26, Y
    4930:	b9 81       	ldd	r27, Y+1	; 0x01
    4932:	fd 01       	movw	r30, r26
    4934:	64 81       	ldd	r22, Z+4	; 0x04
    4936:	75 81       	ldd	r23, Z+5	; 0x05
    4938:	f6 01       	movw	r30, r12
    493a:	40 81       	ld	r20, Z
    493c:	51 81       	ldd	r21, Z+1	; 0x01
    493e:	fa 01       	movw	r30, r20
    4940:	84 81       	ldd	r24, Z+4	; 0x04
    4942:	95 81       	ldd	r25, Z+5	; 0x05
    4944:	9b 01       	movw	r18, r22
    4946:	28 1b       	sub	r18, r24
    4948:	39 0b       	sbc	r19, r25
    494a:	37 ff       	sbrs	r19, 7
    494c:	0f c0       	rjmp	.+30     	; 0x496c <TMRSRVC_insert+0x78>
    494e:	86 1b       	sub	r24, r22
    4950:	97 0b       	sbc	r25, r23
    4952:	95 83       	std	Z+5, r25	; 0x05
    4954:	84 83       	std	Z+4, r24	; 0x04
    4956:	db 82       	std	Y+3, r13	; 0x03
    4958:	ca 82       	std	Y+2, r12	; 0x02
    495a:	01 2b       	or	r16, r17
    495c:	29 f4       	brne	.+10     	; 0x4968 <TMRSRVC_insert+0x74>
    495e:	d0 93 c1 06 	sts	0x06C1, r29
    4962:	c0 93 c0 06 	sts	0x06C0, r28
    4966:	21 c0       	rjmp	.+66     	; 0x49aa <TMRSRVC_insert+0xb6>
    4968:	f7 01       	movw	r30, r14
    496a:	0c c0       	rjmp	.+24     	; 0x4984 <TMRSRVC_insert+0x90>
    496c:	f6 01       	movw	r30, r12
    496e:	82 81       	ldd	r24, Z+2	; 0x02
    4970:	93 81       	ldd	r25, Z+3	; 0x03
    4972:	21 15       	cp	r18, r1
    4974:	31 05       	cpc	r19, r1
    4976:	49 f4       	brne	.+18     	; 0x498a <TMRSRVC_insert+0x96>
    4978:	fd 01       	movw	r30, r26
    497a:	15 82       	std	Z+5, r1	; 0x05
    497c:	14 82       	std	Z+4, r1	; 0x04
    497e:	9b 83       	std	Y+3, r25	; 0x03
    4980:	8a 83       	std	Y+2, r24	; 0x02
    4982:	f6 01       	movw	r30, r12
    4984:	d3 83       	std	Z+3, r29	; 0x03
    4986:	c2 83       	std	Z+2, r28	; 0x02
    4988:	10 c0       	rjmp	.+32     	; 0x49aa <TMRSRVC_insert+0xb6>
    498a:	fd 01       	movw	r30, r26
    498c:	35 83       	std	Z+5, r19	; 0x05
    498e:	24 83       	std	Z+4, r18	; 0x04
    4990:	00 97       	sbiw	r24, 0x00	; 0
    4992:	b9 f3       	breq	.-18     	; 0x4982 <TMRSRVC_insert+0x8e>
    4994:	0f 5f       	subi	r16, 0xFF	; 255
    4996:	1f 4f       	sbci	r17, 0xFF	; 255
    4998:	76 01       	movw	r14, r12
    499a:	6c 01       	movw	r12, r24
    499c:	80 91 bf 06 	lds	r24, 0x06BF
    49a0:	90 e0       	ldi	r25, 0x00	; 0
    49a2:	08 17       	cp	r16, r24
    49a4:	19 07       	cpc	r17, r25
    49a6:	18 f2       	brcs	.-122    	; 0x492e <TMRSRVC_insert+0x3a>
    49a8:	ec cf       	rjmp	.-40     	; 0x4982 <TMRSRVC_insert+0x8e>
    49aa:	80 91 bf 06 	lds	r24, 0x06BF
    49ae:	8f 5f       	subi	r24, 0xFF	; 255
    49b0:	80 93 bf 06 	sts	0x06BF, r24
    49b4:	df 91       	pop	r29
    49b6:	cf 91       	pop	r28
    49b8:	1f 91       	pop	r17
    49ba:	0f 91       	pop	r16
    49bc:	ff 90       	pop	r15
    49be:	ef 90       	pop	r14
    49c0:	df 90       	pop	r13
    49c2:	cf 90       	pop	r12
    49c4:	08 95       	ret

000049c6 <TMRSRVC_open>:
    49c6:	88 e0       	ldi	r24, 0x08	; 8
    49c8:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    49cc:	88 23       	and	r24, r24
    49ce:	b9 f4       	brne	.+46     	; 0x49fe <TMRSRVC_open+0x38>
    49d0:	10 92 bf 06 	sts	0x06BF, r1
    49d4:	10 92 c1 06 	sts	0x06C1, r1
    49d8:	10 92 c0 06 	sts	0x06C0, r1
    49dc:	10 92 48 04 	sts	0x0448, r1
    49e0:	10 92 49 04 	sts	0x0449, r1
    49e4:	80 e1       	ldi	r24, 0x10	; 16
    49e6:	6d ef       	ldi	r22, 0xFD	; 253
    49e8:	75 e2       	ldi	r23, 0x25	; 37
    49ea:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__ISR_attach>
    49ee:	0e 94 04 26 	call	0x4c08	; 0x4c08 <__TMRSRVC_init>
    49f2:	0e 94 02 25 	call	0x4a04	; 0x4a04 <__TMRSRVC_start>
    49f6:	88 e0       	ldi	r24, 0x08	; 8
    49f8:	61 e0       	ldi	r22, 0x01	; 1
    49fa:	0e 94 94 1c 	call	0x3928	; 0x3928 <SYS_set_state>
    49fe:	88 e0       	ldi	r24, 0x08	; 8
    4a00:	91 e0       	ldi	r25, 0x01	; 1
    4a02:	08 95       	ret

00004a04 <__TMRSRVC_start>:
    4a04:	ee e6       	ldi	r30, 0x6E	; 110
    4a06:	f0 e0       	ldi	r31, 0x00	; 0
    4a08:	80 81       	ld	r24, Z
    4a0a:	82 60       	ori	r24, 0x02	; 2
    4a0c:	80 83       	st	Z, r24
    4a0e:	08 95       	ret

00004a10 <TMRSRVC_start>:
    4a10:	81 e0       	ldi	r24, 0x01	; 1
    4a12:	80 93 49 04 	sts	0x0449, r24
    4a16:	08 95       	ret

00004a18 <I2C_enable>:
    4a18:	80 91 c2 06 	lds	r24, 0x06C2
    4a1c:	81 30       	cpi	r24, 0x01	; 1
    4a1e:	29 f4       	brne	.+10     	; 0x4a2a <I2C_enable+0x12>
    4a20:	80 91 bc 00 	lds	r24, 0x00BC
    4a24:	84 60       	ori	r24, 0x04	; 4
    4a26:	80 93 bc 00 	sts	0x00BC, r24
    4a2a:	08 95       	ret

00004a2c <__I2C_init>:
    4a2c:	38 98       	cbi	0x07, 0	; 7
    4a2e:	39 98       	cbi	0x07, 1	; 7
    4a30:	08 95       	ret

00004a32 <__ISR_attach>:
    4a32:	80 32       	cpi	r24, 0x20	; 32
    4a34:	18 f0       	brcs	.+6      	; 0x4a3c <__ISR_attach+0xa>
    4a36:	20 e0       	ldi	r18, 0x00	; 0
    4a38:	30 e0       	ldi	r19, 0x00	; 0
    4a3a:	0a c0       	rjmp	.+20     	; 0x4a50 <__ISR_attach+0x1e>
    4a3c:	e8 2f       	mov	r30, r24
    4a3e:	f0 e0       	ldi	r31, 0x00	; 0
    4a40:	ee 0f       	add	r30, r30
    4a42:	ff 1f       	adc	r31, r31
    4a44:	e8 51       	subi	r30, 0x18	; 24
    4a46:	fc 4f       	sbci	r31, 0xFC	; 252
    4a48:	20 81       	ld	r18, Z
    4a4a:	31 81       	ldd	r19, Z+1	; 0x01
    4a4c:	71 83       	std	Z+1, r23	; 0x01
    4a4e:	60 83       	st	Z, r22
    4a50:	c9 01       	movw	r24, r18
    4a52:	08 95       	ret

00004a54 <__ATMEGA_init>:
    4a54:	24 9a       	sbi	0x04, 4	; 4
    4a56:	2c 9a       	sbi	0x05, 4	; 5
    4a58:	08 95       	ret

00004a5a <SPI_default_config>:
    4a5a:	83 e5       	ldi	r24, 0x53	; 83
    4a5c:	8c bd       	out	0x2c, r24	; 44
    4a5e:	81 e0       	ldi	r24, 0x01	; 1
    4a60:	8d bd       	out	0x2d, r24	; 45
    4a62:	8d e0       	ldi	r24, 0x0D	; 13
    4a64:	8a 95       	dec	r24
    4a66:	f1 f7       	brne	.-4      	; 0x4a64 <SPI_default_config+0xa>
    4a68:	08 95       	ret

00004a6a <SPI_ATtiny0_config>:
    4a6a:	83 e5       	ldi	r24, 0x53	; 83
    4a6c:	8c bd       	out	0x2c, r24	; 44
    4a6e:	1d bc       	out	0x2d, r1	; 45
    4a70:	84 ef       	ldi	r24, 0xF4	; 244
    4a72:	91 e0       	ldi	r25, 0x01	; 1
    4a74:	01 97       	sbiw	r24, 0x01	; 1
    4a76:	f1 f7       	brne	.-4      	; 0x4a74 <SPI_ATtiny0_config+0xa>
    4a78:	08 95       	ret

00004a7a <SPI_PSXC_config>:
    4a7a:	8f e7       	ldi	r24, 0x7F	; 127
    4a7c:	8c bd       	out	0x2c, r24	; 44
    4a7e:	1d bc       	out	0x2d, r1	; 45
    4a80:	84 ef       	ldi	r24, 0xF4	; 244
    4a82:	91 e0       	ldi	r25, 0x01	; 1
    4a84:	01 97       	sbiw	r24, 0x01	; 1
    4a86:	f1 f7       	brne	.-4      	; 0x4a84 <SPI_PSXC_config+0xa>
    4a88:	08 95       	ret

00004a8a <SPI_LCD_config>:
    4a8a:	83 e5       	ldi	r24, 0x53	; 83
    4a8c:	8c bd       	out	0x2c, r24	; 44
    4a8e:	81 e0       	ldi	r24, 0x01	; 1
    4a90:	8d bd       	out	0x2d, r24	; 45
    4a92:	8d e0       	ldi	r24, 0x0D	; 13
    4a94:	8a 95       	dec	r24
    4a96:	f1 f7       	brne	.-4      	; 0x4a94 <SPI_LCD_config+0xa>
    4a98:	08 95       	ret

00004a9a <SPI_FLASH_config>:
    4a9a:	83 e5       	ldi	r24, 0x53	; 83
    4a9c:	8c bd       	out	0x2c, r24	; 44
    4a9e:	81 e0       	ldi	r24, 0x01	; 1
    4aa0:	8d bd       	out	0x2d, r24	; 45
    4aa2:	84 ef       	ldi	r24, 0xF4	; 244
    4aa4:	91 e0       	ldi	r25, 0x01	; 1
    4aa6:	01 97       	sbiw	r24, 0x01	; 1
    4aa8:	f1 f7       	brne	.-4      	; 0x4aa6 <SPI_FLASH_config+0xc>
    4aaa:	08 95       	ret

00004aac <__SPI_init>:
    4aac:	25 9a       	sbi	0x04, 5	; 4
    4aae:	26 98       	cbi	0x04, 6	; 4
    4ab0:	27 9a       	sbi	0x04, 7	; 4
    4ab2:	20 9a       	sbi	0x04, 0	; 4
    4ab4:	21 9a       	sbi	0x04, 1	; 4
    4ab6:	22 9a       	sbi	0x04, 2	; 4
    4ab8:	08 95       	ret

00004aba <SPKR_beep>:
    4aba:	9b 01       	movw	r18, r22
    4abc:	ac 01       	movw	r20, r24
    4abe:	80 91 39 04 	lds	r24, 0x0439
    4ac2:	88 23       	and	r24, r24
    4ac4:	81 f0       	breq	.+32     	; 0x4ae6 <SPKR_beep+0x2c>
    4ac6:	da 01       	movw	r26, r20
    4ac8:	c9 01       	movw	r24, r18
    4aca:	88 0f       	add	r24, r24
    4acc:	99 1f       	adc	r25, r25
    4ace:	aa 1f       	adc	r26, r26
    4ad0:	bb 1f       	adc	r27, r27
    4ad2:	90 93 45 04 	sts	0x0445, r25
    4ad6:	80 93 44 04 	sts	0x0444, r24
    4ada:	21 15       	cp	r18, r1
    4adc:	31 05       	cpc	r19, r1
    4ade:	41 05       	cpc	r20, r1
    4ae0:	51 05       	cpc	r21, r1
    4ae2:	09 f4       	brne	.+2      	; 0x4ae6 <SPKR_beep+0x2c>
    4ae4:	5f 98       	cbi	0x0b, 7	; 11
    4ae6:	08 95       	ret

00004ae8 <__SPKR_close>:
    4ae8:	82 30       	cpi	r24, 0x02	; 2
    4aea:	29 f4       	brne	.+10     	; 0x4af6 <__SPKR_close+0xe>
    4aec:	80 91 81 00 	lds	r24, 0x0081
    4af0:	8e 7f       	andi	r24, 0xFE	; 254
    4af2:	80 93 81 00 	sts	0x0081, r24
    4af6:	80 91 38 04 	lds	r24, 0x0438
    4afa:	81 30       	cpi	r24, 0x01	; 1
    4afc:	31 f4       	brne	.+12     	; 0x4b0a <__SPKR_close+0x22>
    4afe:	80 91 39 04 	lds	r24, 0x0439
    4b02:	81 30       	cpi	r24, 0x01	; 1
    4b04:	11 f4       	brne	.+4      	; 0x4b0a <__SPKR_close+0x22>
    4b06:	00 00       	nop
    4b08:	08 95       	ret
    4b0a:	80 91 38 04 	lds	r24, 0x0438
    4b0e:	81 30       	cpi	r24, 0x01	; 1
    4b10:	21 f0       	breq	.+8      	; 0x4b1a <__SPKR_close+0x32>
    4b12:	80 91 39 04 	lds	r24, 0x0439
    4b16:	81 30       	cpi	r24, 0x01	; 1
    4b18:	11 f4       	brne	.+4      	; 0x4b1e <__SPKR_close+0x36>
    4b1a:	5f 98       	cbi	0x0b, 7	; 11
    4b1c:	57 98       	cbi	0x0a, 7	; 10
    4b1e:	08 95       	ret

00004b20 <STEPPER_set_decel_step_values>:
    4b20:	ef 92       	push	r14
    4b22:	ff 92       	push	r15
    4b24:	0f 93       	push	r16
    4b26:	1f 93       	push	r17
    4b28:	cf 93       	push	r28
    4b2a:	df 93       	push	r29
    4b2c:	eb 01       	movw	r28, r22
    4b2e:	88 23       	and	r24, r24
    4b30:	21 f0       	breq	.+8      	; 0x4b3a <STEPPER_set_decel_step_values+0x1a>
    4b32:	81 30       	cpi	r24, 0x01	; 1
    4b34:	09 f0       	breq	.+2      	; 0x4b38 <STEPPER_set_decel_step_values+0x18>
    4b36:	5a c0       	rjmp	.+180    	; 0x4bec <STEPPER_set_decel_step_values+0xcc>
    4b38:	2d c0       	rjmp	.+90     	; 0x4b94 <STEPPER_set_decel_step_values+0x74>
    4b3a:	9a 01       	movw	r18, r20
    4b3c:	40 e0       	ldi	r20, 0x00	; 0
    4b3e:	50 e0       	ldi	r21, 0x00	; 0
    4b40:	ca 01       	movw	r24, r20
    4b42:	b9 01       	movw	r22, r18
    4b44:	0e 94 c2 30 	call	0x6184	; 0x6184 <__mulsi3>
    4b48:	20 91 59 06 	lds	r18, 0x0659
    4b4c:	30 91 5a 06 	lds	r19, 0x065A
    4b50:	22 0f       	add	r18, r18
    4b52:	33 1f       	adc	r19, r19
    4b54:	40 e0       	ldi	r20, 0x00	; 0
    4b56:	50 e0       	ldi	r21, 0x00	; 0
    4b58:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__udivmodsi4>
    4b5c:	79 01       	movw	r14, r18
    4b5e:	8a 01       	movw	r16, r20
    4b60:	a8 01       	movw	r20, r16
    4b62:	97 01       	movw	r18, r14
    4b64:	22 0f       	add	r18, r18
    4b66:	33 1f       	adc	r19, r19
    4b68:	44 1f       	adc	r20, r20
    4b6a:	55 1f       	adc	r21, r21
    4b6c:	ce 01       	movw	r24, r28
    4b6e:	a0 e0       	ldi	r26, 0x00	; 0
    4b70:	b0 e0       	ldi	r27, 0x00	; 0
    4b72:	82 17       	cp	r24, r18
    4b74:	93 07       	cpc	r25, r19
    4b76:	a4 07       	cpc	r26, r20
    4b78:	b5 07       	cpc	r27, r21
    4b7a:	28 f0       	brcs	.+10     	; 0x4b86 <STEPPER_set_decel_step_values+0x66>
    4b7c:	f0 92 66 06 	sts	0x0666, r15
    4b80:	e0 92 65 06 	sts	0x0665, r14
    4b84:	33 c0       	rjmp	.+102    	; 0x4bec <STEPPER_set_decel_step_values+0xcc>
    4b86:	d6 95       	lsr	r29
    4b88:	c7 95       	ror	r28
    4b8a:	d0 93 66 06 	sts	0x0666, r29
    4b8e:	c0 93 65 06 	sts	0x0665, r28
    4b92:	2c c0       	rjmp	.+88     	; 0x4bec <STEPPER_set_decel_step_values+0xcc>
    4b94:	9a 01       	movw	r18, r20
    4b96:	40 e0       	ldi	r20, 0x00	; 0
    4b98:	50 e0       	ldi	r21, 0x00	; 0
    4b9a:	ca 01       	movw	r24, r20
    4b9c:	b9 01       	movw	r22, r18
    4b9e:	0e 94 c2 30 	call	0x6184	; 0x6184 <__mulsi3>
    4ba2:	20 91 5b 06 	lds	r18, 0x065B
    4ba6:	30 91 5c 06 	lds	r19, 0x065C
    4baa:	22 0f       	add	r18, r18
    4bac:	33 1f       	adc	r19, r19
    4bae:	40 e0       	ldi	r20, 0x00	; 0
    4bb0:	50 e0       	ldi	r21, 0x00	; 0
    4bb2:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__udivmodsi4>
    4bb6:	79 01       	movw	r14, r18
    4bb8:	8a 01       	movw	r16, r20
    4bba:	a8 01       	movw	r20, r16
    4bbc:	97 01       	movw	r18, r14
    4bbe:	22 0f       	add	r18, r18
    4bc0:	33 1f       	adc	r19, r19
    4bc2:	44 1f       	adc	r20, r20
    4bc4:	55 1f       	adc	r21, r21
    4bc6:	ce 01       	movw	r24, r28
    4bc8:	a0 e0       	ldi	r26, 0x00	; 0
    4bca:	b0 e0       	ldi	r27, 0x00	; 0
    4bcc:	82 17       	cp	r24, r18
    4bce:	93 07       	cpc	r25, r19
    4bd0:	a4 07       	cpc	r26, r20
    4bd2:	b5 07       	cpc	r27, r21
    4bd4:	28 f0       	brcs	.+10     	; 0x4be0 <STEPPER_set_decel_step_values+0xc0>
    4bd6:	f0 92 68 06 	sts	0x0668, r15
    4bda:	e0 92 67 06 	sts	0x0667, r14
    4bde:	06 c0       	rjmp	.+12     	; 0x4bec <STEPPER_set_decel_step_values+0xcc>
    4be0:	d6 95       	lsr	r29
    4be2:	c7 95       	ror	r28
    4be4:	d0 93 68 06 	sts	0x0668, r29
    4be8:	c0 93 67 06 	sts	0x0667, r28
    4bec:	df 91       	pop	r29
    4bee:	cf 91       	pop	r28
    4bf0:	1f 91       	pop	r17
    4bf2:	0f 91       	pop	r16
    4bf4:	ff 90       	pop	r15
    4bf6:	ef 90       	pop	r14
    4bf8:	08 95       	ret

00004bfa <__TIMER0_COMPA_vect>:
    4bfa:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <TMRSRVC_tick>
    4bfe:	0e 94 4d 26 	call	0x4c9a	; 0x4c9a <STEPPER_clk>
    4c02:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <SPKR_beep_clk>
    4c06:	08 95       	ret

00004c08 <__TMRSRVC_init>:
    4c08:	84 b5       	in	r24, 0x24	; 36
    4c0a:	82 60       	ori	r24, 0x02	; 2
    4c0c:	84 bd       	out	0x24, r24	; 36
    4c0e:	85 b5       	in	r24, 0x25	; 37
    4c10:	84 60       	ori	r24, 0x04	; 4
    4c12:	85 bd       	out	0x25, r24	; 37
    4c14:	8e e4       	ldi	r24, 0x4E	; 78
    4c16:	87 bd       	out	0x27, r24	; 39
    4c18:	08 95       	ret

00004c1a <TMRSRVC_tick>:
    4c1a:	88 e0       	ldi	r24, 0x08	; 8
    4c1c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    4c20:	88 23       	and	r24, r24
    4c22:	11 f4       	brne	.+4      	; 0x4c28 <TMRSRVC_tick+0xe>
    4c24:	84 e0       	ldi	r24, 0x04	; 4
    4c26:	08 95       	ret
    4c28:	80 91 49 04 	lds	r24, 0x0449
    4c2c:	88 23       	and	r24, r24
    4c2e:	11 f4       	brne	.+4      	; 0x4c34 <TMRSRVC_tick+0x1a>
    4c30:	83 e0       	ldi	r24, 0x03	; 3
    4c32:	08 95       	ret
    4c34:	80 91 48 04 	lds	r24, 0x0448
    4c38:	88 23       	and	r24, r24
    4c3a:	11 f0       	breq	.+4      	; 0x4c40 <TMRSRVC_tick+0x26>
    4c3c:	82 e0       	ldi	r24, 0x02	; 2
    4c3e:	08 95       	ret
    4c40:	0e 94 9a 28 	call	0x5134	; 0x5134 <TMRSRVC_process>
    4c44:	81 30       	cpi	r24, 0x01	; 1
    4c46:	e1 f3       	breq	.-8      	; 0x4c40 <TMRSRVC_tick+0x26>
    4c48:	80 e0       	ldi	r24, 0x00	; 0
    4c4a:	08 95       	ret

00004c4c <SPKR_beep_clk>:
    4c4c:	80 91 39 04 	lds	r24, 0x0439
    4c50:	81 30       	cpi	r24, 0x01	; 1
    4c52:	11 f5       	brne	.+68     	; 0x4c98 <SPKR_beep_clk+0x4c>
    4c54:	80 91 42 04 	lds	r24, 0x0442
    4c58:	90 91 43 04 	lds	r25, 0x0443
    4c5c:	20 91 44 04 	lds	r18, 0x0444
    4c60:	30 91 45 04 	lds	r19, 0x0445
    4c64:	28 0f       	add	r18, r24
    4c66:	39 1f       	adc	r19, r25
    4c68:	30 93 43 04 	sts	0x0443, r19
    4c6c:	20 93 42 04 	sts	0x0442, r18
    4c70:	80 91 42 04 	lds	r24, 0x0442
    4c74:	90 91 43 04 	lds	r25, 0x0443
    4c78:	88 5e       	subi	r24, 0xE8	; 232
    4c7a:	93 40       	sbci	r25, 0x03	; 3
    4c7c:	6c f0       	brlt	.+26     	; 0x4c98 <SPKR_beep_clk+0x4c>
    4c7e:	8b b1       	in	r24, 0x0b	; 11
    4c80:	80 58       	subi	r24, 0x80	; 128
    4c82:	8b b9       	out	0x0b, r24	; 11
    4c84:	80 91 42 04 	lds	r24, 0x0442
    4c88:	90 91 43 04 	lds	r25, 0x0443
    4c8c:	88 5e       	subi	r24, 0xE8	; 232
    4c8e:	93 40       	sbci	r25, 0x03	; 3
    4c90:	90 93 43 04 	sts	0x0443, r25
    4c94:	80 93 42 04 	sts	0x0442, r24
    4c98:	08 95       	ret

00004c9a <STEPPER_clk>:
    4c9a:	87 e0       	ldi	r24, 0x07	; 7
    4c9c:	0e 94 4c 1c 	call	0x3898	; 0x3898 <SYS_get_state>
    4ca0:	81 30       	cpi	r24, 0x01	; 1
    4ca2:	09 f0       	breq	.+2      	; 0x4ca6 <STEPPER_clk+0xc>
    4ca4:	aa c0       	rjmp	.+340    	; 0x4dfa <STEPPER_clk+0x160>
    4ca6:	80 91 59 06 	lds	r24, 0x0659
    4caa:	90 91 5a 06 	lds	r25, 0x065A
    4cae:	89 2b       	or	r24, r25
    4cb0:	09 f1       	breq	.+66     	; 0x4cf4 <STEPPER_clk+0x5a>
    4cb2:	80 91 7d 06 	lds	r24, 0x067D
    4cb6:	90 91 7e 06 	lds	r25, 0x067E
    4cba:	20 91 59 06 	lds	r18, 0x0659
    4cbe:	30 91 5a 06 	lds	r19, 0x065A
    4cc2:	82 0f       	add	r24, r18
    4cc4:	93 1f       	adc	r25, r19
    4cc6:	90 93 7e 06 	sts	0x067E, r25
    4cca:	80 93 7d 06 	sts	0x067D, r24
    4cce:	80 91 7d 06 	lds	r24, 0x067D
    4cd2:	90 91 7e 06 	lds	r25, 0x067E
    4cd6:	88 5e       	subi	r24, 0xE8	; 232
    4cd8:	93 40       	sbci	r25, 0x03	; 3
    4cda:	a4 f0       	brlt	.+40     	; 0x4d04 <STEPPER_clk+0x6a>
    4cdc:	80 91 7d 06 	lds	r24, 0x067D
    4ce0:	90 91 7e 06 	lds	r25, 0x067E
    4ce4:	88 5e       	subi	r24, 0xE8	; 232
    4ce6:	93 40       	sbci	r25, 0x03	; 3
    4ce8:	90 93 7e 06 	sts	0x067E, r25
    4cec:	80 93 7d 06 	sts	0x067D, r24
    4cf0:	41 e0       	ldi	r20, 0x01	; 1
    4cf2:	09 c0       	rjmp	.+18     	; 0x4d06 <STEPPER_clk+0x6c>
    4cf4:	80 91 51 06 	lds	r24, 0x0651
    4cf8:	90 91 52 06 	lds	r25, 0x0652
    4cfc:	90 93 56 06 	sts	0x0656, r25
    4d00:	80 93 55 06 	sts	0x0655, r24
    4d04:	40 e0       	ldi	r20, 0x00	; 0
    4d06:	80 91 5b 06 	lds	r24, 0x065B
    4d0a:	90 91 5c 06 	lds	r25, 0x065C
    4d0e:	89 2b       	or	r24, r25
    4d10:	09 f1       	breq	.+66     	; 0x4d54 <STEPPER_clk+0xba>
    4d12:	80 91 7f 06 	lds	r24, 0x067F
    4d16:	90 91 80 06 	lds	r25, 0x0680
    4d1a:	20 91 5b 06 	lds	r18, 0x065B
    4d1e:	30 91 5c 06 	lds	r19, 0x065C
    4d22:	82 0f       	add	r24, r18
    4d24:	93 1f       	adc	r25, r19
    4d26:	90 93 80 06 	sts	0x0680, r25
    4d2a:	80 93 7f 06 	sts	0x067F, r24
    4d2e:	80 91 7f 06 	lds	r24, 0x067F
    4d32:	90 91 80 06 	lds	r25, 0x0680
    4d36:	88 5e       	subi	r24, 0xE8	; 232
    4d38:	93 40       	sbci	r25, 0x03	; 3
    4d3a:	a4 f0       	brlt	.+40     	; 0x4d64 <STEPPER_clk+0xca>
    4d3c:	80 91 7f 06 	lds	r24, 0x067F
    4d40:	90 91 80 06 	lds	r25, 0x0680
    4d44:	88 5e       	subi	r24, 0xE8	; 232
    4d46:	93 40       	sbci	r25, 0x03	; 3
    4d48:	90 93 80 06 	sts	0x0680, r25
    4d4c:	80 93 7f 06 	sts	0x067F, r24
    4d50:	61 e0       	ldi	r22, 0x01	; 1
    4d52:	09 c0       	rjmp	.+18     	; 0x4d66 <STEPPER_clk+0xcc>
    4d54:	80 91 53 06 	lds	r24, 0x0653
    4d58:	90 91 54 06 	lds	r25, 0x0654
    4d5c:	90 93 58 06 	sts	0x0658, r25
    4d60:	80 93 57 06 	sts	0x0657, r24
    4d64:	60 e0       	ldi	r22, 0x00	; 0
    4d66:	84 2f       	mov	r24, r20
    4d68:	0e 94 fe 26 	call	0x4dfc	; 0x4dfc <STEPPER_process_accel>
    4d6c:	80 91 79 06 	lds	r24, 0x0679
    4d70:	90 91 7a 06 	lds	r25, 0x067A
    4d74:	20 91 55 06 	lds	r18, 0x0655
    4d78:	30 91 56 06 	lds	r19, 0x0656
    4d7c:	28 0f       	add	r18, r24
    4d7e:	39 1f       	adc	r19, r25
    4d80:	30 93 7a 06 	sts	0x067A, r19
    4d84:	20 93 79 06 	sts	0x0679, r18
    4d88:	80 91 79 06 	lds	r24, 0x0679
    4d8c:	90 91 7a 06 	lds	r25, 0x067A
    4d90:	88 5e       	subi	r24, 0xE8	; 232
    4d92:	93 40       	sbci	r25, 0x03	; 3
    4d94:	14 f4       	brge	.+4      	; 0x4d9a <STEPPER_clk+0x100>
    4d96:	40 e0       	ldi	r20, 0x00	; 0
    4d98:	0b c0       	rjmp	.+22     	; 0x4db0 <STEPPER_clk+0x116>
    4d9a:	80 91 79 06 	lds	r24, 0x0679
    4d9e:	90 91 7a 06 	lds	r25, 0x067A
    4da2:	88 5e       	subi	r24, 0xE8	; 232
    4da4:	93 40       	sbci	r25, 0x03	; 3
    4da6:	90 93 7a 06 	sts	0x067A, r25
    4daa:	80 93 79 06 	sts	0x0679, r24
    4dae:	41 e0       	ldi	r20, 0x01	; 1
    4db0:	80 91 7b 06 	lds	r24, 0x067B
    4db4:	90 91 7c 06 	lds	r25, 0x067C
    4db8:	20 91 57 06 	lds	r18, 0x0657
    4dbc:	30 91 58 06 	lds	r19, 0x0658
    4dc0:	28 0f       	add	r18, r24
    4dc2:	39 1f       	adc	r19, r25
    4dc4:	30 93 7c 06 	sts	0x067C, r19
    4dc8:	20 93 7b 06 	sts	0x067B, r18
    4dcc:	80 91 7b 06 	lds	r24, 0x067B
    4dd0:	90 91 7c 06 	lds	r25, 0x067C
    4dd4:	88 5e       	subi	r24, 0xE8	; 232
    4dd6:	93 40       	sbci	r25, 0x03	; 3
    4dd8:	14 f4       	brge	.+4      	; 0x4dde <STEPPER_clk+0x144>
    4dda:	60 e0       	ldi	r22, 0x00	; 0
    4ddc:	0b c0       	rjmp	.+22     	; 0x4df4 <STEPPER_clk+0x15a>
    4dde:	80 91 7b 06 	lds	r24, 0x067B
    4de2:	90 91 7c 06 	lds	r25, 0x067C
    4de6:	88 5e       	subi	r24, 0xE8	; 232
    4de8:	93 40       	sbci	r25, 0x03	; 3
    4dea:	90 93 7c 06 	sts	0x067C, r25
    4dee:	80 93 7b 06 	sts	0x067B, r24
    4df2:	61 e0       	ldi	r22, 0x01	; 1
    4df4:	84 2f       	mov	r24, r20
    4df6:	0e 94 43 27 	call	0x4e86	; 0x4e86 <STEPPER_process_run_mode>
    4dfa:	08 95       	ret

00004dfc <STEPPER_process_accel>:
    4dfc:	88 23       	and	r24, r24
    4dfe:	f1 f0       	breq	.+60     	; 0x4e3c <STEPPER_process_accel+0x40>
    4e00:	20 91 51 06 	lds	r18, 0x0651
    4e04:	30 91 52 06 	lds	r19, 0x0652
    4e08:	80 91 55 06 	lds	r24, 0x0655
    4e0c:	90 91 56 06 	lds	r25, 0x0656
    4e10:	28 1b       	sub	r18, r24
    4e12:	39 0b       	sbc	r19, r25
    4e14:	12 16       	cp	r1, r18
    4e16:	13 06       	cpc	r1, r19
    4e18:	34 f4       	brge	.+12     	; 0x4e26 <STEPPER_process_accel+0x2a>
    4e1a:	80 91 55 06 	lds	r24, 0x0655
    4e1e:	90 91 56 06 	lds	r25, 0x0656
    4e22:	01 96       	adiw	r24, 0x01	; 1
    4e24:	07 c0       	rjmp	.+14     	; 0x4e34 <STEPPER_process_accel+0x38>
    4e26:	23 2b       	or	r18, r19
    4e28:	49 f0       	breq	.+18     	; 0x4e3c <STEPPER_process_accel+0x40>
    4e2a:	80 91 55 06 	lds	r24, 0x0655
    4e2e:	90 91 56 06 	lds	r25, 0x0656
    4e32:	01 97       	sbiw	r24, 0x01	; 1
    4e34:	90 93 56 06 	sts	0x0656, r25
    4e38:	80 93 55 06 	sts	0x0655, r24
    4e3c:	66 23       	and	r22, r22
    4e3e:	11 f1       	breq	.+68     	; 0x4e84 <STEPPER_process_accel+0x88>
    4e40:	20 91 53 06 	lds	r18, 0x0653
    4e44:	30 91 54 06 	lds	r19, 0x0654
    4e48:	80 91 57 06 	lds	r24, 0x0657
    4e4c:	90 91 58 06 	lds	r25, 0x0658
    4e50:	28 1b       	sub	r18, r24
    4e52:	39 0b       	sbc	r19, r25
    4e54:	12 16       	cp	r1, r18
    4e56:	13 06       	cpc	r1, r19
    4e58:	54 f4       	brge	.+20     	; 0x4e6e <STEPPER_process_accel+0x72>
    4e5a:	80 91 57 06 	lds	r24, 0x0657
    4e5e:	90 91 58 06 	lds	r25, 0x0658
    4e62:	01 96       	adiw	r24, 0x01	; 1
    4e64:	90 93 58 06 	sts	0x0658, r25
    4e68:	80 93 57 06 	sts	0x0657, r24
    4e6c:	08 95       	ret
    4e6e:	23 2b       	or	r18, r19
    4e70:	49 f0       	breq	.+18     	; 0x4e84 <STEPPER_process_accel+0x88>
    4e72:	80 91 57 06 	lds	r24, 0x0657
    4e76:	90 91 58 06 	lds	r25, 0x0658
    4e7a:	01 97       	sbiw	r24, 0x01	; 1
    4e7c:	90 93 58 06 	sts	0x0658, r25
    4e80:	80 93 57 06 	sts	0x0657, r24
    4e84:	08 95       	ret

00004e86 <STEPPER_process_run_mode>:
    4e86:	0f 93       	push	r16
    4e88:	1f 93       	push	r17
    4e8a:	18 2f       	mov	r17, r24
    4e8c:	06 2f       	mov	r16, r22
    4e8e:	80 91 85 06 	lds	r24, 0x0685
    4e92:	88 23       	and	r24, r24
    4e94:	09 f0       	breq	.+2      	; 0x4e98 <STEPPER_process_run_mode+0x12>
    4e96:	e7 c0       	rjmp	.+462    	; 0x5066 <STEPPER_process_run_mode+0x1e0>
    4e98:	80 91 6d 06 	lds	r24, 0x066D
    4e9c:	88 23       	and	r24, r24
    4e9e:	09 f0       	breq	.+2      	; 0x4ea2 <STEPPER_process_run_mode+0x1c>
    4ea0:	5a c0       	rjmp	.+180    	; 0x4f56 <STEPPER_process_run_mode+0xd0>
    4ea2:	80 91 55 06 	lds	r24, 0x0655
    4ea6:	90 91 56 06 	lds	r25, 0x0656
    4eaa:	89 2b       	or	r24, r25
    4eac:	e9 f4       	brne	.+58     	; 0x4ee8 <STEPPER_process_run_mode+0x62>
    4eae:	80 91 4a 04 	lds	r24, 0x044A
    4eb2:	83 7e       	andi	r24, 0xE3	; 227
    4eb4:	80 93 4a 04 	sts	0x044A, r24
    4eb8:	10 92 76 06 	sts	0x0676, r1
    4ebc:	80 91 81 06 	lds	r24, 0x0681
    4ec0:	88 23       	and	r24, r24
    4ec2:	09 f4       	brne	.+2      	; 0x4ec6 <STEPPER_process_run_mode+0x40>
    4ec4:	5d c0       	rjmp	.+186    	; 0x4f80 <STEPPER_process_run_mode+0xfa>
    4ec6:	60 91 6f 06 	lds	r22, 0x066F
    4eca:	80 e0       	ldi	r24, 0x00	; 0
    4ecc:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <STEPPER_stop>
    4ed0:	e0 91 83 06 	lds	r30, 0x0683
    4ed4:	f0 91 84 06 	lds	r31, 0x0684
    4ed8:	30 97       	sbiw	r30, 0x00	; 0
    4eda:	09 f4       	brne	.+2      	; 0x4ede <STEPPER_process_run_mode+0x58>
    4edc:	51 c0       	rjmp	.+162    	; 0x4f80 <STEPPER_process_run_mode+0xfa>
    4ede:	81 e0       	ldi	r24, 0x01	; 1
    4ee0:	80 83       	st	Z, r24
    4ee2:	10 92 81 06 	sts	0x0681, r1
    4ee6:	4c c0       	rjmp	.+152    	; 0x4f80 <STEPPER_process_run_mode+0xfa>
    4ee8:	80 91 4f 06 	lds	r24, 0x064F
    4eec:	81 30       	cpi	r24, 0x01	; 1
    4eee:	41 f4       	brne	.+16     	; 0x4f00 <STEPPER_process_run_mode+0x7a>
    4ef0:	80 91 61 06 	lds	r24, 0x0661
    4ef4:	90 91 62 06 	lds	r25, 0x0662
    4ef8:	01 97       	sbiw	r24, 0x01	; 1
    4efa:	11 f4       	brne	.+4      	; 0x4f00 <STEPPER_process_run_mode+0x7a>
    4efc:	11 e0       	ldi	r17, 0x01	; 1
    4efe:	02 c0       	rjmp	.+4      	; 0x4f04 <STEPPER_process_run_mode+0x7e>
    4f00:	11 23       	and	r17, r17
    4f02:	f1 f1       	breq	.+124    	; 0x4f80 <STEPPER_process_run_mode+0xfa>
    4f04:	e0 91 74 06 	lds	r30, 0x0674
    4f08:	f0 e0       	ldi	r31, 0x00	; 0
    4f0a:	ee 5a       	subi	r30, 0xAE	; 174
    4f0c:	fc 4f       	sbci	r31, 0xFC	; 252
    4f0e:	90 91 4a 04 	lds	r25, 0x044A
    4f12:	93 7e       	andi	r25, 0xE3	; 227
    4f14:	80 81       	ld	r24, Z
    4f16:	89 2b       	or	r24, r25
    4f18:	80 93 4a 04 	sts	0x044A, r24
    4f1c:	80 91 72 06 	lds	r24, 0x0672
    4f20:	88 23       	and	r24, r24
    4f22:	21 f4       	brne	.+8      	; 0x4f2c <STEPPER_process_run_mode+0xa6>
    4f24:	80 91 74 06 	lds	r24, 0x0674
    4f28:	8f 5f       	subi	r24, 0xFF	; 255
    4f2a:	03 c0       	rjmp	.+6      	; 0x4f32 <STEPPER_process_run_mode+0xac>
    4f2c:	80 91 74 06 	lds	r24, 0x0674
    4f30:	81 50       	subi	r24, 0x01	; 1
    4f32:	80 93 74 06 	sts	0x0674, r24
    4f36:	80 91 74 06 	lds	r24, 0x0674
    4f3a:	83 70       	andi	r24, 0x03	; 3
    4f3c:	80 93 74 06 	sts	0x0674, r24
    4f40:	81 e0       	ldi	r24, 0x01	; 1
    4f42:	80 93 76 06 	sts	0x0676, r24
    4f46:	80 91 4f 06 	lds	r24, 0x064F
    4f4a:	81 30       	cpi	r24, 0x01	; 1
    4f4c:	c9 f4       	brne	.+50     	; 0x4f80 <STEPPER_process_run_mode+0xfa>
    4f4e:	80 e0       	ldi	r24, 0x00	; 0
    4f50:	0e 94 46 28 	call	0x508c	; 0x508c <STEPPER_process_step_mode>
    4f54:	15 c0       	rjmp	.+42     	; 0x4f80 <STEPPER_process_run_mode+0xfa>
    4f56:	90 91 4a 04 	lds	r25, 0x044A
    4f5a:	93 7e       	andi	r25, 0xE3	; 227
    4f5c:	90 93 4a 04 	sts	0x044A, r25
    4f60:	e0 91 74 06 	lds	r30, 0x0674
    4f64:	f0 e0       	ldi	r31, 0x00	; 0
    4f66:	ee 5a       	subi	r30, 0xAE	; 174
    4f68:	fc 4f       	sbci	r31, 0xFC	; 252
    4f6a:	80 81       	ld	r24, Z
    4f6c:	89 2b       	or	r24, r25
    4f6e:	80 93 4a 04 	sts	0x044A, r24
    4f72:	82 e0       	ldi	r24, 0x02	; 2
    4f74:	80 93 76 06 	sts	0x0676, r24
    4f78:	10 92 56 06 	sts	0x0656, r1
    4f7c:	10 92 55 06 	sts	0x0655, r1
    4f80:	80 91 6e 06 	lds	r24, 0x066E
    4f84:	88 23       	and	r24, r24
    4f86:	09 f0       	breq	.+2      	; 0x4f8a <STEPPER_process_run_mode+0x104>
    4f88:	59 c0       	rjmp	.+178    	; 0x503c <STEPPER_process_run_mode+0x1b6>
    4f8a:	80 91 57 06 	lds	r24, 0x0657
    4f8e:	90 91 58 06 	lds	r25, 0x0658
    4f92:	89 2b       	or	r24, r25
    4f94:	e9 f4       	brne	.+58     	; 0x4fd0 <STEPPER_process_run_mode+0x14a>
    4f96:	80 91 4a 04 	lds	r24, 0x044A
    4f9a:	8f 71       	andi	r24, 0x1F	; 31
    4f9c:	80 93 4a 04 	sts	0x044A, r24
    4fa0:	10 92 77 06 	sts	0x0677, r1
    4fa4:	80 91 82 06 	lds	r24, 0x0682
    4fa8:	88 23       	and	r24, r24
    4faa:	09 f4       	brne	.+2      	; 0x4fae <STEPPER_process_run_mode+0x128>
    4fac:	5c c0       	rjmp	.+184    	; 0x5066 <STEPPER_process_run_mode+0x1e0>
    4fae:	60 91 70 06 	lds	r22, 0x0670
    4fb2:	81 e0       	ldi	r24, 0x01	; 1
    4fb4:	0e 94 d9 1b 	call	0x37b2	; 0x37b2 <STEPPER_stop>
    4fb8:	e0 91 83 06 	lds	r30, 0x0683
    4fbc:	f0 91 84 06 	lds	r31, 0x0684
    4fc0:	30 97       	sbiw	r30, 0x00	; 0
    4fc2:	09 f4       	brne	.+2      	; 0x4fc6 <STEPPER_process_run_mode+0x140>
    4fc4:	50 c0       	rjmp	.+160    	; 0x5066 <STEPPER_process_run_mode+0x1e0>
    4fc6:	81 e0       	ldi	r24, 0x01	; 1
    4fc8:	81 83       	std	Z+1, r24	; 0x01
    4fca:	10 92 82 06 	sts	0x0682, r1
    4fce:	4b c0       	rjmp	.+150    	; 0x5066 <STEPPER_process_run_mode+0x1e0>
    4fd0:	80 91 50 06 	lds	r24, 0x0650
    4fd4:	81 30       	cpi	r24, 0x01	; 1
    4fd6:	41 f4       	brne	.+16     	; 0x4fe8 <STEPPER_process_run_mode+0x162>
    4fd8:	80 91 63 06 	lds	r24, 0x0663
    4fdc:	90 91 64 06 	lds	r25, 0x0664
    4fe0:	01 97       	sbiw	r24, 0x01	; 1
    4fe2:	11 f4       	brne	.+4      	; 0x4fe8 <STEPPER_process_run_mode+0x162>
    4fe4:	01 e0       	ldi	r16, 0x01	; 1
    4fe6:	02 c0       	rjmp	.+4      	; 0x4fec <STEPPER_process_run_mode+0x166>
    4fe8:	00 23       	and	r16, r16
    4fea:	e9 f1       	breq	.+122    	; 0x5066 <STEPPER_process_run_mode+0x1e0>
    4fec:	e0 91 75 06 	lds	r30, 0x0675
    4ff0:	f0 e0       	ldi	r31, 0x00	; 0
    4ff2:	ea 5a       	subi	r30, 0xAA	; 170
    4ff4:	fc 4f       	sbci	r31, 0xFC	; 252
    4ff6:	90 91 4a 04 	lds	r25, 0x044A
    4ffa:	9f 71       	andi	r25, 0x1F	; 31
    4ffc:	80 81       	ld	r24, Z
    4ffe:	89 2b       	or	r24, r25
    5000:	80 93 4a 04 	sts	0x044A, r24
    5004:	80 91 73 06 	lds	r24, 0x0673
    5008:	88 23       	and	r24, r24
    500a:	21 f4       	brne	.+8      	; 0x5014 <STEPPER_process_run_mode+0x18e>
    500c:	80 91 75 06 	lds	r24, 0x0675
    5010:	8f 5f       	subi	r24, 0xFF	; 255
    5012:	03 c0       	rjmp	.+6      	; 0x501a <STEPPER_process_run_mode+0x194>
    5014:	80 91 75 06 	lds	r24, 0x0675
    5018:	81 50       	subi	r24, 0x01	; 1
    501a:	80 93 75 06 	sts	0x0675, r24
    501e:	80 91 75 06 	lds	r24, 0x0675
    5022:	83 70       	andi	r24, 0x03	; 3
    5024:	80 93 75 06 	sts	0x0675, r24
    5028:	81 e0       	ldi	r24, 0x01	; 1
    502a:	80 93 77 06 	sts	0x0677, r24
    502e:	80 91 50 06 	lds	r24, 0x0650
    5032:	81 30       	cpi	r24, 0x01	; 1
    5034:	c1 f4       	brne	.+48     	; 0x5066 <STEPPER_process_run_mode+0x1e0>
    5036:	0e 94 46 28 	call	0x508c	; 0x508c <STEPPER_process_step_mode>
    503a:	15 c0       	rjmp	.+42     	; 0x5066 <STEPPER_process_run_mode+0x1e0>
    503c:	90 91 4a 04 	lds	r25, 0x044A
    5040:	9f 71       	andi	r25, 0x1F	; 31
    5042:	90 93 4a 04 	sts	0x044A, r25
    5046:	e0 91 75 06 	lds	r30, 0x0675
    504a:	f0 e0       	ldi	r31, 0x00	; 0
    504c:	ea 5a       	subi	r30, 0xAA	; 170
    504e:	fc 4f       	sbci	r31, 0xFC	; 252
    5050:	80 81       	ld	r24, Z
    5052:	89 2b       	or	r24, r25
    5054:	80 93 4a 04 	sts	0x044A, r24
    5058:	82 e0       	ldi	r24, 0x02	; 2
    505a:	80 93 77 06 	sts	0x0677, r24
    505e:	10 92 58 06 	sts	0x0658, r1
    5062:	10 92 57 06 	sts	0x0657, r1
    5066:	80 91 78 06 	lds	r24, 0x0678
    506a:	88 23       	and	r24, r24
    506c:	31 f4       	brne	.+12     	; 0x507a <STEPPER_process_run_mode+0x1f4>
    506e:	8a e4       	ldi	r24, 0x4A	; 74
    5070:	94 e0       	ldi	r25, 0x04	; 4
    5072:	61 2f       	mov	r22, r17
    5074:	40 2f       	mov	r20, r16
    5076:	0e 94 08 29 	call	0x5210	; 0x5210 <STEPPER_process_pwm>
    507a:	88 b1       	in	r24, 0x08	; 8
    507c:	83 70       	andi	r24, 0x03	; 3
    507e:	90 91 4a 04 	lds	r25, 0x044A
    5082:	89 2b       	or	r24, r25
    5084:	88 b9       	out	0x08, r24	; 8
    5086:	1f 91       	pop	r17
    5088:	0f 91       	pop	r16
    508a:	08 95       	ret

0000508c <STEPPER_process_step_mode>:
    508c:	88 23       	and	r24, r24
    508e:	21 f0       	breq	.+8      	; 0x5098 <STEPPER_process_step_mode+0xc>
    5090:	81 30       	cpi	r24, 0x01	; 1
    5092:	09 f0       	breq	.+2      	; 0x5096 <STEPPER_process_step_mode+0xa>
    5094:	4e c0       	rjmp	.+156    	; 0x5132 <STEPPER_process_step_mode+0xa6>
    5096:	27 c0       	rjmp	.+78     	; 0x50e6 <STEPPER_process_step_mode+0x5a>
    5098:	80 91 61 06 	lds	r24, 0x0661
    509c:	90 91 62 06 	lds	r25, 0x0662
    50a0:	89 2b       	or	r24, r25
    50a2:	49 f0       	breq	.+18     	; 0x50b6 <STEPPER_process_step_mode+0x2a>
    50a4:	80 91 61 06 	lds	r24, 0x0661
    50a8:	90 91 62 06 	lds	r25, 0x0662
    50ac:	01 97       	sbiw	r24, 0x01	; 1
    50ae:	90 93 62 06 	sts	0x0662, r25
    50b2:	80 93 61 06 	sts	0x0661, r24
    50b6:	80 91 81 06 	lds	r24, 0x0681
    50ba:	88 23       	and	r24, r24
    50bc:	d1 f5       	brne	.+116    	; 0x5132 <STEPPER_process_step_mode+0xa6>
    50be:	20 91 61 06 	lds	r18, 0x0661
    50c2:	30 91 62 06 	lds	r19, 0x0662
    50c6:	80 91 65 06 	lds	r24, 0x0665
    50ca:	90 91 66 06 	lds	r25, 0x0666
    50ce:	28 17       	cp	r18, r24
    50d0:	39 07       	cpc	r19, r25
    50d2:	79 f5       	brne	.+94     	; 0x5132 <STEPPER_process_step_mode+0xa6>
    50d4:	80 e0       	ldi	r24, 0x00	; 0
    50d6:	60 e0       	ldi	r22, 0x00	; 0
    50d8:	70 e0       	ldi	r23, 0x00	; 0
    50da:	0e 94 2b 1b 	call	0x3656	; 0x3656 <STEPPER_set_speed>
    50de:	81 e0       	ldi	r24, 0x01	; 1
    50e0:	80 93 81 06 	sts	0x0681, r24
    50e4:	08 95       	ret
    50e6:	80 91 63 06 	lds	r24, 0x0663
    50ea:	90 91 64 06 	lds	r25, 0x0664
    50ee:	89 2b       	or	r24, r25
    50f0:	49 f0       	breq	.+18     	; 0x5104 <STEPPER_process_step_mode+0x78>
    50f2:	80 91 63 06 	lds	r24, 0x0663
    50f6:	90 91 64 06 	lds	r25, 0x0664
    50fa:	01 97       	sbiw	r24, 0x01	; 1
    50fc:	90 93 64 06 	sts	0x0664, r25
    5100:	80 93 63 06 	sts	0x0663, r24
    5104:	80 91 82 06 	lds	r24, 0x0682
    5108:	88 23       	and	r24, r24
    510a:	99 f4       	brne	.+38     	; 0x5132 <STEPPER_process_step_mode+0xa6>
    510c:	20 91 63 06 	lds	r18, 0x0663
    5110:	30 91 64 06 	lds	r19, 0x0664
    5114:	80 91 67 06 	lds	r24, 0x0667
    5118:	90 91 68 06 	lds	r25, 0x0668
    511c:	28 17       	cp	r18, r24
    511e:	39 07       	cpc	r19, r25
    5120:	41 f4       	brne	.+16     	; 0x5132 <STEPPER_process_step_mode+0xa6>
    5122:	81 e0       	ldi	r24, 0x01	; 1
    5124:	60 e0       	ldi	r22, 0x00	; 0
    5126:	70 e0       	ldi	r23, 0x00	; 0
    5128:	0e 94 2b 1b 	call	0x3656	; 0x3656 <STEPPER_set_speed>
    512c:	81 e0       	ldi	r24, 0x01	; 1
    512e:	80 93 82 06 	sts	0x0682, r24
    5132:	08 95       	ret

00005134 <TMRSRVC_process>:
    5134:	ff 92       	push	r15
    5136:	0f 93       	push	r16
    5138:	1f 93       	push	r17
    513a:	cf 93       	push	r28
    513c:	df 93       	push	r29
    513e:	80 91 bf 06 	lds	r24, 0x06BF
    5142:	88 23       	and	r24, r24
    5144:	09 f4       	brne	.+2      	; 0x5148 <TMRSRVC_process+0x14>
    5146:	59 c0       	rjmp	.+178    	; 0x51fa <TMRSRVC_process+0xc6>
    5148:	00 91 c0 06 	lds	r16, 0x06C0
    514c:	10 91 c1 06 	lds	r17, 0x06C1
    5150:	f8 01       	movw	r30, r16
    5152:	c0 81       	ld	r28, Z
    5154:	d1 81       	ldd	r29, Z+1	; 0x01
    5156:	8c 81       	ldd	r24, Y+4	; 0x04
    5158:	9d 81       	ldd	r25, Y+5	; 0x05
    515a:	01 97       	sbiw	r24, 0x01	; 1
    515c:	9d 83       	std	Y+5, r25	; 0x05
    515e:	8c 83       	std	Y+4, r24	; 0x04
    5160:	18 16       	cp	r1, r24
    5162:	19 06       	cpc	r1, r25
    5164:	0c f4       	brge	.+2      	; 0x5168 <TMRSRVC_process+0x34>
    5166:	49 c0       	rjmp	.+146    	; 0x51fa <TMRSRVC_process+0xc6>
    5168:	89 81       	ldd	r24, Y+1	; 0x01
    516a:	80 ff       	sbrs	r24, 0
    516c:	05 c0       	rjmp	.+10     	; 0x5178 <TMRSRVC_process+0x44>
    516e:	8e 81       	ldd	r24, Y+6	; 0x06
    5170:	88 23       	and	r24, r24
    5172:	11 f4       	brne	.+4      	; 0x5178 <TMRSRVC_process+0x44>
    5174:	81 e0       	ldi	r24, 0x01	; 1
    5176:	8e 83       	std	Y+6, r24	; 0x06
    5178:	89 81       	ldd	r24, Y+1	; 0x01
    517a:	81 ff       	sbrs	r24, 1
    517c:	03 c0       	rjmp	.+6      	; 0x5184 <TMRSRVC_process+0x50>
    517e:	ef 81       	ldd	r30, Y+7	; 0x07
    5180:	f8 85       	ldd	r31, Y+8	; 0x08
    5182:	09 95       	icall
    5184:	80 91 bf 06 	lds	r24, 0x06BF
    5188:	82 30       	cpi	r24, 0x02	; 2
    518a:	a8 f0       	brcs	.+42     	; 0x51b6 <TMRSRVC_process+0x82>
    518c:	f8 01       	movw	r30, r16
    518e:	82 81       	ldd	r24, Z+2	; 0x02
    5190:	93 81       	ldd	r25, Z+3	; 0x03
    5192:	90 93 c1 06 	sts	0x06C1, r25
    5196:	80 93 c0 06 	sts	0x06C0, r24
    519a:	13 82       	std	Z+3, r1	; 0x03
    519c:	12 82       	std	Z+2, r1	; 0x02
    519e:	e0 91 00 00 	lds	r30, 0x0000
    51a2:	f0 91 01 00 	lds	r31, 0x0001
    51a6:	84 81       	ldd	r24, Z+4	; 0x04
    51a8:	95 81       	ldd	r25, Z+5	; 0x05
    51aa:	18 16       	cp	r1, r24
    51ac:	19 06       	cpc	r1, r25
    51ae:	3c f0       	brlt	.+14     	; 0x51be <TMRSRVC_process+0x8a>
    51b0:	ff 24       	eor	r15, r15
    51b2:	f3 94       	inc	r15
    51b4:	05 c0       	rjmp	.+10     	; 0x51c0 <TMRSRVC_process+0x8c>
    51b6:	10 92 c1 06 	sts	0x06C1, r1
    51ba:	10 92 c0 06 	sts	0x06C0, r1
    51be:	ff 24       	eor	r15, r15
    51c0:	80 91 bf 06 	lds	r24, 0x06BF
    51c4:	81 50       	subi	r24, 0x01	; 1
    51c6:	80 93 bf 06 	sts	0x06BF, r24
    51ca:	80 91 bf 06 	lds	r24, 0x06BF
    51ce:	88 23       	and	r24, r24
    51d0:	11 f4       	brne	.+4      	; 0x51d6 <TMRSRVC_process+0xa2>
    51d2:	0e 94 05 29 	call	0x520a	; 0x520a <TMRSRVC_stop>
    51d6:	89 81       	ldd	r24, Y+1	; 0x01
    51d8:	82 ff       	sbrs	r24, 2
    51da:	08 c0       	rjmp	.+16     	; 0x51ec <TMRSRVC_process+0xb8>
    51dc:	8a 81       	ldd	r24, Y+2	; 0x02
    51de:	9b 81       	ldd	r25, Y+3	; 0x03
    51e0:	9d 83       	std	Y+5, r25	; 0x05
    51e2:	8c 83       	std	Y+4, r24	; 0x04
    51e4:	c8 01       	movw	r24, r16
    51e6:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <TMRSRVC_insert>
    51ea:	08 c0       	rjmp	.+16     	; 0x51fc <TMRSRVC_process+0xc8>
    51ec:	c8 01       	movw	r24, r16
    51ee:	0e 94 0e 32 	call	0x641c	; 0x641c <free>
    51f2:	89 81       	ldd	r24, Y+1	; 0x01
    51f4:	8f 7e       	andi	r24, 0xEF	; 239
    51f6:	89 83       	std	Y+1, r24	; 0x01
    51f8:	01 c0       	rjmp	.+2      	; 0x51fc <TMRSRVC_process+0xc8>
    51fa:	ff 24       	eor	r15, r15
    51fc:	8f 2d       	mov	r24, r15
    51fe:	df 91       	pop	r29
    5200:	cf 91       	pop	r28
    5202:	1f 91       	pop	r17
    5204:	0f 91       	pop	r16
    5206:	ff 90       	pop	r15
    5208:	08 95       	ret

0000520a <TMRSRVC_stop>:
    520a:	10 92 49 04 	sts	0x0449, r1
    520e:	08 95       	ret

00005210 <STEPPER_process_pwm>:
    5210:	fc 01       	movw	r30, r24
    5212:	80 91 76 06 	lds	r24, 0x0676
    5216:	82 30       	cpi	r24, 0x02	; 2
    5218:	69 f4       	brne	.+26     	; 0x5234 <STEPPER_process_pwm+0x24>
    521a:	80 91 4e 04 	lds	r24, 0x044E
    521e:	91 e0       	ldi	r25, 0x01	; 1
    5220:	89 27       	eor	r24, r25
    5222:	80 93 4e 04 	sts	0x044E, r24
    5226:	88 23       	and	r24, r24
    5228:	09 f0       	breq	.+2      	; 0x522c <STEPPER_process_pwm+0x1c>
    522a:	3e c0       	rjmp	.+124    	; 0x52a8 <STEPPER_process_pwm+0x98>
    522c:	80 81       	ld	r24, Z
    522e:	83 7e       	andi	r24, 0xE3	; 227
    5230:	80 83       	st	Z, r24
    5232:	3a c0       	rjmp	.+116    	; 0x52a8 <STEPPER_process_pwm+0x98>
    5234:	80 91 55 06 	lds	r24, 0x0655
    5238:	90 91 56 06 	lds	r25, 0x0656
    523c:	c3 97       	sbiw	r24, 0x33	; 51
    523e:	a4 f5       	brge	.+104    	; 0x52a8 <STEPPER_process_pwm+0x98>
    5240:	66 23       	and	r22, r22
    5242:	d1 f0       	breq	.+52     	; 0x5278 <STEPPER_process_pwm+0x68>
    5244:	20 91 55 06 	lds	r18, 0x0655
    5248:	30 91 56 06 	lds	r19, 0x0656
    524c:	80 e6       	ldi	r24, 0x60	; 96
    524e:	90 e0       	ldi	r25, 0x00	; 0
    5250:	bc 01       	movw	r22, r24
    5252:	26 9f       	mul	r18, r22
    5254:	c0 01       	movw	r24, r0
    5256:	27 9f       	mul	r18, r23
    5258:	90 0d       	add	r25, r0
    525a:	36 9f       	mul	r19, r22
    525c:	90 0d       	add	r25, r0
    525e:	11 24       	eor	r1, r1
    5260:	88 0f       	add	r24, r24
    5262:	89 2f       	mov	r24, r25
    5264:	88 1f       	adc	r24, r24
    5266:	99 0b       	sbc	r25, r25
    5268:	90 93 6a 06 	sts	0x066A, r25
    526c:	80 93 69 06 	sts	0x0669, r24
    5270:	81 e0       	ldi	r24, 0x01	; 1
    5272:	80 93 4c 04 	sts	0x044C, r24
    5276:	18 c0       	rjmp	.+48     	; 0x52a8 <STEPPER_process_pwm+0x98>
    5278:	80 91 4c 04 	lds	r24, 0x044C
    527c:	88 23       	and	r24, r24
    527e:	a1 f0       	breq	.+40     	; 0x52a8 <STEPPER_process_pwm+0x98>
    5280:	80 91 69 06 	lds	r24, 0x0669
    5284:	90 91 6a 06 	lds	r25, 0x066A
    5288:	01 97       	sbiw	r24, 0x01	; 1
    528a:	90 93 6a 06 	sts	0x066A, r25
    528e:	80 93 69 06 	sts	0x0669, r24
    5292:	80 91 69 06 	lds	r24, 0x0669
    5296:	90 91 6a 06 	lds	r25, 0x066A
    529a:	89 2b       	or	r24, r25
    529c:	29 f4       	brne	.+10     	; 0x52a8 <STEPPER_process_pwm+0x98>
    529e:	80 81       	ld	r24, Z
    52a0:	83 7e       	andi	r24, 0xE3	; 227
    52a2:	80 83       	st	Z, r24
    52a4:	10 92 4c 04 	sts	0x044C, r1
    52a8:	80 91 77 06 	lds	r24, 0x0677
    52ac:	82 30       	cpi	r24, 0x02	; 2
    52ae:	69 f4       	brne	.+26     	; 0x52ca <STEPPER_process_pwm+0xba>
    52b0:	80 91 4d 04 	lds	r24, 0x044D
    52b4:	91 e0       	ldi	r25, 0x01	; 1
    52b6:	89 27       	eor	r24, r25
    52b8:	80 93 4d 04 	sts	0x044D, r24
    52bc:	88 23       	and	r24, r24
    52be:	09 f0       	breq	.+2      	; 0x52c2 <STEPPER_process_pwm+0xb2>
    52c0:	3e c0       	rjmp	.+124    	; 0x533e <STEPPER_process_pwm+0x12e>
    52c2:	80 81       	ld	r24, Z
    52c4:	8f 71       	andi	r24, 0x1F	; 31
    52c6:	80 83       	st	Z, r24
    52c8:	08 95       	ret
    52ca:	80 91 57 06 	lds	r24, 0x0657
    52ce:	90 91 58 06 	lds	r25, 0x0658
    52d2:	c3 97       	sbiw	r24, 0x33	; 51
    52d4:	a4 f5       	brge	.+104    	; 0x533e <STEPPER_process_pwm+0x12e>
    52d6:	44 23       	and	r20, r20
    52d8:	d1 f0       	breq	.+52     	; 0x530e <STEPPER_process_pwm+0xfe>
    52da:	20 91 57 06 	lds	r18, 0x0657
    52de:	30 91 58 06 	lds	r19, 0x0658
    52e2:	80 e6       	ldi	r24, 0x60	; 96
    52e4:	90 e0       	ldi	r25, 0x00	; 0
    52e6:	ac 01       	movw	r20, r24
    52e8:	24 9f       	mul	r18, r20
    52ea:	c0 01       	movw	r24, r0
    52ec:	25 9f       	mul	r18, r21
    52ee:	90 0d       	add	r25, r0
    52f0:	34 9f       	mul	r19, r20
    52f2:	90 0d       	add	r25, r0
    52f4:	11 24       	eor	r1, r1
    52f6:	88 0f       	add	r24, r24
    52f8:	89 2f       	mov	r24, r25
    52fa:	88 1f       	adc	r24, r24
    52fc:	99 0b       	sbc	r25, r25
    52fe:	90 93 6c 06 	sts	0x066C, r25
    5302:	80 93 6b 06 	sts	0x066B, r24
    5306:	81 e0       	ldi	r24, 0x01	; 1
    5308:	80 93 4b 04 	sts	0x044B, r24
    530c:	08 95       	ret
    530e:	80 91 4b 04 	lds	r24, 0x044B
    5312:	88 23       	and	r24, r24
    5314:	a1 f0       	breq	.+40     	; 0x533e <STEPPER_process_pwm+0x12e>
    5316:	80 91 6b 06 	lds	r24, 0x066B
    531a:	90 91 6c 06 	lds	r25, 0x066C
    531e:	01 97       	sbiw	r24, 0x01	; 1
    5320:	90 93 6c 06 	sts	0x066C, r25
    5324:	80 93 6b 06 	sts	0x066B, r24
    5328:	80 91 6b 06 	lds	r24, 0x066B
    532c:	90 91 6c 06 	lds	r25, 0x066C
    5330:	89 2b       	or	r24, r25
    5332:	29 f4       	brne	.+10     	; 0x533e <STEPPER_process_pwm+0x12e>
    5334:	80 81       	ld	r24, Z
    5336:	8f 71       	andi	r24, 0x1F	; 31
    5338:	80 83       	st	Z, r24
    533a:	10 92 4b 04 	sts	0x044B, r1
    533e:	08 95       	ret

00005340 <__subsf3>:
    5340:	50 58       	subi	r21, 0x80	; 128

00005342 <__addsf3>:
    5342:	bb 27       	eor	r27, r27
    5344:	aa 27       	eor	r26, r26
    5346:	0e d0       	rcall	.+28     	; 0x5364 <__addsf3x>
    5348:	75 c1       	rjmp	.+746    	; 0x5634 <__fp_round>
    534a:	66 d1       	rcall	.+716    	; 0x5618 <__fp_pscA>
    534c:	30 f0       	brcs	.+12     	; 0x535a <__addsf3+0x18>
    534e:	6b d1       	rcall	.+726    	; 0x5626 <__fp_pscB>
    5350:	20 f0       	brcs	.+8      	; 0x535a <__addsf3+0x18>
    5352:	31 f4       	brne	.+12     	; 0x5360 <__addsf3+0x1e>
    5354:	9f 3f       	cpi	r25, 0xFF	; 255
    5356:	11 f4       	brne	.+4      	; 0x535c <__addsf3+0x1a>
    5358:	1e f4       	brtc	.+6      	; 0x5360 <__addsf3+0x1e>
    535a:	5b c1       	rjmp	.+694    	; 0x5612 <__fp_nan>
    535c:	0e f4       	brtc	.+2      	; 0x5360 <__addsf3+0x1e>
    535e:	e0 95       	com	r30
    5360:	e7 fb       	bst	r30, 7
    5362:	51 c1       	rjmp	.+674    	; 0x5606 <__fp_inf>

00005364 <__addsf3x>:
    5364:	e9 2f       	mov	r30, r25
    5366:	77 d1       	rcall	.+750    	; 0x5656 <__fp_split3>
    5368:	80 f3       	brcs	.-32     	; 0x534a <__addsf3+0x8>
    536a:	ba 17       	cp	r27, r26
    536c:	62 07       	cpc	r22, r18
    536e:	73 07       	cpc	r23, r19
    5370:	84 07       	cpc	r24, r20
    5372:	95 07       	cpc	r25, r21
    5374:	18 f0       	brcs	.+6      	; 0x537c <__addsf3x+0x18>
    5376:	71 f4       	brne	.+28     	; 0x5394 <__addsf3x+0x30>
    5378:	9e f5       	brtc	.+102    	; 0x53e0 <__addsf3x+0x7c>
    537a:	8f c1       	rjmp	.+798    	; 0x569a <__fp_zero>
    537c:	0e f4       	brtc	.+2      	; 0x5380 <__addsf3x+0x1c>
    537e:	e0 95       	com	r30
    5380:	0b 2e       	mov	r0, r27
    5382:	ba 2f       	mov	r27, r26
    5384:	a0 2d       	mov	r26, r0
    5386:	0b 01       	movw	r0, r22
    5388:	b9 01       	movw	r22, r18
    538a:	90 01       	movw	r18, r0
    538c:	0c 01       	movw	r0, r24
    538e:	ca 01       	movw	r24, r20
    5390:	a0 01       	movw	r20, r0
    5392:	11 24       	eor	r1, r1
    5394:	ff 27       	eor	r31, r31
    5396:	59 1b       	sub	r21, r25
    5398:	99 f0       	breq	.+38     	; 0x53c0 <__addsf3x+0x5c>
    539a:	59 3f       	cpi	r21, 0xF9	; 249
    539c:	50 f4       	brcc	.+20     	; 0x53b2 <__addsf3x+0x4e>
    539e:	50 3e       	cpi	r21, 0xE0	; 224
    53a0:	68 f1       	brcs	.+90     	; 0x53fc <__addsf3x+0x98>
    53a2:	1a 16       	cp	r1, r26
    53a4:	f0 40       	sbci	r31, 0x00	; 0
    53a6:	a2 2f       	mov	r26, r18
    53a8:	23 2f       	mov	r18, r19
    53aa:	34 2f       	mov	r19, r20
    53ac:	44 27       	eor	r20, r20
    53ae:	58 5f       	subi	r21, 0xF8	; 248
    53b0:	f3 cf       	rjmp	.-26     	; 0x5398 <__addsf3x+0x34>
    53b2:	46 95       	lsr	r20
    53b4:	37 95       	ror	r19
    53b6:	27 95       	ror	r18
    53b8:	a7 95       	ror	r26
    53ba:	f0 40       	sbci	r31, 0x00	; 0
    53bc:	53 95       	inc	r21
    53be:	c9 f7       	brne	.-14     	; 0x53b2 <__addsf3x+0x4e>
    53c0:	7e f4       	brtc	.+30     	; 0x53e0 <__addsf3x+0x7c>
    53c2:	1f 16       	cp	r1, r31
    53c4:	ba 0b       	sbc	r27, r26
    53c6:	62 0b       	sbc	r22, r18
    53c8:	73 0b       	sbc	r23, r19
    53ca:	84 0b       	sbc	r24, r20
    53cc:	ba f0       	brmi	.+46     	; 0x53fc <__addsf3x+0x98>
    53ce:	91 50       	subi	r25, 0x01	; 1
    53d0:	a1 f0       	breq	.+40     	; 0x53fa <__addsf3x+0x96>
    53d2:	ff 0f       	add	r31, r31
    53d4:	bb 1f       	adc	r27, r27
    53d6:	66 1f       	adc	r22, r22
    53d8:	77 1f       	adc	r23, r23
    53da:	88 1f       	adc	r24, r24
    53dc:	c2 f7       	brpl	.-16     	; 0x53ce <__addsf3x+0x6a>
    53de:	0e c0       	rjmp	.+28     	; 0x53fc <__addsf3x+0x98>
    53e0:	ba 0f       	add	r27, r26
    53e2:	62 1f       	adc	r22, r18
    53e4:	73 1f       	adc	r23, r19
    53e6:	84 1f       	adc	r24, r20
    53e8:	48 f4       	brcc	.+18     	; 0x53fc <__addsf3x+0x98>
    53ea:	87 95       	ror	r24
    53ec:	77 95       	ror	r23
    53ee:	67 95       	ror	r22
    53f0:	b7 95       	ror	r27
    53f2:	f7 95       	ror	r31
    53f4:	9e 3f       	cpi	r25, 0xFE	; 254
    53f6:	08 f0       	brcs	.+2      	; 0x53fa <__addsf3x+0x96>
    53f8:	b3 cf       	rjmp	.-154    	; 0x5360 <__addsf3+0x1e>
    53fa:	93 95       	inc	r25
    53fc:	88 0f       	add	r24, r24
    53fe:	08 f0       	brcs	.+2      	; 0x5402 <__addsf3x+0x9e>
    5400:	99 27       	eor	r25, r25
    5402:	ee 0f       	add	r30, r30
    5404:	97 95       	ror	r25
    5406:	87 95       	ror	r24
    5408:	08 95       	ret

0000540a <__cmpsf2>:
    540a:	d9 d0       	rcall	.+434    	; 0x55be <__fp_cmp>
    540c:	08 f4       	brcc	.+2      	; 0x5410 <__cmpsf2+0x6>
    540e:	81 e0       	ldi	r24, 0x01	; 1
    5410:	08 95       	ret

00005412 <__divsf3>:
    5412:	0c d0       	rcall	.+24     	; 0x542c <__divsf3x>
    5414:	0f c1       	rjmp	.+542    	; 0x5634 <__fp_round>
    5416:	07 d1       	rcall	.+526    	; 0x5626 <__fp_pscB>
    5418:	40 f0       	brcs	.+16     	; 0x542a <__divsf3+0x18>
    541a:	fe d0       	rcall	.+508    	; 0x5618 <__fp_pscA>
    541c:	30 f0       	brcs	.+12     	; 0x542a <__divsf3+0x18>
    541e:	21 f4       	brne	.+8      	; 0x5428 <__divsf3+0x16>
    5420:	5f 3f       	cpi	r21, 0xFF	; 255
    5422:	19 f0       	breq	.+6      	; 0x542a <__divsf3+0x18>
    5424:	f0 c0       	rjmp	.+480    	; 0x5606 <__fp_inf>
    5426:	51 11       	cpse	r21, r1
    5428:	39 c1       	rjmp	.+626    	; 0x569c <__fp_szero>
    542a:	f3 c0       	rjmp	.+486    	; 0x5612 <__fp_nan>

0000542c <__divsf3x>:
    542c:	14 d1       	rcall	.+552    	; 0x5656 <__fp_split3>
    542e:	98 f3       	brcs	.-26     	; 0x5416 <__divsf3+0x4>

00005430 <__divsf3_pse>:
    5430:	99 23       	and	r25, r25
    5432:	c9 f3       	breq	.-14     	; 0x5426 <__divsf3+0x14>
    5434:	55 23       	and	r21, r21
    5436:	b1 f3       	breq	.-20     	; 0x5424 <__divsf3+0x12>
    5438:	95 1b       	sub	r25, r21
    543a:	55 0b       	sbc	r21, r21
    543c:	bb 27       	eor	r27, r27
    543e:	aa 27       	eor	r26, r26
    5440:	62 17       	cp	r22, r18
    5442:	73 07       	cpc	r23, r19
    5444:	84 07       	cpc	r24, r20
    5446:	38 f0       	brcs	.+14     	; 0x5456 <__divsf3_pse+0x26>
    5448:	9f 5f       	subi	r25, 0xFF	; 255
    544a:	5f 4f       	sbci	r21, 0xFF	; 255
    544c:	22 0f       	add	r18, r18
    544e:	33 1f       	adc	r19, r19
    5450:	44 1f       	adc	r20, r20
    5452:	aa 1f       	adc	r26, r26
    5454:	a9 f3       	breq	.-22     	; 0x5440 <__divsf3_pse+0x10>
    5456:	33 d0       	rcall	.+102    	; 0x54be <__divsf3_pse+0x8e>
    5458:	0e 2e       	mov	r0, r30
    545a:	3a f0       	brmi	.+14     	; 0x546a <__divsf3_pse+0x3a>
    545c:	e0 e8       	ldi	r30, 0x80	; 128
    545e:	30 d0       	rcall	.+96     	; 0x54c0 <__divsf3_pse+0x90>
    5460:	91 50       	subi	r25, 0x01	; 1
    5462:	50 40       	sbci	r21, 0x00	; 0
    5464:	e6 95       	lsr	r30
    5466:	00 1c       	adc	r0, r0
    5468:	ca f7       	brpl	.-14     	; 0x545c <__divsf3_pse+0x2c>
    546a:	29 d0       	rcall	.+82     	; 0x54be <__divsf3_pse+0x8e>
    546c:	fe 2f       	mov	r31, r30
    546e:	27 d0       	rcall	.+78     	; 0x54be <__divsf3_pse+0x8e>
    5470:	66 0f       	add	r22, r22
    5472:	77 1f       	adc	r23, r23
    5474:	88 1f       	adc	r24, r24
    5476:	bb 1f       	adc	r27, r27
    5478:	26 17       	cp	r18, r22
    547a:	37 07       	cpc	r19, r23
    547c:	48 07       	cpc	r20, r24
    547e:	ab 07       	cpc	r26, r27
    5480:	b0 e8       	ldi	r27, 0x80	; 128
    5482:	09 f0       	breq	.+2      	; 0x5486 <__divsf3_pse+0x56>
    5484:	bb 0b       	sbc	r27, r27
    5486:	80 2d       	mov	r24, r0
    5488:	bf 01       	movw	r22, r30
    548a:	ff 27       	eor	r31, r31
    548c:	93 58       	subi	r25, 0x83	; 131
    548e:	5f 4f       	sbci	r21, 0xFF	; 255
    5490:	2a f0       	brmi	.+10     	; 0x549c <__divsf3_pse+0x6c>
    5492:	9e 3f       	cpi	r25, 0xFE	; 254
    5494:	51 05       	cpc	r21, r1
    5496:	68 f0       	brcs	.+26     	; 0x54b2 <__divsf3_pse+0x82>
    5498:	b6 c0       	rjmp	.+364    	; 0x5606 <__fp_inf>
    549a:	00 c1       	rjmp	.+512    	; 0x569c <__fp_szero>
    549c:	5f 3f       	cpi	r21, 0xFF	; 255
    549e:	ec f3       	brlt	.-6      	; 0x549a <__divsf3_pse+0x6a>
    54a0:	98 3e       	cpi	r25, 0xE8	; 232
    54a2:	dc f3       	brlt	.-10     	; 0x549a <__divsf3_pse+0x6a>
    54a4:	86 95       	lsr	r24
    54a6:	77 95       	ror	r23
    54a8:	67 95       	ror	r22
    54aa:	b7 95       	ror	r27
    54ac:	f7 95       	ror	r31
    54ae:	9f 5f       	subi	r25, 0xFF	; 255
    54b0:	c9 f7       	brne	.-14     	; 0x54a4 <__divsf3_pse+0x74>
    54b2:	88 0f       	add	r24, r24
    54b4:	91 1d       	adc	r25, r1
    54b6:	96 95       	lsr	r25
    54b8:	87 95       	ror	r24
    54ba:	97 f9       	bld	r25, 7
    54bc:	08 95       	ret
    54be:	e1 e0       	ldi	r30, 0x01	; 1
    54c0:	66 0f       	add	r22, r22
    54c2:	77 1f       	adc	r23, r23
    54c4:	88 1f       	adc	r24, r24
    54c6:	bb 1f       	adc	r27, r27
    54c8:	62 17       	cp	r22, r18
    54ca:	73 07       	cpc	r23, r19
    54cc:	84 07       	cpc	r24, r20
    54ce:	ba 07       	cpc	r27, r26
    54d0:	20 f0       	brcs	.+8      	; 0x54da <__divsf3_pse+0xaa>
    54d2:	62 1b       	sub	r22, r18
    54d4:	73 0b       	sbc	r23, r19
    54d6:	84 0b       	sbc	r24, r20
    54d8:	ba 0b       	sbc	r27, r26
    54da:	ee 1f       	adc	r30, r30
    54dc:	88 f7       	brcc	.-30     	; 0x54c0 <__divsf3_pse+0x90>
    54de:	e0 95       	com	r30
    54e0:	08 95       	ret

000054e2 <__fixsfsi>:
    54e2:	04 d0       	rcall	.+8      	; 0x54ec <__fixunssfsi>
    54e4:	68 94       	set
    54e6:	b1 11       	cpse	r27, r1
    54e8:	d9 c0       	rjmp	.+434    	; 0x569c <__fp_szero>
    54ea:	08 95       	ret

000054ec <__fixunssfsi>:
    54ec:	bc d0       	rcall	.+376    	; 0x5666 <__fp_splitA>
    54ee:	88 f0       	brcs	.+34     	; 0x5512 <__fixunssfsi+0x26>
    54f0:	9f 57       	subi	r25, 0x7F	; 127
    54f2:	90 f0       	brcs	.+36     	; 0x5518 <__fixunssfsi+0x2c>
    54f4:	b9 2f       	mov	r27, r25
    54f6:	99 27       	eor	r25, r25
    54f8:	b7 51       	subi	r27, 0x17	; 23
    54fa:	a0 f0       	brcs	.+40     	; 0x5524 <__fixunssfsi+0x38>
    54fc:	d1 f0       	breq	.+52     	; 0x5532 <__fixunssfsi+0x46>
    54fe:	66 0f       	add	r22, r22
    5500:	77 1f       	adc	r23, r23
    5502:	88 1f       	adc	r24, r24
    5504:	99 1f       	adc	r25, r25
    5506:	1a f0       	brmi	.+6      	; 0x550e <__fixunssfsi+0x22>
    5508:	ba 95       	dec	r27
    550a:	c9 f7       	brne	.-14     	; 0x54fe <__fixunssfsi+0x12>
    550c:	12 c0       	rjmp	.+36     	; 0x5532 <__fixunssfsi+0x46>
    550e:	b1 30       	cpi	r27, 0x01	; 1
    5510:	81 f0       	breq	.+32     	; 0x5532 <__fixunssfsi+0x46>
    5512:	c3 d0       	rcall	.+390    	; 0x569a <__fp_zero>
    5514:	b1 e0       	ldi	r27, 0x01	; 1
    5516:	08 95       	ret
    5518:	c0 c0       	rjmp	.+384    	; 0x569a <__fp_zero>
    551a:	67 2f       	mov	r22, r23
    551c:	78 2f       	mov	r23, r24
    551e:	88 27       	eor	r24, r24
    5520:	b8 5f       	subi	r27, 0xF8	; 248
    5522:	39 f0       	breq	.+14     	; 0x5532 <__fixunssfsi+0x46>
    5524:	b9 3f       	cpi	r27, 0xF9	; 249
    5526:	cc f3       	brlt	.-14     	; 0x551a <__fixunssfsi+0x2e>
    5528:	86 95       	lsr	r24
    552a:	77 95       	ror	r23
    552c:	67 95       	ror	r22
    552e:	b3 95       	inc	r27
    5530:	d9 f7       	brne	.-10     	; 0x5528 <__fixunssfsi+0x3c>
    5532:	3e f4       	brtc	.+14     	; 0x5542 <__fixunssfsi+0x56>
    5534:	90 95       	com	r25
    5536:	80 95       	com	r24
    5538:	70 95       	com	r23
    553a:	61 95       	neg	r22
    553c:	7f 4f       	sbci	r23, 0xFF	; 255
    553e:	8f 4f       	sbci	r24, 0xFF	; 255
    5540:	9f 4f       	sbci	r25, 0xFF	; 255
    5542:	08 95       	ret

00005544 <__floatunsisf>:
    5544:	e8 94       	clt
    5546:	09 c0       	rjmp	.+18     	; 0x555a <__floatsisf+0x12>

00005548 <__floatsisf>:
    5548:	97 fb       	bst	r25, 7
    554a:	3e f4       	brtc	.+14     	; 0x555a <__floatsisf+0x12>
    554c:	90 95       	com	r25
    554e:	80 95       	com	r24
    5550:	70 95       	com	r23
    5552:	61 95       	neg	r22
    5554:	7f 4f       	sbci	r23, 0xFF	; 255
    5556:	8f 4f       	sbci	r24, 0xFF	; 255
    5558:	9f 4f       	sbci	r25, 0xFF	; 255
    555a:	99 23       	and	r25, r25
    555c:	a9 f0       	breq	.+42     	; 0x5588 <__floatsisf+0x40>
    555e:	f9 2f       	mov	r31, r25
    5560:	96 e9       	ldi	r25, 0x96	; 150
    5562:	bb 27       	eor	r27, r27
    5564:	93 95       	inc	r25
    5566:	f6 95       	lsr	r31
    5568:	87 95       	ror	r24
    556a:	77 95       	ror	r23
    556c:	67 95       	ror	r22
    556e:	b7 95       	ror	r27
    5570:	f1 11       	cpse	r31, r1
    5572:	f8 cf       	rjmp	.-16     	; 0x5564 <__floatsisf+0x1c>
    5574:	fa f4       	brpl	.+62     	; 0x55b4 <__floatsisf+0x6c>
    5576:	bb 0f       	add	r27, r27
    5578:	11 f4       	brne	.+4      	; 0x557e <__floatsisf+0x36>
    557a:	60 ff       	sbrs	r22, 0
    557c:	1b c0       	rjmp	.+54     	; 0x55b4 <__floatsisf+0x6c>
    557e:	6f 5f       	subi	r22, 0xFF	; 255
    5580:	7f 4f       	sbci	r23, 0xFF	; 255
    5582:	8f 4f       	sbci	r24, 0xFF	; 255
    5584:	9f 4f       	sbci	r25, 0xFF	; 255
    5586:	16 c0       	rjmp	.+44     	; 0x55b4 <__floatsisf+0x6c>
    5588:	88 23       	and	r24, r24
    558a:	11 f0       	breq	.+4      	; 0x5590 <__floatsisf+0x48>
    558c:	96 e9       	ldi	r25, 0x96	; 150
    558e:	11 c0       	rjmp	.+34     	; 0x55b2 <__floatsisf+0x6a>
    5590:	77 23       	and	r23, r23
    5592:	21 f0       	breq	.+8      	; 0x559c <__floatsisf+0x54>
    5594:	9e e8       	ldi	r25, 0x8E	; 142
    5596:	87 2f       	mov	r24, r23
    5598:	76 2f       	mov	r23, r22
    559a:	05 c0       	rjmp	.+10     	; 0x55a6 <__floatsisf+0x5e>
    559c:	66 23       	and	r22, r22
    559e:	71 f0       	breq	.+28     	; 0x55bc <__floatsisf+0x74>
    55a0:	96 e8       	ldi	r25, 0x86	; 134
    55a2:	86 2f       	mov	r24, r22
    55a4:	70 e0       	ldi	r23, 0x00	; 0
    55a6:	60 e0       	ldi	r22, 0x00	; 0
    55a8:	2a f0       	brmi	.+10     	; 0x55b4 <__floatsisf+0x6c>
    55aa:	9a 95       	dec	r25
    55ac:	66 0f       	add	r22, r22
    55ae:	77 1f       	adc	r23, r23
    55b0:	88 1f       	adc	r24, r24
    55b2:	da f7       	brpl	.-10     	; 0x55aa <__floatsisf+0x62>
    55b4:	88 0f       	add	r24, r24
    55b6:	96 95       	lsr	r25
    55b8:	87 95       	ror	r24
    55ba:	97 f9       	bld	r25, 7
    55bc:	08 95       	ret

000055be <__fp_cmp>:
    55be:	99 0f       	add	r25, r25
    55c0:	00 08       	sbc	r0, r0
    55c2:	55 0f       	add	r21, r21
    55c4:	aa 0b       	sbc	r26, r26
    55c6:	e0 e8       	ldi	r30, 0x80	; 128
    55c8:	fe ef       	ldi	r31, 0xFE	; 254
    55ca:	16 16       	cp	r1, r22
    55cc:	17 06       	cpc	r1, r23
    55ce:	e8 07       	cpc	r30, r24
    55d0:	f9 07       	cpc	r31, r25
    55d2:	c0 f0       	brcs	.+48     	; 0x5604 <__fp_cmp+0x46>
    55d4:	12 16       	cp	r1, r18
    55d6:	13 06       	cpc	r1, r19
    55d8:	e4 07       	cpc	r30, r20
    55da:	f5 07       	cpc	r31, r21
    55dc:	98 f0       	brcs	.+38     	; 0x5604 <__fp_cmp+0x46>
    55de:	62 1b       	sub	r22, r18
    55e0:	73 0b       	sbc	r23, r19
    55e2:	84 0b       	sbc	r24, r20
    55e4:	95 0b       	sbc	r25, r21
    55e6:	39 f4       	brne	.+14     	; 0x55f6 <__fp_cmp+0x38>
    55e8:	0a 26       	eor	r0, r26
    55ea:	61 f0       	breq	.+24     	; 0x5604 <__fp_cmp+0x46>
    55ec:	23 2b       	or	r18, r19
    55ee:	24 2b       	or	r18, r20
    55f0:	25 2b       	or	r18, r21
    55f2:	21 f4       	brne	.+8      	; 0x55fc <__fp_cmp+0x3e>
    55f4:	08 95       	ret
    55f6:	0a 26       	eor	r0, r26
    55f8:	09 f4       	brne	.+2      	; 0x55fc <__fp_cmp+0x3e>
    55fa:	a1 40       	sbci	r26, 0x01	; 1
    55fc:	a6 95       	lsr	r26
    55fe:	8f ef       	ldi	r24, 0xFF	; 255
    5600:	81 1d       	adc	r24, r1
    5602:	81 1d       	adc	r24, r1
    5604:	08 95       	ret

00005606 <__fp_inf>:
    5606:	97 f9       	bld	r25, 7
    5608:	9f 67       	ori	r25, 0x7F	; 127
    560a:	80 e8       	ldi	r24, 0x80	; 128
    560c:	70 e0       	ldi	r23, 0x00	; 0
    560e:	60 e0       	ldi	r22, 0x00	; 0
    5610:	08 95       	ret

00005612 <__fp_nan>:
    5612:	9f ef       	ldi	r25, 0xFF	; 255
    5614:	80 ec       	ldi	r24, 0xC0	; 192
    5616:	08 95       	ret

00005618 <__fp_pscA>:
    5618:	00 24       	eor	r0, r0
    561a:	0a 94       	dec	r0
    561c:	16 16       	cp	r1, r22
    561e:	17 06       	cpc	r1, r23
    5620:	18 06       	cpc	r1, r24
    5622:	09 06       	cpc	r0, r25
    5624:	08 95       	ret

00005626 <__fp_pscB>:
    5626:	00 24       	eor	r0, r0
    5628:	0a 94       	dec	r0
    562a:	12 16       	cp	r1, r18
    562c:	13 06       	cpc	r1, r19
    562e:	14 06       	cpc	r1, r20
    5630:	05 06       	cpc	r0, r21
    5632:	08 95       	ret

00005634 <__fp_round>:
    5634:	09 2e       	mov	r0, r25
    5636:	03 94       	inc	r0
    5638:	00 0c       	add	r0, r0
    563a:	11 f4       	brne	.+4      	; 0x5640 <__fp_round+0xc>
    563c:	88 23       	and	r24, r24
    563e:	52 f0       	brmi	.+20     	; 0x5654 <__fp_round+0x20>
    5640:	bb 0f       	add	r27, r27
    5642:	40 f4       	brcc	.+16     	; 0x5654 <__fp_round+0x20>
    5644:	bf 2b       	or	r27, r31
    5646:	11 f4       	brne	.+4      	; 0x564c <__fp_round+0x18>
    5648:	60 ff       	sbrs	r22, 0
    564a:	04 c0       	rjmp	.+8      	; 0x5654 <__fp_round+0x20>
    564c:	6f 5f       	subi	r22, 0xFF	; 255
    564e:	7f 4f       	sbci	r23, 0xFF	; 255
    5650:	8f 4f       	sbci	r24, 0xFF	; 255
    5652:	9f 4f       	sbci	r25, 0xFF	; 255
    5654:	08 95       	ret

00005656 <__fp_split3>:
    5656:	57 fd       	sbrc	r21, 7
    5658:	90 58       	subi	r25, 0x80	; 128
    565a:	44 0f       	add	r20, r20
    565c:	55 1f       	adc	r21, r21
    565e:	59 f0       	breq	.+22     	; 0x5676 <__fp_splitA+0x10>
    5660:	5f 3f       	cpi	r21, 0xFF	; 255
    5662:	71 f0       	breq	.+28     	; 0x5680 <__fp_splitA+0x1a>
    5664:	47 95       	ror	r20

00005666 <__fp_splitA>:
    5666:	88 0f       	add	r24, r24
    5668:	97 fb       	bst	r25, 7
    566a:	99 1f       	adc	r25, r25
    566c:	61 f0       	breq	.+24     	; 0x5686 <__fp_splitA+0x20>
    566e:	9f 3f       	cpi	r25, 0xFF	; 255
    5670:	79 f0       	breq	.+30     	; 0x5690 <__fp_splitA+0x2a>
    5672:	87 95       	ror	r24
    5674:	08 95       	ret
    5676:	12 16       	cp	r1, r18
    5678:	13 06       	cpc	r1, r19
    567a:	14 06       	cpc	r1, r20
    567c:	55 1f       	adc	r21, r21
    567e:	f2 cf       	rjmp	.-28     	; 0x5664 <__fp_split3+0xe>
    5680:	46 95       	lsr	r20
    5682:	f1 df       	rcall	.-30     	; 0x5666 <__fp_splitA>
    5684:	08 c0       	rjmp	.+16     	; 0x5696 <__fp_splitA+0x30>
    5686:	16 16       	cp	r1, r22
    5688:	17 06       	cpc	r1, r23
    568a:	18 06       	cpc	r1, r24
    568c:	99 1f       	adc	r25, r25
    568e:	f1 cf       	rjmp	.-30     	; 0x5672 <__fp_splitA+0xc>
    5690:	86 95       	lsr	r24
    5692:	71 05       	cpc	r23, r1
    5694:	61 05       	cpc	r22, r1
    5696:	08 94       	sec
    5698:	08 95       	ret

0000569a <__fp_zero>:
    569a:	e8 94       	clt

0000569c <__fp_szero>:
    569c:	bb 27       	eor	r27, r27
    569e:	66 27       	eor	r22, r22
    56a0:	77 27       	eor	r23, r23
    56a2:	cb 01       	movw	r24, r22
    56a4:	97 f9       	bld	r25, 7
    56a6:	08 95       	ret

000056a8 <__gesf2>:
    56a8:	8a df       	rcall	.-236    	; 0x55be <__fp_cmp>
    56aa:	08 f4       	brcc	.+2      	; 0x56ae <__gesf2+0x6>
    56ac:	8f ef       	ldi	r24, 0xFF	; 255
    56ae:	08 95       	ret

000056b0 <lrint>:
    56b0:	da df       	rcall	.-76     	; 0x5666 <__fp_splitA>
    56b2:	a8 f1       	brcs	.+106    	; 0x571e <lrint+0x6e>
    56b4:	9e 57       	subi	r25, 0x7E	; 126
    56b6:	a8 f1       	brcs	.+106    	; 0x5722 <lrint+0x72>
    56b8:	98 51       	subi	r25, 0x18	; 24
    56ba:	60 f0       	brcs	.+24     	; 0x56d4 <lrint+0x24>
    56bc:	39 f1       	breq	.+78     	; 0x570c <lrint+0x5c>
    56be:	98 30       	cpi	r25, 0x08	; 8
    56c0:	70 f5       	brcc	.+92     	; 0x571e <lrint+0x6e>
    56c2:	09 2e       	mov	r0, r25
    56c4:	99 27       	eor	r25, r25
    56c6:	66 0f       	add	r22, r22
    56c8:	77 1f       	adc	r23, r23
    56ca:	88 1f       	adc	r24, r24
    56cc:	99 1f       	adc	r25, r25
    56ce:	0a 94       	dec	r0
    56d0:	d1 f7       	brne	.-12     	; 0x56c6 <lrint+0x16>
    56d2:	1c c0       	rjmp	.+56     	; 0x570c <lrint+0x5c>
    56d4:	bb 27       	eor	r27, r27
    56d6:	99 3f       	cpi	r25, 0xF9	; 249
    56d8:	4c f4       	brge	.+18     	; 0x56ec <lrint+0x3c>
    56da:	b1 11       	cpse	r27, r1
    56dc:	b1 e0       	ldi	r27, 0x01	; 1
    56de:	b6 2b       	or	r27, r22
    56e0:	67 2f       	mov	r22, r23
    56e2:	78 2f       	mov	r23, r24
    56e4:	88 27       	eor	r24, r24
    56e6:	98 5f       	subi	r25, 0xF8	; 248
    56e8:	b1 f7       	brne	.-20     	; 0x56d6 <lrint+0x26>
    56ea:	08 c0       	rjmp	.+16     	; 0x56fc <lrint+0x4c>
    56ec:	86 95       	lsr	r24
    56ee:	77 95       	ror	r23
    56f0:	67 95       	ror	r22
    56f2:	b7 95       	ror	r27
    56f4:	08 f4       	brcc	.+2      	; 0x56f8 <lrint+0x48>
    56f6:	b1 60       	ori	r27, 0x01	; 1
    56f8:	93 95       	inc	r25
    56fa:	c1 f7       	brne	.-16     	; 0x56ec <lrint+0x3c>
    56fc:	bb 0f       	add	r27, r27
    56fe:	30 f4       	brcc	.+12     	; 0x570c <lrint+0x5c>
    5700:	11 f4       	brne	.+4      	; 0x5706 <lrint+0x56>
    5702:	60 ff       	sbrs	r22, 0
    5704:	03 c0       	rjmp	.+6      	; 0x570c <lrint+0x5c>
    5706:	6f 5f       	subi	r22, 0xFF	; 255
    5708:	7f 4f       	sbci	r23, 0xFF	; 255
    570a:	8f 4f       	sbci	r24, 0xFF	; 255
    570c:	3e f4       	brtc	.+14     	; 0x571c <lrint+0x6c>
    570e:	90 95       	com	r25
    5710:	80 95       	com	r24
    5712:	70 95       	com	r23
    5714:	61 95       	neg	r22
    5716:	7f 4f       	sbci	r23, 0xFF	; 255
    5718:	8f 4f       	sbci	r24, 0xFF	; 255
    571a:	9f 4f       	sbci	r25, 0xFF	; 255
    571c:	08 95       	ret
    571e:	68 94       	set
    5720:	bd cf       	rjmp	.-134    	; 0x569c <__fp_szero>
    5722:	bb cf       	rjmp	.-138    	; 0x569a <__fp_zero>

00005724 <__mulsf3>:
    5724:	0b d0       	rcall	.+22     	; 0x573c <__mulsf3x>
    5726:	86 cf       	rjmp	.-244    	; 0x5634 <__fp_round>
    5728:	77 df       	rcall	.-274    	; 0x5618 <__fp_pscA>
    572a:	28 f0       	brcs	.+10     	; 0x5736 <__mulsf3+0x12>
    572c:	7c df       	rcall	.-264    	; 0x5626 <__fp_pscB>
    572e:	18 f0       	brcs	.+6      	; 0x5736 <__mulsf3+0x12>
    5730:	95 23       	and	r25, r21
    5732:	09 f0       	breq	.+2      	; 0x5736 <__mulsf3+0x12>
    5734:	68 cf       	rjmp	.-304    	; 0x5606 <__fp_inf>
    5736:	6d cf       	rjmp	.-294    	; 0x5612 <__fp_nan>
    5738:	11 24       	eor	r1, r1
    573a:	b0 cf       	rjmp	.-160    	; 0x569c <__fp_szero>

0000573c <__mulsf3x>:
    573c:	8c df       	rcall	.-232    	; 0x5656 <__fp_split3>
    573e:	a0 f3       	brcs	.-24     	; 0x5728 <__mulsf3+0x4>

00005740 <__mulsf3_pse>:
    5740:	95 9f       	mul	r25, r21
    5742:	d1 f3       	breq	.-12     	; 0x5738 <__mulsf3+0x14>
    5744:	95 0f       	add	r25, r21
    5746:	50 e0       	ldi	r21, 0x00	; 0
    5748:	55 1f       	adc	r21, r21
    574a:	62 9f       	mul	r22, r18
    574c:	f0 01       	movw	r30, r0
    574e:	72 9f       	mul	r23, r18
    5750:	bb 27       	eor	r27, r27
    5752:	f0 0d       	add	r31, r0
    5754:	b1 1d       	adc	r27, r1
    5756:	63 9f       	mul	r22, r19
    5758:	aa 27       	eor	r26, r26
    575a:	f0 0d       	add	r31, r0
    575c:	b1 1d       	adc	r27, r1
    575e:	aa 1f       	adc	r26, r26
    5760:	64 9f       	mul	r22, r20
    5762:	66 27       	eor	r22, r22
    5764:	b0 0d       	add	r27, r0
    5766:	a1 1d       	adc	r26, r1
    5768:	66 1f       	adc	r22, r22
    576a:	82 9f       	mul	r24, r18
    576c:	22 27       	eor	r18, r18
    576e:	b0 0d       	add	r27, r0
    5770:	a1 1d       	adc	r26, r1
    5772:	62 1f       	adc	r22, r18
    5774:	73 9f       	mul	r23, r19
    5776:	b0 0d       	add	r27, r0
    5778:	a1 1d       	adc	r26, r1
    577a:	62 1f       	adc	r22, r18
    577c:	83 9f       	mul	r24, r19
    577e:	a0 0d       	add	r26, r0
    5780:	61 1d       	adc	r22, r1
    5782:	22 1f       	adc	r18, r18
    5784:	74 9f       	mul	r23, r20
    5786:	33 27       	eor	r19, r19
    5788:	a0 0d       	add	r26, r0
    578a:	61 1d       	adc	r22, r1
    578c:	23 1f       	adc	r18, r19
    578e:	84 9f       	mul	r24, r20
    5790:	60 0d       	add	r22, r0
    5792:	21 1d       	adc	r18, r1
    5794:	82 2f       	mov	r24, r18
    5796:	76 2f       	mov	r23, r22
    5798:	6a 2f       	mov	r22, r26
    579a:	11 24       	eor	r1, r1
    579c:	9f 57       	subi	r25, 0x7F	; 127
    579e:	50 40       	sbci	r21, 0x00	; 0
    57a0:	8a f0       	brmi	.+34     	; 0x57c4 <__mulsf3_pse+0x84>
    57a2:	e1 f0       	breq	.+56     	; 0x57dc <__mulsf3_pse+0x9c>
    57a4:	88 23       	and	r24, r24
    57a6:	4a f0       	brmi	.+18     	; 0x57ba <__mulsf3_pse+0x7a>
    57a8:	ee 0f       	add	r30, r30
    57aa:	ff 1f       	adc	r31, r31
    57ac:	bb 1f       	adc	r27, r27
    57ae:	66 1f       	adc	r22, r22
    57b0:	77 1f       	adc	r23, r23
    57b2:	88 1f       	adc	r24, r24
    57b4:	91 50       	subi	r25, 0x01	; 1
    57b6:	50 40       	sbci	r21, 0x00	; 0
    57b8:	a9 f7       	brne	.-22     	; 0x57a4 <__mulsf3_pse+0x64>
    57ba:	9e 3f       	cpi	r25, 0xFE	; 254
    57bc:	51 05       	cpc	r21, r1
    57be:	70 f0       	brcs	.+28     	; 0x57dc <__mulsf3_pse+0x9c>
    57c0:	22 cf       	rjmp	.-444    	; 0x5606 <__fp_inf>
    57c2:	6c cf       	rjmp	.-296    	; 0x569c <__fp_szero>
    57c4:	5f 3f       	cpi	r21, 0xFF	; 255
    57c6:	ec f3       	brlt	.-6      	; 0x57c2 <__mulsf3_pse+0x82>
    57c8:	98 3e       	cpi	r25, 0xE8	; 232
    57ca:	dc f3       	brlt	.-10     	; 0x57c2 <__mulsf3_pse+0x82>
    57cc:	86 95       	lsr	r24
    57ce:	77 95       	ror	r23
    57d0:	67 95       	ror	r22
    57d2:	b7 95       	ror	r27
    57d4:	f7 95       	ror	r31
    57d6:	e7 95       	ror	r30
    57d8:	9f 5f       	subi	r25, 0xFF	; 255
    57da:	c1 f7       	brne	.-16     	; 0x57cc <__mulsf3_pse+0x8c>
    57dc:	fe 2b       	or	r31, r30
    57de:	88 0f       	add	r24, r24
    57e0:	91 1d       	adc	r25, r1
    57e2:	96 95       	lsr	r25
    57e4:	87 95       	ror	r24
    57e6:	97 f9       	bld	r25, 7
    57e8:	08 95       	ret

000057ea <pow>:
    57ea:	fa 01       	movw	r30, r20
    57ec:	ee 0f       	add	r30, r30
    57ee:	ff 1f       	adc	r31, r31
    57f0:	30 96       	adiw	r30, 0x00	; 0
    57f2:	21 05       	cpc	r18, r1
    57f4:	31 05       	cpc	r19, r1
    57f6:	99 f1       	breq	.+102    	; 0x585e <pow+0x74>
    57f8:	61 15       	cp	r22, r1
    57fa:	71 05       	cpc	r23, r1
    57fc:	61 f4       	brne	.+24     	; 0x5816 <pow+0x2c>
    57fe:	80 38       	cpi	r24, 0x80	; 128
    5800:	bf e3       	ldi	r27, 0x3F	; 63
    5802:	9b 07       	cpc	r25, r27
    5804:	49 f1       	breq	.+82     	; 0x5858 <pow+0x6e>
    5806:	68 94       	set
    5808:	90 38       	cpi	r25, 0x80	; 128
    580a:	81 05       	cpc	r24, r1
    580c:	61 f0       	breq	.+24     	; 0x5826 <pow+0x3c>
    580e:	80 38       	cpi	r24, 0x80	; 128
    5810:	bf ef       	ldi	r27, 0xFF	; 255
    5812:	9b 07       	cpc	r25, r27
    5814:	41 f0       	breq	.+16     	; 0x5826 <pow+0x3c>
    5816:	99 23       	and	r25, r25
    5818:	42 f5       	brpl	.+80     	; 0x586a <pow+0x80>
    581a:	ff 3f       	cpi	r31, 0xFF	; 255
    581c:	e1 05       	cpc	r30, r1
    581e:	31 05       	cpc	r19, r1
    5820:	21 05       	cpc	r18, r1
    5822:	11 f1       	breq	.+68     	; 0x5868 <pow+0x7e>
    5824:	e8 94       	clt
    5826:	08 94       	sec
    5828:	e7 95       	ror	r30
    582a:	d9 01       	movw	r26, r18
    582c:	aa 23       	and	r26, r26
    582e:	29 f4       	brne	.+10     	; 0x583a <pow+0x50>
    5830:	ab 2f       	mov	r26, r27
    5832:	be 2f       	mov	r27, r30
    5834:	f8 5f       	subi	r31, 0xF8	; 248
    5836:	d0 f3       	brcs	.-12     	; 0x582c <pow+0x42>
    5838:	10 c0       	rjmp	.+32     	; 0x585a <pow+0x70>
    583a:	ff 5f       	subi	r31, 0xFF	; 255
    583c:	70 f4       	brcc	.+28     	; 0x585a <pow+0x70>
    583e:	a6 95       	lsr	r26
    5840:	e0 f7       	brcc	.-8      	; 0x583a <pow+0x50>
    5842:	f7 39       	cpi	r31, 0x97	; 151
    5844:	50 f0       	brcs	.+20     	; 0x585a <pow+0x70>
    5846:	19 f0       	breq	.+6      	; 0x584e <pow+0x64>
    5848:	ff 3a       	cpi	r31, 0xAF	; 175
    584a:	38 f4       	brcc	.+14     	; 0x585a <pow+0x70>
    584c:	9f 77       	andi	r25, 0x7F	; 127
    584e:	9f 93       	push	r25
    5850:	0c d0       	rcall	.+24     	; 0x586a <pow+0x80>
    5852:	0f 90       	pop	r0
    5854:	07 fc       	sbrc	r0, 7
    5856:	90 58       	subi	r25, 0x80	; 128
    5858:	08 95       	ret
    585a:	3e f0       	brts	.+14     	; 0x586a <pow+0x80>
    585c:	da ce       	rjmp	.-588    	; 0x5612 <__fp_nan>
    585e:	60 e0       	ldi	r22, 0x00	; 0
    5860:	70 e0       	ldi	r23, 0x00	; 0
    5862:	80 e8       	ldi	r24, 0x80	; 128
    5864:	9f e3       	ldi	r25, 0x3F	; 63
    5866:	08 95       	ret
    5868:	4f e7       	ldi	r20, 0x7F	; 127
    586a:	9f 77       	andi	r25, 0x7F	; 127
    586c:	5f 93       	push	r21
    586e:	4f 93       	push	r20
    5870:	3f 93       	push	r19
    5872:	2f 93       	push	r18
    5874:	9e d0       	rcall	.+316    	; 0x59b2 <log>
    5876:	2f 91       	pop	r18
    5878:	3f 91       	pop	r19
    587a:	4f 91       	pop	r20
    587c:	5f 91       	pop	r21
    587e:	52 df       	rcall	.-348    	; 0x5724 <__mulsf3>
    5880:	05 c0       	rjmp	.+10     	; 0x588c <exp>
    5882:	19 f4       	brne	.+6      	; 0x588a <pow+0xa0>
    5884:	0e f0       	brts	.+2      	; 0x5888 <pow+0x9e>
    5886:	bf ce       	rjmp	.-642    	; 0x5606 <__fp_inf>
    5888:	08 cf       	rjmp	.-496    	; 0x569a <__fp_zero>
    588a:	c3 ce       	rjmp	.-634    	; 0x5612 <__fp_nan>

0000588c <exp>:
    588c:	ec de       	rcall	.-552    	; 0x5666 <__fp_splitA>
    588e:	c8 f3       	brcs	.-14     	; 0x5882 <pow+0x98>
    5890:	96 38       	cpi	r25, 0x86	; 134
    5892:	c0 f7       	brcc	.-16     	; 0x5884 <pow+0x9a>
    5894:	07 f8       	bld	r0, 7
    5896:	0f 92       	push	r0
    5898:	e8 94       	clt
    589a:	2b e3       	ldi	r18, 0x3B	; 59
    589c:	3a ea       	ldi	r19, 0xAA	; 170
    589e:	48 eb       	ldi	r20, 0xB8	; 184
    58a0:	5f e7       	ldi	r21, 0x7F	; 127
    58a2:	4e df       	rcall	.-356    	; 0x5740 <__mulsf3_pse>
    58a4:	0f 92       	push	r0
    58a6:	0f 92       	push	r0
    58a8:	0f 92       	push	r0
    58aa:	4d b7       	in	r20, 0x3d	; 61
    58ac:	5e b7       	in	r21, 0x3e	; 62
    58ae:	0f 92       	push	r0
    58b0:	c0 d0       	rcall	.+384    	; 0x5a32 <modf>
    58b2:	e8 ec       	ldi	r30, 0xC8	; 200
    58b4:	f0 e0       	ldi	r31, 0x00	; 0
    58b6:	16 d0       	rcall	.+44     	; 0x58e4 <__fp_powser>
    58b8:	4f 91       	pop	r20
    58ba:	5f 91       	pop	r21
    58bc:	ef 91       	pop	r30
    58be:	ff 91       	pop	r31
    58c0:	e5 95       	asr	r30
    58c2:	ee 1f       	adc	r30, r30
    58c4:	ff 1f       	adc	r31, r31
    58c6:	49 f0       	breq	.+18     	; 0x58da <exp+0x4e>
    58c8:	fe 57       	subi	r31, 0x7E	; 126
    58ca:	e0 68       	ori	r30, 0x80	; 128
    58cc:	44 27       	eor	r20, r20
    58ce:	ee 0f       	add	r30, r30
    58d0:	44 1f       	adc	r20, r20
    58d2:	fa 95       	dec	r31
    58d4:	e1 f7       	brne	.-8      	; 0x58ce <exp+0x42>
    58d6:	41 95       	neg	r20
    58d8:	55 0b       	sbc	r21, r21
    58da:	32 d0       	rcall	.+100    	; 0x5940 <ldexp>
    58dc:	0f 90       	pop	r0
    58de:	07 fe       	sbrs	r0, 7
    58e0:	26 c0       	rjmp	.+76     	; 0x592e <inverse>
    58e2:	08 95       	ret

000058e4 <__fp_powser>:
    58e4:	df 93       	push	r29
    58e6:	cf 93       	push	r28
    58e8:	1f 93       	push	r17
    58ea:	0f 93       	push	r16
    58ec:	ff 92       	push	r15
    58ee:	ef 92       	push	r14
    58f0:	df 92       	push	r13
    58f2:	7b 01       	movw	r14, r22
    58f4:	8c 01       	movw	r16, r24
    58f6:	68 94       	set
    58f8:	05 c0       	rjmp	.+10     	; 0x5904 <__fp_powser+0x20>
    58fa:	da 2e       	mov	r13, r26
    58fc:	ef 01       	movw	r28, r30
    58fe:	1e df       	rcall	.-452    	; 0x573c <__mulsf3x>
    5900:	fe 01       	movw	r30, r28
    5902:	e8 94       	clt
    5904:	a5 91       	lpm	r26, Z+
    5906:	25 91       	lpm	r18, Z+
    5908:	35 91       	lpm	r19, Z+
    590a:	45 91       	lpm	r20, Z+
    590c:	55 91       	lpm	r21, Z+
    590e:	ae f3       	brts	.-22     	; 0x58fa <__fp_powser+0x16>
    5910:	ef 01       	movw	r28, r30
    5912:	28 dd       	rcall	.-1456   	; 0x5364 <__addsf3x>
    5914:	fe 01       	movw	r30, r28
    5916:	97 01       	movw	r18, r14
    5918:	a8 01       	movw	r20, r16
    591a:	da 94       	dec	r13
    591c:	79 f7       	brne	.-34     	; 0x58fc <__fp_powser+0x18>
    591e:	df 90       	pop	r13
    5920:	ef 90       	pop	r14
    5922:	ff 90       	pop	r15
    5924:	0f 91       	pop	r16
    5926:	1f 91       	pop	r17
    5928:	cf 91       	pop	r28
    592a:	df 91       	pop	r29
    592c:	08 95       	ret

0000592e <inverse>:
    592e:	9b 01       	movw	r18, r22
    5930:	ac 01       	movw	r20, r24
    5932:	60 e0       	ldi	r22, 0x00	; 0
    5934:	70 e0       	ldi	r23, 0x00	; 0
    5936:	80 e8       	ldi	r24, 0x80	; 128
    5938:	9f e3       	ldi	r25, 0x3F	; 63
    593a:	6b cd       	rjmp	.-1322   	; 0x5412 <__divsf3>
    593c:	64 ce       	rjmp	.-824    	; 0x5606 <__fp_inf>
    593e:	ac c0       	rjmp	.+344    	; 0x5a98 <__fp_mpack>

00005940 <ldexp>:
    5940:	92 de       	rcall	.-732    	; 0x5666 <__fp_splitA>
    5942:	e8 f3       	brcs	.-6      	; 0x593e <inverse+0x10>
    5944:	99 23       	and	r25, r25
    5946:	d9 f3       	breq	.-10     	; 0x593e <inverse+0x10>
    5948:	94 0f       	add	r25, r20
    594a:	51 1d       	adc	r21, r1
    594c:	bb f3       	brvs	.-18     	; 0x593c <inverse+0xe>
    594e:	91 50       	subi	r25, 0x01	; 1
    5950:	50 40       	sbci	r21, 0x00	; 0
    5952:	94 f0       	brlt	.+36     	; 0x5978 <ldexp+0x38>
    5954:	59 f0       	breq	.+22     	; 0x596c <ldexp+0x2c>
    5956:	88 23       	and	r24, r24
    5958:	32 f0       	brmi	.+12     	; 0x5966 <ldexp+0x26>
    595a:	66 0f       	add	r22, r22
    595c:	77 1f       	adc	r23, r23
    595e:	88 1f       	adc	r24, r24
    5960:	91 50       	subi	r25, 0x01	; 1
    5962:	50 40       	sbci	r21, 0x00	; 0
    5964:	c1 f7       	brne	.-16     	; 0x5956 <ldexp+0x16>
    5966:	9e 3f       	cpi	r25, 0xFE	; 254
    5968:	51 05       	cpc	r21, r1
    596a:	44 f7       	brge	.-48     	; 0x593c <inverse+0xe>
    596c:	88 0f       	add	r24, r24
    596e:	91 1d       	adc	r25, r1
    5970:	96 95       	lsr	r25
    5972:	87 95       	ror	r24
    5974:	97 f9       	bld	r25, 7
    5976:	08 95       	ret
    5978:	5f 3f       	cpi	r21, 0xFF	; 255
    597a:	ac f0       	brlt	.+42     	; 0x59a6 <ldexp+0x66>
    597c:	98 3e       	cpi	r25, 0xE8	; 232
    597e:	9c f0       	brlt	.+38     	; 0x59a6 <ldexp+0x66>
    5980:	bb 27       	eor	r27, r27
    5982:	86 95       	lsr	r24
    5984:	77 95       	ror	r23
    5986:	67 95       	ror	r22
    5988:	b7 95       	ror	r27
    598a:	08 f4       	brcc	.+2      	; 0x598e <ldexp+0x4e>
    598c:	b1 60       	ori	r27, 0x01	; 1
    598e:	93 95       	inc	r25
    5990:	c1 f7       	brne	.-16     	; 0x5982 <ldexp+0x42>
    5992:	bb 0f       	add	r27, r27
    5994:	58 f7       	brcc	.-42     	; 0x596c <ldexp+0x2c>
    5996:	11 f4       	brne	.+4      	; 0x599c <ldexp+0x5c>
    5998:	60 ff       	sbrs	r22, 0
    599a:	e8 cf       	rjmp	.-48     	; 0x596c <ldexp+0x2c>
    599c:	6f 5f       	subi	r22, 0xFF	; 255
    599e:	7f 4f       	sbci	r23, 0xFF	; 255
    59a0:	8f 4f       	sbci	r24, 0xFF	; 255
    59a2:	9f 4f       	sbci	r25, 0xFF	; 255
    59a4:	e3 cf       	rjmp	.-58     	; 0x596c <ldexp+0x2c>
    59a6:	7a ce       	rjmp	.-780    	; 0x569c <__fp_szero>
    59a8:	0e f0       	brts	.+2      	; 0x59ac <ldexp+0x6c>
    59aa:	76 c0       	rjmp	.+236    	; 0x5a98 <__fp_mpack>
    59ac:	32 ce       	rjmp	.-924    	; 0x5612 <__fp_nan>
    59ae:	68 94       	set
    59b0:	2a ce       	rjmp	.-940    	; 0x5606 <__fp_inf>

000059b2 <log>:
    59b2:	59 de       	rcall	.-846    	; 0x5666 <__fp_splitA>
    59b4:	c8 f3       	brcs	.-14     	; 0x59a8 <ldexp+0x68>
    59b6:	99 23       	and	r25, r25
    59b8:	d1 f3       	breq	.-12     	; 0x59ae <ldexp+0x6e>
    59ba:	c6 f3       	brts	.-16     	; 0x59ac <ldexp+0x6c>
    59bc:	df 93       	push	r29
    59be:	cf 93       	push	r28
    59c0:	1f 93       	push	r17
    59c2:	0f 93       	push	r16
    59c4:	ff 92       	push	r15
    59c6:	c9 2f       	mov	r28, r25
    59c8:	dd 27       	eor	r29, r29
    59ca:	88 23       	and	r24, r24
    59cc:	2a f0       	brmi	.+10     	; 0x59d8 <log+0x26>
    59ce:	21 97       	sbiw	r28, 0x01	; 1
    59d0:	66 0f       	add	r22, r22
    59d2:	77 1f       	adc	r23, r23
    59d4:	88 1f       	adc	r24, r24
    59d6:	da f7       	brpl	.-10     	; 0x59ce <log+0x1c>
    59d8:	20 e0       	ldi	r18, 0x00	; 0
    59da:	30 e0       	ldi	r19, 0x00	; 0
    59dc:	40 e8       	ldi	r20, 0x80	; 128
    59de:	5f eb       	ldi	r21, 0xBF	; 191
    59e0:	9f e3       	ldi	r25, 0x3F	; 63
    59e2:	88 39       	cpi	r24, 0x98	; 152
    59e4:	20 f0       	brcs	.+8      	; 0x59ee <log+0x3c>
    59e6:	80 3e       	cpi	r24, 0xE0	; 224
    59e8:	30 f0       	brcs	.+12     	; 0x59f6 <log+0x44>
    59ea:	21 96       	adiw	r28, 0x01	; 1
    59ec:	8f 77       	andi	r24, 0x7F	; 127
    59ee:	a9 dc       	rcall	.-1710   	; 0x5342 <__addsf3>
    59f0:	e0 ef       	ldi	r30, 0xF0	; 240
    59f2:	f0 e0       	ldi	r31, 0x00	; 0
    59f4:	03 c0       	rjmp	.+6      	; 0x59fc <log+0x4a>
    59f6:	a5 dc       	rcall	.-1718   	; 0x5342 <__addsf3>
    59f8:	ed e1       	ldi	r30, 0x1D	; 29
    59fa:	f1 e0       	ldi	r31, 0x01	; 1
    59fc:	73 df       	rcall	.-282    	; 0x58e4 <__fp_powser>
    59fe:	8b 01       	movw	r16, r22
    5a00:	be 01       	movw	r22, r28
    5a02:	ec 01       	movw	r28, r24
    5a04:	fb 2e       	mov	r15, r27
    5a06:	6f 57       	subi	r22, 0x7F	; 127
    5a08:	71 09       	sbc	r23, r1
    5a0a:	75 95       	asr	r23
    5a0c:	77 1f       	adc	r23, r23
    5a0e:	88 0b       	sbc	r24, r24
    5a10:	99 0b       	sbc	r25, r25
    5a12:	9a dd       	rcall	.-1228   	; 0x5548 <__floatsisf>
    5a14:	28 e1       	ldi	r18, 0x18	; 24
    5a16:	32 e7       	ldi	r19, 0x72	; 114
    5a18:	41 e3       	ldi	r20, 0x31	; 49
    5a1a:	5f e3       	ldi	r21, 0x3F	; 63
    5a1c:	8f de       	rcall	.-738    	; 0x573c <__mulsf3x>
    5a1e:	af 2d       	mov	r26, r15
    5a20:	98 01       	movw	r18, r16
    5a22:	ae 01       	movw	r20, r28
    5a24:	ff 90       	pop	r15
    5a26:	0f 91       	pop	r16
    5a28:	1f 91       	pop	r17
    5a2a:	cf 91       	pop	r28
    5a2c:	df 91       	pop	r29
    5a2e:	9a dc       	rcall	.-1740   	; 0x5364 <__addsf3x>
    5a30:	01 ce       	rjmp	.-1022   	; 0x5634 <__fp_round>

00005a32 <modf>:
    5a32:	fa 01       	movw	r30, r20
    5a34:	dc 01       	movw	r26, r24
    5a36:	aa 0f       	add	r26, r26
    5a38:	bb 1f       	adc	r27, r27
    5a3a:	9b 01       	movw	r18, r22
    5a3c:	ac 01       	movw	r20, r24
    5a3e:	bf 57       	subi	r27, 0x7F	; 127
    5a40:	28 f4       	brcc	.+10     	; 0x5a4c <modf+0x1a>
    5a42:	22 27       	eor	r18, r18
    5a44:	33 27       	eor	r19, r19
    5a46:	44 27       	eor	r20, r20
    5a48:	50 78       	andi	r21, 0x80	; 128
    5a4a:	1f c0       	rjmp	.+62     	; 0x5a8a <modf+0x58>
    5a4c:	b7 51       	subi	r27, 0x17	; 23
    5a4e:	88 f4       	brcc	.+34     	; 0x5a72 <modf+0x40>
    5a50:	ab 2f       	mov	r26, r27
    5a52:	00 24       	eor	r0, r0
    5a54:	46 95       	lsr	r20
    5a56:	37 95       	ror	r19
    5a58:	27 95       	ror	r18
    5a5a:	01 1c       	adc	r0, r1
    5a5c:	a3 95       	inc	r26
    5a5e:	d2 f3       	brmi	.-12     	; 0x5a54 <modf+0x22>
    5a60:	00 20       	and	r0, r0
    5a62:	69 f0       	breq	.+26     	; 0x5a7e <modf+0x4c>
    5a64:	22 0f       	add	r18, r18
    5a66:	33 1f       	adc	r19, r19
    5a68:	44 1f       	adc	r20, r20
    5a6a:	b3 95       	inc	r27
    5a6c:	da f3       	brmi	.-10     	; 0x5a64 <modf+0x32>
    5a6e:	0d d0       	rcall	.+26     	; 0x5a8a <modf+0x58>
    5a70:	67 cc       	rjmp	.-1842   	; 0x5340 <__subsf3>
    5a72:	61 30       	cpi	r22, 0x01	; 1
    5a74:	71 05       	cpc	r23, r1
    5a76:	a0 e8       	ldi	r26, 0x80	; 128
    5a78:	8a 07       	cpc	r24, r26
    5a7a:	b9 46       	sbci	r27, 0x69	; 105
    5a7c:	30 f4       	brcc	.+12     	; 0x5a8a <modf+0x58>
    5a7e:	9b 01       	movw	r18, r22
    5a80:	ac 01       	movw	r20, r24
    5a82:	66 27       	eor	r22, r22
    5a84:	77 27       	eor	r23, r23
    5a86:	88 27       	eor	r24, r24
    5a88:	90 78       	andi	r25, 0x80	; 128
    5a8a:	30 96       	adiw	r30, 0x00	; 0
    5a8c:	21 f0       	breq	.+8      	; 0x5a96 <modf+0x64>
    5a8e:	20 83       	st	Z, r18
    5a90:	31 83       	std	Z+1, r19	; 0x01
    5a92:	42 83       	std	Z+2, r20	; 0x02
    5a94:	53 83       	std	Z+3, r21	; 0x03
    5a96:	08 95       	ret

00005a98 <__fp_mpack>:
    5a98:	9f 3f       	cpi	r25, 0xFF	; 255
    5a9a:	31 f0       	breq	.+12     	; 0x5aa8 <__fp_mpack_finite+0xc>

00005a9c <__fp_mpack_finite>:
    5a9c:	91 50       	subi	r25, 0x01	; 1
    5a9e:	20 f4       	brcc	.+8      	; 0x5aa8 <__fp_mpack_finite+0xc>
    5aa0:	87 95       	ror	r24
    5aa2:	77 95       	ror	r23
    5aa4:	67 95       	ror	r22
    5aa6:	b7 95       	ror	r27
    5aa8:	88 0f       	add	r24, r24
    5aaa:	91 1d       	adc	r25, r1
    5aac:	96 95       	lsr	r25
    5aae:	87 95       	ror	r24
    5ab0:	97 f9       	bld	r25, 7
    5ab2:	08 95       	ret

00005ab4 <vfprintf>:
    5ab4:	a1 e1       	ldi	r26, 0x11	; 17
    5ab6:	b0 e0       	ldi	r27, 0x00	; 0
    5ab8:	ef e5       	ldi	r30, 0x5F	; 95
    5aba:	fd e2       	ldi	r31, 0x2D	; 45
    5abc:	b7 c3       	rjmp	.+1902   	; 0x622c <__prologue_saves__>
    5abe:	3c 01       	movw	r6, r24
    5ac0:	7f 87       	std	Y+15, r23	; 0x0f
    5ac2:	6e 87       	std	Y+14, r22	; 0x0e
    5ac4:	6a 01       	movw	r12, r20
    5ac6:	fc 01       	movw	r30, r24
    5ac8:	17 82       	std	Z+7, r1	; 0x07
    5aca:	16 82       	std	Z+6, r1	; 0x06
    5acc:	83 81       	ldd	r24, Z+3	; 0x03
    5ace:	81 fd       	sbrc	r24, 1
    5ad0:	03 c0       	rjmp	.+6      	; 0x5ad8 <vfprintf+0x24>
    5ad2:	6f ef       	ldi	r22, 0xFF	; 255
    5ad4:	7f ef       	ldi	r23, 0xFF	; 255
    5ad6:	52 c3       	rjmp	.+1700   	; 0x617c <vfprintf+0x6c8>
    5ad8:	9e 01       	movw	r18, r28
    5ada:	2f 5f       	subi	r18, 0xFF	; 255
    5adc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ade:	39 8b       	std	Y+17, r19	; 0x11
    5ae0:	28 8b       	std	Y+16, r18	; 0x10
    5ae2:	f3 01       	movw	r30, r6
    5ae4:	23 81       	ldd	r18, Z+3	; 0x03
    5ae6:	ee 85       	ldd	r30, Y+14	; 0x0e
    5ae8:	ff 85       	ldd	r31, Y+15	; 0x0f
    5aea:	23 fd       	sbrc	r18, 3
    5aec:	85 91       	lpm	r24, Z+
    5aee:	23 ff       	sbrs	r18, 3
    5af0:	81 91       	ld	r24, Z+
    5af2:	ff 87       	std	Y+15, r31	; 0x0f
    5af4:	ee 87       	std	Y+14, r30	; 0x0e
    5af6:	88 23       	and	r24, r24
    5af8:	09 f4       	brne	.+2      	; 0x5afc <vfprintf+0x48>
    5afa:	3d c3       	rjmp	.+1658   	; 0x6176 <vfprintf+0x6c2>
    5afc:	85 32       	cpi	r24, 0x25	; 37
    5afe:	51 f4       	brne	.+20     	; 0x5b14 <vfprintf+0x60>
    5b00:	ee 85       	ldd	r30, Y+14	; 0x0e
    5b02:	ff 85       	ldd	r31, Y+15	; 0x0f
    5b04:	23 fd       	sbrc	r18, 3
    5b06:	85 91       	lpm	r24, Z+
    5b08:	23 ff       	sbrs	r18, 3
    5b0a:	81 91       	ld	r24, Z+
    5b0c:	ff 87       	std	Y+15, r31	; 0x0f
    5b0e:	ee 87       	std	Y+14, r30	; 0x0e
    5b10:	85 32       	cpi	r24, 0x25	; 37
    5b12:	21 f4       	brne	.+8      	; 0x5b1c <vfprintf+0x68>
    5b14:	90 e0       	ldi	r25, 0x00	; 0
    5b16:	b3 01       	movw	r22, r6
    5b18:	20 d6       	rcall	.+3136   	; 0x675a <fputc>
    5b1a:	e3 cf       	rjmp	.-58     	; 0x5ae2 <vfprintf+0x2e>
    5b1c:	98 2f       	mov	r25, r24
    5b1e:	10 e0       	ldi	r17, 0x00	; 0
    5b20:	88 24       	eor	r8, r8
    5b22:	99 24       	eor	r9, r9
    5b24:	10 32       	cpi	r17, 0x20	; 32
    5b26:	b0 f4       	brcc	.+44     	; 0x5b54 <vfprintf+0xa0>
    5b28:	9b 32       	cpi	r25, 0x2B	; 43
    5b2a:	69 f0       	breq	.+26     	; 0x5b46 <vfprintf+0x92>
    5b2c:	9c 32       	cpi	r25, 0x2C	; 44
    5b2e:	28 f4       	brcc	.+10     	; 0x5b3a <vfprintf+0x86>
    5b30:	90 32       	cpi	r25, 0x20	; 32
    5b32:	51 f0       	breq	.+20     	; 0x5b48 <vfprintf+0x94>
    5b34:	93 32       	cpi	r25, 0x23	; 35
    5b36:	71 f4       	brne	.+28     	; 0x5b54 <vfprintf+0xa0>
    5b38:	0b c0       	rjmp	.+22     	; 0x5b50 <vfprintf+0x9c>
    5b3a:	9d 32       	cpi	r25, 0x2D	; 45
    5b3c:	39 f0       	breq	.+14     	; 0x5b4c <vfprintf+0x98>
    5b3e:	90 33       	cpi	r25, 0x30	; 48
    5b40:	49 f4       	brne	.+18     	; 0x5b54 <vfprintf+0xa0>
    5b42:	11 60       	ori	r17, 0x01	; 1
    5b44:	28 c0       	rjmp	.+80     	; 0x5b96 <vfprintf+0xe2>
    5b46:	12 60       	ori	r17, 0x02	; 2
    5b48:	14 60       	ori	r17, 0x04	; 4
    5b4a:	25 c0       	rjmp	.+74     	; 0x5b96 <vfprintf+0xe2>
    5b4c:	18 60       	ori	r17, 0x08	; 8
    5b4e:	23 c0       	rjmp	.+70     	; 0x5b96 <vfprintf+0xe2>
    5b50:	10 61       	ori	r17, 0x10	; 16
    5b52:	21 c0       	rjmp	.+66     	; 0x5b96 <vfprintf+0xe2>
    5b54:	17 fd       	sbrc	r17, 7
    5b56:	2a c0       	rjmp	.+84     	; 0x5bac <vfprintf+0xf8>
    5b58:	89 2f       	mov	r24, r25
    5b5a:	80 53       	subi	r24, 0x30	; 48
    5b5c:	8a 30       	cpi	r24, 0x0A	; 10
    5b5e:	78 f4       	brcc	.+30     	; 0x5b7e <vfprintf+0xca>
    5b60:	16 ff       	sbrs	r17, 6
    5b62:	06 c0       	rjmp	.+12     	; 0x5b70 <vfprintf+0xbc>
    5b64:	fa e0       	ldi	r31, 0x0A	; 10
    5b66:	9f 9e       	mul	r9, r31
    5b68:	90 2c       	mov	r9, r0
    5b6a:	11 24       	eor	r1, r1
    5b6c:	98 0e       	add	r9, r24
    5b6e:	13 c0       	rjmp	.+38     	; 0x5b96 <vfprintf+0xe2>
    5b70:	3a e0       	ldi	r19, 0x0A	; 10
    5b72:	83 9e       	mul	r8, r19
    5b74:	80 2c       	mov	r8, r0
    5b76:	11 24       	eor	r1, r1
    5b78:	88 0e       	add	r8, r24
    5b7a:	10 62       	ori	r17, 0x20	; 32
    5b7c:	0c c0       	rjmp	.+24     	; 0x5b96 <vfprintf+0xe2>
    5b7e:	9e 32       	cpi	r25, 0x2E	; 46
    5b80:	21 f4       	brne	.+8      	; 0x5b8a <vfprintf+0xd6>
    5b82:	16 fd       	sbrc	r17, 6
    5b84:	f8 c2       	rjmp	.+1520   	; 0x6176 <vfprintf+0x6c2>
    5b86:	10 64       	ori	r17, 0x40	; 64
    5b88:	06 c0       	rjmp	.+12     	; 0x5b96 <vfprintf+0xe2>
    5b8a:	9c 36       	cpi	r25, 0x6C	; 108
    5b8c:	11 f4       	brne	.+4      	; 0x5b92 <vfprintf+0xde>
    5b8e:	10 68       	ori	r17, 0x80	; 128
    5b90:	02 c0       	rjmp	.+4      	; 0x5b96 <vfprintf+0xe2>
    5b92:	98 36       	cpi	r25, 0x68	; 104
    5b94:	59 f4       	brne	.+22     	; 0x5bac <vfprintf+0xf8>
    5b96:	ee 85       	ldd	r30, Y+14	; 0x0e
    5b98:	ff 85       	ldd	r31, Y+15	; 0x0f
    5b9a:	23 fd       	sbrc	r18, 3
    5b9c:	95 91       	lpm	r25, Z+
    5b9e:	23 ff       	sbrs	r18, 3
    5ba0:	91 91       	ld	r25, Z+
    5ba2:	ff 87       	std	Y+15, r31	; 0x0f
    5ba4:	ee 87       	std	Y+14, r30	; 0x0e
    5ba6:	99 23       	and	r25, r25
    5ba8:	09 f0       	breq	.+2      	; 0x5bac <vfprintf+0xf8>
    5baa:	bc cf       	rjmp	.-136    	; 0x5b24 <vfprintf+0x70>
    5bac:	89 2f       	mov	r24, r25
    5bae:	85 54       	subi	r24, 0x45	; 69
    5bb0:	83 30       	cpi	r24, 0x03	; 3
    5bb2:	20 f4       	brcc	.+8      	; 0x5bbc <vfprintf+0x108>
    5bb4:	81 2f       	mov	r24, r17
    5bb6:	80 61       	ori	r24, 0x10	; 16
    5bb8:	90 5e       	subi	r25, 0xE0	; 224
    5bba:	07 c0       	rjmp	.+14     	; 0x5bca <vfprintf+0x116>
    5bbc:	89 2f       	mov	r24, r25
    5bbe:	85 56       	subi	r24, 0x65	; 101
    5bc0:	83 30       	cpi	r24, 0x03	; 3
    5bc2:	08 f0       	brcs	.+2      	; 0x5bc6 <vfprintf+0x112>
    5bc4:	8f c1       	rjmp	.+798    	; 0x5ee4 <vfprintf+0x430>
    5bc6:	81 2f       	mov	r24, r17
    5bc8:	8f 7e       	andi	r24, 0xEF	; 239
    5bca:	86 fd       	sbrc	r24, 6
    5bcc:	02 c0       	rjmp	.+4      	; 0x5bd2 <vfprintf+0x11e>
    5bce:	76 e0       	ldi	r23, 0x06	; 6
    5bd0:	97 2e       	mov	r9, r23
    5bd2:	6f e3       	ldi	r22, 0x3F	; 63
    5bd4:	f6 2e       	mov	r15, r22
    5bd6:	f8 22       	and	r15, r24
    5bd8:	95 36       	cpi	r25, 0x65	; 101
    5bda:	19 f4       	brne	.+6      	; 0x5be2 <vfprintf+0x12e>
    5bdc:	f0 e4       	ldi	r31, 0x40	; 64
    5bde:	ff 2a       	or	r15, r31
    5be0:	07 c0       	rjmp	.+14     	; 0x5bf0 <vfprintf+0x13c>
    5be2:	96 36       	cpi	r25, 0x66	; 102
    5be4:	19 f4       	brne	.+6      	; 0x5bec <vfprintf+0x138>
    5be6:	20 e8       	ldi	r18, 0x80	; 128
    5be8:	f2 2a       	or	r15, r18
    5bea:	02 c0       	rjmp	.+4      	; 0x5bf0 <vfprintf+0x13c>
    5bec:	91 10       	cpse	r9, r1
    5bee:	9a 94       	dec	r9
    5bf0:	f7 fe       	sbrs	r15, 7
    5bf2:	0a c0       	rjmp	.+20     	; 0x5c08 <vfprintf+0x154>
    5bf4:	3b e3       	ldi	r19, 0x3B	; 59
    5bf6:	39 15       	cp	r19, r9
    5bf8:	18 f4       	brcc	.+6      	; 0x5c00 <vfprintf+0x14c>
    5bfa:	5c e3       	ldi	r21, 0x3C	; 60
    5bfc:	b5 2e       	mov	r11, r21
    5bfe:	02 c0       	rjmp	.+4      	; 0x5c04 <vfprintf+0x150>
    5c00:	b9 2c       	mov	r11, r9
    5c02:	b3 94       	inc	r11
    5c04:	27 e0       	ldi	r18, 0x07	; 7
    5c06:	09 c0       	rjmp	.+18     	; 0x5c1a <vfprintf+0x166>
    5c08:	47 e0       	ldi	r20, 0x07	; 7
    5c0a:	49 15       	cp	r20, r9
    5c0c:	20 f4       	brcc	.+8      	; 0x5c16 <vfprintf+0x162>
    5c0e:	bb 24       	eor	r11, r11
    5c10:	47 e0       	ldi	r20, 0x07	; 7
    5c12:	94 2e       	mov	r9, r20
    5c14:	f7 cf       	rjmp	.-18     	; 0x5c04 <vfprintf+0x150>
    5c16:	29 2d       	mov	r18, r9
    5c18:	bb 24       	eor	r11, r11
    5c1a:	c6 01       	movw	r24, r12
    5c1c:	04 96       	adiw	r24, 0x04	; 4
    5c1e:	9d 87       	std	Y+13, r25	; 0x0d
    5c20:	8c 87       	std	Y+12, r24	; 0x0c
    5c22:	f6 01       	movw	r30, r12
    5c24:	60 81       	ld	r22, Z
    5c26:	71 81       	ldd	r23, Z+1	; 0x01
    5c28:	82 81       	ldd	r24, Z+2	; 0x02
    5c2a:	93 81       	ldd	r25, Z+3	; 0x03
    5c2c:	ae 01       	movw	r20, r28
    5c2e:	4f 5f       	subi	r20, 0xFF	; 255
    5c30:	5f 4f       	sbci	r21, 0xFF	; 255
    5c32:	0b 2d       	mov	r16, r11
    5c34:	a4 d4       	rcall	.+2376   	; 0x657e <__ftoa_engine>
    5c36:	6c 01       	movw	r12, r24
    5c38:	09 81       	ldd	r16, Y+1	; 0x01
    5c3a:	20 2e       	mov	r2, r16
    5c3c:	33 24       	eor	r3, r3
    5c3e:	00 ff       	sbrs	r16, 0
    5c40:	04 c0       	rjmp	.+8      	; 0x5c4a <vfprintf+0x196>
    5c42:	03 fd       	sbrc	r16, 3
    5c44:	02 c0       	rjmp	.+4      	; 0x5c4a <vfprintf+0x196>
    5c46:	1d e2       	ldi	r17, 0x2D	; 45
    5c48:	09 c0       	rjmp	.+18     	; 0x5c5c <vfprintf+0x1a8>
    5c4a:	f1 fe       	sbrs	r15, 1
    5c4c:	02 c0       	rjmp	.+4      	; 0x5c52 <vfprintf+0x19e>
    5c4e:	1b e2       	ldi	r17, 0x2B	; 43
    5c50:	05 c0       	rjmp	.+10     	; 0x5c5c <vfprintf+0x1a8>
    5c52:	f2 fc       	sbrc	r15, 2
    5c54:	02 c0       	rjmp	.+4      	; 0x5c5a <vfprintf+0x1a6>
    5c56:	10 e0       	ldi	r17, 0x00	; 0
    5c58:	01 c0       	rjmp	.+2      	; 0x5c5c <vfprintf+0x1a8>
    5c5a:	10 e2       	ldi	r17, 0x20	; 32
    5c5c:	c1 01       	movw	r24, r2
    5c5e:	8c 70       	andi	r24, 0x0C	; 12
    5c60:	90 70       	andi	r25, 0x00	; 0
    5c62:	89 2b       	or	r24, r25
    5c64:	a1 f1       	breq	.+104    	; 0x5cce <vfprintf+0x21a>
    5c66:	11 23       	and	r17, r17
    5c68:	11 f4       	brne	.+4      	; 0x5c6e <vfprintf+0x1ba>
    5c6a:	83 e0       	ldi	r24, 0x03	; 3
    5c6c:	01 c0       	rjmp	.+2      	; 0x5c70 <vfprintf+0x1bc>
    5c6e:	84 e0       	ldi	r24, 0x04	; 4
    5c70:	88 15       	cp	r24, r8
    5c72:	10 f0       	brcs	.+4      	; 0x5c78 <vfprintf+0x1c4>
    5c74:	88 24       	eor	r8, r8
    5c76:	09 c0       	rjmp	.+18     	; 0x5c8a <vfprintf+0x1d6>
    5c78:	88 1a       	sub	r8, r24
    5c7a:	f3 fc       	sbrc	r15, 3
    5c7c:	06 c0       	rjmp	.+12     	; 0x5c8a <vfprintf+0x1d6>
    5c7e:	80 e2       	ldi	r24, 0x20	; 32
    5c80:	90 e0       	ldi	r25, 0x00	; 0
    5c82:	b3 01       	movw	r22, r6
    5c84:	6a d5       	rcall	.+2772   	; 0x675a <fputc>
    5c86:	8a 94       	dec	r8
    5c88:	d1 f7       	brne	.-12     	; 0x5c7e <vfprintf+0x1ca>
    5c8a:	11 23       	and	r17, r17
    5c8c:	21 f0       	breq	.+8      	; 0x5c96 <vfprintf+0x1e2>
    5c8e:	81 2f       	mov	r24, r17
    5c90:	90 e0       	ldi	r25, 0x00	; 0
    5c92:	b3 01       	movw	r22, r6
    5c94:	62 d5       	rcall	.+2756   	; 0x675a <fputc>
    5c96:	23 fe       	sbrs	r2, 3
    5c98:	03 c0       	rjmp	.+6      	; 0x5ca0 <vfprintf+0x1ec>
    5c9a:	0f e5       	ldi	r16, 0x5F	; 95
    5c9c:	15 e0       	ldi	r17, 0x05	; 5
    5c9e:	0d c0       	rjmp	.+26     	; 0x5cba <vfprintf+0x206>
    5ca0:	03 e6       	ldi	r16, 0x63	; 99
    5ca2:	15 e0       	ldi	r17, 0x05	; 5
    5ca4:	0a c0       	rjmp	.+20     	; 0x5cba <vfprintf+0x206>
    5ca6:	e1 14       	cp	r14, r1
    5ca8:	f1 04       	cpc	r15, r1
    5caa:	09 f0       	breq	.+2      	; 0x5cae <vfprintf+0x1fa>
    5cac:	80 52       	subi	r24, 0x20	; 32
    5cae:	90 e0       	ldi	r25, 0x00	; 0
    5cb0:	b3 01       	movw	r22, r6
    5cb2:	53 d5       	rcall	.+2726   	; 0x675a <fputc>
    5cb4:	0f 5f       	subi	r16, 0xFF	; 255
    5cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    5cb8:	05 c0       	rjmp	.+10     	; 0x5cc4 <vfprintf+0x210>
    5cba:	ef 2c       	mov	r14, r15
    5cbc:	ff 24       	eor	r15, r15
    5cbe:	f0 e1       	ldi	r31, 0x10	; 16
    5cc0:	ef 22       	and	r14, r31
    5cc2:	ff 24       	eor	r15, r15
    5cc4:	f8 01       	movw	r30, r16
    5cc6:	84 91       	lpm	r24, Z+
    5cc8:	88 23       	and	r24, r24
    5cca:	69 f7       	brne	.-38     	; 0x5ca6 <vfprintf+0x1f2>
    5ccc:	08 c1       	rjmp	.+528    	; 0x5ede <vfprintf+0x42a>
    5cce:	f7 fe       	sbrs	r15, 7
    5cd0:	12 c0       	rjmp	.+36     	; 0x5cf6 <vfprintf+0x242>
    5cd2:	bc 0c       	add	r11, r12
    5cd4:	24 fe       	sbrs	r2, 4
    5cd6:	04 c0       	rjmp	.+8      	; 0x5ce0 <vfprintf+0x22c>
    5cd8:	8a 81       	ldd	r24, Y+2	; 0x02
    5cda:	81 33       	cpi	r24, 0x31	; 49
    5cdc:	09 f4       	brne	.+2      	; 0x5ce0 <vfprintf+0x22c>
    5cde:	ba 94       	dec	r11
    5ce0:	1b 14       	cp	r1, r11
    5ce2:	1c f0       	brlt	.+6      	; 0x5cea <vfprintf+0x236>
    5ce4:	bb 24       	eor	r11, r11
    5ce6:	b3 94       	inc	r11
    5ce8:	2d c0       	rjmp	.+90     	; 0x5d44 <vfprintf+0x290>
    5cea:	f8 e0       	ldi	r31, 0x08	; 8
    5cec:	fb 15       	cp	r31, r11
    5cee:	50 f5       	brcc	.+84     	; 0x5d44 <vfprintf+0x290>
    5cf0:	38 e0       	ldi	r19, 0x08	; 8
    5cf2:	b3 2e       	mov	r11, r19
    5cf4:	27 c0       	rjmp	.+78     	; 0x5d44 <vfprintf+0x290>
    5cf6:	f6 fc       	sbrc	r15, 6
    5cf8:	25 c0       	rjmp	.+74     	; 0x5d44 <vfprintf+0x290>
    5cfa:	89 2d       	mov	r24, r9
    5cfc:	90 e0       	ldi	r25, 0x00	; 0
    5cfe:	8c 15       	cp	r24, r12
    5d00:	9d 05       	cpc	r25, r13
    5d02:	4c f0       	brlt	.+18     	; 0x5d16 <vfprintf+0x262>
    5d04:	2c ef       	ldi	r18, 0xFC	; 252
    5d06:	c2 16       	cp	r12, r18
    5d08:	2f ef       	ldi	r18, 0xFF	; 255
    5d0a:	d2 06       	cpc	r13, r18
    5d0c:	24 f0       	brlt	.+8      	; 0x5d16 <vfprintf+0x262>
    5d0e:	30 e8       	ldi	r19, 0x80	; 128
    5d10:	f3 2a       	or	r15, r19
    5d12:	01 c0       	rjmp	.+2      	; 0x5d16 <vfprintf+0x262>
    5d14:	9a 94       	dec	r9
    5d16:	99 20       	and	r9, r9
    5d18:	49 f0       	breq	.+18     	; 0x5d2c <vfprintf+0x278>
    5d1a:	e2 e0       	ldi	r30, 0x02	; 2
    5d1c:	f0 e0       	ldi	r31, 0x00	; 0
    5d1e:	ec 0f       	add	r30, r28
    5d20:	fd 1f       	adc	r31, r29
    5d22:	e9 0d       	add	r30, r9
    5d24:	f1 1d       	adc	r31, r1
    5d26:	80 81       	ld	r24, Z
    5d28:	80 33       	cpi	r24, 0x30	; 48
    5d2a:	a1 f3       	breq	.-24     	; 0x5d14 <vfprintf+0x260>
    5d2c:	f7 fe       	sbrs	r15, 7
    5d2e:	0a c0       	rjmp	.+20     	; 0x5d44 <vfprintf+0x290>
    5d30:	b9 2c       	mov	r11, r9
    5d32:	b3 94       	inc	r11
    5d34:	89 2d       	mov	r24, r9
    5d36:	90 e0       	ldi	r25, 0x00	; 0
    5d38:	c8 16       	cp	r12, r24
    5d3a:	d9 06       	cpc	r13, r25
    5d3c:	14 f0       	brlt	.+4      	; 0x5d42 <vfprintf+0x28e>
    5d3e:	99 24       	eor	r9, r9
    5d40:	01 c0       	rjmp	.+2      	; 0x5d44 <vfprintf+0x290>
    5d42:	9c 18       	sub	r9, r12
    5d44:	f7 fc       	sbrc	r15, 7
    5d46:	03 c0       	rjmp	.+6      	; 0x5d4e <vfprintf+0x29a>
    5d48:	25 e0       	ldi	r18, 0x05	; 5
    5d4a:	30 e0       	ldi	r19, 0x00	; 0
    5d4c:	09 c0       	rjmp	.+18     	; 0x5d60 <vfprintf+0x2ac>
    5d4e:	1c 14       	cp	r1, r12
    5d50:	1d 04       	cpc	r1, r13
    5d52:	1c f0       	brlt	.+6      	; 0x5d5a <vfprintf+0x2a6>
    5d54:	21 e0       	ldi	r18, 0x01	; 1
    5d56:	30 e0       	ldi	r19, 0x00	; 0
    5d58:	03 c0       	rjmp	.+6      	; 0x5d60 <vfprintf+0x2ac>
    5d5a:	96 01       	movw	r18, r12
    5d5c:	2f 5f       	subi	r18, 0xFF	; 255
    5d5e:	3f 4f       	sbci	r19, 0xFF	; 255
    5d60:	11 23       	and	r17, r17
    5d62:	11 f0       	breq	.+4      	; 0x5d68 <vfprintf+0x2b4>
    5d64:	2f 5f       	subi	r18, 0xFF	; 255
    5d66:	3f 4f       	sbci	r19, 0xFF	; 255
    5d68:	99 20       	and	r9, r9
    5d6a:	29 f0       	breq	.+10     	; 0x5d76 <vfprintf+0x2c2>
    5d6c:	89 2d       	mov	r24, r9
    5d6e:	90 e0       	ldi	r25, 0x00	; 0
    5d70:	01 96       	adiw	r24, 0x01	; 1
    5d72:	28 0f       	add	r18, r24
    5d74:	39 1f       	adc	r19, r25
    5d76:	88 2d       	mov	r24, r8
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	28 17       	cp	r18, r24
    5d7c:	39 07       	cpc	r19, r25
    5d7e:	14 f0       	brlt	.+4      	; 0x5d84 <vfprintf+0x2d0>
    5d80:	88 24       	eor	r8, r8
    5d82:	01 c0       	rjmp	.+2      	; 0x5d86 <vfprintf+0x2d2>
    5d84:	82 1a       	sub	r8, r18
    5d86:	4f 2c       	mov	r4, r15
    5d88:	55 24       	eor	r5, r5
    5d8a:	c2 01       	movw	r24, r4
    5d8c:	89 70       	andi	r24, 0x09	; 9
    5d8e:	90 70       	andi	r25, 0x00	; 0
    5d90:	89 2b       	or	r24, r25
    5d92:	31 f0       	breq	.+12     	; 0x5da0 <vfprintf+0x2ec>
    5d94:	07 c0       	rjmp	.+14     	; 0x5da4 <vfprintf+0x2f0>
    5d96:	80 e2       	ldi	r24, 0x20	; 32
    5d98:	90 e0       	ldi	r25, 0x00	; 0
    5d9a:	b3 01       	movw	r22, r6
    5d9c:	de d4       	rcall	.+2492   	; 0x675a <fputc>
    5d9e:	8a 94       	dec	r8
    5da0:	88 20       	and	r8, r8
    5da2:	c9 f7       	brne	.-14     	; 0x5d96 <vfprintf+0x2e2>
    5da4:	11 23       	and	r17, r17
    5da6:	21 f0       	breq	.+8      	; 0x5db0 <vfprintf+0x2fc>
    5da8:	81 2f       	mov	r24, r17
    5daa:	90 e0       	ldi	r25, 0x00	; 0
    5dac:	b3 01       	movw	r22, r6
    5dae:	d5 d4       	rcall	.+2474   	; 0x675a <fputc>
    5db0:	43 fe       	sbrs	r4, 3
    5db2:	06 c0       	rjmp	.+12     	; 0x5dc0 <vfprintf+0x30c>
    5db4:	07 c0       	rjmp	.+14     	; 0x5dc4 <vfprintf+0x310>
    5db6:	80 e3       	ldi	r24, 0x30	; 48
    5db8:	90 e0       	ldi	r25, 0x00	; 0
    5dba:	b3 01       	movw	r22, r6
    5dbc:	ce d4       	rcall	.+2460   	; 0x675a <fputc>
    5dbe:	8a 94       	dec	r8
    5dc0:	88 20       	and	r8, r8
    5dc2:	c9 f7       	brne	.-14     	; 0x5db6 <vfprintf+0x302>
    5dc4:	f7 fe       	sbrs	r15, 7
    5dc6:	44 c0       	rjmp	.+136    	; 0x5e50 <vfprintf+0x39c>
    5dc8:	86 01       	movw	r16, r12
    5dca:	d7 fe       	sbrs	r13, 7
    5dcc:	02 c0       	rjmp	.+4      	; 0x5dd2 <vfprintf+0x31e>
    5dce:	00 e0       	ldi	r16, 0x00	; 0
    5dd0:	10 e0       	ldi	r17, 0x00	; 0
    5dd2:	76 01       	movw	r14, r12
    5dd4:	08 94       	sec
    5dd6:	e1 1c       	adc	r14, r1
    5dd8:	f1 1c       	adc	r15, r1
    5dda:	e0 1a       	sub	r14, r16
    5ddc:	f1 0a       	sbc	r15, r17
    5dde:	41 e0       	ldi	r20, 0x01	; 1
    5de0:	50 e0       	ldi	r21, 0x00	; 0
    5de2:	4c 0f       	add	r20, r28
    5de4:	5d 1f       	adc	r21, r29
    5de6:	e4 0e       	add	r14, r20
    5de8:	f5 1e       	adc	r15, r21
    5dea:	26 01       	movw	r4, r12
    5dec:	4b 18       	sub	r4, r11
    5dee:	51 08       	sbc	r5, r1
    5df0:	89 2d       	mov	r24, r9
    5df2:	90 e0       	ldi	r25, 0x00	; 0
    5df4:	aa 24       	eor	r10, r10
    5df6:	bb 24       	eor	r11, r11
    5df8:	a8 1a       	sub	r10, r24
    5dfa:	b9 0a       	sbc	r11, r25
    5dfc:	5f ef       	ldi	r21, 0xFF	; 255
    5dfe:	0f 3f       	cpi	r16, 0xFF	; 255
    5e00:	15 07       	cpc	r17, r21
    5e02:	21 f4       	brne	.+8      	; 0x5e0c <vfprintf+0x358>
    5e04:	8e e2       	ldi	r24, 0x2E	; 46
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	b3 01       	movw	r22, r6
    5e0a:	a7 d4       	rcall	.+2382   	; 0x675a <fputc>
    5e0c:	c0 16       	cp	r12, r16
    5e0e:	d1 06       	cpc	r13, r17
    5e10:	34 f0       	brlt	.+12     	; 0x5e1e <vfprintf+0x36a>
    5e12:	40 16       	cp	r4, r16
    5e14:	51 06       	cpc	r5, r17
    5e16:	1c f4       	brge	.+6      	; 0x5e1e <vfprintf+0x36a>
    5e18:	f7 01       	movw	r30, r14
    5e1a:	80 81       	ld	r24, Z
    5e1c:	01 c0       	rjmp	.+2      	; 0x5e20 <vfprintf+0x36c>
    5e1e:	80 e3       	ldi	r24, 0x30	; 48
    5e20:	01 50       	subi	r16, 0x01	; 1
    5e22:	10 40       	sbci	r17, 0x00	; 0
    5e24:	08 94       	sec
    5e26:	e1 1c       	adc	r14, r1
    5e28:	f1 1c       	adc	r15, r1
    5e2a:	0a 15       	cp	r16, r10
    5e2c:	1b 05       	cpc	r17, r11
    5e2e:	24 f0       	brlt	.+8      	; 0x5e38 <vfprintf+0x384>
    5e30:	90 e0       	ldi	r25, 0x00	; 0
    5e32:	b3 01       	movw	r22, r6
    5e34:	92 d4       	rcall	.+2340   	; 0x675a <fputc>
    5e36:	e2 cf       	rjmp	.-60     	; 0x5dfc <vfprintf+0x348>
    5e38:	0c 15       	cp	r16, r12
    5e3a:	1d 05       	cpc	r17, r13
    5e3c:	39 f4       	brne	.+14     	; 0x5e4c <vfprintf+0x398>
    5e3e:	9a 81       	ldd	r25, Y+2	; 0x02
    5e40:	96 33       	cpi	r25, 0x36	; 54
    5e42:	18 f4       	brcc	.+6      	; 0x5e4a <vfprintf+0x396>
    5e44:	95 33       	cpi	r25, 0x35	; 53
    5e46:	11 f4       	brne	.+4      	; 0x5e4c <vfprintf+0x398>
    5e48:	24 fe       	sbrs	r2, 4
    5e4a:	81 e3       	ldi	r24, 0x31	; 49
    5e4c:	90 e0       	ldi	r25, 0x00	; 0
    5e4e:	45 c0       	rjmp	.+138    	; 0x5eda <vfprintf+0x426>
    5e50:	8a 81       	ldd	r24, Y+2	; 0x02
    5e52:	81 33       	cpi	r24, 0x31	; 49
    5e54:	09 f0       	breq	.+2      	; 0x5e58 <vfprintf+0x3a4>
    5e56:	0f 7e       	andi	r16, 0xEF	; 239
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	b3 01       	movw	r22, r6
    5e5c:	7e d4       	rcall	.+2300   	; 0x675a <fputc>
    5e5e:	99 20       	and	r9, r9
    5e60:	91 f0       	breq	.+36     	; 0x5e86 <vfprintf+0x3d2>
    5e62:	8e e2       	ldi	r24, 0x2E	; 46
    5e64:	90 e0       	ldi	r25, 0x00	; 0
    5e66:	b3 01       	movw	r22, r6
    5e68:	78 d4       	rcall	.+2288   	; 0x675a <fputc>
    5e6a:	12 e0       	ldi	r17, 0x02	; 2
    5e6c:	e1 e0       	ldi	r30, 0x01	; 1
    5e6e:	f0 e0       	ldi	r31, 0x00	; 0
    5e70:	ec 0f       	add	r30, r28
    5e72:	fd 1f       	adc	r31, r29
    5e74:	e1 0f       	add	r30, r17
    5e76:	f1 1d       	adc	r31, r1
    5e78:	1f 5f       	subi	r17, 0xFF	; 255
    5e7a:	80 81       	ld	r24, Z
    5e7c:	90 e0       	ldi	r25, 0x00	; 0
    5e7e:	b3 01       	movw	r22, r6
    5e80:	6c d4       	rcall	.+2264   	; 0x675a <fputc>
    5e82:	9a 94       	dec	r9
    5e84:	99 f7       	brne	.-26     	; 0x5e6c <vfprintf+0x3b8>
    5e86:	44 fc       	sbrc	r4, 4
    5e88:	03 c0       	rjmp	.+6      	; 0x5e90 <vfprintf+0x3dc>
    5e8a:	85 e6       	ldi	r24, 0x65	; 101
    5e8c:	90 e0       	ldi	r25, 0x00	; 0
    5e8e:	02 c0       	rjmp	.+4      	; 0x5e94 <vfprintf+0x3e0>
    5e90:	85 e4       	ldi	r24, 0x45	; 69
    5e92:	90 e0       	ldi	r25, 0x00	; 0
    5e94:	b3 01       	movw	r22, r6
    5e96:	61 d4       	rcall	.+2242   	; 0x675a <fputc>
    5e98:	d7 fc       	sbrc	r13, 7
    5e9a:	05 c0       	rjmp	.+10     	; 0x5ea6 <vfprintf+0x3f2>
    5e9c:	c1 14       	cp	r12, r1
    5e9e:	d1 04       	cpc	r13, r1
    5ea0:	41 f4       	brne	.+16     	; 0x5eb2 <vfprintf+0x3fe>
    5ea2:	04 ff       	sbrs	r16, 4
    5ea4:	06 c0       	rjmp	.+12     	; 0x5eb2 <vfprintf+0x3fe>
    5ea6:	d0 94       	com	r13
    5ea8:	c1 94       	neg	r12
    5eaa:	d1 08       	sbc	r13, r1
    5eac:	d3 94       	inc	r13
    5eae:	8d e2       	ldi	r24, 0x2D	; 45
    5eb0:	01 c0       	rjmp	.+2      	; 0x5eb4 <vfprintf+0x400>
    5eb2:	8b e2       	ldi	r24, 0x2B	; 43
    5eb4:	90 e0       	ldi	r25, 0x00	; 0
    5eb6:	b3 01       	movw	r22, r6
    5eb8:	50 d4       	rcall	.+2208   	; 0x675a <fputc>
    5eba:	80 e3       	ldi	r24, 0x30	; 48
    5ebc:	05 c0       	rjmp	.+10     	; 0x5ec8 <vfprintf+0x414>
    5ebe:	8f 5f       	subi	r24, 0xFF	; 255
    5ec0:	26 ef       	ldi	r18, 0xF6	; 246
    5ec2:	3f ef       	ldi	r19, 0xFF	; 255
    5ec4:	c2 0e       	add	r12, r18
    5ec6:	d3 1e       	adc	r13, r19
    5ec8:	3a e0       	ldi	r19, 0x0A	; 10
    5eca:	c3 16       	cp	r12, r19
    5ecc:	d1 04       	cpc	r13, r1
    5ece:	bc f7       	brge	.-18     	; 0x5ebe <vfprintf+0x40a>
    5ed0:	90 e0       	ldi	r25, 0x00	; 0
    5ed2:	b3 01       	movw	r22, r6
    5ed4:	42 d4       	rcall	.+2180   	; 0x675a <fputc>
    5ed6:	c6 01       	movw	r24, r12
    5ed8:	c0 96       	adiw	r24, 0x30	; 48
    5eda:	b3 01       	movw	r22, r6
    5edc:	3e d4       	rcall	.+2172   	; 0x675a <fputc>
    5ede:	cc 84       	ldd	r12, Y+12	; 0x0c
    5ee0:	dd 84       	ldd	r13, Y+13	; 0x0d
    5ee2:	46 c1       	rjmp	.+652    	; 0x6170 <vfprintf+0x6bc>
    5ee4:	93 36       	cpi	r25, 0x63	; 99
    5ee6:	31 f0       	breq	.+12     	; 0x5ef4 <vfprintf+0x440>
    5ee8:	93 37       	cpi	r25, 0x73	; 115
    5eea:	99 f0       	breq	.+38     	; 0x5f12 <vfprintf+0x45e>
    5eec:	93 35       	cpi	r25, 0x53	; 83
    5eee:	09 f0       	breq	.+2      	; 0x5ef2 <vfprintf+0x43e>
    5ef0:	55 c0       	rjmp	.+170    	; 0x5f9c <vfprintf+0x4e8>
    5ef2:	22 c0       	rjmp	.+68     	; 0x5f38 <vfprintf+0x484>
    5ef4:	f6 01       	movw	r30, r12
    5ef6:	80 81       	ld	r24, Z
    5ef8:	89 83       	std	Y+1, r24	; 0x01
    5efa:	5e 01       	movw	r10, r28
    5efc:	08 94       	sec
    5efe:	a1 1c       	adc	r10, r1
    5f00:	b1 1c       	adc	r11, r1
    5f02:	22 e0       	ldi	r18, 0x02	; 2
    5f04:	30 e0       	ldi	r19, 0x00	; 0
    5f06:	c2 0e       	add	r12, r18
    5f08:	d3 1e       	adc	r13, r19
    5f0a:	21 e0       	ldi	r18, 0x01	; 1
    5f0c:	e2 2e       	mov	r14, r18
    5f0e:	f1 2c       	mov	r15, r1
    5f10:	11 c0       	rjmp	.+34     	; 0x5f34 <vfprintf+0x480>
    5f12:	f6 01       	movw	r30, r12
    5f14:	a0 80       	ld	r10, Z
    5f16:	b1 80       	ldd	r11, Z+1	; 0x01
    5f18:	16 fd       	sbrc	r17, 6
    5f1a:	03 c0       	rjmp	.+6      	; 0x5f22 <vfprintf+0x46e>
    5f1c:	6f ef       	ldi	r22, 0xFF	; 255
    5f1e:	7f ef       	ldi	r23, 0xFF	; 255
    5f20:	02 c0       	rjmp	.+4      	; 0x5f26 <vfprintf+0x472>
    5f22:	69 2d       	mov	r22, r9
    5f24:	70 e0       	ldi	r23, 0x00	; 0
    5f26:	22 e0       	ldi	r18, 0x02	; 2
    5f28:	30 e0       	ldi	r19, 0x00	; 0
    5f2a:	c2 0e       	add	r12, r18
    5f2c:	d3 1e       	adc	r13, r19
    5f2e:	c5 01       	movw	r24, r10
    5f30:	09 d4       	rcall	.+2066   	; 0x6744 <strnlen>
    5f32:	7c 01       	movw	r14, r24
    5f34:	1f 77       	andi	r17, 0x7F	; 127
    5f36:	12 c0       	rjmp	.+36     	; 0x5f5c <vfprintf+0x4a8>
    5f38:	f6 01       	movw	r30, r12
    5f3a:	a0 80       	ld	r10, Z
    5f3c:	b1 80       	ldd	r11, Z+1	; 0x01
    5f3e:	16 fd       	sbrc	r17, 6
    5f40:	03 c0       	rjmp	.+6      	; 0x5f48 <vfprintf+0x494>
    5f42:	6f ef       	ldi	r22, 0xFF	; 255
    5f44:	7f ef       	ldi	r23, 0xFF	; 255
    5f46:	02 c0       	rjmp	.+4      	; 0x5f4c <vfprintf+0x498>
    5f48:	69 2d       	mov	r22, r9
    5f4a:	70 e0       	ldi	r23, 0x00	; 0
    5f4c:	22 e0       	ldi	r18, 0x02	; 2
    5f4e:	30 e0       	ldi	r19, 0x00	; 0
    5f50:	c2 0e       	add	r12, r18
    5f52:	d3 1e       	adc	r13, r19
    5f54:	c5 01       	movw	r24, r10
    5f56:	eb d3       	rcall	.+2006   	; 0x672e <strnlen_P>
    5f58:	7c 01       	movw	r14, r24
    5f5a:	10 68       	ori	r17, 0x80	; 128
    5f5c:	13 ff       	sbrs	r17, 3
    5f5e:	06 c0       	rjmp	.+12     	; 0x5f6c <vfprintf+0x4b8>
    5f60:	19 c0       	rjmp	.+50     	; 0x5f94 <vfprintf+0x4e0>
    5f62:	80 e2       	ldi	r24, 0x20	; 32
    5f64:	90 e0       	ldi	r25, 0x00	; 0
    5f66:	b3 01       	movw	r22, r6
    5f68:	f8 d3       	rcall	.+2032   	; 0x675a <fputc>
    5f6a:	8a 94       	dec	r8
    5f6c:	88 2d       	mov	r24, r8
    5f6e:	90 e0       	ldi	r25, 0x00	; 0
    5f70:	e8 16       	cp	r14, r24
    5f72:	f9 06       	cpc	r15, r25
    5f74:	b0 f3       	brcs	.-20     	; 0x5f62 <vfprintf+0x4ae>
    5f76:	0e c0       	rjmp	.+28     	; 0x5f94 <vfprintf+0x4e0>
    5f78:	f5 01       	movw	r30, r10
    5f7a:	17 fd       	sbrc	r17, 7
    5f7c:	85 91       	lpm	r24, Z+
    5f7e:	17 ff       	sbrs	r17, 7
    5f80:	81 91       	ld	r24, Z+
    5f82:	5f 01       	movw	r10, r30
    5f84:	90 e0       	ldi	r25, 0x00	; 0
    5f86:	b3 01       	movw	r22, r6
    5f88:	e8 d3       	rcall	.+2000   	; 0x675a <fputc>
    5f8a:	81 10       	cpse	r8, r1
    5f8c:	8a 94       	dec	r8
    5f8e:	08 94       	sec
    5f90:	e1 08       	sbc	r14, r1
    5f92:	f1 08       	sbc	r15, r1
    5f94:	e1 14       	cp	r14, r1
    5f96:	f1 04       	cpc	r15, r1
    5f98:	79 f7       	brne	.-34     	; 0x5f78 <vfprintf+0x4c4>
    5f9a:	ea c0       	rjmp	.+468    	; 0x6170 <vfprintf+0x6bc>
    5f9c:	94 36       	cpi	r25, 0x64	; 100
    5f9e:	11 f0       	breq	.+4      	; 0x5fa4 <vfprintf+0x4f0>
    5fa0:	99 36       	cpi	r25, 0x69	; 105
    5fa2:	81 f5       	brne	.+96     	; 0x6004 <vfprintf+0x550>
    5fa4:	17 ff       	sbrs	r17, 7
    5fa6:	08 c0       	rjmp	.+16     	; 0x5fb8 <vfprintf+0x504>
    5fa8:	f6 01       	movw	r30, r12
    5faa:	20 81       	ld	r18, Z
    5fac:	31 81       	ldd	r19, Z+1	; 0x01
    5fae:	42 81       	ldd	r20, Z+2	; 0x02
    5fb0:	53 81       	ldd	r21, Z+3	; 0x03
    5fb2:	84 e0       	ldi	r24, 0x04	; 4
    5fb4:	90 e0       	ldi	r25, 0x00	; 0
    5fb6:	0a c0       	rjmp	.+20     	; 0x5fcc <vfprintf+0x518>
    5fb8:	f6 01       	movw	r30, r12
    5fba:	80 81       	ld	r24, Z
    5fbc:	91 81       	ldd	r25, Z+1	; 0x01
    5fbe:	9c 01       	movw	r18, r24
    5fc0:	44 27       	eor	r20, r20
    5fc2:	37 fd       	sbrc	r19, 7
    5fc4:	40 95       	com	r20
    5fc6:	54 2f       	mov	r21, r20
    5fc8:	82 e0       	ldi	r24, 0x02	; 2
    5fca:	90 e0       	ldi	r25, 0x00	; 0
    5fcc:	c8 0e       	add	r12, r24
    5fce:	d9 1e       	adc	r13, r25
    5fd0:	9f e6       	ldi	r25, 0x6F	; 111
    5fd2:	f9 2e       	mov	r15, r25
    5fd4:	f1 22       	and	r15, r17
    5fd6:	57 ff       	sbrs	r21, 7
    5fd8:	09 c0       	rjmp	.+18     	; 0x5fec <vfprintf+0x538>
    5fda:	50 95       	com	r21
    5fdc:	40 95       	com	r20
    5fde:	30 95       	com	r19
    5fe0:	21 95       	neg	r18
    5fe2:	3f 4f       	sbci	r19, 0xFF	; 255
    5fe4:	4f 4f       	sbci	r20, 0xFF	; 255
    5fe6:	5f 4f       	sbci	r21, 0xFF	; 255
    5fe8:	90 e8       	ldi	r25, 0x80	; 128
    5fea:	f9 2a       	or	r15, r25
    5fec:	ca 01       	movw	r24, r20
    5fee:	b9 01       	movw	r22, r18
    5ff0:	ae 01       	movw	r20, r28
    5ff2:	4f 5f       	subi	r20, 0xFF	; 255
    5ff4:	5f 4f       	sbci	r21, 0xFF	; 255
    5ff6:	2a e0       	ldi	r18, 0x0A	; 10
    5ff8:	30 e0       	ldi	r19, 0x00	; 0
    5ffa:	22 d4       	rcall	.+2116   	; 0x6840 <__ultoa_invert>
    5ffc:	e8 2e       	mov	r14, r24
    5ffe:	e8 89       	ldd	r30, Y+16	; 0x10
    6000:	ee 1a       	sub	r14, r30
    6002:	40 c0       	rjmp	.+128    	; 0x6084 <vfprintf+0x5d0>
    6004:	95 37       	cpi	r25, 0x75	; 117
    6006:	21 f4       	brne	.+8      	; 0x6010 <vfprintf+0x55c>
    6008:	1f 7e       	andi	r17, 0xEF	; 239
    600a:	2a e0       	ldi	r18, 0x0A	; 10
    600c:	30 e0       	ldi	r19, 0x00	; 0
    600e:	1c c0       	rjmp	.+56     	; 0x6048 <vfprintf+0x594>
    6010:	19 7f       	andi	r17, 0xF9	; 249
    6012:	9f 36       	cpi	r25, 0x6F	; 111
    6014:	61 f0       	breq	.+24     	; 0x602e <vfprintf+0x57a>
    6016:	90 37       	cpi	r25, 0x70	; 112
    6018:	20 f4       	brcc	.+8      	; 0x6022 <vfprintf+0x56e>
    601a:	98 35       	cpi	r25, 0x58	; 88
    601c:	09 f0       	breq	.+2      	; 0x6020 <vfprintf+0x56c>
    601e:	ab c0       	rjmp	.+342    	; 0x6176 <vfprintf+0x6c2>
    6020:	0f c0       	rjmp	.+30     	; 0x6040 <vfprintf+0x58c>
    6022:	90 37       	cpi	r25, 0x70	; 112
    6024:	39 f0       	breq	.+14     	; 0x6034 <vfprintf+0x580>
    6026:	98 37       	cpi	r25, 0x78	; 120
    6028:	09 f0       	breq	.+2      	; 0x602c <vfprintf+0x578>
    602a:	a5 c0       	rjmp	.+330    	; 0x6176 <vfprintf+0x6c2>
    602c:	04 c0       	rjmp	.+8      	; 0x6036 <vfprintf+0x582>
    602e:	28 e0       	ldi	r18, 0x08	; 8
    6030:	30 e0       	ldi	r19, 0x00	; 0
    6032:	0a c0       	rjmp	.+20     	; 0x6048 <vfprintf+0x594>
    6034:	10 61       	ori	r17, 0x10	; 16
    6036:	14 fd       	sbrc	r17, 4
    6038:	14 60       	ori	r17, 0x04	; 4
    603a:	20 e1       	ldi	r18, 0x10	; 16
    603c:	30 e0       	ldi	r19, 0x00	; 0
    603e:	04 c0       	rjmp	.+8      	; 0x6048 <vfprintf+0x594>
    6040:	14 fd       	sbrc	r17, 4
    6042:	16 60       	ori	r17, 0x06	; 6
    6044:	20 e1       	ldi	r18, 0x10	; 16
    6046:	32 e0       	ldi	r19, 0x02	; 2
    6048:	17 ff       	sbrs	r17, 7
    604a:	08 c0       	rjmp	.+16     	; 0x605c <vfprintf+0x5a8>
    604c:	f6 01       	movw	r30, r12
    604e:	60 81       	ld	r22, Z
    6050:	71 81       	ldd	r23, Z+1	; 0x01
    6052:	82 81       	ldd	r24, Z+2	; 0x02
    6054:	93 81       	ldd	r25, Z+3	; 0x03
    6056:	44 e0       	ldi	r20, 0x04	; 4
    6058:	50 e0       	ldi	r21, 0x00	; 0
    605a:	08 c0       	rjmp	.+16     	; 0x606c <vfprintf+0x5b8>
    605c:	f6 01       	movw	r30, r12
    605e:	80 81       	ld	r24, Z
    6060:	91 81       	ldd	r25, Z+1	; 0x01
    6062:	bc 01       	movw	r22, r24
    6064:	80 e0       	ldi	r24, 0x00	; 0
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	42 e0       	ldi	r20, 0x02	; 2
    606a:	50 e0       	ldi	r21, 0x00	; 0
    606c:	c4 0e       	add	r12, r20
    606e:	d5 1e       	adc	r13, r21
    6070:	ae 01       	movw	r20, r28
    6072:	4f 5f       	subi	r20, 0xFF	; 255
    6074:	5f 4f       	sbci	r21, 0xFF	; 255
    6076:	e4 d3       	rcall	.+1992   	; 0x6840 <__ultoa_invert>
    6078:	e8 2e       	mov	r14, r24
    607a:	58 89       	ldd	r21, Y+16	; 0x10
    607c:	e5 1a       	sub	r14, r21
    607e:	8f e7       	ldi	r24, 0x7F	; 127
    6080:	f8 2e       	mov	r15, r24
    6082:	f1 22       	and	r15, r17
    6084:	f6 fe       	sbrs	r15, 6
    6086:	0b c0       	rjmp	.+22     	; 0x609e <vfprintf+0x5ea>
    6088:	8e ef       	ldi	r24, 0xFE	; 254
    608a:	f8 22       	and	r15, r24
    608c:	e9 14       	cp	r14, r9
    608e:	38 f4       	brcc	.+14     	; 0x609e <vfprintf+0x5ea>
    6090:	f4 fe       	sbrs	r15, 4
    6092:	07 c0       	rjmp	.+14     	; 0x60a2 <vfprintf+0x5ee>
    6094:	f2 fc       	sbrc	r15, 2
    6096:	05 c0       	rjmp	.+10     	; 0x60a2 <vfprintf+0x5ee>
    6098:	9f ee       	ldi	r25, 0xEF	; 239
    609a:	f9 22       	and	r15, r25
    609c:	02 c0       	rjmp	.+4      	; 0x60a2 <vfprintf+0x5ee>
    609e:	1e 2d       	mov	r17, r14
    60a0:	01 c0       	rjmp	.+2      	; 0x60a4 <vfprintf+0x5f0>
    60a2:	19 2d       	mov	r17, r9
    60a4:	f4 fe       	sbrs	r15, 4
    60a6:	0d c0       	rjmp	.+26     	; 0x60c2 <vfprintf+0x60e>
    60a8:	fe 01       	movw	r30, r28
    60aa:	ee 0d       	add	r30, r14
    60ac:	f1 1d       	adc	r31, r1
    60ae:	80 81       	ld	r24, Z
    60b0:	80 33       	cpi	r24, 0x30	; 48
    60b2:	19 f4       	brne	.+6      	; 0x60ba <vfprintf+0x606>
    60b4:	e9 ee       	ldi	r30, 0xE9	; 233
    60b6:	fe 22       	and	r15, r30
    60b8:	08 c0       	rjmp	.+16     	; 0x60ca <vfprintf+0x616>
    60ba:	1f 5f       	subi	r17, 0xFF	; 255
    60bc:	f2 fe       	sbrs	r15, 2
    60be:	05 c0       	rjmp	.+10     	; 0x60ca <vfprintf+0x616>
    60c0:	03 c0       	rjmp	.+6      	; 0x60c8 <vfprintf+0x614>
    60c2:	8f 2d       	mov	r24, r15
    60c4:	86 78       	andi	r24, 0x86	; 134
    60c6:	09 f0       	breq	.+2      	; 0x60ca <vfprintf+0x616>
    60c8:	1f 5f       	subi	r17, 0xFF	; 255
    60ca:	0f 2d       	mov	r16, r15
    60cc:	f3 fc       	sbrc	r15, 3
    60ce:	13 c0       	rjmp	.+38     	; 0x60f6 <vfprintf+0x642>
    60d0:	f0 fe       	sbrs	r15, 0
    60d2:	0e c0       	rjmp	.+28     	; 0x60f0 <vfprintf+0x63c>
    60d4:	18 15       	cp	r17, r8
    60d6:	10 f0       	brcs	.+4      	; 0x60dc <vfprintf+0x628>
    60d8:	9e 2c       	mov	r9, r14
    60da:	0a c0       	rjmp	.+20     	; 0x60f0 <vfprintf+0x63c>
    60dc:	9e 2c       	mov	r9, r14
    60de:	98 0c       	add	r9, r8
    60e0:	91 1a       	sub	r9, r17
    60e2:	18 2d       	mov	r17, r8
    60e4:	05 c0       	rjmp	.+10     	; 0x60f0 <vfprintf+0x63c>
    60e6:	80 e2       	ldi	r24, 0x20	; 32
    60e8:	90 e0       	ldi	r25, 0x00	; 0
    60ea:	b3 01       	movw	r22, r6
    60ec:	36 d3       	rcall	.+1644   	; 0x675a <fputc>
    60ee:	1f 5f       	subi	r17, 0xFF	; 255
    60f0:	18 15       	cp	r17, r8
    60f2:	c8 f3       	brcs	.-14     	; 0x60e6 <vfprintf+0x632>
    60f4:	04 c0       	rjmp	.+8      	; 0x60fe <vfprintf+0x64a>
    60f6:	18 15       	cp	r17, r8
    60f8:	10 f4       	brcc	.+4      	; 0x60fe <vfprintf+0x64a>
    60fa:	81 1a       	sub	r8, r17
    60fc:	01 c0       	rjmp	.+2      	; 0x6100 <vfprintf+0x64c>
    60fe:	88 24       	eor	r8, r8
    6100:	04 ff       	sbrs	r16, 4
    6102:	0e c0       	rjmp	.+28     	; 0x6120 <vfprintf+0x66c>
    6104:	80 e3       	ldi	r24, 0x30	; 48
    6106:	90 e0       	ldi	r25, 0x00	; 0
    6108:	b3 01       	movw	r22, r6
    610a:	27 d3       	rcall	.+1614   	; 0x675a <fputc>
    610c:	02 ff       	sbrs	r16, 2
    610e:	1b c0       	rjmp	.+54     	; 0x6146 <vfprintf+0x692>
    6110:	01 fd       	sbrc	r16, 1
    6112:	03 c0       	rjmp	.+6      	; 0x611a <vfprintf+0x666>
    6114:	88 e7       	ldi	r24, 0x78	; 120
    6116:	90 e0       	ldi	r25, 0x00	; 0
    6118:	0e c0       	rjmp	.+28     	; 0x6136 <vfprintf+0x682>
    611a:	88 e5       	ldi	r24, 0x58	; 88
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	0b c0       	rjmp	.+22     	; 0x6136 <vfprintf+0x682>
    6120:	80 2f       	mov	r24, r16
    6122:	86 78       	andi	r24, 0x86	; 134
    6124:	81 f0       	breq	.+32     	; 0x6146 <vfprintf+0x692>
    6126:	01 ff       	sbrs	r16, 1
    6128:	02 c0       	rjmp	.+4      	; 0x612e <vfprintf+0x67a>
    612a:	8b e2       	ldi	r24, 0x2B	; 43
    612c:	01 c0       	rjmp	.+2      	; 0x6130 <vfprintf+0x67c>
    612e:	80 e2       	ldi	r24, 0x20	; 32
    6130:	f7 fc       	sbrc	r15, 7
    6132:	8d e2       	ldi	r24, 0x2D	; 45
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	b3 01       	movw	r22, r6
    6138:	10 d3       	rcall	.+1568   	; 0x675a <fputc>
    613a:	05 c0       	rjmp	.+10     	; 0x6146 <vfprintf+0x692>
    613c:	80 e3       	ldi	r24, 0x30	; 48
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	b3 01       	movw	r22, r6
    6142:	0b d3       	rcall	.+1558   	; 0x675a <fputc>
    6144:	9a 94       	dec	r9
    6146:	e9 14       	cp	r14, r9
    6148:	c8 f3       	brcs	.-14     	; 0x613c <vfprintf+0x688>
    614a:	ea 94       	dec	r14
    614c:	e1 e0       	ldi	r30, 0x01	; 1
    614e:	f0 e0       	ldi	r31, 0x00	; 0
    6150:	ec 0f       	add	r30, r28
    6152:	fd 1f       	adc	r31, r29
    6154:	ee 0d       	add	r30, r14
    6156:	f1 1d       	adc	r31, r1
    6158:	80 81       	ld	r24, Z
    615a:	90 e0       	ldi	r25, 0x00	; 0
    615c:	b3 01       	movw	r22, r6
    615e:	fd d2       	rcall	.+1530   	; 0x675a <fputc>
    6160:	ee 20       	and	r14, r14
    6162:	99 f7       	brne	.-26     	; 0x614a <vfprintf+0x696>
    6164:	05 c0       	rjmp	.+10     	; 0x6170 <vfprintf+0x6bc>
    6166:	80 e2       	ldi	r24, 0x20	; 32
    6168:	90 e0       	ldi	r25, 0x00	; 0
    616a:	b3 01       	movw	r22, r6
    616c:	f6 d2       	rcall	.+1516   	; 0x675a <fputc>
    616e:	8a 94       	dec	r8
    6170:	88 20       	and	r8, r8
    6172:	c9 f7       	brne	.-14     	; 0x6166 <vfprintf+0x6b2>
    6174:	b6 cc       	rjmp	.-1684   	; 0x5ae2 <vfprintf+0x2e>
    6176:	f3 01       	movw	r30, r6
    6178:	66 81       	ldd	r22, Z+6	; 0x06
    617a:	77 81       	ldd	r23, Z+7	; 0x07
    617c:	cb 01       	movw	r24, r22
    617e:	61 96       	adiw	r28, 0x11	; 17
    6180:	e2 e1       	ldi	r30, 0x12	; 18
    6182:	70 c0       	rjmp	.+224    	; 0x6264 <__epilogue_restores__>

00006184 <__mulsi3>:
    6184:	62 9f       	mul	r22, r18
    6186:	d0 01       	movw	r26, r0
    6188:	73 9f       	mul	r23, r19
    618a:	f0 01       	movw	r30, r0
    618c:	82 9f       	mul	r24, r18
    618e:	e0 0d       	add	r30, r0
    6190:	f1 1d       	adc	r31, r1
    6192:	64 9f       	mul	r22, r20
    6194:	e0 0d       	add	r30, r0
    6196:	f1 1d       	adc	r31, r1
    6198:	92 9f       	mul	r25, r18
    619a:	f0 0d       	add	r31, r0
    619c:	83 9f       	mul	r24, r19
    619e:	f0 0d       	add	r31, r0
    61a0:	74 9f       	mul	r23, r20
    61a2:	f0 0d       	add	r31, r0
    61a4:	65 9f       	mul	r22, r21
    61a6:	f0 0d       	add	r31, r0
    61a8:	99 27       	eor	r25, r25
    61aa:	72 9f       	mul	r23, r18
    61ac:	b0 0d       	add	r27, r0
    61ae:	e1 1d       	adc	r30, r1
    61b0:	f9 1f       	adc	r31, r25
    61b2:	63 9f       	mul	r22, r19
    61b4:	b0 0d       	add	r27, r0
    61b6:	e1 1d       	adc	r30, r1
    61b8:	f9 1f       	adc	r31, r25
    61ba:	bd 01       	movw	r22, r26
    61bc:	cf 01       	movw	r24, r30
    61be:	11 24       	eor	r1, r1
    61c0:	08 95       	ret

000061c2 <__divmodhi4>:
    61c2:	97 fb       	bst	r25, 7
    61c4:	09 2e       	mov	r0, r25
    61c6:	07 26       	eor	r0, r23
    61c8:	0a d0       	rcall	.+20     	; 0x61de <__divmodhi4_neg1>
    61ca:	77 fd       	sbrc	r23, 7
    61cc:	04 d0       	rcall	.+8      	; 0x61d6 <__divmodhi4_neg2>
    61ce:	65 d0       	rcall	.+202    	; 0x629a <__udivmodhi4>
    61d0:	06 d0       	rcall	.+12     	; 0x61de <__divmodhi4_neg1>
    61d2:	00 20       	and	r0, r0
    61d4:	1a f4       	brpl	.+6      	; 0x61dc <__divmodhi4_exit>

000061d6 <__divmodhi4_neg2>:
    61d6:	70 95       	com	r23
    61d8:	61 95       	neg	r22
    61da:	7f 4f       	sbci	r23, 0xFF	; 255

000061dc <__divmodhi4_exit>:
    61dc:	08 95       	ret

000061de <__divmodhi4_neg1>:
    61de:	f6 f7       	brtc	.-4      	; 0x61dc <__divmodhi4_exit>
    61e0:	90 95       	com	r25
    61e2:	81 95       	neg	r24
    61e4:	9f 4f       	sbci	r25, 0xFF	; 255
    61e6:	08 95       	ret

000061e8 <__udivmodsi4>:
    61e8:	a1 e2       	ldi	r26, 0x21	; 33
    61ea:	1a 2e       	mov	r1, r26
    61ec:	aa 1b       	sub	r26, r26
    61ee:	bb 1b       	sub	r27, r27
    61f0:	fd 01       	movw	r30, r26
    61f2:	0d c0       	rjmp	.+26     	; 0x620e <__udivmodsi4_ep>

000061f4 <__udivmodsi4_loop>:
    61f4:	aa 1f       	adc	r26, r26
    61f6:	bb 1f       	adc	r27, r27
    61f8:	ee 1f       	adc	r30, r30
    61fa:	ff 1f       	adc	r31, r31
    61fc:	a2 17       	cp	r26, r18
    61fe:	b3 07       	cpc	r27, r19
    6200:	e4 07       	cpc	r30, r20
    6202:	f5 07       	cpc	r31, r21
    6204:	20 f0       	brcs	.+8      	; 0x620e <__udivmodsi4_ep>
    6206:	a2 1b       	sub	r26, r18
    6208:	b3 0b       	sbc	r27, r19
    620a:	e4 0b       	sbc	r30, r20
    620c:	f5 0b       	sbc	r31, r21

0000620e <__udivmodsi4_ep>:
    620e:	66 1f       	adc	r22, r22
    6210:	77 1f       	adc	r23, r23
    6212:	88 1f       	adc	r24, r24
    6214:	99 1f       	adc	r25, r25
    6216:	1a 94       	dec	r1
    6218:	69 f7       	brne	.-38     	; 0x61f4 <__udivmodsi4_loop>
    621a:	60 95       	com	r22
    621c:	70 95       	com	r23
    621e:	80 95       	com	r24
    6220:	90 95       	com	r25
    6222:	9b 01       	movw	r18, r22
    6224:	ac 01       	movw	r20, r24
    6226:	bd 01       	movw	r22, r26
    6228:	cf 01       	movw	r24, r30
    622a:	08 95       	ret

0000622c <__prologue_saves__>:
    622c:	2f 92       	push	r2
    622e:	3f 92       	push	r3
    6230:	4f 92       	push	r4
    6232:	5f 92       	push	r5
    6234:	6f 92       	push	r6
    6236:	7f 92       	push	r7
    6238:	8f 92       	push	r8
    623a:	9f 92       	push	r9
    623c:	af 92       	push	r10
    623e:	bf 92       	push	r11
    6240:	cf 92       	push	r12
    6242:	df 92       	push	r13
    6244:	ef 92       	push	r14
    6246:	ff 92       	push	r15
    6248:	0f 93       	push	r16
    624a:	1f 93       	push	r17
    624c:	cf 93       	push	r28
    624e:	df 93       	push	r29
    6250:	cd b7       	in	r28, 0x3d	; 61
    6252:	de b7       	in	r29, 0x3e	; 62
    6254:	ca 1b       	sub	r28, r26
    6256:	db 0b       	sbc	r29, r27
    6258:	0f b6       	in	r0, 0x3f	; 63
    625a:	f8 94       	cli
    625c:	de bf       	out	0x3e, r29	; 62
    625e:	0f be       	out	0x3f, r0	; 63
    6260:	cd bf       	out	0x3d, r28	; 61
    6262:	09 94       	ijmp

00006264 <__epilogue_restores__>:
    6264:	2a 88       	ldd	r2, Y+18	; 0x12
    6266:	39 88       	ldd	r3, Y+17	; 0x11
    6268:	48 88       	ldd	r4, Y+16	; 0x10
    626a:	5f 84       	ldd	r5, Y+15	; 0x0f
    626c:	6e 84       	ldd	r6, Y+14	; 0x0e
    626e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6270:	8c 84       	ldd	r8, Y+12	; 0x0c
    6272:	9b 84       	ldd	r9, Y+11	; 0x0b
    6274:	aa 84       	ldd	r10, Y+10	; 0x0a
    6276:	b9 84       	ldd	r11, Y+9	; 0x09
    6278:	c8 84       	ldd	r12, Y+8	; 0x08
    627a:	df 80       	ldd	r13, Y+7	; 0x07
    627c:	ee 80       	ldd	r14, Y+6	; 0x06
    627e:	fd 80       	ldd	r15, Y+5	; 0x05
    6280:	0c 81       	ldd	r16, Y+4	; 0x04
    6282:	1b 81       	ldd	r17, Y+3	; 0x03
    6284:	aa 81       	ldd	r26, Y+2	; 0x02
    6286:	b9 81       	ldd	r27, Y+1	; 0x01
    6288:	ce 0f       	add	r28, r30
    628a:	d1 1d       	adc	r29, r1
    628c:	0f b6       	in	r0, 0x3f	; 63
    628e:	f8 94       	cli
    6290:	de bf       	out	0x3e, r29	; 62
    6292:	0f be       	out	0x3f, r0	; 63
    6294:	cd bf       	out	0x3d, r28	; 61
    6296:	ed 01       	movw	r28, r26
    6298:	08 95       	ret

0000629a <__udivmodhi4>:
    629a:	aa 1b       	sub	r26, r26
    629c:	bb 1b       	sub	r27, r27
    629e:	51 e1       	ldi	r21, 0x11	; 17
    62a0:	07 c0       	rjmp	.+14     	; 0x62b0 <__udivmodhi4_ep>

000062a2 <__udivmodhi4_loop>:
    62a2:	aa 1f       	adc	r26, r26
    62a4:	bb 1f       	adc	r27, r27
    62a6:	a6 17       	cp	r26, r22
    62a8:	b7 07       	cpc	r27, r23
    62aa:	10 f0       	brcs	.+4      	; 0x62b0 <__udivmodhi4_ep>
    62ac:	a6 1b       	sub	r26, r22
    62ae:	b7 0b       	sbc	r27, r23

000062b0 <__udivmodhi4_ep>:
    62b0:	88 1f       	adc	r24, r24
    62b2:	99 1f       	adc	r25, r25
    62b4:	5a 95       	dec	r21
    62b6:	a9 f7       	brne	.-22     	; 0x62a2 <__udivmodhi4_loop>
    62b8:	80 95       	com	r24
    62ba:	90 95       	com	r25
    62bc:	bc 01       	movw	r22, r24
    62be:	cd 01       	movw	r24, r26
    62c0:	08 95       	ret

000062c2 <malloc>:
    62c2:	cf 93       	push	r28
    62c4:	df 93       	push	r29
    62c6:	bc 01       	movw	r22, r24
    62c8:	82 30       	cpi	r24, 0x02	; 2
    62ca:	91 05       	cpc	r25, r1
    62cc:	10 f4       	brcc	.+4      	; 0x62d2 <malloc+0x10>
    62ce:	62 e0       	ldi	r22, 0x02	; 2
    62d0:	70 e0       	ldi	r23, 0x00	; 0
    62d2:	a0 91 c9 06 	lds	r26, 0x06C9
    62d6:	b0 91 ca 06 	lds	r27, 0x06CA
    62da:	ed 01       	movw	r28, r26
    62dc:	e0 e0       	ldi	r30, 0x00	; 0
    62de:	f0 e0       	ldi	r31, 0x00	; 0
    62e0:	40 e0       	ldi	r20, 0x00	; 0
    62e2:	50 e0       	ldi	r21, 0x00	; 0
    62e4:	21 c0       	rjmp	.+66     	; 0x6328 <malloc+0x66>
    62e6:	88 81       	ld	r24, Y
    62e8:	99 81       	ldd	r25, Y+1	; 0x01
    62ea:	86 17       	cp	r24, r22
    62ec:	97 07       	cpc	r25, r23
    62ee:	69 f4       	brne	.+26     	; 0x630a <malloc+0x48>
    62f0:	8a 81       	ldd	r24, Y+2	; 0x02
    62f2:	9b 81       	ldd	r25, Y+3	; 0x03
    62f4:	30 97       	sbiw	r30, 0x00	; 0
    62f6:	19 f0       	breq	.+6      	; 0x62fe <malloc+0x3c>
    62f8:	93 83       	std	Z+3, r25	; 0x03
    62fa:	82 83       	std	Z+2, r24	; 0x02
    62fc:	04 c0       	rjmp	.+8      	; 0x6306 <malloc+0x44>
    62fe:	90 93 ca 06 	sts	0x06CA, r25
    6302:	80 93 c9 06 	sts	0x06C9, r24
    6306:	fe 01       	movw	r30, r28
    6308:	34 c0       	rjmp	.+104    	; 0x6372 <malloc+0xb0>
    630a:	68 17       	cp	r22, r24
    630c:	79 07       	cpc	r23, r25
    630e:	38 f4       	brcc	.+14     	; 0x631e <malloc+0x5c>
    6310:	41 15       	cp	r20, r1
    6312:	51 05       	cpc	r21, r1
    6314:	19 f0       	breq	.+6      	; 0x631c <malloc+0x5a>
    6316:	84 17       	cp	r24, r20
    6318:	95 07       	cpc	r25, r21
    631a:	08 f4       	brcc	.+2      	; 0x631e <malloc+0x5c>
    631c:	ac 01       	movw	r20, r24
    631e:	fe 01       	movw	r30, r28
    6320:	8a 81       	ldd	r24, Y+2	; 0x02
    6322:	9b 81       	ldd	r25, Y+3	; 0x03
    6324:	9c 01       	movw	r18, r24
    6326:	e9 01       	movw	r28, r18
    6328:	20 97       	sbiw	r28, 0x00	; 0
    632a:	e9 f6       	brne	.-70     	; 0x62e6 <malloc+0x24>
    632c:	41 15       	cp	r20, r1
    632e:	51 05       	cpc	r21, r1
    6330:	a9 f1       	breq	.+106    	; 0x639c <malloc+0xda>
    6332:	ca 01       	movw	r24, r20
    6334:	86 1b       	sub	r24, r22
    6336:	97 0b       	sbc	r25, r23
    6338:	04 97       	sbiw	r24, 0x04	; 4
    633a:	08 f4       	brcc	.+2      	; 0x633e <malloc+0x7c>
    633c:	ba 01       	movw	r22, r20
    633e:	e0 e0       	ldi	r30, 0x00	; 0
    6340:	f0 e0       	ldi	r31, 0x00	; 0
    6342:	2a c0       	rjmp	.+84     	; 0x6398 <malloc+0xd6>
    6344:	8d 91       	ld	r24, X+
    6346:	9c 91       	ld	r25, X
    6348:	11 97       	sbiw	r26, 0x01	; 1
    634a:	84 17       	cp	r24, r20
    634c:	95 07       	cpc	r25, r21
    634e:	f9 f4       	brne	.+62     	; 0x638e <malloc+0xcc>
    6350:	64 17       	cp	r22, r20
    6352:	75 07       	cpc	r23, r21
    6354:	81 f4       	brne	.+32     	; 0x6376 <malloc+0xb4>
    6356:	12 96       	adiw	r26, 0x02	; 2
    6358:	8d 91       	ld	r24, X+
    635a:	9c 91       	ld	r25, X
    635c:	13 97       	sbiw	r26, 0x03	; 3
    635e:	30 97       	sbiw	r30, 0x00	; 0
    6360:	19 f0       	breq	.+6      	; 0x6368 <malloc+0xa6>
    6362:	93 83       	std	Z+3, r25	; 0x03
    6364:	82 83       	std	Z+2, r24	; 0x02
    6366:	04 c0       	rjmp	.+8      	; 0x6370 <malloc+0xae>
    6368:	90 93 ca 06 	sts	0x06CA, r25
    636c:	80 93 c9 06 	sts	0x06C9, r24
    6370:	fd 01       	movw	r30, r26
    6372:	32 96       	adiw	r30, 0x02	; 2
    6374:	4f c0       	rjmp	.+158    	; 0x6414 <malloc+0x152>
    6376:	ca 01       	movw	r24, r20
    6378:	86 1b       	sub	r24, r22
    637a:	97 0b       	sbc	r25, r23
    637c:	fd 01       	movw	r30, r26
    637e:	e8 0f       	add	r30, r24
    6380:	f9 1f       	adc	r31, r25
    6382:	61 93       	st	Z+, r22
    6384:	71 93       	st	Z+, r23
    6386:	02 97       	sbiw	r24, 0x02	; 2
    6388:	8d 93       	st	X+, r24
    638a:	9c 93       	st	X, r25
    638c:	43 c0       	rjmp	.+134    	; 0x6414 <malloc+0x152>
    638e:	fd 01       	movw	r30, r26
    6390:	82 81       	ldd	r24, Z+2	; 0x02
    6392:	93 81       	ldd	r25, Z+3	; 0x03
    6394:	9c 01       	movw	r18, r24
    6396:	d9 01       	movw	r26, r18
    6398:	10 97       	sbiw	r26, 0x00	; 0
    639a:	a1 f6       	brne	.-88     	; 0x6344 <malloc+0x82>
    639c:	80 91 c7 06 	lds	r24, 0x06C7
    63a0:	90 91 c8 06 	lds	r25, 0x06C8
    63a4:	89 2b       	or	r24, r25
    63a6:	41 f4       	brne	.+16     	; 0x63b8 <malloc+0xf6>
    63a8:	80 91 a8 03 	lds	r24, 0x03A8
    63ac:	90 91 a9 03 	lds	r25, 0x03A9
    63b0:	90 93 c8 06 	sts	0x06C8, r25
    63b4:	80 93 c7 06 	sts	0x06C7, r24
    63b8:	40 91 aa 03 	lds	r20, 0x03AA
    63bc:	50 91 ab 03 	lds	r21, 0x03AB
    63c0:	41 15       	cp	r20, r1
    63c2:	51 05       	cpc	r21, r1
    63c4:	41 f4       	brne	.+16     	; 0x63d6 <malloc+0x114>
    63c6:	4d b7       	in	r20, 0x3d	; 61
    63c8:	5e b7       	in	r21, 0x3e	; 62
    63ca:	80 91 a6 03 	lds	r24, 0x03A6
    63ce:	90 91 a7 03 	lds	r25, 0x03A7
    63d2:	48 1b       	sub	r20, r24
    63d4:	59 0b       	sbc	r21, r25
    63d6:	20 91 c7 06 	lds	r18, 0x06C7
    63da:	30 91 c8 06 	lds	r19, 0x06C8
    63de:	24 17       	cp	r18, r20
    63e0:	35 07       	cpc	r19, r21
    63e2:	b0 f4       	brcc	.+44     	; 0x6410 <malloc+0x14e>
    63e4:	ca 01       	movw	r24, r20
    63e6:	82 1b       	sub	r24, r18
    63e8:	93 0b       	sbc	r25, r19
    63ea:	86 17       	cp	r24, r22
    63ec:	97 07       	cpc	r25, r23
    63ee:	80 f0       	brcs	.+32     	; 0x6410 <malloc+0x14e>
    63f0:	ab 01       	movw	r20, r22
    63f2:	4e 5f       	subi	r20, 0xFE	; 254
    63f4:	5f 4f       	sbci	r21, 0xFF	; 255
    63f6:	84 17       	cp	r24, r20
    63f8:	95 07       	cpc	r25, r21
    63fa:	50 f0       	brcs	.+20     	; 0x6410 <malloc+0x14e>
    63fc:	42 0f       	add	r20, r18
    63fe:	53 1f       	adc	r21, r19
    6400:	50 93 c8 06 	sts	0x06C8, r21
    6404:	40 93 c7 06 	sts	0x06C7, r20
    6408:	f9 01       	movw	r30, r18
    640a:	61 93       	st	Z+, r22
    640c:	71 93       	st	Z+, r23
    640e:	02 c0       	rjmp	.+4      	; 0x6414 <malloc+0x152>
    6410:	e0 e0       	ldi	r30, 0x00	; 0
    6412:	f0 e0       	ldi	r31, 0x00	; 0
    6414:	cf 01       	movw	r24, r30
    6416:	df 91       	pop	r29
    6418:	cf 91       	pop	r28
    641a:	08 95       	ret

0000641c <free>:
    641c:	cf 93       	push	r28
    641e:	df 93       	push	r29
    6420:	00 97       	sbiw	r24, 0x00	; 0
    6422:	09 f4       	brne	.+2      	; 0x6426 <free+0xa>
    6424:	50 c0       	rjmp	.+160    	; 0x64c6 <free+0xaa>
    6426:	ec 01       	movw	r28, r24
    6428:	22 97       	sbiw	r28, 0x02	; 2
    642a:	1b 82       	std	Y+3, r1	; 0x03
    642c:	1a 82       	std	Y+2, r1	; 0x02
    642e:	a0 91 c9 06 	lds	r26, 0x06C9
    6432:	b0 91 ca 06 	lds	r27, 0x06CA
    6436:	10 97       	sbiw	r26, 0x00	; 0
    6438:	09 f1       	breq	.+66     	; 0x647c <free+0x60>
    643a:	40 e0       	ldi	r20, 0x00	; 0
    643c:	50 e0       	ldi	r21, 0x00	; 0
    643e:	ac 17       	cp	r26, r28
    6440:	bd 07       	cpc	r27, r29
    6442:	08 f1       	brcs	.+66     	; 0x6486 <free+0x6a>
    6444:	bb 83       	std	Y+3, r27	; 0x03
    6446:	aa 83       	std	Y+2, r26	; 0x02
    6448:	fe 01       	movw	r30, r28
    644a:	21 91       	ld	r18, Z+
    644c:	31 91       	ld	r19, Z+
    644e:	e2 0f       	add	r30, r18
    6450:	f3 1f       	adc	r31, r19
    6452:	ae 17       	cp	r26, r30
    6454:	bf 07       	cpc	r27, r31
    6456:	79 f4       	brne	.+30     	; 0x6476 <free+0x5a>
    6458:	8d 91       	ld	r24, X+
    645a:	9c 91       	ld	r25, X
    645c:	11 97       	sbiw	r26, 0x01	; 1
    645e:	28 0f       	add	r18, r24
    6460:	39 1f       	adc	r19, r25
    6462:	2e 5f       	subi	r18, 0xFE	; 254
    6464:	3f 4f       	sbci	r19, 0xFF	; 255
    6466:	39 83       	std	Y+1, r19	; 0x01
    6468:	28 83       	st	Y, r18
    646a:	12 96       	adiw	r26, 0x02	; 2
    646c:	8d 91       	ld	r24, X+
    646e:	9c 91       	ld	r25, X
    6470:	13 97       	sbiw	r26, 0x03	; 3
    6472:	9b 83       	std	Y+3, r25	; 0x03
    6474:	8a 83       	std	Y+2, r24	; 0x02
    6476:	41 15       	cp	r20, r1
    6478:	51 05       	cpc	r21, r1
    647a:	71 f4       	brne	.+28     	; 0x6498 <free+0x7c>
    647c:	d0 93 ca 06 	sts	0x06CA, r29
    6480:	c0 93 c9 06 	sts	0x06C9, r28
    6484:	20 c0       	rjmp	.+64     	; 0x64c6 <free+0xaa>
    6486:	12 96       	adiw	r26, 0x02	; 2
    6488:	8d 91       	ld	r24, X+
    648a:	9c 91       	ld	r25, X
    648c:	13 97       	sbiw	r26, 0x03	; 3
    648e:	ad 01       	movw	r20, r26
    6490:	00 97       	sbiw	r24, 0x00	; 0
    6492:	11 f0       	breq	.+4      	; 0x6498 <free+0x7c>
    6494:	dc 01       	movw	r26, r24
    6496:	d3 cf       	rjmp	.-90     	; 0x643e <free+0x22>
    6498:	fa 01       	movw	r30, r20
    649a:	d3 83       	std	Z+3, r29	; 0x03
    649c:	c2 83       	std	Z+2, r28	; 0x02
    649e:	21 91       	ld	r18, Z+
    64a0:	31 91       	ld	r19, Z+
    64a2:	e2 0f       	add	r30, r18
    64a4:	f3 1f       	adc	r31, r19
    64a6:	ce 17       	cp	r28, r30
    64a8:	df 07       	cpc	r29, r31
    64aa:	69 f4       	brne	.+26     	; 0x64c6 <free+0xaa>
    64ac:	88 81       	ld	r24, Y
    64ae:	99 81       	ldd	r25, Y+1	; 0x01
    64b0:	28 0f       	add	r18, r24
    64b2:	39 1f       	adc	r19, r25
    64b4:	2e 5f       	subi	r18, 0xFE	; 254
    64b6:	3f 4f       	sbci	r19, 0xFF	; 255
    64b8:	fa 01       	movw	r30, r20
    64ba:	31 83       	std	Z+1, r19	; 0x01
    64bc:	20 83       	st	Z, r18
    64be:	8a 81       	ldd	r24, Y+2	; 0x02
    64c0:	9b 81       	ldd	r25, Y+3	; 0x03
    64c2:	93 83       	std	Z+3, r25	; 0x03
    64c4:	82 83       	std	Z+2, r24	; 0x02
    64c6:	df 91       	pop	r29
    64c8:	cf 91       	pop	r28
    64ca:	08 95       	ret

000064cc <do_rand>:
    64cc:	a0 e0       	ldi	r26, 0x00	; 0
    64ce:	b0 e0       	ldi	r27, 0x00	; 0
    64d0:	eb e6       	ldi	r30, 0x6B	; 107
    64d2:	f2 e3       	ldi	r31, 0x32	; 50
    64d4:	b3 ce       	rjmp	.-666    	; 0x623c <__prologue_saves__+0x10>
    64d6:	ec 01       	movw	r28, r24
    64d8:	a8 80       	ld	r10, Y
    64da:	b9 80       	ldd	r11, Y+1	; 0x01
    64dc:	ca 80       	ldd	r12, Y+2	; 0x02
    64de:	db 80       	ldd	r13, Y+3	; 0x03
    64e0:	a1 14       	cp	r10, r1
    64e2:	b1 04       	cpc	r11, r1
    64e4:	c1 04       	cpc	r12, r1
    64e6:	d1 04       	cpc	r13, r1
    64e8:	41 f4       	brne	.+16     	; 0x64fa <do_rand+0x2e>
    64ea:	84 e2       	ldi	r24, 0x24	; 36
    64ec:	a8 2e       	mov	r10, r24
    64ee:	89 ed       	ldi	r24, 0xD9	; 217
    64f0:	b8 2e       	mov	r11, r24
    64f2:	8b e5       	ldi	r24, 0x5B	; 91
    64f4:	c8 2e       	mov	r12, r24
    64f6:	87 e0       	ldi	r24, 0x07	; 7
    64f8:	d8 2e       	mov	r13, r24
    64fa:	c6 01       	movw	r24, r12
    64fc:	b5 01       	movw	r22, r10
    64fe:	2d e1       	ldi	r18, 0x1D	; 29
    6500:	33 ef       	ldi	r19, 0xF3	; 243
    6502:	41 e0       	ldi	r20, 0x01	; 1
    6504:	50 e0       	ldi	r21, 0x00	; 0
    6506:	fa d1       	rcall	.+1012   	; 0x68fc <__divmodsi4>
    6508:	27 ea       	ldi	r18, 0xA7	; 167
    650a:	31 e4       	ldi	r19, 0x41	; 65
    650c:	40 e0       	ldi	r20, 0x00	; 0
    650e:	50 e0       	ldi	r21, 0x00	; 0
    6510:	39 de       	rcall	.-910    	; 0x6184 <__mulsi3>
    6512:	7b 01       	movw	r14, r22
    6514:	8c 01       	movw	r16, r24
    6516:	c6 01       	movw	r24, r12
    6518:	b5 01       	movw	r22, r10
    651a:	2d e1       	ldi	r18, 0x1D	; 29
    651c:	33 ef       	ldi	r19, 0xF3	; 243
    651e:	41 e0       	ldi	r20, 0x01	; 1
    6520:	50 e0       	ldi	r21, 0x00	; 0
    6522:	ec d1       	rcall	.+984    	; 0x68fc <__divmodsi4>
    6524:	ca 01       	movw	r24, r20
    6526:	b9 01       	movw	r22, r18
    6528:	2c ee       	ldi	r18, 0xEC	; 236
    652a:	34 ef       	ldi	r19, 0xF4	; 244
    652c:	4f ef       	ldi	r20, 0xFF	; 255
    652e:	5f ef       	ldi	r21, 0xFF	; 255
    6530:	29 de       	rcall	.-942    	; 0x6184 <__mulsi3>
    6532:	6e 0d       	add	r22, r14
    6534:	7f 1d       	adc	r23, r15
    6536:	80 1f       	adc	r24, r16
    6538:	91 1f       	adc	r25, r17
    653a:	97 ff       	sbrs	r25, 7
    653c:	04 c0       	rjmp	.+8      	; 0x6546 <do_rand+0x7a>
    653e:	61 50       	subi	r22, 0x01	; 1
    6540:	70 40       	sbci	r23, 0x00	; 0
    6542:	80 40       	sbci	r24, 0x00	; 0
    6544:	90 48       	sbci	r25, 0x80	; 128
    6546:	68 83       	st	Y, r22
    6548:	79 83       	std	Y+1, r23	; 0x01
    654a:	8a 83       	std	Y+2, r24	; 0x02
    654c:	9b 83       	std	Y+3, r25	; 0x03
    654e:	9b 01       	movw	r18, r22
    6550:	3f 77       	andi	r19, 0x7F	; 127
    6552:	c9 01       	movw	r24, r18
    6554:	cd b7       	in	r28, 0x3d	; 61
    6556:	de b7       	in	r29, 0x3e	; 62
    6558:	ea e0       	ldi	r30, 0x0A	; 10
    655a:	8c ce       	rjmp	.-744    	; 0x6274 <__epilogue_restores__+0x10>

0000655c <rand_r>:
    655c:	b7 df       	rcall	.-146    	; 0x64cc <do_rand>
    655e:	08 95       	ret

00006560 <rand>:
    6560:	8c ea       	ldi	r24, 0xAC	; 172
    6562:	93 e0       	ldi	r25, 0x03	; 3
    6564:	b3 df       	rcall	.-154    	; 0x64cc <do_rand>
    6566:	08 95       	ret

00006568 <srand>:
    6568:	a0 e0       	ldi	r26, 0x00	; 0
    656a:	b0 e0       	ldi	r27, 0x00	; 0
    656c:	80 93 ac 03 	sts	0x03AC, r24
    6570:	90 93 ad 03 	sts	0x03AD, r25
    6574:	a0 93 ae 03 	sts	0x03AE, r26
    6578:	b0 93 af 03 	sts	0x03AF, r27
    657c:	08 95       	ret

0000657e <__ftoa_engine>:
    657e:	28 30       	cpi	r18, 0x08	; 8
    6580:	08 f0       	brcs	.+2      	; 0x6584 <__ftoa_engine+0x6>
    6582:	27 e0       	ldi	r18, 0x07	; 7
    6584:	33 27       	eor	r19, r19
    6586:	da 01       	movw	r26, r20
    6588:	99 0f       	add	r25, r25
    658a:	31 1d       	adc	r19, r1
    658c:	87 fd       	sbrc	r24, 7
    658e:	91 60       	ori	r25, 0x01	; 1
    6590:	00 96       	adiw	r24, 0x00	; 0
    6592:	61 05       	cpc	r22, r1
    6594:	71 05       	cpc	r23, r1
    6596:	39 f4       	brne	.+14     	; 0x65a6 <__ftoa_engine+0x28>
    6598:	32 60       	ori	r19, 0x02	; 2
    659a:	2e 5f       	subi	r18, 0xFE	; 254
    659c:	3d 93       	st	X+, r19
    659e:	30 e3       	ldi	r19, 0x30	; 48
    65a0:	2a 95       	dec	r18
    65a2:	e1 f7       	brne	.-8      	; 0x659c <__ftoa_engine+0x1e>
    65a4:	08 95       	ret
    65a6:	9f 3f       	cpi	r25, 0xFF	; 255
    65a8:	30 f0       	brcs	.+12     	; 0x65b6 <__ftoa_engine+0x38>
    65aa:	80 38       	cpi	r24, 0x80	; 128
    65ac:	71 05       	cpc	r23, r1
    65ae:	61 05       	cpc	r22, r1
    65b0:	09 f0       	breq	.+2      	; 0x65b4 <__ftoa_engine+0x36>
    65b2:	3c 5f       	subi	r19, 0xFC	; 252
    65b4:	3c 5f       	subi	r19, 0xFC	; 252
    65b6:	3d 93       	st	X+, r19
    65b8:	91 30       	cpi	r25, 0x01	; 1
    65ba:	08 f0       	brcs	.+2      	; 0x65be <__ftoa_engine+0x40>
    65bc:	80 68       	ori	r24, 0x80	; 128
    65be:	91 1d       	adc	r25, r1
    65c0:	df 93       	push	r29
    65c2:	cf 93       	push	r28
    65c4:	1f 93       	push	r17
    65c6:	0f 93       	push	r16
    65c8:	ff 92       	push	r15
    65ca:	ef 92       	push	r14
    65cc:	19 2f       	mov	r17, r25
    65ce:	98 7f       	andi	r25, 0xF8	; 248
    65d0:	96 95       	lsr	r25
    65d2:	e9 2f       	mov	r30, r25
    65d4:	96 95       	lsr	r25
    65d6:	96 95       	lsr	r25
    65d8:	e9 0f       	add	r30, r25
    65da:	ff 27       	eor	r31, r31
    65dc:	ef 53       	subi	r30, 0x3F	; 63
    65de:	fa 4f       	sbci	r31, 0xFA	; 250
    65e0:	99 27       	eor	r25, r25
    65e2:	33 27       	eor	r19, r19
    65e4:	ee 24       	eor	r14, r14
    65e6:	ff 24       	eor	r15, r15
    65e8:	a7 01       	movw	r20, r14
    65ea:	e7 01       	movw	r28, r14
    65ec:	05 90       	lpm	r0, Z+
    65ee:	08 94       	sec
    65f0:	07 94       	ror	r0
    65f2:	28 f4       	brcc	.+10     	; 0x65fe <__ftoa_engine+0x80>
    65f4:	36 0f       	add	r19, r22
    65f6:	e7 1e       	adc	r14, r23
    65f8:	f8 1e       	adc	r15, r24
    65fa:	49 1f       	adc	r20, r25
    65fc:	51 1d       	adc	r21, r1
    65fe:	66 0f       	add	r22, r22
    6600:	77 1f       	adc	r23, r23
    6602:	88 1f       	adc	r24, r24
    6604:	99 1f       	adc	r25, r25
    6606:	06 94       	lsr	r0
    6608:	a1 f7       	brne	.-24     	; 0x65f2 <__ftoa_engine+0x74>
    660a:	05 90       	lpm	r0, Z+
    660c:	07 94       	ror	r0
    660e:	28 f4       	brcc	.+10     	; 0x661a <__ftoa_engine+0x9c>
    6610:	e7 0e       	add	r14, r23
    6612:	f8 1e       	adc	r15, r24
    6614:	49 1f       	adc	r20, r25
    6616:	56 1f       	adc	r21, r22
    6618:	c1 1d       	adc	r28, r1
    661a:	77 0f       	add	r23, r23
    661c:	88 1f       	adc	r24, r24
    661e:	99 1f       	adc	r25, r25
    6620:	66 1f       	adc	r22, r22
    6622:	06 94       	lsr	r0
    6624:	a1 f7       	brne	.-24     	; 0x660e <__ftoa_engine+0x90>
    6626:	05 90       	lpm	r0, Z+
    6628:	07 94       	ror	r0
    662a:	28 f4       	brcc	.+10     	; 0x6636 <__ftoa_engine+0xb8>
    662c:	f8 0e       	add	r15, r24
    662e:	49 1f       	adc	r20, r25
    6630:	56 1f       	adc	r21, r22
    6632:	c7 1f       	adc	r28, r23
    6634:	d1 1d       	adc	r29, r1
    6636:	88 0f       	add	r24, r24
    6638:	99 1f       	adc	r25, r25
    663a:	66 1f       	adc	r22, r22
    663c:	77 1f       	adc	r23, r23
    663e:	06 94       	lsr	r0
    6640:	a1 f7       	brne	.-24     	; 0x662a <__ftoa_engine+0xac>
    6642:	05 90       	lpm	r0, Z+
    6644:	07 94       	ror	r0
    6646:	20 f4       	brcc	.+8      	; 0x6650 <__ftoa_engine+0xd2>
    6648:	49 0f       	add	r20, r25
    664a:	56 1f       	adc	r21, r22
    664c:	c7 1f       	adc	r28, r23
    664e:	d8 1f       	adc	r29, r24
    6650:	99 0f       	add	r25, r25
    6652:	66 1f       	adc	r22, r22
    6654:	77 1f       	adc	r23, r23
    6656:	88 1f       	adc	r24, r24
    6658:	06 94       	lsr	r0
    665a:	a9 f7       	brne	.-22     	; 0x6646 <__ftoa_engine+0xc8>
    665c:	84 91       	lpm	r24, Z+
    665e:	10 95       	com	r17
    6660:	17 70       	andi	r17, 0x07	; 7
    6662:	41 f0       	breq	.+16     	; 0x6674 <__ftoa_engine+0xf6>
    6664:	d6 95       	lsr	r29
    6666:	c7 95       	ror	r28
    6668:	57 95       	ror	r21
    666a:	47 95       	ror	r20
    666c:	f7 94       	ror	r15
    666e:	e7 94       	ror	r14
    6670:	1a 95       	dec	r17
    6672:	c1 f7       	brne	.-16     	; 0x6664 <__ftoa_engine+0xe6>
    6674:	e7 e6       	ldi	r30, 0x67	; 103
    6676:	f5 e0       	ldi	r31, 0x05	; 5
    6678:	68 94       	set
    667a:	15 90       	lpm	r1, Z+
    667c:	15 91       	lpm	r17, Z+
    667e:	35 91       	lpm	r19, Z+
    6680:	65 91       	lpm	r22, Z+
    6682:	95 91       	lpm	r25, Z+
    6684:	05 90       	lpm	r0, Z+
    6686:	7f e2       	ldi	r23, 0x2F	; 47
    6688:	73 95       	inc	r23
    668a:	e1 18       	sub	r14, r1
    668c:	f1 0a       	sbc	r15, r17
    668e:	43 0b       	sbc	r20, r19
    6690:	56 0b       	sbc	r21, r22
    6692:	c9 0b       	sbc	r28, r25
    6694:	d0 09       	sbc	r29, r0
    6696:	c0 f7       	brcc	.-16     	; 0x6688 <__ftoa_engine+0x10a>
    6698:	e1 0c       	add	r14, r1
    669a:	f1 1e       	adc	r15, r17
    669c:	43 1f       	adc	r20, r19
    669e:	56 1f       	adc	r21, r22
    66a0:	c9 1f       	adc	r28, r25
    66a2:	d0 1d       	adc	r29, r0
    66a4:	7e f4       	brtc	.+30     	; 0x66c4 <__ftoa_engine+0x146>
    66a6:	70 33       	cpi	r23, 0x30	; 48
    66a8:	11 f4       	brne	.+4      	; 0x66ae <__ftoa_engine+0x130>
    66aa:	8a 95       	dec	r24
    66ac:	e6 cf       	rjmp	.-52     	; 0x667a <__ftoa_engine+0xfc>
    66ae:	e8 94       	clt
    66b0:	01 50       	subi	r16, 0x01	; 1
    66b2:	30 f0       	brcs	.+12     	; 0x66c0 <__ftoa_engine+0x142>
    66b4:	08 0f       	add	r16, r24
    66b6:	0a f4       	brpl	.+2      	; 0x66ba <__ftoa_engine+0x13c>
    66b8:	00 27       	eor	r16, r16
    66ba:	02 17       	cp	r16, r18
    66bc:	08 f4       	brcc	.+2      	; 0x66c0 <__ftoa_engine+0x142>
    66be:	20 2f       	mov	r18, r16
    66c0:	23 95       	inc	r18
    66c2:	02 2f       	mov	r16, r18
    66c4:	7a 33       	cpi	r23, 0x3A	; 58
    66c6:	28 f0       	brcs	.+10     	; 0x66d2 <__ftoa_engine+0x154>
    66c8:	79 e3       	ldi	r23, 0x39	; 57
    66ca:	7d 93       	st	X+, r23
    66cc:	2a 95       	dec	r18
    66ce:	e9 f7       	brne	.-6      	; 0x66ca <__ftoa_engine+0x14c>
    66d0:	10 c0       	rjmp	.+32     	; 0x66f2 <__ftoa_engine+0x174>
    66d2:	7d 93       	st	X+, r23
    66d4:	2a 95       	dec	r18
    66d6:	89 f6       	brne	.-94     	; 0x667a <__ftoa_engine+0xfc>
    66d8:	06 94       	lsr	r0
    66da:	97 95       	ror	r25
    66dc:	67 95       	ror	r22
    66de:	37 95       	ror	r19
    66e0:	17 95       	ror	r17
    66e2:	17 94       	ror	r1
    66e4:	e1 18       	sub	r14, r1
    66e6:	f1 0a       	sbc	r15, r17
    66e8:	43 0b       	sbc	r20, r19
    66ea:	56 0b       	sbc	r21, r22
    66ec:	c9 0b       	sbc	r28, r25
    66ee:	d0 09       	sbc	r29, r0
    66f0:	98 f0       	brcs	.+38     	; 0x6718 <__ftoa_engine+0x19a>
    66f2:	23 95       	inc	r18
    66f4:	7e 91       	ld	r23, -X
    66f6:	73 95       	inc	r23
    66f8:	7a 33       	cpi	r23, 0x3A	; 58
    66fa:	08 f0       	brcs	.+2      	; 0x66fe <__ftoa_engine+0x180>
    66fc:	70 e3       	ldi	r23, 0x30	; 48
    66fe:	7c 93       	st	X, r23
    6700:	20 13       	cpse	r18, r16
    6702:	b8 f7       	brcc	.-18     	; 0x66f2 <__ftoa_engine+0x174>
    6704:	7e 91       	ld	r23, -X
    6706:	70 61       	ori	r23, 0x10	; 16
    6708:	7d 93       	st	X+, r23
    670a:	30 f0       	brcs	.+12     	; 0x6718 <__ftoa_engine+0x19a>
    670c:	83 95       	inc	r24
    670e:	71 e3       	ldi	r23, 0x31	; 49
    6710:	7d 93       	st	X+, r23
    6712:	70 e3       	ldi	r23, 0x30	; 48
    6714:	2a 95       	dec	r18
    6716:	e1 f7       	brne	.-8      	; 0x6710 <__ftoa_engine+0x192>
    6718:	11 24       	eor	r1, r1
    671a:	ef 90       	pop	r14
    671c:	ff 90       	pop	r15
    671e:	0f 91       	pop	r16
    6720:	1f 91       	pop	r17
    6722:	cf 91       	pop	r28
    6724:	df 91       	pop	r29
    6726:	99 27       	eor	r25, r25
    6728:	87 fd       	sbrc	r24, 7
    672a:	90 95       	com	r25
    672c:	08 95       	ret

0000672e <strnlen_P>:
    672e:	fc 01       	movw	r30, r24
    6730:	05 90       	lpm	r0, Z+
    6732:	61 50       	subi	r22, 0x01	; 1
    6734:	70 40       	sbci	r23, 0x00	; 0
    6736:	01 10       	cpse	r0, r1
    6738:	d8 f7       	brcc	.-10     	; 0x6730 <strnlen_P+0x2>
    673a:	80 95       	com	r24
    673c:	90 95       	com	r25
    673e:	8e 0f       	add	r24, r30
    6740:	9f 1f       	adc	r25, r31
    6742:	08 95       	ret

00006744 <strnlen>:
    6744:	fc 01       	movw	r30, r24
    6746:	61 50       	subi	r22, 0x01	; 1
    6748:	70 40       	sbci	r23, 0x00	; 0
    674a:	01 90       	ld	r0, Z+
    674c:	01 10       	cpse	r0, r1
    674e:	d8 f7       	brcc	.-10     	; 0x6746 <strnlen+0x2>
    6750:	80 95       	com	r24
    6752:	90 95       	com	r25
    6754:	8e 0f       	add	r24, r30
    6756:	9f 1f       	adc	r25, r31
    6758:	08 95       	ret

0000675a <fputc>:
    675a:	0f 93       	push	r16
    675c:	1f 93       	push	r17
    675e:	cf 93       	push	r28
    6760:	df 93       	push	r29
    6762:	8c 01       	movw	r16, r24
    6764:	eb 01       	movw	r28, r22
    6766:	8b 81       	ldd	r24, Y+3	; 0x03
    6768:	81 ff       	sbrs	r24, 1
    676a:	1b c0       	rjmp	.+54     	; 0x67a2 <fputc+0x48>
    676c:	82 ff       	sbrs	r24, 2
    676e:	0d c0       	rjmp	.+26     	; 0x678a <fputc+0x30>
    6770:	2e 81       	ldd	r18, Y+6	; 0x06
    6772:	3f 81       	ldd	r19, Y+7	; 0x07
    6774:	8c 81       	ldd	r24, Y+4	; 0x04
    6776:	9d 81       	ldd	r25, Y+5	; 0x05
    6778:	28 17       	cp	r18, r24
    677a:	39 07       	cpc	r19, r25
    677c:	64 f4       	brge	.+24     	; 0x6796 <fputc+0x3c>
    677e:	e8 81       	ld	r30, Y
    6780:	f9 81       	ldd	r31, Y+1	; 0x01
    6782:	01 93       	st	Z+, r16
    6784:	f9 83       	std	Y+1, r31	; 0x01
    6786:	e8 83       	st	Y, r30
    6788:	06 c0       	rjmp	.+12     	; 0x6796 <fputc+0x3c>
    678a:	e8 85       	ldd	r30, Y+8	; 0x08
    678c:	f9 85       	ldd	r31, Y+9	; 0x09
    678e:	80 2f       	mov	r24, r16
    6790:	09 95       	icall
    6792:	89 2b       	or	r24, r25
    6794:	31 f4       	brne	.+12     	; 0x67a2 <fputc+0x48>
    6796:	8e 81       	ldd	r24, Y+6	; 0x06
    6798:	9f 81       	ldd	r25, Y+7	; 0x07
    679a:	01 96       	adiw	r24, 0x01	; 1
    679c:	9f 83       	std	Y+7, r25	; 0x07
    679e:	8e 83       	std	Y+6, r24	; 0x06
    67a0:	02 c0       	rjmp	.+4      	; 0x67a6 <fputc+0x4c>
    67a2:	0f ef       	ldi	r16, 0xFF	; 255
    67a4:	1f ef       	ldi	r17, 0xFF	; 255
    67a6:	c8 01       	movw	r24, r16
    67a8:	df 91       	pop	r29
    67aa:	cf 91       	pop	r28
    67ac:	1f 91       	pop	r17
    67ae:	0f 91       	pop	r16
    67b0:	08 95       	ret

000067b2 <printf>:
    67b2:	a0 e0       	ldi	r26, 0x00	; 0
    67b4:	b0 e0       	ldi	r27, 0x00	; 0
    67b6:	ee ed       	ldi	r30, 0xDE	; 222
    67b8:	f3 e3       	ldi	r31, 0x33	; 51
    67ba:	48 cd       	rjmp	.-1392   	; 0x624c <__prologue_saves__+0x20>
    67bc:	fe 01       	movw	r30, r28
    67be:	35 96       	adiw	r30, 0x05	; 5
    67c0:	61 91       	ld	r22, Z+
    67c2:	71 91       	ld	r23, Z+
    67c4:	80 91 cd 06 	lds	r24, 0x06CD
    67c8:	90 91 ce 06 	lds	r25, 0x06CE
    67cc:	af 01       	movw	r20, r30
    67ce:	72 d9       	rcall	.-3356   	; 0x5ab4 <vfprintf>
    67d0:	20 96       	adiw	r28, 0x00	; 0
    67d2:	e2 e0       	ldi	r30, 0x02	; 2
    67d4:	57 cd       	rjmp	.-1362   	; 0x6284 <__epilogue_restores__+0x20>

000067d6 <puts>:
    67d6:	0f 93       	push	r16
    67d8:	1f 93       	push	r17
    67da:	cf 93       	push	r28
    67dc:	df 93       	push	r29
    67de:	8c 01       	movw	r16, r24
    67e0:	e0 91 cd 06 	lds	r30, 0x06CD
    67e4:	f0 91 ce 06 	lds	r31, 0x06CE
    67e8:	83 81       	ldd	r24, Z+3	; 0x03
    67ea:	81 ff       	sbrs	r24, 1
    67ec:	21 c0       	rjmp	.+66     	; 0x6830 <puts+0x5a>
    67ee:	c0 e0       	ldi	r28, 0x00	; 0
    67f0:	d0 e0       	ldi	r29, 0x00	; 0
    67f2:	0d c0       	rjmp	.+26     	; 0x680e <puts+0x38>
    67f4:	e0 91 cd 06 	lds	r30, 0x06CD
    67f8:	f0 91 ce 06 	lds	r31, 0x06CE
    67fc:	20 85       	ldd	r18, Z+8	; 0x08
    67fe:	31 85       	ldd	r19, Z+9	; 0x09
    6800:	bf 01       	movw	r22, r30
    6802:	f9 01       	movw	r30, r18
    6804:	09 95       	icall
    6806:	89 2b       	or	r24, r25
    6808:	11 f0       	breq	.+4      	; 0x680e <puts+0x38>
    680a:	cf ef       	ldi	r28, 0xFF	; 255
    680c:	df ef       	ldi	r29, 0xFF	; 255
    680e:	f8 01       	movw	r30, r16
    6810:	81 91       	ld	r24, Z+
    6812:	8f 01       	movw	r16, r30
    6814:	88 23       	and	r24, r24
    6816:	71 f7       	brne	.-36     	; 0x67f4 <puts+0x1e>
    6818:	e0 91 cd 06 	lds	r30, 0x06CD
    681c:	f0 91 ce 06 	lds	r31, 0x06CE
    6820:	20 85       	ldd	r18, Z+8	; 0x08
    6822:	31 85       	ldd	r19, Z+9	; 0x09
    6824:	8a e0       	ldi	r24, 0x0A	; 10
    6826:	bf 01       	movw	r22, r30
    6828:	f9 01       	movw	r30, r18
    682a:	09 95       	icall
    682c:	89 2b       	or	r24, r25
    682e:	11 f0       	breq	.+4      	; 0x6834 <puts+0x5e>
    6830:	cf ef       	ldi	r28, 0xFF	; 255
    6832:	df ef       	ldi	r29, 0xFF	; 255
    6834:	ce 01       	movw	r24, r28
    6836:	df 91       	pop	r29
    6838:	cf 91       	pop	r28
    683a:	1f 91       	pop	r17
    683c:	0f 91       	pop	r16
    683e:	08 95       	ret

00006840 <__ultoa_invert>:
    6840:	fa 01       	movw	r30, r20
    6842:	aa 27       	eor	r26, r26
    6844:	28 30       	cpi	r18, 0x08	; 8
    6846:	51 f1       	breq	.+84     	; 0x689c <__ultoa_invert+0x5c>
    6848:	20 31       	cpi	r18, 0x10	; 16
    684a:	81 f1       	breq	.+96     	; 0x68ac <__ultoa_invert+0x6c>
    684c:	e8 94       	clt
    684e:	6f 93       	push	r22
    6850:	6e 7f       	andi	r22, 0xFE	; 254
    6852:	6e 5f       	subi	r22, 0xFE	; 254
    6854:	7f 4f       	sbci	r23, 0xFF	; 255
    6856:	8f 4f       	sbci	r24, 0xFF	; 255
    6858:	9f 4f       	sbci	r25, 0xFF	; 255
    685a:	af 4f       	sbci	r26, 0xFF	; 255
    685c:	b1 e0       	ldi	r27, 0x01	; 1
    685e:	3e d0       	rcall	.+124    	; 0x68dc <__ultoa_invert+0x9c>
    6860:	b4 e0       	ldi	r27, 0x04	; 4
    6862:	3c d0       	rcall	.+120    	; 0x68dc <__ultoa_invert+0x9c>
    6864:	67 0f       	add	r22, r23
    6866:	78 1f       	adc	r23, r24
    6868:	89 1f       	adc	r24, r25
    686a:	9a 1f       	adc	r25, r26
    686c:	a1 1d       	adc	r26, r1
    686e:	68 0f       	add	r22, r24
    6870:	79 1f       	adc	r23, r25
    6872:	8a 1f       	adc	r24, r26
    6874:	91 1d       	adc	r25, r1
    6876:	a1 1d       	adc	r26, r1
    6878:	6a 0f       	add	r22, r26
    687a:	71 1d       	adc	r23, r1
    687c:	81 1d       	adc	r24, r1
    687e:	91 1d       	adc	r25, r1
    6880:	a1 1d       	adc	r26, r1
    6882:	20 d0       	rcall	.+64     	; 0x68c4 <__ultoa_invert+0x84>
    6884:	09 f4       	brne	.+2      	; 0x6888 <__ultoa_invert+0x48>
    6886:	68 94       	set
    6888:	3f 91       	pop	r19
    688a:	2a e0       	ldi	r18, 0x0A	; 10
    688c:	26 9f       	mul	r18, r22
    688e:	11 24       	eor	r1, r1
    6890:	30 19       	sub	r19, r0
    6892:	30 5d       	subi	r19, 0xD0	; 208
    6894:	31 93       	st	Z+, r19
    6896:	de f6       	brtc	.-74     	; 0x684e <__ultoa_invert+0xe>
    6898:	cf 01       	movw	r24, r30
    689a:	08 95       	ret
    689c:	46 2f       	mov	r20, r22
    689e:	47 70       	andi	r20, 0x07	; 7
    68a0:	40 5d       	subi	r20, 0xD0	; 208
    68a2:	41 93       	st	Z+, r20
    68a4:	b3 e0       	ldi	r27, 0x03	; 3
    68a6:	0f d0       	rcall	.+30     	; 0x68c6 <__ultoa_invert+0x86>
    68a8:	c9 f7       	brne	.-14     	; 0x689c <__ultoa_invert+0x5c>
    68aa:	f6 cf       	rjmp	.-20     	; 0x6898 <__ultoa_invert+0x58>
    68ac:	46 2f       	mov	r20, r22
    68ae:	4f 70       	andi	r20, 0x0F	; 15
    68b0:	40 5d       	subi	r20, 0xD0	; 208
    68b2:	4a 33       	cpi	r20, 0x3A	; 58
    68b4:	18 f0       	brcs	.+6      	; 0x68bc <__ultoa_invert+0x7c>
    68b6:	49 5d       	subi	r20, 0xD9	; 217
    68b8:	31 fd       	sbrc	r19, 1
    68ba:	40 52       	subi	r20, 0x20	; 32
    68bc:	41 93       	st	Z+, r20
    68be:	02 d0       	rcall	.+4      	; 0x68c4 <__ultoa_invert+0x84>
    68c0:	a9 f7       	brne	.-22     	; 0x68ac <__ultoa_invert+0x6c>
    68c2:	ea cf       	rjmp	.-44     	; 0x6898 <__ultoa_invert+0x58>
    68c4:	b4 e0       	ldi	r27, 0x04	; 4
    68c6:	a6 95       	lsr	r26
    68c8:	97 95       	ror	r25
    68ca:	87 95       	ror	r24
    68cc:	77 95       	ror	r23
    68ce:	67 95       	ror	r22
    68d0:	ba 95       	dec	r27
    68d2:	c9 f7       	brne	.-14     	; 0x68c6 <__ultoa_invert+0x86>
    68d4:	00 97       	sbiw	r24, 0x00	; 0
    68d6:	61 05       	cpc	r22, r1
    68d8:	71 05       	cpc	r23, r1
    68da:	08 95       	ret
    68dc:	9b 01       	movw	r18, r22
    68de:	ac 01       	movw	r20, r24
    68e0:	0a 2e       	mov	r0, r26
    68e2:	06 94       	lsr	r0
    68e4:	57 95       	ror	r21
    68e6:	47 95       	ror	r20
    68e8:	37 95       	ror	r19
    68ea:	27 95       	ror	r18
    68ec:	ba 95       	dec	r27
    68ee:	c9 f7       	brne	.-14     	; 0x68e2 <__ultoa_invert+0xa2>
    68f0:	62 0f       	add	r22, r18
    68f2:	73 1f       	adc	r23, r19
    68f4:	84 1f       	adc	r24, r20
    68f6:	95 1f       	adc	r25, r21
    68f8:	a0 1d       	adc	r26, r0
    68fa:	08 95       	ret

000068fc <__divmodsi4>:
    68fc:	97 fb       	bst	r25, 7
    68fe:	09 2e       	mov	r0, r25
    6900:	05 26       	eor	r0, r21
    6902:	0e d0       	rcall	.+28     	; 0x6920 <__divmodsi4_neg1>
    6904:	57 fd       	sbrc	r21, 7
    6906:	04 d0       	rcall	.+8      	; 0x6910 <__divmodsi4_neg2>
    6908:	6f dc       	rcall	.-1826   	; 0x61e8 <__udivmodsi4>
    690a:	0a d0       	rcall	.+20     	; 0x6920 <__divmodsi4_neg1>
    690c:	00 1c       	adc	r0, r0
    690e:	38 f4       	brcc	.+14     	; 0x691e <__divmodsi4_exit>

00006910 <__divmodsi4_neg2>:
    6910:	50 95       	com	r21
    6912:	40 95       	com	r20
    6914:	30 95       	com	r19
    6916:	21 95       	neg	r18
    6918:	3f 4f       	sbci	r19, 0xFF	; 255
    691a:	4f 4f       	sbci	r20, 0xFF	; 255
    691c:	5f 4f       	sbci	r21, 0xFF	; 255

0000691e <__divmodsi4_exit>:
    691e:	08 95       	ret

00006920 <__divmodsi4_neg1>:
    6920:	f6 f7       	brtc	.-4      	; 0x691e <__divmodsi4_exit>
    6922:	90 95       	com	r25
    6924:	80 95       	com	r24
    6926:	70 95       	com	r23
    6928:	61 95       	neg	r22
    692a:	7f 4f       	sbci	r23, 0xFF	; 255
    692c:	8f 4f       	sbci	r24, 0xFF	; 255
    692e:	9f 4f       	sbci	r25, 0xFF	; 255
    6930:	08 95       	ret

00006932 <_exit>:
    6932:	f8 94       	cli

00006934 <__stop_program>:
    6934:	ff cf       	rjmp	.-2      	; 0x6934 <__stop_program>
