
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000388  00800100  000071a6  0000723a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000071a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c4  00800488  00800488  000075c2  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000075c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000787  00000000  00000000  00007622  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bda  00000000  00000000  00007da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043a  00000000  00000000  00009983  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018b1  00000000  00000000  00009dbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  0000b670  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d6d  00000000  00000000  0000b980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001096  00000000  00000000  0000c6ed  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 e3 24 	jmp	0x49c6	; 0x49c6 <__vector_4>
      14:	0c 94 0c 25 	jmp	0x4a18	; 0x4a18 <__vector_5>
      18:	0c 94 35 25 	jmp	0x4a6a	; 0x4a6a <__vector_6>
      1c:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 c4 23 	jmp	0x4788	; 0x4788 <__vector_9>
      28:	0c 94 ed 23 	jmp	0x47da	; 0x47da <__vector_10>
      2c:	0c 94 16 24 	jmp	0x482c	; 0x482c <__vector_11>
      30:	0c 94 91 24 	jmp	0x4922	; 0x4922 <__vector_12>
      34:	0c 94 3f 24 	jmp	0x487e	; 0x487e <__vector_13>
      38:	0c 94 68 24 	jmp	0x48d0	; 0x48d0 <__vector_14>
      3c:	0c 94 ba 24 	jmp	0x4974	; 0x4974 <__vector_15>
      40:	0c 94 49 23 	jmp	0x4692	; 0x4692 <__vector_16>
      44:	0c 94 72 23 	jmp	0x46e4	; 0x46e4 <__vector_17>
      48:	0c 94 9b 23 	jmp	0x4736	; 0x4736 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	ae 20       	and	r10, r14
      7e:	b1 20       	and	r11, r1
      80:	b4 20       	and	r11, r4
      82:	b7 20       	and	r11, r7
      84:	c0 20       	and	r12, r0
      86:	ba 20       	and	r11, r10
      88:	bd 20       	and	r11, r13
      8a:	c3 20       	and	r12, r3
      8c:	c6 20       	and	r12, r6
      8e:	c9 20       	and	r12, r9
      90:	cc 20       	and	r12, r12
      92:	cf 20       	and	r12, r15
      94:	d2 20       	and	r13, r2
      96:	d5 20       	and	r13, r5
      98:	d8 20       	and	r13, r8
      9a:	db 20       	and	r13, r11
      9c:	de 20       	and	r13, r14
      9e:	e1 20       	and	r14, r1
      a0:	e4 20       	and	r14, r4
      a2:	f5 20       	and	r15, r5
      a4:	f8 20       	and	r15, r8
      a6:	fb 20       	and	r15, r11
      a8:	fe 20       	and	r15, r14
      aa:	07 21       	and	r16, r7
      ac:	01 21       	and	r16, r1
      ae:	04 21       	and	r16, r4
      b0:	0a 21       	and	r16, r10
      b2:	0d 21       	and	r16, r13
      b4:	10 21       	and	r17, r0
      b6:	13 21       	and	r17, r3
      b8:	16 21       	and	r17, r6
      ba:	19 21       	and	r17, r9
      bc:	1c 21       	and	r17, r12
      be:	1f 21       	and	r17, r15
      c0:	22 21       	and	r18, r2
      c2:	25 21       	and	r18, r5
      c4:	28 21       	and	r18, r8
      c6:	2b 21       	and	r18, r11
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e6 ea       	ldi	r30, 0xA6	; 166
     676:	f1 e7       	ldi	r31, 0x71	; 113
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a8 38       	cpi	r26, 0x88	; 136
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	18 e0       	ldi	r17, 0x08	; 8
     686:	a8 e8       	ldi	r26, 0x88	; 136
     688:	b4 e0       	ldi	r27, 0x04	; 4
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	ac 34       	cpi	r26, 0x4C	; 76
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 18 1b 	call	0x3630	; 0x3630 <main>
     698:	0c 94 d1 38 	jmp	0x71a2	; 0x71a2 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 87 22 	call	0x450e	; 0x450e <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 87 22 	call	0x450e	; 0x450e <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 87 22 	call	0x450e	; 0x450e <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 87 22 	call	0x450e	; 0x450e <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 87 22 	call	0x450e	; 0x450e <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 87 22 	call	0x450e	; 0x450e <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 87 22 	call	0x450e	; 0x450e <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 87 22 	call	0x450e	; 0x450e <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 87 22 	call	0x450e	; 0x450e <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 87 22 	call	0x450e	; 0x450e <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 ad 22 	call	0x455a	; 0x455a <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 5b 22 	call	0x44b6	; 0x44b6 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 0d 1b 	call	0x361a	; 0x361a <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 b9 1a 	call	0x3572	; 0x3572 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 0d 1b 	call	0x361a	; 0x361a <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 b9 1a 	call	0x3572	; 0x3572 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 0d 1b 	call	0x361a	; 0x361a <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 b9 1a 	call	0x3572	; 0x3572 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 0d 1b 	call	0x361a	; 0x361a <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 b9 1a 	call	0x3572	; 0x3572 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 0d 1b 	call	0x361a	; 0x361a <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 b9 1a 	call	0x3572	; 0x3572 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 0d 1b 	call	0x361a	; 0x361a <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 b9 1a 	call	0x3572	; 0x3572 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 04 05 	sts	0x0504, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 5f 21 	call	0x42be	; 0x42be <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 5f 21 	call	0x42be	; 0x42be <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 5f 21 	call	0x42be	; 0x42be <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 04 05 	sts	0x0504, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 5f 21 	call	0x42be	; 0x42be <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 5f 21 	call	0x42be	; 0x42be <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 5f 21 	call	0x42be	; 0x42be <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 30 1c 	call	0x3860	; 0x3860 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 30 1c 	call	0x3860	; 0x3860 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 30 1c 	call	0x3860	; 0x3860 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 30 1c 	call	0x3860	; 0x3860 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
     c1c:	60 91 83 05 	lds	r22, 0x0583
     c20:	70 91 84 05 	lds	r23, 0x0584
     c24:	80 91 85 05 	lds	r24, 0x0585
     c28:	90 91 86 05 	lds	r25, 0x0586
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e5       	ldi	r20, 0x50	; 80
     c32:	51 e4       	ldi	r21, 0x41	; 65
     c34:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
     c38:	f8 2e       	mov	r15, r24
     c3a:	ff 1c       	adc	r15, r15
     c3c:	ff 24       	eor	r15, r15
     c3e:	ff 1c       	adc	r15, r15
     c40:	ff 0c       	add	r15, r15
     c42:	ff 0c       	add	r15, r15
     c44:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
     c46:	60 91 34 07 	lds	r22, 0x0734
     c4a:	70 91 35 07 	lds	r23, 0x0735
     c4e:	80 91 36 07 	lds	r24, 0x0736
     c52:	90 91 37 07 	lds	r25, 0x0737
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 ef       	ldi	r20, 0xF0	; 240
     c5c:	51 e4       	ldi	r21, 0x41	; 65
     c5e:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
     c62:	08 2f       	mov	r16, r24
     c64:	00 1f       	adc	r16, r16
     c66:	00 27       	eor	r16, r16
     c68:	00 1f       	adc	r16, r16
     c6a:	00 0f       	add	r16, r16
     c6c:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
     c6e:	60 91 8d 05 	lds	r22, 0x058D
     c72:	70 91 8e 05 	lds	r23, 0x058E
     c76:	80 91 8f 05 	lds	r24, 0x058F
     c7a:	90 91 90 05 	lds	r25, 0x0590
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	4c e0       	ldi	r20, 0x0C	; 12
     c84:	52 e4       	ldi	r21, 0x42	; 66
     c86:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
     c8a:	18 2f       	mov	r17, r24
     c8c:	11 1f       	adc	r17, r17
     c8e:	11 27       	eor	r17, r17
     c90:	11 1f       	adc	r17, r17
     c92:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
     c94:	ee 24       	eor	r14, r14
     c96:	60 91 39 07 	lds	r22, 0x0739
     c9a:	70 91 3a 07 	lds	r23, 0x073A
     c9e:	80 91 3b 07 	lds	r24, 0x073B
     ca2:	90 91 3c 07 	lds	r25, 0x073C
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 ef       	ldi	r20, 0xF0	; 240
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
     cb2:	88 23       	and	r24, r24
     cb4:	14 f4       	brge	.+4      	; 0xcba <checkWorld+0xa6>
     cb6:	ee 24       	eor	r14, r14
     cb8:	e3 94       	inc	r14
     cba:	8f 2d       	mov	r24, r15
     cbc:	8e 0d       	add	r24, r14
     cbe:	80 0f       	add	r24, r16
     cc0:	81 0f       	add	r24, r17
     cc2:	80 93 8b 05 	sts	0x058B, r24
	nextGateway = moveGateways[currentMoveWorld+1];
     cc6:	20 91 8c 05 	lds	r18, 0x058C
     cca:	e2 2f       	mov	r30, r18
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	eb 54       	subi	r30, 0x4B	; 75
     cd0:	f8 4f       	sbci	r31, 0xF8	; 248
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	90 93 91 05 	sts	0x0591, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
     cd8:	89 17       	cp	r24, r25
     cda:	19 f4       	brne	.+6      	; 0xce2 <checkWorld+0xce>
		currentMoveWorld += 1;
     cdc:	2f 5f       	subi	r18, 0xFF	; 255
     cde:	20 93 8c 05 	sts	0x058C, r18
	}
}
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
     cec:	2f 92       	push	r2
     cee:	3f 92       	push	r3
     cf0:	4f 92       	push	r4
     cf2:	5f 92       	push	r5
     cf4:	6f 92       	push	r6
     cf6:	7f 92       	push	r7
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
     d0c:	e0 90 83 05 	lds	r14, 0x0583
     d10:	f0 90 84 05 	lds	r15, 0x0584
     d14:	00 91 85 05 	lds	r16, 0x0585
     d18:	10 91 86 05 	lds	r17, 0x0586
     d1c:	33 24       	eor	r3, r3
     d1e:	c8 01       	movw	r24, r16
     d20:	b7 01       	movw	r22, r14
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
     d2e:	88 23       	and	r24, r24
     d30:	14 f4       	brge	.+4      	; 0xd36 <moveWall+0x4a>
     d32:	33 24       	eor	r3, r3
     d34:	33 94       	inc	r3
     d36:	a0 90 39 07 	lds	r10, 0x0739
     d3a:	b0 90 3a 07 	lds	r11, 0x073A
     d3e:	c0 90 3b 07 	lds	r12, 0x073B
     d42:	d0 90 3c 07 	lds	r13, 0x073C
     d46:	40 90 34 07 	lds	r4, 0x0734
     d4a:	50 90 35 07 	lds	r5, 0x0735
     d4e:	60 90 36 07 	lds	r6, 0x0736
     d52:	70 90 37 07 	lds	r7, 0x0737
     d56:	88 24       	eor	r8, r8
     d58:	60 91 8d 05 	lds	r22, 0x058D
     d5c:	70 91 8e 05 	lds	r23, 0x058E
     d60:	80 91 8f 05 	lds	r24, 0x058F
     d64:	90 91 90 05 	lds	r25, 0x0590
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e7       	ldi	r20, 0x70	; 112
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
     d74:	88 23       	and	r24, r24
     d76:	14 f4       	brge	.+4      	; 0xd7c <moveWall+0x90>
     d78:	88 24       	eor	r8, r8
     d7a:	83 94       	inc	r8
     d7c:	93 2c       	mov	r9, r3
     d7e:	98 28       	or	r9, r8
     d80:	88 24       	eor	r8, r8
     d82:	c6 01       	movw	r24, r12
     d84:	b5 01       	movw	r22, r10
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e7       	ldi	r20, 0x70	; 112
     d8c:	51 e4       	ldi	r21, 0x41	; 65
     d8e:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
     d92:	88 23       	and	r24, r24
     d94:	14 f4       	brge	.+4      	; 0xd9a <moveWall+0xae>
     d96:	88 24       	eor	r8, r8
     d98:	83 94       	inc	r8
     d9a:	98 28       	or	r9, r8
     d9c:	88 24       	eor	r8, r8
     d9e:	c3 01       	movw	r24, r6
     da0:	b2 01       	movw	r22, r4
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e7       	ldi	r20, 0x70	; 112
     da8:	51 e4       	ldi	r21, 0x41	; 65
     daa:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
     dae:	88 23       	and	r24, r24
     db0:	14 f4       	brge	.+4      	; 0xdb6 <moveWall+0xca>
     db2:	88 24       	eor	r8, r8
     db4:	83 94       	inc	r8
     db6:	29 2c       	mov	r2, r9
     db8:	28 28       	or	r2, r8
	if(!isWall){
     dba:	09 f0       	breq	.+2      	; 0xdbe <moveWall+0xd2>
     dbc:	8a c0       	rjmp	.+276    	; 0xed2 <moveWall+0x1e6>
	
		// Update odometry
		curr_step = STEPPER_get_nSteps();
     dbe:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <STEPPER_get_nSteps>
     dc2:	60 93 2c 07 	sts	0x072C, r22
     dc6:	70 93 2d 07 	sts	0x072D, r23
     dca:	80 93 2e 07 	sts	0x072E, r24
     dce:	90 93 2f 07 	sts	0x072F, r25
		
		if(curr_step.left != 0){
     dd2:	cb 01       	movw	r24, r22
     dd4:	61 15       	cp	r22, r1
     dd6:	71 05       	cpc	r23, r1
     dd8:	e1 f0       	breq	.+56     	; 0xe12 <moveWall+0x126>
			odometryStepL += WALL_STEP - curr_step.left;
     dda:	64 e1       	ldi	r22, 0x14	; 20
     ddc:	70 e0       	ldi	r23, 0x00	; 0
     dde:	68 1b       	sub	r22, r24
     de0:	79 0b       	sbc	r23, r25
     de2:	80 e0       	ldi	r24, 0x00	; 0
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__floatunsisf>
     dea:	9b 01       	movw	r18, r22
     dec:	ac 01       	movw	r20, r24
     dee:	60 91 c6 07 	lds	r22, 0x07C6
     df2:	70 91 c7 07 	lds	r23, 0x07C7
     df6:	80 91 c8 07 	lds	r24, 0x07C8
     dfa:	90 91 c9 07 	lds	r25, 0x07C9
     dfe:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
     e02:	60 93 c6 07 	sts	0x07C6, r22
     e06:	70 93 c7 07 	sts	0x07C7, r23
     e0a:	80 93 c8 07 	sts	0x07C8, r24
     e0e:	90 93 c9 07 	sts	0x07C9, r25
		}
		if(curr_step.right != 0){
     e12:	80 91 2e 07 	lds	r24, 0x072E
     e16:	90 91 2f 07 	lds	r25, 0x072F
     e1a:	00 97       	sbiw	r24, 0x00	; 0
     e1c:	e1 f0       	breq	.+56     	; 0xe56 <moveWall+0x16a>
			odometryStepR += WALL_STEP - curr_step.right;
     e1e:	64 e1       	ldi	r22, 0x14	; 20
     e20:	70 e0       	ldi	r23, 0x00	; 0
     e22:	68 1b       	sub	r22, r24
     e24:	79 0b       	sbc	r23, r25
     e26:	80 e0       	ldi	r24, 0x00	; 0
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__floatunsisf>
     e2e:	9b 01       	movw	r18, r22
     e30:	ac 01       	movw	r20, r24
     e32:	60 91 06 05 	lds	r22, 0x0506
     e36:	70 91 07 05 	lds	r23, 0x0507
     e3a:	80 91 08 05 	lds	r24, 0x0508
     e3e:	90 91 09 05 	lds	r25, 0x0509
     e42:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
     e46:	60 93 06 05 	sts	0x0506, r22
     e4a:	70 93 07 05 	sts	0x0507, r23
     e4e:	80 93 08 05 	sts	0x0508, r24
     e52:	90 93 09 05 	sts	0x0509, r25
		}
		
		STEPPER_set_steps(STEPPER_BOTH,0);
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	70 e0       	ldi	r23, 0x00	; 0
     e5c:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <STEPPER_set_steps>
	
		// Move with wall
		STEPPER_move_stnb( STEPPER_BOTH, 
     e60:	8d b7       	in	r24, 0x3d	; 61
     e62:	9e b7       	in	r25, 0x3e	; 62
     e64:	09 97       	sbiw	r24, 0x09	; 9
     e66:	0f b6       	in	r0, 0x3f	; 63
     e68:	f8 94       	cli
     e6a:	9e bf       	out	0x3e, r25	; 62
     e6c:	0f be       	out	0x3f, r0	; 63
     e6e:	8d bf       	out	0x3d, r24	; 61
     e70:	ed b7       	in	r30, 0x3d	; 61
     e72:	fe b7       	in	r31, 0x3e	; 62
     e74:	31 96       	adiw	r30, 0x01	; 1
     e76:	84 e1       	ldi	r24, 0x14	; 20
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	ad b7       	in	r26, 0x3d	; 61
     e7c:	be b7       	in	r27, 0x3e	; 62
     e7e:	12 96       	adiw	r26, 0x02	; 2
     e80:	9c 93       	st	X, r25
     e82:	8e 93       	st	-X, r24
     e84:	11 97       	sbiw	r26, 0x01	; 1
     e86:	88 ec       	ldi	r24, 0xC8	; 200
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	93 83       	std	Z+3, r25	; 0x03
     e8c:	82 83       	std	Z+2, r24	; 0x02
     e8e:	82 ec       	ldi	r24, 0xC2	; 194
     e90:	91 e0       	ldi	r25, 0x01	; 1
     e92:	95 83       	std	Z+5, r25	; 0x05
     e94:	84 83       	std	Z+4, r24	; 0x04
     e96:	16 82       	std	Z+6, r1	; 0x06
     e98:	10 86       	std	Z+8, r1	; 0x08
     e9a:	17 82       	std	Z+7, r1	; 0x07
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	62 e0       	ldi	r22, 0x02	; 2
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	24 e1       	ldi	r18, 0x14	; 20
     ea4:	30 e0       	ldi	r19, 0x00	; 0
     ea6:	08 ec       	ldi	r16, 0xC8	; 200
     ea8:	10 e0       	ldi	r17, 0x00	; 0
     eaa:	52 ec       	ldi	r21, 0xC2	; 194
     eac:	e5 2e       	mov	r14, r21
     eae:	51 e0       	ldi	r21, 0x01	; 1
     eb0:	f5 2e       	mov	r15, r21
     eb2:	cc 24       	eor	r12, r12
     eb4:	aa 24       	eor	r10, r10
     eb6:	bb 24       	eor	r11, r11
     eb8:	88 24       	eor	r8, r8
     eba:	83 94       	inc	r8
     ebc:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <STEPPER_move>
     ec0:	ed b7       	in	r30, 0x3d	; 61
     ec2:	fe b7       	in	r31, 0x3e	; 62
     ec4:	39 96       	adiw	r30, 0x09	; 9
     ec6:	0f b6       	in	r0, 0x3f	; 63
     ec8:	f8 94       	cli
     eca:	fe bf       	out	0x3e, r31	; 62
     ecc:	0f be       	out	0x3f, r0	; 63
     ece:	ed bf       	out	0x3d, r30	; 61
     ed0:	48 c1       	rjmp	.+656    	; 0x1162 <moveWall+0x476>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
     ed2:	c6 01       	movw	r24, r12
     ed4:	b5 01       	movw	r22, r10
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	40 e7       	ldi	r20, 0x70	; 112
     edc:	51 e4       	ldi	r21, 0x41	; 65
     ede:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <__gesf2>
     ee2:	18 16       	cp	r1, r24
     ee4:	64 f4       	brge	.+24     	; 0xefe <moveWall+0x212>
		rtIR = IR_WALL_R_THRESH-18;
     ee6:	80 e0       	ldi	r24, 0x00	; 0
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	a0 e4       	ldi	r26, 0x40	; 64
     eec:	b0 ec       	ldi	r27, 0xC0	; 192
     eee:	80 93 39 07 	sts	0x0739, r24
     ef2:	90 93 3a 07 	sts	0x073A, r25
     ef6:	a0 93 3b 07 	sts	0x073B, r26
     efa:	b0 93 3c 07 	sts	0x073C, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
     efe:	c3 01       	movw	r24, r6
     f00:	b2 01       	movw	r22, r4
     f02:	20 e0       	ldi	r18, 0x00	; 0
     f04:	30 e0       	ldi	r19, 0x00	; 0
     f06:	40 e7       	ldi	r20, 0x70	; 112
     f08:	51 e4       	ldi	r21, 0x41	; 65
     f0a:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <__gesf2>
     f0e:	18 16       	cp	r1, r24
     f10:	14 f0       	brlt	.+4      	; 0xf16 <moveWall+0x22a>
     f12:	80 e0       	ldi	r24, 0x00	; 0
     f14:	0d c0       	rjmp	.+26     	; 0xf30 <moveWall+0x244>
		ltIR = IR_WALL_L_THRESH-18;
     f16:	80 e0       	ldi	r24, 0x00	; 0
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 e4       	ldi	r26, 0x40	; 64
     f1c:	b0 ec       	ldi	r27, 0xC0	; 192
     f1e:	80 93 34 07 	sts	0x0734, r24
     f22:	90 93 35 07 	sts	0x0735, r25
     f26:	a0 93 36 07 	sts	0x0736, r26
     f2a:	b0 93 37 07 	sts	0x0737, r27
     f2e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
     f30:	33 20       	and	r3, r3
     f32:	21 f1       	breq	.+72     	; 0xf7c <moveWall+0x290>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
     f34:	88 23       	and	r24, r24
     f36:	29 f0       	breq	.+10     	; 0xf42 <moveWall+0x256>
		{
			error = rtIR - (ltIR + (1000/ftIR));
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	70 e0       	ldi	r23, 0x00	; 0
     f3c:	8a e7       	ldi	r24, 0x7A	; 122
     f3e:	94 e4       	ldi	r25, 0x44	; 68
     f40:	04 c0       	rjmp	.+8      	; 0xf4a <moveWall+0x25e>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
     f42:	60 e0       	ldi	r22, 0x00	; 0
     f44:	70 e0       	ldi	r23, 0x00	; 0
     f46:	8a e7       	ldi	r24, 0x7A	; 122
     f48:	94 ec       	ldi	r25, 0xC4	; 196
     f4a:	a8 01       	movw	r20, r16
     f4c:	97 01       	movw	r18, r14
     f4e:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
     f52:	20 91 34 07 	lds	r18, 0x0734
     f56:	30 91 35 07 	lds	r19, 0x0735
     f5a:	40 91 36 07 	lds	r20, 0x0736
     f5e:	50 91 37 07 	lds	r21, 0x0737
     f62:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
     f66:	9b 01       	movw	r18, r22
     f68:	ac 01       	movw	r20, r24
     f6a:	60 91 39 07 	lds	r22, 0x0739
     f6e:	70 91 3a 07 	lds	r23, 0x073A
     f72:	80 91 3b 07 	lds	r24, 0x073B
     f76:	90 91 3c 07 	lds	r25, 0x073C
     f7a:	10 c0       	rjmp	.+32     	; 0xf9c <moveWall+0x2b0>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
     f7c:	60 91 39 07 	lds	r22, 0x0739
     f80:	70 91 3a 07 	lds	r23, 0x073A
     f84:	80 91 3b 07 	lds	r24, 0x073B
     f88:	90 91 3c 07 	lds	r25, 0x073C
     f8c:	20 91 34 07 	lds	r18, 0x0734
     f90:	30 91 35 07 	lds	r19, 0x0735
     f94:	40 91 36 07 	lds	r20, 0x0736
     f98:	50 91 37 07 	lds	r21, 0x0737
     f9c:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
     fa0:	90 58       	subi	r25, 0x80	; 128
     fa2:	40 e0       	ldi	r20, 0x00	; 0
     fa4:	0e 94 2b 10 	call	0x2056	; 0x2056 <pidController>
     fa8:	6b 01       	movw	r12, r22
     faa:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
     fac:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__fixsfsi>
     fb0:	8b 01       	movw	r16, r22
     fb2:	77 ff       	sbrs	r23, 7
     fb4:	03 c0       	rjmp	.+6      	; 0xfbc <moveWall+0x2d0>
     fb6:	10 95       	com	r17
     fb8:	01 95       	neg	r16
     fba:	1f 4f       	sbci	r17, 0xFF	; 255
     fbc:	05 36       	cpi	r16, 0x65	; 101
     fbe:	11 05       	cpc	r17, r1
     fc0:	fc f0       	brlt	.+62     	; 0x1000 <moveWall+0x314>
     fc2:	c7 01       	movw	r24, r14
     fc4:	b6 01       	movw	r22, r12
     fc6:	20 e0       	ldi	r18, 0x00	; 0
     fc8:	30 e0       	ldi	r19, 0x00	; 0
     fca:	40 e0       	ldi	r20, 0x00	; 0
     fcc:	50 e0       	ldi	r21, 0x00	; 0
     fce:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
     fd2:	88 23       	and	r24, r24
     fd4:	a9 f0       	breq	.+42     	; 0x1000 <moveWall+0x314>
		effort = MAX_EFFORT*(effort/abs(effort));
     fd6:	b8 01       	movw	r22, r16
     fd8:	88 27       	eor	r24, r24
     fda:	77 fd       	sbrc	r23, 7
     fdc:	80 95       	com	r24
     fde:	98 2f       	mov	r25, r24
     fe0:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__floatsisf>
     fe4:	9b 01       	movw	r18, r22
     fe6:	ac 01       	movw	r20, r24
     fe8:	c7 01       	movw	r24, r14
     fea:	b6 01       	movw	r22, r12
     fec:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	48 ec       	ldi	r20, 0xC8	; 200
     ff6:	52 e4       	ldi	r21, 0x42	; 66
     ff8:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
     ffc:	6b 01       	movw	r12, r22
     ffe:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    1000:	c7 01       	movw	r24, r14
    1002:	b6 01       	movw	r22, r12
    1004:	20 e0       	ldi	r18, 0x00	; 0
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	48 ec       	ldi	r20, 0xC8	; 200
    100a:	52 e4       	ldi	r21, 0x42	; 66
    100c:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    1010:	4b 01       	movw	r8, r22
    1012:	5c 01       	movw	r10, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
    1014:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <STEPPER_get_nSteps>
    1018:	60 93 2c 07 	sts	0x072C, r22
    101c:	70 93 2d 07 	sts	0x072D, r23
    1020:	80 93 2e 07 	sts	0x072E, r24
    1024:	90 93 2f 07 	sts	0x072F, r25
	
	if(curr_step.left != 0){
    1028:	cb 01       	movw	r24, r22
    102a:	61 15       	cp	r22, r1
    102c:	71 05       	cpc	r23, r1
    102e:	e1 f0       	breq	.+56     	; 0x1068 <moveWall+0x37c>
		odometryStepL += WALL_STEP - (curr_step.left);
    1030:	64 e1       	ldi	r22, 0x14	; 20
    1032:	70 e0       	ldi	r23, 0x00	; 0
    1034:	68 1b       	sub	r22, r24
    1036:	79 0b       	sbc	r23, r25
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__floatunsisf>
    1040:	9b 01       	movw	r18, r22
    1042:	ac 01       	movw	r20, r24
    1044:	60 91 c6 07 	lds	r22, 0x07C6
    1048:	70 91 c7 07 	lds	r23, 0x07C7
    104c:	80 91 c8 07 	lds	r24, 0x07C8
    1050:	90 91 c9 07 	lds	r25, 0x07C9
    1054:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    1058:	60 93 c6 07 	sts	0x07C6, r22
    105c:	70 93 c7 07 	sts	0x07C7, r23
    1060:	80 93 c8 07 	sts	0x07C8, r24
    1064:	90 93 c9 07 	sts	0x07C9, r25
	}
	if(curr_step.right != 0){
    1068:	80 91 2e 07 	lds	r24, 0x072E
    106c:	90 91 2f 07 	lds	r25, 0x072F
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	e1 f0       	breq	.+56     	; 0x10ac <moveWall+0x3c0>
		odometryStepR += WALL_STEP - (curr_step.right);
    1074:	64 e1       	ldi	r22, 0x14	; 20
    1076:	70 e0       	ldi	r23, 0x00	; 0
    1078:	68 1b       	sub	r22, r24
    107a:	79 0b       	sbc	r23, r25
    107c:	80 e0       	ldi	r24, 0x00	; 0
    107e:	90 e0       	ldi	r25, 0x00	; 0
    1080:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__floatunsisf>
    1084:	9b 01       	movw	r18, r22
    1086:	ac 01       	movw	r20, r24
    1088:	60 91 06 05 	lds	r22, 0x0506
    108c:	70 91 07 05 	lds	r23, 0x0507
    1090:	80 91 08 05 	lds	r24, 0x0508
    1094:	90 91 09 05 	lds	r25, 0x0509
    1098:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    109c:	60 93 06 05 	sts	0x0506, r22
    10a0:	70 93 07 05 	sts	0x0507, r23
    10a4:	80 93 08 05 	sts	0x0508, r24
    10a8:	90 93 09 05 	sts	0x0509, r25
	}
	
	STEPPER_set_steps(STEPPER_BOTH,0);
    10ac:	82 e0       	ldi	r24, 0x02	; 2
    10ae:	60 e0       	ldi	r22, 0x00	; 0
    10b0:	70 e0       	ldi	r23, 0x00	; 0
    10b2:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <STEPPER_set_steps>
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    10b6:	8d b7       	in	r24, 0x3d	; 61
    10b8:	9e b7       	in	r25, 0x3e	; 62
    10ba:	09 97       	sbiw	r24, 0x09	; 9
    10bc:	0f b6       	in	r0, 0x3f	; 63
    10be:	f8 94       	cli
    10c0:	9e bf       	out	0x3e, r25	; 62
    10c2:	0f be       	out	0x3f, r0	; 63
    10c4:	8d bf       	out	0x3d, r24	; 61
    10c6:	0d b7       	in	r16, 0x3d	; 61
    10c8:	1e b7       	in	r17, 0x3e	; 62
    10ca:	0f 5f       	subi	r16, 0xFF	; 255
    10cc:	1f 4f       	sbci	r17, 0xFF	; 255
    10ce:	c5 01       	movw	r24, r10
    10d0:	b4 01       	movw	r22, r8
    10d2:	20 e0       	ldi	r18, 0x00	; 0
    10d4:	30 e0       	ldi	r19, 0x00	; 0
    10d6:	48 ec       	ldi	r20, 0xC8	; 200
    10d8:	52 e4       	ldi	r21, 0x42	; 66
    10da:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	48 ec       	ldi	r20, 0xC8	; 200
    10e4:	52 e4       	ldi	r21, 0x42	; 66
    10e6:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    10ea:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    10ee:	6b 01       	movw	r12, r22
    10f0:	7c 01       	movw	r14, r24
    10f2:	84 e1       	ldi	r24, 0x14	; 20
    10f4:	90 e0       	ldi	r25, 0x00	; 0
    10f6:	d8 01       	movw	r26, r16
    10f8:	8d 93       	st	X+, r24
    10fa:	9c 93       	st	X, r25
    10fc:	c5 01       	movw	r24, r10
    10fe:	b4 01       	movw	r22, r8
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	48 ec       	ldi	r20, 0xC8	; 200
    1106:	52 ec       	ldi	r21, 0xC2	; 194
    1108:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    110c:	20 e0       	ldi	r18, 0x00	; 0
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	48 ec       	ldi	r20, 0xC8	; 200
    1112:	52 e4       	ldi	r21, 0x42	; 66
    1114:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    1118:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    111c:	f8 01       	movw	r30, r16
    111e:	73 83       	std	Z+3, r23	; 0x03
    1120:	62 83       	std	Z+2, r22	; 0x02
    1122:	82 ec       	ldi	r24, 0xC2	; 194
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	95 83       	std	Z+5, r25	; 0x05
    1128:	84 83       	std	Z+4, r24	; 0x04
    112a:	16 82       	std	Z+6, r1	; 0x06
    112c:	10 86       	std	Z+8, r1	; 0x08
    112e:	17 82       	std	Z+7, r1	; 0x07
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	62 e0       	ldi	r22, 0x02	; 2
    1134:	41 e0       	ldi	r20, 0x01	; 1
    1136:	24 e1       	ldi	r18, 0x14	; 20
    1138:	30 e0       	ldi	r19, 0x00	; 0
    113a:	86 01       	movw	r16, r12
    113c:	92 ec       	ldi	r25, 0xC2	; 194
    113e:	e9 2e       	mov	r14, r25
    1140:	91 e0       	ldi	r25, 0x01	; 1
    1142:	f9 2e       	mov	r15, r25
    1144:	cc 24       	eor	r12, r12
    1146:	aa 24       	eor	r10, r10
    1148:	bb 24       	eor	r11, r11
    114a:	88 24       	eor	r8, r8
    114c:	83 94       	inc	r8
    114e:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <STEPPER_move>
    1152:	8d b7       	in	r24, 0x3d	; 61
    1154:	9e b7       	in	r25, 0x3e	; 62
    1156:	09 96       	adiw	r24, 0x09	; 9
    1158:	0f b6       	in	r0, 0x3f	; 63
    115a:	f8 94       	cli
    115c:	9e bf       	out	0x3e, r25	; 62
    115e:	0f be       	out	0x3f, r0	; 63
    1160:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    1162:	82 2d       	mov	r24, r2
    1164:	1f 91       	pop	r17
    1166:	0f 91       	pop	r16
    1168:	ff 90       	pop	r15
    116a:	ef 90       	pop	r14
    116c:	df 90       	pop	r13
    116e:	cf 90       	pop	r12
    1170:	bf 90       	pop	r11
    1172:	af 90       	pop	r10
    1174:	9f 90       	pop	r9
    1176:	8f 90       	pop	r8
    1178:	7f 90       	pop	r7
    117a:	6f 90       	pop	r6
    117c:	5f 90       	pop	r5
    117e:	4f 90       	pop	r4
    1180:	3f 90       	pop	r3
    1182:	2f 90       	pop	r2
    1184:	08 95       	ret

00001186 <shiftMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    shifts the map after robot moves
********************************************************************/
void shiftMap( void )
{		
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
	// Get the currrent location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    118c:	80 91 30 07 	lds	r24, 0x0730
    1190:	08 2f       	mov	r16, r24
    1192:	06 95       	lsr	r16
    1194:	06 95       	lsr	r16
	unsigned char curCol = currentCellWorld & 0b0011;
    1196:	63 e0       	ldi	r22, 0x03	; 3
    1198:	f6 2e       	mov	r15, r22
    119a:	f8 22       	and	r15, r24
		
	// Git the currrent orientation of the robot
	unsigned char curOrient = currentOrientation;
    119c:	10 91 2f 06 	lds	r17, 0x062F
			
		
	switch(currentMove){
    11a0:	80 91 05 05 	lds	r24, 0x0505
    11a4:	82 30       	cpi	r24, 0x02	; 2
    11a6:	31 f0       	breq	.+12     	; 0x11b4 <shiftMap+0x2e>
    11a8:	83 30       	cpi	r24, 0x03	; 3
    11aa:	a9 f0       	breq	.+42     	; 0x11d6 <shiftMap+0x50>
    11ac:	81 30       	cpi	r24, 0x01	; 1
    11ae:	b1 f4       	brne	.+44     	; 0x11dc <shiftMap+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    11b0:	11 50       	subi	r17, 0x01	; 1
    11b2:	12 c0       	rjmp	.+36     	; 0x11d8 <shiftMap+0x52>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    11b4:	11 30       	cpi	r17, 0x01	; 1
    11b6:	49 f0       	breq	.+18     	; 0x11ca <shiftMap+0x44>
    11b8:	11 30       	cpi	r17, 0x01	; 1
    11ba:	28 f0       	brcs	.+10     	; 0x11c6 <shiftMap+0x40>
    11bc:	12 30       	cpi	r17, 0x02	; 2
    11be:	39 f0       	breq	.+14     	; 0x11ce <shiftMap+0x48>
    11c0:	13 30       	cpi	r17, 0x03	; 3
    11c2:	b9 f4       	brne	.+46     	; 0x11f2 <shiftMap+0x6c>
    11c4:	06 c0       	rjmp	.+12     	; 0x11d2 <shiftMap+0x4c>
				case NORTH:
					curRow -= 1;
    11c6:	01 50       	subi	r16, 0x01	; 1
    11c8:	14 c0       	rjmp	.+40     	; 0x11f2 <shiftMap+0x6c>
					break;
				case EAST:
					curCol += 1;
    11ca:	f3 94       	inc	r15
    11cc:	12 c0       	rjmp	.+36     	; 0x11f2 <shiftMap+0x6c>
					break;
				case SOUTH:
					curRow += 1;					
    11ce:	0f 5f       	subi	r16, 0xFF	; 255
    11d0:	10 c0       	rjmp	.+32     	; 0x11f2 <shiftMap+0x6c>
					break;
				case WEST:
					curCol -= 1;					
    11d2:	fa 94       	dec	r15
    11d4:	0e c0       	rjmp	.+28     	; 0x11f2 <shiftMap+0x6c>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    11d6:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    11d8:	13 70       	andi	r17, 0x03	; 3
    11da:	0b c0       	rjmp	.+22     	; 0x11f2 <shiftMap+0x6c>
			break;
		default:
			LCD_printf("Whatz3?!");
    11dc:	00 d0       	rcall	.+0      	; 0x11de <shiftMap+0x58>
    11de:	84 e2       	ldi	r24, 0x24	; 36
    11e0:	91 e0       	ldi	r25, 0x01	; 1
    11e2:	ed b7       	in	r30, 0x3d	; 61
    11e4:	fe b7       	in	r31, 0x3e	; 62
    11e6:	92 83       	std	Z+2, r25	; 0x02
    11e8:	81 83       	std	Z+1, r24	; 0x01
    11ea:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
    11ee:	0f 90       	pop	r0
    11f0:	0f 90       	pop	r0
			break;
	}
	
	// Set the new cell of the robot
	currentCellWorld = (curRow << 2) + curCol;
    11f2:	00 0f       	add	r16, r16
    11f4:	00 0f       	add	r16, r16
    11f6:	0f 0d       	add	r16, r15
    11f8:	00 93 30 07 	sts	0x0730, r16
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    11fc:	10 93 2f 06 	sts	0x062F, r17
}
    1200:	1f 91       	pop	r17
    1202:	0f 91       	pop	r16
    1204:	ff 90       	pop	r15
    1206:	08 95       	ret

00001208 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    1208:	80 91 8b 05 	lds	r24, 0x058B
    120c:	80 fd       	sbrc	r24, 0
    120e:	02 c0       	rjmp	.+4      	; 0x1214 <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    1210:	81 e0       	ldi	r24, 0x01	; 1
    1212:	05 c0       	rjmp	.+10     	; 0x121e <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    1214:	83 fd       	sbrc	r24, 3
    1216:	02 c0       	rjmp	.+4      	; 0x121c <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	01 c0       	rjmp	.+2      	; 0x121e <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	80 93 05 05 	sts	0x0505, r24
	}
	
	switch(oldMove){
    1222:	80 91 0a 05 	lds	r24, 0x050A
    1226:	81 30       	cpi	r24, 0x01	; 1
    1228:	29 f0       	breq	.+10     	; 0x1234 <planMap+0x2c>
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	38 f0       	brcs	.+14     	; 0x123c <planMap+0x34>
    122e:	84 30       	cpi	r24, 0x04	; 4
    1230:	28 f4       	brcc	.+10     	; 0x123c <planMap+0x34>
    1232:	0f c0       	rjmp	.+30     	; 0x1252 <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	80 93 05 05 	sts	0x0505, r24
    123a:	0b c0       	rjmp	.+22     	; 0x1252 <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    123c:	00 d0       	rcall	.+0      	; 0x123e <planMap+0x36>
    123e:	8d e2       	ldi	r24, 0x2D	; 45
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	ed b7       	in	r30, 0x3d	; 61
    1244:	fe b7       	in	r31, 0x3e	; 62
    1246:	92 83       	std	Z+2, r25	; 0x02
    1248:	81 83       	std	Z+1, r24	; 0x01
    124a:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
    124e:	0f 90       	pop	r0
    1250:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    1252:	80 91 05 05 	lds	r24, 0x0505
    1256:	80 93 0a 05 	sts	0x050A, r24
}
    125a:	08 95       	ret

0000125c <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    125c:	8f 92       	push	r8
    125e:	af 92       	push	r10
    1260:	bf 92       	push	r11
    1262:	cf 92       	push	r12
    1264:	df 92       	push	r13
    1266:	ef 92       	push	r14
    1268:	ff 92       	push	r15
    126a:	0f 93       	push	r16
    126c:	1f 93       	push	r17
	LCD_clear();
    126e:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    1272:	e0 91 8c 05 	lds	r30, 0x058C
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	e2 5f       	subi	r30, 0xF2	; 242
    127a:	f9 4f       	sbci	r31, 0xF9	; 249
    127c:	e0 81       	ld	r30, Z
    127e:	e0 93 05 05 	sts	0x0505, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    1282:	80 e0       	ldi	r24, 0x00	; 0
    1284:	e1 30       	cpi	r30, 0x01	; 1
    1286:	09 f4       	brne	.+2      	; 0x128a <moveWorld+0x2e>
    1288:	81 e0       	ldi	r24, 0x01	; 1
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	e3 30       	cpi	r30, 0x03	; 3
    128e:	09 f4       	brne	.+2      	; 0x1292 <moveWorld+0x36>
    1290:	91 e0       	ldi	r25, 0x01	; 1
    1292:	89 2b       	or	r24, r25
    1294:	28 2f       	mov	r18, r24
    1296:	30 e0       	ldi	r19, 0x00	; 0
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	80 91 0a 05 	lds	r24, 0x050A
    12a0:	82 30       	cpi	r24, 0x02	; 2
    12a2:	11 f4       	brne	.+4      	; 0x12a8 <moveWorld+0x4c>
    12a4:	41 e0       	ldi	r20, 0x01	; 1
    12a6:	50 e0       	ldi	r21, 0x00	; 0
    12a8:	24 23       	and	r18, r20
    12aa:	35 23       	and	r19, r21
    12ac:	23 2b       	or	r18, r19
    12ae:	b9 f0       	breq	.+46     	; 0x12de <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    12b0:	60 e0       	ldi	r22, 0x00	; 0
    12b2:	70 e0       	ldi	r23, 0x00	; 0
    12b4:	80 e0       	ldi	r24, 0x00	; 0
    12b6:	9f e4       	ldi	r25, 0x4F	; 79
    12b8:	2d eb       	ldi	r18, 0xBD	; 189
    12ba:	34 e7       	ldi	r19, 0x74	; 116
    12bc:	4b ed       	ldi	r20, 0xDB	; 219
    12be:	51 e4       	ldi	r21, 0x41	; 65
    12c0:	0f 2e       	mov	r0, r31
    12c2:	f0 e0       	ldi	r31, 0x00	; 0
    12c4:	ef 2e       	mov	r14, r31
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	ff 2e       	mov	r15, r31
    12ca:	f0 e2       	ldi	r31, 0x20	; 32
    12cc:	0f 2f       	mov	r16, r31
    12ce:	f1 e4       	ldi	r31, 0x41	; 65
    12d0:	1f 2f       	mov	r17, r31
    12d2:	f0 2d       	mov	r31, r0
    12d4:	57 01       	movw	r10, r14
    12d6:	68 01       	movw	r12, r16
    12d8:	88 24       	eor	r8, r8
    12da:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    12de:	20 91 0a 05 	lds	r18, 0x050A
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	21 30       	cpi	r18, 0x01	; 1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <moveWorld+0x8e>
    12e8:	81 e0       	ldi	r24, 0x01	; 1
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	23 30       	cpi	r18, 0x03	; 3
    12ee:	09 f4       	brne	.+2      	; 0x12f2 <moveWorld+0x96>
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	89 2b       	or	r24, r25
    12f4:	28 2f       	mov	r18, r24
    12f6:	30 e0       	ldi	r19, 0x00	; 0
    12f8:	40 e0       	ldi	r20, 0x00	; 0
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	80 91 05 05 	lds	r24, 0x0505
    1300:	82 30       	cpi	r24, 0x02	; 2
    1302:	11 f4       	brne	.+4      	; 0x1308 <moveWorld+0xac>
    1304:	41 e0       	ldi	r20, 0x01	; 1
    1306:	50 e0       	ldi	r21, 0x00	; 0
    1308:	24 23       	and	r18, r20
    130a:	35 23       	and	r19, r21
    130c:	23 2b       	or	r18, r19
    130e:	b9 f0       	breq	.+46     	; 0x133e <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	80 e0       	ldi	r24, 0x00	; 0
    1316:	9f e4       	ldi	r25, 0x4F	; 79
    1318:	2d eb       	ldi	r18, 0xBD	; 189
    131a:	34 e7       	ldi	r19, 0x74	; 116
    131c:	4b ed       	ldi	r20, 0xDB	; 219
    131e:	51 e4       	ldi	r21, 0x41	; 65
    1320:	0f 2e       	mov	r0, r31
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	ef 2e       	mov	r14, r31
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	ff 2e       	mov	r15, r31
    132a:	f0 e2       	ldi	r31, 0x20	; 32
    132c:	0f 2f       	mov	r16, r31
    132e:	f1 e4       	ldi	r31, 0x41	; 65
    1330:	1f 2f       	mov	r17, r31
    1332:	f0 2d       	mov	r31, r0
    1334:	57 01       	movw	r10, r14
    1336:	68 01       	movw	r12, r16
    1338:	88 24       	eor	r8, r8
    133a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <move_arc_stwt>
	}
	
	switch(currentMove){
    133e:	80 91 05 05 	lds	r24, 0x0505
    1342:	82 30       	cpi	r24, 0x02	; 2
    1344:	c1 f1       	breq	.+112    	; 0x13b6 <moveWorld+0x15a>
    1346:	83 30       	cpi	r24, 0x03	; 3
    1348:	09 f4       	brne	.+2      	; 0x134c <moveWorld+0xf0>
    134a:	61 c0       	rjmp	.+194    	; 0x140e <moveWorld+0x1b2>
    134c:	81 30       	cpi	r24, 0x01	; 1
    134e:	09 f0       	breq	.+2      	; 0x1352 <moveWorld+0xf6>
    1350:	9f c0       	rjmp	.+318    	; 0x1490 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1352:	8d b7       	in	r24, 0x3d	; 61
    1354:	9e b7       	in	r25, 0x3e	; 62
    1356:	08 97       	sbiw	r24, 0x08	; 8
    1358:	0f b6       	in	r0, 0x3f	; 63
    135a:	f8 94       	cli
    135c:	9e bf       	out	0x3e, r25	; 62
    135e:	0f be       	out	0x3f, r0	; 63
    1360:	8d bf       	out	0x3d, r24	; 61
    1362:	ed b7       	in	r30, 0x3d	; 61
    1364:	fe b7       	in	r31, 0x3e	; 62
    1366:	31 96       	adiw	r30, 0x01	; 1
    1368:	86 e3       	ldi	r24, 0x36	; 54
    136a:	91 e0       	ldi	r25, 0x01	; 1
    136c:	ad b7       	in	r26, 0x3d	; 61
    136e:	be b7       	in	r27, 0x3e	; 62
    1370:	12 96       	adiw	r26, 0x02	; 2
    1372:	9c 93       	st	X, r25
    1374:	8e 93       	st	-X, r24
    1376:	11 97       	sbiw	r26, 0x01	; 1
    1378:	80 91 8c 05 	lds	r24, 0x058C
    137c:	82 83       	std	Z+2, r24	; 0x02
    137e:	13 82       	std	Z+3, r1	; 0x03
    1380:	80 91 8b 05 	lds	r24, 0x058B
    1384:	84 83       	std	Z+4, r24	; 0x04
    1386:	15 82       	std	Z+5, r1	; 0x05
    1388:	80 91 91 05 	lds	r24, 0x0591
    138c:	86 83       	std	Z+6, r24	; 0x06
    138e:	17 82       	std	Z+7, r1	; 0x07
    1390:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1394:	ed b7       	in	r30, 0x3d	; 61
    1396:	fe b7       	in	r31, 0x3e	; 62
    1398:	38 96       	adiw	r30, 0x08	; 8
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	fe bf       	out	0x3e, r31	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	ed bf       	out	0x3d, r30	; 61
    13a4:	60 e0       	ldi	r22, 0x00	; 0
    13a6:	70 e0       	ldi	r23, 0x00	; 0
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	4c e8       	ldi	r20, 0x8C	; 140
    13b2:	51 ec       	ldi	r21, 0xC1	; 193
    13b4:	5d c0       	rjmp	.+186    	; 0x1470 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    13b6:	8d b7       	in	r24, 0x3d	; 61
    13b8:	9e b7       	in	r25, 0x3e	; 62
    13ba:	08 97       	sbiw	r24, 0x08	; 8
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	9e bf       	out	0x3e, r25	; 62
    13c2:	0f be       	out	0x3f, r0	; 63
    13c4:	8d bf       	out	0x3d, r24	; 61
    13c6:	ed b7       	in	r30, 0x3d	; 61
    13c8:	fe b7       	in	r31, 0x3e	; 62
    13ca:	31 96       	adiw	r30, 0x01	; 1
    13cc:	81 e6       	ldi	r24, 0x61	; 97
    13ce:	91 e0       	ldi	r25, 0x01	; 1
    13d0:	ad b7       	in	r26, 0x3d	; 61
    13d2:	be b7       	in	r27, 0x3e	; 62
    13d4:	12 96       	adiw	r26, 0x02	; 2
    13d6:	9c 93       	st	X, r25
    13d8:	8e 93       	st	-X, r24
    13da:	11 97       	sbiw	r26, 0x01	; 1
    13dc:	80 91 8c 05 	lds	r24, 0x058C
    13e0:	82 83       	std	Z+2, r24	; 0x02
    13e2:	13 82       	std	Z+3, r1	; 0x03
    13e4:	80 91 8b 05 	lds	r24, 0x058B
    13e8:	84 83       	std	Z+4, r24	; 0x04
    13ea:	15 82       	std	Z+5, r1	; 0x05
    13ec:	80 91 91 05 	lds	r24, 0x0591
    13f0:	86 83       	std	Z+6, r24	; 0x06
    13f2:	17 82       	std	Z+7, r1	; 0x07
    13f4:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    13f8:	ed b7       	in	r30, 0x3d	; 61
    13fa:	fe b7       	in	r31, 0x3e	; 62
    13fc:	38 96       	adiw	r30, 0x08	; 8
    13fe:	0f b6       	in	r0, 0x3f	; 63
    1400:	f8 94       	cli
    1402:	fe bf       	out	0x3e, r31	; 62
    1404:	0f be       	out	0x3f, r0	; 63
    1406:	ed bf       	out	0x3d, r30	; 61
    1408:	0e 94 76 06 	call	0xcec	; 0xcec <moveWall>
    140c:	53 c0       	rjmp	.+166    	; 0x14b4 <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    140e:	8d b7       	in	r24, 0x3d	; 61
    1410:	9e b7       	in	r25, 0x3e	; 62
    1412:	08 97       	sbiw	r24, 0x08	; 8
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	9e bf       	out	0x3e, r25	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	8d bf       	out	0x3d, r24	; 61
    141e:	ed b7       	in	r30, 0x3d	; 61
    1420:	fe b7       	in	r31, 0x3e	; 62
    1422:	31 96       	adiw	r30, 0x01	; 1
    1424:	8f e8       	ldi	r24, 0x8F	; 143
    1426:	91 e0       	ldi	r25, 0x01	; 1
    1428:	ad b7       	in	r26, 0x3d	; 61
    142a:	be b7       	in	r27, 0x3e	; 62
    142c:	12 96       	adiw	r26, 0x02	; 2
    142e:	9c 93       	st	X, r25
    1430:	8e 93       	st	-X, r24
    1432:	11 97       	sbiw	r26, 0x01	; 1
    1434:	80 91 8c 05 	lds	r24, 0x058C
    1438:	82 83       	std	Z+2, r24	; 0x02
    143a:	13 82       	std	Z+3, r1	; 0x03
    143c:	80 91 8b 05 	lds	r24, 0x058B
    1440:	84 83       	std	Z+4, r24	; 0x04
    1442:	15 82       	std	Z+5, r1	; 0x05
    1444:	80 91 91 05 	lds	r24, 0x0591
    1448:	86 83       	std	Z+6, r24	; 0x06
    144a:	17 82       	std	Z+7, r1	; 0x07
    144c:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1450:	ed b7       	in	r30, 0x3d	; 61
    1452:	fe b7       	in	r31, 0x3e	; 62
    1454:	38 96       	adiw	r30, 0x08	; 8
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	fe bf       	out	0x3e, r31	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	ed bf       	out	0x3d, r30	; 61
    1460:	60 e0       	ldi	r22, 0x00	; 0
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	4c e8       	ldi	r20, 0x8C	; 140
    146e:	51 e4       	ldi	r21, 0x41	; 65
    1470:	0f 2e       	mov	r0, r31
    1472:	f0 e0       	ldi	r31, 0x00	; 0
    1474:	ef 2e       	mov	r14, r31
    1476:	f0 e0       	ldi	r31, 0x00	; 0
    1478:	ff 2e       	mov	r15, r31
    147a:	f0 e2       	ldi	r31, 0x20	; 32
    147c:	0f 2f       	mov	r16, r31
    147e:	f1 e4       	ldi	r31, 0x41	; 65
    1480:	1f 2f       	mov	r17, r31
    1482:	f0 2d       	mov	r31, r0
    1484:	57 01       	movw	r10, r14
    1486:	68 01       	movw	r12, r16
    1488:	88 24       	eor	r8, r8
    148a:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <move_arc_stwt>
    148e:	12 c0       	rjmp	.+36     	; 0x14b4 <moveWorld+0x258>
			break;
		default:
			LCD_printf("Whatz4?!");
    1490:	00 d0       	rcall	.+0      	; 0x1492 <moveWorld+0x236>
    1492:	8b eb       	ldi	r24, 0xBB	; 187
    1494:	91 e0       	ldi	r25, 0x01	; 1
    1496:	ad b7       	in	r26, 0x3d	; 61
    1498:	be b7       	in	r27, 0x3e	; 62
    149a:	12 96       	adiw	r26, 0x02	; 2
    149c:	9c 93       	st	X, r25
    149e:	8e 93       	st	-X, r24
    14a0:	11 97       	sbiw	r26, 0x01	; 1
    14a2:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    14a6:	0f 90       	pop	r0
    14a8:	0f 90       	pop	r0
    14aa:	82 e0       	ldi	r24, 0x02	; 2
    14ac:	60 e0       	ldi	r22, 0x00	; 0
    14ae:	0e 94 2c 20 	call	0x4058	; 0x4058 <STEPPER_stop>
    14b2:	ff cf       	rjmp	.-2      	; 0x14b2 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    14b4:	80 91 05 05 	lds	r24, 0x0505
    14b8:	80 93 0a 05 	sts	0x050A, r24
	return 1;
}
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	bf 90       	pop	r11
    14cc:	af 90       	pop	r10
    14ce:	8f 90       	pop	r8
    14d0:	08 95       	ret

000014d2 <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    14d2:	0e 94 2e 09 	call	0x125c	; 0x125c <moveWorld>
    14d6:	88 23       	and	r24, r24
    14d8:	69 f0       	breq	.+26     	; 0x14f4 <moveBehavior+0x22>
		Ierror = 0;
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	a0 e0       	ldi	r26, 0x00	; 0
    14e0:	b0 e0       	ldi	r27, 0x00	; 0
    14e2:	80 93 87 05 	sts	0x0587, r24
    14e6:	90 93 88 05 	sts	0x0588, r25
    14ea:	a0 93 89 05 	sts	0x0589, r26
    14ee:	b0 93 8a 05 	sts	0x058A, r27
    14f2:	81 e0       	ldi	r24, 0x01	; 1
		return 1; 
	}
	return 0;	
}
    14f4:	08 95       	ret

000014f6 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	ff 24       	eor	r15, r15
    1502:	f3 94       	inc	r15
    1504:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1506:	c4 ec       	ldi	r28, 0xC4	; 196
    1508:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    150a:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    150e:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	21 f0       	breq	.+8      	; 0x151c <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1514:	82 30       	cpi	r24, 0x02	; 2
    1516:	11 f0       	breq	.+4      	; 0x151c <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    1518:	83 30       	cpi	r24, 0x03	; 3
    151a:	39 f4       	brne	.+14     	; 0x152a <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    151c:	e1 2f       	mov	r30, r17
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	e2 5f       	subi	r30, 0xF2	; 242
    1522:	f9 4f       	sbci	r31, 0xF9	; 249
    1524:	00 83       	st	Z, r16
			i++;
    1526:	1f 5f       	subi	r17, 0xFF	; 255
    1528:	02 c0       	rjmp	.+4      	; 0x152e <movesInput+0x38>
		}

		if (btnHolder != 0){
    152a:	88 23       	and	r24, r24
    152c:	21 f1       	breq	.+72     	; 0x1576 <movesInput+0x80>
			LCD_clear();
    152e:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1532:	8d b7       	in	r24, 0x3d	; 61
    1534:	9e b7       	in	r25, 0x3e	; 62
    1536:	08 97       	sbiw	r24, 0x08	; 8
    1538:	0f b6       	in	r0, 0x3f	; 63
    153a:	f8 94       	cli
    153c:	9e bf       	out	0x3e, r25	; 62
    153e:	0f be       	out	0x3f, r0	; 63
    1540:	8d bf       	out	0x3d, r24	; 61
    1542:	ed b7       	in	r30, 0x3d	; 61
    1544:	fe b7       	in	r31, 0x3e	; 62
    1546:	31 96       	adiw	r30, 0x01	; 1
    1548:	ad b7       	in	r26, 0x3d	; 61
    154a:	be b7       	in	r27, 0x3e	; 62
    154c:	12 96       	adiw	r26, 0x02	; 2
    154e:	dc 93       	st	X, r29
    1550:	ce 93       	st	-X, r28
    1552:	11 97       	sbiw	r26, 0x01	; 1
    1554:	f2 82       	std	Z+2, r15	; 0x02
    1556:	13 82       	std	Z+3, r1	; 0x03
    1558:	04 83       	std	Z+4, r16	; 0x04
    155a:	15 82       	std	Z+5, r1	; 0x05
    155c:	16 83       	std	Z+6, r17	; 0x06
    155e:	17 82       	std	Z+7, r1	; 0x07
    1560:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
    1564:	f0 2e       	mov	r15, r16
    1566:	8d b7       	in	r24, 0x3d	; 61
    1568:	9e b7       	in	r25, 0x3e	; 62
    156a:	08 96       	adiw	r24, 0x08	; 8
    156c:	0f b6       	in	r0, 0x3f	; 63
    156e:	f8 94       	cli
    1570:	9e bf       	out	0x3e, r25	; 62
    1572:	0f be       	out	0x3f, r0	; 63
    1574:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1576:	84 ef       	ldi	r24, 0xF4	; 244
    1578:	91 e0       	ldi	r25, 0x01	; 1
    157a:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    157e:	1b 30       	cpi	r17, 0x0B	; 11
    1580:	20 f2       	brcs	.-120    	; 0x150a <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    1582:	1f 5f       	subi	r17, 0xFF	; 255
    1584:	e1 2f       	mov	r30, r17
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	e2 5f       	subi	r30, 0xF2	; 242
    158a:	f9 4f       	sbci	r31, 0xF9	; 249
    158c:	84 e0       	ldi	r24, 0x04	; 4
    158e:	80 83       	st	Z, r24
}
    1590:	df 91       	pop	r29
    1592:	cf 91       	pop	r28
    1594:	1f 91       	pop	r17
    1596:	0f 91       	pop	r16
    1598:	ff 90       	pop	r15
    159a:	08 95       	ret

0000159c <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    159c:	1f 93       	push	r17
    159e:	cf 93       	push	r28
    15a0:	df 93       	push	r29
    15a2:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    15a4:	c5 ef       	ldi	r28, 0xF5	; 245
    15a6:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    15a8:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    15ac:	81 30       	cpi	r24, 0x01	; 1
    15ae:	21 f4       	brne	.+8      	; 0x15b8 <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    15b0:	80 91 30 07 	lds	r24, 0x0730
    15b4:	88 0f       	add	r24, r24
    15b6:	06 c0       	rjmp	.+12     	; 0x15c4 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    15b8:	82 30       	cpi	r24, 0x02	; 2
    15ba:	39 f4       	brne	.+14     	; 0x15ca <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    15bc:	80 91 30 07 	lds	r24, 0x0730
    15c0:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    15c2:	8f 5f       	subi	r24, 0xFF	; 255
    15c4:	80 93 30 07 	sts	0x0730, r24
			i++;
    15c8:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    15ca:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    15ce:	00 d0       	rcall	.+0      	; 0x15d0 <worldInput+0x34>
    15d0:	00 d0       	rcall	.+0      	; 0x15d2 <worldInput+0x36>
    15d2:	00 d0       	rcall	.+0      	; 0x15d4 <worldInput+0x38>
    15d4:	ed b7       	in	r30, 0x3d	; 61
    15d6:	fe b7       	in	r31, 0x3e	; 62
    15d8:	31 96       	adiw	r30, 0x01	; 1
    15da:	ad b7       	in	r26, 0x3d	; 61
    15dc:	be b7       	in	r27, 0x3e	; 62
    15de:	12 96       	adiw	r26, 0x02	; 2
    15e0:	dc 93       	st	X, r29
    15e2:	ce 93       	st	-X, r28
    15e4:	11 97       	sbiw	r26, 0x01	; 1
    15e6:	80 91 30 07 	lds	r24, 0x0730
    15ea:	82 83       	std	Z+2, r24	; 0x02
    15ec:	13 82       	std	Z+3, r1	; 0x03
    15ee:	14 83       	std	Z+4, r17	; 0x04
    15f0:	15 82       	std	Z+5, r1	; 0x05
    15f2:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    15f6:	8d b7       	in	r24, 0x3d	; 61
    15f8:	9e b7       	in	r25, 0x3e	; 62
    15fa:	06 96       	adiw	r24, 0x06	; 6
    15fc:	0f b6       	in	r0, 0x3f	; 63
    15fe:	f8 94       	cli
    1600:	9e bf       	out	0x3e, r25	; 62
    1602:	0f be       	out	0x3f, r0	; 63
    1604:	8d bf       	out	0x3d, r24	; 61
    1606:	84 ef       	ldi	r24, 0xF4	; 244
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    160e:	14 30       	cpi	r17, 0x04	; 4
    1610:	58 f2       	brcs	.-106    	; 0x15a8 <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    1612:	80 91 30 07 	lds	r24, 0x0730
    1616:	80 93 31 07 	sts	0x0731, r24
}
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	1f 91       	pop	r17
    1620:	08 95       	ret

00001622 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    1622:	1f 93       	push	r17
    1624:	cf 93       	push	r28
    1626:	df 93       	push	r29
    1628:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    162a:	cd e1       	ldi	r28, 0x1D	; 29
    162c:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    162e:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    1632:	81 30       	cpi	r24, 0x01	; 1
    1634:	21 f4       	brne	.+8      	; 0x163e <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    1636:	80 91 2f 06 	lds	r24, 0x062F
    163a:	88 0f       	add	r24, r24
    163c:	06 c0       	rjmp	.+12     	; 0x164a <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    163e:	82 30       	cpi	r24, 0x02	; 2
    1640:	41 f4       	brne	.+16     	; 0x1652 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    1642:	80 91 2f 06 	lds	r24, 0x062F
    1646:	88 0f       	add	r24, r24
			currentOrientation += 1;
    1648:	8f 5f       	subi	r24, 0xFF	; 255
    164a:	80 93 2f 06 	sts	0x062F, r24
			i++;
    164e:	1f 5f       	subi	r17, 0xFF	; 255
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    1652:	88 23       	and	r24, r24
    1654:	f1 f0       	breq	.+60     	; 0x1692 <orientationInput+0x70>
			LCD_clear();
    1656:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    165a:	00 d0       	rcall	.+0      	; 0x165c <orientationInput+0x3a>
    165c:	00 d0       	rcall	.+0      	; 0x165e <orientationInput+0x3c>
    165e:	00 d0       	rcall	.+0      	; 0x1660 <orientationInput+0x3e>
    1660:	ed b7       	in	r30, 0x3d	; 61
    1662:	fe b7       	in	r31, 0x3e	; 62
    1664:	31 96       	adiw	r30, 0x01	; 1
    1666:	ad b7       	in	r26, 0x3d	; 61
    1668:	be b7       	in	r27, 0x3e	; 62
    166a:	12 96       	adiw	r26, 0x02	; 2
    166c:	dc 93       	st	X, r29
    166e:	ce 93       	st	-X, r28
    1670:	11 97       	sbiw	r26, 0x01	; 1
    1672:	80 91 2f 06 	lds	r24, 0x062F
    1676:	82 83       	std	Z+2, r24	; 0x02
    1678:	13 82       	std	Z+3, r1	; 0x03
    167a:	14 83       	std	Z+4, r17	; 0x04
    167c:	15 82       	std	Z+5, r1	; 0x05
    167e:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
    1682:	8d b7       	in	r24, 0x3d	; 61
    1684:	9e b7       	in	r25, 0x3e	; 62
    1686:	06 96       	adiw	r24, 0x06	; 6
    1688:	0f b6       	in	r0, 0x3f	; 63
    168a:	f8 94       	cli
    168c:	9e bf       	out	0x3e, r25	; 62
    168e:	0f be       	out	0x3f, r0	; 63
    1690:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1692:	84 ef       	ldi	r24, 0xF4	; 244
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    169a:	12 30       	cpi	r17, 0x02	; 2
    169c:	40 f2       	brcs	.-112    	; 0x162e <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    169e:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	switch(currentOrientation){
    16a2:	80 91 2f 06 	lds	r24, 0x062F
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	51 f0       	breq	.+20     	; 0x16be <orientationInput+0x9c>
    16aa:	81 30       	cpi	r24, 0x01	; 1
    16ac:	28 f0       	brcs	.+10     	; 0x16b8 <orientationInput+0x96>
    16ae:	82 30       	cpi	r24, 0x02	; 2
    16b0:	49 f0       	breq	.+18     	; 0x16c4 <orientationInput+0xa2>
    16b2:	83 30       	cpi	r24, 0x03	; 3
    16b4:	71 f4       	brne	.+28     	; 0x16d2 <orientationInput+0xb0>
    16b6:	09 c0       	rjmp	.+18     	; 0x16ca <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    16b8:	8c e4       	ldi	r24, 0x4C	; 76
    16ba:	92 e0       	ldi	r25, 0x02	; 2
    16bc:	08 c0       	rjmp	.+16     	; 0x16ce <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    16be:	8e e6       	ldi	r24, 0x6E	; 110
    16c0:	92 e0       	ldi	r25, 0x02	; 2
    16c2:	05 c0       	rjmp	.+10     	; 0x16ce <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    16c4:	8f e8       	ldi	r24, 0x8F	; 143
    16c6:	92 e0       	ldi	r25, 0x02	; 2
    16c8:	02 c0       	rjmp	.+4      	; 0x16ce <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    16ca:	81 eb       	ldi	r24, 0xB1	; 177
    16cc:	92 e0       	ldi	r25, 0x02	; 2
    16ce:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    16d2:	80 91 2f 06 	lds	r24, 0x062F
    16d6:	80 93 2e 06 	sts	0x062E, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    16da:	84 ef       	ldi	r24, 0xF4	; 244
    16dc:	91 e0       	ldi	r25, 0x01	; 1
    16de:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
}
    16e2:	df 91       	pop	r29
    16e4:	cf 91       	pop	r28
    16e6:	1f 91       	pop	r17
    16e8:	08 95       	ret

000016ea <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    16ea:	cf 92       	push	r12
    16ec:	df 92       	push	r13
    16ee:	ef 92       	push	r14
    16f0:	ff 92       	push	r15
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	df 93       	push	r29
    16f8:	cf 93       	push	r28
    16fa:	0f 92       	push	r0
    16fc:	cd b7       	in	r28, 0x3d	; 61
    16fe:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    1700:	80 91 30 07 	lds	r24, 0x0730
    1704:	f8 2e       	mov	r15, r24
    1706:	f6 94       	lsr	r15
    1708:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    170a:	98 2f       	mov	r25, r24
    170c:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    170e:	00 91 2f 06 	lds	r16, 0x062F
    1712:	cc 24       	eor	r12, r12
    1714:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    1716:	f6 01       	movw	r30, r12
    1718:	e2 5f       	subi	r30, 0xF2	; 242
    171a:	f9 4f       	sbci	r31, 0xF9	; 249
    171c:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    171e:	ef 2d       	mov	r30, r15
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	ee 0f       	add	r30, r30
    1724:	ff 1f       	adc	r31, r31
    1726:	ee 0f       	add	r30, r30
    1728:	ff 1f       	adc	r31, r31
    172a:	e9 0f       	add	r30, r25
    172c:	f1 1d       	adc	r31, r1
    172e:	e2 5e       	subi	r30, 0xE2	; 226
    1730:	f9 4f       	sbci	r31, 0xF9	; 249
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    1732:	80 81       	ld	r24, Z
    1734:	60 2f       	mov	r22, r16
    1736:	41 e0       	ldi	r20, 0x01	; 1
    1738:	99 83       	std	Y+1, r25	; 0x01
    173a:	0e 94 8a 10 	call	0x2114	; 0x2114 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    173e:	f6 01       	movw	r30, r12
    1740:	eb 54       	subi	r30, 0x4B	; 75
    1742:	f8 4f       	sbci	r31, 0xF8	; 248
    1744:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    1746:	99 81       	ldd	r25, Y+1	; 0x01
    1748:	12 30       	cpi	r17, 0x02	; 2
    174a:	89 f4       	brne	.+34     	; 0x176e <getGateways+0x84>
			switch(curOrient){
    174c:	01 30       	cpi	r16, 0x01	; 1
    174e:	49 f0       	breq	.+18     	; 0x1762 <getGateways+0x78>
    1750:	01 30       	cpi	r16, 0x01	; 1
    1752:	28 f0       	brcs	.+10     	; 0x175e <getGateways+0x74>
    1754:	02 30       	cpi	r16, 0x02	; 2
    1756:	39 f0       	breq	.+14     	; 0x1766 <getGateways+0x7c>
    1758:	03 30       	cpi	r16, 0x03	; 3
    175a:	89 f4       	brne	.+34     	; 0x177e <getGateways+0x94>
    175c:	06 c0       	rjmp	.+12     	; 0x176a <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    175e:	fa 94       	dec	r15
    1760:	0e c0       	rjmp	.+28     	; 0x177e <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    1762:	9f 5f       	subi	r25, 0xFF	; 255
    1764:	0c c0       	rjmp	.+24     	; 0x177e <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    1766:	f3 94       	inc	r15
    1768:	0a c0       	rjmp	.+20     	; 0x177e <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    176a:	91 50       	subi	r25, 0x01	; 1
    176c:	08 c0       	rjmp	.+16     	; 0x177e <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    176e:	13 30       	cpi	r17, 0x03	; 3
    1770:	11 f4       	brne	.+4      	; 0x1776 <getGateways+0x8c>
			curOrient++;
    1772:	0f 5f       	subi	r16, 0xFF	; 255
    1774:	03 c0       	rjmp	.+6      	; 0x177c <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    1776:	11 30       	cpi	r17, 0x01	; 1
    1778:	11 f4       	brne	.+4      	; 0x177e <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    177a:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    177c:	03 70       	andi	r16, 0x03	; 3
    177e:	08 94       	sec
    1780:	c1 1c       	adc	r12, r1
    1782:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    1784:	8d e0       	ldi	r24, 0x0D	; 13
    1786:	c8 16       	cp	r12, r24
    1788:	d1 04       	cpc	r13, r1
    178a:	29 f6       	brne	.-118    	; 0x1716 <getGateways+0x2c>
    178c:	cc 24       	eor	r12, r12
    178e:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    1790:	62 ed       	ldi	r22, 0xD2	; 210
    1792:	e6 2e       	mov	r14, r22
    1794:	62 e0       	ldi	r22, 0x02	; 2
    1796:	f6 2e       	mov	r15, r22
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    1798:	f6 01       	movw	r30, r12
    179a:	eb 54       	subi	r30, 0x4B	; 75
    179c:	f8 4f       	sbci	r31, 0xF8	; 248
    179e:	00 81       	ld	r16, Z
		LCD_clear();
    17a0:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    17a4:	20 2f       	mov	r18, r16
    17a6:	30 e0       	ldi	r19, 0x00	; 0
    17a8:	ad b7       	in	r26, 0x3d	; 61
    17aa:	be b7       	in	r27, 0x3e	; 62
    17ac:	54 97       	sbiw	r26, 0x14	; 20
    17ae:	0f b6       	in	r0, 0x3f	; 63
    17b0:	f8 94       	cli
    17b2:	be bf       	out	0x3e, r27	; 62
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	ad bf       	out	0x3d, r26	; 61
    17b8:	ed b7       	in	r30, 0x3d	; 61
    17ba:	fe b7       	in	r31, 0x3e	; 62
    17bc:	31 96       	adiw	r30, 0x01	; 1
    17be:	12 96       	adiw	r26, 0x02	; 2
    17c0:	fc 92       	st	X, r15
    17c2:	ee 92       	st	-X, r14
    17c4:	11 97       	sbiw	r26, 0x01	; 1
    17c6:	d3 82       	std	Z+3, r13	; 0x03
    17c8:	c2 82       	std	Z+2, r12	; 0x02
    17ca:	11 27       	eor	r17, r17
    17cc:	07 fd       	sbrc	r16, 7
    17ce:	10 95       	com	r17
    17d0:	00 27       	eor	r16, r16
    17d2:	11 0f       	add	r17, r17
    17d4:	00 1f       	adc	r16, r16
    17d6:	11 27       	eor	r17, r17
    17d8:	15 83       	std	Z+5, r17	; 0x05
    17da:	04 83       	std	Z+4, r16	; 0x04
    17dc:	c9 01       	movw	r24, r18
    17de:	46 e0       	ldi	r20, 0x06	; 6
    17e0:	96 95       	lsr	r25
    17e2:	87 95       	ror	r24
    17e4:	4a 95       	dec	r20
    17e6:	e1 f7       	brne	.-8      	; 0x17e0 <getGateways+0xf6>
    17e8:	81 70       	andi	r24, 0x01	; 1
    17ea:	90 70       	andi	r25, 0x00	; 0
    17ec:	97 83       	std	Z+7, r25	; 0x07
    17ee:	86 83       	std	Z+6, r24	; 0x06
    17f0:	c9 01       	movw	r24, r18
    17f2:	05 e0       	ldi	r16, 0x05	; 5
    17f4:	96 95       	lsr	r25
    17f6:	87 95       	ror	r24
    17f8:	0a 95       	dec	r16
    17fa:	e1 f7       	brne	.-8      	; 0x17f4 <getGateways+0x10a>
    17fc:	81 70       	andi	r24, 0x01	; 1
    17fe:	90 70       	andi	r25, 0x00	; 0
    1800:	91 87       	std	Z+9, r25	; 0x09
    1802:	80 87       	std	Z+8, r24	; 0x08
    1804:	c9 01       	movw	r24, r18
    1806:	14 e0       	ldi	r17, 0x04	; 4
    1808:	96 95       	lsr	r25
    180a:	87 95       	ror	r24
    180c:	1a 95       	dec	r17
    180e:	e1 f7       	brne	.-8      	; 0x1808 <getGateways+0x11e>
    1810:	81 70       	andi	r24, 0x01	; 1
    1812:	90 70       	andi	r25, 0x00	; 0
    1814:	93 87       	std	Z+11, r25	; 0x0b
    1816:	82 87       	std	Z+10, r24	; 0x0a
    1818:	c9 01       	movw	r24, r18
    181a:	b3 e0       	ldi	r27, 0x03	; 3
    181c:	96 95       	lsr	r25
    181e:	87 95       	ror	r24
    1820:	ba 95       	dec	r27
    1822:	e1 f7       	brne	.-8      	; 0x181c <getGateways+0x132>
    1824:	81 70       	andi	r24, 0x01	; 1
    1826:	90 70       	andi	r25, 0x00	; 0
    1828:	95 87       	std	Z+13, r25	; 0x0d
    182a:	84 87       	std	Z+12, r24	; 0x0c
    182c:	c9 01       	movw	r24, r18
    182e:	96 95       	lsr	r25
    1830:	87 95       	ror	r24
    1832:	96 95       	lsr	r25
    1834:	87 95       	ror	r24
    1836:	81 70       	andi	r24, 0x01	; 1
    1838:	90 70       	andi	r25, 0x00	; 0
    183a:	97 87       	std	Z+15, r25	; 0x0f
    183c:	86 87       	std	Z+14, r24	; 0x0e
    183e:	c9 01       	movw	r24, r18
    1840:	96 95       	lsr	r25
    1842:	87 95       	ror	r24
    1844:	81 70       	andi	r24, 0x01	; 1
    1846:	90 70       	andi	r25, 0x00	; 0
    1848:	91 8b       	std	Z+17, r25	; 0x11
    184a:	80 8b       	std	Z+16, r24	; 0x10
    184c:	21 70       	andi	r18, 0x01	; 1
    184e:	30 70       	andi	r19, 0x00	; 0
    1850:	33 8b       	std	Z+19, r19	; 0x13
    1852:	22 8b       	std	Z+18, r18	; 0x12
    1854:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
		TMRSRVC_delay(1000);//wait 1 second
    1858:	ed b7       	in	r30, 0x3d	; 61
    185a:	fe b7       	in	r31, 0x3e	; 62
    185c:	74 96       	adiw	r30, 0x14	; 20
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	fe bf       	out	0x3e, r31	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	ed bf       	out	0x3d, r30	; 61
    1868:	88 ee       	ldi	r24, 0xE8	; 232
    186a:	93 e0       	ldi	r25, 0x03	; 3
    186c:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
    1870:	08 94       	sec
    1872:	c1 1c       	adc	r12, r1
    1874:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    1876:	fd e0       	ldi	r31, 0x0D	; 13
    1878:	cf 16       	cp	r12, r31
    187a:	d1 04       	cpc	r13, r1
    187c:	09 f0       	breq	.+2      	; 0x1880 <getGateways+0x196>
    187e:	8c cf       	rjmp	.-232    	; 0x1798 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    1880:	0f 90       	pop	r0
    1882:	cf 91       	pop	r28
    1884:	df 91       	pop	r29
    1886:	1f 91       	pop	r17
    1888:	0f 91       	pop	r16
    188a:	ff 90       	pop	r15
    188c:	ef 90       	pop	r14
    188e:	df 90       	pop	r13
    1890:	cf 90       	pop	r12
    1892:	08 95       	ret

00001894 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    1894:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    1896:	10 91 30 07 	lds	r17, 0x0730
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    189a:	80 91 8b 05 	lds	r24, 0x058B
    189e:	60 91 2f 06 	lds	r22, 0x062F
    18a2:	40 e0       	ldi	r20, 0x00	; 0
    18a4:	0e 94 8a 10 	call	0x2114	; 0x2114 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    18a8:	e1 2f       	mov	r30, r17
    18aa:	e6 95       	lsr	r30
    18ac:	e6 95       	lsr	r30
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	13 70       	andi	r17, 0x03	; 3
    18ba:	e1 0f       	add	r30, r17
    18bc:	f1 1d       	adc	r31, r1
    18be:	e2 5e       	subi	r30, 0xE2	; 226
    18c0:	f9 4f       	sbci	r31, 0xF9	; 249
    18c2:	80 83       	st	Z, r24
}
    18c4:	1f 91       	pop	r17
    18c6:	08 95       	ret

000018c8 <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    18c8:	8f 92       	push	r8
    18ca:	af 92       	push	r10
    18cc:	bf 92       	push	r11
    18ce:	cf 92       	push	r12
    18d0:	df 92       	push	r13
    18d2:	ef 92       	push	r14
    18d4:	ff 92       	push	r15
    18d6:	0f 93       	push	r16
    18d8:	1f 93       	push	r17
	switch(currentMove){
    18da:	80 91 05 05 	lds	r24, 0x0505
    18de:	82 30       	cpi	r24, 0x02	; 2
    18e0:	69 f0       	breq	.+26     	; 0x18fc <moveMap+0x34>
    18e2:	83 30       	cpi	r24, 0x03	; 3
    18e4:	b9 f0       	breq	.+46     	; 0x1914 <moveMap+0x4c>
    18e6:	81 30       	cpi	r24, 0x01	; 1
    18e8:	69 f5       	brne	.+90     	; 0x1944 <moveMap+0x7c>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    18ea:	60 e0       	ldi	r22, 0x00	; 0
    18ec:	70 e0       	ldi	r23, 0x00	; 0
    18ee:	80 e0       	ldi	r24, 0x00	; 0
    18f0:	90 e0       	ldi	r25, 0x00	; 0
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	4c e8       	ldi	r20, 0x8C	; 140
    18f8:	51 ec       	ldi	r21, 0xC1	; 193
    18fa:	14 c0       	rjmp	.+40     	; 0x1924 <moveMap+0x5c>
			break;
		case MOVE_FORWARD:
			checkOdometry(1);
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	03 c0       	rjmp	.+6      	; 0x1906 <moveMap+0x3e>
			while(!odometryFlag){
				moveWall();
    1900:	0e 94 76 06 	call	0xcec	; 0xcec <moveWall>
				checkOdometry(0);
    1904:	80 e0       	ldi	r24, 0x00	; 0
    1906:	0e 94 ff 19 	call	0x33fe	; 0x33fe <checkOdometry>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
			break;
		case MOVE_FORWARD:
			checkOdometry(1);
			while(!odometryFlag){
    190a:	80 91 38 07 	lds	r24, 0x0738
    190e:	88 23       	and	r24, r24
    1910:	b9 f3       	breq	.-18     	; 0x1900 <moveMap+0x38>
    1912:	23 c0       	rjmp	.+70     	; 0x195a <moveMap+0x92>
				moveWall();
				checkOdometry(0);
			}
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1914:	60 e0       	ldi	r22, 0x00	; 0
    1916:	70 e0       	ldi	r23, 0x00	; 0
    1918:	80 e0       	ldi	r24, 0x00	; 0
    191a:	90 e0       	ldi	r25, 0x00	; 0
    191c:	20 e0       	ldi	r18, 0x00	; 0
    191e:	30 e0       	ldi	r19, 0x00	; 0
    1920:	4c e8       	ldi	r20, 0x8C	; 140
    1922:	51 e4       	ldi	r21, 0x41	; 65
    1924:	0f 2e       	mov	r0, r31
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	ef 2e       	mov	r14, r31
    192a:	f0 e0       	ldi	r31, 0x00	; 0
    192c:	ff 2e       	mov	r15, r31
    192e:	f0 e2       	ldi	r31, 0x20	; 32
    1930:	0f 2f       	mov	r16, r31
    1932:	f1 e4       	ldi	r31, 0x41	; 65
    1934:	1f 2f       	mov	r17, r31
    1936:	f0 2d       	mov	r31, r0
    1938:	57 01       	movw	r10, r14
    193a:	68 01       	movw	r12, r16
    193c:	88 24       	eor	r8, r8
    193e:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <move_arc_stwt>
    1942:	0b c0       	rjmp	.+22     	; 0x195a <moveMap+0x92>
			break;
		default:
			LCD_printf("Whatz2?!");
    1944:	00 d0       	rcall	.+0      	; 0x1946 <moveMap+0x7e>
    1946:	84 ef       	ldi	r24, 0xF4	; 244
    1948:	92 e0       	ldi	r25, 0x02	; 2
    194a:	ed b7       	in	r30, 0x3d	; 61
    194c:	fe b7       	in	r31, 0x3e	; 62
    194e:	92 83       	std	Z+2, r25	; 0x02
    1950:	81 83       	std	Z+1, r24	; 0x01
    1952:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
			break;
	}
}
    195a:	1f 91       	pop	r17
    195c:	0f 91       	pop	r16
    195e:	ff 90       	pop	r15
    1960:	ef 90       	pop	r14
    1962:	df 90       	pop	r13
    1964:	cf 90       	pop	r12
    1966:	bf 90       	pop	r11
    1968:	af 90       	pop	r10
    196a:	8f 90       	pop	r8
    196c:	08 95       	ret

0000196e <CBOT_main>:
/*******************************************************************
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
    196e:	cf 92       	push	r12
    1970:	df 92       	push	r13
    1972:	ff 92       	push	r15
    1974:	0f 93       	push	r16
    1976:	1f 93       	push	r17
    1978:	cf 93       	push	r28
    197a:	df 93       	push	r29
	// initialize the robot
	initializeRobot();
    197c:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <initializeRobot>
	
	checkOdometry(1);
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	0e 94 ff 19 	call	0x33fe	; 0x33fe <checkOdometry>
	while(1){}
	*/
		
	
	
	LCD_printf("      New Map\n\n\n\n");	
    1986:	8d ef       	ldi	r24, 0xFD	; 253
    1988:	92 e0       	ldi	r25, 0x02	; 2
    198a:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
	printMap();
    198e:	0e 94 ba 19 	call	0x3374	; 0x3374 <printMap>
	TMRSRVC_delay(1000);//wait 1 seconds
    1992:	88 ee       	ldi	r24, 0xE8	; 232
    1994:	93 e0       	ldi	r25, 0x03	; 3
    1996:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();	
    199a:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	
	// Enter the robot's current (starting) position
	LCD_printf("START Map/nlocation\n\n\n");	
    199e:	8e e0       	ldi	r24, 0x0E	; 14
    19a0:	93 e0       	ldi	r25, 0x03	; 3
    19a2:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    19a6:	88 ee       	ldi	r24, 0xE8	; 232
    19a8:	93 e0       	ldi	r25, 0x03	; 3
    19aa:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    19ae:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	worldInput();
    19b2:	0e 94 ce 0a 	call	0x159c	; 0x159c <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    19b6:	88 ee       	ldi	r24, 0xE8	; 232
    19b8:	93 e0       	ldi	r25, 0x03	; 3
    19ba:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    19be:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Map/norientation\n\n\n");	
    19c2:	84 e2       	ldi	r24, 0x24	; 36
    19c4:	93 e0       	ldi	r25, 0x03	; 3
    19c6:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    19ca:	88 ee       	ldi	r24, 0xE8	; 232
    19cc:	93 e0       	ldi	r25, 0x03	; 3
    19ce:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    19d2:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	orientationInput();
    19d6:	0e 94 11 0b 	call	0x1622	; 0x1622 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    19da:	88 ee       	ldi	r24, 0xE8	; 232
    19dc:	93 e0       	ldi	r25, 0x03	; 3
    19de:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    19e2:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	
	isMapping = 0;
    19e6:	10 92 c5 07 	sts	0x07C5, r1
	
	
	LCD_printf("      Your Map\n\n\n\n");	
    19ea:	8d e3       	ldi	r24, 0x3D	; 61
    19ec:	93 e0       	ldi	r25, 0x03	; 3
    19ee:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
	printMap();
    19f2:	0e 94 ba 19 	call	0x3374	; 0x3374 <printMap>
	TMRSRVC_delay(1000);//wait 1 seconds
    19f6:	88 ee       	ldi	r24, 0xE8	; 232
    19f8:	93 e0       	ldi	r25, 0x03	; 3
    19fa:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();	
    19fe:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
		
		//Shift the Map
		shiftMap();
		
		//Break?
		isMapping = ((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
    1a02:	ff 24       	eor	r15, r15
    1a04:	f3 94       	inc	r15
			break;
		}
		
		//Print Map
		LCD_clear();
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    1a06:	ee e5       	ldi	r30, 0x5E	; 94
    1a08:	ce 2e       	mov	r12, r30
    1a0a:	e3 e0       	ldi	r30, 0x03	; 3
    1a0c:	de 2e       	mov	r13, r30
    1a0e:	2e c1       	rjmp	.+604    	; 0x1c6c <CBOT_main+0x2fe>
	LCD_clear();	
		
	while(!isMapping)
	{	
		//Sense
		checkIR();	
    1a10:	0e 94 1a 18 	call	0x3034	; 0x3034 <checkIR>
		checkWorld();
    1a14:	0e 94 0a 06 	call	0xc14	; 0xc14 <checkWorld>
		
		//Record
		setGateways();
    1a18:	0e 94 4a 0c 	call	0x1894	; 0x1894 <setGateways>
				
		//Plan using the Map
		planMap();
    1a1c:	0e 94 04 09 	call	0x1208	; 0x1208 <planMap>
		
		//Act on the Map
		moveMap();
    1a20:	0e 94 64 0c 	call	0x18c8	; 0x18c8 <moveMap>
		
		//Shift the Map
		shiftMap();
    1a24:	0e 94 c3 08 	call	0x1186	; 0x1186 <shiftMap>
		
		//Break?
		isMapping = ((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
    1a28:	90 91 31 07 	lds	r25, 0x0731
    1a2c:	80 91 30 07 	lds	r24, 0x0730
    1a30:	98 17       	cp	r25, r24
    1a32:	19 f0       	breq	.+6      	; 0x1a3a <CBOT_main+0xcc>
    1a34:	80 e0       	ldi	r24, 0x00	; 0
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	09 c0       	rjmp	.+18     	; 0x1a4c <CBOT_main+0xde>
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	90 91 2e 06 	lds	r25, 0x062E
    1a40:	80 91 2f 06 	lds	r24, 0x062F
    1a44:	98 13       	cpse	r25, r24
    1a46:	21 e0       	ldi	r18, 0x01	; 1
    1a48:	2f 25       	eor	r18, r15
    1a4a:	82 2f       	mov	r24, r18
    1a4c:	80 93 c5 07 	sts	0x07C5, r24
		if(isMapping){			
    1a50:	88 23       	and	r24, r24
    1a52:	91 f0       	breq	.+36     	; 0x1a78 <CBOT_main+0x10a>
			LCD_clear();
    1a54:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
			LCD_printf("LOLZ\nI'm done!");
    1a58:	00 d0       	rcall	.+0      	; 0x1a5a <CBOT_main+0xec>
    1a5a:	8f e4       	ldi	r24, 0x4F	; 79
    1a5c:	93 e0       	ldi	r25, 0x03	; 3
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	9a 83       	std	Y+2, r25	; 0x02
    1a64:	89 83       	std	Y+1, r24	; 0x01
    1a66:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
			TMRSRVC_delay(3000);//wait 3 seconds
    1a6a:	0f 90       	pop	r0
    1a6c:	0f 90       	pop	r0
    1a6e:	88 eb       	ldi	r24, 0xB8	; 184
    1a70:	9b e0       	ldi	r25, 0x0B	; 11
    1a72:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
    1a76:	ff c0       	rjmp	.+510    	; 0x1c76 <CBOT_main+0x308>
			break;
		}
		
		//Print Map
		LCD_clear();
    1a78:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    1a7c:	80 91 05 05 	lds	r24, 0x0505
    1a80:	28 2f       	mov	r18, r24
    1a82:	30 e0       	ldi	r19, 0x00	; 0
    1a84:	60 91 30 07 	lds	r22, 0x0730
    1a88:	46 2f       	mov	r20, r22
    1a8a:	50 e0       	ldi	r21, 0x00	; 0
    1a8c:	00 91 2f 06 	lds	r16, 0x062F
    1a90:	a0 2f       	mov	r26, r16
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	ed b7       	in	r30, 0x3d	; 61
    1a96:	fe b7       	in	r31, 0x3e	; 62
    1a98:	f2 97       	sbiw	r30, 0x32	; 50
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	fe bf       	out	0x3e, r31	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	ed bf       	out	0x3d, r30	; 61
    1aa4:	31 96       	adiw	r30, 0x01	; 1
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    1aaa:	da 82       	std	Y+2, r13	; 0x02
    1aac:	c9 82       	std	Y+1, r12	; 0x01
    1aae:	99 27       	eor	r25, r25
    1ab0:	87 fd       	sbrc	r24, 7
    1ab2:	90 95       	com	r25
    1ab4:	88 27       	eor	r24, r24
    1ab6:	99 0f       	add	r25, r25
    1ab8:	88 1f       	adc	r24, r24
    1aba:	99 27       	eor	r25, r25
    1abc:	93 83       	std	Z+3, r25	; 0x03
    1abe:	82 83       	std	Z+2, r24	; 0x02
    1ac0:	c9 01       	movw	r24, r18
    1ac2:	16 e0       	ldi	r17, 0x06	; 6
    1ac4:	96 95       	lsr	r25
    1ac6:	87 95       	ror	r24
    1ac8:	1a 95       	dec	r17
    1aca:	e1 f7       	brne	.-8      	; 0x1ac4 <CBOT_main+0x156>
    1acc:	81 70       	andi	r24, 0x01	; 1
    1ace:	90 70       	andi	r25, 0x00	; 0
    1ad0:	95 83       	std	Z+5, r25	; 0x05
    1ad2:	84 83       	std	Z+4, r24	; 0x04
    1ad4:	c9 01       	movw	r24, r18
    1ad6:	75 e0       	ldi	r23, 0x05	; 5
    1ad8:	96 95       	lsr	r25
    1ada:	87 95       	ror	r24
    1adc:	7a 95       	dec	r23
    1ade:	e1 f7       	brne	.-8      	; 0x1ad8 <CBOT_main+0x16a>
    1ae0:	81 70       	andi	r24, 0x01	; 1
    1ae2:	90 70       	andi	r25, 0x00	; 0
    1ae4:	97 83       	std	Z+7, r25	; 0x07
    1ae6:	86 83       	std	Z+6, r24	; 0x06
    1ae8:	c9 01       	movw	r24, r18
    1aea:	14 e0       	ldi	r17, 0x04	; 4
    1aec:	96 95       	lsr	r25
    1aee:	87 95       	ror	r24
    1af0:	1a 95       	dec	r17
    1af2:	e1 f7       	brne	.-8      	; 0x1aec <CBOT_main+0x17e>
    1af4:	81 70       	andi	r24, 0x01	; 1
    1af6:	90 70       	andi	r25, 0x00	; 0
    1af8:	91 87       	std	Z+9, r25	; 0x09
    1afa:	80 87       	std	Z+8, r24	; 0x08
    1afc:	c9 01       	movw	r24, r18
    1afe:	73 e0       	ldi	r23, 0x03	; 3
    1b00:	96 95       	lsr	r25
    1b02:	87 95       	ror	r24
    1b04:	7a 95       	dec	r23
    1b06:	e1 f7       	brne	.-8      	; 0x1b00 <CBOT_main+0x192>
    1b08:	81 70       	andi	r24, 0x01	; 1
    1b0a:	90 70       	andi	r25, 0x00	; 0
    1b0c:	93 87       	std	Z+11, r25	; 0x0b
    1b0e:	82 87       	std	Z+10, r24	; 0x0a
    1b10:	c9 01       	movw	r24, r18
    1b12:	96 95       	lsr	r25
    1b14:	87 95       	ror	r24
    1b16:	96 95       	lsr	r25
    1b18:	87 95       	ror	r24
    1b1a:	81 70       	andi	r24, 0x01	; 1
    1b1c:	90 70       	andi	r25, 0x00	; 0
    1b1e:	95 87       	std	Z+13, r25	; 0x0d
    1b20:	84 87       	std	Z+12, r24	; 0x0c
    1b22:	c9 01       	movw	r24, r18
    1b24:	96 95       	lsr	r25
    1b26:	87 95       	ror	r24
    1b28:	81 70       	andi	r24, 0x01	; 1
    1b2a:	90 70       	andi	r25, 0x00	; 0
    1b2c:	97 87       	std	Z+15, r25	; 0x0f
    1b2e:	86 87       	std	Z+14, r24	; 0x0e
    1b30:	21 70       	andi	r18, 0x01	; 1
    1b32:	30 70       	andi	r19, 0x00	; 0
    1b34:	31 8b       	std	Z+17, r19	; 0x11
    1b36:	20 8b       	std	Z+16, r18	; 0x10
    1b38:	77 27       	eor	r23, r23
    1b3a:	67 fd       	sbrc	r22, 7
    1b3c:	70 95       	com	r23
    1b3e:	66 27       	eor	r22, r22
    1b40:	77 0f       	add	r23, r23
    1b42:	66 1f       	adc	r22, r22
    1b44:	77 27       	eor	r23, r23
    1b46:	73 8b       	std	Z+19, r23	; 0x13
    1b48:	62 8b       	std	Z+18, r22	; 0x12
    1b4a:	ca 01       	movw	r24, r20
    1b4c:	76 e0       	ldi	r23, 0x06	; 6
    1b4e:	96 95       	lsr	r25
    1b50:	87 95       	ror	r24
    1b52:	7a 95       	dec	r23
    1b54:	e1 f7       	brne	.-8      	; 0x1b4e <CBOT_main+0x1e0>
    1b56:	81 70       	andi	r24, 0x01	; 1
    1b58:	90 70       	andi	r25, 0x00	; 0
    1b5a:	95 8b       	std	Z+21, r25	; 0x15
    1b5c:	84 8b       	std	Z+20, r24	; 0x14
    1b5e:	ca 01       	movw	r24, r20
    1b60:	65 e0       	ldi	r22, 0x05	; 5
    1b62:	96 95       	lsr	r25
    1b64:	87 95       	ror	r24
    1b66:	6a 95       	dec	r22
    1b68:	e1 f7       	brne	.-8      	; 0x1b62 <CBOT_main+0x1f4>
    1b6a:	81 70       	andi	r24, 0x01	; 1
    1b6c:	90 70       	andi	r25, 0x00	; 0
    1b6e:	97 8b       	std	Z+23, r25	; 0x17
    1b70:	86 8b       	std	Z+22, r24	; 0x16
    1b72:	ca 01       	movw	r24, r20
    1b74:	34 e0       	ldi	r19, 0x04	; 4
    1b76:	96 95       	lsr	r25
    1b78:	87 95       	ror	r24
    1b7a:	3a 95       	dec	r19
    1b7c:	e1 f7       	brne	.-8      	; 0x1b76 <CBOT_main+0x208>
    1b7e:	81 70       	andi	r24, 0x01	; 1
    1b80:	90 70       	andi	r25, 0x00	; 0
    1b82:	91 8f       	std	Z+25, r25	; 0x19
    1b84:	80 8f       	std	Z+24, r24	; 0x18
    1b86:	ca 01       	movw	r24, r20
    1b88:	23 e0       	ldi	r18, 0x03	; 3
    1b8a:	96 95       	lsr	r25
    1b8c:	87 95       	ror	r24
    1b8e:	2a 95       	dec	r18
    1b90:	e1 f7       	brne	.-8      	; 0x1b8a <CBOT_main+0x21c>
    1b92:	81 70       	andi	r24, 0x01	; 1
    1b94:	90 70       	andi	r25, 0x00	; 0
    1b96:	93 8f       	std	Z+27, r25	; 0x1b
    1b98:	82 8f       	std	Z+26, r24	; 0x1a
    1b9a:	ca 01       	movw	r24, r20
    1b9c:	96 95       	lsr	r25
    1b9e:	87 95       	ror	r24
    1ba0:	96 95       	lsr	r25
    1ba2:	87 95       	ror	r24
    1ba4:	81 70       	andi	r24, 0x01	; 1
    1ba6:	90 70       	andi	r25, 0x00	; 0
    1ba8:	95 8f       	std	Z+29, r25	; 0x1d
    1baa:	84 8f       	std	Z+28, r24	; 0x1c
    1bac:	ca 01       	movw	r24, r20
    1bae:	96 95       	lsr	r25
    1bb0:	87 95       	ror	r24
    1bb2:	81 70       	andi	r24, 0x01	; 1
    1bb4:	90 70       	andi	r25, 0x00	; 0
    1bb6:	97 8f       	std	Z+31, r25	; 0x1f
    1bb8:	86 8f       	std	Z+30, r24	; 0x1e
    1bba:	41 70       	andi	r20, 0x01	; 1
    1bbc:	50 70       	andi	r21, 0x00	; 0
    1bbe:	51 a3       	std	Z+33, r21	; 0x21
    1bc0:	40 a3       	std	Z+32, r20	; 0x20
    1bc2:	11 27       	eor	r17, r17
    1bc4:	07 fd       	sbrc	r16, 7
    1bc6:	10 95       	com	r17
    1bc8:	00 27       	eor	r16, r16
    1bca:	11 0f       	add	r17, r17
    1bcc:	00 1f       	adc	r16, r16
    1bce:	11 27       	eor	r17, r17
    1bd0:	13 a3       	std	Z+35, r17	; 0x23
    1bd2:	02 a3       	std	Z+34, r16	; 0x22
    1bd4:	cd 01       	movw	r24, r26
    1bd6:	56 e0       	ldi	r21, 0x06	; 6
    1bd8:	96 95       	lsr	r25
    1bda:	87 95       	ror	r24
    1bdc:	5a 95       	dec	r21
    1bde:	e1 f7       	brne	.-8      	; 0x1bd8 <CBOT_main+0x26a>
    1be0:	81 70       	andi	r24, 0x01	; 1
    1be2:	90 70       	andi	r25, 0x00	; 0
    1be4:	95 a3       	std	Z+37, r25	; 0x25
    1be6:	84 a3       	std	Z+36, r24	; 0x24
    1be8:	cd 01       	movw	r24, r26
    1bea:	45 e0       	ldi	r20, 0x05	; 5
    1bec:	96 95       	lsr	r25
    1bee:	87 95       	ror	r24
    1bf0:	4a 95       	dec	r20
    1bf2:	e1 f7       	brne	.-8      	; 0x1bec <CBOT_main+0x27e>
    1bf4:	81 70       	andi	r24, 0x01	; 1
    1bf6:	90 70       	andi	r25, 0x00	; 0
    1bf8:	97 a3       	std	Z+39, r25	; 0x27
    1bfa:	86 a3       	std	Z+38, r24	; 0x26
    1bfc:	cd 01       	movw	r24, r26
    1bfe:	34 e0       	ldi	r19, 0x04	; 4
    1c00:	96 95       	lsr	r25
    1c02:	87 95       	ror	r24
    1c04:	3a 95       	dec	r19
    1c06:	e1 f7       	brne	.-8      	; 0x1c00 <CBOT_main+0x292>
    1c08:	81 70       	andi	r24, 0x01	; 1
    1c0a:	90 70       	andi	r25, 0x00	; 0
    1c0c:	91 a7       	std	Z+41, r25	; 0x29
    1c0e:	80 a7       	std	Z+40, r24	; 0x28
    1c10:	cd 01       	movw	r24, r26
    1c12:	23 e0       	ldi	r18, 0x03	; 3
    1c14:	96 95       	lsr	r25
    1c16:	87 95       	ror	r24
    1c18:	2a 95       	dec	r18
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <CBOT_main+0x2a6>
    1c1c:	81 70       	andi	r24, 0x01	; 1
    1c1e:	90 70       	andi	r25, 0x00	; 0
    1c20:	93 a7       	std	Z+43, r25	; 0x2b
    1c22:	82 a7       	std	Z+42, r24	; 0x2a
    1c24:	cd 01       	movw	r24, r26
    1c26:	96 95       	lsr	r25
    1c28:	87 95       	ror	r24
    1c2a:	96 95       	lsr	r25
    1c2c:	87 95       	ror	r24
    1c2e:	81 70       	andi	r24, 0x01	; 1
    1c30:	90 70       	andi	r25, 0x00	; 0
    1c32:	95 a7       	std	Z+45, r25	; 0x2d
    1c34:	84 a7       	std	Z+44, r24	; 0x2c
    1c36:	cd 01       	movw	r24, r26
    1c38:	96 95       	lsr	r25
    1c3a:	87 95       	ror	r24
    1c3c:	81 70       	andi	r24, 0x01	; 1
    1c3e:	90 70       	andi	r25, 0x00	; 0
    1c40:	97 a7       	std	Z+47, r25	; 0x2f
    1c42:	86 a7       	std	Z+46, r24	; 0x2e
    1c44:	a1 70       	andi	r26, 0x01	; 1
    1c46:	b0 70       	andi	r27, 0x00	; 0
    1c48:	b1 ab       	std	Z+49, r27	; 0x31
    1c4a:	a0 ab       	std	Z+48, r26	; 0x30
    1c4c:	0e 94 11 38 	call	0x7022	; 0x7022 <printf>
		printMap();
    1c50:	ed b7       	in	r30, 0x3d	; 61
    1c52:	fe b7       	in	r31, 0x3e	; 62
    1c54:	f2 96       	adiw	r30, 0x32	; 50
    1c56:	0f b6       	in	r0, 0x3f	; 63
    1c58:	f8 94       	cli
    1c5a:	fe bf       	out	0x3e, r31	; 62
    1c5c:	0f be       	out	0x3f, r0	; 63
    1c5e:	ed bf       	out	0x3d, r30	; 61
    1c60:	0e 94 ba 19 	call	0x3374	; 0x3374 <printMap>
		TMRSRVC_delay(500);//wait 3 seconds
    1c64:	84 ef       	ldi	r24, 0xF4	; 244
    1c66:	91 e0       	ldi	r25, 0x01	; 1
    1c68:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_printf("      Your Map\n\n\n\n");	
	printMap();
	TMRSRVC_delay(1000);//wait 1 seconds
	LCD_clear();	
		
	while(!isMapping)
    1c6c:	80 91 c5 07 	lds	r24, 0x07C5
    1c70:	88 23       	and	r24, r24
    1c72:	09 f4       	brne	.+2      	; 0x1c76 <CBOT_main+0x308>
    1c74:	cd ce       	rjmp	.-614    	; 0x1a10 <CBOT_main+0xa2>
		printMap();
		TMRSRVC_delay(500);//wait 3 seconds
	}
	
	// Print the map
	LCD_clear();	
    1c76:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	printMap();
    1c7a:	0e 94 ba 19 	call	0x3374	; 0x3374 <printMap>
	TMRSRVC_delay(10000);//wait 10 seconds
    1c7e:	80 e1       	ldi	r24, 0x10	; 16
    1c80:	97 e2       	ldi	r25, 0x27	; 39
    1c82:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();	
    1c86:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	
	// Enter the robot's current (starting) position
	LCD_printf("START Path\nlocation\n\n\n");	
    1c8a:	81 eb       	ldi	r24, 0xB1	; 177
    1c8c:	93 e0       	ldi	r25, 0x03	; 3
    1c8e:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1c92:	88 ee       	ldi	r24, 0xE8	; 232
    1c94:	93 e0       	ldi	r25, 0x03	; 3
    1c96:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    1c9a:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	worldInput();
    1c9e:	0e 94 ce 0a 	call	0x159c	; 0x159c <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1ca2:	88 ee       	ldi	r24, 0xE8	; 232
    1ca4:	93 e0       	ldi	r25, 0x03	; 3
    1ca6:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    1caa:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Path\norientation\n\n\n");
    1cae:	87 ec       	ldi	r24, 0xC7	; 199
    1cb0:	93 e0       	ldi	r25, 0x03	; 3
    1cb2:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1cb6:	88 ee       	ldi	r24, 0xE8	; 232
    1cb8:	93 e0       	ldi	r25, 0x03	; 3
    1cba:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    1cbe:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	orientationInput();
    1cc2:	0e 94 11 0b 	call	0x1622	; 0x1622 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1cc6:	88 ee       	ldi	r24, 0xE8	; 232
    1cc8:	93 e0       	ldi	r25, 0x03	; 3
    1cca:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    1cce:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	
	// Enter the robot topological commands
	LCD_printf("ENTER Path\ncommands\n\n\n");
    1cd2:	80 ee       	ldi	r24, 0xE0	; 224
    1cd4:	93 e0       	ldi	r25, 0x03	; 3
    1cd6:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1cda:	88 ee       	ldi	r24, 0xE8	; 232
    1cdc:	93 e0       	ldi	r25, 0x03	; 3
    1cde:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    1ce2:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	movesInput();
    1ce6:	0e 94 7b 0a 	call	0x14f6	; 0x14f6 <movesInput>
	TMRSRVC_delay(1000);//wait 1 seconds
    1cea:	88 ee       	ldi	r24, 0xE8	; 232
    1cec:	93 e0       	ldi	r25, 0x03	; 3
    1cee:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    1cf2:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	
	// Print the robot gateways
	LCD_printf("Robot Gateways:\n\n\n\n");
    1cf6:	86 ef       	ldi	r24, 0xF6	; 246
    1cf8:	93 e0       	ldi	r25, 0x03	; 3
    1cfa:	0e 94 23 38 	call	0x7046	; 0x7046 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1cfe:	88 ee       	ldi	r24, 0xE8	; 232
    1d00:	93 e0       	ldi	r25, 0x03	; 3
    1d02:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    1d06:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
	getGateways();
    1d0a:	0e 94 75 0b 	call	0x16ea	; 0x16ea <getGateways>
	TMRSRVC_delay(1000);//wait 1 seconds
    1d0e:	88 ee       	ldi	r24, 0xE8	; 232
    1d10:	93 e0       	ldi	r25, 0x03	; 3
    1d12:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
	LCD_clear();
    1d16:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
		
		
	// Infinite loop
	while (1)
    {
		checkIR();	
    1d1a:	0e 94 1a 18 	call	0x3034	; 0x3034 <checkIR>
		checkWorld();
    1d1e:	0e 94 0a 06 	call	0xc14	; 0xc14 <checkWorld>
		moveWorld();
    1d22:	0e 94 2e 09 	call	0x125c	; 0x125c <moveWorld>
    1d26:	f9 cf       	rjmp	.-14     	; 0x1d1a <CBOT_main+0x3ac>

00001d28 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
    1d28:	2f 92       	push	r2
    1d2a:	3f 92       	push	r3
    1d2c:	4f 92       	push	r4
    1d2e:	5f 92       	push	r5
    1d30:	6f 92       	push	r6
    1d32:	7f 92       	push	r7
    1d34:	8f 92       	push	r8
    1d36:	9f 92       	push	r9
    1d38:	af 92       	push	r10
    1d3a:	bf 92       	push	r11
    1d3c:	cf 92       	push	r12
    1d3e:	df 92       	push	r13
    1d40:	ef 92       	push	r14
    1d42:	ff 92       	push	r15
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	df 93       	push	r29
    1d4a:	cf 93       	push	r28
    1d4c:	cd b7       	in	r28, 0x3d	; 61
    1d4e:	de b7       	in	r29, 0x3e	; 62
    1d50:	64 97       	sbiw	r28, 0x14	; 20
    1d52:	0f b6       	in	r0, 0x3f	; 63
    1d54:	f8 94       	cli
    1d56:	de bf       	out	0x3e, r29	; 62
    1d58:	0f be       	out	0x3f, r0	; 63
    1d5a:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
    1d5c:	88 23       	and	r24, r24
    1d5e:	39 f5       	brne	.+78     	; 0x1dae <prefilter+0x86>
    1d60:	8b e7       	ldi	r24, 0x7B	; 123
    1d62:	95 e0       	ldi	r25, 0x05	; 5
    1d64:	9c 8b       	std	Y+20, r25	; 0x14
    1d66:	8b 8b       	std	Y+19, r24	; 0x13
    1d68:	ad ea       	ldi	r26, 0xAD	; 173
    1d6a:	b7 e0       	ldi	r27, 0x07	; 7
    1d6c:	be 83       	std	Y+6, r27	; 0x06
    1d6e:	ad 83       	std	Y+5, r26	; 0x05
    1d70:	e4 ea       	ldi	r30, 0xA4	; 164
    1d72:	f6 e0       	ldi	r31, 0x06	; 6
    1d74:	fc 83       	std	Y+4, r31	; 0x04
    1d76:	eb 83       	std	Y+3, r30	; 0x03
    1d78:	82 e0       	ldi	r24, 0x02	; 2
    1d7a:	96 e0       	ldi	r25, 0x06	; 6
    1d7c:	9a 83       	std	Y+2, r25	; 0x02
    1d7e:	89 83       	std	Y+1, r24	; 0x01
    1d80:	0f 2e       	mov	r0, r31
    1d82:	f0 e0       	ldi	r31, 0x00	; 0
    1d84:	2f 2e       	mov	r2, r31
    1d86:	f0 e0       	ldi	r31, 0x00	; 0
    1d88:	3f 2e       	mov	r3, r31
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	4f 2e       	mov	r4, r31
    1d8e:	f0 e0       	ldi	r31, 0x00	; 0
    1d90:	5f 2e       	mov	r5, r31
    1d92:	f0 2d       	mov	r31, r0
    1d94:	2f 86       	std	Y+15, r2	; 0x0f
    1d96:	38 8a       	std	Y+16, r3	; 0x10
    1d98:	49 8a       	std	Y+17, r4	; 0x11
    1d9a:	5a 8a       	std	Y+18, r5	; 0x12
    1d9c:	2b 86       	std	Y+11, r2	; 0x0b
    1d9e:	3c 86       	std	Y+12, r3	; 0x0c
    1da0:	4d 86       	std	Y+13, r4	; 0x0d
    1da2:	5e 86       	std	Y+14, r5	; 0x0e
    1da4:	2f 82       	std	Y+7, r2	; 0x07
    1da6:	38 86       	std	Y+8, r3	; 0x08
    1da8:	49 86       	std	Y+9, r4	; 0x09
    1daa:	5a 86       	std	Y+10, r5	; 0x0a
    1dac:	43 c0       	rjmp	.+134    	; 0x1e34 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    1dae:	a0 90 34 07 	lds	r10, 0x0734
    1db2:	b0 90 35 07 	lds	r11, 0x0735
    1db6:	c0 90 36 07 	lds	r12, 0x0736
    1dba:	d0 90 37 07 	lds	r13, 0x0737
			rtIR_old[i] = rtIR;
    1dbe:	e0 90 39 07 	lds	r14, 0x0739
    1dc2:	f0 90 3a 07 	lds	r15, 0x073A
    1dc6:	00 91 3b 07 	lds	r16, 0x073B
    1dca:	10 91 3c 07 	lds	r17, 0x073C
			ftIR_old[i] = ftIR;
    1dce:	20 90 83 05 	lds	r2, 0x0583
    1dd2:	30 90 84 05 	lds	r3, 0x0584
    1dd6:	40 90 85 05 	lds	r4, 0x0585
    1dda:	50 90 86 05 	lds	r5, 0x0586
			bkIR_old[i] = bkIR;
    1dde:	20 91 8d 05 	lds	r18, 0x058D
    1de2:	30 91 8e 05 	lds	r19, 0x058E
    1de6:	40 91 8f 05 	lds	r20, 0x058F
    1dea:	50 91 90 05 	lds	r21, 0x0590
    1dee:	80 e0       	ldi	r24, 0x00	; 0
    1df0:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    1df2:	fc 01       	movw	r30, r24
    1df4:	e5 5f       	subi	r30, 0xF5	; 245
    1df6:	fa 4f       	sbci	r31, 0xFA	; 250
    1df8:	a0 82       	st	Z, r10
    1dfa:	b1 82       	std	Z+1, r11	; 0x01
    1dfc:	c2 82       	std	Z+2, r12	; 0x02
    1dfe:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
    1e00:	fc 01       	movw	r30, r24
    1e02:	e3 5c       	subi	r30, 0xC3	; 195
    1e04:	f8 4f       	sbci	r31, 0xF8	; 248
    1e06:	e0 82       	st	Z, r14
    1e08:	f1 82       	std	Z+1, r15	; 0x01
    1e0a:	02 83       	std	Z+2, r16	; 0x02
    1e0c:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
    1e0e:	fc 01       	movw	r30, r24
    1e10:	ec 5c       	subi	r30, 0xCC	; 204
    1e12:	f9 4f       	sbci	r31, 0xF9	; 249
    1e14:	20 82       	st	Z, r2
    1e16:	31 82       	std	Z+1, r3	; 0x01
    1e18:	42 82       	std	Z+2, r4	; 0x02
    1e1a:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	ee 56       	subi	r30, 0x6E	; 110
    1e20:	fa 4f       	sbci	r31, 0xFA	; 250
    1e22:	20 83       	st	Z, r18
    1e24:	31 83       	std	Z+1, r19	; 0x01
    1e26:	42 83       	std	Z+2, r20	; 0x02
    1e28:	53 83       	std	Z+3, r21	; 0x03
    1e2a:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
    1e2c:	88 37       	cpi	r24, 0x78	; 120
    1e2e:	91 05       	cpc	r25, r1
    1e30:	01 f7       	brne	.-64     	; 0x1df2 <prefilter+0xca>
    1e32:	96 cf       	rjmp	.-212    	; 0x1d60 <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
    1e34:	ab 89       	ldd	r26, Y+19	; 0x13
    1e36:	bc 89       	ldd	r27, Y+20	; 0x14
    1e38:	2d 91       	ld	r18, X+
    1e3a:	3d 91       	ld	r19, X+
    1e3c:	4d 91       	ld	r20, X+
    1e3e:	5c 91       	ld	r21, X
    1e40:	13 97       	sbiw	r26, 0x03	; 3
    1e42:	fd 01       	movw	r30, r26
    1e44:	24 83       	std	Z+4, r18	; 0x04
    1e46:	35 83       	std	Z+5, r19	; 0x05
    1e48:	46 83       	std	Z+6, r20	; 0x06
    1e4a:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
    1e4c:	ad 81       	ldd	r26, Y+5	; 0x05
    1e4e:	be 81       	ldd	r27, Y+6	; 0x06
    1e50:	ed 90       	ld	r14, X+
    1e52:	fd 90       	ld	r15, X+
    1e54:	0d 91       	ld	r16, X+
    1e56:	1c 91       	ld	r17, X
    1e58:	13 97       	sbiw	r26, 0x03	; 3
    1e5a:	fd 01       	movw	r30, r26
    1e5c:	e4 82       	std	Z+4, r14	; 0x04
    1e5e:	f5 82       	std	Z+5, r15	; 0x05
    1e60:	06 83       	std	Z+6, r16	; 0x06
    1e62:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
    1e64:	ab 81       	ldd	r26, Y+3	; 0x03
    1e66:	bc 81       	ldd	r27, Y+4	; 0x04
    1e68:	ad 90       	ld	r10, X+
    1e6a:	bd 90       	ld	r11, X+
    1e6c:	cd 90       	ld	r12, X+
    1e6e:	dc 90       	ld	r13, X
    1e70:	13 97       	sbiw	r26, 0x03	; 3
    1e72:	fd 01       	movw	r30, r26
    1e74:	a4 82       	std	Z+4, r10	; 0x04
    1e76:	b5 82       	std	Z+5, r11	; 0x05
    1e78:	c6 82       	std	Z+6, r12	; 0x06
    1e7a:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
    1e7c:	a9 81       	ldd	r26, Y+1	; 0x01
    1e7e:	ba 81       	ldd	r27, Y+2	; 0x02
    1e80:	6d 90       	ld	r6, X+
    1e82:	7d 90       	ld	r7, X+
    1e84:	8d 90       	ld	r8, X+
    1e86:	9c 90       	ld	r9, X
    1e88:	13 97       	sbiw	r26, 0x03	; 3
    1e8a:	fd 01       	movw	r30, r26
    1e8c:	64 82       	std	Z+4, r6	; 0x04
    1e8e:	75 82       	std	Z+5, r7	; 0x05
    1e90:	86 82       	std	Z+6, r8	; 0x06
    1e92:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
    1e94:	c2 01       	movw	r24, r4
    1e96:	b1 01       	movw	r22, r2
    1e98:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    1e9c:	1b 01       	movw	r2, r22
    1e9e:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
    1ea0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ea2:	78 89       	ldd	r23, Y+16	; 0x10
    1ea4:	89 89       	ldd	r24, Y+17	; 0x11
    1ea6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ea8:	a8 01       	movw	r20, r16
    1eaa:	97 01       	movw	r18, r14
    1eac:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    1eb0:	6f 87       	std	Y+15, r22	; 0x0f
    1eb2:	78 8b       	std	Y+16, r23	; 0x10
    1eb4:	89 8b       	std	Y+17, r24	; 0x11
    1eb6:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
    1eb8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1eba:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ebc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ec0:	a6 01       	movw	r20, r12
    1ec2:	95 01       	movw	r18, r10
    1ec4:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    1ec8:	6b 87       	std	Y+11, r22	; 0x0b
    1eca:	7c 87       	std	Y+12, r23	; 0x0c
    1ecc:	8d 87       	std	Y+13, r24	; 0x0d
    1ece:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
    1ed0:	6f 81       	ldd	r22, Y+7	; 0x07
    1ed2:	78 85       	ldd	r23, Y+8	; 0x08
    1ed4:	89 85       	ldd	r24, Y+9	; 0x09
    1ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed8:	a4 01       	movw	r20, r8
    1eda:	93 01       	movw	r18, r6
    1edc:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    1ee0:	6f 83       	std	Y+7, r22	; 0x07
    1ee2:	78 87       	std	Y+8, r23	; 0x08
    1ee4:	89 87       	std	Y+9, r24	; 0x09
    1ee6:	9a 87       	std	Y+10, r25	; 0x0a
    1ee8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eea:	9c 89       	ldd	r25, Y+20	; 0x14
    1eec:	04 97       	sbiw	r24, 0x04	; 4
    1eee:	9c 8b       	std	Y+20, r25	; 0x14
    1ef0:	8b 8b       	std	Y+19, r24	; 0x13
    1ef2:	ad 81       	ldd	r26, Y+5	; 0x05
    1ef4:	be 81       	ldd	r27, Y+6	; 0x06
    1ef6:	14 97       	sbiw	r26, 0x04	; 4
    1ef8:	be 83       	std	Y+6, r27	; 0x06
    1efa:	ad 83       	std	Y+5, r26	; 0x05
    1efc:	eb 81       	ldd	r30, Y+3	; 0x03
    1efe:	fc 81       	ldd	r31, Y+4	; 0x04
    1f00:	34 97       	sbiw	r30, 0x04	; 4
    1f02:	fc 83       	std	Y+4, r31	; 0x04
    1f04:	eb 83       	std	Y+3, r30	; 0x03
    1f06:	89 81       	ldd	r24, Y+1	; 0x01
    1f08:	9a 81       	ldd	r25, Y+2	; 0x02
    1f0a:	04 97       	sbiw	r24, 0x04	; 4
    1f0c:	9a 83       	std	Y+2, r25	; 0x02
    1f0e:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
    1f10:	ab 89       	ldd	r26, Y+19	; 0x13
    1f12:	bc 89       	ldd	r27, Y+20	; 0x14
    1f14:	a3 50       	subi	r26, 0x03	; 3
    1f16:	b5 40       	sbci	r27, 0x05	; 5
    1f18:	09 f0       	breq	.+2      	; 0x1f1c <prefilter+0x1f4>
    1f1a:	8c cf       	rjmp	.-232    	; 0x1e34 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
    1f1c:	80 91 34 07 	lds	r24, 0x0734
    1f20:	90 91 35 07 	lds	r25, 0x0735
    1f24:	a0 91 36 07 	lds	r26, 0x0736
    1f28:	b0 91 37 07 	lds	r27, 0x0737
    1f2c:	eb 89       	ldd	r30, Y+19	; 0x13
    1f2e:	fc 89       	ldd	r31, Y+20	; 0x14
    1f30:	80 87       	std	Z+8, r24	; 0x08
    1f32:	91 87       	std	Z+9, r25	; 0x09
    1f34:	a2 87       	std	Z+10, r26	; 0x0a
    1f36:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
    1f38:	80 91 39 07 	lds	r24, 0x0739
    1f3c:	90 91 3a 07 	lds	r25, 0x073A
    1f40:	a0 91 3b 07 	lds	r26, 0x073B
    1f44:	b0 91 3c 07 	lds	r27, 0x073C
    1f48:	80 93 3d 07 	sts	0x073D, r24
    1f4c:	90 93 3e 07 	sts	0x073E, r25
    1f50:	a0 93 3f 07 	sts	0x073F, r26
    1f54:	b0 93 40 07 	sts	0x0740, r27
	ftIR_old[0] = ftIR;
    1f58:	80 91 83 05 	lds	r24, 0x0583
    1f5c:	90 91 84 05 	lds	r25, 0x0584
    1f60:	a0 91 85 05 	lds	r26, 0x0585
    1f64:	b0 91 86 05 	lds	r27, 0x0586
    1f68:	80 93 34 06 	sts	0x0634, r24
    1f6c:	90 93 35 06 	sts	0x0635, r25
    1f70:	a0 93 36 06 	sts	0x0636, r26
    1f74:	b0 93 37 06 	sts	0x0637, r27
	bkIR_old[0] = bkIR;
    1f78:	80 91 8d 05 	lds	r24, 0x058D
    1f7c:	90 91 8e 05 	lds	r25, 0x058E
    1f80:	a0 91 8f 05 	lds	r26, 0x058F
    1f84:	b0 91 90 05 	lds	r27, 0x0590
    1f88:	80 93 92 05 	sts	0x0592, r24
    1f8c:	90 93 93 05 	sts	0x0593, r25
    1f90:	a0 93 94 05 	sts	0x0594, r26
    1f94:	b0 93 95 05 	sts	0x0595, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
    1f98:	c2 01       	movw	r24, r4
    1f9a:	b1 01       	movw	r22, r2
    1f9c:	20 e0       	ldi	r18, 0x00	; 0
    1f9e:	30 e0       	ldi	r19, 0x00	; 0
    1fa0:	40 ef       	ldi	r20, 0xF0	; 240
    1fa2:	51 e4       	ldi	r21, 0x41	; 65
    1fa4:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    1fa8:	60 93 34 07 	sts	0x0734, r22
    1fac:	70 93 35 07 	sts	0x0735, r23
    1fb0:	80 93 36 07 	sts	0x0736, r24
    1fb4:	90 93 37 07 	sts	0x0737, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
    1fb8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1fba:	78 89       	ldd	r23, Y+16	; 0x10
    1fbc:	89 89       	ldd	r24, Y+17	; 0x11
    1fbe:	9a 89       	ldd	r25, Y+18	; 0x12
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	40 ef       	ldi	r20, 0xF0	; 240
    1fc6:	51 e4       	ldi	r21, 0x41	; 65
    1fc8:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    1fcc:	60 93 39 07 	sts	0x0739, r22
    1fd0:	70 93 3a 07 	sts	0x073A, r23
    1fd4:	80 93 3b 07 	sts	0x073B, r24
    1fd8:	90 93 3c 07 	sts	0x073C, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
    1fdc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fde:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fe2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	40 ef       	ldi	r20, 0xF0	; 240
    1fea:	51 e4       	ldi	r21, 0x41	; 65
    1fec:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    1ff0:	60 93 83 05 	sts	0x0583, r22
    1ff4:	70 93 84 05 	sts	0x0584, r23
    1ff8:	80 93 85 05 	sts	0x0585, r24
    1ffc:	90 93 86 05 	sts	0x0586, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
    2000:	6f 81       	ldd	r22, Y+7	; 0x07
    2002:	78 85       	ldd	r23, Y+8	; 0x08
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 ef       	ldi	r20, 0xF0	; 240
    200e:	51 e4       	ldi	r21, 0x41	; 65
    2010:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2014:	60 93 8d 05 	sts	0x058D, r22
    2018:	70 93 8e 05 	sts	0x058E, r23
    201c:	80 93 8f 05 	sts	0x058F, r24
    2020:	90 93 90 05 	sts	0x0590, r25
}
    2024:	64 96       	adiw	r28, 0x14	; 20
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	f8 94       	cli
    202a:	de bf       	out	0x3e, r29	; 62
    202c:	0f be       	out	0x3f, r0	; 63
    202e:	cd bf       	out	0x3d, r28	; 61
    2030:	cf 91       	pop	r28
    2032:	df 91       	pop	r29
    2034:	1f 91       	pop	r17
    2036:	0f 91       	pop	r16
    2038:	ff 90       	pop	r15
    203a:	ef 90       	pop	r14
    203c:	df 90       	pop	r13
    203e:	cf 90       	pop	r12
    2040:	bf 90       	pop	r11
    2042:	af 90       	pop	r10
    2044:	9f 90       	pop	r9
    2046:	8f 90       	pop	r8
    2048:	7f 90       	pop	r7
    204a:	6f 90       	pop	r6
    204c:	5f 90       	pop	r5
    204e:	4f 90       	pop	r4
    2050:	3f 90       	pop	r3
    2052:	2f 90       	pop	r2
    2054:	08 95       	ret

00002056 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
    2056:	af 92       	push	r10
    2058:	bf 92       	push	r11
    205a:	cf 92       	push	r12
    205c:	df 92       	push	r13
    205e:	ef 92       	push	r14
    2060:	ff 92       	push	r15
    2062:	0f 93       	push	r16
    2064:	1f 93       	push	r17
    2066:	7b 01       	movw	r14, r22
    2068:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
    206a:	44 23       	and	r20, r20
    206c:	61 f0       	breq	.+24     	; 0x2086 <pidController+0x30>
		Ierror = 0;
    206e:	80 e0       	ldi	r24, 0x00	; 0
    2070:	90 e0       	ldi	r25, 0x00	; 0
    2072:	a0 e0       	ldi	r26, 0x00	; 0
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	80 93 87 05 	sts	0x0587, r24
    207a:	90 93 88 05 	sts	0x0588, r25
    207e:	a0 93 89 05 	sts	0x0589, r26
    2082:	b0 93 8a 05 	sts	0x058A, r27
	}
	// At the current error to the running sum
	Ierror += error;
    2086:	c8 01       	movw	r24, r16
    2088:	b7 01       	movw	r22, r14
    208a:	20 91 87 05 	lds	r18, 0x0587
    208e:	30 91 88 05 	lds	r19, 0x0588
    2092:	40 91 89 05 	lds	r20, 0x0589
    2096:	50 91 8a 05 	lds	r21, 0x058A
    209a:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    209e:	5b 01       	movw	r10, r22
    20a0:	6c 01       	movw	r12, r24
    20a2:	60 93 87 05 	sts	0x0587, r22
    20a6:	70 93 88 05 	sts	0x0588, r23
    20aa:	80 93 89 05 	sts	0x0589, r24
    20ae:	90 93 8a 05 	sts	0x058A, r25
    20b2:	c8 01       	movw	r24, r16
    20b4:	b7 01       	movw	r22, r14
    20b6:	20 91 30 06 	lds	r18, 0x0630
    20ba:	30 91 31 06 	lds	r19, 0x0631
    20be:	40 91 32 06 	lds	r20, 0x0632
    20c2:	50 91 33 06 	lds	r21, 0x0633
    20c6:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <__subsf3>
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    20d6:	9b 01       	movw	r18, r22
    20d8:	ac 01       	movw	r20, r24
    20da:	c8 01       	movw	r24, r16
    20dc:	b7 01       	movw	r22, r14
    20de:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    20e2:	7b 01       	movw	r14, r22
    20e4:	8c 01       	movw	r16, r24
    20e6:	c6 01       	movw	r24, r12
    20e8:	b5 01       	movw	r22, r10
    20ea:	20 e0       	ldi	r18, 0x00	; 0
    20ec:	30 e0       	ldi	r19, 0x00	; 0
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    20f6:	9b 01       	movw	r18, r22
    20f8:	ac 01       	movw	r20, r24
    20fa:	c8 01       	movw	r24, r16
    20fc:	b7 01       	movw	r22, r14
    20fe:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	df 90       	pop	r13
    210c:	cf 90       	pop	r12
    210e:	bf 90       	pop	r11
    2110:	af 90       	pop	r10
    2112:	08 95       	ret

00002114 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    2114:	44 23       	and	r20, r20
    2116:	81 f0       	breq	.+32     	; 0x2138 <rotateCell+0x24>
    2118:	06 c0       	rjmp	.+12     	; 0x2126 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    211a:	e8 2f       	mov	r30, r24
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	e7 5f       	subi	r30, 0xF7	; 247
    2120:	fb 4f       	sbci	r31, 0xFB	; 251
    2122:	80 81       	ld	r24, Z
			orient--;
    2124:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    2126:	66 23       	and	r22, r22
    2128:	c1 f7       	brne	.-16     	; 0x211a <rotateCell+0x6>
    212a:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    212c:	e8 2f       	mov	r30, r24
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	e7 5e       	subi	r30, 0xE7	; 231
    2132:	fb 4f       	sbci	r31, 0xFB	; 251
    2134:	80 81       	ld	r24, Z
			orient--;
    2136:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    2138:	66 23       	and	r22, r22
    213a:	c1 f7       	brne	.-16     	; 0x212c <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    213c:	08 95       	ret

0000213e <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    213e:	8f 92       	push	r8
    2140:	af 92       	push	r10
    2142:	bf 92       	push	r11
    2144:	cf 92       	push	r12
    2146:	df 92       	push	r13
    2148:	ef 92       	push	r14
    214a:	ff 92       	push	r15
    214c:	0f 93       	push	r16
    214e:	1f 93       	push	r17
    2150:	cf 93       	push	r28
    2152:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    2154:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    2158:	67 2b       	or	r22, r23
    215a:	09 f0       	breq	.+2      	; 0x215e <moveWander+0x20>
    215c:	76 c0       	rjmp	.+236    	; 0x224a <moveWander+0x10c>
    215e:	89 2b       	or	r24, r25
    2160:	09 f0       	breq	.+2      	; 0x2164 <moveWander+0x26>
    2162:	73 c0       	rjmp	.+230    	; 0x224a <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    2164:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <rand>
    2168:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    216a:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <rand>
    216e:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    2170:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <rand>
    2174:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    2176:	0e 94 e8 36 	call	0x6dd0	; 0x6dd0 <rand>
    217a:	20 e0       	ldi	r18, 0x00	; 0
    217c:	6a e0       	ldi	r22, 0x0A	; 10
    217e:	70 e0       	ldi	r23, 0x00	; 0
    2180:	0e 94 19 35 	call	0x6a32	; 0x6a32 <__divmodhi4>
    2184:	08 97       	sbiw	r24, 0x08	; 8
    2186:	0c f0       	brlt	.+2      	; 0x218a <moveWander+0x4c>
    2188:	21 e0       	ldi	r18, 0x01	; 1
    218a:	82 2e       	mov	r8, r18
    218c:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    218e:	c8 01       	movw	r24, r16
    2190:	60 e9       	ldi	r22, 0x90	; 144
    2192:	71 e0       	ldi	r23, 0x01	; 1
    2194:	0e 94 19 35 	call	0x6a32	; 0x6a32 <__divmodhi4>
    2198:	20 e9       	ldi	r18, 0x90	; 144
    219a:	a2 2e       	mov	r10, r18
    219c:	21 e0       	ldi	r18, 0x01	; 1
    219e:	b2 2e       	mov	r11, r18
    21a0:	a8 0e       	add	r10, r24
    21a2:	b9 1e       	adc	r11, r25
    21a4:	8d b7       	in	r24, 0x3d	; 61
    21a6:	9e b7       	in	r25, 0x3e	; 62
    21a8:	09 97       	sbiw	r24, 0x09	; 9
    21aa:	0f b6       	in	r0, 0x3f	; 63
    21ac:	f8 94       	cli
    21ae:	9e bf       	out	0x3e, r25	; 62
    21b0:	0f be       	out	0x3f, r0	; 63
    21b2:	8d bf       	out	0x3d, r24	; 61
    21b4:	0d b7       	in	r16, 0x3d	; 61
    21b6:	1e b7       	in	r17, 0x3e	; 62
    21b8:	0f 5f       	subi	r16, 0xFF	; 255
    21ba:	1f 4f       	sbci	r17, 0xFF	; 255
    21bc:	c7 01       	movw	r24, r14
    21be:	68 ec       	ldi	r22, 0xC8	; 200
    21c0:	70 e0       	ldi	r23, 0x00	; 0
    21c2:	0e 94 19 35 	call	0x6a32	; 0x6a32 <__divmodhi4>
    21c6:	88 53       	subi	r24, 0x38	; 56
    21c8:	9f 4f       	sbci	r25, 0xFF	; 255
    21ca:	aa 27       	eor	r26, r26
    21cc:	97 fd       	sbrc	r25, 7
    21ce:	a0 95       	com	r26
    21d0:	ba 2f       	mov	r27, r26
    21d2:	bc 01       	movw	r22, r24
    21d4:	cd 01       	movw	r24, r26
    21d6:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__floatsisf>
    21da:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    21de:	6b 01       	movw	r12, r22
    21e0:	7c 01       	movw	r14, r24
    21e2:	f8 01       	movw	r30, r16
    21e4:	b1 82       	std	Z+1, r11	; 0x01
    21e6:	a0 82       	st	Z, r10
    21e8:	ce 01       	movw	r24, r28
    21ea:	68 ec       	ldi	r22, 0xC8	; 200
    21ec:	70 e0       	ldi	r23, 0x00	; 0
    21ee:	0e 94 19 35 	call	0x6a32	; 0x6a32 <__divmodhi4>
    21f2:	88 53       	subi	r24, 0x38	; 56
    21f4:	9f 4f       	sbci	r25, 0xFF	; 255
    21f6:	aa 27       	eor	r26, r26
    21f8:	97 fd       	sbrc	r25, 7
    21fa:	a0 95       	com	r26
    21fc:	ba 2f       	mov	r27, r26
    21fe:	bc 01       	movw	r22, r24
    2200:	cd 01       	movw	r24, r26
    2202:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__floatsisf>
    2206:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    220a:	f8 01       	movw	r30, r16
    220c:	73 83       	std	Z+3, r23	; 0x03
    220e:	62 83       	std	Z+2, r22	; 0x02
    2210:	82 ec       	ldi	r24, 0xC2	; 194
    2212:	91 e0       	ldi	r25, 0x01	; 1
    2214:	95 83       	std	Z+5, r25	; 0x05
    2216:	84 83       	std	Z+4, r24	; 0x04
    2218:	16 82       	std	Z+6, r1	; 0x06
    221a:	10 86       	std	Z+8, r1	; 0x08
    221c:	17 82       	std	Z+7, r1	; 0x07
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	62 e0       	ldi	r22, 0x02	; 2
    2222:	48 2d       	mov	r20, r8
    2224:	95 01       	movw	r18, r10
    2226:	86 01       	movw	r16, r12
    2228:	92 ec       	ldi	r25, 0xC2	; 194
    222a:	e9 2e       	mov	r14, r25
    222c:	91 e0       	ldi	r25, 0x01	; 1
    222e:	f9 2e       	mov	r15, r25
    2230:	cc 24       	eor	r12, r12
    2232:	aa 24       	eor	r10, r10
    2234:	bb 24       	eor	r11, r11
    2236:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <STEPPER_move>
    223a:	8d b7       	in	r24, 0x3d	; 61
    223c:	9e b7       	in	r25, 0x3e	; 62
    223e:	09 96       	adiw	r24, 0x09	; 9
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	9e bf       	out	0x3e, r25	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	df 91       	pop	r29
    224e:	cf 91       	pop	r28
    2250:	1f 91       	pop	r17
    2252:	0f 91       	pop	r16
    2254:	ff 90       	pop	r15
    2256:	ef 90       	pop	r14
    2258:	df 90       	pop	r13
    225a:	cf 90       	pop	r12
    225c:	bf 90       	pop	r11
    225e:	af 90       	pop	r10
    2260:	8f 90       	pop	r8
    2262:	08 95       	ret

00002264 <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
    2264:	2f 92       	push	r2
    2266:	3f 92       	push	r3
    2268:	4f 92       	push	r4
    226a:	5f 92       	push	r5
    226c:	6f 92       	push	r6
    226e:	7f 92       	push	r7
    2270:	8f 92       	push	r8
    2272:	9f 92       	push	r9
    2274:	af 92       	push	r10
    2276:	bf 92       	push	r11
    2278:	cf 92       	push	r12
    227a:	df 92       	push	r13
    227c:	ef 92       	push	r14
    227e:	ff 92       	push	r15
    2280:	0f 93       	push	r16
    2282:	1f 93       	push	r17
    2284:	df 93       	push	r29
    2286:	cf 93       	push	r28
    2288:	00 d0       	rcall	.+0      	; 0x228a <moveAway+0x26>
    228a:	00 d0       	rcall	.+0      	; 0x228c <moveAway+0x28>
    228c:	cd b7       	in	r28, 0x3d	; 61
    228e:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    2290:	60 90 83 05 	lds	r6, 0x0583
    2294:	70 90 84 05 	lds	r7, 0x0584
    2298:	80 90 85 05 	lds	r8, 0x0585
    229c:	90 90 86 05 	lds	r9, 0x0586
    22a0:	a0 90 8d 05 	lds	r10, 0x058D
    22a4:	b0 90 8e 05 	lds	r11, 0x058E
    22a8:	c0 90 8f 05 	lds	r12, 0x058F
    22ac:	d0 90 90 05 	lds	r13, 0x0590
	float moveX = rtIR - ltIR;
    22b0:	e0 90 39 07 	lds	r14, 0x0739
    22b4:	f0 90 3a 07 	lds	r15, 0x073A
    22b8:	00 91 3b 07 	lds	r16, 0x073B
    22bc:	10 91 3c 07 	lds	r17, 0x073C
    22c0:	80 91 34 07 	lds	r24, 0x0734
    22c4:	90 91 35 07 	lds	r25, 0x0735
    22c8:	a0 91 36 07 	lds	r26, 0x0736
    22cc:	b0 91 37 07 	lds	r27, 0x0737
    22d0:	89 83       	std	Y+1, r24	; 0x01
    22d2:	9a 83       	std	Y+2, r25	; 0x02
    22d4:	ab 83       	std	Y+3, r26	; 0x03
    22d6:	bc 83       	std	Y+4, r27	; 0x04
    22d8:	c8 01       	movw	r24, r16
    22da:	b7 01       	movw	r22, r14
    22dc:	29 81       	ldd	r18, Y+1	; 0x01
    22de:	3a 81       	ldd	r19, Y+2	; 0x02
    22e0:	4b 81       	ldd	r20, Y+3	; 0x03
    22e2:	5c 81       	ldd	r21, Y+4	; 0x04
    22e4:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <__subsf3>
    22e8:	1b 01       	movw	r2, r22
    22ea:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
    22ec:	c4 01       	movw	r24, r8
    22ee:	b3 01       	movw	r22, r6
    22f0:	20 e0       	ldi	r18, 0x00	; 0
    22f2:	30 e0       	ldi	r19, 0x00	; 0
    22f4:	40 ee       	ldi	r20, 0xE0	; 224
    22f6:	50 e4       	ldi	r21, 0x40	; 64
    22f8:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
    22fc:	87 fd       	sbrc	r24, 7
    22fe:	0b c0       	rjmp	.+22     	; 0x2316 <moveAway+0xb2>
    2300:	c6 01       	movw	r24, r12
    2302:	b5 01       	movw	r22, r10
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 ee       	ldi	r20, 0xE0	; 224
    230a:	50 e4       	ldi	r21, 0x40	; 64
    230c:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
    2310:	88 23       	and	r24, r24
    2312:	0c f0       	brlt	.+2      	; 0x2316 <moveAway+0xb2>
    2314:	68 c0       	rjmp	.+208    	; 0x23e6 <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    2316:	c4 01       	movw	r24, r8
    2318:	b3 01       	movw	r22, r6
    231a:	a6 01       	movw	r20, r12
    231c:	95 01       	movw	r18, r10
    231e:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <__subsf3>
    2322:	7b 01       	movw	r14, r22
    2324:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
    2326:	77 24       	eor	r7, r7
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e0       	ldi	r20, 0x00	; 0
    232e:	50 e0       	ldi	r21, 0x00	; 0
    2330:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <__gesf2>
    2334:	88 23       	and	r24, r24
    2336:	14 f0       	brlt	.+4      	; 0x233c <moveAway+0xd8>
    2338:	77 24       	eor	r7, r7
    233a:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    233c:	c8 01       	movw	r24, r16
    233e:	b7 01       	movw	r22, r14
    2340:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__fixsfsi>
    2344:	9b 01       	movw	r18, r22
    2346:	77 ff       	sbrs	r23, 7
    2348:	03 c0       	rjmp	.+6      	; 0x2350 <moveAway+0xec>
    234a:	30 95       	com	r19
    234c:	21 95       	neg	r18
    234e:	3f 4f       	sbci	r19, 0xFF	; 255
    2350:	b9 01       	movw	r22, r18
    2352:	88 27       	eor	r24, r24
    2354:	77 fd       	sbrc	r23, 7
    2356:	80 95       	com	r24
    2358:	98 2f       	mov	r25, r24
    235a:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__floatsisf>
    235e:	6b 01       	movw	r12, r22
    2360:	7c 01       	movw	r14, r24
    2362:	ad b7       	in	r26, 0x3d	; 61
    2364:	be b7       	in	r27, 0x3e	; 62
    2366:	19 97       	sbiw	r26, 0x09	; 9
    2368:	0f b6       	in	r0, 0x3f	; 63
    236a:	f8 94       	cli
    236c:	be bf       	out	0x3e, r27	; 62
    236e:	0f be       	out	0x3f, r0	; 63
    2370:	ad bf       	out	0x3d, r26	; 61
    2372:	0d b7       	in	r16, 0x3d	; 61
    2374:	1e b7       	in	r17, 0x3e	; 62
    2376:	0f 5f       	subi	r16, 0xFF	; 255
    2378:	1f 4f       	sbci	r17, 0xFF	; 255
    237a:	a2 01       	movw	r20, r4
    237c:	91 01       	movw	r18, r2
    237e:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    2382:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2386:	4b 01       	movw	r8, r22
    2388:	5c 01       	movw	r10, r24
    238a:	82 e3       	ldi	r24, 0x32	; 50
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	f8 01       	movw	r30, r16
    2390:	91 83       	std	Z+1, r25	; 0x01
    2392:	80 83       	st	Z, r24
    2394:	c7 01       	movw	r24, r14
    2396:	b6 01       	movw	r22, r12
    2398:	a2 01       	movw	r20, r4
    239a:	91 01       	movw	r18, r2
    239c:	0e 94 d8 2d 	call	0x5bb0	; 0x5bb0 <__subsf3>
    23a0:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    23a4:	d8 01       	movw	r26, r16
    23a6:	13 96       	adiw	r26, 0x03	; 3
    23a8:	7c 93       	st	X, r23
    23aa:	6e 93       	st	-X, r22
    23ac:	12 97       	sbiw	r26, 0x02	; 2
    23ae:	82 ec       	ldi	r24, 0xC2	; 194
    23b0:	91 e0       	ldi	r25, 0x01	; 1
    23b2:	15 96       	adiw	r26, 0x05	; 5
    23b4:	9c 93       	st	X, r25
    23b6:	8e 93       	st	-X, r24
    23b8:	14 97       	sbiw	r26, 0x04	; 4
    23ba:	16 96       	adiw	r26, 0x06	; 6
    23bc:	1c 92       	st	X, r1
    23be:	16 97       	sbiw	r26, 0x06	; 6
    23c0:	18 96       	adiw	r26, 0x08	; 8
    23c2:	1c 92       	st	X, r1
    23c4:	1e 92       	st	-X, r1
    23c6:	17 97       	sbiw	r26, 0x07	; 7
    23c8:	81 e0       	ldi	r24, 0x01	; 1
    23ca:	62 e0       	ldi	r22, 0x02	; 2
    23cc:	47 2d       	mov	r20, r7
    23ce:	22 e3       	ldi	r18, 0x32	; 50
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	84 01       	movw	r16, r8
    23d4:	e2 ec       	ldi	r30, 0xC2	; 194
    23d6:	ee 2e       	mov	r14, r30
    23d8:	e1 e0       	ldi	r30, 0x01	; 1
    23da:	fe 2e       	mov	r15, r30
    23dc:	cc 24       	eor	r12, r12
    23de:	aa 24       	eor	r10, r10
    23e0:	bb 24       	eor	r11, r11
    23e2:	87 2c       	mov	r8, r7
    23e4:	82 c0       	rjmp	.+260    	; 0x24ea <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
    23e6:	c8 01       	movw	r24, r16
    23e8:	b7 01       	movw	r22, r14
    23ea:	20 e0       	ldi	r18, 0x00	; 0
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	40 e2       	ldi	r20, 0x20	; 32
    23f0:	51 e4       	ldi	r21, 0x41	; 65
    23f2:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
    23f6:	88 23       	and	r24, r24
    23f8:	b4 f5       	brge	.+108    	; 0x2466 <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    23fa:	c2 01       	movw	r24, r4
    23fc:	b1 01       	movw	r22, r2
    23fe:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__fixsfsi>
    2402:	8b 01       	movw	r16, r22
    2404:	77 ff       	sbrs	r23, 7
    2406:	03 c0       	rjmp	.+6      	; 0x240e <moveAway+0x1aa>
    2408:	10 95       	com	r17
    240a:	01 95       	neg	r16
    240c:	1f 4f       	sbci	r17, 0xFF	; 255
    240e:	2d b7       	in	r18, 0x3d	; 61
    2410:	3e b7       	in	r19, 0x3e	; 62
    2412:	29 50       	subi	r18, 0x09	; 9
    2414:	30 40       	sbci	r19, 0x00	; 0
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	3e bf       	out	0x3e, r19	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	2d bf       	out	0x3d, r18	; 61
    2420:	ed b7       	in	r30, 0x3d	; 61
    2422:	fe b7       	in	r31, 0x3e	; 62
    2424:	31 96       	adiw	r30, 0x01	; 1
    2426:	88 ec       	ldi	r24, 0xC8	; 200
    2428:	90 e0       	ldi	r25, 0x00	; 0
    242a:	ad b7       	in	r26, 0x3d	; 61
    242c:	be b7       	in	r27, 0x3e	; 62
    242e:	12 96       	adiw	r26, 0x02	; 2
    2430:	9c 93       	st	X, r25
    2432:	8e 93       	st	-X, r24
    2434:	11 97       	sbiw	r26, 0x01	; 1
    2436:	13 83       	std	Z+3, r17	; 0x03
    2438:	02 83       	std	Z+2, r16	; 0x02
    243a:	82 ec       	ldi	r24, 0xC2	; 194
    243c:	91 e0       	ldi	r25, 0x01	; 1
    243e:	95 83       	std	Z+5, r25	; 0x05
    2440:	84 83       	std	Z+4, r24	; 0x04
    2442:	16 82       	std	Z+6, r1	; 0x06
    2444:	10 86       	std	Z+8, r1	; 0x08
    2446:	17 82       	std	Z+7, r1	; 0x07
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	62 e0       	ldi	r22, 0x02	; 2
    244c:	40 e0       	ldi	r20, 0x00	; 0
    244e:	28 ec       	ldi	r18, 0xC8	; 200
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	72 ec       	ldi	r23, 0xC2	; 194
    2454:	e7 2e       	mov	r14, r23
    2456:	71 e0       	ldi	r23, 0x01	; 1
    2458:	f7 2e       	mov	r15, r23
    245a:	cc 24       	eor	r12, r12
    245c:	aa 24       	eor	r10, r10
    245e:	bb 24       	eor	r11, r11
    2460:	88 24       	eor	r8, r8
    2462:	83 94       	inc	r8
    2464:	42 c0       	rjmp	.+132    	; 0x24ea <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
    2466:	69 81       	ldd	r22, Y+1	; 0x01
    2468:	7a 81       	ldd	r23, Y+2	; 0x02
    246a:	8b 81       	ldd	r24, Y+3	; 0x03
    246c:	9c 81       	ldd	r25, Y+4	; 0x04
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
    247a:	87 fd       	sbrc	r24, 7
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <moveAway+0x21e>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	3f c0       	rjmp	.+126    	; 0x2500 <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    2482:	c2 01       	movw	r24, r4
    2484:	b1 01       	movw	r22, r2
    2486:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__fixsfsi>
    248a:	8b 01       	movw	r16, r22
    248c:	77 ff       	sbrs	r23, 7
    248e:	03 c0       	rjmp	.+6      	; 0x2496 <moveAway+0x232>
    2490:	10 95       	com	r17
    2492:	01 95       	neg	r16
    2494:	1f 4f       	sbci	r17, 0xFF	; 255
    2496:	2d b7       	in	r18, 0x3d	; 61
    2498:	3e b7       	in	r19, 0x3e	; 62
    249a:	29 50       	subi	r18, 0x09	; 9
    249c:	30 40       	sbci	r19, 0x00	; 0
    249e:	0f b6       	in	r0, 0x3f	; 63
    24a0:	f8 94       	cli
    24a2:	3e bf       	out	0x3e, r19	; 62
    24a4:	0f be       	out	0x3f, r0	; 63
    24a6:	2d bf       	out	0x3d, r18	; 61
    24a8:	ed b7       	in	r30, 0x3d	; 61
    24aa:	fe b7       	in	r31, 0x3e	; 62
    24ac:	31 96       	adiw	r30, 0x01	; 1
    24ae:	88 ec       	ldi	r24, 0xC8	; 200
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	ad b7       	in	r26, 0x3d	; 61
    24b4:	be b7       	in	r27, 0x3e	; 62
    24b6:	12 96       	adiw	r26, 0x02	; 2
    24b8:	9c 93       	st	X, r25
    24ba:	8e 93       	st	-X, r24
    24bc:	11 97       	sbiw	r26, 0x01	; 1
    24be:	13 83       	std	Z+3, r17	; 0x03
    24c0:	02 83       	std	Z+2, r16	; 0x02
    24c2:	82 ec       	ldi	r24, 0xC2	; 194
    24c4:	91 e0       	ldi	r25, 0x01	; 1
    24c6:	95 83       	std	Z+5, r25	; 0x05
    24c8:	84 83       	std	Z+4, r24	; 0x04
    24ca:	16 82       	std	Z+6, r1	; 0x06
    24cc:	10 86       	std	Z+8, r1	; 0x08
    24ce:	17 82       	std	Z+7, r1	; 0x07
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	62 e0       	ldi	r22, 0x02	; 2
    24d4:	41 e0       	ldi	r20, 0x01	; 1
    24d6:	28 ec       	ldi	r18, 0xC8	; 200
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	52 ec       	ldi	r21, 0xC2	; 194
    24dc:	e5 2e       	mov	r14, r21
    24de:	51 e0       	ldi	r21, 0x01	; 1
    24e0:	f5 2e       	mov	r15, r21
    24e2:	cc 24       	eor	r12, r12
    24e4:	aa 24       	eor	r10, r10
    24e6:	bb 24       	eor	r11, r11
    24e8:	88 24       	eor	r8, r8
    24ea:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <STEPPER_move>
    24ee:	81 e0       	ldi	r24, 0x01	; 1
    24f0:	ed b7       	in	r30, 0x3d	; 61
    24f2:	fe b7       	in	r31, 0x3e	; 62
    24f4:	39 96       	adiw	r30, 0x09	; 9
    24f6:	0f b6       	in	r0, 0x3f	; 63
    24f8:	f8 94       	cli
    24fa:	fe bf       	out	0x3e, r31	; 62
    24fc:	0f be       	out	0x3f, r0	; 63
    24fe:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
    2500:	0f 90       	pop	r0
    2502:	0f 90       	pop	r0
    2504:	0f 90       	pop	r0
    2506:	0f 90       	pop	r0
    2508:	cf 91       	pop	r28
    250a:	df 91       	pop	r29
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	df 90       	pop	r13
    2516:	cf 90       	pop	r12
    2518:	bf 90       	pop	r11
    251a:	af 90       	pop	r10
    251c:	9f 90       	pop	r9
    251e:	8f 90       	pop	r8
    2520:	7f 90       	pop	r7
    2522:	6f 90       	pop	r6
    2524:	5f 90       	pop	r5
    2526:	4f 90       	pop	r4
    2528:	3f 90       	pop	r3
    252a:	2f 90       	pop	r2
    252c:	08 95       	ret

0000252e <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    252e:	2f 92       	push	r2
    2530:	3f 92       	push	r3
    2532:	4f 92       	push	r4
    2534:	5f 92       	push	r5
    2536:	6f 92       	push	r6
    2538:	7f 92       	push	r7
    253a:	8f 92       	push	r8
    253c:	9f 92       	push	r9
    253e:	af 92       	push	r10
    2540:	bf 92       	push	r11
    2542:	cf 92       	push	r12
    2544:	df 92       	push	r13
    2546:	ef 92       	push	r14
    2548:	ff 92       	push	r15
    254a:	0f 93       	push	r16
    254c:	1f 93       	push	r17
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	a0 97       	sbiw	r28, 0x20	; 32
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	2b 01       	movw	r4, r22
    2564:	3c 01       	movw	r6, r24
    2566:	2d 83       	std	Y+5, r18	; 0x05
    2568:	3e 83       	std	Y+6, r19	; 0x06
    256a:	4f 83       	std	Y+7, r20	; 0x07
    256c:	58 87       	std	Y+8, r21	; 0x08
    256e:	e9 86       	std	Y+9, r14	; 0x09
    2570:	fa 86       	std	Y+10, r15	; 0x0a
    2572:	0b 87       	std	Y+11, r16	; 0x0b
    2574:	1c 87       	std	Y+12, r17	; 0x0c
    2576:	ad 86       	std	Y+13, r10	; 0x0d
    2578:	be 86       	std	Y+14, r11	; 0x0e
    257a:	cf 86       	std	Y+15, r12	; 0x0f
    257c:	d8 8a       	std	Y+16, r13	; 0x10
    257e:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    2580:	33 24       	eor	r3, r3
    2582:	ca 01       	movw	r24, r20
    2584:	b9 01       	movw	r22, r18
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	40 e0       	ldi	r20, 0x00	; 0
    258c:	50 e0       	ldi	r21, 0x00	; 0
    258e:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <__gesf2>
    2592:	18 16       	cp	r1, r24
    2594:	14 f4       	brge	.+4      	; 0x259a <move_arc_stnb+0x6c>
    2596:	33 24       	eor	r3, r3
    2598:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    259a:	6d 81       	ldd	r22, Y+5	; 0x05
    259c:	7e 81       	ldd	r23, Y+6	; 0x06
    259e:	8f 81       	ldd	r24, Y+7	; 0x07
    25a0:	98 85       	ldd	r25, Y+8	; 0x08
    25a2:	2c ed       	ldi	r18, 0xDC	; 220
    25a4:	38 eb       	ldi	r19, 0xB8	; 184
    25a6:	48 e0       	ldi	r20, 0x08	; 8
    25a8:	5e e3       	ldi	r21, 0x3E	; 62
    25aa:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    25ae:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__fixsfsi>
    25b2:	9b 01       	movw	r18, r22
    25b4:	77 ff       	sbrs	r23, 7
    25b6:	03 c0       	rjmp	.+6      	; 0x25be <move_arc_stnb+0x90>
    25b8:	30 95       	com	r19
    25ba:	21 95       	neg	r18
    25bc:	3f 4f       	sbci	r19, 0xFF	; 255
    25be:	b9 01       	movw	r22, r18
    25c0:	88 27       	eor	r24, r24
    25c2:	77 fd       	sbrc	r23, 7
    25c4:	80 95       	com	r24
    25c6:	98 2f       	mov	r25, r24
    25c8:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__floatsisf>
    25cc:	69 83       	std	Y+1, r22	; 0x01
    25ce:	7a 83       	std	Y+2, r23	; 0x02
    25d0:	8b 83       	std	Y+3, r24	; 0x03
    25d2:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    25d4:	69 85       	ldd	r22, Y+9	; 0x09
    25d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    25d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    25da:	9c 85       	ldd	r25, Y+12	; 0x0c
    25dc:	2c ed       	ldi	r18, 0xDC	; 220
    25de:	38 eb       	ldi	r19, 0xB8	; 184
    25e0:	48 e0       	ldi	r20, 0x08	; 8
    25e2:	5e e3       	ldi	r21, 0x3E	; 62
    25e4:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    25e8:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__fixsfsi>
    25ec:	9b 01       	movw	r18, r22
    25ee:	77 ff       	sbrs	r23, 7
    25f0:	03 c0       	rjmp	.+6      	; 0x25f8 <move_arc_stnb+0xca>
    25f2:	30 95       	com	r19
    25f4:	21 95       	neg	r18
    25f6:	3f 4f       	sbci	r19, 0xFF	; 255
    25f8:	b9 01       	movw	r22, r18
    25fa:	88 27       	eor	r24, r24
    25fc:	77 fd       	sbrc	r23, 7
    25fe:	80 95       	com	r24
    2600:	98 2f       	mov	r25, r24
    2602:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__floatsisf>
    2606:	4b 01       	movw	r8, r22
    2608:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    260a:	6d 85       	ldd	r22, Y+13	; 0x0d
    260c:	7e 85       	ldd	r23, Y+14	; 0x0e
    260e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2610:	98 89       	ldd	r25, Y+16	; 0x10
    2612:	2c ed       	ldi	r18, 0xDC	; 220
    2614:	38 eb       	ldi	r19, 0xB8	; 184
    2616:	48 e0       	ldi	r20, 0x08	; 8
    2618:	5e e3       	ldi	r21, 0x3E	; 62
    261a:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    261e:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__fixsfsi>
    2622:	9b 01       	movw	r18, r22
    2624:	77 ff       	sbrs	r23, 7
    2626:	03 c0       	rjmp	.+6      	; 0x262e <move_arc_stnb+0x100>
    2628:	30 95       	com	r19
    262a:	21 95       	neg	r18
    262c:	3f 4f       	sbci	r19, 0xFF	; 255
    262e:	b9 01       	movw	r22, r18
    2630:	88 27       	eor	r24, r24
    2632:	77 fd       	sbrc	r23, 7
    2634:	80 95       	com	r24
    2636:	98 2f       	mov	r25, r24
    2638:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__floatsisf>
    263c:	6b 01       	movw	r12, r22
    263e:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    2640:	c3 01       	movw	r24, r6
    2642:	b2 01       	movw	r22, r4
    2644:	20 e0       	ldi	r18, 0x00	; 0
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	5f e4       	ldi	r21, 0x4F	; 79
    264c:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
    2650:	88 23       	and	r24, r24
    2652:	a1 f5       	brne	.+104    	; 0x26bc <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    2654:	69 81       	ldd	r22, Y+1	; 0x01
    2656:	7a 81       	ldd	r23, Y+2	; 0x02
    2658:	8b 81       	ldd	r24, Y+3	; 0x03
    265a:	9c 81       	ldd	r25, Y+4	; 0x04
    265c:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2660:	2b 01       	movw	r4, r22
    2662:	3c 01       	movw	r6, r24
    2664:	c5 01       	movw	r24, r10
    2666:	b4 01       	movw	r22, r8
    2668:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    266c:	4b 01       	movw	r8, r22
    266e:	5c 01       	movw	r10, r24
    2670:	c7 01       	movw	r24, r14
    2672:	b6 01       	movw	r22, r12
    2674:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2678:	6b 01       	movw	r12, r22
    267a:	7c 01       	movw	r14, r24
    267c:	2d b7       	in	r18, 0x3d	; 61
    267e:	3e b7       	in	r19, 0x3e	; 62
    2680:	29 50       	subi	r18, 0x09	; 9
    2682:	30 40       	sbci	r19, 0x00	; 0
    2684:	0f b6       	in	r0, 0x3f	; 63
    2686:	f8 94       	cli
    2688:	3e bf       	out	0x3e, r19	; 62
    268a:	0f be       	out	0x3f, r0	; 63
    268c:	2d bf       	out	0x3d, r18	; 61
    268e:	ed b7       	in	r30, 0x3d	; 61
    2690:	fe b7       	in	r31, 0x3e	; 62
    2692:	31 96       	adiw	r30, 0x01	; 1
    2694:	ad b7       	in	r26, 0x3d	; 61
    2696:	be b7       	in	r27, 0x3e	; 62
    2698:	12 96       	adiw	r26, 0x02	; 2
    269a:	5c 92       	st	X, r5
    269c:	4e 92       	st	-X, r4
    269e:	11 97       	sbiw	r26, 0x01	; 1
    26a0:	93 82       	std	Z+3, r9	; 0x03
    26a2:	82 82       	std	Z+2, r8	; 0x02
    26a4:	75 83       	std	Z+5, r23	; 0x05
    26a6:	64 83       	std	Z+4, r22	; 0x04
    26a8:	26 82       	std	Z+6, r2	; 0x06
    26aa:	10 86       	std	Z+8, r1	; 0x08
    26ac:	17 82       	std	Z+7, r1	; 0x07
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	62 e0       	ldi	r22, 0x02	; 2
    26b2:	43 2d       	mov	r20, r3
    26b4:	92 01       	movw	r18, r4
    26b6:	84 01       	movw	r16, r8
    26b8:	76 01       	movw	r14, r12
    26ba:	c1 c1       	rjmp	.+898    	; 0x2a3e <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    26bc:	c3 01       	movw	r24, r6
    26be:	b2 01       	movw	r22, r4
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
    26cc:	88 23       	and	r24, r24
    26ce:	e9 f5       	brne	.+122    	; 0x274a <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    26d0:	69 81       	ldd	r22, Y+1	; 0x01
    26d2:	7a 81       	ldd	r23, Y+2	; 0x02
    26d4:	8b 81       	ldd	r24, Y+3	; 0x03
    26d6:	9c 81       	ldd	r25, Y+4	; 0x04
    26d8:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    26dc:	3b 01       	movw	r6, r22
    26de:	c5 01       	movw	r24, r10
    26e0:	b4 01       	movw	r22, r8
    26e2:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    26e6:	8b 01       	movw	r16, r22
    26e8:	c7 01       	movw	r24, r14
    26ea:	b6 01       	movw	r22, r12
    26ec:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    26f0:	7b 01       	movw	r14, r22
    26f2:	2d b7       	in	r18, 0x3d	; 61
    26f4:	3e b7       	in	r19, 0x3e	; 62
    26f6:	29 50       	subi	r18, 0x09	; 9
    26f8:	30 40       	sbci	r19, 0x00	; 0
    26fa:	0f b6       	in	r0, 0x3f	; 63
    26fc:	f8 94       	cli
    26fe:	3e bf       	out	0x3e, r19	; 62
    2700:	0f be       	out	0x3f, r0	; 63
    2702:	2d bf       	out	0x3d, r18	; 61
    2704:	ed b7       	in	r30, 0x3d	; 61
    2706:	fe b7       	in	r31, 0x3e	; 62
    2708:	31 96       	adiw	r30, 0x01	; 1
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	33 20       	and	r3, r3
    270e:	09 f4       	brne	.+2      	; 0x2712 <move_arc_stnb+0x1e4>
    2710:	41 e0       	ldi	r20, 0x01	; 1
    2712:	71 82       	std	Z+1, r7	; 0x01
    2714:	60 82       	st	Z, r6
    2716:	13 83       	std	Z+3, r17	; 0x03
    2718:	02 83       	std	Z+2, r16	; 0x02
    271a:	f5 82       	std	Z+5, r15	; 0x05
    271c:	e4 82       	std	Z+4, r14	; 0x04
    271e:	26 82       	std	Z+6, r2	; 0x06
    2720:	10 86       	std	Z+8, r1	; 0x08
    2722:	17 82       	std	Z+7, r1	; 0x07
    2724:	81 e0       	ldi	r24, 0x01	; 1
    2726:	62 e0       	ldi	r22, 0x02	; 2
    2728:	93 01       	movw	r18, r6
    272a:	c2 2c       	mov	r12, r2
    272c:	aa 24       	eor	r10, r10
    272e:	bb 24       	eor	r11, r11
    2730:	83 2c       	mov	r8, r3
    2732:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <STEPPER_move>
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	ad b7       	in	r26, 0x3d	; 61
    273a:	be b7       	in	r27, 0x3e	; 62
    273c:	19 96       	adiw	r26, 0x09	; 9
    273e:	0f b6       	in	r0, 0x3f	; 63
    2740:	f8 94       	cli
    2742:	be bf       	out	0x3e, r27	; 62
    2744:	0f be       	out	0x3f, r0	; 63
    2746:	ad bf       	out	0x3d, r26	; 61
    2748:	89 c1       	rjmp	.+786    	; 0x2a5c <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    274a:	c3 01       	movw	r24, r6
    274c:	b2 01       	movw	r22, r4
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	40 e0       	ldi	r20, 0x00	; 0
    2754:	50 e0       	ldi	r21, 0x00	; 0
    2756:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <__gesf2>
    275a:	18 16       	cp	r1, r24
    275c:	0c f0       	brlt	.+2      	; 0x2760 <move_arc_stnb+0x232>
    275e:	b1 c0       	rjmp	.+354    	; 0x28c2 <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2760:	66 e6       	ldi	r22, 0x66	; 102
    2762:	76 e6       	ldi	r23, 0x66	; 102
    2764:	8a ea       	ldi	r24, 0xAA	; 170
    2766:	91 ec       	ldi	r25, 0xC1	; 193
    2768:	a3 01       	movw	r20, r6
    276a:	92 01       	movw	r18, r4
    276c:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	40 e8       	ldi	r20, 0x80	; 128
    2776:	5f e3       	ldi	r21, 0x3F	; 63
    2778:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    277c:	7b 01       	movw	r14, r22
    277e:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2780:	66 e6       	ldi	r22, 0x66	; 102
    2782:	76 e6       	ldi	r23, 0x66	; 102
    2784:	8a ea       	ldi	r24, 0xAA	; 170
    2786:	91 e4       	ldi	r25, 0x41	; 65
    2788:	a3 01       	movw	r20, r6
    278a:	92 01       	movw	r18, r4
    278c:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e8       	ldi	r20, 0x80	; 128
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    279c:	5b 01       	movw	r10, r22
    279e:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    27a0:	ed b7       	in	r30, 0x3d	; 61
    27a2:	fe b7       	in	r31, 0x3e	; 62
    27a4:	39 97       	sbiw	r30, 0x09	; 9
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	fe bf       	out	0x3e, r31	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	ed bf       	out	0x3d, r30	; 61
    27b0:	8d b6       	in	r8, 0x3d	; 61
    27b2:	9e b6       	in	r9, 0x3e	; 62
    27b4:	08 94       	sec
    27b6:	81 1c       	adc	r8, r1
    27b8:	91 1c       	adc	r9, r1
    27ba:	6d 81       	ldd	r22, Y+5	; 0x05
    27bc:	7e 81       	ldd	r23, Y+6	; 0x06
    27be:	8f 81       	ldd	r24, Y+7	; 0x07
    27c0:	98 85       	ldd	r25, Y+8	; 0x08
    27c2:	a8 01       	movw	r20, r16
    27c4:	97 01       	movw	r18, r14
    27c6:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    27ca:	2c ed       	ldi	r18, 0xDC	; 220
    27cc:	38 eb       	ldi	r19, 0xB8	; 184
    27ce:	48 e0       	ldi	r20, 0x08	; 8
    27d0:	5e e3       	ldi	r21, 0x3E	; 62
    27d2:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    27d6:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    27da:	69 8b       	std	Y+17, r22	; 0x11
    27dc:	7a 8b       	std	Y+18, r23	; 0x12
    27de:	8b 8b       	std	Y+19, r24	; 0x13
    27e0:	9c 8b       	std	Y+20, r25	; 0x14
    27e2:	69 85       	ldd	r22, Y+9	; 0x09
    27e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    27e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    27e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    27ea:	a8 01       	movw	r20, r16
    27ec:	97 01       	movw	r18, r14
    27ee:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    27f2:	2c ed       	ldi	r18, 0xDC	; 220
    27f4:	38 eb       	ldi	r19, 0xB8	; 184
    27f6:	48 e0       	ldi	r20, 0x08	; 8
    27f8:	5e e3       	ldi	r21, 0x3E	; 62
    27fa:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    27fe:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2802:	6d 8b       	std	Y+21, r22	; 0x15
    2804:	7e 8b       	std	Y+22, r23	; 0x16
    2806:	8f 8b       	std	Y+23, r24	; 0x17
    2808:	98 8f       	std	Y+24, r25	; 0x18
    280a:	6d 85       	ldd	r22, Y+13	; 0x0d
    280c:	7e 85       	ldd	r23, Y+14	; 0x0e
    280e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2810:	98 89       	ldd	r25, Y+16	; 0x10
    2812:	a8 01       	movw	r20, r16
    2814:	97 01       	movw	r18, r14
    2816:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    281a:	2c ed       	ldi	r18, 0xDC	; 220
    281c:	38 eb       	ldi	r19, 0xB8	; 184
    281e:	48 e0       	ldi	r20, 0x08	; 8
    2820:	5e e3       	ldi	r21, 0x3E	; 62
    2822:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2826:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    282a:	2b 01       	movw	r4, r22
    282c:	3c 01       	movw	r6, r24
    282e:	6d 81       	ldd	r22, Y+5	; 0x05
    2830:	7e 81       	ldd	r23, Y+6	; 0x06
    2832:	8f 81       	ldd	r24, Y+7	; 0x07
    2834:	98 85       	ldd	r25, Y+8	; 0x08
    2836:	a6 01       	movw	r20, r12
    2838:	95 01       	movw	r18, r10
    283a:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    283e:	2c ed       	ldi	r18, 0xDC	; 220
    2840:	38 eb       	ldi	r19, 0xB8	; 184
    2842:	48 e0       	ldi	r20, 0x08	; 8
    2844:	5e e3       	ldi	r21, 0x3E	; 62
    2846:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    284a:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    284e:	d4 01       	movw	r26, r8
    2850:	6d 93       	st	X+, r22
    2852:	7c 93       	st	X, r23
    2854:	69 85       	ldd	r22, Y+9	; 0x09
    2856:	7a 85       	ldd	r23, Y+10	; 0x0a
    2858:	8b 85       	ldd	r24, Y+11	; 0x0b
    285a:	9c 85       	ldd	r25, Y+12	; 0x0c
    285c:	a6 01       	movw	r20, r12
    285e:	95 01       	movw	r18, r10
    2860:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2864:	2c ed       	ldi	r18, 0xDC	; 220
    2866:	38 eb       	ldi	r19, 0xB8	; 184
    2868:	48 e0       	ldi	r20, 0x08	; 8
    286a:	5e e3       	ldi	r21, 0x3E	; 62
    286c:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2870:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2874:	f4 01       	movw	r30, r8
    2876:	73 83       	std	Z+3, r23	; 0x03
    2878:	62 83       	std	Z+2, r22	; 0x02
    287a:	6d 85       	ldd	r22, Y+13	; 0x0d
    287c:	7e 85       	ldd	r23, Y+14	; 0x0e
    287e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2880:	98 89       	ldd	r25, Y+16	; 0x10
    2882:	a6 01       	movw	r20, r12
    2884:	95 01       	movw	r18, r10
    2886:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    288a:	2c ed       	ldi	r18, 0xDC	; 220
    288c:	38 eb       	ldi	r19, 0xB8	; 184
    288e:	48 e0       	ldi	r20, 0x08	; 8
    2890:	5e e3       	ldi	r21, 0x3E	; 62
    2892:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2896:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    289a:	d4 01       	movw	r26, r8
    289c:	15 96       	adiw	r26, 0x05	; 5
    289e:	7c 93       	st	X, r23
    28a0:	6e 93       	st	-X, r22
    28a2:	14 97       	sbiw	r26, 0x04	; 4
    28a4:	16 96       	adiw	r26, 0x06	; 6
    28a6:	2c 92       	st	X, r2
    28a8:	16 97       	sbiw	r26, 0x06	; 6
    28aa:	18 96       	adiw	r26, 0x08	; 8
    28ac:	1c 92       	st	X, r1
    28ae:	1e 92       	st	-X, r1
    28b0:	17 97       	sbiw	r26, 0x07	; 7
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	62 e0       	ldi	r22, 0x02	; 2
    28b6:	43 2d       	mov	r20, r3
    28b8:	29 89       	ldd	r18, Y+17	; 0x11
    28ba:	3a 89       	ldd	r19, Y+18	; 0x12
    28bc:	0d 89       	ldd	r16, Y+21	; 0x15
    28be:	1e 89       	ldd	r17, Y+22	; 0x16
    28c0:	bd c0       	rjmp	.+378    	; 0x2a3c <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    28c2:	c3 01       	movw	r24, r6
    28c4:	b2 01       	movw	r22, r4
    28c6:	20 e0       	ldi	r18, 0x00	; 0
    28c8:	30 e0       	ldi	r19, 0x00	; 0
    28ca:	40 e0       	ldi	r20, 0x00	; 0
    28cc:	50 e0       	ldi	r21, 0x00	; 0
    28ce:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
    28d2:	87 fd       	sbrc	r24, 7
    28d4:	02 c0       	rjmp	.+4      	; 0x28da <move_arc_stnb+0x3ac>
    28d6:	80 e0       	ldi	r24, 0x00	; 0
    28d8:	c1 c0       	rjmp	.+386    	; 0x2a5c <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    28da:	66 e6       	ldi	r22, 0x66	; 102
    28dc:	76 e6       	ldi	r23, 0x66	; 102
    28de:	8a ea       	ldi	r24, 0xAA	; 170
    28e0:	91 e4       	ldi	r25, 0x41	; 65
    28e2:	a3 01       	movw	r20, r6
    28e4:	92 01       	movw	r18, r4
    28e6:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e8       	ldi	r20, 0x80	; 128
    28f0:	5f e3       	ldi	r21, 0x3F	; 63
    28f2:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    28f6:	7b 01       	movw	r14, r22
    28f8:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    28fa:	66 e6       	ldi	r22, 0x66	; 102
    28fc:	76 e6       	ldi	r23, 0x66	; 102
    28fe:	8a ea       	ldi	r24, 0xAA	; 170
    2900:	91 ec       	ldi	r25, 0xC1	; 193
    2902:	a3 01       	movw	r20, r6
    2904:	92 01       	movw	r18, r4
    2906:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e8       	ldi	r20, 0x80	; 128
    2910:	5f e3       	ldi	r21, 0x3F	; 63
    2912:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    2916:	5b 01       	movw	r10, r22
    2918:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    291a:	2d b7       	in	r18, 0x3d	; 61
    291c:	3e b7       	in	r19, 0x3e	; 62
    291e:	29 50       	subi	r18, 0x09	; 9
    2920:	30 40       	sbci	r19, 0x00	; 0
    2922:	0f b6       	in	r0, 0x3f	; 63
    2924:	f8 94       	cli
    2926:	3e bf       	out	0x3e, r19	; 62
    2928:	0f be       	out	0x3f, r0	; 63
    292a:	2d bf       	out	0x3d, r18	; 61
    292c:	8d b6       	in	r8, 0x3d	; 61
    292e:	9e b6       	in	r9, 0x3e	; 62
    2930:	08 94       	sec
    2932:	81 1c       	adc	r8, r1
    2934:	91 1c       	adc	r9, r1
    2936:	6d 81       	ldd	r22, Y+5	; 0x05
    2938:	7e 81       	ldd	r23, Y+6	; 0x06
    293a:	8f 81       	ldd	r24, Y+7	; 0x07
    293c:	98 85       	ldd	r25, Y+8	; 0x08
    293e:	a8 01       	movw	r20, r16
    2940:	97 01       	movw	r18, r14
    2942:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2946:	2c ed       	ldi	r18, 0xDC	; 220
    2948:	38 eb       	ldi	r19, 0xB8	; 184
    294a:	48 e0       	ldi	r20, 0x08	; 8
    294c:	5e e3       	ldi	r21, 0x3E	; 62
    294e:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2952:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2956:	69 8f       	std	Y+25, r22	; 0x19
    2958:	7a 8f       	std	Y+26, r23	; 0x1a
    295a:	8b 8f       	std	Y+27, r24	; 0x1b
    295c:	9c 8f       	std	Y+28, r25	; 0x1c
    295e:	69 85       	ldd	r22, Y+9	; 0x09
    2960:	7a 85       	ldd	r23, Y+10	; 0x0a
    2962:	8b 85       	ldd	r24, Y+11	; 0x0b
    2964:	9c 85       	ldd	r25, Y+12	; 0x0c
    2966:	a8 01       	movw	r20, r16
    2968:	97 01       	movw	r18, r14
    296a:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    296e:	2c ed       	ldi	r18, 0xDC	; 220
    2970:	38 eb       	ldi	r19, 0xB8	; 184
    2972:	48 e0       	ldi	r20, 0x08	; 8
    2974:	5e e3       	ldi	r21, 0x3E	; 62
    2976:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    297a:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    297e:	6d 8f       	std	Y+29, r22	; 0x1d
    2980:	7e 8f       	std	Y+30, r23	; 0x1e
    2982:	8f 8f       	std	Y+31, r24	; 0x1f
    2984:	98 a3       	std	Y+32, r25	; 0x20
    2986:	6d 85       	ldd	r22, Y+13	; 0x0d
    2988:	7e 85       	ldd	r23, Y+14	; 0x0e
    298a:	8f 85       	ldd	r24, Y+15	; 0x0f
    298c:	98 89       	ldd	r25, Y+16	; 0x10
    298e:	a8 01       	movw	r20, r16
    2990:	97 01       	movw	r18, r14
    2992:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2996:	2c ed       	ldi	r18, 0xDC	; 220
    2998:	38 eb       	ldi	r19, 0xB8	; 184
    299a:	48 e0       	ldi	r20, 0x08	; 8
    299c:	5e e3       	ldi	r21, 0x3E	; 62
    299e:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    29a2:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    29a6:	2b 01       	movw	r4, r22
    29a8:	3c 01       	movw	r6, r24
    29aa:	6d 81       	ldd	r22, Y+5	; 0x05
    29ac:	7e 81       	ldd	r23, Y+6	; 0x06
    29ae:	8f 81       	ldd	r24, Y+7	; 0x07
    29b0:	98 85       	ldd	r25, Y+8	; 0x08
    29b2:	a6 01       	movw	r20, r12
    29b4:	95 01       	movw	r18, r10
    29b6:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    29ba:	2c ed       	ldi	r18, 0xDC	; 220
    29bc:	38 eb       	ldi	r19, 0xB8	; 184
    29be:	48 e0       	ldi	r20, 0x08	; 8
    29c0:	5e e3       	ldi	r21, 0x3E	; 62
    29c2:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    29c6:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    29ca:	d4 01       	movw	r26, r8
    29cc:	6d 93       	st	X+, r22
    29ce:	7c 93       	st	X, r23
    29d0:	69 85       	ldd	r22, Y+9	; 0x09
    29d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    29d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    29d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    29d8:	a6 01       	movw	r20, r12
    29da:	95 01       	movw	r18, r10
    29dc:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    29e0:	2c ed       	ldi	r18, 0xDC	; 220
    29e2:	38 eb       	ldi	r19, 0xB8	; 184
    29e4:	48 e0       	ldi	r20, 0x08	; 8
    29e6:	5e e3       	ldi	r21, 0x3E	; 62
    29e8:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    29ec:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    29f0:	f4 01       	movw	r30, r8
    29f2:	73 83       	std	Z+3, r23	; 0x03
    29f4:	62 83       	std	Z+2, r22	; 0x02
    29f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    29f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    29fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    29fc:	98 89       	ldd	r25, Y+16	; 0x10
    29fe:	a6 01       	movw	r20, r12
    2a00:	95 01       	movw	r18, r10
    2a02:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2a06:	2c ed       	ldi	r18, 0xDC	; 220
    2a08:	38 eb       	ldi	r19, 0xB8	; 184
    2a0a:	48 e0       	ldi	r20, 0x08	; 8
    2a0c:	5e e3       	ldi	r21, 0x3E	; 62
    2a0e:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2a12:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2a16:	d4 01       	movw	r26, r8
    2a18:	15 96       	adiw	r26, 0x05	; 5
    2a1a:	7c 93       	st	X, r23
    2a1c:	6e 93       	st	-X, r22
    2a1e:	14 97       	sbiw	r26, 0x04	; 4
    2a20:	16 96       	adiw	r26, 0x06	; 6
    2a22:	2c 92       	st	X, r2
    2a24:	16 97       	sbiw	r26, 0x06	; 6
    2a26:	18 96       	adiw	r26, 0x08	; 8
    2a28:	1c 92       	st	X, r1
    2a2a:	1e 92       	st	-X, r1
    2a2c:	17 97       	sbiw	r26, 0x07	; 7
    2a2e:	81 e0       	ldi	r24, 0x01	; 1
    2a30:	62 e0       	ldi	r22, 0x02	; 2
    2a32:	43 2d       	mov	r20, r3
    2a34:	29 8d       	ldd	r18, Y+25	; 0x19
    2a36:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2a38:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2a3a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2a3c:	72 01       	movw	r14, r4
    2a3e:	c2 2c       	mov	r12, r2
    2a40:	aa 24       	eor	r10, r10
    2a42:	bb 24       	eor	r11, r11
    2a44:	83 2c       	mov	r8, r3
    2a46:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <STEPPER_move>
    2a4a:	81 e0       	ldi	r24, 0x01	; 1
    2a4c:	ed b7       	in	r30, 0x3d	; 61
    2a4e:	fe b7       	in	r31, 0x3e	; 62
    2a50:	39 96       	adiw	r30, 0x09	; 9
    2a52:	0f b6       	in	r0, 0x3f	; 63
    2a54:	f8 94       	cli
    2a56:	fe bf       	out	0x3e, r31	; 62
    2a58:	0f be       	out	0x3f, r0	; 63
    2a5a:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    2a5c:	a0 96       	adiw	r28, 0x20	; 32
    2a5e:	0f b6       	in	r0, 0x3f	; 63
    2a60:	f8 94       	cli
    2a62:	de bf       	out	0x3e, r29	; 62
    2a64:	0f be       	out	0x3f, r0	; 63
    2a66:	cd bf       	out	0x3d, r28	; 61
    2a68:	cf 91       	pop	r28
    2a6a:	df 91       	pop	r29
    2a6c:	1f 91       	pop	r17
    2a6e:	0f 91       	pop	r16
    2a70:	ff 90       	pop	r15
    2a72:	ef 90       	pop	r14
    2a74:	df 90       	pop	r13
    2a76:	cf 90       	pop	r12
    2a78:	bf 90       	pop	r11
    2a7a:	af 90       	pop	r10
    2a7c:	9f 90       	pop	r9
    2a7e:	8f 90       	pop	r8
    2a80:	7f 90       	pop	r7
    2a82:	6f 90       	pop	r6
    2a84:	5f 90       	pop	r5
    2a86:	4f 90       	pop	r4
    2a88:	3f 90       	pop	r3
    2a8a:	2f 90       	pop	r2
    2a8c:	08 95       	ret

00002a8e <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    2a8e:	2f 92       	push	r2
    2a90:	3f 92       	push	r3
    2a92:	4f 92       	push	r4
    2a94:	5f 92       	push	r5
    2a96:	6f 92       	push	r6
    2a98:	7f 92       	push	r7
    2a9a:	8f 92       	push	r8
    2a9c:	9f 92       	push	r9
    2a9e:	af 92       	push	r10
    2aa0:	bf 92       	push	r11
    2aa2:	cf 92       	push	r12
    2aa4:	df 92       	push	r13
    2aa6:	ef 92       	push	r14
    2aa8:	ff 92       	push	r15
    2aaa:	0f 93       	push	r16
    2aac:	1f 93       	push	r17
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	a0 97       	sbiw	r28, 0x20	; 32
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
    2ac2:	2b 01       	movw	r4, r22
    2ac4:	3c 01       	movw	r6, r24
    2ac6:	2d 83       	std	Y+5, r18	; 0x05
    2ac8:	3e 83       	std	Y+6, r19	; 0x06
    2aca:	4f 83       	std	Y+7, r20	; 0x07
    2acc:	58 87       	std	Y+8, r21	; 0x08
    2ace:	e9 86       	std	Y+9, r14	; 0x09
    2ad0:	fa 86       	std	Y+10, r15	; 0x0a
    2ad2:	0b 87       	std	Y+11, r16	; 0x0b
    2ad4:	1c 87       	std	Y+12, r17	; 0x0c
    2ad6:	ad 86       	std	Y+13, r10	; 0x0d
    2ad8:	be 86       	std	Y+14, r11	; 0x0e
    2ada:	cf 86       	std	Y+15, r12	; 0x0f
    2adc:	d8 8a       	std	Y+16, r13	; 0x10
    2ade:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    2ae0:	33 24       	eor	r3, r3
    2ae2:	ca 01       	movw	r24, r20
    2ae4:	b9 01       	movw	r22, r18
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	40 e0       	ldi	r20, 0x00	; 0
    2aec:	50 e0       	ldi	r21, 0x00	; 0
    2aee:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <__gesf2>
    2af2:	18 16       	cp	r1, r24
    2af4:	14 f4       	brge	.+4      	; 0x2afa <move_arc_stwt+0x6c>
    2af6:	33 24       	eor	r3, r3
    2af8:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    2afa:	6d 81       	ldd	r22, Y+5	; 0x05
    2afc:	7e 81       	ldd	r23, Y+6	; 0x06
    2afe:	8f 81       	ldd	r24, Y+7	; 0x07
    2b00:	98 85       	ldd	r25, Y+8	; 0x08
    2b02:	2c ed       	ldi	r18, 0xDC	; 220
    2b04:	38 eb       	ldi	r19, 0xB8	; 184
    2b06:	48 e0       	ldi	r20, 0x08	; 8
    2b08:	5e e3       	ldi	r21, 0x3E	; 62
    2b0a:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2b0e:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__fixsfsi>
    2b12:	9b 01       	movw	r18, r22
    2b14:	77 ff       	sbrs	r23, 7
    2b16:	03 c0       	rjmp	.+6      	; 0x2b1e <move_arc_stwt+0x90>
    2b18:	30 95       	com	r19
    2b1a:	21 95       	neg	r18
    2b1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b1e:	b9 01       	movw	r22, r18
    2b20:	88 27       	eor	r24, r24
    2b22:	77 fd       	sbrc	r23, 7
    2b24:	80 95       	com	r24
    2b26:	98 2f       	mov	r25, r24
    2b28:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__floatsisf>
    2b2c:	69 83       	std	Y+1, r22	; 0x01
    2b2e:	7a 83       	std	Y+2, r23	; 0x02
    2b30:	8b 83       	std	Y+3, r24	; 0x03
    2b32:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    2b34:	69 85       	ldd	r22, Y+9	; 0x09
    2b36:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b38:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b3c:	2c ed       	ldi	r18, 0xDC	; 220
    2b3e:	38 eb       	ldi	r19, 0xB8	; 184
    2b40:	48 e0       	ldi	r20, 0x08	; 8
    2b42:	5e e3       	ldi	r21, 0x3E	; 62
    2b44:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2b48:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__fixsfsi>
    2b4c:	9b 01       	movw	r18, r22
    2b4e:	77 ff       	sbrs	r23, 7
    2b50:	03 c0       	rjmp	.+6      	; 0x2b58 <move_arc_stwt+0xca>
    2b52:	30 95       	com	r19
    2b54:	21 95       	neg	r18
    2b56:	3f 4f       	sbci	r19, 0xFF	; 255
    2b58:	b9 01       	movw	r22, r18
    2b5a:	88 27       	eor	r24, r24
    2b5c:	77 fd       	sbrc	r23, 7
    2b5e:	80 95       	com	r24
    2b60:	98 2f       	mov	r25, r24
    2b62:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__floatsisf>
    2b66:	4b 01       	movw	r8, r22
    2b68:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    2b6a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b6c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b70:	98 89       	ldd	r25, Y+16	; 0x10
    2b72:	2c ed       	ldi	r18, 0xDC	; 220
    2b74:	38 eb       	ldi	r19, 0xB8	; 184
    2b76:	48 e0       	ldi	r20, 0x08	; 8
    2b78:	5e e3       	ldi	r21, 0x3E	; 62
    2b7a:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2b7e:	0e 94 a9 2e 	call	0x5d52	; 0x5d52 <__fixsfsi>
    2b82:	9b 01       	movw	r18, r22
    2b84:	77 ff       	sbrs	r23, 7
    2b86:	03 c0       	rjmp	.+6      	; 0x2b8e <move_arc_stwt+0x100>
    2b88:	30 95       	com	r19
    2b8a:	21 95       	neg	r18
    2b8c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b8e:	b9 01       	movw	r22, r18
    2b90:	88 27       	eor	r24, r24
    2b92:	77 fd       	sbrc	r23, 7
    2b94:	80 95       	com	r24
    2b96:	98 2f       	mov	r25, r24
    2b98:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__floatsisf>
    2b9c:	6b 01       	movw	r12, r22
    2b9e:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    2ba0:	c3 01       	movw	r24, r6
    2ba2:	b2 01       	movw	r22, r4
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	40 e0       	ldi	r20, 0x00	; 0
    2baa:	5f e4       	ldi	r21, 0x4F	; 79
    2bac:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
    2bb0:	88 23       	and	r24, r24
    2bb2:	a1 f5       	brne	.+104    	; 0x2c1c <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    2bb4:	69 81       	ldd	r22, Y+1	; 0x01
    2bb6:	7a 81       	ldd	r23, Y+2	; 0x02
    2bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    2bba:	9c 81       	ldd	r25, Y+4	; 0x04
    2bbc:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2bc0:	2b 01       	movw	r4, r22
    2bc2:	3c 01       	movw	r6, r24
    2bc4:	c5 01       	movw	r24, r10
    2bc6:	b4 01       	movw	r22, r8
    2bc8:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2bcc:	4b 01       	movw	r8, r22
    2bce:	5c 01       	movw	r10, r24
    2bd0:	c7 01       	movw	r24, r14
    2bd2:	b6 01       	movw	r22, r12
    2bd4:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2bd8:	6b 01       	movw	r12, r22
    2bda:	7c 01       	movw	r14, r24
    2bdc:	2d b7       	in	r18, 0x3d	; 61
    2bde:	3e b7       	in	r19, 0x3e	; 62
    2be0:	29 50       	subi	r18, 0x09	; 9
    2be2:	30 40       	sbci	r19, 0x00	; 0
    2be4:	0f b6       	in	r0, 0x3f	; 63
    2be6:	f8 94       	cli
    2be8:	3e bf       	out	0x3e, r19	; 62
    2bea:	0f be       	out	0x3f, r0	; 63
    2bec:	2d bf       	out	0x3d, r18	; 61
    2bee:	ed b7       	in	r30, 0x3d	; 61
    2bf0:	fe b7       	in	r31, 0x3e	; 62
    2bf2:	31 96       	adiw	r30, 0x01	; 1
    2bf4:	ad b7       	in	r26, 0x3d	; 61
    2bf6:	be b7       	in	r27, 0x3e	; 62
    2bf8:	12 96       	adiw	r26, 0x02	; 2
    2bfa:	5c 92       	st	X, r5
    2bfc:	4e 92       	st	-X, r4
    2bfe:	11 97       	sbiw	r26, 0x01	; 1
    2c00:	93 82       	std	Z+3, r9	; 0x03
    2c02:	82 82       	std	Z+2, r8	; 0x02
    2c04:	75 83       	std	Z+5, r23	; 0x05
    2c06:	64 83       	std	Z+4, r22	; 0x04
    2c08:	26 82       	std	Z+6, r2	; 0x06
    2c0a:	10 86       	std	Z+8, r1	; 0x08
    2c0c:	17 82       	std	Z+7, r1	; 0x07
    2c0e:	80 e0       	ldi	r24, 0x00	; 0
    2c10:	62 e0       	ldi	r22, 0x02	; 2
    2c12:	43 2d       	mov	r20, r3
    2c14:	92 01       	movw	r18, r4
    2c16:	84 01       	movw	r16, r8
    2c18:	76 01       	movw	r14, r12
    2c1a:	c1 c1       	rjmp	.+898    	; 0x2f9e <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    2c1c:	c3 01       	movw	r24, r6
    2c1e:	b2 01       	movw	r22, r4
    2c20:	20 e0       	ldi	r18, 0x00	; 0
    2c22:	30 e0       	ldi	r19, 0x00	; 0
    2c24:	40 e0       	ldi	r20, 0x00	; 0
    2c26:	50 e0       	ldi	r21, 0x00	; 0
    2c28:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
    2c2c:	88 23       	and	r24, r24
    2c2e:	e9 f5       	brne	.+122    	; 0x2caa <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    2c30:	69 81       	ldd	r22, Y+1	; 0x01
    2c32:	7a 81       	ldd	r23, Y+2	; 0x02
    2c34:	8b 81       	ldd	r24, Y+3	; 0x03
    2c36:	9c 81       	ldd	r25, Y+4	; 0x04
    2c38:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2c3c:	3b 01       	movw	r6, r22
    2c3e:	c5 01       	movw	r24, r10
    2c40:	b4 01       	movw	r22, r8
    2c42:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2c46:	8b 01       	movw	r16, r22
    2c48:	c7 01       	movw	r24, r14
    2c4a:	b6 01       	movw	r22, r12
    2c4c:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2c50:	7b 01       	movw	r14, r22
    2c52:	2d b7       	in	r18, 0x3d	; 61
    2c54:	3e b7       	in	r19, 0x3e	; 62
    2c56:	29 50       	subi	r18, 0x09	; 9
    2c58:	30 40       	sbci	r19, 0x00	; 0
    2c5a:	0f b6       	in	r0, 0x3f	; 63
    2c5c:	f8 94       	cli
    2c5e:	3e bf       	out	0x3e, r19	; 62
    2c60:	0f be       	out	0x3f, r0	; 63
    2c62:	2d bf       	out	0x3d, r18	; 61
    2c64:	ed b7       	in	r30, 0x3d	; 61
    2c66:	fe b7       	in	r31, 0x3e	; 62
    2c68:	31 96       	adiw	r30, 0x01	; 1
    2c6a:	40 e0       	ldi	r20, 0x00	; 0
    2c6c:	33 20       	and	r3, r3
    2c6e:	09 f4       	brne	.+2      	; 0x2c72 <move_arc_stwt+0x1e4>
    2c70:	41 e0       	ldi	r20, 0x01	; 1
    2c72:	71 82       	std	Z+1, r7	; 0x01
    2c74:	60 82       	st	Z, r6
    2c76:	13 83       	std	Z+3, r17	; 0x03
    2c78:	02 83       	std	Z+2, r16	; 0x02
    2c7a:	f5 82       	std	Z+5, r15	; 0x05
    2c7c:	e4 82       	std	Z+4, r14	; 0x04
    2c7e:	26 82       	std	Z+6, r2	; 0x06
    2c80:	10 86       	std	Z+8, r1	; 0x08
    2c82:	17 82       	std	Z+7, r1	; 0x07
    2c84:	80 e0       	ldi	r24, 0x00	; 0
    2c86:	62 e0       	ldi	r22, 0x02	; 2
    2c88:	93 01       	movw	r18, r6
    2c8a:	c2 2c       	mov	r12, r2
    2c8c:	aa 24       	eor	r10, r10
    2c8e:	bb 24       	eor	r11, r11
    2c90:	83 2c       	mov	r8, r3
    2c92:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <STEPPER_move>
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	ad b7       	in	r26, 0x3d	; 61
    2c9a:	be b7       	in	r27, 0x3e	; 62
    2c9c:	19 96       	adiw	r26, 0x09	; 9
    2c9e:	0f b6       	in	r0, 0x3f	; 63
    2ca0:	f8 94       	cli
    2ca2:	be bf       	out	0x3e, r27	; 62
    2ca4:	0f be       	out	0x3f, r0	; 63
    2ca6:	ad bf       	out	0x3d, r26	; 61
    2ca8:	89 c1       	rjmp	.+786    	; 0x2fbc <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    2caa:	c3 01       	movw	r24, r6
    2cac:	b2 01       	movw	r22, r4
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	40 e0       	ldi	r20, 0x00	; 0
    2cb4:	50 e0       	ldi	r21, 0x00	; 0
    2cb6:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <__gesf2>
    2cba:	18 16       	cp	r1, r24
    2cbc:	0c f0       	brlt	.+2      	; 0x2cc0 <move_arc_stwt+0x232>
    2cbe:	b1 c0       	rjmp	.+354    	; 0x2e22 <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2cc0:	66 e6       	ldi	r22, 0x66	; 102
    2cc2:	76 e6       	ldi	r23, 0x66	; 102
    2cc4:	8a ea       	ldi	r24, 0xAA	; 170
    2cc6:	91 ec       	ldi	r25, 0xC1	; 193
    2cc8:	a3 01       	movw	r20, r6
    2cca:	92 01       	movw	r18, r4
    2ccc:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	40 e8       	ldi	r20, 0x80	; 128
    2cd6:	5f e3       	ldi	r21, 0x3F	; 63
    2cd8:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    2cdc:	7b 01       	movw	r14, r22
    2cde:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2ce0:	66 e6       	ldi	r22, 0x66	; 102
    2ce2:	76 e6       	ldi	r23, 0x66	; 102
    2ce4:	8a ea       	ldi	r24, 0xAA	; 170
    2ce6:	91 e4       	ldi	r25, 0x41	; 65
    2ce8:	a3 01       	movw	r20, r6
    2cea:	92 01       	movw	r18, r4
    2cec:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2cf0:	20 e0       	ldi	r18, 0x00	; 0
    2cf2:	30 e0       	ldi	r19, 0x00	; 0
    2cf4:	40 e8       	ldi	r20, 0x80	; 128
    2cf6:	5f e3       	ldi	r21, 0x3F	; 63
    2cf8:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    2cfc:	5b 01       	movw	r10, r22
    2cfe:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2d00:	ed b7       	in	r30, 0x3d	; 61
    2d02:	fe b7       	in	r31, 0x3e	; 62
    2d04:	39 97       	sbiw	r30, 0x09	; 9
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	fe bf       	out	0x3e, r31	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	ed bf       	out	0x3d, r30	; 61
    2d10:	8d b6       	in	r8, 0x3d	; 61
    2d12:	9e b6       	in	r9, 0x3e	; 62
    2d14:	08 94       	sec
    2d16:	81 1c       	adc	r8, r1
    2d18:	91 1c       	adc	r9, r1
    2d1a:	6d 81       	ldd	r22, Y+5	; 0x05
    2d1c:	7e 81       	ldd	r23, Y+6	; 0x06
    2d1e:	8f 81       	ldd	r24, Y+7	; 0x07
    2d20:	98 85       	ldd	r25, Y+8	; 0x08
    2d22:	a8 01       	movw	r20, r16
    2d24:	97 01       	movw	r18, r14
    2d26:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2d2a:	2c ed       	ldi	r18, 0xDC	; 220
    2d2c:	38 eb       	ldi	r19, 0xB8	; 184
    2d2e:	48 e0       	ldi	r20, 0x08	; 8
    2d30:	5e e3       	ldi	r21, 0x3E	; 62
    2d32:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2d36:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2d3a:	69 8b       	std	Y+17, r22	; 0x11
    2d3c:	7a 8b       	std	Y+18, r23	; 0x12
    2d3e:	8b 8b       	std	Y+19, r24	; 0x13
    2d40:	9c 8b       	std	Y+20, r25	; 0x14
    2d42:	69 85       	ldd	r22, Y+9	; 0x09
    2d44:	7a 85       	ldd	r23, Y+10	; 0x0a
    2d46:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d48:	9c 85       	ldd	r25, Y+12	; 0x0c
    2d4a:	a8 01       	movw	r20, r16
    2d4c:	97 01       	movw	r18, r14
    2d4e:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2d52:	2c ed       	ldi	r18, 0xDC	; 220
    2d54:	38 eb       	ldi	r19, 0xB8	; 184
    2d56:	48 e0       	ldi	r20, 0x08	; 8
    2d58:	5e e3       	ldi	r21, 0x3E	; 62
    2d5a:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2d5e:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2d62:	6d 8b       	std	Y+21, r22	; 0x15
    2d64:	7e 8b       	std	Y+22, r23	; 0x16
    2d66:	8f 8b       	std	Y+23, r24	; 0x17
    2d68:	98 8f       	std	Y+24, r25	; 0x18
    2d6a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2d6c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d70:	98 89       	ldd	r25, Y+16	; 0x10
    2d72:	a8 01       	movw	r20, r16
    2d74:	97 01       	movw	r18, r14
    2d76:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2d7a:	2c ed       	ldi	r18, 0xDC	; 220
    2d7c:	38 eb       	ldi	r19, 0xB8	; 184
    2d7e:	48 e0       	ldi	r20, 0x08	; 8
    2d80:	5e e3       	ldi	r21, 0x3E	; 62
    2d82:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2d86:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2d8a:	2b 01       	movw	r4, r22
    2d8c:	3c 01       	movw	r6, r24
    2d8e:	6d 81       	ldd	r22, Y+5	; 0x05
    2d90:	7e 81       	ldd	r23, Y+6	; 0x06
    2d92:	8f 81       	ldd	r24, Y+7	; 0x07
    2d94:	98 85       	ldd	r25, Y+8	; 0x08
    2d96:	a6 01       	movw	r20, r12
    2d98:	95 01       	movw	r18, r10
    2d9a:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2d9e:	2c ed       	ldi	r18, 0xDC	; 220
    2da0:	38 eb       	ldi	r19, 0xB8	; 184
    2da2:	48 e0       	ldi	r20, 0x08	; 8
    2da4:	5e e3       	ldi	r21, 0x3E	; 62
    2da6:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2daa:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2dae:	d4 01       	movw	r26, r8
    2db0:	6d 93       	st	X+, r22
    2db2:	7c 93       	st	X, r23
    2db4:	69 85       	ldd	r22, Y+9	; 0x09
    2db6:	7a 85       	ldd	r23, Y+10	; 0x0a
    2db8:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dba:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dbc:	a6 01       	movw	r20, r12
    2dbe:	95 01       	movw	r18, r10
    2dc0:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2dc4:	2c ed       	ldi	r18, 0xDC	; 220
    2dc6:	38 eb       	ldi	r19, 0xB8	; 184
    2dc8:	48 e0       	ldi	r20, 0x08	; 8
    2dca:	5e e3       	ldi	r21, 0x3E	; 62
    2dcc:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2dd0:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2dd4:	f4 01       	movw	r30, r8
    2dd6:	73 83       	std	Z+3, r23	; 0x03
    2dd8:	62 83       	std	Z+2, r22	; 0x02
    2dda:	6d 85       	ldd	r22, Y+13	; 0x0d
    2ddc:	7e 85       	ldd	r23, Y+14	; 0x0e
    2dde:	8f 85       	ldd	r24, Y+15	; 0x0f
    2de0:	98 89       	ldd	r25, Y+16	; 0x10
    2de2:	a6 01       	movw	r20, r12
    2de4:	95 01       	movw	r18, r10
    2de6:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2dea:	2c ed       	ldi	r18, 0xDC	; 220
    2dec:	38 eb       	ldi	r19, 0xB8	; 184
    2dee:	48 e0       	ldi	r20, 0x08	; 8
    2df0:	5e e3       	ldi	r21, 0x3E	; 62
    2df2:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2df6:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2dfa:	d4 01       	movw	r26, r8
    2dfc:	15 96       	adiw	r26, 0x05	; 5
    2dfe:	7c 93       	st	X, r23
    2e00:	6e 93       	st	-X, r22
    2e02:	14 97       	sbiw	r26, 0x04	; 4
    2e04:	16 96       	adiw	r26, 0x06	; 6
    2e06:	2c 92       	st	X, r2
    2e08:	16 97       	sbiw	r26, 0x06	; 6
    2e0a:	18 96       	adiw	r26, 0x08	; 8
    2e0c:	1c 92       	st	X, r1
    2e0e:	1e 92       	st	-X, r1
    2e10:	17 97       	sbiw	r26, 0x07	; 7
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	62 e0       	ldi	r22, 0x02	; 2
    2e16:	43 2d       	mov	r20, r3
    2e18:	29 89       	ldd	r18, Y+17	; 0x11
    2e1a:	3a 89       	ldd	r19, Y+18	; 0x12
    2e1c:	0d 89       	ldd	r16, Y+21	; 0x15
    2e1e:	1e 89       	ldd	r17, Y+22	; 0x16
    2e20:	bd c0       	rjmp	.+378    	; 0x2f9c <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    2e22:	c3 01       	movw	r24, r6
    2e24:	b2 01       	movw	r22, r4
    2e26:	20 e0       	ldi	r18, 0x00	; 0
    2e28:	30 e0       	ldi	r19, 0x00	; 0
    2e2a:	40 e0       	ldi	r20, 0x00	; 0
    2e2c:	50 e0       	ldi	r21, 0x00	; 0
    2e2e:	0e 94 3d 2e 	call	0x5c7a	; 0x5c7a <__cmpsf2>
    2e32:	87 fd       	sbrc	r24, 7
    2e34:	02 c0       	rjmp	.+4      	; 0x2e3a <move_arc_stwt+0x3ac>
    2e36:	80 e0       	ldi	r24, 0x00	; 0
    2e38:	c1 c0       	rjmp	.+386    	; 0x2fbc <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2e3a:	66 e6       	ldi	r22, 0x66	; 102
    2e3c:	76 e6       	ldi	r23, 0x66	; 102
    2e3e:	8a ea       	ldi	r24, 0xAA	; 170
    2e40:	91 e4       	ldi	r25, 0x41	; 65
    2e42:	a3 01       	movw	r20, r6
    2e44:	92 01       	movw	r18, r4
    2e46:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e8       	ldi	r20, 0x80	; 128
    2e50:	5f e3       	ldi	r21, 0x3F	; 63
    2e52:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    2e56:	7b 01       	movw	r14, r22
    2e58:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2e5a:	66 e6       	ldi	r22, 0x66	; 102
    2e5c:	76 e6       	ldi	r23, 0x66	; 102
    2e5e:	8a ea       	ldi	r24, 0xAA	; 170
    2e60:	91 ec       	ldi	r25, 0xC1	; 193
    2e62:	a3 01       	movw	r20, r6
    2e64:	92 01       	movw	r18, r4
    2e66:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e8       	ldi	r20, 0x80	; 128
    2e70:	5f e3       	ldi	r21, 0x3F	; 63
    2e72:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    2e76:	5b 01       	movw	r10, r22
    2e78:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2e7a:	2d b7       	in	r18, 0x3d	; 61
    2e7c:	3e b7       	in	r19, 0x3e	; 62
    2e7e:	29 50       	subi	r18, 0x09	; 9
    2e80:	30 40       	sbci	r19, 0x00	; 0
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	3e bf       	out	0x3e, r19	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	2d bf       	out	0x3d, r18	; 61
    2e8c:	8d b6       	in	r8, 0x3d	; 61
    2e8e:	9e b6       	in	r9, 0x3e	; 62
    2e90:	08 94       	sec
    2e92:	81 1c       	adc	r8, r1
    2e94:	91 1c       	adc	r9, r1
    2e96:	6d 81       	ldd	r22, Y+5	; 0x05
    2e98:	7e 81       	ldd	r23, Y+6	; 0x06
    2e9a:	8f 81       	ldd	r24, Y+7	; 0x07
    2e9c:	98 85       	ldd	r25, Y+8	; 0x08
    2e9e:	a8 01       	movw	r20, r16
    2ea0:	97 01       	movw	r18, r14
    2ea2:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2ea6:	2c ed       	ldi	r18, 0xDC	; 220
    2ea8:	38 eb       	ldi	r19, 0xB8	; 184
    2eaa:	48 e0       	ldi	r20, 0x08	; 8
    2eac:	5e e3       	ldi	r21, 0x3E	; 62
    2eae:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2eb2:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2eb6:	69 8f       	std	Y+25, r22	; 0x19
    2eb8:	7a 8f       	std	Y+26, r23	; 0x1a
    2eba:	8b 8f       	std	Y+27, r24	; 0x1b
    2ebc:	9c 8f       	std	Y+28, r25	; 0x1c
    2ebe:	69 85       	ldd	r22, Y+9	; 0x09
    2ec0:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ec2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ec4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ec6:	a8 01       	movw	r20, r16
    2ec8:	97 01       	movw	r18, r14
    2eca:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2ece:	2c ed       	ldi	r18, 0xDC	; 220
    2ed0:	38 eb       	ldi	r19, 0xB8	; 184
    2ed2:	48 e0       	ldi	r20, 0x08	; 8
    2ed4:	5e e3       	ldi	r21, 0x3E	; 62
    2ed6:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2eda:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2ede:	6d 8f       	std	Y+29, r22	; 0x1d
    2ee0:	7e 8f       	std	Y+30, r23	; 0x1e
    2ee2:	8f 8f       	std	Y+31, r24	; 0x1f
    2ee4:	98 a3       	std	Y+32, r25	; 0x20
    2ee6:	6d 85       	ldd	r22, Y+13	; 0x0d
    2ee8:	7e 85       	ldd	r23, Y+14	; 0x0e
    2eea:	8f 85       	ldd	r24, Y+15	; 0x0f
    2eec:	98 89       	ldd	r25, Y+16	; 0x10
    2eee:	a8 01       	movw	r20, r16
    2ef0:	97 01       	movw	r18, r14
    2ef2:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2ef6:	2c ed       	ldi	r18, 0xDC	; 220
    2ef8:	38 eb       	ldi	r19, 0xB8	; 184
    2efa:	48 e0       	ldi	r20, 0x08	; 8
    2efc:	5e e3       	ldi	r21, 0x3E	; 62
    2efe:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2f02:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2f06:	2b 01       	movw	r4, r22
    2f08:	3c 01       	movw	r6, r24
    2f0a:	6d 81       	ldd	r22, Y+5	; 0x05
    2f0c:	7e 81       	ldd	r23, Y+6	; 0x06
    2f0e:	8f 81       	ldd	r24, Y+7	; 0x07
    2f10:	98 85       	ldd	r25, Y+8	; 0x08
    2f12:	a6 01       	movw	r20, r12
    2f14:	95 01       	movw	r18, r10
    2f16:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2f1a:	2c ed       	ldi	r18, 0xDC	; 220
    2f1c:	38 eb       	ldi	r19, 0xB8	; 184
    2f1e:	48 e0       	ldi	r20, 0x08	; 8
    2f20:	5e e3       	ldi	r21, 0x3E	; 62
    2f22:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2f26:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2f2a:	d4 01       	movw	r26, r8
    2f2c:	6d 93       	st	X+, r22
    2f2e:	7c 93       	st	X, r23
    2f30:	69 85       	ldd	r22, Y+9	; 0x09
    2f32:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f34:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f36:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f38:	a6 01       	movw	r20, r12
    2f3a:	95 01       	movw	r18, r10
    2f3c:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2f40:	2c ed       	ldi	r18, 0xDC	; 220
    2f42:	38 eb       	ldi	r19, 0xB8	; 184
    2f44:	48 e0       	ldi	r20, 0x08	; 8
    2f46:	5e e3       	ldi	r21, 0x3E	; 62
    2f48:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2f4c:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2f50:	f4 01       	movw	r30, r8
    2f52:	73 83       	std	Z+3, r23	; 0x03
    2f54:	62 83       	std	Z+2, r22	; 0x02
    2f56:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f58:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f5c:	98 89       	ldd	r25, Y+16	; 0x10
    2f5e:	a6 01       	movw	r20, r12
    2f60:	95 01       	movw	r18, r10
    2f62:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    2f66:	2c ed       	ldi	r18, 0xDC	; 220
    2f68:	38 eb       	ldi	r19, 0xB8	; 184
    2f6a:	48 e0       	ldi	r20, 0x08	; 8
    2f6c:	5e e3       	ldi	r21, 0x3E	; 62
    2f6e:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    2f72:	0e 94 ae 2e 	call	0x5d5c	; 0x5d5c <__fixunssfsi>
    2f76:	d4 01       	movw	r26, r8
    2f78:	15 96       	adiw	r26, 0x05	; 5
    2f7a:	7c 93       	st	X, r23
    2f7c:	6e 93       	st	-X, r22
    2f7e:	14 97       	sbiw	r26, 0x04	; 4
    2f80:	16 96       	adiw	r26, 0x06	; 6
    2f82:	2c 92       	st	X, r2
    2f84:	16 97       	sbiw	r26, 0x06	; 6
    2f86:	18 96       	adiw	r26, 0x08	; 8
    2f88:	1c 92       	st	X, r1
    2f8a:	1e 92       	st	-X, r1
    2f8c:	17 97       	sbiw	r26, 0x07	; 7
    2f8e:	80 e0       	ldi	r24, 0x00	; 0
    2f90:	62 e0       	ldi	r22, 0x02	; 2
    2f92:	43 2d       	mov	r20, r3
    2f94:	29 8d       	ldd	r18, Y+25	; 0x19
    2f96:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2f98:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2f9a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2f9c:	72 01       	movw	r14, r4
    2f9e:	c2 2c       	mov	r12, r2
    2fa0:	aa 24       	eor	r10, r10
    2fa2:	bb 24       	eor	r11, r11
    2fa4:	83 2c       	mov	r8, r3
    2fa6:	0e 94 02 1e 	call	0x3c04	; 0x3c04 <STEPPER_move>
    2faa:	81 e0       	ldi	r24, 0x01	; 1
    2fac:	ed b7       	in	r30, 0x3d	; 61
    2fae:	fe b7       	in	r31, 0x3e	; 62
    2fb0:	39 96       	adiw	r30, 0x09	; 9
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	fe bf       	out	0x3e, r31	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    2fbc:	a0 96       	adiw	r28, 0x20	; 32
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	cf 91       	pop	r28
    2fca:	df 91       	pop	r29
    2fcc:	1f 91       	pop	r17
    2fce:	0f 91       	pop	r16
    2fd0:	ff 90       	pop	r15
    2fd2:	ef 90       	pop	r14
    2fd4:	df 90       	pop	r13
    2fd6:	cf 90       	pop	r12
    2fd8:	bf 90       	pop	r11
    2fda:	af 90       	pop	r10
    2fdc:	9f 90       	pop	r9
    2fde:	8f 90       	pop	r8
    2fe0:	7f 90       	pop	r7
    2fe2:	6f 90       	pop	r6
    2fe4:	5f 90       	pop	r5
    2fe6:	4f 90       	pop	r4
    2fe8:	3f 90       	pop	r3
    2fea:	2f 90       	pop	r2
    2fec:	08 95       	ret

00002fee <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    2fee:	0e 94 2e 21 	call	0x425c	; 0x425c <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	21 70       	andi	r18, 0x01	; 1
    2ff6:	20 93 32 07 	sts	0x0732, r18
	leftContact =  (0b00000010 & sensors)>>1;
    2ffa:	90 e0       	ldi	r25, 0x00	; 0
    2ffc:	82 70       	andi	r24, 0x02	; 2
    2ffe:	90 70       	andi	r25, 0x00	; 0
    3000:	95 95       	asr	r25
    3002:	87 95       	ror	r24
    3004:	80 93 33 07 	sts	0x0733, r24
}
    3008:	08 95       	ret

0000300a <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    300a:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    300e:	60 93 1a 06 	sts	0x061A, r22
    3012:	70 93 1b 06 	sts	0x061B, r23
    3016:	80 93 1c 06 	sts	0x061C, r24
    301a:	90 93 1d 06 	sts	0x061D, r25
	leftLightVolt = getLeftLight();
    301e:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    3022:	60 93 c1 07 	sts	0x07C1, r22
    3026:	70 93 c2 07 	sts	0x07C2, r23
    302a:	80 93 c3 07 	sts	0x07C3, r24
    302e:	90 93 c4 07 	sts	0x07C4, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    3032:	08 95       	ret

00003034 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    3034:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    3038:	60 93 83 05 	sts	0x0583, r22
    303c:	70 93 84 05 	sts	0x0584, r23
    3040:	80 93 85 05 	sts	0x0585, r24
    3044:	90 93 86 05 	sts	0x0586, r25
	bkIR = getBackIR();
    3048:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    304c:	60 93 8d 05 	sts	0x058D, r22
    3050:	70 93 8e 05 	sts	0x058E, r23
    3054:	80 93 8f 05 	sts	0x058F, r24
    3058:	90 93 90 05 	sts	0x0590, r25
	ltIR = getLeftIR();
    305c:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    3060:	60 93 34 07 	sts	0x0734, r22
    3064:	70 93 35 07 	sts	0x0735, r23
    3068:	80 93 36 07 	sts	0x0736, r24
    306c:	90 93 37 07 	sts	0x0737, r25
	rtIR = getRightIR();
    3070:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    3074:	60 93 39 07 	sts	0x0739, r22
    3078:	70 93 3a 07 	sts	0x073A, r23
    307c:	80 93 3b 07 	sts	0x073B, r24
    3080:	90 93 3c 07 	sts	0x073C, r25
}
    3084:	08 95       	ret

00003086 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    3086:	cf 92       	push	r12
    3088:	df 92       	push	r13
    308a:	ef 92       	push	r14
    308c:	ff 92       	push	r15
    308e:	0f 93       	push	r16
    3090:	1f 93       	push	r17
    3092:	cf 93       	push	r28
    3094:	df 93       	push	r29
    3096:	16 2f       	mov	r17, r22
    3098:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    309a:	0f e1       	ldi	r16, 0x1F	; 31
    309c:	f0 2e       	mov	r15, r16
    309e:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    30a0:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    30a2:	0f 2d       	mov	r16, r15
    30a4:	06 95       	lsr	r16
    30a6:	06 95       	lsr	r16
    30a8:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    30aa:	c0 2f       	mov	r28, r16
    30ac:	d0 e0       	ldi	r29, 0x00	; 0
    30ae:	c1 2e       	mov	r12, r17
    30b0:	dd 24       	eor	r13, r13
    30b2:	ce 01       	movw	r24, r28
    30b4:	b6 01       	movw	r22, r12
    30b6:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    30ba:	80 2f       	mov	r24, r16
    30bc:	61 2f       	mov	r22, r17
    30be:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_set_next_PGC>
    30c2:	fe 01       	movw	r30, r28
    30c4:	b5 e0       	ldi	r27, 0x05	; 5
    30c6:	ee 0f       	add	r30, r30
    30c8:	ff 1f       	adc	r31, r31
    30ca:	ba 95       	dec	r27
    30cc:	e1 f7       	brne	.-8      	; 0x30c6 <LCD_set_pixel+0x40>
    30ce:	2f 2d       	mov	r18, r15
    30d0:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    30d2:	ee 20       	and	r14, r14
    30d4:	89 f0       	breq	.+34     	; 0x30f8 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    30d6:	ec 0d       	add	r30, r12
    30d8:	fd 1d       	adc	r31, r13
    30da:	e4 55       	subi	r30, 0x54	; 84
    30dc:	f9 4f       	sbci	r31, 0xF9	; 249
    30de:	27 70       	andi	r18, 0x07	; 7
    30e0:	30 70       	andi	r19, 0x00	; 0
    30e2:	81 e0       	ldi	r24, 0x01	; 1
    30e4:	90 e0       	ldi	r25, 0x00	; 0
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <LCD_set_pixel+0x66>
    30e8:	88 0f       	add	r24, r24
    30ea:	99 1f       	adc	r25, r25
    30ec:	2a 95       	dec	r18
    30ee:	e2 f7       	brpl	.-8      	; 0x30e8 <LCD_set_pixel+0x62>
    30f0:	20 81       	ld	r18, Z
    30f2:	28 2b       	or	r18, r24
    30f4:	20 83       	st	Z, r18
    30f6:	11 c0       	rjmp	.+34     	; 0x311a <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    30f8:	ec 0d       	add	r30, r12
    30fa:	fd 1d       	adc	r31, r13
    30fc:	e4 55       	subi	r30, 0x54	; 84
    30fe:	f9 4f       	sbci	r31, 0xF9	; 249
    3100:	27 70       	andi	r18, 0x07	; 7
    3102:	30 70       	andi	r19, 0x00	; 0
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	90 e0       	ldi	r25, 0x00	; 0
    3108:	02 c0       	rjmp	.+4      	; 0x310e <LCD_set_pixel+0x88>
    310a:	88 0f       	add	r24, r24
    310c:	99 1f       	adc	r25, r25
    310e:	2a 95       	dec	r18
    3110:	e2 f7       	brpl	.-8      	; 0x310a <LCD_set_pixel+0x84>
    3112:	80 95       	com	r24
    3114:	20 81       	ld	r18, Z
    3116:	82 23       	and	r24, r18
    3118:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    311a:	a5 e0       	ldi	r26, 0x05	; 5
    311c:	cc 0f       	add	r28, r28
    311e:	dd 1f       	adc	r29, r29
    3120:	aa 95       	dec	r26
    3122:	e1 f7       	brne	.-8      	; 0x311c <LCD_set_pixel+0x96>
    3124:	cc 0d       	add	r28, r12
    3126:	dd 1d       	adc	r29, r13
    3128:	c4 55       	subi	r28, 0x54	; 84
    312a:	d9 4f       	sbci	r29, 0xF9	; 249
    312c:	88 81       	ld	r24, Y
    312e:	61 e0       	ldi	r22, 0x01	; 1
    3130:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
}
    3134:	df 91       	pop	r29
    3136:	cf 91       	pop	r28
    3138:	1f 91       	pop	r17
    313a:	0f 91       	pop	r16
    313c:	ff 90       	pop	r15
    313e:	ef 90       	pop	r14
    3140:	df 90       	pop	r13
    3142:	cf 90       	pop	r12
    3144:	08 95       	ret

00003146 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent){
    3146:	9f 92       	push	r9
    3148:	af 92       	push	r10
    314a:	bf 92       	push	r11
    314c:	cf 92       	push	r12
    314e:	df 92       	push	r13
    3150:	ef 92       	push	r14
    3152:	ff 92       	push	r15
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	a8 2e       	mov	r10, r24
    315a:	d6 2e       	mov	r13, r22
    315c:	e4 2e       	mov	r14, r20
    315e:	b2 2e       	mov	r11, r18
    3160:	90 2e       	mov	r9, r16

	r = r*LCD_CELL_OFFSET;
    3162:	dd 0c       	add	r13, r13
    3164:	dd 0c       	add	r13, r13
    3166:	dd 0c       	add	r13, r13
	c = c*LCD_CELL_OFFSET;
    3168:	ff 24       	eor	r15, r15
    316a:	53 e0       	ldi	r21, 0x03	; 3
    316c:	ee 0c       	add	r14, r14
    316e:	ff 1c       	adc	r15, r15
    3170:	5a 95       	dec	r21
    3172:	e1 f7       	brne	.-8      	; 0x316c <printCell+0x26>
    3174:	1e 2d       	mov	r17, r14
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    3176:	0f e1       	ldi	r16, 0x1F	; 31
    3178:	0d 19       	sub	r16, r13
    317a:	80 2f       	mov	r24, r16
    317c:	6e 2d       	mov	r22, r14
    317e:	41 e0       	ldi	r20, 0x01	; 1
    3180:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    3184:	48 e1       	ldi	r20, 0x18	; 24
    3186:	c4 2e       	mov	r12, r20
    3188:	cd 18       	sub	r12, r13
    318a:	8c 2d       	mov	r24, r12
    318c:	6e 2d       	mov	r22, r14
    318e:	41 e0       	ldi	r20, 0x01	; 1
    3190:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    3194:	37 e0       	ldi	r19, 0x07	; 7
    3196:	f3 2e       	mov	r15, r19
    3198:	f1 0e       	add	r15, r17
    319a:	80 2f       	mov	r24, r16
    319c:	6f 2d       	mov	r22, r15
    319e:	41 e0       	ldi	r20, 0x01	; 1
    31a0:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    31a4:	8c 2d       	mov	r24, r12
    31a6:	6f 2d       	mov	r22, r15
    31a8:	41 e0       	ldi	r20, 0x01	; 1
    31aa:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
	
	if(cell&0b1000){
    31ae:	ea 2c       	mov	r14, r10
    31b0:	a3 fe       	sbrs	r10, 3
    31b2:	24 c0       	rjmp	.+72     	; 0x31fc <printCell+0xb6>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    31b4:	61 2f       	mov	r22, r17
    31b6:	6f 5f       	subi	r22, 0xFF	; 255
    31b8:	80 2f       	mov	r24, r16
    31ba:	41 e0       	ldi	r20, 0x01	; 1
    31bc:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    31c0:	61 2f       	mov	r22, r17
    31c2:	6e 5f       	subi	r22, 0xFE	; 254
    31c4:	80 2f       	mov	r24, r16
    31c6:	41 e0       	ldi	r20, 0x01	; 1
    31c8:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    31cc:	61 2f       	mov	r22, r17
    31ce:	6d 5f       	subi	r22, 0xFD	; 253
    31d0:	80 2f       	mov	r24, r16
    31d2:	41 e0       	ldi	r20, 0x01	; 1
    31d4:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    31d8:	61 2f       	mov	r22, r17
    31da:	6c 5f       	subi	r22, 0xFC	; 252
    31dc:	80 2f       	mov	r24, r16
    31de:	41 e0       	ldi	r20, 0x01	; 1
    31e0:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    31e4:	61 2f       	mov	r22, r17
    31e6:	6b 5f       	subi	r22, 0xFB	; 251
    31e8:	80 2f       	mov	r24, r16
    31ea:	41 e0       	ldi	r20, 0x01	; 1
    31ec:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    31f0:	61 2f       	mov	r22, r17
    31f2:	6a 5f       	subi	r22, 0xFA	; 250
    31f4:	80 2f       	mov	r24, r16
    31f6:	41 e0       	ldi	r20, 0x01	; 1
    31f8:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
	}
	if(cell&0b0100){
    31fc:	e2 fe       	sbrs	r14, 2
    31fe:	25 c0       	rjmp	.+74     	; 0x324a <printCell+0x104>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    3200:	8d 2d       	mov	r24, r13
    3202:	80 95       	com	r24
    3204:	81 5e       	subi	r24, 0xE1	; 225
    3206:	6f 2d       	mov	r22, r15
    3208:	41 e0       	ldi	r20, 0x01	; 1
    320a:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    320e:	8d e1       	ldi	r24, 0x1D	; 29
    3210:	8d 19       	sub	r24, r13
    3212:	6f 2d       	mov	r22, r15
    3214:	41 e0       	ldi	r20, 0x01	; 1
    3216:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    321a:	8c e1       	ldi	r24, 0x1C	; 28
    321c:	8d 19       	sub	r24, r13
    321e:	6f 2d       	mov	r22, r15
    3220:	41 e0       	ldi	r20, 0x01	; 1
    3222:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    3226:	8b e1       	ldi	r24, 0x1B	; 27
    3228:	8d 19       	sub	r24, r13
    322a:	6f 2d       	mov	r22, r15
    322c:	41 e0       	ldi	r20, 0x01	; 1
    322e:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    3232:	8a e1       	ldi	r24, 0x1A	; 26
    3234:	8d 19       	sub	r24, r13
    3236:	6f 2d       	mov	r22, r15
    3238:	41 e0       	ldi	r20, 0x01	; 1
    323a:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    323e:	89 e1       	ldi	r24, 0x19	; 25
    3240:	8d 19       	sub	r24, r13
    3242:	6f 2d       	mov	r22, r15
    3244:	41 e0       	ldi	r20, 0x01	; 1
    3246:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
	}
	if(cell&0b0010){
    324a:	e1 fe       	sbrs	r14, 1
    324c:	24 c0       	rjmp	.+72     	; 0x3296 <printCell+0x150>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    324e:	61 2f       	mov	r22, r17
    3250:	6f 5f       	subi	r22, 0xFF	; 255
    3252:	8c 2d       	mov	r24, r12
    3254:	41 e0       	ldi	r20, 0x01	; 1
    3256:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    325a:	61 2f       	mov	r22, r17
    325c:	6e 5f       	subi	r22, 0xFE	; 254
    325e:	8c 2d       	mov	r24, r12
    3260:	41 e0       	ldi	r20, 0x01	; 1
    3262:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    3266:	61 2f       	mov	r22, r17
    3268:	6d 5f       	subi	r22, 0xFD	; 253
    326a:	8c 2d       	mov	r24, r12
    326c:	41 e0       	ldi	r20, 0x01	; 1
    326e:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    3272:	61 2f       	mov	r22, r17
    3274:	6c 5f       	subi	r22, 0xFC	; 252
    3276:	8c 2d       	mov	r24, r12
    3278:	41 e0       	ldi	r20, 0x01	; 1
    327a:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    327e:	61 2f       	mov	r22, r17
    3280:	6b 5f       	subi	r22, 0xFB	; 251
    3282:	8c 2d       	mov	r24, r12
    3284:	41 e0       	ldi	r20, 0x01	; 1
    3286:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    328a:	61 2f       	mov	r22, r17
    328c:	6a 5f       	subi	r22, 0xFA	; 250
    328e:	8c 2d       	mov	r24, r12
    3290:	41 e0       	ldi	r20, 0x01	; 1
    3292:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
	}
	if(cell&0b0001){
    3296:	e0 fe       	sbrs	r14, 0
    3298:	25 c0       	rjmp	.+74     	; 0x32e4 <printCell+0x19e>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    329a:	8d 2d       	mov	r24, r13
    329c:	80 95       	com	r24
    329e:	81 5e       	subi	r24, 0xE1	; 225
    32a0:	61 2f       	mov	r22, r17
    32a2:	41 e0       	ldi	r20, 0x01	; 1
    32a4:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    32a8:	8d e1       	ldi	r24, 0x1D	; 29
    32aa:	8d 19       	sub	r24, r13
    32ac:	61 2f       	mov	r22, r17
    32ae:	41 e0       	ldi	r20, 0x01	; 1
    32b0:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    32b4:	8c e1       	ldi	r24, 0x1C	; 28
    32b6:	8d 19       	sub	r24, r13
    32b8:	61 2f       	mov	r22, r17
    32ba:	41 e0       	ldi	r20, 0x01	; 1
    32bc:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    32c0:	8b e1       	ldi	r24, 0x1B	; 27
    32c2:	8d 19       	sub	r24, r13
    32c4:	61 2f       	mov	r22, r17
    32c6:	41 e0       	ldi	r20, 0x01	; 1
    32c8:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    32cc:	8a e1       	ldi	r24, 0x1A	; 26
    32ce:	8d 19       	sub	r24, r13
    32d0:	61 2f       	mov	r22, r17
    32d2:	41 e0       	ldi	r20, 0x01	; 1
    32d4:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    32d8:	89 e1       	ldi	r24, 0x19	; 25
    32da:	8d 19       	sub	r24, r13
    32dc:	61 2f       	mov	r22, r17
    32de:	41 e0       	ldi	r20, 0x01	; 1
    32e0:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
	}	
	if(isrobot){
    32e4:	bb 20       	and	r11, r11
    32e6:	e1 f1       	breq	.+120    	; 0x3360 <printCell+0x21a>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    32e8:	2c e1       	ldi	r18, 0x1C	; 28
    32ea:	f2 2e       	mov	r15, r18
    32ec:	fd 18       	sub	r15, r13
    32ee:	93 e0       	ldi	r25, 0x03	; 3
    32f0:	c9 2e       	mov	r12, r25
    32f2:	c1 0e       	add	r12, r17
    32f4:	8f 2d       	mov	r24, r15
    32f6:	6c 2d       	mov	r22, r12
    32f8:	4b 2d       	mov	r20, r11
    32fa:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    32fe:	8b e1       	ldi	r24, 0x1B	; 27
    3300:	e8 2e       	mov	r14, r24
    3302:	ed 18       	sub	r14, r13
    3304:	8e 2d       	mov	r24, r14
    3306:	6c 2d       	mov	r22, r12
    3308:	4b 2d       	mov	r20, r11
    330a:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    330e:	01 2f       	mov	r16, r17
    3310:	0c 5f       	subi	r16, 0xFC	; 252
    3312:	8f 2d       	mov	r24, r15
    3314:	60 2f       	mov	r22, r16
    3316:	4b 2d       	mov	r20, r11
    3318:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    331c:	8e 2d       	mov	r24, r14
    331e:	60 2f       	mov	r22, r16
    3320:	4b 2d       	mov	r20, r11
    3322:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
		
		switch(orent){
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	98 16       	cp	r9, r24
    332a:	69 f0       	breq	.+26     	; 0x3346 <printCell+0x200>
    332c:	98 16       	cp	r9, r24
    332e:	38 f0       	brcs	.+14     	; 0x333e <printCell+0x1f8>
    3330:	82 e0       	ldi	r24, 0x02	; 2
    3332:	98 16       	cp	r9, r24
    3334:	59 f0       	breq	.+22     	; 0x334c <printCell+0x206>
    3336:	83 e0       	ldi	r24, 0x03	; 3
    3338:	98 16       	cp	r9, r24
    333a:	91 f4       	brne	.+36     	; 0x3360 <printCell+0x21a>
    333c:	0b c0       	rjmp	.+22     	; 0x3354 <printCell+0x20e>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    333e:	8d e1       	ldi	r24, 0x1D	; 29
    3340:	8d 19       	sub	r24, r13
    3342:	6c 2d       	mov	r22, r12
    3344:	0a c0       	rjmp	.+20     	; 0x335a <printCell+0x214>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    3346:	1b 5f       	subi	r17, 0xFB	; 251
    3348:	8f 2d       	mov	r24, r15
    334a:	06 c0       	rjmp	.+12     	; 0x3358 <printCell+0x212>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    334c:	8a e1       	ldi	r24, 0x1A	; 26
    334e:	8d 19       	sub	r24, r13
    3350:	60 2f       	mov	r22, r16
    3352:	03 c0       	rjmp	.+6      	; 0x335a <printCell+0x214>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    3354:	1e 5f       	subi	r17, 0xFE	; 254
    3356:	8e 2d       	mov	r24, r14
    3358:	61 2f       	mov	r22, r17
    335a:	4b 2d       	mov	r20, r11
    335c:	0e 94 43 18 	call	0x3086	; 0x3086 <LCD_set_pixel>
				break;
			default:
				break;
		}
	}
}
    3360:	1f 91       	pop	r17
    3362:	0f 91       	pop	r16
    3364:	ff 90       	pop	r15
    3366:	ef 90       	pop	r14
    3368:	df 90       	pop	r13
    336a:	cf 90       	pop	r12
    336c:	bf 90       	pop	r11
    336e:	af 90       	pop	r10
    3370:	9f 90       	pop	r9
    3372:	08 95       	ret

00003374 <printMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(void)
{
    3374:	bf 92       	push	r11
    3376:	cf 92       	push	r12
    3378:	df 92       	push	r13
    337a:	ef 92       	push	r14
    337c:	ff 92       	push	r15
    337e:	0f 93       	push	r16
    3380:	1f 93       	push	r17
    3382:	cf 93       	push	r28
    3384:	df 93       	push	r29
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    3386:	80 91 30 07 	lds	r24, 0x0730
    338a:	b8 2e       	mov	r11, r24
    338c:	b6 94       	lsr	r11
    338e:	b6 94       	lsr	r11
	unsigned char curCol = currentCellWorld & 0b0011;
    3390:	73 e0       	ldi	r23, 0x03	; 3
    3392:	c7 2e       	mov	r12, r23
    3394:	c8 22       	and	r12, r24
    3396:	ee 24       	eor	r14, r14
    3398:	ff 24       	eor	r15, r15
    339a:	1d c0       	rjmp	.+58     	; 0x33d6 <printMap+0x62>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    339c:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    339e:	db 14       	cp	r13, r11
    33a0:	19 f0       	breq	.+6      	; 0x33a8 <printMap+0x34>
    33a2:	20 e0       	ldi	r18, 0x00	; 0
    33a4:	30 e0       	ldi	r19, 0x00	; 0
    33a6:	06 c0       	rjmp	.+12     	; 0x33b4 <printMap+0x40>
    33a8:	20 e0       	ldi	r18, 0x00	; 0
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	1c 15       	cp	r17, r12
    33ae:	11 f4       	brne	.+4      	; 0x33b4 <printMap+0x40>
    33b0:	21 e0       	ldi	r18, 0x01	; 1
    33b2:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation);
    33b4:	6d 2d       	mov	r22, r13
    33b6:	41 2f       	mov	r20, r17
    33b8:	00 91 2f 06 	lds	r16, 0x062F
    33bc:	0e 94 a3 18 	call	0x3146	; 0x3146 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    33c0:	1f 5f       	subi	r17, 0xFF	; 255
    33c2:	21 96       	adiw	r28, 0x01	; 1
    33c4:	14 30       	cpi	r17, 0x04	; 4
    33c6:	51 f7       	brne	.-44     	; 0x339c <printMap+0x28>
    33c8:	08 94       	sec
    33ca:	e1 1c       	adc	r14, r1
    33cc:	f1 1c       	adc	r15, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    33ce:	84 e0       	ldi	r24, 0x04	; 4
    33d0:	e8 16       	cp	r14, r24
    33d2:	f1 04       	cpc	r15, r1
    33d4:	51 f0       	breq	.+20     	; 0x33ea <printMap+0x76>
    33d6:	de 2c       	mov	r13, r14
    33d8:	e7 01       	movw	r28, r14
    33da:	cc 0f       	add	r28, r28
    33dc:	dd 1f       	adc	r29, r29
    33de:	cc 0f       	add	r28, r28
    33e0:	dd 1f       	adc	r29, r29
    33e2:	c2 5e       	subi	r28, 0xE2	; 226
    33e4:	d9 4f       	sbci	r29, 0xF9	; 249
    33e6:	10 e0       	ldi	r17, 0x00	; 0
    33e8:	d9 cf       	rjmp	.-78     	; 0x339c <printMap+0x28>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation);
		}	
	}
}
    33ea:	df 91       	pop	r29
    33ec:	cf 91       	pop	r28
    33ee:	1f 91       	pop	r17
    33f0:	0f 91       	pop	r16
    33f2:	ff 90       	pop	r15
    33f4:	ef 90       	pop	r14
    33f6:	df 90       	pop	r13
    33f8:	cf 90       	pop	r12
    33fa:	bf 90       	pop	r11
    33fc:	08 95       	ret

000033fe <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
    33fe:	1f 93       	push	r17
    3400:	18 2f       	mov	r17, r24
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	
	// AT START: odometry is REALLY SMALL & odometryTrigger is at approx 343
	// Suggest breaking apart the IF case?
	if((odometry > odometryTrigger))
    3402:	60 91 c6 07 	lds	r22, 0x07C6
    3406:	70 91 c7 07 	lds	r23, 0x07C7
    340a:	80 91 c8 07 	lds	r24, 0x07C8
    340e:	90 91 c9 07 	lds	r25, 0x07C9
    3412:	20 91 06 05 	lds	r18, 0x0506
    3416:	30 91 07 05 	lds	r19, 0x0507
    341a:	40 91 08 05 	lds	r20, 0x0508
    341e:	50 91 09 05 	lds	r21, 0x0509
    3422:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <__addsf3>
    3426:	20 e0       	ldi	r18, 0x00	; 0
    3428:	30 e0       	ldi	r19, 0x00	; 0
    342a:	40 e0       	ldi	r20, 0x00	; 0
    342c:	5f e3       	ldi	r21, 0x3F	; 63
    342e:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    3432:	2c ed       	ldi	r18, 0xDC	; 220
    3434:	38 eb       	ldi	r19, 0xB8	; 184
    3436:	48 e0       	ldi	r20, 0x08	; 8
    3438:	5e e3       	ldi	r21, 0x3E	; 62
    343a:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    343e:	20 91 0a 06 	lds	r18, 0x060A
    3442:	30 91 0b 06 	lds	r19, 0x060B
    3446:	40 91 0c 06 	lds	r20, 0x060C
    344a:	50 91 0d 06 	lds	r21, 0x060D
    344e:	0e 94 8c 2f 	call	0x5f18	; 0x5f18 <__gesf2>
    3452:	18 16       	cp	r1, r24
    3454:	bc f4       	brge	.+46     	; 0x3484 <checkOdometry+0x86>
	{
		odometryFlag = 1;
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	80 93 38 07 	sts	0x0738, r24
		odometryStepL = 0;
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	90 e0       	ldi	r25, 0x00	; 0
    3460:	a0 e0       	ldi	r26, 0x00	; 0
    3462:	b0 e0       	ldi	r27, 0x00	; 0
    3464:	80 93 c6 07 	sts	0x07C6, r24
    3468:	90 93 c7 07 	sts	0x07C7, r25
    346c:	a0 93 c8 07 	sts	0x07C8, r26
    3470:	b0 93 c9 07 	sts	0x07C9, r27
		odometryStepR = 0;
    3474:	80 93 06 05 	sts	0x0506, r24
    3478:	90 93 07 05 	sts	0x0507, r25
    347c:	a0 93 08 05 	sts	0x0508, r26
    3480:	b0 93 09 05 	sts	0x0509, r27
	}
	if (reset){
    3484:	11 23       	and	r17, r17
    3486:	d9 f0       	breq	.+54     	; 0x34be <checkOdometry+0xc0>
		STEPPER_set_steps(STEPPER_BOTH,0);
    3488:	82 e0       	ldi	r24, 0x02	; 2
    348a:	60 e0       	ldi	r22, 0x00	; 0
    348c:	70 e0       	ldi	r23, 0x00	; 0
    348e:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <STEPPER_set_steps>
		odometryFlag = 0;
    3492:	10 92 38 07 	sts	0x0738, r1
		odometryStepL = 0;
    3496:	80 e0       	ldi	r24, 0x00	; 0
    3498:	90 e0       	ldi	r25, 0x00	; 0
    349a:	a0 e0       	ldi	r26, 0x00	; 0
    349c:	b0 e0       	ldi	r27, 0x00	; 0
    349e:	80 93 c6 07 	sts	0x07C6, r24
    34a2:	90 93 c7 07 	sts	0x07C7, r25
    34a6:	a0 93 c8 07 	sts	0x07C8, r26
    34aa:	b0 93 c9 07 	sts	0x07C9, r27
		odometryStepR = 0;
    34ae:	80 93 06 05 	sts	0x0506, r24
    34b2:	90 93 07 05 	sts	0x0507, r25
    34b6:	a0 93 08 05 	sts	0x0508, r26
    34ba:	b0 93 09 05 	sts	0x0509, r27
	
	// // Else the flag RESETS to ZERO?!
	// else{
		// odometryFlag = 0;
	// }
}
    34be:	1f 91       	pop	r17
    34c0:	08 95       	ret

000034c2 <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    34c2:	0e 94 ad 21 	call	0x435a	; 0x435a <ATTINY_open>
    34c6:	90 93 04 05 	sts	0x0504, r25
    34ca:	80 93 03 05 	sts	0x0503, r24
	LEopstat = LED_open(); //open the LED module
    34ce:	0e 94 27 1c 	call	0x384e	; 0x384e <LED_open>
    34d2:	90 93 02 05 	sts	0x0502, r25
    34d6:	80 93 01 05 	sts	0x0501, r24
	LCopstat = LCD_open(); //open the LCD module
    34da:	0e 94 3e 1b 	call	0x367c	; 0x367c <LCD_open>
    34de:	90 93 00 05 	sts	0x0500, r25
    34e2:	80 93 ff 04 	sts	0x04FF, r24
	STEPPER_open(); // Open STEPPER module for use
    34e6:	0e 94 a9 1e 	call	0x3d52	; 0x3d52 <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    34ea:	82 e0       	ldi	r24, 0x02	; 2
    34ec:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <SPKR_open>
	
	LED_open();
    34f0:	0e 94 27 1c 	call	0x384e	; 0x384e <LED_open>
	I2C_open();
    34f4:	0e 94 07 23 	call	0x460e	; 0x460e <I2C_open>
	ADC_open();//open the ADC module
    34f8:	0e 94 ab 1a 	call	0x3556	; 0x3556 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    34fc:	81 e0       	ldi	r24, 0x01	; 1
    34fe:	0e 94 0d 1b 	call	0x361a	; 0x361a <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    3502:	0e 94 1a 18 	call	0x3034	; 0x3034 <checkIR>
	prefilter(1);
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	0e 94 94 0e 	call	0x1d28	; 0x1d28 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    350c:	8f ee       	ldi	r24, 0xEF	; 239
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	a5 e8       	ldi	r26, 0x85	; 133
    3512:	b1 e4       	ldi	r27, 0x41	; 65
    3514:	80 93 0a 06 	sts	0x060A, r24
    3518:	90 93 0b 06 	sts	0x060B, r25
    351c:	a0 93 0c 06 	sts	0x060C, r26
    3520:	b0 93 0d 06 	sts	0x060D, r27
    3524:	20 e0       	ldi	r18, 0x00	; 0
    3526:	30 e0       	ldi	r19, 0x00	; 0
    3528:	0a c0       	rjmp	.+20     	; 0x353e <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    352a:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    352c:	01 96       	adiw	r24, 0x01	; 1
    352e:	80 32       	cpi	r24, 0x20	; 32
    3530:	91 05       	cpc	r25, r1
    3532:	d9 f7       	brne	.-10     	; 0x352a <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    3534:	2f 5f       	subi	r18, 0xFF	; 255
    3536:	3f 4f       	sbci	r19, 0xFF	; 255
    3538:	24 30       	cpi	r18, 0x04	; 4
    353a:	31 05       	cpc	r19, r1
    353c:	59 f0       	breq	.+22     	; 0x3554 <initializeRobot+0x92>
    353e:	f9 01       	movw	r30, r18
    3540:	a5 e0       	ldi	r26, 0x05	; 5
    3542:	ee 0f       	add	r30, r30
    3544:	ff 1f       	adc	r31, r31
    3546:	aa 95       	dec	r26
    3548:	e1 f7       	brne	.-8      	; 0x3542 <initializeRobot+0x80>
    354a:	e4 55       	subi	r30, 0x54	; 84
    354c:	f9 4f       	sbci	r31, 0xF9	; 249
    354e:	80 e0       	ldi	r24, 0x00	; 0
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	eb cf       	rjmp	.-42     	; 0x352a <initializeRobot+0x68>
    3554:	08 95       	ret

00003556 <ADC_open>:
    3556:	8f e0       	ldi	r24, 0x0F	; 15
    3558:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    355c:	88 23       	and	r24, r24
    355e:	31 f4       	brne	.+12     	; 0x356c <ADC_open+0x16>
    3560:	0e 94 2e 23 	call	0x465c	; 0x465c <__ADC_init>
    3564:	8f e0       	ldi	r24, 0x0F	; 15
    3566:	61 e0       	ldi	r22, 0x01	; 1
    3568:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    356c:	8f e0       	ldi	r24, 0x0F	; 15
    356e:	91 e0       	ldi	r25, 0x01	; 1
    3570:	08 95       	ret

00003572 <ADC_sample>:
    3572:	8f e0       	ldi	r24, 0x0F	; 15
    3574:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    3578:	81 30       	cpi	r24, 0x01	; 1
    357a:	19 f0       	breq	.+6      	; 0x3582 <ADC_sample+0x10>
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	13 c0       	rjmp	.+38     	; 0x35a8 <ADC_sample+0x36>
    3582:	80 91 7a 00 	lds	r24, 0x007A
    3586:	80 64       	ori	r24, 0x40	; 64
    3588:	80 93 7a 00 	sts	0x007A, r24
    358c:	80 91 7a 00 	lds	r24, 0x007A
    3590:	86 fd       	sbrc	r24, 6
    3592:	fc cf       	rjmp	.-8      	; 0x358c <ADC_sample+0x1a>
    3594:	30 91 78 00 	lds	r19, 0x0078
    3598:	20 91 79 00 	lds	r18, 0x0079
    359c:	92 2f       	mov	r25, r18
    359e:	80 e0       	ldi	r24, 0x00	; 0
    35a0:	23 2f       	mov	r18, r19
    35a2:	30 e0       	ldi	r19, 0x00	; 0
    35a4:	28 2b       	or	r18, r24
    35a6:	39 2b       	or	r19, r25
    35a8:	c9 01       	movw	r24, r18
    35aa:	08 95       	ret

000035ac <ADC_set_channel>:
    35ac:	58 2f       	mov	r21, r24
    35ae:	80 91 29 04 	lds	r24, 0x0429
    35b2:	88 30       	cpi	r24, 0x08	; 8
    35b4:	d8 f4       	brcc	.+54     	; 0x35ec <ADC_set_channel+0x40>
    35b6:	40 91 7e 00 	lds	r20, 0x007E
    35ba:	21 e0       	ldi	r18, 0x01	; 1
    35bc:	30 e0       	ldi	r19, 0x00	; 0
    35be:	b9 01       	movw	r22, r18
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <ADC_set_channel+0x1a>
    35c2:	66 0f       	add	r22, r22
    35c4:	77 1f       	adc	r23, r23
    35c6:	8a 95       	dec	r24
    35c8:	e2 f7       	brpl	.-8      	; 0x35c2 <ADC_set_channel+0x16>
    35ca:	cb 01       	movw	r24, r22
    35cc:	80 95       	com	r24
    35ce:	84 23       	and	r24, r20
    35d0:	80 93 7e 00 	sts	0x007E, r24
    35d4:	80 91 7e 00 	lds	r24, 0x007E
    35d8:	05 2e       	mov	r0, r21
    35da:	02 c0       	rjmp	.+4      	; 0x35e0 <ADC_set_channel+0x34>
    35dc:	22 0f       	add	r18, r18
    35de:	33 1f       	adc	r19, r19
    35e0:	0a 94       	dec	r0
    35e2:	e2 f7       	brpl	.-8      	; 0x35dc <ADC_set_channel+0x30>
    35e4:	82 2b       	or	r24, r18
    35e6:	80 93 7e 00 	sts	0x007E, r24
    35ea:	0d c0       	rjmp	.+26     	; 0x3606 <ADC_set_channel+0x5a>
    35ec:	20 91 7e 00 	lds	r18, 0x007E
    35f0:	81 e0       	ldi	r24, 0x01	; 1
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	05 2e       	mov	r0, r21
    35f6:	02 c0       	rjmp	.+4      	; 0x35fc <ADC_set_channel+0x50>
    35f8:	88 0f       	add	r24, r24
    35fa:	99 1f       	adc	r25, r25
    35fc:	0a 94       	dec	r0
    35fe:	e2 f7       	brpl	.-8      	; 0x35f8 <ADC_set_channel+0x4c>
    3600:	28 2b       	or	r18, r24
    3602:	20 93 7e 00 	sts	0x007E, r18
    3606:	50 93 29 04 	sts	0x0429, r21
    360a:	80 91 7c 00 	lds	r24, 0x007C
    360e:	5f 71       	andi	r21, 0x1F	; 31
    3610:	80 7e       	andi	r24, 0xE0	; 224
    3612:	85 2b       	or	r24, r21
    3614:	80 93 7c 00 	sts	0x007C, r24
    3618:	08 95       	ret

0000361a <ADC_set_VREF>:
    361a:	ec e7       	ldi	r30, 0x7C	; 124
    361c:	f0 e0       	ldi	r31, 0x00	; 0
    361e:	90 81       	ld	r25, Z
    3620:	82 95       	swap	r24
    3622:	88 0f       	add	r24, r24
    3624:	88 0f       	add	r24, r24
    3626:	80 7c       	andi	r24, 0xC0	; 192
    3628:	9f 73       	andi	r25, 0x3F	; 63
    362a:	98 2b       	or	r25, r24
    362c:	90 83       	st	Z, r25
    362e:	08 95       	ret

00003630 <main>:
    3630:	0e 94 47 23 	call	0x468e	; 0x468e <CBOT_ISR_init>
    3634:	0e 94 39 23 	call	0x4672	; 0x4672 <CBOT_init>
    3638:	0e 94 b7 0c 	call	0x196e	; 0x196e <CBOT_main>
    363c:	80 e0       	ldi	r24, 0x00	; 0
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	08 95       	ret

00003642 <LCD_clear>:
    3642:	0f 93       	push	r16
    3644:	1f 93       	push	r17
    3646:	80 e4       	ldi	r24, 0x40	; 64
    3648:	60 e0       	ldi	r22, 0x00	; 0
    364a:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    364e:	00 e0       	ldi	r16, 0x00	; 0
    3650:	80 2f       	mov	r24, r16
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_set_PGC_addr>
    3658:	10 e0       	ldi	r17, 0x00	; 0
    365a:	80 e0       	ldi	r24, 0x00	; 0
    365c:	61 e0       	ldi	r22, 0x01	; 1
    365e:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    3662:	1f 5f       	subi	r17, 0xFF	; 255
    3664:	10 38       	cpi	r17, 0x80	; 128
    3666:	c9 f7       	brne	.-14     	; 0x365a <LCD_clear+0x18>
    3668:	0f 5f       	subi	r16, 0xFF	; 255
    366a:	04 30       	cpi	r16, 0x04	; 4
    366c:	89 f7       	brne	.-30     	; 0x3650 <LCD_clear+0xe>
    366e:	83 e0       	ldi	r24, 0x03	; 3
    3670:	60 e0       	ldi	r22, 0x00	; 0
    3672:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_set_next_PGC>
    3676:	1f 91       	pop	r17
    3678:	0f 91       	pop	r16
    367a:	08 95       	ret

0000367c <LCD_open>:
    367c:	0f 93       	push	r16
    367e:	1f 93       	push	r17
    3680:	82 e0       	ldi	r24, 0x02	; 2
    3682:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    3686:	88 23       	and	r24, r24
    3688:	11 f4       	brne	.+4      	; 0x368e <LCD_open+0x12>
    368a:	82 e0       	ldi	r24, 0x02	; 2
    368c:	06 c0       	rjmp	.+12     	; 0x369a <LCD_open+0x1e>
    368e:	81 e0       	ldi	r24, 0x01	; 1
    3690:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    3694:	88 23       	and	r24, r24
    3696:	19 f4       	brne	.+6      	; 0x369e <LCD_open+0x22>
    3698:	81 e0       	ldi	r24, 0x01	; 1
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	6d c0       	rjmp	.+218    	; 0x3778 <LCD_open+0xfc>
    369e:	0e 94 af 25 	call	0x4b5e	; 0x4b5e <__LCD_init>
    36a2:	85 e0       	ldi	r24, 0x05	; 5
    36a4:	61 e0       	ldi	r22, 0x01	; 1
    36a6:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    36aa:	8e ea       	ldi	r24, 0xAE	; 174
    36ac:	60 e0       	ldi	r22, 0x00	; 0
    36ae:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    36b2:	82 ea       	ldi	r24, 0xA2	; 162
    36b4:	60 e0       	ldi	r22, 0x00	; 0
    36b6:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    36ba:	80 ea       	ldi	r24, 0xA0	; 160
    36bc:	60 e0       	ldi	r22, 0x00	; 0
    36be:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    36c2:	00 e5       	ldi	r16, 0x50	; 80
    36c4:	13 ec       	ldi	r17, 0xC3	; 195
    36c6:	c8 01       	movw	r24, r16
    36c8:	01 97       	sbiw	r24, 0x01	; 1
    36ca:	f1 f7       	brne	.-4      	; 0x36c8 <LCD_open+0x4c>
    36cc:	80 ec       	ldi	r24, 0xC0	; 192
    36ce:	60 e0       	ldi	r22, 0x00	; 0
    36d0:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    36d4:	8f e2       	ldi	r24, 0x2F	; 47
    36d6:	60 e0       	ldi	r22, 0x00	; 0
    36d8:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    36dc:	81 e8       	ldi	r24, 0x81	; 129
    36de:	60 e0       	ldi	r22, 0x00	; 0
    36e0:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    36e4:	86 e1       	ldi	r24, 0x16	; 22
    36e6:	60 e0       	ldi	r22, 0x00	; 0
    36e8:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    36ec:	82 e2       	ldi	r24, 0x22	; 34
    36ee:	60 e0       	ldi	r22, 0x00	; 0
    36f0:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    36f4:	c8 01       	movw	r24, r16
    36f6:	01 97       	sbiw	r24, 0x01	; 1
    36f8:	f1 f7       	brne	.-4      	; 0x36f6 <LCD_open+0x7a>
    36fa:	8f ea       	ldi	r24, 0xAF	; 175
    36fc:	60 e0       	ldi	r22, 0x00	; 0
    36fe:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    3702:	86 ea       	ldi	r24, 0xA6	; 166
    3704:	60 e0       	ldi	r22, 0x00	; 0
    3706:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    370a:	85 ea       	ldi	r24, 0xA5	; 165
    370c:	60 e0       	ldi	r22, 0x00	; 0
    370e:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    3712:	80 e0       	ldi	r24, 0x00	; 0
    3714:	90 e0       	ldi	r25, 0x00	; 0
    3716:	28 e8       	ldi	r18, 0x88	; 136
    3718:	33 e1       	ldi	r19, 0x13	; 19
    371a:	f9 01       	movw	r30, r18
    371c:	31 97       	sbiw	r30, 0x01	; 1
    371e:	f1 f7       	brne	.-4      	; 0x371c <LCD_open+0xa0>
    3720:	01 96       	adiw	r24, 0x01	; 1
    3722:	43 e0       	ldi	r20, 0x03	; 3
    3724:	88 3e       	cpi	r24, 0xE8	; 232
    3726:	94 07       	cpc	r25, r20
    3728:	c1 f7       	brne	.-16     	; 0x371a <LCD_open+0x9e>
    372a:	83 eb       	ldi	r24, 0xB3	; 179
    372c:	60 e0       	ldi	r22, 0x00	; 0
    372e:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    3732:	80 e4       	ldi	r24, 0x40	; 64
    3734:	60 e0       	ldi	r22, 0x00	; 0
    3736:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    373a:	83 e0       	ldi	r24, 0x03	; 3
    373c:	60 e0       	ldi	r22, 0x00	; 0
    373e:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_set_PGC_addr>
    3742:	83 e0       	ldi	r24, 0x03	; 3
    3744:	60 e0       	ldi	r22, 0x00	; 0
    3746:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <LCD_set_next_PGC>
    374a:	10 92 18 08 	sts	0x0818, r1
    374e:	10 92 1a 08 	sts	0x081A, r1
    3752:	10 92 19 08 	sts	0x0819, r1
    3756:	88 e3       	ldi	r24, 0x38	; 56
    3758:	94 e0       	ldi	r25, 0x04	; 4
    375a:	90 93 49 08 	sts	0x0849, r25
    375e:	80 93 48 08 	sts	0x0848, r24
    3762:	88 e1       	ldi	r24, 0x18	; 24
    3764:	0e 94 bf 1b 	call	0x377e	; 0x377e <LCD_set_backlight>
    3768:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
    376c:	84 ea       	ldi	r24, 0xA4	; 164
    376e:	60 e0       	ldi	r22, 0x00	; 0
    3770:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    3774:	85 e0       	ldi	r24, 0x05	; 5
    3776:	91 e0       	ldi	r25, 0x01	; 1
    3778:	1f 91       	pop	r17
    377a:	0f 91       	pop	r16
    377c:	08 95       	ret

0000377e <LCD_set_backlight>:
    377e:	1f 93       	push	r17
    3780:	18 2f       	mov	r17, r24
    3782:	85 e0       	ldi	r24, 0x05	; 5
    3784:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    3788:	81 30       	cpi	r24, 0x01	; 1
    378a:	c1 f4       	brne	.+48     	; 0x37bc <LCD_set_backlight+0x3e>
    378c:	87 e0       	ldi	r24, 0x07	; 7
    378e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <SPI_set_slave_addr>
    3792:	82 e0       	ldi	r24, 0x02	; 2
    3794:	6a e0       	ldi	r22, 0x0A	; 10
    3796:	0e 94 8d 1c 	call	0x391a	; 0x391a <SPI_transmit>
    379a:	82 e0       	ldi	r24, 0x02	; 2
    379c:	61 eb       	ldi	r22, 0xB1	; 177
    379e:	0e 94 8d 1c 	call	0x391a	; 0x391a <SPI_transmit>
    37a2:	61 2f       	mov	r22, r17
    37a4:	11 32       	cpi	r17, 0x21	; 33
    37a6:	08 f0       	brcs	.+2      	; 0x37aa <LCD_set_backlight+0x2c>
    37a8:	60 e2       	ldi	r22, 0x20	; 32
    37aa:	82 e0       	ldi	r24, 0x02	; 2
    37ac:	0e 94 8d 1c 	call	0x391a	; 0x391a <SPI_transmit>
    37b0:	89 ee       	ldi	r24, 0xE9	; 233
    37b2:	8a 95       	dec	r24
    37b4:	f1 f7       	brne	.-4      	; 0x37b2 <LCD_set_backlight+0x34>
    37b6:	87 e0       	ldi	r24, 0x07	; 7
    37b8:	0e 94 3c 1c 	call	0x3878	; 0x3878 <SPI_set_slave_addr>
    37bc:	1f 91       	pop	r17
    37be:	08 95       	ret

000037c0 <LCD_set_next_PGC>:
    37c0:	83 70       	andi	r24, 0x03	; 3
    37c2:	6f 77       	andi	r22, 0x7F	; 127
    37c4:	60 93 16 08 	sts	0x0816, r22
    37c8:	80 93 17 08 	sts	0x0817, r24
    37cc:	08 95       	ret

000037ce <LCD_set_PGC_addr>:
    37ce:	0f 93       	push	r16
    37d0:	1f 93       	push	r17
    37d2:	06 2f       	mov	r16, r22
    37d4:	16 2f       	mov	r17, r22
    37d6:	1f 77       	andi	r17, 0x7F	; 127
    37d8:	83 70       	andi	r24, 0x03	; 3
    37da:	80 6b       	ori	r24, 0xB0	; 176
    37dc:	60 e0       	ldi	r22, 0x00	; 0
    37de:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    37e2:	12 95       	swap	r17
    37e4:	1f 70       	andi	r17, 0x0F	; 15
    37e6:	81 2f       	mov	r24, r17
    37e8:	80 61       	ori	r24, 0x10	; 16
    37ea:	60 e0       	ldi	r22, 0x00	; 0
    37ec:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    37f0:	80 2f       	mov	r24, r16
    37f2:	8f 70       	andi	r24, 0x0F	; 15
    37f4:	60 e0       	ldi	r22, 0x00	; 0
    37f6:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    37fa:	1f 91       	pop	r17
    37fc:	0f 91       	pop	r16
    37fe:	08 95       	ret

00003800 <LCD_write>:
    3800:	0f 93       	push	r16
    3802:	1f 93       	push	r17
    3804:	08 2f       	mov	r16, r24
    3806:	16 2f       	mov	r17, r22
    3808:	85 e0       	ldi	r24, 0x05	; 5
    380a:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    380e:	81 30       	cpi	r24, 0x01	; 1
    3810:	79 f4       	brne	.+30     	; 0x3830 <LCD_write+0x30>
    3812:	11 23       	and	r17, r17
    3814:	19 f0       	breq	.+6      	; 0x381c <LCD_write+0x1c>
    3816:	11 30       	cpi	r17, 0x01	; 1
    3818:	21 f4       	brne	.+8      	; 0x3822 <LCD_write+0x22>
    381a:	02 c0       	rjmp	.+4      	; 0x3820 <LCD_write+0x20>
    381c:	2b 98       	cbi	0x05, 3	; 5
    381e:	01 c0       	rjmp	.+2      	; 0x3822 <LCD_write+0x22>
    3820:	2b 9a       	sbi	0x05, 3	; 5
    3822:	86 e0       	ldi	r24, 0x06	; 6
    3824:	8a 95       	dec	r24
    3826:	f1 f7       	brne	.-4      	; 0x3824 <LCD_write+0x24>
    3828:	80 e0       	ldi	r24, 0x00	; 0
    382a:	60 2f       	mov	r22, r16
    382c:	0e 94 8d 1c 	call	0x391a	; 0x391a <SPI_transmit>
    3830:	1f 91       	pop	r17
    3832:	0f 91       	pop	r16
    3834:	08 95       	ret

00003836 <LED_clr_pattern>:
    3836:	1f 93       	push	r17
    3838:	18 2f       	mov	r17, r24
    383a:	86 e0       	ldi	r24, 0x06	; 6
    383c:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    3840:	81 30       	cpi	r24, 0x01	; 1
    3842:	19 f4       	brne	.+6      	; 0x384a <LED_clr_pattern+0x14>
    3844:	81 2f       	mov	r24, r17
    3846:	0e 94 5e 26 	call	0x4cbc	; 0x4cbc <__LED_clr_pattern>
    384a:	1f 91       	pop	r17
    384c:	08 95       	ret

0000384e <LED_open>:
    384e:	0e 94 63 26 	call	0x4cc6	; 0x4cc6 <__LED_init>
    3852:	86 e0       	ldi	r24, 0x06	; 6
    3854:	61 e0       	ldi	r22, 0x01	; 1
    3856:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    385a:	86 e0       	ldi	r24, 0x06	; 6
    385c:	91 e0       	ldi	r25, 0x01	; 1
    385e:	08 95       	ret

00003860 <LED_set_pattern>:
    3860:	1f 93       	push	r17
    3862:	18 2f       	mov	r17, r24
    3864:	86 e0       	ldi	r24, 0x06	; 6
    3866:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    386a:	81 30       	cpi	r24, 0x01	; 1
    386c:	19 f4       	brne	.+6      	; 0x3874 <LED_set_pattern+0x14>
    386e:	81 2f       	mov	r24, r17
    3870:	0e 94 66 26 	call	0x4ccc	; 0x4ccc <__LED_set_pattern>
    3874:	1f 91       	pop	r17
    3876:	08 95       	ret

00003878 <SPI_set_slave_addr>:
    3878:	1f 93       	push	r17
    387a:	18 2f       	mov	r17, r24
    387c:	82 e0       	ldi	r24, 0x02	; 2
    387e:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    3882:	81 30       	cpi	r24, 0x01	; 1
    3884:	09 f0       	breq	.+2      	; 0x3888 <SPI_set_slave_addr+0x10>
    3886:	47 c0       	rjmp	.+142    	; 0x3916 <SPI_set_slave_addr+0x9e>
    3888:	91 2f       	mov	r25, r17
    388a:	97 70       	andi	r25, 0x07	; 7
    388c:	80 91 1b 08 	lds	r24, 0x081B
    3890:	98 17       	cp	r25, r24
    3892:	09 f4       	brne	.+2      	; 0x3896 <SPI_set_slave_addr+0x1e>
    3894:	40 c0       	rjmp	.+128    	; 0x3916 <SPI_set_slave_addr+0x9e>
    3896:	90 93 1b 08 	sts	0x081B, r25
    389a:	85 b1       	in	r24, 0x05	; 5
    389c:	88 7f       	andi	r24, 0xF8	; 248
    389e:	89 2b       	or	r24, r25
    38a0:	85 b9       	out	0x05, r24	; 5
    38a2:	93 30       	cpi	r25, 0x03	; 3
    38a4:	11 f1       	breq	.+68     	; 0x38ea <SPI_set_slave_addr+0x72>
    38a6:	94 30       	cpi	r25, 0x04	; 4
    38a8:	28 f4       	brcc	.+10     	; 0x38b4 <SPI_set_slave_addr+0x3c>
    38aa:	91 30       	cpi	r25, 0x01	; 1
    38ac:	51 f0       	breq	.+20     	; 0x38c2 <SPI_set_slave_addr+0x4a>
    38ae:	92 30       	cpi	r25, 0x02	; 2
    38b0:	90 f4       	brcc	.+36     	; 0x38d6 <SPI_set_slave_addr+0x5e>
    38b2:	0c c0       	rjmp	.+24     	; 0x38cc <SPI_set_slave_addr+0x54>
    38b4:	95 30       	cpi	r25, 0x05	; 5
    38b6:	19 f1       	breq	.+70     	; 0x38fe <SPI_set_slave_addr+0x86>
    38b8:	95 30       	cpi	r25, 0x05	; 5
    38ba:	e0 f0       	brcs	.+56     	; 0x38f4 <SPI_set_slave_addr+0x7c>
    38bc:	96 30       	cpi	r25, 0x06	; 6
    38be:	21 f5       	brne	.+72     	; 0x3908 <SPI_set_slave_addr+0x90>
    38c0:	0f c0       	rjmp	.+30     	; 0x38e0 <SPI_set_slave_addr+0x68>
    38c2:	e0 91 da 04 	lds	r30, 0x04DA
    38c6:	f0 91 db 04 	lds	r31, 0x04DB
    38ca:	22 c0       	rjmp	.+68     	; 0x3910 <SPI_set_slave_addr+0x98>
    38cc:	e0 91 d8 04 	lds	r30, 0x04D8
    38d0:	f0 91 d9 04 	lds	r31, 0x04D9
    38d4:	1d c0       	rjmp	.+58     	; 0x3910 <SPI_set_slave_addr+0x98>
    38d6:	e0 91 dc 04 	lds	r30, 0x04DC
    38da:	f0 91 dd 04 	lds	r31, 0x04DD
    38de:	18 c0       	rjmp	.+48     	; 0x3910 <SPI_set_slave_addr+0x98>
    38e0:	e0 91 e4 04 	lds	r30, 0x04E4
    38e4:	f0 91 e5 04 	lds	r31, 0x04E5
    38e8:	13 c0       	rjmp	.+38     	; 0x3910 <SPI_set_slave_addr+0x98>
    38ea:	e0 91 de 04 	lds	r30, 0x04DE
    38ee:	f0 91 df 04 	lds	r31, 0x04DF
    38f2:	0e c0       	rjmp	.+28     	; 0x3910 <SPI_set_slave_addr+0x98>
    38f4:	e0 91 e0 04 	lds	r30, 0x04E0
    38f8:	f0 91 e1 04 	lds	r31, 0x04E1
    38fc:	09 c0       	rjmp	.+18     	; 0x3910 <SPI_set_slave_addr+0x98>
    38fe:	e0 91 e2 04 	lds	r30, 0x04E2
    3902:	f0 91 e3 04 	lds	r31, 0x04E3
    3906:	04 c0       	rjmp	.+8      	; 0x3910 <SPI_set_slave_addr+0x98>
    3908:	e0 91 e6 04 	lds	r30, 0x04E6
    390c:	f0 91 e7 04 	lds	r31, 0x04E7
    3910:	30 97       	sbiw	r30, 0x00	; 0
    3912:	09 f0       	breq	.+2      	; 0x3916 <SPI_set_slave_addr+0x9e>
    3914:	09 95       	icall
    3916:	1f 91       	pop	r17
    3918:	08 95       	ret

0000391a <SPI_transmit>:
    391a:	1f 93       	push	r17
    391c:	16 2f       	mov	r17, r22
    391e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <SPI_set_slave_addr>
    3922:	82 e0       	ldi	r24, 0x02	; 2
    3924:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    3928:	81 30       	cpi	r24, 0x01	; 1
    392a:	21 f4       	brne	.+8      	; 0x3934 <SPI_transmit+0x1a>
    392c:	1e bd       	out	0x2e, r17	; 46
    392e:	0d b4       	in	r0, 0x2d	; 45
    3930:	07 fe       	sbrs	r0, 7
    3932:	fd cf       	rjmp	.-6      	; 0x392e <SPI_transmit+0x14>
    3934:	1f 91       	pop	r17
    3936:	08 95       	ret

00003938 <__SPKR_set_up_freq_LUT>:
    3938:	0f 93       	push	r16
    393a:	1f 93       	push	r17
    393c:	cf 93       	push	r28
    393e:	df 93       	push	r29
    3940:	80 e2       	ldi	r24, 0x20	; 32
    3942:	91 e0       	ldi	r25, 0x01	; 1
    3944:	0e 94 99 35 	call	0x6b32	; 0x6b32 <malloc>
    3948:	9c 01       	movw	r18, r24
    394a:	90 93 f7 04 	sts	0x04F7, r25
    394e:	80 93 f6 04 	sts	0x04F6, r24
    3952:	89 2b       	or	r24, r25
    3954:	11 f4       	brne	.+4      	; 0x395a <__SPKR_set_up_freq_LUT+0x22>
    3956:	80 e0       	ldi	r24, 0x00	; 0
    3958:	39 c0       	rjmp	.+114    	; 0x39cc <__SPKR_set_up_freq_LUT+0x94>
    395a:	89 01       	movw	r16, r18
    395c:	c0 e0       	ldi	r28, 0x00	; 0
    395e:	d0 e0       	ldi	r29, 0x00	; 0
    3960:	be 01       	movw	r22, r28
    3962:	80 e0       	ldi	r24, 0x00	; 0
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <__floatunsisf>
    396a:	20 e0       	ldi	r18, 0x00	; 0
    396c:	30 e0       	ldi	r19, 0x00	; 0
    396e:	40 ea       	ldi	r20, 0xA0	; 160
    3970:	51 e4       	ldi	r21, 0x41	; 65
    3972:	0e 94 41 2e 	call	0x5c82	; 0x5c82 <__divsf3>
    3976:	27 ef       	ldi	r18, 0xF7	; 247
    3978:	35 e7       	ldi	r19, 0x75	; 117
    397a:	40 e0       	ldi	r20, 0x00	; 0
    397c:	5f e3       	ldi	r21, 0x3F	; 63
    397e:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    3982:	9b 01       	movw	r18, r22
    3984:	ac 01       	movw	r20, r24
    3986:	60 e0       	ldi	r22, 0x00	; 0
    3988:	70 e0       	ldi	r23, 0x00	; 0
    398a:	80 e2       	ldi	r24, 0x20	; 32
    398c:	91 e4       	ldi	r25, 0x41	; 65
    398e:	0e 94 2d 30 	call	0x605a	; 0x605a <pow>
    3992:	9b 01       	movw	r18, r22
    3994:	ac 01       	movw	r20, r24
    3996:	ca 01       	movw	r24, r20
    3998:	b9 01       	movw	r22, r18
    399a:	2d ec       	ldi	r18, 0xCD	; 205
    399c:	3c ec       	ldi	r19, 0xCC	; 204
    399e:	42 e8       	ldi	r20, 0x82	; 130
    39a0:	51 e4       	ldi	r21, 0x41	; 65
    39a2:	0e 94 ca 2f 	call	0x5f94	; 0x5f94 <__mulsf3>
    39a6:	0e 94 90 2f 	call	0x5f20	; 0x5f20 <lrint>
    39aa:	2a e0       	ldi	r18, 0x0A	; 10
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e0       	ldi	r20, 0x00	; 0
    39b0:	50 e0       	ldi	r21, 0x00	; 0
    39b2:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <__mulsi3>
    39b6:	f8 01       	movw	r30, r16
    39b8:	61 93       	st	Z+, r22
    39ba:	71 93       	st	Z+, r23
    39bc:	81 93       	st	Z+, r24
    39be:	91 93       	st	Z+, r25
    39c0:	8f 01       	movw	r16, r30
    39c2:	21 96       	adiw	r28, 0x01	; 1
    39c4:	c8 34       	cpi	r28, 0x48	; 72
    39c6:	d1 05       	cpc	r29, r1
    39c8:	59 f6       	brne	.-106    	; 0x3960 <__SPKR_set_up_freq_LUT+0x28>
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	1f 91       	pop	r17
    39d2:	0f 91       	pop	r16
    39d4:	08 95       	ret

000039d6 <__SPKR_open_beep_mode>:
    39d6:	8a e0       	ldi	r24, 0x0A	; 10
    39d8:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    39dc:	88 23       	and	r24, r24
    39de:	71 f4       	brne	.+28     	; 0x39fc <__SPKR_open_beep_mode+0x26>
    39e0:	10 92 f3 04 	sts	0x04F3, r1
    39e4:	10 92 f2 04 	sts	0x04F2, r1
    39e8:	81 e0       	ldi	r24, 0x01	; 1
    39ea:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <__SPKR_init>
    39ee:	81 e0       	ldi	r24, 0x01	; 1
    39f0:	80 93 e9 04 	sts	0x04E9, r24
    39f4:	8a e0       	ldi	r24, 0x0A	; 10
    39f6:	61 e0       	ldi	r22, 0x01	; 1
    39f8:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    39fc:	8a e0       	ldi	r24, 0x0A	; 10
    39fe:	91 e0       	ldi	r25, 0x01	; 1
    3a00:	08 95       	ret

00003a02 <__SPKR_open_tone_mode>:
    3a02:	1f 93       	push	r17
    3a04:	8b e0       	ldi	r24, 0x0B	; 11
    3a06:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    3a0a:	88 23       	and	r24, r24
    3a0c:	11 f0       	breq	.+4      	; 0x3a12 <__SPKR_open_tone_mode+0x10>
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	21 c0       	rjmp	.+66     	; 0x3a54 <__SPKR_open_tone_mode+0x52>
    3a12:	89 e0       	ldi	r24, 0x09	; 9
    3a14:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    3a18:	88 23       	and	r24, r24
    3a1a:	d9 f4       	brne	.+54     	; 0x3a52 <__SPKR_open_tone_mode+0x50>
    3a1c:	0e 94 9c 1c 	call	0x3938	; 0x3938 <__SPKR_set_up_freq_LUT>
    3a20:	18 2f       	mov	r17, r24
    3a22:	81 30       	cpi	r24, 0x01	; 1
    3a24:	b1 f4       	brne	.+44     	; 0x3a52 <__SPKR_open_tone_mode+0x50>
    3a26:	10 92 ea 04 	sts	0x04EA, r1
    3a2a:	10 92 eb 04 	sts	0x04EB, r1
    3a2e:	10 92 ec 04 	sts	0x04EC, r1
    3a32:	10 92 ed 04 	sts	0x04ED, r1
    3a36:	8d e0       	ldi	r24, 0x0D	; 13
    3a38:	64 e2       	ldi	r22, 0x24	; 36
    3a3a:	77 e2       	ldi	r23, 0x27	; 39
    3a3c:	0e 94 87 25 	call	0x4b0e	; 0x4b0e <ISR_attach>
    3a40:	82 e0       	ldi	r24, 0x02	; 2
    3a42:	0e 94 a1 27 	call	0x4f42	; 0x4f42 <__SPKR_init>
    3a46:	10 93 e8 04 	sts	0x04E8, r17
    3a4a:	89 e0       	ldi	r24, 0x09	; 9
    3a4c:	61 e0       	ldi	r22, 0x01	; 1
    3a4e:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    3a52:	91 e0       	ldi	r25, 0x01	; 1
    3a54:	89 e0       	ldi	r24, 0x09	; 9
    3a56:	1f 91       	pop	r17
    3a58:	08 95       	ret

00003a5a <SPKR_open>:
    3a5a:	81 30       	cpi	r24, 0x01	; 1
    3a5c:	29 f0       	breq	.+10     	; 0x3a68 <SPKR_open+0xe>
    3a5e:	82 30       	cpi	r24, 0x02	; 2
    3a60:	31 f0       	breq	.+12     	; 0x3a6e <SPKR_open+0x14>
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	89 e0       	ldi	r24, 0x09	; 9
    3a66:	08 95       	ret
    3a68:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <__SPKR_open_beep_mode>
    3a6c:	08 95       	ret
    3a6e:	0e 94 01 1d 	call	0x3a02	; 0x3a02 <__SPKR_open_tone_mode>
    3a72:	08 95       	ret

00003a74 <STEPPER_get_nSteps>:
    3a74:	80 91 dc 07 	lds	r24, 0x07DC
    3a78:	90 91 dd 07 	lds	r25, 0x07DD
    3a7c:	20 91 de 07 	lds	r18, 0x07DE
    3a80:	30 91 df 07 	lds	r19, 0x07DF
    3a84:	bc 01       	movw	r22, r24
    3a86:	c9 01       	movw	r24, r18
    3a88:	08 95       	ret

00003a8a <STEPPER_stepmode>:
    3a8a:	2f 92       	push	r2
    3a8c:	3f 92       	push	r3
    3a8e:	4f 92       	push	r4
    3a90:	5f 92       	push	r5
    3a92:	6f 92       	push	r6
    3a94:	7f 92       	push	r7
    3a96:	8f 92       	push	r8
    3a98:	9f 92       	push	r9
    3a9a:	af 92       	push	r10
    3a9c:	bf 92       	push	r11
    3a9e:	cf 92       	push	r12
    3aa0:	df 92       	push	r13
    3aa2:	ef 92       	push	r14
    3aa4:	ff 92       	push	r15
    3aa6:	0f 93       	push	r16
    3aa8:	1f 93       	push	r17
    3aaa:	df 93       	push	r29
    3aac:	cf 93       	push	r28
    3aae:	cd b7       	in	r28, 0x3d	; 61
    3ab0:	de b7       	in	r29, 0x3e	; 62
    3ab2:	58 2e       	mov	r5, r24
    3ab4:	96 2e       	mov	r9, r22
    3ab6:	44 2e       	mov	r4, r20
    3ab8:	39 01       	movw	r6, r18
    3aba:	3c 2c       	mov	r3, r12
    3abc:	c9 8c       	ldd	r12, Y+25	; 0x19
    3abe:	da 8c       	ldd	r13, Y+26	; 0x1a
    3ac0:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	68 17       	cp	r22, r24
    3ac6:	39 f1       	breq	.+78     	; 0x3b16 <STEPPER_stepmode+0x8c>
    3ac8:	68 17       	cp	r22, r24
    3aca:	28 f0       	brcs	.+10     	; 0x3ad6 <STEPPER_stepmode+0x4c>
    3acc:	92 e0       	ldi	r25, 0x02	; 2
    3ace:	69 17       	cp	r22, r25
    3ad0:	09 f0       	breq	.+2      	; 0x3ad4 <STEPPER_stepmode+0x4a>
    3ad2:	85 c0       	rjmp	.+266    	; 0x3bde <STEPPER_stepmode+0x154>
    3ad4:	49 c0       	rjmp	.+146    	; 0x3b68 <STEPPER_stepmode+0xde>
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
    3ad8:	61 e0       	ldi	r22, 0x01	; 1
    3ada:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <STEPPER_set_mode>
    3ade:	80 e0       	ldi	r24, 0x00	; 0
    3ae0:	b7 01       	movw	r22, r14
    3ae2:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <STEPPER_set_accel>
    3ae6:	80 e0       	ldi	r24, 0x00	; 0
    3ae8:	64 2d       	mov	r22, r4
    3aea:	a3 01       	movw	r20, r6
    3aec:	98 01       	movw	r18, r16
    3aee:	03 2d       	mov	r16, r3
    3af0:	ee 24       	eor	r14, r14
    3af2:	e3 94       	inc	r14
    3af4:	e1 e0       	ldi	r30, 0x01	; 1
    3af6:	ce 2e       	mov	r12, r30
    3af8:	e8 e0       	ldi	r30, 0x08	; 8
    3afa:	de 2e       	mov	r13, r30
    3afc:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <STEPPER_step>
    3b00:	55 20       	and	r5, r5
    3b02:	09 f0       	breq	.+2      	; 0x3b06 <STEPPER_stepmode+0x7c>
    3b04:	6c c0       	rjmp	.+216    	; 0x3bde <STEPPER_stepmode+0x154>
    3b06:	00 d0       	rcall	.+0      	; 0x3b08 <STEPPER_stepmode+0x7e>
    3b08:	0f 92       	push	r0
    3b0a:	ed b7       	in	r30, 0x3d	; 61
    3b0c:	fe b7       	in	r31, 0x3e	; 62
    3b0e:	11 82       	std	Z+1, r1	; 0x01
    3b10:	b3 82       	std	Z+3, r11	; 0x03
    3b12:	a2 82       	std	Z+2, r10	; 0x02
    3b14:	23 c0       	rjmp	.+70     	; 0x3b5c <STEPPER_stepmode+0xd2>
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	61 e0       	ldi	r22, 0x01	; 1
    3b1a:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <STEPPER_set_mode>
    3b1e:	81 e0       	ldi	r24, 0x01	; 1
    3b20:	b6 01       	movw	r22, r12
    3b22:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <STEPPER_set_accel>
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	68 2d       	mov	r22, r8
    3b2a:	4d 89       	ldd	r20, Y+21	; 0x15
    3b2c:	5e 89       	ldd	r21, Y+22	; 0x16
    3b2e:	2f 89       	ldd	r18, Y+23	; 0x17
    3b30:	38 8d       	ldd	r19, Y+24	; 0x18
    3b32:	02 2d       	mov	r16, r2
    3b34:	ee 24       	eor	r14, r14
    3b36:	e3 94       	inc	r14
    3b38:	71 e0       	ldi	r23, 0x01	; 1
    3b3a:	c7 2e       	mov	r12, r23
    3b3c:	78 e0       	ldi	r23, 0x08	; 8
    3b3e:	d7 2e       	mov	r13, r23
    3b40:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <STEPPER_step>
    3b44:	55 20       	and	r5, r5
    3b46:	09 f0       	breq	.+2      	; 0x3b4a <STEPPER_stepmode+0xc0>
    3b48:	4a c0       	rjmp	.+148    	; 0x3bde <STEPPER_stepmode+0x154>
    3b4a:	00 d0       	rcall	.+0      	; 0x3b4c <STEPPER_stepmode+0xc2>
    3b4c:	0f 92       	push	r0
    3b4e:	ed b7       	in	r30, 0x3d	; 61
    3b50:	fe b7       	in	r31, 0x3e	; 62
    3b52:	91 82       	std	Z+1, r9	; 0x01
    3b54:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3b56:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3b58:	93 83       	std	Z+3, r25	; 0x03
    3b5a:	82 83       	std	Z+2, r24	; 0x02
    3b5c:	0e 94 51 20 	call	0x40a2	; 0x40a2 <STEPPER_wait_and_then>
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	3b c0       	rjmp	.+118    	; 0x3bde <STEPPER_stepmode+0x154>
    3b68:	82 e0       	ldi	r24, 0x02	; 2
    3b6a:	61 e0       	ldi	r22, 0x01	; 1
    3b6c:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <STEPPER_set_mode>
    3b70:	80 e0       	ldi	r24, 0x00	; 0
    3b72:	b7 01       	movw	r22, r14
    3b74:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <STEPPER_set_accel>
    3b78:	81 e0       	ldi	r24, 0x01	; 1
    3b7a:	b6 01       	movw	r22, r12
    3b7c:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <STEPPER_set_accel>
    3b80:	80 e0       	ldi	r24, 0x00	; 0
    3b82:	64 2d       	mov	r22, r4
    3b84:	a3 01       	movw	r20, r6
    3b86:	98 01       	movw	r18, r16
    3b88:	03 2d       	mov	r16, r3
    3b8a:	ee 24       	eor	r14, r14
    3b8c:	e3 94       	inc	r14
    3b8e:	91 e0       	ldi	r25, 0x01	; 1
    3b90:	c9 2e       	mov	r12, r25
    3b92:	98 e0       	ldi	r25, 0x08	; 8
    3b94:	d9 2e       	mov	r13, r25
    3b96:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <STEPPER_step>
    3b9a:	81 e0       	ldi	r24, 0x01	; 1
    3b9c:	68 2d       	mov	r22, r8
    3b9e:	4d 89       	ldd	r20, Y+21	; 0x15
    3ba0:	5e 89       	ldd	r21, Y+22	; 0x16
    3ba2:	2f 89       	ldd	r18, Y+23	; 0x17
    3ba4:	38 8d       	ldd	r19, Y+24	; 0x18
    3ba6:	02 2d       	mov	r16, r2
    3ba8:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <STEPPER_step>
    3bac:	55 20       	and	r5, r5
    3bae:	b9 f4       	brne	.+46     	; 0x3bde <STEPPER_stepmode+0x154>
    3bb0:	00 d0       	rcall	.+0      	; 0x3bb2 <STEPPER_stepmode+0x128>
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <STEPPER_stepmode+0x12a>
    3bb4:	0f 92       	push	r0
    3bb6:	ad b7       	in	r26, 0x3d	; 61
    3bb8:	be b7       	in	r27, 0x3e	; 62
    3bba:	11 96       	adiw	r26, 0x01	; 1
    3bbc:	ed b7       	in	r30, 0x3d	; 61
    3bbe:	fe b7       	in	r31, 0x3e	; 62
    3bc0:	91 82       	std	Z+1, r9	; 0x01
    3bc2:	fd 01       	movw	r30, r26
    3bc4:	b2 82       	std	Z+2, r11	; 0x02
    3bc6:	a1 82       	std	Z+1, r10	; 0x01
    3bc8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3bca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3bcc:	94 83       	std	Z+4, r25	; 0x04
    3bce:	83 83       	std	Z+3, r24	; 0x03
    3bd0:	0e 94 51 20 	call	0x40a2	; 0x40a2 <STEPPER_wait_and_then>
    3bd4:	0f 90       	pop	r0
    3bd6:	0f 90       	pop	r0
    3bd8:	0f 90       	pop	r0
    3bda:	0f 90       	pop	r0
    3bdc:	0f 90       	pop	r0
    3bde:	cf 91       	pop	r28
    3be0:	df 91       	pop	r29
    3be2:	1f 91       	pop	r17
    3be4:	0f 91       	pop	r16
    3be6:	ff 90       	pop	r15
    3be8:	ef 90       	pop	r14
    3bea:	df 90       	pop	r13
    3bec:	cf 90       	pop	r12
    3bee:	bf 90       	pop	r11
    3bf0:	af 90       	pop	r10
    3bf2:	9f 90       	pop	r9
    3bf4:	8f 90       	pop	r8
    3bf6:	7f 90       	pop	r7
    3bf8:	6f 90       	pop	r6
    3bfa:	5f 90       	pop	r5
    3bfc:	4f 90       	pop	r4
    3bfe:	3f 90       	pop	r3
    3c00:	2f 90       	pop	r2
    3c02:	08 95       	ret

00003c04 <STEPPER_move>:
    3c04:	6f 92       	push	r6
    3c06:	7f 92       	push	r7
    3c08:	8f 92       	push	r8
    3c0a:	9f 92       	push	r9
    3c0c:	af 92       	push	r10
    3c0e:	bf 92       	push	r11
    3c10:	cf 92       	push	r12
    3c12:	df 92       	push	r13
    3c14:	ef 92       	push	r14
    3c16:	ff 92       	push	r15
    3c18:	0f 93       	push	r16
    3c1a:	1f 93       	push	r17
    3c1c:	df 93       	push	r29
    3c1e:	cf 93       	push	r28
    3c20:	cd b7       	in	r28, 0x3d	; 61
    3c22:	de b7       	in	r29, 0x3e	; 62
    3c24:	94 2e       	mov	r9, r20
    3c26:	7c 2d       	mov	r23, r12
    3c28:	d5 01       	movw	r26, r10
    3c2a:	49 89       	ldd	r20, Y+17	; 0x11
    3c2c:	5a 89       	ldd	r21, Y+18	; 0x12
    3c2e:	ab 88       	ldd	r10, Y+19	; 0x13
    3c30:	bc 88       	ldd	r11, Y+20	; 0x14
    3c32:	cd 88       	ldd	r12, Y+21	; 0x15
    3c34:	de 88       	ldd	r13, Y+22	; 0x16
    3c36:	9f 89       	ldd	r25, Y+23	; 0x17
    3c38:	81 30       	cpi	r24, 0x01	; 1
    3c3a:	09 f4       	brne	.+2      	; 0x3c3e <STEPPER_move+0x3a>
    3c3c:	57 c0       	rjmp	.+174    	; 0x3cec <STEPPER_move+0xe8>
    3c3e:	81 30       	cpi	r24, 0x01	; 1
    3c40:	b8 f1       	brcs	.+110    	; 0x3cb0 <STEPPER_move+0xac>
    3c42:	82 30       	cpi	r24, 0x02	; 2
    3c44:	09 f0       	breq	.+2      	; 0x3c48 <STEPPER_move+0x44>
    3c46:	76 c0       	rjmp	.+236    	; 0x3d34 <STEPPER_move+0x130>
    3c48:	61 30       	cpi	r22, 0x01	; 1
    3c4a:	91 f0       	breq	.+36     	; 0x3c70 <STEPPER_move+0x6c>
    3c4c:	61 30       	cpi	r22, 0x01	; 1
    3c4e:	20 f0       	brcs	.+8      	; 0x3c58 <STEPPER_move+0x54>
    3c50:	62 30       	cpi	r22, 0x02	; 2
    3c52:	09 f0       	breq	.+2      	; 0x3c56 <STEPPER_move+0x52>
    3c54:	6f c0       	rjmp	.+222    	; 0x3d34 <STEPPER_move+0x130>
    3c56:	15 c0       	rjmp	.+42     	; 0x3c82 <STEPPER_move+0x7e>
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	60 e0       	ldi	r22, 0x00	; 0
    3c5c:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <STEPPER_set_mode>
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	b7 01       	movw	r22, r14
    3c64:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <STEPPER_set_accel>
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	69 2d       	mov	r22, r9
    3c6c:	a8 01       	movw	r20, r16
    3c6e:	1d c0       	rjmp	.+58     	; 0x3caa <STEPPER_move+0xa6>
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	60 e0       	ldi	r22, 0x00	; 0
    3c74:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <STEPPER_set_mode>
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	b6 01       	movw	r22, r12
    3c7c:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <STEPPER_set_accel>
    3c80:	11 c0       	rjmp	.+34     	; 0x3ca4 <STEPPER_move+0xa0>
    3c82:	82 e0       	ldi	r24, 0x02	; 2
    3c84:	60 e0       	ldi	r22, 0x00	; 0
    3c86:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <STEPPER_set_mode>
    3c8a:	80 e0       	ldi	r24, 0x00	; 0
    3c8c:	b7 01       	movw	r22, r14
    3c8e:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <STEPPER_set_accel>
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	b6 01       	movw	r22, r12
    3c96:	0e 94 17 1f 	call	0x3e2e	; 0x3e2e <STEPPER_set_accel>
    3c9a:	80 e0       	ldi	r24, 0x00	; 0
    3c9c:	69 2d       	mov	r22, r9
    3c9e:	a8 01       	movw	r20, r16
    3ca0:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <STEPPER_run>
    3ca4:	81 e0       	ldi	r24, 0x01	; 1
    3ca6:	68 2d       	mov	r22, r8
    3ca8:	a5 01       	movw	r20, r10
    3caa:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <STEPPER_run>
    3cae:	42 c0       	rjmp	.+132    	; 0x3d34 <STEPPER_move+0x130>
    3cb0:	ed b7       	in	r30, 0x3d	; 61
    3cb2:	fe b7       	in	r31, 0x3e	; 62
    3cb4:	39 97       	sbiw	r30, 0x09	; 9
    3cb6:	0f b6       	in	r0, 0x3f	; 63
    3cb8:	f8 94       	cli
    3cba:	fe bf       	out	0x3e, r31	; 62
    3cbc:	0f be       	out	0x3f, r0	; 63
    3cbe:	ed bf       	out	0x3d, r30	; 61
    3cc0:	6d b6       	in	r6, 0x3d	; 61
    3cc2:	7e b6       	in	r7, 0x3e	; 62
    3cc4:	08 94       	sec
    3cc6:	61 1c       	adc	r6, r1
    3cc8:	71 1c       	adc	r7, r1
    3cca:	52 83       	std	Z+2, r21	; 0x02
    3ccc:	41 83       	std	Z+1, r20	; 0x01
    3cce:	f3 01       	movw	r30, r6
    3cd0:	b3 82       	std	Z+3, r11	; 0x03
    3cd2:	a2 82       	std	Z+2, r10	; 0x02
    3cd4:	d5 82       	std	Z+5, r13	; 0x05
    3cd6:	c4 82       	std	Z+4, r12	; 0x04
    3cd8:	96 83       	std	Z+6, r25	; 0x06
    3cda:	88 8d       	ldd	r24, Y+24	; 0x18
    3cdc:	99 8d       	ldd	r25, Y+25	; 0x19
    3cde:	90 87       	std	Z+8, r25	; 0x08
    3ce0:	87 83       	std	Z+7, r24	; 0x07
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	49 2d       	mov	r20, r9
    3ce6:	c7 2e       	mov	r12, r23
    3ce8:	5d 01       	movw	r10, r26
    3cea:	1a c0       	rjmp	.+52     	; 0x3d20 <STEPPER_move+0x11c>
    3cec:	ed b7       	in	r30, 0x3d	; 61
    3cee:	fe b7       	in	r31, 0x3e	; 62
    3cf0:	39 97       	sbiw	r30, 0x09	; 9
    3cf2:	0f b6       	in	r0, 0x3f	; 63
    3cf4:	f8 94       	cli
    3cf6:	fe bf       	out	0x3e, r31	; 62
    3cf8:	0f be       	out	0x3f, r0	; 63
    3cfa:	ed bf       	out	0x3d, r30	; 61
    3cfc:	ad b7       	in	r26, 0x3d	; 61
    3cfe:	be b7       	in	r27, 0x3e	; 62
    3d00:	11 96       	adiw	r26, 0x01	; 1
    3d02:	52 83       	std	Z+2, r21	; 0x02
    3d04:	41 83       	std	Z+1, r20	; 0x01
    3d06:	fd 01       	movw	r30, r26
    3d08:	b3 82       	std	Z+3, r11	; 0x03
    3d0a:	a2 82       	std	Z+2, r10	; 0x02
    3d0c:	d5 82       	std	Z+5, r13	; 0x05
    3d0e:	c4 82       	std	Z+4, r12	; 0x04
    3d10:	96 83       	std	Z+6, r25	; 0x06
    3d12:	10 86       	std	Z+8, r1	; 0x08
    3d14:	17 82       	std	Z+7, r1	; 0x07
    3d16:	81 e0       	ldi	r24, 0x01	; 1
    3d18:	49 2d       	mov	r20, r9
    3d1a:	c7 2e       	mov	r12, r23
    3d1c:	aa 24       	eor	r10, r10
    3d1e:	bb 24       	eor	r11, r11
    3d20:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <STEPPER_stepmode>
    3d24:	8d b7       	in	r24, 0x3d	; 61
    3d26:	9e b7       	in	r25, 0x3e	; 62
    3d28:	09 96       	adiw	r24, 0x09	; 9
    3d2a:	0f b6       	in	r0, 0x3f	; 63
    3d2c:	f8 94       	cli
    3d2e:	9e bf       	out	0x3e, r25	; 62
    3d30:	0f be       	out	0x3f, r0	; 63
    3d32:	8d bf       	out	0x3d, r24	; 61
    3d34:	cf 91       	pop	r28
    3d36:	df 91       	pop	r29
    3d38:	1f 91       	pop	r17
    3d3a:	0f 91       	pop	r16
    3d3c:	ff 90       	pop	r15
    3d3e:	ef 90       	pop	r14
    3d40:	df 90       	pop	r13
    3d42:	cf 90       	pop	r12
    3d44:	bf 90       	pop	r11
    3d46:	af 90       	pop	r10
    3d48:	9f 90       	pop	r9
    3d4a:	8f 90       	pop	r8
    3d4c:	7f 90       	pop	r7
    3d4e:	6f 90       	pop	r6
    3d50:	08 95       	ret

00003d52 <STEPPER_open>:
    3d52:	0e 94 33 28 	call	0x5066	; 0x5066 <__STEPPER_init>
    3d56:	81 e0       	ldi	r24, 0x01	; 1
    3d58:	80 93 00 08 	sts	0x0800, r24
    3d5c:	ea ec       	ldi	r30, 0xCA	; 202
    3d5e:	f7 e0       	ldi	r31, 0x07	; 7
    3d60:	11 92       	st	Z+, r1
    3d62:	11 92       	st	Z+, r1
    3d64:	11 82       	std	Z+1, r1	; 0x01
    3d66:	10 82       	st	Z, r1
    3d68:	32 96       	adiw	r30, 0x02	; 2
    3d6a:	11 82       	std	Z+1, r1	; 0x01
    3d6c:	10 82       	st	Z, r1
    3d6e:	32 96       	adiw	r30, 0x02	; 2
    3d70:	11 82       	std	Z+1, r1	; 0x01
    3d72:	10 82       	st	Z, r1
    3d74:	32 96       	adiw	r30, 0x02	; 2
    3d76:	11 82       	std	Z+1, r1	; 0x01
    3d78:	10 82       	st	Z, r1
    3d7a:	32 96       	adiw	r30, 0x02	; 2
    3d7c:	11 82       	std	Z+1, r1	; 0x01
    3d7e:	10 82       	st	Z, r1
    3d80:	32 96       	adiw	r30, 0x02	; 2
    3d82:	11 82       	std	Z+1, r1	; 0x01
    3d84:	10 82       	st	Z, r1
    3d86:	32 96       	adiw	r30, 0x02	; 2
    3d88:	11 82       	std	Z+1, r1	; 0x01
    3d8a:	10 82       	st	Z, r1
    3d8c:	32 96       	adiw	r30, 0x02	; 2
    3d8e:	11 82       	std	Z+1, r1	; 0x01
    3d90:	10 82       	st	Z, r1
    3d92:	32 96       	adiw	r30, 0x02	; 2
    3d94:	11 82       	std	Z+1, r1	; 0x01
    3d96:	10 82       	st	Z, r1
    3d98:	32 96       	adiw	r30, 0x02	; 2
    3d9a:	11 82       	std	Z+1, r1	; 0x01
    3d9c:	10 82       	st	Z, r1
    3d9e:	32 96       	adiw	r30, 0x02	; 2
    3da0:	11 82       	std	Z+1, r1	; 0x01
    3da2:	10 82       	st	Z, r1
    3da4:	32 96       	adiw	r30, 0x02	; 2
    3da6:	11 82       	std	Z+1, r1	; 0x01
    3da8:	10 82       	st	Z, r1
    3daa:	36 96       	adiw	r30, 0x06	; 6
    3dac:	11 92       	st	Z+, r1
    3dae:	11 92       	st	Z+, r1
    3db0:	11 92       	st	Z+, r1
    3db2:	10 82       	st	Z, r1
    3db4:	32 96       	adiw	r30, 0x02	; 2
    3db6:	11 92       	st	Z+, r1
    3db8:	11 92       	st	Z+, r1
    3dba:	11 92       	st	Z+, r1
    3dbc:	11 92       	st	Z+, r1
    3dbe:	11 92       	st	Z+, r1
    3dc0:	11 92       	st	Z+, r1
    3dc2:	11 92       	st	Z+, r1
    3dc4:	11 82       	std	Z+1, r1	; 0x01
    3dc6:	10 82       	st	Z, r1
    3dc8:	32 96       	adiw	r30, 0x02	; 2
    3dca:	11 82       	std	Z+1, r1	; 0x01
    3dcc:	10 82       	st	Z, r1
    3dce:	32 96       	adiw	r30, 0x02	; 2
    3dd0:	11 82       	std	Z+1, r1	; 0x01
    3dd2:	10 82       	st	Z, r1
    3dd4:	32 96       	adiw	r30, 0x02	; 2
    3dd6:	11 82       	std	Z+1, r1	; 0x01
    3dd8:	10 82       	st	Z, r1
    3dda:	76 97       	sbiw	r30, 0x16	; 22
    3ddc:	11 82       	std	Z+1, r1	; 0x01
    3dde:	10 82       	st	Z, r1
    3de0:	32 96       	adiw	r30, 0x02	; 2
    3de2:	11 82       	std	Z+1, r1	; 0x01
    3de4:	10 82       	st	Z, r1
    3de6:	10 92 ff 07 	sts	0x07FF, r1
    3dea:	10 92 fe 07 	sts	0x07FE, r1
    3dee:	10 92 00 08 	sts	0x0800, r1
    3df2:	87 e0       	ldi	r24, 0x07	; 7
    3df4:	61 e0       	ldi	r22, 0x01	; 1
    3df6:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    3dfa:	87 e0       	ldi	r24, 0x07	; 7
    3dfc:	91 e0       	ldi	r25, 0x01	; 1
    3dfe:	08 95       	ret

00003e00 <STEPPER_run>:
    3e00:	ef 92       	push	r14
    3e02:	ff 92       	push	r15
    3e04:	0f 93       	push	r16
    3e06:	1f 93       	push	r17
    3e08:	18 2f       	mov	r17, r24
    3e0a:	06 2f       	mov	r16, r22
    3e0c:	7a 01       	movw	r14, r20
    3e0e:	60 e0       	ldi	r22, 0x00	; 0
    3e10:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <STEPPER_set_mode>
    3e14:	81 2f       	mov	r24, r17
    3e16:	60 2f       	mov	r22, r16
    3e18:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <STEPPER_set_dir>
    3e1c:	81 2f       	mov	r24, r17
    3e1e:	b7 01       	movw	r22, r14
    3e20:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <STEPPER_set_speed>
    3e24:	1f 91       	pop	r17
    3e26:	0f 91       	pop	r16
    3e28:	ff 90       	pop	r15
    3e2a:	ef 90       	pop	r14
    3e2c:	08 95       	ret

00003e2e <STEPPER_set_accel>:
    3e2e:	48 2f       	mov	r20, r24
    3e30:	81 e0       	ldi	r24, 0x01	; 1
    3e32:	80 93 00 08 	sts	0x0800, r24
    3e36:	cb 01       	movw	r24, r22
    3e38:	23 e0       	ldi	r18, 0x03	; 3
    3e3a:	69 3e       	cpi	r22, 0xE9	; 233
    3e3c:	72 07       	cpc	r23, r18
    3e3e:	10 f0       	brcs	.+4      	; 0x3e44 <STEPPER_set_accel+0x16>
    3e40:	88 ee       	ldi	r24, 0xE8	; 232
    3e42:	93 e0       	ldi	r25, 0x03	; 3
    3e44:	41 30       	cpi	r20, 0x01	; 1
    3e46:	71 f0       	breq	.+28     	; 0x3e64 <STEPPER_set_accel+0x36>
    3e48:	41 30       	cpi	r20, 0x01	; 1
    3e4a:	18 f0       	brcs	.+6      	; 0x3e52 <STEPPER_set_accel+0x24>
    3e4c:	42 30       	cpi	r20, 0x02	; 2
    3e4e:	71 f4       	brne	.+28     	; 0x3e6c <STEPPER_set_accel+0x3e>
    3e50:	05 c0       	rjmp	.+10     	; 0x3e5c <STEPPER_set_accel+0x2e>
    3e52:	90 93 d5 07 	sts	0x07D5, r25
    3e56:	80 93 d4 07 	sts	0x07D4, r24
    3e5a:	08 c0       	rjmp	.+16     	; 0x3e6c <STEPPER_set_accel+0x3e>
    3e5c:	90 93 d5 07 	sts	0x07D5, r25
    3e60:	80 93 d4 07 	sts	0x07D4, r24
    3e64:	90 93 d7 07 	sts	0x07D7, r25
    3e68:	80 93 d6 07 	sts	0x07D6, r24
    3e6c:	10 92 00 08 	sts	0x0800, r1
    3e70:	08 95       	ret

00003e72 <STEPPER_set_dir>:
    3e72:	98 2f       	mov	r25, r24
    3e74:	81 e0       	ldi	r24, 0x01	; 1
    3e76:	80 93 00 08 	sts	0x0800, r24
    3e7a:	91 30       	cpi	r25, 0x01	; 1
    3e7c:	51 f0       	breq	.+20     	; 0x3e92 <STEPPER_set_dir+0x20>
    3e7e:	91 30       	cpi	r25, 0x01	; 1
    3e80:	18 f0       	brcs	.+6      	; 0x3e88 <STEPPER_set_dir+0x16>
    3e82:	92 30       	cpi	r25, 0x02	; 2
    3e84:	41 f4       	brne	.+16     	; 0x3e96 <STEPPER_set_dir+0x24>
    3e86:	03 c0       	rjmp	.+6      	; 0x3e8e <STEPPER_set_dir+0x1c>
    3e88:	60 93 ed 07 	sts	0x07ED, r22
    3e8c:	04 c0       	rjmp	.+8      	; 0x3e96 <STEPPER_set_dir+0x24>
    3e8e:	60 93 ed 07 	sts	0x07ED, r22
    3e92:	60 93 ee 07 	sts	0x07EE, r22
    3e96:	10 92 00 08 	sts	0x0800, r1
    3e9a:	08 95       	ret

00003e9c <STEPPER_set_mode>:
    3e9c:	98 2f       	mov	r25, r24
    3e9e:	81 e0       	ldi	r24, 0x01	; 1
    3ea0:	80 93 00 08 	sts	0x0800, r24
    3ea4:	91 30       	cpi	r25, 0x01	; 1
    3ea6:	51 f0       	breq	.+20     	; 0x3ebc <STEPPER_set_mode+0x20>
    3ea8:	91 30       	cpi	r25, 0x01	; 1
    3eaa:	18 f0       	brcs	.+6      	; 0x3eb2 <STEPPER_set_mode+0x16>
    3eac:	92 30       	cpi	r25, 0x02	; 2
    3eae:	41 f4       	brne	.+16     	; 0x3ec0 <STEPPER_set_mode+0x24>
    3eb0:	03 c0       	rjmp	.+6      	; 0x3eb8 <STEPPER_set_mode+0x1c>
    3eb2:	60 93 ca 07 	sts	0x07CA, r22
    3eb6:	04 c0       	rjmp	.+8      	; 0x3ec0 <STEPPER_set_mode+0x24>
    3eb8:	60 93 ca 07 	sts	0x07CA, r22
    3ebc:	60 93 cb 07 	sts	0x07CB, r22
    3ec0:	10 92 00 08 	sts	0x0800, r1
    3ec4:	08 95       	ret

00003ec6 <STEPPER_set_speed>:
    3ec6:	48 2f       	mov	r20, r24
    3ec8:	81 e0       	ldi	r24, 0x01	; 1
    3eca:	80 93 00 08 	sts	0x0800, r24
    3ece:	cb 01       	movw	r24, r22
    3ed0:	21 e0       	ldi	r18, 0x01	; 1
    3ed2:	61 39       	cpi	r22, 0x91	; 145
    3ed4:	72 07       	cpc	r23, r18
    3ed6:	10 f0       	brcs	.+4      	; 0x3edc <STEPPER_set_speed+0x16>
    3ed8:	80 e9       	ldi	r24, 0x90	; 144
    3eda:	91 e0       	ldi	r25, 0x01	; 1
    3edc:	41 30       	cpi	r20, 0x01	; 1
    3ede:	71 f0       	breq	.+28     	; 0x3efc <STEPPER_set_speed+0x36>
    3ee0:	41 30       	cpi	r20, 0x01	; 1
    3ee2:	18 f0       	brcs	.+6      	; 0x3eea <STEPPER_set_speed+0x24>
    3ee4:	42 30       	cpi	r20, 0x02	; 2
    3ee6:	71 f4       	brne	.+28     	; 0x3f04 <STEPPER_set_speed+0x3e>
    3ee8:	05 c0       	rjmp	.+10     	; 0x3ef4 <STEPPER_set_speed+0x2e>
    3eea:	90 93 cd 07 	sts	0x07CD, r25
    3eee:	80 93 cc 07 	sts	0x07CC, r24
    3ef2:	08 c0       	rjmp	.+16     	; 0x3f04 <STEPPER_set_speed+0x3e>
    3ef4:	90 93 cd 07 	sts	0x07CD, r25
    3ef8:	80 93 cc 07 	sts	0x07CC, r24
    3efc:	90 93 cf 07 	sts	0x07CF, r25
    3f00:	80 93 ce 07 	sts	0x07CE, r24
    3f04:	10 92 00 08 	sts	0x0800, r1
    3f08:	08 95       	ret

00003f0a <STEPPER_set_steps>:
    3f0a:	98 2f       	mov	r25, r24
    3f0c:	81 e0       	ldi	r24, 0x01	; 1
    3f0e:	80 93 00 08 	sts	0x0800, r24
    3f12:	91 30       	cpi	r25, 0x01	; 1
    3f14:	71 f0       	breq	.+28     	; 0x3f32 <STEPPER_set_steps+0x28>
    3f16:	91 30       	cpi	r25, 0x01	; 1
    3f18:	18 f0       	brcs	.+6      	; 0x3f20 <STEPPER_set_steps+0x16>
    3f1a:	92 30       	cpi	r25, 0x02	; 2
    3f1c:	71 f4       	brne	.+28     	; 0x3f3a <STEPPER_set_steps+0x30>
    3f1e:	05 c0       	rjmp	.+10     	; 0x3f2a <STEPPER_set_steps+0x20>
    3f20:	70 93 dd 07 	sts	0x07DD, r23
    3f24:	60 93 dc 07 	sts	0x07DC, r22
    3f28:	08 c0       	rjmp	.+16     	; 0x3f3a <STEPPER_set_steps+0x30>
    3f2a:	70 93 dd 07 	sts	0x07DD, r23
    3f2e:	60 93 dc 07 	sts	0x07DC, r22
    3f32:	70 93 df 07 	sts	0x07DF, r23
    3f36:	60 93 de 07 	sts	0x07DE, r22
    3f3a:	10 92 00 08 	sts	0x0800, r1
    3f3e:	08 95       	ret

00003f40 <STEPPER_step>:
    3f40:	8f 92       	push	r8
    3f42:	9f 92       	push	r9
    3f44:	af 92       	push	r10
    3f46:	bf 92       	push	r11
    3f48:	cf 92       	push	r12
    3f4a:	df 92       	push	r13
    3f4c:	ef 92       	push	r14
    3f4e:	ff 92       	push	r15
    3f50:	0f 93       	push	r16
    3f52:	1f 93       	push	r17
    3f54:	cf 93       	push	r28
    3f56:	df 93       	push	r29
    3f58:	18 2f       	mov	r17, r24
    3f5a:	f6 2e       	mov	r15, r22
    3f5c:	5a 01       	movw	r10, r20
    3f5e:	49 01       	movw	r8, r18
    3f60:	e6 01       	movw	r28, r12
    3f62:	61 e0       	ldi	r22, 0x01	; 1
    3f64:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <STEPPER_set_mode>
    3f68:	81 2f       	mov	r24, r17
    3f6a:	b5 01       	movw	r22, r10
    3f6c:	a4 01       	movw	r20, r8
    3f6e:	0e 94 52 28 	call	0x50a4	; 0x50a4 <STEPPER_setup_decels>
    3f72:	81 2f       	mov	r24, r17
    3f74:	6f 2d       	mov	r22, r15
    3f76:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <STEPPER_set_dir>
    3f7a:	81 2f       	mov	r24, r17
    3f7c:	60 2f       	mov	r22, r16
    3f7e:	0e 94 3d 28 	call	0x507a	; 0x507a <STEPPER_set_stop_mode>
    3f82:	81 2f       	mov	r24, r17
    3f84:	b5 01       	movw	r22, r10
    3f86:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <STEPPER_set_steps>
    3f8a:	c1 14       	cp	r12, r1
    3f8c:	d1 04       	cpc	r13, r1
    3f8e:	99 f0       	breq	.+38     	; 0x3fb6 <STEPPER_step+0x76>
    3f90:	11 30       	cpi	r17, 0x01	; 1
    3f92:	49 f0       	breq	.+18     	; 0x3fa6 <STEPPER_step+0x66>
    3f94:	11 30       	cpi	r17, 0x01	; 1
    3f96:	18 f0       	brcs	.+6      	; 0x3f9e <STEPPER_step+0x5e>
    3f98:	12 30       	cpi	r17, 0x02	; 2
    3f9a:	69 f4       	brne	.+26     	; 0x3fb6 <STEPPER_step+0x76>
    3f9c:	06 c0       	rjmp	.+12     	; 0x3faa <STEPPER_step+0x6a>
    3f9e:	18 82       	st	Y, r1
    3fa0:	10 92 fc 07 	sts	0x07FC, r1
    3fa4:	08 c0       	rjmp	.+16     	; 0x3fb6 <STEPPER_step+0x76>
    3fa6:	19 82       	std	Y+1, r1	; 0x01
    3fa8:	04 c0       	rjmp	.+8      	; 0x3fb2 <STEPPER_step+0x72>
    3faa:	18 82       	st	Y, r1
    3fac:	19 82       	std	Y+1, r1	; 0x01
    3fae:	10 92 fc 07 	sts	0x07FC, r1
    3fb2:	10 92 fd 07 	sts	0x07FD, r1
    3fb6:	d0 93 ff 07 	sts	0x07FF, r29
    3fba:	c0 93 fe 07 	sts	0x07FE, r28
    3fbe:	ee 20       	and	r14, r14
    3fc0:	b9 f5       	brne	.+110    	; 0x4030 <STEPPER_step+0xf0>
    3fc2:	88 e8       	ldi	r24, 0x88	; 136
    3fc4:	94 e0       	ldi	r25, 0x04	; 4
    3fc6:	90 93 ff 07 	sts	0x07FF, r25
    3fca:	80 93 fe 07 	sts	0x07FE, r24
    3fce:	81 2f       	mov	r24, r17
    3fd0:	b4 01       	movw	r22, r8
    3fd2:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <STEPPER_set_speed>
    3fd6:	81 2f       	mov	r24, r17
    3fd8:	0e 94 1e 28 	call	0x503c	; 0x503c <STEPPER_go>
    3fdc:	11 30       	cpi	r17, 0x01	; 1
    3fde:	71 f0       	breq	.+28     	; 0x3ffc <STEPPER_step+0xbc>
    3fe0:	11 30       	cpi	r17, 0x01	; 1
    3fe2:	18 f0       	brcs	.+6      	; 0x3fea <STEPPER_step+0xaa>
    3fe4:	12 30       	cpi	r17, 0x02	; 2
    3fe6:	59 f5       	brne	.+86     	; 0x403e <STEPPER_step+0xfe>
    3fe8:	12 c0       	rjmp	.+36     	; 0x400e <STEPPER_step+0xce>
    3fea:	10 92 88 04 	sts	0x0488, r1
    3fee:	10 92 fc 07 	sts	0x07FC, r1
    3ff2:	80 91 88 04 	lds	r24, 0x0488
    3ff6:	88 23       	and	r24, r24
    3ff8:	e1 f3       	breq	.-8      	; 0x3ff2 <STEPPER_step+0xb2>
    3ffa:	21 c0       	rjmp	.+66     	; 0x403e <STEPPER_step+0xfe>
    3ffc:	10 92 89 04 	sts	0x0489, r1
    4000:	10 92 fd 07 	sts	0x07FD, r1
    4004:	80 91 89 04 	lds	r24, 0x0489
    4008:	88 23       	and	r24, r24
    400a:	e1 f3       	breq	.-8      	; 0x4004 <STEPPER_step+0xc4>
    400c:	18 c0       	rjmp	.+48     	; 0x403e <STEPPER_step+0xfe>
    400e:	10 92 88 04 	sts	0x0488, r1
    4012:	10 92 89 04 	sts	0x0489, r1
    4016:	10 92 fc 07 	sts	0x07FC, r1
    401a:	10 92 fd 07 	sts	0x07FD, r1
    401e:	80 91 88 04 	lds	r24, 0x0488
    4022:	88 23       	and	r24, r24
    4024:	e1 f3       	breq	.-8      	; 0x401e <STEPPER_step+0xde>
    4026:	80 91 89 04 	lds	r24, 0x0489
    402a:	88 23       	and	r24, r24
    402c:	c1 f3       	breq	.-16     	; 0x401e <STEPPER_step+0xde>
    402e:	07 c0       	rjmp	.+14     	; 0x403e <STEPPER_step+0xfe>
    4030:	81 2f       	mov	r24, r17
    4032:	b4 01       	movw	r22, r8
    4034:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <STEPPER_set_speed>
    4038:	81 2f       	mov	r24, r17
    403a:	0e 94 1e 28 	call	0x503c	; 0x503c <STEPPER_go>
    403e:	df 91       	pop	r29
    4040:	cf 91       	pop	r28
    4042:	1f 91       	pop	r17
    4044:	0f 91       	pop	r16
    4046:	ff 90       	pop	r15
    4048:	ef 90       	pop	r14
    404a:	df 90       	pop	r13
    404c:	cf 90       	pop	r12
    404e:	bf 90       	pop	r11
    4050:	af 90       	pop	r10
    4052:	9f 90       	pop	r9
    4054:	8f 90       	pop	r8
    4056:	08 95       	ret

00004058 <STEPPER_stop>:
    4058:	0f 93       	push	r16
    405a:	1f 93       	push	r17
    405c:	18 2f       	mov	r17, r24
    405e:	06 2f       	mov	r16, r22
    4060:	66 23       	and	r22, r22
    4062:	49 f4       	brne	.+18     	; 0x4076 <STEPPER_stop+0x1e>
    4064:	60 e0       	ldi	r22, 0x00	; 0
    4066:	70 e0       	ldi	r23, 0x00	; 0
    4068:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <STEPPER_set_speed>
    406c:	81 2f       	mov	r24, r17
    406e:	60 e0       	ldi	r22, 0x00	; 0
    4070:	70 e0       	ldi	r23, 0x00	; 0
    4072:	0e 94 85 1f 	call	0x3f0a	; 0x3f0a <STEPPER_set_steps>
    4076:	81 e0       	ldi	r24, 0x01	; 1
    4078:	80 93 00 08 	sts	0x0800, r24
    407c:	11 30       	cpi	r17, 0x01	; 1
    407e:	51 f0       	breq	.+20     	; 0x4094 <STEPPER_stop+0x3c>
    4080:	11 30       	cpi	r17, 0x01	; 1
    4082:	18 f0       	brcs	.+6      	; 0x408a <STEPPER_stop+0x32>
    4084:	12 30       	cpi	r17, 0x02	; 2
    4086:	41 f4       	brne	.+16     	; 0x4098 <STEPPER_stop+0x40>
    4088:	03 c0       	rjmp	.+6      	; 0x4090 <STEPPER_stop+0x38>
    408a:	00 93 e8 07 	sts	0x07E8, r16
    408e:	04 c0       	rjmp	.+8      	; 0x4098 <STEPPER_stop+0x40>
    4090:	00 93 e8 07 	sts	0x07E8, r16
    4094:	00 93 e9 07 	sts	0x07E9, r16
    4098:	10 92 00 08 	sts	0x0800, r1
    409c:	1f 91       	pop	r17
    409e:	0f 91       	pop	r16
    40a0:	08 95       	ret

000040a2 <STEPPER_wait_and_then>:
    40a2:	cf 92       	push	r12
    40a4:	df 92       	push	r13
    40a6:	ef 92       	push	r14
    40a8:	ff 92       	push	r15
    40aa:	0f 93       	push	r16
    40ac:	1f 93       	push	r17
    40ae:	df 93       	push	r29
    40b0:	cf 93       	push	r28
    40b2:	cd b7       	in	r28, 0x3d	; 61
    40b4:	de b7       	in	r29, 0x3e	; 62
    40b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    40b8:	81 30       	cpi	r24, 0x01	; 1
    40ba:	61 f0       	breq	.+24     	; 0x40d4 <STEPPER_wait_and_then+0x32>
    40bc:	81 30       	cpi	r24, 0x01	; 1
    40be:	18 f0       	brcs	.+6      	; 0x40c6 <STEPPER_wait_and_then+0x24>
    40c0:	82 30       	cpi	r24, 0x02	; 2
    40c2:	a1 f5       	brne	.+104    	; 0x412c <STEPPER_wait_and_then+0x8a>
    40c4:	11 c0       	rjmp	.+34     	; 0x40e8 <STEPPER_wait_and_then+0x46>
    40c6:	ec 85       	ldd	r30, Y+12	; 0x0c
    40c8:	fd 85       	ldd	r31, Y+13	; 0x0d
    40ca:	80 91 01 08 	lds	r24, 0x0801
    40ce:	88 23       	and	r24, r24
    40d0:	e1 f3       	breq	.-8      	; 0x40ca <STEPPER_wait_and_then+0x28>
    40d2:	06 c0       	rjmp	.+12     	; 0x40e0 <STEPPER_wait_and_then+0x3e>
    40d4:	ec 85       	ldd	r30, Y+12	; 0x0c
    40d6:	fd 85       	ldd	r31, Y+13	; 0x0d
    40d8:	80 91 02 08 	lds	r24, 0x0802
    40dc:	88 23       	and	r24, r24
    40de:	e1 f3       	breq	.-8      	; 0x40d8 <STEPPER_wait_and_then+0x36>
    40e0:	30 97       	sbiw	r30, 0x00	; 0
    40e2:	21 f1       	breq	.+72     	; 0x412c <STEPPER_wait_and_then+0x8a>
    40e4:	09 95       	icall
    40e6:	22 c0       	rjmp	.+68     	; 0x412c <STEPPER_wait_and_then+0x8a>
    40e8:	cc 84       	ldd	r12, Y+12	; 0x0c
    40ea:	dd 84       	ldd	r13, Y+13	; 0x0d
    40ec:	ee 84       	ldd	r14, Y+14	; 0x0e
    40ee:	ff 84       	ldd	r15, Y+15	; 0x0f
    40f0:	00 e0       	ldi	r16, 0x00	; 0
    40f2:	10 e0       	ldi	r17, 0x00	; 0
    40f4:	00 23       	and	r16, r16
    40f6:	51 f4       	brne	.+20     	; 0x410c <STEPPER_wait_and_then+0x6a>
    40f8:	80 91 01 08 	lds	r24, 0x0801
    40fc:	88 23       	and	r24, r24
    40fe:	31 f0       	breq	.+12     	; 0x410c <STEPPER_wait_and_then+0x6a>
    4100:	c1 14       	cp	r12, r1
    4102:	d1 04       	cpc	r13, r1
    4104:	11 f0       	breq	.+4      	; 0x410a <STEPPER_wait_and_then+0x68>
    4106:	f6 01       	movw	r30, r12
    4108:	09 95       	icall
    410a:	01 e0       	ldi	r16, 0x01	; 1
    410c:	11 23       	and	r17, r17
    410e:	51 f4       	brne	.+20     	; 0x4124 <STEPPER_wait_and_then+0x82>
    4110:	80 91 02 08 	lds	r24, 0x0802
    4114:	88 23       	and	r24, r24
    4116:	31 f0       	breq	.+12     	; 0x4124 <STEPPER_wait_and_then+0x82>
    4118:	e1 14       	cp	r14, r1
    411a:	f1 04       	cpc	r15, r1
    411c:	11 f0       	breq	.+4      	; 0x4122 <STEPPER_wait_and_then+0x80>
    411e:	f7 01       	movw	r30, r14
    4120:	09 95       	icall
    4122:	11 e0       	ldi	r17, 0x01	; 1
    4124:	00 23       	and	r16, r16
    4126:	31 f3       	breq	.-52     	; 0x40f4 <STEPPER_wait_and_then+0x52>
    4128:	11 23       	and	r17, r17
    412a:	21 f3       	breq	.-56     	; 0x40f4 <STEPPER_wait_and_then+0x52>
    412c:	cf 91       	pop	r28
    412e:	df 91       	pop	r29
    4130:	1f 91       	pop	r17
    4132:	0f 91       	pop	r16
    4134:	ff 90       	pop	r15
    4136:	ef 90       	pop	r14
    4138:	df 90       	pop	r13
    413a:	cf 90       	pop	r12
    413c:	08 95       	ret

0000413e <SYS_get_state>:
    413e:	e8 2f       	mov	r30, r24
    4140:	f0 e0       	ldi	r31, 0x00	; 0
    4142:	e3 31       	cpi	r30, 0x13	; 19
    4144:	f1 05       	cpc	r31, r1
    4146:	40 f4       	brcc	.+16     	; 0x4158 <SYS_get_state+0x1a>
    4148:	e2 5c       	subi	r30, 0xC2	; 194
    414a:	ff 4f       	sbci	r31, 0xFF	; 255
    414c:	ee 0f       	add	r30, r30
    414e:	ff 1f       	adc	r31, r31
    4150:	05 90       	lpm	r0, Z+
    4152:	f4 91       	lpm	r31, Z+
    4154:	e0 2d       	mov	r30, r0
    4156:	09 94       	ijmp
    4158:	80 e0       	ldi	r24, 0x00	; 0
    415a:	08 95       	ret
    415c:	80 91 03 08 	lds	r24, 0x0803
    4160:	08 95       	ret
    4162:	80 91 04 08 	lds	r24, 0x0804
    4166:	08 95       	ret
    4168:	80 91 05 08 	lds	r24, 0x0805
    416c:	08 95       	ret
    416e:	80 91 06 08 	lds	r24, 0x0806
    4172:	08 95       	ret
    4174:	80 91 07 08 	lds	r24, 0x0807
    4178:	08 95       	ret
    417a:	80 91 09 08 	lds	r24, 0x0809
    417e:	08 95       	ret
    4180:	80 91 08 08 	lds	r24, 0x0808
    4184:	08 95       	ret
    4186:	80 91 0a 08 	lds	r24, 0x080A
    418a:	08 95       	ret
    418c:	80 91 0b 08 	lds	r24, 0x080B
    4190:	08 95       	ret
    4192:	80 91 0c 08 	lds	r24, 0x080C
    4196:	08 95       	ret
    4198:	80 91 0d 08 	lds	r24, 0x080D
    419c:	08 95       	ret
    419e:	80 91 0e 08 	lds	r24, 0x080E
    41a2:	08 95       	ret
    41a4:	80 91 0f 08 	lds	r24, 0x080F
    41a8:	08 95       	ret
    41aa:	80 91 10 08 	lds	r24, 0x0810
    41ae:	08 95       	ret
    41b0:	80 91 11 08 	lds	r24, 0x0811
    41b4:	08 95       	ret
    41b6:	80 91 12 08 	lds	r24, 0x0812
    41ba:	08 95       	ret
    41bc:	80 91 13 08 	lds	r24, 0x0813
    41c0:	08 95       	ret
    41c2:	80 91 14 08 	lds	r24, 0x0814
    41c6:	08 95       	ret
    41c8:	80 91 15 08 	lds	r24, 0x0815
    41cc:	08 95       	ret

000041ce <SYS_set_state>:
    41ce:	e8 2f       	mov	r30, r24
    41d0:	f0 e0       	ldi	r31, 0x00	; 0
    41d2:	e3 31       	cpi	r30, 0x13	; 19
    41d4:	f1 05       	cpc	r31, r1
    41d6:	08 f0       	brcs	.+2      	; 0x41da <SYS_set_state+0xc>
    41d8:	40 c0       	rjmp	.+128    	; 0x425a <SYS_set_state+0x8c>
    41da:	ef 5a       	subi	r30, 0xAF	; 175
    41dc:	ff 4f       	sbci	r31, 0xFF	; 255
    41de:	ee 0f       	add	r30, r30
    41e0:	ff 1f       	adc	r31, r31
    41e2:	05 90       	lpm	r0, Z+
    41e4:	f4 91       	lpm	r31, Z+
    41e6:	e0 2d       	mov	r30, r0
    41e8:	09 94       	ijmp
    41ea:	60 93 03 08 	sts	0x0803, r22
    41ee:	08 95       	ret
    41f0:	60 93 04 08 	sts	0x0804, r22
    41f4:	08 95       	ret
    41f6:	60 93 05 08 	sts	0x0805, r22
    41fa:	08 95       	ret
    41fc:	60 93 06 08 	sts	0x0806, r22
    4200:	08 95       	ret
    4202:	60 93 07 08 	sts	0x0807, r22
    4206:	08 95       	ret
    4208:	60 93 09 08 	sts	0x0809, r22
    420c:	08 95       	ret
    420e:	60 93 08 08 	sts	0x0808, r22
    4212:	08 95       	ret
    4214:	60 93 0a 08 	sts	0x080A, r22
    4218:	08 95       	ret
    421a:	60 93 0b 08 	sts	0x080B, r22
    421e:	08 95       	ret
    4220:	60 93 0c 08 	sts	0x080C, r22
    4224:	08 95       	ret
    4226:	60 93 0d 08 	sts	0x080D, r22
    422a:	08 95       	ret
    422c:	60 93 0e 08 	sts	0x080E, r22
    4230:	08 95       	ret
    4232:	60 93 0f 08 	sts	0x080F, r22
    4236:	08 95       	ret
    4238:	60 93 10 08 	sts	0x0810, r22
    423c:	08 95       	ret
    423e:	60 93 11 08 	sts	0x0811, r22
    4242:	08 95       	ret
    4244:	60 93 12 08 	sts	0x0812, r22
    4248:	08 95       	ret
    424a:	60 93 13 08 	sts	0x0813, r22
    424e:	08 95       	ret
    4250:	60 93 14 08 	sts	0x0814, r22
    4254:	08 95       	ret
    4256:	60 93 13 08 	sts	0x0813, r22
    425a:	08 95       	ret

0000425c <ATTINY_get_sensors>:
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	81 e0       	ldi	r24, 0x01	; 1
    4262:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    4266:	81 30       	cpi	r24, 0x01	; 1
    4268:	11 f0       	breq	.+4      	; 0x426e <ATTINY_get_sensors+0x12>
    426a:	00 e0       	ldi	r16, 0x00	; 0
    426c:	24 c0       	rjmp	.+72     	; 0x42b6 <ATTINY_get_sensors+0x5a>
    426e:	87 e0       	ldi	r24, 0x07	; 7
    4270:	0e 94 3c 1c 	call	0x3878	; 0x3878 <SPI_set_slave_addr>
    4274:	82 e0       	ldi	r24, 0x02	; 2
    4276:	6a e0       	ldi	r22, 0x0A	; 10
    4278:	0e 94 8d 1c 	call	0x391a	; 0x391a <SPI_transmit>
    427c:	82 e0       	ldi	r24, 0x02	; 2
    427e:	62 eb       	ldi	r22, 0xB2	; 178
    4280:	0e 94 8d 1c 	call	0x391a	; 0x391a <SPI_transmit>
    4284:	18 ec       	ldi	r17, 0xC8	; 200
    4286:	81 2f       	mov	r24, r17
    4288:	8a 95       	dec	r24
    428a:	f1 f7       	brne	.-4      	; 0x4288 <ATTINY_get_sensors+0x2c>
    428c:	82 e0       	ldi	r24, 0x02	; 2
    428e:	60 e0       	ldi	r22, 0x00	; 0
    4290:	0e 94 09 27 	call	0x4e12	; 0x4e12 <SPI_receive>
    4294:	08 2f       	mov	r16, r24
    4296:	81 2f       	mov	r24, r17
    4298:	8a 95       	dec	r24
    429a:	f1 f7       	brne	.-4      	; 0x4298 <ATTINY_get_sensors+0x3c>
    429c:	82 e0       	ldi	r24, 0x02	; 2
    429e:	60 e0       	ldi	r22, 0x00	; 0
    42a0:	0e 94 09 27 	call	0x4e12	; 0x4e12 <SPI_receive>
    42a4:	1a 95       	dec	r17
    42a6:	f1 f7       	brne	.-4      	; 0x42a4 <ATTINY_get_sensors+0x48>
    42a8:	87 e0       	ldi	r24, 0x07	; 7
    42aa:	0e 94 3c 1c 	call	0x3878	; 0x3878 <SPI_set_slave_addr>
    42ae:	88 e8       	ldi	r24, 0x88	; 136
    42b0:	93 e1       	ldi	r25, 0x13	; 19
    42b2:	01 97       	sbiw	r24, 0x01	; 1
    42b4:	f1 f7       	brne	.-4      	; 0x42b2 <ATTINY_get_sensors+0x56>
    42b6:	80 2f       	mov	r24, r16
    42b8:	1f 91       	pop	r17
    42ba:	0f 91       	pop	r16
    42bc:	08 95       	ret

000042be <ATTINY_get_SW_state>:
    42be:	1f 93       	push	r17
    42c0:	cf 93       	push	r28
    42c2:	df 93       	push	r29
    42c4:	18 2f       	mov	r17, r24
    42c6:	80 91 8b 04 	lds	r24, 0x048B
    42ca:	88 23       	and	r24, r24
    42cc:	41 f0       	breq	.+16     	; 0x42de <ATTINY_get_SW_state+0x20>
    42ce:	80 91 95 04 	lds	r24, 0x0495
    42d2:	88 23       	and	r24, r24
    42d4:	99 f0       	breq	.+38     	; 0x42fc <ATTINY_get_SW_state+0x3e>
    42d6:	10 92 8b 04 	sts	0x048B, r1
    42da:	10 92 95 04 	sts	0x0495, r1
    42de:	0e 94 2e 21 	call	0x425c	; 0x425c <ATTINY_get_sensors>
    42e2:	80 93 8a 04 	sts	0x048A, r24
    42e6:	8f e8       	ldi	r24, 0x8F	; 143
    42e8:	94 e0       	ldi	r25, 0x04	; 4
    42ea:	61 e0       	ldi	r22, 0x01	; 1
    42ec:	40 e0       	ldi	r20, 0x00	; 0
    42ee:	22 e3       	ldi	r18, 0x32	; 50
    42f0:	30 e0       	ldi	r19, 0x00	; 0
    42f2:	0e 94 1d 22 	call	0x443a	; 0x443a <TMRSRVC_new>
    42f6:	81 e0       	ldi	r24, 0x01	; 1
    42f8:	80 93 8b 04 	sts	0x048B, r24
    42fc:	90 91 8a 04 	lds	r25, 0x048A
    4300:	a1 2f       	mov	r26, r17
    4302:	b0 e0       	ldi	r27, 0x00	; 0
    4304:	ed 01       	movw	r28, r26
    4306:	ce 5c       	subi	r28, 0xCE	; 206
    4308:	db 4f       	sbci	r29, 0xFB	; 251
    430a:	88 81       	ld	r24, Y
    430c:	88 23       	and	r24, r24
    430e:	69 f0       	breq	.+26     	; 0x432a <ATTINY_get_SW_state+0x6c>
    4310:	fd 01       	movw	r30, r26
    4312:	eb 5c       	subi	r30, 0xCB	; 203
    4314:	fb 4f       	sbci	r31, 0xFB	; 251
    4316:	80 81       	ld	r24, Z
    4318:	98 23       	and	r25, r24
    431a:	c1 f0       	breq	.+48     	; 0x434c <ATTINY_get_SW_state+0x8e>
    431c:	fd 01       	movw	r30, r26
    431e:	e4 57       	subi	r30, 0x74	; 116
    4320:	fb 4f       	sbci	r31, 0xFB	; 251
    4322:	81 e0       	ldi	r24, 0x01	; 1
    4324:	80 83       	st	Z, r24
    4326:	18 82       	st	Y, r1
    4328:	11 c0       	rjmp	.+34     	; 0x434c <ATTINY_get_SW_state+0x8e>
    432a:	fd 01       	movw	r30, r26
    432c:	e4 57       	subi	r30, 0x74	; 116
    432e:	fb 4f       	sbci	r31, 0xFB	; 251
    4330:	80 81       	ld	r24, Z
    4332:	81 11       	cpse	r24, r1
    4334:	10 82       	st	Z, r1
    4336:	fd 01       	movw	r30, r26
    4338:	eb 5c       	subi	r30, 0xCB	; 203
    433a:	fb 4f       	sbci	r31, 0xFB	; 251
    433c:	80 81       	ld	r24, Z
    433e:	98 23       	and	r25, r24
    4340:	29 f4       	brne	.+10     	; 0x434c <ATTINY_get_SW_state+0x8e>
    4342:	fd 01       	movw	r30, r26
    4344:	ee 5c       	subi	r30, 0xCE	; 206
    4346:	fb 4f       	sbci	r31, 0xFB	; 251
    4348:	81 e0       	ldi	r24, 0x01	; 1
    434a:	80 83       	st	Z, r24
    434c:	a4 57       	subi	r26, 0x74	; 116
    434e:	bb 4f       	sbci	r27, 0xFB	; 251
    4350:	8c 91       	ld	r24, X
    4352:	df 91       	pop	r29
    4354:	cf 91       	pop	r28
    4356:	1f 91       	pop	r17
    4358:	08 95       	ret

0000435a <ATTINY_open>:
    435a:	82 e0       	ldi	r24, 0x02	; 2
    435c:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    4360:	88 23       	and	r24, r24
    4362:	19 f4       	brne	.+6      	; 0x436a <ATTINY_open+0x10>
    4364:	90 e0       	ldi	r25, 0x00	; 0
    4366:	82 e0       	ldi	r24, 0x02	; 2
    4368:	08 95       	ret
    436a:	10 92 31 08 	sts	0x0831, r1
    436e:	10 92 30 08 	sts	0x0830, r1
    4372:	10 92 33 08 	sts	0x0833, r1
    4376:	10 92 32 08 	sts	0x0832, r1
    437a:	10 92 35 08 	sts	0x0835, r1
    437e:	10 92 34 08 	sts	0x0834, r1
    4382:	10 92 37 08 	sts	0x0837, r1
    4386:	10 92 36 08 	sts	0x0836, r1
    438a:	10 92 39 08 	sts	0x0839, r1
    438e:	10 92 38 08 	sts	0x0838, r1
    4392:	80 e9       	ldi	r24, 0x90	; 144
    4394:	91 e0       	ldi	r25, 0x01	; 1
    4396:	90 93 1d 08 	sts	0x081D, r25
    439a:	80 93 1c 08 	sts	0x081C, r24
    439e:	90 93 1f 08 	sts	0x081F, r25
    43a2:	80 93 1e 08 	sts	0x081E, r24
    43a6:	90 93 21 08 	sts	0x0821, r25
    43aa:	80 93 20 08 	sts	0x0820, r24
    43ae:	90 93 23 08 	sts	0x0823, r25
    43b2:	80 93 22 08 	sts	0x0822, r24
    43b6:	90 93 25 08 	sts	0x0825, r25
    43ba:	80 93 24 08 	sts	0x0824, r24
    43be:	84 e3       	ldi	r24, 0x34	; 52
    43c0:	98 e0       	ldi	r25, 0x08	; 8
    43c2:	90 93 27 08 	sts	0x0827, r25
    43c6:	80 93 26 08 	sts	0x0826, r24
    43ca:	90 93 29 08 	sts	0x0829, r25
    43ce:	80 93 28 08 	sts	0x0828, r24
    43d2:	90 93 2b 08 	sts	0x082B, r25
    43d6:	80 93 2a 08 	sts	0x082A, r24
    43da:	90 93 2d 08 	sts	0x082D, r25
    43de:	80 93 2c 08 	sts	0x082C, r24
    43e2:	90 93 2f 08 	sts	0x082F, r25
    43e6:	80 93 2e 08 	sts	0x082E, r24
    43ea:	81 e0       	ldi	r24, 0x01	; 1
    43ec:	61 e0       	ldi	r22, 0x01	; 1
    43ee:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    43f2:	91 e0       	ldi	r25, 0x01	; 1
    43f4:	81 e0       	ldi	r24, 0x01	; 1
    43f6:	08 95       	ret

000043f8 <TMRSRVC_delay>:
    43f8:	df 93       	push	r29
    43fa:	cf 93       	push	r28
    43fc:	cd b7       	in	r28, 0x3d	; 61
    43fe:	de b7       	in	r29, 0x3e	; 62
    4400:	29 97       	sbiw	r28, 0x09	; 9
    4402:	0f b6       	in	r0, 0x3f	; 63
    4404:	f8 94       	cli
    4406:	de bf       	out	0x3e, r29	; 62
    4408:	0f be       	out	0x3f, r0	; 63
    440a:	cd bf       	out	0x3d, r28	; 61
    440c:	9c 01       	movw	r18, r24
    440e:	ce 01       	movw	r24, r28
    4410:	01 96       	adiw	r24, 0x01	; 1
    4412:	61 e0       	ldi	r22, 0x01	; 1
    4414:	40 e0       	ldi	r20, 0x00	; 0
    4416:	0e 94 1d 22 	call	0x443a	; 0x443a <TMRSRVC_new>
    441a:	98 2f       	mov	r25, r24
    441c:	88 23       	and	r24, r24
    441e:	19 f4       	brne	.+6      	; 0x4426 <TMRSRVC_delay+0x2e>
    4420:	8f 81       	ldd	r24, Y+7	; 0x07
    4422:	88 23       	and	r24, r24
    4424:	e9 f3       	breq	.-6      	; 0x4420 <TMRSRVC_delay+0x28>
    4426:	89 2f       	mov	r24, r25
    4428:	29 96       	adiw	r28, 0x09	; 9
    442a:	0f b6       	in	r0, 0x3f	; 63
    442c:	f8 94       	cli
    442e:	de bf       	out	0x3e, r29	; 62
    4430:	0f be       	out	0x3f, r0	; 63
    4432:	cd bf       	out	0x3d, r28	; 61
    4434:	cf 91       	pop	r28
    4436:	df 91       	pop	r29
    4438:	08 95       	ret

0000443a <TMRSRVC_new>:
    443a:	ef 92       	push	r14
    443c:	ff 92       	push	r15
    443e:	0f 93       	push	r16
    4440:	1f 93       	push	r17
    4442:	cf 93       	push	r28
    4444:	df 93       	push	r29
    4446:	ec 01       	movw	r28, r24
    4448:	f6 2e       	mov	r15, r22
    444a:	e4 2e       	mov	r14, r20
    444c:	89 01       	movw	r16, r18
    444e:	88 e0       	ldi	r24, 0x08	; 8
    4450:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    4454:	81 30       	cpi	r24, 0x01	; 1
    4456:	11 f0       	breq	.+4      	; 0x445c <TMRSRVC_new+0x22>
    4458:	81 e0       	ldi	r24, 0x01	; 1
    445a:	26 c0       	rjmp	.+76     	; 0x44a8 <TMRSRVC_new+0x6e>
    445c:	84 e0       	ldi	r24, 0x04	; 4
    445e:	90 e0       	ldi	r25, 0x00	; 0
    4460:	0e 94 99 35 	call	0x6b32	; 0x6b32 <malloc>
    4464:	fc 01       	movw	r30, r24
    4466:	00 97       	sbiw	r24, 0x00	; 0
    4468:	11 f4       	brne	.+4      	; 0x446e <TMRSRVC_new+0x34>
    446a:	82 e0       	ldi	r24, 0x02	; 2
    446c:	1d c0       	rjmp	.+58     	; 0x44a8 <TMRSRVC_new+0x6e>
    446e:	f9 82       	std	Y+1, r15	; 0x01
    4470:	f0 fc       	sbrc	r15, 0
    4472:	1e 82       	std	Y+6, r1	; 0x06
    4474:	81 e0       	ldi	r24, 0x01	; 1
    4476:	e8 16       	cp	r14, r24
    4478:	19 f4       	brne	.+6      	; 0x4480 <TMRSRVC_new+0x46>
    447a:	89 81       	ldd	r24, Y+1	; 0x01
    447c:	84 60       	ori	r24, 0x04	; 4
    447e:	89 83       	std	Y+1, r24	; 0x01
    4480:	89 81       	ldd	r24, Y+1	; 0x01
    4482:	88 60       	ori	r24, 0x08	; 8
    4484:	89 83       	std	Y+1, r24	; 0x01
    4486:	1b 83       	std	Y+3, r17	; 0x03
    4488:	0a 83       	std	Y+2, r16	; 0x02
    448a:	1d 83       	std	Y+5, r17	; 0x05
    448c:	0c 83       	std	Y+4, r16	; 0x04
    448e:	d1 83       	std	Z+1, r29	; 0x01
    4490:	c0 83       	st	Z, r28
    4492:	13 82       	std	Z+3, r1	; 0x03
    4494:	12 82       	std	Z+2, r1	; 0x02
    4496:	81 e0       	ldi	r24, 0x01	; 1
    4498:	80 93 f8 04 	sts	0x04F8, r24
    449c:	cf 01       	movw	r24, r30
    449e:	0e 94 b2 28 	call	0x5164	; 0x5164 <TMRSRVC_insert>
    44a2:	10 92 f8 04 	sts	0x04F8, r1
    44a6:	80 e0       	ldi	r24, 0x00	; 0
    44a8:	df 91       	pop	r29
    44aa:	cf 91       	pop	r28
    44ac:	1f 91       	pop	r17
    44ae:	0f 91       	pop	r16
    44b0:	ff 90       	pop	r15
    44b2:	ef 90       	pop	r14
    44b4:	08 95       	ret

000044b6 <I2C_MSTR_get>:
    44b6:	fc 01       	movw	r30, r24
    44b8:	80 91 3d 08 	lds	r24, 0x083D
    44bc:	81 30       	cpi	r24, 0x01	; 1
    44be:	11 f0       	breq	.+4      	; 0x44c4 <I2C_MSTR_get+0xe>
    44c0:	85 e0       	ldi	r24, 0x05	; 5
    44c2:	08 95       	ret
    44c4:	80 91 3e 08 	lds	r24, 0x083E
    44c8:	81 30       	cpi	r24, 0x01	; 1
    44ca:	11 f0       	breq	.+4      	; 0x44d0 <I2C_MSTR_get+0x1a>
    44cc:	8a e0       	ldi	r24, 0x0A	; 10
    44ce:	08 95       	ret
    44d0:	61 30       	cpi	r22, 0x01	; 1
    44d2:	11 f4       	brne	.+4      	; 0x44d8 <I2C_MSTR_get+0x22>
    44d4:	84 ec       	ldi	r24, 0xC4	; 196
    44d6:	01 c0       	rjmp	.+2      	; 0x44da <I2C_MSTR_get+0x24>
    44d8:	84 e8       	ldi	r24, 0x84	; 132
    44da:	80 93 bc 00 	sts	0x00BC, r24
    44de:	80 91 bc 00 	lds	r24, 0x00BC
    44e2:	87 ff       	sbrs	r24, 7
    44e4:	fc cf       	rjmp	.-8      	; 0x44de <I2C_MSTR_get+0x28>
    44e6:	61 30       	cpi	r22, 0x01	; 1
    44e8:	31 f4       	brne	.+12     	; 0x44f6 <I2C_MSTR_get+0x40>
    44ea:	80 91 b9 00 	lds	r24, 0x00B9
    44ee:	88 7f       	andi	r24, 0xF8	; 248
    44f0:	80 35       	cpi	r24, 0x50	; 80
    44f2:	59 f4       	brne	.+22     	; 0x450a <I2C_MSTR_get+0x54>
    44f4:	05 c0       	rjmp	.+10     	; 0x4500 <I2C_MSTR_get+0x4a>
    44f6:	80 91 b9 00 	lds	r24, 0x00B9
    44fa:	88 7f       	andi	r24, 0xF8	; 248
    44fc:	88 35       	cpi	r24, 0x58	; 88
    44fe:	29 f4       	brne	.+10     	; 0x450a <I2C_MSTR_get+0x54>
    4500:	80 91 bb 00 	lds	r24, 0x00BB
    4504:	80 83       	st	Z, r24
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	08 95       	ret
    450a:	82 e0       	ldi	r24, 0x02	; 2
    450c:	08 95       	ret

0000450e <I2C_MSTR_send>:
    450e:	98 2f       	mov	r25, r24
    4510:	80 91 3d 08 	lds	r24, 0x083D
    4514:	81 30       	cpi	r24, 0x01	; 1
    4516:	11 f0       	breq	.+4      	; 0x451c <I2C_MSTR_send+0xe>
    4518:	85 e0       	ldi	r24, 0x05	; 5
    451a:	08 95       	ret
    451c:	80 91 3e 08 	lds	r24, 0x083E
    4520:	81 30       	cpi	r24, 0x01	; 1
    4522:	11 f0       	breq	.+4      	; 0x4528 <I2C_MSTR_send+0x1a>
    4524:	8a e0       	ldi	r24, 0x0A	; 10
    4526:	08 95       	ret
    4528:	90 93 bb 00 	sts	0x00BB, r25
    452c:	84 e8       	ldi	r24, 0x84	; 132
    452e:	80 93 bc 00 	sts	0x00BC, r24
    4532:	80 91 bc 00 	lds	r24, 0x00BC
    4536:	87 ff       	sbrs	r24, 7
    4538:	fc cf       	rjmp	.-8      	; 0x4532 <I2C_MSTR_send+0x24>
    453a:	80 91 b9 00 	lds	r24, 0x00B9
    453e:	90 e0       	ldi	r25, 0x00	; 0
    4540:	88 7f       	andi	r24, 0xF8	; 248
    4542:	90 70       	andi	r25, 0x00	; 0
    4544:	88 32       	cpi	r24, 0x28	; 40
    4546:	91 05       	cpc	r25, r1
    4548:	21 f0       	breq	.+8      	; 0x4552 <I2C_MSTR_send+0x44>
    454a:	c0 97       	sbiw	r24, 0x30	; 48
    454c:	21 f4       	brne	.+8      	; 0x4556 <I2C_MSTR_send+0x48>
    454e:	83 e0       	ldi	r24, 0x03	; 3
    4550:	08 95       	ret
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	08 95       	ret
    4556:	8c e0       	ldi	r24, 0x0C	; 12
    4558:	08 95       	ret

0000455a <I2C_MSTR_start>:
    455a:	98 2f       	mov	r25, r24
    455c:	20 91 3d 08 	lds	r18, 0x083D
    4560:	21 30       	cpi	r18, 0x01	; 1
    4562:	11 f0       	breq	.+4      	; 0x4568 <I2C_MSTR_start+0xe>
    4564:	85 e0       	ldi	r24, 0x05	; 5
    4566:	08 95       	ret
    4568:	80 91 3f 08 	lds	r24, 0x083F
    456c:	81 30       	cpi	r24, 0x01	; 1
    456e:	11 f4       	brne	.+4      	; 0x4574 <I2C_MSTR_start+0x1a>
    4570:	89 e0       	ldi	r24, 0x09	; 9
    4572:	08 95       	ret
    4574:	20 93 3e 08 	sts	0x083E, r18
    4578:	84 ea       	ldi	r24, 0xA4	; 164
    457a:	80 93 bc 00 	sts	0x00BC, r24
    457e:	80 91 bc 00 	lds	r24, 0x00BC
    4582:	87 ff       	sbrs	r24, 7
    4584:	fc cf       	rjmp	.-8      	; 0x457e <I2C_MSTR_start+0x24>
    4586:	80 91 b9 00 	lds	r24, 0x00B9
    458a:	88 7f       	andi	r24, 0xF8	; 248
    458c:	88 30       	cpi	r24, 0x08	; 8
    458e:	39 f0       	breq	.+14     	; 0x459e <I2C_MSTR_start+0x44>
    4590:	80 91 b9 00 	lds	r24, 0x00B9
    4594:	88 7f       	andi	r24, 0xF8	; 248
    4596:	80 31       	cpi	r24, 0x10	; 16
    4598:	11 f0       	breq	.+4      	; 0x459e <I2C_MSTR_start+0x44>
    459a:	81 e0       	ldi	r24, 0x01	; 1
    459c:	08 95       	ret
    459e:	61 30       	cpi	r22, 0x01	; 1
    45a0:	19 f4       	brne	.+6      	; 0x45a8 <I2C_MSTR_start+0x4e>
    45a2:	99 0f       	add	r25, r25
    45a4:	91 60       	ori	r25, 0x01	; 1
    45a6:	03 c0       	rjmp	.+6      	; 0x45ae <I2C_MSTR_start+0x54>
    45a8:	66 23       	and	r22, r22
    45aa:	19 f4       	brne	.+6      	; 0x45b2 <I2C_MSTR_start+0x58>
    45ac:	99 0f       	add	r25, r25
    45ae:	90 93 bb 00 	sts	0x00BB, r25
    45b2:	84 e8       	ldi	r24, 0x84	; 132
    45b4:	80 93 bc 00 	sts	0x00BC, r24
    45b8:	80 91 bc 00 	lds	r24, 0x00BC
    45bc:	87 ff       	sbrs	r24, 7
    45be:	fc cf       	rjmp	.-8      	; 0x45b8 <I2C_MSTR_start+0x5e>
    45c0:	61 30       	cpi	r22, 0x01	; 1
    45c2:	31 f4       	brne	.+12     	; 0x45d0 <I2C_MSTR_start+0x76>
    45c4:	80 91 b9 00 	lds	r24, 0x00B9
    45c8:	88 7f       	andi	r24, 0xF8	; 248
    45ca:	80 34       	cpi	r24, 0x40	; 64
    45cc:	41 f4       	brne	.+16     	; 0x45de <I2C_MSTR_start+0x84>
    45ce:	09 c0       	rjmp	.+18     	; 0x45e2 <I2C_MSTR_start+0x88>
    45d0:	66 23       	and	r22, r22
    45d2:	39 f4       	brne	.+14     	; 0x45e2 <I2C_MSTR_start+0x88>
    45d4:	80 91 b9 00 	lds	r24, 0x00B9
    45d8:	88 7f       	andi	r24, 0xF8	; 248
    45da:	88 31       	cpi	r24, 0x18	; 24
    45dc:	11 f0       	breq	.+4      	; 0x45e2 <I2C_MSTR_start+0x88>
    45de:	82 e0       	ldi	r24, 0x02	; 2
    45e0:	08 95       	ret
    45e2:	80 e0       	ldi	r24, 0x00	; 0
    45e4:	08 95       	ret

000045e6 <I2C_MSTR_stop>:
    45e6:	80 91 3e 08 	lds	r24, 0x083E
    45ea:	81 30       	cpi	r24, 0x01	; 1
    45ec:	11 f0       	breq	.+4      	; 0x45f2 <I2C_MSTR_stop+0xc>
    45ee:	8a e0       	ldi	r24, 0x0A	; 10
    45f0:	08 95       	ret
    45f2:	80 91 40 08 	lds	r24, 0x0840
    45f6:	81 30       	cpi	r24, 0x01	; 1
    45f8:	29 f4       	brne	.+10     	; 0x4604 <I2C_MSTR_stop+0x1e>
    45fa:	85 e9       	ldi	r24, 0x95	; 149
    45fc:	80 93 bc 00 	sts	0x00BC, r24
    4600:	80 e0       	ldi	r24, 0x00	; 0
    4602:	08 95       	ret
    4604:	84 e9       	ldi	r24, 0x94	; 148
    4606:	80 93 bc 00 	sts	0x00BC, r24
    460a:	80 e0       	ldi	r24, 0x00	; 0
    460c:	08 95       	ret

0000460e <I2C_open>:
    460e:	82 e1       	ldi	r24, 0x12	; 18
    4610:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    4614:	88 23       	and	r24, r24
    4616:	b1 f4       	brne	.+44     	; 0x4644 <I2C_open+0x36>
    4618:	10 92 3d 08 	sts	0x083D, r1
    461c:	10 92 3e 08 	sts	0x083E, r1
    4620:	10 92 3f 08 	sts	0x083F, r1
    4624:	10 92 40 08 	sts	0x0840, r1
    4628:	10 92 41 08 	sts	0x0841, r1
    462c:	0e 94 4e 29 	call	0x529c	; 0x529c <__I2C_init>
    4630:	87 e1       	ldi	r24, 0x17	; 23
    4632:	60 e0       	ldi	r22, 0x00	; 0
    4634:	0e 94 25 23 	call	0x464a	; 0x464a <I2C_set_BRG>
    4638:	0e 94 44 29 	call	0x5288	; 0x5288 <I2C_enable>
    463c:	82 e1       	ldi	r24, 0x12	; 18
    463e:	61 e0       	ldi	r22, 0x01	; 1
    4640:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    4644:	82 e1       	ldi	r24, 0x12	; 18
    4646:	90 e0       	ldi	r25, 0x00	; 0
    4648:	08 95       	ret

0000464a <I2C_set_BRG>:
    464a:	63 70       	andi	r22, 0x03	; 3
    464c:	60 93 b9 00 	sts	0x00B9, r22
    4650:	80 93 b8 00 	sts	0x00B8, r24
    4654:	81 e0       	ldi	r24, 0x01	; 1
    4656:	80 93 3d 08 	sts	0x083D, r24
    465a:	08 95       	ret

0000465c <__ADC_init>:
    465c:	8f e1       	ldi	r24, 0x1F	; 31
    465e:	80 93 7c 00 	sts	0x007C, r24
    4662:	ea e7       	ldi	r30, 0x7A	; 122
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	87 e0       	ldi	r24, 0x07	; 7
    4668:	80 83       	st	Z, r24
    466a:	80 81       	ld	r24, Z
    466c:	80 68       	ori	r24, 0x80	; 128
    466e:	80 83       	st	Z, r24
    4670:	08 95       	ret

00004672 <CBOT_init>:
    4672:	0e 94 8f 28 	call	0x511e	; 0x511e <SYS_init>
    4676:	0e 94 6b 26 	call	0x4cd6	; 0x4cd6 <ATMEGA_open>
    467a:	0e 94 9b 25 	call	0x4b36	; 0x4b36 <ISR_open>
    467e:	0e 94 1b 29 	call	0x5236	; 0x5236 <TMRSRVC_open>
    4682:	0e 94 d0 26 	call	0x4da0	; 0x4da0 <SPI_open>
    4686:	0e 94 ad 21 	call	0x435a	; 0x435a <ATTINY_open>
    468a:	78 94       	sei
    468c:	08 95       	ret

0000468e <CBOT_ISR_init>:
    468e:	00 00       	nop
    4690:	08 95       	ret

00004692 <__vector_16>:
    4692:	1f 92       	push	r1
    4694:	0f 92       	push	r0
    4696:	0f b6       	in	r0, 0x3f	; 63
    4698:	0f 92       	push	r0
    469a:	11 24       	eor	r1, r1
    469c:	2f 93       	push	r18
    469e:	3f 93       	push	r19
    46a0:	4f 93       	push	r20
    46a2:	5f 93       	push	r21
    46a4:	6f 93       	push	r22
    46a6:	7f 93       	push	r23
    46a8:	8f 93       	push	r24
    46aa:	9f 93       	push	r25
    46ac:	af 93       	push	r26
    46ae:	bf 93       	push	r27
    46b0:	ef 93       	push	r30
    46b2:	ff 93       	push	r31
    46b4:	e0 91 b8 04 	lds	r30, 0x04B8
    46b8:	f0 91 b9 04 	lds	r31, 0x04B9
    46bc:	30 97       	sbiw	r30, 0x00	; 0
    46be:	09 f0       	breq	.+2      	; 0x46c2 <__vector_16+0x30>
    46c0:	09 95       	icall
    46c2:	ff 91       	pop	r31
    46c4:	ef 91       	pop	r30
    46c6:	bf 91       	pop	r27
    46c8:	af 91       	pop	r26
    46ca:	9f 91       	pop	r25
    46cc:	8f 91       	pop	r24
    46ce:	7f 91       	pop	r23
    46d0:	6f 91       	pop	r22
    46d2:	5f 91       	pop	r21
    46d4:	4f 91       	pop	r20
    46d6:	3f 91       	pop	r19
    46d8:	2f 91       	pop	r18
    46da:	0f 90       	pop	r0
    46dc:	0f be       	out	0x3f, r0	; 63
    46de:	0f 90       	pop	r0
    46e0:	1f 90       	pop	r1
    46e2:	18 95       	reti

000046e4 <__vector_17>:
    46e4:	1f 92       	push	r1
    46e6:	0f 92       	push	r0
    46e8:	0f b6       	in	r0, 0x3f	; 63
    46ea:	0f 92       	push	r0
    46ec:	11 24       	eor	r1, r1
    46ee:	2f 93       	push	r18
    46f0:	3f 93       	push	r19
    46f2:	4f 93       	push	r20
    46f4:	5f 93       	push	r21
    46f6:	6f 93       	push	r22
    46f8:	7f 93       	push	r23
    46fa:	8f 93       	push	r24
    46fc:	9f 93       	push	r25
    46fe:	af 93       	push	r26
    4700:	bf 93       	push	r27
    4702:	ef 93       	push	r30
    4704:	ff 93       	push	r31
    4706:	e0 91 ba 04 	lds	r30, 0x04BA
    470a:	f0 91 bb 04 	lds	r31, 0x04BB
    470e:	30 97       	sbiw	r30, 0x00	; 0
    4710:	09 f0       	breq	.+2      	; 0x4714 <__vector_17+0x30>
    4712:	09 95       	icall
    4714:	ff 91       	pop	r31
    4716:	ef 91       	pop	r30
    4718:	bf 91       	pop	r27
    471a:	af 91       	pop	r26
    471c:	9f 91       	pop	r25
    471e:	8f 91       	pop	r24
    4720:	7f 91       	pop	r23
    4722:	6f 91       	pop	r22
    4724:	5f 91       	pop	r21
    4726:	4f 91       	pop	r20
    4728:	3f 91       	pop	r19
    472a:	2f 91       	pop	r18
    472c:	0f 90       	pop	r0
    472e:	0f be       	out	0x3f, r0	; 63
    4730:	0f 90       	pop	r0
    4732:	1f 90       	pop	r1
    4734:	18 95       	reti

00004736 <__vector_18>:
    4736:	1f 92       	push	r1
    4738:	0f 92       	push	r0
    473a:	0f b6       	in	r0, 0x3f	; 63
    473c:	0f 92       	push	r0
    473e:	11 24       	eor	r1, r1
    4740:	2f 93       	push	r18
    4742:	3f 93       	push	r19
    4744:	4f 93       	push	r20
    4746:	5f 93       	push	r21
    4748:	6f 93       	push	r22
    474a:	7f 93       	push	r23
    474c:	8f 93       	push	r24
    474e:	9f 93       	push	r25
    4750:	af 93       	push	r26
    4752:	bf 93       	push	r27
    4754:	ef 93       	push	r30
    4756:	ff 93       	push	r31
    4758:	e0 91 bc 04 	lds	r30, 0x04BC
    475c:	f0 91 bd 04 	lds	r31, 0x04BD
    4760:	30 97       	sbiw	r30, 0x00	; 0
    4762:	09 f0       	breq	.+2      	; 0x4766 <__vector_18+0x30>
    4764:	09 95       	icall
    4766:	ff 91       	pop	r31
    4768:	ef 91       	pop	r30
    476a:	bf 91       	pop	r27
    476c:	af 91       	pop	r26
    476e:	9f 91       	pop	r25
    4770:	8f 91       	pop	r24
    4772:	7f 91       	pop	r23
    4774:	6f 91       	pop	r22
    4776:	5f 91       	pop	r21
    4778:	4f 91       	pop	r20
    477a:	3f 91       	pop	r19
    477c:	2f 91       	pop	r18
    477e:	0f 90       	pop	r0
    4780:	0f be       	out	0x3f, r0	; 63
    4782:	0f 90       	pop	r0
    4784:	1f 90       	pop	r1
    4786:	18 95       	reti

00004788 <__vector_9>:
    4788:	1f 92       	push	r1
    478a:	0f 92       	push	r0
    478c:	0f b6       	in	r0, 0x3f	; 63
    478e:	0f 92       	push	r0
    4790:	11 24       	eor	r1, r1
    4792:	2f 93       	push	r18
    4794:	3f 93       	push	r19
    4796:	4f 93       	push	r20
    4798:	5f 93       	push	r21
    479a:	6f 93       	push	r22
    479c:	7f 93       	push	r23
    479e:	8f 93       	push	r24
    47a0:	9f 93       	push	r25
    47a2:	af 93       	push	r26
    47a4:	bf 93       	push	r27
    47a6:	ef 93       	push	r30
    47a8:	ff 93       	push	r31
    47aa:	e0 91 aa 04 	lds	r30, 0x04AA
    47ae:	f0 91 ab 04 	lds	r31, 0x04AB
    47b2:	30 97       	sbiw	r30, 0x00	; 0
    47b4:	09 f0       	breq	.+2      	; 0x47b8 <__vector_9+0x30>
    47b6:	09 95       	icall
    47b8:	ff 91       	pop	r31
    47ba:	ef 91       	pop	r30
    47bc:	bf 91       	pop	r27
    47be:	af 91       	pop	r26
    47c0:	9f 91       	pop	r25
    47c2:	8f 91       	pop	r24
    47c4:	7f 91       	pop	r23
    47c6:	6f 91       	pop	r22
    47c8:	5f 91       	pop	r21
    47ca:	4f 91       	pop	r20
    47cc:	3f 91       	pop	r19
    47ce:	2f 91       	pop	r18
    47d0:	0f 90       	pop	r0
    47d2:	0f be       	out	0x3f, r0	; 63
    47d4:	0f 90       	pop	r0
    47d6:	1f 90       	pop	r1
    47d8:	18 95       	reti

000047da <__vector_10>:
    47da:	1f 92       	push	r1
    47dc:	0f 92       	push	r0
    47de:	0f b6       	in	r0, 0x3f	; 63
    47e0:	0f 92       	push	r0
    47e2:	11 24       	eor	r1, r1
    47e4:	2f 93       	push	r18
    47e6:	3f 93       	push	r19
    47e8:	4f 93       	push	r20
    47ea:	5f 93       	push	r21
    47ec:	6f 93       	push	r22
    47ee:	7f 93       	push	r23
    47f0:	8f 93       	push	r24
    47f2:	9f 93       	push	r25
    47f4:	af 93       	push	r26
    47f6:	bf 93       	push	r27
    47f8:	ef 93       	push	r30
    47fa:	ff 93       	push	r31
    47fc:	e0 91 ac 04 	lds	r30, 0x04AC
    4800:	f0 91 ad 04 	lds	r31, 0x04AD
    4804:	30 97       	sbiw	r30, 0x00	; 0
    4806:	09 f0       	breq	.+2      	; 0x480a <__vector_10+0x30>
    4808:	09 95       	icall
    480a:	ff 91       	pop	r31
    480c:	ef 91       	pop	r30
    480e:	bf 91       	pop	r27
    4810:	af 91       	pop	r26
    4812:	9f 91       	pop	r25
    4814:	8f 91       	pop	r24
    4816:	7f 91       	pop	r23
    4818:	6f 91       	pop	r22
    481a:	5f 91       	pop	r21
    481c:	4f 91       	pop	r20
    481e:	3f 91       	pop	r19
    4820:	2f 91       	pop	r18
    4822:	0f 90       	pop	r0
    4824:	0f be       	out	0x3f, r0	; 63
    4826:	0f 90       	pop	r0
    4828:	1f 90       	pop	r1
    482a:	18 95       	reti

0000482c <__vector_11>:
    482c:	1f 92       	push	r1
    482e:	0f 92       	push	r0
    4830:	0f b6       	in	r0, 0x3f	; 63
    4832:	0f 92       	push	r0
    4834:	11 24       	eor	r1, r1
    4836:	2f 93       	push	r18
    4838:	3f 93       	push	r19
    483a:	4f 93       	push	r20
    483c:	5f 93       	push	r21
    483e:	6f 93       	push	r22
    4840:	7f 93       	push	r23
    4842:	8f 93       	push	r24
    4844:	9f 93       	push	r25
    4846:	af 93       	push	r26
    4848:	bf 93       	push	r27
    484a:	ef 93       	push	r30
    484c:	ff 93       	push	r31
    484e:	e0 91 ae 04 	lds	r30, 0x04AE
    4852:	f0 91 af 04 	lds	r31, 0x04AF
    4856:	30 97       	sbiw	r30, 0x00	; 0
    4858:	09 f0       	breq	.+2      	; 0x485c <__vector_11+0x30>
    485a:	09 95       	icall
    485c:	ff 91       	pop	r31
    485e:	ef 91       	pop	r30
    4860:	bf 91       	pop	r27
    4862:	af 91       	pop	r26
    4864:	9f 91       	pop	r25
    4866:	8f 91       	pop	r24
    4868:	7f 91       	pop	r23
    486a:	6f 91       	pop	r22
    486c:	5f 91       	pop	r21
    486e:	4f 91       	pop	r20
    4870:	3f 91       	pop	r19
    4872:	2f 91       	pop	r18
    4874:	0f 90       	pop	r0
    4876:	0f be       	out	0x3f, r0	; 63
    4878:	0f 90       	pop	r0
    487a:	1f 90       	pop	r1
    487c:	18 95       	reti

0000487e <__vector_13>:
    487e:	1f 92       	push	r1
    4880:	0f 92       	push	r0
    4882:	0f b6       	in	r0, 0x3f	; 63
    4884:	0f 92       	push	r0
    4886:	11 24       	eor	r1, r1
    4888:	2f 93       	push	r18
    488a:	3f 93       	push	r19
    488c:	4f 93       	push	r20
    488e:	5f 93       	push	r21
    4890:	6f 93       	push	r22
    4892:	7f 93       	push	r23
    4894:	8f 93       	push	r24
    4896:	9f 93       	push	r25
    4898:	af 93       	push	r26
    489a:	bf 93       	push	r27
    489c:	ef 93       	push	r30
    489e:	ff 93       	push	r31
    48a0:	e0 91 b2 04 	lds	r30, 0x04B2
    48a4:	f0 91 b3 04 	lds	r31, 0x04B3
    48a8:	30 97       	sbiw	r30, 0x00	; 0
    48aa:	09 f0       	breq	.+2      	; 0x48ae <__vector_13+0x30>
    48ac:	09 95       	icall
    48ae:	ff 91       	pop	r31
    48b0:	ef 91       	pop	r30
    48b2:	bf 91       	pop	r27
    48b4:	af 91       	pop	r26
    48b6:	9f 91       	pop	r25
    48b8:	8f 91       	pop	r24
    48ba:	7f 91       	pop	r23
    48bc:	6f 91       	pop	r22
    48be:	5f 91       	pop	r21
    48c0:	4f 91       	pop	r20
    48c2:	3f 91       	pop	r19
    48c4:	2f 91       	pop	r18
    48c6:	0f 90       	pop	r0
    48c8:	0f be       	out	0x3f, r0	; 63
    48ca:	0f 90       	pop	r0
    48cc:	1f 90       	pop	r1
    48ce:	18 95       	reti

000048d0 <__vector_14>:
    48d0:	1f 92       	push	r1
    48d2:	0f 92       	push	r0
    48d4:	0f b6       	in	r0, 0x3f	; 63
    48d6:	0f 92       	push	r0
    48d8:	11 24       	eor	r1, r1
    48da:	2f 93       	push	r18
    48dc:	3f 93       	push	r19
    48de:	4f 93       	push	r20
    48e0:	5f 93       	push	r21
    48e2:	6f 93       	push	r22
    48e4:	7f 93       	push	r23
    48e6:	8f 93       	push	r24
    48e8:	9f 93       	push	r25
    48ea:	af 93       	push	r26
    48ec:	bf 93       	push	r27
    48ee:	ef 93       	push	r30
    48f0:	ff 93       	push	r31
    48f2:	e0 91 b4 04 	lds	r30, 0x04B4
    48f6:	f0 91 b5 04 	lds	r31, 0x04B5
    48fa:	30 97       	sbiw	r30, 0x00	; 0
    48fc:	09 f0       	breq	.+2      	; 0x4900 <__vector_14+0x30>
    48fe:	09 95       	icall
    4900:	ff 91       	pop	r31
    4902:	ef 91       	pop	r30
    4904:	bf 91       	pop	r27
    4906:	af 91       	pop	r26
    4908:	9f 91       	pop	r25
    490a:	8f 91       	pop	r24
    490c:	7f 91       	pop	r23
    490e:	6f 91       	pop	r22
    4910:	5f 91       	pop	r21
    4912:	4f 91       	pop	r20
    4914:	3f 91       	pop	r19
    4916:	2f 91       	pop	r18
    4918:	0f 90       	pop	r0
    491a:	0f be       	out	0x3f, r0	; 63
    491c:	0f 90       	pop	r0
    491e:	1f 90       	pop	r1
    4920:	18 95       	reti

00004922 <__vector_12>:
    4922:	1f 92       	push	r1
    4924:	0f 92       	push	r0
    4926:	0f b6       	in	r0, 0x3f	; 63
    4928:	0f 92       	push	r0
    492a:	11 24       	eor	r1, r1
    492c:	2f 93       	push	r18
    492e:	3f 93       	push	r19
    4930:	4f 93       	push	r20
    4932:	5f 93       	push	r21
    4934:	6f 93       	push	r22
    4936:	7f 93       	push	r23
    4938:	8f 93       	push	r24
    493a:	9f 93       	push	r25
    493c:	af 93       	push	r26
    493e:	bf 93       	push	r27
    4940:	ef 93       	push	r30
    4942:	ff 93       	push	r31
    4944:	e0 91 b0 04 	lds	r30, 0x04B0
    4948:	f0 91 b1 04 	lds	r31, 0x04B1
    494c:	30 97       	sbiw	r30, 0x00	; 0
    494e:	09 f0       	breq	.+2      	; 0x4952 <__vector_12+0x30>
    4950:	09 95       	icall
    4952:	ff 91       	pop	r31
    4954:	ef 91       	pop	r30
    4956:	bf 91       	pop	r27
    4958:	af 91       	pop	r26
    495a:	9f 91       	pop	r25
    495c:	8f 91       	pop	r24
    495e:	7f 91       	pop	r23
    4960:	6f 91       	pop	r22
    4962:	5f 91       	pop	r21
    4964:	4f 91       	pop	r20
    4966:	3f 91       	pop	r19
    4968:	2f 91       	pop	r18
    496a:	0f 90       	pop	r0
    496c:	0f be       	out	0x3f, r0	; 63
    496e:	0f 90       	pop	r0
    4970:	1f 90       	pop	r1
    4972:	18 95       	reti

00004974 <__vector_15>:
    4974:	1f 92       	push	r1
    4976:	0f 92       	push	r0
    4978:	0f b6       	in	r0, 0x3f	; 63
    497a:	0f 92       	push	r0
    497c:	11 24       	eor	r1, r1
    497e:	2f 93       	push	r18
    4980:	3f 93       	push	r19
    4982:	4f 93       	push	r20
    4984:	5f 93       	push	r21
    4986:	6f 93       	push	r22
    4988:	7f 93       	push	r23
    498a:	8f 93       	push	r24
    498c:	9f 93       	push	r25
    498e:	af 93       	push	r26
    4990:	bf 93       	push	r27
    4992:	ef 93       	push	r30
    4994:	ff 93       	push	r31
    4996:	e0 91 b6 04 	lds	r30, 0x04B6
    499a:	f0 91 b7 04 	lds	r31, 0x04B7
    499e:	30 97       	sbiw	r30, 0x00	; 0
    49a0:	09 f0       	breq	.+2      	; 0x49a4 <__vector_15+0x30>
    49a2:	09 95       	icall
    49a4:	ff 91       	pop	r31
    49a6:	ef 91       	pop	r30
    49a8:	bf 91       	pop	r27
    49aa:	af 91       	pop	r26
    49ac:	9f 91       	pop	r25
    49ae:	8f 91       	pop	r24
    49b0:	7f 91       	pop	r23
    49b2:	6f 91       	pop	r22
    49b4:	5f 91       	pop	r21
    49b6:	4f 91       	pop	r20
    49b8:	3f 91       	pop	r19
    49ba:	2f 91       	pop	r18
    49bc:	0f 90       	pop	r0
    49be:	0f be       	out	0x3f, r0	; 63
    49c0:	0f 90       	pop	r0
    49c2:	1f 90       	pop	r1
    49c4:	18 95       	reti

000049c6 <__vector_4>:
    49c6:	1f 92       	push	r1
    49c8:	0f 92       	push	r0
    49ca:	0f b6       	in	r0, 0x3f	; 63
    49cc:	0f 92       	push	r0
    49ce:	11 24       	eor	r1, r1
    49d0:	2f 93       	push	r18
    49d2:	3f 93       	push	r19
    49d4:	4f 93       	push	r20
    49d6:	5f 93       	push	r21
    49d8:	6f 93       	push	r22
    49da:	7f 93       	push	r23
    49dc:	8f 93       	push	r24
    49de:	9f 93       	push	r25
    49e0:	af 93       	push	r26
    49e2:	bf 93       	push	r27
    49e4:	ef 93       	push	r30
    49e6:	ff 93       	push	r31
    49e8:	e0 91 a0 04 	lds	r30, 0x04A0
    49ec:	f0 91 a1 04 	lds	r31, 0x04A1
    49f0:	30 97       	sbiw	r30, 0x00	; 0
    49f2:	09 f0       	breq	.+2      	; 0x49f6 <__vector_4+0x30>
    49f4:	09 95       	icall
    49f6:	ff 91       	pop	r31
    49f8:	ef 91       	pop	r30
    49fa:	bf 91       	pop	r27
    49fc:	af 91       	pop	r26
    49fe:	9f 91       	pop	r25
    4a00:	8f 91       	pop	r24
    4a02:	7f 91       	pop	r23
    4a04:	6f 91       	pop	r22
    4a06:	5f 91       	pop	r21
    4a08:	4f 91       	pop	r20
    4a0a:	3f 91       	pop	r19
    4a0c:	2f 91       	pop	r18
    4a0e:	0f 90       	pop	r0
    4a10:	0f be       	out	0x3f, r0	; 63
    4a12:	0f 90       	pop	r0
    4a14:	1f 90       	pop	r1
    4a16:	18 95       	reti

00004a18 <__vector_5>:
    4a18:	1f 92       	push	r1
    4a1a:	0f 92       	push	r0
    4a1c:	0f b6       	in	r0, 0x3f	; 63
    4a1e:	0f 92       	push	r0
    4a20:	11 24       	eor	r1, r1
    4a22:	2f 93       	push	r18
    4a24:	3f 93       	push	r19
    4a26:	4f 93       	push	r20
    4a28:	5f 93       	push	r21
    4a2a:	6f 93       	push	r22
    4a2c:	7f 93       	push	r23
    4a2e:	8f 93       	push	r24
    4a30:	9f 93       	push	r25
    4a32:	af 93       	push	r26
    4a34:	bf 93       	push	r27
    4a36:	ef 93       	push	r30
    4a38:	ff 93       	push	r31
    4a3a:	e0 91 a2 04 	lds	r30, 0x04A2
    4a3e:	f0 91 a3 04 	lds	r31, 0x04A3
    4a42:	30 97       	sbiw	r30, 0x00	; 0
    4a44:	09 f0       	breq	.+2      	; 0x4a48 <__vector_5+0x30>
    4a46:	09 95       	icall
    4a48:	ff 91       	pop	r31
    4a4a:	ef 91       	pop	r30
    4a4c:	bf 91       	pop	r27
    4a4e:	af 91       	pop	r26
    4a50:	9f 91       	pop	r25
    4a52:	8f 91       	pop	r24
    4a54:	7f 91       	pop	r23
    4a56:	6f 91       	pop	r22
    4a58:	5f 91       	pop	r21
    4a5a:	4f 91       	pop	r20
    4a5c:	3f 91       	pop	r19
    4a5e:	2f 91       	pop	r18
    4a60:	0f 90       	pop	r0
    4a62:	0f be       	out	0x3f, r0	; 63
    4a64:	0f 90       	pop	r0
    4a66:	1f 90       	pop	r1
    4a68:	18 95       	reti

00004a6a <__vector_6>:
    4a6a:	1f 92       	push	r1
    4a6c:	0f 92       	push	r0
    4a6e:	0f b6       	in	r0, 0x3f	; 63
    4a70:	0f 92       	push	r0
    4a72:	11 24       	eor	r1, r1
    4a74:	2f 93       	push	r18
    4a76:	3f 93       	push	r19
    4a78:	4f 93       	push	r20
    4a7a:	5f 93       	push	r21
    4a7c:	6f 93       	push	r22
    4a7e:	7f 93       	push	r23
    4a80:	8f 93       	push	r24
    4a82:	9f 93       	push	r25
    4a84:	af 93       	push	r26
    4a86:	bf 93       	push	r27
    4a88:	ef 93       	push	r30
    4a8a:	ff 93       	push	r31
    4a8c:	e0 91 a4 04 	lds	r30, 0x04A4
    4a90:	f0 91 a5 04 	lds	r31, 0x04A5
    4a94:	30 97       	sbiw	r30, 0x00	; 0
    4a96:	09 f0       	breq	.+2      	; 0x4a9a <__vector_6+0x30>
    4a98:	09 95       	icall
    4a9a:	ff 91       	pop	r31
    4a9c:	ef 91       	pop	r30
    4a9e:	bf 91       	pop	r27
    4aa0:	af 91       	pop	r26
    4aa2:	9f 91       	pop	r25
    4aa4:	8f 91       	pop	r24
    4aa6:	7f 91       	pop	r23
    4aa8:	6f 91       	pop	r22
    4aaa:	5f 91       	pop	r21
    4aac:	4f 91       	pop	r20
    4aae:	3f 91       	pop	r19
    4ab0:	2f 91       	pop	r18
    4ab2:	0f 90       	pop	r0
    4ab4:	0f be       	out	0x3f, r0	; 63
    4ab6:	0f 90       	pop	r0
    4ab8:	1f 90       	pop	r1
    4aba:	18 95       	reti

00004abc <__vector_7>:
    4abc:	1f 92       	push	r1
    4abe:	0f 92       	push	r0
    4ac0:	0f b6       	in	r0, 0x3f	; 63
    4ac2:	0f 92       	push	r0
    4ac4:	11 24       	eor	r1, r1
    4ac6:	2f 93       	push	r18
    4ac8:	3f 93       	push	r19
    4aca:	4f 93       	push	r20
    4acc:	5f 93       	push	r21
    4ace:	6f 93       	push	r22
    4ad0:	7f 93       	push	r23
    4ad2:	8f 93       	push	r24
    4ad4:	9f 93       	push	r25
    4ad6:	af 93       	push	r26
    4ad8:	bf 93       	push	r27
    4ada:	ef 93       	push	r30
    4adc:	ff 93       	push	r31
    4ade:	e0 91 a6 04 	lds	r30, 0x04A6
    4ae2:	f0 91 a7 04 	lds	r31, 0x04A7
    4ae6:	30 97       	sbiw	r30, 0x00	; 0
    4ae8:	09 f0       	breq	.+2      	; 0x4aec <__vector_7+0x30>
    4aea:	09 95       	icall
    4aec:	ff 91       	pop	r31
    4aee:	ef 91       	pop	r30
    4af0:	bf 91       	pop	r27
    4af2:	af 91       	pop	r26
    4af4:	9f 91       	pop	r25
    4af6:	8f 91       	pop	r24
    4af8:	7f 91       	pop	r23
    4afa:	6f 91       	pop	r22
    4afc:	5f 91       	pop	r21
    4afe:	4f 91       	pop	r20
    4b00:	3f 91       	pop	r19
    4b02:	2f 91       	pop	r18
    4b04:	0f 90       	pop	r0
    4b06:	0f be       	out	0x3f, r0	; 63
    4b08:	0f 90       	pop	r0
    4b0a:	1f 90       	pop	r1
    4b0c:	18 95       	reti

00004b0e <ISR_attach>:
    4b0e:	e8 2f       	mov	r30, r24
    4b10:	80 32       	cpi	r24, 0x20	; 32
    4b12:	68 f4       	brcc	.+26     	; 0x4b2e <ISR_attach+0x20>
    4b14:	80 51       	subi	r24, 0x10	; 16
    4b16:	83 30       	cpi	r24, 0x03	; 3
    4b18:	50 f0       	brcs	.+20     	; 0x4b2e <ISR_attach+0x20>
    4b1a:	f0 e0       	ldi	r31, 0x00	; 0
    4b1c:	ee 0f       	add	r30, r30
    4b1e:	ff 1f       	adc	r31, r31
    4b20:	e8 56       	subi	r30, 0x68	; 104
    4b22:	fb 4f       	sbci	r31, 0xFB	; 251
    4b24:	20 81       	ld	r18, Z
    4b26:	31 81       	ldd	r19, Z+1	; 0x01
    4b28:	71 83       	std	Z+1, r23	; 0x01
    4b2a:	60 83       	st	Z, r22
    4b2c:	02 c0       	rjmp	.+4      	; 0x4b32 <ISR_attach+0x24>
    4b2e:	20 e0       	ldi	r18, 0x00	; 0
    4b30:	30 e0       	ldi	r19, 0x00	; 0
    4b32:	c9 01       	movw	r24, r18
    4b34:	08 95       	ret

00004b36 <ISR_open>:
    4b36:	80 e1       	ldi	r24, 0x10	; 16
    4b38:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    4b3c:	88 23       	and	r24, r24
    4b3e:	61 f4       	brne	.+24     	; 0x4b58 <ISR_open+0x22>
    4b40:	e8 e9       	ldi	r30, 0x98	; 152
    4b42:	f4 e0       	ldi	r31, 0x04	; 4
    4b44:	11 92       	st	Z+, r1
    4b46:	11 92       	st	Z+, r1
    4b48:	84 e0       	ldi	r24, 0x04	; 4
    4b4a:	e8 3d       	cpi	r30, 0xD8	; 216
    4b4c:	f8 07       	cpc	r31, r24
    4b4e:	d1 f7       	brne	.-12     	; 0x4b44 <ISR_open+0xe>
    4b50:	80 e1       	ldi	r24, 0x10	; 16
    4b52:	61 e0       	ldi	r22, 0x01	; 1
    4b54:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    4b58:	80 e1       	ldi	r24, 0x10	; 16
    4b5a:	91 e0       	ldi	r25, 0x01	; 1
    4b5c:	08 95       	ret

00004b5e <__LCD_init>:
    4b5e:	23 9a       	sbi	0x04, 3	; 4
    4b60:	08 95       	ret

00004b62 <__LCD_putchar>:
    4b62:	ff 92       	push	r15
    4b64:	0f 93       	push	r16
    4b66:	1f 93       	push	r17
    4b68:	cf 93       	push	r28
    4b6a:	df 93       	push	r29
    4b6c:	f8 2e       	mov	r15, r24
    4b6e:	8a e0       	ldi	r24, 0x0A	; 10
    4b70:	f8 16       	cp	r15, r24
    4b72:	b1 f0       	breq	.+44     	; 0x4ba0 <__LCD_putchar+0x3e>
    4b74:	8f 15       	cp	r24, r15
    4b76:	48 f0       	brcs	.+18     	; 0x4b8a <__LCD_putchar+0x28>
    4b78:	e8 e0       	ldi	r30, 0x08	; 8
    4b7a:	fe 16       	cp	r15, r30
    4b7c:	b9 f1       	breq	.+110    	; 0x4bec <__LCD_putchar+0x8a>
    4b7e:	ef 15       	cp	r30, r15
    4b80:	38 f1       	brcs	.+78     	; 0x4bd0 <__LCD_putchar+0x6e>
    4b82:	f7 e0       	ldi	r31, 0x07	; 7
    4b84:	ff 16       	cp	r15, r31
    4b86:	51 f4       	brne	.+20     	; 0x4b9c <__LCD_putchar+0x3a>
    4b88:	3b c0       	rjmp	.+118    	; 0x4c00 <__LCD_putchar+0x9e>
    4b8a:	8d e0       	ldi	r24, 0x0D	; 13
    4b8c:	f8 16       	cp	r15, r24
    4b8e:	59 f0       	breq	.+22     	; 0x4ba6 <__LCD_putchar+0x44>
    4b90:	eb e1       	ldi	r30, 0x1B	; 27
    4b92:	fe 16       	cp	r15, r30
    4b94:	89 f0       	breq	.+34     	; 0x4bb8 <__LCD_putchar+0x56>
    4b96:	fc e0       	ldi	r31, 0x0C	; 12
    4b98:	ff 16       	cp	r15, r31
    4b9a:	41 f0       	breq	.+16     	; 0x4bac <__LCD_putchar+0x4a>
    4b9c:	01 e0       	ldi	r16, 0x01	; 1
    4b9e:	41 c0       	rjmp	.+130    	; 0x4c22 <__LCD_putchar+0xc0>
    4ba0:	10 92 16 08 	sts	0x0816, r1
    4ba4:	03 c0       	rjmp	.+6      	; 0x4bac <__LCD_putchar+0x4a>
    4ba6:	10 92 16 08 	sts	0x0816, r1
    4baa:	3a c0       	rjmp	.+116    	; 0x4c20 <__LCD_putchar+0xbe>
    4bac:	80 91 17 08 	lds	r24, 0x0817
    4bb0:	81 50       	subi	r24, 0x01	; 1
    4bb2:	80 93 17 08 	sts	0x0817, r24
    4bb6:	34 c0       	rjmp	.+104    	; 0x4c20 <__LCD_putchar+0xbe>
    4bb8:	0e 94 21 1b 	call	0x3642	; 0x3642 <LCD_clear>
    4bbc:	14 c0       	rjmp	.+40     	; 0x4be6 <__LCD_putchar+0x84>
    4bbe:	80 e0       	ldi	r24, 0x00	; 0
    4bc0:	61 e0       	ldi	r22, 0x01	; 1
    4bc2:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    4bc6:	80 91 16 08 	lds	r24, 0x0816
    4bca:	8f 5f       	subi	r24, 0xFF	; 255
    4bcc:	80 93 16 08 	sts	0x0816, r24
    4bd0:	80 91 16 08 	lds	r24, 0x0816
    4bd4:	87 ff       	sbrs	r24, 7
    4bd6:	f3 cf       	rjmp	.-26     	; 0x4bbe <__LCD_putchar+0x5c>
    4bd8:	10 92 16 08 	sts	0x0816, r1
    4bdc:	80 91 17 08 	lds	r24, 0x0817
    4be0:	81 50       	subi	r24, 0x01	; 1
    4be2:	80 93 17 08 	sts	0x0817, r24
    4be6:	00 e0       	ldi	r16, 0x00	; 0
    4be8:	11 e0       	ldi	r17, 0x01	; 1
    4bea:	1c c0       	rjmp	.+56     	; 0x4c24 <__LCD_putchar+0xc2>
    4bec:	80 91 16 08 	lds	r24, 0x0816
    4bf0:	88 23       	and	r24, r24
    4bf2:	b1 f0       	breq	.+44     	; 0x4c20 <__LCD_putchar+0xbe>
    4bf4:	80 91 16 08 	lds	r24, 0x0816
    4bf8:	86 50       	subi	r24, 0x06	; 6
    4bfa:	80 93 16 08 	sts	0x0816, r24
    4bfe:	10 c0       	rjmp	.+32     	; 0x4c20 <__LCD_putchar+0xbe>
    4c00:	81 e0       	ldi	r24, 0x01	; 1
    4c02:	0e 94 2d 1d 	call	0x3a5a	; 0x3a5a <SPKR_open>
    4c06:	64 ef       	ldi	r22, 0xF4	; 244
    4c08:	71 e0       	ldi	r23, 0x01	; 1
    4c0a:	80 e0       	ldi	r24, 0x00	; 0
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	4d e7       	ldi	r20, 0x7D	; 125
    4c10:	50 e0       	ldi	r21, 0x00	; 0
    4c12:	24 e6       	ldi	r18, 0x64	; 100
    4c14:	30 e0       	ldi	r19, 0x00	; 0
    4c16:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <SPKR_play_beep>
    4c1a:	81 e0       	ldi	r24, 0x01	; 1
    4c1c:	0e 94 97 27 	call	0x4f2e	; 0x4f2e <SPKR_close>
    4c20:	00 e0       	ldi	r16, 0x00	; 0
    4c22:	10 e0       	ldi	r17, 0x00	; 0
    4c24:	80 91 17 08 	lds	r24, 0x0817
    4c28:	60 91 16 08 	lds	r22, 0x0816
    4c2c:	0e 94 e7 1b 	call	0x37ce	; 0x37ce <LCD_set_PGC_addr>
    4c30:	00 23       	and	r16, r16
    4c32:	51 f1       	breq	.+84     	; 0x4c88 <__LCD_putchar+0x126>
    4c34:	85 e0       	ldi	r24, 0x05	; 5
    4c36:	f8 9e       	mul	r15, r24
    4c38:	c0 01       	movw	r24, r0
    4c3a:	11 24       	eor	r1, r1
    4c3c:	ec 01       	movw	r28, r24
    4c3e:	c3 55       	subi	r28, 0x53	; 83
    4c40:	df 4f       	sbci	r29, 0xFF	; 255
    4c42:	8c 01       	movw	r16, r24
    4c44:	0e 54       	subi	r16, 0x4E	; 78
    4c46:	1f 4f       	sbci	r17, 0xFF	; 255
    4c48:	fe 01       	movw	r30, r28
    4c4a:	84 91       	lpm	r24, Z+
    4c4c:	61 e0       	ldi	r22, 0x01	; 1
    4c4e:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    4c52:	21 96       	adiw	r28, 0x01	; 1
    4c54:	c0 17       	cp	r28, r16
    4c56:	d1 07       	cpc	r29, r17
    4c58:	b9 f7       	brne	.-18     	; 0x4c48 <__LCD_putchar+0xe6>
    4c5a:	80 e0       	ldi	r24, 0x00	; 0
    4c5c:	61 e0       	ldi	r22, 0x01	; 1
    4c5e:	0e 94 00 1c 	call	0x3800	; 0x3800 <LCD_write>
    4c62:	80 91 16 08 	lds	r24, 0x0816
    4c66:	8a 5f       	subi	r24, 0xFA	; 250
    4c68:	80 93 16 08 	sts	0x0816, r24
    4c6c:	80 91 16 08 	lds	r24, 0x0816
    4c70:	90 e0       	ldi	r25, 0x00	; 0
    4c72:	8c 37       	cpi	r24, 0x7C	; 124
    4c74:	91 05       	cpc	r25, r1
    4c76:	3c f0       	brlt	.+14     	; 0x4c86 <__LCD_putchar+0x124>
    4c78:	10 92 16 08 	sts	0x0816, r1
    4c7c:	80 91 17 08 	lds	r24, 0x0817
    4c80:	81 50       	subi	r24, 0x01	; 1
    4c82:	80 93 17 08 	sts	0x0817, r24
    4c86:	11 e0       	ldi	r17, 0x01	; 1
    4c88:	80 91 17 08 	lds	r24, 0x0817
    4c8c:	83 70       	andi	r24, 0x03	; 3
    4c8e:	80 93 17 08 	sts	0x0817, r24
    4c92:	11 30       	cpi	r17, 0x01	; 1
    4c94:	59 f4       	brne	.+22     	; 0x4cac <__LCD_putchar+0x14a>
    4c96:	80 91 18 08 	lds	r24, 0x0818
    4c9a:	81 30       	cpi	r24, 0x01	; 1
    4c9c:	39 f4       	brne	.+14     	; 0x4cac <__LCD_putchar+0x14a>
    4c9e:	e0 91 19 08 	lds	r30, 0x0819
    4ca2:	f0 91 1a 08 	lds	r31, 0x081A
    4ca6:	30 97       	sbiw	r30, 0x00	; 0
    4ca8:	09 f0       	breq	.+2      	; 0x4cac <__LCD_putchar+0x14a>
    4caa:	09 95       	icall
    4cac:	80 e0       	ldi	r24, 0x00	; 0
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	df 91       	pop	r29
    4cb2:	cf 91       	pop	r28
    4cb4:	1f 91       	pop	r17
    4cb6:	0f 91       	pop	r16
    4cb8:	ff 90       	pop	r15
    4cba:	08 95       	ret

00004cbc <__LED_clr_pattern>:
    4cbc:	85 fd       	sbrc	r24, 5
    4cbe:	5d 98       	cbi	0x0b, 5	; 11
    4cc0:	86 fd       	sbrc	r24, 6
    4cc2:	5e 98       	cbi	0x0b, 6	; 11
    4cc4:	08 95       	ret

00004cc6 <__LED_init>:
    4cc6:	55 9a       	sbi	0x0a, 5	; 10
    4cc8:	56 9a       	sbi	0x0a, 6	; 10
    4cca:	08 95       	ret

00004ccc <__LED_set_pattern>:
    4ccc:	85 fd       	sbrc	r24, 5
    4cce:	5d 9a       	sbi	0x0b, 5	; 11
    4cd0:	86 fd       	sbrc	r24, 6
    4cd2:	5e 9a       	sbi	0x0b, 6	; 11
    4cd4:	08 95       	ret

00004cd6 <ATMEGA_open>:
    4cd6:	80 e0       	ldi	r24, 0x00	; 0
    4cd8:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    4cdc:	88 23       	and	r24, r24
    4cde:	51 f4       	brne	.+20     	; 0x4cf4 <ATMEGA_open+0x1e>
    4ce0:	f8 94       	cli
    4ce2:	0e 94 62 29 	call	0x52c4	; 0x52c4 <__ATMEGA_init>
    4ce6:	81 e0       	ldi	r24, 0x01	; 1
    4ce8:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <ATMEGA_set_clk_mode>
    4cec:	80 e0       	ldi	r24, 0x00	; 0
    4cee:	61 e0       	ldi	r22, 0x01	; 1
    4cf0:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    4cf4:	80 e0       	ldi	r24, 0x00	; 0
    4cf6:	91 e0       	ldi	r25, 0x01	; 1
    4cf8:	08 95       	ret

00004cfa <ATMEGA_set_clk_mode>:
    4cfa:	81 30       	cpi	r24, 0x01	; 1
    4cfc:	49 f0       	breq	.+18     	; 0x4d10 <ATMEGA_set_clk_mode+0x16>
    4cfe:	f8 94       	cli
    4d00:	81 30       	cpi	r24, 0x01	; 1
    4d02:	20 f1       	brcs	.+72     	; 0x4d4c <ATMEGA_set_clk_mode+0x52>
    4d04:	82 30       	cpi	r24, 0x02	; 2
    4d06:	b1 f0       	breq	.+44     	; 0x4d34 <ATMEGA_set_clk_mode+0x3a>
    4d08:	83 30       	cpi	r24, 0x03	; 3
    4d0a:	09 f0       	breq	.+2      	; 0x4d0e <ATMEGA_set_clk_mode+0x14>
    4d0c:	45 c0       	rjmp	.+138    	; 0x4d98 <ATMEGA_set_clk_mode+0x9e>
    4d0e:	17 c0       	rjmp	.+46     	; 0x4d3e <ATMEGA_set_clk_mode+0x44>
    4d10:	2c 9a       	sbi	0x05, 4	; 5
    4d12:	80 e8       	ldi	r24, 0x80	; 128
    4d14:	80 93 61 00 	sts	0x0061, r24
    4d18:	10 92 61 00 	sts	0x0061, r1
    4d1c:	80 e0       	ldi	r24, 0x00	; 0
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	00 00       	nop
    4d22:	01 96       	adiw	r24, 0x01	; 1
    4d24:	88 32       	cpi	r24, 0x28	; 40
    4d26:	91 05       	cpc	r25, r1
    4d28:	d9 f7       	brne	.-10     	; 0x4d20 <ATMEGA_set_clk_mode+0x26>
    4d2a:	10 92 68 00 	sts	0x0068, r1
    4d2e:	10 92 6b 00 	sts	0x006B, r1
    4d32:	08 95       	ret
    4d34:	80 e8       	ldi	r24, 0x80	; 128
    4d36:	80 93 61 00 	sts	0x0061, r24
    4d3a:	83 e0       	ldi	r24, 0x03	; 3
    4d3c:	04 c0       	rjmp	.+8      	; 0x4d46 <ATMEGA_set_clk_mode+0x4c>
    4d3e:	80 e8       	ldi	r24, 0x80	; 128
    4d40:	80 93 61 00 	sts	0x0061, r24
    4d44:	88 e0       	ldi	r24, 0x08	; 8
    4d46:	80 93 61 00 	sts	0x0061, r24
    4d4a:	28 c0       	rjmp	.+80     	; 0x4d9c <ATMEGA_set_clk_mode+0xa2>
    4d4c:	80 e0       	ldi	r24, 0x00	; 0
    4d4e:	90 e0       	ldi	r25, 0x00	; 0
    4d50:	00 00       	nop
    4d52:	01 96       	adiw	r24, 0x01	; 1
    4d54:	2d e6       	ldi	r18, 0x6D	; 109
    4d56:	80 36       	cpi	r24, 0x60	; 96
    4d58:	92 07       	cpc	r25, r18
    4d5a:	d1 f7       	brne	.-12     	; 0x4d50 <ATMEGA_set_clk_mode+0x56>
    4d5c:	2c 98       	cbi	0x05, 4	; 5
    4d5e:	80 e0       	ldi	r24, 0x00	; 0
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	00 00       	nop
    4d64:	01 96       	adiw	r24, 0x01	; 1
    4d66:	2d e6       	ldi	r18, 0x6D	; 109
    4d68:	80 36       	cpi	r24, 0x60	; 96
    4d6a:	92 07       	cpc	r25, r18
    4d6c:	d1 f7       	brne	.-12     	; 0x4d62 <ATMEGA_set_clk_mode+0x68>
    4d6e:	10 92 7a 00 	sts	0x007A, r1
    4d72:	8f ef       	ldi	r24, 0xFF	; 255
    4d74:	80 93 64 00 	sts	0x0064, r24
    4d78:	80 91 68 00 	lds	r24, 0x0068
    4d7c:	81 60       	ori	r24, 0x01	; 1
    4d7e:	80 93 68 00 	sts	0x0068, r24
    4d82:	80 91 6b 00 	lds	r24, 0x006B
    4d86:	84 60       	ori	r24, 0x04	; 4
    4d88:	80 93 6b 00 	sts	0x006B, r24
    4d8c:	78 94       	sei
    4d8e:	83 b7       	in	r24, 0x33	; 51
    4d90:	81 60       	ori	r24, 0x01	; 1
    4d92:	83 bf       	out	0x33, r24	; 51
    4d94:	88 95       	sleep
    4d96:	08 95       	ret
    4d98:	82 30       	cpi	r24, 0x02	; 2
    4d9a:	08 f0       	brcs	.+2      	; 0x4d9e <ATMEGA_set_clk_mode+0xa4>
    4d9c:	78 94       	sei
    4d9e:	08 95       	ret

00004da0 <SPI_open>:
    4da0:	0f 93       	push	r16
    4da2:	1f 93       	push	r17
    4da4:	0e 94 8e 29 	call	0x531c	; 0x531c <__SPI_init>
    4da8:	80 e0       	ldi	r24, 0x00	; 0
    4daa:	6d e7       	ldi	r22, 0x7D	; 125
    4dac:	79 e2       	ldi	r23, 0x29	; 41
    4dae:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <SPI_set_config_func>
    4db2:	81 e0       	ldi	r24, 0x01	; 1
    4db4:	65 e7       	ldi	r22, 0x75	; 117
    4db6:	79 e2       	ldi	r23, 0x29	; 41
    4db8:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <SPI_set_config_func>
    4dbc:	82 e0       	ldi	r24, 0x02	; 2
    4dbe:	6d e6       	ldi	r22, 0x6D	; 109
    4dc0:	79 e2       	ldi	r23, 0x29	; 41
    4dc2:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <SPI_set_config_func>
    4dc6:	86 e0       	ldi	r24, 0x06	; 6
    4dc8:	65 e8       	ldi	r22, 0x85	; 133
    4dca:	79 e2       	ldi	r23, 0x29	; 41
    4dcc:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <SPI_set_config_func>
    4dd0:	05 e6       	ldi	r16, 0x65	; 101
    4dd2:	19 e2       	ldi	r17, 0x29	; 41
    4dd4:	83 e0       	ldi	r24, 0x03	; 3
    4dd6:	b8 01       	movw	r22, r16
    4dd8:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <SPI_set_config_func>
    4ddc:	84 e0       	ldi	r24, 0x04	; 4
    4dde:	b8 01       	movw	r22, r16
    4de0:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <SPI_set_config_func>
    4de4:	85 e0       	ldi	r24, 0x05	; 5
    4de6:	b8 01       	movw	r22, r16
    4de8:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <SPI_set_config_func>
    4dec:	87 e0       	ldi	r24, 0x07	; 7
    4dee:	b8 01       	movw	r22, r16
    4df0:	0e 94 1b 27 	call	0x4e36	; 0x4e36 <SPI_set_config_func>
    4df4:	82 e0       	ldi	r24, 0x02	; 2
    4df6:	61 e0       	ldi	r22, 0x01	; 1
    4df8:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    4dfc:	8f ef       	ldi	r24, 0xFF	; 255
    4dfe:	80 93 1b 08 	sts	0x081B, r24
    4e02:	87 e0       	ldi	r24, 0x07	; 7
    4e04:	0e 94 3c 1c 	call	0x3878	; 0x3878 <SPI_set_slave_addr>
    4e08:	82 e0       	ldi	r24, 0x02	; 2
    4e0a:	91 e0       	ldi	r25, 0x01	; 1
    4e0c:	1f 91       	pop	r17
    4e0e:	0f 91       	pop	r16
    4e10:	08 95       	ret

00004e12 <SPI_receive>:
    4e12:	1f 93       	push	r17
    4e14:	16 2f       	mov	r17, r22
    4e16:	0e 94 3c 1c 	call	0x3878	; 0x3878 <SPI_set_slave_addr>
    4e1a:	82 e0       	ldi	r24, 0x02	; 2
    4e1c:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    4e20:	81 30       	cpi	r24, 0x01	; 1
    4e22:	11 f0       	breq	.+4      	; 0x4e28 <SPI_receive+0x16>
    4e24:	80 e0       	ldi	r24, 0x00	; 0
    4e26:	05 c0       	rjmp	.+10     	; 0x4e32 <SPI_receive+0x20>
    4e28:	1e bd       	out	0x2e, r17	; 46
    4e2a:	0d b4       	in	r0, 0x2d	; 45
    4e2c:	07 fe       	sbrs	r0, 7
    4e2e:	fd cf       	rjmp	.-6      	; 0x4e2a <SPI_receive+0x18>
    4e30:	8e b5       	in	r24, 0x2e	; 46
    4e32:	1f 91       	pop	r17
    4e34:	08 95       	ret

00004e36 <SPI_set_config_func>:
    4e36:	e8 2f       	mov	r30, r24
    4e38:	f0 e0       	ldi	r31, 0x00	; 0
    4e3a:	ee 0f       	add	r30, r30
    4e3c:	ff 1f       	adc	r31, r31
    4e3e:	e8 52       	subi	r30, 0x28	; 40
    4e40:	fb 4f       	sbci	r31, 0xFB	; 251
    4e42:	71 83       	std	Z+1, r23	; 0x01
    4e44:	60 83       	st	Z, r22
    4e46:	08 95       	ret

00004e48 <__SPKR_TIMER1_COMPA_vect>:
    4e48:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <SPKR_clk>
    4e4c:	08 95       	ret

00004e4e <SPKR_clk>:
    4e4e:	80 91 ea 04 	lds	r24, 0x04EA
    4e52:	90 91 eb 04 	lds	r25, 0x04EB
    4e56:	a0 91 ec 04 	lds	r26, 0x04EC
    4e5a:	b0 91 ed 04 	lds	r27, 0x04ED
    4e5e:	20 91 ee 04 	lds	r18, 0x04EE
    4e62:	30 91 ef 04 	lds	r19, 0x04EF
    4e66:	40 91 f0 04 	lds	r20, 0x04F0
    4e6a:	50 91 f1 04 	lds	r21, 0x04F1
    4e6e:	28 0f       	add	r18, r24
    4e70:	39 1f       	adc	r19, r25
    4e72:	4a 1f       	adc	r20, r26
    4e74:	5b 1f       	adc	r21, r27
    4e76:	20 93 ea 04 	sts	0x04EA, r18
    4e7a:	30 93 eb 04 	sts	0x04EB, r19
    4e7e:	40 93 ec 04 	sts	0x04EC, r20
    4e82:	50 93 ed 04 	sts	0x04ED, r21
    4e86:	80 91 ea 04 	lds	r24, 0x04EA
    4e8a:	90 91 eb 04 	lds	r25, 0x04EB
    4e8e:	a0 91 ec 04 	lds	r26, 0x04EC
    4e92:	b0 91 ed 04 	lds	r27, 0x04ED
    4e96:	88 51       	subi	r24, 0x18	; 24
    4e98:	96 4f       	sbci	r25, 0xF6	; 246
    4e9a:	a0 40       	sbci	r26, 0x00	; 0
    4e9c:	b0 40       	sbci	r27, 0x00	; 0
    4e9e:	bc f0       	brlt	.+46     	; 0x4ece <SPKR_clk+0x80>
    4ea0:	8b b1       	in	r24, 0x0b	; 11
    4ea2:	80 58       	subi	r24, 0x80	; 128
    4ea4:	8b b9       	out	0x0b, r24	; 11
    4ea6:	80 91 ea 04 	lds	r24, 0x04EA
    4eaa:	90 91 eb 04 	lds	r25, 0x04EB
    4eae:	a0 91 ec 04 	lds	r26, 0x04EC
    4eb2:	b0 91 ed 04 	lds	r27, 0x04ED
    4eb6:	88 51       	subi	r24, 0x18	; 24
    4eb8:	96 4f       	sbci	r25, 0xF6	; 246
    4eba:	a0 40       	sbci	r26, 0x00	; 0
    4ebc:	b0 40       	sbci	r27, 0x00	; 0
    4ebe:	80 93 ea 04 	sts	0x04EA, r24
    4ec2:	90 93 eb 04 	sts	0x04EB, r25
    4ec6:	a0 93 ec 04 	sts	0x04EC, r26
    4eca:	b0 93 ed 04 	sts	0x04ED, r27
    4ece:	08 95       	ret

00004ed0 <__SPKR_close_beep_mode>:
    4ed0:	8a e0       	ldi	r24, 0x0A	; 10
    4ed2:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    4ed6:	81 30       	cpi	r24, 0x01	; 1
    4ed8:	41 f4       	brne	.+16     	; 0x4eea <__SPKR_close_beep_mode+0x1a>
    4eda:	0e 94 ac 29 	call	0x5358	; 0x5358 <__SPKR_close>
    4ede:	10 92 e9 04 	sts	0x04E9, r1
    4ee2:	8a e0       	ldi	r24, 0x0A	; 10
    4ee4:	60 e0       	ldi	r22, 0x00	; 0
    4ee6:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    4eea:	08 95       	ret

00004eec <__SPKR_close_tone_mode>:
    4eec:	89 e0       	ldi	r24, 0x09	; 9
    4eee:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    4ef2:	81 30       	cpi	r24, 0x01	; 1
    4ef4:	d9 f4       	brne	.+54     	; 0x4f2c <__SPKR_close_tone_mode+0x40>
    4ef6:	80 91 e8 04 	lds	r24, 0x04E8
    4efa:	88 23       	and	r24, r24
    4efc:	11 f0       	breq	.+4      	; 0x4f02 <__SPKR_close_tone_mode+0x16>
    4efe:	0e 94 18 28 	call	0x5030	; 0x5030 <__SPKR_stop>
    4f02:	82 e0       	ldi	r24, 0x02	; 2
    4f04:	0e 94 ac 29 	call	0x5358	; 0x5358 <__SPKR_close>
    4f08:	80 91 f6 04 	lds	r24, 0x04F6
    4f0c:	90 91 f7 04 	lds	r25, 0x04F7
    4f10:	00 97       	sbiw	r24, 0x00	; 0
    4f12:	31 f0       	breq	.+12     	; 0x4f20 <__SPKR_close_tone_mode+0x34>
    4f14:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <free>
    4f18:	10 92 f7 04 	sts	0x04F7, r1
    4f1c:	10 92 f6 04 	sts	0x04F6, r1
    4f20:	10 92 e8 04 	sts	0x04E8, r1
    4f24:	89 e0       	ldi	r24, 0x09	; 9
    4f26:	60 e0       	ldi	r22, 0x00	; 0
    4f28:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    4f2c:	08 95       	ret

00004f2e <SPKR_close>:
    4f2e:	81 30       	cpi	r24, 0x01	; 1
    4f30:	29 f0       	breq	.+10     	; 0x4f3c <SPKR_close+0xe>
    4f32:	82 30       	cpi	r24, 0x02	; 2
    4f34:	29 f4       	brne	.+10     	; 0x4f40 <SPKR_close+0x12>
    4f36:	0e 94 76 27 	call	0x4eec	; 0x4eec <__SPKR_close_tone_mode>
    4f3a:	08 95       	ret
    4f3c:	0e 94 68 27 	call	0x4ed0	; 0x4ed0 <__SPKR_close_beep_mode>
    4f40:	08 95       	ret

00004f42 <__SPKR_init>:
    4f42:	98 2f       	mov	r25, r24
    4f44:	80 91 e8 04 	lds	r24, 0x04E8
    4f48:	88 23       	and	r24, r24
    4f4a:	31 f4       	brne	.+12     	; 0x4f58 <__SPKR_init+0x16>
    4f4c:	80 91 e9 04 	lds	r24, 0x04E9
    4f50:	88 23       	and	r24, r24
    4f52:	11 f4       	brne	.+4      	; 0x4f58 <__SPKR_init+0x16>
    4f54:	57 9a       	sbi	0x0a, 7	; 10
    4f56:	5f 98       	cbi	0x0b, 7	; 11
    4f58:	80 91 e8 04 	lds	r24, 0x04E8
    4f5c:	88 23       	and	r24, r24
    4f5e:	d1 f4       	brne	.+52     	; 0x4f94 <__SPKR_init+0x52>
    4f60:	92 30       	cpi	r25, 0x02	; 2
    4f62:	c1 f4       	brne	.+48     	; 0x4f94 <__SPKR_init+0x52>
    4f64:	10 92 80 00 	sts	0x0080, r1
    4f68:	10 92 81 00 	sts	0x0081, r1
    4f6c:	80 91 81 00 	lds	r24, 0x0081
    4f70:	88 60       	ori	r24, 0x08	; 8
    4f72:	80 93 81 00 	sts	0x0081, r24
    4f76:	80 91 81 00 	lds	r24, 0x0081
    4f7a:	81 60       	ori	r24, 0x01	; 1
    4f7c:	80 93 81 00 	sts	0x0081, r24
    4f80:	10 92 85 00 	sts	0x0085, r1
    4f84:	10 92 84 00 	sts	0x0084, r1
    4f88:	81 e0       	ldi	r24, 0x01	; 1
    4f8a:	80 93 89 00 	sts	0x0089, r24
    4f8e:	80 e9       	ldi	r24, 0x90	; 144
    4f90:	80 93 88 00 	sts	0x0088, r24
    4f94:	08 95       	ret

00004f96 <SPKR_play_beep>:
    4f96:	8f 92       	push	r8
    4f98:	9f 92       	push	r9
    4f9a:	af 92       	push	r10
    4f9c:	bf 92       	push	r11
    4f9e:	cf 92       	push	r12
    4fa0:	df 92       	push	r13
    4fa2:	ef 92       	push	r14
    4fa4:	ff 92       	push	r15
    4fa6:	0f 93       	push	r16
    4fa8:	1f 93       	push	r17
    4faa:	cf 93       	push	r28
    4fac:	df 93       	push	r29
    4fae:	4b 01       	movw	r8, r22
    4fb0:	5c 01       	movw	r10, r24
    4fb2:	ea 01       	movw	r28, r20
    4fb4:	b9 01       	movw	r22, r18
    4fb6:	21 15       	cp	r18, r1
    4fb8:	31 05       	cpc	r19, r1
    4fba:	39 f1       	breq	.+78     	; 0x500a <SPKR_play_beep+0x74>
    4fbc:	9e 01       	movw	r18, r28
    4fbe:	44 27       	eor	r20, r20
    4fc0:	37 fd       	sbrc	r19, 7
    4fc2:	40 95       	com	r20
    4fc4:	54 2f       	mov	r21, r20
    4fc6:	65 36       	cpi	r22, 0x65	; 101
    4fc8:	71 05       	cpc	r23, r1
    4fca:	10 f0       	brcs	.+4      	; 0x4fd0 <SPKR_play_beep+0x3a>
    4fcc:	64 e6       	ldi	r22, 0x64	; 100
    4fce:	70 e0       	ldi	r23, 0x00	; 0
    4fd0:	80 e0       	ldi	r24, 0x00	; 0
    4fd2:	90 e0       	ldi	r25, 0x00	; 0
    4fd4:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <__mulsi3>
    4fd8:	24 e6       	ldi	r18, 0x64	; 100
    4fda:	30 e0       	ldi	r19, 0x00	; 0
    4fdc:	40 e0       	ldi	r20, 0x00	; 0
    4fde:	50 e0       	ldi	r21, 0x00	; 0
    4fe0:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <__udivmodsi4>
    4fe4:	79 01       	movw	r14, r18
    4fe6:	8a 01       	movw	r16, r20
    4fe8:	c5 01       	movw	r24, r10
    4fea:	b4 01       	movw	r22, r8
    4fec:	0e 94 95 29 	call	0x532a	; 0x532a <SPKR_beep>
    4ff0:	c7 01       	movw	r24, r14
    4ff2:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
    4ff6:	60 e0       	ldi	r22, 0x00	; 0
    4ff8:	70 e0       	ldi	r23, 0x00	; 0
    4ffa:	80 e0       	ldi	r24, 0x00	; 0
    4ffc:	90 e0       	ldi	r25, 0x00	; 0
    4ffe:	0e 94 95 29 	call	0x532a	; 0x532a <SPKR_beep>
    5002:	ce 01       	movw	r24, r28
    5004:	8e 19       	sub	r24, r14
    5006:	9f 09       	sbc	r25, r15
    5008:	04 c0       	rjmp	.+8      	; 0x5012 <SPKR_play_beep+0x7c>
    500a:	41 15       	cp	r20, r1
    500c:	51 05       	cpc	r21, r1
    500e:	19 f0       	breq	.+6      	; 0x5016 <SPKR_play_beep+0x80>
    5010:	ca 01       	movw	r24, r20
    5012:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <TMRSRVC_delay>
    5016:	df 91       	pop	r29
    5018:	cf 91       	pop	r28
    501a:	1f 91       	pop	r17
    501c:	0f 91       	pop	r16
    501e:	ff 90       	pop	r15
    5020:	ef 90       	pop	r14
    5022:	df 90       	pop	r13
    5024:	cf 90       	pop	r12
    5026:	bf 90       	pop	r11
    5028:	af 90       	pop	r10
    502a:	9f 90       	pop	r9
    502c:	8f 90       	pop	r8
    502e:	08 95       	ret

00005030 <__SPKR_stop>:
    5030:	ef e6       	ldi	r30, 0x6F	; 111
    5032:	f0 e0       	ldi	r31, 0x00	; 0
    5034:	80 81       	ld	r24, Z
    5036:	8d 7f       	andi	r24, 0xFD	; 253
    5038:	80 83       	st	Z, r24
    503a:	08 95       	ret

0000503c <STEPPER_go>:
    503c:	98 2f       	mov	r25, r24
    503e:	81 e0       	ldi	r24, 0x01	; 1
    5040:	80 93 00 08 	sts	0x0800, r24
    5044:	91 30       	cpi	r25, 0x01	; 1
    5046:	51 f0       	breq	.+20     	; 0x505c <STEPPER_go+0x20>
    5048:	91 30       	cpi	r25, 0x01	; 1
    504a:	18 f0       	brcs	.+6      	; 0x5052 <STEPPER_go+0x16>
    504c:	92 30       	cpi	r25, 0x02	; 2
    504e:	41 f4       	brne	.+16     	; 0x5060 <STEPPER_go+0x24>
    5050:	03 c0       	rjmp	.+6      	; 0x5058 <STEPPER_go+0x1c>
    5052:	10 92 e8 07 	sts	0x07E8, r1
    5056:	04 c0       	rjmp	.+8      	; 0x5060 <STEPPER_go+0x24>
    5058:	10 92 e8 07 	sts	0x07E8, r1
    505c:	10 92 e9 07 	sts	0x07E9, r1
    5060:	10 92 00 08 	sts	0x0800, r1
    5064:	08 95       	ret

00005066 <__STEPPER_init>:
    5066:	3a 9a       	sbi	0x07, 2	; 7
    5068:	3b 9a       	sbi	0x07, 3	; 7
    506a:	3c 9a       	sbi	0x07, 4	; 7
    506c:	3d 9a       	sbi	0x07, 5	; 7
    506e:	3e 9a       	sbi	0x07, 6	; 7
    5070:	3f 9a       	sbi	0x07, 7	; 7
    5072:	88 b1       	in	r24, 0x08	; 8
    5074:	83 70       	andi	r24, 0x03	; 3
    5076:	88 b9       	out	0x08, r24	; 8
    5078:	08 95       	ret

0000507a <STEPPER_set_stop_mode>:
    507a:	98 2f       	mov	r25, r24
    507c:	81 e0       	ldi	r24, 0x01	; 1
    507e:	80 93 00 08 	sts	0x0800, r24
    5082:	91 30       	cpi	r25, 0x01	; 1
    5084:	51 f0       	breq	.+20     	; 0x509a <STEPPER_set_stop_mode+0x20>
    5086:	91 30       	cpi	r25, 0x01	; 1
    5088:	18 f0       	brcs	.+6      	; 0x5090 <STEPPER_set_stop_mode+0x16>
    508a:	92 30       	cpi	r25, 0x02	; 2
    508c:	41 f4       	brne	.+16     	; 0x509e <STEPPER_set_stop_mode+0x24>
    508e:	03 c0       	rjmp	.+6      	; 0x5096 <STEPPER_set_stop_mode+0x1c>
    5090:	60 93 ea 07 	sts	0x07EA, r22
    5094:	04 c0       	rjmp	.+8      	; 0x509e <STEPPER_set_stop_mode+0x24>
    5096:	60 93 ea 07 	sts	0x07EA, r22
    509a:	60 93 eb 07 	sts	0x07EB, r22
    509e:	10 92 00 08 	sts	0x0800, r1
    50a2:	08 95       	ret

000050a4 <STEPPER_setup_decels>:
    50a4:	0f 93       	push	r16
    50a6:	1f 93       	push	r17
    50a8:	cf 93       	push	r28
    50aa:	df 93       	push	r29
    50ac:	eb 01       	movw	r28, r22
    50ae:	8a 01       	movw	r16, r20
    50b0:	81 30       	cpi	r24, 0x01	; 1
    50b2:	01 f1       	breq	.+64     	; 0x50f4 <STEPPER_setup_decels+0x50>
    50b4:	81 30       	cpi	r24, 0x01	; 1
    50b6:	18 f0       	brcs	.+6      	; 0x50be <STEPPER_setup_decels+0x1a>
    50b8:	82 30       	cpi	r24, 0x02	; 2
    50ba:	61 f5       	brne	.+88     	; 0x5114 <STEPPER_setup_decels+0x70>
    50bc:	0d c0       	rjmp	.+26     	; 0x50d8 <STEPPER_setup_decels+0x34>
    50be:	80 91 d4 07 	lds	r24, 0x07D4
    50c2:	90 91 d5 07 	lds	r25, 0x07D5
    50c6:	89 2b       	or	r24, r25
    50c8:	11 f0       	breq	.+4      	; 0x50ce <STEPPER_setup_decels+0x2a>
    50ca:	80 e0       	ldi	r24, 0x00	; 0
    50cc:	1a c0       	rjmp	.+52     	; 0x5102 <STEPPER_setup_decels+0x5e>
    50ce:	10 92 e1 07 	sts	0x07E1, r1
    50d2:	10 92 e0 07 	sts	0x07E0, r1
    50d6:	1e c0       	rjmp	.+60     	; 0x5114 <STEPPER_setup_decels+0x70>
    50d8:	80 91 d4 07 	lds	r24, 0x07D4
    50dc:	90 91 d5 07 	lds	r25, 0x07D5
    50e0:	89 2b       	or	r24, r25
    50e2:	21 f0       	breq	.+8      	; 0x50ec <STEPPER_setup_decels+0x48>
    50e4:	80 e0       	ldi	r24, 0x00	; 0
    50e6:	0e 94 c8 29 	call	0x5390	; 0x5390 <STEPPER_set_decel_step_values>
    50ea:	04 c0       	rjmp	.+8      	; 0x50f4 <STEPPER_setup_decels+0x50>
    50ec:	10 92 e1 07 	sts	0x07E1, r1
    50f0:	10 92 e0 07 	sts	0x07E0, r1
    50f4:	80 91 d6 07 	lds	r24, 0x07D6
    50f8:	90 91 d7 07 	lds	r25, 0x07D7
    50fc:	89 2b       	or	r24, r25
    50fe:	31 f0       	breq	.+12     	; 0x510c <STEPPER_setup_decels+0x68>
    5100:	81 e0       	ldi	r24, 0x01	; 1
    5102:	be 01       	movw	r22, r28
    5104:	a8 01       	movw	r20, r16
    5106:	0e 94 c8 29 	call	0x5390	; 0x5390 <STEPPER_set_decel_step_values>
    510a:	04 c0       	rjmp	.+8      	; 0x5114 <STEPPER_setup_decels+0x70>
    510c:	10 92 e3 07 	sts	0x07E3, r1
    5110:	10 92 e2 07 	sts	0x07E2, r1
    5114:	df 91       	pop	r29
    5116:	cf 91       	pop	r28
    5118:	1f 91       	pop	r17
    511a:	0f 91       	pop	r16
    511c:	08 95       	ret

0000511e <SYS_init>:
    511e:	10 92 03 08 	sts	0x0803, r1
    5122:	10 92 04 08 	sts	0x0804, r1
    5126:	10 92 08 08 	sts	0x0808, r1
    512a:	10 92 05 08 	sts	0x0805, r1
    512e:	10 92 07 08 	sts	0x0807, r1
    5132:	10 92 09 08 	sts	0x0809, r1
    5136:	10 92 0a 08 	sts	0x080A, r1
    513a:	10 92 0b 08 	sts	0x080B, r1
    513e:	10 92 0c 08 	sts	0x080C, r1
    5142:	10 92 0d 08 	sts	0x080D, r1
    5146:	10 92 0e 08 	sts	0x080E, r1
    514a:	10 92 0f 08 	sts	0x080F, r1
    514e:	10 92 10 08 	sts	0x0810, r1
    5152:	10 92 11 08 	sts	0x0811, r1
    5156:	10 92 12 08 	sts	0x0812, r1
    515a:	10 92 13 08 	sts	0x0813, r1
    515e:	10 92 14 08 	sts	0x0814, r1
    5162:	08 95       	ret

00005164 <TMRSRVC_insert>:
    5164:	cf 92       	push	r12
    5166:	df 92       	push	r13
    5168:	ef 92       	push	r14
    516a:	ff 92       	push	r15
    516c:	0f 93       	push	r16
    516e:	1f 93       	push	r17
    5170:	cf 93       	push	r28
    5172:	df 93       	push	r29
    5174:	ec 01       	movw	r28, r24
    5176:	80 91 3a 08 	lds	r24, 0x083A
    517a:	88 23       	and	r24, r24
    517c:	39 f4       	brne	.+14     	; 0x518c <TMRSRVC_insert+0x28>
    517e:	d0 93 3c 08 	sts	0x083C, r29
    5182:	c0 93 3b 08 	sts	0x083B, r28
    5186:	0e 94 40 29 	call	0x5280	; 0x5280 <TMRSRVC_start>
    518a:	47 c0       	rjmp	.+142    	; 0x521a <TMRSRVC_insert+0xb6>
    518c:	c0 90 3b 08 	lds	r12, 0x083B
    5190:	d0 90 3c 08 	lds	r13, 0x083C
    5194:	00 e0       	ldi	r16, 0x00	; 0
    5196:	10 e0       	ldi	r17, 0x00	; 0
    5198:	ee 24       	eor	r14, r14
    519a:	ff 24       	eor	r15, r15
    519c:	37 c0       	rjmp	.+110    	; 0x520c <TMRSRVC_insert+0xa8>
    519e:	a8 81       	ld	r26, Y
    51a0:	b9 81       	ldd	r27, Y+1	; 0x01
    51a2:	fd 01       	movw	r30, r26
    51a4:	64 81       	ldd	r22, Z+4	; 0x04
    51a6:	75 81       	ldd	r23, Z+5	; 0x05
    51a8:	f6 01       	movw	r30, r12
    51aa:	40 81       	ld	r20, Z
    51ac:	51 81       	ldd	r21, Z+1	; 0x01
    51ae:	fa 01       	movw	r30, r20
    51b0:	84 81       	ldd	r24, Z+4	; 0x04
    51b2:	95 81       	ldd	r25, Z+5	; 0x05
    51b4:	9b 01       	movw	r18, r22
    51b6:	28 1b       	sub	r18, r24
    51b8:	39 0b       	sbc	r19, r25
    51ba:	37 ff       	sbrs	r19, 7
    51bc:	0f c0       	rjmp	.+30     	; 0x51dc <TMRSRVC_insert+0x78>
    51be:	86 1b       	sub	r24, r22
    51c0:	97 0b       	sbc	r25, r23
    51c2:	95 83       	std	Z+5, r25	; 0x05
    51c4:	84 83       	std	Z+4, r24	; 0x04
    51c6:	db 82       	std	Y+3, r13	; 0x03
    51c8:	ca 82       	std	Y+2, r12	; 0x02
    51ca:	01 2b       	or	r16, r17
    51cc:	29 f4       	brne	.+10     	; 0x51d8 <TMRSRVC_insert+0x74>
    51ce:	d0 93 3c 08 	sts	0x083C, r29
    51d2:	c0 93 3b 08 	sts	0x083B, r28
    51d6:	21 c0       	rjmp	.+66     	; 0x521a <TMRSRVC_insert+0xb6>
    51d8:	f7 01       	movw	r30, r14
    51da:	0c c0       	rjmp	.+24     	; 0x51f4 <TMRSRVC_insert+0x90>
    51dc:	f6 01       	movw	r30, r12
    51de:	82 81       	ldd	r24, Z+2	; 0x02
    51e0:	93 81       	ldd	r25, Z+3	; 0x03
    51e2:	21 15       	cp	r18, r1
    51e4:	31 05       	cpc	r19, r1
    51e6:	49 f4       	brne	.+18     	; 0x51fa <TMRSRVC_insert+0x96>
    51e8:	fd 01       	movw	r30, r26
    51ea:	15 82       	std	Z+5, r1	; 0x05
    51ec:	14 82       	std	Z+4, r1	; 0x04
    51ee:	9b 83       	std	Y+3, r25	; 0x03
    51f0:	8a 83       	std	Y+2, r24	; 0x02
    51f2:	f6 01       	movw	r30, r12
    51f4:	d3 83       	std	Z+3, r29	; 0x03
    51f6:	c2 83       	std	Z+2, r28	; 0x02
    51f8:	10 c0       	rjmp	.+32     	; 0x521a <TMRSRVC_insert+0xb6>
    51fa:	fd 01       	movw	r30, r26
    51fc:	35 83       	std	Z+5, r19	; 0x05
    51fe:	24 83       	std	Z+4, r18	; 0x04
    5200:	00 97       	sbiw	r24, 0x00	; 0
    5202:	b9 f3       	breq	.-18     	; 0x51f2 <TMRSRVC_insert+0x8e>
    5204:	0f 5f       	subi	r16, 0xFF	; 255
    5206:	1f 4f       	sbci	r17, 0xFF	; 255
    5208:	76 01       	movw	r14, r12
    520a:	6c 01       	movw	r12, r24
    520c:	80 91 3a 08 	lds	r24, 0x083A
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	08 17       	cp	r16, r24
    5214:	19 07       	cpc	r17, r25
    5216:	18 f2       	brcs	.-122    	; 0x519e <TMRSRVC_insert+0x3a>
    5218:	ec cf       	rjmp	.-40     	; 0x51f2 <TMRSRVC_insert+0x8e>
    521a:	80 91 3a 08 	lds	r24, 0x083A
    521e:	8f 5f       	subi	r24, 0xFF	; 255
    5220:	80 93 3a 08 	sts	0x083A, r24
    5224:	df 91       	pop	r29
    5226:	cf 91       	pop	r28
    5228:	1f 91       	pop	r17
    522a:	0f 91       	pop	r16
    522c:	ff 90       	pop	r15
    522e:	ef 90       	pop	r14
    5230:	df 90       	pop	r13
    5232:	cf 90       	pop	r12
    5234:	08 95       	ret

00005236 <TMRSRVC_open>:
    5236:	88 e0       	ldi	r24, 0x08	; 8
    5238:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    523c:	88 23       	and	r24, r24
    523e:	b9 f4       	brne	.+46     	; 0x526e <TMRSRVC_open+0x38>
    5240:	10 92 3a 08 	sts	0x083A, r1
    5244:	10 92 3c 08 	sts	0x083C, r1
    5248:	10 92 3b 08 	sts	0x083B, r1
    524c:	10 92 f8 04 	sts	0x04F8, r1
    5250:	10 92 f9 04 	sts	0x04F9, r1
    5254:	80 e1       	ldi	r24, 0x10	; 16
    5256:	65 e3       	ldi	r22, 0x35	; 53
    5258:	7a e2       	ldi	r23, 0x2A	; 42
    525a:	0e 94 51 29 	call	0x52a2	; 0x52a2 <__ISR_attach>
    525e:	0e 94 3c 2a 	call	0x5478	; 0x5478 <__TMRSRVC_init>
    5262:	0e 94 3a 29 	call	0x5274	; 0x5274 <__TMRSRVC_start>
    5266:	88 e0       	ldi	r24, 0x08	; 8
    5268:	61 e0       	ldi	r22, 0x01	; 1
    526a:	0e 94 e7 20 	call	0x41ce	; 0x41ce <SYS_set_state>
    526e:	88 e0       	ldi	r24, 0x08	; 8
    5270:	91 e0       	ldi	r25, 0x01	; 1
    5272:	08 95       	ret

00005274 <__TMRSRVC_start>:
    5274:	ee e6       	ldi	r30, 0x6E	; 110
    5276:	f0 e0       	ldi	r31, 0x00	; 0
    5278:	80 81       	ld	r24, Z
    527a:	82 60       	ori	r24, 0x02	; 2
    527c:	80 83       	st	Z, r24
    527e:	08 95       	ret

00005280 <TMRSRVC_start>:
    5280:	81 e0       	ldi	r24, 0x01	; 1
    5282:	80 93 f9 04 	sts	0x04F9, r24
    5286:	08 95       	ret

00005288 <I2C_enable>:
    5288:	80 91 3d 08 	lds	r24, 0x083D
    528c:	81 30       	cpi	r24, 0x01	; 1
    528e:	29 f4       	brne	.+10     	; 0x529a <I2C_enable+0x12>
    5290:	80 91 bc 00 	lds	r24, 0x00BC
    5294:	84 60       	ori	r24, 0x04	; 4
    5296:	80 93 bc 00 	sts	0x00BC, r24
    529a:	08 95       	ret

0000529c <__I2C_init>:
    529c:	38 98       	cbi	0x07, 0	; 7
    529e:	39 98       	cbi	0x07, 1	; 7
    52a0:	08 95       	ret

000052a2 <__ISR_attach>:
    52a2:	80 32       	cpi	r24, 0x20	; 32
    52a4:	18 f0       	brcs	.+6      	; 0x52ac <__ISR_attach+0xa>
    52a6:	20 e0       	ldi	r18, 0x00	; 0
    52a8:	30 e0       	ldi	r19, 0x00	; 0
    52aa:	0a c0       	rjmp	.+20     	; 0x52c0 <__ISR_attach+0x1e>
    52ac:	e8 2f       	mov	r30, r24
    52ae:	f0 e0       	ldi	r31, 0x00	; 0
    52b0:	ee 0f       	add	r30, r30
    52b2:	ff 1f       	adc	r31, r31
    52b4:	e8 56       	subi	r30, 0x68	; 104
    52b6:	fb 4f       	sbci	r31, 0xFB	; 251
    52b8:	20 81       	ld	r18, Z
    52ba:	31 81       	ldd	r19, Z+1	; 0x01
    52bc:	71 83       	std	Z+1, r23	; 0x01
    52be:	60 83       	st	Z, r22
    52c0:	c9 01       	movw	r24, r18
    52c2:	08 95       	ret

000052c4 <__ATMEGA_init>:
    52c4:	24 9a       	sbi	0x04, 4	; 4
    52c6:	2c 9a       	sbi	0x05, 4	; 5
    52c8:	08 95       	ret

000052ca <SPI_default_config>:
    52ca:	83 e5       	ldi	r24, 0x53	; 83
    52cc:	8c bd       	out	0x2c, r24	; 44
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	8d bd       	out	0x2d, r24	; 45
    52d2:	8d e0       	ldi	r24, 0x0D	; 13
    52d4:	8a 95       	dec	r24
    52d6:	f1 f7       	brne	.-4      	; 0x52d4 <SPI_default_config+0xa>
    52d8:	08 95       	ret

000052da <SPI_ATtiny0_config>:
    52da:	83 e5       	ldi	r24, 0x53	; 83
    52dc:	8c bd       	out	0x2c, r24	; 44
    52de:	1d bc       	out	0x2d, r1	; 45
    52e0:	84 ef       	ldi	r24, 0xF4	; 244
    52e2:	91 e0       	ldi	r25, 0x01	; 1
    52e4:	01 97       	sbiw	r24, 0x01	; 1
    52e6:	f1 f7       	brne	.-4      	; 0x52e4 <SPI_ATtiny0_config+0xa>
    52e8:	08 95       	ret

000052ea <SPI_PSXC_config>:
    52ea:	8f e7       	ldi	r24, 0x7F	; 127
    52ec:	8c bd       	out	0x2c, r24	; 44
    52ee:	1d bc       	out	0x2d, r1	; 45
    52f0:	84 ef       	ldi	r24, 0xF4	; 244
    52f2:	91 e0       	ldi	r25, 0x01	; 1
    52f4:	01 97       	sbiw	r24, 0x01	; 1
    52f6:	f1 f7       	brne	.-4      	; 0x52f4 <SPI_PSXC_config+0xa>
    52f8:	08 95       	ret

000052fa <SPI_LCD_config>:
    52fa:	83 e5       	ldi	r24, 0x53	; 83
    52fc:	8c bd       	out	0x2c, r24	; 44
    52fe:	81 e0       	ldi	r24, 0x01	; 1
    5300:	8d bd       	out	0x2d, r24	; 45
    5302:	8d e0       	ldi	r24, 0x0D	; 13
    5304:	8a 95       	dec	r24
    5306:	f1 f7       	brne	.-4      	; 0x5304 <SPI_LCD_config+0xa>
    5308:	08 95       	ret

0000530a <SPI_FLASH_config>:
    530a:	83 e5       	ldi	r24, 0x53	; 83
    530c:	8c bd       	out	0x2c, r24	; 44
    530e:	81 e0       	ldi	r24, 0x01	; 1
    5310:	8d bd       	out	0x2d, r24	; 45
    5312:	84 ef       	ldi	r24, 0xF4	; 244
    5314:	91 e0       	ldi	r25, 0x01	; 1
    5316:	01 97       	sbiw	r24, 0x01	; 1
    5318:	f1 f7       	brne	.-4      	; 0x5316 <SPI_FLASH_config+0xc>
    531a:	08 95       	ret

0000531c <__SPI_init>:
    531c:	25 9a       	sbi	0x04, 5	; 4
    531e:	26 98       	cbi	0x04, 6	; 4
    5320:	27 9a       	sbi	0x04, 7	; 4
    5322:	20 9a       	sbi	0x04, 0	; 4
    5324:	21 9a       	sbi	0x04, 1	; 4
    5326:	22 9a       	sbi	0x04, 2	; 4
    5328:	08 95       	ret

0000532a <SPKR_beep>:
    532a:	9b 01       	movw	r18, r22
    532c:	ac 01       	movw	r20, r24
    532e:	80 91 e9 04 	lds	r24, 0x04E9
    5332:	88 23       	and	r24, r24
    5334:	81 f0       	breq	.+32     	; 0x5356 <SPKR_beep+0x2c>
    5336:	da 01       	movw	r26, r20
    5338:	c9 01       	movw	r24, r18
    533a:	88 0f       	add	r24, r24
    533c:	99 1f       	adc	r25, r25
    533e:	aa 1f       	adc	r26, r26
    5340:	bb 1f       	adc	r27, r27
    5342:	90 93 f5 04 	sts	0x04F5, r25
    5346:	80 93 f4 04 	sts	0x04F4, r24
    534a:	21 15       	cp	r18, r1
    534c:	31 05       	cpc	r19, r1
    534e:	41 05       	cpc	r20, r1
    5350:	51 05       	cpc	r21, r1
    5352:	09 f4       	brne	.+2      	; 0x5356 <SPKR_beep+0x2c>
    5354:	5f 98       	cbi	0x0b, 7	; 11
    5356:	08 95       	ret

00005358 <__SPKR_close>:
    5358:	82 30       	cpi	r24, 0x02	; 2
    535a:	29 f4       	brne	.+10     	; 0x5366 <__SPKR_close+0xe>
    535c:	80 91 81 00 	lds	r24, 0x0081
    5360:	8e 7f       	andi	r24, 0xFE	; 254
    5362:	80 93 81 00 	sts	0x0081, r24
    5366:	80 91 e8 04 	lds	r24, 0x04E8
    536a:	81 30       	cpi	r24, 0x01	; 1
    536c:	31 f4       	brne	.+12     	; 0x537a <__SPKR_close+0x22>
    536e:	80 91 e9 04 	lds	r24, 0x04E9
    5372:	81 30       	cpi	r24, 0x01	; 1
    5374:	11 f4       	brne	.+4      	; 0x537a <__SPKR_close+0x22>
    5376:	00 00       	nop
    5378:	08 95       	ret
    537a:	80 91 e8 04 	lds	r24, 0x04E8
    537e:	81 30       	cpi	r24, 0x01	; 1
    5380:	21 f0       	breq	.+8      	; 0x538a <__SPKR_close+0x32>
    5382:	80 91 e9 04 	lds	r24, 0x04E9
    5386:	81 30       	cpi	r24, 0x01	; 1
    5388:	11 f4       	brne	.+4      	; 0x538e <__SPKR_close+0x36>
    538a:	5f 98       	cbi	0x0b, 7	; 11
    538c:	57 98       	cbi	0x0a, 7	; 10
    538e:	08 95       	ret

00005390 <STEPPER_set_decel_step_values>:
    5390:	ef 92       	push	r14
    5392:	ff 92       	push	r15
    5394:	0f 93       	push	r16
    5396:	1f 93       	push	r17
    5398:	cf 93       	push	r28
    539a:	df 93       	push	r29
    539c:	eb 01       	movw	r28, r22
    539e:	88 23       	and	r24, r24
    53a0:	21 f0       	breq	.+8      	; 0x53aa <STEPPER_set_decel_step_values+0x1a>
    53a2:	81 30       	cpi	r24, 0x01	; 1
    53a4:	09 f0       	breq	.+2      	; 0x53a8 <STEPPER_set_decel_step_values+0x18>
    53a6:	5a c0       	rjmp	.+180    	; 0x545c <STEPPER_set_decel_step_values+0xcc>
    53a8:	2d c0       	rjmp	.+90     	; 0x5404 <STEPPER_set_decel_step_values+0x74>
    53aa:	9a 01       	movw	r18, r20
    53ac:	40 e0       	ldi	r20, 0x00	; 0
    53ae:	50 e0       	ldi	r21, 0x00	; 0
    53b0:	ca 01       	movw	r24, r20
    53b2:	b9 01       	movw	r22, r18
    53b4:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <__mulsi3>
    53b8:	20 91 d4 07 	lds	r18, 0x07D4
    53bc:	30 91 d5 07 	lds	r19, 0x07D5
    53c0:	22 0f       	add	r18, r18
    53c2:	33 1f       	adc	r19, r19
    53c4:	40 e0       	ldi	r20, 0x00	; 0
    53c6:	50 e0       	ldi	r21, 0x00	; 0
    53c8:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <__udivmodsi4>
    53cc:	79 01       	movw	r14, r18
    53ce:	8a 01       	movw	r16, r20
    53d0:	a8 01       	movw	r20, r16
    53d2:	97 01       	movw	r18, r14
    53d4:	22 0f       	add	r18, r18
    53d6:	33 1f       	adc	r19, r19
    53d8:	44 1f       	adc	r20, r20
    53da:	55 1f       	adc	r21, r21
    53dc:	ce 01       	movw	r24, r28
    53de:	a0 e0       	ldi	r26, 0x00	; 0
    53e0:	b0 e0       	ldi	r27, 0x00	; 0
    53e2:	82 17       	cp	r24, r18
    53e4:	93 07       	cpc	r25, r19
    53e6:	a4 07       	cpc	r26, r20
    53e8:	b5 07       	cpc	r27, r21
    53ea:	28 f0       	brcs	.+10     	; 0x53f6 <STEPPER_set_decel_step_values+0x66>
    53ec:	f0 92 e1 07 	sts	0x07E1, r15
    53f0:	e0 92 e0 07 	sts	0x07E0, r14
    53f4:	33 c0       	rjmp	.+102    	; 0x545c <STEPPER_set_decel_step_values+0xcc>
    53f6:	d6 95       	lsr	r29
    53f8:	c7 95       	ror	r28
    53fa:	d0 93 e1 07 	sts	0x07E1, r29
    53fe:	c0 93 e0 07 	sts	0x07E0, r28
    5402:	2c c0       	rjmp	.+88     	; 0x545c <STEPPER_set_decel_step_values+0xcc>
    5404:	9a 01       	movw	r18, r20
    5406:	40 e0       	ldi	r20, 0x00	; 0
    5408:	50 e0       	ldi	r21, 0x00	; 0
    540a:	ca 01       	movw	r24, r20
    540c:	b9 01       	movw	r22, r18
    540e:	0e 94 fa 34 	call	0x69f4	; 0x69f4 <__mulsi3>
    5412:	20 91 d6 07 	lds	r18, 0x07D6
    5416:	30 91 d7 07 	lds	r19, 0x07D7
    541a:	22 0f       	add	r18, r18
    541c:	33 1f       	adc	r19, r19
    541e:	40 e0       	ldi	r20, 0x00	; 0
    5420:	50 e0       	ldi	r21, 0x00	; 0
    5422:	0e 94 2c 35 	call	0x6a58	; 0x6a58 <__udivmodsi4>
    5426:	79 01       	movw	r14, r18
    5428:	8a 01       	movw	r16, r20
    542a:	a8 01       	movw	r20, r16
    542c:	97 01       	movw	r18, r14
    542e:	22 0f       	add	r18, r18
    5430:	33 1f       	adc	r19, r19
    5432:	44 1f       	adc	r20, r20
    5434:	55 1f       	adc	r21, r21
    5436:	ce 01       	movw	r24, r28
    5438:	a0 e0       	ldi	r26, 0x00	; 0
    543a:	b0 e0       	ldi	r27, 0x00	; 0
    543c:	82 17       	cp	r24, r18
    543e:	93 07       	cpc	r25, r19
    5440:	a4 07       	cpc	r26, r20
    5442:	b5 07       	cpc	r27, r21
    5444:	28 f0       	brcs	.+10     	; 0x5450 <STEPPER_set_decel_step_values+0xc0>
    5446:	f0 92 e3 07 	sts	0x07E3, r15
    544a:	e0 92 e2 07 	sts	0x07E2, r14
    544e:	06 c0       	rjmp	.+12     	; 0x545c <STEPPER_set_decel_step_values+0xcc>
    5450:	d6 95       	lsr	r29
    5452:	c7 95       	ror	r28
    5454:	d0 93 e3 07 	sts	0x07E3, r29
    5458:	c0 93 e2 07 	sts	0x07E2, r28
    545c:	df 91       	pop	r29
    545e:	cf 91       	pop	r28
    5460:	1f 91       	pop	r17
    5462:	0f 91       	pop	r16
    5464:	ff 90       	pop	r15
    5466:	ef 90       	pop	r14
    5468:	08 95       	ret

0000546a <__TIMER0_COMPA_vect>:
    546a:	0e 94 45 2a 	call	0x548a	; 0x548a <TMRSRVC_tick>
    546e:	0e 94 85 2a 	call	0x550a	; 0x550a <STEPPER_clk>
    5472:	0e 94 5e 2a 	call	0x54bc	; 0x54bc <SPKR_beep_clk>
    5476:	08 95       	ret

00005478 <__TMRSRVC_init>:
    5478:	84 b5       	in	r24, 0x24	; 36
    547a:	82 60       	ori	r24, 0x02	; 2
    547c:	84 bd       	out	0x24, r24	; 36
    547e:	85 b5       	in	r24, 0x25	; 37
    5480:	84 60       	ori	r24, 0x04	; 4
    5482:	85 bd       	out	0x25, r24	; 37
    5484:	8e e4       	ldi	r24, 0x4E	; 78
    5486:	87 bd       	out	0x27, r24	; 39
    5488:	08 95       	ret

0000548a <TMRSRVC_tick>:
    548a:	88 e0       	ldi	r24, 0x08	; 8
    548c:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    5490:	88 23       	and	r24, r24
    5492:	11 f4       	brne	.+4      	; 0x5498 <TMRSRVC_tick+0xe>
    5494:	84 e0       	ldi	r24, 0x04	; 4
    5496:	08 95       	ret
    5498:	80 91 f9 04 	lds	r24, 0x04F9
    549c:	88 23       	and	r24, r24
    549e:	11 f4       	brne	.+4      	; 0x54a4 <TMRSRVC_tick+0x1a>
    54a0:	83 e0       	ldi	r24, 0x03	; 3
    54a2:	08 95       	ret
    54a4:	80 91 f8 04 	lds	r24, 0x04F8
    54a8:	88 23       	and	r24, r24
    54aa:	11 f0       	breq	.+4      	; 0x54b0 <TMRSRVC_tick+0x26>
    54ac:	82 e0       	ldi	r24, 0x02	; 2
    54ae:	08 95       	ret
    54b0:	0e 94 d2 2c 	call	0x59a4	; 0x59a4 <TMRSRVC_process>
    54b4:	81 30       	cpi	r24, 0x01	; 1
    54b6:	e1 f3       	breq	.-8      	; 0x54b0 <TMRSRVC_tick+0x26>
    54b8:	80 e0       	ldi	r24, 0x00	; 0
    54ba:	08 95       	ret

000054bc <SPKR_beep_clk>:
    54bc:	80 91 e9 04 	lds	r24, 0x04E9
    54c0:	81 30       	cpi	r24, 0x01	; 1
    54c2:	11 f5       	brne	.+68     	; 0x5508 <SPKR_beep_clk+0x4c>
    54c4:	80 91 f2 04 	lds	r24, 0x04F2
    54c8:	90 91 f3 04 	lds	r25, 0x04F3
    54cc:	20 91 f4 04 	lds	r18, 0x04F4
    54d0:	30 91 f5 04 	lds	r19, 0x04F5
    54d4:	28 0f       	add	r18, r24
    54d6:	39 1f       	adc	r19, r25
    54d8:	30 93 f3 04 	sts	0x04F3, r19
    54dc:	20 93 f2 04 	sts	0x04F2, r18
    54e0:	80 91 f2 04 	lds	r24, 0x04F2
    54e4:	90 91 f3 04 	lds	r25, 0x04F3
    54e8:	88 5e       	subi	r24, 0xE8	; 232
    54ea:	93 40       	sbci	r25, 0x03	; 3
    54ec:	6c f0       	brlt	.+26     	; 0x5508 <SPKR_beep_clk+0x4c>
    54ee:	8b b1       	in	r24, 0x0b	; 11
    54f0:	80 58       	subi	r24, 0x80	; 128
    54f2:	8b b9       	out	0x0b, r24	; 11
    54f4:	80 91 f2 04 	lds	r24, 0x04F2
    54f8:	90 91 f3 04 	lds	r25, 0x04F3
    54fc:	88 5e       	subi	r24, 0xE8	; 232
    54fe:	93 40       	sbci	r25, 0x03	; 3
    5500:	90 93 f3 04 	sts	0x04F3, r25
    5504:	80 93 f2 04 	sts	0x04F2, r24
    5508:	08 95       	ret

0000550a <STEPPER_clk>:
    550a:	87 e0       	ldi	r24, 0x07	; 7
    550c:	0e 94 9f 20 	call	0x413e	; 0x413e <SYS_get_state>
    5510:	81 30       	cpi	r24, 0x01	; 1
    5512:	09 f0       	breq	.+2      	; 0x5516 <STEPPER_clk+0xc>
    5514:	aa c0       	rjmp	.+340    	; 0x566a <STEPPER_clk+0x160>
    5516:	80 91 d4 07 	lds	r24, 0x07D4
    551a:	90 91 d5 07 	lds	r25, 0x07D5
    551e:	89 2b       	or	r24, r25
    5520:	09 f1       	breq	.+66     	; 0x5564 <STEPPER_clk+0x5a>
    5522:	80 91 f8 07 	lds	r24, 0x07F8
    5526:	90 91 f9 07 	lds	r25, 0x07F9
    552a:	20 91 d4 07 	lds	r18, 0x07D4
    552e:	30 91 d5 07 	lds	r19, 0x07D5
    5532:	82 0f       	add	r24, r18
    5534:	93 1f       	adc	r25, r19
    5536:	90 93 f9 07 	sts	0x07F9, r25
    553a:	80 93 f8 07 	sts	0x07F8, r24
    553e:	80 91 f8 07 	lds	r24, 0x07F8
    5542:	90 91 f9 07 	lds	r25, 0x07F9
    5546:	88 5e       	subi	r24, 0xE8	; 232
    5548:	93 40       	sbci	r25, 0x03	; 3
    554a:	a4 f0       	brlt	.+40     	; 0x5574 <STEPPER_clk+0x6a>
    554c:	80 91 f8 07 	lds	r24, 0x07F8
    5550:	90 91 f9 07 	lds	r25, 0x07F9
    5554:	88 5e       	subi	r24, 0xE8	; 232
    5556:	93 40       	sbci	r25, 0x03	; 3
    5558:	90 93 f9 07 	sts	0x07F9, r25
    555c:	80 93 f8 07 	sts	0x07F8, r24
    5560:	41 e0       	ldi	r20, 0x01	; 1
    5562:	09 c0       	rjmp	.+18     	; 0x5576 <STEPPER_clk+0x6c>
    5564:	80 91 cc 07 	lds	r24, 0x07CC
    5568:	90 91 cd 07 	lds	r25, 0x07CD
    556c:	90 93 d1 07 	sts	0x07D1, r25
    5570:	80 93 d0 07 	sts	0x07D0, r24
    5574:	40 e0       	ldi	r20, 0x00	; 0
    5576:	80 91 d6 07 	lds	r24, 0x07D6
    557a:	90 91 d7 07 	lds	r25, 0x07D7
    557e:	89 2b       	or	r24, r25
    5580:	09 f1       	breq	.+66     	; 0x55c4 <STEPPER_clk+0xba>
    5582:	80 91 fa 07 	lds	r24, 0x07FA
    5586:	90 91 fb 07 	lds	r25, 0x07FB
    558a:	20 91 d6 07 	lds	r18, 0x07D6
    558e:	30 91 d7 07 	lds	r19, 0x07D7
    5592:	82 0f       	add	r24, r18
    5594:	93 1f       	adc	r25, r19
    5596:	90 93 fb 07 	sts	0x07FB, r25
    559a:	80 93 fa 07 	sts	0x07FA, r24
    559e:	80 91 fa 07 	lds	r24, 0x07FA
    55a2:	90 91 fb 07 	lds	r25, 0x07FB
    55a6:	88 5e       	subi	r24, 0xE8	; 232
    55a8:	93 40       	sbci	r25, 0x03	; 3
    55aa:	a4 f0       	brlt	.+40     	; 0x55d4 <STEPPER_clk+0xca>
    55ac:	80 91 fa 07 	lds	r24, 0x07FA
    55b0:	90 91 fb 07 	lds	r25, 0x07FB
    55b4:	88 5e       	subi	r24, 0xE8	; 232
    55b6:	93 40       	sbci	r25, 0x03	; 3
    55b8:	90 93 fb 07 	sts	0x07FB, r25
    55bc:	80 93 fa 07 	sts	0x07FA, r24
    55c0:	61 e0       	ldi	r22, 0x01	; 1
    55c2:	09 c0       	rjmp	.+18     	; 0x55d6 <STEPPER_clk+0xcc>
    55c4:	80 91 ce 07 	lds	r24, 0x07CE
    55c8:	90 91 cf 07 	lds	r25, 0x07CF
    55cc:	90 93 d3 07 	sts	0x07D3, r25
    55d0:	80 93 d2 07 	sts	0x07D2, r24
    55d4:	60 e0       	ldi	r22, 0x00	; 0
    55d6:	84 2f       	mov	r24, r20
    55d8:	0e 94 36 2b 	call	0x566c	; 0x566c <STEPPER_process_accel>
    55dc:	80 91 f4 07 	lds	r24, 0x07F4
    55e0:	90 91 f5 07 	lds	r25, 0x07F5
    55e4:	20 91 d0 07 	lds	r18, 0x07D0
    55e8:	30 91 d1 07 	lds	r19, 0x07D1
    55ec:	28 0f       	add	r18, r24
    55ee:	39 1f       	adc	r19, r25
    55f0:	30 93 f5 07 	sts	0x07F5, r19
    55f4:	20 93 f4 07 	sts	0x07F4, r18
    55f8:	80 91 f4 07 	lds	r24, 0x07F4
    55fc:	90 91 f5 07 	lds	r25, 0x07F5
    5600:	88 5e       	subi	r24, 0xE8	; 232
    5602:	93 40       	sbci	r25, 0x03	; 3
    5604:	14 f4       	brge	.+4      	; 0x560a <STEPPER_clk+0x100>
    5606:	40 e0       	ldi	r20, 0x00	; 0
    5608:	0b c0       	rjmp	.+22     	; 0x5620 <STEPPER_clk+0x116>
    560a:	80 91 f4 07 	lds	r24, 0x07F4
    560e:	90 91 f5 07 	lds	r25, 0x07F5
    5612:	88 5e       	subi	r24, 0xE8	; 232
    5614:	93 40       	sbci	r25, 0x03	; 3
    5616:	90 93 f5 07 	sts	0x07F5, r25
    561a:	80 93 f4 07 	sts	0x07F4, r24
    561e:	41 e0       	ldi	r20, 0x01	; 1
    5620:	80 91 f6 07 	lds	r24, 0x07F6
    5624:	90 91 f7 07 	lds	r25, 0x07F7
    5628:	20 91 d2 07 	lds	r18, 0x07D2
    562c:	30 91 d3 07 	lds	r19, 0x07D3
    5630:	28 0f       	add	r18, r24
    5632:	39 1f       	adc	r19, r25
    5634:	30 93 f7 07 	sts	0x07F7, r19
    5638:	20 93 f6 07 	sts	0x07F6, r18
    563c:	80 91 f6 07 	lds	r24, 0x07F6
    5640:	90 91 f7 07 	lds	r25, 0x07F7
    5644:	88 5e       	subi	r24, 0xE8	; 232
    5646:	93 40       	sbci	r25, 0x03	; 3
    5648:	14 f4       	brge	.+4      	; 0x564e <STEPPER_clk+0x144>
    564a:	60 e0       	ldi	r22, 0x00	; 0
    564c:	0b c0       	rjmp	.+22     	; 0x5664 <STEPPER_clk+0x15a>
    564e:	80 91 f6 07 	lds	r24, 0x07F6
    5652:	90 91 f7 07 	lds	r25, 0x07F7
    5656:	88 5e       	subi	r24, 0xE8	; 232
    5658:	93 40       	sbci	r25, 0x03	; 3
    565a:	90 93 f7 07 	sts	0x07F7, r25
    565e:	80 93 f6 07 	sts	0x07F6, r24
    5662:	61 e0       	ldi	r22, 0x01	; 1
    5664:	84 2f       	mov	r24, r20
    5666:	0e 94 7b 2b 	call	0x56f6	; 0x56f6 <STEPPER_process_run_mode>
    566a:	08 95       	ret

0000566c <STEPPER_process_accel>:
    566c:	88 23       	and	r24, r24
    566e:	f1 f0       	breq	.+60     	; 0x56ac <STEPPER_process_accel+0x40>
    5670:	20 91 cc 07 	lds	r18, 0x07CC
    5674:	30 91 cd 07 	lds	r19, 0x07CD
    5678:	80 91 d0 07 	lds	r24, 0x07D0
    567c:	90 91 d1 07 	lds	r25, 0x07D1
    5680:	28 1b       	sub	r18, r24
    5682:	39 0b       	sbc	r19, r25
    5684:	12 16       	cp	r1, r18
    5686:	13 06       	cpc	r1, r19
    5688:	34 f4       	brge	.+12     	; 0x5696 <STEPPER_process_accel+0x2a>
    568a:	80 91 d0 07 	lds	r24, 0x07D0
    568e:	90 91 d1 07 	lds	r25, 0x07D1
    5692:	01 96       	adiw	r24, 0x01	; 1
    5694:	07 c0       	rjmp	.+14     	; 0x56a4 <STEPPER_process_accel+0x38>
    5696:	23 2b       	or	r18, r19
    5698:	49 f0       	breq	.+18     	; 0x56ac <STEPPER_process_accel+0x40>
    569a:	80 91 d0 07 	lds	r24, 0x07D0
    569e:	90 91 d1 07 	lds	r25, 0x07D1
    56a2:	01 97       	sbiw	r24, 0x01	; 1
    56a4:	90 93 d1 07 	sts	0x07D1, r25
    56a8:	80 93 d0 07 	sts	0x07D0, r24
    56ac:	66 23       	and	r22, r22
    56ae:	11 f1       	breq	.+68     	; 0x56f4 <STEPPER_process_accel+0x88>
    56b0:	20 91 ce 07 	lds	r18, 0x07CE
    56b4:	30 91 cf 07 	lds	r19, 0x07CF
    56b8:	80 91 d2 07 	lds	r24, 0x07D2
    56bc:	90 91 d3 07 	lds	r25, 0x07D3
    56c0:	28 1b       	sub	r18, r24
    56c2:	39 0b       	sbc	r19, r25
    56c4:	12 16       	cp	r1, r18
    56c6:	13 06       	cpc	r1, r19
    56c8:	54 f4       	brge	.+20     	; 0x56de <STEPPER_process_accel+0x72>
    56ca:	80 91 d2 07 	lds	r24, 0x07D2
    56ce:	90 91 d3 07 	lds	r25, 0x07D3
    56d2:	01 96       	adiw	r24, 0x01	; 1
    56d4:	90 93 d3 07 	sts	0x07D3, r25
    56d8:	80 93 d2 07 	sts	0x07D2, r24
    56dc:	08 95       	ret
    56de:	23 2b       	or	r18, r19
    56e0:	49 f0       	breq	.+18     	; 0x56f4 <STEPPER_process_accel+0x88>
    56e2:	80 91 d2 07 	lds	r24, 0x07D2
    56e6:	90 91 d3 07 	lds	r25, 0x07D3
    56ea:	01 97       	sbiw	r24, 0x01	; 1
    56ec:	90 93 d3 07 	sts	0x07D3, r25
    56f0:	80 93 d2 07 	sts	0x07D2, r24
    56f4:	08 95       	ret

000056f6 <STEPPER_process_run_mode>:
    56f6:	0f 93       	push	r16
    56f8:	1f 93       	push	r17
    56fa:	18 2f       	mov	r17, r24
    56fc:	06 2f       	mov	r16, r22
    56fe:	80 91 00 08 	lds	r24, 0x0800
    5702:	88 23       	and	r24, r24
    5704:	09 f0       	breq	.+2      	; 0x5708 <STEPPER_process_run_mode+0x12>
    5706:	e7 c0       	rjmp	.+462    	; 0x58d6 <STEPPER_process_run_mode+0x1e0>
    5708:	80 91 e8 07 	lds	r24, 0x07E8
    570c:	88 23       	and	r24, r24
    570e:	09 f0       	breq	.+2      	; 0x5712 <STEPPER_process_run_mode+0x1c>
    5710:	5a c0       	rjmp	.+180    	; 0x57c6 <STEPPER_process_run_mode+0xd0>
    5712:	80 91 d0 07 	lds	r24, 0x07D0
    5716:	90 91 d1 07 	lds	r25, 0x07D1
    571a:	89 2b       	or	r24, r25
    571c:	e9 f4       	brne	.+58     	; 0x5758 <STEPPER_process_run_mode+0x62>
    571e:	80 91 fa 04 	lds	r24, 0x04FA
    5722:	83 7e       	andi	r24, 0xE3	; 227
    5724:	80 93 fa 04 	sts	0x04FA, r24
    5728:	10 92 f1 07 	sts	0x07F1, r1
    572c:	80 91 fc 07 	lds	r24, 0x07FC
    5730:	88 23       	and	r24, r24
    5732:	09 f4       	brne	.+2      	; 0x5736 <STEPPER_process_run_mode+0x40>
    5734:	5d c0       	rjmp	.+186    	; 0x57f0 <STEPPER_process_run_mode+0xfa>
    5736:	60 91 ea 07 	lds	r22, 0x07EA
    573a:	80 e0       	ldi	r24, 0x00	; 0
    573c:	0e 94 2c 20 	call	0x4058	; 0x4058 <STEPPER_stop>
    5740:	e0 91 fe 07 	lds	r30, 0x07FE
    5744:	f0 91 ff 07 	lds	r31, 0x07FF
    5748:	30 97       	sbiw	r30, 0x00	; 0
    574a:	09 f4       	brne	.+2      	; 0x574e <STEPPER_process_run_mode+0x58>
    574c:	51 c0       	rjmp	.+162    	; 0x57f0 <STEPPER_process_run_mode+0xfa>
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	80 83       	st	Z, r24
    5752:	10 92 fc 07 	sts	0x07FC, r1
    5756:	4c c0       	rjmp	.+152    	; 0x57f0 <STEPPER_process_run_mode+0xfa>
    5758:	80 91 ca 07 	lds	r24, 0x07CA
    575c:	81 30       	cpi	r24, 0x01	; 1
    575e:	41 f4       	brne	.+16     	; 0x5770 <STEPPER_process_run_mode+0x7a>
    5760:	80 91 dc 07 	lds	r24, 0x07DC
    5764:	90 91 dd 07 	lds	r25, 0x07DD
    5768:	01 97       	sbiw	r24, 0x01	; 1
    576a:	11 f4       	brne	.+4      	; 0x5770 <STEPPER_process_run_mode+0x7a>
    576c:	11 e0       	ldi	r17, 0x01	; 1
    576e:	02 c0       	rjmp	.+4      	; 0x5774 <STEPPER_process_run_mode+0x7e>
    5770:	11 23       	and	r17, r17
    5772:	f1 f1       	breq	.+124    	; 0x57f0 <STEPPER_process_run_mode+0xfa>
    5774:	e0 91 ef 07 	lds	r30, 0x07EF
    5778:	f0 e0       	ldi	r31, 0x00	; 0
    577a:	e6 5d       	subi	r30, 0xD6	; 214
    577c:	fb 4f       	sbci	r31, 0xFB	; 251
    577e:	90 91 fa 04 	lds	r25, 0x04FA
    5782:	93 7e       	andi	r25, 0xE3	; 227
    5784:	80 81       	ld	r24, Z
    5786:	89 2b       	or	r24, r25
    5788:	80 93 fa 04 	sts	0x04FA, r24
    578c:	80 91 ed 07 	lds	r24, 0x07ED
    5790:	88 23       	and	r24, r24
    5792:	21 f4       	brne	.+8      	; 0x579c <STEPPER_process_run_mode+0xa6>
    5794:	80 91 ef 07 	lds	r24, 0x07EF
    5798:	8f 5f       	subi	r24, 0xFF	; 255
    579a:	03 c0       	rjmp	.+6      	; 0x57a2 <STEPPER_process_run_mode+0xac>
    579c:	80 91 ef 07 	lds	r24, 0x07EF
    57a0:	81 50       	subi	r24, 0x01	; 1
    57a2:	80 93 ef 07 	sts	0x07EF, r24
    57a6:	80 91 ef 07 	lds	r24, 0x07EF
    57aa:	83 70       	andi	r24, 0x03	; 3
    57ac:	80 93 ef 07 	sts	0x07EF, r24
    57b0:	81 e0       	ldi	r24, 0x01	; 1
    57b2:	80 93 f1 07 	sts	0x07F1, r24
    57b6:	80 91 ca 07 	lds	r24, 0x07CA
    57ba:	81 30       	cpi	r24, 0x01	; 1
    57bc:	c9 f4       	brne	.+50     	; 0x57f0 <STEPPER_process_run_mode+0xfa>
    57be:	80 e0       	ldi	r24, 0x00	; 0
    57c0:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <STEPPER_process_step_mode>
    57c4:	15 c0       	rjmp	.+42     	; 0x57f0 <STEPPER_process_run_mode+0xfa>
    57c6:	90 91 fa 04 	lds	r25, 0x04FA
    57ca:	93 7e       	andi	r25, 0xE3	; 227
    57cc:	90 93 fa 04 	sts	0x04FA, r25
    57d0:	e0 91 ef 07 	lds	r30, 0x07EF
    57d4:	f0 e0       	ldi	r31, 0x00	; 0
    57d6:	e6 5d       	subi	r30, 0xD6	; 214
    57d8:	fb 4f       	sbci	r31, 0xFB	; 251
    57da:	80 81       	ld	r24, Z
    57dc:	89 2b       	or	r24, r25
    57de:	80 93 fa 04 	sts	0x04FA, r24
    57e2:	82 e0       	ldi	r24, 0x02	; 2
    57e4:	80 93 f1 07 	sts	0x07F1, r24
    57e8:	10 92 d1 07 	sts	0x07D1, r1
    57ec:	10 92 d0 07 	sts	0x07D0, r1
    57f0:	80 91 e9 07 	lds	r24, 0x07E9
    57f4:	88 23       	and	r24, r24
    57f6:	09 f0       	breq	.+2      	; 0x57fa <STEPPER_process_run_mode+0x104>
    57f8:	59 c0       	rjmp	.+178    	; 0x58ac <STEPPER_process_run_mode+0x1b6>
    57fa:	80 91 d2 07 	lds	r24, 0x07D2
    57fe:	90 91 d3 07 	lds	r25, 0x07D3
    5802:	89 2b       	or	r24, r25
    5804:	e9 f4       	brne	.+58     	; 0x5840 <STEPPER_process_run_mode+0x14a>
    5806:	80 91 fa 04 	lds	r24, 0x04FA
    580a:	8f 71       	andi	r24, 0x1F	; 31
    580c:	80 93 fa 04 	sts	0x04FA, r24
    5810:	10 92 f2 07 	sts	0x07F2, r1
    5814:	80 91 fd 07 	lds	r24, 0x07FD
    5818:	88 23       	and	r24, r24
    581a:	09 f4       	brne	.+2      	; 0x581e <STEPPER_process_run_mode+0x128>
    581c:	5c c0       	rjmp	.+184    	; 0x58d6 <STEPPER_process_run_mode+0x1e0>
    581e:	60 91 eb 07 	lds	r22, 0x07EB
    5822:	81 e0       	ldi	r24, 0x01	; 1
    5824:	0e 94 2c 20 	call	0x4058	; 0x4058 <STEPPER_stop>
    5828:	e0 91 fe 07 	lds	r30, 0x07FE
    582c:	f0 91 ff 07 	lds	r31, 0x07FF
    5830:	30 97       	sbiw	r30, 0x00	; 0
    5832:	09 f4       	brne	.+2      	; 0x5836 <STEPPER_process_run_mode+0x140>
    5834:	50 c0       	rjmp	.+160    	; 0x58d6 <STEPPER_process_run_mode+0x1e0>
    5836:	81 e0       	ldi	r24, 0x01	; 1
    5838:	81 83       	std	Z+1, r24	; 0x01
    583a:	10 92 fd 07 	sts	0x07FD, r1
    583e:	4b c0       	rjmp	.+150    	; 0x58d6 <STEPPER_process_run_mode+0x1e0>
    5840:	80 91 cb 07 	lds	r24, 0x07CB
    5844:	81 30       	cpi	r24, 0x01	; 1
    5846:	41 f4       	brne	.+16     	; 0x5858 <STEPPER_process_run_mode+0x162>
    5848:	80 91 de 07 	lds	r24, 0x07DE
    584c:	90 91 df 07 	lds	r25, 0x07DF
    5850:	01 97       	sbiw	r24, 0x01	; 1
    5852:	11 f4       	brne	.+4      	; 0x5858 <STEPPER_process_run_mode+0x162>
    5854:	01 e0       	ldi	r16, 0x01	; 1
    5856:	02 c0       	rjmp	.+4      	; 0x585c <STEPPER_process_run_mode+0x166>
    5858:	00 23       	and	r16, r16
    585a:	e9 f1       	breq	.+122    	; 0x58d6 <STEPPER_process_run_mode+0x1e0>
    585c:	e0 91 f0 07 	lds	r30, 0x07F0
    5860:	f0 e0       	ldi	r31, 0x00	; 0
    5862:	e2 5d       	subi	r30, 0xD2	; 210
    5864:	fb 4f       	sbci	r31, 0xFB	; 251
    5866:	90 91 fa 04 	lds	r25, 0x04FA
    586a:	9f 71       	andi	r25, 0x1F	; 31
    586c:	80 81       	ld	r24, Z
    586e:	89 2b       	or	r24, r25
    5870:	80 93 fa 04 	sts	0x04FA, r24
    5874:	80 91 ee 07 	lds	r24, 0x07EE
    5878:	88 23       	and	r24, r24
    587a:	21 f4       	brne	.+8      	; 0x5884 <STEPPER_process_run_mode+0x18e>
    587c:	80 91 f0 07 	lds	r24, 0x07F0
    5880:	8f 5f       	subi	r24, 0xFF	; 255
    5882:	03 c0       	rjmp	.+6      	; 0x588a <STEPPER_process_run_mode+0x194>
    5884:	80 91 f0 07 	lds	r24, 0x07F0
    5888:	81 50       	subi	r24, 0x01	; 1
    588a:	80 93 f0 07 	sts	0x07F0, r24
    588e:	80 91 f0 07 	lds	r24, 0x07F0
    5892:	83 70       	andi	r24, 0x03	; 3
    5894:	80 93 f0 07 	sts	0x07F0, r24
    5898:	81 e0       	ldi	r24, 0x01	; 1
    589a:	80 93 f2 07 	sts	0x07F2, r24
    589e:	80 91 cb 07 	lds	r24, 0x07CB
    58a2:	81 30       	cpi	r24, 0x01	; 1
    58a4:	c1 f4       	brne	.+48     	; 0x58d6 <STEPPER_process_run_mode+0x1e0>
    58a6:	0e 94 7e 2c 	call	0x58fc	; 0x58fc <STEPPER_process_step_mode>
    58aa:	15 c0       	rjmp	.+42     	; 0x58d6 <STEPPER_process_run_mode+0x1e0>
    58ac:	90 91 fa 04 	lds	r25, 0x04FA
    58b0:	9f 71       	andi	r25, 0x1F	; 31
    58b2:	90 93 fa 04 	sts	0x04FA, r25
    58b6:	e0 91 f0 07 	lds	r30, 0x07F0
    58ba:	f0 e0       	ldi	r31, 0x00	; 0
    58bc:	e2 5d       	subi	r30, 0xD2	; 210
    58be:	fb 4f       	sbci	r31, 0xFB	; 251
    58c0:	80 81       	ld	r24, Z
    58c2:	89 2b       	or	r24, r25
    58c4:	80 93 fa 04 	sts	0x04FA, r24
    58c8:	82 e0       	ldi	r24, 0x02	; 2
    58ca:	80 93 f2 07 	sts	0x07F2, r24
    58ce:	10 92 d3 07 	sts	0x07D3, r1
    58d2:	10 92 d2 07 	sts	0x07D2, r1
    58d6:	80 91 f3 07 	lds	r24, 0x07F3
    58da:	88 23       	and	r24, r24
    58dc:	31 f4       	brne	.+12     	; 0x58ea <STEPPER_process_run_mode+0x1f4>
    58de:	8a ef       	ldi	r24, 0xFA	; 250
    58e0:	94 e0       	ldi	r25, 0x04	; 4
    58e2:	61 2f       	mov	r22, r17
    58e4:	40 2f       	mov	r20, r16
    58e6:	0e 94 40 2d 	call	0x5a80	; 0x5a80 <STEPPER_process_pwm>
    58ea:	88 b1       	in	r24, 0x08	; 8
    58ec:	83 70       	andi	r24, 0x03	; 3
    58ee:	90 91 fa 04 	lds	r25, 0x04FA
    58f2:	89 2b       	or	r24, r25
    58f4:	88 b9       	out	0x08, r24	; 8
    58f6:	1f 91       	pop	r17
    58f8:	0f 91       	pop	r16
    58fa:	08 95       	ret

000058fc <STEPPER_process_step_mode>:
    58fc:	88 23       	and	r24, r24
    58fe:	21 f0       	breq	.+8      	; 0x5908 <STEPPER_process_step_mode+0xc>
    5900:	81 30       	cpi	r24, 0x01	; 1
    5902:	09 f0       	breq	.+2      	; 0x5906 <STEPPER_process_step_mode+0xa>
    5904:	4e c0       	rjmp	.+156    	; 0x59a2 <STEPPER_process_step_mode+0xa6>
    5906:	27 c0       	rjmp	.+78     	; 0x5956 <STEPPER_process_step_mode+0x5a>
    5908:	80 91 dc 07 	lds	r24, 0x07DC
    590c:	90 91 dd 07 	lds	r25, 0x07DD
    5910:	89 2b       	or	r24, r25
    5912:	49 f0       	breq	.+18     	; 0x5926 <STEPPER_process_step_mode+0x2a>
    5914:	80 91 dc 07 	lds	r24, 0x07DC
    5918:	90 91 dd 07 	lds	r25, 0x07DD
    591c:	01 97       	sbiw	r24, 0x01	; 1
    591e:	90 93 dd 07 	sts	0x07DD, r25
    5922:	80 93 dc 07 	sts	0x07DC, r24
    5926:	80 91 fc 07 	lds	r24, 0x07FC
    592a:	88 23       	and	r24, r24
    592c:	d1 f5       	brne	.+116    	; 0x59a2 <STEPPER_process_step_mode+0xa6>
    592e:	20 91 dc 07 	lds	r18, 0x07DC
    5932:	30 91 dd 07 	lds	r19, 0x07DD
    5936:	80 91 e0 07 	lds	r24, 0x07E0
    593a:	90 91 e1 07 	lds	r25, 0x07E1
    593e:	28 17       	cp	r18, r24
    5940:	39 07       	cpc	r19, r25
    5942:	79 f5       	brne	.+94     	; 0x59a2 <STEPPER_process_step_mode+0xa6>
    5944:	80 e0       	ldi	r24, 0x00	; 0
    5946:	60 e0       	ldi	r22, 0x00	; 0
    5948:	70 e0       	ldi	r23, 0x00	; 0
    594a:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <STEPPER_set_speed>
    594e:	81 e0       	ldi	r24, 0x01	; 1
    5950:	80 93 fc 07 	sts	0x07FC, r24
    5954:	08 95       	ret
    5956:	80 91 de 07 	lds	r24, 0x07DE
    595a:	90 91 df 07 	lds	r25, 0x07DF
    595e:	89 2b       	or	r24, r25
    5960:	49 f0       	breq	.+18     	; 0x5974 <STEPPER_process_step_mode+0x78>
    5962:	80 91 de 07 	lds	r24, 0x07DE
    5966:	90 91 df 07 	lds	r25, 0x07DF
    596a:	01 97       	sbiw	r24, 0x01	; 1
    596c:	90 93 df 07 	sts	0x07DF, r25
    5970:	80 93 de 07 	sts	0x07DE, r24
    5974:	80 91 fd 07 	lds	r24, 0x07FD
    5978:	88 23       	and	r24, r24
    597a:	99 f4       	brne	.+38     	; 0x59a2 <STEPPER_process_step_mode+0xa6>
    597c:	20 91 de 07 	lds	r18, 0x07DE
    5980:	30 91 df 07 	lds	r19, 0x07DF
    5984:	80 91 e2 07 	lds	r24, 0x07E2
    5988:	90 91 e3 07 	lds	r25, 0x07E3
    598c:	28 17       	cp	r18, r24
    598e:	39 07       	cpc	r19, r25
    5990:	41 f4       	brne	.+16     	; 0x59a2 <STEPPER_process_step_mode+0xa6>
    5992:	81 e0       	ldi	r24, 0x01	; 1
    5994:	60 e0       	ldi	r22, 0x00	; 0
    5996:	70 e0       	ldi	r23, 0x00	; 0
    5998:	0e 94 63 1f 	call	0x3ec6	; 0x3ec6 <STEPPER_set_speed>
    599c:	81 e0       	ldi	r24, 0x01	; 1
    599e:	80 93 fd 07 	sts	0x07FD, r24
    59a2:	08 95       	ret

000059a4 <TMRSRVC_process>:
    59a4:	ff 92       	push	r15
    59a6:	0f 93       	push	r16
    59a8:	1f 93       	push	r17
    59aa:	cf 93       	push	r28
    59ac:	df 93       	push	r29
    59ae:	80 91 3a 08 	lds	r24, 0x083A
    59b2:	88 23       	and	r24, r24
    59b4:	09 f4       	brne	.+2      	; 0x59b8 <TMRSRVC_process+0x14>
    59b6:	59 c0       	rjmp	.+178    	; 0x5a6a <TMRSRVC_process+0xc6>
    59b8:	00 91 3b 08 	lds	r16, 0x083B
    59bc:	10 91 3c 08 	lds	r17, 0x083C
    59c0:	f8 01       	movw	r30, r16
    59c2:	c0 81       	ld	r28, Z
    59c4:	d1 81       	ldd	r29, Z+1	; 0x01
    59c6:	8c 81       	ldd	r24, Y+4	; 0x04
    59c8:	9d 81       	ldd	r25, Y+5	; 0x05
    59ca:	01 97       	sbiw	r24, 0x01	; 1
    59cc:	9d 83       	std	Y+5, r25	; 0x05
    59ce:	8c 83       	std	Y+4, r24	; 0x04
    59d0:	18 16       	cp	r1, r24
    59d2:	19 06       	cpc	r1, r25
    59d4:	0c f4       	brge	.+2      	; 0x59d8 <TMRSRVC_process+0x34>
    59d6:	49 c0       	rjmp	.+146    	; 0x5a6a <TMRSRVC_process+0xc6>
    59d8:	89 81       	ldd	r24, Y+1	; 0x01
    59da:	80 ff       	sbrs	r24, 0
    59dc:	05 c0       	rjmp	.+10     	; 0x59e8 <TMRSRVC_process+0x44>
    59de:	8e 81       	ldd	r24, Y+6	; 0x06
    59e0:	88 23       	and	r24, r24
    59e2:	11 f4       	brne	.+4      	; 0x59e8 <TMRSRVC_process+0x44>
    59e4:	81 e0       	ldi	r24, 0x01	; 1
    59e6:	8e 83       	std	Y+6, r24	; 0x06
    59e8:	89 81       	ldd	r24, Y+1	; 0x01
    59ea:	81 ff       	sbrs	r24, 1
    59ec:	03 c0       	rjmp	.+6      	; 0x59f4 <TMRSRVC_process+0x50>
    59ee:	ef 81       	ldd	r30, Y+7	; 0x07
    59f0:	f8 85       	ldd	r31, Y+8	; 0x08
    59f2:	09 95       	icall
    59f4:	80 91 3a 08 	lds	r24, 0x083A
    59f8:	82 30       	cpi	r24, 0x02	; 2
    59fa:	a8 f0       	brcs	.+42     	; 0x5a26 <TMRSRVC_process+0x82>
    59fc:	f8 01       	movw	r30, r16
    59fe:	82 81       	ldd	r24, Z+2	; 0x02
    5a00:	93 81       	ldd	r25, Z+3	; 0x03
    5a02:	90 93 3c 08 	sts	0x083C, r25
    5a06:	80 93 3b 08 	sts	0x083B, r24
    5a0a:	13 82       	std	Z+3, r1	; 0x03
    5a0c:	12 82       	std	Z+2, r1	; 0x02
    5a0e:	e0 91 00 00 	lds	r30, 0x0000
    5a12:	f0 91 01 00 	lds	r31, 0x0001
    5a16:	84 81       	ldd	r24, Z+4	; 0x04
    5a18:	95 81       	ldd	r25, Z+5	; 0x05
    5a1a:	18 16       	cp	r1, r24
    5a1c:	19 06       	cpc	r1, r25
    5a1e:	3c f0       	brlt	.+14     	; 0x5a2e <TMRSRVC_process+0x8a>
    5a20:	ff 24       	eor	r15, r15
    5a22:	f3 94       	inc	r15
    5a24:	05 c0       	rjmp	.+10     	; 0x5a30 <TMRSRVC_process+0x8c>
    5a26:	10 92 3c 08 	sts	0x083C, r1
    5a2a:	10 92 3b 08 	sts	0x083B, r1
    5a2e:	ff 24       	eor	r15, r15
    5a30:	80 91 3a 08 	lds	r24, 0x083A
    5a34:	81 50       	subi	r24, 0x01	; 1
    5a36:	80 93 3a 08 	sts	0x083A, r24
    5a3a:	80 91 3a 08 	lds	r24, 0x083A
    5a3e:	88 23       	and	r24, r24
    5a40:	11 f4       	brne	.+4      	; 0x5a46 <TMRSRVC_process+0xa2>
    5a42:	0e 94 3d 2d 	call	0x5a7a	; 0x5a7a <TMRSRVC_stop>
    5a46:	89 81       	ldd	r24, Y+1	; 0x01
    5a48:	82 ff       	sbrs	r24, 2
    5a4a:	08 c0       	rjmp	.+16     	; 0x5a5c <TMRSRVC_process+0xb8>
    5a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    5a4e:	9b 81       	ldd	r25, Y+3	; 0x03
    5a50:	9d 83       	std	Y+5, r25	; 0x05
    5a52:	8c 83       	std	Y+4, r24	; 0x04
    5a54:	c8 01       	movw	r24, r16
    5a56:	0e 94 b2 28 	call	0x5164	; 0x5164 <TMRSRVC_insert>
    5a5a:	08 c0       	rjmp	.+16     	; 0x5a6c <TMRSRVC_process+0xc8>
    5a5c:	c8 01       	movw	r24, r16
    5a5e:	0e 94 46 36 	call	0x6c8c	; 0x6c8c <free>
    5a62:	89 81       	ldd	r24, Y+1	; 0x01
    5a64:	8f 7e       	andi	r24, 0xEF	; 239
    5a66:	89 83       	std	Y+1, r24	; 0x01
    5a68:	01 c0       	rjmp	.+2      	; 0x5a6c <TMRSRVC_process+0xc8>
    5a6a:	ff 24       	eor	r15, r15
    5a6c:	8f 2d       	mov	r24, r15
    5a6e:	df 91       	pop	r29
    5a70:	cf 91       	pop	r28
    5a72:	1f 91       	pop	r17
    5a74:	0f 91       	pop	r16
    5a76:	ff 90       	pop	r15
    5a78:	08 95       	ret

00005a7a <TMRSRVC_stop>:
    5a7a:	10 92 f9 04 	sts	0x04F9, r1
    5a7e:	08 95       	ret

00005a80 <STEPPER_process_pwm>:
    5a80:	fc 01       	movw	r30, r24
    5a82:	80 91 f1 07 	lds	r24, 0x07F1
    5a86:	82 30       	cpi	r24, 0x02	; 2
    5a88:	69 f4       	brne	.+26     	; 0x5aa4 <STEPPER_process_pwm+0x24>
    5a8a:	80 91 fe 04 	lds	r24, 0x04FE
    5a8e:	91 e0       	ldi	r25, 0x01	; 1
    5a90:	89 27       	eor	r24, r25
    5a92:	80 93 fe 04 	sts	0x04FE, r24
    5a96:	88 23       	and	r24, r24
    5a98:	09 f0       	breq	.+2      	; 0x5a9c <STEPPER_process_pwm+0x1c>
    5a9a:	3e c0       	rjmp	.+124    	; 0x5b18 <STEPPER_process_pwm+0x98>
    5a9c:	80 81       	ld	r24, Z
    5a9e:	83 7e       	andi	r24, 0xE3	; 227
    5aa0:	80 83       	st	Z, r24
    5aa2:	3a c0       	rjmp	.+116    	; 0x5b18 <STEPPER_process_pwm+0x98>
    5aa4:	80 91 d0 07 	lds	r24, 0x07D0
    5aa8:	90 91 d1 07 	lds	r25, 0x07D1
    5aac:	c3 97       	sbiw	r24, 0x33	; 51
    5aae:	a4 f5       	brge	.+104    	; 0x5b18 <STEPPER_process_pwm+0x98>
    5ab0:	66 23       	and	r22, r22
    5ab2:	d1 f0       	breq	.+52     	; 0x5ae8 <STEPPER_process_pwm+0x68>
    5ab4:	20 91 d0 07 	lds	r18, 0x07D0
    5ab8:	30 91 d1 07 	lds	r19, 0x07D1
    5abc:	80 e6       	ldi	r24, 0x60	; 96
    5abe:	90 e0       	ldi	r25, 0x00	; 0
    5ac0:	bc 01       	movw	r22, r24
    5ac2:	26 9f       	mul	r18, r22
    5ac4:	c0 01       	movw	r24, r0
    5ac6:	27 9f       	mul	r18, r23
    5ac8:	90 0d       	add	r25, r0
    5aca:	36 9f       	mul	r19, r22
    5acc:	90 0d       	add	r25, r0
    5ace:	11 24       	eor	r1, r1
    5ad0:	88 0f       	add	r24, r24
    5ad2:	89 2f       	mov	r24, r25
    5ad4:	88 1f       	adc	r24, r24
    5ad6:	99 0b       	sbc	r25, r25
    5ad8:	90 93 e5 07 	sts	0x07E5, r25
    5adc:	80 93 e4 07 	sts	0x07E4, r24
    5ae0:	81 e0       	ldi	r24, 0x01	; 1
    5ae2:	80 93 fc 04 	sts	0x04FC, r24
    5ae6:	18 c0       	rjmp	.+48     	; 0x5b18 <STEPPER_process_pwm+0x98>
    5ae8:	80 91 fc 04 	lds	r24, 0x04FC
    5aec:	88 23       	and	r24, r24
    5aee:	a1 f0       	breq	.+40     	; 0x5b18 <STEPPER_process_pwm+0x98>
    5af0:	80 91 e4 07 	lds	r24, 0x07E4
    5af4:	90 91 e5 07 	lds	r25, 0x07E5
    5af8:	01 97       	sbiw	r24, 0x01	; 1
    5afa:	90 93 e5 07 	sts	0x07E5, r25
    5afe:	80 93 e4 07 	sts	0x07E4, r24
    5b02:	80 91 e4 07 	lds	r24, 0x07E4
    5b06:	90 91 e5 07 	lds	r25, 0x07E5
    5b0a:	89 2b       	or	r24, r25
    5b0c:	29 f4       	brne	.+10     	; 0x5b18 <STEPPER_process_pwm+0x98>
    5b0e:	80 81       	ld	r24, Z
    5b10:	83 7e       	andi	r24, 0xE3	; 227
    5b12:	80 83       	st	Z, r24
    5b14:	10 92 fc 04 	sts	0x04FC, r1
    5b18:	80 91 f2 07 	lds	r24, 0x07F2
    5b1c:	82 30       	cpi	r24, 0x02	; 2
    5b1e:	69 f4       	brne	.+26     	; 0x5b3a <STEPPER_process_pwm+0xba>
    5b20:	80 91 fd 04 	lds	r24, 0x04FD
    5b24:	91 e0       	ldi	r25, 0x01	; 1
    5b26:	89 27       	eor	r24, r25
    5b28:	80 93 fd 04 	sts	0x04FD, r24
    5b2c:	88 23       	and	r24, r24
    5b2e:	09 f0       	breq	.+2      	; 0x5b32 <STEPPER_process_pwm+0xb2>
    5b30:	3e c0       	rjmp	.+124    	; 0x5bae <STEPPER_process_pwm+0x12e>
    5b32:	80 81       	ld	r24, Z
    5b34:	8f 71       	andi	r24, 0x1F	; 31
    5b36:	80 83       	st	Z, r24
    5b38:	08 95       	ret
    5b3a:	80 91 d2 07 	lds	r24, 0x07D2
    5b3e:	90 91 d3 07 	lds	r25, 0x07D3
    5b42:	c3 97       	sbiw	r24, 0x33	; 51
    5b44:	a4 f5       	brge	.+104    	; 0x5bae <STEPPER_process_pwm+0x12e>
    5b46:	44 23       	and	r20, r20
    5b48:	d1 f0       	breq	.+52     	; 0x5b7e <STEPPER_process_pwm+0xfe>
    5b4a:	20 91 d2 07 	lds	r18, 0x07D2
    5b4e:	30 91 d3 07 	lds	r19, 0x07D3
    5b52:	80 e6       	ldi	r24, 0x60	; 96
    5b54:	90 e0       	ldi	r25, 0x00	; 0
    5b56:	ac 01       	movw	r20, r24
    5b58:	24 9f       	mul	r18, r20
    5b5a:	c0 01       	movw	r24, r0
    5b5c:	25 9f       	mul	r18, r21
    5b5e:	90 0d       	add	r25, r0
    5b60:	34 9f       	mul	r19, r20
    5b62:	90 0d       	add	r25, r0
    5b64:	11 24       	eor	r1, r1
    5b66:	88 0f       	add	r24, r24
    5b68:	89 2f       	mov	r24, r25
    5b6a:	88 1f       	adc	r24, r24
    5b6c:	99 0b       	sbc	r25, r25
    5b6e:	90 93 e7 07 	sts	0x07E7, r25
    5b72:	80 93 e6 07 	sts	0x07E6, r24
    5b76:	81 e0       	ldi	r24, 0x01	; 1
    5b78:	80 93 fb 04 	sts	0x04FB, r24
    5b7c:	08 95       	ret
    5b7e:	80 91 fb 04 	lds	r24, 0x04FB
    5b82:	88 23       	and	r24, r24
    5b84:	a1 f0       	breq	.+40     	; 0x5bae <STEPPER_process_pwm+0x12e>
    5b86:	80 91 e6 07 	lds	r24, 0x07E6
    5b8a:	90 91 e7 07 	lds	r25, 0x07E7
    5b8e:	01 97       	sbiw	r24, 0x01	; 1
    5b90:	90 93 e7 07 	sts	0x07E7, r25
    5b94:	80 93 e6 07 	sts	0x07E6, r24
    5b98:	80 91 e6 07 	lds	r24, 0x07E6
    5b9c:	90 91 e7 07 	lds	r25, 0x07E7
    5ba0:	89 2b       	or	r24, r25
    5ba2:	29 f4       	brne	.+10     	; 0x5bae <STEPPER_process_pwm+0x12e>
    5ba4:	80 81       	ld	r24, Z
    5ba6:	8f 71       	andi	r24, 0x1F	; 31
    5ba8:	80 83       	st	Z, r24
    5baa:	10 92 fb 04 	sts	0x04FB, r1
    5bae:	08 95       	ret

00005bb0 <__subsf3>:
    5bb0:	50 58       	subi	r21, 0x80	; 128

00005bb2 <__addsf3>:
    5bb2:	bb 27       	eor	r27, r27
    5bb4:	aa 27       	eor	r26, r26
    5bb6:	0e d0       	rcall	.+28     	; 0x5bd4 <__addsf3x>
    5bb8:	75 c1       	rjmp	.+746    	; 0x5ea4 <__fp_round>
    5bba:	66 d1       	rcall	.+716    	; 0x5e88 <__fp_pscA>
    5bbc:	30 f0       	brcs	.+12     	; 0x5bca <__addsf3+0x18>
    5bbe:	6b d1       	rcall	.+726    	; 0x5e96 <__fp_pscB>
    5bc0:	20 f0       	brcs	.+8      	; 0x5bca <__addsf3+0x18>
    5bc2:	31 f4       	brne	.+12     	; 0x5bd0 <__addsf3+0x1e>
    5bc4:	9f 3f       	cpi	r25, 0xFF	; 255
    5bc6:	11 f4       	brne	.+4      	; 0x5bcc <__addsf3+0x1a>
    5bc8:	1e f4       	brtc	.+6      	; 0x5bd0 <__addsf3+0x1e>
    5bca:	5b c1       	rjmp	.+694    	; 0x5e82 <__fp_nan>
    5bcc:	0e f4       	brtc	.+2      	; 0x5bd0 <__addsf3+0x1e>
    5bce:	e0 95       	com	r30
    5bd0:	e7 fb       	bst	r30, 7
    5bd2:	51 c1       	rjmp	.+674    	; 0x5e76 <__fp_inf>

00005bd4 <__addsf3x>:
    5bd4:	e9 2f       	mov	r30, r25
    5bd6:	77 d1       	rcall	.+750    	; 0x5ec6 <__fp_split3>
    5bd8:	80 f3       	brcs	.-32     	; 0x5bba <__addsf3+0x8>
    5bda:	ba 17       	cp	r27, r26
    5bdc:	62 07       	cpc	r22, r18
    5bde:	73 07       	cpc	r23, r19
    5be0:	84 07       	cpc	r24, r20
    5be2:	95 07       	cpc	r25, r21
    5be4:	18 f0       	brcs	.+6      	; 0x5bec <__addsf3x+0x18>
    5be6:	71 f4       	brne	.+28     	; 0x5c04 <__addsf3x+0x30>
    5be8:	9e f5       	brtc	.+102    	; 0x5c50 <__addsf3x+0x7c>
    5bea:	8f c1       	rjmp	.+798    	; 0x5f0a <__fp_zero>
    5bec:	0e f4       	brtc	.+2      	; 0x5bf0 <__addsf3x+0x1c>
    5bee:	e0 95       	com	r30
    5bf0:	0b 2e       	mov	r0, r27
    5bf2:	ba 2f       	mov	r27, r26
    5bf4:	a0 2d       	mov	r26, r0
    5bf6:	0b 01       	movw	r0, r22
    5bf8:	b9 01       	movw	r22, r18
    5bfa:	90 01       	movw	r18, r0
    5bfc:	0c 01       	movw	r0, r24
    5bfe:	ca 01       	movw	r24, r20
    5c00:	a0 01       	movw	r20, r0
    5c02:	11 24       	eor	r1, r1
    5c04:	ff 27       	eor	r31, r31
    5c06:	59 1b       	sub	r21, r25
    5c08:	99 f0       	breq	.+38     	; 0x5c30 <__addsf3x+0x5c>
    5c0a:	59 3f       	cpi	r21, 0xF9	; 249
    5c0c:	50 f4       	brcc	.+20     	; 0x5c22 <__addsf3x+0x4e>
    5c0e:	50 3e       	cpi	r21, 0xE0	; 224
    5c10:	68 f1       	brcs	.+90     	; 0x5c6c <__addsf3x+0x98>
    5c12:	1a 16       	cp	r1, r26
    5c14:	f0 40       	sbci	r31, 0x00	; 0
    5c16:	a2 2f       	mov	r26, r18
    5c18:	23 2f       	mov	r18, r19
    5c1a:	34 2f       	mov	r19, r20
    5c1c:	44 27       	eor	r20, r20
    5c1e:	58 5f       	subi	r21, 0xF8	; 248
    5c20:	f3 cf       	rjmp	.-26     	; 0x5c08 <__addsf3x+0x34>
    5c22:	46 95       	lsr	r20
    5c24:	37 95       	ror	r19
    5c26:	27 95       	ror	r18
    5c28:	a7 95       	ror	r26
    5c2a:	f0 40       	sbci	r31, 0x00	; 0
    5c2c:	53 95       	inc	r21
    5c2e:	c9 f7       	brne	.-14     	; 0x5c22 <__addsf3x+0x4e>
    5c30:	7e f4       	brtc	.+30     	; 0x5c50 <__addsf3x+0x7c>
    5c32:	1f 16       	cp	r1, r31
    5c34:	ba 0b       	sbc	r27, r26
    5c36:	62 0b       	sbc	r22, r18
    5c38:	73 0b       	sbc	r23, r19
    5c3a:	84 0b       	sbc	r24, r20
    5c3c:	ba f0       	brmi	.+46     	; 0x5c6c <__addsf3x+0x98>
    5c3e:	91 50       	subi	r25, 0x01	; 1
    5c40:	a1 f0       	breq	.+40     	; 0x5c6a <__addsf3x+0x96>
    5c42:	ff 0f       	add	r31, r31
    5c44:	bb 1f       	adc	r27, r27
    5c46:	66 1f       	adc	r22, r22
    5c48:	77 1f       	adc	r23, r23
    5c4a:	88 1f       	adc	r24, r24
    5c4c:	c2 f7       	brpl	.-16     	; 0x5c3e <__addsf3x+0x6a>
    5c4e:	0e c0       	rjmp	.+28     	; 0x5c6c <__addsf3x+0x98>
    5c50:	ba 0f       	add	r27, r26
    5c52:	62 1f       	adc	r22, r18
    5c54:	73 1f       	adc	r23, r19
    5c56:	84 1f       	adc	r24, r20
    5c58:	48 f4       	brcc	.+18     	; 0x5c6c <__addsf3x+0x98>
    5c5a:	87 95       	ror	r24
    5c5c:	77 95       	ror	r23
    5c5e:	67 95       	ror	r22
    5c60:	b7 95       	ror	r27
    5c62:	f7 95       	ror	r31
    5c64:	9e 3f       	cpi	r25, 0xFE	; 254
    5c66:	08 f0       	brcs	.+2      	; 0x5c6a <__addsf3x+0x96>
    5c68:	b3 cf       	rjmp	.-154    	; 0x5bd0 <__addsf3+0x1e>
    5c6a:	93 95       	inc	r25
    5c6c:	88 0f       	add	r24, r24
    5c6e:	08 f0       	brcs	.+2      	; 0x5c72 <__addsf3x+0x9e>
    5c70:	99 27       	eor	r25, r25
    5c72:	ee 0f       	add	r30, r30
    5c74:	97 95       	ror	r25
    5c76:	87 95       	ror	r24
    5c78:	08 95       	ret

00005c7a <__cmpsf2>:
    5c7a:	d9 d0       	rcall	.+434    	; 0x5e2e <__fp_cmp>
    5c7c:	08 f4       	brcc	.+2      	; 0x5c80 <__cmpsf2+0x6>
    5c7e:	81 e0       	ldi	r24, 0x01	; 1
    5c80:	08 95       	ret

00005c82 <__divsf3>:
    5c82:	0c d0       	rcall	.+24     	; 0x5c9c <__divsf3x>
    5c84:	0f c1       	rjmp	.+542    	; 0x5ea4 <__fp_round>
    5c86:	07 d1       	rcall	.+526    	; 0x5e96 <__fp_pscB>
    5c88:	40 f0       	brcs	.+16     	; 0x5c9a <__divsf3+0x18>
    5c8a:	fe d0       	rcall	.+508    	; 0x5e88 <__fp_pscA>
    5c8c:	30 f0       	brcs	.+12     	; 0x5c9a <__divsf3+0x18>
    5c8e:	21 f4       	brne	.+8      	; 0x5c98 <__divsf3+0x16>
    5c90:	5f 3f       	cpi	r21, 0xFF	; 255
    5c92:	19 f0       	breq	.+6      	; 0x5c9a <__divsf3+0x18>
    5c94:	f0 c0       	rjmp	.+480    	; 0x5e76 <__fp_inf>
    5c96:	51 11       	cpse	r21, r1
    5c98:	39 c1       	rjmp	.+626    	; 0x5f0c <__fp_szero>
    5c9a:	f3 c0       	rjmp	.+486    	; 0x5e82 <__fp_nan>

00005c9c <__divsf3x>:
    5c9c:	14 d1       	rcall	.+552    	; 0x5ec6 <__fp_split3>
    5c9e:	98 f3       	brcs	.-26     	; 0x5c86 <__divsf3+0x4>

00005ca0 <__divsf3_pse>:
    5ca0:	99 23       	and	r25, r25
    5ca2:	c9 f3       	breq	.-14     	; 0x5c96 <__divsf3+0x14>
    5ca4:	55 23       	and	r21, r21
    5ca6:	b1 f3       	breq	.-20     	; 0x5c94 <__divsf3+0x12>
    5ca8:	95 1b       	sub	r25, r21
    5caa:	55 0b       	sbc	r21, r21
    5cac:	bb 27       	eor	r27, r27
    5cae:	aa 27       	eor	r26, r26
    5cb0:	62 17       	cp	r22, r18
    5cb2:	73 07       	cpc	r23, r19
    5cb4:	84 07       	cpc	r24, r20
    5cb6:	38 f0       	brcs	.+14     	; 0x5cc6 <__divsf3_pse+0x26>
    5cb8:	9f 5f       	subi	r25, 0xFF	; 255
    5cba:	5f 4f       	sbci	r21, 0xFF	; 255
    5cbc:	22 0f       	add	r18, r18
    5cbe:	33 1f       	adc	r19, r19
    5cc0:	44 1f       	adc	r20, r20
    5cc2:	aa 1f       	adc	r26, r26
    5cc4:	a9 f3       	breq	.-22     	; 0x5cb0 <__divsf3_pse+0x10>
    5cc6:	33 d0       	rcall	.+102    	; 0x5d2e <__divsf3_pse+0x8e>
    5cc8:	0e 2e       	mov	r0, r30
    5cca:	3a f0       	brmi	.+14     	; 0x5cda <__divsf3_pse+0x3a>
    5ccc:	e0 e8       	ldi	r30, 0x80	; 128
    5cce:	30 d0       	rcall	.+96     	; 0x5d30 <__divsf3_pse+0x90>
    5cd0:	91 50       	subi	r25, 0x01	; 1
    5cd2:	50 40       	sbci	r21, 0x00	; 0
    5cd4:	e6 95       	lsr	r30
    5cd6:	00 1c       	adc	r0, r0
    5cd8:	ca f7       	brpl	.-14     	; 0x5ccc <__divsf3_pse+0x2c>
    5cda:	29 d0       	rcall	.+82     	; 0x5d2e <__divsf3_pse+0x8e>
    5cdc:	fe 2f       	mov	r31, r30
    5cde:	27 d0       	rcall	.+78     	; 0x5d2e <__divsf3_pse+0x8e>
    5ce0:	66 0f       	add	r22, r22
    5ce2:	77 1f       	adc	r23, r23
    5ce4:	88 1f       	adc	r24, r24
    5ce6:	bb 1f       	adc	r27, r27
    5ce8:	26 17       	cp	r18, r22
    5cea:	37 07       	cpc	r19, r23
    5cec:	48 07       	cpc	r20, r24
    5cee:	ab 07       	cpc	r26, r27
    5cf0:	b0 e8       	ldi	r27, 0x80	; 128
    5cf2:	09 f0       	breq	.+2      	; 0x5cf6 <__divsf3_pse+0x56>
    5cf4:	bb 0b       	sbc	r27, r27
    5cf6:	80 2d       	mov	r24, r0
    5cf8:	bf 01       	movw	r22, r30
    5cfa:	ff 27       	eor	r31, r31
    5cfc:	93 58       	subi	r25, 0x83	; 131
    5cfe:	5f 4f       	sbci	r21, 0xFF	; 255
    5d00:	2a f0       	brmi	.+10     	; 0x5d0c <__divsf3_pse+0x6c>
    5d02:	9e 3f       	cpi	r25, 0xFE	; 254
    5d04:	51 05       	cpc	r21, r1
    5d06:	68 f0       	brcs	.+26     	; 0x5d22 <__divsf3_pse+0x82>
    5d08:	b6 c0       	rjmp	.+364    	; 0x5e76 <__fp_inf>
    5d0a:	00 c1       	rjmp	.+512    	; 0x5f0c <__fp_szero>
    5d0c:	5f 3f       	cpi	r21, 0xFF	; 255
    5d0e:	ec f3       	brlt	.-6      	; 0x5d0a <__divsf3_pse+0x6a>
    5d10:	98 3e       	cpi	r25, 0xE8	; 232
    5d12:	dc f3       	brlt	.-10     	; 0x5d0a <__divsf3_pse+0x6a>
    5d14:	86 95       	lsr	r24
    5d16:	77 95       	ror	r23
    5d18:	67 95       	ror	r22
    5d1a:	b7 95       	ror	r27
    5d1c:	f7 95       	ror	r31
    5d1e:	9f 5f       	subi	r25, 0xFF	; 255
    5d20:	c9 f7       	brne	.-14     	; 0x5d14 <__divsf3_pse+0x74>
    5d22:	88 0f       	add	r24, r24
    5d24:	91 1d       	adc	r25, r1
    5d26:	96 95       	lsr	r25
    5d28:	87 95       	ror	r24
    5d2a:	97 f9       	bld	r25, 7
    5d2c:	08 95       	ret
    5d2e:	e1 e0       	ldi	r30, 0x01	; 1
    5d30:	66 0f       	add	r22, r22
    5d32:	77 1f       	adc	r23, r23
    5d34:	88 1f       	adc	r24, r24
    5d36:	bb 1f       	adc	r27, r27
    5d38:	62 17       	cp	r22, r18
    5d3a:	73 07       	cpc	r23, r19
    5d3c:	84 07       	cpc	r24, r20
    5d3e:	ba 07       	cpc	r27, r26
    5d40:	20 f0       	brcs	.+8      	; 0x5d4a <__divsf3_pse+0xaa>
    5d42:	62 1b       	sub	r22, r18
    5d44:	73 0b       	sbc	r23, r19
    5d46:	84 0b       	sbc	r24, r20
    5d48:	ba 0b       	sbc	r27, r26
    5d4a:	ee 1f       	adc	r30, r30
    5d4c:	88 f7       	brcc	.-30     	; 0x5d30 <__divsf3_pse+0x90>
    5d4e:	e0 95       	com	r30
    5d50:	08 95       	ret

00005d52 <__fixsfsi>:
    5d52:	04 d0       	rcall	.+8      	; 0x5d5c <__fixunssfsi>
    5d54:	68 94       	set
    5d56:	b1 11       	cpse	r27, r1
    5d58:	d9 c0       	rjmp	.+434    	; 0x5f0c <__fp_szero>
    5d5a:	08 95       	ret

00005d5c <__fixunssfsi>:
    5d5c:	bc d0       	rcall	.+376    	; 0x5ed6 <__fp_splitA>
    5d5e:	88 f0       	brcs	.+34     	; 0x5d82 <__fixunssfsi+0x26>
    5d60:	9f 57       	subi	r25, 0x7F	; 127
    5d62:	90 f0       	brcs	.+36     	; 0x5d88 <__fixunssfsi+0x2c>
    5d64:	b9 2f       	mov	r27, r25
    5d66:	99 27       	eor	r25, r25
    5d68:	b7 51       	subi	r27, 0x17	; 23
    5d6a:	a0 f0       	brcs	.+40     	; 0x5d94 <__fixunssfsi+0x38>
    5d6c:	d1 f0       	breq	.+52     	; 0x5da2 <__fixunssfsi+0x46>
    5d6e:	66 0f       	add	r22, r22
    5d70:	77 1f       	adc	r23, r23
    5d72:	88 1f       	adc	r24, r24
    5d74:	99 1f       	adc	r25, r25
    5d76:	1a f0       	brmi	.+6      	; 0x5d7e <__fixunssfsi+0x22>
    5d78:	ba 95       	dec	r27
    5d7a:	c9 f7       	brne	.-14     	; 0x5d6e <__fixunssfsi+0x12>
    5d7c:	12 c0       	rjmp	.+36     	; 0x5da2 <__fixunssfsi+0x46>
    5d7e:	b1 30       	cpi	r27, 0x01	; 1
    5d80:	81 f0       	breq	.+32     	; 0x5da2 <__fixunssfsi+0x46>
    5d82:	c3 d0       	rcall	.+390    	; 0x5f0a <__fp_zero>
    5d84:	b1 e0       	ldi	r27, 0x01	; 1
    5d86:	08 95       	ret
    5d88:	c0 c0       	rjmp	.+384    	; 0x5f0a <__fp_zero>
    5d8a:	67 2f       	mov	r22, r23
    5d8c:	78 2f       	mov	r23, r24
    5d8e:	88 27       	eor	r24, r24
    5d90:	b8 5f       	subi	r27, 0xF8	; 248
    5d92:	39 f0       	breq	.+14     	; 0x5da2 <__fixunssfsi+0x46>
    5d94:	b9 3f       	cpi	r27, 0xF9	; 249
    5d96:	cc f3       	brlt	.-14     	; 0x5d8a <__fixunssfsi+0x2e>
    5d98:	86 95       	lsr	r24
    5d9a:	77 95       	ror	r23
    5d9c:	67 95       	ror	r22
    5d9e:	b3 95       	inc	r27
    5da0:	d9 f7       	brne	.-10     	; 0x5d98 <__fixunssfsi+0x3c>
    5da2:	3e f4       	brtc	.+14     	; 0x5db2 <__fixunssfsi+0x56>
    5da4:	90 95       	com	r25
    5da6:	80 95       	com	r24
    5da8:	70 95       	com	r23
    5daa:	61 95       	neg	r22
    5dac:	7f 4f       	sbci	r23, 0xFF	; 255
    5dae:	8f 4f       	sbci	r24, 0xFF	; 255
    5db0:	9f 4f       	sbci	r25, 0xFF	; 255
    5db2:	08 95       	ret

00005db4 <__floatunsisf>:
    5db4:	e8 94       	clt
    5db6:	09 c0       	rjmp	.+18     	; 0x5dca <__floatsisf+0x12>

00005db8 <__floatsisf>:
    5db8:	97 fb       	bst	r25, 7
    5dba:	3e f4       	brtc	.+14     	; 0x5dca <__floatsisf+0x12>
    5dbc:	90 95       	com	r25
    5dbe:	80 95       	com	r24
    5dc0:	70 95       	com	r23
    5dc2:	61 95       	neg	r22
    5dc4:	7f 4f       	sbci	r23, 0xFF	; 255
    5dc6:	8f 4f       	sbci	r24, 0xFF	; 255
    5dc8:	9f 4f       	sbci	r25, 0xFF	; 255
    5dca:	99 23       	and	r25, r25
    5dcc:	a9 f0       	breq	.+42     	; 0x5df8 <__floatsisf+0x40>
    5dce:	f9 2f       	mov	r31, r25
    5dd0:	96 e9       	ldi	r25, 0x96	; 150
    5dd2:	bb 27       	eor	r27, r27
    5dd4:	93 95       	inc	r25
    5dd6:	f6 95       	lsr	r31
    5dd8:	87 95       	ror	r24
    5dda:	77 95       	ror	r23
    5ddc:	67 95       	ror	r22
    5dde:	b7 95       	ror	r27
    5de0:	f1 11       	cpse	r31, r1
    5de2:	f8 cf       	rjmp	.-16     	; 0x5dd4 <__floatsisf+0x1c>
    5de4:	fa f4       	brpl	.+62     	; 0x5e24 <__floatsisf+0x6c>
    5de6:	bb 0f       	add	r27, r27
    5de8:	11 f4       	brne	.+4      	; 0x5dee <__floatsisf+0x36>
    5dea:	60 ff       	sbrs	r22, 0
    5dec:	1b c0       	rjmp	.+54     	; 0x5e24 <__floatsisf+0x6c>
    5dee:	6f 5f       	subi	r22, 0xFF	; 255
    5df0:	7f 4f       	sbci	r23, 0xFF	; 255
    5df2:	8f 4f       	sbci	r24, 0xFF	; 255
    5df4:	9f 4f       	sbci	r25, 0xFF	; 255
    5df6:	16 c0       	rjmp	.+44     	; 0x5e24 <__floatsisf+0x6c>
    5df8:	88 23       	and	r24, r24
    5dfa:	11 f0       	breq	.+4      	; 0x5e00 <__floatsisf+0x48>
    5dfc:	96 e9       	ldi	r25, 0x96	; 150
    5dfe:	11 c0       	rjmp	.+34     	; 0x5e22 <__floatsisf+0x6a>
    5e00:	77 23       	and	r23, r23
    5e02:	21 f0       	breq	.+8      	; 0x5e0c <__floatsisf+0x54>
    5e04:	9e e8       	ldi	r25, 0x8E	; 142
    5e06:	87 2f       	mov	r24, r23
    5e08:	76 2f       	mov	r23, r22
    5e0a:	05 c0       	rjmp	.+10     	; 0x5e16 <__floatsisf+0x5e>
    5e0c:	66 23       	and	r22, r22
    5e0e:	71 f0       	breq	.+28     	; 0x5e2c <__floatsisf+0x74>
    5e10:	96 e8       	ldi	r25, 0x86	; 134
    5e12:	86 2f       	mov	r24, r22
    5e14:	70 e0       	ldi	r23, 0x00	; 0
    5e16:	60 e0       	ldi	r22, 0x00	; 0
    5e18:	2a f0       	brmi	.+10     	; 0x5e24 <__floatsisf+0x6c>
    5e1a:	9a 95       	dec	r25
    5e1c:	66 0f       	add	r22, r22
    5e1e:	77 1f       	adc	r23, r23
    5e20:	88 1f       	adc	r24, r24
    5e22:	da f7       	brpl	.-10     	; 0x5e1a <__floatsisf+0x62>
    5e24:	88 0f       	add	r24, r24
    5e26:	96 95       	lsr	r25
    5e28:	87 95       	ror	r24
    5e2a:	97 f9       	bld	r25, 7
    5e2c:	08 95       	ret

00005e2e <__fp_cmp>:
    5e2e:	99 0f       	add	r25, r25
    5e30:	00 08       	sbc	r0, r0
    5e32:	55 0f       	add	r21, r21
    5e34:	aa 0b       	sbc	r26, r26
    5e36:	e0 e8       	ldi	r30, 0x80	; 128
    5e38:	fe ef       	ldi	r31, 0xFE	; 254
    5e3a:	16 16       	cp	r1, r22
    5e3c:	17 06       	cpc	r1, r23
    5e3e:	e8 07       	cpc	r30, r24
    5e40:	f9 07       	cpc	r31, r25
    5e42:	c0 f0       	brcs	.+48     	; 0x5e74 <__fp_cmp+0x46>
    5e44:	12 16       	cp	r1, r18
    5e46:	13 06       	cpc	r1, r19
    5e48:	e4 07       	cpc	r30, r20
    5e4a:	f5 07       	cpc	r31, r21
    5e4c:	98 f0       	brcs	.+38     	; 0x5e74 <__fp_cmp+0x46>
    5e4e:	62 1b       	sub	r22, r18
    5e50:	73 0b       	sbc	r23, r19
    5e52:	84 0b       	sbc	r24, r20
    5e54:	95 0b       	sbc	r25, r21
    5e56:	39 f4       	brne	.+14     	; 0x5e66 <__fp_cmp+0x38>
    5e58:	0a 26       	eor	r0, r26
    5e5a:	61 f0       	breq	.+24     	; 0x5e74 <__fp_cmp+0x46>
    5e5c:	23 2b       	or	r18, r19
    5e5e:	24 2b       	or	r18, r20
    5e60:	25 2b       	or	r18, r21
    5e62:	21 f4       	brne	.+8      	; 0x5e6c <__fp_cmp+0x3e>
    5e64:	08 95       	ret
    5e66:	0a 26       	eor	r0, r26
    5e68:	09 f4       	brne	.+2      	; 0x5e6c <__fp_cmp+0x3e>
    5e6a:	a1 40       	sbci	r26, 0x01	; 1
    5e6c:	a6 95       	lsr	r26
    5e6e:	8f ef       	ldi	r24, 0xFF	; 255
    5e70:	81 1d       	adc	r24, r1
    5e72:	81 1d       	adc	r24, r1
    5e74:	08 95       	ret

00005e76 <__fp_inf>:
    5e76:	97 f9       	bld	r25, 7
    5e78:	9f 67       	ori	r25, 0x7F	; 127
    5e7a:	80 e8       	ldi	r24, 0x80	; 128
    5e7c:	70 e0       	ldi	r23, 0x00	; 0
    5e7e:	60 e0       	ldi	r22, 0x00	; 0
    5e80:	08 95       	ret

00005e82 <__fp_nan>:
    5e82:	9f ef       	ldi	r25, 0xFF	; 255
    5e84:	80 ec       	ldi	r24, 0xC0	; 192
    5e86:	08 95       	ret

00005e88 <__fp_pscA>:
    5e88:	00 24       	eor	r0, r0
    5e8a:	0a 94       	dec	r0
    5e8c:	16 16       	cp	r1, r22
    5e8e:	17 06       	cpc	r1, r23
    5e90:	18 06       	cpc	r1, r24
    5e92:	09 06       	cpc	r0, r25
    5e94:	08 95       	ret

00005e96 <__fp_pscB>:
    5e96:	00 24       	eor	r0, r0
    5e98:	0a 94       	dec	r0
    5e9a:	12 16       	cp	r1, r18
    5e9c:	13 06       	cpc	r1, r19
    5e9e:	14 06       	cpc	r1, r20
    5ea0:	05 06       	cpc	r0, r21
    5ea2:	08 95       	ret

00005ea4 <__fp_round>:
    5ea4:	09 2e       	mov	r0, r25
    5ea6:	03 94       	inc	r0
    5ea8:	00 0c       	add	r0, r0
    5eaa:	11 f4       	brne	.+4      	; 0x5eb0 <__fp_round+0xc>
    5eac:	88 23       	and	r24, r24
    5eae:	52 f0       	brmi	.+20     	; 0x5ec4 <__fp_round+0x20>
    5eb0:	bb 0f       	add	r27, r27
    5eb2:	40 f4       	brcc	.+16     	; 0x5ec4 <__fp_round+0x20>
    5eb4:	bf 2b       	or	r27, r31
    5eb6:	11 f4       	brne	.+4      	; 0x5ebc <__fp_round+0x18>
    5eb8:	60 ff       	sbrs	r22, 0
    5eba:	04 c0       	rjmp	.+8      	; 0x5ec4 <__fp_round+0x20>
    5ebc:	6f 5f       	subi	r22, 0xFF	; 255
    5ebe:	7f 4f       	sbci	r23, 0xFF	; 255
    5ec0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ec2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ec4:	08 95       	ret

00005ec6 <__fp_split3>:
    5ec6:	57 fd       	sbrc	r21, 7
    5ec8:	90 58       	subi	r25, 0x80	; 128
    5eca:	44 0f       	add	r20, r20
    5ecc:	55 1f       	adc	r21, r21
    5ece:	59 f0       	breq	.+22     	; 0x5ee6 <__fp_splitA+0x10>
    5ed0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ed2:	71 f0       	breq	.+28     	; 0x5ef0 <__fp_splitA+0x1a>
    5ed4:	47 95       	ror	r20

00005ed6 <__fp_splitA>:
    5ed6:	88 0f       	add	r24, r24
    5ed8:	97 fb       	bst	r25, 7
    5eda:	99 1f       	adc	r25, r25
    5edc:	61 f0       	breq	.+24     	; 0x5ef6 <__fp_splitA+0x20>
    5ede:	9f 3f       	cpi	r25, 0xFF	; 255
    5ee0:	79 f0       	breq	.+30     	; 0x5f00 <__fp_splitA+0x2a>
    5ee2:	87 95       	ror	r24
    5ee4:	08 95       	ret
    5ee6:	12 16       	cp	r1, r18
    5ee8:	13 06       	cpc	r1, r19
    5eea:	14 06       	cpc	r1, r20
    5eec:	55 1f       	adc	r21, r21
    5eee:	f2 cf       	rjmp	.-28     	; 0x5ed4 <__fp_split3+0xe>
    5ef0:	46 95       	lsr	r20
    5ef2:	f1 df       	rcall	.-30     	; 0x5ed6 <__fp_splitA>
    5ef4:	08 c0       	rjmp	.+16     	; 0x5f06 <__fp_splitA+0x30>
    5ef6:	16 16       	cp	r1, r22
    5ef8:	17 06       	cpc	r1, r23
    5efa:	18 06       	cpc	r1, r24
    5efc:	99 1f       	adc	r25, r25
    5efe:	f1 cf       	rjmp	.-30     	; 0x5ee2 <__fp_splitA+0xc>
    5f00:	86 95       	lsr	r24
    5f02:	71 05       	cpc	r23, r1
    5f04:	61 05       	cpc	r22, r1
    5f06:	08 94       	sec
    5f08:	08 95       	ret

00005f0a <__fp_zero>:
    5f0a:	e8 94       	clt

00005f0c <__fp_szero>:
    5f0c:	bb 27       	eor	r27, r27
    5f0e:	66 27       	eor	r22, r22
    5f10:	77 27       	eor	r23, r23
    5f12:	cb 01       	movw	r24, r22
    5f14:	97 f9       	bld	r25, 7
    5f16:	08 95       	ret

00005f18 <__gesf2>:
    5f18:	8a df       	rcall	.-236    	; 0x5e2e <__fp_cmp>
    5f1a:	08 f4       	brcc	.+2      	; 0x5f1e <__gesf2+0x6>
    5f1c:	8f ef       	ldi	r24, 0xFF	; 255
    5f1e:	08 95       	ret

00005f20 <lrint>:
    5f20:	da df       	rcall	.-76     	; 0x5ed6 <__fp_splitA>
    5f22:	a8 f1       	brcs	.+106    	; 0x5f8e <lrint+0x6e>
    5f24:	9e 57       	subi	r25, 0x7E	; 126
    5f26:	a8 f1       	brcs	.+106    	; 0x5f92 <lrint+0x72>
    5f28:	98 51       	subi	r25, 0x18	; 24
    5f2a:	60 f0       	brcs	.+24     	; 0x5f44 <lrint+0x24>
    5f2c:	39 f1       	breq	.+78     	; 0x5f7c <lrint+0x5c>
    5f2e:	98 30       	cpi	r25, 0x08	; 8
    5f30:	70 f5       	brcc	.+92     	; 0x5f8e <lrint+0x6e>
    5f32:	09 2e       	mov	r0, r25
    5f34:	99 27       	eor	r25, r25
    5f36:	66 0f       	add	r22, r22
    5f38:	77 1f       	adc	r23, r23
    5f3a:	88 1f       	adc	r24, r24
    5f3c:	99 1f       	adc	r25, r25
    5f3e:	0a 94       	dec	r0
    5f40:	d1 f7       	brne	.-12     	; 0x5f36 <lrint+0x16>
    5f42:	1c c0       	rjmp	.+56     	; 0x5f7c <lrint+0x5c>
    5f44:	bb 27       	eor	r27, r27
    5f46:	99 3f       	cpi	r25, 0xF9	; 249
    5f48:	4c f4       	brge	.+18     	; 0x5f5c <lrint+0x3c>
    5f4a:	b1 11       	cpse	r27, r1
    5f4c:	b1 e0       	ldi	r27, 0x01	; 1
    5f4e:	b6 2b       	or	r27, r22
    5f50:	67 2f       	mov	r22, r23
    5f52:	78 2f       	mov	r23, r24
    5f54:	88 27       	eor	r24, r24
    5f56:	98 5f       	subi	r25, 0xF8	; 248
    5f58:	b1 f7       	brne	.-20     	; 0x5f46 <lrint+0x26>
    5f5a:	08 c0       	rjmp	.+16     	; 0x5f6c <lrint+0x4c>
    5f5c:	86 95       	lsr	r24
    5f5e:	77 95       	ror	r23
    5f60:	67 95       	ror	r22
    5f62:	b7 95       	ror	r27
    5f64:	08 f4       	brcc	.+2      	; 0x5f68 <lrint+0x48>
    5f66:	b1 60       	ori	r27, 0x01	; 1
    5f68:	93 95       	inc	r25
    5f6a:	c1 f7       	brne	.-16     	; 0x5f5c <lrint+0x3c>
    5f6c:	bb 0f       	add	r27, r27
    5f6e:	30 f4       	brcc	.+12     	; 0x5f7c <lrint+0x5c>
    5f70:	11 f4       	brne	.+4      	; 0x5f76 <lrint+0x56>
    5f72:	60 ff       	sbrs	r22, 0
    5f74:	03 c0       	rjmp	.+6      	; 0x5f7c <lrint+0x5c>
    5f76:	6f 5f       	subi	r22, 0xFF	; 255
    5f78:	7f 4f       	sbci	r23, 0xFF	; 255
    5f7a:	8f 4f       	sbci	r24, 0xFF	; 255
    5f7c:	3e f4       	brtc	.+14     	; 0x5f8c <lrint+0x6c>
    5f7e:	90 95       	com	r25
    5f80:	80 95       	com	r24
    5f82:	70 95       	com	r23
    5f84:	61 95       	neg	r22
    5f86:	7f 4f       	sbci	r23, 0xFF	; 255
    5f88:	8f 4f       	sbci	r24, 0xFF	; 255
    5f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f8c:	08 95       	ret
    5f8e:	68 94       	set
    5f90:	bd cf       	rjmp	.-134    	; 0x5f0c <__fp_szero>
    5f92:	bb cf       	rjmp	.-138    	; 0x5f0a <__fp_zero>

00005f94 <__mulsf3>:
    5f94:	0b d0       	rcall	.+22     	; 0x5fac <__mulsf3x>
    5f96:	86 cf       	rjmp	.-244    	; 0x5ea4 <__fp_round>
    5f98:	77 df       	rcall	.-274    	; 0x5e88 <__fp_pscA>
    5f9a:	28 f0       	brcs	.+10     	; 0x5fa6 <__mulsf3+0x12>
    5f9c:	7c df       	rcall	.-264    	; 0x5e96 <__fp_pscB>
    5f9e:	18 f0       	brcs	.+6      	; 0x5fa6 <__mulsf3+0x12>
    5fa0:	95 23       	and	r25, r21
    5fa2:	09 f0       	breq	.+2      	; 0x5fa6 <__mulsf3+0x12>
    5fa4:	68 cf       	rjmp	.-304    	; 0x5e76 <__fp_inf>
    5fa6:	6d cf       	rjmp	.-294    	; 0x5e82 <__fp_nan>
    5fa8:	11 24       	eor	r1, r1
    5faa:	b0 cf       	rjmp	.-160    	; 0x5f0c <__fp_szero>

00005fac <__mulsf3x>:
    5fac:	8c df       	rcall	.-232    	; 0x5ec6 <__fp_split3>
    5fae:	a0 f3       	brcs	.-24     	; 0x5f98 <__mulsf3+0x4>

00005fb0 <__mulsf3_pse>:
    5fb0:	95 9f       	mul	r25, r21
    5fb2:	d1 f3       	breq	.-12     	; 0x5fa8 <__mulsf3+0x14>
    5fb4:	95 0f       	add	r25, r21
    5fb6:	50 e0       	ldi	r21, 0x00	; 0
    5fb8:	55 1f       	adc	r21, r21
    5fba:	62 9f       	mul	r22, r18
    5fbc:	f0 01       	movw	r30, r0
    5fbe:	72 9f       	mul	r23, r18
    5fc0:	bb 27       	eor	r27, r27
    5fc2:	f0 0d       	add	r31, r0
    5fc4:	b1 1d       	adc	r27, r1
    5fc6:	63 9f       	mul	r22, r19
    5fc8:	aa 27       	eor	r26, r26
    5fca:	f0 0d       	add	r31, r0
    5fcc:	b1 1d       	adc	r27, r1
    5fce:	aa 1f       	adc	r26, r26
    5fd0:	64 9f       	mul	r22, r20
    5fd2:	66 27       	eor	r22, r22
    5fd4:	b0 0d       	add	r27, r0
    5fd6:	a1 1d       	adc	r26, r1
    5fd8:	66 1f       	adc	r22, r22
    5fda:	82 9f       	mul	r24, r18
    5fdc:	22 27       	eor	r18, r18
    5fde:	b0 0d       	add	r27, r0
    5fe0:	a1 1d       	adc	r26, r1
    5fe2:	62 1f       	adc	r22, r18
    5fe4:	73 9f       	mul	r23, r19
    5fe6:	b0 0d       	add	r27, r0
    5fe8:	a1 1d       	adc	r26, r1
    5fea:	62 1f       	adc	r22, r18
    5fec:	83 9f       	mul	r24, r19
    5fee:	a0 0d       	add	r26, r0
    5ff0:	61 1d       	adc	r22, r1
    5ff2:	22 1f       	adc	r18, r18
    5ff4:	74 9f       	mul	r23, r20
    5ff6:	33 27       	eor	r19, r19
    5ff8:	a0 0d       	add	r26, r0
    5ffa:	61 1d       	adc	r22, r1
    5ffc:	23 1f       	adc	r18, r19
    5ffe:	84 9f       	mul	r24, r20
    6000:	60 0d       	add	r22, r0
    6002:	21 1d       	adc	r18, r1
    6004:	82 2f       	mov	r24, r18
    6006:	76 2f       	mov	r23, r22
    6008:	6a 2f       	mov	r22, r26
    600a:	11 24       	eor	r1, r1
    600c:	9f 57       	subi	r25, 0x7F	; 127
    600e:	50 40       	sbci	r21, 0x00	; 0
    6010:	8a f0       	brmi	.+34     	; 0x6034 <__mulsf3_pse+0x84>
    6012:	e1 f0       	breq	.+56     	; 0x604c <__mulsf3_pse+0x9c>
    6014:	88 23       	and	r24, r24
    6016:	4a f0       	brmi	.+18     	; 0x602a <__mulsf3_pse+0x7a>
    6018:	ee 0f       	add	r30, r30
    601a:	ff 1f       	adc	r31, r31
    601c:	bb 1f       	adc	r27, r27
    601e:	66 1f       	adc	r22, r22
    6020:	77 1f       	adc	r23, r23
    6022:	88 1f       	adc	r24, r24
    6024:	91 50       	subi	r25, 0x01	; 1
    6026:	50 40       	sbci	r21, 0x00	; 0
    6028:	a9 f7       	brne	.-22     	; 0x6014 <__mulsf3_pse+0x64>
    602a:	9e 3f       	cpi	r25, 0xFE	; 254
    602c:	51 05       	cpc	r21, r1
    602e:	70 f0       	brcs	.+28     	; 0x604c <__mulsf3_pse+0x9c>
    6030:	22 cf       	rjmp	.-444    	; 0x5e76 <__fp_inf>
    6032:	6c cf       	rjmp	.-296    	; 0x5f0c <__fp_szero>
    6034:	5f 3f       	cpi	r21, 0xFF	; 255
    6036:	ec f3       	brlt	.-6      	; 0x6032 <__mulsf3_pse+0x82>
    6038:	98 3e       	cpi	r25, 0xE8	; 232
    603a:	dc f3       	brlt	.-10     	; 0x6032 <__mulsf3_pse+0x82>
    603c:	86 95       	lsr	r24
    603e:	77 95       	ror	r23
    6040:	67 95       	ror	r22
    6042:	b7 95       	ror	r27
    6044:	f7 95       	ror	r31
    6046:	e7 95       	ror	r30
    6048:	9f 5f       	subi	r25, 0xFF	; 255
    604a:	c1 f7       	brne	.-16     	; 0x603c <__mulsf3_pse+0x8c>
    604c:	fe 2b       	or	r31, r30
    604e:	88 0f       	add	r24, r24
    6050:	91 1d       	adc	r25, r1
    6052:	96 95       	lsr	r25
    6054:	87 95       	ror	r24
    6056:	97 f9       	bld	r25, 7
    6058:	08 95       	ret

0000605a <pow>:
    605a:	fa 01       	movw	r30, r20
    605c:	ee 0f       	add	r30, r30
    605e:	ff 1f       	adc	r31, r31
    6060:	30 96       	adiw	r30, 0x00	; 0
    6062:	21 05       	cpc	r18, r1
    6064:	31 05       	cpc	r19, r1
    6066:	99 f1       	breq	.+102    	; 0x60ce <pow+0x74>
    6068:	61 15       	cp	r22, r1
    606a:	71 05       	cpc	r23, r1
    606c:	61 f4       	brne	.+24     	; 0x6086 <pow+0x2c>
    606e:	80 38       	cpi	r24, 0x80	; 128
    6070:	bf e3       	ldi	r27, 0x3F	; 63
    6072:	9b 07       	cpc	r25, r27
    6074:	49 f1       	breq	.+82     	; 0x60c8 <pow+0x6e>
    6076:	68 94       	set
    6078:	90 38       	cpi	r25, 0x80	; 128
    607a:	81 05       	cpc	r24, r1
    607c:	61 f0       	breq	.+24     	; 0x6096 <pow+0x3c>
    607e:	80 38       	cpi	r24, 0x80	; 128
    6080:	bf ef       	ldi	r27, 0xFF	; 255
    6082:	9b 07       	cpc	r25, r27
    6084:	41 f0       	breq	.+16     	; 0x6096 <pow+0x3c>
    6086:	99 23       	and	r25, r25
    6088:	42 f5       	brpl	.+80     	; 0x60da <pow+0x80>
    608a:	ff 3f       	cpi	r31, 0xFF	; 255
    608c:	e1 05       	cpc	r30, r1
    608e:	31 05       	cpc	r19, r1
    6090:	21 05       	cpc	r18, r1
    6092:	11 f1       	breq	.+68     	; 0x60d8 <pow+0x7e>
    6094:	e8 94       	clt
    6096:	08 94       	sec
    6098:	e7 95       	ror	r30
    609a:	d9 01       	movw	r26, r18
    609c:	aa 23       	and	r26, r26
    609e:	29 f4       	brne	.+10     	; 0x60aa <pow+0x50>
    60a0:	ab 2f       	mov	r26, r27
    60a2:	be 2f       	mov	r27, r30
    60a4:	f8 5f       	subi	r31, 0xF8	; 248
    60a6:	d0 f3       	brcs	.-12     	; 0x609c <pow+0x42>
    60a8:	10 c0       	rjmp	.+32     	; 0x60ca <pow+0x70>
    60aa:	ff 5f       	subi	r31, 0xFF	; 255
    60ac:	70 f4       	brcc	.+28     	; 0x60ca <pow+0x70>
    60ae:	a6 95       	lsr	r26
    60b0:	e0 f7       	brcc	.-8      	; 0x60aa <pow+0x50>
    60b2:	f7 39       	cpi	r31, 0x97	; 151
    60b4:	50 f0       	brcs	.+20     	; 0x60ca <pow+0x70>
    60b6:	19 f0       	breq	.+6      	; 0x60be <pow+0x64>
    60b8:	ff 3a       	cpi	r31, 0xAF	; 175
    60ba:	38 f4       	brcc	.+14     	; 0x60ca <pow+0x70>
    60bc:	9f 77       	andi	r25, 0x7F	; 127
    60be:	9f 93       	push	r25
    60c0:	0c d0       	rcall	.+24     	; 0x60da <pow+0x80>
    60c2:	0f 90       	pop	r0
    60c4:	07 fc       	sbrc	r0, 7
    60c6:	90 58       	subi	r25, 0x80	; 128
    60c8:	08 95       	ret
    60ca:	3e f0       	brts	.+14     	; 0x60da <pow+0x80>
    60cc:	da ce       	rjmp	.-588    	; 0x5e82 <__fp_nan>
    60ce:	60 e0       	ldi	r22, 0x00	; 0
    60d0:	70 e0       	ldi	r23, 0x00	; 0
    60d2:	80 e8       	ldi	r24, 0x80	; 128
    60d4:	9f e3       	ldi	r25, 0x3F	; 63
    60d6:	08 95       	ret
    60d8:	4f e7       	ldi	r20, 0x7F	; 127
    60da:	9f 77       	andi	r25, 0x7F	; 127
    60dc:	5f 93       	push	r21
    60de:	4f 93       	push	r20
    60e0:	3f 93       	push	r19
    60e2:	2f 93       	push	r18
    60e4:	9e d0       	rcall	.+316    	; 0x6222 <log>
    60e6:	2f 91       	pop	r18
    60e8:	3f 91       	pop	r19
    60ea:	4f 91       	pop	r20
    60ec:	5f 91       	pop	r21
    60ee:	52 df       	rcall	.-348    	; 0x5f94 <__mulsf3>
    60f0:	05 c0       	rjmp	.+10     	; 0x60fc <exp>
    60f2:	19 f4       	brne	.+6      	; 0x60fa <pow+0xa0>
    60f4:	0e f0       	brts	.+2      	; 0x60f8 <pow+0x9e>
    60f6:	bf ce       	rjmp	.-642    	; 0x5e76 <__fp_inf>
    60f8:	08 cf       	rjmp	.-496    	; 0x5f0a <__fp_zero>
    60fa:	c3 ce       	rjmp	.-634    	; 0x5e82 <__fp_nan>

000060fc <exp>:
    60fc:	ec de       	rcall	.-552    	; 0x5ed6 <__fp_splitA>
    60fe:	c8 f3       	brcs	.-14     	; 0x60f2 <pow+0x98>
    6100:	96 38       	cpi	r25, 0x86	; 134
    6102:	c0 f7       	brcc	.-16     	; 0x60f4 <pow+0x9a>
    6104:	07 f8       	bld	r0, 7
    6106:	0f 92       	push	r0
    6108:	e8 94       	clt
    610a:	2b e3       	ldi	r18, 0x3B	; 59
    610c:	3a ea       	ldi	r19, 0xAA	; 170
    610e:	48 eb       	ldi	r20, 0xB8	; 184
    6110:	5f e7       	ldi	r21, 0x7F	; 127
    6112:	4e df       	rcall	.-356    	; 0x5fb0 <__mulsf3_pse>
    6114:	0f 92       	push	r0
    6116:	0f 92       	push	r0
    6118:	0f 92       	push	r0
    611a:	4d b7       	in	r20, 0x3d	; 61
    611c:	5e b7       	in	r21, 0x3e	; 62
    611e:	0f 92       	push	r0
    6120:	c0 d0       	rcall	.+384    	; 0x62a2 <modf>
    6122:	e8 ec       	ldi	r30, 0xC8	; 200
    6124:	f0 e0       	ldi	r31, 0x00	; 0
    6126:	16 d0       	rcall	.+44     	; 0x6154 <__fp_powser>
    6128:	4f 91       	pop	r20
    612a:	5f 91       	pop	r21
    612c:	ef 91       	pop	r30
    612e:	ff 91       	pop	r31
    6130:	e5 95       	asr	r30
    6132:	ee 1f       	adc	r30, r30
    6134:	ff 1f       	adc	r31, r31
    6136:	49 f0       	breq	.+18     	; 0x614a <exp+0x4e>
    6138:	fe 57       	subi	r31, 0x7E	; 126
    613a:	e0 68       	ori	r30, 0x80	; 128
    613c:	44 27       	eor	r20, r20
    613e:	ee 0f       	add	r30, r30
    6140:	44 1f       	adc	r20, r20
    6142:	fa 95       	dec	r31
    6144:	e1 f7       	brne	.-8      	; 0x613e <exp+0x42>
    6146:	41 95       	neg	r20
    6148:	55 0b       	sbc	r21, r21
    614a:	32 d0       	rcall	.+100    	; 0x61b0 <ldexp>
    614c:	0f 90       	pop	r0
    614e:	07 fe       	sbrs	r0, 7
    6150:	26 c0       	rjmp	.+76     	; 0x619e <inverse>
    6152:	08 95       	ret

00006154 <__fp_powser>:
    6154:	df 93       	push	r29
    6156:	cf 93       	push	r28
    6158:	1f 93       	push	r17
    615a:	0f 93       	push	r16
    615c:	ff 92       	push	r15
    615e:	ef 92       	push	r14
    6160:	df 92       	push	r13
    6162:	7b 01       	movw	r14, r22
    6164:	8c 01       	movw	r16, r24
    6166:	68 94       	set
    6168:	05 c0       	rjmp	.+10     	; 0x6174 <__fp_powser+0x20>
    616a:	da 2e       	mov	r13, r26
    616c:	ef 01       	movw	r28, r30
    616e:	1e df       	rcall	.-452    	; 0x5fac <__mulsf3x>
    6170:	fe 01       	movw	r30, r28
    6172:	e8 94       	clt
    6174:	a5 91       	lpm	r26, Z+
    6176:	25 91       	lpm	r18, Z+
    6178:	35 91       	lpm	r19, Z+
    617a:	45 91       	lpm	r20, Z+
    617c:	55 91       	lpm	r21, Z+
    617e:	ae f3       	brts	.-22     	; 0x616a <__fp_powser+0x16>
    6180:	ef 01       	movw	r28, r30
    6182:	28 dd       	rcall	.-1456   	; 0x5bd4 <__addsf3x>
    6184:	fe 01       	movw	r30, r28
    6186:	97 01       	movw	r18, r14
    6188:	a8 01       	movw	r20, r16
    618a:	da 94       	dec	r13
    618c:	79 f7       	brne	.-34     	; 0x616c <__fp_powser+0x18>
    618e:	df 90       	pop	r13
    6190:	ef 90       	pop	r14
    6192:	ff 90       	pop	r15
    6194:	0f 91       	pop	r16
    6196:	1f 91       	pop	r17
    6198:	cf 91       	pop	r28
    619a:	df 91       	pop	r29
    619c:	08 95       	ret

0000619e <inverse>:
    619e:	9b 01       	movw	r18, r22
    61a0:	ac 01       	movw	r20, r24
    61a2:	60 e0       	ldi	r22, 0x00	; 0
    61a4:	70 e0       	ldi	r23, 0x00	; 0
    61a6:	80 e8       	ldi	r24, 0x80	; 128
    61a8:	9f e3       	ldi	r25, 0x3F	; 63
    61aa:	6b cd       	rjmp	.-1322   	; 0x5c82 <__divsf3>
    61ac:	64 ce       	rjmp	.-824    	; 0x5e76 <__fp_inf>
    61ae:	ac c0       	rjmp	.+344    	; 0x6308 <__fp_mpack>

000061b0 <ldexp>:
    61b0:	92 de       	rcall	.-732    	; 0x5ed6 <__fp_splitA>
    61b2:	e8 f3       	brcs	.-6      	; 0x61ae <inverse+0x10>
    61b4:	99 23       	and	r25, r25
    61b6:	d9 f3       	breq	.-10     	; 0x61ae <inverse+0x10>
    61b8:	94 0f       	add	r25, r20
    61ba:	51 1d       	adc	r21, r1
    61bc:	bb f3       	brvs	.-18     	; 0x61ac <inverse+0xe>
    61be:	91 50       	subi	r25, 0x01	; 1
    61c0:	50 40       	sbci	r21, 0x00	; 0
    61c2:	94 f0       	brlt	.+36     	; 0x61e8 <ldexp+0x38>
    61c4:	59 f0       	breq	.+22     	; 0x61dc <ldexp+0x2c>
    61c6:	88 23       	and	r24, r24
    61c8:	32 f0       	brmi	.+12     	; 0x61d6 <ldexp+0x26>
    61ca:	66 0f       	add	r22, r22
    61cc:	77 1f       	adc	r23, r23
    61ce:	88 1f       	adc	r24, r24
    61d0:	91 50       	subi	r25, 0x01	; 1
    61d2:	50 40       	sbci	r21, 0x00	; 0
    61d4:	c1 f7       	brne	.-16     	; 0x61c6 <ldexp+0x16>
    61d6:	9e 3f       	cpi	r25, 0xFE	; 254
    61d8:	51 05       	cpc	r21, r1
    61da:	44 f7       	brge	.-48     	; 0x61ac <inverse+0xe>
    61dc:	88 0f       	add	r24, r24
    61de:	91 1d       	adc	r25, r1
    61e0:	96 95       	lsr	r25
    61e2:	87 95       	ror	r24
    61e4:	97 f9       	bld	r25, 7
    61e6:	08 95       	ret
    61e8:	5f 3f       	cpi	r21, 0xFF	; 255
    61ea:	ac f0       	brlt	.+42     	; 0x6216 <ldexp+0x66>
    61ec:	98 3e       	cpi	r25, 0xE8	; 232
    61ee:	9c f0       	brlt	.+38     	; 0x6216 <ldexp+0x66>
    61f0:	bb 27       	eor	r27, r27
    61f2:	86 95       	lsr	r24
    61f4:	77 95       	ror	r23
    61f6:	67 95       	ror	r22
    61f8:	b7 95       	ror	r27
    61fa:	08 f4       	brcc	.+2      	; 0x61fe <ldexp+0x4e>
    61fc:	b1 60       	ori	r27, 0x01	; 1
    61fe:	93 95       	inc	r25
    6200:	c1 f7       	brne	.-16     	; 0x61f2 <ldexp+0x42>
    6202:	bb 0f       	add	r27, r27
    6204:	58 f7       	brcc	.-42     	; 0x61dc <ldexp+0x2c>
    6206:	11 f4       	brne	.+4      	; 0x620c <ldexp+0x5c>
    6208:	60 ff       	sbrs	r22, 0
    620a:	e8 cf       	rjmp	.-48     	; 0x61dc <ldexp+0x2c>
    620c:	6f 5f       	subi	r22, 0xFF	; 255
    620e:	7f 4f       	sbci	r23, 0xFF	; 255
    6210:	8f 4f       	sbci	r24, 0xFF	; 255
    6212:	9f 4f       	sbci	r25, 0xFF	; 255
    6214:	e3 cf       	rjmp	.-58     	; 0x61dc <ldexp+0x2c>
    6216:	7a ce       	rjmp	.-780    	; 0x5f0c <__fp_szero>
    6218:	0e f0       	brts	.+2      	; 0x621c <ldexp+0x6c>
    621a:	76 c0       	rjmp	.+236    	; 0x6308 <__fp_mpack>
    621c:	32 ce       	rjmp	.-924    	; 0x5e82 <__fp_nan>
    621e:	68 94       	set
    6220:	2a ce       	rjmp	.-940    	; 0x5e76 <__fp_inf>

00006222 <log>:
    6222:	59 de       	rcall	.-846    	; 0x5ed6 <__fp_splitA>
    6224:	c8 f3       	brcs	.-14     	; 0x6218 <ldexp+0x68>
    6226:	99 23       	and	r25, r25
    6228:	d1 f3       	breq	.-12     	; 0x621e <ldexp+0x6e>
    622a:	c6 f3       	brts	.-16     	; 0x621c <ldexp+0x6c>
    622c:	df 93       	push	r29
    622e:	cf 93       	push	r28
    6230:	1f 93       	push	r17
    6232:	0f 93       	push	r16
    6234:	ff 92       	push	r15
    6236:	c9 2f       	mov	r28, r25
    6238:	dd 27       	eor	r29, r29
    623a:	88 23       	and	r24, r24
    623c:	2a f0       	brmi	.+10     	; 0x6248 <log+0x26>
    623e:	21 97       	sbiw	r28, 0x01	; 1
    6240:	66 0f       	add	r22, r22
    6242:	77 1f       	adc	r23, r23
    6244:	88 1f       	adc	r24, r24
    6246:	da f7       	brpl	.-10     	; 0x623e <log+0x1c>
    6248:	20 e0       	ldi	r18, 0x00	; 0
    624a:	30 e0       	ldi	r19, 0x00	; 0
    624c:	40 e8       	ldi	r20, 0x80	; 128
    624e:	5f eb       	ldi	r21, 0xBF	; 191
    6250:	9f e3       	ldi	r25, 0x3F	; 63
    6252:	88 39       	cpi	r24, 0x98	; 152
    6254:	20 f0       	brcs	.+8      	; 0x625e <log+0x3c>
    6256:	80 3e       	cpi	r24, 0xE0	; 224
    6258:	30 f0       	brcs	.+12     	; 0x6266 <log+0x44>
    625a:	21 96       	adiw	r28, 0x01	; 1
    625c:	8f 77       	andi	r24, 0x7F	; 127
    625e:	a9 dc       	rcall	.-1710   	; 0x5bb2 <__addsf3>
    6260:	e0 ef       	ldi	r30, 0xF0	; 240
    6262:	f0 e0       	ldi	r31, 0x00	; 0
    6264:	03 c0       	rjmp	.+6      	; 0x626c <log+0x4a>
    6266:	a5 dc       	rcall	.-1718   	; 0x5bb2 <__addsf3>
    6268:	ed e1       	ldi	r30, 0x1D	; 29
    626a:	f1 e0       	ldi	r31, 0x01	; 1
    626c:	73 df       	rcall	.-282    	; 0x6154 <__fp_powser>
    626e:	8b 01       	movw	r16, r22
    6270:	be 01       	movw	r22, r28
    6272:	ec 01       	movw	r28, r24
    6274:	fb 2e       	mov	r15, r27
    6276:	6f 57       	subi	r22, 0x7F	; 127
    6278:	71 09       	sbc	r23, r1
    627a:	75 95       	asr	r23
    627c:	77 1f       	adc	r23, r23
    627e:	88 0b       	sbc	r24, r24
    6280:	99 0b       	sbc	r25, r25
    6282:	9a dd       	rcall	.-1228   	; 0x5db8 <__floatsisf>
    6284:	28 e1       	ldi	r18, 0x18	; 24
    6286:	32 e7       	ldi	r19, 0x72	; 114
    6288:	41 e3       	ldi	r20, 0x31	; 49
    628a:	5f e3       	ldi	r21, 0x3F	; 63
    628c:	8f de       	rcall	.-738    	; 0x5fac <__mulsf3x>
    628e:	af 2d       	mov	r26, r15
    6290:	98 01       	movw	r18, r16
    6292:	ae 01       	movw	r20, r28
    6294:	ff 90       	pop	r15
    6296:	0f 91       	pop	r16
    6298:	1f 91       	pop	r17
    629a:	cf 91       	pop	r28
    629c:	df 91       	pop	r29
    629e:	9a dc       	rcall	.-1740   	; 0x5bd4 <__addsf3x>
    62a0:	01 ce       	rjmp	.-1022   	; 0x5ea4 <__fp_round>

000062a2 <modf>:
    62a2:	fa 01       	movw	r30, r20
    62a4:	dc 01       	movw	r26, r24
    62a6:	aa 0f       	add	r26, r26
    62a8:	bb 1f       	adc	r27, r27
    62aa:	9b 01       	movw	r18, r22
    62ac:	ac 01       	movw	r20, r24
    62ae:	bf 57       	subi	r27, 0x7F	; 127
    62b0:	28 f4       	brcc	.+10     	; 0x62bc <modf+0x1a>
    62b2:	22 27       	eor	r18, r18
    62b4:	33 27       	eor	r19, r19
    62b6:	44 27       	eor	r20, r20
    62b8:	50 78       	andi	r21, 0x80	; 128
    62ba:	1f c0       	rjmp	.+62     	; 0x62fa <modf+0x58>
    62bc:	b7 51       	subi	r27, 0x17	; 23
    62be:	88 f4       	brcc	.+34     	; 0x62e2 <modf+0x40>
    62c0:	ab 2f       	mov	r26, r27
    62c2:	00 24       	eor	r0, r0
    62c4:	46 95       	lsr	r20
    62c6:	37 95       	ror	r19
    62c8:	27 95       	ror	r18
    62ca:	01 1c       	adc	r0, r1
    62cc:	a3 95       	inc	r26
    62ce:	d2 f3       	brmi	.-12     	; 0x62c4 <modf+0x22>
    62d0:	00 20       	and	r0, r0
    62d2:	69 f0       	breq	.+26     	; 0x62ee <modf+0x4c>
    62d4:	22 0f       	add	r18, r18
    62d6:	33 1f       	adc	r19, r19
    62d8:	44 1f       	adc	r20, r20
    62da:	b3 95       	inc	r27
    62dc:	da f3       	brmi	.-10     	; 0x62d4 <modf+0x32>
    62de:	0d d0       	rcall	.+26     	; 0x62fa <modf+0x58>
    62e0:	67 cc       	rjmp	.-1842   	; 0x5bb0 <__subsf3>
    62e2:	61 30       	cpi	r22, 0x01	; 1
    62e4:	71 05       	cpc	r23, r1
    62e6:	a0 e8       	ldi	r26, 0x80	; 128
    62e8:	8a 07       	cpc	r24, r26
    62ea:	b9 46       	sbci	r27, 0x69	; 105
    62ec:	30 f4       	brcc	.+12     	; 0x62fa <modf+0x58>
    62ee:	9b 01       	movw	r18, r22
    62f0:	ac 01       	movw	r20, r24
    62f2:	66 27       	eor	r22, r22
    62f4:	77 27       	eor	r23, r23
    62f6:	88 27       	eor	r24, r24
    62f8:	90 78       	andi	r25, 0x80	; 128
    62fa:	30 96       	adiw	r30, 0x00	; 0
    62fc:	21 f0       	breq	.+8      	; 0x6306 <modf+0x64>
    62fe:	20 83       	st	Z, r18
    6300:	31 83       	std	Z+1, r19	; 0x01
    6302:	42 83       	std	Z+2, r20	; 0x02
    6304:	53 83       	std	Z+3, r21	; 0x03
    6306:	08 95       	ret

00006308 <__fp_mpack>:
    6308:	9f 3f       	cpi	r25, 0xFF	; 255
    630a:	31 f0       	breq	.+12     	; 0x6318 <__fp_mpack_finite+0xc>

0000630c <__fp_mpack_finite>:
    630c:	91 50       	subi	r25, 0x01	; 1
    630e:	20 f4       	brcc	.+8      	; 0x6318 <__fp_mpack_finite+0xc>
    6310:	87 95       	ror	r24
    6312:	77 95       	ror	r23
    6314:	67 95       	ror	r22
    6316:	b7 95       	ror	r27
    6318:	88 0f       	add	r24, r24
    631a:	91 1d       	adc	r25, r1
    631c:	96 95       	lsr	r25
    631e:	87 95       	ror	r24
    6320:	97 f9       	bld	r25, 7
    6322:	08 95       	ret

00006324 <vfprintf>:
    6324:	a1 e1       	ldi	r26, 0x11	; 17
    6326:	b0 e0       	ldi	r27, 0x00	; 0
    6328:	e7 e9       	ldi	r30, 0x97	; 151
    632a:	f1 e3       	ldi	r31, 0x31	; 49
    632c:	b7 c3       	rjmp	.+1902   	; 0x6a9c <__prologue_saves__>
    632e:	3c 01       	movw	r6, r24
    6330:	7f 87       	std	Y+15, r23	; 0x0f
    6332:	6e 87       	std	Y+14, r22	; 0x0e
    6334:	6a 01       	movw	r12, r20
    6336:	fc 01       	movw	r30, r24
    6338:	17 82       	std	Z+7, r1	; 0x07
    633a:	16 82       	std	Z+6, r1	; 0x06
    633c:	83 81       	ldd	r24, Z+3	; 0x03
    633e:	81 fd       	sbrc	r24, 1
    6340:	03 c0       	rjmp	.+6      	; 0x6348 <vfprintf+0x24>
    6342:	6f ef       	ldi	r22, 0xFF	; 255
    6344:	7f ef       	ldi	r23, 0xFF	; 255
    6346:	52 c3       	rjmp	.+1700   	; 0x69ec <vfprintf+0x6c8>
    6348:	9e 01       	movw	r18, r28
    634a:	2f 5f       	subi	r18, 0xFF	; 255
    634c:	3f 4f       	sbci	r19, 0xFF	; 255
    634e:	39 8b       	std	Y+17, r19	; 0x11
    6350:	28 8b       	std	Y+16, r18	; 0x10
    6352:	f3 01       	movw	r30, r6
    6354:	23 81       	ldd	r18, Z+3	; 0x03
    6356:	ee 85       	ldd	r30, Y+14	; 0x0e
    6358:	ff 85       	ldd	r31, Y+15	; 0x0f
    635a:	23 fd       	sbrc	r18, 3
    635c:	85 91       	lpm	r24, Z+
    635e:	23 ff       	sbrs	r18, 3
    6360:	81 91       	ld	r24, Z+
    6362:	ff 87       	std	Y+15, r31	; 0x0f
    6364:	ee 87       	std	Y+14, r30	; 0x0e
    6366:	88 23       	and	r24, r24
    6368:	09 f4       	brne	.+2      	; 0x636c <vfprintf+0x48>
    636a:	3d c3       	rjmp	.+1658   	; 0x69e6 <vfprintf+0x6c2>
    636c:	85 32       	cpi	r24, 0x25	; 37
    636e:	51 f4       	brne	.+20     	; 0x6384 <vfprintf+0x60>
    6370:	ee 85       	ldd	r30, Y+14	; 0x0e
    6372:	ff 85       	ldd	r31, Y+15	; 0x0f
    6374:	23 fd       	sbrc	r18, 3
    6376:	85 91       	lpm	r24, Z+
    6378:	23 ff       	sbrs	r18, 3
    637a:	81 91       	ld	r24, Z+
    637c:	ff 87       	std	Y+15, r31	; 0x0f
    637e:	ee 87       	std	Y+14, r30	; 0x0e
    6380:	85 32       	cpi	r24, 0x25	; 37
    6382:	21 f4       	brne	.+8      	; 0x638c <vfprintf+0x68>
    6384:	90 e0       	ldi	r25, 0x00	; 0
    6386:	b3 01       	movw	r22, r6
    6388:	20 d6       	rcall	.+3136   	; 0x6fca <fputc>
    638a:	e3 cf       	rjmp	.-58     	; 0x6352 <vfprintf+0x2e>
    638c:	98 2f       	mov	r25, r24
    638e:	10 e0       	ldi	r17, 0x00	; 0
    6390:	88 24       	eor	r8, r8
    6392:	99 24       	eor	r9, r9
    6394:	10 32       	cpi	r17, 0x20	; 32
    6396:	b0 f4       	brcc	.+44     	; 0x63c4 <vfprintf+0xa0>
    6398:	9b 32       	cpi	r25, 0x2B	; 43
    639a:	69 f0       	breq	.+26     	; 0x63b6 <vfprintf+0x92>
    639c:	9c 32       	cpi	r25, 0x2C	; 44
    639e:	28 f4       	brcc	.+10     	; 0x63aa <vfprintf+0x86>
    63a0:	90 32       	cpi	r25, 0x20	; 32
    63a2:	51 f0       	breq	.+20     	; 0x63b8 <vfprintf+0x94>
    63a4:	93 32       	cpi	r25, 0x23	; 35
    63a6:	71 f4       	brne	.+28     	; 0x63c4 <vfprintf+0xa0>
    63a8:	0b c0       	rjmp	.+22     	; 0x63c0 <vfprintf+0x9c>
    63aa:	9d 32       	cpi	r25, 0x2D	; 45
    63ac:	39 f0       	breq	.+14     	; 0x63bc <vfprintf+0x98>
    63ae:	90 33       	cpi	r25, 0x30	; 48
    63b0:	49 f4       	brne	.+18     	; 0x63c4 <vfprintf+0xa0>
    63b2:	11 60       	ori	r17, 0x01	; 1
    63b4:	28 c0       	rjmp	.+80     	; 0x6406 <vfprintf+0xe2>
    63b6:	12 60       	ori	r17, 0x02	; 2
    63b8:	14 60       	ori	r17, 0x04	; 4
    63ba:	25 c0       	rjmp	.+74     	; 0x6406 <vfprintf+0xe2>
    63bc:	18 60       	ori	r17, 0x08	; 8
    63be:	23 c0       	rjmp	.+70     	; 0x6406 <vfprintf+0xe2>
    63c0:	10 61       	ori	r17, 0x10	; 16
    63c2:	21 c0       	rjmp	.+66     	; 0x6406 <vfprintf+0xe2>
    63c4:	17 fd       	sbrc	r17, 7
    63c6:	2a c0       	rjmp	.+84     	; 0x641c <vfprintf+0xf8>
    63c8:	89 2f       	mov	r24, r25
    63ca:	80 53       	subi	r24, 0x30	; 48
    63cc:	8a 30       	cpi	r24, 0x0A	; 10
    63ce:	78 f4       	brcc	.+30     	; 0x63ee <vfprintf+0xca>
    63d0:	16 ff       	sbrs	r17, 6
    63d2:	06 c0       	rjmp	.+12     	; 0x63e0 <vfprintf+0xbc>
    63d4:	fa e0       	ldi	r31, 0x0A	; 10
    63d6:	9f 9e       	mul	r9, r31
    63d8:	90 2c       	mov	r9, r0
    63da:	11 24       	eor	r1, r1
    63dc:	98 0e       	add	r9, r24
    63de:	13 c0       	rjmp	.+38     	; 0x6406 <vfprintf+0xe2>
    63e0:	3a e0       	ldi	r19, 0x0A	; 10
    63e2:	83 9e       	mul	r8, r19
    63e4:	80 2c       	mov	r8, r0
    63e6:	11 24       	eor	r1, r1
    63e8:	88 0e       	add	r8, r24
    63ea:	10 62       	ori	r17, 0x20	; 32
    63ec:	0c c0       	rjmp	.+24     	; 0x6406 <vfprintf+0xe2>
    63ee:	9e 32       	cpi	r25, 0x2E	; 46
    63f0:	21 f4       	brne	.+8      	; 0x63fa <vfprintf+0xd6>
    63f2:	16 fd       	sbrc	r17, 6
    63f4:	f8 c2       	rjmp	.+1520   	; 0x69e6 <vfprintf+0x6c2>
    63f6:	10 64       	ori	r17, 0x40	; 64
    63f8:	06 c0       	rjmp	.+12     	; 0x6406 <vfprintf+0xe2>
    63fa:	9c 36       	cpi	r25, 0x6C	; 108
    63fc:	11 f4       	brne	.+4      	; 0x6402 <vfprintf+0xde>
    63fe:	10 68       	ori	r17, 0x80	; 128
    6400:	02 c0       	rjmp	.+4      	; 0x6406 <vfprintf+0xe2>
    6402:	98 36       	cpi	r25, 0x68	; 104
    6404:	59 f4       	brne	.+22     	; 0x641c <vfprintf+0xf8>
    6406:	ee 85       	ldd	r30, Y+14	; 0x0e
    6408:	ff 85       	ldd	r31, Y+15	; 0x0f
    640a:	23 fd       	sbrc	r18, 3
    640c:	95 91       	lpm	r25, Z+
    640e:	23 ff       	sbrs	r18, 3
    6410:	91 91       	ld	r25, Z+
    6412:	ff 87       	std	Y+15, r31	; 0x0f
    6414:	ee 87       	std	Y+14, r30	; 0x0e
    6416:	99 23       	and	r25, r25
    6418:	09 f0       	breq	.+2      	; 0x641c <vfprintf+0xf8>
    641a:	bc cf       	rjmp	.-136    	; 0x6394 <vfprintf+0x70>
    641c:	89 2f       	mov	r24, r25
    641e:	85 54       	subi	r24, 0x45	; 69
    6420:	83 30       	cpi	r24, 0x03	; 3
    6422:	20 f4       	brcc	.+8      	; 0x642c <vfprintf+0x108>
    6424:	81 2f       	mov	r24, r17
    6426:	80 61       	ori	r24, 0x10	; 16
    6428:	90 5e       	subi	r25, 0xE0	; 224
    642a:	07 c0       	rjmp	.+14     	; 0x643a <vfprintf+0x116>
    642c:	89 2f       	mov	r24, r25
    642e:	85 56       	subi	r24, 0x65	; 101
    6430:	83 30       	cpi	r24, 0x03	; 3
    6432:	08 f0       	brcs	.+2      	; 0x6436 <vfprintf+0x112>
    6434:	8f c1       	rjmp	.+798    	; 0x6754 <vfprintf+0x430>
    6436:	81 2f       	mov	r24, r17
    6438:	8f 7e       	andi	r24, 0xEF	; 239
    643a:	86 fd       	sbrc	r24, 6
    643c:	02 c0       	rjmp	.+4      	; 0x6442 <vfprintf+0x11e>
    643e:	76 e0       	ldi	r23, 0x06	; 6
    6440:	97 2e       	mov	r9, r23
    6442:	6f e3       	ldi	r22, 0x3F	; 63
    6444:	f6 2e       	mov	r15, r22
    6446:	f8 22       	and	r15, r24
    6448:	95 36       	cpi	r25, 0x65	; 101
    644a:	19 f4       	brne	.+6      	; 0x6452 <vfprintf+0x12e>
    644c:	f0 e4       	ldi	r31, 0x40	; 64
    644e:	ff 2a       	or	r15, r31
    6450:	07 c0       	rjmp	.+14     	; 0x6460 <vfprintf+0x13c>
    6452:	96 36       	cpi	r25, 0x66	; 102
    6454:	19 f4       	brne	.+6      	; 0x645c <vfprintf+0x138>
    6456:	20 e8       	ldi	r18, 0x80	; 128
    6458:	f2 2a       	or	r15, r18
    645a:	02 c0       	rjmp	.+4      	; 0x6460 <vfprintf+0x13c>
    645c:	91 10       	cpse	r9, r1
    645e:	9a 94       	dec	r9
    6460:	f7 fe       	sbrs	r15, 7
    6462:	0a c0       	rjmp	.+20     	; 0x6478 <vfprintf+0x154>
    6464:	3b e3       	ldi	r19, 0x3B	; 59
    6466:	39 15       	cp	r19, r9
    6468:	18 f4       	brcc	.+6      	; 0x6470 <vfprintf+0x14c>
    646a:	5c e3       	ldi	r21, 0x3C	; 60
    646c:	b5 2e       	mov	r11, r21
    646e:	02 c0       	rjmp	.+4      	; 0x6474 <vfprintf+0x150>
    6470:	b9 2c       	mov	r11, r9
    6472:	b3 94       	inc	r11
    6474:	27 e0       	ldi	r18, 0x07	; 7
    6476:	09 c0       	rjmp	.+18     	; 0x648a <vfprintf+0x166>
    6478:	47 e0       	ldi	r20, 0x07	; 7
    647a:	49 15       	cp	r20, r9
    647c:	20 f4       	brcc	.+8      	; 0x6486 <vfprintf+0x162>
    647e:	bb 24       	eor	r11, r11
    6480:	47 e0       	ldi	r20, 0x07	; 7
    6482:	94 2e       	mov	r9, r20
    6484:	f7 cf       	rjmp	.-18     	; 0x6474 <vfprintf+0x150>
    6486:	29 2d       	mov	r18, r9
    6488:	bb 24       	eor	r11, r11
    648a:	c6 01       	movw	r24, r12
    648c:	04 96       	adiw	r24, 0x04	; 4
    648e:	9d 87       	std	Y+13, r25	; 0x0d
    6490:	8c 87       	std	Y+12, r24	; 0x0c
    6492:	f6 01       	movw	r30, r12
    6494:	60 81       	ld	r22, Z
    6496:	71 81       	ldd	r23, Z+1	; 0x01
    6498:	82 81       	ldd	r24, Z+2	; 0x02
    649a:	93 81       	ldd	r25, Z+3	; 0x03
    649c:	ae 01       	movw	r20, r28
    649e:	4f 5f       	subi	r20, 0xFF	; 255
    64a0:	5f 4f       	sbci	r21, 0xFF	; 255
    64a2:	0b 2d       	mov	r16, r11
    64a4:	a4 d4       	rcall	.+2376   	; 0x6dee <__ftoa_engine>
    64a6:	6c 01       	movw	r12, r24
    64a8:	09 81       	ldd	r16, Y+1	; 0x01
    64aa:	20 2e       	mov	r2, r16
    64ac:	33 24       	eor	r3, r3
    64ae:	00 ff       	sbrs	r16, 0
    64b0:	04 c0       	rjmp	.+8      	; 0x64ba <vfprintf+0x196>
    64b2:	03 fd       	sbrc	r16, 3
    64b4:	02 c0       	rjmp	.+4      	; 0x64ba <vfprintf+0x196>
    64b6:	1d e2       	ldi	r17, 0x2D	; 45
    64b8:	09 c0       	rjmp	.+18     	; 0x64cc <vfprintf+0x1a8>
    64ba:	f1 fe       	sbrs	r15, 1
    64bc:	02 c0       	rjmp	.+4      	; 0x64c2 <vfprintf+0x19e>
    64be:	1b e2       	ldi	r17, 0x2B	; 43
    64c0:	05 c0       	rjmp	.+10     	; 0x64cc <vfprintf+0x1a8>
    64c2:	f2 fc       	sbrc	r15, 2
    64c4:	02 c0       	rjmp	.+4      	; 0x64ca <vfprintf+0x1a6>
    64c6:	10 e0       	ldi	r17, 0x00	; 0
    64c8:	01 c0       	rjmp	.+2      	; 0x64cc <vfprintf+0x1a8>
    64ca:	10 e2       	ldi	r17, 0x20	; 32
    64cc:	c1 01       	movw	r24, r2
    64ce:	8c 70       	andi	r24, 0x0C	; 12
    64d0:	90 70       	andi	r25, 0x00	; 0
    64d2:	89 2b       	or	r24, r25
    64d4:	a1 f1       	breq	.+104    	; 0x653e <vfprintf+0x21a>
    64d6:	11 23       	and	r17, r17
    64d8:	11 f4       	brne	.+4      	; 0x64de <vfprintf+0x1ba>
    64da:	83 e0       	ldi	r24, 0x03	; 3
    64dc:	01 c0       	rjmp	.+2      	; 0x64e0 <vfprintf+0x1bc>
    64de:	84 e0       	ldi	r24, 0x04	; 4
    64e0:	88 15       	cp	r24, r8
    64e2:	10 f0       	brcs	.+4      	; 0x64e8 <vfprintf+0x1c4>
    64e4:	88 24       	eor	r8, r8
    64e6:	09 c0       	rjmp	.+18     	; 0x64fa <vfprintf+0x1d6>
    64e8:	88 1a       	sub	r8, r24
    64ea:	f3 fc       	sbrc	r15, 3
    64ec:	06 c0       	rjmp	.+12     	; 0x64fa <vfprintf+0x1d6>
    64ee:	80 e2       	ldi	r24, 0x20	; 32
    64f0:	90 e0       	ldi	r25, 0x00	; 0
    64f2:	b3 01       	movw	r22, r6
    64f4:	6a d5       	rcall	.+2772   	; 0x6fca <fputc>
    64f6:	8a 94       	dec	r8
    64f8:	d1 f7       	brne	.-12     	; 0x64ee <vfprintf+0x1ca>
    64fa:	11 23       	and	r17, r17
    64fc:	21 f0       	breq	.+8      	; 0x6506 <vfprintf+0x1e2>
    64fe:	81 2f       	mov	r24, r17
    6500:	90 e0       	ldi	r25, 0x00	; 0
    6502:	b3 01       	movw	r22, r6
    6504:	62 d5       	rcall	.+2756   	; 0x6fca <fputc>
    6506:	23 fe       	sbrs	r2, 3
    6508:	03 c0       	rjmp	.+6      	; 0x6510 <vfprintf+0x1ec>
    650a:	0f e5       	ldi	r16, 0x5F	; 95
    650c:	15 e0       	ldi	r17, 0x05	; 5
    650e:	0d c0       	rjmp	.+26     	; 0x652a <vfprintf+0x206>
    6510:	03 e6       	ldi	r16, 0x63	; 99
    6512:	15 e0       	ldi	r17, 0x05	; 5
    6514:	0a c0       	rjmp	.+20     	; 0x652a <vfprintf+0x206>
    6516:	e1 14       	cp	r14, r1
    6518:	f1 04       	cpc	r15, r1
    651a:	09 f0       	breq	.+2      	; 0x651e <vfprintf+0x1fa>
    651c:	80 52       	subi	r24, 0x20	; 32
    651e:	90 e0       	ldi	r25, 0x00	; 0
    6520:	b3 01       	movw	r22, r6
    6522:	53 d5       	rcall	.+2726   	; 0x6fca <fputc>
    6524:	0f 5f       	subi	r16, 0xFF	; 255
    6526:	1f 4f       	sbci	r17, 0xFF	; 255
    6528:	05 c0       	rjmp	.+10     	; 0x6534 <vfprintf+0x210>
    652a:	ef 2c       	mov	r14, r15
    652c:	ff 24       	eor	r15, r15
    652e:	f0 e1       	ldi	r31, 0x10	; 16
    6530:	ef 22       	and	r14, r31
    6532:	ff 24       	eor	r15, r15
    6534:	f8 01       	movw	r30, r16
    6536:	84 91       	lpm	r24, Z+
    6538:	88 23       	and	r24, r24
    653a:	69 f7       	brne	.-38     	; 0x6516 <vfprintf+0x1f2>
    653c:	08 c1       	rjmp	.+528    	; 0x674e <vfprintf+0x42a>
    653e:	f7 fe       	sbrs	r15, 7
    6540:	12 c0       	rjmp	.+36     	; 0x6566 <vfprintf+0x242>
    6542:	bc 0c       	add	r11, r12
    6544:	24 fe       	sbrs	r2, 4
    6546:	04 c0       	rjmp	.+8      	; 0x6550 <vfprintf+0x22c>
    6548:	8a 81       	ldd	r24, Y+2	; 0x02
    654a:	81 33       	cpi	r24, 0x31	; 49
    654c:	09 f4       	brne	.+2      	; 0x6550 <vfprintf+0x22c>
    654e:	ba 94       	dec	r11
    6550:	1b 14       	cp	r1, r11
    6552:	1c f0       	brlt	.+6      	; 0x655a <vfprintf+0x236>
    6554:	bb 24       	eor	r11, r11
    6556:	b3 94       	inc	r11
    6558:	2d c0       	rjmp	.+90     	; 0x65b4 <vfprintf+0x290>
    655a:	f8 e0       	ldi	r31, 0x08	; 8
    655c:	fb 15       	cp	r31, r11
    655e:	50 f5       	brcc	.+84     	; 0x65b4 <vfprintf+0x290>
    6560:	38 e0       	ldi	r19, 0x08	; 8
    6562:	b3 2e       	mov	r11, r19
    6564:	27 c0       	rjmp	.+78     	; 0x65b4 <vfprintf+0x290>
    6566:	f6 fc       	sbrc	r15, 6
    6568:	25 c0       	rjmp	.+74     	; 0x65b4 <vfprintf+0x290>
    656a:	89 2d       	mov	r24, r9
    656c:	90 e0       	ldi	r25, 0x00	; 0
    656e:	8c 15       	cp	r24, r12
    6570:	9d 05       	cpc	r25, r13
    6572:	4c f0       	brlt	.+18     	; 0x6586 <vfprintf+0x262>
    6574:	2c ef       	ldi	r18, 0xFC	; 252
    6576:	c2 16       	cp	r12, r18
    6578:	2f ef       	ldi	r18, 0xFF	; 255
    657a:	d2 06       	cpc	r13, r18
    657c:	24 f0       	brlt	.+8      	; 0x6586 <vfprintf+0x262>
    657e:	30 e8       	ldi	r19, 0x80	; 128
    6580:	f3 2a       	or	r15, r19
    6582:	01 c0       	rjmp	.+2      	; 0x6586 <vfprintf+0x262>
    6584:	9a 94       	dec	r9
    6586:	99 20       	and	r9, r9
    6588:	49 f0       	breq	.+18     	; 0x659c <vfprintf+0x278>
    658a:	e2 e0       	ldi	r30, 0x02	; 2
    658c:	f0 e0       	ldi	r31, 0x00	; 0
    658e:	ec 0f       	add	r30, r28
    6590:	fd 1f       	adc	r31, r29
    6592:	e9 0d       	add	r30, r9
    6594:	f1 1d       	adc	r31, r1
    6596:	80 81       	ld	r24, Z
    6598:	80 33       	cpi	r24, 0x30	; 48
    659a:	a1 f3       	breq	.-24     	; 0x6584 <vfprintf+0x260>
    659c:	f7 fe       	sbrs	r15, 7
    659e:	0a c0       	rjmp	.+20     	; 0x65b4 <vfprintf+0x290>
    65a0:	b9 2c       	mov	r11, r9
    65a2:	b3 94       	inc	r11
    65a4:	89 2d       	mov	r24, r9
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	c8 16       	cp	r12, r24
    65aa:	d9 06       	cpc	r13, r25
    65ac:	14 f0       	brlt	.+4      	; 0x65b2 <vfprintf+0x28e>
    65ae:	99 24       	eor	r9, r9
    65b0:	01 c0       	rjmp	.+2      	; 0x65b4 <vfprintf+0x290>
    65b2:	9c 18       	sub	r9, r12
    65b4:	f7 fc       	sbrc	r15, 7
    65b6:	03 c0       	rjmp	.+6      	; 0x65be <vfprintf+0x29a>
    65b8:	25 e0       	ldi	r18, 0x05	; 5
    65ba:	30 e0       	ldi	r19, 0x00	; 0
    65bc:	09 c0       	rjmp	.+18     	; 0x65d0 <vfprintf+0x2ac>
    65be:	1c 14       	cp	r1, r12
    65c0:	1d 04       	cpc	r1, r13
    65c2:	1c f0       	brlt	.+6      	; 0x65ca <vfprintf+0x2a6>
    65c4:	21 e0       	ldi	r18, 0x01	; 1
    65c6:	30 e0       	ldi	r19, 0x00	; 0
    65c8:	03 c0       	rjmp	.+6      	; 0x65d0 <vfprintf+0x2ac>
    65ca:	96 01       	movw	r18, r12
    65cc:	2f 5f       	subi	r18, 0xFF	; 255
    65ce:	3f 4f       	sbci	r19, 0xFF	; 255
    65d0:	11 23       	and	r17, r17
    65d2:	11 f0       	breq	.+4      	; 0x65d8 <vfprintf+0x2b4>
    65d4:	2f 5f       	subi	r18, 0xFF	; 255
    65d6:	3f 4f       	sbci	r19, 0xFF	; 255
    65d8:	99 20       	and	r9, r9
    65da:	29 f0       	breq	.+10     	; 0x65e6 <vfprintf+0x2c2>
    65dc:	89 2d       	mov	r24, r9
    65de:	90 e0       	ldi	r25, 0x00	; 0
    65e0:	01 96       	adiw	r24, 0x01	; 1
    65e2:	28 0f       	add	r18, r24
    65e4:	39 1f       	adc	r19, r25
    65e6:	88 2d       	mov	r24, r8
    65e8:	90 e0       	ldi	r25, 0x00	; 0
    65ea:	28 17       	cp	r18, r24
    65ec:	39 07       	cpc	r19, r25
    65ee:	14 f0       	brlt	.+4      	; 0x65f4 <vfprintf+0x2d0>
    65f0:	88 24       	eor	r8, r8
    65f2:	01 c0       	rjmp	.+2      	; 0x65f6 <vfprintf+0x2d2>
    65f4:	82 1a       	sub	r8, r18
    65f6:	4f 2c       	mov	r4, r15
    65f8:	55 24       	eor	r5, r5
    65fa:	c2 01       	movw	r24, r4
    65fc:	89 70       	andi	r24, 0x09	; 9
    65fe:	90 70       	andi	r25, 0x00	; 0
    6600:	89 2b       	or	r24, r25
    6602:	31 f0       	breq	.+12     	; 0x6610 <vfprintf+0x2ec>
    6604:	07 c0       	rjmp	.+14     	; 0x6614 <vfprintf+0x2f0>
    6606:	80 e2       	ldi	r24, 0x20	; 32
    6608:	90 e0       	ldi	r25, 0x00	; 0
    660a:	b3 01       	movw	r22, r6
    660c:	de d4       	rcall	.+2492   	; 0x6fca <fputc>
    660e:	8a 94       	dec	r8
    6610:	88 20       	and	r8, r8
    6612:	c9 f7       	brne	.-14     	; 0x6606 <vfprintf+0x2e2>
    6614:	11 23       	and	r17, r17
    6616:	21 f0       	breq	.+8      	; 0x6620 <vfprintf+0x2fc>
    6618:	81 2f       	mov	r24, r17
    661a:	90 e0       	ldi	r25, 0x00	; 0
    661c:	b3 01       	movw	r22, r6
    661e:	d5 d4       	rcall	.+2474   	; 0x6fca <fputc>
    6620:	43 fe       	sbrs	r4, 3
    6622:	06 c0       	rjmp	.+12     	; 0x6630 <vfprintf+0x30c>
    6624:	07 c0       	rjmp	.+14     	; 0x6634 <vfprintf+0x310>
    6626:	80 e3       	ldi	r24, 0x30	; 48
    6628:	90 e0       	ldi	r25, 0x00	; 0
    662a:	b3 01       	movw	r22, r6
    662c:	ce d4       	rcall	.+2460   	; 0x6fca <fputc>
    662e:	8a 94       	dec	r8
    6630:	88 20       	and	r8, r8
    6632:	c9 f7       	brne	.-14     	; 0x6626 <vfprintf+0x302>
    6634:	f7 fe       	sbrs	r15, 7
    6636:	44 c0       	rjmp	.+136    	; 0x66c0 <vfprintf+0x39c>
    6638:	86 01       	movw	r16, r12
    663a:	d7 fe       	sbrs	r13, 7
    663c:	02 c0       	rjmp	.+4      	; 0x6642 <vfprintf+0x31e>
    663e:	00 e0       	ldi	r16, 0x00	; 0
    6640:	10 e0       	ldi	r17, 0x00	; 0
    6642:	76 01       	movw	r14, r12
    6644:	08 94       	sec
    6646:	e1 1c       	adc	r14, r1
    6648:	f1 1c       	adc	r15, r1
    664a:	e0 1a       	sub	r14, r16
    664c:	f1 0a       	sbc	r15, r17
    664e:	41 e0       	ldi	r20, 0x01	; 1
    6650:	50 e0       	ldi	r21, 0x00	; 0
    6652:	4c 0f       	add	r20, r28
    6654:	5d 1f       	adc	r21, r29
    6656:	e4 0e       	add	r14, r20
    6658:	f5 1e       	adc	r15, r21
    665a:	26 01       	movw	r4, r12
    665c:	4b 18       	sub	r4, r11
    665e:	51 08       	sbc	r5, r1
    6660:	89 2d       	mov	r24, r9
    6662:	90 e0       	ldi	r25, 0x00	; 0
    6664:	aa 24       	eor	r10, r10
    6666:	bb 24       	eor	r11, r11
    6668:	a8 1a       	sub	r10, r24
    666a:	b9 0a       	sbc	r11, r25
    666c:	5f ef       	ldi	r21, 0xFF	; 255
    666e:	0f 3f       	cpi	r16, 0xFF	; 255
    6670:	15 07       	cpc	r17, r21
    6672:	21 f4       	brne	.+8      	; 0x667c <vfprintf+0x358>
    6674:	8e e2       	ldi	r24, 0x2E	; 46
    6676:	90 e0       	ldi	r25, 0x00	; 0
    6678:	b3 01       	movw	r22, r6
    667a:	a7 d4       	rcall	.+2382   	; 0x6fca <fputc>
    667c:	c0 16       	cp	r12, r16
    667e:	d1 06       	cpc	r13, r17
    6680:	34 f0       	brlt	.+12     	; 0x668e <vfprintf+0x36a>
    6682:	40 16       	cp	r4, r16
    6684:	51 06       	cpc	r5, r17
    6686:	1c f4       	brge	.+6      	; 0x668e <vfprintf+0x36a>
    6688:	f7 01       	movw	r30, r14
    668a:	80 81       	ld	r24, Z
    668c:	01 c0       	rjmp	.+2      	; 0x6690 <vfprintf+0x36c>
    668e:	80 e3       	ldi	r24, 0x30	; 48
    6690:	01 50       	subi	r16, 0x01	; 1
    6692:	10 40       	sbci	r17, 0x00	; 0
    6694:	08 94       	sec
    6696:	e1 1c       	adc	r14, r1
    6698:	f1 1c       	adc	r15, r1
    669a:	0a 15       	cp	r16, r10
    669c:	1b 05       	cpc	r17, r11
    669e:	24 f0       	brlt	.+8      	; 0x66a8 <vfprintf+0x384>
    66a0:	90 e0       	ldi	r25, 0x00	; 0
    66a2:	b3 01       	movw	r22, r6
    66a4:	92 d4       	rcall	.+2340   	; 0x6fca <fputc>
    66a6:	e2 cf       	rjmp	.-60     	; 0x666c <vfprintf+0x348>
    66a8:	0c 15       	cp	r16, r12
    66aa:	1d 05       	cpc	r17, r13
    66ac:	39 f4       	brne	.+14     	; 0x66bc <vfprintf+0x398>
    66ae:	9a 81       	ldd	r25, Y+2	; 0x02
    66b0:	96 33       	cpi	r25, 0x36	; 54
    66b2:	18 f4       	brcc	.+6      	; 0x66ba <vfprintf+0x396>
    66b4:	95 33       	cpi	r25, 0x35	; 53
    66b6:	11 f4       	brne	.+4      	; 0x66bc <vfprintf+0x398>
    66b8:	24 fe       	sbrs	r2, 4
    66ba:	81 e3       	ldi	r24, 0x31	; 49
    66bc:	90 e0       	ldi	r25, 0x00	; 0
    66be:	45 c0       	rjmp	.+138    	; 0x674a <vfprintf+0x426>
    66c0:	8a 81       	ldd	r24, Y+2	; 0x02
    66c2:	81 33       	cpi	r24, 0x31	; 49
    66c4:	09 f0       	breq	.+2      	; 0x66c8 <vfprintf+0x3a4>
    66c6:	0f 7e       	andi	r16, 0xEF	; 239
    66c8:	90 e0       	ldi	r25, 0x00	; 0
    66ca:	b3 01       	movw	r22, r6
    66cc:	7e d4       	rcall	.+2300   	; 0x6fca <fputc>
    66ce:	99 20       	and	r9, r9
    66d0:	91 f0       	breq	.+36     	; 0x66f6 <vfprintf+0x3d2>
    66d2:	8e e2       	ldi	r24, 0x2E	; 46
    66d4:	90 e0       	ldi	r25, 0x00	; 0
    66d6:	b3 01       	movw	r22, r6
    66d8:	78 d4       	rcall	.+2288   	; 0x6fca <fputc>
    66da:	12 e0       	ldi	r17, 0x02	; 2
    66dc:	e1 e0       	ldi	r30, 0x01	; 1
    66de:	f0 e0       	ldi	r31, 0x00	; 0
    66e0:	ec 0f       	add	r30, r28
    66e2:	fd 1f       	adc	r31, r29
    66e4:	e1 0f       	add	r30, r17
    66e6:	f1 1d       	adc	r31, r1
    66e8:	1f 5f       	subi	r17, 0xFF	; 255
    66ea:	80 81       	ld	r24, Z
    66ec:	90 e0       	ldi	r25, 0x00	; 0
    66ee:	b3 01       	movw	r22, r6
    66f0:	6c d4       	rcall	.+2264   	; 0x6fca <fputc>
    66f2:	9a 94       	dec	r9
    66f4:	99 f7       	brne	.-26     	; 0x66dc <vfprintf+0x3b8>
    66f6:	44 fc       	sbrc	r4, 4
    66f8:	03 c0       	rjmp	.+6      	; 0x6700 <vfprintf+0x3dc>
    66fa:	85 e6       	ldi	r24, 0x65	; 101
    66fc:	90 e0       	ldi	r25, 0x00	; 0
    66fe:	02 c0       	rjmp	.+4      	; 0x6704 <vfprintf+0x3e0>
    6700:	85 e4       	ldi	r24, 0x45	; 69
    6702:	90 e0       	ldi	r25, 0x00	; 0
    6704:	b3 01       	movw	r22, r6
    6706:	61 d4       	rcall	.+2242   	; 0x6fca <fputc>
    6708:	d7 fc       	sbrc	r13, 7
    670a:	05 c0       	rjmp	.+10     	; 0x6716 <vfprintf+0x3f2>
    670c:	c1 14       	cp	r12, r1
    670e:	d1 04       	cpc	r13, r1
    6710:	41 f4       	brne	.+16     	; 0x6722 <vfprintf+0x3fe>
    6712:	04 ff       	sbrs	r16, 4
    6714:	06 c0       	rjmp	.+12     	; 0x6722 <vfprintf+0x3fe>
    6716:	d0 94       	com	r13
    6718:	c1 94       	neg	r12
    671a:	d1 08       	sbc	r13, r1
    671c:	d3 94       	inc	r13
    671e:	8d e2       	ldi	r24, 0x2D	; 45
    6720:	01 c0       	rjmp	.+2      	; 0x6724 <vfprintf+0x400>
    6722:	8b e2       	ldi	r24, 0x2B	; 43
    6724:	90 e0       	ldi	r25, 0x00	; 0
    6726:	b3 01       	movw	r22, r6
    6728:	50 d4       	rcall	.+2208   	; 0x6fca <fputc>
    672a:	80 e3       	ldi	r24, 0x30	; 48
    672c:	05 c0       	rjmp	.+10     	; 0x6738 <vfprintf+0x414>
    672e:	8f 5f       	subi	r24, 0xFF	; 255
    6730:	26 ef       	ldi	r18, 0xF6	; 246
    6732:	3f ef       	ldi	r19, 0xFF	; 255
    6734:	c2 0e       	add	r12, r18
    6736:	d3 1e       	adc	r13, r19
    6738:	3a e0       	ldi	r19, 0x0A	; 10
    673a:	c3 16       	cp	r12, r19
    673c:	d1 04       	cpc	r13, r1
    673e:	bc f7       	brge	.-18     	; 0x672e <vfprintf+0x40a>
    6740:	90 e0       	ldi	r25, 0x00	; 0
    6742:	b3 01       	movw	r22, r6
    6744:	42 d4       	rcall	.+2180   	; 0x6fca <fputc>
    6746:	c6 01       	movw	r24, r12
    6748:	c0 96       	adiw	r24, 0x30	; 48
    674a:	b3 01       	movw	r22, r6
    674c:	3e d4       	rcall	.+2172   	; 0x6fca <fputc>
    674e:	cc 84       	ldd	r12, Y+12	; 0x0c
    6750:	dd 84       	ldd	r13, Y+13	; 0x0d
    6752:	46 c1       	rjmp	.+652    	; 0x69e0 <vfprintf+0x6bc>
    6754:	93 36       	cpi	r25, 0x63	; 99
    6756:	31 f0       	breq	.+12     	; 0x6764 <vfprintf+0x440>
    6758:	93 37       	cpi	r25, 0x73	; 115
    675a:	99 f0       	breq	.+38     	; 0x6782 <vfprintf+0x45e>
    675c:	93 35       	cpi	r25, 0x53	; 83
    675e:	09 f0       	breq	.+2      	; 0x6762 <vfprintf+0x43e>
    6760:	55 c0       	rjmp	.+170    	; 0x680c <vfprintf+0x4e8>
    6762:	22 c0       	rjmp	.+68     	; 0x67a8 <vfprintf+0x484>
    6764:	f6 01       	movw	r30, r12
    6766:	80 81       	ld	r24, Z
    6768:	89 83       	std	Y+1, r24	; 0x01
    676a:	5e 01       	movw	r10, r28
    676c:	08 94       	sec
    676e:	a1 1c       	adc	r10, r1
    6770:	b1 1c       	adc	r11, r1
    6772:	22 e0       	ldi	r18, 0x02	; 2
    6774:	30 e0       	ldi	r19, 0x00	; 0
    6776:	c2 0e       	add	r12, r18
    6778:	d3 1e       	adc	r13, r19
    677a:	21 e0       	ldi	r18, 0x01	; 1
    677c:	e2 2e       	mov	r14, r18
    677e:	f1 2c       	mov	r15, r1
    6780:	11 c0       	rjmp	.+34     	; 0x67a4 <vfprintf+0x480>
    6782:	f6 01       	movw	r30, r12
    6784:	a0 80       	ld	r10, Z
    6786:	b1 80       	ldd	r11, Z+1	; 0x01
    6788:	16 fd       	sbrc	r17, 6
    678a:	03 c0       	rjmp	.+6      	; 0x6792 <vfprintf+0x46e>
    678c:	6f ef       	ldi	r22, 0xFF	; 255
    678e:	7f ef       	ldi	r23, 0xFF	; 255
    6790:	02 c0       	rjmp	.+4      	; 0x6796 <vfprintf+0x472>
    6792:	69 2d       	mov	r22, r9
    6794:	70 e0       	ldi	r23, 0x00	; 0
    6796:	22 e0       	ldi	r18, 0x02	; 2
    6798:	30 e0       	ldi	r19, 0x00	; 0
    679a:	c2 0e       	add	r12, r18
    679c:	d3 1e       	adc	r13, r19
    679e:	c5 01       	movw	r24, r10
    67a0:	09 d4       	rcall	.+2066   	; 0x6fb4 <strnlen>
    67a2:	7c 01       	movw	r14, r24
    67a4:	1f 77       	andi	r17, 0x7F	; 127
    67a6:	12 c0       	rjmp	.+36     	; 0x67cc <vfprintf+0x4a8>
    67a8:	f6 01       	movw	r30, r12
    67aa:	a0 80       	ld	r10, Z
    67ac:	b1 80       	ldd	r11, Z+1	; 0x01
    67ae:	16 fd       	sbrc	r17, 6
    67b0:	03 c0       	rjmp	.+6      	; 0x67b8 <vfprintf+0x494>
    67b2:	6f ef       	ldi	r22, 0xFF	; 255
    67b4:	7f ef       	ldi	r23, 0xFF	; 255
    67b6:	02 c0       	rjmp	.+4      	; 0x67bc <vfprintf+0x498>
    67b8:	69 2d       	mov	r22, r9
    67ba:	70 e0       	ldi	r23, 0x00	; 0
    67bc:	22 e0       	ldi	r18, 0x02	; 2
    67be:	30 e0       	ldi	r19, 0x00	; 0
    67c0:	c2 0e       	add	r12, r18
    67c2:	d3 1e       	adc	r13, r19
    67c4:	c5 01       	movw	r24, r10
    67c6:	eb d3       	rcall	.+2006   	; 0x6f9e <strnlen_P>
    67c8:	7c 01       	movw	r14, r24
    67ca:	10 68       	ori	r17, 0x80	; 128
    67cc:	13 ff       	sbrs	r17, 3
    67ce:	06 c0       	rjmp	.+12     	; 0x67dc <vfprintf+0x4b8>
    67d0:	19 c0       	rjmp	.+50     	; 0x6804 <vfprintf+0x4e0>
    67d2:	80 e2       	ldi	r24, 0x20	; 32
    67d4:	90 e0       	ldi	r25, 0x00	; 0
    67d6:	b3 01       	movw	r22, r6
    67d8:	f8 d3       	rcall	.+2032   	; 0x6fca <fputc>
    67da:	8a 94       	dec	r8
    67dc:	88 2d       	mov	r24, r8
    67de:	90 e0       	ldi	r25, 0x00	; 0
    67e0:	e8 16       	cp	r14, r24
    67e2:	f9 06       	cpc	r15, r25
    67e4:	b0 f3       	brcs	.-20     	; 0x67d2 <vfprintf+0x4ae>
    67e6:	0e c0       	rjmp	.+28     	; 0x6804 <vfprintf+0x4e0>
    67e8:	f5 01       	movw	r30, r10
    67ea:	17 fd       	sbrc	r17, 7
    67ec:	85 91       	lpm	r24, Z+
    67ee:	17 ff       	sbrs	r17, 7
    67f0:	81 91       	ld	r24, Z+
    67f2:	5f 01       	movw	r10, r30
    67f4:	90 e0       	ldi	r25, 0x00	; 0
    67f6:	b3 01       	movw	r22, r6
    67f8:	e8 d3       	rcall	.+2000   	; 0x6fca <fputc>
    67fa:	81 10       	cpse	r8, r1
    67fc:	8a 94       	dec	r8
    67fe:	08 94       	sec
    6800:	e1 08       	sbc	r14, r1
    6802:	f1 08       	sbc	r15, r1
    6804:	e1 14       	cp	r14, r1
    6806:	f1 04       	cpc	r15, r1
    6808:	79 f7       	brne	.-34     	; 0x67e8 <vfprintf+0x4c4>
    680a:	ea c0       	rjmp	.+468    	; 0x69e0 <vfprintf+0x6bc>
    680c:	94 36       	cpi	r25, 0x64	; 100
    680e:	11 f0       	breq	.+4      	; 0x6814 <vfprintf+0x4f0>
    6810:	99 36       	cpi	r25, 0x69	; 105
    6812:	81 f5       	brne	.+96     	; 0x6874 <vfprintf+0x550>
    6814:	17 ff       	sbrs	r17, 7
    6816:	08 c0       	rjmp	.+16     	; 0x6828 <vfprintf+0x504>
    6818:	f6 01       	movw	r30, r12
    681a:	20 81       	ld	r18, Z
    681c:	31 81       	ldd	r19, Z+1	; 0x01
    681e:	42 81       	ldd	r20, Z+2	; 0x02
    6820:	53 81       	ldd	r21, Z+3	; 0x03
    6822:	84 e0       	ldi	r24, 0x04	; 4
    6824:	90 e0       	ldi	r25, 0x00	; 0
    6826:	0a c0       	rjmp	.+20     	; 0x683c <vfprintf+0x518>
    6828:	f6 01       	movw	r30, r12
    682a:	80 81       	ld	r24, Z
    682c:	91 81       	ldd	r25, Z+1	; 0x01
    682e:	9c 01       	movw	r18, r24
    6830:	44 27       	eor	r20, r20
    6832:	37 fd       	sbrc	r19, 7
    6834:	40 95       	com	r20
    6836:	54 2f       	mov	r21, r20
    6838:	82 e0       	ldi	r24, 0x02	; 2
    683a:	90 e0       	ldi	r25, 0x00	; 0
    683c:	c8 0e       	add	r12, r24
    683e:	d9 1e       	adc	r13, r25
    6840:	9f e6       	ldi	r25, 0x6F	; 111
    6842:	f9 2e       	mov	r15, r25
    6844:	f1 22       	and	r15, r17
    6846:	57 ff       	sbrs	r21, 7
    6848:	09 c0       	rjmp	.+18     	; 0x685c <vfprintf+0x538>
    684a:	50 95       	com	r21
    684c:	40 95       	com	r20
    684e:	30 95       	com	r19
    6850:	21 95       	neg	r18
    6852:	3f 4f       	sbci	r19, 0xFF	; 255
    6854:	4f 4f       	sbci	r20, 0xFF	; 255
    6856:	5f 4f       	sbci	r21, 0xFF	; 255
    6858:	90 e8       	ldi	r25, 0x80	; 128
    685a:	f9 2a       	or	r15, r25
    685c:	ca 01       	movw	r24, r20
    685e:	b9 01       	movw	r22, r18
    6860:	ae 01       	movw	r20, r28
    6862:	4f 5f       	subi	r20, 0xFF	; 255
    6864:	5f 4f       	sbci	r21, 0xFF	; 255
    6866:	2a e0       	ldi	r18, 0x0A	; 10
    6868:	30 e0       	ldi	r19, 0x00	; 0
    686a:	22 d4       	rcall	.+2116   	; 0x70b0 <__ultoa_invert>
    686c:	e8 2e       	mov	r14, r24
    686e:	e8 89       	ldd	r30, Y+16	; 0x10
    6870:	ee 1a       	sub	r14, r30
    6872:	40 c0       	rjmp	.+128    	; 0x68f4 <vfprintf+0x5d0>
    6874:	95 37       	cpi	r25, 0x75	; 117
    6876:	21 f4       	brne	.+8      	; 0x6880 <vfprintf+0x55c>
    6878:	1f 7e       	andi	r17, 0xEF	; 239
    687a:	2a e0       	ldi	r18, 0x0A	; 10
    687c:	30 e0       	ldi	r19, 0x00	; 0
    687e:	1c c0       	rjmp	.+56     	; 0x68b8 <vfprintf+0x594>
    6880:	19 7f       	andi	r17, 0xF9	; 249
    6882:	9f 36       	cpi	r25, 0x6F	; 111
    6884:	61 f0       	breq	.+24     	; 0x689e <vfprintf+0x57a>
    6886:	90 37       	cpi	r25, 0x70	; 112
    6888:	20 f4       	brcc	.+8      	; 0x6892 <vfprintf+0x56e>
    688a:	98 35       	cpi	r25, 0x58	; 88
    688c:	09 f0       	breq	.+2      	; 0x6890 <vfprintf+0x56c>
    688e:	ab c0       	rjmp	.+342    	; 0x69e6 <vfprintf+0x6c2>
    6890:	0f c0       	rjmp	.+30     	; 0x68b0 <vfprintf+0x58c>
    6892:	90 37       	cpi	r25, 0x70	; 112
    6894:	39 f0       	breq	.+14     	; 0x68a4 <vfprintf+0x580>
    6896:	98 37       	cpi	r25, 0x78	; 120
    6898:	09 f0       	breq	.+2      	; 0x689c <vfprintf+0x578>
    689a:	a5 c0       	rjmp	.+330    	; 0x69e6 <vfprintf+0x6c2>
    689c:	04 c0       	rjmp	.+8      	; 0x68a6 <vfprintf+0x582>
    689e:	28 e0       	ldi	r18, 0x08	; 8
    68a0:	30 e0       	ldi	r19, 0x00	; 0
    68a2:	0a c0       	rjmp	.+20     	; 0x68b8 <vfprintf+0x594>
    68a4:	10 61       	ori	r17, 0x10	; 16
    68a6:	14 fd       	sbrc	r17, 4
    68a8:	14 60       	ori	r17, 0x04	; 4
    68aa:	20 e1       	ldi	r18, 0x10	; 16
    68ac:	30 e0       	ldi	r19, 0x00	; 0
    68ae:	04 c0       	rjmp	.+8      	; 0x68b8 <vfprintf+0x594>
    68b0:	14 fd       	sbrc	r17, 4
    68b2:	16 60       	ori	r17, 0x06	; 6
    68b4:	20 e1       	ldi	r18, 0x10	; 16
    68b6:	32 e0       	ldi	r19, 0x02	; 2
    68b8:	17 ff       	sbrs	r17, 7
    68ba:	08 c0       	rjmp	.+16     	; 0x68cc <vfprintf+0x5a8>
    68bc:	f6 01       	movw	r30, r12
    68be:	60 81       	ld	r22, Z
    68c0:	71 81       	ldd	r23, Z+1	; 0x01
    68c2:	82 81       	ldd	r24, Z+2	; 0x02
    68c4:	93 81       	ldd	r25, Z+3	; 0x03
    68c6:	44 e0       	ldi	r20, 0x04	; 4
    68c8:	50 e0       	ldi	r21, 0x00	; 0
    68ca:	08 c0       	rjmp	.+16     	; 0x68dc <vfprintf+0x5b8>
    68cc:	f6 01       	movw	r30, r12
    68ce:	80 81       	ld	r24, Z
    68d0:	91 81       	ldd	r25, Z+1	; 0x01
    68d2:	bc 01       	movw	r22, r24
    68d4:	80 e0       	ldi	r24, 0x00	; 0
    68d6:	90 e0       	ldi	r25, 0x00	; 0
    68d8:	42 e0       	ldi	r20, 0x02	; 2
    68da:	50 e0       	ldi	r21, 0x00	; 0
    68dc:	c4 0e       	add	r12, r20
    68de:	d5 1e       	adc	r13, r21
    68e0:	ae 01       	movw	r20, r28
    68e2:	4f 5f       	subi	r20, 0xFF	; 255
    68e4:	5f 4f       	sbci	r21, 0xFF	; 255
    68e6:	e4 d3       	rcall	.+1992   	; 0x70b0 <__ultoa_invert>
    68e8:	e8 2e       	mov	r14, r24
    68ea:	58 89       	ldd	r21, Y+16	; 0x10
    68ec:	e5 1a       	sub	r14, r21
    68ee:	8f e7       	ldi	r24, 0x7F	; 127
    68f0:	f8 2e       	mov	r15, r24
    68f2:	f1 22       	and	r15, r17
    68f4:	f6 fe       	sbrs	r15, 6
    68f6:	0b c0       	rjmp	.+22     	; 0x690e <vfprintf+0x5ea>
    68f8:	8e ef       	ldi	r24, 0xFE	; 254
    68fa:	f8 22       	and	r15, r24
    68fc:	e9 14       	cp	r14, r9
    68fe:	38 f4       	brcc	.+14     	; 0x690e <vfprintf+0x5ea>
    6900:	f4 fe       	sbrs	r15, 4
    6902:	07 c0       	rjmp	.+14     	; 0x6912 <vfprintf+0x5ee>
    6904:	f2 fc       	sbrc	r15, 2
    6906:	05 c0       	rjmp	.+10     	; 0x6912 <vfprintf+0x5ee>
    6908:	9f ee       	ldi	r25, 0xEF	; 239
    690a:	f9 22       	and	r15, r25
    690c:	02 c0       	rjmp	.+4      	; 0x6912 <vfprintf+0x5ee>
    690e:	1e 2d       	mov	r17, r14
    6910:	01 c0       	rjmp	.+2      	; 0x6914 <vfprintf+0x5f0>
    6912:	19 2d       	mov	r17, r9
    6914:	f4 fe       	sbrs	r15, 4
    6916:	0d c0       	rjmp	.+26     	; 0x6932 <vfprintf+0x60e>
    6918:	fe 01       	movw	r30, r28
    691a:	ee 0d       	add	r30, r14
    691c:	f1 1d       	adc	r31, r1
    691e:	80 81       	ld	r24, Z
    6920:	80 33       	cpi	r24, 0x30	; 48
    6922:	19 f4       	brne	.+6      	; 0x692a <vfprintf+0x606>
    6924:	e9 ee       	ldi	r30, 0xE9	; 233
    6926:	fe 22       	and	r15, r30
    6928:	08 c0       	rjmp	.+16     	; 0x693a <vfprintf+0x616>
    692a:	1f 5f       	subi	r17, 0xFF	; 255
    692c:	f2 fe       	sbrs	r15, 2
    692e:	05 c0       	rjmp	.+10     	; 0x693a <vfprintf+0x616>
    6930:	03 c0       	rjmp	.+6      	; 0x6938 <vfprintf+0x614>
    6932:	8f 2d       	mov	r24, r15
    6934:	86 78       	andi	r24, 0x86	; 134
    6936:	09 f0       	breq	.+2      	; 0x693a <vfprintf+0x616>
    6938:	1f 5f       	subi	r17, 0xFF	; 255
    693a:	0f 2d       	mov	r16, r15
    693c:	f3 fc       	sbrc	r15, 3
    693e:	13 c0       	rjmp	.+38     	; 0x6966 <vfprintf+0x642>
    6940:	f0 fe       	sbrs	r15, 0
    6942:	0e c0       	rjmp	.+28     	; 0x6960 <vfprintf+0x63c>
    6944:	18 15       	cp	r17, r8
    6946:	10 f0       	brcs	.+4      	; 0x694c <vfprintf+0x628>
    6948:	9e 2c       	mov	r9, r14
    694a:	0a c0       	rjmp	.+20     	; 0x6960 <vfprintf+0x63c>
    694c:	9e 2c       	mov	r9, r14
    694e:	98 0c       	add	r9, r8
    6950:	91 1a       	sub	r9, r17
    6952:	18 2d       	mov	r17, r8
    6954:	05 c0       	rjmp	.+10     	; 0x6960 <vfprintf+0x63c>
    6956:	80 e2       	ldi	r24, 0x20	; 32
    6958:	90 e0       	ldi	r25, 0x00	; 0
    695a:	b3 01       	movw	r22, r6
    695c:	36 d3       	rcall	.+1644   	; 0x6fca <fputc>
    695e:	1f 5f       	subi	r17, 0xFF	; 255
    6960:	18 15       	cp	r17, r8
    6962:	c8 f3       	brcs	.-14     	; 0x6956 <vfprintf+0x632>
    6964:	04 c0       	rjmp	.+8      	; 0x696e <vfprintf+0x64a>
    6966:	18 15       	cp	r17, r8
    6968:	10 f4       	brcc	.+4      	; 0x696e <vfprintf+0x64a>
    696a:	81 1a       	sub	r8, r17
    696c:	01 c0       	rjmp	.+2      	; 0x6970 <vfprintf+0x64c>
    696e:	88 24       	eor	r8, r8
    6970:	04 ff       	sbrs	r16, 4
    6972:	0e c0       	rjmp	.+28     	; 0x6990 <vfprintf+0x66c>
    6974:	80 e3       	ldi	r24, 0x30	; 48
    6976:	90 e0       	ldi	r25, 0x00	; 0
    6978:	b3 01       	movw	r22, r6
    697a:	27 d3       	rcall	.+1614   	; 0x6fca <fputc>
    697c:	02 ff       	sbrs	r16, 2
    697e:	1b c0       	rjmp	.+54     	; 0x69b6 <vfprintf+0x692>
    6980:	01 fd       	sbrc	r16, 1
    6982:	03 c0       	rjmp	.+6      	; 0x698a <vfprintf+0x666>
    6984:	88 e7       	ldi	r24, 0x78	; 120
    6986:	90 e0       	ldi	r25, 0x00	; 0
    6988:	0e c0       	rjmp	.+28     	; 0x69a6 <vfprintf+0x682>
    698a:	88 e5       	ldi	r24, 0x58	; 88
    698c:	90 e0       	ldi	r25, 0x00	; 0
    698e:	0b c0       	rjmp	.+22     	; 0x69a6 <vfprintf+0x682>
    6990:	80 2f       	mov	r24, r16
    6992:	86 78       	andi	r24, 0x86	; 134
    6994:	81 f0       	breq	.+32     	; 0x69b6 <vfprintf+0x692>
    6996:	01 ff       	sbrs	r16, 1
    6998:	02 c0       	rjmp	.+4      	; 0x699e <vfprintf+0x67a>
    699a:	8b e2       	ldi	r24, 0x2B	; 43
    699c:	01 c0       	rjmp	.+2      	; 0x69a0 <vfprintf+0x67c>
    699e:	80 e2       	ldi	r24, 0x20	; 32
    69a0:	f7 fc       	sbrc	r15, 7
    69a2:	8d e2       	ldi	r24, 0x2D	; 45
    69a4:	90 e0       	ldi	r25, 0x00	; 0
    69a6:	b3 01       	movw	r22, r6
    69a8:	10 d3       	rcall	.+1568   	; 0x6fca <fputc>
    69aa:	05 c0       	rjmp	.+10     	; 0x69b6 <vfprintf+0x692>
    69ac:	80 e3       	ldi	r24, 0x30	; 48
    69ae:	90 e0       	ldi	r25, 0x00	; 0
    69b0:	b3 01       	movw	r22, r6
    69b2:	0b d3       	rcall	.+1558   	; 0x6fca <fputc>
    69b4:	9a 94       	dec	r9
    69b6:	e9 14       	cp	r14, r9
    69b8:	c8 f3       	brcs	.-14     	; 0x69ac <vfprintf+0x688>
    69ba:	ea 94       	dec	r14
    69bc:	e1 e0       	ldi	r30, 0x01	; 1
    69be:	f0 e0       	ldi	r31, 0x00	; 0
    69c0:	ec 0f       	add	r30, r28
    69c2:	fd 1f       	adc	r31, r29
    69c4:	ee 0d       	add	r30, r14
    69c6:	f1 1d       	adc	r31, r1
    69c8:	80 81       	ld	r24, Z
    69ca:	90 e0       	ldi	r25, 0x00	; 0
    69cc:	b3 01       	movw	r22, r6
    69ce:	fd d2       	rcall	.+1530   	; 0x6fca <fputc>
    69d0:	ee 20       	and	r14, r14
    69d2:	99 f7       	brne	.-26     	; 0x69ba <vfprintf+0x696>
    69d4:	05 c0       	rjmp	.+10     	; 0x69e0 <vfprintf+0x6bc>
    69d6:	80 e2       	ldi	r24, 0x20	; 32
    69d8:	90 e0       	ldi	r25, 0x00	; 0
    69da:	b3 01       	movw	r22, r6
    69dc:	f6 d2       	rcall	.+1516   	; 0x6fca <fputc>
    69de:	8a 94       	dec	r8
    69e0:	88 20       	and	r8, r8
    69e2:	c9 f7       	brne	.-14     	; 0x69d6 <vfprintf+0x6b2>
    69e4:	b6 cc       	rjmp	.-1684   	; 0x6352 <vfprintf+0x2e>
    69e6:	f3 01       	movw	r30, r6
    69e8:	66 81       	ldd	r22, Z+6	; 0x06
    69ea:	77 81       	ldd	r23, Z+7	; 0x07
    69ec:	cb 01       	movw	r24, r22
    69ee:	61 96       	adiw	r28, 0x11	; 17
    69f0:	e2 e1       	ldi	r30, 0x12	; 18
    69f2:	70 c0       	rjmp	.+224    	; 0x6ad4 <__epilogue_restores__>

000069f4 <__mulsi3>:
    69f4:	62 9f       	mul	r22, r18
    69f6:	d0 01       	movw	r26, r0
    69f8:	73 9f       	mul	r23, r19
    69fa:	f0 01       	movw	r30, r0
    69fc:	82 9f       	mul	r24, r18
    69fe:	e0 0d       	add	r30, r0
    6a00:	f1 1d       	adc	r31, r1
    6a02:	64 9f       	mul	r22, r20
    6a04:	e0 0d       	add	r30, r0
    6a06:	f1 1d       	adc	r31, r1
    6a08:	92 9f       	mul	r25, r18
    6a0a:	f0 0d       	add	r31, r0
    6a0c:	83 9f       	mul	r24, r19
    6a0e:	f0 0d       	add	r31, r0
    6a10:	74 9f       	mul	r23, r20
    6a12:	f0 0d       	add	r31, r0
    6a14:	65 9f       	mul	r22, r21
    6a16:	f0 0d       	add	r31, r0
    6a18:	99 27       	eor	r25, r25
    6a1a:	72 9f       	mul	r23, r18
    6a1c:	b0 0d       	add	r27, r0
    6a1e:	e1 1d       	adc	r30, r1
    6a20:	f9 1f       	adc	r31, r25
    6a22:	63 9f       	mul	r22, r19
    6a24:	b0 0d       	add	r27, r0
    6a26:	e1 1d       	adc	r30, r1
    6a28:	f9 1f       	adc	r31, r25
    6a2a:	bd 01       	movw	r22, r26
    6a2c:	cf 01       	movw	r24, r30
    6a2e:	11 24       	eor	r1, r1
    6a30:	08 95       	ret

00006a32 <__divmodhi4>:
    6a32:	97 fb       	bst	r25, 7
    6a34:	09 2e       	mov	r0, r25
    6a36:	07 26       	eor	r0, r23
    6a38:	0a d0       	rcall	.+20     	; 0x6a4e <__divmodhi4_neg1>
    6a3a:	77 fd       	sbrc	r23, 7
    6a3c:	04 d0       	rcall	.+8      	; 0x6a46 <__divmodhi4_neg2>
    6a3e:	65 d0       	rcall	.+202    	; 0x6b0a <__udivmodhi4>
    6a40:	06 d0       	rcall	.+12     	; 0x6a4e <__divmodhi4_neg1>
    6a42:	00 20       	and	r0, r0
    6a44:	1a f4       	brpl	.+6      	; 0x6a4c <__divmodhi4_exit>

00006a46 <__divmodhi4_neg2>:
    6a46:	70 95       	com	r23
    6a48:	61 95       	neg	r22
    6a4a:	7f 4f       	sbci	r23, 0xFF	; 255

00006a4c <__divmodhi4_exit>:
    6a4c:	08 95       	ret

00006a4e <__divmodhi4_neg1>:
    6a4e:	f6 f7       	brtc	.-4      	; 0x6a4c <__divmodhi4_exit>
    6a50:	90 95       	com	r25
    6a52:	81 95       	neg	r24
    6a54:	9f 4f       	sbci	r25, 0xFF	; 255
    6a56:	08 95       	ret

00006a58 <__udivmodsi4>:
    6a58:	a1 e2       	ldi	r26, 0x21	; 33
    6a5a:	1a 2e       	mov	r1, r26
    6a5c:	aa 1b       	sub	r26, r26
    6a5e:	bb 1b       	sub	r27, r27
    6a60:	fd 01       	movw	r30, r26
    6a62:	0d c0       	rjmp	.+26     	; 0x6a7e <__udivmodsi4_ep>

00006a64 <__udivmodsi4_loop>:
    6a64:	aa 1f       	adc	r26, r26
    6a66:	bb 1f       	adc	r27, r27
    6a68:	ee 1f       	adc	r30, r30
    6a6a:	ff 1f       	adc	r31, r31
    6a6c:	a2 17       	cp	r26, r18
    6a6e:	b3 07       	cpc	r27, r19
    6a70:	e4 07       	cpc	r30, r20
    6a72:	f5 07       	cpc	r31, r21
    6a74:	20 f0       	brcs	.+8      	; 0x6a7e <__udivmodsi4_ep>
    6a76:	a2 1b       	sub	r26, r18
    6a78:	b3 0b       	sbc	r27, r19
    6a7a:	e4 0b       	sbc	r30, r20
    6a7c:	f5 0b       	sbc	r31, r21

00006a7e <__udivmodsi4_ep>:
    6a7e:	66 1f       	adc	r22, r22
    6a80:	77 1f       	adc	r23, r23
    6a82:	88 1f       	adc	r24, r24
    6a84:	99 1f       	adc	r25, r25
    6a86:	1a 94       	dec	r1
    6a88:	69 f7       	brne	.-38     	; 0x6a64 <__udivmodsi4_loop>
    6a8a:	60 95       	com	r22
    6a8c:	70 95       	com	r23
    6a8e:	80 95       	com	r24
    6a90:	90 95       	com	r25
    6a92:	9b 01       	movw	r18, r22
    6a94:	ac 01       	movw	r20, r24
    6a96:	bd 01       	movw	r22, r26
    6a98:	cf 01       	movw	r24, r30
    6a9a:	08 95       	ret

00006a9c <__prologue_saves__>:
    6a9c:	2f 92       	push	r2
    6a9e:	3f 92       	push	r3
    6aa0:	4f 92       	push	r4
    6aa2:	5f 92       	push	r5
    6aa4:	6f 92       	push	r6
    6aa6:	7f 92       	push	r7
    6aa8:	8f 92       	push	r8
    6aaa:	9f 92       	push	r9
    6aac:	af 92       	push	r10
    6aae:	bf 92       	push	r11
    6ab0:	cf 92       	push	r12
    6ab2:	df 92       	push	r13
    6ab4:	ef 92       	push	r14
    6ab6:	ff 92       	push	r15
    6ab8:	0f 93       	push	r16
    6aba:	1f 93       	push	r17
    6abc:	cf 93       	push	r28
    6abe:	df 93       	push	r29
    6ac0:	cd b7       	in	r28, 0x3d	; 61
    6ac2:	de b7       	in	r29, 0x3e	; 62
    6ac4:	ca 1b       	sub	r28, r26
    6ac6:	db 0b       	sbc	r29, r27
    6ac8:	0f b6       	in	r0, 0x3f	; 63
    6aca:	f8 94       	cli
    6acc:	de bf       	out	0x3e, r29	; 62
    6ace:	0f be       	out	0x3f, r0	; 63
    6ad0:	cd bf       	out	0x3d, r28	; 61
    6ad2:	09 94       	ijmp

00006ad4 <__epilogue_restores__>:
    6ad4:	2a 88       	ldd	r2, Y+18	; 0x12
    6ad6:	39 88       	ldd	r3, Y+17	; 0x11
    6ad8:	48 88       	ldd	r4, Y+16	; 0x10
    6ada:	5f 84       	ldd	r5, Y+15	; 0x0f
    6adc:	6e 84       	ldd	r6, Y+14	; 0x0e
    6ade:	7d 84       	ldd	r7, Y+13	; 0x0d
    6ae0:	8c 84       	ldd	r8, Y+12	; 0x0c
    6ae2:	9b 84       	ldd	r9, Y+11	; 0x0b
    6ae4:	aa 84       	ldd	r10, Y+10	; 0x0a
    6ae6:	b9 84       	ldd	r11, Y+9	; 0x09
    6ae8:	c8 84       	ldd	r12, Y+8	; 0x08
    6aea:	df 80       	ldd	r13, Y+7	; 0x07
    6aec:	ee 80       	ldd	r14, Y+6	; 0x06
    6aee:	fd 80       	ldd	r15, Y+5	; 0x05
    6af0:	0c 81       	ldd	r16, Y+4	; 0x04
    6af2:	1b 81       	ldd	r17, Y+3	; 0x03
    6af4:	aa 81       	ldd	r26, Y+2	; 0x02
    6af6:	b9 81       	ldd	r27, Y+1	; 0x01
    6af8:	ce 0f       	add	r28, r30
    6afa:	d1 1d       	adc	r29, r1
    6afc:	0f b6       	in	r0, 0x3f	; 63
    6afe:	f8 94       	cli
    6b00:	de bf       	out	0x3e, r29	; 62
    6b02:	0f be       	out	0x3f, r0	; 63
    6b04:	cd bf       	out	0x3d, r28	; 61
    6b06:	ed 01       	movw	r28, r26
    6b08:	08 95       	ret

00006b0a <__udivmodhi4>:
    6b0a:	aa 1b       	sub	r26, r26
    6b0c:	bb 1b       	sub	r27, r27
    6b0e:	51 e1       	ldi	r21, 0x11	; 17
    6b10:	07 c0       	rjmp	.+14     	; 0x6b20 <__udivmodhi4_ep>

00006b12 <__udivmodhi4_loop>:
    6b12:	aa 1f       	adc	r26, r26
    6b14:	bb 1f       	adc	r27, r27
    6b16:	a6 17       	cp	r26, r22
    6b18:	b7 07       	cpc	r27, r23
    6b1a:	10 f0       	brcs	.+4      	; 0x6b20 <__udivmodhi4_ep>
    6b1c:	a6 1b       	sub	r26, r22
    6b1e:	b7 0b       	sbc	r27, r23

00006b20 <__udivmodhi4_ep>:
    6b20:	88 1f       	adc	r24, r24
    6b22:	99 1f       	adc	r25, r25
    6b24:	5a 95       	dec	r21
    6b26:	a9 f7       	brne	.-22     	; 0x6b12 <__udivmodhi4_loop>
    6b28:	80 95       	com	r24
    6b2a:	90 95       	com	r25
    6b2c:	bc 01       	movw	r22, r24
    6b2e:	cd 01       	movw	r24, r26
    6b30:	08 95       	ret

00006b32 <malloc>:
    6b32:	cf 93       	push	r28
    6b34:	df 93       	push	r29
    6b36:	bc 01       	movw	r22, r24
    6b38:	82 30       	cpi	r24, 0x02	; 2
    6b3a:	91 05       	cpc	r25, r1
    6b3c:	10 f4       	brcc	.+4      	; 0x6b42 <malloc+0x10>
    6b3e:	62 e0       	ldi	r22, 0x02	; 2
    6b40:	70 e0       	ldi	r23, 0x00	; 0
    6b42:	a0 91 44 08 	lds	r26, 0x0844
    6b46:	b0 91 45 08 	lds	r27, 0x0845
    6b4a:	ed 01       	movw	r28, r26
    6b4c:	e0 e0       	ldi	r30, 0x00	; 0
    6b4e:	f0 e0       	ldi	r31, 0x00	; 0
    6b50:	40 e0       	ldi	r20, 0x00	; 0
    6b52:	50 e0       	ldi	r21, 0x00	; 0
    6b54:	21 c0       	rjmp	.+66     	; 0x6b98 <malloc+0x66>
    6b56:	88 81       	ld	r24, Y
    6b58:	99 81       	ldd	r25, Y+1	; 0x01
    6b5a:	86 17       	cp	r24, r22
    6b5c:	97 07       	cpc	r25, r23
    6b5e:	69 f4       	brne	.+26     	; 0x6b7a <malloc+0x48>
    6b60:	8a 81       	ldd	r24, Y+2	; 0x02
    6b62:	9b 81       	ldd	r25, Y+3	; 0x03
    6b64:	30 97       	sbiw	r30, 0x00	; 0
    6b66:	19 f0       	breq	.+6      	; 0x6b6e <malloc+0x3c>
    6b68:	93 83       	std	Z+3, r25	; 0x03
    6b6a:	82 83       	std	Z+2, r24	; 0x02
    6b6c:	04 c0       	rjmp	.+8      	; 0x6b76 <malloc+0x44>
    6b6e:	90 93 45 08 	sts	0x0845, r25
    6b72:	80 93 44 08 	sts	0x0844, r24
    6b76:	fe 01       	movw	r30, r28
    6b78:	34 c0       	rjmp	.+104    	; 0x6be2 <malloc+0xb0>
    6b7a:	68 17       	cp	r22, r24
    6b7c:	79 07       	cpc	r23, r25
    6b7e:	38 f4       	brcc	.+14     	; 0x6b8e <malloc+0x5c>
    6b80:	41 15       	cp	r20, r1
    6b82:	51 05       	cpc	r21, r1
    6b84:	19 f0       	breq	.+6      	; 0x6b8c <malloc+0x5a>
    6b86:	84 17       	cp	r24, r20
    6b88:	95 07       	cpc	r25, r21
    6b8a:	08 f4       	brcc	.+2      	; 0x6b8e <malloc+0x5c>
    6b8c:	ac 01       	movw	r20, r24
    6b8e:	fe 01       	movw	r30, r28
    6b90:	8a 81       	ldd	r24, Y+2	; 0x02
    6b92:	9b 81       	ldd	r25, Y+3	; 0x03
    6b94:	9c 01       	movw	r18, r24
    6b96:	e9 01       	movw	r28, r18
    6b98:	20 97       	sbiw	r28, 0x00	; 0
    6b9a:	e9 f6       	brne	.-70     	; 0x6b56 <malloc+0x24>
    6b9c:	41 15       	cp	r20, r1
    6b9e:	51 05       	cpc	r21, r1
    6ba0:	a9 f1       	breq	.+106    	; 0x6c0c <malloc+0xda>
    6ba2:	ca 01       	movw	r24, r20
    6ba4:	86 1b       	sub	r24, r22
    6ba6:	97 0b       	sbc	r25, r23
    6ba8:	04 97       	sbiw	r24, 0x04	; 4
    6baa:	08 f4       	brcc	.+2      	; 0x6bae <malloc+0x7c>
    6bac:	ba 01       	movw	r22, r20
    6bae:	e0 e0       	ldi	r30, 0x00	; 0
    6bb0:	f0 e0       	ldi	r31, 0x00	; 0
    6bb2:	2a c0       	rjmp	.+84     	; 0x6c08 <malloc+0xd6>
    6bb4:	8d 91       	ld	r24, X+
    6bb6:	9c 91       	ld	r25, X
    6bb8:	11 97       	sbiw	r26, 0x01	; 1
    6bba:	84 17       	cp	r24, r20
    6bbc:	95 07       	cpc	r25, r21
    6bbe:	f9 f4       	brne	.+62     	; 0x6bfe <malloc+0xcc>
    6bc0:	64 17       	cp	r22, r20
    6bc2:	75 07       	cpc	r23, r21
    6bc4:	81 f4       	brne	.+32     	; 0x6be6 <malloc+0xb4>
    6bc6:	12 96       	adiw	r26, 0x02	; 2
    6bc8:	8d 91       	ld	r24, X+
    6bca:	9c 91       	ld	r25, X
    6bcc:	13 97       	sbiw	r26, 0x03	; 3
    6bce:	30 97       	sbiw	r30, 0x00	; 0
    6bd0:	19 f0       	breq	.+6      	; 0x6bd8 <malloc+0xa6>
    6bd2:	93 83       	std	Z+3, r25	; 0x03
    6bd4:	82 83       	std	Z+2, r24	; 0x02
    6bd6:	04 c0       	rjmp	.+8      	; 0x6be0 <malloc+0xae>
    6bd8:	90 93 45 08 	sts	0x0845, r25
    6bdc:	80 93 44 08 	sts	0x0844, r24
    6be0:	fd 01       	movw	r30, r26
    6be2:	32 96       	adiw	r30, 0x02	; 2
    6be4:	4f c0       	rjmp	.+158    	; 0x6c84 <malloc+0x152>
    6be6:	ca 01       	movw	r24, r20
    6be8:	86 1b       	sub	r24, r22
    6bea:	97 0b       	sbc	r25, r23
    6bec:	fd 01       	movw	r30, r26
    6bee:	e8 0f       	add	r30, r24
    6bf0:	f9 1f       	adc	r31, r25
    6bf2:	61 93       	st	Z+, r22
    6bf4:	71 93       	st	Z+, r23
    6bf6:	02 97       	sbiw	r24, 0x02	; 2
    6bf8:	8d 93       	st	X+, r24
    6bfa:	9c 93       	st	X, r25
    6bfc:	43 c0       	rjmp	.+134    	; 0x6c84 <malloc+0x152>
    6bfe:	fd 01       	movw	r30, r26
    6c00:	82 81       	ldd	r24, Z+2	; 0x02
    6c02:	93 81       	ldd	r25, Z+3	; 0x03
    6c04:	9c 01       	movw	r18, r24
    6c06:	d9 01       	movw	r26, r18
    6c08:	10 97       	sbiw	r26, 0x00	; 0
    6c0a:	a1 f6       	brne	.-88     	; 0x6bb4 <malloc+0x82>
    6c0c:	80 91 42 08 	lds	r24, 0x0842
    6c10:	90 91 43 08 	lds	r25, 0x0843
    6c14:	89 2b       	or	r24, r25
    6c16:	41 f4       	brne	.+16     	; 0x6c28 <malloc+0xf6>
    6c18:	80 91 80 04 	lds	r24, 0x0480
    6c1c:	90 91 81 04 	lds	r25, 0x0481
    6c20:	90 93 43 08 	sts	0x0843, r25
    6c24:	80 93 42 08 	sts	0x0842, r24
    6c28:	40 91 82 04 	lds	r20, 0x0482
    6c2c:	50 91 83 04 	lds	r21, 0x0483
    6c30:	41 15       	cp	r20, r1
    6c32:	51 05       	cpc	r21, r1
    6c34:	41 f4       	brne	.+16     	; 0x6c46 <malloc+0x114>
    6c36:	4d b7       	in	r20, 0x3d	; 61
    6c38:	5e b7       	in	r21, 0x3e	; 62
    6c3a:	80 91 7e 04 	lds	r24, 0x047E
    6c3e:	90 91 7f 04 	lds	r25, 0x047F
    6c42:	48 1b       	sub	r20, r24
    6c44:	59 0b       	sbc	r21, r25
    6c46:	20 91 42 08 	lds	r18, 0x0842
    6c4a:	30 91 43 08 	lds	r19, 0x0843
    6c4e:	24 17       	cp	r18, r20
    6c50:	35 07       	cpc	r19, r21
    6c52:	b0 f4       	brcc	.+44     	; 0x6c80 <malloc+0x14e>
    6c54:	ca 01       	movw	r24, r20
    6c56:	82 1b       	sub	r24, r18
    6c58:	93 0b       	sbc	r25, r19
    6c5a:	86 17       	cp	r24, r22
    6c5c:	97 07       	cpc	r25, r23
    6c5e:	80 f0       	brcs	.+32     	; 0x6c80 <malloc+0x14e>
    6c60:	ab 01       	movw	r20, r22
    6c62:	4e 5f       	subi	r20, 0xFE	; 254
    6c64:	5f 4f       	sbci	r21, 0xFF	; 255
    6c66:	84 17       	cp	r24, r20
    6c68:	95 07       	cpc	r25, r21
    6c6a:	50 f0       	brcs	.+20     	; 0x6c80 <malloc+0x14e>
    6c6c:	42 0f       	add	r20, r18
    6c6e:	53 1f       	adc	r21, r19
    6c70:	50 93 43 08 	sts	0x0843, r21
    6c74:	40 93 42 08 	sts	0x0842, r20
    6c78:	f9 01       	movw	r30, r18
    6c7a:	61 93       	st	Z+, r22
    6c7c:	71 93       	st	Z+, r23
    6c7e:	02 c0       	rjmp	.+4      	; 0x6c84 <malloc+0x152>
    6c80:	e0 e0       	ldi	r30, 0x00	; 0
    6c82:	f0 e0       	ldi	r31, 0x00	; 0
    6c84:	cf 01       	movw	r24, r30
    6c86:	df 91       	pop	r29
    6c88:	cf 91       	pop	r28
    6c8a:	08 95       	ret

00006c8c <free>:
    6c8c:	cf 93       	push	r28
    6c8e:	df 93       	push	r29
    6c90:	00 97       	sbiw	r24, 0x00	; 0
    6c92:	09 f4       	brne	.+2      	; 0x6c96 <free+0xa>
    6c94:	50 c0       	rjmp	.+160    	; 0x6d36 <free+0xaa>
    6c96:	ec 01       	movw	r28, r24
    6c98:	22 97       	sbiw	r28, 0x02	; 2
    6c9a:	1b 82       	std	Y+3, r1	; 0x03
    6c9c:	1a 82       	std	Y+2, r1	; 0x02
    6c9e:	a0 91 44 08 	lds	r26, 0x0844
    6ca2:	b0 91 45 08 	lds	r27, 0x0845
    6ca6:	10 97       	sbiw	r26, 0x00	; 0
    6ca8:	09 f1       	breq	.+66     	; 0x6cec <free+0x60>
    6caa:	40 e0       	ldi	r20, 0x00	; 0
    6cac:	50 e0       	ldi	r21, 0x00	; 0
    6cae:	ac 17       	cp	r26, r28
    6cb0:	bd 07       	cpc	r27, r29
    6cb2:	08 f1       	brcs	.+66     	; 0x6cf6 <free+0x6a>
    6cb4:	bb 83       	std	Y+3, r27	; 0x03
    6cb6:	aa 83       	std	Y+2, r26	; 0x02
    6cb8:	fe 01       	movw	r30, r28
    6cba:	21 91       	ld	r18, Z+
    6cbc:	31 91       	ld	r19, Z+
    6cbe:	e2 0f       	add	r30, r18
    6cc0:	f3 1f       	adc	r31, r19
    6cc2:	ae 17       	cp	r26, r30
    6cc4:	bf 07       	cpc	r27, r31
    6cc6:	79 f4       	brne	.+30     	; 0x6ce6 <free+0x5a>
    6cc8:	8d 91       	ld	r24, X+
    6cca:	9c 91       	ld	r25, X
    6ccc:	11 97       	sbiw	r26, 0x01	; 1
    6cce:	28 0f       	add	r18, r24
    6cd0:	39 1f       	adc	r19, r25
    6cd2:	2e 5f       	subi	r18, 0xFE	; 254
    6cd4:	3f 4f       	sbci	r19, 0xFF	; 255
    6cd6:	39 83       	std	Y+1, r19	; 0x01
    6cd8:	28 83       	st	Y, r18
    6cda:	12 96       	adiw	r26, 0x02	; 2
    6cdc:	8d 91       	ld	r24, X+
    6cde:	9c 91       	ld	r25, X
    6ce0:	13 97       	sbiw	r26, 0x03	; 3
    6ce2:	9b 83       	std	Y+3, r25	; 0x03
    6ce4:	8a 83       	std	Y+2, r24	; 0x02
    6ce6:	41 15       	cp	r20, r1
    6ce8:	51 05       	cpc	r21, r1
    6cea:	71 f4       	brne	.+28     	; 0x6d08 <free+0x7c>
    6cec:	d0 93 45 08 	sts	0x0845, r29
    6cf0:	c0 93 44 08 	sts	0x0844, r28
    6cf4:	20 c0       	rjmp	.+64     	; 0x6d36 <free+0xaa>
    6cf6:	12 96       	adiw	r26, 0x02	; 2
    6cf8:	8d 91       	ld	r24, X+
    6cfa:	9c 91       	ld	r25, X
    6cfc:	13 97       	sbiw	r26, 0x03	; 3
    6cfe:	ad 01       	movw	r20, r26
    6d00:	00 97       	sbiw	r24, 0x00	; 0
    6d02:	11 f0       	breq	.+4      	; 0x6d08 <free+0x7c>
    6d04:	dc 01       	movw	r26, r24
    6d06:	d3 cf       	rjmp	.-90     	; 0x6cae <free+0x22>
    6d08:	fa 01       	movw	r30, r20
    6d0a:	d3 83       	std	Z+3, r29	; 0x03
    6d0c:	c2 83       	std	Z+2, r28	; 0x02
    6d0e:	21 91       	ld	r18, Z+
    6d10:	31 91       	ld	r19, Z+
    6d12:	e2 0f       	add	r30, r18
    6d14:	f3 1f       	adc	r31, r19
    6d16:	ce 17       	cp	r28, r30
    6d18:	df 07       	cpc	r29, r31
    6d1a:	69 f4       	brne	.+26     	; 0x6d36 <free+0xaa>
    6d1c:	88 81       	ld	r24, Y
    6d1e:	99 81       	ldd	r25, Y+1	; 0x01
    6d20:	28 0f       	add	r18, r24
    6d22:	39 1f       	adc	r19, r25
    6d24:	2e 5f       	subi	r18, 0xFE	; 254
    6d26:	3f 4f       	sbci	r19, 0xFF	; 255
    6d28:	fa 01       	movw	r30, r20
    6d2a:	31 83       	std	Z+1, r19	; 0x01
    6d2c:	20 83       	st	Z, r18
    6d2e:	8a 81       	ldd	r24, Y+2	; 0x02
    6d30:	9b 81       	ldd	r25, Y+3	; 0x03
    6d32:	93 83       	std	Z+3, r25	; 0x03
    6d34:	82 83       	std	Z+2, r24	; 0x02
    6d36:	df 91       	pop	r29
    6d38:	cf 91       	pop	r28
    6d3a:	08 95       	ret

00006d3c <do_rand>:
    6d3c:	a0 e0       	ldi	r26, 0x00	; 0
    6d3e:	b0 e0       	ldi	r27, 0x00	; 0
    6d40:	e3 ea       	ldi	r30, 0xA3	; 163
    6d42:	f6 e3       	ldi	r31, 0x36	; 54
    6d44:	b3 ce       	rjmp	.-666    	; 0x6aac <__prologue_saves__+0x10>
    6d46:	ec 01       	movw	r28, r24
    6d48:	a8 80       	ld	r10, Y
    6d4a:	b9 80       	ldd	r11, Y+1	; 0x01
    6d4c:	ca 80       	ldd	r12, Y+2	; 0x02
    6d4e:	db 80       	ldd	r13, Y+3	; 0x03
    6d50:	a1 14       	cp	r10, r1
    6d52:	b1 04       	cpc	r11, r1
    6d54:	c1 04       	cpc	r12, r1
    6d56:	d1 04       	cpc	r13, r1
    6d58:	41 f4       	brne	.+16     	; 0x6d6a <do_rand+0x2e>
    6d5a:	84 e2       	ldi	r24, 0x24	; 36
    6d5c:	a8 2e       	mov	r10, r24
    6d5e:	89 ed       	ldi	r24, 0xD9	; 217
    6d60:	b8 2e       	mov	r11, r24
    6d62:	8b e5       	ldi	r24, 0x5B	; 91
    6d64:	c8 2e       	mov	r12, r24
    6d66:	87 e0       	ldi	r24, 0x07	; 7
    6d68:	d8 2e       	mov	r13, r24
    6d6a:	c6 01       	movw	r24, r12
    6d6c:	b5 01       	movw	r22, r10
    6d6e:	2d e1       	ldi	r18, 0x1D	; 29
    6d70:	33 ef       	ldi	r19, 0xF3	; 243
    6d72:	41 e0       	ldi	r20, 0x01	; 1
    6d74:	50 e0       	ldi	r21, 0x00	; 0
    6d76:	fa d1       	rcall	.+1012   	; 0x716c <__divmodsi4>
    6d78:	27 ea       	ldi	r18, 0xA7	; 167
    6d7a:	31 e4       	ldi	r19, 0x41	; 65
    6d7c:	40 e0       	ldi	r20, 0x00	; 0
    6d7e:	50 e0       	ldi	r21, 0x00	; 0
    6d80:	39 de       	rcall	.-910    	; 0x69f4 <__mulsi3>
    6d82:	7b 01       	movw	r14, r22
    6d84:	8c 01       	movw	r16, r24
    6d86:	c6 01       	movw	r24, r12
    6d88:	b5 01       	movw	r22, r10
    6d8a:	2d e1       	ldi	r18, 0x1D	; 29
    6d8c:	33 ef       	ldi	r19, 0xF3	; 243
    6d8e:	41 e0       	ldi	r20, 0x01	; 1
    6d90:	50 e0       	ldi	r21, 0x00	; 0
    6d92:	ec d1       	rcall	.+984    	; 0x716c <__divmodsi4>
    6d94:	ca 01       	movw	r24, r20
    6d96:	b9 01       	movw	r22, r18
    6d98:	2c ee       	ldi	r18, 0xEC	; 236
    6d9a:	34 ef       	ldi	r19, 0xF4	; 244
    6d9c:	4f ef       	ldi	r20, 0xFF	; 255
    6d9e:	5f ef       	ldi	r21, 0xFF	; 255
    6da0:	29 de       	rcall	.-942    	; 0x69f4 <__mulsi3>
    6da2:	6e 0d       	add	r22, r14
    6da4:	7f 1d       	adc	r23, r15
    6da6:	80 1f       	adc	r24, r16
    6da8:	91 1f       	adc	r25, r17
    6daa:	97 ff       	sbrs	r25, 7
    6dac:	04 c0       	rjmp	.+8      	; 0x6db6 <do_rand+0x7a>
    6dae:	61 50       	subi	r22, 0x01	; 1
    6db0:	70 40       	sbci	r23, 0x00	; 0
    6db2:	80 40       	sbci	r24, 0x00	; 0
    6db4:	90 48       	sbci	r25, 0x80	; 128
    6db6:	68 83       	st	Y, r22
    6db8:	79 83       	std	Y+1, r23	; 0x01
    6dba:	8a 83       	std	Y+2, r24	; 0x02
    6dbc:	9b 83       	std	Y+3, r25	; 0x03
    6dbe:	9b 01       	movw	r18, r22
    6dc0:	3f 77       	andi	r19, 0x7F	; 127
    6dc2:	c9 01       	movw	r24, r18
    6dc4:	cd b7       	in	r28, 0x3d	; 61
    6dc6:	de b7       	in	r29, 0x3e	; 62
    6dc8:	ea e0       	ldi	r30, 0x0A	; 10
    6dca:	8c ce       	rjmp	.-744    	; 0x6ae4 <__epilogue_restores__+0x10>

00006dcc <rand_r>:
    6dcc:	b7 df       	rcall	.-146    	; 0x6d3c <do_rand>
    6dce:	08 95       	ret

00006dd0 <rand>:
    6dd0:	84 e8       	ldi	r24, 0x84	; 132
    6dd2:	94 e0       	ldi	r25, 0x04	; 4
    6dd4:	b3 df       	rcall	.-154    	; 0x6d3c <do_rand>
    6dd6:	08 95       	ret

00006dd8 <srand>:
    6dd8:	a0 e0       	ldi	r26, 0x00	; 0
    6dda:	b0 e0       	ldi	r27, 0x00	; 0
    6ddc:	80 93 84 04 	sts	0x0484, r24
    6de0:	90 93 85 04 	sts	0x0485, r25
    6de4:	a0 93 86 04 	sts	0x0486, r26
    6de8:	b0 93 87 04 	sts	0x0487, r27
    6dec:	08 95       	ret

00006dee <__ftoa_engine>:
    6dee:	28 30       	cpi	r18, 0x08	; 8
    6df0:	08 f0       	brcs	.+2      	; 0x6df4 <__ftoa_engine+0x6>
    6df2:	27 e0       	ldi	r18, 0x07	; 7
    6df4:	33 27       	eor	r19, r19
    6df6:	da 01       	movw	r26, r20
    6df8:	99 0f       	add	r25, r25
    6dfa:	31 1d       	adc	r19, r1
    6dfc:	87 fd       	sbrc	r24, 7
    6dfe:	91 60       	ori	r25, 0x01	; 1
    6e00:	00 96       	adiw	r24, 0x00	; 0
    6e02:	61 05       	cpc	r22, r1
    6e04:	71 05       	cpc	r23, r1
    6e06:	39 f4       	brne	.+14     	; 0x6e16 <__ftoa_engine+0x28>
    6e08:	32 60       	ori	r19, 0x02	; 2
    6e0a:	2e 5f       	subi	r18, 0xFE	; 254
    6e0c:	3d 93       	st	X+, r19
    6e0e:	30 e3       	ldi	r19, 0x30	; 48
    6e10:	2a 95       	dec	r18
    6e12:	e1 f7       	brne	.-8      	; 0x6e0c <__ftoa_engine+0x1e>
    6e14:	08 95       	ret
    6e16:	9f 3f       	cpi	r25, 0xFF	; 255
    6e18:	30 f0       	brcs	.+12     	; 0x6e26 <__ftoa_engine+0x38>
    6e1a:	80 38       	cpi	r24, 0x80	; 128
    6e1c:	71 05       	cpc	r23, r1
    6e1e:	61 05       	cpc	r22, r1
    6e20:	09 f0       	breq	.+2      	; 0x6e24 <__ftoa_engine+0x36>
    6e22:	3c 5f       	subi	r19, 0xFC	; 252
    6e24:	3c 5f       	subi	r19, 0xFC	; 252
    6e26:	3d 93       	st	X+, r19
    6e28:	91 30       	cpi	r25, 0x01	; 1
    6e2a:	08 f0       	brcs	.+2      	; 0x6e2e <__ftoa_engine+0x40>
    6e2c:	80 68       	ori	r24, 0x80	; 128
    6e2e:	91 1d       	adc	r25, r1
    6e30:	df 93       	push	r29
    6e32:	cf 93       	push	r28
    6e34:	1f 93       	push	r17
    6e36:	0f 93       	push	r16
    6e38:	ff 92       	push	r15
    6e3a:	ef 92       	push	r14
    6e3c:	19 2f       	mov	r17, r25
    6e3e:	98 7f       	andi	r25, 0xF8	; 248
    6e40:	96 95       	lsr	r25
    6e42:	e9 2f       	mov	r30, r25
    6e44:	96 95       	lsr	r25
    6e46:	96 95       	lsr	r25
    6e48:	e9 0f       	add	r30, r25
    6e4a:	ff 27       	eor	r31, r31
    6e4c:	ef 53       	subi	r30, 0x3F	; 63
    6e4e:	fa 4f       	sbci	r31, 0xFA	; 250
    6e50:	99 27       	eor	r25, r25
    6e52:	33 27       	eor	r19, r19
    6e54:	ee 24       	eor	r14, r14
    6e56:	ff 24       	eor	r15, r15
    6e58:	a7 01       	movw	r20, r14
    6e5a:	e7 01       	movw	r28, r14
    6e5c:	05 90       	lpm	r0, Z+
    6e5e:	08 94       	sec
    6e60:	07 94       	ror	r0
    6e62:	28 f4       	brcc	.+10     	; 0x6e6e <__ftoa_engine+0x80>
    6e64:	36 0f       	add	r19, r22
    6e66:	e7 1e       	adc	r14, r23
    6e68:	f8 1e       	adc	r15, r24
    6e6a:	49 1f       	adc	r20, r25
    6e6c:	51 1d       	adc	r21, r1
    6e6e:	66 0f       	add	r22, r22
    6e70:	77 1f       	adc	r23, r23
    6e72:	88 1f       	adc	r24, r24
    6e74:	99 1f       	adc	r25, r25
    6e76:	06 94       	lsr	r0
    6e78:	a1 f7       	brne	.-24     	; 0x6e62 <__ftoa_engine+0x74>
    6e7a:	05 90       	lpm	r0, Z+
    6e7c:	07 94       	ror	r0
    6e7e:	28 f4       	brcc	.+10     	; 0x6e8a <__ftoa_engine+0x9c>
    6e80:	e7 0e       	add	r14, r23
    6e82:	f8 1e       	adc	r15, r24
    6e84:	49 1f       	adc	r20, r25
    6e86:	56 1f       	adc	r21, r22
    6e88:	c1 1d       	adc	r28, r1
    6e8a:	77 0f       	add	r23, r23
    6e8c:	88 1f       	adc	r24, r24
    6e8e:	99 1f       	adc	r25, r25
    6e90:	66 1f       	adc	r22, r22
    6e92:	06 94       	lsr	r0
    6e94:	a1 f7       	brne	.-24     	; 0x6e7e <__ftoa_engine+0x90>
    6e96:	05 90       	lpm	r0, Z+
    6e98:	07 94       	ror	r0
    6e9a:	28 f4       	brcc	.+10     	; 0x6ea6 <__ftoa_engine+0xb8>
    6e9c:	f8 0e       	add	r15, r24
    6e9e:	49 1f       	adc	r20, r25
    6ea0:	56 1f       	adc	r21, r22
    6ea2:	c7 1f       	adc	r28, r23
    6ea4:	d1 1d       	adc	r29, r1
    6ea6:	88 0f       	add	r24, r24
    6ea8:	99 1f       	adc	r25, r25
    6eaa:	66 1f       	adc	r22, r22
    6eac:	77 1f       	adc	r23, r23
    6eae:	06 94       	lsr	r0
    6eb0:	a1 f7       	brne	.-24     	; 0x6e9a <__ftoa_engine+0xac>
    6eb2:	05 90       	lpm	r0, Z+
    6eb4:	07 94       	ror	r0
    6eb6:	20 f4       	brcc	.+8      	; 0x6ec0 <__ftoa_engine+0xd2>
    6eb8:	49 0f       	add	r20, r25
    6eba:	56 1f       	adc	r21, r22
    6ebc:	c7 1f       	adc	r28, r23
    6ebe:	d8 1f       	adc	r29, r24
    6ec0:	99 0f       	add	r25, r25
    6ec2:	66 1f       	adc	r22, r22
    6ec4:	77 1f       	adc	r23, r23
    6ec6:	88 1f       	adc	r24, r24
    6ec8:	06 94       	lsr	r0
    6eca:	a9 f7       	brne	.-22     	; 0x6eb6 <__ftoa_engine+0xc8>
    6ecc:	84 91       	lpm	r24, Z+
    6ece:	10 95       	com	r17
    6ed0:	17 70       	andi	r17, 0x07	; 7
    6ed2:	41 f0       	breq	.+16     	; 0x6ee4 <__ftoa_engine+0xf6>
    6ed4:	d6 95       	lsr	r29
    6ed6:	c7 95       	ror	r28
    6ed8:	57 95       	ror	r21
    6eda:	47 95       	ror	r20
    6edc:	f7 94       	ror	r15
    6ede:	e7 94       	ror	r14
    6ee0:	1a 95       	dec	r17
    6ee2:	c1 f7       	brne	.-16     	; 0x6ed4 <__ftoa_engine+0xe6>
    6ee4:	e7 e6       	ldi	r30, 0x67	; 103
    6ee6:	f5 e0       	ldi	r31, 0x05	; 5
    6ee8:	68 94       	set
    6eea:	15 90       	lpm	r1, Z+
    6eec:	15 91       	lpm	r17, Z+
    6eee:	35 91       	lpm	r19, Z+
    6ef0:	65 91       	lpm	r22, Z+
    6ef2:	95 91       	lpm	r25, Z+
    6ef4:	05 90       	lpm	r0, Z+
    6ef6:	7f e2       	ldi	r23, 0x2F	; 47
    6ef8:	73 95       	inc	r23
    6efa:	e1 18       	sub	r14, r1
    6efc:	f1 0a       	sbc	r15, r17
    6efe:	43 0b       	sbc	r20, r19
    6f00:	56 0b       	sbc	r21, r22
    6f02:	c9 0b       	sbc	r28, r25
    6f04:	d0 09       	sbc	r29, r0
    6f06:	c0 f7       	brcc	.-16     	; 0x6ef8 <__ftoa_engine+0x10a>
    6f08:	e1 0c       	add	r14, r1
    6f0a:	f1 1e       	adc	r15, r17
    6f0c:	43 1f       	adc	r20, r19
    6f0e:	56 1f       	adc	r21, r22
    6f10:	c9 1f       	adc	r28, r25
    6f12:	d0 1d       	adc	r29, r0
    6f14:	7e f4       	brtc	.+30     	; 0x6f34 <__ftoa_engine+0x146>
    6f16:	70 33       	cpi	r23, 0x30	; 48
    6f18:	11 f4       	brne	.+4      	; 0x6f1e <__ftoa_engine+0x130>
    6f1a:	8a 95       	dec	r24
    6f1c:	e6 cf       	rjmp	.-52     	; 0x6eea <__ftoa_engine+0xfc>
    6f1e:	e8 94       	clt
    6f20:	01 50       	subi	r16, 0x01	; 1
    6f22:	30 f0       	brcs	.+12     	; 0x6f30 <__ftoa_engine+0x142>
    6f24:	08 0f       	add	r16, r24
    6f26:	0a f4       	brpl	.+2      	; 0x6f2a <__ftoa_engine+0x13c>
    6f28:	00 27       	eor	r16, r16
    6f2a:	02 17       	cp	r16, r18
    6f2c:	08 f4       	brcc	.+2      	; 0x6f30 <__ftoa_engine+0x142>
    6f2e:	20 2f       	mov	r18, r16
    6f30:	23 95       	inc	r18
    6f32:	02 2f       	mov	r16, r18
    6f34:	7a 33       	cpi	r23, 0x3A	; 58
    6f36:	28 f0       	brcs	.+10     	; 0x6f42 <__ftoa_engine+0x154>
    6f38:	79 e3       	ldi	r23, 0x39	; 57
    6f3a:	7d 93       	st	X+, r23
    6f3c:	2a 95       	dec	r18
    6f3e:	e9 f7       	brne	.-6      	; 0x6f3a <__ftoa_engine+0x14c>
    6f40:	10 c0       	rjmp	.+32     	; 0x6f62 <__ftoa_engine+0x174>
    6f42:	7d 93       	st	X+, r23
    6f44:	2a 95       	dec	r18
    6f46:	89 f6       	brne	.-94     	; 0x6eea <__ftoa_engine+0xfc>
    6f48:	06 94       	lsr	r0
    6f4a:	97 95       	ror	r25
    6f4c:	67 95       	ror	r22
    6f4e:	37 95       	ror	r19
    6f50:	17 95       	ror	r17
    6f52:	17 94       	ror	r1
    6f54:	e1 18       	sub	r14, r1
    6f56:	f1 0a       	sbc	r15, r17
    6f58:	43 0b       	sbc	r20, r19
    6f5a:	56 0b       	sbc	r21, r22
    6f5c:	c9 0b       	sbc	r28, r25
    6f5e:	d0 09       	sbc	r29, r0
    6f60:	98 f0       	brcs	.+38     	; 0x6f88 <__ftoa_engine+0x19a>
    6f62:	23 95       	inc	r18
    6f64:	7e 91       	ld	r23, -X
    6f66:	73 95       	inc	r23
    6f68:	7a 33       	cpi	r23, 0x3A	; 58
    6f6a:	08 f0       	brcs	.+2      	; 0x6f6e <__ftoa_engine+0x180>
    6f6c:	70 e3       	ldi	r23, 0x30	; 48
    6f6e:	7c 93       	st	X, r23
    6f70:	20 13       	cpse	r18, r16
    6f72:	b8 f7       	brcc	.-18     	; 0x6f62 <__ftoa_engine+0x174>
    6f74:	7e 91       	ld	r23, -X
    6f76:	70 61       	ori	r23, 0x10	; 16
    6f78:	7d 93       	st	X+, r23
    6f7a:	30 f0       	brcs	.+12     	; 0x6f88 <__ftoa_engine+0x19a>
    6f7c:	83 95       	inc	r24
    6f7e:	71 e3       	ldi	r23, 0x31	; 49
    6f80:	7d 93       	st	X+, r23
    6f82:	70 e3       	ldi	r23, 0x30	; 48
    6f84:	2a 95       	dec	r18
    6f86:	e1 f7       	brne	.-8      	; 0x6f80 <__ftoa_engine+0x192>
    6f88:	11 24       	eor	r1, r1
    6f8a:	ef 90       	pop	r14
    6f8c:	ff 90       	pop	r15
    6f8e:	0f 91       	pop	r16
    6f90:	1f 91       	pop	r17
    6f92:	cf 91       	pop	r28
    6f94:	df 91       	pop	r29
    6f96:	99 27       	eor	r25, r25
    6f98:	87 fd       	sbrc	r24, 7
    6f9a:	90 95       	com	r25
    6f9c:	08 95       	ret

00006f9e <strnlen_P>:
    6f9e:	fc 01       	movw	r30, r24
    6fa0:	05 90       	lpm	r0, Z+
    6fa2:	61 50       	subi	r22, 0x01	; 1
    6fa4:	70 40       	sbci	r23, 0x00	; 0
    6fa6:	01 10       	cpse	r0, r1
    6fa8:	d8 f7       	brcc	.-10     	; 0x6fa0 <strnlen_P+0x2>
    6faa:	80 95       	com	r24
    6fac:	90 95       	com	r25
    6fae:	8e 0f       	add	r24, r30
    6fb0:	9f 1f       	adc	r25, r31
    6fb2:	08 95       	ret

00006fb4 <strnlen>:
    6fb4:	fc 01       	movw	r30, r24
    6fb6:	61 50       	subi	r22, 0x01	; 1
    6fb8:	70 40       	sbci	r23, 0x00	; 0
    6fba:	01 90       	ld	r0, Z+
    6fbc:	01 10       	cpse	r0, r1
    6fbe:	d8 f7       	brcc	.-10     	; 0x6fb6 <strnlen+0x2>
    6fc0:	80 95       	com	r24
    6fc2:	90 95       	com	r25
    6fc4:	8e 0f       	add	r24, r30
    6fc6:	9f 1f       	adc	r25, r31
    6fc8:	08 95       	ret

00006fca <fputc>:
    6fca:	0f 93       	push	r16
    6fcc:	1f 93       	push	r17
    6fce:	cf 93       	push	r28
    6fd0:	df 93       	push	r29
    6fd2:	8c 01       	movw	r16, r24
    6fd4:	eb 01       	movw	r28, r22
    6fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    6fd8:	81 ff       	sbrs	r24, 1
    6fda:	1b c0       	rjmp	.+54     	; 0x7012 <fputc+0x48>
    6fdc:	82 ff       	sbrs	r24, 2
    6fde:	0d c0       	rjmp	.+26     	; 0x6ffa <fputc+0x30>
    6fe0:	2e 81       	ldd	r18, Y+6	; 0x06
    6fe2:	3f 81       	ldd	r19, Y+7	; 0x07
    6fe4:	8c 81       	ldd	r24, Y+4	; 0x04
    6fe6:	9d 81       	ldd	r25, Y+5	; 0x05
    6fe8:	28 17       	cp	r18, r24
    6fea:	39 07       	cpc	r19, r25
    6fec:	64 f4       	brge	.+24     	; 0x7006 <fputc+0x3c>
    6fee:	e8 81       	ld	r30, Y
    6ff0:	f9 81       	ldd	r31, Y+1	; 0x01
    6ff2:	01 93       	st	Z+, r16
    6ff4:	f9 83       	std	Y+1, r31	; 0x01
    6ff6:	e8 83       	st	Y, r30
    6ff8:	06 c0       	rjmp	.+12     	; 0x7006 <fputc+0x3c>
    6ffa:	e8 85       	ldd	r30, Y+8	; 0x08
    6ffc:	f9 85       	ldd	r31, Y+9	; 0x09
    6ffe:	80 2f       	mov	r24, r16
    7000:	09 95       	icall
    7002:	89 2b       	or	r24, r25
    7004:	31 f4       	brne	.+12     	; 0x7012 <fputc+0x48>
    7006:	8e 81       	ldd	r24, Y+6	; 0x06
    7008:	9f 81       	ldd	r25, Y+7	; 0x07
    700a:	01 96       	adiw	r24, 0x01	; 1
    700c:	9f 83       	std	Y+7, r25	; 0x07
    700e:	8e 83       	std	Y+6, r24	; 0x06
    7010:	02 c0       	rjmp	.+4      	; 0x7016 <fputc+0x4c>
    7012:	0f ef       	ldi	r16, 0xFF	; 255
    7014:	1f ef       	ldi	r17, 0xFF	; 255
    7016:	c8 01       	movw	r24, r16
    7018:	df 91       	pop	r29
    701a:	cf 91       	pop	r28
    701c:	1f 91       	pop	r17
    701e:	0f 91       	pop	r16
    7020:	08 95       	ret

00007022 <printf>:
    7022:	a0 e0       	ldi	r26, 0x00	; 0
    7024:	b0 e0       	ldi	r27, 0x00	; 0
    7026:	e6 e1       	ldi	r30, 0x16	; 22
    7028:	f8 e3       	ldi	r31, 0x38	; 56
    702a:	48 cd       	rjmp	.-1392   	; 0x6abc <__prologue_saves__+0x20>
    702c:	fe 01       	movw	r30, r28
    702e:	35 96       	adiw	r30, 0x05	; 5
    7030:	61 91       	ld	r22, Z+
    7032:	71 91       	ld	r23, Z+
    7034:	80 91 48 08 	lds	r24, 0x0848
    7038:	90 91 49 08 	lds	r25, 0x0849
    703c:	af 01       	movw	r20, r30
    703e:	72 d9       	rcall	.-3356   	; 0x6324 <vfprintf>
    7040:	20 96       	adiw	r28, 0x00	; 0
    7042:	e2 e0       	ldi	r30, 0x02	; 2
    7044:	57 cd       	rjmp	.-1362   	; 0x6af4 <__epilogue_restores__+0x20>

00007046 <puts>:
    7046:	0f 93       	push	r16
    7048:	1f 93       	push	r17
    704a:	cf 93       	push	r28
    704c:	df 93       	push	r29
    704e:	8c 01       	movw	r16, r24
    7050:	e0 91 48 08 	lds	r30, 0x0848
    7054:	f0 91 49 08 	lds	r31, 0x0849
    7058:	83 81       	ldd	r24, Z+3	; 0x03
    705a:	81 ff       	sbrs	r24, 1
    705c:	21 c0       	rjmp	.+66     	; 0x70a0 <puts+0x5a>
    705e:	c0 e0       	ldi	r28, 0x00	; 0
    7060:	d0 e0       	ldi	r29, 0x00	; 0
    7062:	0d c0       	rjmp	.+26     	; 0x707e <puts+0x38>
    7064:	e0 91 48 08 	lds	r30, 0x0848
    7068:	f0 91 49 08 	lds	r31, 0x0849
    706c:	20 85       	ldd	r18, Z+8	; 0x08
    706e:	31 85       	ldd	r19, Z+9	; 0x09
    7070:	bf 01       	movw	r22, r30
    7072:	f9 01       	movw	r30, r18
    7074:	09 95       	icall
    7076:	89 2b       	or	r24, r25
    7078:	11 f0       	breq	.+4      	; 0x707e <puts+0x38>
    707a:	cf ef       	ldi	r28, 0xFF	; 255
    707c:	df ef       	ldi	r29, 0xFF	; 255
    707e:	f8 01       	movw	r30, r16
    7080:	81 91       	ld	r24, Z+
    7082:	8f 01       	movw	r16, r30
    7084:	88 23       	and	r24, r24
    7086:	71 f7       	brne	.-36     	; 0x7064 <puts+0x1e>
    7088:	e0 91 48 08 	lds	r30, 0x0848
    708c:	f0 91 49 08 	lds	r31, 0x0849
    7090:	20 85       	ldd	r18, Z+8	; 0x08
    7092:	31 85       	ldd	r19, Z+9	; 0x09
    7094:	8a e0       	ldi	r24, 0x0A	; 10
    7096:	bf 01       	movw	r22, r30
    7098:	f9 01       	movw	r30, r18
    709a:	09 95       	icall
    709c:	89 2b       	or	r24, r25
    709e:	11 f0       	breq	.+4      	; 0x70a4 <puts+0x5e>
    70a0:	cf ef       	ldi	r28, 0xFF	; 255
    70a2:	df ef       	ldi	r29, 0xFF	; 255
    70a4:	ce 01       	movw	r24, r28
    70a6:	df 91       	pop	r29
    70a8:	cf 91       	pop	r28
    70aa:	1f 91       	pop	r17
    70ac:	0f 91       	pop	r16
    70ae:	08 95       	ret

000070b0 <__ultoa_invert>:
    70b0:	fa 01       	movw	r30, r20
    70b2:	aa 27       	eor	r26, r26
    70b4:	28 30       	cpi	r18, 0x08	; 8
    70b6:	51 f1       	breq	.+84     	; 0x710c <__ultoa_invert+0x5c>
    70b8:	20 31       	cpi	r18, 0x10	; 16
    70ba:	81 f1       	breq	.+96     	; 0x711c <__ultoa_invert+0x6c>
    70bc:	e8 94       	clt
    70be:	6f 93       	push	r22
    70c0:	6e 7f       	andi	r22, 0xFE	; 254
    70c2:	6e 5f       	subi	r22, 0xFE	; 254
    70c4:	7f 4f       	sbci	r23, 0xFF	; 255
    70c6:	8f 4f       	sbci	r24, 0xFF	; 255
    70c8:	9f 4f       	sbci	r25, 0xFF	; 255
    70ca:	af 4f       	sbci	r26, 0xFF	; 255
    70cc:	b1 e0       	ldi	r27, 0x01	; 1
    70ce:	3e d0       	rcall	.+124    	; 0x714c <__ultoa_invert+0x9c>
    70d0:	b4 e0       	ldi	r27, 0x04	; 4
    70d2:	3c d0       	rcall	.+120    	; 0x714c <__ultoa_invert+0x9c>
    70d4:	67 0f       	add	r22, r23
    70d6:	78 1f       	adc	r23, r24
    70d8:	89 1f       	adc	r24, r25
    70da:	9a 1f       	adc	r25, r26
    70dc:	a1 1d       	adc	r26, r1
    70de:	68 0f       	add	r22, r24
    70e0:	79 1f       	adc	r23, r25
    70e2:	8a 1f       	adc	r24, r26
    70e4:	91 1d       	adc	r25, r1
    70e6:	a1 1d       	adc	r26, r1
    70e8:	6a 0f       	add	r22, r26
    70ea:	71 1d       	adc	r23, r1
    70ec:	81 1d       	adc	r24, r1
    70ee:	91 1d       	adc	r25, r1
    70f0:	a1 1d       	adc	r26, r1
    70f2:	20 d0       	rcall	.+64     	; 0x7134 <__ultoa_invert+0x84>
    70f4:	09 f4       	brne	.+2      	; 0x70f8 <__ultoa_invert+0x48>
    70f6:	68 94       	set
    70f8:	3f 91       	pop	r19
    70fa:	2a e0       	ldi	r18, 0x0A	; 10
    70fc:	26 9f       	mul	r18, r22
    70fe:	11 24       	eor	r1, r1
    7100:	30 19       	sub	r19, r0
    7102:	30 5d       	subi	r19, 0xD0	; 208
    7104:	31 93       	st	Z+, r19
    7106:	de f6       	brtc	.-74     	; 0x70be <__ultoa_invert+0xe>
    7108:	cf 01       	movw	r24, r30
    710a:	08 95       	ret
    710c:	46 2f       	mov	r20, r22
    710e:	47 70       	andi	r20, 0x07	; 7
    7110:	40 5d       	subi	r20, 0xD0	; 208
    7112:	41 93       	st	Z+, r20
    7114:	b3 e0       	ldi	r27, 0x03	; 3
    7116:	0f d0       	rcall	.+30     	; 0x7136 <__ultoa_invert+0x86>
    7118:	c9 f7       	brne	.-14     	; 0x710c <__ultoa_invert+0x5c>
    711a:	f6 cf       	rjmp	.-20     	; 0x7108 <__ultoa_invert+0x58>
    711c:	46 2f       	mov	r20, r22
    711e:	4f 70       	andi	r20, 0x0F	; 15
    7120:	40 5d       	subi	r20, 0xD0	; 208
    7122:	4a 33       	cpi	r20, 0x3A	; 58
    7124:	18 f0       	brcs	.+6      	; 0x712c <__ultoa_invert+0x7c>
    7126:	49 5d       	subi	r20, 0xD9	; 217
    7128:	31 fd       	sbrc	r19, 1
    712a:	40 52       	subi	r20, 0x20	; 32
    712c:	41 93       	st	Z+, r20
    712e:	02 d0       	rcall	.+4      	; 0x7134 <__ultoa_invert+0x84>
    7130:	a9 f7       	brne	.-22     	; 0x711c <__ultoa_invert+0x6c>
    7132:	ea cf       	rjmp	.-44     	; 0x7108 <__ultoa_invert+0x58>
    7134:	b4 e0       	ldi	r27, 0x04	; 4
    7136:	a6 95       	lsr	r26
    7138:	97 95       	ror	r25
    713a:	87 95       	ror	r24
    713c:	77 95       	ror	r23
    713e:	67 95       	ror	r22
    7140:	ba 95       	dec	r27
    7142:	c9 f7       	brne	.-14     	; 0x7136 <__ultoa_invert+0x86>
    7144:	00 97       	sbiw	r24, 0x00	; 0
    7146:	61 05       	cpc	r22, r1
    7148:	71 05       	cpc	r23, r1
    714a:	08 95       	ret
    714c:	9b 01       	movw	r18, r22
    714e:	ac 01       	movw	r20, r24
    7150:	0a 2e       	mov	r0, r26
    7152:	06 94       	lsr	r0
    7154:	57 95       	ror	r21
    7156:	47 95       	ror	r20
    7158:	37 95       	ror	r19
    715a:	27 95       	ror	r18
    715c:	ba 95       	dec	r27
    715e:	c9 f7       	brne	.-14     	; 0x7152 <__ultoa_invert+0xa2>
    7160:	62 0f       	add	r22, r18
    7162:	73 1f       	adc	r23, r19
    7164:	84 1f       	adc	r24, r20
    7166:	95 1f       	adc	r25, r21
    7168:	a0 1d       	adc	r26, r0
    716a:	08 95       	ret

0000716c <__divmodsi4>:
    716c:	97 fb       	bst	r25, 7
    716e:	09 2e       	mov	r0, r25
    7170:	05 26       	eor	r0, r21
    7172:	0e d0       	rcall	.+28     	; 0x7190 <__divmodsi4_neg1>
    7174:	57 fd       	sbrc	r21, 7
    7176:	04 d0       	rcall	.+8      	; 0x7180 <__divmodsi4_neg2>
    7178:	6f dc       	rcall	.-1826   	; 0x6a58 <__udivmodsi4>
    717a:	0a d0       	rcall	.+20     	; 0x7190 <__divmodsi4_neg1>
    717c:	00 1c       	adc	r0, r0
    717e:	38 f4       	brcc	.+14     	; 0x718e <__divmodsi4_exit>

00007180 <__divmodsi4_neg2>:
    7180:	50 95       	com	r21
    7182:	40 95       	com	r20
    7184:	30 95       	com	r19
    7186:	21 95       	neg	r18
    7188:	3f 4f       	sbci	r19, 0xFF	; 255
    718a:	4f 4f       	sbci	r20, 0xFF	; 255
    718c:	5f 4f       	sbci	r21, 0xFF	; 255

0000718e <__divmodsi4_exit>:
    718e:	08 95       	ret

00007190 <__divmodsi4_neg1>:
    7190:	f6 f7       	brtc	.-4      	; 0x718e <__divmodsi4_exit>
    7192:	90 95       	com	r25
    7194:	80 95       	com	r24
    7196:	70 95       	com	r23
    7198:	61 95       	neg	r22
    719a:	7f 4f       	sbci	r23, 0xFF	; 255
    719c:	8f 4f       	sbci	r24, 0xFF	; 255
    719e:	9f 4f       	sbci	r25, 0xFF	; 255
    71a0:	08 95       	ret

000071a2 <_exit>:
    71a2:	f8 94       	cli

000071a4 <__stop_program>:
    71a4:	ff cf       	rjmp	.-2      	; 0x71a4 <__stop_program>
