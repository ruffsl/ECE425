
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000296  00800100  00006d26  00006dba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006d26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000053b  00800396  00800396  00007050  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00007050  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000064c  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019e4  00000000  00000000  000076fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000489  00000000  00000000  000090e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000163a  00000000  00000000  00009569  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  0000aba4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d57  00000000  00000000  0000ae94  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010e8  00000000  00000000  0000bbeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 88 22 	jmp	0x4510	; 0x4510 <__vector_4>
      14:	0c 94 b1 22 	jmp	0x4562	; 0x4562 <__vector_5>
      18:	0c 94 da 22 	jmp	0x45b4	; 0x45b4 <__vector_6>
      1c:	0c 94 03 23 	jmp	0x4606	; 0x4606 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <__vector_9>
      28:	0c 94 92 21 	jmp	0x4324	; 0x4324 <__vector_10>
      2c:	0c 94 bb 21 	jmp	0x4376	; 0x4376 <__vector_11>
      30:	0c 94 36 22 	jmp	0x446c	; 0x446c <__vector_12>
      34:	0c 94 e4 21 	jmp	0x43c8	; 0x43c8 <__vector_13>
      38:	0c 94 0d 22 	jmp	0x441a	; 0x441a <__vector_14>
      3c:	0c 94 5f 22 	jmp	0x44be	; 0x44be <__vector_15>
      40:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <__vector_16>
      44:	0c 94 17 21 	jmp	0x422e	; 0x422e <__vector_17>
      48:	0c 94 40 21 	jmp	0x4280	; 0x4280 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	53 1e       	adc	r5, r19
      7e:	56 1e       	adc	r5, r22
      80:	59 1e       	adc	r5, r25
      82:	5c 1e       	adc	r5, r28
      84:	65 1e       	adc	r6, r21
      86:	5f 1e       	adc	r5, r31
      88:	62 1e       	adc	r6, r18
      8a:	68 1e       	adc	r6, r24
      8c:	6b 1e       	adc	r6, r27
      8e:	6e 1e       	adc	r6, r30
      90:	71 1e       	adc	r7, r17
      92:	74 1e       	adc	r7, r20
      94:	77 1e       	adc	r7, r23
      96:	7a 1e       	adc	r7, r26
      98:	7d 1e       	adc	r7, r29
      9a:	80 1e       	adc	r8, r16
      9c:	83 1e       	adc	r8, r19
      9e:	86 1e       	adc	r8, r22
      a0:	89 1e       	adc	r8, r25
      a2:	9a 1e       	adc	r9, r26
      a4:	9d 1e       	adc	r9, r29
      a6:	a0 1e       	adc	r10, r16
      a8:	a3 1e       	adc	r10, r19
      aa:	ac 1e       	adc	r10, r28
      ac:	a6 1e       	adc	r10, r22
      ae:	a9 1e       	adc	r10, r25
      b0:	af 1e       	adc	r10, r31
      b2:	b2 1e       	adc	r11, r18
      b4:	b5 1e       	adc	r11, r21
      b6:	b8 1e       	adc	r11, r24
      b8:	bb 1e       	adc	r11, r27
      ba:	be 1e       	adc	r11, r30
      bc:	c1 1e       	adc	r12, r17
      be:	c4 1e       	adc	r12, r20
      c0:	c7 1e       	adc	r12, r23
      c2:	ca 1e       	adc	r12, r26
      c4:	cd 1e       	adc	r12, r29
      c6:	d0 1e       	adc	r13, r16
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e6 e2       	ldi	r30, 0x26	; 38
     676:	fd e6       	ldi	r31, 0x6D	; 109
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a6 39       	cpi	r26, 0x96	; 150
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	18 e0       	ldi	r17, 0x08	; 8
     686:	a6 e9       	ldi	r26, 0x96	; 150
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a1 3d       	cpi	r26, 0xD1	; 209
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <main>
     698:	0c 94 91 36 	jmp	0x6d22	; 0x6d22 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 2c 20 	call	0x4058	; 0x4058 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 00 20 	call	0x4000	; 0x4000 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 98 20 	call	0x4130	; 0x4130 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 2c 20 	call	0x4058	; 0x4058 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 00 20 	call	0x4000	; 0x4000 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 98 20 	call	0x4130	; 0x4130 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 2c 20 	call	0x4058	; 0x4058 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 00 20 	call	0x4000	; 0x4000 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 98 20 	call	0x4130	; 0x4130 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 2c 20 	call	0x4058	; 0x4058 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 00 20 	call	0x4000	; 0x4000 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 98 20 	call	0x4130	; 0x4130 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 2c 20 	call	0x4058	; 0x4058 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 00 20 	call	0x4000	; 0x4000 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 98 20 	call	0x4130	; 0x4130 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 2c 20 	call	0x4058	; 0x4058 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 00 20 	call	0x4000	; 0x4000 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 98 20 	call	0x4130	; 0x4130 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 2c 20 	call	0x4058	; 0x4058 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 00 20 	call	0x4000	; 0x4000 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 98 20 	call	0x4130	; 0x4130 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 2c 20 	call	0x4058	; 0x4058 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 00 20 	call	0x4000	; 0x4000 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 98 20 	call	0x4130	; 0x4130 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 2c 20 	call	0x4058	; 0x4058 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 00 20 	call	0x4000	; 0x4000 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 98 20 	call	0x4130	; 0x4130 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 2c 20 	call	0x4058	; 0x4058 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 52 20 	call	0x40a4	; 0x40a4 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 00 20 	call	0x4000	; 0x4000 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 98 20 	call	0x4130	; 0x4130 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 cd 18 	call	0x319a	; 0x319a <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 96 18 	call	0x312c	; 0x312c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 79 18 	call	0x30f2	; 0x30f2 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 98 2b 	call	0x5730	; 0x5730 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 cd 18 	call	0x319a	; 0x319a <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 96 18 	call	0x312c	; 0x312c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 79 18 	call	0x30f2	; 0x30f2 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 98 2b 	call	0x5730	; 0x5730 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 cd 18 	call	0x319a	; 0x319a <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 96 18 	call	0x312c	; 0x312c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 79 18 	call	0x30f2	; 0x30f2 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 98 2b 	call	0x5730	; 0x5730 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 cd 18 	call	0x319a	; 0x319a <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 96 18 	call	0x312c	; 0x312c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 79 18 	call	0x30f2	; 0x30f2 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 98 2b 	call	0x5730	; 0x5730 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 cd 18 	call	0x319a	; 0x319a <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 96 18 	call	0x312c	; 0x312c <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 79 18 	call	0x30f2	; 0x30f2 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 cd 18 	call	0x319a	; 0x319a <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 96 18 	call	0x312c	; 0x312c <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 79 18 	call	0x30f2	; 0x30f2 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 12 04 	sts	0x0412, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 12 04 	sts	0x0412, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 f0 19 	call	0x33e0	; 0x33e0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 db 19 	call	0x33b6	; 0x33b6 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
     c14:	1f 93       	push	r17
     c16:	18 2f       	mov	r17, r24
	// Update the avrage 
	unsigned char odometry = ((odometryStepL + odometryStepR)/2)*D_STEP;
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	if((odometry > odometryTrigger)||(reset))
     c18:	20 91 14 04 	lds	r18, 0x0414
     c1c:	60 91 4e 08 	lds	r22, 0x084E
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	62 0f       	add	r22, r18
     c24:	71 1d       	adc	r23, r1
     c26:	75 95       	asr	r23
     c28:	67 95       	ror	r22
     c2a:	88 27       	eor	r24, r24
     c2c:	77 fd       	sbrc	r23, 7
     c2e:	80 95       	com	r24
     c30:	98 2f       	mov	r25, r24
     c32:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__floatsisf>
     c36:	2c ed       	ldi	r18, 0xDC	; 220
     c38:	38 eb       	ldi	r19, 0xB8	; 184
     c3a:	48 e0       	ldi	r20, 0x08	; 8
     c3c:	5e e3       	ldi	r21, 0x3E	; 62
     c3e:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
     c42:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
     c46:	20 91 15 05 	lds	r18, 0x0515
     c4a:	26 17       	cp	r18, r22
     c4c:	10 f0       	brcs	.+4      	; 0xc52 <checkOdometry+0x3e>
     c4e:	11 23       	and	r17, r17
     c50:	39 f0       	breq	.+14     	; 0xc60 <checkOdometry+0x4c>
	{
		odometryFlag = 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 c0 07 	sts	0x07C0, r24
		odometryStepL = 0;
     c58:	10 92 4e 08 	sts	0x084E, r1
		odometryStepR = 0;
     c5c:	10 92 14 04 	sts	0x0414, r1
	}
}
     c60:	1f 91       	pop	r17
     c62:	08 95       	ret

00000c64 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
     c6c:	60 91 8e 04 	lds	r22, 0x048E
     c70:	70 91 8f 04 	lds	r23, 0x048F
     c74:	80 91 90 04 	lds	r24, 0x0490
     c78:	90 91 91 04 	lds	r25, 0x0491
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e5       	ldi	r20, 0x50	; 80
     c82:	51 e4       	ldi	r21, 0x41	; 65
     c84:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
     c88:	f8 2e       	mov	r15, r24
     c8a:	ff 1c       	adc	r15, r15
     c8c:	ff 24       	eor	r15, r15
     c8e:	ff 1c       	adc	r15, r15
     c90:	ff 0c       	add	r15, r15
     c92:	ff 0c       	add	r15, r15
     c94:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
     c96:	60 91 bc 07 	lds	r22, 0x07BC
     c9a:	70 91 bd 07 	lds	r23, 0x07BD
     c9e:	80 91 be 07 	lds	r24, 0x07BE
     ca2:	90 91 bf 07 	lds	r25, 0x07BF
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 ef       	ldi	r20, 0xF0	; 240
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
     cb2:	08 2f       	mov	r16, r24
     cb4:	00 1f       	adc	r16, r16
     cb6:	00 27       	eor	r16, r16
     cb8:	00 1f       	adc	r16, r16
     cba:	00 0f       	add	r16, r16
     cbc:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
     cbe:	60 91 98 04 	lds	r22, 0x0498
     cc2:	70 91 99 04 	lds	r23, 0x0499
     cc6:	80 91 9a 04 	lds	r24, 0x049A
     cca:	90 91 9b 04 	lds	r25, 0x049B
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	4c e0       	ldi	r20, 0x0C	; 12
     cd4:	52 e4       	ldi	r21, 0x42	; 66
     cd6:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
     cda:	18 2f       	mov	r17, r24
     cdc:	11 1f       	adc	r17, r17
     cde:	11 27       	eor	r17, r17
     ce0:	11 1f       	adc	r17, r17
     ce2:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
     ce4:	ee 24       	eor	r14, r14
     ce6:	60 91 c1 07 	lds	r22, 0x07C1
     cea:	70 91 c2 07 	lds	r23, 0x07C2
     cee:	80 91 c3 07 	lds	r24, 0x07C3
     cf2:	90 91 c4 07 	lds	r25, 0x07C4
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 ef       	ldi	r20, 0xF0	; 240
     cfc:	51 e4       	ldi	r21, 0x41	; 65
     cfe:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
     d02:	88 23       	and	r24, r24
     d04:	14 f4       	brge	.+4      	; 0xd0a <checkWorld+0xa6>
     d06:	ee 24       	eor	r14, r14
     d08:	e3 94       	inc	r14
     d0a:	8f 2d       	mov	r24, r15
     d0c:	8e 0d       	add	r24, r14
     d0e:	80 0f       	add	r24, r16
     d10:	81 0f       	add	r24, r17
     d12:	80 93 96 04 	sts	0x0496, r24
	nextGateway = moveGateways[currentMoveWorld+1];
     d16:	20 91 97 04 	lds	r18, 0x0497
     d1a:	e2 2f       	mov	r30, r18
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	e3 5c       	subi	r30, 0xC3	; 195
     d20:	f7 4f       	sbci	r31, 0xF7	; 247
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	90 93 9c 04 	sts	0x049C, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
     d28:	89 17       	cp	r24, r25
     d2a:	19 f4       	brne	.+6      	; 0xd32 <checkWorld+0xce>
		currentMoveWorld += 1;
     d2c:	2f 5f       	subi	r18, 0xFF	; 255
     d2e:	20 93 97 04 	sts	0x0497, r18
	}
}
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
     d3c:	2f 92       	push	r2
     d3e:	3f 92       	push	r3
     d40:	4f 92       	push	r4
     d42:	5f 92       	push	r5
     d44:	6f 92       	push	r6
     d46:	7f 92       	push	r7
     d48:	8f 92       	push	r8
     d4a:	9f 92       	push	r9
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	00 d0       	rcall	.+0      	; 0xd62 <moveAway+0x26>
     d62:	00 d0       	rcall	.+0      	; 0xd64 <moveAway+0x28>
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
     d68:	60 90 8e 04 	lds	r6, 0x048E
     d6c:	70 90 8f 04 	lds	r7, 0x048F
     d70:	80 90 90 04 	lds	r8, 0x0490
     d74:	90 90 91 04 	lds	r9, 0x0491
     d78:	a0 90 98 04 	lds	r10, 0x0498
     d7c:	b0 90 99 04 	lds	r11, 0x0499
     d80:	c0 90 9a 04 	lds	r12, 0x049A
     d84:	d0 90 9b 04 	lds	r13, 0x049B
	float moveX = rtIR - ltIR;
     d88:	e0 90 c1 07 	lds	r14, 0x07C1
     d8c:	f0 90 c2 07 	lds	r15, 0x07C2
     d90:	00 91 c3 07 	lds	r16, 0x07C3
     d94:	10 91 c4 07 	lds	r17, 0x07C4
     d98:	80 91 bc 07 	lds	r24, 0x07BC
     d9c:	90 91 bd 07 	lds	r25, 0x07BD
     da0:	a0 91 be 07 	lds	r26, 0x07BE
     da4:	b0 91 bf 07 	lds	r27, 0x07BF
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	ab 83       	std	Y+3, r26	; 0x03
     dae:	bc 83       	std	Y+4, r27	; 0x04
     db0:	c8 01       	movw	r24, r16
     db2:	b7 01       	movw	r22, r14
     db4:	29 81       	ldd	r18, Y+1	; 0x01
     db6:	3a 81       	ldd	r19, Y+2	; 0x02
     db8:	4b 81       	ldd	r20, Y+3	; 0x03
     dba:	5c 81       	ldd	r21, Y+4	; 0x04
     dbc:	0e 94 98 2b 	call	0x5730	; 0x5730 <__subsf3>
     dc0:	1b 01       	movw	r2, r22
     dc2:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
     dc4:	c4 01       	movw	r24, r8
     dc6:	b3 01       	movw	r22, r6
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 ee       	ldi	r20, 0xE0	; 224
     dce:	50 e4       	ldi	r21, 0x40	; 64
     dd0:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
     dd4:	87 fd       	sbrc	r24, 7
     dd6:	0b c0       	rjmp	.+22     	; 0xdee <moveAway+0xb2>
     dd8:	c6 01       	movw	r24, r12
     dda:	b5 01       	movw	r22, r10
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 ee       	ldi	r20, 0xE0	; 224
     de2:	50 e4       	ldi	r21, 0x40	; 64
     de4:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
     de8:	88 23       	and	r24, r24
     dea:	0c f0       	brlt	.+2      	; 0xdee <moveAway+0xb2>
     dec:	68 c0       	rjmp	.+208    	; 0xebe <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
     dee:	c4 01       	movw	r24, r8
     df0:	b3 01       	movw	r22, r6
     df2:	a6 01       	movw	r20, r12
     df4:	95 01       	movw	r18, r10
     df6:	0e 94 98 2b 	call	0x5730	; 0x5730 <__subsf3>
     dfa:	7b 01       	movw	r14, r22
     dfc:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
     dfe:	77 24       	eor	r7, r7
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__gesf2>
     e0c:	88 23       	and	r24, r24
     e0e:	14 f0       	brlt	.+4      	; 0xe14 <moveAway+0xd8>
     e10:	77 24       	eor	r7, r7
     e12:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     e14:	c8 01       	movw	r24, r16
     e16:	b7 01       	movw	r22, r14
     e18:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fixsfsi>
     e1c:	9b 01       	movw	r18, r22
     e1e:	77 ff       	sbrs	r23, 7
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <moveAway+0xec>
     e22:	30 95       	com	r19
     e24:	21 95       	neg	r18
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	b9 01       	movw	r22, r18
     e2a:	88 27       	eor	r24, r24
     e2c:	77 fd       	sbrc	r23, 7
     e2e:	80 95       	com	r24
     e30:	98 2f       	mov	r25, r24
     e32:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__floatsisf>
     e36:	6b 01       	movw	r12, r22
     e38:	7c 01       	movw	r14, r24
     e3a:	ad b7       	in	r26, 0x3d	; 61
     e3c:	be b7       	in	r27, 0x3e	; 62
     e3e:	19 97       	sbiw	r26, 0x09	; 9
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	be bf       	out	0x3e, r27	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	ad bf       	out	0x3d, r26	; 61
     e4a:	0d b7       	in	r16, 0x3d	; 61
     e4c:	1e b7       	in	r17, 0x3e	; 62
     e4e:	0f 5f       	subi	r16, 0xFF	; 255
     e50:	1f 4f       	sbci	r17, 0xFF	; 255
     e52:	a2 01       	movw	r20, r4
     e54:	91 01       	movw	r18, r2
     e56:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
     e5a:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
     e5e:	4b 01       	movw	r8, r22
     e60:	5c 01       	movw	r10, r24
     e62:	82 e3       	ldi	r24, 0x32	; 50
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	f8 01       	movw	r30, r16
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	a2 01       	movw	r20, r4
     e72:	91 01       	movw	r18, r2
     e74:	0e 94 98 2b 	call	0x5730	; 0x5730 <__subsf3>
     e78:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
     e7c:	d8 01       	movw	r26, r16
     e7e:	13 96       	adiw	r26, 0x03	; 3
     e80:	7c 93       	st	X, r23
     e82:	6e 93       	st	-X, r22
     e84:	12 97       	sbiw	r26, 0x02	; 2
     e86:	82 ec       	ldi	r24, 0xC2	; 194
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	15 96       	adiw	r26, 0x05	; 5
     e8c:	9c 93       	st	X, r25
     e8e:	8e 93       	st	-X, r24
     e90:	14 97       	sbiw	r26, 0x04	; 4
     e92:	16 96       	adiw	r26, 0x06	; 6
     e94:	1c 92       	st	X, r1
     e96:	16 97       	sbiw	r26, 0x06	; 6
     e98:	18 96       	adiw	r26, 0x08	; 8
     e9a:	1c 92       	st	X, r1
     e9c:	1e 92       	st	-X, r1
     e9e:	17 97       	sbiw	r26, 0x07	; 7
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	62 e0       	ldi	r22, 0x02	; 2
     ea4:	47 2d       	mov	r20, r7
     ea6:	22 e3       	ldi	r18, 0x32	; 50
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	84 01       	movw	r16, r8
     eac:	72 ec       	ldi	r23, 0xC2	; 194
     eae:	e7 2e       	mov	r14, r23
     eb0:	71 e0       	ldi	r23, 0x01	; 1
     eb2:	f7 2e       	mov	r15, r23
     eb4:	cc 24       	eor	r12, r12
     eb6:	aa 24       	eor	r10, r10
     eb8:	bb 24       	eor	r11, r11
     eba:	87 2c       	mov	r8, r7
     ebc:	82 c0       	rjmp	.+260    	; 0xfc2 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
     ebe:	c8 01       	movw	r24, r16
     ec0:	b7 01       	movw	r22, r14
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e2       	ldi	r20, 0x20	; 32
     ec8:	51 e4       	ldi	r21, 0x41	; 65
     eca:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
     ece:	88 23       	and	r24, r24
     ed0:	b4 f5       	brge	.+108    	; 0xf3e <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     ed2:	c2 01       	movw	r24, r4
     ed4:	b1 01       	movw	r22, r2
     ed6:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fixsfsi>
     eda:	8b 01       	movw	r16, r22
     edc:	77 ff       	sbrs	r23, 7
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <moveAway+0x1aa>
     ee0:	10 95       	com	r17
     ee2:	01 95       	neg	r16
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
     ee6:	2d b7       	in	r18, 0x3d	; 61
     ee8:	3e b7       	in	r19, 0x3e	; 62
     eea:	29 50       	subi	r18, 0x09	; 9
     eec:	30 40       	sbci	r19, 0x00	; 0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	3e bf       	out	0x3e, r19	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	2d bf       	out	0x3d, r18	; 61
     ef8:	ed b7       	in	r30, 0x3d	; 61
     efa:	fe b7       	in	r31, 0x3e	; 62
     efc:	31 96       	adiw	r30, 0x01	; 1
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	ad b7       	in	r26, 0x3d	; 61
     f04:	be b7       	in	r27, 0x3e	; 62
     f06:	12 96       	adiw	r26, 0x02	; 2
     f08:	9c 93       	st	X, r25
     f0a:	8e 93       	st	-X, r24
     f0c:	11 97       	sbiw	r26, 0x01	; 1
     f0e:	13 83       	std	Z+3, r17	; 0x03
     f10:	02 83       	std	Z+2, r16	; 0x02
     f12:	82 ec       	ldi	r24, 0xC2	; 194
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	95 83       	std	Z+5, r25	; 0x05
     f18:	84 83       	std	Z+4, r24	; 0x04
     f1a:	16 82       	std	Z+6, r1	; 0x06
     f1c:	10 86       	std	Z+8, r1	; 0x08
     f1e:	17 82       	std	Z+7, r1	; 0x07
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	62 e0       	ldi	r22, 0x02	; 2
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	28 ec       	ldi	r18, 0xC8	; 200
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	52 ec       	ldi	r21, 0xC2	; 194
     f2c:	e5 2e       	mov	r14, r21
     f2e:	51 e0       	ldi	r21, 0x01	; 1
     f30:	f5 2e       	mov	r15, r21
     f32:	cc 24       	eor	r12, r12
     f34:	aa 24       	eor	r10, r10
     f36:	bb 24       	eor	r11, r11
     f38:	88 24       	eor	r8, r8
     f3a:	83 94       	inc	r8
     f3c:	42 c0       	rjmp	.+132    	; 0xfc2 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
     f3e:	69 81       	ldd	r22, Y+1	; 0x01
     f40:	7a 81       	ldd	r23, Y+2	; 0x02
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e2       	ldi	r20, 0x20	; 32
     f4c:	51 e4       	ldi	r21, 0x41	; 65
     f4e:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
     f52:	87 fd       	sbrc	r24, 7
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <moveAway+0x21e>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	3f c0       	rjmp	.+126    	; 0xfd8 <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     f5a:	c2 01       	movw	r24, r4
     f5c:	b1 01       	movw	r22, r2
     f5e:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fixsfsi>
     f62:	8b 01       	movw	r16, r22
     f64:	77 ff       	sbrs	r23, 7
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <moveAway+0x232>
     f68:	10 95       	com	r17
     f6a:	01 95       	neg	r16
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	2d b7       	in	r18, 0x3d	; 61
     f70:	3e b7       	in	r19, 0x3e	; 62
     f72:	29 50       	subi	r18, 0x09	; 9
     f74:	30 40       	sbci	r19, 0x00	; 0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	3e bf       	out	0x3e, r19	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	2d bf       	out	0x3d, r18	; 61
     f80:	ed b7       	in	r30, 0x3d	; 61
     f82:	fe b7       	in	r31, 0x3e	; 62
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	88 ec       	ldi	r24, 0xC8	; 200
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	ad b7       	in	r26, 0x3d	; 61
     f8c:	be b7       	in	r27, 0x3e	; 62
     f8e:	12 96       	adiw	r26, 0x02	; 2
     f90:	9c 93       	st	X, r25
     f92:	8e 93       	st	-X, r24
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	13 83       	std	Z+3, r17	; 0x03
     f98:	02 83       	std	Z+2, r16	; 0x02
     f9a:	82 ec       	ldi	r24, 0xC2	; 194
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	95 83       	std	Z+5, r25	; 0x05
     fa0:	84 83       	std	Z+4, r24	; 0x04
     fa2:	16 82       	std	Z+6, r1	; 0x06
     fa4:	10 86       	std	Z+8, r1	; 0x08
     fa6:	17 82       	std	Z+7, r1	; 0x07
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	62 e0       	ldi	r22, 0x02	; 2
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	28 ec       	ldi	r18, 0xC8	; 200
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	92 ec       	ldi	r25, 0xC2	; 194
     fb4:	e9 2e       	mov	r14, r25
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	f9 2e       	mov	r15, r25
     fba:	cc 24       	eor	r12, r12
     fbc:	aa 24       	eor	r10, r10
     fbe:	bb 24       	eor	r11, r11
     fc0:	88 24       	eor	r8, r8
     fc2:	0e 94 c2 1b 	call	0x3784	; 0x3784 <STEPPER_move>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	ed b7       	in	r30, 0x3d	; 61
     fca:	fe b7       	in	r31, 0x3e	; 62
     fcc:	39 96       	adiw	r30, 0x09	; 9
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	fe bf       	out	0x3e, r31	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	9f 90       	pop	r9
     ff6:	8f 90       	pop	r8
     ff8:	7f 90       	pop	r7
     ffa:	6f 90       	pop	r6
     ffc:	5f 90       	pop	r5
     ffe:	4f 90       	pop	r4
    1000:	3f 90       	pop	r3
    1002:	2f 90       	pop	r2
    1004:	08 95       	ret

00001006 <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    1006:	8f 92       	push	r8
    1008:	af 92       	push	r10
    100a:	bf 92       	push	r11
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    101c:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    1020:	67 2b       	or	r22, r23
    1022:	09 f0       	breq	.+2      	; 0x1026 <moveWander+0x20>
    1024:	76 c0       	rjmp	.+236    	; 0x1112 <moveWander+0x10c>
    1026:	89 2b       	or	r24, r25
    1028:	09 f0       	breq	.+2      	; 0x102c <moveWander+0x26>
    102a:	73 c0       	rjmp	.+230    	; 0x1112 <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    102c:	0e 94 a8 34 	call	0x6950	; 0x6950 <rand>
    1030:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    1032:	0e 94 a8 34 	call	0x6950	; 0x6950 <rand>
    1036:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    1038:	0e 94 a8 34 	call	0x6950	; 0x6950 <rand>
    103c:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    103e:	0e 94 a8 34 	call	0x6950	; 0x6950 <rand>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	6a e0       	ldi	r22, 0x0A	; 10
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <__divmodhi4>
    104c:	08 97       	sbiw	r24, 0x08	; 8
    104e:	0c f0       	brlt	.+2      	; 0x1052 <moveWander+0x4c>
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	82 2e       	mov	r8, r18
    1054:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    1056:	c8 01       	movw	r24, r16
    1058:	60 e9       	ldi	r22, 0x90	; 144
    105a:	71 e0       	ldi	r23, 0x01	; 1
    105c:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <__divmodhi4>
    1060:	f0 e9       	ldi	r31, 0x90	; 144
    1062:	af 2e       	mov	r10, r31
    1064:	f1 e0       	ldi	r31, 0x01	; 1
    1066:	bf 2e       	mov	r11, r31
    1068:	a8 0e       	add	r10, r24
    106a:	b9 1e       	adc	r11, r25
    106c:	8d b7       	in	r24, 0x3d	; 61
    106e:	9e b7       	in	r25, 0x3e	; 62
    1070:	09 97       	sbiw	r24, 0x09	; 9
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	9e bf       	out	0x3e, r25	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	8d bf       	out	0x3d, r24	; 61
    107c:	0d b7       	in	r16, 0x3d	; 61
    107e:	1e b7       	in	r17, 0x3e	; 62
    1080:	0f 5f       	subi	r16, 0xFF	; 255
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	c7 01       	movw	r24, r14
    1086:	68 ec       	ldi	r22, 0xC8	; 200
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <__divmodhi4>
    108e:	88 53       	subi	r24, 0x38	; 56
    1090:	9f 4f       	sbci	r25, 0xFF	; 255
    1092:	aa 27       	eor	r26, r26
    1094:	97 fd       	sbrc	r25, 7
    1096:	a0 95       	com	r26
    1098:	ba 2f       	mov	r27, r26
    109a:	bc 01       	movw	r22, r24
    109c:	cd 01       	movw	r24, r26
    109e:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__floatsisf>
    10a2:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    10a6:	6b 01       	movw	r12, r22
    10a8:	7c 01       	movw	r14, r24
    10aa:	f8 01       	movw	r30, r16
    10ac:	b1 82       	std	Z+1, r11	; 0x01
    10ae:	a0 82       	st	Z, r10
    10b0:	ce 01       	movw	r24, r28
    10b2:	68 ec       	ldi	r22, 0xC8	; 200
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	0e 94 d9 32 	call	0x65b2	; 0x65b2 <__divmodhi4>
    10ba:	88 53       	subi	r24, 0x38	; 56
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	aa 27       	eor	r26, r26
    10c0:	97 fd       	sbrc	r25, 7
    10c2:	a0 95       	com	r26
    10c4:	ba 2f       	mov	r27, r26
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__floatsisf>
    10ce:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    10d2:	f8 01       	movw	r30, r16
    10d4:	73 83       	std	Z+3, r23	; 0x03
    10d6:	62 83       	std	Z+2, r22	; 0x02
    10d8:	82 ec       	ldi	r24, 0xC2	; 194
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	95 83       	std	Z+5, r25	; 0x05
    10de:	84 83       	std	Z+4, r24	; 0x04
    10e0:	16 82       	std	Z+6, r1	; 0x06
    10e2:	10 86       	std	Z+8, r1	; 0x08
    10e4:	17 82       	std	Z+7, r1	; 0x07
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	62 e0       	ldi	r22, 0x02	; 2
    10ea:	48 2d       	mov	r20, r8
    10ec:	95 01       	movw	r18, r10
    10ee:	86 01       	movw	r16, r12
    10f0:	e2 ec       	ldi	r30, 0xC2	; 194
    10f2:	ee 2e       	mov	r14, r30
    10f4:	e1 e0       	ldi	r30, 0x01	; 1
    10f6:	fe 2e       	mov	r15, r30
    10f8:	cc 24       	eor	r12, r12
    10fa:	aa 24       	eor	r10, r10
    10fc:	bb 24       	eor	r11, r11
    10fe:	0e 94 c2 1b 	call	0x3784	; 0x3784 <STEPPER_move>
    1102:	8d b7       	in	r24, 0x3d	; 61
    1104:	9e b7       	in	r25, 0x3e	; 62
    1106:	09 96       	adiw	r24, 0x09	; 9
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	9e bf       	out	0x3e, r25	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	8f 90       	pop	r8
    112a:	08 95       	ret

0000112c <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    112c:	2f 92       	push	r2
    112e:	3f 92       	push	r3
    1130:	4f 92       	push	r4
    1132:	5f 92       	push	r5
    1134:	6f 92       	push	r6
    1136:	7f 92       	push	r7
    1138:	8f 92       	push	r8
    113a:	9f 92       	push	r9
    113c:	af 92       	push	r10
    113e:	bf 92       	push	r11
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    114c:	e0 90 8e 04 	lds	r14, 0x048E
    1150:	f0 90 8f 04 	lds	r15, 0x048F
    1154:	00 91 90 04 	lds	r16, 0x0490
    1158:	10 91 91 04 	lds	r17, 0x0491
    115c:	33 24       	eor	r3, r3
    115e:	c8 01       	movw	r24, r16
    1160:	b7 01       	movw	r22, r14
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
    116e:	88 23       	and	r24, r24
    1170:	14 f4       	brge	.+4      	; 0x1176 <moveWall+0x4a>
    1172:	33 24       	eor	r3, r3
    1174:	33 94       	inc	r3
    1176:	a0 90 c1 07 	lds	r10, 0x07C1
    117a:	b0 90 c2 07 	lds	r11, 0x07C2
    117e:	c0 90 c3 07 	lds	r12, 0x07C3
    1182:	d0 90 c4 07 	lds	r13, 0x07C4
    1186:	40 90 bc 07 	lds	r4, 0x07BC
    118a:	50 90 bd 07 	lds	r5, 0x07BD
    118e:	60 90 be 07 	lds	r6, 0x07BE
    1192:	70 90 bf 07 	lds	r7, 0x07BF
    1196:	88 24       	eor	r8, r8
    1198:	60 91 98 04 	lds	r22, 0x0498
    119c:	70 91 99 04 	lds	r23, 0x0499
    11a0:	80 91 9a 04 	lds	r24, 0x049A
    11a4:	90 91 9b 04 	lds	r25, 0x049B
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e7       	ldi	r20, 0x70	; 112
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
    11b4:	88 23       	and	r24, r24
    11b6:	14 f4       	brge	.+4      	; 0x11bc <moveWall+0x90>
    11b8:	88 24       	eor	r8, r8
    11ba:	83 94       	inc	r8
    11bc:	93 2c       	mov	r9, r3
    11be:	98 28       	or	r9, r8
    11c0:	88 24       	eor	r8, r8
    11c2:	c6 01       	movw	r24, r12
    11c4:	b5 01       	movw	r22, r10
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e2       	ldi	r20, 0x20	; 32
    11cc:	51 e4       	ldi	r21, 0x41	; 65
    11ce:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
    11d2:	88 23       	and	r24, r24
    11d4:	14 f4       	brge	.+4      	; 0x11da <moveWall+0xae>
    11d6:	88 24       	eor	r8, r8
    11d8:	83 94       	inc	r8
    11da:	98 28       	or	r9, r8
    11dc:	88 24       	eor	r8, r8
    11de:	c3 01       	movw	r24, r6
    11e0:	b2 01       	movw	r22, r4
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e2       	ldi	r20, 0x20	; 32
    11e8:	51 e4       	ldi	r21, 0x41	; 65
    11ea:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	14 f4       	brge	.+4      	; 0x11f6 <moveWall+0xca>
    11f2:	88 24       	eor	r8, r8
    11f4:	83 94       	inc	r8
    11f6:	29 2c       	mov	r2, r9
    11f8:	28 28       	or	r2, r8
	if(!isWall){	
    11fa:	81 f4       	brne	.+32     	; 0x121c <moveWall+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	9f e4       	ldi	r25, 0x4F	; 79
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	79 01       	movw	r14, r18
    120e:	8a 01       	movw	r16, r20
    1210:	59 01       	movw	r10, r18
    1212:	6a 01       	movw	r12, r20
    1214:	88 24       	eor	r8, r8
    1216:	0e 94 21 12 	call	0x2442	; 0x2442 <move_arc_stnb>
    121a:	0f c1       	rjmp	.+542    	; 0x143a <moveWall+0x30e>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    121c:	c6 01       	movw	r24, r12
    121e:	b5 01       	movw	r22, r10
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e2       	ldi	r20, 0x20	; 32
    1226:	51 e4       	ldi	r21, 0x41	; 65
    1228:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__gesf2>
    122c:	18 16       	cp	r1, r24
    122e:	64 f4       	brge	.+24     	; 0x1248 <moveWall+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a0 e0       	ldi	r26, 0x00	; 0
    1236:	b1 ec       	ldi	r27, 0xC1	; 193
    1238:	80 93 c1 07 	sts	0x07C1, r24
    123c:	90 93 c2 07 	sts	0x07C2, r25
    1240:	a0 93 c3 07 	sts	0x07C3, r26
    1244:	b0 93 c4 07 	sts	0x07C4, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    1248:	c3 01       	movw	r24, r6
    124a:	b2 01       	movw	r22, r4
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e2       	ldi	r20, 0x20	; 32
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__gesf2>
    1258:	18 16       	cp	r1, r24
    125a:	14 f0       	brlt	.+4      	; 0x1260 <moveWall+0x134>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	0d c0       	rjmp	.+26     	; 0x127a <moveWall+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e0       	ldi	r26, 0x00	; 0
    1266:	b1 ec       	ldi	r27, 0xC1	; 193
    1268:	80 93 bc 07 	sts	0x07BC, r24
    126c:	90 93 bd 07 	sts	0x07BD, r25
    1270:	a0 93 be 07 	sts	0x07BE, r26
    1274:	b0 93 bf 07 	sts	0x07BF, r27
    1278:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    127a:	33 20       	and	r3, r3
    127c:	21 f1       	breq	.+72     	; 0x12c6 <moveWall+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    127e:	88 23       	and	r24, r24
    1280:	29 f0       	breq	.+10     	; 0x128c <moveWall+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	8a e7       	ldi	r24, 0x7A	; 122
    1288:	94 e4       	ldi	r25, 0x44	; 68
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <moveWall+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	8a e7       	ldi	r24, 0x7A	; 122
    1292:	94 ec       	ldi	r25, 0xC4	; 196
    1294:	a8 01       	movw	r20, r16
    1296:	97 01       	movw	r18, r14
    1298:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    129c:	20 91 bc 07 	lds	r18, 0x07BC
    12a0:	30 91 bd 07 	lds	r19, 0x07BD
    12a4:	40 91 be 07 	lds	r20, 0x07BE
    12a8:	50 91 bf 07 	lds	r21, 0x07BF
    12ac:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    12b0:	9b 01       	movw	r18, r22
    12b2:	ac 01       	movw	r20, r24
    12b4:	60 91 c1 07 	lds	r22, 0x07C1
    12b8:	70 91 c2 07 	lds	r23, 0x07C2
    12bc:	80 91 c3 07 	lds	r24, 0x07C3
    12c0:	90 91 c4 07 	lds	r25, 0x07C4
    12c4:	10 c0       	rjmp	.+32     	; 0x12e6 <moveWall+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    12c6:	60 91 c1 07 	lds	r22, 0x07C1
    12ca:	70 91 c2 07 	lds	r23, 0x07C2
    12ce:	80 91 c3 07 	lds	r24, 0x07C3
    12d2:	90 91 c4 07 	lds	r25, 0x07C4
    12d6:	20 91 bc 07 	lds	r18, 0x07BC
    12da:	30 91 bd 07 	lds	r19, 0x07BD
    12de:	40 91 be 07 	lds	r20, 0x07BE
    12e2:	50 91 bf 07 	lds	r21, 0x07BF
    12e6:	0e 94 98 2b 	call	0x5730	; 0x5730 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    12ea:	90 58       	subi	r25, 0x80	; 128
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	0e 94 ad 11 	call	0x235a	; 0x235a <pidController>
    12f2:	6b 01       	movw	r12, r22
    12f4:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    12f6:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fixsfsi>
    12fa:	8b 01       	movw	r16, r22
    12fc:	77 ff       	sbrs	r23, 7
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <moveWall+0x1da>
    1300:	10 95       	com	r17
    1302:	01 95       	neg	r16
    1304:	1f 4f       	sbci	r17, 0xFF	; 255
    1306:	05 36       	cpi	r16, 0x65	; 101
    1308:	11 05       	cpc	r17, r1
    130a:	fc f0       	brlt	.+62     	; 0x134a <moveWall+0x21e>
    130c:	c7 01       	movw	r24, r14
    130e:	b6 01       	movw	r22, r12
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
    131c:	88 23       	and	r24, r24
    131e:	a9 f0       	breq	.+42     	; 0x134a <moveWall+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    1320:	b8 01       	movw	r22, r16
    1322:	88 27       	eor	r24, r24
    1324:	77 fd       	sbrc	r23, 7
    1326:	80 95       	com	r24
    1328:	98 2f       	mov	r25, r24
    132a:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__floatsisf>
    132e:	9b 01       	movw	r18, r22
    1330:	ac 01       	movw	r20, r24
    1332:	c7 01       	movw	r24, r14
    1334:	b6 01       	movw	r22, r12
    1336:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	48 ec       	ldi	r20, 0xC8	; 200
    1340:	52 e4       	ldi	r21, 0x42	; 66
    1342:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    1346:	6b 01       	movw	r12, r22
    1348:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    134a:	c7 01       	movw	r24, r14
    134c:	b6 01       	movw	r22, r12
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	48 ec       	ldi	r20, 0xC8	; 200
    1354:	52 e4       	ldi	r21, 0x42	; 66
    1356:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    135a:	6b 01       	movw	r12, r22
    135c:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
    135e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <STEPPER_get_nSteps>
    1362:	60 93 b4 07 	sts	0x07B4, r22
    1366:	70 93 b5 07 	sts	0x07B5, r23
    136a:	80 93 b6 07 	sts	0x07B6, r24
    136e:	90 93 b7 07 	sts	0x07B7, r25
	odometryStepL += WALL_STEP - curr_step.left;
    1372:	80 91 4e 08 	lds	r24, 0x084E
    1376:	8e 5c       	subi	r24, 0xCE	; 206
    1378:	86 1b       	sub	r24, r22
    137a:	80 93 4e 08 	sts	0x084E, r24
	odometryStepR += WALL_STEP - curr_step.right;
    137e:	80 91 14 04 	lds	r24, 0x0414
    1382:	8e 5c       	subi	r24, 0xCE	; 206
    1384:	90 91 b6 07 	lds	r25, 0x07B6
    1388:	89 1b       	sub	r24, r25
    138a:	80 93 14 04 	sts	0x0414, r24
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    138e:	8d b7       	in	r24, 0x3d	; 61
    1390:	9e b7       	in	r25, 0x3e	; 62
    1392:	09 97       	sbiw	r24, 0x09	; 9
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	9e bf       	out	0x3e, r25	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	8d bf       	out	0x3d, r24	; 61
    139e:	0d b7       	in	r16, 0x3d	; 61
    13a0:	1e b7       	in	r17, 0x3e	; 62
    13a2:	0f 5f       	subi	r16, 0xFF	; 255
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	48 ec       	ldi	r20, 0xC8	; 200
    13b0:	52 e4       	ldi	r21, 0x42	; 66
    13b2:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	48 ec       	ldi	r20, 0xC8	; 200
    13bc:	52 e4       	ldi	r21, 0x42	; 66
    13be:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    13c2:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    13c6:	4b 01       	movw	r8, r22
    13c8:	5c 01       	movw	r10, r24
    13ca:	82 e3       	ldi	r24, 0x32	; 50
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	f8 01       	movw	r30, r16
    13d0:	91 83       	std	Z+1, r25	; 0x01
    13d2:	80 83       	st	Z, r24
    13d4:	c7 01       	movw	r24, r14
    13d6:	b6 01       	movw	r22, r12
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	48 ec       	ldi	r20, 0xC8	; 200
    13de:	52 ec       	ldi	r21, 0xC2	; 194
    13e0:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	48 ec       	ldi	r20, 0xC8	; 200
    13ea:	52 e4       	ldi	r21, 0x42	; 66
    13ec:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    13f0:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    13f4:	f8 01       	movw	r30, r16
    13f6:	73 83       	std	Z+3, r23	; 0x03
    13f8:	62 83       	std	Z+2, r22	; 0x02
    13fa:	82 ec       	ldi	r24, 0xC2	; 194
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	95 83       	std	Z+5, r25	; 0x05
    1400:	84 83       	std	Z+4, r24	; 0x04
    1402:	16 82       	std	Z+6, r1	; 0x06
    1404:	10 86       	std	Z+8, r1	; 0x08
    1406:	17 82       	std	Z+7, r1	; 0x07
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	41 e0       	ldi	r20, 0x01	; 1
    140e:	22 e3       	ldi	r18, 0x32	; 50
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	84 01       	movw	r16, r8
    1414:	a2 ec       	ldi	r26, 0xC2	; 194
    1416:	ea 2e       	mov	r14, r26
    1418:	a1 e0       	ldi	r26, 0x01	; 1
    141a:	fa 2e       	mov	r15, r26
    141c:	cc 24       	eor	r12, r12
    141e:	aa 24       	eor	r10, r10
    1420:	bb 24       	eor	r11, r11
    1422:	88 24       	eor	r8, r8
    1424:	83 94       	inc	r8
    1426:	0e 94 c2 1b 	call	0x3784	; 0x3784 <STEPPER_move>
    142a:	8d b7       	in	r24, 0x3d	; 61
    142c:	9e b7       	in	r25, 0x3e	; 62
    142e:	09 96       	adiw	r24, 0x09	; 9
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	9e bf       	out	0x3e, r25	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    143a:	82 2d       	mov	r24, r2
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	bf 90       	pop	r11
    144a:	af 90       	pop	r10
    144c:	9f 90       	pop	r9
    144e:	8f 90       	pop	r8
    1450:	7f 90       	pop	r7
    1452:	6f 90       	pop	r6
    1454:	5f 90       	pop	r5
    1456:	4f 90       	pop	r4
    1458:	3f 90       	pop	r3
    145a:	2f 90       	pop	r2
    145c:	08 95       	ret

0000145e <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    145e:	8f 92       	push	r8
    1460:	af 92       	push	r10
    1462:	bf 92       	push	r11
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
	LCD_clear();
    1470:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    1474:	e0 91 97 04 	lds	r30, 0x0497
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	ea 5e       	subi	r30, 0xEA	; 234
    147c:	fa 4f       	sbci	r31, 0xFA	; 250
    147e:	e0 81       	ld	r30, Z
    1480:	e0 93 13 04 	sts	0x0413, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	e1 30       	cpi	r30, 0x01	; 1
    1488:	09 f4       	brne	.+2      	; 0x148c <moveWorld+0x2e>
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	e3 30       	cpi	r30, 0x03	; 3
    1490:	09 f4       	brne	.+2      	; 0x1494 <moveWorld+0x36>
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	89 2b       	or	r24, r25
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	80 91 15 04 	lds	r24, 0x0415
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	11 f4       	brne	.+4      	; 0x14aa <moveWorld+0x4c>
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	24 23       	and	r18, r20
    14ac:	35 23       	and	r19, r21
    14ae:	23 2b       	or	r18, r19
    14b0:	b9 f0       	breq	.+46     	; 0x14e0 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	9f e4       	ldi	r25, 0x4F	; 79
    14ba:	2d eb       	ldi	r18, 0xBD	; 189
    14bc:	34 e7       	ldi	r19, 0x74	; 116
    14be:	4b ed       	ldi	r20, 0xDB	; 219
    14c0:	51 e4       	ldi	r21, 0x41	; 65
    14c2:	0f 2e       	mov	r0, r31
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	ef 2e       	mov	r14, r31
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	ff 2e       	mov	r15, r31
    14cc:	f0 e2       	ldi	r31, 0x20	; 32
    14ce:	0f 2f       	mov	r16, r31
    14d0:	f1 e4       	ldi	r31, 0x41	; 65
    14d2:	1f 2f       	mov	r17, r31
    14d4:	f0 2d       	mov	r31, r0
    14d6:	57 01       	movw	r10, r14
    14d8:	68 01       	movw	r12, r16
    14da:	88 24       	eor	r8, r8
    14dc:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    14e0:	20 91 15 04 	lds	r18, 0x0415
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	21 30       	cpi	r18, 0x01	; 1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <moveWorld+0x8e>
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	23 30       	cpi	r18, 0x03	; 3
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <moveWorld+0x96>
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	89 2b       	or	r24, r25
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	80 91 13 04 	lds	r24, 0x0413
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	11 f4       	brne	.+4      	; 0x150a <moveWorld+0xac>
    1506:	41 e0       	ldi	r20, 0x01	; 1
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	24 23       	and	r18, r20
    150c:	35 23       	and	r19, r21
    150e:	23 2b       	or	r18, r19
    1510:	b9 f0       	breq	.+46     	; 0x1540 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	9f e4       	ldi	r25, 0x4F	; 79
    151a:	2d eb       	ldi	r18, 0xBD	; 189
    151c:	34 e7       	ldi	r19, 0x74	; 116
    151e:	4b ed       	ldi	r20, 0xDB	; 219
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0f 2e       	mov	r0, r31
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	ef 2e       	mov	r14, r31
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	ff 2e       	mov	r15, r31
    152c:	f0 e2       	ldi	r31, 0x20	; 32
    152e:	0f 2f       	mov	r16, r31
    1530:	f1 e4       	ldi	r31, 0x41	; 65
    1532:	1f 2f       	mov	r17, r31
    1534:	f0 2d       	mov	r31, r0
    1536:	57 01       	movw	r10, r14
    1538:	68 01       	movw	r12, r16
    153a:	88 24       	eor	r8, r8
    153c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <move_arc_stwt>
	}
	
	switch(currentMove){
    1540:	80 91 13 04 	lds	r24, 0x0413
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	c1 f1       	breq	.+112    	; 0x15b8 <moveWorld+0x15a>
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	09 f4       	brne	.+2      	; 0x154e <moveWorld+0xf0>
    154c:	61 c0       	rjmp	.+194    	; 0x1610 <moveWorld+0x1b2>
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	09 f0       	breq	.+2      	; 0x1554 <moveWorld+0xf6>
    1552:	9f c0       	rjmp	.+318    	; 0x1692 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1554:	8d b7       	in	r24, 0x3d	; 61
    1556:	9e b7       	in	r25, 0x3e	; 62
    1558:	08 97       	sbiw	r24, 0x08	; 8
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	9e bf       	out	0x3e, r25	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	8d bf       	out	0x3d, r24	; 61
    1564:	ed b7       	in	r30, 0x3d	; 61
    1566:	fe b7       	in	r31, 0x3e	; 62
    1568:	31 96       	adiw	r30, 0x01	; 1
    156a:	84 e2       	ldi	r24, 0x24	; 36
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	ad b7       	in	r26, 0x3d	; 61
    1570:	be b7       	in	r27, 0x3e	; 62
    1572:	12 96       	adiw	r26, 0x02	; 2
    1574:	9c 93       	st	X, r25
    1576:	8e 93       	st	-X, r24
    1578:	11 97       	sbiw	r26, 0x01	; 1
    157a:	80 91 97 04 	lds	r24, 0x0497
    157e:	82 83       	std	Z+2, r24	; 0x02
    1580:	13 82       	std	Z+3, r1	; 0x03
    1582:	80 91 96 04 	lds	r24, 0x0496
    1586:	84 83       	std	Z+4, r24	; 0x04
    1588:	15 82       	std	Z+5, r1	; 0x05
    158a:	80 91 9c 04 	lds	r24, 0x049C
    158e:	86 83       	std	Z+6, r24	; 0x06
    1590:	17 82       	std	Z+7, r1	; 0x07
    1592:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1596:	ed b7       	in	r30, 0x3d	; 61
    1598:	fe b7       	in	r31, 0x3e	; 62
    159a:	38 96       	adiw	r30, 0x08	; 8
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	fe bf       	out	0x3e, r31	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	ed bf       	out	0x3d, r30	; 61
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	44 e8       	ldi	r20, 0x84	; 132
    15b4:	51 ec       	ldi	r21, 0xC1	; 193
    15b6:	5d c0       	rjmp	.+186    	; 0x1672 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    15b8:	8d b7       	in	r24, 0x3d	; 61
    15ba:	9e b7       	in	r25, 0x3e	; 62
    15bc:	08 97       	sbiw	r24, 0x08	; 8
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	9e bf       	out	0x3e, r25	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	8d bf       	out	0x3d, r24	; 61
    15c8:	ed b7       	in	r30, 0x3d	; 61
    15ca:	fe b7       	in	r31, 0x3e	; 62
    15cc:	31 96       	adiw	r30, 0x01	; 1
    15ce:	8f e4       	ldi	r24, 0x4F	; 79
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	ad b7       	in	r26, 0x3d	; 61
    15d4:	be b7       	in	r27, 0x3e	; 62
    15d6:	12 96       	adiw	r26, 0x02	; 2
    15d8:	9c 93       	st	X, r25
    15da:	8e 93       	st	-X, r24
    15dc:	11 97       	sbiw	r26, 0x01	; 1
    15de:	80 91 97 04 	lds	r24, 0x0497
    15e2:	82 83       	std	Z+2, r24	; 0x02
    15e4:	13 82       	std	Z+3, r1	; 0x03
    15e6:	80 91 96 04 	lds	r24, 0x0496
    15ea:	84 83       	std	Z+4, r24	; 0x04
    15ec:	15 82       	std	Z+5, r1	; 0x05
    15ee:	80 91 9c 04 	lds	r24, 0x049C
    15f2:	86 83       	std	Z+6, r24	; 0x06
    15f4:	17 82       	std	Z+7, r1	; 0x07
    15f6:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    15fa:	ed b7       	in	r30, 0x3d	; 61
    15fc:	fe b7       	in	r31, 0x3e	; 62
    15fe:	38 96       	adiw	r30, 0x08	; 8
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	fe bf       	out	0x3e, r31	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	ed bf       	out	0x3d, r30	; 61
    160a:	0e 94 96 08 	call	0x112c	; 0x112c <moveWall>
    160e:	53 c0       	rjmp	.+166    	; 0x16b6 <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1610:	8d b7       	in	r24, 0x3d	; 61
    1612:	9e b7       	in	r25, 0x3e	; 62
    1614:	08 97       	sbiw	r24, 0x08	; 8
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	9e bf       	out	0x3e, r25	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	8d bf       	out	0x3d, r24	; 61
    1620:	ed b7       	in	r30, 0x3d	; 61
    1622:	fe b7       	in	r31, 0x3e	; 62
    1624:	31 96       	adiw	r30, 0x01	; 1
    1626:	8d e7       	ldi	r24, 0x7D	; 125
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	ad b7       	in	r26, 0x3d	; 61
    162c:	be b7       	in	r27, 0x3e	; 62
    162e:	12 96       	adiw	r26, 0x02	; 2
    1630:	9c 93       	st	X, r25
    1632:	8e 93       	st	-X, r24
    1634:	11 97       	sbiw	r26, 0x01	; 1
    1636:	80 91 97 04 	lds	r24, 0x0497
    163a:	82 83       	std	Z+2, r24	; 0x02
    163c:	13 82       	std	Z+3, r1	; 0x03
    163e:	80 91 96 04 	lds	r24, 0x0496
    1642:	84 83       	std	Z+4, r24	; 0x04
    1644:	15 82       	std	Z+5, r1	; 0x05
    1646:	80 91 9c 04 	lds	r24, 0x049C
    164a:	86 83       	std	Z+6, r24	; 0x06
    164c:	17 82       	std	Z+7, r1	; 0x07
    164e:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1652:	ed b7       	in	r30, 0x3d	; 61
    1654:	fe b7       	in	r31, 0x3e	; 62
    1656:	38 96       	adiw	r30, 0x08	; 8
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	fe bf       	out	0x3e, r31	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	ed bf       	out	0x3d, r30	; 61
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	44 e8       	ldi	r20, 0x84	; 132
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0f 2e       	mov	r0, r31
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	ef 2e       	mov	r14, r31
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	ff 2e       	mov	r15, r31
    167c:	f0 e2       	ldi	r31, 0x20	; 32
    167e:	0f 2f       	mov	r16, r31
    1680:	f1 e4       	ldi	r31, 0x41	; 65
    1682:	1f 2f       	mov	r17, r31
    1684:	f0 2d       	mov	r31, r0
    1686:	57 01       	movw	r10, r14
    1688:	68 01       	movw	r12, r16
    168a:	88 24       	eor	r8, r8
    168c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <move_arc_stwt>
    1690:	12 c0       	rjmp	.+36     	; 0x16b6 <moveWorld+0x258>
			break;
		default:
			LCD_printf("What?!");
    1692:	00 d0       	rcall	.+0      	; 0x1694 <moveWorld+0x236>
    1694:	89 ea       	ldi	r24, 0xA9	; 169
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	ad b7       	in	r26, 0x3d	; 61
    169a:	be b7       	in	r27, 0x3e	; 62
    169c:	12 96       	adiw	r26, 0x02	; 2
    169e:	9c 93       	st	X, r25
    16a0:	8e 93       	st	-X, r24
    16a2:	11 97       	sbiw	r26, 0x01	; 1
    16a4:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <STEPPER_stop>
    16b4:	ff cf       	rjmp	.-2      	; 0x16b4 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    16b6:	80 91 13 04 	lds	r24, 0x0413
    16ba:	80 93 15 04 	sts	0x0415, r24
	return 1;
}
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	cf 90       	pop	r12
    16cc:	bf 90       	pop	r11
    16ce:	af 90       	pop	r10
    16d0:	8f 90       	pop	r8
    16d2:	08 95       	ret

000016d4 <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    16d4:	0e 94 2f 0a 	call	0x145e	; 0x145e <moveWorld>
    16d8:	88 23       	and	r24, r24
    16da:	69 f0       	breq	.+26     	; 0x16f6 <moveBehavior+0x22>
		Ierror = 0;
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a0 e0       	ldi	r26, 0x00	; 0
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	80 93 92 04 	sts	0x0492, r24
    16e8:	90 93 93 04 	sts	0x0493, r25
    16ec:	a0 93 94 04 	sts	0x0494, r26
    16f0:	b0 93 95 04 	sts	0x0495, r27
    16f4:	81 e0       	ldi	r24, 0x01	; 1
		return 1; 
	}
	return 0;	
}
    16f6:	08 95       	ret

000016f8 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	ff 24       	eor	r15, r15
    1704:	f3 94       	inc	r15
    1706:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1708:	c0 eb       	ldi	r28, 0xB0	; 176
    170a:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    170c:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    1710:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	21 f0       	breq	.+8      	; 0x171e <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	11 f0       	breq	.+4      	; 0x171e <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	39 f4       	brne	.+14     	; 0x172c <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    171e:	e1 2f       	mov	r30, r17
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	ea 5e       	subi	r30, 0xEA	; 234
    1724:	fa 4f       	sbci	r31, 0xFA	; 250
    1726:	00 83       	st	Z, r16
			i++;
    1728:	1f 5f       	subi	r17, 0xFF	; 255
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <movesInput+0x38>
		}

		if (btnHolder != 0){
    172c:	88 23       	and	r24, r24
    172e:	21 f1       	breq	.+72     	; 0x1778 <movesInput+0x80>
			LCD_clear();
    1730:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1734:	8d b7       	in	r24, 0x3d	; 61
    1736:	9e b7       	in	r25, 0x3e	; 62
    1738:	08 97       	sbiw	r24, 0x08	; 8
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	9e bf       	out	0x3e, r25	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	8d bf       	out	0x3d, r24	; 61
    1744:	ed b7       	in	r30, 0x3d	; 61
    1746:	fe b7       	in	r31, 0x3e	; 62
    1748:	31 96       	adiw	r30, 0x01	; 1
    174a:	ad b7       	in	r26, 0x3d	; 61
    174c:	be b7       	in	r27, 0x3e	; 62
    174e:	12 96       	adiw	r26, 0x02	; 2
    1750:	dc 93       	st	X, r29
    1752:	ce 93       	st	-X, r28
    1754:	11 97       	sbiw	r26, 0x01	; 1
    1756:	f2 82       	std	Z+2, r15	; 0x02
    1758:	13 82       	std	Z+3, r1	; 0x03
    175a:	04 83       	std	Z+4, r16	; 0x04
    175c:	15 82       	std	Z+5, r1	; 0x05
    175e:	16 83       	std	Z+6, r17	; 0x06
    1760:	17 82       	std	Z+7, r1	; 0x07
    1762:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
    1766:	f0 2e       	mov	r15, r16
    1768:	8d b7       	in	r24, 0x3d	; 61
    176a:	9e b7       	in	r25, 0x3e	; 62
    176c:	08 96       	adiw	r24, 0x08	; 8
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	9e bf       	out	0x3e, r25	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1778:	84 ef       	ldi	r24, 0xF4	; 244
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    1780:	1b 30       	cpi	r17, 0x0B	; 11
    1782:	20 f2       	brcs	.-120    	; 0x170c <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    1784:	1f 5f       	subi	r17, 0xFF	; 255
    1786:	e1 2f       	mov	r30, r17
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	ea 5e       	subi	r30, 0xEA	; 234
    178c:	fa 4f       	sbci	r31, 0xFA	; 250
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	80 83       	st	Z, r24
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	08 95       	ret

0000179e <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    17a6:	c1 ee       	ldi	r28, 0xE1	; 225
    17a8:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    17aa:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	21 f4       	brne	.+8      	; 0x17ba <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    17b2:	80 91 b8 07 	lds	r24, 0x07B8
    17b6:	88 0f       	add	r24, r24
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	39 f4       	brne	.+14     	; 0x17cc <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    17be:	80 91 b8 07 	lds	r24, 0x07B8
    17c2:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	80 93 b8 07 	sts	0x07B8, r24
			i++;
    17ca:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    17cc:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <worldInput+0x34>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <worldInput+0x36>
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <worldInput+0x38>
    17d6:	ed b7       	in	r30, 0x3d	; 61
    17d8:	fe b7       	in	r31, 0x3e	; 62
    17da:	31 96       	adiw	r30, 0x01	; 1
    17dc:	ad b7       	in	r26, 0x3d	; 61
    17de:	be b7       	in	r27, 0x3e	; 62
    17e0:	12 96       	adiw	r26, 0x02	; 2
    17e2:	dc 93       	st	X, r29
    17e4:	ce 93       	st	-X, r28
    17e6:	11 97       	sbiw	r26, 0x01	; 1
    17e8:	80 91 b8 07 	lds	r24, 0x07B8
    17ec:	82 83       	std	Z+2, r24	; 0x02
    17ee:	13 82       	std	Z+3, r1	; 0x03
    17f0:	14 83       	std	Z+4, r17	; 0x04
    17f2:	15 82       	std	Z+5, r1	; 0x05
    17f4:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
		// }
		currentCellWorldStart = currentCellWorld;
    17f8:	80 91 b8 07 	lds	r24, 0x07B8
    17fc:	80 93 b9 07 	sts	0x07B9, r24
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1800:	8d b7       	in	r24, 0x3d	; 61
    1802:	9e b7       	in	r25, 0x3e	; 62
    1804:	06 96       	adiw	r24, 0x06	; 6
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	9e bf       	out	0x3e, r25	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	8d bf       	out	0x3d, r24	; 61
    1810:	84 ef       	ldi	r24, 0xF4	; 244
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    1818:	14 30       	cpi	r17, 0x04	; 4
    181a:	38 f2       	brcs	.-114    	; 0x17aa <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		currentCellWorldStart = currentCellWorld;
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
}
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	08 95       	ret

00001824 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    182c:	c9 e0       	ldi	r28, 0x09	; 9
    182e:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    1830:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	21 f4       	brne	.+8      	; 0x1840 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    1838:	80 91 37 05 	lds	r24, 0x0537
    183c:	88 0f       	add	r24, r24
    183e:	06 c0       	rjmp	.+12     	; 0x184c <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	41 f4       	brne	.+16     	; 0x1854 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    1844:	80 91 37 05 	lds	r24, 0x0537
    1848:	88 0f       	add	r24, r24
			currentOrientation += 1;
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	80 93 37 05 	sts	0x0537, r24
			i++;
    1850:	1f 5f       	subi	r17, 0xFF	; 255
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    1854:	88 23       	and	r24, r24
    1856:	f1 f0       	breq	.+60     	; 0x1894 <orientationInput+0x70>
			LCD_clear();
    1858:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    185c:	00 d0       	rcall	.+0      	; 0x185e <orientationInput+0x3a>
    185e:	00 d0       	rcall	.+0      	; 0x1860 <orientationInput+0x3c>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <orientationInput+0x3e>
    1862:	ed b7       	in	r30, 0x3d	; 61
    1864:	fe b7       	in	r31, 0x3e	; 62
    1866:	31 96       	adiw	r30, 0x01	; 1
    1868:	ad b7       	in	r26, 0x3d	; 61
    186a:	be b7       	in	r27, 0x3e	; 62
    186c:	12 96       	adiw	r26, 0x02	; 2
    186e:	dc 93       	st	X, r29
    1870:	ce 93       	st	-X, r28
    1872:	11 97       	sbiw	r26, 0x01	; 1
    1874:	80 91 37 05 	lds	r24, 0x0537
    1878:	82 83       	std	Z+2, r24	; 0x02
    187a:	13 82       	std	Z+3, r1	; 0x03
    187c:	14 83       	std	Z+4, r17	; 0x04
    187e:	15 82       	std	Z+5, r1	; 0x05
    1880:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
    1884:	8d b7       	in	r24, 0x3d	; 61
    1886:	9e b7       	in	r25, 0x3e	; 62
    1888:	06 96       	adiw	r24, 0x06	; 6
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	9e bf       	out	0x3e, r25	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1894:	84 ef       	ldi	r24, 0xF4	; 244
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    189c:	12 30       	cpi	r17, 0x02	; 2
    189e:	40 f2       	brcs	.-112    	; 0x1830 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    18a0:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
	switch(currentOrientation){
    18a4:	80 91 37 05 	lds	r24, 0x0537
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	51 f0       	breq	.+20     	; 0x18c0 <orientationInput+0x9c>
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	28 f0       	brcs	.+10     	; 0x18ba <orientationInput+0x96>
    18b0:	82 30       	cpi	r24, 0x02	; 2
    18b2:	49 f0       	breq	.+18     	; 0x18c6 <orientationInput+0xa2>
    18b4:	83 30       	cpi	r24, 0x03	; 3
    18b6:	71 f4       	brne	.+28     	; 0x18d4 <orientationInput+0xb0>
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    18ba:	88 e3       	ldi	r24, 0x38	; 56
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    18c0:	8a e5       	ldi	r24, 0x5A	; 90
    18c2:	92 e0       	ldi	r25, 0x02	; 2
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    18c6:	8b e7       	ldi	r24, 0x7B	; 123
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    18cc:	8d e9       	ldi	r24, 0x9D	; 157
    18ce:	92 e0       	ldi	r25, 0x02	; 2
    18d0:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <puts>
			break;
		default:
			break;
	}
	TMRSRVC_delay(500);	//wait 0.5 seconds
    18d4:	84 ef       	ldi	r24, 0xF4	; 244
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
}
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	08 95       	ret

000018e4 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    18e4:	cf 92       	push	r12
    18e6:	df 92       	push	r13
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	0f 92       	push	r0
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    18fa:	80 91 b8 07 	lds	r24, 0x07B8
    18fe:	f8 2e       	mov	r15, r24
    1900:	f6 94       	lsr	r15
    1902:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    1904:	98 2f       	mov	r25, r24
    1906:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    1908:	00 91 37 05 	lds	r16, 0x0537
    190c:	cc 24       	eor	r12, r12
    190e:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    1910:	f6 01       	movw	r30, r12
    1912:	ea 5e       	subi	r30, 0xEA	; 234
    1914:	fa 4f       	sbci	r31, 0xFA	; 250
    1916:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    1918:	ef 2d       	mov	r30, r15
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	ee 0f       	add	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	ee 0f       	add	r30, r30
    1922:	ff 1f       	adc	r31, r31
    1924:	e9 0f       	add	r30, r25
    1926:	f1 1d       	adc	r31, r1
    1928:	ea 5d       	subi	r30, 0xDA	; 218
    192a:	fa 4f       	sbci	r31, 0xFA	; 250
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    192c:	80 81       	ld	r24, Z
    192e:	60 2f       	mov	r22, r16
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	99 83       	std	Y+1, r25	; 0x01
    1934:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    1938:	f6 01       	movw	r30, r12
    193a:	e3 5c       	subi	r30, 0xC3	; 195
    193c:	f7 4f       	sbci	r31, 0xF7	; 247
    193e:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    1940:	99 81       	ldd	r25, Y+1	; 0x01
    1942:	12 30       	cpi	r17, 0x02	; 2
    1944:	89 f4       	brne	.+34     	; 0x1968 <getGateways+0x84>
			switch(curOrient){
    1946:	01 30       	cpi	r16, 0x01	; 1
    1948:	49 f0       	breq	.+18     	; 0x195c <getGateways+0x78>
    194a:	01 30       	cpi	r16, 0x01	; 1
    194c:	28 f0       	brcs	.+10     	; 0x1958 <getGateways+0x74>
    194e:	02 30       	cpi	r16, 0x02	; 2
    1950:	39 f0       	breq	.+14     	; 0x1960 <getGateways+0x7c>
    1952:	03 30       	cpi	r16, 0x03	; 3
    1954:	89 f4       	brne	.+34     	; 0x1978 <getGateways+0x94>
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    1958:	fa 94       	dec	r15
    195a:	0e c0       	rjmp	.+28     	; 0x1978 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    195c:	9f 5f       	subi	r25, 0xFF	; 255
    195e:	0c c0       	rjmp	.+24     	; 0x1978 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    1960:	f3 94       	inc	r15
    1962:	0a c0       	rjmp	.+20     	; 0x1978 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    1964:	91 50       	subi	r25, 0x01	; 1
    1966:	08 c0       	rjmp	.+16     	; 0x1978 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    1968:	13 30       	cpi	r17, 0x03	; 3
    196a:	11 f4       	brne	.+4      	; 0x1970 <getGateways+0x8c>
			curOrient++;
    196c:	0f 5f       	subi	r16, 0xFF	; 255
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    1970:	11 30       	cpi	r17, 0x01	; 1
    1972:	11 f4       	brne	.+4      	; 0x1978 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    1974:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    1976:	03 70       	andi	r16, 0x03	; 3
    1978:	08 94       	sec
    197a:	c1 1c       	adc	r12, r1
    197c:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    197e:	8d e0       	ldi	r24, 0x0D	; 13
    1980:	c8 16       	cp	r12, r24
    1982:	d1 04       	cpc	r13, r1
    1984:	29 f6       	brne	.-118    	; 0x1910 <getGateways+0x2c>
    1986:	cc 24       	eor	r12, r12
    1988:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    198a:	ee eb       	ldi	r30, 0xBE	; 190
    198c:	ee 2e       	mov	r14, r30
    198e:	e2 e0       	ldi	r30, 0x02	; 2
    1990:	fe 2e       	mov	r15, r30
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    1992:	f6 01       	movw	r30, r12
    1994:	e3 5c       	subi	r30, 0xC3	; 195
    1996:	f7 4f       	sbci	r31, 0xF7	; 247
    1998:	00 81       	ld	r16, Z
		LCD_clear();
    199a:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    199e:	20 2f       	mov	r18, r16
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	ad b7       	in	r26, 0x3d	; 61
    19a4:	be b7       	in	r27, 0x3e	; 62
    19a6:	54 97       	sbiw	r26, 0x14	; 20
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	be bf       	out	0x3e, r27	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	ad bf       	out	0x3d, r26	; 61
    19b2:	ed b7       	in	r30, 0x3d	; 61
    19b4:	fe b7       	in	r31, 0x3e	; 62
    19b6:	31 96       	adiw	r30, 0x01	; 1
    19b8:	12 96       	adiw	r26, 0x02	; 2
    19ba:	fc 92       	st	X, r15
    19bc:	ee 92       	st	-X, r14
    19be:	11 97       	sbiw	r26, 0x01	; 1
    19c0:	d3 82       	std	Z+3, r13	; 0x03
    19c2:	c2 82       	std	Z+2, r12	; 0x02
    19c4:	11 27       	eor	r17, r17
    19c6:	07 fd       	sbrc	r16, 7
    19c8:	10 95       	com	r17
    19ca:	00 27       	eor	r16, r16
    19cc:	11 0f       	add	r17, r17
    19ce:	00 1f       	adc	r16, r16
    19d0:	11 27       	eor	r17, r17
    19d2:	15 83       	std	Z+5, r17	; 0x05
    19d4:	04 83       	std	Z+4, r16	; 0x04
    19d6:	c9 01       	movw	r24, r18
    19d8:	66 e0       	ldi	r22, 0x06	; 6
    19da:	96 95       	lsr	r25
    19dc:	87 95       	ror	r24
    19de:	6a 95       	dec	r22
    19e0:	e1 f7       	brne	.-8      	; 0x19da <getGateways+0xf6>
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	90 70       	andi	r25, 0x00	; 0
    19e6:	97 83       	std	Z+7, r25	; 0x07
    19e8:	86 83       	std	Z+6, r24	; 0x06
    19ea:	c9 01       	movw	r24, r18
    19ec:	55 e0       	ldi	r21, 0x05	; 5
    19ee:	96 95       	lsr	r25
    19f0:	87 95       	ror	r24
    19f2:	5a 95       	dec	r21
    19f4:	e1 f7       	brne	.-8      	; 0x19ee <getGateways+0x10a>
    19f6:	81 70       	andi	r24, 0x01	; 1
    19f8:	90 70       	andi	r25, 0x00	; 0
    19fa:	91 87       	std	Z+9, r25	; 0x09
    19fc:	80 87       	std	Z+8, r24	; 0x08
    19fe:	c9 01       	movw	r24, r18
    1a00:	44 e0       	ldi	r20, 0x04	; 4
    1a02:	96 95       	lsr	r25
    1a04:	87 95       	ror	r24
    1a06:	4a 95       	dec	r20
    1a08:	e1 f7       	brne	.-8      	; 0x1a02 <getGateways+0x11e>
    1a0a:	81 70       	andi	r24, 0x01	; 1
    1a0c:	90 70       	andi	r25, 0x00	; 0
    1a0e:	93 87       	std	Z+11, r25	; 0x0b
    1a10:	82 87       	std	Z+10, r24	; 0x0a
    1a12:	c9 01       	movw	r24, r18
    1a14:	03 e0       	ldi	r16, 0x03	; 3
    1a16:	96 95       	lsr	r25
    1a18:	87 95       	ror	r24
    1a1a:	0a 95       	dec	r16
    1a1c:	e1 f7       	brne	.-8      	; 0x1a16 <getGateways+0x132>
    1a1e:	81 70       	andi	r24, 0x01	; 1
    1a20:	90 70       	andi	r25, 0x00	; 0
    1a22:	95 87       	std	Z+13, r25	; 0x0d
    1a24:	84 87       	std	Z+12, r24	; 0x0c
    1a26:	c9 01       	movw	r24, r18
    1a28:	96 95       	lsr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	96 95       	lsr	r25
    1a2e:	87 95       	ror	r24
    1a30:	81 70       	andi	r24, 0x01	; 1
    1a32:	90 70       	andi	r25, 0x00	; 0
    1a34:	97 87       	std	Z+15, r25	; 0x0f
    1a36:	86 87       	std	Z+14, r24	; 0x0e
    1a38:	c9 01       	movw	r24, r18
    1a3a:	96 95       	lsr	r25
    1a3c:	87 95       	ror	r24
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	90 70       	andi	r25, 0x00	; 0
    1a42:	91 8b       	std	Z+17, r25	; 0x11
    1a44:	80 8b       	std	Z+16, r24	; 0x10
    1a46:	21 70       	andi	r18, 0x01	; 1
    1a48:	30 70       	andi	r19, 0x00	; 0
    1a4a:	33 8b       	std	Z+19, r19	; 0x13
    1a4c:	22 8b       	std	Z+18, r18	; 0x12
    1a4e:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
		TMRSRVC_delay(500);//wait 1/2 seconds
    1a52:	ed b7       	in	r30, 0x3d	; 61
    1a54:	fe b7       	in	r31, 0x3e	; 62
    1a56:	74 96       	adiw	r30, 0x14	; 20
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	fe bf       	out	0x3e, r31	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	ed bf       	out	0x3d, r30	; 61
    1a62:	84 ef       	ldi	r24, 0xF4	; 244
    1a64:	91 e0       	ldi	r25, 0x01	; 1
    1a66:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
    1a6a:	08 94       	sec
    1a6c:	c1 1c       	adc	r12, r1
    1a6e:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    1a70:	fd e0       	ldi	r31, 0x0D	; 13
    1a72:	cf 16       	cp	r12, r31
    1a74:	d1 04       	cpc	r13, r1
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <getGateways+0x196>
    1a78:	8c cf       	rjmp	.-232    	; 0x1992 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(500);//wait 1/2 seconds
	}
}
    1a7a:	0f 90       	pop	r0
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	ff 90       	pop	r15
    1a86:	ef 90       	pop	r14
    1a88:	df 90       	pop	r13
    1a8a:	cf 90       	pop	r12
    1a8c:	08 95       	ret

00001a8e <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    1a8e:	ff 92       	push	r15
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    1a94:	80 91 b8 07 	lds	r24, 0x07B8
    1a98:	08 2f       	mov	r16, r24
    1a9a:	06 95       	lsr	r16
    1a9c:	06 95       	lsr	r16
	unsigned char curCol = currentCellWorld & 0b0011;
    1a9e:	13 e0       	ldi	r17, 0x03	; 3
    1aa0:	f1 2e       	mov	r15, r17
    1aa2:	f8 22       	and	r15, r24
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    1aa4:	10 91 37 05 	lds	r17, 0x0537
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    1aa8:	80 91 96 04 	lds	r24, 0x0496
    1aac:	61 2f       	mov	r22, r17
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	0e 94 0c 12 	call	0x2418	; 0x2418 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    1ab4:	e0 2f       	mov	r30, r16
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	ef 0d       	add	r30, r15
    1ac2:	f1 1d       	adc	r31, r1
    1ac4:	ea 5d       	subi	r30, 0xDA	; 218
    1ac6:	fa 4f       	sbci	r31, 0xFA	; 250
    1ac8:	80 83       	st	Z, r24
		
		
	switch(currentMove){
    1aca:	80 91 13 04 	lds	r24, 0x0413
    1ace:	82 30       	cpi	r24, 0x02	; 2
    1ad0:	a1 f0       	breq	.+40     	; 0x1afa <setGateways+0x6c>
    1ad2:	83 30       	cpi	r24, 0x03	; 3
    1ad4:	21 f0       	breq	.+8      	; 0x1ade <setGateways+0x50>
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <setGateways+0x56>
		case MOVE_LEFT:
			curOrient--;
    1ada:	11 50       	subi	r17, 0x01	; 1
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <setGateways+0x52>
			curOrient = curOrient&0b11;
			break;
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			curOrient++;
    1ade:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    1ae0:	13 70       	andi	r17, 0x03	; 3
    1ae2:	0b c0       	rjmp	.+22     	; 0x1afa <setGateways+0x6c>
			break;
		default:
			LCD_printf("Whatz?!");
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <setGateways+0x58>
    1ae6:	80 ee       	ldi	r24, 0xE0	; 224
    1ae8:	92 e0       	ldi	r25, 0x02	; 2
    1aea:	ed b7       	in	r30, 0x3d	; 61
    1aec:	fe b7       	in	r31, 0x3e	; 62
    1aee:	92 83       	std	Z+2, r25	; 0x02
    1af0:	81 83       	std	Z+1, r24	; 0x01
    1af2:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
			break;
	}
	
	// move to the next cell with respect to our orientation
	switch(curOrient){
    1afa:	11 30       	cpi	r17, 0x01	; 1
    1afc:	49 f0       	breq	.+18     	; 0x1b10 <setGateways+0x82>
    1afe:	11 30       	cpi	r17, 0x01	; 1
    1b00:	28 f0       	brcs	.+10     	; 0x1b0c <setGateways+0x7e>
    1b02:	12 30       	cpi	r17, 0x02	; 2
    1b04:	39 f0       	breq	.+14     	; 0x1b14 <setGateways+0x86>
    1b06:	13 30       	cpi	r17, 0x03	; 3
    1b08:	41 f4       	brne	.+16     	; 0x1b1a <setGateways+0x8c>
    1b0a:	06 c0       	rjmp	.+12     	; 0x1b18 <setGateways+0x8a>
		case NORTH:
			curRow -= 1;
    1b0c:	01 50       	subi	r16, 0x01	; 1
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <setGateways+0x8c>
			break;
		case EAST:
			curCol += 1;
    1b10:	f3 94       	inc	r15
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <setGateways+0x8c>
			break;
		case SOUTH:
			curRow += 1;					
    1b14:	0f 5f       	subi	r16, 0xFF	; 255
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <setGateways+0x8c>
			break;
		case WEST:
			curCol -= 1;					
    1b18:	fa 94       	dec	r15
			break;
		default:
			break;
	}	
	currentCellWorld = (curRow << 2) + curCol;
    1b1a:	00 0f       	add	r16, r16
    1b1c:	00 0f       	add	r16, r16
    1b1e:	0f 0d       	add	r16, r15
    1b20:	00 93 b8 07 	sts	0x07B8, r16
}
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	08 95       	ret

00001b2c <mapWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    maps the world as it moves through it
********************************************************************/
char mapWorld( void )
{	
    1b2c:	8f 92       	push	r8
    1b2e:	af 92       	push	r10
    1b30:	bf 92       	push	r11
    1b32:	cf 92       	push	r12
    1b34:	df 92       	push	r13
    1b36:	ef 92       	push	r14
    1b38:	ff 92       	push	r15
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
	if(!(currentGateway&0b0001)){	
    1b3e:	80 91 96 04 	lds	r24, 0x0496
    1b42:	80 fd       	sbrc	r24, 0
    1b44:	04 c0       	rjmp	.+8      	; 0x1b4e <mapWorld+0x22>
		// If we can make a left turn,
		// then turn left
		currentMove = MOVE_LEFT;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	80 93 13 04 	sts	0x0413, r24
    1b4c:	0a c0       	rjmp	.+20     	; 0x1b62 <mapWorld+0x36>
		// Reset Odometry
		checkOdometry(1);
	}
	else if(!(currentGateway&0b1000)){
    1b4e:	83 fd       	sbrc	r24, 3
    1b50:	04 c0       	rjmp	.+8      	; 0x1b5a <mapWorld+0x2e>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	80 93 13 04 	sts	0x0413, r24
    1b58:	06 c0       	rjmp	.+12     	; 0x1b66 <mapWorld+0x3a>
	}
	else {
		// If we can't turn left or go forward
		// spin right
		currentMove = MOVE_RIGHT;
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	80 93 13 04 	sts	0x0413, r24
		// Reset Odometry
		checkOdometry(1);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	0e 94 0a 06 	call	0xc14	; 0xc14 <checkOdometry>
	}
	
	if(odometryFlag)
    1b66:	80 91 c0 07 	lds	r24, 0x07C0
    1b6a:	88 23       	and	r24, r24
    1b6c:	11 f0       	breq	.+4      	; 0x1b72 <mapWorld+0x46>
	{
		// Only update the map if we are done moving
		setGateways();
    1b6e:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <setGateways>
	}
	
	LCD_clear();
    1b72:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
	switch(currentMove){
    1b76:	80 91 13 04 	lds	r24, 0x0413
    1b7a:	82 30       	cpi	r24, 0x02	; 2
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <mapWorld+0x54>
    1b7e:	59 c0       	rjmp	.+178    	; 0x1c32 <mapWorld+0x106>
    1b80:	83 30       	cpi	r24, 0x03	; 3
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <mapWorld+0x5a>
    1b84:	82 c0       	rjmp	.+260    	; 0x1c8a <mapWorld+0x15e>
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <mapWorld+0x60>
    1b8a:	c0 c0       	rjmp	.+384    	; 0x1d0c <mapWorld+0x1e0>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1b8c:	8d b7       	in	r24, 0x3d	; 61
    1b8e:	9e b7       	in	r25, 0x3e	; 62
    1b90:	08 97       	sbiw	r24, 0x08	; 8
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	9e bf       	out	0x3e, r25	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	8d bf       	out	0x3d, r24	; 61
    1b9c:	ed b7       	in	r30, 0x3d	; 61
    1b9e:	fe b7       	in	r31, 0x3e	; 62
    1ba0:	31 96       	adiw	r30, 0x01	; 1
    1ba2:	84 e2       	ldi	r24, 0x24	; 36
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	ad b7       	in	r26, 0x3d	; 61
    1ba8:	be b7       	in	r27, 0x3e	; 62
    1baa:	12 96       	adiw	r26, 0x02	; 2
    1bac:	9c 93       	st	X, r25
    1bae:	8e 93       	st	-X, r24
    1bb0:	11 97       	sbiw	r26, 0x01	; 1
    1bb2:	80 91 97 04 	lds	r24, 0x0497
    1bb6:	82 83       	std	Z+2, r24	; 0x02
    1bb8:	13 82       	std	Z+3, r1	; 0x03
    1bba:	80 91 96 04 	lds	r24, 0x0496
    1bbe:	84 83       	std	Z+4, r24	; 0x04
    1bc0:	15 82       	std	Z+5, r1	; 0x05
    1bc2:	80 91 9c 04 	lds	r24, 0x049C
    1bc6:	86 83       	std	Z+6, r24	; 0x06
    1bc8:	17 82       	std	Z+7, r1	; 0x07
    1bca:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.8/5.0), 10, 10, 0);
    1bce:	ed b7       	in	r30, 0x3d	; 61
    1bd0:	fe b7       	in	r31, 0x3e	; 62
    1bd2:	38 96       	adiw	r30, 0x08	; 8
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	fe bf       	out	0x3e, r31	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	ed bf       	out	0x3d, r30	; 61
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	9f e4       	ldi	r25, 0x4F	; 79
    1be6:	2b e5       	ldi	r18, 0x5B	; 91
    1be8:	33 ed       	ldi	r19, 0xD3	; 211
    1bea:	4c ec       	ldi	r20, 0xCC	; 204
    1bec:	51 e4       	ldi	r21, 0x41	; 65
    1bee:	0f 2e       	mov	r0, r31
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	ef 2e       	mov	r14, r31
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	ff 2e       	mov	r15, r31
    1bf8:	f0 e2       	ldi	r31, 0x20	; 32
    1bfa:	0f 2f       	mov	r16, r31
    1bfc:	f1 e4       	ldi	r31, 0x41	; 65
    1bfe:	1f 2f       	mov	r17, r31
    1c00:	f0 2d       	mov	r31, r0
    1c02:	57 01       	movw	r10, r14
    1c04:	68 01       	movw	r12, r16
    1c06:	88 24       	eor	r8, r8
    1c08:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <move_arc_stwt>
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	44 e8       	ldi	r20, 0x84	; 132
    1c1a:	51 ec       	ldi	r21, 0xC1	; 193
    1c1c:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <move_arc_stwt>
			move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	9f e4       	ldi	r25, 0x4F	; 79
    1c28:	28 e4       	ldi	r18, 0x48	; 72
    1c2a:	31 ee       	ldi	r19, 0xE1	; 225
    1c2c:	46 e3       	ldi	r20, 0x36	; 54
    1c2e:	52 e4       	ldi	r21, 0x42	; 66
    1c30:	6a c0       	rjmp	.+212    	; 0x1d06 <mapWorld+0x1da>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1c32:	8d b7       	in	r24, 0x3d	; 61
    1c34:	9e b7       	in	r25, 0x3e	; 62
    1c36:	08 97       	sbiw	r24, 0x08	; 8
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	9e bf       	out	0x3e, r25	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	8d bf       	out	0x3d, r24	; 61
    1c42:	ed b7       	in	r30, 0x3d	; 61
    1c44:	fe b7       	in	r31, 0x3e	; 62
    1c46:	31 96       	adiw	r30, 0x01	; 1
    1c48:	8f e4       	ldi	r24, 0x4F	; 79
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	ad b7       	in	r26, 0x3d	; 61
    1c4e:	be b7       	in	r27, 0x3e	; 62
    1c50:	12 96       	adiw	r26, 0x02	; 2
    1c52:	9c 93       	st	X, r25
    1c54:	8e 93       	st	-X, r24
    1c56:	11 97       	sbiw	r26, 0x01	; 1
    1c58:	80 91 97 04 	lds	r24, 0x0497
    1c5c:	82 83       	std	Z+2, r24	; 0x02
    1c5e:	13 82       	std	Z+3, r1	; 0x03
    1c60:	80 91 96 04 	lds	r24, 0x0496
    1c64:	84 83       	std	Z+4, r24	; 0x04
    1c66:	15 82       	std	Z+5, r1	; 0x05
    1c68:	80 91 9c 04 	lds	r24, 0x049C
    1c6c:	86 83       	std	Z+6, r24	; 0x06
    1c6e:	17 82       	std	Z+7, r1	; 0x07
    1c70:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    1c74:	ed b7       	in	r30, 0x3d	; 61
    1c76:	fe b7       	in	r31, 0x3e	; 62
    1c78:	38 96       	adiw	r30, 0x08	; 8
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	fe bf       	out	0x3e, r31	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	ed bf       	out	0x3d, r30	; 61
    1c84:	0e 94 96 08 	call	0x112c	; 0x112c <moveWall>
    1c88:	52 c0       	rjmp	.+164    	; 0x1d2e <mapWorld+0x202>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1c8a:	8d b7       	in	r24, 0x3d	; 61
    1c8c:	9e b7       	in	r25, 0x3e	; 62
    1c8e:	08 97       	sbiw	r24, 0x08	; 8
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	9e bf       	out	0x3e, r25	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	8d bf       	out	0x3d, r24	; 61
    1c9a:	ed b7       	in	r30, 0x3d	; 61
    1c9c:	fe b7       	in	r31, 0x3e	; 62
    1c9e:	31 96       	adiw	r30, 0x01	; 1
    1ca0:	8d e7       	ldi	r24, 0x7D	; 125
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	ad b7       	in	r26, 0x3d	; 61
    1ca6:	be b7       	in	r27, 0x3e	; 62
    1ca8:	12 96       	adiw	r26, 0x02	; 2
    1caa:	9c 93       	st	X, r25
    1cac:	8e 93       	st	-X, r24
    1cae:	11 97       	sbiw	r26, 0x01	; 1
    1cb0:	80 91 97 04 	lds	r24, 0x0497
    1cb4:	82 83       	std	Z+2, r24	; 0x02
    1cb6:	13 82       	std	Z+3, r1	; 0x03
    1cb8:	80 91 96 04 	lds	r24, 0x0496
    1cbc:	84 83       	std	Z+4, r24	; 0x04
    1cbe:	15 82       	std	Z+5, r1	; 0x05
    1cc0:	80 91 9c 04 	lds	r24, 0x049C
    1cc4:	86 83       	std	Z+6, r24	; 0x06
    1cc6:	17 82       	std	Z+7, r1	; 0x07
    1cc8:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1ccc:	ed b7       	in	r30, 0x3d	; 61
    1cce:	fe b7       	in	r31, 0x3e	; 62
    1cd0:	38 96       	adiw	r30, 0x08	; 8
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	fe bf       	out	0x3e, r31	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	ed bf       	out	0x3d, r30	; 61
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	44 e8       	ldi	r20, 0x84	; 132
    1cea:	51 e4       	ldi	r21, 0x41	; 65
    1cec:	0f 2e       	mov	r0, r31
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	ef 2e       	mov	r14, r31
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	ff 2e       	mov	r15, r31
    1cf6:	f0 e2       	ldi	r31, 0x20	; 32
    1cf8:	0f 2f       	mov	r16, r31
    1cfa:	f1 e4       	ldi	r31, 0x41	; 65
    1cfc:	1f 2f       	mov	r17, r31
    1cfe:	f0 2d       	mov	r31, r0
    1d00:	57 01       	movw	r10, r14
    1d02:	68 01       	movw	r12, r16
    1d04:	88 24       	eor	r8, r8
    1d06:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <move_arc_stwt>
    1d0a:	11 c0       	rjmp	.+34     	; 0x1d2e <mapWorld+0x202>
			break;
		default:
			LCD_printf("What?!");
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <mapWorld+0x1e2>
    1d0e:	89 ea       	ldi	r24, 0xA9	; 169
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	ad b7       	in	r26, 0x3d	; 61
    1d14:	be b7       	in	r27, 0x3e	; 62
    1d16:	12 96       	adiw	r26, 0x02	; 2
    1d18:	9c 93       	st	X, r25
    1d1a:	8e 93       	st	-X, r24
    1d1c:	11 97       	sbiw	r26, 0x01	; 1
    1d1e:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <STEPPER_stop>
			break;
	}
	
	// TMRSRVC_delay(1000);//wait 1 seconds
	return 1;
}
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	df 90       	pop	r13
    1d3a:	cf 90       	pop	r12
    1d3c:	bf 90       	pop	r11
    1d3e:	af 90       	pop	r10
    1d40:	8f 90       	pop	r8
    1d42:	08 95       	ret

00001d44 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot){
    1d44:	bf 92       	push	r11
    1d46:	cf 92       	push	r12
    1d48:	df 92       	push	r13
    1d4a:	ef 92       	push	r14
    1d4c:	ff 92       	push	r15
    1d4e:	0f 93       	push	r16
    1d50:	1f 93       	push	r17
    1d52:	f8 2e       	mov	r15, r24
    1d54:	d6 2e       	mov	r13, r22
    1d56:	04 2f       	mov	r16, r20
    1d58:	b2 2e       	mov	r11, r18

	r = r*LCD_CELL_OFFSET;
    1d5a:	dd 0c       	add	r13, r13
    1d5c:	dd 0c       	add	r13, r13
    1d5e:	dd 0c       	add	r13, r13
	c = c*LCD_CELL_OFFSET;
    1d60:	10 e0       	ldi	r17, 0x00	; 0
    1d62:	33 e0       	ldi	r19, 0x03	; 3
    1d64:	00 0f       	add	r16, r16
    1d66:	11 1f       	adc	r17, r17
    1d68:	3a 95       	dec	r19
    1d6a:	e1 f7       	brne	.-8      	; 0x1d64 <printCell+0x20>
    1d6c:	e0 2e       	mov	r14, r16
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1d6e:	1f e1       	ldi	r17, 0x1F	; 31
    1d70:	1d 19       	sub	r17, r13
    1d72:	81 2f       	mov	r24, r17
    1d74:	60 2f       	mov	r22, r16
    1d76:	41 e0       	ldi	r20, 0x01	; 1
    1d78:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1d7c:	28 e1       	ldi	r18, 0x18	; 24
    1d7e:	c2 2e       	mov	r12, r18
    1d80:	cd 18       	sub	r12, r13
    1d82:	8c 2d       	mov	r24, r12
    1d84:	60 2f       	mov	r22, r16
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1d8c:	09 5f       	subi	r16, 0xF9	; 249
    1d8e:	81 2f       	mov	r24, r17
    1d90:	60 2f       	mov	r22, r16
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1d98:	8c 2d       	mov	r24, r12
    1d9a:	60 2f       	mov	r22, r16
    1d9c:	41 e0       	ldi	r20, 0x01	; 1
    1d9e:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
	
	if(cell&0b1000){
    1da2:	f3 fe       	sbrs	r15, 3
    1da4:	24 c0       	rjmp	.+72     	; 0x1dee <printCell+0xaa>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1da6:	6e 2d       	mov	r22, r14
    1da8:	6f 5f       	subi	r22, 0xFF	; 255
    1daa:	81 2f       	mov	r24, r17
    1dac:	41 e0       	ldi	r20, 0x01	; 1
    1dae:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1db2:	6e 2d       	mov	r22, r14
    1db4:	6e 5f       	subi	r22, 0xFE	; 254
    1db6:	81 2f       	mov	r24, r17
    1db8:	41 e0       	ldi	r20, 0x01	; 1
    1dba:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1dbe:	6e 2d       	mov	r22, r14
    1dc0:	6d 5f       	subi	r22, 0xFD	; 253
    1dc2:	81 2f       	mov	r24, r17
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1dca:	6e 2d       	mov	r22, r14
    1dcc:	6c 5f       	subi	r22, 0xFC	; 252
    1dce:	81 2f       	mov	r24, r17
    1dd0:	41 e0       	ldi	r20, 0x01	; 1
    1dd2:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1dd6:	6e 2d       	mov	r22, r14
    1dd8:	6b 5f       	subi	r22, 0xFB	; 251
    1dda:	81 2f       	mov	r24, r17
    1ddc:	41 e0       	ldi	r20, 0x01	; 1
    1dde:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1de2:	6e 2d       	mov	r22, r14
    1de4:	6a 5f       	subi	r22, 0xFA	; 250
    1de6:	81 2f       	mov	r24, r17
    1de8:	41 e0       	ldi	r20, 0x01	; 1
    1dea:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
	}
	if(cell&0b0100){
    1dee:	f2 fe       	sbrs	r15, 2
    1df0:	25 c0       	rjmp	.+74     	; 0x1e3c <printCell+0xf8>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1df2:	8d 2d       	mov	r24, r13
    1df4:	80 95       	com	r24
    1df6:	81 5e       	subi	r24, 0xE1	; 225
    1df8:	60 2f       	mov	r22, r16
    1dfa:	41 e0       	ldi	r20, 0x01	; 1
    1dfc:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1e00:	8d e1       	ldi	r24, 0x1D	; 29
    1e02:	8d 19       	sub	r24, r13
    1e04:	60 2f       	mov	r22, r16
    1e06:	41 e0       	ldi	r20, 0x01	; 1
    1e08:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1e0c:	8c e1       	ldi	r24, 0x1C	; 28
    1e0e:	8d 19       	sub	r24, r13
    1e10:	60 2f       	mov	r22, r16
    1e12:	41 e0       	ldi	r20, 0x01	; 1
    1e14:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1e18:	8b e1       	ldi	r24, 0x1B	; 27
    1e1a:	8d 19       	sub	r24, r13
    1e1c:	60 2f       	mov	r22, r16
    1e1e:	41 e0       	ldi	r20, 0x01	; 1
    1e20:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1e24:	8a e1       	ldi	r24, 0x1A	; 26
    1e26:	8d 19       	sub	r24, r13
    1e28:	60 2f       	mov	r22, r16
    1e2a:	41 e0       	ldi	r20, 0x01	; 1
    1e2c:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1e30:	89 e1       	ldi	r24, 0x19	; 25
    1e32:	8d 19       	sub	r24, r13
    1e34:	60 2f       	mov	r22, r16
    1e36:	41 e0       	ldi	r20, 0x01	; 1
    1e38:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
	}
	if(cell&0b0010){
    1e3c:	f1 fe       	sbrs	r15, 1
    1e3e:	24 c0       	rjmp	.+72     	; 0x1e88 <printCell+0x144>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1e40:	6e 2d       	mov	r22, r14
    1e42:	6f 5f       	subi	r22, 0xFF	; 255
    1e44:	8c 2d       	mov	r24, r12
    1e46:	41 e0       	ldi	r20, 0x01	; 1
    1e48:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1e4c:	6e 2d       	mov	r22, r14
    1e4e:	6e 5f       	subi	r22, 0xFE	; 254
    1e50:	8c 2d       	mov	r24, r12
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1e58:	6e 2d       	mov	r22, r14
    1e5a:	6d 5f       	subi	r22, 0xFD	; 253
    1e5c:	8c 2d       	mov	r24, r12
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1e64:	6e 2d       	mov	r22, r14
    1e66:	6c 5f       	subi	r22, 0xFC	; 252
    1e68:	8c 2d       	mov	r24, r12
    1e6a:	41 e0       	ldi	r20, 0x01	; 1
    1e6c:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1e70:	6e 2d       	mov	r22, r14
    1e72:	6b 5f       	subi	r22, 0xFB	; 251
    1e74:	8c 2d       	mov	r24, r12
    1e76:	41 e0       	ldi	r20, 0x01	; 1
    1e78:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1e7c:	6e 2d       	mov	r22, r14
    1e7e:	6a 5f       	subi	r22, 0xFA	; 250
    1e80:	8c 2d       	mov	r24, r12
    1e82:	41 e0       	ldi	r20, 0x01	; 1
    1e84:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
	}
	if(cell&0b0001){
    1e88:	f0 fe       	sbrs	r15, 0
    1e8a:	25 c0       	rjmp	.+74     	; 0x1ed6 <printCell+0x192>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1e8c:	8d 2d       	mov	r24, r13
    1e8e:	80 95       	com	r24
    1e90:	81 5e       	subi	r24, 0xE1	; 225
    1e92:	6e 2d       	mov	r22, r14
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1e9a:	8d e1       	ldi	r24, 0x1D	; 29
    1e9c:	8d 19       	sub	r24, r13
    1e9e:	6e 2d       	mov	r22, r14
    1ea0:	41 e0       	ldi	r20, 0x01	; 1
    1ea2:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1ea6:	8c e1       	ldi	r24, 0x1C	; 28
    1ea8:	8d 19       	sub	r24, r13
    1eaa:	6e 2d       	mov	r22, r14
    1eac:	41 e0       	ldi	r20, 0x01	; 1
    1eae:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1eb2:	8b e1       	ldi	r24, 0x1B	; 27
    1eb4:	8d 19       	sub	r24, r13
    1eb6:	6e 2d       	mov	r22, r14
    1eb8:	41 e0       	ldi	r20, 0x01	; 1
    1eba:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1ebe:	8a e1       	ldi	r24, 0x1A	; 26
    1ec0:	8d 19       	sub	r24, r13
    1ec2:	6e 2d       	mov	r22, r14
    1ec4:	41 e0       	ldi	r20, 0x01	; 1
    1ec6:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1eca:	89 e1       	ldi	r24, 0x19	; 25
    1ecc:	8d 19       	sub	r24, r13
    1ece:	6e 2d       	mov	r22, r14
    1ed0:	41 e0       	ldi	r20, 0x01	; 1
    1ed2:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
	}	
	if(isrobot){
    1ed6:	bb 20       	and	r11, r11
    1ed8:	f1 f0       	breq	.+60     	; 0x1f16 <printCell+0x1d2>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1eda:	0c e1       	ldi	r16, 0x1C	; 28
    1edc:	0d 19       	sub	r16, r13
    1ede:	93 e0       	ldi	r25, 0x03	; 3
    1ee0:	f9 2e       	mov	r15, r25
    1ee2:	fe 0c       	add	r15, r14
    1ee4:	80 2f       	mov	r24, r16
    1ee6:	6f 2d       	mov	r22, r15
    1ee8:	4b 2d       	mov	r20, r11
    1eea:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1eee:	1b e1       	ldi	r17, 0x1B	; 27
    1ef0:	1d 19       	sub	r17, r13
    1ef2:	81 2f       	mov	r24, r17
    1ef4:	6f 2d       	mov	r22, r15
    1ef6:	4b 2d       	mov	r20, r11
    1ef8:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1efc:	84 e0       	ldi	r24, 0x04	; 4
    1efe:	f8 2e       	mov	r15, r24
    1f00:	fe 0c       	add	r15, r14
    1f02:	80 2f       	mov	r24, r16
    1f04:	6f 2d       	mov	r22, r15
    1f06:	4b 2d       	mov	r20, r11
    1f08:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1f0c:	81 2f       	mov	r24, r17
    1f0e:	6f 2d       	mov	r22, r15
    1f10:	4b 2d       	mov	r20, r11
    1f12:	0e 94 cd 17 	call	0x2f9a	; 0x2f9a <LCD_set_pixel>
	}
}
    1f16:	1f 91       	pop	r17
    1f18:	0f 91       	pop	r16
    1f1a:	ff 90       	pop	r15
    1f1c:	ef 90       	pop	r14
    1f1e:	df 90       	pop	r13
    1f20:	cf 90       	pop	r12
    1f22:	bf 90       	pop	r11
    1f24:	08 95       	ret

00001f26 <printMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(void)
{
    1f26:	af 92       	push	r10
    1f28:	bf 92       	push	r11
    1f2a:	df 92       	push	r13
    1f2c:	ef 92       	push	r14
    1f2e:	ff 92       	push	r15
    1f30:	0f 93       	push	r16
    1f32:	1f 93       	push	r17
    1f34:	df 93       	push	r29
    1f36:	cf 93       	push	r28
    1f38:	0f 92       	push	r0
    1f3a:	cd b7       	in	r28, 0x3d	; 61
    1f3c:	de b7       	in	r29, 0x3e	; 62
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    1f3e:	80 91 b8 07 	lds	r24, 0x07B8
    1f42:	d8 2e       	mov	r13, r24
    1f44:	d6 94       	lsr	r13
    1f46:	d6 94       	lsr	r13
	unsigned char curCol = currentCellWorld & 0b0011;
    1f48:	53 e0       	ldi	r21, 0x03	; 3
    1f4a:	e5 2e       	mov	r14, r21
    1f4c:	e8 22       	and	r14, r24
    1f4e:	00 e0       	ldi	r16, 0x00	; 0
    1f50:	10 e0       	ldi	r17, 0x00	; 0
    1f52:	1e c0       	rjmp	.+60     	; 0x1f90 <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    1f54:	f5 01       	movw	r30, r10
    1f56:	80 81       	ld	r24, Z
			isrobot = (r == curRow)&&(c == curCol);
    1f58:	fd 14       	cp	r15, r13
    1f5a:	19 f0       	breq	.+6      	; 0x1f62 <printMap+0x3c>
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	06 c0       	rjmp	.+12     	; 0x1f6e <printMap+0x48>
    1f62:	20 e0       	ldi	r18, 0x00	; 0
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	9e 15       	cp	r25, r14
    1f68:	11 f4       	brne	.+4      	; 0x1f6e <printMap+0x48>
    1f6a:	21 e0       	ldi	r18, 0x01	; 1
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot);
    1f6e:	6f 2d       	mov	r22, r15
    1f70:	49 2f       	mov	r20, r25
    1f72:	99 83       	std	Y+1, r25	; 0x01
    1f74:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    1f78:	99 81       	ldd	r25, Y+1	; 0x01
    1f7a:	9f 5f       	subi	r25, 0xFF	; 255
    1f7c:	08 94       	sec
    1f7e:	a1 1c       	adc	r10, r1
    1f80:	b1 1c       	adc	r11, r1
    1f82:	94 30       	cpi	r25, 0x04	; 4
    1f84:	39 f7       	brne	.-50     	; 0x1f54 <printMap+0x2e>
    1f86:	0f 5f       	subi	r16, 0xFF	; 255
    1f88:	1f 4f       	sbci	r17, 0xFF	; 255
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    1f8a:	04 30       	cpi	r16, 0x04	; 4
    1f8c:	11 05       	cpc	r17, r1
    1f8e:	61 f0       	breq	.+24     	; 0x1fa8 <printMap+0x82>
    1f90:	f0 2e       	mov	r15, r16
    1f92:	58 01       	movw	r10, r16
    1f94:	aa 0c       	add	r10, r10
    1f96:	bb 1c       	adc	r11, r11
    1f98:	aa 0c       	add	r10, r10
    1f9a:	bb 1c       	adc	r11, r11
    1f9c:	86 e2       	ldi	r24, 0x26	; 38
    1f9e:	95 e0       	ldi	r25, 0x05	; 5
    1fa0:	a8 0e       	add	r10, r24
    1fa2:	b9 1e       	adc	r11, r25
    1fa4:	90 e0       	ldi	r25, 0x00	; 0
    1fa6:	d6 cf       	rjmp	.-84     	; 0x1f54 <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot);
		}	
	}
}
    1fa8:	0f 90       	pop	r0
    1faa:	cf 91       	pop	r28
    1fac:	df 91       	pop	r29
    1fae:	1f 91       	pop	r17
    1fb0:	0f 91       	pop	r16
    1fb2:	ff 90       	pop	r15
    1fb4:	ef 90       	pop	r14
    1fb6:	df 90       	pop	r13
    1fb8:	bf 90       	pop	r11
    1fba:	af 90       	pop	r10
    1fbc:	08 95       	ret

00001fbe <CBOT_main>:

void CBOT_main( void )
{
	// initialize the robot
	
	initializeRobot();
    1fbe:	0e 94 2d 18 	call	0x305a	; 0x305a <initializeRobot>
	printMap();
    1fc2:	0e 94 93 0f 	call	0x1f26	; 0x1f26 <printMap>
	TMRSRVC_delay(1000);//wait 1 seconds
    1fc6:	88 ee       	ldi	r24, 0xE8	; 232
    1fc8:	93 e0       	ldi	r25, 0x03	; 3
    1fca:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
	LCD_clear();	
    1fce:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
	
	
	
	// Enter the robot's current (starting) position
	LCD_printf("START Map/nlocation\n\n\n");	
    1fd2:	88 ee       	ldi	r24, 0xE8	; 232
    1fd4:	92 e0       	ldi	r25, 0x02	; 2
    1fd6:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1fda:	88 ee       	ldi	r24, 0xE8	; 232
    1fdc:	93 e0       	ldi	r25, 0x03	; 3
    1fde:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
	LCD_clear();
    1fe2:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
	worldInput();
    1fe6:	0e 94 cf 0b 	call	0x179e	; 0x179e <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1fea:	88 ee       	ldi	r24, 0xE8	; 232
    1fec:	93 e0       	ldi	r25, 0x03	; 3
    1fee:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
	LCD_clear();
    1ff2:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Map/norientation\n\n\n");	
    1ff6:	8e ef       	ldi	r24, 0xFE	; 254
    1ff8:	92 e0       	ldi	r25, 0x02	; 2
    1ffa:	0e 94 e3 35 	call	0x6bc6	; 0x6bc6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1ffe:	88 ee       	ldi	r24, 0xE8	; 232
    2000:	93 e0       	ldi	r25, 0x03	; 3
    2002:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
	LCD_clear();
    2006:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
	orientationInput();
    200a:	0e 94 12 0c 	call	0x1824	; 0x1824 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    200e:	88 ee       	ldi	r24, 0xE8	; 232
    2010:	93 e0       	ldi	r25, 0x03	; 3
    2012:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
	LCD_clear();
    2016:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
	
	odometryTrigger = WORLD_RESOLUTION_SIZE;
    201a:	8d e2       	ldi	r24, 0x2D	; 45
    201c:	80 93 15 05 	sts	0x0515, r24
	isMapping = 1;
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	80 93 4d 08 	sts	0x084D, r24
		
		
	// Infinite loop
	while (1)
    {
		checkIR();	
    2026:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <checkIR>
    202a:	fd cf       	rjmp	.-6      	; 0x2026 <CBOT_main+0x68>

0000202c <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
    202c:	2f 92       	push	r2
    202e:	3f 92       	push	r3
    2030:	4f 92       	push	r4
    2032:	5f 92       	push	r5
    2034:	6f 92       	push	r6
    2036:	7f 92       	push	r7
    2038:	8f 92       	push	r8
    203a:	9f 92       	push	r9
    203c:	af 92       	push	r10
    203e:	bf 92       	push	r11
    2040:	cf 92       	push	r12
    2042:	df 92       	push	r13
    2044:	ef 92       	push	r14
    2046:	ff 92       	push	r15
    2048:	0f 93       	push	r16
    204a:	1f 93       	push	r17
    204c:	df 93       	push	r29
    204e:	cf 93       	push	r28
    2050:	cd b7       	in	r28, 0x3d	; 61
    2052:	de b7       	in	r29, 0x3e	; 62
    2054:	64 97       	sbiw	r28, 0x14	; 20
    2056:	0f b6       	in	r0, 0x3f	; 63
    2058:	f8 94       	cli
    205a:	de bf       	out	0x3e, r29	; 62
    205c:	0f be       	out	0x3f, r0	; 63
    205e:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
    2060:	88 23       	and	r24, r24
    2062:	39 f5       	brne	.+78     	; 0x20b2 <prefilter+0x86>
    2064:	86 e8       	ldi	r24, 0x86	; 134
    2066:	94 e0       	ldi	r25, 0x04	; 4
    2068:	9c 8b       	std	Y+20, r25	; 0x14
    206a:	8b 8b       	std	Y+19, r24	; 0x13
    206c:	a5 e3       	ldi	r26, 0x35	; 53
    206e:	b8 e0       	ldi	r27, 0x08	; 8
    2070:	be 83       	std	Y+6, r27	; 0x06
    2072:	ad 83       	std	Y+5, r26	; 0x05
    2074:	ec ea       	ldi	r30, 0xAC	; 172
    2076:	f5 e0       	ldi	r31, 0x05	; 5
    2078:	fc 83       	std	Y+4, r31	; 0x04
    207a:	eb 83       	std	Y+3, r30	; 0x03
    207c:	8d e0       	ldi	r24, 0x0D	; 13
    207e:	95 e0       	ldi	r25, 0x05	; 5
    2080:	9a 83       	std	Y+2, r25	; 0x02
    2082:	89 83       	std	Y+1, r24	; 0x01
    2084:	0f 2e       	mov	r0, r31
    2086:	f0 e0       	ldi	r31, 0x00	; 0
    2088:	2f 2e       	mov	r2, r31
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	3f 2e       	mov	r3, r31
    208e:	f0 e0       	ldi	r31, 0x00	; 0
    2090:	4f 2e       	mov	r4, r31
    2092:	f0 e0       	ldi	r31, 0x00	; 0
    2094:	5f 2e       	mov	r5, r31
    2096:	f0 2d       	mov	r31, r0
    2098:	2f 86       	std	Y+15, r2	; 0x0f
    209a:	38 8a       	std	Y+16, r3	; 0x10
    209c:	49 8a       	std	Y+17, r4	; 0x11
    209e:	5a 8a       	std	Y+18, r5	; 0x12
    20a0:	2b 86       	std	Y+11, r2	; 0x0b
    20a2:	3c 86       	std	Y+12, r3	; 0x0c
    20a4:	4d 86       	std	Y+13, r4	; 0x0d
    20a6:	5e 86       	std	Y+14, r5	; 0x0e
    20a8:	2f 82       	std	Y+7, r2	; 0x07
    20aa:	38 86       	std	Y+8, r3	; 0x08
    20ac:	49 86       	std	Y+9, r4	; 0x09
    20ae:	5a 86       	std	Y+10, r5	; 0x0a
    20b0:	43 c0       	rjmp	.+134    	; 0x2138 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    20b2:	a0 90 bc 07 	lds	r10, 0x07BC
    20b6:	b0 90 bd 07 	lds	r11, 0x07BD
    20ba:	c0 90 be 07 	lds	r12, 0x07BE
    20be:	d0 90 bf 07 	lds	r13, 0x07BF
			rtIR_old[i] = rtIR;
    20c2:	e0 90 c1 07 	lds	r14, 0x07C1
    20c6:	f0 90 c2 07 	lds	r15, 0x07C2
    20ca:	00 91 c3 07 	lds	r16, 0x07C3
    20ce:	10 91 c4 07 	lds	r17, 0x07C4
			ftIR_old[i] = ftIR;
    20d2:	20 90 8e 04 	lds	r2, 0x048E
    20d6:	30 90 8f 04 	lds	r3, 0x048F
    20da:	40 90 90 04 	lds	r4, 0x0490
    20de:	50 90 91 04 	lds	r5, 0x0491
			bkIR_old[i] = bkIR;
    20e2:	20 91 98 04 	lds	r18, 0x0498
    20e6:	30 91 99 04 	lds	r19, 0x0499
    20ea:	40 91 9a 04 	lds	r20, 0x049A
    20ee:	50 91 9b 04 	lds	r21, 0x049B
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    20f6:	fc 01       	movw	r30, r24
    20f8:	ea 5e       	subi	r30, 0xEA	; 234
    20fa:	fb 4f       	sbci	r31, 0xFB	; 251
    20fc:	a0 82       	st	Z, r10
    20fe:	b1 82       	std	Z+1, r11	; 0x01
    2100:	c2 82       	std	Z+2, r12	; 0x02
    2102:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
    2104:	fc 01       	movw	r30, r24
    2106:	eb 53       	subi	r30, 0x3B	; 59
    2108:	f8 4f       	sbci	r31, 0xF8	; 248
    210a:	e0 82       	st	Z, r14
    210c:	f1 82       	std	Z+1, r15	; 0x01
    210e:	02 83       	std	Z+2, r16	; 0x02
    2110:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
    2112:	fc 01       	movw	r30, r24
    2114:	e4 5c       	subi	r30, 0xC4	; 196
    2116:	fa 4f       	sbci	r31, 0xFA	; 250
    2118:	20 82       	st	Z, r2
    211a:	31 82       	std	Z+1, r3	; 0x01
    211c:	42 82       	std	Z+2, r4	; 0x02
    211e:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
    2120:	fc 01       	movw	r30, r24
    2122:	e3 56       	subi	r30, 0x63	; 99
    2124:	fb 4f       	sbci	r31, 0xFB	; 251
    2126:	20 83       	st	Z, r18
    2128:	31 83       	std	Z+1, r19	; 0x01
    212a:	42 83       	std	Z+2, r20	; 0x02
    212c:	53 83       	std	Z+3, r21	; 0x03
    212e:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
    2130:	88 37       	cpi	r24, 0x78	; 120
    2132:	91 05       	cpc	r25, r1
    2134:	01 f7       	brne	.-64     	; 0x20f6 <prefilter+0xca>
    2136:	96 cf       	rjmp	.-212    	; 0x2064 <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
    2138:	ab 89       	ldd	r26, Y+19	; 0x13
    213a:	bc 89       	ldd	r27, Y+20	; 0x14
    213c:	2d 91       	ld	r18, X+
    213e:	3d 91       	ld	r19, X+
    2140:	4d 91       	ld	r20, X+
    2142:	5c 91       	ld	r21, X
    2144:	13 97       	sbiw	r26, 0x03	; 3
    2146:	fd 01       	movw	r30, r26
    2148:	24 83       	std	Z+4, r18	; 0x04
    214a:	35 83       	std	Z+5, r19	; 0x05
    214c:	46 83       	std	Z+6, r20	; 0x06
    214e:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
    2150:	ad 81       	ldd	r26, Y+5	; 0x05
    2152:	be 81       	ldd	r27, Y+6	; 0x06
    2154:	ed 90       	ld	r14, X+
    2156:	fd 90       	ld	r15, X+
    2158:	0d 91       	ld	r16, X+
    215a:	1c 91       	ld	r17, X
    215c:	13 97       	sbiw	r26, 0x03	; 3
    215e:	fd 01       	movw	r30, r26
    2160:	e4 82       	std	Z+4, r14	; 0x04
    2162:	f5 82       	std	Z+5, r15	; 0x05
    2164:	06 83       	std	Z+6, r16	; 0x06
    2166:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
    2168:	ab 81       	ldd	r26, Y+3	; 0x03
    216a:	bc 81       	ldd	r27, Y+4	; 0x04
    216c:	ad 90       	ld	r10, X+
    216e:	bd 90       	ld	r11, X+
    2170:	cd 90       	ld	r12, X+
    2172:	dc 90       	ld	r13, X
    2174:	13 97       	sbiw	r26, 0x03	; 3
    2176:	fd 01       	movw	r30, r26
    2178:	a4 82       	std	Z+4, r10	; 0x04
    217a:	b5 82       	std	Z+5, r11	; 0x05
    217c:	c6 82       	std	Z+6, r12	; 0x06
    217e:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
    2180:	a9 81       	ldd	r26, Y+1	; 0x01
    2182:	ba 81       	ldd	r27, Y+2	; 0x02
    2184:	6d 90       	ld	r6, X+
    2186:	7d 90       	ld	r7, X+
    2188:	8d 90       	ld	r8, X+
    218a:	9c 90       	ld	r9, X
    218c:	13 97       	sbiw	r26, 0x03	; 3
    218e:	fd 01       	movw	r30, r26
    2190:	64 82       	std	Z+4, r6	; 0x04
    2192:	75 82       	std	Z+5, r7	; 0x05
    2194:	86 82       	std	Z+6, r8	; 0x06
    2196:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
    2198:	c2 01       	movw	r24, r4
    219a:	b1 01       	movw	r22, r2
    219c:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    21a0:	1b 01       	movw	r2, r22
    21a2:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
    21a4:	6f 85       	ldd	r22, Y+15	; 0x0f
    21a6:	78 89       	ldd	r23, Y+16	; 0x10
    21a8:	89 89       	ldd	r24, Y+17	; 0x11
    21aa:	9a 89       	ldd	r25, Y+18	; 0x12
    21ac:	a8 01       	movw	r20, r16
    21ae:	97 01       	movw	r18, r14
    21b0:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    21b4:	6f 87       	std	Y+15, r22	; 0x0f
    21b6:	78 8b       	std	Y+16, r23	; 0x10
    21b8:	89 8b       	std	Y+17, r24	; 0x11
    21ba:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
    21bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    21be:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c4:	a6 01       	movw	r20, r12
    21c6:	95 01       	movw	r18, r10
    21c8:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    21cc:	6b 87       	std	Y+11, r22	; 0x0b
    21ce:	7c 87       	std	Y+12, r23	; 0x0c
    21d0:	8d 87       	std	Y+13, r24	; 0x0d
    21d2:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
    21d4:	6f 81       	ldd	r22, Y+7	; 0x07
    21d6:	78 85       	ldd	r23, Y+8	; 0x08
    21d8:	89 85       	ldd	r24, Y+9	; 0x09
    21da:	9a 85       	ldd	r25, Y+10	; 0x0a
    21dc:	a4 01       	movw	r20, r8
    21de:	93 01       	movw	r18, r6
    21e0:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    21e4:	6f 83       	std	Y+7, r22	; 0x07
    21e6:	78 87       	std	Y+8, r23	; 0x08
    21e8:	89 87       	std	Y+9, r24	; 0x09
    21ea:	9a 87       	std	Y+10, r25	; 0x0a
    21ec:	8b 89       	ldd	r24, Y+19	; 0x13
    21ee:	9c 89       	ldd	r25, Y+20	; 0x14
    21f0:	04 97       	sbiw	r24, 0x04	; 4
    21f2:	9c 8b       	std	Y+20, r25	; 0x14
    21f4:	8b 8b       	std	Y+19, r24	; 0x13
    21f6:	ad 81       	ldd	r26, Y+5	; 0x05
    21f8:	be 81       	ldd	r27, Y+6	; 0x06
    21fa:	14 97       	sbiw	r26, 0x04	; 4
    21fc:	be 83       	std	Y+6, r27	; 0x06
    21fe:	ad 83       	std	Y+5, r26	; 0x05
    2200:	eb 81       	ldd	r30, Y+3	; 0x03
    2202:	fc 81       	ldd	r31, Y+4	; 0x04
    2204:	34 97       	sbiw	r30, 0x04	; 4
    2206:	fc 83       	std	Y+4, r31	; 0x04
    2208:	eb 83       	std	Y+3, r30	; 0x03
    220a:	89 81       	ldd	r24, Y+1	; 0x01
    220c:	9a 81       	ldd	r25, Y+2	; 0x02
    220e:	04 97       	sbiw	r24, 0x04	; 4
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
    2214:	ab 89       	ldd	r26, Y+19	; 0x13
    2216:	bc 89       	ldd	r27, Y+20	; 0x14
    2218:	ae 50       	subi	r26, 0x0E	; 14
    221a:	b4 40       	sbci	r27, 0x04	; 4
    221c:	09 f0       	breq	.+2      	; 0x2220 <prefilter+0x1f4>
    221e:	8c cf       	rjmp	.-232    	; 0x2138 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
    2220:	80 91 bc 07 	lds	r24, 0x07BC
    2224:	90 91 bd 07 	lds	r25, 0x07BD
    2228:	a0 91 be 07 	lds	r26, 0x07BE
    222c:	b0 91 bf 07 	lds	r27, 0x07BF
    2230:	eb 89       	ldd	r30, Y+19	; 0x13
    2232:	fc 89       	ldd	r31, Y+20	; 0x14
    2234:	80 87       	std	Z+8, r24	; 0x08
    2236:	91 87       	std	Z+9, r25	; 0x09
    2238:	a2 87       	std	Z+10, r26	; 0x0a
    223a:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
    223c:	80 91 c1 07 	lds	r24, 0x07C1
    2240:	90 91 c2 07 	lds	r25, 0x07C2
    2244:	a0 91 c3 07 	lds	r26, 0x07C3
    2248:	b0 91 c4 07 	lds	r27, 0x07C4
    224c:	80 93 c5 07 	sts	0x07C5, r24
    2250:	90 93 c6 07 	sts	0x07C6, r25
    2254:	a0 93 c7 07 	sts	0x07C7, r26
    2258:	b0 93 c8 07 	sts	0x07C8, r27
	ftIR_old[0] = ftIR;
    225c:	80 91 8e 04 	lds	r24, 0x048E
    2260:	90 91 8f 04 	lds	r25, 0x048F
    2264:	a0 91 90 04 	lds	r26, 0x0490
    2268:	b0 91 91 04 	lds	r27, 0x0491
    226c:	80 93 3c 05 	sts	0x053C, r24
    2270:	90 93 3d 05 	sts	0x053D, r25
    2274:	a0 93 3e 05 	sts	0x053E, r26
    2278:	b0 93 3f 05 	sts	0x053F, r27
	bkIR_old[0] = bkIR;
    227c:	80 91 98 04 	lds	r24, 0x0498
    2280:	90 91 99 04 	lds	r25, 0x0499
    2284:	a0 91 9a 04 	lds	r26, 0x049A
    2288:	b0 91 9b 04 	lds	r27, 0x049B
    228c:	80 93 9d 04 	sts	0x049D, r24
    2290:	90 93 9e 04 	sts	0x049E, r25
    2294:	a0 93 9f 04 	sts	0x049F, r26
    2298:	b0 93 a0 04 	sts	0x04A0, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
    229c:	c2 01       	movw	r24, r4
    229e:	b1 01       	movw	r22, r2
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	40 ef       	ldi	r20, 0xF0	; 240
    22a6:	51 e4       	ldi	r21, 0x41	; 65
    22a8:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    22ac:	60 93 bc 07 	sts	0x07BC, r22
    22b0:	70 93 bd 07 	sts	0x07BD, r23
    22b4:	80 93 be 07 	sts	0x07BE, r24
    22b8:	90 93 bf 07 	sts	0x07BF, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
    22bc:	6f 85       	ldd	r22, Y+15	; 0x0f
    22be:	78 89       	ldd	r23, Y+16	; 0x10
    22c0:	89 89       	ldd	r24, Y+17	; 0x11
    22c2:	9a 89       	ldd	r25, Y+18	; 0x12
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 ef       	ldi	r20, 0xF0	; 240
    22ca:	51 e4       	ldi	r21, 0x41	; 65
    22cc:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    22d0:	60 93 c1 07 	sts	0x07C1, r22
    22d4:	70 93 c2 07 	sts	0x07C2, r23
    22d8:	80 93 c3 07 	sts	0x07C3, r24
    22dc:	90 93 c4 07 	sts	0x07C4, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
    22e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	30 e0       	ldi	r19, 0x00	; 0
    22ec:	40 ef       	ldi	r20, 0xF0	; 240
    22ee:	51 e4       	ldi	r21, 0x41	; 65
    22f0:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    22f4:	60 93 8e 04 	sts	0x048E, r22
    22f8:	70 93 8f 04 	sts	0x048F, r23
    22fc:	80 93 90 04 	sts	0x0490, r24
    2300:	90 93 91 04 	sts	0x0491, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
    2304:	6f 81       	ldd	r22, Y+7	; 0x07
    2306:	78 85       	ldd	r23, Y+8	; 0x08
    2308:	89 85       	ldd	r24, Y+9	; 0x09
    230a:	9a 85       	ldd	r25, Y+10	; 0x0a
    230c:	20 e0       	ldi	r18, 0x00	; 0
    230e:	30 e0       	ldi	r19, 0x00	; 0
    2310:	40 ef       	ldi	r20, 0xF0	; 240
    2312:	51 e4       	ldi	r21, 0x41	; 65
    2314:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2318:	60 93 98 04 	sts	0x0498, r22
    231c:	70 93 99 04 	sts	0x0499, r23
    2320:	80 93 9a 04 	sts	0x049A, r24
    2324:	90 93 9b 04 	sts	0x049B, r25
}
    2328:	64 96       	adiw	r28, 0x14	; 20
    232a:	0f b6       	in	r0, 0x3f	; 63
    232c:	f8 94       	cli
    232e:	de bf       	out	0x3e, r29	; 62
    2330:	0f be       	out	0x3f, r0	; 63
    2332:	cd bf       	out	0x3d, r28	; 61
    2334:	cf 91       	pop	r28
    2336:	df 91       	pop	r29
    2338:	1f 91       	pop	r17
    233a:	0f 91       	pop	r16
    233c:	ff 90       	pop	r15
    233e:	ef 90       	pop	r14
    2340:	df 90       	pop	r13
    2342:	cf 90       	pop	r12
    2344:	bf 90       	pop	r11
    2346:	af 90       	pop	r10
    2348:	9f 90       	pop	r9
    234a:	8f 90       	pop	r8
    234c:	7f 90       	pop	r7
    234e:	6f 90       	pop	r6
    2350:	5f 90       	pop	r5
    2352:	4f 90       	pop	r4
    2354:	3f 90       	pop	r3
    2356:	2f 90       	pop	r2
    2358:	08 95       	ret

0000235a <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
    235a:	af 92       	push	r10
    235c:	bf 92       	push	r11
    235e:	cf 92       	push	r12
    2360:	df 92       	push	r13
    2362:	ef 92       	push	r14
    2364:	ff 92       	push	r15
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	7b 01       	movw	r14, r22
    236c:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
    236e:	44 23       	and	r20, r20
    2370:	61 f0       	breq	.+24     	; 0x238a <pidController+0x30>
		Ierror = 0;
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a0 e0       	ldi	r26, 0x00	; 0
    2378:	b0 e0       	ldi	r27, 0x00	; 0
    237a:	80 93 92 04 	sts	0x0492, r24
    237e:	90 93 93 04 	sts	0x0493, r25
    2382:	a0 93 94 04 	sts	0x0494, r26
    2386:	b0 93 95 04 	sts	0x0495, r27
	}
	// At the current error to the running sum
	Ierror += error;
    238a:	c8 01       	movw	r24, r16
    238c:	b7 01       	movw	r22, r14
    238e:	20 91 92 04 	lds	r18, 0x0492
    2392:	30 91 93 04 	lds	r19, 0x0493
    2396:	40 91 94 04 	lds	r20, 0x0494
    239a:	50 91 95 04 	lds	r21, 0x0495
    239e:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    23a2:	5b 01       	movw	r10, r22
    23a4:	6c 01       	movw	r12, r24
    23a6:	60 93 92 04 	sts	0x0492, r22
    23aa:	70 93 93 04 	sts	0x0493, r23
    23ae:	80 93 94 04 	sts	0x0494, r24
    23b2:	90 93 95 04 	sts	0x0495, r25
    23b6:	c8 01       	movw	r24, r16
    23b8:	b7 01       	movw	r22, r14
    23ba:	20 91 38 05 	lds	r18, 0x0538
    23be:	30 91 39 05 	lds	r19, 0x0539
    23c2:	40 91 3a 05 	lds	r20, 0x053A
    23c6:	50 91 3b 05 	lds	r21, 0x053B
    23ca:	0e 94 98 2b 	call	0x5730	; 0x5730 <__subsf3>
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	30 e0       	ldi	r19, 0x00	; 0
    23d2:	40 e0       	ldi	r20, 0x00	; 0
    23d4:	50 e0       	ldi	r21, 0x00	; 0
    23d6:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    23da:	9b 01       	movw	r18, r22
    23dc:	ac 01       	movw	r20, r24
    23de:	c8 01       	movw	r24, r16
    23e0:	b7 01       	movw	r22, r14
    23e2:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    23e6:	7b 01       	movw	r14, r22
    23e8:	8c 01       	movw	r16, r24
    23ea:	c6 01       	movw	r24, r12
    23ec:	b5 01       	movw	r22, r10
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	30 e0       	ldi	r19, 0x00	; 0
    23f2:	40 e0       	ldi	r20, 0x00	; 0
    23f4:	50 e0       	ldi	r21, 0x00	; 0
    23f6:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    23fa:	9b 01       	movw	r18, r22
    23fc:	ac 01       	movw	r20, r24
    23fe:	c8 01       	movw	r24, r16
    2400:	b7 01       	movw	r22, r14
    2402:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
    2406:	1f 91       	pop	r17
    2408:	0f 91       	pop	r16
    240a:	ff 90       	pop	r15
    240c:	ef 90       	pop	r14
    240e:	df 90       	pop	r13
    2410:	cf 90       	pop	r12
    2412:	bf 90       	pop	r11
    2414:	af 90       	pop	r10
    2416:	08 95       	ret

00002418 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    2418:	44 23       	and	r20, r20
    241a:	81 f0       	breq	.+32     	; 0x243c <rotateCell+0x24>
    241c:	06 c0       	rjmp	.+12     	; 0x242a <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    241e:	e8 2f       	mov	r30, r24
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	e9 5e       	subi	r30, 0xE9	; 233
    2424:	fc 4f       	sbci	r31, 0xFC	; 252
    2426:	80 81       	ld	r24, Z
			orient--;
    2428:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    242a:	66 23       	and	r22, r22
    242c:	c1 f7       	brne	.-16     	; 0x241e <rotateCell+0x6>
    242e:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    2430:	e8 2f       	mov	r30, r24
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	e9 5d       	subi	r30, 0xD9	; 217
    2436:	fc 4f       	sbci	r31, 0xFC	; 252
    2438:	80 81       	ld	r24, Z
			orient--;
    243a:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    243c:	66 23       	and	r22, r22
    243e:	c1 f7       	brne	.-16     	; 0x2430 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    2440:	08 95       	ret

00002442 <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    2442:	2f 92       	push	r2
    2444:	3f 92       	push	r3
    2446:	4f 92       	push	r4
    2448:	5f 92       	push	r5
    244a:	6f 92       	push	r6
    244c:	7f 92       	push	r7
    244e:	8f 92       	push	r8
    2450:	9f 92       	push	r9
    2452:	af 92       	push	r10
    2454:	bf 92       	push	r11
    2456:	cf 92       	push	r12
    2458:	df 92       	push	r13
    245a:	ef 92       	push	r14
    245c:	ff 92       	push	r15
    245e:	0f 93       	push	r16
    2460:	1f 93       	push	r17
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
    246a:	a0 97       	sbiw	r28, 0x20	; 32
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	2b 01       	movw	r4, r22
    2478:	3c 01       	movw	r6, r24
    247a:	2d 83       	std	Y+5, r18	; 0x05
    247c:	3e 83       	std	Y+6, r19	; 0x06
    247e:	4f 83       	std	Y+7, r20	; 0x07
    2480:	58 87       	std	Y+8, r21	; 0x08
    2482:	e9 86       	std	Y+9, r14	; 0x09
    2484:	fa 86       	std	Y+10, r15	; 0x0a
    2486:	0b 87       	std	Y+11, r16	; 0x0b
    2488:	1c 87       	std	Y+12, r17	; 0x0c
    248a:	ad 86       	std	Y+13, r10	; 0x0d
    248c:	be 86       	std	Y+14, r11	; 0x0e
    248e:	cf 86       	std	Y+15, r12	; 0x0f
    2490:	d8 8a       	std	Y+16, r13	; 0x10
    2492:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    2494:	33 24       	eor	r3, r3
    2496:	ca 01       	movw	r24, r20
    2498:	b9 01       	movw	r22, r18
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e0       	ldi	r20, 0x00	; 0
    24a0:	50 e0       	ldi	r21, 0x00	; 0
    24a2:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__gesf2>
    24a6:	18 16       	cp	r1, r24
    24a8:	14 f4       	brge	.+4      	; 0x24ae <move_arc_stnb+0x6c>
    24aa:	33 24       	eor	r3, r3
    24ac:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    24ae:	6d 81       	ldd	r22, Y+5	; 0x05
    24b0:	7e 81       	ldd	r23, Y+6	; 0x06
    24b2:	8f 81       	ldd	r24, Y+7	; 0x07
    24b4:	98 85       	ldd	r25, Y+8	; 0x08
    24b6:	2c ed       	ldi	r18, 0xDC	; 220
    24b8:	38 eb       	ldi	r19, 0xB8	; 184
    24ba:	48 e0       	ldi	r20, 0x08	; 8
    24bc:	5e e3       	ldi	r21, 0x3E	; 62
    24be:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    24c2:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fixsfsi>
    24c6:	9b 01       	movw	r18, r22
    24c8:	77 ff       	sbrs	r23, 7
    24ca:	03 c0       	rjmp	.+6      	; 0x24d2 <move_arc_stnb+0x90>
    24cc:	30 95       	com	r19
    24ce:	21 95       	neg	r18
    24d0:	3f 4f       	sbci	r19, 0xFF	; 255
    24d2:	b9 01       	movw	r22, r18
    24d4:	88 27       	eor	r24, r24
    24d6:	77 fd       	sbrc	r23, 7
    24d8:	80 95       	com	r24
    24da:	98 2f       	mov	r25, r24
    24dc:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__floatsisf>
    24e0:	69 83       	std	Y+1, r22	; 0x01
    24e2:	7a 83       	std	Y+2, r23	; 0x02
    24e4:	8b 83       	std	Y+3, r24	; 0x03
    24e6:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    24e8:	69 85       	ldd	r22, Y+9	; 0x09
    24ea:	7a 85       	ldd	r23, Y+10	; 0x0a
    24ec:	8b 85       	ldd	r24, Y+11	; 0x0b
    24ee:	9c 85       	ldd	r25, Y+12	; 0x0c
    24f0:	2c ed       	ldi	r18, 0xDC	; 220
    24f2:	38 eb       	ldi	r19, 0xB8	; 184
    24f4:	48 e0       	ldi	r20, 0x08	; 8
    24f6:	5e e3       	ldi	r21, 0x3E	; 62
    24f8:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    24fc:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fixsfsi>
    2500:	9b 01       	movw	r18, r22
    2502:	77 ff       	sbrs	r23, 7
    2504:	03 c0       	rjmp	.+6      	; 0x250c <move_arc_stnb+0xca>
    2506:	30 95       	com	r19
    2508:	21 95       	neg	r18
    250a:	3f 4f       	sbci	r19, 0xFF	; 255
    250c:	b9 01       	movw	r22, r18
    250e:	88 27       	eor	r24, r24
    2510:	77 fd       	sbrc	r23, 7
    2512:	80 95       	com	r24
    2514:	98 2f       	mov	r25, r24
    2516:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__floatsisf>
    251a:	4b 01       	movw	r8, r22
    251c:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    251e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2520:	7e 85       	ldd	r23, Y+14	; 0x0e
    2522:	8f 85       	ldd	r24, Y+15	; 0x0f
    2524:	98 89       	ldd	r25, Y+16	; 0x10
    2526:	2c ed       	ldi	r18, 0xDC	; 220
    2528:	38 eb       	ldi	r19, 0xB8	; 184
    252a:	48 e0       	ldi	r20, 0x08	; 8
    252c:	5e e3       	ldi	r21, 0x3E	; 62
    252e:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2532:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fixsfsi>
    2536:	9b 01       	movw	r18, r22
    2538:	77 ff       	sbrs	r23, 7
    253a:	03 c0       	rjmp	.+6      	; 0x2542 <move_arc_stnb+0x100>
    253c:	30 95       	com	r19
    253e:	21 95       	neg	r18
    2540:	3f 4f       	sbci	r19, 0xFF	; 255
    2542:	b9 01       	movw	r22, r18
    2544:	88 27       	eor	r24, r24
    2546:	77 fd       	sbrc	r23, 7
    2548:	80 95       	com	r24
    254a:	98 2f       	mov	r25, r24
    254c:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__floatsisf>
    2550:	6b 01       	movw	r12, r22
    2552:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    2554:	c3 01       	movw	r24, r6
    2556:	b2 01       	movw	r22, r4
    2558:	20 e0       	ldi	r18, 0x00	; 0
    255a:	30 e0       	ldi	r19, 0x00	; 0
    255c:	40 e0       	ldi	r20, 0x00	; 0
    255e:	5f e4       	ldi	r21, 0x4F	; 79
    2560:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
    2564:	88 23       	and	r24, r24
    2566:	a1 f5       	brne	.+104    	; 0x25d0 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    2568:	69 81       	ldd	r22, Y+1	; 0x01
    256a:	7a 81       	ldd	r23, Y+2	; 0x02
    256c:	8b 81       	ldd	r24, Y+3	; 0x03
    256e:	9c 81       	ldd	r25, Y+4	; 0x04
    2570:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2574:	2b 01       	movw	r4, r22
    2576:	3c 01       	movw	r6, r24
    2578:	c5 01       	movw	r24, r10
    257a:	b4 01       	movw	r22, r8
    257c:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2580:	4b 01       	movw	r8, r22
    2582:	5c 01       	movw	r10, r24
    2584:	c7 01       	movw	r24, r14
    2586:	b6 01       	movw	r22, r12
    2588:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    258c:	6b 01       	movw	r12, r22
    258e:	7c 01       	movw	r14, r24
    2590:	2d b7       	in	r18, 0x3d	; 61
    2592:	3e b7       	in	r19, 0x3e	; 62
    2594:	29 50       	subi	r18, 0x09	; 9
    2596:	30 40       	sbci	r19, 0x00	; 0
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	3e bf       	out	0x3e, r19	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	2d bf       	out	0x3d, r18	; 61
    25a2:	ed b7       	in	r30, 0x3d	; 61
    25a4:	fe b7       	in	r31, 0x3e	; 62
    25a6:	31 96       	adiw	r30, 0x01	; 1
    25a8:	ad b7       	in	r26, 0x3d	; 61
    25aa:	be b7       	in	r27, 0x3e	; 62
    25ac:	12 96       	adiw	r26, 0x02	; 2
    25ae:	5c 92       	st	X, r5
    25b0:	4e 92       	st	-X, r4
    25b2:	11 97       	sbiw	r26, 0x01	; 1
    25b4:	93 82       	std	Z+3, r9	; 0x03
    25b6:	82 82       	std	Z+2, r8	; 0x02
    25b8:	75 83       	std	Z+5, r23	; 0x05
    25ba:	64 83       	std	Z+4, r22	; 0x04
    25bc:	26 82       	std	Z+6, r2	; 0x06
    25be:	10 86       	std	Z+8, r1	; 0x08
    25c0:	17 82       	std	Z+7, r1	; 0x07
    25c2:	81 e0       	ldi	r24, 0x01	; 1
    25c4:	62 e0       	ldi	r22, 0x02	; 2
    25c6:	43 2d       	mov	r20, r3
    25c8:	92 01       	movw	r18, r4
    25ca:	84 01       	movw	r16, r8
    25cc:	76 01       	movw	r14, r12
    25ce:	c1 c1       	rjmp	.+898    	; 0x2952 <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    25d0:	c3 01       	movw	r24, r6
    25d2:	b2 01       	movw	r22, r4
    25d4:	20 e0       	ldi	r18, 0x00	; 0
    25d6:	30 e0       	ldi	r19, 0x00	; 0
    25d8:	40 e0       	ldi	r20, 0x00	; 0
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
    25e0:	88 23       	and	r24, r24
    25e2:	e9 f5       	brne	.+122    	; 0x265e <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    25e4:	69 81       	ldd	r22, Y+1	; 0x01
    25e6:	7a 81       	ldd	r23, Y+2	; 0x02
    25e8:	8b 81       	ldd	r24, Y+3	; 0x03
    25ea:	9c 81       	ldd	r25, Y+4	; 0x04
    25ec:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    25f0:	3b 01       	movw	r6, r22
    25f2:	c5 01       	movw	r24, r10
    25f4:	b4 01       	movw	r22, r8
    25f6:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    25fa:	8b 01       	movw	r16, r22
    25fc:	c7 01       	movw	r24, r14
    25fe:	b6 01       	movw	r22, r12
    2600:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2604:	7b 01       	movw	r14, r22
    2606:	2d b7       	in	r18, 0x3d	; 61
    2608:	3e b7       	in	r19, 0x3e	; 62
    260a:	29 50       	subi	r18, 0x09	; 9
    260c:	30 40       	sbci	r19, 0x00	; 0
    260e:	0f b6       	in	r0, 0x3f	; 63
    2610:	f8 94       	cli
    2612:	3e bf       	out	0x3e, r19	; 62
    2614:	0f be       	out	0x3f, r0	; 63
    2616:	2d bf       	out	0x3d, r18	; 61
    2618:	ed b7       	in	r30, 0x3d	; 61
    261a:	fe b7       	in	r31, 0x3e	; 62
    261c:	31 96       	adiw	r30, 0x01	; 1
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	33 20       	and	r3, r3
    2622:	09 f4       	brne	.+2      	; 0x2626 <move_arc_stnb+0x1e4>
    2624:	41 e0       	ldi	r20, 0x01	; 1
    2626:	71 82       	std	Z+1, r7	; 0x01
    2628:	60 82       	st	Z, r6
    262a:	13 83       	std	Z+3, r17	; 0x03
    262c:	02 83       	std	Z+2, r16	; 0x02
    262e:	f5 82       	std	Z+5, r15	; 0x05
    2630:	e4 82       	std	Z+4, r14	; 0x04
    2632:	26 82       	std	Z+6, r2	; 0x06
    2634:	10 86       	std	Z+8, r1	; 0x08
    2636:	17 82       	std	Z+7, r1	; 0x07
    2638:	81 e0       	ldi	r24, 0x01	; 1
    263a:	62 e0       	ldi	r22, 0x02	; 2
    263c:	93 01       	movw	r18, r6
    263e:	c2 2c       	mov	r12, r2
    2640:	aa 24       	eor	r10, r10
    2642:	bb 24       	eor	r11, r11
    2644:	83 2c       	mov	r8, r3
    2646:	0e 94 c2 1b 	call	0x3784	; 0x3784 <STEPPER_move>
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	ad b7       	in	r26, 0x3d	; 61
    264e:	be b7       	in	r27, 0x3e	; 62
    2650:	19 96       	adiw	r26, 0x09	; 9
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	be bf       	out	0x3e, r27	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	ad bf       	out	0x3d, r26	; 61
    265c:	89 c1       	rjmp	.+786    	; 0x2970 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    265e:	c3 01       	movw	r24, r6
    2660:	b2 01       	movw	r22, r4
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e0       	ldi	r20, 0x00	; 0
    2668:	50 e0       	ldi	r21, 0x00	; 0
    266a:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__gesf2>
    266e:	18 16       	cp	r1, r24
    2670:	0c f0       	brlt	.+2      	; 0x2674 <move_arc_stnb+0x232>
    2672:	b1 c0       	rjmp	.+354    	; 0x27d6 <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2674:	66 e6       	ldi	r22, 0x66	; 102
    2676:	76 e6       	ldi	r23, 0x66	; 102
    2678:	8a ea       	ldi	r24, 0xAA	; 170
    267a:	91 ec       	ldi	r25, 0xC1	; 193
    267c:	a3 01       	movw	r20, r6
    267e:	92 01       	movw	r18, r4
    2680:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2684:	20 e0       	ldi	r18, 0x00	; 0
    2686:	30 e0       	ldi	r19, 0x00	; 0
    2688:	40 e8       	ldi	r20, 0x80	; 128
    268a:	5f e3       	ldi	r21, 0x3F	; 63
    268c:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    2690:	7b 01       	movw	r14, r22
    2692:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2694:	66 e6       	ldi	r22, 0x66	; 102
    2696:	76 e6       	ldi	r23, 0x66	; 102
    2698:	8a ea       	ldi	r24, 0xAA	; 170
    269a:	91 e4       	ldi	r25, 0x41	; 65
    269c:	a3 01       	movw	r20, r6
    269e:	92 01       	movw	r18, r4
    26a0:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	40 e8       	ldi	r20, 0x80	; 128
    26aa:	5f e3       	ldi	r21, 0x3F	; 63
    26ac:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    26b0:	5b 01       	movw	r10, r22
    26b2:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    26b4:	ed b7       	in	r30, 0x3d	; 61
    26b6:	fe b7       	in	r31, 0x3e	; 62
    26b8:	39 97       	sbiw	r30, 0x09	; 9
    26ba:	0f b6       	in	r0, 0x3f	; 63
    26bc:	f8 94       	cli
    26be:	fe bf       	out	0x3e, r31	; 62
    26c0:	0f be       	out	0x3f, r0	; 63
    26c2:	ed bf       	out	0x3d, r30	; 61
    26c4:	8d b6       	in	r8, 0x3d	; 61
    26c6:	9e b6       	in	r9, 0x3e	; 62
    26c8:	08 94       	sec
    26ca:	81 1c       	adc	r8, r1
    26cc:	91 1c       	adc	r9, r1
    26ce:	6d 81       	ldd	r22, Y+5	; 0x05
    26d0:	7e 81       	ldd	r23, Y+6	; 0x06
    26d2:	8f 81       	ldd	r24, Y+7	; 0x07
    26d4:	98 85       	ldd	r25, Y+8	; 0x08
    26d6:	a8 01       	movw	r20, r16
    26d8:	97 01       	movw	r18, r14
    26da:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    26de:	2c ed       	ldi	r18, 0xDC	; 220
    26e0:	38 eb       	ldi	r19, 0xB8	; 184
    26e2:	48 e0       	ldi	r20, 0x08	; 8
    26e4:	5e e3       	ldi	r21, 0x3E	; 62
    26e6:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    26ea:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    26ee:	69 8b       	std	Y+17, r22	; 0x11
    26f0:	7a 8b       	std	Y+18, r23	; 0x12
    26f2:	8b 8b       	std	Y+19, r24	; 0x13
    26f4:	9c 8b       	std	Y+20, r25	; 0x14
    26f6:	69 85       	ldd	r22, Y+9	; 0x09
    26f8:	7a 85       	ldd	r23, Y+10	; 0x0a
    26fa:	8b 85       	ldd	r24, Y+11	; 0x0b
    26fc:	9c 85       	ldd	r25, Y+12	; 0x0c
    26fe:	a8 01       	movw	r20, r16
    2700:	97 01       	movw	r18, r14
    2702:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2706:	2c ed       	ldi	r18, 0xDC	; 220
    2708:	38 eb       	ldi	r19, 0xB8	; 184
    270a:	48 e0       	ldi	r20, 0x08	; 8
    270c:	5e e3       	ldi	r21, 0x3E	; 62
    270e:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2712:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2716:	6d 8b       	std	Y+21, r22	; 0x15
    2718:	7e 8b       	std	Y+22, r23	; 0x16
    271a:	8f 8b       	std	Y+23, r24	; 0x17
    271c:	98 8f       	std	Y+24, r25	; 0x18
    271e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2720:	7e 85       	ldd	r23, Y+14	; 0x0e
    2722:	8f 85       	ldd	r24, Y+15	; 0x0f
    2724:	98 89       	ldd	r25, Y+16	; 0x10
    2726:	a8 01       	movw	r20, r16
    2728:	97 01       	movw	r18, r14
    272a:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    272e:	2c ed       	ldi	r18, 0xDC	; 220
    2730:	38 eb       	ldi	r19, 0xB8	; 184
    2732:	48 e0       	ldi	r20, 0x08	; 8
    2734:	5e e3       	ldi	r21, 0x3E	; 62
    2736:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    273a:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    273e:	2b 01       	movw	r4, r22
    2740:	3c 01       	movw	r6, r24
    2742:	6d 81       	ldd	r22, Y+5	; 0x05
    2744:	7e 81       	ldd	r23, Y+6	; 0x06
    2746:	8f 81       	ldd	r24, Y+7	; 0x07
    2748:	98 85       	ldd	r25, Y+8	; 0x08
    274a:	a6 01       	movw	r20, r12
    274c:	95 01       	movw	r18, r10
    274e:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2752:	2c ed       	ldi	r18, 0xDC	; 220
    2754:	38 eb       	ldi	r19, 0xB8	; 184
    2756:	48 e0       	ldi	r20, 0x08	; 8
    2758:	5e e3       	ldi	r21, 0x3E	; 62
    275a:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    275e:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2762:	d4 01       	movw	r26, r8
    2764:	6d 93       	st	X+, r22
    2766:	7c 93       	st	X, r23
    2768:	69 85       	ldd	r22, Y+9	; 0x09
    276a:	7a 85       	ldd	r23, Y+10	; 0x0a
    276c:	8b 85       	ldd	r24, Y+11	; 0x0b
    276e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2770:	a6 01       	movw	r20, r12
    2772:	95 01       	movw	r18, r10
    2774:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2778:	2c ed       	ldi	r18, 0xDC	; 220
    277a:	38 eb       	ldi	r19, 0xB8	; 184
    277c:	48 e0       	ldi	r20, 0x08	; 8
    277e:	5e e3       	ldi	r21, 0x3E	; 62
    2780:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2784:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2788:	f4 01       	movw	r30, r8
    278a:	73 83       	std	Z+3, r23	; 0x03
    278c:	62 83       	std	Z+2, r22	; 0x02
    278e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2790:	7e 85       	ldd	r23, Y+14	; 0x0e
    2792:	8f 85       	ldd	r24, Y+15	; 0x0f
    2794:	98 89       	ldd	r25, Y+16	; 0x10
    2796:	a6 01       	movw	r20, r12
    2798:	95 01       	movw	r18, r10
    279a:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    279e:	2c ed       	ldi	r18, 0xDC	; 220
    27a0:	38 eb       	ldi	r19, 0xB8	; 184
    27a2:	48 e0       	ldi	r20, 0x08	; 8
    27a4:	5e e3       	ldi	r21, 0x3E	; 62
    27a6:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    27aa:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    27ae:	d4 01       	movw	r26, r8
    27b0:	15 96       	adiw	r26, 0x05	; 5
    27b2:	7c 93       	st	X, r23
    27b4:	6e 93       	st	-X, r22
    27b6:	14 97       	sbiw	r26, 0x04	; 4
    27b8:	16 96       	adiw	r26, 0x06	; 6
    27ba:	2c 92       	st	X, r2
    27bc:	16 97       	sbiw	r26, 0x06	; 6
    27be:	18 96       	adiw	r26, 0x08	; 8
    27c0:	1c 92       	st	X, r1
    27c2:	1e 92       	st	-X, r1
    27c4:	17 97       	sbiw	r26, 0x07	; 7
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	62 e0       	ldi	r22, 0x02	; 2
    27ca:	43 2d       	mov	r20, r3
    27cc:	29 89       	ldd	r18, Y+17	; 0x11
    27ce:	3a 89       	ldd	r19, Y+18	; 0x12
    27d0:	0d 89       	ldd	r16, Y+21	; 0x15
    27d2:	1e 89       	ldd	r17, Y+22	; 0x16
    27d4:	bd c0       	rjmp	.+378    	; 0x2950 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    27d6:	c3 01       	movw	r24, r6
    27d8:	b2 01       	movw	r22, r4
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	50 e0       	ldi	r21, 0x00	; 0
    27e2:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
    27e6:	87 fd       	sbrc	r24, 7
    27e8:	02 c0       	rjmp	.+4      	; 0x27ee <move_arc_stnb+0x3ac>
    27ea:	80 e0       	ldi	r24, 0x00	; 0
    27ec:	c1 c0       	rjmp	.+386    	; 0x2970 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    27ee:	66 e6       	ldi	r22, 0x66	; 102
    27f0:	76 e6       	ldi	r23, 0x66	; 102
    27f2:	8a ea       	ldi	r24, 0xAA	; 170
    27f4:	91 e4       	ldi	r25, 0x41	; 65
    27f6:	a3 01       	movw	r20, r6
    27f8:	92 01       	movw	r18, r4
    27fa:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    27fe:	20 e0       	ldi	r18, 0x00	; 0
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	40 e8       	ldi	r20, 0x80	; 128
    2804:	5f e3       	ldi	r21, 0x3F	; 63
    2806:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    280a:	7b 01       	movw	r14, r22
    280c:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    280e:	66 e6       	ldi	r22, 0x66	; 102
    2810:	76 e6       	ldi	r23, 0x66	; 102
    2812:	8a ea       	ldi	r24, 0xAA	; 170
    2814:	91 ec       	ldi	r25, 0xC1	; 193
    2816:	a3 01       	movw	r20, r6
    2818:	92 01       	movw	r18, r4
    281a:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    281e:	20 e0       	ldi	r18, 0x00	; 0
    2820:	30 e0       	ldi	r19, 0x00	; 0
    2822:	40 e8       	ldi	r20, 0x80	; 128
    2824:	5f e3       	ldi	r21, 0x3F	; 63
    2826:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    282a:	5b 01       	movw	r10, r22
    282c:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    282e:	2d b7       	in	r18, 0x3d	; 61
    2830:	3e b7       	in	r19, 0x3e	; 62
    2832:	29 50       	subi	r18, 0x09	; 9
    2834:	30 40       	sbci	r19, 0x00	; 0
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	3e bf       	out	0x3e, r19	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	2d bf       	out	0x3d, r18	; 61
    2840:	8d b6       	in	r8, 0x3d	; 61
    2842:	9e b6       	in	r9, 0x3e	; 62
    2844:	08 94       	sec
    2846:	81 1c       	adc	r8, r1
    2848:	91 1c       	adc	r9, r1
    284a:	6d 81       	ldd	r22, Y+5	; 0x05
    284c:	7e 81       	ldd	r23, Y+6	; 0x06
    284e:	8f 81       	ldd	r24, Y+7	; 0x07
    2850:	98 85       	ldd	r25, Y+8	; 0x08
    2852:	a8 01       	movw	r20, r16
    2854:	97 01       	movw	r18, r14
    2856:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    285a:	2c ed       	ldi	r18, 0xDC	; 220
    285c:	38 eb       	ldi	r19, 0xB8	; 184
    285e:	48 e0       	ldi	r20, 0x08	; 8
    2860:	5e e3       	ldi	r21, 0x3E	; 62
    2862:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2866:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    286a:	69 8f       	std	Y+25, r22	; 0x19
    286c:	7a 8f       	std	Y+26, r23	; 0x1a
    286e:	8b 8f       	std	Y+27, r24	; 0x1b
    2870:	9c 8f       	std	Y+28, r25	; 0x1c
    2872:	69 85       	ldd	r22, Y+9	; 0x09
    2874:	7a 85       	ldd	r23, Y+10	; 0x0a
    2876:	8b 85       	ldd	r24, Y+11	; 0x0b
    2878:	9c 85       	ldd	r25, Y+12	; 0x0c
    287a:	a8 01       	movw	r20, r16
    287c:	97 01       	movw	r18, r14
    287e:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2882:	2c ed       	ldi	r18, 0xDC	; 220
    2884:	38 eb       	ldi	r19, 0xB8	; 184
    2886:	48 e0       	ldi	r20, 0x08	; 8
    2888:	5e e3       	ldi	r21, 0x3E	; 62
    288a:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    288e:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2892:	6d 8f       	std	Y+29, r22	; 0x1d
    2894:	7e 8f       	std	Y+30, r23	; 0x1e
    2896:	8f 8f       	std	Y+31, r24	; 0x1f
    2898:	98 a3       	std	Y+32, r25	; 0x20
    289a:	6d 85       	ldd	r22, Y+13	; 0x0d
    289c:	7e 85       	ldd	r23, Y+14	; 0x0e
    289e:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a0:	98 89       	ldd	r25, Y+16	; 0x10
    28a2:	a8 01       	movw	r20, r16
    28a4:	97 01       	movw	r18, r14
    28a6:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    28aa:	2c ed       	ldi	r18, 0xDC	; 220
    28ac:	38 eb       	ldi	r19, 0xB8	; 184
    28ae:	48 e0       	ldi	r20, 0x08	; 8
    28b0:	5e e3       	ldi	r21, 0x3E	; 62
    28b2:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    28b6:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    28ba:	2b 01       	movw	r4, r22
    28bc:	3c 01       	movw	r6, r24
    28be:	6d 81       	ldd	r22, Y+5	; 0x05
    28c0:	7e 81       	ldd	r23, Y+6	; 0x06
    28c2:	8f 81       	ldd	r24, Y+7	; 0x07
    28c4:	98 85       	ldd	r25, Y+8	; 0x08
    28c6:	a6 01       	movw	r20, r12
    28c8:	95 01       	movw	r18, r10
    28ca:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    28ce:	2c ed       	ldi	r18, 0xDC	; 220
    28d0:	38 eb       	ldi	r19, 0xB8	; 184
    28d2:	48 e0       	ldi	r20, 0x08	; 8
    28d4:	5e e3       	ldi	r21, 0x3E	; 62
    28d6:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    28da:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    28de:	d4 01       	movw	r26, r8
    28e0:	6d 93       	st	X+, r22
    28e2:	7c 93       	st	X, r23
    28e4:	69 85       	ldd	r22, Y+9	; 0x09
    28e6:	7a 85       	ldd	r23, Y+10	; 0x0a
    28e8:	8b 85       	ldd	r24, Y+11	; 0x0b
    28ea:	9c 85       	ldd	r25, Y+12	; 0x0c
    28ec:	a6 01       	movw	r20, r12
    28ee:	95 01       	movw	r18, r10
    28f0:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    28f4:	2c ed       	ldi	r18, 0xDC	; 220
    28f6:	38 eb       	ldi	r19, 0xB8	; 184
    28f8:	48 e0       	ldi	r20, 0x08	; 8
    28fa:	5e e3       	ldi	r21, 0x3E	; 62
    28fc:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2900:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2904:	f4 01       	movw	r30, r8
    2906:	73 83       	std	Z+3, r23	; 0x03
    2908:	62 83       	std	Z+2, r22	; 0x02
    290a:	6d 85       	ldd	r22, Y+13	; 0x0d
    290c:	7e 85       	ldd	r23, Y+14	; 0x0e
    290e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2910:	98 89       	ldd	r25, Y+16	; 0x10
    2912:	a6 01       	movw	r20, r12
    2914:	95 01       	movw	r18, r10
    2916:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    291a:	2c ed       	ldi	r18, 0xDC	; 220
    291c:	38 eb       	ldi	r19, 0xB8	; 184
    291e:	48 e0       	ldi	r20, 0x08	; 8
    2920:	5e e3       	ldi	r21, 0x3E	; 62
    2922:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2926:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    292a:	d4 01       	movw	r26, r8
    292c:	15 96       	adiw	r26, 0x05	; 5
    292e:	7c 93       	st	X, r23
    2930:	6e 93       	st	-X, r22
    2932:	14 97       	sbiw	r26, 0x04	; 4
    2934:	16 96       	adiw	r26, 0x06	; 6
    2936:	2c 92       	st	X, r2
    2938:	16 97       	sbiw	r26, 0x06	; 6
    293a:	18 96       	adiw	r26, 0x08	; 8
    293c:	1c 92       	st	X, r1
    293e:	1e 92       	st	-X, r1
    2940:	17 97       	sbiw	r26, 0x07	; 7
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	62 e0       	ldi	r22, 0x02	; 2
    2946:	43 2d       	mov	r20, r3
    2948:	29 8d       	ldd	r18, Y+25	; 0x19
    294a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    294c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    294e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2950:	72 01       	movw	r14, r4
    2952:	c2 2c       	mov	r12, r2
    2954:	aa 24       	eor	r10, r10
    2956:	bb 24       	eor	r11, r11
    2958:	83 2c       	mov	r8, r3
    295a:	0e 94 c2 1b 	call	0x3784	; 0x3784 <STEPPER_move>
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	ed b7       	in	r30, 0x3d	; 61
    2962:	fe b7       	in	r31, 0x3e	; 62
    2964:	39 96       	adiw	r30, 0x09	; 9
    2966:	0f b6       	in	r0, 0x3f	; 63
    2968:	f8 94       	cli
    296a:	fe bf       	out	0x3e, r31	; 62
    296c:	0f be       	out	0x3f, r0	; 63
    296e:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    2970:	a0 96       	adiw	r28, 0x20	; 32
    2972:	0f b6       	in	r0, 0x3f	; 63
    2974:	f8 94       	cli
    2976:	de bf       	out	0x3e, r29	; 62
    2978:	0f be       	out	0x3f, r0	; 63
    297a:	cd bf       	out	0x3d, r28	; 61
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	df 90       	pop	r13
    298a:	cf 90       	pop	r12
    298c:	bf 90       	pop	r11
    298e:	af 90       	pop	r10
    2990:	9f 90       	pop	r9
    2992:	8f 90       	pop	r8
    2994:	7f 90       	pop	r7
    2996:	6f 90       	pop	r6
    2998:	5f 90       	pop	r5
    299a:	4f 90       	pop	r4
    299c:	3f 90       	pop	r3
    299e:	2f 90       	pop	r2
    29a0:	08 95       	ret

000029a2 <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    29a2:	2f 92       	push	r2
    29a4:	3f 92       	push	r3
    29a6:	4f 92       	push	r4
    29a8:	5f 92       	push	r5
    29aa:	6f 92       	push	r6
    29ac:	7f 92       	push	r7
    29ae:	8f 92       	push	r8
    29b0:	9f 92       	push	r9
    29b2:	af 92       	push	r10
    29b4:	bf 92       	push	r11
    29b6:	cf 92       	push	r12
    29b8:	df 92       	push	r13
    29ba:	ef 92       	push	r14
    29bc:	ff 92       	push	r15
    29be:	0f 93       	push	r16
    29c0:	1f 93       	push	r17
    29c2:	df 93       	push	r29
    29c4:	cf 93       	push	r28
    29c6:	cd b7       	in	r28, 0x3d	; 61
    29c8:	de b7       	in	r29, 0x3e	; 62
    29ca:	a0 97       	sbiw	r28, 0x20	; 32
    29cc:	0f b6       	in	r0, 0x3f	; 63
    29ce:	f8 94       	cli
    29d0:	de bf       	out	0x3e, r29	; 62
    29d2:	0f be       	out	0x3f, r0	; 63
    29d4:	cd bf       	out	0x3d, r28	; 61
    29d6:	2b 01       	movw	r4, r22
    29d8:	3c 01       	movw	r6, r24
    29da:	2d 83       	std	Y+5, r18	; 0x05
    29dc:	3e 83       	std	Y+6, r19	; 0x06
    29de:	4f 83       	std	Y+7, r20	; 0x07
    29e0:	58 87       	std	Y+8, r21	; 0x08
    29e2:	e9 86       	std	Y+9, r14	; 0x09
    29e4:	fa 86       	std	Y+10, r15	; 0x0a
    29e6:	0b 87       	std	Y+11, r16	; 0x0b
    29e8:	1c 87       	std	Y+12, r17	; 0x0c
    29ea:	ad 86       	std	Y+13, r10	; 0x0d
    29ec:	be 86       	std	Y+14, r11	; 0x0e
    29ee:	cf 86       	std	Y+15, r12	; 0x0f
    29f0:	d8 8a       	std	Y+16, r13	; 0x10
    29f2:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    29f4:	33 24       	eor	r3, r3
    29f6:	ca 01       	movw	r24, r20
    29f8:	b9 01       	movw	r22, r18
    29fa:	20 e0       	ldi	r18, 0x00	; 0
    29fc:	30 e0       	ldi	r19, 0x00	; 0
    29fe:	40 e0       	ldi	r20, 0x00	; 0
    2a00:	50 e0       	ldi	r21, 0x00	; 0
    2a02:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__gesf2>
    2a06:	18 16       	cp	r1, r24
    2a08:	14 f4       	brge	.+4      	; 0x2a0e <move_arc_stwt+0x6c>
    2a0a:	33 24       	eor	r3, r3
    2a0c:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    2a0e:	6d 81       	ldd	r22, Y+5	; 0x05
    2a10:	7e 81       	ldd	r23, Y+6	; 0x06
    2a12:	8f 81       	ldd	r24, Y+7	; 0x07
    2a14:	98 85       	ldd	r25, Y+8	; 0x08
    2a16:	2c ed       	ldi	r18, 0xDC	; 220
    2a18:	38 eb       	ldi	r19, 0xB8	; 184
    2a1a:	48 e0       	ldi	r20, 0x08	; 8
    2a1c:	5e e3       	ldi	r21, 0x3E	; 62
    2a1e:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2a22:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fixsfsi>
    2a26:	9b 01       	movw	r18, r22
    2a28:	77 ff       	sbrs	r23, 7
    2a2a:	03 c0       	rjmp	.+6      	; 0x2a32 <move_arc_stwt+0x90>
    2a2c:	30 95       	com	r19
    2a2e:	21 95       	neg	r18
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	b9 01       	movw	r22, r18
    2a34:	88 27       	eor	r24, r24
    2a36:	77 fd       	sbrc	r23, 7
    2a38:	80 95       	com	r24
    2a3a:	98 2f       	mov	r25, r24
    2a3c:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__floatsisf>
    2a40:	69 83       	std	Y+1, r22	; 0x01
    2a42:	7a 83       	std	Y+2, r23	; 0x02
    2a44:	8b 83       	std	Y+3, r24	; 0x03
    2a46:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    2a48:	69 85       	ldd	r22, Y+9	; 0x09
    2a4a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a50:	2c ed       	ldi	r18, 0xDC	; 220
    2a52:	38 eb       	ldi	r19, 0xB8	; 184
    2a54:	48 e0       	ldi	r20, 0x08	; 8
    2a56:	5e e3       	ldi	r21, 0x3E	; 62
    2a58:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2a5c:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fixsfsi>
    2a60:	9b 01       	movw	r18, r22
    2a62:	77 ff       	sbrs	r23, 7
    2a64:	03 c0       	rjmp	.+6      	; 0x2a6c <move_arc_stwt+0xca>
    2a66:	30 95       	com	r19
    2a68:	21 95       	neg	r18
    2a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6c:	b9 01       	movw	r22, r18
    2a6e:	88 27       	eor	r24, r24
    2a70:	77 fd       	sbrc	r23, 7
    2a72:	80 95       	com	r24
    2a74:	98 2f       	mov	r25, r24
    2a76:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__floatsisf>
    2a7a:	4b 01       	movw	r8, r22
    2a7c:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    2a7e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a80:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a84:	98 89       	ldd	r25, Y+16	; 0x10
    2a86:	2c ed       	ldi	r18, 0xDC	; 220
    2a88:	38 eb       	ldi	r19, 0xB8	; 184
    2a8a:	48 e0       	ldi	r20, 0x08	; 8
    2a8c:	5e e3       	ldi	r21, 0x3E	; 62
    2a8e:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2a92:	0e 94 69 2c 	call	0x58d2	; 0x58d2 <__fixsfsi>
    2a96:	9b 01       	movw	r18, r22
    2a98:	77 ff       	sbrs	r23, 7
    2a9a:	03 c0       	rjmp	.+6      	; 0x2aa2 <move_arc_stwt+0x100>
    2a9c:	30 95       	com	r19
    2a9e:	21 95       	neg	r18
    2aa0:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa2:	b9 01       	movw	r22, r18
    2aa4:	88 27       	eor	r24, r24
    2aa6:	77 fd       	sbrc	r23, 7
    2aa8:	80 95       	com	r24
    2aaa:	98 2f       	mov	r25, r24
    2aac:	0e 94 9c 2c 	call	0x5938	; 0x5938 <__floatsisf>
    2ab0:	6b 01       	movw	r12, r22
    2ab2:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    2ab4:	c3 01       	movw	r24, r6
    2ab6:	b2 01       	movw	r22, r4
    2ab8:	20 e0       	ldi	r18, 0x00	; 0
    2aba:	30 e0       	ldi	r19, 0x00	; 0
    2abc:	40 e0       	ldi	r20, 0x00	; 0
    2abe:	5f e4       	ldi	r21, 0x4F	; 79
    2ac0:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
    2ac4:	88 23       	and	r24, r24
    2ac6:	a1 f5       	brne	.+104    	; 0x2b30 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    2ac8:	69 81       	ldd	r22, Y+1	; 0x01
    2aca:	7a 81       	ldd	r23, Y+2	; 0x02
    2acc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ace:	9c 81       	ldd	r25, Y+4	; 0x04
    2ad0:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2ad4:	2b 01       	movw	r4, r22
    2ad6:	3c 01       	movw	r6, r24
    2ad8:	c5 01       	movw	r24, r10
    2ada:	b4 01       	movw	r22, r8
    2adc:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2ae0:	4b 01       	movw	r8, r22
    2ae2:	5c 01       	movw	r10, r24
    2ae4:	c7 01       	movw	r24, r14
    2ae6:	b6 01       	movw	r22, r12
    2ae8:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2aec:	6b 01       	movw	r12, r22
    2aee:	7c 01       	movw	r14, r24
    2af0:	2d b7       	in	r18, 0x3d	; 61
    2af2:	3e b7       	in	r19, 0x3e	; 62
    2af4:	29 50       	subi	r18, 0x09	; 9
    2af6:	30 40       	sbci	r19, 0x00	; 0
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	3e bf       	out	0x3e, r19	; 62
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	2d bf       	out	0x3d, r18	; 61
    2b02:	ed b7       	in	r30, 0x3d	; 61
    2b04:	fe b7       	in	r31, 0x3e	; 62
    2b06:	31 96       	adiw	r30, 0x01	; 1
    2b08:	ad b7       	in	r26, 0x3d	; 61
    2b0a:	be b7       	in	r27, 0x3e	; 62
    2b0c:	12 96       	adiw	r26, 0x02	; 2
    2b0e:	5c 92       	st	X, r5
    2b10:	4e 92       	st	-X, r4
    2b12:	11 97       	sbiw	r26, 0x01	; 1
    2b14:	93 82       	std	Z+3, r9	; 0x03
    2b16:	82 82       	std	Z+2, r8	; 0x02
    2b18:	75 83       	std	Z+5, r23	; 0x05
    2b1a:	64 83       	std	Z+4, r22	; 0x04
    2b1c:	26 82       	std	Z+6, r2	; 0x06
    2b1e:	10 86       	std	Z+8, r1	; 0x08
    2b20:	17 82       	std	Z+7, r1	; 0x07
    2b22:	80 e0       	ldi	r24, 0x00	; 0
    2b24:	62 e0       	ldi	r22, 0x02	; 2
    2b26:	43 2d       	mov	r20, r3
    2b28:	92 01       	movw	r18, r4
    2b2a:	84 01       	movw	r16, r8
    2b2c:	76 01       	movw	r14, r12
    2b2e:	c1 c1       	rjmp	.+898    	; 0x2eb2 <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    2b30:	c3 01       	movw	r24, r6
    2b32:	b2 01       	movw	r22, r4
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e0       	ldi	r20, 0x00	; 0
    2b3a:	50 e0       	ldi	r21, 0x00	; 0
    2b3c:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
    2b40:	88 23       	and	r24, r24
    2b42:	e9 f5       	brne	.+122    	; 0x2bbe <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    2b44:	69 81       	ldd	r22, Y+1	; 0x01
    2b46:	7a 81       	ldd	r23, Y+2	; 0x02
    2b48:	8b 81       	ldd	r24, Y+3	; 0x03
    2b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    2b4c:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2b50:	3b 01       	movw	r6, r22
    2b52:	c5 01       	movw	r24, r10
    2b54:	b4 01       	movw	r22, r8
    2b56:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2b5a:	8b 01       	movw	r16, r22
    2b5c:	c7 01       	movw	r24, r14
    2b5e:	b6 01       	movw	r22, r12
    2b60:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2b64:	7b 01       	movw	r14, r22
    2b66:	2d b7       	in	r18, 0x3d	; 61
    2b68:	3e b7       	in	r19, 0x3e	; 62
    2b6a:	29 50       	subi	r18, 0x09	; 9
    2b6c:	30 40       	sbci	r19, 0x00	; 0
    2b6e:	0f b6       	in	r0, 0x3f	; 63
    2b70:	f8 94       	cli
    2b72:	3e bf       	out	0x3e, r19	; 62
    2b74:	0f be       	out	0x3f, r0	; 63
    2b76:	2d bf       	out	0x3d, r18	; 61
    2b78:	ed b7       	in	r30, 0x3d	; 61
    2b7a:	fe b7       	in	r31, 0x3e	; 62
    2b7c:	31 96       	adiw	r30, 0x01	; 1
    2b7e:	40 e0       	ldi	r20, 0x00	; 0
    2b80:	33 20       	and	r3, r3
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <move_arc_stwt+0x1e4>
    2b84:	41 e0       	ldi	r20, 0x01	; 1
    2b86:	71 82       	std	Z+1, r7	; 0x01
    2b88:	60 82       	st	Z, r6
    2b8a:	13 83       	std	Z+3, r17	; 0x03
    2b8c:	02 83       	std	Z+2, r16	; 0x02
    2b8e:	f5 82       	std	Z+5, r15	; 0x05
    2b90:	e4 82       	std	Z+4, r14	; 0x04
    2b92:	26 82       	std	Z+6, r2	; 0x06
    2b94:	10 86       	std	Z+8, r1	; 0x08
    2b96:	17 82       	std	Z+7, r1	; 0x07
    2b98:	80 e0       	ldi	r24, 0x00	; 0
    2b9a:	62 e0       	ldi	r22, 0x02	; 2
    2b9c:	93 01       	movw	r18, r6
    2b9e:	c2 2c       	mov	r12, r2
    2ba0:	aa 24       	eor	r10, r10
    2ba2:	bb 24       	eor	r11, r11
    2ba4:	83 2c       	mov	r8, r3
    2ba6:	0e 94 c2 1b 	call	0x3784	; 0x3784 <STEPPER_move>
    2baa:	81 e0       	ldi	r24, 0x01	; 1
    2bac:	ad b7       	in	r26, 0x3d	; 61
    2bae:	be b7       	in	r27, 0x3e	; 62
    2bb0:	19 96       	adiw	r26, 0x09	; 9
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	be bf       	out	0x3e, r27	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	ad bf       	out	0x3d, r26	; 61
    2bbc:	89 c1       	rjmp	.+786    	; 0x2ed0 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    2bbe:	c3 01       	movw	r24, r6
    2bc0:	b2 01       	movw	r22, r4
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	40 e0       	ldi	r20, 0x00	; 0
    2bc8:	50 e0       	ldi	r21, 0x00	; 0
    2bca:	0e 94 4c 2d 	call	0x5a98	; 0x5a98 <__gesf2>
    2bce:	18 16       	cp	r1, r24
    2bd0:	0c f0       	brlt	.+2      	; 0x2bd4 <move_arc_stwt+0x232>
    2bd2:	b1 c0       	rjmp	.+354    	; 0x2d36 <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2bd4:	66 e6       	ldi	r22, 0x66	; 102
    2bd6:	76 e6       	ldi	r23, 0x66	; 102
    2bd8:	8a ea       	ldi	r24, 0xAA	; 170
    2bda:	91 ec       	ldi	r25, 0xC1	; 193
    2bdc:	a3 01       	movw	r20, r6
    2bde:	92 01       	movw	r18, r4
    2be0:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2be4:	20 e0       	ldi	r18, 0x00	; 0
    2be6:	30 e0       	ldi	r19, 0x00	; 0
    2be8:	40 e8       	ldi	r20, 0x80	; 128
    2bea:	5f e3       	ldi	r21, 0x3F	; 63
    2bec:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    2bf0:	7b 01       	movw	r14, r22
    2bf2:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2bf4:	66 e6       	ldi	r22, 0x66	; 102
    2bf6:	76 e6       	ldi	r23, 0x66	; 102
    2bf8:	8a ea       	ldi	r24, 0xAA	; 170
    2bfa:	91 e4       	ldi	r25, 0x41	; 65
    2bfc:	a3 01       	movw	r20, r6
    2bfe:	92 01       	movw	r18, r4
    2c00:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	40 e8       	ldi	r20, 0x80	; 128
    2c0a:	5f e3       	ldi	r21, 0x3F	; 63
    2c0c:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    2c10:	5b 01       	movw	r10, r22
    2c12:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2c14:	ed b7       	in	r30, 0x3d	; 61
    2c16:	fe b7       	in	r31, 0x3e	; 62
    2c18:	39 97       	sbiw	r30, 0x09	; 9
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	fe bf       	out	0x3e, r31	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	ed bf       	out	0x3d, r30	; 61
    2c24:	8d b6       	in	r8, 0x3d	; 61
    2c26:	9e b6       	in	r9, 0x3e	; 62
    2c28:	08 94       	sec
    2c2a:	81 1c       	adc	r8, r1
    2c2c:	91 1c       	adc	r9, r1
    2c2e:	6d 81       	ldd	r22, Y+5	; 0x05
    2c30:	7e 81       	ldd	r23, Y+6	; 0x06
    2c32:	8f 81       	ldd	r24, Y+7	; 0x07
    2c34:	98 85       	ldd	r25, Y+8	; 0x08
    2c36:	a8 01       	movw	r20, r16
    2c38:	97 01       	movw	r18, r14
    2c3a:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2c3e:	2c ed       	ldi	r18, 0xDC	; 220
    2c40:	38 eb       	ldi	r19, 0xB8	; 184
    2c42:	48 e0       	ldi	r20, 0x08	; 8
    2c44:	5e e3       	ldi	r21, 0x3E	; 62
    2c46:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2c4a:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2c4e:	69 8b       	std	Y+17, r22	; 0x11
    2c50:	7a 8b       	std	Y+18, r23	; 0x12
    2c52:	8b 8b       	std	Y+19, r24	; 0x13
    2c54:	9c 8b       	std	Y+20, r25	; 0x14
    2c56:	69 85       	ldd	r22, Y+9	; 0x09
    2c58:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c5a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c5c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c5e:	a8 01       	movw	r20, r16
    2c60:	97 01       	movw	r18, r14
    2c62:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2c66:	2c ed       	ldi	r18, 0xDC	; 220
    2c68:	38 eb       	ldi	r19, 0xB8	; 184
    2c6a:	48 e0       	ldi	r20, 0x08	; 8
    2c6c:	5e e3       	ldi	r21, 0x3E	; 62
    2c6e:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2c72:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2c76:	6d 8b       	std	Y+21, r22	; 0x15
    2c78:	7e 8b       	std	Y+22, r23	; 0x16
    2c7a:	8f 8b       	std	Y+23, r24	; 0x17
    2c7c:	98 8f       	std	Y+24, r25	; 0x18
    2c7e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c80:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c84:	98 89       	ldd	r25, Y+16	; 0x10
    2c86:	a8 01       	movw	r20, r16
    2c88:	97 01       	movw	r18, r14
    2c8a:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2c8e:	2c ed       	ldi	r18, 0xDC	; 220
    2c90:	38 eb       	ldi	r19, 0xB8	; 184
    2c92:	48 e0       	ldi	r20, 0x08	; 8
    2c94:	5e e3       	ldi	r21, 0x3E	; 62
    2c96:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2c9a:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2c9e:	2b 01       	movw	r4, r22
    2ca0:	3c 01       	movw	r6, r24
    2ca2:	6d 81       	ldd	r22, Y+5	; 0x05
    2ca4:	7e 81       	ldd	r23, Y+6	; 0x06
    2ca6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ca8:	98 85       	ldd	r25, Y+8	; 0x08
    2caa:	a6 01       	movw	r20, r12
    2cac:	95 01       	movw	r18, r10
    2cae:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2cb2:	2c ed       	ldi	r18, 0xDC	; 220
    2cb4:	38 eb       	ldi	r19, 0xB8	; 184
    2cb6:	48 e0       	ldi	r20, 0x08	; 8
    2cb8:	5e e3       	ldi	r21, 0x3E	; 62
    2cba:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2cbe:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2cc2:	d4 01       	movw	r26, r8
    2cc4:	6d 93       	st	X+, r22
    2cc6:	7c 93       	st	X, r23
    2cc8:	69 85       	ldd	r22, Y+9	; 0x09
    2cca:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ccc:	8b 85       	ldd	r24, Y+11	; 0x0b
    2cce:	9c 85       	ldd	r25, Y+12	; 0x0c
    2cd0:	a6 01       	movw	r20, r12
    2cd2:	95 01       	movw	r18, r10
    2cd4:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2cd8:	2c ed       	ldi	r18, 0xDC	; 220
    2cda:	38 eb       	ldi	r19, 0xB8	; 184
    2cdc:	48 e0       	ldi	r20, 0x08	; 8
    2cde:	5e e3       	ldi	r21, 0x3E	; 62
    2ce0:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2ce4:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2ce8:	f4 01       	movw	r30, r8
    2cea:	73 83       	std	Z+3, r23	; 0x03
    2cec:	62 83       	std	Z+2, r22	; 0x02
    2cee:	6d 85       	ldd	r22, Y+13	; 0x0d
    2cf0:	7e 85       	ldd	r23, Y+14	; 0x0e
    2cf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cf4:	98 89       	ldd	r25, Y+16	; 0x10
    2cf6:	a6 01       	movw	r20, r12
    2cf8:	95 01       	movw	r18, r10
    2cfa:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2cfe:	2c ed       	ldi	r18, 0xDC	; 220
    2d00:	38 eb       	ldi	r19, 0xB8	; 184
    2d02:	48 e0       	ldi	r20, 0x08	; 8
    2d04:	5e e3       	ldi	r21, 0x3E	; 62
    2d06:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2d0a:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2d0e:	d4 01       	movw	r26, r8
    2d10:	15 96       	adiw	r26, 0x05	; 5
    2d12:	7c 93       	st	X, r23
    2d14:	6e 93       	st	-X, r22
    2d16:	14 97       	sbiw	r26, 0x04	; 4
    2d18:	16 96       	adiw	r26, 0x06	; 6
    2d1a:	2c 92       	st	X, r2
    2d1c:	16 97       	sbiw	r26, 0x06	; 6
    2d1e:	18 96       	adiw	r26, 0x08	; 8
    2d20:	1c 92       	st	X, r1
    2d22:	1e 92       	st	-X, r1
    2d24:	17 97       	sbiw	r26, 0x07	; 7
    2d26:	80 e0       	ldi	r24, 0x00	; 0
    2d28:	62 e0       	ldi	r22, 0x02	; 2
    2d2a:	43 2d       	mov	r20, r3
    2d2c:	29 89       	ldd	r18, Y+17	; 0x11
    2d2e:	3a 89       	ldd	r19, Y+18	; 0x12
    2d30:	0d 89       	ldd	r16, Y+21	; 0x15
    2d32:	1e 89       	ldd	r17, Y+22	; 0x16
    2d34:	bd c0       	rjmp	.+378    	; 0x2eb0 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    2d36:	c3 01       	movw	r24, r6
    2d38:	b2 01       	movw	r22, r4
    2d3a:	20 e0       	ldi	r18, 0x00	; 0
    2d3c:	30 e0       	ldi	r19, 0x00	; 0
    2d3e:	40 e0       	ldi	r20, 0x00	; 0
    2d40:	50 e0       	ldi	r21, 0x00	; 0
    2d42:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__cmpsf2>
    2d46:	87 fd       	sbrc	r24, 7
    2d48:	02 c0       	rjmp	.+4      	; 0x2d4e <move_arc_stwt+0x3ac>
    2d4a:	80 e0       	ldi	r24, 0x00	; 0
    2d4c:	c1 c0       	rjmp	.+386    	; 0x2ed0 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2d4e:	66 e6       	ldi	r22, 0x66	; 102
    2d50:	76 e6       	ldi	r23, 0x66	; 102
    2d52:	8a ea       	ldi	r24, 0xAA	; 170
    2d54:	91 e4       	ldi	r25, 0x41	; 65
    2d56:	a3 01       	movw	r20, r6
    2d58:	92 01       	movw	r18, r4
    2d5a:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e8       	ldi	r20, 0x80	; 128
    2d64:	5f e3       	ldi	r21, 0x3F	; 63
    2d66:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    2d6a:	7b 01       	movw	r14, r22
    2d6c:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2d6e:	66 e6       	ldi	r22, 0x66	; 102
    2d70:	76 e6       	ldi	r23, 0x66	; 102
    2d72:	8a ea       	ldi	r24, 0xAA	; 170
    2d74:	91 ec       	ldi	r25, 0xC1	; 193
    2d76:	a3 01       	movw	r20, r6
    2d78:	92 01       	movw	r18, r4
    2d7a:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e8       	ldi	r20, 0x80	; 128
    2d84:	5f e3       	ldi	r21, 0x3F	; 63
    2d86:	0e 94 99 2b 	call	0x5732	; 0x5732 <__addsf3>
    2d8a:	5b 01       	movw	r10, r22
    2d8c:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2d8e:	2d b7       	in	r18, 0x3d	; 61
    2d90:	3e b7       	in	r19, 0x3e	; 62
    2d92:	29 50       	subi	r18, 0x09	; 9
    2d94:	30 40       	sbci	r19, 0x00	; 0
    2d96:	0f b6       	in	r0, 0x3f	; 63
    2d98:	f8 94       	cli
    2d9a:	3e bf       	out	0x3e, r19	; 62
    2d9c:	0f be       	out	0x3f, r0	; 63
    2d9e:	2d bf       	out	0x3d, r18	; 61
    2da0:	8d b6       	in	r8, 0x3d	; 61
    2da2:	9e b6       	in	r9, 0x3e	; 62
    2da4:	08 94       	sec
    2da6:	81 1c       	adc	r8, r1
    2da8:	91 1c       	adc	r9, r1
    2daa:	6d 81       	ldd	r22, Y+5	; 0x05
    2dac:	7e 81       	ldd	r23, Y+6	; 0x06
    2dae:	8f 81       	ldd	r24, Y+7	; 0x07
    2db0:	98 85       	ldd	r25, Y+8	; 0x08
    2db2:	a8 01       	movw	r20, r16
    2db4:	97 01       	movw	r18, r14
    2db6:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2dba:	2c ed       	ldi	r18, 0xDC	; 220
    2dbc:	38 eb       	ldi	r19, 0xB8	; 184
    2dbe:	48 e0       	ldi	r20, 0x08	; 8
    2dc0:	5e e3       	ldi	r21, 0x3E	; 62
    2dc2:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2dc6:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2dca:	69 8f       	std	Y+25, r22	; 0x19
    2dcc:	7a 8f       	std	Y+26, r23	; 0x1a
    2dce:	8b 8f       	std	Y+27, r24	; 0x1b
    2dd0:	9c 8f       	std	Y+28, r25	; 0x1c
    2dd2:	69 85       	ldd	r22, Y+9	; 0x09
    2dd4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2dd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dd8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2dda:	a8 01       	movw	r20, r16
    2ddc:	97 01       	movw	r18, r14
    2dde:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2de2:	2c ed       	ldi	r18, 0xDC	; 220
    2de4:	38 eb       	ldi	r19, 0xB8	; 184
    2de6:	48 e0       	ldi	r20, 0x08	; 8
    2de8:	5e e3       	ldi	r21, 0x3E	; 62
    2dea:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2dee:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2df2:	6d 8f       	std	Y+29, r22	; 0x1d
    2df4:	7e 8f       	std	Y+30, r23	; 0x1e
    2df6:	8f 8f       	std	Y+31, r24	; 0x1f
    2df8:	98 a3       	std	Y+32, r25	; 0x20
    2dfa:	6d 85       	ldd	r22, Y+13	; 0x0d
    2dfc:	7e 85       	ldd	r23, Y+14	; 0x0e
    2dfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e00:	98 89       	ldd	r25, Y+16	; 0x10
    2e02:	a8 01       	movw	r20, r16
    2e04:	97 01       	movw	r18, r14
    2e06:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2e0a:	2c ed       	ldi	r18, 0xDC	; 220
    2e0c:	38 eb       	ldi	r19, 0xB8	; 184
    2e0e:	48 e0       	ldi	r20, 0x08	; 8
    2e10:	5e e3       	ldi	r21, 0x3E	; 62
    2e12:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2e16:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2e1a:	2b 01       	movw	r4, r22
    2e1c:	3c 01       	movw	r6, r24
    2e1e:	6d 81       	ldd	r22, Y+5	; 0x05
    2e20:	7e 81       	ldd	r23, Y+6	; 0x06
    2e22:	8f 81       	ldd	r24, Y+7	; 0x07
    2e24:	98 85       	ldd	r25, Y+8	; 0x08
    2e26:	a6 01       	movw	r20, r12
    2e28:	95 01       	movw	r18, r10
    2e2a:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2e2e:	2c ed       	ldi	r18, 0xDC	; 220
    2e30:	38 eb       	ldi	r19, 0xB8	; 184
    2e32:	48 e0       	ldi	r20, 0x08	; 8
    2e34:	5e e3       	ldi	r21, 0x3E	; 62
    2e36:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2e3a:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2e3e:	d4 01       	movw	r26, r8
    2e40:	6d 93       	st	X+, r22
    2e42:	7c 93       	st	X, r23
    2e44:	69 85       	ldd	r22, Y+9	; 0x09
    2e46:	7a 85       	ldd	r23, Y+10	; 0x0a
    2e48:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2e4c:	a6 01       	movw	r20, r12
    2e4e:	95 01       	movw	r18, r10
    2e50:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2e54:	2c ed       	ldi	r18, 0xDC	; 220
    2e56:	38 eb       	ldi	r19, 0xB8	; 184
    2e58:	48 e0       	ldi	r20, 0x08	; 8
    2e5a:	5e e3       	ldi	r21, 0x3E	; 62
    2e5c:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2e60:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2e64:	f4 01       	movw	r30, r8
    2e66:	73 83       	std	Z+3, r23	; 0x03
    2e68:	62 83       	std	Z+2, r22	; 0x02
    2e6a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2e6c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2e6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e70:	98 89       	ldd	r25, Y+16	; 0x10
    2e72:	a6 01       	movw	r20, r12
    2e74:	95 01       	movw	r18, r10
    2e76:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    2e7a:	2c ed       	ldi	r18, 0xDC	; 220
    2e7c:	38 eb       	ldi	r19, 0xB8	; 184
    2e7e:	48 e0       	ldi	r20, 0x08	; 8
    2e80:	5e e3       	ldi	r21, 0x3E	; 62
    2e82:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    2e86:	0e 94 6e 2c 	call	0x58dc	; 0x58dc <__fixunssfsi>
    2e8a:	d4 01       	movw	r26, r8
    2e8c:	15 96       	adiw	r26, 0x05	; 5
    2e8e:	7c 93       	st	X, r23
    2e90:	6e 93       	st	-X, r22
    2e92:	14 97       	sbiw	r26, 0x04	; 4
    2e94:	16 96       	adiw	r26, 0x06	; 6
    2e96:	2c 92       	st	X, r2
    2e98:	16 97       	sbiw	r26, 0x06	; 6
    2e9a:	18 96       	adiw	r26, 0x08	; 8
    2e9c:	1c 92       	st	X, r1
    2e9e:	1e 92       	st	-X, r1
    2ea0:	17 97       	sbiw	r26, 0x07	; 7
    2ea2:	80 e0       	ldi	r24, 0x00	; 0
    2ea4:	62 e0       	ldi	r22, 0x02	; 2
    2ea6:	43 2d       	mov	r20, r3
    2ea8:	29 8d       	ldd	r18, Y+25	; 0x19
    2eaa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2eac:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2eae:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2eb0:	72 01       	movw	r14, r4
    2eb2:	c2 2c       	mov	r12, r2
    2eb4:	aa 24       	eor	r10, r10
    2eb6:	bb 24       	eor	r11, r11
    2eb8:	83 2c       	mov	r8, r3
    2eba:	0e 94 c2 1b 	call	0x3784	; 0x3784 <STEPPER_move>
    2ebe:	81 e0       	ldi	r24, 0x01	; 1
    2ec0:	ed b7       	in	r30, 0x3d	; 61
    2ec2:	fe b7       	in	r31, 0x3e	; 62
    2ec4:	39 96       	adiw	r30, 0x09	; 9
    2ec6:	0f b6       	in	r0, 0x3f	; 63
    2ec8:	f8 94       	cli
    2eca:	fe bf       	out	0x3e, r31	; 62
    2ecc:	0f be       	out	0x3f, r0	; 63
    2ece:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    2ed0:	a0 96       	adiw	r28, 0x20	; 32
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
    2edc:	cf 91       	pop	r28
    2ede:	df 91       	pop	r29
    2ee0:	1f 91       	pop	r17
    2ee2:	0f 91       	pop	r16
    2ee4:	ff 90       	pop	r15
    2ee6:	ef 90       	pop	r14
    2ee8:	df 90       	pop	r13
    2eea:	cf 90       	pop	r12
    2eec:	bf 90       	pop	r11
    2eee:	af 90       	pop	r10
    2ef0:	9f 90       	pop	r9
    2ef2:	8f 90       	pop	r8
    2ef4:	7f 90       	pop	r7
    2ef6:	6f 90       	pop	r6
    2ef8:	5f 90       	pop	r5
    2efa:	4f 90       	pop	r4
    2efc:	3f 90       	pop	r3
    2efe:	2f 90       	pop	r2
    2f00:	08 95       	ret

00002f02 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    2f02:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    2f06:	28 2f       	mov	r18, r24
    2f08:	21 70       	andi	r18, 0x01	; 1
    2f0a:	20 93 ba 07 	sts	0x07BA, r18
	leftContact =  (0b00000010 & sensors)>>1;
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	82 70       	andi	r24, 0x02	; 2
    2f12:	90 70       	andi	r25, 0x00	; 0
    2f14:	95 95       	asr	r25
    2f16:	87 95       	ror	r24
    2f18:	80 93 bb 07 	sts	0x07BB, r24
}
    2f1c:	08 95       	ret

00002f1e <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    2f1e:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    2f22:	60 93 22 05 	sts	0x0522, r22
    2f26:	70 93 23 05 	sts	0x0523, r23
    2f2a:	80 93 24 05 	sts	0x0524, r24
    2f2e:	90 93 25 05 	sts	0x0525, r25
	leftLightVolt = getLeftLight();
    2f32:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    2f36:	60 93 49 08 	sts	0x0849, r22
    2f3a:	70 93 4a 08 	sts	0x084A, r23
    2f3e:	80 93 4b 08 	sts	0x084B, r24
    2f42:	90 93 4c 08 	sts	0x084C, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    2f46:	08 95       	ret

00002f48 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    2f48:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    2f4c:	60 93 8e 04 	sts	0x048E, r22
    2f50:	70 93 8f 04 	sts	0x048F, r23
    2f54:	80 93 90 04 	sts	0x0490, r24
    2f58:	90 93 91 04 	sts	0x0491, r25
	bkIR = getBackIR();
    2f5c:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    2f60:	60 93 98 04 	sts	0x0498, r22
    2f64:	70 93 99 04 	sts	0x0499, r23
    2f68:	80 93 9a 04 	sts	0x049A, r24
    2f6c:	90 93 9b 04 	sts	0x049B, r25
	ltIR = getLeftIR();
    2f70:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    2f74:	60 93 bc 07 	sts	0x07BC, r22
    2f78:	70 93 bd 07 	sts	0x07BD, r23
    2f7c:	80 93 be 07 	sts	0x07BE, r24
    2f80:	90 93 bf 07 	sts	0x07BF, r25
	rtIR = getRightIR();
    2f84:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    2f88:	60 93 c1 07 	sts	0x07C1, r22
    2f8c:	70 93 c2 07 	sts	0x07C2, r23
    2f90:	80 93 c3 07 	sts	0x07C3, r24
    2f94:	90 93 c4 07 	sts	0x07C4, r25
}
    2f98:	08 95       	ret

00002f9a <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    2f9a:	cf 92       	push	r12
    2f9c:	df 92       	push	r13
    2f9e:	ef 92       	push	r14
    2fa0:	ff 92       	push	r15
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
    2fa6:	cf 93       	push	r28
    2fa8:	df 93       	push	r29
    2faa:	16 2f       	mov	r17, r22
    2fac:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    2fae:	5f e1       	ldi	r21, 0x1F	; 31
    2fb0:	f5 2e       	mov	r15, r21
    2fb2:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    2fb4:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    2fb6:	0f 2d       	mov	r16, r15
    2fb8:	06 95       	lsr	r16
    2fba:	06 95       	lsr	r16
    2fbc:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    2fbe:	c0 2f       	mov	r28, r16
    2fc0:	d0 e0       	ldi	r29, 0x00	; 0
    2fc2:	c1 2e       	mov	r12, r17
    2fc4:	dd 24       	eor	r13, r13
    2fc6:	ce 01       	movw	r24, r28
    2fc8:	b6 01       	movw	r22, r12
    2fca:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    2fce:	80 2f       	mov	r24, r16
    2fd0:	61 2f       	mov	r22, r17
    2fd2:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_set_next_PGC>
    2fd6:	fe 01       	movw	r30, r28
    2fd8:	f6 95       	lsr	r31
    2fda:	fe 2f       	mov	r31, r30
    2fdc:	ee 27       	eor	r30, r30
    2fde:	f7 95       	ror	r31
    2fe0:	e7 95       	ror	r30
    2fe2:	2f 2d       	mov	r18, r15
    2fe4:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    2fe6:	ee 20       	and	r14, r14
    2fe8:	89 f0       	breq	.+34     	; 0x300c <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    2fea:	ec 0d       	add	r30, r12
    2fec:	fd 1d       	adc	r31, r13
    2fee:	ec 54       	subi	r30, 0x4C	; 76
    2ff0:	fa 4f       	sbci	r31, 0xFA	; 250
    2ff2:	27 70       	andi	r18, 0x07	; 7
    2ff4:	30 70       	andi	r19, 0x00	; 0
    2ff6:	81 e0       	ldi	r24, 0x01	; 1
    2ff8:	90 e0       	ldi	r25, 0x00	; 0
    2ffa:	02 c0       	rjmp	.+4      	; 0x3000 <LCD_set_pixel+0x66>
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	2a 95       	dec	r18
    3002:	e2 f7       	brpl	.-8      	; 0x2ffc <LCD_set_pixel+0x62>
    3004:	20 81       	ld	r18, Z
    3006:	28 2b       	or	r18, r24
    3008:	20 83       	st	Z, r18
    300a:	11 c0       	rjmp	.+34     	; 0x302e <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    300c:	ec 0d       	add	r30, r12
    300e:	fd 1d       	adc	r31, r13
    3010:	ec 54       	subi	r30, 0x4C	; 76
    3012:	fa 4f       	sbci	r31, 0xFA	; 250
    3014:	27 70       	andi	r18, 0x07	; 7
    3016:	30 70       	andi	r19, 0x00	; 0
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	02 c0       	rjmp	.+4      	; 0x3022 <LCD_set_pixel+0x88>
    301e:	88 0f       	add	r24, r24
    3020:	99 1f       	adc	r25, r25
    3022:	2a 95       	dec	r18
    3024:	e2 f7       	brpl	.-8      	; 0x301e <LCD_set_pixel+0x84>
    3026:	80 95       	com	r24
    3028:	20 81       	ld	r18, Z
    302a:	82 23       	and	r24, r18
    302c:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    302e:	d6 95       	lsr	r29
    3030:	dc 2f       	mov	r29, r28
    3032:	cc 27       	eor	r28, r28
    3034:	d7 95       	ror	r29
    3036:	c7 95       	ror	r28
    3038:	cc 0d       	add	r28, r12
    303a:	dd 1d       	adc	r29, r13
    303c:	cc 54       	subi	r28, 0x4C	; 76
    303e:	da 4f       	sbci	r29, 0xFA	; 250
    3040:	88 81       	ld	r24, Y
    3042:	61 e0       	ldi	r22, 0x01	; 1
    3044:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
}
    3048:	df 91       	pop	r29
    304a:	cf 91       	pop	r28
    304c:	1f 91       	pop	r17
    304e:	0f 91       	pop	r16
    3050:	ff 90       	pop	r15
    3052:	ef 90       	pop	r14
    3054:	df 90       	pop	r13
    3056:	cf 90       	pop	r12
    3058:	08 95       	ret

0000305a <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    305a:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <ATTINY_open>
    305e:	90 93 12 04 	sts	0x0412, r25
    3062:	80 93 11 04 	sts	0x0411, r24
	LEopstat = LED_open(); //open the LED module
    3066:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LED_open>
    306a:	90 93 10 04 	sts	0x0410, r25
    306e:	80 93 0f 04 	sts	0x040F, r24
	LCopstat = LCD_open(); //open the LCD module
    3072:	0e 94 fe 18 	call	0x31fc	; 0x31fc <LCD_open>
    3076:	90 93 0e 04 	sts	0x040E, r25
    307a:	80 93 0d 04 	sts	0x040D, r24
	STEPPER_open(); // Open STEPPER module for use
    307e:	0e 94 69 1c 	call	0x38d2	; 0x38d2 <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    3082:	82 e0       	ldi	r24, 0x02	; 2
    3084:	0e 94 ed 1a 	call	0x35da	; 0x35da <SPKR_open>
	
	LED_open();
    3088:	0e 94 e7 19 	call	0x33ce	; 0x33ce <LED_open>
	I2C_open();
    308c:	0e 94 ac 20 	call	0x4158	; 0x4158 <I2C_open>
	ADC_open();//open the ADC module
    3090:	0e 94 6b 18 	call	0x30d6	; 0x30d6 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	0e 94 cd 18 	call	0x319a	; 0x319a <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    309a:	0e 94 a4 17 	call	0x2f48	; 0x2f48 <checkIR>
	prefilter(1);
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	0e 94 16 10 	call	0x202c	; 0x202c <prefilter>
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	30 e0       	ldi	r19, 0x00	; 0
    30a8:	0a c0       	rjmp	.+20     	; 0x30be <initializeRobot+0x64>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 128; j++) {
			pix_arr[i][j] = 0x00;
    30aa:	11 92       	st	Z+, r1
	checkIR();
	prefilter(1);
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 128; j++) {
    30ac:	01 96       	adiw	r24, 0x01	; 1
    30ae:	80 38       	cpi	r24, 0x80	; 128
    30b0:	91 05       	cpc	r25, r1
    30b2:	d9 f7       	brne	.-10     	; 0x30aa <initializeRobot+0x50>
	// Initialize IR Values and Reset Prefilter
	checkIR();
	prefilter(1);
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    30b4:	2f 5f       	subi	r18, 0xFF	; 255
    30b6:	3f 4f       	sbci	r19, 0xFF	; 255
    30b8:	24 30       	cpi	r18, 0x04	; 4
    30ba:	31 05       	cpc	r19, r1
    30bc:	59 f0       	breq	.+22     	; 0x30d4 <initializeRobot+0x7a>
    30be:	f9 01       	movw	r30, r18
    30c0:	f6 95       	lsr	r31
    30c2:	fe 2f       	mov	r31, r30
    30c4:	ee 27       	eor	r30, r30
    30c6:	f7 95       	ror	r31
    30c8:	e7 95       	ror	r30
    30ca:	ec 54       	subi	r30, 0x4C	; 76
    30cc:	fa 4f       	sbci	r31, 0xFA	; 250
    30ce:	80 e0       	ldi	r24, 0x00	; 0
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	eb cf       	rjmp	.-42     	; 0x30aa <initializeRobot+0x50>
    30d4:	08 95       	ret

000030d6 <ADC_open>:
    30d6:	8f e0       	ldi	r24, 0x0F	; 15
    30d8:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    30dc:	88 23       	and	r24, r24
    30de:	31 f4       	brne	.+12     	; 0x30ec <ADC_open+0x16>
    30e0:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <__ADC_init>
    30e4:	8f e0       	ldi	r24, 0x0F	; 15
    30e6:	61 e0       	ldi	r22, 0x01	; 1
    30e8:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    30ec:	8f e0       	ldi	r24, 0x0F	; 15
    30ee:	91 e0       	ldi	r25, 0x01	; 1
    30f0:	08 95       	ret

000030f2 <ADC_sample>:
    30f2:	8f e0       	ldi	r24, 0x0F	; 15
    30f4:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	19 f0       	breq	.+6      	; 0x3102 <ADC_sample+0x10>
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	13 c0       	rjmp	.+38     	; 0x3128 <ADC_sample+0x36>
    3102:	80 91 7a 00 	lds	r24, 0x007A
    3106:	80 64       	ori	r24, 0x40	; 64
    3108:	80 93 7a 00 	sts	0x007A, r24
    310c:	80 91 7a 00 	lds	r24, 0x007A
    3110:	86 fd       	sbrc	r24, 6
    3112:	fc cf       	rjmp	.-8      	; 0x310c <ADC_sample+0x1a>
    3114:	30 91 78 00 	lds	r19, 0x0078
    3118:	20 91 79 00 	lds	r18, 0x0079
    311c:	92 2f       	mov	r25, r18
    311e:	80 e0       	ldi	r24, 0x00	; 0
    3120:	23 2f       	mov	r18, r19
    3122:	30 e0       	ldi	r19, 0x00	; 0
    3124:	28 2b       	or	r18, r24
    3126:	39 2b       	or	r19, r25
    3128:	c9 01       	movw	r24, r18
    312a:	08 95       	ret

0000312c <ADC_set_channel>:
    312c:	58 2f       	mov	r21, r24
    312e:	80 91 37 03 	lds	r24, 0x0337
    3132:	88 30       	cpi	r24, 0x08	; 8
    3134:	d8 f4       	brcc	.+54     	; 0x316c <ADC_set_channel+0x40>
    3136:	40 91 7e 00 	lds	r20, 0x007E
    313a:	21 e0       	ldi	r18, 0x01	; 1
    313c:	30 e0       	ldi	r19, 0x00	; 0
    313e:	b9 01       	movw	r22, r18
    3140:	02 c0       	rjmp	.+4      	; 0x3146 <ADC_set_channel+0x1a>
    3142:	66 0f       	add	r22, r22
    3144:	77 1f       	adc	r23, r23
    3146:	8a 95       	dec	r24
    3148:	e2 f7       	brpl	.-8      	; 0x3142 <ADC_set_channel+0x16>
    314a:	cb 01       	movw	r24, r22
    314c:	80 95       	com	r24
    314e:	84 23       	and	r24, r20
    3150:	80 93 7e 00 	sts	0x007E, r24
    3154:	80 91 7e 00 	lds	r24, 0x007E
    3158:	05 2e       	mov	r0, r21
    315a:	02 c0       	rjmp	.+4      	; 0x3160 <ADC_set_channel+0x34>
    315c:	22 0f       	add	r18, r18
    315e:	33 1f       	adc	r19, r19
    3160:	0a 94       	dec	r0
    3162:	e2 f7       	brpl	.-8      	; 0x315c <ADC_set_channel+0x30>
    3164:	82 2b       	or	r24, r18
    3166:	80 93 7e 00 	sts	0x007E, r24
    316a:	0d c0       	rjmp	.+26     	; 0x3186 <ADC_set_channel+0x5a>
    316c:	20 91 7e 00 	lds	r18, 0x007E
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	90 e0       	ldi	r25, 0x00	; 0
    3174:	05 2e       	mov	r0, r21
    3176:	02 c0       	rjmp	.+4      	; 0x317c <ADC_set_channel+0x50>
    3178:	88 0f       	add	r24, r24
    317a:	99 1f       	adc	r25, r25
    317c:	0a 94       	dec	r0
    317e:	e2 f7       	brpl	.-8      	; 0x3178 <ADC_set_channel+0x4c>
    3180:	28 2b       	or	r18, r24
    3182:	20 93 7e 00 	sts	0x007E, r18
    3186:	50 93 37 03 	sts	0x0337, r21
    318a:	80 91 7c 00 	lds	r24, 0x007C
    318e:	5f 71       	andi	r21, 0x1F	; 31
    3190:	80 7e       	andi	r24, 0xE0	; 224
    3192:	85 2b       	or	r24, r21
    3194:	80 93 7c 00 	sts	0x007C, r24
    3198:	08 95       	ret

0000319a <ADC_set_VREF>:
    319a:	ec e7       	ldi	r30, 0x7C	; 124
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	90 81       	ld	r25, Z
    31a0:	82 95       	swap	r24
    31a2:	88 0f       	add	r24, r24
    31a4:	88 0f       	add	r24, r24
    31a6:	80 7c       	andi	r24, 0xC0	; 192
    31a8:	9f 73       	andi	r25, 0x3F	; 63
    31aa:	98 2b       	or	r25, r24
    31ac:	90 83       	st	Z, r25
    31ae:	08 95       	ret

000031b0 <main>:
    31b0:	0e 94 ec 20 	call	0x41d8	; 0x41d8 <CBOT_ISR_init>
    31b4:	0e 94 de 20 	call	0x41bc	; 0x41bc <CBOT_init>
    31b8:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <CBOT_main>
    31bc:	80 e0       	ldi	r24, 0x00	; 0
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	08 95       	ret

000031c2 <LCD_clear>:
    31c2:	0f 93       	push	r16
    31c4:	1f 93       	push	r17
    31c6:	80 e4       	ldi	r24, 0x40	; 64
    31c8:	60 e0       	ldi	r22, 0x00	; 0
    31ca:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    31ce:	00 e0       	ldi	r16, 0x00	; 0
    31d0:	80 2f       	mov	r24, r16
    31d2:	60 e0       	ldi	r22, 0x00	; 0
    31d4:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_set_PGC_addr>
    31d8:	10 e0       	ldi	r17, 0x00	; 0
    31da:	80 e0       	ldi	r24, 0x00	; 0
    31dc:	61 e0       	ldi	r22, 0x01	; 1
    31de:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    31e2:	1f 5f       	subi	r17, 0xFF	; 255
    31e4:	10 38       	cpi	r17, 0x80	; 128
    31e6:	c9 f7       	brne	.-14     	; 0x31da <LCD_clear+0x18>
    31e8:	0f 5f       	subi	r16, 0xFF	; 255
    31ea:	04 30       	cpi	r16, 0x04	; 4
    31ec:	89 f7       	brne	.-30     	; 0x31d0 <LCD_clear+0xe>
    31ee:	83 e0       	ldi	r24, 0x03	; 3
    31f0:	60 e0       	ldi	r22, 0x00	; 0
    31f2:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_set_next_PGC>
    31f6:	1f 91       	pop	r17
    31f8:	0f 91       	pop	r16
    31fa:	08 95       	ret

000031fc <LCD_open>:
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	82 e0       	ldi	r24, 0x02	; 2
    3202:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    3206:	88 23       	and	r24, r24
    3208:	11 f4       	brne	.+4      	; 0x320e <LCD_open+0x12>
    320a:	82 e0       	ldi	r24, 0x02	; 2
    320c:	06 c0       	rjmp	.+12     	; 0x321a <LCD_open+0x1e>
    320e:	81 e0       	ldi	r24, 0x01	; 1
    3210:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    3214:	88 23       	and	r24, r24
    3216:	19 f4       	brne	.+6      	; 0x321e <LCD_open+0x22>
    3218:	81 e0       	ldi	r24, 0x01	; 1
    321a:	90 e0       	ldi	r25, 0x00	; 0
    321c:	6d c0       	rjmp	.+218    	; 0x32f8 <LCD_open+0xfc>
    321e:	0e 94 54 23 	call	0x46a8	; 0x46a8 <__LCD_init>
    3222:	85 e0       	ldi	r24, 0x05	; 5
    3224:	61 e0       	ldi	r22, 0x01	; 1
    3226:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    322a:	8e ea       	ldi	r24, 0xAE	; 174
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    3232:	82 ea       	ldi	r24, 0xA2	; 162
    3234:	60 e0       	ldi	r22, 0x00	; 0
    3236:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    323a:	80 ea       	ldi	r24, 0xA0	; 160
    323c:	60 e0       	ldi	r22, 0x00	; 0
    323e:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    3242:	00 e5       	ldi	r16, 0x50	; 80
    3244:	13 ec       	ldi	r17, 0xC3	; 195
    3246:	c8 01       	movw	r24, r16
    3248:	01 97       	sbiw	r24, 0x01	; 1
    324a:	f1 f7       	brne	.-4      	; 0x3248 <LCD_open+0x4c>
    324c:	80 ec       	ldi	r24, 0xC0	; 192
    324e:	60 e0       	ldi	r22, 0x00	; 0
    3250:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    3254:	8f e2       	ldi	r24, 0x2F	; 47
    3256:	60 e0       	ldi	r22, 0x00	; 0
    3258:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    325c:	81 e8       	ldi	r24, 0x81	; 129
    325e:	60 e0       	ldi	r22, 0x00	; 0
    3260:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    3264:	86 e1       	ldi	r24, 0x16	; 22
    3266:	60 e0       	ldi	r22, 0x00	; 0
    3268:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    326c:	82 e2       	ldi	r24, 0x22	; 34
    326e:	60 e0       	ldi	r22, 0x00	; 0
    3270:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    3274:	c8 01       	movw	r24, r16
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	f1 f7       	brne	.-4      	; 0x3276 <LCD_open+0x7a>
    327a:	8f ea       	ldi	r24, 0xAF	; 175
    327c:	60 e0       	ldi	r22, 0x00	; 0
    327e:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    3282:	86 ea       	ldi	r24, 0xA6	; 166
    3284:	60 e0       	ldi	r22, 0x00	; 0
    3286:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    328a:	85 ea       	ldi	r24, 0xA5	; 165
    328c:	60 e0       	ldi	r22, 0x00	; 0
    328e:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    3292:	80 e0       	ldi	r24, 0x00	; 0
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	28 e8       	ldi	r18, 0x88	; 136
    3298:	33 e1       	ldi	r19, 0x13	; 19
    329a:	f9 01       	movw	r30, r18
    329c:	31 97       	sbiw	r30, 0x01	; 1
    329e:	f1 f7       	brne	.-4      	; 0x329c <LCD_open+0xa0>
    32a0:	01 96       	adiw	r24, 0x01	; 1
    32a2:	43 e0       	ldi	r20, 0x03	; 3
    32a4:	88 3e       	cpi	r24, 0xE8	; 232
    32a6:	94 07       	cpc	r25, r20
    32a8:	c1 f7       	brne	.-16     	; 0x329a <LCD_open+0x9e>
    32aa:	83 eb       	ldi	r24, 0xB3	; 179
    32ac:	60 e0       	ldi	r22, 0x00	; 0
    32ae:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    32b2:	80 e4       	ldi	r24, 0x40	; 64
    32b4:	60 e0       	ldi	r22, 0x00	; 0
    32b6:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    32ba:	83 e0       	ldi	r24, 0x03	; 3
    32bc:	60 e0       	ldi	r22, 0x00	; 0
    32be:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_set_PGC_addr>
    32c2:	83 e0       	ldi	r24, 0x03	; 3
    32c4:	60 e0       	ldi	r22, 0x00	; 0
    32c6:	0e 94 a0 19 	call	0x3340	; 0x3340 <LCD_set_next_PGC>
    32ca:	10 92 9d 08 	sts	0x089D, r1
    32ce:	10 92 9f 08 	sts	0x089F, r1
    32d2:	10 92 9e 08 	sts	0x089E, r1
    32d6:	86 e4       	ldi	r24, 0x46	; 70
    32d8:	93 e0       	ldi	r25, 0x03	; 3
    32da:	90 93 ce 08 	sts	0x08CE, r25
    32de:	80 93 cd 08 	sts	0x08CD, r24
    32e2:	88 e1       	ldi	r24, 0x18	; 24
    32e4:	0e 94 7f 19 	call	0x32fe	; 0x32fe <LCD_set_backlight>
    32e8:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
    32ec:	84 ea       	ldi	r24, 0xA4	; 164
    32ee:	60 e0       	ldi	r22, 0x00	; 0
    32f0:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    32f4:	85 e0       	ldi	r24, 0x05	; 5
    32f6:	91 e0       	ldi	r25, 0x01	; 1
    32f8:	1f 91       	pop	r17
    32fa:	0f 91       	pop	r16
    32fc:	08 95       	ret

000032fe <LCD_set_backlight>:
    32fe:	1f 93       	push	r17
    3300:	18 2f       	mov	r17, r24
    3302:	85 e0       	ldi	r24, 0x05	; 5
    3304:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    3308:	81 30       	cpi	r24, 0x01	; 1
    330a:	c1 f4       	brne	.+48     	; 0x333c <LCD_set_backlight+0x3e>
    330c:	87 e0       	ldi	r24, 0x07	; 7
    330e:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <SPI_set_slave_addr>
    3312:	82 e0       	ldi	r24, 0x02	; 2
    3314:	6a e0       	ldi	r22, 0x0A	; 10
    3316:	0e 94 4d 1a 	call	0x349a	; 0x349a <SPI_transmit>
    331a:	82 e0       	ldi	r24, 0x02	; 2
    331c:	61 eb       	ldi	r22, 0xB1	; 177
    331e:	0e 94 4d 1a 	call	0x349a	; 0x349a <SPI_transmit>
    3322:	61 2f       	mov	r22, r17
    3324:	11 32       	cpi	r17, 0x21	; 33
    3326:	08 f0       	brcs	.+2      	; 0x332a <LCD_set_backlight+0x2c>
    3328:	60 e2       	ldi	r22, 0x20	; 32
    332a:	82 e0       	ldi	r24, 0x02	; 2
    332c:	0e 94 4d 1a 	call	0x349a	; 0x349a <SPI_transmit>
    3330:	89 ee       	ldi	r24, 0xE9	; 233
    3332:	8a 95       	dec	r24
    3334:	f1 f7       	brne	.-4      	; 0x3332 <LCD_set_backlight+0x34>
    3336:	87 e0       	ldi	r24, 0x07	; 7
    3338:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <SPI_set_slave_addr>
    333c:	1f 91       	pop	r17
    333e:	08 95       	ret

00003340 <LCD_set_next_PGC>:
    3340:	83 70       	andi	r24, 0x03	; 3
    3342:	6f 77       	andi	r22, 0x7F	; 127
    3344:	60 93 9b 08 	sts	0x089B, r22
    3348:	80 93 9c 08 	sts	0x089C, r24
    334c:	08 95       	ret

0000334e <LCD_set_PGC_addr>:
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	06 2f       	mov	r16, r22
    3354:	16 2f       	mov	r17, r22
    3356:	1f 77       	andi	r17, 0x7F	; 127
    3358:	83 70       	andi	r24, 0x03	; 3
    335a:	80 6b       	ori	r24, 0xB0	; 176
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    3362:	12 95       	swap	r17
    3364:	1f 70       	andi	r17, 0x0F	; 15
    3366:	81 2f       	mov	r24, r17
    3368:	80 61       	ori	r24, 0x10	; 16
    336a:	60 e0       	ldi	r22, 0x00	; 0
    336c:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    3370:	80 2f       	mov	r24, r16
    3372:	8f 70       	andi	r24, 0x0F	; 15
    3374:	60 e0       	ldi	r22, 0x00	; 0
    3376:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    337a:	1f 91       	pop	r17
    337c:	0f 91       	pop	r16
    337e:	08 95       	ret

00003380 <LCD_write>:
    3380:	0f 93       	push	r16
    3382:	1f 93       	push	r17
    3384:	08 2f       	mov	r16, r24
    3386:	16 2f       	mov	r17, r22
    3388:	85 e0       	ldi	r24, 0x05	; 5
    338a:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    338e:	81 30       	cpi	r24, 0x01	; 1
    3390:	79 f4       	brne	.+30     	; 0x33b0 <LCD_write+0x30>
    3392:	11 23       	and	r17, r17
    3394:	19 f0       	breq	.+6      	; 0x339c <LCD_write+0x1c>
    3396:	11 30       	cpi	r17, 0x01	; 1
    3398:	21 f4       	brne	.+8      	; 0x33a2 <LCD_write+0x22>
    339a:	02 c0       	rjmp	.+4      	; 0x33a0 <LCD_write+0x20>
    339c:	2b 98       	cbi	0x05, 3	; 5
    339e:	01 c0       	rjmp	.+2      	; 0x33a2 <LCD_write+0x22>
    33a0:	2b 9a       	sbi	0x05, 3	; 5
    33a2:	86 e0       	ldi	r24, 0x06	; 6
    33a4:	8a 95       	dec	r24
    33a6:	f1 f7       	brne	.-4      	; 0x33a4 <LCD_write+0x24>
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	60 2f       	mov	r22, r16
    33ac:	0e 94 4d 1a 	call	0x349a	; 0x349a <SPI_transmit>
    33b0:	1f 91       	pop	r17
    33b2:	0f 91       	pop	r16
    33b4:	08 95       	ret

000033b6 <LED_clr_pattern>:
    33b6:	1f 93       	push	r17
    33b8:	18 2f       	mov	r17, r24
    33ba:	86 e0       	ldi	r24, 0x06	; 6
    33bc:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    33c0:	81 30       	cpi	r24, 0x01	; 1
    33c2:	19 f4       	brne	.+6      	; 0x33ca <LED_clr_pattern+0x14>
    33c4:	81 2f       	mov	r24, r17
    33c6:	0e 94 03 24 	call	0x4806	; 0x4806 <__LED_clr_pattern>
    33ca:	1f 91       	pop	r17
    33cc:	08 95       	ret

000033ce <LED_open>:
    33ce:	0e 94 08 24 	call	0x4810	; 0x4810 <__LED_init>
    33d2:	86 e0       	ldi	r24, 0x06	; 6
    33d4:	61 e0       	ldi	r22, 0x01	; 1
    33d6:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    33da:	86 e0       	ldi	r24, 0x06	; 6
    33dc:	91 e0       	ldi	r25, 0x01	; 1
    33de:	08 95       	ret

000033e0 <LED_set_pattern>:
    33e0:	1f 93       	push	r17
    33e2:	18 2f       	mov	r17, r24
    33e4:	86 e0       	ldi	r24, 0x06	; 6
    33e6:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    33ea:	81 30       	cpi	r24, 0x01	; 1
    33ec:	19 f4       	brne	.+6      	; 0x33f4 <LED_set_pattern+0x14>
    33ee:	81 2f       	mov	r24, r17
    33f0:	0e 94 0b 24 	call	0x4816	; 0x4816 <__LED_set_pattern>
    33f4:	1f 91       	pop	r17
    33f6:	08 95       	ret

000033f8 <SPI_set_slave_addr>:
    33f8:	1f 93       	push	r17
    33fa:	18 2f       	mov	r17, r24
    33fc:	82 e0       	ldi	r24, 0x02	; 2
    33fe:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    3402:	81 30       	cpi	r24, 0x01	; 1
    3404:	09 f0       	breq	.+2      	; 0x3408 <SPI_set_slave_addr+0x10>
    3406:	47 c0       	rjmp	.+142    	; 0x3496 <SPI_set_slave_addr+0x9e>
    3408:	91 2f       	mov	r25, r17
    340a:	97 70       	andi	r25, 0x07	; 7
    340c:	80 91 a0 08 	lds	r24, 0x08A0
    3410:	98 17       	cp	r25, r24
    3412:	09 f4       	brne	.+2      	; 0x3416 <SPI_set_slave_addr+0x1e>
    3414:	40 c0       	rjmp	.+128    	; 0x3496 <SPI_set_slave_addr+0x9e>
    3416:	90 93 a0 08 	sts	0x08A0, r25
    341a:	85 b1       	in	r24, 0x05	; 5
    341c:	88 7f       	andi	r24, 0xF8	; 248
    341e:	89 2b       	or	r24, r25
    3420:	85 b9       	out	0x05, r24	; 5
    3422:	93 30       	cpi	r25, 0x03	; 3
    3424:	11 f1       	breq	.+68     	; 0x346a <SPI_set_slave_addr+0x72>
    3426:	94 30       	cpi	r25, 0x04	; 4
    3428:	28 f4       	brcc	.+10     	; 0x3434 <SPI_set_slave_addr+0x3c>
    342a:	91 30       	cpi	r25, 0x01	; 1
    342c:	51 f0       	breq	.+20     	; 0x3442 <SPI_set_slave_addr+0x4a>
    342e:	92 30       	cpi	r25, 0x02	; 2
    3430:	90 f4       	brcc	.+36     	; 0x3456 <SPI_set_slave_addr+0x5e>
    3432:	0c c0       	rjmp	.+24     	; 0x344c <SPI_set_slave_addr+0x54>
    3434:	95 30       	cpi	r25, 0x05	; 5
    3436:	19 f1       	breq	.+70     	; 0x347e <SPI_set_slave_addr+0x86>
    3438:	95 30       	cpi	r25, 0x05	; 5
    343a:	e0 f0       	brcs	.+56     	; 0x3474 <SPI_set_slave_addr+0x7c>
    343c:	96 30       	cpi	r25, 0x06	; 6
    343e:	21 f5       	brne	.+72     	; 0x3488 <SPI_set_slave_addr+0x90>
    3440:	0f c0       	rjmp	.+30     	; 0x3460 <SPI_set_slave_addr+0x68>
    3442:	e0 91 e8 03 	lds	r30, 0x03E8
    3446:	f0 91 e9 03 	lds	r31, 0x03E9
    344a:	22 c0       	rjmp	.+68     	; 0x3490 <SPI_set_slave_addr+0x98>
    344c:	e0 91 e6 03 	lds	r30, 0x03E6
    3450:	f0 91 e7 03 	lds	r31, 0x03E7
    3454:	1d c0       	rjmp	.+58     	; 0x3490 <SPI_set_slave_addr+0x98>
    3456:	e0 91 ea 03 	lds	r30, 0x03EA
    345a:	f0 91 eb 03 	lds	r31, 0x03EB
    345e:	18 c0       	rjmp	.+48     	; 0x3490 <SPI_set_slave_addr+0x98>
    3460:	e0 91 f2 03 	lds	r30, 0x03F2
    3464:	f0 91 f3 03 	lds	r31, 0x03F3
    3468:	13 c0       	rjmp	.+38     	; 0x3490 <SPI_set_slave_addr+0x98>
    346a:	e0 91 ec 03 	lds	r30, 0x03EC
    346e:	f0 91 ed 03 	lds	r31, 0x03ED
    3472:	0e c0       	rjmp	.+28     	; 0x3490 <SPI_set_slave_addr+0x98>
    3474:	e0 91 ee 03 	lds	r30, 0x03EE
    3478:	f0 91 ef 03 	lds	r31, 0x03EF
    347c:	09 c0       	rjmp	.+18     	; 0x3490 <SPI_set_slave_addr+0x98>
    347e:	e0 91 f0 03 	lds	r30, 0x03F0
    3482:	f0 91 f1 03 	lds	r31, 0x03F1
    3486:	04 c0       	rjmp	.+8      	; 0x3490 <SPI_set_slave_addr+0x98>
    3488:	e0 91 f4 03 	lds	r30, 0x03F4
    348c:	f0 91 f5 03 	lds	r31, 0x03F5
    3490:	30 97       	sbiw	r30, 0x00	; 0
    3492:	09 f0       	breq	.+2      	; 0x3496 <SPI_set_slave_addr+0x9e>
    3494:	09 95       	icall
    3496:	1f 91       	pop	r17
    3498:	08 95       	ret

0000349a <SPI_transmit>:
    349a:	1f 93       	push	r17
    349c:	16 2f       	mov	r17, r22
    349e:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <SPI_set_slave_addr>
    34a2:	82 e0       	ldi	r24, 0x02	; 2
    34a4:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    34a8:	81 30       	cpi	r24, 0x01	; 1
    34aa:	21 f4       	brne	.+8      	; 0x34b4 <SPI_transmit+0x1a>
    34ac:	1e bd       	out	0x2e, r17	; 46
    34ae:	0d b4       	in	r0, 0x2d	; 45
    34b0:	07 fe       	sbrs	r0, 7
    34b2:	fd cf       	rjmp	.-6      	; 0x34ae <SPI_transmit+0x14>
    34b4:	1f 91       	pop	r17
    34b6:	08 95       	ret

000034b8 <__SPKR_set_up_freq_LUT>:
    34b8:	0f 93       	push	r16
    34ba:	1f 93       	push	r17
    34bc:	cf 93       	push	r28
    34be:	df 93       	push	r29
    34c0:	80 e2       	ldi	r24, 0x20	; 32
    34c2:	91 e0       	ldi	r25, 0x01	; 1
    34c4:	0e 94 59 33 	call	0x66b2	; 0x66b2 <malloc>
    34c8:	9c 01       	movw	r18, r24
    34ca:	90 93 05 04 	sts	0x0405, r25
    34ce:	80 93 04 04 	sts	0x0404, r24
    34d2:	89 2b       	or	r24, r25
    34d4:	11 f4       	brne	.+4      	; 0x34da <__SPKR_set_up_freq_LUT+0x22>
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	39 c0       	rjmp	.+114    	; 0x354c <__SPKR_set_up_freq_LUT+0x94>
    34da:	89 01       	movw	r16, r18
    34dc:	c0 e0       	ldi	r28, 0x00	; 0
    34de:	d0 e0       	ldi	r29, 0x00	; 0
    34e0:	be 01       	movw	r22, r28
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	0e 94 9a 2c 	call	0x5934	; 0x5934 <__floatunsisf>
    34ea:	20 e0       	ldi	r18, 0x00	; 0
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	40 ea       	ldi	r20, 0xA0	; 160
    34f0:	51 e4       	ldi	r21, 0x41	; 65
    34f2:	0e 94 01 2c 	call	0x5802	; 0x5802 <__divsf3>
    34f6:	27 ef       	ldi	r18, 0xF7	; 247
    34f8:	35 e7       	ldi	r19, 0x75	; 117
    34fa:	40 e0       	ldi	r20, 0x00	; 0
    34fc:	5f e3       	ldi	r21, 0x3F	; 63
    34fe:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    3502:	9b 01       	movw	r18, r22
    3504:	ac 01       	movw	r20, r24
    3506:	60 e0       	ldi	r22, 0x00	; 0
    3508:	70 e0       	ldi	r23, 0x00	; 0
    350a:	80 e2       	ldi	r24, 0x20	; 32
    350c:	91 e4       	ldi	r25, 0x41	; 65
    350e:	0e 94 ed 2d 	call	0x5bda	; 0x5bda <pow>
    3512:	9b 01       	movw	r18, r22
    3514:	ac 01       	movw	r20, r24
    3516:	ca 01       	movw	r24, r20
    3518:	b9 01       	movw	r22, r18
    351a:	2d ec       	ldi	r18, 0xCD	; 205
    351c:	3c ec       	ldi	r19, 0xCC	; 204
    351e:	42 e8       	ldi	r20, 0x82	; 130
    3520:	51 e4       	ldi	r21, 0x41	; 65
    3522:	0e 94 8a 2d 	call	0x5b14	; 0x5b14 <__mulsf3>
    3526:	0e 94 50 2d 	call	0x5aa0	; 0x5aa0 <lrint>
    352a:	2a e0       	ldi	r18, 0x0A	; 10
    352c:	30 e0       	ldi	r19, 0x00	; 0
    352e:	40 e0       	ldi	r20, 0x00	; 0
    3530:	50 e0       	ldi	r21, 0x00	; 0
    3532:	0e 94 ba 32 	call	0x6574	; 0x6574 <__mulsi3>
    3536:	f8 01       	movw	r30, r16
    3538:	61 93       	st	Z+, r22
    353a:	71 93       	st	Z+, r23
    353c:	81 93       	st	Z+, r24
    353e:	91 93       	st	Z+, r25
    3540:	8f 01       	movw	r16, r30
    3542:	21 96       	adiw	r28, 0x01	; 1
    3544:	c8 34       	cpi	r28, 0x48	; 72
    3546:	d1 05       	cpc	r29, r1
    3548:	59 f6       	brne	.-106    	; 0x34e0 <__SPKR_set_up_freq_LUT+0x28>
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	df 91       	pop	r29
    354e:	cf 91       	pop	r28
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    3554:	08 95       	ret

00003556 <__SPKR_open_beep_mode>:
    3556:	8a e0       	ldi	r24, 0x0A	; 10
    3558:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    355c:	88 23       	and	r24, r24
    355e:	71 f4       	brne	.+28     	; 0x357c <__SPKR_open_beep_mode+0x26>
    3560:	10 92 01 04 	sts	0x0401, r1
    3564:	10 92 00 04 	sts	0x0400, r1
    3568:	81 e0       	ldi	r24, 0x01	; 1
    356a:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__SPKR_init>
    356e:	81 e0       	ldi	r24, 0x01	; 1
    3570:	80 93 f7 03 	sts	0x03F7, r24
    3574:	8a e0       	ldi	r24, 0x0A	; 10
    3576:	61 e0       	ldi	r22, 0x01	; 1
    3578:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    357c:	8a e0       	ldi	r24, 0x0A	; 10
    357e:	91 e0       	ldi	r25, 0x01	; 1
    3580:	08 95       	ret

00003582 <__SPKR_open_tone_mode>:
    3582:	1f 93       	push	r17
    3584:	8b e0       	ldi	r24, 0x0B	; 11
    3586:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    358a:	88 23       	and	r24, r24
    358c:	11 f0       	breq	.+4      	; 0x3592 <__SPKR_open_tone_mode+0x10>
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	21 c0       	rjmp	.+66     	; 0x35d4 <__SPKR_open_tone_mode+0x52>
    3592:	89 e0       	ldi	r24, 0x09	; 9
    3594:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    3598:	88 23       	and	r24, r24
    359a:	d9 f4       	brne	.+54     	; 0x35d2 <__SPKR_open_tone_mode+0x50>
    359c:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <__SPKR_set_up_freq_LUT>
    35a0:	18 2f       	mov	r17, r24
    35a2:	81 30       	cpi	r24, 0x01	; 1
    35a4:	b1 f4       	brne	.+44     	; 0x35d2 <__SPKR_open_tone_mode+0x50>
    35a6:	10 92 f8 03 	sts	0x03F8, r1
    35aa:	10 92 f9 03 	sts	0x03F9, r1
    35ae:	10 92 fa 03 	sts	0x03FA, r1
    35b2:	10 92 fb 03 	sts	0x03FB, r1
    35b6:	8d e0       	ldi	r24, 0x0D	; 13
    35b8:	69 ec       	ldi	r22, 0xC9	; 201
    35ba:	74 e2       	ldi	r23, 0x24	; 36
    35bc:	0e 94 2c 23 	call	0x4658	; 0x4658 <ISR_attach>
    35c0:	82 e0       	ldi	r24, 0x02	; 2
    35c2:	0e 94 46 25 	call	0x4a8c	; 0x4a8c <__SPKR_init>
    35c6:	10 93 f6 03 	sts	0x03F6, r17
    35ca:	89 e0       	ldi	r24, 0x09	; 9
    35cc:	61 e0       	ldi	r22, 0x01	; 1
    35ce:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    35d2:	91 e0       	ldi	r25, 0x01	; 1
    35d4:	89 e0       	ldi	r24, 0x09	; 9
    35d6:	1f 91       	pop	r17
    35d8:	08 95       	ret

000035da <SPKR_open>:
    35da:	81 30       	cpi	r24, 0x01	; 1
    35dc:	29 f0       	breq	.+10     	; 0x35e8 <SPKR_open+0xe>
    35de:	82 30       	cpi	r24, 0x02	; 2
    35e0:	31 f0       	breq	.+12     	; 0x35ee <SPKR_open+0x14>
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	89 e0       	ldi	r24, 0x09	; 9
    35e6:	08 95       	ret
    35e8:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__SPKR_open_beep_mode>
    35ec:	08 95       	ret
    35ee:	0e 94 c1 1a 	call	0x3582	; 0x3582 <__SPKR_open_tone_mode>
    35f2:	08 95       	ret

000035f4 <STEPPER_get_nSteps>:
    35f4:	80 91 61 08 	lds	r24, 0x0861
    35f8:	90 91 62 08 	lds	r25, 0x0862
    35fc:	20 91 63 08 	lds	r18, 0x0863
    3600:	30 91 64 08 	lds	r19, 0x0864
    3604:	bc 01       	movw	r22, r24
    3606:	c9 01       	movw	r24, r18
    3608:	08 95       	ret

0000360a <STEPPER_stepmode>:
    360a:	2f 92       	push	r2
    360c:	3f 92       	push	r3
    360e:	4f 92       	push	r4
    3610:	5f 92       	push	r5
    3612:	6f 92       	push	r6
    3614:	7f 92       	push	r7
    3616:	8f 92       	push	r8
    3618:	9f 92       	push	r9
    361a:	af 92       	push	r10
    361c:	bf 92       	push	r11
    361e:	cf 92       	push	r12
    3620:	df 92       	push	r13
    3622:	ef 92       	push	r14
    3624:	ff 92       	push	r15
    3626:	0f 93       	push	r16
    3628:	1f 93       	push	r17
    362a:	df 93       	push	r29
    362c:	cf 93       	push	r28
    362e:	cd b7       	in	r28, 0x3d	; 61
    3630:	de b7       	in	r29, 0x3e	; 62
    3632:	58 2e       	mov	r5, r24
    3634:	96 2e       	mov	r9, r22
    3636:	44 2e       	mov	r4, r20
    3638:	39 01       	movw	r6, r18
    363a:	3c 2c       	mov	r3, r12
    363c:	c9 8c       	ldd	r12, Y+25	; 0x19
    363e:	da 8c       	ldd	r13, Y+26	; 0x1a
    3640:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3642:	81 e0       	ldi	r24, 0x01	; 1
    3644:	68 17       	cp	r22, r24
    3646:	39 f1       	breq	.+78     	; 0x3696 <STEPPER_stepmode+0x8c>
    3648:	68 17       	cp	r22, r24
    364a:	28 f0       	brcs	.+10     	; 0x3656 <STEPPER_stepmode+0x4c>
    364c:	92 e0       	ldi	r25, 0x02	; 2
    364e:	69 17       	cp	r22, r25
    3650:	09 f0       	breq	.+2      	; 0x3654 <STEPPER_stepmode+0x4a>
    3652:	85 c0       	rjmp	.+266    	; 0x375e <STEPPER_stepmode+0x154>
    3654:	49 c0       	rjmp	.+146    	; 0x36e8 <STEPPER_stepmode+0xde>
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	61 e0       	ldi	r22, 0x01	; 1
    365a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <STEPPER_set_mode>
    365e:	80 e0       	ldi	r24, 0x00	; 0
    3660:	b7 01       	movw	r22, r14
    3662:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <STEPPER_set_accel>
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	64 2d       	mov	r22, r4
    366a:	a3 01       	movw	r20, r6
    366c:	98 01       	movw	r18, r16
    366e:	03 2d       	mov	r16, r3
    3670:	ee 24       	eor	r14, r14
    3672:	e3 94       	inc	r14
    3674:	e6 e8       	ldi	r30, 0x86	; 134
    3676:	ce 2e       	mov	r12, r30
    3678:	e8 e0       	ldi	r30, 0x08	; 8
    367a:	de 2e       	mov	r13, r30
    367c:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <STEPPER_step>
    3680:	55 20       	and	r5, r5
    3682:	09 f0       	breq	.+2      	; 0x3686 <STEPPER_stepmode+0x7c>
    3684:	6c c0       	rjmp	.+216    	; 0x375e <STEPPER_stepmode+0x154>
    3686:	00 d0       	rcall	.+0      	; 0x3688 <STEPPER_stepmode+0x7e>
    3688:	0f 92       	push	r0
    368a:	ed b7       	in	r30, 0x3d	; 61
    368c:	fe b7       	in	r31, 0x3e	; 62
    368e:	11 82       	std	Z+1, r1	; 0x01
    3690:	b3 82       	std	Z+3, r11	; 0x03
    3692:	a2 82       	std	Z+2, r10	; 0x02
    3694:	23 c0       	rjmp	.+70     	; 0x36dc <STEPPER_stepmode+0xd2>
    3696:	81 e0       	ldi	r24, 0x01	; 1
    3698:	61 e0       	ldi	r22, 0x01	; 1
    369a:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <STEPPER_set_mode>
    369e:	81 e0       	ldi	r24, 0x01	; 1
    36a0:	b6 01       	movw	r22, r12
    36a2:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <STEPPER_set_accel>
    36a6:	81 e0       	ldi	r24, 0x01	; 1
    36a8:	68 2d       	mov	r22, r8
    36aa:	4d 89       	ldd	r20, Y+21	; 0x15
    36ac:	5e 89       	ldd	r21, Y+22	; 0x16
    36ae:	2f 89       	ldd	r18, Y+23	; 0x17
    36b0:	38 8d       	ldd	r19, Y+24	; 0x18
    36b2:	02 2d       	mov	r16, r2
    36b4:	ee 24       	eor	r14, r14
    36b6:	e3 94       	inc	r14
    36b8:	76 e8       	ldi	r23, 0x86	; 134
    36ba:	c7 2e       	mov	r12, r23
    36bc:	78 e0       	ldi	r23, 0x08	; 8
    36be:	d7 2e       	mov	r13, r23
    36c0:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <STEPPER_step>
    36c4:	55 20       	and	r5, r5
    36c6:	09 f0       	breq	.+2      	; 0x36ca <STEPPER_stepmode+0xc0>
    36c8:	4a c0       	rjmp	.+148    	; 0x375e <STEPPER_stepmode+0x154>
    36ca:	00 d0       	rcall	.+0      	; 0x36cc <STEPPER_stepmode+0xc2>
    36cc:	0f 92       	push	r0
    36ce:	ed b7       	in	r30, 0x3d	; 61
    36d0:	fe b7       	in	r31, 0x3e	; 62
    36d2:	91 82       	std	Z+1, r9	; 0x01
    36d4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    36d6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    36d8:	93 83       	std	Z+3, r25	; 0x03
    36da:	82 83       	std	Z+2, r24	; 0x02
    36dc:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <STEPPER_wait_and_then>
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	3b c0       	rjmp	.+118    	; 0x375e <STEPPER_stepmode+0x154>
    36e8:	82 e0       	ldi	r24, 0x02	; 2
    36ea:	61 e0       	ldi	r22, 0x01	; 1
    36ec:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <STEPPER_set_mode>
    36f0:	80 e0       	ldi	r24, 0x00	; 0
    36f2:	b7 01       	movw	r22, r14
    36f4:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <STEPPER_set_accel>
    36f8:	81 e0       	ldi	r24, 0x01	; 1
    36fa:	b6 01       	movw	r22, r12
    36fc:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <STEPPER_set_accel>
    3700:	80 e0       	ldi	r24, 0x00	; 0
    3702:	64 2d       	mov	r22, r4
    3704:	a3 01       	movw	r20, r6
    3706:	98 01       	movw	r18, r16
    3708:	03 2d       	mov	r16, r3
    370a:	ee 24       	eor	r14, r14
    370c:	e3 94       	inc	r14
    370e:	96 e8       	ldi	r25, 0x86	; 134
    3710:	c9 2e       	mov	r12, r25
    3712:	98 e0       	ldi	r25, 0x08	; 8
    3714:	d9 2e       	mov	r13, r25
    3716:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <STEPPER_step>
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	68 2d       	mov	r22, r8
    371e:	4d 89       	ldd	r20, Y+21	; 0x15
    3720:	5e 89       	ldd	r21, Y+22	; 0x16
    3722:	2f 89       	ldd	r18, Y+23	; 0x17
    3724:	38 8d       	ldd	r19, Y+24	; 0x18
    3726:	02 2d       	mov	r16, r2
    3728:	0e 94 45 1d 	call	0x3a8a	; 0x3a8a <STEPPER_step>
    372c:	55 20       	and	r5, r5
    372e:	b9 f4       	brne	.+46     	; 0x375e <STEPPER_stepmode+0x154>
    3730:	00 d0       	rcall	.+0      	; 0x3732 <STEPPER_stepmode+0x128>
    3732:	00 d0       	rcall	.+0      	; 0x3734 <STEPPER_stepmode+0x12a>
    3734:	0f 92       	push	r0
    3736:	ad b7       	in	r26, 0x3d	; 61
    3738:	be b7       	in	r27, 0x3e	; 62
    373a:	11 96       	adiw	r26, 0x01	; 1
    373c:	ed b7       	in	r30, 0x3d	; 61
    373e:	fe b7       	in	r31, 0x3e	; 62
    3740:	91 82       	std	Z+1, r9	; 0x01
    3742:	fd 01       	movw	r30, r26
    3744:	b2 82       	std	Z+2, r11	; 0x02
    3746:	a1 82       	std	Z+1, r10	; 0x01
    3748:	8c 8d       	ldd	r24, Y+28	; 0x1c
    374a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    374c:	94 83       	std	Z+4, r25	; 0x04
    374e:	83 83       	std	Z+3, r24	; 0x03
    3750:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <STEPPER_wait_and_then>
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	0f 90       	pop	r0
    375a:	0f 90       	pop	r0
    375c:	0f 90       	pop	r0
    375e:	cf 91       	pop	r28
    3760:	df 91       	pop	r29
    3762:	1f 91       	pop	r17
    3764:	0f 91       	pop	r16
    3766:	ff 90       	pop	r15
    3768:	ef 90       	pop	r14
    376a:	df 90       	pop	r13
    376c:	cf 90       	pop	r12
    376e:	bf 90       	pop	r11
    3770:	af 90       	pop	r10
    3772:	9f 90       	pop	r9
    3774:	8f 90       	pop	r8
    3776:	7f 90       	pop	r7
    3778:	6f 90       	pop	r6
    377a:	5f 90       	pop	r5
    377c:	4f 90       	pop	r4
    377e:	3f 90       	pop	r3
    3780:	2f 90       	pop	r2
    3782:	08 95       	ret

00003784 <STEPPER_move>:
    3784:	6f 92       	push	r6
    3786:	7f 92       	push	r7
    3788:	8f 92       	push	r8
    378a:	9f 92       	push	r9
    378c:	af 92       	push	r10
    378e:	bf 92       	push	r11
    3790:	cf 92       	push	r12
    3792:	df 92       	push	r13
    3794:	ef 92       	push	r14
    3796:	ff 92       	push	r15
    3798:	0f 93       	push	r16
    379a:	1f 93       	push	r17
    379c:	df 93       	push	r29
    379e:	cf 93       	push	r28
    37a0:	cd b7       	in	r28, 0x3d	; 61
    37a2:	de b7       	in	r29, 0x3e	; 62
    37a4:	94 2e       	mov	r9, r20
    37a6:	7c 2d       	mov	r23, r12
    37a8:	d5 01       	movw	r26, r10
    37aa:	49 89       	ldd	r20, Y+17	; 0x11
    37ac:	5a 89       	ldd	r21, Y+18	; 0x12
    37ae:	ab 88       	ldd	r10, Y+19	; 0x13
    37b0:	bc 88       	ldd	r11, Y+20	; 0x14
    37b2:	cd 88       	ldd	r12, Y+21	; 0x15
    37b4:	de 88       	ldd	r13, Y+22	; 0x16
    37b6:	9f 89       	ldd	r25, Y+23	; 0x17
    37b8:	81 30       	cpi	r24, 0x01	; 1
    37ba:	09 f4       	brne	.+2      	; 0x37be <STEPPER_move+0x3a>
    37bc:	57 c0       	rjmp	.+174    	; 0x386c <STEPPER_move+0xe8>
    37be:	81 30       	cpi	r24, 0x01	; 1
    37c0:	b8 f1       	brcs	.+110    	; 0x3830 <STEPPER_move+0xac>
    37c2:	82 30       	cpi	r24, 0x02	; 2
    37c4:	09 f0       	breq	.+2      	; 0x37c8 <STEPPER_move+0x44>
    37c6:	76 c0       	rjmp	.+236    	; 0x38b4 <STEPPER_move+0x130>
    37c8:	61 30       	cpi	r22, 0x01	; 1
    37ca:	91 f0       	breq	.+36     	; 0x37f0 <STEPPER_move+0x6c>
    37cc:	61 30       	cpi	r22, 0x01	; 1
    37ce:	20 f0       	brcs	.+8      	; 0x37d8 <STEPPER_move+0x54>
    37d0:	62 30       	cpi	r22, 0x02	; 2
    37d2:	09 f0       	breq	.+2      	; 0x37d6 <STEPPER_move+0x52>
    37d4:	6f c0       	rjmp	.+222    	; 0x38b4 <STEPPER_move+0x130>
    37d6:	15 c0       	rjmp	.+42     	; 0x3802 <STEPPER_move+0x7e>
    37d8:	80 e0       	ldi	r24, 0x00	; 0
    37da:	60 e0       	ldi	r22, 0x00	; 0
    37dc:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <STEPPER_set_mode>
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	b7 01       	movw	r22, r14
    37e4:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <STEPPER_set_accel>
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	69 2d       	mov	r22, r9
    37ec:	a8 01       	movw	r20, r16
    37ee:	1d c0       	rjmp	.+58     	; 0x382a <STEPPER_move+0xa6>
    37f0:	81 e0       	ldi	r24, 0x01	; 1
    37f2:	60 e0       	ldi	r22, 0x00	; 0
    37f4:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <STEPPER_set_mode>
    37f8:	81 e0       	ldi	r24, 0x01	; 1
    37fa:	b6 01       	movw	r22, r12
    37fc:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <STEPPER_set_accel>
    3800:	11 c0       	rjmp	.+34     	; 0x3824 <STEPPER_move+0xa0>
    3802:	82 e0       	ldi	r24, 0x02	; 2
    3804:	60 e0       	ldi	r22, 0x00	; 0
    3806:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <STEPPER_set_mode>
    380a:	80 e0       	ldi	r24, 0x00	; 0
    380c:	b7 01       	movw	r22, r14
    380e:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <STEPPER_set_accel>
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	b6 01       	movw	r22, r12
    3816:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <STEPPER_set_accel>
    381a:	80 e0       	ldi	r24, 0x00	; 0
    381c:	69 2d       	mov	r22, r9
    381e:	a8 01       	movw	r20, r16
    3820:	0e 94 c0 1c 	call	0x3980	; 0x3980 <STEPPER_run>
    3824:	81 e0       	ldi	r24, 0x01	; 1
    3826:	68 2d       	mov	r22, r8
    3828:	a5 01       	movw	r20, r10
    382a:	0e 94 c0 1c 	call	0x3980	; 0x3980 <STEPPER_run>
    382e:	42 c0       	rjmp	.+132    	; 0x38b4 <STEPPER_move+0x130>
    3830:	ed b7       	in	r30, 0x3d	; 61
    3832:	fe b7       	in	r31, 0x3e	; 62
    3834:	39 97       	sbiw	r30, 0x09	; 9
    3836:	0f b6       	in	r0, 0x3f	; 63
    3838:	f8 94       	cli
    383a:	fe bf       	out	0x3e, r31	; 62
    383c:	0f be       	out	0x3f, r0	; 63
    383e:	ed bf       	out	0x3d, r30	; 61
    3840:	6d b6       	in	r6, 0x3d	; 61
    3842:	7e b6       	in	r7, 0x3e	; 62
    3844:	08 94       	sec
    3846:	61 1c       	adc	r6, r1
    3848:	71 1c       	adc	r7, r1
    384a:	52 83       	std	Z+2, r21	; 0x02
    384c:	41 83       	std	Z+1, r20	; 0x01
    384e:	f3 01       	movw	r30, r6
    3850:	b3 82       	std	Z+3, r11	; 0x03
    3852:	a2 82       	std	Z+2, r10	; 0x02
    3854:	d5 82       	std	Z+5, r13	; 0x05
    3856:	c4 82       	std	Z+4, r12	; 0x04
    3858:	96 83       	std	Z+6, r25	; 0x06
    385a:	88 8d       	ldd	r24, Y+24	; 0x18
    385c:	99 8d       	ldd	r25, Y+25	; 0x19
    385e:	90 87       	std	Z+8, r25	; 0x08
    3860:	87 83       	std	Z+7, r24	; 0x07
    3862:	80 e0       	ldi	r24, 0x00	; 0
    3864:	49 2d       	mov	r20, r9
    3866:	c7 2e       	mov	r12, r23
    3868:	5d 01       	movw	r10, r26
    386a:	1a c0       	rjmp	.+52     	; 0x38a0 <STEPPER_move+0x11c>
    386c:	ed b7       	in	r30, 0x3d	; 61
    386e:	fe b7       	in	r31, 0x3e	; 62
    3870:	39 97       	sbiw	r30, 0x09	; 9
    3872:	0f b6       	in	r0, 0x3f	; 63
    3874:	f8 94       	cli
    3876:	fe bf       	out	0x3e, r31	; 62
    3878:	0f be       	out	0x3f, r0	; 63
    387a:	ed bf       	out	0x3d, r30	; 61
    387c:	ad b7       	in	r26, 0x3d	; 61
    387e:	be b7       	in	r27, 0x3e	; 62
    3880:	11 96       	adiw	r26, 0x01	; 1
    3882:	52 83       	std	Z+2, r21	; 0x02
    3884:	41 83       	std	Z+1, r20	; 0x01
    3886:	fd 01       	movw	r30, r26
    3888:	b3 82       	std	Z+3, r11	; 0x03
    388a:	a2 82       	std	Z+2, r10	; 0x02
    388c:	d5 82       	std	Z+5, r13	; 0x05
    388e:	c4 82       	std	Z+4, r12	; 0x04
    3890:	96 83       	std	Z+6, r25	; 0x06
    3892:	10 86       	std	Z+8, r1	; 0x08
    3894:	17 82       	std	Z+7, r1	; 0x07
    3896:	81 e0       	ldi	r24, 0x01	; 1
    3898:	49 2d       	mov	r20, r9
    389a:	c7 2e       	mov	r12, r23
    389c:	aa 24       	eor	r10, r10
    389e:	bb 24       	eor	r11, r11
    38a0:	0e 94 05 1b 	call	0x360a	; 0x360a <STEPPER_stepmode>
    38a4:	8d b7       	in	r24, 0x3d	; 61
    38a6:	9e b7       	in	r25, 0x3e	; 62
    38a8:	09 96       	adiw	r24, 0x09	; 9
    38aa:	0f b6       	in	r0, 0x3f	; 63
    38ac:	f8 94       	cli
    38ae:	9e bf       	out	0x3e, r25	; 62
    38b0:	0f be       	out	0x3f, r0	; 63
    38b2:	8d bf       	out	0x3d, r24	; 61
    38b4:	cf 91       	pop	r28
    38b6:	df 91       	pop	r29
    38b8:	1f 91       	pop	r17
    38ba:	0f 91       	pop	r16
    38bc:	ff 90       	pop	r15
    38be:	ef 90       	pop	r14
    38c0:	df 90       	pop	r13
    38c2:	cf 90       	pop	r12
    38c4:	bf 90       	pop	r11
    38c6:	af 90       	pop	r10
    38c8:	9f 90       	pop	r9
    38ca:	8f 90       	pop	r8
    38cc:	7f 90       	pop	r7
    38ce:	6f 90       	pop	r6
    38d0:	08 95       	ret

000038d2 <STEPPER_open>:
    38d2:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <__STEPPER_init>
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	80 93 85 08 	sts	0x0885, r24
    38dc:	ef e4       	ldi	r30, 0x4F	; 79
    38de:	f8 e0       	ldi	r31, 0x08	; 8
    38e0:	11 92       	st	Z+, r1
    38e2:	11 92       	st	Z+, r1
    38e4:	11 82       	std	Z+1, r1	; 0x01
    38e6:	10 82       	st	Z, r1
    38e8:	32 96       	adiw	r30, 0x02	; 2
    38ea:	11 82       	std	Z+1, r1	; 0x01
    38ec:	10 82       	st	Z, r1
    38ee:	32 96       	adiw	r30, 0x02	; 2
    38f0:	11 82       	std	Z+1, r1	; 0x01
    38f2:	10 82       	st	Z, r1
    38f4:	32 96       	adiw	r30, 0x02	; 2
    38f6:	11 82       	std	Z+1, r1	; 0x01
    38f8:	10 82       	st	Z, r1
    38fa:	32 96       	adiw	r30, 0x02	; 2
    38fc:	11 82       	std	Z+1, r1	; 0x01
    38fe:	10 82       	st	Z, r1
    3900:	32 96       	adiw	r30, 0x02	; 2
    3902:	11 82       	std	Z+1, r1	; 0x01
    3904:	10 82       	st	Z, r1
    3906:	32 96       	adiw	r30, 0x02	; 2
    3908:	11 82       	std	Z+1, r1	; 0x01
    390a:	10 82       	st	Z, r1
    390c:	32 96       	adiw	r30, 0x02	; 2
    390e:	11 82       	std	Z+1, r1	; 0x01
    3910:	10 82       	st	Z, r1
    3912:	32 96       	adiw	r30, 0x02	; 2
    3914:	11 82       	std	Z+1, r1	; 0x01
    3916:	10 82       	st	Z, r1
    3918:	32 96       	adiw	r30, 0x02	; 2
    391a:	11 82       	std	Z+1, r1	; 0x01
    391c:	10 82       	st	Z, r1
    391e:	32 96       	adiw	r30, 0x02	; 2
    3920:	11 82       	std	Z+1, r1	; 0x01
    3922:	10 82       	st	Z, r1
    3924:	32 96       	adiw	r30, 0x02	; 2
    3926:	11 82       	std	Z+1, r1	; 0x01
    3928:	10 82       	st	Z, r1
    392a:	36 96       	adiw	r30, 0x06	; 6
    392c:	11 92       	st	Z+, r1
    392e:	11 92       	st	Z+, r1
    3930:	11 92       	st	Z+, r1
    3932:	10 82       	st	Z, r1
    3934:	32 96       	adiw	r30, 0x02	; 2
    3936:	11 92       	st	Z+, r1
    3938:	11 92       	st	Z+, r1
    393a:	11 92       	st	Z+, r1
    393c:	11 92       	st	Z+, r1
    393e:	11 92       	st	Z+, r1
    3940:	11 92       	st	Z+, r1
    3942:	11 92       	st	Z+, r1
    3944:	11 82       	std	Z+1, r1	; 0x01
    3946:	10 82       	st	Z, r1
    3948:	32 96       	adiw	r30, 0x02	; 2
    394a:	11 82       	std	Z+1, r1	; 0x01
    394c:	10 82       	st	Z, r1
    394e:	32 96       	adiw	r30, 0x02	; 2
    3950:	11 82       	std	Z+1, r1	; 0x01
    3952:	10 82       	st	Z, r1
    3954:	32 96       	adiw	r30, 0x02	; 2
    3956:	11 82       	std	Z+1, r1	; 0x01
    3958:	10 82       	st	Z, r1
    395a:	76 97       	sbiw	r30, 0x16	; 22
    395c:	11 82       	std	Z+1, r1	; 0x01
    395e:	10 82       	st	Z, r1
    3960:	32 96       	adiw	r30, 0x02	; 2
    3962:	11 82       	std	Z+1, r1	; 0x01
    3964:	10 82       	st	Z, r1
    3966:	10 92 84 08 	sts	0x0884, r1
    396a:	10 92 83 08 	sts	0x0883, r1
    396e:	10 92 85 08 	sts	0x0885, r1
    3972:	87 e0       	ldi	r24, 0x07	; 7
    3974:	61 e0       	ldi	r22, 0x01	; 1
    3976:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    397a:	87 e0       	ldi	r24, 0x07	; 7
    397c:	91 e0       	ldi	r25, 0x01	; 1
    397e:	08 95       	ret

00003980 <STEPPER_run>:
    3980:	ef 92       	push	r14
    3982:	ff 92       	push	r15
    3984:	0f 93       	push	r16
    3986:	1f 93       	push	r17
    3988:	18 2f       	mov	r17, r24
    398a:	06 2f       	mov	r16, r22
    398c:	7a 01       	movw	r14, r20
    398e:	60 e0       	ldi	r22, 0x00	; 0
    3990:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <STEPPER_set_mode>
    3994:	81 2f       	mov	r24, r17
    3996:	60 2f       	mov	r22, r16
    3998:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <STEPPER_set_dir>
    399c:	81 2f       	mov	r24, r17
    399e:	b7 01       	movw	r22, r14
    39a0:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <STEPPER_set_speed>
    39a4:	1f 91       	pop	r17
    39a6:	0f 91       	pop	r16
    39a8:	ff 90       	pop	r15
    39aa:	ef 90       	pop	r14
    39ac:	08 95       	ret

000039ae <STEPPER_set_accel>:
    39ae:	48 2f       	mov	r20, r24
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	80 93 85 08 	sts	0x0885, r24
    39b6:	cb 01       	movw	r24, r22
    39b8:	23 e0       	ldi	r18, 0x03	; 3
    39ba:	69 3e       	cpi	r22, 0xE9	; 233
    39bc:	72 07       	cpc	r23, r18
    39be:	10 f0       	brcs	.+4      	; 0x39c4 <STEPPER_set_accel+0x16>
    39c0:	88 ee       	ldi	r24, 0xE8	; 232
    39c2:	93 e0       	ldi	r25, 0x03	; 3
    39c4:	41 30       	cpi	r20, 0x01	; 1
    39c6:	71 f0       	breq	.+28     	; 0x39e4 <STEPPER_set_accel+0x36>
    39c8:	41 30       	cpi	r20, 0x01	; 1
    39ca:	18 f0       	brcs	.+6      	; 0x39d2 <STEPPER_set_accel+0x24>
    39cc:	42 30       	cpi	r20, 0x02	; 2
    39ce:	71 f4       	brne	.+28     	; 0x39ec <STEPPER_set_accel+0x3e>
    39d0:	05 c0       	rjmp	.+10     	; 0x39dc <STEPPER_set_accel+0x2e>
    39d2:	90 93 5a 08 	sts	0x085A, r25
    39d6:	80 93 59 08 	sts	0x0859, r24
    39da:	08 c0       	rjmp	.+16     	; 0x39ec <STEPPER_set_accel+0x3e>
    39dc:	90 93 5a 08 	sts	0x085A, r25
    39e0:	80 93 59 08 	sts	0x0859, r24
    39e4:	90 93 5c 08 	sts	0x085C, r25
    39e8:	80 93 5b 08 	sts	0x085B, r24
    39ec:	10 92 85 08 	sts	0x0885, r1
    39f0:	08 95       	ret

000039f2 <STEPPER_set_dir>:
    39f2:	98 2f       	mov	r25, r24
    39f4:	81 e0       	ldi	r24, 0x01	; 1
    39f6:	80 93 85 08 	sts	0x0885, r24
    39fa:	91 30       	cpi	r25, 0x01	; 1
    39fc:	51 f0       	breq	.+20     	; 0x3a12 <STEPPER_set_dir+0x20>
    39fe:	91 30       	cpi	r25, 0x01	; 1
    3a00:	18 f0       	brcs	.+6      	; 0x3a08 <STEPPER_set_dir+0x16>
    3a02:	92 30       	cpi	r25, 0x02	; 2
    3a04:	41 f4       	brne	.+16     	; 0x3a16 <STEPPER_set_dir+0x24>
    3a06:	03 c0       	rjmp	.+6      	; 0x3a0e <STEPPER_set_dir+0x1c>
    3a08:	60 93 72 08 	sts	0x0872, r22
    3a0c:	04 c0       	rjmp	.+8      	; 0x3a16 <STEPPER_set_dir+0x24>
    3a0e:	60 93 72 08 	sts	0x0872, r22
    3a12:	60 93 73 08 	sts	0x0873, r22
    3a16:	10 92 85 08 	sts	0x0885, r1
    3a1a:	08 95       	ret

00003a1c <STEPPER_set_mode>:
    3a1c:	98 2f       	mov	r25, r24
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	80 93 85 08 	sts	0x0885, r24
    3a24:	91 30       	cpi	r25, 0x01	; 1
    3a26:	51 f0       	breq	.+20     	; 0x3a3c <STEPPER_set_mode+0x20>
    3a28:	91 30       	cpi	r25, 0x01	; 1
    3a2a:	18 f0       	brcs	.+6      	; 0x3a32 <STEPPER_set_mode+0x16>
    3a2c:	92 30       	cpi	r25, 0x02	; 2
    3a2e:	41 f4       	brne	.+16     	; 0x3a40 <STEPPER_set_mode+0x24>
    3a30:	03 c0       	rjmp	.+6      	; 0x3a38 <STEPPER_set_mode+0x1c>
    3a32:	60 93 4f 08 	sts	0x084F, r22
    3a36:	04 c0       	rjmp	.+8      	; 0x3a40 <STEPPER_set_mode+0x24>
    3a38:	60 93 4f 08 	sts	0x084F, r22
    3a3c:	60 93 50 08 	sts	0x0850, r22
    3a40:	10 92 85 08 	sts	0x0885, r1
    3a44:	08 95       	ret

00003a46 <STEPPER_set_speed>:
    3a46:	48 2f       	mov	r20, r24
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	80 93 85 08 	sts	0x0885, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	21 e0       	ldi	r18, 0x01	; 1
    3a52:	61 39       	cpi	r22, 0x91	; 145
    3a54:	72 07       	cpc	r23, r18
    3a56:	10 f0       	brcs	.+4      	; 0x3a5c <STEPPER_set_speed+0x16>
    3a58:	80 e9       	ldi	r24, 0x90	; 144
    3a5a:	91 e0       	ldi	r25, 0x01	; 1
    3a5c:	41 30       	cpi	r20, 0x01	; 1
    3a5e:	71 f0       	breq	.+28     	; 0x3a7c <STEPPER_set_speed+0x36>
    3a60:	41 30       	cpi	r20, 0x01	; 1
    3a62:	18 f0       	brcs	.+6      	; 0x3a6a <STEPPER_set_speed+0x24>
    3a64:	42 30       	cpi	r20, 0x02	; 2
    3a66:	71 f4       	brne	.+28     	; 0x3a84 <STEPPER_set_speed+0x3e>
    3a68:	05 c0       	rjmp	.+10     	; 0x3a74 <STEPPER_set_speed+0x2e>
    3a6a:	90 93 52 08 	sts	0x0852, r25
    3a6e:	80 93 51 08 	sts	0x0851, r24
    3a72:	08 c0       	rjmp	.+16     	; 0x3a84 <STEPPER_set_speed+0x3e>
    3a74:	90 93 52 08 	sts	0x0852, r25
    3a78:	80 93 51 08 	sts	0x0851, r24
    3a7c:	90 93 54 08 	sts	0x0854, r25
    3a80:	80 93 53 08 	sts	0x0853, r24
    3a84:	10 92 85 08 	sts	0x0885, r1
    3a88:	08 95       	ret

00003a8a <STEPPER_step>:
    3a8a:	8f 92       	push	r8
    3a8c:	9f 92       	push	r9
    3a8e:	af 92       	push	r10
    3a90:	bf 92       	push	r11
    3a92:	cf 92       	push	r12
    3a94:	df 92       	push	r13
    3a96:	ef 92       	push	r14
    3a98:	ff 92       	push	r15
    3a9a:	0f 93       	push	r16
    3a9c:	1f 93       	push	r17
    3a9e:	cf 93       	push	r28
    3aa0:	df 93       	push	r29
    3aa2:	18 2f       	mov	r17, r24
    3aa4:	f6 2e       	mov	r15, r22
    3aa6:	5a 01       	movw	r10, r20
    3aa8:	49 01       	movw	r8, r18
    3aaa:	e6 01       	movw	r28, r12
    3aac:	61 e0       	ldi	r22, 0x01	; 1
    3aae:	0e 94 0e 1d 	call	0x3a1c	; 0x3a1c <STEPPER_set_mode>
    3ab2:	81 2f       	mov	r24, r17
    3ab4:	b5 01       	movw	r22, r10
    3ab6:	a4 01       	movw	r20, r8
    3ab8:	0e 94 12 26 	call	0x4c24	; 0x4c24 <STEPPER_setup_decels>
    3abc:	81 2f       	mov	r24, r17
    3abe:	6f 2d       	mov	r22, r15
    3ac0:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <STEPPER_set_dir>
    3ac4:	81 2f       	mov	r24, r17
    3ac6:	60 2f       	mov	r22, r16
    3ac8:	0e 94 fd 25 	call	0x4bfa	; 0x4bfa <STEPPER_set_stop_mode>
    3acc:	81 2f       	mov	r24, r17
    3ace:	b5 01       	movw	r22, r10
    3ad0:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <STEPPER_set_steps>
    3ad4:	c1 14       	cp	r12, r1
    3ad6:	d1 04       	cpc	r13, r1
    3ad8:	99 f0       	breq	.+38     	; 0x3b00 <STEPPER_step+0x76>
    3ada:	11 30       	cpi	r17, 0x01	; 1
    3adc:	49 f0       	breq	.+18     	; 0x3af0 <STEPPER_step+0x66>
    3ade:	11 30       	cpi	r17, 0x01	; 1
    3ae0:	18 f0       	brcs	.+6      	; 0x3ae8 <STEPPER_step+0x5e>
    3ae2:	12 30       	cpi	r17, 0x02	; 2
    3ae4:	69 f4       	brne	.+26     	; 0x3b00 <STEPPER_step+0x76>
    3ae6:	06 c0       	rjmp	.+12     	; 0x3af4 <STEPPER_step+0x6a>
    3ae8:	18 82       	st	Y, r1
    3aea:	10 92 81 08 	sts	0x0881, r1
    3aee:	08 c0       	rjmp	.+16     	; 0x3b00 <STEPPER_step+0x76>
    3af0:	19 82       	std	Y+1, r1	; 0x01
    3af2:	04 c0       	rjmp	.+8      	; 0x3afc <STEPPER_step+0x72>
    3af4:	18 82       	st	Y, r1
    3af6:	19 82       	std	Y+1, r1	; 0x01
    3af8:	10 92 81 08 	sts	0x0881, r1
    3afc:	10 92 82 08 	sts	0x0882, r1
    3b00:	d0 93 84 08 	sts	0x0884, r29
    3b04:	c0 93 83 08 	sts	0x0883, r28
    3b08:	ee 20       	and	r14, r14
    3b0a:	b9 f5       	brne	.+110    	; 0x3b7a <STEPPER_step+0xf0>
    3b0c:	86 e9       	ldi	r24, 0x96	; 150
    3b0e:	93 e0       	ldi	r25, 0x03	; 3
    3b10:	90 93 84 08 	sts	0x0884, r25
    3b14:	80 93 83 08 	sts	0x0883, r24
    3b18:	81 2f       	mov	r24, r17
    3b1a:	b4 01       	movw	r22, r8
    3b1c:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <STEPPER_set_speed>
    3b20:	81 2f       	mov	r24, r17
    3b22:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <STEPPER_go>
    3b26:	11 30       	cpi	r17, 0x01	; 1
    3b28:	71 f0       	breq	.+28     	; 0x3b46 <STEPPER_step+0xbc>
    3b2a:	11 30       	cpi	r17, 0x01	; 1
    3b2c:	18 f0       	brcs	.+6      	; 0x3b34 <STEPPER_step+0xaa>
    3b2e:	12 30       	cpi	r17, 0x02	; 2
    3b30:	59 f5       	brne	.+86     	; 0x3b88 <STEPPER_step+0xfe>
    3b32:	12 c0       	rjmp	.+36     	; 0x3b58 <STEPPER_step+0xce>
    3b34:	10 92 96 03 	sts	0x0396, r1
    3b38:	10 92 81 08 	sts	0x0881, r1
    3b3c:	80 91 96 03 	lds	r24, 0x0396
    3b40:	88 23       	and	r24, r24
    3b42:	e1 f3       	breq	.-8      	; 0x3b3c <STEPPER_step+0xb2>
    3b44:	21 c0       	rjmp	.+66     	; 0x3b88 <STEPPER_step+0xfe>
    3b46:	10 92 97 03 	sts	0x0397, r1
    3b4a:	10 92 82 08 	sts	0x0882, r1
    3b4e:	80 91 97 03 	lds	r24, 0x0397
    3b52:	88 23       	and	r24, r24
    3b54:	e1 f3       	breq	.-8      	; 0x3b4e <STEPPER_step+0xc4>
    3b56:	18 c0       	rjmp	.+48     	; 0x3b88 <STEPPER_step+0xfe>
    3b58:	10 92 96 03 	sts	0x0396, r1
    3b5c:	10 92 97 03 	sts	0x0397, r1
    3b60:	10 92 81 08 	sts	0x0881, r1
    3b64:	10 92 82 08 	sts	0x0882, r1
    3b68:	80 91 96 03 	lds	r24, 0x0396
    3b6c:	88 23       	and	r24, r24
    3b6e:	e1 f3       	breq	.-8      	; 0x3b68 <STEPPER_step+0xde>
    3b70:	80 91 97 03 	lds	r24, 0x0397
    3b74:	88 23       	and	r24, r24
    3b76:	c1 f3       	breq	.-16     	; 0x3b68 <STEPPER_step+0xde>
    3b78:	07 c0       	rjmp	.+14     	; 0x3b88 <STEPPER_step+0xfe>
    3b7a:	81 2f       	mov	r24, r17
    3b7c:	b4 01       	movw	r22, r8
    3b7e:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <STEPPER_set_speed>
    3b82:	81 2f       	mov	r24, r17
    3b84:	0e 94 c3 25 	call	0x4b86	; 0x4b86 <STEPPER_go>
    3b88:	df 91       	pop	r29
    3b8a:	cf 91       	pop	r28
    3b8c:	1f 91       	pop	r17
    3b8e:	0f 91       	pop	r16
    3b90:	ff 90       	pop	r15
    3b92:	ef 90       	pop	r14
    3b94:	df 90       	pop	r13
    3b96:	cf 90       	pop	r12
    3b98:	bf 90       	pop	r11
    3b9a:	af 90       	pop	r10
    3b9c:	9f 90       	pop	r9
    3b9e:	8f 90       	pop	r8
    3ba0:	08 95       	ret

00003ba2 <STEPPER_stop>:
    3ba2:	0f 93       	push	r16
    3ba4:	1f 93       	push	r17
    3ba6:	18 2f       	mov	r17, r24
    3ba8:	06 2f       	mov	r16, r22
    3baa:	66 23       	and	r22, r22
    3bac:	49 f4       	brne	.+18     	; 0x3bc0 <STEPPER_stop+0x1e>
    3bae:	60 e0       	ldi	r22, 0x00	; 0
    3bb0:	70 e0       	ldi	r23, 0x00	; 0
    3bb2:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <STEPPER_set_speed>
    3bb6:	81 2f       	mov	r24, r17
    3bb8:	60 e0       	ldi	r22, 0x00	; 0
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	0e 94 e2 25 	call	0x4bc4	; 0x4bc4 <STEPPER_set_steps>
    3bc0:	81 e0       	ldi	r24, 0x01	; 1
    3bc2:	80 93 85 08 	sts	0x0885, r24
    3bc6:	11 30       	cpi	r17, 0x01	; 1
    3bc8:	51 f0       	breq	.+20     	; 0x3bde <STEPPER_stop+0x3c>
    3bca:	11 30       	cpi	r17, 0x01	; 1
    3bcc:	18 f0       	brcs	.+6      	; 0x3bd4 <STEPPER_stop+0x32>
    3bce:	12 30       	cpi	r17, 0x02	; 2
    3bd0:	41 f4       	brne	.+16     	; 0x3be2 <STEPPER_stop+0x40>
    3bd2:	03 c0       	rjmp	.+6      	; 0x3bda <STEPPER_stop+0x38>
    3bd4:	00 93 6d 08 	sts	0x086D, r16
    3bd8:	04 c0       	rjmp	.+8      	; 0x3be2 <STEPPER_stop+0x40>
    3bda:	00 93 6d 08 	sts	0x086D, r16
    3bde:	00 93 6e 08 	sts	0x086E, r16
    3be2:	10 92 85 08 	sts	0x0885, r1
    3be6:	1f 91       	pop	r17
    3be8:	0f 91       	pop	r16
    3bea:	08 95       	ret

00003bec <STEPPER_wait_and_then>:
    3bec:	cf 92       	push	r12
    3bee:	df 92       	push	r13
    3bf0:	ef 92       	push	r14
    3bf2:	ff 92       	push	r15
    3bf4:	0f 93       	push	r16
    3bf6:	1f 93       	push	r17
    3bf8:	df 93       	push	r29
    3bfa:	cf 93       	push	r28
    3bfc:	cd b7       	in	r28, 0x3d	; 61
    3bfe:	de b7       	in	r29, 0x3e	; 62
    3c00:	8b 85       	ldd	r24, Y+11	; 0x0b
    3c02:	81 30       	cpi	r24, 0x01	; 1
    3c04:	61 f0       	breq	.+24     	; 0x3c1e <STEPPER_wait_and_then+0x32>
    3c06:	81 30       	cpi	r24, 0x01	; 1
    3c08:	18 f0       	brcs	.+6      	; 0x3c10 <STEPPER_wait_and_then+0x24>
    3c0a:	82 30       	cpi	r24, 0x02	; 2
    3c0c:	a1 f5       	brne	.+104    	; 0x3c76 <STEPPER_wait_and_then+0x8a>
    3c0e:	11 c0       	rjmp	.+34     	; 0x3c32 <STEPPER_wait_and_then+0x46>
    3c10:	ec 85       	ldd	r30, Y+12	; 0x0c
    3c12:	fd 85       	ldd	r31, Y+13	; 0x0d
    3c14:	80 91 86 08 	lds	r24, 0x0886
    3c18:	88 23       	and	r24, r24
    3c1a:	e1 f3       	breq	.-8      	; 0x3c14 <STEPPER_wait_and_then+0x28>
    3c1c:	06 c0       	rjmp	.+12     	; 0x3c2a <STEPPER_wait_and_then+0x3e>
    3c1e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3c20:	fd 85       	ldd	r31, Y+13	; 0x0d
    3c22:	80 91 87 08 	lds	r24, 0x0887
    3c26:	88 23       	and	r24, r24
    3c28:	e1 f3       	breq	.-8      	; 0x3c22 <STEPPER_wait_and_then+0x36>
    3c2a:	30 97       	sbiw	r30, 0x00	; 0
    3c2c:	21 f1       	breq	.+72     	; 0x3c76 <STEPPER_wait_and_then+0x8a>
    3c2e:	09 95       	icall
    3c30:	22 c0       	rjmp	.+68     	; 0x3c76 <STEPPER_wait_and_then+0x8a>
    3c32:	cc 84       	ldd	r12, Y+12	; 0x0c
    3c34:	dd 84       	ldd	r13, Y+13	; 0x0d
    3c36:	ee 84       	ldd	r14, Y+14	; 0x0e
    3c38:	ff 84       	ldd	r15, Y+15	; 0x0f
    3c3a:	00 e0       	ldi	r16, 0x00	; 0
    3c3c:	10 e0       	ldi	r17, 0x00	; 0
    3c3e:	00 23       	and	r16, r16
    3c40:	51 f4       	brne	.+20     	; 0x3c56 <STEPPER_wait_and_then+0x6a>
    3c42:	80 91 86 08 	lds	r24, 0x0886
    3c46:	88 23       	and	r24, r24
    3c48:	31 f0       	breq	.+12     	; 0x3c56 <STEPPER_wait_and_then+0x6a>
    3c4a:	c1 14       	cp	r12, r1
    3c4c:	d1 04       	cpc	r13, r1
    3c4e:	11 f0       	breq	.+4      	; 0x3c54 <STEPPER_wait_and_then+0x68>
    3c50:	f6 01       	movw	r30, r12
    3c52:	09 95       	icall
    3c54:	01 e0       	ldi	r16, 0x01	; 1
    3c56:	11 23       	and	r17, r17
    3c58:	51 f4       	brne	.+20     	; 0x3c6e <STEPPER_wait_and_then+0x82>
    3c5a:	80 91 87 08 	lds	r24, 0x0887
    3c5e:	88 23       	and	r24, r24
    3c60:	31 f0       	breq	.+12     	; 0x3c6e <STEPPER_wait_and_then+0x82>
    3c62:	e1 14       	cp	r14, r1
    3c64:	f1 04       	cpc	r15, r1
    3c66:	11 f0       	breq	.+4      	; 0x3c6c <STEPPER_wait_and_then+0x80>
    3c68:	f7 01       	movw	r30, r14
    3c6a:	09 95       	icall
    3c6c:	11 e0       	ldi	r17, 0x01	; 1
    3c6e:	00 23       	and	r16, r16
    3c70:	31 f3       	breq	.-52     	; 0x3c3e <STEPPER_wait_and_then+0x52>
    3c72:	11 23       	and	r17, r17
    3c74:	21 f3       	breq	.-56     	; 0x3c3e <STEPPER_wait_and_then+0x52>
    3c76:	cf 91       	pop	r28
    3c78:	df 91       	pop	r29
    3c7a:	1f 91       	pop	r17
    3c7c:	0f 91       	pop	r16
    3c7e:	ff 90       	pop	r15
    3c80:	ef 90       	pop	r14
    3c82:	df 90       	pop	r13
    3c84:	cf 90       	pop	r12
    3c86:	08 95       	ret

00003c88 <SYS_get_state>:
    3c88:	e8 2f       	mov	r30, r24
    3c8a:	f0 e0       	ldi	r31, 0x00	; 0
    3c8c:	e3 31       	cpi	r30, 0x13	; 19
    3c8e:	f1 05       	cpc	r31, r1
    3c90:	40 f4       	brcc	.+16     	; 0x3ca2 <SYS_get_state+0x1a>
    3c92:	e2 5c       	subi	r30, 0xC2	; 194
    3c94:	ff 4f       	sbci	r31, 0xFF	; 255
    3c96:	ee 0f       	add	r30, r30
    3c98:	ff 1f       	adc	r31, r31
    3c9a:	05 90       	lpm	r0, Z+
    3c9c:	f4 91       	lpm	r31, Z+
    3c9e:	e0 2d       	mov	r30, r0
    3ca0:	09 94       	ijmp
    3ca2:	80 e0       	ldi	r24, 0x00	; 0
    3ca4:	08 95       	ret
    3ca6:	80 91 88 08 	lds	r24, 0x0888
    3caa:	08 95       	ret
    3cac:	80 91 89 08 	lds	r24, 0x0889
    3cb0:	08 95       	ret
    3cb2:	80 91 8a 08 	lds	r24, 0x088A
    3cb6:	08 95       	ret
    3cb8:	80 91 8b 08 	lds	r24, 0x088B
    3cbc:	08 95       	ret
    3cbe:	80 91 8c 08 	lds	r24, 0x088C
    3cc2:	08 95       	ret
    3cc4:	80 91 8e 08 	lds	r24, 0x088E
    3cc8:	08 95       	ret
    3cca:	80 91 8d 08 	lds	r24, 0x088D
    3cce:	08 95       	ret
    3cd0:	80 91 8f 08 	lds	r24, 0x088F
    3cd4:	08 95       	ret
    3cd6:	80 91 90 08 	lds	r24, 0x0890
    3cda:	08 95       	ret
    3cdc:	80 91 91 08 	lds	r24, 0x0891
    3ce0:	08 95       	ret
    3ce2:	80 91 92 08 	lds	r24, 0x0892
    3ce6:	08 95       	ret
    3ce8:	80 91 93 08 	lds	r24, 0x0893
    3cec:	08 95       	ret
    3cee:	80 91 94 08 	lds	r24, 0x0894
    3cf2:	08 95       	ret
    3cf4:	80 91 95 08 	lds	r24, 0x0895
    3cf8:	08 95       	ret
    3cfa:	80 91 96 08 	lds	r24, 0x0896
    3cfe:	08 95       	ret
    3d00:	80 91 97 08 	lds	r24, 0x0897
    3d04:	08 95       	ret
    3d06:	80 91 98 08 	lds	r24, 0x0898
    3d0a:	08 95       	ret
    3d0c:	80 91 99 08 	lds	r24, 0x0899
    3d10:	08 95       	ret
    3d12:	80 91 9a 08 	lds	r24, 0x089A
    3d16:	08 95       	ret

00003d18 <SYS_set_state>:
    3d18:	e8 2f       	mov	r30, r24
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	e3 31       	cpi	r30, 0x13	; 19
    3d1e:	f1 05       	cpc	r31, r1
    3d20:	08 f0       	brcs	.+2      	; 0x3d24 <SYS_set_state+0xc>
    3d22:	40 c0       	rjmp	.+128    	; 0x3da4 <SYS_set_state+0x8c>
    3d24:	ef 5a       	subi	r30, 0xAF	; 175
    3d26:	ff 4f       	sbci	r31, 0xFF	; 255
    3d28:	ee 0f       	add	r30, r30
    3d2a:	ff 1f       	adc	r31, r31
    3d2c:	05 90       	lpm	r0, Z+
    3d2e:	f4 91       	lpm	r31, Z+
    3d30:	e0 2d       	mov	r30, r0
    3d32:	09 94       	ijmp
    3d34:	60 93 88 08 	sts	0x0888, r22
    3d38:	08 95       	ret
    3d3a:	60 93 89 08 	sts	0x0889, r22
    3d3e:	08 95       	ret
    3d40:	60 93 8a 08 	sts	0x088A, r22
    3d44:	08 95       	ret
    3d46:	60 93 8b 08 	sts	0x088B, r22
    3d4a:	08 95       	ret
    3d4c:	60 93 8c 08 	sts	0x088C, r22
    3d50:	08 95       	ret
    3d52:	60 93 8e 08 	sts	0x088E, r22
    3d56:	08 95       	ret
    3d58:	60 93 8d 08 	sts	0x088D, r22
    3d5c:	08 95       	ret
    3d5e:	60 93 8f 08 	sts	0x088F, r22
    3d62:	08 95       	ret
    3d64:	60 93 90 08 	sts	0x0890, r22
    3d68:	08 95       	ret
    3d6a:	60 93 91 08 	sts	0x0891, r22
    3d6e:	08 95       	ret
    3d70:	60 93 92 08 	sts	0x0892, r22
    3d74:	08 95       	ret
    3d76:	60 93 93 08 	sts	0x0893, r22
    3d7a:	08 95       	ret
    3d7c:	60 93 94 08 	sts	0x0894, r22
    3d80:	08 95       	ret
    3d82:	60 93 95 08 	sts	0x0895, r22
    3d86:	08 95       	ret
    3d88:	60 93 96 08 	sts	0x0896, r22
    3d8c:	08 95       	ret
    3d8e:	60 93 97 08 	sts	0x0897, r22
    3d92:	08 95       	ret
    3d94:	60 93 98 08 	sts	0x0898, r22
    3d98:	08 95       	ret
    3d9a:	60 93 99 08 	sts	0x0899, r22
    3d9e:	08 95       	ret
    3da0:	60 93 98 08 	sts	0x0898, r22
    3da4:	08 95       	ret

00003da6 <ATTINY_get_sensors>:
    3da6:	0f 93       	push	r16
    3da8:	1f 93       	push	r17
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    3db0:	81 30       	cpi	r24, 0x01	; 1
    3db2:	11 f0       	breq	.+4      	; 0x3db8 <ATTINY_get_sensors+0x12>
    3db4:	00 e0       	ldi	r16, 0x00	; 0
    3db6:	24 c0       	rjmp	.+72     	; 0x3e00 <ATTINY_get_sensors+0x5a>
    3db8:	87 e0       	ldi	r24, 0x07	; 7
    3dba:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <SPI_set_slave_addr>
    3dbe:	82 e0       	ldi	r24, 0x02	; 2
    3dc0:	6a e0       	ldi	r22, 0x0A	; 10
    3dc2:	0e 94 4d 1a 	call	0x349a	; 0x349a <SPI_transmit>
    3dc6:	82 e0       	ldi	r24, 0x02	; 2
    3dc8:	62 eb       	ldi	r22, 0xB2	; 178
    3dca:	0e 94 4d 1a 	call	0x349a	; 0x349a <SPI_transmit>
    3dce:	18 ec       	ldi	r17, 0xC8	; 200
    3dd0:	81 2f       	mov	r24, r17
    3dd2:	8a 95       	dec	r24
    3dd4:	f1 f7       	brne	.-4      	; 0x3dd2 <ATTINY_get_sensors+0x2c>
    3dd6:	82 e0       	ldi	r24, 0x02	; 2
    3dd8:	60 e0       	ldi	r22, 0x00	; 0
    3dda:	0e 94 ae 24 	call	0x495c	; 0x495c <SPI_receive>
    3dde:	08 2f       	mov	r16, r24
    3de0:	81 2f       	mov	r24, r17
    3de2:	8a 95       	dec	r24
    3de4:	f1 f7       	brne	.-4      	; 0x3de2 <ATTINY_get_sensors+0x3c>
    3de6:	82 e0       	ldi	r24, 0x02	; 2
    3de8:	60 e0       	ldi	r22, 0x00	; 0
    3dea:	0e 94 ae 24 	call	0x495c	; 0x495c <SPI_receive>
    3dee:	1a 95       	dec	r17
    3df0:	f1 f7       	brne	.-4      	; 0x3dee <ATTINY_get_sensors+0x48>
    3df2:	87 e0       	ldi	r24, 0x07	; 7
    3df4:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <SPI_set_slave_addr>
    3df8:	88 e8       	ldi	r24, 0x88	; 136
    3dfa:	93 e1       	ldi	r25, 0x13	; 19
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	f1 f7       	brne	.-4      	; 0x3dfc <ATTINY_get_sensors+0x56>
    3e00:	80 2f       	mov	r24, r16
    3e02:	1f 91       	pop	r17
    3e04:	0f 91       	pop	r16
    3e06:	08 95       	ret

00003e08 <ATTINY_get_SW_state>:
    3e08:	1f 93       	push	r17
    3e0a:	cf 93       	push	r28
    3e0c:	df 93       	push	r29
    3e0e:	18 2f       	mov	r17, r24
    3e10:	80 91 99 03 	lds	r24, 0x0399
    3e14:	88 23       	and	r24, r24
    3e16:	41 f0       	breq	.+16     	; 0x3e28 <ATTINY_get_SW_state+0x20>
    3e18:	80 91 a3 03 	lds	r24, 0x03A3
    3e1c:	88 23       	and	r24, r24
    3e1e:	99 f0       	breq	.+38     	; 0x3e46 <ATTINY_get_SW_state+0x3e>
    3e20:	10 92 99 03 	sts	0x0399, r1
    3e24:	10 92 a3 03 	sts	0x03A3, r1
    3e28:	0e 94 d3 1e 	call	0x3da6	; 0x3da6 <ATTINY_get_sensors>
    3e2c:	80 93 98 03 	sts	0x0398, r24
    3e30:	8d e9       	ldi	r24, 0x9D	; 157
    3e32:	93 e0       	ldi	r25, 0x03	; 3
    3e34:	61 e0       	ldi	r22, 0x01	; 1
    3e36:	40 e0       	ldi	r20, 0x00	; 0
    3e38:	22 e3       	ldi	r18, 0x32	; 50
    3e3a:	30 e0       	ldi	r19, 0x00	; 0
    3e3c:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <TMRSRVC_new>
    3e40:	81 e0       	ldi	r24, 0x01	; 1
    3e42:	80 93 99 03 	sts	0x0399, r24
    3e46:	90 91 98 03 	lds	r25, 0x0398
    3e4a:	a1 2f       	mov	r26, r17
    3e4c:	b0 e0       	ldi	r27, 0x00	; 0
    3e4e:	ed 01       	movw	r28, r26
    3e50:	c0 5c       	subi	r28, 0xC0	; 192
    3e52:	dc 4f       	sbci	r29, 0xFC	; 252
    3e54:	88 81       	ld	r24, Y
    3e56:	88 23       	and	r24, r24
    3e58:	69 f0       	breq	.+26     	; 0x3e74 <ATTINY_get_SW_state+0x6c>
    3e5a:	fd 01       	movw	r30, r26
    3e5c:	ed 5b       	subi	r30, 0xBD	; 189
    3e5e:	fc 4f       	sbci	r31, 0xFC	; 252
    3e60:	80 81       	ld	r24, Z
    3e62:	98 23       	and	r25, r24
    3e64:	c1 f0       	breq	.+48     	; 0x3e96 <ATTINY_get_SW_state+0x8e>
    3e66:	fd 01       	movw	r30, r26
    3e68:	e6 56       	subi	r30, 0x66	; 102
    3e6a:	fc 4f       	sbci	r31, 0xFC	; 252
    3e6c:	81 e0       	ldi	r24, 0x01	; 1
    3e6e:	80 83       	st	Z, r24
    3e70:	18 82       	st	Y, r1
    3e72:	11 c0       	rjmp	.+34     	; 0x3e96 <ATTINY_get_SW_state+0x8e>
    3e74:	fd 01       	movw	r30, r26
    3e76:	e6 56       	subi	r30, 0x66	; 102
    3e78:	fc 4f       	sbci	r31, 0xFC	; 252
    3e7a:	80 81       	ld	r24, Z
    3e7c:	81 11       	cpse	r24, r1
    3e7e:	10 82       	st	Z, r1
    3e80:	fd 01       	movw	r30, r26
    3e82:	ed 5b       	subi	r30, 0xBD	; 189
    3e84:	fc 4f       	sbci	r31, 0xFC	; 252
    3e86:	80 81       	ld	r24, Z
    3e88:	98 23       	and	r25, r24
    3e8a:	29 f4       	brne	.+10     	; 0x3e96 <ATTINY_get_SW_state+0x8e>
    3e8c:	fd 01       	movw	r30, r26
    3e8e:	e0 5c       	subi	r30, 0xC0	; 192
    3e90:	fc 4f       	sbci	r31, 0xFC	; 252
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	80 83       	st	Z, r24
    3e96:	a6 56       	subi	r26, 0x66	; 102
    3e98:	bc 4f       	sbci	r27, 0xFC	; 252
    3e9a:	8c 91       	ld	r24, X
    3e9c:	df 91       	pop	r29
    3e9e:	cf 91       	pop	r28
    3ea0:	1f 91       	pop	r17
    3ea2:	08 95       	ret

00003ea4 <ATTINY_open>:
    3ea4:	82 e0       	ldi	r24, 0x02	; 2
    3ea6:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    3eaa:	88 23       	and	r24, r24
    3eac:	19 f4       	brne	.+6      	; 0x3eb4 <ATTINY_open+0x10>
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	82 e0       	ldi	r24, 0x02	; 2
    3eb2:	08 95       	ret
    3eb4:	10 92 b6 08 	sts	0x08B6, r1
    3eb8:	10 92 b5 08 	sts	0x08B5, r1
    3ebc:	10 92 b8 08 	sts	0x08B8, r1
    3ec0:	10 92 b7 08 	sts	0x08B7, r1
    3ec4:	10 92 ba 08 	sts	0x08BA, r1
    3ec8:	10 92 b9 08 	sts	0x08B9, r1
    3ecc:	10 92 bc 08 	sts	0x08BC, r1
    3ed0:	10 92 bb 08 	sts	0x08BB, r1
    3ed4:	10 92 be 08 	sts	0x08BE, r1
    3ed8:	10 92 bd 08 	sts	0x08BD, r1
    3edc:	80 e9       	ldi	r24, 0x90	; 144
    3ede:	91 e0       	ldi	r25, 0x01	; 1
    3ee0:	90 93 a2 08 	sts	0x08A2, r25
    3ee4:	80 93 a1 08 	sts	0x08A1, r24
    3ee8:	90 93 a4 08 	sts	0x08A4, r25
    3eec:	80 93 a3 08 	sts	0x08A3, r24
    3ef0:	90 93 a6 08 	sts	0x08A6, r25
    3ef4:	80 93 a5 08 	sts	0x08A5, r24
    3ef8:	90 93 a8 08 	sts	0x08A8, r25
    3efc:	80 93 a7 08 	sts	0x08A7, r24
    3f00:	90 93 aa 08 	sts	0x08AA, r25
    3f04:	80 93 a9 08 	sts	0x08A9, r24
    3f08:	84 e3       	ldi	r24, 0x34	; 52
    3f0a:	98 e0       	ldi	r25, 0x08	; 8
    3f0c:	90 93 ac 08 	sts	0x08AC, r25
    3f10:	80 93 ab 08 	sts	0x08AB, r24
    3f14:	90 93 ae 08 	sts	0x08AE, r25
    3f18:	80 93 ad 08 	sts	0x08AD, r24
    3f1c:	90 93 b0 08 	sts	0x08B0, r25
    3f20:	80 93 af 08 	sts	0x08AF, r24
    3f24:	90 93 b2 08 	sts	0x08B2, r25
    3f28:	80 93 b1 08 	sts	0x08B1, r24
    3f2c:	90 93 b4 08 	sts	0x08B4, r25
    3f30:	80 93 b3 08 	sts	0x08B3, r24
    3f34:	81 e0       	ldi	r24, 0x01	; 1
    3f36:	61 e0       	ldi	r22, 0x01	; 1
    3f38:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    3f3c:	91 e0       	ldi	r25, 0x01	; 1
    3f3e:	81 e0       	ldi	r24, 0x01	; 1
    3f40:	08 95       	ret

00003f42 <TMRSRVC_delay>:
    3f42:	df 93       	push	r29
    3f44:	cf 93       	push	r28
    3f46:	cd b7       	in	r28, 0x3d	; 61
    3f48:	de b7       	in	r29, 0x3e	; 62
    3f4a:	29 97       	sbiw	r28, 0x09	; 9
    3f4c:	0f b6       	in	r0, 0x3f	; 63
    3f4e:	f8 94       	cli
    3f50:	de bf       	out	0x3e, r29	; 62
    3f52:	0f be       	out	0x3f, r0	; 63
    3f54:	cd bf       	out	0x3d, r28	; 61
    3f56:	9c 01       	movw	r18, r24
    3f58:	ce 01       	movw	r24, r28
    3f5a:	01 96       	adiw	r24, 0x01	; 1
    3f5c:	61 e0       	ldi	r22, 0x01	; 1
    3f5e:	40 e0       	ldi	r20, 0x00	; 0
    3f60:	0e 94 c2 1f 	call	0x3f84	; 0x3f84 <TMRSRVC_new>
    3f64:	98 2f       	mov	r25, r24
    3f66:	88 23       	and	r24, r24
    3f68:	19 f4       	brne	.+6      	; 0x3f70 <TMRSRVC_delay+0x2e>
    3f6a:	8f 81       	ldd	r24, Y+7	; 0x07
    3f6c:	88 23       	and	r24, r24
    3f6e:	e9 f3       	breq	.-6      	; 0x3f6a <TMRSRVC_delay+0x28>
    3f70:	89 2f       	mov	r24, r25
    3f72:	29 96       	adiw	r28, 0x09	; 9
    3f74:	0f b6       	in	r0, 0x3f	; 63
    3f76:	f8 94       	cli
    3f78:	de bf       	out	0x3e, r29	; 62
    3f7a:	0f be       	out	0x3f, r0	; 63
    3f7c:	cd bf       	out	0x3d, r28	; 61
    3f7e:	cf 91       	pop	r28
    3f80:	df 91       	pop	r29
    3f82:	08 95       	ret

00003f84 <TMRSRVC_new>:
    3f84:	ef 92       	push	r14
    3f86:	ff 92       	push	r15
    3f88:	0f 93       	push	r16
    3f8a:	1f 93       	push	r17
    3f8c:	cf 93       	push	r28
    3f8e:	df 93       	push	r29
    3f90:	ec 01       	movw	r28, r24
    3f92:	f6 2e       	mov	r15, r22
    3f94:	e4 2e       	mov	r14, r20
    3f96:	89 01       	movw	r16, r18
    3f98:	88 e0       	ldi	r24, 0x08	; 8
    3f9a:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    3f9e:	81 30       	cpi	r24, 0x01	; 1
    3fa0:	11 f0       	breq	.+4      	; 0x3fa6 <TMRSRVC_new+0x22>
    3fa2:	81 e0       	ldi	r24, 0x01	; 1
    3fa4:	26 c0       	rjmp	.+76     	; 0x3ff2 <TMRSRVC_new+0x6e>
    3fa6:	84 e0       	ldi	r24, 0x04	; 4
    3fa8:	90 e0       	ldi	r25, 0x00	; 0
    3faa:	0e 94 59 33 	call	0x66b2	; 0x66b2 <malloc>
    3fae:	fc 01       	movw	r30, r24
    3fb0:	00 97       	sbiw	r24, 0x00	; 0
    3fb2:	11 f4       	brne	.+4      	; 0x3fb8 <TMRSRVC_new+0x34>
    3fb4:	82 e0       	ldi	r24, 0x02	; 2
    3fb6:	1d c0       	rjmp	.+58     	; 0x3ff2 <TMRSRVC_new+0x6e>
    3fb8:	f9 82       	std	Y+1, r15	; 0x01
    3fba:	f0 fc       	sbrc	r15, 0
    3fbc:	1e 82       	std	Y+6, r1	; 0x06
    3fbe:	81 e0       	ldi	r24, 0x01	; 1
    3fc0:	e8 16       	cp	r14, r24
    3fc2:	19 f4       	brne	.+6      	; 0x3fca <TMRSRVC_new+0x46>
    3fc4:	89 81       	ldd	r24, Y+1	; 0x01
    3fc6:	84 60       	ori	r24, 0x04	; 4
    3fc8:	89 83       	std	Y+1, r24	; 0x01
    3fca:	89 81       	ldd	r24, Y+1	; 0x01
    3fcc:	88 60       	ori	r24, 0x08	; 8
    3fce:	89 83       	std	Y+1, r24	; 0x01
    3fd0:	1b 83       	std	Y+3, r17	; 0x03
    3fd2:	0a 83       	std	Y+2, r16	; 0x02
    3fd4:	1d 83       	std	Y+5, r17	; 0x05
    3fd6:	0c 83       	std	Y+4, r16	; 0x04
    3fd8:	d1 83       	std	Z+1, r29	; 0x01
    3fda:	c0 83       	st	Z, r28
    3fdc:	13 82       	std	Z+3, r1	; 0x03
    3fde:	12 82       	std	Z+2, r1	; 0x02
    3fe0:	81 e0       	ldi	r24, 0x01	; 1
    3fe2:	80 93 06 04 	sts	0x0406, r24
    3fe6:	cf 01       	movw	r24, r30
    3fe8:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <TMRSRVC_insert>
    3fec:	10 92 06 04 	sts	0x0406, r1
    3ff0:	80 e0       	ldi	r24, 0x00	; 0
    3ff2:	df 91       	pop	r29
    3ff4:	cf 91       	pop	r28
    3ff6:	1f 91       	pop	r17
    3ff8:	0f 91       	pop	r16
    3ffa:	ff 90       	pop	r15
    3ffc:	ef 90       	pop	r14
    3ffe:	08 95       	ret

00004000 <I2C_MSTR_get>:
    4000:	fc 01       	movw	r30, r24
    4002:	80 91 c2 08 	lds	r24, 0x08C2
    4006:	81 30       	cpi	r24, 0x01	; 1
    4008:	11 f0       	breq	.+4      	; 0x400e <I2C_MSTR_get+0xe>
    400a:	85 e0       	ldi	r24, 0x05	; 5
    400c:	08 95       	ret
    400e:	80 91 c3 08 	lds	r24, 0x08C3
    4012:	81 30       	cpi	r24, 0x01	; 1
    4014:	11 f0       	breq	.+4      	; 0x401a <I2C_MSTR_get+0x1a>
    4016:	8a e0       	ldi	r24, 0x0A	; 10
    4018:	08 95       	ret
    401a:	61 30       	cpi	r22, 0x01	; 1
    401c:	11 f4       	brne	.+4      	; 0x4022 <I2C_MSTR_get+0x22>
    401e:	84 ec       	ldi	r24, 0xC4	; 196
    4020:	01 c0       	rjmp	.+2      	; 0x4024 <I2C_MSTR_get+0x24>
    4022:	84 e8       	ldi	r24, 0x84	; 132
    4024:	80 93 bc 00 	sts	0x00BC, r24
    4028:	80 91 bc 00 	lds	r24, 0x00BC
    402c:	87 ff       	sbrs	r24, 7
    402e:	fc cf       	rjmp	.-8      	; 0x4028 <I2C_MSTR_get+0x28>
    4030:	61 30       	cpi	r22, 0x01	; 1
    4032:	31 f4       	brne	.+12     	; 0x4040 <I2C_MSTR_get+0x40>
    4034:	80 91 b9 00 	lds	r24, 0x00B9
    4038:	88 7f       	andi	r24, 0xF8	; 248
    403a:	80 35       	cpi	r24, 0x50	; 80
    403c:	59 f4       	brne	.+22     	; 0x4054 <I2C_MSTR_get+0x54>
    403e:	05 c0       	rjmp	.+10     	; 0x404a <I2C_MSTR_get+0x4a>
    4040:	80 91 b9 00 	lds	r24, 0x00B9
    4044:	88 7f       	andi	r24, 0xF8	; 248
    4046:	88 35       	cpi	r24, 0x58	; 88
    4048:	29 f4       	brne	.+10     	; 0x4054 <I2C_MSTR_get+0x54>
    404a:	80 91 bb 00 	lds	r24, 0x00BB
    404e:	80 83       	st	Z, r24
    4050:	80 e0       	ldi	r24, 0x00	; 0
    4052:	08 95       	ret
    4054:	82 e0       	ldi	r24, 0x02	; 2
    4056:	08 95       	ret

00004058 <I2C_MSTR_send>:
    4058:	98 2f       	mov	r25, r24
    405a:	80 91 c2 08 	lds	r24, 0x08C2
    405e:	81 30       	cpi	r24, 0x01	; 1
    4060:	11 f0       	breq	.+4      	; 0x4066 <I2C_MSTR_send+0xe>
    4062:	85 e0       	ldi	r24, 0x05	; 5
    4064:	08 95       	ret
    4066:	80 91 c3 08 	lds	r24, 0x08C3
    406a:	81 30       	cpi	r24, 0x01	; 1
    406c:	11 f0       	breq	.+4      	; 0x4072 <I2C_MSTR_send+0x1a>
    406e:	8a e0       	ldi	r24, 0x0A	; 10
    4070:	08 95       	ret
    4072:	90 93 bb 00 	sts	0x00BB, r25
    4076:	84 e8       	ldi	r24, 0x84	; 132
    4078:	80 93 bc 00 	sts	0x00BC, r24
    407c:	80 91 bc 00 	lds	r24, 0x00BC
    4080:	87 ff       	sbrs	r24, 7
    4082:	fc cf       	rjmp	.-8      	; 0x407c <I2C_MSTR_send+0x24>
    4084:	80 91 b9 00 	lds	r24, 0x00B9
    4088:	90 e0       	ldi	r25, 0x00	; 0
    408a:	88 7f       	andi	r24, 0xF8	; 248
    408c:	90 70       	andi	r25, 0x00	; 0
    408e:	88 32       	cpi	r24, 0x28	; 40
    4090:	91 05       	cpc	r25, r1
    4092:	21 f0       	breq	.+8      	; 0x409c <I2C_MSTR_send+0x44>
    4094:	c0 97       	sbiw	r24, 0x30	; 48
    4096:	21 f4       	brne	.+8      	; 0x40a0 <I2C_MSTR_send+0x48>
    4098:	83 e0       	ldi	r24, 0x03	; 3
    409a:	08 95       	ret
    409c:	80 e0       	ldi	r24, 0x00	; 0
    409e:	08 95       	ret
    40a0:	8c e0       	ldi	r24, 0x0C	; 12
    40a2:	08 95       	ret

000040a4 <I2C_MSTR_start>:
    40a4:	98 2f       	mov	r25, r24
    40a6:	20 91 c2 08 	lds	r18, 0x08C2
    40aa:	21 30       	cpi	r18, 0x01	; 1
    40ac:	11 f0       	breq	.+4      	; 0x40b2 <I2C_MSTR_start+0xe>
    40ae:	85 e0       	ldi	r24, 0x05	; 5
    40b0:	08 95       	ret
    40b2:	80 91 c4 08 	lds	r24, 0x08C4
    40b6:	81 30       	cpi	r24, 0x01	; 1
    40b8:	11 f4       	brne	.+4      	; 0x40be <I2C_MSTR_start+0x1a>
    40ba:	89 e0       	ldi	r24, 0x09	; 9
    40bc:	08 95       	ret
    40be:	20 93 c3 08 	sts	0x08C3, r18
    40c2:	84 ea       	ldi	r24, 0xA4	; 164
    40c4:	80 93 bc 00 	sts	0x00BC, r24
    40c8:	80 91 bc 00 	lds	r24, 0x00BC
    40cc:	87 ff       	sbrs	r24, 7
    40ce:	fc cf       	rjmp	.-8      	; 0x40c8 <I2C_MSTR_start+0x24>
    40d0:	80 91 b9 00 	lds	r24, 0x00B9
    40d4:	88 7f       	andi	r24, 0xF8	; 248
    40d6:	88 30       	cpi	r24, 0x08	; 8
    40d8:	39 f0       	breq	.+14     	; 0x40e8 <I2C_MSTR_start+0x44>
    40da:	80 91 b9 00 	lds	r24, 0x00B9
    40de:	88 7f       	andi	r24, 0xF8	; 248
    40e0:	80 31       	cpi	r24, 0x10	; 16
    40e2:	11 f0       	breq	.+4      	; 0x40e8 <I2C_MSTR_start+0x44>
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	08 95       	ret
    40e8:	61 30       	cpi	r22, 0x01	; 1
    40ea:	19 f4       	brne	.+6      	; 0x40f2 <I2C_MSTR_start+0x4e>
    40ec:	99 0f       	add	r25, r25
    40ee:	91 60       	ori	r25, 0x01	; 1
    40f0:	03 c0       	rjmp	.+6      	; 0x40f8 <I2C_MSTR_start+0x54>
    40f2:	66 23       	and	r22, r22
    40f4:	19 f4       	brne	.+6      	; 0x40fc <I2C_MSTR_start+0x58>
    40f6:	99 0f       	add	r25, r25
    40f8:	90 93 bb 00 	sts	0x00BB, r25
    40fc:	84 e8       	ldi	r24, 0x84	; 132
    40fe:	80 93 bc 00 	sts	0x00BC, r24
    4102:	80 91 bc 00 	lds	r24, 0x00BC
    4106:	87 ff       	sbrs	r24, 7
    4108:	fc cf       	rjmp	.-8      	; 0x4102 <I2C_MSTR_start+0x5e>
    410a:	61 30       	cpi	r22, 0x01	; 1
    410c:	31 f4       	brne	.+12     	; 0x411a <I2C_MSTR_start+0x76>
    410e:	80 91 b9 00 	lds	r24, 0x00B9
    4112:	88 7f       	andi	r24, 0xF8	; 248
    4114:	80 34       	cpi	r24, 0x40	; 64
    4116:	41 f4       	brne	.+16     	; 0x4128 <I2C_MSTR_start+0x84>
    4118:	09 c0       	rjmp	.+18     	; 0x412c <I2C_MSTR_start+0x88>
    411a:	66 23       	and	r22, r22
    411c:	39 f4       	brne	.+14     	; 0x412c <I2C_MSTR_start+0x88>
    411e:	80 91 b9 00 	lds	r24, 0x00B9
    4122:	88 7f       	andi	r24, 0xF8	; 248
    4124:	88 31       	cpi	r24, 0x18	; 24
    4126:	11 f0       	breq	.+4      	; 0x412c <I2C_MSTR_start+0x88>
    4128:	82 e0       	ldi	r24, 0x02	; 2
    412a:	08 95       	ret
    412c:	80 e0       	ldi	r24, 0x00	; 0
    412e:	08 95       	ret

00004130 <I2C_MSTR_stop>:
    4130:	80 91 c3 08 	lds	r24, 0x08C3
    4134:	81 30       	cpi	r24, 0x01	; 1
    4136:	11 f0       	breq	.+4      	; 0x413c <I2C_MSTR_stop+0xc>
    4138:	8a e0       	ldi	r24, 0x0A	; 10
    413a:	08 95       	ret
    413c:	80 91 c5 08 	lds	r24, 0x08C5
    4140:	81 30       	cpi	r24, 0x01	; 1
    4142:	29 f4       	brne	.+10     	; 0x414e <I2C_MSTR_stop+0x1e>
    4144:	85 e9       	ldi	r24, 0x95	; 149
    4146:	80 93 bc 00 	sts	0x00BC, r24
    414a:	80 e0       	ldi	r24, 0x00	; 0
    414c:	08 95       	ret
    414e:	84 e9       	ldi	r24, 0x94	; 148
    4150:	80 93 bc 00 	sts	0x00BC, r24
    4154:	80 e0       	ldi	r24, 0x00	; 0
    4156:	08 95       	ret

00004158 <I2C_open>:
    4158:	82 e1       	ldi	r24, 0x12	; 18
    415a:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    415e:	88 23       	and	r24, r24
    4160:	b1 f4       	brne	.+44     	; 0x418e <I2C_open+0x36>
    4162:	10 92 c2 08 	sts	0x08C2, r1
    4166:	10 92 c3 08 	sts	0x08C3, r1
    416a:	10 92 c4 08 	sts	0x08C4, r1
    416e:	10 92 c5 08 	sts	0x08C5, r1
    4172:	10 92 c6 08 	sts	0x08C6, r1
    4176:	0e 94 0e 27 	call	0x4e1c	; 0x4e1c <__I2C_init>
    417a:	87 e1       	ldi	r24, 0x17	; 23
    417c:	60 e0       	ldi	r22, 0x00	; 0
    417e:	0e 94 ca 20 	call	0x4194	; 0x4194 <I2C_set_BRG>
    4182:	0e 94 04 27 	call	0x4e08	; 0x4e08 <I2C_enable>
    4186:	82 e1       	ldi	r24, 0x12	; 18
    4188:	61 e0       	ldi	r22, 0x01	; 1
    418a:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    418e:	82 e1       	ldi	r24, 0x12	; 18
    4190:	90 e0       	ldi	r25, 0x00	; 0
    4192:	08 95       	ret

00004194 <I2C_set_BRG>:
    4194:	63 70       	andi	r22, 0x03	; 3
    4196:	60 93 b9 00 	sts	0x00B9, r22
    419a:	80 93 b8 00 	sts	0x00B8, r24
    419e:	81 e0       	ldi	r24, 0x01	; 1
    41a0:	80 93 c2 08 	sts	0x08C2, r24
    41a4:	08 95       	ret

000041a6 <__ADC_init>:
    41a6:	8f e1       	ldi	r24, 0x1F	; 31
    41a8:	80 93 7c 00 	sts	0x007C, r24
    41ac:	ea e7       	ldi	r30, 0x7A	; 122
    41ae:	f0 e0       	ldi	r31, 0x00	; 0
    41b0:	87 e0       	ldi	r24, 0x07	; 7
    41b2:	80 83       	st	Z, r24
    41b4:	80 81       	ld	r24, Z
    41b6:	80 68       	ori	r24, 0x80	; 128
    41b8:	80 83       	st	Z, r24
    41ba:	08 95       	ret

000041bc <CBOT_init>:
    41bc:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <SYS_init>
    41c0:	0e 94 10 24 	call	0x4820	; 0x4820 <ATMEGA_open>
    41c4:	0e 94 40 23 	call	0x4680	; 0x4680 <ISR_open>
    41c8:	0e 94 db 26 	call	0x4db6	; 0x4db6 <TMRSRVC_open>
    41cc:	0e 94 75 24 	call	0x48ea	; 0x48ea <SPI_open>
    41d0:	0e 94 52 1f 	call	0x3ea4	; 0x3ea4 <ATTINY_open>
    41d4:	78 94       	sei
    41d6:	08 95       	ret

000041d8 <CBOT_ISR_init>:
    41d8:	00 00       	nop
    41da:	08 95       	ret

000041dc <__vector_16>:
    41dc:	1f 92       	push	r1
    41de:	0f 92       	push	r0
    41e0:	0f b6       	in	r0, 0x3f	; 63
    41e2:	0f 92       	push	r0
    41e4:	11 24       	eor	r1, r1
    41e6:	2f 93       	push	r18
    41e8:	3f 93       	push	r19
    41ea:	4f 93       	push	r20
    41ec:	5f 93       	push	r21
    41ee:	6f 93       	push	r22
    41f0:	7f 93       	push	r23
    41f2:	8f 93       	push	r24
    41f4:	9f 93       	push	r25
    41f6:	af 93       	push	r26
    41f8:	bf 93       	push	r27
    41fa:	ef 93       	push	r30
    41fc:	ff 93       	push	r31
    41fe:	e0 91 c6 03 	lds	r30, 0x03C6
    4202:	f0 91 c7 03 	lds	r31, 0x03C7
    4206:	30 97       	sbiw	r30, 0x00	; 0
    4208:	09 f0       	breq	.+2      	; 0x420c <__vector_16+0x30>
    420a:	09 95       	icall
    420c:	ff 91       	pop	r31
    420e:	ef 91       	pop	r30
    4210:	bf 91       	pop	r27
    4212:	af 91       	pop	r26
    4214:	9f 91       	pop	r25
    4216:	8f 91       	pop	r24
    4218:	7f 91       	pop	r23
    421a:	6f 91       	pop	r22
    421c:	5f 91       	pop	r21
    421e:	4f 91       	pop	r20
    4220:	3f 91       	pop	r19
    4222:	2f 91       	pop	r18
    4224:	0f 90       	pop	r0
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	0f 90       	pop	r0
    422a:	1f 90       	pop	r1
    422c:	18 95       	reti

0000422e <__vector_17>:
    422e:	1f 92       	push	r1
    4230:	0f 92       	push	r0
    4232:	0f b6       	in	r0, 0x3f	; 63
    4234:	0f 92       	push	r0
    4236:	11 24       	eor	r1, r1
    4238:	2f 93       	push	r18
    423a:	3f 93       	push	r19
    423c:	4f 93       	push	r20
    423e:	5f 93       	push	r21
    4240:	6f 93       	push	r22
    4242:	7f 93       	push	r23
    4244:	8f 93       	push	r24
    4246:	9f 93       	push	r25
    4248:	af 93       	push	r26
    424a:	bf 93       	push	r27
    424c:	ef 93       	push	r30
    424e:	ff 93       	push	r31
    4250:	e0 91 c8 03 	lds	r30, 0x03C8
    4254:	f0 91 c9 03 	lds	r31, 0x03C9
    4258:	30 97       	sbiw	r30, 0x00	; 0
    425a:	09 f0       	breq	.+2      	; 0x425e <__vector_17+0x30>
    425c:	09 95       	icall
    425e:	ff 91       	pop	r31
    4260:	ef 91       	pop	r30
    4262:	bf 91       	pop	r27
    4264:	af 91       	pop	r26
    4266:	9f 91       	pop	r25
    4268:	8f 91       	pop	r24
    426a:	7f 91       	pop	r23
    426c:	6f 91       	pop	r22
    426e:	5f 91       	pop	r21
    4270:	4f 91       	pop	r20
    4272:	3f 91       	pop	r19
    4274:	2f 91       	pop	r18
    4276:	0f 90       	pop	r0
    4278:	0f be       	out	0x3f, r0	; 63
    427a:	0f 90       	pop	r0
    427c:	1f 90       	pop	r1
    427e:	18 95       	reti

00004280 <__vector_18>:
    4280:	1f 92       	push	r1
    4282:	0f 92       	push	r0
    4284:	0f b6       	in	r0, 0x3f	; 63
    4286:	0f 92       	push	r0
    4288:	11 24       	eor	r1, r1
    428a:	2f 93       	push	r18
    428c:	3f 93       	push	r19
    428e:	4f 93       	push	r20
    4290:	5f 93       	push	r21
    4292:	6f 93       	push	r22
    4294:	7f 93       	push	r23
    4296:	8f 93       	push	r24
    4298:	9f 93       	push	r25
    429a:	af 93       	push	r26
    429c:	bf 93       	push	r27
    429e:	ef 93       	push	r30
    42a0:	ff 93       	push	r31
    42a2:	e0 91 ca 03 	lds	r30, 0x03CA
    42a6:	f0 91 cb 03 	lds	r31, 0x03CB
    42aa:	30 97       	sbiw	r30, 0x00	; 0
    42ac:	09 f0       	breq	.+2      	; 0x42b0 <__vector_18+0x30>
    42ae:	09 95       	icall
    42b0:	ff 91       	pop	r31
    42b2:	ef 91       	pop	r30
    42b4:	bf 91       	pop	r27
    42b6:	af 91       	pop	r26
    42b8:	9f 91       	pop	r25
    42ba:	8f 91       	pop	r24
    42bc:	7f 91       	pop	r23
    42be:	6f 91       	pop	r22
    42c0:	5f 91       	pop	r21
    42c2:	4f 91       	pop	r20
    42c4:	3f 91       	pop	r19
    42c6:	2f 91       	pop	r18
    42c8:	0f 90       	pop	r0
    42ca:	0f be       	out	0x3f, r0	; 63
    42cc:	0f 90       	pop	r0
    42ce:	1f 90       	pop	r1
    42d0:	18 95       	reti

000042d2 <__vector_9>:
    42d2:	1f 92       	push	r1
    42d4:	0f 92       	push	r0
    42d6:	0f b6       	in	r0, 0x3f	; 63
    42d8:	0f 92       	push	r0
    42da:	11 24       	eor	r1, r1
    42dc:	2f 93       	push	r18
    42de:	3f 93       	push	r19
    42e0:	4f 93       	push	r20
    42e2:	5f 93       	push	r21
    42e4:	6f 93       	push	r22
    42e6:	7f 93       	push	r23
    42e8:	8f 93       	push	r24
    42ea:	9f 93       	push	r25
    42ec:	af 93       	push	r26
    42ee:	bf 93       	push	r27
    42f0:	ef 93       	push	r30
    42f2:	ff 93       	push	r31
    42f4:	e0 91 b8 03 	lds	r30, 0x03B8
    42f8:	f0 91 b9 03 	lds	r31, 0x03B9
    42fc:	30 97       	sbiw	r30, 0x00	; 0
    42fe:	09 f0       	breq	.+2      	; 0x4302 <__vector_9+0x30>
    4300:	09 95       	icall
    4302:	ff 91       	pop	r31
    4304:	ef 91       	pop	r30
    4306:	bf 91       	pop	r27
    4308:	af 91       	pop	r26
    430a:	9f 91       	pop	r25
    430c:	8f 91       	pop	r24
    430e:	7f 91       	pop	r23
    4310:	6f 91       	pop	r22
    4312:	5f 91       	pop	r21
    4314:	4f 91       	pop	r20
    4316:	3f 91       	pop	r19
    4318:	2f 91       	pop	r18
    431a:	0f 90       	pop	r0
    431c:	0f be       	out	0x3f, r0	; 63
    431e:	0f 90       	pop	r0
    4320:	1f 90       	pop	r1
    4322:	18 95       	reti

00004324 <__vector_10>:
    4324:	1f 92       	push	r1
    4326:	0f 92       	push	r0
    4328:	0f b6       	in	r0, 0x3f	; 63
    432a:	0f 92       	push	r0
    432c:	11 24       	eor	r1, r1
    432e:	2f 93       	push	r18
    4330:	3f 93       	push	r19
    4332:	4f 93       	push	r20
    4334:	5f 93       	push	r21
    4336:	6f 93       	push	r22
    4338:	7f 93       	push	r23
    433a:	8f 93       	push	r24
    433c:	9f 93       	push	r25
    433e:	af 93       	push	r26
    4340:	bf 93       	push	r27
    4342:	ef 93       	push	r30
    4344:	ff 93       	push	r31
    4346:	e0 91 ba 03 	lds	r30, 0x03BA
    434a:	f0 91 bb 03 	lds	r31, 0x03BB
    434e:	30 97       	sbiw	r30, 0x00	; 0
    4350:	09 f0       	breq	.+2      	; 0x4354 <__vector_10+0x30>
    4352:	09 95       	icall
    4354:	ff 91       	pop	r31
    4356:	ef 91       	pop	r30
    4358:	bf 91       	pop	r27
    435a:	af 91       	pop	r26
    435c:	9f 91       	pop	r25
    435e:	8f 91       	pop	r24
    4360:	7f 91       	pop	r23
    4362:	6f 91       	pop	r22
    4364:	5f 91       	pop	r21
    4366:	4f 91       	pop	r20
    4368:	3f 91       	pop	r19
    436a:	2f 91       	pop	r18
    436c:	0f 90       	pop	r0
    436e:	0f be       	out	0x3f, r0	; 63
    4370:	0f 90       	pop	r0
    4372:	1f 90       	pop	r1
    4374:	18 95       	reti

00004376 <__vector_11>:
    4376:	1f 92       	push	r1
    4378:	0f 92       	push	r0
    437a:	0f b6       	in	r0, 0x3f	; 63
    437c:	0f 92       	push	r0
    437e:	11 24       	eor	r1, r1
    4380:	2f 93       	push	r18
    4382:	3f 93       	push	r19
    4384:	4f 93       	push	r20
    4386:	5f 93       	push	r21
    4388:	6f 93       	push	r22
    438a:	7f 93       	push	r23
    438c:	8f 93       	push	r24
    438e:	9f 93       	push	r25
    4390:	af 93       	push	r26
    4392:	bf 93       	push	r27
    4394:	ef 93       	push	r30
    4396:	ff 93       	push	r31
    4398:	e0 91 bc 03 	lds	r30, 0x03BC
    439c:	f0 91 bd 03 	lds	r31, 0x03BD
    43a0:	30 97       	sbiw	r30, 0x00	; 0
    43a2:	09 f0       	breq	.+2      	; 0x43a6 <__vector_11+0x30>
    43a4:	09 95       	icall
    43a6:	ff 91       	pop	r31
    43a8:	ef 91       	pop	r30
    43aa:	bf 91       	pop	r27
    43ac:	af 91       	pop	r26
    43ae:	9f 91       	pop	r25
    43b0:	8f 91       	pop	r24
    43b2:	7f 91       	pop	r23
    43b4:	6f 91       	pop	r22
    43b6:	5f 91       	pop	r21
    43b8:	4f 91       	pop	r20
    43ba:	3f 91       	pop	r19
    43bc:	2f 91       	pop	r18
    43be:	0f 90       	pop	r0
    43c0:	0f be       	out	0x3f, r0	; 63
    43c2:	0f 90       	pop	r0
    43c4:	1f 90       	pop	r1
    43c6:	18 95       	reti

000043c8 <__vector_13>:
    43c8:	1f 92       	push	r1
    43ca:	0f 92       	push	r0
    43cc:	0f b6       	in	r0, 0x3f	; 63
    43ce:	0f 92       	push	r0
    43d0:	11 24       	eor	r1, r1
    43d2:	2f 93       	push	r18
    43d4:	3f 93       	push	r19
    43d6:	4f 93       	push	r20
    43d8:	5f 93       	push	r21
    43da:	6f 93       	push	r22
    43dc:	7f 93       	push	r23
    43de:	8f 93       	push	r24
    43e0:	9f 93       	push	r25
    43e2:	af 93       	push	r26
    43e4:	bf 93       	push	r27
    43e6:	ef 93       	push	r30
    43e8:	ff 93       	push	r31
    43ea:	e0 91 c0 03 	lds	r30, 0x03C0
    43ee:	f0 91 c1 03 	lds	r31, 0x03C1
    43f2:	30 97       	sbiw	r30, 0x00	; 0
    43f4:	09 f0       	breq	.+2      	; 0x43f8 <__vector_13+0x30>
    43f6:	09 95       	icall
    43f8:	ff 91       	pop	r31
    43fa:	ef 91       	pop	r30
    43fc:	bf 91       	pop	r27
    43fe:	af 91       	pop	r26
    4400:	9f 91       	pop	r25
    4402:	8f 91       	pop	r24
    4404:	7f 91       	pop	r23
    4406:	6f 91       	pop	r22
    4408:	5f 91       	pop	r21
    440a:	4f 91       	pop	r20
    440c:	3f 91       	pop	r19
    440e:	2f 91       	pop	r18
    4410:	0f 90       	pop	r0
    4412:	0f be       	out	0x3f, r0	; 63
    4414:	0f 90       	pop	r0
    4416:	1f 90       	pop	r1
    4418:	18 95       	reti

0000441a <__vector_14>:
    441a:	1f 92       	push	r1
    441c:	0f 92       	push	r0
    441e:	0f b6       	in	r0, 0x3f	; 63
    4420:	0f 92       	push	r0
    4422:	11 24       	eor	r1, r1
    4424:	2f 93       	push	r18
    4426:	3f 93       	push	r19
    4428:	4f 93       	push	r20
    442a:	5f 93       	push	r21
    442c:	6f 93       	push	r22
    442e:	7f 93       	push	r23
    4430:	8f 93       	push	r24
    4432:	9f 93       	push	r25
    4434:	af 93       	push	r26
    4436:	bf 93       	push	r27
    4438:	ef 93       	push	r30
    443a:	ff 93       	push	r31
    443c:	e0 91 c2 03 	lds	r30, 0x03C2
    4440:	f0 91 c3 03 	lds	r31, 0x03C3
    4444:	30 97       	sbiw	r30, 0x00	; 0
    4446:	09 f0       	breq	.+2      	; 0x444a <__vector_14+0x30>
    4448:	09 95       	icall
    444a:	ff 91       	pop	r31
    444c:	ef 91       	pop	r30
    444e:	bf 91       	pop	r27
    4450:	af 91       	pop	r26
    4452:	9f 91       	pop	r25
    4454:	8f 91       	pop	r24
    4456:	7f 91       	pop	r23
    4458:	6f 91       	pop	r22
    445a:	5f 91       	pop	r21
    445c:	4f 91       	pop	r20
    445e:	3f 91       	pop	r19
    4460:	2f 91       	pop	r18
    4462:	0f 90       	pop	r0
    4464:	0f be       	out	0x3f, r0	; 63
    4466:	0f 90       	pop	r0
    4468:	1f 90       	pop	r1
    446a:	18 95       	reti

0000446c <__vector_12>:
    446c:	1f 92       	push	r1
    446e:	0f 92       	push	r0
    4470:	0f b6       	in	r0, 0x3f	; 63
    4472:	0f 92       	push	r0
    4474:	11 24       	eor	r1, r1
    4476:	2f 93       	push	r18
    4478:	3f 93       	push	r19
    447a:	4f 93       	push	r20
    447c:	5f 93       	push	r21
    447e:	6f 93       	push	r22
    4480:	7f 93       	push	r23
    4482:	8f 93       	push	r24
    4484:	9f 93       	push	r25
    4486:	af 93       	push	r26
    4488:	bf 93       	push	r27
    448a:	ef 93       	push	r30
    448c:	ff 93       	push	r31
    448e:	e0 91 be 03 	lds	r30, 0x03BE
    4492:	f0 91 bf 03 	lds	r31, 0x03BF
    4496:	30 97       	sbiw	r30, 0x00	; 0
    4498:	09 f0       	breq	.+2      	; 0x449c <__vector_12+0x30>
    449a:	09 95       	icall
    449c:	ff 91       	pop	r31
    449e:	ef 91       	pop	r30
    44a0:	bf 91       	pop	r27
    44a2:	af 91       	pop	r26
    44a4:	9f 91       	pop	r25
    44a6:	8f 91       	pop	r24
    44a8:	7f 91       	pop	r23
    44aa:	6f 91       	pop	r22
    44ac:	5f 91       	pop	r21
    44ae:	4f 91       	pop	r20
    44b0:	3f 91       	pop	r19
    44b2:	2f 91       	pop	r18
    44b4:	0f 90       	pop	r0
    44b6:	0f be       	out	0x3f, r0	; 63
    44b8:	0f 90       	pop	r0
    44ba:	1f 90       	pop	r1
    44bc:	18 95       	reti

000044be <__vector_15>:
    44be:	1f 92       	push	r1
    44c0:	0f 92       	push	r0
    44c2:	0f b6       	in	r0, 0x3f	; 63
    44c4:	0f 92       	push	r0
    44c6:	11 24       	eor	r1, r1
    44c8:	2f 93       	push	r18
    44ca:	3f 93       	push	r19
    44cc:	4f 93       	push	r20
    44ce:	5f 93       	push	r21
    44d0:	6f 93       	push	r22
    44d2:	7f 93       	push	r23
    44d4:	8f 93       	push	r24
    44d6:	9f 93       	push	r25
    44d8:	af 93       	push	r26
    44da:	bf 93       	push	r27
    44dc:	ef 93       	push	r30
    44de:	ff 93       	push	r31
    44e0:	e0 91 c4 03 	lds	r30, 0x03C4
    44e4:	f0 91 c5 03 	lds	r31, 0x03C5
    44e8:	30 97       	sbiw	r30, 0x00	; 0
    44ea:	09 f0       	breq	.+2      	; 0x44ee <__vector_15+0x30>
    44ec:	09 95       	icall
    44ee:	ff 91       	pop	r31
    44f0:	ef 91       	pop	r30
    44f2:	bf 91       	pop	r27
    44f4:	af 91       	pop	r26
    44f6:	9f 91       	pop	r25
    44f8:	8f 91       	pop	r24
    44fa:	7f 91       	pop	r23
    44fc:	6f 91       	pop	r22
    44fe:	5f 91       	pop	r21
    4500:	4f 91       	pop	r20
    4502:	3f 91       	pop	r19
    4504:	2f 91       	pop	r18
    4506:	0f 90       	pop	r0
    4508:	0f be       	out	0x3f, r0	; 63
    450a:	0f 90       	pop	r0
    450c:	1f 90       	pop	r1
    450e:	18 95       	reti

00004510 <__vector_4>:
    4510:	1f 92       	push	r1
    4512:	0f 92       	push	r0
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	0f 92       	push	r0
    4518:	11 24       	eor	r1, r1
    451a:	2f 93       	push	r18
    451c:	3f 93       	push	r19
    451e:	4f 93       	push	r20
    4520:	5f 93       	push	r21
    4522:	6f 93       	push	r22
    4524:	7f 93       	push	r23
    4526:	8f 93       	push	r24
    4528:	9f 93       	push	r25
    452a:	af 93       	push	r26
    452c:	bf 93       	push	r27
    452e:	ef 93       	push	r30
    4530:	ff 93       	push	r31
    4532:	e0 91 ae 03 	lds	r30, 0x03AE
    4536:	f0 91 af 03 	lds	r31, 0x03AF
    453a:	30 97       	sbiw	r30, 0x00	; 0
    453c:	09 f0       	breq	.+2      	; 0x4540 <__vector_4+0x30>
    453e:	09 95       	icall
    4540:	ff 91       	pop	r31
    4542:	ef 91       	pop	r30
    4544:	bf 91       	pop	r27
    4546:	af 91       	pop	r26
    4548:	9f 91       	pop	r25
    454a:	8f 91       	pop	r24
    454c:	7f 91       	pop	r23
    454e:	6f 91       	pop	r22
    4550:	5f 91       	pop	r21
    4552:	4f 91       	pop	r20
    4554:	3f 91       	pop	r19
    4556:	2f 91       	pop	r18
    4558:	0f 90       	pop	r0
    455a:	0f be       	out	0x3f, r0	; 63
    455c:	0f 90       	pop	r0
    455e:	1f 90       	pop	r1
    4560:	18 95       	reti

00004562 <__vector_5>:
    4562:	1f 92       	push	r1
    4564:	0f 92       	push	r0
    4566:	0f b6       	in	r0, 0x3f	; 63
    4568:	0f 92       	push	r0
    456a:	11 24       	eor	r1, r1
    456c:	2f 93       	push	r18
    456e:	3f 93       	push	r19
    4570:	4f 93       	push	r20
    4572:	5f 93       	push	r21
    4574:	6f 93       	push	r22
    4576:	7f 93       	push	r23
    4578:	8f 93       	push	r24
    457a:	9f 93       	push	r25
    457c:	af 93       	push	r26
    457e:	bf 93       	push	r27
    4580:	ef 93       	push	r30
    4582:	ff 93       	push	r31
    4584:	e0 91 b0 03 	lds	r30, 0x03B0
    4588:	f0 91 b1 03 	lds	r31, 0x03B1
    458c:	30 97       	sbiw	r30, 0x00	; 0
    458e:	09 f0       	breq	.+2      	; 0x4592 <__vector_5+0x30>
    4590:	09 95       	icall
    4592:	ff 91       	pop	r31
    4594:	ef 91       	pop	r30
    4596:	bf 91       	pop	r27
    4598:	af 91       	pop	r26
    459a:	9f 91       	pop	r25
    459c:	8f 91       	pop	r24
    459e:	7f 91       	pop	r23
    45a0:	6f 91       	pop	r22
    45a2:	5f 91       	pop	r21
    45a4:	4f 91       	pop	r20
    45a6:	3f 91       	pop	r19
    45a8:	2f 91       	pop	r18
    45aa:	0f 90       	pop	r0
    45ac:	0f be       	out	0x3f, r0	; 63
    45ae:	0f 90       	pop	r0
    45b0:	1f 90       	pop	r1
    45b2:	18 95       	reti

000045b4 <__vector_6>:
    45b4:	1f 92       	push	r1
    45b6:	0f 92       	push	r0
    45b8:	0f b6       	in	r0, 0x3f	; 63
    45ba:	0f 92       	push	r0
    45bc:	11 24       	eor	r1, r1
    45be:	2f 93       	push	r18
    45c0:	3f 93       	push	r19
    45c2:	4f 93       	push	r20
    45c4:	5f 93       	push	r21
    45c6:	6f 93       	push	r22
    45c8:	7f 93       	push	r23
    45ca:	8f 93       	push	r24
    45cc:	9f 93       	push	r25
    45ce:	af 93       	push	r26
    45d0:	bf 93       	push	r27
    45d2:	ef 93       	push	r30
    45d4:	ff 93       	push	r31
    45d6:	e0 91 b2 03 	lds	r30, 0x03B2
    45da:	f0 91 b3 03 	lds	r31, 0x03B3
    45de:	30 97       	sbiw	r30, 0x00	; 0
    45e0:	09 f0       	breq	.+2      	; 0x45e4 <__vector_6+0x30>
    45e2:	09 95       	icall
    45e4:	ff 91       	pop	r31
    45e6:	ef 91       	pop	r30
    45e8:	bf 91       	pop	r27
    45ea:	af 91       	pop	r26
    45ec:	9f 91       	pop	r25
    45ee:	8f 91       	pop	r24
    45f0:	7f 91       	pop	r23
    45f2:	6f 91       	pop	r22
    45f4:	5f 91       	pop	r21
    45f6:	4f 91       	pop	r20
    45f8:	3f 91       	pop	r19
    45fa:	2f 91       	pop	r18
    45fc:	0f 90       	pop	r0
    45fe:	0f be       	out	0x3f, r0	; 63
    4600:	0f 90       	pop	r0
    4602:	1f 90       	pop	r1
    4604:	18 95       	reti

00004606 <__vector_7>:
    4606:	1f 92       	push	r1
    4608:	0f 92       	push	r0
    460a:	0f b6       	in	r0, 0x3f	; 63
    460c:	0f 92       	push	r0
    460e:	11 24       	eor	r1, r1
    4610:	2f 93       	push	r18
    4612:	3f 93       	push	r19
    4614:	4f 93       	push	r20
    4616:	5f 93       	push	r21
    4618:	6f 93       	push	r22
    461a:	7f 93       	push	r23
    461c:	8f 93       	push	r24
    461e:	9f 93       	push	r25
    4620:	af 93       	push	r26
    4622:	bf 93       	push	r27
    4624:	ef 93       	push	r30
    4626:	ff 93       	push	r31
    4628:	e0 91 b4 03 	lds	r30, 0x03B4
    462c:	f0 91 b5 03 	lds	r31, 0x03B5
    4630:	30 97       	sbiw	r30, 0x00	; 0
    4632:	09 f0       	breq	.+2      	; 0x4636 <__vector_7+0x30>
    4634:	09 95       	icall
    4636:	ff 91       	pop	r31
    4638:	ef 91       	pop	r30
    463a:	bf 91       	pop	r27
    463c:	af 91       	pop	r26
    463e:	9f 91       	pop	r25
    4640:	8f 91       	pop	r24
    4642:	7f 91       	pop	r23
    4644:	6f 91       	pop	r22
    4646:	5f 91       	pop	r21
    4648:	4f 91       	pop	r20
    464a:	3f 91       	pop	r19
    464c:	2f 91       	pop	r18
    464e:	0f 90       	pop	r0
    4650:	0f be       	out	0x3f, r0	; 63
    4652:	0f 90       	pop	r0
    4654:	1f 90       	pop	r1
    4656:	18 95       	reti

00004658 <ISR_attach>:
    4658:	e8 2f       	mov	r30, r24
    465a:	80 32       	cpi	r24, 0x20	; 32
    465c:	68 f4       	brcc	.+26     	; 0x4678 <ISR_attach+0x20>
    465e:	80 51       	subi	r24, 0x10	; 16
    4660:	83 30       	cpi	r24, 0x03	; 3
    4662:	50 f0       	brcs	.+20     	; 0x4678 <ISR_attach+0x20>
    4664:	f0 e0       	ldi	r31, 0x00	; 0
    4666:	ee 0f       	add	r30, r30
    4668:	ff 1f       	adc	r31, r31
    466a:	ea 55       	subi	r30, 0x5A	; 90
    466c:	fc 4f       	sbci	r31, 0xFC	; 252
    466e:	20 81       	ld	r18, Z
    4670:	31 81       	ldd	r19, Z+1	; 0x01
    4672:	71 83       	std	Z+1, r23	; 0x01
    4674:	60 83       	st	Z, r22
    4676:	02 c0       	rjmp	.+4      	; 0x467c <ISR_attach+0x24>
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	c9 01       	movw	r24, r18
    467e:	08 95       	ret

00004680 <ISR_open>:
    4680:	80 e1       	ldi	r24, 0x10	; 16
    4682:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    4686:	88 23       	and	r24, r24
    4688:	61 f4       	brne	.+24     	; 0x46a2 <ISR_open+0x22>
    468a:	e6 ea       	ldi	r30, 0xA6	; 166
    468c:	f3 e0       	ldi	r31, 0x03	; 3
    468e:	11 92       	st	Z+, r1
    4690:	11 92       	st	Z+, r1
    4692:	83 e0       	ldi	r24, 0x03	; 3
    4694:	e6 3e       	cpi	r30, 0xE6	; 230
    4696:	f8 07       	cpc	r31, r24
    4698:	d1 f7       	brne	.-12     	; 0x468e <ISR_open+0xe>
    469a:	80 e1       	ldi	r24, 0x10	; 16
    469c:	61 e0       	ldi	r22, 0x01	; 1
    469e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    46a2:	80 e1       	ldi	r24, 0x10	; 16
    46a4:	91 e0       	ldi	r25, 0x01	; 1
    46a6:	08 95       	ret

000046a8 <__LCD_init>:
    46a8:	23 9a       	sbi	0x04, 3	; 4
    46aa:	08 95       	ret

000046ac <__LCD_putchar>:
    46ac:	ff 92       	push	r15
    46ae:	0f 93       	push	r16
    46b0:	1f 93       	push	r17
    46b2:	cf 93       	push	r28
    46b4:	df 93       	push	r29
    46b6:	f8 2e       	mov	r15, r24
    46b8:	8a e0       	ldi	r24, 0x0A	; 10
    46ba:	f8 16       	cp	r15, r24
    46bc:	b1 f0       	breq	.+44     	; 0x46ea <__LCD_putchar+0x3e>
    46be:	8f 15       	cp	r24, r15
    46c0:	48 f0       	brcs	.+18     	; 0x46d4 <__LCD_putchar+0x28>
    46c2:	e8 e0       	ldi	r30, 0x08	; 8
    46c4:	fe 16       	cp	r15, r30
    46c6:	b9 f1       	breq	.+110    	; 0x4736 <__LCD_putchar+0x8a>
    46c8:	ef 15       	cp	r30, r15
    46ca:	38 f1       	brcs	.+78     	; 0x471a <__LCD_putchar+0x6e>
    46cc:	f7 e0       	ldi	r31, 0x07	; 7
    46ce:	ff 16       	cp	r15, r31
    46d0:	51 f4       	brne	.+20     	; 0x46e6 <__LCD_putchar+0x3a>
    46d2:	3b c0       	rjmp	.+118    	; 0x474a <__LCD_putchar+0x9e>
    46d4:	8d e0       	ldi	r24, 0x0D	; 13
    46d6:	f8 16       	cp	r15, r24
    46d8:	59 f0       	breq	.+22     	; 0x46f0 <__LCD_putchar+0x44>
    46da:	eb e1       	ldi	r30, 0x1B	; 27
    46dc:	fe 16       	cp	r15, r30
    46de:	89 f0       	breq	.+34     	; 0x4702 <__LCD_putchar+0x56>
    46e0:	fc e0       	ldi	r31, 0x0C	; 12
    46e2:	ff 16       	cp	r15, r31
    46e4:	41 f0       	breq	.+16     	; 0x46f6 <__LCD_putchar+0x4a>
    46e6:	01 e0       	ldi	r16, 0x01	; 1
    46e8:	41 c0       	rjmp	.+130    	; 0x476c <__LCD_putchar+0xc0>
    46ea:	10 92 9b 08 	sts	0x089B, r1
    46ee:	03 c0       	rjmp	.+6      	; 0x46f6 <__LCD_putchar+0x4a>
    46f0:	10 92 9b 08 	sts	0x089B, r1
    46f4:	3a c0       	rjmp	.+116    	; 0x476a <__LCD_putchar+0xbe>
    46f6:	80 91 9c 08 	lds	r24, 0x089C
    46fa:	81 50       	subi	r24, 0x01	; 1
    46fc:	80 93 9c 08 	sts	0x089C, r24
    4700:	34 c0       	rjmp	.+104    	; 0x476a <__LCD_putchar+0xbe>
    4702:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <LCD_clear>
    4706:	14 c0       	rjmp	.+40     	; 0x4730 <__LCD_putchar+0x84>
    4708:	80 e0       	ldi	r24, 0x00	; 0
    470a:	61 e0       	ldi	r22, 0x01	; 1
    470c:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    4710:	80 91 9b 08 	lds	r24, 0x089B
    4714:	8f 5f       	subi	r24, 0xFF	; 255
    4716:	80 93 9b 08 	sts	0x089B, r24
    471a:	80 91 9b 08 	lds	r24, 0x089B
    471e:	87 ff       	sbrs	r24, 7
    4720:	f3 cf       	rjmp	.-26     	; 0x4708 <__LCD_putchar+0x5c>
    4722:	10 92 9b 08 	sts	0x089B, r1
    4726:	80 91 9c 08 	lds	r24, 0x089C
    472a:	81 50       	subi	r24, 0x01	; 1
    472c:	80 93 9c 08 	sts	0x089C, r24
    4730:	00 e0       	ldi	r16, 0x00	; 0
    4732:	11 e0       	ldi	r17, 0x01	; 1
    4734:	1c c0       	rjmp	.+56     	; 0x476e <__LCD_putchar+0xc2>
    4736:	80 91 9b 08 	lds	r24, 0x089B
    473a:	88 23       	and	r24, r24
    473c:	b1 f0       	breq	.+44     	; 0x476a <__LCD_putchar+0xbe>
    473e:	80 91 9b 08 	lds	r24, 0x089B
    4742:	86 50       	subi	r24, 0x06	; 6
    4744:	80 93 9b 08 	sts	0x089B, r24
    4748:	10 c0       	rjmp	.+32     	; 0x476a <__LCD_putchar+0xbe>
    474a:	81 e0       	ldi	r24, 0x01	; 1
    474c:	0e 94 ed 1a 	call	0x35da	; 0x35da <SPKR_open>
    4750:	64 ef       	ldi	r22, 0xF4	; 244
    4752:	71 e0       	ldi	r23, 0x01	; 1
    4754:	80 e0       	ldi	r24, 0x00	; 0
    4756:	90 e0       	ldi	r25, 0x00	; 0
    4758:	4d e7       	ldi	r20, 0x7D	; 125
    475a:	50 e0       	ldi	r21, 0x00	; 0
    475c:	24 e6       	ldi	r18, 0x64	; 100
    475e:	30 e0       	ldi	r19, 0x00	; 0
    4760:	0e 94 70 25 	call	0x4ae0	; 0x4ae0 <SPKR_play_beep>
    4764:	81 e0       	ldi	r24, 0x01	; 1
    4766:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <SPKR_close>
    476a:	00 e0       	ldi	r16, 0x00	; 0
    476c:	10 e0       	ldi	r17, 0x00	; 0
    476e:	80 91 9c 08 	lds	r24, 0x089C
    4772:	60 91 9b 08 	lds	r22, 0x089B
    4776:	0e 94 a7 19 	call	0x334e	; 0x334e <LCD_set_PGC_addr>
    477a:	00 23       	and	r16, r16
    477c:	51 f1       	breq	.+84     	; 0x47d2 <__LCD_putchar+0x126>
    477e:	85 e0       	ldi	r24, 0x05	; 5
    4780:	f8 9e       	mul	r15, r24
    4782:	c0 01       	movw	r24, r0
    4784:	11 24       	eor	r1, r1
    4786:	ec 01       	movw	r28, r24
    4788:	c3 55       	subi	r28, 0x53	; 83
    478a:	df 4f       	sbci	r29, 0xFF	; 255
    478c:	8c 01       	movw	r16, r24
    478e:	0e 54       	subi	r16, 0x4E	; 78
    4790:	1f 4f       	sbci	r17, 0xFF	; 255
    4792:	fe 01       	movw	r30, r28
    4794:	84 91       	lpm	r24, Z+
    4796:	61 e0       	ldi	r22, 0x01	; 1
    4798:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    479c:	21 96       	adiw	r28, 0x01	; 1
    479e:	c0 17       	cp	r28, r16
    47a0:	d1 07       	cpc	r29, r17
    47a2:	b9 f7       	brne	.-18     	; 0x4792 <__LCD_putchar+0xe6>
    47a4:	80 e0       	ldi	r24, 0x00	; 0
    47a6:	61 e0       	ldi	r22, 0x01	; 1
    47a8:	0e 94 c0 19 	call	0x3380	; 0x3380 <LCD_write>
    47ac:	80 91 9b 08 	lds	r24, 0x089B
    47b0:	8a 5f       	subi	r24, 0xFA	; 250
    47b2:	80 93 9b 08 	sts	0x089B, r24
    47b6:	80 91 9b 08 	lds	r24, 0x089B
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	8c 37       	cpi	r24, 0x7C	; 124
    47be:	91 05       	cpc	r25, r1
    47c0:	3c f0       	brlt	.+14     	; 0x47d0 <__LCD_putchar+0x124>
    47c2:	10 92 9b 08 	sts	0x089B, r1
    47c6:	80 91 9c 08 	lds	r24, 0x089C
    47ca:	81 50       	subi	r24, 0x01	; 1
    47cc:	80 93 9c 08 	sts	0x089C, r24
    47d0:	11 e0       	ldi	r17, 0x01	; 1
    47d2:	80 91 9c 08 	lds	r24, 0x089C
    47d6:	83 70       	andi	r24, 0x03	; 3
    47d8:	80 93 9c 08 	sts	0x089C, r24
    47dc:	11 30       	cpi	r17, 0x01	; 1
    47de:	59 f4       	brne	.+22     	; 0x47f6 <__LCD_putchar+0x14a>
    47e0:	80 91 9d 08 	lds	r24, 0x089D
    47e4:	81 30       	cpi	r24, 0x01	; 1
    47e6:	39 f4       	brne	.+14     	; 0x47f6 <__LCD_putchar+0x14a>
    47e8:	e0 91 9e 08 	lds	r30, 0x089E
    47ec:	f0 91 9f 08 	lds	r31, 0x089F
    47f0:	30 97       	sbiw	r30, 0x00	; 0
    47f2:	09 f0       	breq	.+2      	; 0x47f6 <__LCD_putchar+0x14a>
    47f4:	09 95       	icall
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	df 91       	pop	r29
    47fc:	cf 91       	pop	r28
    47fe:	1f 91       	pop	r17
    4800:	0f 91       	pop	r16
    4802:	ff 90       	pop	r15
    4804:	08 95       	ret

00004806 <__LED_clr_pattern>:
    4806:	85 fd       	sbrc	r24, 5
    4808:	5d 98       	cbi	0x0b, 5	; 11
    480a:	86 fd       	sbrc	r24, 6
    480c:	5e 98       	cbi	0x0b, 6	; 11
    480e:	08 95       	ret

00004810 <__LED_init>:
    4810:	55 9a       	sbi	0x0a, 5	; 10
    4812:	56 9a       	sbi	0x0a, 6	; 10
    4814:	08 95       	ret

00004816 <__LED_set_pattern>:
    4816:	85 fd       	sbrc	r24, 5
    4818:	5d 9a       	sbi	0x0b, 5	; 11
    481a:	86 fd       	sbrc	r24, 6
    481c:	5e 9a       	sbi	0x0b, 6	; 11
    481e:	08 95       	ret

00004820 <ATMEGA_open>:
    4820:	80 e0       	ldi	r24, 0x00	; 0
    4822:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    4826:	88 23       	and	r24, r24
    4828:	51 f4       	brne	.+20     	; 0x483e <ATMEGA_open+0x1e>
    482a:	f8 94       	cli
    482c:	0e 94 22 27 	call	0x4e44	; 0x4e44 <__ATMEGA_init>
    4830:	81 e0       	ldi	r24, 0x01	; 1
    4832:	0e 94 22 24 	call	0x4844	; 0x4844 <ATMEGA_set_clk_mode>
    4836:	80 e0       	ldi	r24, 0x00	; 0
    4838:	61 e0       	ldi	r22, 0x01	; 1
    483a:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    483e:	80 e0       	ldi	r24, 0x00	; 0
    4840:	91 e0       	ldi	r25, 0x01	; 1
    4842:	08 95       	ret

00004844 <ATMEGA_set_clk_mode>:
    4844:	81 30       	cpi	r24, 0x01	; 1
    4846:	49 f0       	breq	.+18     	; 0x485a <ATMEGA_set_clk_mode+0x16>
    4848:	f8 94       	cli
    484a:	81 30       	cpi	r24, 0x01	; 1
    484c:	20 f1       	brcs	.+72     	; 0x4896 <ATMEGA_set_clk_mode+0x52>
    484e:	82 30       	cpi	r24, 0x02	; 2
    4850:	b1 f0       	breq	.+44     	; 0x487e <ATMEGA_set_clk_mode+0x3a>
    4852:	83 30       	cpi	r24, 0x03	; 3
    4854:	09 f0       	breq	.+2      	; 0x4858 <ATMEGA_set_clk_mode+0x14>
    4856:	45 c0       	rjmp	.+138    	; 0x48e2 <ATMEGA_set_clk_mode+0x9e>
    4858:	17 c0       	rjmp	.+46     	; 0x4888 <ATMEGA_set_clk_mode+0x44>
    485a:	2c 9a       	sbi	0x05, 4	; 5
    485c:	80 e8       	ldi	r24, 0x80	; 128
    485e:	80 93 61 00 	sts	0x0061, r24
    4862:	10 92 61 00 	sts	0x0061, r1
    4866:	80 e0       	ldi	r24, 0x00	; 0
    4868:	90 e0       	ldi	r25, 0x00	; 0
    486a:	00 00       	nop
    486c:	01 96       	adiw	r24, 0x01	; 1
    486e:	88 32       	cpi	r24, 0x28	; 40
    4870:	91 05       	cpc	r25, r1
    4872:	d9 f7       	brne	.-10     	; 0x486a <ATMEGA_set_clk_mode+0x26>
    4874:	10 92 68 00 	sts	0x0068, r1
    4878:	10 92 6b 00 	sts	0x006B, r1
    487c:	08 95       	ret
    487e:	80 e8       	ldi	r24, 0x80	; 128
    4880:	80 93 61 00 	sts	0x0061, r24
    4884:	83 e0       	ldi	r24, 0x03	; 3
    4886:	04 c0       	rjmp	.+8      	; 0x4890 <ATMEGA_set_clk_mode+0x4c>
    4888:	80 e8       	ldi	r24, 0x80	; 128
    488a:	80 93 61 00 	sts	0x0061, r24
    488e:	88 e0       	ldi	r24, 0x08	; 8
    4890:	80 93 61 00 	sts	0x0061, r24
    4894:	28 c0       	rjmp	.+80     	; 0x48e6 <ATMEGA_set_clk_mode+0xa2>
    4896:	80 e0       	ldi	r24, 0x00	; 0
    4898:	90 e0       	ldi	r25, 0x00	; 0
    489a:	00 00       	nop
    489c:	01 96       	adiw	r24, 0x01	; 1
    489e:	2d e6       	ldi	r18, 0x6D	; 109
    48a0:	80 36       	cpi	r24, 0x60	; 96
    48a2:	92 07       	cpc	r25, r18
    48a4:	d1 f7       	brne	.-12     	; 0x489a <ATMEGA_set_clk_mode+0x56>
    48a6:	2c 98       	cbi	0x05, 4	; 5
    48a8:	80 e0       	ldi	r24, 0x00	; 0
    48aa:	90 e0       	ldi	r25, 0x00	; 0
    48ac:	00 00       	nop
    48ae:	01 96       	adiw	r24, 0x01	; 1
    48b0:	2d e6       	ldi	r18, 0x6D	; 109
    48b2:	80 36       	cpi	r24, 0x60	; 96
    48b4:	92 07       	cpc	r25, r18
    48b6:	d1 f7       	brne	.-12     	; 0x48ac <ATMEGA_set_clk_mode+0x68>
    48b8:	10 92 7a 00 	sts	0x007A, r1
    48bc:	8f ef       	ldi	r24, 0xFF	; 255
    48be:	80 93 64 00 	sts	0x0064, r24
    48c2:	80 91 68 00 	lds	r24, 0x0068
    48c6:	81 60       	ori	r24, 0x01	; 1
    48c8:	80 93 68 00 	sts	0x0068, r24
    48cc:	80 91 6b 00 	lds	r24, 0x006B
    48d0:	84 60       	ori	r24, 0x04	; 4
    48d2:	80 93 6b 00 	sts	0x006B, r24
    48d6:	78 94       	sei
    48d8:	83 b7       	in	r24, 0x33	; 51
    48da:	81 60       	ori	r24, 0x01	; 1
    48dc:	83 bf       	out	0x33, r24	; 51
    48de:	88 95       	sleep
    48e0:	08 95       	ret
    48e2:	82 30       	cpi	r24, 0x02	; 2
    48e4:	08 f0       	brcs	.+2      	; 0x48e8 <ATMEGA_set_clk_mode+0xa4>
    48e6:	78 94       	sei
    48e8:	08 95       	ret

000048ea <SPI_open>:
    48ea:	0f 93       	push	r16
    48ec:	1f 93       	push	r17
    48ee:	0e 94 4e 27 	call	0x4e9c	; 0x4e9c <__SPI_init>
    48f2:	80 e0       	ldi	r24, 0x00	; 0
    48f4:	6d e3       	ldi	r22, 0x3D	; 61
    48f6:	77 e2       	ldi	r23, 0x27	; 39
    48f8:	0e 94 c0 24 	call	0x4980	; 0x4980 <SPI_set_config_func>
    48fc:	81 e0       	ldi	r24, 0x01	; 1
    48fe:	65 e3       	ldi	r22, 0x35	; 53
    4900:	77 e2       	ldi	r23, 0x27	; 39
    4902:	0e 94 c0 24 	call	0x4980	; 0x4980 <SPI_set_config_func>
    4906:	82 e0       	ldi	r24, 0x02	; 2
    4908:	6d e2       	ldi	r22, 0x2D	; 45
    490a:	77 e2       	ldi	r23, 0x27	; 39
    490c:	0e 94 c0 24 	call	0x4980	; 0x4980 <SPI_set_config_func>
    4910:	86 e0       	ldi	r24, 0x06	; 6
    4912:	65 e4       	ldi	r22, 0x45	; 69
    4914:	77 e2       	ldi	r23, 0x27	; 39
    4916:	0e 94 c0 24 	call	0x4980	; 0x4980 <SPI_set_config_func>
    491a:	05 e2       	ldi	r16, 0x25	; 37
    491c:	17 e2       	ldi	r17, 0x27	; 39
    491e:	83 e0       	ldi	r24, 0x03	; 3
    4920:	b8 01       	movw	r22, r16
    4922:	0e 94 c0 24 	call	0x4980	; 0x4980 <SPI_set_config_func>
    4926:	84 e0       	ldi	r24, 0x04	; 4
    4928:	b8 01       	movw	r22, r16
    492a:	0e 94 c0 24 	call	0x4980	; 0x4980 <SPI_set_config_func>
    492e:	85 e0       	ldi	r24, 0x05	; 5
    4930:	b8 01       	movw	r22, r16
    4932:	0e 94 c0 24 	call	0x4980	; 0x4980 <SPI_set_config_func>
    4936:	87 e0       	ldi	r24, 0x07	; 7
    4938:	b8 01       	movw	r22, r16
    493a:	0e 94 c0 24 	call	0x4980	; 0x4980 <SPI_set_config_func>
    493e:	82 e0       	ldi	r24, 0x02	; 2
    4940:	61 e0       	ldi	r22, 0x01	; 1
    4942:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    4946:	8f ef       	ldi	r24, 0xFF	; 255
    4948:	80 93 a0 08 	sts	0x08A0, r24
    494c:	87 e0       	ldi	r24, 0x07	; 7
    494e:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <SPI_set_slave_addr>
    4952:	82 e0       	ldi	r24, 0x02	; 2
    4954:	91 e0       	ldi	r25, 0x01	; 1
    4956:	1f 91       	pop	r17
    4958:	0f 91       	pop	r16
    495a:	08 95       	ret

0000495c <SPI_receive>:
    495c:	1f 93       	push	r17
    495e:	16 2f       	mov	r17, r22
    4960:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <SPI_set_slave_addr>
    4964:	82 e0       	ldi	r24, 0x02	; 2
    4966:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    496a:	81 30       	cpi	r24, 0x01	; 1
    496c:	11 f0       	breq	.+4      	; 0x4972 <SPI_receive+0x16>
    496e:	80 e0       	ldi	r24, 0x00	; 0
    4970:	05 c0       	rjmp	.+10     	; 0x497c <SPI_receive+0x20>
    4972:	1e bd       	out	0x2e, r17	; 46
    4974:	0d b4       	in	r0, 0x2d	; 45
    4976:	07 fe       	sbrs	r0, 7
    4978:	fd cf       	rjmp	.-6      	; 0x4974 <SPI_receive+0x18>
    497a:	8e b5       	in	r24, 0x2e	; 46
    497c:	1f 91       	pop	r17
    497e:	08 95       	ret

00004980 <SPI_set_config_func>:
    4980:	e8 2f       	mov	r30, r24
    4982:	f0 e0       	ldi	r31, 0x00	; 0
    4984:	ee 0f       	add	r30, r30
    4986:	ff 1f       	adc	r31, r31
    4988:	ea 51       	subi	r30, 0x1A	; 26
    498a:	fc 4f       	sbci	r31, 0xFC	; 252
    498c:	71 83       	std	Z+1, r23	; 0x01
    498e:	60 83       	st	Z, r22
    4990:	08 95       	ret

00004992 <__SPKR_TIMER1_COMPA_vect>:
    4992:	0e 94 cc 24 	call	0x4998	; 0x4998 <SPKR_clk>
    4996:	08 95       	ret

00004998 <SPKR_clk>:
    4998:	80 91 f8 03 	lds	r24, 0x03F8
    499c:	90 91 f9 03 	lds	r25, 0x03F9
    49a0:	a0 91 fa 03 	lds	r26, 0x03FA
    49a4:	b0 91 fb 03 	lds	r27, 0x03FB
    49a8:	20 91 fc 03 	lds	r18, 0x03FC
    49ac:	30 91 fd 03 	lds	r19, 0x03FD
    49b0:	40 91 fe 03 	lds	r20, 0x03FE
    49b4:	50 91 ff 03 	lds	r21, 0x03FF
    49b8:	28 0f       	add	r18, r24
    49ba:	39 1f       	adc	r19, r25
    49bc:	4a 1f       	adc	r20, r26
    49be:	5b 1f       	adc	r21, r27
    49c0:	20 93 f8 03 	sts	0x03F8, r18
    49c4:	30 93 f9 03 	sts	0x03F9, r19
    49c8:	40 93 fa 03 	sts	0x03FA, r20
    49cc:	50 93 fb 03 	sts	0x03FB, r21
    49d0:	80 91 f8 03 	lds	r24, 0x03F8
    49d4:	90 91 f9 03 	lds	r25, 0x03F9
    49d8:	a0 91 fa 03 	lds	r26, 0x03FA
    49dc:	b0 91 fb 03 	lds	r27, 0x03FB
    49e0:	88 51       	subi	r24, 0x18	; 24
    49e2:	96 4f       	sbci	r25, 0xF6	; 246
    49e4:	a0 40       	sbci	r26, 0x00	; 0
    49e6:	b0 40       	sbci	r27, 0x00	; 0
    49e8:	bc f0       	brlt	.+46     	; 0x4a18 <SPKR_clk+0x80>
    49ea:	8b b1       	in	r24, 0x0b	; 11
    49ec:	80 58       	subi	r24, 0x80	; 128
    49ee:	8b b9       	out	0x0b, r24	; 11
    49f0:	80 91 f8 03 	lds	r24, 0x03F8
    49f4:	90 91 f9 03 	lds	r25, 0x03F9
    49f8:	a0 91 fa 03 	lds	r26, 0x03FA
    49fc:	b0 91 fb 03 	lds	r27, 0x03FB
    4a00:	88 51       	subi	r24, 0x18	; 24
    4a02:	96 4f       	sbci	r25, 0xF6	; 246
    4a04:	a0 40       	sbci	r26, 0x00	; 0
    4a06:	b0 40       	sbci	r27, 0x00	; 0
    4a08:	80 93 f8 03 	sts	0x03F8, r24
    4a0c:	90 93 f9 03 	sts	0x03F9, r25
    4a10:	a0 93 fa 03 	sts	0x03FA, r26
    4a14:	b0 93 fb 03 	sts	0x03FB, r27
    4a18:	08 95       	ret

00004a1a <__SPKR_close_beep_mode>:
    4a1a:	8a e0       	ldi	r24, 0x0A	; 10
    4a1c:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    4a20:	81 30       	cpi	r24, 0x01	; 1
    4a22:	41 f4       	brne	.+16     	; 0x4a34 <__SPKR_close_beep_mode+0x1a>
    4a24:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__SPKR_close>
    4a28:	10 92 f7 03 	sts	0x03F7, r1
    4a2c:	8a e0       	ldi	r24, 0x0A	; 10
    4a2e:	60 e0       	ldi	r22, 0x00	; 0
    4a30:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    4a34:	08 95       	ret

00004a36 <__SPKR_close_tone_mode>:
    4a36:	89 e0       	ldi	r24, 0x09	; 9
    4a38:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    4a3c:	81 30       	cpi	r24, 0x01	; 1
    4a3e:	d9 f4       	brne	.+54     	; 0x4a76 <__SPKR_close_tone_mode+0x40>
    4a40:	80 91 f6 03 	lds	r24, 0x03F6
    4a44:	88 23       	and	r24, r24
    4a46:	11 f0       	breq	.+4      	; 0x4a4c <__SPKR_close_tone_mode+0x16>
    4a48:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <__SPKR_stop>
    4a4c:	82 e0       	ldi	r24, 0x02	; 2
    4a4e:	0e 94 6c 27 	call	0x4ed8	; 0x4ed8 <__SPKR_close>
    4a52:	80 91 04 04 	lds	r24, 0x0404
    4a56:	90 91 05 04 	lds	r25, 0x0405
    4a5a:	00 97       	sbiw	r24, 0x00	; 0
    4a5c:	31 f0       	breq	.+12     	; 0x4a6a <__SPKR_close_tone_mode+0x34>
    4a5e:	0e 94 06 34 	call	0x680c	; 0x680c <free>
    4a62:	10 92 05 04 	sts	0x0405, r1
    4a66:	10 92 04 04 	sts	0x0404, r1
    4a6a:	10 92 f6 03 	sts	0x03F6, r1
    4a6e:	89 e0       	ldi	r24, 0x09	; 9
    4a70:	60 e0       	ldi	r22, 0x00	; 0
    4a72:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    4a76:	08 95       	ret

00004a78 <SPKR_close>:
    4a78:	81 30       	cpi	r24, 0x01	; 1
    4a7a:	29 f0       	breq	.+10     	; 0x4a86 <SPKR_close+0xe>
    4a7c:	82 30       	cpi	r24, 0x02	; 2
    4a7e:	29 f4       	brne	.+10     	; 0x4a8a <SPKR_close+0x12>
    4a80:	0e 94 1b 25 	call	0x4a36	; 0x4a36 <__SPKR_close_tone_mode>
    4a84:	08 95       	ret
    4a86:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <__SPKR_close_beep_mode>
    4a8a:	08 95       	ret

00004a8c <__SPKR_init>:
    4a8c:	98 2f       	mov	r25, r24
    4a8e:	80 91 f6 03 	lds	r24, 0x03F6
    4a92:	88 23       	and	r24, r24
    4a94:	31 f4       	brne	.+12     	; 0x4aa2 <__SPKR_init+0x16>
    4a96:	80 91 f7 03 	lds	r24, 0x03F7
    4a9a:	88 23       	and	r24, r24
    4a9c:	11 f4       	brne	.+4      	; 0x4aa2 <__SPKR_init+0x16>
    4a9e:	57 9a       	sbi	0x0a, 7	; 10
    4aa0:	5f 98       	cbi	0x0b, 7	; 11
    4aa2:	80 91 f6 03 	lds	r24, 0x03F6
    4aa6:	88 23       	and	r24, r24
    4aa8:	d1 f4       	brne	.+52     	; 0x4ade <__SPKR_init+0x52>
    4aaa:	92 30       	cpi	r25, 0x02	; 2
    4aac:	c1 f4       	brne	.+48     	; 0x4ade <__SPKR_init+0x52>
    4aae:	10 92 80 00 	sts	0x0080, r1
    4ab2:	10 92 81 00 	sts	0x0081, r1
    4ab6:	80 91 81 00 	lds	r24, 0x0081
    4aba:	88 60       	ori	r24, 0x08	; 8
    4abc:	80 93 81 00 	sts	0x0081, r24
    4ac0:	80 91 81 00 	lds	r24, 0x0081
    4ac4:	81 60       	ori	r24, 0x01	; 1
    4ac6:	80 93 81 00 	sts	0x0081, r24
    4aca:	10 92 85 00 	sts	0x0085, r1
    4ace:	10 92 84 00 	sts	0x0084, r1
    4ad2:	81 e0       	ldi	r24, 0x01	; 1
    4ad4:	80 93 89 00 	sts	0x0089, r24
    4ad8:	80 e9       	ldi	r24, 0x90	; 144
    4ada:	80 93 88 00 	sts	0x0088, r24
    4ade:	08 95       	ret

00004ae0 <SPKR_play_beep>:
    4ae0:	8f 92       	push	r8
    4ae2:	9f 92       	push	r9
    4ae4:	af 92       	push	r10
    4ae6:	bf 92       	push	r11
    4ae8:	cf 92       	push	r12
    4aea:	df 92       	push	r13
    4aec:	ef 92       	push	r14
    4aee:	ff 92       	push	r15
    4af0:	0f 93       	push	r16
    4af2:	1f 93       	push	r17
    4af4:	cf 93       	push	r28
    4af6:	df 93       	push	r29
    4af8:	4b 01       	movw	r8, r22
    4afa:	5c 01       	movw	r10, r24
    4afc:	ea 01       	movw	r28, r20
    4afe:	b9 01       	movw	r22, r18
    4b00:	21 15       	cp	r18, r1
    4b02:	31 05       	cpc	r19, r1
    4b04:	39 f1       	breq	.+78     	; 0x4b54 <SPKR_play_beep+0x74>
    4b06:	9e 01       	movw	r18, r28
    4b08:	44 27       	eor	r20, r20
    4b0a:	37 fd       	sbrc	r19, 7
    4b0c:	40 95       	com	r20
    4b0e:	54 2f       	mov	r21, r20
    4b10:	65 36       	cpi	r22, 0x65	; 101
    4b12:	71 05       	cpc	r23, r1
    4b14:	10 f0       	brcs	.+4      	; 0x4b1a <SPKR_play_beep+0x3a>
    4b16:	64 e6       	ldi	r22, 0x64	; 100
    4b18:	70 e0       	ldi	r23, 0x00	; 0
    4b1a:	80 e0       	ldi	r24, 0x00	; 0
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	0e 94 ba 32 	call	0x6574	; 0x6574 <__mulsi3>
    4b22:	24 e6       	ldi	r18, 0x64	; 100
    4b24:	30 e0       	ldi	r19, 0x00	; 0
    4b26:	40 e0       	ldi	r20, 0x00	; 0
    4b28:	50 e0       	ldi	r21, 0x00	; 0
    4b2a:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <__udivmodsi4>
    4b2e:	79 01       	movw	r14, r18
    4b30:	8a 01       	movw	r16, r20
    4b32:	c5 01       	movw	r24, r10
    4b34:	b4 01       	movw	r22, r8
    4b36:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <SPKR_beep>
    4b3a:	c7 01       	movw	r24, r14
    4b3c:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
    4b40:	60 e0       	ldi	r22, 0x00	; 0
    4b42:	70 e0       	ldi	r23, 0x00	; 0
    4b44:	80 e0       	ldi	r24, 0x00	; 0
    4b46:	90 e0       	ldi	r25, 0x00	; 0
    4b48:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <SPKR_beep>
    4b4c:	ce 01       	movw	r24, r28
    4b4e:	8e 19       	sub	r24, r14
    4b50:	9f 09       	sbc	r25, r15
    4b52:	04 c0       	rjmp	.+8      	; 0x4b5c <SPKR_play_beep+0x7c>
    4b54:	41 15       	cp	r20, r1
    4b56:	51 05       	cpc	r21, r1
    4b58:	19 f0       	breq	.+6      	; 0x4b60 <SPKR_play_beep+0x80>
    4b5a:	ca 01       	movw	r24, r20
    4b5c:	0e 94 a1 1f 	call	0x3f42	; 0x3f42 <TMRSRVC_delay>
    4b60:	df 91       	pop	r29
    4b62:	cf 91       	pop	r28
    4b64:	1f 91       	pop	r17
    4b66:	0f 91       	pop	r16
    4b68:	ff 90       	pop	r15
    4b6a:	ef 90       	pop	r14
    4b6c:	df 90       	pop	r13
    4b6e:	cf 90       	pop	r12
    4b70:	bf 90       	pop	r11
    4b72:	af 90       	pop	r10
    4b74:	9f 90       	pop	r9
    4b76:	8f 90       	pop	r8
    4b78:	08 95       	ret

00004b7a <__SPKR_stop>:
    4b7a:	ef e6       	ldi	r30, 0x6F	; 111
    4b7c:	f0 e0       	ldi	r31, 0x00	; 0
    4b7e:	80 81       	ld	r24, Z
    4b80:	8d 7f       	andi	r24, 0xFD	; 253
    4b82:	80 83       	st	Z, r24
    4b84:	08 95       	ret

00004b86 <STEPPER_go>:
    4b86:	98 2f       	mov	r25, r24
    4b88:	81 e0       	ldi	r24, 0x01	; 1
    4b8a:	80 93 85 08 	sts	0x0885, r24
    4b8e:	91 30       	cpi	r25, 0x01	; 1
    4b90:	51 f0       	breq	.+20     	; 0x4ba6 <STEPPER_go+0x20>
    4b92:	91 30       	cpi	r25, 0x01	; 1
    4b94:	18 f0       	brcs	.+6      	; 0x4b9c <STEPPER_go+0x16>
    4b96:	92 30       	cpi	r25, 0x02	; 2
    4b98:	41 f4       	brne	.+16     	; 0x4baa <STEPPER_go+0x24>
    4b9a:	03 c0       	rjmp	.+6      	; 0x4ba2 <STEPPER_go+0x1c>
    4b9c:	10 92 6d 08 	sts	0x086D, r1
    4ba0:	04 c0       	rjmp	.+8      	; 0x4baa <STEPPER_go+0x24>
    4ba2:	10 92 6d 08 	sts	0x086D, r1
    4ba6:	10 92 6e 08 	sts	0x086E, r1
    4baa:	10 92 85 08 	sts	0x0885, r1
    4bae:	08 95       	ret

00004bb0 <__STEPPER_init>:
    4bb0:	3a 9a       	sbi	0x07, 2	; 7
    4bb2:	3b 9a       	sbi	0x07, 3	; 7
    4bb4:	3c 9a       	sbi	0x07, 4	; 7
    4bb6:	3d 9a       	sbi	0x07, 5	; 7
    4bb8:	3e 9a       	sbi	0x07, 6	; 7
    4bba:	3f 9a       	sbi	0x07, 7	; 7
    4bbc:	88 b1       	in	r24, 0x08	; 8
    4bbe:	83 70       	andi	r24, 0x03	; 3
    4bc0:	88 b9       	out	0x08, r24	; 8
    4bc2:	08 95       	ret

00004bc4 <STEPPER_set_steps>:
    4bc4:	98 2f       	mov	r25, r24
    4bc6:	81 e0       	ldi	r24, 0x01	; 1
    4bc8:	80 93 85 08 	sts	0x0885, r24
    4bcc:	91 30       	cpi	r25, 0x01	; 1
    4bce:	71 f0       	breq	.+28     	; 0x4bec <STEPPER_set_steps+0x28>
    4bd0:	91 30       	cpi	r25, 0x01	; 1
    4bd2:	18 f0       	brcs	.+6      	; 0x4bda <STEPPER_set_steps+0x16>
    4bd4:	92 30       	cpi	r25, 0x02	; 2
    4bd6:	71 f4       	brne	.+28     	; 0x4bf4 <STEPPER_set_steps+0x30>
    4bd8:	05 c0       	rjmp	.+10     	; 0x4be4 <STEPPER_set_steps+0x20>
    4bda:	70 93 62 08 	sts	0x0862, r23
    4bde:	60 93 61 08 	sts	0x0861, r22
    4be2:	08 c0       	rjmp	.+16     	; 0x4bf4 <STEPPER_set_steps+0x30>
    4be4:	70 93 62 08 	sts	0x0862, r23
    4be8:	60 93 61 08 	sts	0x0861, r22
    4bec:	70 93 64 08 	sts	0x0864, r23
    4bf0:	60 93 63 08 	sts	0x0863, r22
    4bf4:	10 92 85 08 	sts	0x0885, r1
    4bf8:	08 95       	ret

00004bfa <STEPPER_set_stop_mode>:
    4bfa:	98 2f       	mov	r25, r24
    4bfc:	81 e0       	ldi	r24, 0x01	; 1
    4bfe:	80 93 85 08 	sts	0x0885, r24
    4c02:	91 30       	cpi	r25, 0x01	; 1
    4c04:	51 f0       	breq	.+20     	; 0x4c1a <STEPPER_set_stop_mode+0x20>
    4c06:	91 30       	cpi	r25, 0x01	; 1
    4c08:	18 f0       	brcs	.+6      	; 0x4c10 <STEPPER_set_stop_mode+0x16>
    4c0a:	92 30       	cpi	r25, 0x02	; 2
    4c0c:	41 f4       	brne	.+16     	; 0x4c1e <STEPPER_set_stop_mode+0x24>
    4c0e:	03 c0       	rjmp	.+6      	; 0x4c16 <STEPPER_set_stop_mode+0x1c>
    4c10:	60 93 6f 08 	sts	0x086F, r22
    4c14:	04 c0       	rjmp	.+8      	; 0x4c1e <STEPPER_set_stop_mode+0x24>
    4c16:	60 93 6f 08 	sts	0x086F, r22
    4c1a:	60 93 70 08 	sts	0x0870, r22
    4c1e:	10 92 85 08 	sts	0x0885, r1
    4c22:	08 95       	ret

00004c24 <STEPPER_setup_decels>:
    4c24:	0f 93       	push	r16
    4c26:	1f 93       	push	r17
    4c28:	cf 93       	push	r28
    4c2a:	df 93       	push	r29
    4c2c:	eb 01       	movw	r28, r22
    4c2e:	8a 01       	movw	r16, r20
    4c30:	81 30       	cpi	r24, 0x01	; 1
    4c32:	01 f1       	breq	.+64     	; 0x4c74 <STEPPER_setup_decels+0x50>
    4c34:	81 30       	cpi	r24, 0x01	; 1
    4c36:	18 f0       	brcs	.+6      	; 0x4c3e <STEPPER_setup_decels+0x1a>
    4c38:	82 30       	cpi	r24, 0x02	; 2
    4c3a:	61 f5       	brne	.+88     	; 0x4c94 <STEPPER_setup_decels+0x70>
    4c3c:	0d c0       	rjmp	.+26     	; 0x4c58 <STEPPER_setup_decels+0x34>
    4c3e:	80 91 59 08 	lds	r24, 0x0859
    4c42:	90 91 5a 08 	lds	r25, 0x085A
    4c46:	89 2b       	or	r24, r25
    4c48:	11 f0       	breq	.+4      	; 0x4c4e <STEPPER_setup_decels+0x2a>
    4c4a:	80 e0       	ldi	r24, 0x00	; 0
    4c4c:	1a c0       	rjmp	.+52     	; 0x4c82 <STEPPER_setup_decels+0x5e>
    4c4e:	10 92 66 08 	sts	0x0866, r1
    4c52:	10 92 65 08 	sts	0x0865, r1
    4c56:	1e c0       	rjmp	.+60     	; 0x4c94 <STEPPER_setup_decels+0x70>
    4c58:	80 91 59 08 	lds	r24, 0x0859
    4c5c:	90 91 5a 08 	lds	r25, 0x085A
    4c60:	89 2b       	or	r24, r25
    4c62:	21 f0       	breq	.+8      	; 0x4c6c <STEPPER_setup_decels+0x48>
    4c64:	80 e0       	ldi	r24, 0x00	; 0
    4c66:	0e 94 88 27 	call	0x4f10	; 0x4f10 <STEPPER_set_decel_step_values>
    4c6a:	04 c0       	rjmp	.+8      	; 0x4c74 <STEPPER_setup_decels+0x50>
    4c6c:	10 92 66 08 	sts	0x0866, r1
    4c70:	10 92 65 08 	sts	0x0865, r1
    4c74:	80 91 5b 08 	lds	r24, 0x085B
    4c78:	90 91 5c 08 	lds	r25, 0x085C
    4c7c:	89 2b       	or	r24, r25
    4c7e:	31 f0       	breq	.+12     	; 0x4c8c <STEPPER_setup_decels+0x68>
    4c80:	81 e0       	ldi	r24, 0x01	; 1
    4c82:	be 01       	movw	r22, r28
    4c84:	a8 01       	movw	r20, r16
    4c86:	0e 94 88 27 	call	0x4f10	; 0x4f10 <STEPPER_set_decel_step_values>
    4c8a:	04 c0       	rjmp	.+8      	; 0x4c94 <STEPPER_setup_decels+0x70>
    4c8c:	10 92 68 08 	sts	0x0868, r1
    4c90:	10 92 67 08 	sts	0x0867, r1
    4c94:	df 91       	pop	r29
    4c96:	cf 91       	pop	r28
    4c98:	1f 91       	pop	r17
    4c9a:	0f 91       	pop	r16
    4c9c:	08 95       	ret

00004c9e <SYS_init>:
    4c9e:	10 92 88 08 	sts	0x0888, r1
    4ca2:	10 92 89 08 	sts	0x0889, r1
    4ca6:	10 92 8d 08 	sts	0x088D, r1
    4caa:	10 92 8a 08 	sts	0x088A, r1
    4cae:	10 92 8c 08 	sts	0x088C, r1
    4cb2:	10 92 8e 08 	sts	0x088E, r1
    4cb6:	10 92 8f 08 	sts	0x088F, r1
    4cba:	10 92 90 08 	sts	0x0890, r1
    4cbe:	10 92 91 08 	sts	0x0891, r1
    4cc2:	10 92 92 08 	sts	0x0892, r1
    4cc6:	10 92 93 08 	sts	0x0893, r1
    4cca:	10 92 94 08 	sts	0x0894, r1
    4cce:	10 92 95 08 	sts	0x0895, r1
    4cd2:	10 92 96 08 	sts	0x0896, r1
    4cd6:	10 92 97 08 	sts	0x0897, r1
    4cda:	10 92 98 08 	sts	0x0898, r1
    4cde:	10 92 99 08 	sts	0x0899, r1
    4ce2:	08 95       	ret

00004ce4 <TMRSRVC_insert>:
    4ce4:	cf 92       	push	r12
    4ce6:	df 92       	push	r13
    4ce8:	ef 92       	push	r14
    4cea:	ff 92       	push	r15
    4cec:	0f 93       	push	r16
    4cee:	1f 93       	push	r17
    4cf0:	cf 93       	push	r28
    4cf2:	df 93       	push	r29
    4cf4:	ec 01       	movw	r28, r24
    4cf6:	80 91 bf 08 	lds	r24, 0x08BF
    4cfa:	88 23       	and	r24, r24
    4cfc:	39 f4       	brne	.+14     	; 0x4d0c <TMRSRVC_insert+0x28>
    4cfe:	d0 93 c1 08 	sts	0x08C1, r29
    4d02:	c0 93 c0 08 	sts	0x08C0, r28
    4d06:	0e 94 00 27 	call	0x4e00	; 0x4e00 <TMRSRVC_start>
    4d0a:	47 c0       	rjmp	.+142    	; 0x4d9a <TMRSRVC_insert+0xb6>
    4d0c:	c0 90 c0 08 	lds	r12, 0x08C0
    4d10:	d0 90 c1 08 	lds	r13, 0x08C1
    4d14:	00 e0       	ldi	r16, 0x00	; 0
    4d16:	10 e0       	ldi	r17, 0x00	; 0
    4d18:	ee 24       	eor	r14, r14
    4d1a:	ff 24       	eor	r15, r15
    4d1c:	37 c0       	rjmp	.+110    	; 0x4d8c <TMRSRVC_insert+0xa8>
    4d1e:	a8 81       	ld	r26, Y
    4d20:	b9 81       	ldd	r27, Y+1	; 0x01
    4d22:	fd 01       	movw	r30, r26
    4d24:	64 81       	ldd	r22, Z+4	; 0x04
    4d26:	75 81       	ldd	r23, Z+5	; 0x05
    4d28:	f6 01       	movw	r30, r12
    4d2a:	40 81       	ld	r20, Z
    4d2c:	51 81       	ldd	r21, Z+1	; 0x01
    4d2e:	fa 01       	movw	r30, r20
    4d30:	84 81       	ldd	r24, Z+4	; 0x04
    4d32:	95 81       	ldd	r25, Z+5	; 0x05
    4d34:	9b 01       	movw	r18, r22
    4d36:	28 1b       	sub	r18, r24
    4d38:	39 0b       	sbc	r19, r25
    4d3a:	37 ff       	sbrs	r19, 7
    4d3c:	0f c0       	rjmp	.+30     	; 0x4d5c <TMRSRVC_insert+0x78>
    4d3e:	86 1b       	sub	r24, r22
    4d40:	97 0b       	sbc	r25, r23
    4d42:	95 83       	std	Z+5, r25	; 0x05
    4d44:	84 83       	std	Z+4, r24	; 0x04
    4d46:	db 82       	std	Y+3, r13	; 0x03
    4d48:	ca 82       	std	Y+2, r12	; 0x02
    4d4a:	01 2b       	or	r16, r17
    4d4c:	29 f4       	brne	.+10     	; 0x4d58 <TMRSRVC_insert+0x74>
    4d4e:	d0 93 c1 08 	sts	0x08C1, r29
    4d52:	c0 93 c0 08 	sts	0x08C0, r28
    4d56:	21 c0       	rjmp	.+66     	; 0x4d9a <TMRSRVC_insert+0xb6>
    4d58:	f7 01       	movw	r30, r14
    4d5a:	0c c0       	rjmp	.+24     	; 0x4d74 <TMRSRVC_insert+0x90>
    4d5c:	f6 01       	movw	r30, r12
    4d5e:	82 81       	ldd	r24, Z+2	; 0x02
    4d60:	93 81       	ldd	r25, Z+3	; 0x03
    4d62:	21 15       	cp	r18, r1
    4d64:	31 05       	cpc	r19, r1
    4d66:	49 f4       	brne	.+18     	; 0x4d7a <TMRSRVC_insert+0x96>
    4d68:	fd 01       	movw	r30, r26
    4d6a:	15 82       	std	Z+5, r1	; 0x05
    4d6c:	14 82       	std	Z+4, r1	; 0x04
    4d6e:	9b 83       	std	Y+3, r25	; 0x03
    4d70:	8a 83       	std	Y+2, r24	; 0x02
    4d72:	f6 01       	movw	r30, r12
    4d74:	d3 83       	std	Z+3, r29	; 0x03
    4d76:	c2 83       	std	Z+2, r28	; 0x02
    4d78:	10 c0       	rjmp	.+32     	; 0x4d9a <TMRSRVC_insert+0xb6>
    4d7a:	fd 01       	movw	r30, r26
    4d7c:	35 83       	std	Z+5, r19	; 0x05
    4d7e:	24 83       	std	Z+4, r18	; 0x04
    4d80:	00 97       	sbiw	r24, 0x00	; 0
    4d82:	b9 f3       	breq	.-18     	; 0x4d72 <TMRSRVC_insert+0x8e>
    4d84:	0f 5f       	subi	r16, 0xFF	; 255
    4d86:	1f 4f       	sbci	r17, 0xFF	; 255
    4d88:	76 01       	movw	r14, r12
    4d8a:	6c 01       	movw	r12, r24
    4d8c:	80 91 bf 08 	lds	r24, 0x08BF
    4d90:	90 e0       	ldi	r25, 0x00	; 0
    4d92:	08 17       	cp	r16, r24
    4d94:	19 07       	cpc	r17, r25
    4d96:	18 f2       	brcs	.-122    	; 0x4d1e <TMRSRVC_insert+0x3a>
    4d98:	ec cf       	rjmp	.-40     	; 0x4d72 <TMRSRVC_insert+0x8e>
    4d9a:	80 91 bf 08 	lds	r24, 0x08BF
    4d9e:	8f 5f       	subi	r24, 0xFF	; 255
    4da0:	80 93 bf 08 	sts	0x08BF, r24
    4da4:	df 91       	pop	r29
    4da6:	cf 91       	pop	r28
    4da8:	1f 91       	pop	r17
    4daa:	0f 91       	pop	r16
    4dac:	ff 90       	pop	r15
    4dae:	ef 90       	pop	r14
    4db0:	df 90       	pop	r13
    4db2:	cf 90       	pop	r12
    4db4:	08 95       	ret

00004db6 <TMRSRVC_open>:
    4db6:	88 e0       	ldi	r24, 0x08	; 8
    4db8:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    4dbc:	88 23       	and	r24, r24
    4dbe:	b9 f4       	brne	.+46     	; 0x4dee <TMRSRVC_open+0x38>
    4dc0:	10 92 bf 08 	sts	0x08BF, r1
    4dc4:	10 92 c1 08 	sts	0x08C1, r1
    4dc8:	10 92 c0 08 	sts	0x08C0, r1
    4dcc:	10 92 06 04 	sts	0x0406, r1
    4dd0:	10 92 07 04 	sts	0x0407, r1
    4dd4:	80 e1       	ldi	r24, 0x10	; 16
    4dd6:	65 ef       	ldi	r22, 0xF5	; 245
    4dd8:	77 e2       	ldi	r23, 0x27	; 39
    4dda:	0e 94 11 27 	call	0x4e22	; 0x4e22 <__ISR_attach>
    4dde:	0e 94 fc 27 	call	0x4ff8	; 0x4ff8 <__TMRSRVC_init>
    4de2:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <__TMRSRVC_start>
    4de6:	88 e0       	ldi	r24, 0x08	; 8
    4de8:	61 e0       	ldi	r22, 0x01	; 1
    4dea:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <SYS_set_state>
    4dee:	88 e0       	ldi	r24, 0x08	; 8
    4df0:	91 e0       	ldi	r25, 0x01	; 1
    4df2:	08 95       	ret

00004df4 <__TMRSRVC_start>:
    4df4:	ee e6       	ldi	r30, 0x6E	; 110
    4df6:	f0 e0       	ldi	r31, 0x00	; 0
    4df8:	80 81       	ld	r24, Z
    4dfa:	82 60       	ori	r24, 0x02	; 2
    4dfc:	80 83       	st	Z, r24
    4dfe:	08 95       	ret

00004e00 <TMRSRVC_start>:
    4e00:	81 e0       	ldi	r24, 0x01	; 1
    4e02:	80 93 07 04 	sts	0x0407, r24
    4e06:	08 95       	ret

00004e08 <I2C_enable>:
    4e08:	80 91 c2 08 	lds	r24, 0x08C2
    4e0c:	81 30       	cpi	r24, 0x01	; 1
    4e0e:	29 f4       	brne	.+10     	; 0x4e1a <I2C_enable+0x12>
    4e10:	80 91 bc 00 	lds	r24, 0x00BC
    4e14:	84 60       	ori	r24, 0x04	; 4
    4e16:	80 93 bc 00 	sts	0x00BC, r24
    4e1a:	08 95       	ret

00004e1c <__I2C_init>:
    4e1c:	38 98       	cbi	0x07, 0	; 7
    4e1e:	39 98       	cbi	0x07, 1	; 7
    4e20:	08 95       	ret

00004e22 <__ISR_attach>:
    4e22:	80 32       	cpi	r24, 0x20	; 32
    4e24:	18 f0       	brcs	.+6      	; 0x4e2c <__ISR_attach+0xa>
    4e26:	20 e0       	ldi	r18, 0x00	; 0
    4e28:	30 e0       	ldi	r19, 0x00	; 0
    4e2a:	0a c0       	rjmp	.+20     	; 0x4e40 <__ISR_attach+0x1e>
    4e2c:	e8 2f       	mov	r30, r24
    4e2e:	f0 e0       	ldi	r31, 0x00	; 0
    4e30:	ee 0f       	add	r30, r30
    4e32:	ff 1f       	adc	r31, r31
    4e34:	ea 55       	subi	r30, 0x5A	; 90
    4e36:	fc 4f       	sbci	r31, 0xFC	; 252
    4e38:	20 81       	ld	r18, Z
    4e3a:	31 81       	ldd	r19, Z+1	; 0x01
    4e3c:	71 83       	std	Z+1, r23	; 0x01
    4e3e:	60 83       	st	Z, r22
    4e40:	c9 01       	movw	r24, r18
    4e42:	08 95       	ret

00004e44 <__ATMEGA_init>:
    4e44:	24 9a       	sbi	0x04, 4	; 4
    4e46:	2c 9a       	sbi	0x05, 4	; 5
    4e48:	08 95       	ret

00004e4a <SPI_default_config>:
    4e4a:	83 e5       	ldi	r24, 0x53	; 83
    4e4c:	8c bd       	out	0x2c, r24	; 44
    4e4e:	81 e0       	ldi	r24, 0x01	; 1
    4e50:	8d bd       	out	0x2d, r24	; 45
    4e52:	8d e0       	ldi	r24, 0x0D	; 13
    4e54:	8a 95       	dec	r24
    4e56:	f1 f7       	brne	.-4      	; 0x4e54 <SPI_default_config+0xa>
    4e58:	08 95       	ret

00004e5a <SPI_ATtiny0_config>:
    4e5a:	83 e5       	ldi	r24, 0x53	; 83
    4e5c:	8c bd       	out	0x2c, r24	; 44
    4e5e:	1d bc       	out	0x2d, r1	; 45
    4e60:	84 ef       	ldi	r24, 0xF4	; 244
    4e62:	91 e0       	ldi	r25, 0x01	; 1
    4e64:	01 97       	sbiw	r24, 0x01	; 1
    4e66:	f1 f7       	brne	.-4      	; 0x4e64 <SPI_ATtiny0_config+0xa>
    4e68:	08 95       	ret

00004e6a <SPI_PSXC_config>:
    4e6a:	8f e7       	ldi	r24, 0x7F	; 127
    4e6c:	8c bd       	out	0x2c, r24	; 44
    4e6e:	1d bc       	out	0x2d, r1	; 45
    4e70:	84 ef       	ldi	r24, 0xF4	; 244
    4e72:	91 e0       	ldi	r25, 0x01	; 1
    4e74:	01 97       	sbiw	r24, 0x01	; 1
    4e76:	f1 f7       	brne	.-4      	; 0x4e74 <SPI_PSXC_config+0xa>
    4e78:	08 95       	ret

00004e7a <SPI_LCD_config>:
    4e7a:	83 e5       	ldi	r24, 0x53	; 83
    4e7c:	8c bd       	out	0x2c, r24	; 44
    4e7e:	81 e0       	ldi	r24, 0x01	; 1
    4e80:	8d bd       	out	0x2d, r24	; 45
    4e82:	8d e0       	ldi	r24, 0x0D	; 13
    4e84:	8a 95       	dec	r24
    4e86:	f1 f7       	brne	.-4      	; 0x4e84 <SPI_LCD_config+0xa>
    4e88:	08 95       	ret

00004e8a <SPI_FLASH_config>:
    4e8a:	83 e5       	ldi	r24, 0x53	; 83
    4e8c:	8c bd       	out	0x2c, r24	; 44
    4e8e:	81 e0       	ldi	r24, 0x01	; 1
    4e90:	8d bd       	out	0x2d, r24	; 45
    4e92:	84 ef       	ldi	r24, 0xF4	; 244
    4e94:	91 e0       	ldi	r25, 0x01	; 1
    4e96:	01 97       	sbiw	r24, 0x01	; 1
    4e98:	f1 f7       	brne	.-4      	; 0x4e96 <SPI_FLASH_config+0xc>
    4e9a:	08 95       	ret

00004e9c <__SPI_init>:
    4e9c:	25 9a       	sbi	0x04, 5	; 4
    4e9e:	26 98       	cbi	0x04, 6	; 4
    4ea0:	27 9a       	sbi	0x04, 7	; 4
    4ea2:	20 9a       	sbi	0x04, 0	; 4
    4ea4:	21 9a       	sbi	0x04, 1	; 4
    4ea6:	22 9a       	sbi	0x04, 2	; 4
    4ea8:	08 95       	ret

00004eaa <SPKR_beep>:
    4eaa:	9b 01       	movw	r18, r22
    4eac:	ac 01       	movw	r20, r24
    4eae:	80 91 f7 03 	lds	r24, 0x03F7
    4eb2:	88 23       	and	r24, r24
    4eb4:	81 f0       	breq	.+32     	; 0x4ed6 <SPKR_beep+0x2c>
    4eb6:	da 01       	movw	r26, r20
    4eb8:	c9 01       	movw	r24, r18
    4eba:	88 0f       	add	r24, r24
    4ebc:	99 1f       	adc	r25, r25
    4ebe:	aa 1f       	adc	r26, r26
    4ec0:	bb 1f       	adc	r27, r27
    4ec2:	90 93 03 04 	sts	0x0403, r25
    4ec6:	80 93 02 04 	sts	0x0402, r24
    4eca:	21 15       	cp	r18, r1
    4ecc:	31 05       	cpc	r19, r1
    4ece:	41 05       	cpc	r20, r1
    4ed0:	51 05       	cpc	r21, r1
    4ed2:	09 f4       	brne	.+2      	; 0x4ed6 <SPKR_beep+0x2c>
    4ed4:	5f 98       	cbi	0x0b, 7	; 11
    4ed6:	08 95       	ret

00004ed8 <__SPKR_close>:
    4ed8:	82 30       	cpi	r24, 0x02	; 2
    4eda:	29 f4       	brne	.+10     	; 0x4ee6 <__SPKR_close+0xe>
    4edc:	80 91 81 00 	lds	r24, 0x0081
    4ee0:	8e 7f       	andi	r24, 0xFE	; 254
    4ee2:	80 93 81 00 	sts	0x0081, r24
    4ee6:	80 91 f6 03 	lds	r24, 0x03F6
    4eea:	81 30       	cpi	r24, 0x01	; 1
    4eec:	31 f4       	brne	.+12     	; 0x4efa <__SPKR_close+0x22>
    4eee:	80 91 f7 03 	lds	r24, 0x03F7
    4ef2:	81 30       	cpi	r24, 0x01	; 1
    4ef4:	11 f4       	brne	.+4      	; 0x4efa <__SPKR_close+0x22>
    4ef6:	00 00       	nop
    4ef8:	08 95       	ret
    4efa:	80 91 f6 03 	lds	r24, 0x03F6
    4efe:	81 30       	cpi	r24, 0x01	; 1
    4f00:	21 f0       	breq	.+8      	; 0x4f0a <__SPKR_close+0x32>
    4f02:	80 91 f7 03 	lds	r24, 0x03F7
    4f06:	81 30       	cpi	r24, 0x01	; 1
    4f08:	11 f4       	brne	.+4      	; 0x4f0e <__SPKR_close+0x36>
    4f0a:	5f 98       	cbi	0x0b, 7	; 11
    4f0c:	57 98       	cbi	0x0a, 7	; 10
    4f0e:	08 95       	ret

00004f10 <STEPPER_set_decel_step_values>:
    4f10:	ef 92       	push	r14
    4f12:	ff 92       	push	r15
    4f14:	0f 93       	push	r16
    4f16:	1f 93       	push	r17
    4f18:	cf 93       	push	r28
    4f1a:	df 93       	push	r29
    4f1c:	eb 01       	movw	r28, r22
    4f1e:	88 23       	and	r24, r24
    4f20:	21 f0       	breq	.+8      	; 0x4f2a <STEPPER_set_decel_step_values+0x1a>
    4f22:	81 30       	cpi	r24, 0x01	; 1
    4f24:	09 f0       	breq	.+2      	; 0x4f28 <STEPPER_set_decel_step_values+0x18>
    4f26:	5a c0       	rjmp	.+180    	; 0x4fdc <STEPPER_set_decel_step_values+0xcc>
    4f28:	2d c0       	rjmp	.+90     	; 0x4f84 <STEPPER_set_decel_step_values+0x74>
    4f2a:	9a 01       	movw	r18, r20
    4f2c:	40 e0       	ldi	r20, 0x00	; 0
    4f2e:	50 e0       	ldi	r21, 0x00	; 0
    4f30:	ca 01       	movw	r24, r20
    4f32:	b9 01       	movw	r22, r18
    4f34:	0e 94 ba 32 	call	0x6574	; 0x6574 <__mulsi3>
    4f38:	20 91 59 08 	lds	r18, 0x0859
    4f3c:	30 91 5a 08 	lds	r19, 0x085A
    4f40:	22 0f       	add	r18, r18
    4f42:	33 1f       	adc	r19, r19
    4f44:	40 e0       	ldi	r20, 0x00	; 0
    4f46:	50 e0       	ldi	r21, 0x00	; 0
    4f48:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <__udivmodsi4>
    4f4c:	79 01       	movw	r14, r18
    4f4e:	8a 01       	movw	r16, r20
    4f50:	a8 01       	movw	r20, r16
    4f52:	97 01       	movw	r18, r14
    4f54:	22 0f       	add	r18, r18
    4f56:	33 1f       	adc	r19, r19
    4f58:	44 1f       	adc	r20, r20
    4f5a:	55 1f       	adc	r21, r21
    4f5c:	ce 01       	movw	r24, r28
    4f5e:	a0 e0       	ldi	r26, 0x00	; 0
    4f60:	b0 e0       	ldi	r27, 0x00	; 0
    4f62:	82 17       	cp	r24, r18
    4f64:	93 07       	cpc	r25, r19
    4f66:	a4 07       	cpc	r26, r20
    4f68:	b5 07       	cpc	r27, r21
    4f6a:	28 f0       	brcs	.+10     	; 0x4f76 <STEPPER_set_decel_step_values+0x66>
    4f6c:	f0 92 66 08 	sts	0x0866, r15
    4f70:	e0 92 65 08 	sts	0x0865, r14
    4f74:	33 c0       	rjmp	.+102    	; 0x4fdc <STEPPER_set_decel_step_values+0xcc>
    4f76:	d6 95       	lsr	r29
    4f78:	c7 95       	ror	r28
    4f7a:	d0 93 66 08 	sts	0x0866, r29
    4f7e:	c0 93 65 08 	sts	0x0865, r28
    4f82:	2c c0       	rjmp	.+88     	; 0x4fdc <STEPPER_set_decel_step_values+0xcc>
    4f84:	9a 01       	movw	r18, r20
    4f86:	40 e0       	ldi	r20, 0x00	; 0
    4f88:	50 e0       	ldi	r21, 0x00	; 0
    4f8a:	ca 01       	movw	r24, r20
    4f8c:	b9 01       	movw	r22, r18
    4f8e:	0e 94 ba 32 	call	0x6574	; 0x6574 <__mulsi3>
    4f92:	20 91 5b 08 	lds	r18, 0x085B
    4f96:	30 91 5c 08 	lds	r19, 0x085C
    4f9a:	22 0f       	add	r18, r18
    4f9c:	33 1f       	adc	r19, r19
    4f9e:	40 e0       	ldi	r20, 0x00	; 0
    4fa0:	50 e0       	ldi	r21, 0x00	; 0
    4fa2:	0e 94 ec 32 	call	0x65d8	; 0x65d8 <__udivmodsi4>
    4fa6:	79 01       	movw	r14, r18
    4fa8:	8a 01       	movw	r16, r20
    4faa:	a8 01       	movw	r20, r16
    4fac:	97 01       	movw	r18, r14
    4fae:	22 0f       	add	r18, r18
    4fb0:	33 1f       	adc	r19, r19
    4fb2:	44 1f       	adc	r20, r20
    4fb4:	55 1f       	adc	r21, r21
    4fb6:	ce 01       	movw	r24, r28
    4fb8:	a0 e0       	ldi	r26, 0x00	; 0
    4fba:	b0 e0       	ldi	r27, 0x00	; 0
    4fbc:	82 17       	cp	r24, r18
    4fbe:	93 07       	cpc	r25, r19
    4fc0:	a4 07       	cpc	r26, r20
    4fc2:	b5 07       	cpc	r27, r21
    4fc4:	28 f0       	brcs	.+10     	; 0x4fd0 <STEPPER_set_decel_step_values+0xc0>
    4fc6:	f0 92 68 08 	sts	0x0868, r15
    4fca:	e0 92 67 08 	sts	0x0867, r14
    4fce:	06 c0       	rjmp	.+12     	; 0x4fdc <STEPPER_set_decel_step_values+0xcc>
    4fd0:	d6 95       	lsr	r29
    4fd2:	c7 95       	ror	r28
    4fd4:	d0 93 68 08 	sts	0x0868, r29
    4fd8:	c0 93 67 08 	sts	0x0867, r28
    4fdc:	df 91       	pop	r29
    4fde:	cf 91       	pop	r28
    4fe0:	1f 91       	pop	r17
    4fe2:	0f 91       	pop	r16
    4fe4:	ff 90       	pop	r15
    4fe6:	ef 90       	pop	r14
    4fe8:	08 95       	ret

00004fea <__TIMER0_COMPA_vect>:
    4fea:	0e 94 05 28 	call	0x500a	; 0x500a <TMRSRVC_tick>
    4fee:	0e 94 45 28 	call	0x508a	; 0x508a <STEPPER_clk>
    4ff2:	0e 94 1e 28 	call	0x503c	; 0x503c <SPKR_beep_clk>
    4ff6:	08 95       	ret

00004ff8 <__TMRSRVC_init>:
    4ff8:	84 b5       	in	r24, 0x24	; 36
    4ffa:	82 60       	ori	r24, 0x02	; 2
    4ffc:	84 bd       	out	0x24, r24	; 36
    4ffe:	85 b5       	in	r24, 0x25	; 37
    5000:	84 60       	ori	r24, 0x04	; 4
    5002:	85 bd       	out	0x25, r24	; 37
    5004:	8e e4       	ldi	r24, 0x4E	; 78
    5006:	87 bd       	out	0x27, r24	; 39
    5008:	08 95       	ret

0000500a <TMRSRVC_tick>:
    500a:	88 e0       	ldi	r24, 0x08	; 8
    500c:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    5010:	88 23       	and	r24, r24
    5012:	11 f4       	brne	.+4      	; 0x5018 <TMRSRVC_tick+0xe>
    5014:	84 e0       	ldi	r24, 0x04	; 4
    5016:	08 95       	ret
    5018:	80 91 07 04 	lds	r24, 0x0407
    501c:	88 23       	and	r24, r24
    501e:	11 f4       	brne	.+4      	; 0x5024 <TMRSRVC_tick+0x1a>
    5020:	83 e0       	ldi	r24, 0x03	; 3
    5022:	08 95       	ret
    5024:	80 91 06 04 	lds	r24, 0x0406
    5028:	88 23       	and	r24, r24
    502a:	11 f0       	breq	.+4      	; 0x5030 <TMRSRVC_tick+0x26>
    502c:	82 e0       	ldi	r24, 0x02	; 2
    502e:	08 95       	ret
    5030:	0e 94 92 2a 	call	0x5524	; 0x5524 <TMRSRVC_process>
    5034:	81 30       	cpi	r24, 0x01	; 1
    5036:	e1 f3       	breq	.-8      	; 0x5030 <TMRSRVC_tick+0x26>
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	08 95       	ret

0000503c <SPKR_beep_clk>:
    503c:	80 91 f7 03 	lds	r24, 0x03F7
    5040:	81 30       	cpi	r24, 0x01	; 1
    5042:	11 f5       	brne	.+68     	; 0x5088 <SPKR_beep_clk+0x4c>
    5044:	80 91 00 04 	lds	r24, 0x0400
    5048:	90 91 01 04 	lds	r25, 0x0401
    504c:	20 91 02 04 	lds	r18, 0x0402
    5050:	30 91 03 04 	lds	r19, 0x0403
    5054:	28 0f       	add	r18, r24
    5056:	39 1f       	adc	r19, r25
    5058:	30 93 01 04 	sts	0x0401, r19
    505c:	20 93 00 04 	sts	0x0400, r18
    5060:	80 91 00 04 	lds	r24, 0x0400
    5064:	90 91 01 04 	lds	r25, 0x0401
    5068:	88 5e       	subi	r24, 0xE8	; 232
    506a:	93 40       	sbci	r25, 0x03	; 3
    506c:	6c f0       	brlt	.+26     	; 0x5088 <SPKR_beep_clk+0x4c>
    506e:	8b b1       	in	r24, 0x0b	; 11
    5070:	80 58       	subi	r24, 0x80	; 128
    5072:	8b b9       	out	0x0b, r24	; 11
    5074:	80 91 00 04 	lds	r24, 0x0400
    5078:	90 91 01 04 	lds	r25, 0x0401
    507c:	88 5e       	subi	r24, 0xE8	; 232
    507e:	93 40       	sbci	r25, 0x03	; 3
    5080:	90 93 01 04 	sts	0x0401, r25
    5084:	80 93 00 04 	sts	0x0400, r24
    5088:	08 95       	ret

0000508a <STEPPER_clk>:
    508a:	87 e0       	ldi	r24, 0x07	; 7
    508c:	0e 94 44 1e 	call	0x3c88	; 0x3c88 <SYS_get_state>
    5090:	81 30       	cpi	r24, 0x01	; 1
    5092:	09 f0       	breq	.+2      	; 0x5096 <STEPPER_clk+0xc>
    5094:	aa c0       	rjmp	.+340    	; 0x51ea <STEPPER_clk+0x160>
    5096:	80 91 59 08 	lds	r24, 0x0859
    509a:	90 91 5a 08 	lds	r25, 0x085A
    509e:	89 2b       	or	r24, r25
    50a0:	09 f1       	breq	.+66     	; 0x50e4 <STEPPER_clk+0x5a>
    50a2:	80 91 7d 08 	lds	r24, 0x087D
    50a6:	90 91 7e 08 	lds	r25, 0x087E
    50aa:	20 91 59 08 	lds	r18, 0x0859
    50ae:	30 91 5a 08 	lds	r19, 0x085A
    50b2:	82 0f       	add	r24, r18
    50b4:	93 1f       	adc	r25, r19
    50b6:	90 93 7e 08 	sts	0x087E, r25
    50ba:	80 93 7d 08 	sts	0x087D, r24
    50be:	80 91 7d 08 	lds	r24, 0x087D
    50c2:	90 91 7e 08 	lds	r25, 0x087E
    50c6:	88 5e       	subi	r24, 0xE8	; 232
    50c8:	93 40       	sbci	r25, 0x03	; 3
    50ca:	a4 f0       	brlt	.+40     	; 0x50f4 <STEPPER_clk+0x6a>
    50cc:	80 91 7d 08 	lds	r24, 0x087D
    50d0:	90 91 7e 08 	lds	r25, 0x087E
    50d4:	88 5e       	subi	r24, 0xE8	; 232
    50d6:	93 40       	sbci	r25, 0x03	; 3
    50d8:	90 93 7e 08 	sts	0x087E, r25
    50dc:	80 93 7d 08 	sts	0x087D, r24
    50e0:	41 e0       	ldi	r20, 0x01	; 1
    50e2:	09 c0       	rjmp	.+18     	; 0x50f6 <STEPPER_clk+0x6c>
    50e4:	80 91 51 08 	lds	r24, 0x0851
    50e8:	90 91 52 08 	lds	r25, 0x0852
    50ec:	90 93 56 08 	sts	0x0856, r25
    50f0:	80 93 55 08 	sts	0x0855, r24
    50f4:	40 e0       	ldi	r20, 0x00	; 0
    50f6:	80 91 5b 08 	lds	r24, 0x085B
    50fa:	90 91 5c 08 	lds	r25, 0x085C
    50fe:	89 2b       	or	r24, r25
    5100:	09 f1       	breq	.+66     	; 0x5144 <STEPPER_clk+0xba>
    5102:	80 91 7f 08 	lds	r24, 0x087F
    5106:	90 91 80 08 	lds	r25, 0x0880
    510a:	20 91 5b 08 	lds	r18, 0x085B
    510e:	30 91 5c 08 	lds	r19, 0x085C
    5112:	82 0f       	add	r24, r18
    5114:	93 1f       	adc	r25, r19
    5116:	90 93 80 08 	sts	0x0880, r25
    511a:	80 93 7f 08 	sts	0x087F, r24
    511e:	80 91 7f 08 	lds	r24, 0x087F
    5122:	90 91 80 08 	lds	r25, 0x0880
    5126:	88 5e       	subi	r24, 0xE8	; 232
    5128:	93 40       	sbci	r25, 0x03	; 3
    512a:	a4 f0       	brlt	.+40     	; 0x5154 <STEPPER_clk+0xca>
    512c:	80 91 7f 08 	lds	r24, 0x087F
    5130:	90 91 80 08 	lds	r25, 0x0880
    5134:	88 5e       	subi	r24, 0xE8	; 232
    5136:	93 40       	sbci	r25, 0x03	; 3
    5138:	90 93 80 08 	sts	0x0880, r25
    513c:	80 93 7f 08 	sts	0x087F, r24
    5140:	61 e0       	ldi	r22, 0x01	; 1
    5142:	09 c0       	rjmp	.+18     	; 0x5156 <STEPPER_clk+0xcc>
    5144:	80 91 53 08 	lds	r24, 0x0853
    5148:	90 91 54 08 	lds	r25, 0x0854
    514c:	90 93 58 08 	sts	0x0858, r25
    5150:	80 93 57 08 	sts	0x0857, r24
    5154:	60 e0       	ldi	r22, 0x00	; 0
    5156:	84 2f       	mov	r24, r20
    5158:	0e 94 f6 28 	call	0x51ec	; 0x51ec <STEPPER_process_accel>
    515c:	80 91 79 08 	lds	r24, 0x0879
    5160:	90 91 7a 08 	lds	r25, 0x087A
    5164:	20 91 55 08 	lds	r18, 0x0855
    5168:	30 91 56 08 	lds	r19, 0x0856
    516c:	28 0f       	add	r18, r24
    516e:	39 1f       	adc	r19, r25
    5170:	30 93 7a 08 	sts	0x087A, r19
    5174:	20 93 79 08 	sts	0x0879, r18
    5178:	80 91 79 08 	lds	r24, 0x0879
    517c:	90 91 7a 08 	lds	r25, 0x087A
    5180:	88 5e       	subi	r24, 0xE8	; 232
    5182:	93 40       	sbci	r25, 0x03	; 3
    5184:	14 f4       	brge	.+4      	; 0x518a <STEPPER_clk+0x100>
    5186:	40 e0       	ldi	r20, 0x00	; 0
    5188:	0b c0       	rjmp	.+22     	; 0x51a0 <STEPPER_clk+0x116>
    518a:	80 91 79 08 	lds	r24, 0x0879
    518e:	90 91 7a 08 	lds	r25, 0x087A
    5192:	88 5e       	subi	r24, 0xE8	; 232
    5194:	93 40       	sbci	r25, 0x03	; 3
    5196:	90 93 7a 08 	sts	0x087A, r25
    519a:	80 93 79 08 	sts	0x0879, r24
    519e:	41 e0       	ldi	r20, 0x01	; 1
    51a0:	80 91 7b 08 	lds	r24, 0x087B
    51a4:	90 91 7c 08 	lds	r25, 0x087C
    51a8:	20 91 57 08 	lds	r18, 0x0857
    51ac:	30 91 58 08 	lds	r19, 0x0858
    51b0:	28 0f       	add	r18, r24
    51b2:	39 1f       	adc	r19, r25
    51b4:	30 93 7c 08 	sts	0x087C, r19
    51b8:	20 93 7b 08 	sts	0x087B, r18
    51bc:	80 91 7b 08 	lds	r24, 0x087B
    51c0:	90 91 7c 08 	lds	r25, 0x087C
    51c4:	88 5e       	subi	r24, 0xE8	; 232
    51c6:	93 40       	sbci	r25, 0x03	; 3
    51c8:	14 f4       	brge	.+4      	; 0x51ce <STEPPER_clk+0x144>
    51ca:	60 e0       	ldi	r22, 0x00	; 0
    51cc:	0b c0       	rjmp	.+22     	; 0x51e4 <STEPPER_clk+0x15a>
    51ce:	80 91 7b 08 	lds	r24, 0x087B
    51d2:	90 91 7c 08 	lds	r25, 0x087C
    51d6:	88 5e       	subi	r24, 0xE8	; 232
    51d8:	93 40       	sbci	r25, 0x03	; 3
    51da:	90 93 7c 08 	sts	0x087C, r25
    51de:	80 93 7b 08 	sts	0x087B, r24
    51e2:	61 e0       	ldi	r22, 0x01	; 1
    51e4:	84 2f       	mov	r24, r20
    51e6:	0e 94 3b 29 	call	0x5276	; 0x5276 <STEPPER_process_run_mode>
    51ea:	08 95       	ret

000051ec <STEPPER_process_accel>:
    51ec:	88 23       	and	r24, r24
    51ee:	f1 f0       	breq	.+60     	; 0x522c <STEPPER_process_accel+0x40>
    51f0:	20 91 51 08 	lds	r18, 0x0851
    51f4:	30 91 52 08 	lds	r19, 0x0852
    51f8:	80 91 55 08 	lds	r24, 0x0855
    51fc:	90 91 56 08 	lds	r25, 0x0856
    5200:	28 1b       	sub	r18, r24
    5202:	39 0b       	sbc	r19, r25
    5204:	12 16       	cp	r1, r18
    5206:	13 06       	cpc	r1, r19
    5208:	34 f4       	brge	.+12     	; 0x5216 <STEPPER_process_accel+0x2a>
    520a:	80 91 55 08 	lds	r24, 0x0855
    520e:	90 91 56 08 	lds	r25, 0x0856
    5212:	01 96       	adiw	r24, 0x01	; 1
    5214:	07 c0       	rjmp	.+14     	; 0x5224 <STEPPER_process_accel+0x38>
    5216:	23 2b       	or	r18, r19
    5218:	49 f0       	breq	.+18     	; 0x522c <STEPPER_process_accel+0x40>
    521a:	80 91 55 08 	lds	r24, 0x0855
    521e:	90 91 56 08 	lds	r25, 0x0856
    5222:	01 97       	sbiw	r24, 0x01	; 1
    5224:	90 93 56 08 	sts	0x0856, r25
    5228:	80 93 55 08 	sts	0x0855, r24
    522c:	66 23       	and	r22, r22
    522e:	11 f1       	breq	.+68     	; 0x5274 <STEPPER_process_accel+0x88>
    5230:	20 91 53 08 	lds	r18, 0x0853
    5234:	30 91 54 08 	lds	r19, 0x0854
    5238:	80 91 57 08 	lds	r24, 0x0857
    523c:	90 91 58 08 	lds	r25, 0x0858
    5240:	28 1b       	sub	r18, r24
    5242:	39 0b       	sbc	r19, r25
    5244:	12 16       	cp	r1, r18
    5246:	13 06       	cpc	r1, r19
    5248:	54 f4       	brge	.+20     	; 0x525e <STEPPER_process_accel+0x72>
    524a:	80 91 57 08 	lds	r24, 0x0857
    524e:	90 91 58 08 	lds	r25, 0x0858
    5252:	01 96       	adiw	r24, 0x01	; 1
    5254:	90 93 58 08 	sts	0x0858, r25
    5258:	80 93 57 08 	sts	0x0857, r24
    525c:	08 95       	ret
    525e:	23 2b       	or	r18, r19
    5260:	49 f0       	breq	.+18     	; 0x5274 <STEPPER_process_accel+0x88>
    5262:	80 91 57 08 	lds	r24, 0x0857
    5266:	90 91 58 08 	lds	r25, 0x0858
    526a:	01 97       	sbiw	r24, 0x01	; 1
    526c:	90 93 58 08 	sts	0x0858, r25
    5270:	80 93 57 08 	sts	0x0857, r24
    5274:	08 95       	ret

00005276 <STEPPER_process_run_mode>:
    5276:	0f 93       	push	r16
    5278:	1f 93       	push	r17
    527a:	18 2f       	mov	r17, r24
    527c:	06 2f       	mov	r16, r22
    527e:	80 91 85 08 	lds	r24, 0x0885
    5282:	88 23       	and	r24, r24
    5284:	09 f0       	breq	.+2      	; 0x5288 <STEPPER_process_run_mode+0x12>
    5286:	e7 c0       	rjmp	.+462    	; 0x5456 <STEPPER_process_run_mode+0x1e0>
    5288:	80 91 6d 08 	lds	r24, 0x086D
    528c:	88 23       	and	r24, r24
    528e:	09 f0       	breq	.+2      	; 0x5292 <STEPPER_process_run_mode+0x1c>
    5290:	5a c0       	rjmp	.+180    	; 0x5346 <STEPPER_process_run_mode+0xd0>
    5292:	80 91 55 08 	lds	r24, 0x0855
    5296:	90 91 56 08 	lds	r25, 0x0856
    529a:	89 2b       	or	r24, r25
    529c:	e9 f4       	brne	.+58     	; 0x52d8 <STEPPER_process_run_mode+0x62>
    529e:	80 91 08 04 	lds	r24, 0x0408
    52a2:	83 7e       	andi	r24, 0xE3	; 227
    52a4:	80 93 08 04 	sts	0x0408, r24
    52a8:	10 92 76 08 	sts	0x0876, r1
    52ac:	80 91 81 08 	lds	r24, 0x0881
    52b0:	88 23       	and	r24, r24
    52b2:	09 f4       	brne	.+2      	; 0x52b6 <STEPPER_process_run_mode+0x40>
    52b4:	5d c0       	rjmp	.+186    	; 0x5370 <STEPPER_process_run_mode+0xfa>
    52b6:	60 91 6f 08 	lds	r22, 0x086F
    52ba:	80 e0       	ldi	r24, 0x00	; 0
    52bc:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <STEPPER_stop>
    52c0:	e0 91 83 08 	lds	r30, 0x0883
    52c4:	f0 91 84 08 	lds	r31, 0x0884
    52c8:	30 97       	sbiw	r30, 0x00	; 0
    52ca:	09 f4       	brne	.+2      	; 0x52ce <STEPPER_process_run_mode+0x58>
    52cc:	51 c0       	rjmp	.+162    	; 0x5370 <STEPPER_process_run_mode+0xfa>
    52ce:	81 e0       	ldi	r24, 0x01	; 1
    52d0:	80 83       	st	Z, r24
    52d2:	10 92 81 08 	sts	0x0881, r1
    52d6:	4c c0       	rjmp	.+152    	; 0x5370 <STEPPER_process_run_mode+0xfa>
    52d8:	80 91 4f 08 	lds	r24, 0x084F
    52dc:	81 30       	cpi	r24, 0x01	; 1
    52de:	41 f4       	brne	.+16     	; 0x52f0 <STEPPER_process_run_mode+0x7a>
    52e0:	80 91 61 08 	lds	r24, 0x0861
    52e4:	90 91 62 08 	lds	r25, 0x0862
    52e8:	01 97       	sbiw	r24, 0x01	; 1
    52ea:	11 f4       	brne	.+4      	; 0x52f0 <STEPPER_process_run_mode+0x7a>
    52ec:	11 e0       	ldi	r17, 0x01	; 1
    52ee:	02 c0       	rjmp	.+4      	; 0x52f4 <STEPPER_process_run_mode+0x7e>
    52f0:	11 23       	and	r17, r17
    52f2:	f1 f1       	breq	.+124    	; 0x5370 <STEPPER_process_run_mode+0xfa>
    52f4:	e0 91 74 08 	lds	r30, 0x0874
    52f8:	f0 e0       	ldi	r31, 0x00	; 0
    52fa:	e8 5c       	subi	r30, 0xC8	; 200
    52fc:	fc 4f       	sbci	r31, 0xFC	; 252
    52fe:	90 91 08 04 	lds	r25, 0x0408
    5302:	93 7e       	andi	r25, 0xE3	; 227
    5304:	80 81       	ld	r24, Z
    5306:	89 2b       	or	r24, r25
    5308:	80 93 08 04 	sts	0x0408, r24
    530c:	80 91 72 08 	lds	r24, 0x0872
    5310:	88 23       	and	r24, r24
    5312:	21 f4       	brne	.+8      	; 0x531c <STEPPER_process_run_mode+0xa6>
    5314:	80 91 74 08 	lds	r24, 0x0874
    5318:	8f 5f       	subi	r24, 0xFF	; 255
    531a:	03 c0       	rjmp	.+6      	; 0x5322 <STEPPER_process_run_mode+0xac>
    531c:	80 91 74 08 	lds	r24, 0x0874
    5320:	81 50       	subi	r24, 0x01	; 1
    5322:	80 93 74 08 	sts	0x0874, r24
    5326:	80 91 74 08 	lds	r24, 0x0874
    532a:	83 70       	andi	r24, 0x03	; 3
    532c:	80 93 74 08 	sts	0x0874, r24
    5330:	81 e0       	ldi	r24, 0x01	; 1
    5332:	80 93 76 08 	sts	0x0876, r24
    5336:	80 91 4f 08 	lds	r24, 0x084F
    533a:	81 30       	cpi	r24, 0x01	; 1
    533c:	c9 f4       	brne	.+50     	; 0x5370 <STEPPER_process_run_mode+0xfa>
    533e:	80 e0       	ldi	r24, 0x00	; 0
    5340:	0e 94 3e 2a 	call	0x547c	; 0x547c <STEPPER_process_step_mode>
    5344:	15 c0       	rjmp	.+42     	; 0x5370 <STEPPER_process_run_mode+0xfa>
    5346:	90 91 08 04 	lds	r25, 0x0408
    534a:	93 7e       	andi	r25, 0xE3	; 227
    534c:	90 93 08 04 	sts	0x0408, r25
    5350:	e0 91 74 08 	lds	r30, 0x0874
    5354:	f0 e0       	ldi	r31, 0x00	; 0
    5356:	e8 5c       	subi	r30, 0xC8	; 200
    5358:	fc 4f       	sbci	r31, 0xFC	; 252
    535a:	80 81       	ld	r24, Z
    535c:	89 2b       	or	r24, r25
    535e:	80 93 08 04 	sts	0x0408, r24
    5362:	82 e0       	ldi	r24, 0x02	; 2
    5364:	80 93 76 08 	sts	0x0876, r24
    5368:	10 92 56 08 	sts	0x0856, r1
    536c:	10 92 55 08 	sts	0x0855, r1
    5370:	80 91 6e 08 	lds	r24, 0x086E
    5374:	88 23       	and	r24, r24
    5376:	09 f0       	breq	.+2      	; 0x537a <STEPPER_process_run_mode+0x104>
    5378:	59 c0       	rjmp	.+178    	; 0x542c <STEPPER_process_run_mode+0x1b6>
    537a:	80 91 57 08 	lds	r24, 0x0857
    537e:	90 91 58 08 	lds	r25, 0x0858
    5382:	89 2b       	or	r24, r25
    5384:	e9 f4       	brne	.+58     	; 0x53c0 <STEPPER_process_run_mode+0x14a>
    5386:	80 91 08 04 	lds	r24, 0x0408
    538a:	8f 71       	andi	r24, 0x1F	; 31
    538c:	80 93 08 04 	sts	0x0408, r24
    5390:	10 92 77 08 	sts	0x0877, r1
    5394:	80 91 82 08 	lds	r24, 0x0882
    5398:	88 23       	and	r24, r24
    539a:	09 f4       	brne	.+2      	; 0x539e <STEPPER_process_run_mode+0x128>
    539c:	5c c0       	rjmp	.+184    	; 0x5456 <STEPPER_process_run_mode+0x1e0>
    539e:	60 91 70 08 	lds	r22, 0x0870
    53a2:	81 e0       	ldi	r24, 0x01	; 1
    53a4:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <STEPPER_stop>
    53a8:	e0 91 83 08 	lds	r30, 0x0883
    53ac:	f0 91 84 08 	lds	r31, 0x0884
    53b0:	30 97       	sbiw	r30, 0x00	; 0
    53b2:	09 f4       	brne	.+2      	; 0x53b6 <STEPPER_process_run_mode+0x140>
    53b4:	50 c0       	rjmp	.+160    	; 0x5456 <STEPPER_process_run_mode+0x1e0>
    53b6:	81 e0       	ldi	r24, 0x01	; 1
    53b8:	81 83       	std	Z+1, r24	; 0x01
    53ba:	10 92 82 08 	sts	0x0882, r1
    53be:	4b c0       	rjmp	.+150    	; 0x5456 <STEPPER_process_run_mode+0x1e0>
    53c0:	80 91 50 08 	lds	r24, 0x0850
    53c4:	81 30       	cpi	r24, 0x01	; 1
    53c6:	41 f4       	brne	.+16     	; 0x53d8 <STEPPER_process_run_mode+0x162>
    53c8:	80 91 63 08 	lds	r24, 0x0863
    53cc:	90 91 64 08 	lds	r25, 0x0864
    53d0:	01 97       	sbiw	r24, 0x01	; 1
    53d2:	11 f4       	brne	.+4      	; 0x53d8 <STEPPER_process_run_mode+0x162>
    53d4:	01 e0       	ldi	r16, 0x01	; 1
    53d6:	02 c0       	rjmp	.+4      	; 0x53dc <STEPPER_process_run_mode+0x166>
    53d8:	00 23       	and	r16, r16
    53da:	e9 f1       	breq	.+122    	; 0x5456 <STEPPER_process_run_mode+0x1e0>
    53dc:	e0 91 75 08 	lds	r30, 0x0875
    53e0:	f0 e0       	ldi	r31, 0x00	; 0
    53e2:	e4 5c       	subi	r30, 0xC4	; 196
    53e4:	fc 4f       	sbci	r31, 0xFC	; 252
    53e6:	90 91 08 04 	lds	r25, 0x0408
    53ea:	9f 71       	andi	r25, 0x1F	; 31
    53ec:	80 81       	ld	r24, Z
    53ee:	89 2b       	or	r24, r25
    53f0:	80 93 08 04 	sts	0x0408, r24
    53f4:	80 91 73 08 	lds	r24, 0x0873
    53f8:	88 23       	and	r24, r24
    53fa:	21 f4       	brne	.+8      	; 0x5404 <STEPPER_process_run_mode+0x18e>
    53fc:	80 91 75 08 	lds	r24, 0x0875
    5400:	8f 5f       	subi	r24, 0xFF	; 255
    5402:	03 c0       	rjmp	.+6      	; 0x540a <STEPPER_process_run_mode+0x194>
    5404:	80 91 75 08 	lds	r24, 0x0875
    5408:	81 50       	subi	r24, 0x01	; 1
    540a:	80 93 75 08 	sts	0x0875, r24
    540e:	80 91 75 08 	lds	r24, 0x0875
    5412:	83 70       	andi	r24, 0x03	; 3
    5414:	80 93 75 08 	sts	0x0875, r24
    5418:	81 e0       	ldi	r24, 0x01	; 1
    541a:	80 93 77 08 	sts	0x0877, r24
    541e:	80 91 50 08 	lds	r24, 0x0850
    5422:	81 30       	cpi	r24, 0x01	; 1
    5424:	c1 f4       	brne	.+48     	; 0x5456 <STEPPER_process_run_mode+0x1e0>
    5426:	0e 94 3e 2a 	call	0x547c	; 0x547c <STEPPER_process_step_mode>
    542a:	15 c0       	rjmp	.+42     	; 0x5456 <STEPPER_process_run_mode+0x1e0>
    542c:	90 91 08 04 	lds	r25, 0x0408
    5430:	9f 71       	andi	r25, 0x1F	; 31
    5432:	90 93 08 04 	sts	0x0408, r25
    5436:	e0 91 75 08 	lds	r30, 0x0875
    543a:	f0 e0       	ldi	r31, 0x00	; 0
    543c:	e4 5c       	subi	r30, 0xC4	; 196
    543e:	fc 4f       	sbci	r31, 0xFC	; 252
    5440:	80 81       	ld	r24, Z
    5442:	89 2b       	or	r24, r25
    5444:	80 93 08 04 	sts	0x0408, r24
    5448:	82 e0       	ldi	r24, 0x02	; 2
    544a:	80 93 77 08 	sts	0x0877, r24
    544e:	10 92 58 08 	sts	0x0858, r1
    5452:	10 92 57 08 	sts	0x0857, r1
    5456:	80 91 78 08 	lds	r24, 0x0878
    545a:	88 23       	and	r24, r24
    545c:	31 f4       	brne	.+12     	; 0x546a <STEPPER_process_run_mode+0x1f4>
    545e:	88 e0       	ldi	r24, 0x08	; 8
    5460:	94 e0       	ldi	r25, 0x04	; 4
    5462:	61 2f       	mov	r22, r17
    5464:	40 2f       	mov	r20, r16
    5466:	0e 94 00 2b 	call	0x5600	; 0x5600 <STEPPER_process_pwm>
    546a:	88 b1       	in	r24, 0x08	; 8
    546c:	83 70       	andi	r24, 0x03	; 3
    546e:	90 91 08 04 	lds	r25, 0x0408
    5472:	89 2b       	or	r24, r25
    5474:	88 b9       	out	0x08, r24	; 8
    5476:	1f 91       	pop	r17
    5478:	0f 91       	pop	r16
    547a:	08 95       	ret

0000547c <STEPPER_process_step_mode>:
    547c:	88 23       	and	r24, r24
    547e:	21 f0       	breq	.+8      	; 0x5488 <STEPPER_process_step_mode+0xc>
    5480:	81 30       	cpi	r24, 0x01	; 1
    5482:	09 f0       	breq	.+2      	; 0x5486 <STEPPER_process_step_mode+0xa>
    5484:	4e c0       	rjmp	.+156    	; 0x5522 <STEPPER_process_step_mode+0xa6>
    5486:	27 c0       	rjmp	.+78     	; 0x54d6 <STEPPER_process_step_mode+0x5a>
    5488:	80 91 61 08 	lds	r24, 0x0861
    548c:	90 91 62 08 	lds	r25, 0x0862
    5490:	89 2b       	or	r24, r25
    5492:	49 f0       	breq	.+18     	; 0x54a6 <STEPPER_process_step_mode+0x2a>
    5494:	80 91 61 08 	lds	r24, 0x0861
    5498:	90 91 62 08 	lds	r25, 0x0862
    549c:	01 97       	sbiw	r24, 0x01	; 1
    549e:	90 93 62 08 	sts	0x0862, r25
    54a2:	80 93 61 08 	sts	0x0861, r24
    54a6:	80 91 81 08 	lds	r24, 0x0881
    54aa:	88 23       	and	r24, r24
    54ac:	d1 f5       	brne	.+116    	; 0x5522 <STEPPER_process_step_mode+0xa6>
    54ae:	20 91 61 08 	lds	r18, 0x0861
    54b2:	30 91 62 08 	lds	r19, 0x0862
    54b6:	80 91 65 08 	lds	r24, 0x0865
    54ba:	90 91 66 08 	lds	r25, 0x0866
    54be:	28 17       	cp	r18, r24
    54c0:	39 07       	cpc	r19, r25
    54c2:	79 f5       	brne	.+94     	; 0x5522 <STEPPER_process_step_mode+0xa6>
    54c4:	80 e0       	ldi	r24, 0x00	; 0
    54c6:	60 e0       	ldi	r22, 0x00	; 0
    54c8:	70 e0       	ldi	r23, 0x00	; 0
    54ca:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <STEPPER_set_speed>
    54ce:	81 e0       	ldi	r24, 0x01	; 1
    54d0:	80 93 81 08 	sts	0x0881, r24
    54d4:	08 95       	ret
    54d6:	80 91 63 08 	lds	r24, 0x0863
    54da:	90 91 64 08 	lds	r25, 0x0864
    54de:	89 2b       	or	r24, r25
    54e0:	49 f0       	breq	.+18     	; 0x54f4 <STEPPER_process_step_mode+0x78>
    54e2:	80 91 63 08 	lds	r24, 0x0863
    54e6:	90 91 64 08 	lds	r25, 0x0864
    54ea:	01 97       	sbiw	r24, 0x01	; 1
    54ec:	90 93 64 08 	sts	0x0864, r25
    54f0:	80 93 63 08 	sts	0x0863, r24
    54f4:	80 91 82 08 	lds	r24, 0x0882
    54f8:	88 23       	and	r24, r24
    54fa:	99 f4       	brne	.+38     	; 0x5522 <STEPPER_process_step_mode+0xa6>
    54fc:	20 91 63 08 	lds	r18, 0x0863
    5500:	30 91 64 08 	lds	r19, 0x0864
    5504:	80 91 67 08 	lds	r24, 0x0867
    5508:	90 91 68 08 	lds	r25, 0x0868
    550c:	28 17       	cp	r18, r24
    550e:	39 07       	cpc	r19, r25
    5510:	41 f4       	brne	.+16     	; 0x5522 <STEPPER_process_step_mode+0xa6>
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	60 e0       	ldi	r22, 0x00	; 0
    5516:	70 e0       	ldi	r23, 0x00	; 0
    5518:	0e 94 23 1d 	call	0x3a46	; 0x3a46 <STEPPER_set_speed>
    551c:	81 e0       	ldi	r24, 0x01	; 1
    551e:	80 93 82 08 	sts	0x0882, r24
    5522:	08 95       	ret

00005524 <TMRSRVC_process>:
    5524:	ff 92       	push	r15
    5526:	0f 93       	push	r16
    5528:	1f 93       	push	r17
    552a:	cf 93       	push	r28
    552c:	df 93       	push	r29
    552e:	80 91 bf 08 	lds	r24, 0x08BF
    5532:	88 23       	and	r24, r24
    5534:	09 f4       	brne	.+2      	; 0x5538 <TMRSRVC_process+0x14>
    5536:	59 c0       	rjmp	.+178    	; 0x55ea <TMRSRVC_process+0xc6>
    5538:	00 91 c0 08 	lds	r16, 0x08C0
    553c:	10 91 c1 08 	lds	r17, 0x08C1
    5540:	f8 01       	movw	r30, r16
    5542:	c0 81       	ld	r28, Z
    5544:	d1 81       	ldd	r29, Z+1	; 0x01
    5546:	8c 81       	ldd	r24, Y+4	; 0x04
    5548:	9d 81       	ldd	r25, Y+5	; 0x05
    554a:	01 97       	sbiw	r24, 0x01	; 1
    554c:	9d 83       	std	Y+5, r25	; 0x05
    554e:	8c 83       	std	Y+4, r24	; 0x04
    5550:	18 16       	cp	r1, r24
    5552:	19 06       	cpc	r1, r25
    5554:	0c f4       	brge	.+2      	; 0x5558 <TMRSRVC_process+0x34>
    5556:	49 c0       	rjmp	.+146    	; 0x55ea <TMRSRVC_process+0xc6>
    5558:	89 81       	ldd	r24, Y+1	; 0x01
    555a:	80 ff       	sbrs	r24, 0
    555c:	05 c0       	rjmp	.+10     	; 0x5568 <TMRSRVC_process+0x44>
    555e:	8e 81       	ldd	r24, Y+6	; 0x06
    5560:	88 23       	and	r24, r24
    5562:	11 f4       	brne	.+4      	; 0x5568 <TMRSRVC_process+0x44>
    5564:	81 e0       	ldi	r24, 0x01	; 1
    5566:	8e 83       	std	Y+6, r24	; 0x06
    5568:	89 81       	ldd	r24, Y+1	; 0x01
    556a:	81 ff       	sbrs	r24, 1
    556c:	03 c0       	rjmp	.+6      	; 0x5574 <TMRSRVC_process+0x50>
    556e:	ef 81       	ldd	r30, Y+7	; 0x07
    5570:	f8 85       	ldd	r31, Y+8	; 0x08
    5572:	09 95       	icall
    5574:	80 91 bf 08 	lds	r24, 0x08BF
    5578:	82 30       	cpi	r24, 0x02	; 2
    557a:	a8 f0       	brcs	.+42     	; 0x55a6 <TMRSRVC_process+0x82>
    557c:	f8 01       	movw	r30, r16
    557e:	82 81       	ldd	r24, Z+2	; 0x02
    5580:	93 81       	ldd	r25, Z+3	; 0x03
    5582:	90 93 c1 08 	sts	0x08C1, r25
    5586:	80 93 c0 08 	sts	0x08C0, r24
    558a:	13 82       	std	Z+3, r1	; 0x03
    558c:	12 82       	std	Z+2, r1	; 0x02
    558e:	e0 91 00 00 	lds	r30, 0x0000
    5592:	f0 91 01 00 	lds	r31, 0x0001
    5596:	84 81       	ldd	r24, Z+4	; 0x04
    5598:	95 81       	ldd	r25, Z+5	; 0x05
    559a:	18 16       	cp	r1, r24
    559c:	19 06       	cpc	r1, r25
    559e:	3c f0       	brlt	.+14     	; 0x55ae <TMRSRVC_process+0x8a>
    55a0:	ff 24       	eor	r15, r15
    55a2:	f3 94       	inc	r15
    55a4:	05 c0       	rjmp	.+10     	; 0x55b0 <TMRSRVC_process+0x8c>
    55a6:	10 92 c1 08 	sts	0x08C1, r1
    55aa:	10 92 c0 08 	sts	0x08C0, r1
    55ae:	ff 24       	eor	r15, r15
    55b0:	80 91 bf 08 	lds	r24, 0x08BF
    55b4:	81 50       	subi	r24, 0x01	; 1
    55b6:	80 93 bf 08 	sts	0x08BF, r24
    55ba:	80 91 bf 08 	lds	r24, 0x08BF
    55be:	88 23       	and	r24, r24
    55c0:	11 f4       	brne	.+4      	; 0x55c6 <TMRSRVC_process+0xa2>
    55c2:	0e 94 fd 2a 	call	0x55fa	; 0x55fa <TMRSRVC_stop>
    55c6:	89 81       	ldd	r24, Y+1	; 0x01
    55c8:	82 ff       	sbrs	r24, 2
    55ca:	08 c0       	rjmp	.+16     	; 0x55dc <TMRSRVC_process+0xb8>
    55cc:	8a 81       	ldd	r24, Y+2	; 0x02
    55ce:	9b 81       	ldd	r25, Y+3	; 0x03
    55d0:	9d 83       	std	Y+5, r25	; 0x05
    55d2:	8c 83       	std	Y+4, r24	; 0x04
    55d4:	c8 01       	movw	r24, r16
    55d6:	0e 94 72 26 	call	0x4ce4	; 0x4ce4 <TMRSRVC_insert>
    55da:	08 c0       	rjmp	.+16     	; 0x55ec <TMRSRVC_process+0xc8>
    55dc:	c8 01       	movw	r24, r16
    55de:	0e 94 06 34 	call	0x680c	; 0x680c <free>
    55e2:	89 81       	ldd	r24, Y+1	; 0x01
    55e4:	8f 7e       	andi	r24, 0xEF	; 239
    55e6:	89 83       	std	Y+1, r24	; 0x01
    55e8:	01 c0       	rjmp	.+2      	; 0x55ec <TMRSRVC_process+0xc8>
    55ea:	ff 24       	eor	r15, r15
    55ec:	8f 2d       	mov	r24, r15
    55ee:	df 91       	pop	r29
    55f0:	cf 91       	pop	r28
    55f2:	1f 91       	pop	r17
    55f4:	0f 91       	pop	r16
    55f6:	ff 90       	pop	r15
    55f8:	08 95       	ret

000055fa <TMRSRVC_stop>:
    55fa:	10 92 07 04 	sts	0x0407, r1
    55fe:	08 95       	ret

00005600 <STEPPER_process_pwm>:
    5600:	fc 01       	movw	r30, r24
    5602:	80 91 76 08 	lds	r24, 0x0876
    5606:	82 30       	cpi	r24, 0x02	; 2
    5608:	69 f4       	brne	.+26     	; 0x5624 <STEPPER_process_pwm+0x24>
    560a:	80 91 0c 04 	lds	r24, 0x040C
    560e:	91 e0       	ldi	r25, 0x01	; 1
    5610:	89 27       	eor	r24, r25
    5612:	80 93 0c 04 	sts	0x040C, r24
    5616:	88 23       	and	r24, r24
    5618:	09 f0       	breq	.+2      	; 0x561c <STEPPER_process_pwm+0x1c>
    561a:	3e c0       	rjmp	.+124    	; 0x5698 <STEPPER_process_pwm+0x98>
    561c:	80 81       	ld	r24, Z
    561e:	83 7e       	andi	r24, 0xE3	; 227
    5620:	80 83       	st	Z, r24
    5622:	3a c0       	rjmp	.+116    	; 0x5698 <STEPPER_process_pwm+0x98>
    5624:	80 91 55 08 	lds	r24, 0x0855
    5628:	90 91 56 08 	lds	r25, 0x0856
    562c:	c3 97       	sbiw	r24, 0x33	; 51
    562e:	a4 f5       	brge	.+104    	; 0x5698 <STEPPER_process_pwm+0x98>
    5630:	66 23       	and	r22, r22
    5632:	d1 f0       	breq	.+52     	; 0x5668 <STEPPER_process_pwm+0x68>
    5634:	20 91 55 08 	lds	r18, 0x0855
    5638:	30 91 56 08 	lds	r19, 0x0856
    563c:	80 e6       	ldi	r24, 0x60	; 96
    563e:	90 e0       	ldi	r25, 0x00	; 0
    5640:	bc 01       	movw	r22, r24
    5642:	26 9f       	mul	r18, r22
    5644:	c0 01       	movw	r24, r0
    5646:	27 9f       	mul	r18, r23
    5648:	90 0d       	add	r25, r0
    564a:	36 9f       	mul	r19, r22
    564c:	90 0d       	add	r25, r0
    564e:	11 24       	eor	r1, r1
    5650:	88 0f       	add	r24, r24
    5652:	89 2f       	mov	r24, r25
    5654:	88 1f       	adc	r24, r24
    5656:	99 0b       	sbc	r25, r25
    5658:	90 93 6a 08 	sts	0x086A, r25
    565c:	80 93 69 08 	sts	0x0869, r24
    5660:	81 e0       	ldi	r24, 0x01	; 1
    5662:	80 93 0a 04 	sts	0x040A, r24
    5666:	18 c0       	rjmp	.+48     	; 0x5698 <STEPPER_process_pwm+0x98>
    5668:	80 91 0a 04 	lds	r24, 0x040A
    566c:	88 23       	and	r24, r24
    566e:	a1 f0       	breq	.+40     	; 0x5698 <STEPPER_process_pwm+0x98>
    5670:	80 91 69 08 	lds	r24, 0x0869
    5674:	90 91 6a 08 	lds	r25, 0x086A
    5678:	01 97       	sbiw	r24, 0x01	; 1
    567a:	90 93 6a 08 	sts	0x086A, r25
    567e:	80 93 69 08 	sts	0x0869, r24
    5682:	80 91 69 08 	lds	r24, 0x0869
    5686:	90 91 6a 08 	lds	r25, 0x086A
    568a:	89 2b       	or	r24, r25
    568c:	29 f4       	brne	.+10     	; 0x5698 <STEPPER_process_pwm+0x98>
    568e:	80 81       	ld	r24, Z
    5690:	83 7e       	andi	r24, 0xE3	; 227
    5692:	80 83       	st	Z, r24
    5694:	10 92 0a 04 	sts	0x040A, r1
    5698:	80 91 77 08 	lds	r24, 0x0877
    569c:	82 30       	cpi	r24, 0x02	; 2
    569e:	69 f4       	brne	.+26     	; 0x56ba <STEPPER_process_pwm+0xba>
    56a0:	80 91 0b 04 	lds	r24, 0x040B
    56a4:	91 e0       	ldi	r25, 0x01	; 1
    56a6:	89 27       	eor	r24, r25
    56a8:	80 93 0b 04 	sts	0x040B, r24
    56ac:	88 23       	and	r24, r24
    56ae:	09 f0       	breq	.+2      	; 0x56b2 <STEPPER_process_pwm+0xb2>
    56b0:	3e c0       	rjmp	.+124    	; 0x572e <STEPPER_process_pwm+0x12e>
    56b2:	80 81       	ld	r24, Z
    56b4:	8f 71       	andi	r24, 0x1F	; 31
    56b6:	80 83       	st	Z, r24
    56b8:	08 95       	ret
    56ba:	80 91 57 08 	lds	r24, 0x0857
    56be:	90 91 58 08 	lds	r25, 0x0858
    56c2:	c3 97       	sbiw	r24, 0x33	; 51
    56c4:	a4 f5       	brge	.+104    	; 0x572e <STEPPER_process_pwm+0x12e>
    56c6:	44 23       	and	r20, r20
    56c8:	d1 f0       	breq	.+52     	; 0x56fe <STEPPER_process_pwm+0xfe>
    56ca:	20 91 57 08 	lds	r18, 0x0857
    56ce:	30 91 58 08 	lds	r19, 0x0858
    56d2:	80 e6       	ldi	r24, 0x60	; 96
    56d4:	90 e0       	ldi	r25, 0x00	; 0
    56d6:	ac 01       	movw	r20, r24
    56d8:	24 9f       	mul	r18, r20
    56da:	c0 01       	movw	r24, r0
    56dc:	25 9f       	mul	r18, r21
    56de:	90 0d       	add	r25, r0
    56e0:	34 9f       	mul	r19, r20
    56e2:	90 0d       	add	r25, r0
    56e4:	11 24       	eor	r1, r1
    56e6:	88 0f       	add	r24, r24
    56e8:	89 2f       	mov	r24, r25
    56ea:	88 1f       	adc	r24, r24
    56ec:	99 0b       	sbc	r25, r25
    56ee:	90 93 6c 08 	sts	0x086C, r25
    56f2:	80 93 6b 08 	sts	0x086B, r24
    56f6:	81 e0       	ldi	r24, 0x01	; 1
    56f8:	80 93 09 04 	sts	0x0409, r24
    56fc:	08 95       	ret
    56fe:	80 91 09 04 	lds	r24, 0x0409
    5702:	88 23       	and	r24, r24
    5704:	a1 f0       	breq	.+40     	; 0x572e <STEPPER_process_pwm+0x12e>
    5706:	80 91 6b 08 	lds	r24, 0x086B
    570a:	90 91 6c 08 	lds	r25, 0x086C
    570e:	01 97       	sbiw	r24, 0x01	; 1
    5710:	90 93 6c 08 	sts	0x086C, r25
    5714:	80 93 6b 08 	sts	0x086B, r24
    5718:	80 91 6b 08 	lds	r24, 0x086B
    571c:	90 91 6c 08 	lds	r25, 0x086C
    5720:	89 2b       	or	r24, r25
    5722:	29 f4       	brne	.+10     	; 0x572e <STEPPER_process_pwm+0x12e>
    5724:	80 81       	ld	r24, Z
    5726:	8f 71       	andi	r24, 0x1F	; 31
    5728:	80 83       	st	Z, r24
    572a:	10 92 09 04 	sts	0x0409, r1
    572e:	08 95       	ret

00005730 <__subsf3>:
    5730:	50 58       	subi	r21, 0x80	; 128

00005732 <__addsf3>:
    5732:	bb 27       	eor	r27, r27
    5734:	aa 27       	eor	r26, r26
    5736:	0e d0       	rcall	.+28     	; 0x5754 <__addsf3x>
    5738:	75 c1       	rjmp	.+746    	; 0x5a24 <__fp_round>
    573a:	66 d1       	rcall	.+716    	; 0x5a08 <__fp_pscA>
    573c:	30 f0       	brcs	.+12     	; 0x574a <__addsf3+0x18>
    573e:	6b d1       	rcall	.+726    	; 0x5a16 <__fp_pscB>
    5740:	20 f0       	brcs	.+8      	; 0x574a <__addsf3+0x18>
    5742:	31 f4       	brne	.+12     	; 0x5750 <__addsf3+0x1e>
    5744:	9f 3f       	cpi	r25, 0xFF	; 255
    5746:	11 f4       	brne	.+4      	; 0x574c <__addsf3+0x1a>
    5748:	1e f4       	brtc	.+6      	; 0x5750 <__addsf3+0x1e>
    574a:	5b c1       	rjmp	.+694    	; 0x5a02 <__fp_nan>
    574c:	0e f4       	brtc	.+2      	; 0x5750 <__addsf3+0x1e>
    574e:	e0 95       	com	r30
    5750:	e7 fb       	bst	r30, 7
    5752:	51 c1       	rjmp	.+674    	; 0x59f6 <__fp_inf>

00005754 <__addsf3x>:
    5754:	e9 2f       	mov	r30, r25
    5756:	77 d1       	rcall	.+750    	; 0x5a46 <__fp_split3>
    5758:	80 f3       	brcs	.-32     	; 0x573a <__addsf3+0x8>
    575a:	ba 17       	cp	r27, r26
    575c:	62 07       	cpc	r22, r18
    575e:	73 07       	cpc	r23, r19
    5760:	84 07       	cpc	r24, r20
    5762:	95 07       	cpc	r25, r21
    5764:	18 f0       	brcs	.+6      	; 0x576c <__addsf3x+0x18>
    5766:	71 f4       	brne	.+28     	; 0x5784 <__addsf3x+0x30>
    5768:	9e f5       	brtc	.+102    	; 0x57d0 <__addsf3x+0x7c>
    576a:	8f c1       	rjmp	.+798    	; 0x5a8a <__fp_zero>
    576c:	0e f4       	brtc	.+2      	; 0x5770 <__addsf3x+0x1c>
    576e:	e0 95       	com	r30
    5770:	0b 2e       	mov	r0, r27
    5772:	ba 2f       	mov	r27, r26
    5774:	a0 2d       	mov	r26, r0
    5776:	0b 01       	movw	r0, r22
    5778:	b9 01       	movw	r22, r18
    577a:	90 01       	movw	r18, r0
    577c:	0c 01       	movw	r0, r24
    577e:	ca 01       	movw	r24, r20
    5780:	a0 01       	movw	r20, r0
    5782:	11 24       	eor	r1, r1
    5784:	ff 27       	eor	r31, r31
    5786:	59 1b       	sub	r21, r25
    5788:	99 f0       	breq	.+38     	; 0x57b0 <__addsf3x+0x5c>
    578a:	59 3f       	cpi	r21, 0xF9	; 249
    578c:	50 f4       	brcc	.+20     	; 0x57a2 <__addsf3x+0x4e>
    578e:	50 3e       	cpi	r21, 0xE0	; 224
    5790:	68 f1       	brcs	.+90     	; 0x57ec <__addsf3x+0x98>
    5792:	1a 16       	cp	r1, r26
    5794:	f0 40       	sbci	r31, 0x00	; 0
    5796:	a2 2f       	mov	r26, r18
    5798:	23 2f       	mov	r18, r19
    579a:	34 2f       	mov	r19, r20
    579c:	44 27       	eor	r20, r20
    579e:	58 5f       	subi	r21, 0xF8	; 248
    57a0:	f3 cf       	rjmp	.-26     	; 0x5788 <__addsf3x+0x34>
    57a2:	46 95       	lsr	r20
    57a4:	37 95       	ror	r19
    57a6:	27 95       	ror	r18
    57a8:	a7 95       	ror	r26
    57aa:	f0 40       	sbci	r31, 0x00	; 0
    57ac:	53 95       	inc	r21
    57ae:	c9 f7       	brne	.-14     	; 0x57a2 <__addsf3x+0x4e>
    57b0:	7e f4       	brtc	.+30     	; 0x57d0 <__addsf3x+0x7c>
    57b2:	1f 16       	cp	r1, r31
    57b4:	ba 0b       	sbc	r27, r26
    57b6:	62 0b       	sbc	r22, r18
    57b8:	73 0b       	sbc	r23, r19
    57ba:	84 0b       	sbc	r24, r20
    57bc:	ba f0       	brmi	.+46     	; 0x57ec <__addsf3x+0x98>
    57be:	91 50       	subi	r25, 0x01	; 1
    57c0:	a1 f0       	breq	.+40     	; 0x57ea <__addsf3x+0x96>
    57c2:	ff 0f       	add	r31, r31
    57c4:	bb 1f       	adc	r27, r27
    57c6:	66 1f       	adc	r22, r22
    57c8:	77 1f       	adc	r23, r23
    57ca:	88 1f       	adc	r24, r24
    57cc:	c2 f7       	brpl	.-16     	; 0x57be <__addsf3x+0x6a>
    57ce:	0e c0       	rjmp	.+28     	; 0x57ec <__addsf3x+0x98>
    57d0:	ba 0f       	add	r27, r26
    57d2:	62 1f       	adc	r22, r18
    57d4:	73 1f       	adc	r23, r19
    57d6:	84 1f       	adc	r24, r20
    57d8:	48 f4       	brcc	.+18     	; 0x57ec <__addsf3x+0x98>
    57da:	87 95       	ror	r24
    57dc:	77 95       	ror	r23
    57de:	67 95       	ror	r22
    57e0:	b7 95       	ror	r27
    57e2:	f7 95       	ror	r31
    57e4:	9e 3f       	cpi	r25, 0xFE	; 254
    57e6:	08 f0       	brcs	.+2      	; 0x57ea <__addsf3x+0x96>
    57e8:	b3 cf       	rjmp	.-154    	; 0x5750 <__addsf3+0x1e>
    57ea:	93 95       	inc	r25
    57ec:	88 0f       	add	r24, r24
    57ee:	08 f0       	brcs	.+2      	; 0x57f2 <__addsf3x+0x9e>
    57f0:	99 27       	eor	r25, r25
    57f2:	ee 0f       	add	r30, r30
    57f4:	97 95       	ror	r25
    57f6:	87 95       	ror	r24
    57f8:	08 95       	ret

000057fa <__cmpsf2>:
    57fa:	d9 d0       	rcall	.+434    	; 0x59ae <__fp_cmp>
    57fc:	08 f4       	brcc	.+2      	; 0x5800 <__cmpsf2+0x6>
    57fe:	81 e0       	ldi	r24, 0x01	; 1
    5800:	08 95       	ret

00005802 <__divsf3>:
    5802:	0c d0       	rcall	.+24     	; 0x581c <__divsf3x>
    5804:	0f c1       	rjmp	.+542    	; 0x5a24 <__fp_round>
    5806:	07 d1       	rcall	.+526    	; 0x5a16 <__fp_pscB>
    5808:	40 f0       	brcs	.+16     	; 0x581a <__divsf3+0x18>
    580a:	fe d0       	rcall	.+508    	; 0x5a08 <__fp_pscA>
    580c:	30 f0       	brcs	.+12     	; 0x581a <__divsf3+0x18>
    580e:	21 f4       	brne	.+8      	; 0x5818 <__divsf3+0x16>
    5810:	5f 3f       	cpi	r21, 0xFF	; 255
    5812:	19 f0       	breq	.+6      	; 0x581a <__divsf3+0x18>
    5814:	f0 c0       	rjmp	.+480    	; 0x59f6 <__fp_inf>
    5816:	51 11       	cpse	r21, r1
    5818:	39 c1       	rjmp	.+626    	; 0x5a8c <__fp_szero>
    581a:	f3 c0       	rjmp	.+486    	; 0x5a02 <__fp_nan>

0000581c <__divsf3x>:
    581c:	14 d1       	rcall	.+552    	; 0x5a46 <__fp_split3>
    581e:	98 f3       	brcs	.-26     	; 0x5806 <__divsf3+0x4>

00005820 <__divsf3_pse>:
    5820:	99 23       	and	r25, r25
    5822:	c9 f3       	breq	.-14     	; 0x5816 <__divsf3+0x14>
    5824:	55 23       	and	r21, r21
    5826:	b1 f3       	breq	.-20     	; 0x5814 <__divsf3+0x12>
    5828:	95 1b       	sub	r25, r21
    582a:	55 0b       	sbc	r21, r21
    582c:	bb 27       	eor	r27, r27
    582e:	aa 27       	eor	r26, r26
    5830:	62 17       	cp	r22, r18
    5832:	73 07       	cpc	r23, r19
    5834:	84 07       	cpc	r24, r20
    5836:	38 f0       	brcs	.+14     	; 0x5846 <__divsf3_pse+0x26>
    5838:	9f 5f       	subi	r25, 0xFF	; 255
    583a:	5f 4f       	sbci	r21, 0xFF	; 255
    583c:	22 0f       	add	r18, r18
    583e:	33 1f       	adc	r19, r19
    5840:	44 1f       	adc	r20, r20
    5842:	aa 1f       	adc	r26, r26
    5844:	a9 f3       	breq	.-22     	; 0x5830 <__divsf3_pse+0x10>
    5846:	33 d0       	rcall	.+102    	; 0x58ae <__divsf3_pse+0x8e>
    5848:	0e 2e       	mov	r0, r30
    584a:	3a f0       	brmi	.+14     	; 0x585a <__divsf3_pse+0x3a>
    584c:	e0 e8       	ldi	r30, 0x80	; 128
    584e:	30 d0       	rcall	.+96     	; 0x58b0 <__divsf3_pse+0x90>
    5850:	91 50       	subi	r25, 0x01	; 1
    5852:	50 40       	sbci	r21, 0x00	; 0
    5854:	e6 95       	lsr	r30
    5856:	00 1c       	adc	r0, r0
    5858:	ca f7       	brpl	.-14     	; 0x584c <__divsf3_pse+0x2c>
    585a:	29 d0       	rcall	.+82     	; 0x58ae <__divsf3_pse+0x8e>
    585c:	fe 2f       	mov	r31, r30
    585e:	27 d0       	rcall	.+78     	; 0x58ae <__divsf3_pse+0x8e>
    5860:	66 0f       	add	r22, r22
    5862:	77 1f       	adc	r23, r23
    5864:	88 1f       	adc	r24, r24
    5866:	bb 1f       	adc	r27, r27
    5868:	26 17       	cp	r18, r22
    586a:	37 07       	cpc	r19, r23
    586c:	48 07       	cpc	r20, r24
    586e:	ab 07       	cpc	r26, r27
    5870:	b0 e8       	ldi	r27, 0x80	; 128
    5872:	09 f0       	breq	.+2      	; 0x5876 <__divsf3_pse+0x56>
    5874:	bb 0b       	sbc	r27, r27
    5876:	80 2d       	mov	r24, r0
    5878:	bf 01       	movw	r22, r30
    587a:	ff 27       	eor	r31, r31
    587c:	93 58       	subi	r25, 0x83	; 131
    587e:	5f 4f       	sbci	r21, 0xFF	; 255
    5880:	2a f0       	brmi	.+10     	; 0x588c <__divsf3_pse+0x6c>
    5882:	9e 3f       	cpi	r25, 0xFE	; 254
    5884:	51 05       	cpc	r21, r1
    5886:	68 f0       	brcs	.+26     	; 0x58a2 <__divsf3_pse+0x82>
    5888:	b6 c0       	rjmp	.+364    	; 0x59f6 <__fp_inf>
    588a:	00 c1       	rjmp	.+512    	; 0x5a8c <__fp_szero>
    588c:	5f 3f       	cpi	r21, 0xFF	; 255
    588e:	ec f3       	brlt	.-6      	; 0x588a <__divsf3_pse+0x6a>
    5890:	98 3e       	cpi	r25, 0xE8	; 232
    5892:	dc f3       	brlt	.-10     	; 0x588a <__divsf3_pse+0x6a>
    5894:	86 95       	lsr	r24
    5896:	77 95       	ror	r23
    5898:	67 95       	ror	r22
    589a:	b7 95       	ror	r27
    589c:	f7 95       	ror	r31
    589e:	9f 5f       	subi	r25, 0xFF	; 255
    58a0:	c9 f7       	brne	.-14     	; 0x5894 <__divsf3_pse+0x74>
    58a2:	88 0f       	add	r24, r24
    58a4:	91 1d       	adc	r25, r1
    58a6:	96 95       	lsr	r25
    58a8:	87 95       	ror	r24
    58aa:	97 f9       	bld	r25, 7
    58ac:	08 95       	ret
    58ae:	e1 e0       	ldi	r30, 0x01	; 1
    58b0:	66 0f       	add	r22, r22
    58b2:	77 1f       	adc	r23, r23
    58b4:	88 1f       	adc	r24, r24
    58b6:	bb 1f       	adc	r27, r27
    58b8:	62 17       	cp	r22, r18
    58ba:	73 07       	cpc	r23, r19
    58bc:	84 07       	cpc	r24, r20
    58be:	ba 07       	cpc	r27, r26
    58c0:	20 f0       	brcs	.+8      	; 0x58ca <__divsf3_pse+0xaa>
    58c2:	62 1b       	sub	r22, r18
    58c4:	73 0b       	sbc	r23, r19
    58c6:	84 0b       	sbc	r24, r20
    58c8:	ba 0b       	sbc	r27, r26
    58ca:	ee 1f       	adc	r30, r30
    58cc:	88 f7       	brcc	.-30     	; 0x58b0 <__divsf3_pse+0x90>
    58ce:	e0 95       	com	r30
    58d0:	08 95       	ret

000058d2 <__fixsfsi>:
    58d2:	04 d0       	rcall	.+8      	; 0x58dc <__fixunssfsi>
    58d4:	68 94       	set
    58d6:	b1 11       	cpse	r27, r1
    58d8:	d9 c0       	rjmp	.+434    	; 0x5a8c <__fp_szero>
    58da:	08 95       	ret

000058dc <__fixunssfsi>:
    58dc:	bc d0       	rcall	.+376    	; 0x5a56 <__fp_splitA>
    58de:	88 f0       	brcs	.+34     	; 0x5902 <__fixunssfsi+0x26>
    58e0:	9f 57       	subi	r25, 0x7F	; 127
    58e2:	90 f0       	brcs	.+36     	; 0x5908 <__fixunssfsi+0x2c>
    58e4:	b9 2f       	mov	r27, r25
    58e6:	99 27       	eor	r25, r25
    58e8:	b7 51       	subi	r27, 0x17	; 23
    58ea:	a0 f0       	brcs	.+40     	; 0x5914 <__fixunssfsi+0x38>
    58ec:	d1 f0       	breq	.+52     	; 0x5922 <__fixunssfsi+0x46>
    58ee:	66 0f       	add	r22, r22
    58f0:	77 1f       	adc	r23, r23
    58f2:	88 1f       	adc	r24, r24
    58f4:	99 1f       	adc	r25, r25
    58f6:	1a f0       	brmi	.+6      	; 0x58fe <__fixunssfsi+0x22>
    58f8:	ba 95       	dec	r27
    58fa:	c9 f7       	brne	.-14     	; 0x58ee <__fixunssfsi+0x12>
    58fc:	12 c0       	rjmp	.+36     	; 0x5922 <__fixunssfsi+0x46>
    58fe:	b1 30       	cpi	r27, 0x01	; 1
    5900:	81 f0       	breq	.+32     	; 0x5922 <__fixunssfsi+0x46>
    5902:	c3 d0       	rcall	.+390    	; 0x5a8a <__fp_zero>
    5904:	b1 e0       	ldi	r27, 0x01	; 1
    5906:	08 95       	ret
    5908:	c0 c0       	rjmp	.+384    	; 0x5a8a <__fp_zero>
    590a:	67 2f       	mov	r22, r23
    590c:	78 2f       	mov	r23, r24
    590e:	88 27       	eor	r24, r24
    5910:	b8 5f       	subi	r27, 0xF8	; 248
    5912:	39 f0       	breq	.+14     	; 0x5922 <__fixunssfsi+0x46>
    5914:	b9 3f       	cpi	r27, 0xF9	; 249
    5916:	cc f3       	brlt	.-14     	; 0x590a <__fixunssfsi+0x2e>
    5918:	86 95       	lsr	r24
    591a:	77 95       	ror	r23
    591c:	67 95       	ror	r22
    591e:	b3 95       	inc	r27
    5920:	d9 f7       	brne	.-10     	; 0x5918 <__fixunssfsi+0x3c>
    5922:	3e f4       	brtc	.+14     	; 0x5932 <__fixunssfsi+0x56>
    5924:	90 95       	com	r25
    5926:	80 95       	com	r24
    5928:	70 95       	com	r23
    592a:	61 95       	neg	r22
    592c:	7f 4f       	sbci	r23, 0xFF	; 255
    592e:	8f 4f       	sbci	r24, 0xFF	; 255
    5930:	9f 4f       	sbci	r25, 0xFF	; 255
    5932:	08 95       	ret

00005934 <__floatunsisf>:
    5934:	e8 94       	clt
    5936:	09 c0       	rjmp	.+18     	; 0x594a <__floatsisf+0x12>

00005938 <__floatsisf>:
    5938:	97 fb       	bst	r25, 7
    593a:	3e f4       	brtc	.+14     	; 0x594a <__floatsisf+0x12>
    593c:	90 95       	com	r25
    593e:	80 95       	com	r24
    5940:	70 95       	com	r23
    5942:	61 95       	neg	r22
    5944:	7f 4f       	sbci	r23, 0xFF	; 255
    5946:	8f 4f       	sbci	r24, 0xFF	; 255
    5948:	9f 4f       	sbci	r25, 0xFF	; 255
    594a:	99 23       	and	r25, r25
    594c:	a9 f0       	breq	.+42     	; 0x5978 <__floatsisf+0x40>
    594e:	f9 2f       	mov	r31, r25
    5950:	96 e9       	ldi	r25, 0x96	; 150
    5952:	bb 27       	eor	r27, r27
    5954:	93 95       	inc	r25
    5956:	f6 95       	lsr	r31
    5958:	87 95       	ror	r24
    595a:	77 95       	ror	r23
    595c:	67 95       	ror	r22
    595e:	b7 95       	ror	r27
    5960:	f1 11       	cpse	r31, r1
    5962:	f8 cf       	rjmp	.-16     	; 0x5954 <__floatsisf+0x1c>
    5964:	fa f4       	brpl	.+62     	; 0x59a4 <__floatsisf+0x6c>
    5966:	bb 0f       	add	r27, r27
    5968:	11 f4       	brne	.+4      	; 0x596e <__floatsisf+0x36>
    596a:	60 ff       	sbrs	r22, 0
    596c:	1b c0       	rjmp	.+54     	; 0x59a4 <__floatsisf+0x6c>
    596e:	6f 5f       	subi	r22, 0xFF	; 255
    5970:	7f 4f       	sbci	r23, 0xFF	; 255
    5972:	8f 4f       	sbci	r24, 0xFF	; 255
    5974:	9f 4f       	sbci	r25, 0xFF	; 255
    5976:	16 c0       	rjmp	.+44     	; 0x59a4 <__floatsisf+0x6c>
    5978:	88 23       	and	r24, r24
    597a:	11 f0       	breq	.+4      	; 0x5980 <__floatsisf+0x48>
    597c:	96 e9       	ldi	r25, 0x96	; 150
    597e:	11 c0       	rjmp	.+34     	; 0x59a2 <__floatsisf+0x6a>
    5980:	77 23       	and	r23, r23
    5982:	21 f0       	breq	.+8      	; 0x598c <__floatsisf+0x54>
    5984:	9e e8       	ldi	r25, 0x8E	; 142
    5986:	87 2f       	mov	r24, r23
    5988:	76 2f       	mov	r23, r22
    598a:	05 c0       	rjmp	.+10     	; 0x5996 <__floatsisf+0x5e>
    598c:	66 23       	and	r22, r22
    598e:	71 f0       	breq	.+28     	; 0x59ac <__floatsisf+0x74>
    5990:	96 e8       	ldi	r25, 0x86	; 134
    5992:	86 2f       	mov	r24, r22
    5994:	70 e0       	ldi	r23, 0x00	; 0
    5996:	60 e0       	ldi	r22, 0x00	; 0
    5998:	2a f0       	brmi	.+10     	; 0x59a4 <__floatsisf+0x6c>
    599a:	9a 95       	dec	r25
    599c:	66 0f       	add	r22, r22
    599e:	77 1f       	adc	r23, r23
    59a0:	88 1f       	adc	r24, r24
    59a2:	da f7       	brpl	.-10     	; 0x599a <__floatsisf+0x62>
    59a4:	88 0f       	add	r24, r24
    59a6:	96 95       	lsr	r25
    59a8:	87 95       	ror	r24
    59aa:	97 f9       	bld	r25, 7
    59ac:	08 95       	ret

000059ae <__fp_cmp>:
    59ae:	99 0f       	add	r25, r25
    59b0:	00 08       	sbc	r0, r0
    59b2:	55 0f       	add	r21, r21
    59b4:	aa 0b       	sbc	r26, r26
    59b6:	e0 e8       	ldi	r30, 0x80	; 128
    59b8:	fe ef       	ldi	r31, 0xFE	; 254
    59ba:	16 16       	cp	r1, r22
    59bc:	17 06       	cpc	r1, r23
    59be:	e8 07       	cpc	r30, r24
    59c0:	f9 07       	cpc	r31, r25
    59c2:	c0 f0       	brcs	.+48     	; 0x59f4 <__fp_cmp+0x46>
    59c4:	12 16       	cp	r1, r18
    59c6:	13 06       	cpc	r1, r19
    59c8:	e4 07       	cpc	r30, r20
    59ca:	f5 07       	cpc	r31, r21
    59cc:	98 f0       	brcs	.+38     	; 0x59f4 <__fp_cmp+0x46>
    59ce:	62 1b       	sub	r22, r18
    59d0:	73 0b       	sbc	r23, r19
    59d2:	84 0b       	sbc	r24, r20
    59d4:	95 0b       	sbc	r25, r21
    59d6:	39 f4       	brne	.+14     	; 0x59e6 <__fp_cmp+0x38>
    59d8:	0a 26       	eor	r0, r26
    59da:	61 f0       	breq	.+24     	; 0x59f4 <__fp_cmp+0x46>
    59dc:	23 2b       	or	r18, r19
    59de:	24 2b       	or	r18, r20
    59e0:	25 2b       	or	r18, r21
    59e2:	21 f4       	brne	.+8      	; 0x59ec <__fp_cmp+0x3e>
    59e4:	08 95       	ret
    59e6:	0a 26       	eor	r0, r26
    59e8:	09 f4       	brne	.+2      	; 0x59ec <__fp_cmp+0x3e>
    59ea:	a1 40       	sbci	r26, 0x01	; 1
    59ec:	a6 95       	lsr	r26
    59ee:	8f ef       	ldi	r24, 0xFF	; 255
    59f0:	81 1d       	adc	r24, r1
    59f2:	81 1d       	adc	r24, r1
    59f4:	08 95       	ret

000059f6 <__fp_inf>:
    59f6:	97 f9       	bld	r25, 7
    59f8:	9f 67       	ori	r25, 0x7F	; 127
    59fa:	80 e8       	ldi	r24, 0x80	; 128
    59fc:	70 e0       	ldi	r23, 0x00	; 0
    59fe:	60 e0       	ldi	r22, 0x00	; 0
    5a00:	08 95       	ret

00005a02 <__fp_nan>:
    5a02:	9f ef       	ldi	r25, 0xFF	; 255
    5a04:	80 ec       	ldi	r24, 0xC0	; 192
    5a06:	08 95       	ret

00005a08 <__fp_pscA>:
    5a08:	00 24       	eor	r0, r0
    5a0a:	0a 94       	dec	r0
    5a0c:	16 16       	cp	r1, r22
    5a0e:	17 06       	cpc	r1, r23
    5a10:	18 06       	cpc	r1, r24
    5a12:	09 06       	cpc	r0, r25
    5a14:	08 95       	ret

00005a16 <__fp_pscB>:
    5a16:	00 24       	eor	r0, r0
    5a18:	0a 94       	dec	r0
    5a1a:	12 16       	cp	r1, r18
    5a1c:	13 06       	cpc	r1, r19
    5a1e:	14 06       	cpc	r1, r20
    5a20:	05 06       	cpc	r0, r21
    5a22:	08 95       	ret

00005a24 <__fp_round>:
    5a24:	09 2e       	mov	r0, r25
    5a26:	03 94       	inc	r0
    5a28:	00 0c       	add	r0, r0
    5a2a:	11 f4       	brne	.+4      	; 0x5a30 <__fp_round+0xc>
    5a2c:	88 23       	and	r24, r24
    5a2e:	52 f0       	brmi	.+20     	; 0x5a44 <__fp_round+0x20>
    5a30:	bb 0f       	add	r27, r27
    5a32:	40 f4       	brcc	.+16     	; 0x5a44 <__fp_round+0x20>
    5a34:	bf 2b       	or	r27, r31
    5a36:	11 f4       	brne	.+4      	; 0x5a3c <__fp_round+0x18>
    5a38:	60 ff       	sbrs	r22, 0
    5a3a:	04 c0       	rjmp	.+8      	; 0x5a44 <__fp_round+0x20>
    5a3c:	6f 5f       	subi	r22, 0xFF	; 255
    5a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a40:	8f 4f       	sbci	r24, 0xFF	; 255
    5a42:	9f 4f       	sbci	r25, 0xFF	; 255
    5a44:	08 95       	ret

00005a46 <__fp_split3>:
    5a46:	57 fd       	sbrc	r21, 7
    5a48:	90 58       	subi	r25, 0x80	; 128
    5a4a:	44 0f       	add	r20, r20
    5a4c:	55 1f       	adc	r21, r21
    5a4e:	59 f0       	breq	.+22     	; 0x5a66 <__fp_splitA+0x10>
    5a50:	5f 3f       	cpi	r21, 0xFF	; 255
    5a52:	71 f0       	breq	.+28     	; 0x5a70 <__fp_splitA+0x1a>
    5a54:	47 95       	ror	r20

00005a56 <__fp_splitA>:
    5a56:	88 0f       	add	r24, r24
    5a58:	97 fb       	bst	r25, 7
    5a5a:	99 1f       	adc	r25, r25
    5a5c:	61 f0       	breq	.+24     	; 0x5a76 <__fp_splitA+0x20>
    5a5e:	9f 3f       	cpi	r25, 0xFF	; 255
    5a60:	79 f0       	breq	.+30     	; 0x5a80 <__fp_splitA+0x2a>
    5a62:	87 95       	ror	r24
    5a64:	08 95       	ret
    5a66:	12 16       	cp	r1, r18
    5a68:	13 06       	cpc	r1, r19
    5a6a:	14 06       	cpc	r1, r20
    5a6c:	55 1f       	adc	r21, r21
    5a6e:	f2 cf       	rjmp	.-28     	; 0x5a54 <__fp_split3+0xe>
    5a70:	46 95       	lsr	r20
    5a72:	f1 df       	rcall	.-30     	; 0x5a56 <__fp_splitA>
    5a74:	08 c0       	rjmp	.+16     	; 0x5a86 <__fp_splitA+0x30>
    5a76:	16 16       	cp	r1, r22
    5a78:	17 06       	cpc	r1, r23
    5a7a:	18 06       	cpc	r1, r24
    5a7c:	99 1f       	adc	r25, r25
    5a7e:	f1 cf       	rjmp	.-30     	; 0x5a62 <__fp_splitA+0xc>
    5a80:	86 95       	lsr	r24
    5a82:	71 05       	cpc	r23, r1
    5a84:	61 05       	cpc	r22, r1
    5a86:	08 94       	sec
    5a88:	08 95       	ret

00005a8a <__fp_zero>:
    5a8a:	e8 94       	clt

00005a8c <__fp_szero>:
    5a8c:	bb 27       	eor	r27, r27
    5a8e:	66 27       	eor	r22, r22
    5a90:	77 27       	eor	r23, r23
    5a92:	cb 01       	movw	r24, r22
    5a94:	97 f9       	bld	r25, 7
    5a96:	08 95       	ret

00005a98 <__gesf2>:
    5a98:	8a df       	rcall	.-236    	; 0x59ae <__fp_cmp>
    5a9a:	08 f4       	brcc	.+2      	; 0x5a9e <__gesf2+0x6>
    5a9c:	8f ef       	ldi	r24, 0xFF	; 255
    5a9e:	08 95       	ret

00005aa0 <lrint>:
    5aa0:	da df       	rcall	.-76     	; 0x5a56 <__fp_splitA>
    5aa2:	a8 f1       	brcs	.+106    	; 0x5b0e <lrint+0x6e>
    5aa4:	9e 57       	subi	r25, 0x7E	; 126
    5aa6:	a8 f1       	brcs	.+106    	; 0x5b12 <lrint+0x72>
    5aa8:	98 51       	subi	r25, 0x18	; 24
    5aaa:	60 f0       	brcs	.+24     	; 0x5ac4 <lrint+0x24>
    5aac:	39 f1       	breq	.+78     	; 0x5afc <lrint+0x5c>
    5aae:	98 30       	cpi	r25, 0x08	; 8
    5ab0:	70 f5       	brcc	.+92     	; 0x5b0e <lrint+0x6e>
    5ab2:	09 2e       	mov	r0, r25
    5ab4:	99 27       	eor	r25, r25
    5ab6:	66 0f       	add	r22, r22
    5ab8:	77 1f       	adc	r23, r23
    5aba:	88 1f       	adc	r24, r24
    5abc:	99 1f       	adc	r25, r25
    5abe:	0a 94       	dec	r0
    5ac0:	d1 f7       	brne	.-12     	; 0x5ab6 <lrint+0x16>
    5ac2:	1c c0       	rjmp	.+56     	; 0x5afc <lrint+0x5c>
    5ac4:	bb 27       	eor	r27, r27
    5ac6:	99 3f       	cpi	r25, 0xF9	; 249
    5ac8:	4c f4       	brge	.+18     	; 0x5adc <lrint+0x3c>
    5aca:	b1 11       	cpse	r27, r1
    5acc:	b1 e0       	ldi	r27, 0x01	; 1
    5ace:	b6 2b       	or	r27, r22
    5ad0:	67 2f       	mov	r22, r23
    5ad2:	78 2f       	mov	r23, r24
    5ad4:	88 27       	eor	r24, r24
    5ad6:	98 5f       	subi	r25, 0xF8	; 248
    5ad8:	b1 f7       	brne	.-20     	; 0x5ac6 <lrint+0x26>
    5ada:	08 c0       	rjmp	.+16     	; 0x5aec <lrint+0x4c>
    5adc:	86 95       	lsr	r24
    5ade:	77 95       	ror	r23
    5ae0:	67 95       	ror	r22
    5ae2:	b7 95       	ror	r27
    5ae4:	08 f4       	brcc	.+2      	; 0x5ae8 <lrint+0x48>
    5ae6:	b1 60       	ori	r27, 0x01	; 1
    5ae8:	93 95       	inc	r25
    5aea:	c1 f7       	brne	.-16     	; 0x5adc <lrint+0x3c>
    5aec:	bb 0f       	add	r27, r27
    5aee:	30 f4       	brcc	.+12     	; 0x5afc <lrint+0x5c>
    5af0:	11 f4       	brne	.+4      	; 0x5af6 <lrint+0x56>
    5af2:	60 ff       	sbrs	r22, 0
    5af4:	03 c0       	rjmp	.+6      	; 0x5afc <lrint+0x5c>
    5af6:	6f 5f       	subi	r22, 0xFF	; 255
    5af8:	7f 4f       	sbci	r23, 0xFF	; 255
    5afa:	8f 4f       	sbci	r24, 0xFF	; 255
    5afc:	3e f4       	brtc	.+14     	; 0x5b0c <lrint+0x6c>
    5afe:	90 95       	com	r25
    5b00:	80 95       	com	r24
    5b02:	70 95       	com	r23
    5b04:	61 95       	neg	r22
    5b06:	7f 4f       	sbci	r23, 0xFF	; 255
    5b08:	8f 4f       	sbci	r24, 0xFF	; 255
    5b0a:	9f 4f       	sbci	r25, 0xFF	; 255
    5b0c:	08 95       	ret
    5b0e:	68 94       	set
    5b10:	bd cf       	rjmp	.-134    	; 0x5a8c <__fp_szero>
    5b12:	bb cf       	rjmp	.-138    	; 0x5a8a <__fp_zero>

00005b14 <__mulsf3>:
    5b14:	0b d0       	rcall	.+22     	; 0x5b2c <__mulsf3x>
    5b16:	86 cf       	rjmp	.-244    	; 0x5a24 <__fp_round>
    5b18:	77 df       	rcall	.-274    	; 0x5a08 <__fp_pscA>
    5b1a:	28 f0       	brcs	.+10     	; 0x5b26 <__mulsf3+0x12>
    5b1c:	7c df       	rcall	.-264    	; 0x5a16 <__fp_pscB>
    5b1e:	18 f0       	brcs	.+6      	; 0x5b26 <__mulsf3+0x12>
    5b20:	95 23       	and	r25, r21
    5b22:	09 f0       	breq	.+2      	; 0x5b26 <__mulsf3+0x12>
    5b24:	68 cf       	rjmp	.-304    	; 0x59f6 <__fp_inf>
    5b26:	6d cf       	rjmp	.-294    	; 0x5a02 <__fp_nan>
    5b28:	11 24       	eor	r1, r1
    5b2a:	b0 cf       	rjmp	.-160    	; 0x5a8c <__fp_szero>

00005b2c <__mulsf3x>:
    5b2c:	8c df       	rcall	.-232    	; 0x5a46 <__fp_split3>
    5b2e:	a0 f3       	brcs	.-24     	; 0x5b18 <__mulsf3+0x4>

00005b30 <__mulsf3_pse>:
    5b30:	95 9f       	mul	r25, r21
    5b32:	d1 f3       	breq	.-12     	; 0x5b28 <__mulsf3+0x14>
    5b34:	95 0f       	add	r25, r21
    5b36:	50 e0       	ldi	r21, 0x00	; 0
    5b38:	55 1f       	adc	r21, r21
    5b3a:	62 9f       	mul	r22, r18
    5b3c:	f0 01       	movw	r30, r0
    5b3e:	72 9f       	mul	r23, r18
    5b40:	bb 27       	eor	r27, r27
    5b42:	f0 0d       	add	r31, r0
    5b44:	b1 1d       	adc	r27, r1
    5b46:	63 9f       	mul	r22, r19
    5b48:	aa 27       	eor	r26, r26
    5b4a:	f0 0d       	add	r31, r0
    5b4c:	b1 1d       	adc	r27, r1
    5b4e:	aa 1f       	adc	r26, r26
    5b50:	64 9f       	mul	r22, r20
    5b52:	66 27       	eor	r22, r22
    5b54:	b0 0d       	add	r27, r0
    5b56:	a1 1d       	adc	r26, r1
    5b58:	66 1f       	adc	r22, r22
    5b5a:	82 9f       	mul	r24, r18
    5b5c:	22 27       	eor	r18, r18
    5b5e:	b0 0d       	add	r27, r0
    5b60:	a1 1d       	adc	r26, r1
    5b62:	62 1f       	adc	r22, r18
    5b64:	73 9f       	mul	r23, r19
    5b66:	b0 0d       	add	r27, r0
    5b68:	a1 1d       	adc	r26, r1
    5b6a:	62 1f       	adc	r22, r18
    5b6c:	83 9f       	mul	r24, r19
    5b6e:	a0 0d       	add	r26, r0
    5b70:	61 1d       	adc	r22, r1
    5b72:	22 1f       	adc	r18, r18
    5b74:	74 9f       	mul	r23, r20
    5b76:	33 27       	eor	r19, r19
    5b78:	a0 0d       	add	r26, r0
    5b7a:	61 1d       	adc	r22, r1
    5b7c:	23 1f       	adc	r18, r19
    5b7e:	84 9f       	mul	r24, r20
    5b80:	60 0d       	add	r22, r0
    5b82:	21 1d       	adc	r18, r1
    5b84:	82 2f       	mov	r24, r18
    5b86:	76 2f       	mov	r23, r22
    5b88:	6a 2f       	mov	r22, r26
    5b8a:	11 24       	eor	r1, r1
    5b8c:	9f 57       	subi	r25, 0x7F	; 127
    5b8e:	50 40       	sbci	r21, 0x00	; 0
    5b90:	8a f0       	brmi	.+34     	; 0x5bb4 <__mulsf3_pse+0x84>
    5b92:	e1 f0       	breq	.+56     	; 0x5bcc <__mulsf3_pse+0x9c>
    5b94:	88 23       	and	r24, r24
    5b96:	4a f0       	brmi	.+18     	; 0x5baa <__mulsf3_pse+0x7a>
    5b98:	ee 0f       	add	r30, r30
    5b9a:	ff 1f       	adc	r31, r31
    5b9c:	bb 1f       	adc	r27, r27
    5b9e:	66 1f       	adc	r22, r22
    5ba0:	77 1f       	adc	r23, r23
    5ba2:	88 1f       	adc	r24, r24
    5ba4:	91 50       	subi	r25, 0x01	; 1
    5ba6:	50 40       	sbci	r21, 0x00	; 0
    5ba8:	a9 f7       	brne	.-22     	; 0x5b94 <__mulsf3_pse+0x64>
    5baa:	9e 3f       	cpi	r25, 0xFE	; 254
    5bac:	51 05       	cpc	r21, r1
    5bae:	70 f0       	brcs	.+28     	; 0x5bcc <__mulsf3_pse+0x9c>
    5bb0:	22 cf       	rjmp	.-444    	; 0x59f6 <__fp_inf>
    5bb2:	6c cf       	rjmp	.-296    	; 0x5a8c <__fp_szero>
    5bb4:	5f 3f       	cpi	r21, 0xFF	; 255
    5bb6:	ec f3       	brlt	.-6      	; 0x5bb2 <__mulsf3_pse+0x82>
    5bb8:	98 3e       	cpi	r25, 0xE8	; 232
    5bba:	dc f3       	brlt	.-10     	; 0x5bb2 <__mulsf3_pse+0x82>
    5bbc:	86 95       	lsr	r24
    5bbe:	77 95       	ror	r23
    5bc0:	67 95       	ror	r22
    5bc2:	b7 95       	ror	r27
    5bc4:	f7 95       	ror	r31
    5bc6:	e7 95       	ror	r30
    5bc8:	9f 5f       	subi	r25, 0xFF	; 255
    5bca:	c1 f7       	brne	.-16     	; 0x5bbc <__mulsf3_pse+0x8c>
    5bcc:	fe 2b       	or	r31, r30
    5bce:	88 0f       	add	r24, r24
    5bd0:	91 1d       	adc	r25, r1
    5bd2:	96 95       	lsr	r25
    5bd4:	87 95       	ror	r24
    5bd6:	97 f9       	bld	r25, 7
    5bd8:	08 95       	ret

00005bda <pow>:
    5bda:	fa 01       	movw	r30, r20
    5bdc:	ee 0f       	add	r30, r30
    5bde:	ff 1f       	adc	r31, r31
    5be0:	30 96       	adiw	r30, 0x00	; 0
    5be2:	21 05       	cpc	r18, r1
    5be4:	31 05       	cpc	r19, r1
    5be6:	99 f1       	breq	.+102    	; 0x5c4e <pow+0x74>
    5be8:	61 15       	cp	r22, r1
    5bea:	71 05       	cpc	r23, r1
    5bec:	61 f4       	brne	.+24     	; 0x5c06 <pow+0x2c>
    5bee:	80 38       	cpi	r24, 0x80	; 128
    5bf0:	bf e3       	ldi	r27, 0x3F	; 63
    5bf2:	9b 07       	cpc	r25, r27
    5bf4:	49 f1       	breq	.+82     	; 0x5c48 <pow+0x6e>
    5bf6:	68 94       	set
    5bf8:	90 38       	cpi	r25, 0x80	; 128
    5bfa:	81 05       	cpc	r24, r1
    5bfc:	61 f0       	breq	.+24     	; 0x5c16 <pow+0x3c>
    5bfe:	80 38       	cpi	r24, 0x80	; 128
    5c00:	bf ef       	ldi	r27, 0xFF	; 255
    5c02:	9b 07       	cpc	r25, r27
    5c04:	41 f0       	breq	.+16     	; 0x5c16 <pow+0x3c>
    5c06:	99 23       	and	r25, r25
    5c08:	42 f5       	brpl	.+80     	; 0x5c5a <pow+0x80>
    5c0a:	ff 3f       	cpi	r31, 0xFF	; 255
    5c0c:	e1 05       	cpc	r30, r1
    5c0e:	31 05       	cpc	r19, r1
    5c10:	21 05       	cpc	r18, r1
    5c12:	11 f1       	breq	.+68     	; 0x5c58 <pow+0x7e>
    5c14:	e8 94       	clt
    5c16:	08 94       	sec
    5c18:	e7 95       	ror	r30
    5c1a:	d9 01       	movw	r26, r18
    5c1c:	aa 23       	and	r26, r26
    5c1e:	29 f4       	brne	.+10     	; 0x5c2a <pow+0x50>
    5c20:	ab 2f       	mov	r26, r27
    5c22:	be 2f       	mov	r27, r30
    5c24:	f8 5f       	subi	r31, 0xF8	; 248
    5c26:	d0 f3       	brcs	.-12     	; 0x5c1c <pow+0x42>
    5c28:	10 c0       	rjmp	.+32     	; 0x5c4a <pow+0x70>
    5c2a:	ff 5f       	subi	r31, 0xFF	; 255
    5c2c:	70 f4       	brcc	.+28     	; 0x5c4a <pow+0x70>
    5c2e:	a6 95       	lsr	r26
    5c30:	e0 f7       	brcc	.-8      	; 0x5c2a <pow+0x50>
    5c32:	f7 39       	cpi	r31, 0x97	; 151
    5c34:	50 f0       	brcs	.+20     	; 0x5c4a <pow+0x70>
    5c36:	19 f0       	breq	.+6      	; 0x5c3e <pow+0x64>
    5c38:	ff 3a       	cpi	r31, 0xAF	; 175
    5c3a:	38 f4       	brcc	.+14     	; 0x5c4a <pow+0x70>
    5c3c:	9f 77       	andi	r25, 0x7F	; 127
    5c3e:	9f 93       	push	r25
    5c40:	0c d0       	rcall	.+24     	; 0x5c5a <pow+0x80>
    5c42:	0f 90       	pop	r0
    5c44:	07 fc       	sbrc	r0, 7
    5c46:	90 58       	subi	r25, 0x80	; 128
    5c48:	08 95       	ret
    5c4a:	3e f0       	brts	.+14     	; 0x5c5a <pow+0x80>
    5c4c:	da ce       	rjmp	.-588    	; 0x5a02 <__fp_nan>
    5c4e:	60 e0       	ldi	r22, 0x00	; 0
    5c50:	70 e0       	ldi	r23, 0x00	; 0
    5c52:	80 e8       	ldi	r24, 0x80	; 128
    5c54:	9f e3       	ldi	r25, 0x3F	; 63
    5c56:	08 95       	ret
    5c58:	4f e7       	ldi	r20, 0x7F	; 127
    5c5a:	9f 77       	andi	r25, 0x7F	; 127
    5c5c:	5f 93       	push	r21
    5c5e:	4f 93       	push	r20
    5c60:	3f 93       	push	r19
    5c62:	2f 93       	push	r18
    5c64:	9e d0       	rcall	.+316    	; 0x5da2 <log>
    5c66:	2f 91       	pop	r18
    5c68:	3f 91       	pop	r19
    5c6a:	4f 91       	pop	r20
    5c6c:	5f 91       	pop	r21
    5c6e:	52 df       	rcall	.-348    	; 0x5b14 <__mulsf3>
    5c70:	05 c0       	rjmp	.+10     	; 0x5c7c <exp>
    5c72:	19 f4       	brne	.+6      	; 0x5c7a <pow+0xa0>
    5c74:	0e f0       	brts	.+2      	; 0x5c78 <pow+0x9e>
    5c76:	bf ce       	rjmp	.-642    	; 0x59f6 <__fp_inf>
    5c78:	08 cf       	rjmp	.-496    	; 0x5a8a <__fp_zero>
    5c7a:	c3 ce       	rjmp	.-634    	; 0x5a02 <__fp_nan>

00005c7c <exp>:
    5c7c:	ec de       	rcall	.-552    	; 0x5a56 <__fp_splitA>
    5c7e:	c8 f3       	brcs	.-14     	; 0x5c72 <pow+0x98>
    5c80:	96 38       	cpi	r25, 0x86	; 134
    5c82:	c0 f7       	brcc	.-16     	; 0x5c74 <pow+0x9a>
    5c84:	07 f8       	bld	r0, 7
    5c86:	0f 92       	push	r0
    5c88:	e8 94       	clt
    5c8a:	2b e3       	ldi	r18, 0x3B	; 59
    5c8c:	3a ea       	ldi	r19, 0xAA	; 170
    5c8e:	48 eb       	ldi	r20, 0xB8	; 184
    5c90:	5f e7       	ldi	r21, 0x7F	; 127
    5c92:	4e df       	rcall	.-356    	; 0x5b30 <__mulsf3_pse>
    5c94:	0f 92       	push	r0
    5c96:	0f 92       	push	r0
    5c98:	0f 92       	push	r0
    5c9a:	4d b7       	in	r20, 0x3d	; 61
    5c9c:	5e b7       	in	r21, 0x3e	; 62
    5c9e:	0f 92       	push	r0
    5ca0:	c0 d0       	rcall	.+384    	; 0x5e22 <modf>
    5ca2:	e8 ec       	ldi	r30, 0xC8	; 200
    5ca4:	f0 e0       	ldi	r31, 0x00	; 0
    5ca6:	16 d0       	rcall	.+44     	; 0x5cd4 <__fp_powser>
    5ca8:	4f 91       	pop	r20
    5caa:	5f 91       	pop	r21
    5cac:	ef 91       	pop	r30
    5cae:	ff 91       	pop	r31
    5cb0:	e5 95       	asr	r30
    5cb2:	ee 1f       	adc	r30, r30
    5cb4:	ff 1f       	adc	r31, r31
    5cb6:	49 f0       	breq	.+18     	; 0x5cca <exp+0x4e>
    5cb8:	fe 57       	subi	r31, 0x7E	; 126
    5cba:	e0 68       	ori	r30, 0x80	; 128
    5cbc:	44 27       	eor	r20, r20
    5cbe:	ee 0f       	add	r30, r30
    5cc0:	44 1f       	adc	r20, r20
    5cc2:	fa 95       	dec	r31
    5cc4:	e1 f7       	brne	.-8      	; 0x5cbe <exp+0x42>
    5cc6:	41 95       	neg	r20
    5cc8:	55 0b       	sbc	r21, r21
    5cca:	32 d0       	rcall	.+100    	; 0x5d30 <ldexp>
    5ccc:	0f 90       	pop	r0
    5cce:	07 fe       	sbrs	r0, 7
    5cd0:	26 c0       	rjmp	.+76     	; 0x5d1e <inverse>
    5cd2:	08 95       	ret

00005cd4 <__fp_powser>:
    5cd4:	df 93       	push	r29
    5cd6:	cf 93       	push	r28
    5cd8:	1f 93       	push	r17
    5cda:	0f 93       	push	r16
    5cdc:	ff 92       	push	r15
    5cde:	ef 92       	push	r14
    5ce0:	df 92       	push	r13
    5ce2:	7b 01       	movw	r14, r22
    5ce4:	8c 01       	movw	r16, r24
    5ce6:	68 94       	set
    5ce8:	05 c0       	rjmp	.+10     	; 0x5cf4 <__fp_powser+0x20>
    5cea:	da 2e       	mov	r13, r26
    5cec:	ef 01       	movw	r28, r30
    5cee:	1e df       	rcall	.-452    	; 0x5b2c <__mulsf3x>
    5cf0:	fe 01       	movw	r30, r28
    5cf2:	e8 94       	clt
    5cf4:	a5 91       	lpm	r26, Z+
    5cf6:	25 91       	lpm	r18, Z+
    5cf8:	35 91       	lpm	r19, Z+
    5cfa:	45 91       	lpm	r20, Z+
    5cfc:	55 91       	lpm	r21, Z+
    5cfe:	ae f3       	brts	.-22     	; 0x5cea <__fp_powser+0x16>
    5d00:	ef 01       	movw	r28, r30
    5d02:	28 dd       	rcall	.-1456   	; 0x5754 <__addsf3x>
    5d04:	fe 01       	movw	r30, r28
    5d06:	97 01       	movw	r18, r14
    5d08:	a8 01       	movw	r20, r16
    5d0a:	da 94       	dec	r13
    5d0c:	79 f7       	brne	.-34     	; 0x5cec <__fp_powser+0x18>
    5d0e:	df 90       	pop	r13
    5d10:	ef 90       	pop	r14
    5d12:	ff 90       	pop	r15
    5d14:	0f 91       	pop	r16
    5d16:	1f 91       	pop	r17
    5d18:	cf 91       	pop	r28
    5d1a:	df 91       	pop	r29
    5d1c:	08 95       	ret

00005d1e <inverse>:
    5d1e:	9b 01       	movw	r18, r22
    5d20:	ac 01       	movw	r20, r24
    5d22:	60 e0       	ldi	r22, 0x00	; 0
    5d24:	70 e0       	ldi	r23, 0x00	; 0
    5d26:	80 e8       	ldi	r24, 0x80	; 128
    5d28:	9f e3       	ldi	r25, 0x3F	; 63
    5d2a:	6b cd       	rjmp	.-1322   	; 0x5802 <__divsf3>
    5d2c:	64 ce       	rjmp	.-824    	; 0x59f6 <__fp_inf>
    5d2e:	ac c0       	rjmp	.+344    	; 0x5e88 <__fp_mpack>

00005d30 <ldexp>:
    5d30:	92 de       	rcall	.-732    	; 0x5a56 <__fp_splitA>
    5d32:	e8 f3       	brcs	.-6      	; 0x5d2e <inverse+0x10>
    5d34:	99 23       	and	r25, r25
    5d36:	d9 f3       	breq	.-10     	; 0x5d2e <inverse+0x10>
    5d38:	94 0f       	add	r25, r20
    5d3a:	51 1d       	adc	r21, r1
    5d3c:	bb f3       	brvs	.-18     	; 0x5d2c <inverse+0xe>
    5d3e:	91 50       	subi	r25, 0x01	; 1
    5d40:	50 40       	sbci	r21, 0x00	; 0
    5d42:	94 f0       	brlt	.+36     	; 0x5d68 <ldexp+0x38>
    5d44:	59 f0       	breq	.+22     	; 0x5d5c <ldexp+0x2c>
    5d46:	88 23       	and	r24, r24
    5d48:	32 f0       	brmi	.+12     	; 0x5d56 <ldexp+0x26>
    5d4a:	66 0f       	add	r22, r22
    5d4c:	77 1f       	adc	r23, r23
    5d4e:	88 1f       	adc	r24, r24
    5d50:	91 50       	subi	r25, 0x01	; 1
    5d52:	50 40       	sbci	r21, 0x00	; 0
    5d54:	c1 f7       	brne	.-16     	; 0x5d46 <ldexp+0x16>
    5d56:	9e 3f       	cpi	r25, 0xFE	; 254
    5d58:	51 05       	cpc	r21, r1
    5d5a:	44 f7       	brge	.-48     	; 0x5d2c <inverse+0xe>
    5d5c:	88 0f       	add	r24, r24
    5d5e:	91 1d       	adc	r25, r1
    5d60:	96 95       	lsr	r25
    5d62:	87 95       	ror	r24
    5d64:	97 f9       	bld	r25, 7
    5d66:	08 95       	ret
    5d68:	5f 3f       	cpi	r21, 0xFF	; 255
    5d6a:	ac f0       	brlt	.+42     	; 0x5d96 <ldexp+0x66>
    5d6c:	98 3e       	cpi	r25, 0xE8	; 232
    5d6e:	9c f0       	brlt	.+38     	; 0x5d96 <ldexp+0x66>
    5d70:	bb 27       	eor	r27, r27
    5d72:	86 95       	lsr	r24
    5d74:	77 95       	ror	r23
    5d76:	67 95       	ror	r22
    5d78:	b7 95       	ror	r27
    5d7a:	08 f4       	brcc	.+2      	; 0x5d7e <ldexp+0x4e>
    5d7c:	b1 60       	ori	r27, 0x01	; 1
    5d7e:	93 95       	inc	r25
    5d80:	c1 f7       	brne	.-16     	; 0x5d72 <ldexp+0x42>
    5d82:	bb 0f       	add	r27, r27
    5d84:	58 f7       	brcc	.-42     	; 0x5d5c <ldexp+0x2c>
    5d86:	11 f4       	brne	.+4      	; 0x5d8c <ldexp+0x5c>
    5d88:	60 ff       	sbrs	r22, 0
    5d8a:	e8 cf       	rjmp	.-48     	; 0x5d5c <ldexp+0x2c>
    5d8c:	6f 5f       	subi	r22, 0xFF	; 255
    5d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d90:	8f 4f       	sbci	r24, 0xFF	; 255
    5d92:	9f 4f       	sbci	r25, 0xFF	; 255
    5d94:	e3 cf       	rjmp	.-58     	; 0x5d5c <ldexp+0x2c>
    5d96:	7a ce       	rjmp	.-780    	; 0x5a8c <__fp_szero>
    5d98:	0e f0       	brts	.+2      	; 0x5d9c <ldexp+0x6c>
    5d9a:	76 c0       	rjmp	.+236    	; 0x5e88 <__fp_mpack>
    5d9c:	32 ce       	rjmp	.-924    	; 0x5a02 <__fp_nan>
    5d9e:	68 94       	set
    5da0:	2a ce       	rjmp	.-940    	; 0x59f6 <__fp_inf>

00005da2 <log>:
    5da2:	59 de       	rcall	.-846    	; 0x5a56 <__fp_splitA>
    5da4:	c8 f3       	brcs	.-14     	; 0x5d98 <ldexp+0x68>
    5da6:	99 23       	and	r25, r25
    5da8:	d1 f3       	breq	.-12     	; 0x5d9e <ldexp+0x6e>
    5daa:	c6 f3       	brts	.-16     	; 0x5d9c <ldexp+0x6c>
    5dac:	df 93       	push	r29
    5dae:	cf 93       	push	r28
    5db0:	1f 93       	push	r17
    5db2:	0f 93       	push	r16
    5db4:	ff 92       	push	r15
    5db6:	c9 2f       	mov	r28, r25
    5db8:	dd 27       	eor	r29, r29
    5dba:	88 23       	and	r24, r24
    5dbc:	2a f0       	brmi	.+10     	; 0x5dc8 <log+0x26>
    5dbe:	21 97       	sbiw	r28, 0x01	; 1
    5dc0:	66 0f       	add	r22, r22
    5dc2:	77 1f       	adc	r23, r23
    5dc4:	88 1f       	adc	r24, r24
    5dc6:	da f7       	brpl	.-10     	; 0x5dbe <log+0x1c>
    5dc8:	20 e0       	ldi	r18, 0x00	; 0
    5dca:	30 e0       	ldi	r19, 0x00	; 0
    5dcc:	40 e8       	ldi	r20, 0x80	; 128
    5dce:	5f eb       	ldi	r21, 0xBF	; 191
    5dd0:	9f e3       	ldi	r25, 0x3F	; 63
    5dd2:	88 39       	cpi	r24, 0x98	; 152
    5dd4:	20 f0       	brcs	.+8      	; 0x5dde <log+0x3c>
    5dd6:	80 3e       	cpi	r24, 0xE0	; 224
    5dd8:	30 f0       	brcs	.+12     	; 0x5de6 <log+0x44>
    5dda:	21 96       	adiw	r28, 0x01	; 1
    5ddc:	8f 77       	andi	r24, 0x7F	; 127
    5dde:	a9 dc       	rcall	.-1710   	; 0x5732 <__addsf3>
    5de0:	e0 ef       	ldi	r30, 0xF0	; 240
    5de2:	f0 e0       	ldi	r31, 0x00	; 0
    5de4:	03 c0       	rjmp	.+6      	; 0x5dec <log+0x4a>
    5de6:	a5 dc       	rcall	.-1718   	; 0x5732 <__addsf3>
    5de8:	ed e1       	ldi	r30, 0x1D	; 29
    5dea:	f1 e0       	ldi	r31, 0x01	; 1
    5dec:	73 df       	rcall	.-282    	; 0x5cd4 <__fp_powser>
    5dee:	8b 01       	movw	r16, r22
    5df0:	be 01       	movw	r22, r28
    5df2:	ec 01       	movw	r28, r24
    5df4:	fb 2e       	mov	r15, r27
    5df6:	6f 57       	subi	r22, 0x7F	; 127
    5df8:	71 09       	sbc	r23, r1
    5dfa:	75 95       	asr	r23
    5dfc:	77 1f       	adc	r23, r23
    5dfe:	88 0b       	sbc	r24, r24
    5e00:	99 0b       	sbc	r25, r25
    5e02:	9a dd       	rcall	.-1228   	; 0x5938 <__floatsisf>
    5e04:	28 e1       	ldi	r18, 0x18	; 24
    5e06:	32 e7       	ldi	r19, 0x72	; 114
    5e08:	41 e3       	ldi	r20, 0x31	; 49
    5e0a:	5f e3       	ldi	r21, 0x3F	; 63
    5e0c:	8f de       	rcall	.-738    	; 0x5b2c <__mulsf3x>
    5e0e:	af 2d       	mov	r26, r15
    5e10:	98 01       	movw	r18, r16
    5e12:	ae 01       	movw	r20, r28
    5e14:	ff 90       	pop	r15
    5e16:	0f 91       	pop	r16
    5e18:	1f 91       	pop	r17
    5e1a:	cf 91       	pop	r28
    5e1c:	df 91       	pop	r29
    5e1e:	9a dc       	rcall	.-1740   	; 0x5754 <__addsf3x>
    5e20:	01 ce       	rjmp	.-1022   	; 0x5a24 <__fp_round>

00005e22 <modf>:
    5e22:	fa 01       	movw	r30, r20
    5e24:	dc 01       	movw	r26, r24
    5e26:	aa 0f       	add	r26, r26
    5e28:	bb 1f       	adc	r27, r27
    5e2a:	9b 01       	movw	r18, r22
    5e2c:	ac 01       	movw	r20, r24
    5e2e:	bf 57       	subi	r27, 0x7F	; 127
    5e30:	28 f4       	brcc	.+10     	; 0x5e3c <modf+0x1a>
    5e32:	22 27       	eor	r18, r18
    5e34:	33 27       	eor	r19, r19
    5e36:	44 27       	eor	r20, r20
    5e38:	50 78       	andi	r21, 0x80	; 128
    5e3a:	1f c0       	rjmp	.+62     	; 0x5e7a <modf+0x58>
    5e3c:	b7 51       	subi	r27, 0x17	; 23
    5e3e:	88 f4       	brcc	.+34     	; 0x5e62 <modf+0x40>
    5e40:	ab 2f       	mov	r26, r27
    5e42:	00 24       	eor	r0, r0
    5e44:	46 95       	lsr	r20
    5e46:	37 95       	ror	r19
    5e48:	27 95       	ror	r18
    5e4a:	01 1c       	adc	r0, r1
    5e4c:	a3 95       	inc	r26
    5e4e:	d2 f3       	brmi	.-12     	; 0x5e44 <modf+0x22>
    5e50:	00 20       	and	r0, r0
    5e52:	69 f0       	breq	.+26     	; 0x5e6e <modf+0x4c>
    5e54:	22 0f       	add	r18, r18
    5e56:	33 1f       	adc	r19, r19
    5e58:	44 1f       	adc	r20, r20
    5e5a:	b3 95       	inc	r27
    5e5c:	da f3       	brmi	.-10     	; 0x5e54 <modf+0x32>
    5e5e:	0d d0       	rcall	.+26     	; 0x5e7a <modf+0x58>
    5e60:	67 cc       	rjmp	.-1842   	; 0x5730 <__subsf3>
    5e62:	61 30       	cpi	r22, 0x01	; 1
    5e64:	71 05       	cpc	r23, r1
    5e66:	a0 e8       	ldi	r26, 0x80	; 128
    5e68:	8a 07       	cpc	r24, r26
    5e6a:	b9 46       	sbci	r27, 0x69	; 105
    5e6c:	30 f4       	brcc	.+12     	; 0x5e7a <modf+0x58>
    5e6e:	9b 01       	movw	r18, r22
    5e70:	ac 01       	movw	r20, r24
    5e72:	66 27       	eor	r22, r22
    5e74:	77 27       	eor	r23, r23
    5e76:	88 27       	eor	r24, r24
    5e78:	90 78       	andi	r25, 0x80	; 128
    5e7a:	30 96       	adiw	r30, 0x00	; 0
    5e7c:	21 f0       	breq	.+8      	; 0x5e86 <modf+0x64>
    5e7e:	20 83       	st	Z, r18
    5e80:	31 83       	std	Z+1, r19	; 0x01
    5e82:	42 83       	std	Z+2, r20	; 0x02
    5e84:	53 83       	std	Z+3, r21	; 0x03
    5e86:	08 95       	ret

00005e88 <__fp_mpack>:
    5e88:	9f 3f       	cpi	r25, 0xFF	; 255
    5e8a:	31 f0       	breq	.+12     	; 0x5e98 <__fp_mpack_finite+0xc>

00005e8c <__fp_mpack_finite>:
    5e8c:	91 50       	subi	r25, 0x01	; 1
    5e8e:	20 f4       	brcc	.+8      	; 0x5e98 <__fp_mpack_finite+0xc>
    5e90:	87 95       	ror	r24
    5e92:	77 95       	ror	r23
    5e94:	67 95       	ror	r22
    5e96:	b7 95       	ror	r27
    5e98:	88 0f       	add	r24, r24
    5e9a:	91 1d       	adc	r25, r1
    5e9c:	96 95       	lsr	r25
    5e9e:	87 95       	ror	r24
    5ea0:	97 f9       	bld	r25, 7
    5ea2:	08 95       	ret

00005ea4 <vfprintf>:
    5ea4:	a1 e1       	ldi	r26, 0x11	; 17
    5ea6:	b0 e0       	ldi	r27, 0x00	; 0
    5ea8:	e7 e5       	ldi	r30, 0x57	; 87
    5eaa:	ff e2       	ldi	r31, 0x2F	; 47
    5eac:	b7 c3       	rjmp	.+1902   	; 0x661c <__prologue_saves__>
    5eae:	3c 01       	movw	r6, r24
    5eb0:	7f 87       	std	Y+15, r23	; 0x0f
    5eb2:	6e 87       	std	Y+14, r22	; 0x0e
    5eb4:	6a 01       	movw	r12, r20
    5eb6:	fc 01       	movw	r30, r24
    5eb8:	17 82       	std	Z+7, r1	; 0x07
    5eba:	16 82       	std	Z+6, r1	; 0x06
    5ebc:	83 81       	ldd	r24, Z+3	; 0x03
    5ebe:	81 fd       	sbrc	r24, 1
    5ec0:	03 c0       	rjmp	.+6      	; 0x5ec8 <vfprintf+0x24>
    5ec2:	6f ef       	ldi	r22, 0xFF	; 255
    5ec4:	7f ef       	ldi	r23, 0xFF	; 255
    5ec6:	52 c3       	rjmp	.+1700   	; 0x656c <vfprintf+0x6c8>
    5ec8:	9e 01       	movw	r18, r28
    5eca:	2f 5f       	subi	r18, 0xFF	; 255
    5ecc:	3f 4f       	sbci	r19, 0xFF	; 255
    5ece:	39 8b       	std	Y+17, r19	; 0x11
    5ed0:	28 8b       	std	Y+16, r18	; 0x10
    5ed2:	f3 01       	movw	r30, r6
    5ed4:	23 81       	ldd	r18, Z+3	; 0x03
    5ed6:	ee 85       	ldd	r30, Y+14	; 0x0e
    5ed8:	ff 85       	ldd	r31, Y+15	; 0x0f
    5eda:	23 fd       	sbrc	r18, 3
    5edc:	85 91       	lpm	r24, Z+
    5ede:	23 ff       	sbrs	r18, 3
    5ee0:	81 91       	ld	r24, Z+
    5ee2:	ff 87       	std	Y+15, r31	; 0x0f
    5ee4:	ee 87       	std	Y+14, r30	; 0x0e
    5ee6:	88 23       	and	r24, r24
    5ee8:	09 f4       	brne	.+2      	; 0x5eec <vfprintf+0x48>
    5eea:	3d c3       	rjmp	.+1658   	; 0x6566 <vfprintf+0x6c2>
    5eec:	85 32       	cpi	r24, 0x25	; 37
    5eee:	51 f4       	brne	.+20     	; 0x5f04 <vfprintf+0x60>
    5ef0:	ee 85       	ldd	r30, Y+14	; 0x0e
    5ef2:	ff 85       	ldd	r31, Y+15	; 0x0f
    5ef4:	23 fd       	sbrc	r18, 3
    5ef6:	85 91       	lpm	r24, Z+
    5ef8:	23 ff       	sbrs	r18, 3
    5efa:	81 91       	ld	r24, Z+
    5efc:	ff 87       	std	Y+15, r31	; 0x0f
    5efe:	ee 87       	std	Y+14, r30	; 0x0e
    5f00:	85 32       	cpi	r24, 0x25	; 37
    5f02:	21 f4       	brne	.+8      	; 0x5f0c <vfprintf+0x68>
    5f04:	90 e0       	ldi	r25, 0x00	; 0
    5f06:	b3 01       	movw	r22, r6
    5f08:	20 d6       	rcall	.+3136   	; 0x6b4a <fputc>
    5f0a:	e3 cf       	rjmp	.-58     	; 0x5ed2 <vfprintf+0x2e>
    5f0c:	98 2f       	mov	r25, r24
    5f0e:	10 e0       	ldi	r17, 0x00	; 0
    5f10:	88 24       	eor	r8, r8
    5f12:	99 24       	eor	r9, r9
    5f14:	10 32       	cpi	r17, 0x20	; 32
    5f16:	b0 f4       	brcc	.+44     	; 0x5f44 <vfprintf+0xa0>
    5f18:	9b 32       	cpi	r25, 0x2B	; 43
    5f1a:	69 f0       	breq	.+26     	; 0x5f36 <vfprintf+0x92>
    5f1c:	9c 32       	cpi	r25, 0x2C	; 44
    5f1e:	28 f4       	brcc	.+10     	; 0x5f2a <vfprintf+0x86>
    5f20:	90 32       	cpi	r25, 0x20	; 32
    5f22:	51 f0       	breq	.+20     	; 0x5f38 <vfprintf+0x94>
    5f24:	93 32       	cpi	r25, 0x23	; 35
    5f26:	71 f4       	brne	.+28     	; 0x5f44 <vfprintf+0xa0>
    5f28:	0b c0       	rjmp	.+22     	; 0x5f40 <vfprintf+0x9c>
    5f2a:	9d 32       	cpi	r25, 0x2D	; 45
    5f2c:	39 f0       	breq	.+14     	; 0x5f3c <vfprintf+0x98>
    5f2e:	90 33       	cpi	r25, 0x30	; 48
    5f30:	49 f4       	brne	.+18     	; 0x5f44 <vfprintf+0xa0>
    5f32:	11 60       	ori	r17, 0x01	; 1
    5f34:	28 c0       	rjmp	.+80     	; 0x5f86 <vfprintf+0xe2>
    5f36:	12 60       	ori	r17, 0x02	; 2
    5f38:	14 60       	ori	r17, 0x04	; 4
    5f3a:	25 c0       	rjmp	.+74     	; 0x5f86 <vfprintf+0xe2>
    5f3c:	18 60       	ori	r17, 0x08	; 8
    5f3e:	23 c0       	rjmp	.+70     	; 0x5f86 <vfprintf+0xe2>
    5f40:	10 61       	ori	r17, 0x10	; 16
    5f42:	21 c0       	rjmp	.+66     	; 0x5f86 <vfprintf+0xe2>
    5f44:	17 fd       	sbrc	r17, 7
    5f46:	2a c0       	rjmp	.+84     	; 0x5f9c <vfprintf+0xf8>
    5f48:	89 2f       	mov	r24, r25
    5f4a:	80 53       	subi	r24, 0x30	; 48
    5f4c:	8a 30       	cpi	r24, 0x0A	; 10
    5f4e:	78 f4       	brcc	.+30     	; 0x5f6e <vfprintf+0xca>
    5f50:	16 ff       	sbrs	r17, 6
    5f52:	06 c0       	rjmp	.+12     	; 0x5f60 <vfprintf+0xbc>
    5f54:	fa e0       	ldi	r31, 0x0A	; 10
    5f56:	9f 9e       	mul	r9, r31
    5f58:	90 2c       	mov	r9, r0
    5f5a:	11 24       	eor	r1, r1
    5f5c:	98 0e       	add	r9, r24
    5f5e:	13 c0       	rjmp	.+38     	; 0x5f86 <vfprintf+0xe2>
    5f60:	3a e0       	ldi	r19, 0x0A	; 10
    5f62:	83 9e       	mul	r8, r19
    5f64:	80 2c       	mov	r8, r0
    5f66:	11 24       	eor	r1, r1
    5f68:	88 0e       	add	r8, r24
    5f6a:	10 62       	ori	r17, 0x20	; 32
    5f6c:	0c c0       	rjmp	.+24     	; 0x5f86 <vfprintf+0xe2>
    5f6e:	9e 32       	cpi	r25, 0x2E	; 46
    5f70:	21 f4       	brne	.+8      	; 0x5f7a <vfprintf+0xd6>
    5f72:	16 fd       	sbrc	r17, 6
    5f74:	f8 c2       	rjmp	.+1520   	; 0x6566 <vfprintf+0x6c2>
    5f76:	10 64       	ori	r17, 0x40	; 64
    5f78:	06 c0       	rjmp	.+12     	; 0x5f86 <vfprintf+0xe2>
    5f7a:	9c 36       	cpi	r25, 0x6C	; 108
    5f7c:	11 f4       	brne	.+4      	; 0x5f82 <vfprintf+0xde>
    5f7e:	10 68       	ori	r17, 0x80	; 128
    5f80:	02 c0       	rjmp	.+4      	; 0x5f86 <vfprintf+0xe2>
    5f82:	98 36       	cpi	r25, 0x68	; 104
    5f84:	59 f4       	brne	.+22     	; 0x5f9c <vfprintf+0xf8>
    5f86:	ee 85       	ldd	r30, Y+14	; 0x0e
    5f88:	ff 85       	ldd	r31, Y+15	; 0x0f
    5f8a:	23 fd       	sbrc	r18, 3
    5f8c:	95 91       	lpm	r25, Z+
    5f8e:	23 ff       	sbrs	r18, 3
    5f90:	91 91       	ld	r25, Z+
    5f92:	ff 87       	std	Y+15, r31	; 0x0f
    5f94:	ee 87       	std	Y+14, r30	; 0x0e
    5f96:	99 23       	and	r25, r25
    5f98:	09 f0       	breq	.+2      	; 0x5f9c <vfprintf+0xf8>
    5f9a:	bc cf       	rjmp	.-136    	; 0x5f14 <vfprintf+0x70>
    5f9c:	89 2f       	mov	r24, r25
    5f9e:	85 54       	subi	r24, 0x45	; 69
    5fa0:	83 30       	cpi	r24, 0x03	; 3
    5fa2:	20 f4       	brcc	.+8      	; 0x5fac <vfprintf+0x108>
    5fa4:	81 2f       	mov	r24, r17
    5fa6:	80 61       	ori	r24, 0x10	; 16
    5fa8:	90 5e       	subi	r25, 0xE0	; 224
    5faa:	07 c0       	rjmp	.+14     	; 0x5fba <vfprintf+0x116>
    5fac:	89 2f       	mov	r24, r25
    5fae:	85 56       	subi	r24, 0x65	; 101
    5fb0:	83 30       	cpi	r24, 0x03	; 3
    5fb2:	08 f0       	brcs	.+2      	; 0x5fb6 <vfprintf+0x112>
    5fb4:	8f c1       	rjmp	.+798    	; 0x62d4 <vfprintf+0x430>
    5fb6:	81 2f       	mov	r24, r17
    5fb8:	8f 7e       	andi	r24, 0xEF	; 239
    5fba:	86 fd       	sbrc	r24, 6
    5fbc:	02 c0       	rjmp	.+4      	; 0x5fc2 <vfprintf+0x11e>
    5fbe:	76 e0       	ldi	r23, 0x06	; 6
    5fc0:	97 2e       	mov	r9, r23
    5fc2:	6f e3       	ldi	r22, 0x3F	; 63
    5fc4:	f6 2e       	mov	r15, r22
    5fc6:	f8 22       	and	r15, r24
    5fc8:	95 36       	cpi	r25, 0x65	; 101
    5fca:	19 f4       	brne	.+6      	; 0x5fd2 <vfprintf+0x12e>
    5fcc:	f0 e4       	ldi	r31, 0x40	; 64
    5fce:	ff 2a       	or	r15, r31
    5fd0:	07 c0       	rjmp	.+14     	; 0x5fe0 <vfprintf+0x13c>
    5fd2:	96 36       	cpi	r25, 0x66	; 102
    5fd4:	19 f4       	brne	.+6      	; 0x5fdc <vfprintf+0x138>
    5fd6:	20 e8       	ldi	r18, 0x80	; 128
    5fd8:	f2 2a       	or	r15, r18
    5fda:	02 c0       	rjmp	.+4      	; 0x5fe0 <vfprintf+0x13c>
    5fdc:	91 10       	cpse	r9, r1
    5fde:	9a 94       	dec	r9
    5fe0:	f7 fe       	sbrs	r15, 7
    5fe2:	0a c0       	rjmp	.+20     	; 0x5ff8 <vfprintf+0x154>
    5fe4:	3b e3       	ldi	r19, 0x3B	; 59
    5fe6:	39 15       	cp	r19, r9
    5fe8:	18 f4       	brcc	.+6      	; 0x5ff0 <vfprintf+0x14c>
    5fea:	5c e3       	ldi	r21, 0x3C	; 60
    5fec:	b5 2e       	mov	r11, r21
    5fee:	02 c0       	rjmp	.+4      	; 0x5ff4 <vfprintf+0x150>
    5ff0:	b9 2c       	mov	r11, r9
    5ff2:	b3 94       	inc	r11
    5ff4:	27 e0       	ldi	r18, 0x07	; 7
    5ff6:	09 c0       	rjmp	.+18     	; 0x600a <vfprintf+0x166>
    5ff8:	47 e0       	ldi	r20, 0x07	; 7
    5ffa:	49 15       	cp	r20, r9
    5ffc:	20 f4       	brcc	.+8      	; 0x6006 <vfprintf+0x162>
    5ffe:	bb 24       	eor	r11, r11
    6000:	47 e0       	ldi	r20, 0x07	; 7
    6002:	94 2e       	mov	r9, r20
    6004:	f7 cf       	rjmp	.-18     	; 0x5ff4 <vfprintf+0x150>
    6006:	29 2d       	mov	r18, r9
    6008:	bb 24       	eor	r11, r11
    600a:	c6 01       	movw	r24, r12
    600c:	04 96       	adiw	r24, 0x04	; 4
    600e:	9d 87       	std	Y+13, r25	; 0x0d
    6010:	8c 87       	std	Y+12, r24	; 0x0c
    6012:	f6 01       	movw	r30, r12
    6014:	60 81       	ld	r22, Z
    6016:	71 81       	ldd	r23, Z+1	; 0x01
    6018:	82 81       	ldd	r24, Z+2	; 0x02
    601a:	93 81       	ldd	r25, Z+3	; 0x03
    601c:	ae 01       	movw	r20, r28
    601e:	4f 5f       	subi	r20, 0xFF	; 255
    6020:	5f 4f       	sbci	r21, 0xFF	; 255
    6022:	0b 2d       	mov	r16, r11
    6024:	a4 d4       	rcall	.+2376   	; 0x696e <__ftoa_engine>
    6026:	6c 01       	movw	r12, r24
    6028:	09 81       	ldd	r16, Y+1	; 0x01
    602a:	20 2e       	mov	r2, r16
    602c:	33 24       	eor	r3, r3
    602e:	00 ff       	sbrs	r16, 0
    6030:	04 c0       	rjmp	.+8      	; 0x603a <vfprintf+0x196>
    6032:	03 fd       	sbrc	r16, 3
    6034:	02 c0       	rjmp	.+4      	; 0x603a <vfprintf+0x196>
    6036:	1d e2       	ldi	r17, 0x2D	; 45
    6038:	09 c0       	rjmp	.+18     	; 0x604c <vfprintf+0x1a8>
    603a:	f1 fe       	sbrs	r15, 1
    603c:	02 c0       	rjmp	.+4      	; 0x6042 <vfprintf+0x19e>
    603e:	1b e2       	ldi	r17, 0x2B	; 43
    6040:	05 c0       	rjmp	.+10     	; 0x604c <vfprintf+0x1a8>
    6042:	f2 fc       	sbrc	r15, 2
    6044:	02 c0       	rjmp	.+4      	; 0x604a <vfprintf+0x1a6>
    6046:	10 e0       	ldi	r17, 0x00	; 0
    6048:	01 c0       	rjmp	.+2      	; 0x604c <vfprintf+0x1a8>
    604a:	10 e2       	ldi	r17, 0x20	; 32
    604c:	c1 01       	movw	r24, r2
    604e:	8c 70       	andi	r24, 0x0C	; 12
    6050:	90 70       	andi	r25, 0x00	; 0
    6052:	89 2b       	or	r24, r25
    6054:	a1 f1       	breq	.+104    	; 0x60be <vfprintf+0x21a>
    6056:	11 23       	and	r17, r17
    6058:	11 f4       	brne	.+4      	; 0x605e <vfprintf+0x1ba>
    605a:	83 e0       	ldi	r24, 0x03	; 3
    605c:	01 c0       	rjmp	.+2      	; 0x6060 <vfprintf+0x1bc>
    605e:	84 e0       	ldi	r24, 0x04	; 4
    6060:	88 15       	cp	r24, r8
    6062:	10 f0       	brcs	.+4      	; 0x6068 <vfprintf+0x1c4>
    6064:	88 24       	eor	r8, r8
    6066:	09 c0       	rjmp	.+18     	; 0x607a <vfprintf+0x1d6>
    6068:	88 1a       	sub	r8, r24
    606a:	f3 fc       	sbrc	r15, 3
    606c:	06 c0       	rjmp	.+12     	; 0x607a <vfprintf+0x1d6>
    606e:	80 e2       	ldi	r24, 0x20	; 32
    6070:	90 e0       	ldi	r25, 0x00	; 0
    6072:	b3 01       	movw	r22, r6
    6074:	6a d5       	rcall	.+2772   	; 0x6b4a <fputc>
    6076:	8a 94       	dec	r8
    6078:	d1 f7       	brne	.-12     	; 0x606e <vfprintf+0x1ca>
    607a:	11 23       	and	r17, r17
    607c:	21 f0       	breq	.+8      	; 0x6086 <vfprintf+0x1e2>
    607e:	81 2f       	mov	r24, r17
    6080:	90 e0       	ldi	r25, 0x00	; 0
    6082:	b3 01       	movw	r22, r6
    6084:	62 d5       	rcall	.+2756   	; 0x6b4a <fputc>
    6086:	23 fe       	sbrs	r2, 3
    6088:	03 c0       	rjmp	.+6      	; 0x6090 <vfprintf+0x1ec>
    608a:	0f e5       	ldi	r16, 0x5F	; 95
    608c:	15 e0       	ldi	r17, 0x05	; 5
    608e:	0d c0       	rjmp	.+26     	; 0x60aa <vfprintf+0x206>
    6090:	03 e6       	ldi	r16, 0x63	; 99
    6092:	15 e0       	ldi	r17, 0x05	; 5
    6094:	0a c0       	rjmp	.+20     	; 0x60aa <vfprintf+0x206>
    6096:	e1 14       	cp	r14, r1
    6098:	f1 04       	cpc	r15, r1
    609a:	09 f0       	breq	.+2      	; 0x609e <vfprintf+0x1fa>
    609c:	80 52       	subi	r24, 0x20	; 32
    609e:	90 e0       	ldi	r25, 0x00	; 0
    60a0:	b3 01       	movw	r22, r6
    60a2:	53 d5       	rcall	.+2726   	; 0x6b4a <fputc>
    60a4:	0f 5f       	subi	r16, 0xFF	; 255
    60a6:	1f 4f       	sbci	r17, 0xFF	; 255
    60a8:	05 c0       	rjmp	.+10     	; 0x60b4 <vfprintf+0x210>
    60aa:	ef 2c       	mov	r14, r15
    60ac:	ff 24       	eor	r15, r15
    60ae:	f0 e1       	ldi	r31, 0x10	; 16
    60b0:	ef 22       	and	r14, r31
    60b2:	ff 24       	eor	r15, r15
    60b4:	f8 01       	movw	r30, r16
    60b6:	84 91       	lpm	r24, Z+
    60b8:	88 23       	and	r24, r24
    60ba:	69 f7       	brne	.-38     	; 0x6096 <vfprintf+0x1f2>
    60bc:	08 c1       	rjmp	.+528    	; 0x62ce <vfprintf+0x42a>
    60be:	f7 fe       	sbrs	r15, 7
    60c0:	12 c0       	rjmp	.+36     	; 0x60e6 <vfprintf+0x242>
    60c2:	bc 0c       	add	r11, r12
    60c4:	24 fe       	sbrs	r2, 4
    60c6:	04 c0       	rjmp	.+8      	; 0x60d0 <vfprintf+0x22c>
    60c8:	8a 81       	ldd	r24, Y+2	; 0x02
    60ca:	81 33       	cpi	r24, 0x31	; 49
    60cc:	09 f4       	brne	.+2      	; 0x60d0 <vfprintf+0x22c>
    60ce:	ba 94       	dec	r11
    60d0:	1b 14       	cp	r1, r11
    60d2:	1c f0       	brlt	.+6      	; 0x60da <vfprintf+0x236>
    60d4:	bb 24       	eor	r11, r11
    60d6:	b3 94       	inc	r11
    60d8:	2d c0       	rjmp	.+90     	; 0x6134 <vfprintf+0x290>
    60da:	f8 e0       	ldi	r31, 0x08	; 8
    60dc:	fb 15       	cp	r31, r11
    60de:	50 f5       	brcc	.+84     	; 0x6134 <vfprintf+0x290>
    60e0:	38 e0       	ldi	r19, 0x08	; 8
    60e2:	b3 2e       	mov	r11, r19
    60e4:	27 c0       	rjmp	.+78     	; 0x6134 <vfprintf+0x290>
    60e6:	f6 fc       	sbrc	r15, 6
    60e8:	25 c0       	rjmp	.+74     	; 0x6134 <vfprintf+0x290>
    60ea:	89 2d       	mov	r24, r9
    60ec:	90 e0       	ldi	r25, 0x00	; 0
    60ee:	8c 15       	cp	r24, r12
    60f0:	9d 05       	cpc	r25, r13
    60f2:	4c f0       	brlt	.+18     	; 0x6106 <vfprintf+0x262>
    60f4:	2c ef       	ldi	r18, 0xFC	; 252
    60f6:	c2 16       	cp	r12, r18
    60f8:	2f ef       	ldi	r18, 0xFF	; 255
    60fa:	d2 06       	cpc	r13, r18
    60fc:	24 f0       	brlt	.+8      	; 0x6106 <vfprintf+0x262>
    60fe:	30 e8       	ldi	r19, 0x80	; 128
    6100:	f3 2a       	or	r15, r19
    6102:	01 c0       	rjmp	.+2      	; 0x6106 <vfprintf+0x262>
    6104:	9a 94       	dec	r9
    6106:	99 20       	and	r9, r9
    6108:	49 f0       	breq	.+18     	; 0x611c <vfprintf+0x278>
    610a:	e2 e0       	ldi	r30, 0x02	; 2
    610c:	f0 e0       	ldi	r31, 0x00	; 0
    610e:	ec 0f       	add	r30, r28
    6110:	fd 1f       	adc	r31, r29
    6112:	e9 0d       	add	r30, r9
    6114:	f1 1d       	adc	r31, r1
    6116:	80 81       	ld	r24, Z
    6118:	80 33       	cpi	r24, 0x30	; 48
    611a:	a1 f3       	breq	.-24     	; 0x6104 <vfprintf+0x260>
    611c:	f7 fe       	sbrs	r15, 7
    611e:	0a c0       	rjmp	.+20     	; 0x6134 <vfprintf+0x290>
    6120:	b9 2c       	mov	r11, r9
    6122:	b3 94       	inc	r11
    6124:	89 2d       	mov	r24, r9
    6126:	90 e0       	ldi	r25, 0x00	; 0
    6128:	c8 16       	cp	r12, r24
    612a:	d9 06       	cpc	r13, r25
    612c:	14 f0       	brlt	.+4      	; 0x6132 <vfprintf+0x28e>
    612e:	99 24       	eor	r9, r9
    6130:	01 c0       	rjmp	.+2      	; 0x6134 <vfprintf+0x290>
    6132:	9c 18       	sub	r9, r12
    6134:	f7 fc       	sbrc	r15, 7
    6136:	03 c0       	rjmp	.+6      	; 0x613e <vfprintf+0x29a>
    6138:	25 e0       	ldi	r18, 0x05	; 5
    613a:	30 e0       	ldi	r19, 0x00	; 0
    613c:	09 c0       	rjmp	.+18     	; 0x6150 <vfprintf+0x2ac>
    613e:	1c 14       	cp	r1, r12
    6140:	1d 04       	cpc	r1, r13
    6142:	1c f0       	brlt	.+6      	; 0x614a <vfprintf+0x2a6>
    6144:	21 e0       	ldi	r18, 0x01	; 1
    6146:	30 e0       	ldi	r19, 0x00	; 0
    6148:	03 c0       	rjmp	.+6      	; 0x6150 <vfprintf+0x2ac>
    614a:	96 01       	movw	r18, r12
    614c:	2f 5f       	subi	r18, 0xFF	; 255
    614e:	3f 4f       	sbci	r19, 0xFF	; 255
    6150:	11 23       	and	r17, r17
    6152:	11 f0       	breq	.+4      	; 0x6158 <vfprintf+0x2b4>
    6154:	2f 5f       	subi	r18, 0xFF	; 255
    6156:	3f 4f       	sbci	r19, 0xFF	; 255
    6158:	99 20       	and	r9, r9
    615a:	29 f0       	breq	.+10     	; 0x6166 <vfprintf+0x2c2>
    615c:	89 2d       	mov	r24, r9
    615e:	90 e0       	ldi	r25, 0x00	; 0
    6160:	01 96       	adiw	r24, 0x01	; 1
    6162:	28 0f       	add	r18, r24
    6164:	39 1f       	adc	r19, r25
    6166:	88 2d       	mov	r24, r8
    6168:	90 e0       	ldi	r25, 0x00	; 0
    616a:	28 17       	cp	r18, r24
    616c:	39 07       	cpc	r19, r25
    616e:	14 f0       	brlt	.+4      	; 0x6174 <vfprintf+0x2d0>
    6170:	88 24       	eor	r8, r8
    6172:	01 c0       	rjmp	.+2      	; 0x6176 <vfprintf+0x2d2>
    6174:	82 1a       	sub	r8, r18
    6176:	4f 2c       	mov	r4, r15
    6178:	55 24       	eor	r5, r5
    617a:	c2 01       	movw	r24, r4
    617c:	89 70       	andi	r24, 0x09	; 9
    617e:	90 70       	andi	r25, 0x00	; 0
    6180:	89 2b       	or	r24, r25
    6182:	31 f0       	breq	.+12     	; 0x6190 <vfprintf+0x2ec>
    6184:	07 c0       	rjmp	.+14     	; 0x6194 <vfprintf+0x2f0>
    6186:	80 e2       	ldi	r24, 0x20	; 32
    6188:	90 e0       	ldi	r25, 0x00	; 0
    618a:	b3 01       	movw	r22, r6
    618c:	de d4       	rcall	.+2492   	; 0x6b4a <fputc>
    618e:	8a 94       	dec	r8
    6190:	88 20       	and	r8, r8
    6192:	c9 f7       	brne	.-14     	; 0x6186 <vfprintf+0x2e2>
    6194:	11 23       	and	r17, r17
    6196:	21 f0       	breq	.+8      	; 0x61a0 <vfprintf+0x2fc>
    6198:	81 2f       	mov	r24, r17
    619a:	90 e0       	ldi	r25, 0x00	; 0
    619c:	b3 01       	movw	r22, r6
    619e:	d5 d4       	rcall	.+2474   	; 0x6b4a <fputc>
    61a0:	43 fe       	sbrs	r4, 3
    61a2:	06 c0       	rjmp	.+12     	; 0x61b0 <vfprintf+0x30c>
    61a4:	07 c0       	rjmp	.+14     	; 0x61b4 <vfprintf+0x310>
    61a6:	80 e3       	ldi	r24, 0x30	; 48
    61a8:	90 e0       	ldi	r25, 0x00	; 0
    61aa:	b3 01       	movw	r22, r6
    61ac:	ce d4       	rcall	.+2460   	; 0x6b4a <fputc>
    61ae:	8a 94       	dec	r8
    61b0:	88 20       	and	r8, r8
    61b2:	c9 f7       	brne	.-14     	; 0x61a6 <vfprintf+0x302>
    61b4:	f7 fe       	sbrs	r15, 7
    61b6:	44 c0       	rjmp	.+136    	; 0x6240 <vfprintf+0x39c>
    61b8:	86 01       	movw	r16, r12
    61ba:	d7 fe       	sbrs	r13, 7
    61bc:	02 c0       	rjmp	.+4      	; 0x61c2 <vfprintf+0x31e>
    61be:	00 e0       	ldi	r16, 0x00	; 0
    61c0:	10 e0       	ldi	r17, 0x00	; 0
    61c2:	76 01       	movw	r14, r12
    61c4:	08 94       	sec
    61c6:	e1 1c       	adc	r14, r1
    61c8:	f1 1c       	adc	r15, r1
    61ca:	e0 1a       	sub	r14, r16
    61cc:	f1 0a       	sbc	r15, r17
    61ce:	41 e0       	ldi	r20, 0x01	; 1
    61d0:	50 e0       	ldi	r21, 0x00	; 0
    61d2:	4c 0f       	add	r20, r28
    61d4:	5d 1f       	adc	r21, r29
    61d6:	e4 0e       	add	r14, r20
    61d8:	f5 1e       	adc	r15, r21
    61da:	26 01       	movw	r4, r12
    61dc:	4b 18       	sub	r4, r11
    61de:	51 08       	sbc	r5, r1
    61e0:	89 2d       	mov	r24, r9
    61e2:	90 e0       	ldi	r25, 0x00	; 0
    61e4:	aa 24       	eor	r10, r10
    61e6:	bb 24       	eor	r11, r11
    61e8:	a8 1a       	sub	r10, r24
    61ea:	b9 0a       	sbc	r11, r25
    61ec:	5f ef       	ldi	r21, 0xFF	; 255
    61ee:	0f 3f       	cpi	r16, 0xFF	; 255
    61f0:	15 07       	cpc	r17, r21
    61f2:	21 f4       	brne	.+8      	; 0x61fc <vfprintf+0x358>
    61f4:	8e e2       	ldi	r24, 0x2E	; 46
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	b3 01       	movw	r22, r6
    61fa:	a7 d4       	rcall	.+2382   	; 0x6b4a <fputc>
    61fc:	c0 16       	cp	r12, r16
    61fe:	d1 06       	cpc	r13, r17
    6200:	34 f0       	brlt	.+12     	; 0x620e <vfprintf+0x36a>
    6202:	40 16       	cp	r4, r16
    6204:	51 06       	cpc	r5, r17
    6206:	1c f4       	brge	.+6      	; 0x620e <vfprintf+0x36a>
    6208:	f7 01       	movw	r30, r14
    620a:	80 81       	ld	r24, Z
    620c:	01 c0       	rjmp	.+2      	; 0x6210 <vfprintf+0x36c>
    620e:	80 e3       	ldi	r24, 0x30	; 48
    6210:	01 50       	subi	r16, 0x01	; 1
    6212:	10 40       	sbci	r17, 0x00	; 0
    6214:	08 94       	sec
    6216:	e1 1c       	adc	r14, r1
    6218:	f1 1c       	adc	r15, r1
    621a:	0a 15       	cp	r16, r10
    621c:	1b 05       	cpc	r17, r11
    621e:	24 f0       	brlt	.+8      	; 0x6228 <vfprintf+0x384>
    6220:	90 e0       	ldi	r25, 0x00	; 0
    6222:	b3 01       	movw	r22, r6
    6224:	92 d4       	rcall	.+2340   	; 0x6b4a <fputc>
    6226:	e2 cf       	rjmp	.-60     	; 0x61ec <vfprintf+0x348>
    6228:	0c 15       	cp	r16, r12
    622a:	1d 05       	cpc	r17, r13
    622c:	39 f4       	brne	.+14     	; 0x623c <vfprintf+0x398>
    622e:	9a 81       	ldd	r25, Y+2	; 0x02
    6230:	96 33       	cpi	r25, 0x36	; 54
    6232:	18 f4       	brcc	.+6      	; 0x623a <vfprintf+0x396>
    6234:	95 33       	cpi	r25, 0x35	; 53
    6236:	11 f4       	brne	.+4      	; 0x623c <vfprintf+0x398>
    6238:	24 fe       	sbrs	r2, 4
    623a:	81 e3       	ldi	r24, 0x31	; 49
    623c:	90 e0       	ldi	r25, 0x00	; 0
    623e:	45 c0       	rjmp	.+138    	; 0x62ca <vfprintf+0x426>
    6240:	8a 81       	ldd	r24, Y+2	; 0x02
    6242:	81 33       	cpi	r24, 0x31	; 49
    6244:	09 f0       	breq	.+2      	; 0x6248 <vfprintf+0x3a4>
    6246:	0f 7e       	andi	r16, 0xEF	; 239
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	b3 01       	movw	r22, r6
    624c:	7e d4       	rcall	.+2300   	; 0x6b4a <fputc>
    624e:	99 20       	and	r9, r9
    6250:	91 f0       	breq	.+36     	; 0x6276 <vfprintf+0x3d2>
    6252:	8e e2       	ldi	r24, 0x2E	; 46
    6254:	90 e0       	ldi	r25, 0x00	; 0
    6256:	b3 01       	movw	r22, r6
    6258:	78 d4       	rcall	.+2288   	; 0x6b4a <fputc>
    625a:	12 e0       	ldi	r17, 0x02	; 2
    625c:	e1 e0       	ldi	r30, 0x01	; 1
    625e:	f0 e0       	ldi	r31, 0x00	; 0
    6260:	ec 0f       	add	r30, r28
    6262:	fd 1f       	adc	r31, r29
    6264:	e1 0f       	add	r30, r17
    6266:	f1 1d       	adc	r31, r1
    6268:	1f 5f       	subi	r17, 0xFF	; 255
    626a:	80 81       	ld	r24, Z
    626c:	90 e0       	ldi	r25, 0x00	; 0
    626e:	b3 01       	movw	r22, r6
    6270:	6c d4       	rcall	.+2264   	; 0x6b4a <fputc>
    6272:	9a 94       	dec	r9
    6274:	99 f7       	brne	.-26     	; 0x625c <vfprintf+0x3b8>
    6276:	44 fc       	sbrc	r4, 4
    6278:	03 c0       	rjmp	.+6      	; 0x6280 <vfprintf+0x3dc>
    627a:	85 e6       	ldi	r24, 0x65	; 101
    627c:	90 e0       	ldi	r25, 0x00	; 0
    627e:	02 c0       	rjmp	.+4      	; 0x6284 <vfprintf+0x3e0>
    6280:	85 e4       	ldi	r24, 0x45	; 69
    6282:	90 e0       	ldi	r25, 0x00	; 0
    6284:	b3 01       	movw	r22, r6
    6286:	61 d4       	rcall	.+2242   	; 0x6b4a <fputc>
    6288:	d7 fc       	sbrc	r13, 7
    628a:	05 c0       	rjmp	.+10     	; 0x6296 <vfprintf+0x3f2>
    628c:	c1 14       	cp	r12, r1
    628e:	d1 04       	cpc	r13, r1
    6290:	41 f4       	brne	.+16     	; 0x62a2 <vfprintf+0x3fe>
    6292:	04 ff       	sbrs	r16, 4
    6294:	06 c0       	rjmp	.+12     	; 0x62a2 <vfprintf+0x3fe>
    6296:	d0 94       	com	r13
    6298:	c1 94       	neg	r12
    629a:	d1 08       	sbc	r13, r1
    629c:	d3 94       	inc	r13
    629e:	8d e2       	ldi	r24, 0x2D	; 45
    62a0:	01 c0       	rjmp	.+2      	; 0x62a4 <vfprintf+0x400>
    62a2:	8b e2       	ldi	r24, 0x2B	; 43
    62a4:	90 e0       	ldi	r25, 0x00	; 0
    62a6:	b3 01       	movw	r22, r6
    62a8:	50 d4       	rcall	.+2208   	; 0x6b4a <fputc>
    62aa:	80 e3       	ldi	r24, 0x30	; 48
    62ac:	05 c0       	rjmp	.+10     	; 0x62b8 <vfprintf+0x414>
    62ae:	8f 5f       	subi	r24, 0xFF	; 255
    62b0:	26 ef       	ldi	r18, 0xF6	; 246
    62b2:	3f ef       	ldi	r19, 0xFF	; 255
    62b4:	c2 0e       	add	r12, r18
    62b6:	d3 1e       	adc	r13, r19
    62b8:	3a e0       	ldi	r19, 0x0A	; 10
    62ba:	c3 16       	cp	r12, r19
    62bc:	d1 04       	cpc	r13, r1
    62be:	bc f7       	brge	.-18     	; 0x62ae <vfprintf+0x40a>
    62c0:	90 e0       	ldi	r25, 0x00	; 0
    62c2:	b3 01       	movw	r22, r6
    62c4:	42 d4       	rcall	.+2180   	; 0x6b4a <fputc>
    62c6:	c6 01       	movw	r24, r12
    62c8:	c0 96       	adiw	r24, 0x30	; 48
    62ca:	b3 01       	movw	r22, r6
    62cc:	3e d4       	rcall	.+2172   	; 0x6b4a <fputc>
    62ce:	cc 84       	ldd	r12, Y+12	; 0x0c
    62d0:	dd 84       	ldd	r13, Y+13	; 0x0d
    62d2:	46 c1       	rjmp	.+652    	; 0x6560 <vfprintf+0x6bc>
    62d4:	93 36       	cpi	r25, 0x63	; 99
    62d6:	31 f0       	breq	.+12     	; 0x62e4 <vfprintf+0x440>
    62d8:	93 37       	cpi	r25, 0x73	; 115
    62da:	99 f0       	breq	.+38     	; 0x6302 <vfprintf+0x45e>
    62dc:	93 35       	cpi	r25, 0x53	; 83
    62de:	09 f0       	breq	.+2      	; 0x62e2 <vfprintf+0x43e>
    62e0:	55 c0       	rjmp	.+170    	; 0x638c <vfprintf+0x4e8>
    62e2:	22 c0       	rjmp	.+68     	; 0x6328 <vfprintf+0x484>
    62e4:	f6 01       	movw	r30, r12
    62e6:	80 81       	ld	r24, Z
    62e8:	89 83       	std	Y+1, r24	; 0x01
    62ea:	5e 01       	movw	r10, r28
    62ec:	08 94       	sec
    62ee:	a1 1c       	adc	r10, r1
    62f0:	b1 1c       	adc	r11, r1
    62f2:	22 e0       	ldi	r18, 0x02	; 2
    62f4:	30 e0       	ldi	r19, 0x00	; 0
    62f6:	c2 0e       	add	r12, r18
    62f8:	d3 1e       	adc	r13, r19
    62fa:	21 e0       	ldi	r18, 0x01	; 1
    62fc:	e2 2e       	mov	r14, r18
    62fe:	f1 2c       	mov	r15, r1
    6300:	11 c0       	rjmp	.+34     	; 0x6324 <vfprintf+0x480>
    6302:	f6 01       	movw	r30, r12
    6304:	a0 80       	ld	r10, Z
    6306:	b1 80       	ldd	r11, Z+1	; 0x01
    6308:	16 fd       	sbrc	r17, 6
    630a:	03 c0       	rjmp	.+6      	; 0x6312 <vfprintf+0x46e>
    630c:	6f ef       	ldi	r22, 0xFF	; 255
    630e:	7f ef       	ldi	r23, 0xFF	; 255
    6310:	02 c0       	rjmp	.+4      	; 0x6316 <vfprintf+0x472>
    6312:	69 2d       	mov	r22, r9
    6314:	70 e0       	ldi	r23, 0x00	; 0
    6316:	22 e0       	ldi	r18, 0x02	; 2
    6318:	30 e0       	ldi	r19, 0x00	; 0
    631a:	c2 0e       	add	r12, r18
    631c:	d3 1e       	adc	r13, r19
    631e:	c5 01       	movw	r24, r10
    6320:	09 d4       	rcall	.+2066   	; 0x6b34 <strnlen>
    6322:	7c 01       	movw	r14, r24
    6324:	1f 77       	andi	r17, 0x7F	; 127
    6326:	12 c0       	rjmp	.+36     	; 0x634c <vfprintf+0x4a8>
    6328:	f6 01       	movw	r30, r12
    632a:	a0 80       	ld	r10, Z
    632c:	b1 80       	ldd	r11, Z+1	; 0x01
    632e:	16 fd       	sbrc	r17, 6
    6330:	03 c0       	rjmp	.+6      	; 0x6338 <vfprintf+0x494>
    6332:	6f ef       	ldi	r22, 0xFF	; 255
    6334:	7f ef       	ldi	r23, 0xFF	; 255
    6336:	02 c0       	rjmp	.+4      	; 0x633c <vfprintf+0x498>
    6338:	69 2d       	mov	r22, r9
    633a:	70 e0       	ldi	r23, 0x00	; 0
    633c:	22 e0       	ldi	r18, 0x02	; 2
    633e:	30 e0       	ldi	r19, 0x00	; 0
    6340:	c2 0e       	add	r12, r18
    6342:	d3 1e       	adc	r13, r19
    6344:	c5 01       	movw	r24, r10
    6346:	eb d3       	rcall	.+2006   	; 0x6b1e <strnlen_P>
    6348:	7c 01       	movw	r14, r24
    634a:	10 68       	ori	r17, 0x80	; 128
    634c:	13 ff       	sbrs	r17, 3
    634e:	06 c0       	rjmp	.+12     	; 0x635c <vfprintf+0x4b8>
    6350:	19 c0       	rjmp	.+50     	; 0x6384 <vfprintf+0x4e0>
    6352:	80 e2       	ldi	r24, 0x20	; 32
    6354:	90 e0       	ldi	r25, 0x00	; 0
    6356:	b3 01       	movw	r22, r6
    6358:	f8 d3       	rcall	.+2032   	; 0x6b4a <fputc>
    635a:	8a 94       	dec	r8
    635c:	88 2d       	mov	r24, r8
    635e:	90 e0       	ldi	r25, 0x00	; 0
    6360:	e8 16       	cp	r14, r24
    6362:	f9 06       	cpc	r15, r25
    6364:	b0 f3       	brcs	.-20     	; 0x6352 <vfprintf+0x4ae>
    6366:	0e c0       	rjmp	.+28     	; 0x6384 <vfprintf+0x4e0>
    6368:	f5 01       	movw	r30, r10
    636a:	17 fd       	sbrc	r17, 7
    636c:	85 91       	lpm	r24, Z+
    636e:	17 ff       	sbrs	r17, 7
    6370:	81 91       	ld	r24, Z+
    6372:	5f 01       	movw	r10, r30
    6374:	90 e0       	ldi	r25, 0x00	; 0
    6376:	b3 01       	movw	r22, r6
    6378:	e8 d3       	rcall	.+2000   	; 0x6b4a <fputc>
    637a:	81 10       	cpse	r8, r1
    637c:	8a 94       	dec	r8
    637e:	08 94       	sec
    6380:	e1 08       	sbc	r14, r1
    6382:	f1 08       	sbc	r15, r1
    6384:	e1 14       	cp	r14, r1
    6386:	f1 04       	cpc	r15, r1
    6388:	79 f7       	brne	.-34     	; 0x6368 <vfprintf+0x4c4>
    638a:	ea c0       	rjmp	.+468    	; 0x6560 <vfprintf+0x6bc>
    638c:	94 36       	cpi	r25, 0x64	; 100
    638e:	11 f0       	breq	.+4      	; 0x6394 <vfprintf+0x4f0>
    6390:	99 36       	cpi	r25, 0x69	; 105
    6392:	81 f5       	brne	.+96     	; 0x63f4 <vfprintf+0x550>
    6394:	17 ff       	sbrs	r17, 7
    6396:	08 c0       	rjmp	.+16     	; 0x63a8 <vfprintf+0x504>
    6398:	f6 01       	movw	r30, r12
    639a:	20 81       	ld	r18, Z
    639c:	31 81       	ldd	r19, Z+1	; 0x01
    639e:	42 81       	ldd	r20, Z+2	; 0x02
    63a0:	53 81       	ldd	r21, Z+3	; 0x03
    63a2:	84 e0       	ldi	r24, 0x04	; 4
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	0a c0       	rjmp	.+20     	; 0x63bc <vfprintf+0x518>
    63a8:	f6 01       	movw	r30, r12
    63aa:	80 81       	ld	r24, Z
    63ac:	91 81       	ldd	r25, Z+1	; 0x01
    63ae:	9c 01       	movw	r18, r24
    63b0:	44 27       	eor	r20, r20
    63b2:	37 fd       	sbrc	r19, 7
    63b4:	40 95       	com	r20
    63b6:	54 2f       	mov	r21, r20
    63b8:	82 e0       	ldi	r24, 0x02	; 2
    63ba:	90 e0       	ldi	r25, 0x00	; 0
    63bc:	c8 0e       	add	r12, r24
    63be:	d9 1e       	adc	r13, r25
    63c0:	9f e6       	ldi	r25, 0x6F	; 111
    63c2:	f9 2e       	mov	r15, r25
    63c4:	f1 22       	and	r15, r17
    63c6:	57 ff       	sbrs	r21, 7
    63c8:	09 c0       	rjmp	.+18     	; 0x63dc <vfprintf+0x538>
    63ca:	50 95       	com	r21
    63cc:	40 95       	com	r20
    63ce:	30 95       	com	r19
    63d0:	21 95       	neg	r18
    63d2:	3f 4f       	sbci	r19, 0xFF	; 255
    63d4:	4f 4f       	sbci	r20, 0xFF	; 255
    63d6:	5f 4f       	sbci	r21, 0xFF	; 255
    63d8:	90 e8       	ldi	r25, 0x80	; 128
    63da:	f9 2a       	or	r15, r25
    63dc:	ca 01       	movw	r24, r20
    63de:	b9 01       	movw	r22, r18
    63e0:	ae 01       	movw	r20, r28
    63e2:	4f 5f       	subi	r20, 0xFF	; 255
    63e4:	5f 4f       	sbci	r21, 0xFF	; 255
    63e6:	2a e0       	ldi	r18, 0x0A	; 10
    63e8:	30 e0       	ldi	r19, 0x00	; 0
    63ea:	22 d4       	rcall	.+2116   	; 0x6c30 <__ultoa_invert>
    63ec:	e8 2e       	mov	r14, r24
    63ee:	e8 89       	ldd	r30, Y+16	; 0x10
    63f0:	ee 1a       	sub	r14, r30
    63f2:	40 c0       	rjmp	.+128    	; 0x6474 <vfprintf+0x5d0>
    63f4:	95 37       	cpi	r25, 0x75	; 117
    63f6:	21 f4       	brne	.+8      	; 0x6400 <vfprintf+0x55c>
    63f8:	1f 7e       	andi	r17, 0xEF	; 239
    63fa:	2a e0       	ldi	r18, 0x0A	; 10
    63fc:	30 e0       	ldi	r19, 0x00	; 0
    63fe:	1c c0       	rjmp	.+56     	; 0x6438 <vfprintf+0x594>
    6400:	19 7f       	andi	r17, 0xF9	; 249
    6402:	9f 36       	cpi	r25, 0x6F	; 111
    6404:	61 f0       	breq	.+24     	; 0x641e <vfprintf+0x57a>
    6406:	90 37       	cpi	r25, 0x70	; 112
    6408:	20 f4       	brcc	.+8      	; 0x6412 <vfprintf+0x56e>
    640a:	98 35       	cpi	r25, 0x58	; 88
    640c:	09 f0       	breq	.+2      	; 0x6410 <vfprintf+0x56c>
    640e:	ab c0       	rjmp	.+342    	; 0x6566 <vfprintf+0x6c2>
    6410:	0f c0       	rjmp	.+30     	; 0x6430 <vfprintf+0x58c>
    6412:	90 37       	cpi	r25, 0x70	; 112
    6414:	39 f0       	breq	.+14     	; 0x6424 <vfprintf+0x580>
    6416:	98 37       	cpi	r25, 0x78	; 120
    6418:	09 f0       	breq	.+2      	; 0x641c <vfprintf+0x578>
    641a:	a5 c0       	rjmp	.+330    	; 0x6566 <vfprintf+0x6c2>
    641c:	04 c0       	rjmp	.+8      	; 0x6426 <vfprintf+0x582>
    641e:	28 e0       	ldi	r18, 0x08	; 8
    6420:	30 e0       	ldi	r19, 0x00	; 0
    6422:	0a c0       	rjmp	.+20     	; 0x6438 <vfprintf+0x594>
    6424:	10 61       	ori	r17, 0x10	; 16
    6426:	14 fd       	sbrc	r17, 4
    6428:	14 60       	ori	r17, 0x04	; 4
    642a:	20 e1       	ldi	r18, 0x10	; 16
    642c:	30 e0       	ldi	r19, 0x00	; 0
    642e:	04 c0       	rjmp	.+8      	; 0x6438 <vfprintf+0x594>
    6430:	14 fd       	sbrc	r17, 4
    6432:	16 60       	ori	r17, 0x06	; 6
    6434:	20 e1       	ldi	r18, 0x10	; 16
    6436:	32 e0       	ldi	r19, 0x02	; 2
    6438:	17 ff       	sbrs	r17, 7
    643a:	08 c0       	rjmp	.+16     	; 0x644c <vfprintf+0x5a8>
    643c:	f6 01       	movw	r30, r12
    643e:	60 81       	ld	r22, Z
    6440:	71 81       	ldd	r23, Z+1	; 0x01
    6442:	82 81       	ldd	r24, Z+2	; 0x02
    6444:	93 81       	ldd	r25, Z+3	; 0x03
    6446:	44 e0       	ldi	r20, 0x04	; 4
    6448:	50 e0       	ldi	r21, 0x00	; 0
    644a:	08 c0       	rjmp	.+16     	; 0x645c <vfprintf+0x5b8>
    644c:	f6 01       	movw	r30, r12
    644e:	80 81       	ld	r24, Z
    6450:	91 81       	ldd	r25, Z+1	; 0x01
    6452:	bc 01       	movw	r22, r24
    6454:	80 e0       	ldi	r24, 0x00	; 0
    6456:	90 e0       	ldi	r25, 0x00	; 0
    6458:	42 e0       	ldi	r20, 0x02	; 2
    645a:	50 e0       	ldi	r21, 0x00	; 0
    645c:	c4 0e       	add	r12, r20
    645e:	d5 1e       	adc	r13, r21
    6460:	ae 01       	movw	r20, r28
    6462:	4f 5f       	subi	r20, 0xFF	; 255
    6464:	5f 4f       	sbci	r21, 0xFF	; 255
    6466:	e4 d3       	rcall	.+1992   	; 0x6c30 <__ultoa_invert>
    6468:	e8 2e       	mov	r14, r24
    646a:	58 89       	ldd	r21, Y+16	; 0x10
    646c:	e5 1a       	sub	r14, r21
    646e:	8f e7       	ldi	r24, 0x7F	; 127
    6470:	f8 2e       	mov	r15, r24
    6472:	f1 22       	and	r15, r17
    6474:	f6 fe       	sbrs	r15, 6
    6476:	0b c0       	rjmp	.+22     	; 0x648e <vfprintf+0x5ea>
    6478:	8e ef       	ldi	r24, 0xFE	; 254
    647a:	f8 22       	and	r15, r24
    647c:	e9 14       	cp	r14, r9
    647e:	38 f4       	brcc	.+14     	; 0x648e <vfprintf+0x5ea>
    6480:	f4 fe       	sbrs	r15, 4
    6482:	07 c0       	rjmp	.+14     	; 0x6492 <vfprintf+0x5ee>
    6484:	f2 fc       	sbrc	r15, 2
    6486:	05 c0       	rjmp	.+10     	; 0x6492 <vfprintf+0x5ee>
    6488:	9f ee       	ldi	r25, 0xEF	; 239
    648a:	f9 22       	and	r15, r25
    648c:	02 c0       	rjmp	.+4      	; 0x6492 <vfprintf+0x5ee>
    648e:	1e 2d       	mov	r17, r14
    6490:	01 c0       	rjmp	.+2      	; 0x6494 <vfprintf+0x5f0>
    6492:	19 2d       	mov	r17, r9
    6494:	f4 fe       	sbrs	r15, 4
    6496:	0d c0       	rjmp	.+26     	; 0x64b2 <vfprintf+0x60e>
    6498:	fe 01       	movw	r30, r28
    649a:	ee 0d       	add	r30, r14
    649c:	f1 1d       	adc	r31, r1
    649e:	80 81       	ld	r24, Z
    64a0:	80 33       	cpi	r24, 0x30	; 48
    64a2:	19 f4       	brne	.+6      	; 0x64aa <vfprintf+0x606>
    64a4:	e9 ee       	ldi	r30, 0xE9	; 233
    64a6:	fe 22       	and	r15, r30
    64a8:	08 c0       	rjmp	.+16     	; 0x64ba <vfprintf+0x616>
    64aa:	1f 5f       	subi	r17, 0xFF	; 255
    64ac:	f2 fe       	sbrs	r15, 2
    64ae:	05 c0       	rjmp	.+10     	; 0x64ba <vfprintf+0x616>
    64b0:	03 c0       	rjmp	.+6      	; 0x64b8 <vfprintf+0x614>
    64b2:	8f 2d       	mov	r24, r15
    64b4:	86 78       	andi	r24, 0x86	; 134
    64b6:	09 f0       	breq	.+2      	; 0x64ba <vfprintf+0x616>
    64b8:	1f 5f       	subi	r17, 0xFF	; 255
    64ba:	0f 2d       	mov	r16, r15
    64bc:	f3 fc       	sbrc	r15, 3
    64be:	13 c0       	rjmp	.+38     	; 0x64e6 <vfprintf+0x642>
    64c0:	f0 fe       	sbrs	r15, 0
    64c2:	0e c0       	rjmp	.+28     	; 0x64e0 <vfprintf+0x63c>
    64c4:	18 15       	cp	r17, r8
    64c6:	10 f0       	brcs	.+4      	; 0x64cc <vfprintf+0x628>
    64c8:	9e 2c       	mov	r9, r14
    64ca:	0a c0       	rjmp	.+20     	; 0x64e0 <vfprintf+0x63c>
    64cc:	9e 2c       	mov	r9, r14
    64ce:	98 0c       	add	r9, r8
    64d0:	91 1a       	sub	r9, r17
    64d2:	18 2d       	mov	r17, r8
    64d4:	05 c0       	rjmp	.+10     	; 0x64e0 <vfprintf+0x63c>
    64d6:	80 e2       	ldi	r24, 0x20	; 32
    64d8:	90 e0       	ldi	r25, 0x00	; 0
    64da:	b3 01       	movw	r22, r6
    64dc:	36 d3       	rcall	.+1644   	; 0x6b4a <fputc>
    64de:	1f 5f       	subi	r17, 0xFF	; 255
    64e0:	18 15       	cp	r17, r8
    64e2:	c8 f3       	brcs	.-14     	; 0x64d6 <vfprintf+0x632>
    64e4:	04 c0       	rjmp	.+8      	; 0x64ee <vfprintf+0x64a>
    64e6:	18 15       	cp	r17, r8
    64e8:	10 f4       	brcc	.+4      	; 0x64ee <vfprintf+0x64a>
    64ea:	81 1a       	sub	r8, r17
    64ec:	01 c0       	rjmp	.+2      	; 0x64f0 <vfprintf+0x64c>
    64ee:	88 24       	eor	r8, r8
    64f0:	04 ff       	sbrs	r16, 4
    64f2:	0e c0       	rjmp	.+28     	; 0x6510 <vfprintf+0x66c>
    64f4:	80 e3       	ldi	r24, 0x30	; 48
    64f6:	90 e0       	ldi	r25, 0x00	; 0
    64f8:	b3 01       	movw	r22, r6
    64fa:	27 d3       	rcall	.+1614   	; 0x6b4a <fputc>
    64fc:	02 ff       	sbrs	r16, 2
    64fe:	1b c0       	rjmp	.+54     	; 0x6536 <vfprintf+0x692>
    6500:	01 fd       	sbrc	r16, 1
    6502:	03 c0       	rjmp	.+6      	; 0x650a <vfprintf+0x666>
    6504:	88 e7       	ldi	r24, 0x78	; 120
    6506:	90 e0       	ldi	r25, 0x00	; 0
    6508:	0e c0       	rjmp	.+28     	; 0x6526 <vfprintf+0x682>
    650a:	88 e5       	ldi	r24, 0x58	; 88
    650c:	90 e0       	ldi	r25, 0x00	; 0
    650e:	0b c0       	rjmp	.+22     	; 0x6526 <vfprintf+0x682>
    6510:	80 2f       	mov	r24, r16
    6512:	86 78       	andi	r24, 0x86	; 134
    6514:	81 f0       	breq	.+32     	; 0x6536 <vfprintf+0x692>
    6516:	01 ff       	sbrs	r16, 1
    6518:	02 c0       	rjmp	.+4      	; 0x651e <vfprintf+0x67a>
    651a:	8b e2       	ldi	r24, 0x2B	; 43
    651c:	01 c0       	rjmp	.+2      	; 0x6520 <vfprintf+0x67c>
    651e:	80 e2       	ldi	r24, 0x20	; 32
    6520:	f7 fc       	sbrc	r15, 7
    6522:	8d e2       	ldi	r24, 0x2D	; 45
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	b3 01       	movw	r22, r6
    6528:	10 d3       	rcall	.+1568   	; 0x6b4a <fputc>
    652a:	05 c0       	rjmp	.+10     	; 0x6536 <vfprintf+0x692>
    652c:	80 e3       	ldi	r24, 0x30	; 48
    652e:	90 e0       	ldi	r25, 0x00	; 0
    6530:	b3 01       	movw	r22, r6
    6532:	0b d3       	rcall	.+1558   	; 0x6b4a <fputc>
    6534:	9a 94       	dec	r9
    6536:	e9 14       	cp	r14, r9
    6538:	c8 f3       	brcs	.-14     	; 0x652c <vfprintf+0x688>
    653a:	ea 94       	dec	r14
    653c:	e1 e0       	ldi	r30, 0x01	; 1
    653e:	f0 e0       	ldi	r31, 0x00	; 0
    6540:	ec 0f       	add	r30, r28
    6542:	fd 1f       	adc	r31, r29
    6544:	ee 0d       	add	r30, r14
    6546:	f1 1d       	adc	r31, r1
    6548:	80 81       	ld	r24, Z
    654a:	90 e0       	ldi	r25, 0x00	; 0
    654c:	b3 01       	movw	r22, r6
    654e:	fd d2       	rcall	.+1530   	; 0x6b4a <fputc>
    6550:	ee 20       	and	r14, r14
    6552:	99 f7       	brne	.-26     	; 0x653a <vfprintf+0x696>
    6554:	05 c0       	rjmp	.+10     	; 0x6560 <vfprintf+0x6bc>
    6556:	80 e2       	ldi	r24, 0x20	; 32
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	b3 01       	movw	r22, r6
    655c:	f6 d2       	rcall	.+1516   	; 0x6b4a <fputc>
    655e:	8a 94       	dec	r8
    6560:	88 20       	and	r8, r8
    6562:	c9 f7       	brne	.-14     	; 0x6556 <vfprintf+0x6b2>
    6564:	b6 cc       	rjmp	.-1684   	; 0x5ed2 <vfprintf+0x2e>
    6566:	f3 01       	movw	r30, r6
    6568:	66 81       	ldd	r22, Z+6	; 0x06
    656a:	77 81       	ldd	r23, Z+7	; 0x07
    656c:	cb 01       	movw	r24, r22
    656e:	61 96       	adiw	r28, 0x11	; 17
    6570:	e2 e1       	ldi	r30, 0x12	; 18
    6572:	70 c0       	rjmp	.+224    	; 0x6654 <__epilogue_restores__>

00006574 <__mulsi3>:
    6574:	62 9f       	mul	r22, r18
    6576:	d0 01       	movw	r26, r0
    6578:	73 9f       	mul	r23, r19
    657a:	f0 01       	movw	r30, r0
    657c:	82 9f       	mul	r24, r18
    657e:	e0 0d       	add	r30, r0
    6580:	f1 1d       	adc	r31, r1
    6582:	64 9f       	mul	r22, r20
    6584:	e0 0d       	add	r30, r0
    6586:	f1 1d       	adc	r31, r1
    6588:	92 9f       	mul	r25, r18
    658a:	f0 0d       	add	r31, r0
    658c:	83 9f       	mul	r24, r19
    658e:	f0 0d       	add	r31, r0
    6590:	74 9f       	mul	r23, r20
    6592:	f0 0d       	add	r31, r0
    6594:	65 9f       	mul	r22, r21
    6596:	f0 0d       	add	r31, r0
    6598:	99 27       	eor	r25, r25
    659a:	72 9f       	mul	r23, r18
    659c:	b0 0d       	add	r27, r0
    659e:	e1 1d       	adc	r30, r1
    65a0:	f9 1f       	adc	r31, r25
    65a2:	63 9f       	mul	r22, r19
    65a4:	b0 0d       	add	r27, r0
    65a6:	e1 1d       	adc	r30, r1
    65a8:	f9 1f       	adc	r31, r25
    65aa:	bd 01       	movw	r22, r26
    65ac:	cf 01       	movw	r24, r30
    65ae:	11 24       	eor	r1, r1
    65b0:	08 95       	ret

000065b2 <__divmodhi4>:
    65b2:	97 fb       	bst	r25, 7
    65b4:	09 2e       	mov	r0, r25
    65b6:	07 26       	eor	r0, r23
    65b8:	0a d0       	rcall	.+20     	; 0x65ce <__divmodhi4_neg1>
    65ba:	77 fd       	sbrc	r23, 7
    65bc:	04 d0       	rcall	.+8      	; 0x65c6 <__divmodhi4_neg2>
    65be:	65 d0       	rcall	.+202    	; 0x668a <__udivmodhi4>
    65c0:	06 d0       	rcall	.+12     	; 0x65ce <__divmodhi4_neg1>
    65c2:	00 20       	and	r0, r0
    65c4:	1a f4       	brpl	.+6      	; 0x65cc <__divmodhi4_exit>

000065c6 <__divmodhi4_neg2>:
    65c6:	70 95       	com	r23
    65c8:	61 95       	neg	r22
    65ca:	7f 4f       	sbci	r23, 0xFF	; 255

000065cc <__divmodhi4_exit>:
    65cc:	08 95       	ret

000065ce <__divmodhi4_neg1>:
    65ce:	f6 f7       	brtc	.-4      	; 0x65cc <__divmodhi4_exit>
    65d0:	90 95       	com	r25
    65d2:	81 95       	neg	r24
    65d4:	9f 4f       	sbci	r25, 0xFF	; 255
    65d6:	08 95       	ret

000065d8 <__udivmodsi4>:
    65d8:	a1 e2       	ldi	r26, 0x21	; 33
    65da:	1a 2e       	mov	r1, r26
    65dc:	aa 1b       	sub	r26, r26
    65de:	bb 1b       	sub	r27, r27
    65e0:	fd 01       	movw	r30, r26
    65e2:	0d c0       	rjmp	.+26     	; 0x65fe <__udivmodsi4_ep>

000065e4 <__udivmodsi4_loop>:
    65e4:	aa 1f       	adc	r26, r26
    65e6:	bb 1f       	adc	r27, r27
    65e8:	ee 1f       	adc	r30, r30
    65ea:	ff 1f       	adc	r31, r31
    65ec:	a2 17       	cp	r26, r18
    65ee:	b3 07       	cpc	r27, r19
    65f0:	e4 07       	cpc	r30, r20
    65f2:	f5 07       	cpc	r31, r21
    65f4:	20 f0       	brcs	.+8      	; 0x65fe <__udivmodsi4_ep>
    65f6:	a2 1b       	sub	r26, r18
    65f8:	b3 0b       	sbc	r27, r19
    65fa:	e4 0b       	sbc	r30, r20
    65fc:	f5 0b       	sbc	r31, r21

000065fe <__udivmodsi4_ep>:
    65fe:	66 1f       	adc	r22, r22
    6600:	77 1f       	adc	r23, r23
    6602:	88 1f       	adc	r24, r24
    6604:	99 1f       	adc	r25, r25
    6606:	1a 94       	dec	r1
    6608:	69 f7       	brne	.-38     	; 0x65e4 <__udivmodsi4_loop>
    660a:	60 95       	com	r22
    660c:	70 95       	com	r23
    660e:	80 95       	com	r24
    6610:	90 95       	com	r25
    6612:	9b 01       	movw	r18, r22
    6614:	ac 01       	movw	r20, r24
    6616:	bd 01       	movw	r22, r26
    6618:	cf 01       	movw	r24, r30
    661a:	08 95       	ret

0000661c <__prologue_saves__>:
    661c:	2f 92       	push	r2
    661e:	3f 92       	push	r3
    6620:	4f 92       	push	r4
    6622:	5f 92       	push	r5
    6624:	6f 92       	push	r6
    6626:	7f 92       	push	r7
    6628:	8f 92       	push	r8
    662a:	9f 92       	push	r9
    662c:	af 92       	push	r10
    662e:	bf 92       	push	r11
    6630:	cf 92       	push	r12
    6632:	df 92       	push	r13
    6634:	ef 92       	push	r14
    6636:	ff 92       	push	r15
    6638:	0f 93       	push	r16
    663a:	1f 93       	push	r17
    663c:	cf 93       	push	r28
    663e:	df 93       	push	r29
    6640:	cd b7       	in	r28, 0x3d	; 61
    6642:	de b7       	in	r29, 0x3e	; 62
    6644:	ca 1b       	sub	r28, r26
    6646:	db 0b       	sbc	r29, r27
    6648:	0f b6       	in	r0, 0x3f	; 63
    664a:	f8 94       	cli
    664c:	de bf       	out	0x3e, r29	; 62
    664e:	0f be       	out	0x3f, r0	; 63
    6650:	cd bf       	out	0x3d, r28	; 61
    6652:	09 94       	ijmp

00006654 <__epilogue_restores__>:
    6654:	2a 88       	ldd	r2, Y+18	; 0x12
    6656:	39 88       	ldd	r3, Y+17	; 0x11
    6658:	48 88       	ldd	r4, Y+16	; 0x10
    665a:	5f 84       	ldd	r5, Y+15	; 0x0f
    665c:	6e 84       	ldd	r6, Y+14	; 0x0e
    665e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6660:	8c 84       	ldd	r8, Y+12	; 0x0c
    6662:	9b 84       	ldd	r9, Y+11	; 0x0b
    6664:	aa 84       	ldd	r10, Y+10	; 0x0a
    6666:	b9 84       	ldd	r11, Y+9	; 0x09
    6668:	c8 84       	ldd	r12, Y+8	; 0x08
    666a:	df 80       	ldd	r13, Y+7	; 0x07
    666c:	ee 80       	ldd	r14, Y+6	; 0x06
    666e:	fd 80       	ldd	r15, Y+5	; 0x05
    6670:	0c 81       	ldd	r16, Y+4	; 0x04
    6672:	1b 81       	ldd	r17, Y+3	; 0x03
    6674:	aa 81       	ldd	r26, Y+2	; 0x02
    6676:	b9 81       	ldd	r27, Y+1	; 0x01
    6678:	ce 0f       	add	r28, r30
    667a:	d1 1d       	adc	r29, r1
    667c:	0f b6       	in	r0, 0x3f	; 63
    667e:	f8 94       	cli
    6680:	de bf       	out	0x3e, r29	; 62
    6682:	0f be       	out	0x3f, r0	; 63
    6684:	cd bf       	out	0x3d, r28	; 61
    6686:	ed 01       	movw	r28, r26
    6688:	08 95       	ret

0000668a <__udivmodhi4>:
    668a:	aa 1b       	sub	r26, r26
    668c:	bb 1b       	sub	r27, r27
    668e:	51 e1       	ldi	r21, 0x11	; 17
    6690:	07 c0       	rjmp	.+14     	; 0x66a0 <__udivmodhi4_ep>

00006692 <__udivmodhi4_loop>:
    6692:	aa 1f       	adc	r26, r26
    6694:	bb 1f       	adc	r27, r27
    6696:	a6 17       	cp	r26, r22
    6698:	b7 07       	cpc	r27, r23
    669a:	10 f0       	brcs	.+4      	; 0x66a0 <__udivmodhi4_ep>
    669c:	a6 1b       	sub	r26, r22
    669e:	b7 0b       	sbc	r27, r23

000066a0 <__udivmodhi4_ep>:
    66a0:	88 1f       	adc	r24, r24
    66a2:	99 1f       	adc	r25, r25
    66a4:	5a 95       	dec	r21
    66a6:	a9 f7       	brne	.-22     	; 0x6692 <__udivmodhi4_loop>
    66a8:	80 95       	com	r24
    66aa:	90 95       	com	r25
    66ac:	bc 01       	movw	r22, r24
    66ae:	cd 01       	movw	r24, r26
    66b0:	08 95       	ret

000066b2 <malloc>:
    66b2:	cf 93       	push	r28
    66b4:	df 93       	push	r29
    66b6:	bc 01       	movw	r22, r24
    66b8:	82 30       	cpi	r24, 0x02	; 2
    66ba:	91 05       	cpc	r25, r1
    66bc:	10 f4       	brcc	.+4      	; 0x66c2 <malloc+0x10>
    66be:	62 e0       	ldi	r22, 0x02	; 2
    66c0:	70 e0       	ldi	r23, 0x00	; 0
    66c2:	a0 91 c9 08 	lds	r26, 0x08C9
    66c6:	b0 91 ca 08 	lds	r27, 0x08CA
    66ca:	ed 01       	movw	r28, r26
    66cc:	e0 e0       	ldi	r30, 0x00	; 0
    66ce:	f0 e0       	ldi	r31, 0x00	; 0
    66d0:	40 e0       	ldi	r20, 0x00	; 0
    66d2:	50 e0       	ldi	r21, 0x00	; 0
    66d4:	21 c0       	rjmp	.+66     	; 0x6718 <malloc+0x66>
    66d6:	88 81       	ld	r24, Y
    66d8:	99 81       	ldd	r25, Y+1	; 0x01
    66da:	86 17       	cp	r24, r22
    66dc:	97 07       	cpc	r25, r23
    66de:	69 f4       	brne	.+26     	; 0x66fa <malloc+0x48>
    66e0:	8a 81       	ldd	r24, Y+2	; 0x02
    66e2:	9b 81       	ldd	r25, Y+3	; 0x03
    66e4:	30 97       	sbiw	r30, 0x00	; 0
    66e6:	19 f0       	breq	.+6      	; 0x66ee <malloc+0x3c>
    66e8:	93 83       	std	Z+3, r25	; 0x03
    66ea:	82 83       	std	Z+2, r24	; 0x02
    66ec:	04 c0       	rjmp	.+8      	; 0x66f6 <malloc+0x44>
    66ee:	90 93 ca 08 	sts	0x08CA, r25
    66f2:	80 93 c9 08 	sts	0x08C9, r24
    66f6:	fe 01       	movw	r30, r28
    66f8:	34 c0       	rjmp	.+104    	; 0x6762 <malloc+0xb0>
    66fa:	68 17       	cp	r22, r24
    66fc:	79 07       	cpc	r23, r25
    66fe:	38 f4       	brcc	.+14     	; 0x670e <malloc+0x5c>
    6700:	41 15       	cp	r20, r1
    6702:	51 05       	cpc	r21, r1
    6704:	19 f0       	breq	.+6      	; 0x670c <malloc+0x5a>
    6706:	84 17       	cp	r24, r20
    6708:	95 07       	cpc	r25, r21
    670a:	08 f4       	brcc	.+2      	; 0x670e <malloc+0x5c>
    670c:	ac 01       	movw	r20, r24
    670e:	fe 01       	movw	r30, r28
    6710:	8a 81       	ldd	r24, Y+2	; 0x02
    6712:	9b 81       	ldd	r25, Y+3	; 0x03
    6714:	9c 01       	movw	r18, r24
    6716:	e9 01       	movw	r28, r18
    6718:	20 97       	sbiw	r28, 0x00	; 0
    671a:	e9 f6       	brne	.-70     	; 0x66d6 <malloc+0x24>
    671c:	41 15       	cp	r20, r1
    671e:	51 05       	cpc	r21, r1
    6720:	a9 f1       	breq	.+106    	; 0x678c <malloc+0xda>
    6722:	ca 01       	movw	r24, r20
    6724:	86 1b       	sub	r24, r22
    6726:	97 0b       	sbc	r25, r23
    6728:	04 97       	sbiw	r24, 0x04	; 4
    672a:	08 f4       	brcc	.+2      	; 0x672e <malloc+0x7c>
    672c:	ba 01       	movw	r22, r20
    672e:	e0 e0       	ldi	r30, 0x00	; 0
    6730:	f0 e0       	ldi	r31, 0x00	; 0
    6732:	2a c0       	rjmp	.+84     	; 0x6788 <malloc+0xd6>
    6734:	8d 91       	ld	r24, X+
    6736:	9c 91       	ld	r25, X
    6738:	11 97       	sbiw	r26, 0x01	; 1
    673a:	84 17       	cp	r24, r20
    673c:	95 07       	cpc	r25, r21
    673e:	f9 f4       	brne	.+62     	; 0x677e <malloc+0xcc>
    6740:	64 17       	cp	r22, r20
    6742:	75 07       	cpc	r23, r21
    6744:	81 f4       	brne	.+32     	; 0x6766 <malloc+0xb4>
    6746:	12 96       	adiw	r26, 0x02	; 2
    6748:	8d 91       	ld	r24, X+
    674a:	9c 91       	ld	r25, X
    674c:	13 97       	sbiw	r26, 0x03	; 3
    674e:	30 97       	sbiw	r30, 0x00	; 0
    6750:	19 f0       	breq	.+6      	; 0x6758 <malloc+0xa6>
    6752:	93 83       	std	Z+3, r25	; 0x03
    6754:	82 83       	std	Z+2, r24	; 0x02
    6756:	04 c0       	rjmp	.+8      	; 0x6760 <malloc+0xae>
    6758:	90 93 ca 08 	sts	0x08CA, r25
    675c:	80 93 c9 08 	sts	0x08C9, r24
    6760:	fd 01       	movw	r30, r26
    6762:	32 96       	adiw	r30, 0x02	; 2
    6764:	4f c0       	rjmp	.+158    	; 0x6804 <malloc+0x152>
    6766:	ca 01       	movw	r24, r20
    6768:	86 1b       	sub	r24, r22
    676a:	97 0b       	sbc	r25, r23
    676c:	fd 01       	movw	r30, r26
    676e:	e8 0f       	add	r30, r24
    6770:	f9 1f       	adc	r31, r25
    6772:	61 93       	st	Z+, r22
    6774:	71 93       	st	Z+, r23
    6776:	02 97       	sbiw	r24, 0x02	; 2
    6778:	8d 93       	st	X+, r24
    677a:	9c 93       	st	X, r25
    677c:	43 c0       	rjmp	.+134    	; 0x6804 <malloc+0x152>
    677e:	fd 01       	movw	r30, r26
    6780:	82 81       	ldd	r24, Z+2	; 0x02
    6782:	93 81       	ldd	r25, Z+3	; 0x03
    6784:	9c 01       	movw	r18, r24
    6786:	d9 01       	movw	r26, r18
    6788:	10 97       	sbiw	r26, 0x00	; 0
    678a:	a1 f6       	brne	.-88     	; 0x6734 <malloc+0x82>
    678c:	80 91 c7 08 	lds	r24, 0x08C7
    6790:	90 91 c8 08 	lds	r25, 0x08C8
    6794:	89 2b       	or	r24, r25
    6796:	41 f4       	brne	.+16     	; 0x67a8 <malloc+0xf6>
    6798:	80 91 8e 03 	lds	r24, 0x038E
    679c:	90 91 8f 03 	lds	r25, 0x038F
    67a0:	90 93 c8 08 	sts	0x08C8, r25
    67a4:	80 93 c7 08 	sts	0x08C7, r24
    67a8:	40 91 90 03 	lds	r20, 0x0390
    67ac:	50 91 91 03 	lds	r21, 0x0391
    67b0:	41 15       	cp	r20, r1
    67b2:	51 05       	cpc	r21, r1
    67b4:	41 f4       	brne	.+16     	; 0x67c6 <malloc+0x114>
    67b6:	4d b7       	in	r20, 0x3d	; 61
    67b8:	5e b7       	in	r21, 0x3e	; 62
    67ba:	80 91 8c 03 	lds	r24, 0x038C
    67be:	90 91 8d 03 	lds	r25, 0x038D
    67c2:	48 1b       	sub	r20, r24
    67c4:	59 0b       	sbc	r21, r25
    67c6:	20 91 c7 08 	lds	r18, 0x08C7
    67ca:	30 91 c8 08 	lds	r19, 0x08C8
    67ce:	24 17       	cp	r18, r20
    67d0:	35 07       	cpc	r19, r21
    67d2:	b0 f4       	brcc	.+44     	; 0x6800 <malloc+0x14e>
    67d4:	ca 01       	movw	r24, r20
    67d6:	82 1b       	sub	r24, r18
    67d8:	93 0b       	sbc	r25, r19
    67da:	86 17       	cp	r24, r22
    67dc:	97 07       	cpc	r25, r23
    67de:	80 f0       	brcs	.+32     	; 0x6800 <malloc+0x14e>
    67e0:	ab 01       	movw	r20, r22
    67e2:	4e 5f       	subi	r20, 0xFE	; 254
    67e4:	5f 4f       	sbci	r21, 0xFF	; 255
    67e6:	84 17       	cp	r24, r20
    67e8:	95 07       	cpc	r25, r21
    67ea:	50 f0       	brcs	.+20     	; 0x6800 <malloc+0x14e>
    67ec:	42 0f       	add	r20, r18
    67ee:	53 1f       	adc	r21, r19
    67f0:	50 93 c8 08 	sts	0x08C8, r21
    67f4:	40 93 c7 08 	sts	0x08C7, r20
    67f8:	f9 01       	movw	r30, r18
    67fa:	61 93       	st	Z+, r22
    67fc:	71 93       	st	Z+, r23
    67fe:	02 c0       	rjmp	.+4      	; 0x6804 <malloc+0x152>
    6800:	e0 e0       	ldi	r30, 0x00	; 0
    6802:	f0 e0       	ldi	r31, 0x00	; 0
    6804:	cf 01       	movw	r24, r30
    6806:	df 91       	pop	r29
    6808:	cf 91       	pop	r28
    680a:	08 95       	ret

0000680c <free>:
    680c:	cf 93       	push	r28
    680e:	df 93       	push	r29
    6810:	00 97       	sbiw	r24, 0x00	; 0
    6812:	09 f4       	brne	.+2      	; 0x6816 <free+0xa>
    6814:	50 c0       	rjmp	.+160    	; 0x68b6 <free+0xaa>
    6816:	ec 01       	movw	r28, r24
    6818:	22 97       	sbiw	r28, 0x02	; 2
    681a:	1b 82       	std	Y+3, r1	; 0x03
    681c:	1a 82       	std	Y+2, r1	; 0x02
    681e:	a0 91 c9 08 	lds	r26, 0x08C9
    6822:	b0 91 ca 08 	lds	r27, 0x08CA
    6826:	10 97       	sbiw	r26, 0x00	; 0
    6828:	09 f1       	breq	.+66     	; 0x686c <free+0x60>
    682a:	40 e0       	ldi	r20, 0x00	; 0
    682c:	50 e0       	ldi	r21, 0x00	; 0
    682e:	ac 17       	cp	r26, r28
    6830:	bd 07       	cpc	r27, r29
    6832:	08 f1       	brcs	.+66     	; 0x6876 <free+0x6a>
    6834:	bb 83       	std	Y+3, r27	; 0x03
    6836:	aa 83       	std	Y+2, r26	; 0x02
    6838:	fe 01       	movw	r30, r28
    683a:	21 91       	ld	r18, Z+
    683c:	31 91       	ld	r19, Z+
    683e:	e2 0f       	add	r30, r18
    6840:	f3 1f       	adc	r31, r19
    6842:	ae 17       	cp	r26, r30
    6844:	bf 07       	cpc	r27, r31
    6846:	79 f4       	brne	.+30     	; 0x6866 <free+0x5a>
    6848:	8d 91       	ld	r24, X+
    684a:	9c 91       	ld	r25, X
    684c:	11 97       	sbiw	r26, 0x01	; 1
    684e:	28 0f       	add	r18, r24
    6850:	39 1f       	adc	r19, r25
    6852:	2e 5f       	subi	r18, 0xFE	; 254
    6854:	3f 4f       	sbci	r19, 0xFF	; 255
    6856:	39 83       	std	Y+1, r19	; 0x01
    6858:	28 83       	st	Y, r18
    685a:	12 96       	adiw	r26, 0x02	; 2
    685c:	8d 91       	ld	r24, X+
    685e:	9c 91       	ld	r25, X
    6860:	13 97       	sbiw	r26, 0x03	; 3
    6862:	9b 83       	std	Y+3, r25	; 0x03
    6864:	8a 83       	std	Y+2, r24	; 0x02
    6866:	41 15       	cp	r20, r1
    6868:	51 05       	cpc	r21, r1
    686a:	71 f4       	brne	.+28     	; 0x6888 <free+0x7c>
    686c:	d0 93 ca 08 	sts	0x08CA, r29
    6870:	c0 93 c9 08 	sts	0x08C9, r28
    6874:	20 c0       	rjmp	.+64     	; 0x68b6 <free+0xaa>
    6876:	12 96       	adiw	r26, 0x02	; 2
    6878:	8d 91       	ld	r24, X+
    687a:	9c 91       	ld	r25, X
    687c:	13 97       	sbiw	r26, 0x03	; 3
    687e:	ad 01       	movw	r20, r26
    6880:	00 97       	sbiw	r24, 0x00	; 0
    6882:	11 f0       	breq	.+4      	; 0x6888 <free+0x7c>
    6884:	dc 01       	movw	r26, r24
    6886:	d3 cf       	rjmp	.-90     	; 0x682e <free+0x22>
    6888:	fa 01       	movw	r30, r20
    688a:	d3 83       	std	Z+3, r29	; 0x03
    688c:	c2 83       	std	Z+2, r28	; 0x02
    688e:	21 91       	ld	r18, Z+
    6890:	31 91       	ld	r19, Z+
    6892:	e2 0f       	add	r30, r18
    6894:	f3 1f       	adc	r31, r19
    6896:	ce 17       	cp	r28, r30
    6898:	df 07       	cpc	r29, r31
    689a:	69 f4       	brne	.+26     	; 0x68b6 <free+0xaa>
    689c:	88 81       	ld	r24, Y
    689e:	99 81       	ldd	r25, Y+1	; 0x01
    68a0:	28 0f       	add	r18, r24
    68a2:	39 1f       	adc	r19, r25
    68a4:	2e 5f       	subi	r18, 0xFE	; 254
    68a6:	3f 4f       	sbci	r19, 0xFF	; 255
    68a8:	fa 01       	movw	r30, r20
    68aa:	31 83       	std	Z+1, r19	; 0x01
    68ac:	20 83       	st	Z, r18
    68ae:	8a 81       	ldd	r24, Y+2	; 0x02
    68b0:	9b 81       	ldd	r25, Y+3	; 0x03
    68b2:	93 83       	std	Z+3, r25	; 0x03
    68b4:	82 83       	std	Z+2, r24	; 0x02
    68b6:	df 91       	pop	r29
    68b8:	cf 91       	pop	r28
    68ba:	08 95       	ret

000068bc <do_rand>:
    68bc:	a0 e0       	ldi	r26, 0x00	; 0
    68be:	b0 e0       	ldi	r27, 0x00	; 0
    68c0:	e3 e6       	ldi	r30, 0x63	; 99
    68c2:	f4 e3       	ldi	r31, 0x34	; 52
    68c4:	b3 ce       	rjmp	.-666    	; 0x662c <__prologue_saves__+0x10>
    68c6:	ec 01       	movw	r28, r24
    68c8:	a8 80       	ld	r10, Y
    68ca:	b9 80       	ldd	r11, Y+1	; 0x01
    68cc:	ca 80       	ldd	r12, Y+2	; 0x02
    68ce:	db 80       	ldd	r13, Y+3	; 0x03
    68d0:	a1 14       	cp	r10, r1
    68d2:	b1 04       	cpc	r11, r1
    68d4:	c1 04       	cpc	r12, r1
    68d6:	d1 04       	cpc	r13, r1
    68d8:	41 f4       	brne	.+16     	; 0x68ea <do_rand+0x2e>
    68da:	84 e2       	ldi	r24, 0x24	; 36
    68dc:	a8 2e       	mov	r10, r24
    68de:	89 ed       	ldi	r24, 0xD9	; 217
    68e0:	b8 2e       	mov	r11, r24
    68e2:	8b e5       	ldi	r24, 0x5B	; 91
    68e4:	c8 2e       	mov	r12, r24
    68e6:	87 e0       	ldi	r24, 0x07	; 7
    68e8:	d8 2e       	mov	r13, r24
    68ea:	c6 01       	movw	r24, r12
    68ec:	b5 01       	movw	r22, r10
    68ee:	2d e1       	ldi	r18, 0x1D	; 29
    68f0:	33 ef       	ldi	r19, 0xF3	; 243
    68f2:	41 e0       	ldi	r20, 0x01	; 1
    68f4:	50 e0       	ldi	r21, 0x00	; 0
    68f6:	fa d1       	rcall	.+1012   	; 0x6cec <__divmodsi4>
    68f8:	27 ea       	ldi	r18, 0xA7	; 167
    68fa:	31 e4       	ldi	r19, 0x41	; 65
    68fc:	40 e0       	ldi	r20, 0x00	; 0
    68fe:	50 e0       	ldi	r21, 0x00	; 0
    6900:	39 de       	rcall	.-910    	; 0x6574 <__mulsi3>
    6902:	7b 01       	movw	r14, r22
    6904:	8c 01       	movw	r16, r24
    6906:	c6 01       	movw	r24, r12
    6908:	b5 01       	movw	r22, r10
    690a:	2d e1       	ldi	r18, 0x1D	; 29
    690c:	33 ef       	ldi	r19, 0xF3	; 243
    690e:	41 e0       	ldi	r20, 0x01	; 1
    6910:	50 e0       	ldi	r21, 0x00	; 0
    6912:	ec d1       	rcall	.+984    	; 0x6cec <__divmodsi4>
    6914:	ca 01       	movw	r24, r20
    6916:	b9 01       	movw	r22, r18
    6918:	2c ee       	ldi	r18, 0xEC	; 236
    691a:	34 ef       	ldi	r19, 0xF4	; 244
    691c:	4f ef       	ldi	r20, 0xFF	; 255
    691e:	5f ef       	ldi	r21, 0xFF	; 255
    6920:	29 de       	rcall	.-942    	; 0x6574 <__mulsi3>
    6922:	6e 0d       	add	r22, r14
    6924:	7f 1d       	adc	r23, r15
    6926:	80 1f       	adc	r24, r16
    6928:	91 1f       	adc	r25, r17
    692a:	97 ff       	sbrs	r25, 7
    692c:	04 c0       	rjmp	.+8      	; 0x6936 <do_rand+0x7a>
    692e:	61 50       	subi	r22, 0x01	; 1
    6930:	70 40       	sbci	r23, 0x00	; 0
    6932:	80 40       	sbci	r24, 0x00	; 0
    6934:	90 48       	sbci	r25, 0x80	; 128
    6936:	68 83       	st	Y, r22
    6938:	79 83       	std	Y+1, r23	; 0x01
    693a:	8a 83       	std	Y+2, r24	; 0x02
    693c:	9b 83       	std	Y+3, r25	; 0x03
    693e:	9b 01       	movw	r18, r22
    6940:	3f 77       	andi	r19, 0x7F	; 127
    6942:	c9 01       	movw	r24, r18
    6944:	cd b7       	in	r28, 0x3d	; 61
    6946:	de b7       	in	r29, 0x3e	; 62
    6948:	ea e0       	ldi	r30, 0x0A	; 10
    694a:	8c ce       	rjmp	.-744    	; 0x6664 <__epilogue_restores__+0x10>

0000694c <rand_r>:
    694c:	b7 df       	rcall	.-146    	; 0x68bc <do_rand>
    694e:	08 95       	ret

00006950 <rand>:
    6950:	82 e9       	ldi	r24, 0x92	; 146
    6952:	93 e0       	ldi	r25, 0x03	; 3
    6954:	b3 df       	rcall	.-154    	; 0x68bc <do_rand>
    6956:	08 95       	ret

00006958 <srand>:
    6958:	a0 e0       	ldi	r26, 0x00	; 0
    695a:	b0 e0       	ldi	r27, 0x00	; 0
    695c:	80 93 92 03 	sts	0x0392, r24
    6960:	90 93 93 03 	sts	0x0393, r25
    6964:	a0 93 94 03 	sts	0x0394, r26
    6968:	b0 93 95 03 	sts	0x0395, r27
    696c:	08 95       	ret

0000696e <__ftoa_engine>:
    696e:	28 30       	cpi	r18, 0x08	; 8
    6970:	08 f0       	brcs	.+2      	; 0x6974 <__ftoa_engine+0x6>
    6972:	27 e0       	ldi	r18, 0x07	; 7
    6974:	33 27       	eor	r19, r19
    6976:	da 01       	movw	r26, r20
    6978:	99 0f       	add	r25, r25
    697a:	31 1d       	adc	r19, r1
    697c:	87 fd       	sbrc	r24, 7
    697e:	91 60       	ori	r25, 0x01	; 1
    6980:	00 96       	adiw	r24, 0x00	; 0
    6982:	61 05       	cpc	r22, r1
    6984:	71 05       	cpc	r23, r1
    6986:	39 f4       	brne	.+14     	; 0x6996 <__ftoa_engine+0x28>
    6988:	32 60       	ori	r19, 0x02	; 2
    698a:	2e 5f       	subi	r18, 0xFE	; 254
    698c:	3d 93       	st	X+, r19
    698e:	30 e3       	ldi	r19, 0x30	; 48
    6990:	2a 95       	dec	r18
    6992:	e1 f7       	brne	.-8      	; 0x698c <__ftoa_engine+0x1e>
    6994:	08 95       	ret
    6996:	9f 3f       	cpi	r25, 0xFF	; 255
    6998:	30 f0       	brcs	.+12     	; 0x69a6 <__ftoa_engine+0x38>
    699a:	80 38       	cpi	r24, 0x80	; 128
    699c:	71 05       	cpc	r23, r1
    699e:	61 05       	cpc	r22, r1
    69a0:	09 f0       	breq	.+2      	; 0x69a4 <__ftoa_engine+0x36>
    69a2:	3c 5f       	subi	r19, 0xFC	; 252
    69a4:	3c 5f       	subi	r19, 0xFC	; 252
    69a6:	3d 93       	st	X+, r19
    69a8:	91 30       	cpi	r25, 0x01	; 1
    69aa:	08 f0       	brcs	.+2      	; 0x69ae <__ftoa_engine+0x40>
    69ac:	80 68       	ori	r24, 0x80	; 128
    69ae:	91 1d       	adc	r25, r1
    69b0:	df 93       	push	r29
    69b2:	cf 93       	push	r28
    69b4:	1f 93       	push	r17
    69b6:	0f 93       	push	r16
    69b8:	ff 92       	push	r15
    69ba:	ef 92       	push	r14
    69bc:	19 2f       	mov	r17, r25
    69be:	98 7f       	andi	r25, 0xF8	; 248
    69c0:	96 95       	lsr	r25
    69c2:	e9 2f       	mov	r30, r25
    69c4:	96 95       	lsr	r25
    69c6:	96 95       	lsr	r25
    69c8:	e9 0f       	add	r30, r25
    69ca:	ff 27       	eor	r31, r31
    69cc:	ef 53       	subi	r30, 0x3F	; 63
    69ce:	fa 4f       	sbci	r31, 0xFA	; 250
    69d0:	99 27       	eor	r25, r25
    69d2:	33 27       	eor	r19, r19
    69d4:	ee 24       	eor	r14, r14
    69d6:	ff 24       	eor	r15, r15
    69d8:	a7 01       	movw	r20, r14
    69da:	e7 01       	movw	r28, r14
    69dc:	05 90       	lpm	r0, Z+
    69de:	08 94       	sec
    69e0:	07 94       	ror	r0
    69e2:	28 f4       	brcc	.+10     	; 0x69ee <__ftoa_engine+0x80>
    69e4:	36 0f       	add	r19, r22
    69e6:	e7 1e       	adc	r14, r23
    69e8:	f8 1e       	adc	r15, r24
    69ea:	49 1f       	adc	r20, r25
    69ec:	51 1d       	adc	r21, r1
    69ee:	66 0f       	add	r22, r22
    69f0:	77 1f       	adc	r23, r23
    69f2:	88 1f       	adc	r24, r24
    69f4:	99 1f       	adc	r25, r25
    69f6:	06 94       	lsr	r0
    69f8:	a1 f7       	brne	.-24     	; 0x69e2 <__ftoa_engine+0x74>
    69fa:	05 90       	lpm	r0, Z+
    69fc:	07 94       	ror	r0
    69fe:	28 f4       	brcc	.+10     	; 0x6a0a <__ftoa_engine+0x9c>
    6a00:	e7 0e       	add	r14, r23
    6a02:	f8 1e       	adc	r15, r24
    6a04:	49 1f       	adc	r20, r25
    6a06:	56 1f       	adc	r21, r22
    6a08:	c1 1d       	adc	r28, r1
    6a0a:	77 0f       	add	r23, r23
    6a0c:	88 1f       	adc	r24, r24
    6a0e:	99 1f       	adc	r25, r25
    6a10:	66 1f       	adc	r22, r22
    6a12:	06 94       	lsr	r0
    6a14:	a1 f7       	brne	.-24     	; 0x69fe <__ftoa_engine+0x90>
    6a16:	05 90       	lpm	r0, Z+
    6a18:	07 94       	ror	r0
    6a1a:	28 f4       	brcc	.+10     	; 0x6a26 <__ftoa_engine+0xb8>
    6a1c:	f8 0e       	add	r15, r24
    6a1e:	49 1f       	adc	r20, r25
    6a20:	56 1f       	adc	r21, r22
    6a22:	c7 1f       	adc	r28, r23
    6a24:	d1 1d       	adc	r29, r1
    6a26:	88 0f       	add	r24, r24
    6a28:	99 1f       	adc	r25, r25
    6a2a:	66 1f       	adc	r22, r22
    6a2c:	77 1f       	adc	r23, r23
    6a2e:	06 94       	lsr	r0
    6a30:	a1 f7       	brne	.-24     	; 0x6a1a <__ftoa_engine+0xac>
    6a32:	05 90       	lpm	r0, Z+
    6a34:	07 94       	ror	r0
    6a36:	20 f4       	brcc	.+8      	; 0x6a40 <__ftoa_engine+0xd2>
    6a38:	49 0f       	add	r20, r25
    6a3a:	56 1f       	adc	r21, r22
    6a3c:	c7 1f       	adc	r28, r23
    6a3e:	d8 1f       	adc	r29, r24
    6a40:	99 0f       	add	r25, r25
    6a42:	66 1f       	adc	r22, r22
    6a44:	77 1f       	adc	r23, r23
    6a46:	88 1f       	adc	r24, r24
    6a48:	06 94       	lsr	r0
    6a4a:	a9 f7       	brne	.-22     	; 0x6a36 <__ftoa_engine+0xc8>
    6a4c:	84 91       	lpm	r24, Z+
    6a4e:	10 95       	com	r17
    6a50:	17 70       	andi	r17, 0x07	; 7
    6a52:	41 f0       	breq	.+16     	; 0x6a64 <__ftoa_engine+0xf6>
    6a54:	d6 95       	lsr	r29
    6a56:	c7 95       	ror	r28
    6a58:	57 95       	ror	r21
    6a5a:	47 95       	ror	r20
    6a5c:	f7 94       	ror	r15
    6a5e:	e7 94       	ror	r14
    6a60:	1a 95       	dec	r17
    6a62:	c1 f7       	brne	.-16     	; 0x6a54 <__ftoa_engine+0xe6>
    6a64:	e7 e6       	ldi	r30, 0x67	; 103
    6a66:	f5 e0       	ldi	r31, 0x05	; 5
    6a68:	68 94       	set
    6a6a:	15 90       	lpm	r1, Z+
    6a6c:	15 91       	lpm	r17, Z+
    6a6e:	35 91       	lpm	r19, Z+
    6a70:	65 91       	lpm	r22, Z+
    6a72:	95 91       	lpm	r25, Z+
    6a74:	05 90       	lpm	r0, Z+
    6a76:	7f e2       	ldi	r23, 0x2F	; 47
    6a78:	73 95       	inc	r23
    6a7a:	e1 18       	sub	r14, r1
    6a7c:	f1 0a       	sbc	r15, r17
    6a7e:	43 0b       	sbc	r20, r19
    6a80:	56 0b       	sbc	r21, r22
    6a82:	c9 0b       	sbc	r28, r25
    6a84:	d0 09       	sbc	r29, r0
    6a86:	c0 f7       	brcc	.-16     	; 0x6a78 <__ftoa_engine+0x10a>
    6a88:	e1 0c       	add	r14, r1
    6a8a:	f1 1e       	adc	r15, r17
    6a8c:	43 1f       	adc	r20, r19
    6a8e:	56 1f       	adc	r21, r22
    6a90:	c9 1f       	adc	r28, r25
    6a92:	d0 1d       	adc	r29, r0
    6a94:	7e f4       	brtc	.+30     	; 0x6ab4 <__ftoa_engine+0x146>
    6a96:	70 33       	cpi	r23, 0x30	; 48
    6a98:	11 f4       	brne	.+4      	; 0x6a9e <__ftoa_engine+0x130>
    6a9a:	8a 95       	dec	r24
    6a9c:	e6 cf       	rjmp	.-52     	; 0x6a6a <__ftoa_engine+0xfc>
    6a9e:	e8 94       	clt
    6aa0:	01 50       	subi	r16, 0x01	; 1
    6aa2:	30 f0       	brcs	.+12     	; 0x6ab0 <__ftoa_engine+0x142>
    6aa4:	08 0f       	add	r16, r24
    6aa6:	0a f4       	brpl	.+2      	; 0x6aaa <__ftoa_engine+0x13c>
    6aa8:	00 27       	eor	r16, r16
    6aaa:	02 17       	cp	r16, r18
    6aac:	08 f4       	brcc	.+2      	; 0x6ab0 <__ftoa_engine+0x142>
    6aae:	20 2f       	mov	r18, r16
    6ab0:	23 95       	inc	r18
    6ab2:	02 2f       	mov	r16, r18
    6ab4:	7a 33       	cpi	r23, 0x3A	; 58
    6ab6:	28 f0       	brcs	.+10     	; 0x6ac2 <__ftoa_engine+0x154>
    6ab8:	79 e3       	ldi	r23, 0x39	; 57
    6aba:	7d 93       	st	X+, r23
    6abc:	2a 95       	dec	r18
    6abe:	e9 f7       	brne	.-6      	; 0x6aba <__ftoa_engine+0x14c>
    6ac0:	10 c0       	rjmp	.+32     	; 0x6ae2 <__ftoa_engine+0x174>
    6ac2:	7d 93       	st	X+, r23
    6ac4:	2a 95       	dec	r18
    6ac6:	89 f6       	brne	.-94     	; 0x6a6a <__ftoa_engine+0xfc>
    6ac8:	06 94       	lsr	r0
    6aca:	97 95       	ror	r25
    6acc:	67 95       	ror	r22
    6ace:	37 95       	ror	r19
    6ad0:	17 95       	ror	r17
    6ad2:	17 94       	ror	r1
    6ad4:	e1 18       	sub	r14, r1
    6ad6:	f1 0a       	sbc	r15, r17
    6ad8:	43 0b       	sbc	r20, r19
    6ada:	56 0b       	sbc	r21, r22
    6adc:	c9 0b       	sbc	r28, r25
    6ade:	d0 09       	sbc	r29, r0
    6ae0:	98 f0       	brcs	.+38     	; 0x6b08 <__ftoa_engine+0x19a>
    6ae2:	23 95       	inc	r18
    6ae4:	7e 91       	ld	r23, -X
    6ae6:	73 95       	inc	r23
    6ae8:	7a 33       	cpi	r23, 0x3A	; 58
    6aea:	08 f0       	brcs	.+2      	; 0x6aee <__ftoa_engine+0x180>
    6aec:	70 e3       	ldi	r23, 0x30	; 48
    6aee:	7c 93       	st	X, r23
    6af0:	20 13       	cpse	r18, r16
    6af2:	b8 f7       	brcc	.-18     	; 0x6ae2 <__ftoa_engine+0x174>
    6af4:	7e 91       	ld	r23, -X
    6af6:	70 61       	ori	r23, 0x10	; 16
    6af8:	7d 93       	st	X+, r23
    6afa:	30 f0       	brcs	.+12     	; 0x6b08 <__ftoa_engine+0x19a>
    6afc:	83 95       	inc	r24
    6afe:	71 e3       	ldi	r23, 0x31	; 49
    6b00:	7d 93       	st	X+, r23
    6b02:	70 e3       	ldi	r23, 0x30	; 48
    6b04:	2a 95       	dec	r18
    6b06:	e1 f7       	brne	.-8      	; 0x6b00 <__ftoa_engine+0x192>
    6b08:	11 24       	eor	r1, r1
    6b0a:	ef 90       	pop	r14
    6b0c:	ff 90       	pop	r15
    6b0e:	0f 91       	pop	r16
    6b10:	1f 91       	pop	r17
    6b12:	cf 91       	pop	r28
    6b14:	df 91       	pop	r29
    6b16:	99 27       	eor	r25, r25
    6b18:	87 fd       	sbrc	r24, 7
    6b1a:	90 95       	com	r25
    6b1c:	08 95       	ret

00006b1e <strnlen_P>:
    6b1e:	fc 01       	movw	r30, r24
    6b20:	05 90       	lpm	r0, Z+
    6b22:	61 50       	subi	r22, 0x01	; 1
    6b24:	70 40       	sbci	r23, 0x00	; 0
    6b26:	01 10       	cpse	r0, r1
    6b28:	d8 f7       	brcc	.-10     	; 0x6b20 <strnlen_P+0x2>
    6b2a:	80 95       	com	r24
    6b2c:	90 95       	com	r25
    6b2e:	8e 0f       	add	r24, r30
    6b30:	9f 1f       	adc	r25, r31
    6b32:	08 95       	ret

00006b34 <strnlen>:
    6b34:	fc 01       	movw	r30, r24
    6b36:	61 50       	subi	r22, 0x01	; 1
    6b38:	70 40       	sbci	r23, 0x00	; 0
    6b3a:	01 90       	ld	r0, Z+
    6b3c:	01 10       	cpse	r0, r1
    6b3e:	d8 f7       	brcc	.-10     	; 0x6b36 <strnlen+0x2>
    6b40:	80 95       	com	r24
    6b42:	90 95       	com	r25
    6b44:	8e 0f       	add	r24, r30
    6b46:	9f 1f       	adc	r25, r31
    6b48:	08 95       	ret

00006b4a <fputc>:
    6b4a:	0f 93       	push	r16
    6b4c:	1f 93       	push	r17
    6b4e:	cf 93       	push	r28
    6b50:	df 93       	push	r29
    6b52:	8c 01       	movw	r16, r24
    6b54:	eb 01       	movw	r28, r22
    6b56:	8b 81       	ldd	r24, Y+3	; 0x03
    6b58:	81 ff       	sbrs	r24, 1
    6b5a:	1b c0       	rjmp	.+54     	; 0x6b92 <fputc+0x48>
    6b5c:	82 ff       	sbrs	r24, 2
    6b5e:	0d c0       	rjmp	.+26     	; 0x6b7a <fputc+0x30>
    6b60:	2e 81       	ldd	r18, Y+6	; 0x06
    6b62:	3f 81       	ldd	r19, Y+7	; 0x07
    6b64:	8c 81       	ldd	r24, Y+4	; 0x04
    6b66:	9d 81       	ldd	r25, Y+5	; 0x05
    6b68:	28 17       	cp	r18, r24
    6b6a:	39 07       	cpc	r19, r25
    6b6c:	64 f4       	brge	.+24     	; 0x6b86 <fputc+0x3c>
    6b6e:	e8 81       	ld	r30, Y
    6b70:	f9 81       	ldd	r31, Y+1	; 0x01
    6b72:	01 93       	st	Z+, r16
    6b74:	f9 83       	std	Y+1, r31	; 0x01
    6b76:	e8 83       	st	Y, r30
    6b78:	06 c0       	rjmp	.+12     	; 0x6b86 <fputc+0x3c>
    6b7a:	e8 85       	ldd	r30, Y+8	; 0x08
    6b7c:	f9 85       	ldd	r31, Y+9	; 0x09
    6b7e:	80 2f       	mov	r24, r16
    6b80:	09 95       	icall
    6b82:	89 2b       	or	r24, r25
    6b84:	31 f4       	brne	.+12     	; 0x6b92 <fputc+0x48>
    6b86:	8e 81       	ldd	r24, Y+6	; 0x06
    6b88:	9f 81       	ldd	r25, Y+7	; 0x07
    6b8a:	01 96       	adiw	r24, 0x01	; 1
    6b8c:	9f 83       	std	Y+7, r25	; 0x07
    6b8e:	8e 83       	std	Y+6, r24	; 0x06
    6b90:	02 c0       	rjmp	.+4      	; 0x6b96 <fputc+0x4c>
    6b92:	0f ef       	ldi	r16, 0xFF	; 255
    6b94:	1f ef       	ldi	r17, 0xFF	; 255
    6b96:	c8 01       	movw	r24, r16
    6b98:	df 91       	pop	r29
    6b9a:	cf 91       	pop	r28
    6b9c:	1f 91       	pop	r17
    6b9e:	0f 91       	pop	r16
    6ba0:	08 95       	ret

00006ba2 <printf>:
    6ba2:	a0 e0       	ldi	r26, 0x00	; 0
    6ba4:	b0 e0       	ldi	r27, 0x00	; 0
    6ba6:	e6 ed       	ldi	r30, 0xD6	; 214
    6ba8:	f5 e3       	ldi	r31, 0x35	; 53
    6baa:	48 cd       	rjmp	.-1392   	; 0x663c <__prologue_saves__+0x20>
    6bac:	fe 01       	movw	r30, r28
    6bae:	35 96       	adiw	r30, 0x05	; 5
    6bb0:	61 91       	ld	r22, Z+
    6bb2:	71 91       	ld	r23, Z+
    6bb4:	80 91 cd 08 	lds	r24, 0x08CD
    6bb8:	90 91 ce 08 	lds	r25, 0x08CE
    6bbc:	af 01       	movw	r20, r30
    6bbe:	72 d9       	rcall	.-3356   	; 0x5ea4 <vfprintf>
    6bc0:	20 96       	adiw	r28, 0x00	; 0
    6bc2:	e2 e0       	ldi	r30, 0x02	; 2
    6bc4:	57 cd       	rjmp	.-1362   	; 0x6674 <__epilogue_restores__+0x20>

00006bc6 <puts>:
    6bc6:	0f 93       	push	r16
    6bc8:	1f 93       	push	r17
    6bca:	cf 93       	push	r28
    6bcc:	df 93       	push	r29
    6bce:	8c 01       	movw	r16, r24
    6bd0:	e0 91 cd 08 	lds	r30, 0x08CD
    6bd4:	f0 91 ce 08 	lds	r31, 0x08CE
    6bd8:	83 81       	ldd	r24, Z+3	; 0x03
    6bda:	81 ff       	sbrs	r24, 1
    6bdc:	21 c0       	rjmp	.+66     	; 0x6c20 <puts+0x5a>
    6bde:	c0 e0       	ldi	r28, 0x00	; 0
    6be0:	d0 e0       	ldi	r29, 0x00	; 0
    6be2:	0d c0       	rjmp	.+26     	; 0x6bfe <puts+0x38>
    6be4:	e0 91 cd 08 	lds	r30, 0x08CD
    6be8:	f0 91 ce 08 	lds	r31, 0x08CE
    6bec:	20 85       	ldd	r18, Z+8	; 0x08
    6bee:	31 85       	ldd	r19, Z+9	; 0x09
    6bf0:	bf 01       	movw	r22, r30
    6bf2:	f9 01       	movw	r30, r18
    6bf4:	09 95       	icall
    6bf6:	89 2b       	or	r24, r25
    6bf8:	11 f0       	breq	.+4      	; 0x6bfe <puts+0x38>
    6bfa:	cf ef       	ldi	r28, 0xFF	; 255
    6bfc:	df ef       	ldi	r29, 0xFF	; 255
    6bfe:	f8 01       	movw	r30, r16
    6c00:	81 91       	ld	r24, Z+
    6c02:	8f 01       	movw	r16, r30
    6c04:	88 23       	and	r24, r24
    6c06:	71 f7       	brne	.-36     	; 0x6be4 <puts+0x1e>
    6c08:	e0 91 cd 08 	lds	r30, 0x08CD
    6c0c:	f0 91 ce 08 	lds	r31, 0x08CE
    6c10:	20 85       	ldd	r18, Z+8	; 0x08
    6c12:	31 85       	ldd	r19, Z+9	; 0x09
    6c14:	8a e0       	ldi	r24, 0x0A	; 10
    6c16:	bf 01       	movw	r22, r30
    6c18:	f9 01       	movw	r30, r18
    6c1a:	09 95       	icall
    6c1c:	89 2b       	or	r24, r25
    6c1e:	11 f0       	breq	.+4      	; 0x6c24 <puts+0x5e>
    6c20:	cf ef       	ldi	r28, 0xFF	; 255
    6c22:	df ef       	ldi	r29, 0xFF	; 255
    6c24:	ce 01       	movw	r24, r28
    6c26:	df 91       	pop	r29
    6c28:	cf 91       	pop	r28
    6c2a:	1f 91       	pop	r17
    6c2c:	0f 91       	pop	r16
    6c2e:	08 95       	ret

00006c30 <__ultoa_invert>:
    6c30:	fa 01       	movw	r30, r20
    6c32:	aa 27       	eor	r26, r26
    6c34:	28 30       	cpi	r18, 0x08	; 8
    6c36:	51 f1       	breq	.+84     	; 0x6c8c <__ultoa_invert+0x5c>
    6c38:	20 31       	cpi	r18, 0x10	; 16
    6c3a:	81 f1       	breq	.+96     	; 0x6c9c <__ultoa_invert+0x6c>
    6c3c:	e8 94       	clt
    6c3e:	6f 93       	push	r22
    6c40:	6e 7f       	andi	r22, 0xFE	; 254
    6c42:	6e 5f       	subi	r22, 0xFE	; 254
    6c44:	7f 4f       	sbci	r23, 0xFF	; 255
    6c46:	8f 4f       	sbci	r24, 0xFF	; 255
    6c48:	9f 4f       	sbci	r25, 0xFF	; 255
    6c4a:	af 4f       	sbci	r26, 0xFF	; 255
    6c4c:	b1 e0       	ldi	r27, 0x01	; 1
    6c4e:	3e d0       	rcall	.+124    	; 0x6ccc <__ultoa_invert+0x9c>
    6c50:	b4 e0       	ldi	r27, 0x04	; 4
    6c52:	3c d0       	rcall	.+120    	; 0x6ccc <__ultoa_invert+0x9c>
    6c54:	67 0f       	add	r22, r23
    6c56:	78 1f       	adc	r23, r24
    6c58:	89 1f       	adc	r24, r25
    6c5a:	9a 1f       	adc	r25, r26
    6c5c:	a1 1d       	adc	r26, r1
    6c5e:	68 0f       	add	r22, r24
    6c60:	79 1f       	adc	r23, r25
    6c62:	8a 1f       	adc	r24, r26
    6c64:	91 1d       	adc	r25, r1
    6c66:	a1 1d       	adc	r26, r1
    6c68:	6a 0f       	add	r22, r26
    6c6a:	71 1d       	adc	r23, r1
    6c6c:	81 1d       	adc	r24, r1
    6c6e:	91 1d       	adc	r25, r1
    6c70:	a1 1d       	adc	r26, r1
    6c72:	20 d0       	rcall	.+64     	; 0x6cb4 <__ultoa_invert+0x84>
    6c74:	09 f4       	brne	.+2      	; 0x6c78 <__ultoa_invert+0x48>
    6c76:	68 94       	set
    6c78:	3f 91       	pop	r19
    6c7a:	2a e0       	ldi	r18, 0x0A	; 10
    6c7c:	26 9f       	mul	r18, r22
    6c7e:	11 24       	eor	r1, r1
    6c80:	30 19       	sub	r19, r0
    6c82:	30 5d       	subi	r19, 0xD0	; 208
    6c84:	31 93       	st	Z+, r19
    6c86:	de f6       	brtc	.-74     	; 0x6c3e <__ultoa_invert+0xe>
    6c88:	cf 01       	movw	r24, r30
    6c8a:	08 95       	ret
    6c8c:	46 2f       	mov	r20, r22
    6c8e:	47 70       	andi	r20, 0x07	; 7
    6c90:	40 5d       	subi	r20, 0xD0	; 208
    6c92:	41 93       	st	Z+, r20
    6c94:	b3 e0       	ldi	r27, 0x03	; 3
    6c96:	0f d0       	rcall	.+30     	; 0x6cb6 <__ultoa_invert+0x86>
    6c98:	c9 f7       	brne	.-14     	; 0x6c8c <__ultoa_invert+0x5c>
    6c9a:	f6 cf       	rjmp	.-20     	; 0x6c88 <__ultoa_invert+0x58>
    6c9c:	46 2f       	mov	r20, r22
    6c9e:	4f 70       	andi	r20, 0x0F	; 15
    6ca0:	40 5d       	subi	r20, 0xD0	; 208
    6ca2:	4a 33       	cpi	r20, 0x3A	; 58
    6ca4:	18 f0       	brcs	.+6      	; 0x6cac <__ultoa_invert+0x7c>
    6ca6:	49 5d       	subi	r20, 0xD9	; 217
    6ca8:	31 fd       	sbrc	r19, 1
    6caa:	40 52       	subi	r20, 0x20	; 32
    6cac:	41 93       	st	Z+, r20
    6cae:	02 d0       	rcall	.+4      	; 0x6cb4 <__ultoa_invert+0x84>
    6cb0:	a9 f7       	brne	.-22     	; 0x6c9c <__ultoa_invert+0x6c>
    6cb2:	ea cf       	rjmp	.-44     	; 0x6c88 <__ultoa_invert+0x58>
    6cb4:	b4 e0       	ldi	r27, 0x04	; 4
    6cb6:	a6 95       	lsr	r26
    6cb8:	97 95       	ror	r25
    6cba:	87 95       	ror	r24
    6cbc:	77 95       	ror	r23
    6cbe:	67 95       	ror	r22
    6cc0:	ba 95       	dec	r27
    6cc2:	c9 f7       	brne	.-14     	; 0x6cb6 <__ultoa_invert+0x86>
    6cc4:	00 97       	sbiw	r24, 0x00	; 0
    6cc6:	61 05       	cpc	r22, r1
    6cc8:	71 05       	cpc	r23, r1
    6cca:	08 95       	ret
    6ccc:	9b 01       	movw	r18, r22
    6cce:	ac 01       	movw	r20, r24
    6cd0:	0a 2e       	mov	r0, r26
    6cd2:	06 94       	lsr	r0
    6cd4:	57 95       	ror	r21
    6cd6:	47 95       	ror	r20
    6cd8:	37 95       	ror	r19
    6cda:	27 95       	ror	r18
    6cdc:	ba 95       	dec	r27
    6cde:	c9 f7       	brne	.-14     	; 0x6cd2 <__ultoa_invert+0xa2>
    6ce0:	62 0f       	add	r22, r18
    6ce2:	73 1f       	adc	r23, r19
    6ce4:	84 1f       	adc	r24, r20
    6ce6:	95 1f       	adc	r25, r21
    6ce8:	a0 1d       	adc	r26, r0
    6cea:	08 95       	ret

00006cec <__divmodsi4>:
    6cec:	97 fb       	bst	r25, 7
    6cee:	09 2e       	mov	r0, r25
    6cf0:	05 26       	eor	r0, r21
    6cf2:	0e d0       	rcall	.+28     	; 0x6d10 <__divmodsi4_neg1>
    6cf4:	57 fd       	sbrc	r21, 7
    6cf6:	04 d0       	rcall	.+8      	; 0x6d00 <__divmodsi4_neg2>
    6cf8:	6f dc       	rcall	.-1826   	; 0x65d8 <__udivmodsi4>
    6cfa:	0a d0       	rcall	.+20     	; 0x6d10 <__divmodsi4_neg1>
    6cfc:	00 1c       	adc	r0, r0
    6cfe:	38 f4       	brcc	.+14     	; 0x6d0e <__divmodsi4_exit>

00006d00 <__divmodsi4_neg2>:
    6d00:	50 95       	com	r21
    6d02:	40 95       	com	r20
    6d04:	30 95       	com	r19
    6d06:	21 95       	neg	r18
    6d08:	3f 4f       	sbci	r19, 0xFF	; 255
    6d0a:	4f 4f       	sbci	r20, 0xFF	; 255
    6d0c:	5f 4f       	sbci	r21, 0xFF	; 255

00006d0e <__divmodsi4_exit>:
    6d0e:	08 95       	ret

00006d10 <__divmodsi4_neg1>:
    6d10:	f6 f7       	brtc	.-4      	; 0x6d0e <__divmodsi4_exit>
    6d12:	90 95       	com	r25
    6d14:	80 95       	com	r24
    6d16:	70 95       	com	r23
    6d18:	61 95       	neg	r22
    6d1a:	7f 4f       	sbci	r23, 0xFF	; 255
    6d1c:	8f 4f       	sbci	r24, 0xFF	; 255
    6d1e:	9f 4f       	sbci	r25, 0xFF	; 255
    6d20:	08 95       	ret

00006d22 <_exit>:
    6d22:	f8 94       	cli

00006d24 <__stop_program>:
    6d24:	ff cf       	rjmp	.-2      	; 0x6d24 <__stop_program>
