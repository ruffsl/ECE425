
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000346  00800100  00006f76  0000700a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006f76  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003bb  00800446  00800446  00007350  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00007350  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000064c  00000000  00000000  000073b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000019e4  00000000  00000000  000079fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000489  00000000  00000000  000093e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000177d  00000000  00000000  00009869  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  0000afe8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d57  00000000  00000000  0000b2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010e8  00000000  00000000  0000c02f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 b0 23 	jmp	0x4760	; 0x4760 <__vector_4>
      14:	0c 94 d9 23 	jmp	0x47b2	; 0x47b2 <__vector_5>
      18:	0c 94 02 24 	jmp	0x4804	; 0x4804 <__vector_6>
      1c:	0c 94 2b 24 	jmp	0x4856	; 0x4856 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 91 22 	jmp	0x4522	; 0x4522 <__vector_9>
      28:	0c 94 ba 22 	jmp	0x4574	; 0x4574 <__vector_10>
      2c:	0c 94 e3 22 	jmp	0x45c6	; 0x45c6 <__vector_11>
      30:	0c 94 5e 23 	jmp	0x46bc	; 0x46bc <__vector_12>
      34:	0c 94 0c 23 	jmp	0x4618	; 0x4618 <__vector_13>
      38:	0c 94 35 23 	jmp	0x466a	; 0x466a <__vector_14>
      3c:	0c 94 87 23 	jmp	0x470e	; 0x470e <__vector_15>
      40:	0c 94 16 22 	jmp	0x442c	; 0x442c <__vector_16>
      44:	0c 94 3f 22 	jmp	0x447e	; 0x447e <__vector_17>
      48:	0c 94 68 22 	jmp	0x44d0	; 0x44d0 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	7b 1f       	adc	r23, r27
      7e:	7e 1f       	adc	r23, r30
      80:	81 1f       	adc	r24, r17
      82:	84 1f       	adc	r24, r20
      84:	8d 1f       	adc	r24, r29
      86:	87 1f       	adc	r24, r23
      88:	8a 1f       	adc	r24, r26
      8a:	90 1f       	adc	r25, r16
      8c:	93 1f       	adc	r25, r19
      8e:	96 1f       	adc	r25, r22
      90:	99 1f       	adc	r25, r25
      92:	9c 1f       	adc	r25, r28
      94:	9f 1f       	adc	r25, r31
      96:	a2 1f       	adc	r26, r18
      98:	a5 1f       	adc	r26, r21
      9a:	a8 1f       	adc	r26, r24
      9c:	ab 1f       	adc	r26, r27
      9e:	ae 1f       	adc	r26, r30
      a0:	b1 1f       	adc	r27, r17
      a2:	c2 1f       	adc	r28, r18
      a4:	c5 1f       	adc	r28, r21
      a6:	c8 1f       	adc	r28, r24
      a8:	cb 1f       	adc	r28, r27
      aa:	d4 1f       	adc	r29, r20
      ac:	ce 1f       	adc	r28, r30
      ae:	d1 1f       	adc	r29, r17
      b0:	d7 1f       	adc	r29, r23
      b2:	da 1f       	adc	r29, r26
      b4:	dd 1f       	adc	r29, r29
      b6:	e0 1f       	adc	r30, r16
      b8:	e3 1f       	adc	r30, r19
      ba:	e6 1f       	adc	r30, r22
      bc:	e9 1f       	adc	r30, r25
      be:	ec 1f       	adc	r30, r28
      c0:	ef 1f       	adc	r30, r31
      c2:	f2 1f       	adc	r31, r18
      c4:	f5 1f       	adc	r31, r21
      c6:	f8 1f       	adc	r31, r24
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e6 e7       	ldi	r30, 0x76	; 118
     676:	ff e6       	ldi	r31, 0x6F	; 111
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a6 34       	cpi	r26, 0x46	; 70
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	18 e0       	ldi	r17, 0x08	; 8
     686:	a6 e4       	ldi	r26, 0x46	; 70
     688:	b4 e0       	ldi	r27, 0x04	; 4
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a1 30       	cpi	r26, 0x01	; 1
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 00 1a 	call	0x3400	; 0x3400 <main>
     698:	0c 94 b9 37 	jmp	0x6f72	; 0x6f72 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 28 21 	call	0x4250	; 0x4250 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 c0 21 	call	0x4380	; 0x4380 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 28 21 	call	0x4250	; 0x4250 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 c0 21 	call	0x4380	; 0x4380 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 28 21 	call	0x4250	; 0x4250 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 c0 21 	call	0x4380	; 0x4380 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 28 21 	call	0x4250	; 0x4250 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 c0 21 	call	0x4380	; 0x4380 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 28 21 	call	0x4250	; 0x4250 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 c0 21 	call	0x4380	; 0x4380 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 28 21 	call	0x4250	; 0x4250 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 c0 21 	call	0x4380	; 0x4380 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 28 21 	call	0x4250	; 0x4250 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 c0 21 	call	0x4380	; 0x4380 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 28 21 	call	0x4250	; 0x4250 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 c0 21 	call	0x4380	; 0x4380 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 28 21 	call	0x4250	; 0x4250 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 c0 21 	call	0x4380	; 0x4380 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 54 21 	call	0x42a8	; 0x42a8 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 28 21 	call	0x4250	; 0x4250 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 c0 21 	call	0x4380	; 0x4380 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 f5 19 	call	0x33ea	; 0x33ea <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 be 19 	call	0x337c	; 0x337c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 a1 19 	call	0x3342	; 0x3342 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 f5 19 	call	0x33ea	; 0x33ea <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 be 19 	call	0x337c	; 0x337c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 a1 19 	call	0x3342	; 0x3342 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 f5 19 	call	0x33ea	; 0x33ea <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 be 19 	call	0x337c	; 0x337c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 a1 19 	call	0x3342	; 0x3342 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 f5 19 	call	0x33ea	; 0x33ea <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 be 19 	call	0x337c	; 0x337c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 a1 19 	call	0x3342	; 0x3342 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 f5 19 	call	0x33ea	; 0x33ea <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 be 19 	call	0x337c	; 0x337c <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 a1 19 	call	0x3342	; 0x3342 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 f5 19 	call	0x33ea	; 0x33ea <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 be 19 	call	0x337c	; 0x337c <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 a1 19 	call	0x3342	; 0x3342 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 c2 04 	sts	0x04C2, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 2c 20 	call	0x4058	; 0x4058 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 2c 20 	call	0x4058	; 0x4058 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 2c 20 	call	0x4058	; 0x4058 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 c2 04 	sts	0x04C2, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 2c 20 	call	0x4058	; 0x4058 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 2c 20 	call	0x4058	; 0x4058 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 2c 20 	call	0x4058	; 0x4058 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 18 1b 	call	0x3630	; 0x3630 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 03 1b 	call	0x3606	; 0x3606 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 03 1b 	call	0x3606	; 0x3606 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 18 1b 	call	0x3630	; 0x3630 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 03 1b 	call	0x3606	; 0x3606 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 03 1b 	call	0x3606	; 0x3606 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 18 1b 	call	0x3630	; 0x3630 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 18 1b 	call	0x3630	; 0x3630 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 03 1b 	call	0x3606	; 0x3606 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 03 1b 	call	0x3606	; 0x3606 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
     c14:	1f 93       	push	r17
     c16:	18 2f       	mov	r17, r24
	// Update the avrage 
	unsigned char odometry = ((odometryStepL + odometryStepR)/2)*D_STEP;
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	if((odometry > odometryTrigger)||(reset))
     c18:	20 91 c4 04 	lds	r18, 0x04C4
     c1c:	60 91 7e 07 	lds	r22, 0x077E
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	62 0f       	add	r22, r18
     c24:	71 1d       	adc	r23, r1
     c26:	75 95       	asr	r23
     c28:	67 95       	ror	r22
     c2a:	88 27       	eor	r24, r24
     c2c:	77 fd       	sbrc	r23, 7
     c2e:	80 95       	com	r24
     c30:	98 2f       	mov	r25, r24
     c32:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
     c36:	2c ed       	ldi	r18, 0xDC	; 220
     c38:	38 eb       	ldi	r19, 0xB8	; 184
     c3a:	48 e0       	ldi	r20, 0x08	; 8
     c3c:	5e e3       	ldi	r21, 0x3E	; 62
     c3e:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
     c42:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
     c46:	20 91 c5 05 	lds	r18, 0x05C5
     c4a:	26 17       	cp	r18, r22
     c4c:	10 f0       	brcs	.+4      	; 0xc52 <checkOdometry+0x3e>
     c4e:	11 23       	and	r17, r17
     c50:	39 f0       	breq	.+14     	; 0xc60 <checkOdometry+0x4c>
	{
		odometryFlag = 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 f0 06 	sts	0x06F0, r24
		odometryStepL = 0;
     c58:	10 92 7e 07 	sts	0x077E, r1
		odometryStepR = 0;
     c5c:	10 92 c4 04 	sts	0x04C4, r1
	}
}
     c60:	1f 91       	pop	r17
     c62:	08 95       	ret

00000c64 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
     c6c:	60 91 3e 05 	lds	r22, 0x053E
     c70:	70 91 3f 05 	lds	r23, 0x053F
     c74:	80 91 40 05 	lds	r24, 0x0540
     c78:	90 91 41 05 	lds	r25, 0x0541
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e5       	ldi	r20, 0x50	; 80
     c82:	51 e4       	ldi	r21, 0x41	; 65
     c84:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
     c88:	f8 2e       	mov	r15, r24
     c8a:	ff 1c       	adc	r15, r15
     c8c:	ff 24       	eor	r15, r15
     c8e:	ff 1c       	adc	r15, r15
     c90:	ff 0c       	add	r15, r15
     c92:	ff 0c       	add	r15, r15
     c94:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
     c96:	60 91 ec 06 	lds	r22, 0x06EC
     c9a:	70 91 ed 06 	lds	r23, 0x06ED
     c9e:	80 91 ee 06 	lds	r24, 0x06EE
     ca2:	90 91 ef 06 	lds	r25, 0x06EF
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 ef       	ldi	r20, 0xF0	; 240
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
     cb2:	08 2f       	mov	r16, r24
     cb4:	00 1f       	adc	r16, r16
     cb6:	00 27       	eor	r16, r16
     cb8:	00 1f       	adc	r16, r16
     cba:	00 0f       	add	r16, r16
     cbc:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
     cbe:	60 91 48 05 	lds	r22, 0x0548
     cc2:	70 91 49 05 	lds	r23, 0x0549
     cc6:	80 91 4a 05 	lds	r24, 0x054A
     cca:	90 91 4b 05 	lds	r25, 0x054B
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	4c e0       	ldi	r20, 0x0C	; 12
     cd4:	52 e4       	ldi	r21, 0x42	; 66
     cd6:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
     cda:	18 2f       	mov	r17, r24
     cdc:	11 1f       	adc	r17, r17
     cde:	11 27       	eor	r17, r17
     ce0:	11 1f       	adc	r17, r17
     ce2:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
     ce4:	ee 24       	eor	r14, r14
     ce6:	60 91 f1 06 	lds	r22, 0x06F1
     cea:	70 91 f2 06 	lds	r23, 0x06F2
     cee:	80 91 f3 06 	lds	r24, 0x06F3
     cf2:	90 91 f4 06 	lds	r25, 0x06F4
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 ef       	ldi	r20, 0xF0	; 240
     cfc:	51 e4       	ldi	r21, 0x41	; 65
     cfe:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
     d02:	88 23       	and	r24, r24
     d04:	14 f4       	brge	.+4      	; 0xd0a <checkWorld+0xa6>
     d06:	ee 24       	eor	r14, r14
     d08:	e3 94       	inc	r14
     d0a:	8f 2d       	mov	r24, r15
     d0c:	8e 0d       	add	r24, r14
     d0e:	80 0f       	add	r24, r16
     d10:	81 0f       	add	r24, r17
     d12:	80 93 46 05 	sts	0x0546, r24
	nextGateway = moveGateways[currentMoveWorld+1];
     d16:	20 91 47 05 	lds	r18, 0x0547
     d1a:	e2 2f       	mov	r30, r18
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	e3 59       	subi	r30, 0x93	; 147
     d20:	f8 4f       	sbci	r31, 0xF8	; 248
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	90 93 4c 05 	sts	0x054C, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
     d28:	89 17       	cp	r24, r25
     d2a:	19 f4       	brne	.+6      	; 0xd32 <checkWorld+0xce>
		currentMoveWorld += 1;
     d2c:	2f 5f       	subi	r18, 0xFF	; 255
     d2e:	20 93 47 05 	sts	0x0547, r18
	}
}
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
     d3c:	2f 92       	push	r2
     d3e:	3f 92       	push	r3
     d40:	4f 92       	push	r4
     d42:	5f 92       	push	r5
     d44:	6f 92       	push	r6
     d46:	7f 92       	push	r7
     d48:	8f 92       	push	r8
     d4a:	9f 92       	push	r9
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	00 d0       	rcall	.+0      	; 0xd62 <moveAway+0x26>
     d62:	00 d0       	rcall	.+0      	; 0xd64 <moveAway+0x28>
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
     d68:	60 90 3e 05 	lds	r6, 0x053E
     d6c:	70 90 3f 05 	lds	r7, 0x053F
     d70:	80 90 40 05 	lds	r8, 0x0540
     d74:	90 90 41 05 	lds	r9, 0x0541
     d78:	a0 90 48 05 	lds	r10, 0x0548
     d7c:	b0 90 49 05 	lds	r11, 0x0549
     d80:	c0 90 4a 05 	lds	r12, 0x054A
     d84:	d0 90 4b 05 	lds	r13, 0x054B
	float moveX = rtIR - ltIR;
     d88:	e0 90 f1 06 	lds	r14, 0x06F1
     d8c:	f0 90 f2 06 	lds	r15, 0x06F2
     d90:	00 91 f3 06 	lds	r16, 0x06F3
     d94:	10 91 f4 06 	lds	r17, 0x06F4
     d98:	80 91 ec 06 	lds	r24, 0x06EC
     d9c:	90 91 ed 06 	lds	r25, 0x06ED
     da0:	a0 91 ee 06 	lds	r26, 0x06EE
     da4:	b0 91 ef 06 	lds	r27, 0x06EF
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	ab 83       	std	Y+3, r26	; 0x03
     dae:	bc 83       	std	Y+4, r27	; 0x04
     db0:	c8 01       	movw	r24, r16
     db2:	b7 01       	movw	r22, r14
     db4:	29 81       	ldd	r18, Y+1	; 0x01
     db6:	3a 81       	ldd	r19, Y+2	; 0x02
     db8:	4b 81       	ldd	r20, Y+3	; 0x03
     dba:	5c 81       	ldd	r21, Y+4	; 0x04
     dbc:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__subsf3>
     dc0:	1b 01       	movw	r2, r22
     dc2:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
     dc4:	c4 01       	movw	r24, r8
     dc6:	b3 01       	movw	r22, r6
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 ee       	ldi	r20, 0xE0	; 224
     dce:	50 e4       	ldi	r21, 0x40	; 64
     dd0:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
     dd4:	87 fd       	sbrc	r24, 7
     dd6:	0b c0       	rjmp	.+22     	; 0xdee <moveAway+0xb2>
     dd8:	c6 01       	movw	r24, r12
     dda:	b5 01       	movw	r22, r10
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 ee       	ldi	r20, 0xE0	; 224
     de2:	50 e4       	ldi	r21, 0x40	; 64
     de4:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
     de8:	88 23       	and	r24, r24
     dea:	0c f0       	brlt	.+2      	; 0xdee <moveAway+0xb2>
     dec:	68 c0       	rjmp	.+208    	; 0xebe <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
     dee:	c4 01       	movw	r24, r8
     df0:	b3 01       	movw	r22, r6
     df2:	a6 01       	movw	r20, r12
     df4:	95 01       	movw	r18, r10
     df6:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__subsf3>
     dfa:	7b 01       	movw	r14, r22
     dfc:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
     dfe:	77 24       	eor	r7, r7
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__gesf2>
     e0c:	88 23       	and	r24, r24
     e0e:	14 f0       	brlt	.+4      	; 0xe14 <moveAway+0xd8>
     e10:	77 24       	eor	r7, r7
     e12:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     e14:	c8 01       	movw	r24, r16
     e16:	b7 01       	movw	r22, r14
     e18:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <__fixsfsi>
     e1c:	9b 01       	movw	r18, r22
     e1e:	77 ff       	sbrs	r23, 7
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <moveAway+0xec>
     e22:	30 95       	com	r19
     e24:	21 95       	neg	r18
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	b9 01       	movw	r22, r18
     e2a:	88 27       	eor	r24, r24
     e2c:	77 fd       	sbrc	r23, 7
     e2e:	80 95       	com	r24
     e30:	98 2f       	mov	r25, r24
     e32:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
     e36:	6b 01       	movw	r12, r22
     e38:	7c 01       	movw	r14, r24
     e3a:	ad b7       	in	r26, 0x3d	; 61
     e3c:	be b7       	in	r27, 0x3e	; 62
     e3e:	19 97       	sbiw	r26, 0x09	; 9
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	be bf       	out	0x3e, r27	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	ad bf       	out	0x3d, r26	; 61
     e4a:	0d b7       	in	r16, 0x3d	; 61
     e4c:	1e b7       	in	r17, 0x3e	; 62
     e4e:	0f 5f       	subi	r16, 0xFF	; 255
     e50:	1f 4f       	sbci	r17, 0xFF	; 255
     e52:	a2 01       	movw	r20, r4
     e54:	91 01       	movw	r18, r2
     e56:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
     e5a:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
     e5e:	4b 01       	movw	r8, r22
     e60:	5c 01       	movw	r10, r24
     e62:	82 e3       	ldi	r24, 0x32	; 50
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	f8 01       	movw	r30, r16
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	a2 01       	movw	r20, r4
     e72:	91 01       	movw	r18, r2
     e74:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__subsf3>
     e78:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
     e7c:	d8 01       	movw	r26, r16
     e7e:	13 96       	adiw	r26, 0x03	; 3
     e80:	7c 93       	st	X, r23
     e82:	6e 93       	st	-X, r22
     e84:	12 97       	sbiw	r26, 0x02	; 2
     e86:	82 ec       	ldi	r24, 0xC2	; 194
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	15 96       	adiw	r26, 0x05	; 5
     e8c:	9c 93       	st	X, r25
     e8e:	8e 93       	st	-X, r24
     e90:	14 97       	sbiw	r26, 0x04	; 4
     e92:	16 96       	adiw	r26, 0x06	; 6
     e94:	1c 92       	st	X, r1
     e96:	16 97       	sbiw	r26, 0x06	; 6
     e98:	18 96       	adiw	r26, 0x08	; 8
     e9a:	1c 92       	st	X, r1
     e9c:	1e 92       	st	-X, r1
     e9e:	17 97       	sbiw	r26, 0x07	; 7
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	62 e0       	ldi	r22, 0x02	; 2
     ea4:	47 2d       	mov	r20, r7
     ea6:	22 e3       	ldi	r18, 0x32	; 50
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	84 01       	movw	r16, r8
     eac:	72 ec       	ldi	r23, 0xC2	; 194
     eae:	e7 2e       	mov	r14, r23
     eb0:	71 e0       	ldi	r23, 0x01	; 1
     eb2:	f7 2e       	mov	r15, r23
     eb4:	cc 24       	eor	r12, r12
     eb6:	aa 24       	eor	r10, r10
     eb8:	bb 24       	eor	r11, r11
     eba:	87 2c       	mov	r8, r7
     ebc:	82 c0       	rjmp	.+260    	; 0xfc2 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
     ebe:	c8 01       	movw	r24, r16
     ec0:	b7 01       	movw	r22, r14
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e2       	ldi	r20, 0x20	; 32
     ec8:	51 e4       	ldi	r21, 0x41	; 65
     eca:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
     ece:	88 23       	and	r24, r24
     ed0:	b4 f5       	brge	.+108    	; 0xf3e <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     ed2:	c2 01       	movw	r24, r4
     ed4:	b1 01       	movw	r22, r2
     ed6:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <__fixsfsi>
     eda:	8b 01       	movw	r16, r22
     edc:	77 ff       	sbrs	r23, 7
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <moveAway+0x1aa>
     ee0:	10 95       	com	r17
     ee2:	01 95       	neg	r16
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
     ee6:	2d b7       	in	r18, 0x3d	; 61
     ee8:	3e b7       	in	r19, 0x3e	; 62
     eea:	29 50       	subi	r18, 0x09	; 9
     eec:	30 40       	sbci	r19, 0x00	; 0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	3e bf       	out	0x3e, r19	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	2d bf       	out	0x3d, r18	; 61
     ef8:	ed b7       	in	r30, 0x3d	; 61
     efa:	fe b7       	in	r31, 0x3e	; 62
     efc:	31 96       	adiw	r30, 0x01	; 1
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	ad b7       	in	r26, 0x3d	; 61
     f04:	be b7       	in	r27, 0x3e	; 62
     f06:	12 96       	adiw	r26, 0x02	; 2
     f08:	9c 93       	st	X, r25
     f0a:	8e 93       	st	-X, r24
     f0c:	11 97       	sbiw	r26, 0x01	; 1
     f0e:	13 83       	std	Z+3, r17	; 0x03
     f10:	02 83       	std	Z+2, r16	; 0x02
     f12:	82 ec       	ldi	r24, 0xC2	; 194
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	95 83       	std	Z+5, r25	; 0x05
     f18:	84 83       	std	Z+4, r24	; 0x04
     f1a:	16 82       	std	Z+6, r1	; 0x06
     f1c:	10 86       	std	Z+8, r1	; 0x08
     f1e:	17 82       	std	Z+7, r1	; 0x07
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	62 e0       	ldi	r22, 0x02	; 2
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	28 ec       	ldi	r18, 0xC8	; 200
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	52 ec       	ldi	r21, 0xC2	; 194
     f2c:	e5 2e       	mov	r14, r21
     f2e:	51 e0       	ldi	r21, 0x01	; 1
     f30:	f5 2e       	mov	r15, r21
     f32:	cc 24       	eor	r12, r12
     f34:	aa 24       	eor	r10, r10
     f36:	bb 24       	eor	r11, r11
     f38:	88 24       	eor	r8, r8
     f3a:	83 94       	inc	r8
     f3c:	42 c0       	rjmp	.+132    	; 0xfc2 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
     f3e:	69 81       	ldd	r22, Y+1	; 0x01
     f40:	7a 81       	ldd	r23, Y+2	; 0x02
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e2       	ldi	r20, 0x20	; 32
     f4c:	51 e4       	ldi	r21, 0x41	; 65
     f4e:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
     f52:	87 fd       	sbrc	r24, 7
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <moveAway+0x21e>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	3f c0       	rjmp	.+126    	; 0xfd8 <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     f5a:	c2 01       	movw	r24, r4
     f5c:	b1 01       	movw	r22, r2
     f5e:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <__fixsfsi>
     f62:	8b 01       	movw	r16, r22
     f64:	77 ff       	sbrs	r23, 7
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <moveAway+0x232>
     f68:	10 95       	com	r17
     f6a:	01 95       	neg	r16
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	2d b7       	in	r18, 0x3d	; 61
     f70:	3e b7       	in	r19, 0x3e	; 62
     f72:	29 50       	subi	r18, 0x09	; 9
     f74:	30 40       	sbci	r19, 0x00	; 0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	3e bf       	out	0x3e, r19	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	2d bf       	out	0x3d, r18	; 61
     f80:	ed b7       	in	r30, 0x3d	; 61
     f82:	fe b7       	in	r31, 0x3e	; 62
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	88 ec       	ldi	r24, 0xC8	; 200
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	ad b7       	in	r26, 0x3d	; 61
     f8c:	be b7       	in	r27, 0x3e	; 62
     f8e:	12 96       	adiw	r26, 0x02	; 2
     f90:	9c 93       	st	X, r25
     f92:	8e 93       	st	-X, r24
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	13 83       	std	Z+3, r17	; 0x03
     f98:	02 83       	std	Z+2, r16	; 0x02
     f9a:	82 ec       	ldi	r24, 0xC2	; 194
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	95 83       	std	Z+5, r25	; 0x05
     fa0:	84 83       	std	Z+4, r24	; 0x04
     fa2:	16 82       	std	Z+6, r1	; 0x06
     fa4:	10 86       	std	Z+8, r1	; 0x08
     fa6:	17 82       	std	Z+7, r1	; 0x07
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	62 e0       	ldi	r22, 0x02	; 2
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	28 ec       	ldi	r18, 0xC8	; 200
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	92 ec       	ldi	r25, 0xC2	; 194
     fb4:	e9 2e       	mov	r14, r25
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	f9 2e       	mov	r15, r25
     fba:	cc 24       	eor	r12, r12
     fbc:	aa 24       	eor	r10, r10
     fbe:	bb 24       	eor	r11, r11
     fc0:	88 24       	eor	r8, r8
     fc2:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <STEPPER_move>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	ed b7       	in	r30, 0x3d	; 61
     fca:	fe b7       	in	r31, 0x3e	; 62
     fcc:	39 96       	adiw	r30, 0x09	; 9
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	fe bf       	out	0x3e, r31	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	9f 90       	pop	r9
     ff6:	8f 90       	pop	r8
     ff8:	7f 90       	pop	r7
     ffa:	6f 90       	pop	r6
     ffc:	5f 90       	pop	r5
     ffe:	4f 90       	pop	r4
    1000:	3f 90       	pop	r3
    1002:	2f 90       	pop	r2
    1004:	08 95       	ret

00001006 <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    1006:	8f 92       	push	r8
    1008:	af 92       	push	r10
    100a:	bf 92       	push	r11
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    101c:	0e 94 22 1c 	call	0x3844	; 0x3844 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    1020:	67 2b       	or	r22, r23
    1022:	09 f0       	breq	.+2      	; 0x1026 <moveWander+0x20>
    1024:	76 c0       	rjmp	.+236    	; 0x1112 <moveWander+0x10c>
    1026:	89 2b       	or	r24, r25
    1028:	09 f0       	breq	.+2      	; 0x102c <moveWander+0x26>
    102a:	73 c0       	rjmp	.+230    	; 0x1112 <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    102c:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <rand>
    1030:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    1032:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <rand>
    1036:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    1038:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <rand>
    103c:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    103e:	0e 94 d0 35 	call	0x6ba0	; 0x6ba0 <rand>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	6a e0       	ldi	r22, 0x0A	; 10
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	0e 94 01 34 	call	0x6802	; 0x6802 <__divmodhi4>
    104c:	08 97       	sbiw	r24, 0x08	; 8
    104e:	0c f0       	brlt	.+2      	; 0x1052 <moveWander+0x4c>
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	82 2e       	mov	r8, r18
    1054:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    1056:	c8 01       	movw	r24, r16
    1058:	60 e9       	ldi	r22, 0x90	; 144
    105a:	71 e0       	ldi	r23, 0x01	; 1
    105c:	0e 94 01 34 	call	0x6802	; 0x6802 <__divmodhi4>
    1060:	f0 e9       	ldi	r31, 0x90	; 144
    1062:	af 2e       	mov	r10, r31
    1064:	f1 e0       	ldi	r31, 0x01	; 1
    1066:	bf 2e       	mov	r11, r31
    1068:	a8 0e       	add	r10, r24
    106a:	b9 1e       	adc	r11, r25
    106c:	8d b7       	in	r24, 0x3d	; 61
    106e:	9e b7       	in	r25, 0x3e	; 62
    1070:	09 97       	sbiw	r24, 0x09	; 9
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	9e bf       	out	0x3e, r25	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	8d bf       	out	0x3d, r24	; 61
    107c:	0d b7       	in	r16, 0x3d	; 61
    107e:	1e b7       	in	r17, 0x3e	; 62
    1080:	0f 5f       	subi	r16, 0xFF	; 255
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	c7 01       	movw	r24, r14
    1086:	68 ec       	ldi	r22, 0xC8	; 200
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	0e 94 01 34 	call	0x6802	; 0x6802 <__divmodhi4>
    108e:	88 53       	subi	r24, 0x38	; 56
    1090:	9f 4f       	sbci	r25, 0xFF	; 255
    1092:	aa 27       	eor	r26, r26
    1094:	97 fd       	sbrc	r25, 7
    1096:	a0 95       	com	r26
    1098:	ba 2f       	mov	r27, r26
    109a:	bc 01       	movw	r22, r24
    109c:	cd 01       	movw	r24, r26
    109e:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
    10a2:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    10a6:	6b 01       	movw	r12, r22
    10a8:	7c 01       	movw	r14, r24
    10aa:	f8 01       	movw	r30, r16
    10ac:	b1 82       	std	Z+1, r11	; 0x01
    10ae:	a0 82       	st	Z, r10
    10b0:	ce 01       	movw	r24, r28
    10b2:	68 ec       	ldi	r22, 0xC8	; 200
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	0e 94 01 34 	call	0x6802	; 0x6802 <__divmodhi4>
    10ba:	88 53       	subi	r24, 0x38	; 56
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	aa 27       	eor	r26, r26
    10c0:	97 fd       	sbrc	r25, 7
    10c2:	a0 95       	com	r26
    10c4:	ba 2f       	mov	r27, r26
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
    10ce:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    10d2:	f8 01       	movw	r30, r16
    10d4:	73 83       	std	Z+3, r23	; 0x03
    10d6:	62 83       	std	Z+2, r22	; 0x02
    10d8:	82 ec       	ldi	r24, 0xC2	; 194
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	95 83       	std	Z+5, r25	; 0x05
    10de:	84 83       	std	Z+4, r24	; 0x04
    10e0:	16 82       	std	Z+6, r1	; 0x06
    10e2:	10 86       	std	Z+8, r1	; 0x08
    10e4:	17 82       	std	Z+7, r1	; 0x07
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	62 e0       	ldi	r22, 0x02	; 2
    10ea:	48 2d       	mov	r20, r8
    10ec:	95 01       	movw	r18, r10
    10ee:	86 01       	movw	r16, r12
    10f0:	e2 ec       	ldi	r30, 0xC2	; 194
    10f2:	ee 2e       	mov	r14, r30
    10f4:	e1 e0       	ldi	r30, 0x01	; 1
    10f6:	fe 2e       	mov	r15, r30
    10f8:	cc 24       	eor	r12, r12
    10fa:	aa 24       	eor	r10, r10
    10fc:	bb 24       	eor	r11, r11
    10fe:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <STEPPER_move>
    1102:	8d b7       	in	r24, 0x3d	; 61
    1104:	9e b7       	in	r25, 0x3e	; 62
    1106:	09 96       	adiw	r24, 0x09	; 9
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	9e bf       	out	0x3e, r25	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	8f 90       	pop	r8
    112a:	08 95       	ret

0000112c <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    112c:	2f 92       	push	r2
    112e:	3f 92       	push	r3
    1130:	4f 92       	push	r4
    1132:	5f 92       	push	r5
    1134:	6f 92       	push	r6
    1136:	7f 92       	push	r7
    1138:	8f 92       	push	r8
    113a:	9f 92       	push	r9
    113c:	af 92       	push	r10
    113e:	bf 92       	push	r11
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    114c:	e0 90 3e 05 	lds	r14, 0x053E
    1150:	f0 90 3f 05 	lds	r15, 0x053F
    1154:	00 91 40 05 	lds	r16, 0x0540
    1158:	10 91 41 05 	lds	r17, 0x0541
    115c:	33 24       	eor	r3, r3
    115e:	c8 01       	movw	r24, r16
    1160:	b7 01       	movw	r22, r14
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
    116e:	88 23       	and	r24, r24
    1170:	14 f4       	brge	.+4      	; 0x1176 <moveWall+0x4a>
    1172:	33 24       	eor	r3, r3
    1174:	33 94       	inc	r3
    1176:	a0 90 f1 06 	lds	r10, 0x06F1
    117a:	b0 90 f2 06 	lds	r11, 0x06F2
    117e:	c0 90 f3 06 	lds	r12, 0x06F3
    1182:	d0 90 f4 06 	lds	r13, 0x06F4
    1186:	40 90 ec 06 	lds	r4, 0x06EC
    118a:	50 90 ed 06 	lds	r5, 0x06ED
    118e:	60 90 ee 06 	lds	r6, 0x06EE
    1192:	70 90 ef 06 	lds	r7, 0x06EF
    1196:	88 24       	eor	r8, r8
    1198:	60 91 48 05 	lds	r22, 0x0548
    119c:	70 91 49 05 	lds	r23, 0x0549
    11a0:	80 91 4a 05 	lds	r24, 0x054A
    11a4:	90 91 4b 05 	lds	r25, 0x054B
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e7       	ldi	r20, 0x70	; 112
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
    11b4:	88 23       	and	r24, r24
    11b6:	14 f4       	brge	.+4      	; 0x11bc <moveWall+0x90>
    11b8:	88 24       	eor	r8, r8
    11ba:	83 94       	inc	r8
    11bc:	93 2c       	mov	r9, r3
    11be:	98 28       	or	r9, r8
    11c0:	88 24       	eor	r8, r8
    11c2:	c6 01       	movw	r24, r12
    11c4:	b5 01       	movw	r22, r10
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e2       	ldi	r20, 0x20	; 32
    11cc:	51 e4       	ldi	r21, 0x41	; 65
    11ce:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
    11d2:	88 23       	and	r24, r24
    11d4:	14 f4       	brge	.+4      	; 0x11da <moveWall+0xae>
    11d6:	88 24       	eor	r8, r8
    11d8:	83 94       	inc	r8
    11da:	98 28       	or	r9, r8
    11dc:	88 24       	eor	r8, r8
    11de:	c3 01       	movw	r24, r6
    11e0:	b2 01       	movw	r22, r4
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e2       	ldi	r20, 0x20	; 32
    11e8:	51 e4       	ldi	r21, 0x41	; 65
    11ea:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	14 f4       	brge	.+4      	; 0x11f6 <moveWall+0xca>
    11f2:	88 24       	eor	r8, r8
    11f4:	83 94       	inc	r8
    11f6:	29 2c       	mov	r2, r9
    11f8:	28 28       	or	r2, r8
	if(!isWall){	
    11fa:	81 f4       	brne	.+32     	; 0x121c <moveWall+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	9f e4       	ldi	r25, 0x4F	; 79
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	79 01       	movw	r14, r18
    120e:	8a 01       	movw	r16, r20
    1210:	59 01       	movw	r10, r18
    1212:	6a 01       	movw	r12, r20
    1214:	88 24       	eor	r8, r8
    1216:	0e 94 49 13 	call	0x2692	; 0x2692 <move_arc_stnb>
    121a:	0f c1       	rjmp	.+542    	; 0x143a <moveWall+0x30e>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    121c:	c6 01       	movw	r24, r12
    121e:	b5 01       	movw	r22, r10
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e2       	ldi	r20, 0x20	; 32
    1226:	51 e4       	ldi	r21, 0x41	; 65
    1228:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__gesf2>
    122c:	18 16       	cp	r1, r24
    122e:	64 f4       	brge	.+24     	; 0x1248 <moveWall+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a0 e0       	ldi	r26, 0x00	; 0
    1236:	b1 ec       	ldi	r27, 0xC1	; 193
    1238:	80 93 f1 06 	sts	0x06F1, r24
    123c:	90 93 f2 06 	sts	0x06F2, r25
    1240:	a0 93 f3 06 	sts	0x06F3, r26
    1244:	b0 93 f4 06 	sts	0x06F4, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    1248:	c3 01       	movw	r24, r6
    124a:	b2 01       	movw	r22, r4
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e2       	ldi	r20, 0x20	; 32
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__gesf2>
    1258:	18 16       	cp	r1, r24
    125a:	14 f0       	brlt	.+4      	; 0x1260 <moveWall+0x134>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	0d c0       	rjmp	.+26     	; 0x127a <moveWall+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e0       	ldi	r26, 0x00	; 0
    1266:	b1 ec       	ldi	r27, 0xC1	; 193
    1268:	80 93 ec 06 	sts	0x06EC, r24
    126c:	90 93 ed 06 	sts	0x06ED, r25
    1270:	a0 93 ee 06 	sts	0x06EE, r26
    1274:	b0 93 ef 06 	sts	0x06EF, r27
    1278:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    127a:	33 20       	and	r3, r3
    127c:	21 f1       	breq	.+72     	; 0x12c6 <moveWall+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    127e:	88 23       	and	r24, r24
    1280:	29 f0       	breq	.+10     	; 0x128c <moveWall+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	8a e7       	ldi	r24, 0x7A	; 122
    1288:	94 e4       	ldi	r25, 0x44	; 68
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <moveWall+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	8a e7       	ldi	r24, 0x7A	; 122
    1292:	94 ec       	ldi	r25, 0xC4	; 196
    1294:	a8 01       	movw	r20, r16
    1296:	97 01       	movw	r18, r14
    1298:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    129c:	20 91 ec 06 	lds	r18, 0x06EC
    12a0:	30 91 ed 06 	lds	r19, 0x06ED
    12a4:	40 91 ee 06 	lds	r20, 0x06EE
    12a8:	50 91 ef 06 	lds	r21, 0x06EF
    12ac:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    12b0:	9b 01       	movw	r18, r22
    12b2:	ac 01       	movw	r20, r24
    12b4:	60 91 f1 06 	lds	r22, 0x06F1
    12b8:	70 91 f2 06 	lds	r23, 0x06F2
    12bc:	80 91 f3 06 	lds	r24, 0x06F3
    12c0:	90 91 f4 06 	lds	r25, 0x06F4
    12c4:	10 c0       	rjmp	.+32     	; 0x12e6 <moveWall+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    12c6:	60 91 f1 06 	lds	r22, 0x06F1
    12ca:	70 91 f2 06 	lds	r23, 0x06F2
    12ce:	80 91 f3 06 	lds	r24, 0x06F3
    12d2:	90 91 f4 06 	lds	r25, 0x06F4
    12d6:	20 91 ec 06 	lds	r18, 0x06EC
    12da:	30 91 ed 06 	lds	r19, 0x06ED
    12de:	40 91 ee 06 	lds	r20, 0x06EE
    12e2:	50 91 ef 06 	lds	r21, 0x06EF
    12e6:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    12ea:	90 58       	subi	r25, 0x80	; 128
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	0e 94 d5 12 	call	0x25aa	; 0x25aa <pidController>
    12f2:	6b 01       	movw	r12, r22
    12f4:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    12f6:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <__fixsfsi>
    12fa:	8b 01       	movw	r16, r22
    12fc:	77 ff       	sbrs	r23, 7
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <moveWall+0x1da>
    1300:	10 95       	com	r17
    1302:	01 95       	neg	r16
    1304:	1f 4f       	sbci	r17, 0xFF	; 255
    1306:	05 36       	cpi	r16, 0x65	; 101
    1308:	11 05       	cpc	r17, r1
    130a:	fc f0       	brlt	.+62     	; 0x134a <moveWall+0x21e>
    130c:	c7 01       	movw	r24, r14
    130e:	b6 01       	movw	r22, r12
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
    131c:	88 23       	and	r24, r24
    131e:	a9 f0       	breq	.+42     	; 0x134a <moveWall+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    1320:	b8 01       	movw	r22, r16
    1322:	88 27       	eor	r24, r24
    1324:	77 fd       	sbrc	r23, 7
    1326:	80 95       	com	r24
    1328:	98 2f       	mov	r25, r24
    132a:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
    132e:	9b 01       	movw	r18, r22
    1330:	ac 01       	movw	r20, r24
    1332:	c7 01       	movw	r24, r14
    1334:	b6 01       	movw	r22, r12
    1336:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	48 ec       	ldi	r20, 0xC8	; 200
    1340:	52 e4       	ldi	r21, 0x42	; 66
    1342:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    1346:	6b 01       	movw	r12, r22
    1348:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    134a:	c7 01       	movw	r24, r14
    134c:	b6 01       	movw	r22, r12
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	48 ec       	ldi	r20, 0xC8	; 200
    1354:	52 e4       	ldi	r21, 0x42	; 66
    1356:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    135a:	6b 01       	movw	r12, r22
    135c:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
    135e:	0e 94 22 1c 	call	0x3844	; 0x3844 <STEPPER_get_nSteps>
    1362:	60 93 e4 06 	sts	0x06E4, r22
    1366:	70 93 e5 06 	sts	0x06E5, r23
    136a:	80 93 e6 06 	sts	0x06E6, r24
    136e:	90 93 e7 06 	sts	0x06E7, r25
	odometryStepL += WALL_STEP - curr_step.left;
    1372:	80 91 7e 07 	lds	r24, 0x077E
    1376:	8e 5c       	subi	r24, 0xCE	; 206
    1378:	86 1b       	sub	r24, r22
    137a:	80 93 7e 07 	sts	0x077E, r24
	odometryStepR += WALL_STEP - curr_step.right;
    137e:	80 91 c4 04 	lds	r24, 0x04C4
    1382:	8e 5c       	subi	r24, 0xCE	; 206
    1384:	90 91 e6 06 	lds	r25, 0x06E6
    1388:	89 1b       	sub	r24, r25
    138a:	80 93 c4 04 	sts	0x04C4, r24
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    138e:	8d b7       	in	r24, 0x3d	; 61
    1390:	9e b7       	in	r25, 0x3e	; 62
    1392:	09 97       	sbiw	r24, 0x09	; 9
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	9e bf       	out	0x3e, r25	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	8d bf       	out	0x3d, r24	; 61
    139e:	0d b7       	in	r16, 0x3d	; 61
    13a0:	1e b7       	in	r17, 0x3e	; 62
    13a2:	0f 5f       	subi	r16, 0xFF	; 255
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	48 ec       	ldi	r20, 0xC8	; 200
    13b0:	52 e4       	ldi	r21, 0x42	; 66
    13b2:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	48 ec       	ldi	r20, 0xC8	; 200
    13bc:	52 e4       	ldi	r21, 0x42	; 66
    13be:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    13c2:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    13c6:	4b 01       	movw	r8, r22
    13c8:	5c 01       	movw	r10, r24
    13ca:	82 e3       	ldi	r24, 0x32	; 50
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	f8 01       	movw	r30, r16
    13d0:	91 83       	std	Z+1, r25	; 0x01
    13d2:	80 83       	st	Z, r24
    13d4:	c7 01       	movw	r24, r14
    13d6:	b6 01       	movw	r22, r12
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	48 ec       	ldi	r20, 0xC8	; 200
    13de:	52 ec       	ldi	r21, 0xC2	; 194
    13e0:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	48 ec       	ldi	r20, 0xC8	; 200
    13ea:	52 e4       	ldi	r21, 0x42	; 66
    13ec:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    13f0:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    13f4:	f8 01       	movw	r30, r16
    13f6:	73 83       	std	Z+3, r23	; 0x03
    13f8:	62 83       	std	Z+2, r22	; 0x02
    13fa:	82 ec       	ldi	r24, 0xC2	; 194
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	95 83       	std	Z+5, r25	; 0x05
    1400:	84 83       	std	Z+4, r24	; 0x04
    1402:	16 82       	std	Z+6, r1	; 0x06
    1404:	10 86       	std	Z+8, r1	; 0x08
    1406:	17 82       	std	Z+7, r1	; 0x07
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	41 e0       	ldi	r20, 0x01	; 1
    140e:	22 e3       	ldi	r18, 0x32	; 50
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	84 01       	movw	r16, r8
    1414:	a2 ec       	ldi	r26, 0xC2	; 194
    1416:	ea 2e       	mov	r14, r26
    1418:	a1 e0       	ldi	r26, 0x01	; 1
    141a:	fa 2e       	mov	r15, r26
    141c:	cc 24       	eor	r12, r12
    141e:	aa 24       	eor	r10, r10
    1420:	bb 24       	eor	r11, r11
    1422:	88 24       	eor	r8, r8
    1424:	83 94       	inc	r8
    1426:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <STEPPER_move>
    142a:	8d b7       	in	r24, 0x3d	; 61
    142c:	9e b7       	in	r25, 0x3e	; 62
    142e:	09 96       	adiw	r24, 0x09	; 9
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	9e bf       	out	0x3e, r25	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    143a:	82 2d       	mov	r24, r2
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	bf 90       	pop	r11
    144a:	af 90       	pop	r10
    144c:	9f 90       	pop	r9
    144e:	8f 90       	pop	r8
    1450:	7f 90       	pop	r7
    1452:	6f 90       	pop	r6
    1454:	5f 90       	pop	r5
    1456:	4f 90       	pop	r4
    1458:	3f 90       	pop	r3
    145a:	2f 90       	pop	r2
    145c:	08 95       	ret

0000145e <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    145e:	8f 92       	push	r8
    1460:	af 92       	push	r10
    1462:	bf 92       	push	r11
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
	LCD_clear();
    1470:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    1474:	e0 91 47 05 	lds	r30, 0x0547
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	ea 53       	subi	r30, 0x3A	; 58
    147c:	fa 4f       	sbci	r31, 0xFA	; 250
    147e:	e0 81       	ld	r30, Z
    1480:	e0 93 c3 04 	sts	0x04C3, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	e1 30       	cpi	r30, 0x01	; 1
    1488:	09 f4       	brne	.+2      	; 0x148c <moveWorld+0x2e>
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	e3 30       	cpi	r30, 0x03	; 3
    1490:	09 f4       	brne	.+2      	; 0x1494 <moveWorld+0x36>
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	89 2b       	or	r24, r25
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	80 91 c5 04 	lds	r24, 0x04C5
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	11 f4       	brne	.+4      	; 0x14aa <moveWorld+0x4c>
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	24 23       	and	r18, r20
    14ac:	35 23       	and	r19, r21
    14ae:	23 2b       	or	r18, r19
    14b0:	b9 f0       	breq	.+46     	; 0x14e0 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	9f e4       	ldi	r25, 0x4F	; 79
    14ba:	2d eb       	ldi	r18, 0xBD	; 189
    14bc:	34 e7       	ldi	r19, 0x74	; 116
    14be:	4b ed       	ldi	r20, 0xDB	; 219
    14c0:	51 e4       	ldi	r21, 0x41	; 65
    14c2:	0f 2e       	mov	r0, r31
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	ef 2e       	mov	r14, r31
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	ff 2e       	mov	r15, r31
    14cc:	f0 e2       	ldi	r31, 0x20	; 32
    14ce:	0f 2f       	mov	r16, r31
    14d0:	f1 e4       	ldi	r31, 0x41	; 65
    14d2:	1f 2f       	mov	r17, r31
    14d4:	f0 2d       	mov	r31, r0
    14d6:	57 01       	movw	r10, r14
    14d8:	68 01       	movw	r12, r16
    14da:	88 24       	eor	r8, r8
    14dc:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    14e0:	20 91 c5 04 	lds	r18, 0x04C5
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	21 30       	cpi	r18, 0x01	; 1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <moveWorld+0x8e>
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	23 30       	cpi	r18, 0x03	; 3
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <moveWorld+0x96>
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	89 2b       	or	r24, r25
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	80 91 c3 04 	lds	r24, 0x04C3
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	11 f4       	brne	.+4      	; 0x150a <moveWorld+0xac>
    1506:	41 e0       	ldi	r20, 0x01	; 1
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	24 23       	and	r18, r20
    150c:	35 23       	and	r19, r21
    150e:	23 2b       	or	r18, r19
    1510:	b9 f0       	breq	.+46     	; 0x1540 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	9f e4       	ldi	r25, 0x4F	; 79
    151a:	2d eb       	ldi	r18, 0xBD	; 189
    151c:	34 e7       	ldi	r19, 0x74	; 116
    151e:	4b ed       	ldi	r20, 0xDB	; 219
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0f 2e       	mov	r0, r31
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	ef 2e       	mov	r14, r31
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	ff 2e       	mov	r15, r31
    152c:	f0 e2       	ldi	r31, 0x20	; 32
    152e:	0f 2f       	mov	r16, r31
    1530:	f1 e4       	ldi	r31, 0x41	; 65
    1532:	1f 2f       	mov	r17, r31
    1534:	f0 2d       	mov	r31, r0
    1536:	57 01       	movw	r10, r14
    1538:	68 01       	movw	r12, r16
    153a:	88 24       	eor	r8, r8
    153c:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <move_arc_stwt>
	}
	
	switch(currentMove){
    1540:	80 91 c3 04 	lds	r24, 0x04C3
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	c1 f1       	breq	.+112    	; 0x15b8 <moveWorld+0x15a>
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	09 f4       	brne	.+2      	; 0x154e <moveWorld+0xf0>
    154c:	61 c0       	rjmp	.+194    	; 0x1610 <moveWorld+0x1b2>
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	09 f0       	breq	.+2      	; 0x1554 <moveWorld+0xf6>
    1552:	9f c0       	rjmp	.+318    	; 0x1692 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1554:	8d b7       	in	r24, 0x3d	; 61
    1556:	9e b7       	in	r25, 0x3e	; 62
    1558:	08 97       	sbiw	r24, 0x08	; 8
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	9e bf       	out	0x3e, r25	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	8d bf       	out	0x3d, r24	; 61
    1564:	ed b7       	in	r30, 0x3d	; 61
    1566:	fe b7       	in	r31, 0x3e	; 62
    1568:	31 96       	adiw	r30, 0x01	; 1
    156a:	84 e2       	ldi	r24, 0x24	; 36
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	ad b7       	in	r26, 0x3d	; 61
    1570:	be b7       	in	r27, 0x3e	; 62
    1572:	12 96       	adiw	r26, 0x02	; 2
    1574:	9c 93       	st	X, r25
    1576:	8e 93       	st	-X, r24
    1578:	11 97       	sbiw	r26, 0x01	; 1
    157a:	80 91 47 05 	lds	r24, 0x0547
    157e:	82 83       	std	Z+2, r24	; 0x02
    1580:	13 82       	std	Z+3, r1	; 0x03
    1582:	80 91 46 05 	lds	r24, 0x0546
    1586:	84 83       	std	Z+4, r24	; 0x04
    1588:	15 82       	std	Z+5, r1	; 0x05
    158a:	80 91 4c 05 	lds	r24, 0x054C
    158e:	86 83       	std	Z+6, r24	; 0x06
    1590:	17 82       	std	Z+7, r1	; 0x07
    1592:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1596:	ed b7       	in	r30, 0x3d	; 61
    1598:	fe b7       	in	r31, 0x3e	; 62
    159a:	38 96       	adiw	r30, 0x08	; 8
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	fe bf       	out	0x3e, r31	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	ed bf       	out	0x3d, r30	; 61
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	44 e8       	ldi	r20, 0x84	; 132
    15b4:	51 ec       	ldi	r21, 0xC1	; 193
    15b6:	5d c0       	rjmp	.+186    	; 0x1672 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    15b8:	8d b7       	in	r24, 0x3d	; 61
    15ba:	9e b7       	in	r25, 0x3e	; 62
    15bc:	08 97       	sbiw	r24, 0x08	; 8
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	9e bf       	out	0x3e, r25	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	8d bf       	out	0x3d, r24	; 61
    15c8:	ed b7       	in	r30, 0x3d	; 61
    15ca:	fe b7       	in	r31, 0x3e	; 62
    15cc:	31 96       	adiw	r30, 0x01	; 1
    15ce:	8f e4       	ldi	r24, 0x4F	; 79
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	ad b7       	in	r26, 0x3d	; 61
    15d4:	be b7       	in	r27, 0x3e	; 62
    15d6:	12 96       	adiw	r26, 0x02	; 2
    15d8:	9c 93       	st	X, r25
    15da:	8e 93       	st	-X, r24
    15dc:	11 97       	sbiw	r26, 0x01	; 1
    15de:	80 91 47 05 	lds	r24, 0x0547
    15e2:	82 83       	std	Z+2, r24	; 0x02
    15e4:	13 82       	std	Z+3, r1	; 0x03
    15e6:	80 91 46 05 	lds	r24, 0x0546
    15ea:	84 83       	std	Z+4, r24	; 0x04
    15ec:	15 82       	std	Z+5, r1	; 0x05
    15ee:	80 91 4c 05 	lds	r24, 0x054C
    15f2:	86 83       	std	Z+6, r24	; 0x06
    15f4:	17 82       	std	Z+7, r1	; 0x07
    15f6:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    15fa:	ed b7       	in	r30, 0x3d	; 61
    15fc:	fe b7       	in	r31, 0x3e	; 62
    15fe:	38 96       	adiw	r30, 0x08	; 8
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	fe bf       	out	0x3e, r31	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	ed bf       	out	0x3d, r30	; 61
    160a:	0e 94 96 08 	call	0x112c	; 0x112c <moveWall>
    160e:	53 c0       	rjmp	.+166    	; 0x16b6 <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1610:	8d b7       	in	r24, 0x3d	; 61
    1612:	9e b7       	in	r25, 0x3e	; 62
    1614:	08 97       	sbiw	r24, 0x08	; 8
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	9e bf       	out	0x3e, r25	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	8d bf       	out	0x3d, r24	; 61
    1620:	ed b7       	in	r30, 0x3d	; 61
    1622:	fe b7       	in	r31, 0x3e	; 62
    1624:	31 96       	adiw	r30, 0x01	; 1
    1626:	8d e7       	ldi	r24, 0x7D	; 125
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	ad b7       	in	r26, 0x3d	; 61
    162c:	be b7       	in	r27, 0x3e	; 62
    162e:	12 96       	adiw	r26, 0x02	; 2
    1630:	9c 93       	st	X, r25
    1632:	8e 93       	st	-X, r24
    1634:	11 97       	sbiw	r26, 0x01	; 1
    1636:	80 91 47 05 	lds	r24, 0x0547
    163a:	82 83       	std	Z+2, r24	; 0x02
    163c:	13 82       	std	Z+3, r1	; 0x03
    163e:	80 91 46 05 	lds	r24, 0x0546
    1642:	84 83       	std	Z+4, r24	; 0x04
    1644:	15 82       	std	Z+5, r1	; 0x05
    1646:	80 91 4c 05 	lds	r24, 0x054C
    164a:	86 83       	std	Z+6, r24	; 0x06
    164c:	17 82       	std	Z+7, r1	; 0x07
    164e:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1652:	ed b7       	in	r30, 0x3d	; 61
    1654:	fe b7       	in	r31, 0x3e	; 62
    1656:	38 96       	adiw	r30, 0x08	; 8
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	fe bf       	out	0x3e, r31	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	ed bf       	out	0x3d, r30	; 61
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	44 e8       	ldi	r20, 0x84	; 132
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0f 2e       	mov	r0, r31
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	ef 2e       	mov	r14, r31
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	ff 2e       	mov	r15, r31
    167c:	f0 e2       	ldi	r31, 0x20	; 32
    167e:	0f 2f       	mov	r16, r31
    1680:	f1 e4       	ldi	r31, 0x41	; 65
    1682:	1f 2f       	mov	r17, r31
    1684:	f0 2d       	mov	r31, r0
    1686:	57 01       	movw	r10, r14
    1688:	68 01       	movw	r12, r16
    168a:	88 24       	eor	r8, r8
    168c:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <move_arc_stwt>
    1690:	12 c0       	rjmp	.+36     	; 0x16b6 <moveWorld+0x258>
			break;
		default:
			LCD_printf("What?!");
    1692:	00 d0       	rcall	.+0      	; 0x1694 <moveWorld+0x236>
    1694:	89 ea       	ldi	r24, 0xA9	; 169
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	ad b7       	in	r26, 0x3d	; 61
    169a:	be b7       	in	r27, 0x3e	; 62
    169c:	12 96       	adiw	r26, 0x02	; 2
    169e:	9c 93       	st	X, r25
    16a0:	8e 93       	st	-X, r24
    16a2:	11 97       	sbiw	r26, 0x01	; 1
    16a4:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <STEPPER_stop>
    16b4:	ff cf       	rjmp	.-2      	; 0x16b4 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    16b6:	80 91 c3 04 	lds	r24, 0x04C3
    16ba:	80 93 c5 04 	sts	0x04C5, r24
	return 1;
}
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	cf 90       	pop	r12
    16cc:	bf 90       	pop	r11
    16ce:	af 90       	pop	r10
    16d0:	8f 90       	pop	r8
    16d2:	08 95       	ret

000016d4 <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    16d4:	0e 94 2f 0a 	call	0x145e	; 0x145e <moveWorld>
    16d8:	88 23       	and	r24, r24
    16da:	69 f0       	breq	.+26     	; 0x16f6 <moveBehavior+0x22>
		Ierror = 0;
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a0 e0       	ldi	r26, 0x00	; 0
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	80 93 42 05 	sts	0x0542, r24
    16e8:	90 93 43 05 	sts	0x0543, r25
    16ec:	a0 93 44 05 	sts	0x0544, r26
    16f0:	b0 93 45 05 	sts	0x0545, r27
    16f4:	81 e0       	ldi	r24, 0x01	; 1
		return 1; 
	}
	return 0;	
}
    16f6:	08 95       	ret

000016f8 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	ff 24       	eor	r15, r15
    1704:	f3 94       	inc	r15
    1706:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1708:	c0 eb       	ldi	r28, 0xB0	; 176
    170a:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    170c:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    1710:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	21 f0       	breq	.+8      	; 0x171e <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	11 f0       	breq	.+4      	; 0x171e <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	39 f4       	brne	.+14     	; 0x172c <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    171e:	e1 2f       	mov	r30, r17
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	ea 53       	subi	r30, 0x3A	; 58
    1724:	fa 4f       	sbci	r31, 0xFA	; 250
    1726:	00 83       	st	Z, r16
			i++;
    1728:	1f 5f       	subi	r17, 0xFF	; 255
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <movesInput+0x38>
		}

		if (btnHolder != 0){
    172c:	88 23       	and	r24, r24
    172e:	21 f1       	breq	.+72     	; 0x1778 <movesInput+0x80>
			LCD_clear();
    1730:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1734:	8d b7       	in	r24, 0x3d	; 61
    1736:	9e b7       	in	r25, 0x3e	; 62
    1738:	08 97       	sbiw	r24, 0x08	; 8
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	9e bf       	out	0x3e, r25	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	8d bf       	out	0x3d, r24	; 61
    1744:	ed b7       	in	r30, 0x3d	; 61
    1746:	fe b7       	in	r31, 0x3e	; 62
    1748:	31 96       	adiw	r30, 0x01	; 1
    174a:	ad b7       	in	r26, 0x3d	; 61
    174c:	be b7       	in	r27, 0x3e	; 62
    174e:	12 96       	adiw	r26, 0x02	; 2
    1750:	dc 93       	st	X, r29
    1752:	ce 93       	st	-X, r28
    1754:	11 97       	sbiw	r26, 0x01	; 1
    1756:	f2 82       	std	Z+2, r15	; 0x02
    1758:	13 82       	std	Z+3, r1	; 0x03
    175a:	04 83       	std	Z+4, r16	; 0x04
    175c:	15 82       	std	Z+5, r1	; 0x05
    175e:	16 83       	std	Z+6, r17	; 0x06
    1760:	17 82       	std	Z+7, r1	; 0x07
    1762:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <printf>
    1766:	f0 2e       	mov	r15, r16
    1768:	8d b7       	in	r24, 0x3d	; 61
    176a:	9e b7       	in	r25, 0x3e	; 62
    176c:	08 96       	adiw	r24, 0x08	; 8
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	9e bf       	out	0x3e, r25	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1778:	84 ef       	ldi	r24, 0xF4	; 244
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    1780:	1b 30       	cpi	r17, 0x0B	; 11
    1782:	20 f2       	brcs	.-120    	; 0x170c <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    1784:	1f 5f       	subi	r17, 0xFF	; 255
    1786:	e1 2f       	mov	r30, r17
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	ea 53       	subi	r30, 0x3A	; 58
    178c:	fa 4f       	sbci	r31, 0xFA	; 250
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	80 83       	st	Z, r24
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	08 95       	ret

0000179e <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    17a6:	c1 ee       	ldi	r28, 0xE1	; 225
    17a8:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    17aa:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	21 f4       	brne	.+8      	; 0x17ba <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    17b2:	80 91 e8 06 	lds	r24, 0x06E8
    17b6:	88 0f       	add	r24, r24
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	39 f4       	brne	.+14     	; 0x17cc <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    17be:	80 91 e8 06 	lds	r24, 0x06E8
    17c2:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	80 93 e8 06 	sts	0x06E8, r24
			i++;
    17ca:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    17cc:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <worldInput+0x34>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <worldInput+0x36>
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <worldInput+0x38>
    17d6:	ed b7       	in	r30, 0x3d	; 61
    17d8:	fe b7       	in	r31, 0x3e	; 62
    17da:	31 96       	adiw	r30, 0x01	; 1
    17dc:	ad b7       	in	r26, 0x3d	; 61
    17de:	be b7       	in	r27, 0x3e	; 62
    17e0:	12 96       	adiw	r26, 0x02	; 2
    17e2:	dc 93       	st	X, r29
    17e4:	ce 93       	st	-X, r28
    17e6:	11 97       	sbiw	r26, 0x01	; 1
    17e8:	80 91 e8 06 	lds	r24, 0x06E8
    17ec:	82 83       	std	Z+2, r24	; 0x02
    17ee:	13 82       	std	Z+3, r1	; 0x03
    17f0:	14 83       	std	Z+4, r17	; 0x04
    17f2:	15 82       	std	Z+5, r1	; 0x05
    17f4:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <printf>
		// }
		currentCellWorldStart = currentCellWorld;
    17f8:	80 91 e8 06 	lds	r24, 0x06E8
    17fc:	80 93 e9 06 	sts	0x06E9, r24
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1800:	8d b7       	in	r24, 0x3d	; 61
    1802:	9e b7       	in	r25, 0x3e	; 62
    1804:	06 96       	adiw	r24, 0x06	; 6
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	9e bf       	out	0x3e, r25	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	8d bf       	out	0x3d, r24	; 61
    1810:	84 ef       	ldi	r24, 0xF4	; 244
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    1818:	14 30       	cpi	r17, 0x04	; 4
    181a:	38 f2       	brcs	.-114    	; 0x17aa <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		currentCellWorldStart = currentCellWorld;
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
}
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	08 95       	ret

00001824 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    182c:	c9 e0       	ldi	r28, 0x09	; 9
    182e:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    1830:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	21 f4       	brne	.+8      	; 0x1840 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    1838:	80 91 e7 05 	lds	r24, 0x05E7
    183c:	88 0f       	add	r24, r24
    183e:	06 c0       	rjmp	.+12     	; 0x184c <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	41 f4       	brne	.+16     	; 0x1854 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    1844:	80 91 e7 05 	lds	r24, 0x05E7
    1848:	88 0f       	add	r24, r24
			currentOrientation += 1;
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	80 93 e7 05 	sts	0x05E7, r24
			i++;
    1850:	1f 5f       	subi	r17, 0xFF	; 255
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    1854:	88 23       	and	r24, r24
    1856:	f1 f0       	breq	.+60     	; 0x1894 <orientationInput+0x70>
			LCD_clear();
    1858:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    185c:	00 d0       	rcall	.+0      	; 0x185e <orientationInput+0x3a>
    185e:	00 d0       	rcall	.+0      	; 0x1860 <orientationInput+0x3c>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <orientationInput+0x3e>
    1862:	ed b7       	in	r30, 0x3d	; 61
    1864:	fe b7       	in	r31, 0x3e	; 62
    1866:	31 96       	adiw	r30, 0x01	; 1
    1868:	ad b7       	in	r26, 0x3d	; 61
    186a:	be b7       	in	r27, 0x3e	; 62
    186c:	12 96       	adiw	r26, 0x02	; 2
    186e:	dc 93       	st	X, r29
    1870:	ce 93       	st	-X, r28
    1872:	11 97       	sbiw	r26, 0x01	; 1
    1874:	80 91 e7 05 	lds	r24, 0x05E7
    1878:	82 83       	std	Z+2, r24	; 0x02
    187a:	13 82       	std	Z+3, r1	; 0x03
    187c:	14 83       	std	Z+4, r17	; 0x04
    187e:	15 82       	std	Z+5, r1	; 0x05
    1880:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <printf>
    1884:	8d b7       	in	r24, 0x3d	; 61
    1886:	9e b7       	in	r25, 0x3e	; 62
    1888:	06 96       	adiw	r24, 0x06	; 6
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	9e bf       	out	0x3e, r25	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1894:	84 ef       	ldi	r24, 0xF4	; 244
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    189c:	12 30       	cpi	r17, 0x02	; 2
    189e:	40 f2       	brcs	.-112    	; 0x1830 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    18a0:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	switch(currentOrientation){
    18a4:	80 91 e7 05 	lds	r24, 0x05E7
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	51 f0       	breq	.+20     	; 0x18c0 <orientationInput+0x9c>
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	28 f0       	brcs	.+10     	; 0x18ba <orientationInput+0x96>
    18b0:	82 30       	cpi	r24, 0x02	; 2
    18b2:	49 f0       	breq	.+18     	; 0x18c6 <orientationInput+0xa2>
    18b4:	83 30       	cpi	r24, 0x03	; 3
    18b6:	71 f4       	brne	.+28     	; 0x18d4 <orientationInput+0xb0>
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    18ba:	88 e3       	ldi	r24, 0x38	; 56
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    18c0:	8a e5       	ldi	r24, 0x5A	; 90
    18c2:	92 e0       	ldi	r25, 0x02	; 2
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    18c6:	8b e7       	ldi	r24, 0x7B	; 123
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    18cc:	8d e9       	ldi	r24, 0x9D	; 157
    18ce:	92 e0       	ldi	r25, 0x02	; 2
    18d0:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <puts>
			break;
		default:
			break;
	}
	TMRSRVC_delay(500);	//wait 0.5 seconds
    18d4:	84 ef       	ldi	r24, 0xF4	; 244
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
}
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	08 95       	ret

000018e4 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    18e4:	cf 92       	push	r12
    18e6:	df 92       	push	r13
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	0f 92       	push	r0
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    18fa:	80 91 e8 06 	lds	r24, 0x06E8
    18fe:	f8 2e       	mov	r15, r24
    1900:	f6 94       	lsr	r15
    1902:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    1904:	98 2f       	mov	r25, r24
    1906:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    1908:	00 91 e7 05 	lds	r16, 0x05E7
    190c:	cc 24       	eor	r12, r12
    190e:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    1910:	f6 01       	movw	r30, r12
    1912:	ea 53       	subi	r30, 0x3A	; 58
    1914:	fa 4f       	sbci	r31, 0xFA	; 250
    1916:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    1918:	ef 2d       	mov	r30, r15
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	ee 0f       	add	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	ee 0f       	add	r30, r30
    1922:	ff 1f       	adc	r31, r31
    1924:	e9 0f       	add	r30, r25
    1926:	f1 1d       	adc	r31, r1
    1928:	ea 52       	subi	r30, 0x2A	; 42
    192a:	fa 4f       	sbci	r31, 0xFA	; 250
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    192c:	80 81       	ld	r24, Z
    192e:	60 2f       	mov	r22, r16
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	99 83       	std	Y+1, r25	; 0x01
    1934:	0e 94 34 13 	call	0x2668	; 0x2668 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    1938:	f6 01       	movw	r30, r12
    193a:	e3 59       	subi	r30, 0x93	; 147
    193c:	f8 4f       	sbci	r31, 0xF8	; 248
    193e:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    1940:	99 81       	ldd	r25, Y+1	; 0x01
    1942:	12 30       	cpi	r17, 0x02	; 2
    1944:	89 f4       	brne	.+34     	; 0x1968 <getGateways+0x84>
			switch(curOrient){
    1946:	01 30       	cpi	r16, 0x01	; 1
    1948:	49 f0       	breq	.+18     	; 0x195c <getGateways+0x78>
    194a:	01 30       	cpi	r16, 0x01	; 1
    194c:	28 f0       	brcs	.+10     	; 0x1958 <getGateways+0x74>
    194e:	02 30       	cpi	r16, 0x02	; 2
    1950:	39 f0       	breq	.+14     	; 0x1960 <getGateways+0x7c>
    1952:	03 30       	cpi	r16, 0x03	; 3
    1954:	89 f4       	brne	.+34     	; 0x1978 <getGateways+0x94>
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    1958:	fa 94       	dec	r15
    195a:	0e c0       	rjmp	.+28     	; 0x1978 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    195c:	9f 5f       	subi	r25, 0xFF	; 255
    195e:	0c c0       	rjmp	.+24     	; 0x1978 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    1960:	f3 94       	inc	r15
    1962:	0a c0       	rjmp	.+20     	; 0x1978 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    1964:	91 50       	subi	r25, 0x01	; 1
    1966:	08 c0       	rjmp	.+16     	; 0x1978 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    1968:	13 30       	cpi	r17, 0x03	; 3
    196a:	11 f4       	brne	.+4      	; 0x1970 <getGateways+0x8c>
			curOrient++;
    196c:	0f 5f       	subi	r16, 0xFF	; 255
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    1970:	11 30       	cpi	r17, 0x01	; 1
    1972:	11 f4       	brne	.+4      	; 0x1978 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    1974:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    1976:	03 70       	andi	r16, 0x03	; 3
    1978:	08 94       	sec
    197a:	c1 1c       	adc	r12, r1
    197c:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    197e:	8d e0       	ldi	r24, 0x0D	; 13
    1980:	c8 16       	cp	r12, r24
    1982:	d1 04       	cpc	r13, r1
    1984:	29 f6       	brne	.-118    	; 0x1910 <getGateways+0x2c>
    1986:	cc 24       	eor	r12, r12
    1988:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    198a:	ee eb       	ldi	r30, 0xBE	; 190
    198c:	ee 2e       	mov	r14, r30
    198e:	e2 e0       	ldi	r30, 0x02	; 2
    1990:	fe 2e       	mov	r15, r30
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    1992:	f6 01       	movw	r30, r12
    1994:	e3 59       	subi	r30, 0x93	; 147
    1996:	f8 4f       	sbci	r31, 0xF8	; 248
    1998:	00 81       	ld	r16, Z
		LCD_clear();
    199a:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    199e:	20 2f       	mov	r18, r16
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	ad b7       	in	r26, 0x3d	; 61
    19a4:	be b7       	in	r27, 0x3e	; 62
    19a6:	54 97       	sbiw	r26, 0x14	; 20
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	be bf       	out	0x3e, r27	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	ad bf       	out	0x3d, r26	; 61
    19b2:	ed b7       	in	r30, 0x3d	; 61
    19b4:	fe b7       	in	r31, 0x3e	; 62
    19b6:	31 96       	adiw	r30, 0x01	; 1
    19b8:	12 96       	adiw	r26, 0x02	; 2
    19ba:	fc 92       	st	X, r15
    19bc:	ee 92       	st	-X, r14
    19be:	11 97       	sbiw	r26, 0x01	; 1
    19c0:	d3 82       	std	Z+3, r13	; 0x03
    19c2:	c2 82       	std	Z+2, r12	; 0x02
    19c4:	11 27       	eor	r17, r17
    19c6:	07 fd       	sbrc	r16, 7
    19c8:	10 95       	com	r17
    19ca:	00 27       	eor	r16, r16
    19cc:	11 0f       	add	r17, r17
    19ce:	00 1f       	adc	r16, r16
    19d0:	11 27       	eor	r17, r17
    19d2:	15 83       	std	Z+5, r17	; 0x05
    19d4:	04 83       	std	Z+4, r16	; 0x04
    19d6:	c9 01       	movw	r24, r18
    19d8:	66 e0       	ldi	r22, 0x06	; 6
    19da:	96 95       	lsr	r25
    19dc:	87 95       	ror	r24
    19de:	6a 95       	dec	r22
    19e0:	e1 f7       	brne	.-8      	; 0x19da <getGateways+0xf6>
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	90 70       	andi	r25, 0x00	; 0
    19e6:	97 83       	std	Z+7, r25	; 0x07
    19e8:	86 83       	std	Z+6, r24	; 0x06
    19ea:	c9 01       	movw	r24, r18
    19ec:	55 e0       	ldi	r21, 0x05	; 5
    19ee:	96 95       	lsr	r25
    19f0:	87 95       	ror	r24
    19f2:	5a 95       	dec	r21
    19f4:	e1 f7       	brne	.-8      	; 0x19ee <getGateways+0x10a>
    19f6:	81 70       	andi	r24, 0x01	; 1
    19f8:	90 70       	andi	r25, 0x00	; 0
    19fa:	91 87       	std	Z+9, r25	; 0x09
    19fc:	80 87       	std	Z+8, r24	; 0x08
    19fe:	c9 01       	movw	r24, r18
    1a00:	44 e0       	ldi	r20, 0x04	; 4
    1a02:	96 95       	lsr	r25
    1a04:	87 95       	ror	r24
    1a06:	4a 95       	dec	r20
    1a08:	e1 f7       	brne	.-8      	; 0x1a02 <getGateways+0x11e>
    1a0a:	81 70       	andi	r24, 0x01	; 1
    1a0c:	90 70       	andi	r25, 0x00	; 0
    1a0e:	93 87       	std	Z+11, r25	; 0x0b
    1a10:	82 87       	std	Z+10, r24	; 0x0a
    1a12:	c9 01       	movw	r24, r18
    1a14:	03 e0       	ldi	r16, 0x03	; 3
    1a16:	96 95       	lsr	r25
    1a18:	87 95       	ror	r24
    1a1a:	0a 95       	dec	r16
    1a1c:	e1 f7       	brne	.-8      	; 0x1a16 <getGateways+0x132>
    1a1e:	81 70       	andi	r24, 0x01	; 1
    1a20:	90 70       	andi	r25, 0x00	; 0
    1a22:	95 87       	std	Z+13, r25	; 0x0d
    1a24:	84 87       	std	Z+12, r24	; 0x0c
    1a26:	c9 01       	movw	r24, r18
    1a28:	96 95       	lsr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	96 95       	lsr	r25
    1a2e:	87 95       	ror	r24
    1a30:	81 70       	andi	r24, 0x01	; 1
    1a32:	90 70       	andi	r25, 0x00	; 0
    1a34:	97 87       	std	Z+15, r25	; 0x0f
    1a36:	86 87       	std	Z+14, r24	; 0x0e
    1a38:	c9 01       	movw	r24, r18
    1a3a:	96 95       	lsr	r25
    1a3c:	87 95       	ror	r24
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	90 70       	andi	r25, 0x00	; 0
    1a42:	91 8b       	std	Z+17, r25	; 0x11
    1a44:	80 8b       	std	Z+16, r24	; 0x10
    1a46:	21 70       	andi	r18, 0x01	; 1
    1a48:	30 70       	andi	r19, 0x00	; 0
    1a4a:	33 8b       	std	Z+19, r19	; 0x13
    1a4c:	22 8b       	std	Z+18, r18	; 0x12
    1a4e:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <printf>
		TMRSRVC_delay(500);//wait 1/2 seconds
    1a52:	ed b7       	in	r30, 0x3d	; 61
    1a54:	fe b7       	in	r31, 0x3e	; 62
    1a56:	74 96       	adiw	r30, 0x14	; 20
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	fe bf       	out	0x3e, r31	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	ed bf       	out	0x3d, r30	; 61
    1a62:	84 ef       	ldi	r24, 0xF4	; 244
    1a64:	91 e0       	ldi	r25, 0x01	; 1
    1a66:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
    1a6a:	08 94       	sec
    1a6c:	c1 1c       	adc	r12, r1
    1a6e:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    1a70:	fd e0       	ldi	r31, 0x0D	; 13
    1a72:	cf 16       	cp	r12, r31
    1a74:	d1 04       	cpc	r13, r1
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <getGateways+0x196>
    1a78:	8c cf       	rjmp	.-232    	; 0x1992 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(500);//wait 1/2 seconds
	}
}
    1a7a:	0f 90       	pop	r0
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	ff 90       	pop	r15
    1a86:	ef 90       	pop	r14
    1a88:	df 90       	pop	r13
    1a8a:	cf 90       	pop	r12
    1a8c:	08 95       	ret

00001a8e <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    1a8e:	ff 92       	push	r15
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    1a94:	80 91 e8 06 	lds	r24, 0x06E8
    1a98:	08 2f       	mov	r16, r24
    1a9a:	06 95       	lsr	r16
    1a9c:	06 95       	lsr	r16
	unsigned char curCol = currentCellWorld & 0b0011;
    1a9e:	13 e0       	ldi	r17, 0x03	; 3
    1aa0:	f1 2e       	mov	r15, r17
    1aa2:	f8 22       	and	r15, r24
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    1aa4:	10 91 e7 05 	lds	r17, 0x05E7
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    1aa8:	80 91 46 05 	lds	r24, 0x0546
    1aac:	61 2f       	mov	r22, r17
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	0e 94 34 13 	call	0x2668	; 0x2668 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    1ab4:	e0 2f       	mov	r30, r16
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	ef 0d       	add	r30, r15
    1ac2:	f1 1d       	adc	r31, r1
    1ac4:	ea 52       	subi	r30, 0x2A	; 42
    1ac6:	fa 4f       	sbci	r31, 0xFA	; 250
    1ac8:	80 83       	st	Z, r24
		
		
	switch(currentMove){
    1aca:	80 91 c3 04 	lds	r24, 0x04C3
    1ace:	82 30       	cpi	r24, 0x02	; 2
    1ad0:	a1 f0       	breq	.+40     	; 0x1afa <setGateways+0x6c>
    1ad2:	83 30       	cpi	r24, 0x03	; 3
    1ad4:	21 f0       	breq	.+8      	; 0x1ade <setGateways+0x50>
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <setGateways+0x56>
		case MOVE_LEFT:
			curOrient--;
    1ada:	11 50       	subi	r17, 0x01	; 1
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <setGateways+0x52>
			curOrient = curOrient&0b11;
			break;
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			curOrient++;
    1ade:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    1ae0:	13 70       	andi	r17, 0x03	; 3
    1ae2:	0b c0       	rjmp	.+22     	; 0x1afa <setGateways+0x6c>
			break;
		default:
			LCD_printf("Whatz?!");
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <setGateways+0x58>
    1ae6:	80 ee       	ldi	r24, 0xE0	; 224
    1ae8:	92 e0       	ldi	r25, 0x02	; 2
    1aea:	ed b7       	in	r30, 0x3d	; 61
    1aec:	fe b7       	in	r31, 0x3e	; 62
    1aee:	92 83       	std	Z+2, r25	; 0x02
    1af0:	81 83       	std	Z+1, r24	; 0x01
    1af2:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <printf>
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
			break;
	}
	
	// move to the next cell with respect to our orientation
	switch(curOrient){
    1afa:	11 30       	cpi	r17, 0x01	; 1
    1afc:	49 f0       	breq	.+18     	; 0x1b10 <setGateways+0x82>
    1afe:	11 30       	cpi	r17, 0x01	; 1
    1b00:	28 f0       	brcs	.+10     	; 0x1b0c <setGateways+0x7e>
    1b02:	12 30       	cpi	r17, 0x02	; 2
    1b04:	39 f0       	breq	.+14     	; 0x1b14 <setGateways+0x86>
    1b06:	13 30       	cpi	r17, 0x03	; 3
    1b08:	41 f4       	brne	.+16     	; 0x1b1a <setGateways+0x8c>
    1b0a:	06 c0       	rjmp	.+12     	; 0x1b18 <setGateways+0x8a>
		case NORTH:
			curRow -= 1;
    1b0c:	01 50       	subi	r16, 0x01	; 1
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <setGateways+0x8c>
			break;
		case EAST:
			curCol += 1;
    1b10:	f3 94       	inc	r15
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <setGateways+0x8c>
			break;
		case SOUTH:
			curRow += 1;					
    1b14:	0f 5f       	subi	r16, 0xFF	; 255
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <setGateways+0x8c>
			break;
		case WEST:
			curCol -= 1;					
    1b18:	fa 94       	dec	r15
			break;
		default:
			break;
	}	
	currentCellWorld = (curRow << 2) + curCol;
    1b1a:	00 0f       	add	r16, r16
    1b1c:	00 0f       	add	r16, r16
    1b1e:	0f 0d       	add	r16, r15
    1b20:	00 93 e8 06 	sts	0x06E8, r16
}
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	08 95       	ret

00001b2c <mapWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    maps the world as it moves through it
********************************************************************/
char mapWorld( void )
{	
    1b2c:	8f 92       	push	r8
    1b2e:	af 92       	push	r10
    1b30:	bf 92       	push	r11
    1b32:	cf 92       	push	r12
    1b34:	df 92       	push	r13
    1b36:	ef 92       	push	r14
    1b38:	ff 92       	push	r15
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
    1b3e:	cf 93       	push	r28
    1b40:	df 93       	push	r29
	if(!(currentGateway&0b0001)){	
    1b42:	80 91 46 05 	lds	r24, 0x0546
    1b46:	80 fd       	sbrc	r24, 0
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <mapWorld+0x26>
		// If we can make a left turn,
		// then turn left
		currentMove = MOVE_LEFT;
    1b4a:	81 e0       	ldi	r24, 0x01	; 1
    1b4c:	80 93 c3 04 	sts	0x04C3, r24
    1b50:	0a c0       	rjmp	.+20     	; 0x1b66 <mapWorld+0x3a>
		// Reset Odometry
		checkOdometry(1);
	}
	else if(!(currentGateway&0b1000)){
    1b52:	83 fd       	sbrc	r24, 3
    1b54:	04 c0       	rjmp	.+8      	; 0x1b5e <mapWorld+0x32>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    1b56:	82 e0       	ldi	r24, 0x02	; 2
    1b58:	80 93 c3 04 	sts	0x04C3, r24
    1b5c:	06 c0       	rjmp	.+12     	; 0x1b6a <mapWorld+0x3e>
	}
	else {
		// If we can't turn left or go forward
		// spin right
		currentMove = MOVE_RIGHT;
    1b5e:	83 e0       	ldi	r24, 0x03	; 3
    1b60:	80 93 c3 04 	sts	0x04C3, r24
		// Reset Odometry
		checkOdometry(1);
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	0e 94 0a 06 	call	0xc14	; 0xc14 <checkOdometry>
	}
	
	if(oldMove == MOVE_LEFT){
    1b6a:	80 91 c5 04 	lds	r24, 0x04C5
    1b6e:	81 30       	cpi	r24, 0x01	; 1
    1b70:	09 f5       	brne	.+66     	; 0x1bb4 <mapWorld+0x88>
		// Move forward half a rezolution
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.0/3.0), 10, 10, 0);		
    1b72:	60 e0       	ldi	r22, 0x00	; 0
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	9f e4       	ldi	r25, 0x4F	; 79
    1b7a:	2b e0       	ldi	r18, 0x0B	; 11
    1b7c:	37 ed       	ldi	r19, 0xD7	; 215
    1b7e:	43 ef       	ldi	r20, 0xF3	; 243
    1b80:	51 e4       	ldi	r21, 0x41	; 65
    1b82:	0f 2e       	mov	r0, r31
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	ef 2e       	mov	r14, r31
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	ff 2e       	mov	r15, r31
    1b8c:	f0 e2       	ldi	r31, 0x20	; 32
    1b8e:	0f 2f       	mov	r16, r31
    1b90:	f1 e4       	ldi	r31, 0x41	; 65
    1b92:	1f 2f       	mov	r17, r31
    1b94:	f0 2d       	mov	r31, r0
    1b96:	57 01       	movw	r10, r14
    1b98:	68 01       	movw	r12, r16
    1b9a:	88 24       	eor	r8, r8
    1b9c:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <move_arc_stwt>
		// Set Odomitry
		odometryStepL = (WORLD_RESOLUTION_SIZE*(2.0/3.0))/D_STEP;
    1ba0:	84 ee       	ldi	r24, 0xE4	; 228
    1ba2:	80 93 7e 07 	sts	0x077E, r24
		odometryStepR = (WORLD_RESOLUTION_SIZE*(2.0/3.0))/D_STEP;		
    1ba6:	80 93 c4 04 	sts	0x04C4, r24
		// Clear Odomity Flag
		odometryFlag = 0;		
    1baa:	10 92 f0 06 	sts	0x06F0, r1
		// Override Move to go forward
		currentMove = MOVE_FORWARD;
    1bae:	82 e0       	ldi	r24, 0x02	; 2
    1bb0:	80 93 c3 04 	sts	0x04C3, r24
	}
	
	if(odometryFlag)
    1bb4:	80 91 f0 06 	lds	r24, 0x06F0
    1bb8:	88 23       	and	r24, r24
    1bba:	11 f0       	breq	.+4      	; 0x1bc0 <mapWorld+0x94>
	{
		// Only update the map if we are done moving
		setGateways();
    1bbc:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <setGateways>
	}
	
	// if(currentMove != oldMove){
		LCD_clear();
    1bc0:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
		LCD_printf("Move: BYTETOBINARYPATTERN\nCell: BYTETOBINARYPATTERN\nOrientation: BYTETOBINARYPATTERN\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    1bc4:	20 91 c3 04 	lds	r18, 0x04C3
    1bc8:	42 2f       	mov	r20, r18
    1bca:	50 e0       	ldi	r21, 0x00	; 0
    1bcc:	a0 91 e8 06 	lds	r26, 0x06E8
    1bd0:	6a 2f       	mov	r22, r26
    1bd2:	70 e0       	ldi	r23, 0x00	; 0
    1bd4:	e0 90 e7 05 	lds	r14, 0x05E7
    1bd8:	0e 2d       	mov	r16, r14
    1bda:	10 e0       	ldi	r17, 0x00	; 0
    1bdc:	8d b7       	in	r24, 0x3d	; 61
    1bde:	9e b7       	in	r25, 0x3e	; 62
    1be0:	c2 97       	sbiw	r24, 0x32	; 50
    1be2:	0f b6       	in	r0, 0x3f	; 63
    1be4:	f8 94       	cli
    1be6:	9e bf       	out	0x3e, r25	; 62
    1be8:	0f be       	out	0x3f, r0	; 63
    1bea:	8d bf       	out	0x3d, r24	; 61
    1bec:	ed b7       	in	r30, 0x3d	; 61
    1bee:	fe b7       	in	r31, 0x3e	; 62
    1bf0:	31 96       	adiw	r30, 0x01	; 1
    1bf2:	88 ee       	ldi	r24, 0xE8	; 232
    1bf4:	92 e0       	ldi	r25, 0x02	; 2
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	9a 83       	std	Y+2, r25	; 0x02
    1bfc:	89 83       	std	Y+1, r24	; 0x01
    1bfe:	33 27       	eor	r19, r19
    1c00:	27 fd       	sbrc	r18, 7
    1c02:	30 95       	com	r19
    1c04:	22 27       	eor	r18, r18
    1c06:	33 0f       	add	r19, r19
    1c08:	22 1f       	adc	r18, r18
    1c0a:	33 27       	eor	r19, r19
    1c0c:	33 83       	std	Z+3, r19	; 0x03
    1c0e:	22 83       	std	Z+2, r18	; 0x02
    1c10:	ca 01       	movw	r24, r20
    1c12:	b6 e0       	ldi	r27, 0x06	; 6
    1c14:	96 95       	lsr	r25
    1c16:	87 95       	ror	r24
    1c18:	ba 95       	dec	r27
    1c1a:	e1 f7       	brne	.-8      	; 0x1c14 <mapWorld+0xe8>
    1c1c:	81 70       	andi	r24, 0x01	; 1
    1c1e:	90 70       	andi	r25, 0x00	; 0
    1c20:	95 83       	std	Z+5, r25	; 0x05
    1c22:	84 83       	std	Z+4, r24	; 0x04
    1c24:	ca 01       	movw	r24, r20
    1c26:	35 e0       	ldi	r19, 0x05	; 5
    1c28:	96 95       	lsr	r25
    1c2a:	87 95       	ror	r24
    1c2c:	3a 95       	dec	r19
    1c2e:	e1 f7       	brne	.-8      	; 0x1c28 <mapWorld+0xfc>
    1c30:	81 70       	andi	r24, 0x01	; 1
    1c32:	90 70       	andi	r25, 0x00	; 0
    1c34:	97 83       	std	Z+7, r25	; 0x07
    1c36:	86 83       	std	Z+6, r24	; 0x06
    1c38:	ca 01       	movw	r24, r20
    1c3a:	24 e0       	ldi	r18, 0x04	; 4
    1c3c:	96 95       	lsr	r25
    1c3e:	87 95       	ror	r24
    1c40:	2a 95       	dec	r18
    1c42:	e1 f7       	brne	.-8      	; 0x1c3c <mapWorld+0x110>
    1c44:	81 70       	andi	r24, 0x01	; 1
    1c46:	90 70       	andi	r25, 0x00	; 0
    1c48:	91 87       	std	Z+9, r25	; 0x09
    1c4a:	80 87       	std	Z+8, r24	; 0x08
    1c4c:	ca 01       	movw	r24, r20
    1c4e:	b3 e0       	ldi	r27, 0x03	; 3
    1c50:	96 95       	lsr	r25
    1c52:	87 95       	ror	r24
    1c54:	ba 95       	dec	r27
    1c56:	e1 f7       	brne	.-8      	; 0x1c50 <mapWorld+0x124>
    1c58:	81 70       	andi	r24, 0x01	; 1
    1c5a:	90 70       	andi	r25, 0x00	; 0
    1c5c:	93 87       	std	Z+11, r25	; 0x0b
    1c5e:	82 87       	std	Z+10, r24	; 0x0a
    1c60:	ca 01       	movw	r24, r20
    1c62:	96 95       	lsr	r25
    1c64:	87 95       	ror	r24
    1c66:	96 95       	lsr	r25
    1c68:	87 95       	ror	r24
    1c6a:	81 70       	andi	r24, 0x01	; 1
    1c6c:	90 70       	andi	r25, 0x00	; 0
    1c6e:	95 87       	std	Z+13, r25	; 0x0d
    1c70:	84 87       	std	Z+12, r24	; 0x0c
    1c72:	ca 01       	movw	r24, r20
    1c74:	96 95       	lsr	r25
    1c76:	87 95       	ror	r24
    1c78:	81 70       	andi	r24, 0x01	; 1
    1c7a:	90 70       	andi	r25, 0x00	; 0
    1c7c:	97 87       	std	Z+15, r25	; 0x0f
    1c7e:	86 87       	std	Z+14, r24	; 0x0e
    1c80:	41 70       	andi	r20, 0x01	; 1
    1c82:	50 70       	andi	r21, 0x00	; 0
    1c84:	51 8b       	std	Z+17, r21	; 0x11
    1c86:	40 8b       	std	Z+16, r20	; 0x10
    1c88:	bb 27       	eor	r27, r27
    1c8a:	a7 fd       	sbrc	r26, 7
    1c8c:	b0 95       	com	r27
    1c8e:	aa 27       	eor	r26, r26
    1c90:	bb 0f       	add	r27, r27
    1c92:	aa 1f       	adc	r26, r26
    1c94:	bb 27       	eor	r27, r27
    1c96:	b3 8b       	std	Z+19, r27	; 0x13
    1c98:	a2 8b       	std	Z+18, r26	; 0x12
    1c9a:	cb 01       	movw	r24, r22
    1c9c:	a6 e0       	ldi	r26, 0x06	; 6
    1c9e:	96 95       	lsr	r25
    1ca0:	87 95       	ror	r24
    1ca2:	aa 95       	dec	r26
    1ca4:	e1 f7       	brne	.-8      	; 0x1c9e <mapWorld+0x172>
    1ca6:	81 70       	andi	r24, 0x01	; 1
    1ca8:	90 70       	andi	r25, 0x00	; 0
    1caa:	95 8b       	std	Z+21, r25	; 0x15
    1cac:	84 8b       	std	Z+20, r24	; 0x14
    1cae:	cb 01       	movw	r24, r22
    1cb0:	55 e0       	ldi	r21, 0x05	; 5
    1cb2:	96 95       	lsr	r25
    1cb4:	87 95       	ror	r24
    1cb6:	5a 95       	dec	r21
    1cb8:	e1 f7       	brne	.-8      	; 0x1cb2 <mapWorld+0x186>
    1cba:	81 70       	andi	r24, 0x01	; 1
    1cbc:	90 70       	andi	r25, 0x00	; 0
    1cbe:	97 8b       	std	Z+23, r25	; 0x17
    1cc0:	86 8b       	std	Z+22, r24	; 0x16
    1cc2:	cb 01       	movw	r24, r22
    1cc4:	44 e0       	ldi	r20, 0x04	; 4
    1cc6:	96 95       	lsr	r25
    1cc8:	87 95       	ror	r24
    1cca:	4a 95       	dec	r20
    1ccc:	e1 f7       	brne	.-8      	; 0x1cc6 <mapWorld+0x19a>
    1cce:	81 70       	andi	r24, 0x01	; 1
    1cd0:	90 70       	andi	r25, 0x00	; 0
    1cd2:	91 8f       	std	Z+25, r25	; 0x19
    1cd4:	80 8f       	std	Z+24, r24	; 0x18
    1cd6:	cb 01       	movw	r24, r22
    1cd8:	33 e0       	ldi	r19, 0x03	; 3
    1cda:	96 95       	lsr	r25
    1cdc:	87 95       	ror	r24
    1cde:	3a 95       	dec	r19
    1ce0:	e1 f7       	brne	.-8      	; 0x1cda <mapWorld+0x1ae>
    1ce2:	81 70       	andi	r24, 0x01	; 1
    1ce4:	90 70       	andi	r25, 0x00	; 0
    1ce6:	93 8f       	std	Z+27, r25	; 0x1b
    1ce8:	82 8f       	std	Z+26, r24	; 0x1a
    1cea:	cb 01       	movw	r24, r22
    1cec:	96 95       	lsr	r25
    1cee:	87 95       	ror	r24
    1cf0:	96 95       	lsr	r25
    1cf2:	87 95       	ror	r24
    1cf4:	81 70       	andi	r24, 0x01	; 1
    1cf6:	90 70       	andi	r25, 0x00	; 0
    1cf8:	95 8f       	std	Z+29, r25	; 0x1d
    1cfa:	84 8f       	std	Z+28, r24	; 0x1c
    1cfc:	cb 01       	movw	r24, r22
    1cfe:	96 95       	lsr	r25
    1d00:	87 95       	ror	r24
    1d02:	81 70       	andi	r24, 0x01	; 1
    1d04:	90 70       	andi	r25, 0x00	; 0
    1d06:	97 8f       	std	Z+31, r25	; 0x1f
    1d08:	86 8f       	std	Z+30, r24	; 0x1e
    1d0a:	61 70       	andi	r22, 0x01	; 1
    1d0c:	70 70       	andi	r23, 0x00	; 0
    1d0e:	71 a3       	std	Z+33, r23	; 0x21
    1d10:	60 a3       	std	Z+32, r22	; 0x20
    1d12:	ff 24       	eor	r15, r15
    1d14:	e7 fc       	sbrc	r14, 7
    1d16:	f0 94       	com	r15
    1d18:	ee 24       	eor	r14, r14
    1d1a:	ff 0c       	add	r15, r15
    1d1c:	ee 1c       	adc	r14, r14
    1d1e:	ff 24       	eor	r15, r15
    1d20:	f3 a2       	std	Z+35, r15	; 0x23
    1d22:	e2 a2       	std	Z+34, r14	; 0x22
    1d24:	c8 01       	movw	r24, r16
    1d26:	76 e0       	ldi	r23, 0x06	; 6
    1d28:	96 95       	lsr	r25
    1d2a:	87 95       	ror	r24
    1d2c:	7a 95       	dec	r23
    1d2e:	e1 f7       	brne	.-8      	; 0x1d28 <mapWorld+0x1fc>
    1d30:	81 70       	andi	r24, 0x01	; 1
    1d32:	90 70       	andi	r25, 0x00	; 0
    1d34:	95 a3       	std	Z+37, r25	; 0x25
    1d36:	84 a3       	std	Z+36, r24	; 0x24
    1d38:	c8 01       	movw	r24, r16
    1d3a:	65 e0       	ldi	r22, 0x05	; 5
    1d3c:	96 95       	lsr	r25
    1d3e:	87 95       	ror	r24
    1d40:	6a 95       	dec	r22
    1d42:	e1 f7       	brne	.-8      	; 0x1d3c <mapWorld+0x210>
    1d44:	81 70       	andi	r24, 0x01	; 1
    1d46:	90 70       	andi	r25, 0x00	; 0
    1d48:	97 a3       	std	Z+39, r25	; 0x27
    1d4a:	86 a3       	std	Z+38, r24	; 0x26
    1d4c:	c8 01       	movw	r24, r16
    1d4e:	54 e0       	ldi	r21, 0x04	; 4
    1d50:	96 95       	lsr	r25
    1d52:	87 95       	ror	r24
    1d54:	5a 95       	dec	r21
    1d56:	e1 f7       	brne	.-8      	; 0x1d50 <mapWorld+0x224>
    1d58:	81 70       	andi	r24, 0x01	; 1
    1d5a:	90 70       	andi	r25, 0x00	; 0
    1d5c:	91 a7       	std	Z+41, r25	; 0x29
    1d5e:	80 a7       	std	Z+40, r24	; 0x28
    1d60:	c8 01       	movw	r24, r16
    1d62:	43 e0       	ldi	r20, 0x03	; 3
    1d64:	96 95       	lsr	r25
    1d66:	87 95       	ror	r24
    1d68:	4a 95       	dec	r20
    1d6a:	e1 f7       	brne	.-8      	; 0x1d64 <mapWorld+0x238>
    1d6c:	81 70       	andi	r24, 0x01	; 1
    1d6e:	90 70       	andi	r25, 0x00	; 0
    1d70:	93 a7       	std	Z+43, r25	; 0x2b
    1d72:	82 a7       	std	Z+42, r24	; 0x2a
    1d74:	c8 01       	movw	r24, r16
    1d76:	96 95       	lsr	r25
    1d78:	87 95       	ror	r24
    1d7a:	96 95       	lsr	r25
    1d7c:	87 95       	ror	r24
    1d7e:	81 70       	andi	r24, 0x01	; 1
    1d80:	90 70       	andi	r25, 0x00	; 0
    1d82:	95 a7       	std	Z+45, r25	; 0x2d
    1d84:	84 a7       	std	Z+44, r24	; 0x2c
    1d86:	c8 01       	movw	r24, r16
    1d88:	96 95       	lsr	r25
    1d8a:	87 95       	ror	r24
    1d8c:	81 70       	andi	r24, 0x01	; 1
    1d8e:	90 70       	andi	r25, 0x00	; 0
    1d90:	97 a7       	std	Z+47, r25	; 0x2f
    1d92:	86 a7       	std	Z+46, r24	; 0x2e
    1d94:	01 70       	andi	r16, 0x01	; 1
    1d96:	10 70       	andi	r17, 0x00	; 0
    1d98:	11 ab       	std	Z+49, r17	; 0x31
    1d9a:	00 ab       	std	Z+48, r16	; 0x30
    1d9c:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <printf>
		TMRSRVC_delay(3000);//wait 1 seconds
    1da0:	ed b7       	in	r30, 0x3d	; 61
    1da2:	fe b7       	in	r31, 0x3e	; 62
    1da4:	f2 96       	adiw	r30, 0x32	; 50
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	fe bf       	out	0x3e, r31	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	ed bf       	out	0x3d, r30	; 61
    1db0:	88 eb       	ldi	r24, 0xB8	; 184
    1db2:	9b e0       	ldi	r25, 0x0B	; 11
    1db4:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	// }
	
	LCD_clear();
    1db8:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	switch(currentMove){
    1dbc:	80 91 c3 04 	lds	r24, 0x04C3
    1dc0:	82 30       	cpi	r24, 0x02	; 2
    1dc2:	29 f1       	breq	.+74     	; 0x1e0e <mapWorld+0x2e2>
    1dc4:	83 30       	cpi	r24, 0x03	; 3
    1dc6:	f1 f1       	breq	.+124    	; 0x1e44 <mapWorld+0x318>
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	09 f0       	breq	.+2      	; 0x1dce <mapWorld+0x2a2>
    1dcc:	53 c0       	rjmp	.+166    	; 0x1e74 <mapWorld+0x348>
		case MOVE_LEFT:
			// LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.8/5.0), 10, 10, 0);
    1dce:	60 e0       	ldi	r22, 0x00	; 0
    1dd0:	70 e0       	ldi	r23, 0x00	; 0
    1dd2:	80 e0       	ldi	r24, 0x00	; 0
    1dd4:	9f e4       	ldi	r25, 0x4F	; 79
    1dd6:	2b e5       	ldi	r18, 0x5B	; 91
    1dd8:	33 ed       	ldi	r19, 0xD3	; 211
    1dda:	4c ec       	ldi	r20, 0xCC	; 204
    1ddc:	51 e4       	ldi	r21, 0x41	; 65
    1dde:	0f 2e       	mov	r0, r31
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	ef 2e       	mov	r14, r31
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	ff 2e       	mov	r15, r31
    1de8:	f0 e2       	ldi	r31, 0x20	; 32
    1dea:	0f 2f       	mov	r16, r31
    1dec:	f1 e4       	ldi	r31, 0x41	; 65
    1dee:	1f 2f       	mov	r17, r31
    1df0:	f0 2d       	mov	r31, r0
    1df2:	57 01       	movw	r10, r14
    1df4:	68 01       	movw	r12, r16
    1df6:	88 24       	eor	r8, r8
    1df8:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <move_arc_stwt>
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	70 e0       	ldi	r23, 0x00	; 0
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	44 e8       	ldi	r20, 0x84	; 132
    1e0a:	51 ec       	ldi	r21, 0xC1	; 193
    1e0c:	30 c0       	rjmp	.+96     	; 0x1e6e <mapWorld+0x342>
			break;
		case MOVE_FORWARD:
			// LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
			// TMRSRVC_delay(1000);//wait 1 seconds
			// moveWall();
			move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
    1e0e:	60 e0       	ldi	r22, 0x00	; 0
    1e10:	70 e0       	ldi	r23, 0x00	; 0
    1e12:	80 e0       	ldi	r24, 0x00	; 0
    1e14:	9f e4       	ldi	r25, 0x4F	; 79
    1e16:	28 e4       	ldi	r18, 0x48	; 72
    1e18:	31 ee       	ldi	r19, 0xE1	; 225
    1e1a:	46 e3       	ldi	r20, 0x36	; 54
    1e1c:	52 e4       	ldi	r21, 0x42	; 66
    1e1e:	0f 2e       	mov	r0, r31
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	ef 2e       	mov	r14, r31
    1e24:	f0 e0       	ldi	r31, 0x00	; 0
    1e26:	ff 2e       	mov	r15, r31
    1e28:	f0 e2       	ldi	r31, 0x20	; 32
    1e2a:	0f 2f       	mov	r16, r31
    1e2c:	f1 e4       	ldi	r31, 0x41	; 65
    1e2e:	1f 2f       	mov	r17, r31
    1e30:	f0 2d       	mov	r31, r0
    1e32:	57 01       	movw	r10, r14
    1e34:	68 01       	movw	r12, r16
    1e36:	88 24       	eor	r8, r8
    1e38:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <move_arc_stwt>
			checkOdometry(1);
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	0e 94 0a 06 	call	0xc14	; 0xc14 <checkOdometry>
    1e42:	27 c0       	rjmp	.+78     	; 0x1e92 <mapWorld+0x366>
			break;
		case MOVE_RIGHT:
			// LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1e44:	60 e0       	ldi	r22, 0x00	; 0
    1e46:	70 e0       	ldi	r23, 0x00	; 0
    1e48:	80 e0       	ldi	r24, 0x00	; 0
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	20 e0       	ldi	r18, 0x00	; 0
    1e4e:	30 e0       	ldi	r19, 0x00	; 0
    1e50:	44 e8       	ldi	r20, 0x84	; 132
    1e52:	51 e4       	ldi	r21, 0x41	; 65
    1e54:	0f 2e       	mov	r0, r31
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	ef 2e       	mov	r14, r31
    1e5a:	f0 e0       	ldi	r31, 0x00	; 0
    1e5c:	ff 2e       	mov	r15, r31
    1e5e:	f0 e2       	ldi	r31, 0x20	; 32
    1e60:	0f 2f       	mov	r16, r31
    1e62:	f1 e4       	ldi	r31, 0x41	; 65
    1e64:	1f 2f       	mov	r17, r31
    1e66:	f0 2d       	mov	r31, r0
    1e68:	57 01       	movw	r10, r14
    1e6a:	68 01       	movw	r12, r16
    1e6c:	88 24       	eor	r8, r8
    1e6e:	0e 94 f9 15 	call	0x2bf2	; 0x2bf2 <move_arc_stwt>
    1e72:	0f c0       	rjmp	.+30     	; 0x1e92 <mapWorld+0x366>
			break;
		default:
			LCD_printf("What?!");
    1e74:	00 d0       	rcall	.+0      	; 0x1e76 <mapWorld+0x34a>
    1e76:	89 ea       	ldi	r24, 0xA9	; 169
    1e78:	91 e0       	ldi	r25, 0x01	; 1
    1e7a:	cd b7       	in	r28, 0x3d	; 61
    1e7c:	de b7       	in	r29, 0x3e	; 62
    1e7e:	9a 83       	std	Y+2, r25	; 0x02
    1e80:	89 83       	std	Y+1, r24	; 0x01
    1e82:	0e 94 f9 36 	call	0x6df2	; 0x6df2 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	82 e0       	ldi	r24, 0x02	; 2
    1e8c:	60 e0       	ldi	r22, 0x00	; 0
    1e8e:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <STEPPER_stop>
			break;
	}
	
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    1e92:	80 91 c3 04 	lds	r24, 0x04C3
    1e96:	80 93 c5 04 	sts	0x04C5, r24
	return 1;
}
    1e9a:	81 e0       	ldi	r24, 0x01	; 1
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	ff 90       	pop	r15
    1ea6:	ef 90       	pop	r14
    1ea8:	df 90       	pop	r13
    1eaa:	cf 90       	pop	r12
    1eac:	bf 90       	pop	r11
    1eae:	af 90       	pop	r10
    1eb0:	8f 90       	pop	r8
    1eb2:	08 95       	ret

00001eb4 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot){
    1eb4:	bf 92       	push	r11
    1eb6:	cf 92       	push	r12
    1eb8:	df 92       	push	r13
    1eba:	ef 92       	push	r14
    1ebc:	ff 92       	push	r15
    1ebe:	0f 93       	push	r16
    1ec0:	1f 93       	push	r17
    1ec2:	f8 2e       	mov	r15, r24
    1ec4:	d6 2e       	mov	r13, r22
    1ec6:	04 2f       	mov	r16, r20
    1ec8:	b2 2e       	mov	r11, r18

	r = r*LCD_CELL_OFFSET;
    1eca:	dd 0c       	add	r13, r13
    1ecc:	dd 0c       	add	r13, r13
    1ece:	dd 0c       	add	r13, r13
	c = c*LCD_CELL_OFFSET;
    1ed0:	10 e0       	ldi	r17, 0x00	; 0
    1ed2:	43 e0       	ldi	r20, 0x03	; 3
    1ed4:	00 0f       	add	r16, r16
    1ed6:	11 1f       	adc	r17, r17
    1ed8:	4a 95       	dec	r20
    1eda:	e1 f7       	brne	.-8      	; 0x1ed4 <printCell+0x20>
    1edc:	e0 2e       	mov	r14, r16
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1ede:	1f e1       	ldi	r17, 0x1F	; 31
    1ee0:	1d 19       	sub	r17, r13
    1ee2:	81 2f       	mov	r24, r17
    1ee4:	60 2f       	mov	r22, r16
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1eec:	38 e1       	ldi	r19, 0x18	; 24
    1eee:	c3 2e       	mov	r12, r19
    1ef0:	cd 18       	sub	r12, r13
    1ef2:	8c 2d       	mov	r24, r12
    1ef4:	60 2f       	mov	r22, r16
    1ef6:	41 e0       	ldi	r20, 0x01	; 1
    1ef8:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1efc:	09 5f       	subi	r16, 0xF9	; 249
    1efe:	81 2f       	mov	r24, r17
    1f00:	60 2f       	mov	r22, r16
    1f02:	41 e0       	ldi	r20, 0x01	; 1
    1f04:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1f08:	8c 2d       	mov	r24, r12
    1f0a:	60 2f       	mov	r22, r16
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
    1f0e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
	
	if(cell&0b1000){
    1f12:	f3 fe       	sbrs	r15, 3
    1f14:	24 c0       	rjmp	.+72     	; 0x1f5e <printCell+0xaa>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1f16:	6e 2d       	mov	r22, r14
    1f18:	6f 5f       	subi	r22, 0xFF	; 255
    1f1a:	81 2f       	mov	r24, r17
    1f1c:	41 e0       	ldi	r20, 0x01	; 1
    1f1e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1f22:	6e 2d       	mov	r22, r14
    1f24:	6e 5f       	subi	r22, 0xFE	; 254
    1f26:	81 2f       	mov	r24, r17
    1f28:	41 e0       	ldi	r20, 0x01	; 1
    1f2a:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1f2e:	6e 2d       	mov	r22, r14
    1f30:	6d 5f       	subi	r22, 0xFD	; 253
    1f32:	81 2f       	mov	r24, r17
    1f34:	41 e0       	ldi	r20, 0x01	; 1
    1f36:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1f3a:	6e 2d       	mov	r22, r14
    1f3c:	6c 5f       	subi	r22, 0xFC	; 252
    1f3e:	81 2f       	mov	r24, r17
    1f40:	41 e0       	ldi	r20, 0x01	; 1
    1f42:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1f46:	6e 2d       	mov	r22, r14
    1f48:	6b 5f       	subi	r22, 0xFB	; 251
    1f4a:	81 2f       	mov	r24, r17
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1f52:	6e 2d       	mov	r22, r14
    1f54:	6a 5f       	subi	r22, 0xFA	; 250
    1f56:	81 2f       	mov	r24, r17
    1f58:	41 e0       	ldi	r20, 0x01	; 1
    1f5a:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
	}
	if(cell&0b0100){
    1f5e:	f2 fe       	sbrs	r15, 2
    1f60:	25 c0       	rjmp	.+74     	; 0x1fac <printCell+0xf8>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1f62:	8d 2d       	mov	r24, r13
    1f64:	80 95       	com	r24
    1f66:	81 5e       	subi	r24, 0xE1	; 225
    1f68:	60 2f       	mov	r22, r16
    1f6a:	41 e0       	ldi	r20, 0x01	; 1
    1f6c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1f70:	8d e1       	ldi	r24, 0x1D	; 29
    1f72:	8d 19       	sub	r24, r13
    1f74:	60 2f       	mov	r22, r16
    1f76:	41 e0       	ldi	r20, 0x01	; 1
    1f78:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1f7c:	8c e1       	ldi	r24, 0x1C	; 28
    1f7e:	8d 19       	sub	r24, r13
    1f80:	60 2f       	mov	r22, r16
    1f82:	41 e0       	ldi	r20, 0x01	; 1
    1f84:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1f88:	8b e1       	ldi	r24, 0x1B	; 27
    1f8a:	8d 19       	sub	r24, r13
    1f8c:	60 2f       	mov	r22, r16
    1f8e:	41 e0       	ldi	r20, 0x01	; 1
    1f90:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1f94:	8a e1       	ldi	r24, 0x1A	; 26
    1f96:	8d 19       	sub	r24, r13
    1f98:	60 2f       	mov	r22, r16
    1f9a:	41 e0       	ldi	r20, 0x01	; 1
    1f9c:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1fa0:	89 e1       	ldi	r24, 0x19	; 25
    1fa2:	8d 19       	sub	r24, r13
    1fa4:	60 2f       	mov	r22, r16
    1fa6:	41 e0       	ldi	r20, 0x01	; 1
    1fa8:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
	}
	if(cell&0b0010){
    1fac:	f1 fe       	sbrs	r15, 1
    1fae:	24 c0       	rjmp	.+72     	; 0x1ff8 <printCell+0x144>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1fb0:	6e 2d       	mov	r22, r14
    1fb2:	6f 5f       	subi	r22, 0xFF	; 255
    1fb4:	8c 2d       	mov	r24, r12
    1fb6:	41 e0       	ldi	r20, 0x01	; 1
    1fb8:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1fbc:	6e 2d       	mov	r22, r14
    1fbe:	6e 5f       	subi	r22, 0xFE	; 254
    1fc0:	8c 2d       	mov	r24, r12
    1fc2:	41 e0       	ldi	r20, 0x01	; 1
    1fc4:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1fc8:	6e 2d       	mov	r22, r14
    1fca:	6d 5f       	subi	r22, 0xFD	; 253
    1fcc:	8c 2d       	mov	r24, r12
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1fd4:	6e 2d       	mov	r22, r14
    1fd6:	6c 5f       	subi	r22, 0xFC	; 252
    1fd8:	8c 2d       	mov	r24, r12
    1fda:	41 e0       	ldi	r20, 0x01	; 1
    1fdc:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1fe0:	6e 2d       	mov	r22, r14
    1fe2:	6b 5f       	subi	r22, 0xFB	; 251
    1fe4:	8c 2d       	mov	r24, r12
    1fe6:	41 e0       	ldi	r20, 0x01	; 1
    1fe8:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1fec:	6e 2d       	mov	r22, r14
    1fee:	6a 5f       	subi	r22, 0xFA	; 250
    1ff0:	8c 2d       	mov	r24, r12
    1ff2:	41 e0       	ldi	r20, 0x01	; 1
    1ff4:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
	}
	if(cell&0b0001){
    1ff8:	f0 fe       	sbrs	r15, 0
    1ffa:	25 c0       	rjmp	.+74     	; 0x2046 <printCell+0x192>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1ffc:	8d 2d       	mov	r24, r13
    1ffe:	80 95       	com	r24
    2000:	81 5e       	subi	r24, 0xE1	; 225
    2002:	6e 2d       	mov	r22, r14
    2004:	41 e0       	ldi	r20, 0x01	; 1
    2006:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    200a:	8d e1       	ldi	r24, 0x1D	; 29
    200c:	8d 19       	sub	r24, r13
    200e:	6e 2d       	mov	r22, r14
    2010:	41 e0       	ldi	r20, 0x01	; 1
    2012:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    2016:	8c e1       	ldi	r24, 0x1C	; 28
    2018:	8d 19       	sub	r24, r13
    201a:	6e 2d       	mov	r22, r14
    201c:	41 e0       	ldi	r20, 0x01	; 1
    201e:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    2022:	8b e1       	ldi	r24, 0x1B	; 27
    2024:	8d 19       	sub	r24, r13
    2026:	6e 2d       	mov	r22, r14
    2028:	41 e0       	ldi	r20, 0x01	; 1
    202a:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    202e:	8a e1       	ldi	r24, 0x1A	; 26
    2030:	8d 19       	sub	r24, r13
    2032:	6e 2d       	mov	r22, r14
    2034:	41 e0       	ldi	r20, 0x01	; 1
    2036:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    203a:	89 e1       	ldi	r24, 0x19	; 25
    203c:	8d 19       	sub	r24, r13
    203e:	6e 2d       	mov	r22, r14
    2040:	41 e0       	ldi	r20, 0x01	; 1
    2042:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
	}	
	if(isrobot){
    2046:	bb 20       	and	r11, r11
    2048:	f1 f0       	breq	.+60     	; 0x2086 <printCell+0x1d2>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    204a:	0c e1       	ldi	r16, 0x1C	; 28
    204c:	0d 19       	sub	r16, r13
    204e:	23 e0       	ldi	r18, 0x03	; 3
    2050:	f2 2e       	mov	r15, r18
    2052:	fe 0c       	add	r15, r14
    2054:	80 2f       	mov	r24, r16
    2056:	6f 2d       	mov	r22, r15
    2058:	4b 2d       	mov	r20, r11
    205a:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    205e:	1b e1       	ldi	r17, 0x1B	; 27
    2060:	1d 19       	sub	r17, r13
    2062:	81 2f       	mov	r24, r17
    2064:	6f 2d       	mov	r22, r15
    2066:	4b 2d       	mov	r20, r11
    2068:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    206c:	94 e0       	ldi	r25, 0x04	; 4
    206e:	f9 2e       	mov	r15, r25
    2070:	fe 0c       	add	r15, r14
    2072:	80 2f       	mov	r24, r16
    2074:	6f 2d       	mov	r22, r15
    2076:	4b 2d       	mov	r20, r11
    2078:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    207c:	81 2f       	mov	r24, r17
    207e:	6f 2d       	mov	r22, r15
    2080:	4b 2d       	mov	r20, r11
    2082:	0e 94 f5 18 	call	0x31ea	; 0x31ea <LCD_set_pixel>
	}
}
    2086:	1f 91       	pop	r17
    2088:	0f 91       	pop	r16
    208a:	ff 90       	pop	r15
    208c:	ef 90       	pop	r14
    208e:	df 90       	pop	r13
    2090:	cf 90       	pop	r12
    2092:	bf 90       	pop	r11
    2094:	08 95       	ret

00002096 <printMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(void)
{
    2096:	af 92       	push	r10
    2098:	bf 92       	push	r11
    209a:	df 92       	push	r13
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	0f 92       	push	r0
    20aa:	cd b7       	in	r28, 0x3d	; 61
    20ac:	de b7       	in	r29, 0x3e	; 62
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    20ae:	80 91 e8 06 	lds	r24, 0x06E8
    20b2:	d8 2e       	mov	r13, r24
    20b4:	d6 94       	lsr	r13
    20b6:	d6 94       	lsr	r13
	unsigned char curCol = currentCellWorld & 0b0011;
    20b8:	63 e0       	ldi	r22, 0x03	; 3
    20ba:	e6 2e       	mov	r14, r22
    20bc:	e8 22       	and	r14, r24
    20be:	00 e0       	ldi	r16, 0x00	; 0
    20c0:	10 e0       	ldi	r17, 0x00	; 0
    20c2:	1e c0       	rjmp	.+60     	; 0x2100 <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    20c4:	f5 01       	movw	r30, r10
    20c6:	80 81       	ld	r24, Z
			isrobot = (r == curRow)&&(c == curCol);
    20c8:	fd 14       	cp	r15, r13
    20ca:	19 f0       	breq	.+6      	; 0x20d2 <printMap+0x3c>
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	06 c0       	rjmp	.+12     	; 0x20de <printMap+0x48>
    20d2:	20 e0       	ldi	r18, 0x00	; 0
    20d4:	30 e0       	ldi	r19, 0x00	; 0
    20d6:	9e 15       	cp	r25, r14
    20d8:	11 f4       	brne	.+4      	; 0x20de <printMap+0x48>
    20da:	21 e0       	ldi	r18, 0x01	; 1
    20dc:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot);
    20de:	6f 2d       	mov	r22, r15
    20e0:	49 2f       	mov	r20, r25
    20e2:	99 83       	std	Y+1, r25	; 0x01
    20e4:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    20e8:	99 81       	ldd	r25, Y+1	; 0x01
    20ea:	9f 5f       	subi	r25, 0xFF	; 255
    20ec:	08 94       	sec
    20ee:	a1 1c       	adc	r10, r1
    20f0:	b1 1c       	adc	r11, r1
    20f2:	94 30       	cpi	r25, 0x04	; 4
    20f4:	39 f7       	brne	.-50     	; 0x20c4 <printMap+0x2e>
    20f6:	0f 5f       	subi	r16, 0xFF	; 255
    20f8:	1f 4f       	sbci	r17, 0xFF	; 255
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    20fa:	04 30       	cpi	r16, 0x04	; 4
    20fc:	11 05       	cpc	r17, r1
    20fe:	61 f0       	breq	.+24     	; 0x2118 <printMap+0x82>
    2100:	f0 2e       	mov	r15, r16
    2102:	58 01       	movw	r10, r16
    2104:	aa 0c       	add	r10, r10
    2106:	bb 1c       	adc	r11, r11
    2108:	aa 0c       	add	r10, r10
    210a:	bb 1c       	adc	r11, r11
    210c:	86 ed       	ldi	r24, 0xD6	; 214
    210e:	95 e0       	ldi	r25, 0x05	; 5
    2110:	a8 0e       	add	r10, r24
    2112:	b9 1e       	adc	r11, r25
    2114:	90 e0       	ldi	r25, 0x00	; 0
    2116:	d6 cf       	rjmp	.-84     	; 0x20c4 <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot);
		}	
	}
}
    2118:	0f 90       	pop	r0
    211a:	cf 91       	pop	r28
    211c:	df 91       	pop	r29
    211e:	1f 91       	pop	r17
    2120:	0f 91       	pop	r16
    2122:	ff 90       	pop	r15
    2124:	ef 90       	pop	r14
    2126:	df 90       	pop	r13
    2128:	bf 90       	pop	r11
    212a:	af 90       	pop	r10
    212c:	08 95       	ret

0000212e <CBOT_main>:

void CBOT_main( void )
{
	// initialize the robot
	
	initializeRobot();
    212e:	0e 94 55 19 	call	0x32aa	; 0x32aa <initializeRobot>
	printMap();
    2132:	0e 94 4b 10 	call	0x2096	; 0x2096 <printMap>
	TMRSRVC_delay(1000);//wait 1 seconds
    2136:	88 ee       	ldi	r24, 0xE8	; 232
    2138:	93 e0       	ldi	r25, 0x03	; 3
    213a:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();	
    213e:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	
	// Enter the robot's current (starting) position
	LCD_printf("START Map/nlocation\n\n\n");	
    2142:	8f e3       	ldi	r24, 0x3F	; 63
    2144:	93 e0       	ldi	r25, 0x03	; 3
    2146:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    214a:	88 ee       	ldi	r24, 0xE8	; 232
    214c:	93 e0       	ldi	r25, 0x03	; 3
    214e:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    2152:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	worldInput();
    2156:	0e 94 cf 0b 	call	0x179e	; 0x179e <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    215a:	88 ee       	ldi	r24, 0xE8	; 232
    215c:	93 e0       	ldi	r25, 0x03	; 3
    215e:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    2162:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Map/norientation\n\n\n");	
    2166:	85 e5       	ldi	r24, 0x55	; 85
    2168:	93 e0       	ldi	r25, 0x03	; 3
    216a:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    216e:	88 ee       	ldi	r24, 0xE8	; 232
    2170:	93 e0       	ldi	r25, 0x03	; 3
    2172:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    2176:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	orientationInput();
    217a:	0e 94 12 0c 	call	0x1824	; 0x1824 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    217e:	88 ee       	ldi	r24, 0xE8	; 232
    2180:	93 e0       	ldi	r25, 0x03	; 3
    2182:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    2186:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	
	odometryTrigger = WORLD_RESOLUTION_SIZE;
    218a:	8d e2       	ldi	r24, 0x2D	; 45
    218c:	80 93 c5 05 	sts	0x05C5, r24
	isMapping = 1;
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	80 93 7d 07 	sts	0x077D, r24
    2196:	1b c0       	rjmp	.+54     	; 0x21ce <CBOT_main+0xa0>
	
	
	
	while(isMapping)
	{
		checkIR();	
    2198:	0e 94 cc 18 	call	0x3198	; 0x3198 <checkIR>
		checkWorld();
    219c:	0e 94 32 06 	call	0xc64	; 0xc64 <checkWorld>
		checkOdometry(0);
    21a0:	80 e0       	ldi	r24, 0x00	; 0
    21a2:	0e 94 0a 06 	call	0xc14	; 0xc14 <checkOdometry>
		mapWorld();
    21a6:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <mapWorld>
		isMapping = !((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
    21aa:	90 91 e9 06 	lds	r25, 0x06E9
    21ae:	80 91 e8 06 	lds	r24, 0x06E8
    21b2:	98 17       	cp	r25, r24
    21b4:	41 f4       	brne	.+16     	; 0x21c6 <CBOT_main+0x98>
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	90 91 e6 05 	lds	r25, 0x05E6
    21be:	80 91 e7 05 	lds	r24, 0x05E7
    21c2:	98 17       	cp	r25, r24
    21c4:	11 f0       	breq	.+4      	; 0x21ca <CBOT_main+0x9c>
    21c6:	21 e0       	ldi	r18, 0x01	; 1
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	20 93 7d 07 	sts	0x077D, r18
	odometryTrigger = WORLD_RESOLUTION_SIZE;
	isMapping = 1;
	
	
	
	while(isMapping)
    21ce:	80 91 7d 07 	lds	r24, 0x077D
    21d2:	88 23       	and	r24, r24
    21d4:	09 f7       	brne	.-62     	; 0x2198 <CBOT_main+0x6a>
		mapWorld();
		isMapping = !((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
	}
	
	
	printMap();
    21d6:	0e 94 4b 10 	call	0x2096	; 0x2096 <printMap>
	TMRSRVC_delay(10000);//wait 10 seconds
    21da:	80 e1       	ldi	r24, 0x10	; 16
    21dc:	97 e2       	ldi	r25, 0x27	; 39
    21de:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();	
    21e2:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	
	
	// Enter the robot's current (starting) position
	LCD_printf("START Path\nlocation\n\n\n");	
    21e6:	8e e6       	ldi	r24, 0x6E	; 110
    21e8:	93 e0       	ldi	r25, 0x03	; 3
    21ea:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    21ee:	88 ee       	ldi	r24, 0xE8	; 232
    21f0:	93 e0       	ldi	r25, 0x03	; 3
    21f2:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    21f6:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	worldInput();
    21fa:	0e 94 cf 0b 	call	0x179e	; 0x179e <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    21fe:	88 ee       	ldi	r24, 0xE8	; 232
    2200:	93 e0       	ldi	r25, 0x03	; 3
    2202:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    2206:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Path\norientation\n\n\n");
    220a:	84 e8       	ldi	r24, 0x84	; 132
    220c:	93 e0       	ldi	r25, 0x03	; 3
    220e:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    2212:	88 ee       	ldi	r24, 0xE8	; 232
    2214:	93 e0       	ldi	r25, 0x03	; 3
    2216:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    221a:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	orientationInput();
    221e:	0e 94 12 0c 	call	0x1824	; 0x1824 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    2222:	88 ee       	ldi	r24, 0xE8	; 232
    2224:	93 e0       	ldi	r25, 0x03	; 3
    2226:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    222a:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	
	// Enter the robot topological commands
	LCD_printf("ENTER Path\ncommands\n\n\n");
    222e:	8d e9       	ldi	r24, 0x9D	; 157
    2230:	93 e0       	ldi	r25, 0x03	; 3
    2232:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    2236:	88 ee       	ldi	r24, 0xE8	; 232
    2238:	93 e0       	ldi	r25, 0x03	; 3
    223a:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    223e:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	movesInput();
    2242:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <movesInput>
	TMRSRVC_delay(1000);//wait 1 seconds
    2246:	88 ee       	ldi	r24, 0xE8	; 232
    2248:	93 e0       	ldi	r25, 0x03	; 3
    224a:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    224e:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	
	// Print the robot gateways
	LCD_printf("Robot Gateways:\n\n\n\n");
    2252:	83 eb       	ldi	r24, 0xB3	; 179
    2254:	93 e0       	ldi	r25, 0x03	; 3
    2256:	0e 94 0b 37 	call	0x6e16	; 0x6e16 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    225a:	88 ee       	ldi	r24, 0xE8	; 232
    225c:	93 e0       	ldi	r25, 0x03	; 3
    225e:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    2262:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
	getGateways();
    2266:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <getGateways>
	TMRSRVC_delay(1000);//wait 1 seconds
    226a:	88 ee       	ldi	r24, 0xE8	; 232
    226c:	93 e0       	ldi	r25, 0x03	; 3
    226e:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
	LCD_clear();
    2272:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
		
		
	// Infinite loop
	while (1)
    {
		checkIR();	
    2276:	0e 94 cc 18 	call	0x3198	; 0x3198 <checkIR>
    227a:	fd cf       	rjmp	.-6      	; 0x2276 <CBOT_main+0x148>

0000227c <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
    227c:	2f 92       	push	r2
    227e:	3f 92       	push	r3
    2280:	4f 92       	push	r4
    2282:	5f 92       	push	r5
    2284:	6f 92       	push	r6
    2286:	7f 92       	push	r7
    2288:	8f 92       	push	r8
    228a:	9f 92       	push	r9
    228c:	af 92       	push	r10
    228e:	bf 92       	push	r11
    2290:	cf 92       	push	r12
    2292:	df 92       	push	r13
    2294:	ef 92       	push	r14
    2296:	ff 92       	push	r15
    2298:	0f 93       	push	r16
    229a:	1f 93       	push	r17
    229c:	df 93       	push	r29
    229e:	cf 93       	push	r28
    22a0:	cd b7       	in	r28, 0x3d	; 61
    22a2:	de b7       	in	r29, 0x3e	; 62
    22a4:	64 97       	sbiw	r28, 0x14	; 20
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
    22b0:	88 23       	and	r24, r24
    22b2:	39 f5       	brne	.+78     	; 0x2302 <prefilter+0x86>
    22b4:	86 e3       	ldi	r24, 0x36	; 54
    22b6:	95 e0       	ldi	r25, 0x05	; 5
    22b8:	9c 8b       	std	Y+20, r25	; 0x14
    22ba:	8b 8b       	std	Y+19, r24	; 0x13
    22bc:	a5 e6       	ldi	r26, 0x65	; 101
    22be:	b7 e0       	ldi	r27, 0x07	; 7
    22c0:	be 83       	std	Y+6, r27	; 0x06
    22c2:	ad 83       	std	Y+5, r26	; 0x05
    22c4:	ec e5       	ldi	r30, 0x5C	; 92
    22c6:	f6 e0       	ldi	r31, 0x06	; 6
    22c8:	fc 83       	std	Y+4, r31	; 0x04
    22ca:	eb 83       	std	Y+3, r30	; 0x03
    22cc:	8d eb       	ldi	r24, 0xBD	; 189
    22ce:	95 e0       	ldi	r25, 0x05	; 5
    22d0:	9a 83       	std	Y+2, r25	; 0x02
    22d2:	89 83       	std	Y+1, r24	; 0x01
    22d4:	0f 2e       	mov	r0, r31
    22d6:	f0 e0       	ldi	r31, 0x00	; 0
    22d8:	2f 2e       	mov	r2, r31
    22da:	f0 e0       	ldi	r31, 0x00	; 0
    22dc:	3f 2e       	mov	r3, r31
    22de:	f0 e0       	ldi	r31, 0x00	; 0
    22e0:	4f 2e       	mov	r4, r31
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	5f 2e       	mov	r5, r31
    22e6:	f0 2d       	mov	r31, r0
    22e8:	2f 86       	std	Y+15, r2	; 0x0f
    22ea:	38 8a       	std	Y+16, r3	; 0x10
    22ec:	49 8a       	std	Y+17, r4	; 0x11
    22ee:	5a 8a       	std	Y+18, r5	; 0x12
    22f0:	2b 86       	std	Y+11, r2	; 0x0b
    22f2:	3c 86       	std	Y+12, r3	; 0x0c
    22f4:	4d 86       	std	Y+13, r4	; 0x0d
    22f6:	5e 86       	std	Y+14, r5	; 0x0e
    22f8:	2f 82       	std	Y+7, r2	; 0x07
    22fa:	38 86       	std	Y+8, r3	; 0x08
    22fc:	49 86       	std	Y+9, r4	; 0x09
    22fe:	5a 86       	std	Y+10, r5	; 0x0a
    2300:	43 c0       	rjmp	.+134    	; 0x2388 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    2302:	a0 90 ec 06 	lds	r10, 0x06EC
    2306:	b0 90 ed 06 	lds	r11, 0x06ED
    230a:	c0 90 ee 06 	lds	r12, 0x06EE
    230e:	d0 90 ef 06 	lds	r13, 0x06EF
			rtIR_old[i] = rtIR;
    2312:	e0 90 f1 06 	lds	r14, 0x06F1
    2316:	f0 90 f2 06 	lds	r15, 0x06F2
    231a:	00 91 f3 06 	lds	r16, 0x06F3
    231e:	10 91 f4 06 	lds	r17, 0x06F4
			ftIR_old[i] = ftIR;
    2322:	20 90 3e 05 	lds	r2, 0x053E
    2326:	30 90 3f 05 	lds	r3, 0x053F
    232a:	40 90 40 05 	lds	r4, 0x0540
    232e:	50 90 41 05 	lds	r5, 0x0541
			bkIR_old[i] = bkIR;
    2332:	20 91 48 05 	lds	r18, 0x0548
    2336:	30 91 49 05 	lds	r19, 0x0549
    233a:	40 91 4a 05 	lds	r20, 0x054A
    233e:	50 91 4b 05 	lds	r21, 0x054B
    2342:	80 e0       	ldi	r24, 0x00	; 0
    2344:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    2346:	fc 01       	movw	r30, r24
    2348:	ea 53       	subi	r30, 0x3A	; 58
    234a:	fb 4f       	sbci	r31, 0xFB	; 251
    234c:	a0 82       	st	Z, r10
    234e:	b1 82       	std	Z+1, r11	; 0x01
    2350:	c2 82       	std	Z+2, r12	; 0x02
    2352:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
    2354:	fc 01       	movw	r30, r24
    2356:	eb 50       	subi	r30, 0x0B	; 11
    2358:	f9 4f       	sbci	r31, 0xF9	; 249
    235a:	e0 82       	st	Z, r14
    235c:	f1 82       	std	Z+1, r15	; 0x01
    235e:	02 83       	std	Z+2, r16	; 0x02
    2360:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
    2362:	fc 01       	movw	r30, r24
    2364:	e4 51       	subi	r30, 0x14	; 20
    2366:	fa 4f       	sbci	r31, 0xFA	; 250
    2368:	20 82       	st	Z, r2
    236a:	31 82       	std	Z+1, r3	; 0x01
    236c:	42 82       	std	Z+2, r4	; 0x02
    236e:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
    2370:	fc 01       	movw	r30, r24
    2372:	e3 5b       	subi	r30, 0xB3	; 179
    2374:	fa 4f       	sbci	r31, 0xFA	; 250
    2376:	20 83       	st	Z, r18
    2378:	31 83       	std	Z+1, r19	; 0x01
    237a:	42 83       	std	Z+2, r20	; 0x02
    237c:	53 83       	std	Z+3, r21	; 0x03
    237e:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
    2380:	88 37       	cpi	r24, 0x78	; 120
    2382:	91 05       	cpc	r25, r1
    2384:	01 f7       	brne	.-64     	; 0x2346 <prefilter+0xca>
    2386:	96 cf       	rjmp	.-212    	; 0x22b4 <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
    2388:	ab 89       	ldd	r26, Y+19	; 0x13
    238a:	bc 89       	ldd	r27, Y+20	; 0x14
    238c:	2d 91       	ld	r18, X+
    238e:	3d 91       	ld	r19, X+
    2390:	4d 91       	ld	r20, X+
    2392:	5c 91       	ld	r21, X
    2394:	13 97       	sbiw	r26, 0x03	; 3
    2396:	fd 01       	movw	r30, r26
    2398:	24 83       	std	Z+4, r18	; 0x04
    239a:	35 83       	std	Z+5, r19	; 0x05
    239c:	46 83       	std	Z+6, r20	; 0x06
    239e:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
    23a0:	ad 81       	ldd	r26, Y+5	; 0x05
    23a2:	be 81       	ldd	r27, Y+6	; 0x06
    23a4:	ed 90       	ld	r14, X+
    23a6:	fd 90       	ld	r15, X+
    23a8:	0d 91       	ld	r16, X+
    23aa:	1c 91       	ld	r17, X
    23ac:	13 97       	sbiw	r26, 0x03	; 3
    23ae:	fd 01       	movw	r30, r26
    23b0:	e4 82       	std	Z+4, r14	; 0x04
    23b2:	f5 82       	std	Z+5, r15	; 0x05
    23b4:	06 83       	std	Z+6, r16	; 0x06
    23b6:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
    23b8:	ab 81       	ldd	r26, Y+3	; 0x03
    23ba:	bc 81       	ldd	r27, Y+4	; 0x04
    23bc:	ad 90       	ld	r10, X+
    23be:	bd 90       	ld	r11, X+
    23c0:	cd 90       	ld	r12, X+
    23c2:	dc 90       	ld	r13, X
    23c4:	13 97       	sbiw	r26, 0x03	; 3
    23c6:	fd 01       	movw	r30, r26
    23c8:	a4 82       	std	Z+4, r10	; 0x04
    23ca:	b5 82       	std	Z+5, r11	; 0x05
    23cc:	c6 82       	std	Z+6, r12	; 0x06
    23ce:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
    23d0:	a9 81       	ldd	r26, Y+1	; 0x01
    23d2:	ba 81       	ldd	r27, Y+2	; 0x02
    23d4:	6d 90       	ld	r6, X+
    23d6:	7d 90       	ld	r7, X+
    23d8:	8d 90       	ld	r8, X+
    23da:	9c 90       	ld	r9, X
    23dc:	13 97       	sbiw	r26, 0x03	; 3
    23de:	fd 01       	movw	r30, r26
    23e0:	64 82       	std	Z+4, r6	; 0x04
    23e2:	75 82       	std	Z+5, r7	; 0x05
    23e4:	86 82       	std	Z+6, r8	; 0x06
    23e6:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
    23e8:	c2 01       	movw	r24, r4
    23ea:	b1 01       	movw	r22, r2
    23ec:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    23f0:	1b 01       	movw	r2, r22
    23f2:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
    23f4:	6f 85       	ldd	r22, Y+15	; 0x0f
    23f6:	78 89       	ldd	r23, Y+16	; 0x10
    23f8:	89 89       	ldd	r24, Y+17	; 0x11
    23fa:	9a 89       	ldd	r25, Y+18	; 0x12
    23fc:	a8 01       	movw	r20, r16
    23fe:	97 01       	movw	r18, r14
    2400:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    2404:	6f 87       	std	Y+15, r22	; 0x0f
    2406:	78 8b       	std	Y+16, r23	; 0x10
    2408:	89 8b       	std	Y+17, r24	; 0x11
    240a:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
    240c:	6b 85       	ldd	r22, Y+11	; 0x0b
    240e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2410:	8d 85       	ldd	r24, Y+13	; 0x0d
    2412:	9e 85       	ldd	r25, Y+14	; 0x0e
    2414:	a6 01       	movw	r20, r12
    2416:	95 01       	movw	r18, r10
    2418:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    241c:	6b 87       	std	Y+11, r22	; 0x0b
    241e:	7c 87       	std	Y+12, r23	; 0x0c
    2420:	8d 87       	std	Y+13, r24	; 0x0d
    2422:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
    2424:	6f 81       	ldd	r22, Y+7	; 0x07
    2426:	78 85       	ldd	r23, Y+8	; 0x08
    2428:	89 85       	ldd	r24, Y+9	; 0x09
    242a:	9a 85       	ldd	r25, Y+10	; 0x0a
    242c:	a4 01       	movw	r20, r8
    242e:	93 01       	movw	r18, r6
    2430:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    2434:	6f 83       	std	Y+7, r22	; 0x07
    2436:	78 87       	std	Y+8, r23	; 0x08
    2438:	89 87       	std	Y+9, r24	; 0x09
    243a:	9a 87       	std	Y+10, r25	; 0x0a
    243c:	8b 89       	ldd	r24, Y+19	; 0x13
    243e:	9c 89       	ldd	r25, Y+20	; 0x14
    2440:	04 97       	sbiw	r24, 0x04	; 4
    2442:	9c 8b       	std	Y+20, r25	; 0x14
    2444:	8b 8b       	std	Y+19, r24	; 0x13
    2446:	ad 81       	ldd	r26, Y+5	; 0x05
    2448:	be 81       	ldd	r27, Y+6	; 0x06
    244a:	14 97       	sbiw	r26, 0x04	; 4
    244c:	be 83       	std	Y+6, r27	; 0x06
    244e:	ad 83       	std	Y+5, r26	; 0x05
    2450:	eb 81       	ldd	r30, Y+3	; 0x03
    2452:	fc 81       	ldd	r31, Y+4	; 0x04
    2454:	34 97       	sbiw	r30, 0x04	; 4
    2456:	fc 83       	std	Y+4, r31	; 0x04
    2458:	eb 83       	std	Y+3, r30	; 0x03
    245a:	89 81       	ldd	r24, Y+1	; 0x01
    245c:	9a 81       	ldd	r25, Y+2	; 0x02
    245e:	04 97       	sbiw	r24, 0x04	; 4
    2460:	9a 83       	std	Y+2, r25	; 0x02
    2462:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
    2464:	ab 89       	ldd	r26, Y+19	; 0x13
    2466:	bc 89       	ldd	r27, Y+20	; 0x14
    2468:	ae 5b       	subi	r26, 0xBE	; 190
    246a:	b4 40       	sbci	r27, 0x04	; 4
    246c:	09 f0       	breq	.+2      	; 0x2470 <prefilter+0x1f4>
    246e:	8c cf       	rjmp	.-232    	; 0x2388 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
    2470:	80 91 ec 06 	lds	r24, 0x06EC
    2474:	90 91 ed 06 	lds	r25, 0x06ED
    2478:	a0 91 ee 06 	lds	r26, 0x06EE
    247c:	b0 91 ef 06 	lds	r27, 0x06EF
    2480:	eb 89       	ldd	r30, Y+19	; 0x13
    2482:	fc 89       	ldd	r31, Y+20	; 0x14
    2484:	80 87       	std	Z+8, r24	; 0x08
    2486:	91 87       	std	Z+9, r25	; 0x09
    2488:	a2 87       	std	Z+10, r26	; 0x0a
    248a:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
    248c:	80 91 f1 06 	lds	r24, 0x06F1
    2490:	90 91 f2 06 	lds	r25, 0x06F2
    2494:	a0 91 f3 06 	lds	r26, 0x06F3
    2498:	b0 91 f4 06 	lds	r27, 0x06F4
    249c:	80 93 f5 06 	sts	0x06F5, r24
    24a0:	90 93 f6 06 	sts	0x06F6, r25
    24a4:	a0 93 f7 06 	sts	0x06F7, r26
    24a8:	b0 93 f8 06 	sts	0x06F8, r27
	ftIR_old[0] = ftIR;
    24ac:	80 91 3e 05 	lds	r24, 0x053E
    24b0:	90 91 3f 05 	lds	r25, 0x053F
    24b4:	a0 91 40 05 	lds	r26, 0x0540
    24b8:	b0 91 41 05 	lds	r27, 0x0541
    24bc:	80 93 ec 05 	sts	0x05EC, r24
    24c0:	90 93 ed 05 	sts	0x05ED, r25
    24c4:	a0 93 ee 05 	sts	0x05EE, r26
    24c8:	b0 93 ef 05 	sts	0x05EF, r27
	bkIR_old[0] = bkIR;
    24cc:	80 91 48 05 	lds	r24, 0x0548
    24d0:	90 91 49 05 	lds	r25, 0x0549
    24d4:	a0 91 4a 05 	lds	r26, 0x054A
    24d8:	b0 91 4b 05 	lds	r27, 0x054B
    24dc:	80 93 4d 05 	sts	0x054D, r24
    24e0:	90 93 4e 05 	sts	0x054E, r25
    24e4:	a0 93 4f 05 	sts	0x054F, r26
    24e8:	b0 93 50 05 	sts	0x0550, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
    24ec:	c2 01       	movw	r24, r4
    24ee:	b1 01       	movw	r22, r2
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 ef       	ldi	r20, 0xF0	; 240
    24f6:	51 e4       	ldi	r21, 0x41	; 65
    24f8:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    24fc:	60 93 ec 06 	sts	0x06EC, r22
    2500:	70 93 ed 06 	sts	0x06ED, r23
    2504:	80 93 ee 06 	sts	0x06EE, r24
    2508:	90 93 ef 06 	sts	0x06EF, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
    250c:	6f 85       	ldd	r22, Y+15	; 0x0f
    250e:	78 89       	ldd	r23, Y+16	; 0x10
    2510:	89 89       	ldd	r24, Y+17	; 0x11
    2512:	9a 89       	ldd	r25, Y+18	; 0x12
    2514:	20 e0       	ldi	r18, 0x00	; 0
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	40 ef       	ldi	r20, 0xF0	; 240
    251a:	51 e4       	ldi	r21, 0x41	; 65
    251c:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2520:	60 93 f1 06 	sts	0x06F1, r22
    2524:	70 93 f2 06 	sts	0x06F2, r23
    2528:	80 93 f3 06 	sts	0x06F3, r24
    252c:	90 93 f4 06 	sts	0x06F4, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
    2530:	6b 85       	ldd	r22, Y+11	; 0x0b
    2532:	7c 85       	ldd	r23, Y+12	; 0x0c
    2534:	8d 85       	ldd	r24, Y+13	; 0x0d
    2536:	9e 85       	ldd	r25, Y+14	; 0x0e
    2538:	20 e0       	ldi	r18, 0x00	; 0
    253a:	30 e0       	ldi	r19, 0x00	; 0
    253c:	40 ef       	ldi	r20, 0xF0	; 240
    253e:	51 e4       	ldi	r21, 0x41	; 65
    2540:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2544:	60 93 3e 05 	sts	0x053E, r22
    2548:	70 93 3f 05 	sts	0x053F, r23
    254c:	80 93 40 05 	sts	0x0540, r24
    2550:	90 93 41 05 	sts	0x0541, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
    2554:	6f 81       	ldd	r22, Y+7	; 0x07
    2556:	78 85       	ldd	r23, Y+8	; 0x08
    2558:	89 85       	ldd	r24, Y+9	; 0x09
    255a:	9a 85       	ldd	r25, Y+10	; 0x0a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 ef       	ldi	r20, 0xF0	; 240
    2562:	51 e4       	ldi	r21, 0x41	; 65
    2564:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2568:	60 93 48 05 	sts	0x0548, r22
    256c:	70 93 49 05 	sts	0x0549, r23
    2570:	80 93 4a 05 	sts	0x054A, r24
    2574:	90 93 4b 05 	sts	0x054B, r25
}
    2578:	64 96       	adiw	r28, 0x14	; 20
    257a:	0f b6       	in	r0, 0x3f	; 63
    257c:	f8 94       	cli
    257e:	de bf       	out	0x3e, r29	; 62
    2580:	0f be       	out	0x3f, r0	; 63
    2582:	cd bf       	out	0x3d, r28	; 61
    2584:	cf 91       	pop	r28
    2586:	df 91       	pop	r29
    2588:	1f 91       	pop	r17
    258a:	0f 91       	pop	r16
    258c:	ff 90       	pop	r15
    258e:	ef 90       	pop	r14
    2590:	df 90       	pop	r13
    2592:	cf 90       	pop	r12
    2594:	bf 90       	pop	r11
    2596:	af 90       	pop	r10
    2598:	9f 90       	pop	r9
    259a:	8f 90       	pop	r8
    259c:	7f 90       	pop	r7
    259e:	6f 90       	pop	r6
    25a0:	5f 90       	pop	r5
    25a2:	4f 90       	pop	r4
    25a4:	3f 90       	pop	r3
    25a6:	2f 90       	pop	r2
    25a8:	08 95       	ret

000025aa <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
    25aa:	af 92       	push	r10
    25ac:	bf 92       	push	r11
    25ae:	cf 92       	push	r12
    25b0:	df 92       	push	r13
    25b2:	ef 92       	push	r14
    25b4:	ff 92       	push	r15
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	7b 01       	movw	r14, r22
    25bc:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
    25be:	44 23       	and	r20, r20
    25c0:	61 f0       	breq	.+24     	; 0x25da <pidController+0x30>
		Ierror = 0;
    25c2:	80 e0       	ldi	r24, 0x00	; 0
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	a0 e0       	ldi	r26, 0x00	; 0
    25c8:	b0 e0       	ldi	r27, 0x00	; 0
    25ca:	80 93 42 05 	sts	0x0542, r24
    25ce:	90 93 43 05 	sts	0x0543, r25
    25d2:	a0 93 44 05 	sts	0x0544, r26
    25d6:	b0 93 45 05 	sts	0x0545, r27
	}
	// At the current error to the running sum
	Ierror += error;
    25da:	c8 01       	movw	r24, r16
    25dc:	b7 01       	movw	r22, r14
    25de:	20 91 42 05 	lds	r18, 0x0542
    25e2:	30 91 43 05 	lds	r19, 0x0543
    25e6:	40 91 44 05 	lds	r20, 0x0544
    25ea:	50 91 45 05 	lds	r21, 0x0545
    25ee:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    25f2:	5b 01       	movw	r10, r22
    25f4:	6c 01       	movw	r12, r24
    25f6:	60 93 42 05 	sts	0x0542, r22
    25fa:	70 93 43 05 	sts	0x0543, r23
    25fe:	80 93 44 05 	sts	0x0544, r24
    2602:	90 93 45 05 	sts	0x0545, r25
    2606:	c8 01       	movw	r24, r16
    2608:	b7 01       	movw	r22, r14
    260a:	20 91 e8 05 	lds	r18, 0x05E8
    260e:	30 91 e9 05 	lds	r19, 0x05E9
    2612:	40 91 ea 05 	lds	r20, 0x05EA
    2616:	50 91 eb 05 	lds	r21, 0x05EB
    261a:	0e 94 c0 2c 	call	0x5980	; 0x5980 <__subsf3>
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e0       	ldi	r20, 0x00	; 0
    2624:	50 e0       	ldi	r21, 0x00	; 0
    2626:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    262a:	9b 01       	movw	r18, r22
    262c:	ac 01       	movw	r20, r24
    262e:	c8 01       	movw	r24, r16
    2630:	b7 01       	movw	r22, r14
    2632:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    2636:	7b 01       	movw	r14, r22
    2638:	8c 01       	movw	r16, r24
    263a:	c6 01       	movw	r24, r12
    263c:	b5 01       	movw	r22, r10
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e0       	ldi	r20, 0x00	; 0
    2644:	50 e0       	ldi	r21, 0x00	; 0
    2646:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    264a:	9b 01       	movw	r18, r22
    264c:	ac 01       	movw	r20, r24
    264e:	c8 01       	movw	r24, r16
    2650:	b7 01       	movw	r22, r14
    2652:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	df 90       	pop	r13
    2660:	cf 90       	pop	r12
    2662:	bf 90       	pop	r11
    2664:	af 90       	pop	r10
    2666:	08 95       	ret

00002668 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    2668:	44 23       	and	r20, r20
    266a:	81 f0       	breq	.+32     	; 0x268c <rotateCell+0x24>
    266c:	06 c0       	rjmp	.+12     	; 0x267a <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    266e:	e8 2f       	mov	r30, r24
    2670:	f0 e0       	ldi	r31, 0x00	; 0
    2672:	ea 53       	subi	r30, 0x3A	; 58
    2674:	fc 4f       	sbci	r31, 0xFC	; 252
    2676:	80 81       	ld	r24, Z
			orient--;
    2678:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    267a:	66 23       	and	r22, r22
    267c:	c1 f7       	brne	.-16     	; 0x266e <rotateCell+0x6>
    267e:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    2680:	e8 2f       	mov	r30, r24
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	ea 52       	subi	r30, 0x2A	; 42
    2686:	fc 4f       	sbci	r31, 0xFC	; 252
    2688:	80 81       	ld	r24, Z
			orient--;
    268a:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    268c:	66 23       	and	r22, r22
    268e:	c1 f7       	brne	.-16     	; 0x2680 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    2690:	08 95       	ret

00002692 <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    2692:	2f 92       	push	r2
    2694:	3f 92       	push	r3
    2696:	4f 92       	push	r4
    2698:	5f 92       	push	r5
    269a:	6f 92       	push	r6
    269c:	7f 92       	push	r7
    269e:	8f 92       	push	r8
    26a0:	9f 92       	push	r9
    26a2:	af 92       	push	r10
    26a4:	bf 92       	push	r11
    26a6:	cf 92       	push	r12
    26a8:	df 92       	push	r13
    26aa:	ef 92       	push	r14
    26ac:	ff 92       	push	r15
    26ae:	0f 93       	push	r16
    26b0:	1f 93       	push	r17
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	a0 97       	sbiw	r28, 0x20	; 32
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	2b 01       	movw	r4, r22
    26c8:	3c 01       	movw	r6, r24
    26ca:	2d 83       	std	Y+5, r18	; 0x05
    26cc:	3e 83       	std	Y+6, r19	; 0x06
    26ce:	4f 83       	std	Y+7, r20	; 0x07
    26d0:	58 87       	std	Y+8, r21	; 0x08
    26d2:	e9 86       	std	Y+9, r14	; 0x09
    26d4:	fa 86       	std	Y+10, r15	; 0x0a
    26d6:	0b 87       	std	Y+11, r16	; 0x0b
    26d8:	1c 87       	std	Y+12, r17	; 0x0c
    26da:	ad 86       	std	Y+13, r10	; 0x0d
    26dc:	be 86       	std	Y+14, r11	; 0x0e
    26de:	cf 86       	std	Y+15, r12	; 0x0f
    26e0:	d8 8a       	std	Y+16, r13	; 0x10
    26e2:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    26e4:	33 24       	eor	r3, r3
    26e6:	ca 01       	movw	r24, r20
    26e8:	b9 01       	movw	r22, r18
    26ea:	20 e0       	ldi	r18, 0x00	; 0
    26ec:	30 e0       	ldi	r19, 0x00	; 0
    26ee:	40 e0       	ldi	r20, 0x00	; 0
    26f0:	50 e0       	ldi	r21, 0x00	; 0
    26f2:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__gesf2>
    26f6:	18 16       	cp	r1, r24
    26f8:	14 f4       	brge	.+4      	; 0x26fe <move_arc_stnb+0x6c>
    26fa:	33 24       	eor	r3, r3
    26fc:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    26fe:	6d 81       	ldd	r22, Y+5	; 0x05
    2700:	7e 81       	ldd	r23, Y+6	; 0x06
    2702:	8f 81       	ldd	r24, Y+7	; 0x07
    2704:	98 85       	ldd	r25, Y+8	; 0x08
    2706:	2c ed       	ldi	r18, 0xDC	; 220
    2708:	38 eb       	ldi	r19, 0xB8	; 184
    270a:	48 e0       	ldi	r20, 0x08	; 8
    270c:	5e e3       	ldi	r21, 0x3E	; 62
    270e:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2712:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <__fixsfsi>
    2716:	9b 01       	movw	r18, r22
    2718:	77 ff       	sbrs	r23, 7
    271a:	03 c0       	rjmp	.+6      	; 0x2722 <move_arc_stnb+0x90>
    271c:	30 95       	com	r19
    271e:	21 95       	neg	r18
    2720:	3f 4f       	sbci	r19, 0xFF	; 255
    2722:	b9 01       	movw	r22, r18
    2724:	88 27       	eor	r24, r24
    2726:	77 fd       	sbrc	r23, 7
    2728:	80 95       	com	r24
    272a:	98 2f       	mov	r25, r24
    272c:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
    2730:	69 83       	std	Y+1, r22	; 0x01
    2732:	7a 83       	std	Y+2, r23	; 0x02
    2734:	8b 83       	std	Y+3, r24	; 0x03
    2736:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    2738:	69 85       	ldd	r22, Y+9	; 0x09
    273a:	7a 85       	ldd	r23, Y+10	; 0x0a
    273c:	8b 85       	ldd	r24, Y+11	; 0x0b
    273e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2740:	2c ed       	ldi	r18, 0xDC	; 220
    2742:	38 eb       	ldi	r19, 0xB8	; 184
    2744:	48 e0       	ldi	r20, 0x08	; 8
    2746:	5e e3       	ldi	r21, 0x3E	; 62
    2748:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    274c:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <__fixsfsi>
    2750:	9b 01       	movw	r18, r22
    2752:	77 ff       	sbrs	r23, 7
    2754:	03 c0       	rjmp	.+6      	; 0x275c <move_arc_stnb+0xca>
    2756:	30 95       	com	r19
    2758:	21 95       	neg	r18
    275a:	3f 4f       	sbci	r19, 0xFF	; 255
    275c:	b9 01       	movw	r22, r18
    275e:	88 27       	eor	r24, r24
    2760:	77 fd       	sbrc	r23, 7
    2762:	80 95       	com	r24
    2764:	98 2f       	mov	r25, r24
    2766:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
    276a:	4b 01       	movw	r8, r22
    276c:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    276e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2770:	7e 85       	ldd	r23, Y+14	; 0x0e
    2772:	8f 85       	ldd	r24, Y+15	; 0x0f
    2774:	98 89       	ldd	r25, Y+16	; 0x10
    2776:	2c ed       	ldi	r18, 0xDC	; 220
    2778:	38 eb       	ldi	r19, 0xB8	; 184
    277a:	48 e0       	ldi	r20, 0x08	; 8
    277c:	5e e3       	ldi	r21, 0x3E	; 62
    277e:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2782:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <__fixsfsi>
    2786:	9b 01       	movw	r18, r22
    2788:	77 ff       	sbrs	r23, 7
    278a:	03 c0       	rjmp	.+6      	; 0x2792 <move_arc_stnb+0x100>
    278c:	30 95       	com	r19
    278e:	21 95       	neg	r18
    2790:	3f 4f       	sbci	r19, 0xFF	; 255
    2792:	b9 01       	movw	r22, r18
    2794:	88 27       	eor	r24, r24
    2796:	77 fd       	sbrc	r23, 7
    2798:	80 95       	com	r24
    279a:	98 2f       	mov	r25, r24
    279c:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
    27a0:	6b 01       	movw	r12, r22
    27a2:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    27a4:	c3 01       	movw	r24, r6
    27a6:	b2 01       	movw	r22, r4
    27a8:	20 e0       	ldi	r18, 0x00	; 0
    27aa:	30 e0       	ldi	r19, 0x00	; 0
    27ac:	40 e0       	ldi	r20, 0x00	; 0
    27ae:	5f e4       	ldi	r21, 0x4F	; 79
    27b0:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
    27b4:	88 23       	and	r24, r24
    27b6:	a1 f5       	brne	.+104    	; 0x2820 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    27b8:	69 81       	ldd	r22, Y+1	; 0x01
    27ba:	7a 81       	ldd	r23, Y+2	; 0x02
    27bc:	8b 81       	ldd	r24, Y+3	; 0x03
    27be:	9c 81       	ldd	r25, Y+4	; 0x04
    27c0:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    27c4:	2b 01       	movw	r4, r22
    27c6:	3c 01       	movw	r6, r24
    27c8:	c5 01       	movw	r24, r10
    27ca:	b4 01       	movw	r22, r8
    27cc:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    27d0:	4b 01       	movw	r8, r22
    27d2:	5c 01       	movw	r10, r24
    27d4:	c7 01       	movw	r24, r14
    27d6:	b6 01       	movw	r22, r12
    27d8:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    27dc:	6b 01       	movw	r12, r22
    27de:	7c 01       	movw	r14, r24
    27e0:	2d b7       	in	r18, 0x3d	; 61
    27e2:	3e b7       	in	r19, 0x3e	; 62
    27e4:	29 50       	subi	r18, 0x09	; 9
    27e6:	30 40       	sbci	r19, 0x00	; 0
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	3e bf       	out	0x3e, r19	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	2d bf       	out	0x3d, r18	; 61
    27f2:	ed b7       	in	r30, 0x3d	; 61
    27f4:	fe b7       	in	r31, 0x3e	; 62
    27f6:	31 96       	adiw	r30, 0x01	; 1
    27f8:	ad b7       	in	r26, 0x3d	; 61
    27fa:	be b7       	in	r27, 0x3e	; 62
    27fc:	12 96       	adiw	r26, 0x02	; 2
    27fe:	5c 92       	st	X, r5
    2800:	4e 92       	st	-X, r4
    2802:	11 97       	sbiw	r26, 0x01	; 1
    2804:	93 82       	std	Z+3, r9	; 0x03
    2806:	82 82       	std	Z+2, r8	; 0x02
    2808:	75 83       	std	Z+5, r23	; 0x05
    280a:	64 83       	std	Z+4, r22	; 0x04
    280c:	26 82       	std	Z+6, r2	; 0x06
    280e:	10 86       	std	Z+8, r1	; 0x08
    2810:	17 82       	std	Z+7, r1	; 0x07
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	62 e0       	ldi	r22, 0x02	; 2
    2816:	43 2d       	mov	r20, r3
    2818:	92 01       	movw	r18, r4
    281a:	84 01       	movw	r16, r8
    281c:	76 01       	movw	r14, r12
    281e:	c1 c1       	rjmp	.+898    	; 0x2ba2 <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    2820:	c3 01       	movw	r24, r6
    2822:	b2 01       	movw	r22, r4
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e0       	ldi	r20, 0x00	; 0
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
    2830:	88 23       	and	r24, r24
    2832:	e9 f5       	brne	.+122    	; 0x28ae <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    2834:	69 81       	ldd	r22, Y+1	; 0x01
    2836:	7a 81       	ldd	r23, Y+2	; 0x02
    2838:	8b 81       	ldd	r24, Y+3	; 0x03
    283a:	9c 81       	ldd	r25, Y+4	; 0x04
    283c:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2840:	3b 01       	movw	r6, r22
    2842:	c5 01       	movw	r24, r10
    2844:	b4 01       	movw	r22, r8
    2846:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    284a:	8b 01       	movw	r16, r22
    284c:	c7 01       	movw	r24, r14
    284e:	b6 01       	movw	r22, r12
    2850:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2854:	7b 01       	movw	r14, r22
    2856:	2d b7       	in	r18, 0x3d	; 61
    2858:	3e b7       	in	r19, 0x3e	; 62
    285a:	29 50       	subi	r18, 0x09	; 9
    285c:	30 40       	sbci	r19, 0x00	; 0
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	3e bf       	out	0x3e, r19	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	2d bf       	out	0x3d, r18	; 61
    2868:	ed b7       	in	r30, 0x3d	; 61
    286a:	fe b7       	in	r31, 0x3e	; 62
    286c:	31 96       	adiw	r30, 0x01	; 1
    286e:	40 e0       	ldi	r20, 0x00	; 0
    2870:	33 20       	and	r3, r3
    2872:	09 f4       	brne	.+2      	; 0x2876 <move_arc_stnb+0x1e4>
    2874:	41 e0       	ldi	r20, 0x01	; 1
    2876:	71 82       	std	Z+1, r7	; 0x01
    2878:	60 82       	st	Z, r6
    287a:	13 83       	std	Z+3, r17	; 0x03
    287c:	02 83       	std	Z+2, r16	; 0x02
    287e:	f5 82       	std	Z+5, r15	; 0x05
    2880:	e4 82       	std	Z+4, r14	; 0x04
    2882:	26 82       	std	Z+6, r2	; 0x06
    2884:	10 86       	std	Z+8, r1	; 0x08
    2886:	17 82       	std	Z+7, r1	; 0x07
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	62 e0       	ldi	r22, 0x02	; 2
    288c:	93 01       	movw	r18, r6
    288e:	c2 2c       	mov	r12, r2
    2890:	aa 24       	eor	r10, r10
    2892:	bb 24       	eor	r11, r11
    2894:	83 2c       	mov	r8, r3
    2896:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <STEPPER_move>
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	ad b7       	in	r26, 0x3d	; 61
    289e:	be b7       	in	r27, 0x3e	; 62
    28a0:	19 96       	adiw	r26, 0x09	; 9
    28a2:	0f b6       	in	r0, 0x3f	; 63
    28a4:	f8 94       	cli
    28a6:	be bf       	out	0x3e, r27	; 62
    28a8:	0f be       	out	0x3f, r0	; 63
    28aa:	ad bf       	out	0x3d, r26	; 61
    28ac:	89 c1       	rjmp	.+786    	; 0x2bc0 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    28ae:	c3 01       	movw	r24, r6
    28b0:	b2 01       	movw	r22, r4
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e0       	ldi	r20, 0x00	; 0
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__gesf2>
    28be:	18 16       	cp	r1, r24
    28c0:	0c f0       	brlt	.+2      	; 0x28c4 <move_arc_stnb+0x232>
    28c2:	b1 c0       	rjmp	.+354    	; 0x2a26 <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    28c4:	66 e6       	ldi	r22, 0x66	; 102
    28c6:	76 e6       	ldi	r23, 0x66	; 102
    28c8:	8a ea       	ldi	r24, 0xAA	; 170
    28ca:	91 ec       	ldi	r25, 0xC1	; 193
    28cc:	a3 01       	movw	r20, r6
    28ce:	92 01       	movw	r18, r4
    28d0:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	40 e8       	ldi	r20, 0x80	; 128
    28da:	5f e3       	ldi	r21, 0x3F	; 63
    28dc:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    28e0:	7b 01       	movw	r14, r22
    28e2:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    28e4:	66 e6       	ldi	r22, 0x66	; 102
    28e6:	76 e6       	ldi	r23, 0x66	; 102
    28e8:	8a ea       	ldi	r24, 0xAA	; 170
    28ea:	91 e4       	ldi	r25, 0x41	; 65
    28ec:	a3 01       	movw	r20, r6
    28ee:	92 01       	movw	r18, r4
    28f0:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    28f4:	20 e0       	ldi	r18, 0x00	; 0
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	40 e8       	ldi	r20, 0x80	; 128
    28fa:	5f e3       	ldi	r21, 0x3F	; 63
    28fc:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    2900:	5b 01       	movw	r10, r22
    2902:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    2904:	ed b7       	in	r30, 0x3d	; 61
    2906:	fe b7       	in	r31, 0x3e	; 62
    2908:	39 97       	sbiw	r30, 0x09	; 9
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	fe bf       	out	0x3e, r31	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	ed bf       	out	0x3d, r30	; 61
    2914:	8d b6       	in	r8, 0x3d	; 61
    2916:	9e b6       	in	r9, 0x3e	; 62
    2918:	08 94       	sec
    291a:	81 1c       	adc	r8, r1
    291c:	91 1c       	adc	r9, r1
    291e:	6d 81       	ldd	r22, Y+5	; 0x05
    2920:	7e 81       	ldd	r23, Y+6	; 0x06
    2922:	8f 81       	ldd	r24, Y+7	; 0x07
    2924:	98 85       	ldd	r25, Y+8	; 0x08
    2926:	a8 01       	movw	r20, r16
    2928:	97 01       	movw	r18, r14
    292a:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    292e:	2c ed       	ldi	r18, 0xDC	; 220
    2930:	38 eb       	ldi	r19, 0xB8	; 184
    2932:	48 e0       	ldi	r20, 0x08	; 8
    2934:	5e e3       	ldi	r21, 0x3E	; 62
    2936:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    293a:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    293e:	69 8b       	std	Y+17, r22	; 0x11
    2940:	7a 8b       	std	Y+18, r23	; 0x12
    2942:	8b 8b       	std	Y+19, r24	; 0x13
    2944:	9c 8b       	std	Y+20, r25	; 0x14
    2946:	69 85       	ldd	r22, Y+9	; 0x09
    2948:	7a 85       	ldd	r23, Y+10	; 0x0a
    294a:	8b 85       	ldd	r24, Y+11	; 0x0b
    294c:	9c 85       	ldd	r25, Y+12	; 0x0c
    294e:	a8 01       	movw	r20, r16
    2950:	97 01       	movw	r18, r14
    2952:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2956:	2c ed       	ldi	r18, 0xDC	; 220
    2958:	38 eb       	ldi	r19, 0xB8	; 184
    295a:	48 e0       	ldi	r20, 0x08	; 8
    295c:	5e e3       	ldi	r21, 0x3E	; 62
    295e:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2962:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2966:	6d 8b       	std	Y+21, r22	; 0x15
    2968:	7e 8b       	std	Y+22, r23	; 0x16
    296a:	8f 8b       	std	Y+23, r24	; 0x17
    296c:	98 8f       	std	Y+24, r25	; 0x18
    296e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2970:	7e 85       	ldd	r23, Y+14	; 0x0e
    2972:	8f 85       	ldd	r24, Y+15	; 0x0f
    2974:	98 89       	ldd	r25, Y+16	; 0x10
    2976:	a8 01       	movw	r20, r16
    2978:	97 01       	movw	r18, r14
    297a:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    297e:	2c ed       	ldi	r18, 0xDC	; 220
    2980:	38 eb       	ldi	r19, 0xB8	; 184
    2982:	48 e0       	ldi	r20, 0x08	; 8
    2984:	5e e3       	ldi	r21, 0x3E	; 62
    2986:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    298a:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    298e:	2b 01       	movw	r4, r22
    2990:	3c 01       	movw	r6, r24
    2992:	6d 81       	ldd	r22, Y+5	; 0x05
    2994:	7e 81       	ldd	r23, Y+6	; 0x06
    2996:	8f 81       	ldd	r24, Y+7	; 0x07
    2998:	98 85       	ldd	r25, Y+8	; 0x08
    299a:	a6 01       	movw	r20, r12
    299c:	95 01       	movw	r18, r10
    299e:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    29a2:	2c ed       	ldi	r18, 0xDC	; 220
    29a4:	38 eb       	ldi	r19, 0xB8	; 184
    29a6:	48 e0       	ldi	r20, 0x08	; 8
    29a8:	5e e3       	ldi	r21, 0x3E	; 62
    29aa:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    29ae:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    29b2:	d4 01       	movw	r26, r8
    29b4:	6d 93       	st	X+, r22
    29b6:	7c 93       	st	X, r23
    29b8:	69 85       	ldd	r22, Y+9	; 0x09
    29ba:	7a 85       	ldd	r23, Y+10	; 0x0a
    29bc:	8b 85       	ldd	r24, Y+11	; 0x0b
    29be:	9c 85       	ldd	r25, Y+12	; 0x0c
    29c0:	a6 01       	movw	r20, r12
    29c2:	95 01       	movw	r18, r10
    29c4:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    29c8:	2c ed       	ldi	r18, 0xDC	; 220
    29ca:	38 eb       	ldi	r19, 0xB8	; 184
    29cc:	48 e0       	ldi	r20, 0x08	; 8
    29ce:	5e e3       	ldi	r21, 0x3E	; 62
    29d0:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    29d4:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    29d8:	f4 01       	movw	r30, r8
    29da:	73 83       	std	Z+3, r23	; 0x03
    29dc:	62 83       	std	Z+2, r22	; 0x02
    29de:	6d 85       	ldd	r22, Y+13	; 0x0d
    29e0:	7e 85       	ldd	r23, Y+14	; 0x0e
    29e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e4:	98 89       	ldd	r25, Y+16	; 0x10
    29e6:	a6 01       	movw	r20, r12
    29e8:	95 01       	movw	r18, r10
    29ea:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    29ee:	2c ed       	ldi	r18, 0xDC	; 220
    29f0:	38 eb       	ldi	r19, 0xB8	; 184
    29f2:	48 e0       	ldi	r20, 0x08	; 8
    29f4:	5e e3       	ldi	r21, 0x3E	; 62
    29f6:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    29fa:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    29fe:	d4 01       	movw	r26, r8
    2a00:	15 96       	adiw	r26, 0x05	; 5
    2a02:	7c 93       	st	X, r23
    2a04:	6e 93       	st	-X, r22
    2a06:	14 97       	sbiw	r26, 0x04	; 4
    2a08:	16 96       	adiw	r26, 0x06	; 6
    2a0a:	2c 92       	st	X, r2
    2a0c:	16 97       	sbiw	r26, 0x06	; 6
    2a0e:	18 96       	adiw	r26, 0x08	; 8
    2a10:	1c 92       	st	X, r1
    2a12:	1e 92       	st	-X, r1
    2a14:	17 97       	sbiw	r26, 0x07	; 7
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	62 e0       	ldi	r22, 0x02	; 2
    2a1a:	43 2d       	mov	r20, r3
    2a1c:	29 89       	ldd	r18, Y+17	; 0x11
    2a1e:	3a 89       	ldd	r19, Y+18	; 0x12
    2a20:	0d 89       	ldd	r16, Y+21	; 0x15
    2a22:	1e 89       	ldd	r17, Y+22	; 0x16
    2a24:	bd c0       	rjmp	.+378    	; 0x2ba0 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    2a26:	c3 01       	movw	r24, r6
    2a28:	b2 01       	movw	r22, r4
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	30 e0       	ldi	r19, 0x00	; 0
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	50 e0       	ldi	r21, 0x00	; 0
    2a32:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
    2a36:	87 fd       	sbrc	r24, 7
    2a38:	02 c0       	rjmp	.+4      	; 0x2a3e <move_arc_stnb+0x3ac>
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	c1 c0       	rjmp	.+386    	; 0x2bc0 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2a3e:	66 e6       	ldi	r22, 0x66	; 102
    2a40:	76 e6       	ldi	r23, 0x66	; 102
    2a42:	8a ea       	ldi	r24, 0xAA	; 170
    2a44:	91 e4       	ldi	r25, 0x41	; 65
    2a46:	a3 01       	movw	r20, r6
    2a48:	92 01       	movw	r18, r4
    2a4a:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e8       	ldi	r20, 0x80	; 128
    2a54:	5f e3       	ldi	r21, 0x3F	; 63
    2a56:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    2a5a:	7b 01       	movw	r14, r22
    2a5c:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2a5e:	66 e6       	ldi	r22, 0x66	; 102
    2a60:	76 e6       	ldi	r23, 0x66	; 102
    2a62:	8a ea       	ldi	r24, 0xAA	; 170
    2a64:	91 ec       	ldi	r25, 0xC1	; 193
    2a66:	a3 01       	movw	r20, r6
    2a68:	92 01       	movw	r18, r4
    2a6a:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2a6e:	20 e0       	ldi	r18, 0x00	; 0
    2a70:	30 e0       	ldi	r19, 0x00	; 0
    2a72:	40 e8       	ldi	r20, 0x80	; 128
    2a74:	5f e3       	ldi	r21, 0x3F	; 63
    2a76:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    2a7a:	5b 01       	movw	r10, r22
    2a7c:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    2a7e:	2d b7       	in	r18, 0x3d	; 61
    2a80:	3e b7       	in	r19, 0x3e	; 62
    2a82:	29 50       	subi	r18, 0x09	; 9
    2a84:	30 40       	sbci	r19, 0x00	; 0
    2a86:	0f b6       	in	r0, 0x3f	; 63
    2a88:	f8 94       	cli
    2a8a:	3e bf       	out	0x3e, r19	; 62
    2a8c:	0f be       	out	0x3f, r0	; 63
    2a8e:	2d bf       	out	0x3d, r18	; 61
    2a90:	8d b6       	in	r8, 0x3d	; 61
    2a92:	9e b6       	in	r9, 0x3e	; 62
    2a94:	08 94       	sec
    2a96:	81 1c       	adc	r8, r1
    2a98:	91 1c       	adc	r9, r1
    2a9a:	6d 81       	ldd	r22, Y+5	; 0x05
    2a9c:	7e 81       	ldd	r23, Y+6	; 0x06
    2a9e:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa0:	98 85       	ldd	r25, Y+8	; 0x08
    2aa2:	a8 01       	movw	r20, r16
    2aa4:	97 01       	movw	r18, r14
    2aa6:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2aaa:	2c ed       	ldi	r18, 0xDC	; 220
    2aac:	38 eb       	ldi	r19, 0xB8	; 184
    2aae:	48 e0       	ldi	r20, 0x08	; 8
    2ab0:	5e e3       	ldi	r21, 0x3E	; 62
    2ab2:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2ab6:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2aba:	69 8f       	std	Y+25, r22	; 0x19
    2abc:	7a 8f       	std	Y+26, r23	; 0x1a
    2abe:	8b 8f       	std	Y+27, r24	; 0x1b
    2ac0:	9c 8f       	std	Y+28, r25	; 0x1c
    2ac2:	69 85       	ldd	r22, Y+9	; 0x09
    2ac4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ac6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ac8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2aca:	a8 01       	movw	r20, r16
    2acc:	97 01       	movw	r18, r14
    2ace:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2ad2:	2c ed       	ldi	r18, 0xDC	; 220
    2ad4:	38 eb       	ldi	r19, 0xB8	; 184
    2ad6:	48 e0       	ldi	r20, 0x08	; 8
    2ad8:	5e e3       	ldi	r21, 0x3E	; 62
    2ada:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2ade:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2ae2:	6d 8f       	std	Y+29, r22	; 0x1d
    2ae4:	7e 8f       	std	Y+30, r23	; 0x1e
    2ae6:	8f 8f       	std	Y+31, r24	; 0x1f
    2ae8:	98 a3       	std	Y+32, r25	; 0x20
    2aea:	6d 85       	ldd	r22, Y+13	; 0x0d
    2aec:	7e 85       	ldd	r23, Y+14	; 0x0e
    2aee:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af0:	98 89       	ldd	r25, Y+16	; 0x10
    2af2:	a8 01       	movw	r20, r16
    2af4:	97 01       	movw	r18, r14
    2af6:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2afa:	2c ed       	ldi	r18, 0xDC	; 220
    2afc:	38 eb       	ldi	r19, 0xB8	; 184
    2afe:	48 e0       	ldi	r20, 0x08	; 8
    2b00:	5e e3       	ldi	r21, 0x3E	; 62
    2b02:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2b06:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2b0a:	2b 01       	movw	r4, r22
    2b0c:	3c 01       	movw	r6, r24
    2b0e:	6d 81       	ldd	r22, Y+5	; 0x05
    2b10:	7e 81       	ldd	r23, Y+6	; 0x06
    2b12:	8f 81       	ldd	r24, Y+7	; 0x07
    2b14:	98 85       	ldd	r25, Y+8	; 0x08
    2b16:	a6 01       	movw	r20, r12
    2b18:	95 01       	movw	r18, r10
    2b1a:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2b1e:	2c ed       	ldi	r18, 0xDC	; 220
    2b20:	38 eb       	ldi	r19, 0xB8	; 184
    2b22:	48 e0       	ldi	r20, 0x08	; 8
    2b24:	5e e3       	ldi	r21, 0x3E	; 62
    2b26:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2b2a:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2b2e:	d4 01       	movw	r26, r8
    2b30:	6d 93       	st	X+, r22
    2b32:	7c 93       	st	X, r23
    2b34:	69 85       	ldd	r22, Y+9	; 0x09
    2b36:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b38:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b3a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b3c:	a6 01       	movw	r20, r12
    2b3e:	95 01       	movw	r18, r10
    2b40:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2b44:	2c ed       	ldi	r18, 0xDC	; 220
    2b46:	38 eb       	ldi	r19, 0xB8	; 184
    2b48:	48 e0       	ldi	r20, 0x08	; 8
    2b4a:	5e e3       	ldi	r21, 0x3E	; 62
    2b4c:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2b50:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2b54:	f4 01       	movw	r30, r8
    2b56:	73 83       	std	Z+3, r23	; 0x03
    2b58:	62 83       	std	Z+2, r22	; 0x02
    2b5a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b5c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b60:	98 89       	ldd	r25, Y+16	; 0x10
    2b62:	a6 01       	movw	r20, r12
    2b64:	95 01       	movw	r18, r10
    2b66:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2b6a:	2c ed       	ldi	r18, 0xDC	; 220
    2b6c:	38 eb       	ldi	r19, 0xB8	; 184
    2b6e:	48 e0       	ldi	r20, 0x08	; 8
    2b70:	5e e3       	ldi	r21, 0x3E	; 62
    2b72:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2b76:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2b7a:	d4 01       	movw	r26, r8
    2b7c:	15 96       	adiw	r26, 0x05	; 5
    2b7e:	7c 93       	st	X, r23
    2b80:	6e 93       	st	-X, r22
    2b82:	14 97       	sbiw	r26, 0x04	; 4
    2b84:	16 96       	adiw	r26, 0x06	; 6
    2b86:	2c 92       	st	X, r2
    2b88:	16 97       	sbiw	r26, 0x06	; 6
    2b8a:	18 96       	adiw	r26, 0x08	; 8
    2b8c:	1c 92       	st	X, r1
    2b8e:	1e 92       	st	-X, r1
    2b90:	17 97       	sbiw	r26, 0x07	; 7
    2b92:	81 e0       	ldi	r24, 0x01	; 1
    2b94:	62 e0       	ldi	r22, 0x02	; 2
    2b96:	43 2d       	mov	r20, r3
    2b98:	29 8d       	ldd	r18, Y+25	; 0x19
    2b9a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2b9c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2b9e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2ba0:	72 01       	movw	r14, r4
    2ba2:	c2 2c       	mov	r12, r2
    2ba4:	aa 24       	eor	r10, r10
    2ba6:	bb 24       	eor	r11, r11
    2ba8:	83 2c       	mov	r8, r3
    2baa:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <STEPPER_move>
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	ed b7       	in	r30, 0x3d	; 61
    2bb2:	fe b7       	in	r31, 0x3e	; 62
    2bb4:	39 96       	adiw	r30, 0x09	; 9
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	fe bf       	out	0x3e, r31	; 62
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    2bc0:	a0 96       	adiw	r28, 0x20	; 32
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
    2bcc:	cf 91       	pop	r28
    2bce:	df 91       	pop	r29
    2bd0:	1f 91       	pop	r17
    2bd2:	0f 91       	pop	r16
    2bd4:	ff 90       	pop	r15
    2bd6:	ef 90       	pop	r14
    2bd8:	df 90       	pop	r13
    2bda:	cf 90       	pop	r12
    2bdc:	bf 90       	pop	r11
    2bde:	af 90       	pop	r10
    2be0:	9f 90       	pop	r9
    2be2:	8f 90       	pop	r8
    2be4:	7f 90       	pop	r7
    2be6:	6f 90       	pop	r6
    2be8:	5f 90       	pop	r5
    2bea:	4f 90       	pop	r4
    2bec:	3f 90       	pop	r3
    2bee:	2f 90       	pop	r2
    2bf0:	08 95       	ret

00002bf2 <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    2bf2:	2f 92       	push	r2
    2bf4:	3f 92       	push	r3
    2bf6:	4f 92       	push	r4
    2bf8:	5f 92       	push	r5
    2bfa:	6f 92       	push	r6
    2bfc:	7f 92       	push	r7
    2bfe:	8f 92       	push	r8
    2c00:	9f 92       	push	r9
    2c02:	af 92       	push	r10
    2c04:	bf 92       	push	r11
    2c06:	cf 92       	push	r12
    2c08:	df 92       	push	r13
    2c0a:	ef 92       	push	r14
    2c0c:	ff 92       	push	r15
    2c0e:	0f 93       	push	r16
    2c10:	1f 93       	push	r17
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	a0 97       	sbiw	r28, 0x20	; 32
    2c1c:	0f b6       	in	r0, 0x3f	; 63
    2c1e:	f8 94       	cli
    2c20:	de bf       	out	0x3e, r29	; 62
    2c22:	0f be       	out	0x3f, r0	; 63
    2c24:	cd bf       	out	0x3d, r28	; 61
    2c26:	2b 01       	movw	r4, r22
    2c28:	3c 01       	movw	r6, r24
    2c2a:	2d 83       	std	Y+5, r18	; 0x05
    2c2c:	3e 83       	std	Y+6, r19	; 0x06
    2c2e:	4f 83       	std	Y+7, r20	; 0x07
    2c30:	58 87       	std	Y+8, r21	; 0x08
    2c32:	e9 86       	std	Y+9, r14	; 0x09
    2c34:	fa 86       	std	Y+10, r15	; 0x0a
    2c36:	0b 87       	std	Y+11, r16	; 0x0b
    2c38:	1c 87       	std	Y+12, r17	; 0x0c
    2c3a:	ad 86       	std	Y+13, r10	; 0x0d
    2c3c:	be 86       	std	Y+14, r11	; 0x0e
    2c3e:	cf 86       	std	Y+15, r12	; 0x0f
    2c40:	d8 8a       	std	Y+16, r13	; 0x10
    2c42:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    2c44:	33 24       	eor	r3, r3
    2c46:	ca 01       	movw	r24, r20
    2c48:	b9 01       	movw	r22, r18
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	50 e0       	ldi	r21, 0x00	; 0
    2c52:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__gesf2>
    2c56:	18 16       	cp	r1, r24
    2c58:	14 f4       	brge	.+4      	; 0x2c5e <move_arc_stwt+0x6c>
    2c5a:	33 24       	eor	r3, r3
    2c5c:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    2c5e:	6d 81       	ldd	r22, Y+5	; 0x05
    2c60:	7e 81       	ldd	r23, Y+6	; 0x06
    2c62:	8f 81       	ldd	r24, Y+7	; 0x07
    2c64:	98 85       	ldd	r25, Y+8	; 0x08
    2c66:	2c ed       	ldi	r18, 0xDC	; 220
    2c68:	38 eb       	ldi	r19, 0xB8	; 184
    2c6a:	48 e0       	ldi	r20, 0x08	; 8
    2c6c:	5e e3       	ldi	r21, 0x3E	; 62
    2c6e:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2c72:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <__fixsfsi>
    2c76:	9b 01       	movw	r18, r22
    2c78:	77 ff       	sbrs	r23, 7
    2c7a:	03 c0       	rjmp	.+6      	; 0x2c82 <move_arc_stwt+0x90>
    2c7c:	30 95       	com	r19
    2c7e:	21 95       	neg	r18
    2c80:	3f 4f       	sbci	r19, 0xFF	; 255
    2c82:	b9 01       	movw	r22, r18
    2c84:	88 27       	eor	r24, r24
    2c86:	77 fd       	sbrc	r23, 7
    2c88:	80 95       	com	r24
    2c8a:	98 2f       	mov	r25, r24
    2c8c:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
    2c90:	69 83       	std	Y+1, r22	; 0x01
    2c92:	7a 83       	std	Y+2, r23	; 0x02
    2c94:	8b 83       	std	Y+3, r24	; 0x03
    2c96:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    2c98:	69 85       	ldd	r22, Y+9	; 0x09
    2c9a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c9c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c9e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ca0:	2c ed       	ldi	r18, 0xDC	; 220
    2ca2:	38 eb       	ldi	r19, 0xB8	; 184
    2ca4:	48 e0       	ldi	r20, 0x08	; 8
    2ca6:	5e e3       	ldi	r21, 0x3E	; 62
    2ca8:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2cac:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <__fixsfsi>
    2cb0:	9b 01       	movw	r18, r22
    2cb2:	77 ff       	sbrs	r23, 7
    2cb4:	03 c0       	rjmp	.+6      	; 0x2cbc <move_arc_stwt+0xca>
    2cb6:	30 95       	com	r19
    2cb8:	21 95       	neg	r18
    2cba:	3f 4f       	sbci	r19, 0xFF	; 255
    2cbc:	b9 01       	movw	r22, r18
    2cbe:	88 27       	eor	r24, r24
    2cc0:	77 fd       	sbrc	r23, 7
    2cc2:	80 95       	com	r24
    2cc4:	98 2f       	mov	r25, r24
    2cc6:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
    2cca:	4b 01       	movw	r8, r22
    2ccc:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    2cce:	6d 85       	ldd	r22, Y+13	; 0x0d
    2cd0:	7e 85       	ldd	r23, Y+14	; 0x0e
    2cd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cd4:	98 89       	ldd	r25, Y+16	; 0x10
    2cd6:	2c ed       	ldi	r18, 0xDC	; 220
    2cd8:	38 eb       	ldi	r19, 0xB8	; 184
    2cda:	48 e0       	ldi	r20, 0x08	; 8
    2cdc:	5e e3       	ldi	r21, 0x3E	; 62
    2cde:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2ce2:	0e 94 91 2d 	call	0x5b22	; 0x5b22 <__fixsfsi>
    2ce6:	9b 01       	movw	r18, r22
    2ce8:	77 ff       	sbrs	r23, 7
    2cea:	03 c0       	rjmp	.+6      	; 0x2cf2 <move_arc_stwt+0x100>
    2cec:	30 95       	com	r19
    2cee:	21 95       	neg	r18
    2cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf2:	b9 01       	movw	r22, r18
    2cf4:	88 27       	eor	r24, r24
    2cf6:	77 fd       	sbrc	r23, 7
    2cf8:	80 95       	com	r24
    2cfa:	98 2f       	mov	r25, r24
    2cfc:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <__floatsisf>
    2d00:	6b 01       	movw	r12, r22
    2d02:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    2d04:	c3 01       	movw	r24, r6
    2d06:	b2 01       	movw	r22, r4
    2d08:	20 e0       	ldi	r18, 0x00	; 0
    2d0a:	30 e0       	ldi	r19, 0x00	; 0
    2d0c:	40 e0       	ldi	r20, 0x00	; 0
    2d0e:	5f e4       	ldi	r21, 0x4F	; 79
    2d10:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
    2d14:	88 23       	and	r24, r24
    2d16:	a1 f5       	brne	.+104    	; 0x2d80 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    2d18:	69 81       	ldd	r22, Y+1	; 0x01
    2d1a:	7a 81       	ldd	r23, Y+2	; 0x02
    2d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d20:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2d24:	2b 01       	movw	r4, r22
    2d26:	3c 01       	movw	r6, r24
    2d28:	c5 01       	movw	r24, r10
    2d2a:	b4 01       	movw	r22, r8
    2d2c:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2d30:	4b 01       	movw	r8, r22
    2d32:	5c 01       	movw	r10, r24
    2d34:	c7 01       	movw	r24, r14
    2d36:	b6 01       	movw	r22, r12
    2d38:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2d3c:	6b 01       	movw	r12, r22
    2d3e:	7c 01       	movw	r14, r24
    2d40:	2d b7       	in	r18, 0x3d	; 61
    2d42:	3e b7       	in	r19, 0x3e	; 62
    2d44:	29 50       	subi	r18, 0x09	; 9
    2d46:	30 40       	sbci	r19, 0x00	; 0
    2d48:	0f b6       	in	r0, 0x3f	; 63
    2d4a:	f8 94       	cli
    2d4c:	3e bf       	out	0x3e, r19	; 62
    2d4e:	0f be       	out	0x3f, r0	; 63
    2d50:	2d bf       	out	0x3d, r18	; 61
    2d52:	ed b7       	in	r30, 0x3d	; 61
    2d54:	fe b7       	in	r31, 0x3e	; 62
    2d56:	31 96       	adiw	r30, 0x01	; 1
    2d58:	ad b7       	in	r26, 0x3d	; 61
    2d5a:	be b7       	in	r27, 0x3e	; 62
    2d5c:	12 96       	adiw	r26, 0x02	; 2
    2d5e:	5c 92       	st	X, r5
    2d60:	4e 92       	st	-X, r4
    2d62:	11 97       	sbiw	r26, 0x01	; 1
    2d64:	93 82       	std	Z+3, r9	; 0x03
    2d66:	82 82       	std	Z+2, r8	; 0x02
    2d68:	75 83       	std	Z+5, r23	; 0x05
    2d6a:	64 83       	std	Z+4, r22	; 0x04
    2d6c:	26 82       	std	Z+6, r2	; 0x06
    2d6e:	10 86       	std	Z+8, r1	; 0x08
    2d70:	17 82       	std	Z+7, r1	; 0x07
    2d72:	80 e0       	ldi	r24, 0x00	; 0
    2d74:	62 e0       	ldi	r22, 0x02	; 2
    2d76:	43 2d       	mov	r20, r3
    2d78:	92 01       	movw	r18, r4
    2d7a:	84 01       	movw	r16, r8
    2d7c:	76 01       	movw	r14, r12
    2d7e:	c1 c1       	rjmp	.+898    	; 0x3102 <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    2d80:	c3 01       	movw	r24, r6
    2d82:	b2 01       	movw	r22, r4
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	40 e0       	ldi	r20, 0x00	; 0
    2d8a:	50 e0       	ldi	r21, 0x00	; 0
    2d8c:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
    2d90:	88 23       	and	r24, r24
    2d92:	e9 f5       	brne	.+122    	; 0x2e0e <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    2d94:	69 81       	ldd	r22, Y+1	; 0x01
    2d96:	7a 81       	ldd	r23, Y+2	; 0x02
    2d98:	8b 81       	ldd	r24, Y+3	; 0x03
    2d9a:	9c 81       	ldd	r25, Y+4	; 0x04
    2d9c:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2da0:	3b 01       	movw	r6, r22
    2da2:	c5 01       	movw	r24, r10
    2da4:	b4 01       	movw	r22, r8
    2da6:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2daa:	8b 01       	movw	r16, r22
    2dac:	c7 01       	movw	r24, r14
    2dae:	b6 01       	movw	r22, r12
    2db0:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2db4:	7b 01       	movw	r14, r22
    2db6:	2d b7       	in	r18, 0x3d	; 61
    2db8:	3e b7       	in	r19, 0x3e	; 62
    2dba:	29 50       	subi	r18, 0x09	; 9
    2dbc:	30 40       	sbci	r19, 0x00	; 0
    2dbe:	0f b6       	in	r0, 0x3f	; 63
    2dc0:	f8 94       	cli
    2dc2:	3e bf       	out	0x3e, r19	; 62
    2dc4:	0f be       	out	0x3f, r0	; 63
    2dc6:	2d bf       	out	0x3d, r18	; 61
    2dc8:	ed b7       	in	r30, 0x3d	; 61
    2dca:	fe b7       	in	r31, 0x3e	; 62
    2dcc:	31 96       	adiw	r30, 0x01	; 1
    2dce:	40 e0       	ldi	r20, 0x00	; 0
    2dd0:	33 20       	and	r3, r3
    2dd2:	09 f4       	brne	.+2      	; 0x2dd6 <move_arc_stwt+0x1e4>
    2dd4:	41 e0       	ldi	r20, 0x01	; 1
    2dd6:	71 82       	std	Z+1, r7	; 0x01
    2dd8:	60 82       	st	Z, r6
    2dda:	13 83       	std	Z+3, r17	; 0x03
    2ddc:	02 83       	std	Z+2, r16	; 0x02
    2dde:	f5 82       	std	Z+5, r15	; 0x05
    2de0:	e4 82       	std	Z+4, r14	; 0x04
    2de2:	26 82       	std	Z+6, r2	; 0x06
    2de4:	10 86       	std	Z+8, r1	; 0x08
    2de6:	17 82       	std	Z+7, r1	; 0x07
    2de8:	80 e0       	ldi	r24, 0x00	; 0
    2dea:	62 e0       	ldi	r22, 0x02	; 2
    2dec:	93 01       	movw	r18, r6
    2dee:	c2 2c       	mov	r12, r2
    2df0:	aa 24       	eor	r10, r10
    2df2:	bb 24       	eor	r11, r11
    2df4:	83 2c       	mov	r8, r3
    2df6:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <STEPPER_move>
    2dfa:	81 e0       	ldi	r24, 0x01	; 1
    2dfc:	ad b7       	in	r26, 0x3d	; 61
    2dfe:	be b7       	in	r27, 0x3e	; 62
    2e00:	19 96       	adiw	r26, 0x09	; 9
    2e02:	0f b6       	in	r0, 0x3f	; 63
    2e04:	f8 94       	cli
    2e06:	be bf       	out	0x3e, r27	; 62
    2e08:	0f be       	out	0x3f, r0	; 63
    2e0a:	ad bf       	out	0x3d, r26	; 61
    2e0c:	89 c1       	rjmp	.+786    	; 0x3120 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    2e0e:	c3 01       	movw	r24, r6
    2e10:	b2 01       	movw	r22, r4
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e0       	ldi	r20, 0x00	; 0
    2e18:	50 e0       	ldi	r21, 0x00	; 0
    2e1a:	0e 94 74 2e 	call	0x5ce8	; 0x5ce8 <__gesf2>
    2e1e:	18 16       	cp	r1, r24
    2e20:	0c f0       	brlt	.+2      	; 0x2e24 <move_arc_stwt+0x232>
    2e22:	b1 c0       	rjmp	.+354    	; 0x2f86 <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2e24:	66 e6       	ldi	r22, 0x66	; 102
    2e26:	76 e6       	ldi	r23, 0x66	; 102
    2e28:	8a ea       	ldi	r24, 0xAA	; 170
    2e2a:	91 ec       	ldi	r25, 0xC1	; 193
    2e2c:	a3 01       	movw	r20, r6
    2e2e:	92 01       	movw	r18, r4
    2e30:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	40 e8       	ldi	r20, 0x80	; 128
    2e3a:	5f e3       	ldi	r21, 0x3F	; 63
    2e3c:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    2e40:	7b 01       	movw	r14, r22
    2e42:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2e44:	66 e6       	ldi	r22, 0x66	; 102
    2e46:	76 e6       	ldi	r23, 0x66	; 102
    2e48:	8a ea       	ldi	r24, 0xAA	; 170
    2e4a:	91 e4       	ldi	r25, 0x41	; 65
    2e4c:	a3 01       	movw	r20, r6
    2e4e:	92 01       	movw	r18, r4
    2e50:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e8       	ldi	r20, 0x80	; 128
    2e5a:	5f e3       	ldi	r21, 0x3F	; 63
    2e5c:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    2e60:	5b 01       	movw	r10, r22
    2e62:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2e64:	ed b7       	in	r30, 0x3d	; 61
    2e66:	fe b7       	in	r31, 0x3e	; 62
    2e68:	39 97       	sbiw	r30, 0x09	; 9
    2e6a:	0f b6       	in	r0, 0x3f	; 63
    2e6c:	f8 94       	cli
    2e6e:	fe bf       	out	0x3e, r31	; 62
    2e70:	0f be       	out	0x3f, r0	; 63
    2e72:	ed bf       	out	0x3d, r30	; 61
    2e74:	8d b6       	in	r8, 0x3d	; 61
    2e76:	9e b6       	in	r9, 0x3e	; 62
    2e78:	08 94       	sec
    2e7a:	81 1c       	adc	r8, r1
    2e7c:	91 1c       	adc	r9, r1
    2e7e:	6d 81       	ldd	r22, Y+5	; 0x05
    2e80:	7e 81       	ldd	r23, Y+6	; 0x06
    2e82:	8f 81       	ldd	r24, Y+7	; 0x07
    2e84:	98 85       	ldd	r25, Y+8	; 0x08
    2e86:	a8 01       	movw	r20, r16
    2e88:	97 01       	movw	r18, r14
    2e8a:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2e8e:	2c ed       	ldi	r18, 0xDC	; 220
    2e90:	38 eb       	ldi	r19, 0xB8	; 184
    2e92:	48 e0       	ldi	r20, 0x08	; 8
    2e94:	5e e3       	ldi	r21, 0x3E	; 62
    2e96:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2e9a:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2e9e:	69 8b       	std	Y+17, r22	; 0x11
    2ea0:	7a 8b       	std	Y+18, r23	; 0x12
    2ea2:	8b 8b       	std	Y+19, r24	; 0x13
    2ea4:	9c 8b       	std	Y+20, r25	; 0x14
    2ea6:	69 85       	ldd	r22, Y+9	; 0x09
    2ea8:	7a 85       	ldd	r23, Y+10	; 0x0a
    2eaa:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eac:	9c 85       	ldd	r25, Y+12	; 0x0c
    2eae:	a8 01       	movw	r20, r16
    2eb0:	97 01       	movw	r18, r14
    2eb2:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2eb6:	2c ed       	ldi	r18, 0xDC	; 220
    2eb8:	38 eb       	ldi	r19, 0xB8	; 184
    2eba:	48 e0       	ldi	r20, 0x08	; 8
    2ebc:	5e e3       	ldi	r21, 0x3E	; 62
    2ebe:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2ec2:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2ec6:	6d 8b       	std	Y+21, r22	; 0x15
    2ec8:	7e 8b       	std	Y+22, r23	; 0x16
    2eca:	8f 8b       	std	Y+23, r24	; 0x17
    2ecc:	98 8f       	std	Y+24, r25	; 0x18
    2ece:	6d 85       	ldd	r22, Y+13	; 0x0d
    2ed0:	7e 85       	ldd	r23, Y+14	; 0x0e
    2ed2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ed4:	98 89       	ldd	r25, Y+16	; 0x10
    2ed6:	a8 01       	movw	r20, r16
    2ed8:	97 01       	movw	r18, r14
    2eda:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2ede:	2c ed       	ldi	r18, 0xDC	; 220
    2ee0:	38 eb       	ldi	r19, 0xB8	; 184
    2ee2:	48 e0       	ldi	r20, 0x08	; 8
    2ee4:	5e e3       	ldi	r21, 0x3E	; 62
    2ee6:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2eea:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2eee:	2b 01       	movw	r4, r22
    2ef0:	3c 01       	movw	r6, r24
    2ef2:	6d 81       	ldd	r22, Y+5	; 0x05
    2ef4:	7e 81       	ldd	r23, Y+6	; 0x06
    2ef6:	8f 81       	ldd	r24, Y+7	; 0x07
    2ef8:	98 85       	ldd	r25, Y+8	; 0x08
    2efa:	a6 01       	movw	r20, r12
    2efc:	95 01       	movw	r18, r10
    2efe:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2f02:	2c ed       	ldi	r18, 0xDC	; 220
    2f04:	38 eb       	ldi	r19, 0xB8	; 184
    2f06:	48 e0       	ldi	r20, 0x08	; 8
    2f08:	5e e3       	ldi	r21, 0x3E	; 62
    2f0a:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2f0e:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2f12:	d4 01       	movw	r26, r8
    2f14:	6d 93       	st	X+, r22
    2f16:	7c 93       	st	X, r23
    2f18:	69 85       	ldd	r22, Y+9	; 0x09
    2f1a:	7a 85       	ldd	r23, Y+10	; 0x0a
    2f1c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2f1e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2f20:	a6 01       	movw	r20, r12
    2f22:	95 01       	movw	r18, r10
    2f24:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2f28:	2c ed       	ldi	r18, 0xDC	; 220
    2f2a:	38 eb       	ldi	r19, 0xB8	; 184
    2f2c:	48 e0       	ldi	r20, 0x08	; 8
    2f2e:	5e e3       	ldi	r21, 0x3E	; 62
    2f30:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2f34:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2f38:	f4 01       	movw	r30, r8
    2f3a:	73 83       	std	Z+3, r23	; 0x03
    2f3c:	62 83       	std	Z+2, r22	; 0x02
    2f3e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2f40:	7e 85       	ldd	r23, Y+14	; 0x0e
    2f42:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f44:	98 89       	ldd	r25, Y+16	; 0x10
    2f46:	a6 01       	movw	r20, r12
    2f48:	95 01       	movw	r18, r10
    2f4a:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    2f4e:	2c ed       	ldi	r18, 0xDC	; 220
    2f50:	38 eb       	ldi	r19, 0xB8	; 184
    2f52:	48 e0       	ldi	r20, 0x08	; 8
    2f54:	5e e3       	ldi	r21, 0x3E	; 62
    2f56:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2f5a:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    2f5e:	d4 01       	movw	r26, r8
    2f60:	15 96       	adiw	r26, 0x05	; 5
    2f62:	7c 93       	st	X, r23
    2f64:	6e 93       	st	-X, r22
    2f66:	14 97       	sbiw	r26, 0x04	; 4
    2f68:	16 96       	adiw	r26, 0x06	; 6
    2f6a:	2c 92       	st	X, r2
    2f6c:	16 97       	sbiw	r26, 0x06	; 6
    2f6e:	18 96       	adiw	r26, 0x08	; 8
    2f70:	1c 92       	st	X, r1
    2f72:	1e 92       	st	-X, r1
    2f74:	17 97       	sbiw	r26, 0x07	; 7
    2f76:	80 e0       	ldi	r24, 0x00	; 0
    2f78:	62 e0       	ldi	r22, 0x02	; 2
    2f7a:	43 2d       	mov	r20, r3
    2f7c:	29 89       	ldd	r18, Y+17	; 0x11
    2f7e:	3a 89       	ldd	r19, Y+18	; 0x12
    2f80:	0d 89       	ldd	r16, Y+21	; 0x15
    2f82:	1e 89       	ldd	r17, Y+22	; 0x16
    2f84:	bd c0       	rjmp	.+378    	; 0x3100 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    2f86:	c3 01       	movw	r24, r6
    2f88:	b2 01       	movw	r22, r4
    2f8a:	20 e0       	ldi	r18, 0x00	; 0
    2f8c:	30 e0       	ldi	r19, 0x00	; 0
    2f8e:	40 e0       	ldi	r20, 0x00	; 0
    2f90:	50 e0       	ldi	r21, 0x00	; 0
    2f92:	0e 94 25 2d 	call	0x5a4a	; 0x5a4a <__cmpsf2>
    2f96:	87 fd       	sbrc	r24, 7
    2f98:	02 c0       	rjmp	.+4      	; 0x2f9e <move_arc_stwt+0x3ac>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	c1 c0       	rjmp	.+386    	; 0x3120 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2f9e:	66 e6       	ldi	r22, 0x66	; 102
    2fa0:	76 e6       	ldi	r23, 0x66	; 102
    2fa2:	8a ea       	ldi	r24, 0xAA	; 170
    2fa4:	91 e4       	ldi	r25, 0x41	; 65
    2fa6:	a3 01       	movw	r20, r6
    2fa8:	92 01       	movw	r18, r4
    2faa:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2fae:	20 e0       	ldi	r18, 0x00	; 0
    2fb0:	30 e0       	ldi	r19, 0x00	; 0
    2fb2:	40 e8       	ldi	r20, 0x80	; 128
    2fb4:	5f e3       	ldi	r21, 0x3F	; 63
    2fb6:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    2fba:	7b 01       	movw	r14, r22
    2fbc:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2fbe:	66 e6       	ldi	r22, 0x66	; 102
    2fc0:	76 e6       	ldi	r23, 0x66	; 102
    2fc2:	8a ea       	ldi	r24, 0xAA	; 170
    2fc4:	91 ec       	ldi	r25, 0xC1	; 193
    2fc6:	a3 01       	movw	r20, r6
    2fc8:	92 01       	movw	r18, r4
    2fca:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e8       	ldi	r20, 0x80	; 128
    2fd4:	5f e3       	ldi	r21, 0x3F	; 63
    2fd6:	0e 94 c1 2c 	call	0x5982	; 0x5982 <__addsf3>
    2fda:	5b 01       	movw	r10, r22
    2fdc:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2fde:	2d b7       	in	r18, 0x3d	; 61
    2fe0:	3e b7       	in	r19, 0x3e	; 62
    2fe2:	29 50       	subi	r18, 0x09	; 9
    2fe4:	30 40       	sbci	r19, 0x00	; 0
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	3e bf       	out	0x3e, r19	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	2d bf       	out	0x3d, r18	; 61
    2ff0:	8d b6       	in	r8, 0x3d	; 61
    2ff2:	9e b6       	in	r9, 0x3e	; 62
    2ff4:	08 94       	sec
    2ff6:	81 1c       	adc	r8, r1
    2ff8:	91 1c       	adc	r9, r1
    2ffa:	6d 81       	ldd	r22, Y+5	; 0x05
    2ffc:	7e 81       	ldd	r23, Y+6	; 0x06
    2ffe:	8f 81       	ldd	r24, Y+7	; 0x07
    3000:	98 85       	ldd	r25, Y+8	; 0x08
    3002:	a8 01       	movw	r20, r16
    3004:	97 01       	movw	r18, r14
    3006:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    300a:	2c ed       	ldi	r18, 0xDC	; 220
    300c:	38 eb       	ldi	r19, 0xB8	; 184
    300e:	48 e0       	ldi	r20, 0x08	; 8
    3010:	5e e3       	ldi	r21, 0x3E	; 62
    3012:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    3016:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    301a:	69 8f       	std	Y+25, r22	; 0x19
    301c:	7a 8f       	std	Y+26, r23	; 0x1a
    301e:	8b 8f       	std	Y+27, r24	; 0x1b
    3020:	9c 8f       	std	Y+28, r25	; 0x1c
    3022:	69 85       	ldd	r22, Y+9	; 0x09
    3024:	7a 85       	ldd	r23, Y+10	; 0x0a
    3026:	8b 85       	ldd	r24, Y+11	; 0x0b
    3028:	9c 85       	ldd	r25, Y+12	; 0x0c
    302a:	a8 01       	movw	r20, r16
    302c:	97 01       	movw	r18, r14
    302e:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    3032:	2c ed       	ldi	r18, 0xDC	; 220
    3034:	38 eb       	ldi	r19, 0xB8	; 184
    3036:	48 e0       	ldi	r20, 0x08	; 8
    3038:	5e e3       	ldi	r21, 0x3E	; 62
    303a:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    303e:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    3042:	6d 8f       	std	Y+29, r22	; 0x1d
    3044:	7e 8f       	std	Y+30, r23	; 0x1e
    3046:	8f 8f       	std	Y+31, r24	; 0x1f
    3048:	98 a3       	std	Y+32, r25	; 0x20
    304a:	6d 85       	ldd	r22, Y+13	; 0x0d
    304c:	7e 85       	ldd	r23, Y+14	; 0x0e
    304e:	8f 85       	ldd	r24, Y+15	; 0x0f
    3050:	98 89       	ldd	r25, Y+16	; 0x10
    3052:	a8 01       	movw	r20, r16
    3054:	97 01       	movw	r18, r14
    3056:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    305a:	2c ed       	ldi	r18, 0xDC	; 220
    305c:	38 eb       	ldi	r19, 0xB8	; 184
    305e:	48 e0       	ldi	r20, 0x08	; 8
    3060:	5e e3       	ldi	r21, 0x3E	; 62
    3062:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    3066:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    306a:	2b 01       	movw	r4, r22
    306c:	3c 01       	movw	r6, r24
    306e:	6d 81       	ldd	r22, Y+5	; 0x05
    3070:	7e 81       	ldd	r23, Y+6	; 0x06
    3072:	8f 81       	ldd	r24, Y+7	; 0x07
    3074:	98 85       	ldd	r25, Y+8	; 0x08
    3076:	a6 01       	movw	r20, r12
    3078:	95 01       	movw	r18, r10
    307a:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    307e:	2c ed       	ldi	r18, 0xDC	; 220
    3080:	38 eb       	ldi	r19, 0xB8	; 184
    3082:	48 e0       	ldi	r20, 0x08	; 8
    3084:	5e e3       	ldi	r21, 0x3E	; 62
    3086:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    308a:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    308e:	d4 01       	movw	r26, r8
    3090:	6d 93       	st	X+, r22
    3092:	7c 93       	st	X, r23
    3094:	69 85       	ldd	r22, Y+9	; 0x09
    3096:	7a 85       	ldd	r23, Y+10	; 0x0a
    3098:	8b 85       	ldd	r24, Y+11	; 0x0b
    309a:	9c 85       	ldd	r25, Y+12	; 0x0c
    309c:	a6 01       	movw	r20, r12
    309e:	95 01       	movw	r18, r10
    30a0:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    30a4:	2c ed       	ldi	r18, 0xDC	; 220
    30a6:	38 eb       	ldi	r19, 0xB8	; 184
    30a8:	48 e0       	ldi	r20, 0x08	; 8
    30aa:	5e e3       	ldi	r21, 0x3E	; 62
    30ac:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    30b0:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    30b4:	f4 01       	movw	r30, r8
    30b6:	73 83       	std	Z+3, r23	; 0x03
    30b8:	62 83       	std	Z+2, r22	; 0x02
    30ba:	6d 85       	ldd	r22, Y+13	; 0x0d
    30bc:	7e 85       	ldd	r23, Y+14	; 0x0e
    30be:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c0:	98 89       	ldd	r25, Y+16	; 0x10
    30c2:	a6 01       	movw	r20, r12
    30c4:	95 01       	movw	r18, r10
    30c6:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    30ca:	2c ed       	ldi	r18, 0xDC	; 220
    30cc:	38 eb       	ldi	r19, 0xB8	; 184
    30ce:	48 e0       	ldi	r20, 0x08	; 8
    30d0:	5e e3       	ldi	r21, 0x3E	; 62
    30d2:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    30d6:	0e 94 96 2d 	call	0x5b2c	; 0x5b2c <__fixunssfsi>
    30da:	d4 01       	movw	r26, r8
    30dc:	15 96       	adiw	r26, 0x05	; 5
    30de:	7c 93       	st	X, r23
    30e0:	6e 93       	st	-X, r22
    30e2:	14 97       	sbiw	r26, 0x04	; 4
    30e4:	16 96       	adiw	r26, 0x06	; 6
    30e6:	2c 92       	st	X, r2
    30e8:	16 97       	sbiw	r26, 0x06	; 6
    30ea:	18 96       	adiw	r26, 0x08	; 8
    30ec:	1c 92       	st	X, r1
    30ee:	1e 92       	st	-X, r1
    30f0:	17 97       	sbiw	r26, 0x07	; 7
    30f2:	80 e0       	ldi	r24, 0x00	; 0
    30f4:	62 e0       	ldi	r22, 0x02	; 2
    30f6:	43 2d       	mov	r20, r3
    30f8:	29 8d       	ldd	r18, Y+25	; 0x19
    30fa:	3a 8d       	ldd	r19, Y+26	; 0x1a
    30fc:	0d 8d       	ldd	r16, Y+29	; 0x1d
    30fe:	1e 8d       	ldd	r17, Y+30	; 0x1e
    3100:	72 01       	movw	r14, r4
    3102:	c2 2c       	mov	r12, r2
    3104:	aa 24       	eor	r10, r10
    3106:	bb 24       	eor	r11, r11
    3108:	83 2c       	mov	r8, r3
    310a:	0e 94 ea 1c 	call	0x39d4	; 0x39d4 <STEPPER_move>
    310e:	81 e0       	ldi	r24, 0x01	; 1
    3110:	ed b7       	in	r30, 0x3d	; 61
    3112:	fe b7       	in	r31, 0x3e	; 62
    3114:	39 96       	adiw	r30, 0x09	; 9
    3116:	0f b6       	in	r0, 0x3f	; 63
    3118:	f8 94       	cli
    311a:	fe bf       	out	0x3e, r31	; 62
    311c:	0f be       	out	0x3f, r0	; 63
    311e:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    3120:	a0 96       	adiw	r28, 0x20	; 32
    3122:	0f b6       	in	r0, 0x3f	; 63
    3124:	f8 94       	cli
    3126:	de bf       	out	0x3e, r29	; 62
    3128:	0f be       	out	0x3f, r0	; 63
    312a:	cd bf       	out	0x3d, r28	; 61
    312c:	cf 91       	pop	r28
    312e:	df 91       	pop	r29
    3130:	1f 91       	pop	r17
    3132:	0f 91       	pop	r16
    3134:	ff 90       	pop	r15
    3136:	ef 90       	pop	r14
    3138:	df 90       	pop	r13
    313a:	cf 90       	pop	r12
    313c:	bf 90       	pop	r11
    313e:	af 90       	pop	r10
    3140:	9f 90       	pop	r9
    3142:	8f 90       	pop	r8
    3144:	7f 90       	pop	r7
    3146:	6f 90       	pop	r6
    3148:	5f 90       	pop	r5
    314a:	4f 90       	pop	r4
    314c:	3f 90       	pop	r3
    314e:	2f 90       	pop	r2
    3150:	08 95       	ret

00003152 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    3152:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    3156:	28 2f       	mov	r18, r24
    3158:	21 70       	andi	r18, 0x01	; 1
    315a:	20 93 ea 06 	sts	0x06EA, r18
	leftContact =  (0b00000010 & sensors)>>1;
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	82 70       	andi	r24, 0x02	; 2
    3162:	90 70       	andi	r25, 0x00	; 0
    3164:	95 95       	asr	r25
    3166:	87 95       	ror	r24
    3168:	80 93 eb 06 	sts	0x06EB, r24
}
    316c:	08 95       	ret

0000316e <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    316e:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    3172:	60 93 d2 05 	sts	0x05D2, r22
    3176:	70 93 d3 05 	sts	0x05D3, r23
    317a:	80 93 d4 05 	sts	0x05D4, r24
    317e:	90 93 d5 05 	sts	0x05D5, r25
	leftLightVolt = getLeftLight();
    3182:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    3186:	60 93 79 07 	sts	0x0779, r22
    318a:	70 93 7a 07 	sts	0x077A, r23
    318e:	80 93 7b 07 	sts	0x077B, r24
    3192:	90 93 7c 07 	sts	0x077C, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    3196:	08 95       	ret

00003198 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    3198:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    319c:	60 93 3e 05 	sts	0x053E, r22
    31a0:	70 93 3f 05 	sts	0x053F, r23
    31a4:	80 93 40 05 	sts	0x0540, r24
    31a8:	90 93 41 05 	sts	0x0541, r25
	bkIR = getBackIR();
    31ac:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    31b0:	60 93 48 05 	sts	0x0548, r22
    31b4:	70 93 49 05 	sts	0x0549, r23
    31b8:	80 93 4a 05 	sts	0x054A, r24
    31bc:	90 93 4b 05 	sts	0x054B, r25
	ltIR = getLeftIR();
    31c0:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    31c4:	60 93 ec 06 	sts	0x06EC, r22
    31c8:	70 93 ed 06 	sts	0x06ED, r23
    31cc:	80 93 ee 06 	sts	0x06EE, r24
    31d0:	90 93 ef 06 	sts	0x06EF, r25
	rtIR = getRightIR();
    31d4:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    31d8:	60 93 f1 06 	sts	0x06F1, r22
    31dc:	70 93 f2 06 	sts	0x06F2, r23
    31e0:	80 93 f3 06 	sts	0x06F3, r24
    31e4:	90 93 f4 06 	sts	0x06F4, r25
}
    31e8:	08 95       	ret

000031ea <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    31ea:	cf 92       	push	r12
    31ec:	df 92       	push	r13
    31ee:	ef 92       	push	r14
    31f0:	ff 92       	push	r15
    31f2:	0f 93       	push	r16
    31f4:	1f 93       	push	r17
    31f6:	cf 93       	push	r28
    31f8:	df 93       	push	r29
    31fa:	16 2f       	mov	r17, r22
    31fc:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    31fe:	5f e1       	ldi	r21, 0x1F	; 31
    3200:	f5 2e       	mov	r15, r21
    3202:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    3204:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    3206:	0f 2d       	mov	r16, r15
    3208:	06 95       	lsr	r16
    320a:	06 95       	lsr	r16
    320c:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    320e:	c0 2f       	mov	r28, r16
    3210:	d0 e0       	ldi	r29, 0x00	; 0
    3212:	c1 2e       	mov	r12, r17
    3214:	dd 24       	eor	r13, r13
    3216:	ce 01       	movw	r24, r28
    3218:	b6 01       	movw	r22, r12
    321a:	0e 94 cf 1a 	call	0x359e	; 0x359e <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    321e:	80 2f       	mov	r24, r16
    3220:	61 2f       	mov	r22, r17
    3222:	0e 94 c8 1a 	call	0x3590	; 0x3590 <LCD_set_next_PGC>
    3226:	fe 01       	movw	r30, r28
    3228:	45 e0       	ldi	r20, 0x05	; 5
    322a:	ee 0f       	add	r30, r30
    322c:	ff 1f       	adc	r31, r31
    322e:	4a 95       	dec	r20
    3230:	e1 f7       	brne	.-8      	; 0x322a <LCD_set_pixel+0x40>
    3232:	2f 2d       	mov	r18, r15
    3234:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    3236:	ee 20       	and	r14, r14
    3238:	89 f0       	breq	.+34     	; 0x325c <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    323a:	ec 0d       	add	r30, r12
    323c:	fd 1d       	adc	r31, r13
    323e:	ec 59       	subi	r30, 0x9C	; 156
    3240:	f9 4f       	sbci	r31, 0xF9	; 249
    3242:	27 70       	andi	r18, 0x07	; 7
    3244:	30 70       	andi	r19, 0x00	; 0
    3246:	81 e0       	ldi	r24, 0x01	; 1
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <LCD_set_pixel+0x66>
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	2a 95       	dec	r18
    3252:	e2 f7       	brpl	.-8      	; 0x324c <LCD_set_pixel+0x62>
    3254:	20 81       	ld	r18, Z
    3256:	28 2b       	or	r18, r24
    3258:	20 83       	st	Z, r18
    325a:	11 c0       	rjmp	.+34     	; 0x327e <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    325c:	ec 0d       	add	r30, r12
    325e:	fd 1d       	adc	r31, r13
    3260:	ec 59       	subi	r30, 0x9C	; 156
    3262:	f9 4f       	sbci	r31, 0xF9	; 249
    3264:	27 70       	andi	r18, 0x07	; 7
    3266:	30 70       	andi	r19, 0x00	; 0
    3268:	81 e0       	ldi	r24, 0x01	; 1
    326a:	90 e0       	ldi	r25, 0x00	; 0
    326c:	02 c0       	rjmp	.+4      	; 0x3272 <LCD_set_pixel+0x88>
    326e:	88 0f       	add	r24, r24
    3270:	99 1f       	adc	r25, r25
    3272:	2a 95       	dec	r18
    3274:	e2 f7       	brpl	.-8      	; 0x326e <LCD_set_pixel+0x84>
    3276:	80 95       	com	r24
    3278:	20 81       	ld	r18, Z
    327a:	82 23       	and	r24, r18
    327c:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    327e:	35 e0       	ldi	r19, 0x05	; 5
    3280:	cc 0f       	add	r28, r28
    3282:	dd 1f       	adc	r29, r29
    3284:	3a 95       	dec	r19
    3286:	e1 f7       	brne	.-8      	; 0x3280 <LCD_set_pixel+0x96>
    3288:	cc 0d       	add	r28, r12
    328a:	dd 1d       	adc	r29, r13
    328c:	cc 59       	subi	r28, 0x9C	; 156
    328e:	d9 4f       	sbci	r29, 0xF9	; 249
    3290:	88 81       	ld	r24, Y
    3292:	61 e0       	ldi	r22, 0x01	; 1
    3294:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
}
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	ff 90       	pop	r15
    32a2:	ef 90       	pop	r14
    32a4:	df 90       	pop	r13
    32a6:	cf 90       	pop	r12
    32a8:	08 95       	ret

000032aa <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    32aa:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <ATTINY_open>
    32ae:	90 93 c2 04 	sts	0x04C2, r25
    32b2:	80 93 c1 04 	sts	0x04C1, r24
	LEopstat = LED_open(); //open the LED module
    32b6:	0e 94 0f 1b 	call	0x361e	; 0x361e <LED_open>
    32ba:	90 93 c0 04 	sts	0x04C0, r25
    32be:	80 93 bf 04 	sts	0x04BF, r24
	LCopstat = LCD_open(); //open the LCD module
    32c2:	0e 94 26 1a 	call	0x344c	; 0x344c <LCD_open>
    32c6:	90 93 be 04 	sts	0x04BE, r25
    32ca:	80 93 bd 04 	sts	0x04BD, r24
	STEPPER_open(); // Open STEPPER module for use
    32ce:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    32d2:	82 e0       	ldi	r24, 0x02	; 2
    32d4:	0e 94 15 1c 	call	0x382a	; 0x382a <SPKR_open>
	
	LED_open();
    32d8:	0e 94 0f 1b 	call	0x361e	; 0x361e <LED_open>
	I2C_open();
    32dc:	0e 94 d4 21 	call	0x43a8	; 0x43a8 <I2C_open>
	ADC_open();//open the ADC module
    32e0:	0e 94 93 19 	call	0x3326	; 0x3326 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    32e4:	81 e0       	ldi	r24, 0x01	; 1
    32e6:	0e 94 f5 19 	call	0x33ea	; 0x33ea <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    32ea:	0e 94 cc 18 	call	0x3198	; 0x3198 <checkIR>
	prefilter(1);
    32ee:	81 e0       	ldi	r24, 0x01	; 1
    32f0:	0e 94 3e 11 	call	0x227c	; 0x227c <prefilter>
    32f4:	20 e0       	ldi	r18, 0x00	; 0
    32f6:	30 e0       	ldi	r19, 0x00	; 0
    32f8:	0a c0       	rjmp	.+20     	; 0x330e <initializeRobot+0x64>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    32fa:	11 92       	st	Z+, r1
	checkIR();
	prefilter(1);
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    32fc:	01 96       	adiw	r24, 0x01	; 1
    32fe:	80 32       	cpi	r24, 0x20	; 32
    3300:	91 05       	cpc	r25, r1
    3302:	d9 f7       	brne	.-10     	; 0x32fa <initializeRobot+0x50>
	// Initialize IR Values and Reset Prefilter
	checkIR();
	prefilter(1);
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    3304:	2f 5f       	subi	r18, 0xFF	; 255
    3306:	3f 4f       	sbci	r19, 0xFF	; 255
    3308:	24 30       	cpi	r18, 0x04	; 4
    330a:	31 05       	cpc	r19, r1
    330c:	59 f0       	breq	.+22     	; 0x3324 <initializeRobot+0x7a>
    330e:	f9 01       	movw	r30, r18
    3310:	65 e0       	ldi	r22, 0x05	; 5
    3312:	ee 0f       	add	r30, r30
    3314:	ff 1f       	adc	r31, r31
    3316:	6a 95       	dec	r22
    3318:	e1 f7       	brne	.-8      	; 0x3312 <initializeRobot+0x68>
    331a:	ec 59       	subi	r30, 0x9C	; 156
    331c:	f9 4f       	sbci	r31, 0xF9	; 249
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	eb cf       	rjmp	.-42     	; 0x32fa <initializeRobot+0x50>
    3324:	08 95       	ret

00003326 <ADC_open>:
    3326:	8f e0       	ldi	r24, 0x0F	; 15
    3328:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    332c:	88 23       	and	r24, r24
    332e:	31 f4       	brne	.+12     	; 0x333c <ADC_open+0x16>
    3330:	0e 94 fb 21 	call	0x43f6	; 0x43f6 <__ADC_init>
    3334:	8f e0       	ldi	r24, 0x0F	; 15
    3336:	61 e0       	ldi	r22, 0x01	; 1
    3338:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    333c:	8f e0       	ldi	r24, 0x0F	; 15
    333e:	91 e0       	ldi	r25, 0x01	; 1
    3340:	08 95       	ret

00003342 <ADC_sample>:
    3342:	8f e0       	ldi	r24, 0x0F	; 15
    3344:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    3348:	81 30       	cpi	r24, 0x01	; 1
    334a:	19 f0       	breq	.+6      	; 0x3352 <ADC_sample+0x10>
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	13 c0       	rjmp	.+38     	; 0x3378 <ADC_sample+0x36>
    3352:	80 91 7a 00 	lds	r24, 0x007A
    3356:	80 64       	ori	r24, 0x40	; 64
    3358:	80 93 7a 00 	sts	0x007A, r24
    335c:	80 91 7a 00 	lds	r24, 0x007A
    3360:	86 fd       	sbrc	r24, 6
    3362:	fc cf       	rjmp	.-8      	; 0x335c <ADC_sample+0x1a>
    3364:	30 91 78 00 	lds	r19, 0x0078
    3368:	20 91 79 00 	lds	r18, 0x0079
    336c:	92 2f       	mov	r25, r18
    336e:	80 e0       	ldi	r24, 0x00	; 0
    3370:	23 2f       	mov	r18, r19
    3372:	30 e0       	ldi	r19, 0x00	; 0
    3374:	28 2b       	or	r18, r24
    3376:	39 2b       	or	r19, r25
    3378:	c9 01       	movw	r24, r18
    337a:	08 95       	ret

0000337c <ADC_set_channel>:
    337c:	58 2f       	mov	r21, r24
    337e:	80 91 e6 03 	lds	r24, 0x03E6
    3382:	88 30       	cpi	r24, 0x08	; 8
    3384:	d8 f4       	brcc	.+54     	; 0x33bc <ADC_set_channel+0x40>
    3386:	40 91 7e 00 	lds	r20, 0x007E
    338a:	21 e0       	ldi	r18, 0x01	; 1
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	b9 01       	movw	r22, r18
    3390:	02 c0       	rjmp	.+4      	; 0x3396 <ADC_set_channel+0x1a>
    3392:	66 0f       	add	r22, r22
    3394:	77 1f       	adc	r23, r23
    3396:	8a 95       	dec	r24
    3398:	e2 f7       	brpl	.-8      	; 0x3392 <ADC_set_channel+0x16>
    339a:	cb 01       	movw	r24, r22
    339c:	80 95       	com	r24
    339e:	84 23       	and	r24, r20
    33a0:	80 93 7e 00 	sts	0x007E, r24
    33a4:	80 91 7e 00 	lds	r24, 0x007E
    33a8:	05 2e       	mov	r0, r21
    33aa:	02 c0       	rjmp	.+4      	; 0x33b0 <ADC_set_channel+0x34>
    33ac:	22 0f       	add	r18, r18
    33ae:	33 1f       	adc	r19, r19
    33b0:	0a 94       	dec	r0
    33b2:	e2 f7       	brpl	.-8      	; 0x33ac <ADC_set_channel+0x30>
    33b4:	82 2b       	or	r24, r18
    33b6:	80 93 7e 00 	sts	0x007E, r24
    33ba:	0d c0       	rjmp	.+26     	; 0x33d6 <ADC_set_channel+0x5a>
    33bc:	20 91 7e 00 	lds	r18, 0x007E
    33c0:	81 e0       	ldi	r24, 0x01	; 1
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	05 2e       	mov	r0, r21
    33c6:	02 c0       	rjmp	.+4      	; 0x33cc <ADC_set_channel+0x50>
    33c8:	88 0f       	add	r24, r24
    33ca:	99 1f       	adc	r25, r25
    33cc:	0a 94       	dec	r0
    33ce:	e2 f7       	brpl	.-8      	; 0x33c8 <ADC_set_channel+0x4c>
    33d0:	28 2b       	or	r18, r24
    33d2:	20 93 7e 00 	sts	0x007E, r18
    33d6:	50 93 e6 03 	sts	0x03E6, r21
    33da:	80 91 7c 00 	lds	r24, 0x007C
    33de:	5f 71       	andi	r21, 0x1F	; 31
    33e0:	80 7e       	andi	r24, 0xE0	; 224
    33e2:	85 2b       	or	r24, r21
    33e4:	80 93 7c 00 	sts	0x007C, r24
    33e8:	08 95       	ret

000033ea <ADC_set_VREF>:
    33ea:	ec e7       	ldi	r30, 0x7C	; 124
    33ec:	f0 e0       	ldi	r31, 0x00	; 0
    33ee:	90 81       	ld	r25, Z
    33f0:	82 95       	swap	r24
    33f2:	88 0f       	add	r24, r24
    33f4:	88 0f       	add	r24, r24
    33f6:	80 7c       	andi	r24, 0xC0	; 192
    33f8:	9f 73       	andi	r25, 0x3F	; 63
    33fa:	98 2b       	or	r25, r24
    33fc:	90 83       	st	Z, r25
    33fe:	08 95       	ret

00003400 <main>:
    3400:	0e 94 14 22 	call	0x4428	; 0x4428 <CBOT_ISR_init>
    3404:	0e 94 06 22 	call	0x440c	; 0x440c <CBOT_init>
    3408:	0e 94 97 10 	call	0x212e	; 0x212e <CBOT_main>
    340c:	80 e0       	ldi	r24, 0x00	; 0
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	08 95       	ret

00003412 <LCD_clear>:
    3412:	0f 93       	push	r16
    3414:	1f 93       	push	r17
    3416:	80 e4       	ldi	r24, 0x40	; 64
    3418:	60 e0       	ldi	r22, 0x00	; 0
    341a:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    341e:	00 e0       	ldi	r16, 0x00	; 0
    3420:	80 2f       	mov	r24, r16
    3422:	60 e0       	ldi	r22, 0x00	; 0
    3424:	0e 94 cf 1a 	call	0x359e	; 0x359e <LCD_set_PGC_addr>
    3428:	10 e0       	ldi	r17, 0x00	; 0
    342a:	80 e0       	ldi	r24, 0x00	; 0
    342c:	61 e0       	ldi	r22, 0x01	; 1
    342e:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    3432:	1f 5f       	subi	r17, 0xFF	; 255
    3434:	10 38       	cpi	r17, 0x80	; 128
    3436:	c9 f7       	brne	.-14     	; 0x342a <LCD_clear+0x18>
    3438:	0f 5f       	subi	r16, 0xFF	; 255
    343a:	04 30       	cpi	r16, 0x04	; 4
    343c:	89 f7       	brne	.-30     	; 0x3420 <LCD_clear+0xe>
    343e:	83 e0       	ldi	r24, 0x03	; 3
    3440:	60 e0       	ldi	r22, 0x00	; 0
    3442:	0e 94 c8 1a 	call	0x3590	; 0x3590 <LCD_set_next_PGC>
    3446:	1f 91       	pop	r17
    3448:	0f 91       	pop	r16
    344a:	08 95       	ret

0000344c <LCD_open>:
    344c:	0f 93       	push	r16
    344e:	1f 93       	push	r17
    3450:	82 e0       	ldi	r24, 0x02	; 2
    3452:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    3456:	88 23       	and	r24, r24
    3458:	11 f4       	brne	.+4      	; 0x345e <LCD_open+0x12>
    345a:	82 e0       	ldi	r24, 0x02	; 2
    345c:	06 c0       	rjmp	.+12     	; 0x346a <LCD_open+0x1e>
    345e:	81 e0       	ldi	r24, 0x01	; 1
    3460:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    3464:	88 23       	and	r24, r24
    3466:	19 f4       	brne	.+6      	; 0x346e <LCD_open+0x22>
    3468:	81 e0       	ldi	r24, 0x01	; 1
    346a:	90 e0       	ldi	r25, 0x00	; 0
    346c:	6d c0       	rjmp	.+218    	; 0x3548 <LCD_open+0xfc>
    346e:	0e 94 7c 24 	call	0x48f8	; 0x48f8 <__LCD_init>
    3472:	85 e0       	ldi	r24, 0x05	; 5
    3474:	61 e0       	ldi	r22, 0x01	; 1
    3476:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    347a:	8e ea       	ldi	r24, 0xAE	; 174
    347c:	60 e0       	ldi	r22, 0x00	; 0
    347e:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    3482:	82 ea       	ldi	r24, 0xA2	; 162
    3484:	60 e0       	ldi	r22, 0x00	; 0
    3486:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    348a:	80 ea       	ldi	r24, 0xA0	; 160
    348c:	60 e0       	ldi	r22, 0x00	; 0
    348e:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    3492:	00 e5       	ldi	r16, 0x50	; 80
    3494:	13 ec       	ldi	r17, 0xC3	; 195
    3496:	c8 01       	movw	r24, r16
    3498:	01 97       	sbiw	r24, 0x01	; 1
    349a:	f1 f7       	brne	.-4      	; 0x3498 <LCD_open+0x4c>
    349c:	80 ec       	ldi	r24, 0xC0	; 192
    349e:	60 e0       	ldi	r22, 0x00	; 0
    34a0:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    34a4:	8f e2       	ldi	r24, 0x2F	; 47
    34a6:	60 e0       	ldi	r22, 0x00	; 0
    34a8:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    34ac:	81 e8       	ldi	r24, 0x81	; 129
    34ae:	60 e0       	ldi	r22, 0x00	; 0
    34b0:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    34b4:	86 e1       	ldi	r24, 0x16	; 22
    34b6:	60 e0       	ldi	r22, 0x00	; 0
    34b8:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    34bc:	82 e2       	ldi	r24, 0x22	; 34
    34be:	60 e0       	ldi	r22, 0x00	; 0
    34c0:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    34c4:	c8 01       	movw	r24, r16
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <LCD_open+0x7a>
    34ca:	8f ea       	ldi	r24, 0xAF	; 175
    34cc:	60 e0       	ldi	r22, 0x00	; 0
    34ce:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    34d2:	86 ea       	ldi	r24, 0xA6	; 166
    34d4:	60 e0       	ldi	r22, 0x00	; 0
    34d6:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    34da:	85 ea       	ldi	r24, 0xA5	; 165
    34dc:	60 e0       	ldi	r22, 0x00	; 0
    34de:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    34e2:	80 e0       	ldi	r24, 0x00	; 0
    34e4:	90 e0       	ldi	r25, 0x00	; 0
    34e6:	28 e8       	ldi	r18, 0x88	; 136
    34e8:	33 e1       	ldi	r19, 0x13	; 19
    34ea:	f9 01       	movw	r30, r18
    34ec:	31 97       	sbiw	r30, 0x01	; 1
    34ee:	f1 f7       	brne	.-4      	; 0x34ec <LCD_open+0xa0>
    34f0:	01 96       	adiw	r24, 0x01	; 1
    34f2:	43 e0       	ldi	r20, 0x03	; 3
    34f4:	88 3e       	cpi	r24, 0xE8	; 232
    34f6:	94 07       	cpc	r25, r20
    34f8:	c1 f7       	brne	.-16     	; 0x34ea <LCD_open+0x9e>
    34fa:	83 eb       	ldi	r24, 0xB3	; 179
    34fc:	60 e0       	ldi	r22, 0x00	; 0
    34fe:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    3502:	80 e4       	ldi	r24, 0x40	; 64
    3504:	60 e0       	ldi	r22, 0x00	; 0
    3506:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    350a:	83 e0       	ldi	r24, 0x03	; 3
    350c:	60 e0       	ldi	r22, 0x00	; 0
    350e:	0e 94 cf 1a 	call	0x359e	; 0x359e <LCD_set_PGC_addr>
    3512:	83 e0       	ldi	r24, 0x03	; 3
    3514:	60 e0       	ldi	r22, 0x00	; 0
    3516:	0e 94 c8 1a 	call	0x3590	; 0x3590 <LCD_set_next_PGC>
    351a:	10 92 cd 07 	sts	0x07CD, r1
    351e:	10 92 cf 07 	sts	0x07CF, r1
    3522:	10 92 ce 07 	sts	0x07CE, r1
    3526:	85 ef       	ldi	r24, 0xF5	; 245
    3528:	93 e0       	ldi	r25, 0x03	; 3
    352a:	90 93 fe 07 	sts	0x07FE, r25
    352e:	80 93 fd 07 	sts	0x07FD, r24
    3532:	88 e1       	ldi	r24, 0x18	; 24
    3534:	0e 94 a7 1a 	call	0x354e	; 0x354e <LCD_set_backlight>
    3538:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
    353c:	84 ea       	ldi	r24, 0xA4	; 164
    353e:	60 e0       	ldi	r22, 0x00	; 0
    3540:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    3544:	85 e0       	ldi	r24, 0x05	; 5
    3546:	91 e0       	ldi	r25, 0x01	; 1
    3548:	1f 91       	pop	r17
    354a:	0f 91       	pop	r16
    354c:	08 95       	ret

0000354e <LCD_set_backlight>:
    354e:	1f 93       	push	r17
    3550:	18 2f       	mov	r17, r24
    3552:	85 e0       	ldi	r24, 0x05	; 5
    3554:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    3558:	81 30       	cpi	r24, 0x01	; 1
    355a:	c1 f4       	brne	.+48     	; 0x358c <LCD_set_backlight+0x3e>
    355c:	87 e0       	ldi	r24, 0x07	; 7
    355e:	0e 94 24 1b 	call	0x3648	; 0x3648 <SPI_set_slave_addr>
    3562:	82 e0       	ldi	r24, 0x02	; 2
    3564:	6a e0       	ldi	r22, 0x0A	; 10
    3566:	0e 94 75 1b 	call	0x36ea	; 0x36ea <SPI_transmit>
    356a:	82 e0       	ldi	r24, 0x02	; 2
    356c:	61 eb       	ldi	r22, 0xB1	; 177
    356e:	0e 94 75 1b 	call	0x36ea	; 0x36ea <SPI_transmit>
    3572:	61 2f       	mov	r22, r17
    3574:	11 32       	cpi	r17, 0x21	; 33
    3576:	08 f0       	brcs	.+2      	; 0x357a <LCD_set_backlight+0x2c>
    3578:	60 e2       	ldi	r22, 0x20	; 32
    357a:	82 e0       	ldi	r24, 0x02	; 2
    357c:	0e 94 75 1b 	call	0x36ea	; 0x36ea <SPI_transmit>
    3580:	89 ee       	ldi	r24, 0xE9	; 233
    3582:	8a 95       	dec	r24
    3584:	f1 f7       	brne	.-4      	; 0x3582 <LCD_set_backlight+0x34>
    3586:	87 e0       	ldi	r24, 0x07	; 7
    3588:	0e 94 24 1b 	call	0x3648	; 0x3648 <SPI_set_slave_addr>
    358c:	1f 91       	pop	r17
    358e:	08 95       	ret

00003590 <LCD_set_next_PGC>:
    3590:	83 70       	andi	r24, 0x03	; 3
    3592:	6f 77       	andi	r22, 0x7F	; 127
    3594:	60 93 cb 07 	sts	0x07CB, r22
    3598:	80 93 cc 07 	sts	0x07CC, r24
    359c:	08 95       	ret

0000359e <LCD_set_PGC_addr>:
    359e:	0f 93       	push	r16
    35a0:	1f 93       	push	r17
    35a2:	06 2f       	mov	r16, r22
    35a4:	16 2f       	mov	r17, r22
    35a6:	1f 77       	andi	r17, 0x7F	; 127
    35a8:	83 70       	andi	r24, 0x03	; 3
    35aa:	80 6b       	ori	r24, 0xB0	; 176
    35ac:	60 e0       	ldi	r22, 0x00	; 0
    35ae:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    35b2:	12 95       	swap	r17
    35b4:	1f 70       	andi	r17, 0x0F	; 15
    35b6:	81 2f       	mov	r24, r17
    35b8:	80 61       	ori	r24, 0x10	; 16
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    35c0:	80 2f       	mov	r24, r16
    35c2:	8f 70       	andi	r24, 0x0F	; 15
    35c4:	60 e0       	ldi	r22, 0x00	; 0
    35c6:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    35ca:	1f 91       	pop	r17
    35cc:	0f 91       	pop	r16
    35ce:	08 95       	ret

000035d0 <LCD_write>:
    35d0:	0f 93       	push	r16
    35d2:	1f 93       	push	r17
    35d4:	08 2f       	mov	r16, r24
    35d6:	16 2f       	mov	r17, r22
    35d8:	85 e0       	ldi	r24, 0x05	; 5
    35da:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    35de:	81 30       	cpi	r24, 0x01	; 1
    35e0:	79 f4       	brne	.+30     	; 0x3600 <LCD_write+0x30>
    35e2:	11 23       	and	r17, r17
    35e4:	19 f0       	breq	.+6      	; 0x35ec <LCD_write+0x1c>
    35e6:	11 30       	cpi	r17, 0x01	; 1
    35e8:	21 f4       	brne	.+8      	; 0x35f2 <LCD_write+0x22>
    35ea:	02 c0       	rjmp	.+4      	; 0x35f0 <LCD_write+0x20>
    35ec:	2b 98       	cbi	0x05, 3	; 5
    35ee:	01 c0       	rjmp	.+2      	; 0x35f2 <LCD_write+0x22>
    35f0:	2b 9a       	sbi	0x05, 3	; 5
    35f2:	86 e0       	ldi	r24, 0x06	; 6
    35f4:	8a 95       	dec	r24
    35f6:	f1 f7       	brne	.-4      	; 0x35f4 <LCD_write+0x24>
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	60 2f       	mov	r22, r16
    35fc:	0e 94 75 1b 	call	0x36ea	; 0x36ea <SPI_transmit>
    3600:	1f 91       	pop	r17
    3602:	0f 91       	pop	r16
    3604:	08 95       	ret

00003606 <LED_clr_pattern>:
    3606:	1f 93       	push	r17
    3608:	18 2f       	mov	r17, r24
    360a:	86 e0       	ldi	r24, 0x06	; 6
    360c:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    3610:	81 30       	cpi	r24, 0x01	; 1
    3612:	19 f4       	brne	.+6      	; 0x361a <LED_clr_pattern+0x14>
    3614:	81 2f       	mov	r24, r17
    3616:	0e 94 2b 25 	call	0x4a56	; 0x4a56 <__LED_clr_pattern>
    361a:	1f 91       	pop	r17
    361c:	08 95       	ret

0000361e <LED_open>:
    361e:	0e 94 30 25 	call	0x4a60	; 0x4a60 <__LED_init>
    3622:	86 e0       	ldi	r24, 0x06	; 6
    3624:	61 e0       	ldi	r22, 0x01	; 1
    3626:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    362a:	86 e0       	ldi	r24, 0x06	; 6
    362c:	91 e0       	ldi	r25, 0x01	; 1
    362e:	08 95       	ret

00003630 <LED_set_pattern>:
    3630:	1f 93       	push	r17
    3632:	18 2f       	mov	r17, r24
    3634:	86 e0       	ldi	r24, 0x06	; 6
    3636:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    363a:	81 30       	cpi	r24, 0x01	; 1
    363c:	19 f4       	brne	.+6      	; 0x3644 <LED_set_pattern+0x14>
    363e:	81 2f       	mov	r24, r17
    3640:	0e 94 33 25 	call	0x4a66	; 0x4a66 <__LED_set_pattern>
    3644:	1f 91       	pop	r17
    3646:	08 95       	ret

00003648 <SPI_set_slave_addr>:
    3648:	1f 93       	push	r17
    364a:	18 2f       	mov	r17, r24
    364c:	82 e0       	ldi	r24, 0x02	; 2
    364e:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    3652:	81 30       	cpi	r24, 0x01	; 1
    3654:	09 f0       	breq	.+2      	; 0x3658 <SPI_set_slave_addr+0x10>
    3656:	47 c0       	rjmp	.+142    	; 0x36e6 <SPI_set_slave_addr+0x9e>
    3658:	91 2f       	mov	r25, r17
    365a:	97 70       	andi	r25, 0x07	; 7
    365c:	80 91 d0 07 	lds	r24, 0x07D0
    3660:	98 17       	cp	r25, r24
    3662:	09 f4       	brne	.+2      	; 0x3666 <SPI_set_slave_addr+0x1e>
    3664:	40 c0       	rjmp	.+128    	; 0x36e6 <SPI_set_slave_addr+0x9e>
    3666:	90 93 d0 07 	sts	0x07D0, r25
    366a:	85 b1       	in	r24, 0x05	; 5
    366c:	88 7f       	andi	r24, 0xF8	; 248
    366e:	89 2b       	or	r24, r25
    3670:	85 b9       	out	0x05, r24	; 5
    3672:	93 30       	cpi	r25, 0x03	; 3
    3674:	11 f1       	breq	.+68     	; 0x36ba <SPI_set_slave_addr+0x72>
    3676:	94 30       	cpi	r25, 0x04	; 4
    3678:	28 f4       	brcc	.+10     	; 0x3684 <SPI_set_slave_addr+0x3c>
    367a:	91 30       	cpi	r25, 0x01	; 1
    367c:	51 f0       	breq	.+20     	; 0x3692 <SPI_set_slave_addr+0x4a>
    367e:	92 30       	cpi	r25, 0x02	; 2
    3680:	90 f4       	brcc	.+36     	; 0x36a6 <SPI_set_slave_addr+0x5e>
    3682:	0c c0       	rjmp	.+24     	; 0x369c <SPI_set_slave_addr+0x54>
    3684:	95 30       	cpi	r25, 0x05	; 5
    3686:	19 f1       	breq	.+70     	; 0x36ce <SPI_set_slave_addr+0x86>
    3688:	95 30       	cpi	r25, 0x05	; 5
    368a:	e0 f0       	brcs	.+56     	; 0x36c4 <SPI_set_slave_addr+0x7c>
    368c:	96 30       	cpi	r25, 0x06	; 6
    368e:	21 f5       	brne	.+72     	; 0x36d8 <SPI_set_slave_addr+0x90>
    3690:	0f c0       	rjmp	.+30     	; 0x36b0 <SPI_set_slave_addr+0x68>
    3692:	e0 91 98 04 	lds	r30, 0x0498
    3696:	f0 91 99 04 	lds	r31, 0x0499
    369a:	22 c0       	rjmp	.+68     	; 0x36e0 <SPI_set_slave_addr+0x98>
    369c:	e0 91 96 04 	lds	r30, 0x0496
    36a0:	f0 91 97 04 	lds	r31, 0x0497
    36a4:	1d c0       	rjmp	.+58     	; 0x36e0 <SPI_set_slave_addr+0x98>
    36a6:	e0 91 9a 04 	lds	r30, 0x049A
    36aa:	f0 91 9b 04 	lds	r31, 0x049B
    36ae:	18 c0       	rjmp	.+48     	; 0x36e0 <SPI_set_slave_addr+0x98>
    36b0:	e0 91 a2 04 	lds	r30, 0x04A2
    36b4:	f0 91 a3 04 	lds	r31, 0x04A3
    36b8:	13 c0       	rjmp	.+38     	; 0x36e0 <SPI_set_slave_addr+0x98>
    36ba:	e0 91 9c 04 	lds	r30, 0x049C
    36be:	f0 91 9d 04 	lds	r31, 0x049D
    36c2:	0e c0       	rjmp	.+28     	; 0x36e0 <SPI_set_slave_addr+0x98>
    36c4:	e0 91 9e 04 	lds	r30, 0x049E
    36c8:	f0 91 9f 04 	lds	r31, 0x049F
    36cc:	09 c0       	rjmp	.+18     	; 0x36e0 <SPI_set_slave_addr+0x98>
    36ce:	e0 91 a0 04 	lds	r30, 0x04A0
    36d2:	f0 91 a1 04 	lds	r31, 0x04A1
    36d6:	04 c0       	rjmp	.+8      	; 0x36e0 <SPI_set_slave_addr+0x98>
    36d8:	e0 91 a4 04 	lds	r30, 0x04A4
    36dc:	f0 91 a5 04 	lds	r31, 0x04A5
    36e0:	30 97       	sbiw	r30, 0x00	; 0
    36e2:	09 f0       	breq	.+2      	; 0x36e6 <SPI_set_slave_addr+0x9e>
    36e4:	09 95       	icall
    36e6:	1f 91       	pop	r17
    36e8:	08 95       	ret

000036ea <SPI_transmit>:
    36ea:	1f 93       	push	r17
    36ec:	16 2f       	mov	r17, r22
    36ee:	0e 94 24 1b 	call	0x3648	; 0x3648 <SPI_set_slave_addr>
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    36f8:	81 30       	cpi	r24, 0x01	; 1
    36fa:	21 f4       	brne	.+8      	; 0x3704 <SPI_transmit+0x1a>
    36fc:	1e bd       	out	0x2e, r17	; 46
    36fe:	0d b4       	in	r0, 0x2d	; 45
    3700:	07 fe       	sbrs	r0, 7
    3702:	fd cf       	rjmp	.-6      	; 0x36fe <SPI_transmit+0x14>
    3704:	1f 91       	pop	r17
    3706:	08 95       	ret

00003708 <__SPKR_set_up_freq_LUT>:
    3708:	0f 93       	push	r16
    370a:	1f 93       	push	r17
    370c:	cf 93       	push	r28
    370e:	df 93       	push	r29
    3710:	80 e2       	ldi	r24, 0x20	; 32
    3712:	91 e0       	ldi	r25, 0x01	; 1
    3714:	0e 94 81 34 	call	0x6902	; 0x6902 <malloc>
    3718:	9c 01       	movw	r18, r24
    371a:	90 93 b5 04 	sts	0x04B5, r25
    371e:	80 93 b4 04 	sts	0x04B4, r24
    3722:	89 2b       	or	r24, r25
    3724:	11 f4       	brne	.+4      	; 0x372a <__SPKR_set_up_freq_LUT+0x22>
    3726:	80 e0       	ldi	r24, 0x00	; 0
    3728:	39 c0       	rjmp	.+114    	; 0x379c <__SPKR_set_up_freq_LUT+0x94>
    372a:	89 01       	movw	r16, r18
    372c:	c0 e0       	ldi	r28, 0x00	; 0
    372e:	d0 e0       	ldi	r29, 0x00	; 0
    3730:	be 01       	movw	r22, r28
    3732:	80 e0       	ldi	r24, 0x00	; 0
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	0e 94 c2 2d 	call	0x5b84	; 0x5b84 <__floatunsisf>
    373a:	20 e0       	ldi	r18, 0x00	; 0
    373c:	30 e0       	ldi	r19, 0x00	; 0
    373e:	40 ea       	ldi	r20, 0xA0	; 160
    3740:	51 e4       	ldi	r21, 0x41	; 65
    3742:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <__divsf3>
    3746:	27 ef       	ldi	r18, 0xF7	; 247
    3748:	35 e7       	ldi	r19, 0x75	; 117
    374a:	40 e0       	ldi	r20, 0x00	; 0
    374c:	5f e3       	ldi	r21, 0x3F	; 63
    374e:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    3752:	9b 01       	movw	r18, r22
    3754:	ac 01       	movw	r20, r24
    3756:	60 e0       	ldi	r22, 0x00	; 0
    3758:	70 e0       	ldi	r23, 0x00	; 0
    375a:	80 e2       	ldi	r24, 0x20	; 32
    375c:	91 e4       	ldi	r25, 0x41	; 65
    375e:	0e 94 15 2f 	call	0x5e2a	; 0x5e2a <pow>
    3762:	9b 01       	movw	r18, r22
    3764:	ac 01       	movw	r20, r24
    3766:	ca 01       	movw	r24, r20
    3768:	b9 01       	movw	r22, r18
    376a:	2d ec       	ldi	r18, 0xCD	; 205
    376c:	3c ec       	ldi	r19, 0xCC	; 204
    376e:	42 e8       	ldi	r20, 0x82	; 130
    3770:	51 e4       	ldi	r21, 0x41	; 65
    3772:	0e 94 b2 2e 	call	0x5d64	; 0x5d64 <__mulsf3>
    3776:	0e 94 78 2e 	call	0x5cf0	; 0x5cf0 <lrint>
    377a:	2a e0       	ldi	r18, 0x0A	; 10
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	40 e0       	ldi	r20, 0x00	; 0
    3780:	50 e0       	ldi	r21, 0x00	; 0
    3782:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <__mulsi3>
    3786:	f8 01       	movw	r30, r16
    3788:	61 93       	st	Z+, r22
    378a:	71 93       	st	Z+, r23
    378c:	81 93       	st	Z+, r24
    378e:	91 93       	st	Z+, r25
    3790:	8f 01       	movw	r16, r30
    3792:	21 96       	adiw	r28, 0x01	; 1
    3794:	c8 34       	cpi	r28, 0x48	; 72
    3796:	d1 05       	cpc	r29, r1
    3798:	59 f6       	brne	.-106    	; 0x3730 <__SPKR_set_up_freq_LUT+0x28>
    379a:	81 e0       	ldi	r24, 0x01	; 1
    379c:	df 91       	pop	r29
    379e:	cf 91       	pop	r28
    37a0:	1f 91       	pop	r17
    37a2:	0f 91       	pop	r16
    37a4:	08 95       	ret

000037a6 <__SPKR_open_beep_mode>:
    37a6:	8a e0       	ldi	r24, 0x0A	; 10
    37a8:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    37ac:	88 23       	and	r24, r24
    37ae:	71 f4       	brne	.+28     	; 0x37cc <__SPKR_open_beep_mode+0x26>
    37b0:	10 92 b1 04 	sts	0x04B1, r1
    37b4:	10 92 b0 04 	sts	0x04B0, r1
    37b8:	81 e0       	ldi	r24, 0x01	; 1
    37ba:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__SPKR_init>
    37be:	81 e0       	ldi	r24, 0x01	; 1
    37c0:	80 93 a7 04 	sts	0x04A7, r24
    37c4:	8a e0       	ldi	r24, 0x0A	; 10
    37c6:	61 e0       	ldi	r22, 0x01	; 1
    37c8:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    37cc:	8a e0       	ldi	r24, 0x0A	; 10
    37ce:	91 e0       	ldi	r25, 0x01	; 1
    37d0:	08 95       	ret

000037d2 <__SPKR_open_tone_mode>:
    37d2:	1f 93       	push	r17
    37d4:	8b e0       	ldi	r24, 0x0B	; 11
    37d6:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    37da:	88 23       	and	r24, r24
    37dc:	11 f0       	breq	.+4      	; 0x37e2 <__SPKR_open_tone_mode+0x10>
    37de:	90 e0       	ldi	r25, 0x00	; 0
    37e0:	21 c0       	rjmp	.+66     	; 0x3824 <__SPKR_open_tone_mode+0x52>
    37e2:	89 e0       	ldi	r24, 0x09	; 9
    37e4:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    37e8:	88 23       	and	r24, r24
    37ea:	d9 f4       	brne	.+54     	; 0x3822 <__SPKR_open_tone_mode+0x50>
    37ec:	0e 94 84 1b 	call	0x3708	; 0x3708 <__SPKR_set_up_freq_LUT>
    37f0:	18 2f       	mov	r17, r24
    37f2:	81 30       	cpi	r24, 0x01	; 1
    37f4:	b1 f4       	brne	.+44     	; 0x3822 <__SPKR_open_tone_mode+0x50>
    37f6:	10 92 a8 04 	sts	0x04A8, r1
    37fa:	10 92 a9 04 	sts	0x04A9, r1
    37fe:	10 92 aa 04 	sts	0x04AA, r1
    3802:	10 92 ab 04 	sts	0x04AB, r1
    3806:	8d e0       	ldi	r24, 0x0D	; 13
    3808:	61 ef       	ldi	r22, 0xF1	; 241
    380a:	75 e2       	ldi	r23, 0x25	; 37
    380c:	0e 94 54 24 	call	0x48a8	; 0x48a8 <ISR_attach>
    3810:	82 e0       	ldi	r24, 0x02	; 2
    3812:	0e 94 6e 26 	call	0x4cdc	; 0x4cdc <__SPKR_init>
    3816:	10 93 a6 04 	sts	0x04A6, r17
    381a:	89 e0       	ldi	r24, 0x09	; 9
    381c:	61 e0       	ldi	r22, 0x01	; 1
    381e:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    3822:	91 e0       	ldi	r25, 0x01	; 1
    3824:	89 e0       	ldi	r24, 0x09	; 9
    3826:	1f 91       	pop	r17
    3828:	08 95       	ret

0000382a <SPKR_open>:
    382a:	81 30       	cpi	r24, 0x01	; 1
    382c:	29 f0       	breq	.+10     	; 0x3838 <SPKR_open+0xe>
    382e:	82 30       	cpi	r24, 0x02	; 2
    3830:	31 f0       	breq	.+12     	; 0x383e <SPKR_open+0x14>
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	89 e0       	ldi	r24, 0x09	; 9
    3836:	08 95       	ret
    3838:	0e 94 d3 1b 	call	0x37a6	; 0x37a6 <__SPKR_open_beep_mode>
    383c:	08 95       	ret
    383e:	0e 94 e9 1b 	call	0x37d2	; 0x37d2 <__SPKR_open_tone_mode>
    3842:	08 95       	ret

00003844 <STEPPER_get_nSteps>:
    3844:	80 91 91 07 	lds	r24, 0x0791
    3848:	90 91 92 07 	lds	r25, 0x0792
    384c:	20 91 93 07 	lds	r18, 0x0793
    3850:	30 91 94 07 	lds	r19, 0x0794
    3854:	bc 01       	movw	r22, r24
    3856:	c9 01       	movw	r24, r18
    3858:	08 95       	ret

0000385a <STEPPER_stepmode>:
    385a:	2f 92       	push	r2
    385c:	3f 92       	push	r3
    385e:	4f 92       	push	r4
    3860:	5f 92       	push	r5
    3862:	6f 92       	push	r6
    3864:	7f 92       	push	r7
    3866:	8f 92       	push	r8
    3868:	9f 92       	push	r9
    386a:	af 92       	push	r10
    386c:	bf 92       	push	r11
    386e:	cf 92       	push	r12
    3870:	df 92       	push	r13
    3872:	ef 92       	push	r14
    3874:	ff 92       	push	r15
    3876:	0f 93       	push	r16
    3878:	1f 93       	push	r17
    387a:	df 93       	push	r29
    387c:	cf 93       	push	r28
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
    3882:	58 2e       	mov	r5, r24
    3884:	96 2e       	mov	r9, r22
    3886:	44 2e       	mov	r4, r20
    3888:	39 01       	movw	r6, r18
    388a:	3c 2c       	mov	r3, r12
    388c:	c9 8c       	ldd	r12, Y+25	; 0x19
    388e:	da 8c       	ldd	r13, Y+26	; 0x1a
    3890:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	68 17       	cp	r22, r24
    3896:	39 f1       	breq	.+78     	; 0x38e6 <STEPPER_stepmode+0x8c>
    3898:	68 17       	cp	r22, r24
    389a:	28 f0       	brcs	.+10     	; 0x38a6 <STEPPER_stepmode+0x4c>
    389c:	92 e0       	ldi	r25, 0x02	; 2
    389e:	69 17       	cp	r22, r25
    38a0:	09 f0       	breq	.+2      	; 0x38a4 <STEPPER_stepmode+0x4a>
    38a2:	85 c0       	rjmp	.+266    	; 0x39ae <STEPPER_stepmode+0x154>
    38a4:	49 c0       	rjmp	.+146    	; 0x3938 <STEPPER_stepmode+0xde>
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	61 e0       	ldi	r22, 0x01	; 1
    38aa:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_set_mode>
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	b7 01       	movw	r22, r14
    38b2:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <STEPPER_set_accel>
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	64 2d       	mov	r22, r4
    38ba:	a3 01       	movw	r20, r6
    38bc:	98 01       	movw	r18, r16
    38be:	03 2d       	mov	r16, r3
    38c0:	ee 24       	eor	r14, r14
    38c2:	e3 94       	inc	r14
    38c4:	e6 eb       	ldi	r30, 0xB6	; 182
    38c6:	ce 2e       	mov	r12, r30
    38c8:	e7 e0       	ldi	r30, 0x07	; 7
    38ca:	de 2e       	mov	r13, r30
    38cc:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <STEPPER_step>
    38d0:	55 20       	and	r5, r5
    38d2:	09 f0       	breq	.+2      	; 0x38d6 <STEPPER_stepmode+0x7c>
    38d4:	6c c0       	rjmp	.+216    	; 0x39ae <STEPPER_stepmode+0x154>
    38d6:	00 d0       	rcall	.+0      	; 0x38d8 <STEPPER_stepmode+0x7e>
    38d8:	0f 92       	push	r0
    38da:	ed b7       	in	r30, 0x3d	; 61
    38dc:	fe b7       	in	r31, 0x3e	; 62
    38de:	11 82       	std	Z+1, r1	; 0x01
    38e0:	b3 82       	std	Z+3, r11	; 0x03
    38e2:	a2 82       	std	Z+2, r10	; 0x02
    38e4:	23 c0       	rjmp	.+70     	; 0x392c <STEPPER_stepmode+0xd2>
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	61 e0       	ldi	r22, 0x01	; 1
    38ea:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_set_mode>
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	b6 01       	movw	r22, r12
    38f2:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <STEPPER_set_accel>
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	68 2d       	mov	r22, r8
    38fa:	4d 89       	ldd	r20, Y+21	; 0x15
    38fc:	5e 89       	ldd	r21, Y+22	; 0x16
    38fe:	2f 89       	ldd	r18, Y+23	; 0x17
    3900:	38 8d       	ldd	r19, Y+24	; 0x18
    3902:	02 2d       	mov	r16, r2
    3904:	ee 24       	eor	r14, r14
    3906:	e3 94       	inc	r14
    3908:	76 eb       	ldi	r23, 0xB6	; 182
    390a:	c7 2e       	mov	r12, r23
    390c:	77 e0       	ldi	r23, 0x07	; 7
    390e:	d7 2e       	mov	r13, r23
    3910:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <STEPPER_step>
    3914:	55 20       	and	r5, r5
    3916:	09 f0       	breq	.+2      	; 0x391a <STEPPER_stepmode+0xc0>
    3918:	4a c0       	rjmp	.+148    	; 0x39ae <STEPPER_stepmode+0x154>
    391a:	00 d0       	rcall	.+0      	; 0x391c <STEPPER_stepmode+0xc2>
    391c:	0f 92       	push	r0
    391e:	ed b7       	in	r30, 0x3d	; 61
    3920:	fe b7       	in	r31, 0x3e	; 62
    3922:	91 82       	std	Z+1, r9	; 0x01
    3924:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3926:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3928:	93 83       	std	Z+3, r25	; 0x03
    392a:	82 83       	std	Z+2, r24	; 0x02
    392c:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <STEPPER_wait_and_then>
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	3b c0       	rjmp	.+118    	; 0x39ae <STEPPER_stepmode+0x154>
    3938:	82 e0       	ldi	r24, 0x02	; 2
    393a:	61 e0       	ldi	r22, 0x01	; 1
    393c:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_set_mode>
    3940:	80 e0       	ldi	r24, 0x00	; 0
    3942:	b7 01       	movw	r22, r14
    3944:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <STEPPER_set_accel>
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	b6 01       	movw	r22, r12
    394c:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <STEPPER_set_accel>
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	64 2d       	mov	r22, r4
    3954:	a3 01       	movw	r20, r6
    3956:	98 01       	movw	r18, r16
    3958:	03 2d       	mov	r16, r3
    395a:	ee 24       	eor	r14, r14
    395c:	e3 94       	inc	r14
    395e:	96 eb       	ldi	r25, 0xB6	; 182
    3960:	c9 2e       	mov	r12, r25
    3962:	97 e0       	ldi	r25, 0x07	; 7
    3964:	d9 2e       	mov	r13, r25
    3966:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <STEPPER_step>
    396a:	81 e0       	ldi	r24, 0x01	; 1
    396c:	68 2d       	mov	r22, r8
    396e:	4d 89       	ldd	r20, Y+21	; 0x15
    3970:	5e 89       	ldd	r21, Y+22	; 0x16
    3972:	2f 89       	ldd	r18, Y+23	; 0x17
    3974:	38 8d       	ldd	r19, Y+24	; 0x18
    3976:	02 2d       	mov	r16, r2
    3978:	0e 94 6d 1e 	call	0x3cda	; 0x3cda <STEPPER_step>
    397c:	55 20       	and	r5, r5
    397e:	b9 f4       	brne	.+46     	; 0x39ae <STEPPER_stepmode+0x154>
    3980:	00 d0       	rcall	.+0      	; 0x3982 <STEPPER_stepmode+0x128>
    3982:	00 d0       	rcall	.+0      	; 0x3984 <STEPPER_stepmode+0x12a>
    3984:	0f 92       	push	r0
    3986:	ad b7       	in	r26, 0x3d	; 61
    3988:	be b7       	in	r27, 0x3e	; 62
    398a:	11 96       	adiw	r26, 0x01	; 1
    398c:	ed b7       	in	r30, 0x3d	; 61
    398e:	fe b7       	in	r31, 0x3e	; 62
    3990:	91 82       	std	Z+1, r9	; 0x01
    3992:	fd 01       	movw	r30, r26
    3994:	b2 82       	std	Z+2, r11	; 0x02
    3996:	a1 82       	std	Z+1, r10	; 0x01
    3998:	8c 8d       	ldd	r24, Y+28	; 0x1c
    399a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    399c:	94 83       	std	Z+4, r25	; 0x04
    399e:	83 83       	std	Z+3, r24	; 0x03
    39a0:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <STEPPER_wait_and_then>
    39a4:	0f 90       	pop	r0
    39a6:	0f 90       	pop	r0
    39a8:	0f 90       	pop	r0
    39aa:	0f 90       	pop	r0
    39ac:	0f 90       	pop	r0
    39ae:	cf 91       	pop	r28
    39b0:	df 91       	pop	r29
    39b2:	1f 91       	pop	r17
    39b4:	0f 91       	pop	r16
    39b6:	ff 90       	pop	r15
    39b8:	ef 90       	pop	r14
    39ba:	df 90       	pop	r13
    39bc:	cf 90       	pop	r12
    39be:	bf 90       	pop	r11
    39c0:	af 90       	pop	r10
    39c2:	9f 90       	pop	r9
    39c4:	8f 90       	pop	r8
    39c6:	7f 90       	pop	r7
    39c8:	6f 90       	pop	r6
    39ca:	5f 90       	pop	r5
    39cc:	4f 90       	pop	r4
    39ce:	3f 90       	pop	r3
    39d0:	2f 90       	pop	r2
    39d2:	08 95       	ret

000039d4 <STEPPER_move>:
    39d4:	6f 92       	push	r6
    39d6:	7f 92       	push	r7
    39d8:	8f 92       	push	r8
    39da:	9f 92       	push	r9
    39dc:	af 92       	push	r10
    39de:	bf 92       	push	r11
    39e0:	cf 92       	push	r12
    39e2:	df 92       	push	r13
    39e4:	ef 92       	push	r14
    39e6:	ff 92       	push	r15
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	df 93       	push	r29
    39ee:	cf 93       	push	r28
    39f0:	cd b7       	in	r28, 0x3d	; 61
    39f2:	de b7       	in	r29, 0x3e	; 62
    39f4:	94 2e       	mov	r9, r20
    39f6:	7c 2d       	mov	r23, r12
    39f8:	d5 01       	movw	r26, r10
    39fa:	49 89       	ldd	r20, Y+17	; 0x11
    39fc:	5a 89       	ldd	r21, Y+18	; 0x12
    39fe:	ab 88       	ldd	r10, Y+19	; 0x13
    3a00:	bc 88       	ldd	r11, Y+20	; 0x14
    3a02:	cd 88       	ldd	r12, Y+21	; 0x15
    3a04:	de 88       	ldd	r13, Y+22	; 0x16
    3a06:	9f 89       	ldd	r25, Y+23	; 0x17
    3a08:	81 30       	cpi	r24, 0x01	; 1
    3a0a:	09 f4       	brne	.+2      	; 0x3a0e <STEPPER_move+0x3a>
    3a0c:	57 c0       	rjmp	.+174    	; 0x3abc <STEPPER_move+0xe8>
    3a0e:	81 30       	cpi	r24, 0x01	; 1
    3a10:	b8 f1       	brcs	.+110    	; 0x3a80 <STEPPER_move+0xac>
    3a12:	82 30       	cpi	r24, 0x02	; 2
    3a14:	09 f0       	breq	.+2      	; 0x3a18 <STEPPER_move+0x44>
    3a16:	76 c0       	rjmp	.+236    	; 0x3b04 <STEPPER_move+0x130>
    3a18:	61 30       	cpi	r22, 0x01	; 1
    3a1a:	91 f0       	breq	.+36     	; 0x3a40 <STEPPER_move+0x6c>
    3a1c:	61 30       	cpi	r22, 0x01	; 1
    3a1e:	20 f0       	brcs	.+8      	; 0x3a28 <STEPPER_move+0x54>
    3a20:	62 30       	cpi	r22, 0x02	; 2
    3a22:	09 f0       	breq	.+2      	; 0x3a26 <STEPPER_move+0x52>
    3a24:	6f c0       	rjmp	.+222    	; 0x3b04 <STEPPER_move+0x130>
    3a26:	15 c0       	rjmp	.+42     	; 0x3a52 <STEPPER_move+0x7e>
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	60 e0       	ldi	r22, 0x00	; 0
    3a2c:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_set_mode>
    3a30:	80 e0       	ldi	r24, 0x00	; 0
    3a32:	b7 01       	movw	r22, r14
    3a34:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <STEPPER_set_accel>
    3a38:	80 e0       	ldi	r24, 0x00	; 0
    3a3a:	69 2d       	mov	r22, r9
    3a3c:	a8 01       	movw	r20, r16
    3a3e:	1d c0       	rjmp	.+58     	; 0x3a7a <STEPPER_move+0xa6>
    3a40:	81 e0       	ldi	r24, 0x01	; 1
    3a42:	60 e0       	ldi	r22, 0x00	; 0
    3a44:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_set_mode>
    3a48:	81 e0       	ldi	r24, 0x01	; 1
    3a4a:	b6 01       	movw	r22, r12
    3a4c:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <STEPPER_set_accel>
    3a50:	11 c0       	rjmp	.+34     	; 0x3a74 <STEPPER_move+0xa0>
    3a52:	82 e0       	ldi	r24, 0x02	; 2
    3a54:	60 e0       	ldi	r22, 0x00	; 0
    3a56:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_set_mode>
    3a5a:	80 e0       	ldi	r24, 0x00	; 0
    3a5c:	b7 01       	movw	r22, r14
    3a5e:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <STEPPER_set_accel>
    3a62:	81 e0       	ldi	r24, 0x01	; 1
    3a64:	b6 01       	movw	r22, r12
    3a66:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <STEPPER_set_accel>
    3a6a:	80 e0       	ldi	r24, 0x00	; 0
    3a6c:	69 2d       	mov	r22, r9
    3a6e:	a8 01       	movw	r20, r16
    3a70:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <STEPPER_run>
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	68 2d       	mov	r22, r8
    3a78:	a5 01       	movw	r20, r10
    3a7a:	0e 94 e8 1d 	call	0x3bd0	; 0x3bd0 <STEPPER_run>
    3a7e:	42 c0       	rjmp	.+132    	; 0x3b04 <STEPPER_move+0x130>
    3a80:	ed b7       	in	r30, 0x3d	; 61
    3a82:	fe b7       	in	r31, 0x3e	; 62
    3a84:	39 97       	sbiw	r30, 0x09	; 9
    3a86:	0f b6       	in	r0, 0x3f	; 63
    3a88:	f8 94       	cli
    3a8a:	fe bf       	out	0x3e, r31	; 62
    3a8c:	0f be       	out	0x3f, r0	; 63
    3a8e:	ed bf       	out	0x3d, r30	; 61
    3a90:	6d b6       	in	r6, 0x3d	; 61
    3a92:	7e b6       	in	r7, 0x3e	; 62
    3a94:	08 94       	sec
    3a96:	61 1c       	adc	r6, r1
    3a98:	71 1c       	adc	r7, r1
    3a9a:	52 83       	std	Z+2, r21	; 0x02
    3a9c:	41 83       	std	Z+1, r20	; 0x01
    3a9e:	f3 01       	movw	r30, r6
    3aa0:	b3 82       	std	Z+3, r11	; 0x03
    3aa2:	a2 82       	std	Z+2, r10	; 0x02
    3aa4:	d5 82       	std	Z+5, r13	; 0x05
    3aa6:	c4 82       	std	Z+4, r12	; 0x04
    3aa8:	96 83       	std	Z+6, r25	; 0x06
    3aaa:	88 8d       	ldd	r24, Y+24	; 0x18
    3aac:	99 8d       	ldd	r25, Y+25	; 0x19
    3aae:	90 87       	std	Z+8, r25	; 0x08
    3ab0:	87 83       	std	Z+7, r24	; 0x07
    3ab2:	80 e0       	ldi	r24, 0x00	; 0
    3ab4:	49 2d       	mov	r20, r9
    3ab6:	c7 2e       	mov	r12, r23
    3ab8:	5d 01       	movw	r10, r26
    3aba:	1a c0       	rjmp	.+52     	; 0x3af0 <STEPPER_move+0x11c>
    3abc:	ed b7       	in	r30, 0x3d	; 61
    3abe:	fe b7       	in	r31, 0x3e	; 62
    3ac0:	39 97       	sbiw	r30, 0x09	; 9
    3ac2:	0f b6       	in	r0, 0x3f	; 63
    3ac4:	f8 94       	cli
    3ac6:	fe bf       	out	0x3e, r31	; 62
    3ac8:	0f be       	out	0x3f, r0	; 63
    3aca:	ed bf       	out	0x3d, r30	; 61
    3acc:	ad b7       	in	r26, 0x3d	; 61
    3ace:	be b7       	in	r27, 0x3e	; 62
    3ad0:	11 96       	adiw	r26, 0x01	; 1
    3ad2:	52 83       	std	Z+2, r21	; 0x02
    3ad4:	41 83       	std	Z+1, r20	; 0x01
    3ad6:	fd 01       	movw	r30, r26
    3ad8:	b3 82       	std	Z+3, r11	; 0x03
    3ada:	a2 82       	std	Z+2, r10	; 0x02
    3adc:	d5 82       	std	Z+5, r13	; 0x05
    3ade:	c4 82       	std	Z+4, r12	; 0x04
    3ae0:	96 83       	std	Z+6, r25	; 0x06
    3ae2:	10 86       	std	Z+8, r1	; 0x08
    3ae4:	17 82       	std	Z+7, r1	; 0x07
    3ae6:	81 e0       	ldi	r24, 0x01	; 1
    3ae8:	49 2d       	mov	r20, r9
    3aea:	c7 2e       	mov	r12, r23
    3aec:	aa 24       	eor	r10, r10
    3aee:	bb 24       	eor	r11, r11
    3af0:	0e 94 2d 1c 	call	0x385a	; 0x385a <STEPPER_stepmode>
    3af4:	8d b7       	in	r24, 0x3d	; 61
    3af6:	9e b7       	in	r25, 0x3e	; 62
    3af8:	09 96       	adiw	r24, 0x09	; 9
    3afa:	0f b6       	in	r0, 0x3f	; 63
    3afc:	f8 94       	cli
    3afe:	9e bf       	out	0x3e, r25	; 62
    3b00:	0f be       	out	0x3f, r0	; 63
    3b02:	8d bf       	out	0x3d, r24	; 61
    3b04:	cf 91       	pop	r28
    3b06:	df 91       	pop	r29
    3b08:	1f 91       	pop	r17
    3b0a:	0f 91       	pop	r16
    3b0c:	ff 90       	pop	r15
    3b0e:	ef 90       	pop	r14
    3b10:	df 90       	pop	r13
    3b12:	cf 90       	pop	r12
    3b14:	bf 90       	pop	r11
    3b16:	af 90       	pop	r10
    3b18:	9f 90       	pop	r9
    3b1a:	8f 90       	pop	r8
    3b1c:	7f 90       	pop	r7
    3b1e:	6f 90       	pop	r6
    3b20:	08 95       	ret

00003b22 <STEPPER_open>:
    3b22:	0e 94 00 27 	call	0x4e00	; 0x4e00 <__STEPPER_init>
    3b26:	81 e0       	ldi	r24, 0x01	; 1
    3b28:	80 93 b5 07 	sts	0x07B5, r24
    3b2c:	ef e7       	ldi	r30, 0x7F	; 127
    3b2e:	f7 e0       	ldi	r31, 0x07	; 7
    3b30:	11 92       	st	Z+, r1
    3b32:	11 92       	st	Z+, r1
    3b34:	11 82       	std	Z+1, r1	; 0x01
    3b36:	10 82       	st	Z, r1
    3b38:	32 96       	adiw	r30, 0x02	; 2
    3b3a:	11 82       	std	Z+1, r1	; 0x01
    3b3c:	10 82       	st	Z, r1
    3b3e:	32 96       	adiw	r30, 0x02	; 2
    3b40:	11 82       	std	Z+1, r1	; 0x01
    3b42:	10 82       	st	Z, r1
    3b44:	32 96       	adiw	r30, 0x02	; 2
    3b46:	11 82       	std	Z+1, r1	; 0x01
    3b48:	10 82       	st	Z, r1
    3b4a:	32 96       	adiw	r30, 0x02	; 2
    3b4c:	11 82       	std	Z+1, r1	; 0x01
    3b4e:	10 82       	st	Z, r1
    3b50:	32 96       	adiw	r30, 0x02	; 2
    3b52:	11 82       	std	Z+1, r1	; 0x01
    3b54:	10 82       	st	Z, r1
    3b56:	32 96       	adiw	r30, 0x02	; 2
    3b58:	11 82       	std	Z+1, r1	; 0x01
    3b5a:	10 82       	st	Z, r1
    3b5c:	32 96       	adiw	r30, 0x02	; 2
    3b5e:	11 82       	std	Z+1, r1	; 0x01
    3b60:	10 82       	st	Z, r1
    3b62:	32 96       	adiw	r30, 0x02	; 2
    3b64:	11 82       	std	Z+1, r1	; 0x01
    3b66:	10 82       	st	Z, r1
    3b68:	32 96       	adiw	r30, 0x02	; 2
    3b6a:	11 82       	std	Z+1, r1	; 0x01
    3b6c:	10 82       	st	Z, r1
    3b6e:	32 96       	adiw	r30, 0x02	; 2
    3b70:	11 82       	std	Z+1, r1	; 0x01
    3b72:	10 82       	st	Z, r1
    3b74:	32 96       	adiw	r30, 0x02	; 2
    3b76:	11 82       	std	Z+1, r1	; 0x01
    3b78:	10 82       	st	Z, r1
    3b7a:	36 96       	adiw	r30, 0x06	; 6
    3b7c:	11 92       	st	Z+, r1
    3b7e:	11 92       	st	Z+, r1
    3b80:	11 92       	st	Z+, r1
    3b82:	10 82       	st	Z, r1
    3b84:	32 96       	adiw	r30, 0x02	; 2
    3b86:	11 92       	st	Z+, r1
    3b88:	11 92       	st	Z+, r1
    3b8a:	11 92       	st	Z+, r1
    3b8c:	11 92       	st	Z+, r1
    3b8e:	11 92       	st	Z+, r1
    3b90:	11 92       	st	Z+, r1
    3b92:	11 92       	st	Z+, r1
    3b94:	11 82       	std	Z+1, r1	; 0x01
    3b96:	10 82       	st	Z, r1
    3b98:	32 96       	adiw	r30, 0x02	; 2
    3b9a:	11 82       	std	Z+1, r1	; 0x01
    3b9c:	10 82       	st	Z, r1
    3b9e:	32 96       	adiw	r30, 0x02	; 2
    3ba0:	11 82       	std	Z+1, r1	; 0x01
    3ba2:	10 82       	st	Z, r1
    3ba4:	32 96       	adiw	r30, 0x02	; 2
    3ba6:	11 82       	std	Z+1, r1	; 0x01
    3ba8:	10 82       	st	Z, r1
    3baa:	76 97       	sbiw	r30, 0x16	; 22
    3bac:	11 82       	std	Z+1, r1	; 0x01
    3bae:	10 82       	st	Z, r1
    3bb0:	32 96       	adiw	r30, 0x02	; 2
    3bb2:	11 82       	std	Z+1, r1	; 0x01
    3bb4:	10 82       	st	Z, r1
    3bb6:	10 92 b4 07 	sts	0x07B4, r1
    3bba:	10 92 b3 07 	sts	0x07B3, r1
    3bbe:	10 92 b5 07 	sts	0x07B5, r1
    3bc2:	87 e0       	ldi	r24, 0x07	; 7
    3bc4:	61 e0       	ldi	r22, 0x01	; 1
    3bc6:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    3bca:	87 e0       	ldi	r24, 0x07	; 7
    3bcc:	91 e0       	ldi	r25, 0x01	; 1
    3bce:	08 95       	ret

00003bd0 <STEPPER_run>:
    3bd0:	ef 92       	push	r14
    3bd2:	ff 92       	push	r15
    3bd4:	0f 93       	push	r16
    3bd6:	1f 93       	push	r17
    3bd8:	18 2f       	mov	r17, r24
    3bda:	06 2f       	mov	r16, r22
    3bdc:	7a 01       	movw	r14, r20
    3bde:	60 e0       	ldi	r22, 0x00	; 0
    3be0:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_set_mode>
    3be4:	81 2f       	mov	r24, r17
    3be6:	60 2f       	mov	r22, r16
    3be8:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <STEPPER_set_dir>
    3bec:	81 2f       	mov	r24, r17
    3bee:	b7 01       	movw	r22, r14
    3bf0:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <STEPPER_set_speed>
    3bf4:	1f 91       	pop	r17
    3bf6:	0f 91       	pop	r16
    3bf8:	ff 90       	pop	r15
    3bfa:	ef 90       	pop	r14
    3bfc:	08 95       	ret

00003bfe <STEPPER_set_accel>:
    3bfe:	48 2f       	mov	r20, r24
    3c00:	81 e0       	ldi	r24, 0x01	; 1
    3c02:	80 93 b5 07 	sts	0x07B5, r24
    3c06:	cb 01       	movw	r24, r22
    3c08:	23 e0       	ldi	r18, 0x03	; 3
    3c0a:	69 3e       	cpi	r22, 0xE9	; 233
    3c0c:	72 07       	cpc	r23, r18
    3c0e:	10 f0       	brcs	.+4      	; 0x3c14 <STEPPER_set_accel+0x16>
    3c10:	88 ee       	ldi	r24, 0xE8	; 232
    3c12:	93 e0       	ldi	r25, 0x03	; 3
    3c14:	41 30       	cpi	r20, 0x01	; 1
    3c16:	71 f0       	breq	.+28     	; 0x3c34 <STEPPER_set_accel+0x36>
    3c18:	41 30       	cpi	r20, 0x01	; 1
    3c1a:	18 f0       	brcs	.+6      	; 0x3c22 <STEPPER_set_accel+0x24>
    3c1c:	42 30       	cpi	r20, 0x02	; 2
    3c1e:	71 f4       	brne	.+28     	; 0x3c3c <STEPPER_set_accel+0x3e>
    3c20:	05 c0       	rjmp	.+10     	; 0x3c2c <STEPPER_set_accel+0x2e>
    3c22:	90 93 8a 07 	sts	0x078A, r25
    3c26:	80 93 89 07 	sts	0x0789, r24
    3c2a:	08 c0       	rjmp	.+16     	; 0x3c3c <STEPPER_set_accel+0x3e>
    3c2c:	90 93 8a 07 	sts	0x078A, r25
    3c30:	80 93 89 07 	sts	0x0789, r24
    3c34:	90 93 8c 07 	sts	0x078C, r25
    3c38:	80 93 8b 07 	sts	0x078B, r24
    3c3c:	10 92 b5 07 	sts	0x07B5, r1
    3c40:	08 95       	ret

00003c42 <STEPPER_set_dir>:
    3c42:	98 2f       	mov	r25, r24
    3c44:	81 e0       	ldi	r24, 0x01	; 1
    3c46:	80 93 b5 07 	sts	0x07B5, r24
    3c4a:	91 30       	cpi	r25, 0x01	; 1
    3c4c:	51 f0       	breq	.+20     	; 0x3c62 <STEPPER_set_dir+0x20>
    3c4e:	91 30       	cpi	r25, 0x01	; 1
    3c50:	18 f0       	brcs	.+6      	; 0x3c58 <STEPPER_set_dir+0x16>
    3c52:	92 30       	cpi	r25, 0x02	; 2
    3c54:	41 f4       	brne	.+16     	; 0x3c66 <STEPPER_set_dir+0x24>
    3c56:	03 c0       	rjmp	.+6      	; 0x3c5e <STEPPER_set_dir+0x1c>
    3c58:	60 93 a2 07 	sts	0x07A2, r22
    3c5c:	04 c0       	rjmp	.+8      	; 0x3c66 <STEPPER_set_dir+0x24>
    3c5e:	60 93 a2 07 	sts	0x07A2, r22
    3c62:	60 93 a3 07 	sts	0x07A3, r22
    3c66:	10 92 b5 07 	sts	0x07B5, r1
    3c6a:	08 95       	ret

00003c6c <STEPPER_set_mode>:
    3c6c:	98 2f       	mov	r25, r24
    3c6e:	81 e0       	ldi	r24, 0x01	; 1
    3c70:	80 93 b5 07 	sts	0x07B5, r24
    3c74:	91 30       	cpi	r25, 0x01	; 1
    3c76:	51 f0       	breq	.+20     	; 0x3c8c <STEPPER_set_mode+0x20>
    3c78:	91 30       	cpi	r25, 0x01	; 1
    3c7a:	18 f0       	brcs	.+6      	; 0x3c82 <STEPPER_set_mode+0x16>
    3c7c:	92 30       	cpi	r25, 0x02	; 2
    3c7e:	41 f4       	brne	.+16     	; 0x3c90 <STEPPER_set_mode+0x24>
    3c80:	03 c0       	rjmp	.+6      	; 0x3c88 <STEPPER_set_mode+0x1c>
    3c82:	60 93 7f 07 	sts	0x077F, r22
    3c86:	04 c0       	rjmp	.+8      	; 0x3c90 <STEPPER_set_mode+0x24>
    3c88:	60 93 7f 07 	sts	0x077F, r22
    3c8c:	60 93 80 07 	sts	0x0780, r22
    3c90:	10 92 b5 07 	sts	0x07B5, r1
    3c94:	08 95       	ret

00003c96 <STEPPER_set_speed>:
    3c96:	48 2f       	mov	r20, r24
    3c98:	81 e0       	ldi	r24, 0x01	; 1
    3c9a:	80 93 b5 07 	sts	0x07B5, r24
    3c9e:	cb 01       	movw	r24, r22
    3ca0:	21 e0       	ldi	r18, 0x01	; 1
    3ca2:	61 39       	cpi	r22, 0x91	; 145
    3ca4:	72 07       	cpc	r23, r18
    3ca6:	10 f0       	brcs	.+4      	; 0x3cac <STEPPER_set_speed+0x16>
    3ca8:	80 e9       	ldi	r24, 0x90	; 144
    3caa:	91 e0       	ldi	r25, 0x01	; 1
    3cac:	41 30       	cpi	r20, 0x01	; 1
    3cae:	71 f0       	breq	.+28     	; 0x3ccc <STEPPER_set_speed+0x36>
    3cb0:	41 30       	cpi	r20, 0x01	; 1
    3cb2:	18 f0       	brcs	.+6      	; 0x3cba <STEPPER_set_speed+0x24>
    3cb4:	42 30       	cpi	r20, 0x02	; 2
    3cb6:	71 f4       	brne	.+28     	; 0x3cd4 <STEPPER_set_speed+0x3e>
    3cb8:	05 c0       	rjmp	.+10     	; 0x3cc4 <STEPPER_set_speed+0x2e>
    3cba:	90 93 82 07 	sts	0x0782, r25
    3cbe:	80 93 81 07 	sts	0x0781, r24
    3cc2:	08 c0       	rjmp	.+16     	; 0x3cd4 <STEPPER_set_speed+0x3e>
    3cc4:	90 93 82 07 	sts	0x0782, r25
    3cc8:	80 93 81 07 	sts	0x0781, r24
    3ccc:	90 93 84 07 	sts	0x0784, r25
    3cd0:	80 93 83 07 	sts	0x0783, r24
    3cd4:	10 92 b5 07 	sts	0x07B5, r1
    3cd8:	08 95       	ret

00003cda <STEPPER_step>:
    3cda:	8f 92       	push	r8
    3cdc:	9f 92       	push	r9
    3cde:	af 92       	push	r10
    3ce0:	bf 92       	push	r11
    3ce2:	cf 92       	push	r12
    3ce4:	df 92       	push	r13
    3ce6:	ef 92       	push	r14
    3ce8:	ff 92       	push	r15
    3cea:	0f 93       	push	r16
    3cec:	1f 93       	push	r17
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	18 2f       	mov	r17, r24
    3cf4:	f6 2e       	mov	r15, r22
    3cf6:	5a 01       	movw	r10, r20
    3cf8:	49 01       	movw	r8, r18
    3cfa:	e6 01       	movw	r28, r12
    3cfc:	61 e0       	ldi	r22, 0x01	; 1
    3cfe:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_set_mode>
    3d02:	81 2f       	mov	r24, r17
    3d04:	b5 01       	movw	r22, r10
    3d06:	a4 01       	movw	r20, r8
    3d08:	0e 94 3a 27 	call	0x4e74	; 0x4e74 <STEPPER_setup_decels>
    3d0c:	81 2f       	mov	r24, r17
    3d0e:	6f 2d       	mov	r22, r15
    3d10:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <STEPPER_set_dir>
    3d14:	81 2f       	mov	r24, r17
    3d16:	60 2f       	mov	r22, r16
    3d18:	0e 94 25 27 	call	0x4e4a	; 0x4e4a <STEPPER_set_stop_mode>
    3d1c:	81 2f       	mov	r24, r17
    3d1e:	b5 01       	movw	r22, r10
    3d20:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <STEPPER_set_steps>
    3d24:	c1 14       	cp	r12, r1
    3d26:	d1 04       	cpc	r13, r1
    3d28:	99 f0       	breq	.+38     	; 0x3d50 <STEPPER_step+0x76>
    3d2a:	11 30       	cpi	r17, 0x01	; 1
    3d2c:	49 f0       	breq	.+18     	; 0x3d40 <STEPPER_step+0x66>
    3d2e:	11 30       	cpi	r17, 0x01	; 1
    3d30:	18 f0       	brcs	.+6      	; 0x3d38 <STEPPER_step+0x5e>
    3d32:	12 30       	cpi	r17, 0x02	; 2
    3d34:	69 f4       	brne	.+26     	; 0x3d50 <STEPPER_step+0x76>
    3d36:	06 c0       	rjmp	.+12     	; 0x3d44 <STEPPER_step+0x6a>
    3d38:	18 82       	st	Y, r1
    3d3a:	10 92 b1 07 	sts	0x07B1, r1
    3d3e:	08 c0       	rjmp	.+16     	; 0x3d50 <STEPPER_step+0x76>
    3d40:	19 82       	std	Y+1, r1	; 0x01
    3d42:	04 c0       	rjmp	.+8      	; 0x3d4c <STEPPER_step+0x72>
    3d44:	18 82       	st	Y, r1
    3d46:	19 82       	std	Y+1, r1	; 0x01
    3d48:	10 92 b1 07 	sts	0x07B1, r1
    3d4c:	10 92 b2 07 	sts	0x07B2, r1
    3d50:	d0 93 b4 07 	sts	0x07B4, r29
    3d54:	c0 93 b3 07 	sts	0x07B3, r28
    3d58:	ee 20       	and	r14, r14
    3d5a:	b9 f5       	brne	.+110    	; 0x3dca <STEPPER_step+0xf0>
    3d5c:	86 e4       	ldi	r24, 0x46	; 70
    3d5e:	94 e0       	ldi	r25, 0x04	; 4
    3d60:	90 93 b4 07 	sts	0x07B4, r25
    3d64:	80 93 b3 07 	sts	0x07B3, r24
    3d68:	81 2f       	mov	r24, r17
    3d6a:	b4 01       	movw	r22, r8
    3d6c:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <STEPPER_set_speed>
    3d70:	81 2f       	mov	r24, r17
    3d72:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <STEPPER_go>
    3d76:	11 30       	cpi	r17, 0x01	; 1
    3d78:	71 f0       	breq	.+28     	; 0x3d96 <STEPPER_step+0xbc>
    3d7a:	11 30       	cpi	r17, 0x01	; 1
    3d7c:	18 f0       	brcs	.+6      	; 0x3d84 <STEPPER_step+0xaa>
    3d7e:	12 30       	cpi	r17, 0x02	; 2
    3d80:	59 f5       	brne	.+86     	; 0x3dd8 <STEPPER_step+0xfe>
    3d82:	12 c0       	rjmp	.+36     	; 0x3da8 <STEPPER_step+0xce>
    3d84:	10 92 46 04 	sts	0x0446, r1
    3d88:	10 92 b1 07 	sts	0x07B1, r1
    3d8c:	80 91 46 04 	lds	r24, 0x0446
    3d90:	88 23       	and	r24, r24
    3d92:	e1 f3       	breq	.-8      	; 0x3d8c <STEPPER_step+0xb2>
    3d94:	21 c0       	rjmp	.+66     	; 0x3dd8 <STEPPER_step+0xfe>
    3d96:	10 92 47 04 	sts	0x0447, r1
    3d9a:	10 92 b2 07 	sts	0x07B2, r1
    3d9e:	80 91 47 04 	lds	r24, 0x0447
    3da2:	88 23       	and	r24, r24
    3da4:	e1 f3       	breq	.-8      	; 0x3d9e <STEPPER_step+0xc4>
    3da6:	18 c0       	rjmp	.+48     	; 0x3dd8 <STEPPER_step+0xfe>
    3da8:	10 92 46 04 	sts	0x0446, r1
    3dac:	10 92 47 04 	sts	0x0447, r1
    3db0:	10 92 b1 07 	sts	0x07B1, r1
    3db4:	10 92 b2 07 	sts	0x07B2, r1
    3db8:	80 91 46 04 	lds	r24, 0x0446
    3dbc:	88 23       	and	r24, r24
    3dbe:	e1 f3       	breq	.-8      	; 0x3db8 <STEPPER_step+0xde>
    3dc0:	80 91 47 04 	lds	r24, 0x0447
    3dc4:	88 23       	and	r24, r24
    3dc6:	c1 f3       	breq	.-16     	; 0x3db8 <STEPPER_step+0xde>
    3dc8:	07 c0       	rjmp	.+14     	; 0x3dd8 <STEPPER_step+0xfe>
    3dca:	81 2f       	mov	r24, r17
    3dcc:	b4 01       	movw	r22, r8
    3dce:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <STEPPER_set_speed>
    3dd2:	81 2f       	mov	r24, r17
    3dd4:	0e 94 eb 26 	call	0x4dd6	; 0x4dd6 <STEPPER_go>
    3dd8:	df 91       	pop	r29
    3dda:	cf 91       	pop	r28
    3ddc:	1f 91       	pop	r17
    3dde:	0f 91       	pop	r16
    3de0:	ff 90       	pop	r15
    3de2:	ef 90       	pop	r14
    3de4:	df 90       	pop	r13
    3de6:	cf 90       	pop	r12
    3de8:	bf 90       	pop	r11
    3dea:	af 90       	pop	r10
    3dec:	9f 90       	pop	r9
    3dee:	8f 90       	pop	r8
    3df0:	08 95       	ret

00003df2 <STEPPER_stop>:
    3df2:	0f 93       	push	r16
    3df4:	1f 93       	push	r17
    3df6:	18 2f       	mov	r17, r24
    3df8:	06 2f       	mov	r16, r22
    3dfa:	66 23       	and	r22, r22
    3dfc:	49 f4       	brne	.+18     	; 0x3e10 <STEPPER_stop+0x1e>
    3dfe:	60 e0       	ldi	r22, 0x00	; 0
    3e00:	70 e0       	ldi	r23, 0x00	; 0
    3e02:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <STEPPER_set_speed>
    3e06:	81 2f       	mov	r24, r17
    3e08:	60 e0       	ldi	r22, 0x00	; 0
    3e0a:	70 e0       	ldi	r23, 0x00	; 0
    3e0c:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <STEPPER_set_steps>
    3e10:	81 e0       	ldi	r24, 0x01	; 1
    3e12:	80 93 b5 07 	sts	0x07B5, r24
    3e16:	11 30       	cpi	r17, 0x01	; 1
    3e18:	51 f0       	breq	.+20     	; 0x3e2e <STEPPER_stop+0x3c>
    3e1a:	11 30       	cpi	r17, 0x01	; 1
    3e1c:	18 f0       	brcs	.+6      	; 0x3e24 <STEPPER_stop+0x32>
    3e1e:	12 30       	cpi	r17, 0x02	; 2
    3e20:	41 f4       	brne	.+16     	; 0x3e32 <STEPPER_stop+0x40>
    3e22:	03 c0       	rjmp	.+6      	; 0x3e2a <STEPPER_stop+0x38>
    3e24:	00 93 9d 07 	sts	0x079D, r16
    3e28:	04 c0       	rjmp	.+8      	; 0x3e32 <STEPPER_stop+0x40>
    3e2a:	00 93 9d 07 	sts	0x079D, r16
    3e2e:	00 93 9e 07 	sts	0x079E, r16
    3e32:	10 92 b5 07 	sts	0x07B5, r1
    3e36:	1f 91       	pop	r17
    3e38:	0f 91       	pop	r16
    3e3a:	08 95       	ret

00003e3c <STEPPER_wait_and_then>:
    3e3c:	cf 92       	push	r12
    3e3e:	df 92       	push	r13
    3e40:	ef 92       	push	r14
    3e42:	ff 92       	push	r15
    3e44:	0f 93       	push	r16
    3e46:	1f 93       	push	r17
    3e48:	df 93       	push	r29
    3e4a:	cf 93       	push	r28
    3e4c:	cd b7       	in	r28, 0x3d	; 61
    3e4e:	de b7       	in	r29, 0x3e	; 62
    3e50:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e52:	81 30       	cpi	r24, 0x01	; 1
    3e54:	61 f0       	breq	.+24     	; 0x3e6e <STEPPER_wait_and_then+0x32>
    3e56:	81 30       	cpi	r24, 0x01	; 1
    3e58:	18 f0       	brcs	.+6      	; 0x3e60 <STEPPER_wait_and_then+0x24>
    3e5a:	82 30       	cpi	r24, 0x02	; 2
    3e5c:	a1 f5       	brne	.+104    	; 0x3ec6 <STEPPER_wait_and_then+0x8a>
    3e5e:	11 c0       	rjmp	.+34     	; 0x3e82 <STEPPER_wait_and_then+0x46>
    3e60:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e62:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e64:	80 91 b6 07 	lds	r24, 0x07B6
    3e68:	88 23       	and	r24, r24
    3e6a:	e1 f3       	breq	.-8      	; 0x3e64 <STEPPER_wait_and_then+0x28>
    3e6c:	06 c0       	rjmp	.+12     	; 0x3e7a <STEPPER_wait_and_then+0x3e>
    3e6e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3e70:	fd 85       	ldd	r31, Y+13	; 0x0d
    3e72:	80 91 b7 07 	lds	r24, 0x07B7
    3e76:	88 23       	and	r24, r24
    3e78:	e1 f3       	breq	.-8      	; 0x3e72 <STEPPER_wait_and_then+0x36>
    3e7a:	30 97       	sbiw	r30, 0x00	; 0
    3e7c:	21 f1       	breq	.+72     	; 0x3ec6 <STEPPER_wait_and_then+0x8a>
    3e7e:	09 95       	icall
    3e80:	22 c0       	rjmp	.+68     	; 0x3ec6 <STEPPER_wait_and_then+0x8a>
    3e82:	cc 84       	ldd	r12, Y+12	; 0x0c
    3e84:	dd 84       	ldd	r13, Y+13	; 0x0d
    3e86:	ee 84       	ldd	r14, Y+14	; 0x0e
    3e88:	ff 84       	ldd	r15, Y+15	; 0x0f
    3e8a:	00 e0       	ldi	r16, 0x00	; 0
    3e8c:	10 e0       	ldi	r17, 0x00	; 0
    3e8e:	00 23       	and	r16, r16
    3e90:	51 f4       	brne	.+20     	; 0x3ea6 <STEPPER_wait_and_then+0x6a>
    3e92:	80 91 b6 07 	lds	r24, 0x07B6
    3e96:	88 23       	and	r24, r24
    3e98:	31 f0       	breq	.+12     	; 0x3ea6 <STEPPER_wait_and_then+0x6a>
    3e9a:	c1 14       	cp	r12, r1
    3e9c:	d1 04       	cpc	r13, r1
    3e9e:	11 f0       	breq	.+4      	; 0x3ea4 <STEPPER_wait_and_then+0x68>
    3ea0:	f6 01       	movw	r30, r12
    3ea2:	09 95       	icall
    3ea4:	01 e0       	ldi	r16, 0x01	; 1
    3ea6:	11 23       	and	r17, r17
    3ea8:	51 f4       	brne	.+20     	; 0x3ebe <STEPPER_wait_and_then+0x82>
    3eaa:	80 91 b7 07 	lds	r24, 0x07B7
    3eae:	88 23       	and	r24, r24
    3eb0:	31 f0       	breq	.+12     	; 0x3ebe <STEPPER_wait_and_then+0x82>
    3eb2:	e1 14       	cp	r14, r1
    3eb4:	f1 04       	cpc	r15, r1
    3eb6:	11 f0       	breq	.+4      	; 0x3ebc <STEPPER_wait_and_then+0x80>
    3eb8:	f7 01       	movw	r30, r14
    3eba:	09 95       	icall
    3ebc:	11 e0       	ldi	r17, 0x01	; 1
    3ebe:	00 23       	and	r16, r16
    3ec0:	31 f3       	breq	.-52     	; 0x3e8e <STEPPER_wait_and_then+0x52>
    3ec2:	11 23       	and	r17, r17
    3ec4:	21 f3       	breq	.-56     	; 0x3e8e <STEPPER_wait_and_then+0x52>
    3ec6:	cf 91       	pop	r28
    3ec8:	df 91       	pop	r29
    3eca:	1f 91       	pop	r17
    3ecc:	0f 91       	pop	r16
    3ece:	ff 90       	pop	r15
    3ed0:	ef 90       	pop	r14
    3ed2:	df 90       	pop	r13
    3ed4:	cf 90       	pop	r12
    3ed6:	08 95       	ret

00003ed8 <SYS_get_state>:
    3ed8:	e8 2f       	mov	r30, r24
    3eda:	f0 e0       	ldi	r31, 0x00	; 0
    3edc:	e3 31       	cpi	r30, 0x13	; 19
    3ede:	f1 05       	cpc	r31, r1
    3ee0:	40 f4       	brcc	.+16     	; 0x3ef2 <SYS_get_state+0x1a>
    3ee2:	e2 5c       	subi	r30, 0xC2	; 194
    3ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee6:	ee 0f       	add	r30, r30
    3ee8:	ff 1f       	adc	r31, r31
    3eea:	05 90       	lpm	r0, Z+
    3eec:	f4 91       	lpm	r31, Z+
    3eee:	e0 2d       	mov	r30, r0
    3ef0:	09 94       	ijmp
    3ef2:	80 e0       	ldi	r24, 0x00	; 0
    3ef4:	08 95       	ret
    3ef6:	80 91 b8 07 	lds	r24, 0x07B8
    3efa:	08 95       	ret
    3efc:	80 91 b9 07 	lds	r24, 0x07B9
    3f00:	08 95       	ret
    3f02:	80 91 ba 07 	lds	r24, 0x07BA
    3f06:	08 95       	ret
    3f08:	80 91 bb 07 	lds	r24, 0x07BB
    3f0c:	08 95       	ret
    3f0e:	80 91 bc 07 	lds	r24, 0x07BC
    3f12:	08 95       	ret
    3f14:	80 91 be 07 	lds	r24, 0x07BE
    3f18:	08 95       	ret
    3f1a:	80 91 bd 07 	lds	r24, 0x07BD
    3f1e:	08 95       	ret
    3f20:	80 91 bf 07 	lds	r24, 0x07BF
    3f24:	08 95       	ret
    3f26:	80 91 c0 07 	lds	r24, 0x07C0
    3f2a:	08 95       	ret
    3f2c:	80 91 c1 07 	lds	r24, 0x07C1
    3f30:	08 95       	ret
    3f32:	80 91 c2 07 	lds	r24, 0x07C2
    3f36:	08 95       	ret
    3f38:	80 91 c3 07 	lds	r24, 0x07C3
    3f3c:	08 95       	ret
    3f3e:	80 91 c4 07 	lds	r24, 0x07C4
    3f42:	08 95       	ret
    3f44:	80 91 c5 07 	lds	r24, 0x07C5
    3f48:	08 95       	ret
    3f4a:	80 91 c6 07 	lds	r24, 0x07C6
    3f4e:	08 95       	ret
    3f50:	80 91 c7 07 	lds	r24, 0x07C7
    3f54:	08 95       	ret
    3f56:	80 91 c8 07 	lds	r24, 0x07C8
    3f5a:	08 95       	ret
    3f5c:	80 91 c9 07 	lds	r24, 0x07C9
    3f60:	08 95       	ret
    3f62:	80 91 ca 07 	lds	r24, 0x07CA
    3f66:	08 95       	ret

00003f68 <SYS_set_state>:
    3f68:	e8 2f       	mov	r30, r24
    3f6a:	f0 e0       	ldi	r31, 0x00	; 0
    3f6c:	e3 31       	cpi	r30, 0x13	; 19
    3f6e:	f1 05       	cpc	r31, r1
    3f70:	08 f0       	brcs	.+2      	; 0x3f74 <SYS_set_state+0xc>
    3f72:	40 c0       	rjmp	.+128    	; 0x3ff4 <SYS_set_state+0x8c>
    3f74:	ef 5a       	subi	r30, 0xAF	; 175
    3f76:	ff 4f       	sbci	r31, 0xFF	; 255
    3f78:	ee 0f       	add	r30, r30
    3f7a:	ff 1f       	adc	r31, r31
    3f7c:	05 90       	lpm	r0, Z+
    3f7e:	f4 91       	lpm	r31, Z+
    3f80:	e0 2d       	mov	r30, r0
    3f82:	09 94       	ijmp
    3f84:	60 93 b8 07 	sts	0x07B8, r22
    3f88:	08 95       	ret
    3f8a:	60 93 b9 07 	sts	0x07B9, r22
    3f8e:	08 95       	ret
    3f90:	60 93 ba 07 	sts	0x07BA, r22
    3f94:	08 95       	ret
    3f96:	60 93 bb 07 	sts	0x07BB, r22
    3f9a:	08 95       	ret
    3f9c:	60 93 bc 07 	sts	0x07BC, r22
    3fa0:	08 95       	ret
    3fa2:	60 93 be 07 	sts	0x07BE, r22
    3fa6:	08 95       	ret
    3fa8:	60 93 bd 07 	sts	0x07BD, r22
    3fac:	08 95       	ret
    3fae:	60 93 bf 07 	sts	0x07BF, r22
    3fb2:	08 95       	ret
    3fb4:	60 93 c0 07 	sts	0x07C0, r22
    3fb8:	08 95       	ret
    3fba:	60 93 c1 07 	sts	0x07C1, r22
    3fbe:	08 95       	ret
    3fc0:	60 93 c2 07 	sts	0x07C2, r22
    3fc4:	08 95       	ret
    3fc6:	60 93 c3 07 	sts	0x07C3, r22
    3fca:	08 95       	ret
    3fcc:	60 93 c4 07 	sts	0x07C4, r22
    3fd0:	08 95       	ret
    3fd2:	60 93 c5 07 	sts	0x07C5, r22
    3fd6:	08 95       	ret
    3fd8:	60 93 c6 07 	sts	0x07C6, r22
    3fdc:	08 95       	ret
    3fde:	60 93 c7 07 	sts	0x07C7, r22
    3fe2:	08 95       	ret
    3fe4:	60 93 c8 07 	sts	0x07C8, r22
    3fe8:	08 95       	ret
    3fea:	60 93 c9 07 	sts	0x07C9, r22
    3fee:	08 95       	ret
    3ff0:	60 93 c8 07 	sts	0x07C8, r22
    3ff4:	08 95       	ret

00003ff6 <ATTINY_get_sensors>:
    3ff6:	0f 93       	push	r16
    3ff8:	1f 93       	push	r17
    3ffa:	81 e0       	ldi	r24, 0x01	; 1
    3ffc:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    4000:	81 30       	cpi	r24, 0x01	; 1
    4002:	11 f0       	breq	.+4      	; 0x4008 <ATTINY_get_sensors+0x12>
    4004:	00 e0       	ldi	r16, 0x00	; 0
    4006:	24 c0       	rjmp	.+72     	; 0x4050 <ATTINY_get_sensors+0x5a>
    4008:	87 e0       	ldi	r24, 0x07	; 7
    400a:	0e 94 24 1b 	call	0x3648	; 0x3648 <SPI_set_slave_addr>
    400e:	82 e0       	ldi	r24, 0x02	; 2
    4010:	6a e0       	ldi	r22, 0x0A	; 10
    4012:	0e 94 75 1b 	call	0x36ea	; 0x36ea <SPI_transmit>
    4016:	82 e0       	ldi	r24, 0x02	; 2
    4018:	62 eb       	ldi	r22, 0xB2	; 178
    401a:	0e 94 75 1b 	call	0x36ea	; 0x36ea <SPI_transmit>
    401e:	18 ec       	ldi	r17, 0xC8	; 200
    4020:	81 2f       	mov	r24, r17
    4022:	8a 95       	dec	r24
    4024:	f1 f7       	brne	.-4      	; 0x4022 <ATTINY_get_sensors+0x2c>
    4026:	82 e0       	ldi	r24, 0x02	; 2
    4028:	60 e0       	ldi	r22, 0x00	; 0
    402a:	0e 94 d6 25 	call	0x4bac	; 0x4bac <SPI_receive>
    402e:	08 2f       	mov	r16, r24
    4030:	81 2f       	mov	r24, r17
    4032:	8a 95       	dec	r24
    4034:	f1 f7       	brne	.-4      	; 0x4032 <ATTINY_get_sensors+0x3c>
    4036:	82 e0       	ldi	r24, 0x02	; 2
    4038:	60 e0       	ldi	r22, 0x00	; 0
    403a:	0e 94 d6 25 	call	0x4bac	; 0x4bac <SPI_receive>
    403e:	1a 95       	dec	r17
    4040:	f1 f7       	brne	.-4      	; 0x403e <ATTINY_get_sensors+0x48>
    4042:	87 e0       	ldi	r24, 0x07	; 7
    4044:	0e 94 24 1b 	call	0x3648	; 0x3648 <SPI_set_slave_addr>
    4048:	88 e8       	ldi	r24, 0x88	; 136
    404a:	93 e1       	ldi	r25, 0x13	; 19
    404c:	01 97       	sbiw	r24, 0x01	; 1
    404e:	f1 f7       	brne	.-4      	; 0x404c <ATTINY_get_sensors+0x56>
    4050:	80 2f       	mov	r24, r16
    4052:	1f 91       	pop	r17
    4054:	0f 91       	pop	r16
    4056:	08 95       	ret

00004058 <ATTINY_get_SW_state>:
    4058:	1f 93       	push	r17
    405a:	cf 93       	push	r28
    405c:	df 93       	push	r29
    405e:	18 2f       	mov	r17, r24
    4060:	80 91 49 04 	lds	r24, 0x0449
    4064:	88 23       	and	r24, r24
    4066:	41 f0       	breq	.+16     	; 0x4078 <ATTINY_get_SW_state+0x20>
    4068:	80 91 53 04 	lds	r24, 0x0453
    406c:	88 23       	and	r24, r24
    406e:	99 f0       	breq	.+38     	; 0x4096 <ATTINY_get_SW_state+0x3e>
    4070:	10 92 49 04 	sts	0x0449, r1
    4074:	10 92 53 04 	sts	0x0453, r1
    4078:	0e 94 fb 1f 	call	0x3ff6	; 0x3ff6 <ATTINY_get_sensors>
    407c:	80 93 48 04 	sts	0x0448, r24
    4080:	8d e4       	ldi	r24, 0x4D	; 77
    4082:	94 e0       	ldi	r25, 0x04	; 4
    4084:	61 e0       	ldi	r22, 0x01	; 1
    4086:	40 e0       	ldi	r20, 0x00	; 0
    4088:	22 e3       	ldi	r18, 0x32	; 50
    408a:	30 e0       	ldi	r19, 0x00	; 0
    408c:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <TMRSRVC_new>
    4090:	81 e0       	ldi	r24, 0x01	; 1
    4092:	80 93 49 04 	sts	0x0449, r24
    4096:	90 91 48 04 	lds	r25, 0x0448
    409a:	a1 2f       	mov	r26, r17
    409c:	b0 e0       	ldi	r27, 0x00	; 0
    409e:	ed 01       	movw	r28, r26
    40a0:	c1 51       	subi	r28, 0x11	; 17
    40a2:	dc 4f       	sbci	r29, 0xFC	; 252
    40a4:	88 81       	ld	r24, Y
    40a6:	88 23       	and	r24, r24
    40a8:	69 f0       	breq	.+26     	; 0x40c4 <ATTINY_get_SW_state+0x6c>
    40aa:	fd 01       	movw	r30, r26
    40ac:	ee 50       	subi	r30, 0x0E	; 14
    40ae:	fc 4f       	sbci	r31, 0xFC	; 252
    40b0:	80 81       	ld	r24, Z
    40b2:	98 23       	and	r25, r24
    40b4:	c1 f0       	breq	.+48     	; 0x40e6 <ATTINY_get_SW_state+0x8e>
    40b6:	fd 01       	movw	r30, r26
    40b8:	e6 5b       	subi	r30, 0xB6	; 182
    40ba:	fb 4f       	sbci	r31, 0xFB	; 251
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	80 83       	st	Z, r24
    40c0:	18 82       	st	Y, r1
    40c2:	11 c0       	rjmp	.+34     	; 0x40e6 <ATTINY_get_SW_state+0x8e>
    40c4:	fd 01       	movw	r30, r26
    40c6:	e6 5b       	subi	r30, 0xB6	; 182
    40c8:	fb 4f       	sbci	r31, 0xFB	; 251
    40ca:	80 81       	ld	r24, Z
    40cc:	81 11       	cpse	r24, r1
    40ce:	10 82       	st	Z, r1
    40d0:	fd 01       	movw	r30, r26
    40d2:	ee 50       	subi	r30, 0x0E	; 14
    40d4:	fc 4f       	sbci	r31, 0xFC	; 252
    40d6:	80 81       	ld	r24, Z
    40d8:	98 23       	and	r25, r24
    40da:	29 f4       	brne	.+10     	; 0x40e6 <ATTINY_get_SW_state+0x8e>
    40dc:	fd 01       	movw	r30, r26
    40de:	e1 51       	subi	r30, 0x11	; 17
    40e0:	fc 4f       	sbci	r31, 0xFC	; 252
    40e2:	81 e0       	ldi	r24, 0x01	; 1
    40e4:	80 83       	st	Z, r24
    40e6:	a6 5b       	subi	r26, 0xB6	; 182
    40e8:	bb 4f       	sbci	r27, 0xFB	; 251
    40ea:	8c 91       	ld	r24, X
    40ec:	df 91       	pop	r29
    40ee:	cf 91       	pop	r28
    40f0:	1f 91       	pop	r17
    40f2:	08 95       	ret

000040f4 <ATTINY_open>:
    40f4:	82 e0       	ldi	r24, 0x02	; 2
    40f6:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    40fa:	88 23       	and	r24, r24
    40fc:	19 f4       	brne	.+6      	; 0x4104 <ATTINY_open+0x10>
    40fe:	90 e0       	ldi	r25, 0x00	; 0
    4100:	82 e0       	ldi	r24, 0x02	; 2
    4102:	08 95       	ret
    4104:	10 92 e6 07 	sts	0x07E6, r1
    4108:	10 92 e5 07 	sts	0x07E5, r1
    410c:	10 92 e8 07 	sts	0x07E8, r1
    4110:	10 92 e7 07 	sts	0x07E7, r1
    4114:	10 92 ea 07 	sts	0x07EA, r1
    4118:	10 92 e9 07 	sts	0x07E9, r1
    411c:	10 92 ec 07 	sts	0x07EC, r1
    4120:	10 92 eb 07 	sts	0x07EB, r1
    4124:	10 92 ee 07 	sts	0x07EE, r1
    4128:	10 92 ed 07 	sts	0x07ED, r1
    412c:	80 e9       	ldi	r24, 0x90	; 144
    412e:	91 e0       	ldi	r25, 0x01	; 1
    4130:	90 93 d2 07 	sts	0x07D2, r25
    4134:	80 93 d1 07 	sts	0x07D1, r24
    4138:	90 93 d4 07 	sts	0x07D4, r25
    413c:	80 93 d3 07 	sts	0x07D3, r24
    4140:	90 93 d6 07 	sts	0x07D6, r25
    4144:	80 93 d5 07 	sts	0x07D5, r24
    4148:	90 93 d8 07 	sts	0x07D8, r25
    414c:	80 93 d7 07 	sts	0x07D7, r24
    4150:	90 93 da 07 	sts	0x07DA, r25
    4154:	80 93 d9 07 	sts	0x07D9, r24
    4158:	84 e3       	ldi	r24, 0x34	; 52
    415a:	98 e0       	ldi	r25, 0x08	; 8
    415c:	90 93 dc 07 	sts	0x07DC, r25
    4160:	80 93 db 07 	sts	0x07DB, r24
    4164:	90 93 de 07 	sts	0x07DE, r25
    4168:	80 93 dd 07 	sts	0x07DD, r24
    416c:	90 93 e0 07 	sts	0x07E0, r25
    4170:	80 93 df 07 	sts	0x07DF, r24
    4174:	90 93 e2 07 	sts	0x07E2, r25
    4178:	80 93 e1 07 	sts	0x07E1, r24
    417c:	90 93 e4 07 	sts	0x07E4, r25
    4180:	80 93 e3 07 	sts	0x07E3, r24
    4184:	81 e0       	ldi	r24, 0x01	; 1
    4186:	61 e0       	ldi	r22, 0x01	; 1
    4188:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    418c:	91 e0       	ldi	r25, 0x01	; 1
    418e:	81 e0       	ldi	r24, 0x01	; 1
    4190:	08 95       	ret

00004192 <TMRSRVC_delay>:
    4192:	df 93       	push	r29
    4194:	cf 93       	push	r28
    4196:	cd b7       	in	r28, 0x3d	; 61
    4198:	de b7       	in	r29, 0x3e	; 62
    419a:	29 97       	sbiw	r28, 0x09	; 9
    419c:	0f b6       	in	r0, 0x3f	; 63
    419e:	f8 94       	cli
    41a0:	de bf       	out	0x3e, r29	; 62
    41a2:	0f be       	out	0x3f, r0	; 63
    41a4:	cd bf       	out	0x3d, r28	; 61
    41a6:	9c 01       	movw	r18, r24
    41a8:	ce 01       	movw	r24, r28
    41aa:	01 96       	adiw	r24, 0x01	; 1
    41ac:	61 e0       	ldi	r22, 0x01	; 1
    41ae:	40 e0       	ldi	r20, 0x00	; 0
    41b0:	0e 94 ea 20 	call	0x41d4	; 0x41d4 <TMRSRVC_new>
    41b4:	98 2f       	mov	r25, r24
    41b6:	88 23       	and	r24, r24
    41b8:	19 f4       	brne	.+6      	; 0x41c0 <TMRSRVC_delay+0x2e>
    41ba:	8f 81       	ldd	r24, Y+7	; 0x07
    41bc:	88 23       	and	r24, r24
    41be:	e9 f3       	breq	.-6      	; 0x41ba <TMRSRVC_delay+0x28>
    41c0:	89 2f       	mov	r24, r25
    41c2:	29 96       	adiw	r28, 0x09	; 9
    41c4:	0f b6       	in	r0, 0x3f	; 63
    41c6:	f8 94       	cli
    41c8:	de bf       	out	0x3e, r29	; 62
    41ca:	0f be       	out	0x3f, r0	; 63
    41cc:	cd bf       	out	0x3d, r28	; 61
    41ce:	cf 91       	pop	r28
    41d0:	df 91       	pop	r29
    41d2:	08 95       	ret

000041d4 <TMRSRVC_new>:
    41d4:	ef 92       	push	r14
    41d6:	ff 92       	push	r15
    41d8:	0f 93       	push	r16
    41da:	1f 93       	push	r17
    41dc:	cf 93       	push	r28
    41de:	df 93       	push	r29
    41e0:	ec 01       	movw	r28, r24
    41e2:	f6 2e       	mov	r15, r22
    41e4:	e4 2e       	mov	r14, r20
    41e6:	89 01       	movw	r16, r18
    41e8:	88 e0       	ldi	r24, 0x08	; 8
    41ea:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    41ee:	81 30       	cpi	r24, 0x01	; 1
    41f0:	11 f0       	breq	.+4      	; 0x41f6 <TMRSRVC_new+0x22>
    41f2:	81 e0       	ldi	r24, 0x01	; 1
    41f4:	26 c0       	rjmp	.+76     	; 0x4242 <TMRSRVC_new+0x6e>
    41f6:	84 e0       	ldi	r24, 0x04	; 4
    41f8:	90 e0       	ldi	r25, 0x00	; 0
    41fa:	0e 94 81 34 	call	0x6902	; 0x6902 <malloc>
    41fe:	fc 01       	movw	r30, r24
    4200:	00 97       	sbiw	r24, 0x00	; 0
    4202:	11 f4       	brne	.+4      	; 0x4208 <TMRSRVC_new+0x34>
    4204:	82 e0       	ldi	r24, 0x02	; 2
    4206:	1d c0       	rjmp	.+58     	; 0x4242 <TMRSRVC_new+0x6e>
    4208:	f9 82       	std	Y+1, r15	; 0x01
    420a:	f0 fc       	sbrc	r15, 0
    420c:	1e 82       	std	Y+6, r1	; 0x06
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	e8 16       	cp	r14, r24
    4212:	19 f4       	brne	.+6      	; 0x421a <TMRSRVC_new+0x46>
    4214:	89 81       	ldd	r24, Y+1	; 0x01
    4216:	84 60       	ori	r24, 0x04	; 4
    4218:	89 83       	std	Y+1, r24	; 0x01
    421a:	89 81       	ldd	r24, Y+1	; 0x01
    421c:	88 60       	ori	r24, 0x08	; 8
    421e:	89 83       	std	Y+1, r24	; 0x01
    4220:	1b 83       	std	Y+3, r17	; 0x03
    4222:	0a 83       	std	Y+2, r16	; 0x02
    4224:	1d 83       	std	Y+5, r17	; 0x05
    4226:	0c 83       	std	Y+4, r16	; 0x04
    4228:	d1 83       	std	Z+1, r29	; 0x01
    422a:	c0 83       	st	Z, r28
    422c:	13 82       	std	Z+3, r1	; 0x03
    422e:	12 82       	std	Z+2, r1	; 0x02
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	80 93 b6 04 	sts	0x04B6, r24
    4236:	cf 01       	movw	r24, r30
    4238:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <TMRSRVC_insert>
    423c:	10 92 b6 04 	sts	0x04B6, r1
    4240:	80 e0       	ldi	r24, 0x00	; 0
    4242:	df 91       	pop	r29
    4244:	cf 91       	pop	r28
    4246:	1f 91       	pop	r17
    4248:	0f 91       	pop	r16
    424a:	ff 90       	pop	r15
    424c:	ef 90       	pop	r14
    424e:	08 95       	ret

00004250 <I2C_MSTR_get>:
    4250:	fc 01       	movw	r30, r24
    4252:	80 91 f2 07 	lds	r24, 0x07F2
    4256:	81 30       	cpi	r24, 0x01	; 1
    4258:	11 f0       	breq	.+4      	; 0x425e <I2C_MSTR_get+0xe>
    425a:	85 e0       	ldi	r24, 0x05	; 5
    425c:	08 95       	ret
    425e:	80 91 f3 07 	lds	r24, 0x07F3
    4262:	81 30       	cpi	r24, 0x01	; 1
    4264:	11 f0       	breq	.+4      	; 0x426a <I2C_MSTR_get+0x1a>
    4266:	8a e0       	ldi	r24, 0x0A	; 10
    4268:	08 95       	ret
    426a:	61 30       	cpi	r22, 0x01	; 1
    426c:	11 f4       	brne	.+4      	; 0x4272 <I2C_MSTR_get+0x22>
    426e:	84 ec       	ldi	r24, 0xC4	; 196
    4270:	01 c0       	rjmp	.+2      	; 0x4274 <I2C_MSTR_get+0x24>
    4272:	84 e8       	ldi	r24, 0x84	; 132
    4274:	80 93 bc 00 	sts	0x00BC, r24
    4278:	80 91 bc 00 	lds	r24, 0x00BC
    427c:	87 ff       	sbrs	r24, 7
    427e:	fc cf       	rjmp	.-8      	; 0x4278 <I2C_MSTR_get+0x28>
    4280:	61 30       	cpi	r22, 0x01	; 1
    4282:	31 f4       	brne	.+12     	; 0x4290 <I2C_MSTR_get+0x40>
    4284:	80 91 b9 00 	lds	r24, 0x00B9
    4288:	88 7f       	andi	r24, 0xF8	; 248
    428a:	80 35       	cpi	r24, 0x50	; 80
    428c:	59 f4       	brne	.+22     	; 0x42a4 <I2C_MSTR_get+0x54>
    428e:	05 c0       	rjmp	.+10     	; 0x429a <I2C_MSTR_get+0x4a>
    4290:	80 91 b9 00 	lds	r24, 0x00B9
    4294:	88 7f       	andi	r24, 0xF8	; 248
    4296:	88 35       	cpi	r24, 0x58	; 88
    4298:	29 f4       	brne	.+10     	; 0x42a4 <I2C_MSTR_get+0x54>
    429a:	80 91 bb 00 	lds	r24, 0x00BB
    429e:	80 83       	st	Z, r24
    42a0:	80 e0       	ldi	r24, 0x00	; 0
    42a2:	08 95       	ret
    42a4:	82 e0       	ldi	r24, 0x02	; 2
    42a6:	08 95       	ret

000042a8 <I2C_MSTR_send>:
    42a8:	98 2f       	mov	r25, r24
    42aa:	80 91 f2 07 	lds	r24, 0x07F2
    42ae:	81 30       	cpi	r24, 0x01	; 1
    42b0:	11 f0       	breq	.+4      	; 0x42b6 <I2C_MSTR_send+0xe>
    42b2:	85 e0       	ldi	r24, 0x05	; 5
    42b4:	08 95       	ret
    42b6:	80 91 f3 07 	lds	r24, 0x07F3
    42ba:	81 30       	cpi	r24, 0x01	; 1
    42bc:	11 f0       	breq	.+4      	; 0x42c2 <I2C_MSTR_send+0x1a>
    42be:	8a e0       	ldi	r24, 0x0A	; 10
    42c0:	08 95       	ret
    42c2:	90 93 bb 00 	sts	0x00BB, r25
    42c6:	84 e8       	ldi	r24, 0x84	; 132
    42c8:	80 93 bc 00 	sts	0x00BC, r24
    42cc:	80 91 bc 00 	lds	r24, 0x00BC
    42d0:	87 ff       	sbrs	r24, 7
    42d2:	fc cf       	rjmp	.-8      	; 0x42cc <I2C_MSTR_send+0x24>
    42d4:	80 91 b9 00 	lds	r24, 0x00B9
    42d8:	90 e0       	ldi	r25, 0x00	; 0
    42da:	88 7f       	andi	r24, 0xF8	; 248
    42dc:	90 70       	andi	r25, 0x00	; 0
    42de:	88 32       	cpi	r24, 0x28	; 40
    42e0:	91 05       	cpc	r25, r1
    42e2:	21 f0       	breq	.+8      	; 0x42ec <I2C_MSTR_send+0x44>
    42e4:	c0 97       	sbiw	r24, 0x30	; 48
    42e6:	21 f4       	brne	.+8      	; 0x42f0 <I2C_MSTR_send+0x48>
    42e8:	83 e0       	ldi	r24, 0x03	; 3
    42ea:	08 95       	ret
    42ec:	80 e0       	ldi	r24, 0x00	; 0
    42ee:	08 95       	ret
    42f0:	8c e0       	ldi	r24, 0x0C	; 12
    42f2:	08 95       	ret

000042f4 <I2C_MSTR_start>:
    42f4:	98 2f       	mov	r25, r24
    42f6:	20 91 f2 07 	lds	r18, 0x07F2
    42fa:	21 30       	cpi	r18, 0x01	; 1
    42fc:	11 f0       	breq	.+4      	; 0x4302 <I2C_MSTR_start+0xe>
    42fe:	85 e0       	ldi	r24, 0x05	; 5
    4300:	08 95       	ret
    4302:	80 91 f4 07 	lds	r24, 0x07F4
    4306:	81 30       	cpi	r24, 0x01	; 1
    4308:	11 f4       	brne	.+4      	; 0x430e <I2C_MSTR_start+0x1a>
    430a:	89 e0       	ldi	r24, 0x09	; 9
    430c:	08 95       	ret
    430e:	20 93 f3 07 	sts	0x07F3, r18
    4312:	84 ea       	ldi	r24, 0xA4	; 164
    4314:	80 93 bc 00 	sts	0x00BC, r24
    4318:	80 91 bc 00 	lds	r24, 0x00BC
    431c:	87 ff       	sbrs	r24, 7
    431e:	fc cf       	rjmp	.-8      	; 0x4318 <I2C_MSTR_start+0x24>
    4320:	80 91 b9 00 	lds	r24, 0x00B9
    4324:	88 7f       	andi	r24, 0xF8	; 248
    4326:	88 30       	cpi	r24, 0x08	; 8
    4328:	39 f0       	breq	.+14     	; 0x4338 <I2C_MSTR_start+0x44>
    432a:	80 91 b9 00 	lds	r24, 0x00B9
    432e:	88 7f       	andi	r24, 0xF8	; 248
    4330:	80 31       	cpi	r24, 0x10	; 16
    4332:	11 f0       	breq	.+4      	; 0x4338 <I2C_MSTR_start+0x44>
    4334:	81 e0       	ldi	r24, 0x01	; 1
    4336:	08 95       	ret
    4338:	61 30       	cpi	r22, 0x01	; 1
    433a:	19 f4       	brne	.+6      	; 0x4342 <I2C_MSTR_start+0x4e>
    433c:	99 0f       	add	r25, r25
    433e:	91 60       	ori	r25, 0x01	; 1
    4340:	03 c0       	rjmp	.+6      	; 0x4348 <I2C_MSTR_start+0x54>
    4342:	66 23       	and	r22, r22
    4344:	19 f4       	brne	.+6      	; 0x434c <I2C_MSTR_start+0x58>
    4346:	99 0f       	add	r25, r25
    4348:	90 93 bb 00 	sts	0x00BB, r25
    434c:	84 e8       	ldi	r24, 0x84	; 132
    434e:	80 93 bc 00 	sts	0x00BC, r24
    4352:	80 91 bc 00 	lds	r24, 0x00BC
    4356:	87 ff       	sbrs	r24, 7
    4358:	fc cf       	rjmp	.-8      	; 0x4352 <I2C_MSTR_start+0x5e>
    435a:	61 30       	cpi	r22, 0x01	; 1
    435c:	31 f4       	brne	.+12     	; 0x436a <I2C_MSTR_start+0x76>
    435e:	80 91 b9 00 	lds	r24, 0x00B9
    4362:	88 7f       	andi	r24, 0xF8	; 248
    4364:	80 34       	cpi	r24, 0x40	; 64
    4366:	41 f4       	brne	.+16     	; 0x4378 <I2C_MSTR_start+0x84>
    4368:	09 c0       	rjmp	.+18     	; 0x437c <I2C_MSTR_start+0x88>
    436a:	66 23       	and	r22, r22
    436c:	39 f4       	brne	.+14     	; 0x437c <I2C_MSTR_start+0x88>
    436e:	80 91 b9 00 	lds	r24, 0x00B9
    4372:	88 7f       	andi	r24, 0xF8	; 248
    4374:	88 31       	cpi	r24, 0x18	; 24
    4376:	11 f0       	breq	.+4      	; 0x437c <I2C_MSTR_start+0x88>
    4378:	82 e0       	ldi	r24, 0x02	; 2
    437a:	08 95       	ret
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	08 95       	ret

00004380 <I2C_MSTR_stop>:
    4380:	80 91 f3 07 	lds	r24, 0x07F3
    4384:	81 30       	cpi	r24, 0x01	; 1
    4386:	11 f0       	breq	.+4      	; 0x438c <I2C_MSTR_stop+0xc>
    4388:	8a e0       	ldi	r24, 0x0A	; 10
    438a:	08 95       	ret
    438c:	80 91 f5 07 	lds	r24, 0x07F5
    4390:	81 30       	cpi	r24, 0x01	; 1
    4392:	29 f4       	brne	.+10     	; 0x439e <I2C_MSTR_stop+0x1e>
    4394:	85 e9       	ldi	r24, 0x95	; 149
    4396:	80 93 bc 00 	sts	0x00BC, r24
    439a:	80 e0       	ldi	r24, 0x00	; 0
    439c:	08 95       	ret
    439e:	84 e9       	ldi	r24, 0x94	; 148
    43a0:	80 93 bc 00 	sts	0x00BC, r24
    43a4:	80 e0       	ldi	r24, 0x00	; 0
    43a6:	08 95       	ret

000043a8 <I2C_open>:
    43a8:	82 e1       	ldi	r24, 0x12	; 18
    43aa:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    43ae:	88 23       	and	r24, r24
    43b0:	b1 f4       	brne	.+44     	; 0x43de <I2C_open+0x36>
    43b2:	10 92 f2 07 	sts	0x07F2, r1
    43b6:	10 92 f3 07 	sts	0x07F3, r1
    43ba:	10 92 f4 07 	sts	0x07F4, r1
    43be:	10 92 f5 07 	sts	0x07F5, r1
    43c2:	10 92 f6 07 	sts	0x07F6, r1
    43c6:	0e 94 36 28 	call	0x506c	; 0x506c <__I2C_init>
    43ca:	87 e1       	ldi	r24, 0x17	; 23
    43cc:	60 e0       	ldi	r22, 0x00	; 0
    43ce:	0e 94 f2 21 	call	0x43e4	; 0x43e4 <I2C_set_BRG>
    43d2:	0e 94 2c 28 	call	0x5058	; 0x5058 <I2C_enable>
    43d6:	82 e1       	ldi	r24, 0x12	; 18
    43d8:	61 e0       	ldi	r22, 0x01	; 1
    43da:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    43de:	82 e1       	ldi	r24, 0x12	; 18
    43e0:	90 e0       	ldi	r25, 0x00	; 0
    43e2:	08 95       	ret

000043e4 <I2C_set_BRG>:
    43e4:	63 70       	andi	r22, 0x03	; 3
    43e6:	60 93 b9 00 	sts	0x00B9, r22
    43ea:	80 93 b8 00 	sts	0x00B8, r24
    43ee:	81 e0       	ldi	r24, 0x01	; 1
    43f0:	80 93 f2 07 	sts	0x07F2, r24
    43f4:	08 95       	ret

000043f6 <__ADC_init>:
    43f6:	8f e1       	ldi	r24, 0x1F	; 31
    43f8:	80 93 7c 00 	sts	0x007C, r24
    43fc:	ea e7       	ldi	r30, 0x7A	; 122
    43fe:	f0 e0       	ldi	r31, 0x00	; 0
    4400:	87 e0       	ldi	r24, 0x07	; 7
    4402:	80 83       	st	Z, r24
    4404:	80 81       	ld	r24, Z
    4406:	80 68       	ori	r24, 0x80	; 128
    4408:	80 83       	st	Z, r24
    440a:	08 95       	ret

0000440c <CBOT_init>:
    440c:	0e 94 77 27 	call	0x4eee	; 0x4eee <SYS_init>
    4410:	0e 94 38 25 	call	0x4a70	; 0x4a70 <ATMEGA_open>
    4414:	0e 94 68 24 	call	0x48d0	; 0x48d0 <ISR_open>
    4418:	0e 94 03 28 	call	0x5006	; 0x5006 <TMRSRVC_open>
    441c:	0e 94 9d 25 	call	0x4b3a	; 0x4b3a <SPI_open>
    4420:	0e 94 7a 20 	call	0x40f4	; 0x40f4 <ATTINY_open>
    4424:	78 94       	sei
    4426:	08 95       	ret

00004428 <CBOT_ISR_init>:
    4428:	00 00       	nop
    442a:	08 95       	ret

0000442c <__vector_16>:
    442c:	1f 92       	push	r1
    442e:	0f 92       	push	r0
    4430:	0f b6       	in	r0, 0x3f	; 63
    4432:	0f 92       	push	r0
    4434:	11 24       	eor	r1, r1
    4436:	2f 93       	push	r18
    4438:	3f 93       	push	r19
    443a:	4f 93       	push	r20
    443c:	5f 93       	push	r21
    443e:	6f 93       	push	r22
    4440:	7f 93       	push	r23
    4442:	8f 93       	push	r24
    4444:	9f 93       	push	r25
    4446:	af 93       	push	r26
    4448:	bf 93       	push	r27
    444a:	ef 93       	push	r30
    444c:	ff 93       	push	r31
    444e:	e0 91 76 04 	lds	r30, 0x0476
    4452:	f0 91 77 04 	lds	r31, 0x0477
    4456:	30 97       	sbiw	r30, 0x00	; 0
    4458:	09 f0       	breq	.+2      	; 0x445c <__vector_16+0x30>
    445a:	09 95       	icall
    445c:	ff 91       	pop	r31
    445e:	ef 91       	pop	r30
    4460:	bf 91       	pop	r27
    4462:	af 91       	pop	r26
    4464:	9f 91       	pop	r25
    4466:	8f 91       	pop	r24
    4468:	7f 91       	pop	r23
    446a:	6f 91       	pop	r22
    446c:	5f 91       	pop	r21
    446e:	4f 91       	pop	r20
    4470:	3f 91       	pop	r19
    4472:	2f 91       	pop	r18
    4474:	0f 90       	pop	r0
    4476:	0f be       	out	0x3f, r0	; 63
    4478:	0f 90       	pop	r0
    447a:	1f 90       	pop	r1
    447c:	18 95       	reti

0000447e <__vector_17>:
    447e:	1f 92       	push	r1
    4480:	0f 92       	push	r0
    4482:	0f b6       	in	r0, 0x3f	; 63
    4484:	0f 92       	push	r0
    4486:	11 24       	eor	r1, r1
    4488:	2f 93       	push	r18
    448a:	3f 93       	push	r19
    448c:	4f 93       	push	r20
    448e:	5f 93       	push	r21
    4490:	6f 93       	push	r22
    4492:	7f 93       	push	r23
    4494:	8f 93       	push	r24
    4496:	9f 93       	push	r25
    4498:	af 93       	push	r26
    449a:	bf 93       	push	r27
    449c:	ef 93       	push	r30
    449e:	ff 93       	push	r31
    44a0:	e0 91 78 04 	lds	r30, 0x0478
    44a4:	f0 91 79 04 	lds	r31, 0x0479
    44a8:	30 97       	sbiw	r30, 0x00	; 0
    44aa:	09 f0       	breq	.+2      	; 0x44ae <__vector_17+0x30>
    44ac:	09 95       	icall
    44ae:	ff 91       	pop	r31
    44b0:	ef 91       	pop	r30
    44b2:	bf 91       	pop	r27
    44b4:	af 91       	pop	r26
    44b6:	9f 91       	pop	r25
    44b8:	8f 91       	pop	r24
    44ba:	7f 91       	pop	r23
    44bc:	6f 91       	pop	r22
    44be:	5f 91       	pop	r21
    44c0:	4f 91       	pop	r20
    44c2:	3f 91       	pop	r19
    44c4:	2f 91       	pop	r18
    44c6:	0f 90       	pop	r0
    44c8:	0f be       	out	0x3f, r0	; 63
    44ca:	0f 90       	pop	r0
    44cc:	1f 90       	pop	r1
    44ce:	18 95       	reti

000044d0 <__vector_18>:
    44d0:	1f 92       	push	r1
    44d2:	0f 92       	push	r0
    44d4:	0f b6       	in	r0, 0x3f	; 63
    44d6:	0f 92       	push	r0
    44d8:	11 24       	eor	r1, r1
    44da:	2f 93       	push	r18
    44dc:	3f 93       	push	r19
    44de:	4f 93       	push	r20
    44e0:	5f 93       	push	r21
    44e2:	6f 93       	push	r22
    44e4:	7f 93       	push	r23
    44e6:	8f 93       	push	r24
    44e8:	9f 93       	push	r25
    44ea:	af 93       	push	r26
    44ec:	bf 93       	push	r27
    44ee:	ef 93       	push	r30
    44f0:	ff 93       	push	r31
    44f2:	e0 91 7a 04 	lds	r30, 0x047A
    44f6:	f0 91 7b 04 	lds	r31, 0x047B
    44fa:	30 97       	sbiw	r30, 0x00	; 0
    44fc:	09 f0       	breq	.+2      	; 0x4500 <__vector_18+0x30>
    44fe:	09 95       	icall
    4500:	ff 91       	pop	r31
    4502:	ef 91       	pop	r30
    4504:	bf 91       	pop	r27
    4506:	af 91       	pop	r26
    4508:	9f 91       	pop	r25
    450a:	8f 91       	pop	r24
    450c:	7f 91       	pop	r23
    450e:	6f 91       	pop	r22
    4510:	5f 91       	pop	r21
    4512:	4f 91       	pop	r20
    4514:	3f 91       	pop	r19
    4516:	2f 91       	pop	r18
    4518:	0f 90       	pop	r0
    451a:	0f be       	out	0x3f, r0	; 63
    451c:	0f 90       	pop	r0
    451e:	1f 90       	pop	r1
    4520:	18 95       	reti

00004522 <__vector_9>:
    4522:	1f 92       	push	r1
    4524:	0f 92       	push	r0
    4526:	0f b6       	in	r0, 0x3f	; 63
    4528:	0f 92       	push	r0
    452a:	11 24       	eor	r1, r1
    452c:	2f 93       	push	r18
    452e:	3f 93       	push	r19
    4530:	4f 93       	push	r20
    4532:	5f 93       	push	r21
    4534:	6f 93       	push	r22
    4536:	7f 93       	push	r23
    4538:	8f 93       	push	r24
    453a:	9f 93       	push	r25
    453c:	af 93       	push	r26
    453e:	bf 93       	push	r27
    4540:	ef 93       	push	r30
    4542:	ff 93       	push	r31
    4544:	e0 91 68 04 	lds	r30, 0x0468
    4548:	f0 91 69 04 	lds	r31, 0x0469
    454c:	30 97       	sbiw	r30, 0x00	; 0
    454e:	09 f0       	breq	.+2      	; 0x4552 <__vector_9+0x30>
    4550:	09 95       	icall
    4552:	ff 91       	pop	r31
    4554:	ef 91       	pop	r30
    4556:	bf 91       	pop	r27
    4558:	af 91       	pop	r26
    455a:	9f 91       	pop	r25
    455c:	8f 91       	pop	r24
    455e:	7f 91       	pop	r23
    4560:	6f 91       	pop	r22
    4562:	5f 91       	pop	r21
    4564:	4f 91       	pop	r20
    4566:	3f 91       	pop	r19
    4568:	2f 91       	pop	r18
    456a:	0f 90       	pop	r0
    456c:	0f be       	out	0x3f, r0	; 63
    456e:	0f 90       	pop	r0
    4570:	1f 90       	pop	r1
    4572:	18 95       	reti

00004574 <__vector_10>:
    4574:	1f 92       	push	r1
    4576:	0f 92       	push	r0
    4578:	0f b6       	in	r0, 0x3f	; 63
    457a:	0f 92       	push	r0
    457c:	11 24       	eor	r1, r1
    457e:	2f 93       	push	r18
    4580:	3f 93       	push	r19
    4582:	4f 93       	push	r20
    4584:	5f 93       	push	r21
    4586:	6f 93       	push	r22
    4588:	7f 93       	push	r23
    458a:	8f 93       	push	r24
    458c:	9f 93       	push	r25
    458e:	af 93       	push	r26
    4590:	bf 93       	push	r27
    4592:	ef 93       	push	r30
    4594:	ff 93       	push	r31
    4596:	e0 91 6a 04 	lds	r30, 0x046A
    459a:	f0 91 6b 04 	lds	r31, 0x046B
    459e:	30 97       	sbiw	r30, 0x00	; 0
    45a0:	09 f0       	breq	.+2      	; 0x45a4 <__vector_10+0x30>
    45a2:	09 95       	icall
    45a4:	ff 91       	pop	r31
    45a6:	ef 91       	pop	r30
    45a8:	bf 91       	pop	r27
    45aa:	af 91       	pop	r26
    45ac:	9f 91       	pop	r25
    45ae:	8f 91       	pop	r24
    45b0:	7f 91       	pop	r23
    45b2:	6f 91       	pop	r22
    45b4:	5f 91       	pop	r21
    45b6:	4f 91       	pop	r20
    45b8:	3f 91       	pop	r19
    45ba:	2f 91       	pop	r18
    45bc:	0f 90       	pop	r0
    45be:	0f be       	out	0x3f, r0	; 63
    45c0:	0f 90       	pop	r0
    45c2:	1f 90       	pop	r1
    45c4:	18 95       	reti

000045c6 <__vector_11>:
    45c6:	1f 92       	push	r1
    45c8:	0f 92       	push	r0
    45ca:	0f b6       	in	r0, 0x3f	; 63
    45cc:	0f 92       	push	r0
    45ce:	11 24       	eor	r1, r1
    45d0:	2f 93       	push	r18
    45d2:	3f 93       	push	r19
    45d4:	4f 93       	push	r20
    45d6:	5f 93       	push	r21
    45d8:	6f 93       	push	r22
    45da:	7f 93       	push	r23
    45dc:	8f 93       	push	r24
    45de:	9f 93       	push	r25
    45e0:	af 93       	push	r26
    45e2:	bf 93       	push	r27
    45e4:	ef 93       	push	r30
    45e6:	ff 93       	push	r31
    45e8:	e0 91 6c 04 	lds	r30, 0x046C
    45ec:	f0 91 6d 04 	lds	r31, 0x046D
    45f0:	30 97       	sbiw	r30, 0x00	; 0
    45f2:	09 f0       	breq	.+2      	; 0x45f6 <__vector_11+0x30>
    45f4:	09 95       	icall
    45f6:	ff 91       	pop	r31
    45f8:	ef 91       	pop	r30
    45fa:	bf 91       	pop	r27
    45fc:	af 91       	pop	r26
    45fe:	9f 91       	pop	r25
    4600:	8f 91       	pop	r24
    4602:	7f 91       	pop	r23
    4604:	6f 91       	pop	r22
    4606:	5f 91       	pop	r21
    4608:	4f 91       	pop	r20
    460a:	3f 91       	pop	r19
    460c:	2f 91       	pop	r18
    460e:	0f 90       	pop	r0
    4610:	0f be       	out	0x3f, r0	; 63
    4612:	0f 90       	pop	r0
    4614:	1f 90       	pop	r1
    4616:	18 95       	reti

00004618 <__vector_13>:
    4618:	1f 92       	push	r1
    461a:	0f 92       	push	r0
    461c:	0f b6       	in	r0, 0x3f	; 63
    461e:	0f 92       	push	r0
    4620:	11 24       	eor	r1, r1
    4622:	2f 93       	push	r18
    4624:	3f 93       	push	r19
    4626:	4f 93       	push	r20
    4628:	5f 93       	push	r21
    462a:	6f 93       	push	r22
    462c:	7f 93       	push	r23
    462e:	8f 93       	push	r24
    4630:	9f 93       	push	r25
    4632:	af 93       	push	r26
    4634:	bf 93       	push	r27
    4636:	ef 93       	push	r30
    4638:	ff 93       	push	r31
    463a:	e0 91 70 04 	lds	r30, 0x0470
    463e:	f0 91 71 04 	lds	r31, 0x0471
    4642:	30 97       	sbiw	r30, 0x00	; 0
    4644:	09 f0       	breq	.+2      	; 0x4648 <__vector_13+0x30>
    4646:	09 95       	icall
    4648:	ff 91       	pop	r31
    464a:	ef 91       	pop	r30
    464c:	bf 91       	pop	r27
    464e:	af 91       	pop	r26
    4650:	9f 91       	pop	r25
    4652:	8f 91       	pop	r24
    4654:	7f 91       	pop	r23
    4656:	6f 91       	pop	r22
    4658:	5f 91       	pop	r21
    465a:	4f 91       	pop	r20
    465c:	3f 91       	pop	r19
    465e:	2f 91       	pop	r18
    4660:	0f 90       	pop	r0
    4662:	0f be       	out	0x3f, r0	; 63
    4664:	0f 90       	pop	r0
    4666:	1f 90       	pop	r1
    4668:	18 95       	reti

0000466a <__vector_14>:
    466a:	1f 92       	push	r1
    466c:	0f 92       	push	r0
    466e:	0f b6       	in	r0, 0x3f	; 63
    4670:	0f 92       	push	r0
    4672:	11 24       	eor	r1, r1
    4674:	2f 93       	push	r18
    4676:	3f 93       	push	r19
    4678:	4f 93       	push	r20
    467a:	5f 93       	push	r21
    467c:	6f 93       	push	r22
    467e:	7f 93       	push	r23
    4680:	8f 93       	push	r24
    4682:	9f 93       	push	r25
    4684:	af 93       	push	r26
    4686:	bf 93       	push	r27
    4688:	ef 93       	push	r30
    468a:	ff 93       	push	r31
    468c:	e0 91 72 04 	lds	r30, 0x0472
    4690:	f0 91 73 04 	lds	r31, 0x0473
    4694:	30 97       	sbiw	r30, 0x00	; 0
    4696:	09 f0       	breq	.+2      	; 0x469a <__vector_14+0x30>
    4698:	09 95       	icall
    469a:	ff 91       	pop	r31
    469c:	ef 91       	pop	r30
    469e:	bf 91       	pop	r27
    46a0:	af 91       	pop	r26
    46a2:	9f 91       	pop	r25
    46a4:	8f 91       	pop	r24
    46a6:	7f 91       	pop	r23
    46a8:	6f 91       	pop	r22
    46aa:	5f 91       	pop	r21
    46ac:	4f 91       	pop	r20
    46ae:	3f 91       	pop	r19
    46b0:	2f 91       	pop	r18
    46b2:	0f 90       	pop	r0
    46b4:	0f be       	out	0x3f, r0	; 63
    46b6:	0f 90       	pop	r0
    46b8:	1f 90       	pop	r1
    46ba:	18 95       	reti

000046bc <__vector_12>:
    46bc:	1f 92       	push	r1
    46be:	0f 92       	push	r0
    46c0:	0f b6       	in	r0, 0x3f	; 63
    46c2:	0f 92       	push	r0
    46c4:	11 24       	eor	r1, r1
    46c6:	2f 93       	push	r18
    46c8:	3f 93       	push	r19
    46ca:	4f 93       	push	r20
    46cc:	5f 93       	push	r21
    46ce:	6f 93       	push	r22
    46d0:	7f 93       	push	r23
    46d2:	8f 93       	push	r24
    46d4:	9f 93       	push	r25
    46d6:	af 93       	push	r26
    46d8:	bf 93       	push	r27
    46da:	ef 93       	push	r30
    46dc:	ff 93       	push	r31
    46de:	e0 91 6e 04 	lds	r30, 0x046E
    46e2:	f0 91 6f 04 	lds	r31, 0x046F
    46e6:	30 97       	sbiw	r30, 0x00	; 0
    46e8:	09 f0       	breq	.+2      	; 0x46ec <__vector_12+0x30>
    46ea:	09 95       	icall
    46ec:	ff 91       	pop	r31
    46ee:	ef 91       	pop	r30
    46f0:	bf 91       	pop	r27
    46f2:	af 91       	pop	r26
    46f4:	9f 91       	pop	r25
    46f6:	8f 91       	pop	r24
    46f8:	7f 91       	pop	r23
    46fa:	6f 91       	pop	r22
    46fc:	5f 91       	pop	r21
    46fe:	4f 91       	pop	r20
    4700:	3f 91       	pop	r19
    4702:	2f 91       	pop	r18
    4704:	0f 90       	pop	r0
    4706:	0f be       	out	0x3f, r0	; 63
    4708:	0f 90       	pop	r0
    470a:	1f 90       	pop	r1
    470c:	18 95       	reti

0000470e <__vector_15>:
    470e:	1f 92       	push	r1
    4710:	0f 92       	push	r0
    4712:	0f b6       	in	r0, 0x3f	; 63
    4714:	0f 92       	push	r0
    4716:	11 24       	eor	r1, r1
    4718:	2f 93       	push	r18
    471a:	3f 93       	push	r19
    471c:	4f 93       	push	r20
    471e:	5f 93       	push	r21
    4720:	6f 93       	push	r22
    4722:	7f 93       	push	r23
    4724:	8f 93       	push	r24
    4726:	9f 93       	push	r25
    4728:	af 93       	push	r26
    472a:	bf 93       	push	r27
    472c:	ef 93       	push	r30
    472e:	ff 93       	push	r31
    4730:	e0 91 74 04 	lds	r30, 0x0474
    4734:	f0 91 75 04 	lds	r31, 0x0475
    4738:	30 97       	sbiw	r30, 0x00	; 0
    473a:	09 f0       	breq	.+2      	; 0x473e <__vector_15+0x30>
    473c:	09 95       	icall
    473e:	ff 91       	pop	r31
    4740:	ef 91       	pop	r30
    4742:	bf 91       	pop	r27
    4744:	af 91       	pop	r26
    4746:	9f 91       	pop	r25
    4748:	8f 91       	pop	r24
    474a:	7f 91       	pop	r23
    474c:	6f 91       	pop	r22
    474e:	5f 91       	pop	r21
    4750:	4f 91       	pop	r20
    4752:	3f 91       	pop	r19
    4754:	2f 91       	pop	r18
    4756:	0f 90       	pop	r0
    4758:	0f be       	out	0x3f, r0	; 63
    475a:	0f 90       	pop	r0
    475c:	1f 90       	pop	r1
    475e:	18 95       	reti

00004760 <__vector_4>:
    4760:	1f 92       	push	r1
    4762:	0f 92       	push	r0
    4764:	0f b6       	in	r0, 0x3f	; 63
    4766:	0f 92       	push	r0
    4768:	11 24       	eor	r1, r1
    476a:	2f 93       	push	r18
    476c:	3f 93       	push	r19
    476e:	4f 93       	push	r20
    4770:	5f 93       	push	r21
    4772:	6f 93       	push	r22
    4774:	7f 93       	push	r23
    4776:	8f 93       	push	r24
    4778:	9f 93       	push	r25
    477a:	af 93       	push	r26
    477c:	bf 93       	push	r27
    477e:	ef 93       	push	r30
    4780:	ff 93       	push	r31
    4782:	e0 91 5e 04 	lds	r30, 0x045E
    4786:	f0 91 5f 04 	lds	r31, 0x045F
    478a:	30 97       	sbiw	r30, 0x00	; 0
    478c:	09 f0       	breq	.+2      	; 0x4790 <__vector_4+0x30>
    478e:	09 95       	icall
    4790:	ff 91       	pop	r31
    4792:	ef 91       	pop	r30
    4794:	bf 91       	pop	r27
    4796:	af 91       	pop	r26
    4798:	9f 91       	pop	r25
    479a:	8f 91       	pop	r24
    479c:	7f 91       	pop	r23
    479e:	6f 91       	pop	r22
    47a0:	5f 91       	pop	r21
    47a2:	4f 91       	pop	r20
    47a4:	3f 91       	pop	r19
    47a6:	2f 91       	pop	r18
    47a8:	0f 90       	pop	r0
    47aa:	0f be       	out	0x3f, r0	; 63
    47ac:	0f 90       	pop	r0
    47ae:	1f 90       	pop	r1
    47b0:	18 95       	reti

000047b2 <__vector_5>:
    47b2:	1f 92       	push	r1
    47b4:	0f 92       	push	r0
    47b6:	0f b6       	in	r0, 0x3f	; 63
    47b8:	0f 92       	push	r0
    47ba:	11 24       	eor	r1, r1
    47bc:	2f 93       	push	r18
    47be:	3f 93       	push	r19
    47c0:	4f 93       	push	r20
    47c2:	5f 93       	push	r21
    47c4:	6f 93       	push	r22
    47c6:	7f 93       	push	r23
    47c8:	8f 93       	push	r24
    47ca:	9f 93       	push	r25
    47cc:	af 93       	push	r26
    47ce:	bf 93       	push	r27
    47d0:	ef 93       	push	r30
    47d2:	ff 93       	push	r31
    47d4:	e0 91 60 04 	lds	r30, 0x0460
    47d8:	f0 91 61 04 	lds	r31, 0x0461
    47dc:	30 97       	sbiw	r30, 0x00	; 0
    47de:	09 f0       	breq	.+2      	; 0x47e2 <__vector_5+0x30>
    47e0:	09 95       	icall
    47e2:	ff 91       	pop	r31
    47e4:	ef 91       	pop	r30
    47e6:	bf 91       	pop	r27
    47e8:	af 91       	pop	r26
    47ea:	9f 91       	pop	r25
    47ec:	8f 91       	pop	r24
    47ee:	7f 91       	pop	r23
    47f0:	6f 91       	pop	r22
    47f2:	5f 91       	pop	r21
    47f4:	4f 91       	pop	r20
    47f6:	3f 91       	pop	r19
    47f8:	2f 91       	pop	r18
    47fa:	0f 90       	pop	r0
    47fc:	0f be       	out	0x3f, r0	; 63
    47fe:	0f 90       	pop	r0
    4800:	1f 90       	pop	r1
    4802:	18 95       	reti

00004804 <__vector_6>:
    4804:	1f 92       	push	r1
    4806:	0f 92       	push	r0
    4808:	0f b6       	in	r0, 0x3f	; 63
    480a:	0f 92       	push	r0
    480c:	11 24       	eor	r1, r1
    480e:	2f 93       	push	r18
    4810:	3f 93       	push	r19
    4812:	4f 93       	push	r20
    4814:	5f 93       	push	r21
    4816:	6f 93       	push	r22
    4818:	7f 93       	push	r23
    481a:	8f 93       	push	r24
    481c:	9f 93       	push	r25
    481e:	af 93       	push	r26
    4820:	bf 93       	push	r27
    4822:	ef 93       	push	r30
    4824:	ff 93       	push	r31
    4826:	e0 91 62 04 	lds	r30, 0x0462
    482a:	f0 91 63 04 	lds	r31, 0x0463
    482e:	30 97       	sbiw	r30, 0x00	; 0
    4830:	09 f0       	breq	.+2      	; 0x4834 <__vector_6+0x30>
    4832:	09 95       	icall
    4834:	ff 91       	pop	r31
    4836:	ef 91       	pop	r30
    4838:	bf 91       	pop	r27
    483a:	af 91       	pop	r26
    483c:	9f 91       	pop	r25
    483e:	8f 91       	pop	r24
    4840:	7f 91       	pop	r23
    4842:	6f 91       	pop	r22
    4844:	5f 91       	pop	r21
    4846:	4f 91       	pop	r20
    4848:	3f 91       	pop	r19
    484a:	2f 91       	pop	r18
    484c:	0f 90       	pop	r0
    484e:	0f be       	out	0x3f, r0	; 63
    4850:	0f 90       	pop	r0
    4852:	1f 90       	pop	r1
    4854:	18 95       	reti

00004856 <__vector_7>:
    4856:	1f 92       	push	r1
    4858:	0f 92       	push	r0
    485a:	0f b6       	in	r0, 0x3f	; 63
    485c:	0f 92       	push	r0
    485e:	11 24       	eor	r1, r1
    4860:	2f 93       	push	r18
    4862:	3f 93       	push	r19
    4864:	4f 93       	push	r20
    4866:	5f 93       	push	r21
    4868:	6f 93       	push	r22
    486a:	7f 93       	push	r23
    486c:	8f 93       	push	r24
    486e:	9f 93       	push	r25
    4870:	af 93       	push	r26
    4872:	bf 93       	push	r27
    4874:	ef 93       	push	r30
    4876:	ff 93       	push	r31
    4878:	e0 91 64 04 	lds	r30, 0x0464
    487c:	f0 91 65 04 	lds	r31, 0x0465
    4880:	30 97       	sbiw	r30, 0x00	; 0
    4882:	09 f0       	breq	.+2      	; 0x4886 <__vector_7+0x30>
    4884:	09 95       	icall
    4886:	ff 91       	pop	r31
    4888:	ef 91       	pop	r30
    488a:	bf 91       	pop	r27
    488c:	af 91       	pop	r26
    488e:	9f 91       	pop	r25
    4890:	8f 91       	pop	r24
    4892:	7f 91       	pop	r23
    4894:	6f 91       	pop	r22
    4896:	5f 91       	pop	r21
    4898:	4f 91       	pop	r20
    489a:	3f 91       	pop	r19
    489c:	2f 91       	pop	r18
    489e:	0f 90       	pop	r0
    48a0:	0f be       	out	0x3f, r0	; 63
    48a2:	0f 90       	pop	r0
    48a4:	1f 90       	pop	r1
    48a6:	18 95       	reti

000048a8 <ISR_attach>:
    48a8:	e8 2f       	mov	r30, r24
    48aa:	80 32       	cpi	r24, 0x20	; 32
    48ac:	68 f4       	brcc	.+26     	; 0x48c8 <ISR_attach+0x20>
    48ae:	80 51       	subi	r24, 0x10	; 16
    48b0:	83 30       	cpi	r24, 0x03	; 3
    48b2:	50 f0       	brcs	.+20     	; 0x48c8 <ISR_attach+0x20>
    48b4:	f0 e0       	ldi	r31, 0x00	; 0
    48b6:	ee 0f       	add	r30, r30
    48b8:	ff 1f       	adc	r31, r31
    48ba:	ea 5a       	subi	r30, 0xAA	; 170
    48bc:	fb 4f       	sbci	r31, 0xFB	; 251
    48be:	20 81       	ld	r18, Z
    48c0:	31 81       	ldd	r19, Z+1	; 0x01
    48c2:	71 83       	std	Z+1, r23	; 0x01
    48c4:	60 83       	st	Z, r22
    48c6:	02 c0       	rjmp	.+4      	; 0x48cc <ISR_attach+0x24>
    48c8:	20 e0       	ldi	r18, 0x00	; 0
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	c9 01       	movw	r24, r18
    48ce:	08 95       	ret

000048d0 <ISR_open>:
    48d0:	80 e1       	ldi	r24, 0x10	; 16
    48d2:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    48d6:	88 23       	and	r24, r24
    48d8:	61 f4       	brne	.+24     	; 0x48f2 <ISR_open+0x22>
    48da:	e6 e5       	ldi	r30, 0x56	; 86
    48dc:	f4 e0       	ldi	r31, 0x04	; 4
    48de:	11 92       	st	Z+, r1
    48e0:	11 92       	st	Z+, r1
    48e2:	84 e0       	ldi	r24, 0x04	; 4
    48e4:	e6 39       	cpi	r30, 0x96	; 150
    48e6:	f8 07       	cpc	r31, r24
    48e8:	d1 f7       	brne	.-12     	; 0x48de <ISR_open+0xe>
    48ea:	80 e1       	ldi	r24, 0x10	; 16
    48ec:	61 e0       	ldi	r22, 0x01	; 1
    48ee:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    48f2:	80 e1       	ldi	r24, 0x10	; 16
    48f4:	91 e0       	ldi	r25, 0x01	; 1
    48f6:	08 95       	ret

000048f8 <__LCD_init>:
    48f8:	23 9a       	sbi	0x04, 3	; 4
    48fa:	08 95       	ret

000048fc <__LCD_putchar>:
    48fc:	ff 92       	push	r15
    48fe:	0f 93       	push	r16
    4900:	1f 93       	push	r17
    4902:	cf 93       	push	r28
    4904:	df 93       	push	r29
    4906:	f8 2e       	mov	r15, r24
    4908:	8a e0       	ldi	r24, 0x0A	; 10
    490a:	f8 16       	cp	r15, r24
    490c:	b1 f0       	breq	.+44     	; 0x493a <__LCD_putchar+0x3e>
    490e:	8f 15       	cp	r24, r15
    4910:	48 f0       	brcs	.+18     	; 0x4924 <__LCD_putchar+0x28>
    4912:	e8 e0       	ldi	r30, 0x08	; 8
    4914:	fe 16       	cp	r15, r30
    4916:	b9 f1       	breq	.+110    	; 0x4986 <__LCD_putchar+0x8a>
    4918:	ef 15       	cp	r30, r15
    491a:	38 f1       	brcs	.+78     	; 0x496a <__LCD_putchar+0x6e>
    491c:	f7 e0       	ldi	r31, 0x07	; 7
    491e:	ff 16       	cp	r15, r31
    4920:	51 f4       	brne	.+20     	; 0x4936 <__LCD_putchar+0x3a>
    4922:	3b c0       	rjmp	.+118    	; 0x499a <__LCD_putchar+0x9e>
    4924:	8d e0       	ldi	r24, 0x0D	; 13
    4926:	f8 16       	cp	r15, r24
    4928:	59 f0       	breq	.+22     	; 0x4940 <__LCD_putchar+0x44>
    492a:	eb e1       	ldi	r30, 0x1B	; 27
    492c:	fe 16       	cp	r15, r30
    492e:	89 f0       	breq	.+34     	; 0x4952 <__LCD_putchar+0x56>
    4930:	fc e0       	ldi	r31, 0x0C	; 12
    4932:	ff 16       	cp	r15, r31
    4934:	41 f0       	breq	.+16     	; 0x4946 <__LCD_putchar+0x4a>
    4936:	01 e0       	ldi	r16, 0x01	; 1
    4938:	41 c0       	rjmp	.+130    	; 0x49bc <__LCD_putchar+0xc0>
    493a:	10 92 cb 07 	sts	0x07CB, r1
    493e:	03 c0       	rjmp	.+6      	; 0x4946 <__LCD_putchar+0x4a>
    4940:	10 92 cb 07 	sts	0x07CB, r1
    4944:	3a c0       	rjmp	.+116    	; 0x49ba <__LCD_putchar+0xbe>
    4946:	80 91 cc 07 	lds	r24, 0x07CC
    494a:	81 50       	subi	r24, 0x01	; 1
    494c:	80 93 cc 07 	sts	0x07CC, r24
    4950:	34 c0       	rjmp	.+104    	; 0x49ba <__LCD_putchar+0xbe>
    4952:	0e 94 09 1a 	call	0x3412	; 0x3412 <LCD_clear>
    4956:	14 c0       	rjmp	.+40     	; 0x4980 <__LCD_putchar+0x84>
    4958:	80 e0       	ldi	r24, 0x00	; 0
    495a:	61 e0       	ldi	r22, 0x01	; 1
    495c:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    4960:	80 91 cb 07 	lds	r24, 0x07CB
    4964:	8f 5f       	subi	r24, 0xFF	; 255
    4966:	80 93 cb 07 	sts	0x07CB, r24
    496a:	80 91 cb 07 	lds	r24, 0x07CB
    496e:	87 ff       	sbrs	r24, 7
    4970:	f3 cf       	rjmp	.-26     	; 0x4958 <__LCD_putchar+0x5c>
    4972:	10 92 cb 07 	sts	0x07CB, r1
    4976:	80 91 cc 07 	lds	r24, 0x07CC
    497a:	81 50       	subi	r24, 0x01	; 1
    497c:	80 93 cc 07 	sts	0x07CC, r24
    4980:	00 e0       	ldi	r16, 0x00	; 0
    4982:	11 e0       	ldi	r17, 0x01	; 1
    4984:	1c c0       	rjmp	.+56     	; 0x49be <__LCD_putchar+0xc2>
    4986:	80 91 cb 07 	lds	r24, 0x07CB
    498a:	88 23       	and	r24, r24
    498c:	b1 f0       	breq	.+44     	; 0x49ba <__LCD_putchar+0xbe>
    498e:	80 91 cb 07 	lds	r24, 0x07CB
    4992:	86 50       	subi	r24, 0x06	; 6
    4994:	80 93 cb 07 	sts	0x07CB, r24
    4998:	10 c0       	rjmp	.+32     	; 0x49ba <__LCD_putchar+0xbe>
    499a:	81 e0       	ldi	r24, 0x01	; 1
    499c:	0e 94 15 1c 	call	0x382a	; 0x382a <SPKR_open>
    49a0:	64 ef       	ldi	r22, 0xF4	; 244
    49a2:	71 e0       	ldi	r23, 0x01	; 1
    49a4:	80 e0       	ldi	r24, 0x00	; 0
    49a6:	90 e0       	ldi	r25, 0x00	; 0
    49a8:	4d e7       	ldi	r20, 0x7D	; 125
    49aa:	50 e0       	ldi	r21, 0x00	; 0
    49ac:	24 e6       	ldi	r18, 0x64	; 100
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	0e 94 98 26 	call	0x4d30	; 0x4d30 <SPKR_play_beep>
    49b4:	81 e0       	ldi	r24, 0x01	; 1
    49b6:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <SPKR_close>
    49ba:	00 e0       	ldi	r16, 0x00	; 0
    49bc:	10 e0       	ldi	r17, 0x00	; 0
    49be:	80 91 cc 07 	lds	r24, 0x07CC
    49c2:	60 91 cb 07 	lds	r22, 0x07CB
    49c6:	0e 94 cf 1a 	call	0x359e	; 0x359e <LCD_set_PGC_addr>
    49ca:	00 23       	and	r16, r16
    49cc:	51 f1       	breq	.+84     	; 0x4a22 <__LCD_putchar+0x126>
    49ce:	85 e0       	ldi	r24, 0x05	; 5
    49d0:	f8 9e       	mul	r15, r24
    49d2:	c0 01       	movw	r24, r0
    49d4:	11 24       	eor	r1, r1
    49d6:	ec 01       	movw	r28, r24
    49d8:	c3 55       	subi	r28, 0x53	; 83
    49da:	df 4f       	sbci	r29, 0xFF	; 255
    49dc:	8c 01       	movw	r16, r24
    49de:	0e 54       	subi	r16, 0x4E	; 78
    49e0:	1f 4f       	sbci	r17, 0xFF	; 255
    49e2:	fe 01       	movw	r30, r28
    49e4:	84 91       	lpm	r24, Z+
    49e6:	61 e0       	ldi	r22, 0x01	; 1
    49e8:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    49ec:	21 96       	adiw	r28, 0x01	; 1
    49ee:	c0 17       	cp	r28, r16
    49f0:	d1 07       	cpc	r29, r17
    49f2:	b9 f7       	brne	.-18     	; 0x49e2 <__LCD_putchar+0xe6>
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	61 e0       	ldi	r22, 0x01	; 1
    49f8:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <LCD_write>
    49fc:	80 91 cb 07 	lds	r24, 0x07CB
    4a00:	8a 5f       	subi	r24, 0xFA	; 250
    4a02:	80 93 cb 07 	sts	0x07CB, r24
    4a06:	80 91 cb 07 	lds	r24, 0x07CB
    4a0a:	90 e0       	ldi	r25, 0x00	; 0
    4a0c:	8c 37       	cpi	r24, 0x7C	; 124
    4a0e:	91 05       	cpc	r25, r1
    4a10:	3c f0       	brlt	.+14     	; 0x4a20 <__LCD_putchar+0x124>
    4a12:	10 92 cb 07 	sts	0x07CB, r1
    4a16:	80 91 cc 07 	lds	r24, 0x07CC
    4a1a:	81 50       	subi	r24, 0x01	; 1
    4a1c:	80 93 cc 07 	sts	0x07CC, r24
    4a20:	11 e0       	ldi	r17, 0x01	; 1
    4a22:	80 91 cc 07 	lds	r24, 0x07CC
    4a26:	83 70       	andi	r24, 0x03	; 3
    4a28:	80 93 cc 07 	sts	0x07CC, r24
    4a2c:	11 30       	cpi	r17, 0x01	; 1
    4a2e:	59 f4       	brne	.+22     	; 0x4a46 <__LCD_putchar+0x14a>
    4a30:	80 91 cd 07 	lds	r24, 0x07CD
    4a34:	81 30       	cpi	r24, 0x01	; 1
    4a36:	39 f4       	brne	.+14     	; 0x4a46 <__LCD_putchar+0x14a>
    4a38:	e0 91 ce 07 	lds	r30, 0x07CE
    4a3c:	f0 91 cf 07 	lds	r31, 0x07CF
    4a40:	30 97       	sbiw	r30, 0x00	; 0
    4a42:	09 f0       	breq	.+2      	; 0x4a46 <__LCD_putchar+0x14a>
    4a44:	09 95       	icall
    4a46:	80 e0       	ldi	r24, 0x00	; 0
    4a48:	90 e0       	ldi	r25, 0x00	; 0
    4a4a:	df 91       	pop	r29
    4a4c:	cf 91       	pop	r28
    4a4e:	1f 91       	pop	r17
    4a50:	0f 91       	pop	r16
    4a52:	ff 90       	pop	r15
    4a54:	08 95       	ret

00004a56 <__LED_clr_pattern>:
    4a56:	85 fd       	sbrc	r24, 5
    4a58:	5d 98       	cbi	0x0b, 5	; 11
    4a5a:	86 fd       	sbrc	r24, 6
    4a5c:	5e 98       	cbi	0x0b, 6	; 11
    4a5e:	08 95       	ret

00004a60 <__LED_init>:
    4a60:	55 9a       	sbi	0x0a, 5	; 10
    4a62:	56 9a       	sbi	0x0a, 6	; 10
    4a64:	08 95       	ret

00004a66 <__LED_set_pattern>:
    4a66:	85 fd       	sbrc	r24, 5
    4a68:	5d 9a       	sbi	0x0b, 5	; 11
    4a6a:	86 fd       	sbrc	r24, 6
    4a6c:	5e 9a       	sbi	0x0b, 6	; 11
    4a6e:	08 95       	ret

00004a70 <ATMEGA_open>:
    4a70:	80 e0       	ldi	r24, 0x00	; 0
    4a72:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    4a76:	88 23       	and	r24, r24
    4a78:	51 f4       	brne	.+20     	; 0x4a8e <ATMEGA_open+0x1e>
    4a7a:	f8 94       	cli
    4a7c:	0e 94 4a 28 	call	0x5094	; 0x5094 <__ATMEGA_init>
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	0e 94 4a 25 	call	0x4a94	; 0x4a94 <ATMEGA_set_clk_mode>
    4a86:	80 e0       	ldi	r24, 0x00	; 0
    4a88:	61 e0       	ldi	r22, 0x01	; 1
    4a8a:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    4a8e:	80 e0       	ldi	r24, 0x00	; 0
    4a90:	91 e0       	ldi	r25, 0x01	; 1
    4a92:	08 95       	ret

00004a94 <ATMEGA_set_clk_mode>:
    4a94:	81 30       	cpi	r24, 0x01	; 1
    4a96:	49 f0       	breq	.+18     	; 0x4aaa <ATMEGA_set_clk_mode+0x16>
    4a98:	f8 94       	cli
    4a9a:	81 30       	cpi	r24, 0x01	; 1
    4a9c:	20 f1       	brcs	.+72     	; 0x4ae6 <ATMEGA_set_clk_mode+0x52>
    4a9e:	82 30       	cpi	r24, 0x02	; 2
    4aa0:	b1 f0       	breq	.+44     	; 0x4ace <ATMEGA_set_clk_mode+0x3a>
    4aa2:	83 30       	cpi	r24, 0x03	; 3
    4aa4:	09 f0       	breq	.+2      	; 0x4aa8 <ATMEGA_set_clk_mode+0x14>
    4aa6:	45 c0       	rjmp	.+138    	; 0x4b32 <ATMEGA_set_clk_mode+0x9e>
    4aa8:	17 c0       	rjmp	.+46     	; 0x4ad8 <ATMEGA_set_clk_mode+0x44>
    4aaa:	2c 9a       	sbi	0x05, 4	; 5
    4aac:	80 e8       	ldi	r24, 0x80	; 128
    4aae:	80 93 61 00 	sts	0x0061, r24
    4ab2:	10 92 61 00 	sts	0x0061, r1
    4ab6:	80 e0       	ldi	r24, 0x00	; 0
    4ab8:	90 e0       	ldi	r25, 0x00	; 0
    4aba:	00 00       	nop
    4abc:	01 96       	adiw	r24, 0x01	; 1
    4abe:	88 32       	cpi	r24, 0x28	; 40
    4ac0:	91 05       	cpc	r25, r1
    4ac2:	d9 f7       	brne	.-10     	; 0x4aba <ATMEGA_set_clk_mode+0x26>
    4ac4:	10 92 68 00 	sts	0x0068, r1
    4ac8:	10 92 6b 00 	sts	0x006B, r1
    4acc:	08 95       	ret
    4ace:	80 e8       	ldi	r24, 0x80	; 128
    4ad0:	80 93 61 00 	sts	0x0061, r24
    4ad4:	83 e0       	ldi	r24, 0x03	; 3
    4ad6:	04 c0       	rjmp	.+8      	; 0x4ae0 <ATMEGA_set_clk_mode+0x4c>
    4ad8:	80 e8       	ldi	r24, 0x80	; 128
    4ada:	80 93 61 00 	sts	0x0061, r24
    4ade:	88 e0       	ldi	r24, 0x08	; 8
    4ae0:	80 93 61 00 	sts	0x0061, r24
    4ae4:	28 c0       	rjmp	.+80     	; 0x4b36 <ATMEGA_set_clk_mode+0xa2>
    4ae6:	80 e0       	ldi	r24, 0x00	; 0
    4ae8:	90 e0       	ldi	r25, 0x00	; 0
    4aea:	00 00       	nop
    4aec:	01 96       	adiw	r24, 0x01	; 1
    4aee:	2d e6       	ldi	r18, 0x6D	; 109
    4af0:	80 36       	cpi	r24, 0x60	; 96
    4af2:	92 07       	cpc	r25, r18
    4af4:	d1 f7       	brne	.-12     	; 0x4aea <ATMEGA_set_clk_mode+0x56>
    4af6:	2c 98       	cbi	0x05, 4	; 5
    4af8:	80 e0       	ldi	r24, 0x00	; 0
    4afa:	90 e0       	ldi	r25, 0x00	; 0
    4afc:	00 00       	nop
    4afe:	01 96       	adiw	r24, 0x01	; 1
    4b00:	2d e6       	ldi	r18, 0x6D	; 109
    4b02:	80 36       	cpi	r24, 0x60	; 96
    4b04:	92 07       	cpc	r25, r18
    4b06:	d1 f7       	brne	.-12     	; 0x4afc <ATMEGA_set_clk_mode+0x68>
    4b08:	10 92 7a 00 	sts	0x007A, r1
    4b0c:	8f ef       	ldi	r24, 0xFF	; 255
    4b0e:	80 93 64 00 	sts	0x0064, r24
    4b12:	80 91 68 00 	lds	r24, 0x0068
    4b16:	81 60       	ori	r24, 0x01	; 1
    4b18:	80 93 68 00 	sts	0x0068, r24
    4b1c:	80 91 6b 00 	lds	r24, 0x006B
    4b20:	84 60       	ori	r24, 0x04	; 4
    4b22:	80 93 6b 00 	sts	0x006B, r24
    4b26:	78 94       	sei
    4b28:	83 b7       	in	r24, 0x33	; 51
    4b2a:	81 60       	ori	r24, 0x01	; 1
    4b2c:	83 bf       	out	0x33, r24	; 51
    4b2e:	88 95       	sleep
    4b30:	08 95       	ret
    4b32:	82 30       	cpi	r24, 0x02	; 2
    4b34:	08 f0       	brcs	.+2      	; 0x4b38 <ATMEGA_set_clk_mode+0xa4>
    4b36:	78 94       	sei
    4b38:	08 95       	ret

00004b3a <SPI_open>:
    4b3a:	0f 93       	push	r16
    4b3c:	1f 93       	push	r17
    4b3e:	0e 94 76 28 	call	0x50ec	; 0x50ec <__SPI_init>
    4b42:	80 e0       	ldi	r24, 0x00	; 0
    4b44:	65 e6       	ldi	r22, 0x65	; 101
    4b46:	78 e2       	ldi	r23, 0x28	; 40
    4b48:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <SPI_set_config_func>
    4b4c:	81 e0       	ldi	r24, 0x01	; 1
    4b4e:	6d e5       	ldi	r22, 0x5D	; 93
    4b50:	78 e2       	ldi	r23, 0x28	; 40
    4b52:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <SPI_set_config_func>
    4b56:	82 e0       	ldi	r24, 0x02	; 2
    4b58:	65 e5       	ldi	r22, 0x55	; 85
    4b5a:	78 e2       	ldi	r23, 0x28	; 40
    4b5c:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <SPI_set_config_func>
    4b60:	86 e0       	ldi	r24, 0x06	; 6
    4b62:	6d e6       	ldi	r22, 0x6D	; 109
    4b64:	78 e2       	ldi	r23, 0x28	; 40
    4b66:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <SPI_set_config_func>
    4b6a:	0d e4       	ldi	r16, 0x4D	; 77
    4b6c:	18 e2       	ldi	r17, 0x28	; 40
    4b6e:	83 e0       	ldi	r24, 0x03	; 3
    4b70:	b8 01       	movw	r22, r16
    4b72:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <SPI_set_config_func>
    4b76:	84 e0       	ldi	r24, 0x04	; 4
    4b78:	b8 01       	movw	r22, r16
    4b7a:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <SPI_set_config_func>
    4b7e:	85 e0       	ldi	r24, 0x05	; 5
    4b80:	b8 01       	movw	r22, r16
    4b82:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <SPI_set_config_func>
    4b86:	87 e0       	ldi	r24, 0x07	; 7
    4b88:	b8 01       	movw	r22, r16
    4b8a:	0e 94 e8 25 	call	0x4bd0	; 0x4bd0 <SPI_set_config_func>
    4b8e:	82 e0       	ldi	r24, 0x02	; 2
    4b90:	61 e0       	ldi	r22, 0x01	; 1
    4b92:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    4b96:	8f ef       	ldi	r24, 0xFF	; 255
    4b98:	80 93 d0 07 	sts	0x07D0, r24
    4b9c:	87 e0       	ldi	r24, 0x07	; 7
    4b9e:	0e 94 24 1b 	call	0x3648	; 0x3648 <SPI_set_slave_addr>
    4ba2:	82 e0       	ldi	r24, 0x02	; 2
    4ba4:	91 e0       	ldi	r25, 0x01	; 1
    4ba6:	1f 91       	pop	r17
    4ba8:	0f 91       	pop	r16
    4baa:	08 95       	ret

00004bac <SPI_receive>:
    4bac:	1f 93       	push	r17
    4bae:	16 2f       	mov	r17, r22
    4bb0:	0e 94 24 1b 	call	0x3648	; 0x3648 <SPI_set_slave_addr>
    4bb4:	82 e0       	ldi	r24, 0x02	; 2
    4bb6:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    4bba:	81 30       	cpi	r24, 0x01	; 1
    4bbc:	11 f0       	breq	.+4      	; 0x4bc2 <SPI_receive+0x16>
    4bbe:	80 e0       	ldi	r24, 0x00	; 0
    4bc0:	05 c0       	rjmp	.+10     	; 0x4bcc <SPI_receive+0x20>
    4bc2:	1e bd       	out	0x2e, r17	; 46
    4bc4:	0d b4       	in	r0, 0x2d	; 45
    4bc6:	07 fe       	sbrs	r0, 7
    4bc8:	fd cf       	rjmp	.-6      	; 0x4bc4 <SPI_receive+0x18>
    4bca:	8e b5       	in	r24, 0x2e	; 46
    4bcc:	1f 91       	pop	r17
    4bce:	08 95       	ret

00004bd0 <SPI_set_config_func>:
    4bd0:	e8 2f       	mov	r30, r24
    4bd2:	f0 e0       	ldi	r31, 0x00	; 0
    4bd4:	ee 0f       	add	r30, r30
    4bd6:	ff 1f       	adc	r31, r31
    4bd8:	ea 56       	subi	r30, 0x6A	; 106
    4bda:	fb 4f       	sbci	r31, 0xFB	; 251
    4bdc:	71 83       	std	Z+1, r23	; 0x01
    4bde:	60 83       	st	Z, r22
    4be0:	08 95       	ret

00004be2 <__SPKR_TIMER1_COMPA_vect>:
    4be2:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <SPKR_clk>
    4be6:	08 95       	ret

00004be8 <SPKR_clk>:
    4be8:	80 91 a8 04 	lds	r24, 0x04A8
    4bec:	90 91 a9 04 	lds	r25, 0x04A9
    4bf0:	a0 91 aa 04 	lds	r26, 0x04AA
    4bf4:	b0 91 ab 04 	lds	r27, 0x04AB
    4bf8:	20 91 ac 04 	lds	r18, 0x04AC
    4bfc:	30 91 ad 04 	lds	r19, 0x04AD
    4c00:	40 91 ae 04 	lds	r20, 0x04AE
    4c04:	50 91 af 04 	lds	r21, 0x04AF
    4c08:	28 0f       	add	r18, r24
    4c0a:	39 1f       	adc	r19, r25
    4c0c:	4a 1f       	adc	r20, r26
    4c0e:	5b 1f       	adc	r21, r27
    4c10:	20 93 a8 04 	sts	0x04A8, r18
    4c14:	30 93 a9 04 	sts	0x04A9, r19
    4c18:	40 93 aa 04 	sts	0x04AA, r20
    4c1c:	50 93 ab 04 	sts	0x04AB, r21
    4c20:	80 91 a8 04 	lds	r24, 0x04A8
    4c24:	90 91 a9 04 	lds	r25, 0x04A9
    4c28:	a0 91 aa 04 	lds	r26, 0x04AA
    4c2c:	b0 91 ab 04 	lds	r27, 0x04AB
    4c30:	88 51       	subi	r24, 0x18	; 24
    4c32:	96 4f       	sbci	r25, 0xF6	; 246
    4c34:	a0 40       	sbci	r26, 0x00	; 0
    4c36:	b0 40       	sbci	r27, 0x00	; 0
    4c38:	bc f0       	brlt	.+46     	; 0x4c68 <SPKR_clk+0x80>
    4c3a:	8b b1       	in	r24, 0x0b	; 11
    4c3c:	80 58       	subi	r24, 0x80	; 128
    4c3e:	8b b9       	out	0x0b, r24	; 11
    4c40:	80 91 a8 04 	lds	r24, 0x04A8
    4c44:	90 91 a9 04 	lds	r25, 0x04A9
    4c48:	a0 91 aa 04 	lds	r26, 0x04AA
    4c4c:	b0 91 ab 04 	lds	r27, 0x04AB
    4c50:	88 51       	subi	r24, 0x18	; 24
    4c52:	96 4f       	sbci	r25, 0xF6	; 246
    4c54:	a0 40       	sbci	r26, 0x00	; 0
    4c56:	b0 40       	sbci	r27, 0x00	; 0
    4c58:	80 93 a8 04 	sts	0x04A8, r24
    4c5c:	90 93 a9 04 	sts	0x04A9, r25
    4c60:	a0 93 aa 04 	sts	0x04AA, r26
    4c64:	b0 93 ab 04 	sts	0x04AB, r27
    4c68:	08 95       	ret

00004c6a <__SPKR_close_beep_mode>:
    4c6a:	8a e0       	ldi	r24, 0x0A	; 10
    4c6c:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    4c70:	81 30       	cpi	r24, 0x01	; 1
    4c72:	41 f4       	brne	.+16     	; 0x4c84 <__SPKR_close_beep_mode+0x1a>
    4c74:	0e 94 94 28 	call	0x5128	; 0x5128 <__SPKR_close>
    4c78:	10 92 a7 04 	sts	0x04A7, r1
    4c7c:	8a e0       	ldi	r24, 0x0A	; 10
    4c7e:	60 e0       	ldi	r22, 0x00	; 0
    4c80:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    4c84:	08 95       	ret

00004c86 <__SPKR_close_tone_mode>:
    4c86:	89 e0       	ldi	r24, 0x09	; 9
    4c88:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    4c8c:	81 30       	cpi	r24, 0x01	; 1
    4c8e:	d9 f4       	brne	.+54     	; 0x4cc6 <__SPKR_close_tone_mode+0x40>
    4c90:	80 91 a6 04 	lds	r24, 0x04A6
    4c94:	88 23       	and	r24, r24
    4c96:	11 f0       	breq	.+4      	; 0x4c9c <__SPKR_close_tone_mode+0x16>
    4c98:	0e 94 e5 26 	call	0x4dca	; 0x4dca <__SPKR_stop>
    4c9c:	82 e0       	ldi	r24, 0x02	; 2
    4c9e:	0e 94 94 28 	call	0x5128	; 0x5128 <__SPKR_close>
    4ca2:	80 91 b4 04 	lds	r24, 0x04B4
    4ca6:	90 91 b5 04 	lds	r25, 0x04B5
    4caa:	00 97       	sbiw	r24, 0x00	; 0
    4cac:	31 f0       	breq	.+12     	; 0x4cba <__SPKR_close_tone_mode+0x34>
    4cae:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <free>
    4cb2:	10 92 b5 04 	sts	0x04B5, r1
    4cb6:	10 92 b4 04 	sts	0x04B4, r1
    4cba:	10 92 a6 04 	sts	0x04A6, r1
    4cbe:	89 e0       	ldi	r24, 0x09	; 9
    4cc0:	60 e0       	ldi	r22, 0x00	; 0
    4cc2:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    4cc6:	08 95       	ret

00004cc8 <SPKR_close>:
    4cc8:	81 30       	cpi	r24, 0x01	; 1
    4cca:	29 f0       	breq	.+10     	; 0x4cd6 <SPKR_close+0xe>
    4ccc:	82 30       	cpi	r24, 0x02	; 2
    4cce:	29 f4       	brne	.+10     	; 0x4cda <SPKR_close+0x12>
    4cd0:	0e 94 43 26 	call	0x4c86	; 0x4c86 <__SPKR_close_tone_mode>
    4cd4:	08 95       	ret
    4cd6:	0e 94 35 26 	call	0x4c6a	; 0x4c6a <__SPKR_close_beep_mode>
    4cda:	08 95       	ret

00004cdc <__SPKR_init>:
    4cdc:	98 2f       	mov	r25, r24
    4cde:	80 91 a6 04 	lds	r24, 0x04A6
    4ce2:	88 23       	and	r24, r24
    4ce4:	31 f4       	brne	.+12     	; 0x4cf2 <__SPKR_init+0x16>
    4ce6:	80 91 a7 04 	lds	r24, 0x04A7
    4cea:	88 23       	and	r24, r24
    4cec:	11 f4       	brne	.+4      	; 0x4cf2 <__SPKR_init+0x16>
    4cee:	57 9a       	sbi	0x0a, 7	; 10
    4cf0:	5f 98       	cbi	0x0b, 7	; 11
    4cf2:	80 91 a6 04 	lds	r24, 0x04A6
    4cf6:	88 23       	and	r24, r24
    4cf8:	d1 f4       	brne	.+52     	; 0x4d2e <__SPKR_init+0x52>
    4cfa:	92 30       	cpi	r25, 0x02	; 2
    4cfc:	c1 f4       	brne	.+48     	; 0x4d2e <__SPKR_init+0x52>
    4cfe:	10 92 80 00 	sts	0x0080, r1
    4d02:	10 92 81 00 	sts	0x0081, r1
    4d06:	80 91 81 00 	lds	r24, 0x0081
    4d0a:	88 60       	ori	r24, 0x08	; 8
    4d0c:	80 93 81 00 	sts	0x0081, r24
    4d10:	80 91 81 00 	lds	r24, 0x0081
    4d14:	81 60       	ori	r24, 0x01	; 1
    4d16:	80 93 81 00 	sts	0x0081, r24
    4d1a:	10 92 85 00 	sts	0x0085, r1
    4d1e:	10 92 84 00 	sts	0x0084, r1
    4d22:	81 e0       	ldi	r24, 0x01	; 1
    4d24:	80 93 89 00 	sts	0x0089, r24
    4d28:	80 e9       	ldi	r24, 0x90	; 144
    4d2a:	80 93 88 00 	sts	0x0088, r24
    4d2e:	08 95       	ret

00004d30 <SPKR_play_beep>:
    4d30:	8f 92       	push	r8
    4d32:	9f 92       	push	r9
    4d34:	af 92       	push	r10
    4d36:	bf 92       	push	r11
    4d38:	cf 92       	push	r12
    4d3a:	df 92       	push	r13
    4d3c:	ef 92       	push	r14
    4d3e:	ff 92       	push	r15
    4d40:	0f 93       	push	r16
    4d42:	1f 93       	push	r17
    4d44:	cf 93       	push	r28
    4d46:	df 93       	push	r29
    4d48:	4b 01       	movw	r8, r22
    4d4a:	5c 01       	movw	r10, r24
    4d4c:	ea 01       	movw	r28, r20
    4d4e:	b9 01       	movw	r22, r18
    4d50:	21 15       	cp	r18, r1
    4d52:	31 05       	cpc	r19, r1
    4d54:	39 f1       	breq	.+78     	; 0x4da4 <SPKR_play_beep+0x74>
    4d56:	9e 01       	movw	r18, r28
    4d58:	44 27       	eor	r20, r20
    4d5a:	37 fd       	sbrc	r19, 7
    4d5c:	40 95       	com	r20
    4d5e:	54 2f       	mov	r21, r20
    4d60:	65 36       	cpi	r22, 0x65	; 101
    4d62:	71 05       	cpc	r23, r1
    4d64:	10 f0       	brcs	.+4      	; 0x4d6a <SPKR_play_beep+0x3a>
    4d66:	64 e6       	ldi	r22, 0x64	; 100
    4d68:	70 e0       	ldi	r23, 0x00	; 0
    4d6a:	80 e0       	ldi	r24, 0x00	; 0
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <__mulsi3>
    4d72:	24 e6       	ldi	r18, 0x64	; 100
    4d74:	30 e0       	ldi	r19, 0x00	; 0
    4d76:	40 e0       	ldi	r20, 0x00	; 0
    4d78:	50 e0       	ldi	r21, 0x00	; 0
    4d7a:	0e 94 14 34 	call	0x6828	; 0x6828 <__udivmodsi4>
    4d7e:	79 01       	movw	r14, r18
    4d80:	8a 01       	movw	r16, r20
    4d82:	c5 01       	movw	r24, r10
    4d84:	b4 01       	movw	r22, r8
    4d86:	0e 94 7d 28 	call	0x50fa	; 0x50fa <SPKR_beep>
    4d8a:	c7 01       	movw	r24, r14
    4d8c:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
    4d90:	60 e0       	ldi	r22, 0x00	; 0
    4d92:	70 e0       	ldi	r23, 0x00	; 0
    4d94:	80 e0       	ldi	r24, 0x00	; 0
    4d96:	90 e0       	ldi	r25, 0x00	; 0
    4d98:	0e 94 7d 28 	call	0x50fa	; 0x50fa <SPKR_beep>
    4d9c:	ce 01       	movw	r24, r28
    4d9e:	8e 19       	sub	r24, r14
    4da0:	9f 09       	sbc	r25, r15
    4da2:	04 c0       	rjmp	.+8      	; 0x4dac <SPKR_play_beep+0x7c>
    4da4:	41 15       	cp	r20, r1
    4da6:	51 05       	cpc	r21, r1
    4da8:	19 f0       	breq	.+6      	; 0x4db0 <SPKR_play_beep+0x80>
    4daa:	ca 01       	movw	r24, r20
    4dac:	0e 94 c9 20 	call	0x4192	; 0x4192 <TMRSRVC_delay>
    4db0:	df 91       	pop	r29
    4db2:	cf 91       	pop	r28
    4db4:	1f 91       	pop	r17
    4db6:	0f 91       	pop	r16
    4db8:	ff 90       	pop	r15
    4dba:	ef 90       	pop	r14
    4dbc:	df 90       	pop	r13
    4dbe:	cf 90       	pop	r12
    4dc0:	bf 90       	pop	r11
    4dc2:	af 90       	pop	r10
    4dc4:	9f 90       	pop	r9
    4dc6:	8f 90       	pop	r8
    4dc8:	08 95       	ret

00004dca <__SPKR_stop>:
    4dca:	ef e6       	ldi	r30, 0x6F	; 111
    4dcc:	f0 e0       	ldi	r31, 0x00	; 0
    4dce:	80 81       	ld	r24, Z
    4dd0:	8d 7f       	andi	r24, 0xFD	; 253
    4dd2:	80 83       	st	Z, r24
    4dd4:	08 95       	ret

00004dd6 <STEPPER_go>:
    4dd6:	98 2f       	mov	r25, r24
    4dd8:	81 e0       	ldi	r24, 0x01	; 1
    4dda:	80 93 b5 07 	sts	0x07B5, r24
    4dde:	91 30       	cpi	r25, 0x01	; 1
    4de0:	51 f0       	breq	.+20     	; 0x4df6 <STEPPER_go+0x20>
    4de2:	91 30       	cpi	r25, 0x01	; 1
    4de4:	18 f0       	brcs	.+6      	; 0x4dec <STEPPER_go+0x16>
    4de6:	92 30       	cpi	r25, 0x02	; 2
    4de8:	41 f4       	brne	.+16     	; 0x4dfa <STEPPER_go+0x24>
    4dea:	03 c0       	rjmp	.+6      	; 0x4df2 <STEPPER_go+0x1c>
    4dec:	10 92 9d 07 	sts	0x079D, r1
    4df0:	04 c0       	rjmp	.+8      	; 0x4dfa <STEPPER_go+0x24>
    4df2:	10 92 9d 07 	sts	0x079D, r1
    4df6:	10 92 9e 07 	sts	0x079E, r1
    4dfa:	10 92 b5 07 	sts	0x07B5, r1
    4dfe:	08 95       	ret

00004e00 <__STEPPER_init>:
    4e00:	3a 9a       	sbi	0x07, 2	; 7
    4e02:	3b 9a       	sbi	0x07, 3	; 7
    4e04:	3c 9a       	sbi	0x07, 4	; 7
    4e06:	3d 9a       	sbi	0x07, 5	; 7
    4e08:	3e 9a       	sbi	0x07, 6	; 7
    4e0a:	3f 9a       	sbi	0x07, 7	; 7
    4e0c:	88 b1       	in	r24, 0x08	; 8
    4e0e:	83 70       	andi	r24, 0x03	; 3
    4e10:	88 b9       	out	0x08, r24	; 8
    4e12:	08 95       	ret

00004e14 <STEPPER_set_steps>:
    4e14:	98 2f       	mov	r25, r24
    4e16:	81 e0       	ldi	r24, 0x01	; 1
    4e18:	80 93 b5 07 	sts	0x07B5, r24
    4e1c:	91 30       	cpi	r25, 0x01	; 1
    4e1e:	71 f0       	breq	.+28     	; 0x4e3c <STEPPER_set_steps+0x28>
    4e20:	91 30       	cpi	r25, 0x01	; 1
    4e22:	18 f0       	brcs	.+6      	; 0x4e2a <STEPPER_set_steps+0x16>
    4e24:	92 30       	cpi	r25, 0x02	; 2
    4e26:	71 f4       	brne	.+28     	; 0x4e44 <STEPPER_set_steps+0x30>
    4e28:	05 c0       	rjmp	.+10     	; 0x4e34 <STEPPER_set_steps+0x20>
    4e2a:	70 93 92 07 	sts	0x0792, r23
    4e2e:	60 93 91 07 	sts	0x0791, r22
    4e32:	08 c0       	rjmp	.+16     	; 0x4e44 <STEPPER_set_steps+0x30>
    4e34:	70 93 92 07 	sts	0x0792, r23
    4e38:	60 93 91 07 	sts	0x0791, r22
    4e3c:	70 93 94 07 	sts	0x0794, r23
    4e40:	60 93 93 07 	sts	0x0793, r22
    4e44:	10 92 b5 07 	sts	0x07B5, r1
    4e48:	08 95       	ret

00004e4a <STEPPER_set_stop_mode>:
    4e4a:	98 2f       	mov	r25, r24
    4e4c:	81 e0       	ldi	r24, 0x01	; 1
    4e4e:	80 93 b5 07 	sts	0x07B5, r24
    4e52:	91 30       	cpi	r25, 0x01	; 1
    4e54:	51 f0       	breq	.+20     	; 0x4e6a <STEPPER_set_stop_mode+0x20>
    4e56:	91 30       	cpi	r25, 0x01	; 1
    4e58:	18 f0       	brcs	.+6      	; 0x4e60 <STEPPER_set_stop_mode+0x16>
    4e5a:	92 30       	cpi	r25, 0x02	; 2
    4e5c:	41 f4       	brne	.+16     	; 0x4e6e <STEPPER_set_stop_mode+0x24>
    4e5e:	03 c0       	rjmp	.+6      	; 0x4e66 <STEPPER_set_stop_mode+0x1c>
    4e60:	60 93 9f 07 	sts	0x079F, r22
    4e64:	04 c0       	rjmp	.+8      	; 0x4e6e <STEPPER_set_stop_mode+0x24>
    4e66:	60 93 9f 07 	sts	0x079F, r22
    4e6a:	60 93 a0 07 	sts	0x07A0, r22
    4e6e:	10 92 b5 07 	sts	0x07B5, r1
    4e72:	08 95       	ret

00004e74 <STEPPER_setup_decels>:
    4e74:	0f 93       	push	r16
    4e76:	1f 93       	push	r17
    4e78:	cf 93       	push	r28
    4e7a:	df 93       	push	r29
    4e7c:	eb 01       	movw	r28, r22
    4e7e:	8a 01       	movw	r16, r20
    4e80:	81 30       	cpi	r24, 0x01	; 1
    4e82:	01 f1       	breq	.+64     	; 0x4ec4 <STEPPER_setup_decels+0x50>
    4e84:	81 30       	cpi	r24, 0x01	; 1
    4e86:	18 f0       	brcs	.+6      	; 0x4e8e <STEPPER_setup_decels+0x1a>
    4e88:	82 30       	cpi	r24, 0x02	; 2
    4e8a:	61 f5       	brne	.+88     	; 0x4ee4 <STEPPER_setup_decels+0x70>
    4e8c:	0d c0       	rjmp	.+26     	; 0x4ea8 <STEPPER_setup_decels+0x34>
    4e8e:	80 91 89 07 	lds	r24, 0x0789
    4e92:	90 91 8a 07 	lds	r25, 0x078A
    4e96:	89 2b       	or	r24, r25
    4e98:	11 f0       	breq	.+4      	; 0x4e9e <STEPPER_setup_decels+0x2a>
    4e9a:	80 e0       	ldi	r24, 0x00	; 0
    4e9c:	1a c0       	rjmp	.+52     	; 0x4ed2 <STEPPER_setup_decels+0x5e>
    4e9e:	10 92 96 07 	sts	0x0796, r1
    4ea2:	10 92 95 07 	sts	0x0795, r1
    4ea6:	1e c0       	rjmp	.+60     	; 0x4ee4 <STEPPER_setup_decels+0x70>
    4ea8:	80 91 89 07 	lds	r24, 0x0789
    4eac:	90 91 8a 07 	lds	r25, 0x078A
    4eb0:	89 2b       	or	r24, r25
    4eb2:	21 f0       	breq	.+8      	; 0x4ebc <STEPPER_setup_decels+0x48>
    4eb4:	80 e0       	ldi	r24, 0x00	; 0
    4eb6:	0e 94 b0 28 	call	0x5160	; 0x5160 <STEPPER_set_decel_step_values>
    4eba:	04 c0       	rjmp	.+8      	; 0x4ec4 <STEPPER_setup_decels+0x50>
    4ebc:	10 92 96 07 	sts	0x0796, r1
    4ec0:	10 92 95 07 	sts	0x0795, r1
    4ec4:	80 91 8b 07 	lds	r24, 0x078B
    4ec8:	90 91 8c 07 	lds	r25, 0x078C
    4ecc:	89 2b       	or	r24, r25
    4ece:	31 f0       	breq	.+12     	; 0x4edc <STEPPER_setup_decels+0x68>
    4ed0:	81 e0       	ldi	r24, 0x01	; 1
    4ed2:	be 01       	movw	r22, r28
    4ed4:	a8 01       	movw	r20, r16
    4ed6:	0e 94 b0 28 	call	0x5160	; 0x5160 <STEPPER_set_decel_step_values>
    4eda:	04 c0       	rjmp	.+8      	; 0x4ee4 <STEPPER_setup_decels+0x70>
    4edc:	10 92 98 07 	sts	0x0798, r1
    4ee0:	10 92 97 07 	sts	0x0797, r1
    4ee4:	df 91       	pop	r29
    4ee6:	cf 91       	pop	r28
    4ee8:	1f 91       	pop	r17
    4eea:	0f 91       	pop	r16
    4eec:	08 95       	ret

00004eee <SYS_init>:
    4eee:	10 92 b8 07 	sts	0x07B8, r1
    4ef2:	10 92 b9 07 	sts	0x07B9, r1
    4ef6:	10 92 bd 07 	sts	0x07BD, r1
    4efa:	10 92 ba 07 	sts	0x07BA, r1
    4efe:	10 92 bc 07 	sts	0x07BC, r1
    4f02:	10 92 be 07 	sts	0x07BE, r1
    4f06:	10 92 bf 07 	sts	0x07BF, r1
    4f0a:	10 92 c0 07 	sts	0x07C0, r1
    4f0e:	10 92 c1 07 	sts	0x07C1, r1
    4f12:	10 92 c2 07 	sts	0x07C2, r1
    4f16:	10 92 c3 07 	sts	0x07C3, r1
    4f1a:	10 92 c4 07 	sts	0x07C4, r1
    4f1e:	10 92 c5 07 	sts	0x07C5, r1
    4f22:	10 92 c6 07 	sts	0x07C6, r1
    4f26:	10 92 c7 07 	sts	0x07C7, r1
    4f2a:	10 92 c8 07 	sts	0x07C8, r1
    4f2e:	10 92 c9 07 	sts	0x07C9, r1
    4f32:	08 95       	ret

00004f34 <TMRSRVC_insert>:
    4f34:	cf 92       	push	r12
    4f36:	df 92       	push	r13
    4f38:	ef 92       	push	r14
    4f3a:	ff 92       	push	r15
    4f3c:	0f 93       	push	r16
    4f3e:	1f 93       	push	r17
    4f40:	cf 93       	push	r28
    4f42:	df 93       	push	r29
    4f44:	ec 01       	movw	r28, r24
    4f46:	80 91 ef 07 	lds	r24, 0x07EF
    4f4a:	88 23       	and	r24, r24
    4f4c:	39 f4       	brne	.+14     	; 0x4f5c <TMRSRVC_insert+0x28>
    4f4e:	d0 93 f1 07 	sts	0x07F1, r29
    4f52:	c0 93 f0 07 	sts	0x07F0, r28
    4f56:	0e 94 28 28 	call	0x5050	; 0x5050 <TMRSRVC_start>
    4f5a:	47 c0       	rjmp	.+142    	; 0x4fea <TMRSRVC_insert+0xb6>
    4f5c:	c0 90 f0 07 	lds	r12, 0x07F0
    4f60:	d0 90 f1 07 	lds	r13, 0x07F1
    4f64:	00 e0       	ldi	r16, 0x00	; 0
    4f66:	10 e0       	ldi	r17, 0x00	; 0
    4f68:	ee 24       	eor	r14, r14
    4f6a:	ff 24       	eor	r15, r15
    4f6c:	37 c0       	rjmp	.+110    	; 0x4fdc <TMRSRVC_insert+0xa8>
    4f6e:	a8 81       	ld	r26, Y
    4f70:	b9 81       	ldd	r27, Y+1	; 0x01
    4f72:	fd 01       	movw	r30, r26
    4f74:	64 81       	ldd	r22, Z+4	; 0x04
    4f76:	75 81       	ldd	r23, Z+5	; 0x05
    4f78:	f6 01       	movw	r30, r12
    4f7a:	40 81       	ld	r20, Z
    4f7c:	51 81       	ldd	r21, Z+1	; 0x01
    4f7e:	fa 01       	movw	r30, r20
    4f80:	84 81       	ldd	r24, Z+4	; 0x04
    4f82:	95 81       	ldd	r25, Z+5	; 0x05
    4f84:	9b 01       	movw	r18, r22
    4f86:	28 1b       	sub	r18, r24
    4f88:	39 0b       	sbc	r19, r25
    4f8a:	37 ff       	sbrs	r19, 7
    4f8c:	0f c0       	rjmp	.+30     	; 0x4fac <TMRSRVC_insert+0x78>
    4f8e:	86 1b       	sub	r24, r22
    4f90:	97 0b       	sbc	r25, r23
    4f92:	95 83       	std	Z+5, r25	; 0x05
    4f94:	84 83       	std	Z+4, r24	; 0x04
    4f96:	db 82       	std	Y+3, r13	; 0x03
    4f98:	ca 82       	std	Y+2, r12	; 0x02
    4f9a:	01 2b       	or	r16, r17
    4f9c:	29 f4       	brne	.+10     	; 0x4fa8 <TMRSRVC_insert+0x74>
    4f9e:	d0 93 f1 07 	sts	0x07F1, r29
    4fa2:	c0 93 f0 07 	sts	0x07F0, r28
    4fa6:	21 c0       	rjmp	.+66     	; 0x4fea <TMRSRVC_insert+0xb6>
    4fa8:	f7 01       	movw	r30, r14
    4faa:	0c c0       	rjmp	.+24     	; 0x4fc4 <TMRSRVC_insert+0x90>
    4fac:	f6 01       	movw	r30, r12
    4fae:	82 81       	ldd	r24, Z+2	; 0x02
    4fb0:	93 81       	ldd	r25, Z+3	; 0x03
    4fb2:	21 15       	cp	r18, r1
    4fb4:	31 05       	cpc	r19, r1
    4fb6:	49 f4       	brne	.+18     	; 0x4fca <TMRSRVC_insert+0x96>
    4fb8:	fd 01       	movw	r30, r26
    4fba:	15 82       	std	Z+5, r1	; 0x05
    4fbc:	14 82       	std	Z+4, r1	; 0x04
    4fbe:	9b 83       	std	Y+3, r25	; 0x03
    4fc0:	8a 83       	std	Y+2, r24	; 0x02
    4fc2:	f6 01       	movw	r30, r12
    4fc4:	d3 83       	std	Z+3, r29	; 0x03
    4fc6:	c2 83       	std	Z+2, r28	; 0x02
    4fc8:	10 c0       	rjmp	.+32     	; 0x4fea <TMRSRVC_insert+0xb6>
    4fca:	fd 01       	movw	r30, r26
    4fcc:	35 83       	std	Z+5, r19	; 0x05
    4fce:	24 83       	std	Z+4, r18	; 0x04
    4fd0:	00 97       	sbiw	r24, 0x00	; 0
    4fd2:	b9 f3       	breq	.-18     	; 0x4fc2 <TMRSRVC_insert+0x8e>
    4fd4:	0f 5f       	subi	r16, 0xFF	; 255
    4fd6:	1f 4f       	sbci	r17, 0xFF	; 255
    4fd8:	76 01       	movw	r14, r12
    4fda:	6c 01       	movw	r12, r24
    4fdc:	80 91 ef 07 	lds	r24, 0x07EF
    4fe0:	90 e0       	ldi	r25, 0x00	; 0
    4fe2:	08 17       	cp	r16, r24
    4fe4:	19 07       	cpc	r17, r25
    4fe6:	18 f2       	brcs	.-122    	; 0x4f6e <TMRSRVC_insert+0x3a>
    4fe8:	ec cf       	rjmp	.-40     	; 0x4fc2 <TMRSRVC_insert+0x8e>
    4fea:	80 91 ef 07 	lds	r24, 0x07EF
    4fee:	8f 5f       	subi	r24, 0xFF	; 255
    4ff0:	80 93 ef 07 	sts	0x07EF, r24
    4ff4:	df 91       	pop	r29
    4ff6:	cf 91       	pop	r28
    4ff8:	1f 91       	pop	r17
    4ffa:	0f 91       	pop	r16
    4ffc:	ff 90       	pop	r15
    4ffe:	ef 90       	pop	r14
    5000:	df 90       	pop	r13
    5002:	cf 90       	pop	r12
    5004:	08 95       	ret

00005006 <TMRSRVC_open>:
    5006:	88 e0       	ldi	r24, 0x08	; 8
    5008:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    500c:	88 23       	and	r24, r24
    500e:	b9 f4       	brne	.+46     	; 0x503e <TMRSRVC_open+0x38>
    5010:	10 92 ef 07 	sts	0x07EF, r1
    5014:	10 92 f1 07 	sts	0x07F1, r1
    5018:	10 92 f0 07 	sts	0x07F0, r1
    501c:	10 92 b6 04 	sts	0x04B6, r1
    5020:	10 92 b7 04 	sts	0x04B7, r1
    5024:	80 e1       	ldi	r24, 0x10	; 16
    5026:	6d e1       	ldi	r22, 0x1D	; 29
    5028:	79 e2       	ldi	r23, 0x29	; 41
    502a:	0e 94 39 28 	call	0x5072	; 0x5072 <__ISR_attach>
    502e:	0e 94 24 29 	call	0x5248	; 0x5248 <__TMRSRVC_init>
    5032:	0e 94 22 28 	call	0x5044	; 0x5044 <__TMRSRVC_start>
    5036:	88 e0       	ldi	r24, 0x08	; 8
    5038:	61 e0       	ldi	r22, 0x01	; 1
    503a:	0e 94 b4 1f 	call	0x3f68	; 0x3f68 <SYS_set_state>
    503e:	88 e0       	ldi	r24, 0x08	; 8
    5040:	91 e0       	ldi	r25, 0x01	; 1
    5042:	08 95       	ret

00005044 <__TMRSRVC_start>:
    5044:	ee e6       	ldi	r30, 0x6E	; 110
    5046:	f0 e0       	ldi	r31, 0x00	; 0
    5048:	80 81       	ld	r24, Z
    504a:	82 60       	ori	r24, 0x02	; 2
    504c:	80 83       	st	Z, r24
    504e:	08 95       	ret

00005050 <TMRSRVC_start>:
    5050:	81 e0       	ldi	r24, 0x01	; 1
    5052:	80 93 b7 04 	sts	0x04B7, r24
    5056:	08 95       	ret

00005058 <I2C_enable>:
    5058:	80 91 f2 07 	lds	r24, 0x07F2
    505c:	81 30       	cpi	r24, 0x01	; 1
    505e:	29 f4       	brne	.+10     	; 0x506a <I2C_enable+0x12>
    5060:	80 91 bc 00 	lds	r24, 0x00BC
    5064:	84 60       	ori	r24, 0x04	; 4
    5066:	80 93 bc 00 	sts	0x00BC, r24
    506a:	08 95       	ret

0000506c <__I2C_init>:
    506c:	38 98       	cbi	0x07, 0	; 7
    506e:	39 98       	cbi	0x07, 1	; 7
    5070:	08 95       	ret

00005072 <__ISR_attach>:
    5072:	80 32       	cpi	r24, 0x20	; 32
    5074:	18 f0       	brcs	.+6      	; 0x507c <__ISR_attach+0xa>
    5076:	20 e0       	ldi	r18, 0x00	; 0
    5078:	30 e0       	ldi	r19, 0x00	; 0
    507a:	0a c0       	rjmp	.+20     	; 0x5090 <__ISR_attach+0x1e>
    507c:	e8 2f       	mov	r30, r24
    507e:	f0 e0       	ldi	r31, 0x00	; 0
    5080:	ee 0f       	add	r30, r30
    5082:	ff 1f       	adc	r31, r31
    5084:	ea 5a       	subi	r30, 0xAA	; 170
    5086:	fb 4f       	sbci	r31, 0xFB	; 251
    5088:	20 81       	ld	r18, Z
    508a:	31 81       	ldd	r19, Z+1	; 0x01
    508c:	71 83       	std	Z+1, r23	; 0x01
    508e:	60 83       	st	Z, r22
    5090:	c9 01       	movw	r24, r18
    5092:	08 95       	ret

00005094 <__ATMEGA_init>:
    5094:	24 9a       	sbi	0x04, 4	; 4
    5096:	2c 9a       	sbi	0x05, 4	; 5
    5098:	08 95       	ret

0000509a <SPI_default_config>:
    509a:	83 e5       	ldi	r24, 0x53	; 83
    509c:	8c bd       	out	0x2c, r24	; 44
    509e:	81 e0       	ldi	r24, 0x01	; 1
    50a0:	8d bd       	out	0x2d, r24	; 45
    50a2:	8d e0       	ldi	r24, 0x0D	; 13
    50a4:	8a 95       	dec	r24
    50a6:	f1 f7       	brne	.-4      	; 0x50a4 <SPI_default_config+0xa>
    50a8:	08 95       	ret

000050aa <SPI_ATtiny0_config>:
    50aa:	83 e5       	ldi	r24, 0x53	; 83
    50ac:	8c bd       	out	0x2c, r24	; 44
    50ae:	1d bc       	out	0x2d, r1	; 45
    50b0:	84 ef       	ldi	r24, 0xF4	; 244
    50b2:	91 e0       	ldi	r25, 0x01	; 1
    50b4:	01 97       	sbiw	r24, 0x01	; 1
    50b6:	f1 f7       	brne	.-4      	; 0x50b4 <SPI_ATtiny0_config+0xa>
    50b8:	08 95       	ret

000050ba <SPI_PSXC_config>:
    50ba:	8f e7       	ldi	r24, 0x7F	; 127
    50bc:	8c bd       	out	0x2c, r24	; 44
    50be:	1d bc       	out	0x2d, r1	; 45
    50c0:	84 ef       	ldi	r24, 0xF4	; 244
    50c2:	91 e0       	ldi	r25, 0x01	; 1
    50c4:	01 97       	sbiw	r24, 0x01	; 1
    50c6:	f1 f7       	brne	.-4      	; 0x50c4 <SPI_PSXC_config+0xa>
    50c8:	08 95       	ret

000050ca <SPI_LCD_config>:
    50ca:	83 e5       	ldi	r24, 0x53	; 83
    50cc:	8c bd       	out	0x2c, r24	; 44
    50ce:	81 e0       	ldi	r24, 0x01	; 1
    50d0:	8d bd       	out	0x2d, r24	; 45
    50d2:	8d e0       	ldi	r24, 0x0D	; 13
    50d4:	8a 95       	dec	r24
    50d6:	f1 f7       	brne	.-4      	; 0x50d4 <SPI_LCD_config+0xa>
    50d8:	08 95       	ret

000050da <SPI_FLASH_config>:
    50da:	83 e5       	ldi	r24, 0x53	; 83
    50dc:	8c bd       	out	0x2c, r24	; 44
    50de:	81 e0       	ldi	r24, 0x01	; 1
    50e0:	8d bd       	out	0x2d, r24	; 45
    50e2:	84 ef       	ldi	r24, 0xF4	; 244
    50e4:	91 e0       	ldi	r25, 0x01	; 1
    50e6:	01 97       	sbiw	r24, 0x01	; 1
    50e8:	f1 f7       	brne	.-4      	; 0x50e6 <SPI_FLASH_config+0xc>
    50ea:	08 95       	ret

000050ec <__SPI_init>:
    50ec:	25 9a       	sbi	0x04, 5	; 4
    50ee:	26 98       	cbi	0x04, 6	; 4
    50f0:	27 9a       	sbi	0x04, 7	; 4
    50f2:	20 9a       	sbi	0x04, 0	; 4
    50f4:	21 9a       	sbi	0x04, 1	; 4
    50f6:	22 9a       	sbi	0x04, 2	; 4
    50f8:	08 95       	ret

000050fa <SPKR_beep>:
    50fa:	9b 01       	movw	r18, r22
    50fc:	ac 01       	movw	r20, r24
    50fe:	80 91 a7 04 	lds	r24, 0x04A7
    5102:	88 23       	and	r24, r24
    5104:	81 f0       	breq	.+32     	; 0x5126 <SPKR_beep+0x2c>
    5106:	da 01       	movw	r26, r20
    5108:	c9 01       	movw	r24, r18
    510a:	88 0f       	add	r24, r24
    510c:	99 1f       	adc	r25, r25
    510e:	aa 1f       	adc	r26, r26
    5110:	bb 1f       	adc	r27, r27
    5112:	90 93 b3 04 	sts	0x04B3, r25
    5116:	80 93 b2 04 	sts	0x04B2, r24
    511a:	21 15       	cp	r18, r1
    511c:	31 05       	cpc	r19, r1
    511e:	41 05       	cpc	r20, r1
    5120:	51 05       	cpc	r21, r1
    5122:	09 f4       	brne	.+2      	; 0x5126 <SPKR_beep+0x2c>
    5124:	5f 98       	cbi	0x0b, 7	; 11
    5126:	08 95       	ret

00005128 <__SPKR_close>:
    5128:	82 30       	cpi	r24, 0x02	; 2
    512a:	29 f4       	brne	.+10     	; 0x5136 <__SPKR_close+0xe>
    512c:	80 91 81 00 	lds	r24, 0x0081
    5130:	8e 7f       	andi	r24, 0xFE	; 254
    5132:	80 93 81 00 	sts	0x0081, r24
    5136:	80 91 a6 04 	lds	r24, 0x04A6
    513a:	81 30       	cpi	r24, 0x01	; 1
    513c:	31 f4       	brne	.+12     	; 0x514a <__SPKR_close+0x22>
    513e:	80 91 a7 04 	lds	r24, 0x04A7
    5142:	81 30       	cpi	r24, 0x01	; 1
    5144:	11 f4       	brne	.+4      	; 0x514a <__SPKR_close+0x22>
    5146:	00 00       	nop
    5148:	08 95       	ret
    514a:	80 91 a6 04 	lds	r24, 0x04A6
    514e:	81 30       	cpi	r24, 0x01	; 1
    5150:	21 f0       	breq	.+8      	; 0x515a <__SPKR_close+0x32>
    5152:	80 91 a7 04 	lds	r24, 0x04A7
    5156:	81 30       	cpi	r24, 0x01	; 1
    5158:	11 f4       	brne	.+4      	; 0x515e <__SPKR_close+0x36>
    515a:	5f 98       	cbi	0x0b, 7	; 11
    515c:	57 98       	cbi	0x0a, 7	; 10
    515e:	08 95       	ret

00005160 <STEPPER_set_decel_step_values>:
    5160:	ef 92       	push	r14
    5162:	ff 92       	push	r15
    5164:	0f 93       	push	r16
    5166:	1f 93       	push	r17
    5168:	cf 93       	push	r28
    516a:	df 93       	push	r29
    516c:	eb 01       	movw	r28, r22
    516e:	88 23       	and	r24, r24
    5170:	21 f0       	breq	.+8      	; 0x517a <STEPPER_set_decel_step_values+0x1a>
    5172:	81 30       	cpi	r24, 0x01	; 1
    5174:	09 f0       	breq	.+2      	; 0x5178 <STEPPER_set_decel_step_values+0x18>
    5176:	5a c0       	rjmp	.+180    	; 0x522c <STEPPER_set_decel_step_values+0xcc>
    5178:	2d c0       	rjmp	.+90     	; 0x51d4 <STEPPER_set_decel_step_values+0x74>
    517a:	9a 01       	movw	r18, r20
    517c:	40 e0       	ldi	r20, 0x00	; 0
    517e:	50 e0       	ldi	r21, 0x00	; 0
    5180:	ca 01       	movw	r24, r20
    5182:	b9 01       	movw	r22, r18
    5184:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <__mulsi3>
    5188:	20 91 89 07 	lds	r18, 0x0789
    518c:	30 91 8a 07 	lds	r19, 0x078A
    5190:	22 0f       	add	r18, r18
    5192:	33 1f       	adc	r19, r19
    5194:	40 e0       	ldi	r20, 0x00	; 0
    5196:	50 e0       	ldi	r21, 0x00	; 0
    5198:	0e 94 14 34 	call	0x6828	; 0x6828 <__udivmodsi4>
    519c:	79 01       	movw	r14, r18
    519e:	8a 01       	movw	r16, r20
    51a0:	a8 01       	movw	r20, r16
    51a2:	97 01       	movw	r18, r14
    51a4:	22 0f       	add	r18, r18
    51a6:	33 1f       	adc	r19, r19
    51a8:	44 1f       	adc	r20, r20
    51aa:	55 1f       	adc	r21, r21
    51ac:	ce 01       	movw	r24, r28
    51ae:	a0 e0       	ldi	r26, 0x00	; 0
    51b0:	b0 e0       	ldi	r27, 0x00	; 0
    51b2:	82 17       	cp	r24, r18
    51b4:	93 07       	cpc	r25, r19
    51b6:	a4 07       	cpc	r26, r20
    51b8:	b5 07       	cpc	r27, r21
    51ba:	28 f0       	brcs	.+10     	; 0x51c6 <STEPPER_set_decel_step_values+0x66>
    51bc:	f0 92 96 07 	sts	0x0796, r15
    51c0:	e0 92 95 07 	sts	0x0795, r14
    51c4:	33 c0       	rjmp	.+102    	; 0x522c <STEPPER_set_decel_step_values+0xcc>
    51c6:	d6 95       	lsr	r29
    51c8:	c7 95       	ror	r28
    51ca:	d0 93 96 07 	sts	0x0796, r29
    51ce:	c0 93 95 07 	sts	0x0795, r28
    51d2:	2c c0       	rjmp	.+88     	; 0x522c <STEPPER_set_decel_step_values+0xcc>
    51d4:	9a 01       	movw	r18, r20
    51d6:	40 e0       	ldi	r20, 0x00	; 0
    51d8:	50 e0       	ldi	r21, 0x00	; 0
    51da:	ca 01       	movw	r24, r20
    51dc:	b9 01       	movw	r22, r18
    51de:	0e 94 e2 33 	call	0x67c4	; 0x67c4 <__mulsi3>
    51e2:	20 91 8b 07 	lds	r18, 0x078B
    51e6:	30 91 8c 07 	lds	r19, 0x078C
    51ea:	22 0f       	add	r18, r18
    51ec:	33 1f       	adc	r19, r19
    51ee:	40 e0       	ldi	r20, 0x00	; 0
    51f0:	50 e0       	ldi	r21, 0x00	; 0
    51f2:	0e 94 14 34 	call	0x6828	; 0x6828 <__udivmodsi4>
    51f6:	79 01       	movw	r14, r18
    51f8:	8a 01       	movw	r16, r20
    51fa:	a8 01       	movw	r20, r16
    51fc:	97 01       	movw	r18, r14
    51fe:	22 0f       	add	r18, r18
    5200:	33 1f       	adc	r19, r19
    5202:	44 1f       	adc	r20, r20
    5204:	55 1f       	adc	r21, r21
    5206:	ce 01       	movw	r24, r28
    5208:	a0 e0       	ldi	r26, 0x00	; 0
    520a:	b0 e0       	ldi	r27, 0x00	; 0
    520c:	82 17       	cp	r24, r18
    520e:	93 07       	cpc	r25, r19
    5210:	a4 07       	cpc	r26, r20
    5212:	b5 07       	cpc	r27, r21
    5214:	28 f0       	brcs	.+10     	; 0x5220 <STEPPER_set_decel_step_values+0xc0>
    5216:	f0 92 98 07 	sts	0x0798, r15
    521a:	e0 92 97 07 	sts	0x0797, r14
    521e:	06 c0       	rjmp	.+12     	; 0x522c <STEPPER_set_decel_step_values+0xcc>
    5220:	d6 95       	lsr	r29
    5222:	c7 95       	ror	r28
    5224:	d0 93 98 07 	sts	0x0798, r29
    5228:	c0 93 97 07 	sts	0x0797, r28
    522c:	df 91       	pop	r29
    522e:	cf 91       	pop	r28
    5230:	1f 91       	pop	r17
    5232:	0f 91       	pop	r16
    5234:	ff 90       	pop	r15
    5236:	ef 90       	pop	r14
    5238:	08 95       	ret

0000523a <__TIMER0_COMPA_vect>:
    523a:	0e 94 2d 29 	call	0x525a	; 0x525a <TMRSRVC_tick>
    523e:	0e 94 6d 29 	call	0x52da	; 0x52da <STEPPER_clk>
    5242:	0e 94 46 29 	call	0x528c	; 0x528c <SPKR_beep_clk>
    5246:	08 95       	ret

00005248 <__TMRSRVC_init>:
    5248:	84 b5       	in	r24, 0x24	; 36
    524a:	82 60       	ori	r24, 0x02	; 2
    524c:	84 bd       	out	0x24, r24	; 36
    524e:	85 b5       	in	r24, 0x25	; 37
    5250:	84 60       	ori	r24, 0x04	; 4
    5252:	85 bd       	out	0x25, r24	; 37
    5254:	8e e4       	ldi	r24, 0x4E	; 78
    5256:	87 bd       	out	0x27, r24	; 39
    5258:	08 95       	ret

0000525a <TMRSRVC_tick>:
    525a:	88 e0       	ldi	r24, 0x08	; 8
    525c:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    5260:	88 23       	and	r24, r24
    5262:	11 f4       	brne	.+4      	; 0x5268 <TMRSRVC_tick+0xe>
    5264:	84 e0       	ldi	r24, 0x04	; 4
    5266:	08 95       	ret
    5268:	80 91 b7 04 	lds	r24, 0x04B7
    526c:	88 23       	and	r24, r24
    526e:	11 f4       	brne	.+4      	; 0x5274 <TMRSRVC_tick+0x1a>
    5270:	83 e0       	ldi	r24, 0x03	; 3
    5272:	08 95       	ret
    5274:	80 91 b6 04 	lds	r24, 0x04B6
    5278:	88 23       	and	r24, r24
    527a:	11 f0       	breq	.+4      	; 0x5280 <TMRSRVC_tick+0x26>
    527c:	82 e0       	ldi	r24, 0x02	; 2
    527e:	08 95       	ret
    5280:	0e 94 ba 2b 	call	0x5774	; 0x5774 <TMRSRVC_process>
    5284:	81 30       	cpi	r24, 0x01	; 1
    5286:	e1 f3       	breq	.-8      	; 0x5280 <TMRSRVC_tick+0x26>
    5288:	80 e0       	ldi	r24, 0x00	; 0
    528a:	08 95       	ret

0000528c <SPKR_beep_clk>:
    528c:	80 91 a7 04 	lds	r24, 0x04A7
    5290:	81 30       	cpi	r24, 0x01	; 1
    5292:	11 f5       	brne	.+68     	; 0x52d8 <SPKR_beep_clk+0x4c>
    5294:	80 91 b0 04 	lds	r24, 0x04B0
    5298:	90 91 b1 04 	lds	r25, 0x04B1
    529c:	20 91 b2 04 	lds	r18, 0x04B2
    52a0:	30 91 b3 04 	lds	r19, 0x04B3
    52a4:	28 0f       	add	r18, r24
    52a6:	39 1f       	adc	r19, r25
    52a8:	30 93 b1 04 	sts	0x04B1, r19
    52ac:	20 93 b0 04 	sts	0x04B0, r18
    52b0:	80 91 b0 04 	lds	r24, 0x04B0
    52b4:	90 91 b1 04 	lds	r25, 0x04B1
    52b8:	88 5e       	subi	r24, 0xE8	; 232
    52ba:	93 40       	sbci	r25, 0x03	; 3
    52bc:	6c f0       	brlt	.+26     	; 0x52d8 <SPKR_beep_clk+0x4c>
    52be:	8b b1       	in	r24, 0x0b	; 11
    52c0:	80 58       	subi	r24, 0x80	; 128
    52c2:	8b b9       	out	0x0b, r24	; 11
    52c4:	80 91 b0 04 	lds	r24, 0x04B0
    52c8:	90 91 b1 04 	lds	r25, 0x04B1
    52cc:	88 5e       	subi	r24, 0xE8	; 232
    52ce:	93 40       	sbci	r25, 0x03	; 3
    52d0:	90 93 b1 04 	sts	0x04B1, r25
    52d4:	80 93 b0 04 	sts	0x04B0, r24
    52d8:	08 95       	ret

000052da <STEPPER_clk>:
    52da:	87 e0       	ldi	r24, 0x07	; 7
    52dc:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SYS_get_state>
    52e0:	81 30       	cpi	r24, 0x01	; 1
    52e2:	09 f0       	breq	.+2      	; 0x52e6 <STEPPER_clk+0xc>
    52e4:	aa c0       	rjmp	.+340    	; 0x543a <STEPPER_clk+0x160>
    52e6:	80 91 89 07 	lds	r24, 0x0789
    52ea:	90 91 8a 07 	lds	r25, 0x078A
    52ee:	89 2b       	or	r24, r25
    52f0:	09 f1       	breq	.+66     	; 0x5334 <STEPPER_clk+0x5a>
    52f2:	80 91 ad 07 	lds	r24, 0x07AD
    52f6:	90 91 ae 07 	lds	r25, 0x07AE
    52fa:	20 91 89 07 	lds	r18, 0x0789
    52fe:	30 91 8a 07 	lds	r19, 0x078A
    5302:	82 0f       	add	r24, r18
    5304:	93 1f       	adc	r25, r19
    5306:	90 93 ae 07 	sts	0x07AE, r25
    530a:	80 93 ad 07 	sts	0x07AD, r24
    530e:	80 91 ad 07 	lds	r24, 0x07AD
    5312:	90 91 ae 07 	lds	r25, 0x07AE
    5316:	88 5e       	subi	r24, 0xE8	; 232
    5318:	93 40       	sbci	r25, 0x03	; 3
    531a:	a4 f0       	brlt	.+40     	; 0x5344 <STEPPER_clk+0x6a>
    531c:	80 91 ad 07 	lds	r24, 0x07AD
    5320:	90 91 ae 07 	lds	r25, 0x07AE
    5324:	88 5e       	subi	r24, 0xE8	; 232
    5326:	93 40       	sbci	r25, 0x03	; 3
    5328:	90 93 ae 07 	sts	0x07AE, r25
    532c:	80 93 ad 07 	sts	0x07AD, r24
    5330:	41 e0       	ldi	r20, 0x01	; 1
    5332:	09 c0       	rjmp	.+18     	; 0x5346 <STEPPER_clk+0x6c>
    5334:	80 91 81 07 	lds	r24, 0x0781
    5338:	90 91 82 07 	lds	r25, 0x0782
    533c:	90 93 86 07 	sts	0x0786, r25
    5340:	80 93 85 07 	sts	0x0785, r24
    5344:	40 e0       	ldi	r20, 0x00	; 0
    5346:	80 91 8b 07 	lds	r24, 0x078B
    534a:	90 91 8c 07 	lds	r25, 0x078C
    534e:	89 2b       	or	r24, r25
    5350:	09 f1       	breq	.+66     	; 0x5394 <STEPPER_clk+0xba>
    5352:	80 91 af 07 	lds	r24, 0x07AF
    5356:	90 91 b0 07 	lds	r25, 0x07B0
    535a:	20 91 8b 07 	lds	r18, 0x078B
    535e:	30 91 8c 07 	lds	r19, 0x078C
    5362:	82 0f       	add	r24, r18
    5364:	93 1f       	adc	r25, r19
    5366:	90 93 b0 07 	sts	0x07B0, r25
    536a:	80 93 af 07 	sts	0x07AF, r24
    536e:	80 91 af 07 	lds	r24, 0x07AF
    5372:	90 91 b0 07 	lds	r25, 0x07B0
    5376:	88 5e       	subi	r24, 0xE8	; 232
    5378:	93 40       	sbci	r25, 0x03	; 3
    537a:	a4 f0       	brlt	.+40     	; 0x53a4 <STEPPER_clk+0xca>
    537c:	80 91 af 07 	lds	r24, 0x07AF
    5380:	90 91 b0 07 	lds	r25, 0x07B0
    5384:	88 5e       	subi	r24, 0xE8	; 232
    5386:	93 40       	sbci	r25, 0x03	; 3
    5388:	90 93 b0 07 	sts	0x07B0, r25
    538c:	80 93 af 07 	sts	0x07AF, r24
    5390:	61 e0       	ldi	r22, 0x01	; 1
    5392:	09 c0       	rjmp	.+18     	; 0x53a6 <STEPPER_clk+0xcc>
    5394:	80 91 83 07 	lds	r24, 0x0783
    5398:	90 91 84 07 	lds	r25, 0x0784
    539c:	90 93 88 07 	sts	0x0788, r25
    53a0:	80 93 87 07 	sts	0x0787, r24
    53a4:	60 e0       	ldi	r22, 0x00	; 0
    53a6:	84 2f       	mov	r24, r20
    53a8:	0e 94 1e 2a 	call	0x543c	; 0x543c <STEPPER_process_accel>
    53ac:	80 91 a9 07 	lds	r24, 0x07A9
    53b0:	90 91 aa 07 	lds	r25, 0x07AA
    53b4:	20 91 85 07 	lds	r18, 0x0785
    53b8:	30 91 86 07 	lds	r19, 0x0786
    53bc:	28 0f       	add	r18, r24
    53be:	39 1f       	adc	r19, r25
    53c0:	30 93 aa 07 	sts	0x07AA, r19
    53c4:	20 93 a9 07 	sts	0x07A9, r18
    53c8:	80 91 a9 07 	lds	r24, 0x07A9
    53cc:	90 91 aa 07 	lds	r25, 0x07AA
    53d0:	88 5e       	subi	r24, 0xE8	; 232
    53d2:	93 40       	sbci	r25, 0x03	; 3
    53d4:	14 f4       	brge	.+4      	; 0x53da <STEPPER_clk+0x100>
    53d6:	40 e0       	ldi	r20, 0x00	; 0
    53d8:	0b c0       	rjmp	.+22     	; 0x53f0 <STEPPER_clk+0x116>
    53da:	80 91 a9 07 	lds	r24, 0x07A9
    53de:	90 91 aa 07 	lds	r25, 0x07AA
    53e2:	88 5e       	subi	r24, 0xE8	; 232
    53e4:	93 40       	sbci	r25, 0x03	; 3
    53e6:	90 93 aa 07 	sts	0x07AA, r25
    53ea:	80 93 a9 07 	sts	0x07A9, r24
    53ee:	41 e0       	ldi	r20, 0x01	; 1
    53f0:	80 91 ab 07 	lds	r24, 0x07AB
    53f4:	90 91 ac 07 	lds	r25, 0x07AC
    53f8:	20 91 87 07 	lds	r18, 0x0787
    53fc:	30 91 88 07 	lds	r19, 0x0788
    5400:	28 0f       	add	r18, r24
    5402:	39 1f       	adc	r19, r25
    5404:	30 93 ac 07 	sts	0x07AC, r19
    5408:	20 93 ab 07 	sts	0x07AB, r18
    540c:	80 91 ab 07 	lds	r24, 0x07AB
    5410:	90 91 ac 07 	lds	r25, 0x07AC
    5414:	88 5e       	subi	r24, 0xE8	; 232
    5416:	93 40       	sbci	r25, 0x03	; 3
    5418:	14 f4       	brge	.+4      	; 0x541e <STEPPER_clk+0x144>
    541a:	60 e0       	ldi	r22, 0x00	; 0
    541c:	0b c0       	rjmp	.+22     	; 0x5434 <STEPPER_clk+0x15a>
    541e:	80 91 ab 07 	lds	r24, 0x07AB
    5422:	90 91 ac 07 	lds	r25, 0x07AC
    5426:	88 5e       	subi	r24, 0xE8	; 232
    5428:	93 40       	sbci	r25, 0x03	; 3
    542a:	90 93 ac 07 	sts	0x07AC, r25
    542e:	80 93 ab 07 	sts	0x07AB, r24
    5432:	61 e0       	ldi	r22, 0x01	; 1
    5434:	84 2f       	mov	r24, r20
    5436:	0e 94 63 2a 	call	0x54c6	; 0x54c6 <STEPPER_process_run_mode>
    543a:	08 95       	ret

0000543c <STEPPER_process_accel>:
    543c:	88 23       	and	r24, r24
    543e:	f1 f0       	breq	.+60     	; 0x547c <STEPPER_process_accel+0x40>
    5440:	20 91 81 07 	lds	r18, 0x0781
    5444:	30 91 82 07 	lds	r19, 0x0782
    5448:	80 91 85 07 	lds	r24, 0x0785
    544c:	90 91 86 07 	lds	r25, 0x0786
    5450:	28 1b       	sub	r18, r24
    5452:	39 0b       	sbc	r19, r25
    5454:	12 16       	cp	r1, r18
    5456:	13 06       	cpc	r1, r19
    5458:	34 f4       	brge	.+12     	; 0x5466 <STEPPER_process_accel+0x2a>
    545a:	80 91 85 07 	lds	r24, 0x0785
    545e:	90 91 86 07 	lds	r25, 0x0786
    5462:	01 96       	adiw	r24, 0x01	; 1
    5464:	07 c0       	rjmp	.+14     	; 0x5474 <STEPPER_process_accel+0x38>
    5466:	23 2b       	or	r18, r19
    5468:	49 f0       	breq	.+18     	; 0x547c <STEPPER_process_accel+0x40>
    546a:	80 91 85 07 	lds	r24, 0x0785
    546e:	90 91 86 07 	lds	r25, 0x0786
    5472:	01 97       	sbiw	r24, 0x01	; 1
    5474:	90 93 86 07 	sts	0x0786, r25
    5478:	80 93 85 07 	sts	0x0785, r24
    547c:	66 23       	and	r22, r22
    547e:	11 f1       	breq	.+68     	; 0x54c4 <STEPPER_process_accel+0x88>
    5480:	20 91 83 07 	lds	r18, 0x0783
    5484:	30 91 84 07 	lds	r19, 0x0784
    5488:	80 91 87 07 	lds	r24, 0x0787
    548c:	90 91 88 07 	lds	r25, 0x0788
    5490:	28 1b       	sub	r18, r24
    5492:	39 0b       	sbc	r19, r25
    5494:	12 16       	cp	r1, r18
    5496:	13 06       	cpc	r1, r19
    5498:	54 f4       	brge	.+20     	; 0x54ae <STEPPER_process_accel+0x72>
    549a:	80 91 87 07 	lds	r24, 0x0787
    549e:	90 91 88 07 	lds	r25, 0x0788
    54a2:	01 96       	adiw	r24, 0x01	; 1
    54a4:	90 93 88 07 	sts	0x0788, r25
    54a8:	80 93 87 07 	sts	0x0787, r24
    54ac:	08 95       	ret
    54ae:	23 2b       	or	r18, r19
    54b0:	49 f0       	breq	.+18     	; 0x54c4 <STEPPER_process_accel+0x88>
    54b2:	80 91 87 07 	lds	r24, 0x0787
    54b6:	90 91 88 07 	lds	r25, 0x0788
    54ba:	01 97       	sbiw	r24, 0x01	; 1
    54bc:	90 93 88 07 	sts	0x0788, r25
    54c0:	80 93 87 07 	sts	0x0787, r24
    54c4:	08 95       	ret

000054c6 <STEPPER_process_run_mode>:
    54c6:	0f 93       	push	r16
    54c8:	1f 93       	push	r17
    54ca:	18 2f       	mov	r17, r24
    54cc:	06 2f       	mov	r16, r22
    54ce:	80 91 b5 07 	lds	r24, 0x07B5
    54d2:	88 23       	and	r24, r24
    54d4:	09 f0       	breq	.+2      	; 0x54d8 <STEPPER_process_run_mode+0x12>
    54d6:	e7 c0       	rjmp	.+462    	; 0x56a6 <STEPPER_process_run_mode+0x1e0>
    54d8:	80 91 9d 07 	lds	r24, 0x079D
    54dc:	88 23       	and	r24, r24
    54de:	09 f0       	breq	.+2      	; 0x54e2 <STEPPER_process_run_mode+0x1c>
    54e0:	5a c0       	rjmp	.+180    	; 0x5596 <STEPPER_process_run_mode+0xd0>
    54e2:	80 91 85 07 	lds	r24, 0x0785
    54e6:	90 91 86 07 	lds	r25, 0x0786
    54ea:	89 2b       	or	r24, r25
    54ec:	e9 f4       	brne	.+58     	; 0x5528 <STEPPER_process_run_mode+0x62>
    54ee:	80 91 b8 04 	lds	r24, 0x04B8
    54f2:	83 7e       	andi	r24, 0xE3	; 227
    54f4:	80 93 b8 04 	sts	0x04B8, r24
    54f8:	10 92 a6 07 	sts	0x07A6, r1
    54fc:	80 91 b1 07 	lds	r24, 0x07B1
    5500:	88 23       	and	r24, r24
    5502:	09 f4       	brne	.+2      	; 0x5506 <STEPPER_process_run_mode+0x40>
    5504:	5d c0       	rjmp	.+186    	; 0x55c0 <STEPPER_process_run_mode+0xfa>
    5506:	60 91 9f 07 	lds	r22, 0x079F
    550a:	80 e0       	ldi	r24, 0x00	; 0
    550c:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <STEPPER_stop>
    5510:	e0 91 b3 07 	lds	r30, 0x07B3
    5514:	f0 91 b4 07 	lds	r31, 0x07B4
    5518:	30 97       	sbiw	r30, 0x00	; 0
    551a:	09 f4       	brne	.+2      	; 0x551e <STEPPER_process_run_mode+0x58>
    551c:	51 c0       	rjmp	.+162    	; 0x55c0 <STEPPER_process_run_mode+0xfa>
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	80 83       	st	Z, r24
    5522:	10 92 b1 07 	sts	0x07B1, r1
    5526:	4c c0       	rjmp	.+152    	; 0x55c0 <STEPPER_process_run_mode+0xfa>
    5528:	80 91 7f 07 	lds	r24, 0x077F
    552c:	81 30       	cpi	r24, 0x01	; 1
    552e:	41 f4       	brne	.+16     	; 0x5540 <STEPPER_process_run_mode+0x7a>
    5530:	80 91 91 07 	lds	r24, 0x0791
    5534:	90 91 92 07 	lds	r25, 0x0792
    5538:	01 97       	sbiw	r24, 0x01	; 1
    553a:	11 f4       	brne	.+4      	; 0x5540 <STEPPER_process_run_mode+0x7a>
    553c:	11 e0       	ldi	r17, 0x01	; 1
    553e:	02 c0       	rjmp	.+4      	; 0x5544 <STEPPER_process_run_mode+0x7e>
    5540:	11 23       	and	r17, r17
    5542:	f1 f1       	breq	.+124    	; 0x55c0 <STEPPER_process_run_mode+0xfa>
    5544:	e0 91 a4 07 	lds	r30, 0x07A4
    5548:	f0 e0       	ldi	r31, 0x00	; 0
    554a:	e9 51       	subi	r30, 0x19	; 25
    554c:	fc 4f       	sbci	r31, 0xFC	; 252
    554e:	90 91 b8 04 	lds	r25, 0x04B8
    5552:	93 7e       	andi	r25, 0xE3	; 227
    5554:	80 81       	ld	r24, Z
    5556:	89 2b       	or	r24, r25
    5558:	80 93 b8 04 	sts	0x04B8, r24
    555c:	80 91 a2 07 	lds	r24, 0x07A2
    5560:	88 23       	and	r24, r24
    5562:	21 f4       	brne	.+8      	; 0x556c <STEPPER_process_run_mode+0xa6>
    5564:	80 91 a4 07 	lds	r24, 0x07A4
    5568:	8f 5f       	subi	r24, 0xFF	; 255
    556a:	03 c0       	rjmp	.+6      	; 0x5572 <STEPPER_process_run_mode+0xac>
    556c:	80 91 a4 07 	lds	r24, 0x07A4
    5570:	81 50       	subi	r24, 0x01	; 1
    5572:	80 93 a4 07 	sts	0x07A4, r24
    5576:	80 91 a4 07 	lds	r24, 0x07A4
    557a:	83 70       	andi	r24, 0x03	; 3
    557c:	80 93 a4 07 	sts	0x07A4, r24
    5580:	81 e0       	ldi	r24, 0x01	; 1
    5582:	80 93 a6 07 	sts	0x07A6, r24
    5586:	80 91 7f 07 	lds	r24, 0x077F
    558a:	81 30       	cpi	r24, 0x01	; 1
    558c:	c9 f4       	brne	.+50     	; 0x55c0 <STEPPER_process_run_mode+0xfa>
    558e:	80 e0       	ldi	r24, 0x00	; 0
    5590:	0e 94 66 2b 	call	0x56cc	; 0x56cc <STEPPER_process_step_mode>
    5594:	15 c0       	rjmp	.+42     	; 0x55c0 <STEPPER_process_run_mode+0xfa>
    5596:	90 91 b8 04 	lds	r25, 0x04B8
    559a:	93 7e       	andi	r25, 0xE3	; 227
    559c:	90 93 b8 04 	sts	0x04B8, r25
    55a0:	e0 91 a4 07 	lds	r30, 0x07A4
    55a4:	f0 e0       	ldi	r31, 0x00	; 0
    55a6:	e9 51       	subi	r30, 0x19	; 25
    55a8:	fc 4f       	sbci	r31, 0xFC	; 252
    55aa:	80 81       	ld	r24, Z
    55ac:	89 2b       	or	r24, r25
    55ae:	80 93 b8 04 	sts	0x04B8, r24
    55b2:	82 e0       	ldi	r24, 0x02	; 2
    55b4:	80 93 a6 07 	sts	0x07A6, r24
    55b8:	10 92 86 07 	sts	0x0786, r1
    55bc:	10 92 85 07 	sts	0x0785, r1
    55c0:	80 91 9e 07 	lds	r24, 0x079E
    55c4:	88 23       	and	r24, r24
    55c6:	09 f0       	breq	.+2      	; 0x55ca <STEPPER_process_run_mode+0x104>
    55c8:	59 c0       	rjmp	.+178    	; 0x567c <STEPPER_process_run_mode+0x1b6>
    55ca:	80 91 87 07 	lds	r24, 0x0787
    55ce:	90 91 88 07 	lds	r25, 0x0788
    55d2:	89 2b       	or	r24, r25
    55d4:	e9 f4       	brne	.+58     	; 0x5610 <STEPPER_process_run_mode+0x14a>
    55d6:	80 91 b8 04 	lds	r24, 0x04B8
    55da:	8f 71       	andi	r24, 0x1F	; 31
    55dc:	80 93 b8 04 	sts	0x04B8, r24
    55e0:	10 92 a7 07 	sts	0x07A7, r1
    55e4:	80 91 b2 07 	lds	r24, 0x07B2
    55e8:	88 23       	and	r24, r24
    55ea:	09 f4       	brne	.+2      	; 0x55ee <STEPPER_process_run_mode+0x128>
    55ec:	5c c0       	rjmp	.+184    	; 0x56a6 <STEPPER_process_run_mode+0x1e0>
    55ee:	60 91 a0 07 	lds	r22, 0x07A0
    55f2:	81 e0       	ldi	r24, 0x01	; 1
    55f4:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <STEPPER_stop>
    55f8:	e0 91 b3 07 	lds	r30, 0x07B3
    55fc:	f0 91 b4 07 	lds	r31, 0x07B4
    5600:	30 97       	sbiw	r30, 0x00	; 0
    5602:	09 f4       	brne	.+2      	; 0x5606 <STEPPER_process_run_mode+0x140>
    5604:	50 c0       	rjmp	.+160    	; 0x56a6 <STEPPER_process_run_mode+0x1e0>
    5606:	81 e0       	ldi	r24, 0x01	; 1
    5608:	81 83       	std	Z+1, r24	; 0x01
    560a:	10 92 b2 07 	sts	0x07B2, r1
    560e:	4b c0       	rjmp	.+150    	; 0x56a6 <STEPPER_process_run_mode+0x1e0>
    5610:	80 91 80 07 	lds	r24, 0x0780
    5614:	81 30       	cpi	r24, 0x01	; 1
    5616:	41 f4       	brne	.+16     	; 0x5628 <STEPPER_process_run_mode+0x162>
    5618:	80 91 93 07 	lds	r24, 0x0793
    561c:	90 91 94 07 	lds	r25, 0x0794
    5620:	01 97       	sbiw	r24, 0x01	; 1
    5622:	11 f4       	brne	.+4      	; 0x5628 <STEPPER_process_run_mode+0x162>
    5624:	01 e0       	ldi	r16, 0x01	; 1
    5626:	02 c0       	rjmp	.+4      	; 0x562c <STEPPER_process_run_mode+0x166>
    5628:	00 23       	and	r16, r16
    562a:	e9 f1       	breq	.+122    	; 0x56a6 <STEPPER_process_run_mode+0x1e0>
    562c:	e0 91 a5 07 	lds	r30, 0x07A5
    5630:	f0 e0       	ldi	r31, 0x00	; 0
    5632:	e5 51       	subi	r30, 0x15	; 21
    5634:	fc 4f       	sbci	r31, 0xFC	; 252
    5636:	90 91 b8 04 	lds	r25, 0x04B8
    563a:	9f 71       	andi	r25, 0x1F	; 31
    563c:	80 81       	ld	r24, Z
    563e:	89 2b       	or	r24, r25
    5640:	80 93 b8 04 	sts	0x04B8, r24
    5644:	80 91 a3 07 	lds	r24, 0x07A3
    5648:	88 23       	and	r24, r24
    564a:	21 f4       	brne	.+8      	; 0x5654 <STEPPER_process_run_mode+0x18e>
    564c:	80 91 a5 07 	lds	r24, 0x07A5
    5650:	8f 5f       	subi	r24, 0xFF	; 255
    5652:	03 c0       	rjmp	.+6      	; 0x565a <STEPPER_process_run_mode+0x194>
    5654:	80 91 a5 07 	lds	r24, 0x07A5
    5658:	81 50       	subi	r24, 0x01	; 1
    565a:	80 93 a5 07 	sts	0x07A5, r24
    565e:	80 91 a5 07 	lds	r24, 0x07A5
    5662:	83 70       	andi	r24, 0x03	; 3
    5664:	80 93 a5 07 	sts	0x07A5, r24
    5668:	81 e0       	ldi	r24, 0x01	; 1
    566a:	80 93 a7 07 	sts	0x07A7, r24
    566e:	80 91 80 07 	lds	r24, 0x0780
    5672:	81 30       	cpi	r24, 0x01	; 1
    5674:	c1 f4       	brne	.+48     	; 0x56a6 <STEPPER_process_run_mode+0x1e0>
    5676:	0e 94 66 2b 	call	0x56cc	; 0x56cc <STEPPER_process_step_mode>
    567a:	15 c0       	rjmp	.+42     	; 0x56a6 <STEPPER_process_run_mode+0x1e0>
    567c:	90 91 b8 04 	lds	r25, 0x04B8
    5680:	9f 71       	andi	r25, 0x1F	; 31
    5682:	90 93 b8 04 	sts	0x04B8, r25
    5686:	e0 91 a5 07 	lds	r30, 0x07A5
    568a:	f0 e0       	ldi	r31, 0x00	; 0
    568c:	e5 51       	subi	r30, 0x15	; 21
    568e:	fc 4f       	sbci	r31, 0xFC	; 252
    5690:	80 81       	ld	r24, Z
    5692:	89 2b       	or	r24, r25
    5694:	80 93 b8 04 	sts	0x04B8, r24
    5698:	82 e0       	ldi	r24, 0x02	; 2
    569a:	80 93 a7 07 	sts	0x07A7, r24
    569e:	10 92 88 07 	sts	0x0788, r1
    56a2:	10 92 87 07 	sts	0x0787, r1
    56a6:	80 91 a8 07 	lds	r24, 0x07A8
    56aa:	88 23       	and	r24, r24
    56ac:	31 f4       	brne	.+12     	; 0x56ba <STEPPER_process_run_mode+0x1f4>
    56ae:	88 eb       	ldi	r24, 0xB8	; 184
    56b0:	94 e0       	ldi	r25, 0x04	; 4
    56b2:	61 2f       	mov	r22, r17
    56b4:	40 2f       	mov	r20, r16
    56b6:	0e 94 28 2c 	call	0x5850	; 0x5850 <STEPPER_process_pwm>
    56ba:	88 b1       	in	r24, 0x08	; 8
    56bc:	83 70       	andi	r24, 0x03	; 3
    56be:	90 91 b8 04 	lds	r25, 0x04B8
    56c2:	89 2b       	or	r24, r25
    56c4:	88 b9       	out	0x08, r24	; 8
    56c6:	1f 91       	pop	r17
    56c8:	0f 91       	pop	r16
    56ca:	08 95       	ret

000056cc <STEPPER_process_step_mode>:
    56cc:	88 23       	and	r24, r24
    56ce:	21 f0       	breq	.+8      	; 0x56d8 <STEPPER_process_step_mode+0xc>
    56d0:	81 30       	cpi	r24, 0x01	; 1
    56d2:	09 f0       	breq	.+2      	; 0x56d6 <STEPPER_process_step_mode+0xa>
    56d4:	4e c0       	rjmp	.+156    	; 0x5772 <STEPPER_process_step_mode+0xa6>
    56d6:	27 c0       	rjmp	.+78     	; 0x5726 <STEPPER_process_step_mode+0x5a>
    56d8:	80 91 91 07 	lds	r24, 0x0791
    56dc:	90 91 92 07 	lds	r25, 0x0792
    56e0:	89 2b       	or	r24, r25
    56e2:	49 f0       	breq	.+18     	; 0x56f6 <STEPPER_process_step_mode+0x2a>
    56e4:	80 91 91 07 	lds	r24, 0x0791
    56e8:	90 91 92 07 	lds	r25, 0x0792
    56ec:	01 97       	sbiw	r24, 0x01	; 1
    56ee:	90 93 92 07 	sts	0x0792, r25
    56f2:	80 93 91 07 	sts	0x0791, r24
    56f6:	80 91 b1 07 	lds	r24, 0x07B1
    56fa:	88 23       	and	r24, r24
    56fc:	d1 f5       	brne	.+116    	; 0x5772 <STEPPER_process_step_mode+0xa6>
    56fe:	20 91 91 07 	lds	r18, 0x0791
    5702:	30 91 92 07 	lds	r19, 0x0792
    5706:	80 91 95 07 	lds	r24, 0x0795
    570a:	90 91 96 07 	lds	r25, 0x0796
    570e:	28 17       	cp	r18, r24
    5710:	39 07       	cpc	r19, r25
    5712:	79 f5       	brne	.+94     	; 0x5772 <STEPPER_process_step_mode+0xa6>
    5714:	80 e0       	ldi	r24, 0x00	; 0
    5716:	60 e0       	ldi	r22, 0x00	; 0
    5718:	70 e0       	ldi	r23, 0x00	; 0
    571a:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <STEPPER_set_speed>
    571e:	81 e0       	ldi	r24, 0x01	; 1
    5720:	80 93 b1 07 	sts	0x07B1, r24
    5724:	08 95       	ret
    5726:	80 91 93 07 	lds	r24, 0x0793
    572a:	90 91 94 07 	lds	r25, 0x0794
    572e:	89 2b       	or	r24, r25
    5730:	49 f0       	breq	.+18     	; 0x5744 <STEPPER_process_step_mode+0x78>
    5732:	80 91 93 07 	lds	r24, 0x0793
    5736:	90 91 94 07 	lds	r25, 0x0794
    573a:	01 97       	sbiw	r24, 0x01	; 1
    573c:	90 93 94 07 	sts	0x0794, r25
    5740:	80 93 93 07 	sts	0x0793, r24
    5744:	80 91 b2 07 	lds	r24, 0x07B2
    5748:	88 23       	and	r24, r24
    574a:	99 f4       	brne	.+38     	; 0x5772 <STEPPER_process_step_mode+0xa6>
    574c:	20 91 93 07 	lds	r18, 0x0793
    5750:	30 91 94 07 	lds	r19, 0x0794
    5754:	80 91 97 07 	lds	r24, 0x0797
    5758:	90 91 98 07 	lds	r25, 0x0798
    575c:	28 17       	cp	r18, r24
    575e:	39 07       	cpc	r19, r25
    5760:	41 f4       	brne	.+16     	; 0x5772 <STEPPER_process_step_mode+0xa6>
    5762:	81 e0       	ldi	r24, 0x01	; 1
    5764:	60 e0       	ldi	r22, 0x00	; 0
    5766:	70 e0       	ldi	r23, 0x00	; 0
    5768:	0e 94 4b 1e 	call	0x3c96	; 0x3c96 <STEPPER_set_speed>
    576c:	81 e0       	ldi	r24, 0x01	; 1
    576e:	80 93 b2 07 	sts	0x07B2, r24
    5772:	08 95       	ret

00005774 <TMRSRVC_process>:
    5774:	ff 92       	push	r15
    5776:	0f 93       	push	r16
    5778:	1f 93       	push	r17
    577a:	cf 93       	push	r28
    577c:	df 93       	push	r29
    577e:	80 91 ef 07 	lds	r24, 0x07EF
    5782:	88 23       	and	r24, r24
    5784:	09 f4       	brne	.+2      	; 0x5788 <TMRSRVC_process+0x14>
    5786:	59 c0       	rjmp	.+178    	; 0x583a <TMRSRVC_process+0xc6>
    5788:	00 91 f0 07 	lds	r16, 0x07F0
    578c:	10 91 f1 07 	lds	r17, 0x07F1
    5790:	f8 01       	movw	r30, r16
    5792:	c0 81       	ld	r28, Z
    5794:	d1 81       	ldd	r29, Z+1	; 0x01
    5796:	8c 81       	ldd	r24, Y+4	; 0x04
    5798:	9d 81       	ldd	r25, Y+5	; 0x05
    579a:	01 97       	sbiw	r24, 0x01	; 1
    579c:	9d 83       	std	Y+5, r25	; 0x05
    579e:	8c 83       	std	Y+4, r24	; 0x04
    57a0:	18 16       	cp	r1, r24
    57a2:	19 06       	cpc	r1, r25
    57a4:	0c f4       	brge	.+2      	; 0x57a8 <TMRSRVC_process+0x34>
    57a6:	49 c0       	rjmp	.+146    	; 0x583a <TMRSRVC_process+0xc6>
    57a8:	89 81       	ldd	r24, Y+1	; 0x01
    57aa:	80 ff       	sbrs	r24, 0
    57ac:	05 c0       	rjmp	.+10     	; 0x57b8 <TMRSRVC_process+0x44>
    57ae:	8e 81       	ldd	r24, Y+6	; 0x06
    57b0:	88 23       	and	r24, r24
    57b2:	11 f4       	brne	.+4      	; 0x57b8 <TMRSRVC_process+0x44>
    57b4:	81 e0       	ldi	r24, 0x01	; 1
    57b6:	8e 83       	std	Y+6, r24	; 0x06
    57b8:	89 81       	ldd	r24, Y+1	; 0x01
    57ba:	81 ff       	sbrs	r24, 1
    57bc:	03 c0       	rjmp	.+6      	; 0x57c4 <TMRSRVC_process+0x50>
    57be:	ef 81       	ldd	r30, Y+7	; 0x07
    57c0:	f8 85       	ldd	r31, Y+8	; 0x08
    57c2:	09 95       	icall
    57c4:	80 91 ef 07 	lds	r24, 0x07EF
    57c8:	82 30       	cpi	r24, 0x02	; 2
    57ca:	a8 f0       	brcs	.+42     	; 0x57f6 <TMRSRVC_process+0x82>
    57cc:	f8 01       	movw	r30, r16
    57ce:	82 81       	ldd	r24, Z+2	; 0x02
    57d0:	93 81       	ldd	r25, Z+3	; 0x03
    57d2:	90 93 f1 07 	sts	0x07F1, r25
    57d6:	80 93 f0 07 	sts	0x07F0, r24
    57da:	13 82       	std	Z+3, r1	; 0x03
    57dc:	12 82       	std	Z+2, r1	; 0x02
    57de:	e0 91 00 00 	lds	r30, 0x0000
    57e2:	f0 91 01 00 	lds	r31, 0x0001
    57e6:	84 81       	ldd	r24, Z+4	; 0x04
    57e8:	95 81       	ldd	r25, Z+5	; 0x05
    57ea:	18 16       	cp	r1, r24
    57ec:	19 06       	cpc	r1, r25
    57ee:	3c f0       	brlt	.+14     	; 0x57fe <TMRSRVC_process+0x8a>
    57f0:	ff 24       	eor	r15, r15
    57f2:	f3 94       	inc	r15
    57f4:	05 c0       	rjmp	.+10     	; 0x5800 <TMRSRVC_process+0x8c>
    57f6:	10 92 f1 07 	sts	0x07F1, r1
    57fa:	10 92 f0 07 	sts	0x07F0, r1
    57fe:	ff 24       	eor	r15, r15
    5800:	80 91 ef 07 	lds	r24, 0x07EF
    5804:	81 50       	subi	r24, 0x01	; 1
    5806:	80 93 ef 07 	sts	0x07EF, r24
    580a:	80 91 ef 07 	lds	r24, 0x07EF
    580e:	88 23       	and	r24, r24
    5810:	11 f4       	brne	.+4      	; 0x5816 <TMRSRVC_process+0xa2>
    5812:	0e 94 25 2c 	call	0x584a	; 0x584a <TMRSRVC_stop>
    5816:	89 81       	ldd	r24, Y+1	; 0x01
    5818:	82 ff       	sbrs	r24, 2
    581a:	08 c0       	rjmp	.+16     	; 0x582c <TMRSRVC_process+0xb8>
    581c:	8a 81       	ldd	r24, Y+2	; 0x02
    581e:	9b 81       	ldd	r25, Y+3	; 0x03
    5820:	9d 83       	std	Y+5, r25	; 0x05
    5822:	8c 83       	std	Y+4, r24	; 0x04
    5824:	c8 01       	movw	r24, r16
    5826:	0e 94 9a 27 	call	0x4f34	; 0x4f34 <TMRSRVC_insert>
    582a:	08 c0       	rjmp	.+16     	; 0x583c <TMRSRVC_process+0xc8>
    582c:	c8 01       	movw	r24, r16
    582e:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <free>
    5832:	89 81       	ldd	r24, Y+1	; 0x01
    5834:	8f 7e       	andi	r24, 0xEF	; 239
    5836:	89 83       	std	Y+1, r24	; 0x01
    5838:	01 c0       	rjmp	.+2      	; 0x583c <TMRSRVC_process+0xc8>
    583a:	ff 24       	eor	r15, r15
    583c:	8f 2d       	mov	r24, r15
    583e:	df 91       	pop	r29
    5840:	cf 91       	pop	r28
    5842:	1f 91       	pop	r17
    5844:	0f 91       	pop	r16
    5846:	ff 90       	pop	r15
    5848:	08 95       	ret

0000584a <TMRSRVC_stop>:
    584a:	10 92 b7 04 	sts	0x04B7, r1
    584e:	08 95       	ret

00005850 <STEPPER_process_pwm>:
    5850:	fc 01       	movw	r30, r24
    5852:	80 91 a6 07 	lds	r24, 0x07A6
    5856:	82 30       	cpi	r24, 0x02	; 2
    5858:	69 f4       	brne	.+26     	; 0x5874 <STEPPER_process_pwm+0x24>
    585a:	80 91 bc 04 	lds	r24, 0x04BC
    585e:	91 e0       	ldi	r25, 0x01	; 1
    5860:	89 27       	eor	r24, r25
    5862:	80 93 bc 04 	sts	0x04BC, r24
    5866:	88 23       	and	r24, r24
    5868:	09 f0       	breq	.+2      	; 0x586c <STEPPER_process_pwm+0x1c>
    586a:	3e c0       	rjmp	.+124    	; 0x58e8 <STEPPER_process_pwm+0x98>
    586c:	80 81       	ld	r24, Z
    586e:	83 7e       	andi	r24, 0xE3	; 227
    5870:	80 83       	st	Z, r24
    5872:	3a c0       	rjmp	.+116    	; 0x58e8 <STEPPER_process_pwm+0x98>
    5874:	80 91 85 07 	lds	r24, 0x0785
    5878:	90 91 86 07 	lds	r25, 0x0786
    587c:	c3 97       	sbiw	r24, 0x33	; 51
    587e:	a4 f5       	brge	.+104    	; 0x58e8 <STEPPER_process_pwm+0x98>
    5880:	66 23       	and	r22, r22
    5882:	d1 f0       	breq	.+52     	; 0x58b8 <STEPPER_process_pwm+0x68>
    5884:	20 91 85 07 	lds	r18, 0x0785
    5888:	30 91 86 07 	lds	r19, 0x0786
    588c:	80 e6       	ldi	r24, 0x60	; 96
    588e:	90 e0       	ldi	r25, 0x00	; 0
    5890:	bc 01       	movw	r22, r24
    5892:	26 9f       	mul	r18, r22
    5894:	c0 01       	movw	r24, r0
    5896:	27 9f       	mul	r18, r23
    5898:	90 0d       	add	r25, r0
    589a:	36 9f       	mul	r19, r22
    589c:	90 0d       	add	r25, r0
    589e:	11 24       	eor	r1, r1
    58a0:	88 0f       	add	r24, r24
    58a2:	89 2f       	mov	r24, r25
    58a4:	88 1f       	adc	r24, r24
    58a6:	99 0b       	sbc	r25, r25
    58a8:	90 93 9a 07 	sts	0x079A, r25
    58ac:	80 93 99 07 	sts	0x0799, r24
    58b0:	81 e0       	ldi	r24, 0x01	; 1
    58b2:	80 93 ba 04 	sts	0x04BA, r24
    58b6:	18 c0       	rjmp	.+48     	; 0x58e8 <STEPPER_process_pwm+0x98>
    58b8:	80 91 ba 04 	lds	r24, 0x04BA
    58bc:	88 23       	and	r24, r24
    58be:	a1 f0       	breq	.+40     	; 0x58e8 <STEPPER_process_pwm+0x98>
    58c0:	80 91 99 07 	lds	r24, 0x0799
    58c4:	90 91 9a 07 	lds	r25, 0x079A
    58c8:	01 97       	sbiw	r24, 0x01	; 1
    58ca:	90 93 9a 07 	sts	0x079A, r25
    58ce:	80 93 99 07 	sts	0x0799, r24
    58d2:	80 91 99 07 	lds	r24, 0x0799
    58d6:	90 91 9a 07 	lds	r25, 0x079A
    58da:	89 2b       	or	r24, r25
    58dc:	29 f4       	brne	.+10     	; 0x58e8 <STEPPER_process_pwm+0x98>
    58de:	80 81       	ld	r24, Z
    58e0:	83 7e       	andi	r24, 0xE3	; 227
    58e2:	80 83       	st	Z, r24
    58e4:	10 92 ba 04 	sts	0x04BA, r1
    58e8:	80 91 a7 07 	lds	r24, 0x07A7
    58ec:	82 30       	cpi	r24, 0x02	; 2
    58ee:	69 f4       	brne	.+26     	; 0x590a <STEPPER_process_pwm+0xba>
    58f0:	80 91 bb 04 	lds	r24, 0x04BB
    58f4:	91 e0       	ldi	r25, 0x01	; 1
    58f6:	89 27       	eor	r24, r25
    58f8:	80 93 bb 04 	sts	0x04BB, r24
    58fc:	88 23       	and	r24, r24
    58fe:	09 f0       	breq	.+2      	; 0x5902 <STEPPER_process_pwm+0xb2>
    5900:	3e c0       	rjmp	.+124    	; 0x597e <STEPPER_process_pwm+0x12e>
    5902:	80 81       	ld	r24, Z
    5904:	8f 71       	andi	r24, 0x1F	; 31
    5906:	80 83       	st	Z, r24
    5908:	08 95       	ret
    590a:	80 91 87 07 	lds	r24, 0x0787
    590e:	90 91 88 07 	lds	r25, 0x0788
    5912:	c3 97       	sbiw	r24, 0x33	; 51
    5914:	a4 f5       	brge	.+104    	; 0x597e <STEPPER_process_pwm+0x12e>
    5916:	44 23       	and	r20, r20
    5918:	d1 f0       	breq	.+52     	; 0x594e <STEPPER_process_pwm+0xfe>
    591a:	20 91 87 07 	lds	r18, 0x0787
    591e:	30 91 88 07 	lds	r19, 0x0788
    5922:	80 e6       	ldi	r24, 0x60	; 96
    5924:	90 e0       	ldi	r25, 0x00	; 0
    5926:	ac 01       	movw	r20, r24
    5928:	24 9f       	mul	r18, r20
    592a:	c0 01       	movw	r24, r0
    592c:	25 9f       	mul	r18, r21
    592e:	90 0d       	add	r25, r0
    5930:	34 9f       	mul	r19, r20
    5932:	90 0d       	add	r25, r0
    5934:	11 24       	eor	r1, r1
    5936:	88 0f       	add	r24, r24
    5938:	89 2f       	mov	r24, r25
    593a:	88 1f       	adc	r24, r24
    593c:	99 0b       	sbc	r25, r25
    593e:	90 93 9c 07 	sts	0x079C, r25
    5942:	80 93 9b 07 	sts	0x079B, r24
    5946:	81 e0       	ldi	r24, 0x01	; 1
    5948:	80 93 b9 04 	sts	0x04B9, r24
    594c:	08 95       	ret
    594e:	80 91 b9 04 	lds	r24, 0x04B9
    5952:	88 23       	and	r24, r24
    5954:	a1 f0       	breq	.+40     	; 0x597e <STEPPER_process_pwm+0x12e>
    5956:	80 91 9b 07 	lds	r24, 0x079B
    595a:	90 91 9c 07 	lds	r25, 0x079C
    595e:	01 97       	sbiw	r24, 0x01	; 1
    5960:	90 93 9c 07 	sts	0x079C, r25
    5964:	80 93 9b 07 	sts	0x079B, r24
    5968:	80 91 9b 07 	lds	r24, 0x079B
    596c:	90 91 9c 07 	lds	r25, 0x079C
    5970:	89 2b       	or	r24, r25
    5972:	29 f4       	brne	.+10     	; 0x597e <STEPPER_process_pwm+0x12e>
    5974:	80 81       	ld	r24, Z
    5976:	8f 71       	andi	r24, 0x1F	; 31
    5978:	80 83       	st	Z, r24
    597a:	10 92 b9 04 	sts	0x04B9, r1
    597e:	08 95       	ret

00005980 <__subsf3>:
    5980:	50 58       	subi	r21, 0x80	; 128

00005982 <__addsf3>:
    5982:	bb 27       	eor	r27, r27
    5984:	aa 27       	eor	r26, r26
    5986:	0e d0       	rcall	.+28     	; 0x59a4 <__addsf3x>
    5988:	75 c1       	rjmp	.+746    	; 0x5c74 <__fp_round>
    598a:	66 d1       	rcall	.+716    	; 0x5c58 <__fp_pscA>
    598c:	30 f0       	brcs	.+12     	; 0x599a <__addsf3+0x18>
    598e:	6b d1       	rcall	.+726    	; 0x5c66 <__fp_pscB>
    5990:	20 f0       	brcs	.+8      	; 0x599a <__addsf3+0x18>
    5992:	31 f4       	brne	.+12     	; 0x59a0 <__addsf3+0x1e>
    5994:	9f 3f       	cpi	r25, 0xFF	; 255
    5996:	11 f4       	brne	.+4      	; 0x599c <__addsf3+0x1a>
    5998:	1e f4       	brtc	.+6      	; 0x59a0 <__addsf3+0x1e>
    599a:	5b c1       	rjmp	.+694    	; 0x5c52 <__fp_nan>
    599c:	0e f4       	brtc	.+2      	; 0x59a0 <__addsf3+0x1e>
    599e:	e0 95       	com	r30
    59a0:	e7 fb       	bst	r30, 7
    59a2:	51 c1       	rjmp	.+674    	; 0x5c46 <__fp_inf>

000059a4 <__addsf3x>:
    59a4:	e9 2f       	mov	r30, r25
    59a6:	77 d1       	rcall	.+750    	; 0x5c96 <__fp_split3>
    59a8:	80 f3       	brcs	.-32     	; 0x598a <__addsf3+0x8>
    59aa:	ba 17       	cp	r27, r26
    59ac:	62 07       	cpc	r22, r18
    59ae:	73 07       	cpc	r23, r19
    59b0:	84 07       	cpc	r24, r20
    59b2:	95 07       	cpc	r25, r21
    59b4:	18 f0       	brcs	.+6      	; 0x59bc <__addsf3x+0x18>
    59b6:	71 f4       	brne	.+28     	; 0x59d4 <__addsf3x+0x30>
    59b8:	9e f5       	brtc	.+102    	; 0x5a20 <__addsf3x+0x7c>
    59ba:	8f c1       	rjmp	.+798    	; 0x5cda <__fp_zero>
    59bc:	0e f4       	brtc	.+2      	; 0x59c0 <__addsf3x+0x1c>
    59be:	e0 95       	com	r30
    59c0:	0b 2e       	mov	r0, r27
    59c2:	ba 2f       	mov	r27, r26
    59c4:	a0 2d       	mov	r26, r0
    59c6:	0b 01       	movw	r0, r22
    59c8:	b9 01       	movw	r22, r18
    59ca:	90 01       	movw	r18, r0
    59cc:	0c 01       	movw	r0, r24
    59ce:	ca 01       	movw	r24, r20
    59d0:	a0 01       	movw	r20, r0
    59d2:	11 24       	eor	r1, r1
    59d4:	ff 27       	eor	r31, r31
    59d6:	59 1b       	sub	r21, r25
    59d8:	99 f0       	breq	.+38     	; 0x5a00 <__addsf3x+0x5c>
    59da:	59 3f       	cpi	r21, 0xF9	; 249
    59dc:	50 f4       	brcc	.+20     	; 0x59f2 <__addsf3x+0x4e>
    59de:	50 3e       	cpi	r21, 0xE0	; 224
    59e0:	68 f1       	brcs	.+90     	; 0x5a3c <__addsf3x+0x98>
    59e2:	1a 16       	cp	r1, r26
    59e4:	f0 40       	sbci	r31, 0x00	; 0
    59e6:	a2 2f       	mov	r26, r18
    59e8:	23 2f       	mov	r18, r19
    59ea:	34 2f       	mov	r19, r20
    59ec:	44 27       	eor	r20, r20
    59ee:	58 5f       	subi	r21, 0xF8	; 248
    59f0:	f3 cf       	rjmp	.-26     	; 0x59d8 <__addsf3x+0x34>
    59f2:	46 95       	lsr	r20
    59f4:	37 95       	ror	r19
    59f6:	27 95       	ror	r18
    59f8:	a7 95       	ror	r26
    59fa:	f0 40       	sbci	r31, 0x00	; 0
    59fc:	53 95       	inc	r21
    59fe:	c9 f7       	brne	.-14     	; 0x59f2 <__addsf3x+0x4e>
    5a00:	7e f4       	brtc	.+30     	; 0x5a20 <__addsf3x+0x7c>
    5a02:	1f 16       	cp	r1, r31
    5a04:	ba 0b       	sbc	r27, r26
    5a06:	62 0b       	sbc	r22, r18
    5a08:	73 0b       	sbc	r23, r19
    5a0a:	84 0b       	sbc	r24, r20
    5a0c:	ba f0       	brmi	.+46     	; 0x5a3c <__addsf3x+0x98>
    5a0e:	91 50       	subi	r25, 0x01	; 1
    5a10:	a1 f0       	breq	.+40     	; 0x5a3a <__addsf3x+0x96>
    5a12:	ff 0f       	add	r31, r31
    5a14:	bb 1f       	adc	r27, r27
    5a16:	66 1f       	adc	r22, r22
    5a18:	77 1f       	adc	r23, r23
    5a1a:	88 1f       	adc	r24, r24
    5a1c:	c2 f7       	brpl	.-16     	; 0x5a0e <__addsf3x+0x6a>
    5a1e:	0e c0       	rjmp	.+28     	; 0x5a3c <__addsf3x+0x98>
    5a20:	ba 0f       	add	r27, r26
    5a22:	62 1f       	adc	r22, r18
    5a24:	73 1f       	adc	r23, r19
    5a26:	84 1f       	adc	r24, r20
    5a28:	48 f4       	brcc	.+18     	; 0x5a3c <__addsf3x+0x98>
    5a2a:	87 95       	ror	r24
    5a2c:	77 95       	ror	r23
    5a2e:	67 95       	ror	r22
    5a30:	b7 95       	ror	r27
    5a32:	f7 95       	ror	r31
    5a34:	9e 3f       	cpi	r25, 0xFE	; 254
    5a36:	08 f0       	brcs	.+2      	; 0x5a3a <__addsf3x+0x96>
    5a38:	b3 cf       	rjmp	.-154    	; 0x59a0 <__addsf3+0x1e>
    5a3a:	93 95       	inc	r25
    5a3c:	88 0f       	add	r24, r24
    5a3e:	08 f0       	brcs	.+2      	; 0x5a42 <__addsf3x+0x9e>
    5a40:	99 27       	eor	r25, r25
    5a42:	ee 0f       	add	r30, r30
    5a44:	97 95       	ror	r25
    5a46:	87 95       	ror	r24
    5a48:	08 95       	ret

00005a4a <__cmpsf2>:
    5a4a:	d9 d0       	rcall	.+434    	; 0x5bfe <__fp_cmp>
    5a4c:	08 f4       	brcc	.+2      	; 0x5a50 <__cmpsf2+0x6>
    5a4e:	81 e0       	ldi	r24, 0x01	; 1
    5a50:	08 95       	ret

00005a52 <__divsf3>:
    5a52:	0c d0       	rcall	.+24     	; 0x5a6c <__divsf3x>
    5a54:	0f c1       	rjmp	.+542    	; 0x5c74 <__fp_round>
    5a56:	07 d1       	rcall	.+526    	; 0x5c66 <__fp_pscB>
    5a58:	40 f0       	brcs	.+16     	; 0x5a6a <__divsf3+0x18>
    5a5a:	fe d0       	rcall	.+508    	; 0x5c58 <__fp_pscA>
    5a5c:	30 f0       	brcs	.+12     	; 0x5a6a <__divsf3+0x18>
    5a5e:	21 f4       	brne	.+8      	; 0x5a68 <__divsf3+0x16>
    5a60:	5f 3f       	cpi	r21, 0xFF	; 255
    5a62:	19 f0       	breq	.+6      	; 0x5a6a <__divsf3+0x18>
    5a64:	f0 c0       	rjmp	.+480    	; 0x5c46 <__fp_inf>
    5a66:	51 11       	cpse	r21, r1
    5a68:	39 c1       	rjmp	.+626    	; 0x5cdc <__fp_szero>
    5a6a:	f3 c0       	rjmp	.+486    	; 0x5c52 <__fp_nan>

00005a6c <__divsf3x>:
    5a6c:	14 d1       	rcall	.+552    	; 0x5c96 <__fp_split3>
    5a6e:	98 f3       	brcs	.-26     	; 0x5a56 <__divsf3+0x4>

00005a70 <__divsf3_pse>:
    5a70:	99 23       	and	r25, r25
    5a72:	c9 f3       	breq	.-14     	; 0x5a66 <__divsf3+0x14>
    5a74:	55 23       	and	r21, r21
    5a76:	b1 f3       	breq	.-20     	; 0x5a64 <__divsf3+0x12>
    5a78:	95 1b       	sub	r25, r21
    5a7a:	55 0b       	sbc	r21, r21
    5a7c:	bb 27       	eor	r27, r27
    5a7e:	aa 27       	eor	r26, r26
    5a80:	62 17       	cp	r22, r18
    5a82:	73 07       	cpc	r23, r19
    5a84:	84 07       	cpc	r24, r20
    5a86:	38 f0       	brcs	.+14     	; 0x5a96 <__divsf3_pse+0x26>
    5a88:	9f 5f       	subi	r25, 0xFF	; 255
    5a8a:	5f 4f       	sbci	r21, 0xFF	; 255
    5a8c:	22 0f       	add	r18, r18
    5a8e:	33 1f       	adc	r19, r19
    5a90:	44 1f       	adc	r20, r20
    5a92:	aa 1f       	adc	r26, r26
    5a94:	a9 f3       	breq	.-22     	; 0x5a80 <__divsf3_pse+0x10>
    5a96:	33 d0       	rcall	.+102    	; 0x5afe <__divsf3_pse+0x8e>
    5a98:	0e 2e       	mov	r0, r30
    5a9a:	3a f0       	brmi	.+14     	; 0x5aaa <__divsf3_pse+0x3a>
    5a9c:	e0 e8       	ldi	r30, 0x80	; 128
    5a9e:	30 d0       	rcall	.+96     	; 0x5b00 <__divsf3_pse+0x90>
    5aa0:	91 50       	subi	r25, 0x01	; 1
    5aa2:	50 40       	sbci	r21, 0x00	; 0
    5aa4:	e6 95       	lsr	r30
    5aa6:	00 1c       	adc	r0, r0
    5aa8:	ca f7       	brpl	.-14     	; 0x5a9c <__divsf3_pse+0x2c>
    5aaa:	29 d0       	rcall	.+82     	; 0x5afe <__divsf3_pse+0x8e>
    5aac:	fe 2f       	mov	r31, r30
    5aae:	27 d0       	rcall	.+78     	; 0x5afe <__divsf3_pse+0x8e>
    5ab0:	66 0f       	add	r22, r22
    5ab2:	77 1f       	adc	r23, r23
    5ab4:	88 1f       	adc	r24, r24
    5ab6:	bb 1f       	adc	r27, r27
    5ab8:	26 17       	cp	r18, r22
    5aba:	37 07       	cpc	r19, r23
    5abc:	48 07       	cpc	r20, r24
    5abe:	ab 07       	cpc	r26, r27
    5ac0:	b0 e8       	ldi	r27, 0x80	; 128
    5ac2:	09 f0       	breq	.+2      	; 0x5ac6 <__divsf3_pse+0x56>
    5ac4:	bb 0b       	sbc	r27, r27
    5ac6:	80 2d       	mov	r24, r0
    5ac8:	bf 01       	movw	r22, r30
    5aca:	ff 27       	eor	r31, r31
    5acc:	93 58       	subi	r25, 0x83	; 131
    5ace:	5f 4f       	sbci	r21, 0xFF	; 255
    5ad0:	2a f0       	brmi	.+10     	; 0x5adc <__divsf3_pse+0x6c>
    5ad2:	9e 3f       	cpi	r25, 0xFE	; 254
    5ad4:	51 05       	cpc	r21, r1
    5ad6:	68 f0       	brcs	.+26     	; 0x5af2 <__divsf3_pse+0x82>
    5ad8:	b6 c0       	rjmp	.+364    	; 0x5c46 <__fp_inf>
    5ada:	00 c1       	rjmp	.+512    	; 0x5cdc <__fp_szero>
    5adc:	5f 3f       	cpi	r21, 0xFF	; 255
    5ade:	ec f3       	brlt	.-6      	; 0x5ada <__divsf3_pse+0x6a>
    5ae0:	98 3e       	cpi	r25, 0xE8	; 232
    5ae2:	dc f3       	brlt	.-10     	; 0x5ada <__divsf3_pse+0x6a>
    5ae4:	86 95       	lsr	r24
    5ae6:	77 95       	ror	r23
    5ae8:	67 95       	ror	r22
    5aea:	b7 95       	ror	r27
    5aec:	f7 95       	ror	r31
    5aee:	9f 5f       	subi	r25, 0xFF	; 255
    5af0:	c9 f7       	brne	.-14     	; 0x5ae4 <__divsf3_pse+0x74>
    5af2:	88 0f       	add	r24, r24
    5af4:	91 1d       	adc	r25, r1
    5af6:	96 95       	lsr	r25
    5af8:	87 95       	ror	r24
    5afa:	97 f9       	bld	r25, 7
    5afc:	08 95       	ret
    5afe:	e1 e0       	ldi	r30, 0x01	; 1
    5b00:	66 0f       	add	r22, r22
    5b02:	77 1f       	adc	r23, r23
    5b04:	88 1f       	adc	r24, r24
    5b06:	bb 1f       	adc	r27, r27
    5b08:	62 17       	cp	r22, r18
    5b0a:	73 07       	cpc	r23, r19
    5b0c:	84 07       	cpc	r24, r20
    5b0e:	ba 07       	cpc	r27, r26
    5b10:	20 f0       	brcs	.+8      	; 0x5b1a <__divsf3_pse+0xaa>
    5b12:	62 1b       	sub	r22, r18
    5b14:	73 0b       	sbc	r23, r19
    5b16:	84 0b       	sbc	r24, r20
    5b18:	ba 0b       	sbc	r27, r26
    5b1a:	ee 1f       	adc	r30, r30
    5b1c:	88 f7       	brcc	.-30     	; 0x5b00 <__divsf3_pse+0x90>
    5b1e:	e0 95       	com	r30
    5b20:	08 95       	ret

00005b22 <__fixsfsi>:
    5b22:	04 d0       	rcall	.+8      	; 0x5b2c <__fixunssfsi>
    5b24:	68 94       	set
    5b26:	b1 11       	cpse	r27, r1
    5b28:	d9 c0       	rjmp	.+434    	; 0x5cdc <__fp_szero>
    5b2a:	08 95       	ret

00005b2c <__fixunssfsi>:
    5b2c:	bc d0       	rcall	.+376    	; 0x5ca6 <__fp_splitA>
    5b2e:	88 f0       	brcs	.+34     	; 0x5b52 <__fixunssfsi+0x26>
    5b30:	9f 57       	subi	r25, 0x7F	; 127
    5b32:	90 f0       	brcs	.+36     	; 0x5b58 <__fixunssfsi+0x2c>
    5b34:	b9 2f       	mov	r27, r25
    5b36:	99 27       	eor	r25, r25
    5b38:	b7 51       	subi	r27, 0x17	; 23
    5b3a:	a0 f0       	brcs	.+40     	; 0x5b64 <__fixunssfsi+0x38>
    5b3c:	d1 f0       	breq	.+52     	; 0x5b72 <__fixunssfsi+0x46>
    5b3e:	66 0f       	add	r22, r22
    5b40:	77 1f       	adc	r23, r23
    5b42:	88 1f       	adc	r24, r24
    5b44:	99 1f       	adc	r25, r25
    5b46:	1a f0       	brmi	.+6      	; 0x5b4e <__fixunssfsi+0x22>
    5b48:	ba 95       	dec	r27
    5b4a:	c9 f7       	brne	.-14     	; 0x5b3e <__fixunssfsi+0x12>
    5b4c:	12 c0       	rjmp	.+36     	; 0x5b72 <__fixunssfsi+0x46>
    5b4e:	b1 30       	cpi	r27, 0x01	; 1
    5b50:	81 f0       	breq	.+32     	; 0x5b72 <__fixunssfsi+0x46>
    5b52:	c3 d0       	rcall	.+390    	; 0x5cda <__fp_zero>
    5b54:	b1 e0       	ldi	r27, 0x01	; 1
    5b56:	08 95       	ret
    5b58:	c0 c0       	rjmp	.+384    	; 0x5cda <__fp_zero>
    5b5a:	67 2f       	mov	r22, r23
    5b5c:	78 2f       	mov	r23, r24
    5b5e:	88 27       	eor	r24, r24
    5b60:	b8 5f       	subi	r27, 0xF8	; 248
    5b62:	39 f0       	breq	.+14     	; 0x5b72 <__fixunssfsi+0x46>
    5b64:	b9 3f       	cpi	r27, 0xF9	; 249
    5b66:	cc f3       	brlt	.-14     	; 0x5b5a <__fixunssfsi+0x2e>
    5b68:	86 95       	lsr	r24
    5b6a:	77 95       	ror	r23
    5b6c:	67 95       	ror	r22
    5b6e:	b3 95       	inc	r27
    5b70:	d9 f7       	brne	.-10     	; 0x5b68 <__fixunssfsi+0x3c>
    5b72:	3e f4       	brtc	.+14     	; 0x5b82 <__fixunssfsi+0x56>
    5b74:	90 95       	com	r25
    5b76:	80 95       	com	r24
    5b78:	70 95       	com	r23
    5b7a:	61 95       	neg	r22
    5b7c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b7e:	8f 4f       	sbci	r24, 0xFF	; 255
    5b80:	9f 4f       	sbci	r25, 0xFF	; 255
    5b82:	08 95       	ret

00005b84 <__floatunsisf>:
    5b84:	e8 94       	clt
    5b86:	09 c0       	rjmp	.+18     	; 0x5b9a <__floatsisf+0x12>

00005b88 <__floatsisf>:
    5b88:	97 fb       	bst	r25, 7
    5b8a:	3e f4       	brtc	.+14     	; 0x5b9a <__floatsisf+0x12>
    5b8c:	90 95       	com	r25
    5b8e:	80 95       	com	r24
    5b90:	70 95       	com	r23
    5b92:	61 95       	neg	r22
    5b94:	7f 4f       	sbci	r23, 0xFF	; 255
    5b96:	8f 4f       	sbci	r24, 0xFF	; 255
    5b98:	9f 4f       	sbci	r25, 0xFF	; 255
    5b9a:	99 23       	and	r25, r25
    5b9c:	a9 f0       	breq	.+42     	; 0x5bc8 <__floatsisf+0x40>
    5b9e:	f9 2f       	mov	r31, r25
    5ba0:	96 e9       	ldi	r25, 0x96	; 150
    5ba2:	bb 27       	eor	r27, r27
    5ba4:	93 95       	inc	r25
    5ba6:	f6 95       	lsr	r31
    5ba8:	87 95       	ror	r24
    5baa:	77 95       	ror	r23
    5bac:	67 95       	ror	r22
    5bae:	b7 95       	ror	r27
    5bb0:	f1 11       	cpse	r31, r1
    5bb2:	f8 cf       	rjmp	.-16     	; 0x5ba4 <__floatsisf+0x1c>
    5bb4:	fa f4       	brpl	.+62     	; 0x5bf4 <__floatsisf+0x6c>
    5bb6:	bb 0f       	add	r27, r27
    5bb8:	11 f4       	brne	.+4      	; 0x5bbe <__floatsisf+0x36>
    5bba:	60 ff       	sbrs	r22, 0
    5bbc:	1b c0       	rjmp	.+54     	; 0x5bf4 <__floatsisf+0x6c>
    5bbe:	6f 5f       	subi	r22, 0xFF	; 255
    5bc0:	7f 4f       	sbci	r23, 0xFF	; 255
    5bc2:	8f 4f       	sbci	r24, 0xFF	; 255
    5bc4:	9f 4f       	sbci	r25, 0xFF	; 255
    5bc6:	16 c0       	rjmp	.+44     	; 0x5bf4 <__floatsisf+0x6c>
    5bc8:	88 23       	and	r24, r24
    5bca:	11 f0       	breq	.+4      	; 0x5bd0 <__floatsisf+0x48>
    5bcc:	96 e9       	ldi	r25, 0x96	; 150
    5bce:	11 c0       	rjmp	.+34     	; 0x5bf2 <__floatsisf+0x6a>
    5bd0:	77 23       	and	r23, r23
    5bd2:	21 f0       	breq	.+8      	; 0x5bdc <__floatsisf+0x54>
    5bd4:	9e e8       	ldi	r25, 0x8E	; 142
    5bd6:	87 2f       	mov	r24, r23
    5bd8:	76 2f       	mov	r23, r22
    5bda:	05 c0       	rjmp	.+10     	; 0x5be6 <__floatsisf+0x5e>
    5bdc:	66 23       	and	r22, r22
    5bde:	71 f0       	breq	.+28     	; 0x5bfc <__floatsisf+0x74>
    5be0:	96 e8       	ldi	r25, 0x86	; 134
    5be2:	86 2f       	mov	r24, r22
    5be4:	70 e0       	ldi	r23, 0x00	; 0
    5be6:	60 e0       	ldi	r22, 0x00	; 0
    5be8:	2a f0       	brmi	.+10     	; 0x5bf4 <__floatsisf+0x6c>
    5bea:	9a 95       	dec	r25
    5bec:	66 0f       	add	r22, r22
    5bee:	77 1f       	adc	r23, r23
    5bf0:	88 1f       	adc	r24, r24
    5bf2:	da f7       	brpl	.-10     	; 0x5bea <__floatsisf+0x62>
    5bf4:	88 0f       	add	r24, r24
    5bf6:	96 95       	lsr	r25
    5bf8:	87 95       	ror	r24
    5bfa:	97 f9       	bld	r25, 7
    5bfc:	08 95       	ret

00005bfe <__fp_cmp>:
    5bfe:	99 0f       	add	r25, r25
    5c00:	00 08       	sbc	r0, r0
    5c02:	55 0f       	add	r21, r21
    5c04:	aa 0b       	sbc	r26, r26
    5c06:	e0 e8       	ldi	r30, 0x80	; 128
    5c08:	fe ef       	ldi	r31, 0xFE	; 254
    5c0a:	16 16       	cp	r1, r22
    5c0c:	17 06       	cpc	r1, r23
    5c0e:	e8 07       	cpc	r30, r24
    5c10:	f9 07       	cpc	r31, r25
    5c12:	c0 f0       	brcs	.+48     	; 0x5c44 <__fp_cmp+0x46>
    5c14:	12 16       	cp	r1, r18
    5c16:	13 06       	cpc	r1, r19
    5c18:	e4 07       	cpc	r30, r20
    5c1a:	f5 07       	cpc	r31, r21
    5c1c:	98 f0       	brcs	.+38     	; 0x5c44 <__fp_cmp+0x46>
    5c1e:	62 1b       	sub	r22, r18
    5c20:	73 0b       	sbc	r23, r19
    5c22:	84 0b       	sbc	r24, r20
    5c24:	95 0b       	sbc	r25, r21
    5c26:	39 f4       	brne	.+14     	; 0x5c36 <__fp_cmp+0x38>
    5c28:	0a 26       	eor	r0, r26
    5c2a:	61 f0       	breq	.+24     	; 0x5c44 <__fp_cmp+0x46>
    5c2c:	23 2b       	or	r18, r19
    5c2e:	24 2b       	or	r18, r20
    5c30:	25 2b       	or	r18, r21
    5c32:	21 f4       	brne	.+8      	; 0x5c3c <__fp_cmp+0x3e>
    5c34:	08 95       	ret
    5c36:	0a 26       	eor	r0, r26
    5c38:	09 f4       	brne	.+2      	; 0x5c3c <__fp_cmp+0x3e>
    5c3a:	a1 40       	sbci	r26, 0x01	; 1
    5c3c:	a6 95       	lsr	r26
    5c3e:	8f ef       	ldi	r24, 0xFF	; 255
    5c40:	81 1d       	adc	r24, r1
    5c42:	81 1d       	adc	r24, r1
    5c44:	08 95       	ret

00005c46 <__fp_inf>:
    5c46:	97 f9       	bld	r25, 7
    5c48:	9f 67       	ori	r25, 0x7F	; 127
    5c4a:	80 e8       	ldi	r24, 0x80	; 128
    5c4c:	70 e0       	ldi	r23, 0x00	; 0
    5c4e:	60 e0       	ldi	r22, 0x00	; 0
    5c50:	08 95       	ret

00005c52 <__fp_nan>:
    5c52:	9f ef       	ldi	r25, 0xFF	; 255
    5c54:	80 ec       	ldi	r24, 0xC0	; 192
    5c56:	08 95       	ret

00005c58 <__fp_pscA>:
    5c58:	00 24       	eor	r0, r0
    5c5a:	0a 94       	dec	r0
    5c5c:	16 16       	cp	r1, r22
    5c5e:	17 06       	cpc	r1, r23
    5c60:	18 06       	cpc	r1, r24
    5c62:	09 06       	cpc	r0, r25
    5c64:	08 95       	ret

00005c66 <__fp_pscB>:
    5c66:	00 24       	eor	r0, r0
    5c68:	0a 94       	dec	r0
    5c6a:	12 16       	cp	r1, r18
    5c6c:	13 06       	cpc	r1, r19
    5c6e:	14 06       	cpc	r1, r20
    5c70:	05 06       	cpc	r0, r21
    5c72:	08 95       	ret

00005c74 <__fp_round>:
    5c74:	09 2e       	mov	r0, r25
    5c76:	03 94       	inc	r0
    5c78:	00 0c       	add	r0, r0
    5c7a:	11 f4       	brne	.+4      	; 0x5c80 <__fp_round+0xc>
    5c7c:	88 23       	and	r24, r24
    5c7e:	52 f0       	brmi	.+20     	; 0x5c94 <__fp_round+0x20>
    5c80:	bb 0f       	add	r27, r27
    5c82:	40 f4       	brcc	.+16     	; 0x5c94 <__fp_round+0x20>
    5c84:	bf 2b       	or	r27, r31
    5c86:	11 f4       	brne	.+4      	; 0x5c8c <__fp_round+0x18>
    5c88:	60 ff       	sbrs	r22, 0
    5c8a:	04 c0       	rjmp	.+8      	; 0x5c94 <__fp_round+0x20>
    5c8c:	6f 5f       	subi	r22, 0xFF	; 255
    5c8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5c90:	8f 4f       	sbci	r24, 0xFF	; 255
    5c92:	9f 4f       	sbci	r25, 0xFF	; 255
    5c94:	08 95       	ret

00005c96 <__fp_split3>:
    5c96:	57 fd       	sbrc	r21, 7
    5c98:	90 58       	subi	r25, 0x80	; 128
    5c9a:	44 0f       	add	r20, r20
    5c9c:	55 1f       	adc	r21, r21
    5c9e:	59 f0       	breq	.+22     	; 0x5cb6 <__fp_splitA+0x10>
    5ca0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ca2:	71 f0       	breq	.+28     	; 0x5cc0 <__fp_splitA+0x1a>
    5ca4:	47 95       	ror	r20

00005ca6 <__fp_splitA>:
    5ca6:	88 0f       	add	r24, r24
    5ca8:	97 fb       	bst	r25, 7
    5caa:	99 1f       	adc	r25, r25
    5cac:	61 f0       	breq	.+24     	; 0x5cc6 <__fp_splitA+0x20>
    5cae:	9f 3f       	cpi	r25, 0xFF	; 255
    5cb0:	79 f0       	breq	.+30     	; 0x5cd0 <__fp_splitA+0x2a>
    5cb2:	87 95       	ror	r24
    5cb4:	08 95       	ret
    5cb6:	12 16       	cp	r1, r18
    5cb8:	13 06       	cpc	r1, r19
    5cba:	14 06       	cpc	r1, r20
    5cbc:	55 1f       	adc	r21, r21
    5cbe:	f2 cf       	rjmp	.-28     	; 0x5ca4 <__fp_split3+0xe>
    5cc0:	46 95       	lsr	r20
    5cc2:	f1 df       	rcall	.-30     	; 0x5ca6 <__fp_splitA>
    5cc4:	08 c0       	rjmp	.+16     	; 0x5cd6 <__fp_splitA+0x30>
    5cc6:	16 16       	cp	r1, r22
    5cc8:	17 06       	cpc	r1, r23
    5cca:	18 06       	cpc	r1, r24
    5ccc:	99 1f       	adc	r25, r25
    5cce:	f1 cf       	rjmp	.-30     	; 0x5cb2 <__fp_splitA+0xc>
    5cd0:	86 95       	lsr	r24
    5cd2:	71 05       	cpc	r23, r1
    5cd4:	61 05       	cpc	r22, r1
    5cd6:	08 94       	sec
    5cd8:	08 95       	ret

00005cda <__fp_zero>:
    5cda:	e8 94       	clt

00005cdc <__fp_szero>:
    5cdc:	bb 27       	eor	r27, r27
    5cde:	66 27       	eor	r22, r22
    5ce0:	77 27       	eor	r23, r23
    5ce2:	cb 01       	movw	r24, r22
    5ce4:	97 f9       	bld	r25, 7
    5ce6:	08 95       	ret

00005ce8 <__gesf2>:
    5ce8:	8a df       	rcall	.-236    	; 0x5bfe <__fp_cmp>
    5cea:	08 f4       	brcc	.+2      	; 0x5cee <__gesf2+0x6>
    5cec:	8f ef       	ldi	r24, 0xFF	; 255
    5cee:	08 95       	ret

00005cf0 <lrint>:
    5cf0:	da df       	rcall	.-76     	; 0x5ca6 <__fp_splitA>
    5cf2:	a8 f1       	brcs	.+106    	; 0x5d5e <lrint+0x6e>
    5cf4:	9e 57       	subi	r25, 0x7E	; 126
    5cf6:	a8 f1       	brcs	.+106    	; 0x5d62 <lrint+0x72>
    5cf8:	98 51       	subi	r25, 0x18	; 24
    5cfa:	60 f0       	brcs	.+24     	; 0x5d14 <lrint+0x24>
    5cfc:	39 f1       	breq	.+78     	; 0x5d4c <lrint+0x5c>
    5cfe:	98 30       	cpi	r25, 0x08	; 8
    5d00:	70 f5       	brcc	.+92     	; 0x5d5e <lrint+0x6e>
    5d02:	09 2e       	mov	r0, r25
    5d04:	99 27       	eor	r25, r25
    5d06:	66 0f       	add	r22, r22
    5d08:	77 1f       	adc	r23, r23
    5d0a:	88 1f       	adc	r24, r24
    5d0c:	99 1f       	adc	r25, r25
    5d0e:	0a 94       	dec	r0
    5d10:	d1 f7       	brne	.-12     	; 0x5d06 <lrint+0x16>
    5d12:	1c c0       	rjmp	.+56     	; 0x5d4c <lrint+0x5c>
    5d14:	bb 27       	eor	r27, r27
    5d16:	99 3f       	cpi	r25, 0xF9	; 249
    5d18:	4c f4       	brge	.+18     	; 0x5d2c <lrint+0x3c>
    5d1a:	b1 11       	cpse	r27, r1
    5d1c:	b1 e0       	ldi	r27, 0x01	; 1
    5d1e:	b6 2b       	or	r27, r22
    5d20:	67 2f       	mov	r22, r23
    5d22:	78 2f       	mov	r23, r24
    5d24:	88 27       	eor	r24, r24
    5d26:	98 5f       	subi	r25, 0xF8	; 248
    5d28:	b1 f7       	brne	.-20     	; 0x5d16 <lrint+0x26>
    5d2a:	08 c0       	rjmp	.+16     	; 0x5d3c <lrint+0x4c>
    5d2c:	86 95       	lsr	r24
    5d2e:	77 95       	ror	r23
    5d30:	67 95       	ror	r22
    5d32:	b7 95       	ror	r27
    5d34:	08 f4       	brcc	.+2      	; 0x5d38 <lrint+0x48>
    5d36:	b1 60       	ori	r27, 0x01	; 1
    5d38:	93 95       	inc	r25
    5d3a:	c1 f7       	brne	.-16     	; 0x5d2c <lrint+0x3c>
    5d3c:	bb 0f       	add	r27, r27
    5d3e:	30 f4       	brcc	.+12     	; 0x5d4c <lrint+0x5c>
    5d40:	11 f4       	brne	.+4      	; 0x5d46 <lrint+0x56>
    5d42:	60 ff       	sbrs	r22, 0
    5d44:	03 c0       	rjmp	.+6      	; 0x5d4c <lrint+0x5c>
    5d46:	6f 5f       	subi	r22, 0xFF	; 255
    5d48:	7f 4f       	sbci	r23, 0xFF	; 255
    5d4a:	8f 4f       	sbci	r24, 0xFF	; 255
    5d4c:	3e f4       	brtc	.+14     	; 0x5d5c <lrint+0x6c>
    5d4e:	90 95       	com	r25
    5d50:	80 95       	com	r24
    5d52:	70 95       	com	r23
    5d54:	61 95       	neg	r22
    5d56:	7f 4f       	sbci	r23, 0xFF	; 255
    5d58:	8f 4f       	sbci	r24, 0xFF	; 255
    5d5a:	9f 4f       	sbci	r25, 0xFF	; 255
    5d5c:	08 95       	ret
    5d5e:	68 94       	set
    5d60:	bd cf       	rjmp	.-134    	; 0x5cdc <__fp_szero>
    5d62:	bb cf       	rjmp	.-138    	; 0x5cda <__fp_zero>

00005d64 <__mulsf3>:
    5d64:	0b d0       	rcall	.+22     	; 0x5d7c <__mulsf3x>
    5d66:	86 cf       	rjmp	.-244    	; 0x5c74 <__fp_round>
    5d68:	77 df       	rcall	.-274    	; 0x5c58 <__fp_pscA>
    5d6a:	28 f0       	brcs	.+10     	; 0x5d76 <__mulsf3+0x12>
    5d6c:	7c df       	rcall	.-264    	; 0x5c66 <__fp_pscB>
    5d6e:	18 f0       	brcs	.+6      	; 0x5d76 <__mulsf3+0x12>
    5d70:	95 23       	and	r25, r21
    5d72:	09 f0       	breq	.+2      	; 0x5d76 <__mulsf3+0x12>
    5d74:	68 cf       	rjmp	.-304    	; 0x5c46 <__fp_inf>
    5d76:	6d cf       	rjmp	.-294    	; 0x5c52 <__fp_nan>
    5d78:	11 24       	eor	r1, r1
    5d7a:	b0 cf       	rjmp	.-160    	; 0x5cdc <__fp_szero>

00005d7c <__mulsf3x>:
    5d7c:	8c df       	rcall	.-232    	; 0x5c96 <__fp_split3>
    5d7e:	a0 f3       	brcs	.-24     	; 0x5d68 <__mulsf3+0x4>

00005d80 <__mulsf3_pse>:
    5d80:	95 9f       	mul	r25, r21
    5d82:	d1 f3       	breq	.-12     	; 0x5d78 <__mulsf3+0x14>
    5d84:	95 0f       	add	r25, r21
    5d86:	50 e0       	ldi	r21, 0x00	; 0
    5d88:	55 1f       	adc	r21, r21
    5d8a:	62 9f       	mul	r22, r18
    5d8c:	f0 01       	movw	r30, r0
    5d8e:	72 9f       	mul	r23, r18
    5d90:	bb 27       	eor	r27, r27
    5d92:	f0 0d       	add	r31, r0
    5d94:	b1 1d       	adc	r27, r1
    5d96:	63 9f       	mul	r22, r19
    5d98:	aa 27       	eor	r26, r26
    5d9a:	f0 0d       	add	r31, r0
    5d9c:	b1 1d       	adc	r27, r1
    5d9e:	aa 1f       	adc	r26, r26
    5da0:	64 9f       	mul	r22, r20
    5da2:	66 27       	eor	r22, r22
    5da4:	b0 0d       	add	r27, r0
    5da6:	a1 1d       	adc	r26, r1
    5da8:	66 1f       	adc	r22, r22
    5daa:	82 9f       	mul	r24, r18
    5dac:	22 27       	eor	r18, r18
    5dae:	b0 0d       	add	r27, r0
    5db0:	a1 1d       	adc	r26, r1
    5db2:	62 1f       	adc	r22, r18
    5db4:	73 9f       	mul	r23, r19
    5db6:	b0 0d       	add	r27, r0
    5db8:	a1 1d       	adc	r26, r1
    5dba:	62 1f       	adc	r22, r18
    5dbc:	83 9f       	mul	r24, r19
    5dbe:	a0 0d       	add	r26, r0
    5dc0:	61 1d       	adc	r22, r1
    5dc2:	22 1f       	adc	r18, r18
    5dc4:	74 9f       	mul	r23, r20
    5dc6:	33 27       	eor	r19, r19
    5dc8:	a0 0d       	add	r26, r0
    5dca:	61 1d       	adc	r22, r1
    5dcc:	23 1f       	adc	r18, r19
    5dce:	84 9f       	mul	r24, r20
    5dd0:	60 0d       	add	r22, r0
    5dd2:	21 1d       	adc	r18, r1
    5dd4:	82 2f       	mov	r24, r18
    5dd6:	76 2f       	mov	r23, r22
    5dd8:	6a 2f       	mov	r22, r26
    5dda:	11 24       	eor	r1, r1
    5ddc:	9f 57       	subi	r25, 0x7F	; 127
    5dde:	50 40       	sbci	r21, 0x00	; 0
    5de0:	8a f0       	brmi	.+34     	; 0x5e04 <__mulsf3_pse+0x84>
    5de2:	e1 f0       	breq	.+56     	; 0x5e1c <__mulsf3_pse+0x9c>
    5de4:	88 23       	and	r24, r24
    5de6:	4a f0       	brmi	.+18     	; 0x5dfa <__mulsf3_pse+0x7a>
    5de8:	ee 0f       	add	r30, r30
    5dea:	ff 1f       	adc	r31, r31
    5dec:	bb 1f       	adc	r27, r27
    5dee:	66 1f       	adc	r22, r22
    5df0:	77 1f       	adc	r23, r23
    5df2:	88 1f       	adc	r24, r24
    5df4:	91 50       	subi	r25, 0x01	; 1
    5df6:	50 40       	sbci	r21, 0x00	; 0
    5df8:	a9 f7       	brne	.-22     	; 0x5de4 <__mulsf3_pse+0x64>
    5dfa:	9e 3f       	cpi	r25, 0xFE	; 254
    5dfc:	51 05       	cpc	r21, r1
    5dfe:	70 f0       	brcs	.+28     	; 0x5e1c <__mulsf3_pse+0x9c>
    5e00:	22 cf       	rjmp	.-444    	; 0x5c46 <__fp_inf>
    5e02:	6c cf       	rjmp	.-296    	; 0x5cdc <__fp_szero>
    5e04:	5f 3f       	cpi	r21, 0xFF	; 255
    5e06:	ec f3       	brlt	.-6      	; 0x5e02 <__mulsf3_pse+0x82>
    5e08:	98 3e       	cpi	r25, 0xE8	; 232
    5e0a:	dc f3       	brlt	.-10     	; 0x5e02 <__mulsf3_pse+0x82>
    5e0c:	86 95       	lsr	r24
    5e0e:	77 95       	ror	r23
    5e10:	67 95       	ror	r22
    5e12:	b7 95       	ror	r27
    5e14:	f7 95       	ror	r31
    5e16:	e7 95       	ror	r30
    5e18:	9f 5f       	subi	r25, 0xFF	; 255
    5e1a:	c1 f7       	brne	.-16     	; 0x5e0c <__mulsf3_pse+0x8c>
    5e1c:	fe 2b       	or	r31, r30
    5e1e:	88 0f       	add	r24, r24
    5e20:	91 1d       	adc	r25, r1
    5e22:	96 95       	lsr	r25
    5e24:	87 95       	ror	r24
    5e26:	97 f9       	bld	r25, 7
    5e28:	08 95       	ret

00005e2a <pow>:
    5e2a:	fa 01       	movw	r30, r20
    5e2c:	ee 0f       	add	r30, r30
    5e2e:	ff 1f       	adc	r31, r31
    5e30:	30 96       	adiw	r30, 0x00	; 0
    5e32:	21 05       	cpc	r18, r1
    5e34:	31 05       	cpc	r19, r1
    5e36:	99 f1       	breq	.+102    	; 0x5e9e <pow+0x74>
    5e38:	61 15       	cp	r22, r1
    5e3a:	71 05       	cpc	r23, r1
    5e3c:	61 f4       	brne	.+24     	; 0x5e56 <pow+0x2c>
    5e3e:	80 38       	cpi	r24, 0x80	; 128
    5e40:	bf e3       	ldi	r27, 0x3F	; 63
    5e42:	9b 07       	cpc	r25, r27
    5e44:	49 f1       	breq	.+82     	; 0x5e98 <pow+0x6e>
    5e46:	68 94       	set
    5e48:	90 38       	cpi	r25, 0x80	; 128
    5e4a:	81 05       	cpc	r24, r1
    5e4c:	61 f0       	breq	.+24     	; 0x5e66 <pow+0x3c>
    5e4e:	80 38       	cpi	r24, 0x80	; 128
    5e50:	bf ef       	ldi	r27, 0xFF	; 255
    5e52:	9b 07       	cpc	r25, r27
    5e54:	41 f0       	breq	.+16     	; 0x5e66 <pow+0x3c>
    5e56:	99 23       	and	r25, r25
    5e58:	42 f5       	brpl	.+80     	; 0x5eaa <pow+0x80>
    5e5a:	ff 3f       	cpi	r31, 0xFF	; 255
    5e5c:	e1 05       	cpc	r30, r1
    5e5e:	31 05       	cpc	r19, r1
    5e60:	21 05       	cpc	r18, r1
    5e62:	11 f1       	breq	.+68     	; 0x5ea8 <pow+0x7e>
    5e64:	e8 94       	clt
    5e66:	08 94       	sec
    5e68:	e7 95       	ror	r30
    5e6a:	d9 01       	movw	r26, r18
    5e6c:	aa 23       	and	r26, r26
    5e6e:	29 f4       	brne	.+10     	; 0x5e7a <pow+0x50>
    5e70:	ab 2f       	mov	r26, r27
    5e72:	be 2f       	mov	r27, r30
    5e74:	f8 5f       	subi	r31, 0xF8	; 248
    5e76:	d0 f3       	brcs	.-12     	; 0x5e6c <pow+0x42>
    5e78:	10 c0       	rjmp	.+32     	; 0x5e9a <pow+0x70>
    5e7a:	ff 5f       	subi	r31, 0xFF	; 255
    5e7c:	70 f4       	brcc	.+28     	; 0x5e9a <pow+0x70>
    5e7e:	a6 95       	lsr	r26
    5e80:	e0 f7       	brcc	.-8      	; 0x5e7a <pow+0x50>
    5e82:	f7 39       	cpi	r31, 0x97	; 151
    5e84:	50 f0       	brcs	.+20     	; 0x5e9a <pow+0x70>
    5e86:	19 f0       	breq	.+6      	; 0x5e8e <pow+0x64>
    5e88:	ff 3a       	cpi	r31, 0xAF	; 175
    5e8a:	38 f4       	brcc	.+14     	; 0x5e9a <pow+0x70>
    5e8c:	9f 77       	andi	r25, 0x7F	; 127
    5e8e:	9f 93       	push	r25
    5e90:	0c d0       	rcall	.+24     	; 0x5eaa <pow+0x80>
    5e92:	0f 90       	pop	r0
    5e94:	07 fc       	sbrc	r0, 7
    5e96:	90 58       	subi	r25, 0x80	; 128
    5e98:	08 95       	ret
    5e9a:	3e f0       	brts	.+14     	; 0x5eaa <pow+0x80>
    5e9c:	da ce       	rjmp	.-588    	; 0x5c52 <__fp_nan>
    5e9e:	60 e0       	ldi	r22, 0x00	; 0
    5ea0:	70 e0       	ldi	r23, 0x00	; 0
    5ea2:	80 e8       	ldi	r24, 0x80	; 128
    5ea4:	9f e3       	ldi	r25, 0x3F	; 63
    5ea6:	08 95       	ret
    5ea8:	4f e7       	ldi	r20, 0x7F	; 127
    5eaa:	9f 77       	andi	r25, 0x7F	; 127
    5eac:	5f 93       	push	r21
    5eae:	4f 93       	push	r20
    5eb0:	3f 93       	push	r19
    5eb2:	2f 93       	push	r18
    5eb4:	9e d0       	rcall	.+316    	; 0x5ff2 <log>
    5eb6:	2f 91       	pop	r18
    5eb8:	3f 91       	pop	r19
    5eba:	4f 91       	pop	r20
    5ebc:	5f 91       	pop	r21
    5ebe:	52 df       	rcall	.-348    	; 0x5d64 <__mulsf3>
    5ec0:	05 c0       	rjmp	.+10     	; 0x5ecc <exp>
    5ec2:	19 f4       	brne	.+6      	; 0x5eca <pow+0xa0>
    5ec4:	0e f0       	brts	.+2      	; 0x5ec8 <pow+0x9e>
    5ec6:	bf ce       	rjmp	.-642    	; 0x5c46 <__fp_inf>
    5ec8:	08 cf       	rjmp	.-496    	; 0x5cda <__fp_zero>
    5eca:	c3 ce       	rjmp	.-634    	; 0x5c52 <__fp_nan>

00005ecc <exp>:
    5ecc:	ec de       	rcall	.-552    	; 0x5ca6 <__fp_splitA>
    5ece:	c8 f3       	brcs	.-14     	; 0x5ec2 <pow+0x98>
    5ed0:	96 38       	cpi	r25, 0x86	; 134
    5ed2:	c0 f7       	brcc	.-16     	; 0x5ec4 <pow+0x9a>
    5ed4:	07 f8       	bld	r0, 7
    5ed6:	0f 92       	push	r0
    5ed8:	e8 94       	clt
    5eda:	2b e3       	ldi	r18, 0x3B	; 59
    5edc:	3a ea       	ldi	r19, 0xAA	; 170
    5ede:	48 eb       	ldi	r20, 0xB8	; 184
    5ee0:	5f e7       	ldi	r21, 0x7F	; 127
    5ee2:	4e df       	rcall	.-356    	; 0x5d80 <__mulsf3_pse>
    5ee4:	0f 92       	push	r0
    5ee6:	0f 92       	push	r0
    5ee8:	0f 92       	push	r0
    5eea:	4d b7       	in	r20, 0x3d	; 61
    5eec:	5e b7       	in	r21, 0x3e	; 62
    5eee:	0f 92       	push	r0
    5ef0:	c0 d0       	rcall	.+384    	; 0x6072 <modf>
    5ef2:	e8 ec       	ldi	r30, 0xC8	; 200
    5ef4:	f0 e0       	ldi	r31, 0x00	; 0
    5ef6:	16 d0       	rcall	.+44     	; 0x5f24 <__fp_powser>
    5ef8:	4f 91       	pop	r20
    5efa:	5f 91       	pop	r21
    5efc:	ef 91       	pop	r30
    5efe:	ff 91       	pop	r31
    5f00:	e5 95       	asr	r30
    5f02:	ee 1f       	adc	r30, r30
    5f04:	ff 1f       	adc	r31, r31
    5f06:	49 f0       	breq	.+18     	; 0x5f1a <exp+0x4e>
    5f08:	fe 57       	subi	r31, 0x7E	; 126
    5f0a:	e0 68       	ori	r30, 0x80	; 128
    5f0c:	44 27       	eor	r20, r20
    5f0e:	ee 0f       	add	r30, r30
    5f10:	44 1f       	adc	r20, r20
    5f12:	fa 95       	dec	r31
    5f14:	e1 f7       	brne	.-8      	; 0x5f0e <exp+0x42>
    5f16:	41 95       	neg	r20
    5f18:	55 0b       	sbc	r21, r21
    5f1a:	32 d0       	rcall	.+100    	; 0x5f80 <ldexp>
    5f1c:	0f 90       	pop	r0
    5f1e:	07 fe       	sbrs	r0, 7
    5f20:	26 c0       	rjmp	.+76     	; 0x5f6e <inverse>
    5f22:	08 95       	ret

00005f24 <__fp_powser>:
    5f24:	df 93       	push	r29
    5f26:	cf 93       	push	r28
    5f28:	1f 93       	push	r17
    5f2a:	0f 93       	push	r16
    5f2c:	ff 92       	push	r15
    5f2e:	ef 92       	push	r14
    5f30:	df 92       	push	r13
    5f32:	7b 01       	movw	r14, r22
    5f34:	8c 01       	movw	r16, r24
    5f36:	68 94       	set
    5f38:	05 c0       	rjmp	.+10     	; 0x5f44 <__fp_powser+0x20>
    5f3a:	da 2e       	mov	r13, r26
    5f3c:	ef 01       	movw	r28, r30
    5f3e:	1e df       	rcall	.-452    	; 0x5d7c <__mulsf3x>
    5f40:	fe 01       	movw	r30, r28
    5f42:	e8 94       	clt
    5f44:	a5 91       	lpm	r26, Z+
    5f46:	25 91       	lpm	r18, Z+
    5f48:	35 91       	lpm	r19, Z+
    5f4a:	45 91       	lpm	r20, Z+
    5f4c:	55 91       	lpm	r21, Z+
    5f4e:	ae f3       	brts	.-22     	; 0x5f3a <__fp_powser+0x16>
    5f50:	ef 01       	movw	r28, r30
    5f52:	28 dd       	rcall	.-1456   	; 0x59a4 <__addsf3x>
    5f54:	fe 01       	movw	r30, r28
    5f56:	97 01       	movw	r18, r14
    5f58:	a8 01       	movw	r20, r16
    5f5a:	da 94       	dec	r13
    5f5c:	79 f7       	brne	.-34     	; 0x5f3c <__fp_powser+0x18>
    5f5e:	df 90       	pop	r13
    5f60:	ef 90       	pop	r14
    5f62:	ff 90       	pop	r15
    5f64:	0f 91       	pop	r16
    5f66:	1f 91       	pop	r17
    5f68:	cf 91       	pop	r28
    5f6a:	df 91       	pop	r29
    5f6c:	08 95       	ret

00005f6e <inverse>:
    5f6e:	9b 01       	movw	r18, r22
    5f70:	ac 01       	movw	r20, r24
    5f72:	60 e0       	ldi	r22, 0x00	; 0
    5f74:	70 e0       	ldi	r23, 0x00	; 0
    5f76:	80 e8       	ldi	r24, 0x80	; 128
    5f78:	9f e3       	ldi	r25, 0x3F	; 63
    5f7a:	6b cd       	rjmp	.-1322   	; 0x5a52 <__divsf3>
    5f7c:	64 ce       	rjmp	.-824    	; 0x5c46 <__fp_inf>
    5f7e:	ac c0       	rjmp	.+344    	; 0x60d8 <__fp_mpack>

00005f80 <ldexp>:
    5f80:	92 de       	rcall	.-732    	; 0x5ca6 <__fp_splitA>
    5f82:	e8 f3       	brcs	.-6      	; 0x5f7e <inverse+0x10>
    5f84:	99 23       	and	r25, r25
    5f86:	d9 f3       	breq	.-10     	; 0x5f7e <inverse+0x10>
    5f88:	94 0f       	add	r25, r20
    5f8a:	51 1d       	adc	r21, r1
    5f8c:	bb f3       	brvs	.-18     	; 0x5f7c <inverse+0xe>
    5f8e:	91 50       	subi	r25, 0x01	; 1
    5f90:	50 40       	sbci	r21, 0x00	; 0
    5f92:	94 f0       	brlt	.+36     	; 0x5fb8 <ldexp+0x38>
    5f94:	59 f0       	breq	.+22     	; 0x5fac <ldexp+0x2c>
    5f96:	88 23       	and	r24, r24
    5f98:	32 f0       	brmi	.+12     	; 0x5fa6 <ldexp+0x26>
    5f9a:	66 0f       	add	r22, r22
    5f9c:	77 1f       	adc	r23, r23
    5f9e:	88 1f       	adc	r24, r24
    5fa0:	91 50       	subi	r25, 0x01	; 1
    5fa2:	50 40       	sbci	r21, 0x00	; 0
    5fa4:	c1 f7       	brne	.-16     	; 0x5f96 <ldexp+0x16>
    5fa6:	9e 3f       	cpi	r25, 0xFE	; 254
    5fa8:	51 05       	cpc	r21, r1
    5faa:	44 f7       	brge	.-48     	; 0x5f7c <inverse+0xe>
    5fac:	88 0f       	add	r24, r24
    5fae:	91 1d       	adc	r25, r1
    5fb0:	96 95       	lsr	r25
    5fb2:	87 95       	ror	r24
    5fb4:	97 f9       	bld	r25, 7
    5fb6:	08 95       	ret
    5fb8:	5f 3f       	cpi	r21, 0xFF	; 255
    5fba:	ac f0       	brlt	.+42     	; 0x5fe6 <ldexp+0x66>
    5fbc:	98 3e       	cpi	r25, 0xE8	; 232
    5fbe:	9c f0       	brlt	.+38     	; 0x5fe6 <ldexp+0x66>
    5fc0:	bb 27       	eor	r27, r27
    5fc2:	86 95       	lsr	r24
    5fc4:	77 95       	ror	r23
    5fc6:	67 95       	ror	r22
    5fc8:	b7 95       	ror	r27
    5fca:	08 f4       	brcc	.+2      	; 0x5fce <ldexp+0x4e>
    5fcc:	b1 60       	ori	r27, 0x01	; 1
    5fce:	93 95       	inc	r25
    5fd0:	c1 f7       	brne	.-16     	; 0x5fc2 <ldexp+0x42>
    5fd2:	bb 0f       	add	r27, r27
    5fd4:	58 f7       	brcc	.-42     	; 0x5fac <ldexp+0x2c>
    5fd6:	11 f4       	brne	.+4      	; 0x5fdc <ldexp+0x5c>
    5fd8:	60 ff       	sbrs	r22, 0
    5fda:	e8 cf       	rjmp	.-48     	; 0x5fac <ldexp+0x2c>
    5fdc:	6f 5f       	subi	r22, 0xFF	; 255
    5fde:	7f 4f       	sbci	r23, 0xFF	; 255
    5fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    5fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe4:	e3 cf       	rjmp	.-58     	; 0x5fac <ldexp+0x2c>
    5fe6:	7a ce       	rjmp	.-780    	; 0x5cdc <__fp_szero>
    5fe8:	0e f0       	brts	.+2      	; 0x5fec <ldexp+0x6c>
    5fea:	76 c0       	rjmp	.+236    	; 0x60d8 <__fp_mpack>
    5fec:	32 ce       	rjmp	.-924    	; 0x5c52 <__fp_nan>
    5fee:	68 94       	set
    5ff0:	2a ce       	rjmp	.-940    	; 0x5c46 <__fp_inf>

00005ff2 <log>:
    5ff2:	59 de       	rcall	.-846    	; 0x5ca6 <__fp_splitA>
    5ff4:	c8 f3       	brcs	.-14     	; 0x5fe8 <ldexp+0x68>
    5ff6:	99 23       	and	r25, r25
    5ff8:	d1 f3       	breq	.-12     	; 0x5fee <ldexp+0x6e>
    5ffa:	c6 f3       	brts	.-16     	; 0x5fec <ldexp+0x6c>
    5ffc:	df 93       	push	r29
    5ffe:	cf 93       	push	r28
    6000:	1f 93       	push	r17
    6002:	0f 93       	push	r16
    6004:	ff 92       	push	r15
    6006:	c9 2f       	mov	r28, r25
    6008:	dd 27       	eor	r29, r29
    600a:	88 23       	and	r24, r24
    600c:	2a f0       	brmi	.+10     	; 0x6018 <log+0x26>
    600e:	21 97       	sbiw	r28, 0x01	; 1
    6010:	66 0f       	add	r22, r22
    6012:	77 1f       	adc	r23, r23
    6014:	88 1f       	adc	r24, r24
    6016:	da f7       	brpl	.-10     	; 0x600e <log+0x1c>
    6018:	20 e0       	ldi	r18, 0x00	; 0
    601a:	30 e0       	ldi	r19, 0x00	; 0
    601c:	40 e8       	ldi	r20, 0x80	; 128
    601e:	5f eb       	ldi	r21, 0xBF	; 191
    6020:	9f e3       	ldi	r25, 0x3F	; 63
    6022:	88 39       	cpi	r24, 0x98	; 152
    6024:	20 f0       	brcs	.+8      	; 0x602e <log+0x3c>
    6026:	80 3e       	cpi	r24, 0xE0	; 224
    6028:	30 f0       	brcs	.+12     	; 0x6036 <log+0x44>
    602a:	21 96       	adiw	r28, 0x01	; 1
    602c:	8f 77       	andi	r24, 0x7F	; 127
    602e:	a9 dc       	rcall	.-1710   	; 0x5982 <__addsf3>
    6030:	e0 ef       	ldi	r30, 0xF0	; 240
    6032:	f0 e0       	ldi	r31, 0x00	; 0
    6034:	03 c0       	rjmp	.+6      	; 0x603c <log+0x4a>
    6036:	a5 dc       	rcall	.-1718   	; 0x5982 <__addsf3>
    6038:	ed e1       	ldi	r30, 0x1D	; 29
    603a:	f1 e0       	ldi	r31, 0x01	; 1
    603c:	73 df       	rcall	.-282    	; 0x5f24 <__fp_powser>
    603e:	8b 01       	movw	r16, r22
    6040:	be 01       	movw	r22, r28
    6042:	ec 01       	movw	r28, r24
    6044:	fb 2e       	mov	r15, r27
    6046:	6f 57       	subi	r22, 0x7F	; 127
    6048:	71 09       	sbc	r23, r1
    604a:	75 95       	asr	r23
    604c:	77 1f       	adc	r23, r23
    604e:	88 0b       	sbc	r24, r24
    6050:	99 0b       	sbc	r25, r25
    6052:	9a dd       	rcall	.-1228   	; 0x5b88 <__floatsisf>
    6054:	28 e1       	ldi	r18, 0x18	; 24
    6056:	32 e7       	ldi	r19, 0x72	; 114
    6058:	41 e3       	ldi	r20, 0x31	; 49
    605a:	5f e3       	ldi	r21, 0x3F	; 63
    605c:	8f de       	rcall	.-738    	; 0x5d7c <__mulsf3x>
    605e:	af 2d       	mov	r26, r15
    6060:	98 01       	movw	r18, r16
    6062:	ae 01       	movw	r20, r28
    6064:	ff 90       	pop	r15
    6066:	0f 91       	pop	r16
    6068:	1f 91       	pop	r17
    606a:	cf 91       	pop	r28
    606c:	df 91       	pop	r29
    606e:	9a dc       	rcall	.-1740   	; 0x59a4 <__addsf3x>
    6070:	01 ce       	rjmp	.-1022   	; 0x5c74 <__fp_round>

00006072 <modf>:
    6072:	fa 01       	movw	r30, r20
    6074:	dc 01       	movw	r26, r24
    6076:	aa 0f       	add	r26, r26
    6078:	bb 1f       	adc	r27, r27
    607a:	9b 01       	movw	r18, r22
    607c:	ac 01       	movw	r20, r24
    607e:	bf 57       	subi	r27, 0x7F	; 127
    6080:	28 f4       	brcc	.+10     	; 0x608c <modf+0x1a>
    6082:	22 27       	eor	r18, r18
    6084:	33 27       	eor	r19, r19
    6086:	44 27       	eor	r20, r20
    6088:	50 78       	andi	r21, 0x80	; 128
    608a:	1f c0       	rjmp	.+62     	; 0x60ca <modf+0x58>
    608c:	b7 51       	subi	r27, 0x17	; 23
    608e:	88 f4       	brcc	.+34     	; 0x60b2 <modf+0x40>
    6090:	ab 2f       	mov	r26, r27
    6092:	00 24       	eor	r0, r0
    6094:	46 95       	lsr	r20
    6096:	37 95       	ror	r19
    6098:	27 95       	ror	r18
    609a:	01 1c       	adc	r0, r1
    609c:	a3 95       	inc	r26
    609e:	d2 f3       	brmi	.-12     	; 0x6094 <modf+0x22>
    60a0:	00 20       	and	r0, r0
    60a2:	69 f0       	breq	.+26     	; 0x60be <modf+0x4c>
    60a4:	22 0f       	add	r18, r18
    60a6:	33 1f       	adc	r19, r19
    60a8:	44 1f       	adc	r20, r20
    60aa:	b3 95       	inc	r27
    60ac:	da f3       	brmi	.-10     	; 0x60a4 <modf+0x32>
    60ae:	0d d0       	rcall	.+26     	; 0x60ca <modf+0x58>
    60b0:	67 cc       	rjmp	.-1842   	; 0x5980 <__subsf3>
    60b2:	61 30       	cpi	r22, 0x01	; 1
    60b4:	71 05       	cpc	r23, r1
    60b6:	a0 e8       	ldi	r26, 0x80	; 128
    60b8:	8a 07       	cpc	r24, r26
    60ba:	b9 46       	sbci	r27, 0x69	; 105
    60bc:	30 f4       	brcc	.+12     	; 0x60ca <modf+0x58>
    60be:	9b 01       	movw	r18, r22
    60c0:	ac 01       	movw	r20, r24
    60c2:	66 27       	eor	r22, r22
    60c4:	77 27       	eor	r23, r23
    60c6:	88 27       	eor	r24, r24
    60c8:	90 78       	andi	r25, 0x80	; 128
    60ca:	30 96       	adiw	r30, 0x00	; 0
    60cc:	21 f0       	breq	.+8      	; 0x60d6 <modf+0x64>
    60ce:	20 83       	st	Z, r18
    60d0:	31 83       	std	Z+1, r19	; 0x01
    60d2:	42 83       	std	Z+2, r20	; 0x02
    60d4:	53 83       	std	Z+3, r21	; 0x03
    60d6:	08 95       	ret

000060d8 <__fp_mpack>:
    60d8:	9f 3f       	cpi	r25, 0xFF	; 255
    60da:	31 f0       	breq	.+12     	; 0x60e8 <__fp_mpack_finite+0xc>

000060dc <__fp_mpack_finite>:
    60dc:	91 50       	subi	r25, 0x01	; 1
    60de:	20 f4       	brcc	.+8      	; 0x60e8 <__fp_mpack_finite+0xc>
    60e0:	87 95       	ror	r24
    60e2:	77 95       	ror	r23
    60e4:	67 95       	ror	r22
    60e6:	b7 95       	ror	r27
    60e8:	88 0f       	add	r24, r24
    60ea:	91 1d       	adc	r25, r1
    60ec:	96 95       	lsr	r25
    60ee:	87 95       	ror	r24
    60f0:	97 f9       	bld	r25, 7
    60f2:	08 95       	ret

000060f4 <vfprintf>:
    60f4:	a1 e1       	ldi	r26, 0x11	; 17
    60f6:	b0 e0       	ldi	r27, 0x00	; 0
    60f8:	ef e7       	ldi	r30, 0x7F	; 127
    60fa:	f0 e3       	ldi	r31, 0x30	; 48
    60fc:	b7 c3       	rjmp	.+1902   	; 0x686c <__prologue_saves__>
    60fe:	3c 01       	movw	r6, r24
    6100:	7f 87       	std	Y+15, r23	; 0x0f
    6102:	6e 87       	std	Y+14, r22	; 0x0e
    6104:	6a 01       	movw	r12, r20
    6106:	fc 01       	movw	r30, r24
    6108:	17 82       	std	Z+7, r1	; 0x07
    610a:	16 82       	std	Z+6, r1	; 0x06
    610c:	83 81       	ldd	r24, Z+3	; 0x03
    610e:	81 fd       	sbrc	r24, 1
    6110:	03 c0       	rjmp	.+6      	; 0x6118 <vfprintf+0x24>
    6112:	6f ef       	ldi	r22, 0xFF	; 255
    6114:	7f ef       	ldi	r23, 0xFF	; 255
    6116:	52 c3       	rjmp	.+1700   	; 0x67bc <vfprintf+0x6c8>
    6118:	9e 01       	movw	r18, r28
    611a:	2f 5f       	subi	r18, 0xFF	; 255
    611c:	3f 4f       	sbci	r19, 0xFF	; 255
    611e:	39 8b       	std	Y+17, r19	; 0x11
    6120:	28 8b       	std	Y+16, r18	; 0x10
    6122:	f3 01       	movw	r30, r6
    6124:	23 81       	ldd	r18, Z+3	; 0x03
    6126:	ee 85       	ldd	r30, Y+14	; 0x0e
    6128:	ff 85       	ldd	r31, Y+15	; 0x0f
    612a:	23 fd       	sbrc	r18, 3
    612c:	85 91       	lpm	r24, Z+
    612e:	23 ff       	sbrs	r18, 3
    6130:	81 91       	ld	r24, Z+
    6132:	ff 87       	std	Y+15, r31	; 0x0f
    6134:	ee 87       	std	Y+14, r30	; 0x0e
    6136:	88 23       	and	r24, r24
    6138:	09 f4       	brne	.+2      	; 0x613c <vfprintf+0x48>
    613a:	3d c3       	rjmp	.+1658   	; 0x67b6 <vfprintf+0x6c2>
    613c:	85 32       	cpi	r24, 0x25	; 37
    613e:	51 f4       	brne	.+20     	; 0x6154 <vfprintf+0x60>
    6140:	ee 85       	ldd	r30, Y+14	; 0x0e
    6142:	ff 85       	ldd	r31, Y+15	; 0x0f
    6144:	23 fd       	sbrc	r18, 3
    6146:	85 91       	lpm	r24, Z+
    6148:	23 ff       	sbrs	r18, 3
    614a:	81 91       	ld	r24, Z+
    614c:	ff 87       	std	Y+15, r31	; 0x0f
    614e:	ee 87       	std	Y+14, r30	; 0x0e
    6150:	85 32       	cpi	r24, 0x25	; 37
    6152:	21 f4       	brne	.+8      	; 0x615c <vfprintf+0x68>
    6154:	90 e0       	ldi	r25, 0x00	; 0
    6156:	b3 01       	movw	r22, r6
    6158:	20 d6       	rcall	.+3136   	; 0x6d9a <fputc>
    615a:	e3 cf       	rjmp	.-58     	; 0x6122 <vfprintf+0x2e>
    615c:	98 2f       	mov	r25, r24
    615e:	10 e0       	ldi	r17, 0x00	; 0
    6160:	88 24       	eor	r8, r8
    6162:	99 24       	eor	r9, r9
    6164:	10 32       	cpi	r17, 0x20	; 32
    6166:	b0 f4       	brcc	.+44     	; 0x6194 <vfprintf+0xa0>
    6168:	9b 32       	cpi	r25, 0x2B	; 43
    616a:	69 f0       	breq	.+26     	; 0x6186 <vfprintf+0x92>
    616c:	9c 32       	cpi	r25, 0x2C	; 44
    616e:	28 f4       	brcc	.+10     	; 0x617a <vfprintf+0x86>
    6170:	90 32       	cpi	r25, 0x20	; 32
    6172:	51 f0       	breq	.+20     	; 0x6188 <vfprintf+0x94>
    6174:	93 32       	cpi	r25, 0x23	; 35
    6176:	71 f4       	brne	.+28     	; 0x6194 <vfprintf+0xa0>
    6178:	0b c0       	rjmp	.+22     	; 0x6190 <vfprintf+0x9c>
    617a:	9d 32       	cpi	r25, 0x2D	; 45
    617c:	39 f0       	breq	.+14     	; 0x618c <vfprintf+0x98>
    617e:	90 33       	cpi	r25, 0x30	; 48
    6180:	49 f4       	brne	.+18     	; 0x6194 <vfprintf+0xa0>
    6182:	11 60       	ori	r17, 0x01	; 1
    6184:	28 c0       	rjmp	.+80     	; 0x61d6 <vfprintf+0xe2>
    6186:	12 60       	ori	r17, 0x02	; 2
    6188:	14 60       	ori	r17, 0x04	; 4
    618a:	25 c0       	rjmp	.+74     	; 0x61d6 <vfprintf+0xe2>
    618c:	18 60       	ori	r17, 0x08	; 8
    618e:	23 c0       	rjmp	.+70     	; 0x61d6 <vfprintf+0xe2>
    6190:	10 61       	ori	r17, 0x10	; 16
    6192:	21 c0       	rjmp	.+66     	; 0x61d6 <vfprintf+0xe2>
    6194:	17 fd       	sbrc	r17, 7
    6196:	2a c0       	rjmp	.+84     	; 0x61ec <vfprintf+0xf8>
    6198:	89 2f       	mov	r24, r25
    619a:	80 53       	subi	r24, 0x30	; 48
    619c:	8a 30       	cpi	r24, 0x0A	; 10
    619e:	78 f4       	brcc	.+30     	; 0x61be <vfprintf+0xca>
    61a0:	16 ff       	sbrs	r17, 6
    61a2:	06 c0       	rjmp	.+12     	; 0x61b0 <vfprintf+0xbc>
    61a4:	fa e0       	ldi	r31, 0x0A	; 10
    61a6:	9f 9e       	mul	r9, r31
    61a8:	90 2c       	mov	r9, r0
    61aa:	11 24       	eor	r1, r1
    61ac:	98 0e       	add	r9, r24
    61ae:	13 c0       	rjmp	.+38     	; 0x61d6 <vfprintf+0xe2>
    61b0:	3a e0       	ldi	r19, 0x0A	; 10
    61b2:	83 9e       	mul	r8, r19
    61b4:	80 2c       	mov	r8, r0
    61b6:	11 24       	eor	r1, r1
    61b8:	88 0e       	add	r8, r24
    61ba:	10 62       	ori	r17, 0x20	; 32
    61bc:	0c c0       	rjmp	.+24     	; 0x61d6 <vfprintf+0xe2>
    61be:	9e 32       	cpi	r25, 0x2E	; 46
    61c0:	21 f4       	brne	.+8      	; 0x61ca <vfprintf+0xd6>
    61c2:	16 fd       	sbrc	r17, 6
    61c4:	f8 c2       	rjmp	.+1520   	; 0x67b6 <vfprintf+0x6c2>
    61c6:	10 64       	ori	r17, 0x40	; 64
    61c8:	06 c0       	rjmp	.+12     	; 0x61d6 <vfprintf+0xe2>
    61ca:	9c 36       	cpi	r25, 0x6C	; 108
    61cc:	11 f4       	brne	.+4      	; 0x61d2 <vfprintf+0xde>
    61ce:	10 68       	ori	r17, 0x80	; 128
    61d0:	02 c0       	rjmp	.+4      	; 0x61d6 <vfprintf+0xe2>
    61d2:	98 36       	cpi	r25, 0x68	; 104
    61d4:	59 f4       	brne	.+22     	; 0x61ec <vfprintf+0xf8>
    61d6:	ee 85       	ldd	r30, Y+14	; 0x0e
    61d8:	ff 85       	ldd	r31, Y+15	; 0x0f
    61da:	23 fd       	sbrc	r18, 3
    61dc:	95 91       	lpm	r25, Z+
    61de:	23 ff       	sbrs	r18, 3
    61e0:	91 91       	ld	r25, Z+
    61e2:	ff 87       	std	Y+15, r31	; 0x0f
    61e4:	ee 87       	std	Y+14, r30	; 0x0e
    61e6:	99 23       	and	r25, r25
    61e8:	09 f0       	breq	.+2      	; 0x61ec <vfprintf+0xf8>
    61ea:	bc cf       	rjmp	.-136    	; 0x6164 <vfprintf+0x70>
    61ec:	89 2f       	mov	r24, r25
    61ee:	85 54       	subi	r24, 0x45	; 69
    61f0:	83 30       	cpi	r24, 0x03	; 3
    61f2:	20 f4       	brcc	.+8      	; 0x61fc <vfprintf+0x108>
    61f4:	81 2f       	mov	r24, r17
    61f6:	80 61       	ori	r24, 0x10	; 16
    61f8:	90 5e       	subi	r25, 0xE0	; 224
    61fa:	07 c0       	rjmp	.+14     	; 0x620a <vfprintf+0x116>
    61fc:	89 2f       	mov	r24, r25
    61fe:	85 56       	subi	r24, 0x65	; 101
    6200:	83 30       	cpi	r24, 0x03	; 3
    6202:	08 f0       	brcs	.+2      	; 0x6206 <vfprintf+0x112>
    6204:	8f c1       	rjmp	.+798    	; 0x6524 <vfprintf+0x430>
    6206:	81 2f       	mov	r24, r17
    6208:	8f 7e       	andi	r24, 0xEF	; 239
    620a:	86 fd       	sbrc	r24, 6
    620c:	02 c0       	rjmp	.+4      	; 0x6212 <vfprintf+0x11e>
    620e:	76 e0       	ldi	r23, 0x06	; 6
    6210:	97 2e       	mov	r9, r23
    6212:	6f e3       	ldi	r22, 0x3F	; 63
    6214:	f6 2e       	mov	r15, r22
    6216:	f8 22       	and	r15, r24
    6218:	95 36       	cpi	r25, 0x65	; 101
    621a:	19 f4       	brne	.+6      	; 0x6222 <vfprintf+0x12e>
    621c:	f0 e4       	ldi	r31, 0x40	; 64
    621e:	ff 2a       	or	r15, r31
    6220:	07 c0       	rjmp	.+14     	; 0x6230 <vfprintf+0x13c>
    6222:	96 36       	cpi	r25, 0x66	; 102
    6224:	19 f4       	brne	.+6      	; 0x622c <vfprintf+0x138>
    6226:	20 e8       	ldi	r18, 0x80	; 128
    6228:	f2 2a       	or	r15, r18
    622a:	02 c0       	rjmp	.+4      	; 0x6230 <vfprintf+0x13c>
    622c:	91 10       	cpse	r9, r1
    622e:	9a 94       	dec	r9
    6230:	f7 fe       	sbrs	r15, 7
    6232:	0a c0       	rjmp	.+20     	; 0x6248 <vfprintf+0x154>
    6234:	3b e3       	ldi	r19, 0x3B	; 59
    6236:	39 15       	cp	r19, r9
    6238:	18 f4       	brcc	.+6      	; 0x6240 <vfprintf+0x14c>
    623a:	5c e3       	ldi	r21, 0x3C	; 60
    623c:	b5 2e       	mov	r11, r21
    623e:	02 c0       	rjmp	.+4      	; 0x6244 <vfprintf+0x150>
    6240:	b9 2c       	mov	r11, r9
    6242:	b3 94       	inc	r11
    6244:	27 e0       	ldi	r18, 0x07	; 7
    6246:	09 c0       	rjmp	.+18     	; 0x625a <vfprintf+0x166>
    6248:	47 e0       	ldi	r20, 0x07	; 7
    624a:	49 15       	cp	r20, r9
    624c:	20 f4       	brcc	.+8      	; 0x6256 <vfprintf+0x162>
    624e:	bb 24       	eor	r11, r11
    6250:	47 e0       	ldi	r20, 0x07	; 7
    6252:	94 2e       	mov	r9, r20
    6254:	f7 cf       	rjmp	.-18     	; 0x6244 <vfprintf+0x150>
    6256:	29 2d       	mov	r18, r9
    6258:	bb 24       	eor	r11, r11
    625a:	c6 01       	movw	r24, r12
    625c:	04 96       	adiw	r24, 0x04	; 4
    625e:	9d 87       	std	Y+13, r25	; 0x0d
    6260:	8c 87       	std	Y+12, r24	; 0x0c
    6262:	f6 01       	movw	r30, r12
    6264:	60 81       	ld	r22, Z
    6266:	71 81       	ldd	r23, Z+1	; 0x01
    6268:	82 81       	ldd	r24, Z+2	; 0x02
    626a:	93 81       	ldd	r25, Z+3	; 0x03
    626c:	ae 01       	movw	r20, r28
    626e:	4f 5f       	subi	r20, 0xFF	; 255
    6270:	5f 4f       	sbci	r21, 0xFF	; 255
    6272:	0b 2d       	mov	r16, r11
    6274:	a4 d4       	rcall	.+2376   	; 0x6bbe <__ftoa_engine>
    6276:	6c 01       	movw	r12, r24
    6278:	09 81       	ldd	r16, Y+1	; 0x01
    627a:	20 2e       	mov	r2, r16
    627c:	33 24       	eor	r3, r3
    627e:	00 ff       	sbrs	r16, 0
    6280:	04 c0       	rjmp	.+8      	; 0x628a <vfprintf+0x196>
    6282:	03 fd       	sbrc	r16, 3
    6284:	02 c0       	rjmp	.+4      	; 0x628a <vfprintf+0x196>
    6286:	1d e2       	ldi	r17, 0x2D	; 45
    6288:	09 c0       	rjmp	.+18     	; 0x629c <vfprintf+0x1a8>
    628a:	f1 fe       	sbrs	r15, 1
    628c:	02 c0       	rjmp	.+4      	; 0x6292 <vfprintf+0x19e>
    628e:	1b e2       	ldi	r17, 0x2B	; 43
    6290:	05 c0       	rjmp	.+10     	; 0x629c <vfprintf+0x1a8>
    6292:	f2 fc       	sbrc	r15, 2
    6294:	02 c0       	rjmp	.+4      	; 0x629a <vfprintf+0x1a6>
    6296:	10 e0       	ldi	r17, 0x00	; 0
    6298:	01 c0       	rjmp	.+2      	; 0x629c <vfprintf+0x1a8>
    629a:	10 e2       	ldi	r17, 0x20	; 32
    629c:	c1 01       	movw	r24, r2
    629e:	8c 70       	andi	r24, 0x0C	; 12
    62a0:	90 70       	andi	r25, 0x00	; 0
    62a2:	89 2b       	or	r24, r25
    62a4:	a1 f1       	breq	.+104    	; 0x630e <vfprintf+0x21a>
    62a6:	11 23       	and	r17, r17
    62a8:	11 f4       	brne	.+4      	; 0x62ae <vfprintf+0x1ba>
    62aa:	83 e0       	ldi	r24, 0x03	; 3
    62ac:	01 c0       	rjmp	.+2      	; 0x62b0 <vfprintf+0x1bc>
    62ae:	84 e0       	ldi	r24, 0x04	; 4
    62b0:	88 15       	cp	r24, r8
    62b2:	10 f0       	brcs	.+4      	; 0x62b8 <vfprintf+0x1c4>
    62b4:	88 24       	eor	r8, r8
    62b6:	09 c0       	rjmp	.+18     	; 0x62ca <vfprintf+0x1d6>
    62b8:	88 1a       	sub	r8, r24
    62ba:	f3 fc       	sbrc	r15, 3
    62bc:	06 c0       	rjmp	.+12     	; 0x62ca <vfprintf+0x1d6>
    62be:	80 e2       	ldi	r24, 0x20	; 32
    62c0:	90 e0       	ldi	r25, 0x00	; 0
    62c2:	b3 01       	movw	r22, r6
    62c4:	6a d5       	rcall	.+2772   	; 0x6d9a <fputc>
    62c6:	8a 94       	dec	r8
    62c8:	d1 f7       	brne	.-12     	; 0x62be <vfprintf+0x1ca>
    62ca:	11 23       	and	r17, r17
    62cc:	21 f0       	breq	.+8      	; 0x62d6 <vfprintf+0x1e2>
    62ce:	81 2f       	mov	r24, r17
    62d0:	90 e0       	ldi	r25, 0x00	; 0
    62d2:	b3 01       	movw	r22, r6
    62d4:	62 d5       	rcall	.+2756   	; 0x6d9a <fputc>
    62d6:	23 fe       	sbrs	r2, 3
    62d8:	03 c0       	rjmp	.+6      	; 0x62e0 <vfprintf+0x1ec>
    62da:	0f e5       	ldi	r16, 0x5F	; 95
    62dc:	15 e0       	ldi	r17, 0x05	; 5
    62de:	0d c0       	rjmp	.+26     	; 0x62fa <vfprintf+0x206>
    62e0:	03 e6       	ldi	r16, 0x63	; 99
    62e2:	15 e0       	ldi	r17, 0x05	; 5
    62e4:	0a c0       	rjmp	.+20     	; 0x62fa <vfprintf+0x206>
    62e6:	e1 14       	cp	r14, r1
    62e8:	f1 04       	cpc	r15, r1
    62ea:	09 f0       	breq	.+2      	; 0x62ee <vfprintf+0x1fa>
    62ec:	80 52       	subi	r24, 0x20	; 32
    62ee:	90 e0       	ldi	r25, 0x00	; 0
    62f0:	b3 01       	movw	r22, r6
    62f2:	53 d5       	rcall	.+2726   	; 0x6d9a <fputc>
    62f4:	0f 5f       	subi	r16, 0xFF	; 255
    62f6:	1f 4f       	sbci	r17, 0xFF	; 255
    62f8:	05 c0       	rjmp	.+10     	; 0x6304 <vfprintf+0x210>
    62fa:	ef 2c       	mov	r14, r15
    62fc:	ff 24       	eor	r15, r15
    62fe:	f0 e1       	ldi	r31, 0x10	; 16
    6300:	ef 22       	and	r14, r31
    6302:	ff 24       	eor	r15, r15
    6304:	f8 01       	movw	r30, r16
    6306:	84 91       	lpm	r24, Z+
    6308:	88 23       	and	r24, r24
    630a:	69 f7       	brne	.-38     	; 0x62e6 <vfprintf+0x1f2>
    630c:	08 c1       	rjmp	.+528    	; 0x651e <vfprintf+0x42a>
    630e:	f7 fe       	sbrs	r15, 7
    6310:	12 c0       	rjmp	.+36     	; 0x6336 <vfprintf+0x242>
    6312:	bc 0c       	add	r11, r12
    6314:	24 fe       	sbrs	r2, 4
    6316:	04 c0       	rjmp	.+8      	; 0x6320 <vfprintf+0x22c>
    6318:	8a 81       	ldd	r24, Y+2	; 0x02
    631a:	81 33       	cpi	r24, 0x31	; 49
    631c:	09 f4       	brne	.+2      	; 0x6320 <vfprintf+0x22c>
    631e:	ba 94       	dec	r11
    6320:	1b 14       	cp	r1, r11
    6322:	1c f0       	brlt	.+6      	; 0x632a <vfprintf+0x236>
    6324:	bb 24       	eor	r11, r11
    6326:	b3 94       	inc	r11
    6328:	2d c0       	rjmp	.+90     	; 0x6384 <vfprintf+0x290>
    632a:	f8 e0       	ldi	r31, 0x08	; 8
    632c:	fb 15       	cp	r31, r11
    632e:	50 f5       	brcc	.+84     	; 0x6384 <vfprintf+0x290>
    6330:	38 e0       	ldi	r19, 0x08	; 8
    6332:	b3 2e       	mov	r11, r19
    6334:	27 c0       	rjmp	.+78     	; 0x6384 <vfprintf+0x290>
    6336:	f6 fc       	sbrc	r15, 6
    6338:	25 c0       	rjmp	.+74     	; 0x6384 <vfprintf+0x290>
    633a:	89 2d       	mov	r24, r9
    633c:	90 e0       	ldi	r25, 0x00	; 0
    633e:	8c 15       	cp	r24, r12
    6340:	9d 05       	cpc	r25, r13
    6342:	4c f0       	brlt	.+18     	; 0x6356 <vfprintf+0x262>
    6344:	2c ef       	ldi	r18, 0xFC	; 252
    6346:	c2 16       	cp	r12, r18
    6348:	2f ef       	ldi	r18, 0xFF	; 255
    634a:	d2 06       	cpc	r13, r18
    634c:	24 f0       	brlt	.+8      	; 0x6356 <vfprintf+0x262>
    634e:	30 e8       	ldi	r19, 0x80	; 128
    6350:	f3 2a       	or	r15, r19
    6352:	01 c0       	rjmp	.+2      	; 0x6356 <vfprintf+0x262>
    6354:	9a 94       	dec	r9
    6356:	99 20       	and	r9, r9
    6358:	49 f0       	breq	.+18     	; 0x636c <vfprintf+0x278>
    635a:	e2 e0       	ldi	r30, 0x02	; 2
    635c:	f0 e0       	ldi	r31, 0x00	; 0
    635e:	ec 0f       	add	r30, r28
    6360:	fd 1f       	adc	r31, r29
    6362:	e9 0d       	add	r30, r9
    6364:	f1 1d       	adc	r31, r1
    6366:	80 81       	ld	r24, Z
    6368:	80 33       	cpi	r24, 0x30	; 48
    636a:	a1 f3       	breq	.-24     	; 0x6354 <vfprintf+0x260>
    636c:	f7 fe       	sbrs	r15, 7
    636e:	0a c0       	rjmp	.+20     	; 0x6384 <vfprintf+0x290>
    6370:	b9 2c       	mov	r11, r9
    6372:	b3 94       	inc	r11
    6374:	89 2d       	mov	r24, r9
    6376:	90 e0       	ldi	r25, 0x00	; 0
    6378:	c8 16       	cp	r12, r24
    637a:	d9 06       	cpc	r13, r25
    637c:	14 f0       	brlt	.+4      	; 0x6382 <vfprintf+0x28e>
    637e:	99 24       	eor	r9, r9
    6380:	01 c0       	rjmp	.+2      	; 0x6384 <vfprintf+0x290>
    6382:	9c 18       	sub	r9, r12
    6384:	f7 fc       	sbrc	r15, 7
    6386:	03 c0       	rjmp	.+6      	; 0x638e <vfprintf+0x29a>
    6388:	25 e0       	ldi	r18, 0x05	; 5
    638a:	30 e0       	ldi	r19, 0x00	; 0
    638c:	09 c0       	rjmp	.+18     	; 0x63a0 <vfprintf+0x2ac>
    638e:	1c 14       	cp	r1, r12
    6390:	1d 04       	cpc	r1, r13
    6392:	1c f0       	brlt	.+6      	; 0x639a <vfprintf+0x2a6>
    6394:	21 e0       	ldi	r18, 0x01	; 1
    6396:	30 e0       	ldi	r19, 0x00	; 0
    6398:	03 c0       	rjmp	.+6      	; 0x63a0 <vfprintf+0x2ac>
    639a:	96 01       	movw	r18, r12
    639c:	2f 5f       	subi	r18, 0xFF	; 255
    639e:	3f 4f       	sbci	r19, 0xFF	; 255
    63a0:	11 23       	and	r17, r17
    63a2:	11 f0       	breq	.+4      	; 0x63a8 <vfprintf+0x2b4>
    63a4:	2f 5f       	subi	r18, 0xFF	; 255
    63a6:	3f 4f       	sbci	r19, 0xFF	; 255
    63a8:	99 20       	and	r9, r9
    63aa:	29 f0       	breq	.+10     	; 0x63b6 <vfprintf+0x2c2>
    63ac:	89 2d       	mov	r24, r9
    63ae:	90 e0       	ldi	r25, 0x00	; 0
    63b0:	01 96       	adiw	r24, 0x01	; 1
    63b2:	28 0f       	add	r18, r24
    63b4:	39 1f       	adc	r19, r25
    63b6:	88 2d       	mov	r24, r8
    63b8:	90 e0       	ldi	r25, 0x00	; 0
    63ba:	28 17       	cp	r18, r24
    63bc:	39 07       	cpc	r19, r25
    63be:	14 f0       	brlt	.+4      	; 0x63c4 <vfprintf+0x2d0>
    63c0:	88 24       	eor	r8, r8
    63c2:	01 c0       	rjmp	.+2      	; 0x63c6 <vfprintf+0x2d2>
    63c4:	82 1a       	sub	r8, r18
    63c6:	4f 2c       	mov	r4, r15
    63c8:	55 24       	eor	r5, r5
    63ca:	c2 01       	movw	r24, r4
    63cc:	89 70       	andi	r24, 0x09	; 9
    63ce:	90 70       	andi	r25, 0x00	; 0
    63d0:	89 2b       	or	r24, r25
    63d2:	31 f0       	breq	.+12     	; 0x63e0 <vfprintf+0x2ec>
    63d4:	07 c0       	rjmp	.+14     	; 0x63e4 <vfprintf+0x2f0>
    63d6:	80 e2       	ldi	r24, 0x20	; 32
    63d8:	90 e0       	ldi	r25, 0x00	; 0
    63da:	b3 01       	movw	r22, r6
    63dc:	de d4       	rcall	.+2492   	; 0x6d9a <fputc>
    63de:	8a 94       	dec	r8
    63e0:	88 20       	and	r8, r8
    63e2:	c9 f7       	brne	.-14     	; 0x63d6 <vfprintf+0x2e2>
    63e4:	11 23       	and	r17, r17
    63e6:	21 f0       	breq	.+8      	; 0x63f0 <vfprintf+0x2fc>
    63e8:	81 2f       	mov	r24, r17
    63ea:	90 e0       	ldi	r25, 0x00	; 0
    63ec:	b3 01       	movw	r22, r6
    63ee:	d5 d4       	rcall	.+2474   	; 0x6d9a <fputc>
    63f0:	43 fe       	sbrs	r4, 3
    63f2:	06 c0       	rjmp	.+12     	; 0x6400 <vfprintf+0x30c>
    63f4:	07 c0       	rjmp	.+14     	; 0x6404 <vfprintf+0x310>
    63f6:	80 e3       	ldi	r24, 0x30	; 48
    63f8:	90 e0       	ldi	r25, 0x00	; 0
    63fa:	b3 01       	movw	r22, r6
    63fc:	ce d4       	rcall	.+2460   	; 0x6d9a <fputc>
    63fe:	8a 94       	dec	r8
    6400:	88 20       	and	r8, r8
    6402:	c9 f7       	brne	.-14     	; 0x63f6 <vfprintf+0x302>
    6404:	f7 fe       	sbrs	r15, 7
    6406:	44 c0       	rjmp	.+136    	; 0x6490 <vfprintf+0x39c>
    6408:	86 01       	movw	r16, r12
    640a:	d7 fe       	sbrs	r13, 7
    640c:	02 c0       	rjmp	.+4      	; 0x6412 <vfprintf+0x31e>
    640e:	00 e0       	ldi	r16, 0x00	; 0
    6410:	10 e0       	ldi	r17, 0x00	; 0
    6412:	76 01       	movw	r14, r12
    6414:	08 94       	sec
    6416:	e1 1c       	adc	r14, r1
    6418:	f1 1c       	adc	r15, r1
    641a:	e0 1a       	sub	r14, r16
    641c:	f1 0a       	sbc	r15, r17
    641e:	41 e0       	ldi	r20, 0x01	; 1
    6420:	50 e0       	ldi	r21, 0x00	; 0
    6422:	4c 0f       	add	r20, r28
    6424:	5d 1f       	adc	r21, r29
    6426:	e4 0e       	add	r14, r20
    6428:	f5 1e       	adc	r15, r21
    642a:	26 01       	movw	r4, r12
    642c:	4b 18       	sub	r4, r11
    642e:	51 08       	sbc	r5, r1
    6430:	89 2d       	mov	r24, r9
    6432:	90 e0       	ldi	r25, 0x00	; 0
    6434:	aa 24       	eor	r10, r10
    6436:	bb 24       	eor	r11, r11
    6438:	a8 1a       	sub	r10, r24
    643a:	b9 0a       	sbc	r11, r25
    643c:	5f ef       	ldi	r21, 0xFF	; 255
    643e:	0f 3f       	cpi	r16, 0xFF	; 255
    6440:	15 07       	cpc	r17, r21
    6442:	21 f4       	brne	.+8      	; 0x644c <vfprintf+0x358>
    6444:	8e e2       	ldi	r24, 0x2E	; 46
    6446:	90 e0       	ldi	r25, 0x00	; 0
    6448:	b3 01       	movw	r22, r6
    644a:	a7 d4       	rcall	.+2382   	; 0x6d9a <fputc>
    644c:	c0 16       	cp	r12, r16
    644e:	d1 06       	cpc	r13, r17
    6450:	34 f0       	brlt	.+12     	; 0x645e <vfprintf+0x36a>
    6452:	40 16       	cp	r4, r16
    6454:	51 06       	cpc	r5, r17
    6456:	1c f4       	brge	.+6      	; 0x645e <vfprintf+0x36a>
    6458:	f7 01       	movw	r30, r14
    645a:	80 81       	ld	r24, Z
    645c:	01 c0       	rjmp	.+2      	; 0x6460 <vfprintf+0x36c>
    645e:	80 e3       	ldi	r24, 0x30	; 48
    6460:	01 50       	subi	r16, 0x01	; 1
    6462:	10 40       	sbci	r17, 0x00	; 0
    6464:	08 94       	sec
    6466:	e1 1c       	adc	r14, r1
    6468:	f1 1c       	adc	r15, r1
    646a:	0a 15       	cp	r16, r10
    646c:	1b 05       	cpc	r17, r11
    646e:	24 f0       	brlt	.+8      	; 0x6478 <vfprintf+0x384>
    6470:	90 e0       	ldi	r25, 0x00	; 0
    6472:	b3 01       	movw	r22, r6
    6474:	92 d4       	rcall	.+2340   	; 0x6d9a <fputc>
    6476:	e2 cf       	rjmp	.-60     	; 0x643c <vfprintf+0x348>
    6478:	0c 15       	cp	r16, r12
    647a:	1d 05       	cpc	r17, r13
    647c:	39 f4       	brne	.+14     	; 0x648c <vfprintf+0x398>
    647e:	9a 81       	ldd	r25, Y+2	; 0x02
    6480:	96 33       	cpi	r25, 0x36	; 54
    6482:	18 f4       	brcc	.+6      	; 0x648a <vfprintf+0x396>
    6484:	95 33       	cpi	r25, 0x35	; 53
    6486:	11 f4       	brne	.+4      	; 0x648c <vfprintf+0x398>
    6488:	24 fe       	sbrs	r2, 4
    648a:	81 e3       	ldi	r24, 0x31	; 49
    648c:	90 e0       	ldi	r25, 0x00	; 0
    648e:	45 c0       	rjmp	.+138    	; 0x651a <vfprintf+0x426>
    6490:	8a 81       	ldd	r24, Y+2	; 0x02
    6492:	81 33       	cpi	r24, 0x31	; 49
    6494:	09 f0       	breq	.+2      	; 0x6498 <vfprintf+0x3a4>
    6496:	0f 7e       	andi	r16, 0xEF	; 239
    6498:	90 e0       	ldi	r25, 0x00	; 0
    649a:	b3 01       	movw	r22, r6
    649c:	7e d4       	rcall	.+2300   	; 0x6d9a <fputc>
    649e:	99 20       	and	r9, r9
    64a0:	91 f0       	breq	.+36     	; 0x64c6 <vfprintf+0x3d2>
    64a2:	8e e2       	ldi	r24, 0x2E	; 46
    64a4:	90 e0       	ldi	r25, 0x00	; 0
    64a6:	b3 01       	movw	r22, r6
    64a8:	78 d4       	rcall	.+2288   	; 0x6d9a <fputc>
    64aa:	12 e0       	ldi	r17, 0x02	; 2
    64ac:	e1 e0       	ldi	r30, 0x01	; 1
    64ae:	f0 e0       	ldi	r31, 0x00	; 0
    64b0:	ec 0f       	add	r30, r28
    64b2:	fd 1f       	adc	r31, r29
    64b4:	e1 0f       	add	r30, r17
    64b6:	f1 1d       	adc	r31, r1
    64b8:	1f 5f       	subi	r17, 0xFF	; 255
    64ba:	80 81       	ld	r24, Z
    64bc:	90 e0       	ldi	r25, 0x00	; 0
    64be:	b3 01       	movw	r22, r6
    64c0:	6c d4       	rcall	.+2264   	; 0x6d9a <fputc>
    64c2:	9a 94       	dec	r9
    64c4:	99 f7       	brne	.-26     	; 0x64ac <vfprintf+0x3b8>
    64c6:	44 fc       	sbrc	r4, 4
    64c8:	03 c0       	rjmp	.+6      	; 0x64d0 <vfprintf+0x3dc>
    64ca:	85 e6       	ldi	r24, 0x65	; 101
    64cc:	90 e0       	ldi	r25, 0x00	; 0
    64ce:	02 c0       	rjmp	.+4      	; 0x64d4 <vfprintf+0x3e0>
    64d0:	85 e4       	ldi	r24, 0x45	; 69
    64d2:	90 e0       	ldi	r25, 0x00	; 0
    64d4:	b3 01       	movw	r22, r6
    64d6:	61 d4       	rcall	.+2242   	; 0x6d9a <fputc>
    64d8:	d7 fc       	sbrc	r13, 7
    64da:	05 c0       	rjmp	.+10     	; 0x64e6 <vfprintf+0x3f2>
    64dc:	c1 14       	cp	r12, r1
    64de:	d1 04       	cpc	r13, r1
    64e0:	41 f4       	brne	.+16     	; 0x64f2 <vfprintf+0x3fe>
    64e2:	04 ff       	sbrs	r16, 4
    64e4:	06 c0       	rjmp	.+12     	; 0x64f2 <vfprintf+0x3fe>
    64e6:	d0 94       	com	r13
    64e8:	c1 94       	neg	r12
    64ea:	d1 08       	sbc	r13, r1
    64ec:	d3 94       	inc	r13
    64ee:	8d e2       	ldi	r24, 0x2D	; 45
    64f0:	01 c0       	rjmp	.+2      	; 0x64f4 <vfprintf+0x400>
    64f2:	8b e2       	ldi	r24, 0x2B	; 43
    64f4:	90 e0       	ldi	r25, 0x00	; 0
    64f6:	b3 01       	movw	r22, r6
    64f8:	50 d4       	rcall	.+2208   	; 0x6d9a <fputc>
    64fa:	80 e3       	ldi	r24, 0x30	; 48
    64fc:	05 c0       	rjmp	.+10     	; 0x6508 <vfprintf+0x414>
    64fe:	8f 5f       	subi	r24, 0xFF	; 255
    6500:	26 ef       	ldi	r18, 0xF6	; 246
    6502:	3f ef       	ldi	r19, 0xFF	; 255
    6504:	c2 0e       	add	r12, r18
    6506:	d3 1e       	adc	r13, r19
    6508:	3a e0       	ldi	r19, 0x0A	; 10
    650a:	c3 16       	cp	r12, r19
    650c:	d1 04       	cpc	r13, r1
    650e:	bc f7       	brge	.-18     	; 0x64fe <vfprintf+0x40a>
    6510:	90 e0       	ldi	r25, 0x00	; 0
    6512:	b3 01       	movw	r22, r6
    6514:	42 d4       	rcall	.+2180   	; 0x6d9a <fputc>
    6516:	c6 01       	movw	r24, r12
    6518:	c0 96       	adiw	r24, 0x30	; 48
    651a:	b3 01       	movw	r22, r6
    651c:	3e d4       	rcall	.+2172   	; 0x6d9a <fputc>
    651e:	cc 84       	ldd	r12, Y+12	; 0x0c
    6520:	dd 84       	ldd	r13, Y+13	; 0x0d
    6522:	46 c1       	rjmp	.+652    	; 0x67b0 <vfprintf+0x6bc>
    6524:	93 36       	cpi	r25, 0x63	; 99
    6526:	31 f0       	breq	.+12     	; 0x6534 <vfprintf+0x440>
    6528:	93 37       	cpi	r25, 0x73	; 115
    652a:	99 f0       	breq	.+38     	; 0x6552 <vfprintf+0x45e>
    652c:	93 35       	cpi	r25, 0x53	; 83
    652e:	09 f0       	breq	.+2      	; 0x6532 <vfprintf+0x43e>
    6530:	55 c0       	rjmp	.+170    	; 0x65dc <vfprintf+0x4e8>
    6532:	22 c0       	rjmp	.+68     	; 0x6578 <vfprintf+0x484>
    6534:	f6 01       	movw	r30, r12
    6536:	80 81       	ld	r24, Z
    6538:	89 83       	std	Y+1, r24	; 0x01
    653a:	5e 01       	movw	r10, r28
    653c:	08 94       	sec
    653e:	a1 1c       	adc	r10, r1
    6540:	b1 1c       	adc	r11, r1
    6542:	22 e0       	ldi	r18, 0x02	; 2
    6544:	30 e0       	ldi	r19, 0x00	; 0
    6546:	c2 0e       	add	r12, r18
    6548:	d3 1e       	adc	r13, r19
    654a:	21 e0       	ldi	r18, 0x01	; 1
    654c:	e2 2e       	mov	r14, r18
    654e:	f1 2c       	mov	r15, r1
    6550:	11 c0       	rjmp	.+34     	; 0x6574 <vfprintf+0x480>
    6552:	f6 01       	movw	r30, r12
    6554:	a0 80       	ld	r10, Z
    6556:	b1 80       	ldd	r11, Z+1	; 0x01
    6558:	16 fd       	sbrc	r17, 6
    655a:	03 c0       	rjmp	.+6      	; 0x6562 <vfprintf+0x46e>
    655c:	6f ef       	ldi	r22, 0xFF	; 255
    655e:	7f ef       	ldi	r23, 0xFF	; 255
    6560:	02 c0       	rjmp	.+4      	; 0x6566 <vfprintf+0x472>
    6562:	69 2d       	mov	r22, r9
    6564:	70 e0       	ldi	r23, 0x00	; 0
    6566:	22 e0       	ldi	r18, 0x02	; 2
    6568:	30 e0       	ldi	r19, 0x00	; 0
    656a:	c2 0e       	add	r12, r18
    656c:	d3 1e       	adc	r13, r19
    656e:	c5 01       	movw	r24, r10
    6570:	09 d4       	rcall	.+2066   	; 0x6d84 <strnlen>
    6572:	7c 01       	movw	r14, r24
    6574:	1f 77       	andi	r17, 0x7F	; 127
    6576:	12 c0       	rjmp	.+36     	; 0x659c <vfprintf+0x4a8>
    6578:	f6 01       	movw	r30, r12
    657a:	a0 80       	ld	r10, Z
    657c:	b1 80       	ldd	r11, Z+1	; 0x01
    657e:	16 fd       	sbrc	r17, 6
    6580:	03 c0       	rjmp	.+6      	; 0x6588 <vfprintf+0x494>
    6582:	6f ef       	ldi	r22, 0xFF	; 255
    6584:	7f ef       	ldi	r23, 0xFF	; 255
    6586:	02 c0       	rjmp	.+4      	; 0x658c <vfprintf+0x498>
    6588:	69 2d       	mov	r22, r9
    658a:	70 e0       	ldi	r23, 0x00	; 0
    658c:	22 e0       	ldi	r18, 0x02	; 2
    658e:	30 e0       	ldi	r19, 0x00	; 0
    6590:	c2 0e       	add	r12, r18
    6592:	d3 1e       	adc	r13, r19
    6594:	c5 01       	movw	r24, r10
    6596:	eb d3       	rcall	.+2006   	; 0x6d6e <strnlen_P>
    6598:	7c 01       	movw	r14, r24
    659a:	10 68       	ori	r17, 0x80	; 128
    659c:	13 ff       	sbrs	r17, 3
    659e:	06 c0       	rjmp	.+12     	; 0x65ac <vfprintf+0x4b8>
    65a0:	19 c0       	rjmp	.+50     	; 0x65d4 <vfprintf+0x4e0>
    65a2:	80 e2       	ldi	r24, 0x20	; 32
    65a4:	90 e0       	ldi	r25, 0x00	; 0
    65a6:	b3 01       	movw	r22, r6
    65a8:	f8 d3       	rcall	.+2032   	; 0x6d9a <fputc>
    65aa:	8a 94       	dec	r8
    65ac:	88 2d       	mov	r24, r8
    65ae:	90 e0       	ldi	r25, 0x00	; 0
    65b0:	e8 16       	cp	r14, r24
    65b2:	f9 06       	cpc	r15, r25
    65b4:	b0 f3       	brcs	.-20     	; 0x65a2 <vfprintf+0x4ae>
    65b6:	0e c0       	rjmp	.+28     	; 0x65d4 <vfprintf+0x4e0>
    65b8:	f5 01       	movw	r30, r10
    65ba:	17 fd       	sbrc	r17, 7
    65bc:	85 91       	lpm	r24, Z+
    65be:	17 ff       	sbrs	r17, 7
    65c0:	81 91       	ld	r24, Z+
    65c2:	5f 01       	movw	r10, r30
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	b3 01       	movw	r22, r6
    65c8:	e8 d3       	rcall	.+2000   	; 0x6d9a <fputc>
    65ca:	81 10       	cpse	r8, r1
    65cc:	8a 94       	dec	r8
    65ce:	08 94       	sec
    65d0:	e1 08       	sbc	r14, r1
    65d2:	f1 08       	sbc	r15, r1
    65d4:	e1 14       	cp	r14, r1
    65d6:	f1 04       	cpc	r15, r1
    65d8:	79 f7       	brne	.-34     	; 0x65b8 <vfprintf+0x4c4>
    65da:	ea c0       	rjmp	.+468    	; 0x67b0 <vfprintf+0x6bc>
    65dc:	94 36       	cpi	r25, 0x64	; 100
    65de:	11 f0       	breq	.+4      	; 0x65e4 <vfprintf+0x4f0>
    65e0:	99 36       	cpi	r25, 0x69	; 105
    65e2:	81 f5       	brne	.+96     	; 0x6644 <vfprintf+0x550>
    65e4:	17 ff       	sbrs	r17, 7
    65e6:	08 c0       	rjmp	.+16     	; 0x65f8 <vfprintf+0x504>
    65e8:	f6 01       	movw	r30, r12
    65ea:	20 81       	ld	r18, Z
    65ec:	31 81       	ldd	r19, Z+1	; 0x01
    65ee:	42 81       	ldd	r20, Z+2	; 0x02
    65f0:	53 81       	ldd	r21, Z+3	; 0x03
    65f2:	84 e0       	ldi	r24, 0x04	; 4
    65f4:	90 e0       	ldi	r25, 0x00	; 0
    65f6:	0a c0       	rjmp	.+20     	; 0x660c <vfprintf+0x518>
    65f8:	f6 01       	movw	r30, r12
    65fa:	80 81       	ld	r24, Z
    65fc:	91 81       	ldd	r25, Z+1	; 0x01
    65fe:	9c 01       	movw	r18, r24
    6600:	44 27       	eor	r20, r20
    6602:	37 fd       	sbrc	r19, 7
    6604:	40 95       	com	r20
    6606:	54 2f       	mov	r21, r20
    6608:	82 e0       	ldi	r24, 0x02	; 2
    660a:	90 e0       	ldi	r25, 0x00	; 0
    660c:	c8 0e       	add	r12, r24
    660e:	d9 1e       	adc	r13, r25
    6610:	9f e6       	ldi	r25, 0x6F	; 111
    6612:	f9 2e       	mov	r15, r25
    6614:	f1 22       	and	r15, r17
    6616:	57 ff       	sbrs	r21, 7
    6618:	09 c0       	rjmp	.+18     	; 0x662c <vfprintf+0x538>
    661a:	50 95       	com	r21
    661c:	40 95       	com	r20
    661e:	30 95       	com	r19
    6620:	21 95       	neg	r18
    6622:	3f 4f       	sbci	r19, 0xFF	; 255
    6624:	4f 4f       	sbci	r20, 0xFF	; 255
    6626:	5f 4f       	sbci	r21, 0xFF	; 255
    6628:	90 e8       	ldi	r25, 0x80	; 128
    662a:	f9 2a       	or	r15, r25
    662c:	ca 01       	movw	r24, r20
    662e:	b9 01       	movw	r22, r18
    6630:	ae 01       	movw	r20, r28
    6632:	4f 5f       	subi	r20, 0xFF	; 255
    6634:	5f 4f       	sbci	r21, 0xFF	; 255
    6636:	2a e0       	ldi	r18, 0x0A	; 10
    6638:	30 e0       	ldi	r19, 0x00	; 0
    663a:	22 d4       	rcall	.+2116   	; 0x6e80 <__ultoa_invert>
    663c:	e8 2e       	mov	r14, r24
    663e:	e8 89       	ldd	r30, Y+16	; 0x10
    6640:	ee 1a       	sub	r14, r30
    6642:	40 c0       	rjmp	.+128    	; 0x66c4 <vfprintf+0x5d0>
    6644:	95 37       	cpi	r25, 0x75	; 117
    6646:	21 f4       	brne	.+8      	; 0x6650 <vfprintf+0x55c>
    6648:	1f 7e       	andi	r17, 0xEF	; 239
    664a:	2a e0       	ldi	r18, 0x0A	; 10
    664c:	30 e0       	ldi	r19, 0x00	; 0
    664e:	1c c0       	rjmp	.+56     	; 0x6688 <vfprintf+0x594>
    6650:	19 7f       	andi	r17, 0xF9	; 249
    6652:	9f 36       	cpi	r25, 0x6F	; 111
    6654:	61 f0       	breq	.+24     	; 0x666e <vfprintf+0x57a>
    6656:	90 37       	cpi	r25, 0x70	; 112
    6658:	20 f4       	brcc	.+8      	; 0x6662 <vfprintf+0x56e>
    665a:	98 35       	cpi	r25, 0x58	; 88
    665c:	09 f0       	breq	.+2      	; 0x6660 <vfprintf+0x56c>
    665e:	ab c0       	rjmp	.+342    	; 0x67b6 <vfprintf+0x6c2>
    6660:	0f c0       	rjmp	.+30     	; 0x6680 <vfprintf+0x58c>
    6662:	90 37       	cpi	r25, 0x70	; 112
    6664:	39 f0       	breq	.+14     	; 0x6674 <vfprintf+0x580>
    6666:	98 37       	cpi	r25, 0x78	; 120
    6668:	09 f0       	breq	.+2      	; 0x666c <vfprintf+0x578>
    666a:	a5 c0       	rjmp	.+330    	; 0x67b6 <vfprintf+0x6c2>
    666c:	04 c0       	rjmp	.+8      	; 0x6676 <vfprintf+0x582>
    666e:	28 e0       	ldi	r18, 0x08	; 8
    6670:	30 e0       	ldi	r19, 0x00	; 0
    6672:	0a c0       	rjmp	.+20     	; 0x6688 <vfprintf+0x594>
    6674:	10 61       	ori	r17, 0x10	; 16
    6676:	14 fd       	sbrc	r17, 4
    6678:	14 60       	ori	r17, 0x04	; 4
    667a:	20 e1       	ldi	r18, 0x10	; 16
    667c:	30 e0       	ldi	r19, 0x00	; 0
    667e:	04 c0       	rjmp	.+8      	; 0x6688 <vfprintf+0x594>
    6680:	14 fd       	sbrc	r17, 4
    6682:	16 60       	ori	r17, 0x06	; 6
    6684:	20 e1       	ldi	r18, 0x10	; 16
    6686:	32 e0       	ldi	r19, 0x02	; 2
    6688:	17 ff       	sbrs	r17, 7
    668a:	08 c0       	rjmp	.+16     	; 0x669c <vfprintf+0x5a8>
    668c:	f6 01       	movw	r30, r12
    668e:	60 81       	ld	r22, Z
    6690:	71 81       	ldd	r23, Z+1	; 0x01
    6692:	82 81       	ldd	r24, Z+2	; 0x02
    6694:	93 81       	ldd	r25, Z+3	; 0x03
    6696:	44 e0       	ldi	r20, 0x04	; 4
    6698:	50 e0       	ldi	r21, 0x00	; 0
    669a:	08 c0       	rjmp	.+16     	; 0x66ac <vfprintf+0x5b8>
    669c:	f6 01       	movw	r30, r12
    669e:	80 81       	ld	r24, Z
    66a0:	91 81       	ldd	r25, Z+1	; 0x01
    66a2:	bc 01       	movw	r22, r24
    66a4:	80 e0       	ldi	r24, 0x00	; 0
    66a6:	90 e0       	ldi	r25, 0x00	; 0
    66a8:	42 e0       	ldi	r20, 0x02	; 2
    66aa:	50 e0       	ldi	r21, 0x00	; 0
    66ac:	c4 0e       	add	r12, r20
    66ae:	d5 1e       	adc	r13, r21
    66b0:	ae 01       	movw	r20, r28
    66b2:	4f 5f       	subi	r20, 0xFF	; 255
    66b4:	5f 4f       	sbci	r21, 0xFF	; 255
    66b6:	e4 d3       	rcall	.+1992   	; 0x6e80 <__ultoa_invert>
    66b8:	e8 2e       	mov	r14, r24
    66ba:	58 89       	ldd	r21, Y+16	; 0x10
    66bc:	e5 1a       	sub	r14, r21
    66be:	8f e7       	ldi	r24, 0x7F	; 127
    66c0:	f8 2e       	mov	r15, r24
    66c2:	f1 22       	and	r15, r17
    66c4:	f6 fe       	sbrs	r15, 6
    66c6:	0b c0       	rjmp	.+22     	; 0x66de <vfprintf+0x5ea>
    66c8:	8e ef       	ldi	r24, 0xFE	; 254
    66ca:	f8 22       	and	r15, r24
    66cc:	e9 14       	cp	r14, r9
    66ce:	38 f4       	brcc	.+14     	; 0x66de <vfprintf+0x5ea>
    66d0:	f4 fe       	sbrs	r15, 4
    66d2:	07 c0       	rjmp	.+14     	; 0x66e2 <vfprintf+0x5ee>
    66d4:	f2 fc       	sbrc	r15, 2
    66d6:	05 c0       	rjmp	.+10     	; 0x66e2 <vfprintf+0x5ee>
    66d8:	9f ee       	ldi	r25, 0xEF	; 239
    66da:	f9 22       	and	r15, r25
    66dc:	02 c0       	rjmp	.+4      	; 0x66e2 <vfprintf+0x5ee>
    66de:	1e 2d       	mov	r17, r14
    66e0:	01 c0       	rjmp	.+2      	; 0x66e4 <vfprintf+0x5f0>
    66e2:	19 2d       	mov	r17, r9
    66e4:	f4 fe       	sbrs	r15, 4
    66e6:	0d c0       	rjmp	.+26     	; 0x6702 <vfprintf+0x60e>
    66e8:	fe 01       	movw	r30, r28
    66ea:	ee 0d       	add	r30, r14
    66ec:	f1 1d       	adc	r31, r1
    66ee:	80 81       	ld	r24, Z
    66f0:	80 33       	cpi	r24, 0x30	; 48
    66f2:	19 f4       	brne	.+6      	; 0x66fa <vfprintf+0x606>
    66f4:	e9 ee       	ldi	r30, 0xE9	; 233
    66f6:	fe 22       	and	r15, r30
    66f8:	08 c0       	rjmp	.+16     	; 0x670a <vfprintf+0x616>
    66fa:	1f 5f       	subi	r17, 0xFF	; 255
    66fc:	f2 fe       	sbrs	r15, 2
    66fe:	05 c0       	rjmp	.+10     	; 0x670a <vfprintf+0x616>
    6700:	03 c0       	rjmp	.+6      	; 0x6708 <vfprintf+0x614>
    6702:	8f 2d       	mov	r24, r15
    6704:	86 78       	andi	r24, 0x86	; 134
    6706:	09 f0       	breq	.+2      	; 0x670a <vfprintf+0x616>
    6708:	1f 5f       	subi	r17, 0xFF	; 255
    670a:	0f 2d       	mov	r16, r15
    670c:	f3 fc       	sbrc	r15, 3
    670e:	13 c0       	rjmp	.+38     	; 0x6736 <vfprintf+0x642>
    6710:	f0 fe       	sbrs	r15, 0
    6712:	0e c0       	rjmp	.+28     	; 0x6730 <vfprintf+0x63c>
    6714:	18 15       	cp	r17, r8
    6716:	10 f0       	brcs	.+4      	; 0x671c <vfprintf+0x628>
    6718:	9e 2c       	mov	r9, r14
    671a:	0a c0       	rjmp	.+20     	; 0x6730 <vfprintf+0x63c>
    671c:	9e 2c       	mov	r9, r14
    671e:	98 0c       	add	r9, r8
    6720:	91 1a       	sub	r9, r17
    6722:	18 2d       	mov	r17, r8
    6724:	05 c0       	rjmp	.+10     	; 0x6730 <vfprintf+0x63c>
    6726:	80 e2       	ldi	r24, 0x20	; 32
    6728:	90 e0       	ldi	r25, 0x00	; 0
    672a:	b3 01       	movw	r22, r6
    672c:	36 d3       	rcall	.+1644   	; 0x6d9a <fputc>
    672e:	1f 5f       	subi	r17, 0xFF	; 255
    6730:	18 15       	cp	r17, r8
    6732:	c8 f3       	brcs	.-14     	; 0x6726 <vfprintf+0x632>
    6734:	04 c0       	rjmp	.+8      	; 0x673e <vfprintf+0x64a>
    6736:	18 15       	cp	r17, r8
    6738:	10 f4       	brcc	.+4      	; 0x673e <vfprintf+0x64a>
    673a:	81 1a       	sub	r8, r17
    673c:	01 c0       	rjmp	.+2      	; 0x6740 <vfprintf+0x64c>
    673e:	88 24       	eor	r8, r8
    6740:	04 ff       	sbrs	r16, 4
    6742:	0e c0       	rjmp	.+28     	; 0x6760 <vfprintf+0x66c>
    6744:	80 e3       	ldi	r24, 0x30	; 48
    6746:	90 e0       	ldi	r25, 0x00	; 0
    6748:	b3 01       	movw	r22, r6
    674a:	27 d3       	rcall	.+1614   	; 0x6d9a <fputc>
    674c:	02 ff       	sbrs	r16, 2
    674e:	1b c0       	rjmp	.+54     	; 0x6786 <vfprintf+0x692>
    6750:	01 fd       	sbrc	r16, 1
    6752:	03 c0       	rjmp	.+6      	; 0x675a <vfprintf+0x666>
    6754:	88 e7       	ldi	r24, 0x78	; 120
    6756:	90 e0       	ldi	r25, 0x00	; 0
    6758:	0e c0       	rjmp	.+28     	; 0x6776 <vfprintf+0x682>
    675a:	88 e5       	ldi	r24, 0x58	; 88
    675c:	90 e0       	ldi	r25, 0x00	; 0
    675e:	0b c0       	rjmp	.+22     	; 0x6776 <vfprintf+0x682>
    6760:	80 2f       	mov	r24, r16
    6762:	86 78       	andi	r24, 0x86	; 134
    6764:	81 f0       	breq	.+32     	; 0x6786 <vfprintf+0x692>
    6766:	01 ff       	sbrs	r16, 1
    6768:	02 c0       	rjmp	.+4      	; 0x676e <vfprintf+0x67a>
    676a:	8b e2       	ldi	r24, 0x2B	; 43
    676c:	01 c0       	rjmp	.+2      	; 0x6770 <vfprintf+0x67c>
    676e:	80 e2       	ldi	r24, 0x20	; 32
    6770:	f7 fc       	sbrc	r15, 7
    6772:	8d e2       	ldi	r24, 0x2D	; 45
    6774:	90 e0       	ldi	r25, 0x00	; 0
    6776:	b3 01       	movw	r22, r6
    6778:	10 d3       	rcall	.+1568   	; 0x6d9a <fputc>
    677a:	05 c0       	rjmp	.+10     	; 0x6786 <vfprintf+0x692>
    677c:	80 e3       	ldi	r24, 0x30	; 48
    677e:	90 e0       	ldi	r25, 0x00	; 0
    6780:	b3 01       	movw	r22, r6
    6782:	0b d3       	rcall	.+1558   	; 0x6d9a <fputc>
    6784:	9a 94       	dec	r9
    6786:	e9 14       	cp	r14, r9
    6788:	c8 f3       	brcs	.-14     	; 0x677c <vfprintf+0x688>
    678a:	ea 94       	dec	r14
    678c:	e1 e0       	ldi	r30, 0x01	; 1
    678e:	f0 e0       	ldi	r31, 0x00	; 0
    6790:	ec 0f       	add	r30, r28
    6792:	fd 1f       	adc	r31, r29
    6794:	ee 0d       	add	r30, r14
    6796:	f1 1d       	adc	r31, r1
    6798:	80 81       	ld	r24, Z
    679a:	90 e0       	ldi	r25, 0x00	; 0
    679c:	b3 01       	movw	r22, r6
    679e:	fd d2       	rcall	.+1530   	; 0x6d9a <fputc>
    67a0:	ee 20       	and	r14, r14
    67a2:	99 f7       	brne	.-26     	; 0x678a <vfprintf+0x696>
    67a4:	05 c0       	rjmp	.+10     	; 0x67b0 <vfprintf+0x6bc>
    67a6:	80 e2       	ldi	r24, 0x20	; 32
    67a8:	90 e0       	ldi	r25, 0x00	; 0
    67aa:	b3 01       	movw	r22, r6
    67ac:	f6 d2       	rcall	.+1516   	; 0x6d9a <fputc>
    67ae:	8a 94       	dec	r8
    67b0:	88 20       	and	r8, r8
    67b2:	c9 f7       	brne	.-14     	; 0x67a6 <vfprintf+0x6b2>
    67b4:	b6 cc       	rjmp	.-1684   	; 0x6122 <vfprintf+0x2e>
    67b6:	f3 01       	movw	r30, r6
    67b8:	66 81       	ldd	r22, Z+6	; 0x06
    67ba:	77 81       	ldd	r23, Z+7	; 0x07
    67bc:	cb 01       	movw	r24, r22
    67be:	61 96       	adiw	r28, 0x11	; 17
    67c0:	e2 e1       	ldi	r30, 0x12	; 18
    67c2:	70 c0       	rjmp	.+224    	; 0x68a4 <__epilogue_restores__>

000067c4 <__mulsi3>:
    67c4:	62 9f       	mul	r22, r18
    67c6:	d0 01       	movw	r26, r0
    67c8:	73 9f       	mul	r23, r19
    67ca:	f0 01       	movw	r30, r0
    67cc:	82 9f       	mul	r24, r18
    67ce:	e0 0d       	add	r30, r0
    67d0:	f1 1d       	adc	r31, r1
    67d2:	64 9f       	mul	r22, r20
    67d4:	e0 0d       	add	r30, r0
    67d6:	f1 1d       	adc	r31, r1
    67d8:	92 9f       	mul	r25, r18
    67da:	f0 0d       	add	r31, r0
    67dc:	83 9f       	mul	r24, r19
    67de:	f0 0d       	add	r31, r0
    67e0:	74 9f       	mul	r23, r20
    67e2:	f0 0d       	add	r31, r0
    67e4:	65 9f       	mul	r22, r21
    67e6:	f0 0d       	add	r31, r0
    67e8:	99 27       	eor	r25, r25
    67ea:	72 9f       	mul	r23, r18
    67ec:	b0 0d       	add	r27, r0
    67ee:	e1 1d       	adc	r30, r1
    67f0:	f9 1f       	adc	r31, r25
    67f2:	63 9f       	mul	r22, r19
    67f4:	b0 0d       	add	r27, r0
    67f6:	e1 1d       	adc	r30, r1
    67f8:	f9 1f       	adc	r31, r25
    67fa:	bd 01       	movw	r22, r26
    67fc:	cf 01       	movw	r24, r30
    67fe:	11 24       	eor	r1, r1
    6800:	08 95       	ret

00006802 <__divmodhi4>:
    6802:	97 fb       	bst	r25, 7
    6804:	09 2e       	mov	r0, r25
    6806:	07 26       	eor	r0, r23
    6808:	0a d0       	rcall	.+20     	; 0x681e <__divmodhi4_neg1>
    680a:	77 fd       	sbrc	r23, 7
    680c:	04 d0       	rcall	.+8      	; 0x6816 <__divmodhi4_neg2>
    680e:	65 d0       	rcall	.+202    	; 0x68da <__udivmodhi4>
    6810:	06 d0       	rcall	.+12     	; 0x681e <__divmodhi4_neg1>
    6812:	00 20       	and	r0, r0
    6814:	1a f4       	brpl	.+6      	; 0x681c <__divmodhi4_exit>

00006816 <__divmodhi4_neg2>:
    6816:	70 95       	com	r23
    6818:	61 95       	neg	r22
    681a:	7f 4f       	sbci	r23, 0xFF	; 255

0000681c <__divmodhi4_exit>:
    681c:	08 95       	ret

0000681e <__divmodhi4_neg1>:
    681e:	f6 f7       	brtc	.-4      	; 0x681c <__divmodhi4_exit>
    6820:	90 95       	com	r25
    6822:	81 95       	neg	r24
    6824:	9f 4f       	sbci	r25, 0xFF	; 255
    6826:	08 95       	ret

00006828 <__udivmodsi4>:
    6828:	a1 e2       	ldi	r26, 0x21	; 33
    682a:	1a 2e       	mov	r1, r26
    682c:	aa 1b       	sub	r26, r26
    682e:	bb 1b       	sub	r27, r27
    6830:	fd 01       	movw	r30, r26
    6832:	0d c0       	rjmp	.+26     	; 0x684e <__udivmodsi4_ep>

00006834 <__udivmodsi4_loop>:
    6834:	aa 1f       	adc	r26, r26
    6836:	bb 1f       	adc	r27, r27
    6838:	ee 1f       	adc	r30, r30
    683a:	ff 1f       	adc	r31, r31
    683c:	a2 17       	cp	r26, r18
    683e:	b3 07       	cpc	r27, r19
    6840:	e4 07       	cpc	r30, r20
    6842:	f5 07       	cpc	r31, r21
    6844:	20 f0       	brcs	.+8      	; 0x684e <__udivmodsi4_ep>
    6846:	a2 1b       	sub	r26, r18
    6848:	b3 0b       	sbc	r27, r19
    684a:	e4 0b       	sbc	r30, r20
    684c:	f5 0b       	sbc	r31, r21

0000684e <__udivmodsi4_ep>:
    684e:	66 1f       	adc	r22, r22
    6850:	77 1f       	adc	r23, r23
    6852:	88 1f       	adc	r24, r24
    6854:	99 1f       	adc	r25, r25
    6856:	1a 94       	dec	r1
    6858:	69 f7       	brne	.-38     	; 0x6834 <__udivmodsi4_loop>
    685a:	60 95       	com	r22
    685c:	70 95       	com	r23
    685e:	80 95       	com	r24
    6860:	90 95       	com	r25
    6862:	9b 01       	movw	r18, r22
    6864:	ac 01       	movw	r20, r24
    6866:	bd 01       	movw	r22, r26
    6868:	cf 01       	movw	r24, r30
    686a:	08 95       	ret

0000686c <__prologue_saves__>:
    686c:	2f 92       	push	r2
    686e:	3f 92       	push	r3
    6870:	4f 92       	push	r4
    6872:	5f 92       	push	r5
    6874:	6f 92       	push	r6
    6876:	7f 92       	push	r7
    6878:	8f 92       	push	r8
    687a:	9f 92       	push	r9
    687c:	af 92       	push	r10
    687e:	bf 92       	push	r11
    6880:	cf 92       	push	r12
    6882:	df 92       	push	r13
    6884:	ef 92       	push	r14
    6886:	ff 92       	push	r15
    6888:	0f 93       	push	r16
    688a:	1f 93       	push	r17
    688c:	cf 93       	push	r28
    688e:	df 93       	push	r29
    6890:	cd b7       	in	r28, 0x3d	; 61
    6892:	de b7       	in	r29, 0x3e	; 62
    6894:	ca 1b       	sub	r28, r26
    6896:	db 0b       	sbc	r29, r27
    6898:	0f b6       	in	r0, 0x3f	; 63
    689a:	f8 94       	cli
    689c:	de bf       	out	0x3e, r29	; 62
    689e:	0f be       	out	0x3f, r0	; 63
    68a0:	cd bf       	out	0x3d, r28	; 61
    68a2:	09 94       	ijmp

000068a4 <__epilogue_restores__>:
    68a4:	2a 88       	ldd	r2, Y+18	; 0x12
    68a6:	39 88       	ldd	r3, Y+17	; 0x11
    68a8:	48 88       	ldd	r4, Y+16	; 0x10
    68aa:	5f 84       	ldd	r5, Y+15	; 0x0f
    68ac:	6e 84       	ldd	r6, Y+14	; 0x0e
    68ae:	7d 84       	ldd	r7, Y+13	; 0x0d
    68b0:	8c 84       	ldd	r8, Y+12	; 0x0c
    68b2:	9b 84       	ldd	r9, Y+11	; 0x0b
    68b4:	aa 84       	ldd	r10, Y+10	; 0x0a
    68b6:	b9 84       	ldd	r11, Y+9	; 0x09
    68b8:	c8 84       	ldd	r12, Y+8	; 0x08
    68ba:	df 80       	ldd	r13, Y+7	; 0x07
    68bc:	ee 80       	ldd	r14, Y+6	; 0x06
    68be:	fd 80       	ldd	r15, Y+5	; 0x05
    68c0:	0c 81       	ldd	r16, Y+4	; 0x04
    68c2:	1b 81       	ldd	r17, Y+3	; 0x03
    68c4:	aa 81       	ldd	r26, Y+2	; 0x02
    68c6:	b9 81       	ldd	r27, Y+1	; 0x01
    68c8:	ce 0f       	add	r28, r30
    68ca:	d1 1d       	adc	r29, r1
    68cc:	0f b6       	in	r0, 0x3f	; 63
    68ce:	f8 94       	cli
    68d0:	de bf       	out	0x3e, r29	; 62
    68d2:	0f be       	out	0x3f, r0	; 63
    68d4:	cd bf       	out	0x3d, r28	; 61
    68d6:	ed 01       	movw	r28, r26
    68d8:	08 95       	ret

000068da <__udivmodhi4>:
    68da:	aa 1b       	sub	r26, r26
    68dc:	bb 1b       	sub	r27, r27
    68de:	51 e1       	ldi	r21, 0x11	; 17
    68e0:	07 c0       	rjmp	.+14     	; 0x68f0 <__udivmodhi4_ep>

000068e2 <__udivmodhi4_loop>:
    68e2:	aa 1f       	adc	r26, r26
    68e4:	bb 1f       	adc	r27, r27
    68e6:	a6 17       	cp	r26, r22
    68e8:	b7 07       	cpc	r27, r23
    68ea:	10 f0       	brcs	.+4      	; 0x68f0 <__udivmodhi4_ep>
    68ec:	a6 1b       	sub	r26, r22
    68ee:	b7 0b       	sbc	r27, r23

000068f0 <__udivmodhi4_ep>:
    68f0:	88 1f       	adc	r24, r24
    68f2:	99 1f       	adc	r25, r25
    68f4:	5a 95       	dec	r21
    68f6:	a9 f7       	brne	.-22     	; 0x68e2 <__udivmodhi4_loop>
    68f8:	80 95       	com	r24
    68fa:	90 95       	com	r25
    68fc:	bc 01       	movw	r22, r24
    68fe:	cd 01       	movw	r24, r26
    6900:	08 95       	ret

00006902 <malloc>:
    6902:	cf 93       	push	r28
    6904:	df 93       	push	r29
    6906:	bc 01       	movw	r22, r24
    6908:	82 30       	cpi	r24, 0x02	; 2
    690a:	91 05       	cpc	r25, r1
    690c:	10 f4       	brcc	.+4      	; 0x6912 <malloc+0x10>
    690e:	62 e0       	ldi	r22, 0x02	; 2
    6910:	70 e0       	ldi	r23, 0x00	; 0
    6912:	a0 91 f9 07 	lds	r26, 0x07F9
    6916:	b0 91 fa 07 	lds	r27, 0x07FA
    691a:	ed 01       	movw	r28, r26
    691c:	e0 e0       	ldi	r30, 0x00	; 0
    691e:	f0 e0       	ldi	r31, 0x00	; 0
    6920:	40 e0       	ldi	r20, 0x00	; 0
    6922:	50 e0       	ldi	r21, 0x00	; 0
    6924:	21 c0       	rjmp	.+66     	; 0x6968 <malloc+0x66>
    6926:	88 81       	ld	r24, Y
    6928:	99 81       	ldd	r25, Y+1	; 0x01
    692a:	86 17       	cp	r24, r22
    692c:	97 07       	cpc	r25, r23
    692e:	69 f4       	brne	.+26     	; 0x694a <malloc+0x48>
    6930:	8a 81       	ldd	r24, Y+2	; 0x02
    6932:	9b 81       	ldd	r25, Y+3	; 0x03
    6934:	30 97       	sbiw	r30, 0x00	; 0
    6936:	19 f0       	breq	.+6      	; 0x693e <malloc+0x3c>
    6938:	93 83       	std	Z+3, r25	; 0x03
    693a:	82 83       	std	Z+2, r24	; 0x02
    693c:	04 c0       	rjmp	.+8      	; 0x6946 <malloc+0x44>
    693e:	90 93 fa 07 	sts	0x07FA, r25
    6942:	80 93 f9 07 	sts	0x07F9, r24
    6946:	fe 01       	movw	r30, r28
    6948:	34 c0       	rjmp	.+104    	; 0x69b2 <malloc+0xb0>
    694a:	68 17       	cp	r22, r24
    694c:	79 07       	cpc	r23, r25
    694e:	38 f4       	brcc	.+14     	; 0x695e <malloc+0x5c>
    6950:	41 15       	cp	r20, r1
    6952:	51 05       	cpc	r21, r1
    6954:	19 f0       	breq	.+6      	; 0x695c <malloc+0x5a>
    6956:	84 17       	cp	r24, r20
    6958:	95 07       	cpc	r25, r21
    695a:	08 f4       	brcc	.+2      	; 0x695e <malloc+0x5c>
    695c:	ac 01       	movw	r20, r24
    695e:	fe 01       	movw	r30, r28
    6960:	8a 81       	ldd	r24, Y+2	; 0x02
    6962:	9b 81       	ldd	r25, Y+3	; 0x03
    6964:	9c 01       	movw	r18, r24
    6966:	e9 01       	movw	r28, r18
    6968:	20 97       	sbiw	r28, 0x00	; 0
    696a:	e9 f6       	brne	.-70     	; 0x6926 <malloc+0x24>
    696c:	41 15       	cp	r20, r1
    696e:	51 05       	cpc	r21, r1
    6970:	a9 f1       	breq	.+106    	; 0x69dc <malloc+0xda>
    6972:	ca 01       	movw	r24, r20
    6974:	86 1b       	sub	r24, r22
    6976:	97 0b       	sbc	r25, r23
    6978:	04 97       	sbiw	r24, 0x04	; 4
    697a:	08 f4       	brcc	.+2      	; 0x697e <malloc+0x7c>
    697c:	ba 01       	movw	r22, r20
    697e:	e0 e0       	ldi	r30, 0x00	; 0
    6980:	f0 e0       	ldi	r31, 0x00	; 0
    6982:	2a c0       	rjmp	.+84     	; 0x69d8 <malloc+0xd6>
    6984:	8d 91       	ld	r24, X+
    6986:	9c 91       	ld	r25, X
    6988:	11 97       	sbiw	r26, 0x01	; 1
    698a:	84 17       	cp	r24, r20
    698c:	95 07       	cpc	r25, r21
    698e:	f9 f4       	brne	.+62     	; 0x69ce <malloc+0xcc>
    6990:	64 17       	cp	r22, r20
    6992:	75 07       	cpc	r23, r21
    6994:	81 f4       	brne	.+32     	; 0x69b6 <malloc+0xb4>
    6996:	12 96       	adiw	r26, 0x02	; 2
    6998:	8d 91       	ld	r24, X+
    699a:	9c 91       	ld	r25, X
    699c:	13 97       	sbiw	r26, 0x03	; 3
    699e:	30 97       	sbiw	r30, 0x00	; 0
    69a0:	19 f0       	breq	.+6      	; 0x69a8 <malloc+0xa6>
    69a2:	93 83       	std	Z+3, r25	; 0x03
    69a4:	82 83       	std	Z+2, r24	; 0x02
    69a6:	04 c0       	rjmp	.+8      	; 0x69b0 <malloc+0xae>
    69a8:	90 93 fa 07 	sts	0x07FA, r25
    69ac:	80 93 f9 07 	sts	0x07F9, r24
    69b0:	fd 01       	movw	r30, r26
    69b2:	32 96       	adiw	r30, 0x02	; 2
    69b4:	4f c0       	rjmp	.+158    	; 0x6a54 <malloc+0x152>
    69b6:	ca 01       	movw	r24, r20
    69b8:	86 1b       	sub	r24, r22
    69ba:	97 0b       	sbc	r25, r23
    69bc:	fd 01       	movw	r30, r26
    69be:	e8 0f       	add	r30, r24
    69c0:	f9 1f       	adc	r31, r25
    69c2:	61 93       	st	Z+, r22
    69c4:	71 93       	st	Z+, r23
    69c6:	02 97       	sbiw	r24, 0x02	; 2
    69c8:	8d 93       	st	X+, r24
    69ca:	9c 93       	st	X, r25
    69cc:	43 c0       	rjmp	.+134    	; 0x6a54 <malloc+0x152>
    69ce:	fd 01       	movw	r30, r26
    69d0:	82 81       	ldd	r24, Z+2	; 0x02
    69d2:	93 81       	ldd	r25, Z+3	; 0x03
    69d4:	9c 01       	movw	r18, r24
    69d6:	d9 01       	movw	r26, r18
    69d8:	10 97       	sbiw	r26, 0x00	; 0
    69da:	a1 f6       	brne	.-88     	; 0x6984 <malloc+0x82>
    69dc:	80 91 f7 07 	lds	r24, 0x07F7
    69e0:	90 91 f8 07 	lds	r25, 0x07F8
    69e4:	89 2b       	or	r24, r25
    69e6:	41 f4       	brne	.+16     	; 0x69f8 <malloc+0xf6>
    69e8:	80 91 3d 04 	lds	r24, 0x043D
    69ec:	90 91 3e 04 	lds	r25, 0x043E
    69f0:	90 93 f8 07 	sts	0x07F8, r25
    69f4:	80 93 f7 07 	sts	0x07F7, r24
    69f8:	40 91 3f 04 	lds	r20, 0x043F
    69fc:	50 91 40 04 	lds	r21, 0x0440
    6a00:	41 15       	cp	r20, r1
    6a02:	51 05       	cpc	r21, r1
    6a04:	41 f4       	brne	.+16     	; 0x6a16 <malloc+0x114>
    6a06:	4d b7       	in	r20, 0x3d	; 61
    6a08:	5e b7       	in	r21, 0x3e	; 62
    6a0a:	80 91 3b 04 	lds	r24, 0x043B
    6a0e:	90 91 3c 04 	lds	r25, 0x043C
    6a12:	48 1b       	sub	r20, r24
    6a14:	59 0b       	sbc	r21, r25
    6a16:	20 91 f7 07 	lds	r18, 0x07F7
    6a1a:	30 91 f8 07 	lds	r19, 0x07F8
    6a1e:	24 17       	cp	r18, r20
    6a20:	35 07       	cpc	r19, r21
    6a22:	b0 f4       	brcc	.+44     	; 0x6a50 <malloc+0x14e>
    6a24:	ca 01       	movw	r24, r20
    6a26:	82 1b       	sub	r24, r18
    6a28:	93 0b       	sbc	r25, r19
    6a2a:	86 17       	cp	r24, r22
    6a2c:	97 07       	cpc	r25, r23
    6a2e:	80 f0       	brcs	.+32     	; 0x6a50 <malloc+0x14e>
    6a30:	ab 01       	movw	r20, r22
    6a32:	4e 5f       	subi	r20, 0xFE	; 254
    6a34:	5f 4f       	sbci	r21, 0xFF	; 255
    6a36:	84 17       	cp	r24, r20
    6a38:	95 07       	cpc	r25, r21
    6a3a:	50 f0       	brcs	.+20     	; 0x6a50 <malloc+0x14e>
    6a3c:	42 0f       	add	r20, r18
    6a3e:	53 1f       	adc	r21, r19
    6a40:	50 93 f8 07 	sts	0x07F8, r21
    6a44:	40 93 f7 07 	sts	0x07F7, r20
    6a48:	f9 01       	movw	r30, r18
    6a4a:	61 93       	st	Z+, r22
    6a4c:	71 93       	st	Z+, r23
    6a4e:	02 c0       	rjmp	.+4      	; 0x6a54 <malloc+0x152>
    6a50:	e0 e0       	ldi	r30, 0x00	; 0
    6a52:	f0 e0       	ldi	r31, 0x00	; 0
    6a54:	cf 01       	movw	r24, r30
    6a56:	df 91       	pop	r29
    6a58:	cf 91       	pop	r28
    6a5a:	08 95       	ret

00006a5c <free>:
    6a5c:	cf 93       	push	r28
    6a5e:	df 93       	push	r29
    6a60:	00 97       	sbiw	r24, 0x00	; 0
    6a62:	09 f4       	brne	.+2      	; 0x6a66 <free+0xa>
    6a64:	50 c0       	rjmp	.+160    	; 0x6b06 <free+0xaa>
    6a66:	ec 01       	movw	r28, r24
    6a68:	22 97       	sbiw	r28, 0x02	; 2
    6a6a:	1b 82       	std	Y+3, r1	; 0x03
    6a6c:	1a 82       	std	Y+2, r1	; 0x02
    6a6e:	a0 91 f9 07 	lds	r26, 0x07F9
    6a72:	b0 91 fa 07 	lds	r27, 0x07FA
    6a76:	10 97       	sbiw	r26, 0x00	; 0
    6a78:	09 f1       	breq	.+66     	; 0x6abc <free+0x60>
    6a7a:	40 e0       	ldi	r20, 0x00	; 0
    6a7c:	50 e0       	ldi	r21, 0x00	; 0
    6a7e:	ac 17       	cp	r26, r28
    6a80:	bd 07       	cpc	r27, r29
    6a82:	08 f1       	brcs	.+66     	; 0x6ac6 <free+0x6a>
    6a84:	bb 83       	std	Y+3, r27	; 0x03
    6a86:	aa 83       	std	Y+2, r26	; 0x02
    6a88:	fe 01       	movw	r30, r28
    6a8a:	21 91       	ld	r18, Z+
    6a8c:	31 91       	ld	r19, Z+
    6a8e:	e2 0f       	add	r30, r18
    6a90:	f3 1f       	adc	r31, r19
    6a92:	ae 17       	cp	r26, r30
    6a94:	bf 07       	cpc	r27, r31
    6a96:	79 f4       	brne	.+30     	; 0x6ab6 <free+0x5a>
    6a98:	8d 91       	ld	r24, X+
    6a9a:	9c 91       	ld	r25, X
    6a9c:	11 97       	sbiw	r26, 0x01	; 1
    6a9e:	28 0f       	add	r18, r24
    6aa0:	39 1f       	adc	r19, r25
    6aa2:	2e 5f       	subi	r18, 0xFE	; 254
    6aa4:	3f 4f       	sbci	r19, 0xFF	; 255
    6aa6:	39 83       	std	Y+1, r19	; 0x01
    6aa8:	28 83       	st	Y, r18
    6aaa:	12 96       	adiw	r26, 0x02	; 2
    6aac:	8d 91       	ld	r24, X+
    6aae:	9c 91       	ld	r25, X
    6ab0:	13 97       	sbiw	r26, 0x03	; 3
    6ab2:	9b 83       	std	Y+3, r25	; 0x03
    6ab4:	8a 83       	std	Y+2, r24	; 0x02
    6ab6:	41 15       	cp	r20, r1
    6ab8:	51 05       	cpc	r21, r1
    6aba:	71 f4       	brne	.+28     	; 0x6ad8 <free+0x7c>
    6abc:	d0 93 fa 07 	sts	0x07FA, r29
    6ac0:	c0 93 f9 07 	sts	0x07F9, r28
    6ac4:	20 c0       	rjmp	.+64     	; 0x6b06 <free+0xaa>
    6ac6:	12 96       	adiw	r26, 0x02	; 2
    6ac8:	8d 91       	ld	r24, X+
    6aca:	9c 91       	ld	r25, X
    6acc:	13 97       	sbiw	r26, 0x03	; 3
    6ace:	ad 01       	movw	r20, r26
    6ad0:	00 97       	sbiw	r24, 0x00	; 0
    6ad2:	11 f0       	breq	.+4      	; 0x6ad8 <free+0x7c>
    6ad4:	dc 01       	movw	r26, r24
    6ad6:	d3 cf       	rjmp	.-90     	; 0x6a7e <free+0x22>
    6ad8:	fa 01       	movw	r30, r20
    6ada:	d3 83       	std	Z+3, r29	; 0x03
    6adc:	c2 83       	std	Z+2, r28	; 0x02
    6ade:	21 91       	ld	r18, Z+
    6ae0:	31 91       	ld	r19, Z+
    6ae2:	e2 0f       	add	r30, r18
    6ae4:	f3 1f       	adc	r31, r19
    6ae6:	ce 17       	cp	r28, r30
    6ae8:	df 07       	cpc	r29, r31
    6aea:	69 f4       	brne	.+26     	; 0x6b06 <free+0xaa>
    6aec:	88 81       	ld	r24, Y
    6aee:	99 81       	ldd	r25, Y+1	; 0x01
    6af0:	28 0f       	add	r18, r24
    6af2:	39 1f       	adc	r19, r25
    6af4:	2e 5f       	subi	r18, 0xFE	; 254
    6af6:	3f 4f       	sbci	r19, 0xFF	; 255
    6af8:	fa 01       	movw	r30, r20
    6afa:	31 83       	std	Z+1, r19	; 0x01
    6afc:	20 83       	st	Z, r18
    6afe:	8a 81       	ldd	r24, Y+2	; 0x02
    6b00:	9b 81       	ldd	r25, Y+3	; 0x03
    6b02:	93 83       	std	Z+3, r25	; 0x03
    6b04:	82 83       	std	Z+2, r24	; 0x02
    6b06:	df 91       	pop	r29
    6b08:	cf 91       	pop	r28
    6b0a:	08 95       	ret

00006b0c <do_rand>:
    6b0c:	a0 e0       	ldi	r26, 0x00	; 0
    6b0e:	b0 e0       	ldi	r27, 0x00	; 0
    6b10:	eb e8       	ldi	r30, 0x8B	; 139
    6b12:	f5 e3       	ldi	r31, 0x35	; 53
    6b14:	b3 ce       	rjmp	.-666    	; 0x687c <__prologue_saves__+0x10>
    6b16:	ec 01       	movw	r28, r24
    6b18:	a8 80       	ld	r10, Y
    6b1a:	b9 80       	ldd	r11, Y+1	; 0x01
    6b1c:	ca 80       	ldd	r12, Y+2	; 0x02
    6b1e:	db 80       	ldd	r13, Y+3	; 0x03
    6b20:	a1 14       	cp	r10, r1
    6b22:	b1 04       	cpc	r11, r1
    6b24:	c1 04       	cpc	r12, r1
    6b26:	d1 04       	cpc	r13, r1
    6b28:	41 f4       	brne	.+16     	; 0x6b3a <do_rand+0x2e>
    6b2a:	84 e2       	ldi	r24, 0x24	; 36
    6b2c:	a8 2e       	mov	r10, r24
    6b2e:	89 ed       	ldi	r24, 0xD9	; 217
    6b30:	b8 2e       	mov	r11, r24
    6b32:	8b e5       	ldi	r24, 0x5B	; 91
    6b34:	c8 2e       	mov	r12, r24
    6b36:	87 e0       	ldi	r24, 0x07	; 7
    6b38:	d8 2e       	mov	r13, r24
    6b3a:	c6 01       	movw	r24, r12
    6b3c:	b5 01       	movw	r22, r10
    6b3e:	2d e1       	ldi	r18, 0x1D	; 29
    6b40:	33 ef       	ldi	r19, 0xF3	; 243
    6b42:	41 e0       	ldi	r20, 0x01	; 1
    6b44:	50 e0       	ldi	r21, 0x00	; 0
    6b46:	fa d1       	rcall	.+1012   	; 0x6f3c <__divmodsi4>
    6b48:	27 ea       	ldi	r18, 0xA7	; 167
    6b4a:	31 e4       	ldi	r19, 0x41	; 65
    6b4c:	40 e0       	ldi	r20, 0x00	; 0
    6b4e:	50 e0       	ldi	r21, 0x00	; 0
    6b50:	39 de       	rcall	.-910    	; 0x67c4 <__mulsi3>
    6b52:	7b 01       	movw	r14, r22
    6b54:	8c 01       	movw	r16, r24
    6b56:	c6 01       	movw	r24, r12
    6b58:	b5 01       	movw	r22, r10
    6b5a:	2d e1       	ldi	r18, 0x1D	; 29
    6b5c:	33 ef       	ldi	r19, 0xF3	; 243
    6b5e:	41 e0       	ldi	r20, 0x01	; 1
    6b60:	50 e0       	ldi	r21, 0x00	; 0
    6b62:	ec d1       	rcall	.+984    	; 0x6f3c <__divmodsi4>
    6b64:	ca 01       	movw	r24, r20
    6b66:	b9 01       	movw	r22, r18
    6b68:	2c ee       	ldi	r18, 0xEC	; 236
    6b6a:	34 ef       	ldi	r19, 0xF4	; 244
    6b6c:	4f ef       	ldi	r20, 0xFF	; 255
    6b6e:	5f ef       	ldi	r21, 0xFF	; 255
    6b70:	29 de       	rcall	.-942    	; 0x67c4 <__mulsi3>
    6b72:	6e 0d       	add	r22, r14
    6b74:	7f 1d       	adc	r23, r15
    6b76:	80 1f       	adc	r24, r16
    6b78:	91 1f       	adc	r25, r17
    6b7a:	97 ff       	sbrs	r25, 7
    6b7c:	04 c0       	rjmp	.+8      	; 0x6b86 <do_rand+0x7a>
    6b7e:	61 50       	subi	r22, 0x01	; 1
    6b80:	70 40       	sbci	r23, 0x00	; 0
    6b82:	80 40       	sbci	r24, 0x00	; 0
    6b84:	90 48       	sbci	r25, 0x80	; 128
    6b86:	68 83       	st	Y, r22
    6b88:	79 83       	std	Y+1, r23	; 0x01
    6b8a:	8a 83       	std	Y+2, r24	; 0x02
    6b8c:	9b 83       	std	Y+3, r25	; 0x03
    6b8e:	9b 01       	movw	r18, r22
    6b90:	3f 77       	andi	r19, 0x7F	; 127
    6b92:	c9 01       	movw	r24, r18
    6b94:	cd b7       	in	r28, 0x3d	; 61
    6b96:	de b7       	in	r29, 0x3e	; 62
    6b98:	ea e0       	ldi	r30, 0x0A	; 10
    6b9a:	8c ce       	rjmp	.-744    	; 0x68b4 <__epilogue_restores__+0x10>

00006b9c <rand_r>:
    6b9c:	b7 df       	rcall	.-146    	; 0x6b0c <do_rand>
    6b9e:	08 95       	ret

00006ba0 <rand>:
    6ba0:	81 e4       	ldi	r24, 0x41	; 65
    6ba2:	94 e0       	ldi	r25, 0x04	; 4
    6ba4:	b3 df       	rcall	.-154    	; 0x6b0c <do_rand>
    6ba6:	08 95       	ret

00006ba8 <srand>:
    6ba8:	a0 e0       	ldi	r26, 0x00	; 0
    6baa:	b0 e0       	ldi	r27, 0x00	; 0
    6bac:	80 93 41 04 	sts	0x0441, r24
    6bb0:	90 93 42 04 	sts	0x0442, r25
    6bb4:	a0 93 43 04 	sts	0x0443, r26
    6bb8:	b0 93 44 04 	sts	0x0444, r27
    6bbc:	08 95       	ret

00006bbe <__ftoa_engine>:
    6bbe:	28 30       	cpi	r18, 0x08	; 8
    6bc0:	08 f0       	brcs	.+2      	; 0x6bc4 <__ftoa_engine+0x6>
    6bc2:	27 e0       	ldi	r18, 0x07	; 7
    6bc4:	33 27       	eor	r19, r19
    6bc6:	da 01       	movw	r26, r20
    6bc8:	99 0f       	add	r25, r25
    6bca:	31 1d       	adc	r19, r1
    6bcc:	87 fd       	sbrc	r24, 7
    6bce:	91 60       	ori	r25, 0x01	; 1
    6bd0:	00 96       	adiw	r24, 0x00	; 0
    6bd2:	61 05       	cpc	r22, r1
    6bd4:	71 05       	cpc	r23, r1
    6bd6:	39 f4       	brne	.+14     	; 0x6be6 <__ftoa_engine+0x28>
    6bd8:	32 60       	ori	r19, 0x02	; 2
    6bda:	2e 5f       	subi	r18, 0xFE	; 254
    6bdc:	3d 93       	st	X+, r19
    6bde:	30 e3       	ldi	r19, 0x30	; 48
    6be0:	2a 95       	dec	r18
    6be2:	e1 f7       	brne	.-8      	; 0x6bdc <__ftoa_engine+0x1e>
    6be4:	08 95       	ret
    6be6:	9f 3f       	cpi	r25, 0xFF	; 255
    6be8:	30 f0       	brcs	.+12     	; 0x6bf6 <__ftoa_engine+0x38>
    6bea:	80 38       	cpi	r24, 0x80	; 128
    6bec:	71 05       	cpc	r23, r1
    6bee:	61 05       	cpc	r22, r1
    6bf0:	09 f0       	breq	.+2      	; 0x6bf4 <__ftoa_engine+0x36>
    6bf2:	3c 5f       	subi	r19, 0xFC	; 252
    6bf4:	3c 5f       	subi	r19, 0xFC	; 252
    6bf6:	3d 93       	st	X+, r19
    6bf8:	91 30       	cpi	r25, 0x01	; 1
    6bfa:	08 f0       	brcs	.+2      	; 0x6bfe <__ftoa_engine+0x40>
    6bfc:	80 68       	ori	r24, 0x80	; 128
    6bfe:	91 1d       	adc	r25, r1
    6c00:	df 93       	push	r29
    6c02:	cf 93       	push	r28
    6c04:	1f 93       	push	r17
    6c06:	0f 93       	push	r16
    6c08:	ff 92       	push	r15
    6c0a:	ef 92       	push	r14
    6c0c:	19 2f       	mov	r17, r25
    6c0e:	98 7f       	andi	r25, 0xF8	; 248
    6c10:	96 95       	lsr	r25
    6c12:	e9 2f       	mov	r30, r25
    6c14:	96 95       	lsr	r25
    6c16:	96 95       	lsr	r25
    6c18:	e9 0f       	add	r30, r25
    6c1a:	ff 27       	eor	r31, r31
    6c1c:	ef 53       	subi	r30, 0x3F	; 63
    6c1e:	fa 4f       	sbci	r31, 0xFA	; 250
    6c20:	99 27       	eor	r25, r25
    6c22:	33 27       	eor	r19, r19
    6c24:	ee 24       	eor	r14, r14
    6c26:	ff 24       	eor	r15, r15
    6c28:	a7 01       	movw	r20, r14
    6c2a:	e7 01       	movw	r28, r14
    6c2c:	05 90       	lpm	r0, Z+
    6c2e:	08 94       	sec
    6c30:	07 94       	ror	r0
    6c32:	28 f4       	brcc	.+10     	; 0x6c3e <__ftoa_engine+0x80>
    6c34:	36 0f       	add	r19, r22
    6c36:	e7 1e       	adc	r14, r23
    6c38:	f8 1e       	adc	r15, r24
    6c3a:	49 1f       	adc	r20, r25
    6c3c:	51 1d       	adc	r21, r1
    6c3e:	66 0f       	add	r22, r22
    6c40:	77 1f       	adc	r23, r23
    6c42:	88 1f       	adc	r24, r24
    6c44:	99 1f       	adc	r25, r25
    6c46:	06 94       	lsr	r0
    6c48:	a1 f7       	brne	.-24     	; 0x6c32 <__ftoa_engine+0x74>
    6c4a:	05 90       	lpm	r0, Z+
    6c4c:	07 94       	ror	r0
    6c4e:	28 f4       	brcc	.+10     	; 0x6c5a <__ftoa_engine+0x9c>
    6c50:	e7 0e       	add	r14, r23
    6c52:	f8 1e       	adc	r15, r24
    6c54:	49 1f       	adc	r20, r25
    6c56:	56 1f       	adc	r21, r22
    6c58:	c1 1d       	adc	r28, r1
    6c5a:	77 0f       	add	r23, r23
    6c5c:	88 1f       	adc	r24, r24
    6c5e:	99 1f       	adc	r25, r25
    6c60:	66 1f       	adc	r22, r22
    6c62:	06 94       	lsr	r0
    6c64:	a1 f7       	brne	.-24     	; 0x6c4e <__ftoa_engine+0x90>
    6c66:	05 90       	lpm	r0, Z+
    6c68:	07 94       	ror	r0
    6c6a:	28 f4       	brcc	.+10     	; 0x6c76 <__ftoa_engine+0xb8>
    6c6c:	f8 0e       	add	r15, r24
    6c6e:	49 1f       	adc	r20, r25
    6c70:	56 1f       	adc	r21, r22
    6c72:	c7 1f       	adc	r28, r23
    6c74:	d1 1d       	adc	r29, r1
    6c76:	88 0f       	add	r24, r24
    6c78:	99 1f       	adc	r25, r25
    6c7a:	66 1f       	adc	r22, r22
    6c7c:	77 1f       	adc	r23, r23
    6c7e:	06 94       	lsr	r0
    6c80:	a1 f7       	brne	.-24     	; 0x6c6a <__ftoa_engine+0xac>
    6c82:	05 90       	lpm	r0, Z+
    6c84:	07 94       	ror	r0
    6c86:	20 f4       	brcc	.+8      	; 0x6c90 <__ftoa_engine+0xd2>
    6c88:	49 0f       	add	r20, r25
    6c8a:	56 1f       	adc	r21, r22
    6c8c:	c7 1f       	adc	r28, r23
    6c8e:	d8 1f       	adc	r29, r24
    6c90:	99 0f       	add	r25, r25
    6c92:	66 1f       	adc	r22, r22
    6c94:	77 1f       	adc	r23, r23
    6c96:	88 1f       	adc	r24, r24
    6c98:	06 94       	lsr	r0
    6c9a:	a9 f7       	brne	.-22     	; 0x6c86 <__ftoa_engine+0xc8>
    6c9c:	84 91       	lpm	r24, Z+
    6c9e:	10 95       	com	r17
    6ca0:	17 70       	andi	r17, 0x07	; 7
    6ca2:	41 f0       	breq	.+16     	; 0x6cb4 <__ftoa_engine+0xf6>
    6ca4:	d6 95       	lsr	r29
    6ca6:	c7 95       	ror	r28
    6ca8:	57 95       	ror	r21
    6caa:	47 95       	ror	r20
    6cac:	f7 94       	ror	r15
    6cae:	e7 94       	ror	r14
    6cb0:	1a 95       	dec	r17
    6cb2:	c1 f7       	brne	.-16     	; 0x6ca4 <__ftoa_engine+0xe6>
    6cb4:	e7 e6       	ldi	r30, 0x67	; 103
    6cb6:	f5 e0       	ldi	r31, 0x05	; 5
    6cb8:	68 94       	set
    6cba:	15 90       	lpm	r1, Z+
    6cbc:	15 91       	lpm	r17, Z+
    6cbe:	35 91       	lpm	r19, Z+
    6cc0:	65 91       	lpm	r22, Z+
    6cc2:	95 91       	lpm	r25, Z+
    6cc4:	05 90       	lpm	r0, Z+
    6cc6:	7f e2       	ldi	r23, 0x2F	; 47
    6cc8:	73 95       	inc	r23
    6cca:	e1 18       	sub	r14, r1
    6ccc:	f1 0a       	sbc	r15, r17
    6cce:	43 0b       	sbc	r20, r19
    6cd0:	56 0b       	sbc	r21, r22
    6cd2:	c9 0b       	sbc	r28, r25
    6cd4:	d0 09       	sbc	r29, r0
    6cd6:	c0 f7       	brcc	.-16     	; 0x6cc8 <__ftoa_engine+0x10a>
    6cd8:	e1 0c       	add	r14, r1
    6cda:	f1 1e       	adc	r15, r17
    6cdc:	43 1f       	adc	r20, r19
    6cde:	56 1f       	adc	r21, r22
    6ce0:	c9 1f       	adc	r28, r25
    6ce2:	d0 1d       	adc	r29, r0
    6ce4:	7e f4       	brtc	.+30     	; 0x6d04 <__ftoa_engine+0x146>
    6ce6:	70 33       	cpi	r23, 0x30	; 48
    6ce8:	11 f4       	brne	.+4      	; 0x6cee <__ftoa_engine+0x130>
    6cea:	8a 95       	dec	r24
    6cec:	e6 cf       	rjmp	.-52     	; 0x6cba <__ftoa_engine+0xfc>
    6cee:	e8 94       	clt
    6cf0:	01 50       	subi	r16, 0x01	; 1
    6cf2:	30 f0       	brcs	.+12     	; 0x6d00 <__ftoa_engine+0x142>
    6cf4:	08 0f       	add	r16, r24
    6cf6:	0a f4       	brpl	.+2      	; 0x6cfa <__ftoa_engine+0x13c>
    6cf8:	00 27       	eor	r16, r16
    6cfa:	02 17       	cp	r16, r18
    6cfc:	08 f4       	brcc	.+2      	; 0x6d00 <__ftoa_engine+0x142>
    6cfe:	20 2f       	mov	r18, r16
    6d00:	23 95       	inc	r18
    6d02:	02 2f       	mov	r16, r18
    6d04:	7a 33       	cpi	r23, 0x3A	; 58
    6d06:	28 f0       	brcs	.+10     	; 0x6d12 <__ftoa_engine+0x154>
    6d08:	79 e3       	ldi	r23, 0x39	; 57
    6d0a:	7d 93       	st	X+, r23
    6d0c:	2a 95       	dec	r18
    6d0e:	e9 f7       	brne	.-6      	; 0x6d0a <__ftoa_engine+0x14c>
    6d10:	10 c0       	rjmp	.+32     	; 0x6d32 <__ftoa_engine+0x174>
    6d12:	7d 93       	st	X+, r23
    6d14:	2a 95       	dec	r18
    6d16:	89 f6       	brne	.-94     	; 0x6cba <__ftoa_engine+0xfc>
    6d18:	06 94       	lsr	r0
    6d1a:	97 95       	ror	r25
    6d1c:	67 95       	ror	r22
    6d1e:	37 95       	ror	r19
    6d20:	17 95       	ror	r17
    6d22:	17 94       	ror	r1
    6d24:	e1 18       	sub	r14, r1
    6d26:	f1 0a       	sbc	r15, r17
    6d28:	43 0b       	sbc	r20, r19
    6d2a:	56 0b       	sbc	r21, r22
    6d2c:	c9 0b       	sbc	r28, r25
    6d2e:	d0 09       	sbc	r29, r0
    6d30:	98 f0       	brcs	.+38     	; 0x6d58 <__ftoa_engine+0x19a>
    6d32:	23 95       	inc	r18
    6d34:	7e 91       	ld	r23, -X
    6d36:	73 95       	inc	r23
    6d38:	7a 33       	cpi	r23, 0x3A	; 58
    6d3a:	08 f0       	brcs	.+2      	; 0x6d3e <__ftoa_engine+0x180>
    6d3c:	70 e3       	ldi	r23, 0x30	; 48
    6d3e:	7c 93       	st	X, r23
    6d40:	20 13       	cpse	r18, r16
    6d42:	b8 f7       	brcc	.-18     	; 0x6d32 <__ftoa_engine+0x174>
    6d44:	7e 91       	ld	r23, -X
    6d46:	70 61       	ori	r23, 0x10	; 16
    6d48:	7d 93       	st	X+, r23
    6d4a:	30 f0       	brcs	.+12     	; 0x6d58 <__ftoa_engine+0x19a>
    6d4c:	83 95       	inc	r24
    6d4e:	71 e3       	ldi	r23, 0x31	; 49
    6d50:	7d 93       	st	X+, r23
    6d52:	70 e3       	ldi	r23, 0x30	; 48
    6d54:	2a 95       	dec	r18
    6d56:	e1 f7       	brne	.-8      	; 0x6d50 <__ftoa_engine+0x192>
    6d58:	11 24       	eor	r1, r1
    6d5a:	ef 90       	pop	r14
    6d5c:	ff 90       	pop	r15
    6d5e:	0f 91       	pop	r16
    6d60:	1f 91       	pop	r17
    6d62:	cf 91       	pop	r28
    6d64:	df 91       	pop	r29
    6d66:	99 27       	eor	r25, r25
    6d68:	87 fd       	sbrc	r24, 7
    6d6a:	90 95       	com	r25
    6d6c:	08 95       	ret

00006d6e <strnlen_P>:
    6d6e:	fc 01       	movw	r30, r24
    6d70:	05 90       	lpm	r0, Z+
    6d72:	61 50       	subi	r22, 0x01	; 1
    6d74:	70 40       	sbci	r23, 0x00	; 0
    6d76:	01 10       	cpse	r0, r1
    6d78:	d8 f7       	brcc	.-10     	; 0x6d70 <strnlen_P+0x2>
    6d7a:	80 95       	com	r24
    6d7c:	90 95       	com	r25
    6d7e:	8e 0f       	add	r24, r30
    6d80:	9f 1f       	adc	r25, r31
    6d82:	08 95       	ret

00006d84 <strnlen>:
    6d84:	fc 01       	movw	r30, r24
    6d86:	61 50       	subi	r22, 0x01	; 1
    6d88:	70 40       	sbci	r23, 0x00	; 0
    6d8a:	01 90       	ld	r0, Z+
    6d8c:	01 10       	cpse	r0, r1
    6d8e:	d8 f7       	brcc	.-10     	; 0x6d86 <strnlen+0x2>
    6d90:	80 95       	com	r24
    6d92:	90 95       	com	r25
    6d94:	8e 0f       	add	r24, r30
    6d96:	9f 1f       	adc	r25, r31
    6d98:	08 95       	ret

00006d9a <fputc>:
    6d9a:	0f 93       	push	r16
    6d9c:	1f 93       	push	r17
    6d9e:	cf 93       	push	r28
    6da0:	df 93       	push	r29
    6da2:	8c 01       	movw	r16, r24
    6da4:	eb 01       	movw	r28, r22
    6da6:	8b 81       	ldd	r24, Y+3	; 0x03
    6da8:	81 ff       	sbrs	r24, 1
    6daa:	1b c0       	rjmp	.+54     	; 0x6de2 <fputc+0x48>
    6dac:	82 ff       	sbrs	r24, 2
    6dae:	0d c0       	rjmp	.+26     	; 0x6dca <fputc+0x30>
    6db0:	2e 81       	ldd	r18, Y+6	; 0x06
    6db2:	3f 81       	ldd	r19, Y+7	; 0x07
    6db4:	8c 81       	ldd	r24, Y+4	; 0x04
    6db6:	9d 81       	ldd	r25, Y+5	; 0x05
    6db8:	28 17       	cp	r18, r24
    6dba:	39 07       	cpc	r19, r25
    6dbc:	64 f4       	brge	.+24     	; 0x6dd6 <fputc+0x3c>
    6dbe:	e8 81       	ld	r30, Y
    6dc0:	f9 81       	ldd	r31, Y+1	; 0x01
    6dc2:	01 93       	st	Z+, r16
    6dc4:	f9 83       	std	Y+1, r31	; 0x01
    6dc6:	e8 83       	st	Y, r30
    6dc8:	06 c0       	rjmp	.+12     	; 0x6dd6 <fputc+0x3c>
    6dca:	e8 85       	ldd	r30, Y+8	; 0x08
    6dcc:	f9 85       	ldd	r31, Y+9	; 0x09
    6dce:	80 2f       	mov	r24, r16
    6dd0:	09 95       	icall
    6dd2:	89 2b       	or	r24, r25
    6dd4:	31 f4       	brne	.+12     	; 0x6de2 <fputc+0x48>
    6dd6:	8e 81       	ldd	r24, Y+6	; 0x06
    6dd8:	9f 81       	ldd	r25, Y+7	; 0x07
    6dda:	01 96       	adiw	r24, 0x01	; 1
    6ddc:	9f 83       	std	Y+7, r25	; 0x07
    6dde:	8e 83       	std	Y+6, r24	; 0x06
    6de0:	02 c0       	rjmp	.+4      	; 0x6de6 <fputc+0x4c>
    6de2:	0f ef       	ldi	r16, 0xFF	; 255
    6de4:	1f ef       	ldi	r17, 0xFF	; 255
    6de6:	c8 01       	movw	r24, r16
    6de8:	df 91       	pop	r29
    6dea:	cf 91       	pop	r28
    6dec:	1f 91       	pop	r17
    6dee:	0f 91       	pop	r16
    6df0:	08 95       	ret

00006df2 <printf>:
    6df2:	a0 e0       	ldi	r26, 0x00	; 0
    6df4:	b0 e0       	ldi	r27, 0x00	; 0
    6df6:	ee ef       	ldi	r30, 0xFE	; 254
    6df8:	f6 e3       	ldi	r31, 0x36	; 54
    6dfa:	48 cd       	rjmp	.-1392   	; 0x688c <__prologue_saves__+0x20>
    6dfc:	fe 01       	movw	r30, r28
    6dfe:	35 96       	adiw	r30, 0x05	; 5
    6e00:	61 91       	ld	r22, Z+
    6e02:	71 91       	ld	r23, Z+
    6e04:	80 91 fd 07 	lds	r24, 0x07FD
    6e08:	90 91 fe 07 	lds	r25, 0x07FE
    6e0c:	af 01       	movw	r20, r30
    6e0e:	72 d9       	rcall	.-3356   	; 0x60f4 <vfprintf>
    6e10:	20 96       	adiw	r28, 0x00	; 0
    6e12:	e2 e0       	ldi	r30, 0x02	; 2
    6e14:	57 cd       	rjmp	.-1362   	; 0x68c4 <__epilogue_restores__+0x20>

00006e16 <puts>:
    6e16:	0f 93       	push	r16
    6e18:	1f 93       	push	r17
    6e1a:	cf 93       	push	r28
    6e1c:	df 93       	push	r29
    6e1e:	8c 01       	movw	r16, r24
    6e20:	e0 91 fd 07 	lds	r30, 0x07FD
    6e24:	f0 91 fe 07 	lds	r31, 0x07FE
    6e28:	83 81       	ldd	r24, Z+3	; 0x03
    6e2a:	81 ff       	sbrs	r24, 1
    6e2c:	21 c0       	rjmp	.+66     	; 0x6e70 <puts+0x5a>
    6e2e:	c0 e0       	ldi	r28, 0x00	; 0
    6e30:	d0 e0       	ldi	r29, 0x00	; 0
    6e32:	0d c0       	rjmp	.+26     	; 0x6e4e <puts+0x38>
    6e34:	e0 91 fd 07 	lds	r30, 0x07FD
    6e38:	f0 91 fe 07 	lds	r31, 0x07FE
    6e3c:	20 85       	ldd	r18, Z+8	; 0x08
    6e3e:	31 85       	ldd	r19, Z+9	; 0x09
    6e40:	bf 01       	movw	r22, r30
    6e42:	f9 01       	movw	r30, r18
    6e44:	09 95       	icall
    6e46:	89 2b       	or	r24, r25
    6e48:	11 f0       	breq	.+4      	; 0x6e4e <puts+0x38>
    6e4a:	cf ef       	ldi	r28, 0xFF	; 255
    6e4c:	df ef       	ldi	r29, 0xFF	; 255
    6e4e:	f8 01       	movw	r30, r16
    6e50:	81 91       	ld	r24, Z+
    6e52:	8f 01       	movw	r16, r30
    6e54:	88 23       	and	r24, r24
    6e56:	71 f7       	brne	.-36     	; 0x6e34 <puts+0x1e>
    6e58:	e0 91 fd 07 	lds	r30, 0x07FD
    6e5c:	f0 91 fe 07 	lds	r31, 0x07FE
    6e60:	20 85       	ldd	r18, Z+8	; 0x08
    6e62:	31 85       	ldd	r19, Z+9	; 0x09
    6e64:	8a e0       	ldi	r24, 0x0A	; 10
    6e66:	bf 01       	movw	r22, r30
    6e68:	f9 01       	movw	r30, r18
    6e6a:	09 95       	icall
    6e6c:	89 2b       	or	r24, r25
    6e6e:	11 f0       	breq	.+4      	; 0x6e74 <puts+0x5e>
    6e70:	cf ef       	ldi	r28, 0xFF	; 255
    6e72:	df ef       	ldi	r29, 0xFF	; 255
    6e74:	ce 01       	movw	r24, r28
    6e76:	df 91       	pop	r29
    6e78:	cf 91       	pop	r28
    6e7a:	1f 91       	pop	r17
    6e7c:	0f 91       	pop	r16
    6e7e:	08 95       	ret

00006e80 <__ultoa_invert>:
    6e80:	fa 01       	movw	r30, r20
    6e82:	aa 27       	eor	r26, r26
    6e84:	28 30       	cpi	r18, 0x08	; 8
    6e86:	51 f1       	breq	.+84     	; 0x6edc <__ultoa_invert+0x5c>
    6e88:	20 31       	cpi	r18, 0x10	; 16
    6e8a:	81 f1       	breq	.+96     	; 0x6eec <__ultoa_invert+0x6c>
    6e8c:	e8 94       	clt
    6e8e:	6f 93       	push	r22
    6e90:	6e 7f       	andi	r22, 0xFE	; 254
    6e92:	6e 5f       	subi	r22, 0xFE	; 254
    6e94:	7f 4f       	sbci	r23, 0xFF	; 255
    6e96:	8f 4f       	sbci	r24, 0xFF	; 255
    6e98:	9f 4f       	sbci	r25, 0xFF	; 255
    6e9a:	af 4f       	sbci	r26, 0xFF	; 255
    6e9c:	b1 e0       	ldi	r27, 0x01	; 1
    6e9e:	3e d0       	rcall	.+124    	; 0x6f1c <__ultoa_invert+0x9c>
    6ea0:	b4 e0       	ldi	r27, 0x04	; 4
    6ea2:	3c d0       	rcall	.+120    	; 0x6f1c <__ultoa_invert+0x9c>
    6ea4:	67 0f       	add	r22, r23
    6ea6:	78 1f       	adc	r23, r24
    6ea8:	89 1f       	adc	r24, r25
    6eaa:	9a 1f       	adc	r25, r26
    6eac:	a1 1d       	adc	r26, r1
    6eae:	68 0f       	add	r22, r24
    6eb0:	79 1f       	adc	r23, r25
    6eb2:	8a 1f       	adc	r24, r26
    6eb4:	91 1d       	adc	r25, r1
    6eb6:	a1 1d       	adc	r26, r1
    6eb8:	6a 0f       	add	r22, r26
    6eba:	71 1d       	adc	r23, r1
    6ebc:	81 1d       	adc	r24, r1
    6ebe:	91 1d       	adc	r25, r1
    6ec0:	a1 1d       	adc	r26, r1
    6ec2:	20 d0       	rcall	.+64     	; 0x6f04 <__ultoa_invert+0x84>
    6ec4:	09 f4       	brne	.+2      	; 0x6ec8 <__ultoa_invert+0x48>
    6ec6:	68 94       	set
    6ec8:	3f 91       	pop	r19
    6eca:	2a e0       	ldi	r18, 0x0A	; 10
    6ecc:	26 9f       	mul	r18, r22
    6ece:	11 24       	eor	r1, r1
    6ed0:	30 19       	sub	r19, r0
    6ed2:	30 5d       	subi	r19, 0xD0	; 208
    6ed4:	31 93       	st	Z+, r19
    6ed6:	de f6       	brtc	.-74     	; 0x6e8e <__ultoa_invert+0xe>
    6ed8:	cf 01       	movw	r24, r30
    6eda:	08 95       	ret
    6edc:	46 2f       	mov	r20, r22
    6ede:	47 70       	andi	r20, 0x07	; 7
    6ee0:	40 5d       	subi	r20, 0xD0	; 208
    6ee2:	41 93       	st	Z+, r20
    6ee4:	b3 e0       	ldi	r27, 0x03	; 3
    6ee6:	0f d0       	rcall	.+30     	; 0x6f06 <__ultoa_invert+0x86>
    6ee8:	c9 f7       	brne	.-14     	; 0x6edc <__ultoa_invert+0x5c>
    6eea:	f6 cf       	rjmp	.-20     	; 0x6ed8 <__ultoa_invert+0x58>
    6eec:	46 2f       	mov	r20, r22
    6eee:	4f 70       	andi	r20, 0x0F	; 15
    6ef0:	40 5d       	subi	r20, 0xD0	; 208
    6ef2:	4a 33       	cpi	r20, 0x3A	; 58
    6ef4:	18 f0       	brcs	.+6      	; 0x6efc <__ultoa_invert+0x7c>
    6ef6:	49 5d       	subi	r20, 0xD9	; 217
    6ef8:	31 fd       	sbrc	r19, 1
    6efa:	40 52       	subi	r20, 0x20	; 32
    6efc:	41 93       	st	Z+, r20
    6efe:	02 d0       	rcall	.+4      	; 0x6f04 <__ultoa_invert+0x84>
    6f00:	a9 f7       	brne	.-22     	; 0x6eec <__ultoa_invert+0x6c>
    6f02:	ea cf       	rjmp	.-44     	; 0x6ed8 <__ultoa_invert+0x58>
    6f04:	b4 e0       	ldi	r27, 0x04	; 4
    6f06:	a6 95       	lsr	r26
    6f08:	97 95       	ror	r25
    6f0a:	87 95       	ror	r24
    6f0c:	77 95       	ror	r23
    6f0e:	67 95       	ror	r22
    6f10:	ba 95       	dec	r27
    6f12:	c9 f7       	brne	.-14     	; 0x6f06 <__ultoa_invert+0x86>
    6f14:	00 97       	sbiw	r24, 0x00	; 0
    6f16:	61 05       	cpc	r22, r1
    6f18:	71 05       	cpc	r23, r1
    6f1a:	08 95       	ret
    6f1c:	9b 01       	movw	r18, r22
    6f1e:	ac 01       	movw	r20, r24
    6f20:	0a 2e       	mov	r0, r26
    6f22:	06 94       	lsr	r0
    6f24:	57 95       	ror	r21
    6f26:	47 95       	ror	r20
    6f28:	37 95       	ror	r19
    6f2a:	27 95       	ror	r18
    6f2c:	ba 95       	dec	r27
    6f2e:	c9 f7       	brne	.-14     	; 0x6f22 <__ultoa_invert+0xa2>
    6f30:	62 0f       	add	r22, r18
    6f32:	73 1f       	adc	r23, r19
    6f34:	84 1f       	adc	r24, r20
    6f36:	95 1f       	adc	r25, r21
    6f38:	a0 1d       	adc	r26, r0
    6f3a:	08 95       	ret

00006f3c <__divmodsi4>:
    6f3c:	97 fb       	bst	r25, 7
    6f3e:	09 2e       	mov	r0, r25
    6f40:	05 26       	eor	r0, r21
    6f42:	0e d0       	rcall	.+28     	; 0x6f60 <__divmodsi4_neg1>
    6f44:	57 fd       	sbrc	r21, 7
    6f46:	04 d0       	rcall	.+8      	; 0x6f50 <__divmodsi4_neg2>
    6f48:	6f dc       	rcall	.-1826   	; 0x6828 <__udivmodsi4>
    6f4a:	0a d0       	rcall	.+20     	; 0x6f60 <__divmodsi4_neg1>
    6f4c:	00 1c       	adc	r0, r0
    6f4e:	38 f4       	brcc	.+14     	; 0x6f5e <__divmodsi4_exit>

00006f50 <__divmodsi4_neg2>:
    6f50:	50 95       	com	r21
    6f52:	40 95       	com	r20
    6f54:	30 95       	com	r19
    6f56:	21 95       	neg	r18
    6f58:	3f 4f       	sbci	r19, 0xFF	; 255
    6f5a:	4f 4f       	sbci	r20, 0xFF	; 255
    6f5c:	5f 4f       	sbci	r21, 0xFF	; 255

00006f5e <__divmodsi4_exit>:
    6f5e:	08 95       	ret

00006f60 <__divmodsi4_neg1>:
    6f60:	f6 f7       	brtc	.-4      	; 0x6f5e <__divmodsi4_exit>
    6f62:	90 95       	com	r25
    6f64:	80 95       	com	r24
    6f66:	70 95       	com	r23
    6f68:	61 95       	neg	r22
    6f6a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f6c:	8f 4f       	sbci	r24, 0xFF	; 255
    6f6e:	9f 4f       	sbci	r25, 0xFF	; 255
    6f70:	08 95       	ret

00006f72 <_exit>:
    6f72:	f8 94       	cli

00006f74 <__stop_program>:
    6f74:	ff cf       	rjmp	.-2      	; 0x6f74 <__stop_program>
