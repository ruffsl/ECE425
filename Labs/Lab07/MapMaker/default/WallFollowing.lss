
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ee  00800100  00006a16  00006aaa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a16  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033b  008003ee  008003ee  00006d98  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00006d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000607  00000000  00000000  00006df8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001802  00000000  00000000  000073ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043d  00000000  00000000  00008c01  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000147f  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  0000a4c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d01  00000000  00000000  0000a780  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e91  00000000  00000000  0000b481  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 00 21 	jmp	0x4200	; 0x4200 <__vector_4>
      14:	0c 94 29 21 	jmp	0x4252	; 0x4252 <__vector_5>
      18:	0c 94 52 21 	jmp	0x42a4	; 0x42a4 <__vector_6>
      1c:	0c 94 7b 21 	jmp	0x42f6	; 0x42f6 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 e1 1f 	jmp	0x3fc2	; 0x3fc2 <__vector_9>
      28:	0c 94 0a 20 	jmp	0x4014	; 0x4014 <__vector_10>
      2c:	0c 94 33 20 	jmp	0x4066	; 0x4066 <__vector_11>
      30:	0c 94 ae 20 	jmp	0x415c	; 0x415c <__vector_12>
      34:	0c 94 5c 20 	jmp	0x40b8	; 0x40b8 <__vector_13>
      38:	0c 94 85 20 	jmp	0x410a	; 0x410a <__vector_14>
      3c:	0c 94 d7 20 	jmp	0x41ae	; 0x41ae <__vector_15>
      40:	0c 94 66 1f 	jmp	0x3ecc	; 0x3ecc <__vector_16>
      44:	0c 94 8f 1f 	jmp	0x3f1e	; 0x3f1e <__vector_17>
      48:	0c 94 b8 1f 	jmp	0x3f70	; 0x3f70 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	cb 1c       	adc	r12, r11
      7e:	ce 1c       	adc	r12, r14
      80:	d1 1c       	adc	r13, r1
      82:	d4 1c       	adc	r13, r4
      84:	dd 1c       	adc	r13, r13
      86:	d7 1c       	adc	r13, r7
      88:	da 1c       	adc	r13, r10
      8a:	e0 1c       	adc	r14, r0
      8c:	e3 1c       	adc	r14, r3
      8e:	e6 1c       	adc	r14, r6
      90:	e9 1c       	adc	r14, r9
      92:	ec 1c       	adc	r14, r12
      94:	ef 1c       	adc	r14, r15
      96:	f2 1c       	adc	r15, r2
      98:	f5 1c       	adc	r15, r5
      9a:	f8 1c       	adc	r15, r8
      9c:	fb 1c       	adc	r15, r11
      9e:	fe 1c       	adc	r15, r14
      a0:	01 1d       	adc	r16, r1
      a2:	12 1d       	adc	r17, r2
      a4:	15 1d       	adc	r17, r5
      a6:	18 1d       	adc	r17, r8
      a8:	1b 1d       	adc	r17, r11
      aa:	24 1d       	adc	r18, r4
      ac:	1e 1d       	adc	r17, r14
      ae:	21 1d       	adc	r18, r1
      b0:	27 1d       	adc	r18, r7
      b2:	2a 1d       	adc	r18, r10
      b4:	2d 1d       	adc	r18, r13
      b6:	30 1d       	adc	r19, r0
      b8:	33 1d       	adc	r19, r3
      ba:	36 1d       	adc	r19, r6
      bc:	39 1d       	adc	r19, r9
      be:	3c 1d       	adc	r19, r12
      c0:	3f 1d       	adc	r19, r15
      c2:	42 1d       	adc	r20, r2
      c4:	45 1d       	adc	r20, r5
      c6:	48 1d       	adc	r20, r8
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e6 e1       	ldi	r30, 0x16	; 22
     676:	fa e6       	ldi	r31, 0x6A	; 106
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	ae 3e       	cpi	r26, 0xEE	; 238
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	ae ee       	ldi	r26, 0xEE	; 238
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a9 32       	cpi	r26, 0x29	; 41
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <main>
     698:	0c 94 09 35 	jmp	0x6a12	; 0x6a12 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 10 1f 	call	0x3e20	; 0x3e20 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 12 2b 	call	0x5624	; 0x5624 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 10 2a 	call	0x5420	; 0x5420 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 12 2b 	call	0x5624	; 0x5624 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 10 2a 	call	0x5420	; 0x5420 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 12 2b 	call	0x5624	; 0x5624 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 10 2a 	call	0x5420	; 0x5420 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 12 2b 	call	0x5624	; 0x5624 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 10 2a 	call	0x5420	; 0x5420 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 12 2b 	call	0x5624	; 0x5624 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 0e 17 	call	0x2e1c	; 0x2e1c <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 f1 16 	call	0x2de2	; 0x2de2 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 12 2b 	call	0x5624	; 0x5624 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 6a 04 	sts	0x046A, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 6a 04 	sts	0x046A, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 53 18 	call	0x30a6	; 0x30a6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 53 18 	call	0x30a6	; 0x30a6 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 68 18 	call	0x30d0	; 0x30d0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 53 18 	call	0x30a6	; 0x30a6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 53 18 	call	0x30a6	; 0x30a6 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 68 18 	call	0x30d0	; 0x30d0 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 68 18 	call	0x30d0	; 0x30d0 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 53 18 	call	0x30a6	; 0x30a6 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 53 18 	call	0x30a6	; 0x30a6 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <checkOdometry>:
********************************************************************/
void checkOdometry( void )
{	
	// Update the avrage 
	unsigned char odometry = ((odometryStepL + odometryStepR)/2)*D_STEP;
	if(odometry > odometryTrigger)
     c14:	20 91 6c 04 	lds	r18, 0x046C
     c18:	60 91 a6 06 	lds	r22, 0x06A6
     c1c:	70 e0       	ldi	r23, 0x00	; 0
     c1e:	62 0f       	add	r22, r18
     c20:	71 1d       	adc	r23, r1
     c22:	75 95       	asr	r23
     c24:	67 95       	ror	r22
     c26:	88 27       	eor	r24, r24
     c28:	77 fd       	sbrc	r23, 7
     c2a:	80 95       	com	r24
     c2c:	98 2f       	mov	r25, r24
     c2e:	0e 94 14 2b 	call	0x5628	; 0x5628 <__floatsisf>
     c32:	2c ed       	ldi	r18, 0xDC	; 220
     c34:	38 eb       	ldi	r19, 0xB8	; 184
     c36:	48 e0       	ldi	r20, 0x08	; 8
     c38:	5e e3       	ldi	r21, 0x3E	; 62
     c3a:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
     c3e:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
     c42:	20 91 6d 05 	lds	r18, 0x056D
     c46:	26 17       	cp	r18, r22
     c48:	38 f4       	brcc	.+14     	; 0xc58 <checkOdometry+0x44>
	{
		odometryFlag = 1;
     c4a:	81 e0       	ldi	r24, 0x01	; 1
     c4c:	80 93 18 06 	sts	0x0618, r24
		odometryStepL = 0;
     c50:	10 92 a6 06 	sts	0x06A6, r1
		odometryStepR = 0;
     c54:	10 92 6c 04 	sts	0x046C, r1
     c58:	08 95       	ret

00000c5a <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
     c5a:	ef 92       	push	r14
     c5c:	ff 92       	push	r15
     c5e:	0f 93       	push	r16
     c60:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
     c62:	60 91 e6 04 	lds	r22, 0x04E6
     c66:	70 91 e7 04 	lds	r23, 0x04E7
     c6a:	80 91 e8 04 	lds	r24, 0x04E8
     c6e:	90 91 e9 04 	lds	r25, 0x04E9
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 ef       	ldi	r20, 0xF0	; 240
     c78:	51 e4       	ldi	r21, 0x41	; 65
     c7a:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
     c7e:	f8 2e       	mov	r15, r24
     c80:	ff 1c       	adc	r15, r15
     c82:	ff 24       	eor	r15, r15
     c84:	ff 1c       	adc	r15, r15
     c86:	ff 0c       	add	r15, r15
     c88:	ff 0c       	add	r15, r15
     c8a:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
     c8c:	60 91 14 06 	lds	r22, 0x0614
     c90:	70 91 15 06 	lds	r23, 0x0615
     c94:	80 91 16 06 	lds	r24, 0x0616
     c98:	90 91 17 06 	lds	r25, 0x0617
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	30 e0       	ldi	r19, 0x00	; 0
     ca0:	40 ef       	ldi	r20, 0xF0	; 240
     ca2:	51 e4       	ldi	r21, 0x41	; 65
     ca4:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
     ca8:	08 2f       	mov	r16, r24
     caa:	00 1f       	adc	r16, r16
     cac:	00 27       	eor	r16, r16
     cae:	00 1f       	adc	r16, r16
     cb0:	00 0f       	add	r16, r16
     cb2:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
     cb4:	60 91 f0 04 	lds	r22, 0x04F0
     cb8:	70 91 f1 04 	lds	r23, 0x04F1
     cbc:	80 91 f2 04 	lds	r24, 0x04F2
     cc0:	90 91 f3 04 	lds	r25, 0x04F3
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	30 e0       	ldi	r19, 0x00	; 0
     cc8:	4c e0       	ldi	r20, 0x0C	; 12
     cca:	52 e4       	ldi	r21, 0x42	; 66
     ccc:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
     cd0:	18 2f       	mov	r17, r24
     cd2:	11 1f       	adc	r17, r17
     cd4:	11 27       	eor	r17, r17
     cd6:	11 1f       	adc	r17, r17
     cd8:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
     cda:	ee 24       	eor	r14, r14
     cdc:	60 91 19 06 	lds	r22, 0x0619
     ce0:	70 91 1a 06 	lds	r23, 0x061A
     ce4:	80 91 1b 06 	lds	r24, 0x061B
     ce8:	90 91 1c 06 	lds	r25, 0x061C
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	40 ef       	ldi	r20, 0xF0	; 240
     cf2:	51 e4       	ldi	r21, 0x41	; 65
     cf4:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
     cf8:	88 23       	and	r24, r24
     cfa:	14 f4       	brge	.+4      	; 0xd00 <checkWorld+0xa6>
     cfc:	ee 24       	eor	r14, r14
     cfe:	e3 94       	inc	r14
     d00:	8f 2d       	mov	r24, r15
     d02:	8e 0d       	add	r24, r14
     d04:	80 0f       	add	r24, r16
     d06:	81 0f       	add	r24, r17
     d08:	80 93 ee 04 	sts	0x04EE, r24
	nextGateway = moveGateways[currentMoveWorld+1];
     d0c:	20 91 ef 04 	lds	r18, 0x04EF
     d10:	e2 2f       	mov	r30, r18
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	eb 56       	subi	r30, 0x6B	; 107
     d16:	f9 4f       	sbci	r31, 0xF9	; 249
     d18:	91 81       	ldd	r25, Z+1	; 0x01
     d1a:	90 93 f4 04 	sts	0x04F4, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
     d1e:	89 17       	cp	r24, r25
     d20:	19 f4       	brne	.+6      	; 0xd28 <checkWorld+0xce>
		currentMoveWorld += 1;
     d22:	2f 5f       	subi	r18, 0xFF	; 255
     d24:	20 93 ef 04 	sts	0x04EF, r18
	}
}
     d28:	1f 91       	pop	r17
     d2a:	0f 91       	pop	r16
     d2c:	ff 90       	pop	r15
     d2e:	ef 90       	pop	r14
     d30:	08 95       	ret

00000d32 <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
     d32:	2f 92       	push	r2
     d34:	3f 92       	push	r3
     d36:	4f 92       	push	r4
     d38:	5f 92       	push	r5
     d3a:	6f 92       	push	r6
     d3c:	7f 92       	push	r7
     d3e:	8f 92       	push	r8
     d40:	9f 92       	push	r9
     d42:	af 92       	push	r10
     d44:	bf 92       	push	r11
     d46:	cf 92       	push	r12
     d48:	df 92       	push	r13
     d4a:	ef 92       	push	r14
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	df 93       	push	r29
     d54:	cf 93       	push	r28
     d56:	00 d0       	rcall	.+0      	; 0xd58 <moveAway+0x26>
     d58:	00 d0       	rcall	.+0      	; 0xd5a <moveAway+0x28>
     d5a:	cd b7       	in	r28, 0x3d	; 61
     d5c:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
     d5e:	60 90 e6 04 	lds	r6, 0x04E6
     d62:	70 90 e7 04 	lds	r7, 0x04E7
     d66:	80 90 e8 04 	lds	r8, 0x04E8
     d6a:	90 90 e9 04 	lds	r9, 0x04E9
     d6e:	a0 90 f0 04 	lds	r10, 0x04F0
     d72:	b0 90 f1 04 	lds	r11, 0x04F1
     d76:	c0 90 f2 04 	lds	r12, 0x04F2
     d7a:	d0 90 f3 04 	lds	r13, 0x04F3
	float moveX = rtIR - ltIR;
     d7e:	e0 90 19 06 	lds	r14, 0x0619
     d82:	f0 90 1a 06 	lds	r15, 0x061A
     d86:	00 91 1b 06 	lds	r16, 0x061B
     d8a:	10 91 1c 06 	lds	r17, 0x061C
     d8e:	80 91 14 06 	lds	r24, 0x0614
     d92:	90 91 15 06 	lds	r25, 0x0615
     d96:	a0 91 16 06 	lds	r26, 0x0616
     d9a:	b0 91 17 06 	lds	r27, 0x0617
     d9e:	89 83       	std	Y+1, r24	; 0x01
     da0:	9a 83       	std	Y+2, r25	; 0x02
     da2:	ab 83       	std	Y+3, r26	; 0x03
     da4:	bc 83       	std	Y+4, r27	; 0x04
     da6:	c8 01       	movw	r24, r16
     da8:	b7 01       	movw	r22, r14
     daa:	29 81       	ldd	r18, Y+1	; 0x01
     dac:	3a 81       	ldd	r19, Y+2	; 0x02
     dae:	4b 81       	ldd	r20, Y+3	; 0x03
     db0:	5c 81       	ldd	r21, Y+4	; 0x04
     db2:	0e 94 10 2a 	call	0x5420	; 0x5420 <__subsf3>
     db6:	1b 01       	movw	r2, r22
     db8:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
     dba:	c4 01       	movw	r24, r8
     dbc:	b3 01       	movw	r22, r6
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	40 ee       	ldi	r20, 0xE0	; 224
     dc4:	50 e4       	ldi	r21, 0x40	; 64
     dc6:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
     dca:	87 fd       	sbrc	r24, 7
     dcc:	0b c0       	rjmp	.+22     	; 0xde4 <moveAway+0xb2>
     dce:	c6 01       	movw	r24, r12
     dd0:	b5 01       	movw	r22, r10
     dd2:	20 e0       	ldi	r18, 0x00	; 0
     dd4:	30 e0       	ldi	r19, 0x00	; 0
     dd6:	40 ee       	ldi	r20, 0xE0	; 224
     dd8:	50 e4       	ldi	r21, 0x40	; 64
     dda:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
     dde:	88 23       	and	r24, r24
     de0:	0c f0       	brlt	.+2      	; 0xde4 <moveAway+0xb2>
     de2:	68 c0       	rjmp	.+208    	; 0xeb4 <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
     de4:	c4 01       	movw	r24, r8
     de6:	b3 01       	movw	r22, r6
     de8:	a6 01       	movw	r20, r12
     dea:	95 01       	movw	r18, r10
     dec:	0e 94 10 2a 	call	0x5420	; 0x5420 <__subsf3>
     df0:	7b 01       	movw	r14, r22
     df2:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
     df4:	77 24       	eor	r7, r7
     df6:	20 e0       	ldi	r18, 0x00	; 0
     df8:	30 e0       	ldi	r19, 0x00	; 0
     dfa:	40 e0       	ldi	r20, 0x00	; 0
     dfc:	50 e0       	ldi	r21, 0x00	; 0
     dfe:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__gesf2>
     e02:	88 23       	and	r24, r24
     e04:	14 f0       	brlt	.+4      	; 0xe0a <moveAway+0xd8>
     e06:	77 24       	eor	r7, r7
     e08:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     e0a:	c8 01       	movw	r24, r16
     e0c:	b7 01       	movw	r22, r14
     e0e:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__fixsfsi>
     e12:	9b 01       	movw	r18, r22
     e14:	77 ff       	sbrs	r23, 7
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <moveAway+0xec>
     e18:	30 95       	com	r19
     e1a:	21 95       	neg	r18
     e1c:	3f 4f       	sbci	r19, 0xFF	; 255
     e1e:	b9 01       	movw	r22, r18
     e20:	88 27       	eor	r24, r24
     e22:	77 fd       	sbrc	r23, 7
     e24:	80 95       	com	r24
     e26:	98 2f       	mov	r25, r24
     e28:	0e 94 14 2b 	call	0x5628	; 0x5628 <__floatsisf>
     e2c:	6b 01       	movw	r12, r22
     e2e:	7c 01       	movw	r14, r24
     e30:	ad b7       	in	r26, 0x3d	; 61
     e32:	be b7       	in	r27, 0x3e	; 62
     e34:	19 97       	sbiw	r26, 0x09	; 9
     e36:	0f b6       	in	r0, 0x3f	; 63
     e38:	f8 94       	cli
     e3a:	be bf       	out	0x3e, r27	; 62
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	ad bf       	out	0x3d, r26	; 61
     e40:	0d b7       	in	r16, 0x3d	; 61
     e42:	1e b7       	in	r17, 0x3e	; 62
     e44:	0f 5f       	subi	r16, 0xFF	; 255
     e46:	1f 4f       	sbci	r17, 0xFF	; 255
     e48:	a2 01       	movw	r20, r4
     e4a:	91 01       	movw	r18, r2
     e4c:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
     e50:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
     e54:	4b 01       	movw	r8, r22
     e56:	5c 01       	movw	r10, r24
     e58:	82 e3       	ldi	r24, 0x32	; 50
     e5a:	90 e0       	ldi	r25, 0x00	; 0
     e5c:	f8 01       	movw	r30, r16
     e5e:	91 83       	std	Z+1, r25	; 0x01
     e60:	80 83       	st	Z, r24
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	a2 01       	movw	r20, r4
     e68:	91 01       	movw	r18, r2
     e6a:	0e 94 10 2a 	call	0x5420	; 0x5420 <__subsf3>
     e6e:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
     e72:	d8 01       	movw	r26, r16
     e74:	13 96       	adiw	r26, 0x03	; 3
     e76:	7c 93       	st	X, r23
     e78:	6e 93       	st	-X, r22
     e7a:	12 97       	sbiw	r26, 0x02	; 2
     e7c:	82 ec       	ldi	r24, 0xC2	; 194
     e7e:	91 e0       	ldi	r25, 0x01	; 1
     e80:	15 96       	adiw	r26, 0x05	; 5
     e82:	9c 93       	st	X, r25
     e84:	8e 93       	st	-X, r24
     e86:	14 97       	sbiw	r26, 0x04	; 4
     e88:	16 96       	adiw	r26, 0x06	; 6
     e8a:	1c 92       	st	X, r1
     e8c:	16 97       	sbiw	r26, 0x06	; 6
     e8e:	18 96       	adiw	r26, 0x08	; 8
     e90:	1c 92       	st	X, r1
     e92:	1e 92       	st	-X, r1
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	81 e0       	ldi	r24, 0x01	; 1
     e98:	62 e0       	ldi	r22, 0x02	; 2
     e9a:	47 2d       	mov	r20, r7
     e9c:	22 e3       	ldi	r18, 0x32	; 50
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	84 01       	movw	r16, r8
     ea2:	72 ec       	ldi	r23, 0xC2	; 194
     ea4:	e7 2e       	mov	r14, r23
     ea6:	71 e0       	ldi	r23, 0x01	; 1
     ea8:	f7 2e       	mov	r15, r23
     eaa:	cc 24       	eor	r12, r12
     eac:	aa 24       	eor	r10, r10
     eae:	bb 24       	eor	r11, r11
     eb0:	87 2c       	mov	r8, r7
     eb2:	82 c0       	rjmp	.+260    	; 0xfb8 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
     eb4:	c8 01       	movw	r24, r16
     eb6:	b7 01       	movw	r22, r14
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	40 e2       	ldi	r20, 0x20	; 32
     ebe:	51 e4       	ldi	r21, 0x41	; 65
     ec0:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
     ec4:	88 23       	and	r24, r24
     ec6:	b4 f5       	brge	.+108    	; 0xf34 <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     ec8:	c2 01       	movw	r24, r4
     eca:	b1 01       	movw	r22, r2
     ecc:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__fixsfsi>
     ed0:	8b 01       	movw	r16, r22
     ed2:	77 ff       	sbrs	r23, 7
     ed4:	03 c0       	rjmp	.+6      	; 0xedc <moveAway+0x1aa>
     ed6:	10 95       	com	r17
     ed8:	01 95       	neg	r16
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	2d b7       	in	r18, 0x3d	; 61
     ede:	3e b7       	in	r19, 0x3e	; 62
     ee0:	29 50       	subi	r18, 0x09	; 9
     ee2:	30 40       	sbci	r19, 0x00	; 0
     ee4:	0f b6       	in	r0, 0x3f	; 63
     ee6:	f8 94       	cli
     ee8:	3e bf       	out	0x3e, r19	; 62
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	2d bf       	out	0x3d, r18	; 61
     eee:	ed b7       	in	r30, 0x3d	; 61
     ef0:	fe b7       	in	r31, 0x3e	; 62
     ef2:	31 96       	adiw	r30, 0x01	; 1
     ef4:	88 ec       	ldi	r24, 0xC8	; 200
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	ad b7       	in	r26, 0x3d	; 61
     efa:	be b7       	in	r27, 0x3e	; 62
     efc:	12 96       	adiw	r26, 0x02	; 2
     efe:	9c 93       	st	X, r25
     f00:	8e 93       	st	-X, r24
     f02:	11 97       	sbiw	r26, 0x01	; 1
     f04:	13 83       	std	Z+3, r17	; 0x03
     f06:	02 83       	std	Z+2, r16	; 0x02
     f08:	82 ec       	ldi	r24, 0xC2	; 194
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	95 83       	std	Z+5, r25	; 0x05
     f0e:	84 83       	std	Z+4, r24	; 0x04
     f10:	16 82       	std	Z+6, r1	; 0x06
     f12:	10 86       	std	Z+8, r1	; 0x08
     f14:	17 82       	std	Z+7, r1	; 0x07
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	62 e0       	ldi	r22, 0x02	; 2
     f1a:	40 e0       	ldi	r20, 0x00	; 0
     f1c:	28 ec       	ldi	r18, 0xC8	; 200
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	52 ec       	ldi	r21, 0xC2	; 194
     f22:	e5 2e       	mov	r14, r21
     f24:	51 e0       	ldi	r21, 0x01	; 1
     f26:	f5 2e       	mov	r15, r21
     f28:	cc 24       	eor	r12, r12
     f2a:	aa 24       	eor	r10, r10
     f2c:	bb 24       	eor	r11, r11
     f2e:	88 24       	eor	r8, r8
     f30:	83 94       	inc	r8
     f32:	42 c0       	rjmp	.+132    	; 0xfb8 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
     f34:	69 81       	ldd	r22, Y+1	; 0x01
     f36:	7a 81       	ldd	r23, Y+2	; 0x02
     f38:	8b 81       	ldd	r24, Y+3	; 0x03
     f3a:	9c 81       	ldd	r25, Y+4	; 0x04
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e2       	ldi	r20, 0x20	; 32
     f42:	51 e4       	ldi	r21, 0x41	; 65
     f44:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
     f48:	87 fd       	sbrc	r24, 7
     f4a:	02 c0       	rjmp	.+4      	; 0xf50 <moveAway+0x21e>
     f4c:	80 e0       	ldi	r24, 0x00	; 0
     f4e:	3f c0       	rjmp	.+126    	; 0xfce <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     f50:	c2 01       	movw	r24, r4
     f52:	b1 01       	movw	r22, r2
     f54:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__fixsfsi>
     f58:	8b 01       	movw	r16, r22
     f5a:	77 ff       	sbrs	r23, 7
     f5c:	03 c0       	rjmp	.+6      	; 0xf64 <moveAway+0x232>
     f5e:	10 95       	com	r17
     f60:	01 95       	neg	r16
     f62:	1f 4f       	sbci	r17, 0xFF	; 255
     f64:	2d b7       	in	r18, 0x3d	; 61
     f66:	3e b7       	in	r19, 0x3e	; 62
     f68:	29 50       	subi	r18, 0x09	; 9
     f6a:	30 40       	sbci	r19, 0x00	; 0
     f6c:	0f b6       	in	r0, 0x3f	; 63
     f6e:	f8 94       	cli
     f70:	3e bf       	out	0x3e, r19	; 62
     f72:	0f be       	out	0x3f, r0	; 63
     f74:	2d bf       	out	0x3d, r18	; 61
     f76:	ed b7       	in	r30, 0x3d	; 61
     f78:	fe b7       	in	r31, 0x3e	; 62
     f7a:	31 96       	adiw	r30, 0x01	; 1
     f7c:	88 ec       	ldi	r24, 0xC8	; 200
     f7e:	90 e0       	ldi	r25, 0x00	; 0
     f80:	ad b7       	in	r26, 0x3d	; 61
     f82:	be b7       	in	r27, 0x3e	; 62
     f84:	12 96       	adiw	r26, 0x02	; 2
     f86:	9c 93       	st	X, r25
     f88:	8e 93       	st	-X, r24
     f8a:	11 97       	sbiw	r26, 0x01	; 1
     f8c:	13 83       	std	Z+3, r17	; 0x03
     f8e:	02 83       	std	Z+2, r16	; 0x02
     f90:	82 ec       	ldi	r24, 0xC2	; 194
     f92:	91 e0       	ldi	r25, 0x01	; 1
     f94:	95 83       	std	Z+5, r25	; 0x05
     f96:	84 83       	std	Z+4, r24	; 0x04
     f98:	16 82       	std	Z+6, r1	; 0x06
     f9a:	10 86       	std	Z+8, r1	; 0x08
     f9c:	17 82       	std	Z+7, r1	; 0x07
     f9e:	81 e0       	ldi	r24, 0x01	; 1
     fa0:	62 e0       	ldi	r22, 0x02	; 2
     fa2:	41 e0       	ldi	r20, 0x01	; 1
     fa4:	28 ec       	ldi	r18, 0xC8	; 200
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	92 ec       	ldi	r25, 0xC2	; 194
     faa:	e9 2e       	mov	r14, r25
     fac:	91 e0       	ldi	r25, 0x01	; 1
     fae:	f9 2e       	mov	r15, r25
     fb0:	cc 24       	eor	r12, r12
     fb2:	aa 24       	eor	r10, r10
     fb4:	bb 24       	eor	r11, r11
     fb6:	88 24       	eor	r8, r8
     fb8:	0e 94 3a 1a 	call	0x3474	; 0x3474 <STEPPER_move>
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	ed b7       	in	r30, 0x3d	; 61
     fc0:	fe b7       	in	r31, 0x3e	; 62
     fc2:	39 96       	adiw	r30, 0x09	; 9
     fc4:	0f b6       	in	r0, 0x3f	; 63
     fc6:	f8 94       	cli
     fc8:	fe bf       	out	0x3e, r31	; 62
     fca:	0f be       	out	0x3f, r0	; 63
     fcc:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
     fce:	0f 90       	pop	r0
     fd0:	0f 90       	pop	r0
     fd2:	0f 90       	pop	r0
     fd4:	0f 90       	pop	r0
     fd6:	cf 91       	pop	r28
     fd8:	df 91       	pop	r29
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	df 90       	pop	r13
     fe4:	cf 90       	pop	r12
     fe6:	bf 90       	pop	r11
     fe8:	af 90       	pop	r10
     fea:	9f 90       	pop	r9
     fec:	8f 90       	pop	r8
     fee:	7f 90       	pop	r7
     ff0:	6f 90       	pop	r6
     ff2:	5f 90       	pop	r5
     ff4:	4f 90       	pop	r4
     ff6:	3f 90       	pop	r3
     ff8:	2f 90       	pop	r2
     ffa:	08 95       	ret

00000ffc <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
     ffc:	8f 92       	push	r8
     ffe:	af 92       	push	r10
    1000:	bf 92       	push	r11
    1002:	cf 92       	push	r12
    1004:	df 92       	push	r13
    1006:	ef 92       	push	r14
    1008:	ff 92       	push	r15
    100a:	0f 93       	push	r16
    100c:	1f 93       	push	r17
    100e:	cf 93       	push	r28
    1010:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    1012:	0e 94 72 19 	call	0x32e4	; 0x32e4 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    1016:	67 2b       	or	r22, r23
    1018:	09 f0       	breq	.+2      	; 0x101c <moveWander+0x20>
    101a:	76 c0       	rjmp	.+236    	; 0x1108 <moveWander+0x10c>
    101c:	89 2b       	or	r24, r25
    101e:	09 f0       	breq	.+2      	; 0x1022 <moveWander+0x26>
    1020:	73 c0       	rjmp	.+230    	; 0x1108 <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    1022:	0e 94 20 33 	call	0x6640	; 0x6640 <rand>
    1026:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    1028:	0e 94 20 33 	call	0x6640	; 0x6640 <rand>
    102c:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    102e:	0e 94 20 33 	call	0x6640	; 0x6640 <rand>
    1032:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    1034:	0e 94 20 33 	call	0x6640	; 0x6640 <rand>
    1038:	20 e0       	ldi	r18, 0x00	; 0
    103a:	6a e0       	ldi	r22, 0x0A	; 10
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	0e 94 51 31 	call	0x62a2	; 0x62a2 <__divmodhi4>
    1042:	08 97       	sbiw	r24, 0x08	; 8
    1044:	0c f0       	brlt	.+2      	; 0x1048 <moveWander+0x4c>
    1046:	21 e0       	ldi	r18, 0x01	; 1
    1048:	82 2e       	mov	r8, r18
    104a:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    104c:	c8 01       	movw	r24, r16
    104e:	60 e9       	ldi	r22, 0x90	; 144
    1050:	71 e0       	ldi	r23, 0x01	; 1
    1052:	0e 94 51 31 	call	0x62a2	; 0x62a2 <__divmodhi4>
    1056:	f0 e9       	ldi	r31, 0x90	; 144
    1058:	af 2e       	mov	r10, r31
    105a:	f1 e0       	ldi	r31, 0x01	; 1
    105c:	bf 2e       	mov	r11, r31
    105e:	a8 0e       	add	r10, r24
    1060:	b9 1e       	adc	r11, r25
    1062:	8d b7       	in	r24, 0x3d	; 61
    1064:	9e b7       	in	r25, 0x3e	; 62
    1066:	09 97       	sbiw	r24, 0x09	; 9
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	9e bf       	out	0x3e, r25	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	8d bf       	out	0x3d, r24	; 61
    1072:	0d b7       	in	r16, 0x3d	; 61
    1074:	1e b7       	in	r17, 0x3e	; 62
    1076:	0f 5f       	subi	r16, 0xFF	; 255
    1078:	1f 4f       	sbci	r17, 0xFF	; 255
    107a:	c7 01       	movw	r24, r14
    107c:	68 ec       	ldi	r22, 0xC8	; 200
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	0e 94 51 31 	call	0x62a2	; 0x62a2 <__divmodhi4>
    1084:	88 53       	subi	r24, 0x38	; 56
    1086:	9f 4f       	sbci	r25, 0xFF	; 255
    1088:	aa 27       	eor	r26, r26
    108a:	97 fd       	sbrc	r25, 7
    108c:	a0 95       	com	r26
    108e:	ba 2f       	mov	r27, r26
    1090:	bc 01       	movw	r22, r24
    1092:	cd 01       	movw	r24, r26
    1094:	0e 94 14 2b 	call	0x5628	; 0x5628 <__floatsisf>
    1098:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    109c:	6b 01       	movw	r12, r22
    109e:	7c 01       	movw	r14, r24
    10a0:	f8 01       	movw	r30, r16
    10a2:	b1 82       	std	Z+1, r11	; 0x01
    10a4:	a0 82       	st	Z, r10
    10a6:	ce 01       	movw	r24, r28
    10a8:	68 ec       	ldi	r22, 0xC8	; 200
    10aa:	70 e0       	ldi	r23, 0x00	; 0
    10ac:	0e 94 51 31 	call	0x62a2	; 0x62a2 <__divmodhi4>
    10b0:	88 53       	subi	r24, 0x38	; 56
    10b2:	9f 4f       	sbci	r25, 0xFF	; 255
    10b4:	aa 27       	eor	r26, r26
    10b6:	97 fd       	sbrc	r25, 7
    10b8:	a0 95       	com	r26
    10ba:	ba 2f       	mov	r27, r26
    10bc:	bc 01       	movw	r22, r24
    10be:	cd 01       	movw	r24, r26
    10c0:	0e 94 14 2b 	call	0x5628	; 0x5628 <__floatsisf>
    10c4:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    10c8:	f8 01       	movw	r30, r16
    10ca:	73 83       	std	Z+3, r23	; 0x03
    10cc:	62 83       	std	Z+2, r22	; 0x02
    10ce:	82 ec       	ldi	r24, 0xC2	; 194
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	95 83       	std	Z+5, r25	; 0x05
    10d4:	84 83       	std	Z+4, r24	; 0x04
    10d6:	16 82       	std	Z+6, r1	; 0x06
    10d8:	10 86       	std	Z+8, r1	; 0x08
    10da:	17 82       	std	Z+7, r1	; 0x07
    10dc:	81 e0       	ldi	r24, 0x01	; 1
    10de:	62 e0       	ldi	r22, 0x02	; 2
    10e0:	48 2d       	mov	r20, r8
    10e2:	95 01       	movw	r18, r10
    10e4:	86 01       	movw	r16, r12
    10e6:	e2 ec       	ldi	r30, 0xC2	; 194
    10e8:	ee 2e       	mov	r14, r30
    10ea:	e1 e0       	ldi	r30, 0x01	; 1
    10ec:	fe 2e       	mov	r15, r30
    10ee:	cc 24       	eor	r12, r12
    10f0:	aa 24       	eor	r10, r10
    10f2:	bb 24       	eor	r11, r11
    10f4:	0e 94 3a 1a 	call	0x3474	; 0x3474 <STEPPER_move>
    10f8:	8d b7       	in	r24, 0x3d	; 61
    10fa:	9e b7       	in	r25, 0x3e	; 62
    10fc:	09 96       	adiw	r24, 0x09	; 9
    10fe:	0f b6       	in	r0, 0x3f	; 63
    1100:	f8 94       	cli
    1102:	9e bf       	out	0x3e, r25	; 62
    1104:	0f be       	out	0x3f, r0	; 63
    1106:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	df 91       	pop	r29
    110c:	cf 91       	pop	r28
    110e:	1f 91       	pop	r17
    1110:	0f 91       	pop	r16
    1112:	ff 90       	pop	r15
    1114:	ef 90       	pop	r14
    1116:	df 90       	pop	r13
    1118:	cf 90       	pop	r12
    111a:	bf 90       	pop	r11
    111c:	af 90       	pop	r10
    111e:	8f 90       	pop	r8
    1120:	08 95       	ret

00001122 <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    1122:	2f 92       	push	r2
    1124:	3f 92       	push	r3
    1126:	4f 92       	push	r4
    1128:	5f 92       	push	r5
    112a:	6f 92       	push	r6
    112c:	7f 92       	push	r7
    112e:	8f 92       	push	r8
    1130:	9f 92       	push	r9
    1132:	af 92       	push	r10
    1134:	bf 92       	push	r11
    1136:	cf 92       	push	r12
    1138:	df 92       	push	r13
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    1142:	e0 90 e6 04 	lds	r14, 0x04E6
    1146:	f0 90 e7 04 	lds	r15, 0x04E7
    114a:	00 91 e8 04 	lds	r16, 0x04E8
    114e:	10 91 e9 04 	lds	r17, 0x04E9
    1152:	33 24       	eor	r3, r3
    1154:	c8 01       	movw	r24, r16
    1156:	b7 01       	movw	r22, r14
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e0       	ldi	r20, 0x00	; 0
    115e:	50 e0       	ldi	r21, 0x00	; 0
    1160:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
    1164:	88 23       	and	r24, r24
    1166:	14 f4       	brge	.+4      	; 0x116c <moveWall+0x4a>
    1168:	33 24       	eor	r3, r3
    116a:	33 94       	inc	r3
    116c:	a0 90 19 06 	lds	r10, 0x0619
    1170:	b0 90 1a 06 	lds	r11, 0x061A
    1174:	c0 90 1b 06 	lds	r12, 0x061B
    1178:	d0 90 1c 06 	lds	r13, 0x061C
    117c:	40 90 14 06 	lds	r4, 0x0614
    1180:	50 90 15 06 	lds	r5, 0x0615
    1184:	60 90 16 06 	lds	r6, 0x0616
    1188:	70 90 17 06 	lds	r7, 0x0617
    118c:	88 24       	eor	r8, r8
    118e:	60 91 f0 04 	lds	r22, 0x04F0
    1192:	70 91 f1 04 	lds	r23, 0x04F1
    1196:	80 91 f2 04 	lds	r24, 0x04F2
    119a:	90 91 f3 04 	lds	r25, 0x04F3
    119e:	20 e0       	ldi	r18, 0x00	; 0
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	40 e7       	ldi	r20, 0x70	; 112
    11a4:	51 e4       	ldi	r21, 0x41	; 65
    11a6:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
    11aa:	88 23       	and	r24, r24
    11ac:	14 f4       	brge	.+4      	; 0x11b2 <moveWall+0x90>
    11ae:	88 24       	eor	r8, r8
    11b0:	83 94       	inc	r8
    11b2:	93 2c       	mov	r9, r3
    11b4:	98 28       	or	r9, r8
    11b6:	88 24       	eor	r8, r8
    11b8:	c6 01       	movw	r24, r12
    11ba:	b5 01       	movw	r22, r10
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e2       	ldi	r20, 0x20	; 32
    11c2:	51 e4       	ldi	r21, 0x41	; 65
    11c4:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	14 f4       	brge	.+4      	; 0x11d0 <moveWall+0xae>
    11cc:	88 24       	eor	r8, r8
    11ce:	83 94       	inc	r8
    11d0:	98 28       	or	r9, r8
    11d2:	88 24       	eor	r8, r8
    11d4:	c3 01       	movw	r24, r6
    11d6:	b2 01       	movw	r22, r4
    11d8:	20 e0       	ldi	r18, 0x00	; 0
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	40 e2       	ldi	r20, 0x20	; 32
    11de:	51 e4       	ldi	r21, 0x41	; 65
    11e0:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
    11e4:	88 23       	and	r24, r24
    11e6:	14 f4       	brge	.+4      	; 0x11ec <moveWall+0xca>
    11e8:	88 24       	eor	r8, r8
    11ea:	83 94       	inc	r8
    11ec:	29 2c       	mov	r2, r9
    11ee:	28 28       	or	r2, r8
	if(!isWall){	
    11f0:	81 f4       	brne	.+32     	; 0x1212 <moveWall+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	9f e4       	ldi	r25, 0x4F	; 79
    11fa:	20 e0       	ldi	r18, 0x00	; 0
    11fc:	30 e0       	ldi	r19, 0x00	; 0
    11fe:	40 e2       	ldi	r20, 0x20	; 32
    1200:	51 e4       	ldi	r21, 0x41	; 65
    1202:	79 01       	movw	r14, r18
    1204:	8a 01       	movw	r16, r20
    1206:	59 01       	movw	r10, r18
    1208:	6a 01       	movw	r12, r20
    120a:	88 24       	eor	r8, r8
    120c:	0e 94 11 11 	call	0x2222	; 0x2222 <move_arc_stnb>
    1210:	0f c1       	rjmp	.+542    	; 0x1430 <moveWall+0x30e>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    1212:	c6 01       	movw	r24, r12
    1214:	b5 01       	movw	r22, r10
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e2       	ldi	r20, 0x20	; 32
    121c:	51 e4       	ldi	r21, 0x41	; 65
    121e:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__gesf2>
    1222:	18 16       	cp	r1, r24
    1224:	64 f4       	brge	.+24     	; 0x123e <moveWall+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	a0 e0       	ldi	r26, 0x00	; 0
    122c:	b1 ec       	ldi	r27, 0xC1	; 193
    122e:	80 93 19 06 	sts	0x0619, r24
    1232:	90 93 1a 06 	sts	0x061A, r25
    1236:	a0 93 1b 06 	sts	0x061B, r26
    123a:	b0 93 1c 06 	sts	0x061C, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    123e:	c3 01       	movw	r24, r6
    1240:	b2 01       	movw	r22, r4
    1242:	20 e0       	ldi	r18, 0x00	; 0
    1244:	30 e0       	ldi	r19, 0x00	; 0
    1246:	40 e2       	ldi	r20, 0x20	; 32
    1248:	51 e4       	ldi	r21, 0x41	; 65
    124a:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__gesf2>
    124e:	18 16       	cp	r1, r24
    1250:	14 f0       	brlt	.+4      	; 0x1256 <moveWall+0x134>
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	0d c0       	rjmp	.+26     	; 0x1270 <moveWall+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    1256:	80 e0       	ldi	r24, 0x00	; 0
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a0 e0       	ldi	r26, 0x00	; 0
    125c:	b1 ec       	ldi	r27, 0xC1	; 193
    125e:	80 93 14 06 	sts	0x0614, r24
    1262:	90 93 15 06 	sts	0x0615, r25
    1266:	a0 93 16 06 	sts	0x0616, r26
    126a:	b0 93 17 06 	sts	0x0617, r27
    126e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    1270:	33 20       	and	r3, r3
    1272:	21 f1       	breq	.+72     	; 0x12bc <moveWall+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    1274:	88 23       	and	r24, r24
    1276:	29 f0       	breq	.+10     	; 0x1282 <moveWall+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    1278:	60 e0       	ldi	r22, 0x00	; 0
    127a:	70 e0       	ldi	r23, 0x00	; 0
    127c:	8a e7       	ldi	r24, 0x7A	; 122
    127e:	94 e4       	ldi	r25, 0x44	; 68
    1280:	04 c0       	rjmp	.+8      	; 0x128a <moveWall+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	8a e7       	ldi	r24, 0x7A	; 122
    1288:	94 ec       	ldi	r25, 0xC4	; 196
    128a:	a8 01       	movw	r20, r16
    128c:	97 01       	movw	r18, r14
    128e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    1292:	20 91 14 06 	lds	r18, 0x0614
    1296:	30 91 15 06 	lds	r19, 0x0615
    129a:	40 91 16 06 	lds	r20, 0x0616
    129e:	50 91 17 06 	lds	r21, 0x0617
    12a2:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    12a6:	9b 01       	movw	r18, r22
    12a8:	ac 01       	movw	r20, r24
    12aa:	60 91 19 06 	lds	r22, 0x0619
    12ae:	70 91 1a 06 	lds	r23, 0x061A
    12b2:	80 91 1b 06 	lds	r24, 0x061B
    12b6:	90 91 1c 06 	lds	r25, 0x061C
    12ba:	10 c0       	rjmp	.+32     	; 0x12dc <moveWall+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    12bc:	60 91 19 06 	lds	r22, 0x0619
    12c0:	70 91 1a 06 	lds	r23, 0x061A
    12c4:	80 91 1b 06 	lds	r24, 0x061B
    12c8:	90 91 1c 06 	lds	r25, 0x061C
    12cc:	20 91 14 06 	lds	r18, 0x0614
    12d0:	30 91 15 06 	lds	r19, 0x0615
    12d4:	40 91 16 06 	lds	r20, 0x0616
    12d8:	50 91 17 06 	lds	r21, 0x0617
    12dc:	0e 94 10 2a 	call	0x5420	; 0x5420 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    12e0:	90 58       	subi	r25, 0x80	; 128
    12e2:	40 e0       	ldi	r20, 0x00	; 0
    12e4:	0e 94 9d 10 	call	0x213a	; 0x213a <pidController>
    12e8:	6b 01       	movw	r12, r22
    12ea:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    12ec:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__fixsfsi>
    12f0:	8b 01       	movw	r16, r22
    12f2:	77 ff       	sbrs	r23, 7
    12f4:	03 c0       	rjmp	.+6      	; 0x12fc <moveWall+0x1da>
    12f6:	10 95       	com	r17
    12f8:	01 95       	neg	r16
    12fa:	1f 4f       	sbci	r17, 0xFF	; 255
    12fc:	05 36       	cpi	r16, 0x65	; 101
    12fe:	11 05       	cpc	r17, r1
    1300:	fc f0       	brlt	.+62     	; 0x1340 <moveWall+0x21e>
    1302:	c7 01       	movw	r24, r14
    1304:	b6 01       	movw	r22, r12
    1306:	20 e0       	ldi	r18, 0x00	; 0
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
    1312:	88 23       	and	r24, r24
    1314:	a9 f0       	breq	.+42     	; 0x1340 <moveWall+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    1316:	b8 01       	movw	r22, r16
    1318:	88 27       	eor	r24, r24
    131a:	77 fd       	sbrc	r23, 7
    131c:	80 95       	com	r24
    131e:	98 2f       	mov	r25, r24
    1320:	0e 94 14 2b 	call	0x5628	; 0x5628 <__floatsisf>
    1324:	9b 01       	movw	r18, r22
    1326:	ac 01       	movw	r20, r24
    1328:	c7 01       	movw	r24, r14
    132a:	b6 01       	movw	r22, r12
    132c:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	48 ec       	ldi	r20, 0xC8	; 200
    1336:	52 e4       	ldi	r21, 0x42	; 66
    1338:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    133c:	6b 01       	movw	r12, r22
    133e:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    1340:	c7 01       	movw	r24, r14
    1342:	b6 01       	movw	r22, r12
    1344:	20 e0       	ldi	r18, 0x00	; 0
    1346:	30 e0       	ldi	r19, 0x00	; 0
    1348:	48 ec       	ldi	r20, 0xC8	; 200
    134a:	52 e4       	ldi	r21, 0x42	; 66
    134c:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    1350:	6b 01       	movw	r12, r22
    1352:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
    1354:	0e 94 72 19 	call	0x32e4	; 0x32e4 <STEPPER_get_nSteps>
    1358:	60 93 0c 06 	sts	0x060C, r22
    135c:	70 93 0d 06 	sts	0x060D, r23
    1360:	80 93 0e 06 	sts	0x060E, r24
    1364:	90 93 0f 06 	sts	0x060F, r25
	odometryStepL += WALL_STEP - curr_step.left;
    1368:	80 91 a6 06 	lds	r24, 0x06A6
    136c:	8e 5c       	subi	r24, 0xCE	; 206
    136e:	86 1b       	sub	r24, r22
    1370:	80 93 a6 06 	sts	0x06A6, r24
	odometryStepR += WALL_STEP - curr_step.right;
    1374:	80 91 6c 04 	lds	r24, 0x046C
    1378:	8e 5c       	subi	r24, 0xCE	; 206
    137a:	90 91 0e 06 	lds	r25, 0x060E
    137e:	89 1b       	sub	r24, r25
    1380:	80 93 6c 04 	sts	0x046C, r24
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    1384:	8d b7       	in	r24, 0x3d	; 61
    1386:	9e b7       	in	r25, 0x3e	; 62
    1388:	09 97       	sbiw	r24, 0x09	; 9
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	9e bf       	out	0x3e, r25	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	8d bf       	out	0x3d, r24	; 61
    1394:	0d b7       	in	r16, 0x3d	; 61
    1396:	1e b7       	in	r17, 0x3e	; 62
    1398:	0f 5f       	subi	r16, 0xFF	; 255
    139a:	1f 4f       	sbci	r17, 0xFF	; 255
    139c:	c7 01       	movw	r24, r14
    139e:	b6 01       	movw	r22, r12
    13a0:	20 e0       	ldi	r18, 0x00	; 0
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	48 ec       	ldi	r20, 0xC8	; 200
    13a6:	52 e4       	ldi	r21, 0x42	; 66
    13a8:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    13ac:	20 e0       	ldi	r18, 0x00	; 0
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	48 ec       	ldi	r20, 0xC8	; 200
    13b2:	52 e4       	ldi	r21, 0x42	; 66
    13b4:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    13b8:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    13bc:	4b 01       	movw	r8, r22
    13be:	5c 01       	movw	r10, r24
    13c0:	82 e3       	ldi	r24, 0x32	; 50
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	f8 01       	movw	r30, r16
    13c6:	91 83       	std	Z+1, r25	; 0x01
    13c8:	80 83       	st	Z, r24
    13ca:	c7 01       	movw	r24, r14
    13cc:	b6 01       	movw	r22, r12
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	48 ec       	ldi	r20, 0xC8	; 200
    13d4:	52 ec       	ldi	r21, 0xC2	; 194
    13d6:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	48 ec       	ldi	r20, 0xC8	; 200
    13e0:	52 e4       	ldi	r21, 0x42	; 66
    13e2:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    13e6:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    13ea:	f8 01       	movw	r30, r16
    13ec:	73 83       	std	Z+3, r23	; 0x03
    13ee:	62 83       	std	Z+2, r22	; 0x02
    13f0:	82 ec       	ldi	r24, 0xC2	; 194
    13f2:	91 e0       	ldi	r25, 0x01	; 1
    13f4:	95 83       	std	Z+5, r25	; 0x05
    13f6:	84 83       	std	Z+4, r24	; 0x04
    13f8:	16 82       	std	Z+6, r1	; 0x06
    13fa:	10 86       	std	Z+8, r1	; 0x08
    13fc:	17 82       	std	Z+7, r1	; 0x07
    13fe:	81 e0       	ldi	r24, 0x01	; 1
    1400:	62 e0       	ldi	r22, 0x02	; 2
    1402:	41 e0       	ldi	r20, 0x01	; 1
    1404:	22 e3       	ldi	r18, 0x32	; 50
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	84 01       	movw	r16, r8
    140a:	a2 ec       	ldi	r26, 0xC2	; 194
    140c:	ea 2e       	mov	r14, r26
    140e:	a1 e0       	ldi	r26, 0x01	; 1
    1410:	fa 2e       	mov	r15, r26
    1412:	cc 24       	eor	r12, r12
    1414:	aa 24       	eor	r10, r10
    1416:	bb 24       	eor	r11, r11
    1418:	88 24       	eor	r8, r8
    141a:	83 94       	inc	r8
    141c:	0e 94 3a 1a 	call	0x3474	; 0x3474 <STEPPER_move>
    1420:	8d b7       	in	r24, 0x3d	; 61
    1422:	9e b7       	in	r25, 0x3e	; 62
    1424:	09 96       	adiw	r24, 0x09	; 9
    1426:	0f b6       	in	r0, 0x3f	; 63
    1428:	f8 94       	cli
    142a:	9e bf       	out	0x3e, r25	; 62
    142c:	0f be       	out	0x3f, r0	; 63
    142e:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    1430:	82 2d       	mov	r24, r2
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	ef 90       	pop	r14
    143a:	df 90       	pop	r13
    143c:	cf 90       	pop	r12
    143e:	bf 90       	pop	r11
    1440:	af 90       	pop	r10
    1442:	9f 90       	pop	r9
    1444:	8f 90       	pop	r8
    1446:	7f 90       	pop	r7
    1448:	6f 90       	pop	r6
    144a:	5f 90       	pop	r5
    144c:	4f 90       	pop	r4
    144e:	3f 90       	pop	r3
    1450:	2f 90       	pop	r2
    1452:	08 95       	ret

00001454 <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    1454:	8f 92       	push	r8
    1456:	af 92       	push	r10
    1458:	bf 92       	push	r11
    145a:	cf 92       	push	r12
    145c:	df 92       	push	r13
    145e:	ef 92       	push	r14
    1460:	ff 92       	push	r15
    1462:	0f 93       	push	r16
    1464:	1f 93       	push	r17
	LCD_clear();
    1466:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    146a:	e0 91 ef 04 	lds	r30, 0x04EF
    146e:	f0 e0       	ldi	r31, 0x00	; 0
    1470:	e2 59       	subi	r30, 0x92	; 146
    1472:	fa 4f       	sbci	r31, 0xFA	; 250
    1474:	e0 81       	ld	r30, Z
    1476:	e0 93 6b 04 	sts	0x046B, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	e1 30       	cpi	r30, 0x01	; 1
    147e:	09 f4       	brne	.+2      	; 0x1482 <moveWorld+0x2e>
    1480:	81 e0       	ldi	r24, 0x01	; 1
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	e3 30       	cpi	r30, 0x03	; 3
    1486:	09 f4       	brne	.+2      	; 0x148a <moveWorld+0x36>
    1488:	91 e0       	ldi	r25, 0x01	; 1
    148a:	89 2b       	or	r24, r25
    148c:	28 2f       	mov	r18, r24
    148e:	30 e0       	ldi	r19, 0x00	; 0
    1490:	40 e0       	ldi	r20, 0x00	; 0
    1492:	50 e0       	ldi	r21, 0x00	; 0
    1494:	80 91 6d 04 	lds	r24, 0x046D
    1498:	82 30       	cpi	r24, 0x02	; 2
    149a:	11 f4       	brne	.+4      	; 0x14a0 <moveWorld+0x4c>
    149c:	41 e0       	ldi	r20, 0x01	; 1
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	24 23       	and	r18, r20
    14a2:	35 23       	and	r19, r21
    14a4:	23 2b       	or	r18, r19
    14a6:	b9 f0       	breq	.+46     	; 0x14d6 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    14a8:	60 e0       	ldi	r22, 0x00	; 0
    14aa:	70 e0       	ldi	r23, 0x00	; 0
    14ac:	80 e0       	ldi	r24, 0x00	; 0
    14ae:	9f e4       	ldi	r25, 0x4F	; 79
    14b0:	2d eb       	ldi	r18, 0xBD	; 189
    14b2:	34 e7       	ldi	r19, 0x74	; 116
    14b4:	4b ed       	ldi	r20, 0xDB	; 219
    14b6:	51 e4       	ldi	r21, 0x41	; 65
    14b8:	0f 2e       	mov	r0, r31
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	ef 2e       	mov	r14, r31
    14be:	f0 e0       	ldi	r31, 0x00	; 0
    14c0:	ff 2e       	mov	r15, r31
    14c2:	f0 e2       	ldi	r31, 0x20	; 32
    14c4:	0f 2f       	mov	r16, r31
    14c6:	f1 e4       	ldi	r31, 0x41	; 65
    14c8:	1f 2f       	mov	r17, r31
    14ca:	f0 2d       	mov	r31, r0
    14cc:	57 01       	movw	r10, r14
    14ce:	68 01       	movw	r12, r16
    14d0:	88 24       	eor	r8, r8
    14d2:	0e 94 c1 13 	call	0x2782	; 0x2782 <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    14d6:	20 91 6d 04 	lds	r18, 0x046D
    14da:	80 e0       	ldi	r24, 0x00	; 0
    14dc:	21 30       	cpi	r18, 0x01	; 1
    14de:	09 f4       	brne	.+2      	; 0x14e2 <moveWorld+0x8e>
    14e0:	81 e0       	ldi	r24, 0x01	; 1
    14e2:	90 e0       	ldi	r25, 0x00	; 0
    14e4:	23 30       	cpi	r18, 0x03	; 3
    14e6:	09 f4       	brne	.+2      	; 0x14ea <moveWorld+0x96>
    14e8:	91 e0       	ldi	r25, 0x01	; 1
    14ea:	89 2b       	or	r24, r25
    14ec:	28 2f       	mov	r18, r24
    14ee:	30 e0       	ldi	r19, 0x00	; 0
    14f0:	40 e0       	ldi	r20, 0x00	; 0
    14f2:	50 e0       	ldi	r21, 0x00	; 0
    14f4:	80 91 6b 04 	lds	r24, 0x046B
    14f8:	82 30       	cpi	r24, 0x02	; 2
    14fa:	11 f4       	brne	.+4      	; 0x1500 <moveWorld+0xac>
    14fc:	41 e0       	ldi	r20, 0x01	; 1
    14fe:	50 e0       	ldi	r21, 0x00	; 0
    1500:	24 23       	and	r18, r20
    1502:	35 23       	and	r19, r21
    1504:	23 2b       	or	r18, r19
    1506:	b9 f0       	breq	.+46     	; 0x1536 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	70 e0       	ldi	r23, 0x00	; 0
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	9f e4       	ldi	r25, 0x4F	; 79
    1510:	2d eb       	ldi	r18, 0xBD	; 189
    1512:	34 e7       	ldi	r19, 0x74	; 116
    1514:	4b ed       	ldi	r20, 0xDB	; 219
    1516:	51 e4       	ldi	r21, 0x41	; 65
    1518:	0f 2e       	mov	r0, r31
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	ef 2e       	mov	r14, r31
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	ff 2e       	mov	r15, r31
    1522:	f0 e2       	ldi	r31, 0x20	; 32
    1524:	0f 2f       	mov	r16, r31
    1526:	f1 e4       	ldi	r31, 0x41	; 65
    1528:	1f 2f       	mov	r17, r31
    152a:	f0 2d       	mov	r31, r0
    152c:	57 01       	movw	r10, r14
    152e:	68 01       	movw	r12, r16
    1530:	88 24       	eor	r8, r8
    1532:	0e 94 c1 13 	call	0x2782	; 0x2782 <move_arc_stwt>
	}
	
	switch(currentMove){
    1536:	80 91 6b 04 	lds	r24, 0x046B
    153a:	82 30       	cpi	r24, 0x02	; 2
    153c:	c1 f1       	breq	.+112    	; 0x15ae <moveWorld+0x15a>
    153e:	83 30       	cpi	r24, 0x03	; 3
    1540:	09 f4       	brne	.+2      	; 0x1544 <moveWorld+0xf0>
    1542:	61 c0       	rjmp	.+194    	; 0x1606 <moveWorld+0x1b2>
    1544:	81 30       	cpi	r24, 0x01	; 1
    1546:	09 f0       	breq	.+2      	; 0x154a <moveWorld+0xf6>
    1548:	9f c0       	rjmp	.+318    	; 0x1688 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    154a:	8d b7       	in	r24, 0x3d	; 61
    154c:	9e b7       	in	r25, 0x3e	; 62
    154e:	08 97       	sbiw	r24, 0x08	; 8
    1550:	0f b6       	in	r0, 0x3f	; 63
    1552:	f8 94       	cli
    1554:	9e bf       	out	0x3e, r25	; 62
    1556:	0f be       	out	0x3f, r0	; 63
    1558:	8d bf       	out	0x3d, r24	; 61
    155a:	ed b7       	in	r30, 0x3d	; 61
    155c:	fe b7       	in	r31, 0x3e	; 62
    155e:	31 96       	adiw	r30, 0x01	; 1
    1560:	84 e2       	ldi	r24, 0x24	; 36
    1562:	91 e0       	ldi	r25, 0x01	; 1
    1564:	ad b7       	in	r26, 0x3d	; 61
    1566:	be b7       	in	r27, 0x3e	; 62
    1568:	12 96       	adiw	r26, 0x02	; 2
    156a:	9c 93       	st	X, r25
    156c:	8e 93       	st	-X, r24
    156e:	11 97       	sbiw	r26, 0x01	; 1
    1570:	80 91 ef 04 	lds	r24, 0x04EF
    1574:	82 83       	std	Z+2, r24	; 0x02
    1576:	13 82       	std	Z+3, r1	; 0x03
    1578:	80 91 ee 04 	lds	r24, 0x04EE
    157c:	84 83       	std	Z+4, r24	; 0x04
    157e:	15 82       	std	Z+5, r1	; 0x05
    1580:	80 91 f4 04 	lds	r24, 0x04F4
    1584:	86 83       	std	Z+6, r24	; 0x06
    1586:	17 82       	std	Z+7, r1	; 0x07
    1588:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    158c:	ed b7       	in	r30, 0x3d	; 61
    158e:	fe b7       	in	r31, 0x3e	; 62
    1590:	38 96       	adiw	r30, 0x08	; 8
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	fe bf       	out	0x3e, r31	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	ed bf       	out	0x3d, r30	; 61
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	70 e0       	ldi	r23, 0x00	; 0
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	44 e8       	ldi	r20, 0x84	; 132
    15aa:	51 ec       	ldi	r21, 0xC1	; 193
    15ac:	5d c0       	rjmp	.+186    	; 0x1668 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    15ae:	8d b7       	in	r24, 0x3d	; 61
    15b0:	9e b7       	in	r25, 0x3e	; 62
    15b2:	08 97       	sbiw	r24, 0x08	; 8
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	9e bf       	out	0x3e, r25	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	8d bf       	out	0x3d, r24	; 61
    15be:	ed b7       	in	r30, 0x3d	; 61
    15c0:	fe b7       	in	r31, 0x3e	; 62
    15c2:	31 96       	adiw	r30, 0x01	; 1
    15c4:	8f e4       	ldi	r24, 0x4F	; 79
    15c6:	91 e0       	ldi	r25, 0x01	; 1
    15c8:	ad b7       	in	r26, 0x3d	; 61
    15ca:	be b7       	in	r27, 0x3e	; 62
    15cc:	12 96       	adiw	r26, 0x02	; 2
    15ce:	9c 93       	st	X, r25
    15d0:	8e 93       	st	-X, r24
    15d2:	11 97       	sbiw	r26, 0x01	; 1
    15d4:	80 91 ef 04 	lds	r24, 0x04EF
    15d8:	82 83       	std	Z+2, r24	; 0x02
    15da:	13 82       	std	Z+3, r1	; 0x03
    15dc:	80 91 ee 04 	lds	r24, 0x04EE
    15e0:	84 83       	std	Z+4, r24	; 0x04
    15e2:	15 82       	std	Z+5, r1	; 0x05
    15e4:	80 91 f4 04 	lds	r24, 0x04F4
    15e8:	86 83       	std	Z+6, r24	; 0x06
    15ea:	17 82       	std	Z+7, r1	; 0x07
    15ec:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    15f0:	ed b7       	in	r30, 0x3d	; 61
    15f2:	fe b7       	in	r31, 0x3e	; 62
    15f4:	38 96       	adiw	r30, 0x08	; 8
    15f6:	0f b6       	in	r0, 0x3f	; 63
    15f8:	f8 94       	cli
    15fa:	fe bf       	out	0x3e, r31	; 62
    15fc:	0f be       	out	0x3f, r0	; 63
    15fe:	ed bf       	out	0x3d, r30	; 61
    1600:	0e 94 91 08 	call	0x1122	; 0x1122 <moveWall>
    1604:	53 c0       	rjmp	.+166    	; 0x16ac <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1606:	8d b7       	in	r24, 0x3d	; 61
    1608:	9e b7       	in	r25, 0x3e	; 62
    160a:	08 97       	sbiw	r24, 0x08	; 8
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	9e bf       	out	0x3e, r25	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	8d bf       	out	0x3d, r24	; 61
    1616:	ed b7       	in	r30, 0x3d	; 61
    1618:	fe b7       	in	r31, 0x3e	; 62
    161a:	31 96       	adiw	r30, 0x01	; 1
    161c:	8d e7       	ldi	r24, 0x7D	; 125
    161e:	91 e0       	ldi	r25, 0x01	; 1
    1620:	ad b7       	in	r26, 0x3d	; 61
    1622:	be b7       	in	r27, 0x3e	; 62
    1624:	12 96       	adiw	r26, 0x02	; 2
    1626:	9c 93       	st	X, r25
    1628:	8e 93       	st	-X, r24
    162a:	11 97       	sbiw	r26, 0x01	; 1
    162c:	80 91 ef 04 	lds	r24, 0x04EF
    1630:	82 83       	std	Z+2, r24	; 0x02
    1632:	13 82       	std	Z+3, r1	; 0x03
    1634:	80 91 ee 04 	lds	r24, 0x04EE
    1638:	84 83       	std	Z+4, r24	; 0x04
    163a:	15 82       	std	Z+5, r1	; 0x05
    163c:	80 91 f4 04 	lds	r24, 0x04F4
    1640:	86 83       	std	Z+6, r24	; 0x06
    1642:	17 82       	std	Z+7, r1	; 0x07
    1644:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1648:	ed b7       	in	r30, 0x3d	; 61
    164a:	fe b7       	in	r31, 0x3e	; 62
    164c:	38 96       	adiw	r30, 0x08	; 8
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	fe bf       	out	0x3e, r31	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	ed bf       	out	0x3d, r30	; 61
    1658:	60 e0       	ldi	r22, 0x00	; 0
    165a:	70 e0       	ldi	r23, 0x00	; 0
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	20 e0       	ldi	r18, 0x00	; 0
    1662:	30 e0       	ldi	r19, 0x00	; 0
    1664:	44 e8       	ldi	r20, 0x84	; 132
    1666:	51 e4       	ldi	r21, 0x41	; 65
    1668:	0f 2e       	mov	r0, r31
    166a:	f0 e0       	ldi	r31, 0x00	; 0
    166c:	ef 2e       	mov	r14, r31
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	ff 2e       	mov	r15, r31
    1672:	f0 e2       	ldi	r31, 0x20	; 32
    1674:	0f 2f       	mov	r16, r31
    1676:	f1 e4       	ldi	r31, 0x41	; 65
    1678:	1f 2f       	mov	r17, r31
    167a:	f0 2d       	mov	r31, r0
    167c:	57 01       	movw	r10, r14
    167e:	68 01       	movw	r12, r16
    1680:	88 24       	eor	r8, r8
    1682:	0e 94 c1 13 	call	0x2782	; 0x2782 <move_arc_stwt>
    1686:	12 c0       	rjmp	.+36     	; 0x16ac <moveWorld+0x258>
			break;
		default:
			LCD_printf("What?!");
    1688:	00 d0       	rcall	.+0      	; 0x168a <moveWorld+0x236>
    168a:	89 ea       	ldi	r24, 0xA9	; 169
    168c:	91 e0       	ldi	r25, 0x01	; 1
    168e:	ad b7       	in	r26, 0x3d	; 61
    1690:	be b7       	in	r27, 0x3e	; 62
    1692:	12 96       	adiw	r26, 0x02	; 2
    1694:	9c 93       	st	X, r25
    1696:	8e 93       	st	-X, r24
    1698:	11 97       	sbiw	r26, 0x01	; 1
    169a:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    169e:	0f 90       	pop	r0
    16a0:	0f 90       	pop	r0
    16a2:	82 e0       	ldi	r24, 0x02	; 2
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	0e 94 49 1c 	call	0x3892	; 0x3892 <STEPPER_stop>
    16aa:	ff cf       	rjmp	.-2      	; 0x16aa <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    16ac:	80 91 6b 04 	lds	r24, 0x046B
    16b0:	80 93 6d 04 	sts	0x046D, r24
	return 1;
}
    16b4:	81 e0       	ldi	r24, 0x01	; 1
    16b6:	1f 91       	pop	r17
    16b8:	0f 91       	pop	r16
    16ba:	ff 90       	pop	r15
    16bc:	ef 90       	pop	r14
    16be:	df 90       	pop	r13
    16c0:	cf 90       	pop	r12
    16c2:	bf 90       	pop	r11
    16c4:	af 90       	pop	r10
    16c6:	8f 90       	pop	r8
    16c8:	08 95       	ret

000016ca <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    16ca:	0e 94 2a 0a 	call	0x1454	; 0x1454 <moveWorld>
    16ce:	88 23       	and	r24, r24
    16d0:	69 f0       	breq	.+26     	; 0x16ec <moveBehavior+0x22>
		Ierror = 0;
    16d2:	80 e0       	ldi	r24, 0x00	; 0
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	a0 e0       	ldi	r26, 0x00	; 0
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	80 93 ea 04 	sts	0x04EA, r24
    16de:	90 93 eb 04 	sts	0x04EB, r25
    16e2:	a0 93 ec 04 	sts	0x04EC, r26
    16e6:	b0 93 ed 04 	sts	0x04ED, r27
    16ea:	81 e0       	ldi	r24, 0x01	; 1
		return 1; 
	}
	return 0;	
}
    16ec:	08 95       	ret

000016ee <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	ff 24       	eor	r15, r15
    16fa:	f3 94       	inc	r15
    16fc:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    16fe:	c0 eb       	ldi	r28, 0xB0	; 176
    1700:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    1702:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    1706:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    1708:	81 30       	cpi	r24, 0x01	; 1
    170a:	21 f0       	breq	.+8      	; 0x1714 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    170c:	82 30       	cpi	r24, 0x02	; 2
    170e:	11 f0       	breq	.+4      	; 0x1714 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    1710:	83 30       	cpi	r24, 0x03	; 3
    1712:	39 f4       	brne	.+14     	; 0x1722 <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    1714:	e1 2f       	mov	r30, r17
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	e2 59       	subi	r30, 0x92	; 146
    171a:	fa 4f       	sbci	r31, 0xFA	; 250
    171c:	00 83       	st	Z, r16
			i++;
    171e:	1f 5f       	subi	r17, 0xFF	; 255
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <movesInput+0x38>
		}

		if (btnHolder != 0){
    1722:	88 23       	and	r24, r24
    1724:	21 f1       	breq	.+72     	; 0x176e <movesInput+0x80>
			LCD_clear();
    1726:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    172a:	8d b7       	in	r24, 0x3d	; 61
    172c:	9e b7       	in	r25, 0x3e	; 62
    172e:	08 97       	sbiw	r24, 0x08	; 8
    1730:	0f b6       	in	r0, 0x3f	; 63
    1732:	f8 94       	cli
    1734:	9e bf       	out	0x3e, r25	; 62
    1736:	0f be       	out	0x3f, r0	; 63
    1738:	8d bf       	out	0x3d, r24	; 61
    173a:	ed b7       	in	r30, 0x3d	; 61
    173c:	fe b7       	in	r31, 0x3e	; 62
    173e:	31 96       	adiw	r30, 0x01	; 1
    1740:	ad b7       	in	r26, 0x3d	; 61
    1742:	be b7       	in	r27, 0x3e	; 62
    1744:	12 96       	adiw	r26, 0x02	; 2
    1746:	dc 93       	st	X, r29
    1748:	ce 93       	st	-X, r28
    174a:	11 97       	sbiw	r26, 0x01	; 1
    174c:	f2 82       	std	Z+2, r15	; 0x02
    174e:	13 82       	std	Z+3, r1	; 0x03
    1750:	04 83       	std	Z+4, r16	; 0x04
    1752:	15 82       	std	Z+5, r1	; 0x05
    1754:	16 83       	std	Z+6, r17	; 0x06
    1756:	17 82       	std	Z+7, r1	; 0x07
    1758:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
    175c:	f0 2e       	mov	r15, r16
    175e:	8d b7       	in	r24, 0x3d	; 61
    1760:	9e b7       	in	r25, 0x3e	; 62
    1762:	08 96       	adiw	r24, 0x08	; 8
    1764:	0f b6       	in	r0, 0x3f	; 63
    1766:	f8 94       	cli
    1768:	9e bf       	out	0x3e, r25	; 62
    176a:	0f be       	out	0x3f, r0	; 63
    176c:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    176e:	84 ef       	ldi	r24, 0xF4	; 244
    1770:	91 e0       	ldi	r25, 0x01	; 1
    1772:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    1776:	1b 30       	cpi	r17, 0x0B	; 11
    1778:	20 f2       	brcs	.-120    	; 0x1702 <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    177a:	1f 5f       	subi	r17, 0xFF	; 255
    177c:	e1 2f       	mov	r30, r17
    177e:	f0 e0       	ldi	r31, 0x00	; 0
    1780:	e2 59       	subi	r30, 0x92	; 146
    1782:	fa 4f       	sbci	r31, 0xFA	; 250
    1784:	84 e0       	ldi	r24, 0x04	; 4
    1786:	80 83       	st	Z, r24
}
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	ff 90       	pop	r15
    1792:	08 95       	ret

00001794 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    1794:	1f 93       	push	r17
    1796:	cf 93       	push	r28
    1798:	df 93       	push	r29
    179a:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    179c:	c1 ee       	ldi	r28, 0xE1	; 225
    179e:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    17a0:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	21 f4       	brne	.+8      	; 0x17b0 <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    17a8:	80 91 10 06 	lds	r24, 0x0610
    17ac:	88 0f       	add	r24, r24
    17ae:	06 c0       	rjmp	.+12     	; 0x17bc <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    17b0:	82 30       	cpi	r24, 0x02	; 2
    17b2:	39 f4       	brne	.+14     	; 0x17c2 <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    17b4:	80 91 10 06 	lds	r24, 0x0610
    17b8:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    17ba:	8f 5f       	subi	r24, 0xFF	; 255
    17bc:	80 93 10 06 	sts	0x0610, r24
			i++;
    17c0:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    17c2:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    17c6:	00 d0       	rcall	.+0      	; 0x17c8 <worldInput+0x34>
    17c8:	00 d0       	rcall	.+0      	; 0x17ca <worldInput+0x36>
    17ca:	00 d0       	rcall	.+0      	; 0x17cc <worldInput+0x38>
    17cc:	ed b7       	in	r30, 0x3d	; 61
    17ce:	fe b7       	in	r31, 0x3e	; 62
    17d0:	31 96       	adiw	r30, 0x01	; 1
    17d2:	ad b7       	in	r26, 0x3d	; 61
    17d4:	be b7       	in	r27, 0x3e	; 62
    17d6:	12 96       	adiw	r26, 0x02	; 2
    17d8:	dc 93       	st	X, r29
    17da:	ce 93       	st	-X, r28
    17dc:	11 97       	sbiw	r26, 0x01	; 1
    17de:	80 91 10 06 	lds	r24, 0x0610
    17e2:	82 83       	std	Z+2, r24	; 0x02
    17e4:	13 82       	std	Z+3, r1	; 0x03
    17e6:	14 83       	std	Z+4, r17	; 0x04
    17e8:	15 82       	std	Z+5, r1	; 0x05
    17ea:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
		// }
		currentCellWorldStart = currentCellWorld;
    17ee:	80 91 10 06 	lds	r24, 0x0610
    17f2:	80 93 11 06 	sts	0x0611, r24
		TMRSRVC_delay(500);	//wait 0.5 seconds
    17f6:	8d b7       	in	r24, 0x3d	; 61
    17f8:	9e b7       	in	r25, 0x3e	; 62
    17fa:	06 96       	adiw	r24, 0x06	; 6
    17fc:	0f b6       	in	r0, 0x3f	; 63
    17fe:	f8 94       	cli
    1800:	9e bf       	out	0x3e, r25	; 62
    1802:	0f be       	out	0x3f, r0	; 63
    1804:	8d bf       	out	0x3d, r24	; 61
    1806:	84 ef       	ldi	r24, 0xF4	; 244
    1808:	91 e0       	ldi	r25, 0x01	; 1
    180a:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    180e:	14 30       	cpi	r17, 0x04	; 4
    1810:	38 f2       	brcs	.-114    	; 0x17a0 <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		currentCellWorldStart = currentCellWorld;
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
}
    1812:	df 91       	pop	r29
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	08 95       	ret

0000181a <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    1822:	c9 e0       	ldi	r28, 0x09	; 9
    1824:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    1826:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    182a:	81 30       	cpi	r24, 0x01	; 1
    182c:	21 f4       	brne	.+8      	; 0x1836 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    182e:	80 91 8f 05 	lds	r24, 0x058F
    1832:	88 0f       	add	r24, r24
    1834:	06 c0       	rjmp	.+12     	; 0x1842 <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1836:	82 30       	cpi	r24, 0x02	; 2
    1838:	41 f4       	brne	.+16     	; 0x184a <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    183a:	80 91 8f 05 	lds	r24, 0x058F
    183e:	88 0f       	add	r24, r24
			currentOrientation += 1;
    1840:	8f 5f       	subi	r24, 0xFF	; 255
    1842:	80 93 8f 05 	sts	0x058F, r24
			i++;
    1846:	1f 5f       	subi	r17, 0xFF	; 255
    1848:	02 c0       	rjmp	.+4      	; 0x184e <orientationInput+0x34>
		}

		if (btnHolder != 0){
    184a:	88 23       	and	r24, r24
    184c:	f1 f0       	breq	.+60     	; 0x188a <orientationInput+0x70>
			LCD_clear();
    184e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    1852:	00 d0       	rcall	.+0      	; 0x1854 <orientationInput+0x3a>
    1854:	00 d0       	rcall	.+0      	; 0x1856 <orientationInput+0x3c>
    1856:	00 d0       	rcall	.+0      	; 0x1858 <orientationInput+0x3e>
    1858:	ed b7       	in	r30, 0x3d	; 61
    185a:	fe b7       	in	r31, 0x3e	; 62
    185c:	31 96       	adiw	r30, 0x01	; 1
    185e:	ad b7       	in	r26, 0x3d	; 61
    1860:	be b7       	in	r27, 0x3e	; 62
    1862:	12 96       	adiw	r26, 0x02	; 2
    1864:	dc 93       	st	X, r29
    1866:	ce 93       	st	-X, r28
    1868:	11 97       	sbiw	r26, 0x01	; 1
    186a:	80 91 8f 05 	lds	r24, 0x058F
    186e:	82 83       	std	Z+2, r24	; 0x02
    1870:	13 82       	std	Z+3, r1	; 0x03
    1872:	14 83       	std	Z+4, r17	; 0x04
    1874:	15 82       	std	Z+5, r1	; 0x05
    1876:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
    187a:	8d b7       	in	r24, 0x3d	; 61
    187c:	9e b7       	in	r25, 0x3e	; 62
    187e:	06 96       	adiw	r24, 0x06	; 6
    1880:	0f b6       	in	r0, 0x3f	; 63
    1882:	f8 94       	cli
    1884:	9e bf       	out	0x3e, r25	; 62
    1886:	0f be       	out	0x3f, r0	; 63
    1888:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    188a:	84 ef       	ldi	r24, 0xF4	; 244
    188c:	91 e0       	ldi	r25, 0x01	; 1
    188e:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    1892:	12 30       	cpi	r17, 0x02	; 2
    1894:	40 f2       	brcs	.-112    	; 0x1826 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    1896:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	switch(currentOrientation){
    189a:	80 91 8f 05 	lds	r24, 0x058F
    189e:	81 30       	cpi	r24, 0x01	; 1
    18a0:	51 f0       	breq	.+20     	; 0x18b6 <orientationInput+0x9c>
    18a2:	81 30       	cpi	r24, 0x01	; 1
    18a4:	28 f0       	brcs	.+10     	; 0x18b0 <orientationInput+0x96>
    18a6:	82 30       	cpi	r24, 0x02	; 2
    18a8:	49 f0       	breq	.+18     	; 0x18bc <orientationInput+0xa2>
    18aa:	83 30       	cpi	r24, 0x03	; 3
    18ac:	71 f4       	brne	.+28     	; 0x18ca <orientationInput+0xb0>
    18ae:	09 c0       	rjmp	.+18     	; 0x18c2 <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    18b0:	88 e3       	ldi	r24, 0x38	; 56
    18b2:	92 e0       	ldi	r25, 0x02	; 2
    18b4:	08 c0       	rjmp	.+16     	; 0x18c6 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    18b6:	8a e5       	ldi	r24, 0x5A	; 90
    18b8:	92 e0       	ldi	r25, 0x02	; 2
    18ba:	05 c0       	rjmp	.+10     	; 0x18c6 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    18bc:	8b e7       	ldi	r24, 0x7B	; 123
    18be:	92 e0       	ldi	r25, 0x02	; 2
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    18c2:	8d e9       	ldi	r24, 0x9D	; 157
    18c4:	92 e0       	ldi	r25, 0x02	; 2
    18c6:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <puts>
			break;
		default:
			break;
	}
	TMRSRVC_delay(500);	//wait 0.5 seconds
    18ca:	84 ef       	ldi	r24, 0xF4	; 244
    18cc:	91 e0       	ldi	r25, 0x01	; 1
    18ce:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
}
    18d2:	df 91       	pop	r29
    18d4:	cf 91       	pop	r28
    18d6:	1f 91       	pop	r17
    18d8:	08 95       	ret

000018da <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    18da:	cf 92       	push	r12
    18dc:	df 92       	push	r13
    18de:	ef 92       	push	r14
    18e0:	ff 92       	push	r15
    18e2:	0f 93       	push	r16
    18e4:	1f 93       	push	r17
    18e6:	df 93       	push	r29
    18e8:	cf 93       	push	r28
    18ea:	0f 92       	push	r0
    18ec:	cd b7       	in	r28, 0x3d	; 61
    18ee:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	unsigned char curRow = (currentCellWorld>>2) & 0b1100;
    18f0:	80 91 10 06 	lds	r24, 0x0610
    18f4:	98 2f       	mov	r25, r24
    18f6:	96 95       	lsr	r25
    18f8:	96 95       	lsr	r25
    18fa:	9c 70       	andi	r25, 0x0C	; 12
	unsigned char curCol = currentCellWorld & 0b0011;
    18fc:	b3 e0       	ldi	r27, 0x03	; 3
    18fe:	fb 2e       	mov	r15, r27
    1900:	f8 22       	and	r15, r24
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    1902:	00 91 8f 05 	lds	r16, 0x058F
    1906:	cc 24       	eor	r12, r12
    1908:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    190a:	f6 01       	movw	r30, r12
    190c:	e2 59       	subi	r30, 0x92	; 146
    190e:	fa 4f       	sbci	r31, 0xFA	; 250
    1910:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    1912:	e9 2f       	mov	r30, r25
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	ee 0f       	add	r30, r30
    191c:	ff 1f       	adc	r31, r31
    191e:	ef 0d       	add	r30, r15
    1920:	f1 1d       	adc	r31, r1
    1922:	e2 58       	subi	r30, 0x82	; 130
    1924:	fa 4f       	sbci	r31, 0xFA	; 250
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    1926:	80 81       	ld	r24, Z
    1928:	60 2f       	mov	r22, r16
    192a:	41 e0       	ldi	r20, 0x01	; 1
    192c:	99 83       	std	Y+1, r25	; 0x01
    192e:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    1932:	f6 01       	movw	r30, r12
    1934:	eb 56       	subi	r30, 0x6B	; 107
    1936:	f9 4f       	sbci	r31, 0xF9	; 249
    1938:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    193a:	99 81       	ldd	r25, Y+1	; 0x01
    193c:	12 30       	cpi	r17, 0x02	; 2
    193e:	89 f4       	brne	.+34     	; 0x1962 <getGateways+0x88>
			switch(curOrient){
    1940:	01 30       	cpi	r16, 0x01	; 1
    1942:	49 f0       	breq	.+18     	; 0x1956 <getGateways+0x7c>
    1944:	01 30       	cpi	r16, 0x01	; 1
    1946:	28 f0       	brcs	.+10     	; 0x1952 <getGateways+0x78>
    1948:	02 30       	cpi	r16, 0x02	; 2
    194a:	39 f0       	breq	.+14     	; 0x195a <getGateways+0x80>
    194c:	03 30       	cpi	r16, 0x03	; 3
    194e:	89 f4       	brne	.+34     	; 0x1972 <getGateways+0x98>
    1950:	06 c0       	rjmp	.+12     	; 0x195e <getGateways+0x84>
				case NORTH:
					curRow -= 1;
    1952:	91 50       	subi	r25, 0x01	; 1
    1954:	0e c0       	rjmp	.+28     	; 0x1972 <getGateways+0x98>
					break;
				case EAST:
					curCol += 1;
    1956:	f3 94       	inc	r15
    1958:	0c c0       	rjmp	.+24     	; 0x1972 <getGateways+0x98>
					break;
				case SOUTH:
					curRow += 1;					
    195a:	9f 5f       	subi	r25, 0xFF	; 255
    195c:	0a c0       	rjmp	.+20     	; 0x1972 <getGateways+0x98>
					break;
				case WEST:
					curCol -= 1;					
    195e:	fa 94       	dec	r15
    1960:	08 c0       	rjmp	.+16     	; 0x1972 <getGateways+0x98>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    1962:	13 30       	cpi	r17, 0x03	; 3
    1964:	11 f4       	brne	.+4      	; 0x196a <getGateways+0x90>
			curOrient++;
    1966:	0f 5f       	subi	r16, 0xFF	; 255
    1968:	03 c0       	rjmp	.+6      	; 0x1970 <getGateways+0x96>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    196a:	11 30       	cpi	r17, 0x01	; 1
    196c:	11 f4       	brne	.+4      	; 0x1972 <getGateways+0x98>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    196e:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    1970:	03 70       	andi	r16, 0x03	; 3
    1972:	08 94       	sec
    1974:	c1 1c       	adc	r12, r1
    1976:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    1978:	8d e0       	ldi	r24, 0x0D	; 13
    197a:	c8 16       	cp	r12, r24
    197c:	d1 04       	cpc	r13, r1
    197e:	29 f6       	brne	.-118    	; 0x190a <getGateways+0x30>
    1980:	cc 24       	eor	r12, r12
    1982:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    1984:	ee eb       	ldi	r30, 0xBE	; 190
    1986:	ee 2e       	mov	r14, r30
    1988:	e2 e0       	ldi	r30, 0x02	; 2
    198a:	fe 2e       	mov	r15, r30
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    198c:	f6 01       	movw	r30, r12
    198e:	eb 56       	subi	r30, 0x6B	; 107
    1990:	f9 4f       	sbci	r31, 0xF9	; 249
    1992:	00 81       	ld	r16, Z
		LCD_clear();
    1994:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    1998:	20 2f       	mov	r18, r16
    199a:	30 e0       	ldi	r19, 0x00	; 0
    199c:	ad b7       	in	r26, 0x3d	; 61
    199e:	be b7       	in	r27, 0x3e	; 62
    19a0:	54 97       	sbiw	r26, 0x14	; 20
    19a2:	0f b6       	in	r0, 0x3f	; 63
    19a4:	f8 94       	cli
    19a6:	be bf       	out	0x3e, r27	; 62
    19a8:	0f be       	out	0x3f, r0	; 63
    19aa:	ad bf       	out	0x3d, r26	; 61
    19ac:	ed b7       	in	r30, 0x3d	; 61
    19ae:	fe b7       	in	r31, 0x3e	; 62
    19b0:	31 96       	adiw	r30, 0x01	; 1
    19b2:	12 96       	adiw	r26, 0x02	; 2
    19b4:	fc 92       	st	X, r15
    19b6:	ee 92       	st	-X, r14
    19b8:	11 97       	sbiw	r26, 0x01	; 1
    19ba:	d3 82       	std	Z+3, r13	; 0x03
    19bc:	c2 82       	std	Z+2, r12	; 0x02
    19be:	11 27       	eor	r17, r17
    19c0:	07 fd       	sbrc	r16, 7
    19c2:	10 95       	com	r17
    19c4:	00 27       	eor	r16, r16
    19c6:	11 0f       	add	r17, r17
    19c8:	00 1f       	adc	r16, r16
    19ca:	11 27       	eor	r17, r17
    19cc:	15 83       	std	Z+5, r17	; 0x05
    19ce:	04 83       	std	Z+4, r16	; 0x04
    19d0:	c9 01       	movw	r24, r18
    19d2:	66 e0       	ldi	r22, 0x06	; 6
    19d4:	96 95       	lsr	r25
    19d6:	87 95       	ror	r24
    19d8:	6a 95       	dec	r22
    19da:	e1 f7       	brne	.-8      	; 0x19d4 <getGateways+0xfa>
    19dc:	81 70       	andi	r24, 0x01	; 1
    19de:	90 70       	andi	r25, 0x00	; 0
    19e0:	97 83       	std	Z+7, r25	; 0x07
    19e2:	86 83       	std	Z+6, r24	; 0x06
    19e4:	c9 01       	movw	r24, r18
    19e6:	55 e0       	ldi	r21, 0x05	; 5
    19e8:	96 95       	lsr	r25
    19ea:	87 95       	ror	r24
    19ec:	5a 95       	dec	r21
    19ee:	e1 f7       	brne	.-8      	; 0x19e8 <getGateways+0x10e>
    19f0:	81 70       	andi	r24, 0x01	; 1
    19f2:	90 70       	andi	r25, 0x00	; 0
    19f4:	91 87       	std	Z+9, r25	; 0x09
    19f6:	80 87       	std	Z+8, r24	; 0x08
    19f8:	c9 01       	movw	r24, r18
    19fa:	44 e0       	ldi	r20, 0x04	; 4
    19fc:	96 95       	lsr	r25
    19fe:	87 95       	ror	r24
    1a00:	4a 95       	dec	r20
    1a02:	e1 f7       	brne	.-8      	; 0x19fc <getGateways+0x122>
    1a04:	81 70       	andi	r24, 0x01	; 1
    1a06:	90 70       	andi	r25, 0x00	; 0
    1a08:	93 87       	std	Z+11, r25	; 0x0b
    1a0a:	82 87       	std	Z+10, r24	; 0x0a
    1a0c:	c9 01       	movw	r24, r18
    1a0e:	03 e0       	ldi	r16, 0x03	; 3
    1a10:	96 95       	lsr	r25
    1a12:	87 95       	ror	r24
    1a14:	0a 95       	dec	r16
    1a16:	e1 f7       	brne	.-8      	; 0x1a10 <getGateways+0x136>
    1a18:	81 70       	andi	r24, 0x01	; 1
    1a1a:	90 70       	andi	r25, 0x00	; 0
    1a1c:	95 87       	std	Z+13, r25	; 0x0d
    1a1e:	84 87       	std	Z+12, r24	; 0x0c
    1a20:	c9 01       	movw	r24, r18
    1a22:	96 95       	lsr	r25
    1a24:	87 95       	ror	r24
    1a26:	96 95       	lsr	r25
    1a28:	87 95       	ror	r24
    1a2a:	81 70       	andi	r24, 0x01	; 1
    1a2c:	90 70       	andi	r25, 0x00	; 0
    1a2e:	97 87       	std	Z+15, r25	; 0x0f
    1a30:	86 87       	std	Z+14, r24	; 0x0e
    1a32:	c9 01       	movw	r24, r18
    1a34:	96 95       	lsr	r25
    1a36:	87 95       	ror	r24
    1a38:	81 70       	andi	r24, 0x01	; 1
    1a3a:	90 70       	andi	r25, 0x00	; 0
    1a3c:	91 8b       	std	Z+17, r25	; 0x11
    1a3e:	80 8b       	std	Z+16, r24	; 0x10
    1a40:	21 70       	andi	r18, 0x01	; 1
    1a42:	30 70       	andi	r19, 0x00	; 0
    1a44:	33 8b       	std	Z+19, r19	; 0x13
    1a46:	22 8b       	std	Z+18, r18	; 0x12
    1a48:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
		TMRSRVC_delay(500);//wait 1/2 seconds
    1a4c:	ed b7       	in	r30, 0x3d	; 61
    1a4e:	fe b7       	in	r31, 0x3e	; 62
    1a50:	74 96       	adiw	r30, 0x14	; 20
    1a52:	0f b6       	in	r0, 0x3f	; 63
    1a54:	f8 94       	cli
    1a56:	fe bf       	out	0x3e, r31	; 62
    1a58:	0f be       	out	0x3f, r0	; 63
    1a5a:	ed bf       	out	0x3d, r30	; 61
    1a5c:	84 ef       	ldi	r24, 0xF4	; 244
    1a5e:	91 e0       	ldi	r25, 0x01	; 1
    1a60:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
    1a64:	08 94       	sec
    1a66:	c1 1c       	adc	r12, r1
    1a68:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    1a6a:	fd e0       	ldi	r31, 0x0D	; 13
    1a6c:	cf 16       	cp	r12, r31
    1a6e:	d1 04       	cpc	r13, r1
    1a70:	09 f0       	breq	.+2      	; 0x1a74 <getGateways+0x19a>
    1a72:	8c cf       	rjmp	.-232    	; 0x198c <getGateways+0xb2>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(500);//wait 1/2 seconds
	}
}
    1a74:	0f 90       	pop	r0
    1a76:	cf 91       	pop	r28
    1a78:	df 91       	pop	r29
    1a7a:	1f 91       	pop	r17
    1a7c:	0f 91       	pop	r16
    1a7e:	ff 90       	pop	r15
    1a80:	ef 90       	pop	r14
    1a82:	df 90       	pop	r13
    1a84:	cf 90       	pop	r12
    1a86:	08 95       	ret

00001a88 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    1a88:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = (currentCellWorld>>2) & 0b1100;
    1a8a:	10 91 10 06 	lds	r17, 0x0610
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    1a8e:	80 91 ee 04 	lds	r24, 0x04EE
    1a92:	60 91 8f 05 	lds	r22, 0x058F
    1a96:	40 e0       	ldi	r20, 0x00	; 0
    1a98:	0e 94 fc 10 	call	0x21f8	; 0x21f8 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    1a9c:	e1 2f       	mov	r30, r17
    1a9e:	e6 95       	lsr	r30
    1aa0:	e6 95       	lsr	r30
    1aa2:	f0 e0       	ldi	r31, 0x00	; 0
    1aa4:	ec 70       	andi	r30, 0x0C	; 12
    1aa6:	f0 70       	andi	r31, 0x00	; 0
    1aa8:	ee 0f       	add	r30, r30
    1aaa:	ff 1f       	adc	r31, r31
    1aac:	ee 0f       	add	r30, r30
    1aae:	ff 1f       	adc	r31, r31
    1ab0:	13 70       	andi	r17, 0x03	; 3
    1ab2:	e1 0f       	add	r30, r17
    1ab4:	f1 1d       	adc	r31, r1
    1ab6:	e2 58       	subi	r30, 0x82	; 130
    1ab8:	fa 4f       	sbci	r31, 0xFA	; 250
    1aba:	80 83       	st	Z, r24
		
		
	switch(currentMove){
    1abc:	80 91 6b 04 	lds	r24, 0x046B
    1ac0:	81 50       	subi	r24, 0x01	; 1
    1ac2:	83 30       	cpi	r24, 0x03	; 3
    1ac4:	58 f0       	brcs	.+22     	; 0x1adc <setGateways+0x54>
		case MOVE_RIGHT:		
			curOrient++;
			curOrient = curOrient&0b11;
			break;
		default:
			LCD_printf("Whatz?!");
    1ac6:	00 d0       	rcall	.+0      	; 0x1ac8 <setGateways+0x40>
    1ac8:	80 ee       	ldi	r24, 0xE0	; 224
    1aca:	92 e0       	ldi	r25, 0x02	; 2
    1acc:	ed b7       	in	r30, 0x3d	; 61
    1ace:	fe b7       	in	r31, 0x3e	; 62
    1ad0:	92 83       	std	Z+2, r25	; 0x02
    1ad2:	81 83       	std	Z+1, r24	; 0x01
    1ad4:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
			curCol -= 1;					
			break;
		default:
			break;
	}	
}
    1adc:	1f 91       	pop	r17
    1ade:	08 95       	ret

00001ae0 <mapWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    maps the world as it moves through it
********************************************************************/
char mapWorld( void )
{		
    1ae0:	8f 92       	push	r8
    1ae2:	af 92       	push	r10
    1ae4:	bf 92       	push	r11
    1ae6:	cf 92       	push	r12
    1ae8:	df 92       	push	r13
    1aea:	ef 92       	push	r14
    1aec:	ff 92       	push	r15
    1aee:	0f 93       	push	r16
    1af0:	1f 93       	push	r17
	if(!(currentGateway&0b0001)){
    1af2:	80 91 ee 04 	lds	r24, 0x04EE
    1af6:	80 fd       	sbrc	r24, 0
    1af8:	02 c0       	rjmp	.+4      	; 0x1afe <mapWorld+0x1e>
		currentMove = MOVE_LEFT;
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	05 c0       	rjmp	.+10     	; 0x1b08 <mapWorld+0x28>
	}
	else if(!(currentGateway&0b1000)){
    1afe:	83 fd       	sbrc	r24, 3
    1b00:	02 c0       	rjmp	.+4      	; 0x1b06 <mapWorld+0x26>
		currentMove = MOVE_FORWARD;
    1b02:	82 e0       	ldi	r24, 0x02	; 2
    1b04:	01 c0       	rjmp	.+2      	; 0x1b08 <mapWorld+0x28>
	}
	else {
		currentMove = MOVE_RIGHT;
    1b06:	83 e0       	ldi	r24, 0x03	; 3
    1b08:	80 93 6b 04 	sts	0x046B, r24
	}
	
	setGateways();
    1b0c:	0e 94 44 0d 	call	0x1a88	; 0x1a88 <setGateways>
	
	LCD_clear();
    1b10:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	switch(currentMove){
    1b14:	80 91 6b 04 	lds	r24, 0x046B
    1b18:	82 30       	cpi	r24, 0x02	; 2
    1b1a:	09 f4       	brne	.+2      	; 0x1b1e <mapWorld+0x3e>
    1b1c:	4f c0       	rjmp	.+158    	; 0x1bbc <mapWorld+0xdc>
    1b1e:	83 30       	cpi	r24, 0x03	; 3
    1b20:	09 f4       	brne	.+2      	; 0x1b24 <mapWorld+0x44>
    1b22:	8d c0       	rjmp	.+282    	; 0x1c3e <mapWorld+0x15e>
    1b24:	81 30       	cpi	r24, 0x01	; 1
    1b26:	09 f0       	breq	.+2      	; 0x1b2a <mapWorld+0x4a>
    1b28:	bc c0       	rjmp	.+376    	; 0x1ca2 <mapWorld+0x1c2>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1b2a:	8d b7       	in	r24, 0x3d	; 61
    1b2c:	9e b7       	in	r25, 0x3e	; 62
    1b2e:	08 97       	sbiw	r24, 0x08	; 8
    1b30:	0f b6       	in	r0, 0x3f	; 63
    1b32:	f8 94       	cli
    1b34:	9e bf       	out	0x3e, r25	; 62
    1b36:	0f be       	out	0x3f, r0	; 63
    1b38:	8d bf       	out	0x3d, r24	; 61
    1b3a:	ed b7       	in	r30, 0x3d	; 61
    1b3c:	fe b7       	in	r31, 0x3e	; 62
    1b3e:	31 96       	adiw	r30, 0x01	; 1
    1b40:	84 e2       	ldi	r24, 0x24	; 36
    1b42:	91 e0       	ldi	r25, 0x01	; 1
    1b44:	ad b7       	in	r26, 0x3d	; 61
    1b46:	be b7       	in	r27, 0x3e	; 62
    1b48:	12 96       	adiw	r26, 0x02	; 2
    1b4a:	9c 93       	st	X, r25
    1b4c:	8e 93       	st	-X, r24
    1b4e:	11 97       	sbiw	r26, 0x01	; 1
    1b50:	80 91 ef 04 	lds	r24, 0x04EF
    1b54:	82 83       	std	Z+2, r24	; 0x02
    1b56:	13 82       	std	Z+3, r1	; 0x03
    1b58:	80 91 ee 04 	lds	r24, 0x04EE
    1b5c:	84 83       	std	Z+4, r24	; 0x04
    1b5e:	15 82       	std	Z+5, r1	; 0x05
    1b60:	80 91 f4 04 	lds	r24, 0x04F4
    1b64:	86 83       	std	Z+6, r24	; 0x06
    1b66:	17 82       	std	Z+7, r1	; 0x07
    1b68:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1b6c:	ed b7       	in	r30, 0x3d	; 61
    1b6e:	fe b7       	in	r31, 0x3e	; 62
    1b70:	38 96       	adiw	r30, 0x08	; 8
    1b72:	0f b6       	in	r0, 0x3f	; 63
    1b74:	f8 94       	cli
    1b76:	fe bf       	out	0x3e, r31	; 62
    1b78:	0f be       	out	0x3f, r0	; 63
    1b7a:	ed bf       	out	0x3d, r30	; 61
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	70 e0       	ldi	r23, 0x00	; 0
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	20 e0       	ldi	r18, 0x00	; 0
    1b86:	30 e0       	ldi	r19, 0x00	; 0
    1b88:	44 e8       	ldi	r20, 0x84	; 132
    1b8a:	51 ec       	ldi	r21, 0xC1	; 193
    1b8c:	0f 2e       	mov	r0, r31
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	ef 2e       	mov	r14, r31
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	ff 2e       	mov	r15, r31
    1b96:	f0 e2       	ldi	r31, 0x20	; 32
    1b98:	0f 2f       	mov	r16, r31
    1b9a:	f1 e4       	ldi	r31, 0x41	; 65
    1b9c:	1f 2f       	mov	r17, r31
    1b9e:	f0 2d       	mov	r31, r0
    1ba0:	57 01       	movw	r10, r14
    1ba2:	68 01       	movw	r12, r16
    1ba4:	88 24       	eor	r8, r8
    1ba6:	0e 94 c1 13 	call	0x2782	; 0x2782 <move_arc_stwt>
			move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	80 e0       	ldi	r24, 0x00	; 0
    1bb0:	9f e4       	ldi	r25, 0x4F	; 79
    1bb2:	28 e4       	ldi	r18, 0x48	; 72
    1bb4:	31 ee       	ldi	r19, 0xE1	; 225
    1bb6:	46 e3       	ldi	r20, 0x36	; 54
    1bb8:	52 e4       	ldi	r21, 0x42	; 66
    1bba:	3e c0       	rjmp	.+124    	; 0x1c38 <mapWorld+0x158>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1bbc:	8d b7       	in	r24, 0x3d	; 61
    1bbe:	9e b7       	in	r25, 0x3e	; 62
    1bc0:	08 97       	sbiw	r24, 0x08	; 8
    1bc2:	0f b6       	in	r0, 0x3f	; 63
    1bc4:	f8 94       	cli
    1bc6:	9e bf       	out	0x3e, r25	; 62
    1bc8:	0f be       	out	0x3f, r0	; 63
    1bca:	8d bf       	out	0x3d, r24	; 61
    1bcc:	ed b7       	in	r30, 0x3d	; 61
    1bce:	fe b7       	in	r31, 0x3e	; 62
    1bd0:	31 96       	adiw	r30, 0x01	; 1
    1bd2:	8f e4       	ldi	r24, 0x4F	; 79
    1bd4:	91 e0       	ldi	r25, 0x01	; 1
    1bd6:	ad b7       	in	r26, 0x3d	; 61
    1bd8:	be b7       	in	r27, 0x3e	; 62
    1bda:	12 96       	adiw	r26, 0x02	; 2
    1bdc:	9c 93       	st	X, r25
    1bde:	8e 93       	st	-X, r24
    1be0:	11 97       	sbiw	r26, 0x01	; 1
    1be2:	80 91 ef 04 	lds	r24, 0x04EF
    1be6:	82 83       	std	Z+2, r24	; 0x02
    1be8:	13 82       	std	Z+3, r1	; 0x03
    1bea:	80 91 ee 04 	lds	r24, 0x04EE
    1bee:	84 83       	std	Z+4, r24	; 0x04
    1bf0:	15 82       	std	Z+5, r1	; 0x05
    1bf2:	80 91 f4 04 	lds	r24, 0x04F4
    1bf6:	86 83       	std	Z+6, r24	; 0x06
    1bf8:	17 82       	std	Z+7, r1	; 0x07
    1bfa:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			// moveWall();
			move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
    1bfe:	ed b7       	in	r30, 0x3d	; 61
    1c00:	fe b7       	in	r31, 0x3e	; 62
    1c02:	38 96       	adiw	r30, 0x08	; 8
    1c04:	0f b6       	in	r0, 0x3f	; 63
    1c06:	f8 94       	cli
    1c08:	fe bf       	out	0x3e, r31	; 62
    1c0a:	0f be       	out	0x3f, r0	; 63
    1c0c:	ed bf       	out	0x3d, r30	; 61
    1c0e:	60 e0       	ldi	r22, 0x00	; 0
    1c10:	70 e0       	ldi	r23, 0x00	; 0
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	9f e4       	ldi	r25, 0x4F	; 79
    1c16:	28 e4       	ldi	r18, 0x48	; 72
    1c18:	31 ee       	ldi	r19, 0xE1	; 225
    1c1a:	46 e3       	ldi	r20, 0x36	; 54
    1c1c:	52 e4       	ldi	r21, 0x42	; 66
    1c1e:	0f 2e       	mov	r0, r31
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	ef 2e       	mov	r14, r31
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	ff 2e       	mov	r15, r31
    1c28:	f0 e2       	ldi	r31, 0x20	; 32
    1c2a:	0f 2f       	mov	r16, r31
    1c2c:	f1 e4       	ldi	r31, 0x41	; 65
    1c2e:	1f 2f       	mov	r17, r31
    1c30:	f0 2d       	mov	r31, r0
    1c32:	57 01       	movw	r10, r14
    1c34:	68 01       	movw	r12, r16
    1c36:	88 24       	eor	r8, r8
    1c38:	0e 94 c1 13 	call	0x2782	; 0x2782 <move_arc_stwt>
    1c3c:	43 c0       	rjmp	.+134    	; 0x1cc4 <mapWorld+0x1e4>
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1c3e:	8d b7       	in	r24, 0x3d	; 61
    1c40:	9e b7       	in	r25, 0x3e	; 62
    1c42:	08 97       	sbiw	r24, 0x08	; 8
    1c44:	0f b6       	in	r0, 0x3f	; 63
    1c46:	f8 94       	cli
    1c48:	9e bf       	out	0x3e, r25	; 62
    1c4a:	0f be       	out	0x3f, r0	; 63
    1c4c:	8d bf       	out	0x3d, r24	; 61
    1c4e:	ed b7       	in	r30, 0x3d	; 61
    1c50:	fe b7       	in	r31, 0x3e	; 62
    1c52:	31 96       	adiw	r30, 0x01	; 1
    1c54:	8d e7       	ldi	r24, 0x7D	; 125
    1c56:	91 e0       	ldi	r25, 0x01	; 1
    1c58:	ad b7       	in	r26, 0x3d	; 61
    1c5a:	be b7       	in	r27, 0x3e	; 62
    1c5c:	12 96       	adiw	r26, 0x02	; 2
    1c5e:	9c 93       	st	X, r25
    1c60:	8e 93       	st	-X, r24
    1c62:	11 97       	sbiw	r26, 0x01	; 1
    1c64:	80 91 ef 04 	lds	r24, 0x04EF
    1c68:	82 83       	std	Z+2, r24	; 0x02
    1c6a:	13 82       	std	Z+3, r1	; 0x03
    1c6c:	80 91 ee 04 	lds	r24, 0x04EE
    1c70:	84 83       	std	Z+4, r24	; 0x04
    1c72:	15 82       	std	Z+5, r1	; 0x05
    1c74:	80 91 f4 04 	lds	r24, 0x04F4
    1c78:	86 83       	std	Z+6, r24	; 0x06
    1c7a:	17 82       	std	Z+7, r1	; 0x07
    1c7c:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1c80:	ed b7       	in	r30, 0x3d	; 61
    1c82:	fe b7       	in	r31, 0x3e	; 62
    1c84:	38 96       	adiw	r30, 0x08	; 8
    1c86:	0f b6       	in	r0, 0x3f	; 63
    1c88:	f8 94       	cli
    1c8a:	fe bf       	out	0x3e, r31	; 62
    1c8c:	0f be       	out	0x3f, r0	; 63
    1c8e:	ed bf       	out	0x3d, r30	; 61
    1c90:	60 e0       	ldi	r22, 0x00	; 0
    1c92:	70 e0       	ldi	r23, 0x00	; 0
    1c94:	80 e0       	ldi	r24, 0x00	; 0
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	20 e0       	ldi	r18, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	44 e8       	ldi	r20, 0x84	; 132
    1c9e:	51 e4       	ldi	r21, 0x41	; 65
    1ca0:	be cf       	rjmp	.-132    	; 0x1c1e <mapWorld+0x13e>
			break;
		default:
			LCD_printf("What?!");
    1ca2:	00 d0       	rcall	.+0      	; 0x1ca4 <mapWorld+0x1c4>
    1ca4:	89 ea       	ldi	r24, 0xA9	; 169
    1ca6:	91 e0       	ldi	r25, 0x01	; 1
    1ca8:	ad b7       	in	r26, 0x3d	; 61
    1caa:	be b7       	in	r27, 0x3e	; 62
    1cac:	12 96       	adiw	r26, 0x02	; 2
    1cae:	9c 93       	st	X, r25
    1cb0:	8e 93       	st	-X, r24
    1cb2:	11 97       	sbiw	r26, 0x01	; 1
    1cb4:	0e 94 49 34 	call	0x6892	; 0x6892 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    1cb8:	0f 90       	pop	r0
    1cba:	0f 90       	pop	r0
    1cbc:	82 e0       	ldi	r24, 0x02	; 2
    1cbe:	60 e0       	ldi	r22, 0x00	; 0
    1cc0:	0e 94 49 1c 	call	0x3892	; 0x3892 <STEPPER_stop>
			break;
	}
	
	// TMRSRVC_delay(1000);//wait 1 seconds
	return 1;
}
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	df 90       	pop	r13
    1cd0:	cf 90       	pop	r12
    1cd2:	bf 90       	pop	r11
    1cd4:	af 90       	pop	r10
    1cd6:	8f 90       	pop	r8
    1cd8:	08 95       	ret

00001cda <CBOT_main>:
********************************************************************/

void CBOT_main( void )
{
	// initialize the robot
	initializeRobot();
    1cda:	0e 94 bd 16 	call	0x2d7a	; 0x2d7a <initializeRobot>
	
	// Enter the robot's current (starting) position
	LCD_printf("START Map/nlocation\n\n\n");	
    1cde:	88 ee       	ldi	r24, 0xE8	; 232
    1ce0:	92 e0       	ldi	r25, 0x02	; 2
    1ce2:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1ce6:	88 ee       	ldi	r24, 0xE8	; 232
    1ce8:	93 e0       	ldi	r25, 0x03	; 3
    1cea:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1cee:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	worldInput();
    1cf2:	0e 94 ca 0b 	call	0x1794	; 0x1794 <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1cf6:	88 ee       	ldi	r24, 0xE8	; 232
    1cf8:	93 e0       	ldi	r25, 0x03	; 3
    1cfa:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1cfe:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Map/norientation\n\n\n");	
    1d02:	8e ef       	ldi	r24, 0xFE	; 254
    1d04:	92 e0       	ldi	r25, 0x02	; 2
    1d06:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1d0a:	88 ee       	ldi	r24, 0xE8	; 232
    1d0c:	93 e0       	ldi	r25, 0x03	; 3
    1d0e:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1d12:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	orientationInput();
    1d16:	0e 94 0d 0c 	call	0x181a	; 0x181a <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1d1a:	88 ee       	ldi	r24, 0xE8	; 232
    1d1c:	93 e0       	ldi	r25, 0x03	; 3
    1d1e:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1d22:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	
	
	isMapping = 1;
    1d26:	81 e0       	ldi	r24, 0x01	; 1
    1d28:	80 93 a5 06 	sts	0x06A5, r24
    1d2c:	20 c0       	rjmp	.+64     	; 0x1d6e <CBOT_main+0x94>
	
	while(isMapping)
	{
		checkIR();	
    1d2e:	0e 94 94 16 	call	0x2d28	; 0x2d28 <checkIR>
		checkWorld();
    1d32:	0e 94 2d 06 	call	0xc5a	; 0xc5a <checkWorld>
		checkOdometry();
    1d36:	0e 94 0a 06 	call	0xc14	; 0xc14 <checkOdometry>
		mapWorld();
    1d3a:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <mapWorld>
		isMapping = !((currentCellWorldStart == currentCellWorld)&(currentOrientationStart == currentOrientation));
    1d3e:	20 e0       	ldi	r18, 0x00	; 0
    1d40:	30 e0       	ldi	r19, 0x00	; 0
    1d42:	90 91 11 06 	lds	r25, 0x0611
    1d46:	80 91 10 06 	lds	r24, 0x0610
    1d4a:	98 17       	cp	r25, r24
    1d4c:	11 f0       	breq	.+4      	; 0x1d52 <CBOT_main+0x78>
    1d4e:	21 e0       	ldi	r18, 0x01	; 1
    1d50:	30 e0       	ldi	r19, 0x00	; 0
    1d52:	40 e0       	ldi	r20, 0x00	; 0
    1d54:	50 e0       	ldi	r21, 0x00	; 0
    1d56:	90 91 8e 05 	lds	r25, 0x058E
    1d5a:	80 91 8f 05 	lds	r24, 0x058F
    1d5e:	98 17       	cp	r25, r24
    1d60:	11 f0       	breq	.+4      	; 0x1d66 <CBOT_main+0x8c>
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	50 e0       	ldi	r21, 0x00	; 0
    1d66:	24 2b       	or	r18, r20
    1d68:	35 2b       	or	r19, r21
    1d6a:	20 93 a5 06 	sts	0x06A5, r18
	LCD_clear();
	
	
	isMapping = 1;
	
	while(isMapping)
    1d6e:	80 91 a5 06 	lds	r24, 0x06A5
    1d72:	88 23       	and	r24, r24
    1d74:	e1 f6       	brne	.-72     	; 0x1d2e <CBOT_main+0x54>
		mapWorld();
		isMapping = !((currentCellWorldStart == currentCellWorld)&(currentOrientationStart == currentOrientation));
	}
	
	// Enter the robot's current (starting) position
	LCD_printf("START Path\nlocation\n\n\n");	
    1d76:	87 e1       	ldi	r24, 0x17	; 23
    1d78:	93 e0       	ldi	r25, 0x03	; 3
    1d7a:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1d7e:	88 ee       	ldi	r24, 0xE8	; 232
    1d80:	93 e0       	ldi	r25, 0x03	; 3
    1d82:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1d86:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	worldInput();
    1d8a:	0e 94 ca 0b 	call	0x1794	; 0x1794 <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1d8e:	88 ee       	ldi	r24, 0xE8	; 232
    1d90:	93 e0       	ldi	r25, 0x03	; 3
    1d92:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1d96:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Path\norientation\n\n\n");
    1d9a:	8d e2       	ldi	r24, 0x2D	; 45
    1d9c:	93 e0       	ldi	r25, 0x03	; 3
    1d9e:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1da2:	88 ee       	ldi	r24, 0xE8	; 232
    1da4:	93 e0       	ldi	r25, 0x03	; 3
    1da6:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1daa:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	orientationInput();
    1dae:	0e 94 0d 0c 	call	0x181a	; 0x181a <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1db2:	88 ee       	ldi	r24, 0xE8	; 232
    1db4:	93 e0       	ldi	r25, 0x03	; 3
    1db6:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1dba:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	
	// Enter the robot topological commands
	LCD_printf("ENTER Path\ncommands\n\n\n");
    1dbe:	86 e4       	ldi	r24, 0x46	; 70
    1dc0:	93 e0       	ldi	r25, 0x03	; 3
    1dc2:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1dc6:	88 ee       	ldi	r24, 0xE8	; 232
    1dc8:	93 e0       	ldi	r25, 0x03	; 3
    1dca:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1dce:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	movesInput();
    1dd2:	0e 94 77 0b 	call	0x16ee	; 0x16ee <movesInput>
	TMRSRVC_delay(1000);//wait 1 seconds
    1dd6:	88 ee       	ldi	r24, 0xE8	; 232
    1dd8:	93 e0       	ldi	r25, 0x03	; 3
    1dda:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1dde:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	
	// Print the robot gateways
	LCD_printf("Robot Gateways:\n\n\n\n");
    1de2:	8c e5       	ldi	r24, 0x5C	; 92
    1de4:	93 e0       	ldi	r25, 0x03	; 3
    1de6:	0e 94 5b 34 	call	0x68b6	; 0x68b6 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1dea:	88 ee       	ldi	r24, 0xE8	; 232
    1dec:	93 e0       	ldi	r25, 0x03	; 3
    1dee:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1df2:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
	getGateways();
    1df6:	0e 94 6d 0c 	call	0x18da	; 0x18da <getGateways>
	TMRSRVC_delay(1000);//wait 1 seconds
    1dfa:	88 ee       	ldi	r24, 0xE8	; 232
    1dfc:	93 e0       	ldi	r25, 0x03	; 3
    1dfe:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
	LCD_clear();
    1e02:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
		
		
	// Infinite loop
	while (1)
    {
		checkIR();	
    1e06:	0e 94 94 16 	call	0x2d28	; 0x2d28 <checkIR>
    1e0a:	fd cf       	rjmp	.-6      	; 0x1e06 <CBOT_main+0x12c>

00001e0c <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
    1e0c:	2f 92       	push	r2
    1e0e:	3f 92       	push	r3
    1e10:	4f 92       	push	r4
    1e12:	5f 92       	push	r5
    1e14:	6f 92       	push	r6
    1e16:	7f 92       	push	r7
    1e18:	8f 92       	push	r8
    1e1a:	9f 92       	push	r9
    1e1c:	af 92       	push	r10
    1e1e:	bf 92       	push	r11
    1e20:	cf 92       	push	r12
    1e22:	df 92       	push	r13
    1e24:	ef 92       	push	r14
    1e26:	ff 92       	push	r15
    1e28:	0f 93       	push	r16
    1e2a:	1f 93       	push	r17
    1e2c:	df 93       	push	r29
    1e2e:	cf 93       	push	r28
    1e30:	cd b7       	in	r28, 0x3d	; 61
    1e32:	de b7       	in	r29, 0x3e	; 62
    1e34:	64 97       	sbiw	r28, 0x14	; 20
    1e36:	0f b6       	in	r0, 0x3f	; 63
    1e38:	f8 94       	cli
    1e3a:	de bf       	out	0x3e, r29	; 62
    1e3c:	0f be       	out	0x3f, r0	; 63
    1e3e:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
    1e40:	88 23       	and	r24, r24
    1e42:	39 f5       	brne	.+78     	; 0x1e92 <prefilter+0x86>
    1e44:	8e ed       	ldi	r24, 0xDE	; 222
    1e46:	94 e0       	ldi	r25, 0x04	; 4
    1e48:	9c 8b       	std	Y+20, r25	; 0x14
    1e4a:	8b 8b       	std	Y+19, r24	; 0x13
    1e4c:	ad e8       	ldi	r26, 0x8D	; 141
    1e4e:	b6 e0       	ldi	r27, 0x06	; 6
    1e50:	be 83       	std	Y+6, r27	; 0x06
    1e52:	ad 83       	std	Y+5, r26	; 0x05
    1e54:	e4 e0       	ldi	r30, 0x04	; 4
    1e56:	f6 e0       	ldi	r31, 0x06	; 6
    1e58:	fc 83       	std	Y+4, r31	; 0x04
    1e5a:	eb 83       	std	Y+3, r30	; 0x03
    1e5c:	85 e6       	ldi	r24, 0x65	; 101
    1e5e:	95 e0       	ldi	r25, 0x05	; 5
    1e60:	9a 83       	std	Y+2, r25	; 0x02
    1e62:	89 83       	std	Y+1, r24	; 0x01
    1e64:	0f 2e       	mov	r0, r31
    1e66:	f0 e0       	ldi	r31, 0x00	; 0
    1e68:	2f 2e       	mov	r2, r31
    1e6a:	f0 e0       	ldi	r31, 0x00	; 0
    1e6c:	3f 2e       	mov	r3, r31
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	4f 2e       	mov	r4, r31
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	5f 2e       	mov	r5, r31
    1e76:	f0 2d       	mov	r31, r0
    1e78:	2f 86       	std	Y+15, r2	; 0x0f
    1e7a:	38 8a       	std	Y+16, r3	; 0x10
    1e7c:	49 8a       	std	Y+17, r4	; 0x11
    1e7e:	5a 8a       	std	Y+18, r5	; 0x12
    1e80:	2b 86       	std	Y+11, r2	; 0x0b
    1e82:	3c 86       	std	Y+12, r3	; 0x0c
    1e84:	4d 86       	std	Y+13, r4	; 0x0d
    1e86:	5e 86       	std	Y+14, r5	; 0x0e
    1e88:	2f 82       	std	Y+7, r2	; 0x07
    1e8a:	38 86       	std	Y+8, r3	; 0x08
    1e8c:	49 86       	std	Y+9, r4	; 0x09
    1e8e:	5a 86       	std	Y+10, r5	; 0x0a
    1e90:	43 c0       	rjmp	.+134    	; 0x1f18 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    1e92:	a0 90 14 06 	lds	r10, 0x0614
    1e96:	b0 90 15 06 	lds	r11, 0x0615
    1e9a:	c0 90 16 06 	lds	r12, 0x0616
    1e9e:	d0 90 17 06 	lds	r13, 0x0617
			rtIR_old[i] = rtIR;
    1ea2:	e0 90 19 06 	lds	r14, 0x0619
    1ea6:	f0 90 1a 06 	lds	r15, 0x061A
    1eaa:	00 91 1b 06 	lds	r16, 0x061B
    1eae:	10 91 1c 06 	lds	r17, 0x061C
			ftIR_old[i] = ftIR;
    1eb2:	20 90 e6 04 	lds	r2, 0x04E6
    1eb6:	30 90 e7 04 	lds	r3, 0x04E7
    1eba:	40 90 e8 04 	lds	r4, 0x04E8
    1ebe:	50 90 e9 04 	lds	r5, 0x04E9
			bkIR_old[i] = bkIR;
    1ec2:	20 91 f0 04 	lds	r18, 0x04F0
    1ec6:	30 91 f1 04 	lds	r19, 0x04F1
    1eca:	40 91 f2 04 	lds	r20, 0x04F2
    1ece:	50 91 f3 04 	lds	r21, 0x04F3
    1ed2:	80 e0       	ldi	r24, 0x00	; 0
    1ed4:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    1ed6:	fc 01       	movw	r30, r24
    1ed8:	e2 59       	subi	r30, 0x92	; 146
    1eda:	fb 4f       	sbci	r31, 0xFB	; 251
    1edc:	a0 82       	st	Z, r10
    1ede:	b1 82       	std	Z+1, r11	; 0x01
    1ee0:	c2 82       	std	Z+2, r12	; 0x02
    1ee2:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
    1ee4:	fc 01       	movw	r30, r24
    1ee6:	e3 5e       	subi	r30, 0xE3	; 227
    1ee8:	f9 4f       	sbci	r31, 0xF9	; 249
    1eea:	e0 82       	st	Z, r14
    1eec:	f1 82       	std	Z+1, r15	; 0x01
    1eee:	02 83       	std	Z+2, r16	; 0x02
    1ef0:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
    1ef2:	fc 01       	movw	r30, r24
    1ef4:	ec 56       	subi	r30, 0x6C	; 108
    1ef6:	fa 4f       	sbci	r31, 0xFA	; 250
    1ef8:	20 82       	st	Z, r2
    1efa:	31 82       	std	Z+1, r3	; 0x01
    1efc:	42 82       	std	Z+2, r4	; 0x02
    1efe:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
    1f00:	fc 01       	movw	r30, r24
    1f02:	eb 50       	subi	r30, 0x0B	; 11
    1f04:	fb 4f       	sbci	r31, 0xFB	; 251
    1f06:	20 83       	st	Z, r18
    1f08:	31 83       	std	Z+1, r19	; 0x01
    1f0a:	42 83       	std	Z+2, r20	; 0x02
    1f0c:	53 83       	std	Z+3, r21	; 0x03
    1f0e:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
    1f10:	88 37       	cpi	r24, 0x78	; 120
    1f12:	91 05       	cpc	r25, r1
    1f14:	01 f7       	brne	.-64     	; 0x1ed6 <prefilter+0xca>
    1f16:	96 cf       	rjmp	.-212    	; 0x1e44 <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
    1f18:	ab 89       	ldd	r26, Y+19	; 0x13
    1f1a:	bc 89       	ldd	r27, Y+20	; 0x14
    1f1c:	2d 91       	ld	r18, X+
    1f1e:	3d 91       	ld	r19, X+
    1f20:	4d 91       	ld	r20, X+
    1f22:	5c 91       	ld	r21, X
    1f24:	13 97       	sbiw	r26, 0x03	; 3
    1f26:	fd 01       	movw	r30, r26
    1f28:	24 83       	std	Z+4, r18	; 0x04
    1f2a:	35 83       	std	Z+5, r19	; 0x05
    1f2c:	46 83       	std	Z+6, r20	; 0x06
    1f2e:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
    1f30:	ad 81       	ldd	r26, Y+5	; 0x05
    1f32:	be 81       	ldd	r27, Y+6	; 0x06
    1f34:	ed 90       	ld	r14, X+
    1f36:	fd 90       	ld	r15, X+
    1f38:	0d 91       	ld	r16, X+
    1f3a:	1c 91       	ld	r17, X
    1f3c:	13 97       	sbiw	r26, 0x03	; 3
    1f3e:	fd 01       	movw	r30, r26
    1f40:	e4 82       	std	Z+4, r14	; 0x04
    1f42:	f5 82       	std	Z+5, r15	; 0x05
    1f44:	06 83       	std	Z+6, r16	; 0x06
    1f46:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
    1f48:	ab 81       	ldd	r26, Y+3	; 0x03
    1f4a:	bc 81       	ldd	r27, Y+4	; 0x04
    1f4c:	ad 90       	ld	r10, X+
    1f4e:	bd 90       	ld	r11, X+
    1f50:	cd 90       	ld	r12, X+
    1f52:	dc 90       	ld	r13, X
    1f54:	13 97       	sbiw	r26, 0x03	; 3
    1f56:	fd 01       	movw	r30, r26
    1f58:	a4 82       	std	Z+4, r10	; 0x04
    1f5a:	b5 82       	std	Z+5, r11	; 0x05
    1f5c:	c6 82       	std	Z+6, r12	; 0x06
    1f5e:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
    1f60:	a9 81       	ldd	r26, Y+1	; 0x01
    1f62:	ba 81       	ldd	r27, Y+2	; 0x02
    1f64:	6d 90       	ld	r6, X+
    1f66:	7d 90       	ld	r7, X+
    1f68:	8d 90       	ld	r8, X+
    1f6a:	9c 90       	ld	r9, X
    1f6c:	13 97       	sbiw	r26, 0x03	; 3
    1f6e:	fd 01       	movw	r30, r26
    1f70:	64 82       	std	Z+4, r6	; 0x04
    1f72:	75 82       	std	Z+5, r7	; 0x05
    1f74:	86 82       	std	Z+6, r8	; 0x06
    1f76:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
    1f78:	c2 01       	movw	r24, r4
    1f7a:	b1 01       	movw	r22, r2
    1f7c:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    1f80:	1b 01       	movw	r2, r22
    1f82:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
    1f84:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f86:	78 89       	ldd	r23, Y+16	; 0x10
    1f88:	89 89       	ldd	r24, Y+17	; 0x11
    1f8a:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8c:	a8 01       	movw	r20, r16
    1f8e:	97 01       	movw	r18, r14
    1f90:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    1f94:	6f 87       	std	Y+15, r22	; 0x0f
    1f96:	78 8b       	std	Y+16, r23	; 0x10
    1f98:	89 8b       	std	Y+17, r24	; 0x11
    1f9a:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
    1f9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fa0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fa2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fa4:	a6 01       	movw	r20, r12
    1fa6:	95 01       	movw	r18, r10
    1fa8:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    1fac:	6b 87       	std	Y+11, r22	; 0x0b
    1fae:	7c 87       	std	Y+12, r23	; 0x0c
    1fb0:	8d 87       	std	Y+13, r24	; 0x0d
    1fb2:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
    1fb4:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb6:	78 85       	ldd	r23, Y+8	; 0x08
    1fb8:	89 85       	ldd	r24, Y+9	; 0x09
    1fba:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fbc:	a4 01       	movw	r20, r8
    1fbe:	93 01       	movw	r18, r6
    1fc0:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    1fc4:	6f 83       	std	Y+7, r22	; 0x07
    1fc6:	78 87       	std	Y+8, r23	; 0x08
    1fc8:	89 87       	std	Y+9, r24	; 0x09
    1fca:	9a 87       	std	Y+10, r25	; 0x0a
    1fcc:	8b 89       	ldd	r24, Y+19	; 0x13
    1fce:	9c 89       	ldd	r25, Y+20	; 0x14
    1fd0:	04 97       	sbiw	r24, 0x04	; 4
    1fd2:	9c 8b       	std	Y+20, r25	; 0x14
    1fd4:	8b 8b       	std	Y+19, r24	; 0x13
    1fd6:	ad 81       	ldd	r26, Y+5	; 0x05
    1fd8:	be 81       	ldd	r27, Y+6	; 0x06
    1fda:	14 97       	sbiw	r26, 0x04	; 4
    1fdc:	be 83       	std	Y+6, r27	; 0x06
    1fde:	ad 83       	std	Y+5, r26	; 0x05
    1fe0:	eb 81       	ldd	r30, Y+3	; 0x03
    1fe2:	fc 81       	ldd	r31, Y+4	; 0x04
    1fe4:	34 97       	sbiw	r30, 0x04	; 4
    1fe6:	fc 83       	std	Y+4, r31	; 0x04
    1fe8:	eb 83       	std	Y+3, r30	; 0x03
    1fea:	89 81       	ldd	r24, Y+1	; 0x01
    1fec:	9a 81       	ldd	r25, Y+2	; 0x02
    1fee:	04 97       	sbiw	r24, 0x04	; 4
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
    1ff4:	ab 89       	ldd	r26, Y+19	; 0x13
    1ff6:	bc 89       	ldd	r27, Y+20	; 0x14
    1ff8:	a6 56       	subi	r26, 0x66	; 102
    1ffa:	b4 40       	sbci	r27, 0x04	; 4
    1ffc:	09 f0       	breq	.+2      	; 0x2000 <prefilter+0x1f4>
    1ffe:	8c cf       	rjmp	.-232    	; 0x1f18 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
    2000:	80 91 14 06 	lds	r24, 0x0614
    2004:	90 91 15 06 	lds	r25, 0x0615
    2008:	a0 91 16 06 	lds	r26, 0x0616
    200c:	b0 91 17 06 	lds	r27, 0x0617
    2010:	eb 89       	ldd	r30, Y+19	; 0x13
    2012:	fc 89       	ldd	r31, Y+20	; 0x14
    2014:	80 87       	std	Z+8, r24	; 0x08
    2016:	91 87       	std	Z+9, r25	; 0x09
    2018:	a2 87       	std	Z+10, r26	; 0x0a
    201a:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
    201c:	80 91 19 06 	lds	r24, 0x0619
    2020:	90 91 1a 06 	lds	r25, 0x061A
    2024:	a0 91 1b 06 	lds	r26, 0x061B
    2028:	b0 91 1c 06 	lds	r27, 0x061C
    202c:	80 93 1d 06 	sts	0x061D, r24
    2030:	90 93 1e 06 	sts	0x061E, r25
    2034:	a0 93 1f 06 	sts	0x061F, r26
    2038:	b0 93 20 06 	sts	0x0620, r27
	ftIR_old[0] = ftIR;
    203c:	80 91 e6 04 	lds	r24, 0x04E6
    2040:	90 91 e7 04 	lds	r25, 0x04E7
    2044:	a0 91 e8 04 	lds	r26, 0x04E8
    2048:	b0 91 e9 04 	lds	r27, 0x04E9
    204c:	80 93 94 05 	sts	0x0594, r24
    2050:	90 93 95 05 	sts	0x0595, r25
    2054:	a0 93 96 05 	sts	0x0596, r26
    2058:	b0 93 97 05 	sts	0x0597, r27
	bkIR_old[0] = bkIR;
    205c:	80 91 f0 04 	lds	r24, 0x04F0
    2060:	90 91 f1 04 	lds	r25, 0x04F1
    2064:	a0 91 f2 04 	lds	r26, 0x04F2
    2068:	b0 91 f3 04 	lds	r27, 0x04F3
    206c:	80 93 f5 04 	sts	0x04F5, r24
    2070:	90 93 f6 04 	sts	0x04F6, r25
    2074:	a0 93 f7 04 	sts	0x04F7, r26
    2078:	b0 93 f8 04 	sts	0x04F8, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
    207c:	c2 01       	movw	r24, r4
    207e:	b1 01       	movw	r22, r2
    2080:	20 e0       	ldi	r18, 0x00	; 0
    2082:	30 e0       	ldi	r19, 0x00	; 0
    2084:	40 ef       	ldi	r20, 0xF0	; 240
    2086:	51 e4       	ldi	r21, 0x41	; 65
    2088:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    208c:	60 93 14 06 	sts	0x0614, r22
    2090:	70 93 15 06 	sts	0x0615, r23
    2094:	80 93 16 06 	sts	0x0616, r24
    2098:	90 93 17 06 	sts	0x0617, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
    209c:	6f 85       	ldd	r22, Y+15	; 0x0f
    209e:	78 89       	ldd	r23, Y+16	; 0x10
    20a0:	89 89       	ldd	r24, Y+17	; 0x11
    20a2:	9a 89       	ldd	r25, Y+18	; 0x12
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 ef       	ldi	r20, 0xF0	; 240
    20aa:	51 e4       	ldi	r21, 0x41	; 65
    20ac:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    20b0:	60 93 19 06 	sts	0x0619, r22
    20b4:	70 93 1a 06 	sts	0x061A, r23
    20b8:	80 93 1b 06 	sts	0x061B, r24
    20bc:	90 93 1c 06 	sts	0x061C, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
    20c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    20c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    20c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    20c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    20c8:	20 e0       	ldi	r18, 0x00	; 0
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	40 ef       	ldi	r20, 0xF0	; 240
    20ce:	51 e4       	ldi	r21, 0x41	; 65
    20d0:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    20d4:	60 93 e6 04 	sts	0x04E6, r22
    20d8:	70 93 e7 04 	sts	0x04E7, r23
    20dc:	80 93 e8 04 	sts	0x04E8, r24
    20e0:	90 93 e9 04 	sts	0x04E9, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
    20e4:	6f 81       	ldd	r22, Y+7	; 0x07
    20e6:	78 85       	ldd	r23, Y+8	; 0x08
    20e8:	89 85       	ldd	r24, Y+9	; 0x09
    20ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	40 ef       	ldi	r20, 0xF0	; 240
    20f2:	51 e4       	ldi	r21, 0x41	; 65
    20f4:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    20f8:	60 93 f0 04 	sts	0x04F0, r22
    20fc:	70 93 f1 04 	sts	0x04F1, r23
    2100:	80 93 f2 04 	sts	0x04F2, r24
    2104:	90 93 f3 04 	sts	0x04F3, r25
}
    2108:	64 96       	adiw	r28, 0x14	; 20
    210a:	0f b6       	in	r0, 0x3f	; 63
    210c:	f8 94       	cli
    210e:	de bf       	out	0x3e, r29	; 62
    2110:	0f be       	out	0x3f, r0	; 63
    2112:	cd bf       	out	0x3d, r28	; 61
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	af 90       	pop	r10
    2128:	9f 90       	pop	r9
    212a:	8f 90       	pop	r8
    212c:	7f 90       	pop	r7
    212e:	6f 90       	pop	r6
    2130:	5f 90       	pop	r5
    2132:	4f 90       	pop	r4
    2134:	3f 90       	pop	r3
    2136:	2f 90       	pop	r2
    2138:	08 95       	ret

0000213a <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
    213a:	af 92       	push	r10
    213c:	bf 92       	push	r11
    213e:	cf 92       	push	r12
    2140:	df 92       	push	r13
    2142:	ef 92       	push	r14
    2144:	ff 92       	push	r15
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	7b 01       	movw	r14, r22
    214c:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
    214e:	44 23       	and	r20, r20
    2150:	61 f0       	breq	.+24     	; 0x216a <pidController+0x30>
		Ierror = 0;
    2152:	80 e0       	ldi	r24, 0x00	; 0
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	a0 e0       	ldi	r26, 0x00	; 0
    2158:	b0 e0       	ldi	r27, 0x00	; 0
    215a:	80 93 ea 04 	sts	0x04EA, r24
    215e:	90 93 eb 04 	sts	0x04EB, r25
    2162:	a0 93 ec 04 	sts	0x04EC, r26
    2166:	b0 93 ed 04 	sts	0x04ED, r27
	}
	// At the current error to the running sum
	Ierror += error;
    216a:	c8 01       	movw	r24, r16
    216c:	b7 01       	movw	r22, r14
    216e:	20 91 ea 04 	lds	r18, 0x04EA
    2172:	30 91 eb 04 	lds	r19, 0x04EB
    2176:	40 91 ec 04 	lds	r20, 0x04EC
    217a:	50 91 ed 04 	lds	r21, 0x04ED
    217e:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    2182:	5b 01       	movw	r10, r22
    2184:	6c 01       	movw	r12, r24
    2186:	60 93 ea 04 	sts	0x04EA, r22
    218a:	70 93 eb 04 	sts	0x04EB, r23
    218e:	80 93 ec 04 	sts	0x04EC, r24
    2192:	90 93 ed 04 	sts	0x04ED, r25
    2196:	c8 01       	movw	r24, r16
    2198:	b7 01       	movw	r22, r14
    219a:	20 91 90 05 	lds	r18, 0x0590
    219e:	30 91 91 05 	lds	r19, 0x0591
    21a2:	40 91 92 05 	lds	r20, 0x0592
    21a6:	50 91 93 05 	lds	r21, 0x0593
    21aa:	0e 94 10 2a 	call	0x5420	; 0x5420 <__subsf3>
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	50 e0       	ldi	r21, 0x00	; 0
    21b6:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    21ba:	9b 01       	movw	r18, r22
    21bc:	ac 01       	movw	r20, r24
    21be:	c8 01       	movw	r24, r16
    21c0:	b7 01       	movw	r22, r14
    21c2:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    21c6:	7b 01       	movw	r14, r22
    21c8:	8c 01       	movw	r16, r24
    21ca:	c6 01       	movw	r24, r12
    21cc:	b5 01       	movw	r22, r10
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e0       	ldi	r20, 0x00	; 0
    21d4:	50 e0       	ldi	r21, 0x00	; 0
    21d6:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    21da:	9b 01       	movw	r18, r22
    21dc:	ac 01       	movw	r20, r24
    21de:	c8 01       	movw	r24, r16
    21e0:	b7 01       	movw	r22, r14
    21e2:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
    21e6:	1f 91       	pop	r17
    21e8:	0f 91       	pop	r16
    21ea:	ff 90       	pop	r15
    21ec:	ef 90       	pop	r14
    21ee:	df 90       	pop	r13
    21f0:	cf 90       	pop	r12
    21f2:	bf 90       	pop	r11
    21f4:	af 90       	pop	r10
    21f6:	08 95       	ret

000021f8 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    21f8:	44 23       	and	r20, r20
    21fa:	81 f0       	breq	.+32     	; 0x221c <rotateCell+0x24>
    21fc:	06 c0       	rjmp	.+12     	; 0x220a <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    21fe:	e8 2f       	mov	r30, r24
    2200:	f0 e0       	ldi	r31, 0x00	; 0
    2202:	e1 59       	subi	r30, 0x91	; 145
    2204:	fc 4f       	sbci	r31, 0xFC	; 252
    2206:	80 81       	ld	r24, Z
			orient--;
    2208:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    220a:	66 23       	and	r22, r22
    220c:	c1 f7       	brne	.-16     	; 0x21fe <rotateCell+0x6>
    220e:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    2210:	e8 2f       	mov	r30, r24
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	e1 58       	subi	r30, 0x81	; 129
    2216:	fc 4f       	sbci	r31, 0xFC	; 252
    2218:	80 81       	ld	r24, Z
			orient--;
    221a:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    221c:	66 23       	and	r22, r22
    221e:	c1 f7       	brne	.-16     	; 0x2210 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    2220:	08 95       	ret

00002222 <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    2222:	2f 92       	push	r2
    2224:	3f 92       	push	r3
    2226:	4f 92       	push	r4
    2228:	5f 92       	push	r5
    222a:	6f 92       	push	r6
    222c:	7f 92       	push	r7
    222e:	8f 92       	push	r8
    2230:	9f 92       	push	r9
    2232:	af 92       	push	r10
    2234:	bf 92       	push	r11
    2236:	cf 92       	push	r12
    2238:	df 92       	push	r13
    223a:	ef 92       	push	r14
    223c:	ff 92       	push	r15
    223e:	0f 93       	push	r16
    2240:	1f 93       	push	r17
    2242:	df 93       	push	r29
    2244:	cf 93       	push	r28
    2246:	cd b7       	in	r28, 0x3d	; 61
    2248:	de b7       	in	r29, 0x3e	; 62
    224a:	a0 97       	sbiw	r28, 0x20	; 32
    224c:	0f b6       	in	r0, 0x3f	; 63
    224e:	f8 94       	cli
    2250:	de bf       	out	0x3e, r29	; 62
    2252:	0f be       	out	0x3f, r0	; 63
    2254:	cd bf       	out	0x3d, r28	; 61
    2256:	2b 01       	movw	r4, r22
    2258:	3c 01       	movw	r6, r24
    225a:	2d 83       	std	Y+5, r18	; 0x05
    225c:	3e 83       	std	Y+6, r19	; 0x06
    225e:	4f 83       	std	Y+7, r20	; 0x07
    2260:	58 87       	std	Y+8, r21	; 0x08
    2262:	e9 86       	std	Y+9, r14	; 0x09
    2264:	fa 86       	std	Y+10, r15	; 0x0a
    2266:	0b 87       	std	Y+11, r16	; 0x0b
    2268:	1c 87       	std	Y+12, r17	; 0x0c
    226a:	ad 86       	std	Y+13, r10	; 0x0d
    226c:	be 86       	std	Y+14, r11	; 0x0e
    226e:	cf 86       	std	Y+15, r12	; 0x0f
    2270:	d8 8a       	std	Y+16, r13	; 0x10
    2272:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    2274:	33 24       	eor	r3, r3
    2276:	ca 01       	movw	r24, r20
    2278:	b9 01       	movw	r22, r18
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	30 e0       	ldi	r19, 0x00	; 0
    227e:	40 e0       	ldi	r20, 0x00	; 0
    2280:	50 e0       	ldi	r21, 0x00	; 0
    2282:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__gesf2>
    2286:	18 16       	cp	r1, r24
    2288:	14 f4       	brge	.+4      	; 0x228e <move_arc_stnb+0x6c>
    228a:	33 24       	eor	r3, r3
    228c:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    228e:	6d 81       	ldd	r22, Y+5	; 0x05
    2290:	7e 81       	ldd	r23, Y+6	; 0x06
    2292:	8f 81       	ldd	r24, Y+7	; 0x07
    2294:	98 85       	ldd	r25, Y+8	; 0x08
    2296:	2c ed       	ldi	r18, 0xDC	; 220
    2298:	38 eb       	ldi	r19, 0xB8	; 184
    229a:	48 e0       	ldi	r20, 0x08	; 8
    229c:	5e e3       	ldi	r21, 0x3E	; 62
    229e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    22a2:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__fixsfsi>
    22a6:	9b 01       	movw	r18, r22
    22a8:	77 ff       	sbrs	r23, 7
    22aa:	03 c0       	rjmp	.+6      	; 0x22b2 <move_arc_stnb+0x90>
    22ac:	30 95       	com	r19
    22ae:	21 95       	neg	r18
    22b0:	3f 4f       	sbci	r19, 0xFF	; 255
    22b2:	b9 01       	movw	r22, r18
    22b4:	88 27       	eor	r24, r24
    22b6:	77 fd       	sbrc	r23, 7
    22b8:	80 95       	com	r24
    22ba:	98 2f       	mov	r25, r24
    22bc:	0e 94 14 2b 	call	0x5628	; 0x5628 <__floatsisf>
    22c0:	69 83       	std	Y+1, r22	; 0x01
    22c2:	7a 83       	std	Y+2, r23	; 0x02
    22c4:	8b 83       	std	Y+3, r24	; 0x03
    22c6:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    22c8:	69 85       	ldd	r22, Y+9	; 0x09
    22ca:	7a 85       	ldd	r23, Y+10	; 0x0a
    22cc:	8b 85       	ldd	r24, Y+11	; 0x0b
    22ce:	9c 85       	ldd	r25, Y+12	; 0x0c
    22d0:	2c ed       	ldi	r18, 0xDC	; 220
    22d2:	38 eb       	ldi	r19, 0xB8	; 184
    22d4:	48 e0       	ldi	r20, 0x08	; 8
    22d6:	5e e3       	ldi	r21, 0x3E	; 62
    22d8:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    22dc:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__fixsfsi>
    22e0:	9b 01       	movw	r18, r22
    22e2:	77 ff       	sbrs	r23, 7
    22e4:	03 c0       	rjmp	.+6      	; 0x22ec <move_arc_stnb+0xca>
    22e6:	30 95       	com	r19
    22e8:	21 95       	neg	r18
    22ea:	3f 4f       	sbci	r19, 0xFF	; 255
    22ec:	b9 01       	movw	r22, r18
    22ee:	88 27       	eor	r24, r24
    22f0:	77 fd       	sbrc	r23, 7
    22f2:	80 95       	com	r24
    22f4:	98 2f       	mov	r25, r24
    22f6:	0e 94 14 2b 	call	0x5628	; 0x5628 <__floatsisf>
    22fa:	4b 01       	movw	r8, r22
    22fc:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    22fe:	6d 85       	ldd	r22, Y+13	; 0x0d
    2300:	7e 85       	ldd	r23, Y+14	; 0x0e
    2302:	8f 85       	ldd	r24, Y+15	; 0x0f
    2304:	98 89       	ldd	r25, Y+16	; 0x10
    2306:	2c ed       	ldi	r18, 0xDC	; 220
    2308:	38 eb       	ldi	r19, 0xB8	; 184
    230a:	48 e0       	ldi	r20, 0x08	; 8
    230c:	5e e3       	ldi	r21, 0x3E	; 62
    230e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2312:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__fixsfsi>
    2316:	9b 01       	movw	r18, r22
    2318:	77 ff       	sbrs	r23, 7
    231a:	03 c0       	rjmp	.+6      	; 0x2322 <move_arc_stnb+0x100>
    231c:	30 95       	com	r19
    231e:	21 95       	neg	r18
    2320:	3f 4f       	sbci	r19, 0xFF	; 255
    2322:	b9 01       	movw	r22, r18
    2324:	88 27       	eor	r24, r24
    2326:	77 fd       	sbrc	r23, 7
    2328:	80 95       	com	r24
    232a:	98 2f       	mov	r25, r24
    232c:	0e 94 14 2b 	call	0x5628	; 0x5628 <__floatsisf>
    2330:	6b 01       	movw	r12, r22
    2332:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    2334:	c3 01       	movw	r24, r6
    2336:	b2 01       	movw	r22, r4
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	5f e4       	ldi	r21, 0x4F	; 79
    2340:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
    2344:	88 23       	and	r24, r24
    2346:	a1 f5       	brne	.+104    	; 0x23b0 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    2348:	69 81       	ldd	r22, Y+1	; 0x01
    234a:	7a 81       	ldd	r23, Y+2	; 0x02
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2354:	2b 01       	movw	r4, r22
    2356:	3c 01       	movw	r6, r24
    2358:	c5 01       	movw	r24, r10
    235a:	b4 01       	movw	r22, r8
    235c:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2360:	4b 01       	movw	r8, r22
    2362:	5c 01       	movw	r10, r24
    2364:	c7 01       	movw	r24, r14
    2366:	b6 01       	movw	r22, r12
    2368:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    236c:	6b 01       	movw	r12, r22
    236e:	7c 01       	movw	r14, r24
    2370:	2d b7       	in	r18, 0x3d	; 61
    2372:	3e b7       	in	r19, 0x3e	; 62
    2374:	29 50       	subi	r18, 0x09	; 9
    2376:	30 40       	sbci	r19, 0x00	; 0
    2378:	0f b6       	in	r0, 0x3f	; 63
    237a:	f8 94       	cli
    237c:	3e bf       	out	0x3e, r19	; 62
    237e:	0f be       	out	0x3f, r0	; 63
    2380:	2d bf       	out	0x3d, r18	; 61
    2382:	ed b7       	in	r30, 0x3d	; 61
    2384:	fe b7       	in	r31, 0x3e	; 62
    2386:	31 96       	adiw	r30, 0x01	; 1
    2388:	ad b7       	in	r26, 0x3d	; 61
    238a:	be b7       	in	r27, 0x3e	; 62
    238c:	12 96       	adiw	r26, 0x02	; 2
    238e:	5c 92       	st	X, r5
    2390:	4e 92       	st	-X, r4
    2392:	11 97       	sbiw	r26, 0x01	; 1
    2394:	93 82       	std	Z+3, r9	; 0x03
    2396:	82 82       	std	Z+2, r8	; 0x02
    2398:	75 83       	std	Z+5, r23	; 0x05
    239a:	64 83       	std	Z+4, r22	; 0x04
    239c:	26 82       	std	Z+6, r2	; 0x06
    239e:	10 86       	std	Z+8, r1	; 0x08
    23a0:	17 82       	std	Z+7, r1	; 0x07
    23a2:	81 e0       	ldi	r24, 0x01	; 1
    23a4:	62 e0       	ldi	r22, 0x02	; 2
    23a6:	43 2d       	mov	r20, r3
    23a8:	92 01       	movw	r18, r4
    23aa:	84 01       	movw	r16, r8
    23ac:	76 01       	movw	r14, r12
    23ae:	c1 c1       	rjmp	.+898    	; 0x2732 <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    23b0:	c3 01       	movw	r24, r6
    23b2:	b2 01       	movw	r22, r4
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	40 e0       	ldi	r20, 0x00	; 0
    23ba:	50 e0       	ldi	r21, 0x00	; 0
    23bc:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
    23c0:	88 23       	and	r24, r24
    23c2:	e9 f5       	brne	.+122    	; 0x243e <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    23c4:	69 81       	ldd	r22, Y+1	; 0x01
    23c6:	7a 81       	ldd	r23, Y+2	; 0x02
    23c8:	8b 81       	ldd	r24, Y+3	; 0x03
    23ca:	9c 81       	ldd	r25, Y+4	; 0x04
    23cc:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    23d0:	3b 01       	movw	r6, r22
    23d2:	c5 01       	movw	r24, r10
    23d4:	b4 01       	movw	r22, r8
    23d6:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    23da:	8b 01       	movw	r16, r22
    23dc:	c7 01       	movw	r24, r14
    23de:	b6 01       	movw	r22, r12
    23e0:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    23e4:	7b 01       	movw	r14, r22
    23e6:	2d b7       	in	r18, 0x3d	; 61
    23e8:	3e b7       	in	r19, 0x3e	; 62
    23ea:	29 50       	subi	r18, 0x09	; 9
    23ec:	30 40       	sbci	r19, 0x00	; 0
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	3e bf       	out	0x3e, r19	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	2d bf       	out	0x3d, r18	; 61
    23f8:	ed b7       	in	r30, 0x3d	; 61
    23fa:	fe b7       	in	r31, 0x3e	; 62
    23fc:	31 96       	adiw	r30, 0x01	; 1
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	33 20       	and	r3, r3
    2402:	09 f4       	brne	.+2      	; 0x2406 <move_arc_stnb+0x1e4>
    2404:	41 e0       	ldi	r20, 0x01	; 1
    2406:	71 82       	std	Z+1, r7	; 0x01
    2408:	60 82       	st	Z, r6
    240a:	13 83       	std	Z+3, r17	; 0x03
    240c:	02 83       	std	Z+2, r16	; 0x02
    240e:	f5 82       	std	Z+5, r15	; 0x05
    2410:	e4 82       	std	Z+4, r14	; 0x04
    2412:	26 82       	std	Z+6, r2	; 0x06
    2414:	10 86       	std	Z+8, r1	; 0x08
    2416:	17 82       	std	Z+7, r1	; 0x07
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	62 e0       	ldi	r22, 0x02	; 2
    241c:	93 01       	movw	r18, r6
    241e:	c2 2c       	mov	r12, r2
    2420:	aa 24       	eor	r10, r10
    2422:	bb 24       	eor	r11, r11
    2424:	83 2c       	mov	r8, r3
    2426:	0e 94 3a 1a 	call	0x3474	; 0x3474 <STEPPER_move>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	ad b7       	in	r26, 0x3d	; 61
    242e:	be b7       	in	r27, 0x3e	; 62
    2430:	19 96       	adiw	r26, 0x09	; 9
    2432:	0f b6       	in	r0, 0x3f	; 63
    2434:	f8 94       	cli
    2436:	be bf       	out	0x3e, r27	; 62
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	ad bf       	out	0x3d, r26	; 61
    243c:	89 c1       	rjmp	.+786    	; 0x2750 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    243e:	c3 01       	movw	r24, r6
    2440:	b2 01       	movw	r22, r4
    2442:	20 e0       	ldi	r18, 0x00	; 0
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	40 e0       	ldi	r20, 0x00	; 0
    2448:	50 e0       	ldi	r21, 0x00	; 0
    244a:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__gesf2>
    244e:	18 16       	cp	r1, r24
    2450:	0c f0       	brlt	.+2      	; 0x2454 <move_arc_stnb+0x232>
    2452:	b1 c0       	rjmp	.+354    	; 0x25b6 <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2454:	66 e6       	ldi	r22, 0x66	; 102
    2456:	76 e6       	ldi	r23, 0x66	; 102
    2458:	8a ea       	ldi	r24, 0xAA	; 170
    245a:	91 ec       	ldi	r25, 0xC1	; 193
    245c:	a3 01       	movw	r20, r6
    245e:	92 01       	movw	r18, r4
    2460:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e8       	ldi	r20, 0x80	; 128
    246a:	5f e3       	ldi	r21, 0x3F	; 63
    246c:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    2470:	7b 01       	movw	r14, r22
    2472:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2474:	66 e6       	ldi	r22, 0x66	; 102
    2476:	76 e6       	ldi	r23, 0x66	; 102
    2478:	8a ea       	ldi	r24, 0xAA	; 170
    247a:	91 e4       	ldi	r25, 0x41	; 65
    247c:	a3 01       	movw	r20, r6
    247e:	92 01       	movw	r18, r4
    2480:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 e8       	ldi	r20, 0x80	; 128
    248a:	5f e3       	ldi	r21, 0x3F	; 63
    248c:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    2490:	5b 01       	movw	r10, r22
    2492:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    2494:	ed b7       	in	r30, 0x3d	; 61
    2496:	fe b7       	in	r31, 0x3e	; 62
    2498:	39 97       	sbiw	r30, 0x09	; 9
    249a:	0f b6       	in	r0, 0x3f	; 63
    249c:	f8 94       	cli
    249e:	fe bf       	out	0x3e, r31	; 62
    24a0:	0f be       	out	0x3f, r0	; 63
    24a2:	ed bf       	out	0x3d, r30	; 61
    24a4:	8d b6       	in	r8, 0x3d	; 61
    24a6:	9e b6       	in	r9, 0x3e	; 62
    24a8:	08 94       	sec
    24aa:	81 1c       	adc	r8, r1
    24ac:	91 1c       	adc	r9, r1
    24ae:	6d 81       	ldd	r22, Y+5	; 0x05
    24b0:	7e 81       	ldd	r23, Y+6	; 0x06
    24b2:	8f 81       	ldd	r24, Y+7	; 0x07
    24b4:	98 85       	ldd	r25, Y+8	; 0x08
    24b6:	a8 01       	movw	r20, r16
    24b8:	97 01       	movw	r18, r14
    24ba:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    24be:	2c ed       	ldi	r18, 0xDC	; 220
    24c0:	38 eb       	ldi	r19, 0xB8	; 184
    24c2:	48 e0       	ldi	r20, 0x08	; 8
    24c4:	5e e3       	ldi	r21, 0x3E	; 62
    24c6:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    24ca:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    24ce:	69 8b       	std	Y+17, r22	; 0x11
    24d0:	7a 8b       	std	Y+18, r23	; 0x12
    24d2:	8b 8b       	std	Y+19, r24	; 0x13
    24d4:	9c 8b       	std	Y+20, r25	; 0x14
    24d6:	69 85       	ldd	r22, Y+9	; 0x09
    24d8:	7a 85       	ldd	r23, Y+10	; 0x0a
    24da:	8b 85       	ldd	r24, Y+11	; 0x0b
    24dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    24de:	a8 01       	movw	r20, r16
    24e0:	97 01       	movw	r18, r14
    24e2:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    24e6:	2c ed       	ldi	r18, 0xDC	; 220
    24e8:	38 eb       	ldi	r19, 0xB8	; 184
    24ea:	48 e0       	ldi	r20, 0x08	; 8
    24ec:	5e e3       	ldi	r21, 0x3E	; 62
    24ee:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    24f2:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    24f6:	6d 8b       	std	Y+21, r22	; 0x15
    24f8:	7e 8b       	std	Y+22, r23	; 0x16
    24fa:	8f 8b       	std	Y+23, r24	; 0x17
    24fc:	98 8f       	std	Y+24, r25	; 0x18
    24fe:	6d 85       	ldd	r22, Y+13	; 0x0d
    2500:	7e 85       	ldd	r23, Y+14	; 0x0e
    2502:	8f 85       	ldd	r24, Y+15	; 0x0f
    2504:	98 89       	ldd	r25, Y+16	; 0x10
    2506:	a8 01       	movw	r20, r16
    2508:	97 01       	movw	r18, r14
    250a:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    250e:	2c ed       	ldi	r18, 0xDC	; 220
    2510:	38 eb       	ldi	r19, 0xB8	; 184
    2512:	48 e0       	ldi	r20, 0x08	; 8
    2514:	5e e3       	ldi	r21, 0x3E	; 62
    2516:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    251a:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    251e:	2b 01       	movw	r4, r22
    2520:	3c 01       	movw	r6, r24
    2522:	6d 81       	ldd	r22, Y+5	; 0x05
    2524:	7e 81       	ldd	r23, Y+6	; 0x06
    2526:	8f 81       	ldd	r24, Y+7	; 0x07
    2528:	98 85       	ldd	r25, Y+8	; 0x08
    252a:	a6 01       	movw	r20, r12
    252c:	95 01       	movw	r18, r10
    252e:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2532:	2c ed       	ldi	r18, 0xDC	; 220
    2534:	38 eb       	ldi	r19, 0xB8	; 184
    2536:	48 e0       	ldi	r20, 0x08	; 8
    2538:	5e e3       	ldi	r21, 0x3E	; 62
    253a:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    253e:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2542:	d4 01       	movw	r26, r8
    2544:	6d 93       	st	X+, r22
    2546:	7c 93       	st	X, r23
    2548:	69 85       	ldd	r22, Y+9	; 0x09
    254a:	7a 85       	ldd	r23, Y+10	; 0x0a
    254c:	8b 85       	ldd	r24, Y+11	; 0x0b
    254e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2550:	a6 01       	movw	r20, r12
    2552:	95 01       	movw	r18, r10
    2554:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2558:	2c ed       	ldi	r18, 0xDC	; 220
    255a:	38 eb       	ldi	r19, 0xB8	; 184
    255c:	48 e0       	ldi	r20, 0x08	; 8
    255e:	5e e3       	ldi	r21, 0x3E	; 62
    2560:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2564:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2568:	f4 01       	movw	r30, r8
    256a:	73 83       	std	Z+3, r23	; 0x03
    256c:	62 83       	std	Z+2, r22	; 0x02
    256e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2570:	7e 85       	ldd	r23, Y+14	; 0x0e
    2572:	8f 85       	ldd	r24, Y+15	; 0x0f
    2574:	98 89       	ldd	r25, Y+16	; 0x10
    2576:	a6 01       	movw	r20, r12
    2578:	95 01       	movw	r18, r10
    257a:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    257e:	2c ed       	ldi	r18, 0xDC	; 220
    2580:	38 eb       	ldi	r19, 0xB8	; 184
    2582:	48 e0       	ldi	r20, 0x08	; 8
    2584:	5e e3       	ldi	r21, 0x3E	; 62
    2586:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    258a:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    258e:	d4 01       	movw	r26, r8
    2590:	15 96       	adiw	r26, 0x05	; 5
    2592:	7c 93       	st	X, r23
    2594:	6e 93       	st	-X, r22
    2596:	14 97       	sbiw	r26, 0x04	; 4
    2598:	16 96       	adiw	r26, 0x06	; 6
    259a:	2c 92       	st	X, r2
    259c:	16 97       	sbiw	r26, 0x06	; 6
    259e:	18 96       	adiw	r26, 0x08	; 8
    25a0:	1c 92       	st	X, r1
    25a2:	1e 92       	st	-X, r1
    25a4:	17 97       	sbiw	r26, 0x07	; 7
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	62 e0       	ldi	r22, 0x02	; 2
    25aa:	43 2d       	mov	r20, r3
    25ac:	29 89       	ldd	r18, Y+17	; 0x11
    25ae:	3a 89       	ldd	r19, Y+18	; 0x12
    25b0:	0d 89       	ldd	r16, Y+21	; 0x15
    25b2:	1e 89       	ldd	r17, Y+22	; 0x16
    25b4:	bd c0       	rjmp	.+378    	; 0x2730 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    25b6:	c3 01       	movw	r24, r6
    25b8:	b2 01       	movw	r22, r4
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	50 e0       	ldi	r21, 0x00	; 0
    25c2:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
    25c6:	87 fd       	sbrc	r24, 7
    25c8:	02 c0       	rjmp	.+4      	; 0x25ce <move_arc_stnb+0x3ac>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	c1 c0       	rjmp	.+386    	; 0x2750 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    25ce:	66 e6       	ldi	r22, 0x66	; 102
    25d0:	76 e6       	ldi	r23, 0x66	; 102
    25d2:	8a ea       	ldi	r24, 0xAA	; 170
    25d4:	91 e4       	ldi	r25, 0x41	; 65
    25d6:	a3 01       	movw	r20, r6
    25d8:	92 01       	movw	r18, r4
    25da:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e8       	ldi	r20, 0x80	; 128
    25e4:	5f e3       	ldi	r21, 0x3F	; 63
    25e6:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    25ea:	7b 01       	movw	r14, r22
    25ec:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    25ee:	66 e6       	ldi	r22, 0x66	; 102
    25f0:	76 e6       	ldi	r23, 0x66	; 102
    25f2:	8a ea       	ldi	r24, 0xAA	; 170
    25f4:	91 ec       	ldi	r25, 0xC1	; 193
    25f6:	a3 01       	movw	r20, r6
    25f8:	92 01       	movw	r18, r4
    25fa:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    25fe:	20 e0       	ldi	r18, 0x00	; 0
    2600:	30 e0       	ldi	r19, 0x00	; 0
    2602:	40 e8       	ldi	r20, 0x80	; 128
    2604:	5f e3       	ldi	r21, 0x3F	; 63
    2606:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    260a:	5b 01       	movw	r10, r22
    260c:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    260e:	2d b7       	in	r18, 0x3d	; 61
    2610:	3e b7       	in	r19, 0x3e	; 62
    2612:	29 50       	subi	r18, 0x09	; 9
    2614:	30 40       	sbci	r19, 0x00	; 0
    2616:	0f b6       	in	r0, 0x3f	; 63
    2618:	f8 94       	cli
    261a:	3e bf       	out	0x3e, r19	; 62
    261c:	0f be       	out	0x3f, r0	; 63
    261e:	2d bf       	out	0x3d, r18	; 61
    2620:	8d b6       	in	r8, 0x3d	; 61
    2622:	9e b6       	in	r9, 0x3e	; 62
    2624:	08 94       	sec
    2626:	81 1c       	adc	r8, r1
    2628:	91 1c       	adc	r9, r1
    262a:	6d 81       	ldd	r22, Y+5	; 0x05
    262c:	7e 81       	ldd	r23, Y+6	; 0x06
    262e:	8f 81       	ldd	r24, Y+7	; 0x07
    2630:	98 85       	ldd	r25, Y+8	; 0x08
    2632:	a8 01       	movw	r20, r16
    2634:	97 01       	movw	r18, r14
    2636:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    263a:	2c ed       	ldi	r18, 0xDC	; 220
    263c:	38 eb       	ldi	r19, 0xB8	; 184
    263e:	48 e0       	ldi	r20, 0x08	; 8
    2640:	5e e3       	ldi	r21, 0x3E	; 62
    2642:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2646:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    264a:	69 8f       	std	Y+25, r22	; 0x19
    264c:	7a 8f       	std	Y+26, r23	; 0x1a
    264e:	8b 8f       	std	Y+27, r24	; 0x1b
    2650:	9c 8f       	std	Y+28, r25	; 0x1c
    2652:	69 85       	ldd	r22, Y+9	; 0x09
    2654:	7a 85       	ldd	r23, Y+10	; 0x0a
    2656:	8b 85       	ldd	r24, Y+11	; 0x0b
    2658:	9c 85       	ldd	r25, Y+12	; 0x0c
    265a:	a8 01       	movw	r20, r16
    265c:	97 01       	movw	r18, r14
    265e:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2662:	2c ed       	ldi	r18, 0xDC	; 220
    2664:	38 eb       	ldi	r19, 0xB8	; 184
    2666:	48 e0       	ldi	r20, 0x08	; 8
    2668:	5e e3       	ldi	r21, 0x3E	; 62
    266a:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    266e:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2672:	6d 8f       	std	Y+29, r22	; 0x1d
    2674:	7e 8f       	std	Y+30, r23	; 0x1e
    2676:	8f 8f       	std	Y+31, r24	; 0x1f
    2678:	98 a3       	std	Y+32, r25	; 0x20
    267a:	6d 85       	ldd	r22, Y+13	; 0x0d
    267c:	7e 85       	ldd	r23, Y+14	; 0x0e
    267e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2680:	98 89       	ldd	r25, Y+16	; 0x10
    2682:	a8 01       	movw	r20, r16
    2684:	97 01       	movw	r18, r14
    2686:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    268a:	2c ed       	ldi	r18, 0xDC	; 220
    268c:	38 eb       	ldi	r19, 0xB8	; 184
    268e:	48 e0       	ldi	r20, 0x08	; 8
    2690:	5e e3       	ldi	r21, 0x3E	; 62
    2692:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2696:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    269a:	2b 01       	movw	r4, r22
    269c:	3c 01       	movw	r6, r24
    269e:	6d 81       	ldd	r22, Y+5	; 0x05
    26a0:	7e 81       	ldd	r23, Y+6	; 0x06
    26a2:	8f 81       	ldd	r24, Y+7	; 0x07
    26a4:	98 85       	ldd	r25, Y+8	; 0x08
    26a6:	a6 01       	movw	r20, r12
    26a8:	95 01       	movw	r18, r10
    26aa:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    26ae:	2c ed       	ldi	r18, 0xDC	; 220
    26b0:	38 eb       	ldi	r19, 0xB8	; 184
    26b2:	48 e0       	ldi	r20, 0x08	; 8
    26b4:	5e e3       	ldi	r21, 0x3E	; 62
    26b6:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    26ba:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    26be:	d4 01       	movw	r26, r8
    26c0:	6d 93       	st	X+, r22
    26c2:	7c 93       	st	X, r23
    26c4:	69 85       	ldd	r22, Y+9	; 0x09
    26c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    26c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    26ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    26cc:	a6 01       	movw	r20, r12
    26ce:	95 01       	movw	r18, r10
    26d0:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    26d4:	2c ed       	ldi	r18, 0xDC	; 220
    26d6:	38 eb       	ldi	r19, 0xB8	; 184
    26d8:	48 e0       	ldi	r20, 0x08	; 8
    26da:	5e e3       	ldi	r21, 0x3E	; 62
    26dc:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    26e0:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    26e4:	f4 01       	movw	r30, r8
    26e6:	73 83       	std	Z+3, r23	; 0x03
    26e8:	62 83       	std	Z+2, r22	; 0x02
    26ea:	6d 85       	ldd	r22, Y+13	; 0x0d
    26ec:	7e 85       	ldd	r23, Y+14	; 0x0e
    26ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f0:	98 89       	ldd	r25, Y+16	; 0x10
    26f2:	a6 01       	movw	r20, r12
    26f4:	95 01       	movw	r18, r10
    26f6:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    26fa:	2c ed       	ldi	r18, 0xDC	; 220
    26fc:	38 eb       	ldi	r19, 0xB8	; 184
    26fe:	48 e0       	ldi	r20, 0x08	; 8
    2700:	5e e3       	ldi	r21, 0x3E	; 62
    2702:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2706:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    270a:	d4 01       	movw	r26, r8
    270c:	15 96       	adiw	r26, 0x05	; 5
    270e:	7c 93       	st	X, r23
    2710:	6e 93       	st	-X, r22
    2712:	14 97       	sbiw	r26, 0x04	; 4
    2714:	16 96       	adiw	r26, 0x06	; 6
    2716:	2c 92       	st	X, r2
    2718:	16 97       	sbiw	r26, 0x06	; 6
    271a:	18 96       	adiw	r26, 0x08	; 8
    271c:	1c 92       	st	X, r1
    271e:	1e 92       	st	-X, r1
    2720:	17 97       	sbiw	r26, 0x07	; 7
    2722:	81 e0       	ldi	r24, 0x01	; 1
    2724:	62 e0       	ldi	r22, 0x02	; 2
    2726:	43 2d       	mov	r20, r3
    2728:	29 8d       	ldd	r18, Y+25	; 0x19
    272a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    272c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    272e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2730:	72 01       	movw	r14, r4
    2732:	c2 2c       	mov	r12, r2
    2734:	aa 24       	eor	r10, r10
    2736:	bb 24       	eor	r11, r11
    2738:	83 2c       	mov	r8, r3
    273a:	0e 94 3a 1a 	call	0x3474	; 0x3474 <STEPPER_move>
    273e:	81 e0       	ldi	r24, 0x01	; 1
    2740:	ed b7       	in	r30, 0x3d	; 61
    2742:	fe b7       	in	r31, 0x3e	; 62
    2744:	39 96       	adiw	r30, 0x09	; 9
    2746:	0f b6       	in	r0, 0x3f	; 63
    2748:	f8 94       	cli
    274a:	fe bf       	out	0x3e, r31	; 62
    274c:	0f be       	out	0x3f, r0	; 63
    274e:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    2750:	a0 96       	adiw	r28, 0x20	; 32
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	de bf       	out	0x3e, r29	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	cd bf       	out	0x3d, r28	; 61
    275c:	cf 91       	pop	r28
    275e:	df 91       	pop	r29
    2760:	1f 91       	pop	r17
    2762:	0f 91       	pop	r16
    2764:	ff 90       	pop	r15
    2766:	ef 90       	pop	r14
    2768:	df 90       	pop	r13
    276a:	cf 90       	pop	r12
    276c:	bf 90       	pop	r11
    276e:	af 90       	pop	r10
    2770:	9f 90       	pop	r9
    2772:	8f 90       	pop	r8
    2774:	7f 90       	pop	r7
    2776:	6f 90       	pop	r6
    2778:	5f 90       	pop	r5
    277a:	4f 90       	pop	r4
    277c:	3f 90       	pop	r3
    277e:	2f 90       	pop	r2
    2780:	08 95       	ret

00002782 <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    2782:	2f 92       	push	r2
    2784:	3f 92       	push	r3
    2786:	4f 92       	push	r4
    2788:	5f 92       	push	r5
    278a:	6f 92       	push	r6
    278c:	7f 92       	push	r7
    278e:	8f 92       	push	r8
    2790:	9f 92       	push	r9
    2792:	af 92       	push	r10
    2794:	bf 92       	push	r11
    2796:	cf 92       	push	r12
    2798:	df 92       	push	r13
    279a:	ef 92       	push	r14
    279c:	ff 92       	push	r15
    279e:	0f 93       	push	r16
    27a0:	1f 93       	push	r17
    27a2:	df 93       	push	r29
    27a4:	cf 93       	push	r28
    27a6:	cd b7       	in	r28, 0x3d	; 61
    27a8:	de b7       	in	r29, 0x3e	; 62
    27aa:	a0 97       	sbiw	r28, 0x20	; 32
    27ac:	0f b6       	in	r0, 0x3f	; 63
    27ae:	f8 94       	cli
    27b0:	de bf       	out	0x3e, r29	; 62
    27b2:	0f be       	out	0x3f, r0	; 63
    27b4:	cd bf       	out	0x3d, r28	; 61
    27b6:	2b 01       	movw	r4, r22
    27b8:	3c 01       	movw	r6, r24
    27ba:	2d 83       	std	Y+5, r18	; 0x05
    27bc:	3e 83       	std	Y+6, r19	; 0x06
    27be:	4f 83       	std	Y+7, r20	; 0x07
    27c0:	58 87       	std	Y+8, r21	; 0x08
    27c2:	e9 86       	std	Y+9, r14	; 0x09
    27c4:	fa 86       	std	Y+10, r15	; 0x0a
    27c6:	0b 87       	std	Y+11, r16	; 0x0b
    27c8:	1c 87       	std	Y+12, r17	; 0x0c
    27ca:	ad 86       	std	Y+13, r10	; 0x0d
    27cc:	be 86       	std	Y+14, r11	; 0x0e
    27ce:	cf 86       	std	Y+15, r12	; 0x0f
    27d0:	d8 8a       	std	Y+16, r13	; 0x10
    27d2:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    27d4:	33 24       	eor	r3, r3
    27d6:	ca 01       	movw	r24, r20
    27d8:	b9 01       	movw	r22, r18
    27da:	20 e0       	ldi	r18, 0x00	; 0
    27dc:	30 e0       	ldi	r19, 0x00	; 0
    27de:	40 e0       	ldi	r20, 0x00	; 0
    27e0:	50 e0       	ldi	r21, 0x00	; 0
    27e2:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__gesf2>
    27e6:	18 16       	cp	r1, r24
    27e8:	14 f4       	brge	.+4      	; 0x27ee <move_arc_stwt+0x6c>
    27ea:	33 24       	eor	r3, r3
    27ec:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    27ee:	6d 81       	ldd	r22, Y+5	; 0x05
    27f0:	7e 81       	ldd	r23, Y+6	; 0x06
    27f2:	8f 81       	ldd	r24, Y+7	; 0x07
    27f4:	98 85       	ldd	r25, Y+8	; 0x08
    27f6:	2c ed       	ldi	r18, 0xDC	; 220
    27f8:	38 eb       	ldi	r19, 0xB8	; 184
    27fa:	48 e0       	ldi	r20, 0x08	; 8
    27fc:	5e e3       	ldi	r21, 0x3E	; 62
    27fe:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2802:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__fixsfsi>
    2806:	9b 01       	movw	r18, r22
    2808:	77 ff       	sbrs	r23, 7
    280a:	03 c0       	rjmp	.+6      	; 0x2812 <move_arc_stwt+0x90>
    280c:	30 95       	com	r19
    280e:	21 95       	neg	r18
    2810:	3f 4f       	sbci	r19, 0xFF	; 255
    2812:	b9 01       	movw	r22, r18
    2814:	88 27       	eor	r24, r24
    2816:	77 fd       	sbrc	r23, 7
    2818:	80 95       	com	r24
    281a:	98 2f       	mov	r25, r24
    281c:	0e 94 14 2b 	call	0x5628	; 0x5628 <__floatsisf>
    2820:	69 83       	std	Y+1, r22	; 0x01
    2822:	7a 83       	std	Y+2, r23	; 0x02
    2824:	8b 83       	std	Y+3, r24	; 0x03
    2826:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    2828:	69 85       	ldd	r22, Y+9	; 0x09
    282a:	7a 85       	ldd	r23, Y+10	; 0x0a
    282c:	8b 85       	ldd	r24, Y+11	; 0x0b
    282e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2830:	2c ed       	ldi	r18, 0xDC	; 220
    2832:	38 eb       	ldi	r19, 0xB8	; 184
    2834:	48 e0       	ldi	r20, 0x08	; 8
    2836:	5e e3       	ldi	r21, 0x3E	; 62
    2838:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    283c:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__fixsfsi>
    2840:	9b 01       	movw	r18, r22
    2842:	77 ff       	sbrs	r23, 7
    2844:	03 c0       	rjmp	.+6      	; 0x284c <move_arc_stwt+0xca>
    2846:	30 95       	com	r19
    2848:	21 95       	neg	r18
    284a:	3f 4f       	sbci	r19, 0xFF	; 255
    284c:	b9 01       	movw	r22, r18
    284e:	88 27       	eor	r24, r24
    2850:	77 fd       	sbrc	r23, 7
    2852:	80 95       	com	r24
    2854:	98 2f       	mov	r25, r24
    2856:	0e 94 14 2b 	call	0x5628	; 0x5628 <__floatsisf>
    285a:	4b 01       	movw	r8, r22
    285c:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    285e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2860:	7e 85       	ldd	r23, Y+14	; 0x0e
    2862:	8f 85       	ldd	r24, Y+15	; 0x0f
    2864:	98 89       	ldd	r25, Y+16	; 0x10
    2866:	2c ed       	ldi	r18, 0xDC	; 220
    2868:	38 eb       	ldi	r19, 0xB8	; 184
    286a:	48 e0       	ldi	r20, 0x08	; 8
    286c:	5e e3       	ldi	r21, 0x3E	; 62
    286e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2872:	0e 94 e1 2a 	call	0x55c2	; 0x55c2 <__fixsfsi>
    2876:	9b 01       	movw	r18, r22
    2878:	77 ff       	sbrs	r23, 7
    287a:	03 c0       	rjmp	.+6      	; 0x2882 <move_arc_stwt+0x100>
    287c:	30 95       	com	r19
    287e:	21 95       	neg	r18
    2880:	3f 4f       	sbci	r19, 0xFF	; 255
    2882:	b9 01       	movw	r22, r18
    2884:	88 27       	eor	r24, r24
    2886:	77 fd       	sbrc	r23, 7
    2888:	80 95       	com	r24
    288a:	98 2f       	mov	r25, r24
    288c:	0e 94 14 2b 	call	0x5628	; 0x5628 <__floatsisf>
    2890:	6b 01       	movw	r12, r22
    2892:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    2894:	c3 01       	movw	r24, r6
    2896:	b2 01       	movw	r22, r4
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	5f e4       	ldi	r21, 0x4F	; 79
    28a0:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
    28a4:	88 23       	and	r24, r24
    28a6:	a1 f5       	brne	.+104    	; 0x2910 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    28a8:	69 81       	ldd	r22, Y+1	; 0x01
    28aa:	7a 81       	ldd	r23, Y+2	; 0x02
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    28b4:	2b 01       	movw	r4, r22
    28b6:	3c 01       	movw	r6, r24
    28b8:	c5 01       	movw	r24, r10
    28ba:	b4 01       	movw	r22, r8
    28bc:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    28c0:	4b 01       	movw	r8, r22
    28c2:	5c 01       	movw	r10, r24
    28c4:	c7 01       	movw	r24, r14
    28c6:	b6 01       	movw	r22, r12
    28c8:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    28cc:	6b 01       	movw	r12, r22
    28ce:	7c 01       	movw	r14, r24
    28d0:	2d b7       	in	r18, 0x3d	; 61
    28d2:	3e b7       	in	r19, 0x3e	; 62
    28d4:	29 50       	subi	r18, 0x09	; 9
    28d6:	30 40       	sbci	r19, 0x00	; 0
    28d8:	0f b6       	in	r0, 0x3f	; 63
    28da:	f8 94       	cli
    28dc:	3e bf       	out	0x3e, r19	; 62
    28de:	0f be       	out	0x3f, r0	; 63
    28e0:	2d bf       	out	0x3d, r18	; 61
    28e2:	ed b7       	in	r30, 0x3d	; 61
    28e4:	fe b7       	in	r31, 0x3e	; 62
    28e6:	31 96       	adiw	r30, 0x01	; 1
    28e8:	ad b7       	in	r26, 0x3d	; 61
    28ea:	be b7       	in	r27, 0x3e	; 62
    28ec:	12 96       	adiw	r26, 0x02	; 2
    28ee:	5c 92       	st	X, r5
    28f0:	4e 92       	st	-X, r4
    28f2:	11 97       	sbiw	r26, 0x01	; 1
    28f4:	93 82       	std	Z+3, r9	; 0x03
    28f6:	82 82       	std	Z+2, r8	; 0x02
    28f8:	75 83       	std	Z+5, r23	; 0x05
    28fa:	64 83       	std	Z+4, r22	; 0x04
    28fc:	26 82       	std	Z+6, r2	; 0x06
    28fe:	10 86       	std	Z+8, r1	; 0x08
    2900:	17 82       	std	Z+7, r1	; 0x07
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	62 e0       	ldi	r22, 0x02	; 2
    2906:	43 2d       	mov	r20, r3
    2908:	92 01       	movw	r18, r4
    290a:	84 01       	movw	r16, r8
    290c:	76 01       	movw	r14, r12
    290e:	c1 c1       	rjmp	.+898    	; 0x2c92 <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    2910:	c3 01       	movw	r24, r6
    2912:	b2 01       	movw	r22, r4
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	40 e0       	ldi	r20, 0x00	; 0
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
    2920:	88 23       	and	r24, r24
    2922:	e9 f5       	brne	.+122    	; 0x299e <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    2924:	69 81       	ldd	r22, Y+1	; 0x01
    2926:	7a 81       	ldd	r23, Y+2	; 0x02
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	9c 81       	ldd	r25, Y+4	; 0x04
    292c:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2930:	3b 01       	movw	r6, r22
    2932:	c5 01       	movw	r24, r10
    2934:	b4 01       	movw	r22, r8
    2936:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    293a:	8b 01       	movw	r16, r22
    293c:	c7 01       	movw	r24, r14
    293e:	b6 01       	movw	r22, r12
    2940:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2944:	7b 01       	movw	r14, r22
    2946:	2d b7       	in	r18, 0x3d	; 61
    2948:	3e b7       	in	r19, 0x3e	; 62
    294a:	29 50       	subi	r18, 0x09	; 9
    294c:	30 40       	sbci	r19, 0x00	; 0
    294e:	0f b6       	in	r0, 0x3f	; 63
    2950:	f8 94       	cli
    2952:	3e bf       	out	0x3e, r19	; 62
    2954:	0f be       	out	0x3f, r0	; 63
    2956:	2d bf       	out	0x3d, r18	; 61
    2958:	ed b7       	in	r30, 0x3d	; 61
    295a:	fe b7       	in	r31, 0x3e	; 62
    295c:	31 96       	adiw	r30, 0x01	; 1
    295e:	40 e0       	ldi	r20, 0x00	; 0
    2960:	33 20       	and	r3, r3
    2962:	09 f4       	brne	.+2      	; 0x2966 <move_arc_stwt+0x1e4>
    2964:	41 e0       	ldi	r20, 0x01	; 1
    2966:	71 82       	std	Z+1, r7	; 0x01
    2968:	60 82       	st	Z, r6
    296a:	13 83       	std	Z+3, r17	; 0x03
    296c:	02 83       	std	Z+2, r16	; 0x02
    296e:	f5 82       	std	Z+5, r15	; 0x05
    2970:	e4 82       	std	Z+4, r14	; 0x04
    2972:	26 82       	std	Z+6, r2	; 0x06
    2974:	10 86       	std	Z+8, r1	; 0x08
    2976:	17 82       	std	Z+7, r1	; 0x07
    2978:	80 e0       	ldi	r24, 0x00	; 0
    297a:	62 e0       	ldi	r22, 0x02	; 2
    297c:	93 01       	movw	r18, r6
    297e:	c2 2c       	mov	r12, r2
    2980:	aa 24       	eor	r10, r10
    2982:	bb 24       	eor	r11, r11
    2984:	83 2c       	mov	r8, r3
    2986:	0e 94 3a 1a 	call	0x3474	; 0x3474 <STEPPER_move>
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	ad b7       	in	r26, 0x3d	; 61
    298e:	be b7       	in	r27, 0x3e	; 62
    2990:	19 96       	adiw	r26, 0x09	; 9
    2992:	0f b6       	in	r0, 0x3f	; 63
    2994:	f8 94       	cli
    2996:	be bf       	out	0x3e, r27	; 62
    2998:	0f be       	out	0x3f, r0	; 63
    299a:	ad bf       	out	0x3d, r26	; 61
    299c:	89 c1       	rjmp	.+786    	; 0x2cb0 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    299e:	c3 01       	movw	r24, r6
    29a0:	b2 01       	movw	r22, r4
    29a2:	20 e0       	ldi	r18, 0x00	; 0
    29a4:	30 e0       	ldi	r19, 0x00	; 0
    29a6:	40 e0       	ldi	r20, 0x00	; 0
    29a8:	50 e0       	ldi	r21, 0x00	; 0
    29aa:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__gesf2>
    29ae:	18 16       	cp	r1, r24
    29b0:	0c f0       	brlt	.+2      	; 0x29b4 <move_arc_stwt+0x232>
    29b2:	b1 c0       	rjmp	.+354    	; 0x2b16 <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    29b4:	66 e6       	ldi	r22, 0x66	; 102
    29b6:	76 e6       	ldi	r23, 0x66	; 102
    29b8:	8a ea       	ldi	r24, 0xAA	; 170
    29ba:	91 ec       	ldi	r25, 0xC1	; 193
    29bc:	a3 01       	movw	r20, r6
    29be:	92 01       	movw	r18, r4
    29c0:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    29d0:	7b 01       	movw	r14, r22
    29d2:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    29d4:	66 e6       	ldi	r22, 0x66	; 102
    29d6:	76 e6       	ldi	r23, 0x66	; 102
    29d8:	8a ea       	ldi	r24, 0xAA	; 170
    29da:	91 e4       	ldi	r25, 0x41	; 65
    29dc:	a3 01       	movw	r20, r6
    29de:	92 01       	movw	r18, r4
    29e0:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    29e4:	20 e0       	ldi	r18, 0x00	; 0
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	40 e8       	ldi	r20, 0x80	; 128
    29ea:	5f e3       	ldi	r21, 0x3F	; 63
    29ec:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    29f0:	5b 01       	movw	r10, r22
    29f2:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    29f4:	ed b7       	in	r30, 0x3d	; 61
    29f6:	fe b7       	in	r31, 0x3e	; 62
    29f8:	39 97       	sbiw	r30, 0x09	; 9
    29fa:	0f b6       	in	r0, 0x3f	; 63
    29fc:	f8 94       	cli
    29fe:	fe bf       	out	0x3e, r31	; 62
    2a00:	0f be       	out	0x3f, r0	; 63
    2a02:	ed bf       	out	0x3d, r30	; 61
    2a04:	8d b6       	in	r8, 0x3d	; 61
    2a06:	9e b6       	in	r9, 0x3e	; 62
    2a08:	08 94       	sec
    2a0a:	81 1c       	adc	r8, r1
    2a0c:	91 1c       	adc	r9, r1
    2a0e:	6d 81       	ldd	r22, Y+5	; 0x05
    2a10:	7e 81       	ldd	r23, Y+6	; 0x06
    2a12:	8f 81       	ldd	r24, Y+7	; 0x07
    2a14:	98 85       	ldd	r25, Y+8	; 0x08
    2a16:	a8 01       	movw	r20, r16
    2a18:	97 01       	movw	r18, r14
    2a1a:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2a1e:	2c ed       	ldi	r18, 0xDC	; 220
    2a20:	38 eb       	ldi	r19, 0xB8	; 184
    2a22:	48 e0       	ldi	r20, 0x08	; 8
    2a24:	5e e3       	ldi	r21, 0x3E	; 62
    2a26:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2a2a:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2a2e:	69 8b       	std	Y+17, r22	; 0x11
    2a30:	7a 8b       	std	Y+18, r23	; 0x12
    2a32:	8b 8b       	std	Y+19, r24	; 0x13
    2a34:	9c 8b       	std	Y+20, r25	; 0x14
    2a36:	69 85       	ldd	r22, Y+9	; 0x09
    2a38:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a3e:	a8 01       	movw	r20, r16
    2a40:	97 01       	movw	r18, r14
    2a42:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2a46:	2c ed       	ldi	r18, 0xDC	; 220
    2a48:	38 eb       	ldi	r19, 0xB8	; 184
    2a4a:	48 e0       	ldi	r20, 0x08	; 8
    2a4c:	5e e3       	ldi	r21, 0x3E	; 62
    2a4e:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2a52:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2a56:	6d 8b       	std	Y+21, r22	; 0x15
    2a58:	7e 8b       	std	Y+22, r23	; 0x16
    2a5a:	8f 8b       	std	Y+23, r24	; 0x17
    2a5c:	98 8f       	std	Y+24, r25	; 0x18
    2a5e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a60:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a64:	98 89       	ldd	r25, Y+16	; 0x10
    2a66:	a8 01       	movw	r20, r16
    2a68:	97 01       	movw	r18, r14
    2a6a:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2a6e:	2c ed       	ldi	r18, 0xDC	; 220
    2a70:	38 eb       	ldi	r19, 0xB8	; 184
    2a72:	48 e0       	ldi	r20, 0x08	; 8
    2a74:	5e e3       	ldi	r21, 0x3E	; 62
    2a76:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2a7a:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2a7e:	2b 01       	movw	r4, r22
    2a80:	3c 01       	movw	r6, r24
    2a82:	6d 81       	ldd	r22, Y+5	; 0x05
    2a84:	7e 81       	ldd	r23, Y+6	; 0x06
    2a86:	8f 81       	ldd	r24, Y+7	; 0x07
    2a88:	98 85       	ldd	r25, Y+8	; 0x08
    2a8a:	a6 01       	movw	r20, r12
    2a8c:	95 01       	movw	r18, r10
    2a8e:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2a92:	2c ed       	ldi	r18, 0xDC	; 220
    2a94:	38 eb       	ldi	r19, 0xB8	; 184
    2a96:	48 e0       	ldi	r20, 0x08	; 8
    2a98:	5e e3       	ldi	r21, 0x3E	; 62
    2a9a:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2a9e:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2aa2:	d4 01       	movw	r26, r8
    2aa4:	6d 93       	st	X+, r22
    2aa6:	7c 93       	st	X, r23
    2aa8:	69 85       	ldd	r22, Y+9	; 0x09
    2aaa:	7a 85       	ldd	r23, Y+10	; 0x0a
    2aac:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aae:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ab0:	a6 01       	movw	r20, r12
    2ab2:	95 01       	movw	r18, r10
    2ab4:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2ab8:	2c ed       	ldi	r18, 0xDC	; 220
    2aba:	38 eb       	ldi	r19, 0xB8	; 184
    2abc:	48 e0       	ldi	r20, 0x08	; 8
    2abe:	5e e3       	ldi	r21, 0x3E	; 62
    2ac0:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2ac4:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2ac8:	f4 01       	movw	r30, r8
    2aca:	73 83       	std	Z+3, r23	; 0x03
    2acc:	62 83       	std	Z+2, r22	; 0x02
    2ace:	6d 85       	ldd	r22, Y+13	; 0x0d
    2ad0:	7e 85       	ldd	r23, Y+14	; 0x0e
    2ad2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad4:	98 89       	ldd	r25, Y+16	; 0x10
    2ad6:	a6 01       	movw	r20, r12
    2ad8:	95 01       	movw	r18, r10
    2ada:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2ade:	2c ed       	ldi	r18, 0xDC	; 220
    2ae0:	38 eb       	ldi	r19, 0xB8	; 184
    2ae2:	48 e0       	ldi	r20, 0x08	; 8
    2ae4:	5e e3       	ldi	r21, 0x3E	; 62
    2ae6:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2aea:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2aee:	d4 01       	movw	r26, r8
    2af0:	15 96       	adiw	r26, 0x05	; 5
    2af2:	7c 93       	st	X, r23
    2af4:	6e 93       	st	-X, r22
    2af6:	14 97       	sbiw	r26, 0x04	; 4
    2af8:	16 96       	adiw	r26, 0x06	; 6
    2afa:	2c 92       	st	X, r2
    2afc:	16 97       	sbiw	r26, 0x06	; 6
    2afe:	18 96       	adiw	r26, 0x08	; 8
    2b00:	1c 92       	st	X, r1
    2b02:	1e 92       	st	-X, r1
    2b04:	17 97       	sbiw	r26, 0x07	; 7
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	62 e0       	ldi	r22, 0x02	; 2
    2b0a:	43 2d       	mov	r20, r3
    2b0c:	29 89       	ldd	r18, Y+17	; 0x11
    2b0e:	3a 89       	ldd	r19, Y+18	; 0x12
    2b10:	0d 89       	ldd	r16, Y+21	; 0x15
    2b12:	1e 89       	ldd	r17, Y+22	; 0x16
    2b14:	bd c0       	rjmp	.+378    	; 0x2c90 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    2b16:	c3 01       	movw	r24, r6
    2b18:	b2 01       	movw	r22, r4
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	0e 94 75 2a 	call	0x54ea	; 0x54ea <__cmpsf2>
    2b26:	87 fd       	sbrc	r24, 7
    2b28:	02 c0       	rjmp	.+4      	; 0x2b2e <move_arc_stwt+0x3ac>
    2b2a:	80 e0       	ldi	r24, 0x00	; 0
    2b2c:	c1 c0       	rjmp	.+386    	; 0x2cb0 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2b2e:	66 e6       	ldi	r22, 0x66	; 102
    2b30:	76 e6       	ldi	r23, 0x66	; 102
    2b32:	8a ea       	ldi	r24, 0xAA	; 170
    2b34:	91 e4       	ldi	r25, 0x41	; 65
    2b36:	a3 01       	movw	r20, r6
    2b38:	92 01       	movw	r18, r4
    2b3a:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    2b4a:	7b 01       	movw	r14, r22
    2b4c:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2b4e:	66 e6       	ldi	r22, 0x66	; 102
    2b50:	76 e6       	ldi	r23, 0x66	; 102
    2b52:	8a ea       	ldi	r24, 0xAA	; 170
    2b54:	91 ec       	ldi	r25, 0xC1	; 193
    2b56:	a3 01       	movw	r20, r6
    2b58:	92 01       	movw	r18, r4
    2b5a:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e8       	ldi	r20, 0x80	; 128
    2b64:	5f e3       	ldi	r21, 0x3F	; 63
    2b66:	0e 94 11 2a 	call	0x5422	; 0x5422 <__addsf3>
    2b6a:	5b 01       	movw	r10, r22
    2b6c:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2b6e:	2d b7       	in	r18, 0x3d	; 61
    2b70:	3e b7       	in	r19, 0x3e	; 62
    2b72:	29 50       	subi	r18, 0x09	; 9
    2b74:	30 40       	sbci	r19, 0x00	; 0
    2b76:	0f b6       	in	r0, 0x3f	; 63
    2b78:	f8 94       	cli
    2b7a:	3e bf       	out	0x3e, r19	; 62
    2b7c:	0f be       	out	0x3f, r0	; 63
    2b7e:	2d bf       	out	0x3d, r18	; 61
    2b80:	8d b6       	in	r8, 0x3d	; 61
    2b82:	9e b6       	in	r9, 0x3e	; 62
    2b84:	08 94       	sec
    2b86:	81 1c       	adc	r8, r1
    2b88:	91 1c       	adc	r9, r1
    2b8a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b8c:	7e 81       	ldd	r23, Y+6	; 0x06
    2b8e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b90:	98 85       	ldd	r25, Y+8	; 0x08
    2b92:	a8 01       	movw	r20, r16
    2b94:	97 01       	movw	r18, r14
    2b96:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2b9a:	2c ed       	ldi	r18, 0xDC	; 220
    2b9c:	38 eb       	ldi	r19, 0xB8	; 184
    2b9e:	48 e0       	ldi	r20, 0x08	; 8
    2ba0:	5e e3       	ldi	r21, 0x3E	; 62
    2ba2:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2ba6:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2baa:	69 8f       	std	Y+25, r22	; 0x19
    2bac:	7a 8f       	std	Y+26, r23	; 0x1a
    2bae:	8b 8f       	std	Y+27, r24	; 0x1b
    2bb0:	9c 8f       	std	Y+28, r25	; 0x1c
    2bb2:	69 85       	ldd	r22, Y+9	; 0x09
    2bb4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bb8:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bba:	a8 01       	movw	r20, r16
    2bbc:	97 01       	movw	r18, r14
    2bbe:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2bc2:	2c ed       	ldi	r18, 0xDC	; 220
    2bc4:	38 eb       	ldi	r19, 0xB8	; 184
    2bc6:	48 e0       	ldi	r20, 0x08	; 8
    2bc8:	5e e3       	ldi	r21, 0x3E	; 62
    2bca:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2bce:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2bd2:	6d 8f       	std	Y+29, r22	; 0x1d
    2bd4:	7e 8f       	std	Y+30, r23	; 0x1e
    2bd6:	8f 8f       	std	Y+31, r24	; 0x1f
    2bd8:	98 a3       	std	Y+32, r25	; 0x20
    2bda:	6d 85       	ldd	r22, Y+13	; 0x0d
    2bdc:	7e 85       	ldd	r23, Y+14	; 0x0e
    2bde:	8f 85       	ldd	r24, Y+15	; 0x0f
    2be0:	98 89       	ldd	r25, Y+16	; 0x10
    2be2:	a8 01       	movw	r20, r16
    2be4:	97 01       	movw	r18, r14
    2be6:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2bea:	2c ed       	ldi	r18, 0xDC	; 220
    2bec:	38 eb       	ldi	r19, 0xB8	; 184
    2bee:	48 e0       	ldi	r20, 0x08	; 8
    2bf0:	5e e3       	ldi	r21, 0x3E	; 62
    2bf2:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2bf6:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2bfa:	2b 01       	movw	r4, r22
    2bfc:	3c 01       	movw	r6, r24
    2bfe:	6d 81       	ldd	r22, Y+5	; 0x05
    2c00:	7e 81       	ldd	r23, Y+6	; 0x06
    2c02:	8f 81       	ldd	r24, Y+7	; 0x07
    2c04:	98 85       	ldd	r25, Y+8	; 0x08
    2c06:	a6 01       	movw	r20, r12
    2c08:	95 01       	movw	r18, r10
    2c0a:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2c0e:	2c ed       	ldi	r18, 0xDC	; 220
    2c10:	38 eb       	ldi	r19, 0xB8	; 184
    2c12:	48 e0       	ldi	r20, 0x08	; 8
    2c14:	5e e3       	ldi	r21, 0x3E	; 62
    2c16:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2c1a:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2c1e:	d4 01       	movw	r26, r8
    2c20:	6d 93       	st	X+, r22
    2c22:	7c 93       	st	X, r23
    2c24:	69 85       	ldd	r22, Y+9	; 0x09
    2c26:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c28:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c2c:	a6 01       	movw	r20, r12
    2c2e:	95 01       	movw	r18, r10
    2c30:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2c34:	2c ed       	ldi	r18, 0xDC	; 220
    2c36:	38 eb       	ldi	r19, 0xB8	; 184
    2c38:	48 e0       	ldi	r20, 0x08	; 8
    2c3a:	5e e3       	ldi	r21, 0x3E	; 62
    2c3c:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2c40:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2c44:	f4 01       	movw	r30, r8
    2c46:	73 83       	std	Z+3, r23	; 0x03
    2c48:	62 83       	std	Z+2, r22	; 0x02
    2c4a:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c4c:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c50:	98 89       	ldd	r25, Y+16	; 0x10
    2c52:	a6 01       	movw	r20, r12
    2c54:	95 01       	movw	r18, r10
    2c56:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    2c5a:	2c ed       	ldi	r18, 0xDC	; 220
    2c5c:	38 eb       	ldi	r19, 0xB8	; 184
    2c5e:	48 e0       	ldi	r20, 0x08	; 8
    2c60:	5e e3       	ldi	r21, 0x3E	; 62
    2c62:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    2c66:	0e 94 e6 2a 	call	0x55cc	; 0x55cc <__fixunssfsi>
    2c6a:	d4 01       	movw	r26, r8
    2c6c:	15 96       	adiw	r26, 0x05	; 5
    2c6e:	7c 93       	st	X, r23
    2c70:	6e 93       	st	-X, r22
    2c72:	14 97       	sbiw	r26, 0x04	; 4
    2c74:	16 96       	adiw	r26, 0x06	; 6
    2c76:	2c 92       	st	X, r2
    2c78:	16 97       	sbiw	r26, 0x06	; 6
    2c7a:	18 96       	adiw	r26, 0x08	; 8
    2c7c:	1c 92       	st	X, r1
    2c7e:	1e 92       	st	-X, r1
    2c80:	17 97       	sbiw	r26, 0x07	; 7
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	62 e0       	ldi	r22, 0x02	; 2
    2c86:	43 2d       	mov	r20, r3
    2c88:	29 8d       	ldd	r18, Y+25	; 0x19
    2c8a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2c8c:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2c8e:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2c90:	72 01       	movw	r14, r4
    2c92:	c2 2c       	mov	r12, r2
    2c94:	aa 24       	eor	r10, r10
    2c96:	bb 24       	eor	r11, r11
    2c98:	83 2c       	mov	r8, r3
    2c9a:	0e 94 3a 1a 	call	0x3474	; 0x3474 <STEPPER_move>
    2c9e:	81 e0       	ldi	r24, 0x01	; 1
    2ca0:	ed b7       	in	r30, 0x3d	; 61
    2ca2:	fe b7       	in	r31, 0x3e	; 62
    2ca4:	39 96       	adiw	r30, 0x09	; 9
    2ca6:	0f b6       	in	r0, 0x3f	; 63
    2ca8:	f8 94       	cli
    2caa:	fe bf       	out	0x3e, r31	; 62
    2cac:	0f be       	out	0x3f, r0	; 63
    2cae:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    2cb0:	a0 96       	adiw	r28, 0x20	; 32
    2cb2:	0f b6       	in	r0, 0x3f	; 63
    2cb4:	f8 94       	cli
    2cb6:	de bf       	out	0x3e, r29	; 62
    2cb8:	0f be       	out	0x3f, r0	; 63
    2cba:	cd bf       	out	0x3d, r28	; 61
    2cbc:	cf 91       	pop	r28
    2cbe:	df 91       	pop	r29
    2cc0:	1f 91       	pop	r17
    2cc2:	0f 91       	pop	r16
    2cc4:	ff 90       	pop	r15
    2cc6:	ef 90       	pop	r14
    2cc8:	df 90       	pop	r13
    2cca:	cf 90       	pop	r12
    2ccc:	bf 90       	pop	r11
    2cce:	af 90       	pop	r10
    2cd0:	9f 90       	pop	r9
    2cd2:	8f 90       	pop	r8
    2cd4:	7f 90       	pop	r7
    2cd6:	6f 90       	pop	r6
    2cd8:	5f 90       	pop	r5
    2cda:	4f 90       	pop	r4
    2cdc:	3f 90       	pop	r3
    2cde:	2f 90       	pop	r2
    2ce0:	08 95       	ret

00002ce2 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    2ce2:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    2ce6:	28 2f       	mov	r18, r24
    2ce8:	21 70       	andi	r18, 0x01	; 1
    2cea:	20 93 12 06 	sts	0x0612, r18
	leftContact =  (0b00000010 & sensors)>>1;
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	82 70       	andi	r24, 0x02	; 2
    2cf2:	90 70       	andi	r25, 0x00	; 0
    2cf4:	95 95       	asr	r25
    2cf6:	87 95       	ror	r24
    2cf8:	80 93 13 06 	sts	0x0613, r24
}
    2cfc:	08 95       	ret

00002cfe <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    2cfe:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    2d02:	60 93 7a 05 	sts	0x057A, r22
    2d06:	70 93 7b 05 	sts	0x057B, r23
    2d0a:	80 93 7c 05 	sts	0x057C, r24
    2d0e:	90 93 7d 05 	sts	0x057D, r25
	leftLightVolt = getLeftLight();
    2d12:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    2d16:	60 93 a1 06 	sts	0x06A1, r22
    2d1a:	70 93 a2 06 	sts	0x06A2, r23
    2d1e:	80 93 a3 06 	sts	0x06A3, r24
    2d22:	90 93 a4 06 	sts	0x06A4, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    2d26:	08 95       	ret

00002d28 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    2d28:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    2d2c:	60 93 e6 04 	sts	0x04E6, r22
    2d30:	70 93 e7 04 	sts	0x04E7, r23
    2d34:	80 93 e8 04 	sts	0x04E8, r24
    2d38:	90 93 e9 04 	sts	0x04E9, r25
	bkIR = getBackIR();
    2d3c:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    2d40:	60 93 f0 04 	sts	0x04F0, r22
    2d44:	70 93 f1 04 	sts	0x04F1, r23
    2d48:	80 93 f2 04 	sts	0x04F2, r24
    2d4c:	90 93 f3 04 	sts	0x04F3, r25
	ltIR = getLeftIR();
    2d50:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    2d54:	60 93 14 06 	sts	0x0614, r22
    2d58:	70 93 15 06 	sts	0x0615, r23
    2d5c:	80 93 16 06 	sts	0x0616, r24
    2d60:	90 93 17 06 	sts	0x0617, r25
	rtIR = getRightIR();
    2d64:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    2d68:	60 93 19 06 	sts	0x0619, r22
    2d6c:	70 93 1a 06 	sts	0x061A, r23
    2d70:	80 93 1b 06 	sts	0x061B, r24
    2d74:	90 93 1c 06 	sts	0x061C, r25
}
    2d78:	08 95       	ret

00002d7a <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2d7a:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <ATTINY_open>
    2d7e:	90 93 6a 04 	sts	0x046A, r25
    2d82:	80 93 69 04 	sts	0x0469, r24
	LEopstat = LED_open(); //open the LED module
    2d86:	0e 94 5f 18 	call	0x30be	; 0x30be <LED_open>
    2d8a:	90 93 68 04 	sts	0x0468, r25
    2d8e:	80 93 67 04 	sts	0x0467, r24
	LCopstat = LCD_open(); //open the LCD module
    2d92:	0e 94 76 17 	call	0x2eec	; 0x2eec <LCD_open>
    2d96:	90 93 66 04 	sts	0x0466, r25
    2d9a:	80 93 65 04 	sts	0x0465, r24
	STEPPER_open(); // Open STEPPER module for use
    2d9e:	0e 94 e1 1a 	call	0x35c2	; 0x35c2 <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in beep mode
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	0e 94 65 19 	call	0x32ca	; 0x32ca <SPKR_open>
	
	LED_open();
    2da8:	0e 94 5f 18 	call	0x30be	; 0x30be <LED_open>
	I2C_open();
    2dac:	0e 94 24 1f 	call	0x3e48	; 0x3e48 <I2C_open>
	ADC_open();//open the ADC module
    2db0:	0e 94 e3 16 	call	0x2dc6	; 0x2dc6 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2db4:	81 e0       	ldi	r24, 0x01	; 1
    2db6:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <ADC_set_VREF>

	// Initialize IR Values and Reset Prefilter
	checkIR();
    2dba:	0e 94 94 16 	call	0x2d28	; 0x2d28 <checkIR>
	prefilter(1);
    2dbe:	81 e0       	ldi	r24, 0x01	; 1
    2dc0:	0e 94 06 0f 	call	0x1e0c	; 0x1e0c <prefilter>
}
    2dc4:	08 95       	ret

00002dc6 <ADC_open>:
    2dc6:	8f e0       	ldi	r24, 0x0F	; 15
    2dc8:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    2dcc:	88 23       	and	r24, r24
    2dce:	31 f4       	brne	.+12     	; 0x2ddc <ADC_open+0x16>
    2dd0:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <__ADC_init>
    2dd4:	8f e0       	ldi	r24, 0x0F	; 15
    2dd6:	61 e0       	ldi	r22, 0x01	; 1
    2dd8:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    2ddc:	8f e0       	ldi	r24, 0x0F	; 15
    2dde:	91 e0       	ldi	r25, 0x01	; 1
    2de0:	08 95       	ret

00002de2 <ADC_sample>:
    2de2:	8f e0       	ldi	r24, 0x0F	; 15
    2de4:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    2de8:	81 30       	cpi	r24, 0x01	; 1
    2dea:	19 f0       	breq	.+6      	; 0x2df2 <ADC_sample+0x10>
    2dec:	20 e0       	ldi	r18, 0x00	; 0
    2dee:	30 e0       	ldi	r19, 0x00	; 0
    2df0:	13 c0       	rjmp	.+38     	; 0x2e18 <ADC_sample+0x36>
    2df2:	80 91 7a 00 	lds	r24, 0x007A
    2df6:	80 64       	ori	r24, 0x40	; 64
    2df8:	80 93 7a 00 	sts	0x007A, r24
    2dfc:	80 91 7a 00 	lds	r24, 0x007A
    2e00:	86 fd       	sbrc	r24, 6
    2e02:	fc cf       	rjmp	.-8      	; 0x2dfc <ADC_sample+0x1a>
    2e04:	30 91 78 00 	lds	r19, 0x0078
    2e08:	20 91 79 00 	lds	r18, 0x0079
    2e0c:	92 2f       	mov	r25, r18
    2e0e:	80 e0       	ldi	r24, 0x00	; 0
    2e10:	23 2f       	mov	r18, r19
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	28 2b       	or	r18, r24
    2e16:	39 2b       	or	r19, r25
    2e18:	c9 01       	movw	r24, r18
    2e1a:	08 95       	ret

00002e1c <ADC_set_channel>:
    2e1c:	58 2f       	mov	r21, r24
    2e1e:	80 91 8f 03 	lds	r24, 0x038F
    2e22:	88 30       	cpi	r24, 0x08	; 8
    2e24:	d8 f4       	brcc	.+54     	; 0x2e5c <ADC_set_channel+0x40>
    2e26:	40 91 7e 00 	lds	r20, 0x007E
    2e2a:	21 e0       	ldi	r18, 0x01	; 1
    2e2c:	30 e0       	ldi	r19, 0x00	; 0
    2e2e:	b9 01       	movw	r22, r18
    2e30:	02 c0       	rjmp	.+4      	; 0x2e36 <ADC_set_channel+0x1a>
    2e32:	66 0f       	add	r22, r22
    2e34:	77 1f       	adc	r23, r23
    2e36:	8a 95       	dec	r24
    2e38:	e2 f7       	brpl	.-8      	; 0x2e32 <ADC_set_channel+0x16>
    2e3a:	cb 01       	movw	r24, r22
    2e3c:	80 95       	com	r24
    2e3e:	84 23       	and	r24, r20
    2e40:	80 93 7e 00 	sts	0x007E, r24
    2e44:	80 91 7e 00 	lds	r24, 0x007E
    2e48:	05 2e       	mov	r0, r21
    2e4a:	02 c0       	rjmp	.+4      	; 0x2e50 <ADC_set_channel+0x34>
    2e4c:	22 0f       	add	r18, r18
    2e4e:	33 1f       	adc	r19, r19
    2e50:	0a 94       	dec	r0
    2e52:	e2 f7       	brpl	.-8      	; 0x2e4c <ADC_set_channel+0x30>
    2e54:	82 2b       	or	r24, r18
    2e56:	80 93 7e 00 	sts	0x007E, r24
    2e5a:	0d c0       	rjmp	.+26     	; 0x2e76 <ADC_set_channel+0x5a>
    2e5c:	20 91 7e 00 	lds	r18, 0x007E
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	05 2e       	mov	r0, r21
    2e66:	02 c0       	rjmp	.+4      	; 0x2e6c <ADC_set_channel+0x50>
    2e68:	88 0f       	add	r24, r24
    2e6a:	99 1f       	adc	r25, r25
    2e6c:	0a 94       	dec	r0
    2e6e:	e2 f7       	brpl	.-8      	; 0x2e68 <ADC_set_channel+0x4c>
    2e70:	28 2b       	or	r18, r24
    2e72:	20 93 7e 00 	sts	0x007E, r18
    2e76:	50 93 8f 03 	sts	0x038F, r21
    2e7a:	80 91 7c 00 	lds	r24, 0x007C
    2e7e:	5f 71       	andi	r21, 0x1F	; 31
    2e80:	80 7e       	andi	r24, 0xE0	; 224
    2e82:	85 2b       	or	r24, r21
    2e84:	80 93 7c 00 	sts	0x007C, r24
    2e88:	08 95       	ret

00002e8a <ADC_set_VREF>:
    2e8a:	ec e7       	ldi	r30, 0x7C	; 124
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	90 81       	ld	r25, Z
    2e90:	82 95       	swap	r24
    2e92:	88 0f       	add	r24, r24
    2e94:	88 0f       	add	r24, r24
    2e96:	80 7c       	andi	r24, 0xC0	; 192
    2e98:	9f 73       	andi	r25, 0x3F	; 63
    2e9a:	98 2b       	or	r25, r24
    2e9c:	90 83       	st	Z, r25
    2e9e:	08 95       	ret

00002ea0 <main>:
    2ea0:	0e 94 64 1f 	call	0x3ec8	; 0x3ec8 <CBOT_ISR_init>
    2ea4:	0e 94 56 1f 	call	0x3eac	; 0x3eac <CBOT_init>
    2ea8:	0e 94 6d 0e 	call	0x1cda	; 0x1cda <CBOT_main>
    2eac:	80 e0       	ldi	r24, 0x00	; 0
    2eae:	90 e0       	ldi	r25, 0x00	; 0
    2eb0:	08 95       	ret

00002eb2 <LCD_clear>:
    2eb2:	0f 93       	push	r16
    2eb4:	1f 93       	push	r17
    2eb6:	80 e4       	ldi	r24, 0x40	; 64
    2eb8:	60 e0       	ldi	r22, 0x00	; 0
    2eba:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2ebe:	00 e0       	ldi	r16, 0x00	; 0
    2ec0:	80 2f       	mov	r24, r16
    2ec2:	60 e0       	ldi	r22, 0x00	; 0
    2ec4:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_set_PGC_addr>
    2ec8:	10 e0       	ldi	r17, 0x00	; 0
    2eca:	80 e0       	ldi	r24, 0x00	; 0
    2ecc:	61 e0       	ldi	r22, 0x01	; 1
    2ece:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2ed2:	1f 5f       	subi	r17, 0xFF	; 255
    2ed4:	10 38       	cpi	r17, 0x80	; 128
    2ed6:	c9 f7       	brne	.-14     	; 0x2eca <LCD_clear+0x18>
    2ed8:	0f 5f       	subi	r16, 0xFF	; 255
    2eda:	04 30       	cpi	r16, 0x04	; 4
    2edc:	89 f7       	brne	.-30     	; 0x2ec0 <LCD_clear+0xe>
    2ede:	83 e0       	ldi	r24, 0x03	; 3
    2ee0:	60 e0       	ldi	r22, 0x00	; 0
    2ee2:	0e 94 18 18 	call	0x3030	; 0x3030 <LCD_set_next_PGC>
    2ee6:	1f 91       	pop	r17
    2ee8:	0f 91       	pop	r16
    2eea:	08 95       	ret

00002eec <LCD_open>:
    2eec:	0f 93       	push	r16
    2eee:	1f 93       	push	r17
    2ef0:	82 e0       	ldi	r24, 0x02	; 2
    2ef2:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    2ef6:	88 23       	and	r24, r24
    2ef8:	11 f4       	brne	.+4      	; 0x2efe <LCD_open+0x12>
    2efa:	82 e0       	ldi	r24, 0x02	; 2
    2efc:	06 c0       	rjmp	.+12     	; 0x2f0a <LCD_open+0x1e>
    2efe:	81 e0       	ldi	r24, 0x01	; 1
    2f00:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    2f04:	88 23       	and	r24, r24
    2f06:	19 f4       	brne	.+6      	; 0x2f0e <LCD_open+0x22>
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	6d c0       	rjmp	.+218    	; 0x2fe8 <LCD_open+0xfc>
    2f0e:	0e 94 cc 21 	call	0x4398	; 0x4398 <__LCD_init>
    2f12:	85 e0       	ldi	r24, 0x05	; 5
    2f14:	61 e0       	ldi	r22, 0x01	; 1
    2f16:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    2f1a:	8e ea       	ldi	r24, 0xAE	; 174
    2f1c:	60 e0       	ldi	r22, 0x00	; 0
    2f1e:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2f22:	82 ea       	ldi	r24, 0xA2	; 162
    2f24:	60 e0       	ldi	r22, 0x00	; 0
    2f26:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2f2a:	80 ea       	ldi	r24, 0xA0	; 160
    2f2c:	60 e0       	ldi	r22, 0x00	; 0
    2f2e:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2f32:	00 e5       	ldi	r16, 0x50	; 80
    2f34:	13 ec       	ldi	r17, 0xC3	; 195
    2f36:	c8 01       	movw	r24, r16
    2f38:	01 97       	sbiw	r24, 0x01	; 1
    2f3a:	f1 f7       	brne	.-4      	; 0x2f38 <LCD_open+0x4c>
    2f3c:	80 ec       	ldi	r24, 0xC0	; 192
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2f44:	8f e2       	ldi	r24, 0x2F	; 47
    2f46:	60 e0       	ldi	r22, 0x00	; 0
    2f48:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2f4c:	81 e8       	ldi	r24, 0x81	; 129
    2f4e:	60 e0       	ldi	r22, 0x00	; 0
    2f50:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2f54:	86 e1       	ldi	r24, 0x16	; 22
    2f56:	60 e0       	ldi	r22, 0x00	; 0
    2f58:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2f5c:	82 e2       	ldi	r24, 0x22	; 34
    2f5e:	60 e0       	ldi	r22, 0x00	; 0
    2f60:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2f64:	c8 01       	movw	r24, r16
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	f1 f7       	brne	.-4      	; 0x2f66 <LCD_open+0x7a>
    2f6a:	8f ea       	ldi	r24, 0xAF	; 175
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2f72:	86 ea       	ldi	r24, 0xA6	; 166
    2f74:	60 e0       	ldi	r22, 0x00	; 0
    2f76:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2f7a:	85 ea       	ldi	r24, 0xA5	; 165
    2f7c:	60 e0       	ldi	r22, 0x00	; 0
    2f7e:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2f82:	80 e0       	ldi	r24, 0x00	; 0
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	28 e8       	ldi	r18, 0x88	; 136
    2f88:	33 e1       	ldi	r19, 0x13	; 19
    2f8a:	f9 01       	movw	r30, r18
    2f8c:	31 97       	sbiw	r30, 0x01	; 1
    2f8e:	f1 f7       	brne	.-4      	; 0x2f8c <LCD_open+0xa0>
    2f90:	01 96       	adiw	r24, 0x01	; 1
    2f92:	43 e0       	ldi	r20, 0x03	; 3
    2f94:	88 3e       	cpi	r24, 0xE8	; 232
    2f96:	94 07       	cpc	r25, r20
    2f98:	c1 f7       	brne	.-16     	; 0x2f8a <LCD_open+0x9e>
    2f9a:	83 eb       	ldi	r24, 0xB3	; 179
    2f9c:	60 e0       	ldi	r22, 0x00	; 0
    2f9e:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2fa2:	80 e4       	ldi	r24, 0x40	; 64
    2fa4:	60 e0       	ldi	r22, 0x00	; 0
    2fa6:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	60 e0       	ldi	r22, 0x00	; 0
    2fae:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_set_PGC_addr>
    2fb2:	83 e0       	ldi	r24, 0x03	; 3
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	0e 94 18 18 	call	0x3030	; 0x3030 <LCD_set_next_PGC>
    2fba:	10 92 f5 06 	sts	0x06F5, r1
    2fbe:	10 92 f7 06 	sts	0x06F7, r1
    2fc2:	10 92 f6 06 	sts	0x06F6, r1
    2fc6:	8e e9       	ldi	r24, 0x9E	; 158
    2fc8:	93 e0       	ldi	r25, 0x03	; 3
    2fca:	90 93 26 07 	sts	0x0726, r25
    2fce:	80 93 25 07 	sts	0x0725, r24
    2fd2:	88 e1       	ldi	r24, 0x18	; 24
    2fd4:	0e 94 f7 17 	call	0x2fee	; 0x2fee <LCD_set_backlight>
    2fd8:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
    2fdc:	84 ea       	ldi	r24, 0xA4	; 164
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    2fe4:	85 e0       	ldi	r24, 0x05	; 5
    2fe6:	91 e0       	ldi	r25, 0x01	; 1
    2fe8:	1f 91       	pop	r17
    2fea:	0f 91       	pop	r16
    2fec:	08 95       	ret

00002fee <LCD_set_backlight>:
    2fee:	1f 93       	push	r17
    2ff0:	18 2f       	mov	r17, r24
    2ff2:	85 e0       	ldi	r24, 0x05	; 5
    2ff4:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    2ff8:	81 30       	cpi	r24, 0x01	; 1
    2ffa:	c1 f4       	brne	.+48     	; 0x302c <LCD_set_backlight+0x3e>
    2ffc:	87 e0       	ldi	r24, 0x07	; 7
    2ffe:	0e 94 74 18 	call	0x30e8	; 0x30e8 <SPI_set_slave_addr>
    3002:	82 e0       	ldi	r24, 0x02	; 2
    3004:	6a e0       	ldi	r22, 0x0A	; 10
    3006:	0e 94 c5 18 	call	0x318a	; 0x318a <SPI_transmit>
    300a:	82 e0       	ldi	r24, 0x02	; 2
    300c:	61 eb       	ldi	r22, 0xB1	; 177
    300e:	0e 94 c5 18 	call	0x318a	; 0x318a <SPI_transmit>
    3012:	61 2f       	mov	r22, r17
    3014:	11 32       	cpi	r17, 0x21	; 33
    3016:	08 f0       	brcs	.+2      	; 0x301a <LCD_set_backlight+0x2c>
    3018:	60 e2       	ldi	r22, 0x20	; 32
    301a:	82 e0       	ldi	r24, 0x02	; 2
    301c:	0e 94 c5 18 	call	0x318a	; 0x318a <SPI_transmit>
    3020:	89 ee       	ldi	r24, 0xE9	; 233
    3022:	8a 95       	dec	r24
    3024:	f1 f7       	brne	.-4      	; 0x3022 <LCD_set_backlight+0x34>
    3026:	87 e0       	ldi	r24, 0x07	; 7
    3028:	0e 94 74 18 	call	0x30e8	; 0x30e8 <SPI_set_slave_addr>
    302c:	1f 91       	pop	r17
    302e:	08 95       	ret

00003030 <LCD_set_next_PGC>:
    3030:	83 70       	andi	r24, 0x03	; 3
    3032:	6f 77       	andi	r22, 0x7F	; 127
    3034:	60 93 f3 06 	sts	0x06F3, r22
    3038:	80 93 f4 06 	sts	0x06F4, r24
    303c:	08 95       	ret

0000303e <LCD_set_PGC_addr>:
    303e:	0f 93       	push	r16
    3040:	1f 93       	push	r17
    3042:	06 2f       	mov	r16, r22
    3044:	16 2f       	mov	r17, r22
    3046:	1f 77       	andi	r17, 0x7F	; 127
    3048:	83 70       	andi	r24, 0x03	; 3
    304a:	80 6b       	ori	r24, 0xB0	; 176
    304c:	60 e0       	ldi	r22, 0x00	; 0
    304e:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    3052:	12 95       	swap	r17
    3054:	1f 70       	andi	r17, 0x0F	; 15
    3056:	81 2f       	mov	r24, r17
    3058:	80 61       	ori	r24, 0x10	; 16
    305a:	60 e0       	ldi	r22, 0x00	; 0
    305c:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    3060:	80 2f       	mov	r24, r16
    3062:	8f 70       	andi	r24, 0x0F	; 15
    3064:	60 e0       	ldi	r22, 0x00	; 0
    3066:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    306a:	1f 91       	pop	r17
    306c:	0f 91       	pop	r16
    306e:	08 95       	ret

00003070 <LCD_write>:
    3070:	0f 93       	push	r16
    3072:	1f 93       	push	r17
    3074:	08 2f       	mov	r16, r24
    3076:	16 2f       	mov	r17, r22
    3078:	85 e0       	ldi	r24, 0x05	; 5
    307a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    307e:	81 30       	cpi	r24, 0x01	; 1
    3080:	79 f4       	brne	.+30     	; 0x30a0 <LCD_write+0x30>
    3082:	11 23       	and	r17, r17
    3084:	19 f0       	breq	.+6      	; 0x308c <LCD_write+0x1c>
    3086:	11 30       	cpi	r17, 0x01	; 1
    3088:	21 f4       	brne	.+8      	; 0x3092 <LCD_write+0x22>
    308a:	02 c0       	rjmp	.+4      	; 0x3090 <LCD_write+0x20>
    308c:	2b 98       	cbi	0x05, 3	; 5
    308e:	01 c0       	rjmp	.+2      	; 0x3092 <LCD_write+0x22>
    3090:	2b 9a       	sbi	0x05, 3	; 5
    3092:	86 e0       	ldi	r24, 0x06	; 6
    3094:	8a 95       	dec	r24
    3096:	f1 f7       	brne	.-4      	; 0x3094 <LCD_write+0x24>
    3098:	80 e0       	ldi	r24, 0x00	; 0
    309a:	60 2f       	mov	r22, r16
    309c:	0e 94 c5 18 	call	0x318a	; 0x318a <SPI_transmit>
    30a0:	1f 91       	pop	r17
    30a2:	0f 91       	pop	r16
    30a4:	08 95       	ret

000030a6 <LED_clr_pattern>:
    30a6:	1f 93       	push	r17
    30a8:	18 2f       	mov	r17, r24
    30aa:	86 e0       	ldi	r24, 0x06	; 6
    30ac:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    30b0:	81 30       	cpi	r24, 0x01	; 1
    30b2:	19 f4       	brne	.+6      	; 0x30ba <LED_clr_pattern+0x14>
    30b4:	81 2f       	mov	r24, r17
    30b6:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <__LED_clr_pattern>
    30ba:	1f 91       	pop	r17
    30bc:	08 95       	ret

000030be <LED_open>:
    30be:	0e 94 80 22 	call	0x4500	; 0x4500 <__LED_init>
    30c2:	86 e0       	ldi	r24, 0x06	; 6
    30c4:	61 e0       	ldi	r22, 0x01	; 1
    30c6:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    30ca:	86 e0       	ldi	r24, 0x06	; 6
    30cc:	91 e0       	ldi	r25, 0x01	; 1
    30ce:	08 95       	ret

000030d0 <LED_set_pattern>:
    30d0:	1f 93       	push	r17
    30d2:	18 2f       	mov	r17, r24
    30d4:	86 e0       	ldi	r24, 0x06	; 6
    30d6:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    30da:	81 30       	cpi	r24, 0x01	; 1
    30dc:	19 f4       	brne	.+6      	; 0x30e4 <LED_set_pattern+0x14>
    30de:	81 2f       	mov	r24, r17
    30e0:	0e 94 83 22 	call	0x4506	; 0x4506 <__LED_set_pattern>
    30e4:	1f 91       	pop	r17
    30e6:	08 95       	ret

000030e8 <SPI_set_slave_addr>:
    30e8:	1f 93       	push	r17
    30ea:	18 2f       	mov	r17, r24
    30ec:	82 e0       	ldi	r24, 0x02	; 2
    30ee:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    30f2:	81 30       	cpi	r24, 0x01	; 1
    30f4:	09 f0       	breq	.+2      	; 0x30f8 <SPI_set_slave_addr+0x10>
    30f6:	47 c0       	rjmp	.+142    	; 0x3186 <SPI_set_slave_addr+0x9e>
    30f8:	91 2f       	mov	r25, r17
    30fa:	97 70       	andi	r25, 0x07	; 7
    30fc:	80 91 f8 06 	lds	r24, 0x06F8
    3100:	98 17       	cp	r25, r24
    3102:	09 f4       	brne	.+2      	; 0x3106 <SPI_set_slave_addr+0x1e>
    3104:	40 c0       	rjmp	.+128    	; 0x3186 <SPI_set_slave_addr+0x9e>
    3106:	90 93 f8 06 	sts	0x06F8, r25
    310a:	85 b1       	in	r24, 0x05	; 5
    310c:	88 7f       	andi	r24, 0xF8	; 248
    310e:	89 2b       	or	r24, r25
    3110:	85 b9       	out	0x05, r24	; 5
    3112:	93 30       	cpi	r25, 0x03	; 3
    3114:	11 f1       	breq	.+68     	; 0x315a <SPI_set_slave_addr+0x72>
    3116:	94 30       	cpi	r25, 0x04	; 4
    3118:	28 f4       	brcc	.+10     	; 0x3124 <SPI_set_slave_addr+0x3c>
    311a:	91 30       	cpi	r25, 0x01	; 1
    311c:	51 f0       	breq	.+20     	; 0x3132 <SPI_set_slave_addr+0x4a>
    311e:	92 30       	cpi	r25, 0x02	; 2
    3120:	90 f4       	brcc	.+36     	; 0x3146 <SPI_set_slave_addr+0x5e>
    3122:	0c c0       	rjmp	.+24     	; 0x313c <SPI_set_slave_addr+0x54>
    3124:	95 30       	cpi	r25, 0x05	; 5
    3126:	19 f1       	breq	.+70     	; 0x316e <SPI_set_slave_addr+0x86>
    3128:	95 30       	cpi	r25, 0x05	; 5
    312a:	e0 f0       	brcs	.+56     	; 0x3164 <SPI_set_slave_addr+0x7c>
    312c:	96 30       	cpi	r25, 0x06	; 6
    312e:	21 f5       	brne	.+72     	; 0x3178 <SPI_set_slave_addr+0x90>
    3130:	0f c0       	rjmp	.+30     	; 0x3150 <SPI_set_slave_addr+0x68>
    3132:	e0 91 40 04 	lds	r30, 0x0440
    3136:	f0 91 41 04 	lds	r31, 0x0441
    313a:	22 c0       	rjmp	.+68     	; 0x3180 <SPI_set_slave_addr+0x98>
    313c:	e0 91 3e 04 	lds	r30, 0x043E
    3140:	f0 91 3f 04 	lds	r31, 0x043F
    3144:	1d c0       	rjmp	.+58     	; 0x3180 <SPI_set_slave_addr+0x98>
    3146:	e0 91 42 04 	lds	r30, 0x0442
    314a:	f0 91 43 04 	lds	r31, 0x0443
    314e:	18 c0       	rjmp	.+48     	; 0x3180 <SPI_set_slave_addr+0x98>
    3150:	e0 91 4a 04 	lds	r30, 0x044A
    3154:	f0 91 4b 04 	lds	r31, 0x044B
    3158:	13 c0       	rjmp	.+38     	; 0x3180 <SPI_set_slave_addr+0x98>
    315a:	e0 91 44 04 	lds	r30, 0x0444
    315e:	f0 91 45 04 	lds	r31, 0x0445
    3162:	0e c0       	rjmp	.+28     	; 0x3180 <SPI_set_slave_addr+0x98>
    3164:	e0 91 46 04 	lds	r30, 0x0446
    3168:	f0 91 47 04 	lds	r31, 0x0447
    316c:	09 c0       	rjmp	.+18     	; 0x3180 <SPI_set_slave_addr+0x98>
    316e:	e0 91 48 04 	lds	r30, 0x0448
    3172:	f0 91 49 04 	lds	r31, 0x0449
    3176:	04 c0       	rjmp	.+8      	; 0x3180 <SPI_set_slave_addr+0x98>
    3178:	e0 91 4c 04 	lds	r30, 0x044C
    317c:	f0 91 4d 04 	lds	r31, 0x044D
    3180:	30 97       	sbiw	r30, 0x00	; 0
    3182:	09 f0       	breq	.+2      	; 0x3186 <SPI_set_slave_addr+0x9e>
    3184:	09 95       	icall
    3186:	1f 91       	pop	r17
    3188:	08 95       	ret

0000318a <SPI_transmit>:
    318a:	1f 93       	push	r17
    318c:	16 2f       	mov	r17, r22
    318e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <SPI_set_slave_addr>
    3192:	82 e0       	ldi	r24, 0x02	; 2
    3194:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    3198:	81 30       	cpi	r24, 0x01	; 1
    319a:	21 f4       	brne	.+8      	; 0x31a4 <SPI_transmit+0x1a>
    319c:	1e bd       	out	0x2e, r17	; 46
    319e:	0d b4       	in	r0, 0x2d	; 45
    31a0:	07 fe       	sbrs	r0, 7
    31a2:	fd cf       	rjmp	.-6      	; 0x319e <SPI_transmit+0x14>
    31a4:	1f 91       	pop	r17
    31a6:	08 95       	ret

000031a8 <__SPKR_set_up_freq_LUT>:
    31a8:	0f 93       	push	r16
    31aa:	1f 93       	push	r17
    31ac:	cf 93       	push	r28
    31ae:	df 93       	push	r29
    31b0:	80 e2       	ldi	r24, 0x20	; 32
    31b2:	91 e0       	ldi	r25, 0x01	; 1
    31b4:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <malloc>
    31b8:	9c 01       	movw	r18, r24
    31ba:	90 93 5d 04 	sts	0x045D, r25
    31be:	80 93 5c 04 	sts	0x045C, r24
    31c2:	89 2b       	or	r24, r25
    31c4:	11 f4       	brne	.+4      	; 0x31ca <__SPKR_set_up_freq_LUT+0x22>
    31c6:	80 e0       	ldi	r24, 0x00	; 0
    31c8:	39 c0       	rjmp	.+114    	; 0x323c <__SPKR_set_up_freq_LUT+0x94>
    31ca:	89 01       	movw	r16, r18
    31cc:	c0 e0       	ldi	r28, 0x00	; 0
    31ce:	d0 e0       	ldi	r29, 0x00	; 0
    31d0:	be 01       	movw	r22, r28
    31d2:	80 e0       	ldi	r24, 0x00	; 0
    31d4:	90 e0       	ldi	r25, 0x00	; 0
    31d6:	0e 94 12 2b 	call	0x5624	; 0x5624 <__floatunsisf>
    31da:	20 e0       	ldi	r18, 0x00	; 0
    31dc:	30 e0       	ldi	r19, 0x00	; 0
    31de:	40 ea       	ldi	r20, 0xA0	; 160
    31e0:	51 e4       	ldi	r21, 0x41	; 65
    31e2:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <__divsf3>
    31e6:	27 ef       	ldi	r18, 0xF7	; 247
    31e8:	35 e7       	ldi	r19, 0x75	; 117
    31ea:	40 e0       	ldi	r20, 0x00	; 0
    31ec:	5f e3       	ldi	r21, 0x3F	; 63
    31ee:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    31f2:	9b 01       	movw	r18, r22
    31f4:	ac 01       	movw	r20, r24
    31f6:	60 e0       	ldi	r22, 0x00	; 0
    31f8:	70 e0       	ldi	r23, 0x00	; 0
    31fa:	80 e2       	ldi	r24, 0x20	; 32
    31fc:	91 e4       	ldi	r25, 0x41	; 65
    31fe:	0e 94 65 2c 	call	0x58ca	; 0x58ca <pow>
    3202:	9b 01       	movw	r18, r22
    3204:	ac 01       	movw	r20, r24
    3206:	ca 01       	movw	r24, r20
    3208:	b9 01       	movw	r22, r18
    320a:	2d ec       	ldi	r18, 0xCD	; 205
    320c:	3c ec       	ldi	r19, 0xCC	; 204
    320e:	42 e8       	ldi	r20, 0x82	; 130
    3210:	51 e4       	ldi	r21, 0x41	; 65
    3212:	0e 94 02 2c 	call	0x5804	; 0x5804 <__mulsf3>
    3216:	0e 94 c8 2b 	call	0x5790	; 0x5790 <lrint>
    321a:	2a e0       	ldi	r18, 0x0A	; 10
    321c:	30 e0       	ldi	r19, 0x00	; 0
    321e:	40 e0       	ldi	r20, 0x00	; 0
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	0e 94 32 31 	call	0x6264	; 0x6264 <__mulsi3>
    3226:	f8 01       	movw	r30, r16
    3228:	61 93       	st	Z+, r22
    322a:	71 93       	st	Z+, r23
    322c:	81 93       	st	Z+, r24
    322e:	91 93       	st	Z+, r25
    3230:	8f 01       	movw	r16, r30
    3232:	21 96       	adiw	r28, 0x01	; 1
    3234:	c8 34       	cpi	r28, 0x48	; 72
    3236:	d1 05       	cpc	r29, r1
    3238:	59 f6       	brne	.-106    	; 0x31d0 <__SPKR_set_up_freq_LUT+0x28>
    323a:	81 e0       	ldi	r24, 0x01	; 1
    323c:	df 91       	pop	r29
    323e:	cf 91       	pop	r28
    3240:	1f 91       	pop	r17
    3242:	0f 91       	pop	r16
    3244:	08 95       	ret

00003246 <__SPKR_open_beep_mode>:
    3246:	8a e0       	ldi	r24, 0x0A	; 10
    3248:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    324c:	88 23       	and	r24, r24
    324e:	71 f4       	brne	.+28     	; 0x326c <__SPKR_open_beep_mode+0x26>
    3250:	10 92 59 04 	sts	0x0459, r1
    3254:	10 92 58 04 	sts	0x0458, r1
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	0e 94 be 23 	call	0x477c	; 0x477c <__SPKR_init>
    325e:	81 e0       	ldi	r24, 0x01	; 1
    3260:	80 93 4f 04 	sts	0x044F, r24
    3264:	8a e0       	ldi	r24, 0x0A	; 10
    3266:	61 e0       	ldi	r22, 0x01	; 1
    3268:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    326c:	8a e0       	ldi	r24, 0x0A	; 10
    326e:	91 e0       	ldi	r25, 0x01	; 1
    3270:	08 95       	ret

00003272 <__SPKR_open_tone_mode>:
    3272:	1f 93       	push	r17
    3274:	8b e0       	ldi	r24, 0x0B	; 11
    3276:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    327a:	88 23       	and	r24, r24
    327c:	11 f0       	breq	.+4      	; 0x3282 <__SPKR_open_tone_mode+0x10>
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	21 c0       	rjmp	.+66     	; 0x32c4 <__SPKR_open_tone_mode+0x52>
    3282:	89 e0       	ldi	r24, 0x09	; 9
    3284:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    3288:	88 23       	and	r24, r24
    328a:	d9 f4       	brne	.+54     	; 0x32c2 <__SPKR_open_tone_mode+0x50>
    328c:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__SPKR_set_up_freq_LUT>
    3290:	18 2f       	mov	r17, r24
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	b1 f4       	brne	.+44     	; 0x32c2 <__SPKR_open_tone_mode+0x50>
    3296:	10 92 50 04 	sts	0x0450, r1
    329a:	10 92 51 04 	sts	0x0451, r1
    329e:	10 92 52 04 	sts	0x0452, r1
    32a2:	10 92 53 04 	sts	0x0453, r1
    32a6:	8d e0       	ldi	r24, 0x0D	; 13
    32a8:	61 e4       	ldi	r22, 0x41	; 65
    32aa:	73 e2       	ldi	r23, 0x23	; 35
    32ac:	0e 94 a4 21 	call	0x4348	; 0x4348 <ISR_attach>
    32b0:	82 e0       	ldi	r24, 0x02	; 2
    32b2:	0e 94 be 23 	call	0x477c	; 0x477c <__SPKR_init>
    32b6:	10 93 4e 04 	sts	0x044E, r17
    32ba:	89 e0       	ldi	r24, 0x09	; 9
    32bc:	61 e0       	ldi	r22, 0x01	; 1
    32be:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    32c2:	91 e0       	ldi	r25, 0x01	; 1
    32c4:	89 e0       	ldi	r24, 0x09	; 9
    32c6:	1f 91       	pop	r17
    32c8:	08 95       	ret

000032ca <SPKR_open>:
    32ca:	81 30       	cpi	r24, 0x01	; 1
    32cc:	29 f0       	breq	.+10     	; 0x32d8 <SPKR_open+0xe>
    32ce:	82 30       	cpi	r24, 0x02	; 2
    32d0:	31 f0       	breq	.+12     	; 0x32de <SPKR_open+0x14>
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	89 e0       	ldi	r24, 0x09	; 9
    32d6:	08 95       	ret
    32d8:	0e 94 23 19 	call	0x3246	; 0x3246 <__SPKR_open_beep_mode>
    32dc:	08 95       	ret
    32de:	0e 94 39 19 	call	0x3272	; 0x3272 <__SPKR_open_tone_mode>
    32e2:	08 95       	ret

000032e4 <STEPPER_get_nSteps>:
    32e4:	80 91 b9 06 	lds	r24, 0x06B9
    32e8:	90 91 ba 06 	lds	r25, 0x06BA
    32ec:	20 91 bb 06 	lds	r18, 0x06BB
    32f0:	30 91 bc 06 	lds	r19, 0x06BC
    32f4:	bc 01       	movw	r22, r24
    32f6:	c9 01       	movw	r24, r18
    32f8:	08 95       	ret

000032fa <STEPPER_stepmode>:
    32fa:	2f 92       	push	r2
    32fc:	3f 92       	push	r3
    32fe:	4f 92       	push	r4
    3300:	5f 92       	push	r5
    3302:	6f 92       	push	r6
    3304:	7f 92       	push	r7
    3306:	8f 92       	push	r8
    3308:	9f 92       	push	r9
    330a:	af 92       	push	r10
    330c:	bf 92       	push	r11
    330e:	cf 92       	push	r12
    3310:	df 92       	push	r13
    3312:	ef 92       	push	r14
    3314:	ff 92       	push	r15
    3316:	0f 93       	push	r16
    3318:	1f 93       	push	r17
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	58 2e       	mov	r5, r24
    3324:	96 2e       	mov	r9, r22
    3326:	44 2e       	mov	r4, r20
    3328:	39 01       	movw	r6, r18
    332a:	3c 2c       	mov	r3, r12
    332c:	c9 8c       	ldd	r12, Y+25	; 0x19
    332e:	da 8c       	ldd	r13, Y+26	; 0x1a
    3330:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3332:	81 e0       	ldi	r24, 0x01	; 1
    3334:	68 17       	cp	r22, r24
    3336:	39 f1       	breq	.+78     	; 0x3386 <STEPPER_stepmode+0x8c>
    3338:	68 17       	cp	r22, r24
    333a:	28 f0       	brcs	.+10     	; 0x3346 <STEPPER_stepmode+0x4c>
    333c:	92 e0       	ldi	r25, 0x02	; 2
    333e:	69 17       	cp	r22, r25
    3340:	09 f0       	breq	.+2      	; 0x3344 <STEPPER_stepmode+0x4a>
    3342:	85 c0       	rjmp	.+266    	; 0x344e <STEPPER_stepmode+0x154>
    3344:	49 c0       	rjmp	.+146    	; 0x33d8 <STEPPER_stepmode+0xde>
    3346:	80 e0       	ldi	r24, 0x00	; 0
    3348:	61 e0       	ldi	r22, 0x01	; 1
    334a:	0e 94 86 1b 	call	0x370c	; 0x370c <STEPPER_set_mode>
    334e:	80 e0       	ldi	r24, 0x00	; 0
    3350:	b7 01       	movw	r22, r14
    3352:	0e 94 4f 1b 	call	0x369e	; 0x369e <STEPPER_set_accel>
    3356:	80 e0       	ldi	r24, 0x00	; 0
    3358:	64 2d       	mov	r22, r4
    335a:	a3 01       	movw	r20, r6
    335c:	98 01       	movw	r18, r16
    335e:	03 2d       	mov	r16, r3
    3360:	ee 24       	eor	r14, r14
    3362:	e3 94       	inc	r14
    3364:	ee ed       	ldi	r30, 0xDE	; 222
    3366:	ce 2e       	mov	r12, r30
    3368:	e6 e0       	ldi	r30, 0x06	; 6
    336a:	de 2e       	mov	r13, r30
    336c:	0e 94 bd 1b 	call	0x377a	; 0x377a <STEPPER_step>
    3370:	55 20       	and	r5, r5
    3372:	09 f0       	breq	.+2      	; 0x3376 <STEPPER_stepmode+0x7c>
    3374:	6c c0       	rjmp	.+216    	; 0x344e <STEPPER_stepmode+0x154>
    3376:	00 d0       	rcall	.+0      	; 0x3378 <STEPPER_stepmode+0x7e>
    3378:	0f 92       	push	r0
    337a:	ed b7       	in	r30, 0x3d	; 61
    337c:	fe b7       	in	r31, 0x3e	; 62
    337e:	11 82       	std	Z+1, r1	; 0x01
    3380:	b3 82       	std	Z+3, r11	; 0x03
    3382:	a2 82       	std	Z+2, r10	; 0x02
    3384:	23 c0       	rjmp	.+70     	; 0x33cc <STEPPER_stepmode+0xd2>
    3386:	81 e0       	ldi	r24, 0x01	; 1
    3388:	61 e0       	ldi	r22, 0x01	; 1
    338a:	0e 94 86 1b 	call	0x370c	; 0x370c <STEPPER_set_mode>
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	b6 01       	movw	r22, r12
    3392:	0e 94 4f 1b 	call	0x369e	; 0x369e <STEPPER_set_accel>
    3396:	81 e0       	ldi	r24, 0x01	; 1
    3398:	68 2d       	mov	r22, r8
    339a:	4d 89       	ldd	r20, Y+21	; 0x15
    339c:	5e 89       	ldd	r21, Y+22	; 0x16
    339e:	2f 89       	ldd	r18, Y+23	; 0x17
    33a0:	38 8d       	ldd	r19, Y+24	; 0x18
    33a2:	02 2d       	mov	r16, r2
    33a4:	ee 24       	eor	r14, r14
    33a6:	e3 94       	inc	r14
    33a8:	7e ed       	ldi	r23, 0xDE	; 222
    33aa:	c7 2e       	mov	r12, r23
    33ac:	76 e0       	ldi	r23, 0x06	; 6
    33ae:	d7 2e       	mov	r13, r23
    33b0:	0e 94 bd 1b 	call	0x377a	; 0x377a <STEPPER_step>
    33b4:	55 20       	and	r5, r5
    33b6:	09 f0       	breq	.+2      	; 0x33ba <STEPPER_stepmode+0xc0>
    33b8:	4a c0       	rjmp	.+148    	; 0x344e <STEPPER_stepmode+0x154>
    33ba:	00 d0       	rcall	.+0      	; 0x33bc <STEPPER_stepmode+0xc2>
    33bc:	0f 92       	push	r0
    33be:	ed b7       	in	r30, 0x3d	; 61
    33c0:	fe b7       	in	r31, 0x3e	; 62
    33c2:	91 82       	std	Z+1, r9	; 0x01
    33c4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    33c6:	9d 8d       	ldd	r25, Y+29	; 0x1d
    33c8:	93 83       	std	Z+3, r25	; 0x03
    33ca:	82 83       	std	Z+2, r24	; 0x02
    33cc:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <STEPPER_wait_and_then>
    33d0:	0f 90       	pop	r0
    33d2:	0f 90       	pop	r0
    33d4:	0f 90       	pop	r0
    33d6:	3b c0       	rjmp	.+118    	; 0x344e <STEPPER_stepmode+0x154>
    33d8:	82 e0       	ldi	r24, 0x02	; 2
    33da:	61 e0       	ldi	r22, 0x01	; 1
    33dc:	0e 94 86 1b 	call	0x370c	; 0x370c <STEPPER_set_mode>
    33e0:	80 e0       	ldi	r24, 0x00	; 0
    33e2:	b7 01       	movw	r22, r14
    33e4:	0e 94 4f 1b 	call	0x369e	; 0x369e <STEPPER_set_accel>
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	b6 01       	movw	r22, r12
    33ec:	0e 94 4f 1b 	call	0x369e	; 0x369e <STEPPER_set_accel>
    33f0:	80 e0       	ldi	r24, 0x00	; 0
    33f2:	64 2d       	mov	r22, r4
    33f4:	a3 01       	movw	r20, r6
    33f6:	98 01       	movw	r18, r16
    33f8:	03 2d       	mov	r16, r3
    33fa:	ee 24       	eor	r14, r14
    33fc:	e3 94       	inc	r14
    33fe:	9e ed       	ldi	r25, 0xDE	; 222
    3400:	c9 2e       	mov	r12, r25
    3402:	96 e0       	ldi	r25, 0x06	; 6
    3404:	d9 2e       	mov	r13, r25
    3406:	0e 94 bd 1b 	call	0x377a	; 0x377a <STEPPER_step>
    340a:	81 e0       	ldi	r24, 0x01	; 1
    340c:	68 2d       	mov	r22, r8
    340e:	4d 89       	ldd	r20, Y+21	; 0x15
    3410:	5e 89       	ldd	r21, Y+22	; 0x16
    3412:	2f 89       	ldd	r18, Y+23	; 0x17
    3414:	38 8d       	ldd	r19, Y+24	; 0x18
    3416:	02 2d       	mov	r16, r2
    3418:	0e 94 bd 1b 	call	0x377a	; 0x377a <STEPPER_step>
    341c:	55 20       	and	r5, r5
    341e:	b9 f4       	brne	.+46     	; 0x344e <STEPPER_stepmode+0x154>
    3420:	00 d0       	rcall	.+0      	; 0x3422 <STEPPER_stepmode+0x128>
    3422:	00 d0       	rcall	.+0      	; 0x3424 <STEPPER_stepmode+0x12a>
    3424:	0f 92       	push	r0
    3426:	ad b7       	in	r26, 0x3d	; 61
    3428:	be b7       	in	r27, 0x3e	; 62
    342a:	11 96       	adiw	r26, 0x01	; 1
    342c:	ed b7       	in	r30, 0x3d	; 61
    342e:	fe b7       	in	r31, 0x3e	; 62
    3430:	91 82       	std	Z+1, r9	; 0x01
    3432:	fd 01       	movw	r30, r26
    3434:	b2 82       	std	Z+2, r11	; 0x02
    3436:	a1 82       	std	Z+1, r10	; 0x01
    3438:	8c 8d       	ldd	r24, Y+28	; 0x1c
    343a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    343c:	94 83       	std	Z+4, r25	; 0x04
    343e:	83 83       	std	Z+3, r24	; 0x03
    3440:	0e 94 6e 1c 	call	0x38dc	; 0x38dc <STEPPER_wait_and_then>
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	0f 90       	pop	r0
    344a:	0f 90       	pop	r0
    344c:	0f 90       	pop	r0
    344e:	cf 91       	pop	r28
    3450:	df 91       	pop	r29
    3452:	1f 91       	pop	r17
    3454:	0f 91       	pop	r16
    3456:	ff 90       	pop	r15
    3458:	ef 90       	pop	r14
    345a:	df 90       	pop	r13
    345c:	cf 90       	pop	r12
    345e:	bf 90       	pop	r11
    3460:	af 90       	pop	r10
    3462:	9f 90       	pop	r9
    3464:	8f 90       	pop	r8
    3466:	7f 90       	pop	r7
    3468:	6f 90       	pop	r6
    346a:	5f 90       	pop	r5
    346c:	4f 90       	pop	r4
    346e:	3f 90       	pop	r3
    3470:	2f 90       	pop	r2
    3472:	08 95       	ret

00003474 <STEPPER_move>:
    3474:	6f 92       	push	r6
    3476:	7f 92       	push	r7
    3478:	8f 92       	push	r8
    347a:	9f 92       	push	r9
    347c:	af 92       	push	r10
    347e:	bf 92       	push	r11
    3480:	cf 92       	push	r12
    3482:	df 92       	push	r13
    3484:	ef 92       	push	r14
    3486:	ff 92       	push	r15
    3488:	0f 93       	push	r16
    348a:	1f 93       	push	r17
    348c:	df 93       	push	r29
    348e:	cf 93       	push	r28
    3490:	cd b7       	in	r28, 0x3d	; 61
    3492:	de b7       	in	r29, 0x3e	; 62
    3494:	94 2e       	mov	r9, r20
    3496:	7c 2d       	mov	r23, r12
    3498:	d5 01       	movw	r26, r10
    349a:	49 89       	ldd	r20, Y+17	; 0x11
    349c:	5a 89       	ldd	r21, Y+18	; 0x12
    349e:	ab 88       	ldd	r10, Y+19	; 0x13
    34a0:	bc 88       	ldd	r11, Y+20	; 0x14
    34a2:	cd 88       	ldd	r12, Y+21	; 0x15
    34a4:	de 88       	ldd	r13, Y+22	; 0x16
    34a6:	9f 89       	ldd	r25, Y+23	; 0x17
    34a8:	81 30       	cpi	r24, 0x01	; 1
    34aa:	09 f4       	brne	.+2      	; 0x34ae <STEPPER_move+0x3a>
    34ac:	57 c0       	rjmp	.+174    	; 0x355c <STEPPER_move+0xe8>
    34ae:	81 30       	cpi	r24, 0x01	; 1
    34b0:	b8 f1       	brcs	.+110    	; 0x3520 <STEPPER_move+0xac>
    34b2:	82 30       	cpi	r24, 0x02	; 2
    34b4:	09 f0       	breq	.+2      	; 0x34b8 <STEPPER_move+0x44>
    34b6:	76 c0       	rjmp	.+236    	; 0x35a4 <STEPPER_move+0x130>
    34b8:	61 30       	cpi	r22, 0x01	; 1
    34ba:	91 f0       	breq	.+36     	; 0x34e0 <STEPPER_move+0x6c>
    34bc:	61 30       	cpi	r22, 0x01	; 1
    34be:	20 f0       	brcs	.+8      	; 0x34c8 <STEPPER_move+0x54>
    34c0:	62 30       	cpi	r22, 0x02	; 2
    34c2:	09 f0       	breq	.+2      	; 0x34c6 <STEPPER_move+0x52>
    34c4:	6f c0       	rjmp	.+222    	; 0x35a4 <STEPPER_move+0x130>
    34c6:	15 c0       	rjmp	.+42     	; 0x34f2 <STEPPER_move+0x7e>
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	60 e0       	ldi	r22, 0x00	; 0
    34cc:	0e 94 86 1b 	call	0x370c	; 0x370c <STEPPER_set_mode>
    34d0:	80 e0       	ldi	r24, 0x00	; 0
    34d2:	b7 01       	movw	r22, r14
    34d4:	0e 94 4f 1b 	call	0x369e	; 0x369e <STEPPER_set_accel>
    34d8:	80 e0       	ldi	r24, 0x00	; 0
    34da:	69 2d       	mov	r22, r9
    34dc:	a8 01       	movw	r20, r16
    34de:	1d c0       	rjmp	.+58     	; 0x351a <STEPPER_move+0xa6>
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	0e 94 86 1b 	call	0x370c	; 0x370c <STEPPER_set_mode>
    34e8:	81 e0       	ldi	r24, 0x01	; 1
    34ea:	b6 01       	movw	r22, r12
    34ec:	0e 94 4f 1b 	call	0x369e	; 0x369e <STEPPER_set_accel>
    34f0:	11 c0       	rjmp	.+34     	; 0x3514 <STEPPER_move+0xa0>
    34f2:	82 e0       	ldi	r24, 0x02	; 2
    34f4:	60 e0       	ldi	r22, 0x00	; 0
    34f6:	0e 94 86 1b 	call	0x370c	; 0x370c <STEPPER_set_mode>
    34fa:	80 e0       	ldi	r24, 0x00	; 0
    34fc:	b7 01       	movw	r22, r14
    34fe:	0e 94 4f 1b 	call	0x369e	; 0x369e <STEPPER_set_accel>
    3502:	81 e0       	ldi	r24, 0x01	; 1
    3504:	b6 01       	movw	r22, r12
    3506:	0e 94 4f 1b 	call	0x369e	; 0x369e <STEPPER_set_accel>
    350a:	80 e0       	ldi	r24, 0x00	; 0
    350c:	69 2d       	mov	r22, r9
    350e:	a8 01       	movw	r20, r16
    3510:	0e 94 38 1b 	call	0x3670	; 0x3670 <STEPPER_run>
    3514:	81 e0       	ldi	r24, 0x01	; 1
    3516:	68 2d       	mov	r22, r8
    3518:	a5 01       	movw	r20, r10
    351a:	0e 94 38 1b 	call	0x3670	; 0x3670 <STEPPER_run>
    351e:	42 c0       	rjmp	.+132    	; 0x35a4 <STEPPER_move+0x130>
    3520:	ed b7       	in	r30, 0x3d	; 61
    3522:	fe b7       	in	r31, 0x3e	; 62
    3524:	39 97       	sbiw	r30, 0x09	; 9
    3526:	0f b6       	in	r0, 0x3f	; 63
    3528:	f8 94       	cli
    352a:	fe bf       	out	0x3e, r31	; 62
    352c:	0f be       	out	0x3f, r0	; 63
    352e:	ed bf       	out	0x3d, r30	; 61
    3530:	6d b6       	in	r6, 0x3d	; 61
    3532:	7e b6       	in	r7, 0x3e	; 62
    3534:	08 94       	sec
    3536:	61 1c       	adc	r6, r1
    3538:	71 1c       	adc	r7, r1
    353a:	52 83       	std	Z+2, r21	; 0x02
    353c:	41 83       	std	Z+1, r20	; 0x01
    353e:	f3 01       	movw	r30, r6
    3540:	b3 82       	std	Z+3, r11	; 0x03
    3542:	a2 82       	std	Z+2, r10	; 0x02
    3544:	d5 82       	std	Z+5, r13	; 0x05
    3546:	c4 82       	std	Z+4, r12	; 0x04
    3548:	96 83       	std	Z+6, r25	; 0x06
    354a:	88 8d       	ldd	r24, Y+24	; 0x18
    354c:	99 8d       	ldd	r25, Y+25	; 0x19
    354e:	90 87       	std	Z+8, r25	; 0x08
    3550:	87 83       	std	Z+7, r24	; 0x07
    3552:	80 e0       	ldi	r24, 0x00	; 0
    3554:	49 2d       	mov	r20, r9
    3556:	c7 2e       	mov	r12, r23
    3558:	5d 01       	movw	r10, r26
    355a:	1a c0       	rjmp	.+52     	; 0x3590 <STEPPER_move+0x11c>
    355c:	ed b7       	in	r30, 0x3d	; 61
    355e:	fe b7       	in	r31, 0x3e	; 62
    3560:	39 97       	sbiw	r30, 0x09	; 9
    3562:	0f b6       	in	r0, 0x3f	; 63
    3564:	f8 94       	cli
    3566:	fe bf       	out	0x3e, r31	; 62
    3568:	0f be       	out	0x3f, r0	; 63
    356a:	ed bf       	out	0x3d, r30	; 61
    356c:	ad b7       	in	r26, 0x3d	; 61
    356e:	be b7       	in	r27, 0x3e	; 62
    3570:	11 96       	adiw	r26, 0x01	; 1
    3572:	52 83       	std	Z+2, r21	; 0x02
    3574:	41 83       	std	Z+1, r20	; 0x01
    3576:	fd 01       	movw	r30, r26
    3578:	b3 82       	std	Z+3, r11	; 0x03
    357a:	a2 82       	std	Z+2, r10	; 0x02
    357c:	d5 82       	std	Z+5, r13	; 0x05
    357e:	c4 82       	std	Z+4, r12	; 0x04
    3580:	96 83       	std	Z+6, r25	; 0x06
    3582:	10 86       	std	Z+8, r1	; 0x08
    3584:	17 82       	std	Z+7, r1	; 0x07
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	49 2d       	mov	r20, r9
    358a:	c7 2e       	mov	r12, r23
    358c:	aa 24       	eor	r10, r10
    358e:	bb 24       	eor	r11, r11
    3590:	0e 94 7d 19 	call	0x32fa	; 0x32fa <STEPPER_stepmode>
    3594:	8d b7       	in	r24, 0x3d	; 61
    3596:	9e b7       	in	r25, 0x3e	; 62
    3598:	09 96       	adiw	r24, 0x09	; 9
    359a:	0f b6       	in	r0, 0x3f	; 63
    359c:	f8 94       	cli
    359e:	9e bf       	out	0x3e, r25	; 62
    35a0:	0f be       	out	0x3f, r0	; 63
    35a2:	8d bf       	out	0x3d, r24	; 61
    35a4:	cf 91       	pop	r28
    35a6:	df 91       	pop	r29
    35a8:	1f 91       	pop	r17
    35aa:	0f 91       	pop	r16
    35ac:	ff 90       	pop	r15
    35ae:	ef 90       	pop	r14
    35b0:	df 90       	pop	r13
    35b2:	cf 90       	pop	r12
    35b4:	bf 90       	pop	r11
    35b6:	af 90       	pop	r10
    35b8:	9f 90       	pop	r9
    35ba:	8f 90       	pop	r8
    35bc:	7f 90       	pop	r7
    35be:	6f 90       	pop	r6
    35c0:	08 95       	ret

000035c2 <STEPPER_open>:
    35c2:	0e 94 50 24 	call	0x48a0	; 0x48a0 <__STEPPER_init>
    35c6:	81 e0       	ldi	r24, 0x01	; 1
    35c8:	80 93 dd 06 	sts	0x06DD, r24
    35cc:	e7 ea       	ldi	r30, 0xA7	; 167
    35ce:	f6 e0       	ldi	r31, 0x06	; 6
    35d0:	11 92       	st	Z+, r1
    35d2:	11 92       	st	Z+, r1
    35d4:	11 82       	std	Z+1, r1	; 0x01
    35d6:	10 82       	st	Z, r1
    35d8:	32 96       	adiw	r30, 0x02	; 2
    35da:	11 82       	std	Z+1, r1	; 0x01
    35dc:	10 82       	st	Z, r1
    35de:	32 96       	adiw	r30, 0x02	; 2
    35e0:	11 82       	std	Z+1, r1	; 0x01
    35e2:	10 82       	st	Z, r1
    35e4:	32 96       	adiw	r30, 0x02	; 2
    35e6:	11 82       	std	Z+1, r1	; 0x01
    35e8:	10 82       	st	Z, r1
    35ea:	32 96       	adiw	r30, 0x02	; 2
    35ec:	11 82       	std	Z+1, r1	; 0x01
    35ee:	10 82       	st	Z, r1
    35f0:	32 96       	adiw	r30, 0x02	; 2
    35f2:	11 82       	std	Z+1, r1	; 0x01
    35f4:	10 82       	st	Z, r1
    35f6:	32 96       	adiw	r30, 0x02	; 2
    35f8:	11 82       	std	Z+1, r1	; 0x01
    35fa:	10 82       	st	Z, r1
    35fc:	32 96       	adiw	r30, 0x02	; 2
    35fe:	11 82       	std	Z+1, r1	; 0x01
    3600:	10 82       	st	Z, r1
    3602:	32 96       	adiw	r30, 0x02	; 2
    3604:	11 82       	std	Z+1, r1	; 0x01
    3606:	10 82       	st	Z, r1
    3608:	32 96       	adiw	r30, 0x02	; 2
    360a:	11 82       	std	Z+1, r1	; 0x01
    360c:	10 82       	st	Z, r1
    360e:	32 96       	adiw	r30, 0x02	; 2
    3610:	11 82       	std	Z+1, r1	; 0x01
    3612:	10 82       	st	Z, r1
    3614:	32 96       	adiw	r30, 0x02	; 2
    3616:	11 82       	std	Z+1, r1	; 0x01
    3618:	10 82       	st	Z, r1
    361a:	36 96       	adiw	r30, 0x06	; 6
    361c:	11 92       	st	Z+, r1
    361e:	11 92       	st	Z+, r1
    3620:	11 92       	st	Z+, r1
    3622:	10 82       	st	Z, r1
    3624:	32 96       	adiw	r30, 0x02	; 2
    3626:	11 92       	st	Z+, r1
    3628:	11 92       	st	Z+, r1
    362a:	11 92       	st	Z+, r1
    362c:	11 92       	st	Z+, r1
    362e:	11 92       	st	Z+, r1
    3630:	11 92       	st	Z+, r1
    3632:	11 92       	st	Z+, r1
    3634:	11 82       	std	Z+1, r1	; 0x01
    3636:	10 82       	st	Z, r1
    3638:	32 96       	adiw	r30, 0x02	; 2
    363a:	11 82       	std	Z+1, r1	; 0x01
    363c:	10 82       	st	Z, r1
    363e:	32 96       	adiw	r30, 0x02	; 2
    3640:	11 82       	std	Z+1, r1	; 0x01
    3642:	10 82       	st	Z, r1
    3644:	32 96       	adiw	r30, 0x02	; 2
    3646:	11 82       	std	Z+1, r1	; 0x01
    3648:	10 82       	st	Z, r1
    364a:	76 97       	sbiw	r30, 0x16	; 22
    364c:	11 82       	std	Z+1, r1	; 0x01
    364e:	10 82       	st	Z, r1
    3650:	32 96       	adiw	r30, 0x02	; 2
    3652:	11 82       	std	Z+1, r1	; 0x01
    3654:	10 82       	st	Z, r1
    3656:	10 92 dc 06 	sts	0x06DC, r1
    365a:	10 92 db 06 	sts	0x06DB, r1
    365e:	10 92 dd 06 	sts	0x06DD, r1
    3662:	87 e0       	ldi	r24, 0x07	; 7
    3664:	61 e0       	ldi	r22, 0x01	; 1
    3666:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    366a:	87 e0       	ldi	r24, 0x07	; 7
    366c:	91 e0       	ldi	r25, 0x01	; 1
    366e:	08 95       	ret

00003670 <STEPPER_run>:
    3670:	ef 92       	push	r14
    3672:	ff 92       	push	r15
    3674:	0f 93       	push	r16
    3676:	1f 93       	push	r17
    3678:	18 2f       	mov	r17, r24
    367a:	06 2f       	mov	r16, r22
    367c:	7a 01       	movw	r14, r20
    367e:	60 e0       	ldi	r22, 0x00	; 0
    3680:	0e 94 86 1b 	call	0x370c	; 0x370c <STEPPER_set_mode>
    3684:	81 2f       	mov	r24, r17
    3686:	60 2f       	mov	r22, r16
    3688:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <STEPPER_set_dir>
    368c:	81 2f       	mov	r24, r17
    368e:	b7 01       	movw	r22, r14
    3690:	0e 94 9b 1b 	call	0x3736	; 0x3736 <STEPPER_set_speed>
    3694:	1f 91       	pop	r17
    3696:	0f 91       	pop	r16
    3698:	ff 90       	pop	r15
    369a:	ef 90       	pop	r14
    369c:	08 95       	ret

0000369e <STEPPER_set_accel>:
    369e:	48 2f       	mov	r20, r24
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	80 93 dd 06 	sts	0x06DD, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	23 e0       	ldi	r18, 0x03	; 3
    36aa:	69 3e       	cpi	r22, 0xE9	; 233
    36ac:	72 07       	cpc	r23, r18
    36ae:	10 f0       	brcs	.+4      	; 0x36b4 <STEPPER_set_accel+0x16>
    36b0:	88 ee       	ldi	r24, 0xE8	; 232
    36b2:	93 e0       	ldi	r25, 0x03	; 3
    36b4:	41 30       	cpi	r20, 0x01	; 1
    36b6:	71 f0       	breq	.+28     	; 0x36d4 <STEPPER_set_accel+0x36>
    36b8:	41 30       	cpi	r20, 0x01	; 1
    36ba:	18 f0       	brcs	.+6      	; 0x36c2 <STEPPER_set_accel+0x24>
    36bc:	42 30       	cpi	r20, 0x02	; 2
    36be:	71 f4       	brne	.+28     	; 0x36dc <STEPPER_set_accel+0x3e>
    36c0:	05 c0       	rjmp	.+10     	; 0x36cc <STEPPER_set_accel+0x2e>
    36c2:	90 93 b2 06 	sts	0x06B2, r25
    36c6:	80 93 b1 06 	sts	0x06B1, r24
    36ca:	08 c0       	rjmp	.+16     	; 0x36dc <STEPPER_set_accel+0x3e>
    36cc:	90 93 b2 06 	sts	0x06B2, r25
    36d0:	80 93 b1 06 	sts	0x06B1, r24
    36d4:	90 93 b4 06 	sts	0x06B4, r25
    36d8:	80 93 b3 06 	sts	0x06B3, r24
    36dc:	10 92 dd 06 	sts	0x06DD, r1
    36e0:	08 95       	ret

000036e2 <STEPPER_set_dir>:
    36e2:	98 2f       	mov	r25, r24
    36e4:	81 e0       	ldi	r24, 0x01	; 1
    36e6:	80 93 dd 06 	sts	0x06DD, r24
    36ea:	91 30       	cpi	r25, 0x01	; 1
    36ec:	51 f0       	breq	.+20     	; 0x3702 <STEPPER_set_dir+0x20>
    36ee:	91 30       	cpi	r25, 0x01	; 1
    36f0:	18 f0       	brcs	.+6      	; 0x36f8 <STEPPER_set_dir+0x16>
    36f2:	92 30       	cpi	r25, 0x02	; 2
    36f4:	41 f4       	brne	.+16     	; 0x3706 <STEPPER_set_dir+0x24>
    36f6:	03 c0       	rjmp	.+6      	; 0x36fe <STEPPER_set_dir+0x1c>
    36f8:	60 93 ca 06 	sts	0x06CA, r22
    36fc:	04 c0       	rjmp	.+8      	; 0x3706 <STEPPER_set_dir+0x24>
    36fe:	60 93 ca 06 	sts	0x06CA, r22
    3702:	60 93 cb 06 	sts	0x06CB, r22
    3706:	10 92 dd 06 	sts	0x06DD, r1
    370a:	08 95       	ret

0000370c <STEPPER_set_mode>:
    370c:	98 2f       	mov	r25, r24
    370e:	81 e0       	ldi	r24, 0x01	; 1
    3710:	80 93 dd 06 	sts	0x06DD, r24
    3714:	91 30       	cpi	r25, 0x01	; 1
    3716:	51 f0       	breq	.+20     	; 0x372c <STEPPER_set_mode+0x20>
    3718:	91 30       	cpi	r25, 0x01	; 1
    371a:	18 f0       	brcs	.+6      	; 0x3722 <STEPPER_set_mode+0x16>
    371c:	92 30       	cpi	r25, 0x02	; 2
    371e:	41 f4       	brne	.+16     	; 0x3730 <STEPPER_set_mode+0x24>
    3720:	03 c0       	rjmp	.+6      	; 0x3728 <STEPPER_set_mode+0x1c>
    3722:	60 93 a7 06 	sts	0x06A7, r22
    3726:	04 c0       	rjmp	.+8      	; 0x3730 <STEPPER_set_mode+0x24>
    3728:	60 93 a7 06 	sts	0x06A7, r22
    372c:	60 93 a8 06 	sts	0x06A8, r22
    3730:	10 92 dd 06 	sts	0x06DD, r1
    3734:	08 95       	ret

00003736 <STEPPER_set_speed>:
    3736:	48 2f       	mov	r20, r24
    3738:	81 e0       	ldi	r24, 0x01	; 1
    373a:	80 93 dd 06 	sts	0x06DD, r24
    373e:	cb 01       	movw	r24, r22
    3740:	21 e0       	ldi	r18, 0x01	; 1
    3742:	61 39       	cpi	r22, 0x91	; 145
    3744:	72 07       	cpc	r23, r18
    3746:	10 f0       	brcs	.+4      	; 0x374c <STEPPER_set_speed+0x16>
    3748:	80 e9       	ldi	r24, 0x90	; 144
    374a:	91 e0       	ldi	r25, 0x01	; 1
    374c:	41 30       	cpi	r20, 0x01	; 1
    374e:	71 f0       	breq	.+28     	; 0x376c <STEPPER_set_speed+0x36>
    3750:	41 30       	cpi	r20, 0x01	; 1
    3752:	18 f0       	brcs	.+6      	; 0x375a <STEPPER_set_speed+0x24>
    3754:	42 30       	cpi	r20, 0x02	; 2
    3756:	71 f4       	brne	.+28     	; 0x3774 <STEPPER_set_speed+0x3e>
    3758:	05 c0       	rjmp	.+10     	; 0x3764 <STEPPER_set_speed+0x2e>
    375a:	90 93 aa 06 	sts	0x06AA, r25
    375e:	80 93 a9 06 	sts	0x06A9, r24
    3762:	08 c0       	rjmp	.+16     	; 0x3774 <STEPPER_set_speed+0x3e>
    3764:	90 93 aa 06 	sts	0x06AA, r25
    3768:	80 93 a9 06 	sts	0x06A9, r24
    376c:	90 93 ac 06 	sts	0x06AC, r25
    3770:	80 93 ab 06 	sts	0x06AB, r24
    3774:	10 92 dd 06 	sts	0x06DD, r1
    3778:	08 95       	ret

0000377a <STEPPER_step>:
    377a:	8f 92       	push	r8
    377c:	9f 92       	push	r9
    377e:	af 92       	push	r10
    3780:	bf 92       	push	r11
    3782:	cf 92       	push	r12
    3784:	df 92       	push	r13
    3786:	ef 92       	push	r14
    3788:	ff 92       	push	r15
    378a:	0f 93       	push	r16
    378c:	1f 93       	push	r17
    378e:	cf 93       	push	r28
    3790:	df 93       	push	r29
    3792:	18 2f       	mov	r17, r24
    3794:	f6 2e       	mov	r15, r22
    3796:	5a 01       	movw	r10, r20
    3798:	49 01       	movw	r8, r18
    379a:	e6 01       	movw	r28, r12
    379c:	61 e0       	ldi	r22, 0x01	; 1
    379e:	0e 94 86 1b 	call	0x370c	; 0x370c <STEPPER_set_mode>
    37a2:	81 2f       	mov	r24, r17
    37a4:	b5 01       	movw	r22, r10
    37a6:	a4 01       	movw	r20, r8
    37a8:	0e 94 8a 24 	call	0x4914	; 0x4914 <STEPPER_setup_decels>
    37ac:	81 2f       	mov	r24, r17
    37ae:	6f 2d       	mov	r22, r15
    37b0:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <STEPPER_set_dir>
    37b4:	81 2f       	mov	r24, r17
    37b6:	60 2f       	mov	r22, r16
    37b8:	0e 94 75 24 	call	0x48ea	; 0x48ea <STEPPER_set_stop_mode>
    37bc:	81 2f       	mov	r24, r17
    37be:	b5 01       	movw	r22, r10
    37c0:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <STEPPER_set_steps>
    37c4:	c1 14       	cp	r12, r1
    37c6:	d1 04       	cpc	r13, r1
    37c8:	99 f0       	breq	.+38     	; 0x37f0 <STEPPER_step+0x76>
    37ca:	11 30       	cpi	r17, 0x01	; 1
    37cc:	49 f0       	breq	.+18     	; 0x37e0 <STEPPER_step+0x66>
    37ce:	11 30       	cpi	r17, 0x01	; 1
    37d0:	18 f0       	brcs	.+6      	; 0x37d8 <STEPPER_step+0x5e>
    37d2:	12 30       	cpi	r17, 0x02	; 2
    37d4:	69 f4       	brne	.+26     	; 0x37f0 <STEPPER_step+0x76>
    37d6:	06 c0       	rjmp	.+12     	; 0x37e4 <STEPPER_step+0x6a>
    37d8:	18 82       	st	Y, r1
    37da:	10 92 d9 06 	sts	0x06D9, r1
    37de:	08 c0       	rjmp	.+16     	; 0x37f0 <STEPPER_step+0x76>
    37e0:	19 82       	std	Y+1, r1	; 0x01
    37e2:	04 c0       	rjmp	.+8      	; 0x37ec <STEPPER_step+0x72>
    37e4:	18 82       	st	Y, r1
    37e6:	19 82       	std	Y+1, r1	; 0x01
    37e8:	10 92 d9 06 	sts	0x06D9, r1
    37ec:	10 92 da 06 	sts	0x06DA, r1
    37f0:	d0 93 dc 06 	sts	0x06DC, r29
    37f4:	c0 93 db 06 	sts	0x06DB, r28
    37f8:	ee 20       	and	r14, r14
    37fa:	b9 f5       	brne	.+110    	; 0x386a <STEPPER_step+0xf0>
    37fc:	8e ee       	ldi	r24, 0xEE	; 238
    37fe:	93 e0       	ldi	r25, 0x03	; 3
    3800:	90 93 dc 06 	sts	0x06DC, r25
    3804:	80 93 db 06 	sts	0x06DB, r24
    3808:	81 2f       	mov	r24, r17
    380a:	b4 01       	movw	r22, r8
    380c:	0e 94 9b 1b 	call	0x3736	; 0x3736 <STEPPER_set_speed>
    3810:	81 2f       	mov	r24, r17
    3812:	0e 94 3b 24 	call	0x4876	; 0x4876 <STEPPER_go>
    3816:	11 30       	cpi	r17, 0x01	; 1
    3818:	71 f0       	breq	.+28     	; 0x3836 <STEPPER_step+0xbc>
    381a:	11 30       	cpi	r17, 0x01	; 1
    381c:	18 f0       	brcs	.+6      	; 0x3824 <STEPPER_step+0xaa>
    381e:	12 30       	cpi	r17, 0x02	; 2
    3820:	59 f5       	brne	.+86     	; 0x3878 <STEPPER_step+0xfe>
    3822:	12 c0       	rjmp	.+36     	; 0x3848 <STEPPER_step+0xce>
    3824:	10 92 ee 03 	sts	0x03EE, r1
    3828:	10 92 d9 06 	sts	0x06D9, r1
    382c:	80 91 ee 03 	lds	r24, 0x03EE
    3830:	88 23       	and	r24, r24
    3832:	e1 f3       	breq	.-8      	; 0x382c <STEPPER_step+0xb2>
    3834:	21 c0       	rjmp	.+66     	; 0x3878 <STEPPER_step+0xfe>
    3836:	10 92 ef 03 	sts	0x03EF, r1
    383a:	10 92 da 06 	sts	0x06DA, r1
    383e:	80 91 ef 03 	lds	r24, 0x03EF
    3842:	88 23       	and	r24, r24
    3844:	e1 f3       	breq	.-8      	; 0x383e <STEPPER_step+0xc4>
    3846:	18 c0       	rjmp	.+48     	; 0x3878 <STEPPER_step+0xfe>
    3848:	10 92 ee 03 	sts	0x03EE, r1
    384c:	10 92 ef 03 	sts	0x03EF, r1
    3850:	10 92 d9 06 	sts	0x06D9, r1
    3854:	10 92 da 06 	sts	0x06DA, r1
    3858:	80 91 ee 03 	lds	r24, 0x03EE
    385c:	88 23       	and	r24, r24
    385e:	e1 f3       	breq	.-8      	; 0x3858 <STEPPER_step+0xde>
    3860:	80 91 ef 03 	lds	r24, 0x03EF
    3864:	88 23       	and	r24, r24
    3866:	c1 f3       	breq	.-16     	; 0x3858 <STEPPER_step+0xde>
    3868:	07 c0       	rjmp	.+14     	; 0x3878 <STEPPER_step+0xfe>
    386a:	81 2f       	mov	r24, r17
    386c:	b4 01       	movw	r22, r8
    386e:	0e 94 9b 1b 	call	0x3736	; 0x3736 <STEPPER_set_speed>
    3872:	81 2f       	mov	r24, r17
    3874:	0e 94 3b 24 	call	0x4876	; 0x4876 <STEPPER_go>
    3878:	df 91       	pop	r29
    387a:	cf 91       	pop	r28
    387c:	1f 91       	pop	r17
    387e:	0f 91       	pop	r16
    3880:	ff 90       	pop	r15
    3882:	ef 90       	pop	r14
    3884:	df 90       	pop	r13
    3886:	cf 90       	pop	r12
    3888:	bf 90       	pop	r11
    388a:	af 90       	pop	r10
    388c:	9f 90       	pop	r9
    388e:	8f 90       	pop	r8
    3890:	08 95       	ret

00003892 <STEPPER_stop>:
    3892:	0f 93       	push	r16
    3894:	1f 93       	push	r17
    3896:	18 2f       	mov	r17, r24
    3898:	06 2f       	mov	r16, r22
    389a:	66 23       	and	r22, r22
    389c:	49 f4       	brne	.+18     	; 0x38b0 <STEPPER_stop+0x1e>
    389e:	60 e0       	ldi	r22, 0x00	; 0
    38a0:	70 e0       	ldi	r23, 0x00	; 0
    38a2:	0e 94 9b 1b 	call	0x3736	; 0x3736 <STEPPER_set_speed>
    38a6:	81 2f       	mov	r24, r17
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	70 e0       	ldi	r23, 0x00	; 0
    38ac:	0e 94 5a 24 	call	0x48b4	; 0x48b4 <STEPPER_set_steps>
    38b0:	81 e0       	ldi	r24, 0x01	; 1
    38b2:	80 93 dd 06 	sts	0x06DD, r24
    38b6:	11 30       	cpi	r17, 0x01	; 1
    38b8:	51 f0       	breq	.+20     	; 0x38ce <STEPPER_stop+0x3c>
    38ba:	11 30       	cpi	r17, 0x01	; 1
    38bc:	18 f0       	brcs	.+6      	; 0x38c4 <STEPPER_stop+0x32>
    38be:	12 30       	cpi	r17, 0x02	; 2
    38c0:	41 f4       	brne	.+16     	; 0x38d2 <STEPPER_stop+0x40>
    38c2:	03 c0       	rjmp	.+6      	; 0x38ca <STEPPER_stop+0x38>
    38c4:	00 93 c5 06 	sts	0x06C5, r16
    38c8:	04 c0       	rjmp	.+8      	; 0x38d2 <STEPPER_stop+0x40>
    38ca:	00 93 c5 06 	sts	0x06C5, r16
    38ce:	00 93 c6 06 	sts	0x06C6, r16
    38d2:	10 92 dd 06 	sts	0x06DD, r1
    38d6:	1f 91       	pop	r17
    38d8:	0f 91       	pop	r16
    38da:	08 95       	ret

000038dc <STEPPER_wait_and_then>:
    38dc:	cf 92       	push	r12
    38de:	df 92       	push	r13
    38e0:	ef 92       	push	r14
    38e2:	ff 92       	push	r15
    38e4:	0f 93       	push	r16
    38e6:	1f 93       	push	r17
    38e8:	df 93       	push	r29
    38ea:	cf 93       	push	r28
    38ec:	cd b7       	in	r28, 0x3d	; 61
    38ee:	de b7       	in	r29, 0x3e	; 62
    38f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    38f2:	81 30       	cpi	r24, 0x01	; 1
    38f4:	61 f0       	breq	.+24     	; 0x390e <STEPPER_wait_and_then+0x32>
    38f6:	81 30       	cpi	r24, 0x01	; 1
    38f8:	18 f0       	brcs	.+6      	; 0x3900 <STEPPER_wait_and_then+0x24>
    38fa:	82 30       	cpi	r24, 0x02	; 2
    38fc:	a1 f5       	brne	.+104    	; 0x3966 <STEPPER_wait_and_then+0x8a>
    38fe:	11 c0       	rjmp	.+34     	; 0x3922 <STEPPER_wait_and_then+0x46>
    3900:	ec 85       	ldd	r30, Y+12	; 0x0c
    3902:	fd 85       	ldd	r31, Y+13	; 0x0d
    3904:	80 91 de 06 	lds	r24, 0x06DE
    3908:	88 23       	and	r24, r24
    390a:	e1 f3       	breq	.-8      	; 0x3904 <STEPPER_wait_and_then+0x28>
    390c:	06 c0       	rjmp	.+12     	; 0x391a <STEPPER_wait_and_then+0x3e>
    390e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3910:	fd 85       	ldd	r31, Y+13	; 0x0d
    3912:	80 91 df 06 	lds	r24, 0x06DF
    3916:	88 23       	and	r24, r24
    3918:	e1 f3       	breq	.-8      	; 0x3912 <STEPPER_wait_and_then+0x36>
    391a:	30 97       	sbiw	r30, 0x00	; 0
    391c:	21 f1       	breq	.+72     	; 0x3966 <STEPPER_wait_and_then+0x8a>
    391e:	09 95       	icall
    3920:	22 c0       	rjmp	.+68     	; 0x3966 <STEPPER_wait_and_then+0x8a>
    3922:	cc 84       	ldd	r12, Y+12	; 0x0c
    3924:	dd 84       	ldd	r13, Y+13	; 0x0d
    3926:	ee 84       	ldd	r14, Y+14	; 0x0e
    3928:	ff 84       	ldd	r15, Y+15	; 0x0f
    392a:	00 e0       	ldi	r16, 0x00	; 0
    392c:	10 e0       	ldi	r17, 0x00	; 0
    392e:	00 23       	and	r16, r16
    3930:	51 f4       	brne	.+20     	; 0x3946 <STEPPER_wait_and_then+0x6a>
    3932:	80 91 de 06 	lds	r24, 0x06DE
    3936:	88 23       	and	r24, r24
    3938:	31 f0       	breq	.+12     	; 0x3946 <STEPPER_wait_and_then+0x6a>
    393a:	c1 14       	cp	r12, r1
    393c:	d1 04       	cpc	r13, r1
    393e:	11 f0       	breq	.+4      	; 0x3944 <STEPPER_wait_and_then+0x68>
    3940:	f6 01       	movw	r30, r12
    3942:	09 95       	icall
    3944:	01 e0       	ldi	r16, 0x01	; 1
    3946:	11 23       	and	r17, r17
    3948:	51 f4       	brne	.+20     	; 0x395e <STEPPER_wait_and_then+0x82>
    394a:	80 91 df 06 	lds	r24, 0x06DF
    394e:	88 23       	and	r24, r24
    3950:	31 f0       	breq	.+12     	; 0x395e <STEPPER_wait_and_then+0x82>
    3952:	e1 14       	cp	r14, r1
    3954:	f1 04       	cpc	r15, r1
    3956:	11 f0       	breq	.+4      	; 0x395c <STEPPER_wait_and_then+0x80>
    3958:	f7 01       	movw	r30, r14
    395a:	09 95       	icall
    395c:	11 e0       	ldi	r17, 0x01	; 1
    395e:	00 23       	and	r16, r16
    3960:	31 f3       	breq	.-52     	; 0x392e <STEPPER_wait_and_then+0x52>
    3962:	11 23       	and	r17, r17
    3964:	21 f3       	breq	.-56     	; 0x392e <STEPPER_wait_and_then+0x52>
    3966:	cf 91       	pop	r28
    3968:	df 91       	pop	r29
    396a:	1f 91       	pop	r17
    396c:	0f 91       	pop	r16
    396e:	ff 90       	pop	r15
    3970:	ef 90       	pop	r14
    3972:	df 90       	pop	r13
    3974:	cf 90       	pop	r12
    3976:	08 95       	ret

00003978 <SYS_get_state>:
    3978:	e8 2f       	mov	r30, r24
    397a:	f0 e0       	ldi	r31, 0x00	; 0
    397c:	e3 31       	cpi	r30, 0x13	; 19
    397e:	f1 05       	cpc	r31, r1
    3980:	40 f4       	brcc	.+16     	; 0x3992 <SYS_get_state+0x1a>
    3982:	e2 5c       	subi	r30, 0xC2	; 194
    3984:	ff 4f       	sbci	r31, 0xFF	; 255
    3986:	ee 0f       	add	r30, r30
    3988:	ff 1f       	adc	r31, r31
    398a:	05 90       	lpm	r0, Z+
    398c:	f4 91       	lpm	r31, Z+
    398e:	e0 2d       	mov	r30, r0
    3990:	09 94       	ijmp
    3992:	80 e0       	ldi	r24, 0x00	; 0
    3994:	08 95       	ret
    3996:	80 91 e0 06 	lds	r24, 0x06E0
    399a:	08 95       	ret
    399c:	80 91 e1 06 	lds	r24, 0x06E1
    39a0:	08 95       	ret
    39a2:	80 91 e2 06 	lds	r24, 0x06E2
    39a6:	08 95       	ret
    39a8:	80 91 e3 06 	lds	r24, 0x06E3
    39ac:	08 95       	ret
    39ae:	80 91 e4 06 	lds	r24, 0x06E4
    39b2:	08 95       	ret
    39b4:	80 91 e6 06 	lds	r24, 0x06E6
    39b8:	08 95       	ret
    39ba:	80 91 e5 06 	lds	r24, 0x06E5
    39be:	08 95       	ret
    39c0:	80 91 e7 06 	lds	r24, 0x06E7
    39c4:	08 95       	ret
    39c6:	80 91 e8 06 	lds	r24, 0x06E8
    39ca:	08 95       	ret
    39cc:	80 91 e9 06 	lds	r24, 0x06E9
    39d0:	08 95       	ret
    39d2:	80 91 ea 06 	lds	r24, 0x06EA
    39d6:	08 95       	ret
    39d8:	80 91 eb 06 	lds	r24, 0x06EB
    39dc:	08 95       	ret
    39de:	80 91 ec 06 	lds	r24, 0x06EC
    39e2:	08 95       	ret
    39e4:	80 91 ed 06 	lds	r24, 0x06ED
    39e8:	08 95       	ret
    39ea:	80 91 ee 06 	lds	r24, 0x06EE
    39ee:	08 95       	ret
    39f0:	80 91 ef 06 	lds	r24, 0x06EF
    39f4:	08 95       	ret
    39f6:	80 91 f0 06 	lds	r24, 0x06F0
    39fa:	08 95       	ret
    39fc:	80 91 f1 06 	lds	r24, 0x06F1
    3a00:	08 95       	ret
    3a02:	80 91 f2 06 	lds	r24, 0x06F2
    3a06:	08 95       	ret

00003a08 <SYS_set_state>:
    3a08:	e8 2f       	mov	r30, r24
    3a0a:	f0 e0       	ldi	r31, 0x00	; 0
    3a0c:	e3 31       	cpi	r30, 0x13	; 19
    3a0e:	f1 05       	cpc	r31, r1
    3a10:	08 f0       	brcs	.+2      	; 0x3a14 <SYS_set_state+0xc>
    3a12:	40 c0       	rjmp	.+128    	; 0x3a94 <SYS_set_state+0x8c>
    3a14:	ef 5a       	subi	r30, 0xAF	; 175
    3a16:	ff 4f       	sbci	r31, 0xFF	; 255
    3a18:	ee 0f       	add	r30, r30
    3a1a:	ff 1f       	adc	r31, r31
    3a1c:	05 90       	lpm	r0, Z+
    3a1e:	f4 91       	lpm	r31, Z+
    3a20:	e0 2d       	mov	r30, r0
    3a22:	09 94       	ijmp
    3a24:	60 93 e0 06 	sts	0x06E0, r22
    3a28:	08 95       	ret
    3a2a:	60 93 e1 06 	sts	0x06E1, r22
    3a2e:	08 95       	ret
    3a30:	60 93 e2 06 	sts	0x06E2, r22
    3a34:	08 95       	ret
    3a36:	60 93 e3 06 	sts	0x06E3, r22
    3a3a:	08 95       	ret
    3a3c:	60 93 e4 06 	sts	0x06E4, r22
    3a40:	08 95       	ret
    3a42:	60 93 e6 06 	sts	0x06E6, r22
    3a46:	08 95       	ret
    3a48:	60 93 e5 06 	sts	0x06E5, r22
    3a4c:	08 95       	ret
    3a4e:	60 93 e7 06 	sts	0x06E7, r22
    3a52:	08 95       	ret
    3a54:	60 93 e8 06 	sts	0x06E8, r22
    3a58:	08 95       	ret
    3a5a:	60 93 e9 06 	sts	0x06E9, r22
    3a5e:	08 95       	ret
    3a60:	60 93 ea 06 	sts	0x06EA, r22
    3a64:	08 95       	ret
    3a66:	60 93 eb 06 	sts	0x06EB, r22
    3a6a:	08 95       	ret
    3a6c:	60 93 ec 06 	sts	0x06EC, r22
    3a70:	08 95       	ret
    3a72:	60 93 ed 06 	sts	0x06ED, r22
    3a76:	08 95       	ret
    3a78:	60 93 ee 06 	sts	0x06EE, r22
    3a7c:	08 95       	ret
    3a7e:	60 93 ef 06 	sts	0x06EF, r22
    3a82:	08 95       	ret
    3a84:	60 93 f0 06 	sts	0x06F0, r22
    3a88:	08 95       	ret
    3a8a:	60 93 f1 06 	sts	0x06F1, r22
    3a8e:	08 95       	ret
    3a90:	60 93 f0 06 	sts	0x06F0, r22
    3a94:	08 95       	ret

00003a96 <ATTINY_get_sensors>:
    3a96:	0f 93       	push	r16
    3a98:	1f 93       	push	r17
    3a9a:	81 e0       	ldi	r24, 0x01	; 1
    3a9c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    3aa0:	81 30       	cpi	r24, 0x01	; 1
    3aa2:	11 f0       	breq	.+4      	; 0x3aa8 <ATTINY_get_sensors+0x12>
    3aa4:	00 e0       	ldi	r16, 0x00	; 0
    3aa6:	24 c0       	rjmp	.+72     	; 0x3af0 <ATTINY_get_sensors+0x5a>
    3aa8:	87 e0       	ldi	r24, 0x07	; 7
    3aaa:	0e 94 74 18 	call	0x30e8	; 0x30e8 <SPI_set_slave_addr>
    3aae:	82 e0       	ldi	r24, 0x02	; 2
    3ab0:	6a e0       	ldi	r22, 0x0A	; 10
    3ab2:	0e 94 c5 18 	call	0x318a	; 0x318a <SPI_transmit>
    3ab6:	82 e0       	ldi	r24, 0x02	; 2
    3ab8:	62 eb       	ldi	r22, 0xB2	; 178
    3aba:	0e 94 c5 18 	call	0x318a	; 0x318a <SPI_transmit>
    3abe:	18 ec       	ldi	r17, 0xC8	; 200
    3ac0:	81 2f       	mov	r24, r17
    3ac2:	8a 95       	dec	r24
    3ac4:	f1 f7       	brne	.-4      	; 0x3ac2 <ATTINY_get_sensors+0x2c>
    3ac6:	82 e0       	ldi	r24, 0x02	; 2
    3ac8:	60 e0       	ldi	r22, 0x00	; 0
    3aca:	0e 94 26 23 	call	0x464c	; 0x464c <SPI_receive>
    3ace:	08 2f       	mov	r16, r24
    3ad0:	81 2f       	mov	r24, r17
    3ad2:	8a 95       	dec	r24
    3ad4:	f1 f7       	brne	.-4      	; 0x3ad2 <ATTINY_get_sensors+0x3c>
    3ad6:	82 e0       	ldi	r24, 0x02	; 2
    3ad8:	60 e0       	ldi	r22, 0x00	; 0
    3ada:	0e 94 26 23 	call	0x464c	; 0x464c <SPI_receive>
    3ade:	1a 95       	dec	r17
    3ae0:	f1 f7       	brne	.-4      	; 0x3ade <ATTINY_get_sensors+0x48>
    3ae2:	87 e0       	ldi	r24, 0x07	; 7
    3ae4:	0e 94 74 18 	call	0x30e8	; 0x30e8 <SPI_set_slave_addr>
    3ae8:	88 e8       	ldi	r24, 0x88	; 136
    3aea:	93 e1       	ldi	r25, 0x13	; 19
    3aec:	01 97       	sbiw	r24, 0x01	; 1
    3aee:	f1 f7       	brne	.-4      	; 0x3aec <ATTINY_get_sensors+0x56>
    3af0:	80 2f       	mov	r24, r16
    3af2:	1f 91       	pop	r17
    3af4:	0f 91       	pop	r16
    3af6:	08 95       	ret

00003af8 <ATTINY_get_SW_state>:
    3af8:	1f 93       	push	r17
    3afa:	cf 93       	push	r28
    3afc:	df 93       	push	r29
    3afe:	18 2f       	mov	r17, r24
    3b00:	80 91 f1 03 	lds	r24, 0x03F1
    3b04:	88 23       	and	r24, r24
    3b06:	41 f0       	breq	.+16     	; 0x3b18 <ATTINY_get_SW_state+0x20>
    3b08:	80 91 fb 03 	lds	r24, 0x03FB
    3b0c:	88 23       	and	r24, r24
    3b0e:	99 f0       	breq	.+38     	; 0x3b36 <ATTINY_get_SW_state+0x3e>
    3b10:	10 92 f1 03 	sts	0x03F1, r1
    3b14:	10 92 fb 03 	sts	0x03FB, r1
    3b18:	0e 94 4b 1d 	call	0x3a96	; 0x3a96 <ATTINY_get_sensors>
    3b1c:	80 93 f0 03 	sts	0x03F0, r24
    3b20:	85 ef       	ldi	r24, 0xF5	; 245
    3b22:	93 e0       	ldi	r25, 0x03	; 3
    3b24:	61 e0       	ldi	r22, 0x01	; 1
    3b26:	40 e0       	ldi	r20, 0x00	; 0
    3b28:	22 e3       	ldi	r18, 0x32	; 50
    3b2a:	30 e0       	ldi	r19, 0x00	; 0
    3b2c:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <TMRSRVC_new>
    3b30:	81 e0       	ldi	r24, 0x01	; 1
    3b32:	80 93 f1 03 	sts	0x03F1, r24
    3b36:	90 91 f0 03 	lds	r25, 0x03F0
    3b3a:	a1 2f       	mov	r26, r17
    3b3c:	b0 e0       	ldi	r27, 0x00	; 0
    3b3e:	ed 01       	movw	r28, r26
    3b40:	c8 56       	subi	r28, 0x68	; 104
    3b42:	dc 4f       	sbci	r29, 0xFC	; 252
    3b44:	88 81       	ld	r24, Y
    3b46:	88 23       	and	r24, r24
    3b48:	69 f0       	breq	.+26     	; 0x3b64 <ATTINY_get_SW_state+0x6c>
    3b4a:	fd 01       	movw	r30, r26
    3b4c:	e5 56       	subi	r30, 0x65	; 101
    3b4e:	fc 4f       	sbci	r31, 0xFC	; 252
    3b50:	80 81       	ld	r24, Z
    3b52:	98 23       	and	r25, r24
    3b54:	c1 f0       	breq	.+48     	; 0x3b86 <ATTINY_get_SW_state+0x8e>
    3b56:	fd 01       	movw	r30, r26
    3b58:	ee 50       	subi	r30, 0x0E	; 14
    3b5a:	fc 4f       	sbci	r31, 0xFC	; 252
    3b5c:	81 e0       	ldi	r24, 0x01	; 1
    3b5e:	80 83       	st	Z, r24
    3b60:	18 82       	st	Y, r1
    3b62:	11 c0       	rjmp	.+34     	; 0x3b86 <ATTINY_get_SW_state+0x8e>
    3b64:	fd 01       	movw	r30, r26
    3b66:	ee 50       	subi	r30, 0x0E	; 14
    3b68:	fc 4f       	sbci	r31, 0xFC	; 252
    3b6a:	80 81       	ld	r24, Z
    3b6c:	81 11       	cpse	r24, r1
    3b6e:	10 82       	st	Z, r1
    3b70:	fd 01       	movw	r30, r26
    3b72:	e5 56       	subi	r30, 0x65	; 101
    3b74:	fc 4f       	sbci	r31, 0xFC	; 252
    3b76:	80 81       	ld	r24, Z
    3b78:	98 23       	and	r25, r24
    3b7a:	29 f4       	brne	.+10     	; 0x3b86 <ATTINY_get_SW_state+0x8e>
    3b7c:	fd 01       	movw	r30, r26
    3b7e:	e8 56       	subi	r30, 0x68	; 104
    3b80:	fc 4f       	sbci	r31, 0xFC	; 252
    3b82:	81 e0       	ldi	r24, 0x01	; 1
    3b84:	80 83       	st	Z, r24
    3b86:	ae 50       	subi	r26, 0x0E	; 14
    3b88:	bc 4f       	sbci	r27, 0xFC	; 252
    3b8a:	8c 91       	ld	r24, X
    3b8c:	df 91       	pop	r29
    3b8e:	cf 91       	pop	r28
    3b90:	1f 91       	pop	r17
    3b92:	08 95       	ret

00003b94 <ATTINY_open>:
    3b94:	82 e0       	ldi	r24, 0x02	; 2
    3b96:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    3b9a:	88 23       	and	r24, r24
    3b9c:	19 f4       	brne	.+6      	; 0x3ba4 <ATTINY_open+0x10>
    3b9e:	90 e0       	ldi	r25, 0x00	; 0
    3ba0:	82 e0       	ldi	r24, 0x02	; 2
    3ba2:	08 95       	ret
    3ba4:	10 92 0e 07 	sts	0x070E, r1
    3ba8:	10 92 0d 07 	sts	0x070D, r1
    3bac:	10 92 10 07 	sts	0x0710, r1
    3bb0:	10 92 0f 07 	sts	0x070F, r1
    3bb4:	10 92 12 07 	sts	0x0712, r1
    3bb8:	10 92 11 07 	sts	0x0711, r1
    3bbc:	10 92 14 07 	sts	0x0714, r1
    3bc0:	10 92 13 07 	sts	0x0713, r1
    3bc4:	10 92 16 07 	sts	0x0716, r1
    3bc8:	10 92 15 07 	sts	0x0715, r1
    3bcc:	80 e9       	ldi	r24, 0x90	; 144
    3bce:	91 e0       	ldi	r25, 0x01	; 1
    3bd0:	90 93 fa 06 	sts	0x06FA, r25
    3bd4:	80 93 f9 06 	sts	0x06F9, r24
    3bd8:	90 93 fc 06 	sts	0x06FC, r25
    3bdc:	80 93 fb 06 	sts	0x06FB, r24
    3be0:	90 93 fe 06 	sts	0x06FE, r25
    3be4:	80 93 fd 06 	sts	0x06FD, r24
    3be8:	90 93 00 07 	sts	0x0700, r25
    3bec:	80 93 ff 06 	sts	0x06FF, r24
    3bf0:	90 93 02 07 	sts	0x0702, r25
    3bf4:	80 93 01 07 	sts	0x0701, r24
    3bf8:	84 e3       	ldi	r24, 0x34	; 52
    3bfa:	98 e0       	ldi	r25, 0x08	; 8
    3bfc:	90 93 04 07 	sts	0x0704, r25
    3c00:	80 93 03 07 	sts	0x0703, r24
    3c04:	90 93 06 07 	sts	0x0706, r25
    3c08:	80 93 05 07 	sts	0x0705, r24
    3c0c:	90 93 08 07 	sts	0x0708, r25
    3c10:	80 93 07 07 	sts	0x0707, r24
    3c14:	90 93 0a 07 	sts	0x070A, r25
    3c18:	80 93 09 07 	sts	0x0709, r24
    3c1c:	90 93 0c 07 	sts	0x070C, r25
    3c20:	80 93 0b 07 	sts	0x070B, r24
    3c24:	81 e0       	ldi	r24, 0x01	; 1
    3c26:	61 e0       	ldi	r22, 0x01	; 1
    3c28:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    3c2c:	91 e0       	ldi	r25, 0x01	; 1
    3c2e:	81 e0       	ldi	r24, 0x01	; 1
    3c30:	08 95       	ret

00003c32 <TMRSRVC_delay>:
    3c32:	df 93       	push	r29
    3c34:	cf 93       	push	r28
    3c36:	cd b7       	in	r28, 0x3d	; 61
    3c38:	de b7       	in	r29, 0x3e	; 62
    3c3a:	29 97       	sbiw	r28, 0x09	; 9
    3c3c:	0f b6       	in	r0, 0x3f	; 63
    3c3e:	f8 94       	cli
    3c40:	de bf       	out	0x3e, r29	; 62
    3c42:	0f be       	out	0x3f, r0	; 63
    3c44:	cd bf       	out	0x3d, r28	; 61
    3c46:	9c 01       	movw	r18, r24
    3c48:	ce 01       	movw	r24, r28
    3c4a:	01 96       	adiw	r24, 0x01	; 1
    3c4c:	61 e0       	ldi	r22, 0x01	; 1
    3c4e:	40 e0       	ldi	r20, 0x00	; 0
    3c50:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <TMRSRVC_new>
    3c54:	98 2f       	mov	r25, r24
    3c56:	88 23       	and	r24, r24
    3c58:	19 f4       	brne	.+6      	; 0x3c60 <TMRSRVC_delay+0x2e>
    3c5a:	8f 81       	ldd	r24, Y+7	; 0x07
    3c5c:	88 23       	and	r24, r24
    3c5e:	e9 f3       	breq	.-6      	; 0x3c5a <TMRSRVC_delay+0x28>
    3c60:	89 2f       	mov	r24, r25
    3c62:	29 96       	adiw	r28, 0x09	; 9
    3c64:	0f b6       	in	r0, 0x3f	; 63
    3c66:	f8 94       	cli
    3c68:	de bf       	out	0x3e, r29	; 62
    3c6a:	0f be       	out	0x3f, r0	; 63
    3c6c:	cd bf       	out	0x3d, r28	; 61
    3c6e:	cf 91       	pop	r28
    3c70:	df 91       	pop	r29
    3c72:	08 95       	ret

00003c74 <TMRSRVC_new>:
    3c74:	ef 92       	push	r14
    3c76:	ff 92       	push	r15
    3c78:	0f 93       	push	r16
    3c7a:	1f 93       	push	r17
    3c7c:	cf 93       	push	r28
    3c7e:	df 93       	push	r29
    3c80:	ec 01       	movw	r28, r24
    3c82:	f6 2e       	mov	r15, r22
    3c84:	e4 2e       	mov	r14, r20
    3c86:	89 01       	movw	r16, r18
    3c88:	88 e0       	ldi	r24, 0x08	; 8
    3c8a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    3c8e:	81 30       	cpi	r24, 0x01	; 1
    3c90:	11 f0       	breq	.+4      	; 0x3c96 <TMRSRVC_new+0x22>
    3c92:	81 e0       	ldi	r24, 0x01	; 1
    3c94:	26 c0       	rjmp	.+76     	; 0x3ce2 <TMRSRVC_new+0x6e>
    3c96:	84 e0       	ldi	r24, 0x04	; 4
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	0e 94 d1 31 	call	0x63a2	; 0x63a2 <malloc>
    3c9e:	fc 01       	movw	r30, r24
    3ca0:	00 97       	sbiw	r24, 0x00	; 0
    3ca2:	11 f4       	brne	.+4      	; 0x3ca8 <TMRSRVC_new+0x34>
    3ca4:	82 e0       	ldi	r24, 0x02	; 2
    3ca6:	1d c0       	rjmp	.+58     	; 0x3ce2 <TMRSRVC_new+0x6e>
    3ca8:	f9 82       	std	Y+1, r15	; 0x01
    3caa:	f0 fc       	sbrc	r15, 0
    3cac:	1e 82       	std	Y+6, r1	; 0x06
    3cae:	81 e0       	ldi	r24, 0x01	; 1
    3cb0:	e8 16       	cp	r14, r24
    3cb2:	19 f4       	brne	.+6      	; 0x3cba <TMRSRVC_new+0x46>
    3cb4:	89 81       	ldd	r24, Y+1	; 0x01
    3cb6:	84 60       	ori	r24, 0x04	; 4
    3cb8:	89 83       	std	Y+1, r24	; 0x01
    3cba:	89 81       	ldd	r24, Y+1	; 0x01
    3cbc:	88 60       	ori	r24, 0x08	; 8
    3cbe:	89 83       	std	Y+1, r24	; 0x01
    3cc0:	1b 83       	std	Y+3, r17	; 0x03
    3cc2:	0a 83       	std	Y+2, r16	; 0x02
    3cc4:	1d 83       	std	Y+5, r17	; 0x05
    3cc6:	0c 83       	std	Y+4, r16	; 0x04
    3cc8:	d1 83       	std	Z+1, r29	; 0x01
    3cca:	c0 83       	st	Z, r28
    3ccc:	13 82       	std	Z+3, r1	; 0x03
    3cce:	12 82       	std	Z+2, r1	; 0x02
    3cd0:	81 e0       	ldi	r24, 0x01	; 1
    3cd2:	80 93 5e 04 	sts	0x045E, r24
    3cd6:	cf 01       	movw	r24, r30
    3cd8:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <TMRSRVC_insert>
    3cdc:	10 92 5e 04 	sts	0x045E, r1
    3ce0:	80 e0       	ldi	r24, 0x00	; 0
    3ce2:	df 91       	pop	r29
    3ce4:	cf 91       	pop	r28
    3ce6:	1f 91       	pop	r17
    3ce8:	0f 91       	pop	r16
    3cea:	ff 90       	pop	r15
    3cec:	ef 90       	pop	r14
    3cee:	08 95       	ret

00003cf0 <I2C_MSTR_get>:
    3cf0:	fc 01       	movw	r30, r24
    3cf2:	80 91 1a 07 	lds	r24, 0x071A
    3cf6:	81 30       	cpi	r24, 0x01	; 1
    3cf8:	11 f0       	breq	.+4      	; 0x3cfe <I2C_MSTR_get+0xe>
    3cfa:	85 e0       	ldi	r24, 0x05	; 5
    3cfc:	08 95       	ret
    3cfe:	80 91 1b 07 	lds	r24, 0x071B
    3d02:	81 30       	cpi	r24, 0x01	; 1
    3d04:	11 f0       	breq	.+4      	; 0x3d0a <I2C_MSTR_get+0x1a>
    3d06:	8a e0       	ldi	r24, 0x0A	; 10
    3d08:	08 95       	ret
    3d0a:	61 30       	cpi	r22, 0x01	; 1
    3d0c:	11 f4       	brne	.+4      	; 0x3d12 <I2C_MSTR_get+0x22>
    3d0e:	84 ec       	ldi	r24, 0xC4	; 196
    3d10:	01 c0       	rjmp	.+2      	; 0x3d14 <I2C_MSTR_get+0x24>
    3d12:	84 e8       	ldi	r24, 0x84	; 132
    3d14:	80 93 bc 00 	sts	0x00BC, r24
    3d18:	80 91 bc 00 	lds	r24, 0x00BC
    3d1c:	87 ff       	sbrs	r24, 7
    3d1e:	fc cf       	rjmp	.-8      	; 0x3d18 <I2C_MSTR_get+0x28>
    3d20:	61 30       	cpi	r22, 0x01	; 1
    3d22:	31 f4       	brne	.+12     	; 0x3d30 <I2C_MSTR_get+0x40>
    3d24:	80 91 b9 00 	lds	r24, 0x00B9
    3d28:	88 7f       	andi	r24, 0xF8	; 248
    3d2a:	80 35       	cpi	r24, 0x50	; 80
    3d2c:	59 f4       	brne	.+22     	; 0x3d44 <I2C_MSTR_get+0x54>
    3d2e:	05 c0       	rjmp	.+10     	; 0x3d3a <I2C_MSTR_get+0x4a>
    3d30:	80 91 b9 00 	lds	r24, 0x00B9
    3d34:	88 7f       	andi	r24, 0xF8	; 248
    3d36:	88 35       	cpi	r24, 0x58	; 88
    3d38:	29 f4       	brne	.+10     	; 0x3d44 <I2C_MSTR_get+0x54>
    3d3a:	80 91 bb 00 	lds	r24, 0x00BB
    3d3e:	80 83       	st	Z, r24
    3d40:	80 e0       	ldi	r24, 0x00	; 0
    3d42:	08 95       	ret
    3d44:	82 e0       	ldi	r24, 0x02	; 2
    3d46:	08 95       	ret

00003d48 <I2C_MSTR_send>:
    3d48:	98 2f       	mov	r25, r24
    3d4a:	80 91 1a 07 	lds	r24, 0x071A
    3d4e:	81 30       	cpi	r24, 0x01	; 1
    3d50:	11 f0       	breq	.+4      	; 0x3d56 <I2C_MSTR_send+0xe>
    3d52:	85 e0       	ldi	r24, 0x05	; 5
    3d54:	08 95       	ret
    3d56:	80 91 1b 07 	lds	r24, 0x071B
    3d5a:	81 30       	cpi	r24, 0x01	; 1
    3d5c:	11 f0       	breq	.+4      	; 0x3d62 <I2C_MSTR_send+0x1a>
    3d5e:	8a e0       	ldi	r24, 0x0A	; 10
    3d60:	08 95       	ret
    3d62:	90 93 bb 00 	sts	0x00BB, r25
    3d66:	84 e8       	ldi	r24, 0x84	; 132
    3d68:	80 93 bc 00 	sts	0x00BC, r24
    3d6c:	80 91 bc 00 	lds	r24, 0x00BC
    3d70:	87 ff       	sbrs	r24, 7
    3d72:	fc cf       	rjmp	.-8      	; 0x3d6c <I2C_MSTR_send+0x24>
    3d74:	80 91 b9 00 	lds	r24, 0x00B9
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	88 7f       	andi	r24, 0xF8	; 248
    3d7c:	90 70       	andi	r25, 0x00	; 0
    3d7e:	88 32       	cpi	r24, 0x28	; 40
    3d80:	91 05       	cpc	r25, r1
    3d82:	21 f0       	breq	.+8      	; 0x3d8c <I2C_MSTR_send+0x44>
    3d84:	c0 97       	sbiw	r24, 0x30	; 48
    3d86:	21 f4       	brne	.+8      	; 0x3d90 <I2C_MSTR_send+0x48>
    3d88:	83 e0       	ldi	r24, 0x03	; 3
    3d8a:	08 95       	ret
    3d8c:	80 e0       	ldi	r24, 0x00	; 0
    3d8e:	08 95       	ret
    3d90:	8c e0       	ldi	r24, 0x0C	; 12
    3d92:	08 95       	ret

00003d94 <I2C_MSTR_start>:
    3d94:	98 2f       	mov	r25, r24
    3d96:	20 91 1a 07 	lds	r18, 0x071A
    3d9a:	21 30       	cpi	r18, 0x01	; 1
    3d9c:	11 f0       	breq	.+4      	; 0x3da2 <I2C_MSTR_start+0xe>
    3d9e:	85 e0       	ldi	r24, 0x05	; 5
    3da0:	08 95       	ret
    3da2:	80 91 1c 07 	lds	r24, 0x071C
    3da6:	81 30       	cpi	r24, 0x01	; 1
    3da8:	11 f4       	brne	.+4      	; 0x3dae <I2C_MSTR_start+0x1a>
    3daa:	89 e0       	ldi	r24, 0x09	; 9
    3dac:	08 95       	ret
    3dae:	20 93 1b 07 	sts	0x071B, r18
    3db2:	84 ea       	ldi	r24, 0xA4	; 164
    3db4:	80 93 bc 00 	sts	0x00BC, r24
    3db8:	80 91 bc 00 	lds	r24, 0x00BC
    3dbc:	87 ff       	sbrs	r24, 7
    3dbe:	fc cf       	rjmp	.-8      	; 0x3db8 <I2C_MSTR_start+0x24>
    3dc0:	80 91 b9 00 	lds	r24, 0x00B9
    3dc4:	88 7f       	andi	r24, 0xF8	; 248
    3dc6:	88 30       	cpi	r24, 0x08	; 8
    3dc8:	39 f0       	breq	.+14     	; 0x3dd8 <I2C_MSTR_start+0x44>
    3dca:	80 91 b9 00 	lds	r24, 0x00B9
    3dce:	88 7f       	andi	r24, 0xF8	; 248
    3dd0:	80 31       	cpi	r24, 0x10	; 16
    3dd2:	11 f0       	breq	.+4      	; 0x3dd8 <I2C_MSTR_start+0x44>
    3dd4:	81 e0       	ldi	r24, 0x01	; 1
    3dd6:	08 95       	ret
    3dd8:	61 30       	cpi	r22, 0x01	; 1
    3dda:	19 f4       	brne	.+6      	; 0x3de2 <I2C_MSTR_start+0x4e>
    3ddc:	99 0f       	add	r25, r25
    3dde:	91 60       	ori	r25, 0x01	; 1
    3de0:	03 c0       	rjmp	.+6      	; 0x3de8 <I2C_MSTR_start+0x54>
    3de2:	66 23       	and	r22, r22
    3de4:	19 f4       	brne	.+6      	; 0x3dec <I2C_MSTR_start+0x58>
    3de6:	99 0f       	add	r25, r25
    3de8:	90 93 bb 00 	sts	0x00BB, r25
    3dec:	84 e8       	ldi	r24, 0x84	; 132
    3dee:	80 93 bc 00 	sts	0x00BC, r24
    3df2:	80 91 bc 00 	lds	r24, 0x00BC
    3df6:	87 ff       	sbrs	r24, 7
    3df8:	fc cf       	rjmp	.-8      	; 0x3df2 <I2C_MSTR_start+0x5e>
    3dfa:	61 30       	cpi	r22, 0x01	; 1
    3dfc:	31 f4       	brne	.+12     	; 0x3e0a <I2C_MSTR_start+0x76>
    3dfe:	80 91 b9 00 	lds	r24, 0x00B9
    3e02:	88 7f       	andi	r24, 0xF8	; 248
    3e04:	80 34       	cpi	r24, 0x40	; 64
    3e06:	41 f4       	brne	.+16     	; 0x3e18 <I2C_MSTR_start+0x84>
    3e08:	09 c0       	rjmp	.+18     	; 0x3e1c <I2C_MSTR_start+0x88>
    3e0a:	66 23       	and	r22, r22
    3e0c:	39 f4       	brne	.+14     	; 0x3e1c <I2C_MSTR_start+0x88>
    3e0e:	80 91 b9 00 	lds	r24, 0x00B9
    3e12:	88 7f       	andi	r24, 0xF8	; 248
    3e14:	88 31       	cpi	r24, 0x18	; 24
    3e16:	11 f0       	breq	.+4      	; 0x3e1c <I2C_MSTR_start+0x88>
    3e18:	82 e0       	ldi	r24, 0x02	; 2
    3e1a:	08 95       	ret
    3e1c:	80 e0       	ldi	r24, 0x00	; 0
    3e1e:	08 95       	ret

00003e20 <I2C_MSTR_stop>:
    3e20:	80 91 1b 07 	lds	r24, 0x071B
    3e24:	81 30       	cpi	r24, 0x01	; 1
    3e26:	11 f0       	breq	.+4      	; 0x3e2c <I2C_MSTR_stop+0xc>
    3e28:	8a e0       	ldi	r24, 0x0A	; 10
    3e2a:	08 95       	ret
    3e2c:	80 91 1d 07 	lds	r24, 0x071D
    3e30:	81 30       	cpi	r24, 0x01	; 1
    3e32:	29 f4       	brne	.+10     	; 0x3e3e <I2C_MSTR_stop+0x1e>
    3e34:	85 e9       	ldi	r24, 0x95	; 149
    3e36:	80 93 bc 00 	sts	0x00BC, r24
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	08 95       	ret
    3e3e:	84 e9       	ldi	r24, 0x94	; 148
    3e40:	80 93 bc 00 	sts	0x00BC, r24
    3e44:	80 e0       	ldi	r24, 0x00	; 0
    3e46:	08 95       	ret

00003e48 <I2C_open>:
    3e48:	82 e1       	ldi	r24, 0x12	; 18
    3e4a:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    3e4e:	88 23       	and	r24, r24
    3e50:	b1 f4       	brne	.+44     	; 0x3e7e <I2C_open+0x36>
    3e52:	10 92 1a 07 	sts	0x071A, r1
    3e56:	10 92 1b 07 	sts	0x071B, r1
    3e5a:	10 92 1c 07 	sts	0x071C, r1
    3e5e:	10 92 1d 07 	sts	0x071D, r1
    3e62:	10 92 1e 07 	sts	0x071E, r1
    3e66:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <__I2C_init>
    3e6a:	87 e1       	ldi	r24, 0x17	; 23
    3e6c:	60 e0       	ldi	r22, 0x00	; 0
    3e6e:	0e 94 42 1f 	call	0x3e84	; 0x3e84 <I2C_set_BRG>
    3e72:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <I2C_enable>
    3e76:	82 e1       	ldi	r24, 0x12	; 18
    3e78:	61 e0       	ldi	r22, 0x01	; 1
    3e7a:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    3e7e:	82 e1       	ldi	r24, 0x12	; 18
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	08 95       	ret

00003e84 <I2C_set_BRG>:
    3e84:	63 70       	andi	r22, 0x03	; 3
    3e86:	60 93 b9 00 	sts	0x00B9, r22
    3e8a:	80 93 b8 00 	sts	0x00B8, r24
    3e8e:	81 e0       	ldi	r24, 0x01	; 1
    3e90:	80 93 1a 07 	sts	0x071A, r24
    3e94:	08 95       	ret

00003e96 <__ADC_init>:
    3e96:	8f e1       	ldi	r24, 0x1F	; 31
    3e98:	80 93 7c 00 	sts	0x007C, r24
    3e9c:	ea e7       	ldi	r30, 0x7A	; 122
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	87 e0       	ldi	r24, 0x07	; 7
    3ea2:	80 83       	st	Z, r24
    3ea4:	80 81       	ld	r24, Z
    3ea6:	80 68       	ori	r24, 0x80	; 128
    3ea8:	80 83       	st	Z, r24
    3eaa:	08 95       	ret

00003eac <CBOT_init>:
    3eac:	0e 94 c7 24 	call	0x498e	; 0x498e <SYS_init>
    3eb0:	0e 94 88 22 	call	0x4510	; 0x4510 <ATMEGA_open>
    3eb4:	0e 94 b8 21 	call	0x4370	; 0x4370 <ISR_open>
    3eb8:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <TMRSRVC_open>
    3ebc:	0e 94 ed 22 	call	0x45da	; 0x45da <SPI_open>
    3ec0:	0e 94 ca 1d 	call	0x3b94	; 0x3b94 <ATTINY_open>
    3ec4:	78 94       	sei
    3ec6:	08 95       	ret

00003ec8 <CBOT_ISR_init>:
    3ec8:	00 00       	nop
    3eca:	08 95       	ret

00003ecc <__vector_16>:
    3ecc:	1f 92       	push	r1
    3ece:	0f 92       	push	r0
    3ed0:	0f b6       	in	r0, 0x3f	; 63
    3ed2:	0f 92       	push	r0
    3ed4:	11 24       	eor	r1, r1
    3ed6:	2f 93       	push	r18
    3ed8:	3f 93       	push	r19
    3eda:	4f 93       	push	r20
    3edc:	5f 93       	push	r21
    3ede:	6f 93       	push	r22
    3ee0:	7f 93       	push	r23
    3ee2:	8f 93       	push	r24
    3ee4:	9f 93       	push	r25
    3ee6:	af 93       	push	r26
    3ee8:	bf 93       	push	r27
    3eea:	ef 93       	push	r30
    3eec:	ff 93       	push	r31
    3eee:	e0 91 1e 04 	lds	r30, 0x041E
    3ef2:	f0 91 1f 04 	lds	r31, 0x041F
    3ef6:	30 97       	sbiw	r30, 0x00	; 0
    3ef8:	09 f0       	breq	.+2      	; 0x3efc <__vector_16+0x30>
    3efa:	09 95       	icall
    3efc:	ff 91       	pop	r31
    3efe:	ef 91       	pop	r30
    3f00:	bf 91       	pop	r27
    3f02:	af 91       	pop	r26
    3f04:	9f 91       	pop	r25
    3f06:	8f 91       	pop	r24
    3f08:	7f 91       	pop	r23
    3f0a:	6f 91       	pop	r22
    3f0c:	5f 91       	pop	r21
    3f0e:	4f 91       	pop	r20
    3f10:	3f 91       	pop	r19
    3f12:	2f 91       	pop	r18
    3f14:	0f 90       	pop	r0
    3f16:	0f be       	out	0x3f, r0	; 63
    3f18:	0f 90       	pop	r0
    3f1a:	1f 90       	pop	r1
    3f1c:	18 95       	reti

00003f1e <__vector_17>:
    3f1e:	1f 92       	push	r1
    3f20:	0f 92       	push	r0
    3f22:	0f b6       	in	r0, 0x3f	; 63
    3f24:	0f 92       	push	r0
    3f26:	11 24       	eor	r1, r1
    3f28:	2f 93       	push	r18
    3f2a:	3f 93       	push	r19
    3f2c:	4f 93       	push	r20
    3f2e:	5f 93       	push	r21
    3f30:	6f 93       	push	r22
    3f32:	7f 93       	push	r23
    3f34:	8f 93       	push	r24
    3f36:	9f 93       	push	r25
    3f38:	af 93       	push	r26
    3f3a:	bf 93       	push	r27
    3f3c:	ef 93       	push	r30
    3f3e:	ff 93       	push	r31
    3f40:	e0 91 20 04 	lds	r30, 0x0420
    3f44:	f0 91 21 04 	lds	r31, 0x0421
    3f48:	30 97       	sbiw	r30, 0x00	; 0
    3f4a:	09 f0       	breq	.+2      	; 0x3f4e <__vector_17+0x30>
    3f4c:	09 95       	icall
    3f4e:	ff 91       	pop	r31
    3f50:	ef 91       	pop	r30
    3f52:	bf 91       	pop	r27
    3f54:	af 91       	pop	r26
    3f56:	9f 91       	pop	r25
    3f58:	8f 91       	pop	r24
    3f5a:	7f 91       	pop	r23
    3f5c:	6f 91       	pop	r22
    3f5e:	5f 91       	pop	r21
    3f60:	4f 91       	pop	r20
    3f62:	3f 91       	pop	r19
    3f64:	2f 91       	pop	r18
    3f66:	0f 90       	pop	r0
    3f68:	0f be       	out	0x3f, r0	; 63
    3f6a:	0f 90       	pop	r0
    3f6c:	1f 90       	pop	r1
    3f6e:	18 95       	reti

00003f70 <__vector_18>:
    3f70:	1f 92       	push	r1
    3f72:	0f 92       	push	r0
    3f74:	0f b6       	in	r0, 0x3f	; 63
    3f76:	0f 92       	push	r0
    3f78:	11 24       	eor	r1, r1
    3f7a:	2f 93       	push	r18
    3f7c:	3f 93       	push	r19
    3f7e:	4f 93       	push	r20
    3f80:	5f 93       	push	r21
    3f82:	6f 93       	push	r22
    3f84:	7f 93       	push	r23
    3f86:	8f 93       	push	r24
    3f88:	9f 93       	push	r25
    3f8a:	af 93       	push	r26
    3f8c:	bf 93       	push	r27
    3f8e:	ef 93       	push	r30
    3f90:	ff 93       	push	r31
    3f92:	e0 91 22 04 	lds	r30, 0x0422
    3f96:	f0 91 23 04 	lds	r31, 0x0423
    3f9a:	30 97       	sbiw	r30, 0x00	; 0
    3f9c:	09 f0       	breq	.+2      	; 0x3fa0 <__vector_18+0x30>
    3f9e:	09 95       	icall
    3fa0:	ff 91       	pop	r31
    3fa2:	ef 91       	pop	r30
    3fa4:	bf 91       	pop	r27
    3fa6:	af 91       	pop	r26
    3fa8:	9f 91       	pop	r25
    3faa:	8f 91       	pop	r24
    3fac:	7f 91       	pop	r23
    3fae:	6f 91       	pop	r22
    3fb0:	5f 91       	pop	r21
    3fb2:	4f 91       	pop	r20
    3fb4:	3f 91       	pop	r19
    3fb6:	2f 91       	pop	r18
    3fb8:	0f 90       	pop	r0
    3fba:	0f be       	out	0x3f, r0	; 63
    3fbc:	0f 90       	pop	r0
    3fbe:	1f 90       	pop	r1
    3fc0:	18 95       	reti

00003fc2 <__vector_9>:
    3fc2:	1f 92       	push	r1
    3fc4:	0f 92       	push	r0
    3fc6:	0f b6       	in	r0, 0x3f	; 63
    3fc8:	0f 92       	push	r0
    3fca:	11 24       	eor	r1, r1
    3fcc:	2f 93       	push	r18
    3fce:	3f 93       	push	r19
    3fd0:	4f 93       	push	r20
    3fd2:	5f 93       	push	r21
    3fd4:	6f 93       	push	r22
    3fd6:	7f 93       	push	r23
    3fd8:	8f 93       	push	r24
    3fda:	9f 93       	push	r25
    3fdc:	af 93       	push	r26
    3fde:	bf 93       	push	r27
    3fe0:	ef 93       	push	r30
    3fe2:	ff 93       	push	r31
    3fe4:	e0 91 10 04 	lds	r30, 0x0410
    3fe8:	f0 91 11 04 	lds	r31, 0x0411
    3fec:	30 97       	sbiw	r30, 0x00	; 0
    3fee:	09 f0       	breq	.+2      	; 0x3ff2 <__vector_9+0x30>
    3ff0:	09 95       	icall
    3ff2:	ff 91       	pop	r31
    3ff4:	ef 91       	pop	r30
    3ff6:	bf 91       	pop	r27
    3ff8:	af 91       	pop	r26
    3ffa:	9f 91       	pop	r25
    3ffc:	8f 91       	pop	r24
    3ffe:	7f 91       	pop	r23
    4000:	6f 91       	pop	r22
    4002:	5f 91       	pop	r21
    4004:	4f 91       	pop	r20
    4006:	3f 91       	pop	r19
    4008:	2f 91       	pop	r18
    400a:	0f 90       	pop	r0
    400c:	0f be       	out	0x3f, r0	; 63
    400e:	0f 90       	pop	r0
    4010:	1f 90       	pop	r1
    4012:	18 95       	reti

00004014 <__vector_10>:
    4014:	1f 92       	push	r1
    4016:	0f 92       	push	r0
    4018:	0f b6       	in	r0, 0x3f	; 63
    401a:	0f 92       	push	r0
    401c:	11 24       	eor	r1, r1
    401e:	2f 93       	push	r18
    4020:	3f 93       	push	r19
    4022:	4f 93       	push	r20
    4024:	5f 93       	push	r21
    4026:	6f 93       	push	r22
    4028:	7f 93       	push	r23
    402a:	8f 93       	push	r24
    402c:	9f 93       	push	r25
    402e:	af 93       	push	r26
    4030:	bf 93       	push	r27
    4032:	ef 93       	push	r30
    4034:	ff 93       	push	r31
    4036:	e0 91 12 04 	lds	r30, 0x0412
    403a:	f0 91 13 04 	lds	r31, 0x0413
    403e:	30 97       	sbiw	r30, 0x00	; 0
    4040:	09 f0       	breq	.+2      	; 0x4044 <__vector_10+0x30>
    4042:	09 95       	icall
    4044:	ff 91       	pop	r31
    4046:	ef 91       	pop	r30
    4048:	bf 91       	pop	r27
    404a:	af 91       	pop	r26
    404c:	9f 91       	pop	r25
    404e:	8f 91       	pop	r24
    4050:	7f 91       	pop	r23
    4052:	6f 91       	pop	r22
    4054:	5f 91       	pop	r21
    4056:	4f 91       	pop	r20
    4058:	3f 91       	pop	r19
    405a:	2f 91       	pop	r18
    405c:	0f 90       	pop	r0
    405e:	0f be       	out	0x3f, r0	; 63
    4060:	0f 90       	pop	r0
    4062:	1f 90       	pop	r1
    4064:	18 95       	reti

00004066 <__vector_11>:
    4066:	1f 92       	push	r1
    4068:	0f 92       	push	r0
    406a:	0f b6       	in	r0, 0x3f	; 63
    406c:	0f 92       	push	r0
    406e:	11 24       	eor	r1, r1
    4070:	2f 93       	push	r18
    4072:	3f 93       	push	r19
    4074:	4f 93       	push	r20
    4076:	5f 93       	push	r21
    4078:	6f 93       	push	r22
    407a:	7f 93       	push	r23
    407c:	8f 93       	push	r24
    407e:	9f 93       	push	r25
    4080:	af 93       	push	r26
    4082:	bf 93       	push	r27
    4084:	ef 93       	push	r30
    4086:	ff 93       	push	r31
    4088:	e0 91 14 04 	lds	r30, 0x0414
    408c:	f0 91 15 04 	lds	r31, 0x0415
    4090:	30 97       	sbiw	r30, 0x00	; 0
    4092:	09 f0       	breq	.+2      	; 0x4096 <__vector_11+0x30>
    4094:	09 95       	icall
    4096:	ff 91       	pop	r31
    4098:	ef 91       	pop	r30
    409a:	bf 91       	pop	r27
    409c:	af 91       	pop	r26
    409e:	9f 91       	pop	r25
    40a0:	8f 91       	pop	r24
    40a2:	7f 91       	pop	r23
    40a4:	6f 91       	pop	r22
    40a6:	5f 91       	pop	r21
    40a8:	4f 91       	pop	r20
    40aa:	3f 91       	pop	r19
    40ac:	2f 91       	pop	r18
    40ae:	0f 90       	pop	r0
    40b0:	0f be       	out	0x3f, r0	; 63
    40b2:	0f 90       	pop	r0
    40b4:	1f 90       	pop	r1
    40b6:	18 95       	reti

000040b8 <__vector_13>:
    40b8:	1f 92       	push	r1
    40ba:	0f 92       	push	r0
    40bc:	0f b6       	in	r0, 0x3f	; 63
    40be:	0f 92       	push	r0
    40c0:	11 24       	eor	r1, r1
    40c2:	2f 93       	push	r18
    40c4:	3f 93       	push	r19
    40c6:	4f 93       	push	r20
    40c8:	5f 93       	push	r21
    40ca:	6f 93       	push	r22
    40cc:	7f 93       	push	r23
    40ce:	8f 93       	push	r24
    40d0:	9f 93       	push	r25
    40d2:	af 93       	push	r26
    40d4:	bf 93       	push	r27
    40d6:	ef 93       	push	r30
    40d8:	ff 93       	push	r31
    40da:	e0 91 18 04 	lds	r30, 0x0418
    40de:	f0 91 19 04 	lds	r31, 0x0419
    40e2:	30 97       	sbiw	r30, 0x00	; 0
    40e4:	09 f0       	breq	.+2      	; 0x40e8 <__vector_13+0x30>
    40e6:	09 95       	icall
    40e8:	ff 91       	pop	r31
    40ea:	ef 91       	pop	r30
    40ec:	bf 91       	pop	r27
    40ee:	af 91       	pop	r26
    40f0:	9f 91       	pop	r25
    40f2:	8f 91       	pop	r24
    40f4:	7f 91       	pop	r23
    40f6:	6f 91       	pop	r22
    40f8:	5f 91       	pop	r21
    40fa:	4f 91       	pop	r20
    40fc:	3f 91       	pop	r19
    40fe:	2f 91       	pop	r18
    4100:	0f 90       	pop	r0
    4102:	0f be       	out	0x3f, r0	; 63
    4104:	0f 90       	pop	r0
    4106:	1f 90       	pop	r1
    4108:	18 95       	reti

0000410a <__vector_14>:
    410a:	1f 92       	push	r1
    410c:	0f 92       	push	r0
    410e:	0f b6       	in	r0, 0x3f	; 63
    4110:	0f 92       	push	r0
    4112:	11 24       	eor	r1, r1
    4114:	2f 93       	push	r18
    4116:	3f 93       	push	r19
    4118:	4f 93       	push	r20
    411a:	5f 93       	push	r21
    411c:	6f 93       	push	r22
    411e:	7f 93       	push	r23
    4120:	8f 93       	push	r24
    4122:	9f 93       	push	r25
    4124:	af 93       	push	r26
    4126:	bf 93       	push	r27
    4128:	ef 93       	push	r30
    412a:	ff 93       	push	r31
    412c:	e0 91 1a 04 	lds	r30, 0x041A
    4130:	f0 91 1b 04 	lds	r31, 0x041B
    4134:	30 97       	sbiw	r30, 0x00	; 0
    4136:	09 f0       	breq	.+2      	; 0x413a <__vector_14+0x30>
    4138:	09 95       	icall
    413a:	ff 91       	pop	r31
    413c:	ef 91       	pop	r30
    413e:	bf 91       	pop	r27
    4140:	af 91       	pop	r26
    4142:	9f 91       	pop	r25
    4144:	8f 91       	pop	r24
    4146:	7f 91       	pop	r23
    4148:	6f 91       	pop	r22
    414a:	5f 91       	pop	r21
    414c:	4f 91       	pop	r20
    414e:	3f 91       	pop	r19
    4150:	2f 91       	pop	r18
    4152:	0f 90       	pop	r0
    4154:	0f be       	out	0x3f, r0	; 63
    4156:	0f 90       	pop	r0
    4158:	1f 90       	pop	r1
    415a:	18 95       	reti

0000415c <__vector_12>:
    415c:	1f 92       	push	r1
    415e:	0f 92       	push	r0
    4160:	0f b6       	in	r0, 0x3f	; 63
    4162:	0f 92       	push	r0
    4164:	11 24       	eor	r1, r1
    4166:	2f 93       	push	r18
    4168:	3f 93       	push	r19
    416a:	4f 93       	push	r20
    416c:	5f 93       	push	r21
    416e:	6f 93       	push	r22
    4170:	7f 93       	push	r23
    4172:	8f 93       	push	r24
    4174:	9f 93       	push	r25
    4176:	af 93       	push	r26
    4178:	bf 93       	push	r27
    417a:	ef 93       	push	r30
    417c:	ff 93       	push	r31
    417e:	e0 91 16 04 	lds	r30, 0x0416
    4182:	f0 91 17 04 	lds	r31, 0x0417
    4186:	30 97       	sbiw	r30, 0x00	; 0
    4188:	09 f0       	breq	.+2      	; 0x418c <__vector_12+0x30>
    418a:	09 95       	icall
    418c:	ff 91       	pop	r31
    418e:	ef 91       	pop	r30
    4190:	bf 91       	pop	r27
    4192:	af 91       	pop	r26
    4194:	9f 91       	pop	r25
    4196:	8f 91       	pop	r24
    4198:	7f 91       	pop	r23
    419a:	6f 91       	pop	r22
    419c:	5f 91       	pop	r21
    419e:	4f 91       	pop	r20
    41a0:	3f 91       	pop	r19
    41a2:	2f 91       	pop	r18
    41a4:	0f 90       	pop	r0
    41a6:	0f be       	out	0x3f, r0	; 63
    41a8:	0f 90       	pop	r0
    41aa:	1f 90       	pop	r1
    41ac:	18 95       	reti

000041ae <__vector_15>:
    41ae:	1f 92       	push	r1
    41b0:	0f 92       	push	r0
    41b2:	0f b6       	in	r0, 0x3f	; 63
    41b4:	0f 92       	push	r0
    41b6:	11 24       	eor	r1, r1
    41b8:	2f 93       	push	r18
    41ba:	3f 93       	push	r19
    41bc:	4f 93       	push	r20
    41be:	5f 93       	push	r21
    41c0:	6f 93       	push	r22
    41c2:	7f 93       	push	r23
    41c4:	8f 93       	push	r24
    41c6:	9f 93       	push	r25
    41c8:	af 93       	push	r26
    41ca:	bf 93       	push	r27
    41cc:	ef 93       	push	r30
    41ce:	ff 93       	push	r31
    41d0:	e0 91 1c 04 	lds	r30, 0x041C
    41d4:	f0 91 1d 04 	lds	r31, 0x041D
    41d8:	30 97       	sbiw	r30, 0x00	; 0
    41da:	09 f0       	breq	.+2      	; 0x41de <__vector_15+0x30>
    41dc:	09 95       	icall
    41de:	ff 91       	pop	r31
    41e0:	ef 91       	pop	r30
    41e2:	bf 91       	pop	r27
    41e4:	af 91       	pop	r26
    41e6:	9f 91       	pop	r25
    41e8:	8f 91       	pop	r24
    41ea:	7f 91       	pop	r23
    41ec:	6f 91       	pop	r22
    41ee:	5f 91       	pop	r21
    41f0:	4f 91       	pop	r20
    41f2:	3f 91       	pop	r19
    41f4:	2f 91       	pop	r18
    41f6:	0f 90       	pop	r0
    41f8:	0f be       	out	0x3f, r0	; 63
    41fa:	0f 90       	pop	r0
    41fc:	1f 90       	pop	r1
    41fe:	18 95       	reti

00004200 <__vector_4>:
    4200:	1f 92       	push	r1
    4202:	0f 92       	push	r0
    4204:	0f b6       	in	r0, 0x3f	; 63
    4206:	0f 92       	push	r0
    4208:	11 24       	eor	r1, r1
    420a:	2f 93       	push	r18
    420c:	3f 93       	push	r19
    420e:	4f 93       	push	r20
    4210:	5f 93       	push	r21
    4212:	6f 93       	push	r22
    4214:	7f 93       	push	r23
    4216:	8f 93       	push	r24
    4218:	9f 93       	push	r25
    421a:	af 93       	push	r26
    421c:	bf 93       	push	r27
    421e:	ef 93       	push	r30
    4220:	ff 93       	push	r31
    4222:	e0 91 06 04 	lds	r30, 0x0406
    4226:	f0 91 07 04 	lds	r31, 0x0407
    422a:	30 97       	sbiw	r30, 0x00	; 0
    422c:	09 f0       	breq	.+2      	; 0x4230 <__vector_4+0x30>
    422e:	09 95       	icall
    4230:	ff 91       	pop	r31
    4232:	ef 91       	pop	r30
    4234:	bf 91       	pop	r27
    4236:	af 91       	pop	r26
    4238:	9f 91       	pop	r25
    423a:	8f 91       	pop	r24
    423c:	7f 91       	pop	r23
    423e:	6f 91       	pop	r22
    4240:	5f 91       	pop	r21
    4242:	4f 91       	pop	r20
    4244:	3f 91       	pop	r19
    4246:	2f 91       	pop	r18
    4248:	0f 90       	pop	r0
    424a:	0f be       	out	0x3f, r0	; 63
    424c:	0f 90       	pop	r0
    424e:	1f 90       	pop	r1
    4250:	18 95       	reti

00004252 <__vector_5>:
    4252:	1f 92       	push	r1
    4254:	0f 92       	push	r0
    4256:	0f b6       	in	r0, 0x3f	; 63
    4258:	0f 92       	push	r0
    425a:	11 24       	eor	r1, r1
    425c:	2f 93       	push	r18
    425e:	3f 93       	push	r19
    4260:	4f 93       	push	r20
    4262:	5f 93       	push	r21
    4264:	6f 93       	push	r22
    4266:	7f 93       	push	r23
    4268:	8f 93       	push	r24
    426a:	9f 93       	push	r25
    426c:	af 93       	push	r26
    426e:	bf 93       	push	r27
    4270:	ef 93       	push	r30
    4272:	ff 93       	push	r31
    4274:	e0 91 08 04 	lds	r30, 0x0408
    4278:	f0 91 09 04 	lds	r31, 0x0409
    427c:	30 97       	sbiw	r30, 0x00	; 0
    427e:	09 f0       	breq	.+2      	; 0x4282 <__vector_5+0x30>
    4280:	09 95       	icall
    4282:	ff 91       	pop	r31
    4284:	ef 91       	pop	r30
    4286:	bf 91       	pop	r27
    4288:	af 91       	pop	r26
    428a:	9f 91       	pop	r25
    428c:	8f 91       	pop	r24
    428e:	7f 91       	pop	r23
    4290:	6f 91       	pop	r22
    4292:	5f 91       	pop	r21
    4294:	4f 91       	pop	r20
    4296:	3f 91       	pop	r19
    4298:	2f 91       	pop	r18
    429a:	0f 90       	pop	r0
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	0f 90       	pop	r0
    42a0:	1f 90       	pop	r1
    42a2:	18 95       	reti

000042a4 <__vector_6>:
    42a4:	1f 92       	push	r1
    42a6:	0f 92       	push	r0
    42a8:	0f b6       	in	r0, 0x3f	; 63
    42aa:	0f 92       	push	r0
    42ac:	11 24       	eor	r1, r1
    42ae:	2f 93       	push	r18
    42b0:	3f 93       	push	r19
    42b2:	4f 93       	push	r20
    42b4:	5f 93       	push	r21
    42b6:	6f 93       	push	r22
    42b8:	7f 93       	push	r23
    42ba:	8f 93       	push	r24
    42bc:	9f 93       	push	r25
    42be:	af 93       	push	r26
    42c0:	bf 93       	push	r27
    42c2:	ef 93       	push	r30
    42c4:	ff 93       	push	r31
    42c6:	e0 91 0a 04 	lds	r30, 0x040A
    42ca:	f0 91 0b 04 	lds	r31, 0x040B
    42ce:	30 97       	sbiw	r30, 0x00	; 0
    42d0:	09 f0       	breq	.+2      	; 0x42d4 <__vector_6+0x30>
    42d2:	09 95       	icall
    42d4:	ff 91       	pop	r31
    42d6:	ef 91       	pop	r30
    42d8:	bf 91       	pop	r27
    42da:	af 91       	pop	r26
    42dc:	9f 91       	pop	r25
    42de:	8f 91       	pop	r24
    42e0:	7f 91       	pop	r23
    42e2:	6f 91       	pop	r22
    42e4:	5f 91       	pop	r21
    42e6:	4f 91       	pop	r20
    42e8:	3f 91       	pop	r19
    42ea:	2f 91       	pop	r18
    42ec:	0f 90       	pop	r0
    42ee:	0f be       	out	0x3f, r0	; 63
    42f0:	0f 90       	pop	r0
    42f2:	1f 90       	pop	r1
    42f4:	18 95       	reti

000042f6 <__vector_7>:
    42f6:	1f 92       	push	r1
    42f8:	0f 92       	push	r0
    42fa:	0f b6       	in	r0, 0x3f	; 63
    42fc:	0f 92       	push	r0
    42fe:	11 24       	eor	r1, r1
    4300:	2f 93       	push	r18
    4302:	3f 93       	push	r19
    4304:	4f 93       	push	r20
    4306:	5f 93       	push	r21
    4308:	6f 93       	push	r22
    430a:	7f 93       	push	r23
    430c:	8f 93       	push	r24
    430e:	9f 93       	push	r25
    4310:	af 93       	push	r26
    4312:	bf 93       	push	r27
    4314:	ef 93       	push	r30
    4316:	ff 93       	push	r31
    4318:	e0 91 0c 04 	lds	r30, 0x040C
    431c:	f0 91 0d 04 	lds	r31, 0x040D
    4320:	30 97       	sbiw	r30, 0x00	; 0
    4322:	09 f0       	breq	.+2      	; 0x4326 <__vector_7+0x30>
    4324:	09 95       	icall
    4326:	ff 91       	pop	r31
    4328:	ef 91       	pop	r30
    432a:	bf 91       	pop	r27
    432c:	af 91       	pop	r26
    432e:	9f 91       	pop	r25
    4330:	8f 91       	pop	r24
    4332:	7f 91       	pop	r23
    4334:	6f 91       	pop	r22
    4336:	5f 91       	pop	r21
    4338:	4f 91       	pop	r20
    433a:	3f 91       	pop	r19
    433c:	2f 91       	pop	r18
    433e:	0f 90       	pop	r0
    4340:	0f be       	out	0x3f, r0	; 63
    4342:	0f 90       	pop	r0
    4344:	1f 90       	pop	r1
    4346:	18 95       	reti

00004348 <ISR_attach>:
    4348:	e8 2f       	mov	r30, r24
    434a:	80 32       	cpi	r24, 0x20	; 32
    434c:	68 f4       	brcc	.+26     	; 0x4368 <ISR_attach+0x20>
    434e:	80 51       	subi	r24, 0x10	; 16
    4350:	83 30       	cpi	r24, 0x03	; 3
    4352:	50 f0       	brcs	.+20     	; 0x4368 <ISR_attach+0x20>
    4354:	f0 e0       	ldi	r31, 0x00	; 0
    4356:	ee 0f       	add	r30, r30
    4358:	ff 1f       	adc	r31, r31
    435a:	e2 50       	subi	r30, 0x02	; 2
    435c:	fc 4f       	sbci	r31, 0xFC	; 252
    435e:	20 81       	ld	r18, Z
    4360:	31 81       	ldd	r19, Z+1	; 0x01
    4362:	71 83       	std	Z+1, r23	; 0x01
    4364:	60 83       	st	Z, r22
    4366:	02 c0       	rjmp	.+4      	; 0x436c <ISR_attach+0x24>
    4368:	20 e0       	ldi	r18, 0x00	; 0
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	c9 01       	movw	r24, r18
    436e:	08 95       	ret

00004370 <ISR_open>:
    4370:	80 e1       	ldi	r24, 0x10	; 16
    4372:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    4376:	88 23       	and	r24, r24
    4378:	61 f4       	brne	.+24     	; 0x4392 <ISR_open+0x22>
    437a:	ee ef       	ldi	r30, 0xFE	; 254
    437c:	f3 e0       	ldi	r31, 0x03	; 3
    437e:	11 92       	st	Z+, r1
    4380:	11 92       	st	Z+, r1
    4382:	84 e0       	ldi	r24, 0x04	; 4
    4384:	ee 33       	cpi	r30, 0x3E	; 62
    4386:	f8 07       	cpc	r31, r24
    4388:	d1 f7       	brne	.-12     	; 0x437e <ISR_open+0xe>
    438a:	80 e1       	ldi	r24, 0x10	; 16
    438c:	61 e0       	ldi	r22, 0x01	; 1
    438e:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    4392:	80 e1       	ldi	r24, 0x10	; 16
    4394:	91 e0       	ldi	r25, 0x01	; 1
    4396:	08 95       	ret

00004398 <__LCD_init>:
    4398:	23 9a       	sbi	0x04, 3	; 4
    439a:	08 95       	ret

0000439c <__LCD_putchar>:
    439c:	ff 92       	push	r15
    439e:	0f 93       	push	r16
    43a0:	1f 93       	push	r17
    43a2:	cf 93       	push	r28
    43a4:	df 93       	push	r29
    43a6:	f8 2e       	mov	r15, r24
    43a8:	8a e0       	ldi	r24, 0x0A	; 10
    43aa:	f8 16       	cp	r15, r24
    43ac:	b1 f0       	breq	.+44     	; 0x43da <__LCD_putchar+0x3e>
    43ae:	8f 15       	cp	r24, r15
    43b0:	48 f0       	brcs	.+18     	; 0x43c4 <__LCD_putchar+0x28>
    43b2:	e8 e0       	ldi	r30, 0x08	; 8
    43b4:	fe 16       	cp	r15, r30
    43b6:	b9 f1       	breq	.+110    	; 0x4426 <__LCD_putchar+0x8a>
    43b8:	ef 15       	cp	r30, r15
    43ba:	38 f1       	brcs	.+78     	; 0x440a <__LCD_putchar+0x6e>
    43bc:	f7 e0       	ldi	r31, 0x07	; 7
    43be:	ff 16       	cp	r15, r31
    43c0:	51 f4       	brne	.+20     	; 0x43d6 <__LCD_putchar+0x3a>
    43c2:	3b c0       	rjmp	.+118    	; 0x443a <__LCD_putchar+0x9e>
    43c4:	8d e0       	ldi	r24, 0x0D	; 13
    43c6:	f8 16       	cp	r15, r24
    43c8:	59 f0       	breq	.+22     	; 0x43e0 <__LCD_putchar+0x44>
    43ca:	eb e1       	ldi	r30, 0x1B	; 27
    43cc:	fe 16       	cp	r15, r30
    43ce:	89 f0       	breq	.+34     	; 0x43f2 <__LCD_putchar+0x56>
    43d0:	fc e0       	ldi	r31, 0x0C	; 12
    43d2:	ff 16       	cp	r15, r31
    43d4:	41 f0       	breq	.+16     	; 0x43e6 <__LCD_putchar+0x4a>
    43d6:	01 e0       	ldi	r16, 0x01	; 1
    43d8:	41 c0       	rjmp	.+130    	; 0x445c <__LCD_putchar+0xc0>
    43da:	10 92 f3 06 	sts	0x06F3, r1
    43de:	03 c0       	rjmp	.+6      	; 0x43e6 <__LCD_putchar+0x4a>
    43e0:	10 92 f3 06 	sts	0x06F3, r1
    43e4:	3a c0       	rjmp	.+116    	; 0x445a <__LCD_putchar+0xbe>
    43e6:	80 91 f4 06 	lds	r24, 0x06F4
    43ea:	81 50       	subi	r24, 0x01	; 1
    43ec:	80 93 f4 06 	sts	0x06F4, r24
    43f0:	34 c0       	rjmp	.+104    	; 0x445a <__LCD_putchar+0xbe>
    43f2:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <LCD_clear>
    43f6:	14 c0       	rjmp	.+40     	; 0x4420 <__LCD_putchar+0x84>
    43f8:	80 e0       	ldi	r24, 0x00	; 0
    43fa:	61 e0       	ldi	r22, 0x01	; 1
    43fc:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    4400:	80 91 f3 06 	lds	r24, 0x06F3
    4404:	8f 5f       	subi	r24, 0xFF	; 255
    4406:	80 93 f3 06 	sts	0x06F3, r24
    440a:	80 91 f3 06 	lds	r24, 0x06F3
    440e:	87 ff       	sbrs	r24, 7
    4410:	f3 cf       	rjmp	.-26     	; 0x43f8 <__LCD_putchar+0x5c>
    4412:	10 92 f3 06 	sts	0x06F3, r1
    4416:	80 91 f4 06 	lds	r24, 0x06F4
    441a:	81 50       	subi	r24, 0x01	; 1
    441c:	80 93 f4 06 	sts	0x06F4, r24
    4420:	00 e0       	ldi	r16, 0x00	; 0
    4422:	11 e0       	ldi	r17, 0x01	; 1
    4424:	1c c0       	rjmp	.+56     	; 0x445e <__LCD_putchar+0xc2>
    4426:	80 91 f3 06 	lds	r24, 0x06F3
    442a:	88 23       	and	r24, r24
    442c:	b1 f0       	breq	.+44     	; 0x445a <__LCD_putchar+0xbe>
    442e:	80 91 f3 06 	lds	r24, 0x06F3
    4432:	86 50       	subi	r24, 0x06	; 6
    4434:	80 93 f3 06 	sts	0x06F3, r24
    4438:	10 c0       	rjmp	.+32     	; 0x445a <__LCD_putchar+0xbe>
    443a:	81 e0       	ldi	r24, 0x01	; 1
    443c:	0e 94 65 19 	call	0x32ca	; 0x32ca <SPKR_open>
    4440:	64 ef       	ldi	r22, 0xF4	; 244
    4442:	71 e0       	ldi	r23, 0x01	; 1
    4444:	80 e0       	ldi	r24, 0x00	; 0
    4446:	90 e0       	ldi	r25, 0x00	; 0
    4448:	4d e7       	ldi	r20, 0x7D	; 125
    444a:	50 e0       	ldi	r21, 0x00	; 0
    444c:	24 e6       	ldi	r18, 0x64	; 100
    444e:	30 e0       	ldi	r19, 0x00	; 0
    4450:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <SPKR_play_beep>
    4454:	81 e0       	ldi	r24, 0x01	; 1
    4456:	0e 94 b4 23 	call	0x4768	; 0x4768 <SPKR_close>
    445a:	00 e0       	ldi	r16, 0x00	; 0
    445c:	10 e0       	ldi	r17, 0x00	; 0
    445e:	80 91 f4 06 	lds	r24, 0x06F4
    4462:	60 91 f3 06 	lds	r22, 0x06F3
    4466:	0e 94 1f 18 	call	0x303e	; 0x303e <LCD_set_PGC_addr>
    446a:	00 23       	and	r16, r16
    446c:	51 f1       	breq	.+84     	; 0x44c2 <__LCD_putchar+0x126>
    446e:	85 e0       	ldi	r24, 0x05	; 5
    4470:	f8 9e       	mul	r15, r24
    4472:	c0 01       	movw	r24, r0
    4474:	11 24       	eor	r1, r1
    4476:	ec 01       	movw	r28, r24
    4478:	c3 55       	subi	r28, 0x53	; 83
    447a:	df 4f       	sbci	r29, 0xFF	; 255
    447c:	8c 01       	movw	r16, r24
    447e:	0e 54       	subi	r16, 0x4E	; 78
    4480:	1f 4f       	sbci	r17, 0xFF	; 255
    4482:	fe 01       	movw	r30, r28
    4484:	84 91       	lpm	r24, Z+
    4486:	61 e0       	ldi	r22, 0x01	; 1
    4488:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    448c:	21 96       	adiw	r28, 0x01	; 1
    448e:	c0 17       	cp	r28, r16
    4490:	d1 07       	cpc	r29, r17
    4492:	b9 f7       	brne	.-18     	; 0x4482 <__LCD_putchar+0xe6>
    4494:	80 e0       	ldi	r24, 0x00	; 0
    4496:	61 e0       	ldi	r22, 0x01	; 1
    4498:	0e 94 38 18 	call	0x3070	; 0x3070 <LCD_write>
    449c:	80 91 f3 06 	lds	r24, 0x06F3
    44a0:	8a 5f       	subi	r24, 0xFA	; 250
    44a2:	80 93 f3 06 	sts	0x06F3, r24
    44a6:	80 91 f3 06 	lds	r24, 0x06F3
    44aa:	90 e0       	ldi	r25, 0x00	; 0
    44ac:	8c 37       	cpi	r24, 0x7C	; 124
    44ae:	91 05       	cpc	r25, r1
    44b0:	3c f0       	brlt	.+14     	; 0x44c0 <__LCD_putchar+0x124>
    44b2:	10 92 f3 06 	sts	0x06F3, r1
    44b6:	80 91 f4 06 	lds	r24, 0x06F4
    44ba:	81 50       	subi	r24, 0x01	; 1
    44bc:	80 93 f4 06 	sts	0x06F4, r24
    44c0:	11 e0       	ldi	r17, 0x01	; 1
    44c2:	80 91 f4 06 	lds	r24, 0x06F4
    44c6:	83 70       	andi	r24, 0x03	; 3
    44c8:	80 93 f4 06 	sts	0x06F4, r24
    44cc:	11 30       	cpi	r17, 0x01	; 1
    44ce:	59 f4       	brne	.+22     	; 0x44e6 <__LCD_putchar+0x14a>
    44d0:	80 91 f5 06 	lds	r24, 0x06F5
    44d4:	81 30       	cpi	r24, 0x01	; 1
    44d6:	39 f4       	brne	.+14     	; 0x44e6 <__LCD_putchar+0x14a>
    44d8:	e0 91 f6 06 	lds	r30, 0x06F6
    44dc:	f0 91 f7 06 	lds	r31, 0x06F7
    44e0:	30 97       	sbiw	r30, 0x00	; 0
    44e2:	09 f0       	breq	.+2      	; 0x44e6 <__LCD_putchar+0x14a>
    44e4:	09 95       	icall
    44e6:	80 e0       	ldi	r24, 0x00	; 0
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	df 91       	pop	r29
    44ec:	cf 91       	pop	r28
    44ee:	1f 91       	pop	r17
    44f0:	0f 91       	pop	r16
    44f2:	ff 90       	pop	r15
    44f4:	08 95       	ret

000044f6 <__LED_clr_pattern>:
    44f6:	85 fd       	sbrc	r24, 5
    44f8:	5d 98       	cbi	0x0b, 5	; 11
    44fa:	86 fd       	sbrc	r24, 6
    44fc:	5e 98       	cbi	0x0b, 6	; 11
    44fe:	08 95       	ret

00004500 <__LED_init>:
    4500:	55 9a       	sbi	0x0a, 5	; 10
    4502:	56 9a       	sbi	0x0a, 6	; 10
    4504:	08 95       	ret

00004506 <__LED_set_pattern>:
    4506:	85 fd       	sbrc	r24, 5
    4508:	5d 9a       	sbi	0x0b, 5	; 11
    450a:	86 fd       	sbrc	r24, 6
    450c:	5e 9a       	sbi	0x0b, 6	; 11
    450e:	08 95       	ret

00004510 <ATMEGA_open>:
    4510:	80 e0       	ldi	r24, 0x00	; 0
    4512:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    4516:	88 23       	and	r24, r24
    4518:	51 f4       	brne	.+20     	; 0x452e <ATMEGA_open+0x1e>
    451a:	f8 94       	cli
    451c:	0e 94 9a 25 	call	0x4b34	; 0x4b34 <__ATMEGA_init>
    4520:	81 e0       	ldi	r24, 0x01	; 1
    4522:	0e 94 9a 22 	call	0x4534	; 0x4534 <ATMEGA_set_clk_mode>
    4526:	80 e0       	ldi	r24, 0x00	; 0
    4528:	61 e0       	ldi	r22, 0x01	; 1
    452a:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    452e:	80 e0       	ldi	r24, 0x00	; 0
    4530:	91 e0       	ldi	r25, 0x01	; 1
    4532:	08 95       	ret

00004534 <ATMEGA_set_clk_mode>:
    4534:	81 30       	cpi	r24, 0x01	; 1
    4536:	49 f0       	breq	.+18     	; 0x454a <ATMEGA_set_clk_mode+0x16>
    4538:	f8 94       	cli
    453a:	81 30       	cpi	r24, 0x01	; 1
    453c:	20 f1       	brcs	.+72     	; 0x4586 <ATMEGA_set_clk_mode+0x52>
    453e:	82 30       	cpi	r24, 0x02	; 2
    4540:	b1 f0       	breq	.+44     	; 0x456e <ATMEGA_set_clk_mode+0x3a>
    4542:	83 30       	cpi	r24, 0x03	; 3
    4544:	09 f0       	breq	.+2      	; 0x4548 <ATMEGA_set_clk_mode+0x14>
    4546:	45 c0       	rjmp	.+138    	; 0x45d2 <ATMEGA_set_clk_mode+0x9e>
    4548:	17 c0       	rjmp	.+46     	; 0x4578 <ATMEGA_set_clk_mode+0x44>
    454a:	2c 9a       	sbi	0x05, 4	; 5
    454c:	80 e8       	ldi	r24, 0x80	; 128
    454e:	80 93 61 00 	sts	0x0061, r24
    4552:	10 92 61 00 	sts	0x0061, r1
    4556:	80 e0       	ldi	r24, 0x00	; 0
    4558:	90 e0       	ldi	r25, 0x00	; 0
    455a:	00 00       	nop
    455c:	01 96       	adiw	r24, 0x01	; 1
    455e:	88 32       	cpi	r24, 0x28	; 40
    4560:	91 05       	cpc	r25, r1
    4562:	d9 f7       	brne	.-10     	; 0x455a <ATMEGA_set_clk_mode+0x26>
    4564:	10 92 68 00 	sts	0x0068, r1
    4568:	10 92 6b 00 	sts	0x006B, r1
    456c:	08 95       	ret
    456e:	80 e8       	ldi	r24, 0x80	; 128
    4570:	80 93 61 00 	sts	0x0061, r24
    4574:	83 e0       	ldi	r24, 0x03	; 3
    4576:	04 c0       	rjmp	.+8      	; 0x4580 <ATMEGA_set_clk_mode+0x4c>
    4578:	80 e8       	ldi	r24, 0x80	; 128
    457a:	80 93 61 00 	sts	0x0061, r24
    457e:	88 e0       	ldi	r24, 0x08	; 8
    4580:	80 93 61 00 	sts	0x0061, r24
    4584:	28 c0       	rjmp	.+80     	; 0x45d6 <ATMEGA_set_clk_mode+0xa2>
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	00 00       	nop
    458c:	01 96       	adiw	r24, 0x01	; 1
    458e:	2d e6       	ldi	r18, 0x6D	; 109
    4590:	80 36       	cpi	r24, 0x60	; 96
    4592:	92 07       	cpc	r25, r18
    4594:	d1 f7       	brne	.-12     	; 0x458a <ATMEGA_set_clk_mode+0x56>
    4596:	2c 98       	cbi	0x05, 4	; 5
    4598:	80 e0       	ldi	r24, 0x00	; 0
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	00 00       	nop
    459e:	01 96       	adiw	r24, 0x01	; 1
    45a0:	2d e6       	ldi	r18, 0x6D	; 109
    45a2:	80 36       	cpi	r24, 0x60	; 96
    45a4:	92 07       	cpc	r25, r18
    45a6:	d1 f7       	brne	.-12     	; 0x459c <ATMEGA_set_clk_mode+0x68>
    45a8:	10 92 7a 00 	sts	0x007A, r1
    45ac:	8f ef       	ldi	r24, 0xFF	; 255
    45ae:	80 93 64 00 	sts	0x0064, r24
    45b2:	80 91 68 00 	lds	r24, 0x0068
    45b6:	81 60       	ori	r24, 0x01	; 1
    45b8:	80 93 68 00 	sts	0x0068, r24
    45bc:	80 91 6b 00 	lds	r24, 0x006B
    45c0:	84 60       	ori	r24, 0x04	; 4
    45c2:	80 93 6b 00 	sts	0x006B, r24
    45c6:	78 94       	sei
    45c8:	83 b7       	in	r24, 0x33	; 51
    45ca:	81 60       	ori	r24, 0x01	; 1
    45cc:	83 bf       	out	0x33, r24	; 51
    45ce:	88 95       	sleep
    45d0:	08 95       	ret
    45d2:	82 30       	cpi	r24, 0x02	; 2
    45d4:	08 f0       	brcs	.+2      	; 0x45d8 <ATMEGA_set_clk_mode+0xa4>
    45d6:	78 94       	sei
    45d8:	08 95       	ret

000045da <SPI_open>:
    45da:	0f 93       	push	r16
    45dc:	1f 93       	push	r17
    45de:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__SPI_init>
    45e2:	80 e0       	ldi	r24, 0x00	; 0
    45e4:	65 eb       	ldi	r22, 0xB5	; 181
    45e6:	75 e2       	ldi	r23, 0x25	; 37
    45e8:	0e 94 38 23 	call	0x4670	; 0x4670 <SPI_set_config_func>
    45ec:	81 e0       	ldi	r24, 0x01	; 1
    45ee:	6d ea       	ldi	r22, 0xAD	; 173
    45f0:	75 e2       	ldi	r23, 0x25	; 37
    45f2:	0e 94 38 23 	call	0x4670	; 0x4670 <SPI_set_config_func>
    45f6:	82 e0       	ldi	r24, 0x02	; 2
    45f8:	65 ea       	ldi	r22, 0xA5	; 165
    45fa:	75 e2       	ldi	r23, 0x25	; 37
    45fc:	0e 94 38 23 	call	0x4670	; 0x4670 <SPI_set_config_func>
    4600:	86 e0       	ldi	r24, 0x06	; 6
    4602:	6d eb       	ldi	r22, 0xBD	; 189
    4604:	75 e2       	ldi	r23, 0x25	; 37
    4606:	0e 94 38 23 	call	0x4670	; 0x4670 <SPI_set_config_func>
    460a:	0d e9       	ldi	r16, 0x9D	; 157
    460c:	15 e2       	ldi	r17, 0x25	; 37
    460e:	83 e0       	ldi	r24, 0x03	; 3
    4610:	b8 01       	movw	r22, r16
    4612:	0e 94 38 23 	call	0x4670	; 0x4670 <SPI_set_config_func>
    4616:	84 e0       	ldi	r24, 0x04	; 4
    4618:	b8 01       	movw	r22, r16
    461a:	0e 94 38 23 	call	0x4670	; 0x4670 <SPI_set_config_func>
    461e:	85 e0       	ldi	r24, 0x05	; 5
    4620:	b8 01       	movw	r22, r16
    4622:	0e 94 38 23 	call	0x4670	; 0x4670 <SPI_set_config_func>
    4626:	87 e0       	ldi	r24, 0x07	; 7
    4628:	b8 01       	movw	r22, r16
    462a:	0e 94 38 23 	call	0x4670	; 0x4670 <SPI_set_config_func>
    462e:	82 e0       	ldi	r24, 0x02	; 2
    4630:	61 e0       	ldi	r22, 0x01	; 1
    4632:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    4636:	8f ef       	ldi	r24, 0xFF	; 255
    4638:	80 93 f8 06 	sts	0x06F8, r24
    463c:	87 e0       	ldi	r24, 0x07	; 7
    463e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <SPI_set_slave_addr>
    4642:	82 e0       	ldi	r24, 0x02	; 2
    4644:	91 e0       	ldi	r25, 0x01	; 1
    4646:	1f 91       	pop	r17
    4648:	0f 91       	pop	r16
    464a:	08 95       	ret

0000464c <SPI_receive>:
    464c:	1f 93       	push	r17
    464e:	16 2f       	mov	r17, r22
    4650:	0e 94 74 18 	call	0x30e8	; 0x30e8 <SPI_set_slave_addr>
    4654:	82 e0       	ldi	r24, 0x02	; 2
    4656:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    465a:	81 30       	cpi	r24, 0x01	; 1
    465c:	11 f0       	breq	.+4      	; 0x4662 <SPI_receive+0x16>
    465e:	80 e0       	ldi	r24, 0x00	; 0
    4660:	05 c0       	rjmp	.+10     	; 0x466c <SPI_receive+0x20>
    4662:	1e bd       	out	0x2e, r17	; 46
    4664:	0d b4       	in	r0, 0x2d	; 45
    4666:	07 fe       	sbrs	r0, 7
    4668:	fd cf       	rjmp	.-6      	; 0x4664 <SPI_receive+0x18>
    466a:	8e b5       	in	r24, 0x2e	; 46
    466c:	1f 91       	pop	r17
    466e:	08 95       	ret

00004670 <SPI_set_config_func>:
    4670:	e8 2f       	mov	r30, r24
    4672:	f0 e0       	ldi	r31, 0x00	; 0
    4674:	ee 0f       	add	r30, r30
    4676:	ff 1f       	adc	r31, r31
    4678:	e2 5c       	subi	r30, 0xC2	; 194
    467a:	fb 4f       	sbci	r31, 0xFB	; 251
    467c:	71 83       	std	Z+1, r23	; 0x01
    467e:	60 83       	st	Z, r22
    4680:	08 95       	ret

00004682 <__SPKR_TIMER1_COMPA_vect>:
    4682:	0e 94 44 23 	call	0x4688	; 0x4688 <SPKR_clk>
    4686:	08 95       	ret

00004688 <SPKR_clk>:
    4688:	80 91 50 04 	lds	r24, 0x0450
    468c:	90 91 51 04 	lds	r25, 0x0451
    4690:	a0 91 52 04 	lds	r26, 0x0452
    4694:	b0 91 53 04 	lds	r27, 0x0453
    4698:	20 91 54 04 	lds	r18, 0x0454
    469c:	30 91 55 04 	lds	r19, 0x0455
    46a0:	40 91 56 04 	lds	r20, 0x0456
    46a4:	50 91 57 04 	lds	r21, 0x0457
    46a8:	28 0f       	add	r18, r24
    46aa:	39 1f       	adc	r19, r25
    46ac:	4a 1f       	adc	r20, r26
    46ae:	5b 1f       	adc	r21, r27
    46b0:	20 93 50 04 	sts	0x0450, r18
    46b4:	30 93 51 04 	sts	0x0451, r19
    46b8:	40 93 52 04 	sts	0x0452, r20
    46bc:	50 93 53 04 	sts	0x0453, r21
    46c0:	80 91 50 04 	lds	r24, 0x0450
    46c4:	90 91 51 04 	lds	r25, 0x0451
    46c8:	a0 91 52 04 	lds	r26, 0x0452
    46cc:	b0 91 53 04 	lds	r27, 0x0453
    46d0:	88 51       	subi	r24, 0x18	; 24
    46d2:	96 4f       	sbci	r25, 0xF6	; 246
    46d4:	a0 40       	sbci	r26, 0x00	; 0
    46d6:	b0 40       	sbci	r27, 0x00	; 0
    46d8:	bc f0       	brlt	.+46     	; 0x4708 <SPKR_clk+0x80>
    46da:	8b b1       	in	r24, 0x0b	; 11
    46dc:	80 58       	subi	r24, 0x80	; 128
    46de:	8b b9       	out	0x0b, r24	; 11
    46e0:	80 91 50 04 	lds	r24, 0x0450
    46e4:	90 91 51 04 	lds	r25, 0x0451
    46e8:	a0 91 52 04 	lds	r26, 0x0452
    46ec:	b0 91 53 04 	lds	r27, 0x0453
    46f0:	88 51       	subi	r24, 0x18	; 24
    46f2:	96 4f       	sbci	r25, 0xF6	; 246
    46f4:	a0 40       	sbci	r26, 0x00	; 0
    46f6:	b0 40       	sbci	r27, 0x00	; 0
    46f8:	80 93 50 04 	sts	0x0450, r24
    46fc:	90 93 51 04 	sts	0x0451, r25
    4700:	a0 93 52 04 	sts	0x0452, r26
    4704:	b0 93 53 04 	sts	0x0453, r27
    4708:	08 95       	ret

0000470a <__SPKR_close_beep_mode>:
    470a:	8a e0       	ldi	r24, 0x0A	; 10
    470c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    4710:	81 30       	cpi	r24, 0x01	; 1
    4712:	41 f4       	brne	.+16     	; 0x4724 <__SPKR_close_beep_mode+0x1a>
    4714:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__SPKR_close>
    4718:	10 92 4f 04 	sts	0x044F, r1
    471c:	8a e0       	ldi	r24, 0x0A	; 10
    471e:	60 e0       	ldi	r22, 0x00	; 0
    4720:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    4724:	08 95       	ret

00004726 <__SPKR_close_tone_mode>:
    4726:	89 e0       	ldi	r24, 0x09	; 9
    4728:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    472c:	81 30       	cpi	r24, 0x01	; 1
    472e:	d9 f4       	brne	.+54     	; 0x4766 <__SPKR_close_tone_mode+0x40>
    4730:	80 91 4e 04 	lds	r24, 0x044E
    4734:	88 23       	and	r24, r24
    4736:	11 f0       	breq	.+4      	; 0x473c <__SPKR_close_tone_mode+0x16>
    4738:	0e 94 35 24 	call	0x486a	; 0x486a <__SPKR_stop>
    473c:	82 e0       	ldi	r24, 0x02	; 2
    473e:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__SPKR_close>
    4742:	80 91 5c 04 	lds	r24, 0x045C
    4746:	90 91 5d 04 	lds	r25, 0x045D
    474a:	00 97       	sbiw	r24, 0x00	; 0
    474c:	31 f0       	breq	.+12     	; 0x475a <__SPKR_close_tone_mode+0x34>
    474e:	0e 94 7e 32 	call	0x64fc	; 0x64fc <free>
    4752:	10 92 5d 04 	sts	0x045D, r1
    4756:	10 92 5c 04 	sts	0x045C, r1
    475a:	10 92 4e 04 	sts	0x044E, r1
    475e:	89 e0       	ldi	r24, 0x09	; 9
    4760:	60 e0       	ldi	r22, 0x00	; 0
    4762:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    4766:	08 95       	ret

00004768 <SPKR_close>:
    4768:	81 30       	cpi	r24, 0x01	; 1
    476a:	29 f0       	breq	.+10     	; 0x4776 <SPKR_close+0xe>
    476c:	82 30       	cpi	r24, 0x02	; 2
    476e:	29 f4       	brne	.+10     	; 0x477a <SPKR_close+0x12>
    4770:	0e 94 93 23 	call	0x4726	; 0x4726 <__SPKR_close_tone_mode>
    4774:	08 95       	ret
    4776:	0e 94 85 23 	call	0x470a	; 0x470a <__SPKR_close_beep_mode>
    477a:	08 95       	ret

0000477c <__SPKR_init>:
    477c:	98 2f       	mov	r25, r24
    477e:	80 91 4e 04 	lds	r24, 0x044E
    4782:	88 23       	and	r24, r24
    4784:	31 f4       	brne	.+12     	; 0x4792 <__SPKR_init+0x16>
    4786:	80 91 4f 04 	lds	r24, 0x044F
    478a:	88 23       	and	r24, r24
    478c:	11 f4       	brne	.+4      	; 0x4792 <__SPKR_init+0x16>
    478e:	57 9a       	sbi	0x0a, 7	; 10
    4790:	5f 98       	cbi	0x0b, 7	; 11
    4792:	80 91 4e 04 	lds	r24, 0x044E
    4796:	88 23       	and	r24, r24
    4798:	d1 f4       	brne	.+52     	; 0x47ce <__SPKR_init+0x52>
    479a:	92 30       	cpi	r25, 0x02	; 2
    479c:	c1 f4       	brne	.+48     	; 0x47ce <__SPKR_init+0x52>
    479e:	10 92 80 00 	sts	0x0080, r1
    47a2:	10 92 81 00 	sts	0x0081, r1
    47a6:	80 91 81 00 	lds	r24, 0x0081
    47aa:	88 60       	ori	r24, 0x08	; 8
    47ac:	80 93 81 00 	sts	0x0081, r24
    47b0:	80 91 81 00 	lds	r24, 0x0081
    47b4:	81 60       	ori	r24, 0x01	; 1
    47b6:	80 93 81 00 	sts	0x0081, r24
    47ba:	10 92 85 00 	sts	0x0085, r1
    47be:	10 92 84 00 	sts	0x0084, r1
    47c2:	81 e0       	ldi	r24, 0x01	; 1
    47c4:	80 93 89 00 	sts	0x0089, r24
    47c8:	80 e9       	ldi	r24, 0x90	; 144
    47ca:	80 93 88 00 	sts	0x0088, r24
    47ce:	08 95       	ret

000047d0 <SPKR_play_beep>:
    47d0:	8f 92       	push	r8
    47d2:	9f 92       	push	r9
    47d4:	af 92       	push	r10
    47d6:	bf 92       	push	r11
    47d8:	cf 92       	push	r12
    47da:	df 92       	push	r13
    47dc:	ef 92       	push	r14
    47de:	ff 92       	push	r15
    47e0:	0f 93       	push	r16
    47e2:	1f 93       	push	r17
    47e4:	cf 93       	push	r28
    47e6:	df 93       	push	r29
    47e8:	4b 01       	movw	r8, r22
    47ea:	5c 01       	movw	r10, r24
    47ec:	ea 01       	movw	r28, r20
    47ee:	b9 01       	movw	r22, r18
    47f0:	21 15       	cp	r18, r1
    47f2:	31 05       	cpc	r19, r1
    47f4:	39 f1       	breq	.+78     	; 0x4844 <SPKR_play_beep+0x74>
    47f6:	9e 01       	movw	r18, r28
    47f8:	44 27       	eor	r20, r20
    47fa:	37 fd       	sbrc	r19, 7
    47fc:	40 95       	com	r20
    47fe:	54 2f       	mov	r21, r20
    4800:	65 36       	cpi	r22, 0x65	; 101
    4802:	71 05       	cpc	r23, r1
    4804:	10 f0       	brcs	.+4      	; 0x480a <SPKR_play_beep+0x3a>
    4806:	64 e6       	ldi	r22, 0x64	; 100
    4808:	70 e0       	ldi	r23, 0x00	; 0
    480a:	80 e0       	ldi	r24, 0x00	; 0
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	0e 94 32 31 	call	0x6264	; 0x6264 <__mulsi3>
    4812:	24 e6       	ldi	r18, 0x64	; 100
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	40 e0       	ldi	r20, 0x00	; 0
    4818:	50 e0       	ldi	r21, 0x00	; 0
    481a:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__udivmodsi4>
    481e:	79 01       	movw	r14, r18
    4820:	8a 01       	movw	r16, r20
    4822:	c5 01       	movw	r24, r10
    4824:	b4 01       	movw	r22, r8
    4826:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <SPKR_beep>
    482a:	c7 01       	movw	r24, r14
    482c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
    4830:	60 e0       	ldi	r22, 0x00	; 0
    4832:	70 e0       	ldi	r23, 0x00	; 0
    4834:	80 e0       	ldi	r24, 0x00	; 0
    4836:	90 e0       	ldi	r25, 0x00	; 0
    4838:	0e 94 cd 25 	call	0x4b9a	; 0x4b9a <SPKR_beep>
    483c:	ce 01       	movw	r24, r28
    483e:	8e 19       	sub	r24, r14
    4840:	9f 09       	sbc	r25, r15
    4842:	04 c0       	rjmp	.+8      	; 0x484c <SPKR_play_beep+0x7c>
    4844:	41 15       	cp	r20, r1
    4846:	51 05       	cpc	r21, r1
    4848:	19 f0       	breq	.+6      	; 0x4850 <SPKR_play_beep+0x80>
    484a:	ca 01       	movw	r24, r20
    484c:	0e 94 19 1e 	call	0x3c32	; 0x3c32 <TMRSRVC_delay>
    4850:	df 91       	pop	r29
    4852:	cf 91       	pop	r28
    4854:	1f 91       	pop	r17
    4856:	0f 91       	pop	r16
    4858:	ff 90       	pop	r15
    485a:	ef 90       	pop	r14
    485c:	df 90       	pop	r13
    485e:	cf 90       	pop	r12
    4860:	bf 90       	pop	r11
    4862:	af 90       	pop	r10
    4864:	9f 90       	pop	r9
    4866:	8f 90       	pop	r8
    4868:	08 95       	ret

0000486a <__SPKR_stop>:
    486a:	ef e6       	ldi	r30, 0x6F	; 111
    486c:	f0 e0       	ldi	r31, 0x00	; 0
    486e:	80 81       	ld	r24, Z
    4870:	8d 7f       	andi	r24, 0xFD	; 253
    4872:	80 83       	st	Z, r24
    4874:	08 95       	ret

00004876 <STEPPER_go>:
    4876:	98 2f       	mov	r25, r24
    4878:	81 e0       	ldi	r24, 0x01	; 1
    487a:	80 93 dd 06 	sts	0x06DD, r24
    487e:	91 30       	cpi	r25, 0x01	; 1
    4880:	51 f0       	breq	.+20     	; 0x4896 <STEPPER_go+0x20>
    4882:	91 30       	cpi	r25, 0x01	; 1
    4884:	18 f0       	brcs	.+6      	; 0x488c <STEPPER_go+0x16>
    4886:	92 30       	cpi	r25, 0x02	; 2
    4888:	41 f4       	brne	.+16     	; 0x489a <STEPPER_go+0x24>
    488a:	03 c0       	rjmp	.+6      	; 0x4892 <STEPPER_go+0x1c>
    488c:	10 92 c5 06 	sts	0x06C5, r1
    4890:	04 c0       	rjmp	.+8      	; 0x489a <STEPPER_go+0x24>
    4892:	10 92 c5 06 	sts	0x06C5, r1
    4896:	10 92 c6 06 	sts	0x06C6, r1
    489a:	10 92 dd 06 	sts	0x06DD, r1
    489e:	08 95       	ret

000048a0 <__STEPPER_init>:
    48a0:	3a 9a       	sbi	0x07, 2	; 7
    48a2:	3b 9a       	sbi	0x07, 3	; 7
    48a4:	3c 9a       	sbi	0x07, 4	; 7
    48a6:	3d 9a       	sbi	0x07, 5	; 7
    48a8:	3e 9a       	sbi	0x07, 6	; 7
    48aa:	3f 9a       	sbi	0x07, 7	; 7
    48ac:	88 b1       	in	r24, 0x08	; 8
    48ae:	83 70       	andi	r24, 0x03	; 3
    48b0:	88 b9       	out	0x08, r24	; 8
    48b2:	08 95       	ret

000048b4 <STEPPER_set_steps>:
    48b4:	98 2f       	mov	r25, r24
    48b6:	81 e0       	ldi	r24, 0x01	; 1
    48b8:	80 93 dd 06 	sts	0x06DD, r24
    48bc:	91 30       	cpi	r25, 0x01	; 1
    48be:	71 f0       	breq	.+28     	; 0x48dc <STEPPER_set_steps+0x28>
    48c0:	91 30       	cpi	r25, 0x01	; 1
    48c2:	18 f0       	brcs	.+6      	; 0x48ca <STEPPER_set_steps+0x16>
    48c4:	92 30       	cpi	r25, 0x02	; 2
    48c6:	71 f4       	brne	.+28     	; 0x48e4 <STEPPER_set_steps+0x30>
    48c8:	05 c0       	rjmp	.+10     	; 0x48d4 <STEPPER_set_steps+0x20>
    48ca:	70 93 ba 06 	sts	0x06BA, r23
    48ce:	60 93 b9 06 	sts	0x06B9, r22
    48d2:	08 c0       	rjmp	.+16     	; 0x48e4 <STEPPER_set_steps+0x30>
    48d4:	70 93 ba 06 	sts	0x06BA, r23
    48d8:	60 93 b9 06 	sts	0x06B9, r22
    48dc:	70 93 bc 06 	sts	0x06BC, r23
    48e0:	60 93 bb 06 	sts	0x06BB, r22
    48e4:	10 92 dd 06 	sts	0x06DD, r1
    48e8:	08 95       	ret

000048ea <STEPPER_set_stop_mode>:
    48ea:	98 2f       	mov	r25, r24
    48ec:	81 e0       	ldi	r24, 0x01	; 1
    48ee:	80 93 dd 06 	sts	0x06DD, r24
    48f2:	91 30       	cpi	r25, 0x01	; 1
    48f4:	51 f0       	breq	.+20     	; 0x490a <STEPPER_set_stop_mode+0x20>
    48f6:	91 30       	cpi	r25, 0x01	; 1
    48f8:	18 f0       	brcs	.+6      	; 0x4900 <STEPPER_set_stop_mode+0x16>
    48fa:	92 30       	cpi	r25, 0x02	; 2
    48fc:	41 f4       	brne	.+16     	; 0x490e <STEPPER_set_stop_mode+0x24>
    48fe:	03 c0       	rjmp	.+6      	; 0x4906 <STEPPER_set_stop_mode+0x1c>
    4900:	60 93 c7 06 	sts	0x06C7, r22
    4904:	04 c0       	rjmp	.+8      	; 0x490e <STEPPER_set_stop_mode+0x24>
    4906:	60 93 c7 06 	sts	0x06C7, r22
    490a:	60 93 c8 06 	sts	0x06C8, r22
    490e:	10 92 dd 06 	sts	0x06DD, r1
    4912:	08 95       	ret

00004914 <STEPPER_setup_decels>:
    4914:	0f 93       	push	r16
    4916:	1f 93       	push	r17
    4918:	cf 93       	push	r28
    491a:	df 93       	push	r29
    491c:	eb 01       	movw	r28, r22
    491e:	8a 01       	movw	r16, r20
    4920:	81 30       	cpi	r24, 0x01	; 1
    4922:	01 f1       	breq	.+64     	; 0x4964 <STEPPER_setup_decels+0x50>
    4924:	81 30       	cpi	r24, 0x01	; 1
    4926:	18 f0       	brcs	.+6      	; 0x492e <STEPPER_setup_decels+0x1a>
    4928:	82 30       	cpi	r24, 0x02	; 2
    492a:	61 f5       	brne	.+88     	; 0x4984 <STEPPER_setup_decels+0x70>
    492c:	0d c0       	rjmp	.+26     	; 0x4948 <STEPPER_setup_decels+0x34>
    492e:	80 91 b1 06 	lds	r24, 0x06B1
    4932:	90 91 b2 06 	lds	r25, 0x06B2
    4936:	89 2b       	or	r24, r25
    4938:	11 f0       	breq	.+4      	; 0x493e <STEPPER_setup_decels+0x2a>
    493a:	80 e0       	ldi	r24, 0x00	; 0
    493c:	1a c0       	rjmp	.+52     	; 0x4972 <STEPPER_setup_decels+0x5e>
    493e:	10 92 be 06 	sts	0x06BE, r1
    4942:	10 92 bd 06 	sts	0x06BD, r1
    4946:	1e c0       	rjmp	.+60     	; 0x4984 <STEPPER_setup_decels+0x70>
    4948:	80 91 b1 06 	lds	r24, 0x06B1
    494c:	90 91 b2 06 	lds	r25, 0x06B2
    4950:	89 2b       	or	r24, r25
    4952:	21 f0       	breq	.+8      	; 0x495c <STEPPER_setup_decels+0x48>
    4954:	80 e0       	ldi	r24, 0x00	; 0
    4956:	0e 94 00 26 	call	0x4c00	; 0x4c00 <STEPPER_set_decel_step_values>
    495a:	04 c0       	rjmp	.+8      	; 0x4964 <STEPPER_setup_decels+0x50>
    495c:	10 92 be 06 	sts	0x06BE, r1
    4960:	10 92 bd 06 	sts	0x06BD, r1
    4964:	80 91 b3 06 	lds	r24, 0x06B3
    4968:	90 91 b4 06 	lds	r25, 0x06B4
    496c:	89 2b       	or	r24, r25
    496e:	31 f0       	breq	.+12     	; 0x497c <STEPPER_setup_decels+0x68>
    4970:	81 e0       	ldi	r24, 0x01	; 1
    4972:	be 01       	movw	r22, r28
    4974:	a8 01       	movw	r20, r16
    4976:	0e 94 00 26 	call	0x4c00	; 0x4c00 <STEPPER_set_decel_step_values>
    497a:	04 c0       	rjmp	.+8      	; 0x4984 <STEPPER_setup_decels+0x70>
    497c:	10 92 c0 06 	sts	0x06C0, r1
    4980:	10 92 bf 06 	sts	0x06BF, r1
    4984:	df 91       	pop	r29
    4986:	cf 91       	pop	r28
    4988:	1f 91       	pop	r17
    498a:	0f 91       	pop	r16
    498c:	08 95       	ret

0000498e <SYS_init>:
    498e:	10 92 e0 06 	sts	0x06E0, r1
    4992:	10 92 e1 06 	sts	0x06E1, r1
    4996:	10 92 e5 06 	sts	0x06E5, r1
    499a:	10 92 e2 06 	sts	0x06E2, r1
    499e:	10 92 e4 06 	sts	0x06E4, r1
    49a2:	10 92 e6 06 	sts	0x06E6, r1
    49a6:	10 92 e7 06 	sts	0x06E7, r1
    49aa:	10 92 e8 06 	sts	0x06E8, r1
    49ae:	10 92 e9 06 	sts	0x06E9, r1
    49b2:	10 92 ea 06 	sts	0x06EA, r1
    49b6:	10 92 eb 06 	sts	0x06EB, r1
    49ba:	10 92 ec 06 	sts	0x06EC, r1
    49be:	10 92 ed 06 	sts	0x06ED, r1
    49c2:	10 92 ee 06 	sts	0x06EE, r1
    49c6:	10 92 ef 06 	sts	0x06EF, r1
    49ca:	10 92 f0 06 	sts	0x06F0, r1
    49ce:	10 92 f1 06 	sts	0x06F1, r1
    49d2:	08 95       	ret

000049d4 <TMRSRVC_insert>:
    49d4:	cf 92       	push	r12
    49d6:	df 92       	push	r13
    49d8:	ef 92       	push	r14
    49da:	ff 92       	push	r15
    49dc:	0f 93       	push	r16
    49de:	1f 93       	push	r17
    49e0:	cf 93       	push	r28
    49e2:	df 93       	push	r29
    49e4:	ec 01       	movw	r28, r24
    49e6:	80 91 17 07 	lds	r24, 0x0717
    49ea:	88 23       	and	r24, r24
    49ec:	39 f4       	brne	.+14     	; 0x49fc <TMRSRVC_insert+0x28>
    49ee:	d0 93 19 07 	sts	0x0719, r29
    49f2:	c0 93 18 07 	sts	0x0718, r28
    49f6:	0e 94 78 25 	call	0x4af0	; 0x4af0 <TMRSRVC_start>
    49fa:	47 c0       	rjmp	.+142    	; 0x4a8a <TMRSRVC_insert+0xb6>
    49fc:	c0 90 18 07 	lds	r12, 0x0718
    4a00:	d0 90 19 07 	lds	r13, 0x0719
    4a04:	00 e0       	ldi	r16, 0x00	; 0
    4a06:	10 e0       	ldi	r17, 0x00	; 0
    4a08:	ee 24       	eor	r14, r14
    4a0a:	ff 24       	eor	r15, r15
    4a0c:	37 c0       	rjmp	.+110    	; 0x4a7c <TMRSRVC_insert+0xa8>
    4a0e:	a8 81       	ld	r26, Y
    4a10:	b9 81       	ldd	r27, Y+1	; 0x01
    4a12:	fd 01       	movw	r30, r26
    4a14:	64 81       	ldd	r22, Z+4	; 0x04
    4a16:	75 81       	ldd	r23, Z+5	; 0x05
    4a18:	f6 01       	movw	r30, r12
    4a1a:	40 81       	ld	r20, Z
    4a1c:	51 81       	ldd	r21, Z+1	; 0x01
    4a1e:	fa 01       	movw	r30, r20
    4a20:	84 81       	ldd	r24, Z+4	; 0x04
    4a22:	95 81       	ldd	r25, Z+5	; 0x05
    4a24:	9b 01       	movw	r18, r22
    4a26:	28 1b       	sub	r18, r24
    4a28:	39 0b       	sbc	r19, r25
    4a2a:	37 ff       	sbrs	r19, 7
    4a2c:	0f c0       	rjmp	.+30     	; 0x4a4c <TMRSRVC_insert+0x78>
    4a2e:	86 1b       	sub	r24, r22
    4a30:	97 0b       	sbc	r25, r23
    4a32:	95 83       	std	Z+5, r25	; 0x05
    4a34:	84 83       	std	Z+4, r24	; 0x04
    4a36:	db 82       	std	Y+3, r13	; 0x03
    4a38:	ca 82       	std	Y+2, r12	; 0x02
    4a3a:	01 2b       	or	r16, r17
    4a3c:	29 f4       	brne	.+10     	; 0x4a48 <TMRSRVC_insert+0x74>
    4a3e:	d0 93 19 07 	sts	0x0719, r29
    4a42:	c0 93 18 07 	sts	0x0718, r28
    4a46:	21 c0       	rjmp	.+66     	; 0x4a8a <TMRSRVC_insert+0xb6>
    4a48:	f7 01       	movw	r30, r14
    4a4a:	0c c0       	rjmp	.+24     	; 0x4a64 <TMRSRVC_insert+0x90>
    4a4c:	f6 01       	movw	r30, r12
    4a4e:	82 81       	ldd	r24, Z+2	; 0x02
    4a50:	93 81       	ldd	r25, Z+3	; 0x03
    4a52:	21 15       	cp	r18, r1
    4a54:	31 05       	cpc	r19, r1
    4a56:	49 f4       	brne	.+18     	; 0x4a6a <TMRSRVC_insert+0x96>
    4a58:	fd 01       	movw	r30, r26
    4a5a:	15 82       	std	Z+5, r1	; 0x05
    4a5c:	14 82       	std	Z+4, r1	; 0x04
    4a5e:	9b 83       	std	Y+3, r25	; 0x03
    4a60:	8a 83       	std	Y+2, r24	; 0x02
    4a62:	f6 01       	movw	r30, r12
    4a64:	d3 83       	std	Z+3, r29	; 0x03
    4a66:	c2 83       	std	Z+2, r28	; 0x02
    4a68:	10 c0       	rjmp	.+32     	; 0x4a8a <TMRSRVC_insert+0xb6>
    4a6a:	fd 01       	movw	r30, r26
    4a6c:	35 83       	std	Z+5, r19	; 0x05
    4a6e:	24 83       	std	Z+4, r18	; 0x04
    4a70:	00 97       	sbiw	r24, 0x00	; 0
    4a72:	b9 f3       	breq	.-18     	; 0x4a62 <TMRSRVC_insert+0x8e>
    4a74:	0f 5f       	subi	r16, 0xFF	; 255
    4a76:	1f 4f       	sbci	r17, 0xFF	; 255
    4a78:	76 01       	movw	r14, r12
    4a7a:	6c 01       	movw	r12, r24
    4a7c:	80 91 17 07 	lds	r24, 0x0717
    4a80:	90 e0       	ldi	r25, 0x00	; 0
    4a82:	08 17       	cp	r16, r24
    4a84:	19 07       	cpc	r17, r25
    4a86:	18 f2       	brcs	.-122    	; 0x4a0e <TMRSRVC_insert+0x3a>
    4a88:	ec cf       	rjmp	.-40     	; 0x4a62 <TMRSRVC_insert+0x8e>
    4a8a:	80 91 17 07 	lds	r24, 0x0717
    4a8e:	8f 5f       	subi	r24, 0xFF	; 255
    4a90:	80 93 17 07 	sts	0x0717, r24
    4a94:	df 91       	pop	r29
    4a96:	cf 91       	pop	r28
    4a98:	1f 91       	pop	r17
    4a9a:	0f 91       	pop	r16
    4a9c:	ff 90       	pop	r15
    4a9e:	ef 90       	pop	r14
    4aa0:	df 90       	pop	r13
    4aa2:	cf 90       	pop	r12
    4aa4:	08 95       	ret

00004aa6 <TMRSRVC_open>:
    4aa6:	88 e0       	ldi	r24, 0x08	; 8
    4aa8:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    4aac:	88 23       	and	r24, r24
    4aae:	b9 f4       	brne	.+46     	; 0x4ade <TMRSRVC_open+0x38>
    4ab0:	10 92 17 07 	sts	0x0717, r1
    4ab4:	10 92 19 07 	sts	0x0719, r1
    4ab8:	10 92 18 07 	sts	0x0718, r1
    4abc:	10 92 5e 04 	sts	0x045E, r1
    4ac0:	10 92 5f 04 	sts	0x045F, r1
    4ac4:	80 e1       	ldi	r24, 0x10	; 16
    4ac6:	6d e6       	ldi	r22, 0x6D	; 109
    4ac8:	76 e2       	ldi	r23, 0x26	; 38
    4aca:	0e 94 89 25 	call	0x4b12	; 0x4b12 <__ISR_attach>
    4ace:	0e 94 74 26 	call	0x4ce8	; 0x4ce8 <__TMRSRVC_init>
    4ad2:	0e 94 72 25 	call	0x4ae4	; 0x4ae4 <__TMRSRVC_start>
    4ad6:	88 e0       	ldi	r24, 0x08	; 8
    4ad8:	61 e0       	ldi	r22, 0x01	; 1
    4ada:	0e 94 04 1d 	call	0x3a08	; 0x3a08 <SYS_set_state>
    4ade:	88 e0       	ldi	r24, 0x08	; 8
    4ae0:	91 e0       	ldi	r25, 0x01	; 1
    4ae2:	08 95       	ret

00004ae4 <__TMRSRVC_start>:
    4ae4:	ee e6       	ldi	r30, 0x6E	; 110
    4ae6:	f0 e0       	ldi	r31, 0x00	; 0
    4ae8:	80 81       	ld	r24, Z
    4aea:	82 60       	ori	r24, 0x02	; 2
    4aec:	80 83       	st	Z, r24
    4aee:	08 95       	ret

00004af0 <TMRSRVC_start>:
    4af0:	81 e0       	ldi	r24, 0x01	; 1
    4af2:	80 93 5f 04 	sts	0x045F, r24
    4af6:	08 95       	ret

00004af8 <I2C_enable>:
    4af8:	80 91 1a 07 	lds	r24, 0x071A
    4afc:	81 30       	cpi	r24, 0x01	; 1
    4afe:	29 f4       	brne	.+10     	; 0x4b0a <I2C_enable+0x12>
    4b00:	80 91 bc 00 	lds	r24, 0x00BC
    4b04:	84 60       	ori	r24, 0x04	; 4
    4b06:	80 93 bc 00 	sts	0x00BC, r24
    4b0a:	08 95       	ret

00004b0c <__I2C_init>:
    4b0c:	38 98       	cbi	0x07, 0	; 7
    4b0e:	39 98       	cbi	0x07, 1	; 7
    4b10:	08 95       	ret

00004b12 <__ISR_attach>:
    4b12:	80 32       	cpi	r24, 0x20	; 32
    4b14:	18 f0       	brcs	.+6      	; 0x4b1c <__ISR_attach+0xa>
    4b16:	20 e0       	ldi	r18, 0x00	; 0
    4b18:	30 e0       	ldi	r19, 0x00	; 0
    4b1a:	0a c0       	rjmp	.+20     	; 0x4b30 <__ISR_attach+0x1e>
    4b1c:	e8 2f       	mov	r30, r24
    4b1e:	f0 e0       	ldi	r31, 0x00	; 0
    4b20:	ee 0f       	add	r30, r30
    4b22:	ff 1f       	adc	r31, r31
    4b24:	e2 50       	subi	r30, 0x02	; 2
    4b26:	fc 4f       	sbci	r31, 0xFC	; 252
    4b28:	20 81       	ld	r18, Z
    4b2a:	31 81       	ldd	r19, Z+1	; 0x01
    4b2c:	71 83       	std	Z+1, r23	; 0x01
    4b2e:	60 83       	st	Z, r22
    4b30:	c9 01       	movw	r24, r18
    4b32:	08 95       	ret

00004b34 <__ATMEGA_init>:
    4b34:	24 9a       	sbi	0x04, 4	; 4
    4b36:	2c 9a       	sbi	0x05, 4	; 5
    4b38:	08 95       	ret

00004b3a <SPI_default_config>:
    4b3a:	83 e5       	ldi	r24, 0x53	; 83
    4b3c:	8c bd       	out	0x2c, r24	; 44
    4b3e:	81 e0       	ldi	r24, 0x01	; 1
    4b40:	8d bd       	out	0x2d, r24	; 45
    4b42:	8d e0       	ldi	r24, 0x0D	; 13
    4b44:	8a 95       	dec	r24
    4b46:	f1 f7       	brne	.-4      	; 0x4b44 <SPI_default_config+0xa>
    4b48:	08 95       	ret

00004b4a <SPI_ATtiny0_config>:
    4b4a:	83 e5       	ldi	r24, 0x53	; 83
    4b4c:	8c bd       	out	0x2c, r24	; 44
    4b4e:	1d bc       	out	0x2d, r1	; 45
    4b50:	84 ef       	ldi	r24, 0xF4	; 244
    4b52:	91 e0       	ldi	r25, 0x01	; 1
    4b54:	01 97       	sbiw	r24, 0x01	; 1
    4b56:	f1 f7       	brne	.-4      	; 0x4b54 <SPI_ATtiny0_config+0xa>
    4b58:	08 95       	ret

00004b5a <SPI_PSXC_config>:
    4b5a:	8f e7       	ldi	r24, 0x7F	; 127
    4b5c:	8c bd       	out	0x2c, r24	; 44
    4b5e:	1d bc       	out	0x2d, r1	; 45
    4b60:	84 ef       	ldi	r24, 0xF4	; 244
    4b62:	91 e0       	ldi	r25, 0x01	; 1
    4b64:	01 97       	sbiw	r24, 0x01	; 1
    4b66:	f1 f7       	brne	.-4      	; 0x4b64 <SPI_PSXC_config+0xa>
    4b68:	08 95       	ret

00004b6a <SPI_LCD_config>:
    4b6a:	83 e5       	ldi	r24, 0x53	; 83
    4b6c:	8c bd       	out	0x2c, r24	; 44
    4b6e:	81 e0       	ldi	r24, 0x01	; 1
    4b70:	8d bd       	out	0x2d, r24	; 45
    4b72:	8d e0       	ldi	r24, 0x0D	; 13
    4b74:	8a 95       	dec	r24
    4b76:	f1 f7       	brne	.-4      	; 0x4b74 <SPI_LCD_config+0xa>
    4b78:	08 95       	ret

00004b7a <SPI_FLASH_config>:
    4b7a:	83 e5       	ldi	r24, 0x53	; 83
    4b7c:	8c bd       	out	0x2c, r24	; 44
    4b7e:	81 e0       	ldi	r24, 0x01	; 1
    4b80:	8d bd       	out	0x2d, r24	; 45
    4b82:	84 ef       	ldi	r24, 0xF4	; 244
    4b84:	91 e0       	ldi	r25, 0x01	; 1
    4b86:	01 97       	sbiw	r24, 0x01	; 1
    4b88:	f1 f7       	brne	.-4      	; 0x4b86 <SPI_FLASH_config+0xc>
    4b8a:	08 95       	ret

00004b8c <__SPI_init>:
    4b8c:	25 9a       	sbi	0x04, 5	; 4
    4b8e:	26 98       	cbi	0x04, 6	; 4
    4b90:	27 9a       	sbi	0x04, 7	; 4
    4b92:	20 9a       	sbi	0x04, 0	; 4
    4b94:	21 9a       	sbi	0x04, 1	; 4
    4b96:	22 9a       	sbi	0x04, 2	; 4
    4b98:	08 95       	ret

00004b9a <SPKR_beep>:
    4b9a:	9b 01       	movw	r18, r22
    4b9c:	ac 01       	movw	r20, r24
    4b9e:	80 91 4f 04 	lds	r24, 0x044F
    4ba2:	88 23       	and	r24, r24
    4ba4:	81 f0       	breq	.+32     	; 0x4bc6 <SPKR_beep+0x2c>
    4ba6:	da 01       	movw	r26, r20
    4ba8:	c9 01       	movw	r24, r18
    4baa:	88 0f       	add	r24, r24
    4bac:	99 1f       	adc	r25, r25
    4bae:	aa 1f       	adc	r26, r26
    4bb0:	bb 1f       	adc	r27, r27
    4bb2:	90 93 5b 04 	sts	0x045B, r25
    4bb6:	80 93 5a 04 	sts	0x045A, r24
    4bba:	21 15       	cp	r18, r1
    4bbc:	31 05       	cpc	r19, r1
    4bbe:	41 05       	cpc	r20, r1
    4bc0:	51 05       	cpc	r21, r1
    4bc2:	09 f4       	brne	.+2      	; 0x4bc6 <SPKR_beep+0x2c>
    4bc4:	5f 98       	cbi	0x0b, 7	; 11
    4bc6:	08 95       	ret

00004bc8 <__SPKR_close>:
    4bc8:	82 30       	cpi	r24, 0x02	; 2
    4bca:	29 f4       	brne	.+10     	; 0x4bd6 <__SPKR_close+0xe>
    4bcc:	80 91 81 00 	lds	r24, 0x0081
    4bd0:	8e 7f       	andi	r24, 0xFE	; 254
    4bd2:	80 93 81 00 	sts	0x0081, r24
    4bd6:	80 91 4e 04 	lds	r24, 0x044E
    4bda:	81 30       	cpi	r24, 0x01	; 1
    4bdc:	31 f4       	brne	.+12     	; 0x4bea <__SPKR_close+0x22>
    4bde:	80 91 4f 04 	lds	r24, 0x044F
    4be2:	81 30       	cpi	r24, 0x01	; 1
    4be4:	11 f4       	brne	.+4      	; 0x4bea <__SPKR_close+0x22>
    4be6:	00 00       	nop
    4be8:	08 95       	ret
    4bea:	80 91 4e 04 	lds	r24, 0x044E
    4bee:	81 30       	cpi	r24, 0x01	; 1
    4bf0:	21 f0       	breq	.+8      	; 0x4bfa <__SPKR_close+0x32>
    4bf2:	80 91 4f 04 	lds	r24, 0x044F
    4bf6:	81 30       	cpi	r24, 0x01	; 1
    4bf8:	11 f4       	brne	.+4      	; 0x4bfe <__SPKR_close+0x36>
    4bfa:	5f 98       	cbi	0x0b, 7	; 11
    4bfc:	57 98       	cbi	0x0a, 7	; 10
    4bfe:	08 95       	ret

00004c00 <STEPPER_set_decel_step_values>:
    4c00:	ef 92       	push	r14
    4c02:	ff 92       	push	r15
    4c04:	0f 93       	push	r16
    4c06:	1f 93       	push	r17
    4c08:	cf 93       	push	r28
    4c0a:	df 93       	push	r29
    4c0c:	eb 01       	movw	r28, r22
    4c0e:	88 23       	and	r24, r24
    4c10:	21 f0       	breq	.+8      	; 0x4c1a <STEPPER_set_decel_step_values+0x1a>
    4c12:	81 30       	cpi	r24, 0x01	; 1
    4c14:	09 f0       	breq	.+2      	; 0x4c18 <STEPPER_set_decel_step_values+0x18>
    4c16:	5a c0       	rjmp	.+180    	; 0x4ccc <STEPPER_set_decel_step_values+0xcc>
    4c18:	2d c0       	rjmp	.+90     	; 0x4c74 <STEPPER_set_decel_step_values+0x74>
    4c1a:	9a 01       	movw	r18, r20
    4c1c:	40 e0       	ldi	r20, 0x00	; 0
    4c1e:	50 e0       	ldi	r21, 0x00	; 0
    4c20:	ca 01       	movw	r24, r20
    4c22:	b9 01       	movw	r22, r18
    4c24:	0e 94 32 31 	call	0x6264	; 0x6264 <__mulsi3>
    4c28:	20 91 b1 06 	lds	r18, 0x06B1
    4c2c:	30 91 b2 06 	lds	r19, 0x06B2
    4c30:	22 0f       	add	r18, r18
    4c32:	33 1f       	adc	r19, r19
    4c34:	40 e0       	ldi	r20, 0x00	; 0
    4c36:	50 e0       	ldi	r21, 0x00	; 0
    4c38:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__udivmodsi4>
    4c3c:	79 01       	movw	r14, r18
    4c3e:	8a 01       	movw	r16, r20
    4c40:	a8 01       	movw	r20, r16
    4c42:	97 01       	movw	r18, r14
    4c44:	22 0f       	add	r18, r18
    4c46:	33 1f       	adc	r19, r19
    4c48:	44 1f       	adc	r20, r20
    4c4a:	55 1f       	adc	r21, r21
    4c4c:	ce 01       	movw	r24, r28
    4c4e:	a0 e0       	ldi	r26, 0x00	; 0
    4c50:	b0 e0       	ldi	r27, 0x00	; 0
    4c52:	82 17       	cp	r24, r18
    4c54:	93 07       	cpc	r25, r19
    4c56:	a4 07       	cpc	r26, r20
    4c58:	b5 07       	cpc	r27, r21
    4c5a:	28 f0       	brcs	.+10     	; 0x4c66 <STEPPER_set_decel_step_values+0x66>
    4c5c:	f0 92 be 06 	sts	0x06BE, r15
    4c60:	e0 92 bd 06 	sts	0x06BD, r14
    4c64:	33 c0       	rjmp	.+102    	; 0x4ccc <STEPPER_set_decel_step_values+0xcc>
    4c66:	d6 95       	lsr	r29
    4c68:	c7 95       	ror	r28
    4c6a:	d0 93 be 06 	sts	0x06BE, r29
    4c6e:	c0 93 bd 06 	sts	0x06BD, r28
    4c72:	2c c0       	rjmp	.+88     	; 0x4ccc <STEPPER_set_decel_step_values+0xcc>
    4c74:	9a 01       	movw	r18, r20
    4c76:	40 e0       	ldi	r20, 0x00	; 0
    4c78:	50 e0       	ldi	r21, 0x00	; 0
    4c7a:	ca 01       	movw	r24, r20
    4c7c:	b9 01       	movw	r22, r18
    4c7e:	0e 94 32 31 	call	0x6264	; 0x6264 <__mulsi3>
    4c82:	20 91 b3 06 	lds	r18, 0x06B3
    4c86:	30 91 b4 06 	lds	r19, 0x06B4
    4c8a:	22 0f       	add	r18, r18
    4c8c:	33 1f       	adc	r19, r19
    4c8e:	40 e0       	ldi	r20, 0x00	; 0
    4c90:	50 e0       	ldi	r21, 0x00	; 0
    4c92:	0e 94 64 31 	call	0x62c8	; 0x62c8 <__udivmodsi4>
    4c96:	79 01       	movw	r14, r18
    4c98:	8a 01       	movw	r16, r20
    4c9a:	a8 01       	movw	r20, r16
    4c9c:	97 01       	movw	r18, r14
    4c9e:	22 0f       	add	r18, r18
    4ca0:	33 1f       	adc	r19, r19
    4ca2:	44 1f       	adc	r20, r20
    4ca4:	55 1f       	adc	r21, r21
    4ca6:	ce 01       	movw	r24, r28
    4ca8:	a0 e0       	ldi	r26, 0x00	; 0
    4caa:	b0 e0       	ldi	r27, 0x00	; 0
    4cac:	82 17       	cp	r24, r18
    4cae:	93 07       	cpc	r25, r19
    4cb0:	a4 07       	cpc	r26, r20
    4cb2:	b5 07       	cpc	r27, r21
    4cb4:	28 f0       	brcs	.+10     	; 0x4cc0 <STEPPER_set_decel_step_values+0xc0>
    4cb6:	f0 92 c0 06 	sts	0x06C0, r15
    4cba:	e0 92 bf 06 	sts	0x06BF, r14
    4cbe:	06 c0       	rjmp	.+12     	; 0x4ccc <STEPPER_set_decel_step_values+0xcc>
    4cc0:	d6 95       	lsr	r29
    4cc2:	c7 95       	ror	r28
    4cc4:	d0 93 c0 06 	sts	0x06C0, r29
    4cc8:	c0 93 bf 06 	sts	0x06BF, r28
    4ccc:	df 91       	pop	r29
    4cce:	cf 91       	pop	r28
    4cd0:	1f 91       	pop	r17
    4cd2:	0f 91       	pop	r16
    4cd4:	ff 90       	pop	r15
    4cd6:	ef 90       	pop	r14
    4cd8:	08 95       	ret

00004cda <__TIMER0_COMPA_vect>:
    4cda:	0e 94 7d 26 	call	0x4cfa	; 0x4cfa <TMRSRVC_tick>
    4cde:	0e 94 bd 26 	call	0x4d7a	; 0x4d7a <STEPPER_clk>
    4ce2:	0e 94 96 26 	call	0x4d2c	; 0x4d2c <SPKR_beep_clk>
    4ce6:	08 95       	ret

00004ce8 <__TMRSRVC_init>:
    4ce8:	84 b5       	in	r24, 0x24	; 36
    4cea:	82 60       	ori	r24, 0x02	; 2
    4cec:	84 bd       	out	0x24, r24	; 36
    4cee:	85 b5       	in	r24, 0x25	; 37
    4cf0:	84 60       	ori	r24, 0x04	; 4
    4cf2:	85 bd       	out	0x25, r24	; 37
    4cf4:	8e e4       	ldi	r24, 0x4E	; 78
    4cf6:	87 bd       	out	0x27, r24	; 39
    4cf8:	08 95       	ret

00004cfa <TMRSRVC_tick>:
    4cfa:	88 e0       	ldi	r24, 0x08	; 8
    4cfc:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    4d00:	88 23       	and	r24, r24
    4d02:	11 f4       	brne	.+4      	; 0x4d08 <TMRSRVC_tick+0xe>
    4d04:	84 e0       	ldi	r24, 0x04	; 4
    4d06:	08 95       	ret
    4d08:	80 91 5f 04 	lds	r24, 0x045F
    4d0c:	88 23       	and	r24, r24
    4d0e:	11 f4       	brne	.+4      	; 0x4d14 <TMRSRVC_tick+0x1a>
    4d10:	83 e0       	ldi	r24, 0x03	; 3
    4d12:	08 95       	ret
    4d14:	80 91 5e 04 	lds	r24, 0x045E
    4d18:	88 23       	and	r24, r24
    4d1a:	11 f0       	breq	.+4      	; 0x4d20 <TMRSRVC_tick+0x26>
    4d1c:	82 e0       	ldi	r24, 0x02	; 2
    4d1e:	08 95       	ret
    4d20:	0e 94 0a 29 	call	0x5214	; 0x5214 <TMRSRVC_process>
    4d24:	81 30       	cpi	r24, 0x01	; 1
    4d26:	e1 f3       	breq	.-8      	; 0x4d20 <TMRSRVC_tick+0x26>
    4d28:	80 e0       	ldi	r24, 0x00	; 0
    4d2a:	08 95       	ret

00004d2c <SPKR_beep_clk>:
    4d2c:	80 91 4f 04 	lds	r24, 0x044F
    4d30:	81 30       	cpi	r24, 0x01	; 1
    4d32:	11 f5       	brne	.+68     	; 0x4d78 <SPKR_beep_clk+0x4c>
    4d34:	80 91 58 04 	lds	r24, 0x0458
    4d38:	90 91 59 04 	lds	r25, 0x0459
    4d3c:	20 91 5a 04 	lds	r18, 0x045A
    4d40:	30 91 5b 04 	lds	r19, 0x045B
    4d44:	28 0f       	add	r18, r24
    4d46:	39 1f       	adc	r19, r25
    4d48:	30 93 59 04 	sts	0x0459, r19
    4d4c:	20 93 58 04 	sts	0x0458, r18
    4d50:	80 91 58 04 	lds	r24, 0x0458
    4d54:	90 91 59 04 	lds	r25, 0x0459
    4d58:	88 5e       	subi	r24, 0xE8	; 232
    4d5a:	93 40       	sbci	r25, 0x03	; 3
    4d5c:	6c f0       	brlt	.+26     	; 0x4d78 <SPKR_beep_clk+0x4c>
    4d5e:	8b b1       	in	r24, 0x0b	; 11
    4d60:	80 58       	subi	r24, 0x80	; 128
    4d62:	8b b9       	out	0x0b, r24	; 11
    4d64:	80 91 58 04 	lds	r24, 0x0458
    4d68:	90 91 59 04 	lds	r25, 0x0459
    4d6c:	88 5e       	subi	r24, 0xE8	; 232
    4d6e:	93 40       	sbci	r25, 0x03	; 3
    4d70:	90 93 59 04 	sts	0x0459, r25
    4d74:	80 93 58 04 	sts	0x0458, r24
    4d78:	08 95       	ret

00004d7a <STEPPER_clk>:
    4d7a:	87 e0       	ldi	r24, 0x07	; 7
    4d7c:	0e 94 bc 1c 	call	0x3978	; 0x3978 <SYS_get_state>
    4d80:	81 30       	cpi	r24, 0x01	; 1
    4d82:	09 f0       	breq	.+2      	; 0x4d86 <STEPPER_clk+0xc>
    4d84:	aa c0       	rjmp	.+340    	; 0x4eda <STEPPER_clk+0x160>
    4d86:	80 91 b1 06 	lds	r24, 0x06B1
    4d8a:	90 91 b2 06 	lds	r25, 0x06B2
    4d8e:	89 2b       	or	r24, r25
    4d90:	09 f1       	breq	.+66     	; 0x4dd4 <STEPPER_clk+0x5a>
    4d92:	80 91 d5 06 	lds	r24, 0x06D5
    4d96:	90 91 d6 06 	lds	r25, 0x06D6
    4d9a:	20 91 b1 06 	lds	r18, 0x06B1
    4d9e:	30 91 b2 06 	lds	r19, 0x06B2
    4da2:	82 0f       	add	r24, r18
    4da4:	93 1f       	adc	r25, r19
    4da6:	90 93 d6 06 	sts	0x06D6, r25
    4daa:	80 93 d5 06 	sts	0x06D5, r24
    4dae:	80 91 d5 06 	lds	r24, 0x06D5
    4db2:	90 91 d6 06 	lds	r25, 0x06D6
    4db6:	88 5e       	subi	r24, 0xE8	; 232
    4db8:	93 40       	sbci	r25, 0x03	; 3
    4dba:	a4 f0       	brlt	.+40     	; 0x4de4 <STEPPER_clk+0x6a>
    4dbc:	80 91 d5 06 	lds	r24, 0x06D5
    4dc0:	90 91 d6 06 	lds	r25, 0x06D6
    4dc4:	88 5e       	subi	r24, 0xE8	; 232
    4dc6:	93 40       	sbci	r25, 0x03	; 3
    4dc8:	90 93 d6 06 	sts	0x06D6, r25
    4dcc:	80 93 d5 06 	sts	0x06D5, r24
    4dd0:	41 e0       	ldi	r20, 0x01	; 1
    4dd2:	09 c0       	rjmp	.+18     	; 0x4de6 <STEPPER_clk+0x6c>
    4dd4:	80 91 a9 06 	lds	r24, 0x06A9
    4dd8:	90 91 aa 06 	lds	r25, 0x06AA
    4ddc:	90 93 ae 06 	sts	0x06AE, r25
    4de0:	80 93 ad 06 	sts	0x06AD, r24
    4de4:	40 e0       	ldi	r20, 0x00	; 0
    4de6:	80 91 b3 06 	lds	r24, 0x06B3
    4dea:	90 91 b4 06 	lds	r25, 0x06B4
    4dee:	89 2b       	or	r24, r25
    4df0:	09 f1       	breq	.+66     	; 0x4e34 <STEPPER_clk+0xba>
    4df2:	80 91 d7 06 	lds	r24, 0x06D7
    4df6:	90 91 d8 06 	lds	r25, 0x06D8
    4dfa:	20 91 b3 06 	lds	r18, 0x06B3
    4dfe:	30 91 b4 06 	lds	r19, 0x06B4
    4e02:	82 0f       	add	r24, r18
    4e04:	93 1f       	adc	r25, r19
    4e06:	90 93 d8 06 	sts	0x06D8, r25
    4e0a:	80 93 d7 06 	sts	0x06D7, r24
    4e0e:	80 91 d7 06 	lds	r24, 0x06D7
    4e12:	90 91 d8 06 	lds	r25, 0x06D8
    4e16:	88 5e       	subi	r24, 0xE8	; 232
    4e18:	93 40       	sbci	r25, 0x03	; 3
    4e1a:	a4 f0       	brlt	.+40     	; 0x4e44 <STEPPER_clk+0xca>
    4e1c:	80 91 d7 06 	lds	r24, 0x06D7
    4e20:	90 91 d8 06 	lds	r25, 0x06D8
    4e24:	88 5e       	subi	r24, 0xE8	; 232
    4e26:	93 40       	sbci	r25, 0x03	; 3
    4e28:	90 93 d8 06 	sts	0x06D8, r25
    4e2c:	80 93 d7 06 	sts	0x06D7, r24
    4e30:	61 e0       	ldi	r22, 0x01	; 1
    4e32:	09 c0       	rjmp	.+18     	; 0x4e46 <STEPPER_clk+0xcc>
    4e34:	80 91 ab 06 	lds	r24, 0x06AB
    4e38:	90 91 ac 06 	lds	r25, 0x06AC
    4e3c:	90 93 b0 06 	sts	0x06B0, r25
    4e40:	80 93 af 06 	sts	0x06AF, r24
    4e44:	60 e0       	ldi	r22, 0x00	; 0
    4e46:	84 2f       	mov	r24, r20
    4e48:	0e 94 6e 27 	call	0x4edc	; 0x4edc <STEPPER_process_accel>
    4e4c:	80 91 d1 06 	lds	r24, 0x06D1
    4e50:	90 91 d2 06 	lds	r25, 0x06D2
    4e54:	20 91 ad 06 	lds	r18, 0x06AD
    4e58:	30 91 ae 06 	lds	r19, 0x06AE
    4e5c:	28 0f       	add	r18, r24
    4e5e:	39 1f       	adc	r19, r25
    4e60:	30 93 d2 06 	sts	0x06D2, r19
    4e64:	20 93 d1 06 	sts	0x06D1, r18
    4e68:	80 91 d1 06 	lds	r24, 0x06D1
    4e6c:	90 91 d2 06 	lds	r25, 0x06D2
    4e70:	88 5e       	subi	r24, 0xE8	; 232
    4e72:	93 40       	sbci	r25, 0x03	; 3
    4e74:	14 f4       	brge	.+4      	; 0x4e7a <STEPPER_clk+0x100>
    4e76:	40 e0       	ldi	r20, 0x00	; 0
    4e78:	0b c0       	rjmp	.+22     	; 0x4e90 <STEPPER_clk+0x116>
    4e7a:	80 91 d1 06 	lds	r24, 0x06D1
    4e7e:	90 91 d2 06 	lds	r25, 0x06D2
    4e82:	88 5e       	subi	r24, 0xE8	; 232
    4e84:	93 40       	sbci	r25, 0x03	; 3
    4e86:	90 93 d2 06 	sts	0x06D2, r25
    4e8a:	80 93 d1 06 	sts	0x06D1, r24
    4e8e:	41 e0       	ldi	r20, 0x01	; 1
    4e90:	80 91 d3 06 	lds	r24, 0x06D3
    4e94:	90 91 d4 06 	lds	r25, 0x06D4
    4e98:	20 91 af 06 	lds	r18, 0x06AF
    4e9c:	30 91 b0 06 	lds	r19, 0x06B0
    4ea0:	28 0f       	add	r18, r24
    4ea2:	39 1f       	adc	r19, r25
    4ea4:	30 93 d4 06 	sts	0x06D4, r19
    4ea8:	20 93 d3 06 	sts	0x06D3, r18
    4eac:	80 91 d3 06 	lds	r24, 0x06D3
    4eb0:	90 91 d4 06 	lds	r25, 0x06D4
    4eb4:	88 5e       	subi	r24, 0xE8	; 232
    4eb6:	93 40       	sbci	r25, 0x03	; 3
    4eb8:	14 f4       	brge	.+4      	; 0x4ebe <STEPPER_clk+0x144>
    4eba:	60 e0       	ldi	r22, 0x00	; 0
    4ebc:	0b c0       	rjmp	.+22     	; 0x4ed4 <STEPPER_clk+0x15a>
    4ebe:	80 91 d3 06 	lds	r24, 0x06D3
    4ec2:	90 91 d4 06 	lds	r25, 0x06D4
    4ec6:	88 5e       	subi	r24, 0xE8	; 232
    4ec8:	93 40       	sbci	r25, 0x03	; 3
    4eca:	90 93 d4 06 	sts	0x06D4, r25
    4ece:	80 93 d3 06 	sts	0x06D3, r24
    4ed2:	61 e0       	ldi	r22, 0x01	; 1
    4ed4:	84 2f       	mov	r24, r20
    4ed6:	0e 94 b3 27 	call	0x4f66	; 0x4f66 <STEPPER_process_run_mode>
    4eda:	08 95       	ret

00004edc <STEPPER_process_accel>:
    4edc:	88 23       	and	r24, r24
    4ede:	f1 f0       	breq	.+60     	; 0x4f1c <STEPPER_process_accel+0x40>
    4ee0:	20 91 a9 06 	lds	r18, 0x06A9
    4ee4:	30 91 aa 06 	lds	r19, 0x06AA
    4ee8:	80 91 ad 06 	lds	r24, 0x06AD
    4eec:	90 91 ae 06 	lds	r25, 0x06AE
    4ef0:	28 1b       	sub	r18, r24
    4ef2:	39 0b       	sbc	r19, r25
    4ef4:	12 16       	cp	r1, r18
    4ef6:	13 06       	cpc	r1, r19
    4ef8:	34 f4       	brge	.+12     	; 0x4f06 <STEPPER_process_accel+0x2a>
    4efa:	80 91 ad 06 	lds	r24, 0x06AD
    4efe:	90 91 ae 06 	lds	r25, 0x06AE
    4f02:	01 96       	adiw	r24, 0x01	; 1
    4f04:	07 c0       	rjmp	.+14     	; 0x4f14 <STEPPER_process_accel+0x38>
    4f06:	23 2b       	or	r18, r19
    4f08:	49 f0       	breq	.+18     	; 0x4f1c <STEPPER_process_accel+0x40>
    4f0a:	80 91 ad 06 	lds	r24, 0x06AD
    4f0e:	90 91 ae 06 	lds	r25, 0x06AE
    4f12:	01 97       	sbiw	r24, 0x01	; 1
    4f14:	90 93 ae 06 	sts	0x06AE, r25
    4f18:	80 93 ad 06 	sts	0x06AD, r24
    4f1c:	66 23       	and	r22, r22
    4f1e:	11 f1       	breq	.+68     	; 0x4f64 <STEPPER_process_accel+0x88>
    4f20:	20 91 ab 06 	lds	r18, 0x06AB
    4f24:	30 91 ac 06 	lds	r19, 0x06AC
    4f28:	80 91 af 06 	lds	r24, 0x06AF
    4f2c:	90 91 b0 06 	lds	r25, 0x06B0
    4f30:	28 1b       	sub	r18, r24
    4f32:	39 0b       	sbc	r19, r25
    4f34:	12 16       	cp	r1, r18
    4f36:	13 06       	cpc	r1, r19
    4f38:	54 f4       	brge	.+20     	; 0x4f4e <STEPPER_process_accel+0x72>
    4f3a:	80 91 af 06 	lds	r24, 0x06AF
    4f3e:	90 91 b0 06 	lds	r25, 0x06B0
    4f42:	01 96       	adiw	r24, 0x01	; 1
    4f44:	90 93 b0 06 	sts	0x06B0, r25
    4f48:	80 93 af 06 	sts	0x06AF, r24
    4f4c:	08 95       	ret
    4f4e:	23 2b       	or	r18, r19
    4f50:	49 f0       	breq	.+18     	; 0x4f64 <STEPPER_process_accel+0x88>
    4f52:	80 91 af 06 	lds	r24, 0x06AF
    4f56:	90 91 b0 06 	lds	r25, 0x06B0
    4f5a:	01 97       	sbiw	r24, 0x01	; 1
    4f5c:	90 93 b0 06 	sts	0x06B0, r25
    4f60:	80 93 af 06 	sts	0x06AF, r24
    4f64:	08 95       	ret

00004f66 <STEPPER_process_run_mode>:
    4f66:	0f 93       	push	r16
    4f68:	1f 93       	push	r17
    4f6a:	18 2f       	mov	r17, r24
    4f6c:	06 2f       	mov	r16, r22
    4f6e:	80 91 dd 06 	lds	r24, 0x06DD
    4f72:	88 23       	and	r24, r24
    4f74:	09 f0       	breq	.+2      	; 0x4f78 <STEPPER_process_run_mode+0x12>
    4f76:	e7 c0       	rjmp	.+462    	; 0x5146 <STEPPER_process_run_mode+0x1e0>
    4f78:	80 91 c5 06 	lds	r24, 0x06C5
    4f7c:	88 23       	and	r24, r24
    4f7e:	09 f0       	breq	.+2      	; 0x4f82 <STEPPER_process_run_mode+0x1c>
    4f80:	5a c0       	rjmp	.+180    	; 0x5036 <STEPPER_process_run_mode+0xd0>
    4f82:	80 91 ad 06 	lds	r24, 0x06AD
    4f86:	90 91 ae 06 	lds	r25, 0x06AE
    4f8a:	89 2b       	or	r24, r25
    4f8c:	e9 f4       	brne	.+58     	; 0x4fc8 <STEPPER_process_run_mode+0x62>
    4f8e:	80 91 60 04 	lds	r24, 0x0460
    4f92:	83 7e       	andi	r24, 0xE3	; 227
    4f94:	80 93 60 04 	sts	0x0460, r24
    4f98:	10 92 ce 06 	sts	0x06CE, r1
    4f9c:	80 91 d9 06 	lds	r24, 0x06D9
    4fa0:	88 23       	and	r24, r24
    4fa2:	09 f4       	brne	.+2      	; 0x4fa6 <STEPPER_process_run_mode+0x40>
    4fa4:	5d c0       	rjmp	.+186    	; 0x5060 <STEPPER_process_run_mode+0xfa>
    4fa6:	60 91 c7 06 	lds	r22, 0x06C7
    4faa:	80 e0       	ldi	r24, 0x00	; 0
    4fac:	0e 94 49 1c 	call	0x3892	; 0x3892 <STEPPER_stop>
    4fb0:	e0 91 db 06 	lds	r30, 0x06DB
    4fb4:	f0 91 dc 06 	lds	r31, 0x06DC
    4fb8:	30 97       	sbiw	r30, 0x00	; 0
    4fba:	09 f4       	brne	.+2      	; 0x4fbe <STEPPER_process_run_mode+0x58>
    4fbc:	51 c0       	rjmp	.+162    	; 0x5060 <STEPPER_process_run_mode+0xfa>
    4fbe:	81 e0       	ldi	r24, 0x01	; 1
    4fc0:	80 83       	st	Z, r24
    4fc2:	10 92 d9 06 	sts	0x06D9, r1
    4fc6:	4c c0       	rjmp	.+152    	; 0x5060 <STEPPER_process_run_mode+0xfa>
    4fc8:	80 91 a7 06 	lds	r24, 0x06A7
    4fcc:	81 30       	cpi	r24, 0x01	; 1
    4fce:	41 f4       	brne	.+16     	; 0x4fe0 <STEPPER_process_run_mode+0x7a>
    4fd0:	80 91 b9 06 	lds	r24, 0x06B9
    4fd4:	90 91 ba 06 	lds	r25, 0x06BA
    4fd8:	01 97       	sbiw	r24, 0x01	; 1
    4fda:	11 f4       	brne	.+4      	; 0x4fe0 <STEPPER_process_run_mode+0x7a>
    4fdc:	11 e0       	ldi	r17, 0x01	; 1
    4fde:	02 c0       	rjmp	.+4      	; 0x4fe4 <STEPPER_process_run_mode+0x7e>
    4fe0:	11 23       	and	r17, r17
    4fe2:	f1 f1       	breq	.+124    	; 0x5060 <STEPPER_process_run_mode+0xfa>
    4fe4:	e0 91 cc 06 	lds	r30, 0x06CC
    4fe8:	f0 e0       	ldi	r31, 0x00	; 0
    4fea:	e0 57       	subi	r30, 0x70	; 112
    4fec:	fc 4f       	sbci	r31, 0xFC	; 252
    4fee:	90 91 60 04 	lds	r25, 0x0460
    4ff2:	93 7e       	andi	r25, 0xE3	; 227
    4ff4:	80 81       	ld	r24, Z
    4ff6:	89 2b       	or	r24, r25
    4ff8:	80 93 60 04 	sts	0x0460, r24
    4ffc:	80 91 ca 06 	lds	r24, 0x06CA
    5000:	88 23       	and	r24, r24
    5002:	21 f4       	brne	.+8      	; 0x500c <STEPPER_process_run_mode+0xa6>
    5004:	80 91 cc 06 	lds	r24, 0x06CC
    5008:	8f 5f       	subi	r24, 0xFF	; 255
    500a:	03 c0       	rjmp	.+6      	; 0x5012 <STEPPER_process_run_mode+0xac>
    500c:	80 91 cc 06 	lds	r24, 0x06CC
    5010:	81 50       	subi	r24, 0x01	; 1
    5012:	80 93 cc 06 	sts	0x06CC, r24
    5016:	80 91 cc 06 	lds	r24, 0x06CC
    501a:	83 70       	andi	r24, 0x03	; 3
    501c:	80 93 cc 06 	sts	0x06CC, r24
    5020:	81 e0       	ldi	r24, 0x01	; 1
    5022:	80 93 ce 06 	sts	0x06CE, r24
    5026:	80 91 a7 06 	lds	r24, 0x06A7
    502a:	81 30       	cpi	r24, 0x01	; 1
    502c:	c9 f4       	brne	.+50     	; 0x5060 <STEPPER_process_run_mode+0xfa>
    502e:	80 e0       	ldi	r24, 0x00	; 0
    5030:	0e 94 b6 28 	call	0x516c	; 0x516c <STEPPER_process_step_mode>
    5034:	15 c0       	rjmp	.+42     	; 0x5060 <STEPPER_process_run_mode+0xfa>
    5036:	90 91 60 04 	lds	r25, 0x0460
    503a:	93 7e       	andi	r25, 0xE3	; 227
    503c:	90 93 60 04 	sts	0x0460, r25
    5040:	e0 91 cc 06 	lds	r30, 0x06CC
    5044:	f0 e0       	ldi	r31, 0x00	; 0
    5046:	e0 57       	subi	r30, 0x70	; 112
    5048:	fc 4f       	sbci	r31, 0xFC	; 252
    504a:	80 81       	ld	r24, Z
    504c:	89 2b       	or	r24, r25
    504e:	80 93 60 04 	sts	0x0460, r24
    5052:	82 e0       	ldi	r24, 0x02	; 2
    5054:	80 93 ce 06 	sts	0x06CE, r24
    5058:	10 92 ae 06 	sts	0x06AE, r1
    505c:	10 92 ad 06 	sts	0x06AD, r1
    5060:	80 91 c6 06 	lds	r24, 0x06C6
    5064:	88 23       	and	r24, r24
    5066:	09 f0       	breq	.+2      	; 0x506a <STEPPER_process_run_mode+0x104>
    5068:	59 c0       	rjmp	.+178    	; 0x511c <STEPPER_process_run_mode+0x1b6>
    506a:	80 91 af 06 	lds	r24, 0x06AF
    506e:	90 91 b0 06 	lds	r25, 0x06B0
    5072:	89 2b       	or	r24, r25
    5074:	e9 f4       	brne	.+58     	; 0x50b0 <STEPPER_process_run_mode+0x14a>
    5076:	80 91 60 04 	lds	r24, 0x0460
    507a:	8f 71       	andi	r24, 0x1F	; 31
    507c:	80 93 60 04 	sts	0x0460, r24
    5080:	10 92 cf 06 	sts	0x06CF, r1
    5084:	80 91 da 06 	lds	r24, 0x06DA
    5088:	88 23       	and	r24, r24
    508a:	09 f4       	brne	.+2      	; 0x508e <STEPPER_process_run_mode+0x128>
    508c:	5c c0       	rjmp	.+184    	; 0x5146 <STEPPER_process_run_mode+0x1e0>
    508e:	60 91 c8 06 	lds	r22, 0x06C8
    5092:	81 e0       	ldi	r24, 0x01	; 1
    5094:	0e 94 49 1c 	call	0x3892	; 0x3892 <STEPPER_stop>
    5098:	e0 91 db 06 	lds	r30, 0x06DB
    509c:	f0 91 dc 06 	lds	r31, 0x06DC
    50a0:	30 97       	sbiw	r30, 0x00	; 0
    50a2:	09 f4       	brne	.+2      	; 0x50a6 <STEPPER_process_run_mode+0x140>
    50a4:	50 c0       	rjmp	.+160    	; 0x5146 <STEPPER_process_run_mode+0x1e0>
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	81 83       	std	Z+1, r24	; 0x01
    50aa:	10 92 da 06 	sts	0x06DA, r1
    50ae:	4b c0       	rjmp	.+150    	; 0x5146 <STEPPER_process_run_mode+0x1e0>
    50b0:	80 91 a8 06 	lds	r24, 0x06A8
    50b4:	81 30       	cpi	r24, 0x01	; 1
    50b6:	41 f4       	brne	.+16     	; 0x50c8 <STEPPER_process_run_mode+0x162>
    50b8:	80 91 bb 06 	lds	r24, 0x06BB
    50bc:	90 91 bc 06 	lds	r25, 0x06BC
    50c0:	01 97       	sbiw	r24, 0x01	; 1
    50c2:	11 f4       	brne	.+4      	; 0x50c8 <STEPPER_process_run_mode+0x162>
    50c4:	01 e0       	ldi	r16, 0x01	; 1
    50c6:	02 c0       	rjmp	.+4      	; 0x50cc <STEPPER_process_run_mode+0x166>
    50c8:	00 23       	and	r16, r16
    50ca:	e9 f1       	breq	.+122    	; 0x5146 <STEPPER_process_run_mode+0x1e0>
    50cc:	e0 91 cd 06 	lds	r30, 0x06CD
    50d0:	f0 e0       	ldi	r31, 0x00	; 0
    50d2:	ec 56       	subi	r30, 0x6C	; 108
    50d4:	fc 4f       	sbci	r31, 0xFC	; 252
    50d6:	90 91 60 04 	lds	r25, 0x0460
    50da:	9f 71       	andi	r25, 0x1F	; 31
    50dc:	80 81       	ld	r24, Z
    50de:	89 2b       	or	r24, r25
    50e0:	80 93 60 04 	sts	0x0460, r24
    50e4:	80 91 cb 06 	lds	r24, 0x06CB
    50e8:	88 23       	and	r24, r24
    50ea:	21 f4       	brne	.+8      	; 0x50f4 <STEPPER_process_run_mode+0x18e>
    50ec:	80 91 cd 06 	lds	r24, 0x06CD
    50f0:	8f 5f       	subi	r24, 0xFF	; 255
    50f2:	03 c0       	rjmp	.+6      	; 0x50fa <STEPPER_process_run_mode+0x194>
    50f4:	80 91 cd 06 	lds	r24, 0x06CD
    50f8:	81 50       	subi	r24, 0x01	; 1
    50fa:	80 93 cd 06 	sts	0x06CD, r24
    50fe:	80 91 cd 06 	lds	r24, 0x06CD
    5102:	83 70       	andi	r24, 0x03	; 3
    5104:	80 93 cd 06 	sts	0x06CD, r24
    5108:	81 e0       	ldi	r24, 0x01	; 1
    510a:	80 93 cf 06 	sts	0x06CF, r24
    510e:	80 91 a8 06 	lds	r24, 0x06A8
    5112:	81 30       	cpi	r24, 0x01	; 1
    5114:	c1 f4       	brne	.+48     	; 0x5146 <STEPPER_process_run_mode+0x1e0>
    5116:	0e 94 b6 28 	call	0x516c	; 0x516c <STEPPER_process_step_mode>
    511a:	15 c0       	rjmp	.+42     	; 0x5146 <STEPPER_process_run_mode+0x1e0>
    511c:	90 91 60 04 	lds	r25, 0x0460
    5120:	9f 71       	andi	r25, 0x1F	; 31
    5122:	90 93 60 04 	sts	0x0460, r25
    5126:	e0 91 cd 06 	lds	r30, 0x06CD
    512a:	f0 e0       	ldi	r31, 0x00	; 0
    512c:	ec 56       	subi	r30, 0x6C	; 108
    512e:	fc 4f       	sbci	r31, 0xFC	; 252
    5130:	80 81       	ld	r24, Z
    5132:	89 2b       	or	r24, r25
    5134:	80 93 60 04 	sts	0x0460, r24
    5138:	82 e0       	ldi	r24, 0x02	; 2
    513a:	80 93 cf 06 	sts	0x06CF, r24
    513e:	10 92 b0 06 	sts	0x06B0, r1
    5142:	10 92 af 06 	sts	0x06AF, r1
    5146:	80 91 d0 06 	lds	r24, 0x06D0
    514a:	88 23       	and	r24, r24
    514c:	31 f4       	brne	.+12     	; 0x515a <STEPPER_process_run_mode+0x1f4>
    514e:	80 e6       	ldi	r24, 0x60	; 96
    5150:	94 e0       	ldi	r25, 0x04	; 4
    5152:	61 2f       	mov	r22, r17
    5154:	40 2f       	mov	r20, r16
    5156:	0e 94 78 29 	call	0x52f0	; 0x52f0 <STEPPER_process_pwm>
    515a:	88 b1       	in	r24, 0x08	; 8
    515c:	83 70       	andi	r24, 0x03	; 3
    515e:	90 91 60 04 	lds	r25, 0x0460
    5162:	89 2b       	or	r24, r25
    5164:	88 b9       	out	0x08, r24	; 8
    5166:	1f 91       	pop	r17
    5168:	0f 91       	pop	r16
    516a:	08 95       	ret

0000516c <STEPPER_process_step_mode>:
    516c:	88 23       	and	r24, r24
    516e:	21 f0       	breq	.+8      	; 0x5178 <STEPPER_process_step_mode+0xc>
    5170:	81 30       	cpi	r24, 0x01	; 1
    5172:	09 f0       	breq	.+2      	; 0x5176 <STEPPER_process_step_mode+0xa>
    5174:	4e c0       	rjmp	.+156    	; 0x5212 <STEPPER_process_step_mode+0xa6>
    5176:	27 c0       	rjmp	.+78     	; 0x51c6 <STEPPER_process_step_mode+0x5a>
    5178:	80 91 b9 06 	lds	r24, 0x06B9
    517c:	90 91 ba 06 	lds	r25, 0x06BA
    5180:	89 2b       	or	r24, r25
    5182:	49 f0       	breq	.+18     	; 0x5196 <STEPPER_process_step_mode+0x2a>
    5184:	80 91 b9 06 	lds	r24, 0x06B9
    5188:	90 91 ba 06 	lds	r25, 0x06BA
    518c:	01 97       	sbiw	r24, 0x01	; 1
    518e:	90 93 ba 06 	sts	0x06BA, r25
    5192:	80 93 b9 06 	sts	0x06B9, r24
    5196:	80 91 d9 06 	lds	r24, 0x06D9
    519a:	88 23       	and	r24, r24
    519c:	d1 f5       	brne	.+116    	; 0x5212 <STEPPER_process_step_mode+0xa6>
    519e:	20 91 b9 06 	lds	r18, 0x06B9
    51a2:	30 91 ba 06 	lds	r19, 0x06BA
    51a6:	80 91 bd 06 	lds	r24, 0x06BD
    51aa:	90 91 be 06 	lds	r25, 0x06BE
    51ae:	28 17       	cp	r18, r24
    51b0:	39 07       	cpc	r19, r25
    51b2:	79 f5       	brne	.+94     	; 0x5212 <STEPPER_process_step_mode+0xa6>
    51b4:	80 e0       	ldi	r24, 0x00	; 0
    51b6:	60 e0       	ldi	r22, 0x00	; 0
    51b8:	70 e0       	ldi	r23, 0x00	; 0
    51ba:	0e 94 9b 1b 	call	0x3736	; 0x3736 <STEPPER_set_speed>
    51be:	81 e0       	ldi	r24, 0x01	; 1
    51c0:	80 93 d9 06 	sts	0x06D9, r24
    51c4:	08 95       	ret
    51c6:	80 91 bb 06 	lds	r24, 0x06BB
    51ca:	90 91 bc 06 	lds	r25, 0x06BC
    51ce:	89 2b       	or	r24, r25
    51d0:	49 f0       	breq	.+18     	; 0x51e4 <STEPPER_process_step_mode+0x78>
    51d2:	80 91 bb 06 	lds	r24, 0x06BB
    51d6:	90 91 bc 06 	lds	r25, 0x06BC
    51da:	01 97       	sbiw	r24, 0x01	; 1
    51dc:	90 93 bc 06 	sts	0x06BC, r25
    51e0:	80 93 bb 06 	sts	0x06BB, r24
    51e4:	80 91 da 06 	lds	r24, 0x06DA
    51e8:	88 23       	and	r24, r24
    51ea:	99 f4       	brne	.+38     	; 0x5212 <STEPPER_process_step_mode+0xa6>
    51ec:	20 91 bb 06 	lds	r18, 0x06BB
    51f0:	30 91 bc 06 	lds	r19, 0x06BC
    51f4:	80 91 bf 06 	lds	r24, 0x06BF
    51f8:	90 91 c0 06 	lds	r25, 0x06C0
    51fc:	28 17       	cp	r18, r24
    51fe:	39 07       	cpc	r19, r25
    5200:	41 f4       	brne	.+16     	; 0x5212 <STEPPER_process_step_mode+0xa6>
    5202:	81 e0       	ldi	r24, 0x01	; 1
    5204:	60 e0       	ldi	r22, 0x00	; 0
    5206:	70 e0       	ldi	r23, 0x00	; 0
    5208:	0e 94 9b 1b 	call	0x3736	; 0x3736 <STEPPER_set_speed>
    520c:	81 e0       	ldi	r24, 0x01	; 1
    520e:	80 93 da 06 	sts	0x06DA, r24
    5212:	08 95       	ret

00005214 <TMRSRVC_process>:
    5214:	ff 92       	push	r15
    5216:	0f 93       	push	r16
    5218:	1f 93       	push	r17
    521a:	cf 93       	push	r28
    521c:	df 93       	push	r29
    521e:	80 91 17 07 	lds	r24, 0x0717
    5222:	88 23       	and	r24, r24
    5224:	09 f4       	brne	.+2      	; 0x5228 <TMRSRVC_process+0x14>
    5226:	59 c0       	rjmp	.+178    	; 0x52da <TMRSRVC_process+0xc6>
    5228:	00 91 18 07 	lds	r16, 0x0718
    522c:	10 91 19 07 	lds	r17, 0x0719
    5230:	f8 01       	movw	r30, r16
    5232:	c0 81       	ld	r28, Z
    5234:	d1 81       	ldd	r29, Z+1	; 0x01
    5236:	8c 81       	ldd	r24, Y+4	; 0x04
    5238:	9d 81       	ldd	r25, Y+5	; 0x05
    523a:	01 97       	sbiw	r24, 0x01	; 1
    523c:	9d 83       	std	Y+5, r25	; 0x05
    523e:	8c 83       	std	Y+4, r24	; 0x04
    5240:	18 16       	cp	r1, r24
    5242:	19 06       	cpc	r1, r25
    5244:	0c f4       	brge	.+2      	; 0x5248 <TMRSRVC_process+0x34>
    5246:	49 c0       	rjmp	.+146    	; 0x52da <TMRSRVC_process+0xc6>
    5248:	89 81       	ldd	r24, Y+1	; 0x01
    524a:	80 ff       	sbrs	r24, 0
    524c:	05 c0       	rjmp	.+10     	; 0x5258 <TMRSRVC_process+0x44>
    524e:	8e 81       	ldd	r24, Y+6	; 0x06
    5250:	88 23       	and	r24, r24
    5252:	11 f4       	brne	.+4      	; 0x5258 <TMRSRVC_process+0x44>
    5254:	81 e0       	ldi	r24, 0x01	; 1
    5256:	8e 83       	std	Y+6, r24	; 0x06
    5258:	89 81       	ldd	r24, Y+1	; 0x01
    525a:	81 ff       	sbrs	r24, 1
    525c:	03 c0       	rjmp	.+6      	; 0x5264 <TMRSRVC_process+0x50>
    525e:	ef 81       	ldd	r30, Y+7	; 0x07
    5260:	f8 85       	ldd	r31, Y+8	; 0x08
    5262:	09 95       	icall
    5264:	80 91 17 07 	lds	r24, 0x0717
    5268:	82 30       	cpi	r24, 0x02	; 2
    526a:	a8 f0       	brcs	.+42     	; 0x5296 <TMRSRVC_process+0x82>
    526c:	f8 01       	movw	r30, r16
    526e:	82 81       	ldd	r24, Z+2	; 0x02
    5270:	93 81       	ldd	r25, Z+3	; 0x03
    5272:	90 93 19 07 	sts	0x0719, r25
    5276:	80 93 18 07 	sts	0x0718, r24
    527a:	13 82       	std	Z+3, r1	; 0x03
    527c:	12 82       	std	Z+2, r1	; 0x02
    527e:	e0 91 00 00 	lds	r30, 0x0000
    5282:	f0 91 01 00 	lds	r31, 0x0001
    5286:	84 81       	ldd	r24, Z+4	; 0x04
    5288:	95 81       	ldd	r25, Z+5	; 0x05
    528a:	18 16       	cp	r1, r24
    528c:	19 06       	cpc	r1, r25
    528e:	3c f0       	brlt	.+14     	; 0x529e <TMRSRVC_process+0x8a>
    5290:	ff 24       	eor	r15, r15
    5292:	f3 94       	inc	r15
    5294:	05 c0       	rjmp	.+10     	; 0x52a0 <TMRSRVC_process+0x8c>
    5296:	10 92 19 07 	sts	0x0719, r1
    529a:	10 92 18 07 	sts	0x0718, r1
    529e:	ff 24       	eor	r15, r15
    52a0:	80 91 17 07 	lds	r24, 0x0717
    52a4:	81 50       	subi	r24, 0x01	; 1
    52a6:	80 93 17 07 	sts	0x0717, r24
    52aa:	80 91 17 07 	lds	r24, 0x0717
    52ae:	88 23       	and	r24, r24
    52b0:	11 f4       	brne	.+4      	; 0x52b6 <TMRSRVC_process+0xa2>
    52b2:	0e 94 75 29 	call	0x52ea	; 0x52ea <TMRSRVC_stop>
    52b6:	89 81       	ldd	r24, Y+1	; 0x01
    52b8:	82 ff       	sbrs	r24, 2
    52ba:	08 c0       	rjmp	.+16     	; 0x52cc <TMRSRVC_process+0xb8>
    52bc:	8a 81       	ldd	r24, Y+2	; 0x02
    52be:	9b 81       	ldd	r25, Y+3	; 0x03
    52c0:	9d 83       	std	Y+5, r25	; 0x05
    52c2:	8c 83       	std	Y+4, r24	; 0x04
    52c4:	c8 01       	movw	r24, r16
    52c6:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <TMRSRVC_insert>
    52ca:	08 c0       	rjmp	.+16     	; 0x52dc <TMRSRVC_process+0xc8>
    52cc:	c8 01       	movw	r24, r16
    52ce:	0e 94 7e 32 	call	0x64fc	; 0x64fc <free>
    52d2:	89 81       	ldd	r24, Y+1	; 0x01
    52d4:	8f 7e       	andi	r24, 0xEF	; 239
    52d6:	89 83       	std	Y+1, r24	; 0x01
    52d8:	01 c0       	rjmp	.+2      	; 0x52dc <TMRSRVC_process+0xc8>
    52da:	ff 24       	eor	r15, r15
    52dc:	8f 2d       	mov	r24, r15
    52de:	df 91       	pop	r29
    52e0:	cf 91       	pop	r28
    52e2:	1f 91       	pop	r17
    52e4:	0f 91       	pop	r16
    52e6:	ff 90       	pop	r15
    52e8:	08 95       	ret

000052ea <TMRSRVC_stop>:
    52ea:	10 92 5f 04 	sts	0x045F, r1
    52ee:	08 95       	ret

000052f0 <STEPPER_process_pwm>:
    52f0:	fc 01       	movw	r30, r24
    52f2:	80 91 ce 06 	lds	r24, 0x06CE
    52f6:	82 30       	cpi	r24, 0x02	; 2
    52f8:	69 f4       	brne	.+26     	; 0x5314 <STEPPER_process_pwm+0x24>
    52fa:	80 91 64 04 	lds	r24, 0x0464
    52fe:	91 e0       	ldi	r25, 0x01	; 1
    5300:	89 27       	eor	r24, r25
    5302:	80 93 64 04 	sts	0x0464, r24
    5306:	88 23       	and	r24, r24
    5308:	09 f0       	breq	.+2      	; 0x530c <STEPPER_process_pwm+0x1c>
    530a:	3e c0       	rjmp	.+124    	; 0x5388 <STEPPER_process_pwm+0x98>
    530c:	80 81       	ld	r24, Z
    530e:	83 7e       	andi	r24, 0xE3	; 227
    5310:	80 83       	st	Z, r24
    5312:	3a c0       	rjmp	.+116    	; 0x5388 <STEPPER_process_pwm+0x98>
    5314:	80 91 ad 06 	lds	r24, 0x06AD
    5318:	90 91 ae 06 	lds	r25, 0x06AE
    531c:	c3 97       	sbiw	r24, 0x33	; 51
    531e:	a4 f5       	brge	.+104    	; 0x5388 <STEPPER_process_pwm+0x98>
    5320:	66 23       	and	r22, r22
    5322:	d1 f0       	breq	.+52     	; 0x5358 <STEPPER_process_pwm+0x68>
    5324:	20 91 ad 06 	lds	r18, 0x06AD
    5328:	30 91 ae 06 	lds	r19, 0x06AE
    532c:	80 e6       	ldi	r24, 0x60	; 96
    532e:	90 e0       	ldi	r25, 0x00	; 0
    5330:	bc 01       	movw	r22, r24
    5332:	26 9f       	mul	r18, r22
    5334:	c0 01       	movw	r24, r0
    5336:	27 9f       	mul	r18, r23
    5338:	90 0d       	add	r25, r0
    533a:	36 9f       	mul	r19, r22
    533c:	90 0d       	add	r25, r0
    533e:	11 24       	eor	r1, r1
    5340:	88 0f       	add	r24, r24
    5342:	89 2f       	mov	r24, r25
    5344:	88 1f       	adc	r24, r24
    5346:	99 0b       	sbc	r25, r25
    5348:	90 93 c2 06 	sts	0x06C2, r25
    534c:	80 93 c1 06 	sts	0x06C1, r24
    5350:	81 e0       	ldi	r24, 0x01	; 1
    5352:	80 93 62 04 	sts	0x0462, r24
    5356:	18 c0       	rjmp	.+48     	; 0x5388 <STEPPER_process_pwm+0x98>
    5358:	80 91 62 04 	lds	r24, 0x0462
    535c:	88 23       	and	r24, r24
    535e:	a1 f0       	breq	.+40     	; 0x5388 <STEPPER_process_pwm+0x98>
    5360:	80 91 c1 06 	lds	r24, 0x06C1
    5364:	90 91 c2 06 	lds	r25, 0x06C2
    5368:	01 97       	sbiw	r24, 0x01	; 1
    536a:	90 93 c2 06 	sts	0x06C2, r25
    536e:	80 93 c1 06 	sts	0x06C1, r24
    5372:	80 91 c1 06 	lds	r24, 0x06C1
    5376:	90 91 c2 06 	lds	r25, 0x06C2
    537a:	89 2b       	or	r24, r25
    537c:	29 f4       	brne	.+10     	; 0x5388 <STEPPER_process_pwm+0x98>
    537e:	80 81       	ld	r24, Z
    5380:	83 7e       	andi	r24, 0xE3	; 227
    5382:	80 83       	st	Z, r24
    5384:	10 92 62 04 	sts	0x0462, r1
    5388:	80 91 cf 06 	lds	r24, 0x06CF
    538c:	82 30       	cpi	r24, 0x02	; 2
    538e:	69 f4       	brne	.+26     	; 0x53aa <STEPPER_process_pwm+0xba>
    5390:	80 91 63 04 	lds	r24, 0x0463
    5394:	91 e0       	ldi	r25, 0x01	; 1
    5396:	89 27       	eor	r24, r25
    5398:	80 93 63 04 	sts	0x0463, r24
    539c:	88 23       	and	r24, r24
    539e:	09 f0       	breq	.+2      	; 0x53a2 <STEPPER_process_pwm+0xb2>
    53a0:	3e c0       	rjmp	.+124    	; 0x541e <STEPPER_process_pwm+0x12e>
    53a2:	80 81       	ld	r24, Z
    53a4:	8f 71       	andi	r24, 0x1F	; 31
    53a6:	80 83       	st	Z, r24
    53a8:	08 95       	ret
    53aa:	80 91 af 06 	lds	r24, 0x06AF
    53ae:	90 91 b0 06 	lds	r25, 0x06B0
    53b2:	c3 97       	sbiw	r24, 0x33	; 51
    53b4:	a4 f5       	brge	.+104    	; 0x541e <STEPPER_process_pwm+0x12e>
    53b6:	44 23       	and	r20, r20
    53b8:	d1 f0       	breq	.+52     	; 0x53ee <STEPPER_process_pwm+0xfe>
    53ba:	20 91 af 06 	lds	r18, 0x06AF
    53be:	30 91 b0 06 	lds	r19, 0x06B0
    53c2:	80 e6       	ldi	r24, 0x60	; 96
    53c4:	90 e0       	ldi	r25, 0x00	; 0
    53c6:	ac 01       	movw	r20, r24
    53c8:	24 9f       	mul	r18, r20
    53ca:	c0 01       	movw	r24, r0
    53cc:	25 9f       	mul	r18, r21
    53ce:	90 0d       	add	r25, r0
    53d0:	34 9f       	mul	r19, r20
    53d2:	90 0d       	add	r25, r0
    53d4:	11 24       	eor	r1, r1
    53d6:	88 0f       	add	r24, r24
    53d8:	89 2f       	mov	r24, r25
    53da:	88 1f       	adc	r24, r24
    53dc:	99 0b       	sbc	r25, r25
    53de:	90 93 c4 06 	sts	0x06C4, r25
    53e2:	80 93 c3 06 	sts	0x06C3, r24
    53e6:	81 e0       	ldi	r24, 0x01	; 1
    53e8:	80 93 61 04 	sts	0x0461, r24
    53ec:	08 95       	ret
    53ee:	80 91 61 04 	lds	r24, 0x0461
    53f2:	88 23       	and	r24, r24
    53f4:	a1 f0       	breq	.+40     	; 0x541e <STEPPER_process_pwm+0x12e>
    53f6:	80 91 c3 06 	lds	r24, 0x06C3
    53fa:	90 91 c4 06 	lds	r25, 0x06C4
    53fe:	01 97       	sbiw	r24, 0x01	; 1
    5400:	90 93 c4 06 	sts	0x06C4, r25
    5404:	80 93 c3 06 	sts	0x06C3, r24
    5408:	80 91 c3 06 	lds	r24, 0x06C3
    540c:	90 91 c4 06 	lds	r25, 0x06C4
    5410:	89 2b       	or	r24, r25
    5412:	29 f4       	brne	.+10     	; 0x541e <STEPPER_process_pwm+0x12e>
    5414:	80 81       	ld	r24, Z
    5416:	8f 71       	andi	r24, 0x1F	; 31
    5418:	80 83       	st	Z, r24
    541a:	10 92 61 04 	sts	0x0461, r1
    541e:	08 95       	ret

00005420 <__subsf3>:
    5420:	50 58       	subi	r21, 0x80	; 128

00005422 <__addsf3>:
    5422:	bb 27       	eor	r27, r27
    5424:	aa 27       	eor	r26, r26
    5426:	0e d0       	rcall	.+28     	; 0x5444 <__addsf3x>
    5428:	75 c1       	rjmp	.+746    	; 0x5714 <__fp_round>
    542a:	66 d1       	rcall	.+716    	; 0x56f8 <__fp_pscA>
    542c:	30 f0       	brcs	.+12     	; 0x543a <__addsf3+0x18>
    542e:	6b d1       	rcall	.+726    	; 0x5706 <__fp_pscB>
    5430:	20 f0       	brcs	.+8      	; 0x543a <__addsf3+0x18>
    5432:	31 f4       	brne	.+12     	; 0x5440 <__addsf3+0x1e>
    5434:	9f 3f       	cpi	r25, 0xFF	; 255
    5436:	11 f4       	brne	.+4      	; 0x543c <__addsf3+0x1a>
    5438:	1e f4       	brtc	.+6      	; 0x5440 <__addsf3+0x1e>
    543a:	5b c1       	rjmp	.+694    	; 0x56f2 <__fp_nan>
    543c:	0e f4       	brtc	.+2      	; 0x5440 <__addsf3+0x1e>
    543e:	e0 95       	com	r30
    5440:	e7 fb       	bst	r30, 7
    5442:	51 c1       	rjmp	.+674    	; 0x56e6 <__fp_inf>

00005444 <__addsf3x>:
    5444:	e9 2f       	mov	r30, r25
    5446:	77 d1       	rcall	.+750    	; 0x5736 <__fp_split3>
    5448:	80 f3       	brcs	.-32     	; 0x542a <__addsf3+0x8>
    544a:	ba 17       	cp	r27, r26
    544c:	62 07       	cpc	r22, r18
    544e:	73 07       	cpc	r23, r19
    5450:	84 07       	cpc	r24, r20
    5452:	95 07       	cpc	r25, r21
    5454:	18 f0       	brcs	.+6      	; 0x545c <__addsf3x+0x18>
    5456:	71 f4       	brne	.+28     	; 0x5474 <__addsf3x+0x30>
    5458:	9e f5       	brtc	.+102    	; 0x54c0 <__addsf3x+0x7c>
    545a:	8f c1       	rjmp	.+798    	; 0x577a <__fp_zero>
    545c:	0e f4       	brtc	.+2      	; 0x5460 <__addsf3x+0x1c>
    545e:	e0 95       	com	r30
    5460:	0b 2e       	mov	r0, r27
    5462:	ba 2f       	mov	r27, r26
    5464:	a0 2d       	mov	r26, r0
    5466:	0b 01       	movw	r0, r22
    5468:	b9 01       	movw	r22, r18
    546a:	90 01       	movw	r18, r0
    546c:	0c 01       	movw	r0, r24
    546e:	ca 01       	movw	r24, r20
    5470:	a0 01       	movw	r20, r0
    5472:	11 24       	eor	r1, r1
    5474:	ff 27       	eor	r31, r31
    5476:	59 1b       	sub	r21, r25
    5478:	99 f0       	breq	.+38     	; 0x54a0 <__addsf3x+0x5c>
    547a:	59 3f       	cpi	r21, 0xF9	; 249
    547c:	50 f4       	brcc	.+20     	; 0x5492 <__addsf3x+0x4e>
    547e:	50 3e       	cpi	r21, 0xE0	; 224
    5480:	68 f1       	brcs	.+90     	; 0x54dc <__addsf3x+0x98>
    5482:	1a 16       	cp	r1, r26
    5484:	f0 40       	sbci	r31, 0x00	; 0
    5486:	a2 2f       	mov	r26, r18
    5488:	23 2f       	mov	r18, r19
    548a:	34 2f       	mov	r19, r20
    548c:	44 27       	eor	r20, r20
    548e:	58 5f       	subi	r21, 0xF8	; 248
    5490:	f3 cf       	rjmp	.-26     	; 0x5478 <__addsf3x+0x34>
    5492:	46 95       	lsr	r20
    5494:	37 95       	ror	r19
    5496:	27 95       	ror	r18
    5498:	a7 95       	ror	r26
    549a:	f0 40       	sbci	r31, 0x00	; 0
    549c:	53 95       	inc	r21
    549e:	c9 f7       	brne	.-14     	; 0x5492 <__addsf3x+0x4e>
    54a0:	7e f4       	brtc	.+30     	; 0x54c0 <__addsf3x+0x7c>
    54a2:	1f 16       	cp	r1, r31
    54a4:	ba 0b       	sbc	r27, r26
    54a6:	62 0b       	sbc	r22, r18
    54a8:	73 0b       	sbc	r23, r19
    54aa:	84 0b       	sbc	r24, r20
    54ac:	ba f0       	brmi	.+46     	; 0x54dc <__addsf3x+0x98>
    54ae:	91 50       	subi	r25, 0x01	; 1
    54b0:	a1 f0       	breq	.+40     	; 0x54da <__addsf3x+0x96>
    54b2:	ff 0f       	add	r31, r31
    54b4:	bb 1f       	adc	r27, r27
    54b6:	66 1f       	adc	r22, r22
    54b8:	77 1f       	adc	r23, r23
    54ba:	88 1f       	adc	r24, r24
    54bc:	c2 f7       	brpl	.-16     	; 0x54ae <__addsf3x+0x6a>
    54be:	0e c0       	rjmp	.+28     	; 0x54dc <__addsf3x+0x98>
    54c0:	ba 0f       	add	r27, r26
    54c2:	62 1f       	adc	r22, r18
    54c4:	73 1f       	adc	r23, r19
    54c6:	84 1f       	adc	r24, r20
    54c8:	48 f4       	brcc	.+18     	; 0x54dc <__addsf3x+0x98>
    54ca:	87 95       	ror	r24
    54cc:	77 95       	ror	r23
    54ce:	67 95       	ror	r22
    54d0:	b7 95       	ror	r27
    54d2:	f7 95       	ror	r31
    54d4:	9e 3f       	cpi	r25, 0xFE	; 254
    54d6:	08 f0       	brcs	.+2      	; 0x54da <__addsf3x+0x96>
    54d8:	b3 cf       	rjmp	.-154    	; 0x5440 <__addsf3+0x1e>
    54da:	93 95       	inc	r25
    54dc:	88 0f       	add	r24, r24
    54de:	08 f0       	brcs	.+2      	; 0x54e2 <__addsf3x+0x9e>
    54e0:	99 27       	eor	r25, r25
    54e2:	ee 0f       	add	r30, r30
    54e4:	97 95       	ror	r25
    54e6:	87 95       	ror	r24
    54e8:	08 95       	ret

000054ea <__cmpsf2>:
    54ea:	d9 d0       	rcall	.+434    	; 0x569e <__fp_cmp>
    54ec:	08 f4       	brcc	.+2      	; 0x54f0 <__cmpsf2+0x6>
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	08 95       	ret

000054f2 <__divsf3>:
    54f2:	0c d0       	rcall	.+24     	; 0x550c <__divsf3x>
    54f4:	0f c1       	rjmp	.+542    	; 0x5714 <__fp_round>
    54f6:	07 d1       	rcall	.+526    	; 0x5706 <__fp_pscB>
    54f8:	40 f0       	brcs	.+16     	; 0x550a <__divsf3+0x18>
    54fa:	fe d0       	rcall	.+508    	; 0x56f8 <__fp_pscA>
    54fc:	30 f0       	brcs	.+12     	; 0x550a <__divsf3+0x18>
    54fe:	21 f4       	brne	.+8      	; 0x5508 <__divsf3+0x16>
    5500:	5f 3f       	cpi	r21, 0xFF	; 255
    5502:	19 f0       	breq	.+6      	; 0x550a <__divsf3+0x18>
    5504:	f0 c0       	rjmp	.+480    	; 0x56e6 <__fp_inf>
    5506:	51 11       	cpse	r21, r1
    5508:	39 c1       	rjmp	.+626    	; 0x577c <__fp_szero>
    550a:	f3 c0       	rjmp	.+486    	; 0x56f2 <__fp_nan>

0000550c <__divsf3x>:
    550c:	14 d1       	rcall	.+552    	; 0x5736 <__fp_split3>
    550e:	98 f3       	brcs	.-26     	; 0x54f6 <__divsf3+0x4>

00005510 <__divsf3_pse>:
    5510:	99 23       	and	r25, r25
    5512:	c9 f3       	breq	.-14     	; 0x5506 <__divsf3+0x14>
    5514:	55 23       	and	r21, r21
    5516:	b1 f3       	breq	.-20     	; 0x5504 <__divsf3+0x12>
    5518:	95 1b       	sub	r25, r21
    551a:	55 0b       	sbc	r21, r21
    551c:	bb 27       	eor	r27, r27
    551e:	aa 27       	eor	r26, r26
    5520:	62 17       	cp	r22, r18
    5522:	73 07       	cpc	r23, r19
    5524:	84 07       	cpc	r24, r20
    5526:	38 f0       	brcs	.+14     	; 0x5536 <__divsf3_pse+0x26>
    5528:	9f 5f       	subi	r25, 0xFF	; 255
    552a:	5f 4f       	sbci	r21, 0xFF	; 255
    552c:	22 0f       	add	r18, r18
    552e:	33 1f       	adc	r19, r19
    5530:	44 1f       	adc	r20, r20
    5532:	aa 1f       	adc	r26, r26
    5534:	a9 f3       	breq	.-22     	; 0x5520 <__divsf3_pse+0x10>
    5536:	33 d0       	rcall	.+102    	; 0x559e <__divsf3_pse+0x8e>
    5538:	0e 2e       	mov	r0, r30
    553a:	3a f0       	brmi	.+14     	; 0x554a <__divsf3_pse+0x3a>
    553c:	e0 e8       	ldi	r30, 0x80	; 128
    553e:	30 d0       	rcall	.+96     	; 0x55a0 <__divsf3_pse+0x90>
    5540:	91 50       	subi	r25, 0x01	; 1
    5542:	50 40       	sbci	r21, 0x00	; 0
    5544:	e6 95       	lsr	r30
    5546:	00 1c       	adc	r0, r0
    5548:	ca f7       	brpl	.-14     	; 0x553c <__divsf3_pse+0x2c>
    554a:	29 d0       	rcall	.+82     	; 0x559e <__divsf3_pse+0x8e>
    554c:	fe 2f       	mov	r31, r30
    554e:	27 d0       	rcall	.+78     	; 0x559e <__divsf3_pse+0x8e>
    5550:	66 0f       	add	r22, r22
    5552:	77 1f       	adc	r23, r23
    5554:	88 1f       	adc	r24, r24
    5556:	bb 1f       	adc	r27, r27
    5558:	26 17       	cp	r18, r22
    555a:	37 07       	cpc	r19, r23
    555c:	48 07       	cpc	r20, r24
    555e:	ab 07       	cpc	r26, r27
    5560:	b0 e8       	ldi	r27, 0x80	; 128
    5562:	09 f0       	breq	.+2      	; 0x5566 <__divsf3_pse+0x56>
    5564:	bb 0b       	sbc	r27, r27
    5566:	80 2d       	mov	r24, r0
    5568:	bf 01       	movw	r22, r30
    556a:	ff 27       	eor	r31, r31
    556c:	93 58       	subi	r25, 0x83	; 131
    556e:	5f 4f       	sbci	r21, 0xFF	; 255
    5570:	2a f0       	brmi	.+10     	; 0x557c <__divsf3_pse+0x6c>
    5572:	9e 3f       	cpi	r25, 0xFE	; 254
    5574:	51 05       	cpc	r21, r1
    5576:	68 f0       	brcs	.+26     	; 0x5592 <__divsf3_pse+0x82>
    5578:	b6 c0       	rjmp	.+364    	; 0x56e6 <__fp_inf>
    557a:	00 c1       	rjmp	.+512    	; 0x577c <__fp_szero>
    557c:	5f 3f       	cpi	r21, 0xFF	; 255
    557e:	ec f3       	brlt	.-6      	; 0x557a <__divsf3_pse+0x6a>
    5580:	98 3e       	cpi	r25, 0xE8	; 232
    5582:	dc f3       	brlt	.-10     	; 0x557a <__divsf3_pse+0x6a>
    5584:	86 95       	lsr	r24
    5586:	77 95       	ror	r23
    5588:	67 95       	ror	r22
    558a:	b7 95       	ror	r27
    558c:	f7 95       	ror	r31
    558e:	9f 5f       	subi	r25, 0xFF	; 255
    5590:	c9 f7       	brne	.-14     	; 0x5584 <__divsf3_pse+0x74>
    5592:	88 0f       	add	r24, r24
    5594:	91 1d       	adc	r25, r1
    5596:	96 95       	lsr	r25
    5598:	87 95       	ror	r24
    559a:	97 f9       	bld	r25, 7
    559c:	08 95       	ret
    559e:	e1 e0       	ldi	r30, 0x01	; 1
    55a0:	66 0f       	add	r22, r22
    55a2:	77 1f       	adc	r23, r23
    55a4:	88 1f       	adc	r24, r24
    55a6:	bb 1f       	adc	r27, r27
    55a8:	62 17       	cp	r22, r18
    55aa:	73 07       	cpc	r23, r19
    55ac:	84 07       	cpc	r24, r20
    55ae:	ba 07       	cpc	r27, r26
    55b0:	20 f0       	brcs	.+8      	; 0x55ba <__divsf3_pse+0xaa>
    55b2:	62 1b       	sub	r22, r18
    55b4:	73 0b       	sbc	r23, r19
    55b6:	84 0b       	sbc	r24, r20
    55b8:	ba 0b       	sbc	r27, r26
    55ba:	ee 1f       	adc	r30, r30
    55bc:	88 f7       	brcc	.-30     	; 0x55a0 <__divsf3_pse+0x90>
    55be:	e0 95       	com	r30
    55c0:	08 95       	ret

000055c2 <__fixsfsi>:
    55c2:	04 d0       	rcall	.+8      	; 0x55cc <__fixunssfsi>
    55c4:	68 94       	set
    55c6:	b1 11       	cpse	r27, r1
    55c8:	d9 c0       	rjmp	.+434    	; 0x577c <__fp_szero>
    55ca:	08 95       	ret

000055cc <__fixunssfsi>:
    55cc:	bc d0       	rcall	.+376    	; 0x5746 <__fp_splitA>
    55ce:	88 f0       	brcs	.+34     	; 0x55f2 <__fixunssfsi+0x26>
    55d0:	9f 57       	subi	r25, 0x7F	; 127
    55d2:	90 f0       	brcs	.+36     	; 0x55f8 <__fixunssfsi+0x2c>
    55d4:	b9 2f       	mov	r27, r25
    55d6:	99 27       	eor	r25, r25
    55d8:	b7 51       	subi	r27, 0x17	; 23
    55da:	a0 f0       	brcs	.+40     	; 0x5604 <__fixunssfsi+0x38>
    55dc:	d1 f0       	breq	.+52     	; 0x5612 <__fixunssfsi+0x46>
    55de:	66 0f       	add	r22, r22
    55e0:	77 1f       	adc	r23, r23
    55e2:	88 1f       	adc	r24, r24
    55e4:	99 1f       	adc	r25, r25
    55e6:	1a f0       	brmi	.+6      	; 0x55ee <__fixunssfsi+0x22>
    55e8:	ba 95       	dec	r27
    55ea:	c9 f7       	brne	.-14     	; 0x55de <__fixunssfsi+0x12>
    55ec:	12 c0       	rjmp	.+36     	; 0x5612 <__fixunssfsi+0x46>
    55ee:	b1 30       	cpi	r27, 0x01	; 1
    55f0:	81 f0       	breq	.+32     	; 0x5612 <__fixunssfsi+0x46>
    55f2:	c3 d0       	rcall	.+390    	; 0x577a <__fp_zero>
    55f4:	b1 e0       	ldi	r27, 0x01	; 1
    55f6:	08 95       	ret
    55f8:	c0 c0       	rjmp	.+384    	; 0x577a <__fp_zero>
    55fa:	67 2f       	mov	r22, r23
    55fc:	78 2f       	mov	r23, r24
    55fe:	88 27       	eor	r24, r24
    5600:	b8 5f       	subi	r27, 0xF8	; 248
    5602:	39 f0       	breq	.+14     	; 0x5612 <__fixunssfsi+0x46>
    5604:	b9 3f       	cpi	r27, 0xF9	; 249
    5606:	cc f3       	brlt	.-14     	; 0x55fa <__fixunssfsi+0x2e>
    5608:	86 95       	lsr	r24
    560a:	77 95       	ror	r23
    560c:	67 95       	ror	r22
    560e:	b3 95       	inc	r27
    5610:	d9 f7       	brne	.-10     	; 0x5608 <__fixunssfsi+0x3c>
    5612:	3e f4       	brtc	.+14     	; 0x5622 <__fixunssfsi+0x56>
    5614:	90 95       	com	r25
    5616:	80 95       	com	r24
    5618:	70 95       	com	r23
    561a:	61 95       	neg	r22
    561c:	7f 4f       	sbci	r23, 0xFF	; 255
    561e:	8f 4f       	sbci	r24, 0xFF	; 255
    5620:	9f 4f       	sbci	r25, 0xFF	; 255
    5622:	08 95       	ret

00005624 <__floatunsisf>:
    5624:	e8 94       	clt
    5626:	09 c0       	rjmp	.+18     	; 0x563a <__floatsisf+0x12>

00005628 <__floatsisf>:
    5628:	97 fb       	bst	r25, 7
    562a:	3e f4       	brtc	.+14     	; 0x563a <__floatsisf+0x12>
    562c:	90 95       	com	r25
    562e:	80 95       	com	r24
    5630:	70 95       	com	r23
    5632:	61 95       	neg	r22
    5634:	7f 4f       	sbci	r23, 0xFF	; 255
    5636:	8f 4f       	sbci	r24, 0xFF	; 255
    5638:	9f 4f       	sbci	r25, 0xFF	; 255
    563a:	99 23       	and	r25, r25
    563c:	a9 f0       	breq	.+42     	; 0x5668 <__floatsisf+0x40>
    563e:	f9 2f       	mov	r31, r25
    5640:	96 e9       	ldi	r25, 0x96	; 150
    5642:	bb 27       	eor	r27, r27
    5644:	93 95       	inc	r25
    5646:	f6 95       	lsr	r31
    5648:	87 95       	ror	r24
    564a:	77 95       	ror	r23
    564c:	67 95       	ror	r22
    564e:	b7 95       	ror	r27
    5650:	f1 11       	cpse	r31, r1
    5652:	f8 cf       	rjmp	.-16     	; 0x5644 <__floatsisf+0x1c>
    5654:	fa f4       	brpl	.+62     	; 0x5694 <__floatsisf+0x6c>
    5656:	bb 0f       	add	r27, r27
    5658:	11 f4       	brne	.+4      	; 0x565e <__floatsisf+0x36>
    565a:	60 ff       	sbrs	r22, 0
    565c:	1b c0       	rjmp	.+54     	; 0x5694 <__floatsisf+0x6c>
    565e:	6f 5f       	subi	r22, 0xFF	; 255
    5660:	7f 4f       	sbci	r23, 0xFF	; 255
    5662:	8f 4f       	sbci	r24, 0xFF	; 255
    5664:	9f 4f       	sbci	r25, 0xFF	; 255
    5666:	16 c0       	rjmp	.+44     	; 0x5694 <__floatsisf+0x6c>
    5668:	88 23       	and	r24, r24
    566a:	11 f0       	breq	.+4      	; 0x5670 <__floatsisf+0x48>
    566c:	96 e9       	ldi	r25, 0x96	; 150
    566e:	11 c0       	rjmp	.+34     	; 0x5692 <__floatsisf+0x6a>
    5670:	77 23       	and	r23, r23
    5672:	21 f0       	breq	.+8      	; 0x567c <__floatsisf+0x54>
    5674:	9e e8       	ldi	r25, 0x8E	; 142
    5676:	87 2f       	mov	r24, r23
    5678:	76 2f       	mov	r23, r22
    567a:	05 c0       	rjmp	.+10     	; 0x5686 <__floatsisf+0x5e>
    567c:	66 23       	and	r22, r22
    567e:	71 f0       	breq	.+28     	; 0x569c <__floatsisf+0x74>
    5680:	96 e8       	ldi	r25, 0x86	; 134
    5682:	86 2f       	mov	r24, r22
    5684:	70 e0       	ldi	r23, 0x00	; 0
    5686:	60 e0       	ldi	r22, 0x00	; 0
    5688:	2a f0       	brmi	.+10     	; 0x5694 <__floatsisf+0x6c>
    568a:	9a 95       	dec	r25
    568c:	66 0f       	add	r22, r22
    568e:	77 1f       	adc	r23, r23
    5690:	88 1f       	adc	r24, r24
    5692:	da f7       	brpl	.-10     	; 0x568a <__floatsisf+0x62>
    5694:	88 0f       	add	r24, r24
    5696:	96 95       	lsr	r25
    5698:	87 95       	ror	r24
    569a:	97 f9       	bld	r25, 7
    569c:	08 95       	ret

0000569e <__fp_cmp>:
    569e:	99 0f       	add	r25, r25
    56a0:	00 08       	sbc	r0, r0
    56a2:	55 0f       	add	r21, r21
    56a4:	aa 0b       	sbc	r26, r26
    56a6:	e0 e8       	ldi	r30, 0x80	; 128
    56a8:	fe ef       	ldi	r31, 0xFE	; 254
    56aa:	16 16       	cp	r1, r22
    56ac:	17 06       	cpc	r1, r23
    56ae:	e8 07       	cpc	r30, r24
    56b0:	f9 07       	cpc	r31, r25
    56b2:	c0 f0       	brcs	.+48     	; 0x56e4 <__fp_cmp+0x46>
    56b4:	12 16       	cp	r1, r18
    56b6:	13 06       	cpc	r1, r19
    56b8:	e4 07       	cpc	r30, r20
    56ba:	f5 07       	cpc	r31, r21
    56bc:	98 f0       	brcs	.+38     	; 0x56e4 <__fp_cmp+0x46>
    56be:	62 1b       	sub	r22, r18
    56c0:	73 0b       	sbc	r23, r19
    56c2:	84 0b       	sbc	r24, r20
    56c4:	95 0b       	sbc	r25, r21
    56c6:	39 f4       	brne	.+14     	; 0x56d6 <__fp_cmp+0x38>
    56c8:	0a 26       	eor	r0, r26
    56ca:	61 f0       	breq	.+24     	; 0x56e4 <__fp_cmp+0x46>
    56cc:	23 2b       	or	r18, r19
    56ce:	24 2b       	or	r18, r20
    56d0:	25 2b       	or	r18, r21
    56d2:	21 f4       	brne	.+8      	; 0x56dc <__fp_cmp+0x3e>
    56d4:	08 95       	ret
    56d6:	0a 26       	eor	r0, r26
    56d8:	09 f4       	brne	.+2      	; 0x56dc <__fp_cmp+0x3e>
    56da:	a1 40       	sbci	r26, 0x01	; 1
    56dc:	a6 95       	lsr	r26
    56de:	8f ef       	ldi	r24, 0xFF	; 255
    56e0:	81 1d       	adc	r24, r1
    56e2:	81 1d       	adc	r24, r1
    56e4:	08 95       	ret

000056e6 <__fp_inf>:
    56e6:	97 f9       	bld	r25, 7
    56e8:	9f 67       	ori	r25, 0x7F	; 127
    56ea:	80 e8       	ldi	r24, 0x80	; 128
    56ec:	70 e0       	ldi	r23, 0x00	; 0
    56ee:	60 e0       	ldi	r22, 0x00	; 0
    56f0:	08 95       	ret

000056f2 <__fp_nan>:
    56f2:	9f ef       	ldi	r25, 0xFF	; 255
    56f4:	80 ec       	ldi	r24, 0xC0	; 192
    56f6:	08 95       	ret

000056f8 <__fp_pscA>:
    56f8:	00 24       	eor	r0, r0
    56fa:	0a 94       	dec	r0
    56fc:	16 16       	cp	r1, r22
    56fe:	17 06       	cpc	r1, r23
    5700:	18 06       	cpc	r1, r24
    5702:	09 06       	cpc	r0, r25
    5704:	08 95       	ret

00005706 <__fp_pscB>:
    5706:	00 24       	eor	r0, r0
    5708:	0a 94       	dec	r0
    570a:	12 16       	cp	r1, r18
    570c:	13 06       	cpc	r1, r19
    570e:	14 06       	cpc	r1, r20
    5710:	05 06       	cpc	r0, r21
    5712:	08 95       	ret

00005714 <__fp_round>:
    5714:	09 2e       	mov	r0, r25
    5716:	03 94       	inc	r0
    5718:	00 0c       	add	r0, r0
    571a:	11 f4       	brne	.+4      	; 0x5720 <__fp_round+0xc>
    571c:	88 23       	and	r24, r24
    571e:	52 f0       	brmi	.+20     	; 0x5734 <__fp_round+0x20>
    5720:	bb 0f       	add	r27, r27
    5722:	40 f4       	brcc	.+16     	; 0x5734 <__fp_round+0x20>
    5724:	bf 2b       	or	r27, r31
    5726:	11 f4       	brne	.+4      	; 0x572c <__fp_round+0x18>
    5728:	60 ff       	sbrs	r22, 0
    572a:	04 c0       	rjmp	.+8      	; 0x5734 <__fp_round+0x20>
    572c:	6f 5f       	subi	r22, 0xFF	; 255
    572e:	7f 4f       	sbci	r23, 0xFF	; 255
    5730:	8f 4f       	sbci	r24, 0xFF	; 255
    5732:	9f 4f       	sbci	r25, 0xFF	; 255
    5734:	08 95       	ret

00005736 <__fp_split3>:
    5736:	57 fd       	sbrc	r21, 7
    5738:	90 58       	subi	r25, 0x80	; 128
    573a:	44 0f       	add	r20, r20
    573c:	55 1f       	adc	r21, r21
    573e:	59 f0       	breq	.+22     	; 0x5756 <__fp_splitA+0x10>
    5740:	5f 3f       	cpi	r21, 0xFF	; 255
    5742:	71 f0       	breq	.+28     	; 0x5760 <__fp_splitA+0x1a>
    5744:	47 95       	ror	r20

00005746 <__fp_splitA>:
    5746:	88 0f       	add	r24, r24
    5748:	97 fb       	bst	r25, 7
    574a:	99 1f       	adc	r25, r25
    574c:	61 f0       	breq	.+24     	; 0x5766 <__fp_splitA+0x20>
    574e:	9f 3f       	cpi	r25, 0xFF	; 255
    5750:	79 f0       	breq	.+30     	; 0x5770 <__fp_splitA+0x2a>
    5752:	87 95       	ror	r24
    5754:	08 95       	ret
    5756:	12 16       	cp	r1, r18
    5758:	13 06       	cpc	r1, r19
    575a:	14 06       	cpc	r1, r20
    575c:	55 1f       	adc	r21, r21
    575e:	f2 cf       	rjmp	.-28     	; 0x5744 <__fp_split3+0xe>
    5760:	46 95       	lsr	r20
    5762:	f1 df       	rcall	.-30     	; 0x5746 <__fp_splitA>
    5764:	08 c0       	rjmp	.+16     	; 0x5776 <__fp_splitA+0x30>
    5766:	16 16       	cp	r1, r22
    5768:	17 06       	cpc	r1, r23
    576a:	18 06       	cpc	r1, r24
    576c:	99 1f       	adc	r25, r25
    576e:	f1 cf       	rjmp	.-30     	; 0x5752 <__fp_splitA+0xc>
    5770:	86 95       	lsr	r24
    5772:	71 05       	cpc	r23, r1
    5774:	61 05       	cpc	r22, r1
    5776:	08 94       	sec
    5778:	08 95       	ret

0000577a <__fp_zero>:
    577a:	e8 94       	clt

0000577c <__fp_szero>:
    577c:	bb 27       	eor	r27, r27
    577e:	66 27       	eor	r22, r22
    5780:	77 27       	eor	r23, r23
    5782:	cb 01       	movw	r24, r22
    5784:	97 f9       	bld	r25, 7
    5786:	08 95       	ret

00005788 <__gesf2>:
    5788:	8a df       	rcall	.-236    	; 0x569e <__fp_cmp>
    578a:	08 f4       	brcc	.+2      	; 0x578e <__gesf2+0x6>
    578c:	8f ef       	ldi	r24, 0xFF	; 255
    578e:	08 95       	ret

00005790 <lrint>:
    5790:	da df       	rcall	.-76     	; 0x5746 <__fp_splitA>
    5792:	a8 f1       	brcs	.+106    	; 0x57fe <lrint+0x6e>
    5794:	9e 57       	subi	r25, 0x7E	; 126
    5796:	a8 f1       	brcs	.+106    	; 0x5802 <lrint+0x72>
    5798:	98 51       	subi	r25, 0x18	; 24
    579a:	60 f0       	brcs	.+24     	; 0x57b4 <lrint+0x24>
    579c:	39 f1       	breq	.+78     	; 0x57ec <lrint+0x5c>
    579e:	98 30       	cpi	r25, 0x08	; 8
    57a0:	70 f5       	brcc	.+92     	; 0x57fe <lrint+0x6e>
    57a2:	09 2e       	mov	r0, r25
    57a4:	99 27       	eor	r25, r25
    57a6:	66 0f       	add	r22, r22
    57a8:	77 1f       	adc	r23, r23
    57aa:	88 1f       	adc	r24, r24
    57ac:	99 1f       	adc	r25, r25
    57ae:	0a 94       	dec	r0
    57b0:	d1 f7       	brne	.-12     	; 0x57a6 <lrint+0x16>
    57b2:	1c c0       	rjmp	.+56     	; 0x57ec <lrint+0x5c>
    57b4:	bb 27       	eor	r27, r27
    57b6:	99 3f       	cpi	r25, 0xF9	; 249
    57b8:	4c f4       	brge	.+18     	; 0x57cc <lrint+0x3c>
    57ba:	b1 11       	cpse	r27, r1
    57bc:	b1 e0       	ldi	r27, 0x01	; 1
    57be:	b6 2b       	or	r27, r22
    57c0:	67 2f       	mov	r22, r23
    57c2:	78 2f       	mov	r23, r24
    57c4:	88 27       	eor	r24, r24
    57c6:	98 5f       	subi	r25, 0xF8	; 248
    57c8:	b1 f7       	brne	.-20     	; 0x57b6 <lrint+0x26>
    57ca:	08 c0       	rjmp	.+16     	; 0x57dc <lrint+0x4c>
    57cc:	86 95       	lsr	r24
    57ce:	77 95       	ror	r23
    57d0:	67 95       	ror	r22
    57d2:	b7 95       	ror	r27
    57d4:	08 f4       	brcc	.+2      	; 0x57d8 <lrint+0x48>
    57d6:	b1 60       	ori	r27, 0x01	; 1
    57d8:	93 95       	inc	r25
    57da:	c1 f7       	brne	.-16     	; 0x57cc <lrint+0x3c>
    57dc:	bb 0f       	add	r27, r27
    57de:	30 f4       	brcc	.+12     	; 0x57ec <lrint+0x5c>
    57e0:	11 f4       	brne	.+4      	; 0x57e6 <lrint+0x56>
    57e2:	60 ff       	sbrs	r22, 0
    57e4:	03 c0       	rjmp	.+6      	; 0x57ec <lrint+0x5c>
    57e6:	6f 5f       	subi	r22, 0xFF	; 255
    57e8:	7f 4f       	sbci	r23, 0xFF	; 255
    57ea:	8f 4f       	sbci	r24, 0xFF	; 255
    57ec:	3e f4       	brtc	.+14     	; 0x57fc <lrint+0x6c>
    57ee:	90 95       	com	r25
    57f0:	80 95       	com	r24
    57f2:	70 95       	com	r23
    57f4:	61 95       	neg	r22
    57f6:	7f 4f       	sbci	r23, 0xFF	; 255
    57f8:	8f 4f       	sbci	r24, 0xFF	; 255
    57fa:	9f 4f       	sbci	r25, 0xFF	; 255
    57fc:	08 95       	ret
    57fe:	68 94       	set
    5800:	bd cf       	rjmp	.-134    	; 0x577c <__fp_szero>
    5802:	bb cf       	rjmp	.-138    	; 0x577a <__fp_zero>

00005804 <__mulsf3>:
    5804:	0b d0       	rcall	.+22     	; 0x581c <__mulsf3x>
    5806:	86 cf       	rjmp	.-244    	; 0x5714 <__fp_round>
    5808:	77 df       	rcall	.-274    	; 0x56f8 <__fp_pscA>
    580a:	28 f0       	brcs	.+10     	; 0x5816 <__mulsf3+0x12>
    580c:	7c df       	rcall	.-264    	; 0x5706 <__fp_pscB>
    580e:	18 f0       	brcs	.+6      	; 0x5816 <__mulsf3+0x12>
    5810:	95 23       	and	r25, r21
    5812:	09 f0       	breq	.+2      	; 0x5816 <__mulsf3+0x12>
    5814:	68 cf       	rjmp	.-304    	; 0x56e6 <__fp_inf>
    5816:	6d cf       	rjmp	.-294    	; 0x56f2 <__fp_nan>
    5818:	11 24       	eor	r1, r1
    581a:	b0 cf       	rjmp	.-160    	; 0x577c <__fp_szero>

0000581c <__mulsf3x>:
    581c:	8c df       	rcall	.-232    	; 0x5736 <__fp_split3>
    581e:	a0 f3       	brcs	.-24     	; 0x5808 <__mulsf3+0x4>

00005820 <__mulsf3_pse>:
    5820:	95 9f       	mul	r25, r21
    5822:	d1 f3       	breq	.-12     	; 0x5818 <__mulsf3+0x14>
    5824:	95 0f       	add	r25, r21
    5826:	50 e0       	ldi	r21, 0x00	; 0
    5828:	55 1f       	adc	r21, r21
    582a:	62 9f       	mul	r22, r18
    582c:	f0 01       	movw	r30, r0
    582e:	72 9f       	mul	r23, r18
    5830:	bb 27       	eor	r27, r27
    5832:	f0 0d       	add	r31, r0
    5834:	b1 1d       	adc	r27, r1
    5836:	63 9f       	mul	r22, r19
    5838:	aa 27       	eor	r26, r26
    583a:	f0 0d       	add	r31, r0
    583c:	b1 1d       	adc	r27, r1
    583e:	aa 1f       	adc	r26, r26
    5840:	64 9f       	mul	r22, r20
    5842:	66 27       	eor	r22, r22
    5844:	b0 0d       	add	r27, r0
    5846:	a1 1d       	adc	r26, r1
    5848:	66 1f       	adc	r22, r22
    584a:	82 9f       	mul	r24, r18
    584c:	22 27       	eor	r18, r18
    584e:	b0 0d       	add	r27, r0
    5850:	a1 1d       	adc	r26, r1
    5852:	62 1f       	adc	r22, r18
    5854:	73 9f       	mul	r23, r19
    5856:	b0 0d       	add	r27, r0
    5858:	a1 1d       	adc	r26, r1
    585a:	62 1f       	adc	r22, r18
    585c:	83 9f       	mul	r24, r19
    585e:	a0 0d       	add	r26, r0
    5860:	61 1d       	adc	r22, r1
    5862:	22 1f       	adc	r18, r18
    5864:	74 9f       	mul	r23, r20
    5866:	33 27       	eor	r19, r19
    5868:	a0 0d       	add	r26, r0
    586a:	61 1d       	adc	r22, r1
    586c:	23 1f       	adc	r18, r19
    586e:	84 9f       	mul	r24, r20
    5870:	60 0d       	add	r22, r0
    5872:	21 1d       	adc	r18, r1
    5874:	82 2f       	mov	r24, r18
    5876:	76 2f       	mov	r23, r22
    5878:	6a 2f       	mov	r22, r26
    587a:	11 24       	eor	r1, r1
    587c:	9f 57       	subi	r25, 0x7F	; 127
    587e:	50 40       	sbci	r21, 0x00	; 0
    5880:	8a f0       	brmi	.+34     	; 0x58a4 <__mulsf3_pse+0x84>
    5882:	e1 f0       	breq	.+56     	; 0x58bc <__mulsf3_pse+0x9c>
    5884:	88 23       	and	r24, r24
    5886:	4a f0       	brmi	.+18     	; 0x589a <__mulsf3_pse+0x7a>
    5888:	ee 0f       	add	r30, r30
    588a:	ff 1f       	adc	r31, r31
    588c:	bb 1f       	adc	r27, r27
    588e:	66 1f       	adc	r22, r22
    5890:	77 1f       	adc	r23, r23
    5892:	88 1f       	adc	r24, r24
    5894:	91 50       	subi	r25, 0x01	; 1
    5896:	50 40       	sbci	r21, 0x00	; 0
    5898:	a9 f7       	brne	.-22     	; 0x5884 <__mulsf3_pse+0x64>
    589a:	9e 3f       	cpi	r25, 0xFE	; 254
    589c:	51 05       	cpc	r21, r1
    589e:	70 f0       	brcs	.+28     	; 0x58bc <__mulsf3_pse+0x9c>
    58a0:	22 cf       	rjmp	.-444    	; 0x56e6 <__fp_inf>
    58a2:	6c cf       	rjmp	.-296    	; 0x577c <__fp_szero>
    58a4:	5f 3f       	cpi	r21, 0xFF	; 255
    58a6:	ec f3       	brlt	.-6      	; 0x58a2 <__mulsf3_pse+0x82>
    58a8:	98 3e       	cpi	r25, 0xE8	; 232
    58aa:	dc f3       	brlt	.-10     	; 0x58a2 <__mulsf3_pse+0x82>
    58ac:	86 95       	lsr	r24
    58ae:	77 95       	ror	r23
    58b0:	67 95       	ror	r22
    58b2:	b7 95       	ror	r27
    58b4:	f7 95       	ror	r31
    58b6:	e7 95       	ror	r30
    58b8:	9f 5f       	subi	r25, 0xFF	; 255
    58ba:	c1 f7       	brne	.-16     	; 0x58ac <__mulsf3_pse+0x8c>
    58bc:	fe 2b       	or	r31, r30
    58be:	88 0f       	add	r24, r24
    58c0:	91 1d       	adc	r25, r1
    58c2:	96 95       	lsr	r25
    58c4:	87 95       	ror	r24
    58c6:	97 f9       	bld	r25, 7
    58c8:	08 95       	ret

000058ca <pow>:
    58ca:	fa 01       	movw	r30, r20
    58cc:	ee 0f       	add	r30, r30
    58ce:	ff 1f       	adc	r31, r31
    58d0:	30 96       	adiw	r30, 0x00	; 0
    58d2:	21 05       	cpc	r18, r1
    58d4:	31 05       	cpc	r19, r1
    58d6:	99 f1       	breq	.+102    	; 0x593e <pow+0x74>
    58d8:	61 15       	cp	r22, r1
    58da:	71 05       	cpc	r23, r1
    58dc:	61 f4       	brne	.+24     	; 0x58f6 <pow+0x2c>
    58de:	80 38       	cpi	r24, 0x80	; 128
    58e0:	bf e3       	ldi	r27, 0x3F	; 63
    58e2:	9b 07       	cpc	r25, r27
    58e4:	49 f1       	breq	.+82     	; 0x5938 <pow+0x6e>
    58e6:	68 94       	set
    58e8:	90 38       	cpi	r25, 0x80	; 128
    58ea:	81 05       	cpc	r24, r1
    58ec:	61 f0       	breq	.+24     	; 0x5906 <pow+0x3c>
    58ee:	80 38       	cpi	r24, 0x80	; 128
    58f0:	bf ef       	ldi	r27, 0xFF	; 255
    58f2:	9b 07       	cpc	r25, r27
    58f4:	41 f0       	breq	.+16     	; 0x5906 <pow+0x3c>
    58f6:	99 23       	and	r25, r25
    58f8:	42 f5       	brpl	.+80     	; 0x594a <pow+0x80>
    58fa:	ff 3f       	cpi	r31, 0xFF	; 255
    58fc:	e1 05       	cpc	r30, r1
    58fe:	31 05       	cpc	r19, r1
    5900:	21 05       	cpc	r18, r1
    5902:	11 f1       	breq	.+68     	; 0x5948 <pow+0x7e>
    5904:	e8 94       	clt
    5906:	08 94       	sec
    5908:	e7 95       	ror	r30
    590a:	d9 01       	movw	r26, r18
    590c:	aa 23       	and	r26, r26
    590e:	29 f4       	brne	.+10     	; 0x591a <pow+0x50>
    5910:	ab 2f       	mov	r26, r27
    5912:	be 2f       	mov	r27, r30
    5914:	f8 5f       	subi	r31, 0xF8	; 248
    5916:	d0 f3       	brcs	.-12     	; 0x590c <pow+0x42>
    5918:	10 c0       	rjmp	.+32     	; 0x593a <pow+0x70>
    591a:	ff 5f       	subi	r31, 0xFF	; 255
    591c:	70 f4       	brcc	.+28     	; 0x593a <pow+0x70>
    591e:	a6 95       	lsr	r26
    5920:	e0 f7       	brcc	.-8      	; 0x591a <pow+0x50>
    5922:	f7 39       	cpi	r31, 0x97	; 151
    5924:	50 f0       	brcs	.+20     	; 0x593a <pow+0x70>
    5926:	19 f0       	breq	.+6      	; 0x592e <pow+0x64>
    5928:	ff 3a       	cpi	r31, 0xAF	; 175
    592a:	38 f4       	brcc	.+14     	; 0x593a <pow+0x70>
    592c:	9f 77       	andi	r25, 0x7F	; 127
    592e:	9f 93       	push	r25
    5930:	0c d0       	rcall	.+24     	; 0x594a <pow+0x80>
    5932:	0f 90       	pop	r0
    5934:	07 fc       	sbrc	r0, 7
    5936:	90 58       	subi	r25, 0x80	; 128
    5938:	08 95       	ret
    593a:	3e f0       	brts	.+14     	; 0x594a <pow+0x80>
    593c:	da ce       	rjmp	.-588    	; 0x56f2 <__fp_nan>
    593e:	60 e0       	ldi	r22, 0x00	; 0
    5940:	70 e0       	ldi	r23, 0x00	; 0
    5942:	80 e8       	ldi	r24, 0x80	; 128
    5944:	9f e3       	ldi	r25, 0x3F	; 63
    5946:	08 95       	ret
    5948:	4f e7       	ldi	r20, 0x7F	; 127
    594a:	9f 77       	andi	r25, 0x7F	; 127
    594c:	5f 93       	push	r21
    594e:	4f 93       	push	r20
    5950:	3f 93       	push	r19
    5952:	2f 93       	push	r18
    5954:	9e d0       	rcall	.+316    	; 0x5a92 <log>
    5956:	2f 91       	pop	r18
    5958:	3f 91       	pop	r19
    595a:	4f 91       	pop	r20
    595c:	5f 91       	pop	r21
    595e:	52 df       	rcall	.-348    	; 0x5804 <__mulsf3>
    5960:	05 c0       	rjmp	.+10     	; 0x596c <exp>
    5962:	19 f4       	brne	.+6      	; 0x596a <pow+0xa0>
    5964:	0e f0       	brts	.+2      	; 0x5968 <pow+0x9e>
    5966:	bf ce       	rjmp	.-642    	; 0x56e6 <__fp_inf>
    5968:	08 cf       	rjmp	.-496    	; 0x577a <__fp_zero>
    596a:	c3 ce       	rjmp	.-634    	; 0x56f2 <__fp_nan>

0000596c <exp>:
    596c:	ec de       	rcall	.-552    	; 0x5746 <__fp_splitA>
    596e:	c8 f3       	brcs	.-14     	; 0x5962 <pow+0x98>
    5970:	96 38       	cpi	r25, 0x86	; 134
    5972:	c0 f7       	brcc	.-16     	; 0x5964 <pow+0x9a>
    5974:	07 f8       	bld	r0, 7
    5976:	0f 92       	push	r0
    5978:	e8 94       	clt
    597a:	2b e3       	ldi	r18, 0x3B	; 59
    597c:	3a ea       	ldi	r19, 0xAA	; 170
    597e:	48 eb       	ldi	r20, 0xB8	; 184
    5980:	5f e7       	ldi	r21, 0x7F	; 127
    5982:	4e df       	rcall	.-356    	; 0x5820 <__mulsf3_pse>
    5984:	0f 92       	push	r0
    5986:	0f 92       	push	r0
    5988:	0f 92       	push	r0
    598a:	4d b7       	in	r20, 0x3d	; 61
    598c:	5e b7       	in	r21, 0x3e	; 62
    598e:	0f 92       	push	r0
    5990:	c0 d0       	rcall	.+384    	; 0x5b12 <modf>
    5992:	e8 ec       	ldi	r30, 0xC8	; 200
    5994:	f0 e0       	ldi	r31, 0x00	; 0
    5996:	16 d0       	rcall	.+44     	; 0x59c4 <__fp_powser>
    5998:	4f 91       	pop	r20
    599a:	5f 91       	pop	r21
    599c:	ef 91       	pop	r30
    599e:	ff 91       	pop	r31
    59a0:	e5 95       	asr	r30
    59a2:	ee 1f       	adc	r30, r30
    59a4:	ff 1f       	adc	r31, r31
    59a6:	49 f0       	breq	.+18     	; 0x59ba <exp+0x4e>
    59a8:	fe 57       	subi	r31, 0x7E	; 126
    59aa:	e0 68       	ori	r30, 0x80	; 128
    59ac:	44 27       	eor	r20, r20
    59ae:	ee 0f       	add	r30, r30
    59b0:	44 1f       	adc	r20, r20
    59b2:	fa 95       	dec	r31
    59b4:	e1 f7       	brne	.-8      	; 0x59ae <exp+0x42>
    59b6:	41 95       	neg	r20
    59b8:	55 0b       	sbc	r21, r21
    59ba:	32 d0       	rcall	.+100    	; 0x5a20 <ldexp>
    59bc:	0f 90       	pop	r0
    59be:	07 fe       	sbrs	r0, 7
    59c0:	26 c0       	rjmp	.+76     	; 0x5a0e <inverse>
    59c2:	08 95       	ret

000059c4 <__fp_powser>:
    59c4:	df 93       	push	r29
    59c6:	cf 93       	push	r28
    59c8:	1f 93       	push	r17
    59ca:	0f 93       	push	r16
    59cc:	ff 92       	push	r15
    59ce:	ef 92       	push	r14
    59d0:	df 92       	push	r13
    59d2:	7b 01       	movw	r14, r22
    59d4:	8c 01       	movw	r16, r24
    59d6:	68 94       	set
    59d8:	05 c0       	rjmp	.+10     	; 0x59e4 <__fp_powser+0x20>
    59da:	da 2e       	mov	r13, r26
    59dc:	ef 01       	movw	r28, r30
    59de:	1e df       	rcall	.-452    	; 0x581c <__mulsf3x>
    59e0:	fe 01       	movw	r30, r28
    59e2:	e8 94       	clt
    59e4:	a5 91       	lpm	r26, Z+
    59e6:	25 91       	lpm	r18, Z+
    59e8:	35 91       	lpm	r19, Z+
    59ea:	45 91       	lpm	r20, Z+
    59ec:	55 91       	lpm	r21, Z+
    59ee:	ae f3       	brts	.-22     	; 0x59da <__fp_powser+0x16>
    59f0:	ef 01       	movw	r28, r30
    59f2:	28 dd       	rcall	.-1456   	; 0x5444 <__addsf3x>
    59f4:	fe 01       	movw	r30, r28
    59f6:	97 01       	movw	r18, r14
    59f8:	a8 01       	movw	r20, r16
    59fa:	da 94       	dec	r13
    59fc:	79 f7       	brne	.-34     	; 0x59dc <__fp_powser+0x18>
    59fe:	df 90       	pop	r13
    5a00:	ef 90       	pop	r14
    5a02:	ff 90       	pop	r15
    5a04:	0f 91       	pop	r16
    5a06:	1f 91       	pop	r17
    5a08:	cf 91       	pop	r28
    5a0a:	df 91       	pop	r29
    5a0c:	08 95       	ret

00005a0e <inverse>:
    5a0e:	9b 01       	movw	r18, r22
    5a10:	ac 01       	movw	r20, r24
    5a12:	60 e0       	ldi	r22, 0x00	; 0
    5a14:	70 e0       	ldi	r23, 0x00	; 0
    5a16:	80 e8       	ldi	r24, 0x80	; 128
    5a18:	9f e3       	ldi	r25, 0x3F	; 63
    5a1a:	6b cd       	rjmp	.-1322   	; 0x54f2 <__divsf3>
    5a1c:	64 ce       	rjmp	.-824    	; 0x56e6 <__fp_inf>
    5a1e:	ac c0       	rjmp	.+344    	; 0x5b78 <__fp_mpack>

00005a20 <ldexp>:
    5a20:	92 de       	rcall	.-732    	; 0x5746 <__fp_splitA>
    5a22:	e8 f3       	brcs	.-6      	; 0x5a1e <inverse+0x10>
    5a24:	99 23       	and	r25, r25
    5a26:	d9 f3       	breq	.-10     	; 0x5a1e <inverse+0x10>
    5a28:	94 0f       	add	r25, r20
    5a2a:	51 1d       	adc	r21, r1
    5a2c:	bb f3       	brvs	.-18     	; 0x5a1c <inverse+0xe>
    5a2e:	91 50       	subi	r25, 0x01	; 1
    5a30:	50 40       	sbci	r21, 0x00	; 0
    5a32:	94 f0       	brlt	.+36     	; 0x5a58 <ldexp+0x38>
    5a34:	59 f0       	breq	.+22     	; 0x5a4c <ldexp+0x2c>
    5a36:	88 23       	and	r24, r24
    5a38:	32 f0       	brmi	.+12     	; 0x5a46 <ldexp+0x26>
    5a3a:	66 0f       	add	r22, r22
    5a3c:	77 1f       	adc	r23, r23
    5a3e:	88 1f       	adc	r24, r24
    5a40:	91 50       	subi	r25, 0x01	; 1
    5a42:	50 40       	sbci	r21, 0x00	; 0
    5a44:	c1 f7       	brne	.-16     	; 0x5a36 <ldexp+0x16>
    5a46:	9e 3f       	cpi	r25, 0xFE	; 254
    5a48:	51 05       	cpc	r21, r1
    5a4a:	44 f7       	brge	.-48     	; 0x5a1c <inverse+0xe>
    5a4c:	88 0f       	add	r24, r24
    5a4e:	91 1d       	adc	r25, r1
    5a50:	96 95       	lsr	r25
    5a52:	87 95       	ror	r24
    5a54:	97 f9       	bld	r25, 7
    5a56:	08 95       	ret
    5a58:	5f 3f       	cpi	r21, 0xFF	; 255
    5a5a:	ac f0       	brlt	.+42     	; 0x5a86 <ldexp+0x66>
    5a5c:	98 3e       	cpi	r25, 0xE8	; 232
    5a5e:	9c f0       	brlt	.+38     	; 0x5a86 <ldexp+0x66>
    5a60:	bb 27       	eor	r27, r27
    5a62:	86 95       	lsr	r24
    5a64:	77 95       	ror	r23
    5a66:	67 95       	ror	r22
    5a68:	b7 95       	ror	r27
    5a6a:	08 f4       	brcc	.+2      	; 0x5a6e <ldexp+0x4e>
    5a6c:	b1 60       	ori	r27, 0x01	; 1
    5a6e:	93 95       	inc	r25
    5a70:	c1 f7       	brne	.-16     	; 0x5a62 <ldexp+0x42>
    5a72:	bb 0f       	add	r27, r27
    5a74:	58 f7       	brcc	.-42     	; 0x5a4c <ldexp+0x2c>
    5a76:	11 f4       	brne	.+4      	; 0x5a7c <ldexp+0x5c>
    5a78:	60 ff       	sbrs	r22, 0
    5a7a:	e8 cf       	rjmp	.-48     	; 0x5a4c <ldexp+0x2c>
    5a7c:	6f 5f       	subi	r22, 0xFF	; 255
    5a7e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a80:	8f 4f       	sbci	r24, 0xFF	; 255
    5a82:	9f 4f       	sbci	r25, 0xFF	; 255
    5a84:	e3 cf       	rjmp	.-58     	; 0x5a4c <ldexp+0x2c>
    5a86:	7a ce       	rjmp	.-780    	; 0x577c <__fp_szero>
    5a88:	0e f0       	brts	.+2      	; 0x5a8c <ldexp+0x6c>
    5a8a:	76 c0       	rjmp	.+236    	; 0x5b78 <__fp_mpack>
    5a8c:	32 ce       	rjmp	.-924    	; 0x56f2 <__fp_nan>
    5a8e:	68 94       	set
    5a90:	2a ce       	rjmp	.-940    	; 0x56e6 <__fp_inf>

00005a92 <log>:
    5a92:	59 de       	rcall	.-846    	; 0x5746 <__fp_splitA>
    5a94:	c8 f3       	brcs	.-14     	; 0x5a88 <ldexp+0x68>
    5a96:	99 23       	and	r25, r25
    5a98:	d1 f3       	breq	.-12     	; 0x5a8e <ldexp+0x6e>
    5a9a:	c6 f3       	brts	.-16     	; 0x5a8c <ldexp+0x6c>
    5a9c:	df 93       	push	r29
    5a9e:	cf 93       	push	r28
    5aa0:	1f 93       	push	r17
    5aa2:	0f 93       	push	r16
    5aa4:	ff 92       	push	r15
    5aa6:	c9 2f       	mov	r28, r25
    5aa8:	dd 27       	eor	r29, r29
    5aaa:	88 23       	and	r24, r24
    5aac:	2a f0       	brmi	.+10     	; 0x5ab8 <log+0x26>
    5aae:	21 97       	sbiw	r28, 0x01	; 1
    5ab0:	66 0f       	add	r22, r22
    5ab2:	77 1f       	adc	r23, r23
    5ab4:	88 1f       	adc	r24, r24
    5ab6:	da f7       	brpl	.-10     	; 0x5aae <log+0x1c>
    5ab8:	20 e0       	ldi	r18, 0x00	; 0
    5aba:	30 e0       	ldi	r19, 0x00	; 0
    5abc:	40 e8       	ldi	r20, 0x80	; 128
    5abe:	5f eb       	ldi	r21, 0xBF	; 191
    5ac0:	9f e3       	ldi	r25, 0x3F	; 63
    5ac2:	88 39       	cpi	r24, 0x98	; 152
    5ac4:	20 f0       	brcs	.+8      	; 0x5ace <log+0x3c>
    5ac6:	80 3e       	cpi	r24, 0xE0	; 224
    5ac8:	30 f0       	brcs	.+12     	; 0x5ad6 <log+0x44>
    5aca:	21 96       	adiw	r28, 0x01	; 1
    5acc:	8f 77       	andi	r24, 0x7F	; 127
    5ace:	a9 dc       	rcall	.-1710   	; 0x5422 <__addsf3>
    5ad0:	e0 ef       	ldi	r30, 0xF0	; 240
    5ad2:	f0 e0       	ldi	r31, 0x00	; 0
    5ad4:	03 c0       	rjmp	.+6      	; 0x5adc <log+0x4a>
    5ad6:	a5 dc       	rcall	.-1718   	; 0x5422 <__addsf3>
    5ad8:	ed e1       	ldi	r30, 0x1D	; 29
    5ada:	f1 e0       	ldi	r31, 0x01	; 1
    5adc:	73 df       	rcall	.-282    	; 0x59c4 <__fp_powser>
    5ade:	8b 01       	movw	r16, r22
    5ae0:	be 01       	movw	r22, r28
    5ae2:	ec 01       	movw	r28, r24
    5ae4:	fb 2e       	mov	r15, r27
    5ae6:	6f 57       	subi	r22, 0x7F	; 127
    5ae8:	71 09       	sbc	r23, r1
    5aea:	75 95       	asr	r23
    5aec:	77 1f       	adc	r23, r23
    5aee:	88 0b       	sbc	r24, r24
    5af0:	99 0b       	sbc	r25, r25
    5af2:	9a dd       	rcall	.-1228   	; 0x5628 <__floatsisf>
    5af4:	28 e1       	ldi	r18, 0x18	; 24
    5af6:	32 e7       	ldi	r19, 0x72	; 114
    5af8:	41 e3       	ldi	r20, 0x31	; 49
    5afa:	5f e3       	ldi	r21, 0x3F	; 63
    5afc:	8f de       	rcall	.-738    	; 0x581c <__mulsf3x>
    5afe:	af 2d       	mov	r26, r15
    5b00:	98 01       	movw	r18, r16
    5b02:	ae 01       	movw	r20, r28
    5b04:	ff 90       	pop	r15
    5b06:	0f 91       	pop	r16
    5b08:	1f 91       	pop	r17
    5b0a:	cf 91       	pop	r28
    5b0c:	df 91       	pop	r29
    5b0e:	9a dc       	rcall	.-1740   	; 0x5444 <__addsf3x>
    5b10:	01 ce       	rjmp	.-1022   	; 0x5714 <__fp_round>

00005b12 <modf>:
    5b12:	fa 01       	movw	r30, r20
    5b14:	dc 01       	movw	r26, r24
    5b16:	aa 0f       	add	r26, r26
    5b18:	bb 1f       	adc	r27, r27
    5b1a:	9b 01       	movw	r18, r22
    5b1c:	ac 01       	movw	r20, r24
    5b1e:	bf 57       	subi	r27, 0x7F	; 127
    5b20:	28 f4       	brcc	.+10     	; 0x5b2c <modf+0x1a>
    5b22:	22 27       	eor	r18, r18
    5b24:	33 27       	eor	r19, r19
    5b26:	44 27       	eor	r20, r20
    5b28:	50 78       	andi	r21, 0x80	; 128
    5b2a:	1f c0       	rjmp	.+62     	; 0x5b6a <modf+0x58>
    5b2c:	b7 51       	subi	r27, 0x17	; 23
    5b2e:	88 f4       	brcc	.+34     	; 0x5b52 <modf+0x40>
    5b30:	ab 2f       	mov	r26, r27
    5b32:	00 24       	eor	r0, r0
    5b34:	46 95       	lsr	r20
    5b36:	37 95       	ror	r19
    5b38:	27 95       	ror	r18
    5b3a:	01 1c       	adc	r0, r1
    5b3c:	a3 95       	inc	r26
    5b3e:	d2 f3       	brmi	.-12     	; 0x5b34 <modf+0x22>
    5b40:	00 20       	and	r0, r0
    5b42:	69 f0       	breq	.+26     	; 0x5b5e <modf+0x4c>
    5b44:	22 0f       	add	r18, r18
    5b46:	33 1f       	adc	r19, r19
    5b48:	44 1f       	adc	r20, r20
    5b4a:	b3 95       	inc	r27
    5b4c:	da f3       	brmi	.-10     	; 0x5b44 <modf+0x32>
    5b4e:	0d d0       	rcall	.+26     	; 0x5b6a <modf+0x58>
    5b50:	67 cc       	rjmp	.-1842   	; 0x5420 <__subsf3>
    5b52:	61 30       	cpi	r22, 0x01	; 1
    5b54:	71 05       	cpc	r23, r1
    5b56:	a0 e8       	ldi	r26, 0x80	; 128
    5b58:	8a 07       	cpc	r24, r26
    5b5a:	b9 46       	sbci	r27, 0x69	; 105
    5b5c:	30 f4       	brcc	.+12     	; 0x5b6a <modf+0x58>
    5b5e:	9b 01       	movw	r18, r22
    5b60:	ac 01       	movw	r20, r24
    5b62:	66 27       	eor	r22, r22
    5b64:	77 27       	eor	r23, r23
    5b66:	88 27       	eor	r24, r24
    5b68:	90 78       	andi	r25, 0x80	; 128
    5b6a:	30 96       	adiw	r30, 0x00	; 0
    5b6c:	21 f0       	breq	.+8      	; 0x5b76 <modf+0x64>
    5b6e:	20 83       	st	Z, r18
    5b70:	31 83       	std	Z+1, r19	; 0x01
    5b72:	42 83       	std	Z+2, r20	; 0x02
    5b74:	53 83       	std	Z+3, r21	; 0x03
    5b76:	08 95       	ret

00005b78 <__fp_mpack>:
    5b78:	9f 3f       	cpi	r25, 0xFF	; 255
    5b7a:	31 f0       	breq	.+12     	; 0x5b88 <__fp_mpack_finite+0xc>

00005b7c <__fp_mpack_finite>:
    5b7c:	91 50       	subi	r25, 0x01	; 1
    5b7e:	20 f4       	brcc	.+8      	; 0x5b88 <__fp_mpack_finite+0xc>
    5b80:	87 95       	ror	r24
    5b82:	77 95       	ror	r23
    5b84:	67 95       	ror	r22
    5b86:	b7 95       	ror	r27
    5b88:	88 0f       	add	r24, r24
    5b8a:	91 1d       	adc	r25, r1
    5b8c:	96 95       	lsr	r25
    5b8e:	87 95       	ror	r24
    5b90:	97 f9       	bld	r25, 7
    5b92:	08 95       	ret

00005b94 <vfprintf>:
    5b94:	a1 e1       	ldi	r26, 0x11	; 17
    5b96:	b0 e0       	ldi	r27, 0x00	; 0
    5b98:	ef ec       	ldi	r30, 0xCF	; 207
    5b9a:	fd e2       	ldi	r31, 0x2D	; 45
    5b9c:	b7 c3       	rjmp	.+1902   	; 0x630c <__prologue_saves__>
    5b9e:	3c 01       	movw	r6, r24
    5ba0:	7f 87       	std	Y+15, r23	; 0x0f
    5ba2:	6e 87       	std	Y+14, r22	; 0x0e
    5ba4:	6a 01       	movw	r12, r20
    5ba6:	fc 01       	movw	r30, r24
    5ba8:	17 82       	std	Z+7, r1	; 0x07
    5baa:	16 82       	std	Z+6, r1	; 0x06
    5bac:	83 81       	ldd	r24, Z+3	; 0x03
    5bae:	81 fd       	sbrc	r24, 1
    5bb0:	03 c0       	rjmp	.+6      	; 0x5bb8 <vfprintf+0x24>
    5bb2:	6f ef       	ldi	r22, 0xFF	; 255
    5bb4:	7f ef       	ldi	r23, 0xFF	; 255
    5bb6:	52 c3       	rjmp	.+1700   	; 0x625c <vfprintf+0x6c8>
    5bb8:	9e 01       	movw	r18, r28
    5bba:	2f 5f       	subi	r18, 0xFF	; 255
    5bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    5bbe:	39 8b       	std	Y+17, r19	; 0x11
    5bc0:	28 8b       	std	Y+16, r18	; 0x10
    5bc2:	f3 01       	movw	r30, r6
    5bc4:	23 81       	ldd	r18, Z+3	; 0x03
    5bc6:	ee 85       	ldd	r30, Y+14	; 0x0e
    5bc8:	ff 85       	ldd	r31, Y+15	; 0x0f
    5bca:	23 fd       	sbrc	r18, 3
    5bcc:	85 91       	lpm	r24, Z+
    5bce:	23 ff       	sbrs	r18, 3
    5bd0:	81 91       	ld	r24, Z+
    5bd2:	ff 87       	std	Y+15, r31	; 0x0f
    5bd4:	ee 87       	std	Y+14, r30	; 0x0e
    5bd6:	88 23       	and	r24, r24
    5bd8:	09 f4       	brne	.+2      	; 0x5bdc <vfprintf+0x48>
    5bda:	3d c3       	rjmp	.+1658   	; 0x6256 <vfprintf+0x6c2>
    5bdc:	85 32       	cpi	r24, 0x25	; 37
    5bde:	51 f4       	brne	.+20     	; 0x5bf4 <vfprintf+0x60>
    5be0:	ee 85       	ldd	r30, Y+14	; 0x0e
    5be2:	ff 85       	ldd	r31, Y+15	; 0x0f
    5be4:	23 fd       	sbrc	r18, 3
    5be6:	85 91       	lpm	r24, Z+
    5be8:	23 ff       	sbrs	r18, 3
    5bea:	81 91       	ld	r24, Z+
    5bec:	ff 87       	std	Y+15, r31	; 0x0f
    5bee:	ee 87       	std	Y+14, r30	; 0x0e
    5bf0:	85 32       	cpi	r24, 0x25	; 37
    5bf2:	21 f4       	brne	.+8      	; 0x5bfc <vfprintf+0x68>
    5bf4:	90 e0       	ldi	r25, 0x00	; 0
    5bf6:	b3 01       	movw	r22, r6
    5bf8:	20 d6       	rcall	.+3136   	; 0x683a <fputc>
    5bfa:	e3 cf       	rjmp	.-58     	; 0x5bc2 <vfprintf+0x2e>
    5bfc:	98 2f       	mov	r25, r24
    5bfe:	10 e0       	ldi	r17, 0x00	; 0
    5c00:	88 24       	eor	r8, r8
    5c02:	99 24       	eor	r9, r9
    5c04:	10 32       	cpi	r17, 0x20	; 32
    5c06:	b0 f4       	brcc	.+44     	; 0x5c34 <vfprintf+0xa0>
    5c08:	9b 32       	cpi	r25, 0x2B	; 43
    5c0a:	69 f0       	breq	.+26     	; 0x5c26 <vfprintf+0x92>
    5c0c:	9c 32       	cpi	r25, 0x2C	; 44
    5c0e:	28 f4       	brcc	.+10     	; 0x5c1a <vfprintf+0x86>
    5c10:	90 32       	cpi	r25, 0x20	; 32
    5c12:	51 f0       	breq	.+20     	; 0x5c28 <vfprintf+0x94>
    5c14:	93 32       	cpi	r25, 0x23	; 35
    5c16:	71 f4       	brne	.+28     	; 0x5c34 <vfprintf+0xa0>
    5c18:	0b c0       	rjmp	.+22     	; 0x5c30 <vfprintf+0x9c>
    5c1a:	9d 32       	cpi	r25, 0x2D	; 45
    5c1c:	39 f0       	breq	.+14     	; 0x5c2c <vfprintf+0x98>
    5c1e:	90 33       	cpi	r25, 0x30	; 48
    5c20:	49 f4       	brne	.+18     	; 0x5c34 <vfprintf+0xa0>
    5c22:	11 60       	ori	r17, 0x01	; 1
    5c24:	28 c0       	rjmp	.+80     	; 0x5c76 <vfprintf+0xe2>
    5c26:	12 60       	ori	r17, 0x02	; 2
    5c28:	14 60       	ori	r17, 0x04	; 4
    5c2a:	25 c0       	rjmp	.+74     	; 0x5c76 <vfprintf+0xe2>
    5c2c:	18 60       	ori	r17, 0x08	; 8
    5c2e:	23 c0       	rjmp	.+70     	; 0x5c76 <vfprintf+0xe2>
    5c30:	10 61       	ori	r17, 0x10	; 16
    5c32:	21 c0       	rjmp	.+66     	; 0x5c76 <vfprintf+0xe2>
    5c34:	17 fd       	sbrc	r17, 7
    5c36:	2a c0       	rjmp	.+84     	; 0x5c8c <vfprintf+0xf8>
    5c38:	89 2f       	mov	r24, r25
    5c3a:	80 53       	subi	r24, 0x30	; 48
    5c3c:	8a 30       	cpi	r24, 0x0A	; 10
    5c3e:	78 f4       	brcc	.+30     	; 0x5c5e <vfprintf+0xca>
    5c40:	16 ff       	sbrs	r17, 6
    5c42:	06 c0       	rjmp	.+12     	; 0x5c50 <vfprintf+0xbc>
    5c44:	fa e0       	ldi	r31, 0x0A	; 10
    5c46:	9f 9e       	mul	r9, r31
    5c48:	90 2c       	mov	r9, r0
    5c4a:	11 24       	eor	r1, r1
    5c4c:	98 0e       	add	r9, r24
    5c4e:	13 c0       	rjmp	.+38     	; 0x5c76 <vfprintf+0xe2>
    5c50:	3a e0       	ldi	r19, 0x0A	; 10
    5c52:	83 9e       	mul	r8, r19
    5c54:	80 2c       	mov	r8, r0
    5c56:	11 24       	eor	r1, r1
    5c58:	88 0e       	add	r8, r24
    5c5a:	10 62       	ori	r17, 0x20	; 32
    5c5c:	0c c0       	rjmp	.+24     	; 0x5c76 <vfprintf+0xe2>
    5c5e:	9e 32       	cpi	r25, 0x2E	; 46
    5c60:	21 f4       	brne	.+8      	; 0x5c6a <vfprintf+0xd6>
    5c62:	16 fd       	sbrc	r17, 6
    5c64:	f8 c2       	rjmp	.+1520   	; 0x6256 <vfprintf+0x6c2>
    5c66:	10 64       	ori	r17, 0x40	; 64
    5c68:	06 c0       	rjmp	.+12     	; 0x5c76 <vfprintf+0xe2>
    5c6a:	9c 36       	cpi	r25, 0x6C	; 108
    5c6c:	11 f4       	brne	.+4      	; 0x5c72 <vfprintf+0xde>
    5c6e:	10 68       	ori	r17, 0x80	; 128
    5c70:	02 c0       	rjmp	.+4      	; 0x5c76 <vfprintf+0xe2>
    5c72:	98 36       	cpi	r25, 0x68	; 104
    5c74:	59 f4       	brne	.+22     	; 0x5c8c <vfprintf+0xf8>
    5c76:	ee 85       	ldd	r30, Y+14	; 0x0e
    5c78:	ff 85       	ldd	r31, Y+15	; 0x0f
    5c7a:	23 fd       	sbrc	r18, 3
    5c7c:	95 91       	lpm	r25, Z+
    5c7e:	23 ff       	sbrs	r18, 3
    5c80:	91 91       	ld	r25, Z+
    5c82:	ff 87       	std	Y+15, r31	; 0x0f
    5c84:	ee 87       	std	Y+14, r30	; 0x0e
    5c86:	99 23       	and	r25, r25
    5c88:	09 f0       	breq	.+2      	; 0x5c8c <vfprintf+0xf8>
    5c8a:	bc cf       	rjmp	.-136    	; 0x5c04 <vfprintf+0x70>
    5c8c:	89 2f       	mov	r24, r25
    5c8e:	85 54       	subi	r24, 0x45	; 69
    5c90:	83 30       	cpi	r24, 0x03	; 3
    5c92:	20 f4       	brcc	.+8      	; 0x5c9c <vfprintf+0x108>
    5c94:	81 2f       	mov	r24, r17
    5c96:	80 61       	ori	r24, 0x10	; 16
    5c98:	90 5e       	subi	r25, 0xE0	; 224
    5c9a:	07 c0       	rjmp	.+14     	; 0x5caa <vfprintf+0x116>
    5c9c:	89 2f       	mov	r24, r25
    5c9e:	85 56       	subi	r24, 0x65	; 101
    5ca0:	83 30       	cpi	r24, 0x03	; 3
    5ca2:	08 f0       	brcs	.+2      	; 0x5ca6 <vfprintf+0x112>
    5ca4:	8f c1       	rjmp	.+798    	; 0x5fc4 <vfprintf+0x430>
    5ca6:	81 2f       	mov	r24, r17
    5ca8:	8f 7e       	andi	r24, 0xEF	; 239
    5caa:	86 fd       	sbrc	r24, 6
    5cac:	02 c0       	rjmp	.+4      	; 0x5cb2 <vfprintf+0x11e>
    5cae:	76 e0       	ldi	r23, 0x06	; 6
    5cb0:	97 2e       	mov	r9, r23
    5cb2:	6f e3       	ldi	r22, 0x3F	; 63
    5cb4:	f6 2e       	mov	r15, r22
    5cb6:	f8 22       	and	r15, r24
    5cb8:	95 36       	cpi	r25, 0x65	; 101
    5cba:	19 f4       	brne	.+6      	; 0x5cc2 <vfprintf+0x12e>
    5cbc:	f0 e4       	ldi	r31, 0x40	; 64
    5cbe:	ff 2a       	or	r15, r31
    5cc0:	07 c0       	rjmp	.+14     	; 0x5cd0 <vfprintf+0x13c>
    5cc2:	96 36       	cpi	r25, 0x66	; 102
    5cc4:	19 f4       	brne	.+6      	; 0x5ccc <vfprintf+0x138>
    5cc6:	20 e8       	ldi	r18, 0x80	; 128
    5cc8:	f2 2a       	or	r15, r18
    5cca:	02 c0       	rjmp	.+4      	; 0x5cd0 <vfprintf+0x13c>
    5ccc:	91 10       	cpse	r9, r1
    5cce:	9a 94       	dec	r9
    5cd0:	f7 fe       	sbrs	r15, 7
    5cd2:	0a c0       	rjmp	.+20     	; 0x5ce8 <vfprintf+0x154>
    5cd4:	3b e3       	ldi	r19, 0x3B	; 59
    5cd6:	39 15       	cp	r19, r9
    5cd8:	18 f4       	brcc	.+6      	; 0x5ce0 <vfprintf+0x14c>
    5cda:	5c e3       	ldi	r21, 0x3C	; 60
    5cdc:	b5 2e       	mov	r11, r21
    5cde:	02 c0       	rjmp	.+4      	; 0x5ce4 <vfprintf+0x150>
    5ce0:	b9 2c       	mov	r11, r9
    5ce2:	b3 94       	inc	r11
    5ce4:	27 e0       	ldi	r18, 0x07	; 7
    5ce6:	09 c0       	rjmp	.+18     	; 0x5cfa <vfprintf+0x166>
    5ce8:	47 e0       	ldi	r20, 0x07	; 7
    5cea:	49 15       	cp	r20, r9
    5cec:	20 f4       	brcc	.+8      	; 0x5cf6 <vfprintf+0x162>
    5cee:	bb 24       	eor	r11, r11
    5cf0:	47 e0       	ldi	r20, 0x07	; 7
    5cf2:	94 2e       	mov	r9, r20
    5cf4:	f7 cf       	rjmp	.-18     	; 0x5ce4 <vfprintf+0x150>
    5cf6:	29 2d       	mov	r18, r9
    5cf8:	bb 24       	eor	r11, r11
    5cfa:	c6 01       	movw	r24, r12
    5cfc:	04 96       	adiw	r24, 0x04	; 4
    5cfe:	9d 87       	std	Y+13, r25	; 0x0d
    5d00:	8c 87       	std	Y+12, r24	; 0x0c
    5d02:	f6 01       	movw	r30, r12
    5d04:	60 81       	ld	r22, Z
    5d06:	71 81       	ldd	r23, Z+1	; 0x01
    5d08:	82 81       	ldd	r24, Z+2	; 0x02
    5d0a:	93 81       	ldd	r25, Z+3	; 0x03
    5d0c:	ae 01       	movw	r20, r28
    5d0e:	4f 5f       	subi	r20, 0xFF	; 255
    5d10:	5f 4f       	sbci	r21, 0xFF	; 255
    5d12:	0b 2d       	mov	r16, r11
    5d14:	a4 d4       	rcall	.+2376   	; 0x665e <__ftoa_engine>
    5d16:	6c 01       	movw	r12, r24
    5d18:	09 81       	ldd	r16, Y+1	; 0x01
    5d1a:	20 2e       	mov	r2, r16
    5d1c:	33 24       	eor	r3, r3
    5d1e:	00 ff       	sbrs	r16, 0
    5d20:	04 c0       	rjmp	.+8      	; 0x5d2a <vfprintf+0x196>
    5d22:	03 fd       	sbrc	r16, 3
    5d24:	02 c0       	rjmp	.+4      	; 0x5d2a <vfprintf+0x196>
    5d26:	1d e2       	ldi	r17, 0x2D	; 45
    5d28:	09 c0       	rjmp	.+18     	; 0x5d3c <vfprintf+0x1a8>
    5d2a:	f1 fe       	sbrs	r15, 1
    5d2c:	02 c0       	rjmp	.+4      	; 0x5d32 <vfprintf+0x19e>
    5d2e:	1b e2       	ldi	r17, 0x2B	; 43
    5d30:	05 c0       	rjmp	.+10     	; 0x5d3c <vfprintf+0x1a8>
    5d32:	f2 fc       	sbrc	r15, 2
    5d34:	02 c0       	rjmp	.+4      	; 0x5d3a <vfprintf+0x1a6>
    5d36:	10 e0       	ldi	r17, 0x00	; 0
    5d38:	01 c0       	rjmp	.+2      	; 0x5d3c <vfprintf+0x1a8>
    5d3a:	10 e2       	ldi	r17, 0x20	; 32
    5d3c:	c1 01       	movw	r24, r2
    5d3e:	8c 70       	andi	r24, 0x0C	; 12
    5d40:	90 70       	andi	r25, 0x00	; 0
    5d42:	89 2b       	or	r24, r25
    5d44:	a1 f1       	breq	.+104    	; 0x5dae <vfprintf+0x21a>
    5d46:	11 23       	and	r17, r17
    5d48:	11 f4       	brne	.+4      	; 0x5d4e <vfprintf+0x1ba>
    5d4a:	83 e0       	ldi	r24, 0x03	; 3
    5d4c:	01 c0       	rjmp	.+2      	; 0x5d50 <vfprintf+0x1bc>
    5d4e:	84 e0       	ldi	r24, 0x04	; 4
    5d50:	88 15       	cp	r24, r8
    5d52:	10 f0       	brcs	.+4      	; 0x5d58 <vfprintf+0x1c4>
    5d54:	88 24       	eor	r8, r8
    5d56:	09 c0       	rjmp	.+18     	; 0x5d6a <vfprintf+0x1d6>
    5d58:	88 1a       	sub	r8, r24
    5d5a:	f3 fc       	sbrc	r15, 3
    5d5c:	06 c0       	rjmp	.+12     	; 0x5d6a <vfprintf+0x1d6>
    5d5e:	80 e2       	ldi	r24, 0x20	; 32
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	b3 01       	movw	r22, r6
    5d64:	6a d5       	rcall	.+2772   	; 0x683a <fputc>
    5d66:	8a 94       	dec	r8
    5d68:	d1 f7       	brne	.-12     	; 0x5d5e <vfprintf+0x1ca>
    5d6a:	11 23       	and	r17, r17
    5d6c:	21 f0       	breq	.+8      	; 0x5d76 <vfprintf+0x1e2>
    5d6e:	81 2f       	mov	r24, r17
    5d70:	90 e0       	ldi	r25, 0x00	; 0
    5d72:	b3 01       	movw	r22, r6
    5d74:	62 d5       	rcall	.+2756   	; 0x683a <fputc>
    5d76:	23 fe       	sbrs	r2, 3
    5d78:	03 c0       	rjmp	.+6      	; 0x5d80 <vfprintf+0x1ec>
    5d7a:	0f e5       	ldi	r16, 0x5F	; 95
    5d7c:	15 e0       	ldi	r17, 0x05	; 5
    5d7e:	0d c0       	rjmp	.+26     	; 0x5d9a <vfprintf+0x206>
    5d80:	03 e6       	ldi	r16, 0x63	; 99
    5d82:	15 e0       	ldi	r17, 0x05	; 5
    5d84:	0a c0       	rjmp	.+20     	; 0x5d9a <vfprintf+0x206>
    5d86:	e1 14       	cp	r14, r1
    5d88:	f1 04       	cpc	r15, r1
    5d8a:	09 f0       	breq	.+2      	; 0x5d8e <vfprintf+0x1fa>
    5d8c:	80 52       	subi	r24, 0x20	; 32
    5d8e:	90 e0       	ldi	r25, 0x00	; 0
    5d90:	b3 01       	movw	r22, r6
    5d92:	53 d5       	rcall	.+2726   	; 0x683a <fputc>
    5d94:	0f 5f       	subi	r16, 0xFF	; 255
    5d96:	1f 4f       	sbci	r17, 0xFF	; 255
    5d98:	05 c0       	rjmp	.+10     	; 0x5da4 <vfprintf+0x210>
    5d9a:	ef 2c       	mov	r14, r15
    5d9c:	ff 24       	eor	r15, r15
    5d9e:	f0 e1       	ldi	r31, 0x10	; 16
    5da0:	ef 22       	and	r14, r31
    5da2:	ff 24       	eor	r15, r15
    5da4:	f8 01       	movw	r30, r16
    5da6:	84 91       	lpm	r24, Z+
    5da8:	88 23       	and	r24, r24
    5daa:	69 f7       	brne	.-38     	; 0x5d86 <vfprintf+0x1f2>
    5dac:	08 c1       	rjmp	.+528    	; 0x5fbe <vfprintf+0x42a>
    5dae:	f7 fe       	sbrs	r15, 7
    5db0:	12 c0       	rjmp	.+36     	; 0x5dd6 <vfprintf+0x242>
    5db2:	bc 0c       	add	r11, r12
    5db4:	24 fe       	sbrs	r2, 4
    5db6:	04 c0       	rjmp	.+8      	; 0x5dc0 <vfprintf+0x22c>
    5db8:	8a 81       	ldd	r24, Y+2	; 0x02
    5dba:	81 33       	cpi	r24, 0x31	; 49
    5dbc:	09 f4       	brne	.+2      	; 0x5dc0 <vfprintf+0x22c>
    5dbe:	ba 94       	dec	r11
    5dc0:	1b 14       	cp	r1, r11
    5dc2:	1c f0       	brlt	.+6      	; 0x5dca <vfprintf+0x236>
    5dc4:	bb 24       	eor	r11, r11
    5dc6:	b3 94       	inc	r11
    5dc8:	2d c0       	rjmp	.+90     	; 0x5e24 <vfprintf+0x290>
    5dca:	f8 e0       	ldi	r31, 0x08	; 8
    5dcc:	fb 15       	cp	r31, r11
    5dce:	50 f5       	brcc	.+84     	; 0x5e24 <vfprintf+0x290>
    5dd0:	38 e0       	ldi	r19, 0x08	; 8
    5dd2:	b3 2e       	mov	r11, r19
    5dd4:	27 c0       	rjmp	.+78     	; 0x5e24 <vfprintf+0x290>
    5dd6:	f6 fc       	sbrc	r15, 6
    5dd8:	25 c0       	rjmp	.+74     	; 0x5e24 <vfprintf+0x290>
    5dda:	89 2d       	mov	r24, r9
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	8c 15       	cp	r24, r12
    5de0:	9d 05       	cpc	r25, r13
    5de2:	4c f0       	brlt	.+18     	; 0x5df6 <vfprintf+0x262>
    5de4:	2c ef       	ldi	r18, 0xFC	; 252
    5de6:	c2 16       	cp	r12, r18
    5de8:	2f ef       	ldi	r18, 0xFF	; 255
    5dea:	d2 06       	cpc	r13, r18
    5dec:	24 f0       	brlt	.+8      	; 0x5df6 <vfprintf+0x262>
    5dee:	30 e8       	ldi	r19, 0x80	; 128
    5df0:	f3 2a       	or	r15, r19
    5df2:	01 c0       	rjmp	.+2      	; 0x5df6 <vfprintf+0x262>
    5df4:	9a 94       	dec	r9
    5df6:	99 20       	and	r9, r9
    5df8:	49 f0       	breq	.+18     	; 0x5e0c <vfprintf+0x278>
    5dfa:	e2 e0       	ldi	r30, 0x02	; 2
    5dfc:	f0 e0       	ldi	r31, 0x00	; 0
    5dfe:	ec 0f       	add	r30, r28
    5e00:	fd 1f       	adc	r31, r29
    5e02:	e9 0d       	add	r30, r9
    5e04:	f1 1d       	adc	r31, r1
    5e06:	80 81       	ld	r24, Z
    5e08:	80 33       	cpi	r24, 0x30	; 48
    5e0a:	a1 f3       	breq	.-24     	; 0x5df4 <vfprintf+0x260>
    5e0c:	f7 fe       	sbrs	r15, 7
    5e0e:	0a c0       	rjmp	.+20     	; 0x5e24 <vfprintf+0x290>
    5e10:	b9 2c       	mov	r11, r9
    5e12:	b3 94       	inc	r11
    5e14:	89 2d       	mov	r24, r9
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	c8 16       	cp	r12, r24
    5e1a:	d9 06       	cpc	r13, r25
    5e1c:	14 f0       	brlt	.+4      	; 0x5e22 <vfprintf+0x28e>
    5e1e:	99 24       	eor	r9, r9
    5e20:	01 c0       	rjmp	.+2      	; 0x5e24 <vfprintf+0x290>
    5e22:	9c 18       	sub	r9, r12
    5e24:	f7 fc       	sbrc	r15, 7
    5e26:	03 c0       	rjmp	.+6      	; 0x5e2e <vfprintf+0x29a>
    5e28:	25 e0       	ldi	r18, 0x05	; 5
    5e2a:	30 e0       	ldi	r19, 0x00	; 0
    5e2c:	09 c0       	rjmp	.+18     	; 0x5e40 <vfprintf+0x2ac>
    5e2e:	1c 14       	cp	r1, r12
    5e30:	1d 04       	cpc	r1, r13
    5e32:	1c f0       	brlt	.+6      	; 0x5e3a <vfprintf+0x2a6>
    5e34:	21 e0       	ldi	r18, 0x01	; 1
    5e36:	30 e0       	ldi	r19, 0x00	; 0
    5e38:	03 c0       	rjmp	.+6      	; 0x5e40 <vfprintf+0x2ac>
    5e3a:	96 01       	movw	r18, r12
    5e3c:	2f 5f       	subi	r18, 0xFF	; 255
    5e3e:	3f 4f       	sbci	r19, 0xFF	; 255
    5e40:	11 23       	and	r17, r17
    5e42:	11 f0       	breq	.+4      	; 0x5e48 <vfprintf+0x2b4>
    5e44:	2f 5f       	subi	r18, 0xFF	; 255
    5e46:	3f 4f       	sbci	r19, 0xFF	; 255
    5e48:	99 20       	and	r9, r9
    5e4a:	29 f0       	breq	.+10     	; 0x5e56 <vfprintf+0x2c2>
    5e4c:	89 2d       	mov	r24, r9
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	01 96       	adiw	r24, 0x01	; 1
    5e52:	28 0f       	add	r18, r24
    5e54:	39 1f       	adc	r19, r25
    5e56:	88 2d       	mov	r24, r8
    5e58:	90 e0       	ldi	r25, 0x00	; 0
    5e5a:	28 17       	cp	r18, r24
    5e5c:	39 07       	cpc	r19, r25
    5e5e:	14 f0       	brlt	.+4      	; 0x5e64 <vfprintf+0x2d0>
    5e60:	88 24       	eor	r8, r8
    5e62:	01 c0       	rjmp	.+2      	; 0x5e66 <vfprintf+0x2d2>
    5e64:	82 1a       	sub	r8, r18
    5e66:	4f 2c       	mov	r4, r15
    5e68:	55 24       	eor	r5, r5
    5e6a:	c2 01       	movw	r24, r4
    5e6c:	89 70       	andi	r24, 0x09	; 9
    5e6e:	90 70       	andi	r25, 0x00	; 0
    5e70:	89 2b       	or	r24, r25
    5e72:	31 f0       	breq	.+12     	; 0x5e80 <vfprintf+0x2ec>
    5e74:	07 c0       	rjmp	.+14     	; 0x5e84 <vfprintf+0x2f0>
    5e76:	80 e2       	ldi	r24, 0x20	; 32
    5e78:	90 e0       	ldi	r25, 0x00	; 0
    5e7a:	b3 01       	movw	r22, r6
    5e7c:	de d4       	rcall	.+2492   	; 0x683a <fputc>
    5e7e:	8a 94       	dec	r8
    5e80:	88 20       	and	r8, r8
    5e82:	c9 f7       	brne	.-14     	; 0x5e76 <vfprintf+0x2e2>
    5e84:	11 23       	and	r17, r17
    5e86:	21 f0       	breq	.+8      	; 0x5e90 <vfprintf+0x2fc>
    5e88:	81 2f       	mov	r24, r17
    5e8a:	90 e0       	ldi	r25, 0x00	; 0
    5e8c:	b3 01       	movw	r22, r6
    5e8e:	d5 d4       	rcall	.+2474   	; 0x683a <fputc>
    5e90:	43 fe       	sbrs	r4, 3
    5e92:	06 c0       	rjmp	.+12     	; 0x5ea0 <vfprintf+0x30c>
    5e94:	07 c0       	rjmp	.+14     	; 0x5ea4 <vfprintf+0x310>
    5e96:	80 e3       	ldi	r24, 0x30	; 48
    5e98:	90 e0       	ldi	r25, 0x00	; 0
    5e9a:	b3 01       	movw	r22, r6
    5e9c:	ce d4       	rcall	.+2460   	; 0x683a <fputc>
    5e9e:	8a 94       	dec	r8
    5ea0:	88 20       	and	r8, r8
    5ea2:	c9 f7       	brne	.-14     	; 0x5e96 <vfprintf+0x302>
    5ea4:	f7 fe       	sbrs	r15, 7
    5ea6:	44 c0       	rjmp	.+136    	; 0x5f30 <vfprintf+0x39c>
    5ea8:	86 01       	movw	r16, r12
    5eaa:	d7 fe       	sbrs	r13, 7
    5eac:	02 c0       	rjmp	.+4      	; 0x5eb2 <vfprintf+0x31e>
    5eae:	00 e0       	ldi	r16, 0x00	; 0
    5eb0:	10 e0       	ldi	r17, 0x00	; 0
    5eb2:	76 01       	movw	r14, r12
    5eb4:	08 94       	sec
    5eb6:	e1 1c       	adc	r14, r1
    5eb8:	f1 1c       	adc	r15, r1
    5eba:	e0 1a       	sub	r14, r16
    5ebc:	f1 0a       	sbc	r15, r17
    5ebe:	41 e0       	ldi	r20, 0x01	; 1
    5ec0:	50 e0       	ldi	r21, 0x00	; 0
    5ec2:	4c 0f       	add	r20, r28
    5ec4:	5d 1f       	adc	r21, r29
    5ec6:	e4 0e       	add	r14, r20
    5ec8:	f5 1e       	adc	r15, r21
    5eca:	26 01       	movw	r4, r12
    5ecc:	4b 18       	sub	r4, r11
    5ece:	51 08       	sbc	r5, r1
    5ed0:	89 2d       	mov	r24, r9
    5ed2:	90 e0       	ldi	r25, 0x00	; 0
    5ed4:	aa 24       	eor	r10, r10
    5ed6:	bb 24       	eor	r11, r11
    5ed8:	a8 1a       	sub	r10, r24
    5eda:	b9 0a       	sbc	r11, r25
    5edc:	5f ef       	ldi	r21, 0xFF	; 255
    5ede:	0f 3f       	cpi	r16, 0xFF	; 255
    5ee0:	15 07       	cpc	r17, r21
    5ee2:	21 f4       	brne	.+8      	; 0x5eec <vfprintf+0x358>
    5ee4:	8e e2       	ldi	r24, 0x2E	; 46
    5ee6:	90 e0       	ldi	r25, 0x00	; 0
    5ee8:	b3 01       	movw	r22, r6
    5eea:	a7 d4       	rcall	.+2382   	; 0x683a <fputc>
    5eec:	c0 16       	cp	r12, r16
    5eee:	d1 06       	cpc	r13, r17
    5ef0:	34 f0       	brlt	.+12     	; 0x5efe <vfprintf+0x36a>
    5ef2:	40 16       	cp	r4, r16
    5ef4:	51 06       	cpc	r5, r17
    5ef6:	1c f4       	brge	.+6      	; 0x5efe <vfprintf+0x36a>
    5ef8:	f7 01       	movw	r30, r14
    5efa:	80 81       	ld	r24, Z
    5efc:	01 c0       	rjmp	.+2      	; 0x5f00 <vfprintf+0x36c>
    5efe:	80 e3       	ldi	r24, 0x30	; 48
    5f00:	01 50       	subi	r16, 0x01	; 1
    5f02:	10 40       	sbci	r17, 0x00	; 0
    5f04:	08 94       	sec
    5f06:	e1 1c       	adc	r14, r1
    5f08:	f1 1c       	adc	r15, r1
    5f0a:	0a 15       	cp	r16, r10
    5f0c:	1b 05       	cpc	r17, r11
    5f0e:	24 f0       	brlt	.+8      	; 0x5f18 <vfprintf+0x384>
    5f10:	90 e0       	ldi	r25, 0x00	; 0
    5f12:	b3 01       	movw	r22, r6
    5f14:	92 d4       	rcall	.+2340   	; 0x683a <fputc>
    5f16:	e2 cf       	rjmp	.-60     	; 0x5edc <vfprintf+0x348>
    5f18:	0c 15       	cp	r16, r12
    5f1a:	1d 05       	cpc	r17, r13
    5f1c:	39 f4       	brne	.+14     	; 0x5f2c <vfprintf+0x398>
    5f1e:	9a 81       	ldd	r25, Y+2	; 0x02
    5f20:	96 33       	cpi	r25, 0x36	; 54
    5f22:	18 f4       	brcc	.+6      	; 0x5f2a <vfprintf+0x396>
    5f24:	95 33       	cpi	r25, 0x35	; 53
    5f26:	11 f4       	brne	.+4      	; 0x5f2c <vfprintf+0x398>
    5f28:	24 fe       	sbrs	r2, 4
    5f2a:	81 e3       	ldi	r24, 0x31	; 49
    5f2c:	90 e0       	ldi	r25, 0x00	; 0
    5f2e:	45 c0       	rjmp	.+138    	; 0x5fba <vfprintf+0x426>
    5f30:	8a 81       	ldd	r24, Y+2	; 0x02
    5f32:	81 33       	cpi	r24, 0x31	; 49
    5f34:	09 f0       	breq	.+2      	; 0x5f38 <vfprintf+0x3a4>
    5f36:	0f 7e       	andi	r16, 0xEF	; 239
    5f38:	90 e0       	ldi	r25, 0x00	; 0
    5f3a:	b3 01       	movw	r22, r6
    5f3c:	7e d4       	rcall	.+2300   	; 0x683a <fputc>
    5f3e:	99 20       	and	r9, r9
    5f40:	91 f0       	breq	.+36     	; 0x5f66 <vfprintf+0x3d2>
    5f42:	8e e2       	ldi	r24, 0x2E	; 46
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	b3 01       	movw	r22, r6
    5f48:	78 d4       	rcall	.+2288   	; 0x683a <fputc>
    5f4a:	12 e0       	ldi	r17, 0x02	; 2
    5f4c:	e1 e0       	ldi	r30, 0x01	; 1
    5f4e:	f0 e0       	ldi	r31, 0x00	; 0
    5f50:	ec 0f       	add	r30, r28
    5f52:	fd 1f       	adc	r31, r29
    5f54:	e1 0f       	add	r30, r17
    5f56:	f1 1d       	adc	r31, r1
    5f58:	1f 5f       	subi	r17, 0xFF	; 255
    5f5a:	80 81       	ld	r24, Z
    5f5c:	90 e0       	ldi	r25, 0x00	; 0
    5f5e:	b3 01       	movw	r22, r6
    5f60:	6c d4       	rcall	.+2264   	; 0x683a <fputc>
    5f62:	9a 94       	dec	r9
    5f64:	99 f7       	brne	.-26     	; 0x5f4c <vfprintf+0x3b8>
    5f66:	44 fc       	sbrc	r4, 4
    5f68:	03 c0       	rjmp	.+6      	; 0x5f70 <vfprintf+0x3dc>
    5f6a:	85 e6       	ldi	r24, 0x65	; 101
    5f6c:	90 e0       	ldi	r25, 0x00	; 0
    5f6e:	02 c0       	rjmp	.+4      	; 0x5f74 <vfprintf+0x3e0>
    5f70:	85 e4       	ldi	r24, 0x45	; 69
    5f72:	90 e0       	ldi	r25, 0x00	; 0
    5f74:	b3 01       	movw	r22, r6
    5f76:	61 d4       	rcall	.+2242   	; 0x683a <fputc>
    5f78:	d7 fc       	sbrc	r13, 7
    5f7a:	05 c0       	rjmp	.+10     	; 0x5f86 <vfprintf+0x3f2>
    5f7c:	c1 14       	cp	r12, r1
    5f7e:	d1 04       	cpc	r13, r1
    5f80:	41 f4       	brne	.+16     	; 0x5f92 <vfprintf+0x3fe>
    5f82:	04 ff       	sbrs	r16, 4
    5f84:	06 c0       	rjmp	.+12     	; 0x5f92 <vfprintf+0x3fe>
    5f86:	d0 94       	com	r13
    5f88:	c1 94       	neg	r12
    5f8a:	d1 08       	sbc	r13, r1
    5f8c:	d3 94       	inc	r13
    5f8e:	8d e2       	ldi	r24, 0x2D	; 45
    5f90:	01 c0       	rjmp	.+2      	; 0x5f94 <vfprintf+0x400>
    5f92:	8b e2       	ldi	r24, 0x2B	; 43
    5f94:	90 e0       	ldi	r25, 0x00	; 0
    5f96:	b3 01       	movw	r22, r6
    5f98:	50 d4       	rcall	.+2208   	; 0x683a <fputc>
    5f9a:	80 e3       	ldi	r24, 0x30	; 48
    5f9c:	05 c0       	rjmp	.+10     	; 0x5fa8 <vfprintf+0x414>
    5f9e:	8f 5f       	subi	r24, 0xFF	; 255
    5fa0:	26 ef       	ldi	r18, 0xF6	; 246
    5fa2:	3f ef       	ldi	r19, 0xFF	; 255
    5fa4:	c2 0e       	add	r12, r18
    5fa6:	d3 1e       	adc	r13, r19
    5fa8:	3a e0       	ldi	r19, 0x0A	; 10
    5faa:	c3 16       	cp	r12, r19
    5fac:	d1 04       	cpc	r13, r1
    5fae:	bc f7       	brge	.-18     	; 0x5f9e <vfprintf+0x40a>
    5fb0:	90 e0       	ldi	r25, 0x00	; 0
    5fb2:	b3 01       	movw	r22, r6
    5fb4:	42 d4       	rcall	.+2180   	; 0x683a <fputc>
    5fb6:	c6 01       	movw	r24, r12
    5fb8:	c0 96       	adiw	r24, 0x30	; 48
    5fba:	b3 01       	movw	r22, r6
    5fbc:	3e d4       	rcall	.+2172   	; 0x683a <fputc>
    5fbe:	cc 84       	ldd	r12, Y+12	; 0x0c
    5fc0:	dd 84       	ldd	r13, Y+13	; 0x0d
    5fc2:	46 c1       	rjmp	.+652    	; 0x6250 <vfprintf+0x6bc>
    5fc4:	93 36       	cpi	r25, 0x63	; 99
    5fc6:	31 f0       	breq	.+12     	; 0x5fd4 <vfprintf+0x440>
    5fc8:	93 37       	cpi	r25, 0x73	; 115
    5fca:	99 f0       	breq	.+38     	; 0x5ff2 <vfprintf+0x45e>
    5fcc:	93 35       	cpi	r25, 0x53	; 83
    5fce:	09 f0       	breq	.+2      	; 0x5fd2 <vfprintf+0x43e>
    5fd0:	55 c0       	rjmp	.+170    	; 0x607c <vfprintf+0x4e8>
    5fd2:	22 c0       	rjmp	.+68     	; 0x6018 <vfprintf+0x484>
    5fd4:	f6 01       	movw	r30, r12
    5fd6:	80 81       	ld	r24, Z
    5fd8:	89 83       	std	Y+1, r24	; 0x01
    5fda:	5e 01       	movw	r10, r28
    5fdc:	08 94       	sec
    5fde:	a1 1c       	adc	r10, r1
    5fe0:	b1 1c       	adc	r11, r1
    5fe2:	22 e0       	ldi	r18, 0x02	; 2
    5fe4:	30 e0       	ldi	r19, 0x00	; 0
    5fe6:	c2 0e       	add	r12, r18
    5fe8:	d3 1e       	adc	r13, r19
    5fea:	21 e0       	ldi	r18, 0x01	; 1
    5fec:	e2 2e       	mov	r14, r18
    5fee:	f1 2c       	mov	r15, r1
    5ff0:	11 c0       	rjmp	.+34     	; 0x6014 <vfprintf+0x480>
    5ff2:	f6 01       	movw	r30, r12
    5ff4:	a0 80       	ld	r10, Z
    5ff6:	b1 80       	ldd	r11, Z+1	; 0x01
    5ff8:	16 fd       	sbrc	r17, 6
    5ffa:	03 c0       	rjmp	.+6      	; 0x6002 <vfprintf+0x46e>
    5ffc:	6f ef       	ldi	r22, 0xFF	; 255
    5ffe:	7f ef       	ldi	r23, 0xFF	; 255
    6000:	02 c0       	rjmp	.+4      	; 0x6006 <vfprintf+0x472>
    6002:	69 2d       	mov	r22, r9
    6004:	70 e0       	ldi	r23, 0x00	; 0
    6006:	22 e0       	ldi	r18, 0x02	; 2
    6008:	30 e0       	ldi	r19, 0x00	; 0
    600a:	c2 0e       	add	r12, r18
    600c:	d3 1e       	adc	r13, r19
    600e:	c5 01       	movw	r24, r10
    6010:	09 d4       	rcall	.+2066   	; 0x6824 <strnlen>
    6012:	7c 01       	movw	r14, r24
    6014:	1f 77       	andi	r17, 0x7F	; 127
    6016:	12 c0       	rjmp	.+36     	; 0x603c <vfprintf+0x4a8>
    6018:	f6 01       	movw	r30, r12
    601a:	a0 80       	ld	r10, Z
    601c:	b1 80       	ldd	r11, Z+1	; 0x01
    601e:	16 fd       	sbrc	r17, 6
    6020:	03 c0       	rjmp	.+6      	; 0x6028 <vfprintf+0x494>
    6022:	6f ef       	ldi	r22, 0xFF	; 255
    6024:	7f ef       	ldi	r23, 0xFF	; 255
    6026:	02 c0       	rjmp	.+4      	; 0x602c <vfprintf+0x498>
    6028:	69 2d       	mov	r22, r9
    602a:	70 e0       	ldi	r23, 0x00	; 0
    602c:	22 e0       	ldi	r18, 0x02	; 2
    602e:	30 e0       	ldi	r19, 0x00	; 0
    6030:	c2 0e       	add	r12, r18
    6032:	d3 1e       	adc	r13, r19
    6034:	c5 01       	movw	r24, r10
    6036:	eb d3       	rcall	.+2006   	; 0x680e <strnlen_P>
    6038:	7c 01       	movw	r14, r24
    603a:	10 68       	ori	r17, 0x80	; 128
    603c:	13 ff       	sbrs	r17, 3
    603e:	06 c0       	rjmp	.+12     	; 0x604c <vfprintf+0x4b8>
    6040:	19 c0       	rjmp	.+50     	; 0x6074 <vfprintf+0x4e0>
    6042:	80 e2       	ldi	r24, 0x20	; 32
    6044:	90 e0       	ldi	r25, 0x00	; 0
    6046:	b3 01       	movw	r22, r6
    6048:	f8 d3       	rcall	.+2032   	; 0x683a <fputc>
    604a:	8a 94       	dec	r8
    604c:	88 2d       	mov	r24, r8
    604e:	90 e0       	ldi	r25, 0x00	; 0
    6050:	e8 16       	cp	r14, r24
    6052:	f9 06       	cpc	r15, r25
    6054:	b0 f3       	brcs	.-20     	; 0x6042 <vfprintf+0x4ae>
    6056:	0e c0       	rjmp	.+28     	; 0x6074 <vfprintf+0x4e0>
    6058:	f5 01       	movw	r30, r10
    605a:	17 fd       	sbrc	r17, 7
    605c:	85 91       	lpm	r24, Z+
    605e:	17 ff       	sbrs	r17, 7
    6060:	81 91       	ld	r24, Z+
    6062:	5f 01       	movw	r10, r30
    6064:	90 e0       	ldi	r25, 0x00	; 0
    6066:	b3 01       	movw	r22, r6
    6068:	e8 d3       	rcall	.+2000   	; 0x683a <fputc>
    606a:	81 10       	cpse	r8, r1
    606c:	8a 94       	dec	r8
    606e:	08 94       	sec
    6070:	e1 08       	sbc	r14, r1
    6072:	f1 08       	sbc	r15, r1
    6074:	e1 14       	cp	r14, r1
    6076:	f1 04       	cpc	r15, r1
    6078:	79 f7       	brne	.-34     	; 0x6058 <vfprintf+0x4c4>
    607a:	ea c0       	rjmp	.+468    	; 0x6250 <vfprintf+0x6bc>
    607c:	94 36       	cpi	r25, 0x64	; 100
    607e:	11 f0       	breq	.+4      	; 0x6084 <vfprintf+0x4f0>
    6080:	99 36       	cpi	r25, 0x69	; 105
    6082:	81 f5       	brne	.+96     	; 0x60e4 <vfprintf+0x550>
    6084:	17 ff       	sbrs	r17, 7
    6086:	08 c0       	rjmp	.+16     	; 0x6098 <vfprintf+0x504>
    6088:	f6 01       	movw	r30, r12
    608a:	20 81       	ld	r18, Z
    608c:	31 81       	ldd	r19, Z+1	; 0x01
    608e:	42 81       	ldd	r20, Z+2	; 0x02
    6090:	53 81       	ldd	r21, Z+3	; 0x03
    6092:	84 e0       	ldi	r24, 0x04	; 4
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	0a c0       	rjmp	.+20     	; 0x60ac <vfprintf+0x518>
    6098:	f6 01       	movw	r30, r12
    609a:	80 81       	ld	r24, Z
    609c:	91 81       	ldd	r25, Z+1	; 0x01
    609e:	9c 01       	movw	r18, r24
    60a0:	44 27       	eor	r20, r20
    60a2:	37 fd       	sbrc	r19, 7
    60a4:	40 95       	com	r20
    60a6:	54 2f       	mov	r21, r20
    60a8:	82 e0       	ldi	r24, 0x02	; 2
    60aa:	90 e0       	ldi	r25, 0x00	; 0
    60ac:	c8 0e       	add	r12, r24
    60ae:	d9 1e       	adc	r13, r25
    60b0:	9f e6       	ldi	r25, 0x6F	; 111
    60b2:	f9 2e       	mov	r15, r25
    60b4:	f1 22       	and	r15, r17
    60b6:	57 ff       	sbrs	r21, 7
    60b8:	09 c0       	rjmp	.+18     	; 0x60cc <vfprintf+0x538>
    60ba:	50 95       	com	r21
    60bc:	40 95       	com	r20
    60be:	30 95       	com	r19
    60c0:	21 95       	neg	r18
    60c2:	3f 4f       	sbci	r19, 0xFF	; 255
    60c4:	4f 4f       	sbci	r20, 0xFF	; 255
    60c6:	5f 4f       	sbci	r21, 0xFF	; 255
    60c8:	90 e8       	ldi	r25, 0x80	; 128
    60ca:	f9 2a       	or	r15, r25
    60cc:	ca 01       	movw	r24, r20
    60ce:	b9 01       	movw	r22, r18
    60d0:	ae 01       	movw	r20, r28
    60d2:	4f 5f       	subi	r20, 0xFF	; 255
    60d4:	5f 4f       	sbci	r21, 0xFF	; 255
    60d6:	2a e0       	ldi	r18, 0x0A	; 10
    60d8:	30 e0       	ldi	r19, 0x00	; 0
    60da:	22 d4       	rcall	.+2116   	; 0x6920 <__ultoa_invert>
    60dc:	e8 2e       	mov	r14, r24
    60de:	e8 89       	ldd	r30, Y+16	; 0x10
    60e0:	ee 1a       	sub	r14, r30
    60e2:	40 c0       	rjmp	.+128    	; 0x6164 <vfprintf+0x5d0>
    60e4:	95 37       	cpi	r25, 0x75	; 117
    60e6:	21 f4       	brne	.+8      	; 0x60f0 <vfprintf+0x55c>
    60e8:	1f 7e       	andi	r17, 0xEF	; 239
    60ea:	2a e0       	ldi	r18, 0x0A	; 10
    60ec:	30 e0       	ldi	r19, 0x00	; 0
    60ee:	1c c0       	rjmp	.+56     	; 0x6128 <vfprintf+0x594>
    60f0:	19 7f       	andi	r17, 0xF9	; 249
    60f2:	9f 36       	cpi	r25, 0x6F	; 111
    60f4:	61 f0       	breq	.+24     	; 0x610e <vfprintf+0x57a>
    60f6:	90 37       	cpi	r25, 0x70	; 112
    60f8:	20 f4       	brcc	.+8      	; 0x6102 <vfprintf+0x56e>
    60fa:	98 35       	cpi	r25, 0x58	; 88
    60fc:	09 f0       	breq	.+2      	; 0x6100 <vfprintf+0x56c>
    60fe:	ab c0       	rjmp	.+342    	; 0x6256 <vfprintf+0x6c2>
    6100:	0f c0       	rjmp	.+30     	; 0x6120 <vfprintf+0x58c>
    6102:	90 37       	cpi	r25, 0x70	; 112
    6104:	39 f0       	breq	.+14     	; 0x6114 <vfprintf+0x580>
    6106:	98 37       	cpi	r25, 0x78	; 120
    6108:	09 f0       	breq	.+2      	; 0x610c <vfprintf+0x578>
    610a:	a5 c0       	rjmp	.+330    	; 0x6256 <vfprintf+0x6c2>
    610c:	04 c0       	rjmp	.+8      	; 0x6116 <vfprintf+0x582>
    610e:	28 e0       	ldi	r18, 0x08	; 8
    6110:	30 e0       	ldi	r19, 0x00	; 0
    6112:	0a c0       	rjmp	.+20     	; 0x6128 <vfprintf+0x594>
    6114:	10 61       	ori	r17, 0x10	; 16
    6116:	14 fd       	sbrc	r17, 4
    6118:	14 60       	ori	r17, 0x04	; 4
    611a:	20 e1       	ldi	r18, 0x10	; 16
    611c:	30 e0       	ldi	r19, 0x00	; 0
    611e:	04 c0       	rjmp	.+8      	; 0x6128 <vfprintf+0x594>
    6120:	14 fd       	sbrc	r17, 4
    6122:	16 60       	ori	r17, 0x06	; 6
    6124:	20 e1       	ldi	r18, 0x10	; 16
    6126:	32 e0       	ldi	r19, 0x02	; 2
    6128:	17 ff       	sbrs	r17, 7
    612a:	08 c0       	rjmp	.+16     	; 0x613c <vfprintf+0x5a8>
    612c:	f6 01       	movw	r30, r12
    612e:	60 81       	ld	r22, Z
    6130:	71 81       	ldd	r23, Z+1	; 0x01
    6132:	82 81       	ldd	r24, Z+2	; 0x02
    6134:	93 81       	ldd	r25, Z+3	; 0x03
    6136:	44 e0       	ldi	r20, 0x04	; 4
    6138:	50 e0       	ldi	r21, 0x00	; 0
    613a:	08 c0       	rjmp	.+16     	; 0x614c <vfprintf+0x5b8>
    613c:	f6 01       	movw	r30, r12
    613e:	80 81       	ld	r24, Z
    6140:	91 81       	ldd	r25, Z+1	; 0x01
    6142:	bc 01       	movw	r22, r24
    6144:	80 e0       	ldi	r24, 0x00	; 0
    6146:	90 e0       	ldi	r25, 0x00	; 0
    6148:	42 e0       	ldi	r20, 0x02	; 2
    614a:	50 e0       	ldi	r21, 0x00	; 0
    614c:	c4 0e       	add	r12, r20
    614e:	d5 1e       	adc	r13, r21
    6150:	ae 01       	movw	r20, r28
    6152:	4f 5f       	subi	r20, 0xFF	; 255
    6154:	5f 4f       	sbci	r21, 0xFF	; 255
    6156:	e4 d3       	rcall	.+1992   	; 0x6920 <__ultoa_invert>
    6158:	e8 2e       	mov	r14, r24
    615a:	58 89       	ldd	r21, Y+16	; 0x10
    615c:	e5 1a       	sub	r14, r21
    615e:	8f e7       	ldi	r24, 0x7F	; 127
    6160:	f8 2e       	mov	r15, r24
    6162:	f1 22       	and	r15, r17
    6164:	f6 fe       	sbrs	r15, 6
    6166:	0b c0       	rjmp	.+22     	; 0x617e <vfprintf+0x5ea>
    6168:	8e ef       	ldi	r24, 0xFE	; 254
    616a:	f8 22       	and	r15, r24
    616c:	e9 14       	cp	r14, r9
    616e:	38 f4       	brcc	.+14     	; 0x617e <vfprintf+0x5ea>
    6170:	f4 fe       	sbrs	r15, 4
    6172:	07 c0       	rjmp	.+14     	; 0x6182 <vfprintf+0x5ee>
    6174:	f2 fc       	sbrc	r15, 2
    6176:	05 c0       	rjmp	.+10     	; 0x6182 <vfprintf+0x5ee>
    6178:	9f ee       	ldi	r25, 0xEF	; 239
    617a:	f9 22       	and	r15, r25
    617c:	02 c0       	rjmp	.+4      	; 0x6182 <vfprintf+0x5ee>
    617e:	1e 2d       	mov	r17, r14
    6180:	01 c0       	rjmp	.+2      	; 0x6184 <vfprintf+0x5f0>
    6182:	19 2d       	mov	r17, r9
    6184:	f4 fe       	sbrs	r15, 4
    6186:	0d c0       	rjmp	.+26     	; 0x61a2 <vfprintf+0x60e>
    6188:	fe 01       	movw	r30, r28
    618a:	ee 0d       	add	r30, r14
    618c:	f1 1d       	adc	r31, r1
    618e:	80 81       	ld	r24, Z
    6190:	80 33       	cpi	r24, 0x30	; 48
    6192:	19 f4       	brne	.+6      	; 0x619a <vfprintf+0x606>
    6194:	e9 ee       	ldi	r30, 0xE9	; 233
    6196:	fe 22       	and	r15, r30
    6198:	08 c0       	rjmp	.+16     	; 0x61aa <vfprintf+0x616>
    619a:	1f 5f       	subi	r17, 0xFF	; 255
    619c:	f2 fe       	sbrs	r15, 2
    619e:	05 c0       	rjmp	.+10     	; 0x61aa <vfprintf+0x616>
    61a0:	03 c0       	rjmp	.+6      	; 0x61a8 <vfprintf+0x614>
    61a2:	8f 2d       	mov	r24, r15
    61a4:	86 78       	andi	r24, 0x86	; 134
    61a6:	09 f0       	breq	.+2      	; 0x61aa <vfprintf+0x616>
    61a8:	1f 5f       	subi	r17, 0xFF	; 255
    61aa:	0f 2d       	mov	r16, r15
    61ac:	f3 fc       	sbrc	r15, 3
    61ae:	13 c0       	rjmp	.+38     	; 0x61d6 <vfprintf+0x642>
    61b0:	f0 fe       	sbrs	r15, 0
    61b2:	0e c0       	rjmp	.+28     	; 0x61d0 <vfprintf+0x63c>
    61b4:	18 15       	cp	r17, r8
    61b6:	10 f0       	brcs	.+4      	; 0x61bc <vfprintf+0x628>
    61b8:	9e 2c       	mov	r9, r14
    61ba:	0a c0       	rjmp	.+20     	; 0x61d0 <vfprintf+0x63c>
    61bc:	9e 2c       	mov	r9, r14
    61be:	98 0c       	add	r9, r8
    61c0:	91 1a       	sub	r9, r17
    61c2:	18 2d       	mov	r17, r8
    61c4:	05 c0       	rjmp	.+10     	; 0x61d0 <vfprintf+0x63c>
    61c6:	80 e2       	ldi	r24, 0x20	; 32
    61c8:	90 e0       	ldi	r25, 0x00	; 0
    61ca:	b3 01       	movw	r22, r6
    61cc:	36 d3       	rcall	.+1644   	; 0x683a <fputc>
    61ce:	1f 5f       	subi	r17, 0xFF	; 255
    61d0:	18 15       	cp	r17, r8
    61d2:	c8 f3       	brcs	.-14     	; 0x61c6 <vfprintf+0x632>
    61d4:	04 c0       	rjmp	.+8      	; 0x61de <vfprintf+0x64a>
    61d6:	18 15       	cp	r17, r8
    61d8:	10 f4       	brcc	.+4      	; 0x61de <vfprintf+0x64a>
    61da:	81 1a       	sub	r8, r17
    61dc:	01 c0       	rjmp	.+2      	; 0x61e0 <vfprintf+0x64c>
    61de:	88 24       	eor	r8, r8
    61e0:	04 ff       	sbrs	r16, 4
    61e2:	0e c0       	rjmp	.+28     	; 0x6200 <vfprintf+0x66c>
    61e4:	80 e3       	ldi	r24, 0x30	; 48
    61e6:	90 e0       	ldi	r25, 0x00	; 0
    61e8:	b3 01       	movw	r22, r6
    61ea:	27 d3       	rcall	.+1614   	; 0x683a <fputc>
    61ec:	02 ff       	sbrs	r16, 2
    61ee:	1b c0       	rjmp	.+54     	; 0x6226 <vfprintf+0x692>
    61f0:	01 fd       	sbrc	r16, 1
    61f2:	03 c0       	rjmp	.+6      	; 0x61fa <vfprintf+0x666>
    61f4:	88 e7       	ldi	r24, 0x78	; 120
    61f6:	90 e0       	ldi	r25, 0x00	; 0
    61f8:	0e c0       	rjmp	.+28     	; 0x6216 <vfprintf+0x682>
    61fa:	88 e5       	ldi	r24, 0x58	; 88
    61fc:	90 e0       	ldi	r25, 0x00	; 0
    61fe:	0b c0       	rjmp	.+22     	; 0x6216 <vfprintf+0x682>
    6200:	80 2f       	mov	r24, r16
    6202:	86 78       	andi	r24, 0x86	; 134
    6204:	81 f0       	breq	.+32     	; 0x6226 <vfprintf+0x692>
    6206:	01 ff       	sbrs	r16, 1
    6208:	02 c0       	rjmp	.+4      	; 0x620e <vfprintf+0x67a>
    620a:	8b e2       	ldi	r24, 0x2B	; 43
    620c:	01 c0       	rjmp	.+2      	; 0x6210 <vfprintf+0x67c>
    620e:	80 e2       	ldi	r24, 0x20	; 32
    6210:	f7 fc       	sbrc	r15, 7
    6212:	8d e2       	ldi	r24, 0x2D	; 45
    6214:	90 e0       	ldi	r25, 0x00	; 0
    6216:	b3 01       	movw	r22, r6
    6218:	10 d3       	rcall	.+1568   	; 0x683a <fputc>
    621a:	05 c0       	rjmp	.+10     	; 0x6226 <vfprintf+0x692>
    621c:	80 e3       	ldi	r24, 0x30	; 48
    621e:	90 e0       	ldi	r25, 0x00	; 0
    6220:	b3 01       	movw	r22, r6
    6222:	0b d3       	rcall	.+1558   	; 0x683a <fputc>
    6224:	9a 94       	dec	r9
    6226:	e9 14       	cp	r14, r9
    6228:	c8 f3       	brcs	.-14     	; 0x621c <vfprintf+0x688>
    622a:	ea 94       	dec	r14
    622c:	e1 e0       	ldi	r30, 0x01	; 1
    622e:	f0 e0       	ldi	r31, 0x00	; 0
    6230:	ec 0f       	add	r30, r28
    6232:	fd 1f       	adc	r31, r29
    6234:	ee 0d       	add	r30, r14
    6236:	f1 1d       	adc	r31, r1
    6238:	80 81       	ld	r24, Z
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	b3 01       	movw	r22, r6
    623e:	fd d2       	rcall	.+1530   	; 0x683a <fputc>
    6240:	ee 20       	and	r14, r14
    6242:	99 f7       	brne	.-26     	; 0x622a <vfprintf+0x696>
    6244:	05 c0       	rjmp	.+10     	; 0x6250 <vfprintf+0x6bc>
    6246:	80 e2       	ldi	r24, 0x20	; 32
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	b3 01       	movw	r22, r6
    624c:	f6 d2       	rcall	.+1516   	; 0x683a <fputc>
    624e:	8a 94       	dec	r8
    6250:	88 20       	and	r8, r8
    6252:	c9 f7       	brne	.-14     	; 0x6246 <vfprintf+0x6b2>
    6254:	b6 cc       	rjmp	.-1684   	; 0x5bc2 <vfprintf+0x2e>
    6256:	f3 01       	movw	r30, r6
    6258:	66 81       	ldd	r22, Z+6	; 0x06
    625a:	77 81       	ldd	r23, Z+7	; 0x07
    625c:	cb 01       	movw	r24, r22
    625e:	61 96       	adiw	r28, 0x11	; 17
    6260:	e2 e1       	ldi	r30, 0x12	; 18
    6262:	70 c0       	rjmp	.+224    	; 0x6344 <__epilogue_restores__>

00006264 <__mulsi3>:
    6264:	62 9f       	mul	r22, r18
    6266:	d0 01       	movw	r26, r0
    6268:	73 9f       	mul	r23, r19
    626a:	f0 01       	movw	r30, r0
    626c:	82 9f       	mul	r24, r18
    626e:	e0 0d       	add	r30, r0
    6270:	f1 1d       	adc	r31, r1
    6272:	64 9f       	mul	r22, r20
    6274:	e0 0d       	add	r30, r0
    6276:	f1 1d       	adc	r31, r1
    6278:	92 9f       	mul	r25, r18
    627a:	f0 0d       	add	r31, r0
    627c:	83 9f       	mul	r24, r19
    627e:	f0 0d       	add	r31, r0
    6280:	74 9f       	mul	r23, r20
    6282:	f0 0d       	add	r31, r0
    6284:	65 9f       	mul	r22, r21
    6286:	f0 0d       	add	r31, r0
    6288:	99 27       	eor	r25, r25
    628a:	72 9f       	mul	r23, r18
    628c:	b0 0d       	add	r27, r0
    628e:	e1 1d       	adc	r30, r1
    6290:	f9 1f       	adc	r31, r25
    6292:	63 9f       	mul	r22, r19
    6294:	b0 0d       	add	r27, r0
    6296:	e1 1d       	adc	r30, r1
    6298:	f9 1f       	adc	r31, r25
    629a:	bd 01       	movw	r22, r26
    629c:	cf 01       	movw	r24, r30
    629e:	11 24       	eor	r1, r1
    62a0:	08 95       	ret

000062a2 <__divmodhi4>:
    62a2:	97 fb       	bst	r25, 7
    62a4:	09 2e       	mov	r0, r25
    62a6:	07 26       	eor	r0, r23
    62a8:	0a d0       	rcall	.+20     	; 0x62be <__divmodhi4_neg1>
    62aa:	77 fd       	sbrc	r23, 7
    62ac:	04 d0       	rcall	.+8      	; 0x62b6 <__divmodhi4_neg2>
    62ae:	65 d0       	rcall	.+202    	; 0x637a <__udivmodhi4>
    62b0:	06 d0       	rcall	.+12     	; 0x62be <__divmodhi4_neg1>
    62b2:	00 20       	and	r0, r0
    62b4:	1a f4       	brpl	.+6      	; 0x62bc <__divmodhi4_exit>

000062b6 <__divmodhi4_neg2>:
    62b6:	70 95       	com	r23
    62b8:	61 95       	neg	r22
    62ba:	7f 4f       	sbci	r23, 0xFF	; 255

000062bc <__divmodhi4_exit>:
    62bc:	08 95       	ret

000062be <__divmodhi4_neg1>:
    62be:	f6 f7       	brtc	.-4      	; 0x62bc <__divmodhi4_exit>
    62c0:	90 95       	com	r25
    62c2:	81 95       	neg	r24
    62c4:	9f 4f       	sbci	r25, 0xFF	; 255
    62c6:	08 95       	ret

000062c8 <__udivmodsi4>:
    62c8:	a1 e2       	ldi	r26, 0x21	; 33
    62ca:	1a 2e       	mov	r1, r26
    62cc:	aa 1b       	sub	r26, r26
    62ce:	bb 1b       	sub	r27, r27
    62d0:	fd 01       	movw	r30, r26
    62d2:	0d c0       	rjmp	.+26     	; 0x62ee <__udivmodsi4_ep>

000062d4 <__udivmodsi4_loop>:
    62d4:	aa 1f       	adc	r26, r26
    62d6:	bb 1f       	adc	r27, r27
    62d8:	ee 1f       	adc	r30, r30
    62da:	ff 1f       	adc	r31, r31
    62dc:	a2 17       	cp	r26, r18
    62de:	b3 07       	cpc	r27, r19
    62e0:	e4 07       	cpc	r30, r20
    62e2:	f5 07       	cpc	r31, r21
    62e4:	20 f0       	brcs	.+8      	; 0x62ee <__udivmodsi4_ep>
    62e6:	a2 1b       	sub	r26, r18
    62e8:	b3 0b       	sbc	r27, r19
    62ea:	e4 0b       	sbc	r30, r20
    62ec:	f5 0b       	sbc	r31, r21

000062ee <__udivmodsi4_ep>:
    62ee:	66 1f       	adc	r22, r22
    62f0:	77 1f       	adc	r23, r23
    62f2:	88 1f       	adc	r24, r24
    62f4:	99 1f       	adc	r25, r25
    62f6:	1a 94       	dec	r1
    62f8:	69 f7       	brne	.-38     	; 0x62d4 <__udivmodsi4_loop>
    62fa:	60 95       	com	r22
    62fc:	70 95       	com	r23
    62fe:	80 95       	com	r24
    6300:	90 95       	com	r25
    6302:	9b 01       	movw	r18, r22
    6304:	ac 01       	movw	r20, r24
    6306:	bd 01       	movw	r22, r26
    6308:	cf 01       	movw	r24, r30
    630a:	08 95       	ret

0000630c <__prologue_saves__>:
    630c:	2f 92       	push	r2
    630e:	3f 92       	push	r3
    6310:	4f 92       	push	r4
    6312:	5f 92       	push	r5
    6314:	6f 92       	push	r6
    6316:	7f 92       	push	r7
    6318:	8f 92       	push	r8
    631a:	9f 92       	push	r9
    631c:	af 92       	push	r10
    631e:	bf 92       	push	r11
    6320:	cf 92       	push	r12
    6322:	df 92       	push	r13
    6324:	ef 92       	push	r14
    6326:	ff 92       	push	r15
    6328:	0f 93       	push	r16
    632a:	1f 93       	push	r17
    632c:	cf 93       	push	r28
    632e:	df 93       	push	r29
    6330:	cd b7       	in	r28, 0x3d	; 61
    6332:	de b7       	in	r29, 0x3e	; 62
    6334:	ca 1b       	sub	r28, r26
    6336:	db 0b       	sbc	r29, r27
    6338:	0f b6       	in	r0, 0x3f	; 63
    633a:	f8 94       	cli
    633c:	de bf       	out	0x3e, r29	; 62
    633e:	0f be       	out	0x3f, r0	; 63
    6340:	cd bf       	out	0x3d, r28	; 61
    6342:	09 94       	ijmp

00006344 <__epilogue_restores__>:
    6344:	2a 88       	ldd	r2, Y+18	; 0x12
    6346:	39 88       	ldd	r3, Y+17	; 0x11
    6348:	48 88       	ldd	r4, Y+16	; 0x10
    634a:	5f 84       	ldd	r5, Y+15	; 0x0f
    634c:	6e 84       	ldd	r6, Y+14	; 0x0e
    634e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6350:	8c 84       	ldd	r8, Y+12	; 0x0c
    6352:	9b 84       	ldd	r9, Y+11	; 0x0b
    6354:	aa 84       	ldd	r10, Y+10	; 0x0a
    6356:	b9 84       	ldd	r11, Y+9	; 0x09
    6358:	c8 84       	ldd	r12, Y+8	; 0x08
    635a:	df 80       	ldd	r13, Y+7	; 0x07
    635c:	ee 80       	ldd	r14, Y+6	; 0x06
    635e:	fd 80       	ldd	r15, Y+5	; 0x05
    6360:	0c 81       	ldd	r16, Y+4	; 0x04
    6362:	1b 81       	ldd	r17, Y+3	; 0x03
    6364:	aa 81       	ldd	r26, Y+2	; 0x02
    6366:	b9 81       	ldd	r27, Y+1	; 0x01
    6368:	ce 0f       	add	r28, r30
    636a:	d1 1d       	adc	r29, r1
    636c:	0f b6       	in	r0, 0x3f	; 63
    636e:	f8 94       	cli
    6370:	de bf       	out	0x3e, r29	; 62
    6372:	0f be       	out	0x3f, r0	; 63
    6374:	cd bf       	out	0x3d, r28	; 61
    6376:	ed 01       	movw	r28, r26
    6378:	08 95       	ret

0000637a <__udivmodhi4>:
    637a:	aa 1b       	sub	r26, r26
    637c:	bb 1b       	sub	r27, r27
    637e:	51 e1       	ldi	r21, 0x11	; 17
    6380:	07 c0       	rjmp	.+14     	; 0x6390 <__udivmodhi4_ep>

00006382 <__udivmodhi4_loop>:
    6382:	aa 1f       	adc	r26, r26
    6384:	bb 1f       	adc	r27, r27
    6386:	a6 17       	cp	r26, r22
    6388:	b7 07       	cpc	r27, r23
    638a:	10 f0       	brcs	.+4      	; 0x6390 <__udivmodhi4_ep>
    638c:	a6 1b       	sub	r26, r22
    638e:	b7 0b       	sbc	r27, r23

00006390 <__udivmodhi4_ep>:
    6390:	88 1f       	adc	r24, r24
    6392:	99 1f       	adc	r25, r25
    6394:	5a 95       	dec	r21
    6396:	a9 f7       	brne	.-22     	; 0x6382 <__udivmodhi4_loop>
    6398:	80 95       	com	r24
    639a:	90 95       	com	r25
    639c:	bc 01       	movw	r22, r24
    639e:	cd 01       	movw	r24, r26
    63a0:	08 95       	ret

000063a2 <malloc>:
    63a2:	cf 93       	push	r28
    63a4:	df 93       	push	r29
    63a6:	bc 01       	movw	r22, r24
    63a8:	82 30       	cpi	r24, 0x02	; 2
    63aa:	91 05       	cpc	r25, r1
    63ac:	10 f4       	brcc	.+4      	; 0x63b2 <malloc+0x10>
    63ae:	62 e0       	ldi	r22, 0x02	; 2
    63b0:	70 e0       	ldi	r23, 0x00	; 0
    63b2:	a0 91 21 07 	lds	r26, 0x0721
    63b6:	b0 91 22 07 	lds	r27, 0x0722
    63ba:	ed 01       	movw	r28, r26
    63bc:	e0 e0       	ldi	r30, 0x00	; 0
    63be:	f0 e0       	ldi	r31, 0x00	; 0
    63c0:	40 e0       	ldi	r20, 0x00	; 0
    63c2:	50 e0       	ldi	r21, 0x00	; 0
    63c4:	21 c0       	rjmp	.+66     	; 0x6408 <malloc+0x66>
    63c6:	88 81       	ld	r24, Y
    63c8:	99 81       	ldd	r25, Y+1	; 0x01
    63ca:	86 17       	cp	r24, r22
    63cc:	97 07       	cpc	r25, r23
    63ce:	69 f4       	brne	.+26     	; 0x63ea <malloc+0x48>
    63d0:	8a 81       	ldd	r24, Y+2	; 0x02
    63d2:	9b 81       	ldd	r25, Y+3	; 0x03
    63d4:	30 97       	sbiw	r30, 0x00	; 0
    63d6:	19 f0       	breq	.+6      	; 0x63de <malloc+0x3c>
    63d8:	93 83       	std	Z+3, r25	; 0x03
    63da:	82 83       	std	Z+2, r24	; 0x02
    63dc:	04 c0       	rjmp	.+8      	; 0x63e6 <malloc+0x44>
    63de:	90 93 22 07 	sts	0x0722, r25
    63e2:	80 93 21 07 	sts	0x0721, r24
    63e6:	fe 01       	movw	r30, r28
    63e8:	34 c0       	rjmp	.+104    	; 0x6452 <malloc+0xb0>
    63ea:	68 17       	cp	r22, r24
    63ec:	79 07       	cpc	r23, r25
    63ee:	38 f4       	brcc	.+14     	; 0x63fe <malloc+0x5c>
    63f0:	41 15       	cp	r20, r1
    63f2:	51 05       	cpc	r21, r1
    63f4:	19 f0       	breq	.+6      	; 0x63fc <malloc+0x5a>
    63f6:	84 17       	cp	r24, r20
    63f8:	95 07       	cpc	r25, r21
    63fa:	08 f4       	brcc	.+2      	; 0x63fe <malloc+0x5c>
    63fc:	ac 01       	movw	r20, r24
    63fe:	fe 01       	movw	r30, r28
    6400:	8a 81       	ldd	r24, Y+2	; 0x02
    6402:	9b 81       	ldd	r25, Y+3	; 0x03
    6404:	9c 01       	movw	r18, r24
    6406:	e9 01       	movw	r28, r18
    6408:	20 97       	sbiw	r28, 0x00	; 0
    640a:	e9 f6       	brne	.-70     	; 0x63c6 <malloc+0x24>
    640c:	41 15       	cp	r20, r1
    640e:	51 05       	cpc	r21, r1
    6410:	a9 f1       	breq	.+106    	; 0x647c <malloc+0xda>
    6412:	ca 01       	movw	r24, r20
    6414:	86 1b       	sub	r24, r22
    6416:	97 0b       	sbc	r25, r23
    6418:	04 97       	sbiw	r24, 0x04	; 4
    641a:	08 f4       	brcc	.+2      	; 0x641e <malloc+0x7c>
    641c:	ba 01       	movw	r22, r20
    641e:	e0 e0       	ldi	r30, 0x00	; 0
    6420:	f0 e0       	ldi	r31, 0x00	; 0
    6422:	2a c0       	rjmp	.+84     	; 0x6478 <malloc+0xd6>
    6424:	8d 91       	ld	r24, X+
    6426:	9c 91       	ld	r25, X
    6428:	11 97       	sbiw	r26, 0x01	; 1
    642a:	84 17       	cp	r24, r20
    642c:	95 07       	cpc	r25, r21
    642e:	f9 f4       	brne	.+62     	; 0x646e <malloc+0xcc>
    6430:	64 17       	cp	r22, r20
    6432:	75 07       	cpc	r23, r21
    6434:	81 f4       	brne	.+32     	; 0x6456 <malloc+0xb4>
    6436:	12 96       	adiw	r26, 0x02	; 2
    6438:	8d 91       	ld	r24, X+
    643a:	9c 91       	ld	r25, X
    643c:	13 97       	sbiw	r26, 0x03	; 3
    643e:	30 97       	sbiw	r30, 0x00	; 0
    6440:	19 f0       	breq	.+6      	; 0x6448 <malloc+0xa6>
    6442:	93 83       	std	Z+3, r25	; 0x03
    6444:	82 83       	std	Z+2, r24	; 0x02
    6446:	04 c0       	rjmp	.+8      	; 0x6450 <malloc+0xae>
    6448:	90 93 22 07 	sts	0x0722, r25
    644c:	80 93 21 07 	sts	0x0721, r24
    6450:	fd 01       	movw	r30, r26
    6452:	32 96       	adiw	r30, 0x02	; 2
    6454:	4f c0       	rjmp	.+158    	; 0x64f4 <malloc+0x152>
    6456:	ca 01       	movw	r24, r20
    6458:	86 1b       	sub	r24, r22
    645a:	97 0b       	sbc	r25, r23
    645c:	fd 01       	movw	r30, r26
    645e:	e8 0f       	add	r30, r24
    6460:	f9 1f       	adc	r31, r25
    6462:	61 93       	st	Z+, r22
    6464:	71 93       	st	Z+, r23
    6466:	02 97       	sbiw	r24, 0x02	; 2
    6468:	8d 93       	st	X+, r24
    646a:	9c 93       	st	X, r25
    646c:	43 c0       	rjmp	.+134    	; 0x64f4 <malloc+0x152>
    646e:	fd 01       	movw	r30, r26
    6470:	82 81       	ldd	r24, Z+2	; 0x02
    6472:	93 81       	ldd	r25, Z+3	; 0x03
    6474:	9c 01       	movw	r18, r24
    6476:	d9 01       	movw	r26, r18
    6478:	10 97       	sbiw	r26, 0x00	; 0
    647a:	a1 f6       	brne	.-88     	; 0x6424 <malloc+0x82>
    647c:	80 91 1f 07 	lds	r24, 0x071F
    6480:	90 91 20 07 	lds	r25, 0x0720
    6484:	89 2b       	or	r24, r25
    6486:	41 f4       	brne	.+16     	; 0x6498 <malloc+0xf6>
    6488:	80 91 e6 03 	lds	r24, 0x03E6
    648c:	90 91 e7 03 	lds	r25, 0x03E7
    6490:	90 93 20 07 	sts	0x0720, r25
    6494:	80 93 1f 07 	sts	0x071F, r24
    6498:	40 91 e8 03 	lds	r20, 0x03E8
    649c:	50 91 e9 03 	lds	r21, 0x03E9
    64a0:	41 15       	cp	r20, r1
    64a2:	51 05       	cpc	r21, r1
    64a4:	41 f4       	brne	.+16     	; 0x64b6 <malloc+0x114>
    64a6:	4d b7       	in	r20, 0x3d	; 61
    64a8:	5e b7       	in	r21, 0x3e	; 62
    64aa:	80 91 e4 03 	lds	r24, 0x03E4
    64ae:	90 91 e5 03 	lds	r25, 0x03E5
    64b2:	48 1b       	sub	r20, r24
    64b4:	59 0b       	sbc	r21, r25
    64b6:	20 91 1f 07 	lds	r18, 0x071F
    64ba:	30 91 20 07 	lds	r19, 0x0720
    64be:	24 17       	cp	r18, r20
    64c0:	35 07       	cpc	r19, r21
    64c2:	b0 f4       	brcc	.+44     	; 0x64f0 <malloc+0x14e>
    64c4:	ca 01       	movw	r24, r20
    64c6:	82 1b       	sub	r24, r18
    64c8:	93 0b       	sbc	r25, r19
    64ca:	86 17       	cp	r24, r22
    64cc:	97 07       	cpc	r25, r23
    64ce:	80 f0       	brcs	.+32     	; 0x64f0 <malloc+0x14e>
    64d0:	ab 01       	movw	r20, r22
    64d2:	4e 5f       	subi	r20, 0xFE	; 254
    64d4:	5f 4f       	sbci	r21, 0xFF	; 255
    64d6:	84 17       	cp	r24, r20
    64d8:	95 07       	cpc	r25, r21
    64da:	50 f0       	brcs	.+20     	; 0x64f0 <malloc+0x14e>
    64dc:	42 0f       	add	r20, r18
    64de:	53 1f       	adc	r21, r19
    64e0:	50 93 20 07 	sts	0x0720, r21
    64e4:	40 93 1f 07 	sts	0x071F, r20
    64e8:	f9 01       	movw	r30, r18
    64ea:	61 93       	st	Z+, r22
    64ec:	71 93       	st	Z+, r23
    64ee:	02 c0       	rjmp	.+4      	; 0x64f4 <malloc+0x152>
    64f0:	e0 e0       	ldi	r30, 0x00	; 0
    64f2:	f0 e0       	ldi	r31, 0x00	; 0
    64f4:	cf 01       	movw	r24, r30
    64f6:	df 91       	pop	r29
    64f8:	cf 91       	pop	r28
    64fa:	08 95       	ret

000064fc <free>:
    64fc:	cf 93       	push	r28
    64fe:	df 93       	push	r29
    6500:	00 97       	sbiw	r24, 0x00	; 0
    6502:	09 f4       	brne	.+2      	; 0x6506 <free+0xa>
    6504:	50 c0       	rjmp	.+160    	; 0x65a6 <free+0xaa>
    6506:	ec 01       	movw	r28, r24
    6508:	22 97       	sbiw	r28, 0x02	; 2
    650a:	1b 82       	std	Y+3, r1	; 0x03
    650c:	1a 82       	std	Y+2, r1	; 0x02
    650e:	a0 91 21 07 	lds	r26, 0x0721
    6512:	b0 91 22 07 	lds	r27, 0x0722
    6516:	10 97       	sbiw	r26, 0x00	; 0
    6518:	09 f1       	breq	.+66     	; 0x655c <free+0x60>
    651a:	40 e0       	ldi	r20, 0x00	; 0
    651c:	50 e0       	ldi	r21, 0x00	; 0
    651e:	ac 17       	cp	r26, r28
    6520:	bd 07       	cpc	r27, r29
    6522:	08 f1       	brcs	.+66     	; 0x6566 <free+0x6a>
    6524:	bb 83       	std	Y+3, r27	; 0x03
    6526:	aa 83       	std	Y+2, r26	; 0x02
    6528:	fe 01       	movw	r30, r28
    652a:	21 91       	ld	r18, Z+
    652c:	31 91       	ld	r19, Z+
    652e:	e2 0f       	add	r30, r18
    6530:	f3 1f       	adc	r31, r19
    6532:	ae 17       	cp	r26, r30
    6534:	bf 07       	cpc	r27, r31
    6536:	79 f4       	brne	.+30     	; 0x6556 <free+0x5a>
    6538:	8d 91       	ld	r24, X+
    653a:	9c 91       	ld	r25, X
    653c:	11 97       	sbiw	r26, 0x01	; 1
    653e:	28 0f       	add	r18, r24
    6540:	39 1f       	adc	r19, r25
    6542:	2e 5f       	subi	r18, 0xFE	; 254
    6544:	3f 4f       	sbci	r19, 0xFF	; 255
    6546:	39 83       	std	Y+1, r19	; 0x01
    6548:	28 83       	st	Y, r18
    654a:	12 96       	adiw	r26, 0x02	; 2
    654c:	8d 91       	ld	r24, X+
    654e:	9c 91       	ld	r25, X
    6550:	13 97       	sbiw	r26, 0x03	; 3
    6552:	9b 83       	std	Y+3, r25	; 0x03
    6554:	8a 83       	std	Y+2, r24	; 0x02
    6556:	41 15       	cp	r20, r1
    6558:	51 05       	cpc	r21, r1
    655a:	71 f4       	brne	.+28     	; 0x6578 <free+0x7c>
    655c:	d0 93 22 07 	sts	0x0722, r29
    6560:	c0 93 21 07 	sts	0x0721, r28
    6564:	20 c0       	rjmp	.+64     	; 0x65a6 <free+0xaa>
    6566:	12 96       	adiw	r26, 0x02	; 2
    6568:	8d 91       	ld	r24, X+
    656a:	9c 91       	ld	r25, X
    656c:	13 97       	sbiw	r26, 0x03	; 3
    656e:	ad 01       	movw	r20, r26
    6570:	00 97       	sbiw	r24, 0x00	; 0
    6572:	11 f0       	breq	.+4      	; 0x6578 <free+0x7c>
    6574:	dc 01       	movw	r26, r24
    6576:	d3 cf       	rjmp	.-90     	; 0x651e <free+0x22>
    6578:	fa 01       	movw	r30, r20
    657a:	d3 83       	std	Z+3, r29	; 0x03
    657c:	c2 83       	std	Z+2, r28	; 0x02
    657e:	21 91       	ld	r18, Z+
    6580:	31 91       	ld	r19, Z+
    6582:	e2 0f       	add	r30, r18
    6584:	f3 1f       	adc	r31, r19
    6586:	ce 17       	cp	r28, r30
    6588:	df 07       	cpc	r29, r31
    658a:	69 f4       	brne	.+26     	; 0x65a6 <free+0xaa>
    658c:	88 81       	ld	r24, Y
    658e:	99 81       	ldd	r25, Y+1	; 0x01
    6590:	28 0f       	add	r18, r24
    6592:	39 1f       	adc	r19, r25
    6594:	2e 5f       	subi	r18, 0xFE	; 254
    6596:	3f 4f       	sbci	r19, 0xFF	; 255
    6598:	fa 01       	movw	r30, r20
    659a:	31 83       	std	Z+1, r19	; 0x01
    659c:	20 83       	st	Z, r18
    659e:	8a 81       	ldd	r24, Y+2	; 0x02
    65a0:	9b 81       	ldd	r25, Y+3	; 0x03
    65a2:	93 83       	std	Z+3, r25	; 0x03
    65a4:	82 83       	std	Z+2, r24	; 0x02
    65a6:	df 91       	pop	r29
    65a8:	cf 91       	pop	r28
    65aa:	08 95       	ret

000065ac <do_rand>:
    65ac:	a0 e0       	ldi	r26, 0x00	; 0
    65ae:	b0 e0       	ldi	r27, 0x00	; 0
    65b0:	eb ed       	ldi	r30, 0xDB	; 219
    65b2:	f2 e3       	ldi	r31, 0x32	; 50
    65b4:	b3 ce       	rjmp	.-666    	; 0x631c <__prologue_saves__+0x10>
    65b6:	ec 01       	movw	r28, r24
    65b8:	a8 80       	ld	r10, Y
    65ba:	b9 80       	ldd	r11, Y+1	; 0x01
    65bc:	ca 80       	ldd	r12, Y+2	; 0x02
    65be:	db 80       	ldd	r13, Y+3	; 0x03
    65c0:	a1 14       	cp	r10, r1
    65c2:	b1 04       	cpc	r11, r1
    65c4:	c1 04       	cpc	r12, r1
    65c6:	d1 04       	cpc	r13, r1
    65c8:	41 f4       	brne	.+16     	; 0x65da <do_rand+0x2e>
    65ca:	84 e2       	ldi	r24, 0x24	; 36
    65cc:	a8 2e       	mov	r10, r24
    65ce:	89 ed       	ldi	r24, 0xD9	; 217
    65d0:	b8 2e       	mov	r11, r24
    65d2:	8b e5       	ldi	r24, 0x5B	; 91
    65d4:	c8 2e       	mov	r12, r24
    65d6:	87 e0       	ldi	r24, 0x07	; 7
    65d8:	d8 2e       	mov	r13, r24
    65da:	c6 01       	movw	r24, r12
    65dc:	b5 01       	movw	r22, r10
    65de:	2d e1       	ldi	r18, 0x1D	; 29
    65e0:	33 ef       	ldi	r19, 0xF3	; 243
    65e2:	41 e0       	ldi	r20, 0x01	; 1
    65e4:	50 e0       	ldi	r21, 0x00	; 0
    65e6:	fa d1       	rcall	.+1012   	; 0x69dc <__divmodsi4>
    65e8:	27 ea       	ldi	r18, 0xA7	; 167
    65ea:	31 e4       	ldi	r19, 0x41	; 65
    65ec:	40 e0       	ldi	r20, 0x00	; 0
    65ee:	50 e0       	ldi	r21, 0x00	; 0
    65f0:	39 de       	rcall	.-910    	; 0x6264 <__mulsi3>
    65f2:	7b 01       	movw	r14, r22
    65f4:	8c 01       	movw	r16, r24
    65f6:	c6 01       	movw	r24, r12
    65f8:	b5 01       	movw	r22, r10
    65fa:	2d e1       	ldi	r18, 0x1D	; 29
    65fc:	33 ef       	ldi	r19, 0xF3	; 243
    65fe:	41 e0       	ldi	r20, 0x01	; 1
    6600:	50 e0       	ldi	r21, 0x00	; 0
    6602:	ec d1       	rcall	.+984    	; 0x69dc <__divmodsi4>
    6604:	ca 01       	movw	r24, r20
    6606:	b9 01       	movw	r22, r18
    6608:	2c ee       	ldi	r18, 0xEC	; 236
    660a:	34 ef       	ldi	r19, 0xF4	; 244
    660c:	4f ef       	ldi	r20, 0xFF	; 255
    660e:	5f ef       	ldi	r21, 0xFF	; 255
    6610:	29 de       	rcall	.-942    	; 0x6264 <__mulsi3>
    6612:	6e 0d       	add	r22, r14
    6614:	7f 1d       	adc	r23, r15
    6616:	80 1f       	adc	r24, r16
    6618:	91 1f       	adc	r25, r17
    661a:	97 ff       	sbrs	r25, 7
    661c:	04 c0       	rjmp	.+8      	; 0x6626 <do_rand+0x7a>
    661e:	61 50       	subi	r22, 0x01	; 1
    6620:	70 40       	sbci	r23, 0x00	; 0
    6622:	80 40       	sbci	r24, 0x00	; 0
    6624:	90 48       	sbci	r25, 0x80	; 128
    6626:	68 83       	st	Y, r22
    6628:	79 83       	std	Y+1, r23	; 0x01
    662a:	8a 83       	std	Y+2, r24	; 0x02
    662c:	9b 83       	std	Y+3, r25	; 0x03
    662e:	9b 01       	movw	r18, r22
    6630:	3f 77       	andi	r19, 0x7F	; 127
    6632:	c9 01       	movw	r24, r18
    6634:	cd b7       	in	r28, 0x3d	; 61
    6636:	de b7       	in	r29, 0x3e	; 62
    6638:	ea e0       	ldi	r30, 0x0A	; 10
    663a:	8c ce       	rjmp	.-744    	; 0x6354 <__epilogue_restores__+0x10>

0000663c <rand_r>:
    663c:	b7 df       	rcall	.-146    	; 0x65ac <do_rand>
    663e:	08 95       	ret

00006640 <rand>:
    6640:	8a ee       	ldi	r24, 0xEA	; 234
    6642:	93 e0       	ldi	r25, 0x03	; 3
    6644:	b3 df       	rcall	.-154    	; 0x65ac <do_rand>
    6646:	08 95       	ret

00006648 <srand>:
    6648:	a0 e0       	ldi	r26, 0x00	; 0
    664a:	b0 e0       	ldi	r27, 0x00	; 0
    664c:	80 93 ea 03 	sts	0x03EA, r24
    6650:	90 93 eb 03 	sts	0x03EB, r25
    6654:	a0 93 ec 03 	sts	0x03EC, r26
    6658:	b0 93 ed 03 	sts	0x03ED, r27
    665c:	08 95       	ret

0000665e <__ftoa_engine>:
    665e:	28 30       	cpi	r18, 0x08	; 8
    6660:	08 f0       	brcs	.+2      	; 0x6664 <__ftoa_engine+0x6>
    6662:	27 e0       	ldi	r18, 0x07	; 7
    6664:	33 27       	eor	r19, r19
    6666:	da 01       	movw	r26, r20
    6668:	99 0f       	add	r25, r25
    666a:	31 1d       	adc	r19, r1
    666c:	87 fd       	sbrc	r24, 7
    666e:	91 60       	ori	r25, 0x01	; 1
    6670:	00 96       	adiw	r24, 0x00	; 0
    6672:	61 05       	cpc	r22, r1
    6674:	71 05       	cpc	r23, r1
    6676:	39 f4       	brne	.+14     	; 0x6686 <__ftoa_engine+0x28>
    6678:	32 60       	ori	r19, 0x02	; 2
    667a:	2e 5f       	subi	r18, 0xFE	; 254
    667c:	3d 93       	st	X+, r19
    667e:	30 e3       	ldi	r19, 0x30	; 48
    6680:	2a 95       	dec	r18
    6682:	e1 f7       	brne	.-8      	; 0x667c <__ftoa_engine+0x1e>
    6684:	08 95       	ret
    6686:	9f 3f       	cpi	r25, 0xFF	; 255
    6688:	30 f0       	brcs	.+12     	; 0x6696 <__ftoa_engine+0x38>
    668a:	80 38       	cpi	r24, 0x80	; 128
    668c:	71 05       	cpc	r23, r1
    668e:	61 05       	cpc	r22, r1
    6690:	09 f0       	breq	.+2      	; 0x6694 <__ftoa_engine+0x36>
    6692:	3c 5f       	subi	r19, 0xFC	; 252
    6694:	3c 5f       	subi	r19, 0xFC	; 252
    6696:	3d 93       	st	X+, r19
    6698:	91 30       	cpi	r25, 0x01	; 1
    669a:	08 f0       	brcs	.+2      	; 0x669e <__ftoa_engine+0x40>
    669c:	80 68       	ori	r24, 0x80	; 128
    669e:	91 1d       	adc	r25, r1
    66a0:	df 93       	push	r29
    66a2:	cf 93       	push	r28
    66a4:	1f 93       	push	r17
    66a6:	0f 93       	push	r16
    66a8:	ff 92       	push	r15
    66aa:	ef 92       	push	r14
    66ac:	19 2f       	mov	r17, r25
    66ae:	98 7f       	andi	r25, 0xF8	; 248
    66b0:	96 95       	lsr	r25
    66b2:	e9 2f       	mov	r30, r25
    66b4:	96 95       	lsr	r25
    66b6:	96 95       	lsr	r25
    66b8:	e9 0f       	add	r30, r25
    66ba:	ff 27       	eor	r31, r31
    66bc:	ef 53       	subi	r30, 0x3F	; 63
    66be:	fa 4f       	sbci	r31, 0xFA	; 250
    66c0:	99 27       	eor	r25, r25
    66c2:	33 27       	eor	r19, r19
    66c4:	ee 24       	eor	r14, r14
    66c6:	ff 24       	eor	r15, r15
    66c8:	a7 01       	movw	r20, r14
    66ca:	e7 01       	movw	r28, r14
    66cc:	05 90       	lpm	r0, Z+
    66ce:	08 94       	sec
    66d0:	07 94       	ror	r0
    66d2:	28 f4       	brcc	.+10     	; 0x66de <__ftoa_engine+0x80>
    66d4:	36 0f       	add	r19, r22
    66d6:	e7 1e       	adc	r14, r23
    66d8:	f8 1e       	adc	r15, r24
    66da:	49 1f       	adc	r20, r25
    66dc:	51 1d       	adc	r21, r1
    66de:	66 0f       	add	r22, r22
    66e0:	77 1f       	adc	r23, r23
    66e2:	88 1f       	adc	r24, r24
    66e4:	99 1f       	adc	r25, r25
    66e6:	06 94       	lsr	r0
    66e8:	a1 f7       	brne	.-24     	; 0x66d2 <__ftoa_engine+0x74>
    66ea:	05 90       	lpm	r0, Z+
    66ec:	07 94       	ror	r0
    66ee:	28 f4       	brcc	.+10     	; 0x66fa <__ftoa_engine+0x9c>
    66f0:	e7 0e       	add	r14, r23
    66f2:	f8 1e       	adc	r15, r24
    66f4:	49 1f       	adc	r20, r25
    66f6:	56 1f       	adc	r21, r22
    66f8:	c1 1d       	adc	r28, r1
    66fa:	77 0f       	add	r23, r23
    66fc:	88 1f       	adc	r24, r24
    66fe:	99 1f       	adc	r25, r25
    6700:	66 1f       	adc	r22, r22
    6702:	06 94       	lsr	r0
    6704:	a1 f7       	brne	.-24     	; 0x66ee <__ftoa_engine+0x90>
    6706:	05 90       	lpm	r0, Z+
    6708:	07 94       	ror	r0
    670a:	28 f4       	brcc	.+10     	; 0x6716 <__ftoa_engine+0xb8>
    670c:	f8 0e       	add	r15, r24
    670e:	49 1f       	adc	r20, r25
    6710:	56 1f       	adc	r21, r22
    6712:	c7 1f       	adc	r28, r23
    6714:	d1 1d       	adc	r29, r1
    6716:	88 0f       	add	r24, r24
    6718:	99 1f       	adc	r25, r25
    671a:	66 1f       	adc	r22, r22
    671c:	77 1f       	adc	r23, r23
    671e:	06 94       	lsr	r0
    6720:	a1 f7       	brne	.-24     	; 0x670a <__ftoa_engine+0xac>
    6722:	05 90       	lpm	r0, Z+
    6724:	07 94       	ror	r0
    6726:	20 f4       	brcc	.+8      	; 0x6730 <__ftoa_engine+0xd2>
    6728:	49 0f       	add	r20, r25
    672a:	56 1f       	adc	r21, r22
    672c:	c7 1f       	adc	r28, r23
    672e:	d8 1f       	adc	r29, r24
    6730:	99 0f       	add	r25, r25
    6732:	66 1f       	adc	r22, r22
    6734:	77 1f       	adc	r23, r23
    6736:	88 1f       	adc	r24, r24
    6738:	06 94       	lsr	r0
    673a:	a9 f7       	brne	.-22     	; 0x6726 <__ftoa_engine+0xc8>
    673c:	84 91       	lpm	r24, Z+
    673e:	10 95       	com	r17
    6740:	17 70       	andi	r17, 0x07	; 7
    6742:	41 f0       	breq	.+16     	; 0x6754 <__ftoa_engine+0xf6>
    6744:	d6 95       	lsr	r29
    6746:	c7 95       	ror	r28
    6748:	57 95       	ror	r21
    674a:	47 95       	ror	r20
    674c:	f7 94       	ror	r15
    674e:	e7 94       	ror	r14
    6750:	1a 95       	dec	r17
    6752:	c1 f7       	brne	.-16     	; 0x6744 <__ftoa_engine+0xe6>
    6754:	e7 e6       	ldi	r30, 0x67	; 103
    6756:	f5 e0       	ldi	r31, 0x05	; 5
    6758:	68 94       	set
    675a:	15 90       	lpm	r1, Z+
    675c:	15 91       	lpm	r17, Z+
    675e:	35 91       	lpm	r19, Z+
    6760:	65 91       	lpm	r22, Z+
    6762:	95 91       	lpm	r25, Z+
    6764:	05 90       	lpm	r0, Z+
    6766:	7f e2       	ldi	r23, 0x2F	; 47
    6768:	73 95       	inc	r23
    676a:	e1 18       	sub	r14, r1
    676c:	f1 0a       	sbc	r15, r17
    676e:	43 0b       	sbc	r20, r19
    6770:	56 0b       	sbc	r21, r22
    6772:	c9 0b       	sbc	r28, r25
    6774:	d0 09       	sbc	r29, r0
    6776:	c0 f7       	brcc	.-16     	; 0x6768 <__ftoa_engine+0x10a>
    6778:	e1 0c       	add	r14, r1
    677a:	f1 1e       	adc	r15, r17
    677c:	43 1f       	adc	r20, r19
    677e:	56 1f       	adc	r21, r22
    6780:	c9 1f       	adc	r28, r25
    6782:	d0 1d       	adc	r29, r0
    6784:	7e f4       	brtc	.+30     	; 0x67a4 <__ftoa_engine+0x146>
    6786:	70 33       	cpi	r23, 0x30	; 48
    6788:	11 f4       	brne	.+4      	; 0x678e <__ftoa_engine+0x130>
    678a:	8a 95       	dec	r24
    678c:	e6 cf       	rjmp	.-52     	; 0x675a <__ftoa_engine+0xfc>
    678e:	e8 94       	clt
    6790:	01 50       	subi	r16, 0x01	; 1
    6792:	30 f0       	brcs	.+12     	; 0x67a0 <__ftoa_engine+0x142>
    6794:	08 0f       	add	r16, r24
    6796:	0a f4       	brpl	.+2      	; 0x679a <__ftoa_engine+0x13c>
    6798:	00 27       	eor	r16, r16
    679a:	02 17       	cp	r16, r18
    679c:	08 f4       	brcc	.+2      	; 0x67a0 <__ftoa_engine+0x142>
    679e:	20 2f       	mov	r18, r16
    67a0:	23 95       	inc	r18
    67a2:	02 2f       	mov	r16, r18
    67a4:	7a 33       	cpi	r23, 0x3A	; 58
    67a6:	28 f0       	brcs	.+10     	; 0x67b2 <__ftoa_engine+0x154>
    67a8:	79 e3       	ldi	r23, 0x39	; 57
    67aa:	7d 93       	st	X+, r23
    67ac:	2a 95       	dec	r18
    67ae:	e9 f7       	brne	.-6      	; 0x67aa <__ftoa_engine+0x14c>
    67b0:	10 c0       	rjmp	.+32     	; 0x67d2 <__ftoa_engine+0x174>
    67b2:	7d 93       	st	X+, r23
    67b4:	2a 95       	dec	r18
    67b6:	89 f6       	brne	.-94     	; 0x675a <__ftoa_engine+0xfc>
    67b8:	06 94       	lsr	r0
    67ba:	97 95       	ror	r25
    67bc:	67 95       	ror	r22
    67be:	37 95       	ror	r19
    67c0:	17 95       	ror	r17
    67c2:	17 94       	ror	r1
    67c4:	e1 18       	sub	r14, r1
    67c6:	f1 0a       	sbc	r15, r17
    67c8:	43 0b       	sbc	r20, r19
    67ca:	56 0b       	sbc	r21, r22
    67cc:	c9 0b       	sbc	r28, r25
    67ce:	d0 09       	sbc	r29, r0
    67d0:	98 f0       	brcs	.+38     	; 0x67f8 <__ftoa_engine+0x19a>
    67d2:	23 95       	inc	r18
    67d4:	7e 91       	ld	r23, -X
    67d6:	73 95       	inc	r23
    67d8:	7a 33       	cpi	r23, 0x3A	; 58
    67da:	08 f0       	brcs	.+2      	; 0x67de <__ftoa_engine+0x180>
    67dc:	70 e3       	ldi	r23, 0x30	; 48
    67de:	7c 93       	st	X, r23
    67e0:	20 13       	cpse	r18, r16
    67e2:	b8 f7       	brcc	.-18     	; 0x67d2 <__ftoa_engine+0x174>
    67e4:	7e 91       	ld	r23, -X
    67e6:	70 61       	ori	r23, 0x10	; 16
    67e8:	7d 93       	st	X+, r23
    67ea:	30 f0       	brcs	.+12     	; 0x67f8 <__ftoa_engine+0x19a>
    67ec:	83 95       	inc	r24
    67ee:	71 e3       	ldi	r23, 0x31	; 49
    67f0:	7d 93       	st	X+, r23
    67f2:	70 e3       	ldi	r23, 0x30	; 48
    67f4:	2a 95       	dec	r18
    67f6:	e1 f7       	brne	.-8      	; 0x67f0 <__ftoa_engine+0x192>
    67f8:	11 24       	eor	r1, r1
    67fa:	ef 90       	pop	r14
    67fc:	ff 90       	pop	r15
    67fe:	0f 91       	pop	r16
    6800:	1f 91       	pop	r17
    6802:	cf 91       	pop	r28
    6804:	df 91       	pop	r29
    6806:	99 27       	eor	r25, r25
    6808:	87 fd       	sbrc	r24, 7
    680a:	90 95       	com	r25
    680c:	08 95       	ret

0000680e <strnlen_P>:
    680e:	fc 01       	movw	r30, r24
    6810:	05 90       	lpm	r0, Z+
    6812:	61 50       	subi	r22, 0x01	; 1
    6814:	70 40       	sbci	r23, 0x00	; 0
    6816:	01 10       	cpse	r0, r1
    6818:	d8 f7       	brcc	.-10     	; 0x6810 <strnlen_P+0x2>
    681a:	80 95       	com	r24
    681c:	90 95       	com	r25
    681e:	8e 0f       	add	r24, r30
    6820:	9f 1f       	adc	r25, r31
    6822:	08 95       	ret

00006824 <strnlen>:
    6824:	fc 01       	movw	r30, r24
    6826:	61 50       	subi	r22, 0x01	; 1
    6828:	70 40       	sbci	r23, 0x00	; 0
    682a:	01 90       	ld	r0, Z+
    682c:	01 10       	cpse	r0, r1
    682e:	d8 f7       	brcc	.-10     	; 0x6826 <strnlen+0x2>
    6830:	80 95       	com	r24
    6832:	90 95       	com	r25
    6834:	8e 0f       	add	r24, r30
    6836:	9f 1f       	adc	r25, r31
    6838:	08 95       	ret

0000683a <fputc>:
    683a:	0f 93       	push	r16
    683c:	1f 93       	push	r17
    683e:	cf 93       	push	r28
    6840:	df 93       	push	r29
    6842:	8c 01       	movw	r16, r24
    6844:	eb 01       	movw	r28, r22
    6846:	8b 81       	ldd	r24, Y+3	; 0x03
    6848:	81 ff       	sbrs	r24, 1
    684a:	1b c0       	rjmp	.+54     	; 0x6882 <fputc+0x48>
    684c:	82 ff       	sbrs	r24, 2
    684e:	0d c0       	rjmp	.+26     	; 0x686a <fputc+0x30>
    6850:	2e 81       	ldd	r18, Y+6	; 0x06
    6852:	3f 81       	ldd	r19, Y+7	; 0x07
    6854:	8c 81       	ldd	r24, Y+4	; 0x04
    6856:	9d 81       	ldd	r25, Y+5	; 0x05
    6858:	28 17       	cp	r18, r24
    685a:	39 07       	cpc	r19, r25
    685c:	64 f4       	brge	.+24     	; 0x6876 <fputc+0x3c>
    685e:	e8 81       	ld	r30, Y
    6860:	f9 81       	ldd	r31, Y+1	; 0x01
    6862:	01 93       	st	Z+, r16
    6864:	f9 83       	std	Y+1, r31	; 0x01
    6866:	e8 83       	st	Y, r30
    6868:	06 c0       	rjmp	.+12     	; 0x6876 <fputc+0x3c>
    686a:	e8 85       	ldd	r30, Y+8	; 0x08
    686c:	f9 85       	ldd	r31, Y+9	; 0x09
    686e:	80 2f       	mov	r24, r16
    6870:	09 95       	icall
    6872:	89 2b       	or	r24, r25
    6874:	31 f4       	brne	.+12     	; 0x6882 <fputc+0x48>
    6876:	8e 81       	ldd	r24, Y+6	; 0x06
    6878:	9f 81       	ldd	r25, Y+7	; 0x07
    687a:	01 96       	adiw	r24, 0x01	; 1
    687c:	9f 83       	std	Y+7, r25	; 0x07
    687e:	8e 83       	std	Y+6, r24	; 0x06
    6880:	02 c0       	rjmp	.+4      	; 0x6886 <fputc+0x4c>
    6882:	0f ef       	ldi	r16, 0xFF	; 255
    6884:	1f ef       	ldi	r17, 0xFF	; 255
    6886:	c8 01       	movw	r24, r16
    6888:	df 91       	pop	r29
    688a:	cf 91       	pop	r28
    688c:	1f 91       	pop	r17
    688e:	0f 91       	pop	r16
    6890:	08 95       	ret

00006892 <printf>:
    6892:	a0 e0       	ldi	r26, 0x00	; 0
    6894:	b0 e0       	ldi	r27, 0x00	; 0
    6896:	ee e4       	ldi	r30, 0x4E	; 78
    6898:	f4 e3       	ldi	r31, 0x34	; 52
    689a:	48 cd       	rjmp	.-1392   	; 0x632c <__prologue_saves__+0x20>
    689c:	fe 01       	movw	r30, r28
    689e:	35 96       	adiw	r30, 0x05	; 5
    68a0:	61 91       	ld	r22, Z+
    68a2:	71 91       	ld	r23, Z+
    68a4:	80 91 25 07 	lds	r24, 0x0725
    68a8:	90 91 26 07 	lds	r25, 0x0726
    68ac:	af 01       	movw	r20, r30
    68ae:	72 d9       	rcall	.-3356   	; 0x5b94 <vfprintf>
    68b0:	20 96       	adiw	r28, 0x00	; 0
    68b2:	e2 e0       	ldi	r30, 0x02	; 2
    68b4:	57 cd       	rjmp	.-1362   	; 0x6364 <__epilogue_restores__+0x20>

000068b6 <puts>:
    68b6:	0f 93       	push	r16
    68b8:	1f 93       	push	r17
    68ba:	cf 93       	push	r28
    68bc:	df 93       	push	r29
    68be:	8c 01       	movw	r16, r24
    68c0:	e0 91 25 07 	lds	r30, 0x0725
    68c4:	f0 91 26 07 	lds	r31, 0x0726
    68c8:	83 81       	ldd	r24, Z+3	; 0x03
    68ca:	81 ff       	sbrs	r24, 1
    68cc:	21 c0       	rjmp	.+66     	; 0x6910 <puts+0x5a>
    68ce:	c0 e0       	ldi	r28, 0x00	; 0
    68d0:	d0 e0       	ldi	r29, 0x00	; 0
    68d2:	0d c0       	rjmp	.+26     	; 0x68ee <puts+0x38>
    68d4:	e0 91 25 07 	lds	r30, 0x0725
    68d8:	f0 91 26 07 	lds	r31, 0x0726
    68dc:	20 85       	ldd	r18, Z+8	; 0x08
    68de:	31 85       	ldd	r19, Z+9	; 0x09
    68e0:	bf 01       	movw	r22, r30
    68e2:	f9 01       	movw	r30, r18
    68e4:	09 95       	icall
    68e6:	89 2b       	or	r24, r25
    68e8:	11 f0       	breq	.+4      	; 0x68ee <puts+0x38>
    68ea:	cf ef       	ldi	r28, 0xFF	; 255
    68ec:	df ef       	ldi	r29, 0xFF	; 255
    68ee:	f8 01       	movw	r30, r16
    68f0:	81 91       	ld	r24, Z+
    68f2:	8f 01       	movw	r16, r30
    68f4:	88 23       	and	r24, r24
    68f6:	71 f7       	brne	.-36     	; 0x68d4 <puts+0x1e>
    68f8:	e0 91 25 07 	lds	r30, 0x0725
    68fc:	f0 91 26 07 	lds	r31, 0x0726
    6900:	20 85       	ldd	r18, Z+8	; 0x08
    6902:	31 85       	ldd	r19, Z+9	; 0x09
    6904:	8a e0       	ldi	r24, 0x0A	; 10
    6906:	bf 01       	movw	r22, r30
    6908:	f9 01       	movw	r30, r18
    690a:	09 95       	icall
    690c:	89 2b       	or	r24, r25
    690e:	11 f0       	breq	.+4      	; 0x6914 <puts+0x5e>
    6910:	cf ef       	ldi	r28, 0xFF	; 255
    6912:	df ef       	ldi	r29, 0xFF	; 255
    6914:	ce 01       	movw	r24, r28
    6916:	df 91       	pop	r29
    6918:	cf 91       	pop	r28
    691a:	1f 91       	pop	r17
    691c:	0f 91       	pop	r16
    691e:	08 95       	ret

00006920 <__ultoa_invert>:
    6920:	fa 01       	movw	r30, r20
    6922:	aa 27       	eor	r26, r26
    6924:	28 30       	cpi	r18, 0x08	; 8
    6926:	51 f1       	breq	.+84     	; 0x697c <__ultoa_invert+0x5c>
    6928:	20 31       	cpi	r18, 0x10	; 16
    692a:	81 f1       	breq	.+96     	; 0x698c <__ultoa_invert+0x6c>
    692c:	e8 94       	clt
    692e:	6f 93       	push	r22
    6930:	6e 7f       	andi	r22, 0xFE	; 254
    6932:	6e 5f       	subi	r22, 0xFE	; 254
    6934:	7f 4f       	sbci	r23, 0xFF	; 255
    6936:	8f 4f       	sbci	r24, 0xFF	; 255
    6938:	9f 4f       	sbci	r25, 0xFF	; 255
    693a:	af 4f       	sbci	r26, 0xFF	; 255
    693c:	b1 e0       	ldi	r27, 0x01	; 1
    693e:	3e d0       	rcall	.+124    	; 0x69bc <__ultoa_invert+0x9c>
    6940:	b4 e0       	ldi	r27, 0x04	; 4
    6942:	3c d0       	rcall	.+120    	; 0x69bc <__ultoa_invert+0x9c>
    6944:	67 0f       	add	r22, r23
    6946:	78 1f       	adc	r23, r24
    6948:	89 1f       	adc	r24, r25
    694a:	9a 1f       	adc	r25, r26
    694c:	a1 1d       	adc	r26, r1
    694e:	68 0f       	add	r22, r24
    6950:	79 1f       	adc	r23, r25
    6952:	8a 1f       	adc	r24, r26
    6954:	91 1d       	adc	r25, r1
    6956:	a1 1d       	adc	r26, r1
    6958:	6a 0f       	add	r22, r26
    695a:	71 1d       	adc	r23, r1
    695c:	81 1d       	adc	r24, r1
    695e:	91 1d       	adc	r25, r1
    6960:	a1 1d       	adc	r26, r1
    6962:	20 d0       	rcall	.+64     	; 0x69a4 <__ultoa_invert+0x84>
    6964:	09 f4       	brne	.+2      	; 0x6968 <__ultoa_invert+0x48>
    6966:	68 94       	set
    6968:	3f 91       	pop	r19
    696a:	2a e0       	ldi	r18, 0x0A	; 10
    696c:	26 9f       	mul	r18, r22
    696e:	11 24       	eor	r1, r1
    6970:	30 19       	sub	r19, r0
    6972:	30 5d       	subi	r19, 0xD0	; 208
    6974:	31 93       	st	Z+, r19
    6976:	de f6       	brtc	.-74     	; 0x692e <__ultoa_invert+0xe>
    6978:	cf 01       	movw	r24, r30
    697a:	08 95       	ret
    697c:	46 2f       	mov	r20, r22
    697e:	47 70       	andi	r20, 0x07	; 7
    6980:	40 5d       	subi	r20, 0xD0	; 208
    6982:	41 93       	st	Z+, r20
    6984:	b3 e0       	ldi	r27, 0x03	; 3
    6986:	0f d0       	rcall	.+30     	; 0x69a6 <__ultoa_invert+0x86>
    6988:	c9 f7       	brne	.-14     	; 0x697c <__ultoa_invert+0x5c>
    698a:	f6 cf       	rjmp	.-20     	; 0x6978 <__ultoa_invert+0x58>
    698c:	46 2f       	mov	r20, r22
    698e:	4f 70       	andi	r20, 0x0F	; 15
    6990:	40 5d       	subi	r20, 0xD0	; 208
    6992:	4a 33       	cpi	r20, 0x3A	; 58
    6994:	18 f0       	brcs	.+6      	; 0x699c <__ultoa_invert+0x7c>
    6996:	49 5d       	subi	r20, 0xD9	; 217
    6998:	31 fd       	sbrc	r19, 1
    699a:	40 52       	subi	r20, 0x20	; 32
    699c:	41 93       	st	Z+, r20
    699e:	02 d0       	rcall	.+4      	; 0x69a4 <__ultoa_invert+0x84>
    69a0:	a9 f7       	brne	.-22     	; 0x698c <__ultoa_invert+0x6c>
    69a2:	ea cf       	rjmp	.-44     	; 0x6978 <__ultoa_invert+0x58>
    69a4:	b4 e0       	ldi	r27, 0x04	; 4
    69a6:	a6 95       	lsr	r26
    69a8:	97 95       	ror	r25
    69aa:	87 95       	ror	r24
    69ac:	77 95       	ror	r23
    69ae:	67 95       	ror	r22
    69b0:	ba 95       	dec	r27
    69b2:	c9 f7       	brne	.-14     	; 0x69a6 <__ultoa_invert+0x86>
    69b4:	00 97       	sbiw	r24, 0x00	; 0
    69b6:	61 05       	cpc	r22, r1
    69b8:	71 05       	cpc	r23, r1
    69ba:	08 95       	ret
    69bc:	9b 01       	movw	r18, r22
    69be:	ac 01       	movw	r20, r24
    69c0:	0a 2e       	mov	r0, r26
    69c2:	06 94       	lsr	r0
    69c4:	57 95       	ror	r21
    69c6:	47 95       	ror	r20
    69c8:	37 95       	ror	r19
    69ca:	27 95       	ror	r18
    69cc:	ba 95       	dec	r27
    69ce:	c9 f7       	brne	.-14     	; 0x69c2 <__ultoa_invert+0xa2>
    69d0:	62 0f       	add	r22, r18
    69d2:	73 1f       	adc	r23, r19
    69d4:	84 1f       	adc	r24, r20
    69d6:	95 1f       	adc	r25, r21
    69d8:	a0 1d       	adc	r26, r0
    69da:	08 95       	ret

000069dc <__divmodsi4>:
    69dc:	97 fb       	bst	r25, 7
    69de:	09 2e       	mov	r0, r25
    69e0:	05 26       	eor	r0, r21
    69e2:	0e d0       	rcall	.+28     	; 0x6a00 <__divmodsi4_neg1>
    69e4:	57 fd       	sbrc	r21, 7
    69e6:	04 d0       	rcall	.+8      	; 0x69f0 <__divmodsi4_neg2>
    69e8:	6f dc       	rcall	.-1826   	; 0x62c8 <__udivmodsi4>
    69ea:	0a d0       	rcall	.+20     	; 0x6a00 <__divmodsi4_neg1>
    69ec:	00 1c       	adc	r0, r0
    69ee:	38 f4       	brcc	.+14     	; 0x69fe <__divmodsi4_exit>

000069f0 <__divmodsi4_neg2>:
    69f0:	50 95       	com	r21
    69f2:	40 95       	com	r20
    69f4:	30 95       	com	r19
    69f6:	21 95       	neg	r18
    69f8:	3f 4f       	sbci	r19, 0xFF	; 255
    69fa:	4f 4f       	sbci	r20, 0xFF	; 255
    69fc:	5f 4f       	sbci	r21, 0xFF	; 255

000069fe <__divmodsi4_exit>:
    69fe:	08 95       	ret

00006a00 <__divmodsi4_neg1>:
    6a00:	f6 f7       	brtc	.-4      	; 0x69fe <__divmodsi4_exit>
    6a02:	90 95       	com	r25
    6a04:	80 95       	com	r24
    6a06:	70 95       	com	r23
    6a08:	61 95       	neg	r22
    6a0a:	7f 4f       	sbci	r23, 0xFF	; 255
    6a0c:	8f 4f       	sbci	r24, 0xFF	; 255
    6a0e:	9f 4f       	sbci	r25, 0xFF	; 255
    6a10:	08 95       	ret

00006a12 <_exit>:
    6a12:	f8 94       	cli

00006a14 <__stop_program>:
    6a14:	ff cf       	rjmp	.-2      	; 0x6a14 <__stop_program>
