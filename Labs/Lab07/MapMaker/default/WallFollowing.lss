
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002e8  00800100  0000699a  00006a2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000699a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000334  008003e8  008003e8  00006d16  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00006d16  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000005a5  00000000  00000000  00006d76  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001793  00000000  00000000  0000731b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000044c  00000000  00000000  00008aae  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000143a  00000000  00000000  00008efa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002b0  00000000  00000000  0000a334  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000cba  00000000  00000000  0000a5e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000e91  00000000  00000000  0000b29e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <__vector_4>
      14:	0c 94 eb 20 	jmp	0x41d6	; 0x41d6 <__vector_5>
      18:	0c 94 14 21 	jmp	0x4228	; 0x4228 <__vector_6>
      1c:	0c 94 3d 21 	jmp	0x427a	; 0x427a <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 a3 1f 	jmp	0x3f46	; 0x3f46 <__vector_9>
      28:	0c 94 cc 1f 	jmp	0x3f98	; 0x3f98 <__vector_10>
      2c:	0c 94 f5 1f 	jmp	0x3fea	; 0x3fea <__vector_11>
      30:	0c 94 70 20 	jmp	0x40e0	; 0x40e0 <__vector_12>
      34:	0c 94 1e 20 	jmp	0x403c	; 0x403c <__vector_13>
      38:	0c 94 47 20 	jmp	0x408e	; 0x408e <__vector_14>
      3c:	0c 94 99 20 	jmp	0x4132	; 0x4132 <__vector_15>
      40:	0c 94 28 1f 	jmp	0x3e50	; 0x3e50 <__vector_16>
      44:	0c 94 51 1f 	jmp	0x3ea2	; 0x3ea2 <__vector_17>
      48:	0c 94 7a 1f 	jmp	0x3ef4	; 0x3ef4 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	8d 1c       	adc	r8, r13
      7e:	90 1c       	adc	r9, r0
      80:	93 1c       	adc	r9, r3
      82:	96 1c       	adc	r9, r6
      84:	9f 1c       	adc	r9, r15
      86:	99 1c       	adc	r9, r9
      88:	9c 1c       	adc	r9, r12
      8a:	a2 1c       	adc	r10, r2
      8c:	a5 1c       	adc	r10, r5
      8e:	a8 1c       	adc	r10, r8
      90:	ab 1c       	adc	r10, r11
      92:	ae 1c       	adc	r10, r14
      94:	b1 1c       	adc	r11, r1
      96:	b4 1c       	adc	r11, r4
      98:	b7 1c       	adc	r11, r7
      9a:	ba 1c       	adc	r11, r10
      9c:	bd 1c       	adc	r11, r13
      9e:	c0 1c       	adc	r12, r0
      a0:	c3 1c       	adc	r12, r3
      a2:	d4 1c       	adc	r13, r4
      a4:	d7 1c       	adc	r13, r7
      a6:	da 1c       	adc	r13, r10
      a8:	dd 1c       	adc	r13, r13
      aa:	e6 1c       	adc	r14, r6
      ac:	e0 1c       	adc	r14, r0
      ae:	e3 1c       	adc	r14, r3
      b0:	e9 1c       	adc	r14, r9
      b2:	ec 1c       	adc	r14, r12
      b4:	ef 1c       	adc	r14, r15
      b6:	f2 1c       	adc	r15, r2
      b8:	f5 1c       	adc	r15, r5
      ba:	f8 1c       	adc	r15, r8
      bc:	fb 1c       	adc	r15, r11
      be:	fe 1c       	adc	r15, r14
      c0:	01 1d       	adc	r16, r1
      c2:	04 1d       	adc	r16, r4
      c4:	07 1d       	adc	r16, r7
      c6:	0a 1d       	adc	r16, r10
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	ea e9       	ldi	r30, 0x9A	; 154
     676:	f9 e6       	ldi	r31, 0x69	; 105
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a8 3e       	cpi	r26, 0xE8	; 232
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	a8 ee       	ldi	r26, 0xE8	; 232
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	ac 31       	cpi	r26, 0x1C	; 28
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 12 17 	call	0x2e24	; 0x2e24 <main>
     698:	0c 94 cb 34 	jmp	0x6996	; 0x6996 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 66 1e 	call	0x3ccc	; 0x3ccc <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 8c 1e 	call	0x3d18	; 0x3d18 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 d2 1e 	call	0x3da4	; 0x3da4 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 d0 16 	call	0x2da0	; 0x2da0 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 7a 04 	sts	0x047A, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 7a 04 	sts	0x047A, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 1d 34 	call	0x683a	; 0x683a <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 2a 18 	call	0x3054	; 0x3054 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 15 18 	call	0x302a	; 0x302a <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 15 18 	call	0x302a	; 0x302a <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 1d 34 	call	0x683a	; 0x683a <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 2a 18 	call	0x3054	; 0x3054 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 15 18 	call	0x302a	; 0x302a <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 15 18 	call	0x302a	; 0x302a <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 1d 34 	call	0x683a	; 0x683a <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 2a 18 	call	0x3054	; 0x3054 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 2a 18 	call	0x3054	; 0x3054 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 15 18 	call	0x302a	; 0x302a <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 15 18 	call	0x302a	; 0x302a <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
     c1c:	60 91 f3 04 	lds	r22, 0x04F3
     c20:	70 91 f4 04 	lds	r23, 0x04F4
     c24:	80 91 f5 04 	lds	r24, 0x04F5
     c28:	90 91 f6 04 	lds	r25, 0x04F6
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 ef       	ldi	r20, 0xF0	; 240
     c32:	51 e4       	ldi	r21, 0x41	; 65
     c34:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
     c38:	f8 2e       	mov	r15, r24
     c3a:	ff 1c       	adc	r15, r15
     c3c:	ff 24       	eor	r15, r15
     c3e:	ff 1c       	adc	r15, r15
     c40:	ff 0c       	add	r15, r15
     c42:	ff 0c       	add	r15, r15
     c44:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
     c46:	60 91 09 06 	lds	r22, 0x0609
     c4a:	70 91 0a 06 	lds	r23, 0x060A
     c4e:	80 91 0b 06 	lds	r24, 0x060B
     c52:	90 91 0c 06 	lds	r25, 0x060C
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 ef       	ldi	r20, 0xF0	; 240
     c5c:	51 e4       	ldi	r21, 0x41	; 65
     c5e:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
     c62:	08 2f       	mov	r16, r24
     c64:	00 1f       	adc	r16, r16
     c66:	00 27       	eor	r16, r16
     c68:	00 1f       	adc	r16, r16
     c6a:	00 0f       	add	r16, r16
     c6c:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
     c6e:	60 91 fb 04 	lds	r22, 0x04FB
     c72:	70 91 fc 04 	lds	r23, 0x04FC
     c76:	80 91 fd 04 	lds	r24, 0x04FD
     c7a:	90 91 fe 04 	lds	r25, 0x04FE
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	4c e0       	ldi	r20, 0x0C	; 12
     c84:	52 e4       	ldi	r21, 0x42	; 66
     c86:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
     c8a:	18 2f       	mov	r17, r24
     c8c:	11 1f       	adc	r17, r17
     c8e:	11 27       	eor	r17, r17
     c90:	11 1f       	adc	r17, r17
     c92:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
     c94:	ee 24       	eor	r14, r14
     c96:	60 91 0d 06 	lds	r22, 0x060D
     c9a:	70 91 0e 06 	lds	r23, 0x060E
     c9e:	80 91 0f 06 	lds	r24, 0x060F
     ca2:	90 91 10 06 	lds	r25, 0x0610
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 ef       	ldi	r20, 0xF0	; 240
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
     cb2:	88 23       	and	r24, r24
     cb4:	14 f4       	brge	.+4      	; 0xcba <checkWorld+0xa6>
     cb6:	ee 24       	eor	r14, r14
     cb8:	e3 94       	inc	r14
     cba:	8f 2d       	mov	r24, r15
     cbc:	8e 0d       	add	r24, r14
     cbe:	80 0f       	add	r24, r16
     cc0:	81 0f       	add	r24, r17
     cc2:	80 93 ec 03 	sts	0x03EC, r24
	nextGateway = moveGateways[currentMoveWorld+1];
     cc6:	20 91 eb 03 	lds	r18, 0x03EB
     cca:	e2 2f       	mov	r30, r18
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	e7 57       	subi	r30, 0x77	; 119
     cd0:	f9 4f       	sbci	r31, 0xF9	; 249
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	90 93 ed 03 	sts	0x03ED, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
     cd8:	89 17       	cp	r24, r25
     cda:	19 f4       	brne	.+6      	; 0xce2 <checkWorld+0xce>
		currentMoveWorld += 1;
     cdc:	2f 5f       	subi	r18, 0xFF	; 255
     cde:	20 93 eb 03 	sts	0x03EB, r18
	}
}
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
     cec:	2f 92       	push	r2
     cee:	3f 92       	push	r3
     cf0:	4f 92       	push	r4
     cf2:	5f 92       	push	r5
     cf4:	6f 92       	push	r6
     cf6:	7f 92       	push	r7
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	df 93       	push	r29
     d0e:	cf 93       	push	r28
     d10:	00 d0       	rcall	.+0      	; 0xd12 <moveAway+0x26>
     d12:	00 d0       	rcall	.+0      	; 0xd14 <moveAway+0x28>
     d14:	cd b7       	in	r28, 0x3d	; 61
     d16:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
     d18:	60 90 f3 04 	lds	r6, 0x04F3
     d1c:	70 90 f4 04 	lds	r7, 0x04F4
     d20:	80 90 f5 04 	lds	r8, 0x04F5
     d24:	90 90 f6 04 	lds	r9, 0x04F6
     d28:	a0 90 fb 04 	lds	r10, 0x04FB
     d2c:	b0 90 fc 04 	lds	r11, 0x04FC
     d30:	c0 90 fd 04 	lds	r12, 0x04FD
     d34:	d0 90 fe 04 	lds	r13, 0x04FE
	float moveX = rtIR - ltIR;
     d38:	e0 90 0d 06 	lds	r14, 0x060D
     d3c:	f0 90 0e 06 	lds	r15, 0x060E
     d40:	00 91 0f 06 	lds	r16, 0x060F
     d44:	10 91 10 06 	lds	r17, 0x0610
     d48:	80 91 09 06 	lds	r24, 0x0609
     d4c:	90 91 0a 06 	lds	r25, 0x060A
     d50:	a0 91 0b 06 	lds	r26, 0x060B
     d54:	b0 91 0c 06 	lds	r27, 0x060C
     d58:	89 83       	std	Y+1, r24	; 0x01
     d5a:	9a 83       	std	Y+2, r25	; 0x02
     d5c:	ab 83       	std	Y+3, r26	; 0x03
     d5e:	bc 83       	std	Y+4, r27	; 0x04
     d60:	c8 01       	movw	r24, r16
     d62:	b7 01       	movw	r22, r14
     d64:	29 81       	ldd	r18, Y+1	; 0x01
     d66:	3a 81       	ldd	r19, Y+2	; 0x02
     d68:	4b 81       	ldd	r20, Y+3	; 0x03
     d6a:	5c 81       	ldd	r21, Y+4	; 0x04
     d6c:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__subsf3>
     d70:	1b 01       	movw	r2, r22
     d72:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
     d74:	c4 01       	movw	r24, r8
     d76:	b3 01       	movw	r22, r6
     d78:	20 e0       	ldi	r18, 0x00	; 0
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	40 ee       	ldi	r20, 0xE0	; 224
     d7e:	50 e4       	ldi	r21, 0x40	; 64
     d80:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
     d84:	87 fd       	sbrc	r24, 7
     d86:	0b c0       	rjmp	.+22     	; 0xd9e <moveAway+0xb2>
     d88:	c6 01       	movw	r24, r12
     d8a:	b5 01       	movw	r22, r10
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 ee       	ldi	r20, 0xE0	; 224
     d92:	50 e4       	ldi	r21, 0x40	; 64
     d94:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
     d98:	88 23       	and	r24, r24
     d9a:	0c f0       	brlt	.+2      	; 0xd9e <moveAway+0xb2>
     d9c:	68 c0       	rjmp	.+208    	; 0xe6e <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
     d9e:	c4 01       	movw	r24, r8
     da0:	b3 01       	movw	r22, r6
     da2:	a6 01       	movw	r20, r12
     da4:	95 01       	movw	r18, r10
     da6:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__subsf3>
     daa:	7b 01       	movw	r14, r22
     dac:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
     dae:	77 24       	eor	r7, r7
     db0:	20 e0       	ldi	r18, 0x00	; 0
     db2:	30 e0       	ldi	r19, 0x00	; 0
     db4:	40 e0       	ldi	r20, 0x00	; 0
     db6:	50 e0       	ldi	r21, 0x00	; 0
     db8:	0e 94 86 2b 	call	0x570c	; 0x570c <__gesf2>
     dbc:	88 23       	and	r24, r24
     dbe:	14 f0       	brlt	.+4      	; 0xdc4 <moveAway+0xd8>
     dc0:	77 24       	eor	r7, r7
     dc2:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     dc4:	c8 01       	movw	r24, r16
     dc6:	b7 01       	movw	r22, r14
     dc8:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__fixsfsi>
     dcc:	9b 01       	movw	r18, r22
     dce:	77 ff       	sbrs	r23, 7
     dd0:	03 c0       	rjmp	.+6      	; 0xdd8 <moveAway+0xec>
     dd2:	30 95       	com	r19
     dd4:	21 95       	neg	r18
     dd6:	3f 4f       	sbci	r19, 0xFF	; 255
     dd8:	b9 01       	movw	r22, r18
     dda:	88 27       	eor	r24, r24
     ddc:	77 fd       	sbrc	r23, 7
     dde:	80 95       	com	r24
     de0:	98 2f       	mov	r25, r24
     de2:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <__floatsisf>
     de6:	6b 01       	movw	r12, r22
     de8:	7c 01       	movw	r14, r24
     dea:	ad b7       	in	r26, 0x3d	; 61
     dec:	be b7       	in	r27, 0x3e	; 62
     dee:	19 97       	sbiw	r26, 0x09	; 9
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	be bf       	out	0x3e, r27	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	ad bf       	out	0x3d, r26	; 61
     dfa:	0d b7       	in	r16, 0x3d	; 61
     dfc:	1e b7       	in	r17, 0x3e	; 62
     dfe:	0f 5f       	subi	r16, 0xFF	; 255
     e00:	1f 4f       	sbci	r17, 0xFF	; 255
     e02:	a2 01       	movw	r20, r4
     e04:	91 01       	movw	r18, r2
     e06:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
     e0a:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
     e0e:	4b 01       	movw	r8, r22
     e10:	5c 01       	movw	r10, r24
     e12:	82 e3       	ldi	r24, 0x32	; 50
     e14:	90 e0       	ldi	r25, 0x00	; 0
     e16:	f8 01       	movw	r30, r16
     e18:	91 83       	std	Z+1, r25	; 0x01
     e1a:	80 83       	st	Z, r24
     e1c:	c7 01       	movw	r24, r14
     e1e:	b6 01       	movw	r22, r12
     e20:	a2 01       	movw	r20, r4
     e22:	91 01       	movw	r18, r2
     e24:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__subsf3>
     e28:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
     e2c:	d8 01       	movw	r26, r16
     e2e:	13 96       	adiw	r26, 0x03	; 3
     e30:	7c 93       	st	X, r23
     e32:	6e 93       	st	-X, r22
     e34:	12 97       	sbiw	r26, 0x02	; 2
     e36:	82 ec       	ldi	r24, 0xC2	; 194
     e38:	91 e0       	ldi	r25, 0x01	; 1
     e3a:	15 96       	adiw	r26, 0x05	; 5
     e3c:	9c 93       	st	X, r25
     e3e:	8e 93       	st	-X, r24
     e40:	14 97       	sbiw	r26, 0x04	; 4
     e42:	16 96       	adiw	r26, 0x06	; 6
     e44:	1c 92       	st	X, r1
     e46:	16 97       	sbiw	r26, 0x06	; 6
     e48:	18 96       	adiw	r26, 0x08	; 8
     e4a:	1c 92       	st	X, r1
     e4c:	1e 92       	st	-X, r1
     e4e:	17 97       	sbiw	r26, 0x07	; 7
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	62 e0       	ldi	r22, 0x02	; 2
     e54:	47 2d       	mov	r20, r7
     e56:	22 e3       	ldi	r18, 0x32	; 50
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	84 01       	movw	r16, r8
     e5c:	72 ec       	ldi	r23, 0xC2	; 194
     e5e:	e7 2e       	mov	r14, r23
     e60:	71 e0       	ldi	r23, 0x01	; 1
     e62:	f7 2e       	mov	r15, r23
     e64:	cc 24       	eor	r12, r12
     e66:	aa 24       	eor	r10, r10
     e68:	bb 24       	eor	r11, r11
     e6a:	87 2c       	mov	r8, r7
     e6c:	82 c0       	rjmp	.+260    	; 0xf72 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
     e6e:	c8 01       	movw	r24, r16
     e70:	b7 01       	movw	r22, r14
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	40 e2       	ldi	r20, 0x20	; 32
     e78:	51 e4       	ldi	r21, 0x41	; 65
     e7a:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
     e7e:	88 23       	and	r24, r24
     e80:	b4 f5       	brge	.+108    	; 0xeee <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     e82:	c2 01       	movw	r24, r4
     e84:	b1 01       	movw	r22, r2
     e86:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__fixsfsi>
     e8a:	8b 01       	movw	r16, r22
     e8c:	77 ff       	sbrs	r23, 7
     e8e:	03 c0       	rjmp	.+6      	; 0xe96 <moveAway+0x1aa>
     e90:	10 95       	com	r17
     e92:	01 95       	neg	r16
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	2d b7       	in	r18, 0x3d	; 61
     e98:	3e b7       	in	r19, 0x3e	; 62
     e9a:	29 50       	subi	r18, 0x09	; 9
     e9c:	30 40       	sbci	r19, 0x00	; 0
     e9e:	0f b6       	in	r0, 0x3f	; 63
     ea0:	f8 94       	cli
     ea2:	3e bf       	out	0x3e, r19	; 62
     ea4:	0f be       	out	0x3f, r0	; 63
     ea6:	2d bf       	out	0x3d, r18	; 61
     ea8:	ed b7       	in	r30, 0x3d	; 61
     eaa:	fe b7       	in	r31, 0x3e	; 62
     eac:	31 96       	adiw	r30, 0x01	; 1
     eae:	88 ec       	ldi	r24, 0xC8	; 200
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	ad b7       	in	r26, 0x3d	; 61
     eb4:	be b7       	in	r27, 0x3e	; 62
     eb6:	12 96       	adiw	r26, 0x02	; 2
     eb8:	9c 93       	st	X, r25
     eba:	8e 93       	st	-X, r24
     ebc:	11 97       	sbiw	r26, 0x01	; 1
     ebe:	13 83       	std	Z+3, r17	; 0x03
     ec0:	02 83       	std	Z+2, r16	; 0x02
     ec2:	82 ec       	ldi	r24, 0xC2	; 194
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	95 83       	std	Z+5, r25	; 0x05
     ec8:	84 83       	std	Z+4, r24	; 0x04
     eca:	16 82       	std	Z+6, r1	; 0x06
     ecc:	10 86       	std	Z+8, r1	; 0x08
     ece:	17 82       	std	Z+7, r1	; 0x07
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	62 e0       	ldi	r22, 0x02	; 2
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	28 ec       	ldi	r18, 0xC8	; 200
     ed8:	30 e0       	ldi	r19, 0x00	; 0
     eda:	52 ec       	ldi	r21, 0xC2	; 194
     edc:	e5 2e       	mov	r14, r21
     ede:	51 e0       	ldi	r21, 0x01	; 1
     ee0:	f5 2e       	mov	r15, r21
     ee2:	cc 24       	eor	r12, r12
     ee4:	aa 24       	eor	r10, r10
     ee6:	bb 24       	eor	r11, r11
     ee8:	88 24       	eor	r8, r8
     eea:	83 94       	inc	r8
     eec:	42 c0       	rjmp	.+132    	; 0xf72 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
     eee:	69 81       	ldd	r22, Y+1	; 0x01
     ef0:	7a 81       	ldd	r23, Y+2	; 0x02
     ef2:	8b 81       	ldd	r24, Y+3	; 0x03
     ef4:	9c 81       	ldd	r25, Y+4	; 0x04
     ef6:	20 e0       	ldi	r18, 0x00	; 0
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	40 e2       	ldi	r20, 0x20	; 32
     efc:	51 e4       	ldi	r21, 0x41	; 65
     efe:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
     f02:	87 fd       	sbrc	r24, 7
     f04:	02 c0       	rjmp	.+4      	; 0xf0a <moveAway+0x21e>
     f06:	80 e0       	ldi	r24, 0x00	; 0
     f08:	3f c0       	rjmp	.+126    	; 0xf88 <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     f0a:	c2 01       	movw	r24, r4
     f0c:	b1 01       	movw	r22, r2
     f0e:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__fixsfsi>
     f12:	8b 01       	movw	r16, r22
     f14:	77 ff       	sbrs	r23, 7
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <moveAway+0x232>
     f18:	10 95       	com	r17
     f1a:	01 95       	neg	r16
     f1c:	1f 4f       	sbci	r17, 0xFF	; 255
     f1e:	2d b7       	in	r18, 0x3d	; 61
     f20:	3e b7       	in	r19, 0x3e	; 62
     f22:	29 50       	subi	r18, 0x09	; 9
     f24:	30 40       	sbci	r19, 0x00	; 0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	f8 94       	cli
     f2a:	3e bf       	out	0x3e, r19	; 62
     f2c:	0f be       	out	0x3f, r0	; 63
     f2e:	2d bf       	out	0x3d, r18	; 61
     f30:	ed b7       	in	r30, 0x3d	; 61
     f32:	fe b7       	in	r31, 0x3e	; 62
     f34:	31 96       	adiw	r30, 0x01	; 1
     f36:	88 ec       	ldi	r24, 0xC8	; 200
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	ad b7       	in	r26, 0x3d	; 61
     f3c:	be b7       	in	r27, 0x3e	; 62
     f3e:	12 96       	adiw	r26, 0x02	; 2
     f40:	9c 93       	st	X, r25
     f42:	8e 93       	st	-X, r24
     f44:	11 97       	sbiw	r26, 0x01	; 1
     f46:	13 83       	std	Z+3, r17	; 0x03
     f48:	02 83       	std	Z+2, r16	; 0x02
     f4a:	82 ec       	ldi	r24, 0xC2	; 194
     f4c:	91 e0       	ldi	r25, 0x01	; 1
     f4e:	95 83       	std	Z+5, r25	; 0x05
     f50:	84 83       	std	Z+4, r24	; 0x04
     f52:	16 82       	std	Z+6, r1	; 0x06
     f54:	10 86       	std	Z+8, r1	; 0x08
     f56:	17 82       	std	Z+7, r1	; 0x07
     f58:	81 e0       	ldi	r24, 0x01	; 1
     f5a:	62 e0       	ldi	r22, 0x02	; 2
     f5c:	41 e0       	ldi	r20, 0x01	; 1
     f5e:	28 ec       	ldi	r18, 0xC8	; 200
     f60:	30 e0       	ldi	r19, 0x00	; 0
     f62:	92 ec       	ldi	r25, 0xC2	; 194
     f64:	e9 2e       	mov	r14, r25
     f66:	91 e0       	ldi	r25, 0x01	; 1
     f68:	f9 2e       	mov	r15, r25
     f6a:	cc 24       	eor	r12, r12
     f6c:	aa 24       	eor	r10, r10
     f6e:	bb 24       	eor	r11, r11
     f70:	88 24       	eor	r8, r8
     f72:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <STEPPER_move>
     f76:	81 e0       	ldi	r24, 0x01	; 1
     f78:	ed b7       	in	r30, 0x3d	; 61
     f7a:	fe b7       	in	r31, 0x3e	; 62
     f7c:	39 96       	adiw	r30, 0x09	; 9
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	fe bf       	out	0x3e, r31	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
     f88:	0f 90       	pop	r0
     f8a:	0f 90       	pop	r0
     f8c:	0f 90       	pop	r0
     f8e:	0f 90       	pop	r0
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	1f 91       	pop	r17
     f96:	0f 91       	pop	r16
     f98:	ff 90       	pop	r15
     f9a:	ef 90       	pop	r14
     f9c:	df 90       	pop	r13
     f9e:	cf 90       	pop	r12
     fa0:	bf 90       	pop	r11
     fa2:	af 90       	pop	r10
     fa4:	9f 90       	pop	r9
     fa6:	8f 90       	pop	r8
     fa8:	7f 90       	pop	r7
     faa:	6f 90       	pop	r6
     fac:	5f 90       	pop	r5
     fae:	4f 90       	pop	r4
     fb0:	3f 90       	pop	r3
     fb2:	2f 90       	pop	r2
     fb4:	08 95       	ret

00000fb6 <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
     fb6:	8f 92       	push	r8
     fb8:	af 92       	push	r10
     fba:	bf 92       	push	r11
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
     fcc:	0e 94 34 19 	call	0x3268	; 0x3268 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
     fd0:	67 2b       	or	r22, r23
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <moveWander+0x20>
     fd4:	76 c0       	rjmp	.+236    	; 0x10c2 <moveWander+0x10c>
     fd6:	89 2b       	or	r24, r25
     fd8:	09 f0       	breq	.+2      	; 0xfdc <moveWander+0x26>
     fda:	73 c0       	rjmp	.+230    	; 0x10c2 <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
     fdc:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <rand>
     fe0:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
     fe2:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <rand>
     fe6:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
     fe8:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <rand>
     fec:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
     fee:	0e 94 e2 32 	call	0x65c4	; 0x65c4 <rand>
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	6a e0       	ldi	r22, 0x0A	; 10
     ff6:	70 e0       	ldi	r23, 0x00	; 0
     ff8:	0e 94 13 31 	call	0x6226	; 0x6226 <__divmodhi4>
     ffc:	08 97       	sbiw	r24, 0x08	; 8
     ffe:	0c f0       	brlt	.+2      	; 0x1002 <moveWander+0x4c>
    1000:	21 e0       	ldi	r18, 0x01	; 1
    1002:	82 2e       	mov	r8, r18
    1004:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    1006:	c8 01       	movw	r24, r16
    1008:	60 e9       	ldi	r22, 0x90	; 144
    100a:	71 e0       	ldi	r23, 0x01	; 1
    100c:	0e 94 13 31 	call	0x6226	; 0x6226 <__divmodhi4>
    1010:	f0 e9       	ldi	r31, 0x90	; 144
    1012:	af 2e       	mov	r10, r31
    1014:	f1 e0       	ldi	r31, 0x01	; 1
    1016:	bf 2e       	mov	r11, r31
    1018:	a8 0e       	add	r10, r24
    101a:	b9 1e       	adc	r11, r25
    101c:	8d b7       	in	r24, 0x3d	; 61
    101e:	9e b7       	in	r25, 0x3e	; 62
    1020:	09 97       	sbiw	r24, 0x09	; 9
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	9e bf       	out	0x3e, r25	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	8d bf       	out	0x3d, r24	; 61
    102c:	0d b7       	in	r16, 0x3d	; 61
    102e:	1e b7       	in	r17, 0x3e	; 62
    1030:	0f 5f       	subi	r16, 0xFF	; 255
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	c7 01       	movw	r24, r14
    1036:	68 ec       	ldi	r22, 0xC8	; 200
    1038:	70 e0       	ldi	r23, 0x00	; 0
    103a:	0e 94 13 31 	call	0x6226	; 0x6226 <__divmodhi4>
    103e:	88 53       	subi	r24, 0x38	; 56
    1040:	9f 4f       	sbci	r25, 0xFF	; 255
    1042:	aa 27       	eor	r26, r26
    1044:	97 fd       	sbrc	r25, 7
    1046:	a0 95       	com	r26
    1048:	ba 2f       	mov	r27, r26
    104a:	bc 01       	movw	r22, r24
    104c:	cd 01       	movw	r24, r26
    104e:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <__floatsisf>
    1052:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    1056:	6b 01       	movw	r12, r22
    1058:	7c 01       	movw	r14, r24
    105a:	f8 01       	movw	r30, r16
    105c:	b1 82       	std	Z+1, r11	; 0x01
    105e:	a0 82       	st	Z, r10
    1060:	ce 01       	movw	r24, r28
    1062:	68 ec       	ldi	r22, 0xC8	; 200
    1064:	70 e0       	ldi	r23, 0x00	; 0
    1066:	0e 94 13 31 	call	0x6226	; 0x6226 <__divmodhi4>
    106a:	88 53       	subi	r24, 0x38	; 56
    106c:	9f 4f       	sbci	r25, 0xFF	; 255
    106e:	aa 27       	eor	r26, r26
    1070:	97 fd       	sbrc	r25, 7
    1072:	a0 95       	com	r26
    1074:	ba 2f       	mov	r27, r26
    1076:	bc 01       	movw	r22, r24
    1078:	cd 01       	movw	r24, r26
    107a:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <__floatsisf>
    107e:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    1082:	f8 01       	movw	r30, r16
    1084:	73 83       	std	Z+3, r23	; 0x03
    1086:	62 83       	std	Z+2, r22	; 0x02
    1088:	82 ec       	ldi	r24, 0xC2	; 194
    108a:	91 e0       	ldi	r25, 0x01	; 1
    108c:	95 83       	std	Z+5, r25	; 0x05
    108e:	84 83       	std	Z+4, r24	; 0x04
    1090:	16 82       	std	Z+6, r1	; 0x06
    1092:	10 86       	std	Z+8, r1	; 0x08
    1094:	17 82       	std	Z+7, r1	; 0x07
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	62 e0       	ldi	r22, 0x02	; 2
    109a:	48 2d       	mov	r20, r8
    109c:	95 01       	movw	r18, r10
    109e:	86 01       	movw	r16, r12
    10a0:	e2 ec       	ldi	r30, 0xC2	; 194
    10a2:	ee 2e       	mov	r14, r30
    10a4:	e1 e0       	ldi	r30, 0x01	; 1
    10a6:	fe 2e       	mov	r15, r30
    10a8:	cc 24       	eor	r12, r12
    10aa:	aa 24       	eor	r10, r10
    10ac:	bb 24       	eor	r11, r11
    10ae:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <STEPPER_move>
    10b2:	8d b7       	in	r24, 0x3d	; 61
    10b4:	9e b7       	in	r25, 0x3e	; 62
    10b6:	09 96       	adiw	r24, 0x09	; 9
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	9e bf       	out	0x3e, r25	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	af 90       	pop	r10
    10d8:	8f 90       	pop	r8
    10da:	08 95       	ret

000010dc <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    10dc:	2f 92       	push	r2
    10de:	3f 92       	push	r3
    10e0:	4f 92       	push	r4
    10e2:	5f 92       	push	r5
    10e4:	6f 92       	push	r6
    10e6:	7f 92       	push	r7
    10e8:	8f 92       	push	r8
    10ea:	9f 92       	push	r9
    10ec:	af 92       	push	r10
    10ee:	bf 92       	push	r11
    10f0:	cf 92       	push	r12
    10f2:	df 92       	push	r13
    10f4:	ef 92       	push	r14
    10f6:	ff 92       	push	r15
    10f8:	0f 93       	push	r16
    10fa:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    10fc:	e0 90 f3 04 	lds	r14, 0x04F3
    1100:	f0 90 f4 04 	lds	r15, 0x04F4
    1104:	00 91 f5 04 	lds	r16, 0x04F5
    1108:	10 91 f6 04 	lds	r17, 0x04F6
    110c:	33 24       	eor	r3, r3
    110e:	c8 01       	movw	r24, r16
    1110:	b7 01       	movw	r22, r14
    1112:	20 e0       	ldi	r18, 0x00	; 0
    1114:	30 e0       	ldi	r19, 0x00	; 0
    1116:	40 e0       	ldi	r20, 0x00	; 0
    1118:	50 e0       	ldi	r21, 0x00	; 0
    111a:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
    111e:	88 23       	and	r24, r24
    1120:	14 f4       	brge	.+4      	; 0x1126 <moveWall+0x4a>
    1122:	33 24       	eor	r3, r3
    1124:	33 94       	inc	r3
    1126:	a0 90 0d 06 	lds	r10, 0x060D
    112a:	b0 90 0e 06 	lds	r11, 0x060E
    112e:	c0 90 0f 06 	lds	r12, 0x060F
    1132:	d0 90 10 06 	lds	r13, 0x0610
    1136:	40 90 09 06 	lds	r4, 0x0609
    113a:	50 90 0a 06 	lds	r5, 0x060A
    113e:	60 90 0b 06 	lds	r6, 0x060B
    1142:	70 90 0c 06 	lds	r7, 0x060C
    1146:	88 24       	eor	r8, r8
    1148:	60 91 fb 04 	lds	r22, 0x04FB
    114c:	70 91 fc 04 	lds	r23, 0x04FC
    1150:	80 91 fd 04 	lds	r24, 0x04FD
    1154:	90 91 fe 04 	lds	r25, 0x04FE
    1158:	20 e0       	ldi	r18, 0x00	; 0
    115a:	30 e0       	ldi	r19, 0x00	; 0
    115c:	40 e7       	ldi	r20, 0x70	; 112
    115e:	51 e4       	ldi	r21, 0x41	; 65
    1160:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
    1164:	88 23       	and	r24, r24
    1166:	14 f4       	brge	.+4      	; 0x116c <moveWall+0x90>
    1168:	88 24       	eor	r8, r8
    116a:	83 94       	inc	r8
    116c:	93 2c       	mov	r9, r3
    116e:	98 28       	or	r9, r8
    1170:	88 24       	eor	r8, r8
    1172:	c6 01       	movw	r24, r12
    1174:	b5 01       	movw	r22, r10
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	40 e2       	ldi	r20, 0x20	; 32
    117c:	51 e4       	ldi	r21, 0x41	; 65
    117e:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
    1182:	88 23       	and	r24, r24
    1184:	14 f4       	brge	.+4      	; 0x118a <moveWall+0xae>
    1186:	88 24       	eor	r8, r8
    1188:	83 94       	inc	r8
    118a:	98 28       	or	r9, r8
    118c:	88 24       	eor	r8, r8
    118e:	c3 01       	movw	r24, r6
    1190:	b2 01       	movw	r22, r4
    1192:	20 e0       	ldi	r18, 0x00	; 0
    1194:	30 e0       	ldi	r19, 0x00	; 0
    1196:	40 e2       	ldi	r20, 0x20	; 32
    1198:	51 e4       	ldi	r21, 0x41	; 65
    119a:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
    119e:	88 23       	and	r24, r24
    11a0:	14 f4       	brge	.+4      	; 0x11a6 <moveWall+0xca>
    11a2:	88 24       	eor	r8, r8
    11a4:	83 94       	inc	r8
    11a6:	29 2c       	mov	r2, r9
    11a8:	28 28       	or	r2, r8
	if(!isWall){	
    11aa:	81 f4       	brne	.+32     	; 0x11cc <moveWall+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	70 e0       	ldi	r23, 0x00	; 0
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	9f e4       	ldi	r25, 0x4F	; 79
    11b4:	20 e0       	ldi	r18, 0x00	; 0
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	40 e2       	ldi	r20, 0x20	; 32
    11ba:	51 e4       	ldi	r21, 0x41	; 65
    11bc:	79 01       	movw	r14, r18
    11be:	8a 01       	movw	r16, r20
    11c0:	59 01       	movw	r10, r18
    11c2:	6a 01       	movw	r12, r20
    11c4:	88 24       	eor	r8, r8
    11c6:	0e 94 d3 10 	call	0x21a6	; 0x21a6 <move_arc_stnb>
    11ca:	f7 c0       	rjmp	.+494    	; 0x13ba <moveWall+0x2de>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    11cc:	c6 01       	movw	r24, r12
    11ce:	b5 01       	movw	r22, r10
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e2       	ldi	r20, 0x20	; 32
    11d6:	51 e4       	ldi	r21, 0x41	; 65
    11d8:	0e 94 86 2b 	call	0x570c	; 0x570c <__gesf2>
    11dc:	18 16       	cp	r1, r24
    11de:	64 f4       	brge	.+24     	; 0x11f8 <moveWall+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    11e0:	80 e0       	ldi	r24, 0x00	; 0
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	a0 e0       	ldi	r26, 0x00	; 0
    11e6:	b1 ec       	ldi	r27, 0xC1	; 193
    11e8:	80 93 0d 06 	sts	0x060D, r24
    11ec:	90 93 0e 06 	sts	0x060E, r25
    11f0:	a0 93 0f 06 	sts	0x060F, r26
    11f4:	b0 93 10 06 	sts	0x0610, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    11f8:	c3 01       	movw	r24, r6
    11fa:	b2 01       	movw	r22, r4
    11fc:	20 e0       	ldi	r18, 0x00	; 0
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	40 e2       	ldi	r20, 0x20	; 32
    1202:	51 e4       	ldi	r21, 0x41	; 65
    1204:	0e 94 86 2b 	call	0x570c	; 0x570c <__gesf2>
    1208:	18 16       	cp	r1, r24
    120a:	14 f0       	brlt	.+4      	; 0x1210 <moveWall+0x134>
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	0d c0       	rjmp	.+26     	; 0x122a <moveWall+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    1210:	80 e0       	ldi	r24, 0x00	; 0
    1212:	90 e0       	ldi	r25, 0x00	; 0
    1214:	a0 e0       	ldi	r26, 0x00	; 0
    1216:	b1 ec       	ldi	r27, 0xC1	; 193
    1218:	80 93 09 06 	sts	0x0609, r24
    121c:	90 93 0a 06 	sts	0x060A, r25
    1220:	a0 93 0b 06 	sts	0x060B, r26
    1224:	b0 93 0c 06 	sts	0x060C, r27
    1228:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    122a:	33 20       	and	r3, r3
    122c:	21 f1       	breq	.+72     	; 0x1276 <moveWall+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    122e:	88 23       	and	r24, r24
    1230:	29 f0       	breq	.+10     	; 0x123c <moveWall+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	70 e0       	ldi	r23, 0x00	; 0
    1236:	8a e7       	ldi	r24, 0x7A	; 122
    1238:	94 e4       	ldi	r25, 0x44	; 68
    123a:	04 c0       	rjmp	.+8      	; 0x1244 <moveWall+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	70 e0       	ldi	r23, 0x00	; 0
    1240:	8a e7       	ldi	r24, 0x7A	; 122
    1242:	94 ec       	ldi	r25, 0xC4	; 196
    1244:	a8 01       	movw	r20, r16
    1246:	97 01       	movw	r18, r14
    1248:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    124c:	20 91 09 06 	lds	r18, 0x0609
    1250:	30 91 0a 06 	lds	r19, 0x060A
    1254:	40 91 0b 06 	lds	r20, 0x060B
    1258:	50 91 0c 06 	lds	r21, 0x060C
    125c:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    1260:	9b 01       	movw	r18, r22
    1262:	ac 01       	movw	r20, r24
    1264:	60 91 0d 06 	lds	r22, 0x060D
    1268:	70 91 0e 06 	lds	r23, 0x060E
    126c:	80 91 0f 06 	lds	r24, 0x060F
    1270:	90 91 10 06 	lds	r25, 0x0610
    1274:	10 c0       	rjmp	.+32     	; 0x1296 <moveWall+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    1276:	60 91 0d 06 	lds	r22, 0x060D
    127a:	70 91 0e 06 	lds	r23, 0x060E
    127e:	80 91 0f 06 	lds	r24, 0x060F
    1282:	90 91 10 06 	lds	r25, 0x0610
    1286:	20 91 09 06 	lds	r18, 0x0609
    128a:	30 91 0a 06 	lds	r19, 0x060A
    128e:	40 91 0b 06 	lds	r20, 0x060B
    1292:	50 91 0c 06 	lds	r21, 0x060C
    1296:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    129a:	90 58       	subi	r25, 0x80	; 128
    129c:	40 e0       	ldi	r20, 0x00	; 0
    129e:	0e 94 5f 10 	call	0x20be	; 0x20be <pidController>
    12a2:	6b 01       	movw	r12, r22
    12a4:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    12a6:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__fixsfsi>
    12aa:	8b 01       	movw	r16, r22
    12ac:	77 ff       	sbrs	r23, 7
    12ae:	03 c0       	rjmp	.+6      	; 0x12b6 <moveWall+0x1da>
    12b0:	10 95       	com	r17
    12b2:	01 95       	neg	r16
    12b4:	1f 4f       	sbci	r17, 0xFF	; 255
    12b6:	05 36       	cpi	r16, 0x65	; 101
    12b8:	11 05       	cpc	r17, r1
    12ba:	fc f0       	brlt	.+62     	; 0x12fa <moveWall+0x21e>
    12bc:	c7 01       	movw	r24, r14
    12be:	b6 01       	movw	r22, r12
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
    12cc:	88 23       	and	r24, r24
    12ce:	a9 f0       	breq	.+42     	; 0x12fa <moveWall+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    12d0:	b8 01       	movw	r22, r16
    12d2:	88 27       	eor	r24, r24
    12d4:	77 fd       	sbrc	r23, 7
    12d6:	80 95       	com	r24
    12d8:	98 2f       	mov	r25, r24
    12da:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <__floatsisf>
    12de:	9b 01       	movw	r18, r22
    12e0:	ac 01       	movw	r20, r24
    12e2:	c7 01       	movw	r24, r14
    12e4:	b6 01       	movw	r22, r12
    12e6:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    12ea:	20 e0       	ldi	r18, 0x00	; 0
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	48 ec       	ldi	r20, 0xC8	; 200
    12f0:	52 e4       	ldi	r21, 0x42	; 66
    12f2:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    12f6:	6b 01       	movw	r12, r22
    12f8:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    12fa:	c7 01       	movw	r24, r14
    12fc:	b6 01       	movw	r22, r12
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	48 ec       	ldi	r20, 0xC8	; 200
    1304:	52 e4       	ldi	r21, 0x42	; 66
    1306:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    130a:	6b 01       	movw	r12, r22
    130c:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    130e:	8d b7       	in	r24, 0x3d	; 61
    1310:	9e b7       	in	r25, 0x3e	; 62
    1312:	09 97       	sbiw	r24, 0x09	; 9
    1314:	0f b6       	in	r0, 0x3f	; 63
    1316:	f8 94       	cli
    1318:	9e bf       	out	0x3e, r25	; 62
    131a:	0f be       	out	0x3f, r0	; 63
    131c:	8d bf       	out	0x3d, r24	; 61
    131e:	0d b7       	in	r16, 0x3d	; 61
    1320:	1e b7       	in	r17, 0x3e	; 62
    1322:	0f 5f       	subi	r16, 0xFF	; 255
    1324:	1f 4f       	sbci	r17, 0xFF	; 255
    1326:	c7 01       	movw	r24, r14
    1328:	b6 01       	movw	r22, r12
    132a:	20 e0       	ldi	r18, 0x00	; 0
    132c:	30 e0       	ldi	r19, 0x00	; 0
    132e:	48 ec       	ldi	r20, 0xC8	; 200
    1330:	52 e4       	ldi	r21, 0x42	; 66
    1332:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	48 ec       	ldi	r20, 0xC8	; 200
    133c:	52 e4       	ldi	r21, 0x42	; 66
    133e:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    1342:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    1346:	4b 01       	movw	r8, r22
    1348:	5c 01       	movw	r10, r24
    134a:	82 e3       	ldi	r24, 0x32	; 50
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	f8 01       	movw	r30, r16
    1350:	91 83       	std	Z+1, r25	; 0x01
    1352:	80 83       	st	Z, r24
    1354:	c7 01       	movw	r24, r14
    1356:	b6 01       	movw	r22, r12
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	30 e0       	ldi	r19, 0x00	; 0
    135c:	48 ec       	ldi	r20, 0xC8	; 200
    135e:	52 ec       	ldi	r21, 0xC2	; 194
    1360:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    1364:	20 e0       	ldi	r18, 0x00	; 0
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	48 ec       	ldi	r20, 0xC8	; 200
    136a:	52 e4       	ldi	r21, 0x42	; 66
    136c:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    1370:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    1374:	f8 01       	movw	r30, r16
    1376:	73 83       	std	Z+3, r23	; 0x03
    1378:	62 83       	std	Z+2, r22	; 0x02
    137a:	82 ec       	ldi	r24, 0xC2	; 194
    137c:	91 e0       	ldi	r25, 0x01	; 1
    137e:	95 83       	std	Z+5, r25	; 0x05
    1380:	84 83       	std	Z+4, r24	; 0x04
    1382:	16 82       	std	Z+6, r1	; 0x06
    1384:	10 86       	std	Z+8, r1	; 0x08
    1386:	17 82       	std	Z+7, r1	; 0x07
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	62 e0       	ldi	r22, 0x02	; 2
    138c:	41 e0       	ldi	r20, 0x01	; 1
    138e:	22 e3       	ldi	r18, 0x32	; 50
    1390:	30 e0       	ldi	r19, 0x00	; 0
    1392:	84 01       	movw	r16, r8
    1394:	a2 ec       	ldi	r26, 0xC2	; 194
    1396:	ea 2e       	mov	r14, r26
    1398:	a1 e0       	ldi	r26, 0x01	; 1
    139a:	fa 2e       	mov	r15, r26
    139c:	cc 24       	eor	r12, r12
    139e:	aa 24       	eor	r10, r10
    13a0:	bb 24       	eor	r11, r11
    13a2:	88 24       	eor	r8, r8
    13a4:	83 94       	inc	r8
    13a6:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <STEPPER_move>
    13aa:	8d b7       	in	r24, 0x3d	; 61
    13ac:	9e b7       	in	r25, 0x3e	; 62
    13ae:	09 96       	adiw	r24, 0x09	; 9
    13b0:	0f b6       	in	r0, 0x3f	; 63
    13b2:	f8 94       	cli
    13b4:	9e bf       	out	0x3e, r25	; 62
    13b6:	0f be       	out	0x3f, r0	; 63
    13b8:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    13ba:	82 2d       	mov	r24, r2
    13bc:	1f 91       	pop	r17
    13be:	0f 91       	pop	r16
    13c0:	ff 90       	pop	r15
    13c2:	ef 90       	pop	r14
    13c4:	df 90       	pop	r13
    13c6:	cf 90       	pop	r12
    13c8:	bf 90       	pop	r11
    13ca:	af 90       	pop	r10
    13cc:	9f 90       	pop	r9
    13ce:	8f 90       	pop	r8
    13d0:	7f 90       	pop	r7
    13d2:	6f 90       	pop	r6
    13d4:	5f 90       	pop	r5
    13d6:	4f 90       	pop	r4
    13d8:	3f 90       	pop	r3
    13da:	2f 90       	pop	r2
    13dc:	08 95       	ret

000013de <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    13de:	8f 92       	push	r8
    13e0:	af 92       	push	r10
    13e2:	bf 92       	push	r11
    13e4:	cf 92       	push	r12
    13e6:	df 92       	push	r13
    13e8:	ef 92       	push	r14
    13ea:	ff 92       	push	r15
    13ec:	0f 93       	push	r16
    13ee:	1f 93       	push	r17
	LCD_clear();
    13f0:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    13f4:	e0 91 eb 03 	lds	r30, 0x03EB
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	e9 58       	subi	r30, 0x89	; 137
    13fc:	fa 4f       	sbci	r31, 0xFA	; 250
    13fe:	e0 81       	ld	r30, Z
    1400:	e0 93 e9 03 	sts	0x03E9, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    1404:	80 e0       	ldi	r24, 0x00	; 0
    1406:	e1 30       	cpi	r30, 0x01	; 1
    1408:	09 f4       	brne	.+2      	; 0x140c <moveWorld+0x2e>
    140a:	81 e0       	ldi	r24, 0x01	; 1
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	e3 30       	cpi	r30, 0x03	; 3
    1410:	09 f4       	brne	.+2      	; 0x1414 <moveWorld+0x36>
    1412:	91 e0       	ldi	r25, 0x01	; 1
    1414:	89 2b       	or	r24, r25
    1416:	28 2f       	mov	r18, r24
    1418:	30 e0       	ldi	r19, 0x00	; 0
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	80 91 ea 03 	lds	r24, 0x03EA
    1422:	82 30       	cpi	r24, 0x02	; 2
    1424:	11 f4       	brne	.+4      	; 0x142a <moveWorld+0x4c>
    1426:	41 e0       	ldi	r20, 0x01	; 1
    1428:	50 e0       	ldi	r21, 0x00	; 0
    142a:	24 23       	and	r18, r20
    142c:	35 23       	and	r19, r21
    142e:	23 2b       	or	r18, r19
    1430:	b9 f0       	breq	.+46     	; 0x1460 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    1432:	60 e0       	ldi	r22, 0x00	; 0
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	80 e0       	ldi	r24, 0x00	; 0
    1438:	9f e4       	ldi	r25, 0x4F	; 79
    143a:	2d eb       	ldi	r18, 0xBD	; 189
    143c:	34 e7       	ldi	r19, 0x74	; 116
    143e:	4b ed       	ldi	r20, 0xDB	; 219
    1440:	51 e4       	ldi	r21, 0x41	; 65
    1442:	0f 2e       	mov	r0, r31
    1444:	f0 e0       	ldi	r31, 0x00	; 0
    1446:	ef 2e       	mov	r14, r31
    1448:	f0 e0       	ldi	r31, 0x00	; 0
    144a:	ff 2e       	mov	r15, r31
    144c:	f0 e2       	ldi	r31, 0x20	; 32
    144e:	0f 2f       	mov	r16, r31
    1450:	f1 e4       	ldi	r31, 0x41	; 65
    1452:	1f 2f       	mov	r17, r31
    1454:	f0 2d       	mov	r31, r0
    1456:	57 01       	movw	r10, r14
    1458:	68 01       	movw	r12, r16
    145a:	88 24       	eor	r8, r8
    145c:	0e 94 83 13 	call	0x2706	; 0x2706 <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    1460:	20 91 ea 03 	lds	r18, 0x03EA
    1464:	80 e0       	ldi	r24, 0x00	; 0
    1466:	21 30       	cpi	r18, 0x01	; 1
    1468:	09 f4       	brne	.+2      	; 0x146c <moveWorld+0x8e>
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	23 30       	cpi	r18, 0x03	; 3
    1470:	09 f4       	brne	.+2      	; 0x1474 <moveWorld+0x96>
    1472:	91 e0       	ldi	r25, 0x01	; 1
    1474:	89 2b       	or	r24, r25
    1476:	28 2f       	mov	r18, r24
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	80 91 e9 03 	lds	r24, 0x03E9
    1482:	82 30       	cpi	r24, 0x02	; 2
    1484:	11 f4       	brne	.+4      	; 0x148a <moveWorld+0xac>
    1486:	41 e0       	ldi	r20, 0x01	; 1
    1488:	50 e0       	ldi	r21, 0x00	; 0
    148a:	24 23       	and	r18, r20
    148c:	35 23       	and	r19, r21
    148e:	23 2b       	or	r18, r19
    1490:	b9 f0       	breq	.+46     	; 0x14c0 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	80 e0       	ldi	r24, 0x00	; 0
    1498:	9f e4       	ldi	r25, 0x4F	; 79
    149a:	2d eb       	ldi	r18, 0xBD	; 189
    149c:	34 e7       	ldi	r19, 0x74	; 116
    149e:	4b ed       	ldi	r20, 0xDB	; 219
    14a0:	51 e4       	ldi	r21, 0x41	; 65
    14a2:	0f 2e       	mov	r0, r31
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	ef 2e       	mov	r14, r31
    14a8:	f0 e0       	ldi	r31, 0x00	; 0
    14aa:	ff 2e       	mov	r15, r31
    14ac:	f0 e2       	ldi	r31, 0x20	; 32
    14ae:	0f 2f       	mov	r16, r31
    14b0:	f1 e4       	ldi	r31, 0x41	; 65
    14b2:	1f 2f       	mov	r17, r31
    14b4:	f0 2d       	mov	r31, r0
    14b6:	57 01       	movw	r10, r14
    14b8:	68 01       	movw	r12, r16
    14ba:	88 24       	eor	r8, r8
    14bc:	0e 94 83 13 	call	0x2706	; 0x2706 <move_arc_stwt>
	}
	
	switch(currentMove){
    14c0:	80 91 e9 03 	lds	r24, 0x03E9
    14c4:	82 30       	cpi	r24, 0x02	; 2
    14c6:	c1 f1       	breq	.+112    	; 0x1538 <moveWorld+0x15a>
    14c8:	83 30       	cpi	r24, 0x03	; 3
    14ca:	09 f4       	brne	.+2      	; 0x14ce <moveWorld+0xf0>
    14cc:	61 c0       	rjmp	.+194    	; 0x1590 <moveWorld+0x1b2>
    14ce:	81 30       	cpi	r24, 0x01	; 1
    14d0:	09 f0       	breq	.+2      	; 0x14d4 <moveWorld+0xf6>
    14d2:	9f c0       	rjmp	.+318    	; 0x1612 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    14d4:	8d b7       	in	r24, 0x3d	; 61
    14d6:	9e b7       	in	r25, 0x3e	; 62
    14d8:	08 97       	sbiw	r24, 0x08	; 8
    14da:	0f b6       	in	r0, 0x3f	; 63
    14dc:	f8 94       	cli
    14de:	9e bf       	out	0x3e, r25	; 62
    14e0:	0f be       	out	0x3f, r0	; 63
    14e2:	8d bf       	out	0x3d, r24	; 61
    14e4:	ed b7       	in	r30, 0x3d	; 61
    14e6:	fe b7       	in	r31, 0x3e	; 62
    14e8:	31 96       	adiw	r30, 0x01	; 1
    14ea:	84 e2       	ldi	r24, 0x24	; 36
    14ec:	91 e0       	ldi	r25, 0x01	; 1
    14ee:	ad b7       	in	r26, 0x3d	; 61
    14f0:	be b7       	in	r27, 0x3e	; 62
    14f2:	12 96       	adiw	r26, 0x02	; 2
    14f4:	9c 93       	st	X, r25
    14f6:	8e 93       	st	-X, r24
    14f8:	11 97       	sbiw	r26, 0x01	; 1
    14fa:	80 91 eb 03 	lds	r24, 0x03EB
    14fe:	82 83       	std	Z+2, r24	; 0x02
    1500:	13 82       	std	Z+3, r1	; 0x03
    1502:	80 91 ec 03 	lds	r24, 0x03EC
    1506:	84 83       	std	Z+4, r24	; 0x04
    1508:	15 82       	std	Z+5, r1	; 0x05
    150a:	80 91 ed 03 	lds	r24, 0x03ED
    150e:	86 83       	std	Z+6, r24	; 0x06
    1510:	17 82       	std	Z+7, r1	; 0x07
    1512:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1516:	ed b7       	in	r30, 0x3d	; 61
    1518:	fe b7       	in	r31, 0x3e	; 62
    151a:	38 96       	adiw	r30, 0x08	; 8
    151c:	0f b6       	in	r0, 0x3f	; 63
    151e:	f8 94       	cli
    1520:	fe bf       	out	0x3e, r31	; 62
    1522:	0f be       	out	0x3f, r0	; 63
    1524:	ed bf       	out	0x3d, r30	; 61
    1526:	60 e0       	ldi	r22, 0x00	; 0
    1528:	70 e0       	ldi	r23, 0x00	; 0
    152a:	80 e0       	ldi	r24, 0x00	; 0
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	44 e8       	ldi	r20, 0x84	; 132
    1534:	51 ec       	ldi	r21, 0xC1	; 193
    1536:	5d c0       	rjmp	.+186    	; 0x15f2 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1538:	8d b7       	in	r24, 0x3d	; 61
    153a:	9e b7       	in	r25, 0x3e	; 62
    153c:	08 97       	sbiw	r24, 0x08	; 8
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	9e bf       	out	0x3e, r25	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	8d bf       	out	0x3d, r24	; 61
    1548:	ed b7       	in	r30, 0x3d	; 61
    154a:	fe b7       	in	r31, 0x3e	; 62
    154c:	31 96       	adiw	r30, 0x01	; 1
    154e:	8f e4       	ldi	r24, 0x4F	; 79
    1550:	91 e0       	ldi	r25, 0x01	; 1
    1552:	ad b7       	in	r26, 0x3d	; 61
    1554:	be b7       	in	r27, 0x3e	; 62
    1556:	12 96       	adiw	r26, 0x02	; 2
    1558:	9c 93       	st	X, r25
    155a:	8e 93       	st	-X, r24
    155c:	11 97       	sbiw	r26, 0x01	; 1
    155e:	80 91 eb 03 	lds	r24, 0x03EB
    1562:	82 83       	std	Z+2, r24	; 0x02
    1564:	13 82       	std	Z+3, r1	; 0x03
    1566:	80 91 ec 03 	lds	r24, 0x03EC
    156a:	84 83       	std	Z+4, r24	; 0x04
    156c:	15 82       	std	Z+5, r1	; 0x05
    156e:	80 91 ed 03 	lds	r24, 0x03ED
    1572:	86 83       	std	Z+6, r24	; 0x06
    1574:	17 82       	std	Z+7, r1	; 0x07
    1576:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    157a:	ed b7       	in	r30, 0x3d	; 61
    157c:	fe b7       	in	r31, 0x3e	; 62
    157e:	38 96       	adiw	r30, 0x08	; 8
    1580:	0f b6       	in	r0, 0x3f	; 63
    1582:	f8 94       	cli
    1584:	fe bf       	out	0x3e, r31	; 62
    1586:	0f be       	out	0x3f, r0	; 63
    1588:	ed bf       	out	0x3d, r30	; 61
    158a:	0e 94 6e 08 	call	0x10dc	; 0x10dc <moveWall>
    158e:	53 c0       	rjmp	.+166    	; 0x1636 <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1590:	8d b7       	in	r24, 0x3d	; 61
    1592:	9e b7       	in	r25, 0x3e	; 62
    1594:	08 97       	sbiw	r24, 0x08	; 8
    1596:	0f b6       	in	r0, 0x3f	; 63
    1598:	f8 94       	cli
    159a:	9e bf       	out	0x3e, r25	; 62
    159c:	0f be       	out	0x3f, r0	; 63
    159e:	8d bf       	out	0x3d, r24	; 61
    15a0:	ed b7       	in	r30, 0x3d	; 61
    15a2:	fe b7       	in	r31, 0x3e	; 62
    15a4:	31 96       	adiw	r30, 0x01	; 1
    15a6:	8d e7       	ldi	r24, 0x7D	; 125
    15a8:	91 e0       	ldi	r25, 0x01	; 1
    15aa:	ad b7       	in	r26, 0x3d	; 61
    15ac:	be b7       	in	r27, 0x3e	; 62
    15ae:	12 96       	adiw	r26, 0x02	; 2
    15b0:	9c 93       	st	X, r25
    15b2:	8e 93       	st	-X, r24
    15b4:	11 97       	sbiw	r26, 0x01	; 1
    15b6:	80 91 eb 03 	lds	r24, 0x03EB
    15ba:	82 83       	std	Z+2, r24	; 0x02
    15bc:	13 82       	std	Z+3, r1	; 0x03
    15be:	80 91 ec 03 	lds	r24, 0x03EC
    15c2:	84 83       	std	Z+4, r24	; 0x04
    15c4:	15 82       	std	Z+5, r1	; 0x05
    15c6:	80 91 ed 03 	lds	r24, 0x03ED
    15ca:	86 83       	std	Z+6, r24	; 0x06
    15cc:	17 82       	std	Z+7, r1	; 0x07
    15ce:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    15d2:	ed b7       	in	r30, 0x3d	; 61
    15d4:	fe b7       	in	r31, 0x3e	; 62
    15d6:	38 96       	adiw	r30, 0x08	; 8
    15d8:	0f b6       	in	r0, 0x3f	; 63
    15da:	f8 94       	cli
    15dc:	fe bf       	out	0x3e, r31	; 62
    15de:	0f be       	out	0x3f, r0	; 63
    15e0:	ed bf       	out	0x3d, r30	; 61
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	90 e0       	ldi	r25, 0x00	; 0
    15ea:	20 e0       	ldi	r18, 0x00	; 0
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	44 e8       	ldi	r20, 0x84	; 132
    15f0:	51 e4       	ldi	r21, 0x41	; 65
    15f2:	0f 2e       	mov	r0, r31
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	ef 2e       	mov	r14, r31
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	ff 2e       	mov	r15, r31
    15fc:	f0 e2       	ldi	r31, 0x20	; 32
    15fe:	0f 2f       	mov	r16, r31
    1600:	f1 e4       	ldi	r31, 0x41	; 65
    1602:	1f 2f       	mov	r17, r31
    1604:	f0 2d       	mov	r31, r0
    1606:	57 01       	movw	r10, r14
    1608:	68 01       	movw	r12, r16
    160a:	88 24       	eor	r8, r8
    160c:	0e 94 83 13 	call	0x2706	; 0x2706 <move_arc_stwt>
    1610:	12 c0       	rjmp	.+36     	; 0x1636 <moveWorld+0x258>
			break;
		default:
			LCD_printf("What?!");
    1612:	00 d0       	rcall	.+0      	; 0x1614 <moveWorld+0x236>
    1614:	89 ea       	ldi	r24, 0xA9	; 169
    1616:	91 e0       	ldi	r25, 0x01	; 1
    1618:	ad b7       	in	r26, 0x3d	; 61
    161a:	be b7       	in	r27, 0x3e	; 62
    161c:	12 96       	adiw	r26, 0x02	; 2
    161e:	9c 93       	st	X, r25
    1620:	8e 93       	st	-X, r24
    1622:	11 97       	sbiw	r26, 0x01	; 1
    1624:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	82 e0       	ldi	r24, 0x02	; 2
    162e:	60 e0       	ldi	r22, 0x00	; 0
    1630:	0e 94 0b 1c 	call	0x3816	; 0x3816 <STEPPER_stop>
    1634:	ff cf       	rjmp	.-2      	; 0x1634 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    1636:	80 91 e9 03 	lds	r24, 0x03E9
    163a:	80 93 ea 03 	sts	0x03EA, r24
	return 1;
}
    163e:	81 e0       	ldi	r24, 0x01	; 1
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	df 90       	pop	r13
    164a:	cf 90       	pop	r12
    164c:	bf 90       	pop	r11
    164e:	af 90       	pop	r10
    1650:	8f 90       	pop	r8
    1652:	08 95       	ret

00001654 <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    1654:	0e 94 ef 09 	call	0x13de	; 0x13de <moveWorld>
    1658:	88 23       	and	r24, r24
    165a:	69 f0       	breq	.+26     	; 0x1676 <moveBehavior+0x22>
		Ierror = 0;
    165c:	80 e0       	ldi	r24, 0x00	; 0
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	a0 e0       	ldi	r26, 0x00	; 0
    1662:	b0 e0       	ldi	r27, 0x00	; 0
    1664:	80 93 f7 04 	sts	0x04F7, r24
    1668:	90 93 f8 04 	sts	0x04F8, r25
    166c:	a0 93 f9 04 	sts	0x04F9, r26
    1670:	b0 93 fa 04 	sts	0x04FA, r27
    1674:	81 e0       	ldi	r24, 0x01	; 1
			// Ierror = 0;
			// return 3;
		// }
	// }
	return 0;	
}
    1676:	08 95       	ret

00001678 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    1678:	ff 92       	push	r15
    167a:	0f 93       	push	r16
    167c:	1f 93       	push	r17
    167e:	cf 93       	push	r28
    1680:	df 93       	push	r29
    1682:	ff 24       	eor	r15, r15
    1684:	f3 94       	inc	r15
    1686:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1688:	c0 eb       	ldi	r28, 0xB0	; 176
    168a:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    168c:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    1690:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	21 f0       	breq	.+8      	; 0x169e <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1696:	82 30       	cpi	r24, 0x02	; 2
    1698:	11 f0       	breq	.+4      	; 0x169e <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    169a:	83 30       	cpi	r24, 0x03	; 3
    169c:	39 f4       	brne	.+14     	; 0x16ac <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    169e:	e1 2f       	mov	r30, r17
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	e9 58       	subi	r30, 0x89	; 137
    16a4:	fa 4f       	sbci	r31, 0xFA	; 250
    16a6:	00 83       	st	Z, r16
			i++;
    16a8:	1f 5f       	subi	r17, 0xFF	; 255
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <movesInput+0x38>
		}

		if (btnHolder != 0){
    16ac:	88 23       	and	r24, r24
    16ae:	21 f1       	breq	.+72     	; 0x16f8 <movesInput+0x80>
			LCD_clear();
    16b0:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    16b4:	8d b7       	in	r24, 0x3d	; 61
    16b6:	9e b7       	in	r25, 0x3e	; 62
    16b8:	08 97       	sbiw	r24, 0x08	; 8
    16ba:	0f b6       	in	r0, 0x3f	; 63
    16bc:	f8 94       	cli
    16be:	9e bf       	out	0x3e, r25	; 62
    16c0:	0f be       	out	0x3f, r0	; 63
    16c2:	8d bf       	out	0x3d, r24	; 61
    16c4:	ed b7       	in	r30, 0x3d	; 61
    16c6:	fe b7       	in	r31, 0x3e	; 62
    16c8:	31 96       	adiw	r30, 0x01	; 1
    16ca:	ad b7       	in	r26, 0x3d	; 61
    16cc:	be b7       	in	r27, 0x3e	; 62
    16ce:	12 96       	adiw	r26, 0x02	; 2
    16d0:	dc 93       	st	X, r29
    16d2:	ce 93       	st	-X, r28
    16d4:	11 97       	sbiw	r26, 0x01	; 1
    16d6:	f2 82       	std	Z+2, r15	; 0x02
    16d8:	13 82       	std	Z+3, r1	; 0x03
    16da:	04 83       	std	Z+4, r16	; 0x04
    16dc:	15 82       	std	Z+5, r1	; 0x05
    16de:	16 83       	std	Z+6, r17	; 0x06
    16e0:	17 82       	std	Z+7, r1	; 0x07
    16e2:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
    16e6:	f0 2e       	mov	r15, r16
    16e8:	8d b7       	in	r24, 0x3d	; 61
    16ea:	9e b7       	in	r25, 0x3e	; 62
    16ec:	08 96       	adiw	r24, 0x08	; 8
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	9e bf       	out	0x3e, r25	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    16f8:	84 ef       	ldi	r24, 0xF4	; 244
    16fa:	91 e0       	ldi	r25, 0x01	; 1
    16fc:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    1700:	1b 30       	cpi	r17, 0x0B	; 11
    1702:	20 f2       	brcs	.-120    	; 0x168c <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    1704:	1f 5f       	subi	r17, 0xFF	; 255
    1706:	e1 2f       	mov	r30, r17
    1708:	f0 e0       	ldi	r31, 0x00	; 0
    170a:	e9 58       	subi	r30, 0x89	; 137
    170c:	fa 4f       	sbci	r31, 0xFA	; 250
    170e:	84 e0       	ldi	r24, 0x04	; 4
    1710:	80 83       	st	Z, r24
}
    1712:	df 91       	pop	r29
    1714:	cf 91       	pop	r28
    1716:	1f 91       	pop	r17
    1718:	0f 91       	pop	r16
    171a:	ff 90       	pop	r15
    171c:	08 95       	ret

0000171e <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    171e:	1f 93       	push	r17
    1720:	cf 93       	push	r28
    1722:	df 93       	push	r29
    1724:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    1726:	c1 ee       	ldi	r28, 0xE1	; 225
    1728:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    172a:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    172e:	81 30       	cpi	r24, 0x01	; 1
    1730:	21 f4       	brne	.+8      	; 0x173a <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    1732:	80 91 05 06 	lds	r24, 0x0605
    1736:	88 0f       	add	r24, r24
    1738:	06 c0       	rjmp	.+12     	; 0x1746 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    173a:	82 30       	cpi	r24, 0x02	; 2
    173c:	39 f4       	brne	.+14     	; 0x174c <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    173e:	80 91 05 06 	lds	r24, 0x0605
    1742:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    1744:	8f 5f       	subi	r24, 0xFF	; 255
    1746:	80 93 05 06 	sts	0x0605, r24
			i++;
    174a:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    174c:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    1750:	00 d0       	rcall	.+0      	; 0x1752 <worldInput+0x34>
    1752:	00 d0       	rcall	.+0      	; 0x1754 <worldInput+0x36>
    1754:	00 d0       	rcall	.+0      	; 0x1756 <worldInput+0x38>
    1756:	ed b7       	in	r30, 0x3d	; 61
    1758:	fe b7       	in	r31, 0x3e	; 62
    175a:	31 96       	adiw	r30, 0x01	; 1
    175c:	ad b7       	in	r26, 0x3d	; 61
    175e:	be b7       	in	r27, 0x3e	; 62
    1760:	12 96       	adiw	r26, 0x02	; 2
    1762:	dc 93       	st	X, r29
    1764:	ce 93       	st	-X, r28
    1766:	11 97       	sbiw	r26, 0x01	; 1
    1768:	80 91 05 06 	lds	r24, 0x0605
    176c:	82 83       	std	Z+2, r24	; 0x02
    176e:	13 82       	std	Z+3, r1	; 0x03
    1770:	14 83       	std	Z+4, r17	; 0x04
    1772:	15 82       	std	Z+5, r1	; 0x05
    1774:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
		// }
		currentCellWorldStart = currentCellWorld;
    1778:	80 91 05 06 	lds	r24, 0x0605
    177c:	80 93 06 06 	sts	0x0606, r24
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1780:	8d b7       	in	r24, 0x3d	; 61
    1782:	9e b7       	in	r25, 0x3e	; 62
    1784:	06 96       	adiw	r24, 0x06	; 6
    1786:	0f b6       	in	r0, 0x3f	; 63
    1788:	f8 94       	cli
    178a:	9e bf       	out	0x3e, r25	; 62
    178c:	0f be       	out	0x3f, r0	; 63
    178e:	8d bf       	out	0x3d, r24	; 61
    1790:	84 ef       	ldi	r24, 0xF4	; 244
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    1798:	14 30       	cpi	r17, 0x04	; 4
    179a:	38 f2       	brcs	.-114    	; 0x172a <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		currentCellWorldStart = currentCellWorld;
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
}
    179c:	df 91       	pop	r29
    179e:	cf 91       	pop	r28
    17a0:	1f 91       	pop	r17
    17a2:	08 95       	ret

000017a4 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    17a4:	1f 93       	push	r17
    17a6:	cf 93       	push	r28
    17a8:	df 93       	push	r29
    17aa:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    17ac:	c9 e0       	ldi	r28, 0x09	; 9
    17ae:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    17b0:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    17b4:	81 30       	cpi	r24, 0x01	; 1
    17b6:	21 f4       	brne	.+8      	; 0x17c0 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    17b8:	80 91 88 05 	lds	r24, 0x0588
    17bc:	88 0f       	add	r24, r24
    17be:	06 c0       	rjmp	.+12     	; 0x17cc <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    17c0:	82 30       	cpi	r24, 0x02	; 2
    17c2:	41 f4       	brne	.+16     	; 0x17d4 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    17c4:	80 91 88 05 	lds	r24, 0x0588
    17c8:	88 0f       	add	r24, r24
			currentOrientation += 1;
    17ca:	8f 5f       	subi	r24, 0xFF	; 255
    17cc:	80 93 88 05 	sts	0x0588, r24
			i++;
    17d0:	1f 5f       	subi	r17, 0xFF	; 255
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    17d4:	88 23       	and	r24, r24
    17d6:	f1 f0       	breq	.+60     	; 0x1814 <orientationInput+0x70>
			LCD_clear();
    17d8:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    17dc:	00 d0       	rcall	.+0      	; 0x17de <orientationInput+0x3a>
    17de:	00 d0       	rcall	.+0      	; 0x17e0 <orientationInput+0x3c>
    17e0:	00 d0       	rcall	.+0      	; 0x17e2 <orientationInput+0x3e>
    17e2:	ed b7       	in	r30, 0x3d	; 61
    17e4:	fe b7       	in	r31, 0x3e	; 62
    17e6:	31 96       	adiw	r30, 0x01	; 1
    17e8:	ad b7       	in	r26, 0x3d	; 61
    17ea:	be b7       	in	r27, 0x3e	; 62
    17ec:	12 96       	adiw	r26, 0x02	; 2
    17ee:	dc 93       	st	X, r29
    17f0:	ce 93       	st	-X, r28
    17f2:	11 97       	sbiw	r26, 0x01	; 1
    17f4:	80 91 88 05 	lds	r24, 0x0588
    17f8:	82 83       	std	Z+2, r24	; 0x02
    17fa:	13 82       	std	Z+3, r1	; 0x03
    17fc:	14 83       	std	Z+4, r17	; 0x04
    17fe:	15 82       	std	Z+5, r1	; 0x05
    1800:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
    1804:	8d b7       	in	r24, 0x3d	; 61
    1806:	9e b7       	in	r25, 0x3e	; 62
    1808:	06 96       	adiw	r24, 0x06	; 6
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	f8 94       	cli
    180e:	9e bf       	out	0x3e, r25	; 62
    1810:	0f be       	out	0x3f, r0	; 63
    1812:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1814:	84 ef       	ldi	r24, 0xF4	; 244
    1816:	91 e0       	ldi	r25, 0x01	; 1
    1818:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    181c:	12 30       	cpi	r17, 0x02	; 2
    181e:	40 f2       	brcs	.-112    	; 0x17b0 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    1820:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	switch(currentOrientation){
    1824:	80 91 88 05 	lds	r24, 0x0588
    1828:	81 30       	cpi	r24, 0x01	; 1
    182a:	51 f0       	breq	.+20     	; 0x1840 <orientationInput+0x9c>
    182c:	81 30       	cpi	r24, 0x01	; 1
    182e:	28 f0       	brcs	.+10     	; 0x183a <orientationInput+0x96>
    1830:	82 30       	cpi	r24, 0x02	; 2
    1832:	49 f0       	breq	.+18     	; 0x1846 <orientationInput+0xa2>
    1834:	83 30       	cpi	r24, 0x03	; 3
    1836:	71 f4       	brne	.+28     	; 0x1854 <orientationInput+0xb0>
    1838:	09 c0       	rjmp	.+18     	; 0x184c <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    183a:	88 e3       	ldi	r24, 0x38	; 56
    183c:	92 e0       	ldi	r25, 0x02	; 2
    183e:	08 c0       	rjmp	.+16     	; 0x1850 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    1840:	8a e5       	ldi	r24, 0x5A	; 90
    1842:	92 e0       	ldi	r25, 0x02	; 2
    1844:	05 c0       	rjmp	.+10     	; 0x1850 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    1846:	8b e7       	ldi	r24, 0x7B	; 123
    1848:	92 e0       	ldi	r25, 0x02	; 2
    184a:	02 c0       	rjmp	.+4      	; 0x1850 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    184c:	8d e9       	ldi	r24, 0x9D	; 157
    184e:	92 e0       	ldi	r25, 0x02	; 2
    1850:	0e 94 1d 34 	call	0x683a	; 0x683a <puts>
			break;
		default:
			break;
	}
	TMRSRVC_delay(500);	//wait 0.5 seconds
    1854:	84 ef       	ldi	r24, 0xF4	; 244
    1856:	91 e0       	ldi	r25, 0x01	; 1
    1858:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
}
    185c:	df 91       	pop	r29
    185e:	cf 91       	pop	r28
    1860:	1f 91       	pop	r17
    1862:	08 95       	ret

00001864 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    1864:	cf 92       	push	r12
    1866:	df 92       	push	r13
    1868:	ef 92       	push	r14
    186a:	ff 92       	push	r15
    186c:	0f 93       	push	r16
    186e:	1f 93       	push	r17
    1870:	df 93       	push	r29
    1872:	cf 93       	push	r28
    1874:	0f 92       	push	r0
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	unsigned char curRow = (currentCellWorld>>2) & 0b1100;
    187a:	80 91 05 06 	lds	r24, 0x0605
    187e:	98 2f       	mov	r25, r24
    1880:	96 95       	lsr	r25
    1882:	96 95       	lsr	r25
    1884:	9c 70       	andi	r25, 0x0C	; 12
	unsigned char curCol = currentCellWorld & 0b0011;
    1886:	b3 e0       	ldi	r27, 0x03	; 3
    1888:	fb 2e       	mov	r15, r27
    188a:	f8 22       	and	r15, r24
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    188c:	00 91 88 05 	lds	r16, 0x0588
    1890:	cc 24       	eor	r12, r12
    1892:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    1894:	f6 01       	movw	r30, r12
    1896:	e9 58       	subi	r30, 0x89	; 137
    1898:	fa 4f       	sbci	r31, 0xFA	; 250
    189a:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    189c:	e9 2f       	mov	r30, r25
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	ee 0f       	add	r30, r30
    18a2:	ff 1f       	adc	r31, r31
    18a4:	ee 0f       	add	r30, r30
    18a6:	ff 1f       	adc	r31, r31
    18a8:	ef 0d       	add	r30, r15
    18aa:	f1 1d       	adc	r31, r1
    18ac:	e2 51       	subi	r30, 0x12	; 18
    18ae:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    18b0:	80 81       	ld	r24, Z
    18b2:	60 2f       	mov	r22, r16
    18b4:	41 e0       	ldi	r20, 0x01	; 1
    18b6:	99 83       	std	Y+1, r25	; 0x01
    18b8:	0e 94 be 10 	call	0x217c	; 0x217c <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    18bc:	f6 01       	movw	r30, r12
    18be:	e7 57       	subi	r30, 0x77	; 119
    18c0:	f9 4f       	sbci	r31, 0xF9	; 249
    18c2:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    18c4:	99 81       	ldd	r25, Y+1	; 0x01
    18c6:	12 30       	cpi	r17, 0x02	; 2
    18c8:	89 f4       	brne	.+34     	; 0x18ec <getGateways+0x88>
			switch(curOrient){
    18ca:	01 30       	cpi	r16, 0x01	; 1
    18cc:	49 f0       	breq	.+18     	; 0x18e0 <getGateways+0x7c>
    18ce:	01 30       	cpi	r16, 0x01	; 1
    18d0:	28 f0       	brcs	.+10     	; 0x18dc <getGateways+0x78>
    18d2:	02 30       	cpi	r16, 0x02	; 2
    18d4:	39 f0       	breq	.+14     	; 0x18e4 <getGateways+0x80>
    18d6:	03 30       	cpi	r16, 0x03	; 3
    18d8:	89 f4       	brne	.+34     	; 0x18fc <getGateways+0x98>
    18da:	06 c0       	rjmp	.+12     	; 0x18e8 <getGateways+0x84>
				case NORTH:
					curRow -= 1;
    18dc:	91 50       	subi	r25, 0x01	; 1
    18de:	0e c0       	rjmp	.+28     	; 0x18fc <getGateways+0x98>
					break;
				case EAST:
					curCol += 1;
    18e0:	f3 94       	inc	r15
    18e2:	0c c0       	rjmp	.+24     	; 0x18fc <getGateways+0x98>
					break;
				case SOUTH:
					curRow += 1;					
    18e4:	9f 5f       	subi	r25, 0xFF	; 255
    18e6:	0a c0       	rjmp	.+20     	; 0x18fc <getGateways+0x98>
					break;
				case WEST:
					curCol -= 1;					
    18e8:	fa 94       	dec	r15
    18ea:	08 c0       	rjmp	.+16     	; 0x18fc <getGateways+0x98>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    18ec:	13 30       	cpi	r17, 0x03	; 3
    18ee:	11 f4       	brne	.+4      	; 0x18f4 <getGateways+0x90>
			curOrient++;
    18f0:	0f 5f       	subi	r16, 0xFF	; 255
    18f2:	03 c0       	rjmp	.+6      	; 0x18fa <getGateways+0x96>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    18f4:	11 30       	cpi	r17, 0x01	; 1
    18f6:	11 f4       	brne	.+4      	; 0x18fc <getGateways+0x98>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    18f8:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    18fa:	03 70       	andi	r16, 0x03	; 3
    18fc:	08 94       	sec
    18fe:	c1 1c       	adc	r12, r1
    1900:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    1902:	8d e0       	ldi	r24, 0x0D	; 13
    1904:	c8 16       	cp	r12, r24
    1906:	d1 04       	cpc	r13, r1
    1908:	29 f6       	brne	.-118    	; 0x1894 <getGateways+0x30>
    190a:	cc 24       	eor	r12, r12
    190c:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    190e:	ee eb       	ldi	r30, 0xBE	; 190
    1910:	ee 2e       	mov	r14, r30
    1912:	e2 e0       	ldi	r30, 0x02	; 2
    1914:	fe 2e       	mov	r15, r30
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    1916:	f6 01       	movw	r30, r12
    1918:	e7 57       	subi	r30, 0x77	; 119
    191a:	f9 4f       	sbci	r31, 0xF9	; 249
    191c:	00 81       	ld	r16, Z
		LCD_clear();
    191e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    1922:	20 2f       	mov	r18, r16
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	ad b7       	in	r26, 0x3d	; 61
    1928:	be b7       	in	r27, 0x3e	; 62
    192a:	54 97       	sbiw	r26, 0x14	; 20
    192c:	0f b6       	in	r0, 0x3f	; 63
    192e:	f8 94       	cli
    1930:	be bf       	out	0x3e, r27	; 62
    1932:	0f be       	out	0x3f, r0	; 63
    1934:	ad bf       	out	0x3d, r26	; 61
    1936:	ed b7       	in	r30, 0x3d	; 61
    1938:	fe b7       	in	r31, 0x3e	; 62
    193a:	31 96       	adiw	r30, 0x01	; 1
    193c:	12 96       	adiw	r26, 0x02	; 2
    193e:	fc 92       	st	X, r15
    1940:	ee 92       	st	-X, r14
    1942:	11 97       	sbiw	r26, 0x01	; 1
    1944:	d3 82       	std	Z+3, r13	; 0x03
    1946:	c2 82       	std	Z+2, r12	; 0x02
    1948:	11 27       	eor	r17, r17
    194a:	07 fd       	sbrc	r16, 7
    194c:	10 95       	com	r17
    194e:	00 27       	eor	r16, r16
    1950:	11 0f       	add	r17, r17
    1952:	00 1f       	adc	r16, r16
    1954:	11 27       	eor	r17, r17
    1956:	15 83       	std	Z+5, r17	; 0x05
    1958:	04 83       	std	Z+4, r16	; 0x04
    195a:	c9 01       	movw	r24, r18
    195c:	66 e0       	ldi	r22, 0x06	; 6
    195e:	96 95       	lsr	r25
    1960:	87 95       	ror	r24
    1962:	6a 95       	dec	r22
    1964:	e1 f7       	brne	.-8      	; 0x195e <getGateways+0xfa>
    1966:	81 70       	andi	r24, 0x01	; 1
    1968:	90 70       	andi	r25, 0x00	; 0
    196a:	97 83       	std	Z+7, r25	; 0x07
    196c:	86 83       	std	Z+6, r24	; 0x06
    196e:	c9 01       	movw	r24, r18
    1970:	55 e0       	ldi	r21, 0x05	; 5
    1972:	96 95       	lsr	r25
    1974:	87 95       	ror	r24
    1976:	5a 95       	dec	r21
    1978:	e1 f7       	brne	.-8      	; 0x1972 <getGateways+0x10e>
    197a:	81 70       	andi	r24, 0x01	; 1
    197c:	90 70       	andi	r25, 0x00	; 0
    197e:	91 87       	std	Z+9, r25	; 0x09
    1980:	80 87       	std	Z+8, r24	; 0x08
    1982:	c9 01       	movw	r24, r18
    1984:	44 e0       	ldi	r20, 0x04	; 4
    1986:	96 95       	lsr	r25
    1988:	87 95       	ror	r24
    198a:	4a 95       	dec	r20
    198c:	e1 f7       	brne	.-8      	; 0x1986 <getGateways+0x122>
    198e:	81 70       	andi	r24, 0x01	; 1
    1990:	90 70       	andi	r25, 0x00	; 0
    1992:	93 87       	std	Z+11, r25	; 0x0b
    1994:	82 87       	std	Z+10, r24	; 0x0a
    1996:	c9 01       	movw	r24, r18
    1998:	03 e0       	ldi	r16, 0x03	; 3
    199a:	96 95       	lsr	r25
    199c:	87 95       	ror	r24
    199e:	0a 95       	dec	r16
    19a0:	e1 f7       	brne	.-8      	; 0x199a <getGateways+0x136>
    19a2:	81 70       	andi	r24, 0x01	; 1
    19a4:	90 70       	andi	r25, 0x00	; 0
    19a6:	95 87       	std	Z+13, r25	; 0x0d
    19a8:	84 87       	std	Z+12, r24	; 0x0c
    19aa:	c9 01       	movw	r24, r18
    19ac:	96 95       	lsr	r25
    19ae:	87 95       	ror	r24
    19b0:	96 95       	lsr	r25
    19b2:	87 95       	ror	r24
    19b4:	81 70       	andi	r24, 0x01	; 1
    19b6:	90 70       	andi	r25, 0x00	; 0
    19b8:	97 87       	std	Z+15, r25	; 0x0f
    19ba:	86 87       	std	Z+14, r24	; 0x0e
    19bc:	c9 01       	movw	r24, r18
    19be:	96 95       	lsr	r25
    19c0:	87 95       	ror	r24
    19c2:	81 70       	andi	r24, 0x01	; 1
    19c4:	90 70       	andi	r25, 0x00	; 0
    19c6:	91 8b       	std	Z+17, r25	; 0x11
    19c8:	80 8b       	std	Z+16, r24	; 0x10
    19ca:	21 70       	andi	r18, 0x01	; 1
    19cc:	30 70       	andi	r19, 0x00	; 0
    19ce:	33 8b       	std	Z+19, r19	; 0x13
    19d0:	22 8b       	std	Z+18, r18	; 0x12
    19d2:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
		TMRSRVC_delay(500);//wait 1/2 seconds
    19d6:	ed b7       	in	r30, 0x3d	; 61
    19d8:	fe b7       	in	r31, 0x3e	; 62
    19da:	74 96       	adiw	r30, 0x14	; 20
    19dc:	0f b6       	in	r0, 0x3f	; 63
    19de:	f8 94       	cli
    19e0:	fe bf       	out	0x3e, r31	; 62
    19e2:	0f be       	out	0x3f, r0	; 63
    19e4:	ed bf       	out	0x3d, r30	; 61
    19e6:	84 ef       	ldi	r24, 0xF4	; 244
    19e8:	91 e0       	ldi	r25, 0x01	; 1
    19ea:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
    19ee:	08 94       	sec
    19f0:	c1 1c       	adc	r12, r1
    19f2:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    19f4:	fd e0       	ldi	r31, 0x0D	; 13
    19f6:	cf 16       	cp	r12, r31
    19f8:	d1 04       	cpc	r13, r1
    19fa:	09 f0       	breq	.+2      	; 0x19fe <getGateways+0x19a>
    19fc:	8c cf       	rjmp	.-232    	; 0x1916 <getGateways+0xb2>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(500);//wait 1/2 seconds
	}
}
    19fe:	0f 90       	pop	r0
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	1f 91       	pop	r17
    1a06:	0f 91       	pop	r16
    1a08:	ff 90       	pop	r15
    1a0a:	ef 90       	pop	r14
    1a0c:	df 90       	pop	r13
    1a0e:	cf 90       	pop	r12
    1a10:	08 95       	ret

00001a12 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    1a12:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell;
		
	// Get the start location of the robot
	unsigned char curRow = (currentCellWorld>>2) & 0b1100;
    1a14:	10 91 05 06 	lds	r17, 0x0605
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    1a18:	80 e0       	ldi	r24, 0x00	; 0
    1a1a:	60 91 88 05 	lds	r22, 0x0588
    1a1e:	40 e0       	ldi	r20, 0x00	; 0
    1a20:	0e 94 be 10 	call	0x217c	; 0x217c <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    1a24:	e1 2f       	mov	r30, r17
    1a26:	e6 95       	lsr	r30
    1a28:	e6 95       	lsr	r30
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	ec 70       	andi	r30, 0x0C	; 12
    1a2e:	f0 70       	andi	r31, 0x00	; 0
    1a30:	ee 0f       	add	r30, r30
    1a32:	ff 1f       	adc	r31, r31
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	13 70       	andi	r17, 0x03	; 3
    1a3a:	e1 0f       	add	r30, r17
    1a3c:	f1 1d       	adc	r31, r1
    1a3e:	e2 51       	subi	r30, 0x12	; 18
    1a40:	fc 4f       	sbci	r31, 0xFC	; 252
    1a42:	80 83       	st	Z, r24
		
	 	
	switch(currentMove){
    1a44:	80 91 e9 03 	lds	r24, 0x03E9
    1a48:	81 50       	subi	r24, 0x01	; 1
    1a4a:	83 30       	cpi	r24, 0x03	; 3
    1a4c:	58 f0       	brcs	.+22     	; 0x1a64 <setGateways+0x52>
		case MOVE_RIGHT:		
			curOrient++;
			curOrient = curOrient&0b11;
			break;
		default:
			LCD_printf("Whatz?!");
    1a4e:	00 d0       	rcall	.+0      	; 0x1a50 <setGateways+0x3e>
    1a50:	80 ee       	ldi	r24, 0xE0	; 224
    1a52:	92 e0       	ldi	r25, 0x02	; 2
    1a54:	ed b7       	in	r30, 0x3d	; 61
    1a56:	fe b7       	in	r31, 0x3e	; 62
    1a58:	92 83       	std	Z+2, r25	; 0x02
    1a5a:	81 83       	std	Z+1, r24	; 0x01
    1a5c:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
			curCol -= 1;					
			break;
		default:
			break;
	}	
}
    1a64:	1f 91       	pop	r17
    1a66:	08 95       	ret

00001a68 <mapWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    maps the world as it moves through it
********************************************************************/
char mapWorld( void )
{		
    1a68:	8f 92       	push	r8
    1a6a:	af 92       	push	r10
    1a6c:	bf 92       	push	r11
    1a6e:	cf 92       	push	r12
    1a70:	df 92       	push	r13
    1a72:	ef 92       	push	r14
    1a74:	ff 92       	push	r15
    1a76:	0f 93       	push	r16
    1a78:	1f 93       	push	r17
	if(!(currentGateway&0b0001)){
    1a7a:	80 91 ec 03 	lds	r24, 0x03EC
    1a7e:	80 fd       	sbrc	r24, 0
    1a80:	02 c0       	rjmp	.+4      	; 0x1a86 <mapWorld+0x1e>
		currentMove = MOVE_LEFT;
    1a82:	81 e0       	ldi	r24, 0x01	; 1
    1a84:	05 c0       	rjmp	.+10     	; 0x1a90 <mapWorld+0x28>
	}
	else if(!(currentGateway&0b1000)){
    1a86:	83 fd       	sbrc	r24, 3
    1a88:	02 c0       	rjmp	.+4      	; 0x1a8e <mapWorld+0x26>
		currentMove = MOVE_FORWARD;
    1a8a:	82 e0       	ldi	r24, 0x02	; 2
    1a8c:	01 c0       	rjmp	.+2      	; 0x1a90 <mapWorld+0x28>
	}
	else {
		currentMove = MOVE_RIGHT;
    1a8e:	83 e0       	ldi	r24, 0x03	; 3
    1a90:	80 93 e9 03 	sts	0x03E9, r24
	}
	
	setGateways();
    1a94:	0e 94 09 0d 	call	0x1a12	; 0x1a12 <setGateways>
	
	LCD_clear();
    1a98:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	switch(currentMove){
    1a9c:	80 91 e9 03 	lds	r24, 0x03E9
    1aa0:	82 30       	cpi	r24, 0x02	; 2
    1aa2:	09 f4       	brne	.+2      	; 0x1aa6 <mapWorld+0x3e>
    1aa4:	4f c0       	rjmp	.+158    	; 0x1b44 <mapWorld+0xdc>
    1aa6:	83 30       	cpi	r24, 0x03	; 3
    1aa8:	09 f4       	brne	.+2      	; 0x1aac <mapWorld+0x44>
    1aaa:	8d c0       	rjmp	.+282    	; 0x1bc6 <mapWorld+0x15e>
    1aac:	81 30       	cpi	r24, 0x01	; 1
    1aae:	09 f0       	breq	.+2      	; 0x1ab2 <mapWorld+0x4a>
    1ab0:	bc c0       	rjmp	.+376    	; 0x1c2a <mapWorld+0x1c2>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1ab2:	8d b7       	in	r24, 0x3d	; 61
    1ab4:	9e b7       	in	r25, 0x3e	; 62
    1ab6:	08 97       	sbiw	r24, 0x08	; 8
    1ab8:	0f b6       	in	r0, 0x3f	; 63
    1aba:	f8 94       	cli
    1abc:	9e bf       	out	0x3e, r25	; 62
    1abe:	0f be       	out	0x3f, r0	; 63
    1ac0:	8d bf       	out	0x3d, r24	; 61
    1ac2:	ed b7       	in	r30, 0x3d	; 61
    1ac4:	fe b7       	in	r31, 0x3e	; 62
    1ac6:	31 96       	adiw	r30, 0x01	; 1
    1ac8:	84 e2       	ldi	r24, 0x24	; 36
    1aca:	91 e0       	ldi	r25, 0x01	; 1
    1acc:	ad b7       	in	r26, 0x3d	; 61
    1ace:	be b7       	in	r27, 0x3e	; 62
    1ad0:	12 96       	adiw	r26, 0x02	; 2
    1ad2:	9c 93       	st	X, r25
    1ad4:	8e 93       	st	-X, r24
    1ad6:	11 97       	sbiw	r26, 0x01	; 1
    1ad8:	80 91 eb 03 	lds	r24, 0x03EB
    1adc:	82 83       	std	Z+2, r24	; 0x02
    1ade:	13 82       	std	Z+3, r1	; 0x03
    1ae0:	80 91 ec 03 	lds	r24, 0x03EC
    1ae4:	84 83       	std	Z+4, r24	; 0x04
    1ae6:	15 82       	std	Z+5, r1	; 0x05
    1ae8:	80 91 ed 03 	lds	r24, 0x03ED
    1aec:	86 83       	std	Z+6, r24	; 0x06
    1aee:	17 82       	std	Z+7, r1	; 0x07
    1af0:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1af4:	ed b7       	in	r30, 0x3d	; 61
    1af6:	fe b7       	in	r31, 0x3e	; 62
    1af8:	38 96       	adiw	r30, 0x08	; 8
    1afa:	0f b6       	in	r0, 0x3f	; 63
    1afc:	f8 94       	cli
    1afe:	fe bf       	out	0x3e, r31	; 62
    1b00:	0f be       	out	0x3f, r0	; 63
    1b02:	ed bf       	out	0x3d, r30	; 61
    1b04:	60 e0       	ldi	r22, 0x00	; 0
    1b06:	70 e0       	ldi	r23, 0x00	; 0
    1b08:	80 e0       	ldi	r24, 0x00	; 0
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	44 e8       	ldi	r20, 0x84	; 132
    1b12:	51 ec       	ldi	r21, 0xC1	; 193
    1b14:	0f 2e       	mov	r0, r31
    1b16:	f0 e0       	ldi	r31, 0x00	; 0
    1b18:	ef 2e       	mov	r14, r31
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	ff 2e       	mov	r15, r31
    1b1e:	f0 e2       	ldi	r31, 0x20	; 32
    1b20:	0f 2f       	mov	r16, r31
    1b22:	f1 e4       	ldi	r31, 0x41	; 65
    1b24:	1f 2f       	mov	r17, r31
    1b26:	f0 2d       	mov	r31, r0
    1b28:	57 01       	movw	r10, r14
    1b2a:	68 01       	movw	r12, r16
    1b2c:	88 24       	eor	r8, r8
    1b2e:	0e 94 83 13 	call	0x2706	; 0x2706 <move_arc_stwt>
			move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
    1b32:	60 e0       	ldi	r22, 0x00	; 0
    1b34:	70 e0       	ldi	r23, 0x00	; 0
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	9f e4       	ldi	r25, 0x4F	; 79
    1b3a:	28 e4       	ldi	r18, 0x48	; 72
    1b3c:	31 ee       	ldi	r19, 0xE1	; 225
    1b3e:	46 e3       	ldi	r20, 0x36	; 54
    1b40:	52 e4       	ldi	r21, 0x42	; 66
    1b42:	3e c0       	rjmp	.+124    	; 0x1bc0 <mapWorld+0x158>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1b44:	8d b7       	in	r24, 0x3d	; 61
    1b46:	9e b7       	in	r25, 0x3e	; 62
    1b48:	08 97       	sbiw	r24, 0x08	; 8
    1b4a:	0f b6       	in	r0, 0x3f	; 63
    1b4c:	f8 94       	cli
    1b4e:	9e bf       	out	0x3e, r25	; 62
    1b50:	0f be       	out	0x3f, r0	; 63
    1b52:	8d bf       	out	0x3d, r24	; 61
    1b54:	ed b7       	in	r30, 0x3d	; 61
    1b56:	fe b7       	in	r31, 0x3e	; 62
    1b58:	31 96       	adiw	r30, 0x01	; 1
    1b5a:	8f e4       	ldi	r24, 0x4F	; 79
    1b5c:	91 e0       	ldi	r25, 0x01	; 1
    1b5e:	ad b7       	in	r26, 0x3d	; 61
    1b60:	be b7       	in	r27, 0x3e	; 62
    1b62:	12 96       	adiw	r26, 0x02	; 2
    1b64:	9c 93       	st	X, r25
    1b66:	8e 93       	st	-X, r24
    1b68:	11 97       	sbiw	r26, 0x01	; 1
    1b6a:	80 91 eb 03 	lds	r24, 0x03EB
    1b6e:	82 83       	std	Z+2, r24	; 0x02
    1b70:	13 82       	std	Z+3, r1	; 0x03
    1b72:	80 91 ec 03 	lds	r24, 0x03EC
    1b76:	84 83       	std	Z+4, r24	; 0x04
    1b78:	15 82       	std	Z+5, r1	; 0x05
    1b7a:	80 91 ed 03 	lds	r24, 0x03ED
    1b7e:	86 83       	std	Z+6, r24	; 0x06
    1b80:	17 82       	std	Z+7, r1	; 0x07
    1b82:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			// moveWall();
			move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
    1b86:	ed b7       	in	r30, 0x3d	; 61
    1b88:	fe b7       	in	r31, 0x3e	; 62
    1b8a:	38 96       	adiw	r30, 0x08	; 8
    1b8c:	0f b6       	in	r0, 0x3f	; 63
    1b8e:	f8 94       	cli
    1b90:	fe bf       	out	0x3e, r31	; 62
    1b92:	0f be       	out	0x3f, r0	; 63
    1b94:	ed bf       	out	0x3d, r30	; 61
    1b96:	60 e0       	ldi	r22, 0x00	; 0
    1b98:	70 e0       	ldi	r23, 0x00	; 0
    1b9a:	80 e0       	ldi	r24, 0x00	; 0
    1b9c:	9f e4       	ldi	r25, 0x4F	; 79
    1b9e:	28 e4       	ldi	r18, 0x48	; 72
    1ba0:	31 ee       	ldi	r19, 0xE1	; 225
    1ba2:	46 e3       	ldi	r20, 0x36	; 54
    1ba4:	52 e4       	ldi	r21, 0x42	; 66
    1ba6:	0f 2e       	mov	r0, r31
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	ef 2e       	mov	r14, r31
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	ff 2e       	mov	r15, r31
    1bb0:	f0 e2       	ldi	r31, 0x20	; 32
    1bb2:	0f 2f       	mov	r16, r31
    1bb4:	f1 e4       	ldi	r31, 0x41	; 65
    1bb6:	1f 2f       	mov	r17, r31
    1bb8:	f0 2d       	mov	r31, r0
    1bba:	57 01       	movw	r10, r14
    1bbc:	68 01       	movw	r12, r16
    1bbe:	88 24       	eor	r8, r8
    1bc0:	0e 94 83 13 	call	0x2706	; 0x2706 <move_arc_stwt>
    1bc4:	43 c0       	rjmp	.+134    	; 0x1c4c <mapWorld+0x1e4>
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1bc6:	8d b7       	in	r24, 0x3d	; 61
    1bc8:	9e b7       	in	r25, 0x3e	; 62
    1bca:	08 97       	sbiw	r24, 0x08	; 8
    1bcc:	0f b6       	in	r0, 0x3f	; 63
    1bce:	f8 94       	cli
    1bd0:	9e bf       	out	0x3e, r25	; 62
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	8d bf       	out	0x3d, r24	; 61
    1bd6:	ed b7       	in	r30, 0x3d	; 61
    1bd8:	fe b7       	in	r31, 0x3e	; 62
    1bda:	31 96       	adiw	r30, 0x01	; 1
    1bdc:	8d e7       	ldi	r24, 0x7D	; 125
    1bde:	91 e0       	ldi	r25, 0x01	; 1
    1be0:	ad b7       	in	r26, 0x3d	; 61
    1be2:	be b7       	in	r27, 0x3e	; 62
    1be4:	12 96       	adiw	r26, 0x02	; 2
    1be6:	9c 93       	st	X, r25
    1be8:	8e 93       	st	-X, r24
    1bea:	11 97       	sbiw	r26, 0x01	; 1
    1bec:	80 91 eb 03 	lds	r24, 0x03EB
    1bf0:	82 83       	std	Z+2, r24	; 0x02
    1bf2:	13 82       	std	Z+3, r1	; 0x03
    1bf4:	80 91 ec 03 	lds	r24, 0x03EC
    1bf8:	84 83       	std	Z+4, r24	; 0x04
    1bfa:	15 82       	std	Z+5, r1	; 0x05
    1bfc:	80 91 ed 03 	lds	r24, 0x03ED
    1c00:	86 83       	std	Z+6, r24	; 0x06
    1c02:	17 82       	std	Z+7, r1	; 0x07
    1c04:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1c08:	ed b7       	in	r30, 0x3d	; 61
    1c0a:	fe b7       	in	r31, 0x3e	; 62
    1c0c:	38 96       	adiw	r30, 0x08	; 8
    1c0e:	0f b6       	in	r0, 0x3f	; 63
    1c10:	f8 94       	cli
    1c12:	fe bf       	out	0x3e, r31	; 62
    1c14:	0f be       	out	0x3f, r0	; 63
    1c16:	ed bf       	out	0x3d, r30	; 61
    1c18:	60 e0       	ldi	r22, 0x00	; 0
    1c1a:	70 e0       	ldi	r23, 0x00	; 0
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	20 e0       	ldi	r18, 0x00	; 0
    1c22:	30 e0       	ldi	r19, 0x00	; 0
    1c24:	44 e8       	ldi	r20, 0x84	; 132
    1c26:	51 e4       	ldi	r21, 0x41	; 65
    1c28:	be cf       	rjmp	.-132    	; 0x1ba6 <mapWorld+0x13e>
			break;
		default:
			LCD_printf("What?!");
    1c2a:	00 d0       	rcall	.+0      	; 0x1c2c <mapWorld+0x1c4>
    1c2c:	89 ea       	ldi	r24, 0xA9	; 169
    1c2e:	91 e0       	ldi	r25, 0x01	; 1
    1c30:	ad b7       	in	r26, 0x3d	; 61
    1c32:	be b7       	in	r27, 0x3e	; 62
    1c34:	12 96       	adiw	r26, 0x02	; 2
    1c36:	9c 93       	st	X, r25
    1c38:	8e 93       	st	-X, r24
    1c3a:	11 97       	sbiw	r26, 0x01	; 1
    1c3c:	0e 94 0b 34 	call	0x6816	; 0x6816 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	82 e0       	ldi	r24, 0x02	; 2
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	0e 94 0b 1c 	call	0x3816	; 0x3816 <STEPPER_stop>
			break;
	}
	
	// TMRSRVC_delay(1000);//wait 1 seconds
	return 1;
}
    1c4c:	81 e0       	ldi	r24, 0x01	; 1
    1c4e:	1f 91       	pop	r17
    1c50:	0f 91       	pop	r16
    1c52:	ff 90       	pop	r15
    1c54:	ef 90       	pop	r14
    1c56:	df 90       	pop	r13
    1c58:	cf 90       	pop	r12
    1c5a:	bf 90       	pop	r11
    1c5c:	af 90       	pop	r10
    1c5e:	8f 90       	pop	r8
    1c60:	08 95       	ret

00001c62 <CBOT_main>:
********************************************************************/

void CBOT_main( void )
{
	// initialize the robot
	initializeRobot();
    1c62:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <initializeRobot>
	
	// Enter the robot's current (starting) position
	LCD_printf("START Map/nlocation\n\n\n");	
    1c66:	88 ee       	ldi	r24, 0xE8	; 232
    1c68:	92 e0       	ldi	r25, 0x02	; 2
    1c6a:	0e 94 1d 34 	call	0x683a	; 0x683a <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1c6e:	88 ee       	ldi	r24, 0xE8	; 232
    1c70:	93 e0       	ldi	r25, 0x03	; 3
    1c72:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1c76:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	worldInput();
    1c7a:	0e 94 8f 0b 	call	0x171e	; 0x171e <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1c7e:	88 ee       	ldi	r24, 0xE8	; 232
    1c80:	93 e0       	ldi	r25, 0x03	; 3
    1c82:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1c86:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Map/norientation\n\n\n");	
    1c8a:	8e ef       	ldi	r24, 0xFE	; 254
    1c8c:	92 e0       	ldi	r25, 0x02	; 2
    1c8e:	0e 94 1d 34 	call	0x683a	; 0x683a <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1c92:	88 ee       	ldi	r24, 0xE8	; 232
    1c94:	93 e0       	ldi	r25, 0x03	; 3
    1c96:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1c9a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	orientationInput();
    1c9e:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1ca2:	88 ee       	ldi	r24, 0xE8	; 232
    1ca4:	93 e0       	ldi	r25, 0x03	; 3
    1ca6:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1caa:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	
	
	isMapping = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	80 93 99 06 	sts	0x0699, r24
    1cb4:	1e c0       	rjmp	.+60     	; 0x1cf2 <CBOT_main+0x90>
	
	while(isMapping)
	{
		checkIR();	
    1cb6:	0e 94 56 16 	call	0x2cac	; 0x2cac <checkIR>
		checkWorld();
    1cba:	0e 94 0a 06 	call	0xc14	; 0xc14 <checkWorld>
		mapWorld();
    1cbe:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <mapWorld>
		isMapping = !((currentCellWorldStart == currentCellWorld)&(currentOrientationStart == currentOrientation));
    1cc2:	20 e0       	ldi	r18, 0x00	; 0
    1cc4:	30 e0       	ldi	r19, 0x00	; 0
    1cc6:	90 91 06 06 	lds	r25, 0x0606
    1cca:	80 91 05 06 	lds	r24, 0x0605
    1cce:	98 17       	cp	r25, r24
    1cd0:	11 f0       	breq	.+4      	; 0x1cd6 <CBOT_main+0x74>
    1cd2:	21 e0       	ldi	r18, 0x01	; 1
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e0       	ldi	r20, 0x00	; 0
    1cd8:	50 e0       	ldi	r21, 0x00	; 0
    1cda:	90 91 87 05 	lds	r25, 0x0587
    1cde:	80 91 88 05 	lds	r24, 0x0588
    1ce2:	98 17       	cp	r25, r24
    1ce4:	11 f0       	breq	.+4      	; 0x1cea <CBOT_main+0x88>
    1ce6:	41 e0       	ldi	r20, 0x01	; 1
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	24 2b       	or	r18, r20
    1cec:	35 2b       	or	r19, r21
    1cee:	20 93 99 06 	sts	0x0699, r18
	LCD_clear();
	
	
	isMapping = 1;
	
	while(isMapping)
    1cf2:	80 91 99 06 	lds	r24, 0x0699
    1cf6:	88 23       	and	r24, r24
    1cf8:	f1 f6       	brne	.-68     	; 0x1cb6 <CBOT_main+0x54>
		mapWorld();
		isMapping = !((currentCellWorldStart == currentCellWorld)&(currentOrientationStart == currentOrientation));
	}
	
	// Enter the robot's current (starting) position
	LCD_printf("START location\n\n\n\n");	
    1cfa:	87 e1       	ldi	r24, 0x17	; 23
    1cfc:	93 e0       	ldi	r25, 0x03	; 3
    1cfe:	0e 94 1d 34 	call	0x683a	; 0x683a <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1d02:	88 ee       	ldi	r24, 0xE8	; 232
    1d04:	93 e0       	ldi	r25, 0x03	; 3
    1d06:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1d0a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	worldInput();
    1d0e:	0e 94 8f 0b 	call	0x171e	; 0x171e <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1d12:	88 ee       	ldi	r24, 0xE8	; 232
    1d14:	93 e0       	ldi	r25, 0x03	; 3
    1d16:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1d1a:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START orientation\n\n\n\n");	
    1d1e:	89 e2       	ldi	r24, 0x29	; 41
    1d20:	93 e0       	ldi	r25, 0x03	; 3
    1d22:	0e 94 1d 34 	call	0x683a	; 0x683a <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1d26:	88 ee       	ldi	r24, 0xE8	; 232
    1d28:	93 e0       	ldi	r25, 0x03	; 3
    1d2a:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1d2e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	orientationInput();
    1d32:	0e 94 d2 0b 	call	0x17a4	; 0x17a4 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1d36:	88 ee       	ldi	r24, 0xE8	; 232
    1d38:	93 e0       	ldi	r25, 0x03	; 3
    1d3a:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1d3e:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	
	// Enter the robot topological commands
	LCD_printf("ENTER move commands\n\n\n\n");
    1d42:	8e e3       	ldi	r24, 0x3E	; 62
    1d44:	93 e0       	ldi	r25, 0x03	; 3
    1d46:	0e 94 1d 34 	call	0x683a	; 0x683a <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1d4a:	88 ee       	ldi	r24, 0xE8	; 232
    1d4c:	93 e0       	ldi	r25, 0x03	; 3
    1d4e:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1d52:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	movesInput();
    1d56:	0e 94 3c 0b 	call	0x1678	; 0x1678 <movesInput>
	TMRSRVC_delay(1000);//wait 1 seconds
    1d5a:	88 ee       	ldi	r24, 0xE8	; 232
    1d5c:	93 e0       	ldi	r25, 0x03	; 3
    1d5e:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1d62:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	
	// Print the robot gateways
	LCD_printf("Robot Gateways:\n\n\n\n");
    1d66:	85 e5       	ldi	r24, 0x55	; 85
    1d68:	93 e0       	ldi	r25, 0x03	; 3
    1d6a:	0e 94 1d 34 	call	0x683a	; 0x683a <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1d6e:	88 ee       	ldi	r24, 0xE8	; 232
    1d70:	93 e0       	ldi	r25, 0x03	; 3
    1d72:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1d76:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
	getGateways();
    1d7a:	0e 94 32 0c 	call	0x1864	; 0x1864 <getGateways>
	TMRSRVC_delay(1000);//wait 1 seconds
    1d7e:	88 ee       	ldi	r24, 0xE8	; 232
    1d80:	93 e0       	ldi	r25, 0x03	; 3
    1d82:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
	LCD_clear();
    1d86:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
		
		
	// Infinite loop
	while (1)
    {
		checkIR();	
    1d8a:	0e 94 56 16 	call	0x2cac	; 0x2cac <checkIR>
    1d8e:	fd cf       	rjmp	.-6      	; 0x1d8a <CBOT_main+0x128>

00001d90 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
    1d90:	2f 92       	push	r2
    1d92:	3f 92       	push	r3
    1d94:	4f 92       	push	r4
    1d96:	5f 92       	push	r5
    1d98:	6f 92       	push	r6
    1d9a:	7f 92       	push	r7
    1d9c:	8f 92       	push	r8
    1d9e:	9f 92       	push	r9
    1da0:	af 92       	push	r10
    1da2:	bf 92       	push	r11
    1da4:	cf 92       	push	r12
    1da6:	df 92       	push	r13
    1da8:	ef 92       	push	r14
    1daa:	ff 92       	push	r15
    1dac:	0f 93       	push	r16
    1dae:	1f 93       	push	r17
    1db0:	df 93       	push	r29
    1db2:	cf 93       	push	r28
    1db4:	cd b7       	in	r28, 0x3d	; 61
    1db6:	de b7       	in	r29, 0x3e	; 62
    1db8:	64 97       	sbiw	r28, 0x14	; 20
    1dba:	0f b6       	in	r0, 0x3f	; 63
    1dbc:	f8 94       	cli
    1dbe:	de bf       	out	0x3e, r29	; 62
    1dc0:	0f be       	out	0x3f, r0	; 63
    1dc2:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
    1dc4:	88 23       	and	r24, r24
    1dc6:	39 f5       	brne	.+78     	; 0x1e16 <prefilter+0x86>
    1dc8:	8b ee       	ldi	r24, 0xEB	; 235
    1dca:	94 e0       	ldi	r25, 0x04	; 4
    1dcc:	9c 8b       	std	Y+20, r25	; 0x14
    1dce:	8b 8b       	std	Y+19, r24	; 0x13
    1dd0:	a1 e8       	ldi	r26, 0x81	; 129
    1dd2:	b6 e0       	ldi	r27, 0x06	; 6
    1dd4:	be 83       	std	Y+6, r27	; 0x06
    1dd6:	ad 83       	std	Y+5, r26	; 0x05
    1dd8:	ed ef       	ldi	r30, 0xFD	; 253
    1dda:	f5 e0       	ldi	r31, 0x05	; 5
    1ddc:	fc 83       	std	Y+4, r31	; 0x04
    1dde:	eb 83       	std	Y+3, r30	; 0x03
    1de0:	8f e6       	ldi	r24, 0x6F	; 111
    1de2:	95 e0       	ldi	r25, 0x05	; 5
    1de4:	9a 83       	std	Y+2, r25	; 0x02
    1de6:	89 83       	std	Y+1, r24	; 0x01
    1de8:	0f 2e       	mov	r0, r31
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	2f 2e       	mov	r2, r31
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	3f 2e       	mov	r3, r31
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	4f 2e       	mov	r4, r31
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	5f 2e       	mov	r5, r31
    1dfa:	f0 2d       	mov	r31, r0
    1dfc:	2f 86       	std	Y+15, r2	; 0x0f
    1dfe:	38 8a       	std	Y+16, r3	; 0x10
    1e00:	49 8a       	std	Y+17, r4	; 0x11
    1e02:	5a 8a       	std	Y+18, r5	; 0x12
    1e04:	2b 86       	std	Y+11, r2	; 0x0b
    1e06:	3c 86       	std	Y+12, r3	; 0x0c
    1e08:	4d 86       	std	Y+13, r4	; 0x0d
    1e0a:	5e 86       	std	Y+14, r5	; 0x0e
    1e0c:	2f 82       	std	Y+7, r2	; 0x07
    1e0e:	38 86       	std	Y+8, r3	; 0x08
    1e10:	49 86       	std	Y+9, r4	; 0x09
    1e12:	5a 86       	std	Y+10, r5	; 0x0a
    1e14:	43 c0       	rjmp	.+134    	; 0x1e9c <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    1e16:	a0 90 09 06 	lds	r10, 0x0609
    1e1a:	b0 90 0a 06 	lds	r11, 0x060A
    1e1e:	c0 90 0b 06 	lds	r12, 0x060B
    1e22:	d0 90 0c 06 	lds	r13, 0x060C
			rtIR_old[i] = rtIR;
    1e26:	e0 90 0d 06 	lds	r14, 0x060D
    1e2a:	f0 90 0e 06 	lds	r15, 0x060E
    1e2e:	00 91 0f 06 	lds	r16, 0x060F
    1e32:	10 91 10 06 	lds	r17, 0x0610
			ftIR_old[i] = ftIR;
    1e36:	20 90 f3 04 	lds	r2, 0x04F3
    1e3a:	30 90 f4 04 	lds	r3, 0x04F4
    1e3e:	40 90 f5 04 	lds	r4, 0x04F5
    1e42:	50 90 f6 04 	lds	r5, 0x04F6
			bkIR_old[i] = bkIR;
    1e46:	20 91 fb 04 	lds	r18, 0x04FB
    1e4a:	30 91 fc 04 	lds	r19, 0x04FC
    1e4e:	40 91 fd 04 	lds	r20, 0x04FD
    1e52:	50 91 fe 04 	lds	r21, 0x04FE
    1e56:	80 e0       	ldi	r24, 0x00	; 0
    1e58:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    1e5a:	fc 01       	movw	r30, r24
    1e5c:	e5 58       	subi	r30, 0x85	; 133
    1e5e:	fb 4f       	sbci	r31, 0xFB	; 251
    1e60:	a0 82       	st	Z, r10
    1e62:	b1 82       	std	Z+1, r11	; 0x01
    1e64:	c2 82       	std	Z+2, r12	; 0x02
    1e66:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
    1e68:	fc 01       	movw	r30, r24
    1e6a:	ef 5e       	subi	r30, 0xEF	; 239
    1e6c:	f9 4f       	sbci	r31, 0xF9	; 249
    1e6e:	e0 82       	st	Z, r14
    1e70:	f1 82       	std	Z+1, r15	; 0x01
    1e72:	02 83       	std	Z+2, r16	; 0x02
    1e74:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
    1e76:	fc 01       	movw	r30, r24
    1e78:	e3 57       	subi	r30, 0x73	; 115
    1e7a:	fa 4f       	sbci	r31, 0xFA	; 250
    1e7c:	20 82       	st	Z, r2
    1e7e:	31 82       	std	Z+1, r3	; 0x01
    1e80:	42 82       	std	Z+2, r4	; 0x02
    1e82:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
    1e84:	fc 01       	movw	r30, r24
    1e86:	e1 50       	subi	r30, 0x01	; 1
    1e88:	fb 4f       	sbci	r31, 0xFB	; 251
    1e8a:	20 83       	st	Z, r18
    1e8c:	31 83       	std	Z+1, r19	; 0x01
    1e8e:	42 83       	std	Z+2, r20	; 0x02
    1e90:	53 83       	std	Z+3, r21	; 0x03
    1e92:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
    1e94:	88 37       	cpi	r24, 0x78	; 120
    1e96:	91 05       	cpc	r25, r1
    1e98:	01 f7       	brne	.-64     	; 0x1e5a <prefilter+0xca>
    1e9a:	96 cf       	rjmp	.-212    	; 0x1dc8 <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
    1e9c:	ab 89       	ldd	r26, Y+19	; 0x13
    1e9e:	bc 89       	ldd	r27, Y+20	; 0x14
    1ea0:	2d 91       	ld	r18, X+
    1ea2:	3d 91       	ld	r19, X+
    1ea4:	4d 91       	ld	r20, X+
    1ea6:	5c 91       	ld	r21, X
    1ea8:	13 97       	sbiw	r26, 0x03	; 3
    1eaa:	fd 01       	movw	r30, r26
    1eac:	24 83       	std	Z+4, r18	; 0x04
    1eae:	35 83       	std	Z+5, r19	; 0x05
    1eb0:	46 83       	std	Z+6, r20	; 0x06
    1eb2:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
    1eb4:	ad 81       	ldd	r26, Y+5	; 0x05
    1eb6:	be 81       	ldd	r27, Y+6	; 0x06
    1eb8:	ed 90       	ld	r14, X+
    1eba:	fd 90       	ld	r15, X+
    1ebc:	0d 91       	ld	r16, X+
    1ebe:	1c 91       	ld	r17, X
    1ec0:	13 97       	sbiw	r26, 0x03	; 3
    1ec2:	fd 01       	movw	r30, r26
    1ec4:	e4 82       	std	Z+4, r14	; 0x04
    1ec6:	f5 82       	std	Z+5, r15	; 0x05
    1ec8:	06 83       	std	Z+6, r16	; 0x06
    1eca:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
    1ecc:	ab 81       	ldd	r26, Y+3	; 0x03
    1ece:	bc 81       	ldd	r27, Y+4	; 0x04
    1ed0:	ad 90       	ld	r10, X+
    1ed2:	bd 90       	ld	r11, X+
    1ed4:	cd 90       	ld	r12, X+
    1ed6:	dc 90       	ld	r13, X
    1ed8:	13 97       	sbiw	r26, 0x03	; 3
    1eda:	fd 01       	movw	r30, r26
    1edc:	a4 82       	std	Z+4, r10	; 0x04
    1ede:	b5 82       	std	Z+5, r11	; 0x05
    1ee0:	c6 82       	std	Z+6, r12	; 0x06
    1ee2:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
    1ee4:	a9 81       	ldd	r26, Y+1	; 0x01
    1ee6:	ba 81       	ldd	r27, Y+2	; 0x02
    1ee8:	6d 90       	ld	r6, X+
    1eea:	7d 90       	ld	r7, X+
    1eec:	8d 90       	ld	r8, X+
    1eee:	9c 90       	ld	r9, X
    1ef0:	13 97       	sbiw	r26, 0x03	; 3
    1ef2:	fd 01       	movw	r30, r26
    1ef4:	64 82       	std	Z+4, r6	; 0x04
    1ef6:	75 82       	std	Z+5, r7	; 0x05
    1ef8:	86 82       	std	Z+6, r8	; 0x06
    1efa:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
    1efc:	c2 01       	movw	r24, r4
    1efe:	b1 01       	movw	r22, r2
    1f00:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    1f04:	1b 01       	movw	r2, r22
    1f06:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
    1f08:	6f 85       	ldd	r22, Y+15	; 0x0f
    1f0a:	78 89       	ldd	r23, Y+16	; 0x10
    1f0c:	89 89       	ldd	r24, Y+17	; 0x11
    1f0e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f10:	a8 01       	movw	r20, r16
    1f12:	97 01       	movw	r18, r14
    1f14:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    1f18:	6f 87       	std	Y+15, r22	; 0x0f
    1f1a:	78 8b       	std	Y+16, r23	; 0x10
    1f1c:	89 8b       	std	Y+17, r24	; 0x11
    1f1e:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
    1f20:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f22:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f24:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f26:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f28:	a6 01       	movw	r20, r12
    1f2a:	95 01       	movw	r18, r10
    1f2c:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    1f30:	6b 87       	std	Y+11, r22	; 0x0b
    1f32:	7c 87       	std	Y+12, r23	; 0x0c
    1f34:	8d 87       	std	Y+13, r24	; 0x0d
    1f36:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
    1f38:	6f 81       	ldd	r22, Y+7	; 0x07
    1f3a:	78 85       	ldd	r23, Y+8	; 0x08
    1f3c:	89 85       	ldd	r24, Y+9	; 0x09
    1f3e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f40:	a4 01       	movw	r20, r8
    1f42:	93 01       	movw	r18, r6
    1f44:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    1f48:	6f 83       	std	Y+7, r22	; 0x07
    1f4a:	78 87       	std	Y+8, r23	; 0x08
    1f4c:	89 87       	std	Y+9, r24	; 0x09
    1f4e:	9a 87       	std	Y+10, r25	; 0x0a
    1f50:	8b 89       	ldd	r24, Y+19	; 0x13
    1f52:	9c 89       	ldd	r25, Y+20	; 0x14
    1f54:	04 97       	sbiw	r24, 0x04	; 4
    1f56:	9c 8b       	std	Y+20, r25	; 0x14
    1f58:	8b 8b       	std	Y+19, r24	; 0x13
    1f5a:	ad 81       	ldd	r26, Y+5	; 0x05
    1f5c:	be 81       	ldd	r27, Y+6	; 0x06
    1f5e:	14 97       	sbiw	r26, 0x04	; 4
    1f60:	be 83       	std	Y+6, r27	; 0x06
    1f62:	ad 83       	std	Y+5, r26	; 0x05
    1f64:	eb 81       	ldd	r30, Y+3	; 0x03
    1f66:	fc 81       	ldd	r31, Y+4	; 0x04
    1f68:	34 97       	sbiw	r30, 0x04	; 4
    1f6a:	fc 83       	std	Y+4, r31	; 0x04
    1f6c:	eb 83       	std	Y+3, r30	; 0x03
    1f6e:	89 81       	ldd	r24, Y+1	; 0x01
    1f70:	9a 81       	ldd	r25, Y+2	; 0x02
    1f72:	04 97       	sbiw	r24, 0x04	; 4
    1f74:	9a 83       	std	Y+2, r25	; 0x02
    1f76:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
    1f78:	ab 89       	ldd	r26, Y+19	; 0x13
    1f7a:	bc 89       	ldd	r27, Y+20	; 0x14
    1f7c:	a3 57       	subi	r26, 0x73	; 115
    1f7e:	b4 40       	sbci	r27, 0x04	; 4
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <prefilter+0x1f4>
    1f82:	8c cf       	rjmp	.-232    	; 0x1e9c <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
    1f84:	80 91 09 06 	lds	r24, 0x0609
    1f88:	90 91 0a 06 	lds	r25, 0x060A
    1f8c:	a0 91 0b 06 	lds	r26, 0x060B
    1f90:	b0 91 0c 06 	lds	r27, 0x060C
    1f94:	eb 89       	ldd	r30, Y+19	; 0x13
    1f96:	fc 89       	ldd	r31, Y+20	; 0x14
    1f98:	80 87       	std	Z+8, r24	; 0x08
    1f9a:	91 87       	std	Z+9, r25	; 0x09
    1f9c:	a2 87       	std	Z+10, r26	; 0x0a
    1f9e:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
    1fa0:	80 91 0d 06 	lds	r24, 0x060D
    1fa4:	90 91 0e 06 	lds	r25, 0x060E
    1fa8:	a0 91 0f 06 	lds	r26, 0x060F
    1fac:	b0 91 10 06 	lds	r27, 0x0610
    1fb0:	80 93 11 06 	sts	0x0611, r24
    1fb4:	90 93 12 06 	sts	0x0612, r25
    1fb8:	a0 93 13 06 	sts	0x0613, r26
    1fbc:	b0 93 14 06 	sts	0x0614, r27
	ftIR_old[0] = ftIR;
    1fc0:	80 91 f3 04 	lds	r24, 0x04F3
    1fc4:	90 91 f4 04 	lds	r25, 0x04F4
    1fc8:	a0 91 f5 04 	lds	r26, 0x04F5
    1fcc:	b0 91 f6 04 	lds	r27, 0x04F6
    1fd0:	80 93 8d 05 	sts	0x058D, r24
    1fd4:	90 93 8e 05 	sts	0x058E, r25
    1fd8:	a0 93 8f 05 	sts	0x058F, r26
    1fdc:	b0 93 90 05 	sts	0x0590, r27
	bkIR_old[0] = bkIR;
    1fe0:	80 91 fb 04 	lds	r24, 0x04FB
    1fe4:	90 91 fc 04 	lds	r25, 0x04FC
    1fe8:	a0 91 fd 04 	lds	r26, 0x04FD
    1fec:	b0 91 fe 04 	lds	r27, 0x04FE
    1ff0:	80 93 ff 04 	sts	0x04FF, r24
    1ff4:	90 93 00 05 	sts	0x0500, r25
    1ff8:	a0 93 01 05 	sts	0x0501, r26
    1ffc:	b0 93 02 05 	sts	0x0502, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
    2000:	c2 01       	movw	r24, r4
    2002:	b1 01       	movw	r22, r2
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 ef       	ldi	r20, 0xF0	; 240
    200a:	51 e4       	ldi	r21, 0x41	; 65
    200c:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2010:	60 93 09 06 	sts	0x0609, r22
    2014:	70 93 0a 06 	sts	0x060A, r23
    2018:	80 93 0b 06 	sts	0x060B, r24
    201c:	90 93 0c 06 	sts	0x060C, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
    2020:	6f 85       	ldd	r22, Y+15	; 0x0f
    2022:	78 89       	ldd	r23, Y+16	; 0x10
    2024:	89 89       	ldd	r24, Y+17	; 0x11
    2026:	9a 89       	ldd	r25, Y+18	; 0x12
    2028:	20 e0       	ldi	r18, 0x00	; 0
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	40 ef       	ldi	r20, 0xF0	; 240
    202e:	51 e4       	ldi	r21, 0x41	; 65
    2030:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2034:	60 93 0d 06 	sts	0x060D, r22
    2038:	70 93 0e 06 	sts	0x060E, r23
    203c:	80 93 0f 06 	sts	0x060F, r24
    2040:	90 93 10 06 	sts	0x0610, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
    2044:	6b 85       	ldd	r22, Y+11	; 0x0b
    2046:	7c 85       	ldd	r23, Y+12	; 0x0c
    2048:	8d 85       	ldd	r24, Y+13	; 0x0d
    204a:	9e 85       	ldd	r25, Y+14	; 0x0e
    204c:	20 e0       	ldi	r18, 0x00	; 0
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	40 ef       	ldi	r20, 0xF0	; 240
    2052:	51 e4       	ldi	r21, 0x41	; 65
    2054:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2058:	60 93 f3 04 	sts	0x04F3, r22
    205c:	70 93 f4 04 	sts	0x04F4, r23
    2060:	80 93 f5 04 	sts	0x04F5, r24
    2064:	90 93 f6 04 	sts	0x04F6, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
    2068:	6f 81       	ldd	r22, Y+7	; 0x07
    206a:	78 85       	ldd	r23, Y+8	; 0x08
    206c:	89 85       	ldd	r24, Y+9	; 0x09
    206e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2070:	20 e0       	ldi	r18, 0x00	; 0
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	40 ef       	ldi	r20, 0xF0	; 240
    2076:	51 e4       	ldi	r21, 0x41	; 65
    2078:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    207c:	60 93 fb 04 	sts	0x04FB, r22
    2080:	70 93 fc 04 	sts	0x04FC, r23
    2084:	80 93 fd 04 	sts	0x04FD, r24
    2088:	90 93 fe 04 	sts	0x04FE, r25
}
    208c:	64 96       	adiw	r28, 0x14	; 20
    208e:	0f b6       	in	r0, 0x3f	; 63
    2090:	f8 94       	cli
    2092:	de bf       	out	0x3e, r29	; 62
    2094:	0f be       	out	0x3f, r0	; 63
    2096:	cd bf       	out	0x3d, r28	; 61
    2098:	cf 91       	pop	r28
    209a:	df 91       	pop	r29
    209c:	1f 91       	pop	r17
    209e:	0f 91       	pop	r16
    20a0:	ff 90       	pop	r15
    20a2:	ef 90       	pop	r14
    20a4:	df 90       	pop	r13
    20a6:	cf 90       	pop	r12
    20a8:	bf 90       	pop	r11
    20aa:	af 90       	pop	r10
    20ac:	9f 90       	pop	r9
    20ae:	8f 90       	pop	r8
    20b0:	7f 90       	pop	r7
    20b2:	6f 90       	pop	r6
    20b4:	5f 90       	pop	r5
    20b6:	4f 90       	pop	r4
    20b8:	3f 90       	pop	r3
    20ba:	2f 90       	pop	r2
    20bc:	08 95       	ret

000020be <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
    20be:	af 92       	push	r10
    20c0:	bf 92       	push	r11
    20c2:	cf 92       	push	r12
    20c4:	df 92       	push	r13
    20c6:	ef 92       	push	r14
    20c8:	ff 92       	push	r15
    20ca:	0f 93       	push	r16
    20cc:	1f 93       	push	r17
    20ce:	7b 01       	movw	r14, r22
    20d0:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
    20d2:	44 23       	and	r20, r20
    20d4:	61 f0       	breq	.+24     	; 0x20ee <pidController+0x30>
		Ierror = 0;
    20d6:	80 e0       	ldi	r24, 0x00	; 0
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	a0 e0       	ldi	r26, 0x00	; 0
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	80 93 f7 04 	sts	0x04F7, r24
    20e2:	90 93 f8 04 	sts	0x04F8, r25
    20e6:	a0 93 f9 04 	sts	0x04F9, r26
    20ea:	b0 93 fa 04 	sts	0x04FA, r27
	}
	// At the current error to the running sum
	Ierror += error;
    20ee:	c8 01       	movw	r24, r16
    20f0:	b7 01       	movw	r22, r14
    20f2:	20 91 f7 04 	lds	r18, 0x04F7
    20f6:	30 91 f8 04 	lds	r19, 0x04F8
    20fa:	40 91 f9 04 	lds	r20, 0x04F9
    20fe:	50 91 fa 04 	lds	r21, 0x04FA
    2102:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    2106:	5b 01       	movw	r10, r22
    2108:	6c 01       	movw	r12, r24
    210a:	60 93 f7 04 	sts	0x04F7, r22
    210e:	70 93 f8 04 	sts	0x04F8, r23
    2112:	80 93 f9 04 	sts	0x04F9, r24
    2116:	90 93 fa 04 	sts	0x04FA, r25
    211a:	c8 01       	movw	r24, r16
    211c:	b7 01       	movw	r22, r14
    211e:	20 91 89 05 	lds	r18, 0x0589
    2122:	30 91 8a 05 	lds	r19, 0x058A
    2126:	40 91 8b 05 	lds	r20, 0x058B
    212a:	50 91 8c 05 	lds	r21, 0x058C
    212e:	0e 94 d2 29 	call	0x53a4	; 0x53a4 <__subsf3>
    2132:	20 e0       	ldi	r18, 0x00	; 0
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	40 e0       	ldi	r20, 0x00	; 0
    2138:	50 e0       	ldi	r21, 0x00	; 0
    213a:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    213e:	9b 01       	movw	r18, r22
    2140:	ac 01       	movw	r20, r24
    2142:	c8 01       	movw	r24, r16
    2144:	b7 01       	movw	r22, r14
    2146:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    214a:	7b 01       	movw	r14, r22
    214c:	8c 01       	movw	r16, r24
    214e:	c6 01       	movw	r24, r12
    2150:	b5 01       	movw	r22, r10
    2152:	20 e0       	ldi	r18, 0x00	; 0
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	40 e0       	ldi	r20, 0x00	; 0
    2158:	50 e0       	ldi	r21, 0x00	; 0
    215a:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    215e:	9b 01       	movw	r18, r22
    2160:	ac 01       	movw	r20, r24
    2162:	c8 01       	movw	r24, r16
    2164:	b7 01       	movw	r22, r14
    2166:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
    216a:	1f 91       	pop	r17
    216c:	0f 91       	pop	r16
    216e:	ff 90       	pop	r15
    2170:	ef 90       	pop	r14
    2172:	df 90       	pop	r13
    2174:	cf 90       	pop	r12
    2176:	bf 90       	pop	r11
    2178:	af 90       	pop	r10
    217a:	08 95       	ret

0000217c <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    217c:	44 23       	and	r20, r20
    217e:	81 f0       	breq	.+32     	; 0x21a0 <rotateCell+0x24>
    2180:	06 c0       	rjmp	.+12     	; 0x218e <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    2182:	e8 2f       	mov	r30, r24
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	e8 59       	subi	r30, 0x98	; 152
    2188:	fc 4f       	sbci	r31, 0xFC	; 252
    218a:	80 81       	ld	r24, Z
			orient--;
    218c:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    218e:	66 23       	and	r22, r22
    2190:	c1 f7       	brne	.-16     	; 0x2182 <rotateCell+0x6>
    2192:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    2194:	e8 2f       	mov	r30, r24
    2196:	f0 e0       	ldi	r31, 0x00	; 0
    2198:	e8 58       	subi	r30, 0x88	; 136
    219a:	fc 4f       	sbci	r31, 0xFC	; 252
    219c:	80 81       	ld	r24, Z
			orient--;
    219e:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    21a0:	66 23       	and	r22, r22
    21a2:	c1 f7       	brne	.-16     	; 0x2194 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    21a4:	08 95       	ret

000021a6 <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    21a6:	2f 92       	push	r2
    21a8:	3f 92       	push	r3
    21aa:	4f 92       	push	r4
    21ac:	5f 92       	push	r5
    21ae:	6f 92       	push	r6
    21b0:	7f 92       	push	r7
    21b2:	8f 92       	push	r8
    21b4:	9f 92       	push	r9
    21b6:	af 92       	push	r10
    21b8:	bf 92       	push	r11
    21ba:	cf 92       	push	r12
    21bc:	df 92       	push	r13
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	a0 97       	sbiw	r28, 0x20	; 32
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	2b 01       	movw	r4, r22
    21dc:	3c 01       	movw	r6, r24
    21de:	2d 83       	std	Y+5, r18	; 0x05
    21e0:	3e 83       	std	Y+6, r19	; 0x06
    21e2:	4f 83       	std	Y+7, r20	; 0x07
    21e4:	58 87       	std	Y+8, r21	; 0x08
    21e6:	e9 86       	std	Y+9, r14	; 0x09
    21e8:	fa 86       	std	Y+10, r15	; 0x0a
    21ea:	0b 87       	std	Y+11, r16	; 0x0b
    21ec:	1c 87       	std	Y+12, r17	; 0x0c
    21ee:	ad 86       	std	Y+13, r10	; 0x0d
    21f0:	be 86       	std	Y+14, r11	; 0x0e
    21f2:	cf 86       	std	Y+15, r12	; 0x0f
    21f4:	d8 8a       	std	Y+16, r13	; 0x10
    21f6:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    21f8:	33 24       	eor	r3, r3
    21fa:	ca 01       	movw	r24, r20
    21fc:	b9 01       	movw	r22, r18
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e0       	ldi	r20, 0x00	; 0
    2204:	50 e0       	ldi	r21, 0x00	; 0
    2206:	0e 94 86 2b 	call	0x570c	; 0x570c <__gesf2>
    220a:	18 16       	cp	r1, r24
    220c:	14 f4       	brge	.+4      	; 0x2212 <move_arc_stnb+0x6c>
    220e:	33 24       	eor	r3, r3
    2210:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    2212:	6d 81       	ldd	r22, Y+5	; 0x05
    2214:	7e 81       	ldd	r23, Y+6	; 0x06
    2216:	8f 81       	ldd	r24, Y+7	; 0x07
    2218:	98 85       	ldd	r25, Y+8	; 0x08
    221a:	2c ed       	ldi	r18, 0xDC	; 220
    221c:	38 eb       	ldi	r19, 0xB8	; 184
    221e:	48 e0       	ldi	r20, 0x08	; 8
    2220:	5e e3       	ldi	r21, 0x3E	; 62
    2222:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2226:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__fixsfsi>
    222a:	9b 01       	movw	r18, r22
    222c:	77 ff       	sbrs	r23, 7
    222e:	03 c0       	rjmp	.+6      	; 0x2236 <move_arc_stnb+0x90>
    2230:	30 95       	com	r19
    2232:	21 95       	neg	r18
    2234:	3f 4f       	sbci	r19, 0xFF	; 255
    2236:	b9 01       	movw	r22, r18
    2238:	88 27       	eor	r24, r24
    223a:	77 fd       	sbrc	r23, 7
    223c:	80 95       	com	r24
    223e:	98 2f       	mov	r25, r24
    2240:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <__floatsisf>
    2244:	69 83       	std	Y+1, r22	; 0x01
    2246:	7a 83       	std	Y+2, r23	; 0x02
    2248:	8b 83       	std	Y+3, r24	; 0x03
    224a:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    224c:	69 85       	ldd	r22, Y+9	; 0x09
    224e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2250:	8b 85       	ldd	r24, Y+11	; 0x0b
    2252:	9c 85       	ldd	r25, Y+12	; 0x0c
    2254:	2c ed       	ldi	r18, 0xDC	; 220
    2256:	38 eb       	ldi	r19, 0xB8	; 184
    2258:	48 e0       	ldi	r20, 0x08	; 8
    225a:	5e e3       	ldi	r21, 0x3E	; 62
    225c:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2260:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__fixsfsi>
    2264:	9b 01       	movw	r18, r22
    2266:	77 ff       	sbrs	r23, 7
    2268:	03 c0       	rjmp	.+6      	; 0x2270 <move_arc_stnb+0xca>
    226a:	30 95       	com	r19
    226c:	21 95       	neg	r18
    226e:	3f 4f       	sbci	r19, 0xFF	; 255
    2270:	b9 01       	movw	r22, r18
    2272:	88 27       	eor	r24, r24
    2274:	77 fd       	sbrc	r23, 7
    2276:	80 95       	com	r24
    2278:	98 2f       	mov	r25, r24
    227a:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <__floatsisf>
    227e:	4b 01       	movw	r8, r22
    2280:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    2282:	6d 85       	ldd	r22, Y+13	; 0x0d
    2284:	7e 85       	ldd	r23, Y+14	; 0x0e
    2286:	8f 85       	ldd	r24, Y+15	; 0x0f
    2288:	98 89       	ldd	r25, Y+16	; 0x10
    228a:	2c ed       	ldi	r18, 0xDC	; 220
    228c:	38 eb       	ldi	r19, 0xB8	; 184
    228e:	48 e0       	ldi	r20, 0x08	; 8
    2290:	5e e3       	ldi	r21, 0x3E	; 62
    2292:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2296:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__fixsfsi>
    229a:	9b 01       	movw	r18, r22
    229c:	77 ff       	sbrs	r23, 7
    229e:	03 c0       	rjmp	.+6      	; 0x22a6 <move_arc_stnb+0x100>
    22a0:	30 95       	com	r19
    22a2:	21 95       	neg	r18
    22a4:	3f 4f       	sbci	r19, 0xFF	; 255
    22a6:	b9 01       	movw	r22, r18
    22a8:	88 27       	eor	r24, r24
    22aa:	77 fd       	sbrc	r23, 7
    22ac:	80 95       	com	r24
    22ae:	98 2f       	mov	r25, r24
    22b0:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <__floatsisf>
    22b4:	6b 01       	movw	r12, r22
    22b6:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    22b8:	c3 01       	movw	r24, r6
    22ba:	b2 01       	movw	r22, r4
    22bc:	20 e0       	ldi	r18, 0x00	; 0
    22be:	30 e0       	ldi	r19, 0x00	; 0
    22c0:	40 e0       	ldi	r20, 0x00	; 0
    22c2:	5f e4       	ldi	r21, 0x4F	; 79
    22c4:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
    22c8:	88 23       	and	r24, r24
    22ca:	a1 f5       	brne	.+104    	; 0x2334 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    22cc:	69 81       	ldd	r22, Y+1	; 0x01
    22ce:	7a 81       	ldd	r23, Y+2	; 0x02
    22d0:	8b 81       	ldd	r24, Y+3	; 0x03
    22d2:	9c 81       	ldd	r25, Y+4	; 0x04
    22d4:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    22d8:	2b 01       	movw	r4, r22
    22da:	3c 01       	movw	r6, r24
    22dc:	c5 01       	movw	r24, r10
    22de:	b4 01       	movw	r22, r8
    22e0:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    22e4:	4b 01       	movw	r8, r22
    22e6:	5c 01       	movw	r10, r24
    22e8:	c7 01       	movw	r24, r14
    22ea:	b6 01       	movw	r22, r12
    22ec:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    22f0:	6b 01       	movw	r12, r22
    22f2:	7c 01       	movw	r14, r24
    22f4:	2d b7       	in	r18, 0x3d	; 61
    22f6:	3e b7       	in	r19, 0x3e	; 62
    22f8:	29 50       	subi	r18, 0x09	; 9
    22fa:	30 40       	sbci	r19, 0x00	; 0
    22fc:	0f b6       	in	r0, 0x3f	; 63
    22fe:	f8 94       	cli
    2300:	3e bf       	out	0x3e, r19	; 62
    2302:	0f be       	out	0x3f, r0	; 63
    2304:	2d bf       	out	0x3d, r18	; 61
    2306:	ed b7       	in	r30, 0x3d	; 61
    2308:	fe b7       	in	r31, 0x3e	; 62
    230a:	31 96       	adiw	r30, 0x01	; 1
    230c:	ad b7       	in	r26, 0x3d	; 61
    230e:	be b7       	in	r27, 0x3e	; 62
    2310:	12 96       	adiw	r26, 0x02	; 2
    2312:	5c 92       	st	X, r5
    2314:	4e 92       	st	-X, r4
    2316:	11 97       	sbiw	r26, 0x01	; 1
    2318:	93 82       	std	Z+3, r9	; 0x03
    231a:	82 82       	std	Z+2, r8	; 0x02
    231c:	75 83       	std	Z+5, r23	; 0x05
    231e:	64 83       	std	Z+4, r22	; 0x04
    2320:	26 82       	std	Z+6, r2	; 0x06
    2322:	10 86       	std	Z+8, r1	; 0x08
    2324:	17 82       	std	Z+7, r1	; 0x07
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	62 e0       	ldi	r22, 0x02	; 2
    232a:	43 2d       	mov	r20, r3
    232c:	92 01       	movw	r18, r4
    232e:	84 01       	movw	r16, r8
    2330:	76 01       	movw	r14, r12
    2332:	c1 c1       	rjmp	.+898    	; 0x26b6 <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    2334:	c3 01       	movw	r24, r6
    2336:	b2 01       	movw	r22, r4
    2338:	20 e0       	ldi	r18, 0x00	; 0
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	40 e0       	ldi	r20, 0x00	; 0
    233e:	50 e0       	ldi	r21, 0x00	; 0
    2340:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
    2344:	88 23       	and	r24, r24
    2346:	e9 f5       	brne	.+122    	; 0x23c2 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    2348:	69 81       	ldd	r22, Y+1	; 0x01
    234a:	7a 81       	ldd	r23, Y+2	; 0x02
    234c:	8b 81       	ldd	r24, Y+3	; 0x03
    234e:	9c 81       	ldd	r25, Y+4	; 0x04
    2350:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2354:	3b 01       	movw	r6, r22
    2356:	c5 01       	movw	r24, r10
    2358:	b4 01       	movw	r22, r8
    235a:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    235e:	8b 01       	movw	r16, r22
    2360:	c7 01       	movw	r24, r14
    2362:	b6 01       	movw	r22, r12
    2364:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2368:	7b 01       	movw	r14, r22
    236a:	2d b7       	in	r18, 0x3d	; 61
    236c:	3e b7       	in	r19, 0x3e	; 62
    236e:	29 50       	subi	r18, 0x09	; 9
    2370:	30 40       	sbci	r19, 0x00	; 0
    2372:	0f b6       	in	r0, 0x3f	; 63
    2374:	f8 94       	cli
    2376:	3e bf       	out	0x3e, r19	; 62
    2378:	0f be       	out	0x3f, r0	; 63
    237a:	2d bf       	out	0x3d, r18	; 61
    237c:	ed b7       	in	r30, 0x3d	; 61
    237e:	fe b7       	in	r31, 0x3e	; 62
    2380:	31 96       	adiw	r30, 0x01	; 1
    2382:	40 e0       	ldi	r20, 0x00	; 0
    2384:	33 20       	and	r3, r3
    2386:	09 f4       	brne	.+2      	; 0x238a <move_arc_stnb+0x1e4>
    2388:	41 e0       	ldi	r20, 0x01	; 1
    238a:	71 82       	std	Z+1, r7	; 0x01
    238c:	60 82       	st	Z, r6
    238e:	13 83       	std	Z+3, r17	; 0x03
    2390:	02 83       	std	Z+2, r16	; 0x02
    2392:	f5 82       	std	Z+5, r15	; 0x05
    2394:	e4 82       	std	Z+4, r14	; 0x04
    2396:	26 82       	std	Z+6, r2	; 0x06
    2398:	10 86       	std	Z+8, r1	; 0x08
    239a:	17 82       	std	Z+7, r1	; 0x07
    239c:	81 e0       	ldi	r24, 0x01	; 1
    239e:	62 e0       	ldi	r22, 0x02	; 2
    23a0:	93 01       	movw	r18, r6
    23a2:	c2 2c       	mov	r12, r2
    23a4:	aa 24       	eor	r10, r10
    23a6:	bb 24       	eor	r11, r11
    23a8:	83 2c       	mov	r8, r3
    23aa:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <STEPPER_move>
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	ad b7       	in	r26, 0x3d	; 61
    23b2:	be b7       	in	r27, 0x3e	; 62
    23b4:	19 96       	adiw	r26, 0x09	; 9
    23b6:	0f b6       	in	r0, 0x3f	; 63
    23b8:	f8 94       	cli
    23ba:	be bf       	out	0x3e, r27	; 62
    23bc:	0f be       	out	0x3f, r0	; 63
    23be:	ad bf       	out	0x3d, r26	; 61
    23c0:	89 c1       	rjmp	.+786    	; 0x26d4 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    23c2:	c3 01       	movw	r24, r6
    23c4:	b2 01       	movw	r22, r4
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	50 e0       	ldi	r21, 0x00	; 0
    23ce:	0e 94 86 2b 	call	0x570c	; 0x570c <__gesf2>
    23d2:	18 16       	cp	r1, r24
    23d4:	0c f0       	brlt	.+2      	; 0x23d8 <move_arc_stnb+0x232>
    23d6:	b1 c0       	rjmp	.+354    	; 0x253a <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    23d8:	66 e6       	ldi	r22, 0x66	; 102
    23da:	76 e6       	ldi	r23, 0x66	; 102
    23dc:	8a ea       	ldi	r24, 0xAA	; 170
    23de:	91 ec       	ldi	r25, 0xC1	; 193
    23e0:	a3 01       	movw	r20, r6
    23e2:	92 01       	movw	r18, r4
    23e4:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    23e8:	20 e0       	ldi	r18, 0x00	; 0
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	40 e8       	ldi	r20, 0x80	; 128
    23ee:	5f e3       	ldi	r21, 0x3F	; 63
    23f0:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    23f4:	7b 01       	movw	r14, r22
    23f6:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    23f8:	66 e6       	ldi	r22, 0x66	; 102
    23fa:	76 e6       	ldi	r23, 0x66	; 102
    23fc:	8a ea       	ldi	r24, 0xAA	; 170
    23fe:	91 e4       	ldi	r25, 0x41	; 65
    2400:	a3 01       	movw	r20, r6
    2402:	92 01       	movw	r18, r4
    2404:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	30 e0       	ldi	r19, 0x00	; 0
    240c:	40 e8       	ldi	r20, 0x80	; 128
    240e:	5f e3       	ldi	r21, 0x3F	; 63
    2410:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    2414:	5b 01       	movw	r10, r22
    2416:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    2418:	ed b7       	in	r30, 0x3d	; 61
    241a:	fe b7       	in	r31, 0x3e	; 62
    241c:	39 97       	sbiw	r30, 0x09	; 9
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	fe bf       	out	0x3e, r31	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	ed bf       	out	0x3d, r30	; 61
    2428:	8d b6       	in	r8, 0x3d	; 61
    242a:	9e b6       	in	r9, 0x3e	; 62
    242c:	08 94       	sec
    242e:	81 1c       	adc	r8, r1
    2430:	91 1c       	adc	r9, r1
    2432:	6d 81       	ldd	r22, Y+5	; 0x05
    2434:	7e 81       	ldd	r23, Y+6	; 0x06
    2436:	8f 81       	ldd	r24, Y+7	; 0x07
    2438:	98 85       	ldd	r25, Y+8	; 0x08
    243a:	a8 01       	movw	r20, r16
    243c:	97 01       	movw	r18, r14
    243e:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2442:	2c ed       	ldi	r18, 0xDC	; 220
    2444:	38 eb       	ldi	r19, 0xB8	; 184
    2446:	48 e0       	ldi	r20, 0x08	; 8
    2448:	5e e3       	ldi	r21, 0x3E	; 62
    244a:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    244e:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2452:	69 8b       	std	Y+17, r22	; 0x11
    2454:	7a 8b       	std	Y+18, r23	; 0x12
    2456:	8b 8b       	std	Y+19, r24	; 0x13
    2458:	9c 8b       	std	Y+20, r25	; 0x14
    245a:	69 85       	ldd	r22, Y+9	; 0x09
    245c:	7a 85       	ldd	r23, Y+10	; 0x0a
    245e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2460:	9c 85       	ldd	r25, Y+12	; 0x0c
    2462:	a8 01       	movw	r20, r16
    2464:	97 01       	movw	r18, r14
    2466:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    246a:	2c ed       	ldi	r18, 0xDC	; 220
    246c:	38 eb       	ldi	r19, 0xB8	; 184
    246e:	48 e0       	ldi	r20, 0x08	; 8
    2470:	5e e3       	ldi	r21, 0x3E	; 62
    2472:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2476:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    247a:	6d 8b       	std	Y+21, r22	; 0x15
    247c:	7e 8b       	std	Y+22, r23	; 0x16
    247e:	8f 8b       	std	Y+23, r24	; 0x17
    2480:	98 8f       	std	Y+24, r25	; 0x18
    2482:	6d 85       	ldd	r22, Y+13	; 0x0d
    2484:	7e 85       	ldd	r23, Y+14	; 0x0e
    2486:	8f 85       	ldd	r24, Y+15	; 0x0f
    2488:	98 89       	ldd	r25, Y+16	; 0x10
    248a:	a8 01       	movw	r20, r16
    248c:	97 01       	movw	r18, r14
    248e:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2492:	2c ed       	ldi	r18, 0xDC	; 220
    2494:	38 eb       	ldi	r19, 0xB8	; 184
    2496:	48 e0       	ldi	r20, 0x08	; 8
    2498:	5e e3       	ldi	r21, 0x3E	; 62
    249a:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    249e:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    24a2:	2b 01       	movw	r4, r22
    24a4:	3c 01       	movw	r6, r24
    24a6:	6d 81       	ldd	r22, Y+5	; 0x05
    24a8:	7e 81       	ldd	r23, Y+6	; 0x06
    24aa:	8f 81       	ldd	r24, Y+7	; 0x07
    24ac:	98 85       	ldd	r25, Y+8	; 0x08
    24ae:	a6 01       	movw	r20, r12
    24b0:	95 01       	movw	r18, r10
    24b2:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    24b6:	2c ed       	ldi	r18, 0xDC	; 220
    24b8:	38 eb       	ldi	r19, 0xB8	; 184
    24ba:	48 e0       	ldi	r20, 0x08	; 8
    24bc:	5e e3       	ldi	r21, 0x3E	; 62
    24be:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    24c2:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    24c6:	d4 01       	movw	r26, r8
    24c8:	6d 93       	st	X+, r22
    24ca:	7c 93       	st	X, r23
    24cc:	69 85       	ldd	r22, Y+9	; 0x09
    24ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    24d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    24d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    24d4:	a6 01       	movw	r20, r12
    24d6:	95 01       	movw	r18, r10
    24d8:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    24dc:	2c ed       	ldi	r18, 0xDC	; 220
    24de:	38 eb       	ldi	r19, 0xB8	; 184
    24e0:	48 e0       	ldi	r20, 0x08	; 8
    24e2:	5e e3       	ldi	r21, 0x3E	; 62
    24e4:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    24e8:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    24ec:	f4 01       	movw	r30, r8
    24ee:	73 83       	std	Z+3, r23	; 0x03
    24f0:	62 83       	std	Z+2, r22	; 0x02
    24f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    24f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    24f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    24f8:	98 89       	ldd	r25, Y+16	; 0x10
    24fa:	a6 01       	movw	r20, r12
    24fc:	95 01       	movw	r18, r10
    24fe:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2502:	2c ed       	ldi	r18, 0xDC	; 220
    2504:	38 eb       	ldi	r19, 0xB8	; 184
    2506:	48 e0       	ldi	r20, 0x08	; 8
    2508:	5e e3       	ldi	r21, 0x3E	; 62
    250a:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    250e:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2512:	d4 01       	movw	r26, r8
    2514:	15 96       	adiw	r26, 0x05	; 5
    2516:	7c 93       	st	X, r23
    2518:	6e 93       	st	-X, r22
    251a:	14 97       	sbiw	r26, 0x04	; 4
    251c:	16 96       	adiw	r26, 0x06	; 6
    251e:	2c 92       	st	X, r2
    2520:	16 97       	sbiw	r26, 0x06	; 6
    2522:	18 96       	adiw	r26, 0x08	; 8
    2524:	1c 92       	st	X, r1
    2526:	1e 92       	st	-X, r1
    2528:	17 97       	sbiw	r26, 0x07	; 7
    252a:	81 e0       	ldi	r24, 0x01	; 1
    252c:	62 e0       	ldi	r22, 0x02	; 2
    252e:	43 2d       	mov	r20, r3
    2530:	29 89       	ldd	r18, Y+17	; 0x11
    2532:	3a 89       	ldd	r19, Y+18	; 0x12
    2534:	0d 89       	ldd	r16, Y+21	; 0x15
    2536:	1e 89       	ldd	r17, Y+22	; 0x16
    2538:	bd c0       	rjmp	.+378    	; 0x26b4 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    253a:	c3 01       	movw	r24, r6
    253c:	b2 01       	movw	r22, r4
    253e:	20 e0       	ldi	r18, 0x00	; 0
    2540:	30 e0       	ldi	r19, 0x00	; 0
    2542:	40 e0       	ldi	r20, 0x00	; 0
    2544:	50 e0       	ldi	r21, 0x00	; 0
    2546:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
    254a:	87 fd       	sbrc	r24, 7
    254c:	02 c0       	rjmp	.+4      	; 0x2552 <move_arc_stnb+0x3ac>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	c1 c0       	rjmp	.+386    	; 0x26d4 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2552:	66 e6       	ldi	r22, 0x66	; 102
    2554:	76 e6       	ldi	r23, 0x66	; 102
    2556:	8a ea       	ldi	r24, 0xAA	; 170
    2558:	91 e4       	ldi	r25, 0x41	; 65
    255a:	a3 01       	movw	r20, r6
    255c:	92 01       	movw	r18, r4
    255e:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2562:	20 e0       	ldi	r18, 0x00	; 0
    2564:	30 e0       	ldi	r19, 0x00	; 0
    2566:	40 e8       	ldi	r20, 0x80	; 128
    2568:	5f e3       	ldi	r21, 0x3F	; 63
    256a:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    256e:	7b 01       	movw	r14, r22
    2570:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2572:	66 e6       	ldi	r22, 0x66	; 102
    2574:	76 e6       	ldi	r23, 0x66	; 102
    2576:	8a ea       	ldi	r24, 0xAA	; 170
    2578:	91 ec       	ldi	r25, 0xC1	; 193
    257a:	a3 01       	movw	r20, r6
    257c:	92 01       	movw	r18, r4
    257e:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	40 e8       	ldi	r20, 0x80	; 128
    2588:	5f e3       	ldi	r21, 0x3F	; 63
    258a:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    258e:	5b 01       	movw	r10, r22
    2590:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    2592:	2d b7       	in	r18, 0x3d	; 61
    2594:	3e b7       	in	r19, 0x3e	; 62
    2596:	29 50       	subi	r18, 0x09	; 9
    2598:	30 40       	sbci	r19, 0x00	; 0
    259a:	0f b6       	in	r0, 0x3f	; 63
    259c:	f8 94       	cli
    259e:	3e bf       	out	0x3e, r19	; 62
    25a0:	0f be       	out	0x3f, r0	; 63
    25a2:	2d bf       	out	0x3d, r18	; 61
    25a4:	8d b6       	in	r8, 0x3d	; 61
    25a6:	9e b6       	in	r9, 0x3e	; 62
    25a8:	08 94       	sec
    25aa:	81 1c       	adc	r8, r1
    25ac:	91 1c       	adc	r9, r1
    25ae:	6d 81       	ldd	r22, Y+5	; 0x05
    25b0:	7e 81       	ldd	r23, Y+6	; 0x06
    25b2:	8f 81       	ldd	r24, Y+7	; 0x07
    25b4:	98 85       	ldd	r25, Y+8	; 0x08
    25b6:	a8 01       	movw	r20, r16
    25b8:	97 01       	movw	r18, r14
    25ba:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    25be:	2c ed       	ldi	r18, 0xDC	; 220
    25c0:	38 eb       	ldi	r19, 0xB8	; 184
    25c2:	48 e0       	ldi	r20, 0x08	; 8
    25c4:	5e e3       	ldi	r21, 0x3E	; 62
    25c6:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    25ca:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    25ce:	69 8f       	std	Y+25, r22	; 0x19
    25d0:	7a 8f       	std	Y+26, r23	; 0x1a
    25d2:	8b 8f       	std	Y+27, r24	; 0x1b
    25d4:	9c 8f       	std	Y+28, r25	; 0x1c
    25d6:	69 85       	ldd	r22, Y+9	; 0x09
    25d8:	7a 85       	ldd	r23, Y+10	; 0x0a
    25da:	8b 85       	ldd	r24, Y+11	; 0x0b
    25dc:	9c 85       	ldd	r25, Y+12	; 0x0c
    25de:	a8 01       	movw	r20, r16
    25e0:	97 01       	movw	r18, r14
    25e2:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    25e6:	2c ed       	ldi	r18, 0xDC	; 220
    25e8:	38 eb       	ldi	r19, 0xB8	; 184
    25ea:	48 e0       	ldi	r20, 0x08	; 8
    25ec:	5e e3       	ldi	r21, 0x3E	; 62
    25ee:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    25f2:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    25f6:	6d 8f       	std	Y+29, r22	; 0x1d
    25f8:	7e 8f       	std	Y+30, r23	; 0x1e
    25fa:	8f 8f       	std	Y+31, r24	; 0x1f
    25fc:	98 a3       	std	Y+32, r25	; 0x20
    25fe:	6d 85       	ldd	r22, Y+13	; 0x0d
    2600:	7e 85       	ldd	r23, Y+14	; 0x0e
    2602:	8f 85       	ldd	r24, Y+15	; 0x0f
    2604:	98 89       	ldd	r25, Y+16	; 0x10
    2606:	a8 01       	movw	r20, r16
    2608:	97 01       	movw	r18, r14
    260a:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    260e:	2c ed       	ldi	r18, 0xDC	; 220
    2610:	38 eb       	ldi	r19, 0xB8	; 184
    2612:	48 e0       	ldi	r20, 0x08	; 8
    2614:	5e e3       	ldi	r21, 0x3E	; 62
    2616:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    261a:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    261e:	2b 01       	movw	r4, r22
    2620:	3c 01       	movw	r6, r24
    2622:	6d 81       	ldd	r22, Y+5	; 0x05
    2624:	7e 81       	ldd	r23, Y+6	; 0x06
    2626:	8f 81       	ldd	r24, Y+7	; 0x07
    2628:	98 85       	ldd	r25, Y+8	; 0x08
    262a:	a6 01       	movw	r20, r12
    262c:	95 01       	movw	r18, r10
    262e:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2632:	2c ed       	ldi	r18, 0xDC	; 220
    2634:	38 eb       	ldi	r19, 0xB8	; 184
    2636:	48 e0       	ldi	r20, 0x08	; 8
    2638:	5e e3       	ldi	r21, 0x3E	; 62
    263a:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    263e:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2642:	d4 01       	movw	r26, r8
    2644:	6d 93       	st	X+, r22
    2646:	7c 93       	st	X, r23
    2648:	69 85       	ldd	r22, Y+9	; 0x09
    264a:	7a 85       	ldd	r23, Y+10	; 0x0a
    264c:	8b 85       	ldd	r24, Y+11	; 0x0b
    264e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2650:	a6 01       	movw	r20, r12
    2652:	95 01       	movw	r18, r10
    2654:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2658:	2c ed       	ldi	r18, 0xDC	; 220
    265a:	38 eb       	ldi	r19, 0xB8	; 184
    265c:	48 e0       	ldi	r20, 0x08	; 8
    265e:	5e e3       	ldi	r21, 0x3E	; 62
    2660:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2664:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2668:	f4 01       	movw	r30, r8
    266a:	73 83       	std	Z+3, r23	; 0x03
    266c:	62 83       	std	Z+2, r22	; 0x02
    266e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2670:	7e 85       	ldd	r23, Y+14	; 0x0e
    2672:	8f 85       	ldd	r24, Y+15	; 0x0f
    2674:	98 89       	ldd	r25, Y+16	; 0x10
    2676:	a6 01       	movw	r20, r12
    2678:	95 01       	movw	r18, r10
    267a:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    267e:	2c ed       	ldi	r18, 0xDC	; 220
    2680:	38 eb       	ldi	r19, 0xB8	; 184
    2682:	48 e0       	ldi	r20, 0x08	; 8
    2684:	5e e3       	ldi	r21, 0x3E	; 62
    2686:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    268a:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    268e:	d4 01       	movw	r26, r8
    2690:	15 96       	adiw	r26, 0x05	; 5
    2692:	7c 93       	st	X, r23
    2694:	6e 93       	st	-X, r22
    2696:	14 97       	sbiw	r26, 0x04	; 4
    2698:	16 96       	adiw	r26, 0x06	; 6
    269a:	2c 92       	st	X, r2
    269c:	16 97       	sbiw	r26, 0x06	; 6
    269e:	18 96       	adiw	r26, 0x08	; 8
    26a0:	1c 92       	st	X, r1
    26a2:	1e 92       	st	-X, r1
    26a4:	17 97       	sbiw	r26, 0x07	; 7
    26a6:	81 e0       	ldi	r24, 0x01	; 1
    26a8:	62 e0       	ldi	r22, 0x02	; 2
    26aa:	43 2d       	mov	r20, r3
    26ac:	29 8d       	ldd	r18, Y+25	; 0x19
    26ae:	3a 8d       	ldd	r19, Y+26	; 0x1a
    26b0:	0d 8d       	ldd	r16, Y+29	; 0x1d
    26b2:	1e 8d       	ldd	r17, Y+30	; 0x1e
    26b4:	72 01       	movw	r14, r4
    26b6:	c2 2c       	mov	r12, r2
    26b8:	aa 24       	eor	r10, r10
    26ba:	bb 24       	eor	r11, r11
    26bc:	83 2c       	mov	r8, r3
    26be:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <STEPPER_move>
    26c2:	81 e0       	ldi	r24, 0x01	; 1
    26c4:	ed b7       	in	r30, 0x3d	; 61
    26c6:	fe b7       	in	r31, 0x3e	; 62
    26c8:	39 96       	adiw	r30, 0x09	; 9
    26ca:	0f b6       	in	r0, 0x3f	; 63
    26cc:	f8 94       	cli
    26ce:	fe bf       	out	0x3e, r31	; 62
    26d0:	0f be       	out	0x3f, r0	; 63
    26d2:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    26d4:	a0 96       	adiw	r28, 0x20	; 32
    26d6:	0f b6       	in	r0, 0x3f	; 63
    26d8:	f8 94       	cli
    26da:	de bf       	out	0x3e, r29	; 62
    26dc:	0f be       	out	0x3f, r0	; 63
    26de:	cd bf       	out	0x3d, r28	; 61
    26e0:	cf 91       	pop	r28
    26e2:	df 91       	pop	r29
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	df 90       	pop	r13
    26ee:	cf 90       	pop	r12
    26f0:	bf 90       	pop	r11
    26f2:	af 90       	pop	r10
    26f4:	9f 90       	pop	r9
    26f6:	8f 90       	pop	r8
    26f8:	7f 90       	pop	r7
    26fa:	6f 90       	pop	r6
    26fc:	5f 90       	pop	r5
    26fe:	4f 90       	pop	r4
    2700:	3f 90       	pop	r3
    2702:	2f 90       	pop	r2
    2704:	08 95       	ret

00002706 <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    2706:	2f 92       	push	r2
    2708:	3f 92       	push	r3
    270a:	4f 92       	push	r4
    270c:	5f 92       	push	r5
    270e:	6f 92       	push	r6
    2710:	7f 92       	push	r7
    2712:	8f 92       	push	r8
    2714:	9f 92       	push	r9
    2716:	af 92       	push	r10
    2718:	bf 92       	push	r11
    271a:	cf 92       	push	r12
    271c:	df 92       	push	r13
    271e:	ef 92       	push	r14
    2720:	ff 92       	push	r15
    2722:	0f 93       	push	r16
    2724:	1f 93       	push	r17
    2726:	df 93       	push	r29
    2728:	cf 93       	push	r28
    272a:	cd b7       	in	r28, 0x3d	; 61
    272c:	de b7       	in	r29, 0x3e	; 62
    272e:	a0 97       	sbiw	r28, 0x20	; 32
    2730:	0f b6       	in	r0, 0x3f	; 63
    2732:	f8 94       	cli
    2734:	de bf       	out	0x3e, r29	; 62
    2736:	0f be       	out	0x3f, r0	; 63
    2738:	cd bf       	out	0x3d, r28	; 61
    273a:	2b 01       	movw	r4, r22
    273c:	3c 01       	movw	r6, r24
    273e:	2d 83       	std	Y+5, r18	; 0x05
    2740:	3e 83       	std	Y+6, r19	; 0x06
    2742:	4f 83       	std	Y+7, r20	; 0x07
    2744:	58 87       	std	Y+8, r21	; 0x08
    2746:	e9 86       	std	Y+9, r14	; 0x09
    2748:	fa 86       	std	Y+10, r15	; 0x0a
    274a:	0b 87       	std	Y+11, r16	; 0x0b
    274c:	1c 87       	std	Y+12, r17	; 0x0c
    274e:	ad 86       	std	Y+13, r10	; 0x0d
    2750:	be 86       	std	Y+14, r11	; 0x0e
    2752:	cf 86       	std	Y+15, r12	; 0x0f
    2754:	d8 8a       	std	Y+16, r13	; 0x10
    2756:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    2758:	33 24       	eor	r3, r3
    275a:	ca 01       	movw	r24, r20
    275c:	b9 01       	movw	r22, r18
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	30 e0       	ldi	r19, 0x00	; 0
    2762:	40 e0       	ldi	r20, 0x00	; 0
    2764:	50 e0       	ldi	r21, 0x00	; 0
    2766:	0e 94 86 2b 	call	0x570c	; 0x570c <__gesf2>
    276a:	18 16       	cp	r1, r24
    276c:	14 f4       	brge	.+4      	; 0x2772 <move_arc_stwt+0x6c>
    276e:	33 24       	eor	r3, r3
    2770:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    2772:	6d 81       	ldd	r22, Y+5	; 0x05
    2774:	7e 81       	ldd	r23, Y+6	; 0x06
    2776:	8f 81       	ldd	r24, Y+7	; 0x07
    2778:	98 85       	ldd	r25, Y+8	; 0x08
    277a:	2c ed       	ldi	r18, 0xDC	; 220
    277c:	38 eb       	ldi	r19, 0xB8	; 184
    277e:	48 e0       	ldi	r20, 0x08	; 8
    2780:	5e e3       	ldi	r21, 0x3E	; 62
    2782:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2786:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__fixsfsi>
    278a:	9b 01       	movw	r18, r22
    278c:	77 ff       	sbrs	r23, 7
    278e:	03 c0       	rjmp	.+6      	; 0x2796 <move_arc_stwt+0x90>
    2790:	30 95       	com	r19
    2792:	21 95       	neg	r18
    2794:	3f 4f       	sbci	r19, 0xFF	; 255
    2796:	b9 01       	movw	r22, r18
    2798:	88 27       	eor	r24, r24
    279a:	77 fd       	sbrc	r23, 7
    279c:	80 95       	com	r24
    279e:	98 2f       	mov	r25, r24
    27a0:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <__floatsisf>
    27a4:	69 83       	std	Y+1, r22	; 0x01
    27a6:	7a 83       	std	Y+2, r23	; 0x02
    27a8:	8b 83       	std	Y+3, r24	; 0x03
    27aa:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    27ac:	69 85       	ldd	r22, Y+9	; 0x09
    27ae:	7a 85       	ldd	r23, Y+10	; 0x0a
    27b0:	8b 85       	ldd	r24, Y+11	; 0x0b
    27b2:	9c 85       	ldd	r25, Y+12	; 0x0c
    27b4:	2c ed       	ldi	r18, 0xDC	; 220
    27b6:	38 eb       	ldi	r19, 0xB8	; 184
    27b8:	48 e0       	ldi	r20, 0x08	; 8
    27ba:	5e e3       	ldi	r21, 0x3E	; 62
    27bc:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    27c0:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__fixsfsi>
    27c4:	9b 01       	movw	r18, r22
    27c6:	77 ff       	sbrs	r23, 7
    27c8:	03 c0       	rjmp	.+6      	; 0x27d0 <move_arc_stwt+0xca>
    27ca:	30 95       	com	r19
    27cc:	21 95       	neg	r18
    27ce:	3f 4f       	sbci	r19, 0xFF	; 255
    27d0:	b9 01       	movw	r22, r18
    27d2:	88 27       	eor	r24, r24
    27d4:	77 fd       	sbrc	r23, 7
    27d6:	80 95       	com	r24
    27d8:	98 2f       	mov	r25, r24
    27da:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <__floatsisf>
    27de:	4b 01       	movw	r8, r22
    27e0:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    27e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    27e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    27e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    27e8:	98 89       	ldd	r25, Y+16	; 0x10
    27ea:	2c ed       	ldi	r18, 0xDC	; 220
    27ec:	38 eb       	ldi	r19, 0xB8	; 184
    27ee:	48 e0       	ldi	r20, 0x08	; 8
    27f0:	5e e3       	ldi	r21, 0x3E	; 62
    27f2:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    27f6:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__fixsfsi>
    27fa:	9b 01       	movw	r18, r22
    27fc:	77 ff       	sbrs	r23, 7
    27fe:	03 c0       	rjmp	.+6      	; 0x2806 <move_arc_stwt+0x100>
    2800:	30 95       	com	r19
    2802:	21 95       	neg	r18
    2804:	3f 4f       	sbci	r19, 0xFF	; 255
    2806:	b9 01       	movw	r22, r18
    2808:	88 27       	eor	r24, r24
    280a:	77 fd       	sbrc	r23, 7
    280c:	80 95       	com	r24
    280e:	98 2f       	mov	r25, r24
    2810:	0e 94 d6 2a 	call	0x55ac	; 0x55ac <__floatsisf>
    2814:	6b 01       	movw	r12, r22
    2816:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    2818:	c3 01       	movw	r24, r6
    281a:	b2 01       	movw	r22, r4
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	40 e0       	ldi	r20, 0x00	; 0
    2822:	5f e4       	ldi	r21, 0x4F	; 79
    2824:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
    2828:	88 23       	and	r24, r24
    282a:	a1 f5       	brne	.+104    	; 0x2894 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    282c:	69 81       	ldd	r22, Y+1	; 0x01
    282e:	7a 81       	ldd	r23, Y+2	; 0x02
    2830:	8b 81       	ldd	r24, Y+3	; 0x03
    2832:	9c 81       	ldd	r25, Y+4	; 0x04
    2834:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2838:	2b 01       	movw	r4, r22
    283a:	3c 01       	movw	r6, r24
    283c:	c5 01       	movw	r24, r10
    283e:	b4 01       	movw	r22, r8
    2840:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2844:	4b 01       	movw	r8, r22
    2846:	5c 01       	movw	r10, r24
    2848:	c7 01       	movw	r24, r14
    284a:	b6 01       	movw	r22, r12
    284c:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2850:	6b 01       	movw	r12, r22
    2852:	7c 01       	movw	r14, r24
    2854:	2d b7       	in	r18, 0x3d	; 61
    2856:	3e b7       	in	r19, 0x3e	; 62
    2858:	29 50       	subi	r18, 0x09	; 9
    285a:	30 40       	sbci	r19, 0x00	; 0
    285c:	0f b6       	in	r0, 0x3f	; 63
    285e:	f8 94       	cli
    2860:	3e bf       	out	0x3e, r19	; 62
    2862:	0f be       	out	0x3f, r0	; 63
    2864:	2d bf       	out	0x3d, r18	; 61
    2866:	ed b7       	in	r30, 0x3d	; 61
    2868:	fe b7       	in	r31, 0x3e	; 62
    286a:	31 96       	adiw	r30, 0x01	; 1
    286c:	ad b7       	in	r26, 0x3d	; 61
    286e:	be b7       	in	r27, 0x3e	; 62
    2870:	12 96       	adiw	r26, 0x02	; 2
    2872:	5c 92       	st	X, r5
    2874:	4e 92       	st	-X, r4
    2876:	11 97       	sbiw	r26, 0x01	; 1
    2878:	93 82       	std	Z+3, r9	; 0x03
    287a:	82 82       	std	Z+2, r8	; 0x02
    287c:	75 83       	std	Z+5, r23	; 0x05
    287e:	64 83       	std	Z+4, r22	; 0x04
    2880:	26 82       	std	Z+6, r2	; 0x06
    2882:	10 86       	std	Z+8, r1	; 0x08
    2884:	17 82       	std	Z+7, r1	; 0x07
    2886:	80 e0       	ldi	r24, 0x00	; 0
    2888:	62 e0       	ldi	r22, 0x02	; 2
    288a:	43 2d       	mov	r20, r3
    288c:	92 01       	movw	r18, r4
    288e:	84 01       	movw	r16, r8
    2890:	76 01       	movw	r14, r12
    2892:	c1 c1       	rjmp	.+898    	; 0x2c16 <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    2894:	c3 01       	movw	r24, r6
    2896:	b2 01       	movw	r22, r4
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e0       	ldi	r20, 0x00	; 0
    289e:	50 e0       	ldi	r21, 0x00	; 0
    28a0:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
    28a4:	88 23       	and	r24, r24
    28a6:	e9 f5       	brne	.+122    	; 0x2922 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    28a8:	69 81       	ldd	r22, Y+1	; 0x01
    28aa:	7a 81       	ldd	r23, Y+2	; 0x02
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    28b4:	3b 01       	movw	r6, r22
    28b6:	c5 01       	movw	r24, r10
    28b8:	b4 01       	movw	r22, r8
    28ba:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    28be:	8b 01       	movw	r16, r22
    28c0:	c7 01       	movw	r24, r14
    28c2:	b6 01       	movw	r22, r12
    28c4:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    28c8:	7b 01       	movw	r14, r22
    28ca:	2d b7       	in	r18, 0x3d	; 61
    28cc:	3e b7       	in	r19, 0x3e	; 62
    28ce:	29 50       	subi	r18, 0x09	; 9
    28d0:	30 40       	sbci	r19, 0x00	; 0
    28d2:	0f b6       	in	r0, 0x3f	; 63
    28d4:	f8 94       	cli
    28d6:	3e bf       	out	0x3e, r19	; 62
    28d8:	0f be       	out	0x3f, r0	; 63
    28da:	2d bf       	out	0x3d, r18	; 61
    28dc:	ed b7       	in	r30, 0x3d	; 61
    28de:	fe b7       	in	r31, 0x3e	; 62
    28e0:	31 96       	adiw	r30, 0x01	; 1
    28e2:	40 e0       	ldi	r20, 0x00	; 0
    28e4:	33 20       	and	r3, r3
    28e6:	09 f4       	brne	.+2      	; 0x28ea <move_arc_stwt+0x1e4>
    28e8:	41 e0       	ldi	r20, 0x01	; 1
    28ea:	71 82       	std	Z+1, r7	; 0x01
    28ec:	60 82       	st	Z, r6
    28ee:	13 83       	std	Z+3, r17	; 0x03
    28f0:	02 83       	std	Z+2, r16	; 0x02
    28f2:	f5 82       	std	Z+5, r15	; 0x05
    28f4:	e4 82       	std	Z+4, r14	; 0x04
    28f6:	26 82       	std	Z+6, r2	; 0x06
    28f8:	10 86       	std	Z+8, r1	; 0x08
    28fa:	17 82       	std	Z+7, r1	; 0x07
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	62 e0       	ldi	r22, 0x02	; 2
    2900:	93 01       	movw	r18, r6
    2902:	c2 2c       	mov	r12, r2
    2904:	aa 24       	eor	r10, r10
    2906:	bb 24       	eor	r11, r11
    2908:	83 2c       	mov	r8, r3
    290a:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <STEPPER_move>
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	ad b7       	in	r26, 0x3d	; 61
    2912:	be b7       	in	r27, 0x3e	; 62
    2914:	19 96       	adiw	r26, 0x09	; 9
    2916:	0f b6       	in	r0, 0x3f	; 63
    2918:	f8 94       	cli
    291a:	be bf       	out	0x3e, r27	; 62
    291c:	0f be       	out	0x3f, r0	; 63
    291e:	ad bf       	out	0x3d, r26	; 61
    2920:	89 c1       	rjmp	.+786    	; 0x2c34 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    2922:	c3 01       	movw	r24, r6
    2924:	b2 01       	movw	r22, r4
    2926:	20 e0       	ldi	r18, 0x00	; 0
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	40 e0       	ldi	r20, 0x00	; 0
    292c:	50 e0       	ldi	r21, 0x00	; 0
    292e:	0e 94 86 2b 	call	0x570c	; 0x570c <__gesf2>
    2932:	18 16       	cp	r1, r24
    2934:	0c f0       	brlt	.+2      	; 0x2938 <move_arc_stwt+0x232>
    2936:	b1 c0       	rjmp	.+354    	; 0x2a9a <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2938:	66 e6       	ldi	r22, 0x66	; 102
    293a:	76 e6       	ldi	r23, 0x66	; 102
    293c:	8a ea       	ldi	r24, 0xAA	; 170
    293e:	91 ec       	ldi	r25, 0xC1	; 193
    2940:	a3 01       	movw	r20, r6
    2942:	92 01       	movw	r18, r4
    2944:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2948:	20 e0       	ldi	r18, 0x00	; 0
    294a:	30 e0       	ldi	r19, 0x00	; 0
    294c:	40 e8       	ldi	r20, 0x80	; 128
    294e:	5f e3       	ldi	r21, 0x3F	; 63
    2950:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    2954:	7b 01       	movw	r14, r22
    2956:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2958:	66 e6       	ldi	r22, 0x66	; 102
    295a:	76 e6       	ldi	r23, 0x66	; 102
    295c:	8a ea       	ldi	r24, 0xAA	; 170
    295e:	91 e4       	ldi	r25, 0x41	; 65
    2960:	a3 01       	movw	r20, r6
    2962:	92 01       	movw	r18, r4
    2964:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e8       	ldi	r20, 0x80	; 128
    296e:	5f e3       	ldi	r21, 0x3F	; 63
    2970:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    2974:	5b 01       	movw	r10, r22
    2976:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2978:	ed b7       	in	r30, 0x3d	; 61
    297a:	fe b7       	in	r31, 0x3e	; 62
    297c:	39 97       	sbiw	r30, 0x09	; 9
    297e:	0f b6       	in	r0, 0x3f	; 63
    2980:	f8 94       	cli
    2982:	fe bf       	out	0x3e, r31	; 62
    2984:	0f be       	out	0x3f, r0	; 63
    2986:	ed bf       	out	0x3d, r30	; 61
    2988:	8d b6       	in	r8, 0x3d	; 61
    298a:	9e b6       	in	r9, 0x3e	; 62
    298c:	08 94       	sec
    298e:	81 1c       	adc	r8, r1
    2990:	91 1c       	adc	r9, r1
    2992:	6d 81       	ldd	r22, Y+5	; 0x05
    2994:	7e 81       	ldd	r23, Y+6	; 0x06
    2996:	8f 81       	ldd	r24, Y+7	; 0x07
    2998:	98 85       	ldd	r25, Y+8	; 0x08
    299a:	a8 01       	movw	r20, r16
    299c:	97 01       	movw	r18, r14
    299e:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    29a2:	2c ed       	ldi	r18, 0xDC	; 220
    29a4:	38 eb       	ldi	r19, 0xB8	; 184
    29a6:	48 e0       	ldi	r20, 0x08	; 8
    29a8:	5e e3       	ldi	r21, 0x3E	; 62
    29aa:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    29ae:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    29b2:	69 8b       	std	Y+17, r22	; 0x11
    29b4:	7a 8b       	std	Y+18, r23	; 0x12
    29b6:	8b 8b       	std	Y+19, r24	; 0x13
    29b8:	9c 8b       	std	Y+20, r25	; 0x14
    29ba:	69 85       	ldd	r22, Y+9	; 0x09
    29bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    29be:	8b 85       	ldd	r24, Y+11	; 0x0b
    29c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    29c2:	a8 01       	movw	r20, r16
    29c4:	97 01       	movw	r18, r14
    29c6:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    29ca:	2c ed       	ldi	r18, 0xDC	; 220
    29cc:	38 eb       	ldi	r19, 0xB8	; 184
    29ce:	48 e0       	ldi	r20, 0x08	; 8
    29d0:	5e e3       	ldi	r21, 0x3E	; 62
    29d2:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    29d6:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    29da:	6d 8b       	std	Y+21, r22	; 0x15
    29dc:	7e 8b       	std	Y+22, r23	; 0x16
    29de:	8f 8b       	std	Y+23, r24	; 0x17
    29e0:	98 8f       	std	Y+24, r25	; 0x18
    29e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    29e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    29e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    29e8:	98 89       	ldd	r25, Y+16	; 0x10
    29ea:	a8 01       	movw	r20, r16
    29ec:	97 01       	movw	r18, r14
    29ee:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    29f2:	2c ed       	ldi	r18, 0xDC	; 220
    29f4:	38 eb       	ldi	r19, 0xB8	; 184
    29f6:	48 e0       	ldi	r20, 0x08	; 8
    29f8:	5e e3       	ldi	r21, 0x3E	; 62
    29fa:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    29fe:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2a02:	2b 01       	movw	r4, r22
    2a04:	3c 01       	movw	r6, r24
    2a06:	6d 81       	ldd	r22, Y+5	; 0x05
    2a08:	7e 81       	ldd	r23, Y+6	; 0x06
    2a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a0c:	98 85       	ldd	r25, Y+8	; 0x08
    2a0e:	a6 01       	movw	r20, r12
    2a10:	95 01       	movw	r18, r10
    2a12:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2a16:	2c ed       	ldi	r18, 0xDC	; 220
    2a18:	38 eb       	ldi	r19, 0xB8	; 184
    2a1a:	48 e0       	ldi	r20, 0x08	; 8
    2a1c:	5e e3       	ldi	r21, 0x3E	; 62
    2a1e:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2a22:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2a26:	d4 01       	movw	r26, r8
    2a28:	6d 93       	st	X+, r22
    2a2a:	7c 93       	st	X, r23
    2a2c:	69 85       	ldd	r22, Y+9	; 0x09
    2a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a34:	a6 01       	movw	r20, r12
    2a36:	95 01       	movw	r18, r10
    2a38:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2a3c:	2c ed       	ldi	r18, 0xDC	; 220
    2a3e:	38 eb       	ldi	r19, 0xB8	; 184
    2a40:	48 e0       	ldi	r20, 0x08	; 8
    2a42:	5e e3       	ldi	r21, 0x3E	; 62
    2a44:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2a48:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2a4c:	f4 01       	movw	r30, r8
    2a4e:	73 83       	std	Z+3, r23	; 0x03
    2a50:	62 83       	std	Z+2, r22	; 0x02
    2a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a58:	98 89       	ldd	r25, Y+16	; 0x10
    2a5a:	a6 01       	movw	r20, r12
    2a5c:	95 01       	movw	r18, r10
    2a5e:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2a62:	2c ed       	ldi	r18, 0xDC	; 220
    2a64:	38 eb       	ldi	r19, 0xB8	; 184
    2a66:	48 e0       	ldi	r20, 0x08	; 8
    2a68:	5e e3       	ldi	r21, 0x3E	; 62
    2a6a:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2a6e:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2a72:	d4 01       	movw	r26, r8
    2a74:	15 96       	adiw	r26, 0x05	; 5
    2a76:	7c 93       	st	X, r23
    2a78:	6e 93       	st	-X, r22
    2a7a:	14 97       	sbiw	r26, 0x04	; 4
    2a7c:	16 96       	adiw	r26, 0x06	; 6
    2a7e:	2c 92       	st	X, r2
    2a80:	16 97       	sbiw	r26, 0x06	; 6
    2a82:	18 96       	adiw	r26, 0x08	; 8
    2a84:	1c 92       	st	X, r1
    2a86:	1e 92       	st	-X, r1
    2a88:	17 97       	sbiw	r26, 0x07	; 7
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	62 e0       	ldi	r22, 0x02	; 2
    2a8e:	43 2d       	mov	r20, r3
    2a90:	29 89       	ldd	r18, Y+17	; 0x11
    2a92:	3a 89       	ldd	r19, Y+18	; 0x12
    2a94:	0d 89       	ldd	r16, Y+21	; 0x15
    2a96:	1e 89       	ldd	r17, Y+22	; 0x16
    2a98:	bd c0       	rjmp	.+378    	; 0x2c14 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    2a9a:	c3 01       	movw	r24, r6
    2a9c:	b2 01       	movw	r22, r4
    2a9e:	20 e0       	ldi	r18, 0x00	; 0
    2aa0:	30 e0       	ldi	r19, 0x00	; 0
    2aa2:	40 e0       	ldi	r20, 0x00	; 0
    2aa4:	50 e0       	ldi	r21, 0x00	; 0
    2aa6:	0e 94 37 2a 	call	0x546e	; 0x546e <__cmpsf2>
    2aaa:	87 fd       	sbrc	r24, 7
    2aac:	02 c0       	rjmp	.+4      	; 0x2ab2 <move_arc_stwt+0x3ac>
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	c1 c0       	rjmp	.+386    	; 0x2c34 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2ab2:	66 e6       	ldi	r22, 0x66	; 102
    2ab4:	76 e6       	ldi	r23, 0x66	; 102
    2ab6:	8a ea       	ldi	r24, 0xAA	; 170
    2ab8:	91 e4       	ldi	r25, 0x41	; 65
    2aba:	a3 01       	movw	r20, r6
    2abc:	92 01       	movw	r18, r4
    2abe:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2ac2:	20 e0       	ldi	r18, 0x00	; 0
    2ac4:	30 e0       	ldi	r19, 0x00	; 0
    2ac6:	40 e8       	ldi	r20, 0x80	; 128
    2ac8:	5f e3       	ldi	r21, 0x3F	; 63
    2aca:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    2ace:	7b 01       	movw	r14, r22
    2ad0:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2ad2:	66 e6       	ldi	r22, 0x66	; 102
    2ad4:	76 e6       	ldi	r23, 0x66	; 102
    2ad6:	8a ea       	ldi	r24, 0xAA	; 170
    2ad8:	91 ec       	ldi	r25, 0xC1	; 193
    2ada:	a3 01       	movw	r20, r6
    2adc:	92 01       	movw	r18, r4
    2ade:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2ae2:	20 e0       	ldi	r18, 0x00	; 0
    2ae4:	30 e0       	ldi	r19, 0x00	; 0
    2ae6:	40 e8       	ldi	r20, 0x80	; 128
    2ae8:	5f e3       	ldi	r21, 0x3F	; 63
    2aea:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <__addsf3>
    2aee:	5b 01       	movw	r10, r22
    2af0:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2af2:	2d b7       	in	r18, 0x3d	; 61
    2af4:	3e b7       	in	r19, 0x3e	; 62
    2af6:	29 50       	subi	r18, 0x09	; 9
    2af8:	30 40       	sbci	r19, 0x00	; 0
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	3e bf       	out	0x3e, r19	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	2d bf       	out	0x3d, r18	; 61
    2b04:	8d b6       	in	r8, 0x3d	; 61
    2b06:	9e b6       	in	r9, 0x3e	; 62
    2b08:	08 94       	sec
    2b0a:	81 1c       	adc	r8, r1
    2b0c:	91 1c       	adc	r9, r1
    2b0e:	6d 81       	ldd	r22, Y+5	; 0x05
    2b10:	7e 81       	ldd	r23, Y+6	; 0x06
    2b12:	8f 81       	ldd	r24, Y+7	; 0x07
    2b14:	98 85       	ldd	r25, Y+8	; 0x08
    2b16:	a8 01       	movw	r20, r16
    2b18:	97 01       	movw	r18, r14
    2b1a:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2b1e:	2c ed       	ldi	r18, 0xDC	; 220
    2b20:	38 eb       	ldi	r19, 0xB8	; 184
    2b22:	48 e0       	ldi	r20, 0x08	; 8
    2b24:	5e e3       	ldi	r21, 0x3E	; 62
    2b26:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2b2a:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2b2e:	69 8f       	std	Y+25, r22	; 0x19
    2b30:	7a 8f       	std	Y+26, r23	; 0x1a
    2b32:	8b 8f       	std	Y+27, r24	; 0x1b
    2b34:	9c 8f       	std	Y+28, r25	; 0x1c
    2b36:	69 85       	ldd	r22, Y+9	; 0x09
    2b38:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b3a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b3c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b3e:	a8 01       	movw	r20, r16
    2b40:	97 01       	movw	r18, r14
    2b42:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2b46:	2c ed       	ldi	r18, 0xDC	; 220
    2b48:	38 eb       	ldi	r19, 0xB8	; 184
    2b4a:	48 e0       	ldi	r20, 0x08	; 8
    2b4c:	5e e3       	ldi	r21, 0x3E	; 62
    2b4e:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2b52:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2b56:	6d 8f       	std	Y+29, r22	; 0x1d
    2b58:	7e 8f       	std	Y+30, r23	; 0x1e
    2b5a:	8f 8f       	std	Y+31, r24	; 0x1f
    2b5c:	98 a3       	std	Y+32, r25	; 0x20
    2b5e:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b60:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b62:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b64:	98 89       	ldd	r25, Y+16	; 0x10
    2b66:	a8 01       	movw	r20, r16
    2b68:	97 01       	movw	r18, r14
    2b6a:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2b6e:	2c ed       	ldi	r18, 0xDC	; 220
    2b70:	38 eb       	ldi	r19, 0xB8	; 184
    2b72:	48 e0       	ldi	r20, 0x08	; 8
    2b74:	5e e3       	ldi	r21, 0x3E	; 62
    2b76:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2b7a:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2b7e:	2b 01       	movw	r4, r22
    2b80:	3c 01       	movw	r6, r24
    2b82:	6d 81       	ldd	r22, Y+5	; 0x05
    2b84:	7e 81       	ldd	r23, Y+6	; 0x06
    2b86:	8f 81       	ldd	r24, Y+7	; 0x07
    2b88:	98 85       	ldd	r25, Y+8	; 0x08
    2b8a:	a6 01       	movw	r20, r12
    2b8c:	95 01       	movw	r18, r10
    2b8e:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2b92:	2c ed       	ldi	r18, 0xDC	; 220
    2b94:	38 eb       	ldi	r19, 0xB8	; 184
    2b96:	48 e0       	ldi	r20, 0x08	; 8
    2b98:	5e e3       	ldi	r21, 0x3E	; 62
    2b9a:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2b9e:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2ba2:	d4 01       	movw	r26, r8
    2ba4:	6d 93       	st	X+, r22
    2ba6:	7c 93       	st	X, r23
    2ba8:	69 85       	ldd	r22, Y+9	; 0x09
    2baa:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bac:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bae:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bb0:	a6 01       	movw	r20, r12
    2bb2:	95 01       	movw	r18, r10
    2bb4:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2bb8:	2c ed       	ldi	r18, 0xDC	; 220
    2bba:	38 eb       	ldi	r19, 0xB8	; 184
    2bbc:	48 e0       	ldi	r20, 0x08	; 8
    2bbe:	5e e3       	ldi	r21, 0x3E	; 62
    2bc0:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2bc4:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2bc8:	f4 01       	movw	r30, r8
    2bca:	73 83       	std	Z+3, r23	; 0x03
    2bcc:	62 83       	std	Z+2, r22	; 0x02
    2bce:	6d 85       	ldd	r22, Y+13	; 0x0d
    2bd0:	7e 85       	ldd	r23, Y+14	; 0x0e
    2bd2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bd4:	98 89       	ldd	r25, Y+16	; 0x10
    2bd6:	a6 01       	movw	r20, r12
    2bd8:	95 01       	movw	r18, r10
    2bda:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    2bde:	2c ed       	ldi	r18, 0xDC	; 220
    2be0:	38 eb       	ldi	r19, 0xB8	; 184
    2be2:	48 e0       	ldi	r20, 0x08	; 8
    2be4:	5e e3       	ldi	r21, 0x3E	; 62
    2be6:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    2bea:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__fixunssfsi>
    2bee:	d4 01       	movw	r26, r8
    2bf0:	15 96       	adiw	r26, 0x05	; 5
    2bf2:	7c 93       	st	X, r23
    2bf4:	6e 93       	st	-X, r22
    2bf6:	14 97       	sbiw	r26, 0x04	; 4
    2bf8:	16 96       	adiw	r26, 0x06	; 6
    2bfa:	2c 92       	st	X, r2
    2bfc:	16 97       	sbiw	r26, 0x06	; 6
    2bfe:	18 96       	adiw	r26, 0x08	; 8
    2c00:	1c 92       	st	X, r1
    2c02:	1e 92       	st	-X, r1
    2c04:	17 97       	sbiw	r26, 0x07	; 7
    2c06:	80 e0       	ldi	r24, 0x00	; 0
    2c08:	62 e0       	ldi	r22, 0x02	; 2
    2c0a:	43 2d       	mov	r20, r3
    2c0c:	29 8d       	ldd	r18, Y+25	; 0x19
    2c0e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2c10:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2c12:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2c14:	72 01       	movw	r14, r4
    2c16:	c2 2c       	mov	r12, r2
    2c18:	aa 24       	eor	r10, r10
    2c1a:	bb 24       	eor	r11, r11
    2c1c:	83 2c       	mov	r8, r3
    2c1e:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <STEPPER_move>
    2c22:	81 e0       	ldi	r24, 0x01	; 1
    2c24:	ed b7       	in	r30, 0x3d	; 61
    2c26:	fe b7       	in	r31, 0x3e	; 62
    2c28:	39 96       	adiw	r30, 0x09	; 9
    2c2a:	0f b6       	in	r0, 0x3f	; 63
    2c2c:	f8 94       	cli
    2c2e:	fe bf       	out	0x3e, r31	; 62
    2c30:	0f be       	out	0x3f, r0	; 63
    2c32:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    2c34:	a0 96       	adiw	r28, 0x20	; 32
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	de bf       	out	0x3e, r29	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	cd bf       	out	0x3d, r28	; 61
    2c40:	cf 91       	pop	r28
    2c42:	df 91       	pop	r29
    2c44:	1f 91       	pop	r17
    2c46:	0f 91       	pop	r16
    2c48:	ff 90       	pop	r15
    2c4a:	ef 90       	pop	r14
    2c4c:	df 90       	pop	r13
    2c4e:	cf 90       	pop	r12
    2c50:	bf 90       	pop	r11
    2c52:	af 90       	pop	r10
    2c54:	9f 90       	pop	r9
    2c56:	8f 90       	pop	r8
    2c58:	7f 90       	pop	r7
    2c5a:	6f 90       	pop	r6
    2c5c:	5f 90       	pop	r5
    2c5e:	4f 90       	pop	r4
    2c60:	3f 90       	pop	r3
    2c62:	2f 90       	pop	r2
    2c64:	08 95       	ret

00002c66 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    2c66:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    2c6a:	28 2f       	mov	r18, r24
    2c6c:	21 70       	andi	r18, 0x01	; 1
    2c6e:	20 93 07 06 	sts	0x0607, r18
	leftContact =  (0b00000010 & sensors)>>1;
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	82 70       	andi	r24, 0x02	; 2
    2c76:	90 70       	andi	r25, 0x00	; 0
    2c78:	95 95       	asr	r25
    2c7a:	87 95       	ror	r24
    2c7c:	80 93 08 06 	sts	0x0608, r24
}
    2c80:	08 95       	ret

00002c82 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    2c82:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    2c86:	60 93 83 05 	sts	0x0583, r22
    2c8a:	70 93 84 05 	sts	0x0584, r23
    2c8e:	80 93 85 05 	sts	0x0585, r24
    2c92:	90 93 86 05 	sts	0x0586, r25
	leftLightVolt = getLeftLight();
    2c96:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    2c9a:	60 93 95 06 	sts	0x0695, r22
    2c9e:	70 93 96 06 	sts	0x0696, r23
    2ca2:	80 93 97 06 	sts	0x0697, r24
    2ca6:	90 93 98 06 	sts	0x0698, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    2caa:	08 95       	ret

00002cac <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    2cac:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    2cb0:	60 93 f3 04 	sts	0x04F3, r22
    2cb4:	70 93 f4 04 	sts	0x04F4, r23
    2cb8:	80 93 f5 04 	sts	0x04F5, r24
    2cbc:	90 93 f6 04 	sts	0x04F6, r25
	bkIR = getBackIR();
    2cc0:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    2cc4:	60 93 fb 04 	sts	0x04FB, r22
    2cc8:	70 93 fc 04 	sts	0x04FC, r23
    2ccc:	80 93 fd 04 	sts	0x04FD, r24
    2cd0:	90 93 fe 04 	sts	0x04FE, r25
	ltIR = getLeftIR();
    2cd4:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    2cd8:	60 93 09 06 	sts	0x0609, r22
    2cdc:	70 93 0a 06 	sts	0x060A, r23
    2ce0:	80 93 0b 06 	sts	0x060B, r24
    2ce4:	90 93 0c 06 	sts	0x060C, r25
	rtIR = getRightIR();
    2ce8:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    2cec:	60 93 0d 06 	sts	0x060D, r22
    2cf0:	70 93 0e 06 	sts	0x060E, r23
    2cf4:	80 93 0f 06 	sts	0x060F, r24
    2cf8:	90 93 10 06 	sts	0x0610, r25
}
    2cfc:	08 95       	ret

00002cfe <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2cfe:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <ATTINY_open>
    2d02:	90 93 7a 04 	sts	0x047A, r25
    2d06:	80 93 79 04 	sts	0x0479, r24
	LEopstat = LED_open(); //open the LED module
    2d0a:	0e 94 21 18 	call	0x3042	; 0x3042 <LED_open>
    2d0e:	90 93 78 04 	sts	0x0478, r25
    2d12:	80 93 77 04 	sts	0x0477, r24
	LCopstat = LCD_open(); //open the LCD module
    2d16:	0e 94 38 17 	call	0x2e70	; 0x2e70 <LCD_open>
    2d1a:	90 93 76 04 	sts	0x0476, r25
    2d1e:	80 93 75 04 	sts	0x0475, r24
	STEPPER_open(); // Open STEPPER module for use
    2d22:	0e 94 a3 1a 	call	0x3546	; 0x3546 <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in beep mode
    2d26:	81 e0       	ldi	r24, 0x01	; 1
    2d28:	0e 94 27 19 	call	0x324e	; 0x324e <SPKR_open>
	
	LED_open();
    2d2c:	0e 94 21 18 	call	0x3042	; 0x3042 <LED_open>
	I2C_open();
    2d30:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <I2C_open>
	ADC_open();//open the ADC module
    2d34:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2d38:	81 e0       	ldi	r24, 0x01	; 1
    2d3a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <ADC_set_VREF>

	// Initialize IR Values and Reset Prefilter
	checkIR();
    2d3e:	0e 94 56 16 	call	0x2cac	; 0x2cac <checkIR>
	prefilter(1);
    2d42:	81 e0       	ldi	r24, 0x01	; 1
    2d44:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <prefilter>
}
    2d48:	08 95       	ret

00002d4a <ADC_open>:
    2d4a:	8f e0       	ldi	r24, 0x0F	; 15
    2d4c:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    2d50:	88 23       	and	r24, r24
    2d52:	31 f4       	brne	.+12     	; 0x2d60 <ADC_open+0x16>
    2d54:	0e 94 0d 1f 	call	0x3e1a	; 0x3e1a <__ADC_init>
    2d58:	8f e0       	ldi	r24, 0x0F	; 15
    2d5a:	61 e0       	ldi	r22, 0x01	; 1
    2d5c:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    2d60:	8f e0       	ldi	r24, 0x0F	; 15
    2d62:	91 e0       	ldi	r25, 0x01	; 1
    2d64:	08 95       	ret

00002d66 <ADC_sample>:
    2d66:	8f e0       	ldi	r24, 0x0F	; 15
    2d68:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    2d6c:	81 30       	cpi	r24, 0x01	; 1
    2d6e:	19 f0       	breq	.+6      	; 0x2d76 <ADC_sample+0x10>
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	13 c0       	rjmp	.+38     	; 0x2d9c <ADC_sample+0x36>
    2d76:	80 91 7a 00 	lds	r24, 0x007A
    2d7a:	80 64       	ori	r24, 0x40	; 64
    2d7c:	80 93 7a 00 	sts	0x007A, r24
    2d80:	80 91 7a 00 	lds	r24, 0x007A
    2d84:	86 fd       	sbrc	r24, 6
    2d86:	fc cf       	rjmp	.-8      	; 0x2d80 <ADC_sample+0x1a>
    2d88:	30 91 78 00 	lds	r19, 0x0078
    2d8c:	20 91 79 00 	lds	r18, 0x0079
    2d90:	92 2f       	mov	r25, r18
    2d92:	80 e0       	ldi	r24, 0x00	; 0
    2d94:	23 2f       	mov	r18, r19
    2d96:	30 e0       	ldi	r19, 0x00	; 0
    2d98:	28 2b       	or	r18, r24
    2d9a:	39 2b       	or	r19, r25
    2d9c:	c9 01       	movw	r24, r18
    2d9e:	08 95       	ret

00002da0 <ADC_set_channel>:
    2da0:	58 2f       	mov	r21, r24
    2da2:	80 91 88 03 	lds	r24, 0x0388
    2da6:	88 30       	cpi	r24, 0x08	; 8
    2da8:	d8 f4       	brcc	.+54     	; 0x2de0 <ADC_set_channel+0x40>
    2daa:	40 91 7e 00 	lds	r20, 0x007E
    2dae:	21 e0       	ldi	r18, 0x01	; 1
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	b9 01       	movw	r22, r18
    2db4:	02 c0       	rjmp	.+4      	; 0x2dba <ADC_set_channel+0x1a>
    2db6:	66 0f       	add	r22, r22
    2db8:	77 1f       	adc	r23, r23
    2dba:	8a 95       	dec	r24
    2dbc:	e2 f7       	brpl	.-8      	; 0x2db6 <ADC_set_channel+0x16>
    2dbe:	cb 01       	movw	r24, r22
    2dc0:	80 95       	com	r24
    2dc2:	84 23       	and	r24, r20
    2dc4:	80 93 7e 00 	sts	0x007E, r24
    2dc8:	80 91 7e 00 	lds	r24, 0x007E
    2dcc:	05 2e       	mov	r0, r21
    2dce:	02 c0       	rjmp	.+4      	; 0x2dd4 <ADC_set_channel+0x34>
    2dd0:	22 0f       	add	r18, r18
    2dd2:	33 1f       	adc	r19, r19
    2dd4:	0a 94       	dec	r0
    2dd6:	e2 f7       	brpl	.-8      	; 0x2dd0 <ADC_set_channel+0x30>
    2dd8:	82 2b       	or	r24, r18
    2dda:	80 93 7e 00 	sts	0x007E, r24
    2dde:	0d c0       	rjmp	.+26     	; 0x2dfa <ADC_set_channel+0x5a>
    2de0:	20 91 7e 00 	lds	r18, 0x007E
    2de4:	81 e0       	ldi	r24, 0x01	; 1
    2de6:	90 e0       	ldi	r25, 0x00	; 0
    2de8:	05 2e       	mov	r0, r21
    2dea:	02 c0       	rjmp	.+4      	; 0x2df0 <ADC_set_channel+0x50>
    2dec:	88 0f       	add	r24, r24
    2dee:	99 1f       	adc	r25, r25
    2df0:	0a 94       	dec	r0
    2df2:	e2 f7       	brpl	.-8      	; 0x2dec <ADC_set_channel+0x4c>
    2df4:	28 2b       	or	r18, r24
    2df6:	20 93 7e 00 	sts	0x007E, r18
    2dfa:	50 93 88 03 	sts	0x0388, r21
    2dfe:	80 91 7c 00 	lds	r24, 0x007C
    2e02:	5f 71       	andi	r21, 0x1F	; 31
    2e04:	80 7e       	andi	r24, 0xE0	; 224
    2e06:	85 2b       	or	r24, r21
    2e08:	80 93 7c 00 	sts	0x007C, r24
    2e0c:	08 95       	ret

00002e0e <ADC_set_VREF>:
    2e0e:	ec e7       	ldi	r30, 0x7C	; 124
    2e10:	f0 e0       	ldi	r31, 0x00	; 0
    2e12:	90 81       	ld	r25, Z
    2e14:	82 95       	swap	r24
    2e16:	88 0f       	add	r24, r24
    2e18:	88 0f       	add	r24, r24
    2e1a:	80 7c       	andi	r24, 0xC0	; 192
    2e1c:	9f 73       	andi	r25, 0x3F	; 63
    2e1e:	98 2b       	or	r25, r24
    2e20:	90 83       	st	Z, r25
    2e22:	08 95       	ret

00002e24 <main>:
    2e24:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <CBOT_ISR_init>
    2e28:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <CBOT_init>
    2e2c:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <CBOT_main>
    2e30:	80 e0       	ldi	r24, 0x00	; 0
    2e32:	90 e0       	ldi	r25, 0x00	; 0
    2e34:	08 95       	ret

00002e36 <LCD_clear>:
    2e36:	0f 93       	push	r16
    2e38:	1f 93       	push	r17
    2e3a:	80 e4       	ldi	r24, 0x40	; 64
    2e3c:	60 e0       	ldi	r22, 0x00	; 0
    2e3e:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2e42:	00 e0       	ldi	r16, 0x00	; 0
    2e44:	80 2f       	mov	r24, r16
    2e46:	60 e0       	ldi	r22, 0x00	; 0
    2e48:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_set_PGC_addr>
    2e4c:	10 e0       	ldi	r17, 0x00	; 0
    2e4e:	80 e0       	ldi	r24, 0x00	; 0
    2e50:	61 e0       	ldi	r22, 0x01	; 1
    2e52:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2e56:	1f 5f       	subi	r17, 0xFF	; 255
    2e58:	10 38       	cpi	r17, 0x80	; 128
    2e5a:	c9 f7       	brne	.-14     	; 0x2e4e <LCD_clear+0x18>
    2e5c:	0f 5f       	subi	r16, 0xFF	; 255
    2e5e:	04 30       	cpi	r16, 0x04	; 4
    2e60:	89 f7       	brne	.-30     	; 0x2e44 <LCD_clear+0xe>
    2e62:	83 e0       	ldi	r24, 0x03	; 3
    2e64:	60 e0       	ldi	r22, 0x00	; 0
    2e66:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_set_next_PGC>
    2e6a:	1f 91       	pop	r17
    2e6c:	0f 91       	pop	r16
    2e6e:	08 95       	ret

00002e70 <LCD_open>:
    2e70:	0f 93       	push	r16
    2e72:	1f 93       	push	r17
    2e74:	82 e0       	ldi	r24, 0x02	; 2
    2e76:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    2e7a:	88 23       	and	r24, r24
    2e7c:	11 f4       	brne	.+4      	; 0x2e82 <LCD_open+0x12>
    2e7e:	82 e0       	ldi	r24, 0x02	; 2
    2e80:	06 c0       	rjmp	.+12     	; 0x2e8e <LCD_open+0x1e>
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    2e88:	88 23       	and	r24, r24
    2e8a:	19 f4       	brne	.+6      	; 0x2e92 <LCD_open+0x22>
    2e8c:	81 e0       	ldi	r24, 0x01	; 1
    2e8e:	90 e0       	ldi	r25, 0x00	; 0
    2e90:	6d c0       	rjmp	.+218    	; 0x2f6c <LCD_open+0xfc>
    2e92:	0e 94 8e 21 	call	0x431c	; 0x431c <__LCD_init>
    2e96:	85 e0       	ldi	r24, 0x05	; 5
    2e98:	61 e0       	ldi	r22, 0x01	; 1
    2e9a:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    2e9e:	8e ea       	ldi	r24, 0xAE	; 174
    2ea0:	60 e0       	ldi	r22, 0x00	; 0
    2ea2:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2ea6:	82 ea       	ldi	r24, 0xA2	; 162
    2ea8:	60 e0       	ldi	r22, 0x00	; 0
    2eaa:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2eae:	80 ea       	ldi	r24, 0xA0	; 160
    2eb0:	60 e0       	ldi	r22, 0x00	; 0
    2eb2:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2eb6:	00 e5       	ldi	r16, 0x50	; 80
    2eb8:	13 ec       	ldi	r17, 0xC3	; 195
    2eba:	c8 01       	movw	r24, r16
    2ebc:	01 97       	sbiw	r24, 0x01	; 1
    2ebe:	f1 f7       	brne	.-4      	; 0x2ebc <LCD_open+0x4c>
    2ec0:	80 ec       	ldi	r24, 0xC0	; 192
    2ec2:	60 e0       	ldi	r22, 0x00	; 0
    2ec4:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2ec8:	8f e2       	ldi	r24, 0x2F	; 47
    2eca:	60 e0       	ldi	r22, 0x00	; 0
    2ecc:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2ed0:	81 e8       	ldi	r24, 0x81	; 129
    2ed2:	60 e0       	ldi	r22, 0x00	; 0
    2ed4:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2ed8:	86 e1       	ldi	r24, 0x16	; 22
    2eda:	60 e0       	ldi	r22, 0x00	; 0
    2edc:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2ee0:	82 e2       	ldi	r24, 0x22	; 34
    2ee2:	60 e0       	ldi	r22, 0x00	; 0
    2ee4:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2ee8:	c8 01       	movw	r24, r16
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <LCD_open+0x7a>
    2eee:	8f ea       	ldi	r24, 0xAF	; 175
    2ef0:	60 e0       	ldi	r22, 0x00	; 0
    2ef2:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2ef6:	86 ea       	ldi	r24, 0xA6	; 166
    2ef8:	60 e0       	ldi	r22, 0x00	; 0
    2efa:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2efe:	85 ea       	ldi	r24, 0xA5	; 165
    2f00:	60 e0       	ldi	r22, 0x00	; 0
    2f02:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2f06:	80 e0       	ldi	r24, 0x00	; 0
    2f08:	90 e0       	ldi	r25, 0x00	; 0
    2f0a:	28 e8       	ldi	r18, 0x88	; 136
    2f0c:	33 e1       	ldi	r19, 0x13	; 19
    2f0e:	f9 01       	movw	r30, r18
    2f10:	31 97       	sbiw	r30, 0x01	; 1
    2f12:	f1 f7       	brne	.-4      	; 0x2f10 <LCD_open+0xa0>
    2f14:	01 96       	adiw	r24, 0x01	; 1
    2f16:	43 e0       	ldi	r20, 0x03	; 3
    2f18:	88 3e       	cpi	r24, 0xE8	; 232
    2f1a:	94 07       	cpc	r25, r20
    2f1c:	c1 f7       	brne	.-16     	; 0x2f0e <LCD_open+0x9e>
    2f1e:	83 eb       	ldi	r24, 0xB3	; 179
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2f26:	80 e4       	ldi	r24, 0x40	; 64
    2f28:	60 e0       	ldi	r22, 0x00	; 0
    2f2a:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2f2e:	83 e0       	ldi	r24, 0x03	; 3
    2f30:	60 e0       	ldi	r22, 0x00	; 0
    2f32:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_set_PGC_addr>
    2f36:	83 e0       	ldi	r24, 0x03	; 3
    2f38:	60 e0       	ldi	r22, 0x00	; 0
    2f3a:	0e 94 da 17 	call	0x2fb4	; 0x2fb4 <LCD_set_next_PGC>
    2f3e:	10 92 e8 06 	sts	0x06E8, r1
    2f42:	10 92 ea 06 	sts	0x06EA, r1
    2f46:	10 92 e9 06 	sts	0x06E9, r1
    2f4a:	87 e9       	ldi	r24, 0x97	; 151
    2f4c:	93 e0       	ldi	r25, 0x03	; 3
    2f4e:	90 93 19 07 	sts	0x0719, r25
    2f52:	80 93 18 07 	sts	0x0718, r24
    2f56:	88 e1       	ldi	r24, 0x18	; 24
    2f58:	0e 94 b9 17 	call	0x2f72	; 0x2f72 <LCD_set_backlight>
    2f5c:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
    2f60:	84 ea       	ldi	r24, 0xA4	; 164
    2f62:	60 e0       	ldi	r22, 0x00	; 0
    2f64:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2f68:	85 e0       	ldi	r24, 0x05	; 5
    2f6a:	91 e0       	ldi	r25, 0x01	; 1
    2f6c:	1f 91       	pop	r17
    2f6e:	0f 91       	pop	r16
    2f70:	08 95       	ret

00002f72 <LCD_set_backlight>:
    2f72:	1f 93       	push	r17
    2f74:	18 2f       	mov	r17, r24
    2f76:	85 e0       	ldi	r24, 0x05	; 5
    2f78:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    2f7c:	81 30       	cpi	r24, 0x01	; 1
    2f7e:	c1 f4       	brne	.+48     	; 0x2fb0 <LCD_set_backlight+0x3e>
    2f80:	87 e0       	ldi	r24, 0x07	; 7
    2f82:	0e 94 36 18 	call	0x306c	; 0x306c <SPI_set_slave_addr>
    2f86:	82 e0       	ldi	r24, 0x02	; 2
    2f88:	6a e0       	ldi	r22, 0x0A	; 10
    2f8a:	0e 94 87 18 	call	0x310e	; 0x310e <SPI_transmit>
    2f8e:	82 e0       	ldi	r24, 0x02	; 2
    2f90:	61 eb       	ldi	r22, 0xB1	; 177
    2f92:	0e 94 87 18 	call	0x310e	; 0x310e <SPI_transmit>
    2f96:	61 2f       	mov	r22, r17
    2f98:	11 32       	cpi	r17, 0x21	; 33
    2f9a:	08 f0       	brcs	.+2      	; 0x2f9e <LCD_set_backlight+0x2c>
    2f9c:	60 e2       	ldi	r22, 0x20	; 32
    2f9e:	82 e0       	ldi	r24, 0x02	; 2
    2fa0:	0e 94 87 18 	call	0x310e	; 0x310e <SPI_transmit>
    2fa4:	89 ee       	ldi	r24, 0xE9	; 233
    2fa6:	8a 95       	dec	r24
    2fa8:	f1 f7       	brne	.-4      	; 0x2fa6 <LCD_set_backlight+0x34>
    2faa:	87 e0       	ldi	r24, 0x07	; 7
    2fac:	0e 94 36 18 	call	0x306c	; 0x306c <SPI_set_slave_addr>
    2fb0:	1f 91       	pop	r17
    2fb2:	08 95       	ret

00002fb4 <LCD_set_next_PGC>:
    2fb4:	83 70       	andi	r24, 0x03	; 3
    2fb6:	6f 77       	andi	r22, 0x7F	; 127
    2fb8:	60 93 e6 06 	sts	0x06E6, r22
    2fbc:	80 93 e7 06 	sts	0x06E7, r24
    2fc0:	08 95       	ret

00002fc2 <LCD_set_PGC_addr>:
    2fc2:	0f 93       	push	r16
    2fc4:	1f 93       	push	r17
    2fc6:	06 2f       	mov	r16, r22
    2fc8:	16 2f       	mov	r17, r22
    2fca:	1f 77       	andi	r17, 0x7F	; 127
    2fcc:	83 70       	andi	r24, 0x03	; 3
    2fce:	80 6b       	ori	r24, 0xB0	; 176
    2fd0:	60 e0       	ldi	r22, 0x00	; 0
    2fd2:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2fd6:	12 95       	swap	r17
    2fd8:	1f 70       	andi	r17, 0x0F	; 15
    2fda:	81 2f       	mov	r24, r17
    2fdc:	80 61       	ori	r24, 0x10	; 16
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2fe4:	80 2f       	mov	r24, r16
    2fe6:	8f 70       	andi	r24, 0x0F	; 15
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    2fee:	1f 91       	pop	r17
    2ff0:	0f 91       	pop	r16
    2ff2:	08 95       	ret

00002ff4 <LCD_write>:
    2ff4:	0f 93       	push	r16
    2ff6:	1f 93       	push	r17
    2ff8:	08 2f       	mov	r16, r24
    2ffa:	16 2f       	mov	r17, r22
    2ffc:	85 e0       	ldi	r24, 0x05	; 5
    2ffe:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    3002:	81 30       	cpi	r24, 0x01	; 1
    3004:	79 f4       	brne	.+30     	; 0x3024 <LCD_write+0x30>
    3006:	11 23       	and	r17, r17
    3008:	19 f0       	breq	.+6      	; 0x3010 <LCD_write+0x1c>
    300a:	11 30       	cpi	r17, 0x01	; 1
    300c:	21 f4       	brne	.+8      	; 0x3016 <LCD_write+0x22>
    300e:	02 c0       	rjmp	.+4      	; 0x3014 <LCD_write+0x20>
    3010:	2b 98       	cbi	0x05, 3	; 5
    3012:	01 c0       	rjmp	.+2      	; 0x3016 <LCD_write+0x22>
    3014:	2b 9a       	sbi	0x05, 3	; 5
    3016:	86 e0       	ldi	r24, 0x06	; 6
    3018:	8a 95       	dec	r24
    301a:	f1 f7       	brne	.-4      	; 0x3018 <LCD_write+0x24>
    301c:	80 e0       	ldi	r24, 0x00	; 0
    301e:	60 2f       	mov	r22, r16
    3020:	0e 94 87 18 	call	0x310e	; 0x310e <SPI_transmit>
    3024:	1f 91       	pop	r17
    3026:	0f 91       	pop	r16
    3028:	08 95       	ret

0000302a <LED_clr_pattern>:
    302a:	1f 93       	push	r17
    302c:	18 2f       	mov	r17, r24
    302e:	86 e0       	ldi	r24, 0x06	; 6
    3030:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    3034:	81 30       	cpi	r24, 0x01	; 1
    3036:	19 f4       	brne	.+6      	; 0x303e <LED_clr_pattern+0x14>
    3038:	81 2f       	mov	r24, r17
    303a:	0e 94 3d 22 	call	0x447a	; 0x447a <__LED_clr_pattern>
    303e:	1f 91       	pop	r17
    3040:	08 95       	ret

00003042 <LED_open>:
    3042:	0e 94 42 22 	call	0x4484	; 0x4484 <__LED_init>
    3046:	86 e0       	ldi	r24, 0x06	; 6
    3048:	61 e0       	ldi	r22, 0x01	; 1
    304a:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    304e:	86 e0       	ldi	r24, 0x06	; 6
    3050:	91 e0       	ldi	r25, 0x01	; 1
    3052:	08 95       	ret

00003054 <LED_set_pattern>:
    3054:	1f 93       	push	r17
    3056:	18 2f       	mov	r17, r24
    3058:	86 e0       	ldi	r24, 0x06	; 6
    305a:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    305e:	81 30       	cpi	r24, 0x01	; 1
    3060:	19 f4       	brne	.+6      	; 0x3068 <LED_set_pattern+0x14>
    3062:	81 2f       	mov	r24, r17
    3064:	0e 94 45 22 	call	0x448a	; 0x448a <__LED_set_pattern>
    3068:	1f 91       	pop	r17
    306a:	08 95       	ret

0000306c <SPI_set_slave_addr>:
    306c:	1f 93       	push	r17
    306e:	18 2f       	mov	r17, r24
    3070:	82 e0       	ldi	r24, 0x02	; 2
    3072:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	09 f0       	breq	.+2      	; 0x307c <SPI_set_slave_addr+0x10>
    307a:	47 c0       	rjmp	.+142    	; 0x310a <SPI_set_slave_addr+0x9e>
    307c:	91 2f       	mov	r25, r17
    307e:	97 70       	andi	r25, 0x07	; 7
    3080:	80 91 eb 06 	lds	r24, 0x06EB
    3084:	98 17       	cp	r25, r24
    3086:	09 f4       	brne	.+2      	; 0x308a <SPI_set_slave_addr+0x1e>
    3088:	40 c0       	rjmp	.+128    	; 0x310a <SPI_set_slave_addr+0x9e>
    308a:	90 93 eb 06 	sts	0x06EB, r25
    308e:	85 b1       	in	r24, 0x05	; 5
    3090:	88 7f       	andi	r24, 0xF8	; 248
    3092:	89 2b       	or	r24, r25
    3094:	85 b9       	out	0x05, r24	; 5
    3096:	93 30       	cpi	r25, 0x03	; 3
    3098:	11 f1       	breq	.+68     	; 0x30de <SPI_set_slave_addr+0x72>
    309a:	94 30       	cpi	r25, 0x04	; 4
    309c:	28 f4       	brcc	.+10     	; 0x30a8 <SPI_set_slave_addr+0x3c>
    309e:	91 30       	cpi	r25, 0x01	; 1
    30a0:	51 f0       	breq	.+20     	; 0x30b6 <SPI_set_slave_addr+0x4a>
    30a2:	92 30       	cpi	r25, 0x02	; 2
    30a4:	90 f4       	brcc	.+36     	; 0x30ca <SPI_set_slave_addr+0x5e>
    30a6:	0c c0       	rjmp	.+24     	; 0x30c0 <SPI_set_slave_addr+0x54>
    30a8:	95 30       	cpi	r25, 0x05	; 5
    30aa:	19 f1       	breq	.+70     	; 0x30f2 <SPI_set_slave_addr+0x86>
    30ac:	95 30       	cpi	r25, 0x05	; 5
    30ae:	e0 f0       	brcs	.+56     	; 0x30e8 <SPI_set_slave_addr+0x7c>
    30b0:	96 30       	cpi	r25, 0x06	; 6
    30b2:	21 f5       	brne	.+72     	; 0x30fc <SPI_set_slave_addr+0x90>
    30b4:	0f c0       	rjmp	.+30     	; 0x30d4 <SPI_set_slave_addr+0x68>
    30b6:	e0 91 50 04 	lds	r30, 0x0450
    30ba:	f0 91 51 04 	lds	r31, 0x0451
    30be:	22 c0       	rjmp	.+68     	; 0x3104 <SPI_set_slave_addr+0x98>
    30c0:	e0 91 4e 04 	lds	r30, 0x044E
    30c4:	f0 91 4f 04 	lds	r31, 0x044F
    30c8:	1d c0       	rjmp	.+58     	; 0x3104 <SPI_set_slave_addr+0x98>
    30ca:	e0 91 52 04 	lds	r30, 0x0452
    30ce:	f0 91 53 04 	lds	r31, 0x0453
    30d2:	18 c0       	rjmp	.+48     	; 0x3104 <SPI_set_slave_addr+0x98>
    30d4:	e0 91 5a 04 	lds	r30, 0x045A
    30d8:	f0 91 5b 04 	lds	r31, 0x045B
    30dc:	13 c0       	rjmp	.+38     	; 0x3104 <SPI_set_slave_addr+0x98>
    30de:	e0 91 54 04 	lds	r30, 0x0454
    30e2:	f0 91 55 04 	lds	r31, 0x0455
    30e6:	0e c0       	rjmp	.+28     	; 0x3104 <SPI_set_slave_addr+0x98>
    30e8:	e0 91 56 04 	lds	r30, 0x0456
    30ec:	f0 91 57 04 	lds	r31, 0x0457
    30f0:	09 c0       	rjmp	.+18     	; 0x3104 <SPI_set_slave_addr+0x98>
    30f2:	e0 91 58 04 	lds	r30, 0x0458
    30f6:	f0 91 59 04 	lds	r31, 0x0459
    30fa:	04 c0       	rjmp	.+8      	; 0x3104 <SPI_set_slave_addr+0x98>
    30fc:	e0 91 5c 04 	lds	r30, 0x045C
    3100:	f0 91 5d 04 	lds	r31, 0x045D
    3104:	30 97       	sbiw	r30, 0x00	; 0
    3106:	09 f0       	breq	.+2      	; 0x310a <SPI_set_slave_addr+0x9e>
    3108:	09 95       	icall
    310a:	1f 91       	pop	r17
    310c:	08 95       	ret

0000310e <SPI_transmit>:
    310e:	1f 93       	push	r17
    3110:	16 2f       	mov	r17, r22
    3112:	0e 94 36 18 	call	0x306c	; 0x306c <SPI_set_slave_addr>
    3116:	82 e0       	ldi	r24, 0x02	; 2
    3118:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    311c:	81 30       	cpi	r24, 0x01	; 1
    311e:	21 f4       	brne	.+8      	; 0x3128 <SPI_transmit+0x1a>
    3120:	1e bd       	out	0x2e, r17	; 46
    3122:	0d b4       	in	r0, 0x2d	; 45
    3124:	07 fe       	sbrs	r0, 7
    3126:	fd cf       	rjmp	.-6      	; 0x3122 <SPI_transmit+0x14>
    3128:	1f 91       	pop	r17
    312a:	08 95       	ret

0000312c <__SPKR_set_up_freq_LUT>:
    312c:	0f 93       	push	r16
    312e:	1f 93       	push	r17
    3130:	cf 93       	push	r28
    3132:	df 93       	push	r29
    3134:	80 e2       	ldi	r24, 0x20	; 32
    3136:	91 e0       	ldi	r25, 0x01	; 1
    3138:	0e 94 93 31 	call	0x6326	; 0x6326 <malloc>
    313c:	9c 01       	movw	r18, r24
    313e:	90 93 6d 04 	sts	0x046D, r25
    3142:	80 93 6c 04 	sts	0x046C, r24
    3146:	89 2b       	or	r24, r25
    3148:	11 f4       	brne	.+4      	; 0x314e <__SPKR_set_up_freq_LUT+0x22>
    314a:	80 e0       	ldi	r24, 0x00	; 0
    314c:	39 c0       	rjmp	.+114    	; 0x31c0 <__SPKR_set_up_freq_LUT+0x94>
    314e:	89 01       	movw	r16, r18
    3150:	c0 e0       	ldi	r28, 0x00	; 0
    3152:	d0 e0       	ldi	r29, 0x00	; 0
    3154:	be 01       	movw	r22, r28
    3156:	80 e0       	ldi	r24, 0x00	; 0
    3158:	90 e0       	ldi	r25, 0x00	; 0
    315a:	0e 94 d4 2a 	call	0x55a8	; 0x55a8 <__floatunsisf>
    315e:	20 e0       	ldi	r18, 0x00	; 0
    3160:	30 e0       	ldi	r19, 0x00	; 0
    3162:	40 ea       	ldi	r20, 0xA0	; 160
    3164:	51 e4       	ldi	r21, 0x41	; 65
    3166:	0e 94 3b 2a 	call	0x5476	; 0x5476 <__divsf3>
    316a:	27 ef       	ldi	r18, 0xF7	; 247
    316c:	35 e7       	ldi	r19, 0x75	; 117
    316e:	40 e0       	ldi	r20, 0x00	; 0
    3170:	5f e3       	ldi	r21, 0x3F	; 63
    3172:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    3176:	9b 01       	movw	r18, r22
    3178:	ac 01       	movw	r20, r24
    317a:	60 e0       	ldi	r22, 0x00	; 0
    317c:	70 e0       	ldi	r23, 0x00	; 0
    317e:	80 e2       	ldi	r24, 0x20	; 32
    3180:	91 e4       	ldi	r25, 0x41	; 65
    3182:	0e 94 27 2c 	call	0x584e	; 0x584e <pow>
    3186:	9b 01       	movw	r18, r22
    3188:	ac 01       	movw	r20, r24
    318a:	ca 01       	movw	r24, r20
    318c:	b9 01       	movw	r22, r18
    318e:	2d ec       	ldi	r18, 0xCD	; 205
    3190:	3c ec       	ldi	r19, 0xCC	; 204
    3192:	42 e8       	ldi	r20, 0x82	; 130
    3194:	51 e4       	ldi	r21, 0x41	; 65
    3196:	0e 94 c4 2b 	call	0x5788	; 0x5788 <__mulsf3>
    319a:	0e 94 8a 2b 	call	0x5714	; 0x5714 <lrint>
    319e:	2a e0       	ldi	r18, 0x0A	; 10
    31a0:	30 e0       	ldi	r19, 0x00	; 0
    31a2:	40 e0       	ldi	r20, 0x00	; 0
    31a4:	50 e0       	ldi	r21, 0x00	; 0
    31a6:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__mulsi3>
    31aa:	f8 01       	movw	r30, r16
    31ac:	61 93       	st	Z+, r22
    31ae:	71 93       	st	Z+, r23
    31b0:	81 93       	st	Z+, r24
    31b2:	91 93       	st	Z+, r25
    31b4:	8f 01       	movw	r16, r30
    31b6:	21 96       	adiw	r28, 0x01	; 1
    31b8:	c8 34       	cpi	r28, 0x48	; 72
    31ba:	d1 05       	cpc	r29, r1
    31bc:	59 f6       	brne	.-106    	; 0x3154 <__SPKR_set_up_freq_LUT+0x28>
    31be:	81 e0       	ldi	r24, 0x01	; 1
    31c0:	df 91       	pop	r29
    31c2:	cf 91       	pop	r28
    31c4:	1f 91       	pop	r17
    31c6:	0f 91       	pop	r16
    31c8:	08 95       	ret

000031ca <__SPKR_open_beep_mode>:
    31ca:	8a e0       	ldi	r24, 0x0A	; 10
    31cc:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    31d0:	88 23       	and	r24, r24
    31d2:	71 f4       	brne	.+28     	; 0x31f0 <__SPKR_open_beep_mode+0x26>
    31d4:	10 92 69 04 	sts	0x0469, r1
    31d8:	10 92 68 04 	sts	0x0468, r1
    31dc:	81 e0       	ldi	r24, 0x01	; 1
    31de:	0e 94 80 23 	call	0x4700	; 0x4700 <__SPKR_init>
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	80 93 5f 04 	sts	0x045F, r24
    31e8:	8a e0       	ldi	r24, 0x0A	; 10
    31ea:	61 e0       	ldi	r22, 0x01	; 1
    31ec:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    31f0:	8a e0       	ldi	r24, 0x0A	; 10
    31f2:	91 e0       	ldi	r25, 0x01	; 1
    31f4:	08 95       	ret

000031f6 <__SPKR_open_tone_mode>:
    31f6:	1f 93       	push	r17
    31f8:	8b e0       	ldi	r24, 0x0B	; 11
    31fa:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    31fe:	88 23       	and	r24, r24
    3200:	11 f0       	breq	.+4      	; 0x3206 <__SPKR_open_tone_mode+0x10>
    3202:	90 e0       	ldi	r25, 0x00	; 0
    3204:	21 c0       	rjmp	.+66     	; 0x3248 <__SPKR_open_tone_mode+0x52>
    3206:	89 e0       	ldi	r24, 0x09	; 9
    3208:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    320c:	88 23       	and	r24, r24
    320e:	d9 f4       	brne	.+54     	; 0x3246 <__SPKR_open_tone_mode+0x50>
    3210:	0e 94 96 18 	call	0x312c	; 0x312c <__SPKR_set_up_freq_LUT>
    3214:	18 2f       	mov	r17, r24
    3216:	81 30       	cpi	r24, 0x01	; 1
    3218:	b1 f4       	brne	.+44     	; 0x3246 <__SPKR_open_tone_mode+0x50>
    321a:	10 92 60 04 	sts	0x0460, r1
    321e:	10 92 61 04 	sts	0x0461, r1
    3222:	10 92 62 04 	sts	0x0462, r1
    3226:	10 92 63 04 	sts	0x0463, r1
    322a:	8d e0       	ldi	r24, 0x0D	; 13
    322c:	63 e0       	ldi	r22, 0x03	; 3
    322e:	73 e2       	ldi	r23, 0x23	; 35
    3230:	0e 94 66 21 	call	0x42cc	; 0x42cc <ISR_attach>
    3234:	82 e0       	ldi	r24, 0x02	; 2
    3236:	0e 94 80 23 	call	0x4700	; 0x4700 <__SPKR_init>
    323a:	10 93 5e 04 	sts	0x045E, r17
    323e:	89 e0       	ldi	r24, 0x09	; 9
    3240:	61 e0       	ldi	r22, 0x01	; 1
    3242:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    3246:	91 e0       	ldi	r25, 0x01	; 1
    3248:	89 e0       	ldi	r24, 0x09	; 9
    324a:	1f 91       	pop	r17
    324c:	08 95       	ret

0000324e <SPKR_open>:
    324e:	81 30       	cpi	r24, 0x01	; 1
    3250:	29 f0       	breq	.+10     	; 0x325c <SPKR_open+0xe>
    3252:	82 30       	cpi	r24, 0x02	; 2
    3254:	31 f0       	breq	.+12     	; 0x3262 <SPKR_open+0x14>
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	89 e0       	ldi	r24, 0x09	; 9
    325a:	08 95       	ret
    325c:	0e 94 e5 18 	call	0x31ca	; 0x31ca <__SPKR_open_beep_mode>
    3260:	08 95       	ret
    3262:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <__SPKR_open_tone_mode>
    3266:	08 95       	ret

00003268 <STEPPER_get_nSteps>:
    3268:	80 91 ac 06 	lds	r24, 0x06AC
    326c:	90 91 ad 06 	lds	r25, 0x06AD
    3270:	20 91 ae 06 	lds	r18, 0x06AE
    3274:	30 91 af 06 	lds	r19, 0x06AF
    3278:	bc 01       	movw	r22, r24
    327a:	c9 01       	movw	r24, r18
    327c:	08 95       	ret

0000327e <STEPPER_stepmode>:
    327e:	2f 92       	push	r2
    3280:	3f 92       	push	r3
    3282:	4f 92       	push	r4
    3284:	5f 92       	push	r5
    3286:	6f 92       	push	r6
    3288:	7f 92       	push	r7
    328a:	8f 92       	push	r8
    328c:	9f 92       	push	r9
    328e:	af 92       	push	r10
    3290:	bf 92       	push	r11
    3292:	cf 92       	push	r12
    3294:	df 92       	push	r13
    3296:	ef 92       	push	r14
    3298:	ff 92       	push	r15
    329a:	0f 93       	push	r16
    329c:	1f 93       	push	r17
    329e:	df 93       	push	r29
    32a0:	cf 93       	push	r28
    32a2:	cd b7       	in	r28, 0x3d	; 61
    32a4:	de b7       	in	r29, 0x3e	; 62
    32a6:	58 2e       	mov	r5, r24
    32a8:	96 2e       	mov	r9, r22
    32aa:	44 2e       	mov	r4, r20
    32ac:	39 01       	movw	r6, r18
    32ae:	3c 2c       	mov	r3, r12
    32b0:	c9 8c       	ldd	r12, Y+25	; 0x19
    32b2:	da 8c       	ldd	r13, Y+26	; 0x1a
    32b4:	2b 8c       	ldd	r2, Y+27	; 0x1b
    32b6:	81 e0       	ldi	r24, 0x01	; 1
    32b8:	68 17       	cp	r22, r24
    32ba:	39 f1       	breq	.+78     	; 0x330a <STEPPER_stepmode+0x8c>
    32bc:	68 17       	cp	r22, r24
    32be:	28 f0       	brcs	.+10     	; 0x32ca <STEPPER_stepmode+0x4c>
    32c0:	92 e0       	ldi	r25, 0x02	; 2
    32c2:	69 17       	cp	r22, r25
    32c4:	09 f0       	breq	.+2      	; 0x32c8 <STEPPER_stepmode+0x4a>
    32c6:	85 c0       	rjmp	.+266    	; 0x33d2 <STEPPER_stepmode+0x154>
    32c8:	49 c0       	rjmp	.+146    	; 0x335c <STEPPER_stepmode+0xde>
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	61 e0       	ldi	r22, 0x01	; 1
    32ce:	0e 94 48 1b 	call	0x3690	; 0x3690 <STEPPER_set_mode>
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	b7 01       	movw	r22, r14
    32d6:	0e 94 11 1b 	call	0x3622	; 0x3622 <STEPPER_set_accel>
    32da:	80 e0       	ldi	r24, 0x00	; 0
    32dc:	64 2d       	mov	r22, r4
    32de:	a3 01       	movw	r20, r6
    32e0:	98 01       	movw	r18, r16
    32e2:	03 2d       	mov	r16, r3
    32e4:	ee 24       	eor	r14, r14
    32e6:	e3 94       	inc	r14
    32e8:	e1 ed       	ldi	r30, 0xD1	; 209
    32ea:	ce 2e       	mov	r12, r30
    32ec:	e6 e0       	ldi	r30, 0x06	; 6
    32ee:	de 2e       	mov	r13, r30
    32f0:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <STEPPER_step>
    32f4:	55 20       	and	r5, r5
    32f6:	09 f0       	breq	.+2      	; 0x32fa <STEPPER_stepmode+0x7c>
    32f8:	6c c0       	rjmp	.+216    	; 0x33d2 <STEPPER_stepmode+0x154>
    32fa:	00 d0       	rcall	.+0      	; 0x32fc <STEPPER_stepmode+0x7e>
    32fc:	0f 92       	push	r0
    32fe:	ed b7       	in	r30, 0x3d	; 61
    3300:	fe b7       	in	r31, 0x3e	; 62
    3302:	11 82       	std	Z+1, r1	; 0x01
    3304:	b3 82       	std	Z+3, r11	; 0x03
    3306:	a2 82       	std	Z+2, r10	; 0x02
    3308:	23 c0       	rjmp	.+70     	; 0x3350 <STEPPER_stepmode+0xd2>
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	61 e0       	ldi	r22, 0x01	; 1
    330e:	0e 94 48 1b 	call	0x3690	; 0x3690 <STEPPER_set_mode>
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	b6 01       	movw	r22, r12
    3316:	0e 94 11 1b 	call	0x3622	; 0x3622 <STEPPER_set_accel>
    331a:	81 e0       	ldi	r24, 0x01	; 1
    331c:	68 2d       	mov	r22, r8
    331e:	4d 89       	ldd	r20, Y+21	; 0x15
    3320:	5e 89       	ldd	r21, Y+22	; 0x16
    3322:	2f 89       	ldd	r18, Y+23	; 0x17
    3324:	38 8d       	ldd	r19, Y+24	; 0x18
    3326:	02 2d       	mov	r16, r2
    3328:	ee 24       	eor	r14, r14
    332a:	e3 94       	inc	r14
    332c:	71 ed       	ldi	r23, 0xD1	; 209
    332e:	c7 2e       	mov	r12, r23
    3330:	76 e0       	ldi	r23, 0x06	; 6
    3332:	d7 2e       	mov	r13, r23
    3334:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <STEPPER_step>
    3338:	55 20       	and	r5, r5
    333a:	09 f0       	breq	.+2      	; 0x333e <STEPPER_stepmode+0xc0>
    333c:	4a c0       	rjmp	.+148    	; 0x33d2 <STEPPER_stepmode+0x154>
    333e:	00 d0       	rcall	.+0      	; 0x3340 <STEPPER_stepmode+0xc2>
    3340:	0f 92       	push	r0
    3342:	ed b7       	in	r30, 0x3d	; 61
    3344:	fe b7       	in	r31, 0x3e	; 62
    3346:	91 82       	std	Z+1, r9	; 0x01
    3348:	8c 8d       	ldd	r24, Y+28	; 0x1c
    334a:	9d 8d       	ldd	r25, Y+29	; 0x1d
    334c:	93 83       	std	Z+3, r25	; 0x03
    334e:	82 83       	std	Z+2, r24	; 0x02
    3350:	0e 94 30 1c 	call	0x3860	; 0x3860 <STEPPER_wait_and_then>
    3354:	0f 90       	pop	r0
    3356:	0f 90       	pop	r0
    3358:	0f 90       	pop	r0
    335a:	3b c0       	rjmp	.+118    	; 0x33d2 <STEPPER_stepmode+0x154>
    335c:	82 e0       	ldi	r24, 0x02	; 2
    335e:	61 e0       	ldi	r22, 0x01	; 1
    3360:	0e 94 48 1b 	call	0x3690	; 0x3690 <STEPPER_set_mode>
    3364:	80 e0       	ldi	r24, 0x00	; 0
    3366:	b7 01       	movw	r22, r14
    3368:	0e 94 11 1b 	call	0x3622	; 0x3622 <STEPPER_set_accel>
    336c:	81 e0       	ldi	r24, 0x01	; 1
    336e:	b6 01       	movw	r22, r12
    3370:	0e 94 11 1b 	call	0x3622	; 0x3622 <STEPPER_set_accel>
    3374:	80 e0       	ldi	r24, 0x00	; 0
    3376:	64 2d       	mov	r22, r4
    3378:	a3 01       	movw	r20, r6
    337a:	98 01       	movw	r18, r16
    337c:	03 2d       	mov	r16, r3
    337e:	ee 24       	eor	r14, r14
    3380:	e3 94       	inc	r14
    3382:	91 ed       	ldi	r25, 0xD1	; 209
    3384:	c9 2e       	mov	r12, r25
    3386:	96 e0       	ldi	r25, 0x06	; 6
    3388:	d9 2e       	mov	r13, r25
    338a:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <STEPPER_step>
    338e:	81 e0       	ldi	r24, 0x01	; 1
    3390:	68 2d       	mov	r22, r8
    3392:	4d 89       	ldd	r20, Y+21	; 0x15
    3394:	5e 89       	ldd	r21, Y+22	; 0x16
    3396:	2f 89       	ldd	r18, Y+23	; 0x17
    3398:	38 8d       	ldd	r19, Y+24	; 0x18
    339a:	02 2d       	mov	r16, r2
    339c:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <STEPPER_step>
    33a0:	55 20       	and	r5, r5
    33a2:	b9 f4       	brne	.+46     	; 0x33d2 <STEPPER_stepmode+0x154>
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <STEPPER_stepmode+0x128>
    33a6:	00 d0       	rcall	.+0      	; 0x33a8 <STEPPER_stepmode+0x12a>
    33a8:	0f 92       	push	r0
    33aa:	ad b7       	in	r26, 0x3d	; 61
    33ac:	be b7       	in	r27, 0x3e	; 62
    33ae:	11 96       	adiw	r26, 0x01	; 1
    33b0:	ed b7       	in	r30, 0x3d	; 61
    33b2:	fe b7       	in	r31, 0x3e	; 62
    33b4:	91 82       	std	Z+1, r9	; 0x01
    33b6:	fd 01       	movw	r30, r26
    33b8:	b2 82       	std	Z+2, r11	; 0x02
    33ba:	a1 82       	std	Z+1, r10	; 0x01
    33bc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    33be:	9d 8d       	ldd	r25, Y+29	; 0x1d
    33c0:	94 83       	std	Z+4, r25	; 0x04
    33c2:	83 83       	std	Z+3, r24	; 0x03
    33c4:	0e 94 30 1c 	call	0x3860	; 0x3860 <STEPPER_wait_and_then>
    33c8:	0f 90       	pop	r0
    33ca:	0f 90       	pop	r0
    33cc:	0f 90       	pop	r0
    33ce:	0f 90       	pop	r0
    33d0:	0f 90       	pop	r0
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	1f 91       	pop	r17
    33d8:	0f 91       	pop	r16
    33da:	ff 90       	pop	r15
    33dc:	ef 90       	pop	r14
    33de:	df 90       	pop	r13
    33e0:	cf 90       	pop	r12
    33e2:	bf 90       	pop	r11
    33e4:	af 90       	pop	r10
    33e6:	9f 90       	pop	r9
    33e8:	8f 90       	pop	r8
    33ea:	7f 90       	pop	r7
    33ec:	6f 90       	pop	r6
    33ee:	5f 90       	pop	r5
    33f0:	4f 90       	pop	r4
    33f2:	3f 90       	pop	r3
    33f4:	2f 90       	pop	r2
    33f6:	08 95       	ret

000033f8 <STEPPER_move>:
    33f8:	6f 92       	push	r6
    33fa:	7f 92       	push	r7
    33fc:	8f 92       	push	r8
    33fe:	9f 92       	push	r9
    3400:	af 92       	push	r10
    3402:	bf 92       	push	r11
    3404:	cf 92       	push	r12
    3406:	df 92       	push	r13
    3408:	ef 92       	push	r14
    340a:	ff 92       	push	r15
    340c:	0f 93       	push	r16
    340e:	1f 93       	push	r17
    3410:	df 93       	push	r29
    3412:	cf 93       	push	r28
    3414:	cd b7       	in	r28, 0x3d	; 61
    3416:	de b7       	in	r29, 0x3e	; 62
    3418:	94 2e       	mov	r9, r20
    341a:	7c 2d       	mov	r23, r12
    341c:	d5 01       	movw	r26, r10
    341e:	49 89       	ldd	r20, Y+17	; 0x11
    3420:	5a 89       	ldd	r21, Y+18	; 0x12
    3422:	ab 88       	ldd	r10, Y+19	; 0x13
    3424:	bc 88       	ldd	r11, Y+20	; 0x14
    3426:	cd 88       	ldd	r12, Y+21	; 0x15
    3428:	de 88       	ldd	r13, Y+22	; 0x16
    342a:	9f 89       	ldd	r25, Y+23	; 0x17
    342c:	81 30       	cpi	r24, 0x01	; 1
    342e:	09 f4       	brne	.+2      	; 0x3432 <STEPPER_move+0x3a>
    3430:	57 c0       	rjmp	.+174    	; 0x34e0 <STEPPER_move+0xe8>
    3432:	81 30       	cpi	r24, 0x01	; 1
    3434:	b8 f1       	brcs	.+110    	; 0x34a4 <STEPPER_move+0xac>
    3436:	82 30       	cpi	r24, 0x02	; 2
    3438:	09 f0       	breq	.+2      	; 0x343c <STEPPER_move+0x44>
    343a:	76 c0       	rjmp	.+236    	; 0x3528 <STEPPER_move+0x130>
    343c:	61 30       	cpi	r22, 0x01	; 1
    343e:	91 f0       	breq	.+36     	; 0x3464 <STEPPER_move+0x6c>
    3440:	61 30       	cpi	r22, 0x01	; 1
    3442:	20 f0       	brcs	.+8      	; 0x344c <STEPPER_move+0x54>
    3444:	62 30       	cpi	r22, 0x02	; 2
    3446:	09 f0       	breq	.+2      	; 0x344a <STEPPER_move+0x52>
    3448:	6f c0       	rjmp	.+222    	; 0x3528 <STEPPER_move+0x130>
    344a:	15 c0       	rjmp	.+42     	; 0x3476 <STEPPER_move+0x7e>
    344c:	80 e0       	ldi	r24, 0x00	; 0
    344e:	60 e0       	ldi	r22, 0x00	; 0
    3450:	0e 94 48 1b 	call	0x3690	; 0x3690 <STEPPER_set_mode>
    3454:	80 e0       	ldi	r24, 0x00	; 0
    3456:	b7 01       	movw	r22, r14
    3458:	0e 94 11 1b 	call	0x3622	; 0x3622 <STEPPER_set_accel>
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	69 2d       	mov	r22, r9
    3460:	a8 01       	movw	r20, r16
    3462:	1d c0       	rjmp	.+58     	; 0x349e <STEPPER_move+0xa6>
    3464:	81 e0       	ldi	r24, 0x01	; 1
    3466:	60 e0       	ldi	r22, 0x00	; 0
    3468:	0e 94 48 1b 	call	0x3690	; 0x3690 <STEPPER_set_mode>
    346c:	81 e0       	ldi	r24, 0x01	; 1
    346e:	b6 01       	movw	r22, r12
    3470:	0e 94 11 1b 	call	0x3622	; 0x3622 <STEPPER_set_accel>
    3474:	11 c0       	rjmp	.+34     	; 0x3498 <STEPPER_move+0xa0>
    3476:	82 e0       	ldi	r24, 0x02	; 2
    3478:	60 e0       	ldi	r22, 0x00	; 0
    347a:	0e 94 48 1b 	call	0x3690	; 0x3690 <STEPPER_set_mode>
    347e:	80 e0       	ldi	r24, 0x00	; 0
    3480:	b7 01       	movw	r22, r14
    3482:	0e 94 11 1b 	call	0x3622	; 0x3622 <STEPPER_set_accel>
    3486:	81 e0       	ldi	r24, 0x01	; 1
    3488:	b6 01       	movw	r22, r12
    348a:	0e 94 11 1b 	call	0x3622	; 0x3622 <STEPPER_set_accel>
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	69 2d       	mov	r22, r9
    3492:	a8 01       	movw	r20, r16
    3494:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <STEPPER_run>
    3498:	81 e0       	ldi	r24, 0x01	; 1
    349a:	68 2d       	mov	r22, r8
    349c:	a5 01       	movw	r20, r10
    349e:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <STEPPER_run>
    34a2:	42 c0       	rjmp	.+132    	; 0x3528 <STEPPER_move+0x130>
    34a4:	ed b7       	in	r30, 0x3d	; 61
    34a6:	fe b7       	in	r31, 0x3e	; 62
    34a8:	39 97       	sbiw	r30, 0x09	; 9
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	fe bf       	out	0x3e, r31	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	ed bf       	out	0x3d, r30	; 61
    34b4:	6d b6       	in	r6, 0x3d	; 61
    34b6:	7e b6       	in	r7, 0x3e	; 62
    34b8:	08 94       	sec
    34ba:	61 1c       	adc	r6, r1
    34bc:	71 1c       	adc	r7, r1
    34be:	52 83       	std	Z+2, r21	; 0x02
    34c0:	41 83       	std	Z+1, r20	; 0x01
    34c2:	f3 01       	movw	r30, r6
    34c4:	b3 82       	std	Z+3, r11	; 0x03
    34c6:	a2 82       	std	Z+2, r10	; 0x02
    34c8:	d5 82       	std	Z+5, r13	; 0x05
    34ca:	c4 82       	std	Z+4, r12	; 0x04
    34cc:	96 83       	std	Z+6, r25	; 0x06
    34ce:	88 8d       	ldd	r24, Y+24	; 0x18
    34d0:	99 8d       	ldd	r25, Y+25	; 0x19
    34d2:	90 87       	std	Z+8, r25	; 0x08
    34d4:	87 83       	std	Z+7, r24	; 0x07
    34d6:	80 e0       	ldi	r24, 0x00	; 0
    34d8:	49 2d       	mov	r20, r9
    34da:	c7 2e       	mov	r12, r23
    34dc:	5d 01       	movw	r10, r26
    34de:	1a c0       	rjmp	.+52     	; 0x3514 <STEPPER_move+0x11c>
    34e0:	ed b7       	in	r30, 0x3d	; 61
    34e2:	fe b7       	in	r31, 0x3e	; 62
    34e4:	39 97       	sbiw	r30, 0x09	; 9
    34e6:	0f b6       	in	r0, 0x3f	; 63
    34e8:	f8 94       	cli
    34ea:	fe bf       	out	0x3e, r31	; 62
    34ec:	0f be       	out	0x3f, r0	; 63
    34ee:	ed bf       	out	0x3d, r30	; 61
    34f0:	ad b7       	in	r26, 0x3d	; 61
    34f2:	be b7       	in	r27, 0x3e	; 62
    34f4:	11 96       	adiw	r26, 0x01	; 1
    34f6:	52 83       	std	Z+2, r21	; 0x02
    34f8:	41 83       	std	Z+1, r20	; 0x01
    34fa:	fd 01       	movw	r30, r26
    34fc:	b3 82       	std	Z+3, r11	; 0x03
    34fe:	a2 82       	std	Z+2, r10	; 0x02
    3500:	d5 82       	std	Z+5, r13	; 0x05
    3502:	c4 82       	std	Z+4, r12	; 0x04
    3504:	96 83       	std	Z+6, r25	; 0x06
    3506:	10 86       	std	Z+8, r1	; 0x08
    3508:	17 82       	std	Z+7, r1	; 0x07
    350a:	81 e0       	ldi	r24, 0x01	; 1
    350c:	49 2d       	mov	r20, r9
    350e:	c7 2e       	mov	r12, r23
    3510:	aa 24       	eor	r10, r10
    3512:	bb 24       	eor	r11, r11
    3514:	0e 94 3f 19 	call	0x327e	; 0x327e <STEPPER_stepmode>
    3518:	8d b7       	in	r24, 0x3d	; 61
    351a:	9e b7       	in	r25, 0x3e	; 62
    351c:	09 96       	adiw	r24, 0x09	; 9
    351e:	0f b6       	in	r0, 0x3f	; 63
    3520:	f8 94       	cli
    3522:	9e bf       	out	0x3e, r25	; 62
    3524:	0f be       	out	0x3f, r0	; 63
    3526:	8d bf       	out	0x3d, r24	; 61
    3528:	cf 91       	pop	r28
    352a:	df 91       	pop	r29
    352c:	1f 91       	pop	r17
    352e:	0f 91       	pop	r16
    3530:	ff 90       	pop	r15
    3532:	ef 90       	pop	r14
    3534:	df 90       	pop	r13
    3536:	cf 90       	pop	r12
    3538:	bf 90       	pop	r11
    353a:	af 90       	pop	r10
    353c:	9f 90       	pop	r9
    353e:	8f 90       	pop	r8
    3540:	7f 90       	pop	r7
    3542:	6f 90       	pop	r6
    3544:	08 95       	ret

00003546 <STEPPER_open>:
    3546:	0e 94 12 24 	call	0x4824	; 0x4824 <__STEPPER_init>
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	80 93 d0 06 	sts	0x06D0, r24
    3550:	ea e9       	ldi	r30, 0x9A	; 154
    3552:	f6 e0       	ldi	r31, 0x06	; 6
    3554:	11 92       	st	Z+, r1
    3556:	11 92       	st	Z+, r1
    3558:	11 82       	std	Z+1, r1	; 0x01
    355a:	10 82       	st	Z, r1
    355c:	32 96       	adiw	r30, 0x02	; 2
    355e:	11 82       	std	Z+1, r1	; 0x01
    3560:	10 82       	st	Z, r1
    3562:	32 96       	adiw	r30, 0x02	; 2
    3564:	11 82       	std	Z+1, r1	; 0x01
    3566:	10 82       	st	Z, r1
    3568:	32 96       	adiw	r30, 0x02	; 2
    356a:	11 82       	std	Z+1, r1	; 0x01
    356c:	10 82       	st	Z, r1
    356e:	32 96       	adiw	r30, 0x02	; 2
    3570:	11 82       	std	Z+1, r1	; 0x01
    3572:	10 82       	st	Z, r1
    3574:	32 96       	adiw	r30, 0x02	; 2
    3576:	11 82       	std	Z+1, r1	; 0x01
    3578:	10 82       	st	Z, r1
    357a:	32 96       	adiw	r30, 0x02	; 2
    357c:	11 82       	std	Z+1, r1	; 0x01
    357e:	10 82       	st	Z, r1
    3580:	32 96       	adiw	r30, 0x02	; 2
    3582:	11 82       	std	Z+1, r1	; 0x01
    3584:	10 82       	st	Z, r1
    3586:	32 96       	adiw	r30, 0x02	; 2
    3588:	11 82       	std	Z+1, r1	; 0x01
    358a:	10 82       	st	Z, r1
    358c:	32 96       	adiw	r30, 0x02	; 2
    358e:	11 82       	std	Z+1, r1	; 0x01
    3590:	10 82       	st	Z, r1
    3592:	32 96       	adiw	r30, 0x02	; 2
    3594:	11 82       	std	Z+1, r1	; 0x01
    3596:	10 82       	st	Z, r1
    3598:	32 96       	adiw	r30, 0x02	; 2
    359a:	11 82       	std	Z+1, r1	; 0x01
    359c:	10 82       	st	Z, r1
    359e:	36 96       	adiw	r30, 0x06	; 6
    35a0:	11 92       	st	Z+, r1
    35a2:	11 92       	st	Z+, r1
    35a4:	11 92       	st	Z+, r1
    35a6:	10 82       	st	Z, r1
    35a8:	32 96       	adiw	r30, 0x02	; 2
    35aa:	11 92       	st	Z+, r1
    35ac:	11 92       	st	Z+, r1
    35ae:	11 92       	st	Z+, r1
    35b0:	11 92       	st	Z+, r1
    35b2:	11 92       	st	Z+, r1
    35b4:	11 92       	st	Z+, r1
    35b6:	11 92       	st	Z+, r1
    35b8:	11 82       	std	Z+1, r1	; 0x01
    35ba:	10 82       	st	Z, r1
    35bc:	32 96       	adiw	r30, 0x02	; 2
    35be:	11 82       	std	Z+1, r1	; 0x01
    35c0:	10 82       	st	Z, r1
    35c2:	32 96       	adiw	r30, 0x02	; 2
    35c4:	11 82       	std	Z+1, r1	; 0x01
    35c6:	10 82       	st	Z, r1
    35c8:	32 96       	adiw	r30, 0x02	; 2
    35ca:	11 82       	std	Z+1, r1	; 0x01
    35cc:	10 82       	st	Z, r1
    35ce:	76 97       	sbiw	r30, 0x16	; 22
    35d0:	11 82       	std	Z+1, r1	; 0x01
    35d2:	10 82       	st	Z, r1
    35d4:	32 96       	adiw	r30, 0x02	; 2
    35d6:	11 82       	std	Z+1, r1	; 0x01
    35d8:	10 82       	st	Z, r1
    35da:	10 92 cf 06 	sts	0x06CF, r1
    35de:	10 92 ce 06 	sts	0x06CE, r1
    35e2:	10 92 d0 06 	sts	0x06D0, r1
    35e6:	87 e0       	ldi	r24, 0x07	; 7
    35e8:	61 e0       	ldi	r22, 0x01	; 1
    35ea:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    35ee:	87 e0       	ldi	r24, 0x07	; 7
    35f0:	91 e0       	ldi	r25, 0x01	; 1
    35f2:	08 95       	ret

000035f4 <STEPPER_run>:
    35f4:	ef 92       	push	r14
    35f6:	ff 92       	push	r15
    35f8:	0f 93       	push	r16
    35fa:	1f 93       	push	r17
    35fc:	18 2f       	mov	r17, r24
    35fe:	06 2f       	mov	r16, r22
    3600:	7a 01       	movw	r14, r20
    3602:	60 e0       	ldi	r22, 0x00	; 0
    3604:	0e 94 48 1b 	call	0x3690	; 0x3690 <STEPPER_set_mode>
    3608:	81 2f       	mov	r24, r17
    360a:	60 2f       	mov	r22, r16
    360c:	0e 94 33 1b 	call	0x3666	; 0x3666 <STEPPER_set_dir>
    3610:	81 2f       	mov	r24, r17
    3612:	b7 01       	movw	r22, r14
    3614:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <STEPPER_set_speed>
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    361c:	ff 90       	pop	r15
    361e:	ef 90       	pop	r14
    3620:	08 95       	ret

00003622 <STEPPER_set_accel>:
    3622:	48 2f       	mov	r20, r24
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	80 93 d0 06 	sts	0x06D0, r24
    362a:	cb 01       	movw	r24, r22
    362c:	23 e0       	ldi	r18, 0x03	; 3
    362e:	69 3e       	cpi	r22, 0xE9	; 233
    3630:	72 07       	cpc	r23, r18
    3632:	10 f0       	brcs	.+4      	; 0x3638 <STEPPER_set_accel+0x16>
    3634:	88 ee       	ldi	r24, 0xE8	; 232
    3636:	93 e0       	ldi	r25, 0x03	; 3
    3638:	41 30       	cpi	r20, 0x01	; 1
    363a:	71 f0       	breq	.+28     	; 0x3658 <STEPPER_set_accel+0x36>
    363c:	41 30       	cpi	r20, 0x01	; 1
    363e:	18 f0       	brcs	.+6      	; 0x3646 <STEPPER_set_accel+0x24>
    3640:	42 30       	cpi	r20, 0x02	; 2
    3642:	71 f4       	brne	.+28     	; 0x3660 <STEPPER_set_accel+0x3e>
    3644:	05 c0       	rjmp	.+10     	; 0x3650 <STEPPER_set_accel+0x2e>
    3646:	90 93 a5 06 	sts	0x06A5, r25
    364a:	80 93 a4 06 	sts	0x06A4, r24
    364e:	08 c0       	rjmp	.+16     	; 0x3660 <STEPPER_set_accel+0x3e>
    3650:	90 93 a5 06 	sts	0x06A5, r25
    3654:	80 93 a4 06 	sts	0x06A4, r24
    3658:	90 93 a7 06 	sts	0x06A7, r25
    365c:	80 93 a6 06 	sts	0x06A6, r24
    3660:	10 92 d0 06 	sts	0x06D0, r1
    3664:	08 95       	ret

00003666 <STEPPER_set_dir>:
    3666:	98 2f       	mov	r25, r24
    3668:	81 e0       	ldi	r24, 0x01	; 1
    366a:	80 93 d0 06 	sts	0x06D0, r24
    366e:	91 30       	cpi	r25, 0x01	; 1
    3670:	51 f0       	breq	.+20     	; 0x3686 <STEPPER_set_dir+0x20>
    3672:	91 30       	cpi	r25, 0x01	; 1
    3674:	18 f0       	brcs	.+6      	; 0x367c <STEPPER_set_dir+0x16>
    3676:	92 30       	cpi	r25, 0x02	; 2
    3678:	41 f4       	brne	.+16     	; 0x368a <STEPPER_set_dir+0x24>
    367a:	03 c0       	rjmp	.+6      	; 0x3682 <STEPPER_set_dir+0x1c>
    367c:	60 93 bd 06 	sts	0x06BD, r22
    3680:	04 c0       	rjmp	.+8      	; 0x368a <STEPPER_set_dir+0x24>
    3682:	60 93 bd 06 	sts	0x06BD, r22
    3686:	60 93 be 06 	sts	0x06BE, r22
    368a:	10 92 d0 06 	sts	0x06D0, r1
    368e:	08 95       	ret

00003690 <STEPPER_set_mode>:
    3690:	98 2f       	mov	r25, r24
    3692:	81 e0       	ldi	r24, 0x01	; 1
    3694:	80 93 d0 06 	sts	0x06D0, r24
    3698:	91 30       	cpi	r25, 0x01	; 1
    369a:	51 f0       	breq	.+20     	; 0x36b0 <STEPPER_set_mode+0x20>
    369c:	91 30       	cpi	r25, 0x01	; 1
    369e:	18 f0       	brcs	.+6      	; 0x36a6 <STEPPER_set_mode+0x16>
    36a0:	92 30       	cpi	r25, 0x02	; 2
    36a2:	41 f4       	brne	.+16     	; 0x36b4 <STEPPER_set_mode+0x24>
    36a4:	03 c0       	rjmp	.+6      	; 0x36ac <STEPPER_set_mode+0x1c>
    36a6:	60 93 9a 06 	sts	0x069A, r22
    36aa:	04 c0       	rjmp	.+8      	; 0x36b4 <STEPPER_set_mode+0x24>
    36ac:	60 93 9a 06 	sts	0x069A, r22
    36b0:	60 93 9b 06 	sts	0x069B, r22
    36b4:	10 92 d0 06 	sts	0x06D0, r1
    36b8:	08 95       	ret

000036ba <STEPPER_set_speed>:
    36ba:	48 2f       	mov	r20, r24
    36bc:	81 e0       	ldi	r24, 0x01	; 1
    36be:	80 93 d0 06 	sts	0x06D0, r24
    36c2:	cb 01       	movw	r24, r22
    36c4:	21 e0       	ldi	r18, 0x01	; 1
    36c6:	61 39       	cpi	r22, 0x91	; 145
    36c8:	72 07       	cpc	r23, r18
    36ca:	10 f0       	brcs	.+4      	; 0x36d0 <STEPPER_set_speed+0x16>
    36cc:	80 e9       	ldi	r24, 0x90	; 144
    36ce:	91 e0       	ldi	r25, 0x01	; 1
    36d0:	41 30       	cpi	r20, 0x01	; 1
    36d2:	71 f0       	breq	.+28     	; 0x36f0 <STEPPER_set_speed+0x36>
    36d4:	41 30       	cpi	r20, 0x01	; 1
    36d6:	18 f0       	brcs	.+6      	; 0x36de <STEPPER_set_speed+0x24>
    36d8:	42 30       	cpi	r20, 0x02	; 2
    36da:	71 f4       	brne	.+28     	; 0x36f8 <STEPPER_set_speed+0x3e>
    36dc:	05 c0       	rjmp	.+10     	; 0x36e8 <STEPPER_set_speed+0x2e>
    36de:	90 93 9d 06 	sts	0x069D, r25
    36e2:	80 93 9c 06 	sts	0x069C, r24
    36e6:	08 c0       	rjmp	.+16     	; 0x36f8 <STEPPER_set_speed+0x3e>
    36e8:	90 93 9d 06 	sts	0x069D, r25
    36ec:	80 93 9c 06 	sts	0x069C, r24
    36f0:	90 93 9f 06 	sts	0x069F, r25
    36f4:	80 93 9e 06 	sts	0x069E, r24
    36f8:	10 92 d0 06 	sts	0x06D0, r1
    36fc:	08 95       	ret

000036fe <STEPPER_step>:
    36fe:	8f 92       	push	r8
    3700:	9f 92       	push	r9
    3702:	af 92       	push	r10
    3704:	bf 92       	push	r11
    3706:	cf 92       	push	r12
    3708:	df 92       	push	r13
    370a:	ef 92       	push	r14
    370c:	ff 92       	push	r15
    370e:	0f 93       	push	r16
    3710:	1f 93       	push	r17
    3712:	cf 93       	push	r28
    3714:	df 93       	push	r29
    3716:	18 2f       	mov	r17, r24
    3718:	f6 2e       	mov	r15, r22
    371a:	5a 01       	movw	r10, r20
    371c:	49 01       	movw	r8, r18
    371e:	e6 01       	movw	r28, r12
    3720:	61 e0       	ldi	r22, 0x01	; 1
    3722:	0e 94 48 1b 	call	0x3690	; 0x3690 <STEPPER_set_mode>
    3726:	81 2f       	mov	r24, r17
    3728:	b5 01       	movw	r22, r10
    372a:	a4 01       	movw	r20, r8
    372c:	0e 94 4c 24 	call	0x4898	; 0x4898 <STEPPER_setup_decels>
    3730:	81 2f       	mov	r24, r17
    3732:	6f 2d       	mov	r22, r15
    3734:	0e 94 33 1b 	call	0x3666	; 0x3666 <STEPPER_set_dir>
    3738:	81 2f       	mov	r24, r17
    373a:	60 2f       	mov	r22, r16
    373c:	0e 94 37 24 	call	0x486e	; 0x486e <STEPPER_set_stop_mode>
    3740:	81 2f       	mov	r24, r17
    3742:	b5 01       	movw	r22, r10
    3744:	0e 94 1c 24 	call	0x4838	; 0x4838 <STEPPER_set_steps>
    3748:	c1 14       	cp	r12, r1
    374a:	d1 04       	cpc	r13, r1
    374c:	99 f0       	breq	.+38     	; 0x3774 <STEPPER_step+0x76>
    374e:	11 30       	cpi	r17, 0x01	; 1
    3750:	49 f0       	breq	.+18     	; 0x3764 <STEPPER_step+0x66>
    3752:	11 30       	cpi	r17, 0x01	; 1
    3754:	18 f0       	brcs	.+6      	; 0x375c <STEPPER_step+0x5e>
    3756:	12 30       	cpi	r17, 0x02	; 2
    3758:	69 f4       	brne	.+26     	; 0x3774 <STEPPER_step+0x76>
    375a:	06 c0       	rjmp	.+12     	; 0x3768 <STEPPER_step+0x6a>
    375c:	18 82       	st	Y, r1
    375e:	10 92 cc 06 	sts	0x06CC, r1
    3762:	08 c0       	rjmp	.+16     	; 0x3774 <STEPPER_step+0x76>
    3764:	19 82       	std	Y+1, r1	; 0x01
    3766:	04 c0       	rjmp	.+8      	; 0x3770 <STEPPER_step+0x72>
    3768:	18 82       	st	Y, r1
    376a:	19 82       	std	Y+1, r1	; 0x01
    376c:	10 92 cc 06 	sts	0x06CC, r1
    3770:	10 92 cd 06 	sts	0x06CD, r1
    3774:	d0 93 cf 06 	sts	0x06CF, r29
    3778:	c0 93 ce 06 	sts	0x06CE, r28
    377c:	ee 20       	and	r14, r14
    377e:	b9 f5       	brne	.+110    	; 0x37ee <STEPPER_step+0xf0>
    3780:	8e ef       	ldi	r24, 0xFE	; 254
    3782:	93 e0       	ldi	r25, 0x03	; 3
    3784:	90 93 cf 06 	sts	0x06CF, r25
    3788:	80 93 ce 06 	sts	0x06CE, r24
    378c:	81 2f       	mov	r24, r17
    378e:	b4 01       	movw	r22, r8
    3790:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <STEPPER_set_speed>
    3794:	81 2f       	mov	r24, r17
    3796:	0e 94 fd 23 	call	0x47fa	; 0x47fa <STEPPER_go>
    379a:	11 30       	cpi	r17, 0x01	; 1
    379c:	71 f0       	breq	.+28     	; 0x37ba <STEPPER_step+0xbc>
    379e:	11 30       	cpi	r17, 0x01	; 1
    37a0:	18 f0       	brcs	.+6      	; 0x37a8 <STEPPER_step+0xaa>
    37a2:	12 30       	cpi	r17, 0x02	; 2
    37a4:	59 f5       	brne	.+86     	; 0x37fc <STEPPER_step+0xfe>
    37a6:	12 c0       	rjmp	.+36     	; 0x37cc <STEPPER_step+0xce>
    37a8:	10 92 fe 03 	sts	0x03FE, r1
    37ac:	10 92 cc 06 	sts	0x06CC, r1
    37b0:	80 91 fe 03 	lds	r24, 0x03FE
    37b4:	88 23       	and	r24, r24
    37b6:	e1 f3       	breq	.-8      	; 0x37b0 <STEPPER_step+0xb2>
    37b8:	21 c0       	rjmp	.+66     	; 0x37fc <STEPPER_step+0xfe>
    37ba:	10 92 ff 03 	sts	0x03FF, r1
    37be:	10 92 cd 06 	sts	0x06CD, r1
    37c2:	80 91 ff 03 	lds	r24, 0x03FF
    37c6:	88 23       	and	r24, r24
    37c8:	e1 f3       	breq	.-8      	; 0x37c2 <STEPPER_step+0xc4>
    37ca:	18 c0       	rjmp	.+48     	; 0x37fc <STEPPER_step+0xfe>
    37cc:	10 92 fe 03 	sts	0x03FE, r1
    37d0:	10 92 ff 03 	sts	0x03FF, r1
    37d4:	10 92 cc 06 	sts	0x06CC, r1
    37d8:	10 92 cd 06 	sts	0x06CD, r1
    37dc:	80 91 fe 03 	lds	r24, 0x03FE
    37e0:	88 23       	and	r24, r24
    37e2:	e1 f3       	breq	.-8      	; 0x37dc <STEPPER_step+0xde>
    37e4:	80 91 ff 03 	lds	r24, 0x03FF
    37e8:	88 23       	and	r24, r24
    37ea:	c1 f3       	breq	.-16     	; 0x37dc <STEPPER_step+0xde>
    37ec:	07 c0       	rjmp	.+14     	; 0x37fc <STEPPER_step+0xfe>
    37ee:	81 2f       	mov	r24, r17
    37f0:	b4 01       	movw	r22, r8
    37f2:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <STEPPER_set_speed>
    37f6:	81 2f       	mov	r24, r17
    37f8:	0e 94 fd 23 	call	0x47fa	; 0x47fa <STEPPER_go>
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	1f 91       	pop	r17
    3802:	0f 91       	pop	r16
    3804:	ff 90       	pop	r15
    3806:	ef 90       	pop	r14
    3808:	df 90       	pop	r13
    380a:	cf 90       	pop	r12
    380c:	bf 90       	pop	r11
    380e:	af 90       	pop	r10
    3810:	9f 90       	pop	r9
    3812:	8f 90       	pop	r8
    3814:	08 95       	ret

00003816 <STEPPER_stop>:
    3816:	0f 93       	push	r16
    3818:	1f 93       	push	r17
    381a:	18 2f       	mov	r17, r24
    381c:	06 2f       	mov	r16, r22
    381e:	66 23       	and	r22, r22
    3820:	49 f4       	brne	.+18     	; 0x3834 <STEPPER_stop+0x1e>
    3822:	60 e0       	ldi	r22, 0x00	; 0
    3824:	70 e0       	ldi	r23, 0x00	; 0
    3826:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <STEPPER_set_speed>
    382a:	81 2f       	mov	r24, r17
    382c:	60 e0       	ldi	r22, 0x00	; 0
    382e:	70 e0       	ldi	r23, 0x00	; 0
    3830:	0e 94 1c 24 	call	0x4838	; 0x4838 <STEPPER_set_steps>
    3834:	81 e0       	ldi	r24, 0x01	; 1
    3836:	80 93 d0 06 	sts	0x06D0, r24
    383a:	11 30       	cpi	r17, 0x01	; 1
    383c:	51 f0       	breq	.+20     	; 0x3852 <STEPPER_stop+0x3c>
    383e:	11 30       	cpi	r17, 0x01	; 1
    3840:	18 f0       	brcs	.+6      	; 0x3848 <STEPPER_stop+0x32>
    3842:	12 30       	cpi	r17, 0x02	; 2
    3844:	41 f4       	brne	.+16     	; 0x3856 <STEPPER_stop+0x40>
    3846:	03 c0       	rjmp	.+6      	; 0x384e <STEPPER_stop+0x38>
    3848:	00 93 b8 06 	sts	0x06B8, r16
    384c:	04 c0       	rjmp	.+8      	; 0x3856 <STEPPER_stop+0x40>
    384e:	00 93 b8 06 	sts	0x06B8, r16
    3852:	00 93 b9 06 	sts	0x06B9, r16
    3856:	10 92 d0 06 	sts	0x06D0, r1
    385a:	1f 91       	pop	r17
    385c:	0f 91       	pop	r16
    385e:	08 95       	ret

00003860 <STEPPER_wait_and_then>:
    3860:	cf 92       	push	r12
    3862:	df 92       	push	r13
    3864:	ef 92       	push	r14
    3866:	ff 92       	push	r15
    3868:	0f 93       	push	r16
    386a:	1f 93       	push	r17
    386c:	df 93       	push	r29
    386e:	cf 93       	push	r28
    3870:	cd b7       	in	r28, 0x3d	; 61
    3872:	de b7       	in	r29, 0x3e	; 62
    3874:	8b 85       	ldd	r24, Y+11	; 0x0b
    3876:	81 30       	cpi	r24, 0x01	; 1
    3878:	61 f0       	breq	.+24     	; 0x3892 <STEPPER_wait_and_then+0x32>
    387a:	81 30       	cpi	r24, 0x01	; 1
    387c:	18 f0       	brcs	.+6      	; 0x3884 <STEPPER_wait_and_then+0x24>
    387e:	82 30       	cpi	r24, 0x02	; 2
    3880:	a1 f5       	brne	.+104    	; 0x38ea <STEPPER_wait_and_then+0x8a>
    3882:	11 c0       	rjmp	.+34     	; 0x38a6 <STEPPER_wait_and_then+0x46>
    3884:	ec 85       	ldd	r30, Y+12	; 0x0c
    3886:	fd 85       	ldd	r31, Y+13	; 0x0d
    3888:	80 91 d1 06 	lds	r24, 0x06D1
    388c:	88 23       	and	r24, r24
    388e:	e1 f3       	breq	.-8      	; 0x3888 <STEPPER_wait_and_then+0x28>
    3890:	06 c0       	rjmp	.+12     	; 0x389e <STEPPER_wait_and_then+0x3e>
    3892:	ec 85       	ldd	r30, Y+12	; 0x0c
    3894:	fd 85       	ldd	r31, Y+13	; 0x0d
    3896:	80 91 d2 06 	lds	r24, 0x06D2
    389a:	88 23       	and	r24, r24
    389c:	e1 f3       	breq	.-8      	; 0x3896 <STEPPER_wait_and_then+0x36>
    389e:	30 97       	sbiw	r30, 0x00	; 0
    38a0:	21 f1       	breq	.+72     	; 0x38ea <STEPPER_wait_and_then+0x8a>
    38a2:	09 95       	icall
    38a4:	22 c0       	rjmp	.+68     	; 0x38ea <STEPPER_wait_and_then+0x8a>
    38a6:	cc 84       	ldd	r12, Y+12	; 0x0c
    38a8:	dd 84       	ldd	r13, Y+13	; 0x0d
    38aa:	ee 84       	ldd	r14, Y+14	; 0x0e
    38ac:	ff 84       	ldd	r15, Y+15	; 0x0f
    38ae:	00 e0       	ldi	r16, 0x00	; 0
    38b0:	10 e0       	ldi	r17, 0x00	; 0
    38b2:	00 23       	and	r16, r16
    38b4:	51 f4       	brne	.+20     	; 0x38ca <STEPPER_wait_and_then+0x6a>
    38b6:	80 91 d1 06 	lds	r24, 0x06D1
    38ba:	88 23       	and	r24, r24
    38bc:	31 f0       	breq	.+12     	; 0x38ca <STEPPER_wait_and_then+0x6a>
    38be:	c1 14       	cp	r12, r1
    38c0:	d1 04       	cpc	r13, r1
    38c2:	11 f0       	breq	.+4      	; 0x38c8 <STEPPER_wait_and_then+0x68>
    38c4:	f6 01       	movw	r30, r12
    38c6:	09 95       	icall
    38c8:	01 e0       	ldi	r16, 0x01	; 1
    38ca:	11 23       	and	r17, r17
    38cc:	51 f4       	brne	.+20     	; 0x38e2 <STEPPER_wait_and_then+0x82>
    38ce:	80 91 d2 06 	lds	r24, 0x06D2
    38d2:	88 23       	and	r24, r24
    38d4:	31 f0       	breq	.+12     	; 0x38e2 <STEPPER_wait_and_then+0x82>
    38d6:	e1 14       	cp	r14, r1
    38d8:	f1 04       	cpc	r15, r1
    38da:	11 f0       	breq	.+4      	; 0x38e0 <STEPPER_wait_and_then+0x80>
    38dc:	f7 01       	movw	r30, r14
    38de:	09 95       	icall
    38e0:	11 e0       	ldi	r17, 0x01	; 1
    38e2:	00 23       	and	r16, r16
    38e4:	31 f3       	breq	.-52     	; 0x38b2 <STEPPER_wait_and_then+0x52>
    38e6:	11 23       	and	r17, r17
    38e8:	21 f3       	breq	.-56     	; 0x38b2 <STEPPER_wait_and_then+0x52>
    38ea:	cf 91       	pop	r28
    38ec:	df 91       	pop	r29
    38ee:	1f 91       	pop	r17
    38f0:	0f 91       	pop	r16
    38f2:	ff 90       	pop	r15
    38f4:	ef 90       	pop	r14
    38f6:	df 90       	pop	r13
    38f8:	cf 90       	pop	r12
    38fa:	08 95       	ret

000038fc <SYS_get_state>:
    38fc:	e8 2f       	mov	r30, r24
    38fe:	f0 e0       	ldi	r31, 0x00	; 0
    3900:	e3 31       	cpi	r30, 0x13	; 19
    3902:	f1 05       	cpc	r31, r1
    3904:	40 f4       	brcc	.+16     	; 0x3916 <SYS_get_state+0x1a>
    3906:	e2 5c       	subi	r30, 0xC2	; 194
    3908:	ff 4f       	sbci	r31, 0xFF	; 255
    390a:	ee 0f       	add	r30, r30
    390c:	ff 1f       	adc	r31, r31
    390e:	05 90       	lpm	r0, Z+
    3910:	f4 91       	lpm	r31, Z+
    3912:	e0 2d       	mov	r30, r0
    3914:	09 94       	ijmp
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	08 95       	ret
    391a:	80 91 d3 06 	lds	r24, 0x06D3
    391e:	08 95       	ret
    3920:	80 91 d4 06 	lds	r24, 0x06D4
    3924:	08 95       	ret
    3926:	80 91 d5 06 	lds	r24, 0x06D5
    392a:	08 95       	ret
    392c:	80 91 d6 06 	lds	r24, 0x06D6
    3930:	08 95       	ret
    3932:	80 91 d7 06 	lds	r24, 0x06D7
    3936:	08 95       	ret
    3938:	80 91 d9 06 	lds	r24, 0x06D9
    393c:	08 95       	ret
    393e:	80 91 d8 06 	lds	r24, 0x06D8
    3942:	08 95       	ret
    3944:	80 91 da 06 	lds	r24, 0x06DA
    3948:	08 95       	ret
    394a:	80 91 db 06 	lds	r24, 0x06DB
    394e:	08 95       	ret
    3950:	80 91 dc 06 	lds	r24, 0x06DC
    3954:	08 95       	ret
    3956:	80 91 dd 06 	lds	r24, 0x06DD
    395a:	08 95       	ret
    395c:	80 91 de 06 	lds	r24, 0x06DE
    3960:	08 95       	ret
    3962:	80 91 df 06 	lds	r24, 0x06DF
    3966:	08 95       	ret
    3968:	80 91 e0 06 	lds	r24, 0x06E0
    396c:	08 95       	ret
    396e:	80 91 e1 06 	lds	r24, 0x06E1
    3972:	08 95       	ret
    3974:	80 91 e2 06 	lds	r24, 0x06E2
    3978:	08 95       	ret
    397a:	80 91 e3 06 	lds	r24, 0x06E3
    397e:	08 95       	ret
    3980:	80 91 e4 06 	lds	r24, 0x06E4
    3984:	08 95       	ret
    3986:	80 91 e5 06 	lds	r24, 0x06E5
    398a:	08 95       	ret

0000398c <SYS_set_state>:
    398c:	e8 2f       	mov	r30, r24
    398e:	f0 e0       	ldi	r31, 0x00	; 0
    3990:	e3 31       	cpi	r30, 0x13	; 19
    3992:	f1 05       	cpc	r31, r1
    3994:	08 f0       	brcs	.+2      	; 0x3998 <SYS_set_state+0xc>
    3996:	40 c0       	rjmp	.+128    	; 0x3a18 <SYS_set_state+0x8c>
    3998:	ef 5a       	subi	r30, 0xAF	; 175
    399a:	ff 4f       	sbci	r31, 0xFF	; 255
    399c:	ee 0f       	add	r30, r30
    399e:	ff 1f       	adc	r31, r31
    39a0:	05 90       	lpm	r0, Z+
    39a2:	f4 91       	lpm	r31, Z+
    39a4:	e0 2d       	mov	r30, r0
    39a6:	09 94       	ijmp
    39a8:	60 93 d3 06 	sts	0x06D3, r22
    39ac:	08 95       	ret
    39ae:	60 93 d4 06 	sts	0x06D4, r22
    39b2:	08 95       	ret
    39b4:	60 93 d5 06 	sts	0x06D5, r22
    39b8:	08 95       	ret
    39ba:	60 93 d6 06 	sts	0x06D6, r22
    39be:	08 95       	ret
    39c0:	60 93 d7 06 	sts	0x06D7, r22
    39c4:	08 95       	ret
    39c6:	60 93 d9 06 	sts	0x06D9, r22
    39ca:	08 95       	ret
    39cc:	60 93 d8 06 	sts	0x06D8, r22
    39d0:	08 95       	ret
    39d2:	60 93 da 06 	sts	0x06DA, r22
    39d6:	08 95       	ret
    39d8:	60 93 db 06 	sts	0x06DB, r22
    39dc:	08 95       	ret
    39de:	60 93 dc 06 	sts	0x06DC, r22
    39e2:	08 95       	ret
    39e4:	60 93 dd 06 	sts	0x06DD, r22
    39e8:	08 95       	ret
    39ea:	60 93 de 06 	sts	0x06DE, r22
    39ee:	08 95       	ret
    39f0:	60 93 df 06 	sts	0x06DF, r22
    39f4:	08 95       	ret
    39f6:	60 93 e0 06 	sts	0x06E0, r22
    39fa:	08 95       	ret
    39fc:	60 93 e1 06 	sts	0x06E1, r22
    3a00:	08 95       	ret
    3a02:	60 93 e2 06 	sts	0x06E2, r22
    3a06:	08 95       	ret
    3a08:	60 93 e3 06 	sts	0x06E3, r22
    3a0c:	08 95       	ret
    3a0e:	60 93 e4 06 	sts	0x06E4, r22
    3a12:	08 95       	ret
    3a14:	60 93 e3 06 	sts	0x06E3, r22
    3a18:	08 95       	ret

00003a1a <ATTINY_get_sensors>:
    3a1a:	0f 93       	push	r16
    3a1c:	1f 93       	push	r17
    3a1e:	81 e0       	ldi	r24, 0x01	; 1
    3a20:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    3a24:	81 30       	cpi	r24, 0x01	; 1
    3a26:	11 f0       	breq	.+4      	; 0x3a2c <ATTINY_get_sensors+0x12>
    3a28:	00 e0       	ldi	r16, 0x00	; 0
    3a2a:	24 c0       	rjmp	.+72     	; 0x3a74 <ATTINY_get_sensors+0x5a>
    3a2c:	87 e0       	ldi	r24, 0x07	; 7
    3a2e:	0e 94 36 18 	call	0x306c	; 0x306c <SPI_set_slave_addr>
    3a32:	82 e0       	ldi	r24, 0x02	; 2
    3a34:	6a e0       	ldi	r22, 0x0A	; 10
    3a36:	0e 94 87 18 	call	0x310e	; 0x310e <SPI_transmit>
    3a3a:	82 e0       	ldi	r24, 0x02	; 2
    3a3c:	62 eb       	ldi	r22, 0xB2	; 178
    3a3e:	0e 94 87 18 	call	0x310e	; 0x310e <SPI_transmit>
    3a42:	18 ec       	ldi	r17, 0xC8	; 200
    3a44:	81 2f       	mov	r24, r17
    3a46:	8a 95       	dec	r24
    3a48:	f1 f7       	brne	.-4      	; 0x3a46 <ATTINY_get_sensors+0x2c>
    3a4a:	82 e0       	ldi	r24, 0x02	; 2
    3a4c:	60 e0       	ldi	r22, 0x00	; 0
    3a4e:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <SPI_receive>
    3a52:	08 2f       	mov	r16, r24
    3a54:	81 2f       	mov	r24, r17
    3a56:	8a 95       	dec	r24
    3a58:	f1 f7       	brne	.-4      	; 0x3a56 <ATTINY_get_sensors+0x3c>
    3a5a:	82 e0       	ldi	r24, 0x02	; 2
    3a5c:	60 e0       	ldi	r22, 0x00	; 0
    3a5e:	0e 94 e8 22 	call	0x45d0	; 0x45d0 <SPI_receive>
    3a62:	1a 95       	dec	r17
    3a64:	f1 f7       	brne	.-4      	; 0x3a62 <ATTINY_get_sensors+0x48>
    3a66:	87 e0       	ldi	r24, 0x07	; 7
    3a68:	0e 94 36 18 	call	0x306c	; 0x306c <SPI_set_slave_addr>
    3a6c:	88 e8       	ldi	r24, 0x88	; 136
    3a6e:	93 e1       	ldi	r25, 0x13	; 19
    3a70:	01 97       	sbiw	r24, 0x01	; 1
    3a72:	f1 f7       	brne	.-4      	; 0x3a70 <ATTINY_get_sensors+0x56>
    3a74:	80 2f       	mov	r24, r16
    3a76:	1f 91       	pop	r17
    3a78:	0f 91       	pop	r16
    3a7a:	08 95       	ret

00003a7c <ATTINY_get_SW_state>:
    3a7c:	1f 93       	push	r17
    3a7e:	cf 93       	push	r28
    3a80:	df 93       	push	r29
    3a82:	18 2f       	mov	r17, r24
    3a84:	80 91 01 04 	lds	r24, 0x0401
    3a88:	88 23       	and	r24, r24
    3a8a:	41 f0       	breq	.+16     	; 0x3a9c <ATTINY_get_SW_state+0x20>
    3a8c:	80 91 0b 04 	lds	r24, 0x040B
    3a90:	88 23       	and	r24, r24
    3a92:	99 f0       	breq	.+38     	; 0x3aba <ATTINY_get_SW_state+0x3e>
    3a94:	10 92 01 04 	sts	0x0401, r1
    3a98:	10 92 0b 04 	sts	0x040B, r1
    3a9c:	0e 94 0d 1d 	call	0x3a1a	; 0x3a1a <ATTINY_get_sensors>
    3aa0:	80 93 00 04 	sts	0x0400, r24
    3aa4:	85 e0       	ldi	r24, 0x05	; 5
    3aa6:	94 e0       	ldi	r25, 0x04	; 4
    3aa8:	61 e0       	ldi	r22, 0x01	; 1
    3aaa:	40 e0       	ldi	r20, 0x00	; 0
    3aac:	22 e3       	ldi	r18, 0x32	; 50
    3aae:	30 e0       	ldi	r19, 0x00	; 0
    3ab0:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <TMRSRVC_new>
    3ab4:	81 e0       	ldi	r24, 0x01	; 1
    3ab6:	80 93 01 04 	sts	0x0401, r24
    3aba:	90 91 00 04 	lds	r25, 0x0400
    3abe:	a1 2f       	mov	r26, r17
    3ac0:	b0 e0       	ldi	r27, 0x00	; 0
    3ac2:	ed 01       	movw	r28, r26
    3ac4:	cf 56       	subi	r28, 0x6F	; 111
    3ac6:	dc 4f       	sbci	r29, 0xFC	; 252
    3ac8:	88 81       	ld	r24, Y
    3aca:	88 23       	and	r24, r24
    3acc:	69 f0       	breq	.+26     	; 0x3ae8 <ATTINY_get_SW_state+0x6c>
    3ace:	fd 01       	movw	r30, r26
    3ad0:	ec 56       	subi	r30, 0x6C	; 108
    3ad2:	fc 4f       	sbci	r31, 0xFC	; 252
    3ad4:	80 81       	ld	r24, Z
    3ad6:	98 23       	and	r25, r24
    3ad8:	c1 f0       	breq	.+48     	; 0x3b0a <ATTINY_get_SW_state+0x8e>
    3ada:	fd 01       	movw	r30, r26
    3adc:	ee 5f       	subi	r30, 0xFE	; 254
    3ade:	fb 4f       	sbci	r31, 0xFB	; 251
    3ae0:	81 e0       	ldi	r24, 0x01	; 1
    3ae2:	80 83       	st	Z, r24
    3ae4:	18 82       	st	Y, r1
    3ae6:	11 c0       	rjmp	.+34     	; 0x3b0a <ATTINY_get_SW_state+0x8e>
    3ae8:	fd 01       	movw	r30, r26
    3aea:	ee 5f       	subi	r30, 0xFE	; 254
    3aec:	fb 4f       	sbci	r31, 0xFB	; 251
    3aee:	80 81       	ld	r24, Z
    3af0:	81 11       	cpse	r24, r1
    3af2:	10 82       	st	Z, r1
    3af4:	fd 01       	movw	r30, r26
    3af6:	ec 56       	subi	r30, 0x6C	; 108
    3af8:	fc 4f       	sbci	r31, 0xFC	; 252
    3afa:	80 81       	ld	r24, Z
    3afc:	98 23       	and	r25, r24
    3afe:	29 f4       	brne	.+10     	; 0x3b0a <ATTINY_get_SW_state+0x8e>
    3b00:	fd 01       	movw	r30, r26
    3b02:	ef 56       	subi	r30, 0x6F	; 111
    3b04:	fc 4f       	sbci	r31, 0xFC	; 252
    3b06:	81 e0       	ldi	r24, 0x01	; 1
    3b08:	80 83       	st	Z, r24
    3b0a:	ae 5f       	subi	r26, 0xFE	; 254
    3b0c:	bb 4f       	sbci	r27, 0xFB	; 251
    3b0e:	8c 91       	ld	r24, X
    3b10:	df 91       	pop	r29
    3b12:	cf 91       	pop	r28
    3b14:	1f 91       	pop	r17
    3b16:	08 95       	ret

00003b18 <ATTINY_open>:
    3b18:	82 e0       	ldi	r24, 0x02	; 2
    3b1a:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    3b1e:	88 23       	and	r24, r24
    3b20:	19 f4       	brne	.+6      	; 0x3b28 <ATTINY_open+0x10>
    3b22:	90 e0       	ldi	r25, 0x00	; 0
    3b24:	82 e0       	ldi	r24, 0x02	; 2
    3b26:	08 95       	ret
    3b28:	10 92 01 07 	sts	0x0701, r1
    3b2c:	10 92 00 07 	sts	0x0700, r1
    3b30:	10 92 03 07 	sts	0x0703, r1
    3b34:	10 92 02 07 	sts	0x0702, r1
    3b38:	10 92 05 07 	sts	0x0705, r1
    3b3c:	10 92 04 07 	sts	0x0704, r1
    3b40:	10 92 07 07 	sts	0x0707, r1
    3b44:	10 92 06 07 	sts	0x0706, r1
    3b48:	10 92 09 07 	sts	0x0709, r1
    3b4c:	10 92 08 07 	sts	0x0708, r1
    3b50:	80 e9       	ldi	r24, 0x90	; 144
    3b52:	91 e0       	ldi	r25, 0x01	; 1
    3b54:	90 93 ed 06 	sts	0x06ED, r25
    3b58:	80 93 ec 06 	sts	0x06EC, r24
    3b5c:	90 93 ef 06 	sts	0x06EF, r25
    3b60:	80 93 ee 06 	sts	0x06EE, r24
    3b64:	90 93 f1 06 	sts	0x06F1, r25
    3b68:	80 93 f0 06 	sts	0x06F0, r24
    3b6c:	90 93 f3 06 	sts	0x06F3, r25
    3b70:	80 93 f2 06 	sts	0x06F2, r24
    3b74:	90 93 f5 06 	sts	0x06F5, r25
    3b78:	80 93 f4 06 	sts	0x06F4, r24
    3b7c:	84 e3       	ldi	r24, 0x34	; 52
    3b7e:	98 e0       	ldi	r25, 0x08	; 8
    3b80:	90 93 f7 06 	sts	0x06F7, r25
    3b84:	80 93 f6 06 	sts	0x06F6, r24
    3b88:	90 93 f9 06 	sts	0x06F9, r25
    3b8c:	80 93 f8 06 	sts	0x06F8, r24
    3b90:	90 93 fb 06 	sts	0x06FB, r25
    3b94:	80 93 fa 06 	sts	0x06FA, r24
    3b98:	90 93 fd 06 	sts	0x06FD, r25
    3b9c:	80 93 fc 06 	sts	0x06FC, r24
    3ba0:	90 93 ff 06 	sts	0x06FF, r25
    3ba4:	80 93 fe 06 	sts	0x06FE, r24
    3ba8:	81 e0       	ldi	r24, 0x01	; 1
    3baa:	61 e0       	ldi	r22, 0x01	; 1
    3bac:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    3bb0:	91 e0       	ldi	r25, 0x01	; 1
    3bb2:	81 e0       	ldi	r24, 0x01	; 1
    3bb4:	08 95       	ret

00003bb6 <TMRSRVC_delay>:
    3bb6:	df 93       	push	r29
    3bb8:	cf 93       	push	r28
    3bba:	cd b7       	in	r28, 0x3d	; 61
    3bbc:	de b7       	in	r29, 0x3e	; 62
    3bbe:	29 97       	sbiw	r28, 0x09	; 9
    3bc0:	0f b6       	in	r0, 0x3f	; 63
    3bc2:	f8 94       	cli
    3bc4:	de bf       	out	0x3e, r29	; 62
    3bc6:	0f be       	out	0x3f, r0	; 63
    3bc8:	cd bf       	out	0x3d, r28	; 61
    3bca:	9c 01       	movw	r18, r24
    3bcc:	ce 01       	movw	r24, r28
    3bce:	01 96       	adiw	r24, 0x01	; 1
    3bd0:	61 e0       	ldi	r22, 0x01	; 1
    3bd2:	40 e0       	ldi	r20, 0x00	; 0
    3bd4:	0e 94 fc 1d 	call	0x3bf8	; 0x3bf8 <TMRSRVC_new>
    3bd8:	98 2f       	mov	r25, r24
    3bda:	88 23       	and	r24, r24
    3bdc:	19 f4       	brne	.+6      	; 0x3be4 <TMRSRVC_delay+0x2e>
    3bde:	8f 81       	ldd	r24, Y+7	; 0x07
    3be0:	88 23       	and	r24, r24
    3be2:	e9 f3       	breq	.-6      	; 0x3bde <TMRSRVC_delay+0x28>
    3be4:	89 2f       	mov	r24, r25
    3be6:	29 96       	adiw	r28, 0x09	; 9
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	cf 91       	pop	r28
    3bf4:	df 91       	pop	r29
    3bf6:	08 95       	ret

00003bf8 <TMRSRVC_new>:
    3bf8:	ef 92       	push	r14
    3bfa:	ff 92       	push	r15
    3bfc:	0f 93       	push	r16
    3bfe:	1f 93       	push	r17
    3c00:	cf 93       	push	r28
    3c02:	df 93       	push	r29
    3c04:	ec 01       	movw	r28, r24
    3c06:	f6 2e       	mov	r15, r22
    3c08:	e4 2e       	mov	r14, r20
    3c0a:	89 01       	movw	r16, r18
    3c0c:	88 e0       	ldi	r24, 0x08	; 8
    3c0e:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    3c12:	81 30       	cpi	r24, 0x01	; 1
    3c14:	11 f0       	breq	.+4      	; 0x3c1a <TMRSRVC_new+0x22>
    3c16:	81 e0       	ldi	r24, 0x01	; 1
    3c18:	26 c0       	rjmp	.+76     	; 0x3c66 <TMRSRVC_new+0x6e>
    3c1a:	84 e0       	ldi	r24, 0x04	; 4
    3c1c:	90 e0       	ldi	r25, 0x00	; 0
    3c1e:	0e 94 93 31 	call	0x6326	; 0x6326 <malloc>
    3c22:	fc 01       	movw	r30, r24
    3c24:	00 97       	sbiw	r24, 0x00	; 0
    3c26:	11 f4       	brne	.+4      	; 0x3c2c <TMRSRVC_new+0x34>
    3c28:	82 e0       	ldi	r24, 0x02	; 2
    3c2a:	1d c0       	rjmp	.+58     	; 0x3c66 <TMRSRVC_new+0x6e>
    3c2c:	f9 82       	std	Y+1, r15	; 0x01
    3c2e:	f0 fc       	sbrc	r15, 0
    3c30:	1e 82       	std	Y+6, r1	; 0x06
    3c32:	81 e0       	ldi	r24, 0x01	; 1
    3c34:	e8 16       	cp	r14, r24
    3c36:	19 f4       	brne	.+6      	; 0x3c3e <TMRSRVC_new+0x46>
    3c38:	89 81       	ldd	r24, Y+1	; 0x01
    3c3a:	84 60       	ori	r24, 0x04	; 4
    3c3c:	89 83       	std	Y+1, r24	; 0x01
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	88 60       	ori	r24, 0x08	; 8
    3c42:	89 83       	std	Y+1, r24	; 0x01
    3c44:	1b 83       	std	Y+3, r17	; 0x03
    3c46:	0a 83       	std	Y+2, r16	; 0x02
    3c48:	1d 83       	std	Y+5, r17	; 0x05
    3c4a:	0c 83       	std	Y+4, r16	; 0x04
    3c4c:	d1 83       	std	Z+1, r29	; 0x01
    3c4e:	c0 83       	st	Z, r28
    3c50:	13 82       	std	Z+3, r1	; 0x03
    3c52:	12 82       	std	Z+2, r1	; 0x02
    3c54:	81 e0       	ldi	r24, 0x01	; 1
    3c56:	80 93 6e 04 	sts	0x046E, r24
    3c5a:	cf 01       	movw	r24, r30
    3c5c:	0e 94 ac 24 	call	0x4958	; 0x4958 <TMRSRVC_insert>
    3c60:	10 92 6e 04 	sts	0x046E, r1
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	df 91       	pop	r29
    3c68:	cf 91       	pop	r28
    3c6a:	1f 91       	pop	r17
    3c6c:	0f 91       	pop	r16
    3c6e:	ff 90       	pop	r15
    3c70:	ef 90       	pop	r14
    3c72:	08 95       	ret

00003c74 <I2C_MSTR_get>:
    3c74:	fc 01       	movw	r30, r24
    3c76:	80 91 0d 07 	lds	r24, 0x070D
    3c7a:	81 30       	cpi	r24, 0x01	; 1
    3c7c:	11 f0       	breq	.+4      	; 0x3c82 <I2C_MSTR_get+0xe>
    3c7e:	85 e0       	ldi	r24, 0x05	; 5
    3c80:	08 95       	ret
    3c82:	80 91 0e 07 	lds	r24, 0x070E
    3c86:	81 30       	cpi	r24, 0x01	; 1
    3c88:	11 f0       	breq	.+4      	; 0x3c8e <I2C_MSTR_get+0x1a>
    3c8a:	8a e0       	ldi	r24, 0x0A	; 10
    3c8c:	08 95       	ret
    3c8e:	61 30       	cpi	r22, 0x01	; 1
    3c90:	11 f4       	brne	.+4      	; 0x3c96 <I2C_MSTR_get+0x22>
    3c92:	84 ec       	ldi	r24, 0xC4	; 196
    3c94:	01 c0       	rjmp	.+2      	; 0x3c98 <I2C_MSTR_get+0x24>
    3c96:	84 e8       	ldi	r24, 0x84	; 132
    3c98:	80 93 bc 00 	sts	0x00BC, r24
    3c9c:	80 91 bc 00 	lds	r24, 0x00BC
    3ca0:	87 ff       	sbrs	r24, 7
    3ca2:	fc cf       	rjmp	.-8      	; 0x3c9c <I2C_MSTR_get+0x28>
    3ca4:	61 30       	cpi	r22, 0x01	; 1
    3ca6:	31 f4       	brne	.+12     	; 0x3cb4 <I2C_MSTR_get+0x40>
    3ca8:	80 91 b9 00 	lds	r24, 0x00B9
    3cac:	88 7f       	andi	r24, 0xF8	; 248
    3cae:	80 35       	cpi	r24, 0x50	; 80
    3cb0:	59 f4       	brne	.+22     	; 0x3cc8 <I2C_MSTR_get+0x54>
    3cb2:	05 c0       	rjmp	.+10     	; 0x3cbe <I2C_MSTR_get+0x4a>
    3cb4:	80 91 b9 00 	lds	r24, 0x00B9
    3cb8:	88 7f       	andi	r24, 0xF8	; 248
    3cba:	88 35       	cpi	r24, 0x58	; 88
    3cbc:	29 f4       	brne	.+10     	; 0x3cc8 <I2C_MSTR_get+0x54>
    3cbe:	80 91 bb 00 	lds	r24, 0x00BB
    3cc2:	80 83       	st	Z, r24
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	08 95       	ret
    3cc8:	82 e0       	ldi	r24, 0x02	; 2
    3cca:	08 95       	ret

00003ccc <I2C_MSTR_send>:
    3ccc:	98 2f       	mov	r25, r24
    3cce:	80 91 0d 07 	lds	r24, 0x070D
    3cd2:	81 30       	cpi	r24, 0x01	; 1
    3cd4:	11 f0       	breq	.+4      	; 0x3cda <I2C_MSTR_send+0xe>
    3cd6:	85 e0       	ldi	r24, 0x05	; 5
    3cd8:	08 95       	ret
    3cda:	80 91 0e 07 	lds	r24, 0x070E
    3cde:	81 30       	cpi	r24, 0x01	; 1
    3ce0:	11 f0       	breq	.+4      	; 0x3ce6 <I2C_MSTR_send+0x1a>
    3ce2:	8a e0       	ldi	r24, 0x0A	; 10
    3ce4:	08 95       	ret
    3ce6:	90 93 bb 00 	sts	0x00BB, r25
    3cea:	84 e8       	ldi	r24, 0x84	; 132
    3cec:	80 93 bc 00 	sts	0x00BC, r24
    3cf0:	80 91 bc 00 	lds	r24, 0x00BC
    3cf4:	87 ff       	sbrs	r24, 7
    3cf6:	fc cf       	rjmp	.-8      	; 0x3cf0 <I2C_MSTR_send+0x24>
    3cf8:	80 91 b9 00 	lds	r24, 0x00B9
    3cfc:	90 e0       	ldi	r25, 0x00	; 0
    3cfe:	88 7f       	andi	r24, 0xF8	; 248
    3d00:	90 70       	andi	r25, 0x00	; 0
    3d02:	88 32       	cpi	r24, 0x28	; 40
    3d04:	91 05       	cpc	r25, r1
    3d06:	21 f0       	breq	.+8      	; 0x3d10 <I2C_MSTR_send+0x44>
    3d08:	c0 97       	sbiw	r24, 0x30	; 48
    3d0a:	21 f4       	brne	.+8      	; 0x3d14 <I2C_MSTR_send+0x48>
    3d0c:	83 e0       	ldi	r24, 0x03	; 3
    3d0e:	08 95       	ret
    3d10:	80 e0       	ldi	r24, 0x00	; 0
    3d12:	08 95       	ret
    3d14:	8c e0       	ldi	r24, 0x0C	; 12
    3d16:	08 95       	ret

00003d18 <I2C_MSTR_start>:
    3d18:	98 2f       	mov	r25, r24
    3d1a:	20 91 0d 07 	lds	r18, 0x070D
    3d1e:	21 30       	cpi	r18, 0x01	; 1
    3d20:	11 f0       	breq	.+4      	; 0x3d26 <I2C_MSTR_start+0xe>
    3d22:	85 e0       	ldi	r24, 0x05	; 5
    3d24:	08 95       	ret
    3d26:	80 91 0f 07 	lds	r24, 0x070F
    3d2a:	81 30       	cpi	r24, 0x01	; 1
    3d2c:	11 f4       	brne	.+4      	; 0x3d32 <I2C_MSTR_start+0x1a>
    3d2e:	89 e0       	ldi	r24, 0x09	; 9
    3d30:	08 95       	ret
    3d32:	20 93 0e 07 	sts	0x070E, r18
    3d36:	84 ea       	ldi	r24, 0xA4	; 164
    3d38:	80 93 bc 00 	sts	0x00BC, r24
    3d3c:	80 91 bc 00 	lds	r24, 0x00BC
    3d40:	87 ff       	sbrs	r24, 7
    3d42:	fc cf       	rjmp	.-8      	; 0x3d3c <I2C_MSTR_start+0x24>
    3d44:	80 91 b9 00 	lds	r24, 0x00B9
    3d48:	88 7f       	andi	r24, 0xF8	; 248
    3d4a:	88 30       	cpi	r24, 0x08	; 8
    3d4c:	39 f0       	breq	.+14     	; 0x3d5c <I2C_MSTR_start+0x44>
    3d4e:	80 91 b9 00 	lds	r24, 0x00B9
    3d52:	88 7f       	andi	r24, 0xF8	; 248
    3d54:	80 31       	cpi	r24, 0x10	; 16
    3d56:	11 f0       	breq	.+4      	; 0x3d5c <I2C_MSTR_start+0x44>
    3d58:	81 e0       	ldi	r24, 0x01	; 1
    3d5a:	08 95       	ret
    3d5c:	61 30       	cpi	r22, 0x01	; 1
    3d5e:	19 f4       	brne	.+6      	; 0x3d66 <I2C_MSTR_start+0x4e>
    3d60:	99 0f       	add	r25, r25
    3d62:	91 60       	ori	r25, 0x01	; 1
    3d64:	03 c0       	rjmp	.+6      	; 0x3d6c <I2C_MSTR_start+0x54>
    3d66:	66 23       	and	r22, r22
    3d68:	19 f4       	brne	.+6      	; 0x3d70 <I2C_MSTR_start+0x58>
    3d6a:	99 0f       	add	r25, r25
    3d6c:	90 93 bb 00 	sts	0x00BB, r25
    3d70:	84 e8       	ldi	r24, 0x84	; 132
    3d72:	80 93 bc 00 	sts	0x00BC, r24
    3d76:	80 91 bc 00 	lds	r24, 0x00BC
    3d7a:	87 ff       	sbrs	r24, 7
    3d7c:	fc cf       	rjmp	.-8      	; 0x3d76 <I2C_MSTR_start+0x5e>
    3d7e:	61 30       	cpi	r22, 0x01	; 1
    3d80:	31 f4       	brne	.+12     	; 0x3d8e <I2C_MSTR_start+0x76>
    3d82:	80 91 b9 00 	lds	r24, 0x00B9
    3d86:	88 7f       	andi	r24, 0xF8	; 248
    3d88:	80 34       	cpi	r24, 0x40	; 64
    3d8a:	41 f4       	brne	.+16     	; 0x3d9c <I2C_MSTR_start+0x84>
    3d8c:	09 c0       	rjmp	.+18     	; 0x3da0 <I2C_MSTR_start+0x88>
    3d8e:	66 23       	and	r22, r22
    3d90:	39 f4       	brne	.+14     	; 0x3da0 <I2C_MSTR_start+0x88>
    3d92:	80 91 b9 00 	lds	r24, 0x00B9
    3d96:	88 7f       	andi	r24, 0xF8	; 248
    3d98:	88 31       	cpi	r24, 0x18	; 24
    3d9a:	11 f0       	breq	.+4      	; 0x3da0 <I2C_MSTR_start+0x88>
    3d9c:	82 e0       	ldi	r24, 0x02	; 2
    3d9e:	08 95       	ret
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	08 95       	ret

00003da4 <I2C_MSTR_stop>:
    3da4:	80 91 0e 07 	lds	r24, 0x070E
    3da8:	81 30       	cpi	r24, 0x01	; 1
    3daa:	11 f0       	breq	.+4      	; 0x3db0 <I2C_MSTR_stop+0xc>
    3dac:	8a e0       	ldi	r24, 0x0A	; 10
    3dae:	08 95       	ret
    3db0:	80 91 10 07 	lds	r24, 0x0710
    3db4:	81 30       	cpi	r24, 0x01	; 1
    3db6:	29 f4       	brne	.+10     	; 0x3dc2 <I2C_MSTR_stop+0x1e>
    3db8:	85 e9       	ldi	r24, 0x95	; 149
    3dba:	80 93 bc 00 	sts	0x00BC, r24
    3dbe:	80 e0       	ldi	r24, 0x00	; 0
    3dc0:	08 95       	ret
    3dc2:	84 e9       	ldi	r24, 0x94	; 148
    3dc4:	80 93 bc 00 	sts	0x00BC, r24
    3dc8:	80 e0       	ldi	r24, 0x00	; 0
    3dca:	08 95       	ret

00003dcc <I2C_open>:
    3dcc:	82 e1       	ldi	r24, 0x12	; 18
    3dce:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    3dd2:	88 23       	and	r24, r24
    3dd4:	b1 f4       	brne	.+44     	; 0x3e02 <I2C_open+0x36>
    3dd6:	10 92 0d 07 	sts	0x070D, r1
    3dda:	10 92 0e 07 	sts	0x070E, r1
    3dde:	10 92 0f 07 	sts	0x070F, r1
    3de2:	10 92 10 07 	sts	0x0710, r1
    3de6:	10 92 11 07 	sts	0x0711, r1
    3dea:	0e 94 48 25 	call	0x4a90	; 0x4a90 <__I2C_init>
    3dee:	87 e1       	ldi	r24, 0x17	; 23
    3df0:	60 e0       	ldi	r22, 0x00	; 0
    3df2:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <I2C_set_BRG>
    3df6:	0e 94 3e 25 	call	0x4a7c	; 0x4a7c <I2C_enable>
    3dfa:	82 e1       	ldi	r24, 0x12	; 18
    3dfc:	61 e0       	ldi	r22, 0x01	; 1
    3dfe:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    3e02:	82 e1       	ldi	r24, 0x12	; 18
    3e04:	90 e0       	ldi	r25, 0x00	; 0
    3e06:	08 95       	ret

00003e08 <I2C_set_BRG>:
    3e08:	63 70       	andi	r22, 0x03	; 3
    3e0a:	60 93 b9 00 	sts	0x00B9, r22
    3e0e:	80 93 b8 00 	sts	0x00B8, r24
    3e12:	81 e0       	ldi	r24, 0x01	; 1
    3e14:	80 93 0d 07 	sts	0x070D, r24
    3e18:	08 95       	ret

00003e1a <__ADC_init>:
    3e1a:	8f e1       	ldi	r24, 0x1F	; 31
    3e1c:	80 93 7c 00 	sts	0x007C, r24
    3e20:	ea e7       	ldi	r30, 0x7A	; 122
    3e22:	f0 e0       	ldi	r31, 0x00	; 0
    3e24:	87 e0       	ldi	r24, 0x07	; 7
    3e26:	80 83       	st	Z, r24
    3e28:	80 81       	ld	r24, Z
    3e2a:	80 68       	ori	r24, 0x80	; 128
    3e2c:	80 83       	st	Z, r24
    3e2e:	08 95       	ret

00003e30 <CBOT_init>:
    3e30:	0e 94 89 24 	call	0x4912	; 0x4912 <SYS_init>
    3e34:	0e 94 4a 22 	call	0x4494	; 0x4494 <ATMEGA_open>
    3e38:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <ISR_open>
    3e3c:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <TMRSRVC_open>
    3e40:	0e 94 af 22 	call	0x455e	; 0x455e <SPI_open>
    3e44:	0e 94 8c 1d 	call	0x3b18	; 0x3b18 <ATTINY_open>
    3e48:	78 94       	sei
    3e4a:	08 95       	ret

00003e4c <CBOT_ISR_init>:
    3e4c:	00 00       	nop
    3e4e:	08 95       	ret

00003e50 <__vector_16>:
    3e50:	1f 92       	push	r1
    3e52:	0f 92       	push	r0
    3e54:	0f b6       	in	r0, 0x3f	; 63
    3e56:	0f 92       	push	r0
    3e58:	11 24       	eor	r1, r1
    3e5a:	2f 93       	push	r18
    3e5c:	3f 93       	push	r19
    3e5e:	4f 93       	push	r20
    3e60:	5f 93       	push	r21
    3e62:	6f 93       	push	r22
    3e64:	7f 93       	push	r23
    3e66:	8f 93       	push	r24
    3e68:	9f 93       	push	r25
    3e6a:	af 93       	push	r26
    3e6c:	bf 93       	push	r27
    3e6e:	ef 93       	push	r30
    3e70:	ff 93       	push	r31
    3e72:	e0 91 2e 04 	lds	r30, 0x042E
    3e76:	f0 91 2f 04 	lds	r31, 0x042F
    3e7a:	30 97       	sbiw	r30, 0x00	; 0
    3e7c:	09 f0       	breq	.+2      	; 0x3e80 <__vector_16+0x30>
    3e7e:	09 95       	icall
    3e80:	ff 91       	pop	r31
    3e82:	ef 91       	pop	r30
    3e84:	bf 91       	pop	r27
    3e86:	af 91       	pop	r26
    3e88:	9f 91       	pop	r25
    3e8a:	8f 91       	pop	r24
    3e8c:	7f 91       	pop	r23
    3e8e:	6f 91       	pop	r22
    3e90:	5f 91       	pop	r21
    3e92:	4f 91       	pop	r20
    3e94:	3f 91       	pop	r19
    3e96:	2f 91       	pop	r18
    3e98:	0f 90       	pop	r0
    3e9a:	0f be       	out	0x3f, r0	; 63
    3e9c:	0f 90       	pop	r0
    3e9e:	1f 90       	pop	r1
    3ea0:	18 95       	reti

00003ea2 <__vector_17>:
    3ea2:	1f 92       	push	r1
    3ea4:	0f 92       	push	r0
    3ea6:	0f b6       	in	r0, 0x3f	; 63
    3ea8:	0f 92       	push	r0
    3eaa:	11 24       	eor	r1, r1
    3eac:	2f 93       	push	r18
    3eae:	3f 93       	push	r19
    3eb0:	4f 93       	push	r20
    3eb2:	5f 93       	push	r21
    3eb4:	6f 93       	push	r22
    3eb6:	7f 93       	push	r23
    3eb8:	8f 93       	push	r24
    3eba:	9f 93       	push	r25
    3ebc:	af 93       	push	r26
    3ebe:	bf 93       	push	r27
    3ec0:	ef 93       	push	r30
    3ec2:	ff 93       	push	r31
    3ec4:	e0 91 30 04 	lds	r30, 0x0430
    3ec8:	f0 91 31 04 	lds	r31, 0x0431
    3ecc:	30 97       	sbiw	r30, 0x00	; 0
    3ece:	09 f0       	breq	.+2      	; 0x3ed2 <__vector_17+0x30>
    3ed0:	09 95       	icall
    3ed2:	ff 91       	pop	r31
    3ed4:	ef 91       	pop	r30
    3ed6:	bf 91       	pop	r27
    3ed8:	af 91       	pop	r26
    3eda:	9f 91       	pop	r25
    3edc:	8f 91       	pop	r24
    3ede:	7f 91       	pop	r23
    3ee0:	6f 91       	pop	r22
    3ee2:	5f 91       	pop	r21
    3ee4:	4f 91       	pop	r20
    3ee6:	3f 91       	pop	r19
    3ee8:	2f 91       	pop	r18
    3eea:	0f 90       	pop	r0
    3eec:	0f be       	out	0x3f, r0	; 63
    3eee:	0f 90       	pop	r0
    3ef0:	1f 90       	pop	r1
    3ef2:	18 95       	reti

00003ef4 <__vector_18>:
    3ef4:	1f 92       	push	r1
    3ef6:	0f 92       	push	r0
    3ef8:	0f b6       	in	r0, 0x3f	; 63
    3efa:	0f 92       	push	r0
    3efc:	11 24       	eor	r1, r1
    3efe:	2f 93       	push	r18
    3f00:	3f 93       	push	r19
    3f02:	4f 93       	push	r20
    3f04:	5f 93       	push	r21
    3f06:	6f 93       	push	r22
    3f08:	7f 93       	push	r23
    3f0a:	8f 93       	push	r24
    3f0c:	9f 93       	push	r25
    3f0e:	af 93       	push	r26
    3f10:	bf 93       	push	r27
    3f12:	ef 93       	push	r30
    3f14:	ff 93       	push	r31
    3f16:	e0 91 32 04 	lds	r30, 0x0432
    3f1a:	f0 91 33 04 	lds	r31, 0x0433
    3f1e:	30 97       	sbiw	r30, 0x00	; 0
    3f20:	09 f0       	breq	.+2      	; 0x3f24 <__vector_18+0x30>
    3f22:	09 95       	icall
    3f24:	ff 91       	pop	r31
    3f26:	ef 91       	pop	r30
    3f28:	bf 91       	pop	r27
    3f2a:	af 91       	pop	r26
    3f2c:	9f 91       	pop	r25
    3f2e:	8f 91       	pop	r24
    3f30:	7f 91       	pop	r23
    3f32:	6f 91       	pop	r22
    3f34:	5f 91       	pop	r21
    3f36:	4f 91       	pop	r20
    3f38:	3f 91       	pop	r19
    3f3a:	2f 91       	pop	r18
    3f3c:	0f 90       	pop	r0
    3f3e:	0f be       	out	0x3f, r0	; 63
    3f40:	0f 90       	pop	r0
    3f42:	1f 90       	pop	r1
    3f44:	18 95       	reti

00003f46 <__vector_9>:
    3f46:	1f 92       	push	r1
    3f48:	0f 92       	push	r0
    3f4a:	0f b6       	in	r0, 0x3f	; 63
    3f4c:	0f 92       	push	r0
    3f4e:	11 24       	eor	r1, r1
    3f50:	2f 93       	push	r18
    3f52:	3f 93       	push	r19
    3f54:	4f 93       	push	r20
    3f56:	5f 93       	push	r21
    3f58:	6f 93       	push	r22
    3f5a:	7f 93       	push	r23
    3f5c:	8f 93       	push	r24
    3f5e:	9f 93       	push	r25
    3f60:	af 93       	push	r26
    3f62:	bf 93       	push	r27
    3f64:	ef 93       	push	r30
    3f66:	ff 93       	push	r31
    3f68:	e0 91 20 04 	lds	r30, 0x0420
    3f6c:	f0 91 21 04 	lds	r31, 0x0421
    3f70:	30 97       	sbiw	r30, 0x00	; 0
    3f72:	09 f0       	breq	.+2      	; 0x3f76 <__vector_9+0x30>
    3f74:	09 95       	icall
    3f76:	ff 91       	pop	r31
    3f78:	ef 91       	pop	r30
    3f7a:	bf 91       	pop	r27
    3f7c:	af 91       	pop	r26
    3f7e:	9f 91       	pop	r25
    3f80:	8f 91       	pop	r24
    3f82:	7f 91       	pop	r23
    3f84:	6f 91       	pop	r22
    3f86:	5f 91       	pop	r21
    3f88:	4f 91       	pop	r20
    3f8a:	3f 91       	pop	r19
    3f8c:	2f 91       	pop	r18
    3f8e:	0f 90       	pop	r0
    3f90:	0f be       	out	0x3f, r0	; 63
    3f92:	0f 90       	pop	r0
    3f94:	1f 90       	pop	r1
    3f96:	18 95       	reti

00003f98 <__vector_10>:
    3f98:	1f 92       	push	r1
    3f9a:	0f 92       	push	r0
    3f9c:	0f b6       	in	r0, 0x3f	; 63
    3f9e:	0f 92       	push	r0
    3fa0:	11 24       	eor	r1, r1
    3fa2:	2f 93       	push	r18
    3fa4:	3f 93       	push	r19
    3fa6:	4f 93       	push	r20
    3fa8:	5f 93       	push	r21
    3faa:	6f 93       	push	r22
    3fac:	7f 93       	push	r23
    3fae:	8f 93       	push	r24
    3fb0:	9f 93       	push	r25
    3fb2:	af 93       	push	r26
    3fb4:	bf 93       	push	r27
    3fb6:	ef 93       	push	r30
    3fb8:	ff 93       	push	r31
    3fba:	e0 91 22 04 	lds	r30, 0x0422
    3fbe:	f0 91 23 04 	lds	r31, 0x0423
    3fc2:	30 97       	sbiw	r30, 0x00	; 0
    3fc4:	09 f0       	breq	.+2      	; 0x3fc8 <__vector_10+0x30>
    3fc6:	09 95       	icall
    3fc8:	ff 91       	pop	r31
    3fca:	ef 91       	pop	r30
    3fcc:	bf 91       	pop	r27
    3fce:	af 91       	pop	r26
    3fd0:	9f 91       	pop	r25
    3fd2:	8f 91       	pop	r24
    3fd4:	7f 91       	pop	r23
    3fd6:	6f 91       	pop	r22
    3fd8:	5f 91       	pop	r21
    3fda:	4f 91       	pop	r20
    3fdc:	3f 91       	pop	r19
    3fde:	2f 91       	pop	r18
    3fe0:	0f 90       	pop	r0
    3fe2:	0f be       	out	0x3f, r0	; 63
    3fe4:	0f 90       	pop	r0
    3fe6:	1f 90       	pop	r1
    3fe8:	18 95       	reti

00003fea <__vector_11>:
    3fea:	1f 92       	push	r1
    3fec:	0f 92       	push	r0
    3fee:	0f b6       	in	r0, 0x3f	; 63
    3ff0:	0f 92       	push	r0
    3ff2:	11 24       	eor	r1, r1
    3ff4:	2f 93       	push	r18
    3ff6:	3f 93       	push	r19
    3ff8:	4f 93       	push	r20
    3ffa:	5f 93       	push	r21
    3ffc:	6f 93       	push	r22
    3ffe:	7f 93       	push	r23
    4000:	8f 93       	push	r24
    4002:	9f 93       	push	r25
    4004:	af 93       	push	r26
    4006:	bf 93       	push	r27
    4008:	ef 93       	push	r30
    400a:	ff 93       	push	r31
    400c:	e0 91 24 04 	lds	r30, 0x0424
    4010:	f0 91 25 04 	lds	r31, 0x0425
    4014:	30 97       	sbiw	r30, 0x00	; 0
    4016:	09 f0       	breq	.+2      	; 0x401a <__vector_11+0x30>
    4018:	09 95       	icall
    401a:	ff 91       	pop	r31
    401c:	ef 91       	pop	r30
    401e:	bf 91       	pop	r27
    4020:	af 91       	pop	r26
    4022:	9f 91       	pop	r25
    4024:	8f 91       	pop	r24
    4026:	7f 91       	pop	r23
    4028:	6f 91       	pop	r22
    402a:	5f 91       	pop	r21
    402c:	4f 91       	pop	r20
    402e:	3f 91       	pop	r19
    4030:	2f 91       	pop	r18
    4032:	0f 90       	pop	r0
    4034:	0f be       	out	0x3f, r0	; 63
    4036:	0f 90       	pop	r0
    4038:	1f 90       	pop	r1
    403a:	18 95       	reti

0000403c <__vector_13>:
    403c:	1f 92       	push	r1
    403e:	0f 92       	push	r0
    4040:	0f b6       	in	r0, 0x3f	; 63
    4042:	0f 92       	push	r0
    4044:	11 24       	eor	r1, r1
    4046:	2f 93       	push	r18
    4048:	3f 93       	push	r19
    404a:	4f 93       	push	r20
    404c:	5f 93       	push	r21
    404e:	6f 93       	push	r22
    4050:	7f 93       	push	r23
    4052:	8f 93       	push	r24
    4054:	9f 93       	push	r25
    4056:	af 93       	push	r26
    4058:	bf 93       	push	r27
    405a:	ef 93       	push	r30
    405c:	ff 93       	push	r31
    405e:	e0 91 28 04 	lds	r30, 0x0428
    4062:	f0 91 29 04 	lds	r31, 0x0429
    4066:	30 97       	sbiw	r30, 0x00	; 0
    4068:	09 f0       	breq	.+2      	; 0x406c <__vector_13+0x30>
    406a:	09 95       	icall
    406c:	ff 91       	pop	r31
    406e:	ef 91       	pop	r30
    4070:	bf 91       	pop	r27
    4072:	af 91       	pop	r26
    4074:	9f 91       	pop	r25
    4076:	8f 91       	pop	r24
    4078:	7f 91       	pop	r23
    407a:	6f 91       	pop	r22
    407c:	5f 91       	pop	r21
    407e:	4f 91       	pop	r20
    4080:	3f 91       	pop	r19
    4082:	2f 91       	pop	r18
    4084:	0f 90       	pop	r0
    4086:	0f be       	out	0x3f, r0	; 63
    4088:	0f 90       	pop	r0
    408a:	1f 90       	pop	r1
    408c:	18 95       	reti

0000408e <__vector_14>:
    408e:	1f 92       	push	r1
    4090:	0f 92       	push	r0
    4092:	0f b6       	in	r0, 0x3f	; 63
    4094:	0f 92       	push	r0
    4096:	11 24       	eor	r1, r1
    4098:	2f 93       	push	r18
    409a:	3f 93       	push	r19
    409c:	4f 93       	push	r20
    409e:	5f 93       	push	r21
    40a0:	6f 93       	push	r22
    40a2:	7f 93       	push	r23
    40a4:	8f 93       	push	r24
    40a6:	9f 93       	push	r25
    40a8:	af 93       	push	r26
    40aa:	bf 93       	push	r27
    40ac:	ef 93       	push	r30
    40ae:	ff 93       	push	r31
    40b0:	e0 91 2a 04 	lds	r30, 0x042A
    40b4:	f0 91 2b 04 	lds	r31, 0x042B
    40b8:	30 97       	sbiw	r30, 0x00	; 0
    40ba:	09 f0       	breq	.+2      	; 0x40be <__vector_14+0x30>
    40bc:	09 95       	icall
    40be:	ff 91       	pop	r31
    40c0:	ef 91       	pop	r30
    40c2:	bf 91       	pop	r27
    40c4:	af 91       	pop	r26
    40c6:	9f 91       	pop	r25
    40c8:	8f 91       	pop	r24
    40ca:	7f 91       	pop	r23
    40cc:	6f 91       	pop	r22
    40ce:	5f 91       	pop	r21
    40d0:	4f 91       	pop	r20
    40d2:	3f 91       	pop	r19
    40d4:	2f 91       	pop	r18
    40d6:	0f 90       	pop	r0
    40d8:	0f be       	out	0x3f, r0	; 63
    40da:	0f 90       	pop	r0
    40dc:	1f 90       	pop	r1
    40de:	18 95       	reti

000040e0 <__vector_12>:
    40e0:	1f 92       	push	r1
    40e2:	0f 92       	push	r0
    40e4:	0f b6       	in	r0, 0x3f	; 63
    40e6:	0f 92       	push	r0
    40e8:	11 24       	eor	r1, r1
    40ea:	2f 93       	push	r18
    40ec:	3f 93       	push	r19
    40ee:	4f 93       	push	r20
    40f0:	5f 93       	push	r21
    40f2:	6f 93       	push	r22
    40f4:	7f 93       	push	r23
    40f6:	8f 93       	push	r24
    40f8:	9f 93       	push	r25
    40fa:	af 93       	push	r26
    40fc:	bf 93       	push	r27
    40fe:	ef 93       	push	r30
    4100:	ff 93       	push	r31
    4102:	e0 91 26 04 	lds	r30, 0x0426
    4106:	f0 91 27 04 	lds	r31, 0x0427
    410a:	30 97       	sbiw	r30, 0x00	; 0
    410c:	09 f0       	breq	.+2      	; 0x4110 <__vector_12+0x30>
    410e:	09 95       	icall
    4110:	ff 91       	pop	r31
    4112:	ef 91       	pop	r30
    4114:	bf 91       	pop	r27
    4116:	af 91       	pop	r26
    4118:	9f 91       	pop	r25
    411a:	8f 91       	pop	r24
    411c:	7f 91       	pop	r23
    411e:	6f 91       	pop	r22
    4120:	5f 91       	pop	r21
    4122:	4f 91       	pop	r20
    4124:	3f 91       	pop	r19
    4126:	2f 91       	pop	r18
    4128:	0f 90       	pop	r0
    412a:	0f be       	out	0x3f, r0	; 63
    412c:	0f 90       	pop	r0
    412e:	1f 90       	pop	r1
    4130:	18 95       	reti

00004132 <__vector_15>:
    4132:	1f 92       	push	r1
    4134:	0f 92       	push	r0
    4136:	0f b6       	in	r0, 0x3f	; 63
    4138:	0f 92       	push	r0
    413a:	11 24       	eor	r1, r1
    413c:	2f 93       	push	r18
    413e:	3f 93       	push	r19
    4140:	4f 93       	push	r20
    4142:	5f 93       	push	r21
    4144:	6f 93       	push	r22
    4146:	7f 93       	push	r23
    4148:	8f 93       	push	r24
    414a:	9f 93       	push	r25
    414c:	af 93       	push	r26
    414e:	bf 93       	push	r27
    4150:	ef 93       	push	r30
    4152:	ff 93       	push	r31
    4154:	e0 91 2c 04 	lds	r30, 0x042C
    4158:	f0 91 2d 04 	lds	r31, 0x042D
    415c:	30 97       	sbiw	r30, 0x00	; 0
    415e:	09 f0       	breq	.+2      	; 0x4162 <__vector_15+0x30>
    4160:	09 95       	icall
    4162:	ff 91       	pop	r31
    4164:	ef 91       	pop	r30
    4166:	bf 91       	pop	r27
    4168:	af 91       	pop	r26
    416a:	9f 91       	pop	r25
    416c:	8f 91       	pop	r24
    416e:	7f 91       	pop	r23
    4170:	6f 91       	pop	r22
    4172:	5f 91       	pop	r21
    4174:	4f 91       	pop	r20
    4176:	3f 91       	pop	r19
    4178:	2f 91       	pop	r18
    417a:	0f 90       	pop	r0
    417c:	0f be       	out	0x3f, r0	; 63
    417e:	0f 90       	pop	r0
    4180:	1f 90       	pop	r1
    4182:	18 95       	reti

00004184 <__vector_4>:
    4184:	1f 92       	push	r1
    4186:	0f 92       	push	r0
    4188:	0f b6       	in	r0, 0x3f	; 63
    418a:	0f 92       	push	r0
    418c:	11 24       	eor	r1, r1
    418e:	2f 93       	push	r18
    4190:	3f 93       	push	r19
    4192:	4f 93       	push	r20
    4194:	5f 93       	push	r21
    4196:	6f 93       	push	r22
    4198:	7f 93       	push	r23
    419a:	8f 93       	push	r24
    419c:	9f 93       	push	r25
    419e:	af 93       	push	r26
    41a0:	bf 93       	push	r27
    41a2:	ef 93       	push	r30
    41a4:	ff 93       	push	r31
    41a6:	e0 91 16 04 	lds	r30, 0x0416
    41aa:	f0 91 17 04 	lds	r31, 0x0417
    41ae:	30 97       	sbiw	r30, 0x00	; 0
    41b0:	09 f0       	breq	.+2      	; 0x41b4 <__vector_4+0x30>
    41b2:	09 95       	icall
    41b4:	ff 91       	pop	r31
    41b6:	ef 91       	pop	r30
    41b8:	bf 91       	pop	r27
    41ba:	af 91       	pop	r26
    41bc:	9f 91       	pop	r25
    41be:	8f 91       	pop	r24
    41c0:	7f 91       	pop	r23
    41c2:	6f 91       	pop	r22
    41c4:	5f 91       	pop	r21
    41c6:	4f 91       	pop	r20
    41c8:	3f 91       	pop	r19
    41ca:	2f 91       	pop	r18
    41cc:	0f 90       	pop	r0
    41ce:	0f be       	out	0x3f, r0	; 63
    41d0:	0f 90       	pop	r0
    41d2:	1f 90       	pop	r1
    41d4:	18 95       	reti

000041d6 <__vector_5>:
    41d6:	1f 92       	push	r1
    41d8:	0f 92       	push	r0
    41da:	0f b6       	in	r0, 0x3f	; 63
    41dc:	0f 92       	push	r0
    41de:	11 24       	eor	r1, r1
    41e0:	2f 93       	push	r18
    41e2:	3f 93       	push	r19
    41e4:	4f 93       	push	r20
    41e6:	5f 93       	push	r21
    41e8:	6f 93       	push	r22
    41ea:	7f 93       	push	r23
    41ec:	8f 93       	push	r24
    41ee:	9f 93       	push	r25
    41f0:	af 93       	push	r26
    41f2:	bf 93       	push	r27
    41f4:	ef 93       	push	r30
    41f6:	ff 93       	push	r31
    41f8:	e0 91 18 04 	lds	r30, 0x0418
    41fc:	f0 91 19 04 	lds	r31, 0x0419
    4200:	30 97       	sbiw	r30, 0x00	; 0
    4202:	09 f0       	breq	.+2      	; 0x4206 <__vector_5+0x30>
    4204:	09 95       	icall
    4206:	ff 91       	pop	r31
    4208:	ef 91       	pop	r30
    420a:	bf 91       	pop	r27
    420c:	af 91       	pop	r26
    420e:	9f 91       	pop	r25
    4210:	8f 91       	pop	r24
    4212:	7f 91       	pop	r23
    4214:	6f 91       	pop	r22
    4216:	5f 91       	pop	r21
    4218:	4f 91       	pop	r20
    421a:	3f 91       	pop	r19
    421c:	2f 91       	pop	r18
    421e:	0f 90       	pop	r0
    4220:	0f be       	out	0x3f, r0	; 63
    4222:	0f 90       	pop	r0
    4224:	1f 90       	pop	r1
    4226:	18 95       	reti

00004228 <__vector_6>:
    4228:	1f 92       	push	r1
    422a:	0f 92       	push	r0
    422c:	0f b6       	in	r0, 0x3f	; 63
    422e:	0f 92       	push	r0
    4230:	11 24       	eor	r1, r1
    4232:	2f 93       	push	r18
    4234:	3f 93       	push	r19
    4236:	4f 93       	push	r20
    4238:	5f 93       	push	r21
    423a:	6f 93       	push	r22
    423c:	7f 93       	push	r23
    423e:	8f 93       	push	r24
    4240:	9f 93       	push	r25
    4242:	af 93       	push	r26
    4244:	bf 93       	push	r27
    4246:	ef 93       	push	r30
    4248:	ff 93       	push	r31
    424a:	e0 91 1a 04 	lds	r30, 0x041A
    424e:	f0 91 1b 04 	lds	r31, 0x041B
    4252:	30 97       	sbiw	r30, 0x00	; 0
    4254:	09 f0       	breq	.+2      	; 0x4258 <__vector_6+0x30>
    4256:	09 95       	icall
    4258:	ff 91       	pop	r31
    425a:	ef 91       	pop	r30
    425c:	bf 91       	pop	r27
    425e:	af 91       	pop	r26
    4260:	9f 91       	pop	r25
    4262:	8f 91       	pop	r24
    4264:	7f 91       	pop	r23
    4266:	6f 91       	pop	r22
    4268:	5f 91       	pop	r21
    426a:	4f 91       	pop	r20
    426c:	3f 91       	pop	r19
    426e:	2f 91       	pop	r18
    4270:	0f 90       	pop	r0
    4272:	0f be       	out	0x3f, r0	; 63
    4274:	0f 90       	pop	r0
    4276:	1f 90       	pop	r1
    4278:	18 95       	reti

0000427a <__vector_7>:
    427a:	1f 92       	push	r1
    427c:	0f 92       	push	r0
    427e:	0f b6       	in	r0, 0x3f	; 63
    4280:	0f 92       	push	r0
    4282:	11 24       	eor	r1, r1
    4284:	2f 93       	push	r18
    4286:	3f 93       	push	r19
    4288:	4f 93       	push	r20
    428a:	5f 93       	push	r21
    428c:	6f 93       	push	r22
    428e:	7f 93       	push	r23
    4290:	8f 93       	push	r24
    4292:	9f 93       	push	r25
    4294:	af 93       	push	r26
    4296:	bf 93       	push	r27
    4298:	ef 93       	push	r30
    429a:	ff 93       	push	r31
    429c:	e0 91 1c 04 	lds	r30, 0x041C
    42a0:	f0 91 1d 04 	lds	r31, 0x041D
    42a4:	30 97       	sbiw	r30, 0x00	; 0
    42a6:	09 f0       	breq	.+2      	; 0x42aa <__vector_7+0x30>
    42a8:	09 95       	icall
    42aa:	ff 91       	pop	r31
    42ac:	ef 91       	pop	r30
    42ae:	bf 91       	pop	r27
    42b0:	af 91       	pop	r26
    42b2:	9f 91       	pop	r25
    42b4:	8f 91       	pop	r24
    42b6:	7f 91       	pop	r23
    42b8:	6f 91       	pop	r22
    42ba:	5f 91       	pop	r21
    42bc:	4f 91       	pop	r20
    42be:	3f 91       	pop	r19
    42c0:	2f 91       	pop	r18
    42c2:	0f 90       	pop	r0
    42c4:	0f be       	out	0x3f, r0	; 63
    42c6:	0f 90       	pop	r0
    42c8:	1f 90       	pop	r1
    42ca:	18 95       	reti

000042cc <ISR_attach>:
    42cc:	e8 2f       	mov	r30, r24
    42ce:	80 32       	cpi	r24, 0x20	; 32
    42d0:	68 f4       	brcc	.+26     	; 0x42ec <ISR_attach+0x20>
    42d2:	80 51       	subi	r24, 0x10	; 16
    42d4:	83 30       	cpi	r24, 0x03	; 3
    42d6:	50 f0       	brcs	.+20     	; 0x42ec <ISR_attach+0x20>
    42d8:	f0 e0       	ldi	r31, 0x00	; 0
    42da:	ee 0f       	add	r30, r30
    42dc:	ff 1f       	adc	r31, r31
    42de:	e2 5f       	subi	r30, 0xF2	; 242
    42e0:	fb 4f       	sbci	r31, 0xFB	; 251
    42e2:	20 81       	ld	r18, Z
    42e4:	31 81       	ldd	r19, Z+1	; 0x01
    42e6:	71 83       	std	Z+1, r23	; 0x01
    42e8:	60 83       	st	Z, r22
    42ea:	02 c0       	rjmp	.+4      	; 0x42f0 <ISR_attach+0x24>
    42ec:	20 e0       	ldi	r18, 0x00	; 0
    42ee:	30 e0       	ldi	r19, 0x00	; 0
    42f0:	c9 01       	movw	r24, r18
    42f2:	08 95       	ret

000042f4 <ISR_open>:
    42f4:	80 e1       	ldi	r24, 0x10	; 16
    42f6:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    42fa:	88 23       	and	r24, r24
    42fc:	61 f4       	brne	.+24     	; 0x4316 <ISR_open+0x22>
    42fe:	ee e0       	ldi	r30, 0x0E	; 14
    4300:	f4 e0       	ldi	r31, 0x04	; 4
    4302:	11 92       	st	Z+, r1
    4304:	11 92       	st	Z+, r1
    4306:	84 e0       	ldi	r24, 0x04	; 4
    4308:	ee 34       	cpi	r30, 0x4E	; 78
    430a:	f8 07       	cpc	r31, r24
    430c:	d1 f7       	brne	.-12     	; 0x4302 <ISR_open+0xe>
    430e:	80 e1       	ldi	r24, 0x10	; 16
    4310:	61 e0       	ldi	r22, 0x01	; 1
    4312:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    4316:	80 e1       	ldi	r24, 0x10	; 16
    4318:	91 e0       	ldi	r25, 0x01	; 1
    431a:	08 95       	ret

0000431c <__LCD_init>:
    431c:	23 9a       	sbi	0x04, 3	; 4
    431e:	08 95       	ret

00004320 <__LCD_putchar>:
    4320:	ff 92       	push	r15
    4322:	0f 93       	push	r16
    4324:	1f 93       	push	r17
    4326:	cf 93       	push	r28
    4328:	df 93       	push	r29
    432a:	f8 2e       	mov	r15, r24
    432c:	8a e0       	ldi	r24, 0x0A	; 10
    432e:	f8 16       	cp	r15, r24
    4330:	b1 f0       	breq	.+44     	; 0x435e <__LCD_putchar+0x3e>
    4332:	8f 15       	cp	r24, r15
    4334:	48 f0       	brcs	.+18     	; 0x4348 <__LCD_putchar+0x28>
    4336:	e8 e0       	ldi	r30, 0x08	; 8
    4338:	fe 16       	cp	r15, r30
    433a:	b9 f1       	breq	.+110    	; 0x43aa <__LCD_putchar+0x8a>
    433c:	ef 15       	cp	r30, r15
    433e:	38 f1       	brcs	.+78     	; 0x438e <__LCD_putchar+0x6e>
    4340:	f7 e0       	ldi	r31, 0x07	; 7
    4342:	ff 16       	cp	r15, r31
    4344:	51 f4       	brne	.+20     	; 0x435a <__LCD_putchar+0x3a>
    4346:	3b c0       	rjmp	.+118    	; 0x43be <__LCD_putchar+0x9e>
    4348:	8d e0       	ldi	r24, 0x0D	; 13
    434a:	f8 16       	cp	r15, r24
    434c:	59 f0       	breq	.+22     	; 0x4364 <__LCD_putchar+0x44>
    434e:	eb e1       	ldi	r30, 0x1B	; 27
    4350:	fe 16       	cp	r15, r30
    4352:	89 f0       	breq	.+34     	; 0x4376 <__LCD_putchar+0x56>
    4354:	fc e0       	ldi	r31, 0x0C	; 12
    4356:	ff 16       	cp	r15, r31
    4358:	41 f0       	breq	.+16     	; 0x436a <__LCD_putchar+0x4a>
    435a:	01 e0       	ldi	r16, 0x01	; 1
    435c:	41 c0       	rjmp	.+130    	; 0x43e0 <__LCD_putchar+0xc0>
    435e:	10 92 e6 06 	sts	0x06E6, r1
    4362:	03 c0       	rjmp	.+6      	; 0x436a <__LCD_putchar+0x4a>
    4364:	10 92 e6 06 	sts	0x06E6, r1
    4368:	3a c0       	rjmp	.+116    	; 0x43de <__LCD_putchar+0xbe>
    436a:	80 91 e7 06 	lds	r24, 0x06E7
    436e:	81 50       	subi	r24, 0x01	; 1
    4370:	80 93 e7 06 	sts	0x06E7, r24
    4374:	34 c0       	rjmp	.+104    	; 0x43de <__LCD_putchar+0xbe>
    4376:	0e 94 1b 17 	call	0x2e36	; 0x2e36 <LCD_clear>
    437a:	14 c0       	rjmp	.+40     	; 0x43a4 <__LCD_putchar+0x84>
    437c:	80 e0       	ldi	r24, 0x00	; 0
    437e:	61 e0       	ldi	r22, 0x01	; 1
    4380:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    4384:	80 91 e6 06 	lds	r24, 0x06E6
    4388:	8f 5f       	subi	r24, 0xFF	; 255
    438a:	80 93 e6 06 	sts	0x06E6, r24
    438e:	80 91 e6 06 	lds	r24, 0x06E6
    4392:	87 ff       	sbrs	r24, 7
    4394:	f3 cf       	rjmp	.-26     	; 0x437c <__LCD_putchar+0x5c>
    4396:	10 92 e6 06 	sts	0x06E6, r1
    439a:	80 91 e7 06 	lds	r24, 0x06E7
    439e:	81 50       	subi	r24, 0x01	; 1
    43a0:	80 93 e7 06 	sts	0x06E7, r24
    43a4:	00 e0       	ldi	r16, 0x00	; 0
    43a6:	11 e0       	ldi	r17, 0x01	; 1
    43a8:	1c c0       	rjmp	.+56     	; 0x43e2 <__LCD_putchar+0xc2>
    43aa:	80 91 e6 06 	lds	r24, 0x06E6
    43ae:	88 23       	and	r24, r24
    43b0:	b1 f0       	breq	.+44     	; 0x43de <__LCD_putchar+0xbe>
    43b2:	80 91 e6 06 	lds	r24, 0x06E6
    43b6:	86 50       	subi	r24, 0x06	; 6
    43b8:	80 93 e6 06 	sts	0x06E6, r24
    43bc:	10 c0       	rjmp	.+32     	; 0x43de <__LCD_putchar+0xbe>
    43be:	81 e0       	ldi	r24, 0x01	; 1
    43c0:	0e 94 27 19 	call	0x324e	; 0x324e <SPKR_open>
    43c4:	64 ef       	ldi	r22, 0xF4	; 244
    43c6:	71 e0       	ldi	r23, 0x01	; 1
    43c8:	80 e0       	ldi	r24, 0x00	; 0
    43ca:	90 e0       	ldi	r25, 0x00	; 0
    43cc:	4d e7       	ldi	r20, 0x7D	; 125
    43ce:	50 e0       	ldi	r21, 0x00	; 0
    43d0:	24 e6       	ldi	r18, 0x64	; 100
    43d2:	30 e0       	ldi	r19, 0x00	; 0
    43d4:	0e 94 aa 23 	call	0x4754	; 0x4754 <SPKR_play_beep>
    43d8:	81 e0       	ldi	r24, 0x01	; 1
    43da:	0e 94 76 23 	call	0x46ec	; 0x46ec <SPKR_close>
    43de:	00 e0       	ldi	r16, 0x00	; 0
    43e0:	10 e0       	ldi	r17, 0x00	; 0
    43e2:	80 91 e7 06 	lds	r24, 0x06E7
    43e6:	60 91 e6 06 	lds	r22, 0x06E6
    43ea:	0e 94 e1 17 	call	0x2fc2	; 0x2fc2 <LCD_set_PGC_addr>
    43ee:	00 23       	and	r16, r16
    43f0:	51 f1       	breq	.+84     	; 0x4446 <__LCD_putchar+0x126>
    43f2:	85 e0       	ldi	r24, 0x05	; 5
    43f4:	f8 9e       	mul	r15, r24
    43f6:	c0 01       	movw	r24, r0
    43f8:	11 24       	eor	r1, r1
    43fa:	ec 01       	movw	r28, r24
    43fc:	c3 55       	subi	r28, 0x53	; 83
    43fe:	df 4f       	sbci	r29, 0xFF	; 255
    4400:	8c 01       	movw	r16, r24
    4402:	0e 54       	subi	r16, 0x4E	; 78
    4404:	1f 4f       	sbci	r17, 0xFF	; 255
    4406:	fe 01       	movw	r30, r28
    4408:	84 91       	lpm	r24, Z+
    440a:	61 e0       	ldi	r22, 0x01	; 1
    440c:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    4410:	21 96       	adiw	r28, 0x01	; 1
    4412:	c0 17       	cp	r28, r16
    4414:	d1 07       	cpc	r29, r17
    4416:	b9 f7       	brne	.-18     	; 0x4406 <__LCD_putchar+0xe6>
    4418:	80 e0       	ldi	r24, 0x00	; 0
    441a:	61 e0       	ldi	r22, 0x01	; 1
    441c:	0e 94 fa 17 	call	0x2ff4	; 0x2ff4 <LCD_write>
    4420:	80 91 e6 06 	lds	r24, 0x06E6
    4424:	8a 5f       	subi	r24, 0xFA	; 250
    4426:	80 93 e6 06 	sts	0x06E6, r24
    442a:	80 91 e6 06 	lds	r24, 0x06E6
    442e:	90 e0       	ldi	r25, 0x00	; 0
    4430:	8c 37       	cpi	r24, 0x7C	; 124
    4432:	91 05       	cpc	r25, r1
    4434:	3c f0       	brlt	.+14     	; 0x4444 <__LCD_putchar+0x124>
    4436:	10 92 e6 06 	sts	0x06E6, r1
    443a:	80 91 e7 06 	lds	r24, 0x06E7
    443e:	81 50       	subi	r24, 0x01	; 1
    4440:	80 93 e7 06 	sts	0x06E7, r24
    4444:	11 e0       	ldi	r17, 0x01	; 1
    4446:	80 91 e7 06 	lds	r24, 0x06E7
    444a:	83 70       	andi	r24, 0x03	; 3
    444c:	80 93 e7 06 	sts	0x06E7, r24
    4450:	11 30       	cpi	r17, 0x01	; 1
    4452:	59 f4       	brne	.+22     	; 0x446a <__LCD_putchar+0x14a>
    4454:	80 91 e8 06 	lds	r24, 0x06E8
    4458:	81 30       	cpi	r24, 0x01	; 1
    445a:	39 f4       	brne	.+14     	; 0x446a <__LCD_putchar+0x14a>
    445c:	e0 91 e9 06 	lds	r30, 0x06E9
    4460:	f0 91 ea 06 	lds	r31, 0x06EA
    4464:	30 97       	sbiw	r30, 0x00	; 0
    4466:	09 f0       	breq	.+2      	; 0x446a <__LCD_putchar+0x14a>
    4468:	09 95       	icall
    446a:	80 e0       	ldi	r24, 0x00	; 0
    446c:	90 e0       	ldi	r25, 0x00	; 0
    446e:	df 91       	pop	r29
    4470:	cf 91       	pop	r28
    4472:	1f 91       	pop	r17
    4474:	0f 91       	pop	r16
    4476:	ff 90       	pop	r15
    4478:	08 95       	ret

0000447a <__LED_clr_pattern>:
    447a:	85 fd       	sbrc	r24, 5
    447c:	5d 98       	cbi	0x0b, 5	; 11
    447e:	86 fd       	sbrc	r24, 6
    4480:	5e 98       	cbi	0x0b, 6	; 11
    4482:	08 95       	ret

00004484 <__LED_init>:
    4484:	55 9a       	sbi	0x0a, 5	; 10
    4486:	56 9a       	sbi	0x0a, 6	; 10
    4488:	08 95       	ret

0000448a <__LED_set_pattern>:
    448a:	85 fd       	sbrc	r24, 5
    448c:	5d 9a       	sbi	0x0b, 5	; 11
    448e:	86 fd       	sbrc	r24, 6
    4490:	5e 9a       	sbi	0x0b, 6	; 11
    4492:	08 95       	ret

00004494 <ATMEGA_open>:
    4494:	80 e0       	ldi	r24, 0x00	; 0
    4496:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    449a:	88 23       	and	r24, r24
    449c:	51 f4       	brne	.+20     	; 0x44b2 <ATMEGA_open+0x1e>
    449e:	f8 94       	cli
    44a0:	0e 94 5c 25 	call	0x4ab8	; 0x4ab8 <__ATMEGA_init>
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	0e 94 5c 22 	call	0x44b8	; 0x44b8 <ATMEGA_set_clk_mode>
    44aa:	80 e0       	ldi	r24, 0x00	; 0
    44ac:	61 e0       	ldi	r22, 0x01	; 1
    44ae:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    44b2:	80 e0       	ldi	r24, 0x00	; 0
    44b4:	91 e0       	ldi	r25, 0x01	; 1
    44b6:	08 95       	ret

000044b8 <ATMEGA_set_clk_mode>:
    44b8:	81 30       	cpi	r24, 0x01	; 1
    44ba:	49 f0       	breq	.+18     	; 0x44ce <ATMEGA_set_clk_mode+0x16>
    44bc:	f8 94       	cli
    44be:	81 30       	cpi	r24, 0x01	; 1
    44c0:	20 f1       	brcs	.+72     	; 0x450a <ATMEGA_set_clk_mode+0x52>
    44c2:	82 30       	cpi	r24, 0x02	; 2
    44c4:	b1 f0       	breq	.+44     	; 0x44f2 <ATMEGA_set_clk_mode+0x3a>
    44c6:	83 30       	cpi	r24, 0x03	; 3
    44c8:	09 f0       	breq	.+2      	; 0x44cc <ATMEGA_set_clk_mode+0x14>
    44ca:	45 c0       	rjmp	.+138    	; 0x4556 <ATMEGA_set_clk_mode+0x9e>
    44cc:	17 c0       	rjmp	.+46     	; 0x44fc <ATMEGA_set_clk_mode+0x44>
    44ce:	2c 9a       	sbi	0x05, 4	; 5
    44d0:	80 e8       	ldi	r24, 0x80	; 128
    44d2:	80 93 61 00 	sts	0x0061, r24
    44d6:	10 92 61 00 	sts	0x0061, r1
    44da:	80 e0       	ldi	r24, 0x00	; 0
    44dc:	90 e0       	ldi	r25, 0x00	; 0
    44de:	00 00       	nop
    44e0:	01 96       	adiw	r24, 0x01	; 1
    44e2:	88 32       	cpi	r24, 0x28	; 40
    44e4:	91 05       	cpc	r25, r1
    44e6:	d9 f7       	brne	.-10     	; 0x44de <ATMEGA_set_clk_mode+0x26>
    44e8:	10 92 68 00 	sts	0x0068, r1
    44ec:	10 92 6b 00 	sts	0x006B, r1
    44f0:	08 95       	ret
    44f2:	80 e8       	ldi	r24, 0x80	; 128
    44f4:	80 93 61 00 	sts	0x0061, r24
    44f8:	83 e0       	ldi	r24, 0x03	; 3
    44fa:	04 c0       	rjmp	.+8      	; 0x4504 <ATMEGA_set_clk_mode+0x4c>
    44fc:	80 e8       	ldi	r24, 0x80	; 128
    44fe:	80 93 61 00 	sts	0x0061, r24
    4502:	88 e0       	ldi	r24, 0x08	; 8
    4504:	80 93 61 00 	sts	0x0061, r24
    4508:	28 c0       	rjmp	.+80     	; 0x455a <ATMEGA_set_clk_mode+0xa2>
    450a:	80 e0       	ldi	r24, 0x00	; 0
    450c:	90 e0       	ldi	r25, 0x00	; 0
    450e:	00 00       	nop
    4510:	01 96       	adiw	r24, 0x01	; 1
    4512:	2d e6       	ldi	r18, 0x6D	; 109
    4514:	80 36       	cpi	r24, 0x60	; 96
    4516:	92 07       	cpc	r25, r18
    4518:	d1 f7       	brne	.-12     	; 0x450e <ATMEGA_set_clk_mode+0x56>
    451a:	2c 98       	cbi	0x05, 4	; 5
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	90 e0       	ldi	r25, 0x00	; 0
    4520:	00 00       	nop
    4522:	01 96       	adiw	r24, 0x01	; 1
    4524:	2d e6       	ldi	r18, 0x6D	; 109
    4526:	80 36       	cpi	r24, 0x60	; 96
    4528:	92 07       	cpc	r25, r18
    452a:	d1 f7       	brne	.-12     	; 0x4520 <ATMEGA_set_clk_mode+0x68>
    452c:	10 92 7a 00 	sts	0x007A, r1
    4530:	8f ef       	ldi	r24, 0xFF	; 255
    4532:	80 93 64 00 	sts	0x0064, r24
    4536:	80 91 68 00 	lds	r24, 0x0068
    453a:	81 60       	ori	r24, 0x01	; 1
    453c:	80 93 68 00 	sts	0x0068, r24
    4540:	80 91 6b 00 	lds	r24, 0x006B
    4544:	84 60       	ori	r24, 0x04	; 4
    4546:	80 93 6b 00 	sts	0x006B, r24
    454a:	78 94       	sei
    454c:	83 b7       	in	r24, 0x33	; 51
    454e:	81 60       	ori	r24, 0x01	; 1
    4550:	83 bf       	out	0x33, r24	; 51
    4552:	88 95       	sleep
    4554:	08 95       	ret
    4556:	82 30       	cpi	r24, 0x02	; 2
    4558:	08 f0       	brcs	.+2      	; 0x455c <ATMEGA_set_clk_mode+0xa4>
    455a:	78 94       	sei
    455c:	08 95       	ret

0000455e <SPI_open>:
    455e:	0f 93       	push	r16
    4560:	1f 93       	push	r17
    4562:	0e 94 88 25 	call	0x4b10	; 0x4b10 <__SPI_init>
    4566:	80 e0       	ldi	r24, 0x00	; 0
    4568:	67 e7       	ldi	r22, 0x77	; 119
    456a:	75 e2       	ldi	r23, 0x25	; 37
    456c:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <SPI_set_config_func>
    4570:	81 e0       	ldi	r24, 0x01	; 1
    4572:	6f e6       	ldi	r22, 0x6F	; 111
    4574:	75 e2       	ldi	r23, 0x25	; 37
    4576:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <SPI_set_config_func>
    457a:	82 e0       	ldi	r24, 0x02	; 2
    457c:	67 e6       	ldi	r22, 0x67	; 103
    457e:	75 e2       	ldi	r23, 0x25	; 37
    4580:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <SPI_set_config_func>
    4584:	86 e0       	ldi	r24, 0x06	; 6
    4586:	6f e7       	ldi	r22, 0x7F	; 127
    4588:	75 e2       	ldi	r23, 0x25	; 37
    458a:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <SPI_set_config_func>
    458e:	0f e5       	ldi	r16, 0x5F	; 95
    4590:	15 e2       	ldi	r17, 0x25	; 37
    4592:	83 e0       	ldi	r24, 0x03	; 3
    4594:	b8 01       	movw	r22, r16
    4596:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <SPI_set_config_func>
    459a:	84 e0       	ldi	r24, 0x04	; 4
    459c:	b8 01       	movw	r22, r16
    459e:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <SPI_set_config_func>
    45a2:	85 e0       	ldi	r24, 0x05	; 5
    45a4:	b8 01       	movw	r22, r16
    45a6:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <SPI_set_config_func>
    45aa:	87 e0       	ldi	r24, 0x07	; 7
    45ac:	b8 01       	movw	r22, r16
    45ae:	0e 94 fa 22 	call	0x45f4	; 0x45f4 <SPI_set_config_func>
    45b2:	82 e0       	ldi	r24, 0x02	; 2
    45b4:	61 e0       	ldi	r22, 0x01	; 1
    45b6:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    45ba:	8f ef       	ldi	r24, 0xFF	; 255
    45bc:	80 93 eb 06 	sts	0x06EB, r24
    45c0:	87 e0       	ldi	r24, 0x07	; 7
    45c2:	0e 94 36 18 	call	0x306c	; 0x306c <SPI_set_slave_addr>
    45c6:	82 e0       	ldi	r24, 0x02	; 2
    45c8:	91 e0       	ldi	r25, 0x01	; 1
    45ca:	1f 91       	pop	r17
    45cc:	0f 91       	pop	r16
    45ce:	08 95       	ret

000045d0 <SPI_receive>:
    45d0:	1f 93       	push	r17
    45d2:	16 2f       	mov	r17, r22
    45d4:	0e 94 36 18 	call	0x306c	; 0x306c <SPI_set_slave_addr>
    45d8:	82 e0       	ldi	r24, 0x02	; 2
    45da:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    45de:	81 30       	cpi	r24, 0x01	; 1
    45e0:	11 f0       	breq	.+4      	; 0x45e6 <SPI_receive+0x16>
    45e2:	80 e0       	ldi	r24, 0x00	; 0
    45e4:	05 c0       	rjmp	.+10     	; 0x45f0 <SPI_receive+0x20>
    45e6:	1e bd       	out	0x2e, r17	; 46
    45e8:	0d b4       	in	r0, 0x2d	; 45
    45ea:	07 fe       	sbrs	r0, 7
    45ec:	fd cf       	rjmp	.-6      	; 0x45e8 <SPI_receive+0x18>
    45ee:	8e b5       	in	r24, 0x2e	; 46
    45f0:	1f 91       	pop	r17
    45f2:	08 95       	ret

000045f4 <SPI_set_config_func>:
    45f4:	e8 2f       	mov	r30, r24
    45f6:	f0 e0       	ldi	r31, 0x00	; 0
    45f8:	ee 0f       	add	r30, r30
    45fa:	ff 1f       	adc	r31, r31
    45fc:	e2 5b       	subi	r30, 0xB2	; 178
    45fe:	fb 4f       	sbci	r31, 0xFB	; 251
    4600:	71 83       	std	Z+1, r23	; 0x01
    4602:	60 83       	st	Z, r22
    4604:	08 95       	ret

00004606 <__SPKR_TIMER1_COMPA_vect>:
    4606:	0e 94 06 23 	call	0x460c	; 0x460c <SPKR_clk>
    460a:	08 95       	ret

0000460c <SPKR_clk>:
    460c:	80 91 60 04 	lds	r24, 0x0460
    4610:	90 91 61 04 	lds	r25, 0x0461
    4614:	a0 91 62 04 	lds	r26, 0x0462
    4618:	b0 91 63 04 	lds	r27, 0x0463
    461c:	20 91 64 04 	lds	r18, 0x0464
    4620:	30 91 65 04 	lds	r19, 0x0465
    4624:	40 91 66 04 	lds	r20, 0x0466
    4628:	50 91 67 04 	lds	r21, 0x0467
    462c:	28 0f       	add	r18, r24
    462e:	39 1f       	adc	r19, r25
    4630:	4a 1f       	adc	r20, r26
    4632:	5b 1f       	adc	r21, r27
    4634:	20 93 60 04 	sts	0x0460, r18
    4638:	30 93 61 04 	sts	0x0461, r19
    463c:	40 93 62 04 	sts	0x0462, r20
    4640:	50 93 63 04 	sts	0x0463, r21
    4644:	80 91 60 04 	lds	r24, 0x0460
    4648:	90 91 61 04 	lds	r25, 0x0461
    464c:	a0 91 62 04 	lds	r26, 0x0462
    4650:	b0 91 63 04 	lds	r27, 0x0463
    4654:	88 51       	subi	r24, 0x18	; 24
    4656:	96 4f       	sbci	r25, 0xF6	; 246
    4658:	a0 40       	sbci	r26, 0x00	; 0
    465a:	b0 40       	sbci	r27, 0x00	; 0
    465c:	bc f0       	brlt	.+46     	; 0x468c <SPKR_clk+0x80>
    465e:	8b b1       	in	r24, 0x0b	; 11
    4660:	80 58       	subi	r24, 0x80	; 128
    4662:	8b b9       	out	0x0b, r24	; 11
    4664:	80 91 60 04 	lds	r24, 0x0460
    4668:	90 91 61 04 	lds	r25, 0x0461
    466c:	a0 91 62 04 	lds	r26, 0x0462
    4670:	b0 91 63 04 	lds	r27, 0x0463
    4674:	88 51       	subi	r24, 0x18	; 24
    4676:	96 4f       	sbci	r25, 0xF6	; 246
    4678:	a0 40       	sbci	r26, 0x00	; 0
    467a:	b0 40       	sbci	r27, 0x00	; 0
    467c:	80 93 60 04 	sts	0x0460, r24
    4680:	90 93 61 04 	sts	0x0461, r25
    4684:	a0 93 62 04 	sts	0x0462, r26
    4688:	b0 93 63 04 	sts	0x0463, r27
    468c:	08 95       	ret

0000468e <__SPKR_close_beep_mode>:
    468e:	8a e0       	ldi	r24, 0x0A	; 10
    4690:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    4694:	81 30       	cpi	r24, 0x01	; 1
    4696:	41 f4       	brne	.+16     	; 0x46a8 <__SPKR_close_beep_mode+0x1a>
    4698:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__SPKR_close>
    469c:	10 92 5f 04 	sts	0x045F, r1
    46a0:	8a e0       	ldi	r24, 0x0A	; 10
    46a2:	60 e0       	ldi	r22, 0x00	; 0
    46a4:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    46a8:	08 95       	ret

000046aa <__SPKR_close_tone_mode>:
    46aa:	89 e0       	ldi	r24, 0x09	; 9
    46ac:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    46b0:	81 30       	cpi	r24, 0x01	; 1
    46b2:	d9 f4       	brne	.+54     	; 0x46ea <__SPKR_close_tone_mode+0x40>
    46b4:	80 91 5e 04 	lds	r24, 0x045E
    46b8:	88 23       	and	r24, r24
    46ba:	11 f0       	breq	.+4      	; 0x46c0 <__SPKR_close_tone_mode+0x16>
    46bc:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__SPKR_stop>
    46c0:	82 e0       	ldi	r24, 0x02	; 2
    46c2:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__SPKR_close>
    46c6:	80 91 6c 04 	lds	r24, 0x046C
    46ca:	90 91 6d 04 	lds	r25, 0x046D
    46ce:	00 97       	sbiw	r24, 0x00	; 0
    46d0:	31 f0       	breq	.+12     	; 0x46de <__SPKR_close_tone_mode+0x34>
    46d2:	0e 94 40 32 	call	0x6480	; 0x6480 <free>
    46d6:	10 92 6d 04 	sts	0x046D, r1
    46da:	10 92 6c 04 	sts	0x046C, r1
    46de:	10 92 5e 04 	sts	0x045E, r1
    46e2:	89 e0       	ldi	r24, 0x09	; 9
    46e4:	60 e0       	ldi	r22, 0x00	; 0
    46e6:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    46ea:	08 95       	ret

000046ec <SPKR_close>:
    46ec:	81 30       	cpi	r24, 0x01	; 1
    46ee:	29 f0       	breq	.+10     	; 0x46fa <SPKR_close+0xe>
    46f0:	82 30       	cpi	r24, 0x02	; 2
    46f2:	29 f4       	brne	.+10     	; 0x46fe <SPKR_close+0x12>
    46f4:	0e 94 55 23 	call	0x46aa	; 0x46aa <__SPKR_close_tone_mode>
    46f8:	08 95       	ret
    46fa:	0e 94 47 23 	call	0x468e	; 0x468e <__SPKR_close_beep_mode>
    46fe:	08 95       	ret

00004700 <__SPKR_init>:
    4700:	98 2f       	mov	r25, r24
    4702:	80 91 5e 04 	lds	r24, 0x045E
    4706:	88 23       	and	r24, r24
    4708:	31 f4       	brne	.+12     	; 0x4716 <__SPKR_init+0x16>
    470a:	80 91 5f 04 	lds	r24, 0x045F
    470e:	88 23       	and	r24, r24
    4710:	11 f4       	brne	.+4      	; 0x4716 <__SPKR_init+0x16>
    4712:	57 9a       	sbi	0x0a, 7	; 10
    4714:	5f 98       	cbi	0x0b, 7	; 11
    4716:	80 91 5e 04 	lds	r24, 0x045E
    471a:	88 23       	and	r24, r24
    471c:	d1 f4       	brne	.+52     	; 0x4752 <__SPKR_init+0x52>
    471e:	92 30       	cpi	r25, 0x02	; 2
    4720:	c1 f4       	brne	.+48     	; 0x4752 <__SPKR_init+0x52>
    4722:	10 92 80 00 	sts	0x0080, r1
    4726:	10 92 81 00 	sts	0x0081, r1
    472a:	80 91 81 00 	lds	r24, 0x0081
    472e:	88 60       	ori	r24, 0x08	; 8
    4730:	80 93 81 00 	sts	0x0081, r24
    4734:	80 91 81 00 	lds	r24, 0x0081
    4738:	81 60       	ori	r24, 0x01	; 1
    473a:	80 93 81 00 	sts	0x0081, r24
    473e:	10 92 85 00 	sts	0x0085, r1
    4742:	10 92 84 00 	sts	0x0084, r1
    4746:	81 e0       	ldi	r24, 0x01	; 1
    4748:	80 93 89 00 	sts	0x0089, r24
    474c:	80 e9       	ldi	r24, 0x90	; 144
    474e:	80 93 88 00 	sts	0x0088, r24
    4752:	08 95       	ret

00004754 <SPKR_play_beep>:
    4754:	8f 92       	push	r8
    4756:	9f 92       	push	r9
    4758:	af 92       	push	r10
    475a:	bf 92       	push	r11
    475c:	cf 92       	push	r12
    475e:	df 92       	push	r13
    4760:	ef 92       	push	r14
    4762:	ff 92       	push	r15
    4764:	0f 93       	push	r16
    4766:	1f 93       	push	r17
    4768:	cf 93       	push	r28
    476a:	df 93       	push	r29
    476c:	4b 01       	movw	r8, r22
    476e:	5c 01       	movw	r10, r24
    4770:	ea 01       	movw	r28, r20
    4772:	b9 01       	movw	r22, r18
    4774:	21 15       	cp	r18, r1
    4776:	31 05       	cpc	r19, r1
    4778:	39 f1       	breq	.+78     	; 0x47c8 <SPKR_play_beep+0x74>
    477a:	9e 01       	movw	r18, r28
    477c:	44 27       	eor	r20, r20
    477e:	37 fd       	sbrc	r19, 7
    4780:	40 95       	com	r20
    4782:	54 2f       	mov	r21, r20
    4784:	65 36       	cpi	r22, 0x65	; 101
    4786:	71 05       	cpc	r23, r1
    4788:	10 f0       	brcs	.+4      	; 0x478e <SPKR_play_beep+0x3a>
    478a:	64 e6       	ldi	r22, 0x64	; 100
    478c:	70 e0       	ldi	r23, 0x00	; 0
    478e:	80 e0       	ldi	r24, 0x00	; 0
    4790:	90 e0       	ldi	r25, 0x00	; 0
    4792:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__mulsi3>
    4796:	24 e6       	ldi	r18, 0x64	; 100
    4798:	30 e0       	ldi	r19, 0x00	; 0
    479a:	40 e0       	ldi	r20, 0x00	; 0
    479c:	50 e0       	ldi	r21, 0x00	; 0
    479e:	0e 94 26 31 	call	0x624c	; 0x624c <__udivmodsi4>
    47a2:	79 01       	movw	r14, r18
    47a4:	8a 01       	movw	r16, r20
    47a6:	c5 01       	movw	r24, r10
    47a8:	b4 01       	movw	r22, r8
    47aa:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <SPKR_beep>
    47ae:	c7 01       	movw	r24, r14
    47b0:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
    47b4:	60 e0       	ldi	r22, 0x00	; 0
    47b6:	70 e0       	ldi	r23, 0x00	; 0
    47b8:	80 e0       	ldi	r24, 0x00	; 0
    47ba:	90 e0       	ldi	r25, 0x00	; 0
    47bc:	0e 94 8f 25 	call	0x4b1e	; 0x4b1e <SPKR_beep>
    47c0:	ce 01       	movw	r24, r28
    47c2:	8e 19       	sub	r24, r14
    47c4:	9f 09       	sbc	r25, r15
    47c6:	04 c0       	rjmp	.+8      	; 0x47d0 <SPKR_play_beep+0x7c>
    47c8:	41 15       	cp	r20, r1
    47ca:	51 05       	cpc	r21, r1
    47cc:	19 f0       	breq	.+6      	; 0x47d4 <SPKR_play_beep+0x80>
    47ce:	ca 01       	movw	r24, r20
    47d0:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <TMRSRVC_delay>
    47d4:	df 91       	pop	r29
    47d6:	cf 91       	pop	r28
    47d8:	1f 91       	pop	r17
    47da:	0f 91       	pop	r16
    47dc:	ff 90       	pop	r15
    47de:	ef 90       	pop	r14
    47e0:	df 90       	pop	r13
    47e2:	cf 90       	pop	r12
    47e4:	bf 90       	pop	r11
    47e6:	af 90       	pop	r10
    47e8:	9f 90       	pop	r9
    47ea:	8f 90       	pop	r8
    47ec:	08 95       	ret

000047ee <__SPKR_stop>:
    47ee:	ef e6       	ldi	r30, 0x6F	; 111
    47f0:	f0 e0       	ldi	r31, 0x00	; 0
    47f2:	80 81       	ld	r24, Z
    47f4:	8d 7f       	andi	r24, 0xFD	; 253
    47f6:	80 83       	st	Z, r24
    47f8:	08 95       	ret

000047fa <STEPPER_go>:
    47fa:	98 2f       	mov	r25, r24
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	80 93 d0 06 	sts	0x06D0, r24
    4802:	91 30       	cpi	r25, 0x01	; 1
    4804:	51 f0       	breq	.+20     	; 0x481a <STEPPER_go+0x20>
    4806:	91 30       	cpi	r25, 0x01	; 1
    4808:	18 f0       	brcs	.+6      	; 0x4810 <STEPPER_go+0x16>
    480a:	92 30       	cpi	r25, 0x02	; 2
    480c:	41 f4       	brne	.+16     	; 0x481e <STEPPER_go+0x24>
    480e:	03 c0       	rjmp	.+6      	; 0x4816 <STEPPER_go+0x1c>
    4810:	10 92 b8 06 	sts	0x06B8, r1
    4814:	04 c0       	rjmp	.+8      	; 0x481e <STEPPER_go+0x24>
    4816:	10 92 b8 06 	sts	0x06B8, r1
    481a:	10 92 b9 06 	sts	0x06B9, r1
    481e:	10 92 d0 06 	sts	0x06D0, r1
    4822:	08 95       	ret

00004824 <__STEPPER_init>:
    4824:	3a 9a       	sbi	0x07, 2	; 7
    4826:	3b 9a       	sbi	0x07, 3	; 7
    4828:	3c 9a       	sbi	0x07, 4	; 7
    482a:	3d 9a       	sbi	0x07, 5	; 7
    482c:	3e 9a       	sbi	0x07, 6	; 7
    482e:	3f 9a       	sbi	0x07, 7	; 7
    4830:	88 b1       	in	r24, 0x08	; 8
    4832:	83 70       	andi	r24, 0x03	; 3
    4834:	88 b9       	out	0x08, r24	; 8
    4836:	08 95       	ret

00004838 <STEPPER_set_steps>:
    4838:	98 2f       	mov	r25, r24
    483a:	81 e0       	ldi	r24, 0x01	; 1
    483c:	80 93 d0 06 	sts	0x06D0, r24
    4840:	91 30       	cpi	r25, 0x01	; 1
    4842:	71 f0       	breq	.+28     	; 0x4860 <STEPPER_set_steps+0x28>
    4844:	91 30       	cpi	r25, 0x01	; 1
    4846:	18 f0       	brcs	.+6      	; 0x484e <STEPPER_set_steps+0x16>
    4848:	92 30       	cpi	r25, 0x02	; 2
    484a:	71 f4       	brne	.+28     	; 0x4868 <STEPPER_set_steps+0x30>
    484c:	05 c0       	rjmp	.+10     	; 0x4858 <STEPPER_set_steps+0x20>
    484e:	70 93 ad 06 	sts	0x06AD, r23
    4852:	60 93 ac 06 	sts	0x06AC, r22
    4856:	08 c0       	rjmp	.+16     	; 0x4868 <STEPPER_set_steps+0x30>
    4858:	70 93 ad 06 	sts	0x06AD, r23
    485c:	60 93 ac 06 	sts	0x06AC, r22
    4860:	70 93 af 06 	sts	0x06AF, r23
    4864:	60 93 ae 06 	sts	0x06AE, r22
    4868:	10 92 d0 06 	sts	0x06D0, r1
    486c:	08 95       	ret

0000486e <STEPPER_set_stop_mode>:
    486e:	98 2f       	mov	r25, r24
    4870:	81 e0       	ldi	r24, 0x01	; 1
    4872:	80 93 d0 06 	sts	0x06D0, r24
    4876:	91 30       	cpi	r25, 0x01	; 1
    4878:	51 f0       	breq	.+20     	; 0x488e <STEPPER_set_stop_mode+0x20>
    487a:	91 30       	cpi	r25, 0x01	; 1
    487c:	18 f0       	brcs	.+6      	; 0x4884 <STEPPER_set_stop_mode+0x16>
    487e:	92 30       	cpi	r25, 0x02	; 2
    4880:	41 f4       	brne	.+16     	; 0x4892 <STEPPER_set_stop_mode+0x24>
    4882:	03 c0       	rjmp	.+6      	; 0x488a <STEPPER_set_stop_mode+0x1c>
    4884:	60 93 ba 06 	sts	0x06BA, r22
    4888:	04 c0       	rjmp	.+8      	; 0x4892 <STEPPER_set_stop_mode+0x24>
    488a:	60 93 ba 06 	sts	0x06BA, r22
    488e:	60 93 bb 06 	sts	0x06BB, r22
    4892:	10 92 d0 06 	sts	0x06D0, r1
    4896:	08 95       	ret

00004898 <STEPPER_setup_decels>:
    4898:	0f 93       	push	r16
    489a:	1f 93       	push	r17
    489c:	cf 93       	push	r28
    489e:	df 93       	push	r29
    48a0:	eb 01       	movw	r28, r22
    48a2:	8a 01       	movw	r16, r20
    48a4:	81 30       	cpi	r24, 0x01	; 1
    48a6:	01 f1       	breq	.+64     	; 0x48e8 <STEPPER_setup_decels+0x50>
    48a8:	81 30       	cpi	r24, 0x01	; 1
    48aa:	18 f0       	brcs	.+6      	; 0x48b2 <STEPPER_setup_decels+0x1a>
    48ac:	82 30       	cpi	r24, 0x02	; 2
    48ae:	61 f5       	brne	.+88     	; 0x4908 <STEPPER_setup_decels+0x70>
    48b0:	0d c0       	rjmp	.+26     	; 0x48cc <STEPPER_setup_decels+0x34>
    48b2:	80 91 a4 06 	lds	r24, 0x06A4
    48b6:	90 91 a5 06 	lds	r25, 0x06A5
    48ba:	89 2b       	or	r24, r25
    48bc:	11 f0       	breq	.+4      	; 0x48c2 <STEPPER_setup_decels+0x2a>
    48be:	80 e0       	ldi	r24, 0x00	; 0
    48c0:	1a c0       	rjmp	.+52     	; 0x48f6 <STEPPER_setup_decels+0x5e>
    48c2:	10 92 b1 06 	sts	0x06B1, r1
    48c6:	10 92 b0 06 	sts	0x06B0, r1
    48ca:	1e c0       	rjmp	.+60     	; 0x4908 <STEPPER_setup_decels+0x70>
    48cc:	80 91 a4 06 	lds	r24, 0x06A4
    48d0:	90 91 a5 06 	lds	r25, 0x06A5
    48d4:	89 2b       	or	r24, r25
    48d6:	21 f0       	breq	.+8      	; 0x48e0 <STEPPER_setup_decels+0x48>
    48d8:	80 e0       	ldi	r24, 0x00	; 0
    48da:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <STEPPER_set_decel_step_values>
    48de:	04 c0       	rjmp	.+8      	; 0x48e8 <STEPPER_setup_decels+0x50>
    48e0:	10 92 b1 06 	sts	0x06B1, r1
    48e4:	10 92 b0 06 	sts	0x06B0, r1
    48e8:	80 91 a6 06 	lds	r24, 0x06A6
    48ec:	90 91 a7 06 	lds	r25, 0x06A7
    48f0:	89 2b       	or	r24, r25
    48f2:	31 f0       	breq	.+12     	; 0x4900 <STEPPER_setup_decels+0x68>
    48f4:	81 e0       	ldi	r24, 0x01	; 1
    48f6:	be 01       	movw	r22, r28
    48f8:	a8 01       	movw	r20, r16
    48fa:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <STEPPER_set_decel_step_values>
    48fe:	04 c0       	rjmp	.+8      	; 0x4908 <STEPPER_setup_decels+0x70>
    4900:	10 92 b3 06 	sts	0x06B3, r1
    4904:	10 92 b2 06 	sts	0x06B2, r1
    4908:	df 91       	pop	r29
    490a:	cf 91       	pop	r28
    490c:	1f 91       	pop	r17
    490e:	0f 91       	pop	r16
    4910:	08 95       	ret

00004912 <SYS_init>:
    4912:	10 92 d3 06 	sts	0x06D3, r1
    4916:	10 92 d4 06 	sts	0x06D4, r1
    491a:	10 92 d8 06 	sts	0x06D8, r1
    491e:	10 92 d5 06 	sts	0x06D5, r1
    4922:	10 92 d7 06 	sts	0x06D7, r1
    4926:	10 92 d9 06 	sts	0x06D9, r1
    492a:	10 92 da 06 	sts	0x06DA, r1
    492e:	10 92 db 06 	sts	0x06DB, r1
    4932:	10 92 dc 06 	sts	0x06DC, r1
    4936:	10 92 dd 06 	sts	0x06DD, r1
    493a:	10 92 de 06 	sts	0x06DE, r1
    493e:	10 92 df 06 	sts	0x06DF, r1
    4942:	10 92 e0 06 	sts	0x06E0, r1
    4946:	10 92 e1 06 	sts	0x06E1, r1
    494a:	10 92 e2 06 	sts	0x06E2, r1
    494e:	10 92 e3 06 	sts	0x06E3, r1
    4952:	10 92 e4 06 	sts	0x06E4, r1
    4956:	08 95       	ret

00004958 <TMRSRVC_insert>:
    4958:	cf 92       	push	r12
    495a:	df 92       	push	r13
    495c:	ef 92       	push	r14
    495e:	ff 92       	push	r15
    4960:	0f 93       	push	r16
    4962:	1f 93       	push	r17
    4964:	cf 93       	push	r28
    4966:	df 93       	push	r29
    4968:	ec 01       	movw	r28, r24
    496a:	80 91 0a 07 	lds	r24, 0x070A
    496e:	88 23       	and	r24, r24
    4970:	39 f4       	brne	.+14     	; 0x4980 <TMRSRVC_insert+0x28>
    4972:	d0 93 0c 07 	sts	0x070C, r29
    4976:	c0 93 0b 07 	sts	0x070B, r28
    497a:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <TMRSRVC_start>
    497e:	47 c0       	rjmp	.+142    	; 0x4a0e <TMRSRVC_insert+0xb6>
    4980:	c0 90 0b 07 	lds	r12, 0x070B
    4984:	d0 90 0c 07 	lds	r13, 0x070C
    4988:	00 e0       	ldi	r16, 0x00	; 0
    498a:	10 e0       	ldi	r17, 0x00	; 0
    498c:	ee 24       	eor	r14, r14
    498e:	ff 24       	eor	r15, r15
    4990:	37 c0       	rjmp	.+110    	; 0x4a00 <TMRSRVC_insert+0xa8>
    4992:	a8 81       	ld	r26, Y
    4994:	b9 81       	ldd	r27, Y+1	; 0x01
    4996:	fd 01       	movw	r30, r26
    4998:	64 81       	ldd	r22, Z+4	; 0x04
    499a:	75 81       	ldd	r23, Z+5	; 0x05
    499c:	f6 01       	movw	r30, r12
    499e:	40 81       	ld	r20, Z
    49a0:	51 81       	ldd	r21, Z+1	; 0x01
    49a2:	fa 01       	movw	r30, r20
    49a4:	84 81       	ldd	r24, Z+4	; 0x04
    49a6:	95 81       	ldd	r25, Z+5	; 0x05
    49a8:	9b 01       	movw	r18, r22
    49aa:	28 1b       	sub	r18, r24
    49ac:	39 0b       	sbc	r19, r25
    49ae:	37 ff       	sbrs	r19, 7
    49b0:	0f c0       	rjmp	.+30     	; 0x49d0 <TMRSRVC_insert+0x78>
    49b2:	86 1b       	sub	r24, r22
    49b4:	97 0b       	sbc	r25, r23
    49b6:	95 83       	std	Z+5, r25	; 0x05
    49b8:	84 83       	std	Z+4, r24	; 0x04
    49ba:	db 82       	std	Y+3, r13	; 0x03
    49bc:	ca 82       	std	Y+2, r12	; 0x02
    49be:	01 2b       	or	r16, r17
    49c0:	29 f4       	brne	.+10     	; 0x49cc <TMRSRVC_insert+0x74>
    49c2:	d0 93 0c 07 	sts	0x070C, r29
    49c6:	c0 93 0b 07 	sts	0x070B, r28
    49ca:	21 c0       	rjmp	.+66     	; 0x4a0e <TMRSRVC_insert+0xb6>
    49cc:	f7 01       	movw	r30, r14
    49ce:	0c c0       	rjmp	.+24     	; 0x49e8 <TMRSRVC_insert+0x90>
    49d0:	f6 01       	movw	r30, r12
    49d2:	82 81       	ldd	r24, Z+2	; 0x02
    49d4:	93 81       	ldd	r25, Z+3	; 0x03
    49d6:	21 15       	cp	r18, r1
    49d8:	31 05       	cpc	r19, r1
    49da:	49 f4       	brne	.+18     	; 0x49ee <TMRSRVC_insert+0x96>
    49dc:	fd 01       	movw	r30, r26
    49de:	15 82       	std	Z+5, r1	; 0x05
    49e0:	14 82       	std	Z+4, r1	; 0x04
    49e2:	9b 83       	std	Y+3, r25	; 0x03
    49e4:	8a 83       	std	Y+2, r24	; 0x02
    49e6:	f6 01       	movw	r30, r12
    49e8:	d3 83       	std	Z+3, r29	; 0x03
    49ea:	c2 83       	std	Z+2, r28	; 0x02
    49ec:	10 c0       	rjmp	.+32     	; 0x4a0e <TMRSRVC_insert+0xb6>
    49ee:	fd 01       	movw	r30, r26
    49f0:	35 83       	std	Z+5, r19	; 0x05
    49f2:	24 83       	std	Z+4, r18	; 0x04
    49f4:	00 97       	sbiw	r24, 0x00	; 0
    49f6:	b9 f3       	breq	.-18     	; 0x49e6 <TMRSRVC_insert+0x8e>
    49f8:	0f 5f       	subi	r16, 0xFF	; 255
    49fa:	1f 4f       	sbci	r17, 0xFF	; 255
    49fc:	76 01       	movw	r14, r12
    49fe:	6c 01       	movw	r12, r24
    4a00:	80 91 0a 07 	lds	r24, 0x070A
    4a04:	90 e0       	ldi	r25, 0x00	; 0
    4a06:	08 17       	cp	r16, r24
    4a08:	19 07       	cpc	r17, r25
    4a0a:	18 f2       	brcs	.-122    	; 0x4992 <TMRSRVC_insert+0x3a>
    4a0c:	ec cf       	rjmp	.-40     	; 0x49e6 <TMRSRVC_insert+0x8e>
    4a0e:	80 91 0a 07 	lds	r24, 0x070A
    4a12:	8f 5f       	subi	r24, 0xFF	; 255
    4a14:	80 93 0a 07 	sts	0x070A, r24
    4a18:	df 91       	pop	r29
    4a1a:	cf 91       	pop	r28
    4a1c:	1f 91       	pop	r17
    4a1e:	0f 91       	pop	r16
    4a20:	ff 90       	pop	r15
    4a22:	ef 90       	pop	r14
    4a24:	df 90       	pop	r13
    4a26:	cf 90       	pop	r12
    4a28:	08 95       	ret

00004a2a <TMRSRVC_open>:
    4a2a:	88 e0       	ldi	r24, 0x08	; 8
    4a2c:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    4a30:	88 23       	and	r24, r24
    4a32:	b9 f4       	brne	.+46     	; 0x4a62 <TMRSRVC_open+0x38>
    4a34:	10 92 0a 07 	sts	0x070A, r1
    4a38:	10 92 0c 07 	sts	0x070C, r1
    4a3c:	10 92 0b 07 	sts	0x070B, r1
    4a40:	10 92 6e 04 	sts	0x046E, r1
    4a44:	10 92 6f 04 	sts	0x046F, r1
    4a48:	80 e1       	ldi	r24, 0x10	; 16
    4a4a:	6f e2       	ldi	r22, 0x2F	; 47
    4a4c:	76 e2       	ldi	r23, 0x26	; 38
    4a4e:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__ISR_attach>
    4a52:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <__TMRSRVC_init>
    4a56:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__TMRSRVC_start>
    4a5a:	88 e0       	ldi	r24, 0x08	; 8
    4a5c:	61 e0       	ldi	r22, 0x01	; 1
    4a5e:	0e 94 c6 1c 	call	0x398c	; 0x398c <SYS_set_state>
    4a62:	88 e0       	ldi	r24, 0x08	; 8
    4a64:	91 e0       	ldi	r25, 0x01	; 1
    4a66:	08 95       	ret

00004a68 <__TMRSRVC_start>:
    4a68:	ee e6       	ldi	r30, 0x6E	; 110
    4a6a:	f0 e0       	ldi	r31, 0x00	; 0
    4a6c:	80 81       	ld	r24, Z
    4a6e:	82 60       	ori	r24, 0x02	; 2
    4a70:	80 83       	st	Z, r24
    4a72:	08 95       	ret

00004a74 <TMRSRVC_start>:
    4a74:	81 e0       	ldi	r24, 0x01	; 1
    4a76:	80 93 6f 04 	sts	0x046F, r24
    4a7a:	08 95       	ret

00004a7c <I2C_enable>:
    4a7c:	80 91 0d 07 	lds	r24, 0x070D
    4a80:	81 30       	cpi	r24, 0x01	; 1
    4a82:	29 f4       	brne	.+10     	; 0x4a8e <I2C_enable+0x12>
    4a84:	80 91 bc 00 	lds	r24, 0x00BC
    4a88:	84 60       	ori	r24, 0x04	; 4
    4a8a:	80 93 bc 00 	sts	0x00BC, r24
    4a8e:	08 95       	ret

00004a90 <__I2C_init>:
    4a90:	38 98       	cbi	0x07, 0	; 7
    4a92:	39 98       	cbi	0x07, 1	; 7
    4a94:	08 95       	ret

00004a96 <__ISR_attach>:
    4a96:	80 32       	cpi	r24, 0x20	; 32
    4a98:	18 f0       	brcs	.+6      	; 0x4aa0 <__ISR_attach+0xa>
    4a9a:	20 e0       	ldi	r18, 0x00	; 0
    4a9c:	30 e0       	ldi	r19, 0x00	; 0
    4a9e:	0a c0       	rjmp	.+20     	; 0x4ab4 <__ISR_attach+0x1e>
    4aa0:	e8 2f       	mov	r30, r24
    4aa2:	f0 e0       	ldi	r31, 0x00	; 0
    4aa4:	ee 0f       	add	r30, r30
    4aa6:	ff 1f       	adc	r31, r31
    4aa8:	e2 5f       	subi	r30, 0xF2	; 242
    4aaa:	fb 4f       	sbci	r31, 0xFB	; 251
    4aac:	20 81       	ld	r18, Z
    4aae:	31 81       	ldd	r19, Z+1	; 0x01
    4ab0:	71 83       	std	Z+1, r23	; 0x01
    4ab2:	60 83       	st	Z, r22
    4ab4:	c9 01       	movw	r24, r18
    4ab6:	08 95       	ret

00004ab8 <__ATMEGA_init>:
    4ab8:	24 9a       	sbi	0x04, 4	; 4
    4aba:	2c 9a       	sbi	0x05, 4	; 5
    4abc:	08 95       	ret

00004abe <SPI_default_config>:
    4abe:	83 e5       	ldi	r24, 0x53	; 83
    4ac0:	8c bd       	out	0x2c, r24	; 44
    4ac2:	81 e0       	ldi	r24, 0x01	; 1
    4ac4:	8d bd       	out	0x2d, r24	; 45
    4ac6:	8d e0       	ldi	r24, 0x0D	; 13
    4ac8:	8a 95       	dec	r24
    4aca:	f1 f7       	brne	.-4      	; 0x4ac8 <SPI_default_config+0xa>
    4acc:	08 95       	ret

00004ace <SPI_ATtiny0_config>:
    4ace:	83 e5       	ldi	r24, 0x53	; 83
    4ad0:	8c bd       	out	0x2c, r24	; 44
    4ad2:	1d bc       	out	0x2d, r1	; 45
    4ad4:	84 ef       	ldi	r24, 0xF4	; 244
    4ad6:	91 e0       	ldi	r25, 0x01	; 1
    4ad8:	01 97       	sbiw	r24, 0x01	; 1
    4ada:	f1 f7       	brne	.-4      	; 0x4ad8 <SPI_ATtiny0_config+0xa>
    4adc:	08 95       	ret

00004ade <SPI_PSXC_config>:
    4ade:	8f e7       	ldi	r24, 0x7F	; 127
    4ae0:	8c bd       	out	0x2c, r24	; 44
    4ae2:	1d bc       	out	0x2d, r1	; 45
    4ae4:	84 ef       	ldi	r24, 0xF4	; 244
    4ae6:	91 e0       	ldi	r25, 0x01	; 1
    4ae8:	01 97       	sbiw	r24, 0x01	; 1
    4aea:	f1 f7       	brne	.-4      	; 0x4ae8 <SPI_PSXC_config+0xa>
    4aec:	08 95       	ret

00004aee <SPI_LCD_config>:
    4aee:	83 e5       	ldi	r24, 0x53	; 83
    4af0:	8c bd       	out	0x2c, r24	; 44
    4af2:	81 e0       	ldi	r24, 0x01	; 1
    4af4:	8d bd       	out	0x2d, r24	; 45
    4af6:	8d e0       	ldi	r24, 0x0D	; 13
    4af8:	8a 95       	dec	r24
    4afa:	f1 f7       	brne	.-4      	; 0x4af8 <SPI_LCD_config+0xa>
    4afc:	08 95       	ret

00004afe <SPI_FLASH_config>:
    4afe:	83 e5       	ldi	r24, 0x53	; 83
    4b00:	8c bd       	out	0x2c, r24	; 44
    4b02:	81 e0       	ldi	r24, 0x01	; 1
    4b04:	8d bd       	out	0x2d, r24	; 45
    4b06:	84 ef       	ldi	r24, 0xF4	; 244
    4b08:	91 e0       	ldi	r25, 0x01	; 1
    4b0a:	01 97       	sbiw	r24, 0x01	; 1
    4b0c:	f1 f7       	brne	.-4      	; 0x4b0a <SPI_FLASH_config+0xc>
    4b0e:	08 95       	ret

00004b10 <__SPI_init>:
    4b10:	25 9a       	sbi	0x04, 5	; 4
    4b12:	26 98       	cbi	0x04, 6	; 4
    4b14:	27 9a       	sbi	0x04, 7	; 4
    4b16:	20 9a       	sbi	0x04, 0	; 4
    4b18:	21 9a       	sbi	0x04, 1	; 4
    4b1a:	22 9a       	sbi	0x04, 2	; 4
    4b1c:	08 95       	ret

00004b1e <SPKR_beep>:
    4b1e:	9b 01       	movw	r18, r22
    4b20:	ac 01       	movw	r20, r24
    4b22:	80 91 5f 04 	lds	r24, 0x045F
    4b26:	88 23       	and	r24, r24
    4b28:	81 f0       	breq	.+32     	; 0x4b4a <SPKR_beep+0x2c>
    4b2a:	da 01       	movw	r26, r20
    4b2c:	c9 01       	movw	r24, r18
    4b2e:	88 0f       	add	r24, r24
    4b30:	99 1f       	adc	r25, r25
    4b32:	aa 1f       	adc	r26, r26
    4b34:	bb 1f       	adc	r27, r27
    4b36:	90 93 6b 04 	sts	0x046B, r25
    4b3a:	80 93 6a 04 	sts	0x046A, r24
    4b3e:	21 15       	cp	r18, r1
    4b40:	31 05       	cpc	r19, r1
    4b42:	41 05       	cpc	r20, r1
    4b44:	51 05       	cpc	r21, r1
    4b46:	09 f4       	brne	.+2      	; 0x4b4a <SPKR_beep+0x2c>
    4b48:	5f 98       	cbi	0x0b, 7	; 11
    4b4a:	08 95       	ret

00004b4c <__SPKR_close>:
    4b4c:	82 30       	cpi	r24, 0x02	; 2
    4b4e:	29 f4       	brne	.+10     	; 0x4b5a <__SPKR_close+0xe>
    4b50:	80 91 81 00 	lds	r24, 0x0081
    4b54:	8e 7f       	andi	r24, 0xFE	; 254
    4b56:	80 93 81 00 	sts	0x0081, r24
    4b5a:	80 91 5e 04 	lds	r24, 0x045E
    4b5e:	81 30       	cpi	r24, 0x01	; 1
    4b60:	31 f4       	brne	.+12     	; 0x4b6e <__SPKR_close+0x22>
    4b62:	80 91 5f 04 	lds	r24, 0x045F
    4b66:	81 30       	cpi	r24, 0x01	; 1
    4b68:	11 f4       	brne	.+4      	; 0x4b6e <__SPKR_close+0x22>
    4b6a:	00 00       	nop
    4b6c:	08 95       	ret
    4b6e:	80 91 5e 04 	lds	r24, 0x045E
    4b72:	81 30       	cpi	r24, 0x01	; 1
    4b74:	21 f0       	breq	.+8      	; 0x4b7e <__SPKR_close+0x32>
    4b76:	80 91 5f 04 	lds	r24, 0x045F
    4b7a:	81 30       	cpi	r24, 0x01	; 1
    4b7c:	11 f4       	brne	.+4      	; 0x4b82 <__SPKR_close+0x36>
    4b7e:	5f 98       	cbi	0x0b, 7	; 11
    4b80:	57 98       	cbi	0x0a, 7	; 10
    4b82:	08 95       	ret

00004b84 <STEPPER_set_decel_step_values>:
    4b84:	ef 92       	push	r14
    4b86:	ff 92       	push	r15
    4b88:	0f 93       	push	r16
    4b8a:	1f 93       	push	r17
    4b8c:	cf 93       	push	r28
    4b8e:	df 93       	push	r29
    4b90:	eb 01       	movw	r28, r22
    4b92:	88 23       	and	r24, r24
    4b94:	21 f0       	breq	.+8      	; 0x4b9e <STEPPER_set_decel_step_values+0x1a>
    4b96:	81 30       	cpi	r24, 0x01	; 1
    4b98:	09 f0       	breq	.+2      	; 0x4b9c <STEPPER_set_decel_step_values+0x18>
    4b9a:	5a c0       	rjmp	.+180    	; 0x4c50 <STEPPER_set_decel_step_values+0xcc>
    4b9c:	2d c0       	rjmp	.+90     	; 0x4bf8 <STEPPER_set_decel_step_values+0x74>
    4b9e:	9a 01       	movw	r18, r20
    4ba0:	40 e0       	ldi	r20, 0x00	; 0
    4ba2:	50 e0       	ldi	r21, 0x00	; 0
    4ba4:	ca 01       	movw	r24, r20
    4ba6:	b9 01       	movw	r22, r18
    4ba8:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__mulsi3>
    4bac:	20 91 a4 06 	lds	r18, 0x06A4
    4bb0:	30 91 a5 06 	lds	r19, 0x06A5
    4bb4:	22 0f       	add	r18, r18
    4bb6:	33 1f       	adc	r19, r19
    4bb8:	40 e0       	ldi	r20, 0x00	; 0
    4bba:	50 e0       	ldi	r21, 0x00	; 0
    4bbc:	0e 94 26 31 	call	0x624c	; 0x624c <__udivmodsi4>
    4bc0:	79 01       	movw	r14, r18
    4bc2:	8a 01       	movw	r16, r20
    4bc4:	a8 01       	movw	r20, r16
    4bc6:	97 01       	movw	r18, r14
    4bc8:	22 0f       	add	r18, r18
    4bca:	33 1f       	adc	r19, r19
    4bcc:	44 1f       	adc	r20, r20
    4bce:	55 1f       	adc	r21, r21
    4bd0:	ce 01       	movw	r24, r28
    4bd2:	a0 e0       	ldi	r26, 0x00	; 0
    4bd4:	b0 e0       	ldi	r27, 0x00	; 0
    4bd6:	82 17       	cp	r24, r18
    4bd8:	93 07       	cpc	r25, r19
    4bda:	a4 07       	cpc	r26, r20
    4bdc:	b5 07       	cpc	r27, r21
    4bde:	28 f0       	brcs	.+10     	; 0x4bea <STEPPER_set_decel_step_values+0x66>
    4be0:	f0 92 b1 06 	sts	0x06B1, r15
    4be4:	e0 92 b0 06 	sts	0x06B0, r14
    4be8:	33 c0       	rjmp	.+102    	; 0x4c50 <STEPPER_set_decel_step_values+0xcc>
    4bea:	d6 95       	lsr	r29
    4bec:	c7 95       	ror	r28
    4bee:	d0 93 b1 06 	sts	0x06B1, r29
    4bf2:	c0 93 b0 06 	sts	0x06B0, r28
    4bf6:	2c c0       	rjmp	.+88     	; 0x4c50 <STEPPER_set_decel_step_values+0xcc>
    4bf8:	9a 01       	movw	r18, r20
    4bfa:	40 e0       	ldi	r20, 0x00	; 0
    4bfc:	50 e0       	ldi	r21, 0x00	; 0
    4bfe:	ca 01       	movw	r24, r20
    4c00:	b9 01       	movw	r22, r18
    4c02:	0e 94 f4 30 	call	0x61e8	; 0x61e8 <__mulsi3>
    4c06:	20 91 a6 06 	lds	r18, 0x06A6
    4c0a:	30 91 a7 06 	lds	r19, 0x06A7
    4c0e:	22 0f       	add	r18, r18
    4c10:	33 1f       	adc	r19, r19
    4c12:	40 e0       	ldi	r20, 0x00	; 0
    4c14:	50 e0       	ldi	r21, 0x00	; 0
    4c16:	0e 94 26 31 	call	0x624c	; 0x624c <__udivmodsi4>
    4c1a:	79 01       	movw	r14, r18
    4c1c:	8a 01       	movw	r16, r20
    4c1e:	a8 01       	movw	r20, r16
    4c20:	97 01       	movw	r18, r14
    4c22:	22 0f       	add	r18, r18
    4c24:	33 1f       	adc	r19, r19
    4c26:	44 1f       	adc	r20, r20
    4c28:	55 1f       	adc	r21, r21
    4c2a:	ce 01       	movw	r24, r28
    4c2c:	a0 e0       	ldi	r26, 0x00	; 0
    4c2e:	b0 e0       	ldi	r27, 0x00	; 0
    4c30:	82 17       	cp	r24, r18
    4c32:	93 07       	cpc	r25, r19
    4c34:	a4 07       	cpc	r26, r20
    4c36:	b5 07       	cpc	r27, r21
    4c38:	28 f0       	brcs	.+10     	; 0x4c44 <STEPPER_set_decel_step_values+0xc0>
    4c3a:	f0 92 b3 06 	sts	0x06B3, r15
    4c3e:	e0 92 b2 06 	sts	0x06B2, r14
    4c42:	06 c0       	rjmp	.+12     	; 0x4c50 <STEPPER_set_decel_step_values+0xcc>
    4c44:	d6 95       	lsr	r29
    4c46:	c7 95       	ror	r28
    4c48:	d0 93 b3 06 	sts	0x06B3, r29
    4c4c:	c0 93 b2 06 	sts	0x06B2, r28
    4c50:	df 91       	pop	r29
    4c52:	cf 91       	pop	r28
    4c54:	1f 91       	pop	r17
    4c56:	0f 91       	pop	r16
    4c58:	ff 90       	pop	r15
    4c5a:	ef 90       	pop	r14
    4c5c:	08 95       	ret

00004c5e <__TIMER0_COMPA_vect>:
    4c5e:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <TMRSRVC_tick>
    4c62:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <STEPPER_clk>
    4c66:	0e 94 58 26 	call	0x4cb0	; 0x4cb0 <SPKR_beep_clk>
    4c6a:	08 95       	ret

00004c6c <__TMRSRVC_init>:
    4c6c:	84 b5       	in	r24, 0x24	; 36
    4c6e:	82 60       	ori	r24, 0x02	; 2
    4c70:	84 bd       	out	0x24, r24	; 36
    4c72:	85 b5       	in	r24, 0x25	; 37
    4c74:	84 60       	ori	r24, 0x04	; 4
    4c76:	85 bd       	out	0x25, r24	; 37
    4c78:	8e e4       	ldi	r24, 0x4E	; 78
    4c7a:	87 bd       	out	0x27, r24	; 39
    4c7c:	08 95       	ret

00004c7e <TMRSRVC_tick>:
    4c7e:	88 e0       	ldi	r24, 0x08	; 8
    4c80:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    4c84:	88 23       	and	r24, r24
    4c86:	11 f4       	brne	.+4      	; 0x4c8c <TMRSRVC_tick+0xe>
    4c88:	84 e0       	ldi	r24, 0x04	; 4
    4c8a:	08 95       	ret
    4c8c:	80 91 6f 04 	lds	r24, 0x046F
    4c90:	88 23       	and	r24, r24
    4c92:	11 f4       	brne	.+4      	; 0x4c98 <TMRSRVC_tick+0x1a>
    4c94:	83 e0       	ldi	r24, 0x03	; 3
    4c96:	08 95       	ret
    4c98:	80 91 6e 04 	lds	r24, 0x046E
    4c9c:	88 23       	and	r24, r24
    4c9e:	11 f0       	breq	.+4      	; 0x4ca4 <TMRSRVC_tick+0x26>
    4ca0:	82 e0       	ldi	r24, 0x02	; 2
    4ca2:	08 95       	ret
    4ca4:	0e 94 cc 28 	call	0x5198	; 0x5198 <TMRSRVC_process>
    4ca8:	81 30       	cpi	r24, 0x01	; 1
    4caa:	e1 f3       	breq	.-8      	; 0x4ca4 <TMRSRVC_tick+0x26>
    4cac:	80 e0       	ldi	r24, 0x00	; 0
    4cae:	08 95       	ret

00004cb0 <SPKR_beep_clk>:
    4cb0:	80 91 5f 04 	lds	r24, 0x045F
    4cb4:	81 30       	cpi	r24, 0x01	; 1
    4cb6:	11 f5       	brne	.+68     	; 0x4cfc <SPKR_beep_clk+0x4c>
    4cb8:	80 91 68 04 	lds	r24, 0x0468
    4cbc:	90 91 69 04 	lds	r25, 0x0469
    4cc0:	20 91 6a 04 	lds	r18, 0x046A
    4cc4:	30 91 6b 04 	lds	r19, 0x046B
    4cc8:	28 0f       	add	r18, r24
    4cca:	39 1f       	adc	r19, r25
    4ccc:	30 93 69 04 	sts	0x0469, r19
    4cd0:	20 93 68 04 	sts	0x0468, r18
    4cd4:	80 91 68 04 	lds	r24, 0x0468
    4cd8:	90 91 69 04 	lds	r25, 0x0469
    4cdc:	88 5e       	subi	r24, 0xE8	; 232
    4cde:	93 40       	sbci	r25, 0x03	; 3
    4ce0:	6c f0       	brlt	.+26     	; 0x4cfc <SPKR_beep_clk+0x4c>
    4ce2:	8b b1       	in	r24, 0x0b	; 11
    4ce4:	80 58       	subi	r24, 0x80	; 128
    4ce6:	8b b9       	out	0x0b, r24	; 11
    4ce8:	80 91 68 04 	lds	r24, 0x0468
    4cec:	90 91 69 04 	lds	r25, 0x0469
    4cf0:	88 5e       	subi	r24, 0xE8	; 232
    4cf2:	93 40       	sbci	r25, 0x03	; 3
    4cf4:	90 93 69 04 	sts	0x0469, r25
    4cf8:	80 93 68 04 	sts	0x0468, r24
    4cfc:	08 95       	ret

00004cfe <STEPPER_clk>:
    4cfe:	87 e0       	ldi	r24, 0x07	; 7
    4d00:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <SYS_get_state>
    4d04:	81 30       	cpi	r24, 0x01	; 1
    4d06:	09 f0       	breq	.+2      	; 0x4d0a <STEPPER_clk+0xc>
    4d08:	aa c0       	rjmp	.+340    	; 0x4e5e <STEPPER_clk+0x160>
    4d0a:	80 91 a4 06 	lds	r24, 0x06A4
    4d0e:	90 91 a5 06 	lds	r25, 0x06A5
    4d12:	89 2b       	or	r24, r25
    4d14:	09 f1       	breq	.+66     	; 0x4d58 <STEPPER_clk+0x5a>
    4d16:	80 91 c8 06 	lds	r24, 0x06C8
    4d1a:	90 91 c9 06 	lds	r25, 0x06C9
    4d1e:	20 91 a4 06 	lds	r18, 0x06A4
    4d22:	30 91 a5 06 	lds	r19, 0x06A5
    4d26:	82 0f       	add	r24, r18
    4d28:	93 1f       	adc	r25, r19
    4d2a:	90 93 c9 06 	sts	0x06C9, r25
    4d2e:	80 93 c8 06 	sts	0x06C8, r24
    4d32:	80 91 c8 06 	lds	r24, 0x06C8
    4d36:	90 91 c9 06 	lds	r25, 0x06C9
    4d3a:	88 5e       	subi	r24, 0xE8	; 232
    4d3c:	93 40       	sbci	r25, 0x03	; 3
    4d3e:	a4 f0       	brlt	.+40     	; 0x4d68 <STEPPER_clk+0x6a>
    4d40:	80 91 c8 06 	lds	r24, 0x06C8
    4d44:	90 91 c9 06 	lds	r25, 0x06C9
    4d48:	88 5e       	subi	r24, 0xE8	; 232
    4d4a:	93 40       	sbci	r25, 0x03	; 3
    4d4c:	90 93 c9 06 	sts	0x06C9, r25
    4d50:	80 93 c8 06 	sts	0x06C8, r24
    4d54:	41 e0       	ldi	r20, 0x01	; 1
    4d56:	09 c0       	rjmp	.+18     	; 0x4d6a <STEPPER_clk+0x6c>
    4d58:	80 91 9c 06 	lds	r24, 0x069C
    4d5c:	90 91 9d 06 	lds	r25, 0x069D
    4d60:	90 93 a1 06 	sts	0x06A1, r25
    4d64:	80 93 a0 06 	sts	0x06A0, r24
    4d68:	40 e0       	ldi	r20, 0x00	; 0
    4d6a:	80 91 a6 06 	lds	r24, 0x06A6
    4d6e:	90 91 a7 06 	lds	r25, 0x06A7
    4d72:	89 2b       	or	r24, r25
    4d74:	09 f1       	breq	.+66     	; 0x4db8 <STEPPER_clk+0xba>
    4d76:	80 91 ca 06 	lds	r24, 0x06CA
    4d7a:	90 91 cb 06 	lds	r25, 0x06CB
    4d7e:	20 91 a6 06 	lds	r18, 0x06A6
    4d82:	30 91 a7 06 	lds	r19, 0x06A7
    4d86:	82 0f       	add	r24, r18
    4d88:	93 1f       	adc	r25, r19
    4d8a:	90 93 cb 06 	sts	0x06CB, r25
    4d8e:	80 93 ca 06 	sts	0x06CA, r24
    4d92:	80 91 ca 06 	lds	r24, 0x06CA
    4d96:	90 91 cb 06 	lds	r25, 0x06CB
    4d9a:	88 5e       	subi	r24, 0xE8	; 232
    4d9c:	93 40       	sbci	r25, 0x03	; 3
    4d9e:	a4 f0       	brlt	.+40     	; 0x4dc8 <STEPPER_clk+0xca>
    4da0:	80 91 ca 06 	lds	r24, 0x06CA
    4da4:	90 91 cb 06 	lds	r25, 0x06CB
    4da8:	88 5e       	subi	r24, 0xE8	; 232
    4daa:	93 40       	sbci	r25, 0x03	; 3
    4dac:	90 93 cb 06 	sts	0x06CB, r25
    4db0:	80 93 ca 06 	sts	0x06CA, r24
    4db4:	61 e0       	ldi	r22, 0x01	; 1
    4db6:	09 c0       	rjmp	.+18     	; 0x4dca <STEPPER_clk+0xcc>
    4db8:	80 91 9e 06 	lds	r24, 0x069E
    4dbc:	90 91 9f 06 	lds	r25, 0x069F
    4dc0:	90 93 a3 06 	sts	0x06A3, r25
    4dc4:	80 93 a2 06 	sts	0x06A2, r24
    4dc8:	60 e0       	ldi	r22, 0x00	; 0
    4dca:	84 2f       	mov	r24, r20
    4dcc:	0e 94 30 27 	call	0x4e60	; 0x4e60 <STEPPER_process_accel>
    4dd0:	80 91 c4 06 	lds	r24, 0x06C4
    4dd4:	90 91 c5 06 	lds	r25, 0x06C5
    4dd8:	20 91 a0 06 	lds	r18, 0x06A0
    4ddc:	30 91 a1 06 	lds	r19, 0x06A1
    4de0:	28 0f       	add	r18, r24
    4de2:	39 1f       	adc	r19, r25
    4de4:	30 93 c5 06 	sts	0x06C5, r19
    4de8:	20 93 c4 06 	sts	0x06C4, r18
    4dec:	80 91 c4 06 	lds	r24, 0x06C4
    4df0:	90 91 c5 06 	lds	r25, 0x06C5
    4df4:	88 5e       	subi	r24, 0xE8	; 232
    4df6:	93 40       	sbci	r25, 0x03	; 3
    4df8:	14 f4       	brge	.+4      	; 0x4dfe <STEPPER_clk+0x100>
    4dfa:	40 e0       	ldi	r20, 0x00	; 0
    4dfc:	0b c0       	rjmp	.+22     	; 0x4e14 <STEPPER_clk+0x116>
    4dfe:	80 91 c4 06 	lds	r24, 0x06C4
    4e02:	90 91 c5 06 	lds	r25, 0x06C5
    4e06:	88 5e       	subi	r24, 0xE8	; 232
    4e08:	93 40       	sbci	r25, 0x03	; 3
    4e0a:	90 93 c5 06 	sts	0x06C5, r25
    4e0e:	80 93 c4 06 	sts	0x06C4, r24
    4e12:	41 e0       	ldi	r20, 0x01	; 1
    4e14:	80 91 c6 06 	lds	r24, 0x06C6
    4e18:	90 91 c7 06 	lds	r25, 0x06C7
    4e1c:	20 91 a2 06 	lds	r18, 0x06A2
    4e20:	30 91 a3 06 	lds	r19, 0x06A3
    4e24:	28 0f       	add	r18, r24
    4e26:	39 1f       	adc	r19, r25
    4e28:	30 93 c7 06 	sts	0x06C7, r19
    4e2c:	20 93 c6 06 	sts	0x06C6, r18
    4e30:	80 91 c6 06 	lds	r24, 0x06C6
    4e34:	90 91 c7 06 	lds	r25, 0x06C7
    4e38:	88 5e       	subi	r24, 0xE8	; 232
    4e3a:	93 40       	sbci	r25, 0x03	; 3
    4e3c:	14 f4       	brge	.+4      	; 0x4e42 <STEPPER_clk+0x144>
    4e3e:	60 e0       	ldi	r22, 0x00	; 0
    4e40:	0b c0       	rjmp	.+22     	; 0x4e58 <STEPPER_clk+0x15a>
    4e42:	80 91 c6 06 	lds	r24, 0x06C6
    4e46:	90 91 c7 06 	lds	r25, 0x06C7
    4e4a:	88 5e       	subi	r24, 0xE8	; 232
    4e4c:	93 40       	sbci	r25, 0x03	; 3
    4e4e:	90 93 c7 06 	sts	0x06C7, r25
    4e52:	80 93 c6 06 	sts	0x06C6, r24
    4e56:	61 e0       	ldi	r22, 0x01	; 1
    4e58:	84 2f       	mov	r24, r20
    4e5a:	0e 94 75 27 	call	0x4eea	; 0x4eea <STEPPER_process_run_mode>
    4e5e:	08 95       	ret

00004e60 <STEPPER_process_accel>:
    4e60:	88 23       	and	r24, r24
    4e62:	f1 f0       	breq	.+60     	; 0x4ea0 <STEPPER_process_accel+0x40>
    4e64:	20 91 9c 06 	lds	r18, 0x069C
    4e68:	30 91 9d 06 	lds	r19, 0x069D
    4e6c:	80 91 a0 06 	lds	r24, 0x06A0
    4e70:	90 91 a1 06 	lds	r25, 0x06A1
    4e74:	28 1b       	sub	r18, r24
    4e76:	39 0b       	sbc	r19, r25
    4e78:	12 16       	cp	r1, r18
    4e7a:	13 06       	cpc	r1, r19
    4e7c:	34 f4       	brge	.+12     	; 0x4e8a <STEPPER_process_accel+0x2a>
    4e7e:	80 91 a0 06 	lds	r24, 0x06A0
    4e82:	90 91 a1 06 	lds	r25, 0x06A1
    4e86:	01 96       	adiw	r24, 0x01	; 1
    4e88:	07 c0       	rjmp	.+14     	; 0x4e98 <STEPPER_process_accel+0x38>
    4e8a:	23 2b       	or	r18, r19
    4e8c:	49 f0       	breq	.+18     	; 0x4ea0 <STEPPER_process_accel+0x40>
    4e8e:	80 91 a0 06 	lds	r24, 0x06A0
    4e92:	90 91 a1 06 	lds	r25, 0x06A1
    4e96:	01 97       	sbiw	r24, 0x01	; 1
    4e98:	90 93 a1 06 	sts	0x06A1, r25
    4e9c:	80 93 a0 06 	sts	0x06A0, r24
    4ea0:	66 23       	and	r22, r22
    4ea2:	11 f1       	breq	.+68     	; 0x4ee8 <STEPPER_process_accel+0x88>
    4ea4:	20 91 9e 06 	lds	r18, 0x069E
    4ea8:	30 91 9f 06 	lds	r19, 0x069F
    4eac:	80 91 a2 06 	lds	r24, 0x06A2
    4eb0:	90 91 a3 06 	lds	r25, 0x06A3
    4eb4:	28 1b       	sub	r18, r24
    4eb6:	39 0b       	sbc	r19, r25
    4eb8:	12 16       	cp	r1, r18
    4eba:	13 06       	cpc	r1, r19
    4ebc:	54 f4       	brge	.+20     	; 0x4ed2 <STEPPER_process_accel+0x72>
    4ebe:	80 91 a2 06 	lds	r24, 0x06A2
    4ec2:	90 91 a3 06 	lds	r25, 0x06A3
    4ec6:	01 96       	adiw	r24, 0x01	; 1
    4ec8:	90 93 a3 06 	sts	0x06A3, r25
    4ecc:	80 93 a2 06 	sts	0x06A2, r24
    4ed0:	08 95       	ret
    4ed2:	23 2b       	or	r18, r19
    4ed4:	49 f0       	breq	.+18     	; 0x4ee8 <STEPPER_process_accel+0x88>
    4ed6:	80 91 a2 06 	lds	r24, 0x06A2
    4eda:	90 91 a3 06 	lds	r25, 0x06A3
    4ede:	01 97       	sbiw	r24, 0x01	; 1
    4ee0:	90 93 a3 06 	sts	0x06A3, r25
    4ee4:	80 93 a2 06 	sts	0x06A2, r24
    4ee8:	08 95       	ret

00004eea <STEPPER_process_run_mode>:
    4eea:	0f 93       	push	r16
    4eec:	1f 93       	push	r17
    4eee:	18 2f       	mov	r17, r24
    4ef0:	06 2f       	mov	r16, r22
    4ef2:	80 91 d0 06 	lds	r24, 0x06D0
    4ef6:	88 23       	and	r24, r24
    4ef8:	09 f0       	breq	.+2      	; 0x4efc <STEPPER_process_run_mode+0x12>
    4efa:	e7 c0       	rjmp	.+462    	; 0x50ca <STEPPER_process_run_mode+0x1e0>
    4efc:	80 91 b8 06 	lds	r24, 0x06B8
    4f00:	88 23       	and	r24, r24
    4f02:	09 f0       	breq	.+2      	; 0x4f06 <STEPPER_process_run_mode+0x1c>
    4f04:	5a c0       	rjmp	.+180    	; 0x4fba <STEPPER_process_run_mode+0xd0>
    4f06:	80 91 a0 06 	lds	r24, 0x06A0
    4f0a:	90 91 a1 06 	lds	r25, 0x06A1
    4f0e:	89 2b       	or	r24, r25
    4f10:	e9 f4       	brne	.+58     	; 0x4f4c <STEPPER_process_run_mode+0x62>
    4f12:	80 91 70 04 	lds	r24, 0x0470
    4f16:	83 7e       	andi	r24, 0xE3	; 227
    4f18:	80 93 70 04 	sts	0x0470, r24
    4f1c:	10 92 c1 06 	sts	0x06C1, r1
    4f20:	80 91 cc 06 	lds	r24, 0x06CC
    4f24:	88 23       	and	r24, r24
    4f26:	09 f4       	brne	.+2      	; 0x4f2a <STEPPER_process_run_mode+0x40>
    4f28:	5d c0       	rjmp	.+186    	; 0x4fe4 <STEPPER_process_run_mode+0xfa>
    4f2a:	60 91 ba 06 	lds	r22, 0x06BA
    4f2e:	80 e0       	ldi	r24, 0x00	; 0
    4f30:	0e 94 0b 1c 	call	0x3816	; 0x3816 <STEPPER_stop>
    4f34:	e0 91 ce 06 	lds	r30, 0x06CE
    4f38:	f0 91 cf 06 	lds	r31, 0x06CF
    4f3c:	30 97       	sbiw	r30, 0x00	; 0
    4f3e:	09 f4       	brne	.+2      	; 0x4f42 <STEPPER_process_run_mode+0x58>
    4f40:	51 c0       	rjmp	.+162    	; 0x4fe4 <STEPPER_process_run_mode+0xfa>
    4f42:	81 e0       	ldi	r24, 0x01	; 1
    4f44:	80 83       	st	Z, r24
    4f46:	10 92 cc 06 	sts	0x06CC, r1
    4f4a:	4c c0       	rjmp	.+152    	; 0x4fe4 <STEPPER_process_run_mode+0xfa>
    4f4c:	80 91 9a 06 	lds	r24, 0x069A
    4f50:	81 30       	cpi	r24, 0x01	; 1
    4f52:	41 f4       	brne	.+16     	; 0x4f64 <STEPPER_process_run_mode+0x7a>
    4f54:	80 91 ac 06 	lds	r24, 0x06AC
    4f58:	90 91 ad 06 	lds	r25, 0x06AD
    4f5c:	01 97       	sbiw	r24, 0x01	; 1
    4f5e:	11 f4       	brne	.+4      	; 0x4f64 <STEPPER_process_run_mode+0x7a>
    4f60:	11 e0       	ldi	r17, 0x01	; 1
    4f62:	02 c0       	rjmp	.+4      	; 0x4f68 <STEPPER_process_run_mode+0x7e>
    4f64:	11 23       	and	r17, r17
    4f66:	f1 f1       	breq	.+124    	; 0x4fe4 <STEPPER_process_run_mode+0xfa>
    4f68:	e0 91 bf 06 	lds	r30, 0x06BF
    4f6c:	f0 e0       	ldi	r31, 0x00	; 0
    4f6e:	e7 57       	subi	r30, 0x77	; 119
    4f70:	fc 4f       	sbci	r31, 0xFC	; 252
    4f72:	90 91 70 04 	lds	r25, 0x0470
    4f76:	93 7e       	andi	r25, 0xE3	; 227
    4f78:	80 81       	ld	r24, Z
    4f7a:	89 2b       	or	r24, r25
    4f7c:	80 93 70 04 	sts	0x0470, r24
    4f80:	80 91 bd 06 	lds	r24, 0x06BD
    4f84:	88 23       	and	r24, r24
    4f86:	21 f4       	brne	.+8      	; 0x4f90 <STEPPER_process_run_mode+0xa6>
    4f88:	80 91 bf 06 	lds	r24, 0x06BF
    4f8c:	8f 5f       	subi	r24, 0xFF	; 255
    4f8e:	03 c0       	rjmp	.+6      	; 0x4f96 <STEPPER_process_run_mode+0xac>
    4f90:	80 91 bf 06 	lds	r24, 0x06BF
    4f94:	81 50       	subi	r24, 0x01	; 1
    4f96:	80 93 bf 06 	sts	0x06BF, r24
    4f9a:	80 91 bf 06 	lds	r24, 0x06BF
    4f9e:	83 70       	andi	r24, 0x03	; 3
    4fa0:	80 93 bf 06 	sts	0x06BF, r24
    4fa4:	81 e0       	ldi	r24, 0x01	; 1
    4fa6:	80 93 c1 06 	sts	0x06C1, r24
    4faa:	80 91 9a 06 	lds	r24, 0x069A
    4fae:	81 30       	cpi	r24, 0x01	; 1
    4fb0:	c9 f4       	brne	.+50     	; 0x4fe4 <STEPPER_process_run_mode+0xfa>
    4fb2:	80 e0       	ldi	r24, 0x00	; 0
    4fb4:	0e 94 78 28 	call	0x50f0	; 0x50f0 <STEPPER_process_step_mode>
    4fb8:	15 c0       	rjmp	.+42     	; 0x4fe4 <STEPPER_process_run_mode+0xfa>
    4fba:	90 91 70 04 	lds	r25, 0x0470
    4fbe:	93 7e       	andi	r25, 0xE3	; 227
    4fc0:	90 93 70 04 	sts	0x0470, r25
    4fc4:	e0 91 bf 06 	lds	r30, 0x06BF
    4fc8:	f0 e0       	ldi	r31, 0x00	; 0
    4fca:	e7 57       	subi	r30, 0x77	; 119
    4fcc:	fc 4f       	sbci	r31, 0xFC	; 252
    4fce:	80 81       	ld	r24, Z
    4fd0:	89 2b       	or	r24, r25
    4fd2:	80 93 70 04 	sts	0x0470, r24
    4fd6:	82 e0       	ldi	r24, 0x02	; 2
    4fd8:	80 93 c1 06 	sts	0x06C1, r24
    4fdc:	10 92 a1 06 	sts	0x06A1, r1
    4fe0:	10 92 a0 06 	sts	0x06A0, r1
    4fe4:	80 91 b9 06 	lds	r24, 0x06B9
    4fe8:	88 23       	and	r24, r24
    4fea:	09 f0       	breq	.+2      	; 0x4fee <STEPPER_process_run_mode+0x104>
    4fec:	59 c0       	rjmp	.+178    	; 0x50a0 <STEPPER_process_run_mode+0x1b6>
    4fee:	80 91 a2 06 	lds	r24, 0x06A2
    4ff2:	90 91 a3 06 	lds	r25, 0x06A3
    4ff6:	89 2b       	or	r24, r25
    4ff8:	e9 f4       	brne	.+58     	; 0x5034 <STEPPER_process_run_mode+0x14a>
    4ffa:	80 91 70 04 	lds	r24, 0x0470
    4ffe:	8f 71       	andi	r24, 0x1F	; 31
    5000:	80 93 70 04 	sts	0x0470, r24
    5004:	10 92 c2 06 	sts	0x06C2, r1
    5008:	80 91 cd 06 	lds	r24, 0x06CD
    500c:	88 23       	and	r24, r24
    500e:	09 f4       	brne	.+2      	; 0x5012 <STEPPER_process_run_mode+0x128>
    5010:	5c c0       	rjmp	.+184    	; 0x50ca <STEPPER_process_run_mode+0x1e0>
    5012:	60 91 bb 06 	lds	r22, 0x06BB
    5016:	81 e0       	ldi	r24, 0x01	; 1
    5018:	0e 94 0b 1c 	call	0x3816	; 0x3816 <STEPPER_stop>
    501c:	e0 91 ce 06 	lds	r30, 0x06CE
    5020:	f0 91 cf 06 	lds	r31, 0x06CF
    5024:	30 97       	sbiw	r30, 0x00	; 0
    5026:	09 f4       	brne	.+2      	; 0x502a <STEPPER_process_run_mode+0x140>
    5028:	50 c0       	rjmp	.+160    	; 0x50ca <STEPPER_process_run_mode+0x1e0>
    502a:	81 e0       	ldi	r24, 0x01	; 1
    502c:	81 83       	std	Z+1, r24	; 0x01
    502e:	10 92 cd 06 	sts	0x06CD, r1
    5032:	4b c0       	rjmp	.+150    	; 0x50ca <STEPPER_process_run_mode+0x1e0>
    5034:	80 91 9b 06 	lds	r24, 0x069B
    5038:	81 30       	cpi	r24, 0x01	; 1
    503a:	41 f4       	brne	.+16     	; 0x504c <STEPPER_process_run_mode+0x162>
    503c:	80 91 ae 06 	lds	r24, 0x06AE
    5040:	90 91 af 06 	lds	r25, 0x06AF
    5044:	01 97       	sbiw	r24, 0x01	; 1
    5046:	11 f4       	brne	.+4      	; 0x504c <STEPPER_process_run_mode+0x162>
    5048:	01 e0       	ldi	r16, 0x01	; 1
    504a:	02 c0       	rjmp	.+4      	; 0x5050 <STEPPER_process_run_mode+0x166>
    504c:	00 23       	and	r16, r16
    504e:	e9 f1       	breq	.+122    	; 0x50ca <STEPPER_process_run_mode+0x1e0>
    5050:	e0 91 c0 06 	lds	r30, 0x06C0
    5054:	f0 e0       	ldi	r31, 0x00	; 0
    5056:	e3 57       	subi	r30, 0x73	; 115
    5058:	fc 4f       	sbci	r31, 0xFC	; 252
    505a:	90 91 70 04 	lds	r25, 0x0470
    505e:	9f 71       	andi	r25, 0x1F	; 31
    5060:	80 81       	ld	r24, Z
    5062:	89 2b       	or	r24, r25
    5064:	80 93 70 04 	sts	0x0470, r24
    5068:	80 91 be 06 	lds	r24, 0x06BE
    506c:	88 23       	and	r24, r24
    506e:	21 f4       	brne	.+8      	; 0x5078 <STEPPER_process_run_mode+0x18e>
    5070:	80 91 c0 06 	lds	r24, 0x06C0
    5074:	8f 5f       	subi	r24, 0xFF	; 255
    5076:	03 c0       	rjmp	.+6      	; 0x507e <STEPPER_process_run_mode+0x194>
    5078:	80 91 c0 06 	lds	r24, 0x06C0
    507c:	81 50       	subi	r24, 0x01	; 1
    507e:	80 93 c0 06 	sts	0x06C0, r24
    5082:	80 91 c0 06 	lds	r24, 0x06C0
    5086:	83 70       	andi	r24, 0x03	; 3
    5088:	80 93 c0 06 	sts	0x06C0, r24
    508c:	81 e0       	ldi	r24, 0x01	; 1
    508e:	80 93 c2 06 	sts	0x06C2, r24
    5092:	80 91 9b 06 	lds	r24, 0x069B
    5096:	81 30       	cpi	r24, 0x01	; 1
    5098:	c1 f4       	brne	.+48     	; 0x50ca <STEPPER_process_run_mode+0x1e0>
    509a:	0e 94 78 28 	call	0x50f0	; 0x50f0 <STEPPER_process_step_mode>
    509e:	15 c0       	rjmp	.+42     	; 0x50ca <STEPPER_process_run_mode+0x1e0>
    50a0:	90 91 70 04 	lds	r25, 0x0470
    50a4:	9f 71       	andi	r25, 0x1F	; 31
    50a6:	90 93 70 04 	sts	0x0470, r25
    50aa:	e0 91 c0 06 	lds	r30, 0x06C0
    50ae:	f0 e0       	ldi	r31, 0x00	; 0
    50b0:	e3 57       	subi	r30, 0x73	; 115
    50b2:	fc 4f       	sbci	r31, 0xFC	; 252
    50b4:	80 81       	ld	r24, Z
    50b6:	89 2b       	or	r24, r25
    50b8:	80 93 70 04 	sts	0x0470, r24
    50bc:	82 e0       	ldi	r24, 0x02	; 2
    50be:	80 93 c2 06 	sts	0x06C2, r24
    50c2:	10 92 a3 06 	sts	0x06A3, r1
    50c6:	10 92 a2 06 	sts	0x06A2, r1
    50ca:	80 91 c3 06 	lds	r24, 0x06C3
    50ce:	88 23       	and	r24, r24
    50d0:	31 f4       	brne	.+12     	; 0x50de <STEPPER_process_run_mode+0x1f4>
    50d2:	80 e7       	ldi	r24, 0x70	; 112
    50d4:	94 e0       	ldi	r25, 0x04	; 4
    50d6:	61 2f       	mov	r22, r17
    50d8:	40 2f       	mov	r20, r16
    50da:	0e 94 3a 29 	call	0x5274	; 0x5274 <STEPPER_process_pwm>
    50de:	88 b1       	in	r24, 0x08	; 8
    50e0:	83 70       	andi	r24, 0x03	; 3
    50e2:	90 91 70 04 	lds	r25, 0x0470
    50e6:	89 2b       	or	r24, r25
    50e8:	88 b9       	out	0x08, r24	; 8
    50ea:	1f 91       	pop	r17
    50ec:	0f 91       	pop	r16
    50ee:	08 95       	ret

000050f0 <STEPPER_process_step_mode>:
    50f0:	88 23       	and	r24, r24
    50f2:	21 f0       	breq	.+8      	; 0x50fc <STEPPER_process_step_mode+0xc>
    50f4:	81 30       	cpi	r24, 0x01	; 1
    50f6:	09 f0       	breq	.+2      	; 0x50fa <STEPPER_process_step_mode+0xa>
    50f8:	4e c0       	rjmp	.+156    	; 0x5196 <STEPPER_process_step_mode+0xa6>
    50fa:	27 c0       	rjmp	.+78     	; 0x514a <STEPPER_process_step_mode+0x5a>
    50fc:	80 91 ac 06 	lds	r24, 0x06AC
    5100:	90 91 ad 06 	lds	r25, 0x06AD
    5104:	89 2b       	or	r24, r25
    5106:	49 f0       	breq	.+18     	; 0x511a <STEPPER_process_step_mode+0x2a>
    5108:	80 91 ac 06 	lds	r24, 0x06AC
    510c:	90 91 ad 06 	lds	r25, 0x06AD
    5110:	01 97       	sbiw	r24, 0x01	; 1
    5112:	90 93 ad 06 	sts	0x06AD, r25
    5116:	80 93 ac 06 	sts	0x06AC, r24
    511a:	80 91 cc 06 	lds	r24, 0x06CC
    511e:	88 23       	and	r24, r24
    5120:	d1 f5       	brne	.+116    	; 0x5196 <STEPPER_process_step_mode+0xa6>
    5122:	20 91 ac 06 	lds	r18, 0x06AC
    5126:	30 91 ad 06 	lds	r19, 0x06AD
    512a:	80 91 b0 06 	lds	r24, 0x06B0
    512e:	90 91 b1 06 	lds	r25, 0x06B1
    5132:	28 17       	cp	r18, r24
    5134:	39 07       	cpc	r19, r25
    5136:	79 f5       	brne	.+94     	; 0x5196 <STEPPER_process_step_mode+0xa6>
    5138:	80 e0       	ldi	r24, 0x00	; 0
    513a:	60 e0       	ldi	r22, 0x00	; 0
    513c:	70 e0       	ldi	r23, 0x00	; 0
    513e:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <STEPPER_set_speed>
    5142:	81 e0       	ldi	r24, 0x01	; 1
    5144:	80 93 cc 06 	sts	0x06CC, r24
    5148:	08 95       	ret
    514a:	80 91 ae 06 	lds	r24, 0x06AE
    514e:	90 91 af 06 	lds	r25, 0x06AF
    5152:	89 2b       	or	r24, r25
    5154:	49 f0       	breq	.+18     	; 0x5168 <STEPPER_process_step_mode+0x78>
    5156:	80 91 ae 06 	lds	r24, 0x06AE
    515a:	90 91 af 06 	lds	r25, 0x06AF
    515e:	01 97       	sbiw	r24, 0x01	; 1
    5160:	90 93 af 06 	sts	0x06AF, r25
    5164:	80 93 ae 06 	sts	0x06AE, r24
    5168:	80 91 cd 06 	lds	r24, 0x06CD
    516c:	88 23       	and	r24, r24
    516e:	99 f4       	brne	.+38     	; 0x5196 <STEPPER_process_step_mode+0xa6>
    5170:	20 91 ae 06 	lds	r18, 0x06AE
    5174:	30 91 af 06 	lds	r19, 0x06AF
    5178:	80 91 b2 06 	lds	r24, 0x06B2
    517c:	90 91 b3 06 	lds	r25, 0x06B3
    5180:	28 17       	cp	r18, r24
    5182:	39 07       	cpc	r19, r25
    5184:	41 f4       	brne	.+16     	; 0x5196 <STEPPER_process_step_mode+0xa6>
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	60 e0       	ldi	r22, 0x00	; 0
    518a:	70 e0       	ldi	r23, 0x00	; 0
    518c:	0e 94 5d 1b 	call	0x36ba	; 0x36ba <STEPPER_set_speed>
    5190:	81 e0       	ldi	r24, 0x01	; 1
    5192:	80 93 cd 06 	sts	0x06CD, r24
    5196:	08 95       	ret

00005198 <TMRSRVC_process>:
    5198:	ff 92       	push	r15
    519a:	0f 93       	push	r16
    519c:	1f 93       	push	r17
    519e:	cf 93       	push	r28
    51a0:	df 93       	push	r29
    51a2:	80 91 0a 07 	lds	r24, 0x070A
    51a6:	88 23       	and	r24, r24
    51a8:	09 f4       	brne	.+2      	; 0x51ac <TMRSRVC_process+0x14>
    51aa:	59 c0       	rjmp	.+178    	; 0x525e <TMRSRVC_process+0xc6>
    51ac:	00 91 0b 07 	lds	r16, 0x070B
    51b0:	10 91 0c 07 	lds	r17, 0x070C
    51b4:	f8 01       	movw	r30, r16
    51b6:	c0 81       	ld	r28, Z
    51b8:	d1 81       	ldd	r29, Z+1	; 0x01
    51ba:	8c 81       	ldd	r24, Y+4	; 0x04
    51bc:	9d 81       	ldd	r25, Y+5	; 0x05
    51be:	01 97       	sbiw	r24, 0x01	; 1
    51c0:	9d 83       	std	Y+5, r25	; 0x05
    51c2:	8c 83       	std	Y+4, r24	; 0x04
    51c4:	18 16       	cp	r1, r24
    51c6:	19 06       	cpc	r1, r25
    51c8:	0c f4       	brge	.+2      	; 0x51cc <TMRSRVC_process+0x34>
    51ca:	49 c0       	rjmp	.+146    	; 0x525e <TMRSRVC_process+0xc6>
    51cc:	89 81       	ldd	r24, Y+1	; 0x01
    51ce:	80 ff       	sbrs	r24, 0
    51d0:	05 c0       	rjmp	.+10     	; 0x51dc <TMRSRVC_process+0x44>
    51d2:	8e 81       	ldd	r24, Y+6	; 0x06
    51d4:	88 23       	and	r24, r24
    51d6:	11 f4       	brne	.+4      	; 0x51dc <TMRSRVC_process+0x44>
    51d8:	81 e0       	ldi	r24, 0x01	; 1
    51da:	8e 83       	std	Y+6, r24	; 0x06
    51dc:	89 81       	ldd	r24, Y+1	; 0x01
    51de:	81 ff       	sbrs	r24, 1
    51e0:	03 c0       	rjmp	.+6      	; 0x51e8 <TMRSRVC_process+0x50>
    51e2:	ef 81       	ldd	r30, Y+7	; 0x07
    51e4:	f8 85       	ldd	r31, Y+8	; 0x08
    51e6:	09 95       	icall
    51e8:	80 91 0a 07 	lds	r24, 0x070A
    51ec:	82 30       	cpi	r24, 0x02	; 2
    51ee:	a8 f0       	brcs	.+42     	; 0x521a <TMRSRVC_process+0x82>
    51f0:	f8 01       	movw	r30, r16
    51f2:	82 81       	ldd	r24, Z+2	; 0x02
    51f4:	93 81       	ldd	r25, Z+3	; 0x03
    51f6:	90 93 0c 07 	sts	0x070C, r25
    51fa:	80 93 0b 07 	sts	0x070B, r24
    51fe:	13 82       	std	Z+3, r1	; 0x03
    5200:	12 82       	std	Z+2, r1	; 0x02
    5202:	e0 91 00 00 	lds	r30, 0x0000
    5206:	f0 91 01 00 	lds	r31, 0x0001
    520a:	84 81       	ldd	r24, Z+4	; 0x04
    520c:	95 81       	ldd	r25, Z+5	; 0x05
    520e:	18 16       	cp	r1, r24
    5210:	19 06       	cpc	r1, r25
    5212:	3c f0       	brlt	.+14     	; 0x5222 <TMRSRVC_process+0x8a>
    5214:	ff 24       	eor	r15, r15
    5216:	f3 94       	inc	r15
    5218:	05 c0       	rjmp	.+10     	; 0x5224 <TMRSRVC_process+0x8c>
    521a:	10 92 0c 07 	sts	0x070C, r1
    521e:	10 92 0b 07 	sts	0x070B, r1
    5222:	ff 24       	eor	r15, r15
    5224:	80 91 0a 07 	lds	r24, 0x070A
    5228:	81 50       	subi	r24, 0x01	; 1
    522a:	80 93 0a 07 	sts	0x070A, r24
    522e:	80 91 0a 07 	lds	r24, 0x070A
    5232:	88 23       	and	r24, r24
    5234:	11 f4       	brne	.+4      	; 0x523a <TMRSRVC_process+0xa2>
    5236:	0e 94 37 29 	call	0x526e	; 0x526e <TMRSRVC_stop>
    523a:	89 81       	ldd	r24, Y+1	; 0x01
    523c:	82 ff       	sbrs	r24, 2
    523e:	08 c0       	rjmp	.+16     	; 0x5250 <TMRSRVC_process+0xb8>
    5240:	8a 81       	ldd	r24, Y+2	; 0x02
    5242:	9b 81       	ldd	r25, Y+3	; 0x03
    5244:	9d 83       	std	Y+5, r25	; 0x05
    5246:	8c 83       	std	Y+4, r24	; 0x04
    5248:	c8 01       	movw	r24, r16
    524a:	0e 94 ac 24 	call	0x4958	; 0x4958 <TMRSRVC_insert>
    524e:	08 c0       	rjmp	.+16     	; 0x5260 <TMRSRVC_process+0xc8>
    5250:	c8 01       	movw	r24, r16
    5252:	0e 94 40 32 	call	0x6480	; 0x6480 <free>
    5256:	89 81       	ldd	r24, Y+1	; 0x01
    5258:	8f 7e       	andi	r24, 0xEF	; 239
    525a:	89 83       	std	Y+1, r24	; 0x01
    525c:	01 c0       	rjmp	.+2      	; 0x5260 <TMRSRVC_process+0xc8>
    525e:	ff 24       	eor	r15, r15
    5260:	8f 2d       	mov	r24, r15
    5262:	df 91       	pop	r29
    5264:	cf 91       	pop	r28
    5266:	1f 91       	pop	r17
    5268:	0f 91       	pop	r16
    526a:	ff 90       	pop	r15
    526c:	08 95       	ret

0000526e <TMRSRVC_stop>:
    526e:	10 92 6f 04 	sts	0x046F, r1
    5272:	08 95       	ret

00005274 <STEPPER_process_pwm>:
    5274:	fc 01       	movw	r30, r24
    5276:	80 91 c1 06 	lds	r24, 0x06C1
    527a:	82 30       	cpi	r24, 0x02	; 2
    527c:	69 f4       	brne	.+26     	; 0x5298 <STEPPER_process_pwm+0x24>
    527e:	80 91 74 04 	lds	r24, 0x0474
    5282:	91 e0       	ldi	r25, 0x01	; 1
    5284:	89 27       	eor	r24, r25
    5286:	80 93 74 04 	sts	0x0474, r24
    528a:	88 23       	and	r24, r24
    528c:	09 f0       	breq	.+2      	; 0x5290 <STEPPER_process_pwm+0x1c>
    528e:	3e c0       	rjmp	.+124    	; 0x530c <STEPPER_process_pwm+0x98>
    5290:	80 81       	ld	r24, Z
    5292:	83 7e       	andi	r24, 0xE3	; 227
    5294:	80 83       	st	Z, r24
    5296:	3a c0       	rjmp	.+116    	; 0x530c <STEPPER_process_pwm+0x98>
    5298:	80 91 a0 06 	lds	r24, 0x06A0
    529c:	90 91 a1 06 	lds	r25, 0x06A1
    52a0:	c3 97       	sbiw	r24, 0x33	; 51
    52a2:	a4 f5       	brge	.+104    	; 0x530c <STEPPER_process_pwm+0x98>
    52a4:	66 23       	and	r22, r22
    52a6:	d1 f0       	breq	.+52     	; 0x52dc <STEPPER_process_pwm+0x68>
    52a8:	20 91 a0 06 	lds	r18, 0x06A0
    52ac:	30 91 a1 06 	lds	r19, 0x06A1
    52b0:	80 e6       	ldi	r24, 0x60	; 96
    52b2:	90 e0       	ldi	r25, 0x00	; 0
    52b4:	bc 01       	movw	r22, r24
    52b6:	26 9f       	mul	r18, r22
    52b8:	c0 01       	movw	r24, r0
    52ba:	27 9f       	mul	r18, r23
    52bc:	90 0d       	add	r25, r0
    52be:	36 9f       	mul	r19, r22
    52c0:	90 0d       	add	r25, r0
    52c2:	11 24       	eor	r1, r1
    52c4:	88 0f       	add	r24, r24
    52c6:	89 2f       	mov	r24, r25
    52c8:	88 1f       	adc	r24, r24
    52ca:	99 0b       	sbc	r25, r25
    52cc:	90 93 b5 06 	sts	0x06B5, r25
    52d0:	80 93 b4 06 	sts	0x06B4, r24
    52d4:	81 e0       	ldi	r24, 0x01	; 1
    52d6:	80 93 72 04 	sts	0x0472, r24
    52da:	18 c0       	rjmp	.+48     	; 0x530c <STEPPER_process_pwm+0x98>
    52dc:	80 91 72 04 	lds	r24, 0x0472
    52e0:	88 23       	and	r24, r24
    52e2:	a1 f0       	breq	.+40     	; 0x530c <STEPPER_process_pwm+0x98>
    52e4:	80 91 b4 06 	lds	r24, 0x06B4
    52e8:	90 91 b5 06 	lds	r25, 0x06B5
    52ec:	01 97       	sbiw	r24, 0x01	; 1
    52ee:	90 93 b5 06 	sts	0x06B5, r25
    52f2:	80 93 b4 06 	sts	0x06B4, r24
    52f6:	80 91 b4 06 	lds	r24, 0x06B4
    52fa:	90 91 b5 06 	lds	r25, 0x06B5
    52fe:	89 2b       	or	r24, r25
    5300:	29 f4       	brne	.+10     	; 0x530c <STEPPER_process_pwm+0x98>
    5302:	80 81       	ld	r24, Z
    5304:	83 7e       	andi	r24, 0xE3	; 227
    5306:	80 83       	st	Z, r24
    5308:	10 92 72 04 	sts	0x0472, r1
    530c:	80 91 c2 06 	lds	r24, 0x06C2
    5310:	82 30       	cpi	r24, 0x02	; 2
    5312:	69 f4       	brne	.+26     	; 0x532e <STEPPER_process_pwm+0xba>
    5314:	80 91 73 04 	lds	r24, 0x0473
    5318:	91 e0       	ldi	r25, 0x01	; 1
    531a:	89 27       	eor	r24, r25
    531c:	80 93 73 04 	sts	0x0473, r24
    5320:	88 23       	and	r24, r24
    5322:	09 f0       	breq	.+2      	; 0x5326 <STEPPER_process_pwm+0xb2>
    5324:	3e c0       	rjmp	.+124    	; 0x53a2 <STEPPER_process_pwm+0x12e>
    5326:	80 81       	ld	r24, Z
    5328:	8f 71       	andi	r24, 0x1F	; 31
    532a:	80 83       	st	Z, r24
    532c:	08 95       	ret
    532e:	80 91 a2 06 	lds	r24, 0x06A2
    5332:	90 91 a3 06 	lds	r25, 0x06A3
    5336:	c3 97       	sbiw	r24, 0x33	; 51
    5338:	a4 f5       	brge	.+104    	; 0x53a2 <STEPPER_process_pwm+0x12e>
    533a:	44 23       	and	r20, r20
    533c:	d1 f0       	breq	.+52     	; 0x5372 <STEPPER_process_pwm+0xfe>
    533e:	20 91 a2 06 	lds	r18, 0x06A2
    5342:	30 91 a3 06 	lds	r19, 0x06A3
    5346:	80 e6       	ldi	r24, 0x60	; 96
    5348:	90 e0       	ldi	r25, 0x00	; 0
    534a:	ac 01       	movw	r20, r24
    534c:	24 9f       	mul	r18, r20
    534e:	c0 01       	movw	r24, r0
    5350:	25 9f       	mul	r18, r21
    5352:	90 0d       	add	r25, r0
    5354:	34 9f       	mul	r19, r20
    5356:	90 0d       	add	r25, r0
    5358:	11 24       	eor	r1, r1
    535a:	88 0f       	add	r24, r24
    535c:	89 2f       	mov	r24, r25
    535e:	88 1f       	adc	r24, r24
    5360:	99 0b       	sbc	r25, r25
    5362:	90 93 b7 06 	sts	0x06B7, r25
    5366:	80 93 b6 06 	sts	0x06B6, r24
    536a:	81 e0       	ldi	r24, 0x01	; 1
    536c:	80 93 71 04 	sts	0x0471, r24
    5370:	08 95       	ret
    5372:	80 91 71 04 	lds	r24, 0x0471
    5376:	88 23       	and	r24, r24
    5378:	a1 f0       	breq	.+40     	; 0x53a2 <STEPPER_process_pwm+0x12e>
    537a:	80 91 b6 06 	lds	r24, 0x06B6
    537e:	90 91 b7 06 	lds	r25, 0x06B7
    5382:	01 97       	sbiw	r24, 0x01	; 1
    5384:	90 93 b7 06 	sts	0x06B7, r25
    5388:	80 93 b6 06 	sts	0x06B6, r24
    538c:	80 91 b6 06 	lds	r24, 0x06B6
    5390:	90 91 b7 06 	lds	r25, 0x06B7
    5394:	89 2b       	or	r24, r25
    5396:	29 f4       	brne	.+10     	; 0x53a2 <STEPPER_process_pwm+0x12e>
    5398:	80 81       	ld	r24, Z
    539a:	8f 71       	andi	r24, 0x1F	; 31
    539c:	80 83       	st	Z, r24
    539e:	10 92 71 04 	sts	0x0471, r1
    53a2:	08 95       	ret

000053a4 <__subsf3>:
    53a4:	50 58       	subi	r21, 0x80	; 128

000053a6 <__addsf3>:
    53a6:	bb 27       	eor	r27, r27
    53a8:	aa 27       	eor	r26, r26
    53aa:	0e d0       	rcall	.+28     	; 0x53c8 <__addsf3x>
    53ac:	75 c1       	rjmp	.+746    	; 0x5698 <__fp_round>
    53ae:	66 d1       	rcall	.+716    	; 0x567c <__fp_pscA>
    53b0:	30 f0       	brcs	.+12     	; 0x53be <__addsf3+0x18>
    53b2:	6b d1       	rcall	.+726    	; 0x568a <__fp_pscB>
    53b4:	20 f0       	brcs	.+8      	; 0x53be <__addsf3+0x18>
    53b6:	31 f4       	brne	.+12     	; 0x53c4 <__addsf3+0x1e>
    53b8:	9f 3f       	cpi	r25, 0xFF	; 255
    53ba:	11 f4       	brne	.+4      	; 0x53c0 <__addsf3+0x1a>
    53bc:	1e f4       	brtc	.+6      	; 0x53c4 <__addsf3+0x1e>
    53be:	5b c1       	rjmp	.+694    	; 0x5676 <__fp_nan>
    53c0:	0e f4       	brtc	.+2      	; 0x53c4 <__addsf3+0x1e>
    53c2:	e0 95       	com	r30
    53c4:	e7 fb       	bst	r30, 7
    53c6:	51 c1       	rjmp	.+674    	; 0x566a <__fp_inf>

000053c8 <__addsf3x>:
    53c8:	e9 2f       	mov	r30, r25
    53ca:	77 d1       	rcall	.+750    	; 0x56ba <__fp_split3>
    53cc:	80 f3       	brcs	.-32     	; 0x53ae <__addsf3+0x8>
    53ce:	ba 17       	cp	r27, r26
    53d0:	62 07       	cpc	r22, r18
    53d2:	73 07       	cpc	r23, r19
    53d4:	84 07       	cpc	r24, r20
    53d6:	95 07       	cpc	r25, r21
    53d8:	18 f0       	brcs	.+6      	; 0x53e0 <__addsf3x+0x18>
    53da:	71 f4       	brne	.+28     	; 0x53f8 <__addsf3x+0x30>
    53dc:	9e f5       	brtc	.+102    	; 0x5444 <__addsf3x+0x7c>
    53de:	8f c1       	rjmp	.+798    	; 0x56fe <__fp_zero>
    53e0:	0e f4       	brtc	.+2      	; 0x53e4 <__addsf3x+0x1c>
    53e2:	e0 95       	com	r30
    53e4:	0b 2e       	mov	r0, r27
    53e6:	ba 2f       	mov	r27, r26
    53e8:	a0 2d       	mov	r26, r0
    53ea:	0b 01       	movw	r0, r22
    53ec:	b9 01       	movw	r22, r18
    53ee:	90 01       	movw	r18, r0
    53f0:	0c 01       	movw	r0, r24
    53f2:	ca 01       	movw	r24, r20
    53f4:	a0 01       	movw	r20, r0
    53f6:	11 24       	eor	r1, r1
    53f8:	ff 27       	eor	r31, r31
    53fa:	59 1b       	sub	r21, r25
    53fc:	99 f0       	breq	.+38     	; 0x5424 <__addsf3x+0x5c>
    53fe:	59 3f       	cpi	r21, 0xF9	; 249
    5400:	50 f4       	brcc	.+20     	; 0x5416 <__addsf3x+0x4e>
    5402:	50 3e       	cpi	r21, 0xE0	; 224
    5404:	68 f1       	brcs	.+90     	; 0x5460 <__addsf3x+0x98>
    5406:	1a 16       	cp	r1, r26
    5408:	f0 40       	sbci	r31, 0x00	; 0
    540a:	a2 2f       	mov	r26, r18
    540c:	23 2f       	mov	r18, r19
    540e:	34 2f       	mov	r19, r20
    5410:	44 27       	eor	r20, r20
    5412:	58 5f       	subi	r21, 0xF8	; 248
    5414:	f3 cf       	rjmp	.-26     	; 0x53fc <__addsf3x+0x34>
    5416:	46 95       	lsr	r20
    5418:	37 95       	ror	r19
    541a:	27 95       	ror	r18
    541c:	a7 95       	ror	r26
    541e:	f0 40       	sbci	r31, 0x00	; 0
    5420:	53 95       	inc	r21
    5422:	c9 f7       	brne	.-14     	; 0x5416 <__addsf3x+0x4e>
    5424:	7e f4       	brtc	.+30     	; 0x5444 <__addsf3x+0x7c>
    5426:	1f 16       	cp	r1, r31
    5428:	ba 0b       	sbc	r27, r26
    542a:	62 0b       	sbc	r22, r18
    542c:	73 0b       	sbc	r23, r19
    542e:	84 0b       	sbc	r24, r20
    5430:	ba f0       	brmi	.+46     	; 0x5460 <__addsf3x+0x98>
    5432:	91 50       	subi	r25, 0x01	; 1
    5434:	a1 f0       	breq	.+40     	; 0x545e <__addsf3x+0x96>
    5436:	ff 0f       	add	r31, r31
    5438:	bb 1f       	adc	r27, r27
    543a:	66 1f       	adc	r22, r22
    543c:	77 1f       	adc	r23, r23
    543e:	88 1f       	adc	r24, r24
    5440:	c2 f7       	brpl	.-16     	; 0x5432 <__addsf3x+0x6a>
    5442:	0e c0       	rjmp	.+28     	; 0x5460 <__addsf3x+0x98>
    5444:	ba 0f       	add	r27, r26
    5446:	62 1f       	adc	r22, r18
    5448:	73 1f       	adc	r23, r19
    544a:	84 1f       	adc	r24, r20
    544c:	48 f4       	brcc	.+18     	; 0x5460 <__addsf3x+0x98>
    544e:	87 95       	ror	r24
    5450:	77 95       	ror	r23
    5452:	67 95       	ror	r22
    5454:	b7 95       	ror	r27
    5456:	f7 95       	ror	r31
    5458:	9e 3f       	cpi	r25, 0xFE	; 254
    545a:	08 f0       	brcs	.+2      	; 0x545e <__addsf3x+0x96>
    545c:	b3 cf       	rjmp	.-154    	; 0x53c4 <__addsf3+0x1e>
    545e:	93 95       	inc	r25
    5460:	88 0f       	add	r24, r24
    5462:	08 f0       	brcs	.+2      	; 0x5466 <__addsf3x+0x9e>
    5464:	99 27       	eor	r25, r25
    5466:	ee 0f       	add	r30, r30
    5468:	97 95       	ror	r25
    546a:	87 95       	ror	r24
    546c:	08 95       	ret

0000546e <__cmpsf2>:
    546e:	d9 d0       	rcall	.+434    	; 0x5622 <__fp_cmp>
    5470:	08 f4       	brcc	.+2      	; 0x5474 <__cmpsf2+0x6>
    5472:	81 e0       	ldi	r24, 0x01	; 1
    5474:	08 95       	ret

00005476 <__divsf3>:
    5476:	0c d0       	rcall	.+24     	; 0x5490 <__divsf3x>
    5478:	0f c1       	rjmp	.+542    	; 0x5698 <__fp_round>
    547a:	07 d1       	rcall	.+526    	; 0x568a <__fp_pscB>
    547c:	40 f0       	brcs	.+16     	; 0x548e <__divsf3+0x18>
    547e:	fe d0       	rcall	.+508    	; 0x567c <__fp_pscA>
    5480:	30 f0       	brcs	.+12     	; 0x548e <__divsf3+0x18>
    5482:	21 f4       	brne	.+8      	; 0x548c <__divsf3+0x16>
    5484:	5f 3f       	cpi	r21, 0xFF	; 255
    5486:	19 f0       	breq	.+6      	; 0x548e <__divsf3+0x18>
    5488:	f0 c0       	rjmp	.+480    	; 0x566a <__fp_inf>
    548a:	51 11       	cpse	r21, r1
    548c:	39 c1       	rjmp	.+626    	; 0x5700 <__fp_szero>
    548e:	f3 c0       	rjmp	.+486    	; 0x5676 <__fp_nan>

00005490 <__divsf3x>:
    5490:	14 d1       	rcall	.+552    	; 0x56ba <__fp_split3>
    5492:	98 f3       	brcs	.-26     	; 0x547a <__divsf3+0x4>

00005494 <__divsf3_pse>:
    5494:	99 23       	and	r25, r25
    5496:	c9 f3       	breq	.-14     	; 0x548a <__divsf3+0x14>
    5498:	55 23       	and	r21, r21
    549a:	b1 f3       	breq	.-20     	; 0x5488 <__divsf3+0x12>
    549c:	95 1b       	sub	r25, r21
    549e:	55 0b       	sbc	r21, r21
    54a0:	bb 27       	eor	r27, r27
    54a2:	aa 27       	eor	r26, r26
    54a4:	62 17       	cp	r22, r18
    54a6:	73 07       	cpc	r23, r19
    54a8:	84 07       	cpc	r24, r20
    54aa:	38 f0       	brcs	.+14     	; 0x54ba <__divsf3_pse+0x26>
    54ac:	9f 5f       	subi	r25, 0xFF	; 255
    54ae:	5f 4f       	sbci	r21, 0xFF	; 255
    54b0:	22 0f       	add	r18, r18
    54b2:	33 1f       	adc	r19, r19
    54b4:	44 1f       	adc	r20, r20
    54b6:	aa 1f       	adc	r26, r26
    54b8:	a9 f3       	breq	.-22     	; 0x54a4 <__divsf3_pse+0x10>
    54ba:	33 d0       	rcall	.+102    	; 0x5522 <__divsf3_pse+0x8e>
    54bc:	0e 2e       	mov	r0, r30
    54be:	3a f0       	brmi	.+14     	; 0x54ce <__divsf3_pse+0x3a>
    54c0:	e0 e8       	ldi	r30, 0x80	; 128
    54c2:	30 d0       	rcall	.+96     	; 0x5524 <__divsf3_pse+0x90>
    54c4:	91 50       	subi	r25, 0x01	; 1
    54c6:	50 40       	sbci	r21, 0x00	; 0
    54c8:	e6 95       	lsr	r30
    54ca:	00 1c       	adc	r0, r0
    54cc:	ca f7       	brpl	.-14     	; 0x54c0 <__divsf3_pse+0x2c>
    54ce:	29 d0       	rcall	.+82     	; 0x5522 <__divsf3_pse+0x8e>
    54d0:	fe 2f       	mov	r31, r30
    54d2:	27 d0       	rcall	.+78     	; 0x5522 <__divsf3_pse+0x8e>
    54d4:	66 0f       	add	r22, r22
    54d6:	77 1f       	adc	r23, r23
    54d8:	88 1f       	adc	r24, r24
    54da:	bb 1f       	adc	r27, r27
    54dc:	26 17       	cp	r18, r22
    54de:	37 07       	cpc	r19, r23
    54e0:	48 07       	cpc	r20, r24
    54e2:	ab 07       	cpc	r26, r27
    54e4:	b0 e8       	ldi	r27, 0x80	; 128
    54e6:	09 f0       	breq	.+2      	; 0x54ea <__divsf3_pse+0x56>
    54e8:	bb 0b       	sbc	r27, r27
    54ea:	80 2d       	mov	r24, r0
    54ec:	bf 01       	movw	r22, r30
    54ee:	ff 27       	eor	r31, r31
    54f0:	93 58       	subi	r25, 0x83	; 131
    54f2:	5f 4f       	sbci	r21, 0xFF	; 255
    54f4:	2a f0       	brmi	.+10     	; 0x5500 <__divsf3_pse+0x6c>
    54f6:	9e 3f       	cpi	r25, 0xFE	; 254
    54f8:	51 05       	cpc	r21, r1
    54fa:	68 f0       	brcs	.+26     	; 0x5516 <__divsf3_pse+0x82>
    54fc:	b6 c0       	rjmp	.+364    	; 0x566a <__fp_inf>
    54fe:	00 c1       	rjmp	.+512    	; 0x5700 <__fp_szero>
    5500:	5f 3f       	cpi	r21, 0xFF	; 255
    5502:	ec f3       	brlt	.-6      	; 0x54fe <__divsf3_pse+0x6a>
    5504:	98 3e       	cpi	r25, 0xE8	; 232
    5506:	dc f3       	brlt	.-10     	; 0x54fe <__divsf3_pse+0x6a>
    5508:	86 95       	lsr	r24
    550a:	77 95       	ror	r23
    550c:	67 95       	ror	r22
    550e:	b7 95       	ror	r27
    5510:	f7 95       	ror	r31
    5512:	9f 5f       	subi	r25, 0xFF	; 255
    5514:	c9 f7       	brne	.-14     	; 0x5508 <__divsf3_pse+0x74>
    5516:	88 0f       	add	r24, r24
    5518:	91 1d       	adc	r25, r1
    551a:	96 95       	lsr	r25
    551c:	87 95       	ror	r24
    551e:	97 f9       	bld	r25, 7
    5520:	08 95       	ret
    5522:	e1 e0       	ldi	r30, 0x01	; 1
    5524:	66 0f       	add	r22, r22
    5526:	77 1f       	adc	r23, r23
    5528:	88 1f       	adc	r24, r24
    552a:	bb 1f       	adc	r27, r27
    552c:	62 17       	cp	r22, r18
    552e:	73 07       	cpc	r23, r19
    5530:	84 07       	cpc	r24, r20
    5532:	ba 07       	cpc	r27, r26
    5534:	20 f0       	brcs	.+8      	; 0x553e <__divsf3_pse+0xaa>
    5536:	62 1b       	sub	r22, r18
    5538:	73 0b       	sbc	r23, r19
    553a:	84 0b       	sbc	r24, r20
    553c:	ba 0b       	sbc	r27, r26
    553e:	ee 1f       	adc	r30, r30
    5540:	88 f7       	brcc	.-30     	; 0x5524 <__divsf3_pse+0x90>
    5542:	e0 95       	com	r30
    5544:	08 95       	ret

00005546 <__fixsfsi>:
    5546:	04 d0       	rcall	.+8      	; 0x5550 <__fixunssfsi>
    5548:	68 94       	set
    554a:	b1 11       	cpse	r27, r1
    554c:	d9 c0       	rjmp	.+434    	; 0x5700 <__fp_szero>
    554e:	08 95       	ret

00005550 <__fixunssfsi>:
    5550:	bc d0       	rcall	.+376    	; 0x56ca <__fp_splitA>
    5552:	88 f0       	brcs	.+34     	; 0x5576 <__fixunssfsi+0x26>
    5554:	9f 57       	subi	r25, 0x7F	; 127
    5556:	90 f0       	brcs	.+36     	; 0x557c <__fixunssfsi+0x2c>
    5558:	b9 2f       	mov	r27, r25
    555a:	99 27       	eor	r25, r25
    555c:	b7 51       	subi	r27, 0x17	; 23
    555e:	a0 f0       	brcs	.+40     	; 0x5588 <__fixunssfsi+0x38>
    5560:	d1 f0       	breq	.+52     	; 0x5596 <__fixunssfsi+0x46>
    5562:	66 0f       	add	r22, r22
    5564:	77 1f       	adc	r23, r23
    5566:	88 1f       	adc	r24, r24
    5568:	99 1f       	adc	r25, r25
    556a:	1a f0       	brmi	.+6      	; 0x5572 <__fixunssfsi+0x22>
    556c:	ba 95       	dec	r27
    556e:	c9 f7       	brne	.-14     	; 0x5562 <__fixunssfsi+0x12>
    5570:	12 c0       	rjmp	.+36     	; 0x5596 <__fixunssfsi+0x46>
    5572:	b1 30       	cpi	r27, 0x01	; 1
    5574:	81 f0       	breq	.+32     	; 0x5596 <__fixunssfsi+0x46>
    5576:	c3 d0       	rcall	.+390    	; 0x56fe <__fp_zero>
    5578:	b1 e0       	ldi	r27, 0x01	; 1
    557a:	08 95       	ret
    557c:	c0 c0       	rjmp	.+384    	; 0x56fe <__fp_zero>
    557e:	67 2f       	mov	r22, r23
    5580:	78 2f       	mov	r23, r24
    5582:	88 27       	eor	r24, r24
    5584:	b8 5f       	subi	r27, 0xF8	; 248
    5586:	39 f0       	breq	.+14     	; 0x5596 <__fixunssfsi+0x46>
    5588:	b9 3f       	cpi	r27, 0xF9	; 249
    558a:	cc f3       	brlt	.-14     	; 0x557e <__fixunssfsi+0x2e>
    558c:	86 95       	lsr	r24
    558e:	77 95       	ror	r23
    5590:	67 95       	ror	r22
    5592:	b3 95       	inc	r27
    5594:	d9 f7       	brne	.-10     	; 0x558c <__fixunssfsi+0x3c>
    5596:	3e f4       	brtc	.+14     	; 0x55a6 <__fixunssfsi+0x56>
    5598:	90 95       	com	r25
    559a:	80 95       	com	r24
    559c:	70 95       	com	r23
    559e:	61 95       	neg	r22
    55a0:	7f 4f       	sbci	r23, 0xFF	; 255
    55a2:	8f 4f       	sbci	r24, 0xFF	; 255
    55a4:	9f 4f       	sbci	r25, 0xFF	; 255
    55a6:	08 95       	ret

000055a8 <__floatunsisf>:
    55a8:	e8 94       	clt
    55aa:	09 c0       	rjmp	.+18     	; 0x55be <__floatsisf+0x12>

000055ac <__floatsisf>:
    55ac:	97 fb       	bst	r25, 7
    55ae:	3e f4       	brtc	.+14     	; 0x55be <__floatsisf+0x12>
    55b0:	90 95       	com	r25
    55b2:	80 95       	com	r24
    55b4:	70 95       	com	r23
    55b6:	61 95       	neg	r22
    55b8:	7f 4f       	sbci	r23, 0xFF	; 255
    55ba:	8f 4f       	sbci	r24, 0xFF	; 255
    55bc:	9f 4f       	sbci	r25, 0xFF	; 255
    55be:	99 23       	and	r25, r25
    55c0:	a9 f0       	breq	.+42     	; 0x55ec <__floatsisf+0x40>
    55c2:	f9 2f       	mov	r31, r25
    55c4:	96 e9       	ldi	r25, 0x96	; 150
    55c6:	bb 27       	eor	r27, r27
    55c8:	93 95       	inc	r25
    55ca:	f6 95       	lsr	r31
    55cc:	87 95       	ror	r24
    55ce:	77 95       	ror	r23
    55d0:	67 95       	ror	r22
    55d2:	b7 95       	ror	r27
    55d4:	f1 11       	cpse	r31, r1
    55d6:	f8 cf       	rjmp	.-16     	; 0x55c8 <__floatsisf+0x1c>
    55d8:	fa f4       	brpl	.+62     	; 0x5618 <__floatsisf+0x6c>
    55da:	bb 0f       	add	r27, r27
    55dc:	11 f4       	brne	.+4      	; 0x55e2 <__floatsisf+0x36>
    55de:	60 ff       	sbrs	r22, 0
    55e0:	1b c0       	rjmp	.+54     	; 0x5618 <__floatsisf+0x6c>
    55e2:	6f 5f       	subi	r22, 0xFF	; 255
    55e4:	7f 4f       	sbci	r23, 0xFF	; 255
    55e6:	8f 4f       	sbci	r24, 0xFF	; 255
    55e8:	9f 4f       	sbci	r25, 0xFF	; 255
    55ea:	16 c0       	rjmp	.+44     	; 0x5618 <__floatsisf+0x6c>
    55ec:	88 23       	and	r24, r24
    55ee:	11 f0       	breq	.+4      	; 0x55f4 <__floatsisf+0x48>
    55f0:	96 e9       	ldi	r25, 0x96	; 150
    55f2:	11 c0       	rjmp	.+34     	; 0x5616 <__floatsisf+0x6a>
    55f4:	77 23       	and	r23, r23
    55f6:	21 f0       	breq	.+8      	; 0x5600 <__floatsisf+0x54>
    55f8:	9e e8       	ldi	r25, 0x8E	; 142
    55fa:	87 2f       	mov	r24, r23
    55fc:	76 2f       	mov	r23, r22
    55fe:	05 c0       	rjmp	.+10     	; 0x560a <__floatsisf+0x5e>
    5600:	66 23       	and	r22, r22
    5602:	71 f0       	breq	.+28     	; 0x5620 <__floatsisf+0x74>
    5604:	96 e8       	ldi	r25, 0x86	; 134
    5606:	86 2f       	mov	r24, r22
    5608:	70 e0       	ldi	r23, 0x00	; 0
    560a:	60 e0       	ldi	r22, 0x00	; 0
    560c:	2a f0       	brmi	.+10     	; 0x5618 <__floatsisf+0x6c>
    560e:	9a 95       	dec	r25
    5610:	66 0f       	add	r22, r22
    5612:	77 1f       	adc	r23, r23
    5614:	88 1f       	adc	r24, r24
    5616:	da f7       	brpl	.-10     	; 0x560e <__floatsisf+0x62>
    5618:	88 0f       	add	r24, r24
    561a:	96 95       	lsr	r25
    561c:	87 95       	ror	r24
    561e:	97 f9       	bld	r25, 7
    5620:	08 95       	ret

00005622 <__fp_cmp>:
    5622:	99 0f       	add	r25, r25
    5624:	00 08       	sbc	r0, r0
    5626:	55 0f       	add	r21, r21
    5628:	aa 0b       	sbc	r26, r26
    562a:	e0 e8       	ldi	r30, 0x80	; 128
    562c:	fe ef       	ldi	r31, 0xFE	; 254
    562e:	16 16       	cp	r1, r22
    5630:	17 06       	cpc	r1, r23
    5632:	e8 07       	cpc	r30, r24
    5634:	f9 07       	cpc	r31, r25
    5636:	c0 f0       	brcs	.+48     	; 0x5668 <__fp_cmp+0x46>
    5638:	12 16       	cp	r1, r18
    563a:	13 06       	cpc	r1, r19
    563c:	e4 07       	cpc	r30, r20
    563e:	f5 07       	cpc	r31, r21
    5640:	98 f0       	brcs	.+38     	; 0x5668 <__fp_cmp+0x46>
    5642:	62 1b       	sub	r22, r18
    5644:	73 0b       	sbc	r23, r19
    5646:	84 0b       	sbc	r24, r20
    5648:	95 0b       	sbc	r25, r21
    564a:	39 f4       	brne	.+14     	; 0x565a <__fp_cmp+0x38>
    564c:	0a 26       	eor	r0, r26
    564e:	61 f0       	breq	.+24     	; 0x5668 <__fp_cmp+0x46>
    5650:	23 2b       	or	r18, r19
    5652:	24 2b       	or	r18, r20
    5654:	25 2b       	or	r18, r21
    5656:	21 f4       	brne	.+8      	; 0x5660 <__fp_cmp+0x3e>
    5658:	08 95       	ret
    565a:	0a 26       	eor	r0, r26
    565c:	09 f4       	brne	.+2      	; 0x5660 <__fp_cmp+0x3e>
    565e:	a1 40       	sbci	r26, 0x01	; 1
    5660:	a6 95       	lsr	r26
    5662:	8f ef       	ldi	r24, 0xFF	; 255
    5664:	81 1d       	adc	r24, r1
    5666:	81 1d       	adc	r24, r1
    5668:	08 95       	ret

0000566a <__fp_inf>:
    566a:	97 f9       	bld	r25, 7
    566c:	9f 67       	ori	r25, 0x7F	; 127
    566e:	80 e8       	ldi	r24, 0x80	; 128
    5670:	70 e0       	ldi	r23, 0x00	; 0
    5672:	60 e0       	ldi	r22, 0x00	; 0
    5674:	08 95       	ret

00005676 <__fp_nan>:
    5676:	9f ef       	ldi	r25, 0xFF	; 255
    5678:	80 ec       	ldi	r24, 0xC0	; 192
    567a:	08 95       	ret

0000567c <__fp_pscA>:
    567c:	00 24       	eor	r0, r0
    567e:	0a 94       	dec	r0
    5680:	16 16       	cp	r1, r22
    5682:	17 06       	cpc	r1, r23
    5684:	18 06       	cpc	r1, r24
    5686:	09 06       	cpc	r0, r25
    5688:	08 95       	ret

0000568a <__fp_pscB>:
    568a:	00 24       	eor	r0, r0
    568c:	0a 94       	dec	r0
    568e:	12 16       	cp	r1, r18
    5690:	13 06       	cpc	r1, r19
    5692:	14 06       	cpc	r1, r20
    5694:	05 06       	cpc	r0, r21
    5696:	08 95       	ret

00005698 <__fp_round>:
    5698:	09 2e       	mov	r0, r25
    569a:	03 94       	inc	r0
    569c:	00 0c       	add	r0, r0
    569e:	11 f4       	brne	.+4      	; 0x56a4 <__fp_round+0xc>
    56a0:	88 23       	and	r24, r24
    56a2:	52 f0       	brmi	.+20     	; 0x56b8 <__fp_round+0x20>
    56a4:	bb 0f       	add	r27, r27
    56a6:	40 f4       	brcc	.+16     	; 0x56b8 <__fp_round+0x20>
    56a8:	bf 2b       	or	r27, r31
    56aa:	11 f4       	brne	.+4      	; 0x56b0 <__fp_round+0x18>
    56ac:	60 ff       	sbrs	r22, 0
    56ae:	04 c0       	rjmp	.+8      	; 0x56b8 <__fp_round+0x20>
    56b0:	6f 5f       	subi	r22, 0xFF	; 255
    56b2:	7f 4f       	sbci	r23, 0xFF	; 255
    56b4:	8f 4f       	sbci	r24, 0xFF	; 255
    56b6:	9f 4f       	sbci	r25, 0xFF	; 255
    56b8:	08 95       	ret

000056ba <__fp_split3>:
    56ba:	57 fd       	sbrc	r21, 7
    56bc:	90 58       	subi	r25, 0x80	; 128
    56be:	44 0f       	add	r20, r20
    56c0:	55 1f       	adc	r21, r21
    56c2:	59 f0       	breq	.+22     	; 0x56da <__fp_splitA+0x10>
    56c4:	5f 3f       	cpi	r21, 0xFF	; 255
    56c6:	71 f0       	breq	.+28     	; 0x56e4 <__fp_splitA+0x1a>
    56c8:	47 95       	ror	r20

000056ca <__fp_splitA>:
    56ca:	88 0f       	add	r24, r24
    56cc:	97 fb       	bst	r25, 7
    56ce:	99 1f       	adc	r25, r25
    56d0:	61 f0       	breq	.+24     	; 0x56ea <__fp_splitA+0x20>
    56d2:	9f 3f       	cpi	r25, 0xFF	; 255
    56d4:	79 f0       	breq	.+30     	; 0x56f4 <__fp_splitA+0x2a>
    56d6:	87 95       	ror	r24
    56d8:	08 95       	ret
    56da:	12 16       	cp	r1, r18
    56dc:	13 06       	cpc	r1, r19
    56de:	14 06       	cpc	r1, r20
    56e0:	55 1f       	adc	r21, r21
    56e2:	f2 cf       	rjmp	.-28     	; 0x56c8 <__fp_split3+0xe>
    56e4:	46 95       	lsr	r20
    56e6:	f1 df       	rcall	.-30     	; 0x56ca <__fp_splitA>
    56e8:	08 c0       	rjmp	.+16     	; 0x56fa <__fp_splitA+0x30>
    56ea:	16 16       	cp	r1, r22
    56ec:	17 06       	cpc	r1, r23
    56ee:	18 06       	cpc	r1, r24
    56f0:	99 1f       	adc	r25, r25
    56f2:	f1 cf       	rjmp	.-30     	; 0x56d6 <__fp_splitA+0xc>
    56f4:	86 95       	lsr	r24
    56f6:	71 05       	cpc	r23, r1
    56f8:	61 05       	cpc	r22, r1
    56fa:	08 94       	sec
    56fc:	08 95       	ret

000056fe <__fp_zero>:
    56fe:	e8 94       	clt

00005700 <__fp_szero>:
    5700:	bb 27       	eor	r27, r27
    5702:	66 27       	eor	r22, r22
    5704:	77 27       	eor	r23, r23
    5706:	cb 01       	movw	r24, r22
    5708:	97 f9       	bld	r25, 7
    570a:	08 95       	ret

0000570c <__gesf2>:
    570c:	8a df       	rcall	.-236    	; 0x5622 <__fp_cmp>
    570e:	08 f4       	brcc	.+2      	; 0x5712 <__gesf2+0x6>
    5710:	8f ef       	ldi	r24, 0xFF	; 255
    5712:	08 95       	ret

00005714 <lrint>:
    5714:	da df       	rcall	.-76     	; 0x56ca <__fp_splitA>
    5716:	a8 f1       	brcs	.+106    	; 0x5782 <lrint+0x6e>
    5718:	9e 57       	subi	r25, 0x7E	; 126
    571a:	a8 f1       	brcs	.+106    	; 0x5786 <lrint+0x72>
    571c:	98 51       	subi	r25, 0x18	; 24
    571e:	60 f0       	brcs	.+24     	; 0x5738 <lrint+0x24>
    5720:	39 f1       	breq	.+78     	; 0x5770 <lrint+0x5c>
    5722:	98 30       	cpi	r25, 0x08	; 8
    5724:	70 f5       	brcc	.+92     	; 0x5782 <lrint+0x6e>
    5726:	09 2e       	mov	r0, r25
    5728:	99 27       	eor	r25, r25
    572a:	66 0f       	add	r22, r22
    572c:	77 1f       	adc	r23, r23
    572e:	88 1f       	adc	r24, r24
    5730:	99 1f       	adc	r25, r25
    5732:	0a 94       	dec	r0
    5734:	d1 f7       	brne	.-12     	; 0x572a <lrint+0x16>
    5736:	1c c0       	rjmp	.+56     	; 0x5770 <lrint+0x5c>
    5738:	bb 27       	eor	r27, r27
    573a:	99 3f       	cpi	r25, 0xF9	; 249
    573c:	4c f4       	brge	.+18     	; 0x5750 <lrint+0x3c>
    573e:	b1 11       	cpse	r27, r1
    5740:	b1 e0       	ldi	r27, 0x01	; 1
    5742:	b6 2b       	or	r27, r22
    5744:	67 2f       	mov	r22, r23
    5746:	78 2f       	mov	r23, r24
    5748:	88 27       	eor	r24, r24
    574a:	98 5f       	subi	r25, 0xF8	; 248
    574c:	b1 f7       	brne	.-20     	; 0x573a <lrint+0x26>
    574e:	08 c0       	rjmp	.+16     	; 0x5760 <lrint+0x4c>
    5750:	86 95       	lsr	r24
    5752:	77 95       	ror	r23
    5754:	67 95       	ror	r22
    5756:	b7 95       	ror	r27
    5758:	08 f4       	brcc	.+2      	; 0x575c <lrint+0x48>
    575a:	b1 60       	ori	r27, 0x01	; 1
    575c:	93 95       	inc	r25
    575e:	c1 f7       	brne	.-16     	; 0x5750 <lrint+0x3c>
    5760:	bb 0f       	add	r27, r27
    5762:	30 f4       	brcc	.+12     	; 0x5770 <lrint+0x5c>
    5764:	11 f4       	brne	.+4      	; 0x576a <lrint+0x56>
    5766:	60 ff       	sbrs	r22, 0
    5768:	03 c0       	rjmp	.+6      	; 0x5770 <lrint+0x5c>
    576a:	6f 5f       	subi	r22, 0xFF	; 255
    576c:	7f 4f       	sbci	r23, 0xFF	; 255
    576e:	8f 4f       	sbci	r24, 0xFF	; 255
    5770:	3e f4       	brtc	.+14     	; 0x5780 <lrint+0x6c>
    5772:	90 95       	com	r25
    5774:	80 95       	com	r24
    5776:	70 95       	com	r23
    5778:	61 95       	neg	r22
    577a:	7f 4f       	sbci	r23, 0xFF	; 255
    577c:	8f 4f       	sbci	r24, 0xFF	; 255
    577e:	9f 4f       	sbci	r25, 0xFF	; 255
    5780:	08 95       	ret
    5782:	68 94       	set
    5784:	bd cf       	rjmp	.-134    	; 0x5700 <__fp_szero>
    5786:	bb cf       	rjmp	.-138    	; 0x56fe <__fp_zero>

00005788 <__mulsf3>:
    5788:	0b d0       	rcall	.+22     	; 0x57a0 <__mulsf3x>
    578a:	86 cf       	rjmp	.-244    	; 0x5698 <__fp_round>
    578c:	77 df       	rcall	.-274    	; 0x567c <__fp_pscA>
    578e:	28 f0       	brcs	.+10     	; 0x579a <__mulsf3+0x12>
    5790:	7c df       	rcall	.-264    	; 0x568a <__fp_pscB>
    5792:	18 f0       	brcs	.+6      	; 0x579a <__mulsf3+0x12>
    5794:	95 23       	and	r25, r21
    5796:	09 f0       	breq	.+2      	; 0x579a <__mulsf3+0x12>
    5798:	68 cf       	rjmp	.-304    	; 0x566a <__fp_inf>
    579a:	6d cf       	rjmp	.-294    	; 0x5676 <__fp_nan>
    579c:	11 24       	eor	r1, r1
    579e:	b0 cf       	rjmp	.-160    	; 0x5700 <__fp_szero>

000057a0 <__mulsf3x>:
    57a0:	8c df       	rcall	.-232    	; 0x56ba <__fp_split3>
    57a2:	a0 f3       	brcs	.-24     	; 0x578c <__mulsf3+0x4>

000057a4 <__mulsf3_pse>:
    57a4:	95 9f       	mul	r25, r21
    57a6:	d1 f3       	breq	.-12     	; 0x579c <__mulsf3+0x14>
    57a8:	95 0f       	add	r25, r21
    57aa:	50 e0       	ldi	r21, 0x00	; 0
    57ac:	55 1f       	adc	r21, r21
    57ae:	62 9f       	mul	r22, r18
    57b0:	f0 01       	movw	r30, r0
    57b2:	72 9f       	mul	r23, r18
    57b4:	bb 27       	eor	r27, r27
    57b6:	f0 0d       	add	r31, r0
    57b8:	b1 1d       	adc	r27, r1
    57ba:	63 9f       	mul	r22, r19
    57bc:	aa 27       	eor	r26, r26
    57be:	f0 0d       	add	r31, r0
    57c0:	b1 1d       	adc	r27, r1
    57c2:	aa 1f       	adc	r26, r26
    57c4:	64 9f       	mul	r22, r20
    57c6:	66 27       	eor	r22, r22
    57c8:	b0 0d       	add	r27, r0
    57ca:	a1 1d       	adc	r26, r1
    57cc:	66 1f       	adc	r22, r22
    57ce:	82 9f       	mul	r24, r18
    57d0:	22 27       	eor	r18, r18
    57d2:	b0 0d       	add	r27, r0
    57d4:	a1 1d       	adc	r26, r1
    57d6:	62 1f       	adc	r22, r18
    57d8:	73 9f       	mul	r23, r19
    57da:	b0 0d       	add	r27, r0
    57dc:	a1 1d       	adc	r26, r1
    57de:	62 1f       	adc	r22, r18
    57e0:	83 9f       	mul	r24, r19
    57e2:	a0 0d       	add	r26, r0
    57e4:	61 1d       	adc	r22, r1
    57e6:	22 1f       	adc	r18, r18
    57e8:	74 9f       	mul	r23, r20
    57ea:	33 27       	eor	r19, r19
    57ec:	a0 0d       	add	r26, r0
    57ee:	61 1d       	adc	r22, r1
    57f0:	23 1f       	adc	r18, r19
    57f2:	84 9f       	mul	r24, r20
    57f4:	60 0d       	add	r22, r0
    57f6:	21 1d       	adc	r18, r1
    57f8:	82 2f       	mov	r24, r18
    57fa:	76 2f       	mov	r23, r22
    57fc:	6a 2f       	mov	r22, r26
    57fe:	11 24       	eor	r1, r1
    5800:	9f 57       	subi	r25, 0x7F	; 127
    5802:	50 40       	sbci	r21, 0x00	; 0
    5804:	8a f0       	brmi	.+34     	; 0x5828 <__mulsf3_pse+0x84>
    5806:	e1 f0       	breq	.+56     	; 0x5840 <__mulsf3_pse+0x9c>
    5808:	88 23       	and	r24, r24
    580a:	4a f0       	brmi	.+18     	; 0x581e <__mulsf3_pse+0x7a>
    580c:	ee 0f       	add	r30, r30
    580e:	ff 1f       	adc	r31, r31
    5810:	bb 1f       	adc	r27, r27
    5812:	66 1f       	adc	r22, r22
    5814:	77 1f       	adc	r23, r23
    5816:	88 1f       	adc	r24, r24
    5818:	91 50       	subi	r25, 0x01	; 1
    581a:	50 40       	sbci	r21, 0x00	; 0
    581c:	a9 f7       	brne	.-22     	; 0x5808 <__mulsf3_pse+0x64>
    581e:	9e 3f       	cpi	r25, 0xFE	; 254
    5820:	51 05       	cpc	r21, r1
    5822:	70 f0       	brcs	.+28     	; 0x5840 <__mulsf3_pse+0x9c>
    5824:	22 cf       	rjmp	.-444    	; 0x566a <__fp_inf>
    5826:	6c cf       	rjmp	.-296    	; 0x5700 <__fp_szero>
    5828:	5f 3f       	cpi	r21, 0xFF	; 255
    582a:	ec f3       	brlt	.-6      	; 0x5826 <__mulsf3_pse+0x82>
    582c:	98 3e       	cpi	r25, 0xE8	; 232
    582e:	dc f3       	brlt	.-10     	; 0x5826 <__mulsf3_pse+0x82>
    5830:	86 95       	lsr	r24
    5832:	77 95       	ror	r23
    5834:	67 95       	ror	r22
    5836:	b7 95       	ror	r27
    5838:	f7 95       	ror	r31
    583a:	e7 95       	ror	r30
    583c:	9f 5f       	subi	r25, 0xFF	; 255
    583e:	c1 f7       	brne	.-16     	; 0x5830 <__mulsf3_pse+0x8c>
    5840:	fe 2b       	or	r31, r30
    5842:	88 0f       	add	r24, r24
    5844:	91 1d       	adc	r25, r1
    5846:	96 95       	lsr	r25
    5848:	87 95       	ror	r24
    584a:	97 f9       	bld	r25, 7
    584c:	08 95       	ret

0000584e <pow>:
    584e:	fa 01       	movw	r30, r20
    5850:	ee 0f       	add	r30, r30
    5852:	ff 1f       	adc	r31, r31
    5854:	30 96       	adiw	r30, 0x00	; 0
    5856:	21 05       	cpc	r18, r1
    5858:	31 05       	cpc	r19, r1
    585a:	99 f1       	breq	.+102    	; 0x58c2 <pow+0x74>
    585c:	61 15       	cp	r22, r1
    585e:	71 05       	cpc	r23, r1
    5860:	61 f4       	brne	.+24     	; 0x587a <pow+0x2c>
    5862:	80 38       	cpi	r24, 0x80	; 128
    5864:	bf e3       	ldi	r27, 0x3F	; 63
    5866:	9b 07       	cpc	r25, r27
    5868:	49 f1       	breq	.+82     	; 0x58bc <pow+0x6e>
    586a:	68 94       	set
    586c:	90 38       	cpi	r25, 0x80	; 128
    586e:	81 05       	cpc	r24, r1
    5870:	61 f0       	breq	.+24     	; 0x588a <pow+0x3c>
    5872:	80 38       	cpi	r24, 0x80	; 128
    5874:	bf ef       	ldi	r27, 0xFF	; 255
    5876:	9b 07       	cpc	r25, r27
    5878:	41 f0       	breq	.+16     	; 0x588a <pow+0x3c>
    587a:	99 23       	and	r25, r25
    587c:	42 f5       	brpl	.+80     	; 0x58ce <pow+0x80>
    587e:	ff 3f       	cpi	r31, 0xFF	; 255
    5880:	e1 05       	cpc	r30, r1
    5882:	31 05       	cpc	r19, r1
    5884:	21 05       	cpc	r18, r1
    5886:	11 f1       	breq	.+68     	; 0x58cc <pow+0x7e>
    5888:	e8 94       	clt
    588a:	08 94       	sec
    588c:	e7 95       	ror	r30
    588e:	d9 01       	movw	r26, r18
    5890:	aa 23       	and	r26, r26
    5892:	29 f4       	brne	.+10     	; 0x589e <pow+0x50>
    5894:	ab 2f       	mov	r26, r27
    5896:	be 2f       	mov	r27, r30
    5898:	f8 5f       	subi	r31, 0xF8	; 248
    589a:	d0 f3       	brcs	.-12     	; 0x5890 <pow+0x42>
    589c:	10 c0       	rjmp	.+32     	; 0x58be <pow+0x70>
    589e:	ff 5f       	subi	r31, 0xFF	; 255
    58a0:	70 f4       	brcc	.+28     	; 0x58be <pow+0x70>
    58a2:	a6 95       	lsr	r26
    58a4:	e0 f7       	brcc	.-8      	; 0x589e <pow+0x50>
    58a6:	f7 39       	cpi	r31, 0x97	; 151
    58a8:	50 f0       	brcs	.+20     	; 0x58be <pow+0x70>
    58aa:	19 f0       	breq	.+6      	; 0x58b2 <pow+0x64>
    58ac:	ff 3a       	cpi	r31, 0xAF	; 175
    58ae:	38 f4       	brcc	.+14     	; 0x58be <pow+0x70>
    58b0:	9f 77       	andi	r25, 0x7F	; 127
    58b2:	9f 93       	push	r25
    58b4:	0c d0       	rcall	.+24     	; 0x58ce <pow+0x80>
    58b6:	0f 90       	pop	r0
    58b8:	07 fc       	sbrc	r0, 7
    58ba:	90 58       	subi	r25, 0x80	; 128
    58bc:	08 95       	ret
    58be:	3e f0       	brts	.+14     	; 0x58ce <pow+0x80>
    58c0:	da ce       	rjmp	.-588    	; 0x5676 <__fp_nan>
    58c2:	60 e0       	ldi	r22, 0x00	; 0
    58c4:	70 e0       	ldi	r23, 0x00	; 0
    58c6:	80 e8       	ldi	r24, 0x80	; 128
    58c8:	9f e3       	ldi	r25, 0x3F	; 63
    58ca:	08 95       	ret
    58cc:	4f e7       	ldi	r20, 0x7F	; 127
    58ce:	9f 77       	andi	r25, 0x7F	; 127
    58d0:	5f 93       	push	r21
    58d2:	4f 93       	push	r20
    58d4:	3f 93       	push	r19
    58d6:	2f 93       	push	r18
    58d8:	9e d0       	rcall	.+316    	; 0x5a16 <log>
    58da:	2f 91       	pop	r18
    58dc:	3f 91       	pop	r19
    58de:	4f 91       	pop	r20
    58e0:	5f 91       	pop	r21
    58e2:	52 df       	rcall	.-348    	; 0x5788 <__mulsf3>
    58e4:	05 c0       	rjmp	.+10     	; 0x58f0 <exp>
    58e6:	19 f4       	brne	.+6      	; 0x58ee <pow+0xa0>
    58e8:	0e f0       	brts	.+2      	; 0x58ec <pow+0x9e>
    58ea:	bf ce       	rjmp	.-642    	; 0x566a <__fp_inf>
    58ec:	08 cf       	rjmp	.-496    	; 0x56fe <__fp_zero>
    58ee:	c3 ce       	rjmp	.-634    	; 0x5676 <__fp_nan>

000058f0 <exp>:
    58f0:	ec de       	rcall	.-552    	; 0x56ca <__fp_splitA>
    58f2:	c8 f3       	brcs	.-14     	; 0x58e6 <pow+0x98>
    58f4:	96 38       	cpi	r25, 0x86	; 134
    58f6:	c0 f7       	brcc	.-16     	; 0x58e8 <pow+0x9a>
    58f8:	07 f8       	bld	r0, 7
    58fa:	0f 92       	push	r0
    58fc:	e8 94       	clt
    58fe:	2b e3       	ldi	r18, 0x3B	; 59
    5900:	3a ea       	ldi	r19, 0xAA	; 170
    5902:	48 eb       	ldi	r20, 0xB8	; 184
    5904:	5f e7       	ldi	r21, 0x7F	; 127
    5906:	4e df       	rcall	.-356    	; 0x57a4 <__mulsf3_pse>
    5908:	0f 92       	push	r0
    590a:	0f 92       	push	r0
    590c:	0f 92       	push	r0
    590e:	4d b7       	in	r20, 0x3d	; 61
    5910:	5e b7       	in	r21, 0x3e	; 62
    5912:	0f 92       	push	r0
    5914:	c0 d0       	rcall	.+384    	; 0x5a96 <modf>
    5916:	e8 ec       	ldi	r30, 0xC8	; 200
    5918:	f0 e0       	ldi	r31, 0x00	; 0
    591a:	16 d0       	rcall	.+44     	; 0x5948 <__fp_powser>
    591c:	4f 91       	pop	r20
    591e:	5f 91       	pop	r21
    5920:	ef 91       	pop	r30
    5922:	ff 91       	pop	r31
    5924:	e5 95       	asr	r30
    5926:	ee 1f       	adc	r30, r30
    5928:	ff 1f       	adc	r31, r31
    592a:	49 f0       	breq	.+18     	; 0x593e <exp+0x4e>
    592c:	fe 57       	subi	r31, 0x7E	; 126
    592e:	e0 68       	ori	r30, 0x80	; 128
    5930:	44 27       	eor	r20, r20
    5932:	ee 0f       	add	r30, r30
    5934:	44 1f       	adc	r20, r20
    5936:	fa 95       	dec	r31
    5938:	e1 f7       	brne	.-8      	; 0x5932 <exp+0x42>
    593a:	41 95       	neg	r20
    593c:	55 0b       	sbc	r21, r21
    593e:	32 d0       	rcall	.+100    	; 0x59a4 <ldexp>
    5940:	0f 90       	pop	r0
    5942:	07 fe       	sbrs	r0, 7
    5944:	26 c0       	rjmp	.+76     	; 0x5992 <inverse>
    5946:	08 95       	ret

00005948 <__fp_powser>:
    5948:	df 93       	push	r29
    594a:	cf 93       	push	r28
    594c:	1f 93       	push	r17
    594e:	0f 93       	push	r16
    5950:	ff 92       	push	r15
    5952:	ef 92       	push	r14
    5954:	df 92       	push	r13
    5956:	7b 01       	movw	r14, r22
    5958:	8c 01       	movw	r16, r24
    595a:	68 94       	set
    595c:	05 c0       	rjmp	.+10     	; 0x5968 <__fp_powser+0x20>
    595e:	da 2e       	mov	r13, r26
    5960:	ef 01       	movw	r28, r30
    5962:	1e df       	rcall	.-452    	; 0x57a0 <__mulsf3x>
    5964:	fe 01       	movw	r30, r28
    5966:	e8 94       	clt
    5968:	a5 91       	lpm	r26, Z+
    596a:	25 91       	lpm	r18, Z+
    596c:	35 91       	lpm	r19, Z+
    596e:	45 91       	lpm	r20, Z+
    5970:	55 91       	lpm	r21, Z+
    5972:	ae f3       	brts	.-22     	; 0x595e <__fp_powser+0x16>
    5974:	ef 01       	movw	r28, r30
    5976:	28 dd       	rcall	.-1456   	; 0x53c8 <__addsf3x>
    5978:	fe 01       	movw	r30, r28
    597a:	97 01       	movw	r18, r14
    597c:	a8 01       	movw	r20, r16
    597e:	da 94       	dec	r13
    5980:	79 f7       	brne	.-34     	; 0x5960 <__fp_powser+0x18>
    5982:	df 90       	pop	r13
    5984:	ef 90       	pop	r14
    5986:	ff 90       	pop	r15
    5988:	0f 91       	pop	r16
    598a:	1f 91       	pop	r17
    598c:	cf 91       	pop	r28
    598e:	df 91       	pop	r29
    5990:	08 95       	ret

00005992 <inverse>:
    5992:	9b 01       	movw	r18, r22
    5994:	ac 01       	movw	r20, r24
    5996:	60 e0       	ldi	r22, 0x00	; 0
    5998:	70 e0       	ldi	r23, 0x00	; 0
    599a:	80 e8       	ldi	r24, 0x80	; 128
    599c:	9f e3       	ldi	r25, 0x3F	; 63
    599e:	6b cd       	rjmp	.-1322   	; 0x5476 <__divsf3>
    59a0:	64 ce       	rjmp	.-824    	; 0x566a <__fp_inf>
    59a2:	ac c0       	rjmp	.+344    	; 0x5afc <__fp_mpack>

000059a4 <ldexp>:
    59a4:	92 de       	rcall	.-732    	; 0x56ca <__fp_splitA>
    59a6:	e8 f3       	brcs	.-6      	; 0x59a2 <inverse+0x10>
    59a8:	99 23       	and	r25, r25
    59aa:	d9 f3       	breq	.-10     	; 0x59a2 <inverse+0x10>
    59ac:	94 0f       	add	r25, r20
    59ae:	51 1d       	adc	r21, r1
    59b0:	bb f3       	brvs	.-18     	; 0x59a0 <inverse+0xe>
    59b2:	91 50       	subi	r25, 0x01	; 1
    59b4:	50 40       	sbci	r21, 0x00	; 0
    59b6:	94 f0       	brlt	.+36     	; 0x59dc <ldexp+0x38>
    59b8:	59 f0       	breq	.+22     	; 0x59d0 <ldexp+0x2c>
    59ba:	88 23       	and	r24, r24
    59bc:	32 f0       	brmi	.+12     	; 0x59ca <ldexp+0x26>
    59be:	66 0f       	add	r22, r22
    59c0:	77 1f       	adc	r23, r23
    59c2:	88 1f       	adc	r24, r24
    59c4:	91 50       	subi	r25, 0x01	; 1
    59c6:	50 40       	sbci	r21, 0x00	; 0
    59c8:	c1 f7       	brne	.-16     	; 0x59ba <ldexp+0x16>
    59ca:	9e 3f       	cpi	r25, 0xFE	; 254
    59cc:	51 05       	cpc	r21, r1
    59ce:	44 f7       	brge	.-48     	; 0x59a0 <inverse+0xe>
    59d0:	88 0f       	add	r24, r24
    59d2:	91 1d       	adc	r25, r1
    59d4:	96 95       	lsr	r25
    59d6:	87 95       	ror	r24
    59d8:	97 f9       	bld	r25, 7
    59da:	08 95       	ret
    59dc:	5f 3f       	cpi	r21, 0xFF	; 255
    59de:	ac f0       	brlt	.+42     	; 0x5a0a <ldexp+0x66>
    59e0:	98 3e       	cpi	r25, 0xE8	; 232
    59e2:	9c f0       	brlt	.+38     	; 0x5a0a <ldexp+0x66>
    59e4:	bb 27       	eor	r27, r27
    59e6:	86 95       	lsr	r24
    59e8:	77 95       	ror	r23
    59ea:	67 95       	ror	r22
    59ec:	b7 95       	ror	r27
    59ee:	08 f4       	brcc	.+2      	; 0x59f2 <ldexp+0x4e>
    59f0:	b1 60       	ori	r27, 0x01	; 1
    59f2:	93 95       	inc	r25
    59f4:	c1 f7       	brne	.-16     	; 0x59e6 <ldexp+0x42>
    59f6:	bb 0f       	add	r27, r27
    59f8:	58 f7       	brcc	.-42     	; 0x59d0 <ldexp+0x2c>
    59fa:	11 f4       	brne	.+4      	; 0x5a00 <ldexp+0x5c>
    59fc:	60 ff       	sbrs	r22, 0
    59fe:	e8 cf       	rjmp	.-48     	; 0x59d0 <ldexp+0x2c>
    5a00:	6f 5f       	subi	r22, 0xFF	; 255
    5a02:	7f 4f       	sbci	r23, 0xFF	; 255
    5a04:	8f 4f       	sbci	r24, 0xFF	; 255
    5a06:	9f 4f       	sbci	r25, 0xFF	; 255
    5a08:	e3 cf       	rjmp	.-58     	; 0x59d0 <ldexp+0x2c>
    5a0a:	7a ce       	rjmp	.-780    	; 0x5700 <__fp_szero>
    5a0c:	0e f0       	brts	.+2      	; 0x5a10 <ldexp+0x6c>
    5a0e:	76 c0       	rjmp	.+236    	; 0x5afc <__fp_mpack>
    5a10:	32 ce       	rjmp	.-924    	; 0x5676 <__fp_nan>
    5a12:	68 94       	set
    5a14:	2a ce       	rjmp	.-940    	; 0x566a <__fp_inf>

00005a16 <log>:
    5a16:	59 de       	rcall	.-846    	; 0x56ca <__fp_splitA>
    5a18:	c8 f3       	brcs	.-14     	; 0x5a0c <ldexp+0x68>
    5a1a:	99 23       	and	r25, r25
    5a1c:	d1 f3       	breq	.-12     	; 0x5a12 <ldexp+0x6e>
    5a1e:	c6 f3       	brts	.-16     	; 0x5a10 <ldexp+0x6c>
    5a20:	df 93       	push	r29
    5a22:	cf 93       	push	r28
    5a24:	1f 93       	push	r17
    5a26:	0f 93       	push	r16
    5a28:	ff 92       	push	r15
    5a2a:	c9 2f       	mov	r28, r25
    5a2c:	dd 27       	eor	r29, r29
    5a2e:	88 23       	and	r24, r24
    5a30:	2a f0       	brmi	.+10     	; 0x5a3c <log+0x26>
    5a32:	21 97       	sbiw	r28, 0x01	; 1
    5a34:	66 0f       	add	r22, r22
    5a36:	77 1f       	adc	r23, r23
    5a38:	88 1f       	adc	r24, r24
    5a3a:	da f7       	brpl	.-10     	; 0x5a32 <log+0x1c>
    5a3c:	20 e0       	ldi	r18, 0x00	; 0
    5a3e:	30 e0       	ldi	r19, 0x00	; 0
    5a40:	40 e8       	ldi	r20, 0x80	; 128
    5a42:	5f eb       	ldi	r21, 0xBF	; 191
    5a44:	9f e3       	ldi	r25, 0x3F	; 63
    5a46:	88 39       	cpi	r24, 0x98	; 152
    5a48:	20 f0       	brcs	.+8      	; 0x5a52 <log+0x3c>
    5a4a:	80 3e       	cpi	r24, 0xE0	; 224
    5a4c:	30 f0       	brcs	.+12     	; 0x5a5a <log+0x44>
    5a4e:	21 96       	adiw	r28, 0x01	; 1
    5a50:	8f 77       	andi	r24, 0x7F	; 127
    5a52:	a9 dc       	rcall	.-1710   	; 0x53a6 <__addsf3>
    5a54:	e0 ef       	ldi	r30, 0xF0	; 240
    5a56:	f0 e0       	ldi	r31, 0x00	; 0
    5a58:	03 c0       	rjmp	.+6      	; 0x5a60 <log+0x4a>
    5a5a:	a5 dc       	rcall	.-1718   	; 0x53a6 <__addsf3>
    5a5c:	ed e1       	ldi	r30, 0x1D	; 29
    5a5e:	f1 e0       	ldi	r31, 0x01	; 1
    5a60:	73 df       	rcall	.-282    	; 0x5948 <__fp_powser>
    5a62:	8b 01       	movw	r16, r22
    5a64:	be 01       	movw	r22, r28
    5a66:	ec 01       	movw	r28, r24
    5a68:	fb 2e       	mov	r15, r27
    5a6a:	6f 57       	subi	r22, 0x7F	; 127
    5a6c:	71 09       	sbc	r23, r1
    5a6e:	75 95       	asr	r23
    5a70:	77 1f       	adc	r23, r23
    5a72:	88 0b       	sbc	r24, r24
    5a74:	99 0b       	sbc	r25, r25
    5a76:	9a dd       	rcall	.-1228   	; 0x55ac <__floatsisf>
    5a78:	28 e1       	ldi	r18, 0x18	; 24
    5a7a:	32 e7       	ldi	r19, 0x72	; 114
    5a7c:	41 e3       	ldi	r20, 0x31	; 49
    5a7e:	5f e3       	ldi	r21, 0x3F	; 63
    5a80:	8f de       	rcall	.-738    	; 0x57a0 <__mulsf3x>
    5a82:	af 2d       	mov	r26, r15
    5a84:	98 01       	movw	r18, r16
    5a86:	ae 01       	movw	r20, r28
    5a88:	ff 90       	pop	r15
    5a8a:	0f 91       	pop	r16
    5a8c:	1f 91       	pop	r17
    5a8e:	cf 91       	pop	r28
    5a90:	df 91       	pop	r29
    5a92:	9a dc       	rcall	.-1740   	; 0x53c8 <__addsf3x>
    5a94:	01 ce       	rjmp	.-1022   	; 0x5698 <__fp_round>

00005a96 <modf>:
    5a96:	fa 01       	movw	r30, r20
    5a98:	dc 01       	movw	r26, r24
    5a9a:	aa 0f       	add	r26, r26
    5a9c:	bb 1f       	adc	r27, r27
    5a9e:	9b 01       	movw	r18, r22
    5aa0:	ac 01       	movw	r20, r24
    5aa2:	bf 57       	subi	r27, 0x7F	; 127
    5aa4:	28 f4       	brcc	.+10     	; 0x5ab0 <modf+0x1a>
    5aa6:	22 27       	eor	r18, r18
    5aa8:	33 27       	eor	r19, r19
    5aaa:	44 27       	eor	r20, r20
    5aac:	50 78       	andi	r21, 0x80	; 128
    5aae:	1f c0       	rjmp	.+62     	; 0x5aee <modf+0x58>
    5ab0:	b7 51       	subi	r27, 0x17	; 23
    5ab2:	88 f4       	brcc	.+34     	; 0x5ad6 <modf+0x40>
    5ab4:	ab 2f       	mov	r26, r27
    5ab6:	00 24       	eor	r0, r0
    5ab8:	46 95       	lsr	r20
    5aba:	37 95       	ror	r19
    5abc:	27 95       	ror	r18
    5abe:	01 1c       	adc	r0, r1
    5ac0:	a3 95       	inc	r26
    5ac2:	d2 f3       	brmi	.-12     	; 0x5ab8 <modf+0x22>
    5ac4:	00 20       	and	r0, r0
    5ac6:	69 f0       	breq	.+26     	; 0x5ae2 <modf+0x4c>
    5ac8:	22 0f       	add	r18, r18
    5aca:	33 1f       	adc	r19, r19
    5acc:	44 1f       	adc	r20, r20
    5ace:	b3 95       	inc	r27
    5ad0:	da f3       	brmi	.-10     	; 0x5ac8 <modf+0x32>
    5ad2:	0d d0       	rcall	.+26     	; 0x5aee <modf+0x58>
    5ad4:	67 cc       	rjmp	.-1842   	; 0x53a4 <__subsf3>
    5ad6:	61 30       	cpi	r22, 0x01	; 1
    5ad8:	71 05       	cpc	r23, r1
    5ada:	a0 e8       	ldi	r26, 0x80	; 128
    5adc:	8a 07       	cpc	r24, r26
    5ade:	b9 46       	sbci	r27, 0x69	; 105
    5ae0:	30 f4       	brcc	.+12     	; 0x5aee <modf+0x58>
    5ae2:	9b 01       	movw	r18, r22
    5ae4:	ac 01       	movw	r20, r24
    5ae6:	66 27       	eor	r22, r22
    5ae8:	77 27       	eor	r23, r23
    5aea:	88 27       	eor	r24, r24
    5aec:	90 78       	andi	r25, 0x80	; 128
    5aee:	30 96       	adiw	r30, 0x00	; 0
    5af0:	21 f0       	breq	.+8      	; 0x5afa <modf+0x64>
    5af2:	20 83       	st	Z, r18
    5af4:	31 83       	std	Z+1, r19	; 0x01
    5af6:	42 83       	std	Z+2, r20	; 0x02
    5af8:	53 83       	std	Z+3, r21	; 0x03
    5afa:	08 95       	ret

00005afc <__fp_mpack>:
    5afc:	9f 3f       	cpi	r25, 0xFF	; 255
    5afe:	31 f0       	breq	.+12     	; 0x5b0c <__fp_mpack_finite+0xc>

00005b00 <__fp_mpack_finite>:
    5b00:	91 50       	subi	r25, 0x01	; 1
    5b02:	20 f4       	brcc	.+8      	; 0x5b0c <__fp_mpack_finite+0xc>
    5b04:	87 95       	ror	r24
    5b06:	77 95       	ror	r23
    5b08:	67 95       	ror	r22
    5b0a:	b7 95       	ror	r27
    5b0c:	88 0f       	add	r24, r24
    5b0e:	91 1d       	adc	r25, r1
    5b10:	96 95       	lsr	r25
    5b12:	87 95       	ror	r24
    5b14:	97 f9       	bld	r25, 7
    5b16:	08 95       	ret

00005b18 <vfprintf>:
    5b18:	a1 e1       	ldi	r26, 0x11	; 17
    5b1a:	b0 e0       	ldi	r27, 0x00	; 0
    5b1c:	e1 e9       	ldi	r30, 0x91	; 145
    5b1e:	fd e2       	ldi	r31, 0x2D	; 45
    5b20:	b7 c3       	rjmp	.+1902   	; 0x6290 <__prologue_saves__>
    5b22:	3c 01       	movw	r6, r24
    5b24:	7f 87       	std	Y+15, r23	; 0x0f
    5b26:	6e 87       	std	Y+14, r22	; 0x0e
    5b28:	6a 01       	movw	r12, r20
    5b2a:	fc 01       	movw	r30, r24
    5b2c:	17 82       	std	Z+7, r1	; 0x07
    5b2e:	16 82       	std	Z+6, r1	; 0x06
    5b30:	83 81       	ldd	r24, Z+3	; 0x03
    5b32:	81 fd       	sbrc	r24, 1
    5b34:	03 c0       	rjmp	.+6      	; 0x5b3c <vfprintf+0x24>
    5b36:	6f ef       	ldi	r22, 0xFF	; 255
    5b38:	7f ef       	ldi	r23, 0xFF	; 255
    5b3a:	52 c3       	rjmp	.+1700   	; 0x61e0 <vfprintf+0x6c8>
    5b3c:	9e 01       	movw	r18, r28
    5b3e:	2f 5f       	subi	r18, 0xFF	; 255
    5b40:	3f 4f       	sbci	r19, 0xFF	; 255
    5b42:	39 8b       	std	Y+17, r19	; 0x11
    5b44:	28 8b       	std	Y+16, r18	; 0x10
    5b46:	f3 01       	movw	r30, r6
    5b48:	23 81       	ldd	r18, Z+3	; 0x03
    5b4a:	ee 85       	ldd	r30, Y+14	; 0x0e
    5b4c:	ff 85       	ldd	r31, Y+15	; 0x0f
    5b4e:	23 fd       	sbrc	r18, 3
    5b50:	85 91       	lpm	r24, Z+
    5b52:	23 ff       	sbrs	r18, 3
    5b54:	81 91       	ld	r24, Z+
    5b56:	ff 87       	std	Y+15, r31	; 0x0f
    5b58:	ee 87       	std	Y+14, r30	; 0x0e
    5b5a:	88 23       	and	r24, r24
    5b5c:	09 f4       	brne	.+2      	; 0x5b60 <vfprintf+0x48>
    5b5e:	3d c3       	rjmp	.+1658   	; 0x61da <vfprintf+0x6c2>
    5b60:	85 32       	cpi	r24, 0x25	; 37
    5b62:	51 f4       	brne	.+20     	; 0x5b78 <vfprintf+0x60>
    5b64:	ee 85       	ldd	r30, Y+14	; 0x0e
    5b66:	ff 85       	ldd	r31, Y+15	; 0x0f
    5b68:	23 fd       	sbrc	r18, 3
    5b6a:	85 91       	lpm	r24, Z+
    5b6c:	23 ff       	sbrs	r18, 3
    5b6e:	81 91       	ld	r24, Z+
    5b70:	ff 87       	std	Y+15, r31	; 0x0f
    5b72:	ee 87       	std	Y+14, r30	; 0x0e
    5b74:	85 32       	cpi	r24, 0x25	; 37
    5b76:	21 f4       	brne	.+8      	; 0x5b80 <vfprintf+0x68>
    5b78:	90 e0       	ldi	r25, 0x00	; 0
    5b7a:	b3 01       	movw	r22, r6
    5b7c:	20 d6       	rcall	.+3136   	; 0x67be <fputc>
    5b7e:	e3 cf       	rjmp	.-58     	; 0x5b46 <vfprintf+0x2e>
    5b80:	98 2f       	mov	r25, r24
    5b82:	10 e0       	ldi	r17, 0x00	; 0
    5b84:	88 24       	eor	r8, r8
    5b86:	99 24       	eor	r9, r9
    5b88:	10 32       	cpi	r17, 0x20	; 32
    5b8a:	b0 f4       	brcc	.+44     	; 0x5bb8 <vfprintf+0xa0>
    5b8c:	9b 32       	cpi	r25, 0x2B	; 43
    5b8e:	69 f0       	breq	.+26     	; 0x5baa <vfprintf+0x92>
    5b90:	9c 32       	cpi	r25, 0x2C	; 44
    5b92:	28 f4       	brcc	.+10     	; 0x5b9e <vfprintf+0x86>
    5b94:	90 32       	cpi	r25, 0x20	; 32
    5b96:	51 f0       	breq	.+20     	; 0x5bac <vfprintf+0x94>
    5b98:	93 32       	cpi	r25, 0x23	; 35
    5b9a:	71 f4       	brne	.+28     	; 0x5bb8 <vfprintf+0xa0>
    5b9c:	0b c0       	rjmp	.+22     	; 0x5bb4 <vfprintf+0x9c>
    5b9e:	9d 32       	cpi	r25, 0x2D	; 45
    5ba0:	39 f0       	breq	.+14     	; 0x5bb0 <vfprintf+0x98>
    5ba2:	90 33       	cpi	r25, 0x30	; 48
    5ba4:	49 f4       	brne	.+18     	; 0x5bb8 <vfprintf+0xa0>
    5ba6:	11 60       	ori	r17, 0x01	; 1
    5ba8:	28 c0       	rjmp	.+80     	; 0x5bfa <vfprintf+0xe2>
    5baa:	12 60       	ori	r17, 0x02	; 2
    5bac:	14 60       	ori	r17, 0x04	; 4
    5bae:	25 c0       	rjmp	.+74     	; 0x5bfa <vfprintf+0xe2>
    5bb0:	18 60       	ori	r17, 0x08	; 8
    5bb2:	23 c0       	rjmp	.+70     	; 0x5bfa <vfprintf+0xe2>
    5bb4:	10 61       	ori	r17, 0x10	; 16
    5bb6:	21 c0       	rjmp	.+66     	; 0x5bfa <vfprintf+0xe2>
    5bb8:	17 fd       	sbrc	r17, 7
    5bba:	2a c0       	rjmp	.+84     	; 0x5c10 <vfprintf+0xf8>
    5bbc:	89 2f       	mov	r24, r25
    5bbe:	80 53       	subi	r24, 0x30	; 48
    5bc0:	8a 30       	cpi	r24, 0x0A	; 10
    5bc2:	78 f4       	brcc	.+30     	; 0x5be2 <vfprintf+0xca>
    5bc4:	16 ff       	sbrs	r17, 6
    5bc6:	06 c0       	rjmp	.+12     	; 0x5bd4 <vfprintf+0xbc>
    5bc8:	fa e0       	ldi	r31, 0x0A	; 10
    5bca:	9f 9e       	mul	r9, r31
    5bcc:	90 2c       	mov	r9, r0
    5bce:	11 24       	eor	r1, r1
    5bd0:	98 0e       	add	r9, r24
    5bd2:	13 c0       	rjmp	.+38     	; 0x5bfa <vfprintf+0xe2>
    5bd4:	3a e0       	ldi	r19, 0x0A	; 10
    5bd6:	83 9e       	mul	r8, r19
    5bd8:	80 2c       	mov	r8, r0
    5bda:	11 24       	eor	r1, r1
    5bdc:	88 0e       	add	r8, r24
    5bde:	10 62       	ori	r17, 0x20	; 32
    5be0:	0c c0       	rjmp	.+24     	; 0x5bfa <vfprintf+0xe2>
    5be2:	9e 32       	cpi	r25, 0x2E	; 46
    5be4:	21 f4       	brne	.+8      	; 0x5bee <vfprintf+0xd6>
    5be6:	16 fd       	sbrc	r17, 6
    5be8:	f8 c2       	rjmp	.+1520   	; 0x61da <vfprintf+0x6c2>
    5bea:	10 64       	ori	r17, 0x40	; 64
    5bec:	06 c0       	rjmp	.+12     	; 0x5bfa <vfprintf+0xe2>
    5bee:	9c 36       	cpi	r25, 0x6C	; 108
    5bf0:	11 f4       	brne	.+4      	; 0x5bf6 <vfprintf+0xde>
    5bf2:	10 68       	ori	r17, 0x80	; 128
    5bf4:	02 c0       	rjmp	.+4      	; 0x5bfa <vfprintf+0xe2>
    5bf6:	98 36       	cpi	r25, 0x68	; 104
    5bf8:	59 f4       	brne	.+22     	; 0x5c10 <vfprintf+0xf8>
    5bfa:	ee 85       	ldd	r30, Y+14	; 0x0e
    5bfc:	ff 85       	ldd	r31, Y+15	; 0x0f
    5bfe:	23 fd       	sbrc	r18, 3
    5c00:	95 91       	lpm	r25, Z+
    5c02:	23 ff       	sbrs	r18, 3
    5c04:	91 91       	ld	r25, Z+
    5c06:	ff 87       	std	Y+15, r31	; 0x0f
    5c08:	ee 87       	std	Y+14, r30	; 0x0e
    5c0a:	99 23       	and	r25, r25
    5c0c:	09 f0       	breq	.+2      	; 0x5c10 <vfprintf+0xf8>
    5c0e:	bc cf       	rjmp	.-136    	; 0x5b88 <vfprintf+0x70>
    5c10:	89 2f       	mov	r24, r25
    5c12:	85 54       	subi	r24, 0x45	; 69
    5c14:	83 30       	cpi	r24, 0x03	; 3
    5c16:	20 f4       	brcc	.+8      	; 0x5c20 <vfprintf+0x108>
    5c18:	81 2f       	mov	r24, r17
    5c1a:	80 61       	ori	r24, 0x10	; 16
    5c1c:	90 5e       	subi	r25, 0xE0	; 224
    5c1e:	07 c0       	rjmp	.+14     	; 0x5c2e <vfprintf+0x116>
    5c20:	89 2f       	mov	r24, r25
    5c22:	85 56       	subi	r24, 0x65	; 101
    5c24:	83 30       	cpi	r24, 0x03	; 3
    5c26:	08 f0       	brcs	.+2      	; 0x5c2a <vfprintf+0x112>
    5c28:	8f c1       	rjmp	.+798    	; 0x5f48 <vfprintf+0x430>
    5c2a:	81 2f       	mov	r24, r17
    5c2c:	8f 7e       	andi	r24, 0xEF	; 239
    5c2e:	86 fd       	sbrc	r24, 6
    5c30:	02 c0       	rjmp	.+4      	; 0x5c36 <vfprintf+0x11e>
    5c32:	76 e0       	ldi	r23, 0x06	; 6
    5c34:	97 2e       	mov	r9, r23
    5c36:	6f e3       	ldi	r22, 0x3F	; 63
    5c38:	f6 2e       	mov	r15, r22
    5c3a:	f8 22       	and	r15, r24
    5c3c:	95 36       	cpi	r25, 0x65	; 101
    5c3e:	19 f4       	brne	.+6      	; 0x5c46 <vfprintf+0x12e>
    5c40:	f0 e4       	ldi	r31, 0x40	; 64
    5c42:	ff 2a       	or	r15, r31
    5c44:	07 c0       	rjmp	.+14     	; 0x5c54 <vfprintf+0x13c>
    5c46:	96 36       	cpi	r25, 0x66	; 102
    5c48:	19 f4       	brne	.+6      	; 0x5c50 <vfprintf+0x138>
    5c4a:	20 e8       	ldi	r18, 0x80	; 128
    5c4c:	f2 2a       	or	r15, r18
    5c4e:	02 c0       	rjmp	.+4      	; 0x5c54 <vfprintf+0x13c>
    5c50:	91 10       	cpse	r9, r1
    5c52:	9a 94       	dec	r9
    5c54:	f7 fe       	sbrs	r15, 7
    5c56:	0a c0       	rjmp	.+20     	; 0x5c6c <vfprintf+0x154>
    5c58:	3b e3       	ldi	r19, 0x3B	; 59
    5c5a:	39 15       	cp	r19, r9
    5c5c:	18 f4       	brcc	.+6      	; 0x5c64 <vfprintf+0x14c>
    5c5e:	5c e3       	ldi	r21, 0x3C	; 60
    5c60:	b5 2e       	mov	r11, r21
    5c62:	02 c0       	rjmp	.+4      	; 0x5c68 <vfprintf+0x150>
    5c64:	b9 2c       	mov	r11, r9
    5c66:	b3 94       	inc	r11
    5c68:	27 e0       	ldi	r18, 0x07	; 7
    5c6a:	09 c0       	rjmp	.+18     	; 0x5c7e <vfprintf+0x166>
    5c6c:	47 e0       	ldi	r20, 0x07	; 7
    5c6e:	49 15       	cp	r20, r9
    5c70:	20 f4       	brcc	.+8      	; 0x5c7a <vfprintf+0x162>
    5c72:	bb 24       	eor	r11, r11
    5c74:	47 e0       	ldi	r20, 0x07	; 7
    5c76:	94 2e       	mov	r9, r20
    5c78:	f7 cf       	rjmp	.-18     	; 0x5c68 <vfprintf+0x150>
    5c7a:	29 2d       	mov	r18, r9
    5c7c:	bb 24       	eor	r11, r11
    5c7e:	c6 01       	movw	r24, r12
    5c80:	04 96       	adiw	r24, 0x04	; 4
    5c82:	9d 87       	std	Y+13, r25	; 0x0d
    5c84:	8c 87       	std	Y+12, r24	; 0x0c
    5c86:	f6 01       	movw	r30, r12
    5c88:	60 81       	ld	r22, Z
    5c8a:	71 81       	ldd	r23, Z+1	; 0x01
    5c8c:	82 81       	ldd	r24, Z+2	; 0x02
    5c8e:	93 81       	ldd	r25, Z+3	; 0x03
    5c90:	ae 01       	movw	r20, r28
    5c92:	4f 5f       	subi	r20, 0xFF	; 255
    5c94:	5f 4f       	sbci	r21, 0xFF	; 255
    5c96:	0b 2d       	mov	r16, r11
    5c98:	a4 d4       	rcall	.+2376   	; 0x65e2 <__ftoa_engine>
    5c9a:	6c 01       	movw	r12, r24
    5c9c:	09 81       	ldd	r16, Y+1	; 0x01
    5c9e:	20 2e       	mov	r2, r16
    5ca0:	33 24       	eor	r3, r3
    5ca2:	00 ff       	sbrs	r16, 0
    5ca4:	04 c0       	rjmp	.+8      	; 0x5cae <vfprintf+0x196>
    5ca6:	03 fd       	sbrc	r16, 3
    5ca8:	02 c0       	rjmp	.+4      	; 0x5cae <vfprintf+0x196>
    5caa:	1d e2       	ldi	r17, 0x2D	; 45
    5cac:	09 c0       	rjmp	.+18     	; 0x5cc0 <vfprintf+0x1a8>
    5cae:	f1 fe       	sbrs	r15, 1
    5cb0:	02 c0       	rjmp	.+4      	; 0x5cb6 <vfprintf+0x19e>
    5cb2:	1b e2       	ldi	r17, 0x2B	; 43
    5cb4:	05 c0       	rjmp	.+10     	; 0x5cc0 <vfprintf+0x1a8>
    5cb6:	f2 fc       	sbrc	r15, 2
    5cb8:	02 c0       	rjmp	.+4      	; 0x5cbe <vfprintf+0x1a6>
    5cba:	10 e0       	ldi	r17, 0x00	; 0
    5cbc:	01 c0       	rjmp	.+2      	; 0x5cc0 <vfprintf+0x1a8>
    5cbe:	10 e2       	ldi	r17, 0x20	; 32
    5cc0:	c1 01       	movw	r24, r2
    5cc2:	8c 70       	andi	r24, 0x0C	; 12
    5cc4:	90 70       	andi	r25, 0x00	; 0
    5cc6:	89 2b       	or	r24, r25
    5cc8:	a1 f1       	breq	.+104    	; 0x5d32 <vfprintf+0x21a>
    5cca:	11 23       	and	r17, r17
    5ccc:	11 f4       	brne	.+4      	; 0x5cd2 <vfprintf+0x1ba>
    5cce:	83 e0       	ldi	r24, 0x03	; 3
    5cd0:	01 c0       	rjmp	.+2      	; 0x5cd4 <vfprintf+0x1bc>
    5cd2:	84 e0       	ldi	r24, 0x04	; 4
    5cd4:	88 15       	cp	r24, r8
    5cd6:	10 f0       	brcs	.+4      	; 0x5cdc <vfprintf+0x1c4>
    5cd8:	88 24       	eor	r8, r8
    5cda:	09 c0       	rjmp	.+18     	; 0x5cee <vfprintf+0x1d6>
    5cdc:	88 1a       	sub	r8, r24
    5cde:	f3 fc       	sbrc	r15, 3
    5ce0:	06 c0       	rjmp	.+12     	; 0x5cee <vfprintf+0x1d6>
    5ce2:	80 e2       	ldi	r24, 0x20	; 32
    5ce4:	90 e0       	ldi	r25, 0x00	; 0
    5ce6:	b3 01       	movw	r22, r6
    5ce8:	6a d5       	rcall	.+2772   	; 0x67be <fputc>
    5cea:	8a 94       	dec	r8
    5cec:	d1 f7       	brne	.-12     	; 0x5ce2 <vfprintf+0x1ca>
    5cee:	11 23       	and	r17, r17
    5cf0:	21 f0       	breq	.+8      	; 0x5cfa <vfprintf+0x1e2>
    5cf2:	81 2f       	mov	r24, r17
    5cf4:	90 e0       	ldi	r25, 0x00	; 0
    5cf6:	b3 01       	movw	r22, r6
    5cf8:	62 d5       	rcall	.+2756   	; 0x67be <fputc>
    5cfa:	23 fe       	sbrs	r2, 3
    5cfc:	03 c0       	rjmp	.+6      	; 0x5d04 <vfprintf+0x1ec>
    5cfe:	0f e5       	ldi	r16, 0x5F	; 95
    5d00:	15 e0       	ldi	r17, 0x05	; 5
    5d02:	0d c0       	rjmp	.+26     	; 0x5d1e <vfprintf+0x206>
    5d04:	03 e6       	ldi	r16, 0x63	; 99
    5d06:	15 e0       	ldi	r17, 0x05	; 5
    5d08:	0a c0       	rjmp	.+20     	; 0x5d1e <vfprintf+0x206>
    5d0a:	e1 14       	cp	r14, r1
    5d0c:	f1 04       	cpc	r15, r1
    5d0e:	09 f0       	breq	.+2      	; 0x5d12 <vfprintf+0x1fa>
    5d10:	80 52       	subi	r24, 0x20	; 32
    5d12:	90 e0       	ldi	r25, 0x00	; 0
    5d14:	b3 01       	movw	r22, r6
    5d16:	53 d5       	rcall	.+2726   	; 0x67be <fputc>
    5d18:	0f 5f       	subi	r16, 0xFF	; 255
    5d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    5d1c:	05 c0       	rjmp	.+10     	; 0x5d28 <vfprintf+0x210>
    5d1e:	ef 2c       	mov	r14, r15
    5d20:	ff 24       	eor	r15, r15
    5d22:	f0 e1       	ldi	r31, 0x10	; 16
    5d24:	ef 22       	and	r14, r31
    5d26:	ff 24       	eor	r15, r15
    5d28:	f8 01       	movw	r30, r16
    5d2a:	84 91       	lpm	r24, Z+
    5d2c:	88 23       	and	r24, r24
    5d2e:	69 f7       	brne	.-38     	; 0x5d0a <vfprintf+0x1f2>
    5d30:	08 c1       	rjmp	.+528    	; 0x5f42 <vfprintf+0x42a>
    5d32:	f7 fe       	sbrs	r15, 7
    5d34:	12 c0       	rjmp	.+36     	; 0x5d5a <vfprintf+0x242>
    5d36:	bc 0c       	add	r11, r12
    5d38:	24 fe       	sbrs	r2, 4
    5d3a:	04 c0       	rjmp	.+8      	; 0x5d44 <vfprintf+0x22c>
    5d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    5d3e:	81 33       	cpi	r24, 0x31	; 49
    5d40:	09 f4       	brne	.+2      	; 0x5d44 <vfprintf+0x22c>
    5d42:	ba 94       	dec	r11
    5d44:	1b 14       	cp	r1, r11
    5d46:	1c f0       	brlt	.+6      	; 0x5d4e <vfprintf+0x236>
    5d48:	bb 24       	eor	r11, r11
    5d4a:	b3 94       	inc	r11
    5d4c:	2d c0       	rjmp	.+90     	; 0x5da8 <vfprintf+0x290>
    5d4e:	f8 e0       	ldi	r31, 0x08	; 8
    5d50:	fb 15       	cp	r31, r11
    5d52:	50 f5       	brcc	.+84     	; 0x5da8 <vfprintf+0x290>
    5d54:	38 e0       	ldi	r19, 0x08	; 8
    5d56:	b3 2e       	mov	r11, r19
    5d58:	27 c0       	rjmp	.+78     	; 0x5da8 <vfprintf+0x290>
    5d5a:	f6 fc       	sbrc	r15, 6
    5d5c:	25 c0       	rjmp	.+74     	; 0x5da8 <vfprintf+0x290>
    5d5e:	89 2d       	mov	r24, r9
    5d60:	90 e0       	ldi	r25, 0x00	; 0
    5d62:	8c 15       	cp	r24, r12
    5d64:	9d 05       	cpc	r25, r13
    5d66:	4c f0       	brlt	.+18     	; 0x5d7a <vfprintf+0x262>
    5d68:	2c ef       	ldi	r18, 0xFC	; 252
    5d6a:	c2 16       	cp	r12, r18
    5d6c:	2f ef       	ldi	r18, 0xFF	; 255
    5d6e:	d2 06       	cpc	r13, r18
    5d70:	24 f0       	brlt	.+8      	; 0x5d7a <vfprintf+0x262>
    5d72:	30 e8       	ldi	r19, 0x80	; 128
    5d74:	f3 2a       	or	r15, r19
    5d76:	01 c0       	rjmp	.+2      	; 0x5d7a <vfprintf+0x262>
    5d78:	9a 94       	dec	r9
    5d7a:	99 20       	and	r9, r9
    5d7c:	49 f0       	breq	.+18     	; 0x5d90 <vfprintf+0x278>
    5d7e:	e2 e0       	ldi	r30, 0x02	; 2
    5d80:	f0 e0       	ldi	r31, 0x00	; 0
    5d82:	ec 0f       	add	r30, r28
    5d84:	fd 1f       	adc	r31, r29
    5d86:	e9 0d       	add	r30, r9
    5d88:	f1 1d       	adc	r31, r1
    5d8a:	80 81       	ld	r24, Z
    5d8c:	80 33       	cpi	r24, 0x30	; 48
    5d8e:	a1 f3       	breq	.-24     	; 0x5d78 <vfprintf+0x260>
    5d90:	f7 fe       	sbrs	r15, 7
    5d92:	0a c0       	rjmp	.+20     	; 0x5da8 <vfprintf+0x290>
    5d94:	b9 2c       	mov	r11, r9
    5d96:	b3 94       	inc	r11
    5d98:	89 2d       	mov	r24, r9
    5d9a:	90 e0       	ldi	r25, 0x00	; 0
    5d9c:	c8 16       	cp	r12, r24
    5d9e:	d9 06       	cpc	r13, r25
    5da0:	14 f0       	brlt	.+4      	; 0x5da6 <vfprintf+0x28e>
    5da2:	99 24       	eor	r9, r9
    5da4:	01 c0       	rjmp	.+2      	; 0x5da8 <vfprintf+0x290>
    5da6:	9c 18       	sub	r9, r12
    5da8:	f7 fc       	sbrc	r15, 7
    5daa:	03 c0       	rjmp	.+6      	; 0x5db2 <vfprintf+0x29a>
    5dac:	25 e0       	ldi	r18, 0x05	; 5
    5dae:	30 e0       	ldi	r19, 0x00	; 0
    5db0:	09 c0       	rjmp	.+18     	; 0x5dc4 <vfprintf+0x2ac>
    5db2:	1c 14       	cp	r1, r12
    5db4:	1d 04       	cpc	r1, r13
    5db6:	1c f0       	brlt	.+6      	; 0x5dbe <vfprintf+0x2a6>
    5db8:	21 e0       	ldi	r18, 0x01	; 1
    5dba:	30 e0       	ldi	r19, 0x00	; 0
    5dbc:	03 c0       	rjmp	.+6      	; 0x5dc4 <vfprintf+0x2ac>
    5dbe:	96 01       	movw	r18, r12
    5dc0:	2f 5f       	subi	r18, 0xFF	; 255
    5dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    5dc4:	11 23       	and	r17, r17
    5dc6:	11 f0       	breq	.+4      	; 0x5dcc <vfprintf+0x2b4>
    5dc8:	2f 5f       	subi	r18, 0xFF	; 255
    5dca:	3f 4f       	sbci	r19, 0xFF	; 255
    5dcc:	99 20       	and	r9, r9
    5dce:	29 f0       	breq	.+10     	; 0x5dda <vfprintf+0x2c2>
    5dd0:	89 2d       	mov	r24, r9
    5dd2:	90 e0       	ldi	r25, 0x00	; 0
    5dd4:	01 96       	adiw	r24, 0x01	; 1
    5dd6:	28 0f       	add	r18, r24
    5dd8:	39 1f       	adc	r19, r25
    5dda:	88 2d       	mov	r24, r8
    5ddc:	90 e0       	ldi	r25, 0x00	; 0
    5dde:	28 17       	cp	r18, r24
    5de0:	39 07       	cpc	r19, r25
    5de2:	14 f0       	brlt	.+4      	; 0x5de8 <vfprintf+0x2d0>
    5de4:	88 24       	eor	r8, r8
    5de6:	01 c0       	rjmp	.+2      	; 0x5dea <vfprintf+0x2d2>
    5de8:	82 1a       	sub	r8, r18
    5dea:	4f 2c       	mov	r4, r15
    5dec:	55 24       	eor	r5, r5
    5dee:	c2 01       	movw	r24, r4
    5df0:	89 70       	andi	r24, 0x09	; 9
    5df2:	90 70       	andi	r25, 0x00	; 0
    5df4:	89 2b       	or	r24, r25
    5df6:	31 f0       	breq	.+12     	; 0x5e04 <vfprintf+0x2ec>
    5df8:	07 c0       	rjmp	.+14     	; 0x5e08 <vfprintf+0x2f0>
    5dfa:	80 e2       	ldi	r24, 0x20	; 32
    5dfc:	90 e0       	ldi	r25, 0x00	; 0
    5dfe:	b3 01       	movw	r22, r6
    5e00:	de d4       	rcall	.+2492   	; 0x67be <fputc>
    5e02:	8a 94       	dec	r8
    5e04:	88 20       	and	r8, r8
    5e06:	c9 f7       	brne	.-14     	; 0x5dfa <vfprintf+0x2e2>
    5e08:	11 23       	and	r17, r17
    5e0a:	21 f0       	breq	.+8      	; 0x5e14 <vfprintf+0x2fc>
    5e0c:	81 2f       	mov	r24, r17
    5e0e:	90 e0       	ldi	r25, 0x00	; 0
    5e10:	b3 01       	movw	r22, r6
    5e12:	d5 d4       	rcall	.+2474   	; 0x67be <fputc>
    5e14:	43 fe       	sbrs	r4, 3
    5e16:	06 c0       	rjmp	.+12     	; 0x5e24 <vfprintf+0x30c>
    5e18:	07 c0       	rjmp	.+14     	; 0x5e28 <vfprintf+0x310>
    5e1a:	80 e3       	ldi	r24, 0x30	; 48
    5e1c:	90 e0       	ldi	r25, 0x00	; 0
    5e1e:	b3 01       	movw	r22, r6
    5e20:	ce d4       	rcall	.+2460   	; 0x67be <fputc>
    5e22:	8a 94       	dec	r8
    5e24:	88 20       	and	r8, r8
    5e26:	c9 f7       	brne	.-14     	; 0x5e1a <vfprintf+0x302>
    5e28:	f7 fe       	sbrs	r15, 7
    5e2a:	44 c0       	rjmp	.+136    	; 0x5eb4 <vfprintf+0x39c>
    5e2c:	86 01       	movw	r16, r12
    5e2e:	d7 fe       	sbrs	r13, 7
    5e30:	02 c0       	rjmp	.+4      	; 0x5e36 <vfprintf+0x31e>
    5e32:	00 e0       	ldi	r16, 0x00	; 0
    5e34:	10 e0       	ldi	r17, 0x00	; 0
    5e36:	76 01       	movw	r14, r12
    5e38:	08 94       	sec
    5e3a:	e1 1c       	adc	r14, r1
    5e3c:	f1 1c       	adc	r15, r1
    5e3e:	e0 1a       	sub	r14, r16
    5e40:	f1 0a       	sbc	r15, r17
    5e42:	41 e0       	ldi	r20, 0x01	; 1
    5e44:	50 e0       	ldi	r21, 0x00	; 0
    5e46:	4c 0f       	add	r20, r28
    5e48:	5d 1f       	adc	r21, r29
    5e4a:	e4 0e       	add	r14, r20
    5e4c:	f5 1e       	adc	r15, r21
    5e4e:	26 01       	movw	r4, r12
    5e50:	4b 18       	sub	r4, r11
    5e52:	51 08       	sbc	r5, r1
    5e54:	89 2d       	mov	r24, r9
    5e56:	90 e0       	ldi	r25, 0x00	; 0
    5e58:	aa 24       	eor	r10, r10
    5e5a:	bb 24       	eor	r11, r11
    5e5c:	a8 1a       	sub	r10, r24
    5e5e:	b9 0a       	sbc	r11, r25
    5e60:	5f ef       	ldi	r21, 0xFF	; 255
    5e62:	0f 3f       	cpi	r16, 0xFF	; 255
    5e64:	15 07       	cpc	r17, r21
    5e66:	21 f4       	brne	.+8      	; 0x5e70 <vfprintf+0x358>
    5e68:	8e e2       	ldi	r24, 0x2E	; 46
    5e6a:	90 e0       	ldi	r25, 0x00	; 0
    5e6c:	b3 01       	movw	r22, r6
    5e6e:	a7 d4       	rcall	.+2382   	; 0x67be <fputc>
    5e70:	c0 16       	cp	r12, r16
    5e72:	d1 06       	cpc	r13, r17
    5e74:	34 f0       	brlt	.+12     	; 0x5e82 <vfprintf+0x36a>
    5e76:	40 16       	cp	r4, r16
    5e78:	51 06       	cpc	r5, r17
    5e7a:	1c f4       	brge	.+6      	; 0x5e82 <vfprintf+0x36a>
    5e7c:	f7 01       	movw	r30, r14
    5e7e:	80 81       	ld	r24, Z
    5e80:	01 c0       	rjmp	.+2      	; 0x5e84 <vfprintf+0x36c>
    5e82:	80 e3       	ldi	r24, 0x30	; 48
    5e84:	01 50       	subi	r16, 0x01	; 1
    5e86:	10 40       	sbci	r17, 0x00	; 0
    5e88:	08 94       	sec
    5e8a:	e1 1c       	adc	r14, r1
    5e8c:	f1 1c       	adc	r15, r1
    5e8e:	0a 15       	cp	r16, r10
    5e90:	1b 05       	cpc	r17, r11
    5e92:	24 f0       	brlt	.+8      	; 0x5e9c <vfprintf+0x384>
    5e94:	90 e0       	ldi	r25, 0x00	; 0
    5e96:	b3 01       	movw	r22, r6
    5e98:	92 d4       	rcall	.+2340   	; 0x67be <fputc>
    5e9a:	e2 cf       	rjmp	.-60     	; 0x5e60 <vfprintf+0x348>
    5e9c:	0c 15       	cp	r16, r12
    5e9e:	1d 05       	cpc	r17, r13
    5ea0:	39 f4       	brne	.+14     	; 0x5eb0 <vfprintf+0x398>
    5ea2:	9a 81       	ldd	r25, Y+2	; 0x02
    5ea4:	96 33       	cpi	r25, 0x36	; 54
    5ea6:	18 f4       	brcc	.+6      	; 0x5eae <vfprintf+0x396>
    5ea8:	95 33       	cpi	r25, 0x35	; 53
    5eaa:	11 f4       	brne	.+4      	; 0x5eb0 <vfprintf+0x398>
    5eac:	24 fe       	sbrs	r2, 4
    5eae:	81 e3       	ldi	r24, 0x31	; 49
    5eb0:	90 e0       	ldi	r25, 0x00	; 0
    5eb2:	45 c0       	rjmp	.+138    	; 0x5f3e <vfprintf+0x426>
    5eb4:	8a 81       	ldd	r24, Y+2	; 0x02
    5eb6:	81 33       	cpi	r24, 0x31	; 49
    5eb8:	09 f0       	breq	.+2      	; 0x5ebc <vfprintf+0x3a4>
    5eba:	0f 7e       	andi	r16, 0xEF	; 239
    5ebc:	90 e0       	ldi	r25, 0x00	; 0
    5ebe:	b3 01       	movw	r22, r6
    5ec0:	7e d4       	rcall	.+2300   	; 0x67be <fputc>
    5ec2:	99 20       	and	r9, r9
    5ec4:	91 f0       	breq	.+36     	; 0x5eea <vfprintf+0x3d2>
    5ec6:	8e e2       	ldi	r24, 0x2E	; 46
    5ec8:	90 e0       	ldi	r25, 0x00	; 0
    5eca:	b3 01       	movw	r22, r6
    5ecc:	78 d4       	rcall	.+2288   	; 0x67be <fputc>
    5ece:	12 e0       	ldi	r17, 0x02	; 2
    5ed0:	e1 e0       	ldi	r30, 0x01	; 1
    5ed2:	f0 e0       	ldi	r31, 0x00	; 0
    5ed4:	ec 0f       	add	r30, r28
    5ed6:	fd 1f       	adc	r31, r29
    5ed8:	e1 0f       	add	r30, r17
    5eda:	f1 1d       	adc	r31, r1
    5edc:	1f 5f       	subi	r17, 0xFF	; 255
    5ede:	80 81       	ld	r24, Z
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	b3 01       	movw	r22, r6
    5ee4:	6c d4       	rcall	.+2264   	; 0x67be <fputc>
    5ee6:	9a 94       	dec	r9
    5ee8:	99 f7       	brne	.-26     	; 0x5ed0 <vfprintf+0x3b8>
    5eea:	44 fc       	sbrc	r4, 4
    5eec:	03 c0       	rjmp	.+6      	; 0x5ef4 <vfprintf+0x3dc>
    5eee:	85 e6       	ldi	r24, 0x65	; 101
    5ef0:	90 e0       	ldi	r25, 0x00	; 0
    5ef2:	02 c0       	rjmp	.+4      	; 0x5ef8 <vfprintf+0x3e0>
    5ef4:	85 e4       	ldi	r24, 0x45	; 69
    5ef6:	90 e0       	ldi	r25, 0x00	; 0
    5ef8:	b3 01       	movw	r22, r6
    5efa:	61 d4       	rcall	.+2242   	; 0x67be <fputc>
    5efc:	d7 fc       	sbrc	r13, 7
    5efe:	05 c0       	rjmp	.+10     	; 0x5f0a <vfprintf+0x3f2>
    5f00:	c1 14       	cp	r12, r1
    5f02:	d1 04       	cpc	r13, r1
    5f04:	41 f4       	brne	.+16     	; 0x5f16 <vfprintf+0x3fe>
    5f06:	04 ff       	sbrs	r16, 4
    5f08:	06 c0       	rjmp	.+12     	; 0x5f16 <vfprintf+0x3fe>
    5f0a:	d0 94       	com	r13
    5f0c:	c1 94       	neg	r12
    5f0e:	d1 08       	sbc	r13, r1
    5f10:	d3 94       	inc	r13
    5f12:	8d e2       	ldi	r24, 0x2D	; 45
    5f14:	01 c0       	rjmp	.+2      	; 0x5f18 <vfprintf+0x400>
    5f16:	8b e2       	ldi	r24, 0x2B	; 43
    5f18:	90 e0       	ldi	r25, 0x00	; 0
    5f1a:	b3 01       	movw	r22, r6
    5f1c:	50 d4       	rcall	.+2208   	; 0x67be <fputc>
    5f1e:	80 e3       	ldi	r24, 0x30	; 48
    5f20:	05 c0       	rjmp	.+10     	; 0x5f2c <vfprintf+0x414>
    5f22:	8f 5f       	subi	r24, 0xFF	; 255
    5f24:	26 ef       	ldi	r18, 0xF6	; 246
    5f26:	3f ef       	ldi	r19, 0xFF	; 255
    5f28:	c2 0e       	add	r12, r18
    5f2a:	d3 1e       	adc	r13, r19
    5f2c:	3a e0       	ldi	r19, 0x0A	; 10
    5f2e:	c3 16       	cp	r12, r19
    5f30:	d1 04       	cpc	r13, r1
    5f32:	bc f7       	brge	.-18     	; 0x5f22 <vfprintf+0x40a>
    5f34:	90 e0       	ldi	r25, 0x00	; 0
    5f36:	b3 01       	movw	r22, r6
    5f38:	42 d4       	rcall	.+2180   	; 0x67be <fputc>
    5f3a:	c6 01       	movw	r24, r12
    5f3c:	c0 96       	adiw	r24, 0x30	; 48
    5f3e:	b3 01       	movw	r22, r6
    5f40:	3e d4       	rcall	.+2172   	; 0x67be <fputc>
    5f42:	cc 84       	ldd	r12, Y+12	; 0x0c
    5f44:	dd 84       	ldd	r13, Y+13	; 0x0d
    5f46:	46 c1       	rjmp	.+652    	; 0x61d4 <vfprintf+0x6bc>
    5f48:	93 36       	cpi	r25, 0x63	; 99
    5f4a:	31 f0       	breq	.+12     	; 0x5f58 <vfprintf+0x440>
    5f4c:	93 37       	cpi	r25, 0x73	; 115
    5f4e:	99 f0       	breq	.+38     	; 0x5f76 <vfprintf+0x45e>
    5f50:	93 35       	cpi	r25, 0x53	; 83
    5f52:	09 f0       	breq	.+2      	; 0x5f56 <vfprintf+0x43e>
    5f54:	55 c0       	rjmp	.+170    	; 0x6000 <vfprintf+0x4e8>
    5f56:	22 c0       	rjmp	.+68     	; 0x5f9c <vfprintf+0x484>
    5f58:	f6 01       	movw	r30, r12
    5f5a:	80 81       	ld	r24, Z
    5f5c:	89 83       	std	Y+1, r24	; 0x01
    5f5e:	5e 01       	movw	r10, r28
    5f60:	08 94       	sec
    5f62:	a1 1c       	adc	r10, r1
    5f64:	b1 1c       	adc	r11, r1
    5f66:	22 e0       	ldi	r18, 0x02	; 2
    5f68:	30 e0       	ldi	r19, 0x00	; 0
    5f6a:	c2 0e       	add	r12, r18
    5f6c:	d3 1e       	adc	r13, r19
    5f6e:	21 e0       	ldi	r18, 0x01	; 1
    5f70:	e2 2e       	mov	r14, r18
    5f72:	f1 2c       	mov	r15, r1
    5f74:	11 c0       	rjmp	.+34     	; 0x5f98 <vfprintf+0x480>
    5f76:	f6 01       	movw	r30, r12
    5f78:	a0 80       	ld	r10, Z
    5f7a:	b1 80       	ldd	r11, Z+1	; 0x01
    5f7c:	16 fd       	sbrc	r17, 6
    5f7e:	03 c0       	rjmp	.+6      	; 0x5f86 <vfprintf+0x46e>
    5f80:	6f ef       	ldi	r22, 0xFF	; 255
    5f82:	7f ef       	ldi	r23, 0xFF	; 255
    5f84:	02 c0       	rjmp	.+4      	; 0x5f8a <vfprintf+0x472>
    5f86:	69 2d       	mov	r22, r9
    5f88:	70 e0       	ldi	r23, 0x00	; 0
    5f8a:	22 e0       	ldi	r18, 0x02	; 2
    5f8c:	30 e0       	ldi	r19, 0x00	; 0
    5f8e:	c2 0e       	add	r12, r18
    5f90:	d3 1e       	adc	r13, r19
    5f92:	c5 01       	movw	r24, r10
    5f94:	09 d4       	rcall	.+2066   	; 0x67a8 <strnlen>
    5f96:	7c 01       	movw	r14, r24
    5f98:	1f 77       	andi	r17, 0x7F	; 127
    5f9a:	12 c0       	rjmp	.+36     	; 0x5fc0 <vfprintf+0x4a8>
    5f9c:	f6 01       	movw	r30, r12
    5f9e:	a0 80       	ld	r10, Z
    5fa0:	b1 80       	ldd	r11, Z+1	; 0x01
    5fa2:	16 fd       	sbrc	r17, 6
    5fa4:	03 c0       	rjmp	.+6      	; 0x5fac <vfprintf+0x494>
    5fa6:	6f ef       	ldi	r22, 0xFF	; 255
    5fa8:	7f ef       	ldi	r23, 0xFF	; 255
    5faa:	02 c0       	rjmp	.+4      	; 0x5fb0 <vfprintf+0x498>
    5fac:	69 2d       	mov	r22, r9
    5fae:	70 e0       	ldi	r23, 0x00	; 0
    5fb0:	22 e0       	ldi	r18, 0x02	; 2
    5fb2:	30 e0       	ldi	r19, 0x00	; 0
    5fb4:	c2 0e       	add	r12, r18
    5fb6:	d3 1e       	adc	r13, r19
    5fb8:	c5 01       	movw	r24, r10
    5fba:	eb d3       	rcall	.+2006   	; 0x6792 <strnlen_P>
    5fbc:	7c 01       	movw	r14, r24
    5fbe:	10 68       	ori	r17, 0x80	; 128
    5fc0:	13 ff       	sbrs	r17, 3
    5fc2:	06 c0       	rjmp	.+12     	; 0x5fd0 <vfprintf+0x4b8>
    5fc4:	19 c0       	rjmp	.+50     	; 0x5ff8 <vfprintf+0x4e0>
    5fc6:	80 e2       	ldi	r24, 0x20	; 32
    5fc8:	90 e0       	ldi	r25, 0x00	; 0
    5fca:	b3 01       	movw	r22, r6
    5fcc:	f8 d3       	rcall	.+2032   	; 0x67be <fputc>
    5fce:	8a 94       	dec	r8
    5fd0:	88 2d       	mov	r24, r8
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	e8 16       	cp	r14, r24
    5fd6:	f9 06       	cpc	r15, r25
    5fd8:	b0 f3       	brcs	.-20     	; 0x5fc6 <vfprintf+0x4ae>
    5fda:	0e c0       	rjmp	.+28     	; 0x5ff8 <vfprintf+0x4e0>
    5fdc:	f5 01       	movw	r30, r10
    5fde:	17 fd       	sbrc	r17, 7
    5fe0:	85 91       	lpm	r24, Z+
    5fe2:	17 ff       	sbrs	r17, 7
    5fe4:	81 91       	ld	r24, Z+
    5fe6:	5f 01       	movw	r10, r30
    5fe8:	90 e0       	ldi	r25, 0x00	; 0
    5fea:	b3 01       	movw	r22, r6
    5fec:	e8 d3       	rcall	.+2000   	; 0x67be <fputc>
    5fee:	81 10       	cpse	r8, r1
    5ff0:	8a 94       	dec	r8
    5ff2:	08 94       	sec
    5ff4:	e1 08       	sbc	r14, r1
    5ff6:	f1 08       	sbc	r15, r1
    5ff8:	e1 14       	cp	r14, r1
    5ffa:	f1 04       	cpc	r15, r1
    5ffc:	79 f7       	brne	.-34     	; 0x5fdc <vfprintf+0x4c4>
    5ffe:	ea c0       	rjmp	.+468    	; 0x61d4 <vfprintf+0x6bc>
    6000:	94 36       	cpi	r25, 0x64	; 100
    6002:	11 f0       	breq	.+4      	; 0x6008 <vfprintf+0x4f0>
    6004:	99 36       	cpi	r25, 0x69	; 105
    6006:	81 f5       	brne	.+96     	; 0x6068 <vfprintf+0x550>
    6008:	17 ff       	sbrs	r17, 7
    600a:	08 c0       	rjmp	.+16     	; 0x601c <vfprintf+0x504>
    600c:	f6 01       	movw	r30, r12
    600e:	20 81       	ld	r18, Z
    6010:	31 81       	ldd	r19, Z+1	; 0x01
    6012:	42 81       	ldd	r20, Z+2	; 0x02
    6014:	53 81       	ldd	r21, Z+3	; 0x03
    6016:	84 e0       	ldi	r24, 0x04	; 4
    6018:	90 e0       	ldi	r25, 0x00	; 0
    601a:	0a c0       	rjmp	.+20     	; 0x6030 <vfprintf+0x518>
    601c:	f6 01       	movw	r30, r12
    601e:	80 81       	ld	r24, Z
    6020:	91 81       	ldd	r25, Z+1	; 0x01
    6022:	9c 01       	movw	r18, r24
    6024:	44 27       	eor	r20, r20
    6026:	37 fd       	sbrc	r19, 7
    6028:	40 95       	com	r20
    602a:	54 2f       	mov	r21, r20
    602c:	82 e0       	ldi	r24, 0x02	; 2
    602e:	90 e0       	ldi	r25, 0x00	; 0
    6030:	c8 0e       	add	r12, r24
    6032:	d9 1e       	adc	r13, r25
    6034:	9f e6       	ldi	r25, 0x6F	; 111
    6036:	f9 2e       	mov	r15, r25
    6038:	f1 22       	and	r15, r17
    603a:	57 ff       	sbrs	r21, 7
    603c:	09 c0       	rjmp	.+18     	; 0x6050 <vfprintf+0x538>
    603e:	50 95       	com	r21
    6040:	40 95       	com	r20
    6042:	30 95       	com	r19
    6044:	21 95       	neg	r18
    6046:	3f 4f       	sbci	r19, 0xFF	; 255
    6048:	4f 4f       	sbci	r20, 0xFF	; 255
    604a:	5f 4f       	sbci	r21, 0xFF	; 255
    604c:	90 e8       	ldi	r25, 0x80	; 128
    604e:	f9 2a       	or	r15, r25
    6050:	ca 01       	movw	r24, r20
    6052:	b9 01       	movw	r22, r18
    6054:	ae 01       	movw	r20, r28
    6056:	4f 5f       	subi	r20, 0xFF	; 255
    6058:	5f 4f       	sbci	r21, 0xFF	; 255
    605a:	2a e0       	ldi	r18, 0x0A	; 10
    605c:	30 e0       	ldi	r19, 0x00	; 0
    605e:	22 d4       	rcall	.+2116   	; 0x68a4 <__ultoa_invert>
    6060:	e8 2e       	mov	r14, r24
    6062:	e8 89       	ldd	r30, Y+16	; 0x10
    6064:	ee 1a       	sub	r14, r30
    6066:	40 c0       	rjmp	.+128    	; 0x60e8 <vfprintf+0x5d0>
    6068:	95 37       	cpi	r25, 0x75	; 117
    606a:	21 f4       	brne	.+8      	; 0x6074 <vfprintf+0x55c>
    606c:	1f 7e       	andi	r17, 0xEF	; 239
    606e:	2a e0       	ldi	r18, 0x0A	; 10
    6070:	30 e0       	ldi	r19, 0x00	; 0
    6072:	1c c0       	rjmp	.+56     	; 0x60ac <vfprintf+0x594>
    6074:	19 7f       	andi	r17, 0xF9	; 249
    6076:	9f 36       	cpi	r25, 0x6F	; 111
    6078:	61 f0       	breq	.+24     	; 0x6092 <vfprintf+0x57a>
    607a:	90 37       	cpi	r25, 0x70	; 112
    607c:	20 f4       	brcc	.+8      	; 0x6086 <vfprintf+0x56e>
    607e:	98 35       	cpi	r25, 0x58	; 88
    6080:	09 f0       	breq	.+2      	; 0x6084 <vfprintf+0x56c>
    6082:	ab c0       	rjmp	.+342    	; 0x61da <vfprintf+0x6c2>
    6084:	0f c0       	rjmp	.+30     	; 0x60a4 <vfprintf+0x58c>
    6086:	90 37       	cpi	r25, 0x70	; 112
    6088:	39 f0       	breq	.+14     	; 0x6098 <vfprintf+0x580>
    608a:	98 37       	cpi	r25, 0x78	; 120
    608c:	09 f0       	breq	.+2      	; 0x6090 <vfprintf+0x578>
    608e:	a5 c0       	rjmp	.+330    	; 0x61da <vfprintf+0x6c2>
    6090:	04 c0       	rjmp	.+8      	; 0x609a <vfprintf+0x582>
    6092:	28 e0       	ldi	r18, 0x08	; 8
    6094:	30 e0       	ldi	r19, 0x00	; 0
    6096:	0a c0       	rjmp	.+20     	; 0x60ac <vfprintf+0x594>
    6098:	10 61       	ori	r17, 0x10	; 16
    609a:	14 fd       	sbrc	r17, 4
    609c:	14 60       	ori	r17, 0x04	; 4
    609e:	20 e1       	ldi	r18, 0x10	; 16
    60a0:	30 e0       	ldi	r19, 0x00	; 0
    60a2:	04 c0       	rjmp	.+8      	; 0x60ac <vfprintf+0x594>
    60a4:	14 fd       	sbrc	r17, 4
    60a6:	16 60       	ori	r17, 0x06	; 6
    60a8:	20 e1       	ldi	r18, 0x10	; 16
    60aa:	32 e0       	ldi	r19, 0x02	; 2
    60ac:	17 ff       	sbrs	r17, 7
    60ae:	08 c0       	rjmp	.+16     	; 0x60c0 <vfprintf+0x5a8>
    60b0:	f6 01       	movw	r30, r12
    60b2:	60 81       	ld	r22, Z
    60b4:	71 81       	ldd	r23, Z+1	; 0x01
    60b6:	82 81       	ldd	r24, Z+2	; 0x02
    60b8:	93 81       	ldd	r25, Z+3	; 0x03
    60ba:	44 e0       	ldi	r20, 0x04	; 4
    60bc:	50 e0       	ldi	r21, 0x00	; 0
    60be:	08 c0       	rjmp	.+16     	; 0x60d0 <vfprintf+0x5b8>
    60c0:	f6 01       	movw	r30, r12
    60c2:	80 81       	ld	r24, Z
    60c4:	91 81       	ldd	r25, Z+1	; 0x01
    60c6:	bc 01       	movw	r22, r24
    60c8:	80 e0       	ldi	r24, 0x00	; 0
    60ca:	90 e0       	ldi	r25, 0x00	; 0
    60cc:	42 e0       	ldi	r20, 0x02	; 2
    60ce:	50 e0       	ldi	r21, 0x00	; 0
    60d0:	c4 0e       	add	r12, r20
    60d2:	d5 1e       	adc	r13, r21
    60d4:	ae 01       	movw	r20, r28
    60d6:	4f 5f       	subi	r20, 0xFF	; 255
    60d8:	5f 4f       	sbci	r21, 0xFF	; 255
    60da:	e4 d3       	rcall	.+1992   	; 0x68a4 <__ultoa_invert>
    60dc:	e8 2e       	mov	r14, r24
    60de:	58 89       	ldd	r21, Y+16	; 0x10
    60e0:	e5 1a       	sub	r14, r21
    60e2:	8f e7       	ldi	r24, 0x7F	; 127
    60e4:	f8 2e       	mov	r15, r24
    60e6:	f1 22       	and	r15, r17
    60e8:	f6 fe       	sbrs	r15, 6
    60ea:	0b c0       	rjmp	.+22     	; 0x6102 <vfprintf+0x5ea>
    60ec:	8e ef       	ldi	r24, 0xFE	; 254
    60ee:	f8 22       	and	r15, r24
    60f0:	e9 14       	cp	r14, r9
    60f2:	38 f4       	brcc	.+14     	; 0x6102 <vfprintf+0x5ea>
    60f4:	f4 fe       	sbrs	r15, 4
    60f6:	07 c0       	rjmp	.+14     	; 0x6106 <vfprintf+0x5ee>
    60f8:	f2 fc       	sbrc	r15, 2
    60fa:	05 c0       	rjmp	.+10     	; 0x6106 <vfprintf+0x5ee>
    60fc:	9f ee       	ldi	r25, 0xEF	; 239
    60fe:	f9 22       	and	r15, r25
    6100:	02 c0       	rjmp	.+4      	; 0x6106 <vfprintf+0x5ee>
    6102:	1e 2d       	mov	r17, r14
    6104:	01 c0       	rjmp	.+2      	; 0x6108 <vfprintf+0x5f0>
    6106:	19 2d       	mov	r17, r9
    6108:	f4 fe       	sbrs	r15, 4
    610a:	0d c0       	rjmp	.+26     	; 0x6126 <vfprintf+0x60e>
    610c:	fe 01       	movw	r30, r28
    610e:	ee 0d       	add	r30, r14
    6110:	f1 1d       	adc	r31, r1
    6112:	80 81       	ld	r24, Z
    6114:	80 33       	cpi	r24, 0x30	; 48
    6116:	19 f4       	brne	.+6      	; 0x611e <vfprintf+0x606>
    6118:	e9 ee       	ldi	r30, 0xE9	; 233
    611a:	fe 22       	and	r15, r30
    611c:	08 c0       	rjmp	.+16     	; 0x612e <vfprintf+0x616>
    611e:	1f 5f       	subi	r17, 0xFF	; 255
    6120:	f2 fe       	sbrs	r15, 2
    6122:	05 c0       	rjmp	.+10     	; 0x612e <vfprintf+0x616>
    6124:	03 c0       	rjmp	.+6      	; 0x612c <vfprintf+0x614>
    6126:	8f 2d       	mov	r24, r15
    6128:	86 78       	andi	r24, 0x86	; 134
    612a:	09 f0       	breq	.+2      	; 0x612e <vfprintf+0x616>
    612c:	1f 5f       	subi	r17, 0xFF	; 255
    612e:	0f 2d       	mov	r16, r15
    6130:	f3 fc       	sbrc	r15, 3
    6132:	13 c0       	rjmp	.+38     	; 0x615a <vfprintf+0x642>
    6134:	f0 fe       	sbrs	r15, 0
    6136:	0e c0       	rjmp	.+28     	; 0x6154 <vfprintf+0x63c>
    6138:	18 15       	cp	r17, r8
    613a:	10 f0       	brcs	.+4      	; 0x6140 <vfprintf+0x628>
    613c:	9e 2c       	mov	r9, r14
    613e:	0a c0       	rjmp	.+20     	; 0x6154 <vfprintf+0x63c>
    6140:	9e 2c       	mov	r9, r14
    6142:	98 0c       	add	r9, r8
    6144:	91 1a       	sub	r9, r17
    6146:	18 2d       	mov	r17, r8
    6148:	05 c0       	rjmp	.+10     	; 0x6154 <vfprintf+0x63c>
    614a:	80 e2       	ldi	r24, 0x20	; 32
    614c:	90 e0       	ldi	r25, 0x00	; 0
    614e:	b3 01       	movw	r22, r6
    6150:	36 d3       	rcall	.+1644   	; 0x67be <fputc>
    6152:	1f 5f       	subi	r17, 0xFF	; 255
    6154:	18 15       	cp	r17, r8
    6156:	c8 f3       	brcs	.-14     	; 0x614a <vfprintf+0x632>
    6158:	04 c0       	rjmp	.+8      	; 0x6162 <vfprintf+0x64a>
    615a:	18 15       	cp	r17, r8
    615c:	10 f4       	brcc	.+4      	; 0x6162 <vfprintf+0x64a>
    615e:	81 1a       	sub	r8, r17
    6160:	01 c0       	rjmp	.+2      	; 0x6164 <vfprintf+0x64c>
    6162:	88 24       	eor	r8, r8
    6164:	04 ff       	sbrs	r16, 4
    6166:	0e c0       	rjmp	.+28     	; 0x6184 <vfprintf+0x66c>
    6168:	80 e3       	ldi	r24, 0x30	; 48
    616a:	90 e0       	ldi	r25, 0x00	; 0
    616c:	b3 01       	movw	r22, r6
    616e:	27 d3       	rcall	.+1614   	; 0x67be <fputc>
    6170:	02 ff       	sbrs	r16, 2
    6172:	1b c0       	rjmp	.+54     	; 0x61aa <vfprintf+0x692>
    6174:	01 fd       	sbrc	r16, 1
    6176:	03 c0       	rjmp	.+6      	; 0x617e <vfprintf+0x666>
    6178:	88 e7       	ldi	r24, 0x78	; 120
    617a:	90 e0       	ldi	r25, 0x00	; 0
    617c:	0e c0       	rjmp	.+28     	; 0x619a <vfprintf+0x682>
    617e:	88 e5       	ldi	r24, 0x58	; 88
    6180:	90 e0       	ldi	r25, 0x00	; 0
    6182:	0b c0       	rjmp	.+22     	; 0x619a <vfprintf+0x682>
    6184:	80 2f       	mov	r24, r16
    6186:	86 78       	andi	r24, 0x86	; 134
    6188:	81 f0       	breq	.+32     	; 0x61aa <vfprintf+0x692>
    618a:	01 ff       	sbrs	r16, 1
    618c:	02 c0       	rjmp	.+4      	; 0x6192 <vfprintf+0x67a>
    618e:	8b e2       	ldi	r24, 0x2B	; 43
    6190:	01 c0       	rjmp	.+2      	; 0x6194 <vfprintf+0x67c>
    6192:	80 e2       	ldi	r24, 0x20	; 32
    6194:	f7 fc       	sbrc	r15, 7
    6196:	8d e2       	ldi	r24, 0x2D	; 45
    6198:	90 e0       	ldi	r25, 0x00	; 0
    619a:	b3 01       	movw	r22, r6
    619c:	10 d3       	rcall	.+1568   	; 0x67be <fputc>
    619e:	05 c0       	rjmp	.+10     	; 0x61aa <vfprintf+0x692>
    61a0:	80 e3       	ldi	r24, 0x30	; 48
    61a2:	90 e0       	ldi	r25, 0x00	; 0
    61a4:	b3 01       	movw	r22, r6
    61a6:	0b d3       	rcall	.+1558   	; 0x67be <fputc>
    61a8:	9a 94       	dec	r9
    61aa:	e9 14       	cp	r14, r9
    61ac:	c8 f3       	brcs	.-14     	; 0x61a0 <vfprintf+0x688>
    61ae:	ea 94       	dec	r14
    61b0:	e1 e0       	ldi	r30, 0x01	; 1
    61b2:	f0 e0       	ldi	r31, 0x00	; 0
    61b4:	ec 0f       	add	r30, r28
    61b6:	fd 1f       	adc	r31, r29
    61b8:	ee 0d       	add	r30, r14
    61ba:	f1 1d       	adc	r31, r1
    61bc:	80 81       	ld	r24, Z
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	b3 01       	movw	r22, r6
    61c2:	fd d2       	rcall	.+1530   	; 0x67be <fputc>
    61c4:	ee 20       	and	r14, r14
    61c6:	99 f7       	brne	.-26     	; 0x61ae <vfprintf+0x696>
    61c8:	05 c0       	rjmp	.+10     	; 0x61d4 <vfprintf+0x6bc>
    61ca:	80 e2       	ldi	r24, 0x20	; 32
    61cc:	90 e0       	ldi	r25, 0x00	; 0
    61ce:	b3 01       	movw	r22, r6
    61d0:	f6 d2       	rcall	.+1516   	; 0x67be <fputc>
    61d2:	8a 94       	dec	r8
    61d4:	88 20       	and	r8, r8
    61d6:	c9 f7       	brne	.-14     	; 0x61ca <vfprintf+0x6b2>
    61d8:	b6 cc       	rjmp	.-1684   	; 0x5b46 <vfprintf+0x2e>
    61da:	f3 01       	movw	r30, r6
    61dc:	66 81       	ldd	r22, Z+6	; 0x06
    61de:	77 81       	ldd	r23, Z+7	; 0x07
    61e0:	cb 01       	movw	r24, r22
    61e2:	61 96       	adiw	r28, 0x11	; 17
    61e4:	e2 e1       	ldi	r30, 0x12	; 18
    61e6:	70 c0       	rjmp	.+224    	; 0x62c8 <__epilogue_restores__>

000061e8 <__mulsi3>:
    61e8:	62 9f       	mul	r22, r18
    61ea:	d0 01       	movw	r26, r0
    61ec:	73 9f       	mul	r23, r19
    61ee:	f0 01       	movw	r30, r0
    61f0:	82 9f       	mul	r24, r18
    61f2:	e0 0d       	add	r30, r0
    61f4:	f1 1d       	adc	r31, r1
    61f6:	64 9f       	mul	r22, r20
    61f8:	e0 0d       	add	r30, r0
    61fa:	f1 1d       	adc	r31, r1
    61fc:	92 9f       	mul	r25, r18
    61fe:	f0 0d       	add	r31, r0
    6200:	83 9f       	mul	r24, r19
    6202:	f0 0d       	add	r31, r0
    6204:	74 9f       	mul	r23, r20
    6206:	f0 0d       	add	r31, r0
    6208:	65 9f       	mul	r22, r21
    620a:	f0 0d       	add	r31, r0
    620c:	99 27       	eor	r25, r25
    620e:	72 9f       	mul	r23, r18
    6210:	b0 0d       	add	r27, r0
    6212:	e1 1d       	adc	r30, r1
    6214:	f9 1f       	adc	r31, r25
    6216:	63 9f       	mul	r22, r19
    6218:	b0 0d       	add	r27, r0
    621a:	e1 1d       	adc	r30, r1
    621c:	f9 1f       	adc	r31, r25
    621e:	bd 01       	movw	r22, r26
    6220:	cf 01       	movw	r24, r30
    6222:	11 24       	eor	r1, r1
    6224:	08 95       	ret

00006226 <__divmodhi4>:
    6226:	97 fb       	bst	r25, 7
    6228:	09 2e       	mov	r0, r25
    622a:	07 26       	eor	r0, r23
    622c:	0a d0       	rcall	.+20     	; 0x6242 <__divmodhi4_neg1>
    622e:	77 fd       	sbrc	r23, 7
    6230:	04 d0       	rcall	.+8      	; 0x623a <__divmodhi4_neg2>
    6232:	65 d0       	rcall	.+202    	; 0x62fe <__udivmodhi4>
    6234:	06 d0       	rcall	.+12     	; 0x6242 <__divmodhi4_neg1>
    6236:	00 20       	and	r0, r0
    6238:	1a f4       	brpl	.+6      	; 0x6240 <__divmodhi4_exit>

0000623a <__divmodhi4_neg2>:
    623a:	70 95       	com	r23
    623c:	61 95       	neg	r22
    623e:	7f 4f       	sbci	r23, 0xFF	; 255

00006240 <__divmodhi4_exit>:
    6240:	08 95       	ret

00006242 <__divmodhi4_neg1>:
    6242:	f6 f7       	brtc	.-4      	; 0x6240 <__divmodhi4_exit>
    6244:	90 95       	com	r25
    6246:	81 95       	neg	r24
    6248:	9f 4f       	sbci	r25, 0xFF	; 255
    624a:	08 95       	ret

0000624c <__udivmodsi4>:
    624c:	a1 e2       	ldi	r26, 0x21	; 33
    624e:	1a 2e       	mov	r1, r26
    6250:	aa 1b       	sub	r26, r26
    6252:	bb 1b       	sub	r27, r27
    6254:	fd 01       	movw	r30, r26
    6256:	0d c0       	rjmp	.+26     	; 0x6272 <__udivmodsi4_ep>

00006258 <__udivmodsi4_loop>:
    6258:	aa 1f       	adc	r26, r26
    625a:	bb 1f       	adc	r27, r27
    625c:	ee 1f       	adc	r30, r30
    625e:	ff 1f       	adc	r31, r31
    6260:	a2 17       	cp	r26, r18
    6262:	b3 07       	cpc	r27, r19
    6264:	e4 07       	cpc	r30, r20
    6266:	f5 07       	cpc	r31, r21
    6268:	20 f0       	brcs	.+8      	; 0x6272 <__udivmodsi4_ep>
    626a:	a2 1b       	sub	r26, r18
    626c:	b3 0b       	sbc	r27, r19
    626e:	e4 0b       	sbc	r30, r20
    6270:	f5 0b       	sbc	r31, r21

00006272 <__udivmodsi4_ep>:
    6272:	66 1f       	adc	r22, r22
    6274:	77 1f       	adc	r23, r23
    6276:	88 1f       	adc	r24, r24
    6278:	99 1f       	adc	r25, r25
    627a:	1a 94       	dec	r1
    627c:	69 f7       	brne	.-38     	; 0x6258 <__udivmodsi4_loop>
    627e:	60 95       	com	r22
    6280:	70 95       	com	r23
    6282:	80 95       	com	r24
    6284:	90 95       	com	r25
    6286:	9b 01       	movw	r18, r22
    6288:	ac 01       	movw	r20, r24
    628a:	bd 01       	movw	r22, r26
    628c:	cf 01       	movw	r24, r30
    628e:	08 95       	ret

00006290 <__prologue_saves__>:
    6290:	2f 92       	push	r2
    6292:	3f 92       	push	r3
    6294:	4f 92       	push	r4
    6296:	5f 92       	push	r5
    6298:	6f 92       	push	r6
    629a:	7f 92       	push	r7
    629c:	8f 92       	push	r8
    629e:	9f 92       	push	r9
    62a0:	af 92       	push	r10
    62a2:	bf 92       	push	r11
    62a4:	cf 92       	push	r12
    62a6:	df 92       	push	r13
    62a8:	ef 92       	push	r14
    62aa:	ff 92       	push	r15
    62ac:	0f 93       	push	r16
    62ae:	1f 93       	push	r17
    62b0:	cf 93       	push	r28
    62b2:	df 93       	push	r29
    62b4:	cd b7       	in	r28, 0x3d	; 61
    62b6:	de b7       	in	r29, 0x3e	; 62
    62b8:	ca 1b       	sub	r28, r26
    62ba:	db 0b       	sbc	r29, r27
    62bc:	0f b6       	in	r0, 0x3f	; 63
    62be:	f8 94       	cli
    62c0:	de bf       	out	0x3e, r29	; 62
    62c2:	0f be       	out	0x3f, r0	; 63
    62c4:	cd bf       	out	0x3d, r28	; 61
    62c6:	09 94       	ijmp

000062c8 <__epilogue_restores__>:
    62c8:	2a 88       	ldd	r2, Y+18	; 0x12
    62ca:	39 88       	ldd	r3, Y+17	; 0x11
    62cc:	48 88       	ldd	r4, Y+16	; 0x10
    62ce:	5f 84       	ldd	r5, Y+15	; 0x0f
    62d0:	6e 84       	ldd	r6, Y+14	; 0x0e
    62d2:	7d 84       	ldd	r7, Y+13	; 0x0d
    62d4:	8c 84       	ldd	r8, Y+12	; 0x0c
    62d6:	9b 84       	ldd	r9, Y+11	; 0x0b
    62d8:	aa 84       	ldd	r10, Y+10	; 0x0a
    62da:	b9 84       	ldd	r11, Y+9	; 0x09
    62dc:	c8 84       	ldd	r12, Y+8	; 0x08
    62de:	df 80       	ldd	r13, Y+7	; 0x07
    62e0:	ee 80       	ldd	r14, Y+6	; 0x06
    62e2:	fd 80       	ldd	r15, Y+5	; 0x05
    62e4:	0c 81       	ldd	r16, Y+4	; 0x04
    62e6:	1b 81       	ldd	r17, Y+3	; 0x03
    62e8:	aa 81       	ldd	r26, Y+2	; 0x02
    62ea:	b9 81       	ldd	r27, Y+1	; 0x01
    62ec:	ce 0f       	add	r28, r30
    62ee:	d1 1d       	adc	r29, r1
    62f0:	0f b6       	in	r0, 0x3f	; 63
    62f2:	f8 94       	cli
    62f4:	de bf       	out	0x3e, r29	; 62
    62f6:	0f be       	out	0x3f, r0	; 63
    62f8:	cd bf       	out	0x3d, r28	; 61
    62fa:	ed 01       	movw	r28, r26
    62fc:	08 95       	ret

000062fe <__udivmodhi4>:
    62fe:	aa 1b       	sub	r26, r26
    6300:	bb 1b       	sub	r27, r27
    6302:	51 e1       	ldi	r21, 0x11	; 17
    6304:	07 c0       	rjmp	.+14     	; 0x6314 <__udivmodhi4_ep>

00006306 <__udivmodhi4_loop>:
    6306:	aa 1f       	adc	r26, r26
    6308:	bb 1f       	adc	r27, r27
    630a:	a6 17       	cp	r26, r22
    630c:	b7 07       	cpc	r27, r23
    630e:	10 f0       	brcs	.+4      	; 0x6314 <__udivmodhi4_ep>
    6310:	a6 1b       	sub	r26, r22
    6312:	b7 0b       	sbc	r27, r23

00006314 <__udivmodhi4_ep>:
    6314:	88 1f       	adc	r24, r24
    6316:	99 1f       	adc	r25, r25
    6318:	5a 95       	dec	r21
    631a:	a9 f7       	brne	.-22     	; 0x6306 <__udivmodhi4_loop>
    631c:	80 95       	com	r24
    631e:	90 95       	com	r25
    6320:	bc 01       	movw	r22, r24
    6322:	cd 01       	movw	r24, r26
    6324:	08 95       	ret

00006326 <malloc>:
    6326:	cf 93       	push	r28
    6328:	df 93       	push	r29
    632a:	bc 01       	movw	r22, r24
    632c:	82 30       	cpi	r24, 0x02	; 2
    632e:	91 05       	cpc	r25, r1
    6330:	10 f4       	brcc	.+4      	; 0x6336 <malloc+0x10>
    6332:	62 e0       	ldi	r22, 0x02	; 2
    6334:	70 e0       	ldi	r23, 0x00	; 0
    6336:	a0 91 14 07 	lds	r26, 0x0714
    633a:	b0 91 15 07 	lds	r27, 0x0715
    633e:	ed 01       	movw	r28, r26
    6340:	e0 e0       	ldi	r30, 0x00	; 0
    6342:	f0 e0       	ldi	r31, 0x00	; 0
    6344:	40 e0       	ldi	r20, 0x00	; 0
    6346:	50 e0       	ldi	r21, 0x00	; 0
    6348:	21 c0       	rjmp	.+66     	; 0x638c <malloc+0x66>
    634a:	88 81       	ld	r24, Y
    634c:	99 81       	ldd	r25, Y+1	; 0x01
    634e:	86 17       	cp	r24, r22
    6350:	97 07       	cpc	r25, r23
    6352:	69 f4       	brne	.+26     	; 0x636e <malloc+0x48>
    6354:	8a 81       	ldd	r24, Y+2	; 0x02
    6356:	9b 81       	ldd	r25, Y+3	; 0x03
    6358:	30 97       	sbiw	r30, 0x00	; 0
    635a:	19 f0       	breq	.+6      	; 0x6362 <malloc+0x3c>
    635c:	93 83       	std	Z+3, r25	; 0x03
    635e:	82 83       	std	Z+2, r24	; 0x02
    6360:	04 c0       	rjmp	.+8      	; 0x636a <malloc+0x44>
    6362:	90 93 15 07 	sts	0x0715, r25
    6366:	80 93 14 07 	sts	0x0714, r24
    636a:	fe 01       	movw	r30, r28
    636c:	34 c0       	rjmp	.+104    	; 0x63d6 <malloc+0xb0>
    636e:	68 17       	cp	r22, r24
    6370:	79 07       	cpc	r23, r25
    6372:	38 f4       	brcc	.+14     	; 0x6382 <malloc+0x5c>
    6374:	41 15       	cp	r20, r1
    6376:	51 05       	cpc	r21, r1
    6378:	19 f0       	breq	.+6      	; 0x6380 <malloc+0x5a>
    637a:	84 17       	cp	r24, r20
    637c:	95 07       	cpc	r25, r21
    637e:	08 f4       	brcc	.+2      	; 0x6382 <malloc+0x5c>
    6380:	ac 01       	movw	r20, r24
    6382:	fe 01       	movw	r30, r28
    6384:	8a 81       	ldd	r24, Y+2	; 0x02
    6386:	9b 81       	ldd	r25, Y+3	; 0x03
    6388:	9c 01       	movw	r18, r24
    638a:	e9 01       	movw	r28, r18
    638c:	20 97       	sbiw	r28, 0x00	; 0
    638e:	e9 f6       	brne	.-70     	; 0x634a <malloc+0x24>
    6390:	41 15       	cp	r20, r1
    6392:	51 05       	cpc	r21, r1
    6394:	a9 f1       	breq	.+106    	; 0x6400 <malloc+0xda>
    6396:	ca 01       	movw	r24, r20
    6398:	86 1b       	sub	r24, r22
    639a:	97 0b       	sbc	r25, r23
    639c:	04 97       	sbiw	r24, 0x04	; 4
    639e:	08 f4       	brcc	.+2      	; 0x63a2 <malloc+0x7c>
    63a0:	ba 01       	movw	r22, r20
    63a2:	e0 e0       	ldi	r30, 0x00	; 0
    63a4:	f0 e0       	ldi	r31, 0x00	; 0
    63a6:	2a c0       	rjmp	.+84     	; 0x63fc <malloc+0xd6>
    63a8:	8d 91       	ld	r24, X+
    63aa:	9c 91       	ld	r25, X
    63ac:	11 97       	sbiw	r26, 0x01	; 1
    63ae:	84 17       	cp	r24, r20
    63b0:	95 07       	cpc	r25, r21
    63b2:	f9 f4       	brne	.+62     	; 0x63f2 <malloc+0xcc>
    63b4:	64 17       	cp	r22, r20
    63b6:	75 07       	cpc	r23, r21
    63b8:	81 f4       	brne	.+32     	; 0x63da <malloc+0xb4>
    63ba:	12 96       	adiw	r26, 0x02	; 2
    63bc:	8d 91       	ld	r24, X+
    63be:	9c 91       	ld	r25, X
    63c0:	13 97       	sbiw	r26, 0x03	; 3
    63c2:	30 97       	sbiw	r30, 0x00	; 0
    63c4:	19 f0       	breq	.+6      	; 0x63cc <malloc+0xa6>
    63c6:	93 83       	std	Z+3, r25	; 0x03
    63c8:	82 83       	std	Z+2, r24	; 0x02
    63ca:	04 c0       	rjmp	.+8      	; 0x63d4 <malloc+0xae>
    63cc:	90 93 15 07 	sts	0x0715, r25
    63d0:	80 93 14 07 	sts	0x0714, r24
    63d4:	fd 01       	movw	r30, r26
    63d6:	32 96       	adiw	r30, 0x02	; 2
    63d8:	4f c0       	rjmp	.+158    	; 0x6478 <malloc+0x152>
    63da:	ca 01       	movw	r24, r20
    63dc:	86 1b       	sub	r24, r22
    63de:	97 0b       	sbc	r25, r23
    63e0:	fd 01       	movw	r30, r26
    63e2:	e8 0f       	add	r30, r24
    63e4:	f9 1f       	adc	r31, r25
    63e6:	61 93       	st	Z+, r22
    63e8:	71 93       	st	Z+, r23
    63ea:	02 97       	sbiw	r24, 0x02	; 2
    63ec:	8d 93       	st	X+, r24
    63ee:	9c 93       	st	X, r25
    63f0:	43 c0       	rjmp	.+134    	; 0x6478 <malloc+0x152>
    63f2:	fd 01       	movw	r30, r26
    63f4:	82 81       	ldd	r24, Z+2	; 0x02
    63f6:	93 81       	ldd	r25, Z+3	; 0x03
    63f8:	9c 01       	movw	r18, r24
    63fa:	d9 01       	movw	r26, r18
    63fc:	10 97       	sbiw	r26, 0x00	; 0
    63fe:	a1 f6       	brne	.-88     	; 0x63a8 <malloc+0x82>
    6400:	80 91 12 07 	lds	r24, 0x0712
    6404:	90 91 13 07 	lds	r25, 0x0713
    6408:	89 2b       	or	r24, r25
    640a:	41 f4       	brne	.+16     	; 0x641c <malloc+0xf6>
    640c:	80 91 df 03 	lds	r24, 0x03DF
    6410:	90 91 e0 03 	lds	r25, 0x03E0
    6414:	90 93 13 07 	sts	0x0713, r25
    6418:	80 93 12 07 	sts	0x0712, r24
    641c:	40 91 e1 03 	lds	r20, 0x03E1
    6420:	50 91 e2 03 	lds	r21, 0x03E2
    6424:	41 15       	cp	r20, r1
    6426:	51 05       	cpc	r21, r1
    6428:	41 f4       	brne	.+16     	; 0x643a <malloc+0x114>
    642a:	4d b7       	in	r20, 0x3d	; 61
    642c:	5e b7       	in	r21, 0x3e	; 62
    642e:	80 91 dd 03 	lds	r24, 0x03DD
    6432:	90 91 de 03 	lds	r25, 0x03DE
    6436:	48 1b       	sub	r20, r24
    6438:	59 0b       	sbc	r21, r25
    643a:	20 91 12 07 	lds	r18, 0x0712
    643e:	30 91 13 07 	lds	r19, 0x0713
    6442:	24 17       	cp	r18, r20
    6444:	35 07       	cpc	r19, r21
    6446:	b0 f4       	brcc	.+44     	; 0x6474 <malloc+0x14e>
    6448:	ca 01       	movw	r24, r20
    644a:	82 1b       	sub	r24, r18
    644c:	93 0b       	sbc	r25, r19
    644e:	86 17       	cp	r24, r22
    6450:	97 07       	cpc	r25, r23
    6452:	80 f0       	brcs	.+32     	; 0x6474 <malloc+0x14e>
    6454:	ab 01       	movw	r20, r22
    6456:	4e 5f       	subi	r20, 0xFE	; 254
    6458:	5f 4f       	sbci	r21, 0xFF	; 255
    645a:	84 17       	cp	r24, r20
    645c:	95 07       	cpc	r25, r21
    645e:	50 f0       	brcs	.+20     	; 0x6474 <malloc+0x14e>
    6460:	42 0f       	add	r20, r18
    6462:	53 1f       	adc	r21, r19
    6464:	50 93 13 07 	sts	0x0713, r21
    6468:	40 93 12 07 	sts	0x0712, r20
    646c:	f9 01       	movw	r30, r18
    646e:	61 93       	st	Z+, r22
    6470:	71 93       	st	Z+, r23
    6472:	02 c0       	rjmp	.+4      	; 0x6478 <malloc+0x152>
    6474:	e0 e0       	ldi	r30, 0x00	; 0
    6476:	f0 e0       	ldi	r31, 0x00	; 0
    6478:	cf 01       	movw	r24, r30
    647a:	df 91       	pop	r29
    647c:	cf 91       	pop	r28
    647e:	08 95       	ret

00006480 <free>:
    6480:	cf 93       	push	r28
    6482:	df 93       	push	r29
    6484:	00 97       	sbiw	r24, 0x00	; 0
    6486:	09 f4       	brne	.+2      	; 0x648a <free+0xa>
    6488:	50 c0       	rjmp	.+160    	; 0x652a <free+0xaa>
    648a:	ec 01       	movw	r28, r24
    648c:	22 97       	sbiw	r28, 0x02	; 2
    648e:	1b 82       	std	Y+3, r1	; 0x03
    6490:	1a 82       	std	Y+2, r1	; 0x02
    6492:	a0 91 14 07 	lds	r26, 0x0714
    6496:	b0 91 15 07 	lds	r27, 0x0715
    649a:	10 97       	sbiw	r26, 0x00	; 0
    649c:	09 f1       	breq	.+66     	; 0x64e0 <free+0x60>
    649e:	40 e0       	ldi	r20, 0x00	; 0
    64a0:	50 e0       	ldi	r21, 0x00	; 0
    64a2:	ac 17       	cp	r26, r28
    64a4:	bd 07       	cpc	r27, r29
    64a6:	08 f1       	brcs	.+66     	; 0x64ea <free+0x6a>
    64a8:	bb 83       	std	Y+3, r27	; 0x03
    64aa:	aa 83       	std	Y+2, r26	; 0x02
    64ac:	fe 01       	movw	r30, r28
    64ae:	21 91       	ld	r18, Z+
    64b0:	31 91       	ld	r19, Z+
    64b2:	e2 0f       	add	r30, r18
    64b4:	f3 1f       	adc	r31, r19
    64b6:	ae 17       	cp	r26, r30
    64b8:	bf 07       	cpc	r27, r31
    64ba:	79 f4       	brne	.+30     	; 0x64da <free+0x5a>
    64bc:	8d 91       	ld	r24, X+
    64be:	9c 91       	ld	r25, X
    64c0:	11 97       	sbiw	r26, 0x01	; 1
    64c2:	28 0f       	add	r18, r24
    64c4:	39 1f       	adc	r19, r25
    64c6:	2e 5f       	subi	r18, 0xFE	; 254
    64c8:	3f 4f       	sbci	r19, 0xFF	; 255
    64ca:	39 83       	std	Y+1, r19	; 0x01
    64cc:	28 83       	st	Y, r18
    64ce:	12 96       	adiw	r26, 0x02	; 2
    64d0:	8d 91       	ld	r24, X+
    64d2:	9c 91       	ld	r25, X
    64d4:	13 97       	sbiw	r26, 0x03	; 3
    64d6:	9b 83       	std	Y+3, r25	; 0x03
    64d8:	8a 83       	std	Y+2, r24	; 0x02
    64da:	41 15       	cp	r20, r1
    64dc:	51 05       	cpc	r21, r1
    64de:	71 f4       	brne	.+28     	; 0x64fc <free+0x7c>
    64e0:	d0 93 15 07 	sts	0x0715, r29
    64e4:	c0 93 14 07 	sts	0x0714, r28
    64e8:	20 c0       	rjmp	.+64     	; 0x652a <free+0xaa>
    64ea:	12 96       	adiw	r26, 0x02	; 2
    64ec:	8d 91       	ld	r24, X+
    64ee:	9c 91       	ld	r25, X
    64f0:	13 97       	sbiw	r26, 0x03	; 3
    64f2:	ad 01       	movw	r20, r26
    64f4:	00 97       	sbiw	r24, 0x00	; 0
    64f6:	11 f0       	breq	.+4      	; 0x64fc <free+0x7c>
    64f8:	dc 01       	movw	r26, r24
    64fa:	d3 cf       	rjmp	.-90     	; 0x64a2 <free+0x22>
    64fc:	fa 01       	movw	r30, r20
    64fe:	d3 83       	std	Z+3, r29	; 0x03
    6500:	c2 83       	std	Z+2, r28	; 0x02
    6502:	21 91       	ld	r18, Z+
    6504:	31 91       	ld	r19, Z+
    6506:	e2 0f       	add	r30, r18
    6508:	f3 1f       	adc	r31, r19
    650a:	ce 17       	cp	r28, r30
    650c:	df 07       	cpc	r29, r31
    650e:	69 f4       	brne	.+26     	; 0x652a <free+0xaa>
    6510:	88 81       	ld	r24, Y
    6512:	99 81       	ldd	r25, Y+1	; 0x01
    6514:	28 0f       	add	r18, r24
    6516:	39 1f       	adc	r19, r25
    6518:	2e 5f       	subi	r18, 0xFE	; 254
    651a:	3f 4f       	sbci	r19, 0xFF	; 255
    651c:	fa 01       	movw	r30, r20
    651e:	31 83       	std	Z+1, r19	; 0x01
    6520:	20 83       	st	Z, r18
    6522:	8a 81       	ldd	r24, Y+2	; 0x02
    6524:	9b 81       	ldd	r25, Y+3	; 0x03
    6526:	93 83       	std	Z+3, r25	; 0x03
    6528:	82 83       	std	Z+2, r24	; 0x02
    652a:	df 91       	pop	r29
    652c:	cf 91       	pop	r28
    652e:	08 95       	ret

00006530 <do_rand>:
    6530:	a0 e0       	ldi	r26, 0x00	; 0
    6532:	b0 e0       	ldi	r27, 0x00	; 0
    6534:	ed e9       	ldi	r30, 0x9D	; 157
    6536:	f2 e3       	ldi	r31, 0x32	; 50
    6538:	b3 ce       	rjmp	.-666    	; 0x62a0 <__prologue_saves__+0x10>
    653a:	ec 01       	movw	r28, r24
    653c:	a8 80       	ld	r10, Y
    653e:	b9 80       	ldd	r11, Y+1	; 0x01
    6540:	ca 80       	ldd	r12, Y+2	; 0x02
    6542:	db 80       	ldd	r13, Y+3	; 0x03
    6544:	a1 14       	cp	r10, r1
    6546:	b1 04       	cpc	r11, r1
    6548:	c1 04       	cpc	r12, r1
    654a:	d1 04       	cpc	r13, r1
    654c:	41 f4       	brne	.+16     	; 0x655e <do_rand+0x2e>
    654e:	84 e2       	ldi	r24, 0x24	; 36
    6550:	a8 2e       	mov	r10, r24
    6552:	89 ed       	ldi	r24, 0xD9	; 217
    6554:	b8 2e       	mov	r11, r24
    6556:	8b e5       	ldi	r24, 0x5B	; 91
    6558:	c8 2e       	mov	r12, r24
    655a:	87 e0       	ldi	r24, 0x07	; 7
    655c:	d8 2e       	mov	r13, r24
    655e:	c6 01       	movw	r24, r12
    6560:	b5 01       	movw	r22, r10
    6562:	2d e1       	ldi	r18, 0x1D	; 29
    6564:	33 ef       	ldi	r19, 0xF3	; 243
    6566:	41 e0       	ldi	r20, 0x01	; 1
    6568:	50 e0       	ldi	r21, 0x00	; 0
    656a:	fa d1       	rcall	.+1012   	; 0x6960 <__divmodsi4>
    656c:	27 ea       	ldi	r18, 0xA7	; 167
    656e:	31 e4       	ldi	r19, 0x41	; 65
    6570:	40 e0       	ldi	r20, 0x00	; 0
    6572:	50 e0       	ldi	r21, 0x00	; 0
    6574:	39 de       	rcall	.-910    	; 0x61e8 <__mulsi3>
    6576:	7b 01       	movw	r14, r22
    6578:	8c 01       	movw	r16, r24
    657a:	c6 01       	movw	r24, r12
    657c:	b5 01       	movw	r22, r10
    657e:	2d e1       	ldi	r18, 0x1D	; 29
    6580:	33 ef       	ldi	r19, 0xF3	; 243
    6582:	41 e0       	ldi	r20, 0x01	; 1
    6584:	50 e0       	ldi	r21, 0x00	; 0
    6586:	ec d1       	rcall	.+984    	; 0x6960 <__divmodsi4>
    6588:	ca 01       	movw	r24, r20
    658a:	b9 01       	movw	r22, r18
    658c:	2c ee       	ldi	r18, 0xEC	; 236
    658e:	34 ef       	ldi	r19, 0xF4	; 244
    6590:	4f ef       	ldi	r20, 0xFF	; 255
    6592:	5f ef       	ldi	r21, 0xFF	; 255
    6594:	29 de       	rcall	.-942    	; 0x61e8 <__mulsi3>
    6596:	6e 0d       	add	r22, r14
    6598:	7f 1d       	adc	r23, r15
    659a:	80 1f       	adc	r24, r16
    659c:	91 1f       	adc	r25, r17
    659e:	97 ff       	sbrs	r25, 7
    65a0:	04 c0       	rjmp	.+8      	; 0x65aa <do_rand+0x7a>
    65a2:	61 50       	subi	r22, 0x01	; 1
    65a4:	70 40       	sbci	r23, 0x00	; 0
    65a6:	80 40       	sbci	r24, 0x00	; 0
    65a8:	90 48       	sbci	r25, 0x80	; 128
    65aa:	68 83       	st	Y, r22
    65ac:	79 83       	std	Y+1, r23	; 0x01
    65ae:	8a 83       	std	Y+2, r24	; 0x02
    65b0:	9b 83       	std	Y+3, r25	; 0x03
    65b2:	9b 01       	movw	r18, r22
    65b4:	3f 77       	andi	r19, 0x7F	; 127
    65b6:	c9 01       	movw	r24, r18
    65b8:	cd b7       	in	r28, 0x3d	; 61
    65ba:	de b7       	in	r29, 0x3e	; 62
    65bc:	ea e0       	ldi	r30, 0x0A	; 10
    65be:	8c ce       	rjmp	.-744    	; 0x62d8 <__epilogue_restores__+0x10>

000065c0 <rand_r>:
    65c0:	b7 df       	rcall	.-146    	; 0x6530 <do_rand>
    65c2:	08 95       	ret

000065c4 <rand>:
    65c4:	83 ee       	ldi	r24, 0xE3	; 227
    65c6:	93 e0       	ldi	r25, 0x03	; 3
    65c8:	b3 df       	rcall	.-154    	; 0x6530 <do_rand>
    65ca:	08 95       	ret

000065cc <srand>:
    65cc:	a0 e0       	ldi	r26, 0x00	; 0
    65ce:	b0 e0       	ldi	r27, 0x00	; 0
    65d0:	80 93 e3 03 	sts	0x03E3, r24
    65d4:	90 93 e4 03 	sts	0x03E4, r25
    65d8:	a0 93 e5 03 	sts	0x03E5, r26
    65dc:	b0 93 e6 03 	sts	0x03E6, r27
    65e0:	08 95       	ret

000065e2 <__ftoa_engine>:
    65e2:	28 30       	cpi	r18, 0x08	; 8
    65e4:	08 f0       	brcs	.+2      	; 0x65e8 <__ftoa_engine+0x6>
    65e6:	27 e0       	ldi	r18, 0x07	; 7
    65e8:	33 27       	eor	r19, r19
    65ea:	da 01       	movw	r26, r20
    65ec:	99 0f       	add	r25, r25
    65ee:	31 1d       	adc	r19, r1
    65f0:	87 fd       	sbrc	r24, 7
    65f2:	91 60       	ori	r25, 0x01	; 1
    65f4:	00 96       	adiw	r24, 0x00	; 0
    65f6:	61 05       	cpc	r22, r1
    65f8:	71 05       	cpc	r23, r1
    65fa:	39 f4       	brne	.+14     	; 0x660a <__ftoa_engine+0x28>
    65fc:	32 60       	ori	r19, 0x02	; 2
    65fe:	2e 5f       	subi	r18, 0xFE	; 254
    6600:	3d 93       	st	X+, r19
    6602:	30 e3       	ldi	r19, 0x30	; 48
    6604:	2a 95       	dec	r18
    6606:	e1 f7       	brne	.-8      	; 0x6600 <__ftoa_engine+0x1e>
    6608:	08 95       	ret
    660a:	9f 3f       	cpi	r25, 0xFF	; 255
    660c:	30 f0       	brcs	.+12     	; 0x661a <__ftoa_engine+0x38>
    660e:	80 38       	cpi	r24, 0x80	; 128
    6610:	71 05       	cpc	r23, r1
    6612:	61 05       	cpc	r22, r1
    6614:	09 f0       	breq	.+2      	; 0x6618 <__ftoa_engine+0x36>
    6616:	3c 5f       	subi	r19, 0xFC	; 252
    6618:	3c 5f       	subi	r19, 0xFC	; 252
    661a:	3d 93       	st	X+, r19
    661c:	91 30       	cpi	r25, 0x01	; 1
    661e:	08 f0       	brcs	.+2      	; 0x6622 <__ftoa_engine+0x40>
    6620:	80 68       	ori	r24, 0x80	; 128
    6622:	91 1d       	adc	r25, r1
    6624:	df 93       	push	r29
    6626:	cf 93       	push	r28
    6628:	1f 93       	push	r17
    662a:	0f 93       	push	r16
    662c:	ff 92       	push	r15
    662e:	ef 92       	push	r14
    6630:	19 2f       	mov	r17, r25
    6632:	98 7f       	andi	r25, 0xF8	; 248
    6634:	96 95       	lsr	r25
    6636:	e9 2f       	mov	r30, r25
    6638:	96 95       	lsr	r25
    663a:	96 95       	lsr	r25
    663c:	e9 0f       	add	r30, r25
    663e:	ff 27       	eor	r31, r31
    6640:	ef 53       	subi	r30, 0x3F	; 63
    6642:	fa 4f       	sbci	r31, 0xFA	; 250
    6644:	99 27       	eor	r25, r25
    6646:	33 27       	eor	r19, r19
    6648:	ee 24       	eor	r14, r14
    664a:	ff 24       	eor	r15, r15
    664c:	a7 01       	movw	r20, r14
    664e:	e7 01       	movw	r28, r14
    6650:	05 90       	lpm	r0, Z+
    6652:	08 94       	sec
    6654:	07 94       	ror	r0
    6656:	28 f4       	brcc	.+10     	; 0x6662 <__ftoa_engine+0x80>
    6658:	36 0f       	add	r19, r22
    665a:	e7 1e       	adc	r14, r23
    665c:	f8 1e       	adc	r15, r24
    665e:	49 1f       	adc	r20, r25
    6660:	51 1d       	adc	r21, r1
    6662:	66 0f       	add	r22, r22
    6664:	77 1f       	adc	r23, r23
    6666:	88 1f       	adc	r24, r24
    6668:	99 1f       	adc	r25, r25
    666a:	06 94       	lsr	r0
    666c:	a1 f7       	brne	.-24     	; 0x6656 <__ftoa_engine+0x74>
    666e:	05 90       	lpm	r0, Z+
    6670:	07 94       	ror	r0
    6672:	28 f4       	brcc	.+10     	; 0x667e <__ftoa_engine+0x9c>
    6674:	e7 0e       	add	r14, r23
    6676:	f8 1e       	adc	r15, r24
    6678:	49 1f       	adc	r20, r25
    667a:	56 1f       	adc	r21, r22
    667c:	c1 1d       	adc	r28, r1
    667e:	77 0f       	add	r23, r23
    6680:	88 1f       	adc	r24, r24
    6682:	99 1f       	adc	r25, r25
    6684:	66 1f       	adc	r22, r22
    6686:	06 94       	lsr	r0
    6688:	a1 f7       	brne	.-24     	; 0x6672 <__ftoa_engine+0x90>
    668a:	05 90       	lpm	r0, Z+
    668c:	07 94       	ror	r0
    668e:	28 f4       	brcc	.+10     	; 0x669a <__ftoa_engine+0xb8>
    6690:	f8 0e       	add	r15, r24
    6692:	49 1f       	adc	r20, r25
    6694:	56 1f       	adc	r21, r22
    6696:	c7 1f       	adc	r28, r23
    6698:	d1 1d       	adc	r29, r1
    669a:	88 0f       	add	r24, r24
    669c:	99 1f       	adc	r25, r25
    669e:	66 1f       	adc	r22, r22
    66a0:	77 1f       	adc	r23, r23
    66a2:	06 94       	lsr	r0
    66a4:	a1 f7       	brne	.-24     	; 0x668e <__ftoa_engine+0xac>
    66a6:	05 90       	lpm	r0, Z+
    66a8:	07 94       	ror	r0
    66aa:	20 f4       	brcc	.+8      	; 0x66b4 <__ftoa_engine+0xd2>
    66ac:	49 0f       	add	r20, r25
    66ae:	56 1f       	adc	r21, r22
    66b0:	c7 1f       	adc	r28, r23
    66b2:	d8 1f       	adc	r29, r24
    66b4:	99 0f       	add	r25, r25
    66b6:	66 1f       	adc	r22, r22
    66b8:	77 1f       	adc	r23, r23
    66ba:	88 1f       	adc	r24, r24
    66bc:	06 94       	lsr	r0
    66be:	a9 f7       	brne	.-22     	; 0x66aa <__ftoa_engine+0xc8>
    66c0:	84 91       	lpm	r24, Z+
    66c2:	10 95       	com	r17
    66c4:	17 70       	andi	r17, 0x07	; 7
    66c6:	41 f0       	breq	.+16     	; 0x66d8 <__ftoa_engine+0xf6>
    66c8:	d6 95       	lsr	r29
    66ca:	c7 95       	ror	r28
    66cc:	57 95       	ror	r21
    66ce:	47 95       	ror	r20
    66d0:	f7 94       	ror	r15
    66d2:	e7 94       	ror	r14
    66d4:	1a 95       	dec	r17
    66d6:	c1 f7       	brne	.-16     	; 0x66c8 <__ftoa_engine+0xe6>
    66d8:	e7 e6       	ldi	r30, 0x67	; 103
    66da:	f5 e0       	ldi	r31, 0x05	; 5
    66dc:	68 94       	set
    66de:	15 90       	lpm	r1, Z+
    66e0:	15 91       	lpm	r17, Z+
    66e2:	35 91       	lpm	r19, Z+
    66e4:	65 91       	lpm	r22, Z+
    66e6:	95 91       	lpm	r25, Z+
    66e8:	05 90       	lpm	r0, Z+
    66ea:	7f e2       	ldi	r23, 0x2F	; 47
    66ec:	73 95       	inc	r23
    66ee:	e1 18       	sub	r14, r1
    66f0:	f1 0a       	sbc	r15, r17
    66f2:	43 0b       	sbc	r20, r19
    66f4:	56 0b       	sbc	r21, r22
    66f6:	c9 0b       	sbc	r28, r25
    66f8:	d0 09       	sbc	r29, r0
    66fa:	c0 f7       	brcc	.-16     	; 0x66ec <__ftoa_engine+0x10a>
    66fc:	e1 0c       	add	r14, r1
    66fe:	f1 1e       	adc	r15, r17
    6700:	43 1f       	adc	r20, r19
    6702:	56 1f       	adc	r21, r22
    6704:	c9 1f       	adc	r28, r25
    6706:	d0 1d       	adc	r29, r0
    6708:	7e f4       	brtc	.+30     	; 0x6728 <__ftoa_engine+0x146>
    670a:	70 33       	cpi	r23, 0x30	; 48
    670c:	11 f4       	brne	.+4      	; 0x6712 <__ftoa_engine+0x130>
    670e:	8a 95       	dec	r24
    6710:	e6 cf       	rjmp	.-52     	; 0x66de <__ftoa_engine+0xfc>
    6712:	e8 94       	clt
    6714:	01 50       	subi	r16, 0x01	; 1
    6716:	30 f0       	brcs	.+12     	; 0x6724 <__ftoa_engine+0x142>
    6718:	08 0f       	add	r16, r24
    671a:	0a f4       	brpl	.+2      	; 0x671e <__ftoa_engine+0x13c>
    671c:	00 27       	eor	r16, r16
    671e:	02 17       	cp	r16, r18
    6720:	08 f4       	brcc	.+2      	; 0x6724 <__ftoa_engine+0x142>
    6722:	20 2f       	mov	r18, r16
    6724:	23 95       	inc	r18
    6726:	02 2f       	mov	r16, r18
    6728:	7a 33       	cpi	r23, 0x3A	; 58
    672a:	28 f0       	brcs	.+10     	; 0x6736 <__ftoa_engine+0x154>
    672c:	79 e3       	ldi	r23, 0x39	; 57
    672e:	7d 93       	st	X+, r23
    6730:	2a 95       	dec	r18
    6732:	e9 f7       	brne	.-6      	; 0x672e <__ftoa_engine+0x14c>
    6734:	10 c0       	rjmp	.+32     	; 0x6756 <__ftoa_engine+0x174>
    6736:	7d 93       	st	X+, r23
    6738:	2a 95       	dec	r18
    673a:	89 f6       	brne	.-94     	; 0x66de <__ftoa_engine+0xfc>
    673c:	06 94       	lsr	r0
    673e:	97 95       	ror	r25
    6740:	67 95       	ror	r22
    6742:	37 95       	ror	r19
    6744:	17 95       	ror	r17
    6746:	17 94       	ror	r1
    6748:	e1 18       	sub	r14, r1
    674a:	f1 0a       	sbc	r15, r17
    674c:	43 0b       	sbc	r20, r19
    674e:	56 0b       	sbc	r21, r22
    6750:	c9 0b       	sbc	r28, r25
    6752:	d0 09       	sbc	r29, r0
    6754:	98 f0       	brcs	.+38     	; 0x677c <__ftoa_engine+0x19a>
    6756:	23 95       	inc	r18
    6758:	7e 91       	ld	r23, -X
    675a:	73 95       	inc	r23
    675c:	7a 33       	cpi	r23, 0x3A	; 58
    675e:	08 f0       	brcs	.+2      	; 0x6762 <__ftoa_engine+0x180>
    6760:	70 e3       	ldi	r23, 0x30	; 48
    6762:	7c 93       	st	X, r23
    6764:	20 13       	cpse	r18, r16
    6766:	b8 f7       	brcc	.-18     	; 0x6756 <__ftoa_engine+0x174>
    6768:	7e 91       	ld	r23, -X
    676a:	70 61       	ori	r23, 0x10	; 16
    676c:	7d 93       	st	X+, r23
    676e:	30 f0       	brcs	.+12     	; 0x677c <__ftoa_engine+0x19a>
    6770:	83 95       	inc	r24
    6772:	71 e3       	ldi	r23, 0x31	; 49
    6774:	7d 93       	st	X+, r23
    6776:	70 e3       	ldi	r23, 0x30	; 48
    6778:	2a 95       	dec	r18
    677a:	e1 f7       	brne	.-8      	; 0x6774 <__ftoa_engine+0x192>
    677c:	11 24       	eor	r1, r1
    677e:	ef 90       	pop	r14
    6780:	ff 90       	pop	r15
    6782:	0f 91       	pop	r16
    6784:	1f 91       	pop	r17
    6786:	cf 91       	pop	r28
    6788:	df 91       	pop	r29
    678a:	99 27       	eor	r25, r25
    678c:	87 fd       	sbrc	r24, 7
    678e:	90 95       	com	r25
    6790:	08 95       	ret

00006792 <strnlen_P>:
    6792:	fc 01       	movw	r30, r24
    6794:	05 90       	lpm	r0, Z+
    6796:	61 50       	subi	r22, 0x01	; 1
    6798:	70 40       	sbci	r23, 0x00	; 0
    679a:	01 10       	cpse	r0, r1
    679c:	d8 f7       	brcc	.-10     	; 0x6794 <strnlen_P+0x2>
    679e:	80 95       	com	r24
    67a0:	90 95       	com	r25
    67a2:	8e 0f       	add	r24, r30
    67a4:	9f 1f       	adc	r25, r31
    67a6:	08 95       	ret

000067a8 <strnlen>:
    67a8:	fc 01       	movw	r30, r24
    67aa:	61 50       	subi	r22, 0x01	; 1
    67ac:	70 40       	sbci	r23, 0x00	; 0
    67ae:	01 90       	ld	r0, Z+
    67b0:	01 10       	cpse	r0, r1
    67b2:	d8 f7       	brcc	.-10     	; 0x67aa <strnlen+0x2>
    67b4:	80 95       	com	r24
    67b6:	90 95       	com	r25
    67b8:	8e 0f       	add	r24, r30
    67ba:	9f 1f       	adc	r25, r31
    67bc:	08 95       	ret

000067be <fputc>:
    67be:	0f 93       	push	r16
    67c0:	1f 93       	push	r17
    67c2:	cf 93       	push	r28
    67c4:	df 93       	push	r29
    67c6:	8c 01       	movw	r16, r24
    67c8:	eb 01       	movw	r28, r22
    67ca:	8b 81       	ldd	r24, Y+3	; 0x03
    67cc:	81 ff       	sbrs	r24, 1
    67ce:	1b c0       	rjmp	.+54     	; 0x6806 <fputc+0x48>
    67d0:	82 ff       	sbrs	r24, 2
    67d2:	0d c0       	rjmp	.+26     	; 0x67ee <fputc+0x30>
    67d4:	2e 81       	ldd	r18, Y+6	; 0x06
    67d6:	3f 81       	ldd	r19, Y+7	; 0x07
    67d8:	8c 81       	ldd	r24, Y+4	; 0x04
    67da:	9d 81       	ldd	r25, Y+5	; 0x05
    67dc:	28 17       	cp	r18, r24
    67de:	39 07       	cpc	r19, r25
    67e0:	64 f4       	brge	.+24     	; 0x67fa <fputc+0x3c>
    67e2:	e8 81       	ld	r30, Y
    67e4:	f9 81       	ldd	r31, Y+1	; 0x01
    67e6:	01 93       	st	Z+, r16
    67e8:	f9 83       	std	Y+1, r31	; 0x01
    67ea:	e8 83       	st	Y, r30
    67ec:	06 c0       	rjmp	.+12     	; 0x67fa <fputc+0x3c>
    67ee:	e8 85       	ldd	r30, Y+8	; 0x08
    67f0:	f9 85       	ldd	r31, Y+9	; 0x09
    67f2:	80 2f       	mov	r24, r16
    67f4:	09 95       	icall
    67f6:	89 2b       	or	r24, r25
    67f8:	31 f4       	brne	.+12     	; 0x6806 <fputc+0x48>
    67fa:	8e 81       	ldd	r24, Y+6	; 0x06
    67fc:	9f 81       	ldd	r25, Y+7	; 0x07
    67fe:	01 96       	adiw	r24, 0x01	; 1
    6800:	9f 83       	std	Y+7, r25	; 0x07
    6802:	8e 83       	std	Y+6, r24	; 0x06
    6804:	02 c0       	rjmp	.+4      	; 0x680a <fputc+0x4c>
    6806:	0f ef       	ldi	r16, 0xFF	; 255
    6808:	1f ef       	ldi	r17, 0xFF	; 255
    680a:	c8 01       	movw	r24, r16
    680c:	df 91       	pop	r29
    680e:	cf 91       	pop	r28
    6810:	1f 91       	pop	r17
    6812:	0f 91       	pop	r16
    6814:	08 95       	ret

00006816 <printf>:
    6816:	a0 e0       	ldi	r26, 0x00	; 0
    6818:	b0 e0       	ldi	r27, 0x00	; 0
    681a:	e0 e1       	ldi	r30, 0x10	; 16
    681c:	f4 e3       	ldi	r31, 0x34	; 52
    681e:	48 cd       	rjmp	.-1392   	; 0x62b0 <__prologue_saves__+0x20>
    6820:	fe 01       	movw	r30, r28
    6822:	35 96       	adiw	r30, 0x05	; 5
    6824:	61 91       	ld	r22, Z+
    6826:	71 91       	ld	r23, Z+
    6828:	80 91 18 07 	lds	r24, 0x0718
    682c:	90 91 19 07 	lds	r25, 0x0719
    6830:	af 01       	movw	r20, r30
    6832:	72 d9       	rcall	.-3356   	; 0x5b18 <vfprintf>
    6834:	20 96       	adiw	r28, 0x00	; 0
    6836:	e2 e0       	ldi	r30, 0x02	; 2
    6838:	57 cd       	rjmp	.-1362   	; 0x62e8 <__epilogue_restores__+0x20>

0000683a <puts>:
    683a:	0f 93       	push	r16
    683c:	1f 93       	push	r17
    683e:	cf 93       	push	r28
    6840:	df 93       	push	r29
    6842:	8c 01       	movw	r16, r24
    6844:	e0 91 18 07 	lds	r30, 0x0718
    6848:	f0 91 19 07 	lds	r31, 0x0719
    684c:	83 81       	ldd	r24, Z+3	; 0x03
    684e:	81 ff       	sbrs	r24, 1
    6850:	21 c0       	rjmp	.+66     	; 0x6894 <puts+0x5a>
    6852:	c0 e0       	ldi	r28, 0x00	; 0
    6854:	d0 e0       	ldi	r29, 0x00	; 0
    6856:	0d c0       	rjmp	.+26     	; 0x6872 <puts+0x38>
    6858:	e0 91 18 07 	lds	r30, 0x0718
    685c:	f0 91 19 07 	lds	r31, 0x0719
    6860:	20 85       	ldd	r18, Z+8	; 0x08
    6862:	31 85       	ldd	r19, Z+9	; 0x09
    6864:	bf 01       	movw	r22, r30
    6866:	f9 01       	movw	r30, r18
    6868:	09 95       	icall
    686a:	89 2b       	or	r24, r25
    686c:	11 f0       	breq	.+4      	; 0x6872 <puts+0x38>
    686e:	cf ef       	ldi	r28, 0xFF	; 255
    6870:	df ef       	ldi	r29, 0xFF	; 255
    6872:	f8 01       	movw	r30, r16
    6874:	81 91       	ld	r24, Z+
    6876:	8f 01       	movw	r16, r30
    6878:	88 23       	and	r24, r24
    687a:	71 f7       	brne	.-36     	; 0x6858 <puts+0x1e>
    687c:	e0 91 18 07 	lds	r30, 0x0718
    6880:	f0 91 19 07 	lds	r31, 0x0719
    6884:	20 85       	ldd	r18, Z+8	; 0x08
    6886:	31 85       	ldd	r19, Z+9	; 0x09
    6888:	8a e0       	ldi	r24, 0x0A	; 10
    688a:	bf 01       	movw	r22, r30
    688c:	f9 01       	movw	r30, r18
    688e:	09 95       	icall
    6890:	89 2b       	or	r24, r25
    6892:	11 f0       	breq	.+4      	; 0x6898 <puts+0x5e>
    6894:	cf ef       	ldi	r28, 0xFF	; 255
    6896:	df ef       	ldi	r29, 0xFF	; 255
    6898:	ce 01       	movw	r24, r28
    689a:	df 91       	pop	r29
    689c:	cf 91       	pop	r28
    689e:	1f 91       	pop	r17
    68a0:	0f 91       	pop	r16
    68a2:	08 95       	ret

000068a4 <__ultoa_invert>:
    68a4:	fa 01       	movw	r30, r20
    68a6:	aa 27       	eor	r26, r26
    68a8:	28 30       	cpi	r18, 0x08	; 8
    68aa:	51 f1       	breq	.+84     	; 0x6900 <__ultoa_invert+0x5c>
    68ac:	20 31       	cpi	r18, 0x10	; 16
    68ae:	81 f1       	breq	.+96     	; 0x6910 <__ultoa_invert+0x6c>
    68b0:	e8 94       	clt
    68b2:	6f 93       	push	r22
    68b4:	6e 7f       	andi	r22, 0xFE	; 254
    68b6:	6e 5f       	subi	r22, 0xFE	; 254
    68b8:	7f 4f       	sbci	r23, 0xFF	; 255
    68ba:	8f 4f       	sbci	r24, 0xFF	; 255
    68bc:	9f 4f       	sbci	r25, 0xFF	; 255
    68be:	af 4f       	sbci	r26, 0xFF	; 255
    68c0:	b1 e0       	ldi	r27, 0x01	; 1
    68c2:	3e d0       	rcall	.+124    	; 0x6940 <__ultoa_invert+0x9c>
    68c4:	b4 e0       	ldi	r27, 0x04	; 4
    68c6:	3c d0       	rcall	.+120    	; 0x6940 <__ultoa_invert+0x9c>
    68c8:	67 0f       	add	r22, r23
    68ca:	78 1f       	adc	r23, r24
    68cc:	89 1f       	adc	r24, r25
    68ce:	9a 1f       	adc	r25, r26
    68d0:	a1 1d       	adc	r26, r1
    68d2:	68 0f       	add	r22, r24
    68d4:	79 1f       	adc	r23, r25
    68d6:	8a 1f       	adc	r24, r26
    68d8:	91 1d       	adc	r25, r1
    68da:	a1 1d       	adc	r26, r1
    68dc:	6a 0f       	add	r22, r26
    68de:	71 1d       	adc	r23, r1
    68e0:	81 1d       	adc	r24, r1
    68e2:	91 1d       	adc	r25, r1
    68e4:	a1 1d       	adc	r26, r1
    68e6:	20 d0       	rcall	.+64     	; 0x6928 <__ultoa_invert+0x84>
    68e8:	09 f4       	brne	.+2      	; 0x68ec <__ultoa_invert+0x48>
    68ea:	68 94       	set
    68ec:	3f 91       	pop	r19
    68ee:	2a e0       	ldi	r18, 0x0A	; 10
    68f0:	26 9f       	mul	r18, r22
    68f2:	11 24       	eor	r1, r1
    68f4:	30 19       	sub	r19, r0
    68f6:	30 5d       	subi	r19, 0xD0	; 208
    68f8:	31 93       	st	Z+, r19
    68fa:	de f6       	brtc	.-74     	; 0x68b2 <__ultoa_invert+0xe>
    68fc:	cf 01       	movw	r24, r30
    68fe:	08 95       	ret
    6900:	46 2f       	mov	r20, r22
    6902:	47 70       	andi	r20, 0x07	; 7
    6904:	40 5d       	subi	r20, 0xD0	; 208
    6906:	41 93       	st	Z+, r20
    6908:	b3 e0       	ldi	r27, 0x03	; 3
    690a:	0f d0       	rcall	.+30     	; 0x692a <__ultoa_invert+0x86>
    690c:	c9 f7       	brne	.-14     	; 0x6900 <__ultoa_invert+0x5c>
    690e:	f6 cf       	rjmp	.-20     	; 0x68fc <__ultoa_invert+0x58>
    6910:	46 2f       	mov	r20, r22
    6912:	4f 70       	andi	r20, 0x0F	; 15
    6914:	40 5d       	subi	r20, 0xD0	; 208
    6916:	4a 33       	cpi	r20, 0x3A	; 58
    6918:	18 f0       	brcs	.+6      	; 0x6920 <__ultoa_invert+0x7c>
    691a:	49 5d       	subi	r20, 0xD9	; 217
    691c:	31 fd       	sbrc	r19, 1
    691e:	40 52       	subi	r20, 0x20	; 32
    6920:	41 93       	st	Z+, r20
    6922:	02 d0       	rcall	.+4      	; 0x6928 <__ultoa_invert+0x84>
    6924:	a9 f7       	brne	.-22     	; 0x6910 <__ultoa_invert+0x6c>
    6926:	ea cf       	rjmp	.-44     	; 0x68fc <__ultoa_invert+0x58>
    6928:	b4 e0       	ldi	r27, 0x04	; 4
    692a:	a6 95       	lsr	r26
    692c:	97 95       	ror	r25
    692e:	87 95       	ror	r24
    6930:	77 95       	ror	r23
    6932:	67 95       	ror	r22
    6934:	ba 95       	dec	r27
    6936:	c9 f7       	brne	.-14     	; 0x692a <__ultoa_invert+0x86>
    6938:	00 97       	sbiw	r24, 0x00	; 0
    693a:	61 05       	cpc	r22, r1
    693c:	71 05       	cpc	r23, r1
    693e:	08 95       	ret
    6940:	9b 01       	movw	r18, r22
    6942:	ac 01       	movw	r20, r24
    6944:	0a 2e       	mov	r0, r26
    6946:	06 94       	lsr	r0
    6948:	57 95       	ror	r21
    694a:	47 95       	ror	r20
    694c:	37 95       	ror	r19
    694e:	27 95       	ror	r18
    6950:	ba 95       	dec	r27
    6952:	c9 f7       	brne	.-14     	; 0x6946 <__ultoa_invert+0xa2>
    6954:	62 0f       	add	r22, r18
    6956:	73 1f       	adc	r23, r19
    6958:	84 1f       	adc	r24, r20
    695a:	95 1f       	adc	r25, r21
    695c:	a0 1d       	adc	r26, r0
    695e:	08 95       	ret

00006960 <__divmodsi4>:
    6960:	97 fb       	bst	r25, 7
    6962:	09 2e       	mov	r0, r25
    6964:	05 26       	eor	r0, r21
    6966:	0e d0       	rcall	.+28     	; 0x6984 <__divmodsi4_neg1>
    6968:	57 fd       	sbrc	r21, 7
    696a:	04 d0       	rcall	.+8      	; 0x6974 <__divmodsi4_neg2>
    696c:	6f dc       	rcall	.-1826   	; 0x624c <__udivmodsi4>
    696e:	0a d0       	rcall	.+20     	; 0x6984 <__divmodsi4_neg1>
    6970:	00 1c       	adc	r0, r0
    6972:	38 f4       	brcc	.+14     	; 0x6982 <__divmodsi4_exit>

00006974 <__divmodsi4_neg2>:
    6974:	50 95       	com	r21
    6976:	40 95       	com	r20
    6978:	30 95       	com	r19
    697a:	21 95       	neg	r18
    697c:	3f 4f       	sbci	r19, 0xFF	; 255
    697e:	4f 4f       	sbci	r20, 0xFF	; 255
    6980:	5f 4f       	sbci	r21, 0xFF	; 255

00006982 <__divmodsi4_exit>:
    6982:	08 95       	ret

00006984 <__divmodsi4_neg1>:
    6984:	f6 f7       	brtc	.-4      	; 0x6982 <__divmodsi4_exit>
    6986:	90 95       	com	r25
    6988:	80 95       	com	r24
    698a:	70 95       	com	r23
    698c:	61 95       	neg	r22
    698e:	7f 4f       	sbci	r23, 0xFF	; 255
    6990:	8f 4f       	sbci	r24, 0xFF	; 255
    6992:	9f 4f       	sbci	r25, 0xFF	; 255
    6994:	08 95       	ret

00006996 <_exit>:
    6996:	f8 94       	cli

00006998 <__stop_program>:
    6998:	ff cf       	rjmp	.-2      	; 0x6998 <__stop_program>
