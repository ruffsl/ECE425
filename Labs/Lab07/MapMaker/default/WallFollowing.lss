
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ee  00800100  00006a88  00006b1c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000033b  008003ee  008003ee  00006e0a  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00006e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000607  00000000  00000000  00006e6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000181d  00000000  00000000  00007471  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000044c  00000000  00000000  00008c8e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000014ff  00000000  00000000  000090da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  0000a5dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d01  00000000  00000000  0000a89c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f79  00000000  00000000  0000b59d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 39 21 	jmp	0x4272	; 0x4272 <__vector_4>
      14:	0c 94 62 21 	jmp	0x42c4	; 0x42c4 <__vector_5>
      18:	0c 94 8b 21 	jmp	0x4316	; 0x4316 <__vector_6>
      1c:	0c 94 b4 21 	jmp	0x4368	; 0x4368 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 1a 20 	jmp	0x4034	; 0x4034 <__vector_9>
      28:	0c 94 43 20 	jmp	0x4086	; 0x4086 <__vector_10>
      2c:	0c 94 6c 20 	jmp	0x40d8	; 0x40d8 <__vector_11>
      30:	0c 94 e7 20 	jmp	0x41ce	; 0x41ce <__vector_12>
      34:	0c 94 95 20 	jmp	0x412a	; 0x412a <__vector_13>
      38:	0c 94 be 20 	jmp	0x417c	; 0x417c <__vector_14>
      3c:	0c 94 10 21 	jmp	0x4220	; 0x4220 <__vector_15>
      40:	0c 94 9f 1f 	jmp	0x3f3e	; 0x3f3e <__vector_16>
      44:	0c 94 c8 1f 	jmp	0x3f90	; 0x3f90 <__vector_17>
      48:	0c 94 f1 1f 	jmp	0x3fe2	; 0x3fe2 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	04 1d       	adc	r16, r4
      7e:	07 1d       	adc	r16, r7
      80:	0a 1d       	adc	r16, r10
      82:	0d 1d       	adc	r16, r13
      84:	16 1d       	adc	r17, r6
      86:	10 1d       	adc	r17, r0
      88:	13 1d       	adc	r17, r3
      8a:	19 1d       	adc	r17, r9
      8c:	1c 1d       	adc	r17, r12
      8e:	1f 1d       	adc	r17, r15
      90:	22 1d       	adc	r18, r2
      92:	25 1d       	adc	r18, r5
      94:	28 1d       	adc	r18, r8
      96:	2b 1d       	adc	r18, r11
      98:	2e 1d       	adc	r18, r14
      9a:	31 1d       	adc	r19, r1
      9c:	34 1d       	adc	r19, r4
      9e:	37 1d       	adc	r19, r7
      a0:	3a 1d       	adc	r19, r10
      a2:	4b 1d       	adc	r20, r11
      a4:	4e 1d       	adc	r20, r14
      a6:	51 1d       	adc	r21, r1
      a8:	54 1d       	adc	r21, r4
      aa:	5d 1d       	adc	r21, r13
      ac:	57 1d       	adc	r21, r7
      ae:	5a 1d       	adc	r21, r10
      b0:	60 1d       	adc	r22, r0
      b2:	63 1d       	adc	r22, r3
      b4:	66 1d       	adc	r22, r6
      b6:	69 1d       	adc	r22, r9
      b8:	6c 1d       	adc	r22, r12
      ba:	6f 1d       	adc	r22, r15
      bc:	72 1d       	adc	r23, r2
      be:	75 1d       	adc	r23, r5
      c0:	78 1d       	adc	r23, r8
      c2:	7b 1d       	adc	r23, r11
      c4:	7e 1d       	adc	r23, r14
      c6:	81 1d       	adc	r24, r1
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e8 e8       	ldi	r30, 0x88	; 136
     676:	fa e6       	ldi	r31, 0x6A	; 106
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	ae 3e       	cpi	r26, 0xEE	; 238
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	ae ee       	ldi	r26, 0xEE	; 238
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a9 32       	cpi	r26, 0x29	; 41
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 89 17 	call	0x2f12	; 0x2f12 <main>
     698:	0c 94 42 35 	jmp	0x6a84	; 0x6a84 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 03 1f 	call	0x3e06	; 0x3e06 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 b1 1e 	call	0x3d62	; 0x3d62 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 49 1f 	call	0x3e92	; 0x3e92 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 49 2a 	call	0x5492	; 0x5492 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 7e 17 	call	0x2efc	; 0x2efc <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 49 2a 	call	0x5492	; 0x5492 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 7e 17 	call	0x2efc	; 0x2efc <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 49 2a 	call	0x5492	; 0x5492 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 7e 17 	call	0x2efc	; 0x2efc <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 49 2a 	call	0x5492	; 0x5492 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 7e 17 	call	0x2efc	; 0x2efc <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 7e 17 	call	0x2efc	; 0x2efc <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 47 17 	call	0x2e8e	; 0x2e8e <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 2a 17 	call	0x2e54	; 0x2e54 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 6a 04 	sts	0x046A, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 6a 04 	sts	0x046A, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 b5 1d 	call	0x3b6a	; 0x3b6a <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 94 34 	call	0x6928	; 0x6928 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 a1 18 	call	0x3142	; 0x3142 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 8c 18 	call	0x3118	; 0x3118 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 8c 18 	call	0x3118	; 0x3118 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 94 34 	call	0x6928	; 0x6928 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 a1 18 	call	0x3142	; 0x3142 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 8c 18 	call	0x3118	; 0x3118 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 8c 18 	call	0x3118	; 0x3118 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 94 34 	call	0x6928	; 0x6928 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 a1 18 	call	0x3142	; 0x3142 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 a1 18 	call	0x3142	; 0x3142 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 8c 18 	call	0x3118	; 0x3118 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 8c 18 	call	0x3118	; 0x3118 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
     c14:	1f 93       	push	r17
     c16:	18 2f       	mov	r17, r24
	// Update the avrage 
	unsigned char odometry = ((odometryStepL + odometryStepR)/2)*D_STEP;
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	if((odometry > odometryTrigger)||(reset))
     c18:	20 91 6c 04 	lds	r18, 0x046C
     c1c:	60 91 a6 06 	lds	r22, 0x06A6
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	62 0f       	add	r22, r18
     c24:	71 1d       	adc	r23, r1
     c26:	75 95       	asr	r23
     c28:	67 95       	ror	r22
     c2a:	88 27       	eor	r24, r24
     c2c:	77 fd       	sbrc	r23, 7
     c2e:	80 95       	com	r24
     c30:	98 2f       	mov	r25, r24
     c32:	0e 94 4d 2b 	call	0x569a	; 0x569a <__floatsisf>
     c36:	2c ed       	ldi	r18, 0xDC	; 220
     c38:	38 eb       	ldi	r19, 0xB8	; 184
     c3a:	48 e0       	ldi	r20, 0x08	; 8
     c3c:	5e e3       	ldi	r21, 0x3E	; 62
     c3e:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
     c42:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
     c46:	20 91 6d 05 	lds	r18, 0x056D
     c4a:	26 17       	cp	r18, r22
     c4c:	10 f0       	brcs	.+4      	; 0xc52 <checkOdometry+0x3e>
     c4e:	11 23       	and	r17, r17
     c50:	39 f0       	breq	.+14     	; 0xc60 <checkOdometry+0x4c>
	{
		odometryFlag = 1;
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	80 93 18 06 	sts	0x0618, r24
		odometryStepL = 0;
     c58:	10 92 a6 06 	sts	0x06A6, r1
		odometryStepR = 0;
     c5c:	10 92 6c 04 	sts	0x046C, r1
	}
}
     c60:	1f 91       	pop	r17
     c62:	08 95       	ret

00000c64 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
     c64:	ef 92       	push	r14
     c66:	ff 92       	push	r15
     c68:	0f 93       	push	r16
     c6a:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
     c6c:	60 91 e6 04 	lds	r22, 0x04E6
     c70:	70 91 e7 04 	lds	r23, 0x04E7
     c74:	80 91 e8 04 	lds	r24, 0x04E8
     c78:	90 91 e9 04 	lds	r25, 0x04E9
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	40 e5       	ldi	r20, 0x50	; 80
     c82:	51 e4       	ldi	r21, 0x41	; 65
     c84:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
     c88:	f8 2e       	mov	r15, r24
     c8a:	ff 1c       	adc	r15, r15
     c8c:	ff 24       	eor	r15, r15
     c8e:	ff 1c       	adc	r15, r15
     c90:	ff 0c       	add	r15, r15
     c92:	ff 0c       	add	r15, r15
     c94:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
     c96:	60 91 14 06 	lds	r22, 0x0614
     c9a:	70 91 15 06 	lds	r23, 0x0615
     c9e:	80 91 16 06 	lds	r24, 0x0616
     ca2:	90 91 17 06 	lds	r25, 0x0617
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 ef       	ldi	r20, 0xF0	; 240
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
     cb2:	08 2f       	mov	r16, r24
     cb4:	00 1f       	adc	r16, r16
     cb6:	00 27       	eor	r16, r16
     cb8:	00 1f       	adc	r16, r16
     cba:	00 0f       	add	r16, r16
     cbc:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
     cbe:	60 91 f0 04 	lds	r22, 0x04F0
     cc2:	70 91 f1 04 	lds	r23, 0x04F1
     cc6:	80 91 f2 04 	lds	r24, 0x04F2
     cca:	90 91 f3 04 	lds	r25, 0x04F3
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	4c e0       	ldi	r20, 0x0C	; 12
     cd4:	52 e4       	ldi	r21, 0x42	; 66
     cd6:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
     cda:	18 2f       	mov	r17, r24
     cdc:	11 1f       	adc	r17, r17
     cde:	11 27       	eor	r17, r17
     ce0:	11 1f       	adc	r17, r17
     ce2:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
     ce4:	ee 24       	eor	r14, r14
     ce6:	60 91 19 06 	lds	r22, 0x0619
     cea:	70 91 1a 06 	lds	r23, 0x061A
     cee:	80 91 1b 06 	lds	r24, 0x061B
     cf2:	90 91 1c 06 	lds	r25, 0x061C
     cf6:	20 e0       	ldi	r18, 0x00	; 0
     cf8:	30 e0       	ldi	r19, 0x00	; 0
     cfa:	40 ef       	ldi	r20, 0xF0	; 240
     cfc:	51 e4       	ldi	r21, 0x41	; 65
     cfe:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
     d02:	88 23       	and	r24, r24
     d04:	14 f4       	brge	.+4      	; 0xd0a <checkWorld+0xa6>
     d06:	ee 24       	eor	r14, r14
     d08:	e3 94       	inc	r14
     d0a:	8f 2d       	mov	r24, r15
     d0c:	8e 0d       	add	r24, r14
     d0e:	80 0f       	add	r24, r16
     d10:	81 0f       	add	r24, r17
     d12:	80 93 ee 04 	sts	0x04EE, r24
	nextGateway = moveGateways[currentMoveWorld+1];
     d16:	20 91 ef 04 	lds	r18, 0x04EF
     d1a:	e2 2f       	mov	r30, r18
     d1c:	f0 e0       	ldi	r31, 0x00	; 0
     d1e:	eb 56       	subi	r30, 0x6B	; 107
     d20:	f9 4f       	sbci	r31, 0xF9	; 249
     d22:	91 81       	ldd	r25, Z+1	; 0x01
     d24:	90 93 f4 04 	sts	0x04F4, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
     d28:	89 17       	cp	r24, r25
     d2a:	19 f4       	brne	.+6      	; 0xd32 <checkWorld+0xce>
		currentMoveWorld += 1;
     d2c:	2f 5f       	subi	r18, 0xFF	; 255
     d2e:	20 93 ef 04 	sts	0x04EF, r18
	}
}
     d32:	1f 91       	pop	r17
     d34:	0f 91       	pop	r16
     d36:	ff 90       	pop	r15
     d38:	ef 90       	pop	r14
     d3a:	08 95       	ret

00000d3c <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
     d3c:	2f 92       	push	r2
     d3e:	3f 92       	push	r3
     d40:	4f 92       	push	r4
     d42:	5f 92       	push	r5
     d44:	6f 92       	push	r6
     d46:	7f 92       	push	r7
     d48:	8f 92       	push	r8
     d4a:	9f 92       	push	r9
     d4c:	af 92       	push	r10
     d4e:	bf 92       	push	r11
     d50:	cf 92       	push	r12
     d52:	df 92       	push	r13
     d54:	ef 92       	push	r14
     d56:	ff 92       	push	r15
     d58:	0f 93       	push	r16
     d5a:	1f 93       	push	r17
     d5c:	df 93       	push	r29
     d5e:	cf 93       	push	r28
     d60:	00 d0       	rcall	.+0      	; 0xd62 <moveAway+0x26>
     d62:	00 d0       	rcall	.+0      	; 0xd64 <moveAway+0x28>
     d64:	cd b7       	in	r28, 0x3d	; 61
     d66:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
     d68:	60 90 e6 04 	lds	r6, 0x04E6
     d6c:	70 90 e7 04 	lds	r7, 0x04E7
     d70:	80 90 e8 04 	lds	r8, 0x04E8
     d74:	90 90 e9 04 	lds	r9, 0x04E9
     d78:	a0 90 f0 04 	lds	r10, 0x04F0
     d7c:	b0 90 f1 04 	lds	r11, 0x04F1
     d80:	c0 90 f2 04 	lds	r12, 0x04F2
     d84:	d0 90 f3 04 	lds	r13, 0x04F3
	float moveX = rtIR - ltIR;
     d88:	e0 90 19 06 	lds	r14, 0x0619
     d8c:	f0 90 1a 06 	lds	r15, 0x061A
     d90:	00 91 1b 06 	lds	r16, 0x061B
     d94:	10 91 1c 06 	lds	r17, 0x061C
     d98:	80 91 14 06 	lds	r24, 0x0614
     d9c:	90 91 15 06 	lds	r25, 0x0615
     da0:	a0 91 16 06 	lds	r26, 0x0616
     da4:	b0 91 17 06 	lds	r27, 0x0617
     da8:	89 83       	std	Y+1, r24	; 0x01
     daa:	9a 83       	std	Y+2, r25	; 0x02
     dac:	ab 83       	std	Y+3, r26	; 0x03
     dae:	bc 83       	std	Y+4, r27	; 0x04
     db0:	c8 01       	movw	r24, r16
     db2:	b7 01       	movw	r22, r14
     db4:	29 81       	ldd	r18, Y+1	; 0x01
     db6:	3a 81       	ldd	r19, Y+2	; 0x02
     db8:	4b 81       	ldd	r20, Y+3	; 0x03
     dba:	5c 81       	ldd	r21, Y+4	; 0x04
     dbc:	0e 94 49 2a 	call	0x5492	; 0x5492 <__subsf3>
     dc0:	1b 01       	movw	r2, r22
     dc2:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
     dc4:	c4 01       	movw	r24, r8
     dc6:	b3 01       	movw	r22, r6
     dc8:	20 e0       	ldi	r18, 0x00	; 0
     dca:	30 e0       	ldi	r19, 0x00	; 0
     dcc:	40 ee       	ldi	r20, 0xE0	; 224
     dce:	50 e4       	ldi	r21, 0x40	; 64
     dd0:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
     dd4:	87 fd       	sbrc	r24, 7
     dd6:	0b c0       	rjmp	.+22     	; 0xdee <moveAway+0xb2>
     dd8:	c6 01       	movw	r24, r12
     dda:	b5 01       	movw	r22, r10
     ddc:	20 e0       	ldi	r18, 0x00	; 0
     dde:	30 e0       	ldi	r19, 0x00	; 0
     de0:	40 ee       	ldi	r20, 0xE0	; 224
     de2:	50 e4       	ldi	r21, 0x40	; 64
     de4:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
     de8:	88 23       	and	r24, r24
     dea:	0c f0       	brlt	.+2      	; 0xdee <moveAway+0xb2>
     dec:	68 c0       	rjmp	.+208    	; 0xebe <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
     dee:	c4 01       	movw	r24, r8
     df0:	b3 01       	movw	r22, r6
     df2:	a6 01       	movw	r20, r12
     df4:	95 01       	movw	r18, r10
     df6:	0e 94 49 2a 	call	0x5492	; 0x5492 <__subsf3>
     dfa:	7b 01       	movw	r14, r22
     dfc:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
     dfe:	77 24       	eor	r7, r7
     e00:	20 e0       	ldi	r18, 0x00	; 0
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	40 e0       	ldi	r20, 0x00	; 0
     e06:	50 e0       	ldi	r21, 0x00	; 0
     e08:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__gesf2>
     e0c:	88 23       	and	r24, r24
     e0e:	14 f0       	brlt	.+4      	; 0xe14 <moveAway+0xd8>
     e10:	77 24       	eor	r7, r7
     e12:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     e14:	c8 01       	movw	r24, r16
     e16:	b7 01       	movw	r22, r14
     e18:	0e 94 1a 2b 	call	0x5634	; 0x5634 <__fixsfsi>
     e1c:	9b 01       	movw	r18, r22
     e1e:	77 ff       	sbrs	r23, 7
     e20:	03 c0       	rjmp	.+6      	; 0xe28 <moveAway+0xec>
     e22:	30 95       	com	r19
     e24:	21 95       	neg	r18
     e26:	3f 4f       	sbci	r19, 0xFF	; 255
     e28:	b9 01       	movw	r22, r18
     e2a:	88 27       	eor	r24, r24
     e2c:	77 fd       	sbrc	r23, 7
     e2e:	80 95       	com	r24
     e30:	98 2f       	mov	r25, r24
     e32:	0e 94 4d 2b 	call	0x569a	; 0x569a <__floatsisf>
     e36:	6b 01       	movw	r12, r22
     e38:	7c 01       	movw	r14, r24
     e3a:	ad b7       	in	r26, 0x3d	; 61
     e3c:	be b7       	in	r27, 0x3e	; 62
     e3e:	19 97       	sbiw	r26, 0x09	; 9
     e40:	0f b6       	in	r0, 0x3f	; 63
     e42:	f8 94       	cli
     e44:	be bf       	out	0x3e, r27	; 62
     e46:	0f be       	out	0x3f, r0	; 63
     e48:	ad bf       	out	0x3d, r26	; 61
     e4a:	0d b7       	in	r16, 0x3d	; 61
     e4c:	1e b7       	in	r17, 0x3e	; 62
     e4e:	0f 5f       	subi	r16, 0xFF	; 255
     e50:	1f 4f       	sbci	r17, 0xFF	; 255
     e52:	a2 01       	movw	r20, r4
     e54:	91 01       	movw	r18, r2
     e56:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
     e5a:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
     e5e:	4b 01       	movw	r8, r22
     e60:	5c 01       	movw	r10, r24
     e62:	82 e3       	ldi	r24, 0x32	; 50
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	f8 01       	movw	r30, r16
     e68:	91 83       	std	Z+1, r25	; 0x01
     e6a:	80 83       	st	Z, r24
     e6c:	c7 01       	movw	r24, r14
     e6e:	b6 01       	movw	r22, r12
     e70:	a2 01       	movw	r20, r4
     e72:	91 01       	movw	r18, r2
     e74:	0e 94 49 2a 	call	0x5492	; 0x5492 <__subsf3>
     e78:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
     e7c:	d8 01       	movw	r26, r16
     e7e:	13 96       	adiw	r26, 0x03	; 3
     e80:	7c 93       	st	X, r23
     e82:	6e 93       	st	-X, r22
     e84:	12 97       	sbiw	r26, 0x02	; 2
     e86:	82 ec       	ldi	r24, 0xC2	; 194
     e88:	91 e0       	ldi	r25, 0x01	; 1
     e8a:	15 96       	adiw	r26, 0x05	; 5
     e8c:	9c 93       	st	X, r25
     e8e:	8e 93       	st	-X, r24
     e90:	14 97       	sbiw	r26, 0x04	; 4
     e92:	16 96       	adiw	r26, 0x06	; 6
     e94:	1c 92       	st	X, r1
     e96:	16 97       	sbiw	r26, 0x06	; 6
     e98:	18 96       	adiw	r26, 0x08	; 8
     e9a:	1c 92       	st	X, r1
     e9c:	1e 92       	st	-X, r1
     e9e:	17 97       	sbiw	r26, 0x07	; 7
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	62 e0       	ldi	r22, 0x02	; 2
     ea4:	47 2d       	mov	r20, r7
     ea6:	22 e3       	ldi	r18, 0x32	; 50
     ea8:	30 e0       	ldi	r19, 0x00	; 0
     eaa:	84 01       	movw	r16, r8
     eac:	72 ec       	ldi	r23, 0xC2	; 194
     eae:	e7 2e       	mov	r14, r23
     eb0:	71 e0       	ldi	r23, 0x01	; 1
     eb2:	f7 2e       	mov	r15, r23
     eb4:	cc 24       	eor	r12, r12
     eb6:	aa 24       	eor	r10, r10
     eb8:	bb 24       	eor	r11, r11
     eba:	87 2c       	mov	r8, r7
     ebc:	82 c0       	rjmp	.+260    	; 0xfc2 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
     ebe:	c8 01       	movw	r24, r16
     ec0:	b7 01       	movw	r22, r14
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	40 e2       	ldi	r20, 0x20	; 32
     ec8:	51 e4       	ldi	r21, 0x41	; 65
     eca:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
     ece:	88 23       	and	r24, r24
     ed0:	b4 f5       	brge	.+108    	; 0xf3e <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     ed2:	c2 01       	movw	r24, r4
     ed4:	b1 01       	movw	r22, r2
     ed6:	0e 94 1a 2b 	call	0x5634	; 0x5634 <__fixsfsi>
     eda:	8b 01       	movw	r16, r22
     edc:	77 ff       	sbrs	r23, 7
     ede:	03 c0       	rjmp	.+6      	; 0xee6 <moveAway+0x1aa>
     ee0:	10 95       	com	r17
     ee2:	01 95       	neg	r16
     ee4:	1f 4f       	sbci	r17, 0xFF	; 255
     ee6:	2d b7       	in	r18, 0x3d	; 61
     ee8:	3e b7       	in	r19, 0x3e	; 62
     eea:	29 50       	subi	r18, 0x09	; 9
     eec:	30 40       	sbci	r19, 0x00	; 0
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	3e bf       	out	0x3e, r19	; 62
     ef4:	0f be       	out	0x3f, r0	; 63
     ef6:	2d bf       	out	0x3d, r18	; 61
     ef8:	ed b7       	in	r30, 0x3d	; 61
     efa:	fe b7       	in	r31, 0x3e	; 62
     efc:	31 96       	adiw	r30, 0x01	; 1
     efe:	88 ec       	ldi	r24, 0xC8	; 200
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	ad b7       	in	r26, 0x3d	; 61
     f04:	be b7       	in	r27, 0x3e	; 62
     f06:	12 96       	adiw	r26, 0x02	; 2
     f08:	9c 93       	st	X, r25
     f0a:	8e 93       	st	-X, r24
     f0c:	11 97       	sbiw	r26, 0x01	; 1
     f0e:	13 83       	std	Z+3, r17	; 0x03
     f10:	02 83       	std	Z+2, r16	; 0x02
     f12:	82 ec       	ldi	r24, 0xC2	; 194
     f14:	91 e0       	ldi	r25, 0x01	; 1
     f16:	95 83       	std	Z+5, r25	; 0x05
     f18:	84 83       	std	Z+4, r24	; 0x04
     f1a:	16 82       	std	Z+6, r1	; 0x06
     f1c:	10 86       	std	Z+8, r1	; 0x08
     f1e:	17 82       	std	Z+7, r1	; 0x07
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	62 e0       	ldi	r22, 0x02	; 2
     f24:	40 e0       	ldi	r20, 0x00	; 0
     f26:	28 ec       	ldi	r18, 0xC8	; 200
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	52 ec       	ldi	r21, 0xC2	; 194
     f2c:	e5 2e       	mov	r14, r21
     f2e:	51 e0       	ldi	r21, 0x01	; 1
     f30:	f5 2e       	mov	r15, r21
     f32:	cc 24       	eor	r12, r12
     f34:	aa 24       	eor	r10, r10
     f36:	bb 24       	eor	r11, r11
     f38:	88 24       	eor	r8, r8
     f3a:	83 94       	inc	r8
     f3c:	42 c0       	rjmp	.+132    	; 0xfc2 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
     f3e:	69 81       	ldd	r22, Y+1	; 0x01
     f40:	7a 81       	ldd	r23, Y+2	; 0x02
     f42:	8b 81       	ldd	r24, Y+3	; 0x03
     f44:	9c 81       	ldd	r25, Y+4	; 0x04
     f46:	20 e0       	ldi	r18, 0x00	; 0
     f48:	30 e0       	ldi	r19, 0x00	; 0
     f4a:	40 e2       	ldi	r20, 0x20	; 32
     f4c:	51 e4       	ldi	r21, 0x41	; 65
     f4e:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
     f52:	87 fd       	sbrc	r24, 7
     f54:	02 c0       	rjmp	.+4      	; 0xf5a <moveAway+0x21e>
     f56:	80 e0       	ldi	r24, 0x00	; 0
     f58:	3f c0       	rjmp	.+126    	; 0xfd8 <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
     f5a:	c2 01       	movw	r24, r4
     f5c:	b1 01       	movw	r22, r2
     f5e:	0e 94 1a 2b 	call	0x5634	; 0x5634 <__fixsfsi>
     f62:	8b 01       	movw	r16, r22
     f64:	77 ff       	sbrs	r23, 7
     f66:	03 c0       	rjmp	.+6      	; 0xf6e <moveAway+0x232>
     f68:	10 95       	com	r17
     f6a:	01 95       	neg	r16
     f6c:	1f 4f       	sbci	r17, 0xFF	; 255
     f6e:	2d b7       	in	r18, 0x3d	; 61
     f70:	3e b7       	in	r19, 0x3e	; 62
     f72:	29 50       	subi	r18, 0x09	; 9
     f74:	30 40       	sbci	r19, 0x00	; 0
     f76:	0f b6       	in	r0, 0x3f	; 63
     f78:	f8 94       	cli
     f7a:	3e bf       	out	0x3e, r19	; 62
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	2d bf       	out	0x3d, r18	; 61
     f80:	ed b7       	in	r30, 0x3d	; 61
     f82:	fe b7       	in	r31, 0x3e	; 62
     f84:	31 96       	adiw	r30, 0x01	; 1
     f86:	88 ec       	ldi	r24, 0xC8	; 200
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	ad b7       	in	r26, 0x3d	; 61
     f8c:	be b7       	in	r27, 0x3e	; 62
     f8e:	12 96       	adiw	r26, 0x02	; 2
     f90:	9c 93       	st	X, r25
     f92:	8e 93       	st	-X, r24
     f94:	11 97       	sbiw	r26, 0x01	; 1
     f96:	13 83       	std	Z+3, r17	; 0x03
     f98:	02 83       	std	Z+2, r16	; 0x02
     f9a:	82 ec       	ldi	r24, 0xC2	; 194
     f9c:	91 e0       	ldi	r25, 0x01	; 1
     f9e:	95 83       	std	Z+5, r25	; 0x05
     fa0:	84 83       	std	Z+4, r24	; 0x04
     fa2:	16 82       	std	Z+6, r1	; 0x06
     fa4:	10 86       	std	Z+8, r1	; 0x08
     fa6:	17 82       	std	Z+7, r1	; 0x07
     fa8:	81 e0       	ldi	r24, 0x01	; 1
     faa:	62 e0       	ldi	r22, 0x02	; 2
     fac:	41 e0       	ldi	r20, 0x01	; 1
     fae:	28 ec       	ldi	r18, 0xC8	; 200
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	92 ec       	ldi	r25, 0xC2	; 194
     fb4:	e9 2e       	mov	r14, r25
     fb6:	91 e0       	ldi	r25, 0x01	; 1
     fb8:	f9 2e       	mov	r15, r25
     fba:	cc 24       	eor	r12, r12
     fbc:	aa 24       	eor	r10, r10
     fbe:	bb 24       	eor	r11, r11
     fc0:	88 24       	eor	r8, r8
     fc2:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <STEPPER_move>
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	ed b7       	in	r30, 0x3d	; 61
     fca:	fe b7       	in	r31, 0x3e	; 62
     fcc:	39 96       	adiw	r30, 0x09	; 9
     fce:	0f b6       	in	r0, 0x3f	; 63
     fd0:	f8 94       	cli
     fd2:	fe bf       	out	0x3e, r31	; 62
     fd4:	0f be       	out	0x3f, r0	; 63
     fd6:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
     fd8:	0f 90       	pop	r0
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	1f 91       	pop	r17
     fe6:	0f 91       	pop	r16
     fe8:	ff 90       	pop	r15
     fea:	ef 90       	pop	r14
     fec:	df 90       	pop	r13
     fee:	cf 90       	pop	r12
     ff0:	bf 90       	pop	r11
     ff2:	af 90       	pop	r10
     ff4:	9f 90       	pop	r9
     ff6:	8f 90       	pop	r8
     ff8:	7f 90       	pop	r7
     ffa:	6f 90       	pop	r6
     ffc:	5f 90       	pop	r5
     ffe:	4f 90       	pop	r4
    1000:	3f 90       	pop	r3
    1002:	2f 90       	pop	r2
    1004:	08 95       	ret

00001006 <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    1006:	8f 92       	push	r8
    1008:	af 92       	push	r10
    100a:	bf 92       	push	r11
    100c:	cf 92       	push	r12
    100e:	df 92       	push	r13
    1010:	ef 92       	push	r14
    1012:	ff 92       	push	r15
    1014:	0f 93       	push	r16
    1016:	1f 93       	push	r17
    1018:	cf 93       	push	r28
    101a:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    101c:	0e 94 ab 19 	call	0x3356	; 0x3356 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    1020:	67 2b       	or	r22, r23
    1022:	09 f0       	breq	.+2      	; 0x1026 <moveWander+0x20>
    1024:	76 c0       	rjmp	.+236    	; 0x1112 <moveWander+0x10c>
    1026:	89 2b       	or	r24, r25
    1028:	09 f0       	breq	.+2      	; 0x102c <moveWander+0x26>
    102a:	73 c0       	rjmp	.+230    	; 0x1112 <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    102c:	0e 94 59 33 	call	0x66b2	; 0x66b2 <rand>
    1030:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    1032:	0e 94 59 33 	call	0x66b2	; 0x66b2 <rand>
    1036:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    1038:	0e 94 59 33 	call	0x66b2	; 0x66b2 <rand>
    103c:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    103e:	0e 94 59 33 	call	0x66b2	; 0x66b2 <rand>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	6a e0       	ldi	r22, 0x0A	; 10
    1046:	70 e0       	ldi	r23, 0x00	; 0
    1048:	0e 94 8a 31 	call	0x6314	; 0x6314 <__divmodhi4>
    104c:	08 97       	sbiw	r24, 0x08	; 8
    104e:	0c f0       	brlt	.+2      	; 0x1052 <moveWander+0x4c>
    1050:	21 e0       	ldi	r18, 0x01	; 1
    1052:	82 2e       	mov	r8, r18
    1054:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    1056:	c8 01       	movw	r24, r16
    1058:	60 e9       	ldi	r22, 0x90	; 144
    105a:	71 e0       	ldi	r23, 0x01	; 1
    105c:	0e 94 8a 31 	call	0x6314	; 0x6314 <__divmodhi4>
    1060:	f0 e9       	ldi	r31, 0x90	; 144
    1062:	af 2e       	mov	r10, r31
    1064:	f1 e0       	ldi	r31, 0x01	; 1
    1066:	bf 2e       	mov	r11, r31
    1068:	a8 0e       	add	r10, r24
    106a:	b9 1e       	adc	r11, r25
    106c:	8d b7       	in	r24, 0x3d	; 61
    106e:	9e b7       	in	r25, 0x3e	; 62
    1070:	09 97       	sbiw	r24, 0x09	; 9
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	f8 94       	cli
    1076:	9e bf       	out	0x3e, r25	; 62
    1078:	0f be       	out	0x3f, r0	; 63
    107a:	8d bf       	out	0x3d, r24	; 61
    107c:	0d b7       	in	r16, 0x3d	; 61
    107e:	1e b7       	in	r17, 0x3e	; 62
    1080:	0f 5f       	subi	r16, 0xFF	; 255
    1082:	1f 4f       	sbci	r17, 0xFF	; 255
    1084:	c7 01       	movw	r24, r14
    1086:	68 ec       	ldi	r22, 0xC8	; 200
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	0e 94 8a 31 	call	0x6314	; 0x6314 <__divmodhi4>
    108e:	88 53       	subi	r24, 0x38	; 56
    1090:	9f 4f       	sbci	r25, 0xFF	; 255
    1092:	aa 27       	eor	r26, r26
    1094:	97 fd       	sbrc	r25, 7
    1096:	a0 95       	com	r26
    1098:	ba 2f       	mov	r27, r26
    109a:	bc 01       	movw	r22, r24
    109c:	cd 01       	movw	r24, r26
    109e:	0e 94 4d 2b 	call	0x569a	; 0x569a <__floatsisf>
    10a2:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    10a6:	6b 01       	movw	r12, r22
    10a8:	7c 01       	movw	r14, r24
    10aa:	f8 01       	movw	r30, r16
    10ac:	b1 82       	std	Z+1, r11	; 0x01
    10ae:	a0 82       	st	Z, r10
    10b0:	ce 01       	movw	r24, r28
    10b2:	68 ec       	ldi	r22, 0xC8	; 200
    10b4:	70 e0       	ldi	r23, 0x00	; 0
    10b6:	0e 94 8a 31 	call	0x6314	; 0x6314 <__divmodhi4>
    10ba:	88 53       	subi	r24, 0x38	; 56
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	aa 27       	eor	r26, r26
    10c0:	97 fd       	sbrc	r25, 7
    10c2:	a0 95       	com	r26
    10c4:	ba 2f       	mov	r27, r26
    10c6:	bc 01       	movw	r22, r24
    10c8:	cd 01       	movw	r24, r26
    10ca:	0e 94 4d 2b 	call	0x569a	; 0x569a <__floatsisf>
    10ce:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    10d2:	f8 01       	movw	r30, r16
    10d4:	73 83       	std	Z+3, r23	; 0x03
    10d6:	62 83       	std	Z+2, r22	; 0x02
    10d8:	82 ec       	ldi	r24, 0xC2	; 194
    10da:	91 e0       	ldi	r25, 0x01	; 1
    10dc:	95 83       	std	Z+5, r25	; 0x05
    10de:	84 83       	std	Z+4, r24	; 0x04
    10e0:	16 82       	std	Z+6, r1	; 0x06
    10e2:	10 86       	std	Z+8, r1	; 0x08
    10e4:	17 82       	std	Z+7, r1	; 0x07
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	62 e0       	ldi	r22, 0x02	; 2
    10ea:	48 2d       	mov	r20, r8
    10ec:	95 01       	movw	r18, r10
    10ee:	86 01       	movw	r16, r12
    10f0:	e2 ec       	ldi	r30, 0xC2	; 194
    10f2:	ee 2e       	mov	r14, r30
    10f4:	e1 e0       	ldi	r30, 0x01	; 1
    10f6:	fe 2e       	mov	r15, r30
    10f8:	cc 24       	eor	r12, r12
    10fa:	aa 24       	eor	r10, r10
    10fc:	bb 24       	eor	r11, r11
    10fe:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <STEPPER_move>
    1102:	8d b7       	in	r24, 0x3d	; 61
    1104:	9e b7       	in	r25, 0x3e	; 62
    1106:	09 96       	adiw	r24, 0x09	; 9
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	f8 94       	cli
    110c:	9e bf       	out	0x3e, r25	; 62
    110e:	0f be       	out	0x3f, r0	; 63
    1110:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    1112:	81 e0       	ldi	r24, 0x01	; 1
    1114:	df 91       	pop	r29
    1116:	cf 91       	pop	r28
    1118:	1f 91       	pop	r17
    111a:	0f 91       	pop	r16
    111c:	ff 90       	pop	r15
    111e:	ef 90       	pop	r14
    1120:	df 90       	pop	r13
    1122:	cf 90       	pop	r12
    1124:	bf 90       	pop	r11
    1126:	af 90       	pop	r10
    1128:	8f 90       	pop	r8
    112a:	08 95       	ret

0000112c <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    112c:	2f 92       	push	r2
    112e:	3f 92       	push	r3
    1130:	4f 92       	push	r4
    1132:	5f 92       	push	r5
    1134:	6f 92       	push	r6
    1136:	7f 92       	push	r7
    1138:	8f 92       	push	r8
    113a:	9f 92       	push	r9
    113c:	af 92       	push	r10
    113e:	bf 92       	push	r11
    1140:	cf 92       	push	r12
    1142:	df 92       	push	r13
    1144:	ef 92       	push	r14
    1146:	ff 92       	push	r15
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    114c:	e0 90 e6 04 	lds	r14, 0x04E6
    1150:	f0 90 e7 04 	lds	r15, 0x04E7
    1154:	00 91 e8 04 	lds	r16, 0x04E8
    1158:	10 91 e9 04 	lds	r17, 0x04E9
    115c:	33 24       	eor	r3, r3
    115e:	c8 01       	movw	r24, r16
    1160:	b7 01       	movw	r22, r14
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e0       	ldi	r20, 0x00	; 0
    1168:	50 e0       	ldi	r21, 0x00	; 0
    116a:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
    116e:	88 23       	and	r24, r24
    1170:	14 f4       	brge	.+4      	; 0x1176 <moveWall+0x4a>
    1172:	33 24       	eor	r3, r3
    1174:	33 94       	inc	r3
    1176:	a0 90 19 06 	lds	r10, 0x0619
    117a:	b0 90 1a 06 	lds	r11, 0x061A
    117e:	c0 90 1b 06 	lds	r12, 0x061B
    1182:	d0 90 1c 06 	lds	r13, 0x061C
    1186:	40 90 14 06 	lds	r4, 0x0614
    118a:	50 90 15 06 	lds	r5, 0x0615
    118e:	60 90 16 06 	lds	r6, 0x0616
    1192:	70 90 17 06 	lds	r7, 0x0617
    1196:	88 24       	eor	r8, r8
    1198:	60 91 f0 04 	lds	r22, 0x04F0
    119c:	70 91 f1 04 	lds	r23, 0x04F1
    11a0:	80 91 f2 04 	lds	r24, 0x04F2
    11a4:	90 91 f3 04 	lds	r25, 0x04F3
    11a8:	20 e0       	ldi	r18, 0x00	; 0
    11aa:	30 e0       	ldi	r19, 0x00	; 0
    11ac:	40 e7       	ldi	r20, 0x70	; 112
    11ae:	51 e4       	ldi	r21, 0x41	; 65
    11b0:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
    11b4:	88 23       	and	r24, r24
    11b6:	14 f4       	brge	.+4      	; 0x11bc <moveWall+0x90>
    11b8:	88 24       	eor	r8, r8
    11ba:	83 94       	inc	r8
    11bc:	93 2c       	mov	r9, r3
    11be:	98 28       	or	r9, r8
    11c0:	88 24       	eor	r8, r8
    11c2:	c6 01       	movw	r24, r12
    11c4:	b5 01       	movw	r22, r10
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	40 e2       	ldi	r20, 0x20	; 32
    11cc:	51 e4       	ldi	r21, 0x41	; 65
    11ce:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
    11d2:	88 23       	and	r24, r24
    11d4:	14 f4       	brge	.+4      	; 0x11da <moveWall+0xae>
    11d6:	88 24       	eor	r8, r8
    11d8:	83 94       	inc	r8
    11da:	98 28       	or	r9, r8
    11dc:	88 24       	eor	r8, r8
    11de:	c3 01       	movw	r24, r6
    11e0:	b2 01       	movw	r22, r4
    11e2:	20 e0       	ldi	r18, 0x00	; 0
    11e4:	30 e0       	ldi	r19, 0x00	; 0
    11e6:	40 e2       	ldi	r20, 0x20	; 32
    11e8:	51 e4       	ldi	r21, 0x41	; 65
    11ea:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
    11ee:	88 23       	and	r24, r24
    11f0:	14 f4       	brge	.+4      	; 0x11f6 <moveWall+0xca>
    11f2:	88 24       	eor	r8, r8
    11f4:	83 94       	inc	r8
    11f6:	29 2c       	mov	r2, r9
    11f8:	28 28       	or	r2, r8
	if(!isWall){	
    11fa:	81 f4       	brne	.+32     	; 0x121c <moveWall+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	70 e0       	ldi	r23, 0x00	; 0
    1200:	80 e0       	ldi	r24, 0x00	; 0
    1202:	9f e4       	ldi	r25, 0x4F	; 79
    1204:	20 e0       	ldi	r18, 0x00	; 0
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	40 e2       	ldi	r20, 0x20	; 32
    120a:	51 e4       	ldi	r21, 0x41	; 65
    120c:	79 01       	movw	r14, r18
    120e:	8a 01       	movw	r16, r20
    1210:	59 01       	movw	r10, r18
    1212:	6a 01       	movw	r12, r20
    1214:	88 24       	eor	r8, r8
    1216:	0e 94 4a 11 	call	0x2294	; 0x2294 <move_arc_stnb>
    121a:	0f c1       	rjmp	.+542    	; 0x143a <moveWall+0x30e>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    121c:	c6 01       	movw	r24, r12
    121e:	b5 01       	movw	r22, r10
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	40 e2       	ldi	r20, 0x20	; 32
    1226:	51 e4       	ldi	r21, 0x41	; 65
    1228:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__gesf2>
    122c:	18 16       	cp	r1, r24
    122e:	64 f4       	brge	.+24     	; 0x1248 <moveWall+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    1230:	80 e0       	ldi	r24, 0x00	; 0
    1232:	90 e0       	ldi	r25, 0x00	; 0
    1234:	a0 e0       	ldi	r26, 0x00	; 0
    1236:	b1 ec       	ldi	r27, 0xC1	; 193
    1238:	80 93 19 06 	sts	0x0619, r24
    123c:	90 93 1a 06 	sts	0x061A, r25
    1240:	a0 93 1b 06 	sts	0x061B, r26
    1244:	b0 93 1c 06 	sts	0x061C, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    1248:	c3 01       	movw	r24, r6
    124a:	b2 01       	movw	r22, r4
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	40 e2       	ldi	r20, 0x20	; 32
    1252:	51 e4       	ldi	r21, 0x41	; 65
    1254:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__gesf2>
    1258:	18 16       	cp	r1, r24
    125a:	14 f0       	brlt	.+4      	; 0x1260 <moveWall+0x134>
    125c:	80 e0       	ldi	r24, 0x00	; 0
    125e:	0d c0       	rjmp	.+26     	; 0x127a <moveWall+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    1260:	80 e0       	ldi	r24, 0x00	; 0
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	a0 e0       	ldi	r26, 0x00	; 0
    1266:	b1 ec       	ldi	r27, 0xC1	; 193
    1268:	80 93 14 06 	sts	0x0614, r24
    126c:	90 93 15 06 	sts	0x0615, r25
    1270:	a0 93 16 06 	sts	0x0616, r26
    1274:	b0 93 17 06 	sts	0x0617, r27
    1278:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    127a:	33 20       	and	r3, r3
    127c:	21 f1       	breq	.+72     	; 0x12c6 <moveWall+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    127e:	88 23       	and	r24, r24
    1280:	29 f0       	breq	.+10     	; 0x128c <moveWall+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    1282:	60 e0       	ldi	r22, 0x00	; 0
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	8a e7       	ldi	r24, 0x7A	; 122
    1288:	94 e4       	ldi	r25, 0x44	; 68
    128a:	04 c0       	rjmp	.+8      	; 0x1294 <moveWall+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    128c:	60 e0       	ldi	r22, 0x00	; 0
    128e:	70 e0       	ldi	r23, 0x00	; 0
    1290:	8a e7       	ldi	r24, 0x7A	; 122
    1292:	94 ec       	ldi	r25, 0xC4	; 196
    1294:	a8 01       	movw	r20, r16
    1296:	97 01       	movw	r18, r14
    1298:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    129c:	20 91 14 06 	lds	r18, 0x0614
    12a0:	30 91 15 06 	lds	r19, 0x0615
    12a4:	40 91 16 06 	lds	r20, 0x0616
    12a8:	50 91 17 06 	lds	r21, 0x0617
    12ac:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    12b0:	9b 01       	movw	r18, r22
    12b2:	ac 01       	movw	r20, r24
    12b4:	60 91 19 06 	lds	r22, 0x0619
    12b8:	70 91 1a 06 	lds	r23, 0x061A
    12bc:	80 91 1b 06 	lds	r24, 0x061B
    12c0:	90 91 1c 06 	lds	r25, 0x061C
    12c4:	10 c0       	rjmp	.+32     	; 0x12e6 <moveWall+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    12c6:	60 91 19 06 	lds	r22, 0x0619
    12ca:	70 91 1a 06 	lds	r23, 0x061A
    12ce:	80 91 1b 06 	lds	r24, 0x061B
    12d2:	90 91 1c 06 	lds	r25, 0x061C
    12d6:	20 91 14 06 	lds	r18, 0x0614
    12da:	30 91 15 06 	lds	r19, 0x0615
    12de:	40 91 16 06 	lds	r20, 0x0616
    12e2:	50 91 17 06 	lds	r21, 0x0617
    12e6:	0e 94 49 2a 	call	0x5492	; 0x5492 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    12ea:	90 58       	subi	r25, 0x80	; 128
    12ec:	40 e0       	ldi	r20, 0x00	; 0
    12ee:	0e 94 d6 10 	call	0x21ac	; 0x21ac <pidController>
    12f2:	6b 01       	movw	r12, r22
    12f4:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    12f6:	0e 94 1a 2b 	call	0x5634	; 0x5634 <__fixsfsi>
    12fa:	8b 01       	movw	r16, r22
    12fc:	77 ff       	sbrs	r23, 7
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <moveWall+0x1da>
    1300:	10 95       	com	r17
    1302:	01 95       	neg	r16
    1304:	1f 4f       	sbci	r17, 0xFF	; 255
    1306:	05 36       	cpi	r16, 0x65	; 101
    1308:	11 05       	cpc	r17, r1
    130a:	fc f0       	brlt	.+62     	; 0x134a <moveWall+0x21e>
    130c:	c7 01       	movw	r24, r14
    130e:	b6 01       	movw	r22, r12
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	40 e0       	ldi	r20, 0x00	; 0
    1316:	50 e0       	ldi	r21, 0x00	; 0
    1318:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
    131c:	88 23       	and	r24, r24
    131e:	a9 f0       	breq	.+42     	; 0x134a <moveWall+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    1320:	b8 01       	movw	r22, r16
    1322:	88 27       	eor	r24, r24
    1324:	77 fd       	sbrc	r23, 7
    1326:	80 95       	com	r24
    1328:	98 2f       	mov	r25, r24
    132a:	0e 94 4d 2b 	call	0x569a	; 0x569a <__floatsisf>
    132e:	9b 01       	movw	r18, r22
    1330:	ac 01       	movw	r20, r24
    1332:	c7 01       	movw	r24, r14
    1334:	b6 01       	movw	r22, r12
    1336:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	48 ec       	ldi	r20, 0xC8	; 200
    1340:	52 e4       	ldi	r21, 0x42	; 66
    1342:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    1346:	6b 01       	movw	r12, r22
    1348:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    134a:	c7 01       	movw	r24, r14
    134c:	b6 01       	movw	r22, r12
    134e:	20 e0       	ldi	r18, 0x00	; 0
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	48 ec       	ldi	r20, 0xC8	; 200
    1354:	52 e4       	ldi	r21, 0x42	; 66
    1356:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    135a:	6b 01       	movw	r12, r22
    135c:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
    135e:	0e 94 ab 19 	call	0x3356	; 0x3356 <STEPPER_get_nSteps>
    1362:	60 93 0c 06 	sts	0x060C, r22
    1366:	70 93 0d 06 	sts	0x060D, r23
    136a:	80 93 0e 06 	sts	0x060E, r24
    136e:	90 93 0f 06 	sts	0x060F, r25
	odometryStepL += WALL_STEP - curr_step.left;
    1372:	80 91 a6 06 	lds	r24, 0x06A6
    1376:	8e 5c       	subi	r24, 0xCE	; 206
    1378:	86 1b       	sub	r24, r22
    137a:	80 93 a6 06 	sts	0x06A6, r24
	odometryStepR += WALL_STEP - curr_step.right;
    137e:	80 91 6c 04 	lds	r24, 0x046C
    1382:	8e 5c       	subi	r24, 0xCE	; 206
    1384:	90 91 0e 06 	lds	r25, 0x060E
    1388:	89 1b       	sub	r24, r25
    138a:	80 93 6c 04 	sts	0x046C, r24
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    138e:	8d b7       	in	r24, 0x3d	; 61
    1390:	9e b7       	in	r25, 0x3e	; 62
    1392:	09 97       	sbiw	r24, 0x09	; 9
    1394:	0f b6       	in	r0, 0x3f	; 63
    1396:	f8 94       	cli
    1398:	9e bf       	out	0x3e, r25	; 62
    139a:	0f be       	out	0x3f, r0	; 63
    139c:	8d bf       	out	0x3d, r24	; 61
    139e:	0d b7       	in	r16, 0x3d	; 61
    13a0:	1e b7       	in	r17, 0x3e	; 62
    13a2:	0f 5f       	subi	r16, 0xFF	; 255
    13a4:	1f 4f       	sbci	r17, 0xFF	; 255
    13a6:	c7 01       	movw	r24, r14
    13a8:	b6 01       	movw	r22, r12
    13aa:	20 e0       	ldi	r18, 0x00	; 0
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	48 ec       	ldi	r20, 0xC8	; 200
    13b0:	52 e4       	ldi	r21, 0x42	; 66
    13b2:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	48 ec       	ldi	r20, 0xC8	; 200
    13bc:	52 e4       	ldi	r21, 0x42	; 66
    13be:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    13c2:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    13c6:	4b 01       	movw	r8, r22
    13c8:	5c 01       	movw	r10, r24
    13ca:	82 e3       	ldi	r24, 0x32	; 50
    13cc:	90 e0       	ldi	r25, 0x00	; 0
    13ce:	f8 01       	movw	r30, r16
    13d0:	91 83       	std	Z+1, r25	; 0x01
    13d2:	80 83       	st	Z, r24
    13d4:	c7 01       	movw	r24, r14
    13d6:	b6 01       	movw	r22, r12
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	48 ec       	ldi	r20, 0xC8	; 200
    13de:	52 ec       	ldi	r21, 0xC2	; 194
    13e0:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    13e4:	20 e0       	ldi	r18, 0x00	; 0
    13e6:	30 e0       	ldi	r19, 0x00	; 0
    13e8:	48 ec       	ldi	r20, 0xC8	; 200
    13ea:	52 e4       	ldi	r21, 0x42	; 66
    13ec:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    13f0:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    13f4:	f8 01       	movw	r30, r16
    13f6:	73 83       	std	Z+3, r23	; 0x03
    13f8:	62 83       	std	Z+2, r22	; 0x02
    13fa:	82 ec       	ldi	r24, 0xC2	; 194
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	95 83       	std	Z+5, r25	; 0x05
    1400:	84 83       	std	Z+4, r24	; 0x04
    1402:	16 82       	std	Z+6, r1	; 0x06
    1404:	10 86       	std	Z+8, r1	; 0x08
    1406:	17 82       	std	Z+7, r1	; 0x07
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	62 e0       	ldi	r22, 0x02	; 2
    140c:	41 e0       	ldi	r20, 0x01	; 1
    140e:	22 e3       	ldi	r18, 0x32	; 50
    1410:	30 e0       	ldi	r19, 0x00	; 0
    1412:	84 01       	movw	r16, r8
    1414:	a2 ec       	ldi	r26, 0xC2	; 194
    1416:	ea 2e       	mov	r14, r26
    1418:	a1 e0       	ldi	r26, 0x01	; 1
    141a:	fa 2e       	mov	r15, r26
    141c:	cc 24       	eor	r12, r12
    141e:	aa 24       	eor	r10, r10
    1420:	bb 24       	eor	r11, r11
    1422:	88 24       	eor	r8, r8
    1424:	83 94       	inc	r8
    1426:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <STEPPER_move>
    142a:	8d b7       	in	r24, 0x3d	; 61
    142c:	9e b7       	in	r25, 0x3e	; 62
    142e:	09 96       	adiw	r24, 0x09	; 9
    1430:	0f b6       	in	r0, 0x3f	; 63
    1432:	f8 94       	cli
    1434:	9e bf       	out	0x3e, r25	; 62
    1436:	0f be       	out	0x3f, r0	; 63
    1438:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    143a:	82 2d       	mov	r24, r2
    143c:	1f 91       	pop	r17
    143e:	0f 91       	pop	r16
    1440:	ff 90       	pop	r15
    1442:	ef 90       	pop	r14
    1444:	df 90       	pop	r13
    1446:	cf 90       	pop	r12
    1448:	bf 90       	pop	r11
    144a:	af 90       	pop	r10
    144c:	9f 90       	pop	r9
    144e:	8f 90       	pop	r8
    1450:	7f 90       	pop	r7
    1452:	6f 90       	pop	r6
    1454:	5f 90       	pop	r5
    1456:	4f 90       	pop	r4
    1458:	3f 90       	pop	r3
    145a:	2f 90       	pop	r2
    145c:	08 95       	ret

0000145e <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    145e:	8f 92       	push	r8
    1460:	af 92       	push	r10
    1462:	bf 92       	push	r11
    1464:	cf 92       	push	r12
    1466:	df 92       	push	r13
    1468:	ef 92       	push	r14
    146a:	ff 92       	push	r15
    146c:	0f 93       	push	r16
    146e:	1f 93       	push	r17
	LCD_clear();
    1470:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    1474:	e0 91 ef 04 	lds	r30, 0x04EF
    1478:	f0 e0       	ldi	r31, 0x00	; 0
    147a:	e2 59       	subi	r30, 0x92	; 146
    147c:	fa 4f       	sbci	r31, 0xFA	; 250
    147e:	e0 81       	ld	r30, Z
    1480:	e0 93 6b 04 	sts	0x046B, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	e1 30       	cpi	r30, 0x01	; 1
    1488:	09 f4       	brne	.+2      	; 0x148c <moveWorld+0x2e>
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	e3 30       	cpi	r30, 0x03	; 3
    1490:	09 f4       	brne	.+2      	; 0x1494 <moveWorld+0x36>
    1492:	91 e0       	ldi	r25, 0x01	; 1
    1494:	89 2b       	or	r24, r25
    1496:	28 2f       	mov	r18, r24
    1498:	30 e0       	ldi	r19, 0x00	; 0
    149a:	40 e0       	ldi	r20, 0x00	; 0
    149c:	50 e0       	ldi	r21, 0x00	; 0
    149e:	80 91 6d 04 	lds	r24, 0x046D
    14a2:	82 30       	cpi	r24, 0x02	; 2
    14a4:	11 f4       	brne	.+4      	; 0x14aa <moveWorld+0x4c>
    14a6:	41 e0       	ldi	r20, 0x01	; 1
    14a8:	50 e0       	ldi	r21, 0x00	; 0
    14aa:	24 23       	and	r18, r20
    14ac:	35 23       	and	r19, r21
    14ae:	23 2b       	or	r18, r19
    14b0:	b9 f0       	breq	.+46     	; 0x14e0 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    14b2:	60 e0       	ldi	r22, 0x00	; 0
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	9f e4       	ldi	r25, 0x4F	; 79
    14ba:	2d eb       	ldi	r18, 0xBD	; 189
    14bc:	34 e7       	ldi	r19, 0x74	; 116
    14be:	4b ed       	ldi	r20, 0xDB	; 219
    14c0:	51 e4       	ldi	r21, 0x41	; 65
    14c2:	0f 2e       	mov	r0, r31
    14c4:	f0 e0       	ldi	r31, 0x00	; 0
    14c6:	ef 2e       	mov	r14, r31
    14c8:	f0 e0       	ldi	r31, 0x00	; 0
    14ca:	ff 2e       	mov	r15, r31
    14cc:	f0 e2       	ldi	r31, 0x20	; 32
    14ce:	0f 2f       	mov	r16, r31
    14d0:	f1 e4       	ldi	r31, 0x41	; 65
    14d2:	1f 2f       	mov	r17, r31
    14d4:	f0 2d       	mov	r31, r0
    14d6:	57 01       	movw	r10, r14
    14d8:	68 01       	movw	r12, r16
    14da:	88 24       	eor	r8, r8
    14dc:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    14e0:	20 91 6d 04 	lds	r18, 0x046D
    14e4:	80 e0       	ldi	r24, 0x00	; 0
    14e6:	21 30       	cpi	r18, 0x01	; 1
    14e8:	09 f4       	brne	.+2      	; 0x14ec <moveWorld+0x8e>
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	23 30       	cpi	r18, 0x03	; 3
    14f0:	09 f4       	brne	.+2      	; 0x14f4 <moveWorld+0x96>
    14f2:	91 e0       	ldi	r25, 0x01	; 1
    14f4:	89 2b       	or	r24, r25
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	40 e0       	ldi	r20, 0x00	; 0
    14fc:	50 e0       	ldi	r21, 0x00	; 0
    14fe:	80 91 6b 04 	lds	r24, 0x046B
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	11 f4       	brne	.+4      	; 0x150a <moveWorld+0xac>
    1506:	41 e0       	ldi	r20, 0x01	; 1
    1508:	50 e0       	ldi	r21, 0x00	; 0
    150a:	24 23       	and	r18, r20
    150c:	35 23       	and	r19, r21
    150e:	23 2b       	or	r18, r19
    1510:	b9 f0       	breq	.+46     	; 0x1540 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    1512:	60 e0       	ldi	r22, 0x00	; 0
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	80 e0       	ldi	r24, 0x00	; 0
    1518:	9f e4       	ldi	r25, 0x4F	; 79
    151a:	2d eb       	ldi	r18, 0xBD	; 189
    151c:	34 e7       	ldi	r19, 0x74	; 116
    151e:	4b ed       	ldi	r20, 0xDB	; 219
    1520:	51 e4       	ldi	r21, 0x41	; 65
    1522:	0f 2e       	mov	r0, r31
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	ef 2e       	mov	r14, r31
    1528:	f0 e0       	ldi	r31, 0x00	; 0
    152a:	ff 2e       	mov	r15, r31
    152c:	f0 e2       	ldi	r31, 0x20	; 32
    152e:	0f 2f       	mov	r16, r31
    1530:	f1 e4       	ldi	r31, 0x41	; 65
    1532:	1f 2f       	mov	r17, r31
    1534:	f0 2d       	mov	r31, r0
    1536:	57 01       	movw	r10, r14
    1538:	68 01       	movw	r12, r16
    153a:	88 24       	eor	r8, r8
    153c:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <move_arc_stwt>
	}
	
	switch(currentMove){
    1540:	80 91 6b 04 	lds	r24, 0x046B
    1544:	82 30       	cpi	r24, 0x02	; 2
    1546:	c1 f1       	breq	.+112    	; 0x15b8 <moveWorld+0x15a>
    1548:	83 30       	cpi	r24, 0x03	; 3
    154a:	09 f4       	brne	.+2      	; 0x154e <moveWorld+0xf0>
    154c:	61 c0       	rjmp	.+194    	; 0x1610 <moveWorld+0x1b2>
    154e:	81 30       	cpi	r24, 0x01	; 1
    1550:	09 f0       	breq	.+2      	; 0x1554 <moveWorld+0xf6>
    1552:	9f c0       	rjmp	.+318    	; 0x1692 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1554:	8d b7       	in	r24, 0x3d	; 61
    1556:	9e b7       	in	r25, 0x3e	; 62
    1558:	08 97       	sbiw	r24, 0x08	; 8
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	9e bf       	out	0x3e, r25	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	8d bf       	out	0x3d, r24	; 61
    1564:	ed b7       	in	r30, 0x3d	; 61
    1566:	fe b7       	in	r31, 0x3e	; 62
    1568:	31 96       	adiw	r30, 0x01	; 1
    156a:	84 e2       	ldi	r24, 0x24	; 36
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	ad b7       	in	r26, 0x3d	; 61
    1570:	be b7       	in	r27, 0x3e	; 62
    1572:	12 96       	adiw	r26, 0x02	; 2
    1574:	9c 93       	st	X, r25
    1576:	8e 93       	st	-X, r24
    1578:	11 97       	sbiw	r26, 0x01	; 1
    157a:	80 91 ef 04 	lds	r24, 0x04EF
    157e:	82 83       	std	Z+2, r24	; 0x02
    1580:	13 82       	std	Z+3, r1	; 0x03
    1582:	80 91 ee 04 	lds	r24, 0x04EE
    1586:	84 83       	std	Z+4, r24	; 0x04
    1588:	15 82       	std	Z+5, r1	; 0x05
    158a:	80 91 f4 04 	lds	r24, 0x04F4
    158e:	86 83       	std	Z+6, r24	; 0x06
    1590:	17 82       	std	Z+7, r1	; 0x07
    1592:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1596:	ed b7       	in	r30, 0x3d	; 61
    1598:	fe b7       	in	r31, 0x3e	; 62
    159a:	38 96       	adiw	r30, 0x08	; 8
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	fe bf       	out	0x3e, r31	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	ed bf       	out	0x3d, r30	; 61
    15a6:	60 e0       	ldi	r22, 0x00	; 0
    15a8:	70 e0       	ldi	r23, 0x00	; 0
    15aa:	80 e0       	ldi	r24, 0x00	; 0
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	44 e8       	ldi	r20, 0x84	; 132
    15b4:	51 ec       	ldi	r21, 0xC1	; 193
    15b6:	5d c0       	rjmp	.+186    	; 0x1672 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    15b8:	8d b7       	in	r24, 0x3d	; 61
    15ba:	9e b7       	in	r25, 0x3e	; 62
    15bc:	08 97       	sbiw	r24, 0x08	; 8
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	9e bf       	out	0x3e, r25	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	8d bf       	out	0x3d, r24	; 61
    15c8:	ed b7       	in	r30, 0x3d	; 61
    15ca:	fe b7       	in	r31, 0x3e	; 62
    15cc:	31 96       	adiw	r30, 0x01	; 1
    15ce:	8f e4       	ldi	r24, 0x4F	; 79
    15d0:	91 e0       	ldi	r25, 0x01	; 1
    15d2:	ad b7       	in	r26, 0x3d	; 61
    15d4:	be b7       	in	r27, 0x3e	; 62
    15d6:	12 96       	adiw	r26, 0x02	; 2
    15d8:	9c 93       	st	X, r25
    15da:	8e 93       	st	-X, r24
    15dc:	11 97       	sbiw	r26, 0x01	; 1
    15de:	80 91 ef 04 	lds	r24, 0x04EF
    15e2:	82 83       	std	Z+2, r24	; 0x02
    15e4:	13 82       	std	Z+3, r1	; 0x03
    15e6:	80 91 ee 04 	lds	r24, 0x04EE
    15ea:	84 83       	std	Z+4, r24	; 0x04
    15ec:	15 82       	std	Z+5, r1	; 0x05
    15ee:	80 91 f4 04 	lds	r24, 0x04F4
    15f2:	86 83       	std	Z+6, r24	; 0x06
    15f4:	17 82       	std	Z+7, r1	; 0x07
    15f6:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    15fa:	ed b7       	in	r30, 0x3d	; 61
    15fc:	fe b7       	in	r31, 0x3e	; 62
    15fe:	38 96       	adiw	r30, 0x08	; 8
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	f8 94       	cli
    1604:	fe bf       	out	0x3e, r31	; 62
    1606:	0f be       	out	0x3f, r0	; 63
    1608:	ed bf       	out	0x3d, r30	; 61
    160a:	0e 94 96 08 	call	0x112c	; 0x112c <moveWall>
    160e:	53 c0       	rjmp	.+166    	; 0x16b6 <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1610:	8d b7       	in	r24, 0x3d	; 61
    1612:	9e b7       	in	r25, 0x3e	; 62
    1614:	08 97       	sbiw	r24, 0x08	; 8
    1616:	0f b6       	in	r0, 0x3f	; 63
    1618:	f8 94       	cli
    161a:	9e bf       	out	0x3e, r25	; 62
    161c:	0f be       	out	0x3f, r0	; 63
    161e:	8d bf       	out	0x3d, r24	; 61
    1620:	ed b7       	in	r30, 0x3d	; 61
    1622:	fe b7       	in	r31, 0x3e	; 62
    1624:	31 96       	adiw	r30, 0x01	; 1
    1626:	8d e7       	ldi	r24, 0x7D	; 125
    1628:	91 e0       	ldi	r25, 0x01	; 1
    162a:	ad b7       	in	r26, 0x3d	; 61
    162c:	be b7       	in	r27, 0x3e	; 62
    162e:	12 96       	adiw	r26, 0x02	; 2
    1630:	9c 93       	st	X, r25
    1632:	8e 93       	st	-X, r24
    1634:	11 97       	sbiw	r26, 0x01	; 1
    1636:	80 91 ef 04 	lds	r24, 0x04EF
    163a:	82 83       	std	Z+2, r24	; 0x02
    163c:	13 82       	std	Z+3, r1	; 0x03
    163e:	80 91 ee 04 	lds	r24, 0x04EE
    1642:	84 83       	std	Z+4, r24	; 0x04
    1644:	15 82       	std	Z+5, r1	; 0x05
    1646:	80 91 f4 04 	lds	r24, 0x04F4
    164a:	86 83       	std	Z+6, r24	; 0x06
    164c:	17 82       	std	Z+7, r1	; 0x07
    164e:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1652:	ed b7       	in	r30, 0x3d	; 61
    1654:	fe b7       	in	r31, 0x3e	; 62
    1656:	38 96       	adiw	r30, 0x08	; 8
    1658:	0f b6       	in	r0, 0x3f	; 63
    165a:	f8 94       	cli
    165c:	fe bf       	out	0x3e, r31	; 62
    165e:	0f be       	out	0x3f, r0	; 63
    1660:	ed bf       	out	0x3d, r30	; 61
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	70 e0       	ldi	r23, 0x00	; 0
    1666:	80 e0       	ldi	r24, 0x00	; 0
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	20 e0       	ldi	r18, 0x00	; 0
    166c:	30 e0       	ldi	r19, 0x00	; 0
    166e:	44 e8       	ldi	r20, 0x84	; 132
    1670:	51 e4       	ldi	r21, 0x41	; 65
    1672:	0f 2e       	mov	r0, r31
    1674:	f0 e0       	ldi	r31, 0x00	; 0
    1676:	ef 2e       	mov	r14, r31
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	ff 2e       	mov	r15, r31
    167c:	f0 e2       	ldi	r31, 0x20	; 32
    167e:	0f 2f       	mov	r16, r31
    1680:	f1 e4       	ldi	r31, 0x41	; 65
    1682:	1f 2f       	mov	r17, r31
    1684:	f0 2d       	mov	r31, r0
    1686:	57 01       	movw	r10, r14
    1688:	68 01       	movw	r12, r16
    168a:	88 24       	eor	r8, r8
    168c:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <move_arc_stwt>
    1690:	12 c0       	rjmp	.+36     	; 0x16b6 <moveWorld+0x258>
			break;
		default:
			LCD_printf("What?!");
    1692:	00 d0       	rcall	.+0      	; 0x1694 <moveWorld+0x236>
    1694:	89 ea       	ldi	r24, 0xA9	; 169
    1696:	91 e0       	ldi	r25, 0x01	; 1
    1698:	ad b7       	in	r26, 0x3d	; 61
    169a:	be b7       	in	r27, 0x3e	; 62
    169c:	12 96       	adiw	r26, 0x02	; 2
    169e:	9c 93       	st	X, r25
    16a0:	8e 93       	st	-X, r24
    16a2:	11 97       	sbiw	r26, 0x01	; 1
    16a4:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    16a8:	0f 90       	pop	r0
    16aa:	0f 90       	pop	r0
    16ac:	82 e0       	ldi	r24, 0x02	; 2
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	0e 94 82 1c 	call	0x3904	; 0x3904 <STEPPER_stop>
    16b4:	ff cf       	rjmp	.-2      	; 0x16b4 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    16b6:	80 91 6b 04 	lds	r24, 0x046B
    16ba:	80 93 6d 04 	sts	0x046D, r24
	return 1;
}
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	1f 91       	pop	r17
    16c2:	0f 91       	pop	r16
    16c4:	ff 90       	pop	r15
    16c6:	ef 90       	pop	r14
    16c8:	df 90       	pop	r13
    16ca:	cf 90       	pop	r12
    16cc:	bf 90       	pop	r11
    16ce:	af 90       	pop	r10
    16d0:	8f 90       	pop	r8
    16d2:	08 95       	ret

000016d4 <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    16d4:	0e 94 2f 0a 	call	0x145e	; 0x145e <moveWorld>
    16d8:	88 23       	and	r24, r24
    16da:	69 f0       	breq	.+26     	; 0x16f6 <moveBehavior+0x22>
		Ierror = 0;
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a0 e0       	ldi	r26, 0x00	; 0
    16e2:	b0 e0       	ldi	r27, 0x00	; 0
    16e4:	80 93 ea 04 	sts	0x04EA, r24
    16e8:	90 93 eb 04 	sts	0x04EB, r25
    16ec:	a0 93 ec 04 	sts	0x04EC, r26
    16f0:	b0 93 ed 04 	sts	0x04ED, r27
    16f4:	81 e0       	ldi	r24, 0x01	; 1
		return 1; 
	}
	return 0;	
}
    16f6:	08 95       	ret

000016f8 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	ff 24       	eor	r15, r15
    1704:	f3 94       	inc	r15
    1706:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1708:	c0 eb       	ldi	r28, 0xB0	; 176
    170a:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    170c:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    1710:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	21 f0       	breq	.+8      	; 0x171e <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1716:	82 30       	cpi	r24, 0x02	; 2
    1718:	11 f0       	breq	.+4      	; 0x171e <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    171a:	83 30       	cpi	r24, 0x03	; 3
    171c:	39 f4       	brne	.+14     	; 0x172c <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    171e:	e1 2f       	mov	r30, r17
    1720:	f0 e0       	ldi	r31, 0x00	; 0
    1722:	e2 59       	subi	r30, 0x92	; 146
    1724:	fa 4f       	sbci	r31, 0xFA	; 250
    1726:	00 83       	st	Z, r16
			i++;
    1728:	1f 5f       	subi	r17, 0xFF	; 255
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <movesInput+0x38>
		}

		if (btnHolder != 0){
    172c:	88 23       	and	r24, r24
    172e:	21 f1       	breq	.+72     	; 0x1778 <movesInput+0x80>
			LCD_clear();
    1730:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1734:	8d b7       	in	r24, 0x3d	; 61
    1736:	9e b7       	in	r25, 0x3e	; 62
    1738:	08 97       	sbiw	r24, 0x08	; 8
    173a:	0f b6       	in	r0, 0x3f	; 63
    173c:	f8 94       	cli
    173e:	9e bf       	out	0x3e, r25	; 62
    1740:	0f be       	out	0x3f, r0	; 63
    1742:	8d bf       	out	0x3d, r24	; 61
    1744:	ed b7       	in	r30, 0x3d	; 61
    1746:	fe b7       	in	r31, 0x3e	; 62
    1748:	31 96       	adiw	r30, 0x01	; 1
    174a:	ad b7       	in	r26, 0x3d	; 61
    174c:	be b7       	in	r27, 0x3e	; 62
    174e:	12 96       	adiw	r26, 0x02	; 2
    1750:	dc 93       	st	X, r29
    1752:	ce 93       	st	-X, r28
    1754:	11 97       	sbiw	r26, 0x01	; 1
    1756:	f2 82       	std	Z+2, r15	; 0x02
    1758:	13 82       	std	Z+3, r1	; 0x03
    175a:	04 83       	std	Z+4, r16	; 0x04
    175c:	15 82       	std	Z+5, r1	; 0x05
    175e:	16 83       	std	Z+6, r17	; 0x06
    1760:	17 82       	std	Z+7, r1	; 0x07
    1762:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
    1766:	f0 2e       	mov	r15, r16
    1768:	8d b7       	in	r24, 0x3d	; 61
    176a:	9e b7       	in	r25, 0x3e	; 62
    176c:	08 96       	adiw	r24, 0x08	; 8
    176e:	0f b6       	in	r0, 0x3f	; 63
    1770:	f8 94       	cli
    1772:	9e bf       	out	0x3e, r25	; 62
    1774:	0f be       	out	0x3f, r0	; 63
    1776:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1778:	84 ef       	ldi	r24, 0xF4	; 244
    177a:	91 e0       	ldi	r25, 0x01	; 1
    177c:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    1780:	1b 30       	cpi	r17, 0x0B	; 11
    1782:	20 f2       	brcs	.-120    	; 0x170c <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    1784:	1f 5f       	subi	r17, 0xFF	; 255
    1786:	e1 2f       	mov	r30, r17
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	e2 59       	subi	r30, 0x92	; 146
    178c:	fa 4f       	sbci	r31, 0xFA	; 250
    178e:	84 e0       	ldi	r24, 0x04	; 4
    1790:	80 83       	st	Z, r24
}
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	08 95       	ret

0000179e <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    179e:	1f 93       	push	r17
    17a0:	cf 93       	push	r28
    17a2:	df 93       	push	r29
    17a4:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    17a6:	c1 ee       	ldi	r28, 0xE1	; 225
    17a8:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    17aa:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    17ae:	81 30       	cpi	r24, 0x01	; 1
    17b0:	21 f4       	brne	.+8      	; 0x17ba <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    17b2:	80 91 10 06 	lds	r24, 0x0610
    17b6:	88 0f       	add	r24, r24
    17b8:	06 c0       	rjmp	.+12     	; 0x17c6 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    17ba:	82 30       	cpi	r24, 0x02	; 2
    17bc:	39 f4       	brne	.+14     	; 0x17cc <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    17be:	80 91 10 06 	lds	r24, 0x0610
    17c2:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    17c4:	8f 5f       	subi	r24, 0xFF	; 255
    17c6:	80 93 10 06 	sts	0x0610, r24
			i++;
    17ca:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    17cc:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    17d0:	00 d0       	rcall	.+0      	; 0x17d2 <worldInput+0x34>
    17d2:	00 d0       	rcall	.+0      	; 0x17d4 <worldInput+0x36>
    17d4:	00 d0       	rcall	.+0      	; 0x17d6 <worldInput+0x38>
    17d6:	ed b7       	in	r30, 0x3d	; 61
    17d8:	fe b7       	in	r31, 0x3e	; 62
    17da:	31 96       	adiw	r30, 0x01	; 1
    17dc:	ad b7       	in	r26, 0x3d	; 61
    17de:	be b7       	in	r27, 0x3e	; 62
    17e0:	12 96       	adiw	r26, 0x02	; 2
    17e2:	dc 93       	st	X, r29
    17e4:	ce 93       	st	-X, r28
    17e6:	11 97       	sbiw	r26, 0x01	; 1
    17e8:	80 91 10 06 	lds	r24, 0x0610
    17ec:	82 83       	std	Z+2, r24	; 0x02
    17ee:	13 82       	std	Z+3, r1	; 0x03
    17f0:	14 83       	std	Z+4, r17	; 0x04
    17f2:	15 82       	std	Z+5, r1	; 0x05
    17f4:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
		// }
		currentCellWorldStart = currentCellWorld;
    17f8:	80 91 10 06 	lds	r24, 0x0610
    17fc:	80 93 11 06 	sts	0x0611, r24
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1800:	8d b7       	in	r24, 0x3d	; 61
    1802:	9e b7       	in	r25, 0x3e	; 62
    1804:	06 96       	adiw	r24, 0x06	; 6
    1806:	0f b6       	in	r0, 0x3f	; 63
    1808:	f8 94       	cli
    180a:	9e bf       	out	0x3e, r25	; 62
    180c:	0f be       	out	0x3f, r0	; 63
    180e:	8d bf       	out	0x3d, r24	; 61
    1810:	84 ef       	ldi	r24, 0xF4	; 244
    1812:	91 e0       	ldi	r25, 0x01	; 1
    1814:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    1818:	14 30       	cpi	r17, 0x04	; 4
    181a:	38 f2       	brcs	.-114    	; 0x17aa <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		currentCellWorldStart = currentCellWorld;
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
}
    181c:	df 91       	pop	r29
    181e:	cf 91       	pop	r28
    1820:	1f 91       	pop	r17
    1822:	08 95       	ret

00001824 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    1824:	1f 93       	push	r17
    1826:	cf 93       	push	r28
    1828:	df 93       	push	r29
    182a:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    182c:	c9 e0       	ldi	r28, 0x09	; 9
    182e:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    1830:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    1834:	81 30       	cpi	r24, 0x01	; 1
    1836:	21 f4       	brne	.+8      	; 0x1840 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    1838:	80 91 8f 05 	lds	r24, 0x058F
    183c:	88 0f       	add	r24, r24
    183e:	06 c0       	rjmp	.+12     	; 0x184c <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1840:	82 30       	cpi	r24, 0x02	; 2
    1842:	41 f4       	brne	.+16     	; 0x1854 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    1844:	80 91 8f 05 	lds	r24, 0x058F
    1848:	88 0f       	add	r24, r24
			currentOrientation += 1;
    184a:	8f 5f       	subi	r24, 0xFF	; 255
    184c:	80 93 8f 05 	sts	0x058F, r24
			i++;
    1850:	1f 5f       	subi	r17, 0xFF	; 255
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    1854:	88 23       	and	r24, r24
    1856:	f1 f0       	breq	.+60     	; 0x1894 <orientationInput+0x70>
			LCD_clear();
    1858:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    185c:	00 d0       	rcall	.+0      	; 0x185e <orientationInput+0x3a>
    185e:	00 d0       	rcall	.+0      	; 0x1860 <orientationInput+0x3c>
    1860:	00 d0       	rcall	.+0      	; 0x1862 <orientationInput+0x3e>
    1862:	ed b7       	in	r30, 0x3d	; 61
    1864:	fe b7       	in	r31, 0x3e	; 62
    1866:	31 96       	adiw	r30, 0x01	; 1
    1868:	ad b7       	in	r26, 0x3d	; 61
    186a:	be b7       	in	r27, 0x3e	; 62
    186c:	12 96       	adiw	r26, 0x02	; 2
    186e:	dc 93       	st	X, r29
    1870:	ce 93       	st	-X, r28
    1872:	11 97       	sbiw	r26, 0x01	; 1
    1874:	80 91 8f 05 	lds	r24, 0x058F
    1878:	82 83       	std	Z+2, r24	; 0x02
    187a:	13 82       	std	Z+3, r1	; 0x03
    187c:	14 83       	std	Z+4, r17	; 0x04
    187e:	15 82       	std	Z+5, r1	; 0x05
    1880:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
    1884:	8d b7       	in	r24, 0x3d	; 61
    1886:	9e b7       	in	r25, 0x3e	; 62
    1888:	06 96       	adiw	r24, 0x06	; 6
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	f8 94       	cli
    188e:	9e bf       	out	0x3e, r25	; 62
    1890:	0f be       	out	0x3f, r0	; 63
    1892:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1894:	84 ef       	ldi	r24, 0xF4	; 244
    1896:	91 e0       	ldi	r25, 0x01	; 1
    1898:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    189c:	12 30       	cpi	r17, 0x02	; 2
    189e:	40 f2       	brcs	.-112    	; 0x1830 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    18a0:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	switch(currentOrientation){
    18a4:	80 91 8f 05 	lds	r24, 0x058F
    18a8:	81 30       	cpi	r24, 0x01	; 1
    18aa:	51 f0       	breq	.+20     	; 0x18c0 <orientationInput+0x9c>
    18ac:	81 30       	cpi	r24, 0x01	; 1
    18ae:	28 f0       	brcs	.+10     	; 0x18ba <orientationInput+0x96>
    18b0:	82 30       	cpi	r24, 0x02	; 2
    18b2:	49 f0       	breq	.+18     	; 0x18c6 <orientationInput+0xa2>
    18b4:	83 30       	cpi	r24, 0x03	; 3
    18b6:	71 f4       	brne	.+28     	; 0x18d4 <orientationInput+0xb0>
    18b8:	09 c0       	rjmp	.+18     	; 0x18cc <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    18ba:	88 e3       	ldi	r24, 0x38	; 56
    18bc:	92 e0       	ldi	r25, 0x02	; 2
    18be:	08 c0       	rjmp	.+16     	; 0x18d0 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    18c0:	8a e5       	ldi	r24, 0x5A	; 90
    18c2:	92 e0       	ldi	r25, 0x02	; 2
    18c4:	05 c0       	rjmp	.+10     	; 0x18d0 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    18c6:	8b e7       	ldi	r24, 0x7B	; 123
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	02 c0       	rjmp	.+4      	; 0x18d0 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    18cc:	8d e9       	ldi	r24, 0x9D	; 157
    18ce:	92 e0       	ldi	r25, 0x02	; 2
    18d0:	0e 94 94 34 	call	0x6928	; 0x6928 <puts>
			break;
		default:
			break;
	}
	TMRSRVC_delay(500);	//wait 0.5 seconds
    18d4:	84 ef       	ldi	r24, 0xF4	; 244
    18d6:	91 e0       	ldi	r25, 0x01	; 1
    18d8:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
}
    18dc:	df 91       	pop	r29
    18de:	cf 91       	pop	r28
    18e0:	1f 91       	pop	r17
    18e2:	08 95       	ret

000018e4 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    18e4:	cf 92       	push	r12
    18e6:	df 92       	push	r13
    18e8:	ef 92       	push	r14
    18ea:	ff 92       	push	r15
    18ec:	0f 93       	push	r16
    18ee:	1f 93       	push	r17
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	0f 92       	push	r0
    18f6:	cd b7       	in	r28, 0x3d	; 61
    18f8:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    18fa:	80 91 10 06 	lds	r24, 0x0610
    18fe:	f8 2e       	mov	r15, r24
    1900:	f6 94       	lsr	r15
    1902:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    1904:	98 2f       	mov	r25, r24
    1906:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    1908:	00 91 8f 05 	lds	r16, 0x058F
    190c:	cc 24       	eor	r12, r12
    190e:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    1910:	f6 01       	movw	r30, r12
    1912:	e2 59       	subi	r30, 0x92	; 146
    1914:	fa 4f       	sbci	r31, 0xFA	; 250
    1916:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    1918:	ef 2d       	mov	r30, r15
    191a:	f0 e0       	ldi	r31, 0x00	; 0
    191c:	ee 0f       	add	r30, r30
    191e:	ff 1f       	adc	r31, r31
    1920:	ee 0f       	add	r30, r30
    1922:	ff 1f       	adc	r31, r31
    1924:	e9 0f       	add	r30, r25
    1926:	f1 1d       	adc	r31, r1
    1928:	e2 58       	subi	r30, 0x82	; 130
    192a:	fa 4f       	sbci	r31, 0xFA	; 250
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    192c:	80 81       	ld	r24, Z
    192e:	60 2f       	mov	r22, r16
    1930:	41 e0       	ldi	r20, 0x01	; 1
    1932:	99 83       	std	Y+1, r25	; 0x01
    1934:	0e 94 35 11 	call	0x226a	; 0x226a <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    1938:	f6 01       	movw	r30, r12
    193a:	eb 56       	subi	r30, 0x6B	; 107
    193c:	f9 4f       	sbci	r31, 0xF9	; 249
    193e:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    1940:	99 81       	ldd	r25, Y+1	; 0x01
    1942:	12 30       	cpi	r17, 0x02	; 2
    1944:	89 f4       	brne	.+34     	; 0x1968 <getGateways+0x84>
			switch(curOrient){
    1946:	01 30       	cpi	r16, 0x01	; 1
    1948:	49 f0       	breq	.+18     	; 0x195c <getGateways+0x78>
    194a:	01 30       	cpi	r16, 0x01	; 1
    194c:	28 f0       	brcs	.+10     	; 0x1958 <getGateways+0x74>
    194e:	02 30       	cpi	r16, 0x02	; 2
    1950:	39 f0       	breq	.+14     	; 0x1960 <getGateways+0x7c>
    1952:	03 30       	cpi	r16, 0x03	; 3
    1954:	89 f4       	brne	.+34     	; 0x1978 <getGateways+0x94>
    1956:	06 c0       	rjmp	.+12     	; 0x1964 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    1958:	fa 94       	dec	r15
    195a:	0e c0       	rjmp	.+28     	; 0x1978 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    195c:	9f 5f       	subi	r25, 0xFF	; 255
    195e:	0c c0       	rjmp	.+24     	; 0x1978 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    1960:	f3 94       	inc	r15
    1962:	0a c0       	rjmp	.+20     	; 0x1978 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    1964:	91 50       	subi	r25, 0x01	; 1
    1966:	08 c0       	rjmp	.+16     	; 0x1978 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    1968:	13 30       	cpi	r17, 0x03	; 3
    196a:	11 f4       	brne	.+4      	; 0x1970 <getGateways+0x8c>
			curOrient++;
    196c:	0f 5f       	subi	r16, 0xFF	; 255
    196e:	03 c0       	rjmp	.+6      	; 0x1976 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    1970:	11 30       	cpi	r17, 0x01	; 1
    1972:	11 f4       	brne	.+4      	; 0x1978 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    1974:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    1976:	03 70       	andi	r16, 0x03	; 3
    1978:	08 94       	sec
    197a:	c1 1c       	adc	r12, r1
    197c:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    197e:	8d e0       	ldi	r24, 0x0D	; 13
    1980:	c8 16       	cp	r12, r24
    1982:	d1 04       	cpc	r13, r1
    1984:	29 f6       	brne	.-118    	; 0x1910 <getGateways+0x2c>
    1986:	cc 24       	eor	r12, r12
    1988:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    198a:	ee eb       	ldi	r30, 0xBE	; 190
    198c:	ee 2e       	mov	r14, r30
    198e:	e2 e0       	ldi	r30, 0x02	; 2
    1990:	fe 2e       	mov	r15, r30
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    1992:	f6 01       	movw	r30, r12
    1994:	eb 56       	subi	r30, 0x6B	; 107
    1996:	f9 4f       	sbci	r31, 0xF9	; 249
    1998:	00 81       	ld	r16, Z
		LCD_clear();
    199a:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    199e:	20 2f       	mov	r18, r16
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	ad b7       	in	r26, 0x3d	; 61
    19a4:	be b7       	in	r27, 0x3e	; 62
    19a6:	54 97       	sbiw	r26, 0x14	; 20
    19a8:	0f b6       	in	r0, 0x3f	; 63
    19aa:	f8 94       	cli
    19ac:	be bf       	out	0x3e, r27	; 62
    19ae:	0f be       	out	0x3f, r0	; 63
    19b0:	ad bf       	out	0x3d, r26	; 61
    19b2:	ed b7       	in	r30, 0x3d	; 61
    19b4:	fe b7       	in	r31, 0x3e	; 62
    19b6:	31 96       	adiw	r30, 0x01	; 1
    19b8:	12 96       	adiw	r26, 0x02	; 2
    19ba:	fc 92       	st	X, r15
    19bc:	ee 92       	st	-X, r14
    19be:	11 97       	sbiw	r26, 0x01	; 1
    19c0:	d3 82       	std	Z+3, r13	; 0x03
    19c2:	c2 82       	std	Z+2, r12	; 0x02
    19c4:	11 27       	eor	r17, r17
    19c6:	07 fd       	sbrc	r16, 7
    19c8:	10 95       	com	r17
    19ca:	00 27       	eor	r16, r16
    19cc:	11 0f       	add	r17, r17
    19ce:	00 1f       	adc	r16, r16
    19d0:	11 27       	eor	r17, r17
    19d2:	15 83       	std	Z+5, r17	; 0x05
    19d4:	04 83       	std	Z+4, r16	; 0x04
    19d6:	c9 01       	movw	r24, r18
    19d8:	66 e0       	ldi	r22, 0x06	; 6
    19da:	96 95       	lsr	r25
    19dc:	87 95       	ror	r24
    19de:	6a 95       	dec	r22
    19e0:	e1 f7       	brne	.-8      	; 0x19da <getGateways+0xf6>
    19e2:	81 70       	andi	r24, 0x01	; 1
    19e4:	90 70       	andi	r25, 0x00	; 0
    19e6:	97 83       	std	Z+7, r25	; 0x07
    19e8:	86 83       	std	Z+6, r24	; 0x06
    19ea:	c9 01       	movw	r24, r18
    19ec:	55 e0       	ldi	r21, 0x05	; 5
    19ee:	96 95       	lsr	r25
    19f0:	87 95       	ror	r24
    19f2:	5a 95       	dec	r21
    19f4:	e1 f7       	brne	.-8      	; 0x19ee <getGateways+0x10a>
    19f6:	81 70       	andi	r24, 0x01	; 1
    19f8:	90 70       	andi	r25, 0x00	; 0
    19fa:	91 87       	std	Z+9, r25	; 0x09
    19fc:	80 87       	std	Z+8, r24	; 0x08
    19fe:	c9 01       	movw	r24, r18
    1a00:	44 e0       	ldi	r20, 0x04	; 4
    1a02:	96 95       	lsr	r25
    1a04:	87 95       	ror	r24
    1a06:	4a 95       	dec	r20
    1a08:	e1 f7       	brne	.-8      	; 0x1a02 <getGateways+0x11e>
    1a0a:	81 70       	andi	r24, 0x01	; 1
    1a0c:	90 70       	andi	r25, 0x00	; 0
    1a0e:	93 87       	std	Z+11, r25	; 0x0b
    1a10:	82 87       	std	Z+10, r24	; 0x0a
    1a12:	c9 01       	movw	r24, r18
    1a14:	03 e0       	ldi	r16, 0x03	; 3
    1a16:	96 95       	lsr	r25
    1a18:	87 95       	ror	r24
    1a1a:	0a 95       	dec	r16
    1a1c:	e1 f7       	brne	.-8      	; 0x1a16 <getGateways+0x132>
    1a1e:	81 70       	andi	r24, 0x01	; 1
    1a20:	90 70       	andi	r25, 0x00	; 0
    1a22:	95 87       	std	Z+13, r25	; 0x0d
    1a24:	84 87       	std	Z+12, r24	; 0x0c
    1a26:	c9 01       	movw	r24, r18
    1a28:	96 95       	lsr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	96 95       	lsr	r25
    1a2e:	87 95       	ror	r24
    1a30:	81 70       	andi	r24, 0x01	; 1
    1a32:	90 70       	andi	r25, 0x00	; 0
    1a34:	97 87       	std	Z+15, r25	; 0x0f
    1a36:	86 87       	std	Z+14, r24	; 0x0e
    1a38:	c9 01       	movw	r24, r18
    1a3a:	96 95       	lsr	r25
    1a3c:	87 95       	ror	r24
    1a3e:	81 70       	andi	r24, 0x01	; 1
    1a40:	90 70       	andi	r25, 0x00	; 0
    1a42:	91 8b       	std	Z+17, r25	; 0x11
    1a44:	80 8b       	std	Z+16, r24	; 0x10
    1a46:	21 70       	andi	r18, 0x01	; 1
    1a48:	30 70       	andi	r19, 0x00	; 0
    1a4a:	33 8b       	std	Z+19, r19	; 0x13
    1a4c:	22 8b       	std	Z+18, r18	; 0x12
    1a4e:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
		TMRSRVC_delay(500);//wait 1/2 seconds
    1a52:	ed b7       	in	r30, 0x3d	; 61
    1a54:	fe b7       	in	r31, 0x3e	; 62
    1a56:	74 96       	adiw	r30, 0x14	; 20
    1a58:	0f b6       	in	r0, 0x3f	; 63
    1a5a:	f8 94       	cli
    1a5c:	fe bf       	out	0x3e, r31	; 62
    1a5e:	0f be       	out	0x3f, r0	; 63
    1a60:	ed bf       	out	0x3d, r30	; 61
    1a62:	84 ef       	ldi	r24, 0xF4	; 244
    1a64:	91 e0       	ldi	r25, 0x01	; 1
    1a66:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
    1a6a:	08 94       	sec
    1a6c:	c1 1c       	adc	r12, r1
    1a6e:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    1a70:	fd e0       	ldi	r31, 0x0D	; 13
    1a72:	cf 16       	cp	r12, r31
    1a74:	d1 04       	cpc	r13, r1
    1a76:	09 f0       	breq	.+2      	; 0x1a7a <getGateways+0x196>
    1a78:	8c cf       	rjmp	.-232    	; 0x1992 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(500);//wait 1/2 seconds
	}
}
    1a7a:	0f 90       	pop	r0
    1a7c:	cf 91       	pop	r28
    1a7e:	df 91       	pop	r29
    1a80:	1f 91       	pop	r17
    1a82:	0f 91       	pop	r16
    1a84:	ff 90       	pop	r15
    1a86:	ef 90       	pop	r14
    1a88:	df 90       	pop	r13
    1a8a:	cf 90       	pop	r12
    1a8c:	08 95       	ret

00001a8e <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    1a8e:	ff 92       	push	r15
    1a90:	0f 93       	push	r16
    1a92:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    1a94:	80 91 10 06 	lds	r24, 0x0610
    1a98:	08 2f       	mov	r16, r24
    1a9a:	06 95       	lsr	r16
    1a9c:	06 95       	lsr	r16
	unsigned char curCol = currentCellWorld & 0b0011;
    1a9e:	13 e0       	ldi	r17, 0x03	; 3
    1aa0:	f1 2e       	mov	r15, r17
    1aa2:	f8 22       	and	r15, r24
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    1aa4:	10 91 8f 05 	lds	r17, 0x058F
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    1aa8:	80 91 ee 04 	lds	r24, 0x04EE
    1aac:	61 2f       	mov	r22, r17
    1aae:	40 e0       	ldi	r20, 0x00	; 0
    1ab0:	0e 94 35 11 	call	0x226a	; 0x226a <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    1ab4:	e0 2f       	mov	r30, r16
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 0f       	add	r30, r30
    1abe:	ff 1f       	adc	r31, r31
    1ac0:	ef 0d       	add	r30, r15
    1ac2:	f1 1d       	adc	r31, r1
    1ac4:	e2 58       	subi	r30, 0x82	; 130
    1ac6:	fa 4f       	sbci	r31, 0xFA	; 250
    1ac8:	80 83       	st	Z, r24
		
		
	switch(currentMove){
    1aca:	80 91 6b 04 	lds	r24, 0x046B
    1ace:	82 30       	cpi	r24, 0x02	; 2
    1ad0:	a1 f0       	breq	.+40     	; 0x1afa <setGateways+0x6c>
    1ad2:	83 30       	cpi	r24, 0x03	; 3
    1ad4:	21 f0       	breq	.+8      	; 0x1ade <setGateways+0x50>
    1ad6:	81 30       	cpi	r24, 0x01	; 1
    1ad8:	29 f4       	brne	.+10     	; 0x1ae4 <setGateways+0x56>
		case MOVE_LEFT:
			curOrient--;
    1ada:	11 50       	subi	r17, 0x01	; 1
    1adc:	01 c0       	rjmp	.+2      	; 0x1ae0 <setGateways+0x52>
			curOrient = curOrient&0b11;
			break;
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			curOrient++;
    1ade:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    1ae0:	13 70       	andi	r17, 0x03	; 3
    1ae2:	0b c0       	rjmp	.+22     	; 0x1afa <setGateways+0x6c>
			break;
		default:
			LCD_printf("Whatz?!");
    1ae4:	00 d0       	rcall	.+0      	; 0x1ae6 <setGateways+0x58>
    1ae6:	80 ee       	ldi	r24, 0xE0	; 224
    1ae8:	92 e0       	ldi	r25, 0x02	; 2
    1aea:	ed b7       	in	r30, 0x3d	; 61
    1aec:	fe b7       	in	r31, 0x3e	; 62
    1aee:	92 83       	std	Z+2, r25	; 0x02
    1af0:	81 83       	std	Z+1, r24	; 0x01
    1af2:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
			break;
	}
	
	// move to the next cell with respect to our orientation
	switch(curOrient){
    1afa:	11 30       	cpi	r17, 0x01	; 1
    1afc:	49 f0       	breq	.+18     	; 0x1b10 <setGateways+0x82>
    1afe:	11 30       	cpi	r17, 0x01	; 1
    1b00:	28 f0       	brcs	.+10     	; 0x1b0c <setGateways+0x7e>
    1b02:	12 30       	cpi	r17, 0x02	; 2
    1b04:	39 f0       	breq	.+14     	; 0x1b14 <setGateways+0x86>
    1b06:	13 30       	cpi	r17, 0x03	; 3
    1b08:	41 f4       	brne	.+16     	; 0x1b1a <setGateways+0x8c>
    1b0a:	06 c0       	rjmp	.+12     	; 0x1b18 <setGateways+0x8a>
		case NORTH:
			curRow -= 1;
    1b0c:	01 50       	subi	r16, 0x01	; 1
    1b0e:	05 c0       	rjmp	.+10     	; 0x1b1a <setGateways+0x8c>
			break;
		case EAST:
			curCol += 1;
    1b10:	f3 94       	inc	r15
    1b12:	03 c0       	rjmp	.+6      	; 0x1b1a <setGateways+0x8c>
			break;
		case SOUTH:
			curRow += 1;					
    1b14:	0f 5f       	subi	r16, 0xFF	; 255
    1b16:	01 c0       	rjmp	.+2      	; 0x1b1a <setGateways+0x8c>
			break;
		case WEST:
			curCol -= 1;					
    1b18:	fa 94       	dec	r15
			break;
		default:
			break;
	}	
	currentCellWorld = (curRow << 2) + curCol;
    1b1a:	00 0f       	add	r16, r16
    1b1c:	00 0f       	add	r16, r16
    1b1e:	0f 0d       	add	r16, r15
    1b20:	00 93 10 06 	sts	0x0610, r16
}
    1b24:	1f 91       	pop	r17
    1b26:	0f 91       	pop	r16
    1b28:	ff 90       	pop	r15
    1b2a:	08 95       	ret

00001b2c <mapWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    maps the world as it moves through it
********************************************************************/
char mapWorld( void )
{	
    1b2c:	8f 92       	push	r8
    1b2e:	af 92       	push	r10
    1b30:	bf 92       	push	r11
    1b32:	cf 92       	push	r12
    1b34:	df 92       	push	r13
    1b36:	ef 92       	push	r14
    1b38:	ff 92       	push	r15
    1b3a:	0f 93       	push	r16
    1b3c:	1f 93       	push	r17
	if(!(currentGateway&0b0001)){	
    1b3e:	80 91 ee 04 	lds	r24, 0x04EE
    1b42:	80 fd       	sbrc	r24, 0
    1b44:	04 c0       	rjmp	.+8      	; 0x1b4e <mapWorld+0x22>
		// If we can make a left turn,
		// then turn left
		currentMove = MOVE_LEFT;
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	80 93 6b 04 	sts	0x046B, r24
    1b4c:	0a c0       	rjmp	.+20     	; 0x1b62 <mapWorld+0x36>
		// Reset Odometry
		checkOdometry(1);
	}
	else if(!(currentGateway&0b1000)){
    1b4e:	83 fd       	sbrc	r24, 3
    1b50:	04 c0       	rjmp	.+8      	; 0x1b5a <mapWorld+0x2e>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    1b52:	82 e0       	ldi	r24, 0x02	; 2
    1b54:	80 93 6b 04 	sts	0x046B, r24
    1b58:	06 c0       	rjmp	.+12     	; 0x1b66 <mapWorld+0x3a>
	}
	else {
		// If we can't turn left or go forward
		// spin right
		currentMove = MOVE_RIGHT;
    1b5a:	83 e0       	ldi	r24, 0x03	; 3
    1b5c:	80 93 6b 04 	sts	0x046B, r24
		// Reset Odometry
		checkOdometry(1);
    1b60:	81 e0       	ldi	r24, 0x01	; 1
    1b62:	0e 94 0a 06 	call	0xc14	; 0xc14 <checkOdometry>
	}
	
	if(odometryFlag)
    1b66:	80 91 18 06 	lds	r24, 0x0618
    1b6a:	88 23       	and	r24, r24
    1b6c:	11 f0       	breq	.+4      	; 0x1b72 <mapWorld+0x46>
	{
		// Only update the map if we are done moving
		setGateways();
    1b6e:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <setGateways>
	}
	
	LCD_clear();
    1b72:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	switch(currentMove){
    1b76:	80 91 6b 04 	lds	r24, 0x046B
    1b7a:	82 30       	cpi	r24, 0x02	; 2
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <mapWorld+0x54>
    1b7e:	59 c0       	rjmp	.+178    	; 0x1c32 <mapWorld+0x106>
    1b80:	83 30       	cpi	r24, 0x03	; 3
    1b82:	09 f4       	brne	.+2      	; 0x1b86 <mapWorld+0x5a>
    1b84:	82 c0       	rjmp	.+260    	; 0x1c8a <mapWorld+0x15e>
    1b86:	81 30       	cpi	r24, 0x01	; 1
    1b88:	09 f0       	breq	.+2      	; 0x1b8c <mapWorld+0x60>
    1b8a:	c0 c0       	rjmp	.+384    	; 0x1d0c <mapWorld+0x1e0>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1b8c:	8d b7       	in	r24, 0x3d	; 61
    1b8e:	9e b7       	in	r25, 0x3e	; 62
    1b90:	08 97       	sbiw	r24, 0x08	; 8
    1b92:	0f b6       	in	r0, 0x3f	; 63
    1b94:	f8 94       	cli
    1b96:	9e bf       	out	0x3e, r25	; 62
    1b98:	0f be       	out	0x3f, r0	; 63
    1b9a:	8d bf       	out	0x3d, r24	; 61
    1b9c:	ed b7       	in	r30, 0x3d	; 61
    1b9e:	fe b7       	in	r31, 0x3e	; 62
    1ba0:	31 96       	adiw	r30, 0x01	; 1
    1ba2:	84 e2       	ldi	r24, 0x24	; 36
    1ba4:	91 e0       	ldi	r25, 0x01	; 1
    1ba6:	ad b7       	in	r26, 0x3d	; 61
    1ba8:	be b7       	in	r27, 0x3e	; 62
    1baa:	12 96       	adiw	r26, 0x02	; 2
    1bac:	9c 93       	st	X, r25
    1bae:	8e 93       	st	-X, r24
    1bb0:	11 97       	sbiw	r26, 0x01	; 1
    1bb2:	80 91 ef 04 	lds	r24, 0x04EF
    1bb6:	82 83       	std	Z+2, r24	; 0x02
    1bb8:	13 82       	std	Z+3, r1	; 0x03
    1bba:	80 91 ee 04 	lds	r24, 0x04EE
    1bbe:	84 83       	std	Z+4, r24	; 0x04
    1bc0:	15 82       	std	Z+5, r1	; 0x05
    1bc2:	80 91 f4 04 	lds	r24, 0x04F4
    1bc6:	86 83       	std	Z+6, r24	; 0x06
    1bc8:	17 82       	std	Z+7, r1	; 0x07
    1bca:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.8/5.0), 10, 10, 0);
    1bce:	ed b7       	in	r30, 0x3d	; 61
    1bd0:	fe b7       	in	r31, 0x3e	; 62
    1bd2:	38 96       	adiw	r30, 0x08	; 8
    1bd4:	0f b6       	in	r0, 0x3f	; 63
    1bd6:	f8 94       	cli
    1bd8:	fe bf       	out	0x3e, r31	; 62
    1bda:	0f be       	out	0x3f, r0	; 63
    1bdc:	ed bf       	out	0x3d, r30	; 61
    1bde:	60 e0       	ldi	r22, 0x00	; 0
    1be0:	70 e0       	ldi	r23, 0x00	; 0
    1be2:	80 e0       	ldi	r24, 0x00	; 0
    1be4:	9f e4       	ldi	r25, 0x4F	; 79
    1be6:	2b e5       	ldi	r18, 0x5B	; 91
    1be8:	33 ed       	ldi	r19, 0xD3	; 211
    1bea:	4c ec       	ldi	r20, 0xCC	; 204
    1bec:	51 e4       	ldi	r21, 0x41	; 65
    1bee:	0f 2e       	mov	r0, r31
    1bf0:	f0 e0       	ldi	r31, 0x00	; 0
    1bf2:	ef 2e       	mov	r14, r31
    1bf4:	f0 e0       	ldi	r31, 0x00	; 0
    1bf6:	ff 2e       	mov	r15, r31
    1bf8:	f0 e2       	ldi	r31, 0x20	; 32
    1bfa:	0f 2f       	mov	r16, r31
    1bfc:	f1 e4       	ldi	r31, 0x41	; 65
    1bfe:	1f 2f       	mov	r17, r31
    1c00:	f0 2d       	mov	r31, r0
    1c02:	57 01       	movw	r10, r14
    1c04:	68 01       	movw	r12, r16
    1c06:	88 24       	eor	r8, r8
    1c08:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <move_arc_stwt>
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	80 e0       	ldi	r24, 0x00	; 0
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	44 e8       	ldi	r20, 0x84	; 132
    1c1a:	51 ec       	ldi	r21, 0xC1	; 193
    1c1c:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <move_arc_stwt>
			move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
    1c20:	60 e0       	ldi	r22, 0x00	; 0
    1c22:	70 e0       	ldi	r23, 0x00	; 0
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	9f e4       	ldi	r25, 0x4F	; 79
    1c28:	28 e4       	ldi	r18, 0x48	; 72
    1c2a:	31 ee       	ldi	r19, 0xE1	; 225
    1c2c:	46 e3       	ldi	r20, 0x36	; 54
    1c2e:	52 e4       	ldi	r21, 0x42	; 66
    1c30:	6a c0       	rjmp	.+212    	; 0x1d06 <mapWorld+0x1da>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1c32:	8d b7       	in	r24, 0x3d	; 61
    1c34:	9e b7       	in	r25, 0x3e	; 62
    1c36:	08 97       	sbiw	r24, 0x08	; 8
    1c38:	0f b6       	in	r0, 0x3f	; 63
    1c3a:	f8 94       	cli
    1c3c:	9e bf       	out	0x3e, r25	; 62
    1c3e:	0f be       	out	0x3f, r0	; 63
    1c40:	8d bf       	out	0x3d, r24	; 61
    1c42:	ed b7       	in	r30, 0x3d	; 61
    1c44:	fe b7       	in	r31, 0x3e	; 62
    1c46:	31 96       	adiw	r30, 0x01	; 1
    1c48:	8f e4       	ldi	r24, 0x4F	; 79
    1c4a:	91 e0       	ldi	r25, 0x01	; 1
    1c4c:	ad b7       	in	r26, 0x3d	; 61
    1c4e:	be b7       	in	r27, 0x3e	; 62
    1c50:	12 96       	adiw	r26, 0x02	; 2
    1c52:	9c 93       	st	X, r25
    1c54:	8e 93       	st	-X, r24
    1c56:	11 97       	sbiw	r26, 0x01	; 1
    1c58:	80 91 ef 04 	lds	r24, 0x04EF
    1c5c:	82 83       	std	Z+2, r24	; 0x02
    1c5e:	13 82       	std	Z+3, r1	; 0x03
    1c60:	80 91 ee 04 	lds	r24, 0x04EE
    1c64:	84 83       	std	Z+4, r24	; 0x04
    1c66:	15 82       	std	Z+5, r1	; 0x05
    1c68:	80 91 f4 04 	lds	r24, 0x04F4
    1c6c:	86 83       	std	Z+6, r24	; 0x06
    1c6e:	17 82       	std	Z+7, r1	; 0x07
    1c70:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    1c74:	ed b7       	in	r30, 0x3d	; 61
    1c76:	fe b7       	in	r31, 0x3e	; 62
    1c78:	38 96       	adiw	r30, 0x08	; 8
    1c7a:	0f b6       	in	r0, 0x3f	; 63
    1c7c:	f8 94       	cli
    1c7e:	fe bf       	out	0x3e, r31	; 62
    1c80:	0f be       	out	0x3f, r0	; 63
    1c82:	ed bf       	out	0x3d, r30	; 61
    1c84:	0e 94 96 08 	call	0x112c	; 0x112c <moveWall>
    1c88:	52 c0       	rjmp	.+164    	; 0x1d2e <mapWorld+0x202>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1c8a:	8d b7       	in	r24, 0x3d	; 61
    1c8c:	9e b7       	in	r25, 0x3e	; 62
    1c8e:	08 97       	sbiw	r24, 0x08	; 8
    1c90:	0f b6       	in	r0, 0x3f	; 63
    1c92:	f8 94       	cli
    1c94:	9e bf       	out	0x3e, r25	; 62
    1c96:	0f be       	out	0x3f, r0	; 63
    1c98:	8d bf       	out	0x3d, r24	; 61
    1c9a:	ed b7       	in	r30, 0x3d	; 61
    1c9c:	fe b7       	in	r31, 0x3e	; 62
    1c9e:	31 96       	adiw	r30, 0x01	; 1
    1ca0:	8d e7       	ldi	r24, 0x7D	; 125
    1ca2:	91 e0       	ldi	r25, 0x01	; 1
    1ca4:	ad b7       	in	r26, 0x3d	; 61
    1ca6:	be b7       	in	r27, 0x3e	; 62
    1ca8:	12 96       	adiw	r26, 0x02	; 2
    1caa:	9c 93       	st	X, r25
    1cac:	8e 93       	st	-X, r24
    1cae:	11 97       	sbiw	r26, 0x01	; 1
    1cb0:	80 91 ef 04 	lds	r24, 0x04EF
    1cb4:	82 83       	std	Z+2, r24	; 0x02
    1cb6:	13 82       	std	Z+3, r1	; 0x03
    1cb8:	80 91 ee 04 	lds	r24, 0x04EE
    1cbc:	84 83       	std	Z+4, r24	; 0x04
    1cbe:	15 82       	std	Z+5, r1	; 0x05
    1cc0:	80 91 f4 04 	lds	r24, 0x04F4
    1cc4:	86 83       	std	Z+6, r24	; 0x06
    1cc6:	17 82       	std	Z+7, r1	; 0x07
    1cc8:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1ccc:	ed b7       	in	r30, 0x3d	; 61
    1cce:	fe b7       	in	r31, 0x3e	; 62
    1cd0:	38 96       	adiw	r30, 0x08	; 8
    1cd2:	0f b6       	in	r0, 0x3f	; 63
    1cd4:	f8 94       	cli
    1cd6:	fe bf       	out	0x3e, r31	; 62
    1cd8:	0f be       	out	0x3f, r0	; 63
    1cda:	ed bf       	out	0x3d, r30	; 61
    1cdc:	60 e0       	ldi	r22, 0x00	; 0
    1cde:	70 e0       	ldi	r23, 0x00	; 0
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	20 e0       	ldi	r18, 0x00	; 0
    1ce6:	30 e0       	ldi	r19, 0x00	; 0
    1ce8:	44 e8       	ldi	r20, 0x84	; 132
    1cea:	51 e4       	ldi	r21, 0x41	; 65
    1cec:	0f 2e       	mov	r0, r31
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	ef 2e       	mov	r14, r31
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	ff 2e       	mov	r15, r31
    1cf6:	f0 e2       	ldi	r31, 0x20	; 32
    1cf8:	0f 2f       	mov	r16, r31
    1cfa:	f1 e4       	ldi	r31, 0x41	; 65
    1cfc:	1f 2f       	mov	r17, r31
    1cfe:	f0 2d       	mov	r31, r0
    1d00:	57 01       	movw	r10, r14
    1d02:	68 01       	movw	r12, r16
    1d04:	88 24       	eor	r8, r8
    1d06:	0e 94 fa 13 	call	0x27f4	; 0x27f4 <move_arc_stwt>
    1d0a:	11 c0       	rjmp	.+34     	; 0x1d2e <mapWorld+0x202>
			break;
		default:
			LCD_printf("What?!");
    1d0c:	00 d0       	rcall	.+0      	; 0x1d0e <mapWorld+0x1e2>
    1d0e:	89 ea       	ldi	r24, 0xA9	; 169
    1d10:	91 e0       	ldi	r25, 0x01	; 1
    1d12:	ad b7       	in	r26, 0x3d	; 61
    1d14:	be b7       	in	r27, 0x3e	; 62
    1d16:	12 96       	adiw	r26, 0x02	; 2
    1d18:	9c 93       	st	X, r25
    1d1a:	8e 93       	st	-X, r24
    1d1c:	11 97       	sbiw	r26, 0x01	; 1
    1d1e:	0e 94 82 34 	call	0x6904	; 0x6904 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    1d22:	0f 90       	pop	r0
    1d24:	0f 90       	pop	r0
    1d26:	82 e0       	ldi	r24, 0x02	; 2
    1d28:	60 e0       	ldi	r22, 0x00	; 0
    1d2a:	0e 94 82 1c 	call	0x3904	; 0x3904 <STEPPER_stop>
			break;
	}
	
	// TMRSRVC_delay(1000);//wait 1 seconds
	return 1;
}
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	1f 91       	pop	r17
    1d32:	0f 91       	pop	r16
    1d34:	ff 90       	pop	r15
    1d36:	ef 90       	pop	r14
    1d38:	df 90       	pop	r13
    1d3a:	cf 90       	pop	r12
    1d3c:	bf 90       	pop	r11
    1d3e:	af 90       	pop	r10
    1d40:	8f 90       	pop	r8
    1d42:	08 95       	ret

00001d44 <CBOT_main>:
********************************************************************/

void CBOT_main( void )
{
	// initialize the robot
	initializeRobot();
    1d44:	0e 94 f6 16 	call	0x2dec	; 0x2dec <initializeRobot>
	
	// Enter the robot's current (starting) position
	LCD_printf("START Map/nlocation\n\n\n");	
    1d48:	88 ee       	ldi	r24, 0xE8	; 232
    1d4a:	92 e0       	ldi	r25, 0x02	; 2
    1d4c:	0e 94 94 34 	call	0x6928	; 0x6928 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1d50:	88 ee       	ldi	r24, 0xE8	; 232
    1d52:	93 e0       	ldi	r25, 0x03	; 3
    1d54:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1d58:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	worldInput();
    1d5c:	0e 94 cf 0b 	call	0x179e	; 0x179e <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1d60:	88 ee       	ldi	r24, 0xE8	; 232
    1d62:	93 e0       	ldi	r25, 0x03	; 3
    1d64:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1d68:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Map/norientation\n\n\n");	
    1d6c:	8e ef       	ldi	r24, 0xFE	; 254
    1d6e:	92 e0       	ldi	r25, 0x02	; 2
    1d70:	0e 94 94 34 	call	0x6928	; 0x6928 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1d74:	88 ee       	ldi	r24, 0xE8	; 232
    1d76:	93 e0       	ldi	r25, 0x03	; 3
    1d78:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1d7c:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	orientationInput();
    1d80:	0e 94 12 0c 	call	0x1824	; 0x1824 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1d84:	88 ee       	ldi	r24, 0xE8	; 232
    1d86:	93 e0       	ldi	r25, 0x03	; 3
    1d88:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1d8c:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	
	odometryTrigger = WORLD_RESOLUTION_SIZE;
    1d90:	8d e2       	ldi	r24, 0x2D	; 45
    1d92:	80 93 6d 05 	sts	0x056D, r24
	isMapping = 1;
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	80 93 a5 06 	sts	0x06A5, r24
    1d9c:	21 c0       	rjmp	.+66     	; 0x1de0 <CBOT_main+0x9c>
	
	while(isMapping)
	{
		checkIR();	
    1d9e:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <checkIR>
		checkWorld();
    1da2:	0e 94 32 06 	call	0xc64	; 0xc64 <checkWorld>
		checkOdometry(0);
    1da6:	80 e0       	ldi	r24, 0x00	; 0
    1da8:	0e 94 0a 06 	call	0xc14	; 0xc14 <checkOdometry>
		mapWorld();
    1dac:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <mapWorld>
		isMapping = !((currentCellWorldStart == currentCellWorld)&(currentOrientationStart == currentOrientation));
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	90 91 11 06 	lds	r25, 0x0611
    1db8:	80 91 10 06 	lds	r24, 0x0610
    1dbc:	98 17       	cp	r25, r24
    1dbe:	11 f0       	breq	.+4      	; 0x1dc4 <CBOT_main+0x80>
    1dc0:	21 e0       	ldi	r18, 0x01	; 1
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	40 e0       	ldi	r20, 0x00	; 0
    1dc6:	50 e0       	ldi	r21, 0x00	; 0
    1dc8:	90 91 8e 05 	lds	r25, 0x058E
    1dcc:	80 91 8f 05 	lds	r24, 0x058F
    1dd0:	98 17       	cp	r25, r24
    1dd2:	11 f0       	breq	.+4      	; 0x1dd8 <CBOT_main+0x94>
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	50 e0       	ldi	r21, 0x00	; 0
    1dd8:	24 2b       	or	r18, r20
    1dda:	35 2b       	or	r19, r21
    1ddc:	20 93 a5 06 	sts	0x06A5, r18
	LCD_clear();
	
	odometryTrigger = WORLD_RESOLUTION_SIZE;
	isMapping = 1;
	
	while(isMapping)
    1de0:	80 91 a5 06 	lds	r24, 0x06A5
    1de4:	88 23       	and	r24, r24
    1de6:	d9 f6       	brne	.-74     	; 0x1d9e <CBOT_main+0x5a>
		mapWorld();
		isMapping = !((currentCellWorldStart == currentCellWorld)&(currentOrientationStart == currentOrientation));
	}
	
	// Enter the robot's current (starting) position
	LCD_printf("START Path\nlocation\n\n\n");	
    1de8:	87 e1       	ldi	r24, 0x17	; 23
    1dea:	93 e0       	ldi	r25, 0x03	; 3
    1dec:	0e 94 94 34 	call	0x6928	; 0x6928 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1df0:	88 ee       	ldi	r24, 0xE8	; 232
    1df2:	93 e0       	ldi	r25, 0x03	; 3
    1df4:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1df8:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	worldInput();
    1dfc:	0e 94 cf 0b 	call	0x179e	; 0x179e <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1e00:	88 ee       	ldi	r24, 0xE8	; 232
    1e02:	93 e0       	ldi	r25, 0x03	; 3
    1e04:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1e08:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Path\norientation\n\n\n");
    1e0c:	8d e2       	ldi	r24, 0x2D	; 45
    1e0e:	93 e0       	ldi	r25, 0x03	; 3
    1e10:	0e 94 94 34 	call	0x6928	; 0x6928 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1e14:	88 ee       	ldi	r24, 0xE8	; 232
    1e16:	93 e0       	ldi	r25, 0x03	; 3
    1e18:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1e1c:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	orientationInput();
    1e20:	0e 94 12 0c 	call	0x1824	; 0x1824 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1e24:	88 ee       	ldi	r24, 0xE8	; 232
    1e26:	93 e0       	ldi	r25, 0x03	; 3
    1e28:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1e2c:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	
	// Enter the robot topological commands
	LCD_printf("ENTER Path\ncommands\n\n\n");
    1e30:	86 e4       	ldi	r24, 0x46	; 70
    1e32:	93 e0       	ldi	r25, 0x03	; 3
    1e34:	0e 94 94 34 	call	0x6928	; 0x6928 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1e38:	88 ee       	ldi	r24, 0xE8	; 232
    1e3a:	93 e0       	ldi	r25, 0x03	; 3
    1e3c:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1e40:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	movesInput();
    1e44:	0e 94 7c 0b 	call	0x16f8	; 0x16f8 <movesInput>
	TMRSRVC_delay(1000);//wait 1 seconds
    1e48:	88 ee       	ldi	r24, 0xE8	; 232
    1e4a:	93 e0       	ldi	r25, 0x03	; 3
    1e4c:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1e50:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	
	// Print the robot gateways
	LCD_printf("Robot Gateways:\n\n\n\n");
    1e54:	8c e5       	ldi	r24, 0x5C	; 92
    1e56:	93 e0       	ldi	r25, 0x03	; 3
    1e58:	0e 94 94 34 	call	0x6928	; 0x6928 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1e5c:	88 ee       	ldi	r24, 0xE8	; 232
    1e5e:	93 e0       	ldi	r25, 0x03	; 3
    1e60:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1e64:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
	getGateways();
    1e68:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <getGateways>
	TMRSRVC_delay(1000);//wait 1 seconds
    1e6c:	88 ee       	ldi	r24, 0xE8	; 232
    1e6e:	93 e0       	ldi	r25, 0x03	; 3
    1e70:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
	LCD_clear();
    1e74:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
		
		
	// Infinite loop
	while (1)
    {
		checkIR();	
    1e78:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <checkIR>
    1e7c:	fd cf       	rjmp	.-6      	; 0x1e78 <CBOT_main+0x134>

00001e7e <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
    1e7e:	2f 92       	push	r2
    1e80:	3f 92       	push	r3
    1e82:	4f 92       	push	r4
    1e84:	5f 92       	push	r5
    1e86:	6f 92       	push	r6
    1e88:	7f 92       	push	r7
    1e8a:	8f 92       	push	r8
    1e8c:	9f 92       	push	r9
    1e8e:	af 92       	push	r10
    1e90:	bf 92       	push	r11
    1e92:	cf 92       	push	r12
    1e94:	df 92       	push	r13
    1e96:	ef 92       	push	r14
    1e98:	ff 92       	push	r15
    1e9a:	0f 93       	push	r16
    1e9c:	1f 93       	push	r17
    1e9e:	df 93       	push	r29
    1ea0:	cf 93       	push	r28
    1ea2:	cd b7       	in	r28, 0x3d	; 61
    1ea4:	de b7       	in	r29, 0x3e	; 62
    1ea6:	64 97       	sbiw	r28, 0x14	; 20
    1ea8:	0f b6       	in	r0, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	de bf       	out	0x3e, r29	; 62
    1eae:	0f be       	out	0x3f, r0	; 63
    1eb0:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
    1eb2:	88 23       	and	r24, r24
    1eb4:	39 f5       	brne	.+78     	; 0x1f04 <prefilter+0x86>
    1eb6:	8e ed       	ldi	r24, 0xDE	; 222
    1eb8:	94 e0       	ldi	r25, 0x04	; 4
    1eba:	9c 8b       	std	Y+20, r25	; 0x14
    1ebc:	8b 8b       	std	Y+19, r24	; 0x13
    1ebe:	ad e8       	ldi	r26, 0x8D	; 141
    1ec0:	b6 e0       	ldi	r27, 0x06	; 6
    1ec2:	be 83       	std	Y+6, r27	; 0x06
    1ec4:	ad 83       	std	Y+5, r26	; 0x05
    1ec6:	e4 e0       	ldi	r30, 0x04	; 4
    1ec8:	f6 e0       	ldi	r31, 0x06	; 6
    1eca:	fc 83       	std	Y+4, r31	; 0x04
    1ecc:	eb 83       	std	Y+3, r30	; 0x03
    1ece:	85 e6       	ldi	r24, 0x65	; 101
    1ed0:	95 e0       	ldi	r25, 0x05	; 5
    1ed2:	9a 83       	std	Y+2, r25	; 0x02
    1ed4:	89 83       	std	Y+1, r24	; 0x01
    1ed6:	0f 2e       	mov	r0, r31
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	2f 2e       	mov	r2, r31
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	3f 2e       	mov	r3, r31
    1ee0:	f0 e0       	ldi	r31, 0x00	; 0
    1ee2:	4f 2e       	mov	r4, r31
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	5f 2e       	mov	r5, r31
    1ee8:	f0 2d       	mov	r31, r0
    1eea:	2f 86       	std	Y+15, r2	; 0x0f
    1eec:	38 8a       	std	Y+16, r3	; 0x10
    1eee:	49 8a       	std	Y+17, r4	; 0x11
    1ef0:	5a 8a       	std	Y+18, r5	; 0x12
    1ef2:	2b 86       	std	Y+11, r2	; 0x0b
    1ef4:	3c 86       	std	Y+12, r3	; 0x0c
    1ef6:	4d 86       	std	Y+13, r4	; 0x0d
    1ef8:	5e 86       	std	Y+14, r5	; 0x0e
    1efa:	2f 82       	std	Y+7, r2	; 0x07
    1efc:	38 86       	std	Y+8, r3	; 0x08
    1efe:	49 86       	std	Y+9, r4	; 0x09
    1f00:	5a 86       	std	Y+10, r5	; 0x0a
    1f02:	43 c0       	rjmp	.+134    	; 0x1f8a <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    1f04:	a0 90 14 06 	lds	r10, 0x0614
    1f08:	b0 90 15 06 	lds	r11, 0x0615
    1f0c:	c0 90 16 06 	lds	r12, 0x0616
    1f10:	d0 90 17 06 	lds	r13, 0x0617
			rtIR_old[i] = rtIR;
    1f14:	e0 90 19 06 	lds	r14, 0x0619
    1f18:	f0 90 1a 06 	lds	r15, 0x061A
    1f1c:	00 91 1b 06 	lds	r16, 0x061B
    1f20:	10 91 1c 06 	lds	r17, 0x061C
			ftIR_old[i] = ftIR;
    1f24:	20 90 e6 04 	lds	r2, 0x04E6
    1f28:	30 90 e7 04 	lds	r3, 0x04E7
    1f2c:	40 90 e8 04 	lds	r4, 0x04E8
    1f30:	50 90 e9 04 	lds	r5, 0x04E9
			bkIR_old[i] = bkIR;
    1f34:	20 91 f0 04 	lds	r18, 0x04F0
    1f38:	30 91 f1 04 	lds	r19, 0x04F1
    1f3c:	40 91 f2 04 	lds	r20, 0x04F2
    1f40:	50 91 f3 04 	lds	r21, 0x04F3
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    1f48:	fc 01       	movw	r30, r24
    1f4a:	e2 59       	subi	r30, 0x92	; 146
    1f4c:	fb 4f       	sbci	r31, 0xFB	; 251
    1f4e:	a0 82       	st	Z, r10
    1f50:	b1 82       	std	Z+1, r11	; 0x01
    1f52:	c2 82       	std	Z+2, r12	; 0x02
    1f54:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
    1f56:	fc 01       	movw	r30, r24
    1f58:	e3 5e       	subi	r30, 0xE3	; 227
    1f5a:	f9 4f       	sbci	r31, 0xF9	; 249
    1f5c:	e0 82       	st	Z, r14
    1f5e:	f1 82       	std	Z+1, r15	; 0x01
    1f60:	02 83       	std	Z+2, r16	; 0x02
    1f62:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
    1f64:	fc 01       	movw	r30, r24
    1f66:	ec 56       	subi	r30, 0x6C	; 108
    1f68:	fa 4f       	sbci	r31, 0xFA	; 250
    1f6a:	20 82       	st	Z, r2
    1f6c:	31 82       	std	Z+1, r3	; 0x01
    1f6e:	42 82       	std	Z+2, r4	; 0x02
    1f70:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
    1f72:	fc 01       	movw	r30, r24
    1f74:	eb 50       	subi	r30, 0x0B	; 11
    1f76:	fb 4f       	sbci	r31, 0xFB	; 251
    1f78:	20 83       	st	Z, r18
    1f7a:	31 83       	std	Z+1, r19	; 0x01
    1f7c:	42 83       	std	Z+2, r20	; 0x02
    1f7e:	53 83       	std	Z+3, r21	; 0x03
    1f80:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
    1f82:	88 37       	cpi	r24, 0x78	; 120
    1f84:	91 05       	cpc	r25, r1
    1f86:	01 f7       	brne	.-64     	; 0x1f48 <prefilter+0xca>
    1f88:	96 cf       	rjmp	.-212    	; 0x1eb6 <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
    1f8a:	ab 89       	ldd	r26, Y+19	; 0x13
    1f8c:	bc 89       	ldd	r27, Y+20	; 0x14
    1f8e:	2d 91       	ld	r18, X+
    1f90:	3d 91       	ld	r19, X+
    1f92:	4d 91       	ld	r20, X+
    1f94:	5c 91       	ld	r21, X
    1f96:	13 97       	sbiw	r26, 0x03	; 3
    1f98:	fd 01       	movw	r30, r26
    1f9a:	24 83       	std	Z+4, r18	; 0x04
    1f9c:	35 83       	std	Z+5, r19	; 0x05
    1f9e:	46 83       	std	Z+6, r20	; 0x06
    1fa0:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
    1fa2:	ad 81       	ldd	r26, Y+5	; 0x05
    1fa4:	be 81       	ldd	r27, Y+6	; 0x06
    1fa6:	ed 90       	ld	r14, X+
    1fa8:	fd 90       	ld	r15, X+
    1faa:	0d 91       	ld	r16, X+
    1fac:	1c 91       	ld	r17, X
    1fae:	13 97       	sbiw	r26, 0x03	; 3
    1fb0:	fd 01       	movw	r30, r26
    1fb2:	e4 82       	std	Z+4, r14	; 0x04
    1fb4:	f5 82       	std	Z+5, r15	; 0x05
    1fb6:	06 83       	std	Z+6, r16	; 0x06
    1fb8:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
    1fba:	ab 81       	ldd	r26, Y+3	; 0x03
    1fbc:	bc 81       	ldd	r27, Y+4	; 0x04
    1fbe:	ad 90       	ld	r10, X+
    1fc0:	bd 90       	ld	r11, X+
    1fc2:	cd 90       	ld	r12, X+
    1fc4:	dc 90       	ld	r13, X
    1fc6:	13 97       	sbiw	r26, 0x03	; 3
    1fc8:	fd 01       	movw	r30, r26
    1fca:	a4 82       	std	Z+4, r10	; 0x04
    1fcc:	b5 82       	std	Z+5, r11	; 0x05
    1fce:	c6 82       	std	Z+6, r12	; 0x06
    1fd0:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
    1fd2:	a9 81       	ldd	r26, Y+1	; 0x01
    1fd4:	ba 81       	ldd	r27, Y+2	; 0x02
    1fd6:	6d 90       	ld	r6, X+
    1fd8:	7d 90       	ld	r7, X+
    1fda:	8d 90       	ld	r8, X+
    1fdc:	9c 90       	ld	r9, X
    1fde:	13 97       	sbiw	r26, 0x03	; 3
    1fe0:	fd 01       	movw	r30, r26
    1fe2:	64 82       	std	Z+4, r6	; 0x04
    1fe4:	75 82       	std	Z+5, r7	; 0x05
    1fe6:	86 82       	std	Z+6, r8	; 0x06
    1fe8:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
    1fea:	c2 01       	movw	r24, r4
    1fec:	b1 01       	movw	r22, r2
    1fee:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    1ff2:	1b 01       	movw	r2, r22
    1ff4:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
    1ff6:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ff8:	78 89       	ldd	r23, Y+16	; 0x10
    1ffa:	89 89       	ldd	r24, Y+17	; 0x11
    1ffc:	9a 89       	ldd	r25, Y+18	; 0x12
    1ffe:	a8 01       	movw	r20, r16
    2000:	97 01       	movw	r18, r14
    2002:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    2006:	6f 87       	std	Y+15, r22	; 0x0f
    2008:	78 8b       	std	Y+16, r23	; 0x10
    200a:	89 8b       	std	Y+17, r24	; 0x11
    200c:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
    200e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2010:	7c 85       	ldd	r23, Y+12	; 0x0c
    2012:	8d 85       	ldd	r24, Y+13	; 0x0d
    2014:	9e 85       	ldd	r25, Y+14	; 0x0e
    2016:	a6 01       	movw	r20, r12
    2018:	95 01       	movw	r18, r10
    201a:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    201e:	6b 87       	std	Y+11, r22	; 0x0b
    2020:	7c 87       	std	Y+12, r23	; 0x0c
    2022:	8d 87       	std	Y+13, r24	; 0x0d
    2024:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
    2026:	6f 81       	ldd	r22, Y+7	; 0x07
    2028:	78 85       	ldd	r23, Y+8	; 0x08
    202a:	89 85       	ldd	r24, Y+9	; 0x09
    202c:	9a 85       	ldd	r25, Y+10	; 0x0a
    202e:	a4 01       	movw	r20, r8
    2030:	93 01       	movw	r18, r6
    2032:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    2036:	6f 83       	std	Y+7, r22	; 0x07
    2038:	78 87       	std	Y+8, r23	; 0x08
    203a:	89 87       	std	Y+9, r24	; 0x09
    203c:	9a 87       	std	Y+10, r25	; 0x0a
    203e:	8b 89       	ldd	r24, Y+19	; 0x13
    2040:	9c 89       	ldd	r25, Y+20	; 0x14
    2042:	04 97       	sbiw	r24, 0x04	; 4
    2044:	9c 8b       	std	Y+20, r25	; 0x14
    2046:	8b 8b       	std	Y+19, r24	; 0x13
    2048:	ad 81       	ldd	r26, Y+5	; 0x05
    204a:	be 81       	ldd	r27, Y+6	; 0x06
    204c:	14 97       	sbiw	r26, 0x04	; 4
    204e:	be 83       	std	Y+6, r27	; 0x06
    2050:	ad 83       	std	Y+5, r26	; 0x05
    2052:	eb 81       	ldd	r30, Y+3	; 0x03
    2054:	fc 81       	ldd	r31, Y+4	; 0x04
    2056:	34 97       	sbiw	r30, 0x04	; 4
    2058:	fc 83       	std	Y+4, r31	; 0x04
    205a:	eb 83       	std	Y+3, r30	; 0x03
    205c:	89 81       	ldd	r24, Y+1	; 0x01
    205e:	9a 81       	ldd	r25, Y+2	; 0x02
    2060:	04 97       	sbiw	r24, 0x04	; 4
    2062:	9a 83       	std	Y+2, r25	; 0x02
    2064:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
    2066:	ab 89       	ldd	r26, Y+19	; 0x13
    2068:	bc 89       	ldd	r27, Y+20	; 0x14
    206a:	a6 56       	subi	r26, 0x66	; 102
    206c:	b4 40       	sbci	r27, 0x04	; 4
    206e:	09 f0       	breq	.+2      	; 0x2072 <prefilter+0x1f4>
    2070:	8c cf       	rjmp	.-232    	; 0x1f8a <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
    2072:	80 91 14 06 	lds	r24, 0x0614
    2076:	90 91 15 06 	lds	r25, 0x0615
    207a:	a0 91 16 06 	lds	r26, 0x0616
    207e:	b0 91 17 06 	lds	r27, 0x0617
    2082:	eb 89       	ldd	r30, Y+19	; 0x13
    2084:	fc 89       	ldd	r31, Y+20	; 0x14
    2086:	80 87       	std	Z+8, r24	; 0x08
    2088:	91 87       	std	Z+9, r25	; 0x09
    208a:	a2 87       	std	Z+10, r26	; 0x0a
    208c:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
    208e:	80 91 19 06 	lds	r24, 0x0619
    2092:	90 91 1a 06 	lds	r25, 0x061A
    2096:	a0 91 1b 06 	lds	r26, 0x061B
    209a:	b0 91 1c 06 	lds	r27, 0x061C
    209e:	80 93 1d 06 	sts	0x061D, r24
    20a2:	90 93 1e 06 	sts	0x061E, r25
    20a6:	a0 93 1f 06 	sts	0x061F, r26
    20aa:	b0 93 20 06 	sts	0x0620, r27
	ftIR_old[0] = ftIR;
    20ae:	80 91 e6 04 	lds	r24, 0x04E6
    20b2:	90 91 e7 04 	lds	r25, 0x04E7
    20b6:	a0 91 e8 04 	lds	r26, 0x04E8
    20ba:	b0 91 e9 04 	lds	r27, 0x04E9
    20be:	80 93 94 05 	sts	0x0594, r24
    20c2:	90 93 95 05 	sts	0x0595, r25
    20c6:	a0 93 96 05 	sts	0x0596, r26
    20ca:	b0 93 97 05 	sts	0x0597, r27
	bkIR_old[0] = bkIR;
    20ce:	80 91 f0 04 	lds	r24, 0x04F0
    20d2:	90 91 f1 04 	lds	r25, 0x04F1
    20d6:	a0 91 f2 04 	lds	r26, 0x04F2
    20da:	b0 91 f3 04 	lds	r27, 0x04F3
    20de:	80 93 f5 04 	sts	0x04F5, r24
    20e2:	90 93 f6 04 	sts	0x04F6, r25
    20e6:	a0 93 f7 04 	sts	0x04F7, r26
    20ea:	b0 93 f8 04 	sts	0x04F8, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
    20ee:	c2 01       	movw	r24, r4
    20f0:	b1 01       	movw	r22, r2
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 ef       	ldi	r20, 0xF0	; 240
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    20fe:	60 93 14 06 	sts	0x0614, r22
    2102:	70 93 15 06 	sts	0x0615, r23
    2106:	80 93 16 06 	sts	0x0616, r24
    210a:	90 93 17 06 	sts	0x0617, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
    210e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2110:	78 89       	ldd	r23, Y+16	; 0x10
    2112:	89 89       	ldd	r24, Y+17	; 0x11
    2114:	9a 89       	ldd	r25, Y+18	; 0x12
    2116:	20 e0       	ldi	r18, 0x00	; 0
    2118:	30 e0       	ldi	r19, 0x00	; 0
    211a:	40 ef       	ldi	r20, 0xF0	; 240
    211c:	51 e4       	ldi	r21, 0x41	; 65
    211e:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2122:	60 93 19 06 	sts	0x0619, r22
    2126:	70 93 1a 06 	sts	0x061A, r23
    212a:	80 93 1b 06 	sts	0x061B, r24
    212e:	90 93 1c 06 	sts	0x061C, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
    2132:	6b 85       	ldd	r22, Y+11	; 0x0b
    2134:	7c 85       	ldd	r23, Y+12	; 0x0c
    2136:	8d 85       	ldd	r24, Y+13	; 0x0d
    2138:	9e 85       	ldd	r25, Y+14	; 0x0e
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 ef       	ldi	r20, 0xF0	; 240
    2140:	51 e4       	ldi	r21, 0x41	; 65
    2142:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2146:	60 93 e6 04 	sts	0x04E6, r22
    214a:	70 93 e7 04 	sts	0x04E7, r23
    214e:	80 93 e8 04 	sts	0x04E8, r24
    2152:	90 93 e9 04 	sts	0x04E9, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
    2156:	6f 81       	ldd	r22, Y+7	; 0x07
    2158:	78 85       	ldd	r23, Y+8	; 0x08
    215a:	89 85       	ldd	r24, Y+9	; 0x09
    215c:	9a 85       	ldd	r25, Y+10	; 0x0a
    215e:	20 e0       	ldi	r18, 0x00	; 0
    2160:	30 e0       	ldi	r19, 0x00	; 0
    2162:	40 ef       	ldi	r20, 0xF0	; 240
    2164:	51 e4       	ldi	r21, 0x41	; 65
    2166:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    216a:	60 93 f0 04 	sts	0x04F0, r22
    216e:	70 93 f1 04 	sts	0x04F1, r23
    2172:	80 93 f2 04 	sts	0x04F2, r24
    2176:	90 93 f3 04 	sts	0x04F3, r25
}
    217a:	64 96       	adiw	r28, 0x14	; 20
    217c:	0f b6       	in	r0, 0x3f	; 63
    217e:	f8 94       	cli
    2180:	de bf       	out	0x3e, r29	; 62
    2182:	0f be       	out	0x3f, r0	; 63
    2184:	cd bf       	out	0x3d, r28	; 61
    2186:	cf 91       	pop	r28
    2188:	df 91       	pop	r29
    218a:	1f 91       	pop	r17
    218c:	0f 91       	pop	r16
    218e:	ff 90       	pop	r15
    2190:	ef 90       	pop	r14
    2192:	df 90       	pop	r13
    2194:	cf 90       	pop	r12
    2196:	bf 90       	pop	r11
    2198:	af 90       	pop	r10
    219a:	9f 90       	pop	r9
    219c:	8f 90       	pop	r8
    219e:	7f 90       	pop	r7
    21a0:	6f 90       	pop	r6
    21a2:	5f 90       	pop	r5
    21a4:	4f 90       	pop	r4
    21a6:	3f 90       	pop	r3
    21a8:	2f 90       	pop	r2
    21aa:	08 95       	ret

000021ac <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
    21ac:	af 92       	push	r10
    21ae:	bf 92       	push	r11
    21b0:	cf 92       	push	r12
    21b2:	df 92       	push	r13
    21b4:	ef 92       	push	r14
    21b6:	ff 92       	push	r15
    21b8:	0f 93       	push	r16
    21ba:	1f 93       	push	r17
    21bc:	7b 01       	movw	r14, r22
    21be:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
    21c0:	44 23       	and	r20, r20
    21c2:	61 f0       	breq	.+24     	; 0x21dc <pidController+0x30>
		Ierror = 0;
    21c4:	80 e0       	ldi	r24, 0x00	; 0
    21c6:	90 e0       	ldi	r25, 0x00	; 0
    21c8:	a0 e0       	ldi	r26, 0x00	; 0
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	80 93 ea 04 	sts	0x04EA, r24
    21d0:	90 93 eb 04 	sts	0x04EB, r25
    21d4:	a0 93 ec 04 	sts	0x04EC, r26
    21d8:	b0 93 ed 04 	sts	0x04ED, r27
	}
	// At the current error to the running sum
	Ierror += error;
    21dc:	c8 01       	movw	r24, r16
    21de:	b7 01       	movw	r22, r14
    21e0:	20 91 ea 04 	lds	r18, 0x04EA
    21e4:	30 91 eb 04 	lds	r19, 0x04EB
    21e8:	40 91 ec 04 	lds	r20, 0x04EC
    21ec:	50 91 ed 04 	lds	r21, 0x04ED
    21f0:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    21f4:	5b 01       	movw	r10, r22
    21f6:	6c 01       	movw	r12, r24
    21f8:	60 93 ea 04 	sts	0x04EA, r22
    21fc:	70 93 eb 04 	sts	0x04EB, r23
    2200:	80 93 ec 04 	sts	0x04EC, r24
    2204:	90 93 ed 04 	sts	0x04ED, r25
    2208:	c8 01       	movw	r24, r16
    220a:	b7 01       	movw	r22, r14
    220c:	20 91 90 05 	lds	r18, 0x0590
    2210:	30 91 91 05 	lds	r19, 0x0591
    2214:	40 91 92 05 	lds	r20, 0x0592
    2218:	50 91 93 05 	lds	r21, 0x0593
    221c:	0e 94 49 2a 	call	0x5492	; 0x5492 <__subsf3>
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e0       	ldi	r20, 0x00	; 0
    2226:	50 e0       	ldi	r21, 0x00	; 0
    2228:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    222c:	9b 01       	movw	r18, r22
    222e:	ac 01       	movw	r20, r24
    2230:	c8 01       	movw	r24, r16
    2232:	b7 01       	movw	r22, r14
    2234:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    2238:	7b 01       	movw	r14, r22
    223a:	8c 01       	movw	r16, r24
    223c:	c6 01       	movw	r24, r12
    223e:	b5 01       	movw	r22, r10
    2240:	20 e0       	ldi	r18, 0x00	; 0
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	50 e0       	ldi	r21, 0x00	; 0
    2248:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    224c:	9b 01       	movw	r18, r22
    224e:	ac 01       	movw	r20, r24
    2250:	c8 01       	movw	r24, r16
    2252:	b7 01       	movw	r22, r14
    2254:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	ff 90       	pop	r15
    225e:	ef 90       	pop	r14
    2260:	df 90       	pop	r13
    2262:	cf 90       	pop	r12
    2264:	bf 90       	pop	r11
    2266:	af 90       	pop	r10
    2268:	08 95       	ret

0000226a <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    226a:	44 23       	and	r20, r20
    226c:	81 f0       	breq	.+32     	; 0x228e <rotateCell+0x24>
    226e:	06 c0       	rjmp	.+12     	; 0x227c <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    2270:	e8 2f       	mov	r30, r24
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	e1 59       	subi	r30, 0x91	; 145
    2276:	fc 4f       	sbci	r31, 0xFC	; 252
    2278:	80 81       	ld	r24, Z
			orient--;
    227a:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    227c:	66 23       	and	r22, r22
    227e:	c1 f7       	brne	.-16     	; 0x2270 <rotateCell+0x6>
    2280:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    2282:	e8 2f       	mov	r30, r24
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	e1 58       	subi	r30, 0x81	; 129
    2288:	fc 4f       	sbci	r31, 0xFC	; 252
    228a:	80 81       	ld	r24, Z
			orient--;
    228c:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    228e:	66 23       	and	r22, r22
    2290:	c1 f7       	brne	.-16     	; 0x2282 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    2292:	08 95       	ret

00002294 <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    2294:	2f 92       	push	r2
    2296:	3f 92       	push	r3
    2298:	4f 92       	push	r4
    229a:	5f 92       	push	r5
    229c:	6f 92       	push	r6
    229e:	7f 92       	push	r7
    22a0:	8f 92       	push	r8
    22a2:	9f 92       	push	r9
    22a4:	af 92       	push	r10
    22a6:	bf 92       	push	r11
    22a8:	cf 92       	push	r12
    22aa:	df 92       	push	r13
    22ac:	ef 92       	push	r14
    22ae:	ff 92       	push	r15
    22b0:	0f 93       	push	r16
    22b2:	1f 93       	push	r17
    22b4:	df 93       	push	r29
    22b6:	cf 93       	push	r28
    22b8:	cd b7       	in	r28, 0x3d	; 61
    22ba:	de b7       	in	r29, 0x3e	; 62
    22bc:	a0 97       	sbiw	r28, 0x20	; 32
    22be:	0f b6       	in	r0, 0x3f	; 63
    22c0:	f8 94       	cli
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	0f be       	out	0x3f, r0	; 63
    22c6:	cd bf       	out	0x3d, r28	; 61
    22c8:	2b 01       	movw	r4, r22
    22ca:	3c 01       	movw	r6, r24
    22cc:	2d 83       	std	Y+5, r18	; 0x05
    22ce:	3e 83       	std	Y+6, r19	; 0x06
    22d0:	4f 83       	std	Y+7, r20	; 0x07
    22d2:	58 87       	std	Y+8, r21	; 0x08
    22d4:	e9 86       	std	Y+9, r14	; 0x09
    22d6:	fa 86       	std	Y+10, r15	; 0x0a
    22d8:	0b 87       	std	Y+11, r16	; 0x0b
    22da:	1c 87       	std	Y+12, r17	; 0x0c
    22dc:	ad 86       	std	Y+13, r10	; 0x0d
    22de:	be 86       	std	Y+14, r11	; 0x0e
    22e0:	cf 86       	std	Y+15, r12	; 0x0f
    22e2:	d8 8a       	std	Y+16, r13	; 0x10
    22e4:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    22e6:	33 24       	eor	r3, r3
    22e8:	ca 01       	movw	r24, r20
    22ea:	b9 01       	movw	r22, r18
    22ec:	20 e0       	ldi	r18, 0x00	; 0
    22ee:	30 e0       	ldi	r19, 0x00	; 0
    22f0:	40 e0       	ldi	r20, 0x00	; 0
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__gesf2>
    22f8:	18 16       	cp	r1, r24
    22fa:	14 f4       	brge	.+4      	; 0x2300 <move_arc_stnb+0x6c>
    22fc:	33 24       	eor	r3, r3
    22fe:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    2300:	6d 81       	ldd	r22, Y+5	; 0x05
    2302:	7e 81       	ldd	r23, Y+6	; 0x06
    2304:	8f 81       	ldd	r24, Y+7	; 0x07
    2306:	98 85       	ldd	r25, Y+8	; 0x08
    2308:	2c ed       	ldi	r18, 0xDC	; 220
    230a:	38 eb       	ldi	r19, 0xB8	; 184
    230c:	48 e0       	ldi	r20, 0x08	; 8
    230e:	5e e3       	ldi	r21, 0x3E	; 62
    2310:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2314:	0e 94 1a 2b 	call	0x5634	; 0x5634 <__fixsfsi>
    2318:	9b 01       	movw	r18, r22
    231a:	77 ff       	sbrs	r23, 7
    231c:	03 c0       	rjmp	.+6      	; 0x2324 <move_arc_stnb+0x90>
    231e:	30 95       	com	r19
    2320:	21 95       	neg	r18
    2322:	3f 4f       	sbci	r19, 0xFF	; 255
    2324:	b9 01       	movw	r22, r18
    2326:	88 27       	eor	r24, r24
    2328:	77 fd       	sbrc	r23, 7
    232a:	80 95       	com	r24
    232c:	98 2f       	mov	r25, r24
    232e:	0e 94 4d 2b 	call	0x569a	; 0x569a <__floatsisf>
    2332:	69 83       	std	Y+1, r22	; 0x01
    2334:	7a 83       	std	Y+2, r23	; 0x02
    2336:	8b 83       	std	Y+3, r24	; 0x03
    2338:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    233a:	69 85       	ldd	r22, Y+9	; 0x09
    233c:	7a 85       	ldd	r23, Y+10	; 0x0a
    233e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2340:	9c 85       	ldd	r25, Y+12	; 0x0c
    2342:	2c ed       	ldi	r18, 0xDC	; 220
    2344:	38 eb       	ldi	r19, 0xB8	; 184
    2346:	48 e0       	ldi	r20, 0x08	; 8
    2348:	5e e3       	ldi	r21, 0x3E	; 62
    234a:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    234e:	0e 94 1a 2b 	call	0x5634	; 0x5634 <__fixsfsi>
    2352:	9b 01       	movw	r18, r22
    2354:	77 ff       	sbrs	r23, 7
    2356:	03 c0       	rjmp	.+6      	; 0x235e <move_arc_stnb+0xca>
    2358:	30 95       	com	r19
    235a:	21 95       	neg	r18
    235c:	3f 4f       	sbci	r19, 0xFF	; 255
    235e:	b9 01       	movw	r22, r18
    2360:	88 27       	eor	r24, r24
    2362:	77 fd       	sbrc	r23, 7
    2364:	80 95       	com	r24
    2366:	98 2f       	mov	r25, r24
    2368:	0e 94 4d 2b 	call	0x569a	; 0x569a <__floatsisf>
    236c:	4b 01       	movw	r8, r22
    236e:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    2370:	6d 85       	ldd	r22, Y+13	; 0x0d
    2372:	7e 85       	ldd	r23, Y+14	; 0x0e
    2374:	8f 85       	ldd	r24, Y+15	; 0x0f
    2376:	98 89       	ldd	r25, Y+16	; 0x10
    2378:	2c ed       	ldi	r18, 0xDC	; 220
    237a:	38 eb       	ldi	r19, 0xB8	; 184
    237c:	48 e0       	ldi	r20, 0x08	; 8
    237e:	5e e3       	ldi	r21, 0x3E	; 62
    2380:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2384:	0e 94 1a 2b 	call	0x5634	; 0x5634 <__fixsfsi>
    2388:	9b 01       	movw	r18, r22
    238a:	77 ff       	sbrs	r23, 7
    238c:	03 c0       	rjmp	.+6      	; 0x2394 <move_arc_stnb+0x100>
    238e:	30 95       	com	r19
    2390:	21 95       	neg	r18
    2392:	3f 4f       	sbci	r19, 0xFF	; 255
    2394:	b9 01       	movw	r22, r18
    2396:	88 27       	eor	r24, r24
    2398:	77 fd       	sbrc	r23, 7
    239a:	80 95       	com	r24
    239c:	98 2f       	mov	r25, r24
    239e:	0e 94 4d 2b 	call	0x569a	; 0x569a <__floatsisf>
    23a2:	6b 01       	movw	r12, r22
    23a4:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    23a6:	c3 01       	movw	r24, r6
    23a8:	b2 01       	movw	r22, r4
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e0       	ldi	r20, 0x00	; 0
    23b0:	5f e4       	ldi	r21, 0x4F	; 79
    23b2:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
    23b6:	88 23       	and	r24, r24
    23b8:	a1 f5       	brne	.+104    	; 0x2422 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    23ba:	69 81       	ldd	r22, Y+1	; 0x01
    23bc:	7a 81       	ldd	r23, Y+2	; 0x02
    23be:	8b 81       	ldd	r24, Y+3	; 0x03
    23c0:	9c 81       	ldd	r25, Y+4	; 0x04
    23c2:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    23c6:	2b 01       	movw	r4, r22
    23c8:	3c 01       	movw	r6, r24
    23ca:	c5 01       	movw	r24, r10
    23cc:	b4 01       	movw	r22, r8
    23ce:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    23d2:	4b 01       	movw	r8, r22
    23d4:	5c 01       	movw	r10, r24
    23d6:	c7 01       	movw	r24, r14
    23d8:	b6 01       	movw	r22, r12
    23da:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    23de:	6b 01       	movw	r12, r22
    23e0:	7c 01       	movw	r14, r24
    23e2:	2d b7       	in	r18, 0x3d	; 61
    23e4:	3e b7       	in	r19, 0x3e	; 62
    23e6:	29 50       	subi	r18, 0x09	; 9
    23e8:	30 40       	sbci	r19, 0x00	; 0
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	3e bf       	out	0x3e, r19	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	2d bf       	out	0x3d, r18	; 61
    23f4:	ed b7       	in	r30, 0x3d	; 61
    23f6:	fe b7       	in	r31, 0x3e	; 62
    23f8:	31 96       	adiw	r30, 0x01	; 1
    23fa:	ad b7       	in	r26, 0x3d	; 61
    23fc:	be b7       	in	r27, 0x3e	; 62
    23fe:	12 96       	adiw	r26, 0x02	; 2
    2400:	5c 92       	st	X, r5
    2402:	4e 92       	st	-X, r4
    2404:	11 97       	sbiw	r26, 0x01	; 1
    2406:	93 82       	std	Z+3, r9	; 0x03
    2408:	82 82       	std	Z+2, r8	; 0x02
    240a:	75 83       	std	Z+5, r23	; 0x05
    240c:	64 83       	std	Z+4, r22	; 0x04
    240e:	26 82       	std	Z+6, r2	; 0x06
    2410:	10 86       	std	Z+8, r1	; 0x08
    2412:	17 82       	std	Z+7, r1	; 0x07
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	62 e0       	ldi	r22, 0x02	; 2
    2418:	43 2d       	mov	r20, r3
    241a:	92 01       	movw	r18, r4
    241c:	84 01       	movw	r16, r8
    241e:	76 01       	movw	r14, r12
    2420:	c1 c1       	rjmp	.+898    	; 0x27a4 <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    2422:	c3 01       	movw	r24, r6
    2424:	b2 01       	movw	r22, r4
    2426:	20 e0       	ldi	r18, 0x00	; 0
    2428:	30 e0       	ldi	r19, 0x00	; 0
    242a:	40 e0       	ldi	r20, 0x00	; 0
    242c:	50 e0       	ldi	r21, 0x00	; 0
    242e:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
    2432:	88 23       	and	r24, r24
    2434:	e9 f5       	brne	.+122    	; 0x24b0 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    2436:	69 81       	ldd	r22, Y+1	; 0x01
    2438:	7a 81       	ldd	r23, Y+2	; 0x02
    243a:	8b 81       	ldd	r24, Y+3	; 0x03
    243c:	9c 81       	ldd	r25, Y+4	; 0x04
    243e:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2442:	3b 01       	movw	r6, r22
    2444:	c5 01       	movw	r24, r10
    2446:	b4 01       	movw	r22, r8
    2448:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    244c:	8b 01       	movw	r16, r22
    244e:	c7 01       	movw	r24, r14
    2450:	b6 01       	movw	r22, r12
    2452:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2456:	7b 01       	movw	r14, r22
    2458:	2d b7       	in	r18, 0x3d	; 61
    245a:	3e b7       	in	r19, 0x3e	; 62
    245c:	29 50       	subi	r18, 0x09	; 9
    245e:	30 40       	sbci	r19, 0x00	; 0
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	3e bf       	out	0x3e, r19	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	2d bf       	out	0x3d, r18	; 61
    246a:	ed b7       	in	r30, 0x3d	; 61
    246c:	fe b7       	in	r31, 0x3e	; 62
    246e:	31 96       	adiw	r30, 0x01	; 1
    2470:	40 e0       	ldi	r20, 0x00	; 0
    2472:	33 20       	and	r3, r3
    2474:	09 f4       	brne	.+2      	; 0x2478 <move_arc_stnb+0x1e4>
    2476:	41 e0       	ldi	r20, 0x01	; 1
    2478:	71 82       	std	Z+1, r7	; 0x01
    247a:	60 82       	st	Z, r6
    247c:	13 83       	std	Z+3, r17	; 0x03
    247e:	02 83       	std	Z+2, r16	; 0x02
    2480:	f5 82       	std	Z+5, r15	; 0x05
    2482:	e4 82       	std	Z+4, r14	; 0x04
    2484:	26 82       	std	Z+6, r2	; 0x06
    2486:	10 86       	std	Z+8, r1	; 0x08
    2488:	17 82       	std	Z+7, r1	; 0x07
    248a:	81 e0       	ldi	r24, 0x01	; 1
    248c:	62 e0       	ldi	r22, 0x02	; 2
    248e:	93 01       	movw	r18, r6
    2490:	c2 2c       	mov	r12, r2
    2492:	aa 24       	eor	r10, r10
    2494:	bb 24       	eor	r11, r11
    2496:	83 2c       	mov	r8, r3
    2498:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <STEPPER_move>
    249c:	81 e0       	ldi	r24, 0x01	; 1
    249e:	ad b7       	in	r26, 0x3d	; 61
    24a0:	be b7       	in	r27, 0x3e	; 62
    24a2:	19 96       	adiw	r26, 0x09	; 9
    24a4:	0f b6       	in	r0, 0x3f	; 63
    24a6:	f8 94       	cli
    24a8:	be bf       	out	0x3e, r27	; 62
    24aa:	0f be       	out	0x3f, r0	; 63
    24ac:	ad bf       	out	0x3d, r26	; 61
    24ae:	89 c1       	rjmp	.+786    	; 0x27c2 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    24b0:	c3 01       	movw	r24, r6
    24b2:	b2 01       	movw	r22, r4
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	40 e0       	ldi	r20, 0x00	; 0
    24ba:	50 e0       	ldi	r21, 0x00	; 0
    24bc:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__gesf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	0c f0       	brlt	.+2      	; 0x24c6 <move_arc_stnb+0x232>
    24c4:	b1 c0       	rjmp	.+354    	; 0x2628 <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    24c6:	66 e6       	ldi	r22, 0x66	; 102
    24c8:	76 e6       	ldi	r23, 0x66	; 102
    24ca:	8a ea       	ldi	r24, 0xAA	; 170
    24cc:	91 ec       	ldi	r25, 0xC1	; 193
    24ce:	a3 01       	movw	r20, r6
    24d0:	92 01       	movw	r18, r4
    24d2:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e8       	ldi	r20, 0x80	; 128
    24dc:	5f e3       	ldi	r21, 0x3F	; 63
    24de:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    24e2:	7b 01       	movw	r14, r22
    24e4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    24e6:	66 e6       	ldi	r22, 0x66	; 102
    24e8:	76 e6       	ldi	r23, 0x66	; 102
    24ea:	8a ea       	ldi	r24, 0xAA	; 170
    24ec:	91 e4       	ldi	r25, 0x41	; 65
    24ee:	a3 01       	movw	r20, r6
    24f0:	92 01       	movw	r18, r4
    24f2:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    24f6:	20 e0       	ldi	r18, 0x00	; 0
    24f8:	30 e0       	ldi	r19, 0x00	; 0
    24fa:	40 e8       	ldi	r20, 0x80	; 128
    24fc:	5f e3       	ldi	r21, 0x3F	; 63
    24fe:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    2502:	5b 01       	movw	r10, r22
    2504:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    2506:	ed b7       	in	r30, 0x3d	; 61
    2508:	fe b7       	in	r31, 0x3e	; 62
    250a:	39 97       	sbiw	r30, 0x09	; 9
    250c:	0f b6       	in	r0, 0x3f	; 63
    250e:	f8 94       	cli
    2510:	fe bf       	out	0x3e, r31	; 62
    2512:	0f be       	out	0x3f, r0	; 63
    2514:	ed bf       	out	0x3d, r30	; 61
    2516:	8d b6       	in	r8, 0x3d	; 61
    2518:	9e b6       	in	r9, 0x3e	; 62
    251a:	08 94       	sec
    251c:	81 1c       	adc	r8, r1
    251e:	91 1c       	adc	r9, r1
    2520:	6d 81       	ldd	r22, Y+5	; 0x05
    2522:	7e 81       	ldd	r23, Y+6	; 0x06
    2524:	8f 81       	ldd	r24, Y+7	; 0x07
    2526:	98 85       	ldd	r25, Y+8	; 0x08
    2528:	a8 01       	movw	r20, r16
    252a:	97 01       	movw	r18, r14
    252c:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2530:	2c ed       	ldi	r18, 0xDC	; 220
    2532:	38 eb       	ldi	r19, 0xB8	; 184
    2534:	48 e0       	ldi	r20, 0x08	; 8
    2536:	5e e3       	ldi	r21, 0x3E	; 62
    2538:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    253c:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2540:	69 8b       	std	Y+17, r22	; 0x11
    2542:	7a 8b       	std	Y+18, r23	; 0x12
    2544:	8b 8b       	std	Y+19, r24	; 0x13
    2546:	9c 8b       	std	Y+20, r25	; 0x14
    2548:	69 85       	ldd	r22, Y+9	; 0x09
    254a:	7a 85       	ldd	r23, Y+10	; 0x0a
    254c:	8b 85       	ldd	r24, Y+11	; 0x0b
    254e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2550:	a8 01       	movw	r20, r16
    2552:	97 01       	movw	r18, r14
    2554:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2558:	2c ed       	ldi	r18, 0xDC	; 220
    255a:	38 eb       	ldi	r19, 0xB8	; 184
    255c:	48 e0       	ldi	r20, 0x08	; 8
    255e:	5e e3       	ldi	r21, 0x3E	; 62
    2560:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2564:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2568:	6d 8b       	std	Y+21, r22	; 0x15
    256a:	7e 8b       	std	Y+22, r23	; 0x16
    256c:	8f 8b       	std	Y+23, r24	; 0x17
    256e:	98 8f       	std	Y+24, r25	; 0x18
    2570:	6d 85       	ldd	r22, Y+13	; 0x0d
    2572:	7e 85       	ldd	r23, Y+14	; 0x0e
    2574:	8f 85       	ldd	r24, Y+15	; 0x0f
    2576:	98 89       	ldd	r25, Y+16	; 0x10
    2578:	a8 01       	movw	r20, r16
    257a:	97 01       	movw	r18, r14
    257c:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2580:	2c ed       	ldi	r18, 0xDC	; 220
    2582:	38 eb       	ldi	r19, 0xB8	; 184
    2584:	48 e0       	ldi	r20, 0x08	; 8
    2586:	5e e3       	ldi	r21, 0x3E	; 62
    2588:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    258c:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2590:	2b 01       	movw	r4, r22
    2592:	3c 01       	movw	r6, r24
    2594:	6d 81       	ldd	r22, Y+5	; 0x05
    2596:	7e 81       	ldd	r23, Y+6	; 0x06
    2598:	8f 81       	ldd	r24, Y+7	; 0x07
    259a:	98 85       	ldd	r25, Y+8	; 0x08
    259c:	a6 01       	movw	r20, r12
    259e:	95 01       	movw	r18, r10
    25a0:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    25a4:	2c ed       	ldi	r18, 0xDC	; 220
    25a6:	38 eb       	ldi	r19, 0xB8	; 184
    25a8:	48 e0       	ldi	r20, 0x08	; 8
    25aa:	5e e3       	ldi	r21, 0x3E	; 62
    25ac:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    25b0:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    25b4:	d4 01       	movw	r26, r8
    25b6:	6d 93       	st	X+, r22
    25b8:	7c 93       	st	X, r23
    25ba:	69 85       	ldd	r22, Y+9	; 0x09
    25bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    25be:	8b 85       	ldd	r24, Y+11	; 0x0b
    25c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    25c2:	a6 01       	movw	r20, r12
    25c4:	95 01       	movw	r18, r10
    25c6:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    25ca:	2c ed       	ldi	r18, 0xDC	; 220
    25cc:	38 eb       	ldi	r19, 0xB8	; 184
    25ce:	48 e0       	ldi	r20, 0x08	; 8
    25d0:	5e e3       	ldi	r21, 0x3E	; 62
    25d2:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    25d6:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    25da:	f4 01       	movw	r30, r8
    25dc:	73 83       	std	Z+3, r23	; 0x03
    25de:	62 83       	std	Z+2, r22	; 0x02
    25e0:	6d 85       	ldd	r22, Y+13	; 0x0d
    25e2:	7e 85       	ldd	r23, Y+14	; 0x0e
    25e4:	8f 85       	ldd	r24, Y+15	; 0x0f
    25e6:	98 89       	ldd	r25, Y+16	; 0x10
    25e8:	a6 01       	movw	r20, r12
    25ea:	95 01       	movw	r18, r10
    25ec:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    25f0:	2c ed       	ldi	r18, 0xDC	; 220
    25f2:	38 eb       	ldi	r19, 0xB8	; 184
    25f4:	48 e0       	ldi	r20, 0x08	; 8
    25f6:	5e e3       	ldi	r21, 0x3E	; 62
    25f8:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    25fc:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2600:	d4 01       	movw	r26, r8
    2602:	15 96       	adiw	r26, 0x05	; 5
    2604:	7c 93       	st	X, r23
    2606:	6e 93       	st	-X, r22
    2608:	14 97       	sbiw	r26, 0x04	; 4
    260a:	16 96       	adiw	r26, 0x06	; 6
    260c:	2c 92       	st	X, r2
    260e:	16 97       	sbiw	r26, 0x06	; 6
    2610:	18 96       	adiw	r26, 0x08	; 8
    2612:	1c 92       	st	X, r1
    2614:	1e 92       	st	-X, r1
    2616:	17 97       	sbiw	r26, 0x07	; 7
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	62 e0       	ldi	r22, 0x02	; 2
    261c:	43 2d       	mov	r20, r3
    261e:	29 89       	ldd	r18, Y+17	; 0x11
    2620:	3a 89       	ldd	r19, Y+18	; 0x12
    2622:	0d 89       	ldd	r16, Y+21	; 0x15
    2624:	1e 89       	ldd	r17, Y+22	; 0x16
    2626:	bd c0       	rjmp	.+378    	; 0x27a2 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    2628:	c3 01       	movw	r24, r6
    262a:	b2 01       	movw	r22, r4
    262c:	20 e0       	ldi	r18, 0x00	; 0
    262e:	30 e0       	ldi	r19, 0x00	; 0
    2630:	40 e0       	ldi	r20, 0x00	; 0
    2632:	50 e0       	ldi	r21, 0x00	; 0
    2634:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
    2638:	87 fd       	sbrc	r24, 7
    263a:	02 c0       	rjmp	.+4      	; 0x2640 <move_arc_stnb+0x3ac>
    263c:	80 e0       	ldi	r24, 0x00	; 0
    263e:	c1 c0       	rjmp	.+386    	; 0x27c2 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2640:	66 e6       	ldi	r22, 0x66	; 102
    2642:	76 e6       	ldi	r23, 0x66	; 102
    2644:	8a ea       	ldi	r24, 0xAA	; 170
    2646:	91 e4       	ldi	r25, 0x41	; 65
    2648:	a3 01       	movw	r20, r6
    264a:	92 01       	movw	r18, r4
    264c:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	40 e8       	ldi	r20, 0x80	; 128
    2656:	5f e3       	ldi	r21, 0x3F	; 63
    2658:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    265c:	7b 01       	movw	r14, r22
    265e:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2660:	66 e6       	ldi	r22, 0x66	; 102
    2662:	76 e6       	ldi	r23, 0x66	; 102
    2664:	8a ea       	ldi	r24, 0xAA	; 170
    2666:	91 ec       	ldi	r25, 0xC1	; 193
    2668:	a3 01       	movw	r20, r6
    266a:	92 01       	movw	r18, r4
    266c:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	40 e8       	ldi	r20, 0x80	; 128
    2676:	5f e3       	ldi	r21, 0x3F	; 63
    2678:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    267c:	5b 01       	movw	r10, r22
    267e:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    2680:	2d b7       	in	r18, 0x3d	; 61
    2682:	3e b7       	in	r19, 0x3e	; 62
    2684:	29 50       	subi	r18, 0x09	; 9
    2686:	30 40       	sbci	r19, 0x00	; 0
    2688:	0f b6       	in	r0, 0x3f	; 63
    268a:	f8 94       	cli
    268c:	3e bf       	out	0x3e, r19	; 62
    268e:	0f be       	out	0x3f, r0	; 63
    2690:	2d bf       	out	0x3d, r18	; 61
    2692:	8d b6       	in	r8, 0x3d	; 61
    2694:	9e b6       	in	r9, 0x3e	; 62
    2696:	08 94       	sec
    2698:	81 1c       	adc	r8, r1
    269a:	91 1c       	adc	r9, r1
    269c:	6d 81       	ldd	r22, Y+5	; 0x05
    269e:	7e 81       	ldd	r23, Y+6	; 0x06
    26a0:	8f 81       	ldd	r24, Y+7	; 0x07
    26a2:	98 85       	ldd	r25, Y+8	; 0x08
    26a4:	a8 01       	movw	r20, r16
    26a6:	97 01       	movw	r18, r14
    26a8:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    26ac:	2c ed       	ldi	r18, 0xDC	; 220
    26ae:	38 eb       	ldi	r19, 0xB8	; 184
    26b0:	48 e0       	ldi	r20, 0x08	; 8
    26b2:	5e e3       	ldi	r21, 0x3E	; 62
    26b4:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    26b8:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    26bc:	69 8f       	std	Y+25, r22	; 0x19
    26be:	7a 8f       	std	Y+26, r23	; 0x1a
    26c0:	8b 8f       	std	Y+27, r24	; 0x1b
    26c2:	9c 8f       	std	Y+28, r25	; 0x1c
    26c4:	69 85       	ldd	r22, Y+9	; 0x09
    26c6:	7a 85       	ldd	r23, Y+10	; 0x0a
    26c8:	8b 85       	ldd	r24, Y+11	; 0x0b
    26ca:	9c 85       	ldd	r25, Y+12	; 0x0c
    26cc:	a8 01       	movw	r20, r16
    26ce:	97 01       	movw	r18, r14
    26d0:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    26d4:	2c ed       	ldi	r18, 0xDC	; 220
    26d6:	38 eb       	ldi	r19, 0xB8	; 184
    26d8:	48 e0       	ldi	r20, 0x08	; 8
    26da:	5e e3       	ldi	r21, 0x3E	; 62
    26dc:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    26e0:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    26e4:	6d 8f       	std	Y+29, r22	; 0x1d
    26e6:	7e 8f       	std	Y+30, r23	; 0x1e
    26e8:	8f 8f       	std	Y+31, r24	; 0x1f
    26ea:	98 a3       	std	Y+32, r25	; 0x20
    26ec:	6d 85       	ldd	r22, Y+13	; 0x0d
    26ee:	7e 85       	ldd	r23, Y+14	; 0x0e
    26f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    26f2:	98 89       	ldd	r25, Y+16	; 0x10
    26f4:	a8 01       	movw	r20, r16
    26f6:	97 01       	movw	r18, r14
    26f8:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    26fc:	2c ed       	ldi	r18, 0xDC	; 220
    26fe:	38 eb       	ldi	r19, 0xB8	; 184
    2700:	48 e0       	ldi	r20, 0x08	; 8
    2702:	5e e3       	ldi	r21, 0x3E	; 62
    2704:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2708:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    270c:	2b 01       	movw	r4, r22
    270e:	3c 01       	movw	r6, r24
    2710:	6d 81       	ldd	r22, Y+5	; 0x05
    2712:	7e 81       	ldd	r23, Y+6	; 0x06
    2714:	8f 81       	ldd	r24, Y+7	; 0x07
    2716:	98 85       	ldd	r25, Y+8	; 0x08
    2718:	a6 01       	movw	r20, r12
    271a:	95 01       	movw	r18, r10
    271c:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2720:	2c ed       	ldi	r18, 0xDC	; 220
    2722:	38 eb       	ldi	r19, 0xB8	; 184
    2724:	48 e0       	ldi	r20, 0x08	; 8
    2726:	5e e3       	ldi	r21, 0x3E	; 62
    2728:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    272c:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2730:	d4 01       	movw	r26, r8
    2732:	6d 93       	st	X+, r22
    2734:	7c 93       	st	X, r23
    2736:	69 85       	ldd	r22, Y+9	; 0x09
    2738:	7a 85       	ldd	r23, Y+10	; 0x0a
    273a:	8b 85       	ldd	r24, Y+11	; 0x0b
    273c:	9c 85       	ldd	r25, Y+12	; 0x0c
    273e:	a6 01       	movw	r20, r12
    2740:	95 01       	movw	r18, r10
    2742:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2746:	2c ed       	ldi	r18, 0xDC	; 220
    2748:	38 eb       	ldi	r19, 0xB8	; 184
    274a:	48 e0       	ldi	r20, 0x08	; 8
    274c:	5e e3       	ldi	r21, 0x3E	; 62
    274e:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2752:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2756:	f4 01       	movw	r30, r8
    2758:	73 83       	std	Z+3, r23	; 0x03
    275a:	62 83       	std	Z+2, r22	; 0x02
    275c:	6d 85       	ldd	r22, Y+13	; 0x0d
    275e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2760:	8f 85       	ldd	r24, Y+15	; 0x0f
    2762:	98 89       	ldd	r25, Y+16	; 0x10
    2764:	a6 01       	movw	r20, r12
    2766:	95 01       	movw	r18, r10
    2768:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    276c:	2c ed       	ldi	r18, 0xDC	; 220
    276e:	38 eb       	ldi	r19, 0xB8	; 184
    2770:	48 e0       	ldi	r20, 0x08	; 8
    2772:	5e e3       	ldi	r21, 0x3E	; 62
    2774:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2778:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    277c:	d4 01       	movw	r26, r8
    277e:	15 96       	adiw	r26, 0x05	; 5
    2780:	7c 93       	st	X, r23
    2782:	6e 93       	st	-X, r22
    2784:	14 97       	sbiw	r26, 0x04	; 4
    2786:	16 96       	adiw	r26, 0x06	; 6
    2788:	2c 92       	st	X, r2
    278a:	16 97       	sbiw	r26, 0x06	; 6
    278c:	18 96       	adiw	r26, 0x08	; 8
    278e:	1c 92       	st	X, r1
    2790:	1e 92       	st	-X, r1
    2792:	17 97       	sbiw	r26, 0x07	; 7
    2794:	81 e0       	ldi	r24, 0x01	; 1
    2796:	62 e0       	ldi	r22, 0x02	; 2
    2798:	43 2d       	mov	r20, r3
    279a:	29 8d       	ldd	r18, Y+25	; 0x19
    279c:	3a 8d       	ldd	r19, Y+26	; 0x1a
    279e:	0d 8d       	ldd	r16, Y+29	; 0x1d
    27a0:	1e 8d       	ldd	r17, Y+30	; 0x1e
    27a2:	72 01       	movw	r14, r4
    27a4:	c2 2c       	mov	r12, r2
    27a6:	aa 24       	eor	r10, r10
    27a8:	bb 24       	eor	r11, r11
    27aa:	83 2c       	mov	r8, r3
    27ac:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <STEPPER_move>
    27b0:	81 e0       	ldi	r24, 0x01	; 1
    27b2:	ed b7       	in	r30, 0x3d	; 61
    27b4:	fe b7       	in	r31, 0x3e	; 62
    27b6:	39 96       	adiw	r30, 0x09	; 9
    27b8:	0f b6       	in	r0, 0x3f	; 63
    27ba:	f8 94       	cli
    27bc:	fe bf       	out	0x3e, r31	; 62
    27be:	0f be       	out	0x3f, r0	; 63
    27c0:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    27c2:	a0 96       	adiw	r28, 0x20	; 32
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	cf 91       	pop	r28
    27d0:	df 91       	pop	r29
    27d2:	1f 91       	pop	r17
    27d4:	0f 91       	pop	r16
    27d6:	ff 90       	pop	r15
    27d8:	ef 90       	pop	r14
    27da:	df 90       	pop	r13
    27dc:	cf 90       	pop	r12
    27de:	bf 90       	pop	r11
    27e0:	af 90       	pop	r10
    27e2:	9f 90       	pop	r9
    27e4:	8f 90       	pop	r8
    27e6:	7f 90       	pop	r7
    27e8:	6f 90       	pop	r6
    27ea:	5f 90       	pop	r5
    27ec:	4f 90       	pop	r4
    27ee:	3f 90       	pop	r3
    27f0:	2f 90       	pop	r2
    27f2:	08 95       	ret

000027f4 <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    27f4:	2f 92       	push	r2
    27f6:	3f 92       	push	r3
    27f8:	4f 92       	push	r4
    27fa:	5f 92       	push	r5
    27fc:	6f 92       	push	r6
    27fe:	7f 92       	push	r7
    2800:	8f 92       	push	r8
    2802:	9f 92       	push	r9
    2804:	af 92       	push	r10
    2806:	bf 92       	push	r11
    2808:	cf 92       	push	r12
    280a:	df 92       	push	r13
    280c:	ef 92       	push	r14
    280e:	ff 92       	push	r15
    2810:	0f 93       	push	r16
    2812:	1f 93       	push	r17
    2814:	df 93       	push	r29
    2816:	cf 93       	push	r28
    2818:	cd b7       	in	r28, 0x3d	; 61
    281a:	de b7       	in	r29, 0x3e	; 62
    281c:	a0 97       	sbiw	r28, 0x20	; 32
    281e:	0f b6       	in	r0, 0x3f	; 63
    2820:	f8 94       	cli
    2822:	de bf       	out	0x3e, r29	; 62
    2824:	0f be       	out	0x3f, r0	; 63
    2826:	cd bf       	out	0x3d, r28	; 61
    2828:	2b 01       	movw	r4, r22
    282a:	3c 01       	movw	r6, r24
    282c:	2d 83       	std	Y+5, r18	; 0x05
    282e:	3e 83       	std	Y+6, r19	; 0x06
    2830:	4f 83       	std	Y+7, r20	; 0x07
    2832:	58 87       	std	Y+8, r21	; 0x08
    2834:	e9 86       	std	Y+9, r14	; 0x09
    2836:	fa 86       	std	Y+10, r15	; 0x0a
    2838:	0b 87       	std	Y+11, r16	; 0x0b
    283a:	1c 87       	std	Y+12, r17	; 0x0c
    283c:	ad 86       	std	Y+13, r10	; 0x0d
    283e:	be 86       	std	Y+14, r11	; 0x0e
    2840:	cf 86       	std	Y+15, r12	; 0x0f
    2842:	d8 8a       	std	Y+16, r13	; 0x10
    2844:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    2846:	33 24       	eor	r3, r3
    2848:	ca 01       	movw	r24, r20
    284a:	b9 01       	movw	r22, r18
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e0       	ldi	r20, 0x00	; 0
    2852:	50 e0       	ldi	r21, 0x00	; 0
    2854:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__gesf2>
    2858:	18 16       	cp	r1, r24
    285a:	14 f4       	brge	.+4      	; 0x2860 <move_arc_stwt+0x6c>
    285c:	33 24       	eor	r3, r3
    285e:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    2860:	6d 81       	ldd	r22, Y+5	; 0x05
    2862:	7e 81       	ldd	r23, Y+6	; 0x06
    2864:	8f 81       	ldd	r24, Y+7	; 0x07
    2866:	98 85       	ldd	r25, Y+8	; 0x08
    2868:	2c ed       	ldi	r18, 0xDC	; 220
    286a:	38 eb       	ldi	r19, 0xB8	; 184
    286c:	48 e0       	ldi	r20, 0x08	; 8
    286e:	5e e3       	ldi	r21, 0x3E	; 62
    2870:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2874:	0e 94 1a 2b 	call	0x5634	; 0x5634 <__fixsfsi>
    2878:	9b 01       	movw	r18, r22
    287a:	77 ff       	sbrs	r23, 7
    287c:	03 c0       	rjmp	.+6      	; 0x2884 <move_arc_stwt+0x90>
    287e:	30 95       	com	r19
    2880:	21 95       	neg	r18
    2882:	3f 4f       	sbci	r19, 0xFF	; 255
    2884:	b9 01       	movw	r22, r18
    2886:	88 27       	eor	r24, r24
    2888:	77 fd       	sbrc	r23, 7
    288a:	80 95       	com	r24
    288c:	98 2f       	mov	r25, r24
    288e:	0e 94 4d 2b 	call	0x569a	; 0x569a <__floatsisf>
    2892:	69 83       	std	Y+1, r22	; 0x01
    2894:	7a 83       	std	Y+2, r23	; 0x02
    2896:	8b 83       	std	Y+3, r24	; 0x03
    2898:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    289a:	69 85       	ldd	r22, Y+9	; 0x09
    289c:	7a 85       	ldd	r23, Y+10	; 0x0a
    289e:	8b 85       	ldd	r24, Y+11	; 0x0b
    28a0:	9c 85       	ldd	r25, Y+12	; 0x0c
    28a2:	2c ed       	ldi	r18, 0xDC	; 220
    28a4:	38 eb       	ldi	r19, 0xB8	; 184
    28a6:	48 e0       	ldi	r20, 0x08	; 8
    28a8:	5e e3       	ldi	r21, 0x3E	; 62
    28aa:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    28ae:	0e 94 1a 2b 	call	0x5634	; 0x5634 <__fixsfsi>
    28b2:	9b 01       	movw	r18, r22
    28b4:	77 ff       	sbrs	r23, 7
    28b6:	03 c0       	rjmp	.+6      	; 0x28be <move_arc_stwt+0xca>
    28b8:	30 95       	com	r19
    28ba:	21 95       	neg	r18
    28bc:	3f 4f       	sbci	r19, 0xFF	; 255
    28be:	b9 01       	movw	r22, r18
    28c0:	88 27       	eor	r24, r24
    28c2:	77 fd       	sbrc	r23, 7
    28c4:	80 95       	com	r24
    28c6:	98 2f       	mov	r25, r24
    28c8:	0e 94 4d 2b 	call	0x569a	; 0x569a <__floatsisf>
    28cc:	4b 01       	movw	r8, r22
    28ce:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    28d0:	6d 85       	ldd	r22, Y+13	; 0x0d
    28d2:	7e 85       	ldd	r23, Y+14	; 0x0e
    28d4:	8f 85       	ldd	r24, Y+15	; 0x0f
    28d6:	98 89       	ldd	r25, Y+16	; 0x10
    28d8:	2c ed       	ldi	r18, 0xDC	; 220
    28da:	38 eb       	ldi	r19, 0xB8	; 184
    28dc:	48 e0       	ldi	r20, 0x08	; 8
    28de:	5e e3       	ldi	r21, 0x3E	; 62
    28e0:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    28e4:	0e 94 1a 2b 	call	0x5634	; 0x5634 <__fixsfsi>
    28e8:	9b 01       	movw	r18, r22
    28ea:	77 ff       	sbrs	r23, 7
    28ec:	03 c0       	rjmp	.+6      	; 0x28f4 <move_arc_stwt+0x100>
    28ee:	30 95       	com	r19
    28f0:	21 95       	neg	r18
    28f2:	3f 4f       	sbci	r19, 0xFF	; 255
    28f4:	b9 01       	movw	r22, r18
    28f6:	88 27       	eor	r24, r24
    28f8:	77 fd       	sbrc	r23, 7
    28fa:	80 95       	com	r24
    28fc:	98 2f       	mov	r25, r24
    28fe:	0e 94 4d 2b 	call	0x569a	; 0x569a <__floatsisf>
    2902:	6b 01       	movw	r12, r22
    2904:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    2906:	c3 01       	movw	r24, r6
    2908:	b2 01       	movw	r22, r4
    290a:	20 e0       	ldi	r18, 0x00	; 0
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	5f e4       	ldi	r21, 0x4F	; 79
    2912:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
    2916:	88 23       	and	r24, r24
    2918:	a1 f5       	brne	.+104    	; 0x2982 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    291a:	69 81       	ldd	r22, Y+1	; 0x01
    291c:	7a 81       	ldd	r23, Y+2	; 0x02
    291e:	8b 81       	ldd	r24, Y+3	; 0x03
    2920:	9c 81       	ldd	r25, Y+4	; 0x04
    2922:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2926:	2b 01       	movw	r4, r22
    2928:	3c 01       	movw	r6, r24
    292a:	c5 01       	movw	r24, r10
    292c:	b4 01       	movw	r22, r8
    292e:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2932:	4b 01       	movw	r8, r22
    2934:	5c 01       	movw	r10, r24
    2936:	c7 01       	movw	r24, r14
    2938:	b6 01       	movw	r22, r12
    293a:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    293e:	6b 01       	movw	r12, r22
    2940:	7c 01       	movw	r14, r24
    2942:	2d b7       	in	r18, 0x3d	; 61
    2944:	3e b7       	in	r19, 0x3e	; 62
    2946:	29 50       	subi	r18, 0x09	; 9
    2948:	30 40       	sbci	r19, 0x00	; 0
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	3e bf       	out	0x3e, r19	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	2d bf       	out	0x3d, r18	; 61
    2954:	ed b7       	in	r30, 0x3d	; 61
    2956:	fe b7       	in	r31, 0x3e	; 62
    2958:	31 96       	adiw	r30, 0x01	; 1
    295a:	ad b7       	in	r26, 0x3d	; 61
    295c:	be b7       	in	r27, 0x3e	; 62
    295e:	12 96       	adiw	r26, 0x02	; 2
    2960:	5c 92       	st	X, r5
    2962:	4e 92       	st	-X, r4
    2964:	11 97       	sbiw	r26, 0x01	; 1
    2966:	93 82       	std	Z+3, r9	; 0x03
    2968:	82 82       	std	Z+2, r8	; 0x02
    296a:	75 83       	std	Z+5, r23	; 0x05
    296c:	64 83       	std	Z+4, r22	; 0x04
    296e:	26 82       	std	Z+6, r2	; 0x06
    2970:	10 86       	std	Z+8, r1	; 0x08
    2972:	17 82       	std	Z+7, r1	; 0x07
    2974:	80 e0       	ldi	r24, 0x00	; 0
    2976:	62 e0       	ldi	r22, 0x02	; 2
    2978:	43 2d       	mov	r20, r3
    297a:	92 01       	movw	r18, r4
    297c:	84 01       	movw	r16, r8
    297e:	76 01       	movw	r14, r12
    2980:	c1 c1       	rjmp	.+898    	; 0x2d04 <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    2982:	c3 01       	movw	r24, r6
    2984:	b2 01       	movw	r22, r4
    2986:	20 e0       	ldi	r18, 0x00	; 0
    2988:	30 e0       	ldi	r19, 0x00	; 0
    298a:	40 e0       	ldi	r20, 0x00	; 0
    298c:	50 e0       	ldi	r21, 0x00	; 0
    298e:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
    2992:	88 23       	and	r24, r24
    2994:	e9 f5       	brne	.+122    	; 0x2a10 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    2996:	69 81       	ldd	r22, Y+1	; 0x01
    2998:	7a 81       	ldd	r23, Y+2	; 0x02
    299a:	8b 81       	ldd	r24, Y+3	; 0x03
    299c:	9c 81       	ldd	r25, Y+4	; 0x04
    299e:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    29a2:	3b 01       	movw	r6, r22
    29a4:	c5 01       	movw	r24, r10
    29a6:	b4 01       	movw	r22, r8
    29a8:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    29ac:	8b 01       	movw	r16, r22
    29ae:	c7 01       	movw	r24, r14
    29b0:	b6 01       	movw	r22, r12
    29b2:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    29b6:	7b 01       	movw	r14, r22
    29b8:	2d b7       	in	r18, 0x3d	; 61
    29ba:	3e b7       	in	r19, 0x3e	; 62
    29bc:	29 50       	subi	r18, 0x09	; 9
    29be:	30 40       	sbci	r19, 0x00	; 0
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	3e bf       	out	0x3e, r19	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	2d bf       	out	0x3d, r18	; 61
    29ca:	ed b7       	in	r30, 0x3d	; 61
    29cc:	fe b7       	in	r31, 0x3e	; 62
    29ce:	31 96       	adiw	r30, 0x01	; 1
    29d0:	40 e0       	ldi	r20, 0x00	; 0
    29d2:	33 20       	and	r3, r3
    29d4:	09 f4       	brne	.+2      	; 0x29d8 <move_arc_stwt+0x1e4>
    29d6:	41 e0       	ldi	r20, 0x01	; 1
    29d8:	71 82       	std	Z+1, r7	; 0x01
    29da:	60 82       	st	Z, r6
    29dc:	13 83       	std	Z+3, r17	; 0x03
    29de:	02 83       	std	Z+2, r16	; 0x02
    29e0:	f5 82       	std	Z+5, r15	; 0x05
    29e2:	e4 82       	std	Z+4, r14	; 0x04
    29e4:	26 82       	std	Z+6, r2	; 0x06
    29e6:	10 86       	std	Z+8, r1	; 0x08
    29e8:	17 82       	std	Z+7, r1	; 0x07
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	62 e0       	ldi	r22, 0x02	; 2
    29ee:	93 01       	movw	r18, r6
    29f0:	c2 2c       	mov	r12, r2
    29f2:	aa 24       	eor	r10, r10
    29f4:	bb 24       	eor	r11, r11
    29f6:	83 2c       	mov	r8, r3
    29f8:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <STEPPER_move>
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	ad b7       	in	r26, 0x3d	; 61
    2a00:	be b7       	in	r27, 0x3e	; 62
    2a02:	19 96       	adiw	r26, 0x09	; 9
    2a04:	0f b6       	in	r0, 0x3f	; 63
    2a06:	f8 94       	cli
    2a08:	be bf       	out	0x3e, r27	; 62
    2a0a:	0f be       	out	0x3f, r0	; 63
    2a0c:	ad bf       	out	0x3d, r26	; 61
    2a0e:	89 c1       	rjmp	.+786    	; 0x2d22 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    2a10:	c3 01       	movw	r24, r6
    2a12:	b2 01       	movw	r22, r4
    2a14:	20 e0       	ldi	r18, 0x00	; 0
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	50 e0       	ldi	r21, 0x00	; 0
    2a1c:	0e 94 fd 2b 	call	0x57fa	; 0x57fa <__gesf2>
    2a20:	18 16       	cp	r1, r24
    2a22:	0c f0       	brlt	.+2      	; 0x2a26 <move_arc_stwt+0x232>
    2a24:	b1 c0       	rjmp	.+354    	; 0x2b88 <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2a26:	66 e6       	ldi	r22, 0x66	; 102
    2a28:	76 e6       	ldi	r23, 0x66	; 102
    2a2a:	8a ea       	ldi	r24, 0xAA	; 170
    2a2c:	91 ec       	ldi	r25, 0xC1	; 193
    2a2e:	a3 01       	movw	r20, r6
    2a30:	92 01       	movw	r18, r4
    2a32:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2a36:	20 e0       	ldi	r18, 0x00	; 0
    2a38:	30 e0       	ldi	r19, 0x00	; 0
    2a3a:	40 e8       	ldi	r20, 0x80	; 128
    2a3c:	5f e3       	ldi	r21, 0x3F	; 63
    2a3e:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    2a42:	7b 01       	movw	r14, r22
    2a44:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2a46:	66 e6       	ldi	r22, 0x66	; 102
    2a48:	76 e6       	ldi	r23, 0x66	; 102
    2a4a:	8a ea       	ldi	r24, 0xAA	; 170
    2a4c:	91 e4       	ldi	r25, 0x41	; 65
    2a4e:	a3 01       	movw	r20, r6
    2a50:	92 01       	movw	r18, r4
    2a52:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e8       	ldi	r20, 0x80	; 128
    2a5c:	5f e3       	ldi	r21, 0x3F	; 63
    2a5e:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    2a62:	5b 01       	movw	r10, r22
    2a64:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2a66:	ed b7       	in	r30, 0x3d	; 61
    2a68:	fe b7       	in	r31, 0x3e	; 62
    2a6a:	39 97       	sbiw	r30, 0x09	; 9
    2a6c:	0f b6       	in	r0, 0x3f	; 63
    2a6e:	f8 94       	cli
    2a70:	fe bf       	out	0x3e, r31	; 62
    2a72:	0f be       	out	0x3f, r0	; 63
    2a74:	ed bf       	out	0x3d, r30	; 61
    2a76:	8d b6       	in	r8, 0x3d	; 61
    2a78:	9e b6       	in	r9, 0x3e	; 62
    2a7a:	08 94       	sec
    2a7c:	81 1c       	adc	r8, r1
    2a7e:	91 1c       	adc	r9, r1
    2a80:	6d 81       	ldd	r22, Y+5	; 0x05
    2a82:	7e 81       	ldd	r23, Y+6	; 0x06
    2a84:	8f 81       	ldd	r24, Y+7	; 0x07
    2a86:	98 85       	ldd	r25, Y+8	; 0x08
    2a88:	a8 01       	movw	r20, r16
    2a8a:	97 01       	movw	r18, r14
    2a8c:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2a90:	2c ed       	ldi	r18, 0xDC	; 220
    2a92:	38 eb       	ldi	r19, 0xB8	; 184
    2a94:	48 e0       	ldi	r20, 0x08	; 8
    2a96:	5e e3       	ldi	r21, 0x3E	; 62
    2a98:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2a9c:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2aa0:	69 8b       	std	Y+17, r22	; 0x11
    2aa2:	7a 8b       	std	Y+18, r23	; 0x12
    2aa4:	8b 8b       	std	Y+19, r24	; 0x13
    2aa6:	9c 8b       	std	Y+20, r25	; 0x14
    2aa8:	69 85       	ldd	r22, Y+9	; 0x09
    2aaa:	7a 85       	ldd	r23, Y+10	; 0x0a
    2aac:	8b 85       	ldd	r24, Y+11	; 0x0b
    2aae:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ab0:	a8 01       	movw	r20, r16
    2ab2:	97 01       	movw	r18, r14
    2ab4:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2ab8:	2c ed       	ldi	r18, 0xDC	; 220
    2aba:	38 eb       	ldi	r19, 0xB8	; 184
    2abc:	48 e0       	ldi	r20, 0x08	; 8
    2abe:	5e e3       	ldi	r21, 0x3E	; 62
    2ac0:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2ac4:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2ac8:	6d 8b       	std	Y+21, r22	; 0x15
    2aca:	7e 8b       	std	Y+22, r23	; 0x16
    2acc:	8f 8b       	std	Y+23, r24	; 0x17
    2ace:	98 8f       	std	Y+24, r25	; 0x18
    2ad0:	6d 85       	ldd	r22, Y+13	; 0x0d
    2ad2:	7e 85       	ldd	r23, Y+14	; 0x0e
    2ad4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ad6:	98 89       	ldd	r25, Y+16	; 0x10
    2ad8:	a8 01       	movw	r20, r16
    2ada:	97 01       	movw	r18, r14
    2adc:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2ae0:	2c ed       	ldi	r18, 0xDC	; 220
    2ae2:	38 eb       	ldi	r19, 0xB8	; 184
    2ae4:	48 e0       	ldi	r20, 0x08	; 8
    2ae6:	5e e3       	ldi	r21, 0x3E	; 62
    2ae8:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2aec:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2af0:	2b 01       	movw	r4, r22
    2af2:	3c 01       	movw	r6, r24
    2af4:	6d 81       	ldd	r22, Y+5	; 0x05
    2af6:	7e 81       	ldd	r23, Y+6	; 0x06
    2af8:	8f 81       	ldd	r24, Y+7	; 0x07
    2afa:	98 85       	ldd	r25, Y+8	; 0x08
    2afc:	a6 01       	movw	r20, r12
    2afe:	95 01       	movw	r18, r10
    2b00:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2b04:	2c ed       	ldi	r18, 0xDC	; 220
    2b06:	38 eb       	ldi	r19, 0xB8	; 184
    2b08:	48 e0       	ldi	r20, 0x08	; 8
    2b0a:	5e e3       	ldi	r21, 0x3E	; 62
    2b0c:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2b10:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2b14:	d4 01       	movw	r26, r8
    2b16:	6d 93       	st	X+, r22
    2b18:	7c 93       	st	X, r23
    2b1a:	69 85       	ldd	r22, Y+9	; 0x09
    2b1c:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b1e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b20:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b22:	a6 01       	movw	r20, r12
    2b24:	95 01       	movw	r18, r10
    2b26:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2b2a:	2c ed       	ldi	r18, 0xDC	; 220
    2b2c:	38 eb       	ldi	r19, 0xB8	; 184
    2b2e:	48 e0       	ldi	r20, 0x08	; 8
    2b30:	5e e3       	ldi	r21, 0x3E	; 62
    2b32:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2b36:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2b3a:	f4 01       	movw	r30, r8
    2b3c:	73 83       	std	Z+3, r23	; 0x03
    2b3e:	62 83       	std	Z+2, r22	; 0x02
    2b40:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b42:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b44:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b46:	98 89       	ldd	r25, Y+16	; 0x10
    2b48:	a6 01       	movw	r20, r12
    2b4a:	95 01       	movw	r18, r10
    2b4c:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2b50:	2c ed       	ldi	r18, 0xDC	; 220
    2b52:	38 eb       	ldi	r19, 0xB8	; 184
    2b54:	48 e0       	ldi	r20, 0x08	; 8
    2b56:	5e e3       	ldi	r21, 0x3E	; 62
    2b58:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2b5c:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2b60:	d4 01       	movw	r26, r8
    2b62:	15 96       	adiw	r26, 0x05	; 5
    2b64:	7c 93       	st	X, r23
    2b66:	6e 93       	st	-X, r22
    2b68:	14 97       	sbiw	r26, 0x04	; 4
    2b6a:	16 96       	adiw	r26, 0x06	; 6
    2b6c:	2c 92       	st	X, r2
    2b6e:	16 97       	sbiw	r26, 0x06	; 6
    2b70:	18 96       	adiw	r26, 0x08	; 8
    2b72:	1c 92       	st	X, r1
    2b74:	1e 92       	st	-X, r1
    2b76:	17 97       	sbiw	r26, 0x07	; 7
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	62 e0       	ldi	r22, 0x02	; 2
    2b7c:	43 2d       	mov	r20, r3
    2b7e:	29 89       	ldd	r18, Y+17	; 0x11
    2b80:	3a 89       	ldd	r19, Y+18	; 0x12
    2b82:	0d 89       	ldd	r16, Y+21	; 0x15
    2b84:	1e 89       	ldd	r17, Y+22	; 0x16
    2b86:	bd c0       	rjmp	.+378    	; 0x2d02 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    2b88:	c3 01       	movw	r24, r6
    2b8a:	b2 01       	movw	r22, r4
    2b8c:	20 e0       	ldi	r18, 0x00	; 0
    2b8e:	30 e0       	ldi	r19, 0x00	; 0
    2b90:	40 e0       	ldi	r20, 0x00	; 0
    2b92:	50 e0       	ldi	r21, 0x00	; 0
    2b94:	0e 94 ae 2a 	call	0x555c	; 0x555c <__cmpsf2>
    2b98:	87 fd       	sbrc	r24, 7
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <move_arc_stwt+0x3ac>
    2b9c:	80 e0       	ldi	r24, 0x00	; 0
    2b9e:	c1 c0       	rjmp	.+386    	; 0x2d22 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2ba0:	66 e6       	ldi	r22, 0x66	; 102
    2ba2:	76 e6       	ldi	r23, 0x66	; 102
    2ba4:	8a ea       	ldi	r24, 0xAA	; 170
    2ba6:	91 e4       	ldi	r25, 0x41	; 65
    2ba8:	a3 01       	movw	r20, r6
    2baa:	92 01       	movw	r18, r4
    2bac:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	30 e0       	ldi	r19, 0x00	; 0
    2bb4:	40 e8       	ldi	r20, 0x80	; 128
    2bb6:	5f e3       	ldi	r21, 0x3F	; 63
    2bb8:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    2bbc:	7b 01       	movw	r14, r22
    2bbe:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2bc0:	66 e6       	ldi	r22, 0x66	; 102
    2bc2:	76 e6       	ldi	r23, 0x66	; 102
    2bc4:	8a ea       	ldi	r24, 0xAA	; 170
    2bc6:	91 ec       	ldi	r25, 0xC1	; 193
    2bc8:	a3 01       	movw	r20, r6
    2bca:	92 01       	movw	r18, r4
    2bcc:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2bd0:	20 e0       	ldi	r18, 0x00	; 0
    2bd2:	30 e0       	ldi	r19, 0x00	; 0
    2bd4:	40 e8       	ldi	r20, 0x80	; 128
    2bd6:	5f e3       	ldi	r21, 0x3F	; 63
    2bd8:	0e 94 4a 2a 	call	0x5494	; 0x5494 <__addsf3>
    2bdc:	5b 01       	movw	r10, r22
    2bde:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2be0:	2d b7       	in	r18, 0x3d	; 61
    2be2:	3e b7       	in	r19, 0x3e	; 62
    2be4:	29 50       	subi	r18, 0x09	; 9
    2be6:	30 40       	sbci	r19, 0x00	; 0
    2be8:	0f b6       	in	r0, 0x3f	; 63
    2bea:	f8 94       	cli
    2bec:	3e bf       	out	0x3e, r19	; 62
    2bee:	0f be       	out	0x3f, r0	; 63
    2bf0:	2d bf       	out	0x3d, r18	; 61
    2bf2:	8d b6       	in	r8, 0x3d	; 61
    2bf4:	9e b6       	in	r9, 0x3e	; 62
    2bf6:	08 94       	sec
    2bf8:	81 1c       	adc	r8, r1
    2bfa:	91 1c       	adc	r9, r1
    2bfc:	6d 81       	ldd	r22, Y+5	; 0x05
    2bfe:	7e 81       	ldd	r23, Y+6	; 0x06
    2c00:	8f 81       	ldd	r24, Y+7	; 0x07
    2c02:	98 85       	ldd	r25, Y+8	; 0x08
    2c04:	a8 01       	movw	r20, r16
    2c06:	97 01       	movw	r18, r14
    2c08:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2c0c:	2c ed       	ldi	r18, 0xDC	; 220
    2c0e:	38 eb       	ldi	r19, 0xB8	; 184
    2c10:	48 e0       	ldi	r20, 0x08	; 8
    2c12:	5e e3       	ldi	r21, 0x3E	; 62
    2c14:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2c18:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2c1c:	69 8f       	std	Y+25, r22	; 0x19
    2c1e:	7a 8f       	std	Y+26, r23	; 0x1a
    2c20:	8b 8f       	std	Y+27, r24	; 0x1b
    2c22:	9c 8f       	std	Y+28, r25	; 0x1c
    2c24:	69 85       	ldd	r22, Y+9	; 0x09
    2c26:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c28:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c2a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c2c:	a8 01       	movw	r20, r16
    2c2e:	97 01       	movw	r18, r14
    2c30:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2c34:	2c ed       	ldi	r18, 0xDC	; 220
    2c36:	38 eb       	ldi	r19, 0xB8	; 184
    2c38:	48 e0       	ldi	r20, 0x08	; 8
    2c3a:	5e e3       	ldi	r21, 0x3E	; 62
    2c3c:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2c40:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2c44:	6d 8f       	std	Y+29, r22	; 0x1d
    2c46:	7e 8f       	std	Y+30, r23	; 0x1e
    2c48:	8f 8f       	std	Y+31, r24	; 0x1f
    2c4a:	98 a3       	std	Y+32, r25	; 0x20
    2c4c:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c4e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c50:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c52:	98 89       	ldd	r25, Y+16	; 0x10
    2c54:	a8 01       	movw	r20, r16
    2c56:	97 01       	movw	r18, r14
    2c58:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2c5c:	2c ed       	ldi	r18, 0xDC	; 220
    2c5e:	38 eb       	ldi	r19, 0xB8	; 184
    2c60:	48 e0       	ldi	r20, 0x08	; 8
    2c62:	5e e3       	ldi	r21, 0x3E	; 62
    2c64:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2c68:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2c6c:	2b 01       	movw	r4, r22
    2c6e:	3c 01       	movw	r6, r24
    2c70:	6d 81       	ldd	r22, Y+5	; 0x05
    2c72:	7e 81       	ldd	r23, Y+6	; 0x06
    2c74:	8f 81       	ldd	r24, Y+7	; 0x07
    2c76:	98 85       	ldd	r25, Y+8	; 0x08
    2c78:	a6 01       	movw	r20, r12
    2c7a:	95 01       	movw	r18, r10
    2c7c:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2c80:	2c ed       	ldi	r18, 0xDC	; 220
    2c82:	38 eb       	ldi	r19, 0xB8	; 184
    2c84:	48 e0       	ldi	r20, 0x08	; 8
    2c86:	5e e3       	ldi	r21, 0x3E	; 62
    2c88:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2c8c:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2c90:	d4 01       	movw	r26, r8
    2c92:	6d 93       	st	X+, r22
    2c94:	7c 93       	st	X, r23
    2c96:	69 85       	ldd	r22, Y+9	; 0x09
    2c98:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c9a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c9c:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c9e:	a6 01       	movw	r20, r12
    2ca0:	95 01       	movw	r18, r10
    2ca2:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2ca6:	2c ed       	ldi	r18, 0xDC	; 220
    2ca8:	38 eb       	ldi	r19, 0xB8	; 184
    2caa:	48 e0       	ldi	r20, 0x08	; 8
    2cac:	5e e3       	ldi	r21, 0x3E	; 62
    2cae:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2cb2:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2cb6:	f4 01       	movw	r30, r8
    2cb8:	73 83       	std	Z+3, r23	; 0x03
    2cba:	62 83       	std	Z+2, r22	; 0x02
    2cbc:	6d 85       	ldd	r22, Y+13	; 0x0d
    2cbe:	7e 85       	ldd	r23, Y+14	; 0x0e
    2cc0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cc2:	98 89       	ldd	r25, Y+16	; 0x10
    2cc4:	a6 01       	movw	r20, r12
    2cc6:	95 01       	movw	r18, r10
    2cc8:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    2ccc:	2c ed       	ldi	r18, 0xDC	; 220
    2cce:	38 eb       	ldi	r19, 0xB8	; 184
    2cd0:	48 e0       	ldi	r20, 0x08	; 8
    2cd2:	5e e3       	ldi	r21, 0x3E	; 62
    2cd4:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    2cd8:	0e 94 1f 2b 	call	0x563e	; 0x563e <__fixunssfsi>
    2cdc:	d4 01       	movw	r26, r8
    2cde:	15 96       	adiw	r26, 0x05	; 5
    2ce0:	7c 93       	st	X, r23
    2ce2:	6e 93       	st	-X, r22
    2ce4:	14 97       	sbiw	r26, 0x04	; 4
    2ce6:	16 96       	adiw	r26, 0x06	; 6
    2ce8:	2c 92       	st	X, r2
    2cea:	16 97       	sbiw	r26, 0x06	; 6
    2cec:	18 96       	adiw	r26, 0x08	; 8
    2cee:	1c 92       	st	X, r1
    2cf0:	1e 92       	st	-X, r1
    2cf2:	17 97       	sbiw	r26, 0x07	; 7
    2cf4:	80 e0       	ldi	r24, 0x00	; 0
    2cf6:	62 e0       	ldi	r22, 0x02	; 2
    2cf8:	43 2d       	mov	r20, r3
    2cfa:	29 8d       	ldd	r18, Y+25	; 0x19
    2cfc:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2cfe:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2d00:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2d02:	72 01       	movw	r14, r4
    2d04:	c2 2c       	mov	r12, r2
    2d06:	aa 24       	eor	r10, r10
    2d08:	bb 24       	eor	r11, r11
    2d0a:	83 2c       	mov	r8, r3
    2d0c:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <STEPPER_move>
    2d10:	81 e0       	ldi	r24, 0x01	; 1
    2d12:	ed b7       	in	r30, 0x3d	; 61
    2d14:	fe b7       	in	r31, 0x3e	; 62
    2d16:	39 96       	adiw	r30, 0x09	; 9
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	fe bf       	out	0x3e, r31	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    2d22:	a0 96       	adiw	r28, 0x20	; 32
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	cf 91       	pop	r28
    2d30:	df 91       	pop	r29
    2d32:	1f 91       	pop	r17
    2d34:	0f 91       	pop	r16
    2d36:	ff 90       	pop	r15
    2d38:	ef 90       	pop	r14
    2d3a:	df 90       	pop	r13
    2d3c:	cf 90       	pop	r12
    2d3e:	bf 90       	pop	r11
    2d40:	af 90       	pop	r10
    2d42:	9f 90       	pop	r9
    2d44:	8f 90       	pop	r8
    2d46:	7f 90       	pop	r7
    2d48:	6f 90       	pop	r6
    2d4a:	5f 90       	pop	r5
    2d4c:	4f 90       	pop	r4
    2d4e:	3f 90       	pop	r3
    2d50:	2f 90       	pop	r2
    2d52:	08 95       	ret

00002d54 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    2d54:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    2d58:	28 2f       	mov	r18, r24
    2d5a:	21 70       	andi	r18, 0x01	; 1
    2d5c:	20 93 12 06 	sts	0x0612, r18
	leftContact =  (0b00000010 & sensors)>>1;
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	82 70       	andi	r24, 0x02	; 2
    2d64:	90 70       	andi	r25, 0x00	; 0
    2d66:	95 95       	asr	r25
    2d68:	87 95       	ror	r24
    2d6a:	80 93 13 06 	sts	0x0613, r24
}
    2d6e:	08 95       	ret

00002d70 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    2d70:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    2d74:	60 93 7a 05 	sts	0x057A, r22
    2d78:	70 93 7b 05 	sts	0x057B, r23
    2d7c:	80 93 7c 05 	sts	0x057C, r24
    2d80:	90 93 7d 05 	sts	0x057D, r25
	leftLightVolt = getLeftLight();
    2d84:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    2d88:	60 93 a1 06 	sts	0x06A1, r22
    2d8c:	70 93 a2 06 	sts	0x06A2, r23
    2d90:	80 93 a3 06 	sts	0x06A3, r24
    2d94:	90 93 a4 06 	sts	0x06A4, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    2d98:	08 95       	ret

00002d9a <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    2d9a:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    2d9e:	60 93 e6 04 	sts	0x04E6, r22
    2da2:	70 93 e7 04 	sts	0x04E7, r23
    2da6:	80 93 e8 04 	sts	0x04E8, r24
    2daa:	90 93 e9 04 	sts	0x04E9, r25
	bkIR = getBackIR();
    2dae:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    2db2:	60 93 f0 04 	sts	0x04F0, r22
    2db6:	70 93 f1 04 	sts	0x04F1, r23
    2dba:	80 93 f2 04 	sts	0x04F2, r24
    2dbe:	90 93 f3 04 	sts	0x04F3, r25
	ltIR = getLeftIR();
    2dc2:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    2dc6:	60 93 14 06 	sts	0x0614, r22
    2dca:	70 93 15 06 	sts	0x0615, r23
    2dce:	80 93 16 06 	sts	0x0616, r24
    2dd2:	90 93 17 06 	sts	0x0617, r25
	rtIR = getRightIR();
    2dd6:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    2dda:	60 93 19 06 	sts	0x0619, r22
    2dde:	70 93 1a 06 	sts	0x061A, r23
    2de2:	80 93 1b 06 	sts	0x061B, r24
    2de6:	90 93 1c 06 	sts	0x061C, r25
}
    2dea:	08 95       	ret

00002dec <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2dec:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <ATTINY_open>
    2df0:	90 93 6a 04 	sts	0x046A, r25
    2df4:	80 93 69 04 	sts	0x0469, r24
	LEopstat = LED_open(); //open the LED module
    2df8:	0e 94 98 18 	call	0x3130	; 0x3130 <LED_open>
    2dfc:	90 93 68 04 	sts	0x0468, r25
    2e00:	80 93 67 04 	sts	0x0467, r24
	LCopstat = LCD_open(); //open the LCD module
    2e04:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <LCD_open>
    2e08:	90 93 66 04 	sts	0x0466, r25
    2e0c:	80 93 65 04 	sts	0x0465, r24
	STEPPER_open(); // Open STEPPER module for use
    2e10:	0e 94 1a 1b 	call	0x3634	; 0x3634 <STEPPER_open>
	SPKR_open(SPKR_BEEP_MODE);//open the speaker in beep mode
    2e14:	81 e0       	ldi	r24, 0x01	; 1
    2e16:	0e 94 9e 19 	call	0x333c	; 0x333c <SPKR_open>
	
	LED_open();
    2e1a:	0e 94 98 18 	call	0x3130	; 0x3130 <LED_open>
	I2C_open();
    2e1e:	0e 94 5d 1f 	call	0x3eba	; 0x3eba <I2C_open>
	ADC_open();//open the ADC module
    2e22:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2e26:	81 e0       	ldi	r24, 0x01	; 1
    2e28:	0e 94 7e 17 	call	0x2efc	; 0x2efc <ADC_set_VREF>

	// Initialize IR Values and Reset Prefilter
	checkIR();
    2e2c:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <checkIR>
	prefilter(1);
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	0e 94 3f 0f 	call	0x1e7e	; 0x1e7e <prefilter>
}
    2e36:	08 95       	ret

00002e38 <ADC_open>:
    2e38:	8f e0       	ldi	r24, 0x0F	; 15
    2e3a:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    2e3e:	88 23       	and	r24, r24
    2e40:	31 f4       	brne	.+12     	; 0x2e4e <ADC_open+0x16>
    2e42:	0e 94 84 1f 	call	0x3f08	; 0x3f08 <__ADC_init>
    2e46:	8f e0       	ldi	r24, 0x0F	; 15
    2e48:	61 e0       	ldi	r22, 0x01	; 1
    2e4a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    2e4e:	8f e0       	ldi	r24, 0x0F	; 15
    2e50:	91 e0       	ldi	r25, 0x01	; 1
    2e52:	08 95       	ret

00002e54 <ADC_sample>:
    2e54:	8f e0       	ldi	r24, 0x0F	; 15
    2e56:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    2e5a:	81 30       	cpi	r24, 0x01	; 1
    2e5c:	19 f0       	breq	.+6      	; 0x2e64 <ADC_sample+0x10>
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	13 c0       	rjmp	.+38     	; 0x2e8a <ADC_sample+0x36>
    2e64:	80 91 7a 00 	lds	r24, 0x007A
    2e68:	80 64       	ori	r24, 0x40	; 64
    2e6a:	80 93 7a 00 	sts	0x007A, r24
    2e6e:	80 91 7a 00 	lds	r24, 0x007A
    2e72:	86 fd       	sbrc	r24, 6
    2e74:	fc cf       	rjmp	.-8      	; 0x2e6e <ADC_sample+0x1a>
    2e76:	30 91 78 00 	lds	r19, 0x0078
    2e7a:	20 91 79 00 	lds	r18, 0x0079
    2e7e:	92 2f       	mov	r25, r18
    2e80:	80 e0       	ldi	r24, 0x00	; 0
    2e82:	23 2f       	mov	r18, r19
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	28 2b       	or	r18, r24
    2e88:	39 2b       	or	r19, r25
    2e8a:	c9 01       	movw	r24, r18
    2e8c:	08 95       	ret

00002e8e <ADC_set_channel>:
    2e8e:	58 2f       	mov	r21, r24
    2e90:	80 91 8f 03 	lds	r24, 0x038F
    2e94:	88 30       	cpi	r24, 0x08	; 8
    2e96:	d8 f4       	brcc	.+54     	; 0x2ece <ADC_set_channel+0x40>
    2e98:	40 91 7e 00 	lds	r20, 0x007E
    2e9c:	21 e0       	ldi	r18, 0x01	; 1
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	b9 01       	movw	r22, r18
    2ea2:	02 c0       	rjmp	.+4      	; 0x2ea8 <ADC_set_channel+0x1a>
    2ea4:	66 0f       	add	r22, r22
    2ea6:	77 1f       	adc	r23, r23
    2ea8:	8a 95       	dec	r24
    2eaa:	e2 f7       	brpl	.-8      	; 0x2ea4 <ADC_set_channel+0x16>
    2eac:	cb 01       	movw	r24, r22
    2eae:	80 95       	com	r24
    2eb0:	84 23       	and	r24, r20
    2eb2:	80 93 7e 00 	sts	0x007E, r24
    2eb6:	80 91 7e 00 	lds	r24, 0x007E
    2eba:	05 2e       	mov	r0, r21
    2ebc:	02 c0       	rjmp	.+4      	; 0x2ec2 <ADC_set_channel+0x34>
    2ebe:	22 0f       	add	r18, r18
    2ec0:	33 1f       	adc	r19, r19
    2ec2:	0a 94       	dec	r0
    2ec4:	e2 f7       	brpl	.-8      	; 0x2ebe <ADC_set_channel+0x30>
    2ec6:	82 2b       	or	r24, r18
    2ec8:	80 93 7e 00 	sts	0x007E, r24
    2ecc:	0d c0       	rjmp	.+26     	; 0x2ee8 <ADC_set_channel+0x5a>
    2ece:	20 91 7e 00 	lds	r18, 0x007E
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	90 e0       	ldi	r25, 0x00	; 0
    2ed6:	05 2e       	mov	r0, r21
    2ed8:	02 c0       	rjmp	.+4      	; 0x2ede <ADC_set_channel+0x50>
    2eda:	88 0f       	add	r24, r24
    2edc:	99 1f       	adc	r25, r25
    2ede:	0a 94       	dec	r0
    2ee0:	e2 f7       	brpl	.-8      	; 0x2eda <ADC_set_channel+0x4c>
    2ee2:	28 2b       	or	r18, r24
    2ee4:	20 93 7e 00 	sts	0x007E, r18
    2ee8:	50 93 8f 03 	sts	0x038F, r21
    2eec:	80 91 7c 00 	lds	r24, 0x007C
    2ef0:	5f 71       	andi	r21, 0x1F	; 31
    2ef2:	80 7e       	andi	r24, 0xE0	; 224
    2ef4:	85 2b       	or	r24, r21
    2ef6:	80 93 7c 00 	sts	0x007C, r24
    2efa:	08 95       	ret

00002efc <ADC_set_VREF>:
    2efc:	ec e7       	ldi	r30, 0x7C	; 124
    2efe:	f0 e0       	ldi	r31, 0x00	; 0
    2f00:	90 81       	ld	r25, Z
    2f02:	82 95       	swap	r24
    2f04:	88 0f       	add	r24, r24
    2f06:	88 0f       	add	r24, r24
    2f08:	80 7c       	andi	r24, 0xC0	; 192
    2f0a:	9f 73       	andi	r25, 0x3F	; 63
    2f0c:	98 2b       	or	r25, r24
    2f0e:	90 83       	st	Z, r25
    2f10:	08 95       	ret

00002f12 <main>:
    2f12:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <CBOT_ISR_init>
    2f16:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <CBOT_init>
    2f1a:	0e 94 a2 0e 	call	0x1d44	; 0x1d44 <CBOT_main>
    2f1e:	80 e0       	ldi	r24, 0x00	; 0
    2f20:	90 e0       	ldi	r25, 0x00	; 0
    2f22:	08 95       	ret

00002f24 <LCD_clear>:
    2f24:	0f 93       	push	r16
    2f26:	1f 93       	push	r17
    2f28:	80 e4       	ldi	r24, 0x40	; 64
    2f2a:	60 e0       	ldi	r22, 0x00	; 0
    2f2c:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2f30:	00 e0       	ldi	r16, 0x00	; 0
    2f32:	80 2f       	mov	r24, r16
    2f34:	60 e0       	ldi	r22, 0x00	; 0
    2f36:	0e 94 58 18 	call	0x30b0	; 0x30b0 <LCD_set_PGC_addr>
    2f3a:	10 e0       	ldi	r17, 0x00	; 0
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	61 e0       	ldi	r22, 0x01	; 1
    2f40:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2f44:	1f 5f       	subi	r17, 0xFF	; 255
    2f46:	10 38       	cpi	r17, 0x80	; 128
    2f48:	c9 f7       	brne	.-14     	; 0x2f3c <LCD_clear+0x18>
    2f4a:	0f 5f       	subi	r16, 0xFF	; 255
    2f4c:	04 30       	cpi	r16, 0x04	; 4
    2f4e:	89 f7       	brne	.-30     	; 0x2f32 <LCD_clear+0xe>
    2f50:	83 e0       	ldi	r24, 0x03	; 3
    2f52:	60 e0       	ldi	r22, 0x00	; 0
    2f54:	0e 94 51 18 	call	0x30a2	; 0x30a2 <LCD_set_next_PGC>
    2f58:	1f 91       	pop	r17
    2f5a:	0f 91       	pop	r16
    2f5c:	08 95       	ret

00002f5e <LCD_open>:
    2f5e:	0f 93       	push	r16
    2f60:	1f 93       	push	r17
    2f62:	82 e0       	ldi	r24, 0x02	; 2
    2f64:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    2f68:	88 23       	and	r24, r24
    2f6a:	11 f4       	brne	.+4      	; 0x2f70 <LCD_open+0x12>
    2f6c:	82 e0       	ldi	r24, 0x02	; 2
    2f6e:	06 c0       	rjmp	.+12     	; 0x2f7c <LCD_open+0x1e>
    2f70:	81 e0       	ldi	r24, 0x01	; 1
    2f72:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    2f76:	88 23       	and	r24, r24
    2f78:	19 f4       	brne	.+6      	; 0x2f80 <LCD_open+0x22>
    2f7a:	81 e0       	ldi	r24, 0x01	; 1
    2f7c:	90 e0       	ldi	r25, 0x00	; 0
    2f7e:	6d c0       	rjmp	.+218    	; 0x305a <LCD_open+0xfc>
    2f80:	0e 94 05 22 	call	0x440a	; 0x440a <__LCD_init>
    2f84:	85 e0       	ldi	r24, 0x05	; 5
    2f86:	61 e0       	ldi	r22, 0x01	; 1
    2f88:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    2f8c:	8e ea       	ldi	r24, 0xAE	; 174
    2f8e:	60 e0       	ldi	r22, 0x00	; 0
    2f90:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2f94:	82 ea       	ldi	r24, 0xA2	; 162
    2f96:	60 e0       	ldi	r22, 0x00	; 0
    2f98:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2f9c:	80 ea       	ldi	r24, 0xA0	; 160
    2f9e:	60 e0       	ldi	r22, 0x00	; 0
    2fa0:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2fa4:	00 e5       	ldi	r16, 0x50	; 80
    2fa6:	13 ec       	ldi	r17, 0xC3	; 195
    2fa8:	c8 01       	movw	r24, r16
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <LCD_open+0x4c>
    2fae:	80 ec       	ldi	r24, 0xC0	; 192
    2fb0:	60 e0       	ldi	r22, 0x00	; 0
    2fb2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2fb6:	8f e2       	ldi	r24, 0x2F	; 47
    2fb8:	60 e0       	ldi	r22, 0x00	; 0
    2fba:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2fbe:	81 e8       	ldi	r24, 0x81	; 129
    2fc0:	60 e0       	ldi	r22, 0x00	; 0
    2fc2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2fc6:	86 e1       	ldi	r24, 0x16	; 22
    2fc8:	60 e0       	ldi	r22, 0x00	; 0
    2fca:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2fce:	82 e2       	ldi	r24, 0x22	; 34
    2fd0:	60 e0       	ldi	r22, 0x00	; 0
    2fd2:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2fd6:	c8 01       	movw	r24, r16
    2fd8:	01 97       	sbiw	r24, 0x01	; 1
    2fda:	f1 f7       	brne	.-4      	; 0x2fd8 <LCD_open+0x7a>
    2fdc:	8f ea       	ldi	r24, 0xAF	; 175
    2fde:	60 e0       	ldi	r22, 0x00	; 0
    2fe0:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2fe4:	86 ea       	ldi	r24, 0xA6	; 166
    2fe6:	60 e0       	ldi	r22, 0x00	; 0
    2fe8:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2fec:	85 ea       	ldi	r24, 0xA5	; 165
    2fee:	60 e0       	ldi	r22, 0x00	; 0
    2ff0:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    2ff4:	80 e0       	ldi	r24, 0x00	; 0
    2ff6:	90 e0       	ldi	r25, 0x00	; 0
    2ff8:	28 e8       	ldi	r18, 0x88	; 136
    2ffa:	33 e1       	ldi	r19, 0x13	; 19
    2ffc:	f9 01       	movw	r30, r18
    2ffe:	31 97       	sbiw	r30, 0x01	; 1
    3000:	f1 f7       	brne	.-4      	; 0x2ffe <LCD_open+0xa0>
    3002:	01 96       	adiw	r24, 0x01	; 1
    3004:	43 e0       	ldi	r20, 0x03	; 3
    3006:	88 3e       	cpi	r24, 0xE8	; 232
    3008:	94 07       	cpc	r25, r20
    300a:	c1 f7       	brne	.-16     	; 0x2ffc <LCD_open+0x9e>
    300c:	83 eb       	ldi	r24, 0xB3	; 179
    300e:	60 e0       	ldi	r22, 0x00	; 0
    3010:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    3014:	80 e4       	ldi	r24, 0x40	; 64
    3016:	60 e0       	ldi	r22, 0x00	; 0
    3018:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    301c:	83 e0       	ldi	r24, 0x03	; 3
    301e:	60 e0       	ldi	r22, 0x00	; 0
    3020:	0e 94 58 18 	call	0x30b0	; 0x30b0 <LCD_set_PGC_addr>
    3024:	83 e0       	ldi	r24, 0x03	; 3
    3026:	60 e0       	ldi	r22, 0x00	; 0
    3028:	0e 94 51 18 	call	0x30a2	; 0x30a2 <LCD_set_next_PGC>
    302c:	10 92 f5 06 	sts	0x06F5, r1
    3030:	10 92 f7 06 	sts	0x06F7, r1
    3034:	10 92 f6 06 	sts	0x06F6, r1
    3038:	8e e9       	ldi	r24, 0x9E	; 158
    303a:	93 e0       	ldi	r25, 0x03	; 3
    303c:	90 93 26 07 	sts	0x0726, r25
    3040:	80 93 25 07 	sts	0x0725, r24
    3044:	88 e1       	ldi	r24, 0x18	; 24
    3046:	0e 94 30 18 	call	0x3060	; 0x3060 <LCD_set_backlight>
    304a:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
    304e:	84 ea       	ldi	r24, 0xA4	; 164
    3050:	60 e0       	ldi	r22, 0x00	; 0
    3052:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    3056:	85 e0       	ldi	r24, 0x05	; 5
    3058:	91 e0       	ldi	r25, 0x01	; 1
    305a:	1f 91       	pop	r17
    305c:	0f 91       	pop	r16
    305e:	08 95       	ret

00003060 <LCD_set_backlight>:
    3060:	1f 93       	push	r17
    3062:	18 2f       	mov	r17, r24
    3064:	85 e0       	ldi	r24, 0x05	; 5
    3066:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    306a:	81 30       	cpi	r24, 0x01	; 1
    306c:	c1 f4       	brne	.+48     	; 0x309e <LCD_set_backlight+0x3e>
    306e:	87 e0       	ldi	r24, 0x07	; 7
    3070:	0e 94 ad 18 	call	0x315a	; 0x315a <SPI_set_slave_addr>
    3074:	82 e0       	ldi	r24, 0x02	; 2
    3076:	6a e0       	ldi	r22, 0x0A	; 10
    3078:	0e 94 fe 18 	call	0x31fc	; 0x31fc <SPI_transmit>
    307c:	82 e0       	ldi	r24, 0x02	; 2
    307e:	61 eb       	ldi	r22, 0xB1	; 177
    3080:	0e 94 fe 18 	call	0x31fc	; 0x31fc <SPI_transmit>
    3084:	61 2f       	mov	r22, r17
    3086:	11 32       	cpi	r17, 0x21	; 33
    3088:	08 f0       	brcs	.+2      	; 0x308c <LCD_set_backlight+0x2c>
    308a:	60 e2       	ldi	r22, 0x20	; 32
    308c:	82 e0       	ldi	r24, 0x02	; 2
    308e:	0e 94 fe 18 	call	0x31fc	; 0x31fc <SPI_transmit>
    3092:	89 ee       	ldi	r24, 0xE9	; 233
    3094:	8a 95       	dec	r24
    3096:	f1 f7       	brne	.-4      	; 0x3094 <LCD_set_backlight+0x34>
    3098:	87 e0       	ldi	r24, 0x07	; 7
    309a:	0e 94 ad 18 	call	0x315a	; 0x315a <SPI_set_slave_addr>
    309e:	1f 91       	pop	r17
    30a0:	08 95       	ret

000030a2 <LCD_set_next_PGC>:
    30a2:	83 70       	andi	r24, 0x03	; 3
    30a4:	6f 77       	andi	r22, 0x7F	; 127
    30a6:	60 93 f3 06 	sts	0x06F3, r22
    30aa:	80 93 f4 06 	sts	0x06F4, r24
    30ae:	08 95       	ret

000030b0 <LCD_set_PGC_addr>:
    30b0:	0f 93       	push	r16
    30b2:	1f 93       	push	r17
    30b4:	06 2f       	mov	r16, r22
    30b6:	16 2f       	mov	r17, r22
    30b8:	1f 77       	andi	r17, 0x7F	; 127
    30ba:	83 70       	andi	r24, 0x03	; 3
    30bc:	80 6b       	ori	r24, 0xB0	; 176
    30be:	60 e0       	ldi	r22, 0x00	; 0
    30c0:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    30c4:	12 95       	swap	r17
    30c6:	1f 70       	andi	r17, 0x0F	; 15
    30c8:	81 2f       	mov	r24, r17
    30ca:	80 61       	ori	r24, 0x10	; 16
    30cc:	60 e0       	ldi	r22, 0x00	; 0
    30ce:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    30d2:	80 2f       	mov	r24, r16
    30d4:	8f 70       	andi	r24, 0x0F	; 15
    30d6:	60 e0       	ldi	r22, 0x00	; 0
    30d8:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    30dc:	1f 91       	pop	r17
    30de:	0f 91       	pop	r16
    30e0:	08 95       	ret

000030e2 <LCD_write>:
    30e2:	0f 93       	push	r16
    30e4:	1f 93       	push	r17
    30e6:	08 2f       	mov	r16, r24
    30e8:	16 2f       	mov	r17, r22
    30ea:	85 e0       	ldi	r24, 0x05	; 5
    30ec:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    30f0:	81 30       	cpi	r24, 0x01	; 1
    30f2:	79 f4       	brne	.+30     	; 0x3112 <LCD_write+0x30>
    30f4:	11 23       	and	r17, r17
    30f6:	19 f0       	breq	.+6      	; 0x30fe <LCD_write+0x1c>
    30f8:	11 30       	cpi	r17, 0x01	; 1
    30fa:	21 f4       	brne	.+8      	; 0x3104 <LCD_write+0x22>
    30fc:	02 c0       	rjmp	.+4      	; 0x3102 <LCD_write+0x20>
    30fe:	2b 98       	cbi	0x05, 3	; 5
    3100:	01 c0       	rjmp	.+2      	; 0x3104 <LCD_write+0x22>
    3102:	2b 9a       	sbi	0x05, 3	; 5
    3104:	86 e0       	ldi	r24, 0x06	; 6
    3106:	8a 95       	dec	r24
    3108:	f1 f7       	brne	.-4      	; 0x3106 <LCD_write+0x24>
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	60 2f       	mov	r22, r16
    310e:	0e 94 fe 18 	call	0x31fc	; 0x31fc <SPI_transmit>
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	08 95       	ret

00003118 <LED_clr_pattern>:
    3118:	1f 93       	push	r17
    311a:	18 2f       	mov	r17, r24
    311c:	86 e0       	ldi	r24, 0x06	; 6
    311e:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    3122:	81 30       	cpi	r24, 0x01	; 1
    3124:	19 f4       	brne	.+6      	; 0x312c <LED_clr_pattern+0x14>
    3126:	81 2f       	mov	r24, r17
    3128:	0e 94 b4 22 	call	0x4568	; 0x4568 <__LED_clr_pattern>
    312c:	1f 91       	pop	r17
    312e:	08 95       	ret

00003130 <LED_open>:
    3130:	0e 94 b9 22 	call	0x4572	; 0x4572 <__LED_init>
    3134:	86 e0       	ldi	r24, 0x06	; 6
    3136:	61 e0       	ldi	r22, 0x01	; 1
    3138:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    313c:	86 e0       	ldi	r24, 0x06	; 6
    313e:	91 e0       	ldi	r25, 0x01	; 1
    3140:	08 95       	ret

00003142 <LED_set_pattern>:
    3142:	1f 93       	push	r17
    3144:	18 2f       	mov	r17, r24
    3146:	86 e0       	ldi	r24, 0x06	; 6
    3148:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    314c:	81 30       	cpi	r24, 0x01	; 1
    314e:	19 f4       	brne	.+6      	; 0x3156 <LED_set_pattern+0x14>
    3150:	81 2f       	mov	r24, r17
    3152:	0e 94 bc 22 	call	0x4578	; 0x4578 <__LED_set_pattern>
    3156:	1f 91       	pop	r17
    3158:	08 95       	ret

0000315a <SPI_set_slave_addr>:
    315a:	1f 93       	push	r17
    315c:	18 2f       	mov	r17, r24
    315e:	82 e0       	ldi	r24, 0x02	; 2
    3160:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    3164:	81 30       	cpi	r24, 0x01	; 1
    3166:	09 f0       	breq	.+2      	; 0x316a <SPI_set_slave_addr+0x10>
    3168:	47 c0       	rjmp	.+142    	; 0x31f8 <SPI_set_slave_addr+0x9e>
    316a:	91 2f       	mov	r25, r17
    316c:	97 70       	andi	r25, 0x07	; 7
    316e:	80 91 f8 06 	lds	r24, 0x06F8
    3172:	98 17       	cp	r25, r24
    3174:	09 f4       	brne	.+2      	; 0x3178 <SPI_set_slave_addr+0x1e>
    3176:	40 c0       	rjmp	.+128    	; 0x31f8 <SPI_set_slave_addr+0x9e>
    3178:	90 93 f8 06 	sts	0x06F8, r25
    317c:	85 b1       	in	r24, 0x05	; 5
    317e:	88 7f       	andi	r24, 0xF8	; 248
    3180:	89 2b       	or	r24, r25
    3182:	85 b9       	out	0x05, r24	; 5
    3184:	93 30       	cpi	r25, 0x03	; 3
    3186:	11 f1       	breq	.+68     	; 0x31cc <SPI_set_slave_addr+0x72>
    3188:	94 30       	cpi	r25, 0x04	; 4
    318a:	28 f4       	brcc	.+10     	; 0x3196 <SPI_set_slave_addr+0x3c>
    318c:	91 30       	cpi	r25, 0x01	; 1
    318e:	51 f0       	breq	.+20     	; 0x31a4 <SPI_set_slave_addr+0x4a>
    3190:	92 30       	cpi	r25, 0x02	; 2
    3192:	90 f4       	brcc	.+36     	; 0x31b8 <SPI_set_slave_addr+0x5e>
    3194:	0c c0       	rjmp	.+24     	; 0x31ae <SPI_set_slave_addr+0x54>
    3196:	95 30       	cpi	r25, 0x05	; 5
    3198:	19 f1       	breq	.+70     	; 0x31e0 <SPI_set_slave_addr+0x86>
    319a:	95 30       	cpi	r25, 0x05	; 5
    319c:	e0 f0       	brcs	.+56     	; 0x31d6 <SPI_set_slave_addr+0x7c>
    319e:	96 30       	cpi	r25, 0x06	; 6
    31a0:	21 f5       	brne	.+72     	; 0x31ea <SPI_set_slave_addr+0x90>
    31a2:	0f c0       	rjmp	.+30     	; 0x31c2 <SPI_set_slave_addr+0x68>
    31a4:	e0 91 40 04 	lds	r30, 0x0440
    31a8:	f0 91 41 04 	lds	r31, 0x0441
    31ac:	22 c0       	rjmp	.+68     	; 0x31f2 <SPI_set_slave_addr+0x98>
    31ae:	e0 91 3e 04 	lds	r30, 0x043E
    31b2:	f0 91 3f 04 	lds	r31, 0x043F
    31b6:	1d c0       	rjmp	.+58     	; 0x31f2 <SPI_set_slave_addr+0x98>
    31b8:	e0 91 42 04 	lds	r30, 0x0442
    31bc:	f0 91 43 04 	lds	r31, 0x0443
    31c0:	18 c0       	rjmp	.+48     	; 0x31f2 <SPI_set_slave_addr+0x98>
    31c2:	e0 91 4a 04 	lds	r30, 0x044A
    31c6:	f0 91 4b 04 	lds	r31, 0x044B
    31ca:	13 c0       	rjmp	.+38     	; 0x31f2 <SPI_set_slave_addr+0x98>
    31cc:	e0 91 44 04 	lds	r30, 0x0444
    31d0:	f0 91 45 04 	lds	r31, 0x0445
    31d4:	0e c0       	rjmp	.+28     	; 0x31f2 <SPI_set_slave_addr+0x98>
    31d6:	e0 91 46 04 	lds	r30, 0x0446
    31da:	f0 91 47 04 	lds	r31, 0x0447
    31de:	09 c0       	rjmp	.+18     	; 0x31f2 <SPI_set_slave_addr+0x98>
    31e0:	e0 91 48 04 	lds	r30, 0x0448
    31e4:	f0 91 49 04 	lds	r31, 0x0449
    31e8:	04 c0       	rjmp	.+8      	; 0x31f2 <SPI_set_slave_addr+0x98>
    31ea:	e0 91 4c 04 	lds	r30, 0x044C
    31ee:	f0 91 4d 04 	lds	r31, 0x044D
    31f2:	30 97       	sbiw	r30, 0x00	; 0
    31f4:	09 f0       	breq	.+2      	; 0x31f8 <SPI_set_slave_addr+0x9e>
    31f6:	09 95       	icall
    31f8:	1f 91       	pop	r17
    31fa:	08 95       	ret

000031fc <SPI_transmit>:
    31fc:	1f 93       	push	r17
    31fe:	16 2f       	mov	r17, r22
    3200:	0e 94 ad 18 	call	0x315a	; 0x315a <SPI_set_slave_addr>
    3204:	82 e0       	ldi	r24, 0x02	; 2
    3206:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    320a:	81 30       	cpi	r24, 0x01	; 1
    320c:	21 f4       	brne	.+8      	; 0x3216 <SPI_transmit+0x1a>
    320e:	1e bd       	out	0x2e, r17	; 46
    3210:	0d b4       	in	r0, 0x2d	; 45
    3212:	07 fe       	sbrs	r0, 7
    3214:	fd cf       	rjmp	.-6      	; 0x3210 <SPI_transmit+0x14>
    3216:	1f 91       	pop	r17
    3218:	08 95       	ret

0000321a <__SPKR_set_up_freq_LUT>:
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	80 e2       	ldi	r24, 0x20	; 32
    3224:	91 e0       	ldi	r25, 0x01	; 1
    3226:	0e 94 0a 32 	call	0x6414	; 0x6414 <malloc>
    322a:	9c 01       	movw	r18, r24
    322c:	90 93 5d 04 	sts	0x045D, r25
    3230:	80 93 5c 04 	sts	0x045C, r24
    3234:	89 2b       	or	r24, r25
    3236:	11 f4       	brne	.+4      	; 0x323c <__SPKR_set_up_freq_LUT+0x22>
    3238:	80 e0       	ldi	r24, 0x00	; 0
    323a:	39 c0       	rjmp	.+114    	; 0x32ae <__SPKR_set_up_freq_LUT+0x94>
    323c:	89 01       	movw	r16, r18
    323e:	c0 e0       	ldi	r28, 0x00	; 0
    3240:	d0 e0       	ldi	r29, 0x00	; 0
    3242:	be 01       	movw	r22, r28
    3244:	80 e0       	ldi	r24, 0x00	; 0
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	0e 94 4b 2b 	call	0x5696	; 0x5696 <__floatunsisf>
    324c:	20 e0       	ldi	r18, 0x00	; 0
    324e:	30 e0       	ldi	r19, 0x00	; 0
    3250:	40 ea       	ldi	r20, 0xA0	; 160
    3252:	51 e4       	ldi	r21, 0x41	; 65
    3254:	0e 94 b2 2a 	call	0x5564	; 0x5564 <__divsf3>
    3258:	27 ef       	ldi	r18, 0xF7	; 247
    325a:	35 e7       	ldi	r19, 0x75	; 117
    325c:	40 e0       	ldi	r20, 0x00	; 0
    325e:	5f e3       	ldi	r21, 0x3F	; 63
    3260:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    3264:	9b 01       	movw	r18, r22
    3266:	ac 01       	movw	r20, r24
    3268:	60 e0       	ldi	r22, 0x00	; 0
    326a:	70 e0       	ldi	r23, 0x00	; 0
    326c:	80 e2       	ldi	r24, 0x20	; 32
    326e:	91 e4       	ldi	r25, 0x41	; 65
    3270:	0e 94 9e 2c 	call	0x593c	; 0x593c <pow>
    3274:	9b 01       	movw	r18, r22
    3276:	ac 01       	movw	r20, r24
    3278:	ca 01       	movw	r24, r20
    327a:	b9 01       	movw	r22, r18
    327c:	2d ec       	ldi	r18, 0xCD	; 205
    327e:	3c ec       	ldi	r19, 0xCC	; 204
    3280:	42 e8       	ldi	r20, 0x82	; 130
    3282:	51 e4       	ldi	r21, 0x41	; 65
    3284:	0e 94 3b 2c 	call	0x5876	; 0x5876 <__mulsf3>
    3288:	0e 94 01 2c 	call	0x5802	; 0x5802 <lrint>
    328c:	2a e0       	ldi	r18, 0x0A	; 10
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	40 e0       	ldi	r20, 0x00	; 0
    3292:	50 e0       	ldi	r21, 0x00	; 0
    3294:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <__mulsi3>
    3298:	f8 01       	movw	r30, r16
    329a:	61 93       	st	Z+, r22
    329c:	71 93       	st	Z+, r23
    329e:	81 93       	st	Z+, r24
    32a0:	91 93       	st	Z+, r25
    32a2:	8f 01       	movw	r16, r30
    32a4:	21 96       	adiw	r28, 0x01	; 1
    32a6:	c8 34       	cpi	r28, 0x48	; 72
    32a8:	d1 05       	cpc	r29, r1
    32aa:	59 f6       	brne	.-106    	; 0x3242 <__SPKR_set_up_freq_LUT+0x28>
    32ac:	81 e0       	ldi	r24, 0x01	; 1
    32ae:	df 91       	pop	r29
    32b0:	cf 91       	pop	r28
    32b2:	1f 91       	pop	r17
    32b4:	0f 91       	pop	r16
    32b6:	08 95       	ret

000032b8 <__SPKR_open_beep_mode>:
    32b8:	8a e0       	ldi	r24, 0x0A	; 10
    32ba:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    32be:	88 23       	and	r24, r24
    32c0:	71 f4       	brne	.+28     	; 0x32de <__SPKR_open_beep_mode+0x26>
    32c2:	10 92 59 04 	sts	0x0459, r1
    32c6:	10 92 58 04 	sts	0x0458, r1
    32ca:	81 e0       	ldi	r24, 0x01	; 1
    32cc:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__SPKR_init>
    32d0:	81 e0       	ldi	r24, 0x01	; 1
    32d2:	80 93 4f 04 	sts	0x044F, r24
    32d6:	8a e0       	ldi	r24, 0x0A	; 10
    32d8:	61 e0       	ldi	r22, 0x01	; 1
    32da:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    32de:	8a e0       	ldi	r24, 0x0A	; 10
    32e0:	91 e0       	ldi	r25, 0x01	; 1
    32e2:	08 95       	ret

000032e4 <__SPKR_open_tone_mode>:
    32e4:	1f 93       	push	r17
    32e6:	8b e0       	ldi	r24, 0x0B	; 11
    32e8:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    32ec:	88 23       	and	r24, r24
    32ee:	11 f0       	breq	.+4      	; 0x32f4 <__SPKR_open_tone_mode+0x10>
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	21 c0       	rjmp	.+66     	; 0x3336 <__SPKR_open_tone_mode+0x52>
    32f4:	89 e0       	ldi	r24, 0x09	; 9
    32f6:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    32fa:	88 23       	and	r24, r24
    32fc:	d9 f4       	brne	.+54     	; 0x3334 <__SPKR_open_tone_mode+0x50>
    32fe:	0e 94 0d 19 	call	0x321a	; 0x321a <__SPKR_set_up_freq_LUT>
    3302:	18 2f       	mov	r17, r24
    3304:	81 30       	cpi	r24, 0x01	; 1
    3306:	b1 f4       	brne	.+44     	; 0x3334 <__SPKR_open_tone_mode+0x50>
    3308:	10 92 50 04 	sts	0x0450, r1
    330c:	10 92 51 04 	sts	0x0451, r1
    3310:	10 92 52 04 	sts	0x0452, r1
    3314:	10 92 53 04 	sts	0x0453, r1
    3318:	8d e0       	ldi	r24, 0x0D	; 13
    331a:	6a e7       	ldi	r22, 0x7A	; 122
    331c:	73 e2       	ldi	r23, 0x23	; 35
    331e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <ISR_attach>
    3322:	82 e0       	ldi	r24, 0x02	; 2
    3324:	0e 94 f7 23 	call	0x47ee	; 0x47ee <__SPKR_init>
    3328:	10 93 4e 04 	sts	0x044E, r17
    332c:	89 e0       	ldi	r24, 0x09	; 9
    332e:	61 e0       	ldi	r22, 0x01	; 1
    3330:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    3334:	91 e0       	ldi	r25, 0x01	; 1
    3336:	89 e0       	ldi	r24, 0x09	; 9
    3338:	1f 91       	pop	r17
    333a:	08 95       	ret

0000333c <SPKR_open>:
    333c:	81 30       	cpi	r24, 0x01	; 1
    333e:	29 f0       	breq	.+10     	; 0x334a <SPKR_open+0xe>
    3340:	82 30       	cpi	r24, 0x02	; 2
    3342:	31 f0       	breq	.+12     	; 0x3350 <SPKR_open+0x14>
    3344:	90 e0       	ldi	r25, 0x00	; 0
    3346:	89 e0       	ldi	r24, 0x09	; 9
    3348:	08 95       	ret
    334a:	0e 94 5c 19 	call	0x32b8	; 0x32b8 <__SPKR_open_beep_mode>
    334e:	08 95       	ret
    3350:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__SPKR_open_tone_mode>
    3354:	08 95       	ret

00003356 <STEPPER_get_nSteps>:
    3356:	80 91 b9 06 	lds	r24, 0x06B9
    335a:	90 91 ba 06 	lds	r25, 0x06BA
    335e:	20 91 bb 06 	lds	r18, 0x06BB
    3362:	30 91 bc 06 	lds	r19, 0x06BC
    3366:	bc 01       	movw	r22, r24
    3368:	c9 01       	movw	r24, r18
    336a:	08 95       	ret

0000336c <STEPPER_stepmode>:
    336c:	2f 92       	push	r2
    336e:	3f 92       	push	r3
    3370:	4f 92       	push	r4
    3372:	5f 92       	push	r5
    3374:	6f 92       	push	r6
    3376:	7f 92       	push	r7
    3378:	8f 92       	push	r8
    337a:	9f 92       	push	r9
    337c:	af 92       	push	r10
    337e:	bf 92       	push	r11
    3380:	cf 92       	push	r12
    3382:	df 92       	push	r13
    3384:	ef 92       	push	r14
    3386:	ff 92       	push	r15
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	df 93       	push	r29
    338e:	cf 93       	push	r28
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	58 2e       	mov	r5, r24
    3396:	96 2e       	mov	r9, r22
    3398:	44 2e       	mov	r4, r20
    339a:	39 01       	movw	r6, r18
    339c:	3c 2c       	mov	r3, r12
    339e:	c9 8c       	ldd	r12, Y+25	; 0x19
    33a0:	da 8c       	ldd	r13, Y+26	; 0x1a
    33a2:	2b 8c       	ldd	r2, Y+27	; 0x1b
    33a4:	81 e0       	ldi	r24, 0x01	; 1
    33a6:	68 17       	cp	r22, r24
    33a8:	39 f1       	breq	.+78     	; 0x33f8 <STEPPER_stepmode+0x8c>
    33aa:	68 17       	cp	r22, r24
    33ac:	28 f0       	brcs	.+10     	; 0x33b8 <STEPPER_stepmode+0x4c>
    33ae:	92 e0       	ldi	r25, 0x02	; 2
    33b0:	69 17       	cp	r22, r25
    33b2:	09 f0       	breq	.+2      	; 0x33b6 <STEPPER_stepmode+0x4a>
    33b4:	85 c0       	rjmp	.+266    	; 0x34c0 <STEPPER_stepmode+0x154>
    33b6:	49 c0       	rjmp	.+146    	; 0x344a <STEPPER_stepmode+0xde>
    33b8:	80 e0       	ldi	r24, 0x00	; 0
    33ba:	61 e0       	ldi	r22, 0x01	; 1
    33bc:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_set_mode>
    33c0:	80 e0       	ldi	r24, 0x00	; 0
    33c2:	b7 01       	movw	r22, r14
    33c4:	0e 94 88 1b 	call	0x3710	; 0x3710 <STEPPER_set_accel>
    33c8:	80 e0       	ldi	r24, 0x00	; 0
    33ca:	64 2d       	mov	r22, r4
    33cc:	a3 01       	movw	r20, r6
    33ce:	98 01       	movw	r18, r16
    33d0:	03 2d       	mov	r16, r3
    33d2:	ee 24       	eor	r14, r14
    33d4:	e3 94       	inc	r14
    33d6:	ee ed       	ldi	r30, 0xDE	; 222
    33d8:	ce 2e       	mov	r12, r30
    33da:	e6 e0       	ldi	r30, 0x06	; 6
    33dc:	de 2e       	mov	r13, r30
    33de:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <STEPPER_step>
    33e2:	55 20       	and	r5, r5
    33e4:	09 f0       	breq	.+2      	; 0x33e8 <STEPPER_stepmode+0x7c>
    33e6:	6c c0       	rjmp	.+216    	; 0x34c0 <STEPPER_stepmode+0x154>
    33e8:	00 d0       	rcall	.+0      	; 0x33ea <STEPPER_stepmode+0x7e>
    33ea:	0f 92       	push	r0
    33ec:	ed b7       	in	r30, 0x3d	; 61
    33ee:	fe b7       	in	r31, 0x3e	; 62
    33f0:	11 82       	std	Z+1, r1	; 0x01
    33f2:	b3 82       	std	Z+3, r11	; 0x03
    33f4:	a2 82       	std	Z+2, r10	; 0x02
    33f6:	23 c0       	rjmp	.+70     	; 0x343e <STEPPER_stepmode+0xd2>
    33f8:	81 e0       	ldi	r24, 0x01	; 1
    33fa:	61 e0       	ldi	r22, 0x01	; 1
    33fc:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_set_mode>
    3400:	81 e0       	ldi	r24, 0x01	; 1
    3402:	b6 01       	movw	r22, r12
    3404:	0e 94 88 1b 	call	0x3710	; 0x3710 <STEPPER_set_accel>
    3408:	81 e0       	ldi	r24, 0x01	; 1
    340a:	68 2d       	mov	r22, r8
    340c:	4d 89       	ldd	r20, Y+21	; 0x15
    340e:	5e 89       	ldd	r21, Y+22	; 0x16
    3410:	2f 89       	ldd	r18, Y+23	; 0x17
    3412:	38 8d       	ldd	r19, Y+24	; 0x18
    3414:	02 2d       	mov	r16, r2
    3416:	ee 24       	eor	r14, r14
    3418:	e3 94       	inc	r14
    341a:	7e ed       	ldi	r23, 0xDE	; 222
    341c:	c7 2e       	mov	r12, r23
    341e:	76 e0       	ldi	r23, 0x06	; 6
    3420:	d7 2e       	mov	r13, r23
    3422:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <STEPPER_step>
    3426:	55 20       	and	r5, r5
    3428:	09 f0       	breq	.+2      	; 0x342c <STEPPER_stepmode+0xc0>
    342a:	4a c0       	rjmp	.+148    	; 0x34c0 <STEPPER_stepmode+0x154>
    342c:	00 d0       	rcall	.+0      	; 0x342e <STEPPER_stepmode+0xc2>
    342e:	0f 92       	push	r0
    3430:	ed b7       	in	r30, 0x3d	; 61
    3432:	fe b7       	in	r31, 0x3e	; 62
    3434:	91 82       	std	Z+1, r9	; 0x01
    3436:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3438:	9d 8d       	ldd	r25, Y+29	; 0x1d
    343a:	93 83       	std	Z+3, r25	; 0x03
    343c:	82 83       	std	Z+2, r24	; 0x02
    343e:	0e 94 a7 1c 	call	0x394e	; 0x394e <STEPPER_wait_and_then>
    3442:	0f 90       	pop	r0
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	3b c0       	rjmp	.+118    	; 0x34c0 <STEPPER_stepmode+0x154>
    344a:	82 e0       	ldi	r24, 0x02	; 2
    344c:	61 e0       	ldi	r22, 0x01	; 1
    344e:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_set_mode>
    3452:	80 e0       	ldi	r24, 0x00	; 0
    3454:	b7 01       	movw	r22, r14
    3456:	0e 94 88 1b 	call	0x3710	; 0x3710 <STEPPER_set_accel>
    345a:	81 e0       	ldi	r24, 0x01	; 1
    345c:	b6 01       	movw	r22, r12
    345e:	0e 94 88 1b 	call	0x3710	; 0x3710 <STEPPER_set_accel>
    3462:	80 e0       	ldi	r24, 0x00	; 0
    3464:	64 2d       	mov	r22, r4
    3466:	a3 01       	movw	r20, r6
    3468:	98 01       	movw	r18, r16
    346a:	03 2d       	mov	r16, r3
    346c:	ee 24       	eor	r14, r14
    346e:	e3 94       	inc	r14
    3470:	9e ed       	ldi	r25, 0xDE	; 222
    3472:	c9 2e       	mov	r12, r25
    3474:	96 e0       	ldi	r25, 0x06	; 6
    3476:	d9 2e       	mov	r13, r25
    3478:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <STEPPER_step>
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	68 2d       	mov	r22, r8
    3480:	4d 89       	ldd	r20, Y+21	; 0x15
    3482:	5e 89       	ldd	r21, Y+22	; 0x16
    3484:	2f 89       	ldd	r18, Y+23	; 0x17
    3486:	38 8d       	ldd	r19, Y+24	; 0x18
    3488:	02 2d       	mov	r16, r2
    348a:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <STEPPER_step>
    348e:	55 20       	and	r5, r5
    3490:	b9 f4       	brne	.+46     	; 0x34c0 <STEPPER_stepmode+0x154>
    3492:	00 d0       	rcall	.+0      	; 0x3494 <STEPPER_stepmode+0x128>
    3494:	00 d0       	rcall	.+0      	; 0x3496 <STEPPER_stepmode+0x12a>
    3496:	0f 92       	push	r0
    3498:	ad b7       	in	r26, 0x3d	; 61
    349a:	be b7       	in	r27, 0x3e	; 62
    349c:	11 96       	adiw	r26, 0x01	; 1
    349e:	ed b7       	in	r30, 0x3d	; 61
    34a0:	fe b7       	in	r31, 0x3e	; 62
    34a2:	91 82       	std	Z+1, r9	; 0x01
    34a4:	fd 01       	movw	r30, r26
    34a6:	b2 82       	std	Z+2, r11	; 0x02
    34a8:	a1 82       	std	Z+1, r10	; 0x01
    34aa:	8c 8d       	ldd	r24, Y+28	; 0x1c
    34ac:	9d 8d       	ldd	r25, Y+29	; 0x1d
    34ae:	94 83       	std	Z+4, r25	; 0x04
    34b0:	83 83       	std	Z+3, r24	; 0x03
    34b2:	0e 94 a7 1c 	call	0x394e	; 0x394e <STEPPER_wait_and_then>
    34b6:	0f 90       	pop	r0
    34b8:	0f 90       	pop	r0
    34ba:	0f 90       	pop	r0
    34bc:	0f 90       	pop	r0
    34be:	0f 90       	pop	r0
    34c0:	cf 91       	pop	r28
    34c2:	df 91       	pop	r29
    34c4:	1f 91       	pop	r17
    34c6:	0f 91       	pop	r16
    34c8:	ff 90       	pop	r15
    34ca:	ef 90       	pop	r14
    34cc:	df 90       	pop	r13
    34ce:	cf 90       	pop	r12
    34d0:	bf 90       	pop	r11
    34d2:	af 90       	pop	r10
    34d4:	9f 90       	pop	r9
    34d6:	8f 90       	pop	r8
    34d8:	7f 90       	pop	r7
    34da:	6f 90       	pop	r6
    34dc:	5f 90       	pop	r5
    34de:	4f 90       	pop	r4
    34e0:	3f 90       	pop	r3
    34e2:	2f 90       	pop	r2
    34e4:	08 95       	ret

000034e6 <STEPPER_move>:
    34e6:	6f 92       	push	r6
    34e8:	7f 92       	push	r7
    34ea:	8f 92       	push	r8
    34ec:	9f 92       	push	r9
    34ee:	af 92       	push	r10
    34f0:	bf 92       	push	r11
    34f2:	cf 92       	push	r12
    34f4:	df 92       	push	r13
    34f6:	ef 92       	push	r14
    34f8:	ff 92       	push	r15
    34fa:	0f 93       	push	r16
    34fc:	1f 93       	push	r17
    34fe:	df 93       	push	r29
    3500:	cf 93       	push	r28
    3502:	cd b7       	in	r28, 0x3d	; 61
    3504:	de b7       	in	r29, 0x3e	; 62
    3506:	94 2e       	mov	r9, r20
    3508:	7c 2d       	mov	r23, r12
    350a:	d5 01       	movw	r26, r10
    350c:	49 89       	ldd	r20, Y+17	; 0x11
    350e:	5a 89       	ldd	r21, Y+18	; 0x12
    3510:	ab 88       	ldd	r10, Y+19	; 0x13
    3512:	bc 88       	ldd	r11, Y+20	; 0x14
    3514:	cd 88       	ldd	r12, Y+21	; 0x15
    3516:	de 88       	ldd	r13, Y+22	; 0x16
    3518:	9f 89       	ldd	r25, Y+23	; 0x17
    351a:	81 30       	cpi	r24, 0x01	; 1
    351c:	09 f4       	brne	.+2      	; 0x3520 <STEPPER_move+0x3a>
    351e:	57 c0       	rjmp	.+174    	; 0x35ce <STEPPER_move+0xe8>
    3520:	81 30       	cpi	r24, 0x01	; 1
    3522:	b8 f1       	brcs	.+110    	; 0x3592 <STEPPER_move+0xac>
    3524:	82 30       	cpi	r24, 0x02	; 2
    3526:	09 f0       	breq	.+2      	; 0x352a <STEPPER_move+0x44>
    3528:	76 c0       	rjmp	.+236    	; 0x3616 <STEPPER_move+0x130>
    352a:	61 30       	cpi	r22, 0x01	; 1
    352c:	91 f0       	breq	.+36     	; 0x3552 <STEPPER_move+0x6c>
    352e:	61 30       	cpi	r22, 0x01	; 1
    3530:	20 f0       	brcs	.+8      	; 0x353a <STEPPER_move+0x54>
    3532:	62 30       	cpi	r22, 0x02	; 2
    3534:	09 f0       	breq	.+2      	; 0x3538 <STEPPER_move+0x52>
    3536:	6f c0       	rjmp	.+222    	; 0x3616 <STEPPER_move+0x130>
    3538:	15 c0       	rjmp	.+42     	; 0x3564 <STEPPER_move+0x7e>
    353a:	80 e0       	ldi	r24, 0x00	; 0
    353c:	60 e0       	ldi	r22, 0x00	; 0
    353e:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_set_mode>
    3542:	80 e0       	ldi	r24, 0x00	; 0
    3544:	b7 01       	movw	r22, r14
    3546:	0e 94 88 1b 	call	0x3710	; 0x3710 <STEPPER_set_accel>
    354a:	80 e0       	ldi	r24, 0x00	; 0
    354c:	69 2d       	mov	r22, r9
    354e:	a8 01       	movw	r20, r16
    3550:	1d c0       	rjmp	.+58     	; 0x358c <STEPPER_move+0xa6>
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	60 e0       	ldi	r22, 0x00	; 0
    3556:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_set_mode>
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	b6 01       	movw	r22, r12
    355e:	0e 94 88 1b 	call	0x3710	; 0x3710 <STEPPER_set_accel>
    3562:	11 c0       	rjmp	.+34     	; 0x3586 <STEPPER_move+0xa0>
    3564:	82 e0       	ldi	r24, 0x02	; 2
    3566:	60 e0       	ldi	r22, 0x00	; 0
    3568:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_set_mode>
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	b7 01       	movw	r22, r14
    3570:	0e 94 88 1b 	call	0x3710	; 0x3710 <STEPPER_set_accel>
    3574:	81 e0       	ldi	r24, 0x01	; 1
    3576:	b6 01       	movw	r22, r12
    3578:	0e 94 88 1b 	call	0x3710	; 0x3710 <STEPPER_set_accel>
    357c:	80 e0       	ldi	r24, 0x00	; 0
    357e:	69 2d       	mov	r22, r9
    3580:	a8 01       	movw	r20, r16
    3582:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <STEPPER_run>
    3586:	81 e0       	ldi	r24, 0x01	; 1
    3588:	68 2d       	mov	r22, r8
    358a:	a5 01       	movw	r20, r10
    358c:	0e 94 71 1b 	call	0x36e2	; 0x36e2 <STEPPER_run>
    3590:	42 c0       	rjmp	.+132    	; 0x3616 <STEPPER_move+0x130>
    3592:	ed b7       	in	r30, 0x3d	; 61
    3594:	fe b7       	in	r31, 0x3e	; 62
    3596:	39 97       	sbiw	r30, 0x09	; 9
    3598:	0f b6       	in	r0, 0x3f	; 63
    359a:	f8 94       	cli
    359c:	fe bf       	out	0x3e, r31	; 62
    359e:	0f be       	out	0x3f, r0	; 63
    35a0:	ed bf       	out	0x3d, r30	; 61
    35a2:	6d b6       	in	r6, 0x3d	; 61
    35a4:	7e b6       	in	r7, 0x3e	; 62
    35a6:	08 94       	sec
    35a8:	61 1c       	adc	r6, r1
    35aa:	71 1c       	adc	r7, r1
    35ac:	52 83       	std	Z+2, r21	; 0x02
    35ae:	41 83       	std	Z+1, r20	; 0x01
    35b0:	f3 01       	movw	r30, r6
    35b2:	b3 82       	std	Z+3, r11	; 0x03
    35b4:	a2 82       	std	Z+2, r10	; 0x02
    35b6:	d5 82       	std	Z+5, r13	; 0x05
    35b8:	c4 82       	std	Z+4, r12	; 0x04
    35ba:	96 83       	std	Z+6, r25	; 0x06
    35bc:	88 8d       	ldd	r24, Y+24	; 0x18
    35be:	99 8d       	ldd	r25, Y+25	; 0x19
    35c0:	90 87       	std	Z+8, r25	; 0x08
    35c2:	87 83       	std	Z+7, r24	; 0x07
    35c4:	80 e0       	ldi	r24, 0x00	; 0
    35c6:	49 2d       	mov	r20, r9
    35c8:	c7 2e       	mov	r12, r23
    35ca:	5d 01       	movw	r10, r26
    35cc:	1a c0       	rjmp	.+52     	; 0x3602 <STEPPER_move+0x11c>
    35ce:	ed b7       	in	r30, 0x3d	; 61
    35d0:	fe b7       	in	r31, 0x3e	; 62
    35d2:	39 97       	sbiw	r30, 0x09	; 9
    35d4:	0f b6       	in	r0, 0x3f	; 63
    35d6:	f8 94       	cli
    35d8:	fe bf       	out	0x3e, r31	; 62
    35da:	0f be       	out	0x3f, r0	; 63
    35dc:	ed bf       	out	0x3d, r30	; 61
    35de:	ad b7       	in	r26, 0x3d	; 61
    35e0:	be b7       	in	r27, 0x3e	; 62
    35e2:	11 96       	adiw	r26, 0x01	; 1
    35e4:	52 83       	std	Z+2, r21	; 0x02
    35e6:	41 83       	std	Z+1, r20	; 0x01
    35e8:	fd 01       	movw	r30, r26
    35ea:	b3 82       	std	Z+3, r11	; 0x03
    35ec:	a2 82       	std	Z+2, r10	; 0x02
    35ee:	d5 82       	std	Z+5, r13	; 0x05
    35f0:	c4 82       	std	Z+4, r12	; 0x04
    35f2:	96 83       	std	Z+6, r25	; 0x06
    35f4:	10 86       	std	Z+8, r1	; 0x08
    35f6:	17 82       	std	Z+7, r1	; 0x07
    35f8:	81 e0       	ldi	r24, 0x01	; 1
    35fa:	49 2d       	mov	r20, r9
    35fc:	c7 2e       	mov	r12, r23
    35fe:	aa 24       	eor	r10, r10
    3600:	bb 24       	eor	r11, r11
    3602:	0e 94 b6 19 	call	0x336c	; 0x336c <STEPPER_stepmode>
    3606:	8d b7       	in	r24, 0x3d	; 61
    3608:	9e b7       	in	r25, 0x3e	; 62
    360a:	09 96       	adiw	r24, 0x09	; 9
    360c:	0f b6       	in	r0, 0x3f	; 63
    360e:	f8 94       	cli
    3610:	9e bf       	out	0x3e, r25	; 62
    3612:	0f be       	out	0x3f, r0	; 63
    3614:	8d bf       	out	0x3d, r24	; 61
    3616:	cf 91       	pop	r28
    3618:	df 91       	pop	r29
    361a:	1f 91       	pop	r17
    361c:	0f 91       	pop	r16
    361e:	ff 90       	pop	r15
    3620:	ef 90       	pop	r14
    3622:	df 90       	pop	r13
    3624:	cf 90       	pop	r12
    3626:	bf 90       	pop	r11
    3628:	af 90       	pop	r10
    362a:	9f 90       	pop	r9
    362c:	8f 90       	pop	r8
    362e:	7f 90       	pop	r7
    3630:	6f 90       	pop	r6
    3632:	08 95       	ret

00003634 <STEPPER_open>:
    3634:	0e 94 89 24 	call	0x4912	; 0x4912 <__STEPPER_init>
    3638:	81 e0       	ldi	r24, 0x01	; 1
    363a:	80 93 dd 06 	sts	0x06DD, r24
    363e:	e7 ea       	ldi	r30, 0xA7	; 167
    3640:	f6 e0       	ldi	r31, 0x06	; 6
    3642:	11 92       	st	Z+, r1
    3644:	11 92       	st	Z+, r1
    3646:	11 82       	std	Z+1, r1	; 0x01
    3648:	10 82       	st	Z, r1
    364a:	32 96       	adiw	r30, 0x02	; 2
    364c:	11 82       	std	Z+1, r1	; 0x01
    364e:	10 82       	st	Z, r1
    3650:	32 96       	adiw	r30, 0x02	; 2
    3652:	11 82       	std	Z+1, r1	; 0x01
    3654:	10 82       	st	Z, r1
    3656:	32 96       	adiw	r30, 0x02	; 2
    3658:	11 82       	std	Z+1, r1	; 0x01
    365a:	10 82       	st	Z, r1
    365c:	32 96       	adiw	r30, 0x02	; 2
    365e:	11 82       	std	Z+1, r1	; 0x01
    3660:	10 82       	st	Z, r1
    3662:	32 96       	adiw	r30, 0x02	; 2
    3664:	11 82       	std	Z+1, r1	; 0x01
    3666:	10 82       	st	Z, r1
    3668:	32 96       	adiw	r30, 0x02	; 2
    366a:	11 82       	std	Z+1, r1	; 0x01
    366c:	10 82       	st	Z, r1
    366e:	32 96       	adiw	r30, 0x02	; 2
    3670:	11 82       	std	Z+1, r1	; 0x01
    3672:	10 82       	st	Z, r1
    3674:	32 96       	adiw	r30, 0x02	; 2
    3676:	11 82       	std	Z+1, r1	; 0x01
    3678:	10 82       	st	Z, r1
    367a:	32 96       	adiw	r30, 0x02	; 2
    367c:	11 82       	std	Z+1, r1	; 0x01
    367e:	10 82       	st	Z, r1
    3680:	32 96       	adiw	r30, 0x02	; 2
    3682:	11 82       	std	Z+1, r1	; 0x01
    3684:	10 82       	st	Z, r1
    3686:	32 96       	adiw	r30, 0x02	; 2
    3688:	11 82       	std	Z+1, r1	; 0x01
    368a:	10 82       	st	Z, r1
    368c:	36 96       	adiw	r30, 0x06	; 6
    368e:	11 92       	st	Z+, r1
    3690:	11 92       	st	Z+, r1
    3692:	11 92       	st	Z+, r1
    3694:	10 82       	st	Z, r1
    3696:	32 96       	adiw	r30, 0x02	; 2
    3698:	11 92       	st	Z+, r1
    369a:	11 92       	st	Z+, r1
    369c:	11 92       	st	Z+, r1
    369e:	11 92       	st	Z+, r1
    36a0:	11 92       	st	Z+, r1
    36a2:	11 92       	st	Z+, r1
    36a4:	11 92       	st	Z+, r1
    36a6:	11 82       	std	Z+1, r1	; 0x01
    36a8:	10 82       	st	Z, r1
    36aa:	32 96       	adiw	r30, 0x02	; 2
    36ac:	11 82       	std	Z+1, r1	; 0x01
    36ae:	10 82       	st	Z, r1
    36b0:	32 96       	adiw	r30, 0x02	; 2
    36b2:	11 82       	std	Z+1, r1	; 0x01
    36b4:	10 82       	st	Z, r1
    36b6:	32 96       	adiw	r30, 0x02	; 2
    36b8:	11 82       	std	Z+1, r1	; 0x01
    36ba:	10 82       	st	Z, r1
    36bc:	76 97       	sbiw	r30, 0x16	; 22
    36be:	11 82       	std	Z+1, r1	; 0x01
    36c0:	10 82       	st	Z, r1
    36c2:	32 96       	adiw	r30, 0x02	; 2
    36c4:	11 82       	std	Z+1, r1	; 0x01
    36c6:	10 82       	st	Z, r1
    36c8:	10 92 dc 06 	sts	0x06DC, r1
    36cc:	10 92 db 06 	sts	0x06DB, r1
    36d0:	10 92 dd 06 	sts	0x06DD, r1
    36d4:	87 e0       	ldi	r24, 0x07	; 7
    36d6:	61 e0       	ldi	r22, 0x01	; 1
    36d8:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    36dc:	87 e0       	ldi	r24, 0x07	; 7
    36de:	91 e0       	ldi	r25, 0x01	; 1
    36e0:	08 95       	ret

000036e2 <STEPPER_run>:
    36e2:	ef 92       	push	r14
    36e4:	ff 92       	push	r15
    36e6:	0f 93       	push	r16
    36e8:	1f 93       	push	r17
    36ea:	18 2f       	mov	r17, r24
    36ec:	06 2f       	mov	r16, r22
    36ee:	7a 01       	movw	r14, r20
    36f0:	60 e0       	ldi	r22, 0x00	; 0
    36f2:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_set_mode>
    36f6:	81 2f       	mov	r24, r17
    36f8:	60 2f       	mov	r22, r16
    36fa:	0e 94 aa 1b 	call	0x3754	; 0x3754 <STEPPER_set_dir>
    36fe:	81 2f       	mov	r24, r17
    3700:	b7 01       	movw	r22, r14
    3702:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <STEPPER_set_speed>
    3706:	1f 91       	pop	r17
    3708:	0f 91       	pop	r16
    370a:	ff 90       	pop	r15
    370c:	ef 90       	pop	r14
    370e:	08 95       	ret

00003710 <STEPPER_set_accel>:
    3710:	48 2f       	mov	r20, r24
    3712:	81 e0       	ldi	r24, 0x01	; 1
    3714:	80 93 dd 06 	sts	0x06DD, r24
    3718:	cb 01       	movw	r24, r22
    371a:	23 e0       	ldi	r18, 0x03	; 3
    371c:	69 3e       	cpi	r22, 0xE9	; 233
    371e:	72 07       	cpc	r23, r18
    3720:	10 f0       	brcs	.+4      	; 0x3726 <STEPPER_set_accel+0x16>
    3722:	88 ee       	ldi	r24, 0xE8	; 232
    3724:	93 e0       	ldi	r25, 0x03	; 3
    3726:	41 30       	cpi	r20, 0x01	; 1
    3728:	71 f0       	breq	.+28     	; 0x3746 <STEPPER_set_accel+0x36>
    372a:	41 30       	cpi	r20, 0x01	; 1
    372c:	18 f0       	brcs	.+6      	; 0x3734 <STEPPER_set_accel+0x24>
    372e:	42 30       	cpi	r20, 0x02	; 2
    3730:	71 f4       	brne	.+28     	; 0x374e <STEPPER_set_accel+0x3e>
    3732:	05 c0       	rjmp	.+10     	; 0x373e <STEPPER_set_accel+0x2e>
    3734:	90 93 b2 06 	sts	0x06B2, r25
    3738:	80 93 b1 06 	sts	0x06B1, r24
    373c:	08 c0       	rjmp	.+16     	; 0x374e <STEPPER_set_accel+0x3e>
    373e:	90 93 b2 06 	sts	0x06B2, r25
    3742:	80 93 b1 06 	sts	0x06B1, r24
    3746:	90 93 b4 06 	sts	0x06B4, r25
    374a:	80 93 b3 06 	sts	0x06B3, r24
    374e:	10 92 dd 06 	sts	0x06DD, r1
    3752:	08 95       	ret

00003754 <STEPPER_set_dir>:
    3754:	98 2f       	mov	r25, r24
    3756:	81 e0       	ldi	r24, 0x01	; 1
    3758:	80 93 dd 06 	sts	0x06DD, r24
    375c:	91 30       	cpi	r25, 0x01	; 1
    375e:	51 f0       	breq	.+20     	; 0x3774 <STEPPER_set_dir+0x20>
    3760:	91 30       	cpi	r25, 0x01	; 1
    3762:	18 f0       	brcs	.+6      	; 0x376a <STEPPER_set_dir+0x16>
    3764:	92 30       	cpi	r25, 0x02	; 2
    3766:	41 f4       	brne	.+16     	; 0x3778 <STEPPER_set_dir+0x24>
    3768:	03 c0       	rjmp	.+6      	; 0x3770 <STEPPER_set_dir+0x1c>
    376a:	60 93 ca 06 	sts	0x06CA, r22
    376e:	04 c0       	rjmp	.+8      	; 0x3778 <STEPPER_set_dir+0x24>
    3770:	60 93 ca 06 	sts	0x06CA, r22
    3774:	60 93 cb 06 	sts	0x06CB, r22
    3778:	10 92 dd 06 	sts	0x06DD, r1
    377c:	08 95       	ret

0000377e <STEPPER_set_mode>:
    377e:	98 2f       	mov	r25, r24
    3780:	81 e0       	ldi	r24, 0x01	; 1
    3782:	80 93 dd 06 	sts	0x06DD, r24
    3786:	91 30       	cpi	r25, 0x01	; 1
    3788:	51 f0       	breq	.+20     	; 0x379e <STEPPER_set_mode+0x20>
    378a:	91 30       	cpi	r25, 0x01	; 1
    378c:	18 f0       	brcs	.+6      	; 0x3794 <STEPPER_set_mode+0x16>
    378e:	92 30       	cpi	r25, 0x02	; 2
    3790:	41 f4       	brne	.+16     	; 0x37a2 <STEPPER_set_mode+0x24>
    3792:	03 c0       	rjmp	.+6      	; 0x379a <STEPPER_set_mode+0x1c>
    3794:	60 93 a7 06 	sts	0x06A7, r22
    3798:	04 c0       	rjmp	.+8      	; 0x37a2 <STEPPER_set_mode+0x24>
    379a:	60 93 a7 06 	sts	0x06A7, r22
    379e:	60 93 a8 06 	sts	0x06A8, r22
    37a2:	10 92 dd 06 	sts	0x06DD, r1
    37a6:	08 95       	ret

000037a8 <STEPPER_set_speed>:
    37a8:	48 2f       	mov	r20, r24
    37aa:	81 e0       	ldi	r24, 0x01	; 1
    37ac:	80 93 dd 06 	sts	0x06DD, r24
    37b0:	cb 01       	movw	r24, r22
    37b2:	21 e0       	ldi	r18, 0x01	; 1
    37b4:	61 39       	cpi	r22, 0x91	; 145
    37b6:	72 07       	cpc	r23, r18
    37b8:	10 f0       	brcs	.+4      	; 0x37be <STEPPER_set_speed+0x16>
    37ba:	80 e9       	ldi	r24, 0x90	; 144
    37bc:	91 e0       	ldi	r25, 0x01	; 1
    37be:	41 30       	cpi	r20, 0x01	; 1
    37c0:	71 f0       	breq	.+28     	; 0x37de <STEPPER_set_speed+0x36>
    37c2:	41 30       	cpi	r20, 0x01	; 1
    37c4:	18 f0       	brcs	.+6      	; 0x37cc <STEPPER_set_speed+0x24>
    37c6:	42 30       	cpi	r20, 0x02	; 2
    37c8:	71 f4       	brne	.+28     	; 0x37e6 <STEPPER_set_speed+0x3e>
    37ca:	05 c0       	rjmp	.+10     	; 0x37d6 <STEPPER_set_speed+0x2e>
    37cc:	90 93 aa 06 	sts	0x06AA, r25
    37d0:	80 93 a9 06 	sts	0x06A9, r24
    37d4:	08 c0       	rjmp	.+16     	; 0x37e6 <STEPPER_set_speed+0x3e>
    37d6:	90 93 aa 06 	sts	0x06AA, r25
    37da:	80 93 a9 06 	sts	0x06A9, r24
    37de:	90 93 ac 06 	sts	0x06AC, r25
    37e2:	80 93 ab 06 	sts	0x06AB, r24
    37e6:	10 92 dd 06 	sts	0x06DD, r1
    37ea:	08 95       	ret

000037ec <STEPPER_step>:
    37ec:	8f 92       	push	r8
    37ee:	9f 92       	push	r9
    37f0:	af 92       	push	r10
    37f2:	bf 92       	push	r11
    37f4:	cf 92       	push	r12
    37f6:	df 92       	push	r13
    37f8:	ef 92       	push	r14
    37fa:	ff 92       	push	r15
    37fc:	0f 93       	push	r16
    37fe:	1f 93       	push	r17
    3800:	cf 93       	push	r28
    3802:	df 93       	push	r29
    3804:	18 2f       	mov	r17, r24
    3806:	f6 2e       	mov	r15, r22
    3808:	5a 01       	movw	r10, r20
    380a:	49 01       	movw	r8, r18
    380c:	e6 01       	movw	r28, r12
    380e:	61 e0       	ldi	r22, 0x01	; 1
    3810:	0e 94 bf 1b 	call	0x377e	; 0x377e <STEPPER_set_mode>
    3814:	81 2f       	mov	r24, r17
    3816:	b5 01       	movw	r22, r10
    3818:	a4 01       	movw	r20, r8
    381a:	0e 94 c3 24 	call	0x4986	; 0x4986 <STEPPER_setup_decels>
    381e:	81 2f       	mov	r24, r17
    3820:	6f 2d       	mov	r22, r15
    3822:	0e 94 aa 1b 	call	0x3754	; 0x3754 <STEPPER_set_dir>
    3826:	81 2f       	mov	r24, r17
    3828:	60 2f       	mov	r22, r16
    382a:	0e 94 ae 24 	call	0x495c	; 0x495c <STEPPER_set_stop_mode>
    382e:	81 2f       	mov	r24, r17
    3830:	b5 01       	movw	r22, r10
    3832:	0e 94 93 24 	call	0x4926	; 0x4926 <STEPPER_set_steps>
    3836:	c1 14       	cp	r12, r1
    3838:	d1 04       	cpc	r13, r1
    383a:	99 f0       	breq	.+38     	; 0x3862 <STEPPER_step+0x76>
    383c:	11 30       	cpi	r17, 0x01	; 1
    383e:	49 f0       	breq	.+18     	; 0x3852 <STEPPER_step+0x66>
    3840:	11 30       	cpi	r17, 0x01	; 1
    3842:	18 f0       	brcs	.+6      	; 0x384a <STEPPER_step+0x5e>
    3844:	12 30       	cpi	r17, 0x02	; 2
    3846:	69 f4       	brne	.+26     	; 0x3862 <STEPPER_step+0x76>
    3848:	06 c0       	rjmp	.+12     	; 0x3856 <STEPPER_step+0x6a>
    384a:	18 82       	st	Y, r1
    384c:	10 92 d9 06 	sts	0x06D9, r1
    3850:	08 c0       	rjmp	.+16     	; 0x3862 <STEPPER_step+0x76>
    3852:	19 82       	std	Y+1, r1	; 0x01
    3854:	04 c0       	rjmp	.+8      	; 0x385e <STEPPER_step+0x72>
    3856:	18 82       	st	Y, r1
    3858:	19 82       	std	Y+1, r1	; 0x01
    385a:	10 92 d9 06 	sts	0x06D9, r1
    385e:	10 92 da 06 	sts	0x06DA, r1
    3862:	d0 93 dc 06 	sts	0x06DC, r29
    3866:	c0 93 db 06 	sts	0x06DB, r28
    386a:	ee 20       	and	r14, r14
    386c:	b9 f5       	brne	.+110    	; 0x38dc <STEPPER_step+0xf0>
    386e:	8e ee       	ldi	r24, 0xEE	; 238
    3870:	93 e0       	ldi	r25, 0x03	; 3
    3872:	90 93 dc 06 	sts	0x06DC, r25
    3876:	80 93 db 06 	sts	0x06DB, r24
    387a:	81 2f       	mov	r24, r17
    387c:	b4 01       	movw	r22, r8
    387e:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <STEPPER_set_speed>
    3882:	81 2f       	mov	r24, r17
    3884:	0e 94 74 24 	call	0x48e8	; 0x48e8 <STEPPER_go>
    3888:	11 30       	cpi	r17, 0x01	; 1
    388a:	71 f0       	breq	.+28     	; 0x38a8 <STEPPER_step+0xbc>
    388c:	11 30       	cpi	r17, 0x01	; 1
    388e:	18 f0       	brcs	.+6      	; 0x3896 <STEPPER_step+0xaa>
    3890:	12 30       	cpi	r17, 0x02	; 2
    3892:	59 f5       	brne	.+86     	; 0x38ea <STEPPER_step+0xfe>
    3894:	12 c0       	rjmp	.+36     	; 0x38ba <STEPPER_step+0xce>
    3896:	10 92 ee 03 	sts	0x03EE, r1
    389a:	10 92 d9 06 	sts	0x06D9, r1
    389e:	80 91 ee 03 	lds	r24, 0x03EE
    38a2:	88 23       	and	r24, r24
    38a4:	e1 f3       	breq	.-8      	; 0x389e <STEPPER_step+0xb2>
    38a6:	21 c0       	rjmp	.+66     	; 0x38ea <STEPPER_step+0xfe>
    38a8:	10 92 ef 03 	sts	0x03EF, r1
    38ac:	10 92 da 06 	sts	0x06DA, r1
    38b0:	80 91 ef 03 	lds	r24, 0x03EF
    38b4:	88 23       	and	r24, r24
    38b6:	e1 f3       	breq	.-8      	; 0x38b0 <STEPPER_step+0xc4>
    38b8:	18 c0       	rjmp	.+48     	; 0x38ea <STEPPER_step+0xfe>
    38ba:	10 92 ee 03 	sts	0x03EE, r1
    38be:	10 92 ef 03 	sts	0x03EF, r1
    38c2:	10 92 d9 06 	sts	0x06D9, r1
    38c6:	10 92 da 06 	sts	0x06DA, r1
    38ca:	80 91 ee 03 	lds	r24, 0x03EE
    38ce:	88 23       	and	r24, r24
    38d0:	e1 f3       	breq	.-8      	; 0x38ca <STEPPER_step+0xde>
    38d2:	80 91 ef 03 	lds	r24, 0x03EF
    38d6:	88 23       	and	r24, r24
    38d8:	c1 f3       	breq	.-16     	; 0x38ca <STEPPER_step+0xde>
    38da:	07 c0       	rjmp	.+14     	; 0x38ea <STEPPER_step+0xfe>
    38dc:	81 2f       	mov	r24, r17
    38de:	b4 01       	movw	r22, r8
    38e0:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <STEPPER_set_speed>
    38e4:	81 2f       	mov	r24, r17
    38e6:	0e 94 74 24 	call	0x48e8	; 0x48e8 <STEPPER_go>
    38ea:	df 91       	pop	r29
    38ec:	cf 91       	pop	r28
    38ee:	1f 91       	pop	r17
    38f0:	0f 91       	pop	r16
    38f2:	ff 90       	pop	r15
    38f4:	ef 90       	pop	r14
    38f6:	df 90       	pop	r13
    38f8:	cf 90       	pop	r12
    38fa:	bf 90       	pop	r11
    38fc:	af 90       	pop	r10
    38fe:	9f 90       	pop	r9
    3900:	8f 90       	pop	r8
    3902:	08 95       	ret

00003904 <STEPPER_stop>:
    3904:	0f 93       	push	r16
    3906:	1f 93       	push	r17
    3908:	18 2f       	mov	r17, r24
    390a:	06 2f       	mov	r16, r22
    390c:	66 23       	and	r22, r22
    390e:	49 f4       	brne	.+18     	; 0x3922 <STEPPER_stop+0x1e>
    3910:	60 e0       	ldi	r22, 0x00	; 0
    3912:	70 e0       	ldi	r23, 0x00	; 0
    3914:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <STEPPER_set_speed>
    3918:	81 2f       	mov	r24, r17
    391a:	60 e0       	ldi	r22, 0x00	; 0
    391c:	70 e0       	ldi	r23, 0x00	; 0
    391e:	0e 94 93 24 	call	0x4926	; 0x4926 <STEPPER_set_steps>
    3922:	81 e0       	ldi	r24, 0x01	; 1
    3924:	80 93 dd 06 	sts	0x06DD, r24
    3928:	11 30       	cpi	r17, 0x01	; 1
    392a:	51 f0       	breq	.+20     	; 0x3940 <STEPPER_stop+0x3c>
    392c:	11 30       	cpi	r17, 0x01	; 1
    392e:	18 f0       	brcs	.+6      	; 0x3936 <STEPPER_stop+0x32>
    3930:	12 30       	cpi	r17, 0x02	; 2
    3932:	41 f4       	brne	.+16     	; 0x3944 <STEPPER_stop+0x40>
    3934:	03 c0       	rjmp	.+6      	; 0x393c <STEPPER_stop+0x38>
    3936:	00 93 c5 06 	sts	0x06C5, r16
    393a:	04 c0       	rjmp	.+8      	; 0x3944 <STEPPER_stop+0x40>
    393c:	00 93 c5 06 	sts	0x06C5, r16
    3940:	00 93 c6 06 	sts	0x06C6, r16
    3944:	10 92 dd 06 	sts	0x06DD, r1
    3948:	1f 91       	pop	r17
    394a:	0f 91       	pop	r16
    394c:	08 95       	ret

0000394e <STEPPER_wait_and_then>:
    394e:	cf 92       	push	r12
    3950:	df 92       	push	r13
    3952:	ef 92       	push	r14
    3954:	ff 92       	push	r15
    3956:	0f 93       	push	r16
    3958:	1f 93       	push	r17
    395a:	df 93       	push	r29
    395c:	cf 93       	push	r28
    395e:	cd b7       	in	r28, 0x3d	; 61
    3960:	de b7       	in	r29, 0x3e	; 62
    3962:	8b 85       	ldd	r24, Y+11	; 0x0b
    3964:	81 30       	cpi	r24, 0x01	; 1
    3966:	61 f0       	breq	.+24     	; 0x3980 <STEPPER_wait_and_then+0x32>
    3968:	81 30       	cpi	r24, 0x01	; 1
    396a:	18 f0       	brcs	.+6      	; 0x3972 <STEPPER_wait_and_then+0x24>
    396c:	82 30       	cpi	r24, 0x02	; 2
    396e:	a1 f5       	brne	.+104    	; 0x39d8 <STEPPER_wait_and_then+0x8a>
    3970:	11 c0       	rjmp	.+34     	; 0x3994 <STEPPER_wait_and_then+0x46>
    3972:	ec 85       	ldd	r30, Y+12	; 0x0c
    3974:	fd 85       	ldd	r31, Y+13	; 0x0d
    3976:	80 91 de 06 	lds	r24, 0x06DE
    397a:	88 23       	and	r24, r24
    397c:	e1 f3       	breq	.-8      	; 0x3976 <STEPPER_wait_and_then+0x28>
    397e:	06 c0       	rjmp	.+12     	; 0x398c <STEPPER_wait_and_then+0x3e>
    3980:	ec 85       	ldd	r30, Y+12	; 0x0c
    3982:	fd 85       	ldd	r31, Y+13	; 0x0d
    3984:	80 91 df 06 	lds	r24, 0x06DF
    3988:	88 23       	and	r24, r24
    398a:	e1 f3       	breq	.-8      	; 0x3984 <STEPPER_wait_and_then+0x36>
    398c:	30 97       	sbiw	r30, 0x00	; 0
    398e:	21 f1       	breq	.+72     	; 0x39d8 <STEPPER_wait_and_then+0x8a>
    3990:	09 95       	icall
    3992:	22 c0       	rjmp	.+68     	; 0x39d8 <STEPPER_wait_and_then+0x8a>
    3994:	cc 84       	ldd	r12, Y+12	; 0x0c
    3996:	dd 84       	ldd	r13, Y+13	; 0x0d
    3998:	ee 84       	ldd	r14, Y+14	; 0x0e
    399a:	ff 84       	ldd	r15, Y+15	; 0x0f
    399c:	00 e0       	ldi	r16, 0x00	; 0
    399e:	10 e0       	ldi	r17, 0x00	; 0
    39a0:	00 23       	and	r16, r16
    39a2:	51 f4       	brne	.+20     	; 0x39b8 <STEPPER_wait_and_then+0x6a>
    39a4:	80 91 de 06 	lds	r24, 0x06DE
    39a8:	88 23       	and	r24, r24
    39aa:	31 f0       	breq	.+12     	; 0x39b8 <STEPPER_wait_and_then+0x6a>
    39ac:	c1 14       	cp	r12, r1
    39ae:	d1 04       	cpc	r13, r1
    39b0:	11 f0       	breq	.+4      	; 0x39b6 <STEPPER_wait_and_then+0x68>
    39b2:	f6 01       	movw	r30, r12
    39b4:	09 95       	icall
    39b6:	01 e0       	ldi	r16, 0x01	; 1
    39b8:	11 23       	and	r17, r17
    39ba:	51 f4       	brne	.+20     	; 0x39d0 <STEPPER_wait_and_then+0x82>
    39bc:	80 91 df 06 	lds	r24, 0x06DF
    39c0:	88 23       	and	r24, r24
    39c2:	31 f0       	breq	.+12     	; 0x39d0 <STEPPER_wait_and_then+0x82>
    39c4:	e1 14       	cp	r14, r1
    39c6:	f1 04       	cpc	r15, r1
    39c8:	11 f0       	breq	.+4      	; 0x39ce <STEPPER_wait_and_then+0x80>
    39ca:	f7 01       	movw	r30, r14
    39cc:	09 95       	icall
    39ce:	11 e0       	ldi	r17, 0x01	; 1
    39d0:	00 23       	and	r16, r16
    39d2:	31 f3       	breq	.-52     	; 0x39a0 <STEPPER_wait_and_then+0x52>
    39d4:	11 23       	and	r17, r17
    39d6:	21 f3       	breq	.-56     	; 0x39a0 <STEPPER_wait_and_then+0x52>
    39d8:	cf 91       	pop	r28
    39da:	df 91       	pop	r29
    39dc:	1f 91       	pop	r17
    39de:	0f 91       	pop	r16
    39e0:	ff 90       	pop	r15
    39e2:	ef 90       	pop	r14
    39e4:	df 90       	pop	r13
    39e6:	cf 90       	pop	r12
    39e8:	08 95       	ret

000039ea <SYS_get_state>:
    39ea:	e8 2f       	mov	r30, r24
    39ec:	f0 e0       	ldi	r31, 0x00	; 0
    39ee:	e3 31       	cpi	r30, 0x13	; 19
    39f0:	f1 05       	cpc	r31, r1
    39f2:	40 f4       	brcc	.+16     	; 0x3a04 <SYS_get_state+0x1a>
    39f4:	e2 5c       	subi	r30, 0xC2	; 194
    39f6:	ff 4f       	sbci	r31, 0xFF	; 255
    39f8:	ee 0f       	add	r30, r30
    39fa:	ff 1f       	adc	r31, r31
    39fc:	05 90       	lpm	r0, Z+
    39fe:	f4 91       	lpm	r31, Z+
    3a00:	e0 2d       	mov	r30, r0
    3a02:	09 94       	ijmp
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	08 95       	ret
    3a08:	80 91 e0 06 	lds	r24, 0x06E0
    3a0c:	08 95       	ret
    3a0e:	80 91 e1 06 	lds	r24, 0x06E1
    3a12:	08 95       	ret
    3a14:	80 91 e2 06 	lds	r24, 0x06E2
    3a18:	08 95       	ret
    3a1a:	80 91 e3 06 	lds	r24, 0x06E3
    3a1e:	08 95       	ret
    3a20:	80 91 e4 06 	lds	r24, 0x06E4
    3a24:	08 95       	ret
    3a26:	80 91 e6 06 	lds	r24, 0x06E6
    3a2a:	08 95       	ret
    3a2c:	80 91 e5 06 	lds	r24, 0x06E5
    3a30:	08 95       	ret
    3a32:	80 91 e7 06 	lds	r24, 0x06E7
    3a36:	08 95       	ret
    3a38:	80 91 e8 06 	lds	r24, 0x06E8
    3a3c:	08 95       	ret
    3a3e:	80 91 e9 06 	lds	r24, 0x06E9
    3a42:	08 95       	ret
    3a44:	80 91 ea 06 	lds	r24, 0x06EA
    3a48:	08 95       	ret
    3a4a:	80 91 eb 06 	lds	r24, 0x06EB
    3a4e:	08 95       	ret
    3a50:	80 91 ec 06 	lds	r24, 0x06EC
    3a54:	08 95       	ret
    3a56:	80 91 ed 06 	lds	r24, 0x06ED
    3a5a:	08 95       	ret
    3a5c:	80 91 ee 06 	lds	r24, 0x06EE
    3a60:	08 95       	ret
    3a62:	80 91 ef 06 	lds	r24, 0x06EF
    3a66:	08 95       	ret
    3a68:	80 91 f0 06 	lds	r24, 0x06F0
    3a6c:	08 95       	ret
    3a6e:	80 91 f1 06 	lds	r24, 0x06F1
    3a72:	08 95       	ret
    3a74:	80 91 f2 06 	lds	r24, 0x06F2
    3a78:	08 95       	ret

00003a7a <SYS_set_state>:
    3a7a:	e8 2f       	mov	r30, r24
    3a7c:	f0 e0       	ldi	r31, 0x00	; 0
    3a7e:	e3 31       	cpi	r30, 0x13	; 19
    3a80:	f1 05       	cpc	r31, r1
    3a82:	08 f0       	brcs	.+2      	; 0x3a86 <SYS_set_state+0xc>
    3a84:	40 c0       	rjmp	.+128    	; 0x3b06 <SYS_set_state+0x8c>
    3a86:	ef 5a       	subi	r30, 0xAF	; 175
    3a88:	ff 4f       	sbci	r31, 0xFF	; 255
    3a8a:	ee 0f       	add	r30, r30
    3a8c:	ff 1f       	adc	r31, r31
    3a8e:	05 90       	lpm	r0, Z+
    3a90:	f4 91       	lpm	r31, Z+
    3a92:	e0 2d       	mov	r30, r0
    3a94:	09 94       	ijmp
    3a96:	60 93 e0 06 	sts	0x06E0, r22
    3a9a:	08 95       	ret
    3a9c:	60 93 e1 06 	sts	0x06E1, r22
    3aa0:	08 95       	ret
    3aa2:	60 93 e2 06 	sts	0x06E2, r22
    3aa6:	08 95       	ret
    3aa8:	60 93 e3 06 	sts	0x06E3, r22
    3aac:	08 95       	ret
    3aae:	60 93 e4 06 	sts	0x06E4, r22
    3ab2:	08 95       	ret
    3ab4:	60 93 e6 06 	sts	0x06E6, r22
    3ab8:	08 95       	ret
    3aba:	60 93 e5 06 	sts	0x06E5, r22
    3abe:	08 95       	ret
    3ac0:	60 93 e7 06 	sts	0x06E7, r22
    3ac4:	08 95       	ret
    3ac6:	60 93 e8 06 	sts	0x06E8, r22
    3aca:	08 95       	ret
    3acc:	60 93 e9 06 	sts	0x06E9, r22
    3ad0:	08 95       	ret
    3ad2:	60 93 ea 06 	sts	0x06EA, r22
    3ad6:	08 95       	ret
    3ad8:	60 93 eb 06 	sts	0x06EB, r22
    3adc:	08 95       	ret
    3ade:	60 93 ec 06 	sts	0x06EC, r22
    3ae2:	08 95       	ret
    3ae4:	60 93 ed 06 	sts	0x06ED, r22
    3ae8:	08 95       	ret
    3aea:	60 93 ee 06 	sts	0x06EE, r22
    3aee:	08 95       	ret
    3af0:	60 93 ef 06 	sts	0x06EF, r22
    3af4:	08 95       	ret
    3af6:	60 93 f0 06 	sts	0x06F0, r22
    3afa:	08 95       	ret
    3afc:	60 93 f1 06 	sts	0x06F1, r22
    3b00:	08 95       	ret
    3b02:	60 93 f0 06 	sts	0x06F0, r22
    3b06:	08 95       	ret

00003b08 <ATTINY_get_sensors>:
    3b08:	0f 93       	push	r16
    3b0a:	1f 93       	push	r17
    3b0c:	81 e0       	ldi	r24, 0x01	; 1
    3b0e:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    3b12:	81 30       	cpi	r24, 0x01	; 1
    3b14:	11 f0       	breq	.+4      	; 0x3b1a <ATTINY_get_sensors+0x12>
    3b16:	00 e0       	ldi	r16, 0x00	; 0
    3b18:	24 c0       	rjmp	.+72     	; 0x3b62 <ATTINY_get_sensors+0x5a>
    3b1a:	87 e0       	ldi	r24, 0x07	; 7
    3b1c:	0e 94 ad 18 	call	0x315a	; 0x315a <SPI_set_slave_addr>
    3b20:	82 e0       	ldi	r24, 0x02	; 2
    3b22:	6a e0       	ldi	r22, 0x0A	; 10
    3b24:	0e 94 fe 18 	call	0x31fc	; 0x31fc <SPI_transmit>
    3b28:	82 e0       	ldi	r24, 0x02	; 2
    3b2a:	62 eb       	ldi	r22, 0xB2	; 178
    3b2c:	0e 94 fe 18 	call	0x31fc	; 0x31fc <SPI_transmit>
    3b30:	18 ec       	ldi	r17, 0xC8	; 200
    3b32:	81 2f       	mov	r24, r17
    3b34:	8a 95       	dec	r24
    3b36:	f1 f7       	brne	.-4      	; 0x3b34 <ATTINY_get_sensors+0x2c>
    3b38:	82 e0       	ldi	r24, 0x02	; 2
    3b3a:	60 e0       	ldi	r22, 0x00	; 0
    3b3c:	0e 94 5f 23 	call	0x46be	; 0x46be <SPI_receive>
    3b40:	08 2f       	mov	r16, r24
    3b42:	81 2f       	mov	r24, r17
    3b44:	8a 95       	dec	r24
    3b46:	f1 f7       	brne	.-4      	; 0x3b44 <ATTINY_get_sensors+0x3c>
    3b48:	82 e0       	ldi	r24, 0x02	; 2
    3b4a:	60 e0       	ldi	r22, 0x00	; 0
    3b4c:	0e 94 5f 23 	call	0x46be	; 0x46be <SPI_receive>
    3b50:	1a 95       	dec	r17
    3b52:	f1 f7       	brne	.-4      	; 0x3b50 <ATTINY_get_sensors+0x48>
    3b54:	87 e0       	ldi	r24, 0x07	; 7
    3b56:	0e 94 ad 18 	call	0x315a	; 0x315a <SPI_set_slave_addr>
    3b5a:	88 e8       	ldi	r24, 0x88	; 136
    3b5c:	93 e1       	ldi	r25, 0x13	; 19
    3b5e:	01 97       	sbiw	r24, 0x01	; 1
    3b60:	f1 f7       	brne	.-4      	; 0x3b5e <ATTINY_get_sensors+0x56>
    3b62:	80 2f       	mov	r24, r16
    3b64:	1f 91       	pop	r17
    3b66:	0f 91       	pop	r16
    3b68:	08 95       	ret

00003b6a <ATTINY_get_SW_state>:
    3b6a:	1f 93       	push	r17
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	18 2f       	mov	r17, r24
    3b72:	80 91 f1 03 	lds	r24, 0x03F1
    3b76:	88 23       	and	r24, r24
    3b78:	41 f0       	breq	.+16     	; 0x3b8a <ATTINY_get_SW_state+0x20>
    3b7a:	80 91 fb 03 	lds	r24, 0x03FB
    3b7e:	88 23       	and	r24, r24
    3b80:	99 f0       	breq	.+38     	; 0x3ba8 <ATTINY_get_SW_state+0x3e>
    3b82:	10 92 f1 03 	sts	0x03F1, r1
    3b86:	10 92 fb 03 	sts	0x03FB, r1
    3b8a:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <ATTINY_get_sensors>
    3b8e:	80 93 f0 03 	sts	0x03F0, r24
    3b92:	85 ef       	ldi	r24, 0xF5	; 245
    3b94:	93 e0       	ldi	r25, 0x03	; 3
    3b96:	61 e0       	ldi	r22, 0x01	; 1
    3b98:	40 e0       	ldi	r20, 0x00	; 0
    3b9a:	22 e3       	ldi	r18, 0x32	; 50
    3b9c:	30 e0       	ldi	r19, 0x00	; 0
    3b9e:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <TMRSRVC_new>
    3ba2:	81 e0       	ldi	r24, 0x01	; 1
    3ba4:	80 93 f1 03 	sts	0x03F1, r24
    3ba8:	90 91 f0 03 	lds	r25, 0x03F0
    3bac:	a1 2f       	mov	r26, r17
    3bae:	b0 e0       	ldi	r27, 0x00	; 0
    3bb0:	ed 01       	movw	r28, r26
    3bb2:	c8 56       	subi	r28, 0x68	; 104
    3bb4:	dc 4f       	sbci	r29, 0xFC	; 252
    3bb6:	88 81       	ld	r24, Y
    3bb8:	88 23       	and	r24, r24
    3bba:	69 f0       	breq	.+26     	; 0x3bd6 <ATTINY_get_SW_state+0x6c>
    3bbc:	fd 01       	movw	r30, r26
    3bbe:	e5 56       	subi	r30, 0x65	; 101
    3bc0:	fc 4f       	sbci	r31, 0xFC	; 252
    3bc2:	80 81       	ld	r24, Z
    3bc4:	98 23       	and	r25, r24
    3bc6:	c1 f0       	breq	.+48     	; 0x3bf8 <ATTINY_get_SW_state+0x8e>
    3bc8:	fd 01       	movw	r30, r26
    3bca:	ee 50       	subi	r30, 0x0E	; 14
    3bcc:	fc 4f       	sbci	r31, 0xFC	; 252
    3bce:	81 e0       	ldi	r24, 0x01	; 1
    3bd0:	80 83       	st	Z, r24
    3bd2:	18 82       	st	Y, r1
    3bd4:	11 c0       	rjmp	.+34     	; 0x3bf8 <ATTINY_get_SW_state+0x8e>
    3bd6:	fd 01       	movw	r30, r26
    3bd8:	ee 50       	subi	r30, 0x0E	; 14
    3bda:	fc 4f       	sbci	r31, 0xFC	; 252
    3bdc:	80 81       	ld	r24, Z
    3bde:	81 11       	cpse	r24, r1
    3be0:	10 82       	st	Z, r1
    3be2:	fd 01       	movw	r30, r26
    3be4:	e5 56       	subi	r30, 0x65	; 101
    3be6:	fc 4f       	sbci	r31, 0xFC	; 252
    3be8:	80 81       	ld	r24, Z
    3bea:	98 23       	and	r25, r24
    3bec:	29 f4       	brne	.+10     	; 0x3bf8 <ATTINY_get_SW_state+0x8e>
    3bee:	fd 01       	movw	r30, r26
    3bf0:	e8 56       	subi	r30, 0x68	; 104
    3bf2:	fc 4f       	sbci	r31, 0xFC	; 252
    3bf4:	81 e0       	ldi	r24, 0x01	; 1
    3bf6:	80 83       	st	Z, r24
    3bf8:	ae 50       	subi	r26, 0x0E	; 14
    3bfa:	bc 4f       	sbci	r27, 0xFC	; 252
    3bfc:	8c 91       	ld	r24, X
    3bfe:	df 91       	pop	r29
    3c00:	cf 91       	pop	r28
    3c02:	1f 91       	pop	r17
    3c04:	08 95       	ret

00003c06 <ATTINY_open>:
    3c06:	82 e0       	ldi	r24, 0x02	; 2
    3c08:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    3c0c:	88 23       	and	r24, r24
    3c0e:	19 f4       	brne	.+6      	; 0x3c16 <ATTINY_open+0x10>
    3c10:	90 e0       	ldi	r25, 0x00	; 0
    3c12:	82 e0       	ldi	r24, 0x02	; 2
    3c14:	08 95       	ret
    3c16:	10 92 0e 07 	sts	0x070E, r1
    3c1a:	10 92 0d 07 	sts	0x070D, r1
    3c1e:	10 92 10 07 	sts	0x0710, r1
    3c22:	10 92 0f 07 	sts	0x070F, r1
    3c26:	10 92 12 07 	sts	0x0712, r1
    3c2a:	10 92 11 07 	sts	0x0711, r1
    3c2e:	10 92 14 07 	sts	0x0714, r1
    3c32:	10 92 13 07 	sts	0x0713, r1
    3c36:	10 92 16 07 	sts	0x0716, r1
    3c3a:	10 92 15 07 	sts	0x0715, r1
    3c3e:	80 e9       	ldi	r24, 0x90	; 144
    3c40:	91 e0       	ldi	r25, 0x01	; 1
    3c42:	90 93 fa 06 	sts	0x06FA, r25
    3c46:	80 93 f9 06 	sts	0x06F9, r24
    3c4a:	90 93 fc 06 	sts	0x06FC, r25
    3c4e:	80 93 fb 06 	sts	0x06FB, r24
    3c52:	90 93 fe 06 	sts	0x06FE, r25
    3c56:	80 93 fd 06 	sts	0x06FD, r24
    3c5a:	90 93 00 07 	sts	0x0700, r25
    3c5e:	80 93 ff 06 	sts	0x06FF, r24
    3c62:	90 93 02 07 	sts	0x0702, r25
    3c66:	80 93 01 07 	sts	0x0701, r24
    3c6a:	84 e3       	ldi	r24, 0x34	; 52
    3c6c:	98 e0       	ldi	r25, 0x08	; 8
    3c6e:	90 93 04 07 	sts	0x0704, r25
    3c72:	80 93 03 07 	sts	0x0703, r24
    3c76:	90 93 06 07 	sts	0x0706, r25
    3c7a:	80 93 05 07 	sts	0x0705, r24
    3c7e:	90 93 08 07 	sts	0x0708, r25
    3c82:	80 93 07 07 	sts	0x0707, r24
    3c86:	90 93 0a 07 	sts	0x070A, r25
    3c8a:	80 93 09 07 	sts	0x0709, r24
    3c8e:	90 93 0c 07 	sts	0x070C, r25
    3c92:	80 93 0b 07 	sts	0x070B, r24
    3c96:	81 e0       	ldi	r24, 0x01	; 1
    3c98:	61 e0       	ldi	r22, 0x01	; 1
    3c9a:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    3c9e:	91 e0       	ldi	r25, 0x01	; 1
    3ca0:	81 e0       	ldi	r24, 0x01	; 1
    3ca2:	08 95       	ret

00003ca4 <TMRSRVC_delay>:
    3ca4:	df 93       	push	r29
    3ca6:	cf 93       	push	r28
    3ca8:	cd b7       	in	r28, 0x3d	; 61
    3caa:	de b7       	in	r29, 0x3e	; 62
    3cac:	29 97       	sbiw	r28, 0x09	; 9
    3cae:	0f b6       	in	r0, 0x3f	; 63
    3cb0:	f8 94       	cli
    3cb2:	de bf       	out	0x3e, r29	; 62
    3cb4:	0f be       	out	0x3f, r0	; 63
    3cb6:	cd bf       	out	0x3d, r28	; 61
    3cb8:	9c 01       	movw	r18, r24
    3cba:	ce 01       	movw	r24, r28
    3cbc:	01 96       	adiw	r24, 0x01	; 1
    3cbe:	61 e0       	ldi	r22, 0x01	; 1
    3cc0:	40 e0       	ldi	r20, 0x00	; 0
    3cc2:	0e 94 73 1e 	call	0x3ce6	; 0x3ce6 <TMRSRVC_new>
    3cc6:	98 2f       	mov	r25, r24
    3cc8:	88 23       	and	r24, r24
    3cca:	19 f4       	brne	.+6      	; 0x3cd2 <TMRSRVC_delay+0x2e>
    3ccc:	8f 81       	ldd	r24, Y+7	; 0x07
    3cce:	88 23       	and	r24, r24
    3cd0:	e9 f3       	breq	.-6      	; 0x3ccc <TMRSRVC_delay+0x28>
    3cd2:	89 2f       	mov	r24, r25
    3cd4:	29 96       	adiw	r28, 0x09	; 9
    3cd6:	0f b6       	in	r0, 0x3f	; 63
    3cd8:	f8 94       	cli
    3cda:	de bf       	out	0x3e, r29	; 62
    3cdc:	0f be       	out	0x3f, r0	; 63
    3cde:	cd bf       	out	0x3d, r28	; 61
    3ce0:	cf 91       	pop	r28
    3ce2:	df 91       	pop	r29
    3ce4:	08 95       	ret

00003ce6 <TMRSRVC_new>:
    3ce6:	ef 92       	push	r14
    3ce8:	ff 92       	push	r15
    3cea:	0f 93       	push	r16
    3cec:	1f 93       	push	r17
    3cee:	cf 93       	push	r28
    3cf0:	df 93       	push	r29
    3cf2:	ec 01       	movw	r28, r24
    3cf4:	f6 2e       	mov	r15, r22
    3cf6:	e4 2e       	mov	r14, r20
    3cf8:	89 01       	movw	r16, r18
    3cfa:	88 e0       	ldi	r24, 0x08	; 8
    3cfc:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    3d00:	81 30       	cpi	r24, 0x01	; 1
    3d02:	11 f0       	breq	.+4      	; 0x3d08 <TMRSRVC_new+0x22>
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	26 c0       	rjmp	.+76     	; 0x3d54 <TMRSRVC_new+0x6e>
    3d08:	84 e0       	ldi	r24, 0x04	; 4
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	0e 94 0a 32 	call	0x6414	; 0x6414 <malloc>
    3d10:	fc 01       	movw	r30, r24
    3d12:	00 97       	sbiw	r24, 0x00	; 0
    3d14:	11 f4       	brne	.+4      	; 0x3d1a <TMRSRVC_new+0x34>
    3d16:	82 e0       	ldi	r24, 0x02	; 2
    3d18:	1d c0       	rjmp	.+58     	; 0x3d54 <TMRSRVC_new+0x6e>
    3d1a:	f9 82       	std	Y+1, r15	; 0x01
    3d1c:	f0 fc       	sbrc	r15, 0
    3d1e:	1e 82       	std	Y+6, r1	; 0x06
    3d20:	81 e0       	ldi	r24, 0x01	; 1
    3d22:	e8 16       	cp	r14, r24
    3d24:	19 f4       	brne	.+6      	; 0x3d2c <TMRSRVC_new+0x46>
    3d26:	89 81       	ldd	r24, Y+1	; 0x01
    3d28:	84 60       	ori	r24, 0x04	; 4
    3d2a:	89 83       	std	Y+1, r24	; 0x01
    3d2c:	89 81       	ldd	r24, Y+1	; 0x01
    3d2e:	88 60       	ori	r24, 0x08	; 8
    3d30:	89 83       	std	Y+1, r24	; 0x01
    3d32:	1b 83       	std	Y+3, r17	; 0x03
    3d34:	0a 83       	std	Y+2, r16	; 0x02
    3d36:	1d 83       	std	Y+5, r17	; 0x05
    3d38:	0c 83       	std	Y+4, r16	; 0x04
    3d3a:	d1 83       	std	Z+1, r29	; 0x01
    3d3c:	c0 83       	st	Z, r28
    3d3e:	13 82       	std	Z+3, r1	; 0x03
    3d40:	12 82       	std	Z+2, r1	; 0x02
    3d42:	81 e0       	ldi	r24, 0x01	; 1
    3d44:	80 93 5e 04 	sts	0x045E, r24
    3d48:	cf 01       	movw	r24, r30
    3d4a:	0e 94 23 25 	call	0x4a46	; 0x4a46 <TMRSRVC_insert>
    3d4e:	10 92 5e 04 	sts	0x045E, r1
    3d52:	80 e0       	ldi	r24, 0x00	; 0
    3d54:	df 91       	pop	r29
    3d56:	cf 91       	pop	r28
    3d58:	1f 91       	pop	r17
    3d5a:	0f 91       	pop	r16
    3d5c:	ff 90       	pop	r15
    3d5e:	ef 90       	pop	r14
    3d60:	08 95       	ret

00003d62 <I2C_MSTR_get>:
    3d62:	fc 01       	movw	r30, r24
    3d64:	80 91 1a 07 	lds	r24, 0x071A
    3d68:	81 30       	cpi	r24, 0x01	; 1
    3d6a:	11 f0       	breq	.+4      	; 0x3d70 <I2C_MSTR_get+0xe>
    3d6c:	85 e0       	ldi	r24, 0x05	; 5
    3d6e:	08 95       	ret
    3d70:	80 91 1b 07 	lds	r24, 0x071B
    3d74:	81 30       	cpi	r24, 0x01	; 1
    3d76:	11 f0       	breq	.+4      	; 0x3d7c <I2C_MSTR_get+0x1a>
    3d78:	8a e0       	ldi	r24, 0x0A	; 10
    3d7a:	08 95       	ret
    3d7c:	61 30       	cpi	r22, 0x01	; 1
    3d7e:	11 f4       	brne	.+4      	; 0x3d84 <I2C_MSTR_get+0x22>
    3d80:	84 ec       	ldi	r24, 0xC4	; 196
    3d82:	01 c0       	rjmp	.+2      	; 0x3d86 <I2C_MSTR_get+0x24>
    3d84:	84 e8       	ldi	r24, 0x84	; 132
    3d86:	80 93 bc 00 	sts	0x00BC, r24
    3d8a:	80 91 bc 00 	lds	r24, 0x00BC
    3d8e:	87 ff       	sbrs	r24, 7
    3d90:	fc cf       	rjmp	.-8      	; 0x3d8a <I2C_MSTR_get+0x28>
    3d92:	61 30       	cpi	r22, 0x01	; 1
    3d94:	31 f4       	brne	.+12     	; 0x3da2 <I2C_MSTR_get+0x40>
    3d96:	80 91 b9 00 	lds	r24, 0x00B9
    3d9a:	88 7f       	andi	r24, 0xF8	; 248
    3d9c:	80 35       	cpi	r24, 0x50	; 80
    3d9e:	59 f4       	brne	.+22     	; 0x3db6 <I2C_MSTR_get+0x54>
    3da0:	05 c0       	rjmp	.+10     	; 0x3dac <I2C_MSTR_get+0x4a>
    3da2:	80 91 b9 00 	lds	r24, 0x00B9
    3da6:	88 7f       	andi	r24, 0xF8	; 248
    3da8:	88 35       	cpi	r24, 0x58	; 88
    3daa:	29 f4       	brne	.+10     	; 0x3db6 <I2C_MSTR_get+0x54>
    3dac:	80 91 bb 00 	lds	r24, 0x00BB
    3db0:	80 83       	st	Z, r24
    3db2:	80 e0       	ldi	r24, 0x00	; 0
    3db4:	08 95       	ret
    3db6:	82 e0       	ldi	r24, 0x02	; 2
    3db8:	08 95       	ret

00003dba <I2C_MSTR_send>:
    3dba:	98 2f       	mov	r25, r24
    3dbc:	80 91 1a 07 	lds	r24, 0x071A
    3dc0:	81 30       	cpi	r24, 0x01	; 1
    3dc2:	11 f0       	breq	.+4      	; 0x3dc8 <I2C_MSTR_send+0xe>
    3dc4:	85 e0       	ldi	r24, 0x05	; 5
    3dc6:	08 95       	ret
    3dc8:	80 91 1b 07 	lds	r24, 0x071B
    3dcc:	81 30       	cpi	r24, 0x01	; 1
    3dce:	11 f0       	breq	.+4      	; 0x3dd4 <I2C_MSTR_send+0x1a>
    3dd0:	8a e0       	ldi	r24, 0x0A	; 10
    3dd2:	08 95       	ret
    3dd4:	90 93 bb 00 	sts	0x00BB, r25
    3dd8:	84 e8       	ldi	r24, 0x84	; 132
    3dda:	80 93 bc 00 	sts	0x00BC, r24
    3dde:	80 91 bc 00 	lds	r24, 0x00BC
    3de2:	87 ff       	sbrs	r24, 7
    3de4:	fc cf       	rjmp	.-8      	; 0x3dde <I2C_MSTR_send+0x24>
    3de6:	80 91 b9 00 	lds	r24, 0x00B9
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	88 7f       	andi	r24, 0xF8	; 248
    3dee:	90 70       	andi	r25, 0x00	; 0
    3df0:	88 32       	cpi	r24, 0x28	; 40
    3df2:	91 05       	cpc	r25, r1
    3df4:	21 f0       	breq	.+8      	; 0x3dfe <I2C_MSTR_send+0x44>
    3df6:	c0 97       	sbiw	r24, 0x30	; 48
    3df8:	21 f4       	brne	.+8      	; 0x3e02 <I2C_MSTR_send+0x48>
    3dfa:	83 e0       	ldi	r24, 0x03	; 3
    3dfc:	08 95       	ret
    3dfe:	80 e0       	ldi	r24, 0x00	; 0
    3e00:	08 95       	ret
    3e02:	8c e0       	ldi	r24, 0x0C	; 12
    3e04:	08 95       	ret

00003e06 <I2C_MSTR_start>:
    3e06:	98 2f       	mov	r25, r24
    3e08:	20 91 1a 07 	lds	r18, 0x071A
    3e0c:	21 30       	cpi	r18, 0x01	; 1
    3e0e:	11 f0       	breq	.+4      	; 0x3e14 <I2C_MSTR_start+0xe>
    3e10:	85 e0       	ldi	r24, 0x05	; 5
    3e12:	08 95       	ret
    3e14:	80 91 1c 07 	lds	r24, 0x071C
    3e18:	81 30       	cpi	r24, 0x01	; 1
    3e1a:	11 f4       	brne	.+4      	; 0x3e20 <I2C_MSTR_start+0x1a>
    3e1c:	89 e0       	ldi	r24, 0x09	; 9
    3e1e:	08 95       	ret
    3e20:	20 93 1b 07 	sts	0x071B, r18
    3e24:	84 ea       	ldi	r24, 0xA4	; 164
    3e26:	80 93 bc 00 	sts	0x00BC, r24
    3e2a:	80 91 bc 00 	lds	r24, 0x00BC
    3e2e:	87 ff       	sbrs	r24, 7
    3e30:	fc cf       	rjmp	.-8      	; 0x3e2a <I2C_MSTR_start+0x24>
    3e32:	80 91 b9 00 	lds	r24, 0x00B9
    3e36:	88 7f       	andi	r24, 0xF8	; 248
    3e38:	88 30       	cpi	r24, 0x08	; 8
    3e3a:	39 f0       	breq	.+14     	; 0x3e4a <I2C_MSTR_start+0x44>
    3e3c:	80 91 b9 00 	lds	r24, 0x00B9
    3e40:	88 7f       	andi	r24, 0xF8	; 248
    3e42:	80 31       	cpi	r24, 0x10	; 16
    3e44:	11 f0       	breq	.+4      	; 0x3e4a <I2C_MSTR_start+0x44>
    3e46:	81 e0       	ldi	r24, 0x01	; 1
    3e48:	08 95       	ret
    3e4a:	61 30       	cpi	r22, 0x01	; 1
    3e4c:	19 f4       	brne	.+6      	; 0x3e54 <I2C_MSTR_start+0x4e>
    3e4e:	99 0f       	add	r25, r25
    3e50:	91 60       	ori	r25, 0x01	; 1
    3e52:	03 c0       	rjmp	.+6      	; 0x3e5a <I2C_MSTR_start+0x54>
    3e54:	66 23       	and	r22, r22
    3e56:	19 f4       	brne	.+6      	; 0x3e5e <I2C_MSTR_start+0x58>
    3e58:	99 0f       	add	r25, r25
    3e5a:	90 93 bb 00 	sts	0x00BB, r25
    3e5e:	84 e8       	ldi	r24, 0x84	; 132
    3e60:	80 93 bc 00 	sts	0x00BC, r24
    3e64:	80 91 bc 00 	lds	r24, 0x00BC
    3e68:	87 ff       	sbrs	r24, 7
    3e6a:	fc cf       	rjmp	.-8      	; 0x3e64 <I2C_MSTR_start+0x5e>
    3e6c:	61 30       	cpi	r22, 0x01	; 1
    3e6e:	31 f4       	brne	.+12     	; 0x3e7c <I2C_MSTR_start+0x76>
    3e70:	80 91 b9 00 	lds	r24, 0x00B9
    3e74:	88 7f       	andi	r24, 0xF8	; 248
    3e76:	80 34       	cpi	r24, 0x40	; 64
    3e78:	41 f4       	brne	.+16     	; 0x3e8a <I2C_MSTR_start+0x84>
    3e7a:	09 c0       	rjmp	.+18     	; 0x3e8e <I2C_MSTR_start+0x88>
    3e7c:	66 23       	and	r22, r22
    3e7e:	39 f4       	brne	.+14     	; 0x3e8e <I2C_MSTR_start+0x88>
    3e80:	80 91 b9 00 	lds	r24, 0x00B9
    3e84:	88 7f       	andi	r24, 0xF8	; 248
    3e86:	88 31       	cpi	r24, 0x18	; 24
    3e88:	11 f0       	breq	.+4      	; 0x3e8e <I2C_MSTR_start+0x88>
    3e8a:	82 e0       	ldi	r24, 0x02	; 2
    3e8c:	08 95       	ret
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	08 95       	ret

00003e92 <I2C_MSTR_stop>:
    3e92:	80 91 1b 07 	lds	r24, 0x071B
    3e96:	81 30       	cpi	r24, 0x01	; 1
    3e98:	11 f0       	breq	.+4      	; 0x3e9e <I2C_MSTR_stop+0xc>
    3e9a:	8a e0       	ldi	r24, 0x0A	; 10
    3e9c:	08 95       	ret
    3e9e:	80 91 1d 07 	lds	r24, 0x071D
    3ea2:	81 30       	cpi	r24, 0x01	; 1
    3ea4:	29 f4       	brne	.+10     	; 0x3eb0 <I2C_MSTR_stop+0x1e>
    3ea6:	85 e9       	ldi	r24, 0x95	; 149
    3ea8:	80 93 bc 00 	sts	0x00BC, r24
    3eac:	80 e0       	ldi	r24, 0x00	; 0
    3eae:	08 95       	ret
    3eb0:	84 e9       	ldi	r24, 0x94	; 148
    3eb2:	80 93 bc 00 	sts	0x00BC, r24
    3eb6:	80 e0       	ldi	r24, 0x00	; 0
    3eb8:	08 95       	ret

00003eba <I2C_open>:
    3eba:	82 e1       	ldi	r24, 0x12	; 18
    3ebc:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    3ec0:	88 23       	and	r24, r24
    3ec2:	b1 f4       	brne	.+44     	; 0x3ef0 <I2C_open+0x36>
    3ec4:	10 92 1a 07 	sts	0x071A, r1
    3ec8:	10 92 1b 07 	sts	0x071B, r1
    3ecc:	10 92 1c 07 	sts	0x071C, r1
    3ed0:	10 92 1d 07 	sts	0x071D, r1
    3ed4:	10 92 1e 07 	sts	0x071E, r1
    3ed8:	0e 94 bf 25 	call	0x4b7e	; 0x4b7e <__I2C_init>
    3edc:	87 e1       	ldi	r24, 0x17	; 23
    3ede:	60 e0       	ldi	r22, 0x00	; 0
    3ee0:	0e 94 7b 1f 	call	0x3ef6	; 0x3ef6 <I2C_set_BRG>
    3ee4:	0e 94 b5 25 	call	0x4b6a	; 0x4b6a <I2C_enable>
    3ee8:	82 e1       	ldi	r24, 0x12	; 18
    3eea:	61 e0       	ldi	r22, 0x01	; 1
    3eec:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    3ef0:	82 e1       	ldi	r24, 0x12	; 18
    3ef2:	90 e0       	ldi	r25, 0x00	; 0
    3ef4:	08 95       	ret

00003ef6 <I2C_set_BRG>:
    3ef6:	63 70       	andi	r22, 0x03	; 3
    3ef8:	60 93 b9 00 	sts	0x00B9, r22
    3efc:	80 93 b8 00 	sts	0x00B8, r24
    3f00:	81 e0       	ldi	r24, 0x01	; 1
    3f02:	80 93 1a 07 	sts	0x071A, r24
    3f06:	08 95       	ret

00003f08 <__ADC_init>:
    3f08:	8f e1       	ldi	r24, 0x1F	; 31
    3f0a:	80 93 7c 00 	sts	0x007C, r24
    3f0e:	ea e7       	ldi	r30, 0x7A	; 122
    3f10:	f0 e0       	ldi	r31, 0x00	; 0
    3f12:	87 e0       	ldi	r24, 0x07	; 7
    3f14:	80 83       	st	Z, r24
    3f16:	80 81       	ld	r24, Z
    3f18:	80 68       	ori	r24, 0x80	; 128
    3f1a:	80 83       	st	Z, r24
    3f1c:	08 95       	ret

00003f1e <CBOT_init>:
    3f1e:	0e 94 00 25 	call	0x4a00	; 0x4a00 <SYS_init>
    3f22:	0e 94 c1 22 	call	0x4582	; 0x4582 <ATMEGA_open>
    3f26:	0e 94 f1 21 	call	0x43e2	; 0x43e2 <ISR_open>
    3f2a:	0e 94 8c 25 	call	0x4b18	; 0x4b18 <TMRSRVC_open>
    3f2e:	0e 94 26 23 	call	0x464c	; 0x464c <SPI_open>
    3f32:	0e 94 03 1e 	call	0x3c06	; 0x3c06 <ATTINY_open>
    3f36:	78 94       	sei
    3f38:	08 95       	ret

00003f3a <CBOT_ISR_init>:
    3f3a:	00 00       	nop
    3f3c:	08 95       	ret

00003f3e <__vector_16>:
    3f3e:	1f 92       	push	r1
    3f40:	0f 92       	push	r0
    3f42:	0f b6       	in	r0, 0x3f	; 63
    3f44:	0f 92       	push	r0
    3f46:	11 24       	eor	r1, r1
    3f48:	2f 93       	push	r18
    3f4a:	3f 93       	push	r19
    3f4c:	4f 93       	push	r20
    3f4e:	5f 93       	push	r21
    3f50:	6f 93       	push	r22
    3f52:	7f 93       	push	r23
    3f54:	8f 93       	push	r24
    3f56:	9f 93       	push	r25
    3f58:	af 93       	push	r26
    3f5a:	bf 93       	push	r27
    3f5c:	ef 93       	push	r30
    3f5e:	ff 93       	push	r31
    3f60:	e0 91 1e 04 	lds	r30, 0x041E
    3f64:	f0 91 1f 04 	lds	r31, 0x041F
    3f68:	30 97       	sbiw	r30, 0x00	; 0
    3f6a:	09 f0       	breq	.+2      	; 0x3f6e <__vector_16+0x30>
    3f6c:	09 95       	icall
    3f6e:	ff 91       	pop	r31
    3f70:	ef 91       	pop	r30
    3f72:	bf 91       	pop	r27
    3f74:	af 91       	pop	r26
    3f76:	9f 91       	pop	r25
    3f78:	8f 91       	pop	r24
    3f7a:	7f 91       	pop	r23
    3f7c:	6f 91       	pop	r22
    3f7e:	5f 91       	pop	r21
    3f80:	4f 91       	pop	r20
    3f82:	3f 91       	pop	r19
    3f84:	2f 91       	pop	r18
    3f86:	0f 90       	pop	r0
    3f88:	0f be       	out	0x3f, r0	; 63
    3f8a:	0f 90       	pop	r0
    3f8c:	1f 90       	pop	r1
    3f8e:	18 95       	reti

00003f90 <__vector_17>:
    3f90:	1f 92       	push	r1
    3f92:	0f 92       	push	r0
    3f94:	0f b6       	in	r0, 0x3f	; 63
    3f96:	0f 92       	push	r0
    3f98:	11 24       	eor	r1, r1
    3f9a:	2f 93       	push	r18
    3f9c:	3f 93       	push	r19
    3f9e:	4f 93       	push	r20
    3fa0:	5f 93       	push	r21
    3fa2:	6f 93       	push	r22
    3fa4:	7f 93       	push	r23
    3fa6:	8f 93       	push	r24
    3fa8:	9f 93       	push	r25
    3faa:	af 93       	push	r26
    3fac:	bf 93       	push	r27
    3fae:	ef 93       	push	r30
    3fb0:	ff 93       	push	r31
    3fb2:	e0 91 20 04 	lds	r30, 0x0420
    3fb6:	f0 91 21 04 	lds	r31, 0x0421
    3fba:	30 97       	sbiw	r30, 0x00	; 0
    3fbc:	09 f0       	breq	.+2      	; 0x3fc0 <__vector_17+0x30>
    3fbe:	09 95       	icall
    3fc0:	ff 91       	pop	r31
    3fc2:	ef 91       	pop	r30
    3fc4:	bf 91       	pop	r27
    3fc6:	af 91       	pop	r26
    3fc8:	9f 91       	pop	r25
    3fca:	8f 91       	pop	r24
    3fcc:	7f 91       	pop	r23
    3fce:	6f 91       	pop	r22
    3fd0:	5f 91       	pop	r21
    3fd2:	4f 91       	pop	r20
    3fd4:	3f 91       	pop	r19
    3fd6:	2f 91       	pop	r18
    3fd8:	0f 90       	pop	r0
    3fda:	0f be       	out	0x3f, r0	; 63
    3fdc:	0f 90       	pop	r0
    3fde:	1f 90       	pop	r1
    3fe0:	18 95       	reti

00003fe2 <__vector_18>:
    3fe2:	1f 92       	push	r1
    3fe4:	0f 92       	push	r0
    3fe6:	0f b6       	in	r0, 0x3f	; 63
    3fe8:	0f 92       	push	r0
    3fea:	11 24       	eor	r1, r1
    3fec:	2f 93       	push	r18
    3fee:	3f 93       	push	r19
    3ff0:	4f 93       	push	r20
    3ff2:	5f 93       	push	r21
    3ff4:	6f 93       	push	r22
    3ff6:	7f 93       	push	r23
    3ff8:	8f 93       	push	r24
    3ffa:	9f 93       	push	r25
    3ffc:	af 93       	push	r26
    3ffe:	bf 93       	push	r27
    4000:	ef 93       	push	r30
    4002:	ff 93       	push	r31
    4004:	e0 91 22 04 	lds	r30, 0x0422
    4008:	f0 91 23 04 	lds	r31, 0x0423
    400c:	30 97       	sbiw	r30, 0x00	; 0
    400e:	09 f0       	breq	.+2      	; 0x4012 <__vector_18+0x30>
    4010:	09 95       	icall
    4012:	ff 91       	pop	r31
    4014:	ef 91       	pop	r30
    4016:	bf 91       	pop	r27
    4018:	af 91       	pop	r26
    401a:	9f 91       	pop	r25
    401c:	8f 91       	pop	r24
    401e:	7f 91       	pop	r23
    4020:	6f 91       	pop	r22
    4022:	5f 91       	pop	r21
    4024:	4f 91       	pop	r20
    4026:	3f 91       	pop	r19
    4028:	2f 91       	pop	r18
    402a:	0f 90       	pop	r0
    402c:	0f be       	out	0x3f, r0	; 63
    402e:	0f 90       	pop	r0
    4030:	1f 90       	pop	r1
    4032:	18 95       	reti

00004034 <__vector_9>:
    4034:	1f 92       	push	r1
    4036:	0f 92       	push	r0
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	0f 92       	push	r0
    403c:	11 24       	eor	r1, r1
    403e:	2f 93       	push	r18
    4040:	3f 93       	push	r19
    4042:	4f 93       	push	r20
    4044:	5f 93       	push	r21
    4046:	6f 93       	push	r22
    4048:	7f 93       	push	r23
    404a:	8f 93       	push	r24
    404c:	9f 93       	push	r25
    404e:	af 93       	push	r26
    4050:	bf 93       	push	r27
    4052:	ef 93       	push	r30
    4054:	ff 93       	push	r31
    4056:	e0 91 10 04 	lds	r30, 0x0410
    405a:	f0 91 11 04 	lds	r31, 0x0411
    405e:	30 97       	sbiw	r30, 0x00	; 0
    4060:	09 f0       	breq	.+2      	; 0x4064 <__vector_9+0x30>
    4062:	09 95       	icall
    4064:	ff 91       	pop	r31
    4066:	ef 91       	pop	r30
    4068:	bf 91       	pop	r27
    406a:	af 91       	pop	r26
    406c:	9f 91       	pop	r25
    406e:	8f 91       	pop	r24
    4070:	7f 91       	pop	r23
    4072:	6f 91       	pop	r22
    4074:	5f 91       	pop	r21
    4076:	4f 91       	pop	r20
    4078:	3f 91       	pop	r19
    407a:	2f 91       	pop	r18
    407c:	0f 90       	pop	r0
    407e:	0f be       	out	0x3f, r0	; 63
    4080:	0f 90       	pop	r0
    4082:	1f 90       	pop	r1
    4084:	18 95       	reti

00004086 <__vector_10>:
    4086:	1f 92       	push	r1
    4088:	0f 92       	push	r0
    408a:	0f b6       	in	r0, 0x3f	; 63
    408c:	0f 92       	push	r0
    408e:	11 24       	eor	r1, r1
    4090:	2f 93       	push	r18
    4092:	3f 93       	push	r19
    4094:	4f 93       	push	r20
    4096:	5f 93       	push	r21
    4098:	6f 93       	push	r22
    409a:	7f 93       	push	r23
    409c:	8f 93       	push	r24
    409e:	9f 93       	push	r25
    40a0:	af 93       	push	r26
    40a2:	bf 93       	push	r27
    40a4:	ef 93       	push	r30
    40a6:	ff 93       	push	r31
    40a8:	e0 91 12 04 	lds	r30, 0x0412
    40ac:	f0 91 13 04 	lds	r31, 0x0413
    40b0:	30 97       	sbiw	r30, 0x00	; 0
    40b2:	09 f0       	breq	.+2      	; 0x40b6 <__vector_10+0x30>
    40b4:	09 95       	icall
    40b6:	ff 91       	pop	r31
    40b8:	ef 91       	pop	r30
    40ba:	bf 91       	pop	r27
    40bc:	af 91       	pop	r26
    40be:	9f 91       	pop	r25
    40c0:	8f 91       	pop	r24
    40c2:	7f 91       	pop	r23
    40c4:	6f 91       	pop	r22
    40c6:	5f 91       	pop	r21
    40c8:	4f 91       	pop	r20
    40ca:	3f 91       	pop	r19
    40cc:	2f 91       	pop	r18
    40ce:	0f 90       	pop	r0
    40d0:	0f be       	out	0x3f, r0	; 63
    40d2:	0f 90       	pop	r0
    40d4:	1f 90       	pop	r1
    40d6:	18 95       	reti

000040d8 <__vector_11>:
    40d8:	1f 92       	push	r1
    40da:	0f 92       	push	r0
    40dc:	0f b6       	in	r0, 0x3f	; 63
    40de:	0f 92       	push	r0
    40e0:	11 24       	eor	r1, r1
    40e2:	2f 93       	push	r18
    40e4:	3f 93       	push	r19
    40e6:	4f 93       	push	r20
    40e8:	5f 93       	push	r21
    40ea:	6f 93       	push	r22
    40ec:	7f 93       	push	r23
    40ee:	8f 93       	push	r24
    40f0:	9f 93       	push	r25
    40f2:	af 93       	push	r26
    40f4:	bf 93       	push	r27
    40f6:	ef 93       	push	r30
    40f8:	ff 93       	push	r31
    40fa:	e0 91 14 04 	lds	r30, 0x0414
    40fe:	f0 91 15 04 	lds	r31, 0x0415
    4102:	30 97       	sbiw	r30, 0x00	; 0
    4104:	09 f0       	breq	.+2      	; 0x4108 <__vector_11+0x30>
    4106:	09 95       	icall
    4108:	ff 91       	pop	r31
    410a:	ef 91       	pop	r30
    410c:	bf 91       	pop	r27
    410e:	af 91       	pop	r26
    4110:	9f 91       	pop	r25
    4112:	8f 91       	pop	r24
    4114:	7f 91       	pop	r23
    4116:	6f 91       	pop	r22
    4118:	5f 91       	pop	r21
    411a:	4f 91       	pop	r20
    411c:	3f 91       	pop	r19
    411e:	2f 91       	pop	r18
    4120:	0f 90       	pop	r0
    4122:	0f be       	out	0x3f, r0	; 63
    4124:	0f 90       	pop	r0
    4126:	1f 90       	pop	r1
    4128:	18 95       	reti

0000412a <__vector_13>:
    412a:	1f 92       	push	r1
    412c:	0f 92       	push	r0
    412e:	0f b6       	in	r0, 0x3f	; 63
    4130:	0f 92       	push	r0
    4132:	11 24       	eor	r1, r1
    4134:	2f 93       	push	r18
    4136:	3f 93       	push	r19
    4138:	4f 93       	push	r20
    413a:	5f 93       	push	r21
    413c:	6f 93       	push	r22
    413e:	7f 93       	push	r23
    4140:	8f 93       	push	r24
    4142:	9f 93       	push	r25
    4144:	af 93       	push	r26
    4146:	bf 93       	push	r27
    4148:	ef 93       	push	r30
    414a:	ff 93       	push	r31
    414c:	e0 91 18 04 	lds	r30, 0x0418
    4150:	f0 91 19 04 	lds	r31, 0x0419
    4154:	30 97       	sbiw	r30, 0x00	; 0
    4156:	09 f0       	breq	.+2      	; 0x415a <__vector_13+0x30>
    4158:	09 95       	icall
    415a:	ff 91       	pop	r31
    415c:	ef 91       	pop	r30
    415e:	bf 91       	pop	r27
    4160:	af 91       	pop	r26
    4162:	9f 91       	pop	r25
    4164:	8f 91       	pop	r24
    4166:	7f 91       	pop	r23
    4168:	6f 91       	pop	r22
    416a:	5f 91       	pop	r21
    416c:	4f 91       	pop	r20
    416e:	3f 91       	pop	r19
    4170:	2f 91       	pop	r18
    4172:	0f 90       	pop	r0
    4174:	0f be       	out	0x3f, r0	; 63
    4176:	0f 90       	pop	r0
    4178:	1f 90       	pop	r1
    417a:	18 95       	reti

0000417c <__vector_14>:
    417c:	1f 92       	push	r1
    417e:	0f 92       	push	r0
    4180:	0f b6       	in	r0, 0x3f	; 63
    4182:	0f 92       	push	r0
    4184:	11 24       	eor	r1, r1
    4186:	2f 93       	push	r18
    4188:	3f 93       	push	r19
    418a:	4f 93       	push	r20
    418c:	5f 93       	push	r21
    418e:	6f 93       	push	r22
    4190:	7f 93       	push	r23
    4192:	8f 93       	push	r24
    4194:	9f 93       	push	r25
    4196:	af 93       	push	r26
    4198:	bf 93       	push	r27
    419a:	ef 93       	push	r30
    419c:	ff 93       	push	r31
    419e:	e0 91 1a 04 	lds	r30, 0x041A
    41a2:	f0 91 1b 04 	lds	r31, 0x041B
    41a6:	30 97       	sbiw	r30, 0x00	; 0
    41a8:	09 f0       	breq	.+2      	; 0x41ac <__vector_14+0x30>
    41aa:	09 95       	icall
    41ac:	ff 91       	pop	r31
    41ae:	ef 91       	pop	r30
    41b0:	bf 91       	pop	r27
    41b2:	af 91       	pop	r26
    41b4:	9f 91       	pop	r25
    41b6:	8f 91       	pop	r24
    41b8:	7f 91       	pop	r23
    41ba:	6f 91       	pop	r22
    41bc:	5f 91       	pop	r21
    41be:	4f 91       	pop	r20
    41c0:	3f 91       	pop	r19
    41c2:	2f 91       	pop	r18
    41c4:	0f 90       	pop	r0
    41c6:	0f be       	out	0x3f, r0	; 63
    41c8:	0f 90       	pop	r0
    41ca:	1f 90       	pop	r1
    41cc:	18 95       	reti

000041ce <__vector_12>:
    41ce:	1f 92       	push	r1
    41d0:	0f 92       	push	r0
    41d2:	0f b6       	in	r0, 0x3f	; 63
    41d4:	0f 92       	push	r0
    41d6:	11 24       	eor	r1, r1
    41d8:	2f 93       	push	r18
    41da:	3f 93       	push	r19
    41dc:	4f 93       	push	r20
    41de:	5f 93       	push	r21
    41e0:	6f 93       	push	r22
    41e2:	7f 93       	push	r23
    41e4:	8f 93       	push	r24
    41e6:	9f 93       	push	r25
    41e8:	af 93       	push	r26
    41ea:	bf 93       	push	r27
    41ec:	ef 93       	push	r30
    41ee:	ff 93       	push	r31
    41f0:	e0 91 16 04 	lds	r30, 0x0416
    41f4:	f0 91 17 04 	lds	r31, 0x0417
    41f8:	30 97       	sbiw	r30, 0x00	; 0
    41fa:	09 f0       	breq	.+2      	; 0x41fe <__vector_12+0x30>
    41fc:	09 95       	icall
    41fe:	ff 91       	pop	r31
    4200:	ef 91       	pop	r30
    4202:	bf 91       	pop	r27
    4204:	af 91       	pop	r26
    4206:	9f 91       	pop	r25
    4208:	8f 91       	pop	r24
    420a:	7f 91       	pop	r23
    420c:	6f 91       	pop	r22
    420e:	5f 91       	pop	r21
    4210:	4f 91       	pop	r20
    4212:	3f 91       	pop	r19
    4214:	2f 91       	pop	r18
    4216:	0f 90       	pop	r0
    4218:	0f be       	out	0x3f, r0	; 63
    421a:	0f 90       	pop	r0
    421c:	1f 90       	pop	r1
    421e:	18 95       	reti

00004220 <__vector_15>:
    4220:	1f 92       	push	r1
    4222:	0f 92       	push	r0
    4224:	0f b6       	in	r0, 0x3f	; 63
    4226:	0f 92       	push	r0
    4228:	11 24       	eor	r1, r1
    422a:	2f 93       	push	r18
    422c:	3f 93       	push	r19
    422e:	4f 93       	push	r20
    4230:	5f 93       	push	r21
    4232:	6f 93       	push	r22
    4234:	7f 93       	push	r23
    4236:	8f 93       	push	r24
    4238:	9f 93       	push	r25
    423a:	af 93       	push	r26
    423c:	bf 93       	push	r27
    423e:	ef 93       	push	r30
    4240:	ff 93       	push	r31
    4242:	e0 91 1c 04 	lds	r30, 0x041C
    4246:	f0 91 1d 04 	lds	r31, 0x041D
    424a:	30 97       	sbiw	r30, 0x00	; 0
    424c:	09 f0       	breq	.+2      	; 0x4250 <__vector_15+0x30>
    424e:	09 95       	icall
    4250:	ff 91       	pop	r31
    4252:	ef 91       	pop	r30
    4254:	bf 91       	pop	r27
    4256:	af 91       	pop	r26
    4258:	9f 91       	pop	r25
    425a:	8f 91       	pop	r24
    425c:	7f 91       	pop	r23
    425e:	6f 91       	pop	r22
    4260:	5f 91       	pop	r21
    4262:	4f 91       	pop	r20
    4264:	3f 91       	pop	r19
    4266:	2f 91       	pop	r18
    4268:	0f 90       	pop	r0
    426a:	0f be       	out	0x3f, r0	; 63
    426c:	0f 90       	pop	r0
    426e:	1f 90       	pop	r1
    4270:	18 95       	reti

00004272 <__vector_4>:
    4272:	1f 92       	push	r1
    4274:	0f 92       	push	r0
    4276:	0f b6       	in	r0, 0x3f	; 63
    4278:	0f 92       	push	r0
    427a:	11 24       	eor	r1, r1
    427c:	2f 93       	push	r18
    427e:	3f 93       	push	r19
    4280:	4f 93       	push	r20
    4282:	5f 93       	push	r21
    4284:	6f 93       	push	r22
    4286:	7f 93       	push	r23
    4288:	8f 93       	push	r24
    428a:	9f 93       	push	r25
    428c:	af 93       	push	r26
    428e:	bf 93       	push	r27
    4290:	ef 93       	push	r30
    4292:	ff 93       	push	r31
    4294:	e0 91 06 04 	lds	r30, 0x0406
    4298:	f0 91 07 04 	lds	r31, 0x0407
    429c:	30 97       	sbiw	r30, 0x00	; 0
    429e:	09 f0       	breq	.+2      	; 0x42a2 <__vector_4+0x30>
    42a0:	09 95       	icall
    42a2:	ff 91       	pop	r31
    42a4:	ef 91       	pop	r30
    42a6:	bf 91       	pop	r27
    42a8:	af 91       	pop	r26
    42aa:	9f 91       	pop	r25
    42ac:	8f 91       	pop	r24
    42ae:	7f 91       	pop	r23
    42b0:	6f 91       	pop	r22
    42b2:	5f 91       	pop	r21
    42b4:	4f 91       	pop	r20
    42b6:	3f 91       	pop	r19
    42b8:	2f 91       	pop	r18
    42ba:	0f 90       	pop	r0
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	0f 90       	pop	r0
    42c0:	1f 90       	pop	r1
    42c2:	18 95       	reti

000042c4 <__vector_5>:
    42c4:	1f 92       	push	r1
    42c6:	0f 92       	push	r0
    42c8:	0f b6       	in	r0, 0x3f	; 63
    42ca:	0f 92       	push	r0
    42cc:	11 24       	eor	r1, r1
    42ce:	2f 93       	push	r18
    42d0:	3f 93       	push	r19
    42d2:	4f 93       	push	r20
    42d4:	5f 93       	push	r21
    42d6:	6f 93       	push	r22
    42d8:	7f 93       	push	r23
    42da:	8f 93       	push	r24
    42dc:	9f 93       	push	r25
    42de:	af 93       	push	r26
    42e0:	bf 93       	push	r27
    42e2:	ef 93       	push	r30
    42e4:	ff 93       	push	r31
    42e6:	e0 91 08 04 	lds	r30, 0x0408
    42ea:	f0 91 09 04 	lds	r31, 0x0409
    42ee:	30 97       	sbiw	r30, 0x00	; 0
    42f0:	09 f0       	breq	.+2      	; 0x42f4 <__vector_5+0x30>
    42f2:	09 95       	icall
    42f4:	ff 91       	pop	r31
    42f6:	ef 91       	pop	r30
    42f8:	bf 91       	pop	r27
    42fa:	af 91       	pop	r26
    42fc:	9f 91       	pop	r25
    42fe:	8f 91       	pop	r24
    4300:	7f 91       	pop	r23
    4302:	6f 91       	pop	r22
    4304:	5f 91       	pop	r21
    4306:	4f 91       	pop	r20
    4308:	3f 91       	pop	r19
    430a:	2f 91       	pop	r18
    430c:	0f 90       	pop	r0
    430e:	0f be       	out	0x3f, r0	; 63
    4310:	0f 90       	pop	r0
    4312:	1f 90       	pop	r1
    4314:	18 95       	reti

00004316 <__vector_6>:
    4316:	1f 92       	push	r1
    4318:	0f 92       	push	r0
    431a:	0f b6       	in	r0, 0x3f	; 63
    431c:	0f 92       	push	r0
    431e:	11 24       	eor	r1, r1
    4320:	2f 93       	push	r18
    4322:	3f 93       	push	r19
    4324:	4f 93       	push	r20
    4326:	5f 93       	push	r21
    4328:	6f 93       	push	r22
    432a:	7f 93       	push	r23
    432c:	8f 93       	push	r24
    432e:	9f 93       	push	r25
    4330:	af 93       	push	r26
    4332:	bf 93       	push	r27
    4334:	ef 93       	push	r30
    4336:	ff 93       	push	r31
    4338:	e0 91 0a 04 	lds	r30, 0x040A
    433c:	f0 91 0b 04 	lds	r31, 0x040B
    4340:	30 97       	sbiw	r30, 0x00	; 0
    4342:	09 f0       	breq	.+2      	; 0x4346 <__vector_6+0x30>
    4344:	09 95       	icall
    4346:	ff 91       	pop	r31
    4348:	ef 91       	pop	r30
    434a:	bf 91       	pop	r27
    434c:	af 91       	pop	r26
    434e:	9f 91       	pop	r25
    4350:	8f 91       	pop	r24
    4352:	7f 91       	pop	r23
    4354:	6f 91       	pop	r22
    4356:	5f 91       	pop	r21
    4358:	4f 91       	pop	r20
    435a:	3f 91       	pop	r19
    435c:	2f 91       	pop	r18
    435e:	0f 90       	pop	r0
    4360:	0f be       	out	0x3f, r0	; 63
    4362:	0f 90       	pop	r0
    4364:	1f 90       	pop	r1
    4366:	18 95       	reti

00004368 <__vector_7>:
    4368:	1f 92       	push	r1
    436a:	0f 92       	push	r0
    436c:	0f b6       	in	r0, 0x3f	; 63
    436e:	0f 92       	push	r0
    4370:	11 24       	eor	r1, r1
    4372:	2f 93       	push	r18
    4374:	3f 93       	push	r19
    4376:	4f 93       	push	r20
    4378:	5f 93       	push	r21
    437a:	6f 93       	push	r22
    437c:	7f 93       	push	r23
    437e:	8f 93       	push	r24
    4380:	9f 93       	push	r25
    4382:	af 93       	push	r26
    4384:	bf 93       	push	r27
    4386:	ef 93       	push	r30
    4388:	ff 93       	push	r31
    438a:	e0 91 0c 04 	lds	r30, 0x040C
    438e:	f0 91 0d 04 	lds	r31, 0x040D
    4392:	30 97       	sbiw	r30, 0x00	; 0
    4394:	09 f0       	breq	.+2      	; 0x4398 <__vector_7+0x30>
    4396:	09 95       	icall
    4398:	ff 91       	pop	r31
    439a:	ef 91       	pop	r30
    439c:	bf 91       	pop	r27
    439e:	af 91       	pop	r26
    43a0:	9f 91       	pop	r25
    43a2:	8f 91       	pop	r24
    43a4:	7f 91       	pop	r23
    43a6:	6f 91       	pop	r22
    43a8:	5f 91       	pop	r21
    43aa:	4f 91       	pop	r20
    43ac:	3f 91       	pop	r19
    43ae:	2f 91       	pop	r18
    43b0:	0f 90       	pop	r0
    43b2:	0f be       	out	0x3f, r0	; 63
    43b4:	0f 90       	pop	r0
    43b6:	1f 90       	pop	r1
    43b8:	18 95       	reti

000043ba <ISR_attach>:
    43ba:	e8 2f       	mov	r30, r24
    43bc:	80 32       	cpi	r24, 0x20	; 32
    43be:	68 f4       	brcc	.+26     	; 0x43da <ISR_attach+0x20>
    43c0:	80 51       	subi	r24, 0x10	; 16
    43c2:	83 30       	cpi	r24, 0x03	; 3
    43c4:	50 f0       	brcs	.+20     	; 0x43da <ISR_attach+0x20>
    43c6:	f0 e0       	ldi	r31, 0x00	; 0
    43c8:	ee 0f       	add	r30, r30
    43ca:	ff 1f       	adc	r31, r31
    43cc:	e2 50       	subi	r30, 0x02	; 2
    43ce:	fc 4f       	sbci	r31, 0xFC	; 252
    43d0:	20 81       	ld	r18, Z
    43d2:	31 81       	ldd	r19, Z+1	; 0x01
    43d4:	71 83       	std	Z+1, r23	; 0x01
    43d6:	60 83       	st	Z, r22
    43d8:	02 c0       	rjmp	.+4      	; 0x43de <ISR_attach+0x24>
    43da:	20 e0       	ldi	r18, 0x00	; 0
    43dc:	30 e0       	ldi	r19, 0x00	; 0
    43de:	c9 01       	movw	r24, r18
    43e0:	08 95       	ret

000043e2 <ISR_open>:
    43e2:	80 e1       	ldi	r24, 0x10	; 16
    43e4:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    43e8:	88 23       	and	r24, r24
    43ea:	61 f4       	brne	.+24     	; 0x4404 <ISR_open+0x22>
    43ec:	ee ef       	ldi	r30, 0xFE	; 254
    43ee:	f3 e0       	ldi	r31, 0x03	; 3
    43f0:	11 92       	st	Z+, r1
    43f2:	11 92       	st	Z+, r1
    43f4:	84 e0       	ldi	r24, 0x04	; 4
    43f6:	ee 33       	cpi	r30, 0x3E	; 62
    43f8:	f8 07       	cpc	r31, r24
    43fa:	d1 f7       	brne	.-12     	; 0x43f0 <ISR_open+0xe>
    43fc:	80 e1       	ldi	r24, 0x10	; 16
    43fe:	61 e0       	ldi	r22, 0x01	; 1
    4400:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    4404:	80 e1       	ldi	r24, 0x10	; 16
    4406:	91 e0       	ldi	r25, 0x01	; 1
    4408:	08 95       	ret

0000440a <__LCD_init>:
    440a:	23 9a       	sbi	0x04, 3	; 4
    440c:	08 95       	ret

0000440e <__LCD_putchar>:
    440e:	ff 92       	push	r15
    4410:	0f 93       	push	r16
    4412:	1f 93       	push	r17
    4414:	cf 93       	push	r28
    4416:	df 93       	push	r29
    4418:	f8 2e       	mov	r15, r24
    441a:	8a e0       	ldi	r24, 0x0A	; 10
    441c:	f8 16       	cp	r15, r24
    441e:	b1 f0       	breq	.+44     	; 0x444c <__LCD_putchar+0x3e>
    4420:	8f 15       	cp	r24, r15
    4422:	48 f0       	brcs	.+18     	; 0x4436 <__LCD_putchar+0x28>
    4424:	e8 e0       	ldi	r30, 0x08	; 8
    4426:	fe 16       	cp	r15, r30
    4428:	b9 f1       	breq	.+110    	; 0x4498 <__LCD_putchar+0x8a>
    442a:	ef 15       	cp	r30, r15
    442c:	38 f1       	brcs	.+78     	; 0x447c <__LCD_putchar+0x6e>
    442e:	f7 e0       	ldi	r31, 0x07	; 7
    4430:	ff 16       	cp	r15, r31
    4432:	51 f4       	brne	.+20     	; 0x4448 <__LCD_putchar+0x3a>
    4434:	3b c0       	rjmp	.+118    	; 0x44ac <__LCD_putchar+0x9e>
    4436:	8d e0       	ldi	r24, 0x0D	; 13
    4438:	f8 16       	cp	r15, r24
    443a:	59 f0       	breq	.+22     	; 0x4452 <__LCD_putchar+0x44>
    443c:	eb e1       	ldi	r30, 0x1B	; 27
    443e:	fe 16       	cp	r15, r30
    4440:	89 f0       	breq	.+34     	; 0x4464 <__LCD_putchar+0x56>
    4442:	fc e0       	ldi	r31, 0x0C	; 12
    4444:	ff 16       	cp	r15, r31
    4446:	41 f0       	breq	.+16     	; 0x4458 <__LCD_putchar+0x4a>
    4448:	01 e0       	ldi	r16, 0x01	; 1
    444a:	41 c0       	rjmp	.+130    	; 0x44ce <__LCD_putchar+0xc0>
    444c:	10 92 f3 06 	sts	0x06F3, r1
    4450:	03 c0       	rjmp	.+6      	; 0x4458 <__LCD_putchar+0x4a>
    4452:	10 92 f3 06 	sts	0x06F3, r1
    4456:	3a c0       	rjmp	.+116    	; 0x44cc <__LCD_putchar+0xbe>
    4458:	80 91 f4 06 	lds	r24, 0x06F4
    445c:	81 50       	subi	r24, 0x01	; 1
    445e:	80 93 f4 06 	sts	0x06F4, r24
    4462:	34 c0       	rjmp	.+104    	; 0x44cc <__LCD_putchar+0xbe>
    4464:	0e 94 92 17 	call	0x2f24	; 0x2f24 <LCD_clear>
    4468:	14 c0       	rjmp	.+40     	; 0x4492 <__LCD_putchar+0x84>
    446a:	80 e0       	ldi	r24, 0x00	; 0
    446c:	61 e0       	ldi	r22, 0x01	; 1
    446e:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    4472:	80 91 f3 06 	lds	r24, 0x06F3
    4476:	8f 5f       	subi	r24, 0xFF	; 255
    4478:	80 93 f3 06 	sts	0x06F3, r24
    447c:	80 91 f3 06 	lds	r24, 0x06F3
    4480:	87 ff       	sbrs	r24, 7
    4482:	f3 cf       	rjmp	.-26     	; 0x446a <__LCD_putchar+0x5c>
    4484:	10 92 f3 06 	sts	0x06F3, r1
    4488:	80 91 f4 06 	lds	r24, 0x06F4
    448c:	81 50       	subi	r24, 0x01	; 1
    448e:	80 93 f4 06 	sts	0x06F4, r24
    4492:	00 e0       	ldi	r16, 0x00	; 0
    4494:	11 e0       	ldi	r17, 0x01	; 1
    4496:	1c c0       	rjmp	.+56     	; 0x44d0 <__LCD_putchar+0xc2>
    4498:	80 91 f3 06 	lds	r24, 0x06F3
    449c:	88 23       	and	r24, r24
    449e:	b1 f0       	breq	.+44     	; 0x44cc <__LCD_putchar+0xbe>
    44a0:	80 91 f3 06 	lds	r24, 0x06F3
    44a4:	86 50       	subi	r24, 0x06	; 6
    44a6:	80 93 f3 06 	sts	0x06F3, r24
    44aa:	10 c0       	rjmp	.+32     	; 0x44cc <__LCD_putchar+0xbe>
    44ac:	81 e0       	ldi	r24, 0x01	; 1
    44ae:	0e 94 9e 19 	call	0x333c	; 0x333c <SPKR_open>
    44b2:	64 ef       	ldi	r22, 0xF4	; 244
    44b4:	71 e0       	ldi	r23, 0x01	; 1
    44b6:	80 e0       	ldi	r24, 0x00	; 0
    44b8:	90 e0       	ldi	r25, 0x00	; 0
    44ba:	4d e7       	ldi	r20, 0x7D	; 125
    44bc:	50 e0       	ldi	r21, 0x00	; 0
    44be:	24 e6       	ldi	r18, 0x64	; 100
    44c0:	30 e0       	ldi	r19, 0x00	; 0
    44c2:	0e 94 21 24 	call	0x4842	; 0x4842 <SPKR_play_beep>
    44c6:	81 e0       	ldi	r24, 0x01	; 1
    44c8:	0e 94 ed 23 	call	0x47da	; 0x47da <SPKR_close>
    44cc:	00 e0       	ldi	r16, 0x00	; 0
    44ce:	10 e0       	ldi	r17, 0x00	; 0
    44d0:	80 91 f4 06 	lds	r24, 0x06F4
    44d4:	60 91 f3 06 	lds	r22, 0x06F3
    44d8:	0e 94 58 18 	call	0x30b0	; 0x30b0 <LCD_set_PGC_addr>
    44dc:	00 23       	and	r16, r16
    44de:	51 f1       	breq	.+84     	; 0x4534 <__LCD_putchar+0x126>
    44e0:	85 e0       	ldi	r24, 0x05	; 5
    44e2:	f8 9e       	mul	r15, r24
    44e4:	c0 01       	movw	r24, r0
    44e6:	11 24       	eor	r1, r1
    44e8:	ec 01       	movw	r28, r24
    44ea:	c3 55       	subi	r28, 0x53	; 83
    44ec:	df 4f       	sbci	r29, 0xFF	; 255
    44ee:	8c 01       	movw	r16, r24
    44f0:	0e 54       	subi	r16, 0x4E	; 78
    44f2:	1f 4f       	sbci	r17, 0xFF	; 255
    44f4:	fe 01       	movw	r30, r28
    44f6:	84 91       	lpm	r24, Z+
    44f8:	61 e0       	ldi	r22, 0x01	; 1
    44fa:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    44fe:	21 96       	adiw	r28, 0x01	; 1
    4500:	c0 17       	cp	r28, r16
    4502:	d1 07       	cpc	r29, r17
    4504:	b9 f7       	brne	.-18     	; 0x44f4 <__LCD_putchar+0xe6>
    4506:	80 e0       	ldi	r24, 0x00	; 0
    4508:	61 e0       	ldi	r22, 0x01	; 1
    450a:	0e 94 71 18 	call	0x30e2	; 0x30e2 <LCD_write>
    450e:	80 91 f3 06 	lds	r24, 0x06F3
    4512:	8a 5f       	subi	r24, 0xFA	; 250
    4514:	80 93 f3 06 	sts	0x06F3, r24
    4518:	80 91 f3 06 	lds	r24, 0x06F3
    451c:	90 e0       	ldi	r25, 0x00	; 0
    451e:	8c 37       	cpi	r24, 0x7C	; 124
    4520:	91 05       	cpc	r25, r1
    4522:	3c f0       	brlt	.+14     	; 0x4532 <__LCD_putchar+0x124>
    4524:	10 92 f3 06 	sts	0x06F3, r1
    4528:	80 91 f4 06 	lds	r24, 0x06F4
    452c:	81 50       	subi	r24, 0x01	; 1
    452e:	80 93 f4 06 	sts	0x06F4, r24
    4532:	11 e0       	ldi	r17, 0x01	; 1
    4534:	80 91 f4 06 	lds	r24, 0x06F4
    4538:	83 70       	andi	r24, 0x03	; 3
    453a:	80 93 f4 06 	sts	0x06F4, r24
    453e:	11 30       	cpi	r17, 0x01	; 1
    4540:	59 f4       	brne	.+22     	; 0x4558 <__LCD_putchar+0x14a>
    4542:	80 91 f5 06 	lds	r24, 0x06F5
    4546:	81 30       	cpi	r24, 0x01	; 1
    4548:	39 f4       	brne	.+14     	; 0x4558 <__LCD_putchar+0x14a>
    454a:	e0 91 f6 06 	lds	r30, 0x06F6
    454e:	f0 91 f7 06 	lds	r31, 0x06F7
    4552:	30 97       	sbiw	r30, 0x00	; 0
    4554:	09 f0       	breq	.+2      	; 0x4558 <__LCD_putchar+0x14a>
    4556:	09 95       	icall
    4558:	80 e0       	ldi	r24, 0x00	; 0
    455a:	90 e0       	ldi	r25, 0x00	; 0
    455c:	df 91       	pop	r29
    455e:	cf 91       	pop	r28
    4560:	1f 91       	pop	r17
    4562:	0f 91       	pop	r16
    4564:	ff 90       	pop	r15
    4566:	08 95       	ret

00004568 <__LED_clr_pattern>:
    4568:	85 fd       	sbrc	r24, 5
    456a:	5d 98       	cbi	0x0b, 5	; 11
    456c:	86 fd       	sbrc	r24, 6
    456e:	5e 98       	cbi	0x0b, 6	; 11
    4570:	08 95       	ret

00004572 <__LED_init>:
    4572:	55 9a       	sbi	0x0a, 5	; 10
    4574:	56 9a       	sbi	0x0a, 6	; 10
    4576:	08 95       	ret

00004578 <__LED_set_pattern>:
    4578:	85 fd       	sbrc	r24, 5
    457a:	5d 9a       	sbi	0x0b, 5	; 11
    457c:	86 fd       	sbrc	r24, 6
    457e:	5e 9a       	sbi	0x0b, 6	; 11
    4580:	08 95       	ret

00004582 <ATMEGA_open>:
    4582:	80 e0       	ldi	r24, 0x00	; 0
    4584:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    4588:	88 23       	and	r24, r24
    458a:	51 f4       	brne	.+20     	; 0x45a0 <ATMEGA_open+0x1e>
    458c:	f8 94       	cli
    458e:	0e 94 d3 25 	call	0x4ba6	; 0x4ba6 <__ATMEGA_init>
    4592:	81 e0       	ldi	r24, 0x01	; 1
    4594:	0e 94 d3 22 	call	0x45a6	; 0x45a6 <ATMEGA_set_clk_mode>
    4598:	80 e0       	ldi	r24, 0x00	; 0
    459a:	61 e0       	ldi	r22, 0x01	; 1
    459c:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    45a0:	80 e0       	ldi	r24, 0x00	; 0
    45a2:	91 e0       	ldi	r25, 0x01	; 1
    45a4:	08 95       	ret

000045a6 <ATMEGA_set_clk_mode>:
    45a6:	81 30       	cpi	r24, 0x01	; 1
    45a8:	49 f0       	breq	.+18     	; 0x45bc <ATMEGA_set_clk_mode+0x16>
    45aa:	f8 94       	cli
    45ac:	81 30       	cpi	r24, 0x01	; 1
    45ae:	20 f1       	brcs	.+72     	; 0x45f8 <ATMEGA_set_clk_mode+0x52>
    45b0:	82 30       	cpi	r24, 0x02	; 2
    45b2:	b1 f0       	breq	.+44     	; 0x45e0 <ATMEGA_set_clk_mode+0x3a>
    45b4:	83 30       	cpi	r24, 0x03	; 3
    45b6:	09 f0       	breq	.+2      	; 0x45ba <ATMEGA_set_clk_mode+0x14>
    45b8:	45 c0       	rjmp	.+138    	; 0x4644 <ATMEGA_set_clk_mode+0x9e>
    45ba:	17 c0       	rjmp	.+46     	; 0x45ea <ATMEGA_set_clk_mode+0x44>
    45bc:	2c 9a       	sbi	0x05, 4	; 5
    45be:	80 e8       	ldi	r24, 0x80	; 128
    45c0:	80 93 61 00 	sts	0x0061, r24
    45c4:	10 92 61 00 	sts	0x0061, r1
    45c8:	80 e0       	ldi	r24, 0x00	; 0
    45ca:	90 e0       	ldi	r25, 0x00	; 0
    45cc:	00 00       	nop
    45ce:	01 96       	adiw	r24, 0x01	; 1
    45d0:	88 32       	cpi	r24, 0x28	; 40
    45d2:	91 05       	cpc	r25, r1
    45d4:	d9 f7       	brne	.-10     	; 0x45cc <ATMEGA_set_clk_mode+0x26>
    45d6:	10 92 68 00 	sts	0x0068, r1
    45da:	10 92 6b 00 	sts	0x006B, r1
    45de:	08 95       	ret
    45e0:	80 e8       	ldi	r24, 0x80	; 128
    45e2:	80 93 61 00 	sts	0x0061, r24
    45e6:	83 e0       	ldi	r24, 0x03	; 3
    45e8:	04 c0       	rjmp	.+8      	; 0x45f2 <ATMEGA_set_clk_mode+0x4c>
    45ea:	80 e8       	ldi	r24, 0x80	; 128
    45ec:	80 93 61 00 	sts	0x0061, r24
    45f0:	88 e0       	ldi	r24, 0x08	; 8
    45f2:	80 93 61 00 	sts	0x0061, r24
    45f6:	28 c0       	rjmp	.+80     	; 0x4648 <ATMEGA_set_clk_mode+0xa2>
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	90 e0       	ldi	r25, 0x00	; 0
    45fc:	00 00       	nop
    45fe:	01 96       	adiw	r24, 0x01	; 1
    4600:	2d e6       	ldi	r18, 0x6D	; 109
    4602:	80 36       	cpi	r24, 0x60	; 96
    4604:	92 07       	cpc	r25, r18
    4606:	d1 f7       	brne	.-12     	; 0x45fc <ATMEGA_set_clk_mode+0x56>
    4608:	2c 98       	cbi	0x05, 4	; 5
    460a:	80 e0       	ldi	r24, 0x00	; 0
    460c:	90 e0       	ldi	r25, 0x00	; 0
    460e:	00 00       	nop
    4610:	01 96       	adiw	r24, 0x01	; 1
    4612:	2d e6       	ldi	r18, 0x6D	; 109
    4614:	80 36       	cpi	r24, 0x60	; 96
    4616:	92 07       	cpc	r25, r18
    4618:	d1 f7       	brne	.-12     	; 0x460e <ATMEGA_set_clk_mode+0x68>
    461a:	10 92 7a 00 	sts	0x007A, r1
    461e:	8f ef       	ldi	r24, 0xFF	; 255
    4620:	80 93 64 00 	sts	0x0064, r24
    4624:	80 91 68 00 	lds	r24, 0x0068
    4628:	81 60       	ori	r24, 0x01	; 1
    462a:	80 93 68 00 	sts	0x0068, r24
    462e:	80 91 6b 00 	lds	r24, 0x006B
    4632:	84 60       	ori	r24, 0x04	; 4
    4634:	80 93 6b 00 	sts	0x006B, r24
    4638:	78 94       	sei
    463a:	83 b7       	in	r24, 0x33	; 51
    463c:	81 60       	ori	r24, 0x01	; 1
    463e:	83 bf       	out	0x33, r24	; 51
    4640:	88 95       	sleep
    4642:	08 95       	ret
    4644:	82 30       	cpi	r24, 0x02	; 2
    4646:	08 f0       	brcs	.+2      	; 0x464a <ATMEGA_set_clk_mode+0xa4>
    4648:	78 94       	sei
    464a:	08 95       	ret

0000464c <SPI_open>:
    464c:	0f 93       	push	r16
    464e:	1f 93       	push	r17
    4650:	0e 94 ff 25 	call	0x4bfe	; 0x4bfe <__SPI_init>
    4654:	80 e0       	ldi	r24, 0x00	; 0
    4656:	6e ee       	ldi	r22, 0xEE	; 238
    4658:	75 e2       	ldi	r23, 0x25	; 37
    465a:	0e 94 71 23 	call	0x46e2	; 0x46e2 <SPI_set_config_func>
    465e:	81 e0       	ldi	r24, 0x01	; 1
    4660:	66 ee       	ldi	r22, 0xE6	; 230
    4662:	75 e2       	ldi	r23, 0x25	; 37
    4664:	0e 94 71 23 	call	0x46e2	; 0x46e2 <SPI_set_config_func>
    4668:	82 e0       	ldi	r24, 0x02	; 2
    466a:	6e ed       	ldi	r22, 0xDE	; 222
    466c:	75 e2       	ldi	r23, 0x25	; 37
    466e:	0e 94 71 23 	call	0x46e2	; 0x46e2 <SPI_set_config_func>
    4672:	86 e0       	ldi	r24, 0x06	; 6
    4674:	66 ef       	ldi	r22, 0xF6	; 246
    4676:	75 e2       	ldi	r23, 0x25	; 37
    4678:	0e 94 71 23 	call	0x46e2	; 0x46e2 <SPI_set_config_func>
    467c:	06 ed       	ldi	r16, 0xD6	; 214
    467e:	15 e2       	ldi	r17, 0x25	; 37
    4680:	83 e0       	ldi	r24, 0x03	; 3
    4682:	b8 01       	movw	r22, r16
    4684:	0e 94 71 23 	call	0x46e2	; 0x46e2 <SPI_set_config_func>
    4688:	84 e0       	ldi	r24, 0x04	; 4
    468a:	b8 01       	movw	r22, r16
    468c:	0e 94 71 23 	call	0x46e2	; 0x46e2 <SPI_set_config_func>
    4690:	85 e0       	ldi	r24, 0x05	; 5
    4692:	b8 01       	movw	r22, r16
    4694:	0e 94 71 23 	call	0x46e2	; 0x46e2 <SPI_set_config_func>
    4698:	87 e0       	ldi	r24, 0x07	; 7
    469a:	b8 01       	movw	r22, r16
    469c:	0e 94 71 23 	call	0x46e2	; 0x46e2 <SPI_set_config_func>
    46a0:	82 e0       	ldi	r24, 0x02	; 2
    46a2:	61 e0       	ldi	r22, 0x01	; 1
    46a4:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    46a8:	8f ef       	ldi	r24, 0xFF	; 255
    46aa:	80 93 f8 06 	sts	0x06F8, r24
    46ae:	87 e0       	ldi	r24, 0x07	; 7
    46b0:	0e 94 ad 18 	call	0x315a	; 0x315a <SPI_set_slave_addr>
    46b4:	82 e0       	ldi	r24, 0x02	; 2
    46b6:	91 e0       	ldi	r25, 0x01	; 1
    46b8:	1f 91       	pop	r17
    46ba:	0f 91       	pop	r16
    46bc:	08 95       	ret

000046be <SPI_receive>:
    46be:	1f 93       	push	r17
    46c0:	16 2f       	mov	r17, r22
    46c2:	0e 94 ad 18 	call	0x315a	; 0x315a <SPI_set_slave_addr>
    46c6:	82 e0       	ldi	r24, 0x02	; 2
    46c8:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    46cc:	81 30       	cpi	r24, 0x01	; 1
    46ce:	11 f0       	breq	.+4      	; 0x46d4 <SPI_receive+0x16>
    46d0:	80 e0       	ldi	r24, 0x00	; 0
    46d2:	05 c0       	rjmp	.+10     	; 0x46de <SPI_receive+0x20>
    46d4:	1e bd       	out	0x2e, r17	; 46
    46d6:	0d b4       	in	r0, 0x2d	; 45
    46d8:	07 fe       	sbrs	r0, 7
    46da:	fd cf       	rjmp	.-6      	; 0x46d6 <SPI_receive+0x18>
    46dc:	8e b5       	in	r24, 0x2e	; 46
    46de:	1f 91       	pop	r17
    46e0:	08 95       	ret

000046e2 <SPI_set_config_func>:
    46e2:	e8 2f       	mov	r30, r24
    46e4:	f0 e0       	ldi	r31, 0x00	; 0
    46e6:	ee 0f       	add	r30, r30
    46e8:	ff 1f       	adc	r31, r31
    46ea:	e2 5c       	subi	r30, 0xC2	; 194
    46ec:	fb 4f       	sbci	r31, 0xFB	; 251
    46ee:	71 83       	std	Z+1, r23	; 0x01
    46f0:	60 83       	st	Z, r22
    46f2:	08 95       	ret

000046f4 <__SPKR_TIMER1_COMPA_vect>:
    46f4:	0e 94 7d 23 	call	0x46fa	; 0x46fa <SPKR_clk>
    46f8:	08 95       	ret

000046fa <SPKR_clk>:
    46fa:	80 91 50 04 	lds	r24, 0x0450
    46fe:	90 91 51 04 	lds	r25, 0x0451
    4702:	a0 91 52 04 	lds	r26, 0x0452
    4706:	b0 91 53 04 	lds	r27, 0x0453
    470a:	20 91 54 04 	lds	r18, 0x0454
    470e:	30 91 55 04 	lds	r19, 0x0455
    4712:	40 91 56 04 	lds	r20, 0x0456
    4716:	50 91 57 04 	lds	r21, 0x0457
    471a:	28 0f       	add	r18, r24
    471c:	39 1f       	adc	r19, r25
    471e:	4a 1f       	adc	r20, r26
    4720:	5b 1f       	adc	r21, r27
    4722:	20 93 50 04 	sts	0x0450, r18
    4726:	30 93 51 04 	sts	0x0451, r19
    472a:	40 93 52 04 	sts	0x0452, r20
    472e:	50 93 53 04 	sts	0x0453, r21
    4732:	80 91 50 04 	lds	r24, 0x0450
    4736:	90 91 51 04 	lds	r25, 0x0451
    473a:	a0 91 52 04 	lds	r26, 0x0452
    473e:	b0 91 53 04 	lds	r27, 0x0453
    4742:	88 51       	subi	r24, 0x18	; 24
    4744:	96 4f       	sbci	r25, 0xF6	; 246
    4746:	a0 40       	sbci	r26, 0x00	; 0
    4748:	b0 40       	sbci	r27, 0x00	; 0
    474a:	bc f0       	brlt	.+46     	; 0x477a <SPKR_clk+0x80>
    474c:	8b b1       	in	r24, 0x0b	; 11
    474e:	80 58       	subi	r24, 0x80	; 128
    4750:	8b b9       	out	0x0b, r24	; 11
    4752:	80 91 50 04 	lds	r24, 0x0450
    4756:	90 91 51 04 	lds	r25, 0x0451
    475a:	a0 91 52 04 	lds	r26, 0x0452
    475e:	b0 91 53 04 	lds	r27, 0x0453
    4762:	88 51       	subi	r24, 0x18	; 24
    4764:	96 4f       	sbci	r25, 0xF6	; 246
    4766:	a0 40       	sbci	r26, 0x00	; 0
    4768:	b0 40       	sbci	r27, 0x00	; 0
    476a:	80 93 50 04 	sts	0x0450, r24
    476e:	90 93 51 04 	sts	0x0451, r25
    4772:	a0 93 52 04 	sts	0x0452, r26
    4776:	b0 93 53 04 	sts	0x0453, r27
    477a:	08 95       	ret

0000477c <__SPKR_close_beep_mode>:
    477c:	8a e0       	ldi	r24, 0x0A	; 10
    477e:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    4782:	81 30       	cpi	r24, 0x01	; 1
    4784:	41 f4       	brne	.+16     	; 0x4796 <__SPKR_close_beep_mode+0x1a>
    4786:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <__SPKR_close>
    478a:	10 92 4f 04 	sts	0x044F, r1
    478e:	8a e0       	ldi	r24, 0x0A	; 10
    4790:	60 e0       	ldi	r22, 0x00	; 0
    4792:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    4796:	08 95       	ret

00004798 <__SPKR_close_tone_mode>:
    4798:	89 e0       	ldi	r24, 0x09	; 9
    479a:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    479e:	81 30       	cpi	r24, 0x01	; 1
    47a0:	d9 f4       	brne	.+54     	; 0x47d8 <__SPKR_close_tone_mode+0x40>
    47a2:	80 91 4e 04 	lds	r24, 0x044E
    47a6:	88 23       	and	r24, r24
    47a8:	11 f0       	breq	.+4      	; 0x47ae <__SPKR_close_tone_mode+0x16>
    47aa:	0e 94 6e 24 	call	0x48dc	; 0x48dc <__SPKR_stop>
    47ae:	82 e0       	ldi	r24, 0x02	; 2
    47b0:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <__SPKR_close>
    47b4:	80 91 5c 04 	lds	r24, 0x045C
    47b8:	90 91 5d 04 	lds	r25, 0x045D
    47bc:	00 97       	sbiw	r24, 0x00	; 0
    47be:	31 f0       	breq	.+12     	; 0x47cc <__SPKR_close_tone_mode+0x34>
    47c0:	0e 94 b7 32 	call	0x656e	; 0x656e <free>
    47c4:	10 92 5d 04 	sts	0x045D, r1
    47c8:	10 92 5c 04 	sts	0x045C, r1
    47cc:	10 92 4e 04 	sts	0x044E, r1
    47d0:	89 e0       	ldi	r24, 0x09	; 9
    47d2:	60 e0       	ldi	r22, 0x00	; 0
    47d4:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    47d8:	08 95       	ret

000047da <SPKR_close>:
    47da:	81 30       	cpi	r24, 0x01	; 1
    47dc:	29 f0       	breq	.+10     	; 0x47e8 <SPKR_close+0xe>
    47de:	82 30       	cpi	r24, 0x02	; 2
    47e0:	29 f4       	brne	.+10     	; 0x47ec <SPKR_close+0x12>
    47e2:	0e 94 cc 23 	call	0x4798	; 0x4798 <__SPKR_close_tone_mode>
    47e6:	08 95       	ret
    47e8:	0e 94 be 23 	call	0x477c	; 0x477c <__SPKR_close_beep_mode>
    47ec:	08 95       	ret

000047ee <__SPKR_init>:
    47ee:	98 2f       	mov	r25, r24
    47f0:	80 91 4e 04 	lds	r24, 0x044E
    47f4:	88 23       	and	r24, r24
    47f6:	31 f4       	brne	.+12     	; 0x4804 <__SPKR_init+0x16>
    47f8:	80 91 4f 04 	lds	r24, 0x044F
    47fc:	88 23       	and	r24, r24
    47fe:	11 f4       	brne	.+4      	; 0x4804 <__SPKR_init+0x16>
    4800:	57 9a       	sbi	0x0a, 7	; 10
    4802:	5f 98       	cbi	0x0b, 7	; 11
    4804:	80 91 4e 04 	lds	r24, 0x044E
    4808:	88 23       	and	r24, r24
    480a:	d1 f4       	brne	.+52     	; 0x4840 <__SPKR_init+0x52>
    480c:	92 30       	cpi	r25, 0x02	; 2
    480e:	c1 f4       	brne	.+48     	; 0x4840 <__SPKR_init+0x52>
    4810:	10 92 80 00 	sts	0x0080, r1
    4814:	10 92 81 00 	sts	0x0081, r1
    4818:	80 91 81 00 	lds	r24, 0x0081
    481c:	88 60       	ori	r24, 0x08	; 8
    481e:	80 93 81 00 	sts	0x0081, r24
    4822:	80 91 81 00 	lds	r24, 0x0081
    4826:	81 60       	ori	r24, 0x01	; 1
    4828:	80 93 81 00 	sts	0x0081, r24
    482c:	10 92 85 00 	sts	0x0085, r1
    4830:	10 92 84 00 	sts	0x0084, r1
    4834:	81 e0       	ldi	r24, 0x01	; 1
    4836:	80 93 89 00 	sts	0x0089, r24
    483a:	80 e9       	ldi	r24, 0x90	; 144
    483c:	80 93 88 00 	sts	0x0088, r24
    4840:	08 95       	ret

00004842 <SPKR_play_beep>:
    4842:	8f 92       	push	r8
    4844:	9f 92       	push	r9
    4846:	af 92       	push	r10
    4848:	bf 92       	push	r11
    484a:	cf 92       	push	r12
    484c:	df 92       	push	r13
    484e:	ef 92       	push	r14
    4850:	ff 92       	push	r15
    4852:	0f 93       	push	r16
    4854:	1f 93       	push	r17
    4856:	cf 93       	push	r28
    4858:	df 93       	push	r29
    485a:	4b 01       	movw	r8, r22
    485c:	5c 01       	movw	r10, r24
    485e:	ea 01       	movw	r28, r20
    4860:	b9 01       	movw	r22, r18
    4862:	21 15       	cp	r18, r1
    4864:	31 05       	cpc	r19, r1
    4866:	39 f1       	breq	.+78     	; 0x48b6 <SPKR_play_beep+0x74>
    4868:	9e 01       	movw	r18, r28
    486a:	44 27       	eor	r20, r20
    486c:	37 fd       	sbrc	r19, 7
    486e:	40 95       	com	r20
    4870:	54 2f       	mov	r21, r20
    4872:	65 36       	cpi	r22, 0x65	; 101
    4874:	71 05       	cpc	r23, r1
    4876:	10 f0       	brcs	.+4      	; 0x487c <SPKR_play_beep+0x3a>
    4878:	64 e6       	ldi	r22, 0x64	; 100
    487a:	70 e0       	ldi	r23, 0x00	; 0
    487c:	80 e0       	ldi	r24, 0x00	; 0
    487e:	90 e0       	ldi	r25, 0x00	; 0
    4880:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <__mulsi3>
    4884:	24 e6       	ldi	r18, 0x64	; 100
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	40 e0       	ldi	r20, 0x00	; 0
    488a:	50 e0       	ldi	r21, 0x00	; 0
    488c:	0e 94 9d 31 	call	0x633a	; 0x633a <__udivmodsi4>
    4890:	79 01       	movw	r14, r18
    4892:	8a 01       	movw	r16, r20
    4894:	c5 01       	movw	r24, r10
    4896:	b4 01       	movw	r22, r8
    4898:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <SPKR_beep>
    489c:	c7 01       	movw	r24, r14
    489e:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
    48a2:	60 e0       	ldi	r22, 0x00	; 0
    48a4:	70 e0       	ldi	r23, 0x00	; 0
    48a6:	80 e0       	ldi	r24, 0x00	; 0
    48a8:	90 e0       	ldi	r25, 0x00	; 0
    48aa:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <SPKR_beep>
    48ae:	ce 01       	movw	r24, r28
    48b0:	8e 19       	sub	r24, r14
    48b2:	9f 09       	sbc	r25, r15
    48b4:	04 c0       	rjmp	.+8      	; 0x48be <SPKR_play_beep+0x7c>
    48b6:	41 15       	cp	r20, r1
    48b8:	51 05       	cpc	r21, r1
    48ba:	19 f0       	breq	.+6      	; 0x48c2 <SPKR_play_beep+0x80>
    48bc:	ca 01       	movw	r24, r20
    48be:	0e 94 52 1e 	call	0x3ca4	; 0x3ca4 <TMRSRVC_delay>
    48c2:	df 91       	pop	r29
    48c4:	cf 91       	pop	r28
    48c6:	1f 91       	pop	r17
    48c8:	0f 91       	pop	r16
    48ca:	ff 90       	pop	r15
    48cc:	ef 90       	pop	r14
    48ce:	df 90       	pop	r13
    48d0:	cf 90       	pop	r12
    48d2:	bf 90       	pop	r11
    48d4:	af 90       	pop	r10
    48d6:	9f 90       	pop	r9
    48d8:	8f 90       	pop	r8
    48da:	08 95       	ret

000048dc <__SPKR_stop>:
    48dc:	ef e6       	ldi	r30, 0x6F	; 111
    48de:	f0 e0       	ldi	r31, 0x00	; 0
    48e0:	80 81       	ld	r24, Z
    48e2:	8d 7f       	andi	r24, 0xFD	; 253
    48e4:	80 83       	st	Z, r24
    48e6:	08 95       	ret

000048e8 <STEPPER_go>:
    48e8:	98 2f       	mov	r25, r24
    48ea:	81 e0       	ldi	r24, 0x01	; 1
    48ec:	80 93 dd 06 	sts	0x06DD, r24
    48f0:	91 30       	cpi	r25, 0x01	; 1
    48f2:	51 f0       	breq	.+20     	; 0x4908 <STEPPER_go+0x20>
    48f4:	91 30       	cpi	r25, 0x01	; 1
    48f6:	18 f0       	brcs	.+6      	; 0x48fe <STEPPER_go+0x16>
    48f8:	92 30       	cpi	r25, 0x02	; 2
    48fa:	41 f4       	brne	.+16     	; 0x490c <STEPPER_go+0x24>
    48fc:	03 c0       	rjmp	.+6      	; 0x4904 <STEPPER_go+0x1c>
    48fe:	10 92 c5 06 	sts	0x06C5, r1
    4902:	04 c0       	rjmp	.+8      	; 0x490c <STEPPER_go+0x24>
    4904:	10 92 c5 06 	sts	0x06C5, r1
    4908:	10 92 c6 06 	sts	0x06C6, r1
    490c:	10 92 dd 06 	sts	0x06DD, r1
    4910:	08 95       	ret

00004912 <__STEPPER_init>:
    4912:	3a 9a       	sbi	0x07, 2	; 7
    4914:	3b 9a       	sbi	0x07, 3	; 7
    4916:	3c 9a       	sbi	0x07, 4	; 7
    4918:	3d 9a       	sbi	0x07, 5	; 7
    491a:	3e 9a       	sbi	0x07, 6	; 7
    491c:	3f 9a       	sbi	0x07, 7	; 7
    491e:	88 b1       	in	r24, 0x08	; 8
    4920:	83 70       	andi	r24, 0x03	; 3
    4922:	88 b9       	out	0x08, r24	; 8
    4924:	08 95       	ret

00004926 <STEPPER_set_steps>:
    4926:	98 2f       	mov	r25, r24
    4928:	81 e0       	ldi	r24, 0x01	; 1
    492a:	80 93 dd 06 	sts	0x06DD, r24
    492e:	91 30       	cpi	r25, 0x01	; 1
    4930:	71 f0       	breq	.+28     	; 0x494e <STEPPER_set_steps+0x28>
    4932:	91 30       	cpi	r25, 0x01	; 1
    4934:	18 f0       	brcs	.+6      	; 0x493c <STEPPER_set_steps+0x16>
    4936:	92 30       	cpi	r25, 0x02	; 2
    4938:	71 f4       	brne	.+28     	; 0x4956 <STEPPER_set_steps+0x30>
    493a:	05 c0       	rjmp	.+10     	; 0x4946 <STEPPER_set_steps+0x20>
    493c:	70 93 ba 06 	sts	0x06BA, r23
    4940:	60 93 b9 06 	sts	0x06B9, r22
    4944:	08 c0       	rjmp	.+16     	; 0x4956 <STEPPER_set_steps+0x30>
    4946:	70 93 ba 06 	sts	0x06BA, r23
    494a:	60 93 b9 06 	sts	0x06B9, r22
    494e:	70 93 bc 06 	sts	0x06BC, r23
    4952:	60 93 bb 06 	sts	0x06BB, r22
    4956:	10 92 dd 06 	sts	0x06DD, r1
    495a:	08 95       	ret

0000495c <STEPPER_set_stop_mode>:
    495c:	98 2f       	mov	r25, r24
    495e:	81 e0       	ldi	r24, 0x01	; 1
    4960:	80 93 dd 06 	sts	0x06DD, r24
    4964:	91 30       	cpi	r25, 0x01	; 1
    4966:	51 f0       	breq	.+20     	; 0x497c <STEPPER_set_stop_mode+0x20>
    4968:	91 30       	cpi	r25, 0x01	; 1
    496a:	18 f0       	brcs	.+6      	; 0x4972 <STEPPER_set_stop_mode+0x16>
    496c:	92 30       	cpi	r25, 0x02	; 2
    496e:	41 f4       	brne	.+16     	; 0x4980 <STEPPER_set_stop_mode+0x24>
    4970:	03 c0       	rjmp	.+6      	; 0x4978 <STEPPER_set_stop_mode+0x1c>
    4972:	60 93 c7 06 	sts	0x06C7, r22
    4976:	04 c0       	rjmp	.+8      	; 0x4980 <STEPPER_set_stop_mode+0x24>
    4978:	60 93 c7 06 	sts	0x06C7, r22
    497c:	60 93 c8 06 	sts	0x06C8, r22
    4980:	10 92 dd 06 	sts	0x06DD, r1
    4984:	08 95       	ret

00004986 <STEPPER_setup_decels>:
    4986:	0f 93       	push	r16
    4988:	1f 93       	push	r17
    498a:	cf 93       	push	r28
    498c:	df 93       	push	r29
    498e:	eb 01       	movw	r28, r22
    4990:	8a 01       	movw	r16, r20
    4992:	81 30       	cpi	r24, 0x01	; 1
    4994:	01 f1       	breq	.+64     	; 0x49d6 <STEPPER_setup_decels+0x50>
    4996:	81 30       	cpi	r24, 0x01	; 1
    4998:	18 f0       	brcs	.+6      	; 0x49a0 <STEPPER_setup_decels+0x1a>
    499a:	82 30       	cpi	r24, 0x02	; 2
    499c:	61 f5       	brne	.+88     	; 0x49f6 <STEPPER_setup_decels+0x70>
    499e:	0d c0       	rjmp	.+26     	; 0x49ba <STEPPER_setup_decels+0x34>
    49a0:	80 91 b1 06 	lds	r24, 0x06B1
    49a4:	90 91 b2 06 	lds	r25, 0x06B2
    49a8:	89 2b       	or	r24, r25
    49aa:	11 f0       	breq	.+4      	; 0x49b0 <STEPPER_setup_decels+0x2a>
    49ac:	80 e0       	ldi	r24, 0x00	; 0
    49ae:	1a c0       	rjmp	.+52     	; 0x49e4 <STEPPER_setup_decels+0x5e>
    49b0:	10 92 be 06 	sts	0x06BE, r1
    49b4:	10 92 bd 06 	sts	0x06BD, r1
    49b8:	1e c0       	rjmp	.+60     	; 0x49f6 <STEPPER_setup_decels+0x70>
    49ba:	80 91 b1 06 	lds	r24, 0x06B1
    49be:	90 91 b2 06 	lds	r25, 0x06B2
    49c2:	89 2b       	or	r24, r25
    49c4:	21 f0       	breq	.+8      	; 0x49ce <STEPPER_setup_decels+0x48>
    49c6:	80 e0       	ldi	r24, 0x00	; 0
    49c8:	0e 94 39 26 	call	0x4c72	; 0x4c72 <STEPPER_set_decel_step_values>
    49cc:	04 c0       	rjmp	.+8      	; 0x49d6 <STEPPER_setup_decels+0x50>
    49ce:	10 92 be 06 	sts	0x06BE, r1
    49d2:	10 92 bd 06 	sts	0x06BD, r1
    49d6:	80 91 b3 06 	lds	r24, 0x06B3
    49da:	90 91 b4 06 	lds	r25, 0x06B4
    49de:	89 2b       	or	r24, r25
    49e0:	31 f0       	breq	.+12     	; 0x49ee <STEPPER_setup_decels+0x68>
    49e2:	81 e0       	ldi	r24, 0x01	; 1
    49e4:	be 01       	movw	r22, r28
    49e6:	a8 01       	movw	r20, r16
    49e8:	0e 94 39 26 	call	0x4c72	; 0x4c72 <STEPPER_set_decel_step_values>
    49ec:	04 c0       	rjmp	.+8      	; 0x49f6 <STEPPER_setup_decels+0x70>
    49ee:	10 92 c0 06 	sts	0x06C0, r1
    49f2:	10 92 bf 06 	sts	0x06BF, r1
    49f6:	df 91       	pop	r29
    49f8:	cf 91       	pop	r28
    49fa:	1f 91       	pop	r17
    49fc:	0f 91       	pop	r16
    49fe:	08 95       	ret

00004a00 <SYS_init>:
    4a00:	10 92 e0 06 	sts	0x06E0, r1
    4a04:	10 92 e1 06 	sts	0x06E1, r1
    4a08:	10 92 e5 06 	sts	0x06E5, r1
    4a0c:	10 92 e2 06 	sts	0x06E2, r1
    4a10:	10 92 e4 06 	sts	0x06E4, r1
    4a14:	10 92 e6 06 	sts	0x06E6, r1
    4a18:	10 92 e7 06 	sts	0x06E7, r1
    4a1c:	10 92 e8 06 	sts	0x06E8, r1
    4a20:	10 92 e9 06 	sts	0x06E9, r1
    4a24:	10 92 ea 06 	sts	0x06EA, r1
    4a28:	10 92 eb 06 	sts	0x06EB, r1
    4a2c:	10 92 ec 06 	sts	0x06EC, r1
    4a30:	10 92 ed 06 	sts	0x06ED, r1
    4a34:	10 92 ee 06 	sts	0x06EE, r1
    4a38:	10 92 ef 06 	sts	0x06EF, r1
    4a3c:	10 92 f0 06 	sts	0x06F0, r1
    4a40:	10 92 f1 06 	sts	0x06F1, r1
    4a44:	08 95       	ret

00004a46 <TMRSRVC_insert>:
    4a46:	cf 92       	push	r12
    4a48:	df 92       	push	r13
    4a4a:	ef 92       	push	r14
    4a4c:	ff 92       	push	r15
    4a4e:	0f 93       	push	r16
    4a50:	1f 93       	push	r17
    4a52:	cf 93       	push	r28
    4a54:	df 93       	push	r29
    4a56:	ec 01       	movw	r28, r24
    4a58:	80 91 17 07 	lds	r24, 0x0717
    4a5c:	88 23       	and	r24, r24
    4a5e:	39 f4       	brne	.+14     	; 0x4a6e <TMRSRVC_insert+0x28>
    4a60:	d0 93 19 07 	sts	0x0719, r29
    4a64:	c0 93 18 07 	sts	0x0718, r28
    4a68:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <TMRSRVC_start>
    4a6c:	47 c0       	rjmp	.+142    	; 0x4afc <TMRSRVC_insert+0xb6>
    4a6e:	c0 90 18 07 	lds	r12, 0x0718
    4a72:	d0 90 19 07 	lds	r13, 0x0719
    4a76:	00 e0       	ldi	r16, 0x00	; 0
    4a78:	10 e0       	ldi	r17, 0x00	; 0
    4a7a:	ee 24       	eor	r14, r14
    4a7c:	ff 24       	eor	r15, r15
    4a7e:	37 c0       	rjmp	.+110    	; 0x4aee <TMRSRVC_insert+0xa8>
    4a80:	a8 81       	ld	r26, Y
    4a82:	b9 81       	ldd	r27, Y+1	; 0x01
    4a84:	fd 01       	movw	r30, r26
    4a86:	64 81       	ldd	r22, Z+4	; 0x04
    4a88:	75 81       	ldd	r23, Z+5	; 0x05
    4a8a:	f6 01       	movw	r30, r12
    4a8c:	40 81       	ld	r20, Z
    4a8e:	51 81       	ldd	r21, Z+1	; 0x01
    4a90:	fa 01       	movw	r30, r20
    4a92:	84 81       	ldd	r24, Z+4	; 0x04
    4a94:	95 81       	ldd	r25, Z+5	; 0x05
    4a96:	9b 01       	movw	r18, r22
    4a98:	28 1b       	sub	r18, r24
    4a9a:	39 0b       	sbc	r19, r25
    4a9c:	37 ff       	sbrs	r19, 7
    4a9e:	0f c0       	rjmp	.+30     	; 0x4abe <TMRSRVC_insert+0x78>
    4aa0:	86 1b       	sub	r24, r22
    4aa2:	97 0b       	sbc	r25, r23
    4aa4:	95 83       	std	Z+5, r25	; 0x05
    4aa6:	84 83       	std	Z+4, r24	; 0x04
    4aa8:	db 82       	std	Y+3, r13	; 0x03
    4aaa:	ca 82       	std	Y+2, r12	; 0x02
    4aac:	01 2b       	or	r16, r17
    4aae:	29 f4       	brne	.+10     	; 0x4aba <TMRSRVC_insert+0x74>
    4ab0:	d0 93 19 07 	sts	0x0719, r29
    4ab4:	c0 93 18 07 	sts	0x0718, r28
    4ab8:	21 c0       	rjmp	.+66     	; 0x4afc <TMRSRVC_insert+0xb6>
    4aba:	f7 01       	movw	r30, r14
    4abc:	0c c0       	rjmp	.+24     	; 0x4ad6 <TMRSRVC_insert+0x90>
    4abe:	f6 01       	movw	r30, r12
    4ac0:	82 81       	ldd	r24, Z+2	; 0x02
    4ac2:	93 81       	ldd	r25, Z+3	; 0x03
    4ac4:	21 15       	cp	r18, r1
    4ac6:	31 05       	cpc	r19, r1
    4ac8:	49 f4       	brne	.+18     	; 0x4adc <TMRSRVC_insert+0x96>
    4aca:	fd 01       	movw	r30, r26
    4acc:	15 82       	std	Z+5, r1	; 0x05
    4ace:	14 82       	std	Z+4, r1	; 0x04
    4ad0:	9b 83       	std	Y+3, r25	; 0x03
    4ad2:	8a 83       	std	Y+2, r24	; 0x02
    4ad4:	f6 01       	movw	r30, r12
    4ad6:	d3 83       	std	Z+3, r29	; 0x03
    4ad8:	c2 83       	std	Z+2, r28	; 0x02
    4ada:	10 c0       	rjmp	.+32     	; 0x4afc <TMRSRVC_insert+0xb6>
    4adc:	fd 01       	movw	r30, r26
    4ade:	35 83       	std	Z+5, r19	; 0x05
    4ae0:	24 83       	std	Z+4, r18	; 0x04
    4ae2:	00 97       	sbiw	r24, 0x00	; 0
    4ae4:	b9 f3       	breq	.-18     	; 0x4ad4 <TMRSRVC_insert+0x8e>
    4ae6:	0f 5f       	subi	r16, 0xFF	; 255
    4ae8:	1f 4f       	sbci	r17, 0xFF	; 255
    4aea:	76 01       	movw	r14, r12
    4aec:	6c 01       	movw	r12, r24
    4aee:	80 91 17 07 	lds	r24, 0x0717
    4af2:	90 e0       	ldi	r25, 0x00	; 0
    4af4:	08 17       	cp	r16, r24
    4af6:	19 07       	cpc	r17, r25
    4af8:	18 f2       	brcs	.-122    	; 0x4a80 <TMRSRVC_insert+0x3a>
    4afa:	ec cf       	rjmp	.-40     	; 0x4ad4 <TMRSRVC_insert+0x8e>
    4afc:	80 91 17 07 	lds	r24, 0x0717
    4b00:	8f 5f       	subi	r24, 0xFF	; 255
    4b02:	80 93 17 07 	sts	0x0717, r24
    4b06:	df 91       	pop	r29
    4b08:	cf 91       	pop	r28
    4b0a:	1f 91       	pop	r17
    4b0c:	0f 91       	pop	r16
    4b0e:	ff 90       	pop	r15
    4b10:	ef 90       	pop	r14
    4b12:	df 90       	pop	r13
    4b14:	cf 90       	pop	r12
    4b16:	08 95       	ret

00004b18 <TMRSRVC_open>:
    4b18:	88 e0       	ldi	r24, 0x08	; 8
    4b1a:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    4b1e:	88 23       	and	r24, r24
    4b20:	b9 f4       	brne	.+46     	; 0x4b50 <TMRSRVC_open+0x38>
    4b22:	10 92 17 07 	sts	0x0717, r1
    4b26:	10 92 19 07 	sts	0x0719, r1
    4b2a:	10 92 18 07 	sts	0x0718, r1
    4b2e:	10 92 5e 04 	sts	0x045E, r1
    4b32:	10 92 5f 04 	sts	0x045F, r1
    4b36:	80 e1       	ldi	r24, 0x10	; 16
    4b38:	66 ea       	ldi	r22, 0xA6	; 166
    4b3a:	76 e2       	ldi	r23, 0x26	; 38
    4b3c:	0e 94 c2 25 	call	0x4b84	; 0x4b84 <__ISR_attach>
    4b40:	0e 94 ad 26 	call	0x4d5a	; 0x4d5a <__TMRSRVC_init>
    4b44:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <__TMRSRVC_start>
    4b48:	88 e0       	ldi	r24, 0x08	; 8
    4b4a:	61 e0       	ldi	r22, 0x01	; 1
    4b4c:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <SYS_set_state>
    4b50:	88 e0       	ldi	r24, 0x08	; 8
    4b52:	91 e0       	ldi	r25, 0x01	; 1
    4b54:	08 95       	ret

00004b56 <__TMRSRVC_start>:
    4b56:	ee e6       	ldi	r30, 0x6E	; 110
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	80 81       	ld	r24, Z
    4b5c:	82 60       	ori	r24, 0x02	; 2
    4b5e:	80 83       	st	Z, r24
    4b60:	08 95       	ret

00004b62 <TMRSRVC_start>:
    4b62:	81 e0       	ldi	r24, 0x01	; 1
    4b64:	80 93 5f 04 	sts	0x045F, r24
    4b68:	08 95       	ret

00004b6a <I2C_enable>:
    4b6a:	80 91 1a 07 	lds	r24, 0x071A
    4b6e:	81 30       	cpi	r24, 0x01	; 1
    4b70:	29 f4       	brne	.+10     	; 0x4b7c <I2C_enable+0x12>
    4b72:	80 91 bc 00 	lds	r24, 0x00BC
    4b76:	84 60       	ori	r24, 0x04	; 4
    4b78:	80 93 bc 00 	sts	0x00BC, r24
    4b7c:	08 95       	ret

00004b7e <__I2C_init>:
    4b7e:	38 98       	cbi	0x07, 0	; 7
    4b80:	39 98       	cbi	0x07, 1	; 7
    4b82:	08 95       	ret

00004b84 <__ISR_attach>:
    4b84:	80 32       	cpi	r24, 0x20	; 32
    4b86:	18 f0       	brcs	.+6      	; 0x4b8e <__ISR_attach+0xa>
    4b88:	20 e0       	ldi	r18, 0x00	; 0
    4b8a:	30 e0       	ldi	r19, 0x00	; 0
    4b8c:	0a c0       	rjmp	.+20     	; 0x4ba2 <__ISR_attach+0x1e>
    4b8e:	e8 2f       	mov	r30, r24
    4b90:	f0 e0       	ldi	r31, 0x00	; 0
    4b92:	ee 0f       	add	r30, r30
    4b94:	ff 1f       	adc	r31, r31
    4b96:	e2 50       	subi	r30, 0x02	; 2
    4b98:	fc 4f       	sbci	r31, 0xFC	; 252
    4b9a:	20 81       	ld	r18, Z
    4b9c:	31 81       	ldd	r19, Z+1	; 0x01
    4b9e:	71 83       	std	Z+1, r23	; 0x01
    4ba0:	60 83       	st	Z, r22
    4ba2:	c9 01       	movw	r24, r18
    4ba4:	08 95       	ret

00004ba6 <__ATMEGA_init>:
    4ba6:	24 9a       	sbi	0x04, 4	; 4
    4ba8:	2c 9a       	sbi	0x05, 4	; 5
    4baa:	08 95       	ret

00004bac <SPI_default_config>:
    4bac:	83 e5       	ldi	r24, 0x53	; 83
    4bae:	8c bd       	out	0x2c, r24	; 44
    4bb0:	81 e0       	ldi	r24, 0x01	; 1
    4bb2:	8d bd       	out	0x2d, r24	; 45
    4bb4:	8d e0       	ldi	r24, 0x0D	; 13
    4bb6:	8a 95       	dec	r24
    4bb8:	f1 f7       	brne	.-4      	; 0x4bb6 <SPI_default_config+0xa>
    4bba:	08 95       	ret

00004bbc <SPI_ATtiny0_config>:
    4bbc:	83 e5       	ldi	r24, 0x53	; 83
    4bbe:	8c bd       	out	0x2c, r24	; 44
    4bc0:	1d bc       	out	0x2d, r1	; 45
    4bc2:	84 ef       	ldi	r24, 0xF4	; 244
    4bc4:	91 e0       	ldi	r25, 0x01	; 1
    4bc6:	01 97       	sbiw	r24, 0x01	; 1
    4bc8:	f1 f7       	brne	.-4      	; 0x4bc6 <SPI_ATtiny0_config+0xa>
    4bca:	08 95       	ret

00004bcc <SPI_PSXC_config>:
    4bcc:	8f e7       	ldi	r24, 0x7F	; 127
    4bce:	8c bd       	out	0x2c, r24	; 44
    4bd0:	1d bc       	out	0x2d, r1	; 45
    4bd2:	84 ef       	ldi	r24, 0xF4	; 244
    4bd4:	91 e0       	ldi	r25, 0x01	; 1
    4bd6:	01 97       	sbiw	r24, 0x01	; 1
    4bd8:	f1 f7       	brne	.-4      	; 0x4bd6 <SPI_PSXC_config+0xa>
    4bda:	08 95       	ret

00004bdc <SPI_LCD_config>:
    4bdc:	83 e5       	ldi	r24, 0x53	; 83
    4bde:	8c bd       	out	0x2c, r24	; 44
    4be0:	81 e0       	ldi	r24, 0x01	; 1
    4be2:	8d bd       	out	0x2d, r24	; 45
    4be4:	8d e0       	ldi	r24, 0x0D	; 13
    4be6:	8a 95       	dec	r24
    4be8:	f1 f7       	brne	.-4      	; 0x4be6 <SPI_LCD_config+0xa>
    4bea:	08 95       	ret

00004bec <SPI_FLASH_config>:
    4bec:	83 e5       	ldi	r24, 0x53	; 83
    4bee:	8c bd       	out	0x2c, r24	; 44
    4bf0:	81 e0       	ldi	r24, 0x01	; 1
    4bf2:	8d bd       	out	0x2d, r24	; 45
    4bf4:	84 ef       	ldi	r24, 0xF4	; 244
    4bf6:	91 e0       	ldi	r25, 0x01	; 1
    4bf8:	01 97       	sbiw	r24, 0x01	; 1
    4bfa:	f1 f7       	brne	.-4      	; 0x4bf8 <SPI_FLASH_config+0xc>
    4bfc:	08 95       	ret

00004bfe <__SPI_init>:
    4bfe:	25 9a       	sbi	0x04, 5	; 4
    4c00:	26 98       	cbi	0x04, 6	; 4
    4c02:	27 9a       	sbi	0x04, 7	; 4
    4c04:	20 9a       	sbi	0x04, 0	; 4
    4c06:	21 9a       	sbi	0x04, 1	; 4
    4c08:	22 9a       	sbi	0x04, 2	; 4
    4c0a:	08 95       	ret

00004c0c <SPKR_beep>:
    4c0c:	9b 01       	movw	r18, r22
    4c0e:	ac 01       	movw	r20, r24
    4c10:	80 91 4f 04 	lds	r24, 0x044F
    4c14:	88 23       	and	r24, r24
    4c16:	81 f0       	breq	.+32     	; 0x4c38 <SPKR_beep+0x2c>
    4c18:	da 01       	movw	r26, r20
    4c1a:	c9 01       	movw	r24, r18
    4c1c:	88 0f       	add	r24, r24
    4c1e:	99 1f       	adc	r25, r25
    4c20:	aa 1f       	adc	r26, r26
    4c22:	bb 1f       	adc	r27, r27
    4c24:	90 93 5b 04 	sts	0x045B, r25
    4c28:	80 93 5a 04 	sts	0x045A, r24
    4c2c:	21 15       	cp	r18, r1
    4c2e:	31 05       	cpc	r19, r1
    4c30:	41 05       	cpc	r20, r1
    4c32:	51 05       	cpc	r21, r1
    4c34:	09 f4       	brne	.+2      	; 0x4c38 <SPKR_beep+0x2c>
    4c36:	5f 98       	cbi	0x0b, 7	; 11
    4c38:	08 95       	ret

00004c3a <__SPKR_close>:
    4c3a:	82 30       	cpi	r24, 0x02	; 2
    4c3c:	29 f4       	brne	.+10     	; 0x4c48 <__SPKR_close+0xe>
    4c3e:	80 91 81 00 	lds	r24, 0x0081
    4c42:	8e 7f       	andi	r24, 0xFE	; 254
    4c44:	80 93 81 00 	sts	0x0081, r24
    4c48:	80 91 4e 04 	lds	r24, 0x044E
    4c4c:	81 30       	cpi	r24, 0x01	; 1
    4c4e:	31 f4       	brne	.+12     	; 0x4c5c <__SPKR_close+0x22>
    4c50:	80 91 4f 04 	lds	r24, 0x044F
    4c54:	81 30       	cpi	r24, 0x01	; 1
    4c56:	11 f4       	brne	.+4      	; 0x4c5c <__SPKR_close+0x22>
    4c58:	00 00       	nop
    4c5a:	08 95       	ret
    4c5c:	80 91 4e 04 	lds	r24, 0x044E
    4c60:	81 30       	cpi	r24, 0x01	; 1
    4c62:	21 f0       	breq	.+8      	; 0x4c6c <__SPKR_close+0x32>
    4c64:	80 91 4f 04 	lds	r24, 0x044F
    4c68:	81 30       	cpi	r24, 0x01	; 1
    4c6a:	11 f4       	brne	.+4      	; 0x4c70 <__SPKR_close+0x36>
    4c6c:	5f 98       	cbi	0x0b, 7	; 11
    4c6e:	57 98       	cbi	0x0a, 7	; 10
    4c70:	08 95       	ret

00004c72 <STEPPER_set_decel_step_values>:
    4c72:	ef 92       	push	r14
    4c74:	ff 92       	push	r15
    4c76:	0f 93       	push	r16
    4c78:	1f 93       	push	r17
    4c7a:	cf 93       	push	r28
    4c7c:	df 93       	push	r29
    4c7e:	eb 01       	movw	r28, r22
    4c80:	88 23       	and	r24, r24
    4c82:	21 f0       	breq	.+8      	; 0x4c8c <STEPPER_set_decel_step_values+0x1a>
    4c84:	81 30       	cpi	r24, 0x01	; 1
    4c86:	09 f0       	breq	.+2      	; 0x4c8a <STEPPER_set_decel_step_values+0x18>
    4c88:	5a c0       	rjmp	.+180    	; 0x4d3e <STEPPER_set_decel_step_values+0xcc>
    4c8a:	2d c0       	rjmp	.+90     	; 0x4ce6 <STEPPER_set_decel_step_values+0x74>
    4c8c:	9a 01       	movw	r18, r20
    4c8e:	40 e0       	ldi	r20, 0x00	; 0
    4c90:	50 e0       	ldi	r21, 0x00	; 0
    4c92:	ca 01       	movw	r24, r20
    4c94:	b9 01       	movw	r22, r18
    4c96:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <__mulsi3>
    4c9a:	20 91 b1 06 	lds	r18, 0x06B1
    4c9e:	30 91 b2 06 	lds	r19, 0x06B2
    4ca2:	22 0f       	add	r18, r18
    4ca4:	33 1f       	adc	r19, r19
    4ca6:	40 e0       	ldi	r20, 0x00	; 0
    4ca8:	50 e0       	ldi	r21, 0x00	; 0
    4caa:	0e 94 9d 31 	call	0x633a	; 0x633a <__udivmodsi4>
    4cae:	79 01       	movw	r14, r18
    4cb0:	8a 01       	movw	r16, r20
    4cb2:	a8 01       	movw	r20, r16
    4cb4:	97 01       	movw	r18, r14
    4cb6:	22 0f       	add	r18, r18
    4cb8:	33 1f       	adc	r19, r19
    4cba:	44 1f       	adc	r20, r20
    4cbc:	55 1f       	adc	r21, r21
    4cbe:	ce 01       	movw	r24, r28
    4cc0:	a0 e0       	ldi	r26, 0x00	; 0
    4cc2:	b0 e0       	ldi	r27, 0x00	; 0
    4cc4:	82 17       	cp	r24, r18
    4cc6:	93 07       	cpc	r25, r19
    4cc8:	a4 07       	cpc	r26, r20
    4cca:	b5 07       	cpc	r27, r21
    4ccc:	28 f0       	brcs	.+10     	; 0x4cd8 <STEPPER_set_decel_step_values+0x66>
    4cce:	f0 92 be 06 	sts	0x06BE, r15
    4cd2:	e0 92 bd 06 	sts	0x06BD, r14
    4cd6:	33 c0       	rjmp	.+102    	; 0x4d3e <STEPPER_set_decel_step_values+0xcc>
    4cd8:	d6 95       	lsr	r29
    4cda:	c7 95       	ror	r28
    4cdc:	d0 93 be 06 	sts	0x06BE, r29
    4ce0:	c0 93 bd 06 	sts	0x06BD, r28
    4ce4:	2c c0       	rjmp	.+88     	; 0x4d3e <STEPPER_set_decel_step_values+0xcc>
    4ce6:	9a 01       	movw	r18, r20
    4ce8:	40 e0       	ldi	r20, 0x00	; 0
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	ca 01       	movw	r24, r20
    4cee:	b9 01       	movw	r22, r18
    4cf0:	0e 94 6b 31 	call	0x62d6	; 0x62d6 <__mulsi3>
    4cf4:	20 91 b3 06 	lds	r18, 0x06B3
    4cf8:	30 91 b4 06 	lds	r19, 0x06B4
    4cfc:	22 0f       	add	r18, r18
    4cfe:	33 1f       	adc	r19, r19
    4d00:	40 e0       	ldi	r20, 0x00	; 0
    4d02:	50 e0       	ldi	r21, 0x00	; 0
    4d04:	0e 94 9d 31 	call	0x633a	; 0x633a <__udivmodsi4>
    4d08:	79 01       	movw	r14, r18
    4d0a:	8a 01       	movw	r16, r20
    4d0c:	a8 01       	movw	r20, r16
    4d0e:	97 01       	movw	r18, r14
    4d10:	22 0f       	add	r18, r18
    4d12:	33 1f       	adc	r19, r19
    4d14:	44 1f       	adc	r20, r20
    4d16:	55 1f       	adc	r21, r21
    4d18:	ce 01       	movw	r24, r28
    4d1a:	a0 e0       	ldi	r26, 0x00	; 0
    4d1c:	b0 e0       	ldi	r27, 0x00	; 0
    4d1e:	82 17       	cp	r24, r18
    4d20:	93 07       	cpc	r25, r19
    4d22:	a4 07       	cpc	r26, r20
    4d24:	b5 07       	cpc	r27, r21
    4d26:	28 f0       	brcs	.+10     	; 0x4d32 <STEPPER_set_decel_step_values+0xc0>
    4d28:	f0 92 c0 06 	sts	0x06C0, r15
    4d2c:	e0 92 bf 06 	sts	0x06BF, r14
    4d30:	06 c0       	rjmp	.+12     	; 0x4d3e <STEPPER_set_decel_step_values+0xcc>
    4d32:	d6 95       	lsr	r29
    4d34:	c7 95       	ror	r28
    4d36:	d0 93 c0 06 	sts	0x06C0, r29
    4d3a:	c0 93 bf 06 	sts	0x06BF, r28
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	1f 91       	pop	r17
    4d44:	0f 91       	pop	r16
    4d46:	ff 90       	pop	r15
    4d48:	ef 90       	pop	r14
    4d4a:	08 95       	ret

00004d4c <__TIMER0_COMPA_vect>:
    4d4c:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <TMRSRVC_tick>
    4d50:	0e 94 f6 26 	call	0x4dec	; 0x4dec <STEPPER_clk>
    4d54:	0e 94 cf 26 	call	0x4d9e	; 0x4d9e <SPKR_beep_clk>
    4d58:	08 95       	ret

00004d5a <__TMRSRVC_init>:
    4d5a:	84 b5       	in	r24, 0x24	; 36
    4d5c:	82 60       	ori	r24, 0x02	; 2
    4d5e:	84 bd       	out	0x24, r24	; 36
    4d60:	85 b5       	in	r24, 0x25	; 37
    4d62:	84 60       	ori	r24, 0x04	; 4
    4d64:	85 bd       	out	0x25, r24	; 37
    4d66:	8e e4       	ldi	r24, 0x4E	; 78
    4d68:	87 bd       	out	0x27, r24	; 39
    4d6a:	08 95       	ret

00004d6c <TMRSRVC_tick>:
    4d6c:	88 e0       	ldi	r24, 0x08	; 8
    4d6e:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    4d72:	88 23       	and	r24, r24
    4d74:	11 f4       	brne	.+4      	; 0x4d7a <TMRSRVC_tick+0xe>
    4d76:	84 e0       	ldi	r24, 0x04	; 4
    4d78:	08 95       	ret
    4d7a:	80 91 5f 04 	lds	r24, 0x045F
    4d7e:	88 23       	and	r24, r24
    4d80:	11 f4       	brne	.+4      	; 0x4d86 <TMRSRVC_tick+0x1a>
    4d82:	83 e0       	ldi	r24, 0x03	; 3
    4d84:	08 95       	ret
    4d86:	80 91 5e 04 	lds	r24, 0x045E
    4d8a:	88 23       	and	r24, r24
    4d8c:	11 f0       	breq	.+4      	; 0x4d92 <TMRSRVC_tick+0x26>
    4d8e:	82 e0       	ldi	r24, 0x02	; 2
    4d90:	08 95       	ret
    4d92:	0e 94 43 29 	call	0x5286	; 0x5286 <TMRSRVC_process>
    4d96:	81 30       	cpi	r24, 0x01	; 1
    4d98:	e1 f3       	breq	.-8      	; 0x4d92 <TMRSRVC_tick+0x26>
    4d9a:	80 e0       	ldi	r24, 0x00	; 0
    4d9c:	08 95       	ret

00004d9e <SPKR_beep_clk>:
    4d9e:	80 91 4f 04 	lds	r24, 0x044F
    4da2:	81 30       	cpi	r24, 0x01	; 1
    4da4:	11 f5       	brne	.+68     	; 0x4dea <SPKR_beep_clk+0x4c>
    4da6:	80 91 58 04 	lds	r24, 0x0458
    4daa:	90 91 59 04 	lds	r25, 0x0459
    4dae:	20 91 5a 04 	lds	r18, 0x045A
    4db2:	30 91 5b 04 	lds	r19, 0x045B
    4db6:	28 0f       	add	r18, r24
    4db8:	39 1f       	adc	r19, r25
    4dba:	30 93 59 04 	sts	0x0459, r19
    4dbe:	20 93 58 04 	sts	0x0458, r18
    4dc2:	80 91 58 04 	lds	r24, 0x0458
    4dc6:	90 91 59 04 	lds	r25, 0x0459
    4dca:	88 5e       	subi	r24, 0xE8	; 232
    4dcc:	93 40       	sbci	r25, 0x03	; 3
    4dce:	6c f0       	brlt	.+26     	; 0x4dea <SPKR_beep_clk+0x4c>
    4dd0:	8b b1       	in	r24, 0x0b	; 11
    4dd2:	80 58       	subi	r24, 0x80	; 128
    4dd4:	8b b9       	out	0x0b, r24	; 11
    4dd6:	80 91 58 04 	lds	r24, 0x0458
    4dda:	90 91 59 04 	lds	r25, 0x0459
    4dde:	88 5e       	subi	r24, 0xE8	; 232
    4de0:	93 40       	sbci	r25, 0x03	; 3
    4de2:	90 93 59 04 	sts	0x0459, r25
    4de6:	80 93 58 04 	sts	0x0458, r24
    4dea:	08 95       	ret

00004dec <STEPPER_clk>:
    4dec:	87 e0       	ldi	r24, 0x07	; 7
    4dee:	0e 94 f5 1c 	call	0x39ea	; 0x39ea <SYS_get_state>
    4df2:	81 30       	cpi	r24, 0x01	; 1
    4df4:	09 f0       	breq	.+2      	; 0x4df8 <STEPPER_clk+0xc>
    4df6:	aa c0       	rjmp	.+340    	; 0x4f4c <STEPPER_clk+0x160>
    4df8:	80 91 b1 06 	lds	r24, 0x06B1
    4dfc:	90 91 b2 06 	lds	r25, 0x06B2
    4e00:	89 2b       	or	r24, r25
    4e02:	09 f1       	breq	.+66     	; 0x4e46 <STEPPER_clk+0x5a>
    4e04:	80 91 d5 06 	lds	r24, 0x06D5
    4e08:	90 91 d6 06 	lds	r25, 0x06D6
    4e0c:	20 91 b1 06 	lds	r18, 0x06B1
    4e10:	30 91 b2 06 	lds	r19, 0x06B2
    4e14:	82 0f       	add	r24, r18
    4e16:	93 1f       	adc	r25, r19
    4e18:	90 93 d6 06 	sts	0x06D6, r25
    4e1c:	80 93 d5 06 	sts	0x06D5, r24
    4e20:	80 91 d5 06 	lds	r24, 0x06D5
    4e24:	90 91 d6 06 	lds	r25, 0x06D6
    4e28:	88 5e       	subi	r24, 0xE8	; 232
    4e2a:	93 40       	sbci	r25, 0x03	; 3
    4e2c:	a4 f0       	brlt	.+40     	; 0x4e56 <STEPPER_clk+0x6a>
    4e2e:	80 91 d5 06 	lds	r24, 0x06D5
    4e32:	90 91 d6 06 	lds	r25, 0x06D6
    4e36:	88 5e       	subi	r24, 0xE8	; 232
    4e38:	93 40       	sbci	r25, 0x03	; 3
    4e3a:	90 93 d6 06 	sts	0x06D6, r25
    4e3e:	80 93 d5 06 	sts	0x06D5, r24
    4e42:	41 e0       	ldi	r20, 0x01	; 1
    4e44:	09 c0       	rjmp	.+18     	; 0x4e58 <STEPPER_clk+0x6c>
    4e46:	80 91 a9 06 	lds	r24, 0x06A9
    4e4a:	90 91 aa 06 	lds	r25, 0x06AA
    4e4e:	90 93 ae 06 	sts	0x06AE, r25
    4e52:	80 93 ad 06 	sts	0x06AD, r24
    4e56:	40 e0       	ldi	r20, 0x00	; 0
    4e58:	80 91 b3 06 	lds	r24, 0x06B3
    4e5c:	90 91 b4 06 	lds	r25, 0x06B4
    4e60:	89 2b       	or	r24, r25
    4e62:	09 f1       	breq	.+66     	; 0x4ea6 <STEPPER_clk+0xba>
    4e64:	80 91 d7 06 	lds	r24, 0x06D7
    4e68:	90 91 d8 06 	lds	r25, 0x06D8
    4e6c:	20 91 b3 06 	lds	r18, 0x06B3
    4e70:	30 91 b4 06 	lds	r19, 0x06B4
    4e74:	82 0f       	add	r24, r18
    4e76:	93 1f       	adc	r25, r19
    4e78:	90 93 d8 06 	sts	0x06D8, r25
    4e7c:	80 93 d7 06 	sts	0x06D7, r24
    4e80:	80 91 d7 06 	lds	r24, 0x06D7
    4e84:	90 91 d8 06 	lds	r25, 0x06D8
    4e88:	88 5e       	subi	r24, 0xE8	; 232
    4e8a:	93 40       	sbci	r25, 0x03	; 3
    4e8c:	a4 f0       	brlt	.+40     	; 0x4eb6 <STEPPER_clk+0xca>
    4e8e:	80 91 d7 06 	lds	r24, 0x06D7
    4e92:	90 91 d8 06 	lds	r25, 0x06D8
    4e96:	88 5e       	subi	r24, 0xE8	; 232
    4e98:	93 40       	sbci	r25, 0x03	; 3
    4e9a:	90 93 d8 06 	sts	0x06D8, r25
    4e9e:	80 93 d7 06 	sts	0x06D7, r24
    4ea2:	61 e0       	ldi	r22, 0x01	; 1
    4ea4:	09 c0       	rjmp	.+18     	; 0x4eb8 <STEPPER_clk+0xcc>
    4ea6:	80 91 ab 06 	lds	r24, 0x06AB
    4eaa:	90 91 ac 06 	lds	r25, 0x06AC
    4eae:	90 93 b0 06 	sts	0x06B0, r25
    4eb2:	80 93 af 06 	sts	0x06AF, r24
    4eb6:	60 e0       	ldi	r22, 0x00	; 0
    4eb8:	84 2f       	mov	r24, r20
    4eba:	0e 94 a7 27 	call	0x4f4e	; 0x4f4e <STEPPER_process_accel>
    4ebe:	80 91 d1 06 	lds	r24, 0x06D1
    4ec2:	90 91 d2 06 	lds	r25, 0x06D2
    4ec6:	20 91 ad 06 	lds	r18, 0x06AD
    4eca:	30 91 ae 06 	lds	r19, 0x06AE
    4ece:	28 0f       	add	r18, r24
    4ed0:	39 1f       	adc	r19, r25
    4ed2:	30 93 d2 06 	sts	0x06D2, r19
    4ed6:	20 93 d1 06 	sts	0x06D1, r18
    4eda:	80 91 d1 06 	lds	r24, 0x06D1
    4ede:	90 91 d2 06 	lds	r25, 0x06D2
    4ee2:	88 5e       	subi	r24, 0xE8	; 232
    4ee4:	93 40       	sbci	r25, 0x03	; 3
    4ee6:	14 f4       	brge	.+4      	; 0x4eec <STEPPER_clk+0x100>
    4ee8:	40 e0       	ldi	r20, 0x00	; 0
    4eea:	0b c0       	rjmp	.+22     	; 0x4f02 <STEPPER_clk+0x116>
    4eec:	80 91 d1 06 	lds	r24, 0x06D1
    4ef0:	90 91 d2 06 	lds	r25, 0x06D2
    4ef4:	88 5e       	subi	r24, 0xE8	; 232
    4ef6:	93 40       	sbci	r25, 0x03	; 3
    4ef8:	90 93 d2 06 	sts	0x06D2, r25
    4efc:	80 93 d1 06 	sts	0x06D1, r24
    4f00:	41 e0       	ldi	r20, 0x01	; 1
    4f02:	80 91 d3 06 	lds	r24, 0x06D3
    4f06:	90 91 d4 06 	lds	r25, 0x06D4
    4f0a:	20 91 af 06 	lds	r18, 0x06AF
    4f0e:	30 91 b0 06 	lds	r19, 0x06B0
    4f12:	28 0f       	add	r18, r24
    4f14:	39 1f       	adc	r19, r25
    4f16:	30 93 d4 06 	sts	0x06D4, r19
    4f1a:	20 93 d3 06 	sts	0x06D3, r18
    4f1e:	80 91 d3 06 	lds	r24, 0x06D3
    4f22:	90 91 d4 06 	lds	r25, 0x06D4
    4f26:	88 5e       	subi	r24, 0xE8	; 232
    4f28:	93 40       	sbci	r25, 0x03	; 3
    4f2a:	14 f4       	brge	.+4      	; 0x4f30 <STEPPER_clk+0x144>
    4f2c:	60 e0       	ldi	r22, 0x00	; 0
    4f2e:	0b c0       	rjmp	.+22     	; 0x4f46 <STEPPER_clk+0x15a>
    4f30:	80 91 d3 06 	lds	r24, 0x06D3
    4f34:	90 91 d4 06 	lds	r25, 0x06D4
    4f38:	88 5e       	subi	r24, 0xE8	; 232
    4f3a:	93 40       	sbci	r25, 0x03	; 3
    4f3c:	90 93 d4 06 	sts	0x06D4, r25
    4f40:	80 93 d3 06 	sts	0x06D3, r24
    4f44:	61 e0       	ldi	r22, 0x01	; 1
    4f46:	84 2f       	mov	r24, r20
    4f48:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <STEPPER_process_run_mode>
    4f4c:	08 95       	ret

00004f4e <STEPPER_process_accel>:
    4f4e:	88 23       	and	r24, r24
    4f50:	f1 f0       	breq	.+60     	; 0x4f8e <STEPPER_process_accel+0x40>
    4f52:	20 91 a9 06 	lds	r18, 0x06A9
    4f56:	30 91 aa 06 	lds	r19, 0x06AA
    4f5a:	80 91 ad 06 	lds	r24, 0x06AD
    4f5e:	90 91 ae 06 	lds	r25, 0x06AE
    4f62:	28 1b       	sub	r18, r24
    4f64:	39 0b       	sbc	r19, r25
    4f66:	12 16       	cp	r1, r18
    4f68:	13 06       	cpc	r1, r19
    4f6a:	34 f4       	brge	.+12     	; 0x4f78 <STEPPER_process_accel+0x2a>
    4f6c:	80 91 ad 06 	lds	r24, 0x06AD
    4f70:	90 91 ae 06 	lds	r25, 0x06AE
    4f74:	01 96       	adiw	r24, 0x01	; 1
    4f76:	07 c0       	rjmp	.+14     	; 0x4f86 <STEPPER_process_accel+0x38>
    4f78:	23 2b       	or	r18, r19
    4f7a:	49 f0       	breq	.+18     	; 0x4f8e <STEPPER_process_accel+0x40>
    4f7c:	80 91 ad 06 	lds	r24, 0x06AD
    4f80:	90 91 ae 06 	lds	r25, 0x06AE
    4f84:	01 97       	sbiw	r24, 0x01	; 1
    4f86:	90 93 ae 06 	sts	0x06AE, r25
    4f8a:	80 93 ad 06 	sts	0x06AD, r24
    4f8e:	66 23       	and	r22, r22
    4f90:	11 f1       	breq	.+68     	; 0x4fd6 <STEPPER_process_accel+0x88>
    4f92:	20 91 ab 06 	lds	r18, 0x06AB
    4f96:	30 91 ac 06 	lds	r19, 0x06AC
    4f9a:	80 91 af 06 	lds	r24, 0x06AF
    4f9e:	90 91 b0 06 	lds	r25, 0x06B0
    4fa2:	28 1b       	sub	r18, r24
    4fa4:	39 0b       	sbc	r19, r25
    4fa6:	12 16       	cp	r1, r18
    4fa8:	13 06       	cpc	r1, r19
    4faa:	54 f4       	brge	.+20     	; 0x4fc0 <STEPPER_process_accel+0x72>
    4fac:	80 91 af 06 	lds	r24, 0x06AF
    4fb0:	90 91 b0 06 	lds	r25, 0x06B0
    4fb4:	01 96       	adiw	r24, 0x01	; 1
    4fb6:	90 93 b0 06 	sts	0x06B0, r25
    4fba:	80 93 af 06 	sts	0x06AF, r24
    4fbe:	08 95       	ret
    4fc0:	23 2b       	or	r18, r19
    4fc2:	49 f0       	breq	.+18     	; 0x4fd6 <STEPPER_process_accel+0x88>
    4fc4:	80 91 af 06 	lds	r24, 0x06AF
    4fc8:	90 91 b0 06 	lds	r25, 0x06B0
    4fcc:	01 97       	sbiw	r24, 0x01	; 1
    4fce:	90 93 b0 06 	sts	0x06B0, r25
    4fd2:	80 93 af 06 	sts	0x06AF, r24
    4fd6:	08 95       	ret

00004fd8 <STEPPER_process_run_mode>:
    4fd8:	0f 93       	push	r16
    4fda:	1f 93       	push	r17
    4fdc:	18 2f       	mov	r17, r24
    4fde:	06 2f       	mov	r16, r22
    4fe0:	80 91 dd 06 	lds	r24, 0x06DD
    4fe4:	88 23       	and	r24, r24
    4fe6:	09 f0       	breq	.+2      	; 0x4fea <STEPPER_process_run_mode+0x12>
    4fe8:	e7 c0       	rjmp	.+462    	; 0x51b8 <STEPPER_process_run_mode+0x1e0>
    4fea:	80 91 c5 06 	lds	r24, 0x06C5
    4fee:	88 23       	and	r24, r24
    4ff0:	09 f0       	breq	.+2      	; 0x4ff4 <STEPPER_process_run_mode+0x1c>
    4ff2:	5a c0       	rjmp	.+180    	; 0x50a8 <STEPPER_process_run_mode+0xd0>
    4ff4:	80 91 ad 06 	lds	r24, 0x06AD
    4ff8:	90 91 ae 06 	lds	r25, 0x06AE
    4ffc:	89 2b       	or	r24, r25
    4ffe:	e9 f4       	brne	.+58     	; 0x503a <STEPPER_process_run_mode+0x62>
    5000:	80 91 60 04 	lds	r24, 0x0460
    5004:	83 7e       	andi	r24, 0xE3	; 227
    5006:	80 93 60 04 	sts	0x0460, r24
    500a:	10 92 ce 06 	sts	0x06CE, r1
    500e:	80 91 d9 06 	lds	r24, 0x06D9
    5012:	88 23       	and	r24, r24
    5014:	09 f4       	brne	.+2      	; 0x5018 <STEPPER_process_run_mode+0x40>
    5016:	5d c0       	rjmp	.+186    	; 0x50d2 <STEPPER_process_run_mode+0xfa>
    5018:	60 91 c7 06 	lds	r22, 0x06C7
    501c:	80 e0       	ldi	r24, 0x00	; 0
    501e:	0e 94 82 1c 	call	0x3904	; 0x3904 <STEPPER_stop>
    5022:	e0 91 db 06 	lds	r30, 0x06DB
    5026:	f0 91 dc 06 	lds	r31, 0x06DC
    502a:	30 97       	sbiw	r30, 0x00	; 0
    502c:	09 f4       	brne	.+2      	; 0x5030 <STEPPER_process_run_mode+0x58>
    502e:	51 c0       	rjmp	.+162    	; 0x50d2 <STEPPER_process_run_mode+0xfa>
    5030:	81 e0       	ldi	r24, 0x01	; 1
    5032:	80 83       	st	Z, r24
    5034:	10 92 d9 06 	sts	0x06D9, r1
    5038:	4c c0       	rjmp	.+152    	; 0x50d2 <STEPPER_process_run_mode+0xfa>
    503a:	80 91 a7 06 	lds	r24, 0x06A7
    503e:	81 30       	cpi	r24, 0x01	; 1
    5040:	41 f4       	brne	.+16     	; 0x5052 <STEPPER_process_run_mode+0x7a>
    5042:	80 91 b9 06 	lds	r24, 0x06B9
    5046:	90 91 ba 06 	lds	r25, 0x06BA
    504a:	01 97       	sbiw	r24, 0x01	; 1
    504c:	11 f4       	brne	.+4      	; 0x5052 <STEPPER_process_run_mode+0x7a>
    504e:	11 e0       	ldi	r17, 0x01	; 1
    5050:	02 c0       	rjmp	.+4      	; 0x5056 <STEPPER_process_run_mode+0x7e>
    5052:	11 23       	and	r17, r17
    5054:	f1 f1       	breq	.+124    	; 0x50d2 <STEPPER_process_run_mode+0xfa>
    5056:	e0 91 cc 06 	lds	r30, 0x06CC
    505a:	f0 e0       	ldi	r31, 0x00	; 0
    505c:	e0 57       	subi	r30, 0x70	; 112
    505e:	fc 4f       	sbci	r31, 0xFC	; 252
    5060:	90 91 60 04 	lds	r25, 0x0460
    5064:	93 7e       	andi	r25, 0xE3	; 227
    5066:	80 81       	ld	r24, Z
    5068:	89 2b       	or	r24, r25
    506a:	80 93 60 04 	sts	0x0460, r24
    506e:	80 91 ca 06 	lds	r24, 0x06CA
    5072:	88 23       	and	r24, r24
    5074:	21 f4       	brne	.+8      	; 0x507e <STEPPER_process_run_mode+0xa6>
    5076:	80 91 cc 06 	lds	r24, 0x06CC
    507a:	8f 5f       	subi	r24, 0xFF	; 255
    507c:	03 c0       	rjmp	.+6      	; 0x5084 <STEPPER_process_run_mode+0xac>
    507e:	80 91 cc 06 	lds	r24, 0x06CC
    5082:	81 50       	subi	r24, 0x01	; 1
    5084:	80 93 cc 06 	sts	0x06CC, r24
    5088:	80 91 cc 06 	lds	r24, 0x06CC
    508c:	83 70       	andi	r24, 0x03	; 3
    508e:	80 93 cc 06 	sts	0x06CC, r24
    5092:	81 e0       	ldi	r24, 0x01	; 1
    5094:	80 93 ce 06 	sts	0x06CE, r24
    5098:	80 91 a7 06 	lds	r24, 0x06A7
    509c:	81 30       	cpi	r24, 0x01	; 1
    509e:	c9 f4       	brne	.+50     	; 0x50d2 <STEPPER_process_run_mode+0xfa>
    50a0:	80 e0       	ldi	r24, 0x00	; 0
    50a2:	0e 94 ef 28 	call	0x51de	; 0x51de <STEPPER_process_step_mode>
    50a6:	15 c0       	rjmp	.+42     	; 0x50d2 <STEPPER_process_run_mode+0xfa>
    50a8:	90 91 60 04 	lds	r25, 0x0460
    50ac:	93 7e       	andi	r25, 0xE3	; 227
    50ae:	90 93 60 04 	sts	0x0460, r25
    50b2:	e0 91 cc 06 	lds	r30, 0x06CC
    50b6:	f0 e0       	ldi	r31, 0x00	; 0
    50b8:	e0 57       	subi	r30, 0x70	; 112
    50ba:	fc 4f       	sbci	r31, 0xFC	; 252
    50bc:	80 81       	ld	r24, Z
    50be:	89 2b       	or	r24, r25
    50c0:	80 93 60 04 	sts	0x0460, r24
    50c4:	82 e0       	ldi	r24, 0x02	; 2
    50c6:	80 93 ce 06 	sts	0x06CE, r24
    50ca:	10 92 ae 06 	sts	0x06AE, r1
    50ce:	10 92 ad 06 	sts	0x06AD, r1
    50d2:	80 91 c6 06 	lds	r24, 0x06C6
    50d6:	88 23       	and	r24, r24
    50d8:	09 f0       	breq	.+2      	; 0x50dc <STEPPER_process_run_mode+0x104>
    50da:	59 c0       	rjmp	.+178    	; 0x518e <STEPPER_process_run_mode+0x1b6>
    50dc:	80 91 af 06 	lds	r24, 0x06AF
    50e0:	90 91 b0 06 	lds	r25, 0x06B0
    50e4:	89 2b       	or	r24, r25
    50e6:	e9 f4       	brne	.+58     	; 0x5122 <STEPPER_process_run_mode+0x14a>
    50e8:	80 91 60 04 	lds	r24, 0x0460
    50ec:	8f 71       	andi	r24, 0x1F	; 31
    50ee:	80 93 60 04 	sts	0x0460, r24
    50f2:	10 92 cf 06 	sts	0x06CF, r1
    50f6:	80 91 da 06 	lds	r24, 0x06DA
    50fa:	88 23       	and	r24, r24
    50fc:	09 f4       	brne	.+2      	; 0x5100 <STEPPER_process_run_mode+0x128>
    50fe:	5c c0       	rjmp	.+184    	; 0x51b8 <STEPPER_process_run_mode+0x1e0>
    5100:	60 91 c8 06 	lds	r22, 0x06C8
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	0e 94 82 1c 	call	0x3904	; 0x3904 <STEPPER_stop>
    510a:	e0 91 db 06 	lds	r30, 0x06DB
    510e:	f0 91 dc 06 	lds	r31, 0x06DC
    5112:	30 97       	sbiw	r30, 0x00	; 0
    5114:	09 f4       	brne	.+2      	; 0x5118 <STEPPER_process_run_mode+0x140>
    5116:	50 c0       	rjmp	.+160    	; 0x51b8 <STEPPER_process_run_mode+0x1e0>
    5118:	81 e0       	ldi	r24, 0x01	; 1
    511a:	81 83       	std	Z+1, r24	; 0x01
    511c:	10 92 da 06 	sts	0x06DA, r1
    5120:	4b c0       	rjmp	.+150    	; 0x51b8 <STEPPER_process_run_mode+0x1e0>
    5122:	80 91 a8 06 	lds	r24, 0x06A8
    5126:	81 30       	cpi	r24, 0x01	; 1
    5128:	41 f4       	brne	.+16     	; 0x513a <STEPPER_process_run_mode+0x162>
    512a:	80 91 bb 06 	lds	r24, 0x06BB
    512e:	90 91 bc 06 	lds	r25, 0x06BC
    5132:	01 97       	sbiw	r24, 0x01	; 1
    5134:	11 f4       	brne	.+4      	; 0x513a <STEPPER_process_run_mode+0x162>
    5136:	01 e0       	ldi	r16, 0x01	; 1
    5138:	02 c0       	rjmp	.+4      	; 0x513e <STEPPER_process_run_mode+0x166>
    513a:	00 23       	and	r16, r16
    513c:	e9 f1       	breq	.+122    	; 0x51b8 <STEPPER_process_run_mode+0x1e0>
    513e:	e0 91 cd 06 	lds	r30, 0x06CD
    5142:	f0 e0       	ldi	r31, 0x00	; 0
    5144:	ec 56       	subi	r30, 0x6C	; 108
    5146:	fc 4f       	sbci	r31, 0xFC	; 252
    5148:	90 91 60 04 	lds	r25, 0x0460
    514c:	9f 71       	andi	r25, 0x1F	; 31
    514e:	80 81       	ld	r24, Z
    5150:	89 2b       	or	r24, r25
    5152:	80 93 60 04 	sts	0x0460, r24
    5156:	80 91 cb 06 	lds	r24, 0x06CB
    515a:	88 23       	and	r24, r24
    515c:	21 f4       	brne	.+8      	; 0x5166 <STEPPER_process_run_mode+0x18e>
    515e:	80 91 cd 06 	lds	r24, 0x06CD
    5162:	8f 5f       	subi	r24, 0xFF	; 255
    5164:	03 c0       	rjmp	.+6      	; 0x516c <STEPPER_process_run_mode+0x194>
    5166:	80 91 cd 06 	lds	r24, 0x06CD
    516a:	81 50       	subi	r24, 0x01	; 1
    516c:	80 93 cd 06 	sts	0x06CD, r24
    5170:	80 91 cd 06 	lds	r24, 0x06CD
    5174:	83 70       	andi	r24, 0x03	; 3
    5176:	80 93 cd 06 	sts	0x06CD, r24
    517a:	81 e0       	ldi	r24, 0x01	; 1
    517c:	80 93 cf 06 	sts	0x06CF, r24
    5180:	80 91 a8 06 	lds	r24, 0x06A8
    5184:	81 30       	cpi	r24, 0x01	; 1
    5186:	c1 f4       	brne	.+48     	; 0x51b8 <STEPPER_process_run_mode+0x1e0>
    5188:	0e 94 ef 28 	call	0x51de	; 0x51de <STEPPER_process_step_mode>
    518c:	15 c0       	rjmp	.+42     	; 0x51b8 <STEPPER_process_run_mode+0x1e0>
    518e:	90 91 60 04 	lds	r25, 0x0460
    5192:	9f 71       	andi	r25, 0x1F	; 31
    5194:	90 93 60 04 	sts	0x0460, r25
    5198:	e0 91 cd 06 	lds	r30, 0x06CD
    519c:	f0 e0       	ldi	r31, 0x00	; 0
    519e:	ec 56       	subi	r30, 0x6C	; 108
    51a0:	fc 4f       	sbci	r31, 0xFC	; 252
    51a2:	80 81       	ld	r24, Z
    51a4:	89 2b       	or	r24, r25
    51a6:	80 93 60 04 	sts	0x0460, r24
    51aa:	82 e0       	ldi	r24, 0x02	; 2
    51ac:	80 93 cf 06 	sts	0x06CF, r24
    51b0:	10 92 b0 06 	sts	0x06B0, r1
    51b4:	10 92 af 06 	sts	0x06AF, r1
    51b8:	80 91 d0 06 	lds	r24, 0x06D0
    51bc:	88 23       	and	r24, r24
    51be:	31 f4       	brne	.+12     	; 0x51cc <STEPPER_process_run_mode+0x1f4>
    51c0:	80 e6       	ldi	r24, 0x60	; 96
    51c2:	94 e0       	ldi	r25, 0x04	; 4
    51c4:	61 2f       	mov	r22, r17
    51c6:	40 2f       	mov	r20, r16
    51c8:	0e 94 b1 29 	call	0x5362	; 0x5362 <STEPPER_process_pwm>
    51cc:	88 b1       	in	r24, 0x08	; 8
    51ce:	83 70       	andi	r24, 0x03	; 3
    51d0:	90 91 60 04 	lds	r25, 0x0460
    51d4:	89 2b       	or	r24, r25
    51d6:	88 b9       	out	0x08, r24	; 8
    51d8:	1f 91       	pop	r17
    51da:	0f 91       	pop	r16
    51dc:	08 95       	ret

000051de <STEPPER_process_step_mode>:
    51de:	88 23       	and	r24, r24
    51e0:	21 f0       	breq	.+8      	; 0x51ea <STEPPER_process_step_mode+0xc>
    51e2:	81 30       	cpi	r24, 0x01	; 1
    51e4:	09 f0       	breq	.+2      	; 0x51e8 <STEPPER_process_step_mode+0xa>
    51e6:	4e c0       	rjmp	.+156    	; 0x5284 <STEPPER_process_step_mode+0xa6>
    51e8:	27 c0       	rjmp	.+78     	; 0x5238 <STEPPER_process_step_mode+0x5a>
    51ea:	80 91 b9 06 	lds	r24, 0x06B9
    51ee:	90 91 ba 06 	lds	r25, 0x06BA
    51f2:	89 2b       	or	r24, r25
    51f4:	49 f0       	breq	.+18     	; 0x5208 <STEPPER_process_step_mode+0x2a>
    51f6:	80 91 b9 06 	lds	r24, 0x06B9
    51fa:	90 91 ba 06 	lds	r25, 0x06BA
    51fe:	01 97       	sbiw	r24, 0x01	; 1
    5200:	90 93 ba 06 	sts	0x06BA, r25
    5204:	80 93 b9 06 	sts	0x06B9, r24
    5208:	80 91 d9 06 	lds	r24, 0x06D9
    520c:	88 23       	and	r24, r24
    520e:	d1 f5       	brne	.+116    	; 0x5284 <STEPPER_process_step_mode+0xa6>
    5210:	20 91 b9 06 	lds	r18, 0x06B9
    5214:	30 91 ba 06 	lds	r19, 0x06BA
    5218:	80 91 bd 06 	lds	r24, 0x06BD
    521c:	90 91 be 06 	lds	r25, 0x06BE
    5220:	28 17       	cp	r18, r24
    5222:	39 07       	cpc	r19, r25
    5224:	79 f5       	brne	.+94     	; 0x5284 <STEPPER_process_step_mode+0xa6>
    5226:	80 e0       	ldi	r24, 0x00	; 0
    5228:	60 e0       	ldi	r22, 0x00	; 0
    522a:	70 e0       	ldi	r23, 0x00	; 0
    522c:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <STEPPER_set_speed>
    5230:	81 e0       	ldi	r24, 0x01	; 1
    5232:	80 93 d9 06 	sts	0x06D9, r24
    5236:	08 95       	ret
    5238:	80 91 bb 06 	lds	r24, 0x06BB
    523c:	90 91 bc 06 	lds	r25, 0x06BC
    5240:	89 2b       	or	r24, r25
    5242:	49 f0       	breq	.+18     	; 0x5256 <STEPPER_process_step_mode+0x78>
    5244:	80 91 bb 06 	lds	r24, 0x06BB
    5248:	90 91 bc 06 	lds	r25, 0x06BC
    524c:	01 97       	sbiw	r24, 0x01	; 1
    524e:	90 93 bc 06 	sts	0x06BC, r25
    5252:	80 93 bb 06 	sts	0x06BB, r24
    5256:	80 91 da 06 	lds	r24, 0x06DA
    525a:	88 23       	and	r24, r24
    525c:	99 f4       	brne	.+38     	; 0x5284 <STEPPER_process_step_mode+0xa6>
    525e:	20 91 bb 06 	lds	r18, 0x06BB
    5262:	30 91 bc 06 	lds	r19, 0x06BC
    5266:	80 91 bf 06 	lds	r24, 0x06BF
    526a:	90 91 c0 06 	lds	r25, 0x06C0
    526e:	28 17       	cp	r18, r24
    5270:	39 07       	cpc	r19, r25
    5272:	41 f4       	brne	.+16     	; 0x5284 <STEPPER_process_step_mode+0xa6>
    5274:	81 e0       	ldi	r24, 0x01	; 1
    5276:	60 e0       	ldi	r22, 0x00	; 0
    5278:	70 e0       	ldi	r23, 0x00	; 0
    527a:	0e 94 d4 1b 	call	0x37a8	; 0x37a8 <STEPPER_set_speed>
    527e:	81 e0       	ldi	r24, 0x01	; 1
    5280:	80 93 da 06 	sts	0x06DA, r24
    5284:	08 95       	ret

00005286 <TMRSRVC_process>:
    5286:	ff 92       	push	r15
    5288:	0f 93       	push	r16
    528a:	1f 93       	push	r17
    528c:	cf 93       	push	r28
    528e:	df 93       	push	r29
    5290:	80 91 17 07 	lds	r24, 0x0717
    5294:	88 23       	and	r24, r24
    5296:	09 f4       	brne	.+2      	; 0x529a <TMRSRVC_process+0x14>
    5298:	59 c0       	rjmp	.+178    	; 0x534c <TMRSRVC_process+0xc6>
    529a:	00 91 18 07 	lds	r16, 0x0718
    529e:	10 91 19 07 	lds	r17, 0x0719
    52a2:	f8 01       	movw	r30, r16
    52a4:	c0 81       	ld	r28, Z
    52a6:	d1 81       	ldd	r29, Z+1	; 0x01
    52a8:	8c 81       	ldd	r24, Y+4	; 0x04
    52aa:	9d 81       	ldd	r25, Y+5	; 0x05
    52ac:	01 97       	sbiw	r24, 0x01	; 1
    52ae:	9d 83       	std	Y+5, r25	; 0x05
    52b0:	8c 83       	std	Y+4, r24	; 0x04
    52b2:	18 16       	cp	r1, r24
    52b4:	19 06       	cpc	r1, r25
    52b6:	0c f4       	brge	.+2      	; 0x52ba <TMRSRVC_process+0x34>
    52b8:	49 c0       	rjmp	.+146    	; 0x534c <TMRSRVC_process+0xc6>
    52ba:	89 81       	ldd	r24, Y+1	; 0x01
    52bc:	80 ff       	sbrs	r24, 0
    52be:	05 c0       	rjmp	.+10     	; 0x52ca <TMRSRVC_process+0x44>
    52c0:	8e 81       	ldd	r24, Y+6	; 0x06
    52c2:	88 23       	and	r24, r24
    52c4:	11 f4       	brne	.+4      	; 0x52ca <TMRSRVC_process+0x44>
    52c6:	81 e0       	ldi	r24, 0x01	; 1
    52c8:	8e 83       	std	Y+6, r24	; 0x06
    52ca:	89 81       	ldd	r24, Y+1	; 0x01
    52cc:	81 ff       	sbrs	r24, 1
    52ce:	03 c0       	rjmp	.+6      	; 0x52d6 <TMRSRVC_process+0x50>
    52d0:	ef 81       	ldd	r30, Y+7	; 0x07
    52d2:	f8 85       	ldd	r31, Y+8	; 0x08
    52d4:	09 95       	icall
    52d6:	80 91 17 07 	lds	r24, 0x0717
    52da:	82 30       	cpi	r24, 0x02	; 2
    52dc:	a8 f0       	brcs	.+42     	; 0x5308 <TMRSRVC_process+0x82>
    52de:	f8 01       	movw	r30, r16
    52e0:	82 81       	ldd	r24, Z+2	; 0x02
    52e2:	93 81       	ldd	r25, Z+3	; 0x03
    52e4:	90 93 19 07 	sts	0x0719, r25
    52e8:	80 93 18 07 	sts	0x0718, r24
    52ec:	13 82       	std	Z+3, r1	; 0x03
    52ee:	12 82       	std	Z+2, r1	; 0x02
    52f0:	e0 91 00 00 	lds	r30, 0x0000
    52f4:	f0 91 01 00 	lds	r31, 0x0001
    52f8:	84 81       	ldd	r24, Z+4	; 0x04
    52fa:	95 81       	ldd	r25, Z+5	; 0x05
    52fc:	18 16       	cp	r1, r24
    52fe:	19 06       	cpc	r1, r25
    5300:	3c f0       	brlt	.+14     	; 0x5310 <TMRSRVC_process+0x8a>
    5302:	ff 24       	eor	r15, r15
    5304:	f3 94       	inc	r15
    5306:	05 c0       	rjmp	.+10     	; 0x5312 <TMRSRVC_process+0x8c>
    5308:	10 92 19 07 	sts	0x0719, r1
    530c:	10 92 18 07 	sts	0x0718, r1
    5310:	ff 24       	eor	r15, r15
    5312:	80 91 17 07 	lds	r24, 0x0717
    5316:	81 50       	subi	r24, 0x01	; 1
    5318:	80 93 17 07 	sts	0x0717, r24
    531c:	80 91 17 07 	lds	r24, 0x0717
    5320:	88 23       	and	r24, r24
    5322:	11 f4       	brne	.+4      	; 0x5328 <TMRSRVC_process+0xa2>
    5324:	0e 94 ae 29 	call	0x535c	; 0x535c <TMRSRVC_stop>
    5328:	89 81       	ldd	r24, Y+1	; 0x01
    532a:	82 ff       	sbrs	r24, 2
    532c:	08 c0       	rjmp	.+16     	; 0x533e <TMRSRVC_process+0xb8>
    532e:	8a 81       	ldd	r24, Y+2	; 0x02
    5330:	9b 81       	ldd	r25, Y+3	; 0x03
    5332:	9d 83       	std	Y+5, r25	; 0x05
    5334:	8c 83       	std	Y+4, r24	; 0x04
    5336:	c8 01       	movw	r24, r16
    5338:	0e 94 23 25 	call	0x4a46	; 0x4a46 <TMRSRVC_insert>
    533c:	08 c0       	rjmp	.+16     	; 0x534e <TMRSRVC_process+0xc8>
    533e:	c8 01       	movw	r24, r16
    5340:	0e 94 b7 32 	call	0x656e	; 0x656e <free>
    5344:	89 81       	ldd	r24, Y+1	; 0x01
    5346:	8f 7e       	andi	r24, 0xEF	; 239
    5348:	89 83       	std	Y+1, r24	; 0x01
    534a:	01 c0       	rjmp	.+2      	; 0x534e <TMRSRVC_process+0xc8>
    534c:	ff 24       	eor	r15, r15
    534e:	8f 2d       	mov	r24, r15
    5350:	df 91       	pop	r29
    5352:	cf 91       	pop	r28
    5354:	1f 91       	pop	r17
    5356:	0f 91       	pop	r16
    5358:	ff 90       	pop	r15
    535a:	08 95       	ret

0000535c <TMRSRVC_stop>:
    535c:	10 92 5f 04 	sts	0x045F, r1
    5360:	08 95       	ret

00005362 <STEPPER_process_pwm>:
    5362:	fc 01       	movw	r30, r24
    5364:	80 91 ce 06 	lds	r24, 0x06CE
    5368:	82 30       	cpi	r24, 0x02	; 2
    536a:	69 f4       	brne	.+26     	; 0x5386 <STEPPER_process_pwm+0x24>
    536c:	80 91 64 04 	lds	r24, 0x0464
    5370:	91 e0       	ldi	r25, 0x01	; 1
    5372:	89 27       	eor	r24, r25
    5374:	80 93 64 04 	sts	0x0464, r24
    5378:	88 23       	and	r24, r24
    537a:	09 f0       	breq	.+2      	; 0x537e <STEPPER_process_pwm+0x1c>
    537c:	3e c0       	rjmp	.+124    	; 0x53fa <STEPPER_process_pwm+0x98>
    537e:	80 81       	ld	r24, Z
    5380:	83 7e       	andi	r24, 0xE3	; 227
    5382:	80 83       	st	Z, r24
    5384:	3a c0       	rjmp	.+116    	; 0x53fa <STEPPER_process_pwm+0x98>
    5386:	80 91 ad 06 	lds	r24, 0x06AD
    538a:	90 91 ae 06 	lds	r25, 0x06AE
    538e:	c3 97       	sbiw	r24, 0x33	; 51
    5390:	a4 f5       	brge	.+104    	; 0x53fa <STEPPER_process_pwm+0x98>
    5392:	66 23       	and	r22, r22
    5394:	d1 f0       	breq	.+52     	; 0x53ca <STEPPER_process_pwm+0x68>
    5396:	20 91 ad 06 	lds	r18, 0x06AD
    539a:	30 91 ae 06 	lds	r19, 0x06AE
    539e:	80 e6       	ldi	r24, 0x60	; 96
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	bc 01       	movw	r22, r24
    53a4:	26 9f       	mul	r18, r22
    53a6:	c0 01       	movw	r24, r0
    53a8:	27 9f       	mul	r18, r23
    53aa:	90 0d       	add	r25, r0
    53ac:	36 9f       	mul	r19, r22
    53ae:	90 0d       	add	r25, r0
    53b0:	11 24       	eor	r1, r1
    53b2:	88 0f       	add	r24, r24
    53b4:	89 2f       	mov	r24, r25
    53b6:	88 1f       	adc	r24, r24
    53b8:	99 0b       	sbc	r25, r25
    53ba:	90 93 c2 06 	sts	0x06C2, r25
    53be:	80 93 c1 06 	sts	0x06C1, r24
    53c2:	81 e0       	ldi	r24, 0x01	; 1
    53c4:	80 93 62 04 	sts	0x0462, r24
    53c8:	18 c0       	rjmp	.+48     	; 0x53fa <STEPPER_process_pwm+0x98>
    53ca:	80 91 62 04 	lds	r24, 0x0462
    53ce:	88 23       	and	r24, r24
    53d0:	a1 f0       	breq	.+40     	; 0x53fa <STEPPER_process_pwm+0x98>
    53d2:	80 91 c1 06 	lds	r24, 0x06C1
    53d6:	90 91 c2 06 	lds	r25, 0x06C2
    53da:	01 97       	sbiw	r24, 0x01	; 1
    53dc:	90 93 c2 06 	sts	0x06C2, r25
    53e0:	80 93 c1 06 	sts	0x06C1, r24
    53e4:	80 91 c1 06 	lds	r24, 0x06C1
    53e8:	90 91 c2 06 	lds	r25, 0x06C2
    53ec:	89 2b       	or	r24, r25
    53ee:	29 f4       	brne	.+10     	; 0x53fa <STEPPER_process_pwm+0x98>
    53f0:	80 81       	ld	r24, Z
    53f2:	83 7e       	andi	r24, 0xE3	; 227
    53f4:	80 83       	st	Z, r24
    53f6:	10 92 62 04 	sts	0x0462, r1
    53fa:	80 91 cf 06 	lds	r24, 0x06CF
    53fe:	82 30       	cpi	r24, 0x02	; 2
    5400:	69 f4       	brne	.+26     	; 0x541c <STEPPER_process_pwm+0xba>
    5402:	80 91 63 04 	lds	r24, 0x0463
    5406:	91 e0       	ldi	r25, 0x01	; 1
    5408:	89 27       	eor	r24, r25
    540a:	80 93 63 04 	sts	0x0463, r24
    540e:	88 23       	and	r24, r24
    5410:	09 f0       	breq	.+2      	; 0x5414 <STEPPER_process_pwm+0xb2>
    5412:	3e c0       	rjmp	.+124    	; 0x5490 <STEPPER_process_pwm+0x12e>
    5414:	80 81       	ld	r24, Z
    5416:	8f 71       	andi	r24, 0x1F	; 31
    5418:	80 83       	st	Z, r24
    541a:	08 95       	ret
    541c:	80 91 af 06 	lds	r24, 0x06AF
    5420:	90 91 b0 06 	lds	r25, 0x06B0
    5424:	c3 97       	sbiw	r24, 0x33	; 51
    5426:	a4 f5       	brge	.+104    	; 0x5490 <STEPPER_process_pwm+0x12e>
    5428:	44 23       	and	r20, r20
    542a:	d1 f0       	breq	.+52     	; 0x5460 <STEPPER_process_pwm+0xfe>
    542c:	20 91 af 06 	lds	r18, 0x06AF
    5430:	30 91 b0 06 	lds	r19, 0x06B0
    5434:	80 e6       	ldi	r24, 0x60	; 96
    5436:	90 e0       	ldi	r25, 0x00	; 0
    5438:	ac 01       	movw	r20, r24
    543a:	24 9f       	mul	r18, r20
    543c:	c0 01       	movw	r24, r0
    543e:	25 9f       	mul	r18, r21
    5440:	90 0d       	add	r25, r0
    5442:	34 9f       	mul	r19, r20
    5444:	90 0d       	add	r25, r0
    5446:	11 24       	eor	r1, r1
    5448:	88 0f       	add	r24, r24
    544a:	89 2f       	mov	r24, r25
    544c:	88 1f       	adc	r24, r24
    544e:	99 0b       	sbc	r25, r25
    5450:	90 93 c4 06 	sts	0x06C4, r25
    5454:	80 93 c3 06 	sts	0x06C3, r24
    5458:	81 e0       	ldi	r24, 0x01	; 1
    545a:	80 93 61 04 	sts	0x0461, r24
    545e:	08 95       	ret
    5460:	80 91 61 04 	lds	r24, 0x0461
    5464:	88 23       	and	r24, r24
    5466:	a1 f0       	breq	.+40     	; 0x5490 <STEPPER_process_pwm+0x12e>
    5468:	80 91 c3 06 	lds	r24, 0x06C3
    546c:	90 91 c4 06 	lds	r25, 0x06C4
    5470:	01 97       	sbiw	r24, 0x01	; 1
    5472:	90 93 c4 06 	sts	0x06C4, r25
    5476:	80 93 c3 06 	sts	0x06C3, r24
    547a:	80 91 c3 06 	lds	r24, 0x06C3
    547e:	90 91 c4 06 	lds	r25, 0x06C4
    5482:	89 2b       	or	r24, r25
    5484:	29 f4       	brne	.+10     	; 0x5490 <STEPPER_process_pwm+0x12e>
    5486:	80 81       	ld	r24, Z
    5488:	8f 71       	andi	r24, 0x1F	; 31
    548a:	80 83       	st	Z, r24
    548c:	10 92 61 04 	sts	0x0461, r1
    5490:	08 95       	ret

00005492 <__subsf3>:
    5492:	50 58       	subi	r21, 0x80	; 128

00005494 <__addsf3>:
    5494:	bb 27       	eor	r27, r27
    5496:	aa 27       	eor	r26, r26
    5498:	0e d0       	rcall	.+28     	; 0x54b6 <__addsf3x>
    549a:	75 c1       	rjmp	.+746    	; 0x5786 <__fp_round>
    549c:	66 d1       	rcall	.+716    	; 0x576a <__fp_pscA>
    549e:	30 f0       	brcs	.+12     	; 0x54ac <__addsf3+0x18>
    54a0:	6b d1       	rcall	.+726    	; 0x5778 <__fp_pscB>
    54a2:	20 f0       	brcs	.+8      	; 0x54ac <__addsf3+0x18>
    54a4:	31 f4       	brne	.+12     	; 0x54b2 <__addsf3+0x1e>
    54a6:	9f 3f       	cpi	r25, 0xFF	; 255
    54a8:	11 f4       	brne	.+4      	; 0x54ae <__addsf3+0x1a>
    54aa:	1e f4       	brtc	.+6      	; 0x54b2 <__addsf3+0x1e>
    54ac:	5b c1       	rjmp	.+694    	; 0x5764 <__fp_nan>
    54ae:	0e f4       	brtc	.+2      	; 0x54b2 <__addsf3+0x1e>
    54b0:	e0 95       	com	r30
    54b2:	e7 fb       	bst	r30, 7
    54b4:	51 c1       	rjmp	.+674    	; 0x5758 <__fp_inf>

000054b6 <__addsf3x>:
    54b6:	e9 2f       	mov	r30, r25
    54b8:	77 d1       	rcall	.+750    	; 0x57a8 <__fp_split3>
    54ba:	80 f3       	brcs	.-32     	; 0x549c <__addsf3+0x8>
    54bc:	ba 17       	cp	r27, r26
    54be:	62 07       	cpc	r22, r18
    54c0:	73 07       	cpc	r23, r19
    54c2:	84 07       	cpc	r24, r20
    54c4:	95 07       	cpc	r25, r21
    54c6:	18 f0       	brcs	.+6      	; 0x54ce <__addsf3x+0x18>
    54c8:	71 f4       	brne	.+28     	; 0x54e6 <__addsf3x+0x30>
    54ca:	9e f5       	brtc	.+102    	; 0x5532 <__addsf3x+0x7c>
    54cc:	8f c1       	rjmp	.+798    	; 0x57ec <__fp_zero>
    54ce:	0e f4       	brtc	.+2      	; 0x54d2 <__addsf3x+0x1c>
    54d0:	e0 95       	com	r30
    54d2:	0b 2e       	mov	r0, r27
    54d4:	ba 2f       	mov	r27, r26
    54d6:	a0 2d       	mov	r26, r0
    54d8:	0b 01       	movw	r0, r22
    54da:	b9 01       	movw	r22, r18
    54dc:	90 01       	movw	r18, r0
    54de:	0c 01       	movw	r0, r24
    54e0:	ca 01       	movw	r24, r20
    54e2:	a0 01       	movw	r20, r0
    54e4:	11 24       	eor	r1, r1
    54e6:	ff 27       	eor	r31, r31
    54e8:	59 1b       	sub	r21, r25
    54ea:	99 f0       	breq	.+38     	; 0x5512 <__addsf3x+0x5c>
    54ec:	59 3f       	cpi	r21, 0xF9	; 249
    54ee:	50 f4       	brcc	.+20     	; 0x5504 <__addsf3x+0x4e>
    54f0:	50 3e       	cpi	r21, 0xE0	; 224
    54f2:	68 f1       	brcs	.+90     	; 0x554e <__addsf3x+0x98>
    54f4:	1a 16       	cp	r1, r26
    54f6:	f0 40       	sbci	r31, 0x00	; 0
    54f8:	a2 2f       	mov	r26, r18
    54fa:	23 2f       	mov	r18, r19
    54fc:	34 2f       	mov	r19, r20
    54fe:	44 27       	eor	r20, r20
    5500:	58 5f       	subi	r21, 0xF8	; 248
    5502:	f3 cf       	rjmp	.-26     	; 0x54ea <__addsf3x+0x34>
    5504:	46 95       	lsr	r20
    5506:	37 95       	ror	r19
    5508:	27 95       	ror	r18
    550a:	a7 95       	ror	r26
    550c:	f0 40       	sbci	r31, 0x00	; 0
    550e:	53 95       	inc	r21
    5510:	c9 f7       	brne	.-14     	; 0x5504 <__addsf3x+0x4e>
    5512:	7e f4       	brtc	.+30     	; 0x5532 <__addsf3x+0x7c>
    5514:	1f 16       	cp	r1, r31
    5516:	ba 0b       	sbc	r27, r26
    5518:	62 0b       	sbc	r22, r18
    551a:	73 0b       	sbc	r23, r19
    551c:	84 0b       	sbc	r24, r20
    551e:	ba f0       	brmi	.+46     	; 0x554e <__addsf3x+0x98>
    5520:	91 50       	subi	r25, 0x01	; 1
    5522:	a1 f0       	breq	.+40     	; 0x554c <__addsf3x+0x96>
    5524:	ff 0f       	add	r31, r31
    5526:	bb 1f       	adc	r27, r27
    5528:	66 1f       	adc	r22, r22
    552a:	77 1f       	adc	r23, r23
    552c:	88 1f       	adc	r24, r24
    552e:	c2 f7       	brpl	.-16     	; 0x5520 <__addsf3x+0x6a>
    5530:	0e c0       	rjmp	.+28     	; 0x554e <__addsf3x+0x98>
    5532:	ba 0f       	add	r27, r26
    5534:	62 1f       	adc	r22, r18
    5536:	73 1f       	adc	r23, r19
    5538:	84 1f       	adc	r24, r20
    553a:	48 f4       	brcc	.+18     	; 0x554e <__addsf3x+0x98>
    553c:	87 95       	ror	r24
    553e:	77 95       	ror	r23
    5540:	67 95       	ror	r22
    5542:	b7 95       	ror	r27
    5544:	f7 95       	ror	r31
    5546:	9e 3f       	cpi	r25, 0xFE	; 254
    5548:	08 f0       	brcs	.+2      	; 0x554c <__addsf3x+0x96>
    554a:	b3 cf       	rjmp	.-154    	; 0x54b2 <__addsf3+0x1e>
    554c:	93 95       	inc	r25
    554e:	88 0f       	add	r24, r24
    5550:	08 f0       	brcs	.+2      	; 0x5554 <__addsf3x+0x9e>
    5552:	99 27       	eor	r25, r25
    5554:	ee 0f       	add	r30, r30
    5556:	97 95       	ror	r25
    5558:	87 95       	ror	r24
    555a:	08 95       	ret

0000555c <__cmpsf2>:
    555c:	d9 d0       	rcall	.+434    	; 0x5710 <__fp_cmp>
    555e:	08 f4       	brcc	.+2      	; 0x5562 <__cmpsf2+0x6>
    5560:	81 e0       	ldi	r24, 0x01	; 1
    5562:	08 95       	ret

00005564 <__divsf3>:
    5564:	0c d0       	rcall	.+24     	; 0x557e <__divsf3x>
    5566:	0f c1       	rjmp	.+542    	; 0x5786 <__fp_round>
    5568:	07 d1       	rcall	.+526    	; 0x5778 <__fp_pscB>
    556a:	40 f0       	brcs	.+16     	; 0x557c <__divsf3+0x18>
    556c:	fe d0       	rcall	.+508    	; 0x576a <__fp_pscA>
    556e:	30 f0       	brcs	.+12     	; 0x557c <__divsf3+0x18>
    5570:	21 f4       	brne	.+8      	; 0x557a <__divsf3+0x16>
    5572:	5f 3f       	cpi	r21, 0xFF	; 255
    5574:	19 f0       	breq	.+6      	; 0x557c <__divsf3+0x18>
    5576:	f0 c0       	rjmp	.+480    	; 0x5758 <__fp_inf>
    5578:	51 11       	cpse	r21, r1
    557a:	39 c1       	rjmp	.+626    	; 0x57ee <__fp_szero>
    557c:	f3 c0       	rjmp	.+486    	; 0x5764 <__fp_nan>

0000557e <__divsf3x>:
    557e:	14 d1       	rcall	.+552    	; 0x57a8 <__fp_split3>
    5580:	98 f3       	brcs	.-26     	; 0x5568 <__divsf3+0x4>

00005582 <__divsf3_pse>:
    5582:	99 23       	and	r25, r25
    5584:	c9 f3       	breq	.-14     	; 0x5578 <__divsf3+0x14>
    5586:	55 23       	and	r21, r21
    5588:	b1 f3       	breq	.-20     	; 0x5576 <__divsf3+0x12>
    558a:	95 1b       	sub	r25, r21
    558c:	55 0b       	sbc	r21, r21
    558e:	bb 27       	eor	r27, r27
    5590:	aa 27       	eor	r26, r26
    5592:	62 17       	cp	r22, r18
    5594:	73 07       	cpc	r23, r19
    5596:	84 07       	cpc	r24, r20
    5598:	38 f0       	brcs	.+14     	; 0x55a8 <__divsf3_pse+0x26>
    559a:	9f 5f       	subi	r25, 0xFF	; 255
    559c:	5f 4f       	sbci	r21, 0xFF	; 255
    559e:	22 0f       	add	r18, r18
    55a0:	33 1f       	adc	r19, r19
    55a2:	44 1f       	adc	r20, r20
    55a4:	aa 1f       	adc	r26, r26
    55a6:	a9 f3       	breq	.-22     	; 0x5592 <__divsf3_pse+0x10>
    55a8:	33 d0       	rcall	.+102    	; 0x5610 <__divsf3_pse+0x8e>
    55aa:	0e 2e       	mov	r0, r30
    55ac:	3a f0       	brmi	.+14     	; 0x55bc <__divsf3_pse+0x3a>
    55ae:	e0 e8       	ldi	r30, 0x80	; 128
    55b0:	30 d0       	rcall	.+96     	; 0x5612 <__divsf3_pse+0x90>
    55b2:	91 50       	subi	r25, 0x01	; 1
    55b4:	50 40       	sbci	r21, 0x00	; 0
    55b6:	e6 95       	lsr	r30
    55b8:	00 1c       	adc	r0, r0
    55ba:	ca f7       	brpl	.-14     	; 0x55ae <__divsf3_pse+0x2c>
    55bc:	29 d0       	rcall	.+82     	; 0x5610 <__divsf3_pse+0x8e>
    55be:	fe 2f       	mov	r31, r30
    55c0:	27 d0       	rcall	.+78     	; 0x5610 <__divsf3_pse+0x8e>
    55c2:	66 0f       	add	r22, r22
    55c4:	77 1f       	adc	r23, r23
    55c6:	88 1f       	adc	r24, r24
    55c8:	bb 1f       	adc	r27, r27
    55ca:	26 17       	cp	r18, r22
    55cc:	37 07       	cpc	r19, r23
    55ce:	48 07       	cpc	r20, r24
    55d0:	ab 07       	cpc	r26, r27
    55d2:	b0 e8       	ldi	r27, 0x80	; 128
    55d4:	09 f0       	breq	.+2      	; 0x55d8 <__divsf3_pse+0x56>
    55d6:	bb 0b       	sbc	r27, r27
    55d8:	80 2d       	mov	r24, r0
    55da:	bf 01       	movw	r22, r30
    55dc:	ff 27       	eor	r31, r31
    55de:	93 58       	subi	r25, 0x83	; 131
    55e0:	5f 4f       	sbci	r21, 0xFF	; 255
    55e2:	2a f0       	brmi	.+10     	; 0x55ee <__divsf3_pse+0x6c>
    55e4:	9e 3f       	cpi	r25, 0xFE	; 254
    55e6:	51 05       	cpc	r21, r1
    55e8:	68 f0       	brcs	.+26     	; 0x5604 <__divsf3_pse+0x82>
    55ea:	b6 c0       	rjmp	.+364    	; 0x5758 <__fp_inf>
    55ec:	00 c1       	rjmp	.+512    	; 0x57ee <__fp_szero>
    55ee:	5f 3f       	cpi	r21, 0xFF	; 255
    55f0:	ec f3       	brlt	.-6      	; 0x55ec <__divsf3_pse+0x6a>
    55f2:	98 3e       	cpi	r25, 0xE8	; 232
    55f4:	dc f3       	brlt	.-10     	; 0x55ec <__divsf3_pse+0x6a>
    55f6:	86 95       	lsr	r24
    55f8:	77 95       	ror	r23
    55fa:	67 95       	ror	r22
    55fc:	b7 95       	ror	r27
    55fe:	f7 95       	ror	r31
    5600:	9f 5f       	subi	r25, 0xFF	; 255
    5602:	c9 f7       	brne	.-14     	; 0x55f6 <__divsf3_pse+0x74>
    5604:	88 0f       	add	r24, r24
    5606:	91 1d       	adc	r25, r1
    5608:	96 95       	lsr	r25
    560a:	87 95       	ror	r24
    560c:	97 f9       	bld	r25, 7
    560e:	08 95       	ret
    5610:	e1 e0       	ldi	r30, 0x01	; 1
    5612:	66 0f       	add	r22, r22
    5614:	77 1f       	adc	r23, r23
    5616:	88 1f       	adc	r24, r24
    5618:	bb 1f       	adc	r27, r27
    561a:	62 17       	cp	r22, r18
    561c:	73 07       	cpc	r23, r19
    561e:	84 07       	cpc	r24, r20
    5620:	ba 07       	cpc	r27, r26
    5622:	20 f0       	brcs	.+8      	; 0x562c <__divsf3_pse+0xaa>
    5624:	62 1b       	sub	r22, r18
    5626:	73 0b       	sbc	r23, r19
    5628:	84 0b       	sbc	r24, r20
    562a:	ba 0b       	sbc	r27, r26
    562c:	ee 1f       	adc	r30, r30
    562e:	88 f7       	brcc	.-30     	; 0x5612 <__divsf3_pse+0x90>
    5630:	e0 95       	com	r30
    5632:	08 95       	ret

00005634 <__fixsfsi>:
    5634:	04 d0       	rcall	.+8      	; 0x563e <__fixunssfsi>
    5636:	68 94       	set
    5638:	b1 11       	cpse	r27, r1
    563a:	d9 c0       	rjmp	.+434    	; 0x57ee <__fp_szero>
    563c:	08 95       	ret

0000563e <__fixunssfsi>:
    563e:	bc d0       	rcall	.+376    	; 0x57b8 <__fp_splitA>
    5640:	88 f0       	brcs	.+34     	; 0x5664 <__fixunssfsi+0x26>
    5642:	9f 57       	subi	r25, 0x7F	; 127
    5644:	90 f0       	brcs	.+36     	; 0x566a <__fixunssfsi+0x2c>
    5646:	b9 2f       	mov	r27, r25
    5648:	99 27       	eor	r25, r25
    564a:	b7 51       	subi	r27, 0x17	; 23
    564c:	a0 f0       	brcs	.+40     	; 0x5676 <__fixunssfsi+0x38>
    564e:	d1 f0       	breq	.+52     	; 0x5684 <__fixunssfsi+0x46>
    5650:	66 0f       	add	r22, r22
    5652:	77 1f       	adc	r23, r23
    5654:	88 1f       	adc	r24, r24
    5656:	99 1f       	adc	r25, r25
    5658:	1a f0       	brmi	.+6      	; 0x5660 <__fixunssfsi+0x22>
    565a:	ba 95       	dec	r27
    565c:	c9 f7       	brne	.-14     	; 0x5650 <__fixunssfsi+0x12>
    565e:	12 c0       	rjmp	.+36     	; 0x5684 <__fixunssfsi+0x46>
    5660:	b1 30       	cpi	r27, 0x01	; 1
    5662:	81 f0       	breq	.+32     	; 0x5684 <__fixunssfsi+0x46>
    5664:	c3 d0       	rcall	.+390    	; 0x57ec <__fp_zero>
    5666:	b1 e0       	ldi	r27, 0x01	; 1
    5668:	08 95       	ret
    566a:	c0 c0       	rjmp	.+384    	; 0x57ec <__fp_zero>
    566c:	67 2f       	mov	r22, r23
    566e:	78 2f       	mov	r23, r24
    5670:	88 27       	eor	r24, r24
    5672:	b8 5f       	subi	r27, 0xF8	; 248
    5674:	39 f0       	breq	.+14     	; 0x5684 <__fixunssfsi+0x46>
    5676:	b9 3f       	cpi	r27, 0xF9	; 249
    5678:	cc f3       	brlt	.-14     	; 0x566c <__fixunssfsi+0x2e>
    567a:	86 95       	lsr	r24
    567c:	77 95       	ror	r23
    567e:	67 95       	ror	r22
    5680:	b3 95       	inc	r27
    5682:	d9 f7       	brne	.-10     	; 0x567a <__fixunssfsi+0x3c>
    5684:	3e f4       	brtc	.+14     	; 0x5694 <__fixunssfsi+0x56>
    5686:	90 95       	com	r25
    5688:	80 95       	com	r24
    568a:	70 95       	com	r23
    568c:	61 95       	neg	r22
    568e:	7f 4f       	sbci	r23, 0xFF	; 255
    5690:	8f 4f       	sbci	r24, 0xFF	; 255
    5692:	9f 4f       	sbci	r25, 0xFF	; 255
    5694:	08 95       	ret

00005696 <__floatunsisf>:
    5696:	e8 94       	clt
    5698:	09 c0       	rjmp	.+18     	; 0x56ac <__floatsisf+0x12>

0000569a <__floatsisf>:
    569a:	97 fb       	bst	r25, 7
    569c:	3e f4       	brtc	.+14     	; 0x56ac <__floatsisf+0x12>
    569e:	90 95       	com	r25
    56a0:	80 95       	com	r24
    56a2:	70 95       	com	r23
    56a4:	61 95       	neg	r22
    56a6:	7f 4f       	sbci	r23, 0xFF	; 255
    56a8:	8f 4f       	sbci	r24, 0xFF	; 255
    56aa:	9f 4f       	sbci	r25, 0xFF	; 255
    56ac:	99 23       	and	r25, r25
    56ae:	a9 f0       	breq	.+42     	; 0x56da <__floatsisf+0x40>
    56b0:	f9 2f       	mov	r31, r25
    56b2:	96 e9       	ldi	r25, 0x96	; 150
    56b4:	bb 27       	eor	r27, r27
    56b6:	93 95       	inc	r25
    56b8:	f6 95       	lsr	r31
    56ba:	87 95       	ror	r24
    56bc:	77 95       	ror	r23
    56be:	67 95       	ror	r22
    56c0:	b7 95       	ror	r27
    56c2:	f1 11       	cpse	r31, r1
    56c4:	f8 cf       	rjmp	.-16     	; 0x56b6 <__floatsisf+0x1c>
    56c6:	fa f4       	brpl	.+62     	; 0x5706 <__floatsisf+0x6c>
    56c8:	bb 0f       	add	r27, r27
    56ca:	11 f4       	brne	.+4      	; 0x56d0 <__floatsisf+0x36>
    56cc:	60 ff       	sbrs	r22, 0
    56ce:	1b c0       	rjmp	.+54     	; 0x5706 <__floatsisf+0x6c>
    56d0:	6f 5f       	subi	r22, 0xFF	; 255
    56d2:	7f 4f       	sbci	r23, 0xFF	; 255
    56d4:	8f 4f       	sbci	r24, 0xFF	; 255
    56d6:	9f 4f       	sbci	r25, 0xFF	; 255
    56d8:	16 c0       	rjmp	.+44     	; 0x5706 <__floatsisf+0x6c>
    56da:	88 23       	and	r24, r24
    56dc:	11 f0       	breq	.+4      	; 0x56e2 <__floatsisf+0x48>
    56de:	96 e9       	ldi	r25, 0x96	; 150
    56e0:	11 c0       	rjmp	.+34     	; 0x5704 <__floatsisf+0x6a>
    56e2:	77 23       	and	r23, r23
    56e4:	21 f0       	breq	.+8      	; 0x56ee <__floatsisf+0x54>
    56e6:	9e e8       	ldi	r25, 0x8E	; 142
    56e8:	87 2f       	mov	r24, r23
    56ea:	76 2f       	mov	r23, r22
    56ec:	05 c0       	rjmp	.+10     	; 0x56f8 <__floatsisf+0x5e>
    56ee:	66 23       	and	r22, r22
    56f0:	71 f0       	breq	.+28     	; 0x570e <__floatsisf+0x74>
    56f2:	96 e8       	ldi	r25, 0x86	; 134
    56f4:	86 2f       	mov	r24, r22
    56f6:	70 e0       	ldi	r23, 0x00	; 0
    56f8:	60 e0       	ldi	r22, 0x00	; 0
    56fa:	2a f0       	brmi	.+10     	; 0x5706 <__floatsisf+0x6c>
    56fc:	9a 95       	dec	r25
    56fe:	66 0f       	add	r22, r22
    5700:	77 1f       	adc	r23, r23
    5702:	88 1f       	adc	r24, r24
    5704:	da f7       	brpl	.-10     	; 0x56fc <__floatsisf+0x62>
    5706:	88 0f       	add	r24, r24
    5708:	96 95       	lsr	r25
    570a:	87 95       	ror	r24
    570c:	97 f9       	bld	r25, 7
    570e:	08 95       	ret

00005710 <__fp_cmp>:
    5710:	99 0f       	add	r25, r25
    5712:	00 08       	sbc	r0, r0
    5714:	55 0f       	add	r21, r21
    5716:	aa 0b       	sbc	r26, r26
    5718:	e0 e8       	ldi	r30, 0x80	; 128
    571a:	fe ef       	ldi	r31, 0xFE	; 254
    571c:	16 16       	cp	r1, r22
    571e:	17 06       	cpc	r1, r23
    5720:	e8 07       	cpc	r30, r24
    5722:	f9 07       	cpc	r31, r25
    5724:	c0 f0       	brcs	.+48     	; 0x5756 <__fp_cmp+0x46>
    5726:	12 16       	cp	r1, r18
    5728:	13 06       	cpc	r1, r19
    572a:	e4 07       	cpc	r30, r20
    572c:	f5 07       	cpc	r31, r21
    572e:	98 f0       	brcs	.+38     	; 0x5756 <__fp_cmp+0x46>
    5730:	62 1b       	sub	r22, r18
    5732:	73 0b       	sbc	r23, r19
    5734:	84 0b       	sbc	r24, r20
    5736:	95 0b       	sbc	r25, r21
    5738:	39 f4       	brne	.+14     	; 0x5748 <__fp_cmp+0x38>
    573a:	0a 26       	eor	r0, r26
    573c:	61 f0       	breq	.+24     	; 0x5756 <__fp_cmp+0x46>
    573e:	23 2b       	or	r18, r19
    5740:	24 2b       	or	r18, r20
    5742:	25 2b       	or	r18, r21
    5744:	21 f4       	brne	.+8      	; 0x574e <__fp_cmp+0x3e>
    5746:	08 95       	ret
    5748:	0a 26       	eor	r0, r26
    574a:	09 f4       	brne	.+2      	; 0x574e <__fp_cmp+0x3e>
    574c:	a1 40       	sbci	r26, 0x01	; 1
    574e:	a6 95       	lsr	r26
    5750:	8f ef       	ldi	r24, 0xFF	; 255
    5752:	81 1d       	adc	r24, r1
    5754:	81 1d       	adc	r24, r1
    5756:	08 95       	ret

00005758 <__fp_inf>:
    5758:	97 f9       	bld	r25, 7
    575a:	9f 67       	ori	r25, 0x7F	; 127
    575c:	80 e8       	ldi	r24, 0x80	; 128
    575e:	70 e0       	ldi	r23, 0x00	; 0
    5760:	60 e0       	ldi	r22, 0x00	; 0
    5762:	08 95       	ret

00005764 <__fp_nan>:
    5764:	9f ef       	ldi	r25, 0xFF	; 255
    5766:	80 ec       	ldi	r24, 0xC0	; 192
    5768:	08 95       	ret

0000576a <__fp_pscA>:
    576a:	00 24       	eor	r0, r0
    576c:	0a 94       	dec	r0
    576e:	16 16       	cp	r1, r22
    5770:	17 06       	cpc	r1, r23
    5772:	18 06       	cpc	r1, r24
    5774:	09 06       	cpc	r0, r25
    5776:	08 95       	ret

00005778 <__fp_pscB>:
    5778:	00 24       	eor	r0, r0
    577a:	0a 94       	dec	r0
    577c:	12 16       	cp	r1, r18
    577e:	13 06       	cpc	r1, r19
    5780:	14 06       	cpc	r1, r20
    5782:	05 06       	cpc	r0, r21
    5784:	08 95       	ret

00005786 <__fp_round>:
    5786:	09 2e       	mov	r0, r25
    5788:	03 94       	inc	r0
    578a:	00 0c       	add	r0, r0
    578c:	11 f4       	brne	.+4      	; 0x5792 <__fp_round+0xc>
    578e:	88 23       	and	r24, r24
    5790:	52 f0       	brmi	.+20     	; 0x57a6 <__fp_round+0x20>
    5792:	bb 0f       	add	r27, r27
    5794:	40 f4       	brcc	.+16     	; 0x57a6 <__fp_round+0x20>
    5796:	bf 2b       	or	r27, r31
    5798:	11 f4       	brne	.+4      	; 0x579e <__fp_round+0x18>
    579a:	60 ff       	sbrs	r22, 0
    579c:	04 c0       	rjmp	.+8      	; 0x57a6 <__fp_round+0x20>
    579e:	6f 5f       	subi	r22, 0xFF	; 255
    57a0:	7f 4f       	sbci	r23, 0xFF	; 255
    57a2:	8f 4f       	sbci	r24, 0xFF	; 255
    57a4:	9f 4f       	sbci	r25, 0xFF	; 255
    57a6:	08 95       	ret

000057a8 <__fp_split3>:
    57a8:	57 fd       	sbrc	r21, 7
    57aa:	90 58       	subi	r25, 0x80	; 128
    57ac:	44 0f       	add	r20, r20
    57ae:	55 1f       	adc	r21, r21
    57b0:	59 f0       	breq	.+22     	; 0x57c8 <__fp_splitA+0x10>
    57b2:	5f 3f       	cpi	r21, 0xFF	; 255
    57b4:	71 f0       	breq	.+28     	; 0x57d2 <__fp_splitA+0x1a>
    57b6:	47 95       	ror	r20

000057b8 <__fp_splitA>:
    57b8:	88 0f       	add	r24, r24
    57ba:	97 fb       	bst	r25, 7
    57bc:	99 1f       	adc	r25, r25
    57be:	61 f0       	breq	.+24     	; 0x57d8 <__fp_splitA+0x20>
    57c0:	9f 3f       	cpi	r25, 0xFF	; 255
    57c2:	79 f0       	breq	.+30     	; 0x57e2 <__fp_splitA+0x2a>
    57c4:	87 95       	ror	r24
    57c6:	08 95       	ret
    57c8:	12 16       	cp	r1, r18
    57ca:	13 06       	cpc	r1, r19
    57cc:	14 06       	cpc	r1, r20
    57ce:	55 1f       	adc	r21, r21
    57d0:	f2 cf       	rjmp	.-28     	; 0x57b6 <__fp_split3+0xe>
    57d2:	46 95       	lsr	r20
    57d4:	f1 df       	rcall	.-30     	; 0x57b8 <__fp_splitA>
    57d6:	08 c0       	rjmp	.+16     	; 0x57e8 <__fp_splitA+0x30>
    57d8:	16 16       	cp	r1, r22
    57da:	17 06       	cpc	r1, r23
    57dc:	18 06       	cpc	r1, r24
    57de:	99 1f       	adc	r25, r25
    57e0:	f1 cf       	rjmp	.-30     	; 0x57c4 <__fp_splitA+0xc>
    57e2:	86 95       	lsr	r24
    57e4:	71 05       	cpc	r23, r1
    57e6:	61 05       	cpc	r22, r1
    57e8:	08 94       	sec
    57ea:	08 95       	ret

000057ec <__fp_zero>:
    57ec:	e8 94       	clt

000057ee <__fp_szero>:
    57ee:	bb 27       	eor	r27, r27
    57f0:	66 27       	eor	r22, r22
    57f2:	77 27       	eor	r23, r23
    57f4:	cb 01       	movw	r24, r22
    57f6:	97 f9       	bld	r25, 7
    57f8:	08 95       	ret

000057fa <__gesf2>:
    57fa:	8a df       	rcall	.-236    	; 0x5710 <__fp_cmp>
    57fc:	08 f4       	brcc	.+2      	; 0x5800 <__gesf2+0x6>
    57fe:	8f ef       	ldi	r24, 0xFF	; 255
    5800:	08 95       	ret

00005802 <lrint>:
    5802:	da df       	rcall	.-76     	; 0x57b8 <__fp_splitA>
    5804:	a8 f1       	brcs	.+106    	; 0x5870 <lrint+0x6e>
    5806:	9e 57       	subi	r25, 0x7E	; 126
    5808:	a8 f1       	brcs	.+106    	; 0x5874 <lrint+0x72>
    580a:	98 51       	subi	r25, 0x18	; 24
    580c:	60 f0       	brcs	.+24     	; 0x5826 <lrint+0x24>
    580e:	39 f1       	breq	.+78     	; 0x585e <lrint+0x5c>
    5810:	98 30       	cpi	r25, 0x08	; 8
    5812:	70 f5       	brcc	.+92     	; 0x5870 <lrint+0x6e>
    5814:	09 2e       	mov	r0, r25
    5816:	99 27       	eor	r25, r25
    5818:	66 0f       	add	r22, r22
    581a:	77 1f       	adc	r23, r23
    581c:	88 1f       	adc	r24, r24
    581e:	99 1f       	adc	r25, r25
    5820:	0a 94       	dec	r0
    5822:	d1 f7       	brne	.-12     	; 0x5818 <lrint+0x16>
    5824:	1c c0       	rjmp	.+56     	; 0x585e <lrint+0x5c>
    5826:	bb 27       	eor	r27, r27
    5828:	99 3f       	cpi	r25, 0xF9	; 249
    582a:	4c f4       	brge	.+18     	; 0x583e <lrint+0x3c>
    582c:	b1 11       	cpse	r27, r1
    582e:	b1 e0       	ldi	r27, 0x01	; 1
    5830:	b6 2b       	or	r27, r22
    5832:	67 2f       	mov	r22, r23
    5834:	78 2f       	mov	r23, r24
    5836:	88 27       	eor	r24, r24
    5838:	98 5f       	subi	r25, 0xF8	; 248
    583a:	b1 f7       	brne	.-20     	; 0x5828 <lrint+0x26>
    583c:	08 c0       	rjmp	.+16     	; 0x584e <lrint+0x4c>
    583e:	86 95       	lsr	r24
    5840:	77 95       	ror	r23
    5842:	67 95       	ror	r22
    5844:	b7 95       	ror	r27
    5846:	08 f4       	brcc	.+2      	; 0x584a <lrint+0x48>
    5848:	b1 60       	ori	r27, 0x01	; 1
    584a:	93 95       	inc	r25
    584c:	c1 f7       	brne	.-16     	; 0x583e <lrint+0x3c>
    584e:	bb 0f       	add	r27, r27
    5850:	30 f4       	brcc	.+12     	; 0x585e <lrint+0x5c>
    5852:	11 f4       	brne	.+4      	; 0x5858 <lrint+0x56>
    5854:	60 ff       	sbrs	r22, 0
    5856:	03 c0       	rjmp	.+6      	; 0x585e <lrint+0x5c>
    5858:	6f 5f       	subi	r22, 0xFF	; 255
    585a:	7f 4f       	sbci	r23, 0xFF	; 255
    585c:	8f 4f       	sbci	r24, 0xFF	; 255
    585e:	3e f4       	brtc	.+14     	; 0x586e <lrint+0x6c>
    5860:	90 95       	com	r25
    5862:	80 95       	com	r24
    5864:	70 95       	com	r23
    5866:	61 95       	neg	r22
    5868:	7f 4f       	sbci	r23, 0xFF	; 255
    586a:	8f 4f       	sbci	r24, 0xFF	; 255
    586c:	9f 4f       	sbci	r25, 0xFF	; 255
    586e:	08 95       	ret
    5870:	68 94       	set
    5872:	bd cf       	rjmp	.-134    	; 0x57ee <__fp_szero>
    5874:	bb cf       	rjmp	.-138    	; 0x57ec <__fp_zero>

00005876 <__mulsf3>:
    5876:	0b d0       	rcall	.+22     	; 0x588e <__mulsf3x>
    5878:	86 cf       	rjmp	.-244    	; 0x5786 <__fp_round>
    587a:	77 df       	rcall	.-274    	; 0x576a <__fp_pscA>
    587c:	28 f0       	brcs	.+10     	; 0x5888 <__mulsf3+0x12>
    587e:	7c df       	rcall	.-264    	; 0x5778 <__fp_pscB>
    5880:	18 f0       	brcs	.+6      	; 0x5888 <__mulsf3+0x12>
    5882:	95 23       	and	r25, r21
    5884:	09 f0       	breq	.+2      	; 0x5888 <__mulsf3+0x12>
    5886:	68 cf       	rjmp	.-304    	; 0x5758 <__fp_inf>
    5888:	6d cf       	rjmp	.-294    	; 0x5764 <__fp_nan>
    588a:	11 24       	eor	r1, r1
    588c:	b0 cf       	rjmp	.-160    	; 0x57ee <__fp_szero>

0000588e <__mulsf3x>:
    588e:	8c df       	rcall	.-232    	; 0x57a8 <__fp_split3>
    5890:	a0 f3       	brcs	.-24     	; 0x587a <__mulsf3+0x4>

00005892 <__mulsf3_pse>:
    5892:	95 9f       	mul	r25, r21
    5894:	d1 f3       	breq	.-12     	; 0x588a <__mulsf3+0x14>
    5896:	95 0f       	add	r25, r21
    5898:	50 e0       	ldi	r21, 0x00	; 0
    589a:	55 1f       	adc	r21, r21
    589c:	62 9f       	mul	r22, r18
    589e:	f0 01       	movw	r30, r0
    58a0:	72 9f       	mul	r23, r18
    58a2:	bb 27       	eor	r27, r27
    58a4:	f0 0d       	add	r31, r0
    58a6:	b1 1d       	adc	r27, r1
    58a8:	63 9f       	mul	r22, r19
    58aa:	aa 27       	eor	r26, r26
    58ac:	f0 0d       	add	r31, r0
    58ae:	b1 1d       	adc	r27, r1
    58b0:	aa 1f       	adc	r26, r26
    58b2:	64 9f       	mul	r22, r20
    58b4:	66 27       	eor	r22, r22
    58b6:	b0 0d       	add	r27, r0
    58b8:	a1 1d       	adc	r26, r1
    58ba:	66 1f       	adc	r22, r22
    58bc:	82 9f       	mul	r24, r18
    58be:	22 27       	eor	r18, r18
    58c0:	b0 0d       	add	r27, r0
    58c2:	a1 1d       	adc	r26, r1
    58c4:	62 1f       	adc	r22, r18
    58c6:	73 9f       	mul	r23, r19
    58c8:	b0 0d       	add	r27, r0
    58ca:	a1 1d       	adc	r26, r1
    58cc:	62 1f       	adc	r22, r18
    58ce:	83 9f       	mul	r24, r19
    58d0:	a0 0d       	add	r26, r0
    58d2:	61 1d       	adc	r22, r1
    58d4:	22 1f       	adc	r18, r18
    58d6:	74 9f       	mul	r23, r20
    58d8:	33 27       	eor	r19, r19
    58da:	a0 0d       	add	r26, r0
    58dc:	61 1d       	adc	r22, r1
    58de:	23 1f       	adc	r18, r19
    58e0:	84 9f       	mul	r24, r20
    58e2:	60 0d       	add	r22, r0
    58e4:	21 1d       	adc	r18, r1
    58e6:	82 2f       	mov	r24, r18
    58e8:	76 2f       	mov	r23, r22
    58ea:	6a 2f       	mov	r22, r26
    58ec:	11 24       	eor	r1, r1
    58ee:	9f 57       	subi	r25, 0x7F	; 127
    58f0:	50 40       	sbci	r21, 0x00	; 0
    58f2:	8a f0       	brmi	.+34     	; 0x5916 <__mulsf3_pse+0x84>
    58f4:	e1 f0       	breq	.+56     	; 0x592e <__mulsf3_pse+0x9c>
    58f6:	88 23       	and	r24, r24
    58f8:	4a f0       	brmi	.+18     	; 0x590c <__mulsf3_pse+0x7a>
    58fa:	ee 0f       	add	r30, r30
    58fc:	ff 1f       	adc	r31, r31
    58fe:	bb 1f       	adc	r27, r27
    5900:	66 1f       	adc	r22, r22
    5902:	77 1f       	adc	r23, r23
    5904:	88 1f       	adc	r24, r24
    5906:	91 50       	subi	r25, 0x01	; 1
    5908:	50 40       	sbci	r21, 0x00	; 0
    590a:	a9 f7       	brne	.-22     	; 0x58f6 <__mulsf3_pse+0x64>
    590c:	9e 3f       	cpi	r25, 0xFE	; 254
    590e:	51 05       	cpc	r21, r1
    5910:	70 f0       	brcs	.+28     	; 0x592e <__mulsf3_pse+0x9c>
    5912:	22 cf       	rjmp	.-444    	; 0x5758 <__fp_inf>
    5914:	6c cf       	rjmp	.-296    	; 0x57ee <__fp_szero>
    5916:	5f 3f       	cpi	r21, 0xFF	; 255
    5918:	ec f3       	brlt	.-6      	; 0x5914 <__mulsf3_pse+0x82>
    591a:	98 3e       	cpi	r25, 0xE8	; 232
    591c:	dc f3       	brlt	.-10     	; 0x5914 <__mulsf3_pse+0x82>
    591e:	86 95       	lsr	r24
    5920:	77 95       	ror	r23
    5922:	67 95       	ror	r22
    5924:	b7 95       	ror	r27
    5926:	f7 95       	ror	r31
    5928:	e7 95       	ror	r30
    592a:	9f 5f       	subi	r25, 0xFF	; 255
    592c:	c1 f7       	brne	.-16     	; 0x591e <__mulsf3_pse+0x8c>
    592e:	fe 2b       	or	r31, r30
    5930:	88 0f       	add	r24, r24
    5932:	91 1d       	adc	r25, r1
    5934:	96 95       	lsr	r25
    5936:	87 95       	ror	r24
    5938:	97 f9       	bld	r25, 7
    593a:	08 95       	ret

0000593c <pow>:
    593c:	fa 01       	movw	r30, r20
    593e:	ee 0f       	add	r30, r30
    5940:	ff 1f       	adc	r31, r31
    5942:	30 96       	adiw	r30, 0x00	; 0
    5944:	21 05       	cpc	r18, r1
    5946:	31 05       	cpc	r19, r1
    5948:	99 f1       	breq	.+102    	; 0x59b0 <pow+0x74>
    594a:	61 15       	cp	r22, r1
    594c:	71 05       	cpc	r23, r1
    594e:	61 f4       	brne	.+24     	; 0x5968 <pow+0x2c>
    5950:	80 38       	cpi	r24, 0x80	; 128
    5952:	bf e3       	ldi	r27, 0x3F	; 63
    5954:	9b 07       	cpc	r25, r27
    5956:	49 f1       	breq	.+82     	; 0x59aa <pow+0x6e>
    5958:	68 94       	set
    595a:	90 38       	cpi	r25, 0x80	; 128
    595c:	81 05       	cpc	r24, r1
    595e:	61 f0       	breq	.+24     	; 0x5978 <pow+0x3c>
    5960:	80 38       	cpi	r24, 0x80	; 128
    5962:	bf ef       	ldi	r27, 0xFF	; 255
    5964:	9b 07       	cpc	r25, r27
    5966:	41 f0       	breq	.+16     	; 0x5978 <pow+0x3c>
    5968:	99 23       	and	r25, r25
    596a:	42 f5       	brpl	.+80     	; 0x59bc <pow+0x80>
    596c:	ff 3f       	cpi	r31, 0xFF	; 255
    596e:	e1 05       	cpc	r30, r1
    5970:	31 05       	cpc	r19, r1
    5972:	21 05       	cpc	r18, r1
    5974:	11 f1       	breq	.+68     	; 0x59ba <pow+0x7e>
    5976:	e8 94       	clt
    5978:	08 94       	sec
    597a:	e7 95       	ror	r30
    597c:	d9 01       	movw	r26, r18
    597e:	aa 23       	and	r26, r26
    5980:	29 f4       	brne	.+10     	; 0x598c <pow+0x50>
    5982:	ab 2f       	mov	r26, r27
    5984:	be 2f       	mov	r27, r30
    5986:	f8 5f       	subi	r31, 0xF8	; 248
    5988:	d0 f3       	brcs	.-12     	; 0x597e <pow+0x42>
    598a:	10 c0       	rjmp	.+32     	; 0x59ac <pow+0x70>
    598c:	ff 5f       	subi	r31, 0xFF	; 255
    598e:	70 f4       	brcc	.+28     	; 0x59ac <pow+0x70>
    5990:	a6 95       	lsr	r26
    5992:	e0 f7       	brcc	.-8      	; 0x598c <pow+0x50>
    5994:	f7 39       	cpi	r31, 0x97	; 151
    5996:	50 f0       	brcs	.+20     	; 0x59ac <pow+0x70>
    5998:	19 f0       	breq	.+6      	; 0x59a0 <pow+0x64>
    599a:	ff 3a       	cpi	r31, 0xAF	; 175
    599c:	38 f4       	brcc	.+14     	; 0x59ac <pow+0x70>
    599e:	9f 77       	andi	r25, 0x7F	; 127
    59a0:	9f 93       	push	r25
    59a2:	0c d0       	rcall	.+24     	; 0x59bc <pow+0x80>
    59a4:	0f 90       	pop	r0
    59a6:	07 fc       	sbrc	r0, 7
    59a8:	90 58       	subi	r25, 0x80	; 128
    59aa:	08 95       	ret
    59ac:	3e f0       	brts	.+14     	; 0x59bc <pow+0x80>
    59ae:	da ce       	rjmp	.-588    	; 0x5764 <__fp_nan>
    59b0:	60 e0       	ldi	r22, 0x00	; 0
    59b2:	70 e0       	ldi	r23, 0x00	; 0
    59b4:	80 e8       	ldi	r24, 0x80	; 128
    59b6:	9f e3       	ldi	r25, 0x3F	; 63
    59b8:	08 95       	ret
    59ba:	4f e7       	ldi	r20, 0x7F	; 127
    59bc:	9f 77       	andi	r25, 0x7F	; 127
    59be:	5f 93       	push	r21
    59c0:	4f 93       	push	r20
    59c2:	3f 93       	push	r19
    59c4:	2f 93       	push	r18
    59c6:	9e d0       	rcall	.+316    	; 0x5b04 <log>
    59c8:	2f 91       	pop	r18
    59ca:	3f 91       	pop	r19
    59cc:	4f 91       	pop	r20
    59ce:	5f 91       	pop	r21
    59d0:	52 df       	rcall	.-348    	; 0x5876 <__mulsf3>
    59d2:	05 c0       	rjmp	.+10     	; 0x59de <exp>
    59d4:	19 f4       	brne	.+6      	; 0x59dc <pow+0xa0>
    59d6:	0e f0       	brts	.+2      	; 0x59da <pow+0x9e>
    59d8:	bf ce       	rjmp	.-642    	; 0x5758 <__fp_inf>
    59da:	08 cf       	rjmp	.-496    	; 0x57ec <__fp_zero>
    59dc:	c3 ce       	rjmp	.-634    	; 0x5764 <__fp_nan>

000059de <exp>:
    59de:	ec de       	rcall	.-552    	; 0x57b8 <__fp_splitA>
    59e0:	c8 f3       	brcs	.-14     	; 0x59d4 <pow+0x98>
    59e2:	96 38       	cpi	r25, 0x86	; 134
    59e4:	c0 f7       	brcc	.-16     	; 0x59d6 <pow+0x9a>
    59e6:	07 f8       	bld	r0, 7
    59e8:	0f 92       	push	r0
    59ea:	e8 94       	clt
    59ec:	2b e3       	ldi	r18, 0x3B	; 59
    59ee:	3a ea       	ldi	r19, 0xAA	; 170
    59f0:	48 eb       	ldi	r20, 0xB8	; 184
    59f2:	5f e7       	ldi	r21, 0x7F	; 127
    59f4:	4e df       	rcall	.-356    	; 0x5892 <__mulsf3_pse>
    59f6:	0f 92       	push	r0
    59f8:	0f 92       	push	r0
    59fa:	0f 92       	push	r0
    59fc:	4d b7       	in	r20, 0x3d	; 61
    59fe:	5e b7       	in	r21, 0x3e	; 62
    5a00:	0f 92       	push	r0
    5a02:	c0 d0       	rcall	.+384    	; 0x5b84 <modf>
    5a04:	e8 ec       	ldi	r30, 0xC8	; 200
    5a06:	f0 e0       	ldi	r31, 0x00	; 0
    5a08:	16 d0       	rcall	.+44     	; 0x5a36 <__fp_powser>
    5a0a:	4f 91       	pop	r20
    5a0c:	5f 91       	pop	r21
    5a0e:	ef 91       	pop	r30
    5a10:	ff 91       	pop	r31
    5a12:	e5 95       	asr	r30
    5a14:	ee 1f       	adc	r30, r30
    5a16:	ff 1f       	adc	r31, r31
    5a18:	49 f0       	breq	.+18     	; 0x5a2c <exp+0x4e>
    5a1a:	fe 57       	subi	r31, 0x7E	; 126
    5a1c:	e0 68       	ori	r30, 0x80	; 128
    5a1e:	44 27       	eor	r20, r20
    5a20:	ee 0f       	add	r30, r30
    5a22:	44 1f       	adc	r20, r20
    5a24:	fa 95       	dec	r31
    5a26:	e1 f7       	brne	.-8      	; 0x5a20 <exp+0x42>
    5a28:	41 95       	neg	r20
    5a2a:	55 0b       	sbc	r21, r21
    5a2c:	32 d0       	rcall	.+100    	; 0x5a92 <ldexp>
    5a2e:	0f 90       	pop	r0
    5a30:	07 fe       	sbrs	r0, 7
    5a32:	26 c0       	rjmp	.+76     	; 0x5a80 <inverse>
    5a34:	08 95       	ret

00005a36 <__fp_powser>:
    5a36:	df 93       	push	r29
    5a38:	cf 93       	push	r28
    5a3a:	1f 93       	push	r17
    5a3c:	0f 93       	push	r16
    5a3e:	ff 92       	push	r15
    5a40:	ef 92       	push	r14
    5a42:	df 92       	push	r13
    5a44:	7b 01       	movw	r14, r22
    5a46:	8c 01       	movw	r16, r24
    5a48:	68 94       	set
    5a4a:	05 c0       	rjmp	.+10     	; 0x5a56 <__fp_powser+0x20>
    5a4c:	da 2e       	mov	r13, r26
    5a4e:	ef 01       	movw	r28, r30
    5a50:	1e df       	rcall	.-452    	; 0x588e <__mulsf3x>
    5a52:	fe 01       	movw	r30, r28
    5a54:	e8 94       	clt
    5a56:	a5 91       	lpm	r26, Z+
    5a58:	25 91       	lpm	r18, Z+
    5a5a:	35 91       	lpm	r19, Z+
    5a5c:	45 91       	lpm	r20, Z+
    5a5e:	55 91       	lpm	r21, Z+
    5a60:	ae f3       	brts	.-22     	; 0x5a4c <__fp_powser+0x16>
    5a62:	ef 01       	movw	r28, r30
    5a64:	28 dd       	rcall	.-1456   	; 0x54b6 <__addsf3x>
    5a66:	fe 01       	movw	r30, r28
    5a68:	97 01       	movw	r18, r14
    5a6a:	a8 01       	movw	r20, r16
    5a6c:	da 94       	dec	r13
    5a6e:	79 f7       	brne	.-34     	; 0x5a4e <__fp_powser+0x18>
    5a70:	df 90       	pop	r13
    5a72:	ef 90       	pop	r14
    5a74:	ff 90       	pop	r15
    5a76:	0f 91       	pop	r16
    5a78:	1f 91       	pop	r17
    5a7a:	cf 91       	pop	r28
    5a7c:	df 91       	pop	r29
    5a7e:	08 95       	ret

00005a80 <inverse>:
    5a80:	9b 01       	movw	r18, r22
    5a82:	ac 01       	movw	r20, r24
    5a84:	60 e0       	ldi	r22, 0x00	; 0
    5a86:	70 e0       	ldi	r23, 0x00	; 0
    5a88:	80 e8       	ldi	r24, 0x80	; 128
    5a8a:	9f e3       	ldi	r25, 0x3F	; 63
    5a8c:	6b cd       	rjmp	.-1322   	; 0x5564 <__divsf3>
    5a8e:	64 ce       	rjmp	.-824    	; 0x5758 <__fp_inf>
    5a90:	ac c0       	rjmp	.+344    	; 0x5bea <__fp_mpack>

00005a92 <ldexp>:
    5a92:	92 de       	rcall	.-732    	; 0x57b8 <__fp_splitA>
    5a94:	e8 f3       	brcs	.-6      	; 0x5a90 <inverse+0x10>
    5a96:	99 23       	and	r25, r25
    5a98:	d9 f3       	breq	.-10     	; 0x5a90 <inverse+0x10>
    5a9a:	94 0f       	add	r25, r20
    5a9c:	51 1d       	adc	r21, r1
    5a9e:	bb f3       	brvs	.-18     	; 0x5a8e <inverse+0xe>
    5aa0:	91 50       	subi	r25, 0x01	; 1
    5aa2:	50 40       	sbci	r21, 0x00	; 0
    5aa4:	94 f0       	brlt	.+36     	; 0x5aca <ldexp+0x38>
    5aa6:	59 f0       	breq	.+22     	; 0x5abe <ldexp+0x2c>
    5aa8:	88 23       	and	r24, r24
    5aaa:	32 f0       	brmi	.+12     	; 0x5ab8 <ldexp+0x26>
    5aac:	66 0f       	add	r22, r22
    5aae:	77 1f       	adc	r23, r23
    5ab0:	88 1f       	adc	r24, r24
    5ab2:	91 50       	subi	r25, 0x01	; 1
    5ab4:	50 40       	sbci	r21, 0x00	; 0
    5ab6:	c1 f7       	brne	.-16     	; 0x5aa8 <ldexp+0x16>
    5ab8:	9e 3f       	cpi	r25, 0xFE	; 254
    5aba:	51 05       	cpc	r21, r1
    5abc:	44 f7       	brge	.-48     	; 0x5a8e <inverse+0xe>
    5abe:	88 0f       	add	r24, r24
    5ac0:	91 1d       	adc	r25, r1
    5ac2:	96 95       	lsr	r25
    5ac4:	87 95       	ror	r24
    5ac6:	97 f9       	bld	r25, 7
    5ac8:	08 95       	ret
    5aca:	5f 3f       	cpi	r21, 0xFF	; 255
    5acc:	ac f0       	brlt	.+42     	; 0x5af8 <ldexp+0x66>
    5ace:	98 3e       	cpi	r25, 0xE8	; 232
    5ad0:	9c f0       	brlt	.+38     	; 0x5af8 <ldexp+0x66>
    5ad2:	bb 27       	eor	r27, r27
    5ad4:	86 95       	lsr	r24
    5ad6:	77 95       	ror	r23
    5ad8:	67 95       	ror	r22
    5ada:	b7 95       	ror	r27
    5adc:	08 f4       	brcc	.+2      	; 0x5ae0 <ldexp+0x4e>
    5ade:	b1 60       	ori	r27, 0x01	; 1
    5ae0:	93 95       	inc	r25
    5ae2:	c1 f7       	brne	.-16     	; 0x5ad4 <ldexp+0x42>
    5ae4:	bb 0f       	add	r27, r27
    5ae6:	58 f7       	brcc	.-42     	; 0x5abe <ldexp+0x2c>
    5ae8:	11 f4       	brne	.+4      	; 0x5aee <ldexp+0x5c>
    5aea:	60 ff       	sbrs	r22, 0
    5aec:	e8 cf       	rjmp	.-48     	; 0x5abe <ldexp+0x2c>
    5aee:	6f 5f       	subi	r22, 0xFF	; 255
    5af0:	7f 4f       	sbci	r23, 0xFF	; 255
    5af2:	8f 4f       	sbci	r24, 0xFF	; 255
    5af4:	9f 4f       	sbci	r25, 0xFF	; 255
    5af6:	e3 cf       	rjmp	.-58     	; 0x5abe <ldexp+0x2c>
    5af8:	7a ce       	rjmp	.-780    	; 0x57ee <__fp_szero>
    5afa:	0e f0       	brts	.+2      	; 0x5afe <ldexp+0x6c>
    5afc:	76 c0       	rjmp	.+236    	; 0x5bea <__fp_mpack>
    5afe:	32 ce       	rjmp	.-924    	; 0x5764 <__fp_nan>
    5b00:	68 94       	set
    5b02:	2a ce       	rjmp	.-940    	; 0x5758 <__fp_inf>

00005b04 <log>:
    5b04:	59 de       	rcall	.-846    	; 0x57b8 <__fp_splitA>
    5b06:	c8 f3       	brcs	.-14     	; 0x5afa <ldexp+0x68>
    5b08:	99 23       	and	r25, r25
    5b0a:	d1 f3       	breq	.-12     	; 0x5b00 <ldexp+0x6e>
    5b0c:	c6 f3       	brts	.-16     	; 0x5afe <ldexp+0x6c>
    5b0e:	df 93       	push	r29
    5b10:	cf 93       	push	r28
    5b12:	1f 93       	push	r17
    5b14:	0f 93       	push	r16
    5b16:	ff 92       	push	r15
    5b18:	c9 2f       	mov	r28, r25
    5b1a:	dd 27       	eor	r29, r29
    5b1c:	88 23       	and	r24, r24
    5b1e:	2a f0       	brmi	.+10     	; 0x5b2a <log+0x26>
    5b20:	21 97       	sbiw	r28, 0x01	; 1
    5b22:	66 0f       	add	r22, r22
    5b24:	77 1f       	adc	r23, r23
    5b26:	88 1f       	adc	r24, r24
    5b28:	da f7       	brpl	.-10     	; 0x5b20 <log+0x1c>
    5b2a:	20 e0       	ldi	r18, 0x00	; 0
    5b2c:	30 e0       	ldi	r19, 0x00	; 0
    5b2e:	40 e8       	ldi	r20, 0x80	; 128
    5b30:	5f eb       	ldi	r21, 0xBF	; 191
    5b32:	9f e3       	ldi	r25, 0x3F	; 63
    5b34:	88 39       	cpi	r24, 0x98	; 152
    5b36:	20 f0       	brcs	.+8      	; 0x5b40 <log+0x3c>
    5b38:	80 3e       	cpi	r24, 0xE0	; 224
    5b3a:	30 f0       	brcs	.+12     	; 0x5b48 <log+0x44>
    5b3c:	21 96       	adiw	r28, 0x01	; 1
    5b3e:	8f 77       	andi	r24, 0x7F	; 127
    5b40:	a9 dc       	rcall	.-1710   	; 0x5494 <__addsf3>
    5b42:	e0 ef       	ldi	r30, 0xF0	; 240
    5b44:	f0 e0       	ldi	r31, 0x00	; 0
    5b46:	03 c0       	rjmp	.+6      	; 0x5b4e <log+0x4a>
    5b48:	a5 dc       	rcall	.-1718   	; 0x5494 <__addsf3>
    5b4a:	ed e1       	ldi	r30, 0x1D	; 29
    5b4c:	f1 e0       	ldi	r31, 0x01	; 1
    5b4e:	73 df       	rcall	.-282    	; 0x5a36 <__fp_powser>
    5b50:	8b 01       	movw	r16, r22
    5b52:	be 01       	movw	r22, r28
    5b54:	ec 01       	movw	r28, r24
    5b56:	fb 2e       	mov	r15, r27
    5b58:	6f 57       	subi	r22, 0x7F	; 127
    5b5a:	71 09       	sbc	r23, r1
    5b5c:	75 95       	asr	r23
    5b5e:	77 1f       	adc	r23, r23
    5b60:	88 0b       	sbc	r24, r24
    5b62:	99 0b       	sbc	r25, r25
    5b64:	9a dd       	rcall	.-1228   	; 0x569a <__floatsisf>
    5b66:	28 e1       	ldi	r18, 0x18	; 24
    5b68:	32 e7       	ldi	r19, 0x72	; 114
    5b6a:	41 e3       	ldi	r20, 0x31	; 49
    5b6c:	5f e3       	ldi	r21, 0x3F	; 63
    5b6e:	8f de       	rcall	.-738    	; 0x588e <__mulsf3x>
    5b70:	af 2d       	mov	r26, r15
    5b72:	98 01       	movw	r18, r16
    5b74:	ae 01       	movw	r20, r28
    5b76:	ff 90       	pop	r15
    5b78:	0f 91       	pop	r16
    5b7a:	1f 91       	pop	r17
    5b7c:	cf 91       	pop	r28
    5b7e:	df 91       	pop	r29
    5b80:	9a dc       	rcall	.-1740   	; 0x54b6 <__addsf3x>
    5b82:	01 ce       	rjmp	.-1022   	; 0x5786 <__fp_round>

00005b84 <modf>:
    5b84:	fa 01       	movw	r30, r20
    5b86:	dc 01       	movw	r26, r24
    5b88:	aa 0f       	add	r26, r26
    5b8a:	bb 1f       	adc	r27, r27
    5b8c:	9b 01       	movw	r18, r22
    5b8e:	ac 01       	movw	r20, r24
    5b90:	bf 57       	subi	r27, 0x7F	; 127
    5b92:	28 f4       	brcc	.+10     	; 0x5b9e <modf+0x1a>
    5b94:	22 27       	eor	r18, r18
    5b96:	33 27       	eor	r19, r19
    5b98:	44 27       	eor	r20, r20
    5b9a:	50 78       	andi	r21, 0x80	; 128
    5b9c:	1f c0       	rjmp	.+62     	; 0x5bdc <modf+0x58>
    5b9e:	b7 51       	subi	r27, 0x17	; 23
    5ba0:	88 f4       	brcc	.+34     	; 0x5bc4 <modf+0x40>
    5ba2:	ab 2f       	mov	r26, r27
    5ba4:	00 24       	eor	r0, r0
    5ba6:	46 95       	lsr	r20
    5ba8:	37 95       	ror	r19
    5baa:	27 95       	ror	r18
    5bac:	01 1c       	adc	r0, r1
    5bae:	a3 95       	inc	r26
    5bb0:	d2 f3       	brmi	.-12     	; 0x5ba6 <modf+0x22>
    5bb2:	00 20       	and	r0, r0
    5bb4:	69 f0       	breq	.+26     	; 0x5bd0 <modf+0x4c>
    5bb6:	22 0f       	add	r18, r18
    5bb8:	33 1f       	adc	r19, r19
    5bba:	44 1f       	adc	r20, r20
    5bbc:	b3 95       	inc	r27
    5bbe:	da f3       	brmi	.-10     	; 0x5bb6 <modf+0x32>
    5bc0:	0d d0       	rcall	.+26     	; 0x5bdc <modf+0x58>
    5bc2:	67 cc       	rjmp	.-1842   	; 0x5492 <__subsf3>
    5bc4:	61 30       	cpi	r22, 0x01	; 1
    5bc6:	71 05       	cpc	r23, r1
    5bc8:	a0 e8       	ldi	r26, 0x80	; 128
    5bca:	8a 07       	cpc	r24, r26
    5bcc:	b9 46       	sbci	r27, 0x69	; 105
    5bce:	30 f4       	brcc	.+12     	; 0x5bdc <modf+0x58>
    5bd0:	9b 01       	movw	r18, r22
    5bd2:	ac 01       	movw	r20, r24
    5bd4:	66 27       	eor	r22, r22
    5bd6:	77 27       	eor	r23, r23
    5bd8:	88 27       	eor	r24, r24
    5bda:	90 78       	andi	r25, 0x80	; 128
    5bdc:	30 96       	adiw	r30, 0x00	; 0
    5bde:	21 f0       	breq	.+8      	; 0x5be8 <modf+0x64>
    5be0:	20 83       	st	Z, r18
    5be2:	31 83       	std	Z+1, r19	; 0x01
    5be4:	42 83       	std	Z+2, r20	; 0x02
    5be6:	53 83       	std	Z+3, r21	; 0x03
    5be8:	08 95       	ret

00005bea <__fp_mpack>:
    5bea:	9f 3f       	cpi	r25, 0xFF	; 255
    5bec:	31 f0       	breq	.+12     	; 0x5bfa <__fp_mpack_finite+0xc>

00005bee <__fp_mpack_finite>:
    5bee:	91 50       	subi	r25, 0x01	; 1
    5bf0:	20 f4       	brcc	.+8      	; 0x5bfa <__fp_mpack_finite+0xc>
    5bf2:	87 95       	ror	r24
    5bf4:	77 95       	ror	r23
    5bf6:	67 95       	ror	r22
    5bf8:	b7 95       	ror	r27
    5bfa:	88 0f       	add	r24, r24
    5bfc:	91 1d       	adc	r25, r1
    5bfe:	96 95       	lsr	r25
    5c00:	87 95       	ror	r24
    5c02:	97 f9       	bld	r25, 7
    5c04:	08 95       	ret

00005c06 <vfprintf>:
    5c06:	a1 e1       	ldi	r26, 0x11	; 17
    5c08:	b0 e0       	ldi	r27, 0x00	; 0
    5c0a:	e8 e0       	ldi	r30, 0x08	; 8
    5c0c:	fe e2       	ldi	r31, 0x2E	; 46
    5c0e:	b7 c3       	rjmp	.+1902   	; 0x637e <__prologue_saves__>
    5c10:	3c 01       	movw	r6, r24
    5c12:	7f 87       	std	Y+15, r23	; 0x0f
    5c14:	6e 87       	std	Y+14, r22	; 0x0e
    5c16:	6a 01       	movw	r12, r20
    5c18:	fc 01       	movw	r30, r24
    5c1a:	17 82       	std	Z+7, r1	; 0x07
    5c1c:	16 82       	std	Z+6, r1	; 0x06
    5c1e:	83 81       	ldd	r24, Z+3	; 0x03
    5c20:	81 fd       	sbrc	r24, 1
    5c22:	03 c0       	rjmp	.+6      	; 0x5c2a <vfprintf+0x24>
    5c24:	6f ef       	ldi	r22, 0xFF	; 255
    5c26:	7f ef       	ldi	r23, 0xFF	; 255
    5c28:	52 c3       	rjmp	.+1700   	; 0x62ce <vfprintf+0x6c8>
    5c2a:	9e 01       	movw	r18, r28
    5c2c:	2f 5f       	subi	r18, 0xFF	; 255
    5c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    5c30:	39 8b       	std	Y+17, r19	; 0x11
    5c32:	28 8b       	std	Y+16, r18	; 0x10
    5c34:	f3 01       	movw	r30, r6
    5c36:	23 81       	ldd	r18, Z+3	; 0x03
    5c38:	ee 85       	ldd	r30, Y+14	; 0x0e
    5c3a:	ff 85       	ldd	r31, Y+15	; 0x0f
    5c3c:	23 fd       	sbrc	r18, 3
    5c3e:	85 91       	lpm	r24, Z+
    5c40:	23 ff       	sbrs	r18, 3
    5c42:	81 91       	ld	r24, Z+
    5c44:	ff 87       	std	Y+15, r31	; 0x0f
    5c46:	ee 87       	std	Y+14, r30	; 0x0e
    5c48:	88 23       	and	r24, r24
    5c4a:	09 f4       	brne	.+2      	; 0x5c4e <vfprintf+0x48>
    5c4c:	3d c3       	rjmp	.+1658   	; 0x62c8 <vfprintf+0x6c2>
    5c4e:	85 32       	cpi	r24, 0x25	; 37
    5c50:	51 f4       	brne	.+20     	; 0x5c66 <vfprintf+0x60>
    5c52:	ee 85       	ldd	r30, Y+14	; 0x0e
    5c54:	ff 85       	ldd	r31, Y+15	; 0x0f
    5c56:	23 fd       	sbrc	r18, 3
    5c58:	85 91       	lpm	r24, Z+
    5c5a:	23 ff       	sbrs	r18, 3
    5c5c:	81 91       	ld	r24, Z+
    5c5e:	ff 87       	std	Y+15, r31	; 0x0f
    5c60:	ee 87       	std	Y+14, r30	; 0x0e
    5c62:	85 32       	cpi	r24, 0x25	; 37
    5c64:	21 f4       	brne	.+8      	; 0x5c6e <vfprintf+0x68>
    5c66:	90 e0       	ldi	r25, 0x00	; 0
    5c68:	b3 01       	movw	r22, r6
    5c6a:	20 d6       	rcall	.+3136   	; 0x68ac <fputc>
    5c6c:	e3 cf       	rjmp	.-58     	; 0x5c34 <vfprintf+0x2e>
    5c6e:	98 2f       	mov	r25, r24
    5c70:	10 e0       	ldi	r17, 0x00	; 0
    5c72:	88 24       	eor	r8, r8
    5c74:	99 24       	eor	r9, r9
    5c76:	10 32       	cpi	r17, 0x20	; 32
    5c78:	b0 f4       	brcc	.+44     	; 0x5ca6 <vfprintf+0xa0>
    5c7a:	9b 32       	cpi	r25, 0x2B	; 43
    5c7c:	69 f0       	breq	.+26     	; 0x5c98 <vfprintf+0x92>
    5c7e:	9c 32       	cpi	r25, 0x2C	; 44
    5c80:	28 f4       	brcc	.+10     	; 0x5c8c <vfprintf+0x86>
    5c82:	90 32       	cpi	r25, 0x20	; 32
    5c84:	51 f0       	breq	.+20     	; 0x5c9a <vfprintf+0x94>
    5c86:	93 32       	cpi	r25, 0x23	; 35
    5c88:	71 f4       	brne	.+28     	; 0x5ca6 <vfprintf+0xa0>
    5c8a:	0b c0       	rjmp	.+22     	; 0x5ca2 <vfprintf+0x9c>
    5c8c:	9d 32       	cpi	r25, 0x2D	; 45
    5c8e:	39 f0       	breq	.+14     	; 0x5c9e <vfprintf+0x98>
    5c90:	90 33       	cpi	r25, 0x30	; 48
    5c92:	49 f4       	brne	.+18     	; 0x5ca6 <vfprintf+0xa0>
    5c94:	11 60       	ori	r17, 0x01	; 1
    5c96:	28 c0       	rjmp	.+80     	; 0x5ce8 <vfprintf+0xe2>
    5c98:	12 60       	ori	r17, 0x02	; 2
    5c9a:	14 60       	ori	r17, 0x04	; 4
    5c9c:	25 c0       	rjmp	.+74     	; 0x5ce8 <vfprintf+0xe2>
    5c9e:	18 60       	ori	r17, 0x08	; 8
    5ca0:	23 c0       	rjmp	.+70     	; 0x5ce8 <vfprintf+0xe2>
    5ca2:	10 61       	ori	r17, 0x10	; 16
    5ca4:	21 c0       	rjmp	.+66     	; 0x5ce8 <vfprintf+0xe2>
    5ca6:	17 fd       	sbrc	r17, 7
    5ca8:	2a c0       	rjmp	.+84     	; 0x5cfe <vfprintf+0xf8>
    5caa:	89 2f       	mov	r24, r25
    5cac:	80 53       	subi	r24, 0x30	; 48
    5cae:	8a 30       	cpi	r24, 0x0A	; 10
    5cb0:	78 f4       	brcc	.+30     	; 0x5cd0 <vfprintf+0xca>
    5cb2:	16 ff       	sbrs	r17, 6
    5cb4:	06 c0       	rjmp	.+12     	; 0x5cc2 <vfprintf+0xbc>
    5cb6:	fa e0       	ldi	r31, 0x0A	; 10
    5cb8:	9f 9e       	mul	r9, r31
    5cba:	90 2c       	mov	r9, r0
    5cbc:	11 24       	eor	r1, r1
    5cbe:	98 0e       	add	r9, r24
    5cc0:	13 c0       	rjmp	.+38     	; 0x5ce8 <vfprintf+0xe2>
    5cc2:	3a e0       	ldi	r19, 0x0A	; 10
    5cc4:	83 9e       	mul	r8, r19
    5cc6:	80 2c       	mov	r8, r0
    5cc8:	11 24       	eor	r1, r1
    5cca:	88 0e       	add	r8, r24
    5ccc:	10 62       	ori	r17, 0x20	; 32
    5cce:	0c c0       	rjmp	.+24     	; 0x5ce8 <vfprintf+0xe2>
    5cd0:	9e 32       	cpi	r25, 0x2E	; 46
    5cd2:	21 f4       	brne	.+8      	; 0x5cdc <vfprintf+0xd6>
    5cd4:	16 fd       	sbrc	r17, 6
    5cd6:	f8 c2       	rjmp	.+1520   	; 0x62c8 <vfprintf+0x6c2>
    5cd8:	10 64       	ori	r17, 0x40	; 64
    5cda:	06 c0       	rjmp	.+12     	; 0x5ce8 <vfprintf+0xe2>
    5cdc:	9c 36       	cpi	r25, 0x6C	; 108
    5cde:	11 f4       	brne	.+4      	; 0x5ce4 <vfprintf+0xde>
    5ce0:	10 68       	ori	r17, 0x80	; 128
    5ce2:	02 c0       	rjmp	.+4      	; 0x5ce8 <vfprintf+0xe2>
    5ce4:	98 36       	cpi	r25, 0x68	; 104
    5ce6:	59 f4       	brne	.+22     	; 0x5cfe <vfprintf+0xf8>
    5ce8:	ee 85       	ldd	r30, Y+14	; 0x0e
    5cea:	ff 85       	ldd	r31, Y+15	; 0x0f
    5cec:	23 fd       	sbrc	r18, 3
    5cee:	95 91       	lpm	r25, Z+
    5cf0:	23 ff       	sbrs	r18, 3
    5cf2:	91 91       	ld	r25, Z+
    5cf4:	ff 87       	std	Y+15, r31	; 0x0f
    5cf6:	ee 87       	std	Y+14, r30	; 0x0e
    5cf8:	99 23       	and	r25, r25
    5cfa:	09 f0       	breq	.+2      	; 0x5cfe <vfprintf+0xf8>
    5cfc:	bc cf       	rjmp	.-136    	; 0x5c76 <vfprintf+0x70>
    5cfe:	89 2f       	mov	r24, r25
    5d00:	85 54       	subi	r24, 0x45	; 69
    5d02:	83 30       	cpi	r24, 0x03	; 3
    5d04:	20 f4       	brcc	.+8      	; 0x5d0e <vfprintf+0x108>
    5d06:	81 2f       	mov	r24, r17
    5d08:	80 61       	ori	r24, 0x10	; 16
    5d0a:	90 5e       	subi	r25, 0xE0	; 224
    5d0c:	07 c0       	rjmp	.+14     	; 0x5d1c <vfprintf+0x116>
    5d0e:	89 2f       	mov	r24, r25
    5d10:	85 56       	subi	r24, 0x65	; 101
    5d12:	83 30       	cpi	r24, 0x03	; 3
    5d14:	08 f0       	brcs	.+2      	; 0x5d18 <vfprintf+0x112>
    5d16:	8f c1       	rjmp	.+798    	; 0x6036 <vfprintf+0x430>
    5d18:	81 2f       	mov	r24, r17
    5d1a:	8f 7e       	andi	r24, 0xEF	; 239
    5d1c:	86 fd       	sbrc	r24, 6
    5d1e:	02 c0       	rjmp	.+4      	; 0x5d24 <vfprintf+0x11e>
    5d20:	76 e0       	ldi	r23, 0x06	; 6
    5d22:	97 2e       	mov	r9, r23
    5d24:	6f e3       	ldi	r22, 0x3F	; 63
    5d26:	f6 2e       	mov	r15, r22
    5d28:	f8 22       	and	r15, r24
    5d2a:	95 36       	cpi	r25, 0x65	; 101
    5d2c:	19 f4       	brne	.+6      	; 0x5d34 <vfprintf+0x12e>
    5d2e:	f0 e4       	ldi	r31, 0x40	; 64
    5d30:	ff 2a       	or	r15, r31
    5d32:	07 c0       	rjmp	.+14     	; 0x5d42 <vfprintf+0x13c>
    5d34:	96 36       	cpi	r25, 0x66	; 102
    5d36:	19 f4       	brne	.+6      	; 0x5d3e <vfprintf+0x138>
    5d38:	20 e8       	ldi	r18, 0x80	; 128
    5d3a:	f2 2a       	or	r15, r18
    5d3c:	02 c0       	rjmp	.+4      	; 0x5d42 <vfprintf+0x13c>
    5d3e:	91 10       	cpse	r9, r1
    5d40:	9a 94       	dec	r9
    5d42:	f7 fe       	sbrs	r15, 7
    5d44:	0a c0       	rjmp	.+20     	; 0x5d5a <vfprintf+0x154>
    5d46:	3b e3       	ldi	r19, 0x3B	; 59
    5d48:	39 15       	cp	r19, r9
    5d4a:	18 f4       	brcc	.+6      	; 0x5d52 <vfprintf+0x14c>
    5d4c:	5c e3       	ldi	r21, 0x3C	; 60
    5d4e:	b5 2e       	mov	r11, r21
    5d50:	02 c0       	rjmp	.+4      	; 0x5d56 <vfprintf+0x150>
    5d52:	b9 2c       	mov	r11, r9
    5d54:	b3 94       	inc	r11
    5d56:	27 e0       	ldi	r18, 0x07	; 7
    5d58:	09 c0       	rjmp	.+18     	; 0x5d6c <vfprintf+0x166>
    5d5a:	47 e0       	ldi	r20, 0x07	; 7
    5d5c:	49 15       	cp	r20, r9
    5d5e:	20 f4       	brcc	.+8      	; 0x5d68 <vfprintf+0x162>
    5d60:	bb 24       	eor	r11, r11
    5d62:	47 e0       	ldi	r20, 0x07	; 7
    5d64:	94 2e       	mov	r9, r20
    5d66:	f7 cf       	rjmp	.-18     	; 0x5d56 <vfprintf+0x150>
    5d68:	29 2d       	mov	r18, r9
    5d6a:	bb 24       	eor	r11, r11
    5d6c:	c6 01       	movw	r24, r12
    5d6e:	04 96       	adiw	r24, 0x04	; 4
    5d70:	9d 87       	std	Y+13, r25	; 0x0d
    5d72:	8c 87       	std	Y+12, r24	; 0x0c
    5d74:	f6 01       	movw	r30, r12
    5d76:	60 81       	ld	r22, Z
    5d78:	71 81       	ldd	r23, Z+1	; 0x01
    5d7a:	82 81       	ldd	r24, Z+2	; 0x02
    5d7c:	93 81       	ldd	r25, Z+3	; 0x03
    5d7e:	ae 01       	movw	r20, r28
    5d80:	4f 5f       	subi	r20, 0xFF	; 255
    5d82:	5f 4f       	sbci	r21, 0xFF	; 255
    5d84:	0b 2d       	mov	r16, r11
    5d86:	a4 d4       	rcall	.+2376   	; 0x66d0 <__ftoa_engine>
    5d88:	6c 01       	movw	r12, r24
    5d8a:	09 81       	ldd	r16, Y+1	; 0x01
    5d8c:	20 2e       	mov	r2, r16
    5d8e:	33 24       	eor	r3, r3
    5d90:	00 ff       	sbrs	r16, 0
    5d92:	04 c0       	rjmp	.+8      	; 0x5d9c <vfprintf+0x196>
    5d94:	03 fd       	sbrc	r16, 3
    5d96:	02 c0       	rjmp	.+4      	; 0x5d9c <vfprintf+0x196>
    5d98:	1d e2       	ldi	r17, 0x2D	; 45
    5d9a:	09 c0       	rjmp	.+18     	; 0x5dae <vfprintf+0x1a8>
    5d9c:	f1 fe       	sbrs	r15, 1
    5d9e:	02 c0       	rjmp	.+4      	; 0x5da4 <vfprintf+0x19e>
    5da0:	1b e2       	ldi	r17, 0x2B	; 43
    5da2:	05 c0       	rjmp	.+10     	; 0x5dae <vfprintf+0x1a8>
    5da4:	f2 fc       	sbrc	r15, 2
    5da6:	02 c0       	rjmp	.+4      	; 0x5dac <vfprintf+0x1a6>
    5da8:	10 e0       	ldi	r17, 0x00	; 0
    5daa:	01 c0       	rjmp	.+2      	; 0x5dae <vfprintf+0x1a8>
    5dac:	10 e2       	ldi	r17, 0x20	; 32
    5dae:	c1 01       	movw	r24, r2
    5db0:	8c 70       	andi	r24, 0x0C	; 12
    5db2:	90 70       	andi	r25, 0x00	; 0
    5db4:	89 2b       	or	r24, r25
    5db6:	a1 f1       	breq	.+104    	; 0x5e20 <vfprintf+0x21a>
    5db8:	11 23       	and	r17, r17
    5dba:	11 f4       	brne	.+4      	; 0x5dc0 <vfprintf+0x1ba>
    5dbc:	83 e0       	ldi	r24, 0x03	; 3
    5dbe:	01 c0       	rjmp	.+2      	; 0x5dc2 <vfprintf+0x1bc>
    5dc0:	84 e0       	ldi	r24, 0x04	; 4
    5dc2:	88 15       	cp	r24, r8
    5dc4:	10 f0       	brcs	.+4      	; 0x5dca <vfprintf+0x1c4>
    5dc6:	88 24       	eor	r8, r8
    5dc8:	09 c0       	rjmp	.+18     	; 0x5ddc <vfprintf+0x1d6>
    5dca:	88 1a       	sub	r8, r24
    5dcc:	f3 fc       	sbrc	r15, 3
    5dce:	06 c0       	rjmp	.+12     	; 0x5ddc <vfprintf+0x1d6>
    5dd0:	80 e2       	ldi	r24, 0x20	; 32
    5dd2:	90 e0       	ldi	r25, 0x00	; 0
    5dd4:	b3 01       	movw	r22, r6
    5dd6:	6a d5       	rcall	.+2772   	; 0x68ac <fputc>
    5dd8:	8a 94       	dec	r8
    5dda:	d1 f7       	brne	.-12     	; 0x5dd0 <vfprintf+0x1ca>
    5ddc:	11 23       	and	r17, r17
    5dde:	21 f0       	breq	.+8      	; 0x5de8 <vfprintf+0x1e2>
    5de0:	81 2f       	mov	r24, r17
    5de2:	90 e0       	ldi	r25, 0x00	; 0
    5de4:	b3 01       	movw	r22, r6
    5de6:	62 d5       	rcall	.+2756   	; 0x68ac <fputc>
    5de8:	23 fe       	sbrs	r2, 3
    5dea:	03 c0       	rjmp	.+6      	; 0x5df2 <vfprintf+0x1ec>
    5dec:	0f e5       	ldi	r16, 0x5F	; 95
    5dee:	15 e0       	ldi	r17, 0x05	; 5
    5df0:	0d c0       	rjmp	.+26     	; 0x5e0c <vfprintf+0x206>
    5df2:	03 e6       	ldi	r16, 0x63	; 99
    5df4:	15 e0       	ldi	r17, 0x05	; 5
    5df6:	0a c0       	rjmp	.+20     	; 0x5e0c <vfprintf+0x206>
    5df8:	e1 14       	cp	r14, r1
    5dfa:	f1 04       	cpc	r15, r1
    5dfc:	09 f0       	breq	.+2      	; 0x5e00 <vfprintf+0x1fa>
    5dfe:	80 52       	subi	r24, 0x20	; 32
    5e00:	90 e0       	ldi	r25, 0x00	; 0
    5e02:	b3 01       	movw	r22, r6
    5e04:	53 d5       	rcall	.+2726   	; 0x68ac <fputc>
    5e06:	0f 5f       	subi	r16, 0xFF	; 255
    5e08:	1f 4f       	sbci	r17, 0xFF	; 255
    5e0a:	05 c0       	rjmp	.+10     	; 0x5e16 <vfprintf+0x210>
    5e0c:	ef 2c       	mov	r14, r15
    5e0e:	ff 24       	eor	r15, r15
    5e10:	f0 e1       	ldi	r31, 0x10	; 16
    5e12:	ef 22       	and	r14, r31
    5e14:	ff 24       	eor	r15, r15
    5e16:	f8 01       	movw	r30, r16
    5e18:	84 91       	lpm	r24, Z+
    5e1a:	88 23       	and	r24, r24
    5e1c:	69 f7       	brne	.-38     	; 0x5df8 <vfprintf+0x1f2>
    5e1e:	08 c1       	rjmp	.+528    	; 0x6030 <vfprintf+0x42a>
    5e20:	f7 fe       	sbrs	r15, 7
    5e22:	12 c0       	rjmp	.+36     	; 0x5e48 <vfprintf+0x242>
    5e24:	bc 0c       	add	r11, r12
    5e26:	24 fe       	sbrs	r2, 4
    5e28:	04 c0       	rjmp	.+8      	; 0x5e32 <vfprintf+0x22c>
    5e2a:	8a 81       	ldd	r24, Y+2	; 0x02
    5e2c:	81 33       	cpi	r24, 0x31	; 49
    5e2e:	09 f4       	brne	.+2      	; 0x5e32 <vfprintf+0x22c>
    5e30:	ba 94       	dec	r11
    5e32:	1b 14       	cp	r1, r11
    5e34:	1c f0       	brlt	.+6      	; 0x5e3c <vfprintf+0x236>
    5e36:	bb 24       	eor	r11, r11
    5e38:	b3 94       	inc	r11
    5e3a:	2d c0       	rjmp	.+90     	; 0x5e96 <vfprintf+0x290>
    5e3c:	f8 e0       	ldi	r31, 0x08	; 8
    5e3e:	fb 15       	cp	r31, r11
    5e40:	50 f5       	brcc	.+84     	; 0x5e96 <vfprintf+0x290>
    5e42:	38 e0       	ldi	r19, 0x08	; 8
    5e44:	b3 2e       	mov	r11, r19
    5e46:	27 c0       	rjmp	.+78     	; 0x5e96 <vfprintf+0x290>
    5e48:	f6 fc       	sbrc	r15, 6
    5e4a:	25 c0       	rjmp	.+74     	; 0x5e96 <vfprintf+0x290>
    5e4c:	89 2d       	mov	r24, r9
    5e4e:	90 e0       	ldi	r25, 0x00	; 0
    5e50:	8c 15       	cp	r24, r12
    5e52:	9d 05       	cpc	r25, r13
    5e54:	4c f0       	brlt	.+18     	; 0x5e68 <vfprintf+0x262>
    5e56:	2c ef       	ldi	r18, 0xFC	; 252
    5e58:	c2 16       	cp	r12, r18
    5e5a:	2f ef       	ldi	r18, 0xFF	; 255
    5e5c:	d2 06       	cpc	r13, r18
    5e5e:	24 f0       	brlt	.+8      	; 0x5e68 <vfprintf+0x262>
    5e60:	30 e8       	ldi	r19, 0x80	; 128
    5e62:	f3 2a       	or	r15, r19
    5e64:	01 c0       	rjmp	.+2      	; 0x5e68 <vfprintf+0x262>
    5e66:	9a 94       	dec	r9
    5e68:	99 20       	and	r9, r9
    5e6a:	49 f0       	breq	.+18     	; 0x5e7e <vfprintf+0x278>
    5e6c:	e2 e0       	ldi	r30, 0x02	; 2
    5e6e:	f0 e0       	ldi	r31, 0x00	; 0
    5e70:	ec 0f       	add	r30, r28
    5e72:	fd 1f       	adc	r31, r29
    5e74:	e9 0d       	add	r30, r9
    5e76:	f1 1d       	adc	r31, r1
    5e78:	80 81       	ld	r24, Z
    5e7a:	80 33       	cpi	r24, 0x30	; 48
    5e7c:	a1 f3       	breq	.-24     	; 0x5e66 <vfprintf+0x260>
    5e7e:	f7 fe       	sbrs	r15, 7
    5e80:	0a c0       	rjmp	.+20     	; 0x5e96 <vfprintf+0x290>
    5e82:	b9 2c       	mov	r11, r9
    5e84:	b3 94       	inc	r11
    5e86:	89 2d       	mov	r24, r9
    5e88:	90 e0       	ldi	r25, 0x00	; 0
    5e8a:	c8 16       	cp	r12, r24
    5e8c:	d9 06       	cpc	r13, r25
    5e8e:	14 f0       	brlt	.+4      	; 0x5e94 <vfprintf+0x28e>
    5e90:	99 24       	eor	r9, r9
    5e92:	01 c0       	rjmp	.+2      	; 0x5e96 <vfprintf+0x290>
    5e94:	9c 18       	sub	r9, r12
    5e96:	f7 fc       	sbrc	r15, 7
    5e98:	03 c0       	rjmp	.+6      	; 0x5ea0 <vfprintf+0x29a>
    5e9a:	25 e0       	ldi	r18, 0x05	; 5
    5e9c:	30 e0       	ldi	r19, 0x00	; 0
    5e9e:	09 c0       	rjmp	.+18     	; 0x5eb2 <vfprintf+0x2ac>
    5ea0:	1c 14       	cp	r1, r12
    5ea2:	1d 04       	cpc	r1, r13
    5ea4:	1c f0       	brlt	.+6      	; 0x5eac <vfprintf+0x2a6>
    5ea6:	21 e0       	ldi	r18, 0x01	; 1
    5ea8:	30 e0       	ldi	r19, 0x00	; 0
    5eaa:	03 c0       	rjmp	.+6      	; 0x5eb2 <vfprintf+0x2ac>
    5eac:	96 01       	movw	r18, r12
    5eae:	2f 5f       	subi	r18, 0xFF	; 255
    5eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    5eb2:	11 23       	and	r17, r17
    5eb4:	11 f0       	breq	.+4      	; 0x5eba <vfprintf+0x2b4>
    5eb6:	2f 5f       	subi	r18, 0xFF	; 255
    5eb8:	3f 4f       	sbci	r19, 0xFF	; 255
    5eba:	99 20       	and	r9, r9
    5ebc:	29 f0       	breq	.+10     	; 0x5ec8 <vfprintf+0x2c2>
    5ebe:	89 2d       	mov	r24, r9
    5ec0:	90 e0       	ldi	r25, 0x00	; 0
    5ec2:	01 96       	adiw	r24, 0x01	; 1
    5ec4:	28 0f       	add	r18, r24
    5ec6:	39 1f       	adc	r19, r25
    5ec8:	88 2d       	mov	r24, r8
    5eca:	90 e0       	ldi	r25, 0x00	; 0
    5ecc:	28 17       	cp	r18, r24
    5ece:	39 07       	cpc	r19, r25
    5ed0:	14 f0       	brlt	.+4      	; 0x5ed6 <vfprintf+0x2d0>
    5ed2:	88 24       	eor	r8, r8
    5ed4:	01 c0       	rjmp	.+2      	; 0x5ed8 <vfprintf+0x2d2>
    5ed6:	82 1a       	sub	r8, r18
    5ed8:	4f 2c       	mov	r4, r15
    5eda:	55 24       	eor	r5, r5
    5edc:	c2 01       	movw	r24, r4
    5ede:	89 70       	andi	r24, 0x09	; 9
    5ee0:	90 70       	andi	r25, 0x00	; 0
    5ee2:	89 2b       	or	r24, r25
    5ee4:	31 f0       	breq	.+12     	; 0x5ef2 <vfprintf+0x2ec>
    5ee6:	07 c0       	rjmp	.+14     	; 0x5ef6 <vfprintf+0x2f0>
    5ee8:	80 e2       	ldi	r24, 0x20	; 32
    5eea:	90 e0       	ldi	r25, 0x00	; 0
    5eec:	b3 01       	movw	r22, r6
    5eee:	de d4       	rcall	.+2492   	; 0x68ac <fputc>
    5ef0:	8a 94       	dec	r8
    5ef2:	88 20       	and	r8, r8
    5ef4:	c9 f7       	brne	.-14     	; 0x5ee8 <vfprintf+0x2e2>
    5ef6:	11 23       	and	r17, r17
    5ef8:	21 f0       	breq	.+8      	; 0x5f02 <vfprintf+0x2fc>
    5efa:	81 2f       	mov	r24, r17
    5efc:	90 e0       	ldi	r25, 0x00	; 0
    5efe:	b3 01       	movw	r22, r6
    5f00:	d5 d4       	rcall	.+2474   	; 0x68ac <fputc>
    5f02:	43 fe       	sbrs	r4, 3
    5f04:	06 c0       	rjmp	.+12     	; 0x5f12 <vfprintf+0x30c>
    5f06:	07 c0       	rjmp	.+14     	; 0x5f16 <vfprintf+0x310>
    5f08:	80 e3       	ldi	r24, 0x30	; 48
    5f0a:	90 e0       	ldi	r25, 0x00	; 0
    5f0c:	b3 01       	movw	r22, r6
    5f0e:	ce d4       	rcall	.+2460   	; 0x68ac <fputc>
    5f10:	8a 94       	dec	r8
    5f12:	88 20       	and	r8, r8
    5f14:	c9 f7       	brne	.-14     	; 0x5f08 <vfprintf+0x302>
    5f16:	f7 fe       	sbrs	r15, 7
    5f18:	44 c0       	rjmp	.+136    	; 0x5fa2 <vfprintf+0x39c>
    5f1a:	86 01       	movw	r16, r12
    5f1c:	d7 fe       	sbrs	r13, 7
    5f1e:	02 c0       	rjmp	.+4      	; 0x5f24 <vfprintf+0x31e>
    5f20:	00 e0       	ldi	r16, 0x00	; 0
    5f22:	10 e0       	ldi	r17, 0x00	; 0
    5f24:	76 01       	movw	r14, r12
    5f26:	08 94       	sec
    5f28:	e1 1c       	adc	r14, r1
    5f2a:	f1 1c       	adc	r15, r1
    5f2c:	e0 1a       	sub	r14, r16
    5f2e:	f1 0a       	sbc	r15, r17
    5f30:	41 e0       	ldi	r20, 0x01	; 1
    5f32:	50 e0       	ldi	r21, 0x00	; 0
    5f34:	4c 0f       	add	r20, r28
    5f36:	5d 1f       	adc	r21, r29
    5f38:	e4 0e       	add	r14, r20
    5f3a:	f5 1e       	adc	r15, r21
    5f3c:	26 01       	movw	r4, r12
    5f3e:	4b 18       	sub	r4, r11
    5f40:	51 08       	sbc	r5, r1
    5f42:	89 2d       	mov	r24, r9
    5f44:	90 e0       	ldi	r25, 0x00	; 0
    5f46:	aa 24       	eor	r10, r10
    5f48:	bb 24       	eor	r11, r11
    5f4a:	a8 1a       	sub	r10, r24
    5f4c:	b9 0a       	sbc	r11, r25
    5f4e:	5f ef       	ldi	r21, 0xFF	; 255
    5f50:	0f 3f       	cpi	r16, 0xFF	; 255
    5f52:	15 07       	cpc	r17, r21
    5f54:	21 f4       	brne	.+8      	; 0x5f5e <vfprintf+0x358>
    5f56:	8e e2       	ldi	r24, 0x2E	; 46
    5f58:	90 e0       	ldi	r25, 0x00	; 0
    5f5a:	b3 01       	movw	r22, r6
    5f5c:	a7 d4       	rcall	.+2382   	; 0x68ac <fputc>
    5f5e:	c0 16       	cp	r12, r16
    5f60:	d1 06       	cpc	r13, r17
    5f62:	34 f0       	brlt	.+12     	; 0x5f70 <vfprintf+0x36a>
    5f64:	40 16       	cp	r4, r16
    5f66:	51 06       	cpc	r5, r17
    5f68:	1c f4       	brge	.+6      	; 0x5f70 <vfprintf+0x36a>
    5f6a:	f7 01       	movw	r30, r14
    5f6c:	80 81       	ld	r24, Z
    5f6e:	01 c0       	rjmp	.+2      	; 0x5f72 <vfprintf+0x36c>
    5f70:	80 e3       	ldi	r24, 0x30	; 48
    5f72:	01 50       	subi	r16, 0x01	; 1
    5f74:	10 40       	sbci	r17, 0x00	; 0
    5f76:	08 94       	sec
    5f78:	e1 1c       	adc	r14, r1
    5f7a:	f1 1c       	adc	r15, r1
    5f7c:	0a 15       	cp	r16, r10
    5f7e:	1b 05       	cpc	r17, r11
    5f80:	24 f0       	brlt	.+8      	; 0x5f8a <vfprintf+0x384>
    5f82:	90 e0       	ldi	r25, 0x00	; 0
    5f84:	b3 01       	movw	r22, r6
    5f86:	92 d4       	rcall	.+2340   	; 0x68ac <fputc>
    5f88:	e2 cf       	rjmp	.-60     	; 0x5f4e <vfprintf+0x348>
    5f8a:	0c 15       	cp	r16, r12
    5f8c:	1d 05       	cpc	r17, r13
    5f8e:	39 f4       	brne	.+14     	; 0x5f9e <vfprintf+0x398>
    5f90:	9a 81       	ldd	r25, Y+2	; 0x02
    5f92:	96 33       	cpi	r25, 0x36	; 54
    5f94:	18 f4       	brcc	.+6      	; 0x5f9c <vfprintf+0x396>
    5f96:	95 33       	cpi	r25, 0x35	; 53
    5f98:	11 f4       	brne	.+4      	; 0x5f9e <vfprintf+0x398>
    5f9a:	24 fe       	sbrs	r2, 4
    5f9c:	81 e3       	ldi	r24, 0x31	; 49
    5f9e:	90 e0       	ldi	r25, 0x00	; 0
    5fa0:	45 c0       	rjmp	.+138    	; 0x602c <vfprintf+0x426>
    5fa2:	8a 81       	ldd	r24, Y+2	; 0x02
    5fa4:	81 33       	cpi	r24, 0x31	; 49
    5fa6:	09 f0       	breq	.+2      	; 0x5faa <vfprintf+0x3a4>
    5fa8:	0f 7e       	andi	r16, 0xEF	; 239
    5faa:	90 e0       	ldi	r25, 0x00	; 0
    5fac:	b3 01       	movw	r22, r6
    5fae:	7e d4       	rcall	.+2300   	; 0x68ac <fputc>
    5fb0:	99 20       	and	r9, r9
    5fb2:	91 f0       	breq	.+36     	; 0x5fd8 <vfprintf+0x3d2>
    5fb4:	8e e2       	ldi	r24, 0x2E	; 46
    5fb6:	90 e0       	ldi	r25, 0x00	; 0
    5fb8:	b3 01       	movw	r22, r6
    5fba:	78 d4       	rcall	.+2288   	; 0x68ac <fputc>
    5fbc:	12 e0       	ldi	r17, 0x02	; 2
    5fbe:	e1 e0       	ldi	r30, 0x01	; 1
    5fc0:	f0 e0       	ldi	r31, 0x00	; 0
    5fc2:	ec 0f       	add	r30, r28
    5fc4:	fd 1f       	adc	r31, r29
    5fc6:	e1 0f       	add	r30, r17
    5fc8:	f1 1d       	adc	r31, r1
    5fca:	1f 5f       	subi	r17, 0xFF	; 255
    5fcc:	80 81       	ld	r24, Z
    5fce:	90 e0       	ldi	r25, 0x00	; 0
    5fd0:	b3 01       	movw	r22, r6
    5fd2:	6c d4       	rcall	.+2264   	; 0x68ac <fputc>
    5fd4:	9a 94       	dec	r9
    5fd6:	99 f7       	brne	.-26     	; 0x5fbe <vfprintf+0x3b8>
    5fd8:	44 fc       	sbrc	r4, 4
    5fda:	03 c0       	rjmp	.+6      	; 0x5fe2 <vfprintf+0x3dc>
    5fdc:	85 e6       	ldi	r24, 0x65	; 101
    5fde:	90 e0       	ldi	r25, 0x00	; 0
    5fe0:	02 c0       	rjmp	.+4      	; 0x5fe6 <vfprintf+0x3e0>
    5fe2:	85 e4       	ldi	r24, 0x45	; 69
    5fe4:	90 e0       	ldi	r25, 0x00	; 0
    5fe6:	b3 01       	movw	r22, r6
    5fe8:	61 d4       	rcall	.+2242   	; 0x68ac <fputc>
    5fea:	d7 fc       	sbrc	r13, 7
    5fec:	05 c0       	rjmp	.+10     	; 0x5ff8 <vfprintf+0x3f2>
    5fee:	c1 14       	cp	r12, r1
    5ff0:	d1 04       	cpc	r13, r1
    5ff2:	41 f4       	brne	.+16     	; 0x6004 <vfprintf+0x3fe>
    5ff4:	04 ff       	sbrs	r16, 4
    5ff6:	06 c0       	rjmp	.+12     	; 0x6004 <vfprintf+0x3fe>
    5ff8:	d0 94       	com	r13
    5ffa:	c1 94       	neg	r12
    5ffc:	d1 08       	sbc	r13, r1
    5ffe:	d3 94       	inc	r13
    6000:	8d e2       	ldi	r24, 0x2D	; 45
    6002:	01 c0       	rjmp	.+2      	; 0x6006 <vfprintf+0x400>
    6004:	8b e2       	ldi	r24, 0x2B	; 43
    6006:	90 e0       	ldi	r25, 0x00	; 0
    6008:	b3 01       	movw	r22, r6
    600a:	50 d4       	rcall	.+2208   	; 0x68ac <fputc>
    600c:	80 e3       	ldi	r24, 0x30	; 48
    600e:	05 c0       	rjmp	.+10     	; 0x601a <vfprintf+0x414>
    6010:	8f 5f       	subi	r24, 0xFF	; 255
    6012:	26 ef       	ldi	r18, 0xF6	; 246
    6014:	3f ef       	ldi	r19, 0xFF	; 255
    6016:	c2 0e       	add	r12, r18
    6018:	d3 1e       	adc	r13, r19
    601a:	3a e0       	ldi	r19, 0x0A	; 10
    601c:	c3 16       	cp	r12, r19
    601e:	d1 04       	cpc	r13, r1
    6020:	bc f7       	brge	.-18     	; 0x6010 <vfprintf+0x40a>
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	b3 01       	movw	r22, r6
    6026:	42 d4       	rcall	.+2180   	; 0x68ac <fputc>
    6028:	c6 01       	movw	r24, r12
    602a:	c0 96       	adiw	r24, 0x30	; 48
    602c:	b3 01       	movw	r22, r6
    602e:	3e d4       	rcall	.+2172   	; 0x68ac <fputc>
    6030:	cc 84       	ldd	r12, Y+12	; 0x0c
    6032:	dd 84       	ldd	r13, Y+13	; 0x0d
    6034:	46 c1       	rjmp	.+652    	; 0x62c2 <vfprintf+0x6bc>
    6036:	93 36       	cpi	r25, 0x63	; 99
    6038:	31 f0       	breq	.+12     	; 0x6046 <vfprintf+0x440>
    603a:	93 37       	cpi	r25, 0x73	; 115
    603c:	99 f0       	breq	.+38     	; 0x6064 <vfprintf+0x45e>
    603e:	93 35       	cpi	r25, 0x53	; 83
    6040:	09 f0       	breq	.+2      	; 0x6044 <vfprintf+0x43e>
    6042:	55 c0       	rjmp	.+170    	; 0x60ee <vfprintf+0x4e8>
    6044:	22 c0       	rjmp	.+68     	; 0x608a <vfprintf+0x484>
    6046:	f6 01       	movw	r30, r12
    6048:	80 81       	ld	r24, Z
    604a:	89 83       	std	Y+1, r24	; 0x01
    604c:	5e 01       	movw	r10, r28
    604e:	08 94       	sec
    6050:	a1 1c       	adc	r10, r1
    6052:	b1 1c       	adc	r11, r1
    6054:	22 e0       	ldi	r18, 0x02	; 2
    6056:	30 e0       	ldi	r19, 0x00	; 0
    6058:	c2 0e       	add	r12, r18
    605a:	d3 1e       	adc	r13, r19
    605c:	21 e0       	ldi	r18, 0x01	; 1
    605e:	e2 2e       	mov	r14, r18
    6060:	f1 2c       	mov	r15, r1
    6062:	11 c0       	rjmp	.+34     	; 0x6086 <vfprintf+0x480>
    6064:	f6 01       	movw	r30, r12
    6066:	a0 80       	ld	r10, Z
    6068:	b1 80       	ldd	r11, Z+1	; 0x01
    606a:	16 fd       	sbrc	r17, 6
    606c:	03 c0       	rjmp	.+6      	; 0x6074 <vfprintf+0x46e>
    606e:	6f ef       	ldi	r22, 0xFF	; 255
    6070:	7f ef       	ldi	r23, 0xFF	; 255
    6072:	02 c0       	rjmp	.+4      	; 0x6078 <vfprintf+0x472>
    6074:	69 2d       	mov	r22, r9
    6076:	70 e0       	ldi	r23, 0x00	; 0
    6078:	22 e0       	ldi	r18, 0x02	; 2
    607a:	30 e0       	ldi	r19, 0x00	; 0
    607c:	c2 0e       	add	r12, r18
    607e:	d3 1e       	adc	r13, r19
    6080:	c5 01       	movw	r24, r10
    6082:	09 d4       	rcall	.+2066   	; 0x6896 <strnlen>
    6084:	7c 01       	movw	r14, r24
    6086:	1f 77       	andi	r17, 0x7F	; 127
    6088:	12 c0       	rjmp	.+36     	; 0x60ae <vfprintf+0x4a8>
    608a:	f6 01       	movw	r30, r12
    608c:	a0 80       	ld	r10, Z
    608e:	b1 80       	ldd	r11, Z+1	; 0x01
    6090:	16 fd       	sbrc	r17, 6
    6092:	03 c0       	rjmp	.+6      	; 0x609a <vfprintf+0x494>
    6094:	6f ef       	ldi	r22, 0xFF	; 255
    6096:	7f ef       	ldi	r23, 0xFF	; 255
    6098:	02 c0       	rjmp	.+4      	; 0x609e <vfprintf+0x498>
    609a:	69 2d       	mov	r22, r9
    609c:	70 e0       	ldi	r23, 0x00	; 0
    609e:	22 e0       	ldi	r18, 0x02	; 2
    60a0:	30 e0       	ldi	r19, 0x00	; 0
    60a2:	c2 0e       	add	r12, r18
    60a4:	d3 1e       	adc	r13, r19
    60a6:	c5 01       	movw	r24, r10
    60a8:	eb d3       	rcall	.+2006   	; 0x6880 <strnlen_P>
    60aa:	7c 01       	movw	r14, r24
    60ac:	10 68       	ori	r17, 0x80	; 128
    60ae:	13 ff       	sbrs	r17, 3
    60b0:	06 c0       	rjmp	.+12     	; 0x60be <vfprintf+0x4b8>
    60b2:	19 c0       	rjmp	.+50     	; 0x60e6 <vfprintf+0x4e0>
    60b4:	80 e2       	ldi	r24, 0x20	; 32
    60b6:	90 e0       	ldi	r25, 0x00	; 0
    60b8:	b3 01       	movw	r22, r6
    60ba:	f8 d3       	rcall	.+2032   	; 0x68ac <fputc>
    60bc:	8a 94       	dec	r8
    60be:	88 2d       	mov	r24, r8
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	e8 16       	cp	r14, r24
    60c4:	f9 06       	cpc	r15, r25
    60c6:	b0 f3       	brcs	.-20     	; 0x60b4 <vfprintf+0x4ae>
    60c8:	0e c0       	rjmp	.+28     	; 0x60e6 <vfprintf+0x4e0>
    60ca:	f5 01       	movw	r30, r10
    60cc:	17 fd       	sbrc	r17, 7
    60ce:	85 91       	lpm	r24, Z+
    60d0:	17 ff       	sbrs	r17, 7
    60d2:	81 91       	ld	r24, Z+
    60d4:	5f 01       	movw	r10, r30
    60d6:	90 e0       	ldi	r25, 0x00	; 0
    60d8:	b3 01       	movw	r22, r6
    60da:	e8 d3       	rcall	.+2000   	; 0x68ac <fputc>
    60dc:	81 10       	cpse	r8, r1
    60de:	8a 94       	dec	r8
    60e0:	08 94       	sec
    60e2:	e1 08       	sbc	r14, r1
    60e4:	f1 08       	sbc	r15, r1
    60e6:	e1 14       	cp	r14, r1
    60e8:	f1 04       	cpc	r15, r1
    60ea:	79 f7       	brne	.-34     	; 0x60ca <vfprintf+0x4c4>
    60ec:	ea c0       	rjmp	.+468    	; 0x62c2 <vfprintf+0x6bc>
    60ee:	94 36       	cpi	r25, 0x64	; 100
    60f0:	11 f0       	breq	.+4      	; 0x60f6 <vfprintf+0x4f0>
    60f2:	99 36       	cpi	r25, 0x69	; 105
    60f4:	81 f5       	brne	.+96     	; 0x6156 <vfprintf+0x550>
    60f6:	17 ff       	sbrs	r17, 7
    60f8:	08 c0       	rjmp	.+16     	; 0x610a <vfprintf+0x504>
    60fa:	f6 01       	movw	r30, r12
    60fc:	20 81       	ld	r18, Z
    60fe:	31 81       	ldd	r19, Z+1	; 0x01
    6100:	42 81       	ldd	r20, Z+2	; 0x02
    6102:	53 81       	ldd	r21, Z+3	; 0x03
    6104:	84 e0       	ldi	r24, 0x04	; 4
    6106:	90 e0       	ldi	r25, 0x00	; 0
    6108:	0a c0       	rjmp	.+20     	; 0x611e <vfprintf+0x518>
    610a:	f6 01       	movw	r30, r12
    610c:	80 81       	ld	r24, Z
    610e:	91 81       	ldd	r25, Z+1	; 0x01
    6110:	9c 01       	movw	r18, r24
    6112:	44 27       	eor	r20, r20
    6114:	37 fd       	sbrc	r19, 7
    6116:	40 95       	com	r20
    6118:	54 2f       	mov	r21, r20
    611a:	82 e0       	ldi	r24, 0x02	; 2
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	c8 0e       	add	r12, r24
    6120:	d9 1e       	adc	r13, r25
    6122:	9f e6       	ldi	r25, 0x6F	; 111
    6124:	f9 2e       	mov	r15, r25
    6126:	f1 22       	and	r15, r17
    6128:	57 ff       	sbrs	r21, 7
    612a:	09 c0       	rjmp	.+18     	; 0x613e <vfprintf+0x538>
    612c:	50 95       	com	r21
    612e:	40 95       	com	r20
    6130:	30 95       	com	r19
    6132:	21 95       	neg	r18
    6134:	3f 4f       	sbci	r19, 0xFF	; 255
    6136:	4f 4f       	sbci	r20, 0xFF	; 255
    6138:	5f 4f       	sbci	r21, 0xFF	; 255
    613a:	90 e8       	ldi	r25, 0x80	; 128
    613c:	f9 2a       	or	r15, r25
    613e:	ca 01       	movw	r24, r20
    6140:	b9 01       	movw	r22, r18
    6142:	ae 01       	movw	r20, r28
    6144:	4f 5f       	subi	r20, 0xFF	; 255
    6146:	5f 4f       	sbci	r21, 0xFF	; 255
    6148:	2a e0       	ldi	r18, 0x0A	; 10
    614a:	30 e0       	ldi	r19, 0x00	; 0
    614c:	22 d4       	rcall	.+2116   	; 0x6992 <__ultoa_invert>
    614e:	e8 2e       	mov	r14, r24
    6150:	e8 89       	ldd	r30, Y+16	; 0x10
    6152:	ee 1a       	sub	r14, r30
    6154:	40 c0       	rjmp	.+128    	; 0x61d6 <vfprintf+0x5d0>
    6156:	95 37       	cpi	r25, 0x75	; 117
    6158:	21 f4       	brne	.+8      	; 0x6162 <vfprintf+0x55c>
    615a:	1f 7e       	andi	r17, 0xEF	; 239
    615c:	2a e0       	ldi	r18, 0x0A	; 10
    615e:	30 e0       	ldi	r19, 0x00	; 0
    6160:	1c c0       	rjmp	.+56     	; 0x619a <vfprintf+0x594>
    6162:	19 7f       	andi	r17, 0xF9	; 249
    6164:	9f 36       	cpi	r25, 0x6F	; 111
    6166:	61 f0       	breq	.+24     	; 0x6180 <vfprintf+0x57a>
    6168:	90 37       	cpi	r25, 0x70	; 112
    616a:	20 f4       	brcc	.+8      	; 0x6174 <vfprintf+0x56e>
    616c:	98 35       	cpi	r25, 0x58	; 88
    616e:	09 f0       	breq	.+2      	; 0x6172 <vfprintf+0x56c>
    6170:	ab c0       	rjmp	.+342    	; 0x62c8 <vfprintf+0x6c2>
    6172:	0f c0       	rjmp	.+30     	; 0x6192 <vfprintf+0x58c>
    6174:	90 37       	cpi	r25, 0x70	; 112
    6176:	39 f0       	breq	.+14     	; 0x6186 <vfprintf+0x580>
    6178:	98 37       	cpi	r25, 0x78	; 120
    617a:	09 f0       	breq	.+2      	; 0x617e <vfprintf+0x578>
    617c:	a5 c0       	rjmp	.+330    	; 0x62c8 <vfprintf+0x6c2>
    617e:	04 c0       	rjmp	.+8      	; 0x6188 <vfprintf+0x582>
    6180:	28 e0       	ldi	r18, 0x08	; 8
    6182:	30 e0       	ldi	r19, 0x00	; 0
    6184:	0a c0       	rjmp	.+20     	; 0x619a <vfprintf+0x594>
    6186:	10 61       	ori	r17, 0x10	; 16
    6188:	14 fd       	sbrc	r17, 4
    618a:	14 60       	ori	r17, 0x04	; 4
    618c:	20 e1       	ldi	r18, 0x10	; 16
    618e:	30 e0       	ldi	r19, 0x00	; 0
    6190:	04 c0       	rjmp	.+8      	; 0x619a <vfprintf+0x594>
    6192:	14 fd       	sbrc	r17, 4
    6194:	16 60       	ori	r17, 0x06	; 6
    6196:	20 e1       	ldi	r18, 0x10	; 16
    6198:	32 e0       	ldi	r19, 0x02	; 2
    619a:	17 ff       	sbrs	r17, 7
    619c:	08 c0       	rjmp	.+16     	; 0x61ae <vfprintf+0x5a8>
    619e:	f6 01       	movw	r30, r12
    61a0:	60 81       	ld	r22, Z
    61a2:	71 81       	ldd	r23, Z+1	; 0x01
    61a4:	82 81       	ldd	r24, Z+2	; 0x02
    61a6:	93 81       	ldd	r25, Z+3	; 0x03
    61a8:	44 e0       	ldi	r20, 0x04	; 4
    61aa:	50 e0       	ldi	r21, 0x00	; 0
    61ac:	08 c0       	rjmp	.+16     	; 0x61be <vfprintf+0x5b8>
    61ae:	f6 01       	movw	r30, r12
    61b0:	80 81       	ld	r24, Z
    61b2:	91 81       	ldd	r25, Z+1	; 0x01
    61b4:	bc 01       	movw	r22, r24
    61b6:	80 e0       	ldi	r24, 0x00	; 0
    61b8:	90 e0       	ldi	r25, 0x00	; 0
    61ba:	42 e0       	ldi	r20, 0x02	; 2
    61bc:	50 e0       	ldi	r21, 0x00	; 0
    61be:	c4 0e       	add	r12, r20
    61c0:	d5 1e       	adc	r13, r21
    61c2:	ae 01       	movw	r20, r28
    61c4:	4f 5f       	subi	r20, 0xFF	; 255
    61c6:	5f 4f       	sbci	r21, 0xFF	; 255
    61c8:	e4 d3       	rcall	.+1992   	; 0x6992 <__ultoa_invert>
    61ca:	e8 2e       	mov	r14, r24
    61cc:	58 89       	ldd	r21, Y+16	; 0x10
    61ce:	e5 1a       	sub	r14, r21
    61d0:	8f e7       	ldi	r24, 0x7F	; 127
    61d2:	f8 2e       	mov	r15, r24
    61d4:	f1 22       	and	r15, r17
    61d6:	f6 fe       	sbrs	r15, 6
    61d8:	0b c0       	rjmp	.+22     	; 0x61f0 <vfprintf+0x5ea>
    61da:	8e ef       	ldi	r24, 0xFE	; 254
    61dc:	f8 22       	and	r15, r24
    61de:	e9 14       	cp	r14, r9
    61e0:	38 f4       	brcc	.+14     	; 0x61f0 <vfprintf+0x5ea>
    61e2:	f4 fe       	sbrs	r15, 4
    61e4:	07 c0       	rjmp	.+14     	; 0x61f4 <vfprintf+0x5ee>
    61e6:	f2 fc       	sbrc	r15, 2
    61e8:	05 c0       	rjmp	.+10     	; 0x61f4 <vfprintf+0x5ee>
    61ea:	9f ee       	ldi	r25, 0xEF	; 239
    61ec:	f9 22       	and	r15, r25
    61ee:	02 c0       	rjmp	.+4      	; 0x61f4 <vfprintf+0x5ee>
    61f0:	1e 2d       	mov	r17, r14
    61f2:	01 c0       	rjmp	.+2      	; 0x61f6 <vfprintf+0x5f0>
    61f4:	19 2d       	mov	r17, r9
    61f6:	f4 fe       	sbrs	r15, 4
    61f8:	0d c0       	rjmp	.+26     	; 0x6214 <vfprintf+0x60e>
    61fa:	fe 01       	movw	r30, r28
    61fc:	ee 0d       	add	r30, r14
    61fe:	f1 1d       	adc	r31, r1
    6200:	80 81       	ld	r24, Z
    6202:	80 33       	cpi	r24, 0x30	; 48
    6204:	19 f4       	brne	.+6      	; 0x620c <vfprintf+0x606>
    6206:	e9 ee       	ldi	r30, 0xE9	; 233
    6208:	fe 22       	and	r15, r30
    620a:	08 c0       	rjmp	.+16     	; 0x621c <vfprintf+0x616>
    620c:	1f 5f       	subi	r17, 0xFF	; 255
    620e:	f2 fe       	sbrs	r15, 2
    6210:	05 c0       	rjmp	.+10     	; 0x621c <vfprintf+0x616>
    6212:	03 c0       	rjmp	.+6      	; 0x621a <vfprintf+0x614>
    6214:	8f 2d       	mov	r24, r15
    6216:	86 78       	andi	r24, 0x86	; 134
    6218:	09 f0       	breq	.+2      	; 0x621c <vfprintf+0x616>
    621a:	1f 5f       	subi	r17, 0xFF	; 255
    621c:	0f 2d       	mov	r16, r15
    621e:	f3 fc       	sbrc	r15, 3
    6220:	13 c0       	rjmp	.+38     	; 0x6248 <vfprintf+0x642>
    6222:	f0 fe       	sbrs	r15, 0
    6224:	0e c0       	rjmp	.+28     	; 0x6242 <vfprintf+0x63c>
    6226:	18 15       	cp	r17, r8
    6228:	10 f0       	brcs	.+4      	; 0x622e <vfprintf+0x628>
    622a:	9e 2c       	mov	r9, r14
    622c:	0a c0       	rjmp	.+20     	; 0x6242 <vfprintf+0x63c>
    622e:	9e 2c       	mov	r9, r14
    6230:	98 0c       	add	r9, r8
    6232:	91 1a       	sub	r9, r17
    6234:	18 2d       	mov	r17, r8
    6236:	05 c0       	rjmp	.+10     	; 0x6242 <vfprintf+0x63c>
    6238:	80 e2       	ldi	r24, 0x20	; 32
    623a:	90 e0       	ldi	r25, 0x00	; 0
    623c:	b3 01       	movw	r22, r6
    623e:	36 d3       	rcall	.+1644   	; 0x68ac <fputc>
    6240:	1f 5f       	subi	r17, 0xFF	; 255
    6242:	18 15       	cp	r17, r8
    6244:	c8 f3       	brcs	.-14     	; 0x6238 <vfprintf+0x632>
    6246:	04 c0       	rjmp	.+8      	; 0x6250 <vfprintf+0x64a>
    6248:	18 15       	cp	r17, r8
    624a:	10 f4       	brcc	.+4      	; 0x6250 <vfprintf+0x64a>
    624c:	81 1a       	sub	r8, r17
    624e:	01 c0       	rjmp	.+2      	; 0x6252 <vfprintf+0x64c>
    6250:	88 24       	eor	r8, r8
    6252:	04 ff       	sbrs	r16, 4
    6254:	0e c0       	rjmp	.+28     	; 0x6272 <vfprintf+0x66c>
    6256:	80 e3       	ldi	r24, 0x30	; 48
    6258:	90 e0       	ldi	r25, 0x00	; 0
    625a:	b3 01       	movw	r22, r6
    625c:	27 d3       	rcall	.+1614   	; 0x68ac <fputc>
    625e:	02 ff       	sbrs	r16, 2
    6260:	1b c0       	rjmp	.+54     	; 0x6298 <vfprintf+0x692>
    6262:	01 fd       	sbrc	r16, 1
    6264:	03 c0       	rjmp	.+6      	; 0x626c <vfprintf+0x666>
    6266:	88 e7       	ldi	r24, 0x78	; 120
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	0e c0       	rjmp	.+28     	; 0x6288 <vfprintf+0x682>
    626c:	88 e5       	ldi	r24, 0x58	; 88
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	0b c0       	rjmp	.+22     	; 0x6288 <vfprintf+0x682>
    6272:	80 2f       	mov	r24, r16
    6274:	86 78       	andi	r24, 0x86	; 134
    6276:	81 f0       	breq	.+32     	; 0x6298 <vfprintf+0x692>
    6278:	01 ff       	sbrs	r16, 1
    627a:	02 c0       	rjmp	.+4      	; 0x6280 <vfprintf+0x67a>
    627c:	8b e2       	ldi	r24, 0x2B	; 43
    627e:	01 c0       	rjmp	.+2      	; 0x6282 <vfprintf+0x67c>
    6280:	80 e2       	ldi	r24, 0x20	; 32
    6282:	f7 fc       	sbrc	r15, 7
    6284:	8d e2       	ldi	r24, 0x2D	; 45
    6286:	90 e0       	ldi	r25, 0x00	; 0
    6288:	b3 01       	movw	r22, r6
    628a:	10 d3       	rcall	.+1568   	; 0x68ac <fputc>
    628c:	05 c0       	rjmp	.+10     	; 0x6298 <vfprintf+0x692>
    628e:	80 e3       	ldi	r24, 0x30	; 48
    6290:	90 e0       	ldi	r25, 0x00	; 0
    6292:	b3 01       	movw	r22, r6
    6294:	0b d3       	rcall	.+1558   	; 0x68ac <fputc>
    6296:	9a 94       	dec	r9
    6298:	e9 14       	cp	r14, r9
    629a:	c8 f3       	brcs	.-14     	; 0x628e <vfprintf+0x688>
    629c:	ea 94       	dec	r14
    629e:	e1 e0       	ldi	r30, 0x01	; 1
    62a0:	f0 e0       	ldi	r31, 0x00	; 0
    62a2:	ec 0f       	add	r30, r28
    62a4:	fd 1f       	adc	r31, r29
    62a6:	ee 0d       	add	r30, r14
    62a8:	f1 1d       	adc	r31, r1
    62aa:	80 81       	ld	r24, Z
    62ac:	90 e0       	ldi	r25, 0x00	; 0
    62ae:	b3 01       	movw	r22, r6
    62b0:	fd d2       	rcall	.+1530   	; 0x68ac <fputc>
    62b2:	ee 20       	and	r14, r14
    62b4:	99 f7       	brne	.-26     	; 0x629c <vfprintf+0x696>
    62b6:	05 c0       	rjmp	.+10     	; 0x62c2 <vfprintf+0x6bc>
    62b8:	80 e2       	ldi	r24, 0x20	; 32
    62ba:	90 e0       	ldi	r25, 0x00	; 0
    62bc:	b3 01       	movw	r22, r6
    62be:	f6 d2       	rcall	.+1516   	; 0x68ac <fputc>
    62c0:	8a 94       	dec	r8
    62c2:	88 20       	and	r8, r8
    62c4:	c9 f7       	brne	.-14     	; 0x62b8 <vfprintf+0x6b2>
    62c6:	b6 cc       	rjmp	.-1684   	; 0x5c34 <vfprintf+0x2e>
    62c8:	f3 01       	movw	r30, r6
    62ca:	66 81       	ldd	r22, Z+6	; 0x06
    62cc:	77 81       	ldd	r23, Z+7	; 0x07
    62ce:	cb 01       	movw	r24, r22
    62d0:	61 96       	adiw	r28, 0x11	; 17
    62d2:	e2 e1       	ldi	r30, 0x12	; 18
    62d4:	70 c0       	rjmp	.+224    	; 0x63b6 <__epilogue_restores__>

000062d6 <__mulsi3>:
    62d6:	62 9f       	mul	r22, r18
    62d8:	d0 01       	movw	r26, r0
    62da:	73 9f       	mul	r23, r19
    62dc:	f0 01       	movw	r30, r0
    62de:	82 9f       	mul	r24, r18
    62e0:	e0 0d       	add	r30, r0
    62e2:	f1 1d       	adc	r31, r1
    62e4:	64 9f       	mul	r22, r20
    62e6:	e0 0d       	add	r30, r0
    62e8:	f1 1d       	adc	r31, r1
    62ea:	92 9f       	mul	r25, r18
    62ec:	f0 0d       	add	r31, r0
    62ee:	83 9f       	mul	r24, r19
    62f0:	f0 0d       	add	r31, r0
    62f2:	74 9f       	mul	r23, r20
    62f4:	f0 0d       	add	r31, r0
    62f6:	65 9f       	mul	r22, r21
    62f8:	f0 0d       	add	r31, r0
    62fa:	99 27       	eor	r25, r25
    62fc:	72 9f       	mul	r23, r18
    62fe:	b0 0d       	add	r27, r0
    6300:	e1 1d       	adc	r30, r1
    6302:	f9 1f       	adc	r31, r25
    6304:	63 9f       	mul	r22, r19
    6306:	b0 0d       	add	r27, r0
    6308:	e1 1d       	adc	r30, r1
    630a:	f9 1f       	adc	r31, r25
    630c:	bd 01       	movw	r22, r26
    630e:	cf 01       	movw	r24, r30
    6310:	11 24       	eor	r1, r1
    6312:	08 95       	ret

00006314 <__divmodhi4>:
    6314:	97 fb       	bst	r25, 7
    6316:	09 2e       	mov	r0, r25
    6318:	07 26       	eor	r0, r23
    631a:	0a d0       	rcall	.+20     	; 0x6330 <__divmodhi4_neg1>
    631c:	77 fd       	sbrc	r23, 7
    631e:	04 d0       	rcall	.+8      	; 0x6328 <__divmodhi4_neg2>
    6320:	65 d0       	rcall	.+202    	; 0x63ec <__udivmodhi4>
    6322:	06 d0       	rcall	.+12     	; 0x6330 <__divmodhi4_neg1>
    6324:	00 20       	and	r0, r0
    6326:	1a f4       	brpl	.+6      	; 0x632e <__divmodhi4_exit>

00006328 <__divmodhi4_neg2>:
    6328:	70 95       	com	r23
    632a:	61 95       	neg	r22
    632c:	7f 4f       	sbci	r23, 0xFF	; 255

0000632e <__divmodhi4_exit>:
    632e:	08 95       	ret

00006330 <__divmodhi4_neg1>:
    6330:	f6 f7       	brtc	.-4      	; 0x632e <__divmodhi4_exit>
    6332:	90 95       	com	r25
    6334:	81 95       	neg	r24
    6336:	9f 4f       	sbci	r25, 0xFF	; 255
    6338:	08 95       	ret

0000633a <__udivmodsi4>:
    633a:	a1 e2       	ldi	r26, 0x21	; 33
    633c:	1a 2e       	mov	r1, r26
    633e:	aa 1b       	sub	r26, r26
    6340:	bb 1b       	sub	r27, r27
    6342:	fd 01       	movw	r30, r26
    6344:	0d c0       	rjmp	.+26     	; 0x6360 <__udivmodsi4_ep>

00006346 <__udivmodsi4_loop>:
    6346:	aa 1f       	adc	r26, r26
    6348:	bb 1f       	adc	r27, r27
    634a:	ee 1f       	adc	r30, r30
    634c:	ff 1f       	adc	r31, r31
    634e:	a2 17       	cp	r26, r18
    6350:	b3 07       	cpc	r27, r19
    6352:	e4 07       	cpc	r30, r20
    6354:	f5 07       	cpc	r31, r21
    6356:	20 f0       	brcs	.+8      	; 0x6360 <__udivmodsi4_ep>
    6358:	a2 1b       	sub	r26, r18
    635a:	b3 0b       	sbc	r27, r19
    635c:	e4 0b       	sbc	r30, r20
    635e:	f5 0b       	sbc	r31, r21

00006360 <__udivmodsi4_ep>:
    6360:	66 1f       	adc	r22, r22
    6362:	77 1f       	adc	r23, r23
    6364:	88 1f       	adc	r24, r24
    6366:	99 1f       	adc	r25, r25
    6368:	1a 94       	dec	r1
    636a:	69 f7       	brne	.-38     	; 0x6346 <__udivmodsi4_loop>
    636c:	60 95       	com	r22
    636e:	70 95       	com	r23
    6370:	80 95       	com	r24
    6372:	90 95       	com	r25
    6374:	9b 01       	movw	r18, r22
    6376:	ac 01       	movw	r20, r24
    6378:	bd 01       	movw	r22, r26
    637a:	cf 01       	movw	r24, r30
    637c:	08 95       	ret

0000637e <__prologue_saves__>:
    637e:	2f 92       	push	r2
    6380:	3f 92       	push	r3
    6382:	4f 92       	push	r4
    6384:	5f 92       	push	r5
    6386:	6f 92       	push	r6
    6388:	7f 92       	push	r7
    638a:	8f 92       	push	r8
    638c:	9f 92       	push	r9
    638e:	af 92       	push	r10
    6390:	bf 92       	push	r11
    6392:	cf 92       	push	r12
    6394:	df 92       	push	r13
    6396:	ef 92       	push	r14
    6398:	ff 92       	push	r15
    639a:	0f 93       	push	r16
    639c:	1f 93       	push	r17
    639e:	cf 93       	push	r28
    63a0:	df 93       	push	r29
    63a2:	cd b7       	in	r28, 0x3d	; 61
    63a4:	de b7       	in	r29, 0x3e	; 62
    63a6:	ca 1b       	sub	r28, r26
    63a8:	db 0b       	sbc	r29, r27
    63aa:	0f b6       	in	r0, 0x3f	; 63
    63ac:	f8 94       	cli
    63ae:	de bf       	out	0x3e, r29	; 62
    63b0:	0f be       	out	0x3f, r0	; 63
    63b2:	cd bf       	out	0x3d, r28	; 61
    63b4:	09 94       	ijmp

000063b6 <__epilogue_restores__>:
    63b6:	2a 88       	ldd	r2, Y+18	; 0x12
    63b8:	39 88       	ldd	r3, Y+17	; 0x11
    63ba:	48 88       	ldd	r4, Y+16	; 0x10
    63bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    63be:	6e 84       	ldd	r6, Y+14	; 0x0e
    63c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    63c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    63c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    63c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    63c8:	b9 84       	ldd	r11, Y+9	; 0x09
    63ca:	c8 84       	ldd	r12, Y+8	; 0x08
    63cc:	df 80       	ldd	r13, Y+7	; 0x07
    63ce:	ee 80       	ldd	r14, Y+6	; 0x06
    63d0:	fd 80       	ldd	r15, Y+5	; 0x05
    63d2:	0c 81       	ldd	r16, Y+4	; 0x04
    63d4:	1b 81       	ldd	r17, Y+3	; 0x03
    63d6:	aa 81       	ldd	r26, Y+2	; 0x02
    63d8:	b9 81       	ldd	r27, Y+1	; 0x01
    63da:	ce 0f       	add	r28, r30
    63dc:	d1 1d       	adc	r29, r1
    63de:	0f b6       	in	r0, 0x3f	; 63
    63e0:	f8 94       	cli
    63e2:	de bf       	out	0x3e, r29	; 62
    63e4:	0f be       	out	0x3f, r0	; 63
    63e6:	cd bf       	out	0x3d, r28	; 61
    63e8:	ed 01       	movw	r28, r26
    63ea:	08 95       	ret

000063ec <__udivmodhi4>:
    63ec:	aa 1b       	sub	r26, r26
    63ee:	bb 1b       	sub	r27, r27
    63f0:	51 e1       	ldi	r21, 0x11	; 17
    63f2:	07 c0       	rjmp	.+14     	; 0x6402 <__udivmodhi4_ep>

000063f4 <__udivmodhi4_loop>:
    63f4:	aa 1f       	adc	r26, r26
    63f6:	bb 1f       	adc	r27, r27
    63f8:	a6 17       	cp	r26, r22
    63fa:	b7 07       	cpc	r27, r23
    63fc:	10 f0       	brcs	.+4      	; 0x6402 <__udivmodhi4_ep>
    63fe:	a6 1b       	sub	r26, r22
    6400:	b7 0b       	sbc	r27, r23

00006402 <__udivmodhi4_ep>:
    6402:	88 1f       	adc	r24, r24
    6404:	99 1f       	adc	r25, r25
    6406:	5a 95       	dec	r21
    6408:	a9 f7       	brne	.-22     	; 0x63f4 <__udivmodhi4_loop>
    640a:	80 95       	com	r24
    640c:	90 95       	com	r25
    640e:	bc 01       	movw	r22, r24
    6410:	cd 01       	movw	r24, r26
    6412:	08 95       	ret

00006414 <malloc>:
    6414:	cf 93       	push	r28
    6416:	df 93       	push	r29
    6418:	bc 01       	movw	r22, r24
    641a:	82 30       	cpi	r24, 0x02	; 2
    641c:	91 05       	cpc	r25, r1
    641e:	10 f4       	brcc	.+4      	; 0x6424 <malloc+0x10>
    6420:	62 e0       	ldi	r22, 0x02	; 2
    6422:	70 e0       	ldi	r23, 0x00	; 0
    6424:	a0 91 21 07 	lds	r26, 0x0721
    6428:	b0 91 22 07 	lds	r27, 0x0722
    642c:	ed 01       	movw	r28, r26
    642e:	e0 e0       	ldi	r30, 0x00	; 0
    6430:	f0 e0       	ldi	r31, 0x00	; 0
    6432:	40 e0       	ldi	r20, 0x00	; 0
    6434:	50 e0       	ldi	r21, 0x00	; 0
    6436:	21 c0       	rjmp	.+66     	; 0x647a <malloc+0x66>
    6438:	88 81       	ld	r24, Y
    643a:	99 81       	ldd	r25, Y+1	; 0x01
    643c:	86 17       	cp	r24, r22
    643e:	97 07       	cpc	r25, r23
    6440:	69 f4       	brne	.+26     	; 0x645c <malloc+0x48>
    6442:	8a 81       	ldd	r24, Y+2	; 0x02
    6444:	9b 81       	ldd	r25, Y+3	; 0x03
    6446:	30 97       	sbiw	r30, 0x00	; 0
    6448:	19 f0       	breq	.+6      	; 0x6450 <malloc+0x3c>
    644a:	93 83       	std	Z+3, r25	; 0x03
    644c:	82 83       	std	Z+2, r24	; 0x02
    644e:	04 c0       	rjmp	.+8      	; 0x6458 <malloc+0x44>
    6450:	90 93 22 07 	sts	0x0722, r25
    6454:	80 93 21 07 	sts	0x0721, r24
    6458:	fe 01       	movw	r30, r28
    645a:	34 c0       	rjmp	.+104    	; 0x64c4 <malloc+0xb0>
    645c:	68 17       	cp	r22, r24
    645e:	79 07       	cpc	r23, r25
    6460:	38 f4       	brcc	.+14     	; 0x6470 <malloc+0x5c>
    6462:	41 15       	cp	r20, r1
    6464:	51 05       	cpc	r21, r1
    6466:	19 f0       	breq	.+6      	; 0x646e <malloc+0x5a>
    6468:	84 17       	cp	r24, r20
    646a:	95 07       	cpc	r25, r21
    646c:	08 f4       	brcc	.+2      	; 0x6470 <malloc+0x5c>
    646e:	ac 01       	movw	r20, r24
    6470:	fe 01       	movw	r30, r28
    6472:	8a 81       	ldd	r24, Y+2	; 0x02
    6474:	9b 81       	ldd	r25, Y+3	; 0x03
    6476:	9c 01       	movw	r18, r24
    6478:	e9 01       	movw	r28, r18
    647a:	20 97       	sbiw	r28, 0x00	; 0
    647c:	e9 f6       	brne	.-70     	; 0x6438 <malloc+0x24>
    647e:	41 15       	cp	r20, r1
    6480:	51 05       	cpc	r21, r1
    6482:	a9 f1       	breq	.+106    	; 0x64ee <malloc+0xda>
    6484:	ca 01       	movw	r24, r20
    6486:	86 1b       	sub	r24, r22
    6488:	97 0b       	sbc	r25, r23
    648a:	04 97       	sbiw	r24, 0x04	; 4
    648c:	08 f4       	brcc	.+2      	; 0x6490 <malloc+0x7c>
    648e:	ba 01       	movw	r22, r20
    6490:	e0 e0       	ldi	r30, 0x00	; 0
    6492:	f0 e0       	ldi	r31, 0x00	; 0
    6494:	2a c0       	rjmp	.+84     	; 0x64ea <malloc+0xd6>
    6496:	8d 91       	ld	r24, X+
    6498:	9c 91       	ld	r25, X
    649a:	11 97       	sbiw	r26, 0x01	; 1
    649c:	84 17       	cp	r24, r20
    649e:	95 07       	cpc	r25, r21
    64a0:	f9 f4       	brne	.+62     	; 0x64e0 <malloc+0xcc>
    64a2:	64 17       	cp	r22, r20
    64a4:	75 07       	cpc	r23, r21
    64a6:	81 f4       	brne	.+32     	; 0x64c8 <malloc+0xb4>
    64a8:	12 96       	adiw	r26, 0x02	; 2
    64aa:	8d 91       	ld	r24, X+
    64ac:	9c 91       	ld	r25, X
    64ae:	13 97       	sbiw	r26, 0x03	; 3
    64b0:	30 97       	sbiw	r30, 0x00	; 0
    64b2:	19 f0       	breq	.+6      	; 0x64ba <malloc+0xa6>
    64b4:	93 83       	std	Z+3, r25	; 0x03
    64b6:	82 83       	std	Z+2, r24	; 0x02
    64b8:	04 c0       	rjmp	.+8      	; 0x64c2 <malloc+0xae>
    64ba:	90 93 22 07 	sts	0x0722, r25
    64be:	80 93 21 07 	sts	0x0721, r24
    64c2:	fd 01       	movw	r30, r26
    64c4:	32 96       	adiw	r30, 0x02	; 2
    64c6:	4f c0       	rjmp	.+158    	; 0x6566 <malloc+0x152>
    64c8:	ca 01       	movw	r24, r20
    64ca:	86 1b       	sub	r24, r22
    64cc:	97 0b       	sbc	r25, r23
    64ce:	fd 01       	movw	r30, r26
    64d0:	e8 0f       	add	r30, r24
    64d2:	f9 1f       	adc	r31, r25
    64d4:	61 93       	st	Z+, r22
    64d6:	71 93       	st	Z+, r23
    64d8:	02 97       	sbiw	r24, 0x02	; 2
    64da:	8d 93       	st	X+, r24
    64dc:	9c 93       	st	X, r25
    64de:	43 c0       	rjmp	.+134    	; 0x6566 <malloc+0x152>
    64e0:	fd 01       	movw	r30, r26
    64e2:	82 81       	ldd	r24, Z+2	; 0x02
    64e4:	93 81       	ldd	r25, Z+3	; 0x03
    64e6:	9c 01       	movw	r18, r24
    64e8:	d9 01       	movw	r26, r18
    64ea:	10 97       	sbiw	r26, 0x00	; 0
    64ec:	a1 f6       	brne	.-88     	; 0x6496 <malloc+0x82>
    64ee:	80 91 1f 07 	lds	r24, 0x071F
    64f2:	90 91 20 07 	lds	r25, 0x0720
    64f6:	89 2b       	or	r24, r25
    64f8:	41 f4       	brne	.+16     	; 0x650a <malloc+0xf6>
    64fa:	80 91 e6 03 	lds	r24, 0x03E6
    64fe:	90 91 e7 03 	lds	r25, 0x03E7
    6502:	90 93 20 07 	sts	0x0720, r25
    6506:	80 93 1f 07 	sts	0x071F, r24
    650a:	40 91 e8 03 	lds	r20, 0x03E8
    650e:	50 91 e9 03 	lds	r21, 0x03E9
    6512:	41 15       	cp	r20, r1
    6514:	51 05       	cpc	r21, r1
    6516:	41 f4       	brne	.+16     	; 0x6528 <malloc+0x114>
    6518:	4d b7       	in	r20, 0x3d	; 61
    651a:	5e b7       	in	r21, 0x3e	; 62
    651c:	80 91 e4 03 	lds	r24, 0x03E4
    6520:	90 91 e5 03 	lds	r25, 0x03E5
    6524:	48 1b       	sub	r20, r24
    6526:	59 0b       	sbc	r21, r25
    6528:	20 91 1f 07 	lds	r18, 0x071F
    652c:	30 91 20 07 	lds	r19, 0x0720
    6530:	24 17       	cp	r18, r20
    6532:	35 07       	cpc	r19, r21
    6534:	b0 f4       	brcc	.+44     	; 0x6562 <malloc+0x14e>
    6536:	ca 01       	movw	r24, r20
    6538:	82 1b       	sub	r24, r18
    653a:	93 0b       	sbc	r25, r19
    653c:	86 17       	cp	r24, r22
    653e:	97 07       	cpc	r25, r23
    6540:	80 f0       	brcs	.+32     	; 0x6562 <malloc+0x14e>
    6542:	ab 01       	movw	r20, r22
    6544:	4e 5f       	subi	r20, 0xFE	; 254
    6546:	5f 4f       	sbci	r21, 0xFF	; 255
    6548:	84 17       	cp	r24, r20
    654a:	95 07       	cpc	r25, r21
    654c:	50 f0       	brcs	.+20     	; 0x6562 <malloc+0x14e>
    654e:	42 0f       	add	r20, r18
    6550:	53 1f       	adc	r21, r19
    6552:	50 93 20 07 	sts	0x0720, r21
    6556:	40 93 1f 07 	sts	0x071F, r20
    655a:	f9 01       	movw	r30, r18
    655c:	61 93       	st	Z+, r22
    655e:	71 93       	st	Z+, r23
    6560:	02 c0       	rjmp	.+4      	; 0x6566 <malloc+0x152>
    6562:	e0 e0       	ldi	r30, 0x00	; 0
    6564:	f0 e0       	ldi	r31, 0x00	; 0
    6566:	cf 01       	movw	r24, r30
    6568:	df 91       	pop	r29
    656a:	cf 91       	pop	r28
    656c:	08 95       	ret

0000656e <free>:
    656e:	cf 93       	push	r28
    6570:	df 93       	push	r29
    6572:	00 97       	sbiw	r24, 0x00	; 0
    6574:	09 f4       	brne	.+2      	; 0x6578 <free+0xa>
    6576:	50 c0       	rjmp	.+160    	; 0x6618 <free+0xaa>
    6578:	ec 01       	movw	r28, r24
    657a:	22 97       	sbiw	r28, 0x02	; 2
    657c:	1b 82       	std	Y+3, r1	; 0x03
    657e:	1a 82       	std	Y+2, r1	; 0x02
    6580:	a0 91 21 07 	lds	r26, 0x0721
    6584:	b0 91 22 07 	lds	r27, 0x0722
    6588:	10 97       	sbiw	r26, 0x00	; 0
    658a:	09 f1       	breq	.+66     	; 0x65ce <free+0x60>
    658c:	40 e0       	ldi	r20, 0x00	; 0
    658e:	50 e0       	ldi	r21, 0x00	; 0
    6590:	ac 17       	cp	r26, r28
    6592:	bd 07       	cpc	r27, r29
    6594:	08 f1       	brcs	.+66     	; 0x65d8 <free+0x6a>
    6596:	bb 83       	std	Y+3, r27	; 0x03
    6598:	aa 83       	std	Y+2, r26	; 0x02
    659a:	fe 01       	movw	r30, r28
    659c:	21 91       	ld	r18, Z+
    659e:	31 91       	ld	r19, Z+
    65a0:	e2 0f       	add	r30, r18
    65a2:	f3 1f       	adc	r31, r19
    65a4:	ae 17       	cp	r26, r30
    65a6:	bf 07       	cpc	r27, r31
    65a8:	79 f4       	brne	.+30     	; 0x65c8 <free+0x5a>
    65aa:	8d 91       	ld	r24, X+
    65ac:	9c 91       	ld	r25, X
    65ae:	11 97       	sbiw	r26, 0x01	; 1
    65b0:	28 0f       	add	r18, r24
    65b2:	39 1f       	adc	r19, r25
    65b4:	2e 5f       	subi	r18, 0xFE	; 254
    65b6:	3f 4f       	sbci	r19, 0xFF	; 255
    65b8:	39 83       	std	Y+1, r19	; 0x01
    65ba:	28 83       	st	Y, r18
    65bc:	12 96       	adiw	r26, 0x02	; 2
    65be:	8d 91       	ld	r24, X+
    65c0:	9c 91       	ld	r25, X
    65c2:	13 97       	sbiw	r26, 0x03	; 3
    65c4:	9b 83       	std	Y+3, r25	; 0x03
    65c6:	8a 83       	std	Y+2, r24	; 0x02
    65c8:	41 15       	cp	r20, r1
    65ca:	51 05       	cpc	r21, r1
    65cc:	71 f4       	brne	.+28     	; 0x65ea <free+0x7c>
    65ce:	d0 93 22 07 	sts	0x0722, r29
    65d2:	c0 93 21 07 	sts	0x0721, r28
    65d6:	20 c0       	rjmp	.+64     	; 0x6618 <free+0xaa>
    65d8:	12 96       	adiw	r26, 0x02	; 2
    65da:	8d 91       	ld	r24, X+
    65dc:	9c 91       	ld	r25, X
    65de:	13 97       	sbiw	r26, 0x03	; 3
    65e0:	ad 01       	movw	r20, r26
    65e2:	00 97       	sbiw	r24, 0x00	; 0
    65e4:	11 f0       	breq	.+4      	; 0x65ea <free+0x7c>
    65e6:	dc 01       	movw	r26, r24
    65e8:	d3 cf       	rjmp	.-90     	; 0x6590 <free+0x22>
    65ea:	fa 01       	movw	r30, r20
    65ec:	d3 83       	std	Z+3, r29	; 0x03
    65ee:	c2 83       	std	Z+2, r28	; 0x02
    65f0:	21 91       	ld	r18, Z+
    65f2:	31 91       	ld	r19, Z+
    65f4:	e2 0f       	add	r30, r18
    65f6:	f3 1f       	adc	r31, r19
    65f8:	ce 17       	cp	r28, r30
    65fa:	df 07       	cpc	r29, r31
    65fc:	69 f4       	brne	.+26     	; 0x6618 <free+0xaa>
    65fe:	88 81       	ld	r24, Y
    6600:	99 81       	ldd	r25, Y+1	; 0x01
    6602:	28 0f       	add	r18, r24
    6604:	39 1f       	adc	r19, r25
    6606:	2e 5f       	subi	r18, 0xFE	; 254
    6608:	3f 4f       	sbci	r19, 0xFF	; 255
    660a:	fa 01       	movw	r30, r20
    660c:	31 83       	std	Z+1, r19	; 0x01
    660e:	20 83       	st	Z, r18
    6610:	8a 81       	ldd	r24, Y+2	; 0x02
    6612:	9b 81       	ldd	r25, Y+3	; 0x03
    6614:	93 83       	std	Z+3, r25	; 0x03
    6616:	82 83       	std	Z+2, r24	; 0x02
    6618:	df 91       	pop	r29
    661a:	cf 91       	pop	r28
    661c:	08 95       	ret

0000661e <do_rand>:
    661e:	a0 e0       	ldi	r26, 0x00	; 0
    6620:	b0 e0       	ldi	r27, 0x00	; 0
    6622:	e4 e1       	ldi	r30, 0x14	; 20
    6624:	f3 e3       	ldi	r31, 0x33	; 51
    6626:	b3 ce       	rjmp	.-666    	; 0x638e <__prologue_saves__+0x10>
    6628:	ec 01       	movw	r28, r24
    662a:	a8 80       	ld	r10, Y
    662c:	b9 80       	ldd	r11, Y+1	; 0x01
    662e:	ca 80       	ldd	r12, Y+2	; 0x02
    6630:	db 80       	ldd	r13, Y+3	; 0x03
    6632:	a1 14       	cp	r10, r1
    6634:	b1 04       	cpc	r11, r1
    6636:	c1 04       	cpc	r12, r1
    6638:	d1 04       	cpc	r13, r1
    663a:	41 f4       	brne	.+16     	; 0x664c <do_rand+0x2e>
    663c:	84 e2       	ldi	r24, 0x24	; 36
    663e:	a8 2e       	mov	r10, r24
    6640:	89 ed       	ldi	r24, 0xD9	; 217
    6642:	b8 2e       	mov	r11, r24
    6644:	8b e5       	ldi	r24, 0x5B	; 91
    6646:	c8 2e       	mov	r12, r24
    6648:	87 e0       	ldi	r24, 0x07	; 7
    664a:	d8 2e       	mov	r13, r24
    664c:	c6 01       	movw	r24, r12
    664e:	b5 01       	movw	r22, r10
    6650:	2d e1       	ldi	r18, 0x1D	; 29
    6652:	33 ef       	ldi	r19, 0xF3	; 243
    6654:	41 e0       	ldi	r20, 0x01	; 1
    6656:	50 e0       	ldi	r21, 0x00	; 0
    6658:	fa d1       	rcall	.+1012   	; 0x6a4e <__divmodsi4>
    665a:	27 ea       	ldi	r18, 0xA7	; 167
    665c:	31 e4       	ldi	r19, 0x41	; 65
    665e:	40 e0       	ldi	r20, 0x00	; 0
    6660:	50 e0       	ldi	r21, 0x00	; 0
    6662:	39 de       	rcall	.-910    	; 0x62d6 <__mulsi3>
    6664:	7b 01       	movw	r14, r22
    6666:	8c 01       	movw	r16, r24
    6668:	c6 01       	movw	r24, r12
    666a:	b5 01       	movw	r22, r10
    666c:	2d e1       	ldi	r18, 0x1D	; 29
    666e:	33 ef       	ldi	r19, 0xF3	; 243
    6670:	41 e0       	ldi	r20, 0x01	; 1
    6672:	50 e0       	ldi	r21, 0x00	; 0
    6674:	ec d1       	rcall	.+984    	; 0x6a4e <__divmodsi4>
    6676:	ca 01       	movw	r24, r20
    6678:	b9 01       	movw	r22, r18
    667a:	2c ee       	ldi	r18, 0xEC	; 236
    667c:	34 ef       	ldi	r19, 0xF4	; 244
    667e:	4f ef       	ldi	r20, 0xFF	; 255
    6680:	5f ef       	ldi	r21, 0xFF	; 255
    6682:	29 de       	rcall	.-942    	; 0x62d6 <__mulsi3>
    6684:	6e 0d       	add	r22, r14
    6686:	7f 1d       	adc	r23, r15
    6688:	80 1f       	adc	r24, r16
    668a:	91 1f       	adc	r25, r17
    668c:	97 ff       	sbrs	r25, 7
    668e:	04 c0       	rjmp	.+8      	; 0x6698 <do_rand+0x7a>
    6690:	61 50       	subi	r22, 0x01	; 1
    6692:	70 40       	sbci	r23, 0x00	; 0
    6694:	80 40       	sbci	r24, 0x00	; 0
    6696:	90 48       	sbci	r25, 0x80	; 128
    6698:	68 83       	st	Y, r22
    669a:	79 83       	std	Y+1, r23	; 0x01
    669c:	8a 83       	std	Y+2, r24	; 0x02
    669e:	9b 83       	std	Y+3, r25	; 0x03
    66a0:	9b 01       	movw	r18, r22
    66a2:	3f 77       	andi	r19, 0x7F	; 127
    66a4:	c9 01       	movw	r24, r18
    66a6:	cd b7       	in	r28, 0x3d	; 61
    66a8:	de b7       	in	r29, 0x3e	; 62
    66aa:	ea e0       	ldi	r30, 0x0A	; 10
    66ac:	8c ce       	rjmp	.-744    	; 0x63c6 <__epilogue_restores__+0x10>

000066ae <rand_r>:
    66ae:	b7 df       	rcall	.-146    	; 0x661e <do_rand>
    66b0:	08 95       	ret

000066b2 <rand>:
    66b2:	8a ee       	ldi	r24, 0xEA	; 234
    66b4:	93 e0       	ldi	r25, 0x03	; 3
    66b6:	b3 df       	rcall	.-154    	; 0x661e <do_rand>
    66b8:	08 95       	ret

000066ba <srand>:
    66ba:	a0 e0       	ldi	r26, 0x00	; 0
    66bc:	b0 e0       	ldi	r27, 0x00	; 0
    66be:	80 93 ea 03 	sts	0x03EA, r24
    66c2:	90 93 eb 03 	sts	0x03EB, r25
    66c6:	a0 93 ec 03 	sts	0x03EC, r26
    66ca:	b0 93 ed 03 	sts	0x03ED, r27
    66ce:	08 95       	ret

000066d0 <__ftoa_engine>:
    66d0:	28 30       	cpi	r18, 0x08	; 8
    66d2:	08 f0       	brcs	.+2      	; 0x66d6 <__ftoa_engine+0x6>
    66d4:	27 e0       	ldi	r18, 0x07	; 7
    66d6:	33 27       	eor	r19, r19
    66d8:	da 01       	movw	r26, r20
    66da:	99 0f       	add	r25, r25
    66dc:	31 1d       	adc	r19, r1
    66de:	87 fd       	sbrc	r24, 7
    66e0:	91 60       	ori	r25, 0x01	; 1
    66e2:	00 96       	adiw	r24, 0x00	; 0
    66e4:	61 05       	cpc	r22, r1
    66e6:	71 05       	cpc	r23, r1
    66e8:	39 f4       	brne	.+14     	; 0x66f8 <__ftoa_engine+0x28>
    66ea:	32 60       	ori	r19, 0x02	; 2
    66ec:	2e 5f       	subi	r18, 0xFE	; 254
    66ee:	3d 93       	st	X+, r19
    66f0:	30 e3       	ldi	r19, 0x30	; 48
    66f2:	2a 95       	dec	r18
    66f4:	e1 f7       	brne	.-8      	; 0x66ee <__ftoa_engine+0x1e>
    66f6:	08 95       	ret
    66f8:	9f 3f       	cpi	r25, 0xFF	; 255
    66fa:	30 f0       	brcs	.+12     	; 0x6708 <__ftoa_engine+0x38>
    66fc:	80 38       	cpi	r24, 0x80	; 128
    66fe:	71 05       	cpc	r23, r1
    6700:	61 05       	cpc	r22, r1
    6702:	09 f0       	breq	.+2      	; 0x6706 <__ftoa_engine+0x36>
    6704:	3c 5f       	subi	r19, 0xFC	; 252
    6706:	3c 5f       	subi	r19, 0xFC	; 252
    6708:	3d 93       	st	X+, r19
    670a:	91 30       	cpi	r25, 0x01	; 1
    670c:	08 f0       	brcs	.+2      	; 0x6710 <__ftoa_engine+0x40>
    670e:	80 68       	ori	r24, 0x80	; 128
    6710:	91 1d       	adc	r25, r1
    6712:	df 93       	push	r29
    6714:	cf 93       	push	r28
    6716:	1f 93       	push	r17
    6718:	0f 93       	push	r16
    671a:	ff 92       	push	r15
    671c:	ef 92       	push	r14
    671e:	19 2f       	mov	r17, r25
    6720:	98 7f       	andi	r25, 0xF8	; 248
    6722:	96 95       	lsr	r25
    6724:	e9 2f       	mov	r30, r25
    6726:	96 95       	lsr	r25
    6728:	96 95       	lsr	r25
    672a:	e9 0f       	add	r30, r25
    672c:	ff 27       	eor	r31, r31
    672e:	ef 53       	subi	r30, 0x3F	; 63
    6730:	fa 4f       	sbci	r31, 0xFA	; 250
    6732:	99 27       	eor	r25, r25
    6734:	33 27       	eor	r19, r19
    6736:	ee 24       	eor	r14, r14
    6738:	ff 24       	eor	r15, r15
    673a:	a7 01       	movw	r20, r14
    673c:	e7 01       	movw	r28, r14
    673e:	05 90       	lpm	r0, Z+
    6740:	08 94       	sec
    6742:	07 94       	ror	r0
    6744:	28 f4       	brcc	.+10     	; 0x6750 <__ftoa_engine+0x80>
    6746:	36 0f       	add	r19, r22
    6748:	e7 1e       	adc	r14, r23
    674a:	f8 1e       	adc	r15, r24
    674c:	49 1f       	adc	r20, r25
    674e:	51 1d       	adc	r21, r1
    6750:	66 0f       	add	r22, r22
    6752:	77 1f       	adc	r23, r23
    6754:	88 1f       	adc	r24, r24
    6756:	99 1f       	adc	r25, r25
    6758:	06 94       	lsr	r0
    675a:	a1 f7       	brne	.-24     	; 0x6744 <__ftoa_engine+0x74>
    675c:	05 90       	lpm	r0, Z+
    675e:	07 94       	ror	r0
    6760:	28 f4       	brcc	.+10     	; 0x676c <__ftoa_engine+0x9c>
    6762:	e7 0e       	add	r14, r23
    6764:	f8 1e       	adc	r15, r24
    6766:	49 1f       	adc	r20, r25
    6768:	56 1f       	adc	r21, r22
    676a:	c1 1d       	adc	r28, r1
    676c:	77 0f       	add	r23, r23
    676e:	88 1f       	adc	r24, r24
    6770:	99 1f       	adc	r25, r25
    6772:	66 1f       	adc	r22, r22
    6774:	06 94       	lsr	r0
    6776:	a1 f7       	brne	.-24     	; 0x6760 <__ftoa_engine+0x90>
    6778:	05 90       	lpm	r0, Z+
    677a:	07 94       	ror	r0
    677c:	28 f4       	brcc	.+10     	; 0x6788 <__ftoa_engine+0xb8>
    677e:	f8 0e       	add	r15, r24
    6780:	49 1f       	adc	r20, r25
    6782:	56 1f       	adc	r21, r22
    6784:	c7 1f       	adc	r28, r23
    6786:	d1 1d       	adc	r29, r1
    6788:	88 0f       	add	r24, r24
    678a:	99 1f       	adc	r25, r25
    678c:	66 1f       	adc	r22, r22
    678e:	77 1f       	adc	r23, r23
    6790:	06 94       	lsr	r0
    6792:	a1 f7       	brne	.-24     	; 0x677c <__ftoa_engine+0xac>
    6794:	05 90       	lpm	r0, Z+
    6796:	07 94       	ror	r0
    6798:	20 f4       	brcc	.+8      	; 0x67a2 <__ftoa_engine+0xd2>
    679a:	49 0f       	add	r20, r25
    679c:	56 1f       	adc	r21, r22
    679e:	c7 1f       	adc	r28, r23
    67a0:	d8 1f       	adc	r29, r24
    67a2:	99 0f       	add	r25, r25
    67a4:	66 1f       	adc	r22, r22
    67a6:	77 1f       	adc	r23, r23
    67a8:	88 1f       	adc	r24, r24
    67aa:	06 94       	lsr	r0
    67ac:	a9 f7       	brne	.-22     	; 0x6798 <__ftoa_engine+0xc8>
    67ae:	84 91       	lpm	r24, Z+
    67b0:	10 95       	com	r17
    67b2:	17 70       	andi	r17, 0x07	; 7
    67b4:	41 f0       	breq	.+16     	; 0x67c6 <__ftoa_engine+0xf6>
    67b6:	d6 95       	lsr	r29
    67b8:	c7 95       	ror	r28
    67ba:	57 95       	ror	r21
    67bc:	47 95       	ror	r20
    67be:	f7 94       	ror	r15
    67c0:	e7 94       	ror	r14
    67c2:	1a 95       	dec	r17
    67c4:	c1 f7       	brne	.-16     	; 0x67b6 <__ftoa_engine+0xe6>
    67c6:	e7 e6       	ldi	r30, 0x67	; 103
    67c8:	f5 e0       	ldi	r31, 0x05	; 5
    67ca:	68 94       	set
    67cc:	15 90       	lpm	r1, Z+
    67ce:	15 91       	lpm	r17, Z+
    67d0:	35 91       	lpm	r19, Z+
    67d2:	65 91       	lpm	r22, Z+
    67d4:	95 91       	lpm	r25, Z+
    67d6:	05 90       	lpm	r0, Z+
    67d8:	7f e2       	ldi	r23, 0x2F	; 47
    67da:	73 95       	inc	r23
    67dc:	e1 18       	sub	r14, r1
    67de:	f1 0a       	sbc	r15, r17
    67e0:	43 0b       	sbc	r20, r19
    67e2:	56 0b       	sbc	r21, r22
    67e4:	c9 0b       	sbc	r28, r25
    67e6:	d0 09       	sbc	r29, r0
    67e8:	c0 f7       	brcc	.-16     	; 0x67da <__ftoa_engine+0x10a>
    67ea:	e1 0c       	add	r14, r1
    67ec:	f1 1e       	adc	r15, r17
    67ee:	43 1f       	adc	r20, r19
    67f0:	56 1f       	adc	r21, r22
    67f2:	c9 1f       	adc	r28, r25
    67f4:	d0 1d       	adc	r29, r0
    67f6:	7e f4       	brtc	.+30     	; 0x6816 <__ftoa_engine+0x146>
    67f8:	70 33       	cpi	r23, 0x30	; 48
    67fa:	11 f4       	brne	.+4      	; 0x6800 <__ftoa_engine+0x130>
    67fc:	8a 95       	dec	r24
    67fe:	e6 cf       	rjmp	.-52     	; 0x67cc <__ftoa_engine+0xfc>
    6800:	e8 94       	clt
    6802:	01 50       	subi	r16, 0x01	; 1
    6804:	30 f0       	brcs	.+12     	; 0x6812 <__ftoa_engine+0x142>
    6806:	08 0f       	add	r16, r24
    6808:	0a f4       	brpl	.+2      	; 0x680c <__ftoa_engine+0x13c>
    680a:	00 27       	eor	r16, r16
    680c:	02 17       	cp	r16, r18
    680e:	08 f4       	brcc	.+2      	; 0x6812 <__ftoa_engine+0x142>
    6810:	20 2f       	mov	r18, r16
    6812:	23 95       	inc	r18
    6814:	02 2f       	mov	r16, r18
    6816:	7a 33       	cpi	r23, 0x3A	; 58
    6818:	28 f0       	brcs	.+10     	; 0x6824 <__ftoa_engine+0x154>
    681a:	79 e3       	ldi	r23, 0x39	; 57
    681c:	7d 93       	st	X+, r23
    681e:	2a 95       	dec	r18
    6820:	e9 f7       	brne	.-6      	; 0x681c <__ftoa_engine+0x14c>
    6822:	10 c0       	rjmp	.+32     	; 0x6844 <__ftoa_engine+0x174>
    6824:	7d 93       	st	X+, r23
    6826:	2a 95       	dec	r18
    6828:	89 f6       	brne	.-94     	; 0x67cc <__ftoa_engine+0xfc>
    682a:	06 94       	lsr	r0
    682c:	97 95       	ror	r25
    682e:	67 95       	ror	r22
    6830:	37 95       	ror	r19
    6832:	17 95       	ror	r17
    6834:	17 94       	ror	r1
    6836:	e1 18       	sub	r14, r1
    6838:	f1 0a       	sbc	r15, r17
    683a:	43 0b       	sbc	r20, r19
    683c:	56 0b       	sbc	r21, r22
    683e:	c9 0b       	sbc	r28, r25
    6840:	d0 09       	sbc	r29, r0
    6842:	98 f0       	brcs	.+38     	; 0x686a <__ftoa_engine+0x19a>
    6844:	23 95       	inc	r18
    6846:	7e 91       	ld	r23, -X
    6848:	73 95       	inc	r23
    684a:	7a 33       	cpi	r23, 0x3A	; 58
    684c:	08 f0       	brcs	.+2      	; 0x6850 <__ftoa_engine+0x180>
    684e:	70 e3       	ldi	r23, 0x30	; 48
    6850:	7c 93       	st	X, r23
    6852:	20 13       	cpse	r18, r16
    6854:	b8 f7       	brcc	.-18     	; 0x6844 <__ftoa_engine+0x174>
    6856:	7e 91       	ld	r23, -X
    6858:	70 61       	ori	r23, 0x10	; 16
    685a:	7d 93       	st	X+, r23
    685c:	30 f0       	brcs	.+12     	; 0x686a <__ftoa_engine+0x19a>
    685e:	83 95       	inc	r24
    6860:	71 e3       	ldi	r23, 0x31	; 49
    6862:	7d 93       	st	X+, r23
    6864:	70 e3       	ldi	r23, 0x30	; 48
    6866:	2a 95       	dec	r18
    6868:	e1 f7       	brne	.-8      	; 0x6862 <__ftoa_engine+0x192>
    686a:	11 24       	eor	r1, r1
    686c:	ef 90       	pop	r14
    686e:	ff 90       	pop	r15
    6870:	0f 91       	pop	r16
    6872:	1f 91       	pop	r17
    6874:	cf 91       	pop	r28
    6876:	df 91       	pop	r29
    6878:	99 27       	eor	r25, r25
    687a:	87 fd       	sbrc	r24, 7
    687c:	90 95       	com	r25
    687e:	08 95       	ret

00006880 <strnlen_P>:
    6880:	fc 01       	movw	r30, r24
    6882:	05 90       	lpm	r0, Z+
    6884:	61 50       	subi	r22, 0x01	; 1
    6886:	70 40       	sbci	r23, 0x00	; 0
    6888:	01 10       	cpse	r0, r1
    688a:	d8 f7       	brcc	.-10     	; 0x6882 <strnlen_P+0x2>
    688c:	80 95       	com	r24
    688e:	90 95       	com	r25
    6890:	8e 0f       	add	r24, r30
    6892:	9f 1f       	adc	r25, r31
    6894:	08 95       	ret

00006896 <strnlen>:
    6896:	fc 01       	movw	r30, r24
    6898:	61 50       	subi	r22, 0x01	; 1
    689a:	70 40       	sbci	r23, 0x00	; 0
    689c:	01 90       	ld	r0, Z+
    689e:	01 10       	cpse	r0, r1
    68a0:	d8 f7       	brcc	.-10     	; 0x6898 <strnlen+0x2>
    68a2:	80 95       	com	r24
    68a4:	90 95       	com	r25
    68a6:	8e 0f       	add	r24, r30
    68a8:	9f 1f       	adc	r25, r31
    68aa:	08 95       	ret

000068ac <fputc>:
    68ac:	0f 93       	push	r16
    68ae:	1f 93       	push	r17
    68b0:	cf 93       	push	r28
    68b2:	df 93       	push	r29
    68b4:	8c 01       	movw	r16, r24
    68b6:	eb 01       	movw	r28, r22
    68b8:	8b 81       	ldd	r24, Y+3	; 0x03
    68ba:	81 ff       	sbrs	r24, 1
    68bc:	1b c0       	rjmp	.+54     	; 0x68f4 <fputc+0x48>
    68be:	82 ff       	sbrs	r24, 2
    68c0:	0d c0       	rjmp	.+26     	; 0x68dc <fputc+0x30>
    68c2:	2e 81       	ldd	r18, Y+6	; 0x06
    68c4:	3f 81       	ldd	r19, Y+7	; 0x07
    68c6:	8c 81       	ldd	r24, Y+4	; 0x04
    68c8:	9d 81       	ldd	r25, Y+5	; 0x05
    68ca:	28 17       	cp	r18, r24
    68cc:	39 07       	cpc	r19, r25
    68ce:	64 f4       	brge	.+24     	; 0x68e8 <fputc+0x3c>
    68d0:	e8 81       	ld	r30, Y
    68d2:	f9 81       	ldd	r31, Y+1	; 0x01
    68d4:	01 93       	st	Z+, r16
    68d6:	f9 83       	std	Y+1, r31	; 0x01
    68d8:	e8 83       	st	Y, r30
    68da:	06 c0       	rjmp	.+12     	; 0x68e8 <fputc+0x3c>
    68dc:	e8 85       	ldd	r30, Y+8	; 0x08
    68de:	f9 85       	ldd	r31, Y+9	; 0x09
    68e0:	80 2f       	mov	r24, r16
    68e2:	09 95       	icall
    68e4:	89 2b       	or	r24, r25
    68e6:	31 f4       	brne	.+12     	; 0x68f4 <fputc+0x48>
    68e8:	8e 81       	ldd	r24, Y+6	; 0x06
    68ea:	9f 81       	ldd	r25, Y+7	; 0x07
    68ec:	01 96       	adiw	r24, 0x01	; 1
    68ee:	9f 83       	std	Y+7, r25	; 0x07
    68f0:	8e 83       	std	Y+6, r24	; 0x06
    68f2:	02 c0       	rjmp	.+4      	; 0x68f8 <fputc+0x4c>
    68f4:	0f ef       	ldi	r16, 0xFF	; 255
    68f6:	1f ef       	ldi	r17, 0xFF	; 255
    68f8:	c8 01       	movw	r24, r16
    68fa:	df 91       	pop	r29
    68fc:	cf 91       	pop	r28
    68fe:	1f 91       	pop	r17
    6900:	0f 91       	pop	r16
    6902:	08 95       	ret

00006904 <printf>:
    6904:	a0 e0       	ldi	r26, 0x00	; 0
    6906:	b0 e0       	ldi	r27, 0x00	; 0
    6908:	e7 e8       	ldi	r30, 0x87	; 135
    690a:	f4 e3       	ldi	r31, 0x34	; 52
    690c:	48 cd       	rjmp	.-1392   	; 0x639e <__prologue_saves__+0x20>
    690e:	fe 01       	movw	r30, r28
    6910:	35 96       	adiw	r30, 0x05	; 5
    6912:	61 91       	ld	r22, Z+
    6914:	71 91       	ld	r23, Z+
    6916:	80 91 25 07 	lds	r24, 0x0725
    691a:	90 91 26 07 	lds	r25, 0x0726
    691e:	af 01       	movw	r20, r30
    6920:	72 d9       	rcall	.-3356   	; 0x5c06 <vfprintf>
    6922:	20 96       	adiw	r28, 0x00	; 0
    6924:	e2 e0       	ldi	r30, 0x02	; 2
    6926:	57 cd       	rjmp	.-1362   	; 0x63d6 <__epilogue_restores__+0x20>

00006928 <puts>:
    6928:	0f 93       	push	r16
    692a:	1f 93       	push	r17
    692c:	cf 93       	push	r28
    692e:	df 93       	push	r29
    6930:	8c 01       	movw	r16, r24
    6932:	e0 91 25 07 	lds	r30, 0x0725
    6936:	f0 91 26 07 	lds	r31, 0x0726
    693a:	83 81       	ldd	r24, Z+3	; 0x03
    693c:	81 ff       	sbrs	r24, 1
    693e:	21 c0       	rjmp	.+66     	; 0x6982 <puts+0x5a>
    6940:	c0 e0       	ldi	r28, 0x00	; 0
    6942:	d0 e0       	ldi	r29, 0x00	; 0
    6944:	0d c0       	rjmp	.+26     	; 0x6960 <puts+0x38>
    6946:	e0 91 25 07 	lds	r30, 0x0725
    694a:	f0 91 26 07 	lds	r31, 0x0726
    694e:	20 85       	ldd	r18, Z+8	; 0x08
    6950:	31 85       	ldd	r19, Z+9	; 0x09
    6952:	bf 01       	movw	r22, r30
    6954:	f9 01       	movw	r30, r18
    6956:	09 95       	icall
    6958:	89 2b       	or	r24, r25
    695a:	11 f0       	breq	.+4      	; 0x6960 <puts+0x38>
    695c:	cf ef       	ldi	r28, 0xFF	; 255
    695e:	df ef       	ldi	r29, 0xFF	; 255
    6960:	f8 01       	movw	r30, r16
    6962:	81 91       	ld	r24, Z+
    6964:	8f 01       	movw	r16, r30
    6966:	88 23       	and	r24, r24
    6968:	71 f7       	brne	.-36     	; 0x6946 <puts+0x1e>
    696a:	e0 91 25 07 	lds	r30, 0x0725
    696e:	f0 91 26 07 	lds	r31, 0x0726
    6972:	20 85       	ldd	r18, Z+8	; 0x08
    6974:	31 85       	ldd	r19, Z+9	; 0x09
    6976:	8a e0       	ldi	r24, 0x0A	; 10
    6978:	bf 01       	movw	r22, r30
    697a:	f9 01       	movw	r30, r18
    697c:	09 95       	icall
    697e:	89 2b       	or	r24, r25
    6980:	11 f0       	breq	.+4      	; 0x6986 <puts+0x5e>
    6982:	cf ef       	ldi	r28, 0xFF	; 255
    6984:	df ef       	ldi	r29, 0xFF	; 255
    6986:	ce 01       	movw	r24, r28
    6988:	df 91       	pop	r29
    698a:	cf 91       	pop	r28
    698c:	1f 91       	pop	r17
    698e:	0f 91       	pop	r16
    6990:	08 95       	ret

00006992 <__ultoa_invert>:
    6992:	fa 01       	movw	r30, r20
    6994:	aa 27       	eor	r26, r26
    6996:	28 30       	cpi	r18, 0x08	; 8
    6998:	51 f1       	breq	.+84     	; 0x69ee <__ultoa_invert+0x5c>
    699a:	20 31       	cpi	r18, 0x10	; 16
    699c:	81 f1       	breq	.+96     	; 0x69fe <__ultoa_invert+0x6c>
    699e:	e8 94       	clt
    69a0:	6f 93       	push	r22
    69a2:	6e 7f       	andi	r22, 0xFE	; 254
    69a4:	6e 5f       	subi	r22, 0xFE	; 254
    69a6:	7f 4f       	sbci	r23, 0xFF	; 255
    69a8:	8f 4f       	sbci	r24, 0xFF	; 255
    69aa:	9f 4f       	sbci	r25, 0xFF	; 255
    69ac:	af 4f       	sbci	r26, 0xFF	; 255
    69ae:	b1 e0       	ldi	r27, 0x01	; 1
    69b0:	3e d0       	rcall	.+124    	; 0x6a2e <__ultoa_invert+0x9c>
    69b2:	b4 e0       	ldi	r27, 0x04	; 4
    69b4:	3c d0       	rcall	.+120    	; 0x6a2e <__ultoa_invert+0x9c>
    69b6:	67 0f       	add	r22, r23
    69b8:	78 1f       	adc	r23, r24
    69ba:	89 1f       	adc	r24, r25
    69bc:	9a 1f       	adc	r25, r26
    69be:	a1 1d       	adc	r26, r1
    69c0:	68 0f       	add	r22, r24
    69c2:	79 1f       	adc	r23, r25
    69c4:	8a 1f       	adc	r24, r26
    69c6:	91 1d       	adc	r25, r1
    69c8:	a1 1d       	adc	r26, r1
    69ca:	6a 0f       	add	r22, r26
    69cc:	71 1d       	adc	r23, r1
    69ce:	81 1d       	adc	r24, r1
    69d0:	91 1d       	adc	r25, r1
    69d2:	a1 1d       	adc	r26, r1
    69d4:	20 d0       	rcall	.+64     	; 0x6a16 <__ultoa_invert+0x84>
    69d6:	09 f4       	brne	.+2      	; 0x69da <__ultoa_invert+0x48>
    69d8:	68 94       	set
    69da:	3f 91       	pop	r19
    69dc:	2a e0       	ldi	r18, 0x0A	; 10
    69de:	26 9f       	mul	r18, r22
    69e0:	11 24       	eor	r1, r1
    69e2:	30 19       	sub	r19, r0
    69e4:	30 5d       	subi	r19, 0xD0	; 208
    69e6:	31 93       	st	Z+, r19
    69e8:	de f6       	brtc	.-74     	; 0x69a0 <__ultoa_invert+0xe>
    69ea:	cf 01       	movw	r24, r30
    69ec:	08 95       	ret
    69ee:	46 2f       	mov	r20, r22
    69f0:	47 70       	andi	r20, 0x07	; 7
    69f2:	40 5d       	subi	r20, 0xD0	; 208
    69f4:	41 93       	st	Z+, r20
    69f6:	b3 e0       	ldi	r27, 0x03	; 3
    69f8:	0f d0       	rcall	.+30     	; 0x6a18 <__ultoa_invert+0x86>
    69fa:	c9 f7       	brne	.-14     	; 0x69ee <__ultoa_invert+0x5c>
    69fc:	f6 cf       	rjmp	.-20     	; 0x69ea <__ultoa_invert+0x58>
    69fe:	46 2f       	mov	r20, r22
    6a00:	4f 70       	andi	r20, 0x0F	; 15
    6a02:	40 5d       	subi	r20, 0xD0	; 208
    6a04:	4a 33       	cpi	r20, 0x3A	; 58
    6a06:	18 f0       	brcs	.+6      	; 0x6a0e <__ultoa_invert+0x7c>
    6a08:	49 5d       	subi	r20, 0xD9	; 217
    6a0a:	31 fd       	sbrc	r19, 1
    6a0c:	40 52       	subi	r20, 0x20	; 32
    6a0e:	41 93       	st	Z+, r20
    6a10:	02 d0       	rcall	.+4      	; 0x6a16 <__ultoa_invert+0x84>
    6a12:	a9 f7       	brne	.-22     	; 0x69fe <__ultoa_invert+0x6c>
    6a14:	ea cf       	rjmp	.-44     	; 0x69ea <__ultoa_invert+0x58>
    6a16:	b4 e0       	ldi	r27, 0x04	; 4
    6a18:	a6 95       	lsr	r26
    6a1a:	97 95       	ror	r25
    6a1c:	87 95       	ror	r24
    6a1e:	77 95       	ror	r23
    6a20:	67 95       	ror	r22
    6a22:	ba 95       	dec	r27
    6a24:	c9 f7       	brne	.-14     	; 0x6a18 <__ultoa_invert+0x86>
    6a26:	00 97       	sbiw	r24, 0x00	; 0
    6a28:	61 05       	cpc	r22, r1
    6a2a:	71 05       	cpc	r23, r1
    6a2c:	08 95       	ret
    6a2e:	9b 01       	movw	r18, r22
    6a30:	ac 01       	movw	r20, r24
    6a32:	0a 2e       	mov	r0, r26
    6a34:	06 94       	lsr	r0
    6a36:	57 95       	ror	r21
    6a38:	47 95       	ror	r20
    6a3a:	37 95       	ror	r19
    6a3c:	27 95       	ror	r18
    6a3e:	ba 95       	dec	r27
    6a40:	c9 f7       	brne	.-14     	; 0x6a34 <__ultoa_invert+0xa2>
    6a42:	62 0f       	add	r22, r18
    6a44:	73 1f       	adc	r23, r19
    6a46:	84 1f       	adc	r24, r20
    6a48:	95 1f       	adc	r25, r21
    6a4a:	a0 1d       	adc	r26, r0
    6a4c:	08 95       	ret

00006a4e <__divmodsi4>:
    6a4e:	97 fb       	bst	r25, 7
    6a50:	09 2e       	mov	r0, r25
    6a52:	05 26       	eor	r0, r21
    6a54:	0e d0       	rcall	.+28     	; 0x6a72 <__divmodsi4_neg1>
    6a56:	57 fd       	sbrc	r21, 7
    6a58:	04 d0       	rcall	.+8      	; 0x6a62 <__divmodsi4_neg2>
    6a5a:	6f dc       	rcall	.-1826   	; 0x633a <__udivmodsi4>
    6a5c:	0a d0       	rcall	.+20     	; 0x6a72 <__divmodsi4_neg1>
    6a5e:	00 1c       	adc	r0, r0
    6a60:	38 f4       	brcc	.+14     	; 0x6a70 <__divmodsi4_exit>

00006a62 <__divmodsi4_neg2>:
    6a62:	50 95       	com	r21
    6a64:	40 95       	com	r20
    6a66:	30 95       	com	r19
    6a68:	21 95       	neg	r18
    6a6a:	3f 4f       	sbci	r19, 0xFF	; 255
    6a6c:	4f 4f       	sbci	r20, 0xFF	; 255
    6a6e:	5f 4f       	sbci	r21, 0xFF	; 255

00006a70 <__divmodsi4_exit>:
    6a70:	08 95       	ret

00006a72 <__divmodsi4_neg1>:
    6a72:	f6 f7       	brtc	.-4      	; 0x6a70 <__divmodsi4_exit>
    6a74:	90 95       	com	r25
    6a76:	80 95       	com	r24
    6a78:	70 95       	com	r23
    6a7a:	61 95       	neg	r22
    6a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    6a7e:	8f 4f       	sbci	r24, 0xFF	; 255
    6a80:	9f 4f       	sbci	r25, 0xFF	; 255
    6a82:	08 95       	ret

00006a84 <_exit>:
    6a84:	f8 94       	cli

00006a86 <__stop_program>:
    6a86:	ff cf       	rjmp	.-2      	; 0x6a86 <__stop_program>
