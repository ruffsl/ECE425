
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000300  00800100  00006df4  00006e88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006df4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003be  00800400  00800400  00007188  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00007188  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000076f  00000000  00000000  000071e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001b85  00000000  00000000  00007957  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043a  00000000  00000000  000094dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000017cb  00000000  00000000  00009916  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002f0  00000000  00000000  0000b0e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d5d  00000000  00000000  0000b3d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001106  00000000  00000000  0000c131  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 ef 22 	jmp	0x45de	; 0x45de <__vector_4>
      14:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__vector_5>
      18:	0c 94 41 23 	jmp	0x4682	; 0x4682 <__vector_6>
      1c:	0c 94 6a 23 	jmp	0x46d4	; 0x46d4 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 d0 21 	jmp	0x43a0	; 0x43a0 <__vector_9>
      28:	0c 94 f9 21 	jmp	0x43f2	; 0x43f2 <__vector_10>
      2c:	0c 94 22 22 	jmp	0x4444	; 0x4444 <__vector_11>
      30:	0c 94 9d 22 	jmp	0x453a	; 0x453a <__vector_12>
      34:	0c 94 4b 22 	jmp	0x4496	; 0x4496 <__vector_13>
      38:	0c 94 74 22 	jmp	0x44e8	; 0x44e8 <__vector_14>
      3c:	0c 94 c6 22 	jmp	0x458c	; 0x458c <__vector_15>
      40:	0c 94 55 21 	jmp	0x42aa	; 0x42aa <__vector_16>
      44:	0c 94 7e 21 	jmp	0x42fc	; 0x42fc <__vector_17>
      48:	0c 94 a7 21 	jmp	0x434e	; 0x434e <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	ba 1e       	adc	r11, r26
      7e:	bd 1e       	adc	r11, r29
      80:	c0 1e       	adc	r12, r16
      82:	c3 1e       	adc	r12, r19
      84:	cc 1e       	adc	r12, r28
      86:	c6 1e       	adc	r12, r22
      88:	c9 1e       	adc	r12, r25
      8a:	cf 1e       	adc	r12, r31
      8c:	d2 1e       	adc	r13, r18
      8e:	d5 1e       	adc	r13, r21
      90:	d8 1e       	adc	r13, r24
      92:	db 1e       	adc	r13, r27
      94:	de 1e       	adc	r13, r30
      96:	e1 1e       	adc	r14, r17
      98:	e4 1e       	adc	r14, r20
      9a:	e7 1e       	adc	r14, r23
      9c:	ea 1e       	adc	r14, r26
      9e:	ed 1e       	adc	r14, r29
      a0:	f0 1e       	adc	r15, r16
      a2:	01 1f       	adc	r16, r17
      a4:	04 1f       	adc	r16, r20
      a6:	07 1f       	adc	r16, r23
      a8:	0a 1f       	adc	r16, r26
      aa:	13 1f       	adc	r17, r19
      ac:	0d 1f       	adc	r16, r29
      ae:	10 1f       	adc	r17, r16
      b0:	16 1f       	adc	r17, r22
      b2:	19 1f       	adc	r17, r25
      b4:	1c 1f       	adc	r17, r28
      b6:	1f 1f       	adc	r17, r31
      b8:	22 1f       	adc	r18, r18
      ba:	25 1f       	adc	r18, r21
      bc:	28 1f       	adc	r18, r24
      be:	2b 1f       	adc	r18, r27
      c0:	2e 1f       	adc	r18, r30
      c2:	31 1f       	adc	r19, r17
      c4:	34 1f       	adc	r19, r20
      c6:	37 1f       	adc	r19, r23
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e4 ef       	ldi	r30, 0xF4	; 244
     676:	fd e6       	ldi	r31, 0x6D	; 109
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a0 30       	cpi	r26, 0x00	; 0
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	a0 e0       	ldi	r26, 0x00	; 0
     688:	b4 e0       	ldi	r27, 0x04	; 4
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	ae 3b       	cpi	r26, 0xBE	; 190
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 3f 19 	call	0x327e	; 0x327e <main>
     698:	0c 94 f8 36 	jmp	0x6df0	; 0x6df0 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 93 20 	call	0x4126	; 0x4126 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 67 20 	call	0x40ce	; 0x40ce <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 ff 20 	call	0x41fe	; 0x41fe <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 93 20 	call	0x4126	; 0x4126 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 67 20 	call	0x40ce	; 0x40ce <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 93 20 	call	0x4126	; 0x4126 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 67 20 	call	0x40ce	; 0x40ce <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 ff 20 	call	0x41fe	; 0x41fe <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 93 20 	call	0x4126	; 0x4126 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 67 20 	call	0x40ce	; 0x40ce <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 ff 20 	call	0x41fe	; 0x41fe <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 93 20 	call	0x4126	; 0x4126 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 67 20 	call	0x40ce	; 0x40ce <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 93 20 	call	0x4126	; 0x4126 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 67 20 	call	0x40ce	; 0x40ce <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 93 20 	call	0x4126	; 0x4126 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 67 20 	call	0x40ce	; 0x40ce <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 ff 20 	call	0x41fe	; 0x41fe <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 93 20 	call	0x4126	; 0x4126 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 67 20 	call	0x40ce	; 0x40ce <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 ff 20 	call	0x41fe	; 0x41fe <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 93 20 	call	0x4126	; 0x4126 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 67 20 	call	0x40ce	; 0x40ce <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 ff 20 	call	0x41fe	; 0x41fe <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 93 20 	call	0x4126	; 0x4126 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 b9 20 	call	0x4172	; 0x4172 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 67 20 	call	0x40ce	; 0x40ce <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 ff 20 	call	0x41fe	; 0x41fe <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 34 19 	call	0x3268	; 0x3268 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 fd 18 	call	0x31fa	; 0x31fa <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 34 19 	call	0x3268	; 0x3268 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 fd 18 	call	0x31fa	; 0x31fa <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 34 19 	call	0x3268	; 0x3268 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 fd 18 	call	0x31fa	; 0x31fa <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 34 19 	call	0x3268	; 0x3268 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 fd 18 	call	0x31fa	; 0x31fa <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 34 19 	call	0x3268	; 0x3268 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 fd 18 	call	0x31fa	; 0x31fa <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 34 19 	call	0x3268	; 0x3268 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 fd 18 	call	0x31fa	; 0x31fa <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 e0 18 	call	0x31c0	; 0x31c0 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 7c 04 	sts	0x047C, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 7c 04 	sts	0x047C, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 6b 1f 	call	0x3ed6	; 0x3ed6 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 42 1a 	call	0x3484	; 0x3484 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 42 1a 	call	0x3484	; 0x3484 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 57 1a 	call	0x34ae	; 0x34ae <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 42 1a 	call	0x3484	; 0x3484 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 42 1a 	call	0x3484	; 0x3484 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 57 1a 	call	0x34ae	; 0x34ae <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 57 1a 	call	0x34ae	; 0x34ae <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 42 1a 	call	0x3484	; 0x3484 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 42 1a 	call	0x3484	; 0x3484 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
     c1c:	60 91 f8 04 	lds	r22, 0x04F8
     c20:	70 91 f9 04 	lds	r23, 0x04F9
     c24:	80 91 fa 04 	lds	r24, 0x04FA
     c28:	90 91 fb 04 	lds	r25, 0x04FB
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e5       	ldi	r20, 0x50	; 80
     c32:	51 e4       	ldi	r21, 0x41	; 65
     c34:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
     c38:	f8 2e       	mov	r15, r24
     c3a:	ff 1c       	adc	r15, r15
     c3c:	ff 24       	eor	r15, r15
     c3e:	ff 1c       	adc	r15, r15
     c40:	ff 0c       	add	r15, r15
     c42:	ff 0c       	add	r15, r15
     c44:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
     c46:	60 91 a9 06 	lds	r22, 0x06A9
     c4a:	70 91 aa 06 	lds	r23, 0x06AA
     c4e:	80 91 ab 06 	lds	r24, 0x06AB
     c52:	90 91 ac 06 	lds	r25, 0x06AC
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 ef       	ldi	r20, 0xF0	; 240
     c5c:	51 e4       	ldi	r21, 0x41	; 65
     c5e:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
     c62:	08 2f       	mov	r16, r24
     c64:	00 1f       	adc	r16, r16
     c66:	00 27       	eor	r16, r16
     c68:	00 1f       	adc	r16, r16
     c6a:	00 0f       	add	r16, r16
     c6c:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
     c6e:	60 91 02 05 	lds	r22, 0x0502
     c72:	70 91 03 05 	lds	r23, 0x0503
     c76:	80 91 04 05 	lds	r24, 0x0504
     c7a:	90 91 05 05 	lds	r25, 0x0505
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	4c e0       	ldi	r20, 0x0C	; 12
     c84:	52 e4       	ldi	r21, 0x42	; 66
     c86:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
     c8a:	18 2f       	mov	r17, r24
     c8c:	11 1f       	adc	r17, r17
     c8e:	11 27       	eor	r17, r17
     c90:	11 1f       	adc	r17, r17
     c92:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
     c94:	ee 24       	eor	r14, r14
     c96:	60 91 ae 06 	lds	r22, 0x06AE
     c9a:	70 91 af 06 	lds	r23, 0x06AF
     c9e:	80 91 b0 06 	lds	r24, 0x06B0
     ca2:	90 91 b1 06 	lds	r25, 0x06B1
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 ef       	ldi	r20, 0xF0	; 240
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
     cb2:	88 23       	and	r24, r24
     cb4:	14 f4       	brge	.+4      	; 0xcba <checkWorld+0xa6>
     cb6:	ee 24       	eor	r14, r14
     cb8:	e3 94       	inc	r14
     cba:	8f 2d       	mov	r24, r15
     cbc:	8e 0d       	add	r24, r14
     cbe:	80 0f       	add	r24, r16
     cc0:	81 0f       	add	r24, r17
     cc2:	80 93 00 05 	sts	0x0500, r24
	nextGateway = moveGateways[currentMoveWorld+1];
     cc6:	20 91 01 05 	lds	r18, 0x0501
     cca:	e2 2f       	mov	r30, r18
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	e6 5d       	subi	r30, 0xD6	; 214
     cd0:	f8 4f       	sbci	r31, 0xF8	; 248
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	90 93 06 05 	sts	0x0506, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
     cd8:	89 17       	cp	r24, r25
     cda:	19 f4       	brne	.+6      	; 0xce2 <checkWorld+0xce>
		currentMoveWorld += 1;
     cdc:	2f 5f       	subi	r18, 0xFF	; 255
     cde:	20 93 01 05 	sts	0x0501, r18
	}
}
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
     cec:	2f 92       	push	r2
     cee:	3f 92       	push	r3
     cf0:	4f 92       	push	r4
     cf2:	5f 92       	push	r5
     cf4:	6f 92       	push	r6
     cf6:	7f 92       	push	r7
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
     d0c:	e0 90 f8 04 	lds	r14, 0x04F8
     d10:	f0 90 f9 04 	lds	r15, 0x04F9
     d14:	00 91 fa 04 	lds	r16, 0x04FA
     d18:	10 91 fb 04 	lds	r17, 0x04FB
     d1c:	33 24       	eor	r3, r3
     d1e:	c8 01       	movw	r24, r16
     d20:	b7 01       	movw	r22, r14
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
     d2e:	88 23       	and	r24, r24
     d30:	14 f4       	brge	.+4      	; 0xd36 <moveWall+0x4a>
     d32:	33 24       	eor	r3, r3
     d34:	33 94       	inc	r3
     d36:	a0 90 ae 06 	lds	r10, 0x06AE
     d3a:	b0 90 af 06 	lds	r11, 0x06AF
     d3e:	c0 90 b0 06 	lds	r12, 0x06B0
     d42:	d0 90 b1 06 	lds	r13, 0x06B1
     d46:	40 90 a9 06 	lds	r4, 0x06A9
     d4a:	50 90 aa 06 	lds	r5, 0x06AA
     d4e:	60 90 ab 06 	lds	r6, 0x06AB
     d52:	70 90 ac 06 	lds	r7, 0x06AC
     d56:	88 24       	eor	r8, r8
     d58:	60 91 02 05 	lds	r22, 0x0502
     d5c:	70 91 03 05 	lds	r23, 0x0503
     d60:	80 91 04 05 	lds	r24, 0x0504
     d64:	90 91 05 05 	lds	r25, 0x0505
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e7       	ldi	r20, 0x70	; 112
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
     d74:	88 23       	and	r24, r24
     d76:	14 f4       	brge	.+4      	; 0xd7c <moveWall+0x90>
     d78:	88 24       	eor	r8, r8
     d7a:	83 94       	inc	r8
     d7c:	93 2c       	mov	r9, r3
     d7e:	98 28       	or	r9, r8
     d80:	88 24       	eor	r8, r8
     d82:	c6 01       	movw	r24, r12
     d84:	b5 01       	movw	r22, r10
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e2       	ldi	r20, 0x20	; 32
     d8c:	51 e4       	ldi	r21, 0x41	; 65
     d8e:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
     d92:	88 23       	and	r24, r24
     d94:	14 f4       	brge	.+4      	; 0xd9a <moveWall+0xae>
     d96:	88 24       	eor	r8, r8
     d98:	83 94       	inc	r8
     d9a:	98 28       	or	r9, r8
     d9c:	88 24       	eor	r8, r8
     d9e:	c3 01       	movw	r24, r6
     da0:	b2 01       	movw	r22, r4
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e2       	ldi	r20, 0x20	; 32
     da8:	51 e4       	ldi	r21, 0x41	; 65
     daa:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
     dae:	88 23       	and	r24, r24
     db0:	14 f4       	brge	.+4      	; 0xdb6 <moveWall+0xca>
     db2:	88 24       	eor	r8, r8
     db4:	83 94       	inc	r8
     db6:	29 2c       	mov	r2, r9
     db8:	28 28       	or	r2, r8
	if(!isWall){	
     dba:	81 f4       	brne	.+32     	; 0xddc <moveWall+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	9f e4       	ldi	r25, 0x4F	; 79
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e2       	ldi	r20, 0x20	; 32
     dca:	51 e4       	ldi	r21, 0x41	; 65
     dcc:	79 01       	movw	r14, r18
     dce:	8a 01       	movw	r16, r20
     dd0:	59 01       	movw	r10, r18
     dd2:	6a 01       	movw	r12, r20
     dd4:	88 24       	eor	r8, r8
     dd6:	0e 94 20 11 	call	0x2240	; 0x2240 <move_arc_stnb>
     dda:	0f c1       	rjmp	.+542    	; 0xffa <moveWall+0x30e>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
     ddc:	c6 01       	movw	r24, r12
     dde:	b5 01       	movw	r22, r10
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e2       	ldi	r20, 0x20	; 32
     de6:	51 e4       	ldi	r21, 0x41	; 65
     de8:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__gesf2>
     dec:	18 16       	cp	r1, r24
     dee:	64 f4       	brge	.+24     	; 0xe08 <moveWall+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	a0 e0       	ldi	r26, 0x00	; 0
     df6:	b1 ec       	ldi	r27, 0xC1	; 193
     df8:	80 93 ae 06 	sts	0x06AE, r24
     dfc:	90 93 af 06 	sts	0x06AF, r25
     e00:	a0 93 b0 06 	sts	0x06B0, r26
     e04:	b0 93 b1 06 	sts	0x06B1, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
     e08:	c3 01       	movw	r24, r6
     e0a:	b2 01       	movw	r22, r4
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e2       	ldi	r20, 0x20	; 32
     e12:	51 e4       	ldi	r21, 0x41	; 65
     e14:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__gesf2>
     e18:	18 16       	cp	r1, r24
     e1a:	14 f0       	brlt	.+4      	; 0xe20 <moveWall+0x134>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0d c0       	rjmp	.+26     	; 0xe3a <moveWall+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	b1 ec       	ldi	r27, 0xC1	; 193
     e28:	80 93 a9 06 	sts	0x06A9, r24
     e2c:	90 93 aa 06 	sts	0x06AA, r25
     e30:	a0 93 ab 06 	sts	0x06AB, r26
     e34:	b0 93 ac 06 	sts	0x06AC, r27
     e38:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
     e3a:	33 20       	and	r3, r3
     e3c:	21 f1       	breq	.+72     	; 0xe86 <moveWall+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
     e3e:	88 23       	and	r24, r24
     e40:	29 f0       	breq	.+10     	; 0xe4c <moveWall+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	8a e7       	ldi	r24, 0x7A	; 122
     e48:	94 e4       	ldi	r25, 0x44	; 68
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <moveWall+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	8a e7       	ldi	r24, 0x7A	; 122
     e52:	94 ec       	ldi	r25, 0xC4	; 196
     e54:	a8 01       	movw	r20, r16
     e56:	97 01       	movw	r18, r14
     e58:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
     e5c:	20 91 a9 06 	lds	r18, 0x06A9
     e60:	30 91 aa 06 	lds	r19, 0x06AA
     e64:	40 91 ab 06 	lds	r20, 0x06AB
     e68:	50 91 ac 06 	lds	r21, 0x06AC
     e6c:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
     e70:	9b 01       	movw	r18, r22
     e72:	ac 01       	movw	r20, r24
     e74:	60 91 ae 06 	lds	r22, 0x06AE
     e78:	70 91 af 06 	lds	r23, 0x06AF
     e7c:	80 91 b0 06 	lds	r24, 0x06B0
     e80:	90 91 b1 06 	lds	r25, 0x06B1
     e84:	10 c0       	rjmp	.+32     	; 0xea6 <moveWall+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
     e86:	60 91 ae 06 	lds	r22, 0x06AE
     e8a:	70 91 af 06 	lds	r23, 0x06AF
     e8e:	80 91 b0 06 	lds	r24, 0x06B0
     e92:	90 91 b1 06 	lds	r25, 0x06B1
     e96:	20 91 a9 06 	lds	r18, 0x06A9
     e9a:	30 91 aa 06 	lds	r19, 0x06AA
     e9e:	40 91 ab 06 	lds	r20, 0x06AB
     ea2:	50 91 ac 06 	lds	r21, 0x06AC
     ea6:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
     eaa:	90 58       	subi	r25, 0x80	; 128
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	0e 94 b4 0e 	call	0x1d68	; 0x1d68 <pidController>
     eb2:	6b 01       	movw	r12, r22
     eb4:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
     eb6:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__fixsfsi>
     eba:	8b 01       	movw	r16, r22
     ebc:	77 ff       	sbrs	r23, 7
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <moveWall+0x1da>
     ec0:	10 95       	com	r17
     ec2:	01 95       	neg	r16
     ec4:	1f 4f       	sbci	r17, 0xFF	; 255
     ec6:	05 36       	cpi	r16, 0x65	; 101
     ec8:	11 05       	cpc	r17, r1
     eca:	fc f0       	brlt	.+62     	; 0xf0a <moveWall+0x21e>
     ecc:	c7 01       	movw	r24, r14
     ece:	b6 01       	movw	r22, r12
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
     edc:	88 23       	and	r24, r24
     ede:	a9 f0       	breq	.+42     	; 0xf0a <moveWall+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
     ee0:	b8 01       	movw	r22, r16
     ee2:	88 27       	eor	r24, r24
     ee4:	77 fd       	sbrc	r23, 7
     ee6:	80 95       	com	r24
     ee8:	98 2f       	mov	r25, r24
     eea:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	c7 01       	movw	r24, r14
     ef4:	b6 01       	movw	r22, r12
     ef6:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	48 ec       	ldi	r20, 0xC8	; 200
     f00:	52 e4       	ldi	r21, 0x42	; 66
     f02:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
     f06:	6b 01       	movw	r12, r22
     f08:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
     f0a:	c7 01       	movw	r24, r14
     f0c:	b6 01       	movw	r22, r12
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	48 ec       	ldi	r20, 0xC8	; 200
     f14:	52 e4       	ldi	r21, 0x42	; 66
     f16:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
     f1a:	6b 01       	movw	r12, r22
     f1c:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
     f1e:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <STEPPER_get_nSteps>
     f22:	60 93 a1 06 	sts	0x06A1, r22
     f26:	70 93 a2 06 	sts	0x06A2, r23
     f2a:	80 93 a3 06 	sts	0x06A3, r24
     f2e:	90 93 a4 06 	sts	0x06A4, r25
	odometryStepL += WALL_STEP - curr_step.left;
     f32:	80 91 3b 07 	lds	r24, 0x073B
     f36:	8e 5c       	subi	r24, 0xCE	; 206
     f38:	86 1b       	sub	r24, r22
     f3a:	80 93 3b 07 	sts	0x073B, r24
	odometryStepR += WALL_STEP - curr_step.right;
     f3e:	80 91 7e 04 	lds	r24, 0x047E
     f42:	8e 5c       	subi	r24, 0xCE	; 206
     f44:	90 91 a3 06 	lds	r25, 0x06A3
     f48:	89 1b       	sub	r24, r25
     f4a:	80 93 7e 04 	sts	0x047E, r24
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
     f4e:	8d b7       	in	r24, 0x3d	; 61
     f50:	9e b7       	in	r25, 0x3e	; 62
     f52:	09 97       	sbiw	r24, 0x09	; 9
     f54:	0f b6       	in	r0, 0x3f	; 63
     f56:	f8 94       	cli
     f58:	9e bf       	out	0x3e, r25	; 62
     f5a:	0f be       	out	0x3f, r0	; 63
     f5c:	8d bf       	out	0x3d, r24	; 61
     f5e:	0d b7       	in	r16, 0x3d	; 61
     f60:	1e b7       	in	r17, 0x3e	; 62
     f62:	0f 5f       	subi	r16, 0xFF	; 255
     f64:	1f 4f       	sbci	r17, 0xFF	; 255
     f66:	c7 01       	movw	r24, r14
     f68:	b6 01       	movw	r22, r12
     f6a:	20 e0       	ldi	r18, 0x00	; 0
     f6c:	30 e0       	ldi	r19, 0x00	; 0
     f6e:	48 ec       	ldi	r20, 0xC8	; 200
     f70:	52 e4       	ldi	r21, 0x42	; 66
     f72:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	48 ec       	ldi	r20, 0xC8	; 200
     f7c:	52 e4       	ldi	r21, 0x42	; 66
     f7e:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
     f82:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
     f86:	4b 01       	movw	r8, r22
     f88:	5c 01       	movw	r10, r24
     f8a:	82 e3       	ldi	r24, 0x32	; 50
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	f8 01       	movw	r30, r16
     f90:	91 83       	std	Z+1, r25	; 0x01
     f92:	80 83       	st	Z, r24
     f94:	c7 01       	movw	r24, r14
     f96:	b6 01       	movw	r22, r12
     f98:	20 e0       	ldi	r18, 0x00	; 0
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	48 ec       	ldi	r20, 0xC8	; 200
     f9e:	52 ec       	ldi	r21, 0xC2	; 194
     fa0:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
     fa4:	20 e0       	ldi	r18, 0x00	; 0
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	48 ec       	ldi	r20, 0xC8	; 200
     faa:	52 e4       	ldi	r21, 0x42	; 66
     fac:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
     fb0:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
     fb4:	f8 01       	movw	r30, r16
     fb6:	73 83       	std	Z+3, r23	; 0x03
     fb8:	62 83       	std	Z+2, r22	; 0x02
     fba:	82 ec       	ldi	r24, 0xC2	; 194
     fbc:	91 e0       	ldi	r25, 0x01	; 1
     fbe:	95 83       	std	Z+5, r25	; 0x05
     fc0:	84 83       	std	Z+4, r24	; 0x04
     fc2:	16 82       	std	Z+6, r1	; 0x06
     fc4:	10 86       	std	Z+8, r1	; 0x08
     fc6:	17 82       	std	Z+7, r1	; 0x07
     fc8:	81 e0       	ldi	r24, 0x01	; 1
     fca:	62 e0       	ldi	r22, 0x02	; 2
     fcc:	41 e0       	ldi	r20, 0x01	; 1
     fce:	22 e3       	ldi	r18, 0x32	; 50
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	84 01       	movw	r16, r8
     fd4:	92 ec       	ldi	r25, 0xC2	; 194
     fd6:	e9 2e       	mov	r14, r25
     fd8:	91 e0       	ldi	r25, 0x01	; 1
     fda:	f9 2e       	mov	r15, r25
     fdc:	cc 24       	eor	r12, r12
     fde:	aa 24       	eor	r10, r10
     fe0:	bb 24       	eor	r11, r11
     fe2:	88 24       	eor	r8, r8
     fe4:	83 94       	inc	r8
     fe6:	0e 94 29 1c 	call	0x3852	; 0x3852 <STEPPER_move>
     fea:	8d b7       	in	r24, 0x3d	; 61
     fec:	9e b7       	in	r25, 0x3e	; 62
     fee:	09 96       	adiw	r24, 0x09	; 9
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	9e bf       	out	0x3e, r25	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
     ffa:	82 2d       	mov	r24, r2
     ffc:	1f 91       	pop	r17
     ffe:	0f 91       	pop	r16
    1000:	ff 90       	pop	r15
    1002:	ef 90       	pop	r14
    1004:	df 90       	pop	r13
    1006:	cf 90       	pop	r12
    1008:	bf 90       	pop	r11
    100a:	af 90       	pop	r10
    100c:	9f 90       	pop	r9
    100e:	8f 90       	pop	r8
    1010:	7f 90       	pop	r7
    1012:	6f 90       	pop	r6
    1014:	5f 90       	pop	r5
    1016:	4f 90       	pop	r4
    1018:	3f 90       	pop	r3
    101a:	2f 90       	pop	r2
    101c:	08 95       	ret

0000101e <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    101e:	8f 92       	push	r8
    1020:	af 92       	push	r10
    1022:	bf 92       	push	r11
    1024:	cf 92       	push	r12
    1026:	df 92       	push	r13
    1028:	ef 92       	push	r14
    102a:	ff 92       	push	r15
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
	LCD_clear();
    1030:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    1034:	e0 91 01 05 	lds	r30, 0x0501
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	ed 57       	subi	r30, 0x7D	; 125
    103c:	fa 4f       	sbci	r31, 0xFA	; 250
    103e:	e0 81       	ld	r30, Z
    1040:	e0 93 7d 04 	sts	0x047D, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    1044:	80 e0       	ldi	r24, 0x00	; 0
    1046:	e1 30       	cpi	r30, 0x01	; 1
    1048:	09 f4       	brne	.+2      	; 0x104c <moveWorld+0x2e>
    104a:	81 e0       	ldi	r24, 0x01	; 1
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	e3 30       	cpi	r30, 0x03	; 3
    1050:	09 f4       	brne	.+2      	; 0x1054 <moveWorld+0x36>
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	89 2b       	or	r24, r25
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	40 e0       	ldi	r20, 0x00	; 0
    105c:	50 e0       	ldi	r21, 0x00	; 0
    105e:	80 91 7f 04 	lds	r24, 0x047F
    1062:	82 30       	cpi	r24, 0x02	; 2
    1064:	11 f4       	brne	.+4      	; 0x106a <moveWorld+0x4c>
    1066:	41 e0       	ldi	r20, 0x01	; 1
    1068:	50 e0       	ldi	r21, 0x00	; 0
    106a:	24 23       	and	r18, r20
    106c:	35 23       	and	r19, r21
    106e:	23 2b       	or	r18, r19
    1070:	b9 f0       	breq	.+46     	; 0x10a0 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    1072:	60 e0       	ldi	r22, 0x00	; 0
    1074:	70 e0       	ldi	r23, 0x00	; 0
    1076:	80 e0       	ldi	r24, 0x00	; 0
    1078:	9f e4       	ldi	r25, 0x4F	; 79
    107a:	2d eb       	ldi	r18, 0xBD	; 189
    107c:	34 e7       	ldi	r19, 0x74	; 116
    107e:	4b ed       	ldi	r20, 0xDB	; 219
    1080:	51 e4       	ldi	r21, 0x41	; 65
    1082:	0f 2e       	mov	r0, r31
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	ef 2e       	mov	r14, r31
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	ff 2e       	mov	r15, r31
    108c:	f0 e2       	ldi	r31, 0x20	; 32
    108e:	0f 2f       	mov	r16, r31
    1090:	f1 e4       	ldi	r31, 0x41	; 65
    1092:	1f 2f       	mov	r17, r31
    1094:	f0 2d       	mov	r31, r0
    1096:	57 01       	movw	r10, r14
    1098:	68 01       	movw	r12, r16
    109a:	88 24       	eor	r8, r8
    109c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    10a0:	20 91 7f 04 	lds	r18, 0x047F
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	21 30       	cpi	r18, 0x01	; 1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <moveWorld+0x8e>
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	23 30       	cpi	r18, 0x03	; 3
    10b0:	09 f4       	brne	.+2      	; 0x10b4 <moveWorld+0x96>
    10b2:	91 e0       	ldi	r25, 0x01	; 1
    10b4:	89 2b       	or	r24, r25
    10b6:	28 2f       	mov	r18, r24
    10b8:	30 e0       	ldi	r19, 0x00	; 0
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	80 91 7d 04 	lds	r24, 0x047D
    10c2:	82 30       	cpi	r24, 0x02	; 2
    10c4:	11 f4       	brne	.+4      	; 0x10ca <moveWorld+0xac>
    10c6:	41 e0       	ldi	r20, 0x01	; 1
    10c8:	50 e0       	ldi	r21, 0x00	; 0
    10ca:	24 23       	and	r18, r20
    10cc:	35 23       	and	r19, r21
    10ce:	23 2b       	or	r18, r19
    10d0:	b9 f0       	breq	.+46     	; 0x1100 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    10d2:	60 e0       	ldi	r22, 0x00	; 0
    10d4:	70 e0       	ldi	r23, 0x00	; 0
    10d6:	80 e0       	ldi	r24, 0x00	; 0
    10d8:	9f e4       	ldi	r25, 0x4F	; 79
    10da:	2d eb       	ldi	r18, 0xBD	; 189
    10dc:	34 e7       	ldi	r19, 0x74	; 116
    10de:	4b ed       	ldi	r20, 0xDB	; 219
    10e0:	51 e4       	ldi	r21, 0x41	; 65
    10e2:	0f 2e       	mov	r0, r31
    10e4:	f0 e0       	ldi	r31, 0x00	; 0
    10e6:	ef 2e       	mov	r14, r31
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	ff 2e       	mov	r15, r31
    10ec:	f0 e2       	ldi	r31, 0x20	; 32
    10ee:	0f 2f       	mov	r16, r31
    10f0:	f1 e4       	ldi	r31, 0x41	; 65
    10f2:	1f 2f       	mov	r17, r31
    10f4:	f0 2d       	mov	r31, r0
    10f6:	57 01       	movw	r10, r14
    10f8:	68 01       	movw	r12, r16
    10fa:	88 24       	eor	r8, r8
    10fc:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <move_arc_stwt>
	}
	
	switch(currentMove){
    1100:	80 91 7d 04 	lds	r24, 0x047D
    1104:	82 30       	cpi	r24, 0x02	; 2
    1106:	c1 f1       	breq	.+112    	; 0x1178 <moveWorld+0x15a>
    1108:	83 30       	cpi	r24, 0x03	; 3
    110a:	09 f4       	brne	.+2      	; 0x110e <moveWorld+0xf0>
    110c:	61 c0       	rjmp	.+194    	; 0x11d0 <moveWorld+0x1b2>
    110e:	81 30       	cpi	r24, 0x01	; 1
    1110:	09 f0       	breq	.+2      	; 0x1114 <moveWorld+0xf6>
    1112:	9f c0       	rjmp	.+318    	; 0x1252 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1114:	8d b7       	in	r24, 0x3d	; 61
    1116:	9e b7       	in	r25, 0x3e	; 62
    1118:	08 97       	sbiw	r24, 0x08	; 8
    111a:	0f b6       	in	r0, 0x3f	; 63
    111c:	f8 94       	cli
    111e:	9e bf       	out	0x3e, r25	; 62
    1120:	0f be       	out	0x3f, r0	; 63
    1122:	8d bf       	out	0x3d, r24	; 61
    1124:	ed b7       	in	r30, 0x3d	; 61
    1126:	fe b7       	in	r31, 0x3e	; 62
    1128:	31 96       	adiw	r30, 0x01	; 1
    112a:	84 e2       	ldi	r24, 0x24	; 36
    112c:	91 e0       	ldi	r25, 0x01	; 1
    112e:	ad b7       	in	r26, 0x3d	; 61
    1130:	be b7       	in	r27, 0x3e	; 62
    1132:	12 96       	adiw	r26, 0x02	; 2
    1134:	9c 93       	st	X, r25
    1136:	8e 93       	st	-X, r24
    1138:	11 97       	sbiw	r26, 0x01	; 1
    113a:	80 91 01 05 	lds	r24, 0x0501
    113e:	82 83       	std	Z+2, r24	; 0x02
    1140:	13 82       	std	Z+3, r1	; 0x03
    1142:	80 91 00 05 	lds	r24, 0x0500
    1146:	84 83       	std	Z+4, r24	; 0x04
    1148:	15 82       	std	Z+5, r1	; 0x05
    114a:	80 91 06 05 	lds	r24, 0x0506
    114e:	86 83       	std	Z+6, r24	; 0x06
    1150:	17 82       	std	Z+7, r1	; 0x07
    1152:	0e 94 38 36 	call	0x6c70	; 0x6c70 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1156:	ed b7       	in	r30, 0x3d	; 61
    1158:	fe b7       	in	r31, 0x3e	; 62
    115a:	38 96       	adiw	r30, 0x08	; 8
    115c:	0f b6       	in	r0, 0x3f	; 63
    115e:	f8 94       	cli
    1160:	fe bf       	out	0x3e, r31	; 62
    1162:	0f be       	out	0x3f, r0	; 63
    1164:	ed bf       	out	0x3d, r30	; 61
    1166:	60 e0       	ldi	r22, 0x00	; 0
    1168:	70 e0       	ldi	r23, 0x00	; 0
    116a:	80 e0       	ldi	r24, 0x00	; 0
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	20 e0       	ldi	r18, 0x00	; 0
    1170:	30 e0       	ldi	r19, 0x00	; 0
    1172:	44 e8       	ldi	r20, 0x84	; 132
    1174:	51 ec       	ldi	r21, 0xC1	; 193
    1176:	5d c0       	rjmp	.+186    	; 0x1232 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1178:	8d b7       	in	r24, 0x3d	; 61
    117a:	9e b7       	in	r25, 0x3e	; 62
    117c:	08 97       	sbiw	r24, 0x08	; 8
    117e:	0f b6       	in	r0, 0x3f	; 63
    1180:	f8 94       	cli
    1182:	9e bf       	out	0x3e, r25	; 62
    1184:	0f be       	out	0x3f, r0	; 63
    1186:	8d bf       	out	0x3d, r24	; 61
    1188:	ed b7       	in	r30, 0x3d	; 61
    118a:	fe b7       	in	r31, 0x3e	; 62
    118c:	31 96       	adiw	r30, 0x01	; 1
    118e:	8f e4       	ldi	r24, 0x4F	; 79
    1190:	91 e0       	ldi	r25, 0x01	; 1
    1192:	ad b7       	in	r26, 0x3d	; 61
    1194:	be b7       	in	r27, 0x3e	; 62
    1196:	12 96       	adiw	r26, 0x02	; 2
    1198:	9c 93       	st	X, r25
    119a:	8e 93       	st	-X, r24
    119c:	11 97       	sbiw	r26, 0x01	; 1
    119e:	80 91 01 05 	lds	r24, 0x0501
    11a2:	82 83       	std	Z+2, r24	; 0x02
    11a4:	13 82       	std	Z+3, r1	; 0x03
    11a6:	80 91 00 05 	lds	r24, 0x0500
    11aa:	84 83       	std	Z+4, r24	; 0x04
    11ac:	15 82       	std	Z+5, r1	; 0x05
    11ae:	80 91 06 05 	lds	r24, 0x0506
    11b2:	86 83       	std	Z+6, r24	; 0x06
    11b4:	17 82       	std	Z+7, r1	; 0x07
    11b6:	0e 94 38 36 	call	0x6c70	; 0x6c70 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    11ba:	ed b7       	in	r30, 0x3d	; 61
    11bc:	fe b7       	in	r31, 0x3e	; 62
    11be:	38 96       	adiw	r30, 0x08	; 8
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	fe bf       	out	0x3e, r31	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	ed bf       	out	0x3d, r30	; 61
    11ca:	0e 94 76 06 	call	0xcec	; 0xcec <moveWall>
    11ce:	53 c0       	rjmp	.+166    	; 0x1276 <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    11d0:	8d b7       	in	r24, 0x3d	; 61
    11d2:	9e b7       	in	r25, 0x3e	; 62
    11d4:	08 97       	sbiw	r24, 0x08	; 8
    11d6:	0f b6       	in	r0, 0x3f	; 63
    11d8:	f8 94       	cli
    11da:	9e bf       	out	0x3e, r25	; 62
    11dc:	0f be       	out	0x3f, r0	; 63
    11de:	8d bf       	out	0x3d, r24	; 61
    11e0:	ed b7       	in	r30, 0x3d	; 61
    11e2:	fe b7       	in	r31, 0x3e	; 62
    11e4:	31 96       	adiw	r30, 0x01	; 1
    11e6:	8d e7       	ldi	r24, 0x7D	; 125
    11e8:	91 e0       	ldi	r25, 0x01	; 1
    11ea:	ad b7       	in	r26, 0x3d	; 61
    11ec:	be b7       	in	r27, 0x3e	; 62
    11ee:	12 96       	adiw	r26, 0x02	; 2
    11f0:	9c 93       	st	X, r25
    11f2:	8e 93       	st	-X, r24
    11f4:	11 97       	sbiw	r26, 0x01	; 1
    11f6:	80 91 01 05 	lds	r24, 0x0501
    11fa:	82 83       	std	Z+2, r24	; 0x02
    11fc:	13 82       	std	Z+3, r1	; 0x03
    11fe:	80 91 00 05 	lds	r24, 0x0500
    1202:	84 83       	std	Z+4, r24	; 0x04
    1204:	15 82       	std	Z+5, r1	; 0x05
    1206:	80 91 06 05 	lds	r24, 0x0506
    120a:	86 83       	std	Z+6, r24	; 0x06
    120c:	17 82       	std	Z+7, r1	; 0x07
    120e:	0e 94 38 36 	call	0x6c70	; 0x6c70 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1212:	ed b7       	in	r30, 0x3d	; 61
    1214:	fe b7       	in	r31, 0x3e	; 62
    1216:	38 96       	adiw	r30, 0x08	; 8
    1218:	0f b6       	in	r0, 0x3f	; 63
    121a:	f8 94       	cli
    121c:	fe bf       	out	0x3e, r31	; 62
    121e:	0f be       	out	0x3f, r0	; 63
    1220:	ed bf       	out	0x3d, r30	; 61
    1222:	60 e0       	ldi	r22, 0x00	; 0
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	20 e0       	ldi	r18, 0x00	; 0
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	44 e8       	ldi	r20, 0x84	; 132
    1230:	51 e4       	ldi	r21, 0x41	; 65
    1232:	0f 2e       	mov	r0, r31
    1234:	f0 e0       	ldi	r31, 0x00	; 0
    1236:	ef 2e       	mov	r14, r31
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	ff 2e       	mov	r15, r31
    123c:	f0 e2       	ldi	r31, 0x20	; 32
    123e:	0f 2f       	mov	r16, r31
    1240:	f1 e4       	ldi	r31, 0x41	; 65
    1242:	1f 2f       	mov	r17, r31
    1244:	f0 2d       	mov	r31, r0
    1246:	57 01       	movw	r10, r14
    1248:	68 01       	movw	r12, r16
    124a:	88 24       	eor	r8, r8
    124c:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <move_arc_stwt>
    1250:	12 c0       	rjmp	.+36     	; 0x1276 <moveWorld+0x258>
			break;
		default:
			LCD_printf("What?!");
    1252:	00 d0       	rcall	.+0      	; 0x1254 <moveWorld+0x236>
    1254:	89 ea       	ldi	r24, 0xA9	; 169
    1256:	91 e0       	ldi	r25, 0x01	; 1
    1258:	ad b7       	in	r26, 0x3d	; 61
    125a:	be b7       	in	r27, 0x3e	; 62
    125c:	12 96       	adiw	r26, 0x02	; 2
    125e:	9c 93       	st	X, r25
    1260:	8e 93       	st	-X, r24
    1262:	11 97       	sbiw	r26, 0x01	; 1
    1264:	0e 94 38 36 	call	0x6c70	; 0x6c70 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    1268:	0f 90       	pop	r0
    126a:	0f 90       	pop	r0
    126c:	82 e0       	ldi	r24, 0x02	; 2
    126e:	60 e0       	ldi	r22, 0x00	; 0
    1270:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <STEPPER_stop>
    1274:	ff cf       	rjmp	.-2      	; 0x1274 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    1276:	80 91 7d 04 	lds	r24, 0x047D
    127a:	80 93 7f 04 	sts	0x047F, r24
	return 1;
}
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	1f 91       	pop	r17
    1282:	0f 91       	pop	r16
    1284:	ff 90       	pop	r15
    1286:	ef 90       	pop	r14
    1288:	df 90       	pop	r13
    128a:	cf 90       	pop	r12
    128c:	bf 90       	pop	r11
    128e:	af 90       	pop	r10
    1290:	8f 90       	pop	r8
    1292:	08 95       	ret

00001294 <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    1294:	0e 94 0f 08 	call	0x101e	; 0x101e <moveWorld>
    1298:	88 23       	and	r24, r24
    129a:	69 f0       	breq	.+26     	; 0x12b6 <moveBehavior+0x22>
		Ierror = 0;
    129c:	80 e0       	ldi	r24, 0x00	; 0
    129e:	90 e0       	ldi	r25, 0x00	; 0
    12a0:	a0 e0       	ldi	r26, 0x00	; 0
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	80 93 fc 04 	sts	0x04FC, r24
    12a8:	90 93 fd 04 	sts	0x04FD, r25
    12ac:	a0 93 fe 04 	sts	0x04FE, r26
    12b0:	b0 93 ff 04 	sts	0x04FF, r27
    12b4:	81 e0       	ldi	r24, 0x01	; 1
		return 1; 
	}
	return 0;	
}
    12b6:	08 95       	ret

000012b8 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	cf 93       	push	r28
    12c0:	df 93       	push	r29
    12c2:	ff 24       	eor	r15, r15
    12c4:	f3 94       	inc	r15
    12c6:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    12c8:	c0 eb       	ldi	r28, 0xB0	; 176
    12ca:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    12cc:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    12d0:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    12d2:	81 30       	cpi	r24, 0x01	; 1
    12d4:	21 f0       	breq	.+8      	; 0x12de <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	11 f0       	breq	.+4      	; 0x12de <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    12da:	83 30       	cpi	r24, 0x03	; 3
    12dc:	39 f4       	brne	.+14     	; 0x12ec <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    12de:	e1 2f       	mov	r30, r17
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	ed 57       	subi	r30, 0x7D	; 125
    12e4:	fa 4f       	sbci	r31, 0xFA	; 250
    12e6:	00 83       	st	Z, r16
			i++;
    12e8:	1f 5f       	subi	r17, 0xFF	; 255
    12ea:	02 c0       	rjmp	.+4      	; 0x12f0 <movesInput+0x38>
		}

		if (btnHolder != 0){
    12ec:	88 23       	and	r24, r24
    12ee:	21 f1       	breq	.+72     	; 0x1338 <movesInput+0x80>
			LCD_clear();
    12f0:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    12f4:	8d b7       	in	r24, 0x3d	; 61
    12f6:	9e b7       	in	r25, 0x3e	; 62
    12f8:	08 97       	sbiw	r24, 0x08	; 8
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	f8 94       	cli
    12fe:	9e bf       	out	0x3e, r25	; 62
    1300:	0f be       	out	0x3f, r0	; 63
    1302:	8d bf       	out	0x3d, r24	; 61
    1304:	ed b7       	in	r30, 0x3d	; 61
    1306:	fe b7       	in	r31, 0x3e	; 62
    1308:	31 96       	adiw	r30, 0x01	; 1
    130a:	ad b7       	in	r26, 0x3d	; 61
    130c:	be b7       	in	r27, 0x3e	; 62
    130e:	12 96       	adiw	r26, 0x02	; 2
    1310:	dc 93       	st	X, r29
    1312:	ce 93       	st	-X, r28
    1314:	11 97       	sbiw	r26, 0x01	; 1
    1316:	f2 82       	std	Z+2, r15	; 0x02
    1318:	13 82       	std	Z+3, r1	; 0x03
    131a:	04 83       	std	Z+4, r16	; 0x04
    131c:	15 82       	std	Z+5, r1	; 0x05
    131e:	16 83       	std	Z+6, r17	; 0x06
    1320:	17 82       	std	Z+7, r1	; 0x07
    1322:	0e 94 38 36 	call	0x6c70	; 0x6c70 <printf>
    1326:	f0 2e       	mov	r15, r16
    1328:	8d b7       	in	r24, 0x3d	; 61
    132a:	9e b7       	in	r25, 0x3e	; 62
    132c:	08 96       	adiw	r24, 0x08	; 8
    132e:	0f b6       	in	r0, 0x3f	; 63
    1330:	f8 94       	cli
    1332:	9e bf       	out	0x3e, r25	; 62
    1334:	0f be       	out	0x3f, r0	; 63
    1336:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1338:	84 ef       	ldi	r24, 0xF4	; 244
    133a:	91 e0       	ldi	r25, 0x01	; 1
    133c:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    1340:	1b 30       	cpi	r17, 0x0B	; 11
    1342:	20 f2       	brcs	.-120    	; 0x12cc <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    1344:	1f 5f       	subi	r17, 0xFF	; 255
    1346:	e1 2f       	mov	r30, r17
    1348:	f0 e0       	ldi	r31, 0x00	; 0
    134a:	ed 57       	subi	r30, 0x7D	; 125
    134c:	fa 4f       	sbci	r31, 0xFA	; 250
    134e:	84 e0       	ldi	r24, 0x04	; 4
    1350:	80 83       	st	Z, r24
}
    1352:	df 91       	pop	r29
    1354:	cf 91       	pop	r28
    1356:	1f 91       	pop	r17
    1358:	0f 91       	pop	r16
    135a:	ff 90       	pop	r15
    135c:	08 95       	ret

0000135e <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    135e:	1f 93       	push	r17
    1360:	cf 93       	push	r28
    1362:	df 93       	push	r29
    1364:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    1366:	c1 ee       	ldi	r28, 0xE1	; 225
    1368:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    136a:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	21 f4       	brne	.+8      	; 0x137a <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    1372:	80 91 a5 06 	lds	r24, 0x06A5
    1376:	88 0f       	add	r24, r24
    1378:	06 c0       	rjmp	.+12     	; 0x1386 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    137a:	82 30       	cpi	r24, 0x02	; 2
    137c:	39 f4       	brne	.+14     	; 0x138c <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    137e:	80 91 a5 06 	lds	r24, 0x06A5
    1382:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	80 93 a5 06 	sts	0x06A5, r24
			i++;
    138a:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    138c:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    1390:	00 d0       	rcall	.+0      	; 0x1392 <worldInput+0x34>
    1392:	00 d0       	rcall	.+0      	; 0x1394 <worldInput+0x36>
    1394:	00 d0       	rcall	.+0      	; 0x1396 <worldInput+0x38>
    1396:	ed b7       	in	r30, 0x3d	; 61
    1398:	fe b7       	in	r31, 0x3e	; 62
    139a:	31 96       	adiw	r30, 0x01	; 1
    139c:	ad b7       	in	r26, 0x3d	; 61
    139e:	be b7       	in	r27, 0x3e	; 62
    13a0:	12 96       	adiw	r26, 0x02	; 2
    13a2:	dc 93       	st	X, r29
    13a4:	ce 93       	st	-X, r28
    13a6:	11 97       	sbiw	r26, 0x01	; 1
    13a8:	80 91 a5 06 	lds	r24, 0x06A5
    13ac:	82 83       	std	Z+2, r24	; 0x02
    13ae:	13 82       	std	Z+3, r1	; 0x03
    13b0:	14 83       	std	Z+4, r17	; 0x04
    13b2:	15 82       	std	Z+5, r1	; 0x05
    13b4:	0e 94 38 36 	call	0x6c70	; 0x6c70 <printf>
		// }
		currentCellWorldStart = currentCellWorld;
    13b8:	80 91 a5 06 	lds	r24, 0x06A5
    13bc:	80 93 a6 06 	sts	0x06A6, r24
		TMRSRVC_delay(500);	//wait 0.5 seconds
    13c0:	8d b7       	in	r24, 0x3d	; 61
    13c2:	9e b7       	in	r25, 0x3e	; 62
    13c4:	06 96       	adiw	r24, 0x06	; 6
    13c6:	0f b6       	in	r0, 0x3f	; 63
    13c8:	f8 94       	cli
    13ca:	9e bf       	out	0x3e, r25	; 62
    13cc:	0f be       	out	0x3f, r0	; 63
    13ce:	8d bf       	out	0x3d, r24	; 61
    13d0:	84 ef       	ldi	r24, 0xF4	; 244
    13d2:	91 e0       	ldi	r25, 0x01	; 1
    13d4:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    13d8:	14 30       	cpi	r17, 0x04	; 4
    13da:	38 f2       	brcs	.-114    	; 0x136a <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		currentCellWorldStart = currentCellWorld;
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
}
    13dc:	df 91       	pop	r29
    13de:	cf 91       	pop	r28
    13e0:	1f 91       	pop	r17
    13e2:	08 95       	ret

000013e4 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    13ec:	c9 e0       	ldi	r28, 0x09	; 9
    13ee:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    13f0:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    13f4:	81 30       	cpi	r24, 0x01	; 1
    13f6:	21 f4       	brne	.+8      	; 0x1400 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    13f8:	80 91 a4 05 	lds	r24, 0x05A4
    13fc:	88 0f       	add	r24, r24
    13fe:	06 c0       	rjmp	.+12     	; 0x140c <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1400:	82 30       	cpi	r24, 0x02	; 2
    1402:	41 f4       	brne	.+16     	; 0x1414 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    1404:	80 91 a4 05 	lds	r24, 0x05A4
    1408:	88 0f       	add	r24, r24
			currentOrientation += 1;
    140a:	8f 5f       	subi	r24, 0xFF	; 255
    140c:	80 93 a4 05 	sts	0x05A4, r24
			i++;
    1410:	1f 5f       	subi	r17, 0xFF	; 255
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    1414:	88 23       	and	r24, r24
    1416:	f1 f0       	breq	.+60     	; 0x1454 <orientationInput+0x70>
			LCD_clear();
    1418:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    141c:	00 d0       	rcall	.+0      	; 0x141e <orientationInput+0x3a>
    141e:	00 d0       	rcall	.+0      	; 0x1420 <orientationInput+0x3c>
    1420:	00 d0       	rcall	.+0      	; 0x1422 <orientationInput+0x3e>
    1422:	ed b7       	in	r30, 0x3d	; 61
    1424:	fe b7       	in	r31, 0x3e	; 62
    1426:	31 96       	adiw	r30, 0x01	; 1
    1428:	ad b7       	in	r26, 0x3d	; 61
    142a:	be b7       	in	r27, 0x3e	; 62
    142c:	12 96       	adiw	r26, 0x02	; 2
    142e:	dc 93       	st	X, r29
    1430:	ce 93       	st	-X, r28
    1432:	11 97       	sbiw	r26, 0x01	; 1
    1434:	80 91 a4 05 	lds	r24, 0x05A4
    1438:	82 83       	std	Z+2, r24	; 0x02
    143a:	13 82       	std	Z+3, r1	; 0x03
    143c:	14 83       	std	Z+4, r17	; 0x04
    143e:	15 82       	std	Z+5, r1	; 0x05
    1440:	0e 94 38 36 	call	0x6c70	; 0x6c70 <printf>
    1444:	8d b7       	in	r24, 0x3d	; 61
    1446:	9e b7       	in	r25, 0x3e	; 62
    1448:	06 96       	adiw	r24, 0x06	; 6
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	9e bf       	out	0x3e, r25	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1454:	84 ef       	ldi	r24, 0xF4	; 244
    1456:	91 e0       	ldi	r25, 0x01	; 1
    1458:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    145c:	12 30       	cpi	r17, 0x02	; 2
    145e:	40 f2       	brcs	.-112    	; 0x13f0 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    1460:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	switch(currentOrientation){
    1464:	80 91 a4 05 	lds	r24, 0x05A4
    1468:	81 30       	cpi	r24, 0x01	; 1
    146a:	51 f0       	breq	.+20     	; 0x1480 <orientationInput+0x9c>
    146c:	81 30       	cpi	r24, 0x01	; 1
    146e:	28 f0       	brcs	.+10     	; 0x147a <orientationInput+0x96>
    1470:	82 30       	cpi	r24, 0x02	; 2
    1472:	49 f0       	breq	.+18     	; 0x1486 <orientationInput+0xa2>
    1474:	83 30       	cpi	r24, 0x03	; 3
    1476:	71 f4       	brne	.+28     	; 0x1494 <orientationInput+0xb0>
    1478:	09 c0       	rjmp	.+18     	; 0x148c <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    147a:	88 e3       	ldi	r24, 0x38	; 56
    147c:	92 e0       	ldi	r25, 0x02	; 2
    147e:	08 c0       	rjmp	.+16     	; 0x1490 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    1480:	8a e5       	ldi	r24, 0x5A	; 90
    1482:	92 e0       	ldi	r25, 0x02	; 2
    1484:	05 c0       	rjmp	.+10     	; 0x1490 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    1486:	8b e7       	ldi	r24, 0x7B	; 123
    1488:	92 e0       	ldi	r25, 0x02	; 2
    148a:	02 c0       	rjmp	.+4      	; 0x1490 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    148c:	8d e9       	ldi	r24, 0x9D	; 157
    148e:	92 e0       	ldi	r25, 0x02	; 2
    1490:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <puts>
			break;
		default:
			break;
	}
	TMRSRVC_delay(500);	//wait 0.5 seconds
    1494:	84 ef       	ldi	r24, 0xF4	; 244
    1496:	91 e0       	ldi	r25, 0x01	; 1
    1498:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
}
    149c:	df 91       	pop	r29
    149e:	cf 91       	pop	r28
    14a0:	1f 91       	pop	r17
    14a2:	08 95       	ret

000014a4 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    14a4:	cf 92       	push	r12
    14a6:	df 92       	push	r13
    14a8:	ef 92       	push	r14
    14aa:	ff 92       	push	r15
    14ac:	0f 93       	push	r16
    14ae:	1f 93       	push	r17
    14b0:	df 93       	push	r29
    14b2:	cf 93       	push	r28
    14b4:	0f 92       	push	r0
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    14ba:	80 91 a5 06 	lds	r24, 0x06A5
    14be:	f8 2e       	mov	r15, r24
    14c0:	f6 94       	lsr	r15
    14c2:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    14c4:	98 2f       	mov	r25, r24
    14c6:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    14c8:	00 91 a4 05 	lds	r16, 0x05A4
    14cc:	cc 24       	eor	r12, r12
    14ce:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    14d0:	f6 01       	movw	r30, r12
    14d2:	ed 57       	subi	r30, 0x7D	; 125
    14d4:	fa 4f       	sbci	r31, 0xFA	; 250
    14d6:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    14d8:	ef 2d       	mov	r30, r15
    14da:	f0 e0       	ldi	r31, 0x00	; 0
    14dc:	ee 0f       	add	r30, r30
    14de:	ff 1f       	adc	r31, r31
    14e0:	ee 0f       	add	r30, r30
    14e2:	ff 1f       	adc	r31, r31
    14e4:	e9 0f       	add	r30, r25
    14e6:	f1 1d       	adc	r31, r1
    14e8:	ed 56       	subi	r30, 0x6D	; 109
    14ea:	fa 4f       	sbci	r31, 0xFA	; 250
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    14ec:	80 81       	ld	r24, Z
    14ee:	60 2f       	mov	r22, r16
    14f0:	41 e0       	ldi	r20, 0x01	; 1
    14f2:	99 83       	std	Y+1, r25	; 0x01
    14f4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    14f8:	f6 01       	movw	r30, r12
    14fa:	e6 5d       	subi	r30, 0xD6	; 214
    14fc:	f8 4f       	sbci	r31, 0xF8	; 248
    14fe:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    1500:	99 81       	ldd	r25, Y+1	; 0x01
    1502:	12 30       	cpi	r17, 0x02	; 2
    1504:	89 f4       	brne	.+34     	; 0x1528 <getGateways+0x84>
			switch(curOrient){
    1506:	01 30       	cpi	r16, 0x01	; 1
    1508:	49 f0       	breq	.+18     	; 0x151c <getGateways+0x78>
    150a:	01 30       	cpi	r16, 0x01	; 1
    150c:	28 f0       	brcs	.+10     	; 0x1518 <getGateways+0x74>
    150e:	02 30       	cpi	r16, 0x02	; 2
    1510:	39 f0       	breq	.+14     	; 0x1520 <getGateways+0x7c>
    1512:	03 30       	cpi	r16, 0x03	; 3
    1514:	89 f4       	brne	.+34     	; 0x1538 <getGateways+0x94>
    1516:	06 c0       	rjmp	.+12     	; 0x1524 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    1518:	fa 94       	dec	r15
    151a:	0e c0       	rjmp	.+28     	; 0x1538 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    151c:	9f 5f       	subi	r25, 0xFF	; 255
    151e:	0c c0       	rjmp	.+24     	; 0x1538 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    1520:	f3 94       	inc	r15
    1522:	0a c0       	rjmp	.+20     	; 0x1538 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    1524:	91 50       	subi	r25, 0x01	; 1
    1526:	08 c0       	rjmp	.+16     	; 0x1538 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    1528:	13 30       	cpi	r17, 0x03	; 3
    152a:	11 f4       	brne	.+4      	; 0x1530 <getGateways+0x8c>
			curOrient++;
    152c:	0f 5f       	subi	r16, 0xFF	; 255
    152e:	03 c0       	rjmp	.+6      	; 0x1536 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    1530:	11 30       	cpi	r17, 0x01	; 1
    1532:	11 f4       	brne	.+4      	; 0x1538 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    1534:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    1536:	03 70       	andi	r16, 0x03	; 3
    1538:	08 94       	sec
    153a:	c1 1c       	adc	r12, r1
    153c:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    153e:	8d e0       	ldi	r24, 0x0D	; 13
    1540:	c8 16       	cp	r12, r24
    1542:	d1 04       	cpc	r13, r1
    1544:	29 f6       	brne	.-118    	; 0x14d0 <getGateways+0x2c>
    1546:	cc 24       	eor	r12, r12
    1548:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    154a:	9e eb       	ldi	r25, 0xBE	; 190
    154c:	e9 2e       	mov	r14, r25
    154e:	92 e0       	ldi	r25, 0x02	; 2
    1550:	f9 2e       	mov	r15, r25
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    1552:	f6 01       	movw	r30, r12
    1554:	e6 5d       	subi	r30, 0xD6	; 214
    1556:	f8 4f       	sbci	r31, 0xF8	; 248
    1558:	00 81       	ld	r16, Z
		LCD_clear();
    155a:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    155e:	20 2f       	mov	r18, r16
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	ad b7       	in	r26, 0x3d	; 61
    1564:	be b7       	in	r27, 0x3e	; 62
    1566:	54 97       	sbiw	r26, 0x14	; 20
    1568:	0f b6       	in	r0, 0x3f	; 63
    156a:	f8 94       	cli
    156c:	be bf       	out	0x3e, r27	; 62
    156e:	0f be       	out	0x3f, r0	; 63
    1570:	ad bf       	out	0x3d, r26	; 61
    1572:	ed b7       	in	r30, 0x3d	; 61
    1574:	fe b7       	in	r31, 0x3e	; 62
    1576:	31 96       	adiw	r30, 0x01	; 1
    1578:	12 96       	adiw	r26, 0x02	; 2
    157a:	fc 92       	st	X, r15
    157c:	ee 92       	st	-X, r14
    157e:	11 97       	sbiw	r26, 0x01	; 1
    1580:	d3 82       	std	Z+3, r13	; 0x03
    1582:	c2 82       	std	Z+2, r12	; 0x02
    1584:	11 27       	eor	r17, r17
    1586:	07 fd       	sbrc	r16, 7
    1588:	10 95       	com	r17
    158a:	00 27       	eor	r16, r16
    158c:	11 0f       	add	r17, r17
    158e:	00 1f       	adc	r16, r16
    1590:	11 27       	eor	r17, r17
    1592:	15 83       	std	Z+5, r17	; 0x05
    1594:	04 83       	std	Z+4, r16	; 0x04
    1596:	c9 01       	movw	r24, r18
    1598:	b6 e0       	ldi	r27, 0x06	; 6
    159a:	96 95       	lsr	r25
    159c:	87 95       	ror	r24
    159e:	ba 95       	dec	r27
    15a0:	e1 f7       	brne	.-8      	; 0x159a <getGateways+0xf6>
    15a2:	81 70       	andi	r24, 0x01	; 1
    15a4:	90 70       	andi	r25, 0x00	; 0
    15a6:	97 83       	std	Z+7, r25	; 0x07
    15a8:	86 83       	std	Z+6, r24	; 0x06
    15aa:	c9 01       	movw	r24, r18
    15ac:	a5 e0       	ldi	r26, 0x05	; 5
    15ae:	96 95       	lsr	r25
    15b0:	87 95       	ror	r24
    15b2:	aa 95       	dec	r26
    15b4:	e1 f7       	brne	.-8      	; 0x15ae <getGateways+0x10a>
    15b6:	81 70       	andi	r24, 0x01	; 1
    15b8:	90 70       	andi	r25, 0x00	; 0
    15ba:	91 87       	std	Z+9, r25	; 0x09
    15bc:	80 87       	std	Z+8, r24	; 0x08
    15be:	c9 01       	movw	r24, r18
    15c0:	74 e0       	ldi	r23, 0x04	; 4
    15c2:	96 95       	lsr	r25
    15c4:	87 95       	ror	r24
    15c6:	7a 95       	dec	r23
    15c8:	e1 f7       	brne	.-8      	; 0x15c2 <getGateways+0x11e>
    15ca:	81 70       	andi	r24, 0x01	; 1
    15cc:	90 70       	andi	r25, 0x00	; 0
    15ce:	93 87       	std	Z+11, r25	; 0x0b
    15d0:	82 87       	std	Z+10, r24	; 0x0a
    15d2:	c9 01       	movw	r24, r18
    15d4:	63 e0       	ldi	r22, 0x03	; 3
    15d6:	96 95       	lsr	r25
    15d8:	87 95       	ror	r24
    15da:	6a 95       	dec	r22
    15dc:	e1 f7       	brne	.-8      	; 0x15d6 <getGateways+0x132>
    15de:	81 70       	andi	r24, 0x01	; 1
    15e0:	90 70       	andi	r25, 0x00	; 0
    15e2:	95 87       	std	Z+13, r25	; 0x0d
    15e4:	84 87       	std	Z+12, r24	; 0x0c
    15e6:	c9 01       	movw	r24, r18
    15e8:	96 95       	lsr	r25
    15ea:	87 95       	ror	r24
    15ec:	96 95       	lsr	r25
    15ee:	87 95       	ror	r24
    15f0:	81 70       	andi	r24, 0x01	; 1
    15f2:	90 70       	andi	r25, 0x00	; 0
    15f4:	97 87       	std	Z+15, r25	; 0x0f
    15f6:	86 87       	std	Z+14, r24	; 0x0e
    15f8:	c9 01       	movw	r24, r18
    15fa:	96 95       	lsr	r25
    15fc:	87 95       	ror	r24
    15fe:	81 70       	andi	r24, 0x01	; 1
    1600:	90 70       	andi	r25, 0x00	; 0
    1602:	91 8b       	std	Z+17, r25	; 0x11
    1604:	80 8b       	std	Z+16, r24	; 0x10
    1606:	21 70       	andi	r18, 0x01	; 1
    1608:	30 70       	andi	r19, 0x00	; 0
    160a:	33 8b       	std	Z+19, r19	; 0x13
    160c:	22 8b       	std	Z+18, r18	; 0x12
    160e:	0e 94 38 36 	call	0x6c70	; 0x6c70 <printf>
		TMRSRVC_delay(500);//wait 1/2 seconds
    1612:	ed b7       	in	r30, 0x3d	; 61
    1614:	fe b7       	in	r31, 0x3e	; 62
    1616:	74 96       	adiw	r30, 0x14	; 20
    1618:	0f b6       	in	r0, 0x3f	; 63
    161a:	f8 94       	cli
    161c:	fe bf       	out	0x3e, r31	; 62
    161e:	0f be       	out	0x3f, r0	; 63
    1620:	ed bf       	out	0x3d, r30	; 61
    1622:	84 ef       	ldi	r24, 0xF4	; 244
    1624:	91 e0       	ldi	r25, 0x01	; 1
    1626:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
    162a:	08 94       	sec
    162c:	c1 1c       	adc	r12, r1
    162e:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    1630:	fd e0       	ldi	r31, 0x0D	; 13
    1632:	cf 16       	cp	r12, r31
    1634:	d1 04       	cpc	r13, r1
    1636:	09 f0       	breq	.+2      	; 0x163a <getGateways+0x196>
    1638:	8c cf       	rjmp	.-232    	; 0x1552 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(500);//wait 1/2 seconds
	}
}
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	1f 91       	pop	r17
    1642:	0f 91       	pop	r16
    1644:	ff 90       	pop	r15
    1646:	ef 90       	pop	r14
    1648:	df 90       	pop	r13
    164a:	cf 90       	pop	r12
    164c:	08 95       	ret

0000164e <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    164e:	ff 92       	push	r15
    1650:	0f 93       	push	r16
    1652:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    1654:	80 91 a5 06 	lds	r24, 0x06A5
    1658:	08 2f       	mov	r16, r24
    165a:	06 95       	lsr	r16
    165c:	06 95       	lsr	r16
	unsigned char curCol = currentCellWorld & 0b0011;
    165e:	43 e0       	ldi	r20, 0x03	; 3
    1660:	f4 2e       	mov	r15, r20
    1662:	f8 22       	and	r15, r24
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    1664:	10 91 a4 05 	lds	r17, 0x05A4
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    1668:	80 91 00 05 	lds	r24, 0x0500
    166c:	61 2f       	mov	r22, r17
    166e:	40 e0       	ldi	r20, 0x00	; 0
    1670:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    1674:	e0 2f       	mov	r30, r16
    1676:	f0 e0       	ldi	r31, 0x00	; 0
    1678:	ee 0f       	add	r30, r30
    167a:	ff 1f       	adc	r31, r31
    167c:	ee 0f       	add	r30, r30
    167e:	ff 1f       	adc	r31, r31
    1680:	ef 0d       	add	r30, r15
    1682:	f1 1d       	adc	r31, r1
    1684:	ed 56       	subi	r30, 0x6D	; 109
    1686:	fa 4f       	sbci	r31, 0xFA	; 250
    1688:	80 83       	st	Z, r24
		
		
	switch(currentMove){
    168a:	80 91 7d 04 	lds	r24, 0x047D
    168e:	82 30       	cpi	r24, 0x02	; 2
    1690:	a1 f0       	breq	.+40     	; 0x16ba <setGateways+0x6c>
    1692:	83 30       	cpi	r24, 0x03	; 3
    1694:	21 f0       	breq	.+8      	; 0x169e <setGateways+0x50>
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	29 f4       	brne	.+10     	; 0x16a4 <setGateways+0x56>
		case MOVE_LEFT:
			curOrient--;
    169a:	11 50       	subi	r17, 0x01	; 1
    169c:	01 c0       	rjmp	.+2      	; 0x16a0 <setGateways+0x52>
			curOrient = curOrient&0b11;
			break;
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			curOrient++;
    169e:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    16a0:	13 70       	andi	r17, 0x03	; 3
    16a2:	0b c0       	rjmp	.+22     	; 0x16ba <setGateways+0x6c>
			break;
		default:
			LCD_printf("Whatz?!");
    16a4:	00 d0       	rcall	.+0      	; 0x16a6 <setGateways+0x58>
    16a6:	80 ee       	ldi	r24, 0xE0	; 224
    16a8:	92 e0       	ldi	r25, 0x02	; 2
    16aa:	ed b7       	in	r30, 0x3d	; 61
    16ac:	fe b7       	in	r31, 0x3e	; 62
    16ae:	92 83       	std	Z+2, r25	; 0x02
    16b0:	81 83       	std	Z+1, r24	; 0x01
    16b2:	0e 94 38 36 	call	0x6c70	; 0x6c70 <printf>
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
			break;
	}
	
	// move to the next cell with respect to our orientation
	switch(curOrient){
    16ba:	11 30       	cpi	r17, 0x01	; 1
    16bc:	49 f0       	breq	.+18     	; 0x16d0 <setGateways+0x82>
    16be:	11 30       	cpi	r17, 0x01	; 1
    16c0:	28 f0       	brcs	.+10     	; 0x16cc <setGateways+0x7e>
    16c2:	12 30       	cpi	r17, 0x02	; 2
    16c4:	39 f0       	breq	.+14     	; 0x16d4 <setGateways+0x86>
    16c6:	13 30       	cpi	r17, 0x03	; 3
    16c8:	41 f4       	brne	.+16     	; 0x16da <setGateways+0x8c>
    16ca:	06 c0       	rjmp	.+12     	; 0x16d8 <setGateways+0x8a>
		case NORTH:
			curRow -= 1;
    16cc:	01 50       	subi	r16, 0x01	; 1
    16ce:	05 c0       	rjmp	.+10     	; 0x16da <setGateways+0x8c>
			break;
		case EAST:
			curCol += 1;
    16d0:	f3 94       	inc	r15
    16d2:	03 c0       	rjmp	.+6      	; 0x16da <setGateways+0x8c>
			break;
		case SOUTH:
			curRow += 1;					
    16d4:	0f 5f       	subi	r16, 0xFF	; 255
    16d6:	01 c0       	rjmp	.+2      	; 0x16da <setGateways+0x8c>
			break;
		case WEST:
			curCol -= 1;					
    16d8:	fa 94       	dec	r15
			break;
		default:
			break;
	}	
	currentCellWorld = (curRow << 2) + curCol;
    16da:	00 0f       	add	r16, r16
    16dc:	00 0f       	add	r16, r16
    16de:	0f 0d       	add	r16, r15
    16e0:	00 93 a5 06 	sts	0x06A5, r16
}
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	ff 90       	pop	r15
    16ea:	08 95       	ret

000016ec <mapWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    maps the world as it moves through it
********************************************************************/
void mapWorld( void )
{	
    16ec:	8f 92       	push	r8
    16ee:	af 92       	push	r10
    16f0:	bf 92       	push	r11
    16f2:	cf 92       	push	r12
    16f4:	df 92       	push	r13
    16f6:	ef 92       	push	r14
    16f8:	ff 92       	push	r15
    16fa:	0f 93       	push	r16
    16fc:	1f 93       	push	r17
	if(!(currentGateway&0b0001)){	
    16fe:	80 91 00 05 	lds	r24, 0x0500
    1702:	80 fd       	sbrc	r24, 0
    1704:	04 c0       	rjmp	.+8      	; 0x170e <mapWorld+0x22>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    1706:	81 e0       	ldi	r24, 0x01	; 1
    1708:	80 93 7d 04 	sts	0x047D, r24
    170c:	0a c0       	rjmp	.+20     	; 0x1722 <mapWorld+0x36>
		// Reset Odometry
		checkOdometry(1);
	}
	else if(!(currentGateway&0b1000)){
    170e:	83 fd       	sbrc	r24, 3
    1710:	04 c0       	rjmp	.+8      	; 0x171a <mapWorld+0x2e>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    1712:	82 e0       	ldi	r24, 0x02	; 2
    1714:	80 93 7d 04 	sts	0x047D, r24
    1718:	06 c0       	rjmp	.+12     	; 0x1726 <mapWorld+0x3a>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    171a:	83 e0       	ldi	r24, 0x03	; 3
    171c:	80 93 7d 04 	sts	0x047D, r24
		// Reset Odometry
		checkOdometry(1);
    1720:	81 e0       	ldi	r24, 0x01	; 1
    1722:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <checkOdometry>
	}
	
	switch(oldMove){
    1726:	80 91 7f 04 	lds	r24, 0x047F
    172a:	82 30       	cpi	r24, 0x02	; 2
    172c:	a1 f1       	breq	.+104    	; 0x1796 <mapWorld+0xaa>
    172e:	83 30       	cpi	r24, 0x03	; 3
    1730:	09 f4       	brne	.+2      	; 0x1734 <mapWorld+0x48>
    1732:	5f c0       	rjmp	.+190    	; 0x17f2 <mapWorld+0x106>
    1734:	81 30       	cpi	r24, 0x01	; 1
    1736:	09 f0       	breq	.+2      	; 0x173a <mapWorld+0x4e>
    1738:	79 c0       	rjmp	.+242    	; 0x182c <mapWorld+0x140>
		case MOVE_LEFT:
			// If our old move was left
			// And we still see the left we came from
			// then move forward
			if(currentMove == MOVE_LEFT){
    173a:	80 91 7d 04 	lds	r24, 0x047D
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	09 f0       	breq	.+2      	; 0x1744 <mapWorld+0x58>
    1742:	74 c0       	rjmp	.+232    	; 0x182c <mapWorld+0x140>
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	80 e0       	ldi	r24, 0x00	; 0
    174a:	90 e0       	ldi	r25, 0x00	; 0
    174c:	20 e0       	ldi	r18, 0x00	; 0
    174e:	30 e0       	ldi	r19, 0x00	; 0
    1750:	44 e8       	ldi	r20, 0x84	; 132
    1752:	51 ec       	ldi	r21, 0xC1	; 193
    1754:	0f 2e       	mov	r0, r31
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	ef 2e       	mov	r14, r31
    175a:	f0 e0       	ldi	r31, 0x00	; 0
    175c:	ff 2e       	mov	r15, r31
    175e:	f0 e2       	ldi	r31, 0x20	; 32
    1760:	0f 2f       	mov	r16, r31
    1762:	f1 e4       	ldi	r31, 0x41	; 65
    1764:	1f 2f       	mov	r17, r31
    1766:	f0 2d       	mov	r31, r0
    1768:	57 01       	movw	r10, r14
    176a:	68 01       	movw	r12, r16
    176c:	88 24       	eor	r8, r8
    176e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <move_arc_stwt>
				setGateways();				
    1772:	0e 94 27 0b 	call	0x164e	; 0x164e <setGateways>
				move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.0/3.0), 10, 10, 0);
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	70 e0       	ldi	r23, 0x00	; 0
    177a:	80 e0       	ldi	r24, 0x00	; 0
    177c:	9f e4       	ldi	r25, 0x4F	; 79
    177e:	2b e0       	ldi	r18, 0x0B	; 11
    1780:	37 ed       	ldi	r19, 0xD7	; 215
    1782:	43 ef       	ldi	r20, 0xF3	; 243
    1784:	51 e4       	ldi	r21, 0x41	; 65
    1786:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <move_arc_stwt>
				// Set Odomitry
				odometryStepL = (WORLD_RESOLUTION_SIZE*(2.0/3.0))/D_STEP;
    178a:	84 ee       	ldi	r24, 0xE4	; 228
    178c:	80 93 3b 07 	sts	0x073B, r24
				odometryStepR = (WORLD_RESOLUTION_SIZE*(2.0/3.0))/D_STEP;		
    1790:	80 93 7e 04 	sts	0x047E, r24
    1794:	4b c0       	rjmp	.+150    	; 0x182c <mapWorld+0x140>
			}
			break;
		case MOVE_FORWARD:
			if(currentMove == MOVE_LEFT){
    1796:	80 91 7d 04 	lds	r24, 0x047D
    179a:	81 30       	cpi	r24, 0x01	; 1
    179c:	c9 f4       	brne	.+50     	; 0x17d0 <mapWorld+0xe4>
				// If we see a left turn
				// then skoot to the center before spining left
				move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(1.0/2.0), 10, 10, 0);
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	70 e0       	ldi	r23, 0x00	; 0
    17a2:	80 e0       	ldi	r24, 0x00	; 0
    17a4:	9f e4       	ldi	r25, 0x4F	; 79
    17a6:	28 e4       	ldi	r18, 0x48	; 72
    17a8:	31 ee       	ldi	r19, 0xE1	; 225
    17aa:	46 eb       	ldi	r20, 0xB6	; 182
    17ac:	51 e4       	ldi	r21, 0x41	; 65
    17ae:	0f 2e       	mov	r0, r31
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	ef 2e       	mov	r14, r31
    17b4:	f0 e0       	ldi	r31, 0x00	; 0
    17b6:	ff 2e       	mov	r15, r31
    17b8:	f0 e2       	ldi	r31, 0x20	; 32
    17ba:	0f 2f       	mov	r16, r31
    17bc:	f1 e4       	ldi	r31, 0x41	; 65
    17be:	1f 2f       	mov	r17, r31
    17c0:	f0 2d       	mov	r31, r0
    17c2:	57 01       	movw	r10, r14
    17c4:	68 01       	movw	r12, r16
    17c6:	88 24       	eor	r8, r8
    17c8:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <move_arc_stwt>
				setGateways();
    17cc:	0e 94 27 0b 	call	0x164e	; 0x164e <setGateways>
			}
			
			if(currentMove == MOVE_FORWARD){
    17d0:	80 91 7d 04 	lds	r24, 0x047D
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	31 f4       	brne	.+12     	; 0x17e4 <mapWorld+0xf8>
				if(odometryFlag){
    17d8:	80 91 ad 06 	lds	r24, 0x06AD
    17dc:	88 23       	and	r24, r24
    17de:	11 f0       	breq	.+4      	; 0x17e4 <mapWorld+0xf8>
					// If we are going forward
					// and our odometry trips
					// then capture then map the spot
					setGateways();
    17e0:	0e 94 27 0b 	call	0x164e	; 0x164e <setGateways>
				}
			}
						
			if(currentMove == MOVE_RIGHT){
    17e4:	80 91 7d 04 	lds	r24, 0x047D
    17e8:	83 30       	cpi	r24, 0x03	; 3
    17ea:	01 f5       	brne	.+64     	; 0x182c <mapWorld+0x140>
				// If went forward into a dead end
				// then map the spot
				setGateways();
    17ec:	0e 94 27 0b 	call	0x164e	; 0x164e <setGateways>
    17f0:	1d c0       	rjmp	.+58     	; 0x182c <mapWorld+0x140>
			}
			break;
		case MOVE_RIGHT:							
			if(currentMove == MOVE_RIGHT){
    17f2:	80 91 7d 04 	lds	r24, 0x047D
    17f6:	83 30       	cpi	r24, 0x03	; 3
    17f8:	c9 f4       	brne	.+50     	; 0x182c <mapWorld+0x140>
				// If went forward into a dead end
				// then map the spot
				setGateways();
    17fa:	0e 94 27 0b 	call	0x164e	; 0x164e <setGateways>
				move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	20 e0       	ldi	r18, 0x00	; 0
    1808:	30 e0       	ldi	r19, 0x00	; 0
    180a:	44 e8       	ldi	r20, 0x84	; 132
    180c:	51 e4       	ldi	r21, 0x41	; 65
    180e:	0f 2e       	mov	r0, r31
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	ef 2e       	mov	r14, r31
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	ff 2e       	mov	r15, r31
    1818:	f0 e2       	ldi	r31, 0x20	; 32
    181a:	0f 2f       	mov	r16, r31
    181c:	f1 e4       	ldi	r31, 0x41	; 65
    181e:	1f 2f       	mov	r17, r31
    1820:	f0 2d       	mov	r31, r0
    1822:	57 01       	movw	r10, r14
    1824:	68 01       	movw	r12, r16
    1826:	88 24       	eor	r8, r8
    1828:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <move_arc_stwt>
		default:
			break;
	}
		
	
	if(currentMove != oldMove){
    182c:	90 91 7d 04 	lds	r25, 0x047D
    1830:	80 91 7f 04 	lds	r24, 0x047F
    1834:	98 17       	cp	r25, r24
    1836:	51 f0       	breq	.+20     	; 0x184c <mapWorld+0x160>
		oldMove = currentMove;
    1838:	90 93 7f 04 	sts	0x047F, r25
		LCD_clear();	
    183c:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
		printMap();
    1840:	0e 94 43 18 	call	0x3086	; 0x3086 <printMap>
		TMRSRVC_delay(5000);//wait 5 seconds
    1844:	88 e8       	ldi	r24, 0x88	; 136
    1846:	93 e1       	ldi	r25, 0x13	; 19
    1848:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	}
}
    184c:	1f 91       	pop	r17
    184e:	0f 91       	pop	r16
    1850:	ff 90       	pop	r15
    1852:	ef 90       	pop	r14
    1854:	df 90       	pop	r13
    1856:	cf 90       	pop	r12
    1858:	bf 90       	pop	r11
    185a:	af 90       	pop	r10
    185c:	8f 90       	pop	r8
    185e:	08 95       	ret

00001860 <CBOT_main>:
********************************************************************/

void CBOT_main( void )
{
	// initialize the robot
	initializeRobot();
    1860:	0e 94 88 18 	call	0x3110	; 0x3110 <initializeRobot>
	
	LCD_printf("      New Map\n\n\n\n");	
    1864:	88 ee       	ldi	r24, 0xE8	; 232
    1866:	92 e0       	ldi	r25, 0x02	; 2
    1868:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <puts>
	printMap();
    186c:	0e 94 43 18 	call	0x3086	; 0x3086 <printMap>
	TMRSRVC_delay(1000);//wait 1 seconds
    1870:	88 ee       	ldi	r24, 0xE8	; 232
    1872:	93 e0       	ldi	r25, 0x03	; 3
    1874:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();	
    1878:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	
	// Enter the robot's current (starting) position
	LCD_printf("START Map/nlocation\n\n\n");	
    187c:	89 ef       	ldi	r24, 0xF9	; 249
    187e:	92 e0       	ldi	r25, 0x02	; 2
    1880:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1884:	88 ee       	ldi	r24, 0xE8	; 232
    1886:	93 e0       	ldi	r25, 0x03	; 3
    1888:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    188c:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	worldInput();
    1890:	0e 94 af 09 	call	0x135e	; 0x135e <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1894:	88 ee       	ldi	r24, 0xE8	; 232
    1896:	93 e0       	ldi	r25, 0x03	; 3
    1898:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    189c:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Map/norientation\n\n\n");	
    18a0:	8f e0       	ldi	r24, 0x0F	; 15
    18a2:	93 e0       	ldi	r25, 0x03	; 3
    18a4:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    18a8:	88 ee       	ldi	r24, 0xE8	; 232
    18aa:	93 e0       	ldi	r25, 0x03	; 3
    18ac:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    18b0:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	orientationInput();
    18b4:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    18b8:	88 ee       	ldi	r24, 0xE8	; 232
    18ba:	93 e0       	ldi	r25, 0x03	; 3
    18bc:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    18c0:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	
	odometryTrigger = WORLD_RESOLUTION_SIZE;
    18c4:	88 e4       	ldi	r24, 0x48	; 72
    18c6:	91 ee       	ldi	r25, 0xE1	; 225
    18c8:	a6 e3       	ldi	r26, 0x36	; 54
    18ca:	b2 e4       	ldi	r27, 0x42	; 66
    18cc:	80 93 7f 05 	sts	0x057F, r24
    18d0:	90 93 80 05 	sts	0x0580, r25
    18d4:	a0 93 81 05 	sts	0x0581, r26
    18d8:	b0 93 82 05 	sts	0x0582, r27
	isMapping = 1;
    18dc:	81 e0       	ldi	r24, 0x01	; 1
    18de:	80 93 3a 07 	sts	0x073A, r24
    18e2:	1b c0       	rjmp	.+54     	; 0x191a <CBOT_main+0xba>
	
	
	
	while(isMapping)
	{
		checkIR();	
    18e4:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <checkIR>
		checkWorld();
    18e8:	0e 94 0a 06 	call	0xc14	; 0xc14 <checkWorld>
		checkOdometry(0);
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <checkOdometry>
		mapWorld();
    18f2:	0e 94 76 0b 	call	0x16ec	; 0x16ec <mapWorld>
		isMapping = !((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
    18f6:	90 91 a6 06 	lds	r25, 0x06A6
    18fa:	80 91 a5 06 	lds	r24, 0x06A5
    18fe:	98 17       	cp	r25, r24
    1900:	41 f4       	brne	.+16     	; 0x1912 <CBOT_main+0xb2>
    1902:	20 e0       	ldi	r18, 0x00	; 0
    1904:	30 e0       	ldi	r19, 0x00	; 0
    1906:	90 91 a3 05 	lds	r25, 0x05A3
    190a:	80 91 a4 05 	lds	r24, 0x05A4
    190e:	98 17       	cp	r25, r24
    1910:	11 f0       	breq	.+4      	; 0x1916 <CBOT_main+0xb6>
    1912:	21 e0       	ldi	r18, 0x01	; 1
    1914:	30 e0       	ldi	r19, 0x00	; 0
    1916:	20 93 3a 07 	sts	0x073A, r18
	odometryTrigger = WORLD_RESOLUTION_SIZE;
	isMapping = 1;
	
	
	
	while(isMapping)
    191a:	80 91 3a 07 	lds	r24, 0x073A
    191e:	88 23       	and	r24, r24
    1920:	09 f7       	brne	.-62     	; 0x18e4 <CBOT_main+0x84>
		mapWorld();
		isMapping = !((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
	}
	
	// Print the map
	LCD_clear();	
    1922:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	printMap();
    1926:	0e 94 43 18 	call	0x3086	; 0x3086 <printMap>
	TMRSRVC_delay(10000);//wait 10 seconds
    192a:	80 e1       	ldi	r24, 0x10	; 16
    192c:	97 e2       	ldi	r25, 0x27	; 39
    192e:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();	
    1932:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	
	// Enter the robot's current (starting) position
	LCD_printf("START Path\nlocation\n\n\n");	
    1936:	88 e2       	ldi	r24, 0x28	; 40
    1938:	93 e0       	ldi	r25, 0x03	; 3
    193a:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    193e:	88 ee       	ldi	r24, 0xE8	; 232
    1940:	93 e0       	ldi	r25, 0x03	; 3
    1942:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    1946:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	worldInput();
    194a:	0e 94 af 09 	call	0x135e	; 0x135e <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    194e:	88 ee       	ldi	r24, 0xE8	; 232
    1950:	93 e0       	ldi	r25, 0x03	; 3
    1952:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    1956:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Path\norientation\n\n\n");
    195a:	8e e3       	ldi	r24, 0x3E	; 62
    195c:	93 e0       	ldi	r25, 0x03	; 3
    195e:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1962:	88 ee       	ldi	r24, 0xE8	; 232
    1964:	93 e0       	ldi	r25, 0x03	; 3
    1966:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    196a:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	orientationInput();
    196e:	0e 94 f2 09 	call	0x13e4	; 0x13e4 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    1972:	88 ee       	ldi	r24, 0xE8	; 232
    1974:	93 e0       	ldi	r25, 0x03	; 3
    1976:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    197a:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	
	// Enter the robot topological commands
	LCD_printf("ENTER Path\ncommands\n\n\n");
    197e:	87 e5       	ldi	r24, 0x57	; 87
    1980:	93 e0       	ldi	r25, 0x03	; 3
    1982:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    1986:	88 ee       	ldi	r24, 0xE8	; 232
    1988:	93 e0       	ldi	r25, 0x03	; 3
    198a:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    198e:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	movesInput();
    1992:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <movesInput>
	TMRSRVC_delay(1000);//wait 1 seconds
    1996:	88 ee       	ldi	r24, 0xE8	; 232
    1998:	93 e0       	ldi	r25, 0x03	; 3
    199a:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    199e:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	
	// Print the robot gateways
	LCD_printf("Robot Gateways:\n\n\n\n");
    19a2:	8d e6       	ldi	r24, 0x6D	; 109
    19a4:	93 e0       	ldi	r25, 0x03	; 3
    19a6:	0e 94 4a 36 	call	0x6c94	; 0x6c94 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    19aa:	88 ee       	ldi	r24, 0xE8	; 232
    19ac:	93 e0       	ldi	r25, 0x03	; 3
    19ae:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    19b2:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
	getGateways();
    19b6:	0e 94 52 0a 	call	0x14a4	; 0x14a4 <getGateways>
	TMRSRVC_delay(1000);//wait 1 seconds
    19ba:	88 ee       	ldi	r24, 0xE8	; 232
    19bc:	93 e0       	ldi	r25, 0x03	; 3
    19be:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
	LCD_clear();
    19c2:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
		
		
	// Infinite loop
	while (1)
    {
		checkIR();	
    19c6:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <checkIR>
    19ca:	fd cf       	rjmp	.-6      	; 0x19c6 <CBOT_main+0x166>

000019cc <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
    19cc:	1f 93       	push	r17
    19ce:	18 2f       	mov	r17, r24
	// Update the avrage 
	unsigned char odometry = ((odometryStepL + odometryStepR)/2)*D_STEP;
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	if((odometry > odometryTrigger)||(reset))
    19d0:	20 91 7e 04 	lds	r18, 0x047E
    19d4:	60 91 3b 07 	lds	r22, 0x073B
    19d8:	70 e0       	ldi	r23, 0x00	; 0
    19da:	62 0f       	add	r22, r18
    19dc:	71 1d       	adc	r23, r1
    19de:	75 95       	asr	r23
    19e0:	67 95       	ror	r22
    19e2:	88 27       	eor	r24, r24
    19e4:	77 fd       	sbrc	r23, 7
    19e6:	80 95       	com	r24
    19e8:	98 2f       	mov	r25, r24
    19ea:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
    19ee:	2c ed       	ldi	r18, 0xDC	; 220
    19f0:	38 eb       	ldi	r19, 0xB8	; 184
    19f2:	48 e0       	ldi	r20, 0x08	; 8
    19f4:	5e e3       	ldi	r21, 0x3E	; 62
    19f6:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    19fa:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    19fe:	70 e0       	ldi	r23, 0x00	; 0
    1a00:	88 27       	eor	r24, r24
    1a02:	77 fd       	sbrc	r23, 7
    1a04:	80 95       	com	r24
    1a06:	98 2f       	mov	r25, r24
    1a08:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
    1a0c:	20 91 7f 05 	lds	r18, 0x057F
    1a10:	30 91 80 05 	lds	r19, 0x0580
    1a14:	40 91 81 05 	lds	r20, 0x0581
    1a18:	50 91 82 05 	lds	r21, 0x0582
    1a1c:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__gesf2>
    1a20:	18 16       	cp	r1, r24
    1a22:	14 f0       	brlt	.+4      	; 0x1a28 <checkOdometry+0x5c>
    1a24:	11 23       	and	r17, r17
    1a26:	39 f0       	breq	.+14     	; 0x1a36 <checkOdometry+0x6a>
	{
		odometryFlag = 1;
    1a28:	81 e0       	ldi	r24, 0x01	; 1
    1a2a:	80 93 ad 06 	sts	0x06AD, r24
		odometryStepL = 0;
    1a2e:	10 92 3b 07 	sts	0x073B, r1
		odometryStepR = 0;
    1a32:	10 92 7e 04 	sts	0x047E, r1
	}
}
    1a36:	1f 91       	pop	r17
    1a38:	08 95       	ret

00001a3a <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
    1a3a:	2f 92       	push	r2
    1a3c:	3f 92       	push	r3
    1a3e:	4f 92       	push	r4
    1a40:	5f 92       	push	r5
    1a42:	6f 92       	push	r6
    1a44:	7f 92       	push	r7
    1a46:	8f 92       	push	r8
    1a48:	9f 92       	push	r9
    1a4a:	af 92       	push	r10
    1a4c:	bf 92       	push	r11
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	64 97       	sbiw	r28, 0x14	; 20
    1a64:	0f b6       	in	r0, 0x3f	; 63
    1a66:	f8 94       	cli
    1a68:	de bf       	out	0x3e, r29	; 62
    1a6a:	0f be       	out	0x3f, r0	; 63
    1a6c:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
    1a6e:	88 23       	and	r24, r24
    1a70:	39 f5       	brne	.+78     	; 0x1ac0 <prefilter+0x86>
    1a72:	80 ef       	ldi	r24, 0xF0	; 240
    1a74:	94 e0       	ldi	r25, 0x04	; 4
    1a76:	9c 8b       	std	Y+20, r25	; 0x14
    1a78:	8b 8b       	std	Y+19, r24	; 0x13
    1a7a:	a2 e2       	ldi	r26, 0x22	; 34
    1a7c:	b7 e0       	ldi	r27, 0x07	; 7
    1a7e:	be 83       	std	Y+6, r27	; 0x06
    1a80:	ad 83       	std	Y+5, r26	; 0x05
    1a82:	e9 e1       	ldi	r30, 0x19	; 25
    1a84:	f6 e0       	ldi	r31, 0x06	; 6
    1a86:	fc 83       	std	Y+4, r31	; 0x04
    1a88:	eb 83       	std	Y+3, r30	; 0x03
    1a8a:	87 e7       	ldi	r24, 0x77	; 119
    1a8c:	95 e0       	ldi	r25, 0x05	; 5
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01
    1a92:	0f 2e       	mov	r0, r31
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	2f 2e       	mov	r2, r31
    1a98:	f0 e0       	ldi	r31, 0x00	; 0
    1a9a:	3f 2e       	mov	r3, r31
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	4f 2e       	mov	r4, r31
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	5f 2e       	mov	r5, r31
    1aa4:	f0 2d       	mov	r31, r0
    1aa6:	2f 86       	std	Y+15, r2	; 0x0f
    1aa8:	38 8a       	std	Y+16, r3	; 0x10
    1aaa:	49 8a       	std	Y+17, r4	; 0x11
    1aac:	5a 8a       	std	Y+18, r5	; 0x12
    1aae:	2b 86       	std	Y+11, r2	; 0x0b
    1ab0:	3c 86       	std	Y+12, r3	; 0x0c
    1ab2:	4d 86       	std	Y+13, r4	; 0x0d
    1ab4:	5e 86       	std	Y+14, r5	; 0x0e
    1ab6:	2f 82       	std	Y+7, r2	; 0x07
    1ab8:	38 86       	std	Y+8, r3	; 0x08
    1aba:	49 86       	std	Y+9, r4	; 0x09
    1abc:	5a 86       	std	Y+10, r5	; 0x0a
    1abe:	43 c0       	rjmp	.+134    	; 0x1b46 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    1ac0:	a0 90 a9 06 	lds	r10, 0x06A9
    1ac4:	b0 90 aa 06 	lds	r11, 0x06AA
    1ac8:	c0 90 ab 06 	lds	r12, 0x06AB
    1acc:	d0 90 ac 06 	lds	r13, 0x06AC
			rtIR_old[i] = rtIR;
    1ad0:	e0 90 ae 06 	lds	r14, 0x06AE
    1ad4:	f0 90 af 06 	lds	r15, 0x06AF
    1ad8:	00 91 b0 06 	lds	r16, 0x06B0
    1adc:	10 91 b1 06 	lds	r17, 0x06B1
			ftIR_old[i] = ftIR;
    1ae0:	20 90 f8 04 	lds	r2, 0x04F8
    1ae4:	30 90 f9 04 	lds	r3, 0x04F9
    1ae8:	40 90 fa 04 	lds	r4, 0x04FA
    1aec:	50 90 fb 04 	lds	r5, 0x04FB
			bkIR_old[i] = bkIR;
    1af0:	20 91 02 05 	lds	r18, 0x0502
    1af4:	30 91 03 05 	lds	r19, 0x0503
    1af8:	40 91 04 05 	lds	r20, 0x0504
    1afc:	50 91 05 05 	lds	r21, 0x0505
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    1b04:	fc 01       	movw	r30, r24
    1b06:	e0 58       	subi	r30, 0x80	; 128
    1b08:	fb 4f       	sbci	r31, 0xFB	; 251
    1b0a:	a0 82       	st	Z, r10
    1b0c:	b1 82       	std	Z+1, r11	; 0x01
    1b0e:	c2 82       	std	Z+2, r12	; 0x02
    1b10:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
    1b12:	fc 01       	movw	r30, r24
    1b14:	ee 54       	subi	r30, 0x4E	; 78
    1b16:	f9 4f       	sbci	r31, 0xF9	; 249
    1b18:	e0 82       	st	Z, r14
    1b1a:	f1 82       	std	Z+1, r15	; 0x01
    1b1c:	02 83       	std	Z+2, r16	; 0x02
    1b1e:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
    1b20:	fc 01       	movw	r30, r24
    1b22:	e7 55       	subi	r30, 0x57	; 87
    1b24:	fa 4f       	sbci	r31, 0xFA	; 250
    1b26:	20 82       	st	Z, r2
    1b28:	31 82       	std	Z+1, r3	; 0x01
    1b2a:	42 82       	std	Z+2, r4	; 0x02
    1b2c:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
    1b2e:	fc 01       	movw	r30, r24
    1b30:	e9 5f       	subi	r30, 0xF9	; 249
    1b32:	fa 4f       	sbci	r31, 0xFA	; 250
    1b34:	20 83       	st	Z, r18
    1b36:	31 83       	std	Z+1, r19	; 0x01
    1b38:	42 83       	std	Z+2, r20	; 0x02
    1b3a:	53 83       	std	Z+3, r21	; 0x03
    1b3c:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
    1b3e:	88 37       	cpi	r24, 0x78	; 120
    1b40:	91 05       	cpc	r25, r1
    1b42:	01 f7       	brne	.-64     	; 0x1b04 <prefilter+0xca>
    1b44:	96 cf       	rjmp	.-212    	; 0x1a72 <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
    1b46:	ab 89       	ldd	r26, Y+19	; 0x13
    1b48:	bc 89       	ldd	r27, Y+20	; 0x14
    1b4a:	2d 91       	ld	r18, X+
    1b4c:	3d 91       	ld	r19, X+
    1b4e:	4d 91       	ld	r20, X+
    1b50:	5c 91       	ld	r21, X
    1b52:	13 97       	sbiw	r26, 0x03	; 3
    1b54:	fd 01       	movw	r30, r26
    1b56:	24 83       	std	Z+4, r18	; 0x04
    1b58:	35 83       	std	Z+5, r19	; 0x05
    1b5a:	46 83       	std	Z+6, r20	; 0x06
    1b5c:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
    1b5e:	ad 81       	ldd	r26, Y+5	; 0x05
    1b60:	be 81       	ldd	r27, Y+6	; 0x06
    1b62:	ed 90       	ld	r14, X+
    1b64:	fd 90       	ld	r15, X+
    1b66:	0d 91       	ld	r16, X+
    1b68:	1c 91       	ld	r17, X
    1b6a:	13 97       	sbiw	r26, 0x03	; 3
    1b6c:	fd 01       	movw	r30, r26
    1b6e:	e4 82       	std	Z+4, r14	; 0x04
    1b70:	f5 82       	std	Z+5, r15	; 0x05
    1b72:	06 83       	std	Z+6, r16	; 0x06
    1b74:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
    1b76:	ab 81       	ldd	r26, Y+3	; 0x03
    1b78:	bc 81       	ldd	r27, Y+4	; 0x04
    1b7a:	ad 90       	ld	r10, X+
    1b7c:	bd 90       	ld	r11, X+
    1b7e:	cd 90       	ld	r12, X+
    1b80:	dc 90       	ld	r13, X
    1b82:	13 97       	sbiw	r26, 0x03	; 3
    1b84:	fd 01       	movw	r30, r26
    1b86:	a4 82       	std	Z+4, r10	; 0x04
    1b88:	b5 82       	std	Z+5, r11	; 0x05
    1b8a:	c6 82       	std	Z+6, r12	; 0x06
    1b8c:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
    1b8e:	a9 81       	ldd	r26, Y+1	; 0x01
    1b90:	ba 81       	ldd	r27, Y+2	; 0x02
    1b92:	6d 90       	ld	r6, X+
    1b94:	7d 90       	ld	r7, X+
    1b96:	8d 90       	ld	r8, X+
    1b98:	9c 90       	ld	r9, X
    1b9a:	13 97       	sbiw	r26, 0x03	; 3
    1b9c:	fd 01       	movw	r30, r26
    1b9e:	64 82       	std	Z+4, r6	; 0x04
    1ba0:	75 82       	std	Z+5, r7	; 0x05
    1ba2:	86 82       	std	Z+6, r8	; 0x06
    1ba4:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
    1ba6:	c2 01       	movw	r24, r4
    1ba8:	b1 01       	movw	r22, r2
    1baa:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    1bae:	1b 01       	movw	r2, r22
    1bb0:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
    1bb2:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bb4:	78 89       	ldd	r23, Y+16	; 0x10
    1bb6:	89 89       	ldd	r24, Y+17	; 0x11
    1bb8:	9a 89       	ldd	r25, Y+18	; 0x12
    1bba:	a8 01       	movw	r20, r16
    1bbc:	97 01       	movw	r18, r14
    1bbe:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    1bc2:	6f 87       	std	Y+15, r22	; 0x0f
    1bc4:	78 8b       	std	Y+16, r23	; 0x10
    1bc6:	89 8b       	std	Y+17, r24	; 0x11
    1bc8:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
    1bca:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bcc:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bce:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bd2:	a6 01       	movw	r20, r12
    1bd4:	95 01       	movw	r18, r10
    1bd6:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    1bda:	6b 87       	std	Y+11, r22	; 0x0b
    1bdc:	7c 87       	std	Y+12, r23	; 0x0c
    1bde:	8d 87       	std	Y+13, r24	; 0x0d
    1be0:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
    1be2:	6f 81       	ldd	r22, Y+7	; 0x07
    1be4:	78 85       	ldd	r23, Y+8	; 0x08
    1be6:	89 85       	ldd	r24, Y+9	; 0x09
    1be8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bea:	a4 01       	movw	r20, r8
    1bec:	93 01       	movw	r18, r6
    1bee:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    1bf2:	6f 83       	std	Y+7, r22	; 0x07
    1bf4:	78 87       	std	Y+8, r23	; 0x08
    1bf6:	89 87       	std	Y+9, r24	; 0x09
    1bf8:	9a 87       	std	Y+10, r25	; 0x0a
    1bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfe:	04 97       	sbiw	r24, 0x04	; 4
    1c00:	9c 8b       	std	Y+20, r25	; 0x14
    1c02:	8b 8b       	std	Y+19, r24	; 0x13
    1c04:	ad 81       	ldd	r26, Y+5	; 0x05
    1c06:	be 81       	ldd	r27, Y+6	; 0x06
    1c08:	14 97       	sbiw	r26, 0x04	; 4
    1c0a:	be 83       	std	Y+6, r27	; 0x06
    1c0c:	ad 83       	std	Y+5, r26	; 0x05
    1c0e:	eb 81       	ldd	r30, Y+3	; 0x03
    1c10:	fc 81       	ldd	r31, Y+4	; 0x04
    1c12:	34 97       	sbiw	r30, 0x04	; 4
    1c14:	fc 83       	std	Y+4, r31	; 0x04
    1c16:	eb 83       	std	Y+3, r30	; 0x03
    1c18:	89 81       	ldd	r24, Y+1	; 0x01
    1c1a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1c:	04 97       	sbiw	r24, 0x04	; 4
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
    1c22:	ab 89       	ldd	r26, Y+19	; 0x13
    1c24:	bc 89       	ldd	r27, Y+20	; 0x14
    1c26:	a8 57       	subi	r26, 0x78	; 120
    1c28:	b4 40       	sbci	r27, 0x04	; 4
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <prefilter+0x1f4>
    1c2c:	8c cf       	rjmp	.-232    	; 0x1b46 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
    1c2e:	80 91 a9 06 	lds	r24, 0x06A9
    1c32:	90 91 aa 06 	lds	r25, 0x06AA
    1c36:	a0 91 ab 06 	lds	r26, 0x06AB
    1c3a:	b0 91 ac 06 	lds	r27, 0x06AC
    1c3e:	eb 89       	ldd	r30, Y+19	; 0x13
    1c40:	fc 89       	ldd	r31, Y+20	; 0x14
    1c42:	80 87       	std	Z+8, r24	; 0x08
    1c44:	91 87       	std	Z+9, r25	; 0x09
    1c46:	a2 87       	std	Z+10, r26	; 0x0a
    1c48:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
    1c4a:	80 91 ae 06 	lds	r24, 0x06AE
    1c4e:	90 91 af 06 	lds	r25, 0x06AF
    1c52:	a0 91 b0 06 	lds	r26, 0x06B0
    1c56:	b0 91 b1 06 	lds	r27, 0x06B1
    1c5a:	80 93 b2 06 	sts	0x06B2, r24
    1c5e:	90 93 b3 06 	sts	0x06B3, r25
    1c62:	a0 93 b4 06 	sts	0x06B4, r26
    1c66:	b0 93 b5 06 	sts	0x06B5, r27
	ftIR_old[0] = ftIR;
    1c6a:	80 91 f8 04 	lds	r24, 0x04F8
    1c6e:	90 91 f9 04 	lds	r25, 0x04F9
    1c72:	a0 91 fa 04 	lds	r26, 0x04FA
    1c76:	b0 91 fb 04 	lds	r27, 0x04FB
    1c7a:	80 93 a9 05 	sts	0x05A9, r24
    1c7e:	90 93 aa 05 	sts	0x05AA, r25
    1c82:	a0 93 ab 05 	sts	0x05AB, r26
    1c86:	b0 93 ac 05 	sts	0x05AC, r27
	bkIR_old[0] = bkIR;
    1c8a:	80 91 02 05 	lds	r24, 0x0502
    1c8e:	90 91 03 05 	lds	r25, 0x0503
    1c92:	a0 91 04 05 	lds	r26, 0x0504
    1c96:	b0 91 05 05 	lds	r27, 0x0505
    1c9a:	80 93 07 05 	sts	0x0507, r24
    1c9e:	90 93 08 05 	sts	0x0508, r25
    1ca2:	a0 93 09 05 	sts	0x0509, r26
    1ca6:	b0 93 0a 05 	sts	0x050A, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
    1caa:	c2 01       	movw	r24, r4
    1cac:	b1 01       	movw	r22, r2
    1cae:	20 e0       	ldi	r18, 0x00	; 0
    1cb0:	30 e0       	ldi	r19, 0x00	; 0
    1cb2:	40 ef       	ldi	r20, 0xF0	; 240
    1cb4:	51 e4       	ldi	r21, 0x41	; 65
    1cb6:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    1cba:	60 93 a9 06 	sts	0x06A9, r22
    1cbe:	70 93 aa 06 	sts	0x06AA, r23
    1cc2:	80 93 ab 06 	sts	0x06AB, r24
    1cc6:	90 93 ac 06 	sts	0x06AC, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
    1cca:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ccc:	78 89       	ldd	r23, Y+16	; 0x10
    1cce:	89 89       	ldd	r24, Y+17	; 0x11
    1cd0:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 ef       	ldi	r20, 0xF0	; 240
    1cd8:	51 e4       	ldi	r21, 0x41	; 65
    1cda:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    1cde:	60 93 ae 06 	sts	0x06AE, r22
    1ce2:	70 93 af 06 	sts	0x06AF, r23
    1ce6:	80 93 b0 06 	sts	0x06B0, r24
    1cea:	90 93 b1 06 	sts	0x06B1, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
    1cee:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cf2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cf4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 ef       	ldi	r20, 0xF0	; 240
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    1d02:	60 93 f8 04 	sts	0x04F8, r22
    1d06:	70 93 f9 04 	sts	0x04F9, r23
    1d0a:	80 93 fa 04 	sts	0x04FA, r24
    1d0e:	90 93 fb 04 	sts	0x04FB, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
    1d12:	6f 81       	ldd	r22, Y+7	; 0x07
    1d14:	78 85       	ldd	r23, Y+8	; 0x08
    1d16:	89 85       	ldd	r24, Y+9	; 0x09
    1d18:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d1a:	20 e0       	ldi	r18, 0x00	; 0
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	40 ef       	ldi	r20, 0xF0	; 240
    1d20:	51 e4       	ldi	r21, 0x41	; 65
    1d22:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    1d26:	60 93 02 05 	sts	0x0502, r22
    1d2a:	70 93 03 05 	sts	0x0503, r23
    1d2e:	80 93 04 05 	sts	0x0504, r24
    1d32:	90 93 05 05 	sts	0x0505, r25
}
    1d36:	64 96       	adiw	r28, 0x14	; 20
    1d38:	0f b6       	in	r0, 0x3f	; 63
    1d3a:	f8 94       	cli
    1d3c:	de bf       	out	0x3e, r29	; 62
    1d3e:	0f be       	out	0x3f, r0	; 63
    1d40:	cd bf       	out	0x3d, r28	; 61
    1d42:	cf 91       	pop	r28
    1d44:	df 91       	pop	r29
    1d46:	1f 91       	pop	r17
    1d48:	0f 91       	pop	r16
    1d4a:	ff 90       	pop	r15
    1d4c:	ef 90       	pop	r14
    1d4e:	df 90       	pop	r13
    1d50:	cf 90       	pop	r12
    1d52:	bf 90       	pop	r11
    1d54:	af 90       	pop	r10
    1d56:	9f 90       	pop	r9
    1d58:	8f 90       	pop	r8
    1d5a:	7f 90       	pop	r7
    1d5c:	6f 90       	pop	r6
    1d5e:	5f 90       	pop	r5
    1d60:	4f 90       	pop	r4
    1d62:	3f 90       	pop	r3
    1d64:	2f 90       	pop	r2
    1d66:	08 95       	ret

00001d68 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
    1d68:	af 92       	push	r10
    1d6a:	bf 92       	push	r11
    1d6c:	cf 92       	push	r12
    1d6e:	df 92       	push	r13
    1d70:	ef 92       	push	r14
    1d72:	ff 92       	push	r15
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	7b 01       	movw	r14, r22
    1d7a:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
    1d7c:	44 23       	and	r20, r20
    1d7e:	61 f0       	breq	.+24     	; 0x1d98 <pidController+0x30>
		Ierror = 0;
    1d80:	80 e0       	ldi	r24, 0x00	; 0
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	a0 e0       	ldi	r26, 0x00	; 0
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	80 93 fc 04 	sts	0x04FC, r24
    1d8c:	90 93 fd 04 	sts	0x04FD, r25
    1d90:	a0 93 fe 04 	sts	0x04FE, r26
    1d94:	b0 93 ff 04 	sts	0x04FF, r27
	}
	// At the current error to the running sum
	Ierror += error;
    1d98:	c8 01       	movw	r24, r16
    1d9a:	b7 01       	movw	r22, r14
    1d9c:	20 91 fc 04 	lds	r18, 0x04FC
    1da0:	30 91 fd 04 	lds	r19, 0x04FD
    1da4:	40 91 fe 04 	lds	r20, 0x04FE
    1da8:	50 91 ff 04 	lds	r21, 0x04FF
    1dac:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    1db0:	5b 01       	movw	r10, r22
    1db2:	6c 01       	movw	r12, r24
    1db4:	60 93 fc 04 	sts	0x04FC, r22
    1db8:	70 93 fd 04 	sts	0x04FD, r23
    1dbc:	80 93 fe 04 	sts	0x04FE, r24
    1dc0:	90 93 ff 04 	sts	0x04FF, r25
    1dc4:	c8 01       	movw	r24, r16
    1dc6:	b7 01       	movw	r22, r14
    1dc8:	20 91 a5 05 	lds	r18, 0x05A5
    1dcc:	30 91 a6 05 	lds	r19, 0x05A6
    1dd0:	40 91 a7 05 	lds	r20, 0x05A7
    1dd4:	50 91 a8 05 	lds	r21, 0x05A8
    1dd8:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__subsf3>
    1ddc:	20 e0       	ldi	r18, 0x00	; 0
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	40 e0       	ldi	r20, 0x00	; 0
    1de2:	50 e0       	ldi	r21, 0x00	; 0
    1de4:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    1de8:	9b 01       	movw	r18, r22
    1dea:	ac 01       	movw	r20, r24
    1dec:	c8 01       	movw	r24, r16
    1dee:	b7 01       	movw	r22, r14
    1df0:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    1df4:	7b 01       	movw	r14, r22
    1df6:	8c 01       	movw	r16, r24
    1df8:	c6 01       	movw	r24, r12
    1dfa:	b5 01       	movw	r22, r10
    1dfc:	20 e0       	ldi	r18, 0x00	; 0
    1dfe:	30 e0       	ldi	r19, 0x00	; 0
    1e00:	40 e0       	ldi	r20, 0x00	; 0
    1e02:	50 e0       	ldi	r21, 0x00	; 0
    1e04:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    1e08:	9b 01       	movw	r18, r22
    1e0a:	ac 01       	movw	r20, r24
    1e0c:	c8 01       	movw	r24, r16
    1e0e:	b7 01       	movw	r22, r14
    1e10:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
    1e14:	1f 91       	pop	r17
    1e16:	0f 91       	pop	r16
    1e18:	ff 90       	pop	r15
    1e1a:	ef 90       	pop	r14
    1e1c:	df 90       	pop	r13
    1e1e:	cf 90       	pop	r12
    1e20:	bf 90       	pop	r11
    1e22:	af 90       	pop	r10
    1e24:	08 95       	ret

00001e26 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1e26:	44 23       	and	r20, r20
    1e28:	81 f0       	breq	.+32     	; 0x1e4a <rotateCell+0x24>
    1e2a:	06 c0       	rjmp	.+12     	; 0x1e38 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1e2c:	e8 2f       	mov	r30, r24
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	e0 58       	subi	r30, 0x80	; 128
    1e32:	fc 4f       	sbci	r31, 0xFC	; 252
    1e34:	80 81       	ld	r24, Z
			orient--;
    1e36:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1e38:	66 23       	and	r22, r22
    1e3a:	c1 f7       	brne	.-16     	; 0x1e2c <rotateCell+0x6>
    1e3c:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1e3e:	e8 2f       	mov	r30, r24
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	e0 57       	subi	r30, 0x70	; 112
    1e44:	fc 4f       	sbci	r31, 0xFC	; 252
    1e46:	80 81       	ld	r24, Z
			orient--;
    1e48:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1e4a:	66 23       	and	r22, r22
    1e4c:	c1 f7       	brne	.-16     	; 0x1e3e <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1e4e:	08 95       	ret

00001e50 <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    1e50:	8f 92       	push	r8
    1e52:	af 92       	push	r10
    1e54:	bf 92       	push	r11
    1e56:	cf 92       	push	r12
    1e58:	df 92       	push	r13
    1e5a:	ef 92       	push	r14
    1e5c:	ff 92       	push	r15
    1e5e:	0f 93       	push	r16
    1e60:	1f 93       	push	r17
    1e62:	cf 93       	push	r28
    1e64:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    1e66:	0e 94 61 1b 	call	0x36c2	; 0x36c2 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    1e6a:	67 2b       	or	r22, r23
    1e6c:	09 f0       	breq	.+2      	; 0x1e70 <moveWander+0x20>
    1e6e:	76 c0       	rjmp	.+236    	; 0x1f5c <moveWander+0x10c>
    1e70:	89 2b       	or	r24, r25
    1e72:	09 f0       	breq	.+2      	; 0x1e76 <moveWander+0x26>
    1e74:	73 c0       	rjmp	.+230    	; 0x1f5c <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    1e76:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <rand>
    1e7a:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    1e7c:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <rand>
    1e80:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    1e82:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <rand>
    1e86:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    1e88:	0e 94 0f 35 	call	0x6a1e	; 0x6a1e <rand>
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	6a e0       	ldi	r22, 0x0A	; 10
    1e90:	70 e0       	ldi	r23, 0x00	; 0
    1e92:	0e 94 40 33 	call	0x6680	; 0x6680 <__divmodhi4>
    1e96:	08 97       	sbiw	r24, 0x08	; 8
    1e98:	0c f0       	brlt	.+2      	; 0x1e9c <moveWander+0x4c>
    1e9a:	21 e0       	ldi	r18, 0x01	; 1
    1e9c:	82 2e       	mov	r8, r18
    1e9e:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    1ea0:	c8 01       	movw	r24, r16
    1ea2:	60 e9       	ldi	r22, 0x90	; 144
    1ea4:	71 e0       	ldi	r23, 0x01	; 1
    1ea6:	0e 94 40 33 	call	0x6680	; 0x6680 <__divmodhi4>
    1eaa:	20 e9       	ldi	r18, 0x90	; 144
    1eac:	a2 2e       	mov	r10, r18
    1eae:	21 e0       	ldi	r18, 0x01	; 1
    1eb0:	b2 2e       	mov	r11, r18
    1eb2:	a8 0e       	add	r10, r24
    1eb4:	b9 1e       	adc	r11, r25
    1eb6:	8d b7       	in	r24, 0x3d	; 61
    1eb8:	9e b7       	in	r25, 0x3e	; 62
    1eba:	09 97       	sbiw	r24, 0x09	; 9
    1ebc:	0f b6       	in	r0, 0x3f	; 63
    1ebe:	f8 94       	cli
    1ec0:	9e bf       	out	0x3e, r25	; 62
    1ec2:	0f be       	out	0x3f, r0	; 63
    1ec4:	8d bf       	out	0x3d, r24	; 61
    1ec6:	0d b7       	in	r16, 0x3d	; 61
    1ec8:	1e b7       	in	r17, 0x3e	; 62
    1eca:	0f 5f       	subi	r16, 0xFF	; 255
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ece:	c7 01       	movw	r24, r14
    1ed0:	68 ec       	ldi	r22, 0xC8	; 200
    1ed2:	70 e0       	ldi	r23, 0x00	; 0
    1ed4:	0e 94 40 33 	call	0x6680	; 0x6680 <__divmodhi4>
    1ed8:	88 53       	subi	r24, 0x38	; 56
    1eda:	9f 4f       	sbci	r25, 0xFF	; 255
    1edc:	aa 27       	eor	r26, r26
    1ede:	97 fd       	sbrc	r25, 7
    1ee0:	a0 95       	com	r26
    1ee2:	ba 2f       	mov	r27, r26
    1ee4:	bc 01       	movw	r22, r24
    1ee6:	cd 01       	movw	r24, r26
    1ee8:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
    1eec:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    1ef0:	6b 01       	movw	r12, r22
    1ef2:	7c 01       	movw	r14, r24
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	b1 82       	std	Z+1, r11	; 0x01
    1ef8:	a0 82       	st	Z, r10
    1efa:	ce 01       	movw	r24, r28
    1efc:	68 ec       	ldi	r22, 0xC8	; 200
    1efe:	70 e0       	ldi	r23, 0x00	; 0
    1f00:	0e 94 40 33 	call	0x6680	; 0x6680 <__divmodhi4>
    1f04:	88 53       	subi	r24, 0x38	; 56
    1f06:	9f 4f       	sbci	r25, 0xFF	; 255
    1f08:	aa 27       	eor	r26, r26
    1f0a:	97 fd       	sbrc	r25, 7
    1f0c:	a0 95       	com	r26
    1f0e:	ba 2f       	mov	r27, r26
    1f10:	bc 01       	movw	r22, r24
    1f12:	cd 01       	movw	r24, r26
    1f14:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
    1f18:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    1f1c:	f8 01       	movw	r30, r16
    1f1e:	73 83       	std	Z+3, r23	; 0x03
    1f20:	62 83       	std	Z+2, r22	; 0x02
    1f22:	82 ec       	ldi	r24, 0xC2	; 194
    1f24:	91 e0       	ldi	r25, 0x01	; 1
    1f26:	95 83       	std	Z+5, r25	; 0x05
    1f28:	84 83       	std	Z+4, r24	; 0x04
    1f2a:	16 82       	std	Z+6, r1	; 0x06
    1f2c:	10 86       	std	Z+8, r1	; 0x08
    1f2e:	17 82       	std	Z+7, r1	; 0x07
    1f30:	81 e0       	ldi	r24, 0x01	; 1
    1f32:	62 e0       	ldi	r22, 0x02	; 2
    1f34:	48 2d       	mov	r20, r8
    1f36:	95 01       	movw	r18, r10
    1f38:	86 01       	movw	r16, r12
    1f3a:	92 ec       	ldi	r25, 0xC2	; 194
    1f3c:	e9 2e       	mov	r14, r25
    1f3e:	91 e0       	ldi	r25, 0x01	; 1
    1f40:	f9 2e       	mov	r15, r25
    1f42:	cc 24       	eor	r12, r12
    1f44:	aa 24       	eor	r10, r10
    1f46:	bb 24       	eor	r11, r11
    1f48:	0e 94 29 1c 	call	0x3852	; 0x3852 <STEPPER_move>
    1f4c:	8d b7       	in	r24, 0x3d	; 61
    1f4e:	9e b7       	in	r25, 0x3e	; 62
    1f50:	09 96       	adiw	r24, 0x09	; 9
    1f52:	0f b6       	in	r0, 0x3f	; 63
    1f54:	f8 94       	cli
    1f56:	9e bf       	out	0x3e, r25	; 62
    1f58:	0f be       	out	0x3f, r0	; 63
    1f5a:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	df 91       	pop	r29
    1f60:	cf 91       	pop	r28
    1f62:	1f 91       	pop	r17
    1f64:	0f 91       	pop	r16
    1f66:	ff 90       	pop	r15
    1f68:	ef 90       	pop	r14
    1f6a:	df 90       	pop	r13
    1f6c:	cf 90       	pop	r12
    1f6e:	bf 90       	pop	r11
    1f70:	af 90       	pop	r10
    1f72:	8f 90       	pop	r8
    1f74:	08 95       	ret

00001f76 <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
    1f76:	2f 92       	push	r2
    1f78:	3f 92       	push	r3
    1f7a:	4f 92       	push	r4
    1f7c:	5f 92       	push	r5
    1f7e:	6f 92       	push	r6
    1f80:	7f 92       	push	r7
    1f82:	8f 92       	push	r8
    1f84:	9f 92       	push	r9
    1f86:	af 92       	push	r10
    1f88:	bf 92       	push	r11
    1f8a:	cf 92       	push	r12
    1f8c:	df 92       	push	r13
    1f8e:	ef 92       	push	r14
    1f90:	ff 92       	push	r15
    1f92:	0f 93       	push	r16
    1f94:	1f 93       	push	r17
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	00 d0       	rcall	.+0      	; 0x1f9c <moveAway+0x26>
    1f9c:	00 d0       	rcall	.+0      	; 0x1f9e <moveAway+0x28>
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    1fa2:	60 90 f8 04 	lds	r6, 0x04F8
    1fa6:	70 90 f9 04 	lds	r7, 0x04F9
    1faa:	80 90 fa 04 	lds	r8, 0x04FA
    1fae:	90 90 fb 04 	lds	r9, 0x04FB
    1fb2:	a0 90 02 05 	lds	r10, 0x0502
    1fb6:	b0 90 03 05 	lds	r11, 0x0503
    1fba:	c0 90 04 05 	lds	r12, 0x0504
    1fbe:	d0 90 05 05 	lds	r13, 0x0505
	float moveX = rtIR - ltIR;
    1fc2:	e0 90 ae 06 	lds	r14, 0x06AE
    1fc6:	f0 90 af 06 	lds	r15, 0x06AF
    1fca:	00 91 b0 06 	lds	r16, 0x06B0
    1fce:	10 91 b1 06 	lds	r17, 0x06B1
    1fd2:	80 91 a9 06 	lds	r24, 0x06A9
    1fd6:	90 91 aa 06 	lds	r25, 0x06AA
    1fda:	a0 91 ab 06 	lds	r26, 0x06AB
    1fde:	b0 91 ac 06 	lds	r27, 0x06AC
    1fe2:	89 83       	std	Y+1, r24	; 0x01
    1fe4:	9a 83       	std	Y+2, r25	; 0x02
    1fe6:	ab 83       	std	Y+3, r26	; 0x03
    1fe8:	bc 83       	std	Y+4, r27	; 0x04
    1fea:	c8 01       	movw	r24, r16
    1fec:	b7 01       	movw	r22, r14
    1fee:	29 81       	ldd	r18, Y+1	; 0x01
    1ff0:	3a 81       	ldd	r19, Y+2	; 0x02
    1ff2:	4b 81       	ldd	r20, Y+3	; 0x03
    1ff4:	5c 81       	ldd	r21, Y+4	; 0x04
    1ff6:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__subsf3>
    1ffa:	1b 01       	movw	r2, r22
    1ffc:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
    1ffe:	c4 01       	movw	r24, r8
    2000:	b3 01       	movw	r22, r6
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 ee       	ldi	r20, 0xE0	; 224
    2008:	50 e4       	ldi	r21, 0x40	; 64
    200a:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
    200e:	87 fd       	sbrc	r24, 7
    2010:	0b c0       	rjmp	.+22     	; 0x2028 <moveAway+0xb2>
    2012:	c6 01       	movw	r24, r12
    2014:	b5 01       	movw	r22, r10
    2016:	20 e0       	ldi	r18, 0x00	; 0
    2018:	30 e0       	ldi	r19, 0x00	; 0
    201a:	40 ee       	ldi	r20, 0xE0	; 224
    201c:	50 e4       	ldi	r21, 0x40	; 64
    201e:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
    2022:	88 23       	and	r24, r24
    2024:	0c f0       	brlt	.+2      	; 0x2028 <moveAway+0xb2>
    2026:	68 c0       	rjmp	.+208    	; 0x20f8 <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    2028:	c4 01       	movw	r24, r8
    202a:	b3 01       	movw	r22, r6
    202c:	a6 01       	movw	r20, r12
    202e:	95 01       	movw	r18, r10
    2030:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__subsf3>
    2034:	7b 01       	movw	r14, r22
    2036:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
    2038:	77 24       	eor	r7, r7
    203a:	20 e0       	ldi	r18, 0x00	; 0
    203c:	30 e0       	ldi	r19, 0x00	; 0
    203e:	40 e0       	ldi	r20, 0x00	; 0
    2040:	50 e0       	ldi	r21, 0x00	; 0
    2042:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__gesf2>
    2046:	88 23       	and	r24, r24
    2048:	14 f0       	brlt	.+4      	; 0x204e <moveAway+0xd8>
    204a:	77 24       	eor	r7, r7
    204c:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    204e:	c8 01       	movw	r24, r16
    2050:	b7 01       	movw	r22, r14
    2052:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__fixsfsi>
    2056:	9b 01       	movw	r18, r22
    2058:	77 ff       	sbrs	r23, 7
    205a:	03 c0       	rjmp	.+6      	; 0x2062 <moveAway+0xec>
    205c:	30 95       	com	r19
    205e:	21 95       	neg	r18
    2060:	3f 4f       	sbci	r19, 0xFF	; 255
    2062:	b9 01       	movw	r22, r18
    2064:	88 27       	eor	r24, r24
    2066:	77 fd       	sbrc	r23, 7
    2068:	80 95       	com	r24
    206a:	98 2f       	mov	r25, r24
    206c:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
    2070:	6b 01       	movw	r12, r22
    2072:	7c 01       	movw	r14, r24
    2074:	ad b7       	in	r26, 0x3d	; 61
    2076:	be b7       	in	r27, 0x3e	; 62
    2078:	19 97       	sbiw	r26, 0x09	; 9
    207a:	0f b6       	in	r0, 0x3f	; 63
    207c:	f8 94       	cli
    207e:	be bf       	out	0x3e, r27	; 62
    2080:	0f be       	out	0x3f, r0	; 63
    2082:	ad bf       	out	0x3d, r26	; 61
    2084:	0d b7       	in	r16, 0x3d	; 61
    2086:	1e b7       	in	r17, 0x3e	; 62
    2088:	0f 5f       	subi	r16, 0xFF	; 255
    208a:	1f 4f       	sbci	r17, 0xFF	; 255
    208c:	a2 01       	movw	r20, r4
    208e:	91 01       	movw	r18, r2
    2090:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    2094:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2098:	4b 01       	movw	r8, r22
    209a:	5c 01       	movw	r10, r24
    209c:	82 e3       	ldi	r24, 0x32	; 50
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	f8 01       	movw	r30, r16
    20a2:	91 83       	std	Z+1, r25	; 0x01
    20a4:	80 83       	st	Z, r24
    20a6:	c7 01       	movw	r24, r14
    20a8:	b6 01       	movw	r22, r12
    20aa:	a2 01       	movw	r20, r4
    20ac:	91 01       	movw	r18, r2
    20ae:	0e 94 ff 2b 	call	0x57fe	; 0x57fe <__subsf3>
    20b2:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    20b6:	d8 01       	movw	r26, r16
    20b8:	13 96       	adiw	r26, 0x03	; 3
    20ba:	7c 93       	st	X, r23
    20bc:	6e 93       	st	-X, r22
    20be:	12 97       	sbiw	r26, 0x02	; 2
    20c0:	82 ec       	ldi	r24, 0xC2	; 194
    20c2:	91 e0       	ldi	r25, 0x01	; 1
    20c4:	15 96       	adiw	r26, 0x05	; 5
    20c6:	9c 93       	st	X, r25
    20c8:	8e 93       	st	-X, r24
    20ca:	14 97       	sbiw	r26, 0x04	; 4
    20cc:	16 96       	adiw	r26, 0x06	; 6
    20ce:	1c 92       	st	X, r1
    20d0:	16 97       	sbiw	r26, 0x06	; 6
    20d2:	18 96       	adiw	r26, 0x08	; 8
    20d4:	1c 92       	st	X, r1
    20d6:	1e 92       	st	-X, r1
    20d8:	17 97       	sbiw	r26, 0x07	; 7
    20da:	81 e0       	ldi	r24, 0x01	; 1
    20dc:	62 e0       	ldi	r22, 0x02	; 2
    20de:	47 2d       	mov	r20, r7
    20e0:	22 e3       	ldi	r18, 0x32	; 50
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	84 01       	movw	r16, r8
    20e6:	e2 ec       	ldi	r30, 0xC2	; 194
    20e8:	ee 2e       	mov	r14, r30
    20ea:	e1 e0       	ldi	r30, 0x01	; 1
    20ec:	fe 2e       	mov	r15, r30
    20ee:	cc 24       	eor	r12, r12
    20f0:	aa 24       	eor	r10, r10
    20f2:	bb 24       	eor	r11, r11
    20f4:	87 2c       	mov	r8, r7
    20f6:	82 c0       	rjmp	.+260    	; 0x21fc <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
    20f8:	c8 01       	movw	r24, r16
    20fa:	b7 01       	movw	r22, r14
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e2       	ldi	r20, 0x20	; 32
    2102:	51 e4       	ldi	r21, 0x41	; 65
    2104:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
    2108:	88 23       	and	r24, r24
    210a:	b4 f5       	brge	.+108    	; 0x2178 <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    210c:	c2 01       	movw	r24, r4
    210e:	b1 01       	movw	r22, r2
    2110:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__fixsfsi>
    2114:	8b 01       	movw	r16, r22
    2116:	77 ff       	sbrs	r23, 7
    2118:	03 c0       	rjmp	.+6      	; 0x2120 <moveAway+0x1aa>
    211a:	10 95       	com	r17
    211c:	01 95       	neg	r16
    211e:	1f 4f       	sbci	r17, 0xFF	; 255
    2120:	2d b7       	in	r18, 0x3d	; 61
    2122:	3e b7       	in	r19, 0x3e	; 62
    2124:	29 50       	subi	r18, 0x09	; 9
    2126:	30 40       	sbci	r19, 0x00	; 0
    2128:	0f b6       	in	r0, 0x3f	; 63
    212a:	f8 94       	cli
    212c:	3e bf       	out	0x3e, r19	; 62
    212e:	0f be       	out	0x3f, r0	; 63
    2130:	2d bf       	out	0x3d, r18	; 61
    2132:	ed b7       	in	r30, 0x3d	; 61
    2134:	fe b7       	in	r31, 0x3e	; 62
    2136:	31 96       	adiw	r30, 0x01	; 1
    2138:	88 ec       	ldi	r24, 0xC8	; 200
    213a:	90 e0       	ldi	r25, 0x00	; 0
    213c:	ad b7       	in	r26, 0x3d	; 61
    213e:	be b7       	in	r27, 0x3e	; 62
    2140:	12 96       	adiw	r26, 0x02	; 2
    2142:	9c 93       	st	X, r25
    2144:	8e 93       	st	-X, r24
    2146:	11 97       	sbiw	r26, 0x01	; 1
    2148:	13 83       	std	Z+3, r17	; 0x03
    214a:	02 83       	std	Z+2, r16	; 0x02
    214c:	82 ec       	ldi	r24, 0xC2	; 194
    214e:	91 e0       	ldi	r25, 0x01	; 1
    2150:	95 83       	std	Z+5, r25	; 0x05
    2152:	84 83       	std	Z+4, r24	; 0x04
    2154:	16 82       	std	Z+6, r1	; 0x06
    2156:	10 86       	std	Z+8, r1	; 0x08
    2158:	17 82       	std	Z+7, r1	; 0x07
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	62 e0       	ldi	r22, 0x02	; 2
    215e:	40 e0       	ldi	r20, 0x00	; 0
    2160:	28 ec       	ldi	r18, 0xC8	; 200
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	72 ec       	ldi	r23, 0xC2	; 194
    2166:	e7 2e       	mov	r14, r23
    2168:	71 e0       	ldi	r23, 0x01	; 1
    216a:	f7 2e       	mov	r15, r23
    216c:	cc 24       	eor	r12, r12
    216e:	aa 24       	eor	r10, r10
    2170:	bb 24       	eor	r11, r11
    2172:	88 24       	eor	r8, r8
    2174:	83 94       	inc	r8
    2176:	42 c0       	rjmp	.+132    	; 0x21fc <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
    2178:	69 81       	ldd	r22, Y+1	; 0x01
    217a:	7a 81       	ldd	r23, Y+2	; 0x02
    217c:	8b 81       	ldd	r24, Y+3	; 0x03
    217e:	9c 81       	ldd	r25, Y+4	; 0x04
    2180:	20 e0       	ldi	r18, 0x00	; 0
    2182:	30 e0       	ldi	r19, 0x00	; 0
    2184:	40 e2       	ldi	r20, 0x20	; 32
    2186:	51 e4       	ldi	r21, 0x41	; 65
    2188:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
    218c:	87 fd       	sbrc	r24, 7
    218e:	02 c0       	rjmp	.+4      	; 0x2194 <moveAway+0x21e>
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	3f c0       	rjmp	.+126    	; 0x2212 <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    2194:	c2 01       	movw	r24, r4
    2196:	b1 01       	movw	r22, r2
    2198:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__fixsfsi>
    219c:	8b 01       	movw	r16, r22
    219e:	77 ff       	sbrs	r23, 7
    21a0:	03 c0       	rjmp	.+6      	; 0x21a8 <moveAway+0x232>
    21a2:	10 95       	com	r17
    21a4:	01 95       	neg	r16
    21a6:	1f 4f       	sbci	r17, 0xFF	; 255
    21a8:	2d b7       	in	r18, 0x3d	; 61
    21aa:	3e b7       	in	r19, 0x3e	; 62
    21ac:	29 50       	subi	r18, 0x09	; 9
    21ae:	30 40       	sbci	r19, 0x00	; 0
    21b0:	0f b6       	in	r0, 0x3f	; 63
    21b2:	f8 94       	cli
    21b4:	3e bf       	out	0x3e, r19	; 62
    21b6:	0f be       	out	0x3f, r0	; 63
    21b8:	2d bf       	out	0x3d, r18	; 61
    21ba:	ed b7       	in	r30, 0x3d	; 61
    21bc:	fe b7       	in	r31, 0x3e	; 62
    21be:	31 96       	adiw	r30, 0x01	; 1
    21c0:	88 ec       	ldi	r24, 0xC8	; 200
    21c2:	90 e0       	ldi	r25, 0x00	; 0
    21c4:	ad b7       	in	r26, 0x3d	; 61
    21c6:	be b7       	in	r27, 0x3e	; 62
    21c8:	12 96       	adiw	r26, 0x02	; 2
    21ca:	9c 93       	st	X, r25
    21cc:	8e 93       	st	-X, r24
    21ce:	11 97       	sbiw	r26, 0x01	; 1
    21d0:	13 83       	std	Z+3, r17	; 0x03
    21d2:	02 83       	std	Z+2, r16	; 0x02
    21d4:	82 ec       	ldi	r24, 0xC2	; 194
    21d6:	91 e0       	ldi	r25, 0x01	; 1
    21d8:	95 83       	std	Z+5, r25	; 0x05
    21da:	84 83       	std	Z+4, r24	; 0x04
    21dc:	16 82       	std	Z+6, r1	; 0x06
    21de:	10 86       	std	Z+8, r1	; 0x08
    21e0:	17 82       	std	Z+7, r1	; 0x07
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	62 e0       	ldi	r22, 0x02	; 2
    21e6:	41 e0       	ldi	r20, 0x01	; 1
    21e8:	28 ec       	ldi	r18, 0xC8	; 200
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	52 ec       	ldi	r21, 0xC2	; 194
    21ee:	e5 2e       	mov	r14, r21
    21f0:	51 e0       	ldi	r21, 0x01	; 1
    21f2:	f5 2e       	mov	r15, r21
    21f4:	cc 24       	eor	r12, r12
    21f6:	aa 24       	eor	r10, r10
    21f8:	bb 24       	eor	r11, r11
    21fa:	88 24       	eor	r8, r8
    21fc:	0e 94 29 1c 	call	0x3852	; 0x3852 <STEPPER_move>
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	ed b7       	in	r30, 0x3d	; 61
    2204:	fe b7       	in	r31, 0x3e	; 62
    2206:	39 96       	adiw	r30, 0x09	; 9
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	fe bf       	out	0x3e, r31	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
    2212:	0f 90       	pop	r0
    2214:	0f 90       	pop	r0
    2216:	0f 90       	pop	r0
    2218:	0f 90       	pop	r0
    221a:	cf 91       	pop	r28
    221c:	df 91       	pop	r29
    221e:	1f 91       	pop	r17
    2220:	0f 91       	pop	r16
    2222:	ff 90       	pop	r15
    2224:	ef 90       	pop	r14
    2226:	df 90       	pop	r13
    2228:	cf 90       	pop	r12
    222a:	bf 90       	pop	r11
    222c:	af 90       	pop	r10
    222e:	9f 90       	pop	r9
    2230:	8f 90       	pop	r8
    2232:	7f 90       	pop	r7
    2234:	6f 90       	pop	r6
    2236:	5f 90       	pop	r5
    2238:	4f 90       	pop	r4
    223a:	3f 90       	pop	r3
    223c:	2f 90       	pop	r2
    223e:	08 95       	ret

00002240 <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    2240:	2f 92       	push	r2
    2242:	3f 92       	push	r3
    2244:	4f 92       	push	r4
    2246:	5f 92       	push	r5
    2248:	6f 92       	push	r6
    224a:	7f 92       	push	r7
    224c:	8f 92       	push	r8
    224e:	9f 92       	push	r9
    2250:	af 92       	push	r10
    2252:	bf 92       	push	r11
    2254:	cf 92       	push	r12
    2256:	df 92       	push	r13
    2258:	ef 92       	push	r14
    225a:	ff 92       	push	r15
    225c:	0f 93       	push	r16
    225e:	1f 93       	push	r17
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	a0 97       	sbiw	r28, 0x20	; 32
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61
    2274:	2b 01       	movw	r4, r22
    2276:	3c 01       	movw	r6, r24
    2278:	2d 83       	std	Y+5, r18	; 0x05
    227a:	3e 83       	std	Y+6, r19	; 0x06
    227c:	4f 83       	std	Y+7, r20	; 0x07
    227e:	58 87       	std	Y+8, r21	; 0x08
    2280:	e9 86       	std	Y+9, r14	; 0x09
    2282:	fa 86       	std	Y+10, r15	; 0x0a
    2284:	0b 87       	std	Y+11, r16	; 0x0b
    2286:	1c 87       	std	Y+12, r17	; 0x0c
    2288:	ad 86       	std	Y+13, r10	; 0x0d
    228a:	be 86       	std	Y+14, r11	; 0x0e
    228c:	cf 86       	std	Y+15, r12	; 0x0f
    228e:	d8 8a       	std	Y+16, r13	; 0x10
    2290:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    2292:	33 24       	eor	r3, r3
    2294:	ca 01       	movw	r24, r20
    2296:	b9 01       	movw	r22, r18
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	40 e0       	ldi	r20, 0x00	; 0
    229e:	50 e0       	ldi	r21, 0x00	; 0
    22a0:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__gesf2>
    22a4:	18 16       	cp	r1, r24
    22a6:	14 f4       	brge	.+4      	; 0x22ac <move_arc_stnb+0x6c>
    22a8:	33 24       	eor	r3, r3
    22aa:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    22ac:	6d 81       	ldd	r22, Y+5	; 0x05
    22ae:	7e 81       	ldd	r23, Y+6	; 0x06
    22b0:	8f 81       	ldd	r24, Y+7	; 0x07
    22b2:	98 85       	ldd	r25, Y+8	; 0x08
    22b4:	2c ed       	ldi	r18, 0xDC	; 220
    22b6:	38 eb       	ldi	r19, 0xB8	; 184
    22b8:	48 e0       	ldi	r20, 0x08	; 8
    22ba:	5e e3       	ldi	r21, 0x3E	; 62
    22bc:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    22c0:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__fixsfsi>
    22c4:	9b 01       	movw	r18, r22
    22c6:	77 ff       	sbrs	r23, 7
    22c8:	03 c0       	rjmp	.+6      	; 0x22d0 <move_arc_stnb+0x90>
    22ca:	30 95       	com	r19
    22cc:	21 95       	neg	r18
    22ce:	3f 4f       	sbci	r19, 0xFF	; 255
    22d0:	b9 01       	movw	r22, r18
    22d2:	88 27       	eor	r24, r24
    22d4:	77 fd       	sbrc	r23, 7
    22d6:	80 95       	com	r24
    22d8:	98 2f       	mov	r25, r24
    22da:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
    22de:	69 83       	std	Y+1, r22	; 0x01
    22e0:	7a 83       	std	Y+2, r23	; 0x02
    22e2:	8b 83       	std	Y+3, r24	; 0x03
    22e4:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    22e6:	69 85       	ldd	r22, Y+9	; 0x09
    22e8:	7a 85       	ldd	r23, Y+10	; 0x0a
    22ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    22ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    22ee:	2c ed       	ldi	r18, 0xDC	; 220
    22f0:	38 eb       	ldi	r19, 0xB8	; 184
    22f2:	48 e0       	ldi	r20, 0x08	; 8
    22f4:	5e e3       	ldi	r21, 0x3E	; 62
    22f6:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    22fa:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__fixsfsi>
    22fe:	9b 01       	movw	r18, r22
    2300:	77 ff       	sbrs	r23, 7
    2302:	03 c0       	rjmp	.+6      	; 0x230a <move_arc_stnb+0xca>
    2304:	30 95       	com	r19
    2306:	21 95       	neg	r18
    2308:	3f 4f       	sbci	r19, 0xFF	; 255
    230a:	b9 01       	movw	r22, r18
    230c:	88 27       	eor	r24, r24
    230e:	77 fd       	sbrc	r23, 7
    2310:	80 95       	com	r24
    2312:	98 2f       	mov	r25, r24
    2314:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
    2318:	4b 01       	movw	r8, r22
    231a:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    231c:	6d 85       	ldd	r22, Y+13	; 0x0d
    231e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2320:	8f 85       	ldd	r24, Y+15	; 0x0f
    2322:	98 89       	ldd	r25, Y+16	; 0x10
    2324:	2c ed       	ldi	r18, 0xDC	; 220
    2326:	38 eb       	ldi	r19, 0xB8	; 184
    2328:	48 e0       	ldi	r20, 0x08	; 8
    232a:	5e e3       	ldi	r21, 0x3E	; 62
    232c:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2330:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__fixsfsi>
    2334:	9b 01       	movw	r18, r22
    2336:	77 ff       	sbrs	r23, 7
    2338:	03 c0       	rjmp	.+6      	; 0x2340 <move_arc_stnb+0x100>
    233a:	30 95       	com	r19
    233c:	21 95       	neg	r18
    233e:	3f 4f       	sbci	r19, 0xFF	; 255
    2340:	b9 01       	movw	r22, r18
    2342:	88 27       	eor	r24, r24
    2344:	77 fd       	sbrc	r23, 7
    2346:	80 95       	com	r24
    2348:	98 2f       	mov	r25, r24
    234a:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
    234e:	6b 01       	movw	r12, r22
    2350:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    2352:	c3 01       	movw	r24, r6
    2354:	b2 01       	movw	r22, r4
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	30 e0       	ldi	r19, 0x00	; 0
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	5f e4       	ldi	r21, 0x4F	; 79
    235e:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
    2362:	88 23       	and	r24, r24
    2364:	a1 f5       	brne	.+104    	; 0x23ce <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    2366:	69 81       	ldd	r22, Y+1	; 0x01
    2368:	7a 81       	ldd	r23, Y+2	; 0x02
    236a:	8b 81       	ldd	r24, Y+3	; 0x03
    236c:	9c 81       	ldd	r25, Y+4	; 0x04
    236e:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2372:	2b 01       	movw	r4, r22
    2374:	3c 01       	movw	r6, r24
    2376:	c5 01       	movw	r24, r10
    2378:	b4 01       	movw	r22, r8
    237a:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    237e:	4b 01       	movw	r8, r22
    2380:	5c 01       	movw	r10, r24
    2382:	c7 01       	movw	r24, r14
    2384:	b6 01       	movw	r22, r12
    2386:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    238a:	6b 01       	movw	r12, r22
    238c:	7c 01       	movw	r14, r24
    238e:	2d b7       	in	r18, 0x3d	; 61
    2390:	3e b7       	in	r19, 0x3e	; 62
    2392:	29 50       	subi	r18, 0x09	; 9
    2394:	30 40       	sbci	r19, 0x00	; 0
    2396:	0f b6       	in	r0, 0x3f	; 63
    2398:	f8 94       	cli
    239a:	3e bf       	out	0x3e, r19	; 62
    239c:	0f be       	out	0x3f, r0	; 63
    239e:	2d bf       	out	0x3d, r18	; 61
    23a0:	ed b7       	in	r30, 0x3d	; 61
    23a2:	fe b7       	in	r31, 0x3e	; 62
    23a4:	31 96       	adiw	r30, 0x01	; 1
    23a6:	ad b7       	in	r26, 0x3d	; 61
    23a8:	be b7       	in	r27, 0x3e	; 62
    23aa:	12 96       	adiw	r26, 0x02	; 2
    23ac:	5c 92       	st	X, r5
    23ae:	4e 92       	st	-X, r4
    23b0:	11 97       	sbiw	r26, 0x01	; 1
    23b2:	93 82       	std	Z+3, r9	; 0x03
    23b4:	82 82       	std	Z+2, r8	; 0x02
    23b6:	75 83       	std	Z+5, r23	; 0x05
    23b8:	64 83       	std	Z+4, r22	; 0x04
    23ba:	26 82       	std	Z+6, r2	; 0x06
    23bc:	10 86       	std	Z+8, r1	; 0x08
    23be:	17 82       	std	Z+7, r1	; 0x07
    23c0:	81 e0       	ldi	r24, 0x01	; 1
    23c2:	62 e0       	ldi	r22, 0x02	; 2
    23c4:	43 2d       	mov	r20, r3
    23c6:	92 01       	movw	r18, r4
    23c8:	84 01       	movw	r16, r8
    23ca:	76 01       	movw	r14, r12
    23cc:	c1 c1       	rjmp	.+898    	; 0x2750 <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    23ce:	c3 01       	movw	r24, r6
    23d0:	b2 01       	movw	r22, r4
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	50 e0       	ldi	r21, 0x00	; 0
    23da:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
    23de:	88 23       	and	r24, r24
    23e0:	e9 f5       	brne	.+122    	; 0x245c <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    23e2:	69 81       	ldd	r22, Y+1	; 0x01
    23e4:	7a 81       	ldd	r23, Y+2	; 0x02
    23e6:	8b 81       	ldd	r24, Y+3	; 0x03
    23e8:	9c 81       	ldd	r25, Y+4	; 0x04
    23ea:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    23ee:	3b 01       	movw	r6, r22
    23f0:	c5 01       	movw	r24, r10
    23f2:	b4 01       	movw	r22, r8
    23f4:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    23f8:	8b 01       	movw	r16, r22
    23fa:	c7 01       	movw	r24, r14
    23fc:	b6 01       	movw	r22, r12
    23fe:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2402:	7b 01       	movw	r14, r22
    2404:	2d b7       	in	r18, 0x3d	; 61
    2406:	3e b7       	in	r19, 0x3e	; 62
    2408:	29 50       	subi	r18, 0x09	; 9
    240a:	30 40       	sbci	r19, 0x00	; 0
    240c:	0f b6       	in	r0, 0x3f	; 63
    240e:	f8 94       	cli
    2410:	3e bf       	out	0x3e, r19	; 62
    2412:	0f be       	out	0x3f, r0	; 63
    2414:	2d bf       	out	0x3d, r18	; 61
    2416:	ed b7       	in	r30, 0x3d	; 61
    2418:	fe b7       	in	r31, 0x3e	; 62
    241a:	31 96       	adiw	r30, 0x01	; 1
    241c:	40 e0       	ldi	r20, 0x00	; 0
    241e:	33 20       	and	r3, r3
    2420:	09 f4       	brne	.+2      	; 0x2424 <move_arc_stnb+0x1e4>
    2422:	41 e0       	ldi	r20, 0x01	; 1
    2424:	71 82       	std	Z+1, r7	; 0x01
    2426:	60 82       	st	Z, r6
    2428:	13 83       	std	Z+3, r17	; 0x03
    242a:	02 83       	std	Z+2, r16	; 0x02
    242c:	f5 82       	std	Z+5, r15	; 0x05
    242e:	e4 82       	std	Z+4, r14	; 0x04
    2430:	26 82       	std	Z+6, r2	; 0x06
    2432:	10 86       	std	Z+8, r1	; 0x08
    2434:	17 82       	std	Z+7, r1	; 0x07
    2436:	81 e0       	ldi	r24, 0x01	; 1
    2438:	62 e0       	ldi	r22, 0x02	; 2
    243a:	93 01       	movw	r18, r6
    243c:	c2 2c       	mov	r12, r2
    243e:	aa 24       	eor	r10, r10
    2440:	bb 24       	eor	r11, r11
    2442:	83 2c       	mov	r8, r3
    2444:	0e 94 29 1c 	call	0x3852	; 0x3852 <STEPPER_move>
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	ad b7       	in	r26, 0x3d	; 61
    244c:	be b7       	in	r27, 0x3e	; 62
    244e:	19 96       	adiw	r26, 0x09	; 9
    2450:	0f b6       	in	r0, 0x3f	; 63
    2452:	f8 94       	cli
    2454:	be bf       	out	0x3e, r27	; 62
    2456:	0f be       	out	0x3f, r0	; 63
    2458:	ad bf       	out	0x3d, r26	; 61
    245a:	89 c1       	rjmp	.+786    	; 0x276e <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    245c:	c3 01       	movw	r24, r6
    245e:	b2 01       	movw	r22, r4
    2460:	20 e0       	ldi	r18, 0x00	; 0
    2462:	30 e0       	ldi	r19, 0x00	; 0
    2464:	40 e0       	ldi	r20, 0x00	; 0
    2466:	50 e0       	ldi	r21, 0x00	; 0
    2468:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__gesf2>
    246c:	18 16       	cp	r1, r24
    246e:	0c f0       	brlt	.+2      	; 0x2472 <move_arc_stnb+0x232>
    2470:	b1 c0       	rjmp	.+354    	; 0x25d4 <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2472:	66 e6       	ldi	r22, 0x66	; 102
    2474:	76 e6       	ldi	r23, 0x66	; 102
    2476:	8a ea       	ldi	r24, 0xAA	; 170
    2478:	91 ec       	ldi	r25, 0xC1	; 193
    247a:	a3 01       	movw	r20, r6
    247c:	92 01       	movw	r18, r4
    247e:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2482:	20 e0       	ldi	r18, 0x00	; 0
    2484:	30 e0       	ldi	r19, 0x00	; 0
    2486:	40 e8       	ldi	r20, 0x80	; 128
    2488:	5f e3       	ldi	r21, 0x3F	; 63
    248a:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    248e:	7b 01       	movw	r14, r22
    2490:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2492:	66 e6       	ldi	r22, 0x66	; 102
    2494:	76 e6       	ldi	r23, 0x66	; 102
    2496:	8a ea       	ldi	r24, 0xAA	; 170
    2498:	91 e4       	ldi	r25, 0x41	; 65
    249a:	a3 01       	movw	r20, r6
    249c:	92 01       	movw	r18, r4
    249e:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e8       	ldi	r20, 0x80	; 128
    24a8:	5f e3       	ldi	r21, 0x3F	; 63
    24aa:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    24ae:	5b 01       	movw	r10, r22
    24b0:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    24b2:	ed b7       	in	r30, 0x3d	; 61
    24b4:	fe b7       	in	r31, 0x3e	; 62
    24b6:	39 97       	sbiw	r30, 0x09	; 9
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	fe bf       	out	0x3e, r31	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	ed bf       	out	0x3d, r30	; 61
    24c2:	8d b6       	in	r8, 0x3d	; 61
    24c4:	9e b6       	in	r9, 0x3e	; 62
    24c6:	08 94       	sec
    24c8:	81 1c       	adc	r8, r1
    24ca:	91 1c       	adc	r9, r1
    24cc:	6d 81       	ldd	r22, Y+5	; 0x05
    24ce:	7e 81       	ldd	r23, Y+6	; 0x06
    24d0:	8f 81       	ldd	r24, Y+7	; 0x07
    24d2:	98 85       	ldd	r25, Y+8	; 0x08
    24d4:	a8 01       	movw	r20, r16
    24d6:	97 01       	movw	r18, r14
    24d8:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    24dc:	2c ed       	ldi	r18, 0xDC	; 220
    24de:	38 eb       	ldi	r19, 0xB8	; 184
    24e0:	48 e0       	ldi	r20, 0x08	; 8
    24e2:	5e e3       	ldi	r21, 0x3E	; 62
    24e4:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    24e8:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    24ec:	69 8b       	std	Y+17, r22	; 0x11
    24ee:	7a 8b       	std	Y+18, r23	; 0x12
    24f0:	8b 8b       	std	Y+19, r24	; 0x13
    24f2:	9c 8b       	std	Y+20, r25	; 0x14
    24f4:	69 85       	ldd	r22, Y+9	; 0x09
    24f6:	7a 85       	ldd	r23, Y+10	; 0x0a
    24f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    24fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    24fc:	a8 01       	movw	r20, r16
    24fe:	97 01       	movw	r18, r14
    2500:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2504:	2c ed       	ldi	r18, 0xDC	; 220
    2506:	38 eb       	ldi	r19, 0xB8	; 184
    2508:	48 e0       	ldi	r20, 0x08	; 8
    250a:	5e e3       	ldi	r21, 0x3E	; 62
    250c:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2510:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2514:	6d 8b       	std	Y+21, r22	; 0x15
    2516:	7e 8b       	std	Y+22, r23	; 0x16
    2518:	8f 8b       	std	Y+23, r24	; 0x17
    251a:	98 8f       	std	Y+24, r25	; 0x18
    251c:	6d 85       	ldd	r22, Y+13	; 0x0d
    251e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2520:	8f 85       	ldd	r24, Y+15	; 0x0f
    2522:	98 89       	ldd	r25, Y+16	; 0x10
    2524:	a8 01       	movw	r20, r16
    2526:	97 01       	movw	r18, r14
    2528:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    252c:	2c ed       	ldi	r18, 0xDC	; 220
    252e:	38 eb       	ldi	r19, 0xB8	; 184
    2530:	48 e0       	ldi	r20, 0x08	; 8
    2532:	5e e3       	ldi	r21, 0x3E	; 62
    2534:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2538:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    253c:	2b 01       	movw	r4, r22
    253e:	3c 01       	movw	r6, r24
    2540:	6d 81       	ldd	r22, Y+5	; 0x05
    2542:	7e 81       	ldd	r23, Y+6	; 0x06
    2544:	8f 81       	ldd	r24, Y+7	; 0x07
    2546:	98 85       	ldd	r25, Y+8	; 0x08
    2548:	a6 01       	movw	r20, r12
    254a:	95 01       	movw	r18, r10
    254c:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2550:	2c ed       	ldi	r18, 0xDC	; 220
    2552:	38 eb       	ldi	r19, 0xB8	; 184
    2554:	48 e0       	ldi	r20, 0x08	; 8
    2556:	5e e3       	ldi	r21, 0x3E	; 62
    2558:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    255c:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2560:	d4 01       	movw	r26, r8
    2562:	6d 93       	st	X+, r22
    2564:	7c 93       	st	X, r23
    2566:	69 85       	ldd	r22, Y+9	; 0x09
    2568:	7a 85       	ldd	r23, Y+10	; 0x0a
    256a:	8b 85       	ldd	r24, Y+11	; 0x0b
    256c:	9c 85       	ldd	r25, Y+12	; 0x0c
    256e:	a6 01       	movw	r20, r12
    2570:	95 01       	movw	r18, r10
    2572:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2576:	2c ed       	ldi	r18, 0xDC	; 220
    2578:	38 eb       	ldi	r19, 0xB8	; 184
    257a:	48 e0       	ldi	r20, 0x08	; 8
    257c:	5e e3       	ldi	r21, 0x3E	; 62
    257e:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2582:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2586:	f4 01       	movw	r30, r8
    2588:	73 83       	std	Z+3, r23	; 0x03
    258a:	62 83       	std	Z+2, r22	; 0x02
    258c:	6d 85       	ldd	r22, Y+13	; 0x0d
    258e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2590:	8f 85       	ldd	r24, Y+15	; 0x0f
    2592:	98 89       	ldd	r25, Y+16	; 0x10
    2594:	a6 01       	movw	r20, r12
    2596:	95 01       	movw	r18, r10
    2598:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    259c:	2c ed       	ldi	r18, 0xDC	; 220
    259e:	38 eb       	ldi	r19, 0xB8	; 184
    25a0:	48 e0       	ldi	r20, 0x08	; 8
    25a2:	5e e3       	ldi	r21, 0x3E	; 62
    25a4:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    25a8:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    25ac:	d4 01       	movw	r26, r8
    25ae:	15 96       	adiw	r26, 0x05	; 5
    25b0:	7c 93       	st	X, r23
    25b2:	6e 93       	st	-X, r22
    25b4:	14 97       	sbiw	r26, 0x04	; 4
    25b6:	16 96       	adiw	r26, 0x06	; 6
    25b8:	2c 92       	st	X, r2
    25ba:	16 97       	sbiw	r26, 0x06	; 6
    25bc:	18 96       	adiw	r26, 0x08	; 8
    25be:	1c 92       	st	X, r1
    25c0:	1e 92       	st	-X, r1
    25c2:	17 97       	sbiw	r26, 0x07	; 7
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	62 e0       	ldi	r22, 0x02	; 2
    25c8:	43 2d       	mov	r20, r3
    25ca:	29 89       	ldd	r18, Y+17	; 0x11
    25cc:	3a 89       	ldd	r19, Y+18	; 0x12
    25ce:	0d 89       	ldd	r16, Y+21	; 0x15
    25d0:	1e 89       	ldd	r17, Y+22	; 0x16
    25d2:	bd c0       	rjmp	.+378    	; 0x274e <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    25d4:	c3 01       	movw	r24, r6
    25d6:	b2 01       	movw	r22, r4
    25d8:	20 e0       	ldi	r18, 0x00	; 0
    25da:	30 e0       	ldi	r19, 0x00	; 0
    25dc:	40 e0       	ldi	r20, 0x00	; 0
    25de:	50 e0       	ldi	r21, 0x00	; 0
    25e0:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
    25e4:	87 fd       	sbrc	r24, 7
    25e6:	02 c0       	rjmp	.+4      	; 0x25ec <move_arc_stnb+0x3ac>
    25e8:	80 e0       	ldi	r24, 0x00	; 0
    25ea:	c1 c0       	rjmp	.+386    	; 0x276e <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    25ec:	66 e6       	ldi	r22, 0x66	; 102
    25ee:	76 e6       	ldi	r23, 0x66	; 102
    25f0:	8a ea       	ldi	r24, 0xAA	; 170
    25f2:	91 e4       	ldi	r25, 0x41	; 65
    25f4:	a3 01       	movw	r20, r6
    25f6:	92 01       	movw	r18, r4
    25f8:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e8       	ldi	r20, 0x80	; 128
    2602:	5f e3       	ldi	r21, 0x3F	; 63
    2604:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    2608:	7b 01       	movw	r14, r22
    260a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    260c:	66 e6       	ldi	r22, 0x66	; 102
    260e:	76 e6       	ldi	r23, 0x66	; 102
    2610:	8a ea       	ldi	r24, 0xAA	; 170
    2612:	91 ec       	ldi	r25, 0xC1	; 193
    2614:	a3 01       	movw	r20, r6
    2616:	92 01       	movw	r18, r4
    2618:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    261c:	20 e0       	ldi	r18, 0x00	; 0
    261e:	30 e0       	ldi	r19, 0x00	; 0
    2620:	40 e8       	ldi	r20, 0x80	; 128
    2622:	5f e3       	ldi	r21, 0x3F	; 63
    2624:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    2628:	5b 01       	movw	r10, r22
    262a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    262c:	2d b7       	in	r18, 0x3d	; 61
    262e:	3e b7       	in	r19, 0x3e	; 62
    2630:	29 50       	subi	r18, 0x09	; 9
    2632:	30 40       	sbci	r19, 0x00	; 0
    2634:	0f b6       	in	r0, 0x3f	; 63
    2636:	f8 94       	cli
    2638:	3e bf       	out	0x3e, r19	; 62
    263a:	0f be       	out	0x3f, r0	; 63
    263c:	2d bf       	out	0x3d, r18	; 61
    263e:	8d b6       	in	r8, 0x3d	; 61
    2640:	9e b6       	in	r9, 0x3e	; 62
    2642:	08 94       	sec
    2644:	81 1c       	adc	r8, r1
    2646:	91 1c       	adc	r9, r1
    2648:	6d 81       	ldd	r22, Y+5	; 0x05
    264a:	7e 81       	ldd	r23, Y+6	; 0x06
    264c:	8f 81       	ldd	r24, Y+7	; 0x07
    264e:	98 85       	ldd	r25, Y+8	; 0x08
    2650:	a8 01       	movw	r20, r16
    2652:	97 01       	movw	r18, r14
    2654:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2658:	2c ed       	ldi	r18, 0xDC	; 220
    265a:	38 eb       	ldi	r19, 0xB8	; 184
    265c:	48 e0       	ldi	r20, 0x08	; 8
    265e:	5e e3       	ldi	r21, 0x3E	; 62
    2660:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2664:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2668:	69 8f       	std	Y+25, r22	; 0x19
    266a:	7a 8f       	std	Y+26, r23	; 0x1a
    266c:	8b 8f       	std	Y+27, r24	; 0x1b
    266e:	9c 8f       	std	Y+28, r25	; 0x1c
    2670:	69 85       	ldd	r22, Y+9	; 0x09
    2672:	7a 85       	ldd	r23, Y+10	; 0x0a
    2674:	8b 85       	ldd	r24, Y+11	; 0x0b
    2676:	9c 85       	ldd	r25, Y+12	; 0x0c
    2678:	a8 01       	movw	r20, r16
    267a:	97 01       	movw	r18, r14
    267c:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2680:	2c ed       	ldi	r18, 0xDC	; 220
    2682:	38 eb       	ldi	r19, 0xB8	; 184
    2684:	48 e0       	ldi	r20, 0x08	; 8
    2686:	5e e3       	ldi	r21, 0x3E	; 62
    2688:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    268c:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2690:	6d 8f       	std	Y+29, r22	; 0x1d
    2692:	7e 8f       	std	Y+30, r23	; 0x1e
    2694:	8f 8f       	std	Y+31, r24	; 0x1f
    2696:	98 a3       	std	Y+32, r25	; 0x20
    2698:	6d 85       	ldd	r22, Y+13	; 0x0d
    269a:	7e 85       	ldd	r23, Y+14	; 0x0e
    269c:	8f 85       	ldd	r24, Y+15	; 0x0f
    269e:	98 89       	ldd	r25, Y+16	; 0x10
    26a0:	a8 01       	movw	r20, r16
    26a2:	97 01       	movw	r18, r14
    26a4:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    26a8:	2c ed       	ldi	r18, 0xDC	; 220
    26aa:	38 eb       	ldi	r19, 0xB8	; 184
    26ac:	48 e0       	ldi	r20, 0x08	; 8
    26ae:	5e e3       	ldi	r21, 0x3E	; 62
    26b0:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    26b4:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    26b8:	2b 01       	movw	r4, r22
    26ba:	3c 01       	movw	r6, r24
    26bc:	6d 81       	ldd	r22, Y+5	; 0x05
    26be:	7e 81       	ldd	r23, Y+6	; 0x06
    26c0:	8f 81       	ldd	r24, Y+7	; 0x07
    26c2:	98 85       	ldd	r25, Y+8	; 0x08
    26c4:	a6 01       	movw	r20, r12
    26c6:	95 01       	movw	r18, r10
    26c8:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    26cc:	2c ed       	ldi	r18, 0xDC	; 220
    26ce:	38 eb       	ldi	r19, 0xB8	; 184
    26d0:	48 e0       	ldi	r20, 0x08	; 8
    26d2:	5e e3       	ldi	r21, 0x3E	; 62
    26d4:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    26d8:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    26dc:	d4 01       	movw	r26, r8
    26de:	6d 93       	st	X+, r22
    26e0:	7c 93       	st	X, r23
    26e2:	69 85       	ldd	r22, Y+9	; 0x09
    26e4:	7a 85       	ldd	r23, Y+10	; 0x0a
    26e6:	8b 85       	ldd	r24, Y+11	; 0x0b
    26e8:	9c 85       	ldd	r25, Y+12	; 0x0c
    26ea:	a6 01       	movw	r20, r12
    26ec:	95 01       	movw	r18, r10
    26ee:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    26f2:	2c ed       	ldi	r18, 0xDC	; 220
    26f4:	38 eb       	ldi	r19, 0xB8	; 184
    26f6:	48 e0       	ldi	r20, 0x08	; 8
    26f8:	5e e3       	ldi	r21, 0x3E	; 62
    26fa:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    26fe:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2702:	f4 01       	movw	r30, r8
    2704:	73 83       	std	Z+3, r23	; 0x03
    2706:	62 83       	std	Z+2, r22	; 0x02
    2708:	6d 85       	ldd	r22, Y+13	; 0x0d
    270a:	7e 85       	ldd	r23, Y+14	; 0x0e
    270c:	8f 85       	ldd	r24, Y+15	; 0x0f
    270e:	98 89       	ldd	r25, Y+16	; 0x10
    2710:	a6 01       	movw	r20, r12
    2712:	95 01       	movw	r18, r10
    2714:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2718:	2c ed       	ldi	r18, 0xDC	; 220
    271a:	38 eb       	ldi	r19, 0xB8	; 184
    271c:	48 e0       	ldi	r20, 0x08	; 8
    271e:	5e e3       	ldi	r21, 0x3E	; 62
    2720:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2724:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2728:	d4 01       	movw	r26, r8
    272a:	15 96       	adiw	r26, 0x05	; 5
    272c:	7c 93       	st	X, r23
    272e:	6e 93       	st	-X, r22
    2730:	14 97       	sbiw	r26, 0x04	; 4
    2732:	16 96       	adiw	r26, 0x06	; 6
    2734:	2c 92       	st	X, r2
    2736:	16 97       	sbiw	r26, 0x06	; 6
    2738:	18 96       	adiw	r26, 0x08	; 8
    273a:	1c 92       	st	X, r1
    273c:	1e 92       	st	-X, r1
    273e:	17 97       	sbiw	r26, 0x07	; 7
    2740:	81 e0       	ldi	r24, 0x01	; 1
    2742:	62 e0       	ldi	r22, 0x02	; 2
    2744:	43 2d       	mov	r20, r3
    2746:	29 8d       	ldd	r18, Y+25	; 0x19
    2748:	3a 8d       	ldd	r19, Y+26	; 0x1a
    274a:	0d 8d       	ldd	r16, Y+29	; 0x1d
    274c:	1e 8d       	ldd	r17, Y+30	; 0x1e
    274e:	72 01       	movw	r14, r4
    2750:	c2 2c       	mov	r12, r2
    2752:	aa 24       	eor	r10, r10
    2754:	bb 24       	eor	r11, r11
    2756:	83 2c       	mov	r8, r3
    2758:	0e 94 29 1c 	call	0x3852	; 0x3852 <STEPPER_move>
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	ed b7       	in	r30, 0x3d	; 61
    2760:	fe b7       	in	r31, 0x3e	; 62
    2762:	39 96       	adiw	r30, 0x09	; 9
    2764:	0f b6       	in	r0, 0x3f	; 63
    2766:	f8 94       	cli
    2768:	fe bf       	out	0x3e, r31	; 62
    276a:	0f be       	out	0x3f, r0	; 63
    276c:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    276e:	a0 96       	adiw	r28, 0x20	; 32
    2770:	0f b6       	in	r0, 0x3f	; 63
    2772:	f8 94       	cli
    2774:	de bf       	out	0x3e, r29	; 62
    2776:	0f be       	out	0x3f, r0	; 63
    2778:	cd bf       	out	0x3d, r28	; 61
    277a:	cf 91       	pop	r28
    277c:	df 91       	pop	r29
    277e:	1f 91       	pop	r17
    2780:	0f 91       	pop	r16
    2782:	ff 90       	pop	r15
    2784:	ef 90       	pop	r14
    2786:	df 90       	pop	r13
    2788:	cf 90       	pop	r12
    278a:	bf 90       	pop	r11
    278c:	af 90       	pop	r10
    278e:	9f 90       	pop	r9
    2790:	8f 90       	pop	r8
    2792:	7f 90       	pop	r7
    2794:	6f 90       	pop	r6
    2796:	5f 90       	pop	r5
    2798:	4f 90       	pop	r4
    279a:	3f 90       	pop	r3
    279c:	2f 90       	pop	r2
    279e:	08 95       	ret

000027a0 <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    27a0:	2f 92       	push	r2
    27a2:	3f 92       	push	r3
    27a4:	4f 92       	push	r4
    27a6:	5f 92       	push	r5
    27a8:	6f 92       	push	r6
    27aa:	7f 92       	push	r7
    27ac:	8f 92       	push	r8
    27ae:	9f 92       	push	r9
    27b0:	af 92       	push	r10
    27b2:	bf 92       	push	r11
    27b4:	cf 92       	push	r12
    27b6:	df 92       	push	r13
    27b8:	ef 92       	push	r14
    27ba:	ff 92       	push	r15
    27bc:	0f 93       	push	r16
    27be:	1f 93       	push	r17
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	cd b7       	in	r28, 0x3d	; 61
    27c6:	de b7       	in	r29, 0x3e	; 62
    27c8:	a0 97       	sbiw	r28, 0x20	; 32
    27ca:	0f b6       	in	r0, 0x3f	; 63
    27cc:	f8 94       	cli
    27ce:	de bf       	out	0x3e, r29	; 62
    27d0:	0f be       	out	0x3f, r0	; 63
    27d2:	cd bf       	out	0x3d, r28	; 61
    27d4:	2b 01       	movw	r4, r22
    27d6:	3c 01       	movw	r6, r24
    27d8:	2d 83       	std	Y+5, r18	; 0x05
    27da:	3e 83       	std	Y+6, r19	; 0x06
    27dc:	4f 83       	std	Y+7, r20	; 0x07
    27de:	58 87       	std	Y+8, r21	; 0x08
    27e0:	e9 86       	std	Y+9, r14	; 0x09
    27e2:	fa 86       	std	Y+10, r15	; 0x0a
    27e4:	0b 87       	std	Y+11, r16	; 0x0b
    27e6:	1c 87       	std	Y+12, r17	; 0x0c
    27e8:	ad 86       	std	Y+13, r10	; 0x0d
    27ea:	be 86       	std	Y+14, r11	; 0x0e
    27ec:	cf 86       	std	Y+15, r12	; 0x0f
    27ee:	d8 8a       	std	Y+16, r13	; 0x10
    27f0:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    27f2:	33 24       	eor	r3, r3
    27f4:	ca 01       	movw	r24, r20
    27f6:	b9 01       	movw	r22, r18
    27f8:	20 e0       	ldi	r18, 0x00	; 0
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	40 e0       	ldi	r20, 0x00	; 0
    27fe:	50 e0       	ldi	r21, 0x00	; 0
    2800:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__gesf2>
    2804:	18 16       	cp	r1, r24
    2806:	14 f4       	brge	.+4      	; 0x280c <move_arc_stwt+0x6c>
    2808:	33 24       	eor	r3, r3
    280a:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    280c:	6d 81       	ldd	r22, Y+5	; 0x05
    280e:	7e 81       	ldd	r23, Y+6	; 0x06
    2810:	8f 81       	ldd	r24, Y+7	; 0x07
    2812:	98 85       	ldd	r25, Y+8	; 0x08
    2814:	2c ed       	ldi	r18, 0xDC	; 220
    2816:	38 eb       	ldi	r19, 0xB8	; 184
    2818:	48 e0       	ldi	r20, 0x08	; 8
    281a:	5e e3       	ldi	r21, 0x3E	; 62
    281c:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2820:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__fixsfsi>
    2824:	9b 01       	movw	r18, r22
    2826:	77 ff       	sbrs	r23, 7
    2828:	03 c0       	rjmp	.+6      	; 0x2830 <move_arc_stwt+0x90>
    282a:	30 95       	com	r19
    282c:	21 95       	neg	r18
    282e:	3f 4f       	sbci	r19, 0xFF	; 255
    2830:	b9 01       	movw	r22, r18
    2832:	88 27       	eor	r24, r24
    2834:	77 fd       	sbrc	r23, 7
    2836:	80 95       	com	r24
    2838:	98 2f       	mov	r25, r24
    283a:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
    283e:	69 83       	std	Y+1, r22	; 0x01
    2840:	7a 83       	std	Y+2, r23	; 0x02
    2842:	8b 83       	std	Y+3, r24	; 0x03
    2844:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    2846:	69 85       	ldd	r22, Y+9	; 0x09
    2848:	7a 85       	ldd	r23, Y+10	; 0x0a
    284a:	8b 85       	ldd	r24, Y+11	; 0x0b
    284c:	9c 85       	ldd	r25, Y+12	; 0x0c
    284e:	2c ed       	ldi	r18, 0xDC	; 220
    2850:	38 eb       	ldi	r19, 0xB8	; 184
    2852:	48 e0       	ldi	r20, 0x08	; 8
    2854:	5e e3       	ldi	r21, 0x3E	; 62
    2856:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    285a:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__fixsfsi>
    285e:	9b 01       	movw	r18, r22
    2860:	77 ff       	sbrs	r23, 7
    2862:	03 c0       	rjmp	.+6      	; 0x286a <move_arc_stwt+0xca>
    2864:	30 95       	com	r19
    2866:	21 95       	neg	r18
    2868:	3f 4f       	sbci	r19, 0xFF	; 255
    286a:	b9 01       	movw	r22, r18
    286c:	88 27       	eor	r24, r24
    286e:	77 fd       	sbrc	r23, 7
    2870:	80 95       	com	r24
    2872:	98 2f       	mov	r25, r24
    2874:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
    2878:	4b 01       	movw	r8, r22
    287a:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    287c:	6d 85       	ldd	r22, Y+13	; 0x0d
    287e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2880:	8f 85       	ldd	r24, Y+15	; 0x0f
    2882:	98 89       	ldd	r25, Y+16	; 0x10
    2884:	2c ed       	ldi	r18, 0xDC	; 220
    2886:	38 eb       	ldi	r19, 0xB8	; 184
    2888:	48 e0       	ldi	r20, 0x08	; 8
    288a:	5e e3       	ldi	r21, 0x3E	; 62
    288c:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2890:	0e 94 d0 2c 	call	0x59a0	; 0x59a0 <__fixsfsi>
    2894:	9b 01       	movw	r18, r22
    2896:	77 ff       	sbrs	r23, 7
    2898:	03 c0       	rjmp	.+6      	; 0x28a0 <move_arc_stwt+0x100>
    289a:	30 95       	com	r19
    289c:	21 95       	neg	r18
    289e:	3f 4f       	sbci	r19, 0xFF	; 255
    28a0:	b9 01       	movw	r22, r18
    28a2:	88 27       	eor	r24, r24
    28a4:	77 fd       	sbrc	r23, 7
    28a6:	80 95       	com	r24
    28a8:	98 2f       	mov	r25, r24
    28aa:	0e 94 03 2d 	call	0x5a06	; 0x5a06 <__floatsisf>
    28ae:	6b 01       	movw	r12, r22
    28b0:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    28b2:	c3 01       	movw	r24, r6
    28b4:	b2 01       	movw	r22, r4
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e0       	ldi	r20, 0x00	; 0
    28bc:	5f e4       	ldi	r21, 0x4F	; 79
    28be:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
    28c2:	88 23       	and	r24, r24
    28c4:	a1 f5       	brne	.+104    	; 0x292e <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    28c6:	69 81       	ldd	r22, Y+1	; 0x01
    28c8:	7a 81       	ldd	r23, Y+2	; 0x02
    28ca:	8b 81       	ldd	r24, Y+3	; 0x03
    28cc:	9c 81       	ldd	r25, Y+4	; 0x04
    28ce:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    28d2:	2b 01       	movw	r4, r22
    28d4:	3c 01       	movw	r6, r24
    28d6:	c5 01       	movw	r24, r10
    28d8:	b4 01       	movw	r22, r8
    28da:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    28de:	4b 01       	movw	r8, r22
    28e0:	5c 01       	movw	r10, r24
    28e2:	c7 01       	movw	r24, r14
    28e4:	b6 01       	movw	r22, r12
    28e6:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    28ea:	6b 01       	movw	r12, r22
    28ec:	7c 01       	movw	r14, r24
    28ee:	2d b7       	in	r18, 0x3d	; 61
    28f0:	3e b7       	in	r19, 0x3e	; 62
    28f2:	29 50       	subi	r18, 0x09	; 9
    28f4:	30 40       	sbci	r19, 0x00	; 0
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	3e bf       	out	0x3e, r19	; 62
    28fc:	0f be       	out	0x3f, r0	; 63
    28fe:	2d bf       	out	0x3d, r18	; 61
    2900:	ed b7       	in	r30, 0x3d	; 61
    2902:	fe b7       	in	r31, 0x3e	; 62
    2904:	31 96       	adiw	r30, 0x01	; 1
    2906:	ad b7       	in	r26, 0x3d	; 61
    2908:	be b7       	in	r27, 0x3e	; 62
    290a:	12 96       	adiw	r26, 0x02	; 2
    290c:	5c 92       	st	X, r5
    290e:	4e 92       	st	-X, r4
    2910:	11 97       	sbiw	r26, 0x01	; 1
    2912:	93 82       	std	Z+3, r9	; 0x03
    2914:	82 82       	std	Z+2, r8	; 0x02
    2916:	75 83       	std	Z+5, r23	; 0x05
    2918:	64 83       	std	Z+4, r22	; 0x04
    291a:	26 82       	std	Z+6, r2	; 0x06
    291c:	10 86       	std	Z+8, r1	; 0x08
    291e:	17 82       	std	Z+7, r1	; 0x07
    2920:	80 e0       	ldi	r24, 0x00	; 0
    2922:	62 e0       	ldi	r22, 0x02	; 2
    2924:	43 2d       	mov	r20, r3
    2926:	92 01       	movw	r18, r4
    2928:	84 01       	movw	r16, r8
    292a:	76 01       	movw	r14, r12
    292c:	c1 c1       	rjmp	.+898    	; 0x2cb0 <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    292e:	c3 01       	movw	r24, r6
    2930:	b2 01       	movw	r22, r4
    2932:	20 e0       	ldi	r18, 0x00	; 0
    2934:	30 e0       	ldi	r19, 0x00	; 0
    2936:	40 e0       	ldi	r20, 0x00	; 0
    2938:	50 e0       	ldi	r21, 0x00	; 0
    293a:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
    293e:	88 23       	and	r24, r24
    2940:	e9 f5       	brne	.+122    	; 0x29bc <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    2942:	69 81       	ldd	r22, Y+1	; 0x01
    2944:	7a 81       	ldd	r23, Y+2	; 0x02
    2946:	8b 81       	ldd	r24, Y+3	; 0x03
    2948:	9c 81       	ldd	r25, Y+4	; 0x04
    294a:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    294e:	3b 01       	movw	r6, r22
    2950:	c5 01       	movw	r24, r10
    2952:	b4 01       	movw	r22, r8
    2954:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2958:	8b 01       	movw	r16, r22
    295a:	c7 01       	movw	r24, r14
    295c:	b6 01       	movw	r22, r12
    295e:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2962:	7b 01       	movw	r14, r22
    2964:	2d b7       	in	r18, 0x3d	; 61
    2966:	3e b7       	in	r19, 0x3e	; 62
    2968:	29 50       	subi	r18, 0x09	; 9
    296a:	30 40       	sbci	r19, 0x00	; 0
    296c:	0f b6       	in	r0, 0x3f	; 63
    296e:	f8 94       	cli
    2970:	3e bf       	out	0x3e, r19	; 62
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	2d bf       	out	0x3d, r18	; 61
    2976:	ed b7       	in	r30, 0x3d	; 61
    2978:	fe b7       	in	r31, 0x3e	; 62
    297a:	31 96       	adiw	r30, 0x01	; 1
    297c:	40 e0       	ldi	r20, 0x00	; 0
    297e:	33 20       	and	r3, r3
    2980:	09 f4       	brne	.+2      	; 0x2984 <move_arc_stwt+0x1e4>
    2982:	41 e0       	ldi	r20, 0x01	; 1
    2984:	71 82       	std	Z+1, r7	; 0x01
    2986:	60 82       	st	Z, r6
    2988:	13 83       	std	Z+3, r17	; 0x03
    298a:	02 83       	std	Z+2, r16	; 0x02
    298c:	f5 82       	std	Z+5, r15	; 0x05
    298e:	e4 82       	std	Z+4, r14	; 0x04
    2990:	26 82       	std	Z+6, r2	; 0x06
    2992:	10 86       	std	Z+8, r1	; 0x08
    2994:	17 82       	std	Z+7, r1	; 0x07
    2996:	80 e0       	ldi	r24, 0x00	; 0
    2998:	62 e0       	ldi	r22, 0x02	; 2
    299a:	93 01       	movw	r18, r6
    299c:	c2 2c       	mov	r12, r2
    299e:	aa 24       	eor	r10, r10
    29a0:	bb 24       	eor	r11, r11
    29a2:	83 2c       	mov	r8, r3
    29a4:	0e 94 29 1c 	call	0x3852	; 0x3852 <STEPPER_move>
    29a8:	81 e0       	ldi	r24, 0x01	; 1
    29aa:	ad b7       	in	r26, 0x3d	; 61
    29ac:	be b7       	in	r27, 0x3e	; 62
    29ae:	19 96       	adiw	r26, 0x09	; 9
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	be bf       	out	0x3e, r27	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	ad bf       	out	0x3d, r26	; 61
    29ba:	89 c1       	rjmp	.+786    	; 0x2cce <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    29bc:	c3 01       	movw	r24, r6
    29be:	b2 01       	movw	r22, r4
    29c0:	20 e0       	ldi	r18, 0x00	; 0
    29c2:	30 e0       	ldi	r19, 0x00	; 0
    29c4:	40 e0       	ldi	r20, 0x00	; 0
    29c6:	50 e0       	ldi	r21, 0x00	; 0
    29c8:	0e 94 b3 2d 	call	0x5b66	; 0x5b66 <__gesf2>
    29cc:	18 16       	cp	r1, r24
    29ce:	0c f0       	brlt	.+2      	; 0x29d2 <move_arc_stwt+0x232>
    29d0:	b1 c0       	rjmp	.+354    	; 0x2b34 <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    29d2:	66 e6       	ldi	r22, 0x66	; 102
    29d4:	76 e6       	ldi	r23, 0x66	; 102
    29d6:	8a ea       	ldi	r24, 0xAA	; 170
    29d8:	91 ec       	ldi	r25, 0xC1	; 193
    29da:	a3 01       	movw	r20, r6
    29dc:	92 01       	movw	r18, r4
    29de:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    29e2:	20 e0       	ldi	r18, 0x00	; 0
    29e4:	30 e0       	ldi	r19, 0x00	; 0
    29e6:	40 e8       	ldi	r20, 0x80	; 128
    29e8:	5f e3       	ldi	r21, 0x3F	; 63
    29ea:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    29ee:	7b 01       	movw	r14, r22
    29f0:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    29f2:	66 e6       	ldi	r22, 0x66	; 102
    29f4:	76 e6       	ldi	r23, 0x66	; 102
    29f6:	8a ea       	ldi	r24, 0xAA	; 170
    29f8:	91 e4       	ldi	r25, 0x41	; 65
    29fa:	a3 01       	movw	r20, r6
    29fc:	92 01       	movw	r18, r4
    29fe:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2a02:	20 e0       	ldi	r18, 0x00	; 0
    2a04:	30 e0       	ldi	r19, 0x00	; 0
    2a06:	40 e8       	ldi	r20, 0x80	; 128
    2a08:	5f e3       	ldi	r21, 0x3F	; 63
    2a0a:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    2a0e:	5b 01       	movw	r10, r22
    2a10:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2a12:	ed b7       	in	r30, 0x3d	; 61
    2a14:	fe b7       	in	r31, 0x3e	; 62
    2a16:	39 97       	sbiw	r30, 0x09	; 9
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	fe bf       	out	0x3e, r31	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	ed bf       	out	0x3d, r30	; 61
    2a22:	8d b6       	in	r8, 0x3d	; 61
    2a24:	9e b6       	in	r9, 0x3e	; 62
    2a26:	08 94       	sec
    2a28:	81 1c       	adc	r8, r1
    2a2a:	91 1c       	adc	r9, r1
    2a2c:	6d 81       	ldd	r22, Y+5	; 0x05
    2a2e:	7e 81       	ldd	r23, Y+6	; 0x06
    2a30:	8f 81       	ldd	r24, Y+7	; 0x07
    2a32:	98 85       	ldd	r25, Y+8	; 0x08
    2a34:	a8 01       	movw	r20, r16
    2a36:	97 01       	movw	r18, r14
    2a38:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2a3c:	2c ed       	ldi	r18, 0xDC	; 220
    2a3e:	38 eb       	ldi	r19, 0xB8	; 184
    2a40:	48 e0       	ldi	r20, 0x08	; 8
    2a42:	5e e3       	ldi	r21, 0x3E	; 62
    2a44:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2a48:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2a4c:	69 8b       	std	Y+17, r22	; 0x11
    2a4e:	7a 8b       	std	Y+18, r23	; 0x12
    2a50:	8b 8b       	std	Y+19, r24	; 0x13
    2a52:	9c 8b       	std	Y+20, r25	; 0x14
    2a54:	69 85       	ldd	r22, Y+9	; 0x09
    2a56:	7a 85       	ldd	r23, Y+10	; 0x0a
    2a58:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a5a:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a5c:	a8 01       	movw	r20, r16
    2a5e:	97 01       	movw	r18, r14
    2a60:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2a64:	2c ed       	ldi	r18, 0xDC	; 220
    2a66:	38 eb       	ldi	r19, 0xB8	; 184
    2a68:	48 e0       	ldi	r20, 0x08	; 8
    2a6a:	5e e3       	ldi	r21, 0x3E	; 62
    2a6c:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2a70:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2a74:	6d 8b       	std	Y+21, r22	; 0x15
    2a76:	7e 8b       	std	Y+22, r23	; 0x16
    2a78:	8f 8b       	std	Y+23, r24	; 0x17
    2a7a:	98 8f       	std	Y+24, r25	; 0x18
    2a7c:	6d 85       	ldd	r22, Y+13	; 0x0d
    2a7e:	7e 85       	ldd	r23, Y+14	; 0x0e
    2a80:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a82:	98 89       	ldd	r25, Y+16	; 0x10
    2a84:	a8 01       	movw	r20, r16
    2a86:	97 01       	movw	r18, r14
    2a88:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2a8c:	2c ed       	ldi	r18, 0xDC	; 220
    2a8e:	38 eb       	ldi	r19, 0xB8	; 184
    2a90:	48 e0       	ldi	r20, 0x08	; 8
    2a92:	5e e3       	ldi	r21, 0x3E	; 62
    2a94:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2a98:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2a9c:	2b 01       	movw	r4, r22
    2a9e:	3c 01       	movw	r6, r24
    2aa0:	6d 81       	ldd	r22, Y+5	; 0x05
    2aa2:	7e 81       	ldd	r23, Y+6	; 0x06
    2aa4:	8f 81       	ldd	r24, Y+7	; 0x07
    2aa6:	98 85       	ldd	r25, Y+8	; 0x08
    2aa8:	a6 01       	movw	r20, r12
    2aaa:	95 01       	movw	r18, r10
    2aac:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2ab0:	2c ed       	ldi	r18, 0xDC	; 220
    2ab2:	38 eb       	ldi	r19, 0xB8	; 184
    2ab4:	48 e0       	ldi	r20, 0x08	; 8
    2ab6:	5e e3       	ldi	r21, 0x3E	; 62
    2ab8:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2abc:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2ac0:	d4 01       	movw	r26, r8
    2ac2:	6d 93       	st	X+, r22
    2ac4:	7c 93       	st	X, r23
    2ac6:	69 85       	ldd	r22, Y+9	; 0x09
    2ac8:	7a 85       	ldd	r23, Y+10	; 0x0a
    2aca:	8b 85       	ldd	r24, Y+11	; 0x0b
    2acc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ace:	a6 01       	movw	r20, r12
    2ad0:	95 01       	movw	r18, r10
    2ad2:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2ad6:	2c ed       	ldi	r18, 0xDC	; 220
    2ad8:	38 eb       	ldi	r19, 0xB8	; 184
    2ada:	48 e0       	ldi	r20, 0x08	; 8
    2adc:	5e e3       	ldi	r21, 0x3E	; 62
    2ade:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2ae2:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2ae6:	f4 01       	movw	r30, r8
    2ae8:	73 83       	std	Z+3, r23	; 0x03
    2aea:	62 83       	std	Z+2, r22	; 0x02
    2aec:	6d 85       	ldd	r22, Y+13	; 0x0d
    2aee:	7e 85       	ldd	r23, Y+14	; 0x0e
    2af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2af2:	98 89       	ldd	r25, Y+16	; 0x10
    2af4:	a6 01       	movw	r20, r12
    2af6:	95 01       	movw	r18, r10
    2af8:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2afc:	2c ed       	ldi	r18, 0xDC	; 220
    2afe:	38 eb       	ldi	r19, 0xB8	; 184
    2b00:	48 e0       	ldi	r20, 0x08	; 8
    2b02:	5e e3       	ldi	r21, 0x3E	; 62
    2b04:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2b08:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2b0c:	d4 01       	movw	r26, r8
    2b0e:	15 96       	adiw	r26, 0x05	; 5
    2b10:	7c 93       	st	X, r23
    2b12:	6e 93       	st	-X, r22
    2b14:	14 97       	sbiw	r26, 0x04	; 4
    2b16:	16 96       	adiw	r26, 0x06	; 6
    2b18:	2c 92       	st	X, r2
    2b1a:	16 97       	sbiw	r26, 0x06	; 6
    2b1c:	18 96       	adiw	r26, 0x08	; 8
    2b1e:	1c 92       	st	X, r1
    2b20:	1e 92       	st	-X, r1
    2b22:	17 97       	sbiw	r26, 0x07	; 7
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	62 e0       	ldi	r22, 0x02	; 2
    2b28:	43 2d       	mov	r20, r3
    2b2a:	29 89       	ldd	r18, Y+17	; 0x11
    2b2c:	3a 89       	ldd	r19, Y+18	; 0x12
    2b2e:	0d 89       	ldd	r16, Y+21	; 0x15
    2b30:	1e 89       	ldd	r17, Y+22	; 0x16
    2b32:	bd c0       	rjmp	.+378    	; 0x2cae <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    2b34:	c3 01       	movw	r24, r6
    2b36:	b2 01       	movw	r22, r4
    2b38:	20 e0       	ldi	r18, 0x00	; 0
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	0e 94 64 2c 	call	0x58c8	; 0x58c8 <__cmpsf2>
    2b44:	87 fd       	sbrc	r24, 7
    2b46:	02 c0       	rjmp	.+4      	; 0x2b4c <move_arc_stwt+0x3ac>
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	c1 c0       	rjmp	.+386    	; 0x2cce <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2b4c:	66 e6       	ldi	r22, 0x66	; 102
    2b4e:	76 e6       	ldi	r23, 0x66	; 102
    2b50:	8a ea       	ldi	r24, 0xAA	; 170
    2b52:	91 e4       	ldi	r25, 0x41	; 65
    2b54:	a3 01       	movw	r20, r6
    2b56:	92 01       	movw	r18, r4
    2b58:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2b5c:	20 e0       	ldi	r18, 0x00	; 0
    2b5e:	30 e0       	ldi	r19, 0x00	; 0
    2b60:	40 e8       	ldi	r20, 0x80	; 128
    2b62:	5f e3       	ldi	r21, 0x3F	; 63
    2b64:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    2b68:	7b 01       	movw	r14, r22
    2b6a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2b6c:	66 e6       	ldi	r22, 0x66	; 102
    2b6e:	76 e6       	ldi	r23, 0x66	; 102
    2b70:	8a ea       	ldi	r24, 0xAA	; 170
    2b72:	91 ec       	ldi	r25, 0xC1	; 193
    2b74:	a3 01       	movw	r20, r6
    2b76:	92 01       	movw	r18, r4
    2b78:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	40 e8       	ldi	r20, 0x80	; 128
    2b82:	5f e3       	ldi	r21, 0x3F	; 63
    2b84:	0e 94 00 2c 	call	0x5800	; 0x5800 <__addsf3>
    2b88:	5b 01       	movw	r10, r22
    2b8a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2b8c:	2d b7       	in	r18, 0x3d	; 61
    2b8e:	3e b7       	in	r19, 0x3e	; 62
    2b90:	29 50       	subi	r18, 0x09	; 9
    2b92:	30 40       	sbci	r19, 0x00	; 0
    2b94:	0f b6       	in	r0, 0x3f	; 63
    2b96:	f8 94       	cli
    2b98:	3e bf       	out	0x3e, r19	; 62
    2b9a:	0f be       	out	0x3f, r0	; 63
    2b9c:	2d bf       	out	0x3d, r18	; 61
    2b9e:	8d b6       	in	r8, 0x3d	; 61
    2ba0:	9e b6       	in	r9, 0x3e	; 62
    2ba2:	08 94       	sec
    2ba4:	81 1c       	adc	r8, r1
    2ba6:	91 1c       	adc	r9, r1
    2ba8:	6d 81       	ldd	r22, Y+5	; 0x05
    2baa:	7e 81       	ldd	r23, Y+6	; 0x06
    2bac:	8f 81       	ldd	r24, Y+7	; 0x07
    2bae:	98 85       	ldd	r25, Y+8	; 0x08
    2bb0:	a8 01       	movw	r20, r16
    2bb2:	97 01       	movw	r18, r14
    2bb4:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2bb8:	2c ed       	ldi	r18, 0xDC	; 220
    2bba:	38 eb       	ldi	r19, 0xB8	; 184
    2bbc:	48 e0       	ldi	r20, 0x08	; 8
    2bbe:	5e e3       	ldi	r21, 0x3E	; 62
    2bc0:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2bc4:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2bc8:	69 8f       	std	Y+25, r22	; 0x19
    2bca:	7a 8f       	std	Y+26, r23	; 0x1a
    2bcc:	8b 8f       	std	Y+27, r24	; 0x1b
    2bce:	9c 8f       	std	Y+28, r25	; 0x1c
    2bd0:	69 85       	ldd	r22, Y+9	; 0x09
    2bd2:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bd4:	8b 85       	ldd	r24, Y+11	; 0x0b
    2bd6:	9c 85       	ldd	r25, Y+12	; 0x0c
    2bd8:	a8 01       	movw	r20, r16
    2bda:	97 01       	movw	r18, r14
    2bdc:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2be0:	2c ed       	ldi	r18, 0xDC	; 220
    2be2:	38 eb       	ldi	r19, 0xB8	; 184
    2be4:	48 e0       	ldi	r20, 0x08	; 8
    2be6:	5e e3       	ldi	r21, 0x3E	; 62
    2be8:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2bec:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2bf0:	6d 8f       	std	Y+29, r22	; 0x1d
    2bf2:	7e 8f       	std	Y+30, r23	; 0x1e
    2bf4:	8f 8f       	std	Y+31, r24	; 0x1f
    2bf6:	98 a3       	std	Y+32, r25	; 0x20
    2bf8:	6d 85       	ldd	r22, Y+13	; 0x0d
    2bfa:	7e 85       	ldd	r23, Y+14	; 0x0e
    2bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bfe:	98 89       	ldd	r25, Y+16	; 0x10
    2c00:	a8 01       	movw	r20, r16
    2c02:	97 01       	movw	r18, r14
    2c04:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2c08:	2c ed       	ldi	r18, 0xDC	; 220
    2c0a:	38 eb       	ldi	r19, 0xB8	; 184
    2c0c:	48 e0       	ldi	r20, 0x08	; 8
    2c0e:	5e e3       	ldi	r21, 0x3E	; 62
    2c10:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2c14:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2c18:	2b 01       	movw	r4, r22
    2c1a:	3c 01       	movw	r6, r24
    2c1c:	6d 81       	ldd	r22, Y+5	; 0x05
    2c1e:	7e 81       	ldd	r23, Y+6	; 0x06
    2c20:	8f 81       	ldd	r24, Y+7	; 0x07
    2c22:	98 85       	ldd	r25, Y+8	; 0x08
    2c24:	a6 01       	movw	r20, r12
    2c26:	95 01       	movw	r18, r10
    2c28:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2c2c:	2c ed       	ldi	r18, 0xDC	; 220
    2c2e:	38 eb       	ldi	r19, 0xB8	; 184
    2c30:	48 e0       	ldi	r20, 0x08	; 8
    2c32:	5e e3       	ldi	r21, 0x3E	; 62
    2c34:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2c38:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2c3c:	d4 01       	movw	r26, r8
    2c3e:	6d 93       	st	X+, r22
    2c40:	7c 93       	st	X, r23
    2c42:	69 85       	ldd	r22, Y+9	; 0x09
    2c44:	7a 85       	ldd	r23, Y+10	; 0x0a
    2c46:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c48:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c4a:	a6 01       	movw	r20, r12
    2c4c:	95 01       	movw	r18, r10
    2c4e:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2c52:	2c ed       	ldi	r18, 0xDC	; 220
    2c54:	38 eb       	ldi	r19, 0xB8	; 184
    2c56:	48 e0       	ldi	r20, 0x08	; 8
    2c58:	5e e3       	ldi	r21, 0x3E	; 62
    2c5a:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2c5e:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2c62:	f4 01       	movw	r30, r8
    2c64:	73 83       	std	Z+3, r23	; 0x03
    2c66:	62 83       	std	Z+2, r22	; 0x02
    2c68:	6d 85       	ldd	r22, Y+13	; 0x0d
    2c6a:	7e 85       	ldd	r23, Y+14	; 0x0e
    2c6c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c6e:	98 89       	ldd	r25, Y+16	; 0x10
    2c70:	a6 01       	movw	r20, r12
    2c72:	95 01       	movw	r18, r10
    2c74:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    2c78:	2c ed       	ldi	r18, 0xDC	; 220
    2c7a:	38 eb       	ldi	r19, 0xB8	; 184
    2c7c:	48 e0       	ldi	r20, 0x08	; 8
    2c7e:	5e e3       	ldi	r21, 0x3E	; 62
    2c80:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    2c84:	0e 94 d5 2c 	call	0x59aa	; 0x59aa <__fixunssfsi>
    2c88:	d4 01       	movw	r26, r8
    2c8a:	15 96       	adiw	r26, 0x05	; 5
    2c8c:	7c 93       	st	X, r23
    2c8e:	6e 93       	st	-X, r22
    2c90:	14 97       	sbiw	r26, 0x04	; 4
    2c92:	16 96       	adiw	r26, 0x06	; 6
    2c94:	2c 92       	st	X, r2
    2c96:	16 97       	sbiw	r26, 0x06	; 6
    2c98:	18 96       	adiw	r26, 0x08	; 8
    2c9a:	1c 92       	st	X, r1
    2c9c:	1e 92       	st	-X, r1
    2c9e:	17 97       	sbiw	r26, 0x07	; 7
    2ca0:	80 e0       	ldi	r24, 0x00	; 0
    2ca2:	62 e0       	ldi	r22, 0x02	; 2
    2ca4:	43 2d       	mov	r20, r3
    2ca6:	29 8d       	ldd	r18, Y+25	; 0x19
    2ca8:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2caa:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2cac:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2cae:	72 01       	movw	r14, r4
    2cb0:	c2 2c       	mov	r12, r2
    2cb2:	aa 24       	eor	r10, r10
    2cb4:	bb 24       	eor	r11, r11
    2cb6:	83 2c       	mov	r8, r3
    2cb8:	0e 94 29 1c 	call	0x3852	; 0x3852 <STEPPER_move>
    2cbc:	81 e0       	ldi	r24, 0x01	; 1
    2cbe:	ed b7       	in	r30, 0x3d	; 61
    2cc0:	fe b7       	in	r31, 0x3e	; 62
    2cc2:	39 96       	adiw	r30, 0x09	; 9
    2cc4:	0f b6       	in	r0, 0x3f	; 63
    2cc6:	f8 94       	cli
    2cc8:	fe bf       	out	0x3e, r31	; 62
    2cca:	0f be       	out	0x3f, r0	; 63
    2ccc:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    2cce:	a0 96       	adiw	r28, 0x20	; 32
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	de bf       	out	0x3e, r29	; 62
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	cd bf       	out	0x3d, r28	; 61
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	1f 91       	pop	r17
    2ce0:	0f 91       	pop	r16
    2ce2:	ff 90       	pop	r15
    2ce4:	ef 90       	pop	r14
    2ce6:	df 90       	pop	r13
    2ce8:	cf 90       	pop	r12
    2cea:	bf 90       	pop	r11
    2cec:	af 90       	pop	r10
    2cee:	9f 90       	pop	r9
    2cf0:	8f 90       	pop	r8
    2cf2:	7f 90       	pop	r7
    2cf4:	6f 90       	pop	r6
    2cf6:	5f 90       	pop	r5
    2cf8:	4f 90       	pop	r4
    2cfa:	3f 90       	pop	r3
    2cfc:	2f 90       	pop	r2
    2cfe:	08 95       	ret

00002d00 <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    2d00:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    2d04:	28 2f       	mov	r18, r24
    2d06:	21 70       	andi	r18, 0x01	; 1
    2d08:	20 93 a7 06 	sts	0x06A7, r18
	leftContact =  (0b00000010 & sensors)>>1;
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	82 70       	andi	r24, 0x02	; 2
    2d10:	90 70       	andi	r25, 0x00	; 0
    2d12:	95 95       	asr	r25
    2d14:	87 95       	ror	r24
    2d16:	80 93 a8 06 	sts	0x06A8, r24
}
    2d1a:	08 95       	ret

00002d1c <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    2d1c:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    2d20:	60 93 8f 05 	sts	0x058F, r22
    2d24:	70 93 90 05 	sts	0x0590, r23
    2d28:	80 93 91 05 	sts	0x0591, r24
    2d2c:	90 93 92 05 	sts	0x0592, r25
	leftLightVolt = getLeftLight();
    2d30:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    2d34:	60 93 36 07 	sts	0x0736, r22
    2d38:	70 93 37 07 	sts	0x0737, r23
    2d3c:	80 93 38 07 	sts	0x0738, r24
    2d40:	90 93 39 07 	sts	0x0739, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    2d44:	08 95       	ret

00002d46 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    2d46:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    2d4a:	60 93 f8 04 	sts	0x04F8, r22
    2d4e:	70 93 f9 04 	sts	0x04F9, r23
    2d52:	80 93 fa 04 	sts	0x04FA, r24
    2d56:	90 93 fb 04 	sts	0x04FB, r25
	bkIR = getBackIR();
    2d5a:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    2d5e:	60 93 02 05 	sts	0x0502, r22
    2d62:	70 93 03 05 	sts	0x0503, r23
    2d66:	80 93 04 05 	sts	0x0504, r24
    2d6a:	90 93 05 05 	sts	0x0505, r25
	ltIR = getLeftIR();
    2d6e:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    2d72:	60 93 a9 06 	sts	0x06A9, r22
    2d76:	70 93 aa 06 	sts	0x06AA, r23
    2d7a:	80 93 ab 06 	sts	0x06AB, r24
    2d7e:	90 93 ac 06 	sts	0x06AC, r25
	rtIR = getRightIR();
    2d82:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    2d86:	60 93 ae 06 	sts	0x06AE, r22
    2d8a:	70 93 af 06 	sts	0x06AF, r23
    2d8e:	80 93 b0 06 	sts	0x06B0, r24
    2d92:	90 93 b1 06 	sts	0x06B1, r25
}
    2d96:	08 95       	ret

00002d98 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    2d98:	cf 92       	push	r12
    2d9a:	df 92       	push	r13
    2d9c:	ef 92       	push	r14
    2d9e:	ff 92       	push	r15
    2da0:	0f 93       	push	r16
    2da2:	1f 93       	push	r17
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	16 2f       	mov	r17, r22
    2daa:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    2dac:	0f e1       	ldi	r16, 0x1F	; 31
    2dae:	f0 2e       	mov	r15, r16
    2db0:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    2db2:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    2db4:	0f 2d       	mov	r16, r15
    2db6:	06 95       	lsr	r16
    2db8:	06 95       	lsr	r16
    2dba:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    2dbc:	c0 2f       	mov	r28, r16
    2dbe:	d0 e0       	ldi	r29, 0x00	; 0
    2dc0:	c1 2e       	mov	r12, r17
    2dc2:	dd 24       	eor	r13, r13
    2dc4:	ce 01       	movw	r24, r28
    2dc6:	b6 01       	movw	r22, r12
    2dc8:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    2dcc:	80 2f       	mov	r24, r16
    2dce:	61 2f       	mov	r22, r17
    2dd0:	0e 94 07 1a 	call	0x340e	; 0x340e <LCD_set_next_PGC>
    2dd4:	fe 01       	movw	r30, r28
    2dd6:	b5 e0       	ldi	r27, 0x05	; 5
    2dd8:	ee 0f       	add	r30, r30
    2dda:	ff 1f       	adc	r31, r31
    2ddc:	ba 95       	dec	r27
    2dde:	e1 f7       	brne	.-8      	; 0x2dd8 <LCD_set_pixel+0x40>
    2de0:	2f 2d       	mov	r18, r15
    2de2:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    2de4:	ee 20       	and	r14, r14
    2de6:	89 f0       	breq	.+34     	; 0x2e0a <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    2de8:	ec 0d       	add	r30, r12
    2dea:	fd 1d       	adc	r31, r13
    2dec:	ef 5d       	subi	r30, 0xDF	; 223
    2dee:	f9 4f       	sbci	r31, 0xF9	; 249
    2df0:	27 70       	andi	r18, 0x07	; 7
    2df2:	30 70       	andi	r19, 0x00	; 0
    2df4:	81 e0       	ldi	r24, 0x01	; 1
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <LCD_set_pixel+0x66>
    2dfa:	88 0f       	add	r24, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	2a 95       	dec	r18
    2e00:	e2 f7       	brpl	.-8      	; 0x2dfa <LCD_set_pixel+0x62>
    2e02:	20 81       	ld	r18, Z
    2e04:	28 2b       	or	r18, r24
    2e06:	20 83       	st	Z, r18
    2e08:	11 c0       	rjmp	.+34     	; 0x2e2c <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    2e0a:	ec 0d       	add	r30, r12
    2e0c:	fd 1d       	adc	r31, r13
    2e0e:	ef 5d       	subi	r30, 0xDF	; 223
    2e10:	f9 4f       	sbci	r31, 0xF9	; 249
    2e12:	27 70       	andi	r18, 0x07	; 7
    2e14:	30 70       	andi	r19, 0x00	; 0
    2e16:	81 e0       	ldi	r24, 0x01	; 1
    2e18:	90 e0       	ldi	r25, 0x00	; 0
    2e1a:	02 c0       	rjmp	.+4      	; 0x2e20 <LCD_set_pixel+0x88>
    2e1c:	88 0f       	add	r24, r24
    2e1e:	99 1f       	adc	r25, r25
    2e20:	2a 95       	dec	r18
    2e22:	e2 f7       	brpl	.-8      	; 0x2e1c <LCD_set_pixel+0x84>
    2e24:	80 95       	com	r24
    2e26:	20 81       	ld	r18, Z
    2e28:	82 23       	and	r24, r18
    2e2a:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    2e2c:	a5 e0       	ldi	r26, 0x05	; 5
    2e2e:	cc 0f       	add	r28, r28
    2e30:	dd 1f       	adc	r29, r29
    2e32:	aa 95       	dec	r26
    2e34:	e1 f7       	brne	.-8      	; 0x2e2e <LCD_set_pixel+0x96>
    2e36:	cc 0d       	add	r28, r12
    2e38:	dd 1d       	adc	r29, r13
    2e3a:	cf 5d       	subi	r28, 0xDF	; 223
    2e3c:	d9 4f       	sbci	r29, 0xF9	; 249
    2e3e:	88 81       	ld	r24, Y
    2e40:	61 e0       	ldi	r22, 0x01	; 1
    2e42:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
}
    2e46:	df 91       	pop	r29
    2e48:	cf 91       	pop	r28
    2e4a:	1f 91       	pop	r17
    2e4c:	0f 91       	pop	r16
    2e4e:	ff 90       	pop	r15
    2e50:	ef 90       	pop	r14
    2e52:	df 90       	pop	r13
    2e54:	cf 90       	pop	r12
    2e56:	08 95       	ret

00002e58 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent){
    2e58:	9f 92       	push	r9
    2e5a:	af 92       	push	r10
    2e5c:	bf 92       	push	r11
    2e5e:	cf 92       	push	r12
    2e60:	df 92       	push	r13
    2e62:	ef 92       	push	r14
    2e64:	ff 92       	push	r15
    2e66:	0f 93       	push	r16
    2e68:	1f 93       	push	r17
    2e6a:	a8 2e       	mov	r10, r24
    2e6c:	d6 2e       	mov	r13, r22
    2e6e:	e4 2e       	mov	r14, r20
    2e70:	b2 2e       	mov	r11, r18
    2e72:	90 2e       	mov	r9, r16

	r = r*LCD_CELL_OFFSET;
    2e74:	dd 0c       	add	r13, r13
    2e76:	dd 0c       	add	r13, r13
    2e78:	dd 0c       	add	r13, r13
	c = c*LCD_CELL_OFFSET;
    2e7a:	ff 24       	eor	r15, r15
    2e7c:	53 e0       	ldi	r21, 0x03	; 3
    2e7e:	ee 0c       	add	r14, r14
    2e80:	ff 1c       	adc	r15, r15
    2e82:	5a 95       	dec	r21
    2e84:	e1 f7       	brne	.-8      	; 0x2e7e <printCell+0x26>
    2e86:	1e 2d       	mov	r17, r14
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    2e88:	0f e1       	ldi	r16, 0x1F	; 31
    2e8a:	0d 19       	sub	r16, r13
    2e8c:	80 2f       	mov	r24, r16
    2e8e:	6e 2d       	mov	r22, r14
    2e90:	41 e0       	ldi	r20, 0x01	; 1
    2e92:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    2e96:	48 e1       	ldi	r20, 0x18	; 24
    2e98:	c4 2e       	mov	r12, r20
    2e9a:	cd 18       	sub	r12, r13
    2e9c:	8c 2d       	mov	r24, r12
    2e9e:	6e 2d       	mov	r22, r14
    2ea0:	41 e0       	ldi	r20, 0x01	; 1
    2ea2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    2ea6:	37 e0       	ldi	r19, 0x07	; 7
    2ea8:	f3 2e       	mov	r15, r19
    2eaa:	f1 0e       	add	r15, r17
    2eac:	80 2f       	mov	r24, r16
    2eae:	6f 2d       	mov	r22, r15
    2eb0:	41 e0       	ldi	r20, 0x01	; 1
    2eb2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    2eb6:	8c 2d       	mov	r24, r12
    2eb8:	6f 2d       	mov	r22, r15
    2eba:	41 e0       	ldi	r20, 0x01	; 1
    2ebc:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
	
	if(cell&0b1000){
    2ec0:	ea 2c       	mov	r14, r10
    2ec2:	a3 fe       	sbrs	r10, 3
    2ec4:	24 c0       	rjmp	.+72     	; 0x2f0e <printCell+0xb6>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    2ec6:	61 2f       	mov	r22, r17
    2ec8:	6f 5f       	subi	r22, 0xFF	; 255
    2eca:	80 2f       	mov	r24, r16
    2ecc:	41 e0       	ldi	r20, 0x01	; 1
    2ece:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    2ed2:	61 2f       	mov	r22, r17
    2ed4:	6e 5f       	subi	r22, 0xFE	; 254
    2ed6:	80 2f       	mov	r24, r16
    2ed8:	41 e0       	ldi	r20, 0x01	; 1
    2eda:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    2ede:	61 2f       	mov	r22, r17
    2ee0:	6d 5f       	subi	r22, 0xFD	; 253
    2ee2:	80 2f       	mov	r24, r16
    2ee4:	41 e0       	ldi	r20, 0x01	; 1
    2ee6:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    2eea:	61 2f       	mov	r22, r17
    2eec:	6c 5f       	subi	r22, 0xFC	; 252
    2eee:	80 2f       	mov	r24, r16
    2ef0:	41 e0       	ldi	r20, 0x01	; 1
    2ef2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    2ef6:	61 2f       	mov	r22, r17
    2ef8:	6b 5f       	subi	r22, 0xFB	; 251
    2efa:	80 2f       	mov	r24, r16
    2efc:	41 e0       	ldi	r20, 0x01	; 1
    2efe:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    2f02:	61 2f       	mov	r22, r17
    2f04:	6a 5f       	subi	r22, 0xFA	; 250
    2f06:	80 2f       	mov	r24, r16
    2f08:	41 e0       	ldi	r20, 0x01	; 1
    2f0a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
	}
	if(cell&0b0100){
    2f0e:	e2 fe       	sbrs	r14, 2
    2f10:	25 c0       	rjmp	.+74     	; 0x2f5c <printCell+0x104>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    2f12:	8d 2d       	mov	r24, r13
    2f14:	80 95       	com	r24
    2f16:	81 5e       	subi	r24, 0xE1	; 225
    2f18:	6f 2d       	mov	r22, r15
    2f1a:	41 e0       	ldi	r20, 0x01	; 1
    2f1c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    2f20:	8d e1       	ldi	r24, 0x1D	; 29
    2f22:	8d 19       	sub	r24, r13
    2f24:	6f 2d       	mov	r22, r15
    2f26:	41 e0       	ldi	r20, 0x01	; 1
    2f28:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    2f2c:	8c e1       	ldi	r24, 0x1C	; 28
    2f2e:	8d 19       	sub	r24, r13
    2f30:	6f 2d       	mov	r22, r15
    2f32:	41 e0       	ldi	r20, 0x01	; 1
    2f34:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    2f38:	8b e1       	ldi	r24, 0x1B	; 27
    2f3a:	8d 19       	sub	r24, r13
    2f3c:	6f 2d       	mov	r22, r15
    2f3e:	41 e0       	ldi	r20, 0x01	; 1
    2f40:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    2f44:	8a e1       	ldi	r24, 0x1A	; 26
    2f46:	8d 19       	sub	r24, r13
    2f48:	6f 2d       	mov	r22, r15
    2f4a:	41 e0       	ldi	r20, 0x01	; 1
    2f4c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    2f50:	89 e1       	ldi	r24, 0x19	; 25
    2f52:	8d 19       	sub	r24, r13
    2f54:	6f 2d       	mov	r22, r15
    2f56:	41 e0       	ldi	r20, 0x01	; 1
    2f58:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
	}
	if(cell&0b0010){
    2f5c:	e1 fe       	sbrs	r14, 1
    2f5e:	24 c0       	rjmp	.+72     	; 0x2fa8 <printCell+0x150>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    2f60:	61 2f       	mov	r22, r17
    2f62:	6f 5f       	subi	r22, 0xFF	; 255
    2f64:	8c 2d       	mov	r24, r12
    2f66:	41 e0       	ldi	r20, 0x01	; 1
    2f68:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    2f6c:	61 2f       	mov	r22, r17
    2f6e:	6e 5f       	subi	r22, 0xFE	; 254
    2f70:	8c 2d       	mov	r24, r12
    2f72:	41 e0       	ldi	r20, 0x01	; 1
    2f74:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    2f78:	61 2f       	mov	r22, r17
    2f7a:	6d 5f       	subi	r22, 0xFD	; 253
    2f7c:	8c 2d       	mov	r24, r12
    2f7e:	41 e0       	ldi	r20, 0x01	; 1
    2f80:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    2f84:	61 2f       	mov	r22, r17
    2f86:	6c 5f       	subi	r22, 0xFC	; 252
    2f88:	8c 2d       	mov	r24, r12
    2f8a:	41 e0       	ldi	r20, 0x01	; 1
    2f8c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    2f90:	61 2f       	mov	r22, r17
    2f92:	6b 5f       	subi	r22, 0xFB	; 251
    2f94:	8c 2d       	mov	r24, r12
    2f96:	41 e0       	ldi	r20, 0x01	; 1
    2f98:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    2f9c:	61 2f       	mov	r22, r17
    2f9e:	6a 5f       	subi	r22, 0xFA	; 250
    2fa0:	8c 2d       	mov	r24, r12
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
	}
	if(cell&0b0001){
    2fa8:	e0 fe       	sbrs	r14, 0
    2faa:	25 c0       	rjmp	.+74     	; 0x2ff6 <printCell+0x19e>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    2fac:	8d 2d       	mov	r24, r13
    2fae:	80 95       	com	r24
    2fb0:	81 5e       	subi	r24, 0xE1	; 225
    2fb2:	61 2f       	mov	r22, r17
    2fb4:	41 e0       	ldi	r20, 0x01	; 1
    2fb6:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    2fba:	8d e1       	ldi	r24, 0x1D	; 29
    2fbc:	8d 19       	sub	r24, r13
    2fbe:	61 2f       	mov	r22, r17
    2fc0:	41 e0       	ldi	r20, 0x01	; 1
    2fc2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    2fc6:	8c e1       	ldi	r24, 0x1C	; 28
    2fc8:	8d 19       	sub	r24, r13
    2fca:	61 2f       	mov	r22, r17
    2fcc:	41 e0       	ldi	r20, 0x01	; 1
    2fce:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    2fd2:	8b e1       	ldi	r24, 0x1B	; 27
    2fd4:	8d 19       	sub	r24, r13
    2fd6:	61 2f       	mov	r22, r17
    2fd8:	41 e0       	ldi	r20, 0x01	; 1
    2fda:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    2fde:	8a e1       	ldi	r24, 0x1A	; 26
    2fe0:	8d 19       	sub	r24, r13
    2fe2:	61 2f       	mov	r22, r17
    2fe4:	41 e0       	ldi	r20, 0x01	; 1
    2fe6:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    2fea:	89 e1       	ldi	r24, 0x19	; 25
    2fec:	8d 19       	sub	r24, r13
    2fee:	61 2f       	mov	r22, r17
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
	}	
	if(isrobot){
    2ff6:	bb 20       	and	r11, r11
    2ff8:	e1 f1       	breq	.+120    	; 0x3072 <printCell+0x21a>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    2ffa:	2c e1       	ldi	r18, 0x1C	; 28
    2ffc:	f2 2e       	mov	r15, r18
    2ffe:	fd 18       	sub	r15, r13
    3000:	93 e0       	ldi	r25, 0x03	; 3
    3002:	c9 2e       	mov	r12, r25
    3004:	c1 0e       	add	r12, r17
    3006:	8f 2d       	mov	r24, r15
    3008:	6c 2d       	mov	r22, r12
    300a:	4b 2d       	mov	r20, r11
    300c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    3010:	8b e1       	ldi	r24, 0x1B	; 27
    3012:	e8 2e       	mov	r14, r24
    3014:	ed 18       	sub	r14, r13
    3016:	8e 2d       	mov	r24, r14
    3018:	6c 2d       	mov	r22, r12
    301a:	4b 2d       	mov	r20, r11
    301c:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    3020:	01 2f       	mov	r16, r17
    3022:	0c 5f       	subi	r16, 0xFC	; 252
    3024:	8f 2d       	mov	r24, r15
    3026:	60 2f       	mov	r22, r16
    3028:	4b 2d       	mov	r20, r11
    302a:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    302e:	8e 2d       	mov	r24, r14
    3030:	60 2f       	mov	r22, r16
    3032:	4b 2d       	mov	r20, r11
    3034:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
		
		switch(orent){
    3038:	81 e0       	ldi	r24, 0x01	; 1
    303a:	98 16       	cp	r9, r24
    303c:	69 f0       	breq	.+26     	; 0x3058 <printCell+0x200>
    303e:	98 16       	cp	r9, r24
    3040:	38 f0       	brcs	.+14     	; 0x3050 <printCell+0x1f8>
    3042:	82 e0       	ldi	r24, 0x02	; 2
    3044:	98 16       	cp	r9, r24
    3046:	59 f0       	breq	.+22     	; 0x305e <printCell+0x206>
    3048:	83 e0       	ldi	r24, 0x03	; 3
    304a:	98 16       	cp	r9, r24
    304c:	91 f4       	brne	.+36     	; 0x3072 <printCell+0x21a>
    304e:	0b c0       	rjmp	.+22     	; 0x3066 <printCell+0x20e>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    3050:	8d e1       	ldi	r24, 0x1D	; 29
    3052:	8d 19       	sub	r24, r13
    3054:	6c 2d       	mov	r22, r12
    3056:	0a c0       	rjmp	.+20     	; 0x306c <printCell+0x214>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    3058:	1b 5f       	subi	r17, 0xFB	; 251
    305a:	8f 2d       	mov	r24, r15
    305c:	06 c0       	rjmp	.+12     	; 0x306a <printCell+0x212>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    305e:	8a e1       	ldi	r24, 0x1A	; 26
    3060:	8d 19       	sub	r24, r13
    3062:	60 2f       	mov	r22, r16
    3064:	03 c0       	rjmp	.+6      	; 0x306c <printCell+0x214>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    3066:	1e 5f       	subi	r17, 0xFE	; 254
    3068:	8e 2d       	mov	r24, r14
    306a:	61 2f       	mov	r22, r17
    306c:	4b 2d       	mov	r20, r11
    306e:	0e 94 cc 16 	call	0x2d98	; 0x2d98 <LCD_set_pixel>
				break;
			default:
				break;
		}
	}
}
    3072:	1f 91       	pop	r17
    3074:	0f 91       	pop	r16
    3076:	ff 90       	pop	r15
    3078:	ef 90       	pop	r14
    307a:	df 90       	pop	r13
    307c:	cf 90       	pop	r12
    307e:	bf 90       	pop	r11
    3080:	af 90       	pop	r10
    3082:	9f 90       	pop	r9
    3084:	08 95       	ret

00003086 <printMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(void)
{
    3086:	bf 92       	push	r11
    3088:	cf 92       	push	r12
    308a:	df 92       	push	r13
    308c:	ef 92       	push	r14
    308e:	ff 92       	push	r15
    3090:	0f 93       	push	r16
    3092:	1f 93       	push	r17
    3094:	cf 93       	push	r28
    3096:	df 93       	push	r29
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    3098:	80 91 a5 06 	lds	r24, 0x06A5
    309c:	b8 2e       	mov	r11, r24
    309e:	b6 94       	lsr	r11
    30a0:	b6 94       	lsr	r11
	unsigned char curCol = currentCellWorld & 0b0011;
    30a2:	73 e0       	ldi	r23, 0x03	; 3
    30a4:	c7 2e       	mov	r12, r23
    30a6:	c8 22       	and	r12, r24
    30a8:	ee 24       	eor	r14, r14
    30aa:	ff 24       	eor	r15, r15
    30ac:	1d c0       	rjmp	.+58     	; 0x30e8 <printMap+0x62>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    30ae:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    30b0:	db 14       	cp	r13, r11
    30b2:	19 f0       	breq	.+6      	; 0x30ba <printMap+0x34>
    30b4:	20 e0       	ldi	r18, 0x00	; 0
    30b6:	30 e0       	ldi	r19, 0x00	; 0
    30b8:	06 c0       	rjmp	.+12     	; 0x30c6 <printMap+0x40>
    30ba:	20 e0       	ldi	r18, 0x00	; 0
    30bc:	30 e0       	ldi	r19, 0x00	; 0
    30be:	1c 15       	cp	r17, r12
    30c0:	11 f4       	brne	.+4      	; 0x30c6 <printMap+0x40>
    30c2:	21 e0       	ldi	r18, 0x01	; 1
    30c4:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation);
    30c6:	6d 2d       	mov	r22, r13
    30c8:	41 2f       	mov	r20, r17
    30ca:	00 91 a4 05 	lds	r16, 0x05A4
    30ce:	0e 94 2c 17 	call	0x2e58	; 0x2e58 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    30d2:	1f 5f       	subi	r17, 0xFF	; 255
    30d4:	21 96       	adiw	r28, 0x01	; 1
    30d6:	14 30       	cpi	r17, 0x04	; 4
    30d8:	51 f7       	brne	.-44     	; 0x30ae <printMap+0x28>
    30da:	08 94       	sec
    30dc:	e1 1c       	adc	r14, r1
    30de:	f1 1c       	adc	r15, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    30e0:	84 e0       	ldi	r24, 0x04	; 4
    30e2:	e8 16       	cp	r14, r24
    30e4:	f1 04       	cpc	r15, r1
    30e6:	51 f0       	breq	.+20     	; 0x30fc <printMap+0x76>
    30e8:	de 2c       	mov	r13, r14
    30ea:	e7 01       	movw	r28, r14
    30ec:	cc 0f       	add	r28, r28
    30ee:	dd 1f       	adc	r29, r29
    30f0:	cc 0f       	add	r28, r28
    30f2:	dd 1f       	adc	r29, r29
    30f4:	cd 56       	subi	r28, 0x6D	; 109
    30f6:	da 4f       	sbci	r29, 0xFA	; 250
    30f8:	10 e0       	ldi	r17, 0x00	; 0
    30fa:	d9 cf       	rjmp	.-78     	; 0x30ae <printMap+0x28>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation);
		}	
	}
}
    30fc:	df 91       	pop	r29
    30fe:	cf 91       	pop	r28
    3100:	1f 91       	pop	r17
    3102:	0f 91       	pop	r16
    3104:	ff 90       	pop	r15
    3106:	ef 90       	pop	r14
    3108:	df 90       	pop	r13
    310a:	cf 90       	pop	r12
    310c:	bf 90       	pop	r11
    310e:	08 95       	ret

00003110 <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    3110:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <ATTINY_open>
    3114:	90 93 7c 04 	sts	0x047C, r25
    3118:	80 93 7b 04 	sts	0x047B, r24
	LEopstat = LED_open(); //open the LED module
    311c:	0e 94 4e 1a 	call	0x349c	; 0x349c <LED_open>
    3120:	90 93 7a 04 	sts	0x047A, r25
    3124:	80 93 79 04 	sts	0x0479, r24
	LCopstat = LCD_open(); //open the LCD module
    3128:	0e 94 65 19 	call	0x32ca	; 0x32ca <LCD_open>
    312c:	90 93 78 04 	sts	0x0478, r25
    3130:	80 93 77 04 	sts	0x0477, r24
	STEPPER_open(); // Open STEPPER module for use
    3134:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    3138:	82 e0       	ldi	r24, 0x02	; 2
    313a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <SPKR_open>
	
	LED_open();
    313e:	0e 94 4e 1a 	call	0x349c	; 0x349c <LED_open>
	I2C_open();
    3142:	0e 94 13 21 	call	0x4226	; 0x4226 <I2C_open>
	ADC_open();//open the ADC module
    3146:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    314a:	81 e0       	ldi	r24, 0x01	; 1
    314c:	0e 94 34 19 	call	0x3268	; 0x3268 <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    3150:	0e 94 a3 16 	call	0x2d46	; 0x2d46 <checkIR>
	prefilter(1);
    3154:	81 e0       	ldi	r24, 0x01	; 1
    3156:	0e 94 1d 0d 	call	0x1a3a	; 0x1a3a <prefilter>
	
	odometryTrigger = WORLD_RESOLUTION_SIZE/D_STEP;
    315a:	8a e9       	ldi	r24, 0x9A	; 154
    315c:	96 e3       	ldi	r25, 0x36	; 54
    315e:	ab ea       	ldi	r26, 0xAB	; 171
    3160:	b3 e4       	ldi	r27, 0x43	; 67
    3162:	80 93 7f 05 	sts	0x057F, r24
    3166:	90 93 80 05 	sts	0x0580, r25
    316a:	a0 93 81 05 	sts	0x0581, r26
    316e:	b0 93 82 05 	sts	0x0582, r27
    3172:	20 e0       	ldi	r18, 0x00	; 0
    3174:	30 e0       	ldi	r19, 0x00	; 0
    3176:	0a c0       	rjmp	.+20     	; 0x318c <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    3178:	11 92       	st	Z+, r1
	
	odometryTrigger = WORLD_RESOLUTION_SIZE/D_STEP;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    317a:	01 96       	adiw	r24, 0x01	; 1
    317c:	80 32       	cpi	r24, 0x20	; 32
    317e:	91 05       	cpc	r25, r1
    3180:	d9 f7       	brne	.-10     	; 0x3178 <initializeRobot+0x68>
	prefilter(1);
	
	odometryTrigger = WORLD_RESOLUTION_SIZE/D_STEP;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    3182:	2f 5f       	subi	r18, 0xFF	; 255
    3184:	3f 4f       	sbci	r19, 0xFF	; 255
    3186:	24 30       	cpi	r18, 0x04	; 4
    3188:	31 05       	cpc	r19, r1
    318a:	59 f0       	breq	.+22     	; 0x31a2 <initializeRobot+0x92>
    318c:	f9 01       	movw	r30, r18
    318e:	a5 e0       	ldi	r26, 0x05	; 5
    3190:	ee 0f       	add	r30, r30
    3192:	ff 1f       	adc	r31, r31
    3194:	aa 95       	dec	r26
    3196:	e1 f7       	brne	.-8      	; 0x3190 <initializeRobot+0x80>
    3198:	ef 5d       	subi	r30, 0xDF	; 223
    319a:	f9 4f       	sbci	r31, 0xF9	; 249
    319c:	80 e0       	ldi	r24, 0x00	; 0
    319e:	90 e0       	ldi	r25, 0x00	; 0
    31a0:	eb cf       	rjmp	.-42     	; 0x3178 <initializeRobot+0x68>
    31a2:	08 95       	ret

000031a4 <ADC_open>:
    31a4:	8f e0       	ldi	r24, 0x0F	; 15
    31a6:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    31aa:	88 23       	and	r24, r24
    31ac:	31 f4       	brne	.+12     	; 0x31ba <ADC_open+0x16>
    31ae:	0e 94 3a 21 	call	0x4274	; 0x4274 <__ADC_init>
    31b2:	8f e0       	ldi	r24, 0x0F	; 15
    31b4:	61 e0       	ldi	r22, 0x01	; 1
    31b6:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    31ba:	8f e0       	ldi	r24, 0x0F	; 15
    31bc:	91 e0       	ldi	r25, 0x01	; 1
    31be:	08 95       	ret

000031c0 <ADC_sample>:
    31c0:	8f e0       	ldi	r24, 0x0F	; 15
    31c2:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    31c6:	81 30       	cpi	r24, 0x01	; 1
    31c8:	19 f0       	breq	.+6      	; 0x31d0 <ADC_sample+0x10>
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	13 c0       	rjmp	.+38     	; 0x31f6 <ADC_sample+0x36>
    31d0:	80 91 7a 00 	lds	r24, 0x007A
    31d4:	80 64       	ori	r24, 0x40	; 64
    31d6:	80 93 7a 00 	sts	0x007A, r24
    31da:	80 91 7a 00 	lds	r24, 0x007A
    31de:	86 fd       	sbrc	r24, 6
    31e0:	fc cf       	rjmp	.-8      	; 0x31da <ADC_sample+0x1a>
    31e2:	30 91 78 00 	lds	r19, 0x0078
    31e6:	20 91 79 00 	lds	r18, 0x0079
    31ea:	92 2f       	mov	r25, r18
    31ec:	80 e0       	ldi	r24, 0x00	; 0
    31ee:	23 2f       	mov	r18, r19
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	28 2b       	or	r18, r24
    31f4:	39 2b       	or	r19, r25
    31f6:	c9 01       	movw	r24, r18
    31f8:	08 95       	ret

000031fa <ADC_set_channel>:
    31fa:	58 2f       	mov	r21, r24
    31fc:	80 91 a0 03 	lds	r24, 0x03A0
    3200:	88 30       	cpi	r24, 0x08	; 8
    3202:	d8 f4       	brcc	.+54     	; 0x323a <ADC_set_channel+0x40>
    3204:	40 91 7e 00 	lds	r20, 0x007E
    3208:	21 e0       	ldi	r18, 0x01	; 1
    320a:	30 e0       	ldi	r19, 0x00	; 0
    320c:	b9 01       	movw	r22, r18
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <ADC_set_channel+0x1a>
    3210:	66 0f       	add	r22, r22
    3212:	77 1f       	adc	r23, r23
    3214:	8a 95       	dec	r24
    3216:	e2 f7       	brpl	.-8      	; 0x3210 <ADC_set_channel+0x16>
    3218:	cb 01       	movw	r24, r22
    321a:	80 95       	com	r24
    321c:	84 23       	and	r24, r20
    321e:	80 93 7e 00 	sts	0x007E, r24
    3222:	80 91 7e 00 	lds	r24, 0x007E
    3226:	05 2e       	mov	r0, r21
    3228:	02 c0       	rjmp	.+4      	; 0x322e <ADC_set_channel+0x34>
    322a:	22 0f       	add	r18, r18
    322c:	33 1f       	adc	r19, r19
    322e:	0a 94       	dec	r0
    3230:	e2 f7       	brpl	.-8      	; 0x322a <ADC_set_channel+0x30>
    3232:	82 2b       	or	r24, r18
    3234:	80 93 7e 00 	sts	0x007E, r24
    3238:	0d c0       	rjmp	.+26     	; 0x3254 <ADC_set_channel+0x5a>
    323a:	20 91 7e 00 	lds	r18, 0x007E
    323e:	81 e0       	ldi	r24, 0x01	; 1
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	05 2e       	mov	r0, r21
    3244:	02 c0       	rjmp	.+4      	; 0x324a <ADC_set_channel+0x50>
    3246:	88 0f       	add	r24, r24
    3248:	99 1f       	adc	r25, r25
    324a:	0a 94       	dec	r0
    324c:	e2 f7       	brpl	.-8      	; 0x3246 <ADC_set_channel+0x4c>
    324e:	28 2b       	or	r18, r24
    3250:	20 93 7e 00 	sts	0x007E, r18
    3254:	50 93 a0 03 	sts	0x03A0, r21
    3258:	80 91 7c 00 	lds	r24, 0x007C
    325c:	5f 71       	andi	r21, 0x1F	; 31
    325e:	80 7e       	andi	r24, 0xE0	; 224
    3260:	85 2b       	or	r24, r21
    3262:	80 93 7c 00 	sts	0x007C, r24
    3266:	08 95       	ret

00003268 <ADC_set_VREF>:
    3268:	ec e7       	ldi	r30, 0x7C	; 124
    326a:	f0 e0       	ldi	r31, 0x00	; 0
    326c:	90 81       	ld	r25, Z
    326e:	82 95       	swap	r24
    3270:	88 0f       	add	r24, r24
    3272:	88 0f       	add	r24, r24
    3274:	80 7c       	andi	r24, 0xC0	; 192
    3276:	9f 73       	andi	r25, 0x3F	; 63
    3278:	98 2b       	or	r25, r24
    327a:	90 83       	st	Z, r25
    327c:	08 95       	ret

0000327e <main>:
    327e:	0e 94 53 21 	call	0x42a6	; 0x42a6 <CBOT_ISR_init>
    3282:	0e 94 45 21 	call	0x428a	; 0x428a <CBOT_init>
    3286:	0e 94 30 0c 	call	0x1860	; 0x1860 <CBOT_main>
    328a:	80 e0       	ldi	r24, 0x00	; 0
    328c:	90 e0       	ldi	r25, 0x00	; 0
    328e:	08 95       	ret

00003290 <LCD_clear>:
    3290:	0f 93       	push	r16
    3292:	1f 93       	push	r17
    3294:	80 e4       	ldi	r24, 0x40	; 64
    3296:	60 e0       	ldi	r22, 0x00	; 0
    3298:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    329c:	00 e0       	ldi	r16, 0x00	; 0
    329e:	80 2f       	mov	r24, r16
    32a0:	60 e0       	ldi	r22, 0x00	; 0
    32a2:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_set_PGC_addr>
    32a6:	10 e0       	ldi	r17, 0x00	; 0
    32a8:	80 e0       	ldi	r24, 0x00	; 0
    32aa:	61 e0       	ldi	r22, 0x01	; 1
    32ac:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    32b0:	1f 5f       	subi	r17, 0xFF	; 255
    32b2:	10 38       	cpi	r17, 0x80	; 128
    32b4:	c9 f7       	brne	.-14     	; 0x32a8 <LCD_clear+0x18>
    32b6:	0f 5f       	subi	r16, 0xFF	; 255
    32b8:	04 30       	cpi	r16, 0x04	; 4
    32ba:	89 f7       	brne	.-30     	; 0x329e <LCD_clear+0xe>
    32bc:	83 e0       	ldi	r24, 0x03	; 3
    32be:	60 e0       	ldi	r22, 0x00	; 0
    32c0:	0e 94 07 1a 	call	0x340e	; 0x340e <LCD_set_next_PGC>
    32c4:	1f 91       	pop	r17
    32c6:	0f 91       	pop	r16
    32c8:	08 95       	ret

000032ca <LCD_open>:
    32ca:	0f 93       	push	r16
    32cc:	1f 93       	push	r17
    32ce:	82 e0       	ldi	r24, 0x02	; 2
    32d0:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    32d4:	88 23       	and	r24, r24
    32d6:	11 f4       	brne	.+4      	; 0x32dc <LCD_open+0x12>
    32d8:	82 e0       	ldi	r24, 0x02	; 2
    32da:	06 c0       	rjmp	.+12     	; 0x32e8 <LCD_open+0x1e>
    32dc:	81 e0       	ldi	r24, 0x01	; 1
    32de:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    32e2:	88 23       	and	r24, r24
    32e4:	19 f4       	brne	.+6      	; 0x32ec <LCD_open+0x22>
    32e6:	81 e0       	ldi	r24, 0x01	; 1
    32e8:	90 e0       	ldi	r25, 0x00	; 0
    32ea:	6d c0       	rjmp	.+218    	; 0x33c6 <LCD_open+0xfc>
    32ec:	0e 94 bb 23 	call	0x4776	; 0x4776 <__LCD_init>
    32f0:	85 e0       	ldi	r24, 0x05	; 5
    32f2:	61 e0       	ldi	r22, 0x01	; 1
    32f4:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    32f8:	8e ea       	ldi	r24, 0xAE	; 174
    32fa:	60 e0       	ldi	r22, 0x00	; 0
    32fc:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3300:	82 ea       	ldi	r24, 0xA2	; 162
    3302:	60 e0       	ldi	r22, 0x00	; 0
    3304:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3308:	80 ea       	ldi	r24, 0xA0	; 160
    330a:	60 e0       	ldi	r22, 0x00	; 0
    330c:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3310:	00 e5       	ldi	r16, 0x50	; 80
    3312:	13 ec       	ldi	r17, 0xC3	; 195
    3314:	c8 01       	movw	r24, r16
    3316:	01 97       	sbiw	r24, 0x01	; 1
    3318:	f1 f7       	brne	.-4      	; 0x3316 <LCD_open+0x4c>
    331a:	80 ec       	ldi	r24, 0xC0	; 192
    331c:	60 e0       	ldi	r22, 0x00	; 0
    331e:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3322:	8f e2       	ldi	r24, 0x2F	; 47
    3324:	60 e0       	ldi	r22, 0x00	; 0
    3326:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    332a:	81 e8       	ldi	r24, 0x81	; 129
    332c:	60 e0       	ldi	r22, 0x00	; 0
    332e:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3332:	86 e1       	ldi	r24, 0x16	; 22
    3334:	60 e0       	ldi	r22, 0x00	; 0
    3336:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    333a:	82 e2       	ldi	r24, 0x22	; 34
    333c:	60 e0       	ldi	r22, 0x00	; 0
    333e:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3342:	c8 01       	movw	r24, r16
    3344:	01 97       	sbiw	r24, 0x01	; 1
    3346:	f1 f7       	brne	.-4      	; 0x3344 <LCD_open+0x7a>
    3348:	8f ea       	ldi	r24, 0xAF	; 175
    334a:	60 e0       	ldi	r22, 0x00	; 0
    334c:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3350:	86 ea       	ldi	r24, 0xA6	; 166
    3352:	60 e0       	ldi	r22, 0x00	; 0
    3354:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3358:	85 ea       	ldi	r24, 0xA5	; 165
    335a:	60 e0       	ldi	r22, 0x00	; 0
    335c:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	28 e8       	ldi	r18, 0x88	; 136
    3366:	33 e1       	ldi	r19, 0x13	; 19
    3368:	f9 01       	movw	r30, r18
    336a:	31 97       	sbiw	r30, 0x01	; 1
    336c:	f1 f7       	brne	.-4      	; 0x336a <LCD_open+0xa0>
    336e:	01 96       	adiw	r24, 0x01	; 1
    3370:	43 e0       	ldi	r20, 0x03	; 3
    3372:	88 3e       	cpi	r24, 0xE8	; 232
    3374:	94 07       	cpc	r25, r20
    3376:	c1 f7       	brne	.-16     	; 0x3368 <LCD_open+0x9e>
    3378:	83 eb       	ldi	r24, 0xB3	; 179
    337a:	60 e0       	ldi	r22, 0x00	; 0
    337c:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3380:	80 e4       	ldi	r24, 0x40	; 64
    3382:	60 e0       	ldi	r22, 0x00	; 0
    3384:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3388:	83 e0       	ldi	r24, 0x03	; 3
    338a:	60 e0       	ldi	r22, 0x00	; 0
    338c:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_set_PGC_addr>
    3390:	83 e0       	ldi	r24, 0x03	; 3
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	0e 94 07 1a 	call	0x340e	; 0x340e <LCD_set_next_PGC>
    3398:	10 92 8a 07 	sts	0x078A, r1
    339c:	10 92 8c 07 	sts	0x078C, r1
    33a0:	10 92 8b 07 	sts	0x078B, r1
    33a4:	8f ea       	ldi	r24, 0xAF	; 175
    33a6:	93 e0       	ldi	r25, 0x03	; 3
    33a8:	90 93 bb 07 	sts	0x07BB, r25
    33ac:	80 93 ba 07 	sts	0x07BA, r24
    33b0:	88 e1       	ldi	r24, 0x18	; 24
    33b2:	0e 94 e6 19 	call	0x33cc	; 0x33cc <LCD_set_backlight>
    33b6:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
    33ba:	84 ea       	ldi	r24, 0xA4	; 164
    33bc:	60 e0       	ldi	r22, 0x00	; 0
    33be:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    33c2:	85 e0       	ldi	r24, 0x05	; 5
    33c4:	91 e0       	ldi	r25, 0x01	; 1
    33c6:	1f 91       	pop	r17
    33c8:	0f 91       	pop	r16
    33ca:	08 95       	ret

000033cc <LCD_set_backlight>:
    33cc:	1f 93       	push	r17
    33ce:	18 2f       	mov	r17, r24
    33d0:	85 e0       	ldi	r24, 0x05	; 5
    33d2:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    33d6:	81 30       	cpi	r24, 0x01	; 1
    33d8:	c1 f4       	brne	.+48     	; 0x340a <LCD_set_backlight+0x3e>
    33da:	87 e0       	ldi	r24, 0x07	; 7
    33dc:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <SPI_set_slave_addr>
    33e0:	82 e0       	ldi	r24, 0x02	; 2
    33e2:	6a e0       	ldi	r22, 0x0A	; 10
    33e4:	0e 94 b4 1a 	call	0x3568	; 0x3568 <SPI_transmit>
    33e8:	82 e0       	ldi	r24, 0x02	; 2
    33ea:	61 eb       	ldi	r22, 0xB1	; 177
    33ec:	0e 94 b4 1a 	call	0x3568	; 0x3568 <SPI_transmit>
    33f0:	61 2f       	mov	r22, r17
    33f2:	11 32       	cpi	r17, 0x21	; 33
    33f4:	08 f0       	brcs	.+2      	; 0x33f8 <LCD_set_backlight+0x2c>
    33f6:	60 e2       	ldi	r22, 0x20	; 32
    33f8:	82 e0       	ldi	r24, 0x02	; 2
    33fa:	0e 94 b4 1a 	call	0x3568	; 0x3568 <SPI_transmit>
    33fe:	89 ee       	ldi	r24, 0xE9	; 233
    3400:	8a 95       	dec	r24
    3402:	f1 f7       	brne	.-4      	; 0x3400 <LCD_set_backlight+0x34>
    3404:	87 e0       	ldi	r24, 0x07	; 7
    3406:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <SPI_set_slave_addr>
    340a:	1f 91       	pop	r17
    340c:	08 95       	ret

0000340e <LCD_set_next_PGC>:
    340e:	83 70       	andi	r24, 0x03	; 3
    3410:	6f 77       	andi	r22, 0x7F	; 127
    3412:	60 93 88 07 	sts	0x0788, r22
    3416:	80 93 89 07 	sts	0x0789, r24
    341a:	08 95       	ret

0000341c <LCD_set_PGC_addr>:
    341c:	0f 93       	push	r16
    341e:	1f 93       	push	r17
    3420:	06 2f       	mov	r16, r22
    3422:	16 2f       	mov	r17, r22
    3424:	1f 77       	andi	r17, 0x7F	; 127
    3426:	83 70       	andi	r24, 0x03	; 3
    3428:	80 6b       	ori	r24, 0xB0	; 176
    342a:	60 e0       	ldi	r22, 0x00	; 0
    342c:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3430:	12 95       	swap	r17
    3432:	1f 70       	andi	r17, 0x0F	; 15
    3434:	81 2f       	mov	r24, r17
    3436:	80 61       	ori	r24, 0x10	; 16
    3438:	60 e0       	ldi	r22, 0x00	; 0
    343a:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    343e:	80 2f       	mov	r24, r16
    3440:	8f 70       	andi	r24, 0x0F	; 15
    3442:	60 e0       	ldi	r22, 0x00	; 0
    3444:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    3448:	1f 91       	pop	r17
    344a:	0f 91       	pop	r16
    344c:	08 95       	ret

0000344e <LCD_write>:
    344e:	0f 93       	push	r16
    3450:	1f 93       	push	r17
    3452:	08 2f       	mov	r16, r24
    3454:	16 2f       	mov	r17, r22
    3456:	85 e0       	ldi	r24, 0x05	; 5
    3458:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    345c:	81 30       	cpi	r24, 0x01	; 1
    345e:	79 f4       	brne	.+30     	; 0x347e <LCD_write+0x30>
    3460:	11 23       	and	r17, r17
    3462:	19 f0       	breq	.+6      	; 0x346a <LCD_write+0x1c>
    3464:	11 30       	cpi	r17, 0x01	; 1
    3466:	21 f4       	brne	.+8      	; 0x3470 <LCD_write+0x22>
    3468:	02 c0       	rjmp	.+4      	; 0x346e <LCD_write+0x20>
    346a:	2b 98       	cbi	0x05, 3	; 5
    346c:	01 c0       	rjmp	.+2      	; 0x3470 <LCD_write+0x22>
    346e:	2b 9a       	sbi	0x05, 3	; 5
    3470:	86 e0       	ldi	r24, 0x06	; 6
    3472:	8a 95       	dec	r24
    3474:	f1 f7       	brne	.-4      	; 0x3472 <LCD_write+0x24>
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	60 2f       	mov	r22, r16
    347a:	0e 94 b4 1a 	call	0x3568	; 0x3568 <SPI_transmit>
    347e:	1f 91       	pop	r17
    3480:	0f 91       	pop	r16
    3482:	08 95       	ret

00003484 <LED_clr_pattern>:
    3484:	1f 93       	push	r17
    3486:	18 2f       	mov	r17, r24
    3488:	86 e0       	ldi	r24, 0x06	; 6
    348a:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    348e:	81 30       	cpi	r24, 0x01	; 1
    3490:	19 f4       	brne	.+6      	; 0x3498 <LED_clr_pattern+0x14>
    3492:	81 2f       	mov	r24, r17
    3494:	0e 94 6a 24 	call	0x48d4	; 0x48d4 <__LED_clr_pattern>
    3498:	1f 91       	pop	r17
    349a:	08 95       	ret

0000349c <LED_open>:
    349c:	0e 94 6f 24 	call	0x48de	; 0x48de <__LED_init>
    34a0:	86 e0       	ldi	r24, 0x06	; 6
    34a2:	61 e0       	ldi	r22, 0x01	; 1
    34a4:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    34a8:	86 e0       	ldi	r24, 0x06	; 6
    34aa:	91 e0       	ldi	r25, 0x01	; 1
    34ac:	08 95       	ret

000034ae <LED_set_pattern>:
    34ae:	1f 93       	push	r17
    34b0:	18 2f       	mov	r17, r24
    34b2:	86 e0       	ldi	r24, 0x06	; 6
    34b4:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    34b8:	81 30       	cpi	r24, 0x01	; 1
    34ba:	19 f4       	brne	.+6      	; 0x34c2 <LED_set_pattern+0x14>
    34bc:	81 2f       	mov	r24, r17
    34be:	0e 94 72 24 	call	0x48e4	; 0x48e4 <__LED_set_pattern>
    34c2:	1f 91       	pop	r17
    34c4:	08 95       	ret

000034c6 <SPI_set_slave_addr>:
    34c6:	1f 93       	push	r17
    34c8:	18 2f       	mov	r17, r24
    34ca:	82 e0       	ldi	r24, 0x02	; 2
    34cc:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    34d0:	81 30       	cpi	r24, 0x01	; 1
    34d2:	09 f0       	breq	.+2      	; 0x34d6 <SPI_set_slave_addr+0x10>
    34d4:	47 c0       	rjmp	.+142    	; 0x3564 <SPI_set_slave_addr+0x9e>
    34d6:	91 2f       	mov	r25, r17
    34d8:	97 70       	andi	r25, 0x07	; 7
    34da:	80 91 8d 07 	lds	r24, 0x078D
    34de:	98 17       	cp	r25, r24
    34e0:	09 f4       	brne	.+2      	; 0x34e4 <SPI_set_slave_addr+0x1e>
    34e2:	40 c0       	rjmp	.+128    	; 0x3564 <SPI_set_slave_addr+0x9e>
    34e4:	90 93 8d 07 	sts	0x078D, r25
    34e8:	85 b1       	in	r24, 0x05	; 5
    34ea:	88 7f       	andi	r24, 0xF8	; 248
    34ec:	89 2b       	or	r24, r25
    34ee:	85 b9       	out	0x05, r24	; 5
    34f0:	93 30       	cpi	r25, 0x03	; 3
    34f2:	11 f1       	breq	.+68     	; 0x3538 <SPI_set_slave_addr+0x72>
    34f4:	94 30       	cpi	r25, 0x04	; 4
    34f6:	28 f4       	brcc	.+10     	; 0x3502 <SPI_set_slave_addr+0x3c>
    34f8:	91 30       	cpi	r25, 0x01	; 1
    34fa:	51 f0       	breq	.+20     	; 0x3510 <SPI_set_slave_addr+0x4a>
    34fc:	92 30       	cpi	r25, 0x02	; 2
    34fe:	90 f4       	brcc	.+36     	; 0x3524 <SPI_set_slave_addr+0x5e>
    3500:	0c c0       	rjmp	.+24     	; 0x351a <SPI_set_slave_addr+0x54>
    3502:	95 30       	cpi	r25, 0x05	; 5
    3504:	19 f1       	breq	.+70     	; 0x354c <SPI_set_slave_addr+0x86>
    3506:	95 30       	cpi	r25, 0x05	; 5
    3508:	e0 f0       	brcs	.+56     	; 0x3542 <SPI_set_slave_addr+0x7c>
    350a:	96 30       	cpi	r25, 0x06	; 6
    350c:	21 f5       	brne	.+72     	; 0x3556 <SPI_set_slave_addr+0x90>
    350e:	0f c0       	rjmp	.+30     	; 0x352e <SPI_set_slave_addr+0x68>
    3510:	e0 91 52 04 	lds	r30, 0x0452
    3514:	f0 91 53 04 	lds	r31, 0x0453
    3518:	22 c0       	rjmp	.+68     	; 0x355e <SPI_set_slave_addr+0x98>
    351a:	e0 91 50 04 	lds	r30, 0x0450
    351e:	f0 91 51 04 	lds	r31, 0x0451
    3522:	1d c0       	rjmp	.+58     	; 0x355e <SPI_set_slave_addr+0x98>
    3524:	e0 91 54 04 	lds	r30, 0x0454
    3528:	f0 91 55 04 	lds	r31, 0x0455
    352c:	18 c0       	rjmp	.+48     	; 0x355e <SPI_set_slave_addr+0x98>
    352e:	e0 91 5c 04 	lds	r30, 0x045C
    3532:	f0 91 5d 04 	lds	r31, 0x045D
    3536:	13 c0       	rjmp	.+38     	; 0x355e <SPI_set_slave_addr+0x98>
    3538:	e0 91 56 04 	lds	r30, 0x0456
    353c:	f0 91 57 04 	lds	r31, 0x0457
    3540:	0e c0       	rjmp	.+28     	; 0x355e <SPI_set_slave_addr+0x98>
    3542:	e0 91 58 04 	lds	r30, 0x0458
    3546:	f0 91 59 04 	lds	r31, 0x0459
    354a:	09 c0       	rjmp	.+18     	; 0x355e <SPI_set_slave_addr+0x98>
    354c:	e0 91 5a 04 	lds	r30, 0x045A
    3550:	f0 91 5b 04 	lds	r31, 0x045B
    3554:	04 c0       	rjmp	.+8      	; 0x355e <SPI_set_slave_addr+0x98>
    3556:	e0 91 5e 04 	lds	r30, 0x045E
    355a:	f0 91 5f 04 	lds	r31, 0x045F
    355e:	30 97       	sbiw	r30, 0x00	; 0
    3560:	09 f0       	breq	.+2      	; 0x3564 <SPI_set_slave_addr+0x9e>
    3562:	09 95       	icall
    3564:	1f 91       	pop	r17
    3566:	08 95       	ret

00003568 <SPI_transmit>:
    3568:	1f 93       	push	r17
    356a:	16 2f       	mov	r17, r22
    356c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <SPI_set_slave_addr>
    3570:	82 e0       	ldi	r24, 0x02	; 2
    3572:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    3576:	81 30       	cpi	r24, 0x01	; 1
    3578:	21 f4       	brne	.+8      	; 0x3582 <SPI_transmit+0x1a>
    357a:	1e bd       	out	0x2e, r17	; 46
    357c:	0d b4       	in	r0, 0x2d	; 45
    357e:	07 fe       	sbrs	r0, 7
    3580:	fd cf       	rjmp	.-6      	; 0x357c <SPI_transmit+0x14>
    3582:	1f 91       	pop	r17
    3584:	08 95       	ret

00003586 <__SPKR_set_up_freq_LUT>:
    3586:	0f 93       	push	r16
    3588:	1f 93       	push	r17
    358a:	cf 93       	push	r28
    358c:	df 93       	push	r29
    358e:	80 e2       	ldi	r24, 0x20	; 32
    3590:	91 e0       	ldi	r25, 0x01	; 1
    3592:	0e 94 c0 33 	call	0x6780	; 0x6780 <malloc>
    3596:	9c 01       	movw	r18, r24
    3598:	90 93 6f 04 	sts	0x046F, r25
    359c:	80 93 6e 04 	sts	0x046E, r24
    35a0:	89 2b       	or	r24, r25
    35a2:	11 f4       	brne	.+4      	; 0x35a8 <__SPKR_set_up_freq_LUT+0x22>
    35a4:	80 e0       	ldi	r24, 0x00	; 0
    35a6:	39 c0       	rjmp	.+114    	; 0x361a <__SPKR_set_up_freq_LUT+0x94>
    35a8:	89 01       	movw	r16, r18
    35aa:	c0 e0       	ldi	r28, 0x00	; 0
    35ac:	d0 e0       	ldi	r29, 0x00	; 0
    35ae:	be 01       	movw	r22, r28
    35b0:	80 e0       	ldi	r24, 0x00	; 0
    35b2:	90 e0       	ldi	r25, 0x00	; 0
    35b4:	0e 94 01 2d 	call	0x5a02	; 0x5a02 <__floatunsisf>
    35b8:	20 e0       	ldi	r18, 0x00	; 0
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	40 ea       	ldi	r20, 0xA0	; 160
    35be:	51 e4       	ldi	r21, 0x41	; 65
    35c0:	0e 94 68 2c 	call	0x58d0	; 0x58d0 <__divsf3>
    35c4:	27 ef       	ldi	r18, 0xF7	; 247
    35c6:	35 e7       	ldi	r19, 0x75	; 117
    35c8:	40 e0       	ldi	r20, 0x00	; 0
    35ca:	5f e3       	ldi	r21, 0x3F	; 63
    35cc:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    35d0:	9b 01       	movw	r18, r22
    35d2:	ac 01       	movw	r20, r24
    35d4:	60 e0       	ldi	r22, 0x00	; 0
    35d6:	70 e0       	ldi	r23, 0x00	; 0
    35d8:	80 e2       	ldi	r24, 0x20	; 32
    35da:	91 e4       	ldi	r25, 0x41	; 65
    35dc:	0e 94 54 2e 	call	0x5ca8	; 0x5ca8 <pow>
    35e0:	9b 01       	movw	r18, r22
    35e2:	ac 01       	movw	r20, r24
    35e4:	ca 01       	movw	r24, r20
    35e6:	b9 01       	movw	r22, r18
    35e8:	2d ec       	ldi	r18, 0xCD	; 205
    35ea:	3c ec       	ldi	r19, 0xCC	; 204
    35ec:	42 e8       	ldi	r20, 0x82	; 130
    35ee:	51 e4       	ldi	r21, 0x41	; 65
    35f0:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__mulsf3>
    35f4:	0e 94 b7 2d 	call	0x5b6e	; 0x5b6e <lrint>
    35f8:	2a e0       	ldi	r18, 0x0A	; 10
    35fa:	30 e0       	ldi	r19, 0x00	; 0
    35fc:	40 e0       	ldi	r20, 0x00	; 0
    35fe:	50 e0       	ldi	r21, 0x00	; 0
    3600:	0e 94 21 33 	call	0x6642	; 0x6642 <__mulsi3>
    3604:	f8 01       	movw	r30, r16
    3606:	61 93       	st	Z+, r22
    3608:	71 93       	st	Z+, r23
    360a:	81 93       	st	Z+, r24
    360c:	91 93       	st	Z+, r25
    360e:	8f 01       	movw	r16, r30
    3610:	21 96       	adiw	r28, 0x01	; 1
    3612:	c8 34       	cpi	r28, 0x48	; 72
    3614:	d1 05       	cpc	r29, r1
    3616:	59 f6       	brne	.-106    	; 0x35ae <__SPKR_set_up_freq_LUT+0x28>
    3618:	81 e0       	ldi	r24, 0x01	; 1
    361a:	df 91       	pop	r29
    361c:	cf 91       	pop	r28
    361e:	1f 91       	pop	r17
    3620:	0f 91       	pop	r16
    3622:	08 95       	ret

00003624 <__SPKR_open_beep_mode>:
    3624:	8a e0       	ldi	r24, 0x0A	; 10
    3626:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    362a:	88 23       	and	r24, r24
    362c:	71 f4       	brne	.+28     	; 0x364a <__SPKR_open_beep_mode+0x26>
    362e:	10 92 6b 04 	sts	0x046B, r1
    3632:	10 92 6a 04 	sts	0x046A, r1
    3636:	81 e0       	ldi	r24, 0x01	; 1
    3638:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__SPKR_init>
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	80 93 61 04 	sts	0x0461, r24
    3642:	8a e0       	ldi	r24, 0x0A	; 10
    3644:	61 e0       	ldi	r22, 0x01	; 1
    3646:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    364a:	8a e0       	ldi	r24, 0x0A	; 10
    364c:	91 e0       	ldi	r25, 0x01	; 1
    364e:	08 95       	ret

00003650 <__SPKR_open_tone_mode>:
    3650:	1f 93       	push	r17
    3652:	8b e0       	ldi	r24, 0x0B	; 11
    3654:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    3658:	88 23       	and	r24, r24
    365a:	11 f0       	breq	.+4      	; 0x3660 <__SPKR_open_tone_mode+0x10>
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	21 c0       	rjmp	.+66     	; 0x36a2 <__SPKR_open_tone_mode+0x52>
    3660:	89 e0       	ldi	r24, 0x09	; 9
    3662:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    3666:	88 23       	and	r24, r24
    3668:	d9 f4       	brne	.+54     	; 0x36a0 <__SPKR_open_tone_mode+0x50>
    366a:	0e 94 c3 1a 	call	0x3586	; 0x3586 <__SPKR_set_up_freq_LUT>
    366e:	18 2f       	mov	r17, r24
    3670:	81 30       	cpi	r24, 0x01	; 1
    3672:	b1 f4       	brne	.+44     	; 0x36a0 <__SPKR_open_tone_mode+0x50>
    3674:	10 92 62 04 	sts	0x0462, r1
    3678:	10 92 63 04 	sts	0x0463, r1
    367c:	10 92 64 04 	sts	0x0464, r1
    3680:	10 92 65 04 	sts	0x0465, r1
    3684:	8d e0       	ldi	r24, 0x0D	; 13
    3686:	60 e3       	ldi	r22, 0x30	; 48
    3688:	75 e2       	ldi	r23, 0x25	; 37
    368a:	0e 94 93 23 	call	0x4726	; 0x4726 <ISR_attach>
    368e:	82 e0       	ldi	r24, 0x02	; 2
    3690:	0e 94 ad 25 	call	0x4b5a	; 0x4b5a <__SPKR_init>
    3694:	10 93 60 04 	sts	0x0460, r17
    3698:	89 e0       	ldi	r24, 0x09	; 9
    369a:	61 e0       	ldi	r22, 0x01	; 1
    369c:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    36a0:	91 e0       	ldi	r25, 0x01	; 1
    36a2:	89 e0       	ldi	r24, 0x09	; 9
    36a4:	1f 91       	pop	r17
    36a6:	08 95       	ret

000036a8 <SPKR_open>:
    36a8:	81 30       	cpi	r24, 0x01	; 1
    36aa:	29 f0       	breq	.+10     	; 0x36b6 <SPKR_open+0xe>
    36ac:	82 30       	cpi	r24, 0x02	; 2
    36ae:	31 f0       	breq	.+12     	; 0x36bc <SPKR_open+0x14>
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	89 e0       	ldi	r24, 0x09	; 9
    36b4:	08 95       	ret
    36b6:	0e 94 12 1b 	call	0x3624	; 0x3624 <__SPKR_open_beep_mode>
    36ba:	08 95       	ret
    36bc:	0e 94 28 1b 	call	0x3650	; 0x3650 <__SPKR_open_tone_mode>
    36c0:	08 95       	ret

000036c2 <STEPPER_get_nSteps>:
    36c2:	80 91 4e 07 	lds	r24, 0x074E
    36c6:	90 91 4f 07 	lds	r25, 0x074F
    36ca:	20 91 50 07 	lds	r18, 0x0750
    36ce:	30 91 51 07 	lds	r19, 0x0751
    36d2:	bc 01       	movw	r22, r24
    36d4:	c9 01       	movw	r24, r18
    36d6:	08 95       	ret

000036d8 <STEPPER_stepmode>:
    36d8:	2f 92       	push	r2
    36da:	3f 92       	push	r3
    36dc:	4f 92       	push	r4
    36de:	5f 92       	push	r5
    36e0:	6f 92       	push	r6
    36e2:	7f 92       	push	r7
    36e4:	8f 92       	push	r8
    36e6:	9f 92       	push	r9
    36e8:	af 92       	push	r10
    36ea:	bf 92       	push	r11
    36ec:	cf 92       	push	r12
    36ee:	df 92       	push	r13
    36f0:	ef 92       	push	r14
    36f2:	ff 92       	push	r15
    36f4:	0f 93       	push	r16
    36f6:	1f 93       	push	r17
    36f8:	df 93       	push	r29
    36fa:	cf 93       	push	r28
    36fc:	cd b7       	in	r28, 0x3d	; 61
    36fe:	de b7       	in	r29, 0x3e	; 62
    3700:	58 2e       	mov	r5, r24
    3702:	96 2e       	mov	r9, r22
    3704:	44 2e       	mov	r4, r20
    3706:	39 01       	movw	r6, r18
    3708:	3c 2c       	mov	r3, r12
    370a:	c9 8c       	ldd	r12, Y+25	; 0x19
    370c:	da 8c       	ldd	r13, Y+26	; 0x1a
    370e:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3710:	81 e0       	ldi	r24, 0x01	; 1
    3712:	68 17       	cp	r22, r24
    3714:	39 f1       	breq	.+78     	; 0x3764 <STEPPER_stepmode+0x8c>
    3716:	68 17       	cp	r22, r24
    3718:	28 f0       	brcs	.+10     	; 0x3724 <STEPPER_stepmode+0x4c>
    371a:	92 e0       	ldi	r25, 0x02	; 2
    371c:	69 17       	cp	r22, r25
    371e:	09 f0       	breq	.+2      	; 0x3722 <STEPPER_stepmode+0x4a>
    3720:	85 c0       	rjmp	.+266    	; 0x382c <STEPPER_stepmode+0x154>
    3722:	49 c0       	rjmp	.+146    	; 0x37b6 <STEPPER_stepmode+0xde>
    3724:	80 e0       	ldi	r24, 0x00	; 0
    3726:	61 e0       	ldi	r22, 0x01	; 1
    3728:	0e 94 75 1d 	call	0x3aea	; 0x3aea <STEPPER_set_mode>
    372c:	80 e0       	ldi	r24, 0x00	; 0
    372e:	b7 01       	movw	r22, r14
    3730:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <STEPPER_set_accel>
    3734:	80 e0       	ldi	r24, 0x00	; 0
    3736:	64 2d       	mov	r22, r4
    3738:	a3 01       	movw	r20, r6
    373a:	98 01       	movw	r18, r16
    373c:	03 2d       	mov	r16, r3
    373e:	ee 24       	eor	r14, r14
    3740:	e3 94       	inc	r14
    3742:	e3 e7       	ldi	r30, 0x73	; 115
    3744:	ce 2e       	mov	r12, r30
    3746:	e7 e0       	ldi	r30, 0x07	; 7
    3748:	de 2e       	mov	r13, r30
    374a:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <STEPPER_step>
    374e:	55 20       	and	r5, r5
    3750:	09 f0       	breq	.+2      	; 0x3754 <STEPPER_stepmode+0x7c>
    3752:	6c c0       	rjmp	.+216    	; 0x382c <STEPPER_stepmode+0x154>
    3754:	00 d0       	rcall	.+0      	; 0x3756 <STEPPER_stepmode+0x7e>
    3756:	0f 92       	push	r0
    3758:	ed b7       	in	r30, 0x3d	; 61
    375a:	fe b7       	in	r31, 0x3e	; 62
    375c:	11 82       	std	Z+1, r1	; 0x01
    375e:	b3 82       	std	Z+3, r11	; 0x03
    3760:	a2 82       	std	Z+2, r10	; 0x02
    3762:	23 c0       	rjmp	.+70     	; 0x37aa <STEPPER_stepmode+0xd2>
    3764:	81 e0       	ldi	r24, 0x01	; 1
    3766:	61 e0       	ldi	r22, 0x01	; 1
    3768:	0e 94 75 1d 	call	0x3aea	; 0x3aea <STEPPER_set_mode>
    376c:	81 e0       	ldi	r24, 0x01	; 1
    376e:	b6 01       	movw	r22, r12
    3770:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <STEPPER_set_accel>
    3774:	81 e0       	ldi	r24, 0x01	; 1
    3776:	68 2d       	mov	r22, r8
    3778:	4d 89       	ldd	r20, Y+21	; 0x15
    377a:	5e 89       	ldd	r21, Y+22	; 0x16
    377c:	2f 89       	ldd	r18, Y+23	; 0x17
    377e:	38 8d       	ldd	r19, Y+24	; 0x18
    3780:	02 2d       	mov	r16, r2
    3782:	ee 24       	eor	r14, r14
    3784:	e3 94       	inc	r14
    3786:	73 e7       	ldi	r23, 0x73	; 115
    3788:	c7 2e       	mov	r12, r23
    378a:	77 e0       	ldi	r23, 0x07	; 7
    378c:	d7 2e       	mov	r13, r23
    378e:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <STEPPER_step>
    3792:	55 20       	and	r5, r5
    3794:	09 f0       	breq	.+2      	; 0x3798 <STEPPER_stepmode+0xc0>
    3796:	4a c0       	rjmp	.+148    	; 0x382c <STEPPER_stepmode+0x154>
    3798:	00 d0       	rcall	.+0      	; 0x379a <STEPPER_stepmode+0xc2>
    379a:	0f 92       	push	r0
    379c:	ed b7       	in	r30, 0x3d	; 61
    379e:	fe b7       	in	r31, 0x3e	; 62
    37a0:	91 82       	std	Z+1, r9	; 0x01
    37a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37a4:	9d 8d       	ldd	r25, Y+29	; 0x1d
    37a6:	93 83       	std	Z+3, r25	; 0x03
    37a8:	82 83       	std	Z+2, r24	; 0x02
    37aa:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <STEPPER_wait_and_then>
    37ae:	0f 90       	pop	r0
    37b0:	0f 90       	pop	r0
    37b2:	0f 90       	pop	r0
    37b4:	3b c0       	rjmp	.+118    	; 0x382c <STEPPER_stepmode+0x154>
    37b6:	82 e0       	ldi	r24, 0x02	; 2
    37b8:	61 e0       	ldi	r22, 0x01	; 1
    37ba:	0e 94 75 1d 	call	0x3aea	; 0x3aea <STEPPER_set_mode>
    37be:	80 e0       	ldi	r24, 0x00	; 0
    37c0:	b7 01       	movw	r22, r14
    37c2:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <STEPPER_set_accel>
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	b6 01       	movw	r22, r12
    37ca:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <STEPPER_set_accel>
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    37d0:	64 2d       	mov	r22, r4
    37d2:	a3 01       	movw	r20, r6
    37d4:	98 01       	movw	r18, r16
    37d6:	03 2d       	mov	r16, r3
    37d8:	ee 24       	eor	r14, r14
    37da:	e3 94       	inc	r14
    37dc:	93 e7       	ldi	r25, 0x73	; 115
    37de:	c9 2e       	mov	r12, r25
    37e0:	97 e0       	ldi	r25, 0x07	; 7
    37e2:	d9 2e       	mov	r13, r25
    37e4:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <STEPPER_step>
    37e8:	81 e0       	ldi	r24, 0x01	; 1
    37ea:	68 2d       	mov	r22, r8
    37ec:	4d 89       	ldd	r20, Y+21	; 0x15
    37ee:	5e 89       	ldd	r21, Y+22	; 0x16
    37f0:	2f 89       	ldd	r18, Y+23	; 0x17
    37f2:	38 8d       	ldd	r19, Y+24	; 0x18
    37f4:	02 2d       	mov	r16, r2
    37f6:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <STEPPER_step>
    37fa:	55 20       	and	r5, r5
    37fc:	b9 f4       	brne	.+46     	; 0x382c <STEPPER_stepmode+0x154>
    37fe:	00 d0       	rcall	.+0      	; 0x3800 <STEPPER_stepmode+0x128>
    3800:	00 d0       	rcall	.+0      	; 0x3802 <STEPPER_stepmode+0x12a>
    3802:	0f 92       	push	r0
    3804:	ad b7       	in	r26, 0x3d	; 61
    3806:	be b7       	in	r27, 0x3e	; 62
    3808:	11 96       	adiw	r26, 0x01	; 1
    380a:	ed b7       	in	r30, 0x3d	; 61
    380c:	fe b7       	in	r31, 0x3e	; 62
    380e:	91 82       	std	Z+1, r9	; 0x01
    3810:	fd 01       	movw	r30, r26
    3812:	b2 82       	std	Z+2, r11	; 0x02
    3814:	a1 82       	std	Z+1, r10	; 0x01
    3816:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3818:	9d 8d       	ldd	r25, Y+29	; 0x1d
    381a:	94 83       	std	Z+4, r25	; 0x04
    381c:	83 83       	std	Z+3, r24	; 0x03
    381e:	0e 94 5d 1e 	call	0x3cba	; 0x3cba <STEPPER_wait_and_then>
    3822:	0f 90       	pop	r0
    3824:	0f 90       	pop	r0
    3826:	0f 90       	pop	r0
    3828:	0f 90       	pop	r0
    382a:	0f 90       	pop	r0
    382c:	cf 91       	pop	r28
    382e:	df 91       	pop	r29
    3830:	1f 91       	pop	r17
    3832:	0f 91       	pop	r16
    3834:	ff 90       	pop	r15
    3836:	ef 90       	pop	r14
    3838:	df 90       	pop	r13
    383a:	cf 90       	pop	r12
    383c:	bf 90       	pop	r11
    383e:	af 90       	pop	r10
    3840:	9f 90       	pop	r9
    3842:	8f 90       	pop	r8
    3844:	7f 90       	pop	r7
    3846:	6f 90       	pop	r6
    3848:	5f 90       	pop	r5
    384a:	4f 90       	pop	r4
    384c:	3f 90       	pop	r3
    384e:	2f 90       	pop	r2
    3850:	08 95       	ret

00003852 <STEPPER_move>:
    3852:	6f 92       	push	r6
    3854:	7f 92       	push	r7
    3856:	8f 92       	push	r8
    3858:	9f 92       	push	r9
    385a:	af 92       	push	r10
    385c:	bf 92       	push	r11
    385e:	cf 92       	push	r12
    3860:	df 92       	push	r13
    3862:	ef 92       	push	r14
    3864:	ff 92       	push	r15
    3866:	0f 93       	push	r16
    3868:	1f 93       	push	r17
    386a:	df 93       	push	r29
    386c:	cf 93       	push	r28
    386e:	cd b7       	in	r28, 0x3d	; 61
    3870:	de b7       	in	r29, 0x3e	; 62
    3872:	94 2e       	mov	r9, r20
    3874:	7c 2d       	mov	r23, r12
    3876:	d5 01       	movw	r26, r10
    3878:	49 89       	ldd	r20, Y+17	; 0x11
    387a:	5a 89       	ldd	r21, Y+18	; 0x12
    387c:	ab 88       	ldd	r10, Y+19	; 0x13
    387e:	bc 88       	ldd	r11, Y+20	; 0x14
    3880:	cd 88       	ldd	r12, Y+21	; 0x15
    3882:	de 88       	ldd	r13, Y+22	; 0x16
    3884:	9f 89       	ldd	r25, Y+23	; 0x17
    3886:	81 30       	cpi	r24, 0x01	; 1
    3888:	09 f4       	brne	.+2      	; 0x388c <STEPPER_move+0x3a>
    388a:	57 c0       	rjmp	.+174    	; 0x393a <STEPPER_move+0xe8>
    388c:	81 30       	cpi	r24, 0x01	; 1
    388e:	b8 f1       	brcs	.+110    	; 0x38fe <STEPPER_move+0xac>
    3890:	82 30       	cpi	r24, 0x02	; 2
    3892:	09 f0       	breq	.+2      	; 0x3896 <STEPPER_move+0x44>
    3894:	76 c0       	rjmp	.+236    	; 0x3982 <STEPPER_move+0x130>
    3896:	61 30       	cpi	r22, 0x01	; 1
    3898:	91 f0       	breq	.+36     	; 0x38be <STEPPER_move+0x6c>
    389a:	61 30       	cpi	r22, 0x01	; 1
    389c:	20 f0       	brcs	.+8      	; 0x38a6 <STEPPER_move+0x54>
    389e:	62 30       	cpi	r22, 0x02	; 2
    38a0:	09 f0       	breq	.+2      	; 0x38a4 <STEPPER_move+0x52>
    38a2:	6f c0       	rjmp	.+222    	; 0x3982 <STEPPER_move+0x130>
    38a4:	15 c0       	rjmp	.+42     	; 0x38d0 <STEPPER_move+0x7e>
    38a6:	80 e0       	ldi	r24, 0x00	; 0
    38a8:	60 e0       	ldi	r22, 0x00	; 0
    38aa:	0e 94 75 1d 	call	0x3aea	; 0x3aea <STEPPER_set_mode>
    38ae:	80 e0       	ldi	r24, 0x00	; 0
    38b0:	b7 01       	movw	r22, r14
    38b2:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <STEPPER_set_accel>
    38b6:	80 e0       	ldi	r24, 0x00	; 0
    38b8:	69 2d       	mov	r22, r9
    38ba:	a8 01       	movw	r20, r16
    38bc:	1d c0       	rjmp	.+58     	; 0x38f8 <STEPPER_move+0xa6>
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	60 e0       	ldi	r22, 0x00	; 0
    38c2:	0e 94 75 1d 	call	0x3aea	; 0x3aea <STEPPER_set_mode>
    38c6:	81 e0       	ldi	r24, 0x01	; 1
    38c8:	b6 01       	movw	r22, r12
    38ca:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <STEPPER_set_accel>
    38ce:	11 c0       	rjmp	.+34     	; 0x38f2 <STEPPER_move+0xa0>
    38d0:	82 e0       	ldi	r24, 0x02	; 2
    38d2:	60 e0       	ldi	r22, 0x00	; 0
    38d4:	0e 94 75 1d 	call	0x3aea	; 0x3aea <STEPPER_set_mode>
    38d8:	80 e0       	ldi	r24, 0x00	; 0
    38da:	b7 01       	movw	r22, r14
    38dc:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <STEPPER_set_accel>
    38e0:	81 e0       	ldi	r24, 0x01	; 1
    38e2:	b6 01       	movw	r22, r12
    38e4:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <STEPPER_set_accel>
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	69 2d       	mov	r22, r9
    38ec:	a8 01       	movw	r20, r16
    38ee:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <STEPPER_run>
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	68 2d       	mov	r22, r8
    38f6:	a5 01       	movw	r20, r10
    38f8:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <STEPPER_run>
    38fc:	42 c0       	rjmp	.+132    	; 0x3982 <STEPPER_move+0x130>
    38fe:	ed b7       	in	r30, 0x3d	; 61
    3900:	fe b7       	in	r31, 0x3e	; 62
    3902:	39 97       	sbiw	r30, 0x09	; 9
    3904:	0f b6       	in	r0, 0x3f	; 63
    3906:	f8 94       	cli
    3908:	fe bf       	out	0x3e, r31	; 62
    390a:	0f be       	out	0x3f, r0	; 63
    390c:	ed bf       	out	0x3d, r30	; 61
    390e:	6d b6       	in	r6, 0x3d	; 61
    3910:	7e b6       	in	r7, 0x3e	; 62
    3912:	08 94       	sec
    3914:	61 1c       	adc	r6, r1
    3916:	71 1c       	adc	r7, r1
    3918:	52 83       	std	Z+2, r21	; 0x02
    391a:	41 83       	std	Z+1, r20	; 0x01
    391c:	f3 01       	movw	r30, r6
    391e:	b3 82       	std	Z+3, r11	; 0x03
    3920:	a2 82       	std	Z+2, r10	; 0x02
    3922:	d5 82       	std	Z+5, r13	; 0x05
    3924:	c4 82       	std	Z+4, r12	; 0x04
    3926:	96 83       	std	Z+6, r25	; 0x06
    3928:	88 8d       	ldd	r24, Y+24	; 0x18
    392a:	99 8d       	ldd	r25, Y+25	; 0x19
    392c:	90 87       	std	Z+8, r25	; 0x08
    392e:	87 83       	std	Z+7, r24	; 0x07
    3930:	80 e0       	ldi	r24, 0x00	; 0
    3932:	49 2d       	mov	r20, r9
    3934:	c7 2e       	mov	r12, r23
    3936:	5d 01       	movw	r10, r26
    3938:	1a c0       	rjmp	.+52     	; 0x396e <STEPPER_move+0x11c>
    393a:	ed b7       	in	r30, 0x3d	; 61
    393c:	fe b7       	in	r31, 0x3e	; 62
    393e:	39 97       	sbiw	r30, 0x09	; 9
    3940:	0f b6       	in	r0, 0x3f	; 63
    3942:	f8 94       	cli
    3944:	fe bf       	out	0x3e, r31	; 62
    3946:	0f be       	out	0x3f, r0	; 63
    3948:	ed bf       	out	0x3d, r30	; 61
    394a:	ad b7       	in	r26, 0x3d	; 61
    394c:	be b7       	in	r27, 0x3e	; 62
    394e:	11 96       	adiw	r26, 0x01	; 1
    3950:	52 83       	std	Z+2, r21	; 0x02
    3952:	41 83       	std	Z+1, r20	; 0x01
    3954:	fd 01       	movw	r30, r26
    3956:	b3 82       	std	Z+3, r11	; 0x03
    3958:	a2 82       	std	Z+2, r10	; 0x02
    395a:	d5 82       	std	Z+5, r13	; 0x05
    395c:	c4 82       	std	Z+4, r12	; 0x04
    395e:	96 83       	std	Z+6, r25	; 0x06
    3960:	10 86       	std	Z+8, r1	; 0x08
    3962:	17 82       	std	Z+7, r1	; 0x07
    3964:	81 e0       	ldi	r24, 0x01	; 1
    3966:	49 2d       	mov	r20, r9
    3968:	c7 2e       	mov	r12, r23
    396a:	aa 24       	eor	r10, r10
    396c:	bb 24       	eor	r11, r11
    396e:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <STEPPER_stepmode>
    3972:	8d b7       	in	r24, 0x3d	; 61
    3974:	9e b7       	in	r25, 0x3e	; 62
    3976:	09 96       	adiw	r24, 0x09	; 9
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	f8 94       	cli
    397c:	9e bf       	out	0x3e, r25	; 62
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	8d bf       	out	0x3d, r24	; 61
    3982:	cf 91       	pop	r28
    3984:	df 91       	pop	r29
    3986:	1f 91       	pop	r17
    3988:	0f 91       	pop	r16
    398a:	ff 90       	pop	r15
    398c:	ef 90       	pop	r14
    398e:	df 90       	pop	r13
    3990:	cf 90       	pop	r12
    3992:	bf 90       	pop	r11
    3994:	af 90       	pop	r10
    3996:	9f 90       	pop	r9
    3998:	8f 90       	pop	r8
    399a:	7f 90       	pop	r7
    399c:	6f 90       	pop	r6
    399e:	08 95       	ret

000039a0 <STEPPER_open>:
    39a0:	0e 94 3f 26 	call	0x4c7e	; 0x4c7e <__STEPPER_init>
    39a4:	81 e0       	ldi	r24, 0x01	; 1
    39a6:	80 93 72 07 	sts	0x0772, r24
    39aa:	ec e3       	ldi	r30, 0x3C	; 60
    39ac:	f7 e0       	ldi	r31, 0x07	; 7
    39ae:	11 92       	st	Z+, r1
    39b0:	11 92       	st	Z+, r1
    39b2:	11 82       	std	Z+1, r1	; 0x01
    39b4:	10 82       	st	Z, r1
    39b6:	32 96       	adiw	r30, 0x02	; 2
    39b8:	11 82       	std	Z+1, r1	; 0x01
    39ba:	10 82       	st	Z, r1
    39bc:	32 96       	adiw	r30, 0x02	; 2
    39be:	11 82       	std	Z+1, r1	; 0x01
    39c0:	10 82       	st	Z, r1
    39c2:	32 96       	adiw	r30, 0x02	; 2
    39c4:	11 82       	std	Z+1, r1	; 0x01
    39c6:	10 82       	st	Z, r1
    39c8:	32 96       	adiw	r30, 0x02	; 2
    39ca:	11 82       	std	Z+1, r1	; 0x01
    39cc:	10 82       	st	Z, r1
    39ce:	32 96       	adiw	r30, 0x02	; 2
    39d0:	11 82       	std	Z+1, r1	; 0x01
    39d2:	10 82       	st	Z, r1
    39d4:	32 96       	adiw	r30, 0x02	; 2
    39d6:	11 82       	std	Z+1, r1	; 0x01
    39d8:	10 82       	st	Z, r1
    39da:	32 96       	adiw	r30, 0x02	; 2
    39dc:	11 82       	std	Z+1, r1	; 0x01
    39de:	10 82       	st	Z, r1
    39e0:	32 96       	adiw	r30, 0x02	; 2
    39e2:	11 82       	std	Z+1, r1	; 0x01
    39e4:	10 82       	st	Z, r1
    39e6:	32 96       	adiw	r30, 0x02	; 2
    39e8:	11 82       	std	Z+1, r1	; 0x01
    39ea:	10 82       	st	Z, r1
    39ec:	32 96       	adiw	r30, 0x02	; 2
    39ee:	11 82       	std	Z+1, r1	; 0x01
    39f0:	10 82       	st	Z, r1
    39f2:	32 96       	adiw	r30, 0x02	; 2
    39f4:	11 82       	std	Z+1, r1	; 0x01
    39f6:	10 82       	st	Z, r1
    39f8:	36 96       	adiw	r30, 0x06	; 6
    39fa:	11 92       	st	Z+, r1
    39fc:	11 92       	st	Z+, r1
    39fe:	11 92       	st	Z+, r1
    3a00:	10 82       	st	Z, r1
    3a02:	32 96       	adiw	r30, 0x02	; 2
    3a04:	11 92       	st	Z+, r1
    3a06:	11 92       	st	Z+, r1
    3a08:	11 92       	st	Z+, r1
    3a0a:	11 92       	st	Z+, r1
    3a0c:	11 92       	st	Z+, r1
    3a0e:	11 92       	st	Z+, r1
    3a10:	11 92       	st	Z+, r1
    3a12:	11 82       	std	Z+1, r1	; 0x01
    3a14:	10 82       	st	Z, r1
    3a16:	32 96       	adiw	r30, 0x02	; 2
    3a18:	11 82       	std	Z+1, r1	; 0x01
    3a1a:	10 82       	st	Z, r1
    3a1c:	32 96       	adiw	r30, 0x02	; 2
    3a1e:	11 82       	std	Z+1, r1	; 0x01
    3a20:	10 82       	st	Z, r1
    3a22:	32 96       	adiw	r30, 0x02	; 2
    3a24:	11 82       	std	Z+1, r1	; 0x01
    3a26:	10 82       	st	Z, r1
    3a28:	76 97       	sbiw	r30, 0x16	; 22
    3a2a:	11 82       	std	Z+1, r1	; 0x01
    3a2c:	10 82       	st	Z, r1
    3a2e:	32 96       	adiw	r30, 0x02	; 2
    3a30:	11 82       	std	Z+1, r1	; 0x01
    3a32:	10 82       	st	Z, r1
    3a34:	10 92 71 07 	sts	0x0771, r1
    3a38:	10 92 70 07 	sts	0x0770, r1
    3a3c:	10 92 72 07 	sts	0x0772, r1
    3a40:	87 e0       	ldi	r24, 0x07	; 7
    3a42:	61 e0       	ldi	r22, 0x01	; 1
    3a44:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    3a48:	87 e0       	ldi	r24, 0x07	; 7
    3a4a:	91 e0       	ldi	r25, 0x01	; 1
    3a4c:	08 95       	ret

00003a4e <STEPPER_run>:
    3a4e:	ef 92       	push	r14
    3a50:	ff 92       	push	r15
    3a52:	0f 93       	push	r16
    3a54:	1f 93       	push	r17
    3a56:	18 2f       	mov	r17, r24
    3a58:	06 2f       	mov	r16, r22
    3a5a:	7a 01       	movw	r14, r20
    3a5c:	60 e0       	ldi	r22, 0x00	; 0
    3a5e:	0e 94 75 1d 	call	0x3aea	; 0x3aea <STEPPER_set_mode>
    3a62:	81 2f       	mov	r24, r17
    3a64:	60 2f       	mov	r22, r16
    3a66:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <STEPPER_set_dir>
    3a6a:	81 2f       	mov	r24, r17
    3a6c:	b7 01       	movw	r22, r14
    3a6e:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <STEPPER_set_speed>
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	ff 90       	pop	r15
    3a78:	ef 90       	pop	r14
    3a7a:	08 95       	ret

00003a7c <STEPPER_set_accel>:
    3a7c:	48 2f       	mov	r20, r24
    3a7e:	81 e0       	ldi	r24, 0x01	; 1
    3a80:	80 93 72 07 	sts	0x0772, r24
    3a84:	cb 01       	movw	r24, r22
    3a86:	23 e0       	ldi	r18, 0x03	; 3
    3a88:	69 3e       	cpi	r22, 0xE9	; 233
    3a8a:	72 07       	cpc	r23, r18
    3a8c:	10 f0       	brcs	.+4      	; 0x3a92 <STEPPER_set_accel+0x16>
    3a8e:	88 ee       	ldi	r24, 0xE8	; 232
    3a90:	93 e0       	ldi	r25, 0x03	; 3
    3a92:	41 30       	cpi	r20, 0x01	; 1
    3a94:	71 f0       	breq	.+28     	; 0x3ab2 <STEPPER_set_accel+0x36>
    3a96:	41 30       	cpi	r20, 0x01	; 1
    3a98:	18 f0       	brcs	.+6      	; 0x3aa0 <STEPPER_set_accel+0x24>
    3a9a:	42 30       	cpi	r20, 0x02	; 2
    3a9c:	71 f4       	brne	.+28     	; 0x3aba <STEPPER_set_accel+0x3e>
    3a9e:	05 c0       	rjmp	.+10     	; 0x3aaa <STEPPER_set_accel+0x2e>
    3aa0:	90 93 47 07 	sts	0x0747, r25
    3aa4:	80 93 46 07 	sts	0x0746, r24
    3aa8:	08 c0       	rjmp	.+16     	; 0x3aba <STEPPER_set_accel+0x3e>
    3aaa:	90 93 47 07 	sts	0x0747, r25
    3aae:	80 93 46 07 	sts	0x0746, r24
    3ab2:	90 93 49 07 	sts	0x0749, r25
    3ab6:	80 93 48 07 	sts	0x0748, r24
    3aba:	10 92 72 07 	sts	0x0772, r1
    3abe:	08 95       	ret

00003ac0 <STEPPER_set_dir>:
    3ac0:	98 2f       	mov	r25, r24
    3ac2:	81 e0       	ldi	r24, 0x01	; 1
    3ac4:	80 93 72 07 	sts	0x0772, r24
    3ac8:	91 30       	cpi	r25, 0x01	; 1
    3aca:	51 f0       	breq	.+20     	; 0x3ae0 <STEPPER_set_dir+0x20>
    3acc:	91 30       	cpi	r25, 0x01	; 1
    3ace:	18 f0       	brcs	.+6      	; 0x3ad6 <STEPPER_set_dir+0x16>
    3ad0:	92 30       	cpi	r25, 0x02	; 2
    3ad2:	41 f4       	brne	.+16     	; 0x3ae4 <STEPPER_set_dir+0x24>
    3ad4:	03 c0       	rjmp	.+6      	; 0x3adc <STEPPER_set_dir+0x1c>
    3ad6:	60 93 5f 07 	sts	0x075F, r22
    3ada:	04 c0       	rjmp	.+8      	; 0x3ae4 <STEPPER_set_dir+0x24>
    3adc:	60 93 5f 07 	sts	0x075F, r22
    3ae0:	60 93 60 07 	sts	0x0760, r22
    3ae4:	10 92 72 07 	sts	0x0772, r1
    3ae8:	08 95       	ret

00003aea <STEPPER_set_mode>:
    3aea:	98 2f       	mov	r25, r24
    3aec:	81 e0       	ldi	r24, 0x01	; 1
    3aee:	80 93 72 07 	sts	0x0772, r24
    3af2:	91 30       	cpi	r25, 0x01	; 1
    3af4:	51 f0       	breq	.+20     	; 0x3b0a <STEPPER_set_mode+0x20>
    3af6:	91 30       	cpi	r25, 0x01	; 1
    3af8:	18 f0       	brcs	.+6      	; 0x3b00 <STEPPER_set_mode+0x16>
    3afa:	92 30       	cpi	r25, 0x02	; 2
    3afc:	41 f4       	brne	.+16     	; 0x3b0e <STEPPER_set_mode+0x24>
    3afe:	03 c0       	rjmp	.+6      	; 0x3b06 <STEPPER_set_mode+0x1c>
    3b00:	60 93 3c 07 	sts	0x073C, r22
    3b04:	04 c0       	rjmp	.+8      	; 0x3b0e <STEPPER_set_mode+0x24>
    3b06:	60 93 3c 07 	sts	0x073C, r22
    3b0a:	60 93 3d 07 	sts	0x073D, r22
    3b0e:	10 92 72 07 	sts	0x0772, r1
    3b12:	08 95       	ret

00003b14 <STEPPER_set_speed>:
    3b14:	48 2f       	mov	r20, r24
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	80 93 72 07 	sts	0x0772, r24
    3b1c:	cb 01       	movw	r24, r22
    3b1e:	21 e0       	ldi	r18, 0x01	; 1
    3b20:	61 39       	cpi	r22, 0x91	; 145
    3b22:	72 07       	cpc	r23, r18
    3b24:	10 f0       	brcs	.+4      	; 0x3b2a <STEPPER_set_speed+0x16>
    3b26:	80 e9       	ldi	r24, 0x90	; 144
    3b28:	91 e0       	ldi	r25, 0x01	; 1
    3b2a:	41 30       	cpi	r20, 0x01	; 1
    3b2c:	71 f0       	breq	.+28     	; 0x3b4a <STEPPER_set_speed+0x36>
    3b2e:	41 30       	cpi	r20, 0x01	; 1
    3b30:	18 f0       	brcs	.+6      	; 0x3b38 <STEPPER_set_speed+0x24>
    3b32:	42 30       	cpi	r20, 0x02	; 2
    3b34:	71 f4       	brne	.+28     	; 0x3b52 <STEPPER_set_speed+0x3e>
    3b36:	05 c0       	rjmp	.+10     	; 0x3b42 <STEPPER_set_speed+0x2e>
    3b38:	90 93 3f 07 	sts	0x073F, r25
    3b3c:	80 93 3e 07 	sts	0x073E, r24
    3b40:	08 c0       	rjmp	.+16     	; 0x3b52 <STEPPER_set_speed+0x3e>
    3b42:	90 93 3f 07 	sts	0x073F, r25
    3b46:	80 93 3e 07 	sts	0x073E, r24
    3b4a:	90 93 41 07 	sts	0x0741, r25
    3b4e:	80 93 40 07 	sts	0x0740, r24
    3b52:	10 92 72 07 	sts	0x0772, r1
    3b56:	08 95       	ret

00003b58 <STEPPER_step>:
    3b58:	8f 92       	push	r8
    3b5a:	9f 92       	push	r9
    3b5c:	af 92       	push	r10
    3b5e:	bf 92       	push	r11
    3b60:	cf 92       	push	r12
    3b62:	df 92       	push	r13
    3b64:	ef 92       	push	r14
    3b66:	ff 92       	push	r15
    3b68:	0f 93       	push	r16
    3b6a:	1f 93       	push	r17
    3b6c:	cf 93       	push	r28
    3b6e:	df 93       	push	r29
    3b70:	18 2f       	mov	r17, r24
    3b72:	f6 2e       	mov	r15, r22
    3b74:	5a 01       	movw	r10, r20
    3b76:	49 01       	movw	r8, r18
    3b78:	e6 01       	movw	r28, r12
    3b7a:	61 e0       	ldi	r22, 0x01	; 1
    3b7c:	0e 94 75 1d 	call	0x3aea	; 0x3aea <STEPPER_set_mode>
    3b80:	81 2f       	mov	r24, r17
    3b82:	b5 01       	movw	r22, r10
    3b84:	a4 01       	movw	r20, r8
    3b86:	0e 94 79 26 	call	0x4cf2	; 0x4cf2 <STEPPER_setup_decels>
    3b8a:	81 2f       	mov	r24, r17
    3b8c:	6f 2d       	mov	r22, r15
    3b8e:	0e 94 60 1d 	call	0x3ac0	; 0x3ac0 <STEPPER_set_dir>
    3b92:	81 2f       	mov	r24, r17
    3b94:	60 2f       	mov	r22, r16
    3b96:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <STEPPER_set_stop_mode>
    3b9a:	81 2f       	mov	r24, r17
    3b9c:	b5 01       	movw	r22, r10
    3b9e:	0e 94 49 26 	call	0x4c92	; 0x4c92 <STEPPER_set_steps>
    3ba2:	c1 14       	cp	r12, r1
    3ba4:	d1 04       	cpc	r13, r1
    3ba6:	99 f0       	breq	.+38     	; 0x3bce <STEPPER_step+0x76>
    3ba8:	11 30       	cpi	r17, 0x01	; 1
    3baa:	49 f0       	breq	.+18     	; 0x3bbe <STEPPER_step+0x66>
    3bac:	11 30       	cpi	r17, 0x01	; 1
    3bae:	18 f0       	brcs	.+6      	; 0x3bb6 <STEPPER_step+0x5e>
    3bb0:	12 30       	cpi	r17, 0x02	; 2
    3bb2:	69 f4       	brne	.+26     	; 0x3bce <STEPPER_step+0x76>
    3bb4:	06 c0       	rjmp	.+12     	; 0x3bc2 <STEPPER_step+0x6a>
    3bb6:	18 82       	st	Y, r1
    3bb8:	10 92 6e 07 	sts	0x076E, r1
    3bbc:	08 c0       	rjmp	.+16     	; 0x3bce <STEPPER_step+0x76>
    3bbe:	19 82       	std	Y+1, r1	; 0x01
    3bc0:	04 c0       	rjmp	.+8      	; 0x3bca <STEPPER_step+0x72>
    3bc2:	18 82       	st	Y, r1
    3bc4:	19 82       	std	Y+1, r1	; 0x01
    3bc6:	10 92 6e 07 	sts	0x076E, r1
    3bca:	10 92 6f 07 	sts	0x076F, r1
    3bce:	d0 93 71 07 	sts	0x0771, r29
    3bd2:	c0 93 70 07 	sts	0x0770, r28
    3bd6:	ee 20       	and	r14, r14
    3bd8:	b9 f5       	brne	.+110    	; 0x3c48 <STEPPER_step+0xf0>
    3bda:	80 e0       	ldi	r24, 0x00	; 0
    3bdc:	94 e0       	ldi	r25, 0x04	; 4
    3bde:	90 93 71 07 	sts	0x0771, r25
    3be2:	80 93 70 07 	sts	0x0770, r24
    3be6:	81 2f       	mov	r24, r17
    3be8:	b4 01       	movw	r22, r8
    3bea:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <STEPPER_set_speed>
    3bee:	81 2f       	mov	r24, r17
    3bf0:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <STEPPER_go>
    3bf4:	11 30       	cpi	r17, 0x01	; 1
    3bf6:	71 f0       	breq	.+28     	; 0x3c14 <STEPPER_step+0xbc>
    3bf8:	11 30       	cpi	r17, 0x01	; 1
    3bfa:	18 f0       	brcs	.+6      	; 0x3c02 <STEPPER_step+0xaa>
    3bfc:	12 30       	cpi	r17, 0x02	; 2
    3bfe:	59 f5       	brne	.+86     	; 0x3c56 <STEPPER_step+0xfe>
    3c00:	12 c0       	rjmp	.+36     	; 0x3c26 <STEPPER_step+0xce>
    3c02:	10 92 00 04 	sts	0x0400, r1
    3c06:	10 92 6e 07 	sts	0x076E, r1
    3c0a:	80 91 00 04 	lds	r24, 0x0400
    3c0e:	88 23       	and	r24, r24
    3c10:	e1 f3       	breq	.-8      	; 0x3c0a <STEPPER_step+0xb2>
    3c12:	21 c0       	rjmp	.+66     	; 0x3c56 <STEPPER_step+0xfe>
    3c14:	10 92 01 04 	sts	0x0401, r1
    3c18:	10 92 6f 07 	sts	0x076F, r1
    3c1c:	80 91 01 04 	lds	r24, 0x0401
    3c20:	88 23       	and	r24, r24
    3c22:	e1 f3       	breq	.-8      	; 0x3c1c <STEPPER_step+0xc4>
    3c24:	18 c0       	rjmp	.+48     	; 0x3c56 <STEPPER_step+0xfe>
    3c26:	10 92 00 04 	sts	0x0400, r1
    3c2a:	10 92 01 04 	sts	0x0401, r1
    3c2e:	10 92 6e 07 	sts	0x076E, r1
    3c32:	10 92 6f 07 	sts	0x076F, r1
    3c36:	80 91 00 04 	lds	r24, 0x0400
    3c3a:	88 23       	and	r24, r24
    3c3c:	e1 f3       	breq	.-8      	; 0x3c36 <STEPPER_step+0xde>
    3c3e:	80 91 01 04 	lds	r24, 0x0401
    3c42:	88 23       	and	r24, r24
    3c44:	c1 f3       	breq	.-16     	; 0x3c36 <STEPPER_step+0xde>
    3c46:	07 c0       	rjmp	.+14     	; 0x3c56 <STEPPER_step+0xfe>
    3c48:	81 2f       	mov	r24, r17
    3c4a:	b4 01       	movw	r22, r8
    3c4c:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <STEPPER_set_speed>
    3c50:	81 2f       	mov	r24, r17
    3c52:	0e 94 2a 26 	call	0x4c54	; 0x4c54 <STEPPER_go>
    3c56:	df 91       	pop	r29
    3c58:	cf 91       	pop	r28
    3c5a:	1f 91       	pop	r17
    3c5c:	0f 91       	pop	r16
    3c5e:	ff 90       	pop	r15
    3c60:	ef 90       	pop	r14
    3c62:	df 90       	pop	r13
    3c64:	cf 90       	pop	r12
    3c66:	bf 90       	pop	r11
    3c68:	af 90       	pop	r10
    3c6a:	9f 90       	pop	r9
    3c6c:	8f 90       	pop	r8
    3c6e:	08 95       	ret

00003c70 <STEPPER_stop>:
    3c70:	0f 93       	push	r16
    3c72:	1f 93       	push	r17
    3c74:	18 2f       	mov	r17, r24
    3c76:	06 2f       	mov	r16, r22
    3c78:	66 23       	and	r22, r22
    3c7a:	49 f4       	brne	.+18     	; 0x3c8e <STEPPER_stop+0x1e>
    3c7c:	60 e0       	ldi	r22, 0x00	; 0
    3c7e:	70 e0       	ldi	r23, 0x00	; 0
    3c80:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <STEPPER_set_speed>
    3c84:	81 2f       	mov	r24, r17
    3c86:	60 e0       	ldi	r22, 0x00	; 0
    3c88:	70 e0       	ldi	r23, 0x00	; 0
    3c8a:	0e 94 49 26 	call	0x4c92	; 0x4c92 <STEPPER_set_steps>
    3c8e:	81 e0       	ldi	r24, 0x01	; 1
    3c90:	80 93 72 07 	sts	0x0772, r24
    3c94:	11 30       	cpi	r17, 0x01	; 1
    3c96:	51 f0       	breq	.+20     	; 0x3cac <STEPPER_stop+0x3c>
    3c98:	11 30       	cpi	r17, 0x01	; 1
    3c9a:	18 f0       	brcs	.+6      	; 0x3ca2 <STEPPER_stop+0x32>
    3c9c:	12 30       	cpi	r17, 0x02	; 2
    3c9e:	41 f4       	brne	.+16     	; 0x3cb0 <STEPPER_stop+0x40>
    3ca0:	03 c0       	rjmp	.+6      	; 0x3ca8 <STEPPER_stop+0x38>
    3ca2:	00 93 5a 07 	sts	0x075A, r16
    3ca6:	04 c0       	rjmp	.+8      	; 0x3cb0 <STEPPER_stop+0x40>
    3ca8:	00 93 5a 07 	sts	0x075A, r16
    3cac:	00 93 5b 07 	sts	0x075B, r16
    3cb0:	10 92 72 07 	sts	0x0772, r1
    3cb4:	1f 91       	pop	r17
    3cb6:	0f 91       	pop	r16
    3cb8:	08 95       	ret

00003cba <STEPPER_wait_and_then>:
    3cba:	cf 92       	push	r12
    3cbc:	df 92       	push	r13
    3cbe:	ef 92       	push	r14
    3cc0:	ff 92       	push	r15
    3cc2:	0f 93       	push	r16
    3cc4:	1f 93       	push	r17
    3cc6:	df 93       	push	r29
    3cc8:	cf 93       	push	r28
    3cca:	cd b7       	in	r28, 0x3d	; 61
    3ccc:	de b7       	in	r29, 0x3e	; 62
    3cce:	8b 85       	ldd	r24, Y+11	; 0x0b
    3cd0:	81 30       	cpi	r24, 0x01	; 1
    3cd2:	61 f0       	breq	.+24     	; 0x3cec <STEPPER_wait_and_then+0x32>
    3cd4:	81 30       	cpi	r24, 0x01	; 1
    3cd6:	18 f0       	brcs	.+6      	; 0x3cde <STEPPER_wait_and_then+0x24>
    3cd8:	82 30       	cpi	r24, 0x02	; 2
    3cda:	a1 f5       	brne	.+104    	; 0x3d44 <STEPPER_wait_and_then+0x8a>
    3cdc:	11 c0       	rjmp	.+34     	; 0x3d00 <STEPPER_wait_and_then+0x46>
    3cde:	ec 85       	ldd	r30, Y+12	; 0x0c
    3ce0:	fd 85       	ldd	r31, Y+13	; 0x0d
    3ce2:	80 91 73 07 	lds	r24, 0x0773
    3ce6:	88 23       	and	r24, r24
    3ce8:	e1 f3       	breq	.-8      	; 0x3ce2 <STEPPER_wait_and_then+0x28>
    3cea:	06 c0       	rjmp	.+12     	; 0x3cf8 <STEPPER_wait_and_then+0x3e>
    3cec:	ec 85       	ldd	r30, Y+12	; 0x0c
    3cee:	fd 85       	ldd	r31, Y+13	; 0x0d
    3cf0:	80 91 74 07 	lds	r24, 0x0774
    3cf4:	88 23       	and	r24, r24
    3cf6:	e1 f3       	breq	.-8      	; 0x3cf0 <STEPPER_wait_and_then+0x36>
    3cf8:	30 97       	sbiw	r30, 0x00	; 0
    3cfa:	21 f1       	breq	.+72     	; 0x3d44 <STEPPER_wait_and_then+0x8a>
    3cfc:	09 95       	icall
    3cfe:	22 c0       	rjmp	.+68     	; 0x3d44 <STEPPER_wait_and_then+0x8a>
    3d00:	cc 84       	ldd	r12, Y+12	; 0x0c
    3d02:	dd 84       	ldd	r13, Y+13	; 0x0d
    3d04:	ee 84       	ldd	r14, Y+14	; 0x0e
    3d06:	ff 84       	ldd	r15, Y+15	; 0x0f
    3d08:	00 e0       	ldi	r16, 0x00	; 0
    3d0a:	10 e0       	ldi	r17, 0x00	; 0
    3d0c:	00 23       	and	r16, r16
    3d0e:	51 f4       	brne	.+20     	; 0x3d24 <STEPPER_wait_and_then+0x6a>
    3d10:	80 91 73 07 	lds	r24, 0x0773
    3d14:	88 23       	and	r24, r24
    3d16:	31 f0       	breq	.+12     	; 0x3d24 <STEPPER_wait_and_then+0x6a>
    3d18:	c1 14       	cp	r12, r1
    3d1a:	d1 04       	cpc	r13, r1
    3d1c:	11 f0       	breq	.+4      	; 0x3d22 <STEPPER_wait_and_then+0x68>
    3d1e:	f6 01       	movw	r30, r12
    3d20:	09 95       	icall
    3d22:	01 e0       	ldi	r16, 0x01	; 1
    3d24:	11 23       	and	r17, r17
    3d26:	51 f4       	brne	.+20     	; 0x3d3c <STEPPER_wait_and_then+0x82>
    3d28:	80 91 74 07 	lds	r24, 0x0774
    3d2c:	88 23       	and	r24, r24
    3d2e:	31 f0       	breq	.+12     	; 0x3d3c <STEPPER_wait_and_then+0x82>
    3d30:	e1 14       	cp	r14, r1
    3d32:	f1 04       	cpc	r15, r1
    3d34:	11 f0       	breq	.+4      	; 0x3d3a <STEPPER_wait_and_then+0x80>
    3d36:	f7 01       	movw	r30, r14
    3d38:	09 95       	icall
    3d3a:	11 e0       	ldi	r17, 0x01	; 1
    3d3c:	00 23       	and	r16, r16
    3d3e:	31 f3       	breq	.-52     	; 0x3d0c <STEPPER_wait_and_then+0x52>
    3d40:	11 23       	and	r17, r17
    3d42:	21 f3       	breq	.-56     	; 0x3d0c <STEPPER_wait_and_then+0x52>
    3d44:	cf 91       	pop	r28
    3d46:	df 91       	pop	r29
    3d48:	1f 91       	pop	r17
    3d4a:	0f 91       	pop	r16
    3d4c:	ff 90       	pop	r15
    3d4e:	ef 90       	pop	r14
    3d50:	df 90       	pop	r13
    3d52:	cf 90       	pop	r12
    3d54:	08 95       	ret

00003d56 <SYS_get_state>:
    3d56:	e8 2f       	mov	r30, r24
    3d58:	f0 e0       	ldi	r31, 0x00	; 0
    3d5a:	e3 31       	cpi	r30, 0x13	; 19
    3d5c:	f1 05       	cpc	r31, r1
    3d5e:	40 f4       	brcc	.+16     	; 0x3d70 <SYS_get_state+0x1a>
    3d60:	e2 5c       	subi	r30, 0xC2	; 194
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	ee 0f       	add	r30, r30
    3d66:	ff 1f       	adc	r31, r31
    3d68:	05 90       	lpm	r0, Z+
    3d6a:	f4 91       	lpm	r31, Z+
    3d6c:	e0 2d       	mov	r30, r0
    3d6e:	09 94       	ijmp
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	08 95       	ret
    3d74:	80 91 75 07 	lds	r24, 0x0775
    3d78:	08 95       	ret
    3d7a:	80 91 76 07 	lds	r24, 0x0776
    3d7e:	08 95       	ret
    3d80:	80 91 77 07 	lds	r24, 0x0777
    3d84:	08 95       	ret
    3d86:	80 91 78 07 	lds	r24, 0x0778
    3d8a:	08 95       	ret
    3d8c:	80 91 79 07 	lds	r24, 0x0779
    3d90:	08 95       	ret
    3d92:	80 91 7b 07 	lds	r24, 0x077B
    3d96:	08 95       	ret
    3d98:	80 91 7a 07 	lds	r24, 0x077A
    3d9c:	08 95       	ret
    3d9e:	80 91 7c 07 	lds	r24, 0x077C
    3da2:	08 95       	ret
    3da4:	80 91 7d 07 	lds	r24, 0x077D
    3da8:	08 95       	ret
    3daa:	80 91 7e 07 	lds	r24, 0x077E
    3dae:	08 95       	ret
    3db0:	80 91 7f 07 	lds	r24, 0x077F
    3db4:	08 95       	ret
    3db6:	80 91 80 07 	lds	r24, 0x0780
    3dba:	08 95       	ret
    3dbc:	80 91 81 07 	lds	r24, 0x0781
    3dc0:	08 95       	ret
    3dc2:	80 91 82 07 	lds	r24, 0x0782
    3dc6:	08 95       	ret
    3dc8:	80 91 83 07 	lds	r24, 0x0783
    3dcc:	08 95       	ret
    3dce:	80 91 84 07 	lds	r24, 0x0784
    3dd2:	08 95       	ret
    3dd4:	80 91 85 07 	lds	r24, 0x0785
    3dd8:	08 95       	ret
    3dda:	80 91 86 07 	lds	r24, 0x0786
    3dde:	08 95       	ret
    3de0:	80 91 87 07 	lds	r24, 0x0787
    3de4:	08 95       	ret

00003de6 <SYS_set_state>:
    3de6:	e8 2f       	mov	r30, r24
    3de8:	f0 e0       	ldi	r31, 0x00	; 0
    3dea:	e3 31       	cpi	r30, 0x13	; 19
    3dec:	f1 05       	cpc	r31, r1
    3dee:	08 f0       	brcs	.+2      	; 0x3df2 <SYS_set_state+0xc>
    3df0:	40 c0       	rjmp	.+128    	; 0x3e72 <SYS_set_state+0x8c>
    3df2:	ef 5a       	subi	r30, 0xAF	; 175
    3df4:	ff 4f       	sbci	r31, 0xFF	; 255
    3df6:	ee 0f       	add	r30, r30
    3df8:	ff 1f       	adc	r31, r31
    3dfa:	05 90       	lpm	r0, Z+
    3dfc:	f4 91       	lpm	r31, Z+
    3dfe:	e0 2d       	mov	r30, r0
    3e00:	09 94       	ijmp
    3e02:	60 93 75 07 	sts	0x0775, r22
    3e06:	08 95       	ret
    3e08:	60 93 76 07 	sts	0x0776, r22
    3e0c:	08 95       	ret
    3e0e:	60 93 77 07 	sts	0x0777, r22
    3e12:	08 95       	ret
    3e14:	60 93 78 07 	sts	0x0778, r22
    3e18:	08 95       	ret
    3e1a:	60 93 79 07 	sts	0x0779, r22
    3e1e:	08 95       	ret
    3e20:	60 93 7b 07 	sts	0x077B, r22
    3e24:	08 95       	ret
    3e26:	60 93 7a 07 	sts	0x077A, r22
    3e2a:	08 95       	ret
    3e2c:	60 93 7c 07 	sts	0x077C, r22
    3e30:	08 95       	ret
    3e32:	60 93 7d 07 	sts	0x077D, r22
    3e36:	08 95       	ret
    3e38:	60 93 7e 07 	sts	0x077E, r22
    3e3c:	08 95       	ret
    3e3e:	60 93 7f 07 	sts	0x077F, r22
    3e42:	08 95       	ret
    3e44:	60 93 80 07 	sts	0x0780, r22
    3e48:	08 95       	ret
    3e4a:	60 93 81 07 	sts	0x0781, r22
    3e4e:	08 95       	ret
    3e50:	60 93 82 07 	sts	0x0782, r22
    3e54:	08 95       	ret
    3e56:	60 93 83 07 	sts	0x0783, r22
    3e5a:	08 95       	ret
    3e5c:	60 93 84 07 	sts	0x0784, r22
    3e60:	08 95       	ret
    3e62:	60 93 85 07 	sts	0x0785, r22
    3e66:	08 95       	ret
    3e68:	60 93 86 07 	sts	0x0786, r22
    3e6c:	08 95       	ret
    3e6e:	60 93 85 07 	sts	0x0785, r22
    3e72:	08 95       	ret

00003e74 <ATTINY_get_sensors>:
    3e74:	0f 93       	push	r16
    3e76:	1f 93       	push	r17
    3e78:	81 e0       	ldi	r24, 0x01	; 1
    3e7a:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    3e7e:	81 30       	cpi	r24, 0x01	; 1
    3e80:	11 f0       	breq	.+4      	; 0x3e86 <ATTINY_get_sensors+0x12>
    3e82:	00 e0       	ldi	r16, 0x00	; 0
    3e84:	24 c0       	rjmp	.+72     	; 0x3ece <ATTINY_get_sensors+0x5a>
    3e86:	87 e0       	ldi	r24, 0x07	; 7
    3e88:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <SPI_set_slave_addr>
    3e8c:	82 e0       	ldi	r24, 0x02	; 2
    3e8e:	6a e0       	ldi	r22, 0x0A	; 10
    3e90:	0e 94 b4 1a 	call	0x3568	; 0x3568 <SPI_transmit>
    3e94:	82 e0       	ldi	r24, 0x02	; 2
    3e96:	62 eb       	ldi	r22, 0xB2	; 178
    3e98:	0e 94 b4 1a 	call	0x3568	; 0x3568 <SPI_transmit>
    3e9c:	18 ec       	ldi	r17, 0xC8	; 200
    3e9e:	81 2f       	mov	r24, r17
    3ea0:	8a 95       	dec	r24
    3ea2:	f1 f7       	brne	.-4      	; 0x3ea0 <ATTINY_get_sensors+0x2c>
    3ea4:	82 e0       	ldi	r24, 0x02	; 2
    3ea6:	60 e0       	ldi	r22, 0x00	; 0
    3ea8:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <SPI_receive>
    3eac:	08 2f       	mov	r16, r24
    3eae:	81 2f       	mov	r24, r17
    3eb0:	8a 95       	dec	r24
    3eb2:	f1 f7       	brne	.-4      	; 0x3eb0 <ATTINY_get_sensors+0x3c>
    3eb4:	82 e0       	ldi	r24, 0x02	; 2
    3eb6:	60 e0       	ldi	r22, 0x00	; 0
    3eb8:	0e 94 15 25 	call	0x4a2a	; 0x4a2a <SPI_receive>
    3ebc:	1a 95       	dec	r17
    3ebe:	f1 f7       	brne	.-4      	; 0x3ebc <ATTINY_get_sensors+0x48>
    3ec0:	87 e0       	ldi	r24, 0x07	; 7
    3ec2:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <SPI_set_slave_addr>
    3ec6:	88 e8       	ldi	r24, 0x88	; 136
    3ec8:	93 e1       	ldi	r25, 0x13	; 19
    3eca:	01 97       	sbiw	r24, 0x01	; 1
    3ecc:	f1 f7       	brne	.-4      	; 0x3eca <ATTINY_get_sensors+0x56>
    3ece:	80 2f       	mov	r24, r16
    3ed0:	1f 91       	pop	r17
    3ed2:	0f 91       	pop	r16
    3ed4:	08 95       	ret

00003ed6 <ATTINY_get_SW_state>:
    3ed6:	1f 93       	push	r17
    3ed8:	cf 93       	push	r28
    3eda:	df 93       	push	r29
    3edc:	18 2f       	mov	r17, r24
    3ede:	80 91 03 04 	lds	r24, 0x0403
    3ee2:	88 23       	and	r24, r24
    3ee4:	41 f0       	breq	.+16     	; 0x3ef6 <ATTINY_get_SW_state+0x20>
    3ee6:	80 91 0d 04 	lds	r24, 0x040D
    3eea:	88 23       	and	r24, r24
    3eec:	99 f0       	breq	.+38     	; 0x3f14 <ATTINY_get_SW_state+0x3e>
    3eee:	10 92 03 04 	sts	0x0403, r1
    3ef2:	10 92 0d 04 	sts	0x040D, r1
    3ef6:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <ATTINY_get_sensors>
    3efa:	80 93 02 04 	sts	0x0402, r24
    3efe:	87 e0       	ldi	r24, 0x07	; 7
    3f00:	94 e0       	ldi	r25, 0x04	; 4
    3f02:	61 e0       	ldi	r22, 0x01	; 1
    3f04:	40 e0       	ldi	r20, 0x00	; 0
    3f06:	22 e3       	ldi	r18, 0x32	; 50
    3f08:	30 e0       	ldi	r19, 0x00	; 0
    3f0a:	0e 94 29 20 	call	0x4052	; 0x4052 <TMRSRVC_new>
    3f0e:	81 e0       	ldi	r24, 0x01	; 1
    3f10:	80 93 03 04 	sts	0x0403, r24
    3f14:	90 91 02 04 	lds	r25, 0x0402
    3f18:	a1 2f       	mov	r26, r17
    3f1a:	b0 e0       	ldi	r27, 0x00	; 0
    3f1c:	ed 01       	movw	r28, r26
    3f1e:	c7 55       	subi	r28, 0x57	; 87
    3f20:	dc 4f       	sbci	r29, 0xFC	; 252
    3f22:	88 81       	ld	r24, Y
    3f24:	88 23       	and	r24, r24
    3f26:	69 f0       	breq	.+26     	; 0x3f42 <ATTINY_get_SW_state+0x6c>
    3f28:	fd 01       	movw	r30, r26
    3f2a:	e4 55       	subi	r30, 0x54	; 84
    3f2c:	fc 4f       	sbci	r31, 0xFC	; 252
    3f2e:	80 81       	ld	r24, Z
    3f30:	98 23       	and	r25, r24
    3f32:	c1 f0       	breq	.+48     	; 0x3f64 <ATTINY_get_SW_state+0x8e>
    3f34:	fd 01       	movw	r30, r26
    3f36:	ec 5f       	subi	r30, 0xFC	; 252
    3f38:	fb 4f       	sbci	r31, 0xFB	; 251
    3f3a:	81 e0       	ldi	r24, 0x01	; 1
    3f3c:	80 83       	st	Z, r24
    3f3e:	18 82       	st	Y, r1
    3f40:	11 c0       	rjmp	.+34     	; 0x3f64 <ATTINY_get_SW_state+0x8e>
    3f42:	fd 01       	movw	r30, r26
    3f44:	ec 5f       	subi	r30, 0xFC	; 252
    3f46:	fb 4f       	sbci	r31, 0xFB	; 251
    3f48:	80 81       	ld	r24, Z
    3f4a:	81 11       	cpse	r24, r1
    3f4c:	10 82       	st	Z, r1
    3f4e:	fd 01       	movw	r30, r26
    3f50:	e4 55       	subi	r30, 0x54	; 84
    3f52:	fc 4f       	sbci	r31, 0xFC	; 252
    3f54:	80 81       	ld	r24, Z
    3f56:	98 23       	and	r25, r24
    3f58:	29 f4       	brne	.+10     	; 0x3f64 <ATTINY_get_SW_state+0x8e>
    3f5a:	fd 01       	movw	r30, r26
    3f5c:	e7 55       	subi	r30, 0x57	; 87
    3f5e:	fc 4f       	sbci	r31, 0xFC	; 252
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	80 83       	st	Z, r24
    3f64:	ac 5f       	subi	r26, 0xFC	; 252
    3f66:	bb 4f       	sbci	r27, 0xFB	; 251
    3f68:	8c 91       	ld	r24, X
    3f6a:	df 91       	pop	r29
    3f6c:	cf 91       	pop	r28
    3f6e:	1f 91       	pop	r17
    3f70:	08 95       	ret

00003f72 <ATTINY_open>:
    3f72:	82 e0       	ldi	r24, 0x02	; 2
    3f74:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    3f78:	88 23       	and	r24, r24
    3f7a:	19 f4       	brne	.+6      	; 0x3f82 <ATTINY_open+0x10>
    3f7c:	90 e0       	ldi	r25, 0x00	; 0
    3f7e:	82 e0       	ldi	r24, 0x02	; 2
    3f80:	08 95       	ret
    3f82:	10 92 a3 07 	sts	0x07A3, r1
    3f86:	10 92 a2 07 	sts	0x07A2, r1
    3f8a:	10 92 a5 07 	sts	0x07A5, r1
    3f8e:	10 92 a4 07 	sts	0x07A4, r1
    3f92:	10 92 a7 07 	sts	0x07A7, r1
    3f96:	10 92 a6 07 	sts	0x07A6, r1
    3f9a:	10 92 a9 07 	sts	0x07A9, r1
    3f9e:	10 92 a8 07 	sts	0x07A8, r1
    3fa2:	10 92 ab 07 	sts	0x07AB, r1
    3fa6:	10 92 aa 07 	sts	0x07AA, r1
    3faa:	80 e9       	ldi	r24, 0x90	; 144
    3fac:	91 e0       	ldi	r25, 0x01	; 1
    3fae:	90 93 8f 07 	sts	0x078F, r25
    3fb2:	80 93 8e 07 	sts	0x078E, r24
    3fb6:	90 93 91 07 	sts	0x0791, r25
    3fba:	80 93 90 07 	sts	0x0790, r24
    3fbe:	90 93 93 07 	sts	0x0793, r25
    3fc2:	80 93 92 07 	sts	0x0792, r24
    3fc6:	90 93 95 07 	sts	0x0795, r25
    3fca:	80 93 94 07 	sts	0x0794, r24
    3fce:	90 93 97 07 	sts	0x0797, r25
    3fd2:	80 93 96 07 	sts	0x0796, r24
    3fd6:	84 e3       	ldi	r24, 0x34	; 52
    3fd8:	98 e0       	ldi	r25, 0x08	; 8
    3fda:	90 93 99 07 	sts	0x0799, r25
    3fde:	80 93 98 07 	sts	0x0798, r24
    3fe2:	90 93 9b 07 	sts	0x079B, r25
    3fe6:	80 93 9a 07 	sts	0x079A, r24
    3fea:	90 93 9d 07 	sts	0x079D, r25
    3fee:	80 93 9c 07 	sts	0x079C, r24
    3ff2:	90 93 9f 07 	sts	0x079F, r25
    3ff6:	80 93 9e 07 	sts	0x079E, r24
    3ffa:	90 93 a1 07 	sts	0x07A1, r25
    3ffe:	80 93 a0 07 	sts	0x07A0, r24
    4002:	81 e0       	ldi	r24, 0x01	; 1
    4004:	61 e0       	ldi	r22, 0x01	; 1
    4006:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    400a:	91 e0       	ldi	r25, 0x01	; 1
    400c:	81 e0       	ldi	r24, 0x01	; 1
    400e:	08 95       	ret

00004010 <TMRSRVC_delay>:
    4010:	df 93       	push	r29
    4012:	cf 93       	push	r28
    4014:	cd b7       	in	r28, 0x3d	; 61
    4016:	de b7       	in	r29, 0x3e	; 62
    4018:	29 97       	sbiw	r28, 0x09	; 9
    401a:	0f b6       	in	r0, 0x3f	; 63
    401c:	f8 94       	cli
    401e:	de bf       	out	0x3e, r29	; 62
    4020:	0f be       	out	0x3f, r0	; 63
    4022:	cd bf       	out	0x3d, r28	; 61
    4024:	9c 01       	movw	r18, r24
    4026:	ce 01       	movw	r24, r28
    4028:	01 96       	adiw	r24, 0x01	; 1
    402a:	61 e0       	ldi	r22, 0x01	; 1
    402c:	40 e0       	ldi	r20, 0x00	; 0
    402e:	0e 94 29 20 	call	0x4052	; 0x4052 <TMRSRVC_new>
    4032:	98 2f       	mov	r25, r24
    4034:	88 23       	and	r24, r24
    4036:	19 f4       	brne	.+6      	; 0x403e <TMRSRVC_delay+0x2e>
    4038:	8f 81       	ldd	r24, Y+7	; 0x07
    403a:	88 23       	and	r24, r24
    403c:	e9 f3       	breq	.-6      	; 0x4038 <TMRSRVC_delay+0x28>
    403e:	89 2f       	mov	r24, r25
    4040:	29 96       	adiw	r28, 0x09	; 9
    4042:	0f b6       	in	r0, 0x3f	; 63
    4044:	f8 94       	cli
    4046:	de bf       	out	0x3e, r29	; 62
    4048:	0f be       	out	0x3f, r0	; 63
    404a:	cd bf       	out	0x3d, r28	; 61
    404c:	cf 91       	pop	r28
    404e:	df 91       	pop	r29
    4050:	08 95       	ret

00004052 <TMRSRVC_new>:
    4052:	ef 92       	push	r14
    4054:	ff 92       	push	r15
    4056:	0f 93       	push	r16
    4058:	1f 93       	push	r17
    405a:	cf 93       	push	r28
    405c:	df 93       	push	r29
    405e:	ec 01       	movw	r28, r24
    4060:	f6 2e       	mov	r15, r22
    4062:	e4 2e       	mov	r14, r20
    4064:	89 01       	movw	r16, r18
    4066:	88 e0       	ldi	r24, 0x08	; 8
    4068:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    406c:	81 30       	cpi	r24, 0x01	; 1
    406e:	11 f0       	breq	.+4      	; 0x4074 <TMRSRVC_new+0x22>
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	26 c0       	rjmp	.+76     	; 0x40c0 <TMRSRVC_new+0x6e>
    4074:	84 e0       	ldi	r24, 0x04	; 4
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	0e 94 c0 33 	call	0x6780	; 0x6780 <malloc>
    407c:	fc 01       	movw	r30, r24
    407e:	00 97       	sbiw	r24, 0x00	; 0
    4080:	11 f4       	brne	.+4      	; 0x4086 <TMRSRVC_new+0x34>
    4082:	82 e0       	ldi	r24, 0x02	; 2
    4084:	1d c0       	rjmp	.+58     	; 0x40c0 <TMRSRVC_new+0x6e>
    4086:	f9 82       	std	Y+1, r15	; 0x01
    4088:	f0 fc       	sbrc	r15, 0
    408a:	1e 82       	std	Y+6, r1	; 0x06
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	e8 16       	cp	r14, r24
    4090:	19 f4       	brne	.+6      	; 0x4098 <TMRSRVC_new+0x46>
    4092:	89 81       	ldd	r24, Y+1	; 0x01
    4094:	84 60       	ori	r24, 0x04	; 4
    4096:	89 83       	std	Y+1, r24	; 0x01
    4098:	89 81       	ldd	r24, Y+1	; 0x01
    409a:	88 60       	ori	r24, 0x08	; 8
    409c:	89 83       	std	Y+1, r24	; 0x01
    409e:	1b 83       	std	Y+3, r17	; 0x03
    40a0:	0a 83       	std	Y+2, r16	; 0x02
    40a2:	1d 83       	std	Y+5, r17	; 0x05
    40a4:	0c 83       	std	Y+4, r16	; 0x04
    40a6:	d1 83       	std	Z+1, r29	; 0x01
    40a8:	c0 83       	st	Z, r28
    40aa:	13 82       	std	Z+3, r1	; 0x03
    40ac:	12 82       	std	Z+2, r1	; 0x02
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	80 93 70 04 	sts	0x0470, r24
    40b4:	cf 01       	movw	r24, r30
    40b6:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <TMRSRVC_insert>
    40ba:	10 92 70 04 	sts	0x0470, r1
    40be:	80 e0       	ldi	r24, 0x00	; 0
    40c0:	df 91       	pop	r29
    40c2:	cf 91       	pop	r28
    40c4:	1f 91       	pop	r17
    40c6:	0f 91       	pop	r16
    40c8:	ff 90       	pop	r15
    40ca:	ef 90       	pop	r14
    40cc:	08 95       	ret

000040ce <I2C_MSTR_get>:
    40ce:	fc 01       	movw	r30, r24
    40d0:	80 91 af 07 	lds	r24, 0x07AF
    40d4:	81 30       	cpi	r24, 0x01	; 1
    40d6:	11 f0       	breq	.+4      	; 0x40dc <I2C_MSTR_get+0xe>
    40d8:	85 e0       	ldi	r24, 0x05	; 5
    40da:	08 95       	ret
    40dc:	80 91 b0 07 	lds	r24, 0x07B0
    40e0:	81 30       	cpi	r24, 0x01	; 1
    40e2:	11 f0       	breq	.+4      	; 0x40e8 <I2C_MSTR_get+0x1a>
    40e4:	8a e0       	ldi	r24, 0x0A	; 10
    40e6:	08 95       	ret
    40e8:	61 30       	cpi	r22, 0x01	; 1
    40ea:	11 f4       	brne	.+4      	; 0x40f0 <I2C_MSTR_get+0x22>
    40ec:	84 ec       	ldi	r24, 0xC4	; 196
    40ee:	01 c0       	rjmp	.+2      	; 0x40f2 <I2C_MSTR_get+0x24>
    40f0:	84 e8       	ldi	r24, 0x84	; 132
    40f2:	80 93 bc 00 	sts	0x00BC, r24
    40f6:	80 91 bc 00 	lds	r24, 0x00BC
    40fa:	87 ff       	sbrs	r24, 7
    40fc:	fc cf       	rjmp	.-8      	; 0x40f6 <I2C_MSTR_get+0x28>
    40fe:	61 30       	cpi	r22, 0x01	; 1
    4100:	31 f4       	brne	.+12     	; 0x410e <I2C_MSTR_get+0x40>
    4102:	80 91 b9 00 	lds	r24, 0x00B9
    4106:	88 7f       	andi	r24, 0xF8	; 248
    4108:	80 35       	cpi	r24, 0x50	; 80
    410a:	59 f4       	brne	.+22     	; 0x4122 <I2C_MSTR_get+0x54>
    410c:	05 c0       	rjmp	.+10     	; 0x4118 <I2C_MSTR_get+0x4a>
    410e:	80 91 b9 00 	lds	r24, 0x00B9
    4112:	88 7f       	andi	r24, 0xF8	; 248
    4114:	88 35       	cpi	r24, 0x58	; 88
    4116:	29 f4       	brne	.+10     	; 0x4122 <I2C_MSTR_get+0x54>
    4118:	80 91 bb 00 	lds	r24, 0x00BB
    411c:	80 83       	st	Z, r24
    411e:	80 e0       	ldi	r24, 0x00	; 0
    4120:	08 95       	ret
    4122:	82 e0       	ldi	r24, 0x02	; 2
    4124:	08 95       	ret

00004126 <I2C_MSTR_send>:
    4126:	98 2f       	mov	r25, r24
    4128:	80 91 af 07 	lds	r24, 0x07AF
    412c:	81 30       	cpi	r24, 0x01	; 1
    412e:	11 f0       	breq	.+4      	; 0x4134 <I2C_MSTR_send+0xe>
    4130:	85 e0       	ldi	r24, 0x05	; 5
    4132:	08 95       	ret
    4134:	80 91 b0 07 	lds	r24, 0x07B0
    4138:	81 30       	cpi	r24, 0x01	; 1
    413a:	11 f0       	breq	.+4      	; 0x4140 <I2C_MSTR_send+0x1a>
    413c:	8a e0       	ldi	r24, 0x0A	; 10
    413e:	08 95       	ret
    4140:	90 93 bb 00 	sts	0x00BB, r25
    4144:	84 e8       	ldi	r24, 0x84	; 132
    4146:	80 93 bc 00 	sts	0x00BC, r24
    414a:	80 91 bc 00 	lds	r24, 0x00BC
    414e:	87 ff       	sbrs	r24, 7
    4150:	fc cf       	rjmp	.-8      	; 0x414a <I2C_MSTR_send+0x24>
    4152:	80 91 b9 00 	lds	r24, 0x00B9
    4156:	90 e0       	ldi	r25, 0x00	; 0
    4158:	88 7f       	andi	r24, 0xF8	; 248
    415a:	90 70       	andi	r25, 0x00	; 0
    415c:	88 32       	cpi	r24, 0x28	; 40
    415e:	91 05       	cpc	r25, r1
    4160:	21 f0       	breq	.+8      	; 0x416a <I2C_MSTR_send+0x44>
    4162:	c0 97       	sbiw	r24, 0x30	; 48
    4164:	21 f4       	brne	.+8      	; 0x416e <I2C_MSTR_send+0x48>
    4166:	83 e0       	ldi	r24, 0x03	; 3
    4168:	08 95       	ret
    416a:	80 e0       	ldi	r24, 0x00	; 0
    416c:	08 95       	ret
    416e:	8c e0       	ldi	r24, 0x0C	; 12
    4170:	08 95       	ret

00004172 <I2C_MSTR_start>:
    4172:	98 2f       	mov	r25, r24
    4174:	20 91 af 07 	lds	r18, 0x07AF
    4178:	21 30       	cpi	r18, 0x01	; 1
    417a:	11 f0       	breq	.+4      	; 0x4180 <I2C_MSTR_start+0xe>
    417c:	85 e0       	ldi	r24, 0x05	; 5
    417e:	08 95       	ret
    4180:	80 91 b1 07 	lds	r24, 0x07B1
    4184:	81 30       	cpi	r24, 0x01	; 1
    4186:	11 f4       	brne	.+4      	; 0x418c <I2C_MSTR_start+0x1a>
    4188:	89 e0       	ldi	r24, 0x09	; 9
    418a:	08 95       	ret
    418c:	20 93 b0 07 	sts	0x07B0, r18
    4190:	84 ea       	ldi	r24, 0xA4	; 164
    4192:	80 93 bc 00 	sts	0x00BC, r24
    4196:	80 91 bc 00 	lds	r24, 0x00BC
    419a:	87 ff       	sbrs	r24, 7
    419c:	fc cf       	rjmp	.-8      	; 0x4196 <I2C_MSTR_start+0x24>
    419e:	80 91 b9 00 	lds	r24, 0x00B9
    41a2:	88 7f       	andi	r24, 0xF8	; 248
    41a4:	88 30       	cpi	r24, 0x08	; 8
    41a6:	39 f0       	breq	.+14     	; 0x41b6 <I2C_MSTR_start+0x44>
    41a8:	80 91 b9 00 	lds	r24, 0x00B9
    41ac:	88 7f       	andi	r24, 0xF8	; 248
    41ae:	80 31       	cpi	r24, 0x10	; 16
    41b0:	11 f0       	breq	.+4      	; 0x41b6 <I2C_MSTR_start+0x44>
    41b2:	81 e0       	ldi	r24, 0x01	; 1
    41b4:	08 95       	ret
    41b6:	61 30       	cpi	r22, 0x01	; 1
    41b8:	19 f4       	brne	.+6      	; 0x41c0 <I2C_MSTR_start+0x4e>
    41ba:	99 0f       	add	r25, r25
    41bc:	91 60       	ori	r25, 0x01	; 1
    41be:	03 c0       	rjmp	.+6      	; 0x41c6 <I2C_MSTR_start+0x54>
    41c0:	66 23       	and	r22, r22
    41c2:	19 f4       	brne	.+6      	; 0x41ca <I2C_MSTR_start+0x58>
    41c4:	99 0f       	add	r25, r25
    41c6:	90 93 bb 00 	sts	0x00BB, r25
    41ca:	84 e8       	ldi	r24, 0x84	; 132
    41cc:	80 93 bc 00 	sts	0x00BC, r24
    41d0:	80 91 bc 00 	lds	r24, 0x00BC
    41d4:	87 ff       	sbrs	r24, 7
    41d6:	fc cf       	rjmp	.-8      	; 0x41d0 <I2C_MSTR_start+0x5e>
    41d8:	61 30       	cpi	r22, 0x01	; 1
    41da:	31 f4       	brne	.+12     	; 0x41e8 <I2C_MSTR_start+0x76>
    41dc:	80 91 b9 00 	lds	r24, 0x00B9
    41e0:	88 7f       	andi	r24, 0xF8	; 248
    41e2:	80 34       	cpi	r24, 0x40	; 64
    41e4:	41 f4       	brne	.+16     	; 0x41f6 <I2C_MSTR_start+0x84>
    41e6:	09 c0       	rjmp	.+18     	; 0x41fa <I2C_MSTR_start+0x88>
    41e8:	66 23       	and	r22, r22
    41ea:	39 f4       	brne	.+14     	; 0x41fa <I2C_MSTR_start+0x88>
    41ec:	80 91 b9 00 	lds	r24, 0x00B9
    41f0:	88 7f       	andi	r24, 0xF8	; 248
    41f2:	88 31       	cpi	r24, 0x18	; 24
    41f4:	11 f0       	breq	.+4      	; 0x41fa <I2C_MSTR_start+0x88>
    41f6:	82 e0       	ldi	r24, 0x02	; 2
    41f8:	08 95       	ret
    41fa:	80 e0       	ldi	r24, 0x00	; 0
    41fc:	08 95       	ret

000041fe <I2C_MSTR_stop>:
    41fe:	80 91 b0 07 	lds	r24, 0x07B0
    4202:	81 30       	cpi	r24, 0x01	; 1
    4204:	11 f0       	breq	.+4      	; 0x420a <I2C_MSTR_stop+0xc>
    4206:	8a e0       	ldi	r24, 0x0A	; 10
    4208:	08 95       	ret
    420a:	80 91 b2 07 	lds	r24, 0x07B2
    420e:	81 30       	cpi	r24, 0x01	; 1
    4210:	29 f4       	brne	.+10     	; 0x421c <I2C_MSTR_stop+0x1e>
    4212:	85 e9       	ldi	r24, 0x95	; 149
    4214:	80 93 bc 00 	sts	0x00BC, r24
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	08 95       	ret
    421c:	84 e9       	ldi	r24, 0x94	; 148
    421e:	80 93 bc 00 	sts	0x00BC, r24
    4222:	80 e0       	ldi	r24, 0x00	; 0
    4224:	08 95       	ret

00004226 <I2C_open>:
    4226:	82 e1       	ldi	r24, 0x12	; 18
    4228:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    422c:	88 23       	and	r24, r24
    422e:	b1 f4       	brne	.+44     	; 0x425c <I2C_open+0x36>
    4230:	10 92 af 07 	sts	0x07AF, r1
    4234:	10 92 b0 07 	sts	0x07B0, r1
    4238:	10 92 b1 07 	sts	0x07B1, r1
    423c:	10 92 b2 07 	sts	0x07B2, r1
    4240:	10 92 b3 07 	sts	0x07B3, r1
    4244:	0e 94 75 27 	call	0x4eea	; 0x4eea <__I2C_init>
    4248:	87 e1       	ldi	r24, 0x17	; 23
    424a:	60 e0       	ldi	r22, 0x00	; 0
    424c:	0e 94 31 21 	call	0x4262	; 0x4262 <I2C_set_BRG>
    4250:	0e 94 6b 27 	call	0x4ed6	; 0x4ed6 <I2C_enable>
    4254:	82 e1       	ldi	r24, 0x12	; 18
    4256:	61 e0       	ldi	r22, 0x01	; 1
    4258:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    425c:	82 e1       	ldi	r24, 0x12	; 18
    425e:	90 e0       	ldi	r25, 0x00	; 0
    4260:	08 95       	ret

00004262 <I2C_set_BRG>:
    4262:	63 70       	andi	r22, 0x03	; 3
    4264:	60 93 b9 00 	sts	0x00B9, r22
    4268:	80 93 b8 00 	sts	0x00B8, r24
    426c:	81 e0       	ldi	r24, 0x01	; 1
    426e:	80 93 af 07 	sts	0x07AF, r24
    4272:	08 95       	ret

00004274 <__ADC_init>:
    4274:	8f e1       	ldi	r24, 0x1F	; 31
    4276:	80 93 7c 00 	sts	0x007C, r24
    427a:	ea e7       	ldi	r30, 0x7A	; 122
    427c:	f0 e0       	ldi	r31, 0x00	; 0
    427e:	87 e0       	ldi	r24, 0x07	; 7
    4280:	80 83       	st	Z, r24
    4282:	80 81       	ld	r24, Z
    4284:	80 68       	ori	r24, 0x80	; 128
    4286:	80 83       	st	Z, r24
    4288:	08 95       	ret

0000428a <CBOT_init>:
    428a:	0e 94 b6 26 	call	0x4d6c	; 0x4d6c <SYS_init>
    428e:	0e 94 77 24 	call	0x48ee	; 0x48ee <ATMEGA_open>
    4292:	0e 94 a7 23 	call	0x474e	; 0x474e <ISR_open>
    4296:	0e 94 42 27 	call	0x4e84	; 0x4e84 <TMRSRVC_open>
    429a:	0e 94 dc 24 	call	0x49b8	; 0x49b8 <SPI_open>
    429e:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <ATTINY_open>
    42a2:	78 94       	sei
    42a4:	08 95       	ret

000042a6 <CBOT_ISR_init>:
    42a6:	00 00       	nop
    42a8:	08 95       	ret

000042aa <__vector_16>:
    42aa:	1f 92       	push	r1
    42ac:	0f 92       	push	r0
    42ae:	0f b6       	in	r0, 0x3f	; 63
    42b0:	0f 92       	push	r0
    42b2:	11 24       	eor	r1, r1
    42b4:	2f 93       	push	r18
    42b6:	3f 93       	push	r19
    42b8:	4f 93       	push	r20
    42ba:	5f 93       	push	r21
    42bc:	6f 93       	push	r22
    42be:	7f 93       	push	r23
    42c0:	8f 93       	push	r24
    42c2:	9f 93       	push	r25
    42c4:	af 93       	push	r26
    42c6:	bf 93       	push	r27
    42c8:	ef 93       	push	r30
    42ca:	ff 93       	push	r31
    42cc:	e0 91 30 04 	lds	r30, 0x0430
    42d0:	f0 91 31 04 	lds	r31, 0x0431
    42d4:	30 97       	sbiw	r30, 0x00	; 0
    42d6:	09 f0       	breq	.+2      	; 0x42da <__vector_16+0x30>
    42d8:	09 95       	icall
    42da:	ff 91       	pop	r31
    42dc:	ef 91       	pop	r30
    42de:	bf 91       	pop	r27
    42e0:	af 91       	pop	r26
    42e2:	9f 91       	pop	r25
    42e4:	8f 91       	pop	r24
    42e6:	7f 91       	pop	r23
    42e8:	6f 91       	pop	r22
    42ea:	5f 91       	pop	r21
    42ec:	4f 91       	pop	r20
    42ee:	3f 91       	pop	r19
    42f0:	2f 91       	pop	r18
    42f2:	0f 90       	pop	r0
    42f4:	0f be       	out	0x3f, r0	; 63
    42f6:	0f 90       	pop	r0
    42f8:	1f 90       	pop	r1
    42fa:	18 95       	reti

000042fc <__vector_17>:
    42fc:	1f 92       	push	r1
    42fe:	0f 92       	push	r0
    4300:	0f b6       	in	r0, 0x3f	; 63
    4302:	0f 92       	push	r0
    4304:	11 24       	eor	r1, r1
    4306:	2f 93       	push	r18
    4308:	3f 93       	push	r19
    430a:	4f 93       	push	r20
    430c:	5f 93       	push	r21
    430e:	6f 93       	push	r22
    4310:	7f 93       	push	r23
    4312:	8f 93       	push	r24
    4314:	9f 93       	push	r25
    4316:	af 93       	push	r26
    4318:	bf 93       	push	r27
    431a:	ef 93       	push	r30
    431c:	ff 93       	push	r31
    431e:	e0 91 32 04 	lds	r30, 0x0432
    4322:	f0 91 33 04 	lds	r31, 0x0433
    4326:	30 97       	sbiw	r30, 0x00	; 0
    4328:	09 f0       	breq	.+2      	; 0x432c <__vector_17+0x30>
    432a:	09 95       	icall
    432c:	ff 91       	pop	r31
    432e:	ef 91       	pop	r30
    4330:	bf 91       	pop	r27
    4332:	af 91       	pop	r26
    4334:	9f 91       	pop	r25
    4336:	8f 91       	pop	r24
    4338:	7f 91       	pop	r23
    433a:	6f 91       	pop	r22
    433c:	5f 91       	pop	r21
    433e:	4f 91       	pop	r20
    4340:	3f 91       	pop	r19
    4342:	2f 91       	pop	r18
    4344:	0f 90       	pop	r0
    4346:	0f be       	out	0x3f, r0	; 63
    4348:	0f 90       	pop	r0
    434a:	1f 90       	pop	r1
    434c:	18 95       	reti

0000434e <__vector_18>:
    434e:	1f 92       	push	r1
    4350:	0f 92       	push	r0
    4352:	0f b6       	in	r0, 0x3f	; 63
    4354:	0f 92       	push	r0
    4356:	11 24       	eor	r1, r1
    4358:	2f 93       	push	r18
    435a:	3f 93       	push	r19
    435c:	4f 93       	push	r20
    435e:	5f 93       	push	r21
    4360:	6f 93       	push	r22
    4362:	7f 93       	push	r23
    4364:	8f 93       	push	r24
    4366:	9f 93       	push	r25
    4368:	af 93       	push	r26
    436a:	bf 93       	push	r27
    436c:	ef 93       	push	r30
    436e:	ff 93       	push	r31
    4370:	e0 91 34 04 	lds	r30, 0x0434
    4374:	f0 91 35 04 	lds	r31, 0x0435
    4378:	30 97       	sbiw	r30, 0x00	; 0
    437a:	09 f0       	breq	.+2      	; 0x437e <__vector_18+0x30>
    437c:	09 95       	icall
    437e:	ff 91       	pop	r31
    4380:	ef 91       	pop	r30
    4382:	bf 91       	pop	r27
    4384:	af 91       	pop	r26
    4386:	9f 91       	pop	r25
    4388:	8f 91       	pop	r24
    438a:	7f 91       	pop	r23
    438c:	6f 91       	pop	r22
    438e:	5f 91       	pop	r21
    4390:	4f 91       	pop	r20
    4392:	3f 91       	pop	r19
    4394:	2f 91       	pop	r18
    4396:	0f 90       	pop	r0
    4398:	0f be       	out	0x3f, r0	; 63
    439a:	0f 90       	pop	r0
    439c:	1f 90       	pop	r1
    439e:	18 95       	reti

000043a0 <__vector_9>:
    43a0:	1f 92       	push	r1
    43a2:	0f 92       	push	r0
    43a4:	0f b6       	in	r0, 0x3f	; 63
    43a6:	0f 92       	push	r0
    43a8:	11 24       	eor	r1, r1
    43aa:	2f 93       	push	r18
    43ac:	3f 93       	push	r19
    43ae:	4f 93       	push	r20
    43b0:	5f 93       	push	r21
    43b2:	6f 93       	push	r22
    43b4:	7f 93       	push	r23
    43b6:	8f 93       	push	r24
    43b8:	9f 93       	push	r25
    43ba:	af 93       	push	r26
    43bc:	bf 93       	push	r27
    43be:	ef 93       	push	r30
    43c0:	ff 93       	push	r31
    43c2:	e0 91 22 04 	lds	r30, 0x0422
    43c6:	f0 91 23 04 	lds	r31, 0x0423
    43ca:	30 97       	sbiw	r30, 0x00	; 0
    43cc:	09 f0       	breq	.+2      	; 0x43d0 <__vector_9+0x30>
    43ce:	09 95       	icall
    43d0:	ff 91       	pop	r31
    43d2:	ef 91       	pop	r30
    43d4:	bf 91       	pop	r27
    43d6:	af 91       	pop	r26
    43d8:	9f 91       	pop	r25
    43da:	8f 91       	pop	r24
    43dc:	7f 91       	pop	r23
    43de:	6f 91       	pop	r22
    43e0:	5f 91       	pop	r21
    43e2:	4f 91       	pop	r20
    43e4:	3f 91       	pop	r19
    43e6:	2f 91       	pop	r18
    43e8:	0f 90       	pop	r0
    43ea:	0f be       	out	0x3f, r0	; 63
    43ec:	0f 90       	pop	r0
    43ee:	1f 90       	pop	r1
    43f0:	18 95       	reti

000043f2 <__vector_10>:
    43f2:	1f 92       	push	r1
    43f4:	0f 92       	push	r0
    43f6:	0f b6       	in	r0, 0x3f	; 63
    43f8:	0f 92       	push	r0
    43fa:	11 24       	eor	r1, r1
    43fc:	2f 93       	push	r18
    43fe:	3f 93       	push	r19
    4400:	4f 93       	push	r20
    4402:	5f 93       	push	r21
    4404:	6f 93       	push	r22
    4406:	7f 93       	push	r23
    4408:	8f 93       	push	r24
    440a:	9f 93       	push	r25
    440c:	af 93       	push	r26
    440e:	bf 93       	push	r27
    4410:	ef 93       	push	r30
    4412:	ff 93       	push	r31
    4414:	e0 91 24 04 	lds	r30, 0x0424
    4418:	f0 91 25 04 	lds	r31, 0x0425
    441c:	30 97       	sbiw	r30, 0x00	; 0
    441e:	09 f0       	breq	.+2      	; 0x4422 <__vector_10+0x30>
    4420:	09 95       	icall
    4422:	ff 91       	pop	r31
    4424:	ef 91       	pop	r30
    4426:	bf 91       	pop	r27
    4428:	af 91       	pop	r26
    442a:	9f 91       	pop	r25
    442c:	8f 91       	pop	r24
    442e:	7f 91       	pop	r23
    4430:	6f 91       	pop	r22
    4432:	5f 91       	pop	r21
    4434:	4f 91       	pop	r20
    4436:	3f 91       	pop	r19
    4438:	2f 91       	pop	r18
    443a:	0f 90       	pop	r0
    443c:	0f be       	out	0x3f, r0	; 63
    443e:	0f 90       	pop	r0
    4440:	1f 90       	pop	r1
    4442:	18 95       	reti

00004444 <__vector_11>:
    4444:	1f 92       	push	r1
    4446:	0f 92       	push	r0
    4448:	0f b6       	in	r0, 0x3f	; 63
    444a:	0f 92       	push	r0
    444c:	11 24       	eor	r1, r1
    444e:	2f 93       	push	r18
    4450:	3f 93       	push	r19
    4452:	4f 93       	push	r20
    4454:	5f 93       	push	r21
    4456:	6f 93       	push	r22
    4458:	7f 93       	push	r23
    445a:	8f 93       	push	r24
    445c:	9f 93       	push	r25
    445e:	af 93       	push	r26
    4460:	bf 93       	push	r27
    4462:	ef 93       	push	r30
    4464:	ff 93       	push	r31
    4466:	e0 91 26 04 	lds	r30, 0x0426
    446a:	f0 91 27 04 	lds	r31, 0x0427
    446e:	30 97       	sbiw	r30, 0x00	; 0
    4470:	09 f0       	breq	.+2      	; 0x4474 <__vector_11+0x30>
    4472:	09 95       	icall
    4474:	ff 91       	pop	r31
    4476:	ef 91       	pop	r30
    4478:	bf 91       	pop	r27
    447a:	af 91       	pop	r26
    447c:	9f 91       	pop	r25
    447e:	8f 91       	pop	r24
    4480:	7f 91       	pop	r23
    4482:	6f 91       	pop	r22
    4484:	5f 91       	pop	r21
    4486:	4f 91       	pop	r20
    4488:	3f 91       	pop	r19
    448a:	2f 91       	pop	r18
    448c:	0f 90       	pop	r0
    448e:	0f be       	out	0x3f, r0	; 63
    4490:	0f 90       	pop	r0
    4492:	1f 90       	pop	r1
    4494:	18 95       	reti

00004496 <__vector_13>:
    4496:	1f 92       	push	r1
    4498:	0f 92       	push	r0
    449a:	0f b6       	in	r0, 0x3f	; 63
    449c:	0f 92       	push	r0
    449e:	11 24       	eor	r1, r1
    44a0:	2f 93       	push	r18
    44a2:	3f 93       	push	r19
    44a4:	4f 93       	push	r20
    44a6:	5f 93       	push	r21
    44a8:	6f 93       	push	r22
    44aa:	7f 93       	push	r23
    44ac:	8f 93       	push	r24
    44ae:	9f 93       	push	r25
    44b0:	af 93       	push	r26
    44b2:	bf 93       	push	r27
    44b4:	ef 93       	push	r30
    44b6:	ff 93       	push	r31
    44b8:	e0 91 2a 04 	lds	r30, 0x042A
    44bc:	f0 91 2b 04 	lds	r31, 0x042B
    44c0:	30 97       	sbiw	r30, 0x00	; 0
    44c2:	09 f0       	breq	.+2      	; 0x44c6 <__vector_13+0x30>
    44c4:	09 95       	icall
    44c6:	ff 91       	pop	r31
    44c8:	ef 91       	pop	r30
    44ca:	bf 91       	pop	r27
    44cc:	af 91       	pop	r26
    44ce:	9f 91       	pop	r25
    44d0:	8f 91       	pop	r24
    44d2:	7f 91       	pop	r23
    44d4:	6f 91       	pop	r22
    44d6:	5f 91       	pop	r21
    44d8:	4f 91       	pop	r20
    44da:	3f 91       	pop	r19
    44dc:	2f 91       	pop	r18
    44de:	0f 90       	pop	r0
    44e0:	0f be       	out	0x3f, r0	; 63
    44e2:	0f 90       	pop	r0
    44e4:	1f 90       	pop	r1
    44e6:	18 95       	reti

000044e8 <__vector_14>:
    44e8:	1f 92       	push	r1
    44ea:	0f 92       	push	r0
    44ec:	0f b6       	in	r0, 0x3f	; 63
    44ee:	0f 92       	push	r0
    44f0:	11 24       	eor	r1, r1
    44f2:	2f 93       	push	r18
    44f4:	3f 93       	push	r19
    44f6:	4f 93       	push	r20
    44f8:	5f 93       	push	r21
    44fa:	6f 93       	push	r22
    44fc:	7f 93       	push	r23
    44fe:	8f 93       	push	r24
    4500:	9f 93       	push	r25
    4502:	af 93       	push	r26
    4504:	bf 93       	push	r27
    4506:	ef 93       	push	r30
    4508:	ff 93       	push	r31
    450a:	e0 91 2c 04 	lds	r30, 0x042C
    450e:	f0 91 2d 04 	lds	r31, 0x042D
    4512:	30 97       	sbiw	r30, 0x00	; 0
    4514:	09 f0       	breq	.+2      	; 0x4518 <__vector_14+0x30>
    4516:	09 95       	icall
    4518:	ff 91       	pop	r31
    451a:	ef 91       	pop	r30
    451c:	bf 91       	pop	r27
    451e:	af 91       	pop	r26
    4520:	9f 91       	pop	r25
    4522:	8f 91       	pop	r24
    4524:	7f 91       	pop	r23
    4526:	6f 91       	pop	r22
    4528:	5f 91       	pop	r21
    452a:	4f 91       	pop	r20
    452c:	3f 91       	pop	r19
    452e:	2f 91       	pop	r18
    4530:	0f 90       	pop	r0
    4532:	0f be       	out	0x3f, r0	; 63
    4534:	0f 90       	pop	r0
    4536:	1f 90       	pop	r1
    4538:	18 95       	reti

0000453a <__vector_12>:
    453a:	1f 92       	push	r1
    453c:	0f 92       	push	r0
    453e:	0f b6       	in	r0, 0x3f	; 63
    4540:	0f 92       	push	r0
    4542:	11 24       	eor	r1, r1
    4544:	2f 93       	push	r18
    4546:	3f 93       	push	r19
    4548:	4f 93       	push	r20
    454a:	5f 93       	push	r21
    454c:	6f 93       	push	r22
    454e:	7f 93       	push	r23
    4550:	8f 93       	push	r24
    4552:	9f 93       	push	r25
    4554:	af 93       	push	r26
    4556:	bf 93       	push	r27
    4558:	ef 93       	push	r30
    455a:	ff 93       	push	r31
    455c:	e0 91 28 04 	lds	r30, 0x0428
    4560:	f0 91 29 04 	lds	r31, 0x0429
    4564:	30 97       	sbiw	r30, 0x00	; 0
    4566:	09 f0       	breq	.+2      	; 0x456a <__vector_12+0x30>
    4568:	09 95       	icall
    456a:	ff 91       	pop	r31
    456c:	ef 91       	pop	r30
    456e:	bf 91       	pop	r27
    4570:	af 91       	pop	r26
    4572:	9f 91       	pop	r25
    4574:	8f 91       	pop	r24
    4576:	7f 91       	pop	r23
    4578:	6f 91       	pop	r22
    457a:	5f 91       	pop	r21
    457c:	4f 91       	pop	r20
    457e:	3f 91       	pop	r19
    4580:	2f 91       	pop	r18
    4582:	0f 90       	pop	r0
    4584:	0f be       	out	0x3f, r0	; 63
    4586:	0f 90       	pop	r0
    4588:	1f 90       	pop	r1
    458a:	18 95       	reti

0000458c <__vector_15>:
    458c:	1f 92       	push	r1
    458e:	0f 92       	push	r0
    4590:	0f b6       	in	r0, 0x3f	; 63
    4592:	0f 92       	push	r0
    4594:	11 24       	eor	r1, r1
    4596:	2f 93       	push	r18
    4598:	3f 93       	push	r19
    459a:	4f 93       	push	r20
    459c:	5f 93       	push	r21
    459e:	6f 93       	push	r22
    45a0:	7f 93       	push	r23
    45a2:	8f 93       	push	r24
    45a4:	9f 93       	push	r25
    45a6:	af 93       	push	r26
    45a8:	bf 93       	push	r27
    45aa:	ef 93       	push	r30
    45ac:	ff 93       	push	r31
    45ae:	e0 91 2e 04 	lds	r30, 0x042E
    45b2:	f0 91 2f 04 	lds	r31, 0x042F
    45b6:	30 97       	sbiw	r30, 0x00	; 0
    45b8:	09 f0       	breq	.+2      	; 0x45bc <__vector_15+0x30>
    45ba:	09 95       	icall
    45bc:	ff 91       	pop	r31
    45be:	ef 91       	pop	r30
    45c0:	bf 91       	pop	r27
    45c2:	af 91       	pop	r26
    45c4:	9f 91       	pop	r25
    45c6:	8f 91       	pop	r24
    45c8:	7f 91       	pop	r23
    45ca:	6f 91       	pop	r22
    45cc:	5f 91       	pop	r21
    45ce:	4f 91       	pop	r20
    45d0:	3f 91       	pop	r19
    45d2:	2f 91       	pop	r18
    45d4:	0f 90       	pop	r0
    45d6:	0f be       	out	0x3f, r0	; 63
    45d8:	0f 90       	pop	r0
    45da:	1f 90       	pop	r1
    45dc:	18 95       	reti

000045de <__vector_4>:
    45de:	1f 92       	push	r1
    45e0:	0f 92       	push	r0
    45e2:	0f b6       	in	r0, 0x3f	; 63
    45e4:	0f 92       	push	r0
    45e6:	11 24       	eor	r1, r1
    45e8:	2f 93       	push	r18
    45ea:	3f 93       	push	r19
    45ec:	4f 93       	push	r20
    45ee:	5f 93       	push	r21
    45f0:	6f 93       	push	r22
    45f2:	7f 93       	push	r23
    45f4:	8f 93       	push	r24
    45f6:	9f 93       	push	r25
    45f8:	af 93       	push	r26
    45fa:	bf 93       	push	r27
    45fc:	ef 93       	push	r30
    45fe:	ff 93       	push	r31
    4600:	e0 91 18 04 	lds	r30, 0x0418
    4604:	f0 91 19 04 	lds	r31, 0x0419
    4608:	30 97       	sbiw	r30, 0x00	; 0
    460a:	09 f0       	breq	.+2      	; 0x460e <__vector_4+0x30>
    460c:	09 95       	icall
    460e:	ff 91       	pop	r31
    4610:	ef 91       	pop	r30
    4612:	bf 91       	pop	r27
    4614:	af 91       	pop	r26
    4616:	9f 91       	pop	r25
    4618:	8f 91       	pop	r24
    461a:	7f 91       	pop	r23
    461c:	6f 91       	pop	r22
    461e:	5f 91       	pop	r21
    4620:	4f 91       	pop	r20
    4622:	3f 91       	pop	r19
    4624:	2f 91       	pop	r18
    4626:	0f 90       	pop	r0
    4628:	0f be       	out	0x3f, r0	; 63
    462a:	0f 90       	pop	r0
    462c:	1f 90       	pop	r1
    462e:	18 95       	reti

00004630 <__vector_5>:
    4630:	1f 92       	push	r1
    4632:	0f 92       	push	r0
    4634:	0f b6       	in	r0, 0x3f	; 63
    4636:	0f 92       	push	r0
    4638:	11 24       	eor	r1, r1
    463a:	2f 93       	push	r18
    463c:	3f 93       	push	r19
    463e:	4f 93       	push	r20
    4640:	5f 93       	push	r21
    4642:	6f 93       	push	r22
    4644:	7f 93       	push	r23
    4646:	8f 93       	push	r24
    4648:	9f 93       	push	r25
    464a:	af 93       	push	r26
    464c:	bf 93       	push	r27
    464e:	ef 93       	push	r30
    4650:	ff 93       	push	r31
    4652:	e0 91 1a 04 	lds	r30, 0x041A
    4656:	f0 91 1b 04 	lds	r31, 0x041B
    465a:	30 97       	sbiw	r30, 0x00	; 0
    465c:	09 f0       	breq	.+2      	; 0x4660 <__vector_5+0x30>
    465e:	09 95       	icall
    4660:	ff 91       	pop	r31
    4662:	ef 91       	pop	r30
    4664:	bf 91       	pop	r27
    4666:	af 91       	pop	r26
    4668:	9f 91       	pop	r25
    466a:	8f 91       	pop	r24
    466c:	7f 91       	pop	r23
    466e:	6f 91       	pop	r22
    4670:	5f 91       	pop	r21
    4672:	4f 91       	pop	r20
    4674:	3f 91       	pop	r19
    4676:	2f 91       	pop	r18
    4678:	0f 90       	pop	r0
    467a:	0f be       	out	0x3f, r0	; 63
    467c:	0f 90       	pop	r0
    467e:	1f 90       	pop	r1
    4680:	18 95       	reti

00004682 <__vector_6>:
    4682:	1f 92       	push	r1
    4684:	0f 92       	push	r0
    4686:	0f b6       	in	r0, 0x3f	; 63
    4688:	0f 92       	push	r0
    468a:	11 24       	eor	r1, r1
    468c:	2f 93       	push	r18
    468e:	3f 93       	push	r19
    4690:	4f 93       	push	r20
    4692:	5f 93       	push	r21
    4694:	6f 93       	push	r22
    4696:	7f 93       	push	r23
    4698:	8f 93       	push	r24
    469a:	9f 93       	push	r25
    469c:	af 93       	push	r26
    469e:	bf 93       	push	r27
    46a0:	ef 93       	push	r30
    46a2:	ff 93       	push	r31
    46a4:	e0 91 1c 04 	lds	r30, 0x041C
    46a8:	f0 91 1d 04 	lds	r31, 0x041D
    46ac:	30 97       	sbiw	r30, 0x00	; 0
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <__vector_6+0x30>
    46b0:	09 95       	icall
    46b2:	ff 91       	pop	r31
    46b4:	ef 91       	pop	r30
    46b6:	bf 91       	pop	r27
    46b8:	af 91       	pop	r26
    46ba:	9f 91       	pop	r25
    46bc:	8f 91       	pop	r24
    46be:	7f 91       	pop	r23
    46c0:	6f 91       	pop	r22
    46c2:	5f 91       	pop	r21
    46c4:	4f 91       	pop	r20
    46c6:	3f 91       	pop	r19
    46c8:	2f 91       	pop	r18
    46ca:	0f 90       	pop	r0
    46cc:	0f be       	out	0x3f, r0	; 63
    46ce:	0f 90       	pop	r0
    46d0:	1f 90       	pop	r1
    46d2:	18 95       	reti

000046d4 <__vector_7>:
    46d4:	1f 92       	push	r1
    46d6:	0f 92       	push	r0
    46d8:	0f b6       	in	r0, 0x3f	; 63
    46da:	0f 92       	push	r0
    46dc:	11 24       	eor	r1, r1
    46de:	2f 93       	push	r18
    46e0:	3f 93       	push	r19
    46e2:	4f 93       	push	r20
    46e4:	5f 93       	push	r21
    46e6:	6f 93       	push	r22
    46e8:	7f 93       	push	r23
    46ea:	8f 93       	push	r24
    46ec:	9f 93       	push	r25
    46ee:	af 93       	push	r26
    46f0:	bf 93       	push	r27
    46f2:	ef 93       	push	r30
    46f4:	ff 93       	push	r31
    46f6:	e0 91 1e 04 	lds	r30, 0x041E
    46fa:	f0 91 1f 04 	lds	r31, 0x041F
    46fe:	30 97       	sbiw	r30, 0x00	; 0
    4700:	09 f0       	breq	.+2      	; 0x4704 <__vector_7+0x30>
    4702:	09 95       	icall
    4704:	ff 91       	pop	r31
    4706:	ef 91       	pop	r30
    4708:	bf 91       	pop	r27
    470a:	af 91       	pop	r26
    470c:	9f 91       	pop	r25
    470e:	8f 91       	pop	r24
    4710:	7f 91       	pop	r23
    4712:	6f 91       	pop	r22
    4714:	5f 91       	pop	r21
    4716:	4f 91       	pop	r20
    4718:	3f 91       	pop	r19
    471a:	2f 91       	pop	r18
    471c:	0f 90       	pop	r0
    471e:	0f be       	out	0x3f, r0	; 63
    4720:	0f 90       	pop	r0
    4722:	1f 90       	pop	r1
    4724:	18 95       	reti

00004726 <ISR_attach>:
    4726:	e8 2f       	mov	r30, r24
    4728:	80 32       	cpi	r24, 0x20	; 32
    472a:	68 f4       	brcc	.+26     	; 0x4746 <ISR_attach+0x20>
    472c:	80 51       	subi	r24, 0x10	; 16
    472e:	83 30       	cpi	r24, 0x03	; 3
    4730:	50 f0       	brcs	.+20     	; 0x4746 <ISR_attach+0x20>
    4732:	f0 e0       	ldi	r31, 0x00	; 0
    4734:	ee 0f       	add	r30, r30
    4736:	ff 1f       	adc	r31, r31
    4738:	e0 5f       	subi	r30, 0xF0	; 240
    473a:	fb 4f       	sbci	r31, 0xFB	; 251
    473c:	20 81       	ld	r18, Z
    473e:	31 81       	ldd	r19, Z+1	; 0x01
    4740:	71 83       	std	Z+1, r23	; 0x01
    4742:	60 83       	st	Z, r22
    4744:	02 c0       	rjmp	.+4      	; 0x474a <ISR_attach+0x24>
    4746:	20 e0       	ldi	r18, 0x00	; 0
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	c9 01       	movw	r24, r18
    474c:	08 95       	ret

0000474e <ISR_open>:
    474e:	80 e1       	ldi	r24, 0x10	; 16
    4750:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    4754:	88 23       	and	r24, r24
    4756:	61 f4       	brne	.+24     	; 0x4770 <ISR_open+0x22>
    4758:	e0 e1       	ldi	r30, 0x10	; 16
    475a:	f4 e0       	ldi	r31, 0x04	; 4
    475c:	11 92       	st	Z+, r1
    475e:	11 92       	st	Z+, r1
    4760:	84 e0       	ldi	r24, 0x04	; 4
    4762:	e0 35       	cpi	r30, 0x50	; 80
    4764:	f8 07       	cpc	r31, r24
    4766:	d1 f7       	brne	.-12     	; 0x475c <ISR_open+0xe>
    4768:	80 e1       	ldi	r24, 0x10	; 16
    476a:	61 e0       	ldi	r22, 0x01	; 1
    476c:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    4770:	80 e1       	ldi	r24, 0x10	; 16
    4772:	91 e0       	ldi	r25, 0x01	; 1
    4774:	08 95       	ret

00004776 <__LCD_init>:
    4776:	23 9a       	sbi	0x04, 3	; 4
    4778:	08 95       	ret

0000477a <__LCD_putchar>:
    477a:	ff 92       	push	r15
    477c:	0f 93       	push	r16
    477e:	1f 93       	push	r17
    4780:	cf 93       	push	r28
    4782:	df 93       	push	r29
    4784:	f8 2e       	mov	r15, r24
    4786:	8a e0       	ldi	r24, 0x0A	; 10
    4788:	f8 16       	cp	r15, r24
    478a:	b1 f0       	breq	.+44     	; 0x47b8 <__LCD_putchar+0x3e>
    478c:	8f 15       	cp	r24, r15
    478e:	48 f0       	brcs	.+18     	; 0x47a2 <__LCD_putchar+0x28>
    4790:	e8 e0       	ldi	r30, 0x08	; 8
    4792:	fe 16       	cp	r15, r30
    4794:	b9 f1       	breq	.+110    	; 0x4804 <__LCD_putchar+0x8a>
    4796:	ef 15       	cp	r30, r15
    4798:	38 f1       	brcs	.+78     	; 0x47e8 <__LCD_putchar+0x6e>
    479a:	f7 e0       	ldi	r31, 0x07	; 7
    479c:	ff 16       	cp	r15, r31
    479e:	51 f4       	brne	.+20     	; 0x47b4 <__LCD_putchar+0x3a>
    47a0:	3b c0       	rjmp	.+118    	; 0x4818 <__LCD_putchar+0x9e>
    47a2:	8d e0       	ldi	r24, 0x0D	; 13
    47a4:	f8 16       	cp	r15, r24
    47a6:	59 f0       	breq	.+22     	; 0x47be <__LCD_putchar+0x44>
    47a8:	eb e1       	ldi	r30, 0x1B	; 27
    47aa:	fe 16       	cp	r15, r30
    47ac:	89 f0       	breq	.+34     	; 0x47d0 <__LCD_putchar+0x56>
    47ae:	fc e0       	ldi	r31, 0x0C	; 12
    47b0:	ff 16       	cp	r15, r31
    47b2:	41 f0       	breq	.+16     	; 0x47c4 <__LCD_putchar+0x4a>
    47b4:	01 e0       	ldi	r16, 0x01	; 1
    47b6:	41 c0       	rjmp	.+130    	; 0x483a <__LCD_putchar+0xc0>
    47b8:	10 92 88 07 	sts	0x0788, r1
    47bc:	03 c0       	rjmp	.+6      	; 0x47c4 <__LCD_putchar+0x4a>
    47be:	10 92 88 07 	sts	0x0788, r1
    47c2:	3a c0       	rjmp	.+116    	; 0x4838 <__LCD_putchar+0xbe>
    47c4:	80 91 89 07 	lds	r24, 0x0789
    47c8:	81 50       	subi	r24, 0x01	; 1
    47ca:	80 93 89 07 	sts	0x0789, r24
    47ce:	34 c0       	rjmp	.+104    	; 0x4838 <__LCD_putchar+0xbe>
    47d0:	0e 94 48 19 	call	0x3290	; 0x3290 <LCD_clear>
    47d4:	14 c0       	rjmp	.+40     	; 0x47fe <__LCD_putchar+0x84>
    47d6:	80 e0       	ldi	r24, 0x00	; 0
    47d8:	61 e0       	ldi	r22, 0x01	; 1
    47da:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    47de:	80 91 88 07 	lds	r24, 0x0788
    47e2:	8f 5f       	subi	r24, 0xFF	; 255
    47e4:	80 93 88 07 	sts	0x0788, r24
    47e8:	80 91 88 07 	lds	r24, 0x0788
    47ec:	87 ff       	sbrs	r24, 7
    47ee:	f3 cf       	rjmp	.-26     	; 0x47d6 <__LCD_putchar+0x5c>
    47f0:	10 92 88 07 	sts	0x0788, r1
    47f4:	80 91 89 07 	lds	r24, 0x0789
    47f8:	81 50       	subi	r24, 0x01	; 1
    47fa:	80 93 89 07 	sts	0x0789, r24
    47fe:	00 e0       	ldi	r16, 0x00	; 0
    4800:	11 e0       	ldi	r17, 0x01	; 1
    4802:	1c c0       	rjmp	.+56     	; 0x483c <__LCD_putchar+0xc2>
    4804:	80 91 88 07 	lds	r24, 0x0788
    4808:	88 23       	and	r24, r24
    480a:	b1 f0       	breq	.+44     	; 0x4838 <__LCD_putchar+0xbe>
    480c:	80 91 88 07 	lds	r24, 0x0788
    4810:	86 50       	subi	r24, 0x06	; 6
    4812:	80 93 88 07 	sts	0x0788, r24
    4816:	10 c0       	rjmp	.+32     	; 0x4838 <__LCD_putchar+0xbe>
    4818:	81 e0       	ldi	r24, 0x01	; 1
    481a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <SPKR_open>
    481e:	64 ef       	ldi	r22, 0xF4	; 244
    4820:	71 e0       	ldi	r23, 0x01	; 1
    4822:	80 e0       	ldi	r24, 0x00	; 0
    4824:	90 e0       	ldi	r25, 0x00	; 0
    4826:	4d e7       	ldi	r20, 0x7D	; 125
    4828:	50 e0       	ldi	r21, 0x00	; 0
    482a:	24 e6       	ldi	r18, 0x64	; 100
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	0e 94 d7 25 	call	0x4bae	; 0x4bae <SPKR_play_beep>
    4832:	81 e0       	ldi	r24, 0x01	; 1
    4834:	0e 94 a3 25 	call	0x4b46	; 0x4b46 <SPKR_close>
    4838:	00 e0       	ldi	r16, 0x00	; 0
    483a:	10 e0       	ldi	r17, 0x00	; 0
    483c:	80 91 89 07 	lds	r24, 0x0789
    4840:	60 91 88 07 	lds	r22, 0x0788
    4844:	0e 94 0e 1a 	call	0x341c	; 0x341c <LCD_set_PGC_addr>
    4848:	00 23       	and	r16, r16
    484a:	51 f1       	breq	.+84     	; 0x48a0 <__LCD_putchar+0x126>
    484c:	85 e0       	ldi	r24, 0x05	; 5
    484e:	f8 9e       	mul	r15, r24
    4850:	c0 01       	movw	r24, r0
    4852:	11 24       	eor	r1, r1
    4854:	ec 01       	movw	r28, r24
    4856:	c3 55       	subi	r28, 0x53	; 83
    4858:	df 4f       	sbci	r29, 0xFF	; 255
    485a:	8c 01       	movw	r16, r24
    485c:	0e 54       	subi	r16, 0x4E	; 78
    485e:	1f 4f       	sbci	r17, 0xFF	; 255
    4860:	fe 01       	movw	r30, r28
    4862:	84 91       	lpm	r24, Z+
    4864:	61 e0       	ldi	r22, 0x01	; 1
    4866:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    486a:	21 96       	adiw	r28, 0x01	; 1
    486c:	c0 17       	cp	r28, r16
    486e:	d1 07       	cpc	r29, r17
    4870:	b9 f7       	brne	.-18     	; 0x4860 <__LCD_putchar+0xe6>
    4872:	80 e0       	ldi	r24, 0x00	; 0
    4874:	61 e0       	ldi	r22, 0x01	; 1
    4876:	0e 94 27 1a 	call	0x344e	; 0x344e <LCD_write>
    487a:	80 91 88 07 	lds	r24, 0x0788
    487e:	8a 5f       	subi	r24, 0xFA	; 250
    4880:	80 93 88 07 	sts	0x0788, r24
    4884:	80 91 88 07 	lds	r24, 0x0788
    4888:	90 e0       	ldi	r25, 0x00	; 0
    488a:	8c 37       	cpi	r24, 0x7C	; 124
    488c:	91 05       	cpc	r25, r1
    488e:	3c f0       	brlt	.+14     	; 0x489e <__LCD_putchar+0x124>
    4890:	10 92 88 07 	sts	0x0788, r1
    4894:	80 91 89 07 	lds	r24, 0x0789
    4898:	81 50       	subi	r24, 0x01	; 1
    489a:	80 93 89 07 	sts	0x0789, r24
    489e:	11 e0       	ldi	r17, 0x01	; 1
    48a0:	80 91 89 07 	lds	r24, 0x0789
    48a4:	83 70       	andi	r24, 0x03	; 3
    48a6:	80 93 89 07 	sts	0x0789, r24
    48aa:	11 30       	cpi	r17, 0x01	; 1
    48ac:	59 f4       	brne	.+22     	; 0x48c4 <__LCD_putchar+0x14a>
    48ae:	80 91 8a 07 	lds	r24, 0x078A
    48b2:	81 30       	cpi	r24, 0x01	; 1
    48b4:	39 f4       	brne	.+14     	; 0x48c4 <__LCD_putchar+0x14a>
    48b6:	e0 91 8b 07 	lds	r30, 0x078B
    48ba:	f0 91 8c 07 	lds	r31, 0x078C
    48be:	30 97       	sbiw	r30, 0x00	; 0
    48c0:	09 f0       	breq	.+2      	; 0x48c4 <__LCD_putchar+0x14a>
    48c2:	09 95       	icall
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	df 91       	pop	r29
    48ca:	cf 91       	pop	r28
    48cc:	1f 91       	pop	r17
    48ce:	0f 91       	pop	r16
    48d0:	ff 90       	pop	r15
    48d2:	08 95       	ret

000048d4 <__LED_clr_pattern>:
    48d4:	85 fd       	sbrc	r24, 5
    48d6:	5d 98       	cbi	0x0b, 5	; 11
    48d8:	86 fd       	sbrc	r24, 6
    48da:	5e 98       	cbi	0x0b, 6	; 11
    48dc:	08 95       	ret

000048de <__LED_init>:
    48de:	55 9a       	sbi	0x0a, 5	; 10
    48e0:	56 9a       	sbi	0x0a, 6	; 10
    48e2:	08 95       	ret

000048e4 <__LED_set_pattern>:
    48e4:	85 fd       	sbrc	r24, 5
    48e6:	5d 9a       	sbi	0x0b, 5	; 11
    48e8:	86 fd       	sbrc	r24, 6
    48ea:	5e 9a       	sbi	0x0b, 6	; 11
    48ec:	08 95       	ret

000048ee <ATMEGA_open>:
    48ee:	80 e0       	ldi	r24, 0x00	; 0
    48f0:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    48f4:	88 23       	and	r24, r24
    48f6:	51 f4       	brne	.+20     	; 0x490c <ATMEGA_open+0x1e>
    48f8:	f8 94       	cli
    48fa:	0e 94 89 27 	call	0x4f12	; 0x4f12 <__ATMEGA_init>
    48fe:	81 e0       	ldi	r24, 0x01	; 1
    4900:	0e 94 89 24 	call	0x4912	; 0x4912 <ATMEGA_set_clk_mode>
    4904:	80 e0       	ldi	r24, 0x00	; 0
    4906:	61 e0       	ldi	r22, 0x01	; 1
    4908:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    490c:	80 e0       	ldi	r24, 0x00	; 0
    490e:	91 e0       	ldi	r25, 0x01	; 1
    4910:	08 95       	ret

00004912 <ATMEGA_set_clk_mode>:
    4912:	81 30       	cpi	r24, 0x01	; 1
    4914:	49 f0       	breq	.+18     	; 0x4928 <ATMEGA_set_clk_mode+0x16>
    4916:	f8 94       	cli
    4918:	81 30       	cpi	r24, 0x01	; 1
    491a:	20 f1       	brcs	.+72     	; 0x4964 <ATMEGA_set_clk_mode+0x52>
    491c:	82 30       	cpi	r24, 0x02	; 2
    491e:	b1 f0       	breq	.+44     	; 0x494c <ATMEGA_set_clk_mode+0x3a>
    4920:	83 30       	cpi	r24, 0x03	; 3
    4922:	09 f0       	breq	.+2      	; 0x4926 <ATMEGA_set_clk_mode+0x14>
    4924:	45 c0       	rjmp	.+138    	; 0x49b0 <ATMEGA_set_clk_mode+0x9e>
    4926:	17 c0       	rjmp	.+46     	; 0x4956 <ATMEGA_set_clk_mode+0x44>
    4928:	2c 9a       	sbi	0x05, 4	; 5
    492a:	80 e8       	ldi	r24, 0x80	; 128
    492c:	80 93 61 00 	sts	0x0061, r24
    4930:	10 92 61 00 	sts	0x0061, r1
    4934:	80 e0       	ldi	r24, 0x00	; 0
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	00 00       	nop
    493a:	01 96       	adiw	r24, 0x01	; 1
    493c:	88 32       	cpi	r24, 0x28	; 40
    493e:	91 05       	cpc	r25, r1
    4940:	d9 f7       	brne	.-10     	; 0x4938 <ATMEGA_set_clk_mode+0x26>
    4942:	10 92 68 00 	sts	0x0068, r1
    4946:	10 92 6b 00 	sts	0x006B, r1
    494a:	08 95       	ret
    494c:	80 e8       	ldi	r24, 0x80	; 128
    494e:	80 93 61 00 	sts	0x0061, r24
    4952:	83 e0       	ldi	r24, 0x03	; 3
    4954:	04 c0       	rjmp	.+8      	; 0x495e <ATMEGA_set_clk_mode+0x4c>
    4956:	80 e8       	ldi	r24, 0x80	; 128
    4958:	80 93 61 00 	sts	0x0061, r24
    495c:	88 e0       	ldi	r24, 0x08	; 8
    495e:	80 93 61 00 	sts	0x0061, r24
    4962:	28 c0       	rjmp	.+80     	; 0x49b4 <ATMEGA_set_clk_mode+0xa2>
    4964:	80 e0       	ldi	r24, 0x00	; 0
    4966:	90 e0       	ldi	r25, 0x00	; 0
    4968:	00 00       	nop
    496a:	01 96       	adiw	r24, 0x01	; 1
    496c:	2d e6       	ldi	r18, 0x6D	; 109
    496e:	80 36       	cpi	r24, 0x60	; 96
    4970:	92 07       	cpc	r25, r18
    4972:	d1 f7       	brne	.-12     	; 0x4968 <ATMEGA_set_clk_mode+0x56>
    4974:	2c 98       	cbi	0x05, 4	; 5
    4976:	80 e0       	ldi	r24, 0x00	; 0
    4978:	90 e0       	ldi	r25, 0x00	; 0
    497a:	00 00       	nop
    497c:	01 96       	adiw	r24, 0x01	; 1
    497e:	2d e6       	ldi	r18, 0x6D	; 109
    4980:	80 36       	cpi	r24, 0x60	; 96
    4982:	92 07       	cpc	r25, r18
    4984:	d1 f7       	brne	.-12     	; 0x497a <ATMEGA_set_clk_mode+0x68>
    4986:	10 92 7a 00 	sts	0x007A, r1
    498a:	8f ef       	ldi	r24, 0xFF	; 255
    498c:	80 93 64 00 	sts	0x0064, r24
    4990:	80 91 68 00 	lds	r24, 0x0068
    4994:	81 60       	ori	r24, 0x01	; 1
    4996:	80 93 68 00 	sts	0x0068, r24
    499a:	80 91 6b 00 	lds	r24, 0x006B
    499e:	84 60       	ori	r24, 0x04	; 4
    49a0:	80 93 6b 00 	sts	0x006B, r24
    49a4:	78 94       	sei
    49a6:	83 b7       	in	r24, 0x33	; 51
    49a8:	81 60       	ori	r24, 0x01	; 1
    49aa:	83 bf       	out	0x33, r24	; 51
    49ac:	88 95       	sleep
    49ae:	08 95       	ret
    49b0:	82 30       	cpi	r24, 0x02	; 2
    49b2:	08 f0       	brcs	.+2      	; 0x49b6 <ATMEGA_set_clk_mode+0xa4>
    49b4:	78 94       	sei
    49b6:	08 95       	ret

000049b8 <SPI_open>:
    49b8:	0f 93       	push	r16
    49ba:	1f 93       	push	r17
    49bc:	0e 94 b5 27 	call	0x4f6a	; 0x4f6a <__SPI_init>
    49c0:	80 e0       	ldi	r24, 0x00	; 0
    49c2:	64 ea       	ldi	r22, 0xA4	; 164
    49c4:	77 e2       	ldi	r23, 0x27	; 39
    49c6:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <SPI_set_config_func>
    49ca:	81 e0       	ldi	r24, 0x01	; 1
    49cc:	6c e9       	ldi	r22, 0x9C	; 156
    49ce:	77 e2       	ldi	r23, 0x27	; 39
    49d0:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <SPI_set_config_func>
    49d4:	82 e0       	ldi	r24, 0x02	; 2
    49d6:	64 e9       	ldi	r22, 0x94	; 148
    49d8:	77 e2       	ldi	r23, 0x27	; 39
    49da:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <SPI_set_config_func>
    49de:	86 e0       	ldi	r24, 0x06	; 6
    49e0:	6c ea       	ldi	r22, 0xAC	; 172
    49e2:	77 e2       	ldi	r23, 0x27	; 39
    49e4:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <SPI_set_config_func>
    49e8:	0c e8       	ldi	r16, 0x8C	; 140
    49ea:	17 e2       	ldi	r17, 0x27	; 39
    49ec:	83 e0       	ldi	r24, 0x03	; 3
    49ee:	b8 01       	movw	r22, r16
    49f0:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <SPI_set_config_func>
    49f4:	84 e0       	ldi	r24, 0x04	; 4
    49f6:	b8 01       	movw	r22, r16
    49f8:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <SPI_set_config_func>
    49fc:	85 e0       	ldi	r24, 0x05	; 5
    49fe:	b8 01       	movw	r22, r16
    4a00:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <SPI_set_config_func>
    4a04:	87 e0       	ldi	r24, 0x07	; 7
    4a06:	b8 01       	movw	r22, r16
    4a08:	0e 94 27 25 	call	0x4a4e	; 0x4a4e <SPI_set_config_func>
    4a0c:	82 e0       	ldi	r24, 0x02	; 2
    4a0e:	61 e0       	ldi	r22, 0x01	; 1
    4a10:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    4a14:	8f ef       	ldi	r24, 0xFF	; 255
    4a16:	80 93 8d 07 	sts	0x078D, r24
    4a1a:	87 e0       	ldi	r24, 0x07	; 7
    4a1c:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <SPI_set_slave_addr>
    4a20:	82 e0       	ldi	r24, 0x02	; 2
    4a22:	91 e0       	ldi	r25, 0x01	; 1
    4a24:	1f 91       	pop	r17
    4a26:	0f 91       	pop	r16
    4a28:	08 95       	ret

00004a2a <SPI_receive>:
    4a2a:	1f 93       	push	r17
    4a2c:	16 2f       	mov	r17, r22
    4a2e:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <SPI_set_slave_addr>
    4a32:	82 e0       	ldi	r24, 0x02	; 2
    4a34:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    4a38:	81 30       	cpi	r24, 0x01	; 1
    4a3a:	11 f0       	breq	.+4      	; 0x4a40 <SPI_receive+0x16>
    4a3c:	80 e0       	ldi	r24, 0x00	; 0
    4a3e:	05 c0       	rjmp	.+10     	; 0x4a4a <SPI_receive+0x20>
    4a40:	1e bd       	out	0x2e, r17	; 46
    4a42:	0d b4       	in	r0, 0x2d	; 45
    4a44:	07 fe       	sbrs	r0, 7
    4a46:	fd cf       	rjmp	.-6      	; 0x4a42 <SPI_receive+0x18>
    4a48:	8e b5       	in	r24, 0x2e	; 46
    4a4a:	1f 91       	pop	r17
    4a4c:	08 95       	ret

00004a4e <SPI_set_config_func>:
    4a4e:	e8 2f       	mov	r30, r24
    4a50:	f0 e0       	ldi	r31, 0x00	; 0
    4a52:	ee 0f       	add	r30, r30
    4a54:	ff 1f       	adc	r31, r31
    4a56:	e0 5b       	subi	r30, 0xB0	; 176
    4a58:	fb 4f       	sbci	r31, 0xFB	; 251
    4a5a:	71 83       	std	Z+1, r23	; 0x01
    4a5c:	60 83       	st	Z, r22
    4a5e:	08 95       	ret

00004a60 <__SPKR_TIMER1_COMPA_vect>:
    4a60:	0e 94 33 25 	call	0x4a66	; 0x4a66 <SPKR_clk>
    4a64:	08 95       	ret

00004a66 <SPKR_clk>:
    4a66:	80 91 62 04 	lds	r24, 0x0462
    4a6a:	90 91 63 04 	lds	r25, 0x0463
    4a6e:	a0 91 64 04 	lds	r26, 0x0464
    4a72:	b0 91 65 04 	lds	r27, 0x0465
    4a76:	20 91 66 04 	lds	r18, 0x0466
    4a7a:	30 91 67 04 	lds	r19, 0x0467
    4a7e:	40 91 68 04 	lds	r20, 0x0468
    4a82:	50 91 69 04 	lds	r21, 0x0469
    4a86:	28 0f       	add	r18, r24
    4a88:	39 1f       	adc	r19, r25
    4a8a:	4a 1f       	adc	r20, r26
    4a8c:	5b 1f       	adc	r21, r27
    4a8e:	20 93 62 04 	sts	0x0462, r18
    4a92:	30 93 63 04 	sts	0x0463, r19
    4a96:	40 93 64 04 	sts	0x0464, r20
    4a9a:	50 93 65 04 	sts	0x0465, r21
    4a9e:	80 91 62 04 	lds	r24, 0x0462
    4aa2:	90 91 63 04 	lds	r25, 0x0463
    4aa6:	a0 91 64 04 	lds	r26, 0x0464
    4aaa:	b0 91 65 04 	lds	r27, 0x0465
    4aae:	88 51       	subi	r24, 0x18	; 24
    4ab0:	96 4f       	sbci	r25, 0xF6	; 246
    4ab2:	a0 40       	sbci	r26, 0x00	; 0
    4ab4:	b0 40       	sbci	r27, 0x00	; 0
    4ab6:	bc f0       	brlt	.+46     	; 0x4ae6 <SPKR_clk+0x80>
    4ab8:	8b b1       	in	r24, 0x0b	; 11
    4aba:	80 58       	subi	r24, 0x80	; 128
    4abc:	8b b9       	out	0x0b, r24	; 11
    4abe:	80 91 62 04 	lds	r24, 0x0462
    4ac2:	90 91 63 04 	lds	r25, 0x0463
    4ac6:	a0 91 64 04 	lds	r26, 0x0464
    4aca:	b0 91 65 04 	lds	r27, 0x0465
    4ace:	88 51       	subi	r24, 0x18	; 24
    4ad0:	96 4f       	sbci	r25, 0xF6	; 246
    4ad2:	a0 40       	sbci	r26, 0x00	; 0
    4ad4:	b0 40       	sbci	r27, 0x00	; 0
    4ad6:	80 93 62 04 	sts	0x0462, r24
    4ada:	90 93 63 04 	sts	0x0463, r25
    4ade:	a0 93 64 04 	sts	0x0464, r26
    4ae2:	b0 93 65 04 	sts	0x0465, r27
    4ae6:	08 95       	ret

00004ae8 <__SPKR_close_beep_mode>:
    4ae8:	8a e0       	ldi	r24, 0x0A	; 10
    4aea:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    4aee:	81 30       	cpi	r24, 0x01	; 1
    4af0:	41 f4       	brne	.+16     	; 0x4b02 <__SPKR_close_beep_mode+0x1a>
    4af2:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__SPKR_close>
    4af6:	10 92 61 04 	sts	0x0461, r1
    4afa:	8a e0       	ldi	r24, 0x0A	; 10
    4afc:	60 e0       	ldi	r22, 0x00	; 0
    4afe:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    4b02:	08 95       	ret

00004b04 <__SPKR_close_tone_mode>:
    4b04:	89 e0       	ldi	r24, 0x09	; 9
    4b06:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    4b0a:	81 30       	cpi	r24, 0x01	; 1
    4b0c:	d9 f4       	brne	.+54     	; 0x4b44 <__SPKR_close_tone_mode+0x40>
    4b0e:	80 91 60 04 	lds	r24, 0x0460
    4b12:	88 23       	and	r24, r24
    4b14:	11 f0       	breq	.+4      	; 0x4b1a <__SPKR_close_tone_mode+0x16>
    4b16:	0e 94 24 26 	call	0x4c48	; 0x4c48 <__SPKR_stop>
    4b1a:	82 e0       	ldi	r24, 0x02	; 2
    4b1c:	0e 94 d3 27 	call	0x4fa6	; 0x4fa6 <__SPKR_close>
    4b20:	80 91 6e 04 	lds	r24, 0x046E
    4b24:	90 91 6f 04 	lds	r25, 0x046F
    4b28:	00 97       	sbiw	r24, 0x00	; 0
    4b2a:	31 f0       	breq	.+12     	; 0x4b38 <__SPKR_close_tone_mode+0x34>
    4b2c:	0e 94 6d 34 	call	0x68da	; 0x68da <free>
    4b30:	10 92 6f 04 	sts	0x046F, r1
    4b34:	10 92 6e 04 	sts	0x046E, r1
    4b38:	10 92 60 04 	sts	0x0460, r1
    4b3c:	89 e0       	ldi	r24, 0x09	; 9
    4b3e:	60 e0       	ldi	r22, 0x00	; 0
    4b40:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    4b44:	08 95       	ret

00004b46 <SPKR_close>:
    4b46:	81 30       	cpi	r24, 0x01	; 1
    4b48:	29 f0       	breq	.+10     	; 0x4b54 <SPKR_close+0xe>
    4b4a:	82 30       	cpi	r24, 0x02	; 2
    4b4c:	29 f4       	brne	.+10     	; 0x4b58 <SPKR_close+0x12>
    4b4e:	0e 94 82 25 	call	0x4b04	; 0x4b04 <__SPKR_close_tone_mode>
    4b52:	08 95       	ret
    4b54:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <__SPKR_close_beep_mode>
    4b58:	08 95       	ret

00004b5a <__SPKR_init>:
    4b5a:	98 2f       	mov	r25, r24
    4b5c:	80 91 60 04 	lds	r24, 0x0460
    4b60:	88 23       	and	r24, r24
    4b62:	31 f4       	brne	.+12     	; 0x4b70 <__SPKR_init+0x16>
    4b64:	80 91 61 04 	lds	r24, 0x0461
    4b68:	88 23       	and	r24, r24
    4b6a:	11 f4       	brne	.+4      	; 0x4b70 <__SPKR_init+0x16>
    4b6c:	57 9a       	sbi	0x0a, 7	; 10
    4b6e:	5f 98       	cbi	0x0b, 7	; 11
    4b70:	80 91 60 04 	lds	r24, 0x0460
    4b74:	88 23       	and	r24, r24
    4b76:	d1 f4       	brne	.+52     	; 0x4bac <__SPKR_init+0x52>
    4b78:	92 30       	cpi	r25, 0x02	; 2
    4b7a:	c1 f4       	brne	.+48     	; 0x4bac <__SPKR_init+0x52>
    4b7c:	10 92 80 00 	sts	0x0080, r1
    4b80:	10 92 81 00 	sts	0x0081, r1
    4b84:	80 91 81 00 	lds	r24, 0x0081
    4b88:	88 60       	ori	r24, 0x08	; 8
    4b8a:	80 93 81 00 	sts	0x0081, r24
    4b8e:	80 91 81 00 	lds	r24, 0x0081
    4b92:	81 60       	ori	r24, 0x01	; 1
    4b94:	80 93 81 00 	sts	0x0081, r24
    4b98:	10 92 85 00 	sts	0x0085, r1
    4b9c:	10 92 84 00 	sts	0x0084, r1
    4ba0:	81 e0       	ldi	r24, 0x01	; 1
    4ba2:	80 93 89 00 	sts	0x0089, r24
    4ba6:	80 e9       	ldi	r24, 0x90	; 144
    4ba8:	80 93 88 00 	sts	0x0088, r24
    4bac:	08 95       	ret

00004bae <SPKR_play_beep>:
    4bae:	8f 92       	push	r8
    4bb0:	9f 92       	push	r9
    4bb2:	af 92       	push	r10
    4bb4:	bf 92       	push	r11
    4bb6:	cf 92       	push	r12
    4bb8:	df 92       	push	r13
    4bba:	ef 92       	push	r14
    4bbc:	ff 92       	push	r15
    4bbe:	0f 93       	push	r16
    4bc0:	1f 93       	push	r17
    4bc2:	cf 93       	push	r28
    4bc4:	df 93       	push	r29
    4bc6:	4b 01       	movw	r8, r22
    4bc8:	5c 01       	movw	r10, r24
    4bca:	ea 01       	movw	r28, r20
    4bcc:	b9 01       	movw	r22, r18
    4bce:	21 15       	cp	r18, r1
    4bd0:	31 05       	cpc	r19, r1
    4bd2:	39 f1       	breq	.+78     	; 0x4c22 <SPKR_play_beep+0x74>
    4bd4:	9e 01       	movw	r18, r28
    4bd6:	44 27       	eor	r20, r20
    4bd8:	37 fd       	sbrc	r19, 7
    4bda:	40 95       	com	r20
    4bdc:	54 2f       	mov	r21, r20
    4bde:	65 36       	cpi	r22, 0x65	; 101
    4be0:	71 05       	cpc	r23, r1
    4be2:	10 f0       	brcs	.+4      	; 0x4be8 <SPKR_play_beep+0x3a>
    4be4:	64 e6       	ldi	r22, 0x64	; 100
    4be6:	70 e0       	ldi	r23, 0x00	; 0
    4be8:	80 e0       	ldi	r24, 0x00	; 0
    4bea:	90 e0       	ldi	r25, 0x00	; 0
    4bec:	0e 94 21 33 	call	0x6642	; 0x6642 <__mulsi3>
    4bf0:	24 e6       	ldi	r18, 0x64	; 100
    4bf2:	30 e0       	ldi	r19, 0x00	; 0
    4bf4:	40 e0       	ldi	r20, 0x00	; 0
    4bf6:	50 e0       	ldi	r21, 0x00	; 0
    4bf8:	0e 94 53 33 	call	0x66a6	; 0x66a6 <__udivmodsi4>
    4bfc:	79 01       	movw	r14, r18
    4bfe:	8a 01       	movw	r16, r20
    4c00:	c5 01       	movw	r24, r10
    4c02:	b4 01       	movw	r22, r8
    4c04:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <SPKR_beep>
    4c08:	c7 01       	movw	r24, r14
    4c0a:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
    4c0e:	60 e0       	ldi	r22, 0x00	; 0
    4c10:	70 e0       	ldi	r23, 0x00	; 0
    4c12:	80 e0       	ldi	r24, 0x00	; 0
    4c14:	90 e0       	ldi	r25, 0x00	; 0
    4c16:	0e 94 bc 27 	call	0x4f78	; 0x4f78 <SPKR_beep>
    4c1a:	ce 01       	movw	r24, r28
    4c1c:	8e 19       	sub	r24, r14
    4c1e:	9f 09       	sbc	r25, r15
    4c20:	04 c0       	rjmp	.+8      	; 0x4c2a <SPKR_play_beep+0x7c>
    4c22:	41 15       	cp	r20, r1
    4c24:	51 05       	cpc	r21, r1
    4c26:	19 f0       	breq	.+6      	; 0x4c2e <SPKR_play_beep+0x80>
    4c28:	ca 01       	movw	r24, r20
    4c2a:	0e 94 08 20 	call	0x4010	; 0x4010 <TMRSRVC_delay>
    4c2e:	df 91       	pop	r29
    4c30:	cf 91       	pop	r28
    4c32:	1f 91       	pop	r17
    4c34:	0f 91       	pop	r16
    4c36:	ff 90       	pop	r15
    4c38:	ef 90       	pop	r14
    4c3a:	df 90       	pop	r13
    4c3c:	cf 90       	pop	r12
    4c3e:	bf 90       	pop	r11
    4c40:	af 90       	pop	r10
    4c42:	9f 90       	pop	r9
    4c44:	8f 90       	pop	r8
    4c46:	08 95       	ret

00004c48 <__SPKR_stop>:
    4c48:	ef e6       	ldi	r30, 0x6F	; 111
    4c4a:	f0 e0       	ldi	r31, 0x00	; 0
    4c4c:	80 81       	ld	r24, Z
    4c4e:	8d 7f       	andi	r24, 0xFD	; 253
    4c50:	80 83       	st	Z, r24
    4c52:	08 95       	ret

00004c54 <STEPPER_go>:
    4c54:	98 2f       	mov	r25, r24
    4c56:	81 e0       	ldi	r24, 0x01	; 1
    4c58:	80 93 72 07 	sts	0x0772, r24
    4c5c:	91 30       	cpi	r25, 0x01	; 1
    4c5e:	51 f0       	breq	.+20     	; 0x4c74 <STEPPER_go+0x20>
    4c60:	91 30       	cpi	r25, 0x01	; 1
    4c62:	18 f0       	brcs	.+6      	; 0x4c6a <STEPPER_go+0x16>
    4c64:	92 30       	cpi	r25, 0x02	; 2
    4c66:	41 f4       	brne	.+16     	; 0x4c78 <STEPPER_go+0x24>
    4c68:	03 c0       	rjmp	.+6      	; 0x4c70 <STEPPER_go+0x1c>
    4c6a:	10 92 5a 07 	sts	0x075A, r1
    4c6e:	04 c0       	rjmp	.+8      	; 0x4c78 <STEPPER_go+0x24>
    4c70:	10 92 5a 07 	sts	0x075A, r1
    4c74:	10 92 5b 07 	sts	0x075B, r1
    4c78:	10 92 72 07 	sts	0x0772, r1
    4c7c:	08 95       	ret

00004c7e <__STEPPER_init>:
    4c7e:	3a 9a       	sbi	0x07, 2	; 7
    4c80:	3b 9a       	sbi	0x07, 3	; 7
    4c82:	3c 9a       	sbi	0x07, 4	; 7
    4c84:	3d 9a       	sbi	0x07, 5	; 7
    4c86:	3e 9a       	sbi	0x07, 6	; 7
    4c88:	3f 9a       	sbi	0x07, 7	; 7
    4c8a:	88 b1       	in	r24, 0x08	; 8
    4c8c:	83 70       	andi	r24, 0x03	; 3
    4c8e:	88 b9       	out	0x08, r24	; 8
    4c90:	08 95       	ret

00004c92 <STEPPER_set_steps>:
    4c92:	98 2f       	mov	r25, r24
    4c94:	81 e0       	ldi	r24, 0x01	; 1
    4c96:	80 93 72 07 	sts	0x0772, r24
    4c9a:	91 30       	cpi	r25, 0x01	; 1
    4c9c:	71 f0       	breq	.+28     	; 0x4cba <STEPPER_set_steps+0x28>
    4c9e:	91 30       	cpi	r25, 0x01	; 1
    4ca0:	18 f0       	brcs	.+6      	; 0x4ca8 <STEPPER_set_steps+0x16>
    4ca2:	92 30       	cpi	r25, 0x02	; 2
    4ca4:	71 f4       	brne	.+28     	; 0x4cc2 <STEPPER_set_steps+0x30>
    4ca6:	05 c0       	rjmp	.+10     	; 0x4cb2 <STEPPER_set_steps+0x20>
    4ca8:	70 93 4f 07 	sts	0x074F, r23
    4cac:	60 93 4e 07 	sts	0x074E, r22
    4cb0:	08 c0       	rjmp	.+16     	; 0x4cc2 <STEPPER_set_steps+0x30>
    4cb2:	70 93 4f 07 	sts	0x074F, r23
    4cb6:	60 93 4e 07 	sts	0x074E, r22
    4cba:	70 93 51 07 	sts	0x0751, r23
    4cbe:	60 93 50 07 	sts	0x0750, r22
    4cc2:	10 92 72 07 	sts	0x0772, r1
    4cc6:	08 95       	ret

00004cc8 <STEPPER_set_stop_mode>:
    4cc8:	98 2f       	mov	r25, r24
    4cca:	81 e0       	ldi	r24, 0x01	; 1
    4ccc:	80 93 72 07 	sts	0x0772, r24
    4cd0:	91 30       	cpi	r25, 0x01	; 1
    4cd2:	51 f0       	breq	.+20     	; 0x4ce8 <STEPPER_set_stop_mode+0x20>
    4cd4:	91 30       	cpi	r25, 0x01	; 1
    4cd6:	18 f0       	brcs	.+6      	; 0x4cde <STEPPER_set_stop_mode+0x16>
    4cd8:	92 30       	cpi	r25, 0x02	; 2
    4cda:	41 f4       	brne	.+16     	; 0x4cec <STEPPER_set_stop_mode+0x24>
    4cdc:	03 c0       	rjmp	.+6      	; 0x4ce4 <STEPPER_set_stop_mode+0x1c>
    4cde:	60 93 5c 07 	sts	0x075C, r22
    4ce2:	04 c0       	rjmp	.+8      	; 0x4cec <STEPPER_set_stop_mode+0x24>
    4ce4:	60 93 5c 07 	sts	0x075C, r22
    4ce8:	60 93 5d 07 	sts	0x075D, r22
    4cec:	10 92 72 07 	sts	0x0772, r1
    4cf0:	08 95       	ret

00004cf2 <STEPPER_setup_decels>:
    4cf2:	0f 93       	push	r16
    4cf4:	1f 93       	push	r17
    4cf6:	cf 93       	push	r28
    4cf8:	df 93       	push	r29
    4cfa:	eb 01       	movw	r28, r22
    4cfc:	8a 01       	movw	r16, r20
    4cfe:	81 30       	cpi	r24, 0x01	; 1
    4d00:	01 f1       	breq	.+64     	; 0x4d42 <STEPPER_setup_decels+0x50>
    4d02:	81 30       	cpi	r24, 0x01	; 1
    4d04:	18 f0       	brcs	.+6      	; 0x4d0c <STEPPER_setup_decels+0x1a>
    4d06:	82 30       	cpi	r24, 0x02	; 2
    4d08:	61 f5       	brne	.+88     	; 0x4d62 <STEPPER_setup_decels+0x70>
    4d0a:	0d c0       	rjmp	.+26     	; 0x4d26 <STEPPER_setup_decels+0x34>
    4d0c:	80 91 46 07 	lds	r24, 0x0746
    4d10:	90 91 47 07 	lds	r25, 0x0747
    4d14:	89 2b       	or	r24, r25
    4d16:	11 f0       	breq	.+4      	; 0x4d1c <STEPPER_setup_decels+0x2a>
    4d18:	80 e0       	ldi	r24, 0x00	; 0
    4d1a:	1a c0       	rjmp	.+52     	; 0x4d50 <STEPPER_setup_decels+0x5e>
    4d1c:	10 92 53 07 	sts	0x0753, r1
    4d20:	10 92 52 07 	sts	0x0752, r1
    4d24:	1e c0       	rjmp	.+60     	; 0x4d62 <STEPPER_setup_decels+0x70>
    4d26:	80 91 46 07 	lds	r24, 0x0746
    4d2a:	90 91 47 07 	lds	r25, 0x0747
    4d2e:	89 2b       	or	r24, r25
    4d30:	21 f0       	breq	.+8      	; 0x4d3a <STEPPER_setup_decels+0x48>
    4d32:	80 e0       	ldi	r24, 0x00	; 0
    4d34:	0e 94 ef 27 	call	0x4fde	; 0x4fde <STEPPER_set_decel_step_values>
    4d38:	04 c0       	rjmp	.+8      	; 0x4d42 <STEPPER_setup_decels+0x50>
    4d3a:	10 92 53 07 	sts	0x0753, r1
    4d3e:	10 92 52 07 	sts	0x0752, r1
    4d42:	80 91 48 07 	lds	r24, 0x0748
    4d46:	90 91 49 07 	lds	r25, 0x0749
    4d4a:	89 2b       	or	r24, r25
    4d4c:	31 f0       	breq	.+12     	; 0x4d5a <STEPPER_setup_decels+0x68>
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	be 01       	movw	r22, r28
    4d52:	a8 01       	movw	r20, r16
    4d54:	0e 94 ef 27 	call	0x4fde	; 0x4fde <STEPPER_set_decel_step_values>
    4d58:	04 c0       	rjmp	.+8      	; 0x4d62 <STEPPER_setup_decels+0x70>
    4d5a:	10 92 55 07 	sts	0x0755, r1
    4d5e:	10 92 54 07 	sts	0x0754, r1
    4d62:	df 91       	pop	r29
    4d64:	cf 91       	pop	r28
    4d66:	1f 91       	pop	r17
    4d68:	0f 91       	pop	r16
    4d6a:	08 95       	ret

00004d6c <SYS_init>:
    4d6c:	10 92 75 07 	sts	0x0775, r1
    4d70:	10 92 76 07 	sts	0x0776, r1
    4d74:	10 92 7a 07 	sts	0x077A, r1
    4d78:	10 92 77 07 	sts	0x0777, r1
    4d7c:	10 92 79 07 	sts	0x0779, r1
    4d80:	10 92 7b 07 	sts	0x077B, r1
    4d84:	10 92 7c 07 	sts	0x077C, r1
    4d88:	10 92 7d 07 	sts	0x077D, r1
    4d8c:	10 92 7e 07 	sts	0x077E, r1
    4d90:	10 92 7f 07 	sts	0x077F, r1
    4d94:	10 92 80 07 	sts	0x0780, r1
    4d98:	10 92 81 07 	sts	0x0781, r1
    4d9c:	10 92 82 07 	sts	0x0782, r1
    4da0:	10 92 83 07 	sts	0x0783, r1
    4da4:	10 92 84 07 	sts	0x0784, r1
    4da8:	10 92 85 07 	sts	0x0785, r1
    4dac:	10 92 86 07 	sts	0x0786, r1
    4db0:	08 95       	ret

00004db2 <TMRSRVC_insert>:
    4db2:	cf 92       	push	r12
    4db4:	df 92       	push	r13
    4db6:	ef 92       	push	r14
    4db8:	ff 92       	push	r15
    4dba:	0f 93       	push	r16
    4dbc:	1f 93       	push	r17
    4dbe:	cf 93       	push	r28
    4dc0:	df 93       	push	r29
    4dc2:	ec 01       	movw	r28, r24
    4dc4:	80 91 ac 07 	lds	r24, 0x07AC
    4dc8:	88 23       	and	r24, r24
    4dca:	39 f4       	brne	.+14     	; 0x4dda <TMRSRVC_insert+0x28>
    4dcc:	d0 93 ae 07 	sts	0x07AE, r29
    4dd0:	c0 93 ad 07 	sts	0x07AD, r28
    4dd4:	0e 94 67 27 	call	0x4ece	; 0x4ece <TMRSRVC_start>
    4dd8:	47 c0       	rjmp	.+142    	; 0x4e68 <TMRSRVC_insert+0xb6>
    4dda:	c0 90 ad 07 	lds	r12, 0x07AD
    4dde:	d0 90 ae 07 	lds	r13, 0x07AE
    4de2:	00 e0       	ldi	r16, 0x00	; 0
    4de4:	10 e0       	ldi	r17, 0x00	; 0
    4de6:	ee 24       	eor	r14, r14
    4de8:	ff 24       	eor	r15, r15
    4dea:	37 c0       	rjmp	.+110    	; 0x4e5a <TMRSRVC_insert+0xa8>
    4dec:	a8 81       	ld	r26, Y
    4dee:	b9 81       	ldd	r27, Y+1	; 0x01
    4df0:	fd 01       	movw	r30, r26
    4df2:	64 81       	ldd	r22, Z+4	; 0x04
    4df4:	75 81       	ldd	r23, Z+5	; 0x05
    4df6:	f6 01       	movw	r30, r12
    4df8:	40 81       	ld	r20, Z
    4dfa:	51 81       	ldd	r21, Z+1	; 0x01
    4dfc:	fa 01       	movw	r30, r20
    4dfe:	84 81       	ldd	r24, Z+4	; 0x04
    4e00:	95 81       	ldd	r25, Z+5	; 0x05
    4e02:	9b 01       	movw	r18, r22
    4e04:	28 1b       	sub	r18, r24
    4e06:	39 0b       	sbc	r19, r25
    4e08:	37 ff       	sbrs	r19, 7
    4e0a:	0f c0       	rjmp	.+30     	; 0x4e2a <TMRSRVC_insert+0x78>
    4e0c:	86 1b       	sub	r24, r22
    4e0e:	97 0b       	sbc	r25, r23
    4e10:	95 83       	std	Z+5, r25	; 0x05
    4e12:	84 83       	std	Z+4, r24	; 0x04
    4e14:	db 82       	std	Y+3, r13	; 0x03
    4e16:	ca 82       	std	Y+2, r12	; 0x02
    4e18:	01 2b       	or	r16, r17
    4e1a:	29 f4       	brne	.+10     	; 0x4e26 <TMRSRVC_insert+0x74>
    4e1c:	d0 93 ae 07 	sts	0x07AE, r29
    4e20:	c0 93 ad 07 	sts	0x07AD, r28
    4e24:	21 c0       	rjmp	.+66     	; 0x4e68 <TMRSRVC_insert+0xb6>
    4e26:	f7 01       	movw	r30, r14
    4e28:	0c c0       	rjmp	.+24     	; 0x4e42 <TMRSRVC_insert+0x90>
    4e2a:	f6 01       	movw	r30, r12
    4e2c:	82 81       	ldd	r24, Z+2	; 0x02
    4e2e:	93 81       	ldd	r25, Z+3	; 0x03
    4e30:	21 15       	cp	r18, r1
    4e32:	31 05       	cpc	r19, r1
    4e34:	49 f4       	brne	.+18     	; 0x4e48 <TMRSRVC_insert+0x96>
    4e36:	fd 01       	movw	r30, r26
    4e38:	15 82       	std	Z+5, r1	; 0x05
    4e3a:	14 82       	std	Z+4, r1	; 0x04
    4e3c:	9b 83       	std	Y+3, r25	; 0x03
    4e3e:	8a 83       	std	Y+2, r24	; 0x02
    4e40:	f6 01       	movw	r30, r12
    4e42:	d3 83       	std	Z+3, r29	; 0x03
    4e44:	c2 83       	std	Z+2, r28	; 0x02
    4e46:	10 c0       	rjmp	.+32     	; 0x4e68 <TMRSRVC_insert+0xb6>
    4e48:	fd 01       	movw	r30, r26
    4e4a:	35 83       	std	Z+5, r19	; 0x05
    4e4c:	24 83       	std	Z+4, r18	; 0x04
    4e4e:	00 97       	sbiw	r24, 0x00	; 0
    4e50:	b9 f3       	breq	.-18     	; 0x4e40 <TMRSRVC_insert+0x8e>
    4e52:	0f 5f       	subi	r16, 0xFF	; 255
    4e54:	1f 4f       	sbci	r17, 0xFF	; 255
    4e56:	76 01       	movw	r14, r12
    4e58:	6c 01       	movw	r12, r24
    4e5a:	80 91 ac 07 	lds	r24, 0x07AC
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	08 17       	cp	r16, r24
    4e62:	19 07       	cpc	r17, r25
    4e64:	18 f2       	brcs	.-122    	; 0x4dec <TMRSRVC_insert+0x3a>
    4e66:	ec cf       	rjmp	.-40     	; 0x4e40 <TMRSRVC_insert+0x8e>
    4e68:	80 91 ac 07 	lds	r24, 0x07AC
    4e6c:	8f 5f       	subi	r24, 0xFF	; 255
    4e6e:	80 93 ac 07 	sts	0x07AC, r24
    4e72:	df 91       	pop	r29
    4e74:	cf 91       	pop	r28
    4e76:	1f 91       	pop	r17
    4e78:	0f 91       	pop	r16
    4e7a:	ff 90       	pop	r15
    4e7c:	ef 90       	pop	r14
    4e7e:	df 90       	pop	r13
    4e80:	cf 90       	pop	r12
    4e82:	08 95       	ret

00004e84 <TMRSRVC_open>:
    4e84:	88 e0       	ldi	r24, 0x08	; 8
    4e86:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    4e8a:	88 23       	and	r24, r24
    4e8c:	b9 f4       	brne	.+46     	; 0x4ebc <TMRSRVC_open+0x38>
    4e8e:	10 92 ac 07 	sts	0x07AC, r1
    4e92:	10 92 ae 07 	sts	0x07AE, r1
    4e96:	10 92 ad 07 	sts	0x07AD, r1
    4e9a:	10 92 70 04 	sts	0x0470, r1
    4e9e:	10 92 71 04 	sts	0x0471, r1
    4ea2:	80 e1       	ldi	r24, 0x10	; 16
    4ea4:	6c e5       	ldi	r22, 0x5C	; 92
    4ea6:	78 e2       	ldi	r23, 0x28	; 40
    4ea8:	0e 94 78 27 	call	0x4ef0	; 0x4ef0 <__ISR_attach>
    4eac:	0e 94 63 28 	call	0x50c6	; 0x50c6 <__TMRSRVC_init>
    4eb0:	0e 94 61 27 	call	0x4ec2	; 0x4ec2 <__TMRSRVC_start>
    4eb4:	88 e0       	ldi	r24, 0x08	; 8
    4eb6:	61 e0       	ldi	r22, 0x01	; 1
    4eb8:	0e 94 f3 1e 	call	0x3de6	; 0x3de6 <SYS_set_state>
    4ebc:	88 e0       	ldi	r24, 0x08	; 8
    4ebe:	91 e0       	ldi	r25, 0x01	; 1
    4ec0:	08 95       	ret

00004ec2 <__TMRSRVC_start>:
    4ec2:	ee e6       	ldi	r30, 0x6E	; 110
    4ec4:	f0 e0       	ldi	r31, 0x00	; 0
    4ec6:	80 81       	ld	r24, Z
    4ec8:	82 60       	ori	r24, 0x02	; 2
    4eca:	80 83       	st	Z, r24
    4ecc:	08 95       	ret

00004ece <TMRSRVC_start>:
    4ece:	81 e0       	ldi	r24, 0x01	; 1
    4ed0:	80 93 71 04 	sts	0x0471, r24
    4ed4:	08 95       	ret

00004ed6 <I2C_enable>:
    4ed6:	80 91 af 07 	lds	r24, 0x07AF
    4eda:	81 30       	cpi	r24, 0x01	; 1
    4edc:	29 f4       	brne	.+10     	; 0x4ee8 <I2C_enable+0x12>
    4ede:	80 91 bc 00 	lds	r24, 0x00BC
    4ee2:	84 60       	ori	r24, 0x04	; 4
    4ee4:	80 93 bc 00 	sts	0x00BC, r24
    4ee8:	08 95       	ret

00004eea <__I2C_init>:
    4eea:	38 98       	cbi	0x07, 0	; 7
    4eec:	39 98       	cbi	0x07, 1	; 7
    4eee:	08 95       	ret

00004ef0 <__ISR_attach>:
    4ef0:	80 32       	cpi	r24, 0x20	; 32
    4ef2:	18 f0       	brcs	.+6      	; 0x4efa <__ISR_attach+0xa>
    4ef4:	20 e0       	ldi	r18, 0x00	; 0
    4ef6:	30 e0       	ldi	r19, 0x00	; 0
    4ef8:	0a c0       	rjmp	.+20     	; 0x4f0e <__ISR_attach+0x1e>
    4efa:	e8 2f       	mov	r30, r24
    4efc:	f0 e0       	ldi	r31, 0x00	; 0
    4efe:	ee 0f       	add	r30, r30
    4f00:	ff 1f       	adc	r31, r31
    4f02:	e0 5f       	subi	r30, 0xF0	; 240
    4f04:	fb 4f       	sbci	r31, 0xFB	; 251
    4f06:	20 81       	ld	r18, Z
    4f08:	31 81       	ldd	r19, Z+1	; 0x01
    4f0a:	71 83       	std	Z+1, r23	; 0x01
    4f0c:	60 83       	st	Z, r22
    4f0e:	c9 01       	movw	r24, r18
    4f10:	08 95       	ret

00004f12 <__ATMEGA_init>:
    4f12:	24 9a       	sbi	0x04, 4	; 4
    4f14:	2c 9a       	sbi	0x05, 4	; 5
    4f16:	08 95       	ret

00004f18 <SPI_default_config>:
    4f18:	83 e5       	ldi	r24, 0x53	; 83
    4f1a:	8c bd       	out	0x2c, r24	; 44
    4f1c:	81 e0       	ldi	r24, 0x01	; 1
    4f1e:	8d bd       	out	0x2d, r24	; 45
    4f20:	8d e0       	ldi	r24, 0x0D	; 13
    4f22:	8a 95       	dec	r24
    4f24:	f1 f7       	brne	.-4      	; 0x4f22 <SPI_default_config+0xa>
    4f26:	08 95       	ret

00004f28 <SPI_ATtiny0_config>:
    4f28:	83 e5       	ldi	r24, 0x53	; 83
    4f2a:	8c bd       	out	0x2c, r24	; 44
    4f2c:	1d bc       	out	0x2d, r1	; 45
    4f2e:	84 ef       	ldi	r24, 0xF4	; 244
    4f30:	91 e0       	ldi	r25, 0x01	; 1
    4f32:	01 97       	sbiw	r24, 0x01	; 1
    4f34:	f1 f7       	brne	.-4      	; 0x4f32 <SPI_ATtiny0_config+0xa>
    4f36:	08 95       	ret

00004f38 <SPI_PSXC_config>:
    4f38:	8f e7       	ldi	r24, 0x7F	; 127
    4f3a:	8c bd       	out	0x2c, r24	; 44
    4f3c:	1d bc       	out	0x2d, r1	; 45
    4f3e:	84 ef       	ldi	r24, 0xF4	; 244
    4f40:	91 e0       	ldi	r25, 0x01	; 1
    4f42:	01 97       	sbiw	r24, 0x01	; 1
    4f44:	f1 f7       	brne	.-4      	; 0x4f42 <SPI_PSXC_config+0xa>
    4f46:	08 95       	ret

00004f48 <SPI_LCD_config>:
    4f48:	83 e5       	ldi	r24, 0x53	; 83
    4f4a:	8c bd       	out	0x2c, r24	; 44
    4f4c:	81 e0       	ldi	r24, 0x01	; 1
    4f4e:	8d bd       	out	0x2d, r24	; 45
    4f50:	8d e0       	ldi	r24, 0x0D	; 13
    4f52:	8a 95       	dec	r24
    4f54:	f1 f7       	brne	.-4      	; 0x4f52 <SPI_LCD_config+0xa>
    4f56:	08 95       	ret

00004f58 <SPI_FLASH_config>:
    4f58:	83 e5       	ldi	r24, 0x53	; 83
    4f5a:	8c bd       	out	0x2c, r24	; 44
    4f5c:	81 e0       	ldi	r24, 0x01	; 1
    4f5e:	8d bd       	out	0x2d, r24	; 45
    4f60:	84 ef       	ldi	r24, 0xF4	; 244
    4f62:	91 e0       	ldi	r25, 0x01	; 1
    4f64:	01 97       	sbiw	r24, 0x01	; 1
    4f66:	f1 f7       	brne	.-4      	; 0x4f64 <SPI_FLASH_config+0xc>
    4f68:	08 95       	ret

00004f6a <__SPI_init>:
    4f6a:	25 9a       	sbi	0x04, 5	; 4
    4f6c:	26 98       	cbi	0x04, 6	; 4
    4f6e:	27 9a       	sbi	0x04, 7	; 4
    4f70:	20 9a       	sbi	0x04, 0	; 4
    4f72:	21 9a       	sbi	0x04, 1	; 4
    4f74:	22 9a       	sbi	0x04, 2	; 4
    4f76:	08 95       	ret

00004f78 <SPKR_beep>:
    4f78:	9b 01       	movw	r18, r22
    4f7a:	ac 01       	movw	r20, r24
    4f7c:	80 91 61 04 	lds	r24, 0x0461
    4f80:	88 23       	and	r24, r24
    4f82:	81 f0       	breq	.+32     	; 0x4fa4 <SPKR_beep+0x2c>
    4f84:	da 01       	movw	r26, r20
    4f86:	c9 01       	movw	r24, r18
    4f88:	88 0f       	add	r24, r24
    4f8a:	99 1f       	adc	r25, r25
    4f8c:	aa 1f       	adc	r26, r26
    4f8e:	bb 1f       	adc	r27, r27
    4f90:	90 93 6d 04 	sts	0x046D, r25
    4f94:	80 93 6c 04 	sts	0x046C, r24
    4f98:	21 15       	cp	r18, r1
    4f9a:	31 05       	cpc	r19, r1
    4f9c:	41 05       	cpc	r20, r1
    4f9e:	51 05       	cpc	r21, r1
    4fa0:	09 f4       	brne	.+2      	; 0x4fa4 <SPKR_beep+0x2c>
    4fa2:	5f 98       	cbi	0x0b, 7	; 11
    4fa4:	08 95       	ret

00004fa6 <__SPKR_close>:
    4fa6:	82 30       	cpi	r24, 0x02	; 2
    4fa8:	29 f4       	brne	.+10     	; 0x4fb4 <__SPKR_close+0xe>
    4faa:	80 91 81 00 	lds	r24, 0x0081
    4fae:	8e 7f       	andi	r24, 0xFE	; 254
    4fb0:	80 93 81 00 	sts	0x0081, r24
    4fb4:	80 91 60 04 	lds	r24, 0x0460
    4fb8:	81 30       	cpi	r24, 0x01	; 1
    4fba:	31 f4       	brne	.+12     	; 0x4fc8 <__SPKR_close+0x22>
    4fbc:	80 91 61 04 	lds	r24, 0x0461
    4fc0:	81 30       	cpi	r24, 0x01	; 1
    4fc2:	11 f4       	brne	.+4      	; 0x4fc8 <__SPKR_close+0x22>
    4fc4:	00 00       	nop
    4fc6:	08 95       	ret
    4fc8:	80 91 60 04 	lds	r24, 0x0460
    4fcc:	81 30       	cpi	r24, 0x01	; 1
    4fce:	21 f0       	breq	.+8      	; 0x4fd8 <__SPKR_close+0x32>
    4fd0:	80 91 61 04 	lds	r24, 0x0461
    4fd4:	81 30       	cpi	r24, 0x01	; 1
    4fd6:	11 f4       	brne	.+4      	; 0x4fdc <__SPKR_close+0x36>
    4fd8:	5f 98       	cbi	0x0b, 7	; 11
    4fda:	57 98       	cbi	0x0a, 7	; 10
    4fdc:	08 95       	ret

00004fde <STEPPER_set_decel_step_values>:
    4fde:	ef 92       	push	r14
    4fe0:	ff 92       	push	r15
    4fe2:	0f 93       	push	r16
    4fe4:	1f 93       	push	r17
    4fe6:	cf 93       	push	r28
    4fe8:	df 93       	push	r29
    4fea:	eb 01       	movw	r28, r22
    4fec:	88 23       	and	r24, r24
    4fee:	21 f0       	breq	.+8      	; 0x4ff8 <STEPPER_set_decel_step_values+0x1a>
    4ff0:	81 30       	cpi	r24, 0x01	; 1
    4ff2:	09 f0       	breq	.+2      	; 0x4ff6 <STEPPER_set_decel_step_values+0x18>
    4ff4:	5a c0       	rjmp	.+180    	; 0x50aa <STEPPER_set_decel_step_values+0xcc>
    4ff6:	2d c0       	rjmp	.+90     	; 0x5052 <STEPPER_set_decel_step_values+0x74>
    4ff8:	9a 01       	movw	r18, r20
    4ffa:	40 e0       	ldi	r20, 0x00	; 0
    4ffc:	50 e0       	ldi	r21, 0x00	; 0
    4ffe:	ca 01       	movw	r24, r20
    5000:	b9 01       	movw	r22, r18
    5002:	0e 94 21 33 	call	0x6642	; 0x6642 <__mulsi3>
    5006:	20 91 46 07 	lds	r18, 0x0746
    500a:	30 91 47 07 	lds	r19, 0x0747
    500e:	22 0f       	add	r18, r18
    5010:	33 1f       	adc	r19, r19
    5012:	40 e0       	ldi	r20, 0x00	; 0
    5014:	50 e0       	ldi	r21, 0x00	; 0
    5016:	0e 94 53 33 	call	0x66a6	; 0x66a6 <__udivmodsi4>
    501a:	79 01       	movw	r14, r18
    501c:	8a 01       	movw	r16, r20
    501e:	a8 01       	movw	r20, r16
    5020:	97 01       	movw	r18, r14
    5022:	22 0f       	add	r18, r18
    5024:	33 1f       	adc	r19, r19
    5026:	44 1f       	adc	r20, r20
    5028:	55 1f       	adc	r21, r21
    502a:	ce 01       	movw	r24, r28
    502c:	a0 e0       	ldi	r26, 0x00	; 0
    502e:	b0 e0       	ldi	r27, 0x00	; 0
    5030:	82 17       	cp	r24, r18
    5032:	93 07       	cpc	r25, r19
    5034:	a4 07       	cpc	r26, r20
    5036:	b5 07       	cpc	r27, r21
    5038:	28 f0       	brcs	.+10     	; 0x5044 <STEPPER_set_decel_step_values+0x66>
    503a:	f0 92 53 07 	sts	0x0753, r15
    503e:	e0 92 52 07 	sts	0x0752, r14
    5042:	33 c0       	rjmp	.+102    	; 0x50aa <STEPPER_set_decel_step_values+0xcc>
    5044:	d6 95       	lsr	r29
    5046:	c7 95       	ror	r28
    5048:	d0 93 53 07 	sts	0x0753, r29
    504c:	c0 93 52 07 	sts	0x0752, r28
    5050:	2c c0       	rjmp	.+88     	; 0x50aa <STEPPER_set_decel_step_values+0xcc>
    5052:	9a 01       	movw	r18, r20
    5054:	40 e0       	ldi	r20, 0x00	; 0
    5056:	50 e0       	ldi	r21, 0x00	; 0
    5058:	ca 01       	movw	r24, r20
    505a:	b9 01       	movw	r22, r18
    505c:	0e 94 21 33 	call	0x6642	; 0x6642 <__mulsi3>
    5060:	20 91 48 07 	lds	r18, 0x0748
    5064:	30 91 49 07 	lds	r19, 0x0749
    5068:	22 0f       	add	r18, r18
    506a:	33 1f       	adc	r19, r19
    506c:	40 e0       	ldi	r20, 0x00	; 0
    506e:	50 e0       	ldi	r21, 0x00	; 0
    5070:	0e 94 53 33 	call	0x66a6	; 0x66a6 <__udivmodsi4>
    5074:	79 01       	movw	r14, r18
    5076:	8a 01       	movw	r16, r20
    5078:	a8 01       	movw	r20, r16
    507a:	97 01       	movw	r18, r14
    507c:	22 0f       	add	r18, r18
    507e:	33 1f       	adc	r19, r19
    5080:	44 1f       	adc	r20, r20
    5082:	55 1f       	adc	r21, r21
    5084:	ce 01       	movw	r24, r28
    5086:	a0 e0       	ldi	r26, 0x00	; 0
    5088:	b0 e0       	ldi	r27, 0x00	; 0
    508a:	82 17       	cp	r24, r18
    508c:	93 07       	cpc	r25, r19
    508e:	a4 07       	cpc	r26, r20
    5090:	b5 07       	cpc	r27, r21
    5092:	28 f0       	brcs	.+10     	; 0x509e <STEPPER_set_decel_step_values+0xc0>
    5094:	f0 92 55 07 	sts	0x0755, r15
    5098:	e0 92 54 07 	sts	0x0754, r14
    509c:	06 c0       	rjmp	.+12     	; 0x50aa <STEPPER_set_decel_step_values+0xcc>
    509e:	d6 95       	lsr	r29
    50a0:	c7 95       	ror	r28
    50a2:	d0 93 55 07 	sts	0x0755, r29
    50a6:	c0 93 54 07 	sts	0x0754, r28
    50aa:	df 91       	pop	r29
    50ac:	cf 91       	pop	r28
    50ae:	1f 91       	pop	r17
    50b0:	0f 91       	pop	r16
    50b2:	ff 90       	pop	r15
    50b4:	ef 90       	pop	r14
    50b6:	08 95       	ret

000050b8 <__TIMER0_COMPA_vect>:
    50b8:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <TMRSRVC_tick>
    50bc:	0e 94 ac 28 	call	0x5158	; 0x5158 <STEPPER_clk>
    50c0:	0e 94 85 28 	call	0x510a	; 0x510a <SPKR_beep_clk>
    50c4:	08 95       	ret

000050c6 <__TMRSRVC_init>:
    50c6:	84 b5       	in	r24, 0x24	; 36
    50c8:	82 60       	ori	r24, 0x02	; 2
    50ca:	84 bd       	out	0x24, r24	; 36
    50cc:	85 b5       	in	r24, 0x25	; 37
    50ce:	84 60       	ori	r24, 0x04	; 4
    50d0:	85 bd       	out	0x25, r24	; 37
    50d2:	8e e4       	ldi	r24, 0x4E	; 78
    50d4:	87 bd       	out	0x27, r24	; 39
    50d6:	08 95       	ret

000050d8 <TMRSRVC_tick>:
    50d8:	88 e0       	ldi	r24, 0x08	; 8
    50da:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    50de:	88 23       	and	r24, r24
    50e0:	11 f4       	brne	.+4      	; 0x50e6 <TMRSRVC_tick+0xe>
    50e2:	84 e0       	ldi	r24, 0x04	; 4
    50e4:	08 95       	ret
    50e6:	80 91 71 04 	lds	r24, 0x0471
    50ea:	88 23       	and	r24, r24
    50ec:	11 f4       	brne	.+4      	; 0x50f2 <TMRSRVC_tick+0x1a>
    50ee:	83 e0       	ldi	r24, 0x03	; 3
    50f0:	08 95       	ret
    50f2:	80 91 70 04 	lds	r24, 0x0470
    50f6:	88 23       	and	r24, r24
    50f8:	11 f0       	breq	.+4      	; 0x50fe <TMRSRVC_tick+0x26>
    50fa:	82 e0       	ldi	r24, 0x02	; 2
    50fc:	08 95       	ret
    50fe:	0e 94 f9 2a 	call	0x55f2	; 0x55f2 <TMRSRVC_process>
    5102:	81 30       	cpi	r24, 0x01	; 1
    5104:	e1 f3       	breq	.-8      	; 0x50fe <TMRSRVC_tick+0x26>
    5106:	80 e0       	ldi	r24, 0x00	; 0
    5108:	08 95       	ret

0000510a <SPKR_beep_clk>:
    510a:	80 91 61 04 	lds	r24, 0x0461
    510e:	81 30       	cpi	r24, 0x01	; 1
    5110:	11 f5       	brne	.+68     	; 0x5156 <SPKR_beep_clk+0x4c>
    5112:	80 91 6a 04 	lds	r24, 0x046A
    5116:	90 91 6b 04 	lds	r25, 0x046B
    511a:	20 91 6c 04 	lds	r18, 0x046C
    511e:	30 91 6d 04 	lds	r19, 0x046D
    5122:	28 0f       	add	r18, r24
    5124:	39 1f       	adc	r19, r25
    5126:	30 93 6b 04 	sts	0x046B, r19
    512a:	20 93 6a 04 	sts	0x046A, r18
    512e:	80 91 6a 04 	lds	r24, 0x046A
    5132:	90 91 6b 04 	lds	r25, 0x046B
    5136:	88 5e       	subi	r24, 0xE8	; 232
    5138:	93 40       	sbci	r25, 0x03	; 3
    513a:	6c f0       	brlt	.+26     	; 0x5156 <SPKR_beep_clk+0x4c>
    513c:	8b b1       	in	r24, 0x0b	; 11
    513e:	80 58       	subi	r24, 0x80	; 128
    5140:	8b b9       	out	0x0b, r24	; 11
    5142:	80 91 6a 04 	lds	r24, 0x046A
    5146:	90 91 6b 04 	lds	r25, 0x046B
    514a:	88 5e       	subi	r24, 0xE8	; 232
    514c:	93 40       	sbci	r25, 0x03	; 3
    514e:	90 93 6b 04 	sts	0x046B, r25
    5152:	80 93 6a 04 	sts	0x046A, r24
    5156:	08 95       	ret

00005158 <STEPPER_clk>:
    5158:	87 e0       	ldi	r24, 0x07	; 7
    515a:	0e 94 ab 1e 	call	0x3d56	; 0x3d56 <SYS_get_state>
    515e:	81 30       	cpi	r24, 0x01	; 1
    5160:	09 f0       	breq	.+2      	; 0x5164 <STEPPER_clk+0xc>
    5162:	aa c0       	rjmp	.+340    	; 0x52b8 <STEPPER_clk+0x160>
    5164:	80 91 46 07 	lds	r24, 0x0746
    5168:	90 91 47 07 	lds	r25, 0x0747
    516c:	89 2b       	or	r24, r25
    516e:	09 f1       	breq	.+66     	; 0x51b2 <STEPPER_clk+0x5a>
    5170:	80 91 6a 07 	lds	r24, 0x076A
    5174:	90 91 6b 07 	lds	r25, 0x076B
    5178:	20 91 46 07 	lds	r18, 0x0746
    517c:	30 91 47 07 	lds	r19, 0x0747
    5180:	82 0f       	add	r24, r18
    5182:	93 1f       	adc	r25, r19
    5184:	90 93 6b 07 	sts	0x076B, r25
    5188:	80 93 6a 07 	sts	0x076A, r24
    518c:	80 91 6a 07 	lds	r24, 0x076A
    5190:	90 91 6b 07 	lds	r25, 0x076B
    5194:	88 5e       	subi	r24, 0xE8	; 232
    5196:	93 40       	sbci	r25, 0x03	; 3
    5198:	a4 f0       	brlt	.+40     	; 0x51c2 <STEPPER_clk+0x6a>
    519a:	80 91 6a 07 	lds	r24, 0x076A
    519e:	90 91 6b 07 	lds	r25, 0x076B
    51a2:	88 5e       	subi	r24, 0xE8	; 232
    51a4:	93 40       	sbci	r25, 0x03	; 3
    51a6:	90 93 6b 07 	sts	0x076B, r25
    51aa:	80 93 6a 07 	sts	0x076A, r24
    51ae:	41 e0       	ldi	r20, 0x01	; 1
    51b0:	09 c0       	rjmp	.+18     	; 0x51c4 <STEPPER_clk+0x6c>
    51b2:	80 91 3e 07 	lds	r24, 0x073E
    51b6:	90 91 3f 07 	lds	r25, 0x073F
    51ba:	90 93 43 07 	sts	0x0743, r25
    51be:	80 93 42 07 	sts	0x0742, r24
    51c2:	40 e0       	ldi	r20, 0x00	; 0
    51c4:	80 91 48 07 	lds	r24, 0x0748
    51c8:	90 91 49 07 	lds	r25, 0x0749
    51cc:	89 2b       	or	r24, r25
    51ce:	09 f1       	breq	.+66     	; 0x5212 <STEPPER_clk+0xba>
    51d0:	80 91 6c 07 	lds	r24, 0x076C
    51d4:	90 91 6d 07 	lds	r25, 0x076D
    51d8:	20 91 48 07 	lds	r18, 0x0748
    51dc:	30 91 49 07 	lds	r19, 0x0749
    51e0:	82 0f       	add	r24, r18
    51e2:	93 1f       	adc	r25, r19
    51e4:	90 93 6d 07 	sts	0x076D, r25
    51e8:	80 93 6c 07 	sts	0x076C, r24
    51ec:	80 91 6c 07 	lds	r24, 0x076C
    51f0:	90 91 6d 07 	lds	r25, 0x076D
    51f4:	88 5e       	subi	r24, 0xE8	; 232
    51f6:	93 40       	sbci	r25, 0x03	; 3
    51f8:	a4 f0       	brlt	.+40     	; 0x5222 <STEPPER_clk+0xca>
    51fa:	80 91 6c 07 	lds	r24, 0x076C
    51fe:	90 91 6d 07 	lds	r25, 0x076D
    5202:	88 5e       	subi	r24, 0xE8	; 232
    5204:	93 40       	sbci	r25, 0x03	; 3
    5206:	90 93 6d 07 	sts	0x076D, r25
    520a:	80 93 6c 07 	sts	0x076C, r24
    520e:	61 e0       	ldi	r22, 0x01	; 1
    5210:	09 c0       	rjmp	.+18     	; 0x5224 <STEPPER_clk+0xcc>
    5212:	80 91 40 07 	lds	r24, 0x0740
    5216:	90 91 41 07 	lds	r25, 0x0741
    521a:	90 93 45 07 	sts	0x0745, r25
    521e:	80 93 44 07 	sts	0x0744, r24
    5222:	60 e0       	ldi	r22, 0x00	; 0
    5224:	84 2f       	mov	r24, r20
    5226:	0e 94 5d 29 	call	0x52ba	; 0x52ba <STEPPER_process_accel>
    522a:	80 91 66 07 	lds	r24, 0x0766
    522e:	90 91 67 07 	lds	r25, 0x0767
    5232:	20 91 42 07 	lds	r18, 0x0742
    5236:	30 91 43 07 	lds	r19, 0x0743
    523a:	28 0f       	add	r18, r24
    523c:	39 1f       	adc	r19, r25
    523e:	30 93 67 07 	sts	0x0767, r19
    5242:	20 93 66 07 	sts	0x0766, r18
    5246:	80 91 66 07 	lds	r24, 0x0766
    524a:	90 91 67 07 	lds	r25, 0x0767
    524e:	88 5e       	subi	r24, 0xE8	; 232
    5250:	93 40       	sbci	r25, 0x03	; 3
    5252:	14 f4       	brge	.+4      	; 0x5258 <STEPPER_clk+0x100>
    5254:	40 e0       	ldi	r20, 0x00	; 0
    5256:	0b c0       	rjmp	.+22     	; 0x526e <STEPPER_clk+0x116>
    5258:	80 91 66 07 	lds	r24, 0x0766
    525c:	90 91 67 07 	lds	r25, 0x0767
    5260:	88 5e       	subi	r24, 0xE8	; 232
    5262:	93 40       	sbci	r25, 0x03	; 3
    5264:	90 93 67 07 	sts	0x0767, r25
    5268:	80 93 66 07 	sts	0x0766, r24
    526c:	41 e0       	ldi	r20, 0x01	; 1
    526e:	80 91 68 07 	lds	r24, 0x0768
    5272:	90 91 69 07 	lds	r25, 0x0769
    5276:	20 91 44 07 	lds	r18, 0x0744
    527a:	30 91 45 07 	lds	r19, 0x0745
    527e:	28 0f       	add	r18, r24
    5280:	39 1f       	adc	r19, r25
    5282:	30 93 69 07 	sts	0x0769, r19
    5286:	20 93 68 07 	sts	0x0768, r18
    528a:	80 91 68 07 	lds	r24, 0x0768
    528e:	90 91 69 07 	lds	r25, 0x0769
    5292:	88 5e       	subi	r24, 0xE8	; 232
    5294:	93 40       	sbci	r25, 0x03	; 3
    5296:	14 f4       	brge	.+4      	; 0x529c <STEPPER_clk+0x144>
    5298:	60 e0       	ldi	r22, 0x00	; 0
    529a:	0b c0       	rjmp	.+22     	; 0x52b2 <STEPPER_clk+0x15a>
    529c:	80 91 68 07 	lds	r24, 0x0768
    52a0:	90 91 69 07 	lds	r25, 0x0769
    52a4:	88 5e       	subi	r24, 0xE8	; 232
    52a6:	93 40       	sbci	r25, 0x03	; 3
    52a8:	90 93 69 07 	sts	0x0769, r25
    52ac:	80 93 68 07 	sts	0x0768, r24
    52b0:	61 e0       	ldi	r22, 0x01	; 1
    52b2:	84 2f       	mov	r24, r20
    52b4:	0e 94 a2 29 	call	0x5344	; 0x5344 <STEPPER_process_run_mode>
    52b8:	08 95       	ret

000052ba <STEPPER_process_accel>:
    52ba:	88 23       	and	r24, r24
    52bc:	f1 f0       	breq	.+60     	; 0x52fa <STEPPER_process_accel+0x40>
    52be:	20 91 3e 07 	lds	r18, 0x073E
    52c2:	30 91 3f 07 	lds	r19, 0x073F
    52c6:	80 91 42 07 	lds	r24, 0x0742
    52ca:	90 91 43 07 	lds	r25, 0x0743
    52ce:	28 1b       	sub	r18, r24
    52d0:	39 0b       	sbc	r19, r25
    52d2:	12 16       	cp	r1, r18
    52d4:	13 06       	cpc	r1, r19
    52d6:	34 f4       	brge	.+12     	; 0x52e4 <STEPPER_process_accel+0x2a>
    52d8:	80 91 42 07 	lds	r24, 0x0742
    52dc:	90 91 43 07 	lds	r25, 0x0743
    52e0:	01 96       	adiw	r24, 0x01	; 1
    52e2:	07 c0       	rjmp	.+14     	; 0x52f2 <STEPPER_process_accel+0x38>
    52e4:	23 2b       	or	r18, r19
    52e6:	49 f0       	breq	.+18     	; 0x52fa <STEPPER_process_accel+0x40>
    52e8:	80 91 42 07 	lds	r24, 0x0742
    52ec:	90 91 43 07 	lds	r25, 0x0743
    52f0:	01 97       	sbiw	r24, 0x01	; 1
    52f2:	90 93 43 07 	sts	0x0743, r25
    52f6:	80 93 42 07 	sts	0x0742, r24
    52fa:	66 23       	and	r22, r22
    52fc:	11 f1       	breq	.+68     	; 0x5342 <STEPPER_process_accel+0x88>
    52fe:	20 91 40 07 	lds	r18, 0x0740
    5302:	30 91 41 07 	lds	r19, 0x0741
    5306:	80 91 44 07 	lds	r24, 0x0744
    530a:	90 91 45 07 	lds	r25, 0x0745
    530e:	28 1b       	sub	r18, r24
    5310:	39 0b       	sbc	r19, r25
    5312:	12 16       	cp	r1, r18
    5314:	13 06       	cpc	r1, r19
    5316:	54 f4       	brge	.+20     	; 0x532c <STEPPER_process_accel+0x72>
    5318:	80 91 44 07 	lds	r24, 0x0744
    531c:	90 91 45 07 	lds	r25, 0x0745
    5320:	01 96       	adiw	r24, 0x01	; 1
    5322:	90 93 45 07 	sts	0x0745, r25
    5326:	80 93 44 07 	sts	0x0744, r24
    532a:	08 95       	ret
    532c:	23 2b       	or	r18, r19
    532e:	49 f0       	breq	.+18     	; 0x5342 <STEPPER_process_accel+0x88>
    5330:	80 91 44 07 	lds	r24, 0x0744
    5334:	90 91 45 07 	lds	r25, 0x0745
    5338:	01 97       	sbiw	r24, 0x01	; 1
    533a:	90 93 45 07 	sts	0x0745, r25
    533e:	80 93 44 07 	sts	0x0744, r24
    5342:	08 95       	ret

00005344 <STEPPER_process_run_mode>:
    5344:	0f 93       	push	r16
    5346:	1f 93       	push	r17
    5348:	18 2f       	mov	r17, r24
    534a:	06 2f       	mov	r16, r22
    534c:	80 91 72 07 	lds	r24, 0x0772
    5350:	88 23       	and	r24, r24
    5352:	09 f0       	breq	.+2      	; 0x5356 <STEPPER_process_run_mode+0x12>
    5354:	e7 c0       	rjmp	.+462    	; 0x5524 <STEPPER_process_run_mode+0x1e0>
    5356:	80 91 5a 07 	lds	r24, 0x075A
    535a:	88 23       	and	r24, r24
    535c:	09 f0       	breq	.+2      	; 0x5360 <STEPPER_process_run_mode+0x1c>
    535e:	5a c0       	rjmp	.+180    	; 0x5414 <STEPPER_process_run_mode+0xd0>
    5360:	80 91 42 07 	lds	r24, 0x0742
    5364:	90 91 43 07 	lds	r25, 0x0743
    5368:	89 2b       	or	r24, r25
    536a:	e9 f4       	brne	.+58     	; 0x53a6 <STEPPER_process_run_mode+0x62>
    536c:	80 91 72 04 	lds	r24, 0x0472
    5370:	83 7e       	andi	r24, 0xE3	; 227
    5372:	80 93 72 04 	sts	0x0472, r24
    5376:	10 92 63 07 	sts	0x0763, r1
    537a:	80 91 6e 07 	lds	r24, 0x076E
    537e:	88 23       	and	r24, r24
    5380:	09 f4       	brne	.+2      	; 0x5384 <STEPPER_process_run_mode+0x40>
    5382:	5d c0       	rjmp	.+186    	; 0x543e <STEPPER_process_run_mode+0xfa>
    5384:	60 91 5c 07 	lds	r22, 0x075C
    5388:	80 e0       	ldi	r24, 0x00	; 0
    538a:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <STEPPER_stop>
    538e:	e0 91 70 07 	lds	r30, 0x0770
    5392:	f0 91 71 07 	lds	r31, 0x0771
    5396:	30 97       	sbiw	r30, 0x00	; 0
    5398:	09 f4       	brne	.+2      	; 0x539c <STEPPER_process_run_mode+0x58>
    539a:	51 c0       	rjmp	.+162    	; 0x543e <STEPPER_process_run_mode+0xfa>
    539c:	81 e0       	ldi	r24, 0x01	; 1
    539e:	80 83       	st	Z, r24
    53a0:	10 92 6e 07 	sts	0x076E, r1
    53a4:	4c c0       	rjmp	.+152    	; 0x543e <STEPPER_process_run_mode+0xfa>
    53a6:	80 91 3c 07 	lds	r24, 0x073C
    53aa:	81 30       	cpi	r24, 0x01	; 1
    53ac:	41 f4       	brne	.+16     	; 0x53be <STEPPER_process_run_mode+0x7a>
    53ae:	80 91 4e 07 	lds	r24, 0x074E
    53b2:	90 91 4f 07 	lds	r25, 0x074F
    53b6:	01 97       	sbiw	r24, 0x01	; 1
    53b8:	11 f4       	brne	.+4      	; 0x53be <STEPPER_process_run_mode+0x7a>
    53ba:	11 e0       	ldi	r17, 0x01	; 1
    53bc:	02 c0       	rjmp	.+4      	; 0x53c2 <STEPPER_process_run_mode+0x7e>
    53be:	11 23       	and	r17, r17
    53c0:	f1 f1       	breq	.+124    	; 0x543e <STEPPER_process_run_mode+0xfa>
    53c2:	e0 91 61 07 	lds	r30, 0x0761
    53c6:	f0 e0       	ldi	r31, 0x00	; 0
    53c8:	ef 55       	subi	r30, 0x5F	; 95
    53ca:	fc 4f       	sbci	r31, 0xFC	; 252
    53cc:	90 91 72 04 	lds	r25, 0x0472
    53d0:	93 7e       	andi	r25, 0xE3	; 227
    53d2:	80 81       	ld	r24, Z
    53d4:	89 2b       	or	r24, r25
    53d6:	80 93 72 04 	sts	0x0472, r24
    53da:	80 91 5f 07 	lds	r24, 0x075F
    53de:	88 23       	and	r24, r24
    53e0:	21 f4       	brne	.+8      	; 0x53ea <STEPPER_process_run_mode+0xa6>
    53e2:	80 91 61 07 	lds	r24, 0x0761
    53e6:	8f 5f       	subi	r24, 0xFF	; 255
    53e8:	03 c0       	rjmp	.+6      	; 0x53f0 <STEPPER_process_run_mode+0xac>
    53ea:	80 91 61 07 	lds	r24, 0x0761
    53ee:	81 50       	subi	r24, 0x01	; 1
    53f0:	80 93 61 07 	sts	0x0761, r24
    53f4:	80 91 61 07 	lds	r24, 0x0761
    53f8:	83 70       	andi	r24, 0x03	; 3
    53fa:	80 93 61 07 	sts	0x0761, r24
    53fe:	81 e0       	ldi	r24, 0x01	; 1
    5400:	80 93 63 07 	sts	0x0763, r24
    5404:	80 91 3c 07 	lds	r24, 0x073C
    5408:	81 30       	cpi	r24, 0x01	; 1
    540a:	c9 f4       	brne	.+50     	; 0x543e <STEPPER_process_run_mode+0xfa>
    540c:	80 e0       	ldi	r24, 0x00	; 0
    540e:	0e 94 a5 2a 	call	0x554a	; 0x554a <STEPPER_process_step_mode>
    5412:	15 c0       	rjmp	.+42     	; 0x543e <STEPPER_process_run_mode+0xfa>
    5414:	90 91 72 04 	lds	r25, 0x0472
    5418:	93 7e       	andi	r25, 0xE3	; 227
    541a:	90 93 72 04 	sts	0x0472, r25
    541e:	e0 91 61 07 	lds	r30, 0x0761
    5422:	f0 e0       	ldi	r31, 0x00	; 0
    5424:	ef 55       	subi	r30, 0x5F	; 95
    5426:	fc 4f       	sbci	r31, 0xFC	; 252
    5428:	80 81       	ld	r24, Z
    542a:	89 2b       	or	r24, r25
    542c:	80 93 72 04 	sts	0x0472, r24
    5430:	82 e0       	ldi	r24, 0x02	; 2
    5432:	80 93 63 07 	sts	0x0763, r24
    5436:	10 92 43 07 	sts	0x0743, r1
    543a:	10 92 42 07 	sts	0x0742, r1
    543e:	80 91 5b 07 	lds	r24, 0x075B
    5442:	88 23       	and	r24, r24
    5444:	09 f0       	breq	.+2      	; 0x5448 <STEPPER_process_run_mode+0x104>
    5446:	59 c0       	rjmp	.+178    	; 0x54fa <STEPPER_process_run_mode+0x1b6>
    5448:	80 91 44 07 	lds	r24, 0x0744
    544c:	90 91 45 07 	lds	r25, 0x0745
    5450:	89 2b       	or	r24, r25
    5452:	e9 f4       	brne	.+58     	; 0x548e <STEPPER_process_run_mode+0x14a>
    5454:	80 91 72 04 	lds	r24, 0x0472
    5458:	8f 71       	andi	r24, 0x1F	; 31
    545a:	80 93 72 04 	sts	0x0472, r24
    545e:	10 92 64 07 	sts	0x0764, r1
    5462:	80 91 6f 07 	lds	r24, 0x076F
    5466:	88 23       	and	r24, r24
    5468:	09 f4       	brne	.+2      	; 0x546c <STEPPER_process_run_mode+0x128>
    546a:	5c c0       	rjmp	.+184    	; 0x5524 <STEPPER_process_run_mode+0x1e0>
    546c:	60 91 5d 07 	lds	r22, 0x075D
    5470:	81 e0       	ldi	r24, 0x01	; 1
    5472:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <STEPPER_stop>
    5476:	e0 91 70 07 	lds	r30, 0x0770
    547a:	f0 91 71 07 	lds	r31, 0x0771
    547e:	30 97       	sbiw	r30, 0x00	; 0
    5480:	09 f4       	brne	.+2      	; 0x5484 <STEPPER_process_run_mode+0x140>
    5482:	50 c0       	rjmp	.+160    	; 0x5524 <STEPPER_process_run_mode+0x1e0>
    5484:	81 e0       	ldi	r24, 0x01	; 1
    5486:	81 83       	std	Z+1, r24	; 0x01
    5488:	10 92 6f 07 	sts	0x076F, r1
    548c:	4b c0       	rjmp	.+150    	; 0x5524 <STEPPER_process_run_mode+0x1e0>
    548e:	80 91 3d 07 	lds	r24, 0x073D
    5492:	81 30       	cpi	r24, 0x01	; 1
    5494:	41 f4       	brne	.+16     	; 0x54a6 <STEPPER_process_run_mode+0x162>
    5496:	80 91 50 07 	lds	r24, 0x0750
    549a:	90 91 51 07 	lds	r25, 0x0751
    549e:	01 97       	sbiw	r24, 0x01	; 1
    54a0:	11 f4       	brne	.+4      	; 0x54a6 <STEPPER_process_run_mode+0x162>
    54a2:	01 e0       	ldi	r16, 0x01	; 1
    54a4:	02 c0       	rjmp	.+4      	; 0x54aa <STEPPER_process_run_mode+0x166>
    54a6:	00 23       	and	r16, r16
    54a8:	e9 f1       	breq	.+122    	; 0x5524 <STEPPER_process_run_mode+0x1e0>
    54aa:	e0 91 62 07 	lds	r30, 0x0762
    54ae:	f0 e0       	ldi	r31, 0x00	; 0
    54b0:	eb 55       	subi	r30, 0x5B	; 91
    54b2:	fc 4f       	sbci	r31, 0xFC	; 252
    54b4:	90 91 72 04 	lds	r25, 0x0472
    54b8:	9f 71       	andi	r25, 0x1F	; 31
    54ba:	80 81       	ld	r24, Z
    54bc:	89 2b       	or	r24, r25
    54be:	80 93 72 04 	sts	0x0472, r24
    54c2:	80 91 60 07 	lds	r24, 0x0760
    54c6:	88 23       	and	r24, r24
    54c8:	21 f4       	brne	.+8      	; 0x54d2 <STEPPER_process_run_mode+0x18e>
    54ca:	80 91 62 07 	lds	r24, 0x0762
    54ce:	8f 5f       	subi	r24, 0xFF	; 255
    54d0:	03 c0       	rjmp	.+6      	; 0x54d8 <STEPPER_process_run_mode+0x194>
    54d2:	80 91 62 07 	lds	r24, 0x0762
    54d6:	81 50       	subi	r24, 0x01	; 1
    54d8:	80 93 62 07 	sts	0x0762, r24
    54dc:	80 91 62 07 	lds	r24, 0x0762
    54e0:	83 70       	andi	r24, 0x03	; 3
    54e2:	80 93 62 07 	sts	0x0762, r24
    54e6:	81 e0       	ldi	r24, 0x01	; 1
    54e8:	80 93 64 07 	sts	0x0764, r24
    54ec:	80 91 3d 07 	lds	r24, 0x073D
    54f0:	81 30       	cpi	r24, 0x01	; 1
    54f2:	c1 f4       	brne	.+48     	; 0x5524 <STEPPER_process_run_mode+0x1e0>
    54f4:	0e 94 a5 2a 	call	0x554a	; 0x554a <STEPPER_process_step_mode>
    54f8:	15 c0       	rjmp	.+42     	; 0x5524 <STEPPER_process_run_mode+0x1e0>
    54fa:	90 91 72 04 	lds	r25, 0x0472
    54fe:	9f 71       	andi	r25, 0x1F	; 31
    5500:	90 93 72 04 	sts	0x0472, r25
    5504:	e0 91 62 07 	lds	r30, 0x0762
    5508:	f0 e0       	ldi	r31, 0x00	; 0
    550a:	eb 55       	subi	r30, 0x5B	; 91
    550c:	fc 4f       	sbci	r31, 0xFC	; 252
    550e:	80 81       	ld	r24, Z
    5510:	89 2b       	or	r24, r25
    5512:	80 93 72 04 	sts	0x0472, r24
    5516:	82 e0       	ldi	r24, 0x02	; 2
    5518:	80 93 64 07 	sts	0x0764, r24
    551c:	10 92 45 07 	sts	0x0745, r1
    5520:	10 92 44 07 	sts	0x0744, r1
    5524:	80 91 65 07 	lds	r24, 0x0765
    5528:	88 23       	and	r24, r24
    552a:	31 f4       	brne	.+12     	; 0x5538 <STEPPER_process_run_mode+0x1f4>
    552c:	82 e7       	ldi	r24, 0x72	; 114
    552e:	94 e0       	ldi	r25, 0x04	; 4
    5530:	61 2f       	mov	r22, r17
    5532:	40 2f       	mov	r20, r16
    5534:	0e 94 67 2b 	call	0x56ce	; 0x56ce <STEPPER_process_pwm>
    5538:	88 b1       	in	r24, 0x08	; 8
    553a:	83 70       	andi	r24, 0x03	; 3
    553c:	90 91 72 04 	lds	r25, 0x0472
    5540:	89 2b       	or	r24, r25
    5542:	88 b9       	out	0x08, r24	; 8
    5544:	1f 91       	pop	r17
    5546:	0f 91       	pop	r16
    5548:	08 95       	ret

0000554a <STEPPER_process_step_mode>:
    554a:	88 23       	and	r24, r24
    554c:	21 f0       	breq	.+8      	; 0x5556 <STEPPER_process_step_mode+0xc>
    554e:	81 30       	cpi	r24, 0x01	; 1
    5550:	09 f0       	breq	.+2      	; 0x5554 <STEPPER_process_step_mode+0xa>
    5552:	4e c0       	rjmp	.+156    	; 0x55f0 <STEPPER_process_step_mode+0xa6>
    5554:	27 c0       	rjmp	.+78     	; 0x55a4 <STEPPER_process_step_mode+0x5a>
    5556:	80 91 4e 07 	lds	r24, 0x074E
    555a:	90 91 4f 07 	lds	r25, 0x074F
    555e:	89 2b       	or	r24, r25
    5560:	49 f0       	breq	.+18     	; 0x5574 <STEPPER_process_step_mode+0x2a>
    5562:	80 91 4e 07 	lds	r24, 0x074E
    5566:	90 91 4f 07 	lds	r25, 0x074F
    556a:	01 97       	sbiw	r24, 0x01	; 1
    556c:	90 93 4f 07 	sts	0x074F, r25
    5570:	80 93 4e 07 	sts	0x074E, r24
    5574:	80 91 6e 07 	lds	r24, 0x076E
    5578:	88 23       	and	r24, r24
    557a:	d1 f5       	brne	.+116    	; 0x55f0 <STEPPER_process_step_mode+0xa6>
    557c:	20 91 4e 07 	lds	r18, 0x074E
    5580:	30 91 4f 07 	lds	r19, 0x074F
    5584:	80 91 52 07 	lds	r24, 0x0752
    5588:	90 91 53 07 	lds	r25, 0x0753
    558c:	28 17       	cp	r18, r24
    558e:	39 07       	cpc	r19, r25
    5590:	79 f5       	brne	.+94     	; 0x55f0 <STEPPER_process_step_mode+0xa6>
    5592:	80 e0       	ldi	r24, 0x00	; 0
    5594:	60 e0       	ldi	r22, 0x00	; 0
    5596:	70 e0       	ldi	r23, 0x00	; 0
    5598:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <STEPPER_set_speed>
    559c:	81 e0       	ldi	r24, 0x01	; 1
    559e:	80 93 6e 07 	sts	0x076E, r24
    55a2:	08 95       	ret
    55a4:	80 91 50 07 	lds	r24, 0x0750
    55a8:	90 91 51 07 	lds	r25, 0x0751
    55ac:	89 2b       	or	r24, r25
    55ae:	49 f0       	breq	.+18     	; 0x55c2 <STEPPER_process_step_mode+0x78>
    55b0:	80 91 50 07 	lds	r24, 0x0750
    55b4:	90 91 51 07 	lds	r25, 0x0751
    55b8:	01 97       	sbiw	r24, 0x01	; 1
    55ba:	90 93 51 07 	sts	0x0751, r25
    55be:	80 93 50 07 	sts	0x0750, r24
    55c2:	80 91 6f 07 	lds	r24, 0x076F
    55c6:	88 23       	and	r24, r24
    55c8:	99 f4       	brne	.+38     	; 0x55f0 <STEPPER_process_step_mode+0xa6>
    55ca:	20 91 50 07 	lds	r18, 0x0750
    55ce:	30 91 51 07 	lds	r19, 0x0751
    55d2:	80 91 54 07 	lds	r24, 0x0754
    55d6:	90 91 55 07 	lds	r25, 0x0755
    55da:	28 17       	cp	r18, r24
    55dc:	39 07       	cpc	r19, r25
    55de:	41 f4       	brne	.+16     	; 0x55f0 <STEPPER_process_step_mode+0xa6>
    55e0:	81 e0       	ldi	r24, 0x01	; 1
    55e2:	60 e0       	ldi	r22, 0x00	; 0
    55e4:	70 e0       	ldi	r23, 0x00	; 0
    55e6:	0e 94 8a 1d 	call	0x3b14	; 0x3b14 <STEPPER_set_speed>
    55ea:	81 e0       	ldi	r24, 0x01	; 1
    55ec:	80 93 6f 07 	sts	0x076F, r24
    55f0:	08 95       	ret

000055f2 <TMRSRVC_process>:
    55f2:	ff 92       	push	r15
    55f4:	0f 93       	push	r16
    55f6:	1f 93       	push	r17
    55f8:	cf 93       	push	r28
    55fa:	df 93       	push	r29
    55fc:	80 91 ac 07 	lds	r24, 0x07AC
    5600:	88 23       	and	r24, r24
    5602:	09 f4       	brne	.+2      	; 0x5606 <TMRSRVC_process+0x14>
    5604:	59 c0       	rjmp	.+178    	; 0x56b8 <TMRSRVC_process+0xc6>
    5606:	00 91 ad 07 	lds	r16, 0x07AD
    560a:	10 91 ae 07 	lds	r17, 0x07AE
    560e:	f8 01       	movw	r30, r16
    5610:	c0 81       	ld	r28, Z
    5612:	d1 81       	ldd	r29, Z+1	; 0x01
    5614:	8c 81       	ldd	r24, Y+4	; 0x04
    5616:	9d 81       	ldd	r25, Y+5	; 0x05
    5618:	01 97       	sbiw	r24, 0x01	; 1
    561a:	9d 83       	std	Y+5, r25	; 0x05
    561c:	8c 83       	std	Y+4, r24	; 0x04
    561e:	18 16       	cp	r1, r24
    5620:	19 06       	cpc	r1, r25
    5622:	0c f4       	brge	.+2      	; 0x5626 <TMRSRVC_process+0x34>
    5624:	49 c0       	rjmp	.+146    	; 0x56b8 <TMRSRVC_process+0xc6>
    5626:	89 81       	ldd	r24, Y+1	; 0x01
    5628:	80 ff       	sbrs	r24, 0
    562a:	05 c0       	rjmp	.+10     	; 0x5636 <TMRSRVC_process+0x44>
    562c:	8e 81       	ldd	r24, Y+6	; 0x06
    562e:	88 23       	and	r24, r24
    5630:	11 f4       	brne	.+4      	; 0x5636 <TMRSRVC_process+0x44>
    5632:	81 e0       	ldi	r24, 0x01	; 1
    5634:	8e 83       	std	Y+6, r24	; 0x06
    5636:	89 81       	ldd	r24, Y+1	; 0x01
    5638:	81 ff       	sbrs	r24, 1
    563a:	03 c0       	rjmp	.+6      	; 0x5642 <TMRSRVC_process+0x50>
    563c:	ef 81       	ldd	r30, Y+7	; 0x07
    563e:	f8 85       	ldd	r31, Y+8	; 0x08
    5640:	09 95       	icall
    5642:	80 91 ac 07 	lds	r24, 0x07AC
    5646:	82 30       	cpi	r24, 0x02	; 2
    5648:	a8 f0       	brcs	.+42     	; 0x5674 <TMRSRVC_process+0x82>
    564a:	f8 01       	movw	r30, r16
    564c:	82 81       	ldd	r24, Z+2	; 0x02
    564e:	93 81       	ldd	r25, Z+3	; 0x03
    5650:	90 93 ae 07 	sts	0x07AE, r25
    5654:	80 93 ad 07 	sts	0x07AD, r24
    5658:	13 82       	std	Z+3, r1	; 0x03
    565a:	12 82       	std	Z+2, r1	; 0x02
    565c:	e0 91 00 00 	lds	r30, 0x0000
    5660:	f0 91 01 00 	lds	r31, 0x0001
    5664:	84 81       	ldd	r24, Z+4	; 0x04
    5666:	95 81       	ldd	r25, Z+5	; 0x05
    5668:	18 16       	cp	r1, r24
    566a:	19 06       	cpc	r1, r25
    566c:	3c f0       	brlt	.+14     	; 0x567c <TMRSRVC_process+0x8a>
    566e:	ff 24       	eor	r15, r15
    5670:	f3 94       	inc	r15
    5672:	05 c0       	rjmp	.+10     	; 0x567e <TMRSRVC_process+0x8c>
    5674:	10 92 ae 07 	sts	0x07AE, r1
    5678:	10 92 ad 07 	sts	0x07AD, r1
    567c:	ff 24       	eor	r15, r15
    567e:	80 91 ac 07 	lds	r24, 0x07AC
    5682:	81 50       	subi	r24, 0x01	; 1
    5684:	80 93 ac 07 	sts	0x07AC, r24
    5688:	80 91 ac 07 	lds	r24, 0x07AC
    568c:	88 23       	and	r24, r24
    568e:	11 f4       	brne	.+4      	; 0x5694 <TMRSRVC_process+0xa2>
    5690:	0e 94 64 2b 	call	0x56c8	; 0x56c8 <TMRSRVC_stop>
    5694:	89 81       	ldd	r24, Y+1	; 0x01
    5696:	82 ff       	sbrs	r24, 2
    5698:	08 c0       	rjmp	.+16     	; 0x56aa <TMRSRVC_process+0xb8>
    569a:	8a 81       	ldd	r24, Y+2	; 0x02
    569c:	9b 81       	ldd	r25, Y+3	; 0x03
    569e:	9d 83       	std	Y+5, r25	; 0x05
    56a0:	8c 83       	std	Y+4, r24	; 0x04
    56a2:	c8 01       	movw	r24, r16
    56a4:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <TMRSRVC_insert>
    56a8:	08 c0       	rjmp	.+16     	; 0x56ba <TMRSRVC_process+0xc8>
    56aa:	c8 01       	movw	r24, r16
    56ac:	0e 94 6d 34 	call	0x68da	; 0x68da <free>
    56b0:	89 81       	ldd	r24, Y+1	; 0x01
    56b2:	8f 7e       	andi	r24, 0xEF	; 239
    56b4:	89 83       	std	Y+1, r24	; 0x01
    56b6:	01 c0       	rjmp	.+2      	; 0x56ba <TMRSRVC_process+0xc8>
    56b8:	ff 24       	eor	r15, r15
    56ba:	8f 2d       	mov	r24, r15
    56bc:	df 91       	pop	r29
    56be:	cf 91       	pop	r28
    56c0:	1f 91       	pop	r17
    56c2:	0f 91       	pop	r16
    56c4:	ff 90       	pop	r15
    56c6:	08 95       	ret

000056c8 <TMRSRVC_stop>:
    56c8:	10 92 71 04 	sts	0x0471, r1
    56cc:	08 95       	ret

000056ce <STEPPER_process_pwm>:
    56ce:	fc 01       	movw	r30, r24
    56d0:	80 91 63 07 	lds	r24, 0x0763
    56d4:	82 30       	cpi	r24, 0x02	; 2
    56d6:	69 f4       	brne	.+26     	; 0x56f2 <STEPPER_process_pwm+0x24>
    56d8:	80 91 76 04 	lds	r24, 0x0476
    56dc:	91 e0       	ldi	r25, 0x01	; 1
    56de:	89 27       	eor	r24, r25
    56e0:	80 93 76 04 	sts	0x0476, r24
    56e4:	88 23       	and	r24, r24
    56e6:	09 f0       	breq	.+2      	; 0x56ea <STEPPER_process_pwm+0x1c>
    56e8:	3e c0       	rjmp	.+124    	; 0x5766 <STEPPER_process_pwm+0x98>
    56ea:	80 81       	ld	r24, Z
    56ec:	83 7e       	andi	r24, 0xE3	; 227
    56ee:	80 83       	st	Z, r24
    56f0:	3a c0       	rjmp	.+116    	; 0x5766 <STEPPER_process_pwm+0x98>
    56f2:	80 91 42 07 	lds	r24, 0x0742
    56f6:	90 91 43 07 	lds	r25, 0x0743
    56fa:	c3 97       	sbiw	r24, 0x33	; 51
    56fc:	a4 f5       	brge	.+104    	; 0x5766 <STEPPER_process_pwm+0x98>
    56fe:	66 23       	and	r22, r22
    5700:	d1 f0       	breq	.+52     	; 0x5736 <STEPPER_process_pwm+0x68>
    5702:	20 91 42 07 	lds	r18, 0x0742
    5706:	30 91 43 07 	lds	r19, 0x0743
    570a:	80 e6       	ldi	r24, 0x60	; 96
    570c:	90 e0       	ldi	r25, 0x00	; 0
    570e:	bc 01       	movw	r22, r24
    5710:	26 9f       	mul	r18, r22
    5712:	c0 01       	movw	r24, r0
    5714:	27 9f       	mul	r18, r23
    5716:	90 0d       	add	r25, r0
    5718:	36 9f       	mul	r19, r22
    571a:	90 0d       	add	r25, r0
    571c:	11 24       	eor	r1, r1
    571e:	88 0f       	add	r24, r24
    5720:	89 2f       	mov	r24, r25
    5722:	88 1f       	adc	r24, r24
    5724:	99 0b       	sbc	r25, r25
    5726:	90 93 57 07 	sts	0x0757, r25
    572a:	80 93 56 07 	sts	0x0756, r24
    572e:	81 e0       	ldi	r24, 0x01	; 1
    5730:	80 93 74 04 	sts	0x0474, r24
    5734:	18 c0       	rjmp	.+48     	; 0x5766 <STEPPER_process_pwm+0x98>
    5736:	80 91 74 04 	lds	r24, 0x0474
    573a:	88 23       	and	r24, r24
    573c:	a1 f0       	breq	.+40     	; 0x5766 <STEPPER_process_pwm+0x98>
    573e:	80 91 56 07 	lds	r24, 0x0756
    5742:	90 91 57 07 	lds	r25, 0x0757
    5746:	01 97       	sbiw	r24, 0x01	; 1
    5748:	90 93 57 07 	sts	0x0757, r25
    574c:	80 93 56 07 	sts	0x0756, r24
    5750:	80 91 56 07 	lds	r24, 0x0756
    5754:	90 91 57 07 	lds	r25, 0x0757
    5758:	89 2b       	or	r24, r25
    575a:	29 f4       	brne	.+10     	; 0x5766 <STEPPER_process_pwm+0x98>
    575c:	80 81       	ld	r24, Z
    575e:	83 7e       	andi	r24, 0xE3	; 227
    5760:	80 83       	st	Z, r24
    5762:	10 92 74 04 	sts	0x0474, r1
    5766:	80 91 64 07 	lds	r24, 0x0764
    576a:	82 30       	cpi	r24, 0x02	; 2
    576c:	69 f4       	brne	.+26     	; 0x5788 <STEPPER_process_pwm+0xba>
    576e:	80 91 75 04 	lds	r24, 0x0475
    5772:	91 e0       	ldi	r25, 0x01	; 1
    5774:	89 27       	eor	r24, r25
    5776:	80 93 75 04 	sts	0x0475, r24
    577a:	88 23       	and	r24, r24
    577c:	09 f0       	breq	.+2      	; 0x5780 <STEPPER_process_pwm+0xb2>
    577e:	3e c0       	rjmp	.+124    	; 0x57fc <STEPPER_process_pwm+0x12e>
    5780:	80 81       	ld	r24, Z
    5782:	8f 71       	andi	r24, 0x1F	; 31
    5784:	80 83       	st	Z, r24
    5786:	08 95       	ret
    5788:	80 91 44 07 	lds	r24, 0x0744
    578c:	90 91 45 07 	lds	r25, 0x0745
    5790:	c3 97       	sbiw	r24, 0x33	; 51
    5792:	a4 f5       	brge	.+104    	; 0x57fc <STEPPER_process_pwm+0x12e>
    5794:	44 23       	and	r20, r20
    5796:	d1 f0       	breq	.+52     	; 0x57cc <STEPPER_process_pwm+0xfe>
    5798:	20 91 44 07 	lds	r18, 0x0744
    579c:	30 91 45 07 	lds	r19, 0x0745
    57a0:	80 e6       	ldi	r24, 0x60	; 96
    57a2:	90 e0       	ldi	r25, 0x00	; 0
    57a4:	ac 01       	movw	r20, r24
    57a6:	24 9f       	mul	r18, r20
    57a8:	c0 01       	movw	r24, r0
    57aa:	25 9f       	mul	r18, r21
    57ac:	90 0d       	add	r25, r0
    57ae:	34 9f       	mul	r19, r20
    57b0:	90 0d       	add	r25, r0
    57b2:	11 24       	eor	r1, r1
    57b4:	88 0f       	add	r24, r24
    57b6:	89 2f       	mov	r24, r25
    57b8:	88 1f       	adc	r24, r24
    57ba:	99 0b       	sbc	r25, r25
    57bc:	90 93 59 07 	sts	0x0759, r25
    57c0:	80 93 58 07 	sts	0x0758, r24
    57c4:	81 e0       	ldi	r24, 0x01	; 1
    57c6:	80 93 73 04 	sts	0x0473, r24
    57ca:	08 95       	ret
    57cc:	80 91 73 04 	lds	r24, 0x0473
    57d0:	88 23       	and	r24, r24
    57d2:	a1 f0       	breq	.+40     	; 0x57fc <STEPPER_process_pwm+0x12e>
    57d4:	80 91 58 07 	lds	r24, 0x0758
    57d8:	90 91 59 07 	lds	r25, 0x0759
    57dc:	01 97       	sbiw	r24, 0x01	; 1
    57de:	90 93 59 07 	sts	0x0759, r25
    57e2:	80 93 58 07 	sts	0x0758, r24
    57e6:	80 91 58 07 	lds	r24, 0x0758
    57ea:	90 91 59 07 	lds	r25, 0x0759
    57ee:	89 2b       	or	r24, r25
    57f0:	29 f4       	brne	.+10     	; 0x57fc <STEPPER_process_pwm+0x12e>
    57f2:	80 81       	ld	r24, Z
    57f4:	8f 71       	andi	r24, 0x1F	; 31
    57f6:	80 83       	st	Z, r24
    57f8:	10 92 73 04 	sts	0x0473, r1
    57fc:	08 95       	ret

000057fe <__subsf3>:
    57fe:	50 58       	subi	r21, 0x80	; 128

00005800 <__addsf3>:
    5800:	bb 27       	eor	r27, r27
    5802:	aa 27       	eor	r26, r26
    5804:	0e d0       	rcall	.+28     	; 0x5822 <__addsf3x>
    5806:	75 c1       	rjmp	.+746    	; 0x5af2 <__fp_round>
    5808:	66 d1       	rcall	.+716    	; 0x5ad6 <__fp_pscA>
    580a:	30 f0       	brcs	.+12     	; 0x5818 <__addsf3+0x18>
    580c:	6b d1       	rcall	.+726    	; 0x5ae4 <__fp_pscB>
    580e:	20 f0       	brcs	.+8      	; 0x5818 <__addsf3+0x18>
    5810:	31 f4       	brne	.+12     	; 0x581e <__addsf3+0x1e>
    5812:	9f 3f       	cpi	r25, 0xFF	; 255
    5814:	11 f4       	brne	.+4      	; 0x581a <__addsf3+0x1a>
    5816:	1e f4       	brtc	.+6      	; 0x581e <__addsf3+0x1e>
    5818:	5b c1       	rjmp	.+694    	; 0x5ad0 <__fp_nan>
    581a:	0e f4       	brtc	.+2      	; 0x581e <__addsf3+0x1e>
    581c:	e0 95       	com	r30
    581e:	e7 fb       	bst	r30, 7
    5820:	51 c1       	rjmp	.+674    	; 0x5ac4 <__fp_inf>

00005822 <__addsf3x>:
    5822:	e9 2f       	mov	r30, r25
    5824:	77 d1       	rcall	.+750    	; 0x5b14 <__fp_split3>
    5826:	80 f3       	brcs	.-32     	; 0x5808 <__addsf3+0x8>
    5828:	ba 17       	cp	r27, r26
    582a:	62 07       	cpc	r22, r18
    582c:	73 07       	cpc	r23, r19
    582e:	84 07       	cpc	r24, r20
    5830:	95 07       	cpc	r25, r21
    5832:	18 f0       	brcs	.+6      	; 0x583a <__addsf3x+0x18>
    5834:	71 f4       	brne	.+28     	; 0x5852 <__addsf3x+0x30>
    5836:	9e f5       	brtc	.+102    	; 0x589e <__addsf3x+0x7c>
    5838:	8f c1       	rjmp	.+798    	; 0x5b58 <__fp_zero>
    583a:	0e f4       	brtc	.+2      	; 0x583e <__addsf3x+0x1c>
    583c:	e0 95       	com	r30
    583e:	0b 2e       	mov	r0, r27
    5840:	ba 2f       	mov	r27, r26
    5842:	a0 2d       	mov	r26, r0
    5844:	0b 01       	movw	r0, r22
    5846:	b9 01       	movw	r22, r18
    5848:	90 01       	movw	r18, r0
    584a:	0c 01       	movw	r0, r24
    584c:	ca 01       	movw	r24, r20
    584e:	a0 01       	movw	r20, r0
    5850:	11 24       	eor	r1, r1
    5852:	ff 27       	eor	r31, r31
    5854:	59 1b       	sub	r21, r25
    5856:	99 f0       	breq	.+38     	; 0x587e <__addsf3x+0x5c>
    5858:	59 3f       	cpi	r21, 0xF9	; 249
    585a:	50 f4       	brcc	.+20     	; 0x5870 <__addsf3x+0x4e>
    585c:	50 3e       	cpi	r21, 0xE0	; 224
    585e:	68 f1       	brcs	.+90     	; 0x58ba <__addsf3x+0x98>
    5860:	1a 16       	cp	r1, r26
    5862:	f0 40       	sbci	r31, 0x00	; 0
    5864:	a2 2f       	mov	r26, r18
    5866:	23 2f       	mov	r18, r19
    5868:	34 2f       	mov	r19, r20
    586a:	44 27       	eor	r20, r20
    586c:	58 5f       	subi	r21, 0xF8	; 248
    586e:	f3 cf       	rjmp	.-26     	; 0x5856 <__addsf3x+0x34>
    5870:	46 95       	lsr	r20
    5872:	37 95       	ror	r19
    5874:	27 95       	ror	r18
    5876:	a7 95       	ror	r26
    5878:	f0 40       	sbci	r31, 0x00	; 0
    587a:	53 95       	inc	r21
    587c:	c9 f7       	brne	.-14     	; 0x5870 <__addsf3x+0x4e>
    587e:	7e f4       	brtc	.+30     	; 0x589e <__addsf3x+0x7c>
    5880:	1f 16       	cp	r1, r31
    5882:	ba 0b       	sbc	r27, r26
    5884:	62 0b       	sbc	r22, r18
    5886:	73 0b       	sbc	r23, r19
    5888:	84 0b       	sbc	r24, r20
    588a:	ba f0       	brmi	.+46     	; 0x58ba <__addsf3x+0x98>
    588c:	91 50       	subi	r25, 0x01	; 1
    588e:	a1 f0       	breq	.+40     	; 0x58b8 <__addsf3x+0x96>
    5890:	ff 0f       	add	r31, r31
    5892:	bb 1f       	adc	r27, r27
    5894:	66 1f       	adc	r22, r22
    5896:	77 1f       	adc	r23, r23
    5898:	88 1f       	adc	r24, r24
    589a:	c2 f7       	brpl	.-16     	; 0x588c <__addsf3x+0x6a>
    589c:	0e c0       	rjmp	.+28     	; 0x58ba <__addsf3x+0x98>
    589e:	ba 0f       	add	r27, r26
    58a0:	62 1f       	adc	r22, r18
    58a2:	73 1f       	adc	r23, r19
    58a4:	84 1f       	adc	r24, r20
    58a6:	48 f4       	brcc	.+18     	; 0x58ba <__addsf3x+0x98>
    58a8:	87 95       	ror	r24
    58aa:	77 95       	ror	r23
    58ac:	67 95       	ror	r22
    58ae:	b7 95       	ror	r27
    58b0:	f7 95       	ror	r31
    58b2:	9e 3f       	cpi	r25, 0xFE	; 254
    58b4:	08 f0       	brcs	.+2      	; 0x58b8 <__addsf3x+0x96>
    58b6:	b3 cf       	rjmp	.-154    	; 0x581e <__addsf3+0x1e>
    58b8:	93 95       	inc	r25
    58ba:	88 0f       	add	r24, r24
    58bc:	08 f0       	brcs	.+2      	; 0x58c0 <__addsf3x+0x9e>
    58be:	99 27       	eor	r25, r25
    58c0:	ee 0f       	add	r30, r30
    58c2:	97 95       	ror	r25
    58c4:	87 95       	ror	r24
    58c6:	08 95       	ret

000058c8 <__cmpsf2>:
    58c8:	d9 d0       	rcall	.+434    	; 0x5a7c <__fp_cmp>
    58ca:	08 f4       	brcc	.+2      	; 0x58ce <__cmpsf2+0x6>
    58cc:	81 e0       	ldi	r24, 0x01	; 1
    58ce:	08 95       	ret

000058d0 <__divsf3>:
    58d0:	0c d0       	rcall	.+24     	; 0x58ea <__divsf3x>
    58d2:	0f c1       	rjmp	.+542    	; 0x5af2 <__fp_round>
    58d4:	07 d1       	rcall	.+526    	; 0x5ae4 <__fp_pscB>
    58d6:	40 f0       	brcs	.+16     	; 0x58e8 <__divsf3+0x18>
    58d8:	fe d0       	rcall	.+508    	; 0x5ad6 <__fp_pscA>
    58da:	30 f0       	brcs	.+12     	; 0x58e8 <__divsf3+0x18>
    58dc:	21 f4       	brne	.+8      	; 0x58e6 <__divsf3+0x16>
    58de:	5f 3f       	cpi	r21, 0xFF	; 255
    58e0:	19 f0       	breq	.+6      	; 0x58e8 <__divsf3+0x18>
    58e2:	f0 c0       	rjmp	.+480    	; 0x5ac4 <__fp_inf>
    58e4:	51 11       	cpse	r21, r1
    58e6:	39 c1       	rjmp	.+626    	; 0x5b5a <__fp_szero>
    58e8:	f3 c0       	rjmp	.+486    	; 0x5ad0 <__fp_nan>

000058ea <__divsf3x>:
    58ea:	14 d1       	rcall	.+552    	; 0x5b14 <__fp_split3>
    58ec:	98 f3       	brcs	.-26     	; 0x58d4 <__divsf3+0x4>

000058ee <__divsf3_pse>:
    58ee:	99 23       	and	r25, r25
    58f0:	c9 f3       	breq	.-14     	; 0x58e4 <__divsf3+0x14>
    58f2:	55 23       	and	r21, r21
    58f4:	b1 f3       	breq	.-20     	; 0x58e2 <__divsf3+0x12>
    58f6:	95 1b       	sub	r25, r21
    58f8:	55 0b       	sbc	r21, r21
    58fa:	bb 27       	eor	r27, r27
    58fc:	aa 27       	eor	r26, r26
    58fe:	62 17       	cp	r22, r18
    5900:	73 07       	cpc	r23, r19
    5902:	84 07       	cpc	r24, r20
    5904:	38 f0       	brcs	.+14     	; 0x5914 <__divsf3_pse+0x26>
    5906:	9f 5f       	subi	r25, 0xFF	; 255
    5908:	5f 4f       	sbci	r21, 0xFF	; 255
    590a:	22 0f       	add	r18, r18
    590c:	33 1f       	adc	r19, r19
    590e:	44 1f       	adc	r20, r20
    5910:	aa 1f       	adc	r26, r26
    5912:	a9 f3       	breq	.-22     	; 0x58fe <__divsf3_pse+0x10>
    5914:	33 d0       	rcall	.+102    	; 0x597c <__divsf3_pse+0x8e>
    5916:	0e 2e       	mov	r0, r30
    5918:	3a f0       	brmi	.+14     	; 0x5928 <__divsf3_pse+0x3a>
    591a:	e0 e8       	ldi	r30, 0x80	; 128
    591c:	30 d0       	rcall	.+96     	; 0x597e <__divsf3_pse+0x90>
    591e:	91 50       	subi	r25, 0x01	; 1
    5920:	50 40       	sbci	r21, 0x00	; 0
    5922:	e6 95       	lsr	r30
    5924:	00 1c       	adc	r0, r0
    5926:	ca f7       	brpl	.-14     	; 0x591a <__divsf3_pse+0x2c>
    5928:	29 d0       	rcall	.+82     	; 0x597c <__divsf3_pse+0x8e>
    592a:	fe 2f       	mov	r31, r30
    592c:	27 d0       	rcall	.+78     	; 0x597c <__divsf3_pse+0x8e>
    592e:	66 0f       	add	r22, r22
    5930:	77 1f       	adc	r23, r23
    5932:	88 1f       	adc	r24, r24
    5934:	bb 1f       	adc	r27, r27
    5936:	26 17       	cp	r18, r22
    5938:	37 07       	cpc	r19, r23
    593a:	48 07       	cpc	r20, r24
    593c:	ab 07       	cpc	r26, r27
    593e:	b0 e8       	ldi	r27, 0x80	; 128
    5940:	09 f0       	breq	.+2      	; 0x5944 <__divsf3_pse+0x56>
    5942:	bb 0b       	sbc	r27, r27
    5944:	80 2d       	mov	r24, r0
    5946:	bf 01       	movw	r22, r30
    5948:	ff 27       	eor	r31, r31
    594a:	93 58       	subi	r25, 0x83	; 131
    594c:	5f 4f       	sbci	r21, 0xFF	; 255
    594e:	2a f0       	brmi	.+10     	; 0x595a <__divsf3_pse+0x6c>
    5950:	9e 3f       	cpi	r25, 0xFE	; 254
    5952:	51 05       	cpc	r21, r1
    5954:	68 f0       	brcs	.+26     	; 0x5970 <__divsf3_pse+0x82>
    5956:	b6 c0       	rjmp	.+364    	; 0x5ac4 <__fp_inf>
    5958:	00 c1       	rjmp	.+512    	; 0x5b5a <__fp_szero>
    595a:	5f 3f       	cpi	r21, 0xFF	; 255
    595c:	ec f3       	brlt	.-6      	; 0x5958 <__divsf3_pse+0x6a>
    595e:	98 3e       	cpi	r25, 0xE8	; 232
    5960:	dc f3       	brlt	.-10     	; 0x5958 <__divsf3_pse+0x6a>
    5962:	86 95       	lsr	r24
    5964:	77 95       	ror	r23
    5966:	67 95       	ror	r22
    5968:	b7 95       	ror	r27
    596a:	f7 95       	ror	r31
    596c:	9f 5f       	subi	r25, 0xFF	; 255
    596e:	c9 f7       	brne	.-14     	; 0x5962 <__divsf3_pse+0x74>
    5970:	88 0f       	add	r24, r24
    5972:	91 1d       	adc	r25, r1
    5974:	96 95       	lsr	r25
    5976:	87 95       	ror	r24
    5978:	97 f9       	bld	r25, 7
    597a:	08 95       	ret
    597c:	e1 e0       	ldi	r30, 0x01	; 1
    597e:	66 0f       	add	r22, r22
    5980:	77 1f       	adc	r23, r23
    5982:	88 1f       	adc	r24, r24
    5984:	bb 1f       	adc	r27, r27
    5986:	62 17       	cp	r22, r18
    5988:	73 07       	cpc	r23, r19
    598a:	84 07       	cpc	r24, r20
    598c:	ba 07       	cpc	r27, r26
    598e:	20 f0       	brcs	.+8      	; 0x5998 <__divsf3_pse+0xaa>
    5990:	62 1b       	sub	r22, r18
    5992:	73 0b       	sbc	r23, r19
    5994:	84 0b       	sbc	r24, r20
    5996:	ba 0b       	sbc	r27, r26
    5998:	ee 1f       	adc	r30, r30
    599a:	88 f7       	brcc	.-30     	; 0x597e <__divsf3_pse+0x90>
    599c:	e0 95       	com	r30
    599e:	08 95       	ret

000059a0 <__fixsfsi>:
    59a0:	04 d0       	rcall	.+8      	; 0x59aa <__fixunssfsi>
    59a2:	68 94       	set
    59a4:	b1 11       	cpse	r27, r1
    59a6:	d9 c0       	rjmp	.+434    	; 0x5b5a <__fp_szero>
    59a8:	08 95       	ret

000059aa <__fixunssfsi>:
    59aa:	bc d0       	rcall	.+376    	; 0x5b24 <__fp_splitA>
    59ac:	88 f0       	brcs	.+34     	; 0x59d0 <__fixunssfsi+0x26>
    59ae:	9f 57       	subi	r25, 0x7F	; 127
    59b0:	90 f0       	brcs	.+36     	; 0x59d6 <__fixunssfsi+0x2c>
    59b2:	b9 2f       	mov	r27, r25
    59b4:	99 27       	eor	r25, r25
    59b6:	b7 51       	subi	r27, 0x17	; 23
    59b8:	a0 f0       	brcs	.+40     	; 0x59e2 <__fixunssfsi+0x38>
    59ba:	d1 f0       	breq	.+52     	; 0x59f0 <__fixunssfsi+0x46>
    59bc:	66 0f       	add	r22, r22
    59be:	77 1f       	adc	r23, r23
    59c0:	88 1f       	adc	r24, r24
    59c2:	99 1f       	adc	r25, r25
    59c4:	1a f0       	brmi	.+6      	; 0x59cc <__fixunssfsi+0x22>
    59c6:	ba 95       	dec	r27
    59c8:	c9 f7       	brne	.-14     	; 0x59bc <__fixunssfsi+0x12>
    59ca:	12 c0       	rjmp	.+36     	; 0x59f0 <__fixunssfsi+0x46>
    59cc:	b1 30       	cpi	r27, 0x01	; 1
    59ce:	81 f0       	breq	.+32     	; 0x59f0 <__fixunssfsi+0x46>
    59d0:	c3 d0       	rcall	.+390    	; 0x5b58 <__fp_zero>
    59d2:	b1 e0       	ldi	r27, 0x01	; 1
    59d4:	08 95       	ret
    59d6:	c0 c0       	rjmp	.+384    	; 0x5b58 <__fp_zero>
    59d8:	67 2f       	mov	r22, r23
    59da:	78 2f       	mov	r23, r24
    59dc:	88 27       	eor	r24, r24
    59de:	b8 5f       	subi	r27, 0xF8	; 248
    59e0:	39 f0       	breq	.+14     	; 0x59f0 <__fixunssfsi+0x46>
    59e2:	b9 3f       	cpi	r27, 0xF9	; 249
    59e4:	cc f3       	brlt	.-14     	; 0x59d8 <__fixunssfsi+0x2e>
    59e6:	86 95       	lsr	r24
    59e8:	77 95       	ror	r23
    59ea:	67 95       	ror	r22
    59ec:	b3 95       	inc	r27
    59ee:	d9 f7       	brne	.-10     	; 0x59e6 <__fixunssfsi+0x3c>
    59f0:	3e f4       	brtc	.+14     	; 0x5a00 <__fixunssfsi+0x56>
    59f2:	90 95       	com	r25
    59f4:	80 95       	com	r24
    59f6:	70 95       	com	r23
    59f8:	61 95       	neg	r22
    59fa:	7f 4f       	sbci	r23, 0xFF	; 255
    59fc:	8f 4f       	sbci	r24, 0xFF	; 255
    59fe:	9f 4f       	sbci	r25, 0xFF	; 255
    5a00:	08 95       	ret

00005a02 <__floatunsisf>:
    5a02:	e8 94       	clt
    5a04:	09 c0       	rjmp	.+18     	; 0x5a18 <__floatsisf+0x12>

00005a06 <__floatsisf>:
    5a06:	97 fb       	bst	r25, 7
    5a08:	3e f4       	brtc	.+14     	; 0x5a18 <__floatsisf+0x12>
    5a0a:	90 95       	com	r25
    5a0c:	80 95       	com	r24
    5a0e:	70 95       	com	r23
    5a10:	61 95       	neg	r22
    5a12:	7f 4f       	sbci	r23, 0xFF	; 255
    5a14:	8f 4f       	sbci	r24, 0xFF	; 255
    5a16:	9f 4f       	sbci	r25, 0xFF	; 255
    5a18:	99 23       	and	r25, r25
    5a1a:	a9 f0       	breq	.+42     	; 0x5a46 <__floatsisf+0x40>
    5a1c:	f9 2f       	mov	r31, r25
    5a1e:	96 e9       	ldi	r25, 0x96	; 150
    5a20:	bb 27       	eor	r27, r27
    5a22:	93 95       	inc	r25
    5a24:	f6 95       	lsr	r31
    5a26:	87 95       	ror	r24
    5a28:	77 95       	ror	r23
    5a2a:	67 95       	ror	r22
    5a2c:	b7 95       	ror	r27
    5a2e:	f1 11       	cpse	r31, r1
    5a30:	f8 cf       	rjmp	.-16     	; 0x5a22 <__floatsisf+0x1c>
    5a32:	fa f4       	brpl	.+62     	; 0x5a72 <__floatsisf+0x6c>
    5a34:	bb 0f       	add	r27, r27
    5a36:	11 f4       	brne	.+4      	; 0x5a3c <__floatsisf+0x36>
    5a38:	60 ff       	sbrs	r22, 0
    5a3a:	1b c0       	rjmp	.+54     	; 0x5a72 <__floatsisf+0x6c>
    5a3c:	6f 5f       	subi	r22, 0xFF	; 255
    5a3e:	7f 4f       	sbci	r23, 0xFF	; 255
    5a40:	8f 4f       	sbci	r24, 0xFF	; 255
    5a42:	9f 4f       	sbci	r25, 0xFF	; 255
    5a44:	16 c0       	rjmp	.+44     	; 0x5a72 <__floatsisf+0x6c>
    5a46:	88 23       	and	r24, r24
    5a48:	11 f0       	breq	.+4      	; 0x5a4e <__floatsisf+0x48>
    5a4a:	96 e9       	ldi	r25, 0x96	; 150
    5a4c:	11 c0       	rjmp	.+34     	; 0x5a70 <__floatsisf+0x6a>
    5a4e:	77 23       	and	r23, r23
    5a50:	21 f0       	breq	.+8      	; 0x5a5a <__floatsisf+0x54>
    5a52:	9e e8       	ldi	r25, 0x8E	; 142
    5a54:	87 2f       	mov	r24, r23
    5a56:	76 2f       	mov	r23, r22
    5a58:	05 c0       	rjmp	.+10     	; 0x5a64 <__floatsisf+0x5e>
    5a5a:	66 23       	and	r22, r22
    5a5c:	71 f0       	breq	.+28     	; 0x5a7a <__floatsisf+0x74>
    5a5e:	96 e8       	ldi	r25, 0x86	; 134
    5a60:	86 2f       	mov	r24, r22
    5a62:	70 e0       	ldi	r23, 0x00	; 0
    5a64:	60 e0       	ldi	r22, 0x00	; 0
    5a66:	2a f0       	brmi	.+10     	; 0x5a72 <__floatsisf+0x6c>
    5a68:	9a 95       	dec	r25
    5a6a:	66 0f       	add	r22, r22
    5a6c:	77 1f       	adc	r23, r23
    5a6e:	88 1f       	adc	r24, r24
    5a70:	da f7       	brpl	.-10     	; 0x5a68 <__floatsisf+0x62>
    5a72:	88 0f       	add	r24, r24
    5a74:	96 95       	lsr	r25
    5a76:	87 95       	ror	r24
    5a78:	97 f9       	bld	r25, 7
    5a7a:	08 95       	ret

00005a7c <__fp_cmp>:
    5a7c:	99 0f       	add	r25, r25
    5a7e:	00 08       	sbc	r0, r0
    5a80:	55 0f       	add	r21, r21
    5a82:	aa 0b       	sbc	r26, r26
    5a84:	e0 e8       	ldi	r30, 0x80	; 128
    5a86:	fe ef       	ldi	r31, 0xFE	; 254
    5a88:	16 16       	cp	r1, r22
    5a8a:	17 06       	cpc	r1, r23
    5a8c:	e8 07       	cpc	r30, r24
    5a8e:	f9 07       	cpc	r31, r25
    5a90:	c0 f0       	brcs	.+48     	; 0x5ac2 <__fp_cmp+0x46>
    5a92:	12 16       	cp	r1, r18
    5a94:	13 06       	cpc	r1, r19
    5a96:	e4 07       	cpc	r30, r20
    5a98:	f5 07       	cpc	r31, r21
    5a9a:	98 f0       	brcs	.+38     	; 0x5ac2 <__fp_cmp+0x46>
    5a9c:	62 1b       	sub	r22, r18
    5a9e:	73 0b       	sbc	r23, r19
    5aa0:	84 0b       	sbc	r24, r20
    5aa2:	95 0b       	sbc	r25, r21
    5aa4:	39 f4       	brne	.+14     	; 0x5ab4 <__fp_cmp+0x38>
    5aa6:	0a 26       	eor	r0, r26
    5aa8:	61 f0       	breq	.+24     	; 0x5ac2 <__fp_cmp+0x46>
    5aaa:	23 2b       	or	r18, r19
    5aac:	24 2b       	or	r18, r20
    5aae:	25 2b       	or	r18, r21
    5ab0:	21 f4       	brne	.+8      	; 0x5aba <__fp_cmp+0x3e>
    5ab2:	08 95       	ret
    5ab4:	0a 26       	eor	r0, r26
    5ab6:	09 f4       	brne	.+2      	; 0x5aba <__fp_cmp+0x3e>
    5ab8:	a1 40       	sbci	r26, 0x01	; 1
    5aba:	a6 95       	lsr	r26
    5abc:	8f ef       	ldi	r24, 0xFF	; 255
    5abe:	81 1d       	adc	r24, r1
    5ac0:	81 1d       	adc	r24, r1
    5ac2:	08 95       	ret

00005ac4 <__fp_inf>:
    5ac4:	97 f9       	bld	r25, 7
    5ac6:	9f 67       	ori	r25, 0x7F	; 127
    5ac8:	80 e8       	ldi	r24, 0x80	; 128
    5aca:	70 e0       	ldi	r23, 0x00	; 0
    5acc:	60 e0       	ldi	r22, 0x00	; 0
    5ace:	08 95       	ret

00005ad0 <__fp_nan>:
    5ad0:	9f ef       	ldi	r25, 0xFF	; 255
    5ad2:	80 ec       	ldi	r24, 0xC0	; 192
    5ad4:	08 95       	ret

00005ad6 <__fp_pscA>:
    5ad6:	00 24       	eor	r0, r0
    5ad8:	0a 94       	dec	r0
    5ada:	16 16       	cp	r1, r22
    5adc:	17 06       	cpc	r1, r23
    5ade:	18 06       	cpc	r1, r24
    5ae0:	09 06       	cpc	r0, r25
    5ae2:	08 95       	ret

00005ae4 <__fp_pscB>:
    5ae4:	00 24       	eor	r0, r0
    5ae6:	0a 94       	dec	r0
    5ae8:	12 16       	cp	r1, r18
    5aea:	13 06       	cpc	r1, r19
    5aec:	14 06       	cpc	r1, r20
    5aee:	05 06       	cpc	r0, r21
    5af0:	08 95       	ret

00005af2 <__fp_round>:
    5af2:	09 2e       	mov	r0, r25
    5af4:	03 94       	inc	r0
    5af6:	00 0c       	add	r0, r0
    5af8:	11 f4       	brne	.+4      	; 0x5afe <__fp_round+0xc>
    5afa:	88 23       	and	r24, r24
    5afc:	52 f0       	brmi	.+20     	; 0x5b12 <__fp_round+0x20>
    5afe:	bb 0f       	add	r27, r27
    5b00:	40 f4       	brcc	.+16     	; 0x5b12 <__fp_round+0x20>
    5b02:	bf 2b       	or	r27, r31
    5b04:	11 f4       	brne	.+4      	; 0x5b0a <__fp_round+0x18>
    5b06:	60 ff       	sbrs	r22, 0
    5b08:	04 c0       	rjmp	.+8      	; 0x5b12 <__fp_round+0x20>
    5b0a:	6f 5f       	subi	r22, 0xFF	; 255
    5b0c:	7f 4f       	sbci	r23, 0xFF	; 255
    5b0e:	8f 4f       	sbci	r24, 0xFF	; 255
    5b10:	9f 4f       	sbci	r25, 0xFF	; 255
    5b12:	08 95       	ret

00005b14 <__fp_split3>:
    5b14:	57 fd       	sbrc	r21, 7
    5b16:	90 58       	subi	r25, 0x80	; 128
    5b18:	44 0f       	add	r20, r20
    5b1a:	55 1f       	adc	r21, r21
    5b1c:	59 f0       	breq	.+22     	; 0x5b34 <__fp_splitA+0x10>
    5b1e:	5f 3f       	cpi	r21, 0xFF	; 255
    5b20:	71 f0       	breq	.+28     	; 0x5b3e <__fp_splitA+0x1a>
    5b22:	47 95       	ror	r20

00005b24 <__fp_splitA>:
    5b24:	88 0f       	add	r24, r24
    5b26:	97 fb       	bst	r25, 7
    5b28:	99 1f       	adc	r25, r25
    5b2a:	61 f0       	breq	.+24     	; 0x5b44 <__fp_splitA+0x20>
    5b2c:	9f 3f       	cpi	r25, 0xFF	; 255
    5b2e:	79 f0       	breq	.+30     	; 0x5b4e <__fp_splitA+0x2a>
    5b30:	87 95       	ror	r24
    5b32:	08 95       	ret
    5b34:	12 16       	cp	r1, r18
    5b36:	13 06       	cpc	r1, r19
    5b38:	14 06       	cpc	r1, r20
    5b3a:	55 1f       	adc	r21, r21
    5b3c:	f2 cf       	rjmp	.-28     	; 0x5b22 <__fp_split3+0xe>
    5b3e:	46 95       	lsr	r20
    5b40:	f1 df       	rcall	.-30     	; 0x5b24 <__fp_splitA>
    5b42:	08 c0       	rjmp	.+16     	; 0x5b54 <__fp_splitA+0x30>
    5b44:	16 16       	cp	r1, r22
    5b46:	17 06       	cpc	r1, r23
    5b48:	18 06       	cpc	r1, r24
    5b4a:	99 1f       	adc	r25, r25
    5b4c:	f1 cf       	rjmp	.-30     	; 0x5b30 <__fp_splitA+0xc>
    5b4e:	86 95       	lsr	r24
    5b50:	71 05       	cpc	r23, r1
    5b52:	61 05       	cpc	r22, r1
    5b54:	08 94       	sec
    5b56:	08 95       	ret

00005b58 <__fp_zero>:
    5b58:	e8 94       	clt

00005b5a <__fp_szero>:
    5b5a:	bb 27       	eor	r27, r27
    5b5c:	66 27       	eor	r22, r22
    5b5e:	77 27       	eor	r23, r23
    5b60:	cb 01       	movw	r24, r22
    5b62:	97 f9       	bld	r25, 7
    5b64:	08 95       	ret

00005b66 <__gesf2>:
    5b66:	8a df       	rcall	.-236    	; 0x5a7c <__fp_cmp>
    5b68:	08 f4       	brcc	.+2      	; 0x5b6c <__gesf2+0x6>
    5b6a:	8f ef       	ldi	r24, 0xFF	; 255
    5b6c:	08 95       	ret

00005b6e <lrint>:
    5b6e:	da df       	rcall	.-76     	; 0x5b24 <__fp_splitA>
    5b70:	a8 f1       	brcs	.+106    	; 0x5bdc <lrint+0x6e>
    5b72:	9e 57       	subi	r25, 0x7E	; 126
    5b74:	a8 f1       	brcs	.+106    	; 0x5be0 <lrint+0x72>
    5b76:	98 51       	subi	r25, 0x18	; 24
    5b78:	60 f0       	brcs	.+24     	; 0x5b92 <lrint+0x24>
    5b7a:	39 f1       	breq	.+78     	; 0x5bca <lrint+0x5c>
    5b7c:	98 30       	cpi	r25, 0x08	; 8
    5b7e:	70 f5       	brcc	.+92     	; 0x5bdc <lrint+0x6e>
    5b80:	09 2e       	mov	r0, r25
    5b82:	99 27       	eor	r25, r25
    5b84:	66 0f       	add	r22, r22
    5b86:	77 1f       	adc	r23, r23
    5b88:	88 1f       	adc	r24, r24
    5b8a:	99 1f       	adc	r25, r25
    5b8c:	0a 94       	dec	r0
    5b8e:	d1 f7       	brne	.-12     	; 0x5b84 <lrint+0x16>
    5b90:	1c c0       	rjmp	.+56     	; 0x5bca <lrint+0x5c>
    5b92:	bb 27       	eor	r27, r27
    5b94:	99 3f       	cpi	r25, 0xF9	; 249
    5b96:	4c f4       	brge	.+18     	; 0x5baa <lrint+0x3c>
    5b98:	b1 11       	cpse	r27, r1
    5b9a:	b1 e0       	ldi	r27, 0x01	; 1
    5b9c:	b6 2b       	or	r27, r22
    5b9e:	67 2f       	mov	r22, r23
    5ba0:	78 2f       	mov	r23, r24
    5ba2:	88 27       	eor	r24, r24
    5ba4:	98 5f       	subi	r25, 0xF8	; 248
    5ba6:	b1 f7       	brne	.-20     	; 0x5b94 <lrint+0x26>
    5ba8:	08 c0       	rjmp	.+16     	; 0x5bba <lrint+0x4c>
    5baa:	86 95       	lsr	r24
    5bac:	77 95       	ror	r23
    5bae:	67 95       	ror	r22
    5bb0:	b7 95       	ror	r27
    5bb2:	08 f4       	brcc	.+2      	; 0x5bb6 <lrint+0x48>
    5bb4:	b1 60       	ori	r27, 0x01	; 1
    5bb6:	93 95       	inc	r25
    5bb8:	c1 f7       	brne	.-16     	; 0x5baa <lrint+0x3c>
    5bba:	bb 0f       	add	r27, r27
    5bbc:	30 f4       	brcc	.+12     	; 0x5bca <lrint+0x5c>
    5bbe:	11 f4       	brne	.+4      	; 0x5bc4 <lrint+0x56>
    5bc0:	60 ff       	sbrs	r22, 0
    5bc2:	03 c0       	rjmp	.+6      	; 0x5bca <lrint+0x5c>
    5bc4:	6f 5f       	subi	r22, 0xFF	; 255
    5bc6:	7f 4f       	sbci	r23, 0xFF	; 255
    5bc8:	8f 4f       	sbci	r24, 0xFF	; 255
    5bca:	3e f4       	brtc	.+14     	; 0x5bda <lrint+0x6c>
    5bcc:	90 95       	com	r25
    5bce:	80 95       	com	r24
    5bd0:	70 95       	com	r23
    5bd2:	61 95       	neg	r22
    5bd4:	7f 4f       	sbci	r23, 0xFF	; 255
    5bd6:	8f 4f       	sbci	r24, 0xFF	; 255
    5bd8:	9f 4f       	sbci	r25, 0xFF	; 255
    5bda:	08 95       	ret
    5bdc:	68 94       	set
    5bde:	bd cf       	rjmp	.-134    	; 0x5b5a <__fp_szero>
    5be0:	bb cf       	rjmp	.-138    	; 0x5b58 <__fp_zero>

00005be2 <__mulsf3>:
    5be2:	0b d0       	rcall	.+22     	; 0x5bfa <__mulsf3x>
    5be4:	86 cf       	rjmp	.-244    	; 0x5af2 <__fp_round>
    5be6:	77 df       	rcall	.-274    	; 0x5ad6 <__fp_pscA>
    5be8:	28 f0       	brcs	.+10     	; 0x5bf4 <__mulsf3+0x12>
    5bea:	7c df       	rcall	.-264    	; 0x5ae4 <__fp_pscB>
    5bec:	18 f0       	brcs	.+6      	; 0x5bf4 <__mulsf3+0x12>
    5bee:	95 23       	and	r25, r21
    5bf0:	09 f0       	breq	.+2      	; 0x5bf4 <__mulsf3+0x12>
    5bf2:	68 cf       	rjmp	.-304    	; 0x5ac4 <__fp_inf>
    5bf4:	6d cf       	rjmp	.-294    	; 0x5ad0 <__fp_nan>
    5bf6:	11 24       	eor	r1, r1
    5bf8:	b0 cf       	rjmp	.-160    	; 0x5b5a <__fp_szero>

00005bfa <__mulsf3x>:
    5bfa:	8c df       	rcall	.-232    	; 0x5b14 <__fp_split3>
    5bfc:	a0 f3       	brcs	.-24     	; 0x5be6 <__mulsf3+0x4>

00005bfe <__mulsf3_pse>:
    5bfe:	95 9f       	mul	r25, r21
    5c00:	d1 f3       	breq	.-12     	; 0x5bf6 <__mulsf3+0x14>
    5c02:	95 0f       	add	r25, r21
    5c04:	50 e0       	ldi	r21, 0x00	; 0
    5c06:	55 1f       	adc	r21, r21
    5c08:	62 9f       	mul	r22, r18
    5c0a:	f0 01       	movw	r30, r0
    5c0c:	72 9f       	mul	r23, r18
    5c0e:	bb 27       	eor	r27, r27
    5c10:	f0 0d       	add	r31, r0
    5c12:	b1 1d       	adc	r27, r1
    5c14:	63 9f       	mul	r22, r19
    5c16:	aa 27       	eor	r26, r26
    5c18:	f0 0d       	add	r31, r0
    5c1a:	b1 1d       	adc	r27, r1
    5c1c:	aa 1f       	adc	r26, r26
    5c1e:	64 9f       	mul	r22, r20
    5c20:	66 27       	eor	r22, r22
    5c22:	b0 0d       	add	r27, r0
    5c24:	a1 1d       	adc	r26, r1
    5c26:	66 1f       	adc	r22, r22
    5c28:	82 9f       	mul	r24, r18
    5c2a:	22 27       	eor	r18, r18
    5c2c:	b0 0d       	add	r27, r0
    5c2e:	a1 1d       	adc	r26, r1
    5c30:	62 1f       	adc	r22, r18
    5c32:	73 9f       	mul	r23, r19
    5c34:	b0 0d       	add	r27, r0
    5c36:	a1 1d       	adc	r26, r1
    5c38:	62 1f       	adc	r22, r18
    5c3a:	83 9f       	mul	r24, r19
    5c3c:	a0 0d       	add	r26, r0
    5c3e:	61 1d       	adc	r22, r1
    5c40:	22 1f       	adc	r18, r18
    5c42:	74 9f       	mul	r23, r20
    5c44:	33 27       	eor	r19, r19
    5c46:	a0 0d       	add	r26, r0
    5c48:	61 1d       	adc	r22, r1
    5c4a:	23 1f       	adc	r18, r19
    5c4c:	84 9f       	mul	r24, r20
    5c4e:	60 0d       	add	r22, r0
    5c50:	21 1d       	adc	r18, r1
    5c52:	82 2f       	mov	r24, r18
    5c54:	76 2f       	mov	r23, r22
    5c56:	6a 2f       	mov	r22, r26
    5c58:	11 24       	eor	r1, r1
    5c5a:	9f 57       	subi	r25, 0x7F	; 127
    5c5c:	50 40       	sbci	r21, 0x00	; 0
    5c5e:	8a f0       	brmi	.+34     	; 0x5c82 <__mulsf3_pse+0x84>
    5c60:	e1 f0       	breq	.+56     	; 0x5c9a <__mulsf3_pse+0x9c>
    5c62:	88 23       	and	r24, r24
    5c64:	4a f0       	brmi	.+18     	; 0x5c78 <__mulsf3_pse+0x7a>
    5c66:	ee 0f       	add	r30, r30
    5c68:	ff 1f       	adc	r31, r31
    5c6a:	bb 1f       	adc	r27, r27
    5c6c:	66 1f       	adc	r22, r22
    5c6e:	77 1f       	adc	r23, r23
    5c70:	88 1f       	adc	r24, r24
    5c72:	91 50       	subi	r25, 0x01	; 1
    5c74:	50 40       	sbci	r21, 0x00	; 0
    5c76:	a9 f7       	brne	.-22     	; 0x5c62 <__mulsf3_pse+0x64>
    5c78:	9e 3f       	cpi	r25, 0xFE	; 254
    5c7a:	51 05       	cpc	r21, r1
    5c7c:	70 f0       	brcs	.+28     	; 0x5c9a <__mulsf3_pse+0x9c>
    5c7e:	22 cf       	rjmp	.-444    	; 0x5ac4 <__fp_inf>
    5c80:	6c cf       	rjmp	.-296    	; 0x5b5a <__fp_szero>
    5c82:	5f 3f       	cpi	r21, 0xFF	; 255
    5c84:	ec f3       	brlt	.-6      	; 0x5c80 <__mulsf3_pse+0x82>
    5c86:	98 3e       	cpi	r25, 0xE8	; 232
    5c88:	dc f3       	brlt	.-10     	; 0x5c80 <__mulsf3_pse+0x82>
    5c8a:	86 95       	lsr	r24
    5c8c:	77 95       	ror	r23
    5c8e:	67 95       	ror	r22
    5c90:	b7 95       	ror	r27
    5c92:	f7 95       	ror	r31
    5c94:	e7 95       	ror	r30
    5c96:	9f 5f       	subi	r25, 0xFF	; 255
    5c98:	c1 f7       	brne	.-16     	; 0x5c8a <__mulsf3_pse+0x8c>
    5c9a:	fe 2b       	or	r31, r30
    5c9c:	88 0f       	add	r24, r24
    5c9e:	91 1d       	adc	r25, r1
    5ca0:	96 95       	lsr	r25
    5ca2:	87 95       	ror	r24
    5ca4:	97 f9       	bld	r25, 7
    5ca6:	08 95       	ret

00005ca8 <pow>:
    5ca8:	fa 01       	movw	r30, r20
    5caa:	ee 0f       	add	r30, r30
    5cac:	ff 1f       	adc	r31, r31
    5cae:	30 96       	adiw	r30, 0x00	; 0
    5cb0:	21 05       	cpc	r18, r1
    5cb2:	31 05       	cpc	r19, r1
    5cb4:	99 f1       	breq	.+102    	; 0x5d1c <pow+0x74>
    5cb6:	61 15       	cp	r22, r1
    5cb8:	71 05       	cpc	r23, r1
    5cba:	61 f4       	brne	.+24     	; 0x5cd4 <pow+0x2c>
    5cbc:	80 38       	cpi	r24, 0x80	; 128
    5cbe:	bf e3       	ldi	r27, 0x3F	; 63
    5cc0:	9b 07       	cpc	r25, r27
    5cc2:	49 f1       	breq	.+82     	; 0x5d16 <pow+0x6e>
    5cc4:	68 94       	set
    5cc6:	90 38       	cpi	r25, 0x80	; 128
    5cc8:	81 05       	cpc	r24, r1
    5cca:	61 f0       	breq	.+24     	; 0x5ce4 <pow+0x3c>
    5ccc:	80 38       	cpi	r24, 0x80	; 128
    5cce:	bf ef       	ldi	r27, 0xFF	; 255
    5cd0:	9b 07       	cpc	r25, r27
    5cd2:	41 f0       	breq	.+16     	; 0x5ce4 <pow+0x3c>
    5cd4:	99 23       	and	r25, r25
    5cd6:	42 f5       	brpl	.+80     	; 0x5d28 <pow+0x80>
    5cd8:	ff 3f       	cpi	r31, 0xFF	; 255
    5cda:	e1 05       	cpc	r30, r1
    5cdc:	31 05       	cpc	r19, r1
    5cde:	21 05       	cpc	r18, r1
    5ce0:	11 f1       	breq	.+68     	; 0x5d26 <pow+0x7e>
    5ce2:	e8 94       	clt
    5ce4:	08 94       	sec
    5ce6:	e7 95       	ror	r30
    5ce8:	d9 01       	movw	r26, r18
    5cea:	aa 23       	and	r26, r26
    5cec:	29 f4       	brne	.+10     	; 0x5cf8 <pow+0x50>
    5cee:	ab 2f       	mov	r26, r27
    5cf0:	be 2f       	mov	r27, r30
    5cf2:	f8 5f       	subi	r31, 0xF8	; 248
    5cf4:	d0 f3       	brcs	.-12     	; 0x5cea <pow+0x42>
    5cf6:	10 c0       	rjmp	.+32     	; 0x5d18 <pow+0x70>
    5cf8:	ff 5f       	subi	r31, 0xFF	; 255
    5cfa:	70 f4       	brcc	.+28     	; 0x5d18 <pow+0x70>
    5cfc:	a6 95       	lsr	r26
    5cfe:	e0 f7       	brcc	.-8      	; 0x5cf8 <pow+0x50>
    5d00:	f7 39       	cpi	r31, 0x97	; 151
    5d02:	50 f0       	brcs	.+20     	; 0x5d18 <pow+0x70>
    5d04:	19 f0       	breq	.+6      	; 0x5d0c <pow+0x64>
    5d06:	ff 3a       	cpi	r31, 0xAF	; 175
    5d08:	38 f4       	brcc	.+14     	; 0x5d18 <pow+0x70>
    5d0a:	9f 77       	andi	r25, 0x7F	; 127
    5d0c:	9f 93       	push	r25
    5d0e:	0c d0       	rcall	.+24     	; 0x5d28 <pow+0x80>
    5d10:	0f 90       	pop	r0
    5d12:	07 fc       	sbrc	r0, 7
    5d14:	90 58       	subi	r25, 0x80	; 128
    5d16:	08 95       	ret
    5d18:	3e f0       	brts	.+14     	; 0x5d28 <pow+0x80>
    5d1a:	da ce       	rjmp	.-588    	; 0x5ad0 <__fp_nan>
    5d1c:	60 e0       	ldi	r22, 0x00	; 0
    5d1e:	70 e0       	ldi	r23, 0x00	; 0
    5d20:	80 e8       	ldi	r24, 0x80	; 128
    5d22:	9f e3       	ldi	r25, 0x3F	; 63
    5d24:	08 95       	ret
    5d26:	4f e7       	ldi	r20, 0x7F	; 127
    5d28:	9f 77       	andi	r25, 0x7F	; 127
    5d2a:	5f 93       	push	r21
    5d2c:	4f 93       	push	r20
    5d2e:	3f 93       	push	r19
    5d30:	2f 93       	push	r18
    5d32:	9e d0       	rcall	.+316    	; 0x5e70 <log>
    5d34:	2f 91       	pop	r18
    5d36:	3f 91       	pop	r19
    5d38:	4f 91       	pop	r20
    5d3a:	5f 91       	pop	r21
    5d3c:	52 df       	rcall	.-348    	; 0x5be2 <__mulsf3>
    5d3e:	05 c0       	rjmp	.+10     	; 0x5d4a <exp>
    5d40:	19 f4       	brne	.+6      	; 0x5d48 <pow+0xa0>
    5d42:	0e f0       	brts	.+2      	; 0x5d46 <pow+0x9e>
    5d44:	bf ce       	rjmp	.-642    	; 0x5ac4 <__fp_inf>
    5d46:	08 cf       	rjmp	.-496    	; 0x5b58 <__fp_zero>
    5d48:	c3 ce       	rjmp	.-634    	; 0x5ad0 <__fp_nan>

00005d4a <exp>:
    5d4a:	ec de       	rcall	.-552    	; 0x5b24 <__fp_splitA>
    5d4c:	c8 f3       	brcs	.-14     	; 0x5d40 <pow+0x98>
    5d4e:	96 38       	cpi	r25, 0x86	; 134
    5d50:	c0 f7       	brcc	.-16     	; 0x5d42 <pow+0x9a>
    5d52:	07 f8       	bld	r0, 7
    5d54:	0f 92       	push	r0
    5d56:	e8 94       	clt
    5d58:	2b e3       	ldi	r18, 0x3B	; 59
    5d5a:	3a ea       	ldi	r19, 0xAA	; 170
    5d5c:	48 eb       	ldi	r20, 0xB8	; 184
    5d5e:	5f e7       	ldi	r21, 0x7F	; 127
    5d60:	4e df       	rcall	.-356    	; 0x5bfe <__mulsf3_pse>
    5d62:	0f 92       	push	r0
    5d64:	0f 92       	push	r0
    5d66:	0f 92       	push	r0
    5d68:	4d b7       	in	r20, 0x3d	; 61
    5d6a:	5e b7       	in	r21, 0x3e	; 62
    5d6c:	0f 92       	push	r0
    5d6e:	c0 d0       	rcall	.+384    	; 0x5ef0 <modf>
    5d70:	e8 ec       	ldi	r30, 0xC8	; 200
    5d72:	f0 e0       	ldi	r31, 0x00	; 0
    5d74:	16 d0       	rcall	.+44     	; 0x5da2 <__fp_powser>
    5d76:	4f 91       	pop	r20
    5d78:	5f 91       	pop	r21
    5d7a:	ef 91       	pop	r30
    5d7c:	ff 91       	pop	r31
    5d7e:	e5 95       	asr	r30
    5d80:	ee 1f       	adc	r30, r30
    5d82:	ff 1f       	adc	r31, r31
    5d84:	49 f0       	breq	.+18     	; 0x5d98 <exp+0x4e>
    5d86:	fe 57       	subi	r31, 0x7E	; 126
    5d88:	e0 68       	ori	r30, 0x80	; 128
    5d8a:	44 27       	eor	r20, r20
    5d8c:	ee 0f       	add	r30, r30
    5d8e:	44 1f       	adc	r20, r20
    5d90:	fa 95       	dec	r31
    5d92:	e1 f7       	brne	.-8      	; 0x5d8c <exp+0x42>
    5d94:	41 95       	neg	r20
    5d96:	55 0b       	sbc	r21, r21
    5d98:	32 d0       	rcall	.+100    	; 0x5dfe <ldexp>
    5d9a:	0f 90       	pop	r0
    5d9c:	07 fe       	sbrs	r0, 7
    5d9e:	26 c0       	rjmp	.+76     	; 0x5dec <inverse>
    5da0:	08 95       	ret

00005da2 <__fp_powser>:
    5da2:	df 93       	push	r29
    5da4:	cf 93       	push	r28
    5da6:	1f 93       	push	r17
    5da8:	0f 93       	push	r16
    5daa:	ff 92       	push	r15
    5dac:	ef 92       	push	r14
    5dae:	df 92       	push	r13
    5db0:	7b 01       	movw	r14, r22
    5db2:	8c 01       	movw	r16, r24
    5db4:	68 94       	set
    5db6:	05 c0       	rjmp	.+10     	; 0x5dc2 <__fp_powser+0x20>
    5db8:	da 2e       	mov	r13, r26
    5dba:	ef 01       	movw	r28, r30
    5dbc:	1e df       	rcall	.-452    	; 0x5bfa <__mulsf3x>
    5dbe:	fe 01       	movw	r30, r28
    5dc0:	e8 94       	clt
    5dc2:	a5 91       	lpm	r26, Z+
    5dc4:	25 91       	lpm	r18, Z+
    5dc6:	35 91       	lpm	r19, Z+
    5dc8:	45 91       	lpm	r20, Z+
    5dca:	55 91       	lpm	r21, Z+
    5dcc:	ae f3       	brts	.-22     	; 0x5db8 <__fp_powser+0x16>
    5dce:	ef 01       	movw	r28, r30
    5dd0:	28 dd       	rcall	.-1456   	; 0x5822 <__addsf3x>
    5dd2:	fe 01       	movw	r30, r28
    5dd4:	97 01       	movw	r18, r14
    5dd6:	a8 01       	movw	r20, r16
    5dd8:	da 94       	dec	r13
    5dda:	79 f7       	brne	.-34     	; 0x5dba <__fp_powser+0x18>
    5ddc:	df 90       	pop	r13
    5dde:	ef 90       	pop	r14
    5de0:	ff 90       	pop	r15
    5de2:	0f 91       	pop	r16
    5de4:	1f 91       	pop	r17
    5de6:	cf 91       	pop	r28
    5de8:	df 91       	pop	r29
    5dea:	08 95       	ret

00005dec <inverse>:
    5dec:	9b 01       	movw	r18, r22
    5dee:	ac 01       	movw	r20, r24
    5df0:	60 e0       	ldi	r22, 0x00	; 0
    5df2:	70 e0       	ldi	r23, 0x00	; 0
    5df4:	80 e8       	ldi	r24, 0x80	; 128
    5df6:	9f e3       	ldi	r25, 0x3F	; 63
    5df8:	6b cd       	rjmp	.-1322   	; 0x58d0 <__divsf3>
    5dfa:	64 ce       	rjmp	.-824    	; 0x5ac4 <__fp_inf>
    5dfc:	ac c0       	rjmp	.+344    	; 0x5f56 <__fp_mpack>

00005dfe <ldexp>:
    5dfe:	92 de       	rcall	.-732    	; 0x5b24 <__fp_splitA>
    5e00:	e8 f3       	brcs	.-6      	; 0x5dfc <inverse+0x10>
    5e02:	99 23       	and	r25, r25
    5e04:	d9 f3       	breq	.-10     	; 0x5dfc <inverse+0x10>
    5e06:	94 0f       	add	r25, r20
    5e08:	51 1d       	adc	r21, r1
    5e0a:	bb f3       	brvs	.-18     	; 0x5dfa <inverse+0xe>
    5e0c:	91 50       	subi	r25, 0x01	; 1
    5e0e:	50 40       	sbci	r21, 0x00	; 0
    5e10:	94 f0       	brlt	.+36     	; 0x5e36 <ldexp+0x38>
    5e12:	59 f0       	breq	.+22     	; 0x5e2a <ldexp+0x2c>
    5e14:	88 23       	and	r24, r24
    5e16:	32 f0       	brmi	.+12     	; 0x5e24 <ldexp+0x26>
    5e18:	66 0f       	add	r22, r22
    5e1a:	77 1f       	adc	r23, r23
    5e1c:	88 1f       	adc	r24, r24
    5e1e:	91 50       	subi	r25, 0x01	; 1
    5e20:	50 40       	sbci	r21, 0x00	; 0
    5e22:	c1 f7       	brne	.-16     	; 0x5e14 <ldexp+0x16>
    5e24:	9e 3f       	cpi	r25, 0xFE	; 254
    5e26:	51 05       	cpc	r21, r1
    5e28:	44 f7       	brge	.-48     	; 0x5dfa <inverse+0xe>
    5e2a:	88 0f       	add	r24, r24
    5e2c:	91 1d       	adc	r25, r1
    5e2e:	96 95       	lsr	r25
    5e30:	87 95       	ror	r24
    5e32:	97 f9       	bld	r25, 7
    5e34:	08 95       	ret
    5e36:	5f 3f       	cpi	r21, 0xFF	; 255
    5e38:	ac f0       	brlt	.+42     	; 0x5e64 <ldexp+0x66>
    5e3a:	98 3e       	cpi	r25, 0xE8	; 232
    5e3c:	9c f0       	brlt	.+38     	; 0x5e64 <ldexp+0x66>
    5e3e:	bb 27       	eor	r27, r27
    5e40:	86 95       	lsr	r24
    5e42:	77 95       	ror	r23
    5e44:	67 95       	ror	r22
    5e46:	b7 95       	ror	r27
    5e48:	08 f4       	brcc	.+2      	; 0x5e4c <ldexp+0x4e>
    5e4a:	b1 60       	ori	r27, 0x01	; 1
    5e4c:	93 95       	inc	r25
    5e4e:	c1 f7       	brne	.-16     	; 0x5e40 <ldexp+0x42>
    5e50:	bb 0f       	add	r27, r27
    5e52:	58 f7       	brcc	.-42     	; 0x5e2a <ldexp+0x2c>
    5e54:	11 f4       	brne	.+4      	; 0x5e5a <ldexp+0x5c>
    5e56:	60 ff       	sbrs	r22, 0
    5e58:	e8 cf       	rjmp	.-48     	; 0x5e2a <ldexp+0x2c>
    5e5a:	6f 5f       	subi	r22, 0xFF	; 255
    5e5c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e5e:	8f 4f       	sbci	r24, 0xFF	; 255
    5e60:	9f 4f       	sbci	r25, 0xFF	; 255
    5e62:	e3 cf       	rjmp	.-58     	; 0x5e2a <ldexp+0x2c>
    5e64:	7a ce       	rjmp	.-780    	; 0x5b5a <__fp_szero>
    5e66:	0e f0       	brts	.+2      	; 0x5e6a <ldexp+0x6c>
    5e68:	76 c0       	rjmp	.+236    	; 0x5f56 <__fp_mpack>
    5e6a:	32 ce       	rjmp	.-924    	; 0x5ad0 <__fp_nan>
    5e6c:	68 94       	set
    5e6e:	2a ce       	rjmp	.-940    	; 0x5ac4 <__fp_inf>

00005e70 <log>:
    5e70:	59 de       	rcall	.-846    	; 0x5b24 <__fp_splitA>
    5e72:	c8 f3       	brcs	.-14     	; 0x5e66 <ldexp+0x68>
    5e74:	99 23       	and	r25, r25
    5e76:	d1 f3       	breq	.-12     	; 0x5e6c <ldexp+0x6e>
    5e78:	c6 f3       	brts	.-16     	; 0x5e6a <ldexp+0x6c>
    5e7a:	df 93       	push	r29
    5e7c:	cf 93       	push	r28
    5e7e:	1f 93       	push	r17
    5e80:	0f 93       	push	r16
    5e82:	ff 92       	push	r15
    5e84:	c9 2f       	mov	r28, r25
    5e86:	dd 27       	eor	r29, r29
    5e88:	88 23       	and	r24, r24
    5e8a:	2a f0       	brmi	.+10     	; 0x5e96 <log+0x26>
    5e8c:	21 97       	sbiw	r28, 0x01	; 1
    5e8e:	66 0f       	add	r22, r22
    5e90:	77 1f       	adc	r23, r23
    5e92:	88 1f       	adc	r24, r24
    5e94:	da f7       	brpl	.-10     	; 0x5e8c <log+0x1c>
    5e96:	20 e0       	ldi	r18, 0x00	; 0
    5e98:	30 e0       	ldi	r19, 0x00	; 0
    5e9a:	40 e8       	ldi	r20, 0x80	; 128
    5e9c:	5f eb       	ldi	r21, 0xBF	; 191
    5e9e:	9f e3       	ldi	r25, 0x3F	; 63
    5ea0:	88 39       	cpi	r24, 0x98	; 152
    5ea2:	20 f0       	brcs	.+8      	; 0x5eac <log+0x3c>
    5ea4:	80 3e       	cpi	r24, 0xE0	; 224
    5ea6:	30 f0       	brcs	.+12     	; 0x5eb4 <log+0x44>
    5ea8:	21 96       	adiw	r28, 0x01	; 1
    5eaa:	8f 77       	andi	r24, 0x7F	; 127
    5eac:	a9 dc       	rcall	.-1710   	; 0x5800 <__addsf3>
    5eae:	e0 ef       	ldi	r30, 0xF0	; 240
    5eb0:	f0 e0       	ldi	r31, 0x00	; 0
    5eb2:	03 c0       	rjmp	.+6      	; 0x5eba <log+0x4a>
    5eb4:	a5 dc       	rcall	.-1718   	; 0x5800 <__addsf3>
    5eb6:	ed e1       	ldi	r30, 0x1D	; 29
    5eb8:	f1 e0       	ldi	r31, 0x01	; 1
    5eba:	73 df       	rcall	.-282    	; 0x5da2 <__fp_powser>
    5ebc:	8b 01       	movw	r16, r22
    5ebe:	be 01       	movw	r22, r28
    5ec0:	ec 01       	movw	r28, r24
    5ec2:	fb 2e       	mov	r15, r27
    5ec4:	6f 57       	subi	r22, 0x7F	; 127
    5ec6:	71 09       	sbc	r23, r1
    5ec8:	75 95       	asr	r23
    5eca:	77 1f       	adc	r23, r23
    5ecc:	88 0b       	sbc	r24, r24
    5ece:	99 0b       	sbc	r25, r25
    5ed0:	9a dd       	rcall	.-1228   	; 0x5a06 <__floatsisf>
    5ed2:	28 e1       	ldi	r18, 0x18	; 24
    5ed4:	32 e7       	ldi	r19, 0x72	; 114
    5ed6:	41 e3       	ldi	r20, 0x31	; 49
    5ed8:	5f e3       	ldi	r21, 0x3F	; 63
    5eda:	8f de       	rcall	.-738    	; 0x5bfa <__mulsf3x>
    5edc:	af 2d       	mov	r26, r15
    5ede:	98 01       	movw	r18, r16
    5ee0:	ae 01       	movw	r20, r28
    5ee2:	ff 90       	pop	r15
    5ee4:	0f 91       	pop	r16
    5ee6:	1f 91       	pop	r17
    5ee8:	cf 91       	pop	r28
    5eea:	df 91       	pop	r29
    5eec:	9a dc       	rcall	.-1740   	; 0x5822 <__addsf3x>
    5eee:	01 ce       	rjmp	.-1022   	; 0x5af2 <__fp_round>

00005ef0 <modf>:
    5ef0:	fa 01       	movw	r30, r20
    5ef2:	dc 01       	movw	r26, r24
    5ef4:	aa 0f       	add	r26, r26
    5ef6:	bb 1f       	adc	r27, r27
    5ef8:	9b 01       	movw	r18, r22
    5efa:	ac 01       	movw	r20, r24
    5efc:	bf 57       	subi	r27, 0x7F	; 127
    5efe:	28 f4       	brcc	.+10     	; 0x5f0a <modf+0x1a>
    5f00:	22 27       	eor	r18, r18
    5f02:	33 27       	eor	r19, r19
    5f04:	44 27       	eor	r20, r20
    5f06:	50 78       	andi	r21, 0x80	; 128
    5f08:	1f c0       	rjmp	.+62     	; 0x5f48 <modf+0x58>
    5f0a:	b7 51       	subi	r27, 0x17	; 23
    5f0c:	88 f4       	brcc	.+34     	; 0x5f30 <modf+0x40>
    5f0e:	ab 2f       	mov	r26, r27
    5f10:	00 24       	eor	r0, r0
    5f12:	46 95       	lsr	r20
    5f14:	37 95       	ror	r19
    5f16:	27 95       	ror	r18
    5f18:	01 1c       	adc	r0, r1
    5f1a:	a3 95       	inc	r26
    5f1c:	d2 f3       	brmi	.-12     	; 0x5f12 <modf+0x22>
    5f1e:	00 20       	and	r0, r0
    5f20:	69 f0       	breq	.+26     	; 0x5f3c <modf+0x4c>
    5f22:	22 0f       	add	r18, r18
    5f24:	33 1f       	adc	r19, r19
    5f26:	44 1f       	adc	r20, r20
    5f28:	b3 95       	inc	r27
    5f2a:	da f3       	brmi	.-10     	; 0x5f22 <modf+0x32>
    5f2c:	0d d0       	rcall	.+26     	; 0x5f48 <modf+0x58>
    5f2e:	67 cc       	rjmp	.-1842   	; 0x57fe <__subsf3>
    5f30:	61 30       	cpi	r22, 0x01	; 1
    5f32:	71 05       	cpc	r23, r1
    5f34:	a0 e8       	ldi	r26, 0x80	; 128
    5f36:	8a 07       	cpc	r24, r26
    5f38:	b9 46       	sbci	r27, 0x69	; 105
    5f3a:	30 f4       	brcc	.+12     	; 0x5f48 <modf+0x58>
    5f3c:	9b 01       	movw	r18, r22
    5f3e:	ac 01       	movw	r20, r24
    5f40:	66 27       	eor	r22, r22
    5f42:	77 27       	eor	r23, r23
    5f44:	88 27       	eor	r24, r24
    5f46:	90 78       	andi	r25, 0x80	; 128
    5f48:	30 96       	adiw	r30, 0x00	; 0
    5f4a:	21 f0       	breq	.+8      	; 0x5f54 <modf+0x64>
    5f4c:	20 83       	st	Z, r18
    5f4e:	31 83       	std	Z+1, r19	; 0x01
    5f50:	42 83       	std	Z+2, r20	; 0x02
    5f52:	53 83       	std	Z+3, r21	; 0x03
    5f54:	08 95       	ret

00005f56 <__fp_mpack>:
    5f56:	9f 3f       	cpi	r25, 0xFF	; 255
    5f58:	31 f0       	breq	.+12     	; 0x5f66 <__fp_mpack_finite+0xc>

00005f5a <__fp_mpack_finite>:
    5f5a:	91 50       	subi	r25, 0x01	; 1
    5f5c:	20 f4       	brcc	.+8      	; 0x5f66 <__fp_mpack_finite+0xc>
    5f5e:	87 95       	ror	r24
    5f60:	77 95       	ror	r23
    5f62:	67 95       	ror	r22
    5f64:	b7 95       	ror	r27
    5f66:	88 0f       	add	r24, r24
    5f68:	91 1d       	adc	r25, r1
    5f6a:	96 95       	lsr	r25
    5f6c:	87 95       	ror	r24
    5f6e:	97 f9       	bld	r25, 7
    5f70:	08 95       	ret

00005f72 <vfprintf>:
    5f72:	a1 e1       	ldi	r26, 0x11	; 17
    5f74:	b0 e0       	ldi	r27, 0x00	; 0
    5f76:	ee eb       	ldi	r30, 0xBE	; 190
    5f78:	ff e2       	ldi	r31, 0x2F	; 47
    5f7a:	b7 c3       	rjmp	.+1902   	; 0x66ea <__prologue_saves__>
    5f7c:	3c 01       	movw	r6, r24
    5f7e:	7f 87       	std	Y+15, r23	; 0x0f
    5f80:	6e 87       	std	Y+14, r22	; 0x0e
    5f82:	6a 01       	movw	r12, r20
    5f84:	fc 01       	movw	r30, r24
    5f86:	17 82       	std	Z+7, r1	; 0x07
    5f88:	16 82       	std	Z+6, r1	; 0x06
    5f8a:	83 81       	ldd	r24, Z+3	; 0x03
    5f8c:	81 fd       	sbrc	r24, 1
    5f8e:	03 c0       	rjmp	.+6      	; 0x5f96 <vfprintf+0x24>
    5f90:	6f ef       	ldi	r22, 0xFF	; 255
    5f92:	7f ef       	ldi	r23, 0xFF	; 255
    5f94:	52 c3       	rjmp	.+1700   	; 0x663a <vfprintf+0x6c8>
    5f96:	9e 01       	movw	r18, r28
    5f98:	2f 5f       	subi	r18, 0xFF	; 255
    5f9a:	3f 4f       	sbci	r19, 0xFF	; 255
    5f9c:	39 8b       	std	Y+17, r19	; 0x11
    5f9e:	28 8b       	std	Y+16, r18	; 0x10
    5fa0:	f3 01       	movw	r30, r6
    5fa2:	23 81       	ldd	r18, Z+3	; 0x03
    5fa4:	ee 85       	ldd	r30, Y+14	; 0x0e
    5fa6:	ff 85       	ldd	r31, Y+15	; 0x0f
    5fa8:	23 fd       	sbrc	r18, 3
    5faa:	85 91       	lpm	r24, Z+
    5fac:	23 ff       	sbrs	r18, 3
    5fae:	81 91       	ld	r24, Z+
    5fb0:	ff 87       	std	Y+15, r31	; 0x0f
    5fb2:	ee 87       	std	Y+14, r30	; 0x0e
    5fb4:	88 23       	and	r24, r24
    5fb6:	09 f4       	brne	.+2      	; 0x5fba <vfprintf+0x48>
    5fb8:	3d c3       	rjmp	.+1658   	; 0x6634 <vfprintf+0x6c2>
    5fba:	85 32       	cpi	r24, 0x25	; 37
    5fbc:	51 f4       	brne	.+20     	; 0x5fd2 <vfprintf+0x60>
    5fbe:	ee 85       	ldd	r30, Y+14	; 0x0e
    5fc0:	ff 85       	ldd	r31, Y+15	; 0x0f
    5fc2:	23 fd       	sbrc	r18, 3
    5fc4:	85 91       	lpm	r24, Z+
    5fc6:	23 ff       	sbrs	r18, 3
    5fc8:	81 91       	ld	r24, Z+
    5fca:	ff 87       	std	Y+15, r31	; 0x0f
    5fcc:	ee 87       	std	Y+14, r30	; 0x0e
    5fce:	85 32       	cpi	r24, 0x25	; 37
    5fd0:	21 f4       	brne	.+8      	; 0x5fda <vfprintf+0x68>
    5fd2:	90 e0       	ldi	r25, 0x00	; 0
    5fd4:	b3 01       	movw	r22, r6
    5fd6:	20 d6       	rcall	.+3136   	; 0x6c18 <fputc>
    5fd8:	e3 cf       	rjmp	.-58     	; 0x5fa0 <vfprintf+0x2e>
    5fda:	98 2f       	mov	r25, r24
    5fdc:	10 e0       	ldi	r17, 0x00	; 0
    5fde:	88 24       	eor	r8, r8
    5fe0:	99 24       	eor	r9, r9
    5fe2:	10 32       	cpi	r17, 0x20	; 32
    5fe4:	b0 f4       	brcc	.+44     	; 0x6012 <vfprintf+0xa0>
    5fe6:	9b 32       	cpi	r25, 0x2B	; 43
    5fe8:	69 f0       	breq	.+26     	; 0x6004 <vfprintf+0x92>
    5fea:	9c 32       	cpi	r25, 0x2C	; 44
    5fec:	28 f4       	brcc	.+10     	; 0x5ff8 <vfprintf+0x86>
    5fee:	90 32       	cpi	r25, 0x20	; 32
    5ff0:	51 f0       	breq	.+20     	; 0x6006 <vfprintf+0x94>
    5ff2:	93 32       	cpi	r25, 0x23	; 35
    5ff4:	71 f4       	brne	.+28     	; 0x6012 <vfprintf+0xa0>
    5ff6:	0b c0       	rjmp	.+22     	; 0x600e <vfprintf+0x9c>
    5ff8:	9d 32       	cpi	r25, 0x2D	; 45
    5ffa:	39 f0       	breq	.+14     	; 0x600a <vfprintf+0x98>
    5ffc:	90 33       	cpi	r25, 0x30	; 48
    5ffe:	49 f4       	brne	.+18     	; 0x6012 <vfprintf+0xa0>
    6000:	11 60       	ori	r17, 0x01	; 1
    6002:	28 c0       	rjmp	.+80     	; 0x6054 <vfprintf+0xe2>
    6004:	12 60       	ori	r17, 0x02	; 2
    6006:	14 60       	ori	r17, 0x04	; 4
    6008:	25 c0       	rjmp	.+74     	; 0x6054 <vfprintf+0xe2>
    600a:	18 60       	ori	r17, 0x08	; 8
    600c:	23 c0       	rjmp	.+70     	; 0x6054 <vfprintf+0xe2>
    600e:	10 61       	ori	r17, 0x10	; 16
    6010:	21 c0       	rjmp	.+66     	; 0x6054 <vfprintf+0xe2>
    6012:	17 fd       	sbrc	r17, 7
    6014:	2a c0       	rjmp	.+84     	; 0x606a <vfprintf+0xf8>
    6016:	89 2f       	mov	r24, r25
    6018:	80 53       	subi	r24, 0x30	; 48
    601a:	8a 30       	cpi	r24, 0x0A	; 10
    601c:	78 f4       	brcc	.+30     	; 0x603c <vfprintf+0xca>
    601e:	16 ff       	sbrs	r17, 6
    6020:	06 c0       	rjmp	.+12     	; 0x602e <vfprintf+0xbc>
    6022:	fa e0       	ldi	r31, 0x0A	; 10
    6024:	9f 9e       	mul	r9, r31
    6026:	90 2c       	mov	r9, r0
    6028:	11 24       	eor	r1, r1
    602a:	98 0e       	add	r9, r24
    602c:	13 c0       	rjmp	.+38     	; 0x6054 <vfprintf+0xe2>
    602e:	3a e0       	ldi	r19, 0x0A	; 10
    6030:	83 9e       	mul	r8, r19
    6032:	80 2c       	mov	r8, r0
    6034:	11 24       	eor	r1, r1
    6036:	88 0e       	add	r8, r24
    6038:	10 62       	ori	r17, 0x20	; 32
    603a:	0c c0       	rjmp	.+24     	; 0x6054 <vfprintf+0xe2>
    603c:	9e 32       	cpi	r25, 0x2E	; 46
    603e:	21 f4       	brne	.+8      	; 0x6048 <vfprintf+0xd6>
    6040:	16 fd       	sbrc	r17, 6
    6042:	f8 c2       	rjmp	.+1520   	; 0x6634 <vfprintf+0x6c2>
    6044:	10 64       	ori	r17, 0x40	; 64
    6046:	06 c0       	rjmp	.+12     	; 0x6054 <vfprintf+0xe2>
    6048:	9c 36       	cpi	r25, 0x6C	; 108
    604a:	11 f4       	brne	.+4      	; 0x6050 <vfprintf+0xde>
    604c:	10 68       	ori	r17, 0x80	; 128
    604e:	02 c0       	rjmp	.+4      	; 0x6054 <vfprintf+0xe2>
    6050:	98 36       	cpi	r25, 0x68	; 104
    6052:	59 f4       	brne	.+22     	; 0x606a <vfprintf+0xf8>
    6054:	ee 85       	ldd	r30, Y+14	; 0x0e
    6056:	ff 85       	ldd	r31, Y+15	; 0x0f
    6058:	23 fd       	sbrc	r18, 3
    605a:	95 91       	lpm	r25, Z+
    605c:	23 ff       	sbrs	r18, 3
    605e:	91 91       	ld	r25, Z+
    6060:	ff 87       	std	Y+15, r31	; 0x0f
    6062:	ee 87       	std	Y+14, r30	; 0x0e
    6064:	99 23       	and	r25, r25
    6066:	09 f0       	breq	.+2      	; 0x606a <vfprintf+0xf8>
    6068:	bc cf       	rjmp	.-136    	; 0x5fe2 <vfprintf+0x70>
    606a:	89 2f       	mov	r24, r25
    606c:	85 54       	subi	r24, 0x45	; 69
    606e:	83 30       	cpi	r24, 0x03	; 3
    6070:	20 f4       	brcc	.+8      	; 0x607a <vfprintf+0x108>
    6072:	81 2f       	mov	r24, r17
    6074:	80 61       	ori	r24, 0x10	; 16
    6076:	90 5e       	subi	r25, 0xE0	; 224
    6078:	07 c0       	rjmp	.+14     	; 0x6088 <vfprintf+0x116>
    607a:	89 2f       	mov	r24, r25
    607c:	85 56       	subi	r24, 0x65	; 101
    607e:	83 30       	cpi	r24, 0x03	; 3
    6080:	08 f0       	brcs	.+2      	; 0x6084 <vfprintf+0x112>
    6082:	8f c1       	rjmp	.+798    	; 0x63a2 <vfprintf+0x430>
    6084:	81 2f       	mov	r24, r17
    6086:	8f 7e       	andi	r24, 0xEF	; 239
    6088:	86 fd       	sbrc	r24, 6
    608a:	02 c0       	rjmp	.+4      	; 0x6090 <vfprintf+0x11e>
    608c:	76 e0       	ldi	r23, 0x06	; 6
    608e:	97 2e       	mov	r9, r23
    6090:	6f e3       	ldi	r22, 0x3F	; 63
    6092:	f6 2e       	mov	r15, r22
    6094:	f8 22       	and	r15, r24
    6096:	95 36       	cpi	r25, 0x65	; 101
    6098:	19 f4       	brne	.+6      	; 0x60a0 <vfprintf+0x12e>
    609a:	f0 e4       	ldi	r31, 0x40	; 64
    609c:	ff 2a       	or	r15, r31
    609e:	07 c0       	rjmp	.+14     	; 0x60ae <vfprintf+0x13c>
    60a0:	96 36       	cpi	r25, 0x66	; 102
    60a2:	19 f4       	brne	.+6      	; 0x60aa <vfprintf+0x138>
    60a4:	20 e8       	ldi	r18, 0x80	; 128
    60a6:	f2 2a       	or	r15, r18
    60a8:	02 c0       	rjmp	.+4      	; 0x60ae <vfprintf+0x13c>
    60aa:	91 10       	cpse	r9, r1
    60ac:	9a 94       	dec	r9
    60ae:	f7 fe       	sbrs	r15, 7
    60b0:	0a c0       	rjmp	.+20     	; 0x60c6 <vfprintf+0x154>
    60b2:	3b e3       	ldi	r19, 0x3B	; 59
    60b4:	39 15       	cp	r19, r9
    60b6:	18 f4       	brcc	.+6      	; 0x60be <vfprintf+0x14c>
    60b8:	5c e3       	ldi	r21, 0x3C	; 60
    60ba:	b5 2e       	mov	r11, r21
    60bc:	02 c0       	rjmp	.+4      	; 0x60c2 <vfprintf+0x150>
    60be:	b9 2c       	mov	r11, r9
    60c0:	b3 94       	inc	r11
    60c2:	27 e0       	ldi	r18, 0x07	; 7
    60c4:	09 c0       	rjmp	.+18     	; 0x60d8 <vfprintf+0x166>
    60c6:	47 e0       	ldi	r20, 0x07	; 7
    60c8:	49 15       	cp	r20, r9
    60ca:	20 f4       	brcc	.+8      	; 0x60d4 <vfprintf+0x162>
    60cc:	bb 24       	eor	r11, r11
    60ce:	47 e0       	ldi	r20, 0x07	; 7
    60d0:	94 2e       	mov	r9, r20
    60d2:	f7 cf       	rjmp	.-18     	; 0x60c2 <vfprintf+0x150>
    60d4:	29 2d       	mov	r18, r9
    60d6:	bb 24       	eor	r11, r11
    60d8:	c6 01       	movw	r24, r12
    60da:	04 96       	adiw	r24, 0x04	; 4
    60dc:	9d 87       	std	Y+13, r25	; 0x0d
    60de:	8c 87       	std	Y+12, r24	; 0x0c
    60e0:	f6 01       	movw	r30, r12
    60e2:	60 81       	ld	r22, Z
    60e4:	71 81       	ldd	r23, Z+1	; 0x01
    60e6:	82 81       	ldd	r24, Z+2	; 0x02
    60e8:	93 81       	ldd	r25, Z+3	; 0x03
    60ea:	ae 01       	movw	r20, r28
    60ec:	4f 5f       	subi	r20, 0xFF	; 255
    60ee:	5f 4f       	sbci	r21, 0xFF	; 255
    60f0:	0b 2d       	mov	r16, r11
    60f2:	a4 d4       	rcall	.+2376   	; 0x6a3c <__ftoa_engine>
    60f4:	6c 01       	movw	r12, r24
    60f6:	09 81       	ldd	r16, Y+1	; 0x01
    60f8:	20 2e       	mov	r2, r16
    60fa:	33 24       	eor	r3, r3
    60fc:	00 ff       	sbrs	r16, 0
    60fe:	04 c0       	rjmp	.+8      	; 0x6108 <vfprintf+0x196>
    6100:	03 fd       	sbrc	r16, 3
    6102:	02 c0       	rjmp	.+4      	; 0x6108 <vfprintf+0x196>
    6104:	1d e2       	ldi	r17, 0x2D	; 45
    6106:	09 c0       	rjmp	.+18     	; 0x611a <vfprintf+0x1a8>
    6108:	f1 fe       	sbrs	r15, 1
    610a:	02 c0       	rjmp	.+4      	; 0x6110 <vfprintf+0x19e>
    610c:	1b e2       	ldi	r17, 0x2B	; 43
    610e:	05 c0       	rjmp	.+10     	; 0x611a <vfprintf+0x1a8>
    6110:	f2 fc       	sbrc	r15, 2
    6112:	02 c0       	rjmp	.+4      	; 0x6118 <vfprintf+0x1a6>
    6114:	10 e0       	ldi	r17, 0x00	; 0
    6116:	01 c0       	rjmp	.+2      	; 0x611a <vfprintf+0x1a8>
    6118:	10 e2       	ldi	r17, 0x20	; 32
    611a:	c1 01       	movw	r24, r2
    611c:	8c 70       	andi	r24, 0x0C	; 12
    611e:	90 70       	andi	r25, 0x00	; 0
    6120:	89 2b       	or	r24, r25
    6122:	a1 f1       	breq	.+104    	; 0x618c <vfprintf+0x21a>
    6124:	11 23       	and	r17, r17
    6126:	11 f4       	brne	.+4      	; 0x612c <vfprintf+0x1ba>
    6128:	83 e0       	ldi	r24, 0x03	; 3
    612a:	01 c0       	rjmp	.+2      	; 0x612e <vfprintf+0x1bc>
    612c:	84 e0       	ldi	r24, 0x04	; 4
    612e:	88 15       	cp	r24, r8
    6130:	10 f0       	brcs	.+4      	; 0x6136 <vfprintf+0x1c4>
    6132:	88 24       	eor	r8, r8
    6134:	09 c0       	rjmp	.+18     	; 0x6148 <vfprintf+0x1d6>
    6136:	88 1a       	sub	r8, r24
    6138:	f3 fc       	sbrc	r15, 3
    613a:	06 c0       	rjmp	.+12     	; 0x6148 <vfprintf+0x1d6>
    613c:	80 e2       	ldi	r24, 0x20	; 32
    613e:	90 e0       	ldi	r25, 0x00	; 0
    6140:	b3 01       	movw	r22, r6
    6142:	6a d5       	rcall	.+2772   	; 0x6c18 <fputc>
    6144:	8a 94       	dec	r8
    6146:	d1 f7       	brne	.-12     	; 0x613c <vfprintf+0x1ca>
    6148:	11 23       	and	r17, r17
    614a:	21 f0       	breq	.+8      	; 0x6154 <vfprintf+0x1e2>
    614c:	81 2f       	mov	r24, r17
    614e:	90 e0       	ldi	r25, 0x00	; 0
    6150:	b3 01       	movw	r22, r6
    6152:	62 d5       	rcall	.+2756   	; 0x6c18 <fputc>
    6154:	23 fe       	sbrs	r2, 3
    6156:	03 c0       	rjmp	.+6      	; 0x615e <vfprintf+0x1ec>
    6158:	0f e5       	ldi	r16, 0x5F	; 95
    615a:	15 e0       	ldi	r17, 0x05	; 5
    615c:	0d c0       	rjmp	.+26     	; 0x6178 <vfprintf+0x206>
    615e:	03 e6       	ldi	r16, 0x63	; 99
    6160:	15 e0       	ldi	r17, 0x05	; 5
    6162:	0a c0       	rjmp	.+20     	; 0x6178 <vfprintf+0x206>
    6164:	e1 14       	cp	r14, r1
    6166:	f1 04       	cpc	r15, r1
    6168:	09 f0       	breq	.+2      	; 0x616c <vfprintf+0x1fa>
    616a:	80 52       	subi	r24, 0x20	; 32
    616c:	90 e0       	ldi	r25, 0x00	; 0
    616e:	b3 01       	movw	r22, r6
    6170:	53 d5       	rcall	.+2726   	; 0x6c18 <fputc>
    6172:	0f 5f       	subi	r16, 0xFF	; 255
    6174:	1f 4f       	sbci	r17, 0xFF	; 255
    6176:	05 c0       	rjmp	.+10     	; 0x6182 <vfprintf+0x210>
    6178:	ef 2c       	mov	r14, r15
    617a:	ff 24       	eor	r15, r15
    617c:	f0 e1       	ldi	r31, 0x10	; 16
    617e:	ef 22       	and	r14, r31
    6180:	ff 24       	eor	r15, r15
    6182:	f8 01       	movw	r30, r16
    6184:	84 91       	lpm	r24, Z+
    6186:	88 23       	and	r24, r24
    6188:	69 f7       	brne	.-38     	; 0x6164 <vfprintf+0x1f2>
    618a:	08 c1       	rjmp	.+528    	; 0x639c <vfprintf+0x42a>
    618c:	f7 fe       	sbrs	r15, 7
    618e:	12 c0       	rjmp	.+36     	; 0x61b4 <vfprintf+0x242>
    6190:	bc 0c       	add	r11, r12
    6192:	24 fe       	sbrs	r2, 4
    6194:	04 c0       	rjmp	.+8      	; 0x619e <vfprintf+0x22c>
    6196:	8a 81       	ldd	r24, Y+2	; 0x02
    6198:	81 33       	cpi	r24, 0x31	; 49
    619a:	09 f4       	brne	.+2      	; 0x619e <vfprintf+0x22c>
    619c:	ba 94       	dec	r11
    619e:	1b 14       	cp	r1, r11
    61a0:	1c f0       	brlt	.+6      	; 0x61a8 <vfprintf+0x236>
    61a2:	bb 24       	eor	r11, r11
    61a4:	b3 94       	inc	r11
    61a6:	2d c0       	rjmp	.+90     	; 0x6202 <vfprintf+0x290>
    61a8:	f8 e0       	ldi	r31, 0x08	; 8
    61aa:	fb 15       	cp	r31, r11
    61ac:	50 f5       	brcc	.+84     	; 0x6202 <vfprintf+0x290>
    61ae:	38 e0       	ldi	r19, 0x08	; 8
    61b0:	b3 2e       	mov	r11, r19
    61b2:	27 c0       	rjmp	.+78     	; 0x6202 <vfprintf+0x290>
    61b4:	f6 fc       	sbrc	r15, 6
    61b6:	25 c0       	rjmp	.+74     	; 0x6202 <vfprintf+0x290>
    61b8:	89 2d       	mov	r24, r9
    61ba:	90 e0       	ldi	r25, 0x00	; 0
    61bc:	8c 15       	cp	r24, r12
    61be:	9d 05       	cpc	r25, r13
    61c0:	4c f0       	brlt	.+18     	; 0x61d4 <vfprintf+0x262>
    61c2:	2c ef       	ldi	r18, 0xFC	; 252
    61c4:	c2 16       	cp	r12, r18
    61c6:	2f ef       	ldi	r18, 0xFF	; 255
    61c8:	d2 06       	cpc	r13, r18
    61ca:	24 f0       	brlt	.+8      	; 0x61d4 <vfprintf+0x262>
    61cc:	30 e8       	ldi	r19, 0x80	; 128
    61ce:	f3 2a       	or	r15, r19
    61d0:	01 c0       	rjmp	.+2      	; 0x61d4 <vfprintf+0x262>
    61d2:	9a 94       	dec	r9
    61d4:	99 20       	and	r9, r9
    61d6:	49 f0       	breq	.+18     	; 0x61ea <vfprintf+0x278>
    61d8:	e2 e0       	ldi	r30, 0x02	; 2
    61da:	f0 e0       	ldi	r31, 0x00	; 0
    61dc:	ec 0f       	add	r30, r28
    61de:	fd 1f       	adc	r31, r29
    61e0:	e9 0d       	add	r30, r9
    61e2:	f1 1d       	adc	r31, r1
    61e4:	80 81       	ld	r24, Z
    61e6:	80 33       	cpi	r24, 0x30	; 48
    61e8:	a1 f3       	breq	.-24     	; 0x61d2 <vfprintf+0x260>
    61ea:	f7 fe       	sbrs	r15, 7
    61ec:	0a c0       	rjmp	.+20     	; 0x6202 <vfprintf+0x290>
    61ee:	b9 2c       	mov	r11, r9
    61f0:	b3 94       	inc	r11
    61f2:	89 2d       	mov	r24, r9
    61f4:	90 e0       	ldi	r25, 0x00	; 0
    61f6:	c8 16       	cp	r12, r24
    61f8:	d9 06       	cpc	r13, r25
    61fa:	14 f0       	brlt	.+4      	; 0x6200 <vfprintf+0x28e>
    61fc:	99 24       	eor	r9, r9
    61fe:	01 c0       	rjmp	.+2      	; 0x6202 <vfprintf+0x290>
    6200:	9c 18       	sub	r9, r12
    6202:	f7 fc       	sbrc	r15, 7
    6204:	03 c0       	rjmp	.+6      	; 0x620c <vfprintf+0x29a>
    6206:	25 e0       	ldi	r18, 0x05	; 5
    6208:	30 e0       	ldi	r19, 0x00	; 0
    620a:	09 c0       	rjmp	.+18     	; 0x621e <vfprintf+0x2ac>
    620c:	1c 14       	cp	r1, r12
    620e:	1d 04       	cpc	r1, r13
    6210:	1c f0       	brlt	.+6      	; 0x6218 <vfprintf+0x2a6>
    6212:	21 e0       	ldi	r18, 0x01	; 1
    6214:	30 e0       	ldi	r19, 0x00	; 0
    6216:	03 c0       	rjmp	.+6      	; 0x621e <vfprintf+0x2ac>
    6218:	96 01       	movw	r18, r12
    621a:	2f 5f       	subi	r18, 0xFF	; 255
    621c:	3f 4f       	sbci	r19, 0xFF	; 255
    621e:	11 23       	and	r17, r17
    6220:	11 f0       	breq	.+4      	; 0x6226 <vfprintf+0x2b4>
    6222:	2f 5f       	subi	r18, 0xFF	; 255
    6224:	3f 4f       	sbci	r19, 0xFF	; 255
    6226:	99 20       	and	r9, r9
    6228:	29 f0       	breq	.+10     	; 0x6234 <vfprintf+0x2c2>
    622a:	89 2d       	mov	r24, r9
    622c:	90 e0       	ldi	r25, 0x00	; 0
    622e:	01 96       	adiw	r24, 0x01	; 1
    6230:	28 0f       	add	r18, r24
    6232:	39 1f       	adc	r19, r25
    6234:	88 2d       	mov	r24, r8
    6236:	90 e0       	ldi	r25, 0x00	; 0
    6238:	28 17       	cp	r18, r24
    623a:	39 07       	cpc	r19, r25
    623c:	14 f0       	brlt	.+4      	; 0x6242 <vfprintf+0x2d0>
    623e:	88 24       	eor	r8, r8
    6240:	01 c0       	rjmp	.+2      	; 0x6244 <vfprintf+0x2d2>
    6242:	82 1a       	sub	r8, r18
    6244:	4f 2c       	mov	r4, r15
    6246:	55 24       	eor	r5, r5
    6248:	c2 01       	movw	r24, r4
    624a:	89 70       	andi	r24, 0x09	; 9
    624c:	90 70       	andi	r25, 0x00	; 0
    624e:	89 2b       	or	r24, r25
    6250:	31 f0       	breq	.+12     	; 0x625e <vfprintf+0x2ec>
    6252:	07 c0       	rjmp	.+14     	; 0x6262 <vfprintf+0x2f0>
    6254:	80 e2       	ldi	r24, 0x20	; 32
    6256:	90 e0       	ldi	r25, 0x00	; 0
    6258:	b3 01       	movw	r22, r6
    625a:	de d4       	rcall	.+2492   	; 0x6c18 <fputc>
    625c:	8a 94       	dec	r8
    625e:	88 20       	and	r8, r8
    6260:	c9 f7       	brne	.-14     	; 0x6254 <vfprintf+0x2e2>
    6262:	11 23       	and	r17, r17
    6264:	21 f0       	breq	.+8      	; 0x626e <vfprintf+0x2fc>
    6266:	81 2f       	mov	r24, r17
    6268:	90 e0       	ldi	r25, 0x00	; 0
    626a:	b3 01       	movw	r22, r6
    626c:	d5 d4       	rcall	.+2474   	; 0x6c18 <fputc>
    626e:	43 fe       	sbrs	r4, 3
    6270:	06 c0       	rjmp	.+12     	; 0x627e <vfprintf+0x30c>
    6272:	07 c0       	rjmp	.+14     	; 0x6282 <vfprintf+0x310>
    6274:	80 e3       	ldi	r24, 0x30	; 48
    6276:	90 e0       	ldi	r25, 0x00	; 0
    6278:	b3 01       	movw	r22, r6
    627a:	ce d4       	rcall	.+2460   	; 0x6c18 <fputc>
    627c:	8a 94       	dec	r8
    627e:	88 20       	and	r8, r8
    6280:	c9 f7       	brne	.-14     	; 0x6274 <vfprintf+0x302>
    6282:	f7 fe       	sbrs	r15, 7
    6284:	44 c0       	rjmp	.+136    	; 0x630e <vfprintf+0x39c>
    6286:	86 01       	movw	r16, r12
    6288:	d7 fe       	sbrs	r13, 7
    628a:	02 c0       	rjmp	.+4      	; 0x6290 <vfprintf+0x31e>
    628c:	00 e0       	ldi	r16, 0x00	; 0
    628e:	10 e0       	ldi	r17, 0x00	; 0
    6290:	76 01       	movw	r14, r12
    6292:	08 94       	sec
    6294:	e1 1c       	adc	r14, r1
    6296:	f1 1c       	adc	r15, r1
    6298:	e0 1a       	sub	r14, r16
    629a:	f1 0a       	sbc	r15, r17
    629c:	41 e0       	ldi	r20, 0x01	; 1
    629e:	50 e0       	ldi	r21, 0x00	; 0
    62a0:	4c 0f       	add	r20, r28
    62a2:	5d 1f       	adc	r21, r29
    62a4:	e4 0e       	add	r14, r20
    62a6:	f5 1e       	adc	r15, r21
    62a8:	26 01       	movw	r4, r12
    62aa:	4b 18       	sub	r4, r11
    62ac:	51 08       	sbc	r5, r1
    62ae:	89 2d       	mov	r24, r9
    62b0:	90 e0       	ldi	r25, 0x00	; 0
    62b2:	aa 24       	eor	r10, r10
    62b4:	bb 24       	eor	r11, r11
    62b6:	a8 1a       	sub	r10, r24
    62b8:	b9 0a       	sbc	r11, r25
    62ba:	5f ef       	ldi	r21, 0xFF	; 255
    62bc:	0f 3f       	cpi	r16, 0xFF	; 255
    62be:	15 07       	cpc	r17, r21
    62c0:	21 f4       	brne	.+8      	; 0x62ca <vfprintf+0x358>
    62c2:	8e e2       	ldi	r24, 0x2E	; 46
    62c4:	90 e0       	ldi	r25, 0x00	; 0
    62c6:	b3 01       	movw	r22, r6
    62c8:	a7 d4       	rcall	.+2382   	; 0x6c18 <fputc>
    62ca:	c0 16       	cp	r12, r16
    62cc:	d1 06       	cpc	r13, r17
    62ce:	34 f0       	brlt	.+12     	; 0x62dc <vfprintf+0x36a>
    62d0:	40 16       	cp	r4, r16
    62d2:	51 06       	cpc	r5, r17
    62d4:	1c f4       	brge	.+6      	; 0x62dc <vfprintf+0x36a>
    62d6:	f7 01       	movw	r30, r14
    62d8:	80 81       	ld	r24, Z
    62da:	01 c0       	rjmp	.+2      	; 0x62de <vfprintf+0x36c>
    62dc:	80 e3       	ldi	r24, 0x30	; 48
    62de:	01 50       	subi	r16, 0x01	; 1
    62e0:	10 40       	sbci	r17, 0x00	; 0
    62e2:	08 94       	sec
    62e4:	e1 1c       	adc	r14, r1
    62e6:	f1 1c       	adc	r15, r1
    62e8:	0a 15       	cp	r16, r10
    62ea:	1b 05       	cpc	r17, r11
    62ec:	24 f0       	brlt	.+8      	; 0x62f6 <vfprintf+0x384>
    62ee:	90 e0       	ldi	r25, 0x00	; 0
    62f0:	b3 01       	movw	r22, r6
    62f2:	92 d4       	rcall	.+2340   	; 0x6c18 <fputc>
    62f4:	e2 cf       	rjmp	.-60     	; 0x62ba <vfprintf+0x348>
    62f6:	0c 15       	cp	r16, r12
    62f8:	1d 05       	cpc	r17, r13
    62fa:	39 f4       	brne	.+14     	; 0x630a <vfprintf+0x398>
    62fc:	9a 81       	ldd	r25, Y+2	; 0x02
    62fe:	96 33       	cpi	r25, 0x36	; 54
    6300:	18 f4       	brcc	.+6      	; 0x6308 <vfprintf+0x396>
    6302:	95 33       	cpi	r25, 0x35	; 53
    6304:	11 f4       	brne	.+4      	; 0x630a <vfprintf+0x398>
    6306:	24 fe       	sbrs	r2, 4
    6308:	81 e3       	ldi	r24, 0x31	; 49
    630a:	90 e0       	ldi	r25, 0x00	; 0
    630c:	45 c0       	rjmp	.+138    	; 0x6398 <vfprintf+0x426>
    630e:	8a 81       	ldd	r24, Y+2	; 0x02
    6310:	81 33       	cpi	r24, 0x31	; 49
    6312:	09 f0       	breq	.+2      	; 0x6316 <vfprintf+0x3a4>
    6314:	0f 7e       	andi	r16, 0xEF	; 239
    6316:	90 e0       	ldi	r25, 0x00	; 0
    6318:	b3 01       	movw	r22, r6
    631a:	7e d4       	rcall	.+2300   	; 0x6c18 <fputc>
    631c:	99 20       	and	r9, r9
    631e:	91 f0       	breq	.+36     	; 0x6344 <vfprintf+0x3d2>
    6320:	8e e2       	ldi	r24, 0x2E	; 46
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	b3 01       	movw	r22, r6
    6326:	78 d4       	rcall	.+2288   	; 0x6c18 <fputc>
    6328:	12 e0       	ldi	r17, 0x02	; 2
    632a:	e1 e0       	ldi	r30, 0x01	; 1
    632c:	f0 e0       	ldi	r31, 0x00	; 0
    632e:	ec 0f       	add	r30, r28
    6330:	fd 1f       	adc	r31, r29
    6332:	e1 0f       	add	r30, r17
    6334:	f1 1d       	adc	r31, r1
    6336:	1f 5f       	subi	r17, 0xFF	; 255
    6338:	80 81       	ld	r24, Z
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	b3 01       	movw	r22, r6
    633e:	6c d4       	rcall	.+2264   	; 0x6c18 <fputc>
    6340:	9a 94       	dec	r9
    6342:	99 f7       	brne	.-26     	; 0x632a <vfprintf+0x3b8>
    6344:	44 fc       	sbrc	r4, 4
    6346:	03 c0       	rjmp	.+6      	; 0x634e <vfprintf+0x3dc>
    6348:	85 e6       	ldi	r24, 0x65	; 101
    634a:	90 e0       	ldi	r25, 0x00	; 0
    634c:	02 c0       	rjmp	.+4      	; 0x6352 <vfprintf+0x3e0>
    634e:	85 e4       	ldi	r24, 0x45	; 69
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	b3 01       	movw	r22, r6
    6354:	61 d4       	rcall	.+2242   	; 0x6c18 <fputc>
    6356:	d7 fc       	sbrc	r13, 7
    6358:	05 c0       	rjmp	.+10     	; 0x6364 <vfprintf+0x3f2>
    635a:	c1 14       	cp	r12, r1
    635c:	d1 04       	cpc	r13, r1
    635e:	41 f4       	brne	.+16     	; 0x6370 <vfprintf+0x3fe>
    6360:	04 ff       	sbrs	r16, 4
    6362:	06 c0       	rjmp	.+12     	; 0x6370 <vfprintf+0x3fe>
    6364:	d0 94       	com	r13
    6366:	c1 94       	neg	r12
    6368:	d1 08       	sbc	r13, r1
    636a:	d3 94       	inc	r13
    636c:	8d e2       	ldi	r24, 0x2D	; 45
    636e:	01 c0       	rjmp	.+2      	; 0x6372 <vfprintf+0x400>
    6370:	8b e2       	ldi	r24, 0x2B	; 43
    6372:	90 e0       	ldi	r25, 0x00	; 0
    6374:	b3 01       	movw	r22, r6
    6376:	50 d4       	rcall	.+2208   	; 0x6c18 <fputc>
    6378:	80 e3       	ldi	r24, 0x30	; 48
    637a:	05 c0       	rjmp	.+10     	; 0x6386 <vfprintf+0x414>
    637c:	8f 5f       	subi	r24, 0xFF	; 255
    637e:	26 ef       	ldi	r18, 0xF6	; 246
    6380:	3f ef       	ldi	r19, 0xFF	; 255
    6382:	c2 0e       	add	r12, r18
    6384:	d3 1e       	adc	r13, r19
    6386:	3a e0       	ldi	r19, 0x0A	; 10
    6388:	c3 16       	cp	r12, r19
    638a:	d1 04       	cpc	r13, r1
    638c:	bc f7       	brge	.-18     	; 0x637c <vfprintf+0x40a>
    638e:	90 e0       	ldi	r25, 0x00	; 0
    6390:	b3 01       	movw	r22, r6
    6392:	42 d4       	rcall	.+2180   	; 0x6c18 <fputc>
    6394:	c6 01       	movw	r24, r12
    6396:	c0 96       	adiw	r24, 0x30	; 48
    6398:	b3 01       	movw	r22, r6
    639a:	3e d4       	rcall	.+2172   	; 0x6c18 <fputc>
    639c:	cc 84       	ldd	r12, Y+12	; 0x0c
    639e:	dd 84       	ldd	r13, Y+13	; 0x0d
    63a0:	46 c1       	rjmp	.+652    	; 0x662e <vfprintf+0x6bc>
    63a2:	93 36       	cpi	r25, 0x63	; 99
    63a4:	31 f0       	breq	.+12     	; 0x63b2 <vfprintf+0x440>
    63a6:	93 37       	cpi	r25, 0x73	; 115
    63a8:	99 f0       	breq	.+38     	; 0x63d0 <vfprintf+0x45e>
    63aa:	93 35       	cpi	r25, 0x53	; 83
    63ac:	09 f0       	breq	.+2      	; 0x63b0 <vfprintf+0x43e>
    63ae:	55 c0       	rjmp	.+170    	; 0x645a <vfprintf+0x4e8>
    63b0:	22 c0       	rjmp	.+68     	; 0x63f6 <vfprintf+0x484>
    63b2:	f6 01       	movw	r30, r12
    63b4:	80 81       	ld	r24, Z
    63b6:	89 83       	std	Y+1, r24	; 0x01
    63b8:	5e 01       	movw	r10, r28
    63ba:	08 94       	sec
    63bc:	a1 1c       	adc	r10, r1
    63be:	b1 1c       	adc	r11, r1
    63c0:	22 e0       	ldi	r18, 0x02	; 2
    63c2:	30 e0       	ldi	r19, 0x00	; 0
    63c4:	c2 0e       	add	r12, r18
    63c6:	d3 1e       	adc	r13, r19
    63c8:	21 e0       	ldi	r18, 0x01	; 1
    63ca:	e2 2e       	mov	r14, r18
    63cc:	f1 2c       	mov	r15, r1
    63ce:	11 c0       	rjmp	.+34     	; 0x63f2 <vfprintf+0x480>
    63d0:	f6 01       	movw	r30, r12
    63d2:	a0 80       	ld	r10, Z
    63d4:	b1 80       	ldd	r11, Z+1	; 0x01
    63d6:	16 fd       	sbrc	r17, 6
    63d8:	03 c0       	rjmp	.+6      	; 0x63e0 <vfprintf+0x46e>
    63da:	6f ef       	ldi	r22, 0xFF	; 255
    63dc:	7f ef       	ldi	r23, 0xFF	; 255
    63de:	02 c0       	rjmp	.+4      	; 0x63e4 <vfprintf+0x472>
    63e0:	69 2d       	mov	r22, r9
    63e2:	70 e0       	ldi	r23, 0x00	; 0
    63e4:	22 e0       	ldi	r18, 0x02	; 2
    63e6:	30 e0       	ldi	r19, 0x00	; 0
    63e8:	c2 0e       	add	r12, r18
    63ea:	d3 1e       	adc	r13, r19
    63ec:	c5 01       	movw	r24, r10
    63ee:	09 d4       	rcall	.+2066   	; 0x6c02 <strnlen>
    63f0:	7c 01       	movw	r14, r24
    63f2:	1f 77       	andi	r17, 0x7F	; 127
    63f4:	12 c0       	rjmp	.+36     	; 0x641a <vfprintf+0x4a8>
    63f6:	f6 01       	movw	r30, r12
    63f8:	a0 80       	ld	r10, Z
    63fa:	b1 80       	ldd	r11, Z+1	; 0x01
    63fc:	16 fd       	sbrc	r17, 6
    63fe:	03 c0       	rjmp	.+6      	; 0x6406 <vfprintf+0x494>
    6400:	6f ef       	ldi	r22, 0xFF	; 255
    6402:	7f ef       	ldi	r23, 0xFF	; 255
    6404:	02 c0       	rjmp	.+4      	; 0x640a <vfprintf+0x498>
    6406:	69 2d       	mov	r22, r9
    6408:	70 e0       	ldi	r23, 0x00	; 0
    640a:	22 e0       	ldi	r18, 0x02	; 2
    640c:	30 e0       	ldi	r19, 0x00	; 0
    640e:	c2 0e       	add	r12, r18
    6410:	d3 1e       	adc	r13, r19
    6412:	c5 01       	movw	r24, r10
    6414:	eb d3       	rcall	.+2006   	; 0x6bec <strnlen_P>
    6416:	7c 01       	movw	r14, r24
    6418:	10 68       	ori	r17, 0x80	; 128
    641a:	13 ff       	sbrs	r17, 3
    641c:	06 c0       	rjmp	.+12     	; 0x642a <vfprintf+0x4b8>
    641e:	19 c0       	rjmp	.+50     	; 0x6452 <vfprintf+0x4e0>
    6420:	80 e2       	ldi	r24, 0x20	; 32
    6422:	90 e0       	ldi	r25, 0x00	; 0
    6424:	b3 01       	movw	r22, r6
    6426:	f8 d3       	rcall	.+2032   	; 0x6c18 <fputc>
    6428:	8a 94       	dec	r8
    642a:	88 2d       	mov	r24, r8
    642c:	90 e0       	ldi	r25, 0x00	; 0
    642e:	e8 16       	cp	r14, r24
    6430:	f9 06       	cpc	r15, r25
    6432:	b0 f3       	brcs	.-20     	; 0x6420 <vfprintf+0x4ae>
    6434:	0e c0       	rjmp	.+28     	; 0x6452 <vfprintf+0x4e0>
    6436:	f5 01       	movw	r30, r10
    6438:	17 fd       	sbrc	r17, 7
    643a:	85 91       	lpm	r24, Z+
    643c:	17 ff       	sbrs	r17, 7
    643e:	81 91       	ld	r24, Z+
    6440:	5f 01       	movw	r10, r30
    6442:	90 e0       	ldi	r25, 0x00	; 0
    6444:	b3 01       	movw	r22, r6
    6446:	e8 d3       	rcall	.+2000   	; 0x6c18 <fputc>
    6448:	81 10       	cpse	r8, r1
    644a:	8a 94       	dec	r8
    644c:	08 94       	sec
    644e:	e1 08       	sbc	r14, r1
    6450:	f1 08       	sbc	r15, r1
    6452:	e1 14       	cp	r14, r1
    6454:	f1 04       	cpc	r15, r1
    6456:	79 f7       	brne	.-34     	; 0x6436 <vfprintf+0x4c4>
    6458:	ea c0       	rjmp	.+468    	; 0x662e <vfprintf+0x6bc>
    645a:	94 36       	cpi	r25, 0x64	; 100
    645c:	11 f0       	breq	.+4      	; 0x6462 <vfprintf+0x4f0>
    645e:	99 36       	cpi	r25, 0x69	; 105
    6460:	81 f5       	brne	.+96     	; 0x64c2 <vfprintf+0x550>
    6462:	17 ff       	sbrs	r17, 7
    6464:	08 c0       	rjmp	.+16     	; 0x6476 <vfprintf+0x504>
    6466:	f6 01       	movw	r30, r12
    6468:	20 81       	ld	r18, Z
    646a:	31 81       	ldd	r19, Z+1	; 0x01
    646c:	42 81       	ldd	r20, Z+2	; 0x02
    646e:	53 81       	ldd	r21, Z+3	; 0x03
    6470:	84 e0       	ldi	r24, 0x04	; 4
    6472:	90 e0       	ldi	r25, 0x00	; 0
    6474:	0a c0       	rjmp	.+20     	; 0x648a <vfprintf+0x518>
    6476:	f6 01       	movw	r30, r12
    6478:	80 81       	ld	r24, Z
    647a:	91 81       	ldd	r25, Z+1	; 0x01
    647c:	9c 01       	movw	r18, r24
    647e:	44 27       	eor	r20, r20
    6480:	37 fd       	sbrc	r19, 7
    6482:	40 95       	com	r20
    6484:	54 2f       	mov	r21, r20
    6486:	82 e0       	ldi	r24, 0x02	; 2
    6488:	90 e0       	ldi	r25, 0x00	; 0
    648a:	c8 0e       	add	r12, r24
    648c:	d9 1e       	adc	r13, r25
    648e:	9f e6       	ldi	r25, 0x6F	; 111
    6490:	f9 2e       	mov	r15, r25
    6492:	f1 22       	and	r15, r17
    6494:	57 ff       	sbrs	r21, 7
    6496:	09 c0       	rjmp	.+18     	; 0x64aa <vfprintf+0x538>
    6498:	50 95       	com	r21
    649a:	40 95       	com	r20
    649c:	30 95       	com	r19
    649e:	21 95       	neg	r18
    64a0:	3f 4f       	sbci	r19, 0xFF	; 255
    64a2:	4f 4f       	sbci	r20, 0xFF	; 255
    64a4:	5f 4f       	sbci	r21, 0xFF	; 255
    64a6:	90 e8       	ldi	r25, 0x80	; 128
    64a8:	f9 2a       	or	r15, r25
    64aa:	ca 01       	movw	r24, r20
    64ac:	b9 01       	movw	r22, r18
    64ae:	ae 01       	movw	r20, r28
    64b0:	4f 5f       	subi	r20, 0xFF	; 255
    64b2:	5f 4f       	sbci	r21, 0xFF	; 255
    64b4:	2a e0       	ldi	r18, 0x0A	; 10
    64b6:	30 e0       	ldi	r19, 0x00	; 0
    64b8:	22 d4       	rcall	.+2116   	; 0x6cfe <__ultoa_invert>
    64ba:	e8 2e       	mov	r14, r24
    64bc:	e8 89       	ldd	r30, Y+16	; 0x10
    64be:	ee 1a       	sub	r14, r30
    64c0:	40 c0       	rjmp	.+128    	; 0x6542 <vfprintf+0x5d0>
    64c2:	95 37       	cpi	r25, 0x75	; 117
    64c4:	21 f4       	brne	.+8      	; 0x64ce <vfprintf+0x55c>
    64c6:	1f 7e       	andi	r17, 0xEF	; 239
    64c8:	2a e0       	ldi	r18, 0x0A	; 10
    64ca:	30 e0       	ldi	r19, 0x00	; 0
    64cc:	1c c0       	rjmp	.+56     	; 0x6506 <vfprintf+0x594>
    64ce:	19 7f       	andi	r17, 0xF9	; 249
    64d0:	9f 36       	cpi	r25, 0x6F	; 111
    64d2:	61 f0       	breq	.+24     	; 0x64ec <vfprintf+0x57a>
    64d4:	90 37       	cpi	r25, 0x70	; 112
    64d6:	20 f4       	brcc	.+8      	; 0x64e0 <vfprintf+0x56e>
    64d8:	98 35       	cpi	r25, 0x58	; 88
    64da:	09 f0       	breq	.+2      	; 0x64de <vfprintf+0x56c>
    64dc:	ab c0       	rjmp	.+342    	; 0x6634 <vfprintf+0x6c2>
    64de:	0f c0       	rjmp	.+30     	; 0x64fe <vfprintf+0x58c>
    64e0:	90 37       	cpi	r25, 0x70	; 112
    64e2:	39 f0       	breq	.+14     	; 0x64f2 <vfprintf+0x580>
    64e4:	98 37       	cpi	r25, 0x78	; 120
    64e6:	09 f0       	breq	.+2      	; 0x64ea <vfprintf+0x578>
    64e8:	a5 c0       	rjmp	.+330    	; 0x6634 <vfprintf+0x6c2>
    64ea:	04 c0       	rjmp	.+8      	; 0x64f4 <vfprintf+0x582>
    64ec:	28 e0       	ldi	r18, 0x08	; 8
    64ee:	30 e0       	ldi	r19, 0x00	; 0
    64f0:	0a c0       	rjmp	.+20     	; 0x6506 <vfprintf+0x594>
    64f2:	10 61       	ori	r17, 0x10	; 16
    64f4:	14 fd       	sbrc	r17, 4
    64f6:	14 60       	ori	r17, 0x04	; 4
    64f8:	20 e1       	ldi	r18, 0x10	; 16
    64fa:	30 e0       	ldi	r19, 0x00	; 0
    64fc:	04 c0       	rjmp	.+8      	; 0x6506 <vfprintf+0x594>
    64fe:	14 fd       	sbrc	r17, 4
    6500:	16 60       	ori	r17, 0x06	; 6
    6502:	20 e1       	ldi	r18, 0x10	; 16
    6504:	32 e0       	ldi	r19, 0x02	; 2
    6506:	17 ff       	sbrs	r17, 7
    6508:	08 c0       	rjmp	.+16     	; 0x651a <vfprintf+0x5a8>
    650a:	f6 01       	movw	r30, r12
    650c:	60 81       	ld	r22, Z
    650e:	71 81       	ldd	r23, Z+1	; 0x01
    6510:	82 81       	ldd	r24, Z+2	; 0x02
    6512:	93 81       	ldd	r25, Z+3	; 0x03
    6514:	44 e0       	ldi	r20, 0x04	; 4
    6516:	50 e0       	ldi	r21, 0x00	; 0
    6518:	08 c0       	rjmp	.+16     	; 0x652a <vfprintf+0x5b8>
    651a:	f6 01       	movw	r30, r12
    651c:	80 81       	ld	r24, Z
    651e:	91 81       	ldd	r25, Z+1	; 0x01
    6520:	bc 01       	movw	r22, r24
    6522:	80 e0       	ldi	r24, 0x00	; 0
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	42 e0       	ldi	r20, 0x02	; 2
    6528:	50 e0       	ldi	r21, 0x00	; 0
    652a:	c4 0e       	add	r12, r20
    652c:	d5 1e       	adc	r13, r21
    652e:	ae 01       	movw	r20, r28
    6530:	4f 5f       	subi	r20, 0xFF	; 255
    6532:	5f 4f       	sbci	r21, 0xFF	; 255
    6534:	e4 d3       	rcall	.+1992   	; 0x6cfe <__ultoa_invert>
    6536:	e8 2e       	mov	r14, r24
    6538:	58 89       	ldd	r21, Y+16	; 0x10
    653a:	e5 1a       	sub	r14, r21
    653c:	8f e7       	ldi	r24, 0x7F	; 127
    653e:	f8 2e       	mov	r15, r24
    6540:	f1 22       	and	r15, r17
    6542:	f6 fe       	sbrs	r15, 6
    6544:	0b c0       	rjmp	.+22     	; 0x655c <vfprintf+0x5ea>
    6546:	8e ef       	ldi	r24, 0xFE	; 254
    6548:	f8 22       	and	r15, r24
    654a:	e9 14       	cp	r14, r9
    654c:	38 f4       	brcc	.+14     	; 0x655c <vfprintf+0x5ea>
    654e:	f4 fe       	sbrs	r15, 4
    6550:	07 c0       	rjmp	.+14     	; 0x6560 <vfprintf+0x5ee>
    6552:	f2 fc       	sbrc	r15, 2
    6554:	05 c0       	rjmp	.+10     	; 0x6560 <vfprintf+0x5ee>
    6556:	9f ee       	ldi	r25, 0xEF	; 239
    6558:	f9 22       	and	r15, r25
    655a:	02 c0       	rjmp	.+4      	; 0x6560 <vfprintf+0x5ee>
    655c:	1e 2d       	mov	r17, r14
    655e:	01 c0       	rjmp	.+2      	; 0x6562 <vfprintf+0x5f0>
    6560:	19 2d       	mov	r17, r9
    6562:	f4 fe       	sbrs	r15, 4
    6564:	0d c0       	rjmp	.+26     	; 0x6580 <vfprintf+0x60e>
    6566:	fe 01       	movw	r30, r28
    6568:	ee 0d       	add	r30, r14
    656a:	f1 1d       	adc	r31, r1
    656c:	80 81       	ld	r24, Z
    656e:	80 33       	cpi	r24, 0x30	; 48
    6570:	19 f4       	brne	.+6      	; 0x6578 <vfprintf+0x606>
    6572:	e9 ee       	ldi	r30, 0xE9	; 233
    6574:	fe 22       	and	r15, r30
    6576:	08 c0       	rjmp	.+16     	; 0x6588 <vfprintf+0x616>
    6578:	1f 5f       	subi	r17, 0xFF	; 255
    657a:	f2 fe       	sbrs	r15, 2
    657c:	05 c0       	rjmp	.+10     	; 0x6588 <vfprintf+0x616>
    657e:	03 c0       	rjmp	.+6      	; 0x6586 <vfprintf+0x614>
    6580:	8f 2d       	mov	r24, r15
    6582:	86 78       	andi	r24, 0x86	; 134
    6584:	09 f0       	breq	.+2      	; 0x6588 <vfprintf+0x616>
    6586:	1f 5f       	subi	r17, 0xFF	; 255
    6588:	0f 2d       	mov	r16, r15
    658a:	f3 fc       	sbrc	r15, 3
    658c:	13 c0       	rjmp	.+38     	; 0x65b4 <vfprintf+0x642>
    658e:	f0 fe       	sbrs	r15, 0
    6590:	0e c0       	rjmp	.+28     	; 0x65ae <vfprintf+0x63c>
    6592:	18 15       	cp	r17, r8
    6594:	10 f0       	brcs	.+4      	; 0x659a <vfprintf+0x628>
    6596:	9e 2c       	mov	r9, r14
    6598:	0a c0       	rjmp	.+20     	; 0x65ae <vfprintf+0x63c>
    659a:	9e 2c       	mov	r9, r14
    659c:	98 0c       	add	r9, r8
    659e:	91 1a       	sub	r9, r17
    65a0:	18 2d       	mov	r17, r8
    65a2:	05 c0       	rjmp	.+10     	; 0x65ae <vfprintf+0x63c>
    65a4:	80 e2       	ldi	r24, 0x20	; 32
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	b3 01       	movw	r22, r6
    65aa:	36 d3       	rcall	.+1644   	; 0x6c18 <fputc>
    65ac:	1f 5f       	subi	r17, 0xFF	; 255
    65ae:	18 15       	cp	r17, r8
    65b0:	c8 f3       	brcs	.-14     	; 0x65a4 <vfprintf+0x632>
    65b2:	04 c0       	rjmp	.+8      	; 0x65bc <vfprintf+0x64a>
    65b4:	18 15       	cp	r17, r8
    65b6:	10 f4       	brcc	.+4      	; 0x65bc <vfprintf+0x64a>
    65b8:	81 1a       	sub	r8, r17
    65ba:	01 c0       	rjmp	.+2      	; 0x65be <vfprintf+0x64c>
    65bc:	88 24       	eor	r8, r8
    65be:	04 ff       	sbrs	r16, 4
    65c0:	0e c0       	rjmp	.+28     	; 0x65de <vfprintf+0x66c>
    65c2:	80 e3       	ldi	r24, 0x30	; 48
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	b3 01       	movw	r22, r6
    65c8:	27 d3       	rcall	.+1614   	; 0x6c18 <fputc>
    65ca:	02 ff       	sbrs	r16, 2
    65cc:	1b c0       	rjmp	.+54     	; 0x6604 <vfprintf+0x692>
    65ce:	01 fd       	sbrc	r16, 1
    65d0:	03 c0       	rjmp	.+6      	; 0x65d8 <vfprintf+0x666>
    65d2:	88 e7       	ldi	r24, 0x78	; 120
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	0e c0       	rjmp	.+28     	; 0x65f4 <vfprintf+0x682>
    65d8:	88 e5       	ldi	r24, 0x58	; 88
    65da:	90 e0       	ldi	r25, 0x00	; 0
    65dc:	0b c0       	rjmp	.+22     	; 0x65f4 <vfprintf+0x682>
    65de:	80 2f       	mov	r24, r16
    65e0:	86 78       	andi	r24, 0x86	; 134
    65e2:	81 f0       	breq	.+32     	; 0x6604 <vfprintf+0x692>
    65e4:	01 ff       	sbrs	r16, 1
    65e6:	02 c0       	rjmp	.+4      	; 0x65ec <vfprintf+0x67a>
    65e8:	8b e2       	ldi	r24, 0x2B	; 43
    65ea:	01 c0       	rjmp	.+2      	; 0x65ee <vfprintf+0x67c>
    65ec:	80 e2       	ldi	r24, 0x20	; 32
    65ee:	f7 fc       	sbrc	r15, 7
    65f0:	8d e2       	ldi	r24, 0x2D	; 45
    65f2:	90 e0       	ldi	r25, 0x00	; 0
    65f4:	b3 01       	movw	r22, r6
    65f6:	10 d3       	rcall	.+1568   	; 0x6c18 <fputc>
    65f8:	05 c0       	rjmp	.+10     	; 0x6604 <vfprintf+0x692>
    65fa:	80 e3       	ldi	r24, 0x30	; 48
    65fc:	90 e0       	ldi	r25, 0x00	; 0
    65fe:	b3 01       	movw	r22, r6
    6600:	0b d3       	rcall	.+1558   	; 0x6c18 <fputc>
    6602:	9a 94       	dec	r9
    6604:	e9 14       	cp	r14, r9
    6606:	c8 f3       	brcs	.-14     	; 0x65fa <vfprintf+0x688>
    6608:	ea 94       	dec	r14
    660a:	e1 e0       	ldi	r30, 0x01	; 1
    660c:	f0 e0       	ldi	r31, 0x00	; 0
    660e:	ec 0f       	add	r30, r28
    6610:	fd 1f       	adc	r31, r29
    6612:	ee 0d       	add	r30, r14
    6614:	f1 1d       	adc	r31, r1
    6616:	80 81       	ld	r24, Z
    6618:	90 e0       	ldi	r25, 0x00	; 0
    661a:	b3 01       	movw	r22, r6
    661c:	fd d2       	rcall	.+1530   	; 0x6c18 <fputc>
    661e:	ee 20       	and	r14, r14
    6620:	99 f7       	brne	.-26     	; 0x6608 <vfprintf+0x696>
    6622:	05 c0       	rjmp	.+10     	; 0x662e <vfprintf+0x6bc>
    6624:	80 e2       	ldi	r24, 0x20	; 32
    6626:	90 e0       	ldi	r25, 0x00	; 0
    6628:	b3 01       	movw	r22, r6
    662a:	f6 d2       	rcall	.+1516   	; 0x6c18 <fputc>
    662c:	8a 94       	dec	r8
    662e:	88 20       	and	r8, r8
    6630:	c9 f7       	brne	.-14     	; 0x6624 <vfprintf+0x6b2>
    6632:	b6 cc       	rjmp	.-1684   	; 0x5fa0 <vfprintf+0x2e>
    6634:	f3 01       	movw	r30, r6
    6636:	66 81       	ldd	r22, Z+6	; 0x06
    6638:	77 81       	ldd	r23, Z+7	; 0x07
    663a:	cb 01       	movw	r24, r22
    663c:	61 96       	adiw	r28, 0x11	; 17
    663e:	e2 e1       	ldi	r30, 0x12	; 18
    6640:	70 c0       	rjmp	.+224    	; 0x6722 <__epilogue_restores__>

00006642 <__mulsi3>:
    6642:	62 9f       	mul	r22, r18
    6644:	d0 01       	movw	r26, r0
    6646:	73 9f       	mul	r23, r19
    6648:	f0 01       	movw	r30, r0
    664a:	82 9f       	mul	r24, r18
    664c:	e0 0d       	add	r30, r0
    664e:	f1 1d       	adc	r31, r1
    6650:	64 9f       	mul	r22, r20
    6652:	e0 0d       	add	r30, r0
    6654:	f1 1d       	adc	r31, r1
    6656:	92 9f       	mul	r25, r18
    6658:	f0 0d       	add	r31, r0
    665a:	83 9f       	mul	r24, r19
    665c:	f0 0d       	add	r31, r0
    665e:	74 9f       	mul	r23, r20
    6660:	f0 0d       	add	r31, r0
    6662:	65 9f       	mul	r22, r21
    6664:	f0 0d       	add	r31, r0
    6666:	99 27       	eor	r25, r25
    6668:	72 9f       	mul	r23, r18
    666a:	b0 0d       	add	r27, r0
    666c:	e1 1d       	adc	r30, r1
    666e:	f9 1f       	adc	r31, r25
    6670:	63 9f       	mul	r22, r19
    6672:	b0 0d       	add	r27, r0
    6674:	e1 1d       	adc	r30, r1
    6676:	f9 1f       	adc	r31, r25
    6678:	bd 01       	movw	r22, r26
    667a:	cf 01       	movw	r24, r30
    667c:	11 24       	eor	r1, r1
    667e:	08 95       	ret

00006680 <__divmodhi4>:
    6680:	97 fb       	bst	r25, 7
    6682:	09 2e       	mov	r0, r25
    6684:	07 26       	eor	r0, r23
    6686:	0a d0       	rcall	.+20     	; 0x669c <__divmodhi4_neg1>
    6688:	77 fd       	sbrc	r23, 7
    668a:	04 d0       	rcall	.+8      	; 0x6694 <__divmodhi4_neg2>
    668c:	65 d0       	rcall	.+202    	; 0x6758 <__udivmodhi4>
    668e:	06 d0       	rcall	.+12     	; 0x669c <__divmodhi4_neg1>
    6690:	00 20       	and	r0, r0
    6692:	1a f4       	brpl	.+6      	; 0x669a <__divmodhi4_exit>

00006694 <__divmodhi4_neg2>:
    6694:	70 95       	com	r23
    6696:	61 95       	neg	r22
    6698:	7f 4f       	sbci	r23, 0xFF	; 255

0000669a <__divmodhi4_exit>:
    669a:	08 95       	ret

0000669c <__divmodhi4_neg1>:
    669c:	f6 f7       	brtc	.-4      	; 0x669a <__divmodhi4_exit>
    669e:	90 95       	com	r25
    66a0:	81 95       	neg	r24
    66a2:	9f 4f       	sbci	r25, 0xFF	; 255
    66a4:	08 95       	ret

000066a6 <__udivmodsi4>:
    66a6:	a1 e2       	ldi	r26, 0x21	; 33
    66a8:	1a 2e       	mov	r1, r26
    66aa:	aa 1b       	sub	r26, r26
    66ac:	bb 1b       	sub	r27, r27
    66ae:	fd 01       	movw	r30, r26
    66b0:	0d c0       	rjmp	.+26     	; 0x66cc <__udivmodsi4_ep>

000066b2 <__udivmodsi4_loop>:
    66b2:	aa 1f       	adc	r26, r26
    66b4:	bb 1f       	adc	r27, r27
    66b6:	ee 1f       	adc	r30, r30
    66b8:	ff 1f       	adc	r31, r31
    66ba:	a2 17       	cp	r26, r18
    66bc:	b3 07       	cpc	r27, r19
    66be:	e4 07       	cpc	r30, r20
    66c0:	f5 07       	cpc	r31, r21
    66c2:	20 f0       	brcs	.+8      	; 0x66cc <__udivmodsi4_ep>
    66c4:	a2 1b       	sub	r26, r18
    66c6:	b3 0b       	sbc	r27, r19
    66c8:	e4 0b       	sbc	r30, r20
    66ca:	f5 0b       	sbc	r31, r21

000066cc <__udivmodsi4_ep>:
    66cc:	66 1f       	adc	r22, r22
    66ce:	77 1f       	adc	r23, r23
    66d0:	88 1f       	adc	r24, r24
    66d2:	99 1f       	adc	r25, r25
    66d4:	1a 94       	dec	r1
    66d6:	69 f7       	brne	.-38     	; 0x66b2 <__udivmodsi4_loop>
    66d8:	60 95       	com	r22
    66da:	70 95       	com	r23
    66dc:	80 95       	com	r24
    66de:	90 95       	com	r25
    66e0:	9b 01       	movw	r18, r22
    66e2:	ac 01       	movw	r20, r24
    66e4:	bd 01       	movw	r22, r26
    66e6:	cf 01       	movw	r24, r30
    66e8:	08 95       	ret

000066ea <__prologue_saves__>:
    66ea:	2f 92       	push	r2
    66ec:	3f 92       	push	r3
    66ee:	4f 92       	push	r4
    66f0:	5f 92       	push	r5
    66f2:	6f 92       	push	r6
    66f4:	7f 92       	push	r7
    66f6:	8f 92       	push	r8
    66f8:	9f 92       	push	r9
    66fa:	af 92       	push	r10
    66fc:	bf 92       	push	r11
    66fe:	cf 92       	push	r12
    6700:	df 92       	push	r13
    6702:	ef 92       	push	r14
    6704:	ff 92       	push	r15
    6706:	0f 93       	push	r16
    6708:	1f 93       	push	r17
    670a:	cf 93       	push	r28
    670c:	df 93       	push	r29
    670e:	cd b7       	in	r28, 0x3d	; 61
    6710:	de b7       	in	r29, 0x3e	; 62
    6712:	ca 1b       	sub	r28, r26
    6714:	db 0b       	sbc	r29, r27
    6716:	0f b6       	in	r0, 0x3f	; 63
    6718:	f8 94       	cli
    671a:	de bf       	out	0x3e, r29	; 62
    671c:	0f be       	out	0x3f, r0	; 63
    671e:	cd bf       	out	0x3d, r28	; 61
    6720:	09 94       	ijmp

00006722 <__epilogue_restores__>:
    6722:	2a 88       	ldd	r2, Y+18	; 0x12
    6724:	39 88       	ldd	r3, Y+17	; 0x11
    6726:	48 88       	ldd	r4, Y+16	; 0x10
    6728:	5f 84       	ldd	r5, Y+15	; 0x0f
    672a:	6e 84       	ldd	r6, Y+14	; 0x0e
    672c:	7d 84       	ldd	r7, Y+13	; 0x0d
    672e:	8c 84       	ldd	r8, Y+12	; 0x0c
    6730:	9b 84       	ldd	r9, Y+11	; 0x0b
    6732:	aa 84       	ldd	r10, Y+10	; 0x0a
    6734:	b9 84       	ldd	r11, Y+9	; 0x09
    6736:	c8 84       	ldd	r12, Y+8	; 0x08
    6738:	df 80       	ldd	r13, Y+7	; 0x07
    673a:	ee 80       	ldd	r14, Y+6	; 0x06
    673c:	fd 80       	ldd	r15, Y+5	; 0x05
    673e:	0c 81       	ldd	r16, Y+4	; 0x04
    6740:	1b 81       	ldd	r17, Y+3	; 0x03
    6742:	aa 81       	ldd	r26, Y+2	; 0x02
    6744:	b9 81       	ldd	r27, Y+1	; 0x01
    6746:	ce 0f       	add	r28, r30
    6748:	d1 1d       	adc	r29, r1
    674a:	0f b6       	in	r0, 0x3f	; 63
    674c:	f8 94       	cli
    674e:	de bf       	out	0x3e, r29	; 62
    6750:	0f be       	out	0x3f, r0	; 63
    6752:	cd bf       	out	0x3d, r28	; 61
    6754:	ed 01       	movw	r28, r26
    6756:	08 95       	ret

00006758 <__udivmodhi4>:
    6758:	aa 1b       	sub	r26, r26
    675a:	bb 1b       	sub	r27, r27
    675c:	51 e1       	ldi	r21, 0x11	; 17
    675e:	07 c0       	rjmp	.+14     	; 0x676e <__udivmodhi4_ep>

00006760 <__udivmodhi4_loop>:
    6760:	aa 1f       	adc	r26, r26
    6762:	bb 1f       	adc	r27, r27
    6764:	a6 17       	cp	r26, r22
    6766:	b7 07       	cpc	r27, r23
    6768:	10 f0       	brcs	.+4      	; 0x676e <__udivmodhi4_ep>
    676a:	a6 1b       	sub	r26, r22
    676c:	b7 0b       	sbc	r27, r23

0000676e <__udivmodhi4_ep>:
    676e:	88 1f       	adc	r24, r24
    6770:	99 1f       	adc	r25, r25
    6772:	5a 95       	dec	r21
    6774:	a9 f7       	brne	.-22     	; 0x6760 <__udivmodhi4_loop>
    6776:	80 95       	com	r24
    6778:	90 95       	com	r25
    677a:	bc 01       	movw	r22, r24
    677c:	cd 01       	movw	r24, r26
    677e:	08 95       	ret

00006780 <malloc>:
    6780:	cf 93       	push	r28
    6782:	df 93       	push	r29
    6784:	bc 01       	movw	r22, r24
    6786:	82 30       	cpi	r24, 0x02	; 2
    6788:	91 05       	cpc	r25, r1
    678a:	10 f4       	brcc	.+4      	; 0x6790 <malloc+0x10>
    678c:	62 e0       	ldi	r22, 0x02	; 2
    678e:	70 e0       	ldi	r23, 0x00	; 0
    6790:	a0 91 b6 07 	lds	r26, 0x07B6
    6794:	b0 91 b7 07 	lds	r27, 0x07B7
    6798:	ed 01       	movw	r28, r26
    679a:	e0 e0       	ldi	r30, 0x00	; 0
    679c:	f0 e0       	ldi	r31, 0x00	; 0
    679e:	40 e0       	ldi	r20, 0x00	; 0
    67a0:	50 e0       	ldi	r21, 0x00	; 0
    67a2:	21 c0       	rjmp	.+66     	; 0x67e6 <malloc+0x66>
    67a4:	88 81       	ld	r24, Y
    67a6:	99 81       	ldd	r25, Y+1	; 0x01
    67a8:	86 17       	cp	r24, r22
    67aa:	97 07       	cpc	r25, r23
    67ac:	69 f4       	brne	.+26     	; 0x67c8 <malloc+0x48>
    67ae:	8a 81       	ldd	r24, Y+2	; 0x02
    67b0:	9b 81       	ldd	r25, Y+3	; 0x03
    67b2:	30 97       	sbiw	r30, 0x00	; 0
    67b4:	19 f0       	breq	.+6      	; 0x67bc <malloc+0x3c>
    67b6:	93 83       	std	Z+3, r25	; 0x03
    67b8:	82 83       	std	Z+2, r24	; 0x02
    67ba:	04 c0       	rjmp	.+8      	; 0x67c4 <malloc+0x44>
    67bc:	90 93 b7 07 	sts	0x07B7, r25
    67c0:	80 93 b6 07 	sts	0x07B6, r24
    67c4:	fe 01       	movw	r30, r28
    67c6:	34 c0       	rjmp	.+104    	; 0x6830 <malloc+0xb0>
    67c8:	68 17       	cp	r22, r24
    67ca:	79 07       	cpc	r23, r25
    67cc:	38 f4       	brcc	.+14     	; 0x67dc <malloc+0x5c>
    67ce:	41 15       	cp	r20, r1
    67d0:	51 05       	cpc	r21, r1
    67d2:	19 f0       	breq	.+6      	; 0x67da <malloc+0x5a>
    67d4:	84 17       	cp	r24, r20
    67d6:	95 07       	cpc	r25, r21
    67d8:	08 f4       	brcc	.+2      	; 0x67dc <malloc+0x5c>
    67da:	ac 01       	movw	r20, r24
    67dc:	fe 01       	movw	r30, r28
    67de:	8a 81       	ldd	r24, Y+2	; 0x02
    67e0:	9b 81       	ldd	r25, Y+3	; 0x03
    67e2:	9c 01       	movw	r18, r24
    67e4:	e9 01       	movw	r28, r18
    67e6:	20 97       	sbiw	r28, 0x00	; 0
    67e8:	e9 f6       	brne	.-70     	; 0x67a4 <malloc+0x24>
    67ea:	41 15       	cp	r20, r1
    67ec:	51 05       	cpc	r21, r1
    67ee:	a9 f1       	breq	.+106    	; 0x685a <malloc+0xda>
    67f0:	ca 01       	movw	r24, r20
    67f2:	86 1b       	sub	r24, r22
    67f4:	97 0b       	sbc	r25, r23
    67f6:	04 97       	sbiw	r24, 0x04	; 4
    67f8:	08 f4       	brcc	.+2      	; 0x67fc <malloc+0x7c>
    67fa:	ba 01       	movw	r22, r20
    67fc:	e0 e0       	ldi	r30, 0x00	; 0
    67fe:	f0 e0       	ldi	r31, 0x00	; 0
    6800:	2a c0       	rjmp	.+84     	; 0x6856 <malloc+0xd6>
    6802:	8d 91       	ld	r24, X+
    6804:	9c 91       	ld	r25, X
    6806:	11 97       	sbiw	r26, 0x01	; 1
    6808:	84 17       	cp	r24, r20
    680a:	95 07       	cpc	r25, r21
    680c:	f9 f4       	brne	.+62     	; 0x684c <malloc+0xcc>
    680e:	64 17       	cp	r22, r20
    6810:	75 07       	cpc	r23, r21
    6812:	81 f4       	brne	.+32     	; 0x6834 <malloc+0xb4>
    6814:	12 96       	adiw	r26, 0x02	; 2
    6816:	8d 91       	ld	r24, X+
    6818:	9c 91       	ld	r25, X
    681a:	13 97       	sbiw	r26, 0x03	; 3
    681c:	30 97       	sbiw	r30, 0x00	; 0
    681e:	19 f0       	breq	.+6      	; 0x6826 <malloc+0xa6>
    6820:	93 83       	std	Z+3, r25	; 0x03
    6822:	82 83       	std	Z+2, r24	; 0x02
    6824:	04 c0       	rjmp	.+8      	; 0x682e <malloc+0xae>
    6826:	90 93 b7 07 	sts	0x07B7, r25
    682a:	80 93 b6 07 	sts	0x07B6, r24
    682e:	fd 01       	movw	r30, r26
    6830:	32 96       	adiw	r30, 0x02	; 2
    6832:	4f c0       	rjmp	.+158    	; 0x68d2 <malloc+0x152>
    6834:	ca 01       	movw	r24, r20
    6836:	86 1b       	sub	r24, r22
    6838:	97 0b       	sbc	r25, r23
    683a:	fd 01       	movw	r30, r26
    683c:	e8 0f       	add	r30, r24
    683e:	f9 1f       	adc	r31, r25
    6840:	61 93       	st	Z+, r22
    6842:	71 93       	st	Z+, r23
    6844:	02 97       	sbiw	r24, 0x02	; 2
    6846:	8d 93       	st	X+, r24
    6848:	9c 93       	st	X, r25
    684a:	43 c0       	rjmp	.+134    	; 0x68d2 <malloc+0x152>
    684c:	fd 01       	movw	r30, r26
    684e:	82 81       	ldd	r24, Z+2	; 0x02
    6850:	93 81       	ldd	r25, Z+3	; 0x03
    6852:	9c 01       	movw	r18, r24
    6854:	d9 01       	movw	r26, r18
    6856:	10 97       	sbiw	r26, 0x00	; 0
    6858:	a1 f6       	brne	.-88     	; 0x6802 <malloc+0x82>
    685a:	80 91 b4 07 	lds	r24, 0x07B4
    685e:	90 91 b5 07 	lds	r25, 0x07B5
    6862:	89 2b       	or	r24, r25
    6864:	41 f4       	brne	.+16     	; 0x6876 <malloc+0xf6>
    6866:	80 91 f7 03 	lds	r24, 0x03F7
    686a:	90 91 f8 03 	lds	r25, 0x03F8
    686e:	90 93 b5 07 	sts	0x07B5, r25
    6872:	80 93 b4 07 	sts	0x07B4, r24
    6876:	40 91 f9 03 	lds	r20, 0x03F9
    687a:	50 91 fa 03 	lds	r21, 0x03FA
    687e:	41 15       	cp	r20, r1
    6880:	51 05       	cpc	r21, r1
    6882:	41 f4       	brne	.+16     	; 0x6894 <malloc+0x114>
    6884:	4d b7       	in	r20, 0x3d	; 61
    6886:	5e b7       	in	r21, 0x3e	; 62
    6888:	80 91 f5 03 	lds	r24, 0x03F5
    688c:	90 91 f6 03 	lds	r25, 0x03F6
    6890:	48 1b       	sub	r20, r24
    6892:	59 0b       	sbc	r21, r25
    6894:	20 91 b4 07 	lds	r18, 0x07B4
    6898:	30 91 b5 07 	lds	r19, 0x07B5
    689c:	24 17       	cp	r18, r20
    689e:	35 07       	cpc	r19, r21
    68a0:	b0 f4       	brcc	.+44     	; 0x68ce <malloc+0x14e>
    68a2:	ca 01       	movw	r24, r20
    68a4:	82 1b       	sub	r24, r18
    68a6:	93 0b       	sbc	r25, r19
    68a8:	86 17       	cp	r24, r22
    68aa:	97 07       	cpc	r25, r23
    68ac:	80 f0       	brcs	.+32     	; 0x68ce <malloc+0x14e>
    68ae:	ab 01       	movw	r20, r22
    68b0:	4e 5f       	subi	r20, 0xFE	; 254
    68b2:	5f 4f       	sbci	r21, 0xFF	; 255
    68b4:	84 17       	cp	r24, r20
    68b6:	95 07       	cpc	r25, r21
    68b8:	50 f0       	brcs	.+20     	; 0x68ce <malloc+0x14e>
    68ba:	42 0f       	add	r20, r18
    68bc:	53 1f       	adc	r21, r19
    68be:	50 93 b5 07 	sts	0x07B5, r21
    68c2:	40 93 b4 07 	sts	0x07B4, r20
    68c6:	f9 01       	movw	r30, r18
    68c8:	61 93       	st	Z+, r22
    68ca:	71 93       	st	Z+, r23
    68cc:	02 c0       	rjmp	.+4      	; 0x68d2 <malloc+0x152>
    68ce:	e0 e0       	ldi	r30, 0x00	; 0
    68d0:	f0 e0       	ldi	r31, 0x00	; 0
    68d2:	cf 01       	movw	r24, r30
    68d4:	df 91       	pop	r29
    68d6:	cf 91       	pop	r28
    68d8:	08 95       	ret

000068da <free>:
    68da:	cf 93       	push	r28
    68dc:	df 93       	push	r29
    68de:	00 97       	sbiw	r24, 0x00	; 0
    68e0:	09 f4       	brne	.+2      	; 0x68e4 <free+0xa>
    68e2:	50 c0       	rjmp	.+160    	; 0x6984 <free+0xaa>
    68e4:	ec 01       	movw	r28, r24
    68e6:	22 97       	sbiw	r28, 0x02	; 2
    68e8:	1b 82       	std	Y+3, r1	; 0x03
    68ea:	1a 82       	std	Y+2, r1	; 0x02
    68ec:	a0 91 b6 07 	lds	r26, 0x07B6
    68f0:	b0 91 b7 07 	lds	r27, 0x07B7
    68f4:	10 97       	sbiw	r26, 0x00	; 0
    68f6:	09 f1       	breq	.+66     	; 0x693a <free+0x60>
    68f8:	40 e0       	ldi	r20, 0x00	; 0
    68fa:	50 e0       	ldi	r21, 0x00	; 0
    68fc:	ac 17       	cp	r26, r28
    68fe:	bd 07       	cpc	r27, r29
    6900:	08 f1       	brcs	.+66     	; 0x6944 <free+0x6a>
    6902:	bb 83       	std	Y+3, r27	; 0x03
    6904:	aa 83       	std	Y+2, r26	; 0x02
    6906:	fe 01       	movw	r30, r28
    6908:	21 91       	ld	r18, Z+
    690a:	31 91       	ld	r19, Z+
    690c:	e2 0f       	add	r30, r18
    690e:	f3 1f       	adc	r31, r19
    6910:	ae 17       	cp	r26, r30
    6912:	bf 07       	cpc	r27, r31
    6914:	79 f4       	brne	.+30     	; 0x6934 <free+0x5a>
    6916:	8d 91       	ld	r24, X+
    6918:	9c 91       	ld	r25, X
    691a:	11 97       	sbiw	r26, 0x01	; 1
    691c:	28 0f       	add	r18, r24
    691e:	39 1f       	adc	r19, r25
    6920:	2e 5f       	subi	r18, 0xFE	; 254
    6922:	3f 4f       	sbci	r19, 0xFF	; 255
    6924:	39 83       	std	Y+1, r19	; 0x01
    6926:	28 83       	st	Y, r18
    6928:	12 96       	adiw	r26, 0x02	; 2
    692a:	8d 91       	ld	r24, X+
    692c:	9c 91       	ld	r25, X
    692e:	13 97       	sbiw	r26, 0x03	; 3
    6930:	9b 83       	std	Y+3, r25	; 0x03
    6932:	8a 83       	std	Y+2, r24	; 0x02
    6934:	41 15       	cp	r20, r1
    6936:	51 05       	cpc	r21, r1
    6938:	71 f4       	brne	.+28     	; 0x6956 <free+0x7c>
    693a:	d0 93 b7 07 	sts	0x07B7, r29
    693e:	c0 93 b6 07 	sts	0x07B6, r28
    6942:	20 c0       	rjmp	.+64     	; 0x6984 <free+0xaa>
    6944:	12 96       	adiw	r26, 0x02	; 2
    6946:	8d 91       	ld	r24, X+
    6948:	9c 91       	ld	r25, X
    694a:	13 97       	sbiw	r26, 0x03	; 3
    694c:	ad 01       	movw	r20, r26
    694e:	00 97       	sbiw	r24, 0x00	; 0
    6950:	11 f0       	breq	.+4      	; 0x6956 <free+0x7c>
    6952:	dc 01       	movw	r26, r24
    6954:	d3 cf       	rjmp	.-90     	; 0x68fc <free+0x22>
    6956:	fa 01       	movw	r30, r20
    6958:	d3 83       	std	Z+3, r29	; 0x03
    695a:	c2 83       	std	Z+2, r28	; 0x02
    695c:	21 91       	ld	r18, Z+
    695e:	31 91       	ld	r19, Z+
    6960:	e2 0f       	add	r30, r18
    6962:	f3 1f       	adc	r31, r19
    6964:	ce 17       	cp	r28, r30
    6966:	df 07       	cpc	r29, r31
    6968:	69 f4       	brne	.+26     	; 0x6984 <free+0xaa>
    696a:	88 81       	ld	r24, Y
    696c:	99 81       	ldd	r25, Y+1	; 0x01
    696e:	28 0f       	add	r18, r24
    6970:	39 1f       	adc	r19, r25
    6972:	2e 5f       	subi	r18, 0xFE	; 254
    6974:	3f 4f       	sbci	r19, 0xFF	; 255
    6976:	fa 01       	movw	r30, r20
    6978:	31 83       	std	Z+1, r19	; 0x01
    697a:	20 83       	st	Z, r18
    697c:	8a 81       	ldd	r24, Y+2	; 0x02
    697e:	9b 81       	ldd	r25, Y+3	; 0x03
    6980:	93 83       	std	Z+3, r25	; 0x03
    6982:	82 83       	std	Z+2, r24	; 0x02
    6984:	df 91       	pop	r29
    6986:	cf 91       	pop	r28
    6988:	08 95       	ret

0000698a <do_rand>:
    698a:	a0 e0       	ldi	r26, 0x00	; 0
    698c:	b0 e0       	ldi	r27, 0x00	; 0
    698e:	ea ec       	ldi	r30, 0xCA	; 202
    6990:	f4 e3       	ldi	r31, 0x34	; 52
    6992:	b3 ce       	rjmp	.-666    	; 0x66fa <__prologue_saves__+0x10>
    6994:	ec 01       	movw	r28, r24
    6996:	a8 80       	ld	r10, Y
    6998:	b9 80       	ldd	r11, Y+1	; 0x01
    699a:	ca 80       	ldd	r12, Y+2	; 0x02
    699c:	db 80       	ldd	r13, Y+3	; 0x03
    699e:	a1 14       	cp	r10, r1
    69a0:	b1 04       	cpc	r11, r1
    69a2:	c1 04       	cpc	r12, r1
    69a4:	d1 04       	cpc	r13, r1
    69a6:	41 f4       	brne	.+16     	; 0x69b8 <do_rand+0x2e>
    69a8:	84 e2       	ldi	r24, 0x24	; 36
    69aa:	a8 2e       	mov	r10, r24
    69ac:	89 ed       	ldi	r24, 0xD9	; 217
    69ae:	b8 2e       	mov	r11, r24
    69b0:	8b e5       	ldi	r24, 0x5B	; 91
    69b2:	c8 2e       	mov	r12, r24
    69b4:	87 e0       	ldi	r24, 0x07	; 7
    69b6:	d8 2e       	mov	r13, r24
    69b8:	c6 01       	movw	r24, r12
    69ba:	b5 01       	movw	r22, r10
    69bc:	2d e1       	ldi	r18, 0x1D	; 29
    69be:	33 ef       	ldi	r19, 0xF3	; 243
    69c0:	41 e0       	ldi	r20, 0x01	; 1
    69c2:	50 e0       	ldi	r21, 0x00	; 0
    69c4:	fa d1       	rcall	.+1012   	; 0x6dba <__divmodsi4>
    69c6:	27 ea       	ldi	r18, 0xA7	; 167
    69c8:	31 e4       	ldi	r19, 0x41	; 65
    69ca:	40 e0       	ldi	r20, 0x00	; 0
    69cc:	50 e0       	ldi	r21, 0x00	; 0
    69ce:	39 de       	rcall	.-910    	; 0x6642 <__mulsi3>
    69d0:	7b 01       	movw	r14, r22
    69d2:	8c 01       	movw	r16, r24
    69d4:	c6 01       	movw	r24, r12
    69d6:	b5 01       	movw	r22, r10
    69d8:	2d e1       	ldi	r18, 0x1D	; 29
    69da:	33 ef       	ldi	r19, 0xF3	; 243
    69dc:	41 e0       	ldi	r20, 0x01	; 1
    69de:	50 e0       	ldi	r21, 0x00	; 0
    69e0:	ec d1       	rcall	.+984    	; 0x6dba <__divmodsi4>
    69e2:	ca 01       	movw	r24, r20
    69e4:	b9 01       	movw	r22, r18
    69e6:	2c ee       	ldi	r18, 0xEC	; 236
    69e8:	34 ef       	ldi	r19, 0xF4	; 244
    69ea:	4f ef       	ldi	r20, 0xFF	; 255
    69ec:	5f ef       	ldi	r21, 0xFF	; 255
    69ee:	29 de       	rcall	.-942    	; 0x6642 <__mulsi3>
    69f0:	6e 0d       	add	r22, r14
    69f2:	7f 1d       	adc	r23, r15
    69f4:	80 1f       	adc	r24, r16
    69f6:	91 1f       	adc	r25, r17
    69f8:	97 ff       	sbrs	r25, 7
    69fa:	04 c0       	rjmp	.+8      	; 0x6a04 <do_rand+0x7a>
    69fc:	61 50       	subi	r22, 0x01	; 1
    69fe:	70 40       	sbci	r23, 0x00	; 0
    6a00:	80 40       	sbci	r24, 0x00	; 0
    6a02:	90 48       	sbci	r25, 0x80	; 128
    6a04:	68 83       	st	Y, r22
    6a06:	79 83       	std	Y+1, r23	; 0x01
    6a08:	8a 83       	std	Y+2, r24	; 0x02
    6a0a:	9b 83       	std	Y+3, r25	; 0x03
    6a0c:	9b 01       	movw	r18, r22
    6a0e:	3f 77       	andi	r19, 0x7F	; 127
    6a10:	c9 01       	movw	r24, r18
    6a12:	cd b7       	in	r28, 0x3d	; 61
    6a14:	de b7       	in	r29, 0x3e	; 62
    6a16:	ea e0       	ldi	r30, 0x0A	; 10
    6a18:	8c ce       	rjmp	.-744    	; 0x6732 <__epilogue_restores__+0x10>

00006a1a <rand_r>:
    6a1a:	b7 df       	rcall	.-146    	; 0x698a <do_rand>
    6a1c:	08 95       	ret

00006a1e <rand>:
    6a1e:	8b ef       	ldi	r24, 0xFB	; 251
    6a20:	93 e0       	ldi	r25, 0x03	; 3
    6a22:	b3 df       	rcall	.-154    	; 0x698a <do_rand>
    6a24:	08 95       	ret

00006a26 <srand>:
    6a26:	a0 e0       	ldi	r26, 0x00	; 0
    6a28:	b0 e0       	ldi	r27, 0x00	; 0
    6a2a:	80 93 fb 03 	sts	0x03FB, r24
    6a2e:	90 93 fc 03 	sts	0x03FC, r25
    6a32:	a0 93 fd 03 	sts	0x03FD, r26
    6a36:	b0 93 fe 03 	sts	0x03FE, r27
    6a3a:	08 95       	ret

00006a3c <__ftoa_engine>:
    6a3c:	28 30       	cpi	r18, 0x08	; 8
    6a3e:	08 f0       	brcs	.+2      	; 0x6a42 <__ftoa_engine+0x6>
    6a40:	27 e0       	ldi	r18, 0x07	; 7
    6a42:	33 27       	eor	r19, r19
    6a44:	da 01       	movw	r26, r20
    6a46:	99 0f       	add	r25, r25
    6a48:	31 1d       	adc	r19, r1
    6a4a:	87 fd       	sbrc	r24, 7
    6a4c:	91 60       	ori	r25, 0x01	; 1
    6a4e:	00 96       	adiw	r24, 0x00	; 0
    6a50:	61 05       	cpc	r22, r1
    6a52:	71 05       	cpc	r23, r1
    6a54:	39 f4       	brne	.+14     	; 0x6a64 <__ftoa_engine+0x28>
    6a56:	32 60       	ori	r19, 0x02	; 2
    6a58:	2e 5f       	subi	r18, 0xFE	; 254
    6a5a:	3d 93       	st	X+, r19
    6a5c:	30 e3       	ldi	r19, 0x30	; 48
    6a5e:	2a 95       	dec	r18
    6a60:	e1 f7       	brne	.-8      	; 0x6a5a <__ftoa_engine+0x1e>
    6a62:	08 95       	ret
    6a64:	9f 3f       	cpi	r25, 0xFF	; 255
    6a66:	30 f0       	brcs	.+12     	; 0x6a74 <__ftoa_engine+0x38>
    6a68:	80 38       	cpi	r24, 0x80	; 128
    6a6a:	71 05       	cpc	r23, r1
    6a6c:	61 05       	cpc	r22, r1
    6a6e:	09 f0       	breq	.+2      	; 0x6a72 <__ftoa_engine+0x36>
    6a70:	3c 5f       	subi	r19, 0xFC	; 252
    6a72:	3c 5f       	subi	r19, 0xFC	; 252
    6a74:	3d 93       	st	X+, r19
    6a76:	91 30       	cpi	r25, 0x01	; 1
    6a78:	08 f0       	brcs	.+2      	; 0x6a7c <__ftoa_engine+0x40>
    6a7a:	80 68       	ori	r24, 0x80	; 128
    6a7c:	91 1d       	adc	r25, r1
    6a7e:	df 93       	push	r29
    6a80:	cf 93       	push	r28
    6a82:	1f 93       	push	r17
    6a84:	0f 93       	push	r16
    6a86:	ff 92       	push	r15
    6a88:	ef 92       	push	r14
    6a8a:	19 2f       	mov	r17, r25
    6a8c:	98 7f       	andi	r25, 0xF8	; 248
    6a8e:	96 95       	lsr	r25
    6a90:	e9 2f       	mov	r30, r25
    6a92:	96 95       	lsr	r25
    6a94:	96 95       	lsr	r25
    6a96:	e9 0f       	add	r30, r25
    6a98:	ff 27       	eor	r31, r31
    6a9a:	ef 53       	subi	r30, 0x3F	; 63
    6a9c:	fa 4f       	sbci	r31, 0xFA	; 250
    6a9e:	99 27       	eor	r25, r25
    6aa0:	33 27       	eor	r19, r19
    6aa2:	ee 24       	eor	r14, r14
    6aa4:	ff 24       	eor	r15, r15
    6aa6:	a7 01       	movw	r20, r14
    6aa8:	e7 01       	movw	r28, r14
    6aaa:	05 90       	lpm	r0, Z+
    6aac:	08 94       	sec
    6aae:	07 94       	ror	r0
    6ab0:	28 f4       	brcc	.+10     	; 0x6abc <__ftoa_engine+0x80>
    6ab2:	36 0f       	add	r19, r22
    6ab4:	e7 1e       	adc	r14, r23
    6ab6:	f8 1e       	adc	r15, r24
    6ab8:	49 1f       	adc	r20, r25
    6aba:	51 1d       	adc	r21, r1
    6abc:	66 0f       	add	r22, r22
    6abe:	77 1f       	adc	r23, r23
    6ac0:	88 1f       	adc	r24, r24
    6ac2:	99 1f       	adc	r25, r25
    6ac4:	06 94       	lsr	r0
    6ac6:	a1 f7       	brne	.-24     	; 0x6ab0 <__ftoa_engine+0x74>
    6ac8:	05 90       	lpm	r0, Z+
    6aca:	07 94       	ror	r0
    6acc:	28 f4       	brcc	.+10     	; 0x6ad8 <__ftoa_engine+0x9c>
    6ace:	e7 0e       	add	r14, r23
    6ad0:	f8 1e       	adc	r15, r24
    6ad2:	49 1f       	adc	r20, r25
    6ad4:	56 1f       	adc	r21, r22
    6ad6:	c1 1d       	adc	r28, r1
    6ad8:	77 0f       	add	r23, r23
    6ada:	88 1f       	adc	r24, r24
    6adc:	99 1f       	adc	r25, r25
    6ade:	66 1f       	adc	r22, r22
    6ae0:	06 94       	lsr	r0
    6ae2:	a1 f7       	brne	.-24     	; 0x6acc <__ftoa_engine+0x90>
    6ae4:	05 90       	lpm	r0, Z+
    6ae6:	07 94       	ror	r0
    6ae8:	28 f4       	brcc	.+10     	; 0x6af4 <__ftoa_engine+0xb8>
    6aea:	f8 0e       	add	r15, r24
    6aec:	49 1f       	adc	r20, r25
    6aee:	56 1f       	adc	r21, r22
    6af0:	c7 1f       	adc	r28, r23
    6af2:	d1 1d       	adc	r29, r1
    6af4:	88 0f       	add	r24, r24
    6af6:	99 1f       	adc	r25, r25
    6af8:	66 1f       	adc	r22, r22
    6afa:	77 1f       	adc	r23, r23
    6afc:	06 94       	lsr	r0
    6afe:	a1 f7       	brne	.-24     	; 0x6ae8 <__ftoa_engine+0xac>
    6b00:	05 90       	lpm	r0, Z+
    6b02:	07 94       	ror	r0
    6b04:	20 f4       	brcc	.+8      	; 0x6b0e <__ftoa_engine+0xd2>
    6b06:	49 0f       	add	r20, r25
    6b08:	56 1f       	adc	r21, r22
    6b0a:	c7 1f       	adc	r28, r23
    6b0c:	d8 1f       	adc	r29, r24
    6b0e:	99 0f       	add	r25, r25
    6b10:	66 1f       	adc	r22, r22
    6b12:	77 1f       	adc	r23, r23
    6b14:	88 1f       	adc	r24, r24
    6b16:	06 94       	lsr	r0
    6b18:	a9 f7       	brne	.-22     	; 0x6b04 <__ftoa_engine+0xc8>
    6b1a:	84 91       	lpm	r24, Z+
    6b1c:	10 95       	com	r17
    6b1e:	17 70       	andi	r17, 0x07	; 7
    6b20:	41 f0       	breq	.+16     	; 0x6b32 <__ftoa_engine+0xf6>
    6b22:	d6 95       	lsr	r29
    6b24:	c7 95       	ror	r28
    6b26:	57 95       	ror	r21
    6b28:	47 95       	ror	r20
    6b2a:	f7 94       	ror	r15
    6b2c:	e7 94       	ror	r14
    6b2e:	1a 95       	dec	r17
    6b30:	c1 f7       	brne	.-16     	; 0x6b22 <__ftoa_engine+0xe6>
    6b32:	e7 e6       	ldi	r30, 0x67	; 103
    6b34:	f5 e0       	ldi	r31, 0x05	; 5
    6b36:	68 94       	set
    6b38:	15 90       	lpm	r1, Z+
    6b3a:	15 91       	lpm	r17, Z+
    6b3c:	35 91       	lpm	r19, Z+
    6b3e:	65 91       	lpm	r22, Z+
    6b40:	95 91       	lpm	r25, Z+
    6b42:	05 90       	lpm	r0, Z+
    6b44:	7f e2       	ldi	r23, 0x2F	; 47
    6b46:	73 95       	inc	r23
    6b48:	e1 18       	sub	r14, r1
    6b4a:	f1 0a       	sbc	r15, r17
    6b4c:	43 0b       	sbc	r20, r19
    6b4e:	56 0b       	sbc	r21, r22
    6b50:	c9 0b       	sbc	r28, r25
    6b52:	d0 09       	sbc	r29, r0
    6b54:	c0 f7       	brcc	.-16     	; 0x6b46 <__ftoa_engine+0x10a>
    6b56:	e1 0c       	add	r14, r1
    6b58:	f1 1e       	adc	r15, r17
    6b5a:	43 1f       	adc	r20, r19
    6b5c:	56 1f       	adc	r21, r22
    6b5e:	c9 1f       	adc	r28, r25
    6b60:	d0 1d       	adc	r29, r0
    6b62:	7e f4       	brtc	.+30     	; 0x6b82 <__ftoa_engine+0x146>
    6b64:	70 33       	cpi	r23, 0x30	; 48
    6b66:	11 f4       	brne	.+4      	; 0x6b6c <__ftoa_engine+0x130>
    6b68:	8a 95       	dec	r24
    6b6a:	e6 cf       	rjmp	.-52     	; 0x6b38 <__ftoa_engine+0xfc>
    6b6c:	e8 94       	clt
    6b6e:	01 50       	subi	r16, 0x01	; 1
    6b70:	30 f0       	brcs	.+12     	; 0x6b7e <__ftoa_engine+0x142>
    6b72:	08 0f       	add	r16, r24
    6b74:	0a f4       	brpl	.+2      	; 0x6b78 <__ftoa_engine+0x13c>
    6b76:	00 27       	eor	r16, r16
    6b78:	02 17       	cp	r16, r18
    6b7a:	08 f4       	brcc	.+2      	; 0x6b7e <__ftoa_engine+0x142>
    6b7c:	20 2f       	mov	r18, r16
    6b7e:	23 95       	inc	r18
    6b80:	02 2f       	mov	r16, r18
    6b82:	7a 33       	cpi	r23, 0x3A	; 58
    6b84:	28 f0       	brcs	.+10     	; 0x6b90 <__ftoa_engine+0x154>
    6b86:	79 e3       	ldi	r23, 0x39	; 57
    6b88:	7d 93       	st	X+, r23
    6b8a:	2a 95       	dec	r18
    6b8c:	e9 f7       	brne	.-6      	; 0x6b88 <__ftoa_engine+0x14c>
    6b8e:	10 c0       	rjmp	.+32     	; 0x6bb0 <__ftoa_engine+0x174>
    6b90:	7d 93       	st	X+, r23
    6b92:	2a 95       	dec	r18
    6b94:	89 f6       	brne	.-94     	; 0x6b38 <__ftoa_engine+0xfc>
    6b96:	06 94       	lsr	r0
    6b98:	97 95       	ror	r25
    6b9a:	67 95       	ror	r22
    6b9c:	37 95       	ror	r19
    6b9e:	17 95       	ror	r17
    6ba0:	17 94       	ror	r1
    6ba2:	e1 18       	sub	r14, r1
    6ba4:	f1 0a       	sbc	r15, r17
    6ba6:	43 0b       	sbc	r20, r19
    6ba8:	56 0b       	sbc	r21, r22
    6baa:	c9 0b       	sbc	r28, r25
    6bac:	d0 09       	sbc	r29, r0
    6bae:	98 f0       	brcs	.+38     	; 0x6bd6 <__ftoa_engine+0x19a>
    6bb0:	23 95       	inc	r18
    6bb2:	7e 91       	ld	r23, -X
    6bb4:	73 95       	inc	r23
    6bb6:	7a 33       	cpi	r23, 0x3A	; 58
    6bb8:	08 f0       	brcs	.+2      	; 0x6bbc <__ftoa_engine+0x180>
    6bba:	70 e3       	ldi	r23, 0x30	; 48
    6bbc:	7c 93       	st	X, r23
    6bbe:	20 13       	cpse	r18, r16
    6bc0:	b8 f7       	brcc	.-18     	; 0x6bb0 <__ftoa_engine+0x174>
    6bc2:	7e 91       	ld	r23, -X
    6bc4:	70 61       	ori	r23, 0x10	; 16
    6bc6:	7d 93       	st	X+, r23
    6bc8:	30 f0       	brcs	.+12     	; 0x6bd6 <__ftoa_engine+0x19a>
    6bca:	83 95       	inc	r24
    6bcc:	71 e3       	ldi	r23, 0x31	; 49
    6bce:	7d 93       	st	X+, r23
    6bd0:	70 e3       	ldi	r23, 0x30	; 48
    6bd2:	2a 95       	dec	r18
    6bd4:	e1 f7       	brne	.-8      	; 0x6bce <__ftoa_engine+0x192>
    6bd6:	11 24       	eor	r1, r1
    6bd8:	ef 90       	pop	r14
    6bda:	ff 90       	pop	r15
    6bdc:	0f 91       	pop	r16
    6bde:	1f 91       	pop	r17
    6be0:	cf 91       	pop	r28
    6be2:	df 91       	pop	r29
    6be4:	99 27       	eor	r25, r25
    6be6:	87 fd       	sbrc	r24, 7
    6be8:	90 95       	com	r25
    6bea:	08 95       	ret

00006bec <strnlen_P>:
    6bec:	fc 01       	movw	r30, r24
    6bee:	05 90       	lpm	r0, Z+
    6bf0:	61 50       	subi	r22, 0x01	; 1
    6bf2:	70 40       	sbci	r23, 0x00	; 0
    6bf4:	01 10       	cpse	r0, r1
    6bf6:	d8 f7       	brcc	.-10     	; 0x6bee <strnlen_P+0x2>
    6bf8:	80 95       	com	r24
    6bfa:	90 95       	com	r25
    6bfc:	8e 0f       	add	r24, r30
    6bfe:	9f 1f       	adc	r25, r31
    6c00:	08 95       	ret

00006c02 <strnlen>:
    6c02:	fc 01       	movw	r30, r24
    6c04:	61 50       	subi	r22, 0x01	; 1
    6c06:	70 40       	sbci	r23, 0x00	; 0
    6c08:	01 90       	ld	r0, Z+
    6c0a:	01 10       	cpse	r0, r1
    6c0c:	d8 f7       	brcc	.-10     	; 0x6c04 <strnlen+0x2>
    6c0e:	80 95       	com	r24
    6c10:	90 95       	com	r25
    6c12:	8e 0f       	add	r24, r30
    6c14:	9f 1f       	adc	r25, r31
    6c16:	08 95       	ret

00006c18 <fputc>:
    6c18:	0f 93       	push	r16
    6c1a:	1f 93       	push	r17
    6c1c:	cf 93       	push	r28
    6c1e:	df 93       	push	r29
    6c20:	8c 01       	movw	r16, r24
    6c22:	eb 01       	movw	r28, r22
    6c24:	8b 81       	ldd	r24, Y+3	; 0x03
    6c26:	81 ff       	sbrs	r24, 1
    6c28:	1b c0       	rjmp	.+54     	; 0x6c60 <fputc+0x48>
    6c2a:	82 ff       	sbrs	r24, 2
    6c2c:	0d c0       	rjmp	.+26     	; 0x6c48 <fputc+0x30>
    6c2e:	2e 81       	ldd	r18, Y+6	; 0x06
    6c30:	3f 81       	ldd	r19, Y+7	; 0x07
    6c32:	8c 81       	ldd	r24, Y+4	; 0x04
    6c34:	9d 81       	ldd	r25, Y+5	; 0x05
    6c36:	28 17       	cp	r18, r24
    6c38:	39 07       	cpc	r19, r25
    6c3a:	64 f4       	brge	.+24     	; 0x6c54 <fputc+0x3c>
    6c3c:	e8 81       	ld	r30, Y
    6c3e:	f9 81       	ldd	r31, Y+1	; 0x01
    6c40:	01 93       	st	Z+, r16
    6c42:	f9 83       	std	Y+1, r31	; 0x01
    6c44:	e8 83       	st	Y, r30
    6c46:	06 c0       	rjmp	.+12     	; 0x6c54 <fputc+0x3c>
    6c48:	e8 85       	ldd	r30, Y+8	; 0x08
    6c4a:	f9 85       	ldd	r31, Y+9	; 0x09
    6c4c:	80 2f       	mov	r24, r16
    6c4e:	09 95       	icall
    6c50:	89 2b       	or	r24, r25
    6c52:	31 f4       	brne	.+12     	; 0x6c60 <fputc+0x48>
    6c54:	8e 81       	ldd	r24, Y+6	; 0x06
    6c56:	9f 81       	ldd	r25, Y+7	; 0x07
    6c58:	01 96       	adiw	r24, 0x01	; 1
    6c5a:	9f 83       	std	Y+7, r25	; 0x07
    6c5c:	8e 83       	std	Y+6, r24	; 0x06
    6c5e:	02 c0       	rjmp	.+4      	; 0x6c64 <fputc+0x4c>
    6c60:	0f ef       	ldi	r16, 0xFF	; 255
    6c62:	1f ef       	ldi	r17, 0xFF	; 255
    6c64:	c8 01       	movw	r24, r16
    6c66:	df 91       	pop	r29
    6c68:	cf 91       	pop	r28
    6c6a:	1f 91       	pop	r17
    6c6c:	0f 91       	pop	r16
    6c6e:	08 95       	ret

00006c70 <printf>:
    6c70:	a0 e0       	ldi	r26, 0x00	; 0
    6c72:	b0 e0       	ldi	r27, 0x00	; 0
    6c74:	ed e3       	ldi	r30, 0x3D	; 61
    6c76:	f6 e3       	ldi	r31, 0x36	; 54
    6c78:	48 cd       	rjmp	.-1392   	; 0x670a <__prologue_saves__+0x20>
    6c7a:	fe 01       	movw	r30, r28
    6c7c:	35 96       	adiw	r30, 0x05	; 5
    6c7e:	61 91       	ld	r22, Z+
    6c80:	71 91       	ld	r23, Z+
    6c82:	80 91 ba 07 	lds	r24, 0x07BA
    6c86:	90 91 bb 07 	lds	r25, 0x07BB
    6c8a:	af 01       	movw	r20, r30
    6c8c:	72 d9       	rcall	.-3356   	; 0x5f72 <vfprintf>
    6c8e:	20 96       	adiw	r28, 0x00	; 0
    6c90:	e2 e0       	ldi	r30, 0x02	; 2
    6c92:	57 cd       	rjmp	.-1362   	; 0x6742 <__epilogue_restores__+0x20>

00006c94 <puts>:
    6c94:	0f 93       	push	r16
    6c96:	1f 93       	push	r17
    6c98:	cf 93       	push	r28
    6c9a:	df 93       	push	r29
    6c9c:	8c 01       	movw	r16, r24
    6c9e:	e0 91 ba 07 	lds	r30, 0x07BA
    6ca2:	f0 91 bb 07 	lds	r31, 0x07BB
    6ca6:	83 81       	ldd	r24, Z+3	; 0x03
    6ca8:	81 ff       	sbrs	r24, 1
    6caa:	21 c0       	rjmp	.+66     	; 0x6cee <puts+0x5a>
    6cac:	c0 e0       	ldi	r28, 0x00	; 0
    6cae:	d0 e0       	ldi	r29, 0x00	; 0
    6cb0:	0d c0       	rjmp	.+26     	; 0x6ccc <puts+0x38>
    6cb2:	e0 91 ba 07 	lds	r30, 0x07BA
    6cb6:	f0 91 bb 07 	lds	r31, 0x07BB
    6cba:	20 85       	ldd	r18, Z+8	; 0x08
    6cbc:	31 85       	ldd	r19, Z+9	; 0x09
    6cbe:	bf 01       	movw	r22, r30
    6cc0:	f9 01       	movw	r30, r18
    6cc2:	09 95       	icall
    6cc4:	89 2b       	or	r24, r25
    6cc6:	11 f0       	breq	.+4      	; 0x6ccc <puts+0x38>
    6cc8:	cf ef       	ldi	r28, 0xFF	; 255
    6cca:	df ef       	ldi	r29, 0xFF	; 255
    6ccc:	f8 01       	movw	r30, r16
    6cce:	81 91       	ld	r24, Z+
    6cd0:	8f 01       	movw	r16, r30
    6cd2:	88 23       	and	r24, r24
    6cd4:	71 f7       	brne	.-36     	; 0x6cb2 <puts+0x1e>
    6cd6:	e0 91 ba 07 	lds	r30, 0x07BA
    6cda:	f0 91 bb 07 	lds	r31, 0x07BB
    6cde:	20 85       	ldd	r18, Z+8	; 0x08
    6ce0:	31 85       	ldd	r19, Z+9	; 0x09
    6ce2:	8a e0       	ldi	r24, 0x0A	; 10
    6ce4:	bf 01       	movw	r22, r30
    6ce6:	f9 01       	movw	r30, r18
    6ce8:	09 95       	icall
    6cea:	89 2b       	or	r24, r25
    6cec:	11 f0       	breq	.+4      	; 0x6cf2 <puts+0x5e>
    6cee:	cf ef       	ldi	r28, 0xFF	; 255
    6cf0:	df ef       	ldi	r29, 0xFF	; 255
    6cf2:	ce 01       	movw	r24, r28
    6cf4:	df 91       	pop	r29
    6cf6:	cf 91       	pop	r28
    6cf8:	1f 91       	pop	r17
    6cfa:	0f 91       	pop	r16
    6cfc:	08 95       	ret

00006cfe <__ultoa_invert>:
    6cfe:	fa 01       	movw	r30, r20
    6d00:	aa 27       	eor	r26, r26
    6d02:	28 30       	cpi	r18, 0x08	; 8
    6d04:	51 f1       	breq	.+84     	; 0x6d5a <__ultoa_invert+0x5c>
    6d06:	20 31       	cpi	r18, 0x10	; 16
    6d08:	81 f1       	breq	.+96     	; 0x6d6a <__ultoa_invert+0x6c>
    6d0a:	e8 94       	clt
    6d0c:	6f 93       	push	r22
    6d0e:	6e 7f       	andi	r22, 0xFE	; 254
    6d10:	6e 5f       	subi	r22, 0xFE	; 254
    6d12:	7f 4f       	sbci	r23, 0xFF	; 255
    6d14:	8f 4f       	sbci	r24, 0xFF	; 255
    6d16:	9f 4f       	sbci	r25, 0xFF	; 255
    6d18:	af 4f       	sbci	r26, 0xFF	; 255
    6d1a:	b1 e0       	ldi	r27, 0x01	; 1
    6d1c:	3e d0       	rcall	.+124    	; 0x6d9a <__ultoa_invert+0x9c>
    6d1e:	b4 e0       	ldi	r27, 0x04	; 4
    6d20:	3c d0       	rcall	.+120    	; 0x6d9a <__ultoa_invert+0x9c>
    6d22:	67 0f       	add	r22, r23
    6d24:	78 1f       	adc	r23, r24
    6d26:	89 1f       	adc	r24, r25
    6d28:	9a 1f       	adc	r25, r26
    6d2a:	a1 1d       	adc	r26, r1
    6d2c:	68 0f       	add	r22, r24
    6d2e:	79 1f       	adc	r23, r25
    6d30:	8a 1f       	adc	r24, r26
    6d32:	91 1d       	adc	r25, r1
    6d34:	a1 1d       	adc	r26, r1
    6d36:	6a 0f       	add	r22, r26
    6d38:	71 1d       	adc	r23, r1
    6d3a:	81 1d       	adc	r24, r1
    6d3c:	91 1d       	adc	r25, r1
    6d3e:	a1 1d       	adc	r26, r1
    6d40:	20 d0       	rcall	.+64     	; 0x6d82 <__ultoa_invert+0x84>
    6d42:	09 f4       	brne	.+2      	; 0x6d46 <__ultoa_invert+0x48>
    6d44:	68 94       	set
    6d46:	3f 91       	pop	r19
    6d48:	2a e0       	ldi	r18, 0x0A	; 10
    6d4a:	26 9f       	mul	r18, r22
    6d4c:	11 24       	eor	r1, r1
    6d4e:	30 19       	sub	r19, r0
    6d50:	30 5d       	subi	r19, 0xD0	; 208
    6d52:	31 93       	st	Z+, r19
    6d54:	de f6       	brtc	.-74     	; 0x6d0c <__ultoa_invert+0xe>
    6d56:	cf 01       	movw	r24, r30
    6d58:	08 95       	ret
    6d5a:	46 2f       	mov	r20, r22
    6d5c:	47 70       	andi	r20, 0x07	; 7
    6d5e:	40 5d       	subi	r20, 0xD0	; 208
    6d60:	41 93       	st	Z+, r20
    6d62:	b3 e0       	ldi	r27, 0x03	; 3
    6d64:	0f d0       	rcall	.+30     	; 0x6d84 <__ultoa_invert+0x86>
    6d66:	c9 f7       	brne	.-14     	; 0x6d5a <__ultoa_invert+0x5c>
    6d68:	f6 cf       	rjmp	.-20     	; 0x6d56 <__ultoa_invert+0x58>
    6d6a:	46 2f       	mov	r20, r22
    6d6c:	4f 70       	andi	r20, 0x0F	; 15
    6d6e:	40 5d       	subi	r20, 0xD0	; 208
    6d70:	4a 33       	cpi	r20, 0x3A	; 58
    6d72:	18 f0       	brcs	.+6      	; 0x6d7a <__ultoa_invert+0x7c>
    6d74:	49 5d       	subi	r20, 0xD9	; 217
    6d76:	31 fd       	sbrc	r19, 1
    6d78:	40 52       	subi	r20, 0x20	; 32
    6d7a:	41 93       	st	Z+, r20
    6d7c:	02 d0       	rcall	.+4      	; 0x6d82 <__ultoa_invert+0x84>
    6d7e:	a9 f7       	brne	.-22     	; 0x6d6a <__ultoa_invert+0x6c>
    6d80:	ea cf       	rjmp	.-44     	; 0x6d56 <__ultoa_invert+0x58>
    6d82:	b4 e0       	ldi	r27, 0x04	; 4
    6d84:	a6 95       	lsr	r26
    6d86:	97 95       	ror	r25
    6d88:	87 95       	ror	r24
    6d8a:	77 95       	ror	r23
    6d8c:	67 95       	ror	r22
    6d8e:	ba 95       	dec	r27
    6d90:	c9 f7       	brne	.-14     	; 0x6d84 <__ultoa_invert+0x86>
    6d92:	00 97       	sbiw	r24, 0x00	; 0
    6d94:	61 05       	cpc	r22, r1
    6d96:	71 05       	cpc	r23, r1
    6d98:	08 95       	ret
    6d9a:	9b 01       	movw	r18, r22
    6d9c:	ac 01       	movw	r20, r24
    6d9e:	0a 2e       	mov	r0, r26
    6da0:	06 94       	lsr	r0
    6da2:	57 95       	ror	r21
    6da4:	47 95       	ror	r20
    6da6:	37 95       	ror	r19
    6da8:	27 95       	ror	r18
    6daa:	ba 95       	dec	r27
    6dac:	c9 f7       	brne	.-14     	; 0x6da0 <__ultoa_invert+0xa2>
    6dae:	62 0f       	add	r22, r18
    6db0:	73 1f       	adc	r23, r19
    6db2:	84 1f       	adc	r24, r20
    6db4:	95 1f       	adc	r25, r21
    6db6:	a0 1d       	adc	r26, r0
    6db8:	08 95       	ret

00006dba <__divmodsi4>:
    6dba:	97 fb       	bst	r25, 7
    6dbc:	09 2e       	mov	r0, r25
    6dbe:	05 26       	eor	r0, r21
    6dc0:	0e d0       	rcall	.+28     	; 0x6dde <__divmodsi4_neg1>
    6dc2:	57 fd       	sbrc	r21, 7
    6dc4:	04 d0       	rcall	.+8      	; 0x6dce <__divmodsi4_neg2>
    6dc6:	6f dc       	rcall	.-1826   	; 0x66a6 <__udivmodsi4>
    6dc8:	0a d0       	rcall	.+20     	; 0x6dde <__divmodsi4_neg1>
    6dca:	00 1c       	adc	r0, r0
    6dcc:	38 f4       	brcc	.+14     	; 0x6ddc <__divmodsi4_exit>

00006dce <__divmodsi4_neg2>:
    6dce:	50 95       	com	r21
    6dd0:	40 95       	com	r20
    6dd2:	30 95       	com	r19
    6dd4:	21 95       	neg	r18
    6dd6:	3f 4f       	sbci	r19, 0xFF	; 255
    6dd8:	4f 4f       	sbci	r20, 0xFF	; 255
    6dda:	5f 4f       	sbci	r21, 0xFF	; 255

00006ddc <__divmodsi4_exit>:
    6ddc:	08 95       	ret

00006dde <__divmodsi4_neg1>:
    6dde:	f6 f7       	brtc	.-4      	; 0x6ddc <__divmodsi4_exit>
    6de0:	90 95       	com	r25
    6de2:	80 95       	com	r24
    6de4:	70 95       	com	r23
    6de6:	61 95       	neg	r22
    6de8:	7f 4f       	sbci	r23, 0xFF	; 255
    6dea:	8f 4f       	sbci	r24, 0xFF	; 255
    6dec:	9f 4f       	sbci	r25, 0xFF	; 255
    6dee:	08 95       	ret

00006df0 <_exit>:
    6df0:	f8 94       	cli

00006df2 <__stop_program>:
    6df2:	ff cf       	rjmp	.-2      	; 0x6df2 <__stop_program>
