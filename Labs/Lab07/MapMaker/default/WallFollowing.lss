
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000028c  00800100  00006d02  00006d96  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006d02  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c4  0080038c  0080038c  00007022  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00007022  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000787  00000000  00000000  00007082  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001bd8  00000000  00000000  00007809  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000043a  00000000  00000000  000093e1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001641  00000000  00000000  0000981b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000310  00000000  00000000  0000ae5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d6d  00000000  00000000  0000b16c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001096  00000000  00000000  0000bed9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 76 22 	jmp	0x44ec	; 0x44ec <__vector_4>
      14:	0c 94 9f 22 	jmp	0x453e	; 0x453e <__vector_5>
      18:	0c 94 c8 22 	jmp	0x4590	; 0x4590 <__vector_6>
      1c:	0c 94 f1 22 	jmp	0x45e2	; 0x45e2 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 57 21 	jmp	0x42ae	; 0x42ae <__vector_9>
      28:	0c 94 80 21 	jmp	0x4300	; 0x4300 <__vector_10>
      2c:	0c 94 a9 21 	jmp	0x4352	; 0x4352 <__vector_11>
      30:	0c 94 24 22 	jmp	0x4448	; 0x4448 <__vector_12>
      34:	0c 94 d2 21 	jmp	0x43a4	; 0x43a4 <__vector_13>
      38:	0c 94 fb 21 	jmp	0x43f6	; 0x43f6 <__vector_14>
      3c:	0c 94 4d 22 	jmp	0x449a	; 0x449a <__vector_15>
      40:	0c 94 dc 20 	jmp	0x41b8	; 0x41b8 <__vector_16>
      44:	0c 94 05 21 	jmp	0x420a	; 0x420a <__vector_17>
      48:	0c 94 2e 21 	jmp	0x425c	; 0x425c <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	41 1e       	adc	r4, r17
      7e:	44 1e       	adc	r4, r20
      80:	47 1e       	adc	r4, r23
      82:	4a 1e       	adc	r4, r26
      84:	53 1e       	adc	r5, r19
      86:	4d 1e       	adc	r4, r29
      88:	50 1e       	adc	r5, r16
      8a:	56 1e       	adc	r5, r22
      8c:	59 1e       	adc	r5, r25
      8e:	5c 1e       	adc	r5, r28
      90:	5f 1e       	adc	r5, r31
      92:	62 1e       	adc	r6, r18
      94:	65 1e       	adc	r6, r21
      96:	68 1e       	adc	r6, r24
      98:	6b 1e       	adc	r6, r27
      9a:	6e 1e       	adc	r6, r30
      9c:	71 1e       	adc	r7, r17
      9e:	74 1e       	adc	r7, r20
      a0:	77 1e       	adc	r7, r23
      a2:	88 1e       	adc	r8, r24
      a4:	8b 1e       	adc	r8, r27
      a6:	8e 1e       	adc	r8, r30
      a8:	91 1e       	adc	r9, r17
      aa:	9a 1e       	adc	r9, r26
      ac:	94 1e       	adc	r9, r20
      ae:	97 1e       	adc	r9, r23
      b0:	9d 1e       	adc	r9, r29
      b2:	a0 1e       	adc	r10, r16
      b4:	a3 1e       	adc	r10, r19
      b6:	a6 1e       	adc	r10, r22
      b8:	a9 1e       	adc	r10, r25
      ba:	ac 1e       	adc	r10, r28
      bc:	af 1e       	adc	r10, r31
      be:	b2 1e       	adc	r11, r18
      c0:	b5 1e       	adc	r11, r21
      c2:	b8 1e       	adc	r11, r24
      c4:	bb 1e       	adc	r11, r27
      c6:	be 1e       	adc	r11, r30
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e2 e0       	ldi	r30, 0x02	; 2
     676:	fd e6       	ldi	r31, 0x6D	; 109
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	ac 38       	cpi	r26, 0x8C	; 140
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	ac e8       	ldi	r26, 0x8C	; 140
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a0 35       	cpi	r26, 0x50	; 80
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 c6 18 	call	0x318c	; 0x318c <main>
     698:	0c 94 7f 36 	jmp	0x6cfe	; 0x6cfe <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 1a 20 	call	0x4034	; 0x4034 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 86 20 	call	0x410c	; 0x410c <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 1a 20 	call	0x4034	; 0x4034 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 86 20 	call	0x410c	; 0x410c <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 1a 20 	call	0x4034	; 0x4034 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 86 20 	call	0x410c	; 0x410c <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 1a 20 	call	0x4034	; 0x4034 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 86 20 	call	0x410c	; 0x410c <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 1a 20 	call	0x4034	; 0x4034 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 86 20 	call	0x410c	; 0x410c <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 1a 20 	call	0x4034	; 0x4034 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 86 20 	call	0x410c	; 0x410c <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 1a 20 	call	0x4034	; 0x4034 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 86 20 	call	0x410c	; 0x410c <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 1a 20 	call	0x4034	; 0x4034 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 86 20 	call	0x410c	; 0x410c <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 1a 20 	call	0x4034	; 0x4034 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 86 20 	call	0x410c	; 0x410c <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 1a 20 	call	0x4034	; 0x4034 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 40 20 	call	0x4080	; 0x4080 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 ee 1f 	call	0x3fdc	; 0x3fdc <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 86 20 	call	0x410c	; 0x410c <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 bb 18 	call	0x3176	; 0x3176 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 84 18 	call	0x3108	; 0x3108 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 67 18 	call	0x30ce	; 0x30ce <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 88 2c 	call	0x5910	; 0x5910 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 86 2b 	call	0x570c	; 0x570c <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 bb 18 	call	0x3176	; 0x3176 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 84 18 	call	0x3108	; 0x3108 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 67 18 	call	0x30ce	; 0x30ce <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 88 2c 	call	0x5910	; 0x5910 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 86 2b 	call	0x570c	; 0x570c <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 bb 18 	call	0x3176	; 0x3176 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 84 18 	call	0x3108	; 0x3108 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 67 18 	call	0x30ce	; 0x30ce <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 88 2c 	call	0x5910	; 0x5910 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 86 2b 	call	0x570c	; 0x570c <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 bb 18 	call	0x3176	; 0x3176 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 84 18 	call	0x3108	; 0x3108 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 67 18 	call	0x30ce	; 0x30ce <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 88 2c 	call	0x5910	; 0x5910 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 86 2b 	call	0x570c	; 0x570c <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 bb 18 	call	0x3176	; 0x3176 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 84 18 	call	0x3108	; 0x3108 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 67 18 	call	0x30ce	; 0x30ce <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 88 2c 	call	0x5910	; 0x5910 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 bb 18 	call	0x3176	; 0x3176 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 84 18 	call	0x3108	; 0x3108 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 67 18 	call	0x30ce	; 0x30ce <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 88 2c 	call	0x5910	; 0x5910 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 08 04 	sts	0x0408, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 cf 18 	call	0x319e	; 0x319e <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 08 04 	sts	0x0408, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 f2 1e 	call	0x3de4	; 0x3de4 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 de 19 	call	0x33bc	; 0x33bc <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 c9 19 	call	0x3392	; 0x3392 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 c9 19 	call	0x3392	; 0x3392 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 de 19 	call	0x33bc	; 0x33bc <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 c9 19 	call	0x3392	; 0x3392 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 c9 19 	call	0x3392	; 0x3392 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 de 19 	call	0x33bc	; 0x33bc <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 de 19 	call	0x33bc	; 0x33bc <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 c9 19 	call	0x3392	; 0x3392 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 c9 19 	call	0x3392	; 0x3392 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 cf 18 	call	0x319e	; 0x319e <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
     c14:	ef 92       	push	r14
     c16:	ff 92       	push	r15
     c18:	0f 93       	push	r16
     c1a:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
     c1c:	60 91 87 04 	lds	r22, 0x0487
     c20:	70 91 88 04 	lds	r23, 0x0488
     c24:	80 91 89 04 	lds	r24, 0x0489
     c28:	90 91 8a 04 	lds	r25, 0x048A
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	40 e5       	ldi	r20, 0x50	; 80
     c32:	51 e4       	ldi	r21, 0x41	; 65
     c34:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
     c38:	f8 2e       	mov	r15, r24
     c3a:	ff 1c       	adc	r15, r15
     c3c:	ff 24       	eor	r15, r15
     c3e:	ff 1c       	adc	r15, r15
     c40:	ff 0c       	add	r15, r15
     c42:	ff 0c       	add	r15, r15
     c44:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
     c46:	60 91 38 06 	lds	r22, 0x0638
     c4a:	70 91 39 06 	lds	r23, 0x0639
     c4e:	80 91 3a 06 	lds	r24, 0x063A
     c52:	90 91 3b 06 	lds	r25, 0x063B
     c56:	20 e0       	ldi	r18, 0x00	; 0
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	40 ef       	ldi	r20, 0xF0	; 240
     c5c:	51 e4       	ldi	r21, 0x41	; 65
     c5e:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
     c62:	08 2f       	mov	r16, r24
     c64:	00 1f       	adc	r16, r16
     c66:	00 27       	eor	r16, r16
     c68:	00 1f       	adc	r16, r16
     c6a:	00 0f       	add	r16, r16
     c6c:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
     c6e:	60 91 91 04 	lds	r22, 0x0491
     c72:	70 91 92 04 	lds	r23, 0x0492
     c76:	80 91 93 04 	lds	r24, 0x0493
     c7a:	90 91 94 04 	lds	r25, 0x0494
     c7e:	20 e0       	ldi	r18, 0x00	; 0
     c80:	30 e0       	ldi	r19, 0x00	; 0
     c82:	4c e0       	ldi	r20, 0x0C	; 12
     c84:	52 e4       	ldi	r21, 0x42	; 66
     c86:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
     c8a:	18 2f       	mov	r17, r24
     c8c:	11 1f       	adc	r17, r17
     c8e:	11 27       	eor	r17, r17
     c90:	11 1f       	adc	r17, r17
     c92:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
     c94:	ee 24       	eor	r14, r14
     c96:	60 91 3d 06 	lds	r22, 0x063D
     c9a:	70 91 3e 06 	lds	r23, 0x063E
     c9e:	80 91 3f 06 	lds	r24, 0x063F
     ca2:	90 91 40 06 	lds	r25, 0x0640
     ca6:	20 e0       	ldi	r18, 0x00	; 0
     ca8:	30 e0       	ldi	r19, 0x00	; 0
     caa:	40 ef       	ldi	r20, 0xF0	; 240
     cac:	51 e4       	ldi	r21, 0x41	; 65
     cae:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
     cb2:	88 23       	and	r24, r24
     cb4:	14 f4       	brge	.+4      	; 0xcba <checkWorld+0xa6>
     cb6:	ee 24       	eor	r14, r14
     cb8:	e3 94       	inc	r14
     cba:	8f 2d       	mov	r24, r15
     cbc:	8e 0d       	add	r24, r14
     cbe:	80 0f       	add	r24, r16
     cc0:	81 0f       	add	r24, r17
     cc2:	80 93 8f 04 	sts	0x048F, r24
	nextGateway = moveGateways[currentMoveWorld+1];
     cc6:	20 91 90 04 	lds	r18, 0x0490
     cca:	e2 2f       	mov	r30, r18
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	e7 54       	subi	r30, 0x47	; 71
     cd0:	f9 4f       	sbci	r31, 0xF9	; 249
     cd2:	91 81       	ldd	r25, Z+1	; 0x01
     cd4:	90 93 95 04 	sts	0x0495, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
     cd8:	89 17       	cp	r24, r25
     cda:	19 f4       	brne	.+6      	; 0xce2 <checkWorld+0xce>
		currentMoveWorld += 1;
     cdc:	2f 5f       	subi	r18, 0xFF	; 255
     cde:	20 93 90 04 	sts	0x0490, r18
	}
}
     ce2:	1f 91       	pop	r17
     ce4:	0f 91       	pop	r16
     ce6:	ff 90       	pop	r15
     ce8:	ef 90       	pop	r14
     cea:	08 95       	ret

00000cec <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
     cec:	2f 92       	push	r2
     cee:	3f 92       	push	r3
     cf0:	4f 92       	push	r4
     cf2:	5f 92       	push	r5
     cf4:	6f 92       	push	r6
     cf6:	7f 92       	push	r7
     cf8:	8f 92       	push	r8
     cfa:	9f 92       	push	r9
     cfc:	af 92       	push	r10
     cfe:	bf 92       	push	r11
     d00:	cf 92       	push	r12
     d02:	df 92       	push	r13
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
     d0c:	e0 90 87 04 	lds	r14, 0x0487
     d10:	f0 90 88 04 	lds	r15, 0x0488
     d14:	00 91 89 04 	lds	r16, 0x0489
     d18:	10 91 8a 04 	lds	r17, 0x048A
     d1c:	33 24       	eor	r3, r3
     d1e:	c8 01       	movw	r24, r16
     d20:	b7 01       	movw	r22, r14
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	40 e0       	ldi	r20, 0x00	; 0
     d28:	50 e0       	ldi	r21, 0x00	; 0
     d2a:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
     d2e:	88 23       	and	r24, r24
     d30:	14 f4       	brge	.+4      	; 0xd36 <moveWall+0x4a>
     d32:	33 24       	eor	r3, r3
     d34:	33 94       	inc	r3
     d36:	a0 90 3d 06 	lds	r10, 0x063D
     d3a:	b0 90 3e 06 	lds	r11, 0x063E
     d3e:	c0 90 3f 06 	lds	r12, 0x063F
     d42:	d0 90 40 06 	lds	r13, 0x0640
     d46:	40 90 38 06 	lds	r4, 0x0638
     d4a:	50 90 39 06 	lds	r5, 0x0639
     d4e:	60 90 3a 06 	lds	r6, 0x063A
     d52:	70 90 3b 06 	lds	r7, 0x063B
     d56:	88 24       	eor	r8, r8
     d58:	60 91 91 04 	lds	r22, 0x0491
     d5c:	70 91 92 04 	lds	r23, 0x0492
     d60:	80 91 93 04 	lds	r24, 0x0493
     d64:	90 91 94 04 	lds	r25, 0x0494
     d68:	20 e0       	ldi	r18, 0x00	; 0
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	40 e7       	ldi	r20, 0x70	; 112
     d6e:	51 e4       	ldi	r21, 0x41	; 65
     d70:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
     d74:	88 23       	and	r24, r24
     d76:	14 f4       	brge	.+4      	; 0xd7c <moveWall+0x90>
     d78:	88 24       	eor	r8, r8
     d7a:	83 94       	inc	r8
     d7c:	93 2c       	mov	r9, r3
     d7e:	98 28       	or	r9, r8
     d80:	88 24       	eor	r8, r8
     d82:	c6 01       	movw	r24, r12
     d84:	b5 01       	movw	r22, r10
     d86:	20 e0       	ldi	r18, 0x00	; 0
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	40 e2       	ldi	r20, 0x20	; 32
     d8c:	51 e4       	ldi	r21, 0x41	; 65
     d8e:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
     d92:	88 23       	and	r24, r24
     d94:	14 f4       	brge	.+4      	; 0xd9a <moveWall+0xae>
     d96:	88 24       	eor	r8, r8
     d98:	83 94       	inc	r8
     d9a:	98 28       	or	r9, r8
     d9c:	88 24       	eor	r8, r8
     d9e:	c3 01       	movw	r24, r6
     da0:	b2 01       	movw	r22, r4
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	40 e2       	ldi	r20, 0x20	; 32
     da8:	51 e4       	ldi	r21, 0x41	; 65
     daa:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
     dae:	88 23       	and	r24, r24
     db0:	14 f4       	brge	.+4      	; 0xdb6 <moveWall+0xca>
     db2:	88 24       	eor	r8, r8
     db4:	83 94       	inc	r8
     db6:	29 2c       	mov	r2, r9
     db8:	28 28       	or	r2, r8
	if(!isWall){	
     dba:	81 f4       	brne	.+32     	; 0xddc <moveWall+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
     dbc:	60 e0       	ldi	r22, 0x00	; 0
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	80 e0       	ldi	r24, 0x00	; 0
     dc2:	9f e4       	ldi	r25, 0x4F	; 79
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	30 e0       	ldi	r19, 0x00	; 0
     dc8:	40 e2       	ldi	r20, 0x20	; 32
     dca:	51 e4       	ldi	r21, 0x41	; 65
     dcc:	79 01       	movw	r14, r18
     dce:	8a 01       	movw	r16, r20
     dd0:	59 01       	movw	r10, r18
     dd2:	6a 01       	movw	r12, r20
     dd4:	88 24       	eor	r8, r8
     dd6:	0e 94 a7 10 	call	0x214e	; 0x214e <move_arc_stnb>
     dda:	3e c1       	rjmp	.+636    	; 0x1058 <moveWall+0x36c>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
     ddc:	c6 01       	movw	r24, r12
     dde:	b5 01       	movw	r22, r10
     de0:	20 e0       	ldi	r18, 0x00	; 0
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	40 e2       	ldi	r20, 0x20	; 32
     de6:	51 e4       	ldi	r21, 0x41	; 65
     de8:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <__gesf2>
     dec:	18 16       	cp	r1, r24
     dee:	64 f4       	brge	.+24     	; 0xe08 <moveWall+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
     df0:	80 e0       	ldi	r24, 0x00	; 0
     df2:	90 e0       	ldi	r25, 0x00	; 0
     df4:	a0 e0       	ldi	r26, 0x00	; 0
     df6:	b1 ec       	ldi	r27, 0xC1	; 193
     df8:	80 93 3d 06 	sts	0x063D, r24
     dfc:	90 93 3e 06 	sts	0x063E, r25
     e00:	a0 93 3f 06 	sts	0x063F, r26
     e04:	b0 93 40 06 	sts	0x0640, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
     e08:	c3 01       	movw	r24, r6
     e0a:	b2 01       	movw	r22, r4
     e0c:	20 e0       	ldi	r18, 0x00	; 0
     e0e:	30 e0       	ldi	r19, 0x00	; 0
     e10:	40 e2       	ldi	r20, 0x20	; 32
     e12:	51 e4       	ldi	r21, 0x41	; 65
     e14:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <__gesf2>
     e18:	18 16       	cp	r1, r24
     e1a:	14 f0       	brlt	.+4      	; 0xe20 <moveWall+0x134>
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	0d c0       	rjmp	.+26     	; 0xe3a <moveWall+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
     e20:	80 e0       	ldi	r24, 0x00	; 0
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	a0 e0       	ldi	r26, 0x00	; 0
     e26:	b1 ec       	ldi	r27, 0xC1	; 193
     e28:	80 93 38 06 	sts	0x0638, r24
     e2c:	90 93 39 06 	sts	0x0639, r25
     e30:	a0 93 3a 06 	sts	0x063A, r26
     e34:	b0 93 3b 06 	sts	0x063B, r27
     e38:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
     e3a:	33 20       	and	r3, r3
     e3c:	21 f1       	breq	.+72     	; 0xe86 <moveWall+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
     e3e:	88 23       	and	r24, r24
     e40:	29 f0       	breq	.+10     	; 0xe4c <moveWall+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
     e42:	60 e0       	ldi	r22, 0x00	; 0
     e44:	70 e0       	ldi	r23, 0x00	; 0
     e46:	8a e7       	ldi	r24, 0x7A	; 122
     e48:	94 e4       	ldi	r25, 0x44	; 68
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <moveWall+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	70 e0       	ldi	r23, 0x00	; 0
     e50:	8a e7       	ldi	r24, 0x7A	; 122
     e52:	94 ec       	ldi	r25, 0xC4	; 196
     e54:	a8 01       	movw	r20, r16
     e56:	97 01       	movw	r18, r14
     e58:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
     e5c:	20 91 38 06 	lds	r18, 0x0638
     e60:	30 91 39 06 	lds	r19, 0x0639
     e64:	40 91 3a 06 	lds	r20, 0x063A
     e68:	50 91 3b 06 	lds	r21, 0x063B
     e6c:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
     e70:	9b 01       	movw	r18, r22
     e72:	ac 01       	movw	r20, r24
     e74:	60 91 3d 06 	lds	r22, 0x063D
     e78:	70 91 3e 06 	lds	r23, 0x063E
     e7c:	80 91 3f 06 	lds	r24, 0x063F
     e80:	90 91 40 06 	lds	r25, 0x0640
     e84:	10 c0       	rjmp	.+32     	; 0xea6 <moveWall+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
     e86:	60 91 3d 06 	lds	r22, 0x063D
     e8a:	70 91 3e 06 	lds	r23, 0x063E
     e8e:	80 91 3f 06 	lds	r24, 0x063F
     e92:	90 91 40 06 	lds	r25, 0x0640
     e96:	20 91 38 06 	lds	r18, 0x0638
     e9a:	30 91 39 06 	lds	r19, 0x0639
     e9e:	40 91 3a 06 	lds	r20, 0x063A
     ea2:	50 91 3b 06 	lds	r21, 0x063B
     ea6:	0e 94 86 2b 	call	0x570c	; 0x570c <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
     eaa:	90 58       	subi	r25, 0x80	; 128
     eac:	40 e0       	ldi	r20, 0x00	; 0
     eae:	0e 94 3b 0e 	call	0x1c76	; 0x1c76 <pidController>
     eb2:	6b 01       	movw	r12, r22
     eb4:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
     eb6:	0e 94 57 2c 	call	0x58ae	; 0x58ae <__fixsfsi>
     eba:	8b 01       	movw	r16, r22
     ebc:	77 ff       	sbrs	r23, 7
     ebe:	03 c0       	rjmp	.+6      	; 0xec6 <moveWall+0x1da>
     ec0:	10 95       	com	r17
     ec2:	01 95       	neg	r16
     ec4:	1f 4f       	sbci	r17, 0xFF	; 255
     ec6:	05 36       	cpi	r16, 0x65	; 101
     ec8:	11 05       	cpc	r17, r1
     eca:	fc f0       	brlt	.+62     	; 0xf0a <moveWall+0x21e>
     ecc:	c7 01       	movw	r24, r14
     ece:	b6 01       	movw	r22, r12
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 e0       	ldi	r20, 0x00	; 0
     ed6:	50 e0       	ldi	r21, 0x00	; 0
     ed8:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
     edc:	88 23       	and	r24, r24
     ede:	a9 f0       	breq	.+42     	; 0xf0a <moveWall+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
     ee0:	b8 01       	movw	r22, r16
     ee2:	88 27       	eor	r24, r24
     ee4:	77 fd       	sbrc	r23, 7
     ee6:	80 95       	com	r24
     ee8:	98 2f       	mov	r25, r24
     eea:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__floatsisf>
     eee:	9b 01       	movw	r18, r22
     ef0:	ac 01       	movw	r20, r24
     ef2:	c7 01       	movw	r24, r14
     ef4:	b6 01       	movw	r22, r12
     ef6:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
     efa:	20 e0       	ldi	r18, 0x00	; 0
     efc:	30 e0       	ldi	r19, 0x00	; 0
     efe:	48 ec       	ldi	r20, 0xC8	; 200
     f00:	52 e4       	ldi	r21, 0x42	; 66
     f02:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
     f06:	6b 01       	movw	r12, r22
     f08:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
     f0a:	c7 01       	movw	r24, r14
     f0c:	b6 01       	movw	r22, r12
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	48 ec       	ldi	r20, 0xC8	; 200
     f14:	52 e4       	ldi	r21, 0x42	; 66
     f16:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
     f1a:	3b 01       	movw	r6, r22
     f1c:	4c 01       	movw	r8, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
     f1e:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <STEPPER_get_nSteps>
     f22:	60 93 30 06 	sts	0x0630, r22
     f26:	70 93 31 06 	sts	0x0631, r23
     f2a:	80 93 32 06 	sts	0x0632, r24
     f2e:	90 93 33 06 	sts	0x0633, r25
	odometryStepL += WALL_STEP - curr_step.left;
     f32:	22 e3       	ldi	r18, 0x32	; 50
     f34:	e2 2e       	mov	r14, r18
     f36:	f1 2c       	mov	r15, r1
     f38:	97 01       	movw	r18, r14
     f3a:	26 1b       	sub	r18, r22
     f3c:	37 0b       	sbc	r19, r23
     f3e:	b9 01       	movw	r22, r18
     f40:	80 e0       	ldi	r24, 0x00	; 0
     f42:	90 e0       	ldi	r25, 0x00	; 0
     f44:	0e 94 88 2c 	call	0x5910	; 0x5910 <__floatunsisf>
     f48:	9b 01       	movw	r18, r22
     f4a:	ac 01       	movw	r20, r24
     f4c:	60 91 ca 06 	lds	r22, 0x06CA
     f50:	70 91 cb 06 	lds	r23, 0x06CB
     f54:	80 91 cc 06 	lds	r24, 0x06CC
     f58:	90 91 cd 06 	lds	r25, 0x06CD
     f5c:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
     f60:	60 93 ca 06 	sts	0x06CA, r22
     f64:	70 93 cb 06 	sts	0x06CB, r23
     f68:	80 93 cc 06 	sts	0x06CC, r24
     f6c:	90 93 cd 06 	sts	0x06CD, r25
	odometryStepR += WALL_STEP - curr_step.right;
     f70:	80 91 32 06 	lds	r24, 0x0632
     f74:	90 91 33 06 	lds	r25, 0x0633
     f78:	b7 01       	movw	r22, r14
     f7a:	68 1b       	sub	r22, r24
     f7c:	79 0b       	sbc	r23, r25
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0e 94 88 2c 	call	0x5910	; 0x5910 <__floatunsisf>
     f86:	9b 01       	movw	r18, r22
     f88:	ac 01       	movw	r20, r24
     f8a:	60 91 0a 04 	lds	r22, 0x040A
     f8e:	70 91 0b 04 	lds	r23, 0x040B
     f92:	80 91 0c 04 	lds	r24, 0x040C
     f96:	90 91 0d 04 	lds	r25, 0x040D
     f9a:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
     f9e:	60 93 0a 04 	sts	0x040A, r22
     fa2:	70 93 0b 04 	sts	0x040B, r23
     fa6:	80 93 0c 04 	sts	0x040C, r24
     faa:	90 93 0d 04 	sts	0x040D, r25
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
     fae:	8d b7       	in	r24, 0x3d	; 61
     fb0:	9e b7       	in	r25, 0x3e	; 62
     fb2:	09 97       	sbiw	r24, 0x09	; 9
     fb4:	0f b6       	in	r0, 0x3f	; 63
     fb6:	f8 94       	cli
     fb8:	9e bf       	out	0x3e, r25	; 62
     fba:	0f be       	out	0x3f, r0	; 63
     fbc:	8d bf       	out	0x3d, r24	; 61
     fbe:	0d b7       	in	r16, 0x3d	; 61
     fc0:	1e b7       	in	r17, 0x3e	; 62
     fc2:	0f 5f       	subi	r16, 0xFF	; 255
     fc4:	1f 4f       	sbci	r17, 0xFF	; 255
     fc6:	c4 01       	movw	r24, r8
     fc8:	b3 01       	movw	r22, r6
     fca:	20 e0       	ldi	r18, 0x00	; 0
     fcc:	30 e0       	ldi	r19, 0x00	; 0
     fce:	48 ec       	ldi	r20, 0xC8	; 200
     fd0:	52 e4       	ldi	r21, 0x42	; 66
     fd2:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	48 ec       	ldi	r20, 0xC8	; 200
     fdc:	52 e4       	ldi	r21, 0x42	; 66
     fde:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
     fe2:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
     fe6:	5b 01       	movw	r10, r22
     fe8:	6c 01       	movw	r12, r24
     fea:	f8 01       	movw	r30, r16
     fec:	f1 82       	std	Z+1, r15	; 0x01
     fee:	e0 82       	st	Z, r14
     ff0:	c4 01       	movw	r24, r8
     ff2:	b3 01       	movw	r22, r6
     ff4:	20 e0       	ldi	r18, 0x00	; 0
     ff6:	30 e0       	ldi	r19, 0x00	; 0
     ff8:	48 ec       	ldi	r20, 0xC8	; 200
     ffa:	52 ec       	ldi	r21, 0xC2	; 194
     ffc:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    1000:	20 e0       	ldi	r18, 0x00	; 0
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	48 ec       	ldi	r20, 0xC8	; 200
    1006:	52 e4       	ldi	r21, 0x42	; 66
    1008:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    100c:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    1010:	f8 01       	movw	r30, r16
    1012:	73 83       	std	Z+3, r23	; 0x03
    1014:	62 83       	std	Z+2, r22	; 0x02
    1016:	82 ec       	ldi	r24, 0xC2	; 194
    1018:	91 e0       	ldi	r25, 0x01	; 1
    101a:	95 83       	std	Z+5, r25	; 0x05
    101c:	84 83       	std	Z+4, r24	; 0x04
    101e:	16 82       	std	Z+6, r1	; 0x06
    1020:	10 86       	std	Z+8, r1	; 0x08
    1022:	17 82       	std	Z+7, r1	; 0x07
    1024:	81 e0       	ldi	r24, 0x01	; 1
    1026:	62 e0       	ldi	r22, 0x02	; 2
    1028:	41 e0       	ldi	r20, 0x01	; 1
    102a:	22 e3       	ldi	r18, 0x32	; 50
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	85 01       	movw	r16, r10
    1030:	92 ec       	ldi	r25, 0xC2	; 194
    1032:	e9 2e       	mov	r14, r25
    1034:	91 e0       	ldi	r25, 0x01	; 1
    1036:	f9 2e       	mov	r15, r25
    1038:	cc 24       	eor	r12, r12
    103a:	aa 24       	eor	r10, r10
    103c:	bb 24       	eor	r11, r11
    103e:	88 24       	eor	r8, r8
    1040:	83 94       	inc	r8
    1042:	0e 94 b0 1b 	call	0x3760	; 0x3760 <STEPPER_move>
    1046:	2d b7       	in	r18, 0x3d	; 61
    1048:	3e b7       	in	r19, 0x3e	; 62
    104a:	27 5f       	subi	r18, 0xF7	; 247
    104c:	3f 4f       	sbci	r19, 0xFF	; 255
    104e:	0f b6       	in	r0, 0x3f	; 63
    1050:	f8 94       	cli
    1052:	3e bf       	out	0x3e, r19	; 62
    1054:	0f be       	out	0x3f, r0	; 63
    1056:	2d bf       	out	0x3d, r18	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    1058:	82 2d       	mov	r24, r2
    105a:	1f 91       	pop	r17
    105c:	0f 91       	pop	r16
    105e:	ff 90       	pop	r15
    1060:	ef 90       	pop	r14
    1062:	df 90       	pop	r13
    1064:	cf 90       	pop	r12
    1066:	bf 90       	pop	r11
    1068:	af 90       	pop	r10
    106a:	9f 90       	pop	r9
    106c:	8f 90       	pop	r8
    106e:	7f 90       	pop	r7
    1070:	6f 90       	pop	r6
    1072:	5f 90       	pop	r5
    1074:	4f 90       	pop	r4
    1076:	3f 90       	pop	r3
    1078:	2f 90       	pop	r2
    107a:	08 95       	ret

0000107c <shiftMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    shifts the map after robot moves
********************************************************************/
void shiftMap( void )
{		
    107c:	ff 92       	push	r15
    107e:	0f 93       	push	r16
    1080:	1f 93       	push	r17
	// Get the currrent location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    1082:	80 91 34 06 	lds	r24, 0x0634
    1086:	08 2f       	mov	r16, r24
    1088:	06 95       	lsr	r16
    108a:	06 95       	lsr	r16
	unsigned char curCol = currentCellWorld & 0b0011;
    108c:	33 e0       	ldi	r19, 0x03	; 3
    108e:	f3 2e       	mov	r15, r19
    1090:	f8 22       	and	r15, r24
		
	// Git the currrent orientation of the robot
	unsigned char curOrient = currentOrientation;
    1092:	10 91 33 05 	lds	r17, 0x0533
			
		
	switch(currentMove){
    1096:	80 91 09 04 	lds	r24, 0x0409
    109a:	82 30       	cpi	r24, 0x02	; 2
    109c:	31 f0       	breq	.+12     	; 0x10aa <shiftMap+0x2e>
    109e:	83 30       	cpi	r24, 0x03	; 3
    10a0:	a9 f0       	breq	.+42     	; 0x10cc <shiftMap+0x50>
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	b1 f4       	brne	.+44     	; 0x10d2 <shiftMap+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    10a6:	11 50       	subi	r17, 0x01	; 1
    10a8:	12 c0       	rjmp	.+36     	; 0x10ce <shiftMap+0x52>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    10aa:	11 30       	cpi	r17, 0x01	; 1
    10ac:	49 f0       	breq	.+18     	; 0x10c0 <shiftMap+0x44>
    10ae:	11 30       	cpi	r17, 0x01	; 1
    10b0:	28 f0       	brcs	.+10     	; 0x10bc <shiftMap+0x40>
    10b2:	12 30       	cpi	r17, 0x02	; 2
    10b4:	39 f0       	breq	.+14     	; 0x10c4 <shiftMap+0x48>
    10b6:	13 30       	cpi	r17, 0x03	; 3
    10b8:	b9 f4       	brne	.+46     	; 0x10e8 <shiftMap+0x6c>
    10ba:	06 c0       	rjmp	.+12     	; 0x10c8 <shiftMap+0x4c>
				case NORTH:
					curRow -= 1;
    10bc:	01 50       	subi	r16, 0x01	; 1
    10be:	14 c0       	rjmp	.+40     	; 0x10e8 <shiftMap+0x6c>
					break;
				case EAST:
					curCol += 1;
    10c0:	f3 94       	inc	r15
    10c2:	12 c0       	rjmp	.+36     	; 0x10e8 <shiftMap+0x6c>
					break;
				case SOUTH:
					curRow += 1;					
    10c4:	0f 5f       	subi	r16, 0xFF	; 255
    10c6:	10 c0       	rjmp	.+32     	; 0x10e8 <shiftMap+0x6c>
					break;
				case WEST:
					curCol -= 1;					
    10c8:	fa 94       	dec	r15
    10ca:	0e c0       	rjmp	.+28     	; 0x10e8 <shiftMap+0x6c>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    10cc:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    10ce:	13 70       	andi	r17, 0x03	; 3
    10d0:	0b c0       	rjmp	.+22     	; 0x10e8 <shiftMap+0x6c>
			break;
		default:
			LCD_printf("Whatz3?!");
    10d2:	00 d0       	rcall	.+0      	; 0x10d4 <shiftMap+0x58>
    10d4:	84 e2       	ldi	r24, 0x24	; 36
    10d6:	91 e0       	ldi	r25, 0x01	; 1
    10d8:	ed b7       	in	r30, 0x3d	; 61
    10da:	fe b7       	in	r31, 0x3e	; 62
    10dc:	92 83       	std	Z+2, r25	; 0x02
    10de:	81 83       	std	Z+1, r24	; 0x01
    10e0:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
    10e4:	0f 90       	pop	r0
    10e6:	0f 90       	pop	r0
			break;
	}
	
	// Set the new cell of the robot
	currentCellWorld = (curRow << 2) + curCol;
    10e8:	00 0f       	add	r16, r16
    10ea:	00 0f       	add	r16, r16
    10ec:	0f 0d       	add	r16, r15
    10ee:	00 93 34 06 	sts	0x0634, r16
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    10f2:	10 93 33 05 	sts	0x0533, r17
}
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	08 95       	ret

000010fe <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    10fe:	80 91 8f 04 	lds	r24, 0x048F
    1102:	80 fd       	sbrc	r24, 0
    1104:	02 c0       	rjmp	.+4      	; 0x110a <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    1106:	81 e0       	ldi	r24, 0x01	; 1
    1108:	05 c0       	rjmp	.+10     	; 0x1114 <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    110a:	83 fd       	sbrc	r24, 3
    110c:	02 c0       	rjmp	.+4      	; 0x1112 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    110e:	82 e0       	ldi	r24, 0x02	; 2
    1110:	01 c0       	rjmp	.+2      	; 0x1114 <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    1112:	83 e0       	ldi	r24, 0x03	; 3
    1114:	80 93 09 04 	sts	0x0409, r24
	}
	
	switch(oldMove){
    1118:	80 91 0e 04 	lds	r24, 0x040E
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	29 f0       	breq	.+10     	; 0x112a <planMap+0x2c>
    1120:	81 30       	cpi	r24, 0x01	; 1
    1122:	38 f0       	brcs	.+14     	; 0x1132 <planMap+0x34>
    1124:	84 30       	cpi	r24, 0x04	; 4
    1126:	28 f4       	brcc	.+10     	; 0x1132 <planMap+0x34>
    1128:	0f c0       	rjmp	.+30     	; 0x1148 <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    112a:	82 e0       	ldi	r24, 0x02	; 2
    112c:	80 93 09 04 	sts	0x0409, r24
    1130:	0b c0       	rjmp	.+22     	; 0x1148 <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    1132:	00 d0       	rcall	.+0      	; 0x1134 <planMap+0x36>
    1134:	8d e2       	ldi	r24, 0x2D	; 45
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	ed b7       	in	r30, 0x3d	; 61
    113a:	fe b7       	in	r31, 0x3e	; 62
    113c:	92 83       	std	Z+2, r25	; 0x02
    113e:	81 83       	std	Z+1, r24	; 0x01
    1140:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    1148:	80 91 09 04 	lds	r24, 0x0409
    114c:	80 93 0e 04 	sts	0x040E, r24
}
    1150:	08 95       	ret

00001152 <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    1152:	8f 92       	push	r8
    1154:	af 92       	push	r10
    1156:	bf 92       	push	r11
    1158:	cf 92       	push	r12
    115a:	df 92       	push	r13
    115c:	ef 92       	push	r14
    115e:	ff 92       	push	r15
    1160:	0f 93       	push	r16
    1162:	1f 93       	push	r17
	LCD_clear();
    1164:	0e 94 cf 18 	call	0x319e	; 0x319e <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    1168:	e0 91 90 04 	lds	r30, 0x0490
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	ee 5e       	subi	r30, 0xEE	; 238
    1170:	fa 4f       	sbci	r31, 0xFA	; 250
    1172:	e0 81       	ld	r30, Z
    1174:	e0 93 09 04 	sts	0x0409, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	e1 30       	cpi	r30, 0x01	; 1
    117c:	09 f4       	brne	.+2      	; 0x1180 <moveWorld+0x2e>
    117e:	81 e0       	ldi	r24, 0x01	; 1
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	e3 30       	cpi	r30, 0x03	; 3
    1184:	09 f4       	brne	.+2      	; 0x1188 <moveWorld+0x36>
    1186:	91 e0       	ldi	r25, 0x01	; 1
    1188:	89 2b       	or	r24, r25
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	40 e0       	ldi	r20, 0x00	; 0
    1190:	50 e0       	ldi	r21, 0x00	; 0
    1192:	80 91 0e 04 	lds	r24, 0x040E
    1196:	82 30       	cpi	r24, 0x02	; 2
    1198:	11 f4       	brne	.+4      	; 0x119e <moveWorld+0x4c>
    119a:	41 e0       	ldi	r20, 0x01	; 1
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	24 23       	and	r18, r20
    11a0:	35 23       	and	r19, r21
    11a2:	23 2b       	or	r18, r19
    11a4:	b9 f0       	breq	.+46     	; 0x11d4 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    11a6:	60 e0       	ldi	r22, 0x00	; 0
    11a8:	70 e0       	ldi	r23, 0x00	; 0
    11aa:	80 e0       	ldi	r24, 0x00	; 0
    11ac:	9f e4       	ldi	r25, 0x4F	; 79
    11ae:	2d eb       	ldi	r18, 0xBD	; 189
    11b0:	34 e7       	ldi	r19, 0x74	; 116
    11b2:	4b ed       	ldi	r20, 0xDB	; 219
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	0f 2e       	mov	r0, r31
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	ef 2e       	mov	r14, r31
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	ff 2e       	mov	r15, r31
    11c0:	f0 e2       	ldi	r31, 0x20	; 32
    11c2:	0f 2f       	mov	r16, r31
    11c4:	f1 e4       	ldi	r31, 0x41	; 65
    11c6:	1f 2f       	mov	r17, r31
    11c8:	f0 2d       	mov	r31, r0
    11ca:	57 01       	movw	r10, r14
    11cc:	68 01       	movw	r12, r16
    11ce:	88 24       	eor	r8, r8
    11d0:	0e 94 57 13 	call	0x26ae	; 0x26ae <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    11d4:	20 91 0e 04 	lds	r18, 0x040E
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	21 30       	cpi	r18, 0x01	; 1
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <moveWorld+0x8e>
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	23 30       	cpi	r18, 0x03	; 3
    11e4:	09 f4       	brne	.+2      	; 0x11e8 <moveWorld+0x96>
    11e6:	91 e0       	ldi	r25, 0x01	; 1
    11e8:	89 2b       	or	r24, r25
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	40 e0       	ldi	r20, 0x00	; 0
    11f0:	50 e0       	ldi	r21, 0x00	; 0
    11f2:	80 91 09 04 	lds	r24, 0x0409
    11f6:	82 30       	cpi	r24, 0x02	; 2
    11f8:	11 f4       	brne	.+4      	; 0x11fe <moveWorld+0xac>
    11fa:	41 e0       	ldi	r20, 0x01	; 1
    11fc:	50 e0       	ldi	r21, 0x00	; 0
    11fe:	24 23       	and	r18, r20
    1200:	35 23       	and	r19, r21
    1202:	23 2b       	or	r18, r19
    1204:	b9 f0       	breq	.+46     	; 0x1234 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(3.0/5.0), 10, 10, 0);		
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	80 e0       	ldi	r24, 0x00	; 0
    120c:	9f e4       	ldi	r25, 0x4F	; 79
    120e:	2d eb       	ldi	r18, 0xBD	; 189
    1210:	34 e7       	ldi	r19, 0x74	; 116
    1212:	4b ed       	ldi	r20, 0xDB	; 219
    1214:	51 e4       	ldi	r21, 0x41	; 65
    1216:	0f 2e       	mov	r0, r31
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	ef 2e       	mov	r14, r31
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	ff 2e       	mov	r15, r31
    1220:	f0 e2       	ldi	r31, 0x20	; 32
    1222:	0f 2f       	mov	r16, r31
    1224:	f1 e4       	ldi	r31, 0x41	; 65
    1226:	1f 2f       	mov	r17, r31
    1228:	f0 2d       	mov	r31, r0
    122a:	57 01       	movw	r10, r14
    122c:	68 01       	movw	r12, r16
    122e:	88 24       	eor	r8, r8
    1230:	0e 94 57 13 	call	0x26ae	; 0x26ae <move_arc_stwt>
	}
	
	switch(currentMove){
    1234:	80 91 09 04 	lds	r24, 0x0409
    1238:	82 30       	cpi	r24, 0x02	; 2
    123a:	c1 f1       	breq	.+112    	; 0x12ac <moveWorld+0x15a>
    123c:	83 30       	cpi	r24, 0x03	; 3
    123e:	09 f4       	brne	.+2      	; 0x1242 <moveWorld+0xf0>
    1240:	61 c0       	rjmp	.+194    	; 0x1304 <moveWorld+0x1b2>
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	09 f0       	breq	.+2      	; 0x1248 <moveWorld+0xf6>
    1246:	9f c0       	rjmp	.+318    	; 0x1386 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1248:	8d b7       	in	r24, 0x3d	; 61
    124a:	9e b7       	in	r25, 0x3e	; 62
    124c:	08 97       	sbiw	r24, 0x08	; 8
    124e:	0f b6       	in	r0, 0x3f	; 63
    1250:	f8 94       	cli
    1252:	9e bf       	out	0x3e, r25	; 62
    1254:	0f be       	out	0x3f, r0	; 63
    1256:	8d bf       	out	0x3d, r24	; 61
    1258:	ed b7       	in	r30, 0x3d	; 61
    125a:	fe b7       	in	r31, 0x3e	; 62
    125c:	31 96       	adiw	r30, 0x01	; 1
    125e:	86 e3       	ldi	r24, 0x36	; 54
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	ad b7       	in	r26, 0x3d	; 61
    1264:	be b7       	in	r27, 0x3e	; 62
    1266:	12 96       	adiw	r26, 0x02	; 2
    1268:	9c 93       	st	X, r25
    126a:	8e 93       	st	-X, r24
    126c:	11 97       	sbiw	r26, 0x01	; 1
    126e:	80 91 90 04 	lds	r24, 0x0490
    1272:	82 83       	std	Z+2, r24	; 0x02
    1274:	13 82       	std	Z+3, r1	; 0x03
    1276:	80 91 8f 04 	lds	r24, 0x048F
    127a:	84 83       	std	Z+4, r24	; 0x04
    127c:	15 82       	std	Z+5, r1	; 0x05
    127e:	80 91 95 04 	lds	r24, 0x0495
    1282:	86 83       	std	Z+6, r24	; 0x06
    1284:	17 82       	std	Z+7, r1	; 0x07
    1286:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    128a:	ed b7       	in	r30, 0x3d	; 61
    128c:	fe b7       	in	r31, 0x3e	; 62
    128e:	38 96       	adiw	r30, 0x08	; 8
    1290:	0f b6       	in	r0, 0x3f	; 63
    1292:	f8 94       	cli
    1294:	fe bf       	out	0x3e, r31	; 62
    1296:	0f be       	out	0x3f, r0	; 63
    1298:	ed bf       	out	0x3d, r30	; 61
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	80 e0       	ldi	r24, 0x00	; 0
    12a0:	90 e0       	ldi	r25, 0x00	; 0
    12a2:	20 e0       	ldi	r18, 0x00	; 0
    12a4:	30 e0       	ldi	r19, 0x00	; 0
    12a6:	44 e8       	ldi	r20, 0x84	; 132
    12a8:	51 ec       	ldi	r21, 0xC1	; 193
    12aa:	5d c0       	rjmp	.+186    	; 0x1366 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    12ac:	8d b7       	in	r24, 0x3d	; 61
    12ae:	9e b7       	in	r25, 0x3e	; 62
    12b0:	08 97       	sbiw	r24, 0x08	; 8
    12b2:	0f b6       	in	r0, 0x3f	; 63
    12b4:	f8 94       	cli
    12b6:	9e bf       	out	0x3e, r25	; 62
    12b8:	0f be       	out	0x3f, r0	; 63
    12ba:	8d bf       	out	0x3d, r24	; 61
    12bc:	ed b7       	in	r30, 0x3d	; 61
    12be:	fe b7       	in	r31, 0x3e	; 62
    12c0:	31 96       	adiw	r30, 0x01	; 1
    12c2:	81 e6       	ldi	r24, 0x61	; 97
    12c4:	91 e0       	ldi	r25, 0x01	; 1
    12c6:	ad b7       	in	r26, 0x3d	; 61
    12c8:	be b7       	in	r27, 0x3e	; 62
    12ca:	12 96       	adiw	r26, 0x02	; 2
    12cc:	9c 93       	st	X, r25
    12ce:	8e 93       	st	-X, r24
    12d0:	11 97       	sbiw	r26, 0x01	; 1
    12d2:	80 91 90 04 	lds	r24, 0x0490
    12d6:	82 83       	std	Z+2, r24	; 0x02
    12d8:	13 82       	std	Z+3, r1	; 0x03
    12da:	80 91 8f 04 	lds	r24, 0x048F
    12de:	84 83       	std	Z+4, r24	; 0x04
    12e0:	15 82       	std	Z+5, r1	; 0x05
    12e2:	80 91 95 04 	lds	r24, 0x0495
    12e6:	86 83       	std	Z+6, r24	; 0x06
    12e8:	17 82       	std	Z+7, r1	; 0x07
    12ea:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWall();
    12ee:	ed b7       	in	r30, 0x3d	; 61
    12f0:	fe b7       	in	r31, 0x3e	; 62
    12f2:	38 96       	adiw	r30, 0x08	; 8
    12f4:	0f b6       	in	r0, 0x3f	; 63
    12f6:	f8 94       	cli
    12f8:	fe bf       	out	0x3e, r31	; 62
    12fa:	0f be       	out	0x3f, r0	; 63
    12fc:	ed bf       	out	0x3d, r30	; 61
    12fe:	0e 94 76 06 	call	0xcec	; 0xcec <moveWall>
    1302:	53 c0       	rjmp	.+166    	; 0x13aa <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    1304:	8d b7       	in	r24, 0x3d	; 61
    1306:	9e b7       	in	r25, 0x3e	; 62
    1308:	08 97       	sbiw	r24, 0x08	; 8
    130a:	0f b6       	in	r0, 0x3f	; 63
    130c:	f8 94       	cli
    130e:	9e bf       	out	0x3e, r25	; 62
    1310:	0f be       	out	0x3f, r0	; 63
    1312:	8d bf       	out	0x3d, r24	; 61
    1314:	ed b7       	in	r30, 0x3d	; 61
    1316:	fe b7       	in	r31, 0x3e	; 62
    1318:	31 96       	adiw	r30, 0x01	; 1
    131a:	8f e8       	ldi	r24, 0x8F	; 143
    131c:	91 e0       	ldi	r25, 0x01	; 1
    131e:	ad b7       	in	r26, 0x3d	; 61
    1320:	be b7       	in	r27, 0x3e	; 62
    1322:	12 96       	adiw	r26, 0x02	; 2
    1324:	9c 93       	st	X, r25
    1326:	8e 93       	st	-X, r24
    1328:	11 97       	sbiw	r26, 0x01	; 1
    132a:	80 91 90 04 	lds	r24, 0x0490
    132e:	82 83       	std	Z+2, r24	; 0x02
    1330:	13 82       	std	Z+3, r1	; 0x03
    1332:	80 91 8f 04 	lds	r24, 0x048F
    1336:	84 83       	std	Z+4, r24	; 0x04
    1338:	15 82       	std	Z+5, r1	; 0x05
    133a:	80 91 95 04 	lds	r24, 0x0495
    133e:	86 83       	std	Z+6, r24	; 0x06
    1340:	17 82       	std	Z+7, r1	; 0x07
    1342:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    1346:	ed b7       	in	r30, 0x3d	; 61
    1348:	fe b7       	in	r31, 0x3e	; 62
    134a:	38 96       	adiw	r30, 0x08	; 8
    134c:	0f b6       	in	r0, 0x3f	; 63
    134e:	f8 94       	cli
    1350:	fe bf       	out	0x3e, r31	; 62
    1352:	0f be       	out	0x3f, r0	; 63
    1354:	ed bf       	out	0x3d, r30	; 61
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	20 e0       	ldi	r18, 0x00	; 0
    1360:	30 e0       	ldi	r19, 0x00	; 0
    1362:	44 e8       	ldi	r20, 0x84	; 132
    1364:	51 e4       	ldi	r21, 0x41	; 65
    1366:	0f 2e       	mov	r0, r31
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	ef 2e       	mov	r14, r31
    136c:	f0 e0       	ldi	r31, 0x00	; 0
    136e:	ff 2e       	mov	r15, r31
    1370:	f0 e2       	ldi	r31, 0x20	; 32
    1372:	0f 2f       	mov	r16, r31
    1374:	f1 e4       	ldi	r31, 0x41	; 65
    1376:	1f 2f       	mov	r17, r31
    1378:	f0 2d       	mov	r31, r0
    137a:	57 01       	movw	r10, r14
    137c:	68 01       	movw	r12, r16
    137e:	88 24       	eor	r8, r8
    1380:	0e 94 57 13 	call	0x26ae	; 0x26ae <move_arc_stwt>
    1384:	12 c0       	rjmp	.+36     	; 0x13aa <moveWorld+0x258>
			break;
		default:
			LCD_printf("Whatz4?!");
    1386:	00 d0       	rcall	.+0      	; 0x1388 <moveWorld+0x236>
    1388:	8b eb       	ldi	r24, 0xBB	; 187
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	ad b7       	in	r26, 0x3d	; 61
    138e:	be b7       	in	r27, 0x3e	; 62
    1390:	12 96       	adiw	r26, 0x02	; 2
    1392:	9c 93       	st	X, r25
    1394:	8e 93       	st	-X, r24
    1396:	11 97       	sbiw	r26, 0x01	; 1
    1398:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    139c:	0f 90       	pop	r0
    139e:	0f 90       	pop	r0
    13a0:	82 e0       	ldi	r24, 0x02	; 2
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <STEPPER_stop>
    13a8:	ff cf       	rjmp	.-2      	; 0x13a8 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    13aa:	80 91 09 04 	lds	r24, 0x0409
    13ae:	80 93 0e 04 	sts	0x040E, r24
	return 1;
}
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	df 90       	pop	r13
    13be:	cf 90       	pop	r12
    13c0:	bf 90       	pop	r11
    13c2:	af 90       	pop	r10
    13c4:	8f 90       	pop	r8
    13c6:	08 95       	ret

000013c8 <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    13c8:	0e 94 a9 08 	call	0x1152	; 0x1152 <moveWorld>
    13cc:	88 23       	and	r24, r24
    13ce:	69 f0       	breq	.+26     	; 0x13ea <moveBehavior+0x22>
		Ierror = 0;
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	a0 e0       	ldi	r26, 0x00	; 0
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	80 93 8b 04 	sts	0x048B, r24
    13dc:	90 93 8c 04 	sts	0x048C, r25
    13e0:	a0 93 8d 04 	sts	0x048D, r26
    13e4:	b0 93 8e 04 	sts	0x048E, r27
    13e8:	81 e0       	ldi	r24, 0x01	; 1
		return 1; 
	}
	return 0;	
}
    13ea:	08 95       	ret

000013ec <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    13ec:	ff 92       	push	r15
    13ee:	0f 93       	push	r16
    13f0:	1f 93       	push	r17
    13f2:	cf 93       	push	r28
    13f4:	df 93       	push	r29
    13f6:	ff 24       	eor	r15, r15
    13f8:	f3 94       	inc	r15
    13fa:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    13fc:	c4 ec       	ldi	r28, 0xC4	; 196
    13fe:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    1400:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    1404:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    1406:	81 30       	cpi	r24, 0x01	; 1
    1408:	21 f0       	breq	.+8      	; 0x1412 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    140a:	82 30       	cpi	r24, 0x02	; 2
    140c:	11 f0       	breq	.+4      	; 0x1412 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    140e:	83 30       	cpi	r24, 0x03	; 3
    1410:	39 f4       	brne	.+14     	; 0x1420 <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    1412:	e1 2f       	mov	r30, r17
    1414:	f0 e0       	ldi	r31, 0x00	; 0
    1416:	ee 5e       	subi	r30, 0xEE	; 238
    1418:	fa 4f       	sbci	r31, 0xFA	; 250
    141a:	00 83       	st	Z, r16
			i++;
    141c:	1f 5f       	subi	r17, 0xFF	; 255
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <movesInput+0x38>
		}

		if (btnHolder != 0){
    1420:	88 23       	and	r24, r24
    1422:	21 f1       	breq	.+72     	; 0x146c <movesInput+0x80>
			LCD_clear();
    1424:	0e 94 cf 18 	call	0x319e	; 0x319e <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    1428:	8d b7       	in	r24, 0x3d	; 61
    142a:	9e b7       	in	r25, 0x3e	; 62
    142c:	08 97       	sbiw	r24, 0x08	; 8
    142e:	0f b6       	in	r0, 0x3f	; 63
    1430:	f8 94       	cli
    1432:	9e bf       	out	0x3e, r25	; 62
    1434:	0f be       	out	0x3f, r0	; 63
    1436:	8d bf       	out	0x3d, r24	; 61
    1438:	ed b7       	in	r30, 0x3d	; 61
    143a:	fe b7       	in	r31, 0x3e	; 62
    143c:	31 96       	adiw	r30, 0x01	; 1
    143e:	ad b7       	in	r26, 0x3d	; 61
    1440:	be b7       	in	r27, 0x3e	; 62
    1442:	12 96       	adiw	r26, 0x02	; 2
    1444:	dc 93       	st	X, r29
    1446:	ce 93       	st	-X, r28
    1448:	11 97       	sbiw	r26, 0x01	; 1
    144a:	f2 82       	std	Z+2, r15	; 0x02
    144c:	13 82       	std	Z+3, r1	; 0x03
    144e:	04 83       	std	Z+4, r16	; 0x04
    1450:	15 82       	std	Z+5, r1	; 0x05
    1452:	16 83       	std	Z+6, r17	; 0x06
    1454:	17 82       	std	Z+7, r1	; 0x07
    1456:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
    145a:	f0 2e       	mov	r15, r16
    145c:	8d b7       	in	r24, 0x3d	; 61
    145e:	9e b7       	in	r25, 0x3e	; 62
    1460:	08 96       	adiw	r24, 0x08	; 8
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	9e bf       	out	0x3e, r25	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    146c:	84 ef       	ldi	r24, 0xF4	; 244
    146e:	91 e0       	ldi	r25, 0x01	; 1
    1470:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    1474:	1b 30       	cpi	r17, 0x0B	; 11
    1476:	20 f2       	brcs	.-120    	; 0x1400 <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    1478:	1f 5f       	subi	r17, 0xFF	; 255
    147a:	e1 2f       	mov	r30, r17
    147c:	f0 e0       	ldi	r31, 0x00	; 0
    147e:	ee 5e       	subi	r30, 0xEE	; 238
    1480:	fa 4f       	sbci	r31, 0xFA	; 250
    1482:	84 e0       	ldi	r24, 0x04	; 4
    1484:	80 83       	st	Z, r24
}
    1486:	df 91       	pop	r29
    1488:	cf 91       	pop	r28
    148a:	1f 91       	pop	r17
    148c:	0f 91       	pop	r16
    148e:	ff 90       	pop	r15
    1490:	08 95       	ret

00001492 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    1492:	1f 93       	push	r17
    1494:	cf 93       	push	r28
    1496:	df 93       	push	r29
    1498:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    149a:	c5 ef       	ldi	r28, 0xF5	; 245
    149c:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    149e:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	21 f4       	brne	.+8      	; 0x14ae <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    14a6:	80 91 34 06 	lds	r24, 0x0634
    14aa:	88 0f       	add	r24, r24
    14ac:	06 c0       	rjmp	.+12     	; 0x14ba <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    14ae:	82 30       	cpi	r24, 0x02	; 2
    14b0:	39 f4       	brne	.+14     	; 0x14c0 <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    14b2:	80 91 34 06 	lds	r24, 0x0634
    14b6:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    14b8:	8f 5f       	subi	r24, 0xFF	; 255
    14ba:	80 93 34 06 	sts	0x0634, r24
			i++;
    14be:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    14c0:	0e 94 cf 18 	call	0x319e	; 0x319e <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    14c4:	00 d0       	rcall	.+0      	; 0x14c6 <worldInput+0x34>
    14c6:	00 d0       	rcall	.+0      	; 0x14c8 <worldInput+0x36>
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <worldInput+0x38>
    14ca:	ed b7       	in	r30, 0x3d	; 61
    14cc:	fe b7       	in	r31, 0x3e	; 62
    14ce:	31 96       	adiw	r30, 0x01	; 1
    14d0:	ad b7       	in	r26, 0x3d	; 61
    14d2:	be b7       	in	r27, 0x3e	; 62
    14d4:	12 96       	adiw	r26, 0x02	; 2
    14d6:	dc 93       	st	X, r29
    14d8:	ce 93       	st	-X, r28
    14da:	11 97       	sbiw	r26, 0x01	; 1
    14dc:	80 91 34 06 	lds	r24, 0x0634
    14e0:	82 83       	std	Z+2, r24	; 0x02
    14e2:	13 82       	std	Z+3, r1	; 0x03
    14e4:	14 83       	std	Z+4, r17	; 0x04
    14e6:	15 82       	std	Z+5, r1	; 0x05
    14e8:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    14ec:	8d b7       	in	r24, 0x3d	; 61
    14ee:	9e b7       	in	r25, 0x3e	; 62
    14f0:	06 96       	adiw	r24, 0x06	; 6
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	f8 94       	cli
    14f6:	9e bf       	out	0x3e, r25	; 62
    14f8:	0f be       	out	0x3f, r0	; 63
    14fa:	8d bf       	out	0x3d, r24	; 61
    14fc:	84 ef       	ldi	r24, 0xF4	; 244
    14fe:	91 e0       	ldi	r25, 0x01	; 1
    1500:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    1504:	14 30       	cpi	r17, 0x04	; 4
    1506:	58 f2       	brcs	.-106    	; 0x149e <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    1508:	80 91 34 06 	lds	r24, 0x0634
    150c:	80 93 35 06 	sts	0x0635, r24
}
    1510:	df 91       	pop	r29
    1512:	cf 91       	pop	r28
    1514:	1f 91       	pop	r17
    1516:	08 95       	ret

00001518 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    1520:	cd e1       	ldi	r28, 0x1D	; 29
    1522:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    1524:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    1528:	81 30       	cpi	r24, 0x01	; 1
    152a:	21 f4       	brne	.+8      	; 0x1534 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    152c:	80 91 33 05 	lds	r24, 0x0533
    1530:	88 0f       	add	r24, r24
    1532:	06 c0       	rjmp	.+12     	; 0x1540 <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    1534:	82 30       	cpi	r24, 0x02	; 2
    1536:	41 f4       	brne	.+16     	; 0x1548 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    1538:	80 91 33 05 	lds	r24, 0x0533
    153c:	88 0f       	add	r24, r24
			currentOrientation += 1;
    153e:	8f 5f       	subi	r24, 0xFF	; 255
    1540:	80 93 33 05 	sts	0x0533, r24
			i++;
    1544:	1f 5f       	subi	r17, 0xFF	; 255
    1546:	02 c0       	rjmp	.+4      	; 0x154c <orientationInput+0x34>
		}

		if (btnHolder != 0){
    1548:	88 23       	and	r24, r24
    154a:	f1 f0       	breq	.+60     	; 0x1588 <orientationInput+0x70>
			LCD_clear();
    154c:	0e 94 cf 18 	call	0x319e	; 0x319e <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    1550:	00 d0       	rcall	.+0      	; 0x1552 <orientationInput+0x3a>
    1552:	00 d0       	rcall	.+0      	; 0x1554 <orientationInput+0x3c>
    1554:	00 d0       	rcall	.+0      	; 0x1556 <orientationInput+0x3e>
    1556:	ed b7       	in	r30, 0x3d	; 61
    1558:	fe b7       	in	r31, 0x3e	; 62
    155a:	31 96       	adiw	r30, 0x01	; 1
    155c:	ad b7       	in	r26, 0x3d	; 61
    155e:	be b7       	in	r27, 0x3e	; 62
    1560:	12 96       	adiw	r26, 0x02	; 2
    1562:	dc 93       	st	X, r29
    1564:	ce 93       	st	-X, r28
    1566:	11 97       	sbiw	r26, 0x01	; 1
    1568:	80 91 33 05 	lds	r24, 0x0533
    156c:	82 83       	std	Z+2, r24	; 0x02
    156e:	13 82       	std	Z+3, r1	; 0x03
    1570:	14 83       	std	Z+4, r17	; 0x04
    1572:	15 82       	std	Z+5, r1	; 0x05
    1574:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
    1578:	8d b7       	in	r24, 0x3d	; 61
    157a:	9e b7       	in	r25, 0x3e	; 62
    157c:	06 96       	adiw	r24, 0x06	; 6
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	9e bf       	out	0x3e, r25	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    1588:	84 ef       	ldi	r24, 0xF4	; 244
    158a:	91 e0       	ldi	r25, 0x01	; 1
    158c:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    1590:	12 30       	cpi	r17, 0x02	; 2
    1592:	40 f2       	brcs	.-112    	; 0x1524 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    1594:	0e 94 cf 18 	call	0x319e	; 0x319e <LCD_clear>
	switch(currentOrientation){
    1598:	80 91 33 05 	lds	r24, 0x0533
    159c:	81 30       	cpi	r24, 0x01	; 1
    159e:	51 f0       	breq	.+20     	; 0x15b4 <orientationInput+0x9c>
    15a0:	81 30       	cpi	r24, 0x01	; 1
    15a2:	28 f0       	brcs	.+10     	; 0x15ae <orientationInput+0x96>
    15a4:	82 30       	cpi	r24, 0x02	; 2
    15a6:	49 f0       	breq	.+18     	; 0x15ba <orientationInput+0xa2>
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	71 f4       	brne	.+28     	; 0x15c8 <orientationInput+0xb0>
    15ac:	09 c0       	rjmp	.+18     	; 0x15c0 <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    15ae:	8c e4       	ldi	r24, 0x4C	; 76
    15b0:	92 e0       	ldi	r25, 0x02	; 2
    15b2:	08 c0       	rjmp	.+16     	; 0x15c4 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    15b4:	8e e6       	ldi	r24, 0x6E	; 110
    15b6:	92 e0       	ldi	r25, 0x02	; 2
    15b8:	05 c0       	rjmp	.+10     	; 0x15c4 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    15ba:	8f e8       	ldi	r24, 0x8F	; 143
    15bc:	92 e0       	ldi	r25, 0x02	; 2
    15be:	02 c0       	rjmp	.+4      	; 0x15c4 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    15c0:	81 eb       	ldi	r24, 0xB1	; 177
    15c2:	92 e0       	ldi	r25, 0x02	; 2
    15c4:	0e 94 d1 35 	call	0x6ba2	; 0x6ba2 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    15c8:	80 91 33 05 	lds	r24, 0x0533
    15cc:	80 93 32 05 	sts	0x0532, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    15d0:	84 ef       	ldi	r24, 0xF4	; 244
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TMRSRVC_delay>
}
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	08 95       	ret

000015e0 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    15e0:	cf 92       	push	r12
    15e2:	df 92       	push	r13
    15e4:	ef 92       	push	r14
    15e6:	ff 92       	push	r15
    15e8:	0f 93       	push	r16
    15ea:	1f 93       	push	r17
    15ec:	df 93       	push	r29
    15ee:	cf 93       	push	r28
    15f0:	0f 92       	push	r0
    15f2:	cd b7       	in	r28, 0x3d	; 61
    15f4:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    15f6:	80 91 34 06 	lds	r24, 0x0634
    15fa:	f8 2e       	mov	r15, r24
    15fc:	f6 94       	lsr	r15
    15fe:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    1600:	98 2f       	mov	r25, r24
    1602:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    1604:	00 91 33 05 	lds	r16, 0x0533
    1608:	cc 24       	eor	r12, r12
    160a:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    160c:	f6 01       	movw	r30, r12
    160e:	ee 5e       	subi	r30, 0xEE	; 238
    1610:	fa 4f       	sbci	r31, 0xFA	; 250
    1612:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    1614:	ef 2d       	mov	r30, r15
    1616:	f0 e0       	ldi	r31, 0x00	; 0
    1618:	ee 0f       	add	r30, r30
    161a:	ff 1f       	adc	r31, r31
    161c:	ee 0f       	add	r30, r30
    161e:	ff 1f       	adc	r31, r31
    1620:	e9 0f       	add	r30, r25
    1622:	f1 1d       	adc	r31, r1
    1624:	ee 5d       	subi	r30, 0xDE	; 222
    1626:	fa 4f       	sbci	r31, 0xFA	; 250
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    1628:	80 81       	ld	r24, Z
    162a:	60 2f       	mov	r22, r16
    162c:	41 e0       	ldi	r20, 0x01	; 1
    162e:	99 83       	std	Y+1, r25	; 0x01
    1630:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    1634:	f6 01       	movw	r30, r12
    1636:	e7 54       	subi	r30, 0x47	; 71
    1638:	f9 4f       	sbci	r31, 0xF9	; 249
    163a:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    163c:	99 81       	ldd	r25, Y+1	; 0x01
    163e:	12 30       	cpi	r17, 0x02	; 2
    1640:	89 f4       	brne	.+34     	; 0x1664 <getGateways+0x84>
			switch(curOrient){
    1642:	01 30       	cpi	r16, 0x01	; 1
    1644:	49 f0       	breq	.+18     	; 0x1658 <getGateways+0x78>
    1646:	01 30       	cpi	r16, 0x01	; 1
    1648:	28 f0       	brcs	.+10     	; 0x1654 <getGateways+0x74>
    164a:	02 30       	cpi	r16, 0x02	; 2
    164c:	39 f0       	breq	.+14     	; 0x165c <getGateways+0x7c>
    164e:	03 30       	cpi	r16, 0x03	; 3
    1650:	89 f4       	brne	.+34     	; 0x1674 <getGateways+0x94>
    1652:	06 c0       	rjmp	.+12     	; 0x1660 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    1654:	fa 94       	dec	r15
    1656:	0e c0       	rjmp	.+28     	; 0x1674 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    1658:	9f 5f       	subi	r25, 0xFF	; 255
    165a:	0c c0       	rjmp	.+24     	; 0x1674 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    165c:	f3 94       	inc	r15
    165e:	0a c0       	rjmp	.+20     	; 0x1674 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    1660:	91 50       	subi	r25, 0x01	; 1
    1662:	08 c0       	rjmp	.+16     	; 0x1674 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    1664:	13 30       	cpi	r17, 0x03	; 3
    1666:	11 f4       	brne	.+4      	; 0x166c <getGateways+0x8c>
			curOrient++;
    1668:	0f 5f       	subi	r16, 0xFF	; 255
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    166c:	11 30       	cpi	r17, 0x01	; 1
    166e:	11 f4       	brne	.+4      	; 0x1674 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    1670:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    1672:	03 70       	andi	r16, 0x03	; 3
    1674:	08 94       	sec
    1676:	c1 1c       	adc	r12, r1
    1678:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    167a:	8d e0       	ldi	r24, 0x0D	; 13
    167c:	c8 16       	cp	r12, r24
    167e:	d1 04       	cpc	r13, r1
    1680:	29 f6       	brne	.-118    	; 0x160c <getGateways+0x2c>
    1682:	cc 24       	eor	r12, r12
    1684:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    1686:	92 ed       	ldi	r25, 0xD2	; 210
    1688:	e9 2e       	mov	r14, r25
    168a:	92 e0       	ldi	r25, 0x02	; 2
    168c:	f9 2e       	mov	r15, r25
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    168e:	f6 01       	movw	r30, r12
    1690:	e7 54       	subi	r30, 0x47	; 71
    1692:	f9 4f       	sbci	r31, 0xF9	; 249
    1694:	00 81       	ld	r16, Z
		LCD_clear();
    1696:	0e 94 cf 18 	call	0x319e	; 0x319e <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    169a:	20 2f       	mov	r18, r16
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	ad b7       	in	r26, 0x3d	; 61
    16a0:	be b7       	in	r27, 0x3e	; 62
    16a2:	54 97       	sbiw	r26, 0x14	; 20
    16a4:	0f b6       	in	r0, 0x3f	; 63
    16a6:	f8 94       	cli
    16a8:	be bf       	out	0x3e, r27	; 62
    16aa:	0f be       	out	0x3f, r0	; 63
    16ac:	ad bf       	out	0x3d, r26	; 61
    16ae:	ed b7       	in	r30, 0x3d	; 61
    16b0:	fe b7       	in	r31, 0x3e	; 62
    16b2:	31 96       	adiw	r30, 0x01	; 1
    16b4:	12 96       	adiw	r26, 0x02	; 2
    16b6:	fc 92       	st	X, r15
    16b8:	ee 92       	st	-X, r14
    16ba:	11 97       	sbiw	r26, 0x01	; 1
    16bc:	d3 82       	std	Z+3, r13	; 0x03
    16be:	c2 82       	std	Z+2, r12	; 0x02
    16c0:	11 27       	eor	r17, r17
    16c2:	07 fd       	sbrc	r16, 7
    16c4:	10 95       	com	r17
    16c6:	00 27       	eor	r16, r16
    16c8:	11 0f       	add	r17, r17
    16ca:	00 1f       	adc	r16, r16
    16cc:	11 27       	eor	r17, r17
    16ce:	15 83       	std	Z+5, r17	; 0x05
    16d0:	04 83       	std	Z+4, r16	; 0x04
    16d2:	c9 01       	movw	r24, r18
    16d4:	b6 e0       	ldi	r27, 0x06	; 6
    16d6:	96 95       	lsr	r25
    16d8:	87 95       	ror	r24
    16da:	ba 95       	dec	r27
    16dc:	e1 f7       	brne	.-8      	; 0x16d6 <getGateways+0xf6>
    16de:	81 70       	andi	r24, 0x01	; 1
    16e0:	90 70       	andi	r25, 0x00	; 0
    16e2:	97 83       	std	Z+7, r25	; 0x07
    16e4:	86 83       	std	Z+6, r24	; 0x06
    16e6:	c9 01       	movw	r24, r18
    16e8:	a5 e0       	ldi	r26, 0x05	; 5
    16ea:	96 95       	lsr	r25
    16ec:	87 95       	ror	r24
    16ee:	aa 95       	dec	r26
    16f0:	e1 f7       	brne	.-8      	; 0x16ea <getGateways+0x10a>
    16f2:	81 70       	andi	r24, 0x01	; 1
    16f4:	90 70       	andi	r25, 0x00	; 0
    16f6:	91 87       	std	Z+9, r25	; 0x09
    16f8:	80 87       	std	Z+8, r24	; 0x08
    16fa:	c9 01       	movw	r24, r18
    16fc:	74 e0       	ldi	r23, 0x04	; 4
    16fe:	96 95       	lsr	r25
    1700:	87 95       	ror	r24
    1702:	7a 95       	dec	r23
    1704:	e1 f7       	brne	.-8      	; 0x16fe <getGateways+0x11e>
    1706:	81 70       	andi	r24, 0x01	; 1
    1708:	90 70       	andi	r25, 0x00	; 0
    170a:	93 87       	std	Z+11, r25	; 0x0b
    170c:	82 87       	std	Z+10, r24	; 0x0a
    170e:	c9 01       	movw	r24, r18
    1710:	63 e0       	ldi	r22, 0x03	; 3
    1712:	96 95       	lsr	r25
    1714:	87 95       	ror	r24
    1716:	6a 95       	dec	r22
    1718:	e1 f7       	brne	.-8      	; 0x1712 <getGateways+0x132>
    171a:	81 70       	andi	r24, 0x01	; 1
    171c:	90 70       	andi	r25, 0x00	; 0
    171e:	95 87       	std	Z+13, r25	; 0x0d
    1720:	84 87       	std	Z+12, r24	; 0x0c
    1722:	c9 01       	movw	r24, r18
    1724:	96 95       	lsr	r25
    1726:	87 95       	ror	r24
    1728:	96 95       	lsr	r25
    172a:	87 95       	ror	r24
    172c:	81 70       	andi	r24, 0x01	; 1
    172e:	90 70       	andi	r25, 0x00	; 0
    1730:	97 87       	std	Z+15, r25	; 0x0f
    1732:	86 87       	std	Z+14, r24	; 0x0e
    1734:	c9 01       	movw	r24, r18
    1736:	96 95       	lsr	r25
    1738:	87 95       	ror	r24
    173a:	81 70       	andi	r24, 0x01	; 1
    173c:	90 70       	andi	r25, 0x00	; 0
    173e:	91 8b       	std	Z+17, r25	; 0x11
    1740:	80 8b       	std	Z+16, r24	; 0x10
    1742:	21 70       	andi	r18, 0x01	; 1
    1744:	30 70       	andi	r19, 0x00	; 0
    1746:	33 8b       	std	Z+19, r19	; 0x13
    1748:	22 8b       	std	Z+18, r18	; 0x12
    174a:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
		TMRSRVC_delay(500);//wait 1/2 seconds
    174e:	ed b7       	in	r30, 0x3d	; 61
    1750:	fe b7       	in	r31, 0x3e	; 62
    1752:	74 96       	adiw	r30, 0x14	; 20
    1754:	0f b6       	in	r0, 0x3f	; 63
    1756:	f8 94       	cli
    1758:	fe bf       	out	0x3e, r31	; 62
    175a:	0f be       	out	0x3f, r0	; 63
    175c:	ed bf       	out	0x3d, r30	; 61
    175e:	84 ef       	ldi	r24, 0xF4	; 244
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TMRSRVC_delay>
    1766:	08 94       	sec
    1768:	c1 1c       	adc	r12, r1
    176a:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    176c:	fd e0       	ldi	r31, 0x0D	; 13
    176e:	cf 16       	cp	r12, r31
    1770:	d1 04       	cpc	r13, r1
    1772:	09 f0       	breq	.+2      	; 0x1776 <getGateways+0x196>
    1774:	8c cf       	rjmp	.-232    	; 0x168e <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(500);//wait 1/2 seconds
	}
}
    1776:	0f 90       	pop	r0
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	1f 91       	pop	r17
    177e:	0f 91       	pop	r16
    1780:	ff 90       	pop	r15
    1782:	ef 90       	pop	r14
    1784:	df 90       	pop	r13
    1786:	cf 90       	pop	r12
    1788:	08 95       	ret

0000178a <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    178a:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    178c:	10 91 34 06 	lds	r17, 0x0634
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    1790:	80 91 8f 04 	lds	r24, 0x048F
    1794:	60 91 33 05 	lds	r22, 0x0533
    1798:	40 e0       	ldi	r20, 0x00	; 0
    179a:	0e 94 9a 0e 	call	0x1d34	; 0x1d34 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    179e:	e1 2f       	mov	r30, r17
    17a0:	e6 95       	lsr	r30
    17a2:	e6 95       	lsr	r30
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	ee 0f       	add	r30, r30
    17a8:	ff 1f       	adc	r31, r31
    17aa:	ee 0f       	add	r30, r30
    17ac:	ff 1f       	adc	r31, r31
    17ae:	13 70       	andi	r17, 0x03	; 3
    17b0:	e1 0f       	add	r30, r17
    17b2:	f1 1d       	adc	r31, r1
    17b4:	ee 5d       	subi	r30, 0xDE	; 222
    17b6:	fa 4f       	sbci	r31, 0xFA	; 250
    17b8:	80 83       	st	Z, r24
}
    17ba:	1f 91       	pop	r17
    17bc:	08 95       	ret

000017be <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    17be:	8f 92       	push	r8
    17c0:	af 92       	push	r10
    17c2:	bf 92       	push	r11
    17c4:	cf 92       	push	r12
    17c6:	df 92       	push	r13
    17c8:	ef 92       	push	r14
    17ca:	ff 92       	push	r15
    17cc:	0f 93       	push	r16
    17ce:	1f 93       	push	r17
	switch(currentMove){
    17d0:	80 91 09 04 	lds	r24, 0x0409
    17d4:	82 30       	cpi	r24, 0x02	; 2
    17d6:	69 f0       	breq	.+26     	; 0x17f2 <moveMap+0x34>
    17d8:	83 30       	cpi	r24, 0x03	; 3
    17da:	b9 f0       	breq	.+46     	; 0x180a <moveMap+0x4c>
    17dc:	81 30       	cpi	r24, 0x01	; 1
    17de:	69 f5       	brne	.+90     	; 0x183a <moveMap+0x7c>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    17e0:	60 e0       	ldi	r22, 0x00	; 0
    17e2:	70 e0       	ldi	r23, 0x00	; 0
    17e4:	80 e0       	ldi	r24, 0x00	; 0
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	44 e8       	ldi	r20, 0x84	; 132
    17ee:	51 ec       	ldi	r21, 0xC1	; 193
    17f0:	14 c0       	rjmp	.+40     	; 0x181a <moveMap+0x5c>
			break;
		case MOVE_FORWARD:
			checkOdometry(1);
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	03 c0       	rjmp	.+6      	; 0x17fc <moveMap+0x3e>
			while(odometryFlag){
				moveWall();
    17f6:	0e 94 76 06 	call	0xcec	; 0xcec <moveWall>
				checkOdometry(0);
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <checkOdometry>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
			break;
		case MOVE_FORWARD:
			checkOdometry(1);
			while(odometryFlag){
    1800:	80 91 3c 06 	lds	r24, 0x063C
    1804:	88 23       	and	r24, r24
    1806:	b9 f7       	brne	.-18     	; 0x17f6 <moveMap+0x38>
    1808:	23 c0       	rjmp	.+70     	; 0x1850 <moveMap+0x92>
				moveWall();
				checkOdometry(0);
			}
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	90 e0       	ldi	r25, 0x00	; 0
    1812:	20 e0       	ldi	r18, 0x00	; 0
    1814:	30 e0       	ldi	r19, 0x00	; 0
    1816:	44 e8       	ldi	r20, 0x84	; 132
    1818:	51 e4       	ldi	r21, 0x41	; 65
    181a:	0f 2e       	mov	r0, r31
    181c:	f0 e0       	ldi	r31, 0x00	; 0
    181e:	ef 2e       	mov	r14, r31
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	ff 2e       	mov	r15, r31
    1824:	f0 e2       	ldi	r31, 0x20	; 32
    1826:	0f 2f       	mov	r16, r31
    1828:	f1 e4       	ldi	r31, 0x41	; 65
    182a:	1f 2f       	mov	r17, r31
    182c:	f0 2d       	mov	r31, r0
    182e:	57 01       	movw	r10, r14
    1830:	68 01       	movw	r12, r16
    1832:	88 24       	eor	r8, r8
    1834:	0e 94 57 13 	call	0x26ae	; 0x26ae <move_arc_stwt>
    1838:	0b c0       	rjmp	.+22     	; 0x1850 <moveMap+0x92>
			break;
		default:
			LCD_printf("Whatz2?!");
    183a:	00 d0       	rcall	.+0      	; 0x183c <moveMap+0x7e>
    183c:	84 ef       	ldi	r24, 0xF4	; 244
    183e:	92 e0       	ldi	r25, 0x02	; 2
    1840:	ed b7       	in	r30, 0x3d	; 61
    1842:	fe b7       	in	r31, 0x3e	; 62
    1844:	92 83       	std	Z+2, r25	; 0x02
    1846:	81 83       	std	Z+1, r24	; 0x01
    1848:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
			break;
	}
}
    1850:	1f 91       	pop	r17
    1852:	0f 91       	pop	r16
    1854:	ff 90       	pop	r15
    1856:	ef 90       	pop	r14
    1858:	df 90       	pop	r13
    185a:	cf 90       	pop	r12
    185c:	bf 90       	pop	r11
    185e:	af 90       	pop	r10
    1860:	8f 90       	pop	r8
    1862:	08 95       	ret

00001864 <CBOT_main>:
********************************************************************/

void CBOT_main( void )
{
	// initialize the robot
	initializeRobot();
    1864:	0e 94 0f 18 	call	0x301e	; 0x301e <initializeRobot>
	
	odometryTrigger = WORLD_RESOLUTION_SIZE;
    1868:	88 e4       	ldi	r24, 0x48	; 72
    186a:	91 ee       	ldi	r25, 0xE1	; 225
    186c:	a6 e3       	ldi	r26, 0x36	; 54
    186e:	b2 e4       	ldi	r27, 0x42	; 66
    1870:	80 93 0e 05 	sts	0x050E, r24
    1874:	90 93 0f 05 	sts	0x050F, r25
    1878:	a0 93 10 05 	sts	0x0510, r26
    187c:	b0 93 11 05 	sts	0x0511, r27
	checkOdometry(1);
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	03 c0       	rjmp	.+6      	; 0x188a <CBOT_main+0x26>
	while(odometryFlag){
		moveWall();
    1884:	0e 94 76 06 	call	0xcec	; 0xcec <moveWall>
		checkOdometry(0);
    1888:	80 e0       	ldi	r24, 0x00	; 0
    188a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <checkOdometry>
	// initialize the robot
	initializeRobot();
	
	odometryTrigger = WORLD_RESOLUTION_SIZE;
	checkOdometry(1);
	while(odometryFlag){
    188e:	80 91 3c 06 	lds	r24, 0x063C
    1892:	88 23       	and	r24, r24
    1894:	b9 f7       	brne	.-18     	; 0x1884 <CBOT_main+0x20>
		moveWall();
		checkOdometry(0);
	}
	
	LCD_clear();
    1896:	0e 94 cf 18 	call	0x319e	; 0x319e <LCD_clear>
	LCD_printf("LOLZ\nI'm done!");
    189a:	00 d0       	rcall	.+0      	; 0x189c <CBOT_main+0x38>
    189c:	8d ef       	ldi	r24, 0xFD	; 253
    189e:	92 e0       	ldi	r25, 0x02	; 2
    18a0:	ed b7       	in	r30, 0x3d	; 61
    18a2:	fe b7       	in	r31, 0x3e	; 62
    18a4:	92 83       	std	Z+2, r25	; 0x02
    18a6:	81 83       	std	Z+1, r24	; 0x01
    18a8:	0e 94 bf 35 	call	0x6b7e	; 0x6b7e <printf>
	TMRSRVC_delay(3000);//wait 3 seconds
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	88 eb       	ldi	r24, 0xB8	; 184
    18b2:	9b e0       	ldi	r25, 0x0B	; 11
    18b4:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TMRSRVC_delay>
    18b8:	ff cf       	rjmp	.-2      	; 0x18b8 <CBOT_main+0x54>

000018ba <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
    18ba:	1f 93       	push	r17
    18bc:	18 2f       	mov	r17, r24
	// Update the avrage 
	float odometry = ((odometryStepL + odometryStepR)/2.0)*D_STEP;
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	if((odometry > odometryTrigger)||(reset))
    18be:	60 91 ca 06 	lds	r22, 0x06CA
    18c2:	70 91 cb 06 	lds	r23, 0x06CB
    18c6:	80 91 cc 06 	lds	r24, 0x06CC
    18ca:	90 91 cd 06 	lds	r25, 0x06CD
    18ce:	20 91 0a 04 	lds	r18, 0x040A
    18d2:	30 91 0b 04 	lds	r19, 0x040B
    18d6:	40 91 0c 04 	lds	r20, 0x040C
    18da:	50 91 0d 04 	lds	r21, 0x040D
    18de:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	5f e3       	ldi	r21, 0x3F	; 63
    18ea:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    18ee:	2c ed       	ldi	r18, 0xDC	; 220
    18f0:	38 eb       	ldi	r19, 0xB8	; 184
    18f2:	48 e0       	ldi	r20, 0x08	; 8
    18f4:	5e e3       	ldi	r21, 0x3E	; 62
    18f6:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    18fa:	20 91 0e 05 	lds	r18, 0x050E
    18fe:	30 91 0f 05 	lds	r19, 0x050F
    1902:	40 91 10 05 	lds	r20, 0x0510
    1906:	50 91 11 05 	lds	r21, 0x0511
    190a:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <__gesf2>
    190e:	18 16       	cp	r1, r24
    1910:	14 f0       	brlt	.+4      	; 0x1916 <checkOdometry+0x5c>
    1912:	11 23       	and	r17, r17
    1914:	b9 f0       	breq	.+46     	; 0x1944 <checkOdometry+0x8a>
	{
		odometryFlag = 1;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	80 93 3c 06 	sts	0x063C, r24
		odometryStepL = 0;
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a0 e0       	ldi	r26, 0x00	; 0
    1922:	b0 e0       	ldi	r27, 0x00	; 0
    1924:	80 93 ca 06 	sts	0x06CA, r24
    1928:	90 93 cb 06 	sts	0x06CB, r25
    192c:	a0 93 cc 06 	sts	0x06CC, r26
    1930:	b0 93 cd 06 	sts	0x06CD, r27
		odometryStepR = 0;
    1934:	80 93 0a 04 	sts	0x040A, r24
    1938:	90 93 0b 04 	sts	0x040B, r25
    193c:	a0 93 0c 04 	sts	0x040C, r26
    1940:	b0 93 0d 04 	sts	0x040D, r27
	}
}
    1944:	1f 91       	pop	r17
    1946:	08 95       	ret

00001948 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
    1948:	2f 92       	push	r2
    194a:	3f 92       	push	r3
    194c:	4f 92       	push	r4
    194e:	5f 92       	push	r5
    1950:	6f 92       	push	r6
    1952:	7f 92       	push	r7
    1954:	8f 92       	push	r8
    1956:	9f 92       	push	r9
    1958:	af 92       	push	r10
    195a:	bf 92       	push	r11
    195c:	cf 92       	push	r12
    195e:	df 92       	push	r13
    1960:	ef 92       	push	r14
    1962:	ff 92       	push	r15
    1964:	0f 93       	push	r16
    1966:	1f 93       	push	r17
    1968:	df 93       	push	r29
    196a:	cf 93       	push	r28
    196c:	cd b7       	in	r28, 0x3d	; 61
    196e:	de b7       	in	r29, 0x3e	; 62
    1970:	64 97       	sbiw	r28, 0x14	; 20
    1972:	0f b6       	in	r0, 0x3f	; 63
    1974:	f8 94       	cli
    1976:	de bf       	out	0x3e, r29	; 62
    1978:	0f be       	out	0x3f, r0	; 63
    197a:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
    197c:	88 23       	and	r24, r24
    197e:	39 f5       	brne	.+78     	; 0x19ce <prefilter+0x86>
    1980:	8f e7       	ldi	r24, 0x7F	; 127
    1982:	94 e0       	ldi	r25, 0x04	; 4
    1984:	9c 8b       	std	Y+20, r25	; 0x14
    1986:	8b 8b       	std	Y+19, r24	; 0x13
    1988:	a1 eb       	ldi	r26, 0xB1	; 177
    198a:	b6 e0       	ldi	r27, 0x06	; 6
    198c:	be 83       	std	Y+6, r27	; 0x06
    198e:	ad 83       	std	Y+5, r26	; 0x05
    1990:	e8 ea       	ldi	r30, 0xA8	; 168
    1992:	f5 e0       	ldi	r31, 0x05	; 5
    1994:	fc 83       	std	Y+4, r31	; 0x04
    1996:	eb 83       	std	Y+3, r30	; 0x03
    1998:	86 e0       	ldi	r24, 0x06	; 6
    199a:	95 e0       	ldi	r25, 0x05	; 5
    199c:	9a 83       	std	Y+2, r25	; 0x02
    199e:	89 83       	std	Y+1, r24	; 0x01
    19a0:	0f 2e       	mov	r0, r31
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	2f 2e       	mov	r2, r31
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	3f 2e       	mov	r3, r31
    19aa:	f0 e0       	ldi	r31, 0x00	; 0
    19ac:	4f 2e       	mov	r4, r31
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	5f 2e       	mov	r5, r31
    19b2:	f0 2d       	mov	r31, r0
    19b4:	2f 86       	std	Y+15, r2	; 0x0f
    19b6:	38 8a       	std	Y+16, r3	; 0x10
    19b8:	49 8a       	std	Y+17, r4	; 0x11
    19ba:	5a 8a       	std	Y+18, r5	; 0x12
    19bc:	2b 86       	std	Y+11, r2	; 0x0b
    19be:	3c 86       	std	Y+12, r3	; 0x0c
    19c0:	4d 86       	std	Y+13, r4	; 0x0d
    19c2:	5e 86       	std	Y+14, r5	; 0x0e
    19c4:	2f 82       	std	Y+7, r2	; 0x07
    19c6:	38 86       	std	Y+8, r3	; 0x08
    19c8:	49 86       	std	Y+9, r4	; 0x09
    19ca:	5a 86       	std	Y+10, r5	; 0x0a
    19cc:	43 c0       	rjmp	.+134    	; 0x1a54 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    19ce:	a0 90 38 06 	lds	r10, 0x0638
    19d2:	b0 90 39 06 	lds	r11, 0x0639
    19d6:	c0 90 3a 06 	lds	r12, 0x063A
    19da:	d0 90 3b 06 	lds	r13, 0x063B
			rtIR_old[i] = rtIR;
    19de:	e0 90 3d 06 	lds	r14, 0x063D
    19e2:	f0 90 3e 06 	lds	r15, 0x063E
    19e6:	00 91 3f 06 	lds	r16, 0x063F
    19ea:	10 91 40 06 	lds	r17, 0x0640
			ftIR_old[i] = ftIR;
    19ee:	20 90 87 04 	lds	r2, 0x0487
    19f2:	30 90 88 04 	lds	r3, 0x0488
    19f6:	40 90 89 04 	lds	r4, 0x0489
    19fa:	50 90 8a 04 	lds	r5, 0x048A
			bkIR_old[i] = bkIR;
    19fe:	20 91 91 04 	lds	r18, 0x0491
    1a02:	30 91 92 04 	lds	r19, 0x0492
    1a06:	40 91 93 04 	lds	r20, 0x0493
    1a0a:	50 91 94 04 	lds	r21, 0x0494
    1a0e:	80 e0       	ldi	r24, 0x00	; 0
    1a10:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
    1a12:	fc 01       	movw	r30, r24
    1a14:	e1 5f       	subi	r30, 0xF1	; 241
    1a16:	fb 4f       	sbci	r31, 0xFB	; 251
    1a18:	a0 82       	st	Z, r10
    1a1a:	b1 82       	std	Z+1, r11	; 0x01
    1a1c:	c2 82       	std	Z+2, r12	; 0x02
    1a1e:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
    1a20:	fc 01       	movw	r30, r24
    1a22:	ef 5b       	subi	r30, 0xBF	; 191
    1a24:	f9 4f       	sbci	r31, 0xF9	; 249
    1a26:	e0 82       	st	Z, r14
    1a28:	f1 82       	std	Z+1, r15	; 0x01
    1a2a:	02 83       	std	Z+2, r16	; 0x02
    1a2c:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
    1a2e:	fc 01       	movw	r30, r24
    1a30:	e8 5c       	subi	r30, 0xC8	; 200
    1a32:	fa 4f       	sbci	r31, 0xFA	; 250
    1a34:	20 82       	st	Z, r2
    1a36:	31 82       	std	Z+1, r3	; 0x01
    1a38:	42 82       	std	Z+2, r4	; 0x02
    1a3a:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	ea 56       	subi	r30, 0x6A	; 106
    1a40:	fb 4f       	sbci	r31, 0xFB	; 251
    1a42:	20 83       	st	Z, r18
    1a44:	31 83       	std	Z+1, r19	; 0x01
    1a46:	42 83       	std	Z+2, r20	; 0x02
    1a48:	53 83       	std	Z+3, r21	; 0x03
    1a4a:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
    1a4c:	88 37       	cpi	r24, 0x78	; 120
    1a4e:	91 05       	cpc	r25, r1
    1a50:	01 f7       	brne	.-64     	; 0x1a12 <prefilter+0xca>
    1a52:	96 cf       	rjmp	.-212    	; 0x1980 <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
    1a54:	ab 89       	ldd	r26, Y+19	; 0x13
    1a56:	bc 89       	ldd	r27, Y+20	; 0x14
    1a58:	2d 91       	ld	r18, X+
    1a5a:	3d 91       	ld	r19, X+
    1a5c:	4d 91       	ld	r20, X+
    1a5e:	5c 91       	ld	r21, X
    1a60:	13 97       	sbiw	r26, 0x03	; 3
    1a62:	fd 01       	movw	r30, r26
    1a64:	24 83       	std	Z+4, r18	; 0x04
    1a66:	35 83       	std	Z+5, r19	; 0x05
    1a68:	46 83       	std	Z+6, r20	; 0x06
    1a6a:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
    1a6c:	ad 81       	ldd	r26, Y+5	; 0x05
    1a6e:	be 81       	ldd	r27, Y+6	; 0x06
    1a70:	ed 90       	ld	r14, X+
    1a72:	fd 90       	ld	r15, X+
    1a74:	0d 91       	ld	r16, X+
    1a76:	1c 91       	ld	r17, X
    1a78:	13 97       	sbiw	r26, 0x03	; 3
    1a7a:	fd 01       	movw	r30, r26
    1a7c:	e4 82       	std	Z+4, r14	; 0x04
    1a7e:	f5 82       	std	Z+5, r15	; 0x05
    1a80:	06 83       	std	Z+6, r16	; 0x06
    1a82:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
    1a84:	ab 81       	ldd	r26, Y+3	; 0x03
    1a86:	bc 81       	ldd	r27, Y+4	; 0x04
    1a88:	ad 90       	ld	r10, X+
    1a8a:	bd 90       	ld	r11, X+
    1a8c:	cd 90       	ld	r12, X+
    1a8e:	dc 90       	ld	r13, X
    1a90:	13 97       	sbiw	r26, 0x03	; 3
    1a92:	fd 01       	movw	r30, r26
    1a94:	a4 82       	std	Z+4, r10	; 0x04
    1a96:	b5 82       	std	Z+5, r11	; 0x05
    1a98:	c6 82       	std	Z+6, r12	; 0x06
    1a9a:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
    1a9c:	a9 81       	ldd	r26, Y+1	; 0x01
    1a9e:	ba 81       	ldd	r27, Y+2	; 0x02
    1aa0:	6d 90       	ld	r6, X+
    1aa2:	7d 90       	ld	r7, X+
    1aa4:	8d 90       	ld	r8, X+
    1aa6:	9c 90       	ld	r9, X
    1aa8:	13 97       	sbiw	r26, 0x03	; 3
    1aaa:	fd 01       	movw	r30, r26
    1aac:	64 82       	std	Z+4, r6	; 0x04
    1aae:	75 82       	std	Z+5, r7	; 0x05
    1ab0:	86 82       	std	Z+6, r8	; 0x06
    1ab2:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
    1ab4:	c2 01       	movw	r24, r4
    1ab6:	b1 01       	movw	r22, r2
    1ab8:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    1abc:	1b 01       	movw	r2, r22
    1abe:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
    1ac0:	6f 85       	ldd	r22, Y+15	; 0x0f
    1ac2:	78 89       	ldd	r23, Y+16	; 0x10
    1ac4:	89 89       	ldd	r24, Y+17	; 0x11
    1ac6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ac8:	a8 01       	movw	r20, r16
    1aca:	97 01       	movw	r18, r14
    1acc:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    1ad0:	6f 87       	std	Y+15, r22	; 0x0f
    1ad2:	78 8b       	std	Y+16, r23	; 0x10
    1ad4:	89 8b       	std	Y+17, r24	; 0x11
    1ad6:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
    1ad8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ada:	7c 85       	ldd	r23, Y+12	; 0x0c
    1adc:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ade:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae0:	a6 01       	movw	r20, r12
    1ae2:	95 01       	movw	r18, r10
    1ae4:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    1ae8:	6b 87       	std	Y+11, r22	; 0x0b
    1aea:	7c 87       	std	Y+12, r23	; 0x0c
    1aec:	8d 87       	std	Y+13, r24	; 0x0d
    1aee:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
    1af0:	6f 81       	ldd	r22, Y+7	; 0x07
    1af2:	78 85       	ldd	r23, Y+8	; 0x08
    1af4:	89 85       	ldd	r24, Y+9	; 0x09
    1af6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1af8:	a4 01       	movw	r20, r8
    1afa:	93 01       	movw	r18, r6
    1afc:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    1b00:	6f 83       	std	Y+7, r22	; 0x07
    1b02:	78 87       	std	Y+8, r23	; 0x08
    1b04:	89 87       	std	Y+9, r24	; 0x09
    1b06:	9a 87       	std	Y+10, r25	; 0x0a
    1b08:	8b 89       	ldd	r24, Y+19	; 0x13
    1b0a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b0c:	04 97       	sbiw	r24, 0x04	; 4
    1b0e:	9c 8b       	std	Y+20, r25	; 0x14
    1b10:	8b 8b       	std	Y+19, r24	; 0x13
    1b12:	ad 81       	ldd	r26, Y+5	; 0x05
    1b14:	be 81       	ldd	r27, Y+6	; 0x06
    1b16:	14 97       	sbiw	r26, 0x04	; 4
    1b18:	be 83       	std	Y+6, r27	; 0x06
    1b1a:	ad 83       	std	Y+5, r26	; 0x05
    1b1c:	eb 81       	ldd	r30, Y+3	; 0x03
    1b1e:	fc 81       	ldd	r31, Y+4	; 0x04
    1b20:	34 97       	sbiw	r30, 0x04	; 4
    1b22:	fc 83       	std	Y+4, r31	; 0x04
    1b24:	eb 83       	std	Y+3, r30	; 0x03
    1b26:	89 81       	ldd	r24, Y+1	; 0x01
    1b28:	9a 81       	ldd	r25, Y+2	; 0x02
    1b2a:	04 97       	sbiw	r24, 0x04	; 4
    1b2c:	9a 83       	std	Y+2, r25	; 0x02
    1b2e:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
    1b30:	ab 89       	ldd	r26, Y+19	; 0x13
    1b32:	bc 89       	ldd	r27, Y+20	; 0x14
    1b34:	a7 50       	subi	r26, 0x07	; 7
    1b36:	b4 40       	sbci	r27, 0x04	; 4
    1b38:	09 f0       	breq	.+2      	; 0x1b3c <prefilter+0x1f4>
    1b3a:	8c cf       	rjmp	.-232    	; 0x1a54 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
    1b3c:	80 91 38 06 	lds	r24, 0x0638
    1b40:	90 91 39 06 	lds	r25, 0x0639
    1b44:	a0 91 3a 06 	lds	r26, 0x063A
    1b48:	b0 91 3b 06 	lds	r27, 0x063B
    1b4c:	eb 89       	ldd	r30, Y+19	; 0x13
    1b4e:	fc 89       	ldd	r31, Y+20	; 0x14
    1b50:	80 87       	std	Z+8, r24	; 0x08
    1b52:	91 87       	std	Z+9, r25	; 0x09
    1b54:	a2 87       	std	Z+10, r26	; 0x0a
    1b56:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
    1b58:	80 91 3d 06 	lds	r24, 0x063D
    1b5c:	90 91 3e 06 	lds	r25, 0x063E
    1b60:	a0 91 3f 06 	lds	r26, 0x063F
    1b64:	b0 91 40 06 	lds	r27, 0x0640
    1b68:	80 93 41 06 	sts	0x0641, r24
    1b6c:	90 93 42 06 	sts	0x0642, r25
    1b70:	a0 93 43 06 	sts	0x0643, r26
    1b74:	b0 93 44 06 	sts	0x0644, r27
	ftIR_old[0] = ftIR;
    1b78:	80 91 87 04 	lds	r24, 0x0487
    1b7c:	90 91 88 04 	lds	r25, 0x0488
    1b80:	a0 91 89 04 	lds	r26, 0x0489
    1b84:	b0 91 8a 04 	lds	r27, 0x048A
    1b88:	80 93 38 05 	sts	0x0538, r24
    1b8c:	90 93 39 05 	sts	0x0539, r25
    1b90:	a0 93 3a 05 	sts	0x053A, r26
    1b94:	b0 93 3b 05 	sts	0x053B, r27
	bkIR_old[0] = bkIR;
    1b98:	80 91 91 04 	lds	r24, 0x0491
    1b9c:	90 91 92 04 	lds	r25, 0x0492
    1ba0:	a0 91 93 04 	lds	r26, 0x0493
    1ba4:	b0 91 94 04 	lds	r27, 0x0494
    1ba8:	80 93 96 04 	sts	0x0496, r24
    1bac:	90 93 97 04 	sts	0x0497, r25
    1bb0:	a0 93 98 04 	sts	0x0498, r26
    1bb4:	b0 93 99 04 	sts	0x0499, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
    1bb8:	c2 01       	movw	r24, r4
    1bba:	b1 01       	movw	r22, r2
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 ef       	ldi	r20, 0xF0	; 240
    1bc2:	51 e4       	ldi	r21, 0x41	; 65
    1bc4:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    1bc8:	60 93 38 06 	sts	0x0638, r22
    1bcc:	70 93 39 06 	sts	0x0639, r23
    1bd0:	80 93 3a 06 	sts	0x063A, r24
    1bd4:	90 93 3b 06 	sts	0x063B, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
    1bd8:	6f 85       	ldd	r22, Y+15	; 0x0f
    1bda:	78 89       	ldd	r23, Y+16	; 0x10
    1bdc:	89 89       	ldd	r24, Y+17	; 0x11
    1bde:	9a 89       	ldd	r25, Y+18	; 0x12
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	40 ef       	ldi	r20, 0xF0	; 240
    1be6:	51 e4       	ldi	r21, 0x41	; 65
    1be8:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    1bec:	60 93 3d 06 	sts	0x063D, r22
    1bf0:	70 93 3e 06 	sts	0x063E, r23
    1bf4:	80 93 3f 06 	sts	0x063F, r24
    1bf8:	90 93 40 06 	sts	0x0640, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
    1bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c04:	20 e0       	ldi	r18, 0x00	; 0
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	40 ef       	ldi	r20, 0xF0	; 240
    1c0a:	51 e4       	ldi	r21, 0x41	; 65
    1c0c:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    1c10:	60 93 87 04 	sts	0x0487, r22
    1c14:	70 93 88 04 	sts	0x0488, r23
    1c18:	80 93 89 04 	sts	0x0489, r24
    1c1c:	90 93 8a 04 	sts	0x048A, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
    1c20:	6f 81       	ldd	r22, Y+7	; 0x07
    1c22:	78 85       	ldd	r23, Y+8	; 0x08
    1c24:	89 85       	ldd	r24, Y+9	; 0x09
    1c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	30 e0       	ldi	r19, 0x00	; 0
    1c2c:	40 ef       	ldi	r20, 0xF0	; 240
    1c2e:	51 e4       	ldi	r21, 0x41	; 65
    1c30:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    1c34:	60 93 91 04 	sts	0x0491, r22
    1c38:	70 93 92 04 	sts	0x0492, r23
    1c3c:	80 93 93 04 	sts	0x0493, r24
    1c40:	90 93 94 04 	sts	0x0494, r25
}
    1c44:	64 96       	adiw	r28, 0x14	; 20
    1c46:	0f b6       	in	r0, 0x3f	; 63
    1c48:	f8 94       	cli
    1c4a:	de bf       	out	0x3e, r29	; 62
    1c4c:	0f be       	out	0x3f, r0	; 63
    1c4e:	cd bf       	out	0x3d, r28	; 61
    1c50:	cf 91       	pop	r28
    1c52:	df 91       	pop	r29
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	ff 90       	pop	r15
    1c5a:	ef 90       	pop	r14
    1c5c:	df 90       	pop	r13
    1c5e:	cf 90       	pop	r12
    1c60:	bf 90       	pop	r11
    1c62:	af 90       	pop	r10
    1c64:	9f 90       	pop	r9
    1c66:	8f 90       	pop	r8
    1c68:	7f 90       	pop	r7
    1c6a:	6f 90       	pop	r6
    1c6c:	5f 90       	pop	r5
    1c6e:	4f 90       	pop	r4
    1c70:	3f 90       	pop	r3
    1c72:	2f 90       	pop	r2
    1c74:	08 95       	ret

00001c76 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
    1c76:	af 92       	push	r10
    1c78:	bf 92       	push	r11
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	7b 01       	movw	r14, r22
    1c88:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
    1c8a:	44 23       	and	r20, r20
    1c8c:	61 f0       	breq	.+24     	; 0x1ca6 <pidController+0x30>
		Ierror = 0;
    1c8e:	80 e0       	ldi	r24, 0x00	; 0
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	a0 e0       	ldi	r26, 0x00	; 0
    1c94:	b0 e0       	ldi	r27, 0x00	; 0
    1c96:	80 93 8b 04 	sts	0x048B, r24
    1c9a:	90 93 8c 04 	sts	0x048C, r25
    1c9e:	a0 93 8d 04 	sts	0x048D, r26
    1ca2:	b0 93 8e 04 	sts	0x048E, r27
	}
	// At the current error to the running sum
	Ierror += error;
    1ca6:	c8 01       	movw	r24, r16
    1ca8:	b7 01       	movw	r22, r14
    1caa:	20 91 8b 04 	lds	r18, 0x048B
    1cae:	30 91 8c 04 	lds	r19, 0x048C
    1cb2:	40 91 8d 04 	lds	r20, 0x048D
    1cb6:	50 91 8e 04 	lds	r21, 0x048E
    1cba:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    1cbe:	5b 01       	movw	r10, r22
    1cc0:	6c 01       	movw	r12, r24
    1cc2:	60 93 8b 04 	sts	0x048B, r22
    1cc6:	70 93 8c 04 	sts	0x048C, r23
    1cca:	80 93 8d 04 	sts	0x048D, r24
    1cce:	90 93 8e 04 	sts	0x048E, r25
    1cd2:	c8 01       	movw	r24, r16
    1cd4:	b7 01       	movw	r22, r14
    1cd6:	20 91 34 05 	lds	r18, 0x0534
    1cda:	30 91 35 05 	lds	r19, 0x0535
    1cde:	40 91 36 05 	lds	r20, 0x0536
    1ce2:	50 91 37 05 	lds	r21, 0x0537
    1ce6:	0e 94 86 2b 	call	0x570c	; 0x570c <__subsf3>
    1cea:	20 e0       	ldi	r18, 0x00	; 0
    1cec:	30 e0       	ldi	r19, 0x00	; 0
    1cee:	40 e0       	ldi	r20, 0x00	; 0
    1cf0:	50 e0       	ldi	r21, 0x00	; 0
    1cf2:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    1cf6:	9b 01       	movw	r18, r22
    1cf8:	ac 01       	movw	r20, r24
    1cfa:	c8 01       	movw	r24, r16
    1cfc:	b7 01       	movw	r22, r14
    1cfe:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    1d02:	7b 01       	movw	r14, r22
    1d04:	8c 01       	movw	r16, r24
    1d06:	c6 01       	movw	r24, r12
    1d08:	b5 01       	movw	r22, r10
    1d0a:	20 e0       	ldi	r18, 0x00	; 0
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	40 e0       	ldi	r20, 0x00	; 0
    1d10:	50 e0       	ldi	r21, 0x00	; 0
    1d12:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    1d16:	9b 01       	movw	r18, r22
    1d18:	ac 01       	movw	r20, r24
    1d1a:	c8 01       	movw	r24, r16
    1d1c:	b7 01       	movw	r22, r14
    1d1e:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
    1d22:	1f 91       	pop	r17
    1d24:	0f 91       	pop	r16
    1d26:	ff 90       	pop	r15
    1d28:	ef 90       	pop	r14
    1d2a:	df 90       	pop	r13
    1d2c:	cf 90       	pop	r12
    1d2e:	bf 90       	pop	r11
    1d30:	af 90       	pop	r10
    1d32:	08 95       	ret

00001d34 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1d34:	44 23       	and	r20, r20
    1d36:	81 f0       	breq	.+32     	; 0x1d58 <rotateCell+0x24>
    1d38:	06 c0       	rjmp	.+12     	; 0x1d46 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1d3a:	e8 2f       	mov	r30, r24
    1d3c:	f0 e0       	ldi	r31, 0x00	; 0
    1d3e:	e4 5f       	subi	r30, 0xF4	; 244
    1d40:	fc 4f       	sbci	r31, 0xFC	; 252
    1d42:	80 81       	ld	r24, Z
			orient--;
    1d44:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1d46:	66 23       	and	r22, r22
    1d48:	c1 f7       	brne	.-16     	; 0x1d3a <rotateCell+0x6>
    1d4a:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1d4c:	e8 2f       	mov	r30, r24
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	e4 5e       	subi	r30, 0xE4	; 228
    1d52:	fc 4f       	sbci	r31, 0xFC	; 252
    1d54:	80 81       	ld	r24, Z
			orient--;
    1d56:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1d58:	66 23       	and	r22, r22
    1d5a:	c1 f7       	brne	.-16     	; 0x1d4c <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1d5c:	08 95       	ret

00001d5e <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    1d5e:	8f 92       	push	r8
    1d60:	af 92       	push	r10
    1d62:	bf 92       	push	r11
    1d64:	cf 92       	push	r12
    1d66:	df 92       	push	r13
    1d68:	ef 92       	push	r14
    1d6a:	ff 92       	push	r15
    1d6c:	0f 93       	push	r16
    1d6e:	1f 93       	push	r17
    1d70:	cf 93       	push	r28
    1d72:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    1d74:	0e 94 e8 1a 	call	0x35d0	; 0x35d0 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    1d78:	67 2b       	or	r22, r23
    1d7a:	09 f0       	breq	.+2      	; 0x1d7e <moveWander+0x20>
    1d7c:	76 c0       	rjmp	.+236    	; 0x1e6a <moveWander+0x10c>
    1d7e:	89 2b       	or	r24, r25
    1d80:	09 f0       	breq	.+2      	; 0x1d84 <moveWander+0x26>
    1d82:	73 c0       	rjmp	.+230    	; 0x1e6a <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    1d84:	0e 94 96 34 	call	0x692c	; 0x692c <rand>
    1d88:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    1d8a:	0e 94 96 34 	call	0x692c	; 0x692c <rand>
    1d8e:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    1d90:	0e 94 96 34 	call	0x692c	; 0x692c <rand>
    1d94:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    1d96:	0e 94 96 34 	call	0x692c	; 0x692c <rand>
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	6a e0       	ldi	r22, 0x0A	; 10
    1d9e:	70 e0       	ldi	r23, 0x00	; 0
    1da0:	0e 94 c7 32 	call	0x658e	; 0x658e <__divmodhi4>
    1da4:	08 97       	sbiw	r24, 0x08	; 8
    1da6:	0c f0       	brlt	.+2      	; 0x1daa <moveWander+0x4c>
    1da8:	21 e0       	ldi	r18, 0x01	; 1
    1daa:	82 2e       	mov	r8, r18
    1dac:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    1dae:	c8 01       	movw	r24, r16
    1db0:	60 e9       	ldi	r22, 0x90	; 144
    1db2:	71 e0       	ldi	r23, 0x01	; 1
    1db4:	0e 94 c7 32 	call	0x658e	; 0x658e <__divmodhi4>
    1db8:	20 e9       	ldi	r18, 0x90	; 144
    1dba:	a2 2e       	mov	r10, r18
    1dbc:	21 e0       	ldi	r18, 0x01	; 1
    1dbe:	b2 2e       	mov	r11, r18
    1dc0:	a8 0e       	add	r10, r24
    1dc2:	b9 1e       	adc	r11, r25
    1dc4:	8d b7       	in	r24, 0x3d	; 61
    1dc6:	9e b7       	in	r25, 0x3e	; 62
    1dc8:	09 97       	sbiw	r24, 0x09	; 9
    1dca:	0f b6       	in	r0, 0x3f	; 63
    1dcc:	f8 94       	cli
    1dce:	9e bf       	out	0x3e, r25	; 62
    1dd0:	0f be       	out	0x3f, r0	; 63
    1dd2:	8d bf       	out	0x3d, r24	; 61
    1dd4:	0d b7       	in	r16, 0x3d	; 61
    1dd6:	1e b7       	in	r17, 0x3e	; 62
    1dd8:	0f 5f       	subi	r16, 0xFF	; 255
    1dda:	1f 4f       	sbci	r17, 0xFF	; 255
    1ddc:	c7 01       	movw	r24, r14
    1dde:	68 ec       	ldi	r22, 0xC8	; 200
    1de0:	70 e0       	ldi	r23, 0x00	; 0
    1de2:	0e 94 c7 32 	call	0x658e	; 0x658e <__divmodhi4>
    1de6:	88 53       	subi	r24, 0x38	; 56
    1de8:	9f 4f       	sbci	r25, 0xFF	; 255
    1dea:	aa 27       	eor	r26, r26
    1dec:	97 fd       	sbrc	r25, 7
    1dee:	a0 95       	com	r26
    1df0:	ba 2f       	mov	r27, r26
    1df2:	bc 01       	movw	r22, r24
    1df4:	cd 01       	movw	r24, r26
    1df6:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__floatsisf>
    1dfa:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    1dfe:	6b 01       	movw	r12, r22
    1e00:	7c 01       	movw	r14, r24
    1e02:	f8 01       	movw	r30, r16
    1e04:	b1 82       	std	Z+1, r11	; 0x01
    1e06:	a0 82       	st	Z, r10
    1e08:	ce 01       	movw	r24, r28
    1e0a:	68 ec       	ldi	r22, 0xC8	; 200
    1e0c:	70 e0       	ldi	r23, 0x00	; 0
    1e0e:	0e 94 c7 32 	call	0x658e	; 0x658e <__divmodhi4>
    1e12:	88 53       	subi	r24, 0x38	; 56
    1e14:	9f 4f       	sbci	r25, 0xFF	; 255
    1e16:	aa 27       	eor	r26, r26
    1e18:	97 fd       	sbrc	r25, 7
    1e1a:	a0 95       	com	r26
    1e1c:	ba 2f       	mov	r27, r26
    1e1e:	bc 01       	movw	r22, r24
    1e20:	cd 01       	movw	r24, r26
    1e22:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__floatsisf>
    1e26:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	73 83       	std	Z+3, r23	; 0x03
    1e2e:	62 83       	std	Z+2, r22	; 0x02
    1e30:	82 ec       	ldi	r24, 0xC2	; 194
    1e32:	91 e0       	ldi	r25, 0x01	; 1
    1e34:	95 83       	std	Z+5, r25	; 0x05
    1e36:	84 83       	std	Z+4, r24	; 0x04
    1e38:	16 82       	std	Z+6, r1	; 0x06
    1e3a:	10 86       	std	Z+8, r1	; 0x08
    1e3c:	17 82       	std	Z+7, r1	; 0x07
    1e3e:	81 e0       	ldi	r24, 0x01	; 1
    1e40:	62 e0       	ldi	r22, 0x02	; 2
    1e42:	48 2d       	mov	r20, r8
    1e44:	95 01       	movw	r18, r10
    1e46:	86 01       	movw	r16, r12
    1e48:	92 ec       	ldi	r25, 0xC2	; 194
    1e4a:	e9 2e       	mov	r14, r25
    1e4c:	91 e0       	ldi	r25, 0x01	; 1
    1e4e:	f9 2e       	mov	r15, r25
    1e50:	cc 24       	eor	r12, r12
    1e52:	aa 24       	eor	r10, r10
    1e54:	bb 24       	eor	r11, r11
    1e56:	0e 94 b0 1b 	call	0x3760	; 0x3760 <STEPPER_move>
    1e5a:	8d b7       	in	r24, 0x3d	; 61
    1e5c:	9e b7       	in	r25, 0x3e	; 62
    1e5e:	09 96       	adiw	r24, 0x09	; 9
    1e60:	0f b6       	in	r0, 0x3f	; 63
    1e62:	f8 94       	cli
    1e64:	9e bf       	out	0x3e, r25	; 62
    1e66:	0f be       	out	0x3f, r0	; 63
    1e68:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    1e6a:	81 e0       	ldi	r24, 0x01	; 1
    1e6c:	df 91       	pop	r29
    1e6e:	cf 91       	pop	r28
    1e70:	1f 91       	pop	r17
    1e72:	0f 91       	pop	r16
    1e74:	ff 90       	pop	r15
    1e76:	ef 90       	pop	r14
    1e78:	df 90       	pop	r13
    1e7a:	cf 90       	pop	r12
    1e7c:	bf 90       	pop	r11
    1e7e:	af 90       	pop	r10
    1e80:	8f 90       	pop	r8
    1e82:	08 95       	ret

00001e84 <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
    1e84:	2f 92       	push	r2
    1e86:	3f 92       	push	r3
    1e88:	4f 92       	push	r4
    1e8a:	5f 92       	push	r5
    1e8c:	6f 92       	push	r6
    1e8e:	7f 92       	push	r7
    1e90:	8f 92       	push	r8
    1e92:	9f 92       	push	r9
    1e94:	af 92       	push	r10
    1e96:	bf 92       	push	r11
    1e98:	cf 92       	push	r12
    1e9a:	df 92       	push	r13
    1e9c:	ef 92       	push	r14
    1e9e:	ff 92       	push	r15
    1ea0:	0f 93       	push	r16
    1ea2:	1f 93       	push	r17
    1ea4:	df 93       	push	r29
    1ea6:	cf 93       	push	r28
    1ea8:	00 d0       	rcall	.+0      	; 0x1eaa <moveAway+0x26>
    1eaa:	00 d0       	rcall	.+0      	; 0x1eac <moveAway+0x28>
    1eac:	cd b7       	in	r28, 0x3d	; 61
    1eae:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    1eb0:	60 90 87 04 	lds	r6, 0x0487
    1eb4:	70 90 88 04 	lds	r7, 0x0488
    1eb8:	80 90 89 04 	lds	r8, 0x0489
    1ebc:	90 90 8a 04 	lds	r9, 0x048A
    1ec0:	a0 90 91 04 	lds	r10, 0x0491
    1ec4:	b0 90 92 04 	lds	r11, 0x0492
    1ec8:	c0 90 93 04 	lds	r12, 0x0493
    1ecc:	d0 90 94 04 	lds	r13, 0x0494
	float moveX = rtIR - ltIR;
    1ed0:	e0 90 3d 06 	lds	r14, 0x063D
    1ed4:	f0 90 3e 06 	lds	r15, 0x063E
    1ed8:	00 91 3f 06 	lds	r16, 0x063F
    1edc:	10 91 40 06 	lds	r17, 0x0640
    1ee0:	80 91 38 06 	lds	r24, 0x0638
    1ee4:	90 91 39 06 	lds	r25, 0x0639
    1ee8:	a0 91 3a 06 	lds	r26, 0x063A
    1eec:	b0 91 3b 06 	lds	r27, 0x063B
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	9a 83       	std	Y+2, r25	; 0x02
    1ef4:	ab 83       	std	Y+3, r26	; 0x03
    1ef6:	bc 83       	std	Y+4, r27	; 0x04
    1ef8:	c8 01       	movw	r24, r16
    1efa:	b7 01       	movw	r22, r14
    1efc:	29 81       	ldd	r18, Y+1	; 0x01
    1efe:	3a 81       	ldd	r19, Y+2	; 0x02
    1f00:	4b 81       	ldd	r20, Y+3	; 0x03
    1f02:	5c 81       	ldd	r21, Y+4	; 0x04
    1f04:	0e 94 86 2b 	call	0x570c	; 0x570c <__subsf3>
    1f08:	1b 01       	movw	r2, r22
    1f0a:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
    1f0c:	c4 01       	movw	r24, r8
    1f0e:	b3 01       	movw	r22, r6
    1f10:	20 e0       	ldi	r18, 0x00	; 0
    1f12:	30 e0       	ldi	r19, 0x00	; 0
    1f14:	40 ee       	ldi	r20, 0xE0	; 224
    1f16:	50 e4       	ldi	r21, 0x40	; 64
    1f18:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
    1f1c:	87 fd       	sbrc	r24, 7
    1f1e:	0b c0       	rjmp	.+22     	; 0x1f36 <moveAway+0xb2>
    1f20:	c6 01       	movw	r24, r12
    1f22:	b5 01       	movw	r22, r10
    1f24:	20 e0       	ldi	r18, 0x00	; 0
    1f26:	30 e0       	ldi	r19, 0x00	; 0
    1f28:	40 ee       	ldi	r20, 0xE0	; 224
    1f2a:	50 e4       	ldi	r21, 0x40	; 64
    1f2c:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
    1f30:	88 23       	and	r24, r24
    1f32:	0c f0       	brlt	.+2      	; 0x1f36 <moveAway+0xb2>
    1f34:	68 c0       	rjmp	.+208    	; 0x2006 <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    1f36:	c4 01       	movw	r24, r8
    1f38:	b3 01       	movw	r22, r6
    1f3a:	a6 01       	movw	r20, r12
    1f3c:	95 01       	movw	r18, r10
    1f3e:	0e 94 86 2b 	call	0x570c	; 0x570c <__subsf3>
    1f42:	7b 01       	movw	r14, r22
    1f44:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
    1f46:	77 24       	eor	r7, r7
    1f48:	20 e0       	ldi	r18, 0x00	; 0
    1f4a:	30 e0       	ldi	r19, 0x00	; 0
    1f4c:	40 e0       	ldi	r20, 0x00	; 0
    1f4e:	50 e0       	ldi	r21, 0x00	; 0
    1f50:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <__gesf2>
    1f54:	88 23       	and	r24, r24
    1f56:	14 f0       	brlt	.+4      	; 0x1f5c <moveAway+0xd8>
    1f58:	77 24       	eor	r7, r7
    1f5a:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1f5c:	c8 01       	movw	r24, r16
    1f5e:	b7 01       	movw	r22, r14
    1f60:	0e 94 57 2c 	call	0x58ae	; 0x58ae <__fixsfsi>
    1f64:	9b 01       	movw	r18, r22
    1f66:	77 ff       	sbrs	r23, 7
    1f68:	03 c0       	rjmp	.+6      	; 0x1f70 <moveAway+0xec>
    1f6a:	30 95       	com	r19
    1f6c:	21 95       	neg	r18
    1f6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1f70:	b9 01       	movw	r22, r18
    1f72:	88 27       	eor	r24, r24
    1f74:	77 fd       	sbrc	r23, 7
    1f76:	80 95       	com	r24
    1f78:	98 2f       	mov	r25, r24
    1f7a:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__floatsisf>
    1f7e:	6b 01       	movw	r12, r22
    1f80:	7c 01       	movw	r14, r24
    1f82:	ad b7       	in	r26, 0x3d	; 61
    1f84:	be b7       	in	r27, 0x3e	; 62
    1f86:	19 97       	sbiw	r26, 0x09	; 9
    1f88:	0f b6       	in	r0, 0x3f	; 63
    1f8a:	f8 94       	cli
    1f8c:	be bf       	out	0x3e, r27	; 62
    1f8e:	0f be       	out	0x3f, r0	; 63
    1f90:	ad bf       	out	0x3d, r26	; 61
    1f92:	0d b7       	in	r16, 0x3d	; 61
    1f94:	1e b7       	in	r17, 0x3e	; 62
    1f96:	0f 5f       	subi	r16, 0xFF	; 255
    1f98:	1f 4f       	sbci	r17, 0xFF	; 255
    1f9a:	a2 01       	movw	r20, r4
    1f9c:	91 01       	movw	r18, r2
    1f9e:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    1fa2:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    1fa6:	4b 01       	movw	r8, r22
    1fa8:	5c 01       	movw	r10, r24
    1faa:	82 e3       	ldi	r24, 0x32	; 50
    1fac:	90 e0       	ldi	r25, 0x00	; 0
    1fae:	f8 01       	movw	r30, r16
    1fb0:	91 83       	std	Z+1, r25	; 0x01
    1fb2:	80 83       	st	Z, r24
    1fb4:	c7 01       	movw	r24, r14
    1fb6:	b6 01       	movw	r22, r12
    1fb8:	a2 01       	movw	r20, r4
    1fba:	91 01       	movw	r18, r2
    1fbc:	0e 94 86 2b 	call	0x570c	; 0x570c <__subsf3>
    1fc0:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    1fc4:	d8 01       	movw	r26, r16
    1fc6:	13 96       	adiw	r26, 0x03	; 3
    1fc8:	7c 93       	st	X, r23
    1fca:	6e 93       	st	-X, r22
    1fcc:	12 97       	sbiw	r26, 0x02	; 2
    1fce:	82 ec       	ldi	r24, 0xC2	; 194
    1fd0:	91 e0       	ldi	r25, 0x01	; 1
    1fd2:	15 96       	adiw	r26, 0x05	; 5
    1fd4:	9c 93       	st	X, r25
    1fd6:	8e 93       	st	-X, r24
    1fd8:	14 97       	sbiw	r26, 0x04	; 4
    1fda:	16 96       	adiw	r26, 0x06	; 6
    1fdc:	1c 92       	st	X, r1
    1fde:	16 97       	sbiw	r26, 0x06	; 6
    1fe0:	18 96       	adiw	r26, 0x08	; 8
    1fe2:	1c 92       	st	X, r1
    1fe4:	1e 92       	st	-X, r1
    1fe6:	17 97       	sbiw	r26, 0x07	; 7
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	62 e0       	ldi	r22, 0x02	; 2
    1fec:	47 2d       	mov	r20, r7
    1fee:	22 e3       	ldi	r18, 0x32	; 50
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	84 01       	movw	r16, r8
    1ff4:	e2 ec       	ldi	r30, 0xC2	; 194
    1ff6:	ee 2e       	mov	r14, r30
    1ff8:	e1 e0       	ldi	r30, 0x01	; 1
    1ffa:	fe 2e       	mov	r15, r30
    1ffc:	cc 24       	eor	r12, r12
    1ffe:	aa 24       	eor	r10, r10
    2000:	bb 24       	eor	r11, r11
    2002:	87 2c       	mov	r8, r7
    2004:	82 c0       	rjmp	.+260    	; 0x210a <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
    2006:	c8 01       	movw	r24, r16
    2008:	b7 01       	movw	r22, r14
    200a:	20 e0       	ldi	r18, 0x00	; 0
    200c:	30 e0       	ldi	r19, 0x00	; 0
    200e:	40 e2       	ldi	r20, 0x20	; 32
    2010:	51 e4       	ldi	r21, 0x41	; 65
    2012:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
    2016:	88 23       	and	r24, r24
    2018:	b4 f5       	brge	.+108    	; 0x2086 <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    201a:	c2 01       	movw	r24, r4
    201c:	b1 01       	movw	r22, r2
    201e:	0e 94 57 2c 	call	0x58ae	; 0x58ae <__fixsfsi>
    2022:	8b 01       	movw	r16, r22
    2024:	77 ff       	sbrs	r23, 7
    2026:	03 c0       	rjmp	.+6      	; 0x202e <moveAway+0x1aa>
    2028:	10 95       	com	r17
    202a:	01 95       	neg	r16
    202c:	1f 4f       	sbci	r17, 0xFF	; 255
    202e:	2d b7       	in	r18, 0x3d	; 61
    2030:	3e b7       	in	r19, 0x3e	; 62
    2032:	29 50       	subi	r18, 0x09	; 9
    2034:	30 40       	sbci	r19, 0x00	; 0
    2036:	0f b6       	in	r0, 0x3f	; 63
    2038:	f8 94       	cli
    203a:	3e bf       	out	0x3e, r19	; 62
    203c:	0f be       	out	0x3f, r0	; 63
    203e:	2d bf       	out	0x3d, r18	; 61
    2040:	ed b7       	in	r30, 0x3d	; 61
    2042:	fe b7       	in	r31, 0x3e	; 62
    2044:	31 96       	adiw	r30, 0x01	; 1
    2046:	88 ec       	ldi	r24, 0xC8	; 200
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	ad b7       	in	r26, 0x3d	; 61
    204c:	be b7       	in	r27, 0x3e	; 62
    204e:	12 96       	adiw	r26, 0x02	; 2
    2050:	9c 93       	st	X, r25
    2052:	8e 93       	st	-X, r24
    2054:	11 97       	sbiw	r26, 0x01	; 1
    2056:	13 83       	std	Z+3, r17	; 0x03
    2058:	02 83       	std	Z+2, r16	; 0x02
    205a:	82 ec       	ldi	r24, 0xC2	; 194
    205c:	91 e0       	ldi	r25, 0x01	; 1
    205e:	95 83       	std	Z+5, r25	; 0x05
    2060:	84 83       	std	Z+4, r24	; 0x04
    2062:	16 82       	std	Z+6, r1	; 0x06
    2064:	10 86       	std	Z+8, r1	; 0x08
    2066:	17 82       	std	Z+7, r1	; 0x07
    2068:	81 e0       	ldi	r24, 0x01	; 1
    206a:	62 e0       	ldi	r22, 0x02	; 2
    206c:	40 e0       	ldi	r20, 0x00	; 0
    206e:	28 ec       	ldi	r18, 0xC8	; 200
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	72 ec       	ldi	r23, 0xC2	; 194
    2074:	e7 2e       	mov	r14, r23
    2076:	71 e0       	ldi	r23, 0x01	; 1
    2078:	f7 2e       	mov	r15, r23
    207a:	cc 24       	eor	r12, r12
    207c:	aa 24       	eor	r10, r10
    207e:	bb 24       	eor	r11, r11
    2080:	88 24       	eor	r8, r8
    2082:	83 94       	inc	r8
    2084:	42 c0       	rjmp	.+132    	; 0x210a <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
    2086:	69 81       	ldd	r22, Y+1	; 0x01
    2088:	7a 81       	ldd	r23, Y+2	; 0x02
    208a:	8b 81       	ldd	r24, Y+3	; 0x03
    208c:	9c 81       	ldd	r25, Y+4	; 0x04
    208e:	20 e0       	ldi	r18, 0x00	; 0
    2090:	30 e0       	ldi	r19, 0x00	; 0
    2092:	40 e2       	ldi	r20, 0x20	; 32
    2094:	51 e4       	ldi	r21, 0x41	; 65
    2096:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
    209a:	87 fd       	sbrc	r24, 7
    209c:	02 c0       	rjmp	.+4      	; 0x20a2 <moveAway+0x21e>
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	3f c0       	rjmp	.+126    	; 0x2120 <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    20a2:	c2 01       	movw	r24, r4
    20a4:	b1 01       	movw	r22, r2
    20a6:	0e 94 57 2c 	call	0x58ae	; 0x58ae <__fixsfsi>
    20aa:	8b 01       	movw	r16, r22
    20ac:	77 ff       	sbrs	r23, 7
    20ae:	03 c0       	rjmp	.+6      	; 0x20b6 <moveAway+0x232>
    20b0:	10 95       	com	r17
    20b2:	01 95       	neg	r16
    20b4:	1f 4f       	sbci	r17, 0xFF	; 255
    20b6:	2d b7       	in	r18, 0x3d	; 61
    20b8:	3e b7       	in	r19, 0x3e	; 62
    20ba:	29 50       	subi	r18, 0x09	; 9
    20bc:	30 40       	sbci	r19, 0x00	; 0
    20be:	0f b6       	in	r0, 0x3f	; 63
    20c0:	f8 94       	cli
    20c2:	3e bf       	out	0x3e, r19	; 62
    20c4:	0f be       	out	0x3f, r0	; 63
    20c6:	2d bf       	out	0x3d, r18	; 61
    20c8:	ed b7       	in	r30, 0x3d	; 61
    20ca:	fe b7       	in	r31, 0x3e	; 62
    20cc:	31 96       	adiw	r30, 0x01	; 1
    20ce:	88 ec       	ldi	r24, 0xC8	; 200
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	ad b7       	in	r26, 0x3d	; 61
    20d4:	be b7       	in	r27, 0x3e	; 62
    20d6:	12 96       	adiw	r26, 0x02	; 2
    20d8:	9c 93       	st	X, r25
    20da:	8e 93       	st	-X, r24
    20dc:	11 97       	sbiw	r26, 0x01	; 1
    20de:	13 83       	std	Z+3, r17	; 0x03
    20e0:	02 83       	std	Z+2, r16	; 0x02
    20e2:	82 ec       	ldi	r24, 0xC2	; 194
    20e4:	91 e0       	ldi	r25, 0x01	; 1
    20e6:	95 83       	std	Z+5, r25	; 0x05
    20e8:	84 83       	std	Z+4, r24	; 0x04
    20ea:	16 82       	std	Z+6, r1	; 0x06
    20ec:	10 86       	std	Z+8, r1	; 0x08
    20ee:	17 82       	std	Z+7, r1	; 0x07
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	62 e0       	ldi	r22, 0x02	; 2
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	28 ec       	ldi	r18, 0xC8	; 200
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	52 ec       	ldi	r21, 0xC2	; 194
    20fc:	e5 2e       	mov	r14, r21
    20fe:	51 e0       	ldi	r21, 0x01	; 1
    2100:	f5 2e       	mov	r15, r21
    2102:	cc 24       	eor	r12, r12
    2104:	aa 24       	eor	r10, r10
    2106:	bb 24       	eor	r11, r11
    2108:	88 24       	eor	r8, r8
    210a:	0e 94 b0 1b 	call	0x3760	; 0x3760 <STEPPER_move>
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	ed b7       	in	r30, 0x3d	; 61
    2112:	fe b7       	in	r31, 0x3e	; 62
    2114:	39 96       	adiw	r30, 0x09	; 9
    2116:	0f b6       	in	r0, 0x3f	; 63
    2118:	f8 94       	cli
    211a:	fe bf       	out	0x3e, r31	; 62
    211c:	0f be       	out	0x3f, r0	; 63
    211e:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
    2120:	0f 90       	pop	r0
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	cf 91       	pop	r28
    212a:	df 91       	pop	r29
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	df 90       	pop	r13
    2136:	cf 90       	pop	r12
    2138:	bf 90       	pop	r11
    213a:	af 90       	pop	r10
    213c:	9f 90       	pop	r9
    213e:	8f 90       	pop	r8
    2140:	7f 90       	pop	r7
    2142:	6f 90       	pop	r6
    2144:	5f 90       	pop	r5
    2146:	4f 90       	pop	r4
    2148:	3f 90       	pop	r3
    214a:	2f 90       	pop	r2
    214c:	08 95       	ret

0000214e <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    214e:	2f 92       	push	r2
    2150:	3f 92       	push	r3
    2152:	4f 92       	push	r4
    2154:	5f 92       	push	r5
    2156:	6f 92       	push	r6
    2158:	7f 92       	push	r7
    215a:	8f 92       	push	r8
    215c:	9f 92       	push	r9
    215e:	af 92       	push	r10
    2160:	bf 92       	push	r11
    2162:	cf 92       	push	r12
    2164:	df 92       	push	r13
    2166:	ef 92       	push	r14
    2168:	ff 92       	push	r15
    216a:	0f 93       	push	r16
    216c:	1f 93       	push	r17
    216e:	df 93       	push	r29
    2170:	cf 93       	push	r28
    2172:	cd b7       	in	r28, 0x3d	; 61
    2174:	de b7       	in	r29, 0x3e	; 62
    2176:	a0 97       	sbiw	r28, 0x20	; 32
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	2b 01       	movw	r4, r22
    2184:	3c 01       	movw	r6, r24
    2186:	2d 83       	std	Y+5, r18	; 0x05
    2188:	3e 83       	std	Y+6, r19	; 0x06
    218a:	4f 83       	std	Y+7, r20	; 0x07
    218c:	58 87       	std	Y+8, r21	; 0x08
    218e:	e9 86       	std	Y+9, r14	; 0x09
    2190:	fa 86       	std	Y+10, r15	; 0x0a
    2192:	0b 87       	std	Y+11, r16	; 0x0b
    2194:	1c 87       	std	Y+12, r17	; 0x0c
    2196:	ad 86       	std	Y+13, r10	; 0x0d
    2198:	be 86       	std	Y+14, r11	; 0x0e
    219a:	cf 86       	std	Y+15, r12	; 0x0f
    219c:	d8 8a       	std	Y+16, r13	; 0x10
    219e:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    21a0:	33 24       	eor	r3, r3
    21a2:	ca 01       	movw	r24, r20
    21a4:	b9 01       	movw	r22, r18
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e0       	ldi	r20, 0x00	; 0
    21ac:	50 e0       	ldi	r21, 0x00	; 0
    21ae:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <__gesf2>
    21b2:	18 16       	cp	r1, r24
    21b4:	14 f4       	brge	.+4      	; 0x21ba <move_arc_stnb+0x6c>
    21b6:	33 24       	eor	r3, r3
    21b8:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    21ba:	6d 81       	ldd	r22, Y+5	; 0x05
    21bc:	7e 81       	ldd	r23, Y+6	; 0x06
    21be:	8f 81       	ldd	r24, Y+7	; 0x07
    21c0:	98 85       	ldd	r25, Y+8	; 0x08
    21c2:	2c ed       	ldi	r18, 0xDC	; 220
    21c4:	38 eb       	ldi	r19, 0xB8	; 184
    21c6:	48 e0       	ldi	r20, 0x08	; 8
    21c8:	5e e3       	ldi	r21, 0x3E	; 62
    21ca:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    21ce:	0e 94 57 2c 	call	0x58ae	; 0x58ae <__fixsfsi>
    21d2:	9b 01       	movw	r18, r22
    21d4:	77 ff       	sbrs	r23, 7
    21d6:	03 c0       	rjmp	.+6      	; 0x21de <move_arc_stnb+0x90>
    21d8:	30 95       	com	r19
    21da:	21 95       	neg	r18
    21dc:	3f 4f       	sbci	r19, 0xFF	; 255
    21de:	b9 01       	movw	r22, r18
    21e0:	88 27       	eor	r24, r24
    21e2:	77 fd       	sbrc	r23, 7
    21e4:	80 95       	com	r24
    21e6:	98 2f       	mov	r25, r24
    21e8:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__floatsisf>
    21ec:	69 83       	std	Y+1, r22	; 0x01
    21ee:	7a 83       	std	Y+2, r23	; 0x02
    21f0:	8b 83       	std	Y+3, r24	; 0x03
    21f2:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    21f4:	69 85       	ldd	r22, Y+9	; 0x09
    21f6:	7a 85       	ldd	r23, Y+10	; 0x0a
    21f8:	8b 85       	ldd	r24, Y+11	; 0x0b
    21fa:	9c 85       	ldd	r25, Y+12	; 0x0c
    21fc:	2c ed       	ldi	r18, 0xDC	; 220
    21fe:	38 eb       	ldi	r19, 0xB8	; 184
    2200:	48 e0       	ldi	r20, 0x08	; 8
    2202:	5e e3       	ldi	r21, 0x3E	; 62
    2204:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2208:	0e 94 57 2c 	call	0x58ae	; 0x58ae <__fixsfsi>
    220c:	9b 01       	movw	r18, r22
    220e:	77 ff       	sbrs	r23, 7
    2210:	03 c0       	rjmp	.+6      	; 0x2218 <move_arc_stnb+0xca>
    2212:	30 95       	com	r19
    2214:	21 95       	neg	r18
    2216:	3f 4f       	sbci	r19, 0xFF	; 255
    2218:	b9 01       	movw	r22, r18
    221a:	88 27       	eor	r24, r24
    221c:	77 fd       	sbrc	r23, 7
    221e:	80 95       	com	r24
    2220:	98 2f       	mov	r25, r24
    2222:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__floatsisf>
    2226:	4b 01       	movw	r8, r22
    2228:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    222a:	6d 85       	ldd	r22, Y+13	; 0x0d
    222c:	7e 85       	ldd	r23, Y+14	; 0x0e
    222e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2230:	98 89       	ldd	r25, Y+16	; 0x10
    2232:	2c ed       	ldi	r18, 0xDC	; 220
    2234:	38 eb       	ldi	r19, 0xB8	; 184
    2236:	48 e0       	ldi	r20, 0x08	; 8
    2238:	5e e3       	ldi	r21, 0x3E	; 62
    223a:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    223e:	0e 94 57 2c 	call	0x58ae	; 0x58ae <__fixsfsi>
    2242:	9b 01       	movw	r18, r22
    2244:	77 ff       	sbrs	r23, 7
    2246:	03 c0       	rjmp	.+6      	; 0x224e <move_arc_stnb+0x100>
    2248:	30 95       	com	r19
    224a:	21 95       	neg	r18
    224c:	3f 4f       	sbci	r19, 0xFF	; 255
    224e:	b9 01       	movw	r22, r18
    2250:	88 27       	eor	r24, r24
    2252:	77 fd       	sbrc	r23, 7
    2254:	80 95       	com	r24
    2256:	98 2f       	mov	r25, r24
    2258:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__floatsisf>
    225c:	6b 01       	movw	r12, r22
    225e:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    2260:	c3 01       	movw	r24, r6
    2262:	b2 01       	movw	r22, r4
    2264:	20 e0       	ldi	r18, 0x00	; 0
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	40 e0       	ldi	r20, 0x00	; 0
    226a:	5f e4       	ldi	r21, 0x4F	; 79
    226c:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
    2270:	88 23       	and	r24, r24
    2272:	a1 f5       	brne	.+104    	; 0x22dc <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    2274:	69 81       	ldd	r22, Y+1	; 0x01
    2276:	7a 81       	ldd	r23, Y+2	; 0x02
    2278:	8b 81       	ldd	r24, Y+3	; 0x03
    227a:	9c 81       	ldd	r25, Y+4	; 0x04
    227c:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2280:	2b 01       	movw	r4, r22
    2282:	3c 01       	movw	r6, r24
    2284:	c5 01       	movw	r24, r10
    2286:	b4 01       	movw	r22, r8
    2288:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    228c:	4b 01       	movw	r8, r22
    228e:	5c 01       	movw	r10, r24
    2290:	c7 01       	movw	r24, r14
    2292:	b6 01       	movw	r22, r12
    2294:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2298:	6b 01       	movw	r12, r22
    229a:	7c 01       	movw	r14, r24
    229c:	2d b7       	in	r18, 0x3d	; 61
    229e:	3e b7       	in	r19, 0x3e	; 62
    22a0:	29 50       	subi	r18, 0x09	; 9
    22a2:	30 40       	sbci	r19, 0x00	; 0
    22a4:	0f b6       	in	r0, 0x3f	; 63
    22a6:	f8 94       	cli
    22a8:	3e bf       	out	0x3e, r19	; 62
    22aa:	0f be       	out	0x3f, r0	; 63
    22ac:	2d bf       	out	0x3d, r18	; 61
    22ae:	ed b7       	in	r30, 0x3d	; 61
    22b0:	fe b7       	in	r31, 0x3e	; 62
    22b2:	31 96       	adiw	r30, 0x01	; 1
    22b4:	ad b7       	in	r26, 0x3d	; 61
    22b6:	be b7       	in	r27, 0x3e	; 62
    22b8:	12 96       	adiw	r26, 0x02	; 2
    22ba:	5c 92       	st	X, r5
    22bc:	4e 92       	st	-X, r4
    22be:	11 97       	sbiw	r26, 0x01	; 1
    22c0:	93 82       	std	Z+3, r9	; 0x03
    22c2:	82 82       	std	Z+2, r8	; 0x02
    22c4:	75 83       	std	Z+5, r23	; 0x05
    22c6:	64 83       	std	Z+4, r22	; 0x04
    22c8:	26 82       	std	Z+6, r2	; 0x06
    22ca:	10 86       	std	Z+8, r1	; 0x08
    22cc:	17 82       	std	Z+7, r1	; 0x07
    22ce:	81 e0       	ldi	r24, 0x01	; 1
    22d0:	62 e0       	ldi	r22, 0x02	; 2
    22d2:	43 2d       	mov	r20, r3
    22d4:	92 01       	movw	r18, r4
    22d6:	84 01       	movw	r16, r8
    22d8:	76 01       	movw	r14, r12
    22da:	c1 c1       	rjmp	.+898    	; 0x265e <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    22dc:	c3 01       	movw	r24, r6
    22de:	b2 01       	movw	r22, r4
    22e0:	20 e0       	ldi	r18, 0x00	; 0
    22e2:	30 e0       	ldi	r19, 0x00	; 0
    22e4:	40 e0       	ldi	r20, 0x00	; 0
    22e6:	50 e0       	ldi	r21, 0x00	; 0
    22e8:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
    22ec:	88 23       	and	r24, r24
    22ee:	e9 f5       	brne	.+122    	; 0x236a <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    22f0:	69 81       	ldd	r22, Y+1	; 0x01
    22f2:	7a 81       	ldd	r23, Y+2	; 0x02
    22f4:	8b 81       	ldd	r24, Y+3	; 0x03
    22f6:	9c 81       	ldd	r25, Y+4	; 0x04
    22f8:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    22fc:	3b 01       	movw	r6, r22
    22fe:	c5 01       	movw	r24, r10
    2300:	b4 01       	movw	r22, r8
    2302:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2306:	8b 01       	movw	r16, r22
    2308:	c7 01       	movw	r24, r14
    230a:	b6 01       	movw	r22, r12
    230c:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2310:	7b 01       	movw	r14, r22
    2312:	2d b7       	in	r18, 0x3d	; 61
    2314:	3e b7       	in	r19, 0x3e	; 62
    2316:	29 50       	subi	r18, 0x09	; 9
    2318:	30 40       	sbci	r19, 0x00	; 0
    231a:	0f b6       	in	r0, 0x3f	; 63
    231c:	f8 94       	cli
    231e:	3e bf       	out	0x3e, r19	; 62
    2320:	0f be       	out	0x3f, r0	; 63
    2322:	2d bf       	out	0x3d, r18	; 61
    2324:	ed b7       	in	r30, 0x3d	; 61
    2326:	fe b7       	in	r31, 0x3e	; 62
    2328:	31 96       	adiw	r30, 0x01	; 1
    232a:	40 e0       	ldi	r20, 0x00	; 0
    232c:	33 20       	and	r3, r3
    232e:	09 f4       	brne	.+2      	; 0x2332 <move_arc_stnb+0x1e4>
    2330:	41 e0       	ldi	r20, 0x01	; 1
    2332:	71 82       	std	Z+1, r7	; 0x01
    2334:	60 82       	st	Z, r6
    2336:	13 83       	std	Z+3, r17	; 0x03
    2338:	02 83       	std	Z+2, r16	; 0x02
    233a:	f5 82       	std	Z+5, r15	; 0x05
    233c:	e4 82       	std	Z+4, r14	; 0x04
    233e:	26 82       	std	Z+6, r2	; 0x06
    2340:	10 86       	std	Z+8, r1	; 0x08
    2342:	17 82       	std	Z+7, r1	; 0x07
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	62 e0       	ldi	r22, 0x02	; 2
    2348:	93 01       	movw	r18, r6
    234a:	c2 2c       	mov	r12, r2
    234c:	aa 24       	eor	r10, r10
    234e:	bb 24       	eor	r11, r11
    2350:	83 2c       	mov	r8, r3
    2352:	0e 94 b0 1b 	call	0x3760	; 0x3760 <STEPPER_move>
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	ad b7       	in	r26, 0x3d	; 61
    235a:	be b7       	in	r27, 0x3e	; 62
    235c:	19 96       	adiw	r26, 0x09	; 9
    235e:	0f b6       	in	r0, 0x3f	; 63
    2360:	f8 94       	cli
    2362:	be bf       	out	0x3e, r27	; 62
    2364:	0f be       	out	0x3f, r0	; 63
    2366:	ad bf       	out	0x3d, r26	; 61
    2368:	89 c1       	rjmp	.+786    	; 0x267c <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    236a:	c3 01       	movw	r24, r6
    236c:	b2 01       	movw	r22, r4
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <__gesf2>
    237a:	18 16       	cp	r1, r24
    237c:	0c f0       	brlt	.+2      	; 0x2380 <move_arc_stnb+0x232>
    237e:	b1 c0       	rjmp	.+354    	; 0x24e2 <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2380:	66 e6       	ldi	r22, 0x66	; 102
    2382:	76 e6       	ldi	r23, 0x66	; 102
    2384:	8a ea       	ldi	r24, 0xAA	; 170
    2386:	91 ec       	ldi	r25, 0xC1	; 193
    2388:	a3 01       	movw	r20, r6
    238a:	92 01       	movw	r18, r4
    238c:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2390:	20 e0       	ldi	r18, 0x00	; 0
    2392:	30 e0       	ldi	r19, 0x00	; 0
    2394:	40 e8       	ldi	r20, 0x80	; 128
    2396:	5f e3       	ldi	r21, 0x3F	; 63
    2398:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    239c:	7b 01       	movw	r14, r22
    239e:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    23a0:	66 e6       	ldi	r22, 0x66	; 102
    23a2:	76 e6       	ldi	r23, 0x66	; 102
    23a4:	8a ea       	ldi	r24, 0xAA	; 170
    23a6:	91 e4       	ldi	r25, 0x41	; 65
    23a8:	a3 01       	movw	r20, r6
    23aa:	92 01       	movw	r18, r4
    23ac:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    23b0:	20 e0       	ldi	r18, 0x00	; 0
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	40 e8       	ldi	r20, 0x80	; 128
    23b6:	5f e3       	ldi	r21, 0x3F	; 63
    23b8:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    23bc:	5b 01       	movw	r10, r22
    23be:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    23c0:	ed b7       	in	r30, 0x3d	; 61
    23c2:	fe b7       	in	r31, 0x3e	; 62
    23c4:	39 97       	sbiw	r30, 0x09	; 9
    23c6:	0f b6       	in	r0, 0x3f	; 63
    23c8:	f8 94       	cli
    23ca:	fe bf       	out	0x3e, r31	; 62
    23cc:	0f be       	out	0x3f, r0	; 63
    23ce:	ed bf       	out	0x3d, r30	; 61
    23d0:	8d b6       	in	r8, 0x3d	; 61
    23d2:	9e b6       	in	r9, 0x3e	; 62
    23d4:	08 94       	sec
    23d6:	81 1c       	adc	r8, r1
    23d8:	91 1c       	adc	r9, r1
    23da:	6d 81       	ldd	r22, Y+5	; 0x05
    23dc:	7e 81       	ldd	r23, Y+6	; 0x06
    23de:	8f 81       	ldd	r24, Y+7	; 0x07
    23e0:	98 85       	ldd	r25, Y+8	; 0x08
    23e2:	a8 01       	movw	r20, r16
    23e4:	97 01       	movw	r18, r14
    23e6:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    23ea:	2c ed       	ldi	r18, 0xDC	; 220
    23ec:	38 eb       	ldi	r19, 0xB8	; 184
    23ee:	48 e0       	ldi	r20, 0x08	; 8
    23f0:	5e e3       	ldi	r21, 0x3E	; 62
    23f2:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    23f6:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    23fa:	69 8b       	std	Y+17, r22	; 0x11
    23fc:	7a 8b       	std	Y+18, r23	; 0x12
    23fe:	8b 8b       	std	Y+19, r24	; 0x13
    2400:	9c 8b       	std	Y+20, r25	; 0x14
    2402:	69 85       	ldd	r22, Y+9	; 0x09
    2404:	7a 85       	ldd	r23, Y+10	; 0x0a
    2406:	8b 85       	ldd	r24, Y+11	; 0x0b
    2408:	9c 85       	ldd	r25, Y+12	; 0x0c
    240a:	a8 01       	movw	r20, r16
    240c:	97 01       	movw	r18, r14
    240e:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2412:	2c ed       	ldi	r18, 0xDC	; 220
    2414:	38 eb       	ldi	r19, 0xB8	; 184
    2416:	48 e0       	ldi	r20, 0x08	; 8
    2418:	5e e3       	ldi	r21, 0x3E	; 62
    241a:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    241e:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2422:	6d 8b       	std	Y+21, r22	; 0x15
    2424:	7e 8b       	std	Y+22, r23	; 0x16
    2426:	8f 8b       	std	Y+23, r24	; 0x17
    2428:	98 8f       	std	Y+24, r25	; 0x18
    242a:	6d 85       	ldd	r22, Y+13	; 0x0d
    242c:	7e 85       	ldd	r23, Y+14	; 0x0e
    242e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2430:	98 89       	ldd	r25, Y+16	; 0x10
    2432:	a8 01       	movw	r20, r16
    2434:	97 01       	movw	r18, r14
    2436:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    243a:	2c ed       	ldi	r18, 0xDC	; 220
    243c:	38 eb       	ldi	r19, 0xB8	; 184
    243e:	48 e0       	ldi	r20, 0x08	; 8
    2440:	5e e3       	ldi	r21, 0x3E	; 62
    2442:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2446:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    244a:	2b 01       	movw	r4, r22
    244c:	3c 01       	movw	r6, r24
    244e:	6d 81       	ldd	r22, Y+5	; 0x05
    2450:	7e 81       	ldd	r23, Y+6	; 0x06
    2452:	8f 81       	ldd	r24, Y+7	; 0x07
    2454:	98 85       	ldd	r25, Y+8	; 0x08
    2456:	a6 01       	movw	r20, r12
    2458:	95 01       	movw	r18, r10
    245a:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    245e:	2c ed       	ldi	r18, 0xDC	; 220
    2460:	38 eb       	ldi	r19, 0xB8	; 184
    2462:	48 e0       	ldi	r20, 0x08	; 8
    2464:	5e e3       	ldi	r21, 0x3E	; 62
    2466:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    246a:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    246e:	d4 01       	movw	r26, r8
    2470:	6d 93       	st	X+, r22
    2472:	7c 93       	st	X, r23
    2474:	69 85       	ldd	r22, Y+9	; 0x09
    2476:	7a 85       	ldd	r23, Y+10	; 0x0a
    2478:	8b 85       	ldd	r24, Y+11	; 0x0b
    247a:	9c 85       	ldd	r25, Y+12	; 0x0c
    247c:	a6 01       	movw	r20, r12
    247e:	95 01       	movw	r18, r10
    2480:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2484:	2c ed       	ldi	r18, 0xDC	; 220
    2486:	38 eb       	ldi	r19, 0xB8	; 184
    2488:	48 e0       	ldi	r20, 0x08	; 8
    248a:	5e e3       	ldi	r21, 0x3E	; 62
    248c:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2490:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2494:	f4 01       	movw	r30, r8
    2496:	73 83       	std	Z+3, r23	; 0x03
    2498:	62 83       	std	Z+2, r22	; 0x02
    249a:	6d 85       	ldd	r22, Y+13	; 0x0d
    249c:	7e 85       	ldd	r23, Y+14	; 0x0e
    249e:	8f 85       	ldd	r24, Y+15	; 0x0f
    24a0:	98 89       	ldd	r25, Y+16	; 0x10
    24a2:	a6 01       	movw	r20, r12
    24a4:	95 01       	movw	r18, r10
    24a6:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    24aa:	2c ed       	ldi	r18, 0xDC	; 220
    24ac:	38 eb       	ldi	r19, 0xB8	; 184
    24ae:	48 e0       	ldi	r20, 0x08	; 8
    24b0:	5e e3       	ldi	r21, 0x3E	; 62
    24b2:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    24b6:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    24ba:	d4 01       	movw	r26, r8
    24bc:	15 96       	adiw	r26, 0x05	; 5
    24be:	7c 93       	st	X, r23
    24c0:	6e 93       	st	-X, r22
    24c2:	14 97       	sbiw	r26, 0x04	; 4
    24c4:	16 96       	adiw	r26, 0x06	; 6
    24c6:	2c 92       	st	X, r2
    24c8:	16 97       	sbiw	r26, 0x06	; 6
    24ca:	18 96       	adiw	r26, 0x08	; 8
    24cc:	1c 92       	st	X, r1
    24ce:	1e 92       	st	-X, r1
    24d0:	17 97       	sbiw	r26, 0x07	; 7
    24d2:	81 e0       	ldi	r24, 0x01	; 1
    24d4:	62 e0       	ldi	r22, 0x02	; 2
    24d6:	43 2d       	mov	r20, r3
    24d8:	29 89       	ldd	r18, Y+17	; 0x11
    24da:	3a 89       	ldd	r19, Y+18	; 0x12
    24dc:	0d 89       	ldd	r16, Y+21	; 0x15
    24de:	1e 89       	ldd	r17, Y+22	; 0x16
    24e0:	bd c0       	rjmp	.+378    	; 0x265c <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    24e2:	c3 01       	movw	r24, r6
    24e4:	b2 01       	movw	r22, r4
    24e6:	20 e0       	ldi	r18, 0x00	; 0
    24e8:	30 e0       	ldi	r19, 0x00	; 0
    24ea:	40 e0       	ldi	r20, 0x00	; 0
    24ec:	50 e0       	ldi	r21, 0x00	; 0
    24ee:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
    24f2:	87 fd       	sbrc	r24, 7
    24f4:	02 c0       	rjmp	.+4      	; 0x24fa <move_arc_stnb+0x3ac>
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	c1 c0       	rjmp	.+386    	; 0x267c <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    24fa:	66 e6       	ldi	r22, 0x66	; 102
    24fc:	76 e6       	ldi	r23, 0x66	; 102
    24fe:	8a ea       	ldi	r24, 0xAA	; 170
    2500:	91 e4       	ldi	r25, 0x41	; 65
    2502:	a3 01       	movw	r20, r6
    2504:	92 01       	movw	r18, r4
    2506:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e0       	ldi	r19, 0x00	; 0
    250e:	40 e8       	ldi	r20, 0x80	; 128
    2510:	5f e3       	ldi	r21, 0x3F	; 63
    2512:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    2516:	7b 01       	movw	r14, r22
    2518:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    251a:	66 e6       	ldi	r22, 0x66	; 102
    251c:	76 e6       	ldi	r23, 0x66	; 102
    251e:	8a ea       	ldi	r24, 0xAA	; 170
    2520:	91 ec       	ldi	r25, 0xC1	; 193
    2522:	a3 01       	movw	r20, r6
    2524:	92 01       	movw	r18, r4
    2526:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e8       	ldi	r20, 0x80	; 128
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    2536:	5b 01       	movw	r10, r22
    2538:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    253a:	2d b7       	in	r18, 0x3d	; 61
    253c:	3e b7       	in	r19, 0x3e	; 62
    253e:	29 50       	subi	r18, 0x09	; 9
    2540:	30 40       	sbci	r19, 0x00	; 0
    2542:	0f b6       	in	r0, 0x3f	; 63
    2544:	f8 94       	cli
    2546:	3e bf       	out	0x3e, r19	; 62
    2548:	0f be       	out	0x3f, r0	; 63
    254a:	2d bf       	out	0x3d, r18	; 61
    254c:	8d b6       	in	r8, 0x3d	; 61
    254e:	9e b6       	in	r9, 0x3e	; 62
    2550:	08 94       	sec
    2552:	81 1c       	adc	r8, r1
    2554:	91 1c       	adc	r9, r1
    2556:	6d 81       	ldd	r22, Y+5	; 0x05
    2558:	7e 81       	ldd	r23, Y+6	; 0x06
    255a:	8f 81       	ldd	r24, Y+7	; 0x07
    255c:	98 85       	ldd	r25, Y+8	; 0x08
    255e:	a8 01       	movw	r20, r16
    2560:	97 01       	movw	r18, r14
    2562:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2566:	2c ed       	ldi	r18, 0xDC	; 220
    2568:	38 eb       	ldi	r19, 0xB8	; 184
    256a:	48 e0       	ldi	r20, 0x08	; 8
    256c:	5e e3       	ldi	r21, 0x3E	; 62
    256e:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2572:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2576:	69 8f       	std	Y+25, r22	; 0x19
    2578:	7a 8f       	std	Y+26, r23	; 0x1a
    257a:	8b 8f       	std	Y+27, r24	; 0x1b
    257c:	9c 8f       	std	Y+28, r25	; 0x1c
    257e:	69 85       	ldd	r22, Y+9	; 0x09
    2580:	7a 85       	ldd	r23, Y+10	; 0x0a
    2582:	8b 85       	ldd	r24, Y+11	; 0x0b
    2584:	9c 85       	ldd	r25, Y+12	; 0x0c
    2586:	a8 01       	movw	r20, r16
    2588:	97 01       	movw	r18, r14
    258a:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    258e:	2c ed       	ldi	r18, 0xDC	; 220
    2590:	38 eb       	ldi	r19, 0xB8	; 184
    2592:	48 e0       	ldi	r20, 0x08	; 8
    2594:	5e e3       	ldi	r21, 0x3E	; 62
    2596:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    259a:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    259e:	6d 8f       	std	Y+29, r22	; 0x1d
    25a0:	7e 8f       	std	Y+30, r23	; 0x1e
    25a2:	8f 8f       	std	Y+31, r24	; 0x1f
    25a4:	98 a3       	std	Y+32, r25	; 0x20
    25a6:	6d 85       	ldd	r22, Y+13	; 0x0d
    25a8:	7e 85       	ldd	r23, Y+14	; 0x0e
    25aa:	8f 85       	ldd	r24, Y+15	; 0x0f
    25ac:	98 89       	ldd	r25, Y+16	; 0x10
    25ae:	a8 01       	movw	r20, r16
    25b0:	97 01       	movw	r18, r14
    25b2:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    25b6:	2c ed       	ldi	r18, 0xDC	; 220
    25b8:	38 eb       	ldi	r19, 0xB8	; 184
    25ba:	48 e0       	ldi	r20, 0x08	; 8
    25bc:	5e e3       	ldi	r21, 0x3E	; 62
    25be:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    25c2:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    25c6:	2b 01       	movw	r4, r22
    25c8:	3c 01       	movw	r6, r24
    25ca:	6d 81       	ldd	r22, Y+5	; 0x05
    25cc:	7e 81       	ldd	r23, Y+6	; 0x06
    25ce:	8f 81       	ldd	r24, Y+7	; 0x07
    25d0:	98 85       	ldd	r25, Y+8	; 0x08
    25d2:	a6 01       	movw	r20, r12
    25d4:	95 01       	movw	r18, r10
    25d6:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    25da:	2c ed       	ldi	r18, 0xDC	; 220
    25dc:	38 eb       	ldi	r19, 0xB8	; 184
    25de:	48 e0       	ldi	r20, 0x08	; 8
    25e0:	5e e3       	ldi	r21, 0x3E	; 62
    25e2:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    25e6:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    25ea:	d4 01       	movw	r26, r8
    25ec:	6d 93       	st	X+, r22
    25ee:	7c 93       	st	X, r23
    25f0:	69 85       	ldd	r22, Y+9	; 0x09
    25f2:	7a 85       	ldd	r23, Y+10	; 0x0a
    25f4:	8b 85       	ldd	r24, Y+11	; 0x0b
    25f6:	9c 85       	ldd	r25, Y+12	; 0x0c
    25f8:	a6 01       	movw	r20, r12
    25fa:	95 01       	movw	r18, r10
    25fc:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2600:	2c ed       	ldi	r18, 0xDC	; 220
    2602:	38 eb       	ldi	r19, 0xB8	; 184
    2604:	48 e0       	ldi	r20, 0x08	; 8
    2606:	5e e3       	ldi	r21, 0x3E	; 62
    2608:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    260c:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2610:	f4 01       	movw	r30, r8
    2612:	73 83       	std	Z+3, r23	; 0x03
    2614:	62 83       	std	Z+2, r22	; 0x02
    2616:	6d 85       	ldd	r22, Y+13	; 0x0d
    2618:	7e 85       	ldd	r23, Y+14	; 0x0e
    261a:	8f 85       	ldd	r24, Y+15	; 0x0f
    261c:	98 89       	ldd	r25, Y+16	; 0x10
    261e:	a6 01       	movw	r20, r12
    2620:	95 01       	movw	r18, r10
    2622:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2626:	2c ed       	ldi	r18, 0xDC	; 220
    2628:	38 eb       	ldi	r19, 0xB8	; 184
    262a:	48 e0       	ldi	r20, 0x08	; 8
    262c:	5e e3       	ldi	r21, 0x3E	; 62
    262e:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2632:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2636:	d4 01       	movw	r26, r8
    2638:	15 96       	adiw	r26, 0x05	; 5
    263a:	7c 93       	st	X, r23
    263c:	6e 93       	st	-X, r22
    263e:	14 97       	sbiw	r26, 0x04	; 4
    2640:	16 96       	adiw	r26, 0x06	; 6
    2642:	2c 92       	st	X, r2
    2644:	16 97       	sbiw	r26, 0x06	; 6
    2646:	18 96       	adiw	r26, 0x08	; 8
    2648:	1c 92       	st	X, r1
    264a:	1e 92       	st	-X, r1
    264c:	17 97       	sbiw	r26, 0x07	; 7
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	62 e0       	ldi	r22, 0x02	; 2
    2652:	43 2d       	mov	r20, r3
    2654:	29 8d       	ldd	r18, Y+25	; 0x19
    2656:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2658:	0d 8d       	ldd	r16, Y+29	; 0x1d
    265a:	1e 8d       	ldd	r17, Y+30	; 0x1e
    265c:	72 01       	movw	r14, r4
    265e:	c2 2c       	mov	r12, r2
    2660:	aa 24       	eor	r10, r10
    2662:	bb 24       	eor	r11, r11
    2664:	83 2c       	mov	r8, r3
    2666:	0e 94 b0 1b 	call	0x3760	; 0x3760 <STEPPER_move>
    266a:	81 e0       	ldi	r24, 0x01	; 1
    266c:	ed b7       	in	r30, 0x3d	; 61
    266e:	fe b7       	in	r31, 0x3e	; 62
    2670:	39 96       	adiw	r30, 0x09	; 9
    2672:	0f b6       	in	r0, 0x3f	; 63
    2674:	f8 94       	cli
    2676:	fe bf       	out	0x3e, r31	; 62
    2678:	0f be       	out	0x3f, r0	; 63
    267a:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    267c:	a0 96       	adiw	r28, 0x20	; 32
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	f8 94       	cli
    2682:	de bf       	out	0x3e, r29	; 62
    2684:	0f be       	out	0x3f, r0	; 63
    2686:	cd bf       	out	0x3d, r28	; 61
    2688:	cf 91       	pop	r28
    268a:	df 91       	pop	r29
    268c:	1f 91       	pop	r17
    268e:	0f 91       	pop	r16
    2690:	ff 90       	pop	r15
    2692:	ef 90       	pop	r14
    2694:	df 90       	pop	r13
    2696:	cf 90       	pop	r12
    2698:	bf 90       	pop	r11
    269a:	af 90       	pop	r10
    269c:	9f 90       	pop	r9
    269e:	8f 90       	pop	r8
    26a0:	7f 90       	pop	r7
    26a2:	6f 90       	pop	r6
    26a4:	5f 90       	pop	r5
    26a6:	4f 90       	pop	r4
    26a8:	3f 90       	pop	r3
    26aa:	2f 90       	pop	r2
    26ac:	08 95       	ret

000026ae <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    26ae:	2f 92       	push	r2
    26b0:	3f 92       	push	r3
    26b2:	4f 92       	push	r4
    26b4:	5f 92       	push	r5
    26b6:	6f 92       	push	r6
    26b8:	7f 92       	push	r7
    26ba:	8f 92       	push	r8
    26bc:	9f 92       	push	r9
    26be:	af 92       	push	r10
    26c0:	bf 92       	push	r11
    26c2:	cf 92       	push	r12
    26c4:	df 92       	push	r13
    26c6:	ef 92       	push	r14
    26c8:	ff 92       	push	r15
    26ca:	0f 93       	push	r16
    26cc:	1f 93       	push	r17
    26ce:	df 93       	push	r29
    26d0:	cf 93       	push	r28
    26d2:	cd b7       	in	r28, 0x3d	; 61
    26d4:	de b7       	in	r29, 0x3e	; 62
    26d6:	a0 97       	sbiw	r28, 0x20	; 32
    26d8:	0f b6       	in	r0, 0x3f	; 63
    26da:	f8 94       	cli
    26dc:	de bf       	out	0x3e, r29	; 62
    26de:	0f be       	out	0x3f, r0	; 63
    26e0:	cd bf       	out	0x3d, r28	; 61
    26e2:	2b 01       	movw	r4, r22
    26e4:	3c 01       	movw	r6, r24
    26e6:	2d 83       	std	Y+5, r18	; 0x05
    26e8:	3e 83       	std	Y+6, r19	; 0x06
    26ea:	4f 83       	std	Y+7, r20	; 0x07
    26ec:	58 87       	std	Y+8, r21	; 0x08
    26ee:	e9 86       	std	Y+9, r14	; 0x09
    26f0:	fa 86       	std	Y+10, r15	; 0x0a
    26f2:	0b 87       	std	Y+11, r16	; 0x0b
    26f4:	1c 87       	std	Y+12, r17	; 0x0c
    26f6:	ad 86       	std	Y+13, r10	; 0x0d
    26f8:	be 86       	std	Y+14, r11	; 0x0e
    26fa:	cf 86       	std	Y+15, r12	; 0x0f
    26fc:	d8 8a       	std	Y+16, r13	; 0x10
    26fe:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    2700:	33 24       	eor	r3, r3
    2702:	ca 01       	movw	r24, r20
    2704:	b9 01       	movw	r22, r18
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	40 e0       	ldi	r20, 0x00	; 0
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <__gesf2>
    2712:	18 16       	cp	r1, r24
    2714:	14 f4       	brge	.+4      	; 0x271a <move_arc_stwt+0x6c>
    2716:	33 24       	eor	r3, r3
    2718:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    271a:	6d 81       	ldd	r22, Y+5	; 0x05
    271c:	7e 81       	ldd	r23, Y+6	; 0x06
    271e:	8f 81       	ldd	r24, Y+7	; 0x07
    2720:	98 85       	ldd	r25, Y+8	; 0x08
    2722:	2c ed       	ldi	r18, 0xDC	; 220
    2724:	38 eb       	ldi	r19, 0xB8	; 184
    2726:	48 e0       	ldi	r20, 0x08	; 8
    2728:	5e e3       	ldi	r21, 0x3E	; 62
    272a:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    272e:	0e 94 57 2c 	call	0x58ae	; 0x58ae <__fixsfsi>
    2732:	9b 01       	movw	r18, r22
    2734:	77 ff       	sbrs	r23, 7
    2736:	03 c0       	rjmp	.+6      	; 0x273e <move_arc_stwt+0x90>
    2738:	30 95       	com	r19
    273a:	21 95       	neg	r18
    273c:	3f 4f       	sbci	r19, 0xFF	; 255
    273e:	b9 01       	movw	r22, r18
    2740:	88 27       	eor	r24, r24
    2742:	77 fd       	sbrc	r23, 7
    2744:	80 95       	com	r24
    2746:	98 2f       	mov	r25, r24
    2748:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__floatsisf>
    274c:	69 83       	std	Y+1, r22	; 0x01
    274e:	7a 83       	std	Y+2, r23	; 0x02
    2750:	8b 83       	std	Y+3, r24	; 0x03
    2752:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    2754:	69 85       	ldd	r22, Y+9	; 0x09
    2756:	7a 85       	ldd	r23, Y+10	; 0x0a
    2758:	8b 85       	ldd	r24, Y+11	; 0x0b
    275a:	9c 85       	ldd	r25, Y+12	; 0x0c
    275c:	2c ed       	ldi	r18, 0xDC	; 220
    275e:	38 eb       	ldi	r19, 0xB8	; 184
    2760:	48 e0       	ldi	r20, 0x08	; 8
    2762:	5e e3       	ldi	r21, 0x3E	; 62
    2764:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2768:	0e 94 57 2c 	call	0x58ae	; 0x58ae <__fixsfsi>
    276c:	9b 01       	movw	r18, r22
    276e:	77 ff       	sbrs	r23, 7
    2770:	03 c0       	rjmp	.+6      	; 0x2778 <move_arc_stwt+0xca>
    2772:	30 95       	com	r19
    2774:	21 95       	neg	r18
    2776:	3f 4f       	sbci	r19, 0xFF	; 255
    2778:	b9 01       	movw	r22, r18
    277a:	88 27       	eor	r24, r24
    277c:	77 fd       	sbrc	r23, 7
    277e:	80 95       	com	r24
    2780:	98 2f       	mov	r25, r24
    2782:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__floatsisf>
    2786:	4b 01       	movw	r8, r22
    2788:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    278a:	6d 85       	ldd	r22, Y+13	; 0x0d
    278c:	7e 85       	ldd	r23, Y+14	; 0x0e
    278e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2790:	98 89       	ldd	r25, Y+16	; 0x10
    2792:	2c ed       	ldi	r18, 0xDC	; 220
    2794:	38 eb       	ldi	r19, 0xB8	; 184
    2796:	48 e0       	ldi	r20, 0x08	; 8
    2798:	5e e3       	ldi	r21, 0x3E	; 62
    279a:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    279e:	0e 94 57 2c 	call	0x58ae	; 0x58ae <__fixsfsi>
    27a2:	9b 01       	movw	r18, r22
    27a4:	77 ff       	sbrs	r23, 7
    27a6:	03 c0       	rjmp	.+6      	; 0x27ae <move_arc_stwt+0x100>
    27a8:	30 95       	com	r19
    27aa:	21 95       	neg	r18
    27ac:	3f 4f       	sbci	r19, 0xFF	; 255
    27ae:	b9 01       	movw	r22, r18
    27b0:	88 27       	eor	r24, r24
    27b2:	77 fd       	sbrc	r23, 7
    27b4:	80 95       	com	r24
    27b6:	98 2f       	mov	r25, r24
    27b8:	0e 94 8a 2c 	call	0x5914	; 0x5914 <__floatsisf>
    27bc:	6b 01       	movw	r12, r22
    27be:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    27c0:	c3 01       	movw	r24, r6
    27c2:	b2 01       	movw	r22, r4
    27c4:	20 e0       	ldi	r18, 0x00	; 0
    27c6:	30 e0       	ldi	r19, 0x00	; 0
    27c8:	40 e0       	ldi	r20, 0x00	; 0
    27ca:	5f e4       	ldi	r21, 0x4F	; 79
    27cc:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
    27d0:	88 23       	and	r24, r24
    27d2:	a1 f5       	brne	.+104    	; 0x283c <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    27d4:	69 81       	ldd	r22, Y+1	; 0x01
    27d6:	7a 81       	ldd	r23, Y+2	; 0x02
    27d8:	8b 81       	ldd	r24, Y+3	; 0x03
    27da:	9c 81       	ldd	r25, Y+4	; 0x04
    27dc:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    27e0:	2b 01       	movw	r4, r22
    27e2:	3c 01       	movw	r6, r24
    27e4:	c5 01       	movw	r24, r10
    27e6:	b4 01       	movw	r22, r8
    27e8:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    27ec:	4b 01       	movw	r8, r22
    27ee:	5c 01       	movw	r10, r24
    27f0:	c7 01       	movw	r24, r14
    27f2:	b6 01       	movw	r22, r12
    27f4:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    27f8:	6b 01       	movw	r12, r22
    27fa:	7c 01       	movw	r14, r24
    27fc:	2d b7       	in	r18, 0x3d	; 61
    27fe:	3e b7       	in	r19, 0x3e	; 62
    2800:	29 50       	subi	r18, 0x09	; 9
    2802:	30 40       	sbci	r19, 0x00	; 0
    2804:	0f b6       	in	r0, 0x3f	; 63
    2806:	f8 94       	cli
    2808:	3e bf       	out	0x3e, r19	; 62
    280a:	0f be       	out	0x3f, r0	; 63
    280c:	2d bf       	out	0x3d, r18	; 61
    280e:	ed b7       	in	r30, 0x3d	; 61
    2810:	fe b7       	in	r31, 0x3e	; 62
    2812:	31 96       	adiw	r30, 0x01	; 1
    2814:	ad b7       	in	r26, 0x3d	; 61
    2816:	be b7       	in	r27, 0x3e	; 62
    2818:	12 96       	adiw	r26, 0x02	; 2
    281a:	5c 92       	st	X, r5
    281c:	4e 92       	st	-X, r4
    281e:	11 97       	sbiw	r26, 0x01	; 1
    2820:	93 82       	std	Z+3, r9	; 0x03
    2822:	82 82       	std	Z+2, r8	; 0x02
    2824:	75 83       	std	Z+5, r23	; 0x05
    2826:	64 83       	std	Z+4, r22	; 0x04
    2828:	26 82       	std	Z+6, r2	; 0x06
    282a:	10 86       	std	Z+8, r1	; 0x08
    282c:	17 82       	std	Z+7, r1	; 0x07
    282e:	80 e0       	ldi	r24, 0x00	; 0
    2830:	62 e0       	ldi	r22, 0x02	; 2
    2832:	43 2d       	mov	r20, r3
    2834:	92 01       	movw	r18, r4
    2836:	84 01       	movw	r16, r8
    2838:	76 01       	movw	r14, r12
    283a:	c1 c1       	rjmp	.+898    	; 0x2bbe <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    283c:	c3 01       	movw	r24, r6
    283e:	b2 01       	movw	r22, r4
    2840:	20 e0       	ldi	r18, 0x00	; 0
    2842:	30 e0       	ldi	r19, 0x00	; 0
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	50 e0       	ldi	r21, 0x00	; 0
    2848:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
    284c:	88 23       	and	r24, r24
    284e:	e9 f5       	brne	.+122    	; 0x28ca <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    2850:	69 81       	ldd	r22, Y+1	; 0x01
    2852:	7a 81       	ldd	r23, Y+2	; 0x02
    2854:	8b 81       	ldd	r24, Y+3	; 0x03
    2856:	9c 81       	ldd	r25, Y+4	; 0x04
    2858:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    285c:	3b 01       	movw	r6, r22
    285e:	c5 01       	movw	r24, r10
    2860:	b4 01       	movw	r22, r8
    2862:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2866:	8b 01       	movw	r16, r22
    2868:	c7 01       	movw	r24, r14
    286a:	b6 01       	movw	r22, r12
    286c:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2870:	7b 01       	movw	r14, r22
    2872:	2d b7       	in	r18, 0x3d	; 61
    2874:	3e b7       	in	r19, 0x3e	; 62
    2876:	29 50       	subi	r18, 0x09	; 9
    2878:	30 40       	sbci	r19, 0x00	; 0
    287a:	0f b6       	in	r0, 0x3f	; 63
    287c:	f8 94       	cli
    287e:	3e bf       	out	0x3e, r19	; 62
    2880:	0f be       	out	0x3f, r0	; 63
    2882:	2d bf       	out	0x3d, r18	; 61
    2884:	ed b7       	in	r30, 0x3d	; 61
    2886:	fe b7       	in	r31, 0x3e	; 62
    2888:	31 96       	adiw	r30, 0x01	; 1
    288a:	40 e0       	ldi	r20, 0x00	; 0
    288c:	33 20       	and	r3, r3
    288e:	09 f4       	brne	.+2      	; 0x2892 <move_arc_stwt+0x1e4>
    2890:	41 e0       	ldi	r20, 0x01	; 1
    2892:	71 82       	std	Z+1, r7	; 0x01
    2894:	60 82       	st	Z, r6
    2896:	13 83       	std	Z+3, r17	; 0x03
    2898:	02 83       	std	Z+2, r16	; 0x02
    289a:	f5 82       	std	Z+5, r15	; 0x05
    289c:	e4 82       	std	Z+4, r14	; 0x04
    289e:	26 82       	std	Z+6, r2	; 0x06
    28a0:	10 86       	std	Z+8, r1	; 0x08
    28a2:	17 82       	std	Z+7, r1	; 0x07
    28a4:	80 e0       	ldi	r24, 0x00	; 0
    28a6:	62 e0       	ldi	r22, 0x02	; 2
    28a8:	93 01       	movw	r18, r6
    28aa:	c2 2c       	mov	r12, r2
    28ac:	aa 24       	eor	r10, r10
    28ae:	bb 24       	eor	r11, r11
    28b0:	83 2c       	mov	r8, r3
    28b2:	0e 94 b0 1b 	call	0x3760	; 0x3760 <STEPPER_move>
    28b6:	81 e0       	ldi	r24, 0x01	; 1
    28b8:	ad b7       	in	r26, 0x3d	; 61
    28ba:	be b7       	in	r27, 0x3e	; 62
    28bc:	19 96       	adiw	r26, 0x09	; 9
    28be:	0f b6       	in	r0, 0x3f	; 63
    28c0:	f8 94       	cli
    28c2:	be bf       	out	0x3e, r27	; 62
    28c4:	0f be       	out	0x3f, r0	; 63
    28c6:	ad bf       	out	0x3d, r26	; 61
    28c8:	89 c1       	rjmp	.+786    	; 0x2bdc <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    28ca:	c3 01       	movw	r24, r6
    28cc:	b2 01       	movw	r22, r4
    28ce:	20 e0       	ldi	r18, 0x00	; 0
    28d0:	30 e0       	ldi	r19, 0x00	; 0
    28d2:	40 e0       	ldi	r20, 0x00	; 0
    28d4:	50 e0       	ldi	r21, 0x00	; 0
    28d6:	0e 94 3a 2d 	call	0x5a74	; 0x5a74 <__gesf2>
    28da:	18 16       	cp	r1, r24
    28dc:	0c f0       	brlt	.+2      	; 0x28e0 <move_arc_stwt+0x232>
    28de:	b1 c0       	rjmp	.+354    	; 0x2a42 <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    28e0:	66 e6       	ldi	r22, 0x66	; 102
    28e2:	76 e6       	ldi	r23, 0x66	; 102
    28e4:	8a ea       	ldi	r24, 0xAA	; 170
    28e6:	91 ec       	ldi	r25, 0xC1	; 193
    28e8:	a3 01       	movw	r20, r6
    28ea:	92 01       	movw	r18, r4
    28ec:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    28f0:	20 e0       	ldi	r18, 0x00	; 0
    28f2:	30 e0       	ldi	r19, 0x00	; 0
    28f4:	40 e8       	ldi	r20, 0x80	; 128
    28f6:	5f e3       	ldi	r21, 0x3F	; 63
    28f8:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    28fc:	7b 01       	movw	r14, r22
    28fe:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2900:	66 e6       	ldi	r22, 0x66	; 102
    2902:	76 e6       	ldi	r23, 0x66	; 102
    2904:	8a ea       	ldi	r24, 0xAA	; 170
    2906:	91 e4       	ldi	r25, 0x41	; 65
    2908:	a3 01       	movw	r20, r6
    290a:	92 01       	movw	r18, r4
    290c:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	40 e8       	ldi	r20, 0x80	; 128
    2916:	5f e3       	ldi	r21, 0x3F	; 63
    2918:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    291c:	5b 01       	movw	r10, r22
    291e:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2920:	ed b7       	in	r30, 0x3d	; 61
    2922:	fe b7       	in	r31, 0x3e	; 62
    2924:	39 97       	sbiw	r30, 0x09	; 9
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	fe bf       	out	0x3e, r31	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	ed bf       	out	0x3d, r30	; 61
    2930:	8d b6       	in	r8, 0x3d	; 61
    2932:	9e b6       	in	r9, 0x3e	; 62
    2934:	08 94       	sec
    2936:	81 1c       	adc	r8, r1
    2938:	91 1c       	adc	r9, r1
    293a:	6d 81       	ldd	r22, Y+5	; 0x05
    293c:	7e 81       	ldd	r23, Y+6	; 0x06
    293e:	8f 81       	ldd	r24, Y+7	; 0x07
    2940:	98 85       	ldd	r25, Y+8	; 0x08
    2942:	a8 01       	movw	r20, r16
    2944:	97 01       	movw	r18, r14
    2946:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    294a:	2c ed       	ldi	r18, 0xDC	; 220
    294c:	38 eb       	ldi	r19, 0xB8	; 184
    294e:	48 e0       	ldi	r20, 0x08	; 8
    2950:	5e e3       	ldi	r21, 0x3E	; 62
    2952:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2956:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    295a:	69 8b       	std	Y+17, r22	; 0x11
    295c:	7a 8b       	std	Y+18, r23	; 0x12
    295e:	8b 8b       	std	Y+19, r24	; 0x13
    2960:	9c 8b       	std	Y+20, r25	; 0x14
    2962:	69 85       	ldd	r22, Y+9	; 0x09
    2964:	7a 85       	ldd	r23, Y+10	; 0x0a
    2966:	8b 85       	ldd	r24, Y+11	; 0x0b
    2968:	9c 85       	ldd	r25, Y+12	; 0x0c
    296a:	a8 01       	movw	r20, r16
    296c:	97 01       	movw	r18, r14
    296e:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2972:	2c ed       	ldi	r18, 0xDC	; 220
    2974:	38 eb       	ldi	r19, 0xB8	; 184
    2976:	48 e0       	ldi	r20, 0x08	; 8
    2978:	5e e3       	ldi	r21, 0x3E	; 62
    297a:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    297e:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2982:	6d 8b       	std	Y+21, r22	; 0x15
    2984:	7e 8b       	std	Y+22, r23	; 0x16
    2986:	8f 8b       	std	Y+23, r24	; 0x17
    2988:	98 8f       	std	Y+24, r25	; 0x18
    298a:	6d 85       	ldd	r22, Y+13	; 0x0d
    298c:	7e 85       	ldd	r23, Y+14	; 0x0e
    298e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2990:	98 89       	ldd	r25, Y+16	; 0x10
    2992:	a8 01       	movw	r20, r16
    2994:	97 01       	movw	r18, r14
    2996:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    299a:	2c ed       	ldi	r18, 0xDC	; 220
    299c:	38 eb       	ldi	r19, 0xB8	; 184
    299e:	48 e0       	ldi	r20, 0x08	; 8
    29a0:	5e e3       	ldi	r21, 0x3E	; 62
    29a2:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    29a6:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    29aa:	2b 01       	movw	r4, r22
    29ac:	3c 01       	movw	r6, r24
    29ae:	6d 81       	ldd	r22, Y+5	; 0x05
    29b0:	7e 81       	ldd	r23, Y+6	; 0x06
    29b2:	8f 81       	ldd	r24, Y+7	; 0x07
    29b4:	98 85       	ldd	r25, Y+8	; 0x08
    29b6:	a6 01       	movw	r20, r12
    29b8:	95 01       	movw	r18, r10
    29ba:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    29be:	2c ed       	ldi	r18, 0xDC	; 220
    29c0:	38 eb       	ldi	r19, 0xB8	; 184
    29c2:	48 e0       	ldi	r20, 0x08	; 8
    29c4:	5e e3       	ldi	r21, 0x3E	; 62
    29c6:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    29ca:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    29ce:	d4 01       	movw	r26, r8
    29d0:	6d 93       	st	X+, r22
    29d2:	7c 93       	st	X, r23
    29d4:	69 85       	ldd	r22, Y+9	; 0x09
    29d6:	7a 85       	ldd	r23, Y+10	; 0x0a
    29d8:	8b 85       	ldd	r24, Y+11	; 0x0b
    29da:	9c 85       	ldd	r25, Y+12	; 0x0c
    29dc:	a6 01       	movw	r20, r12
    29de:	95 01       	movw	r18, r10
    29e0:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    29e4:	2c ed       	ldi	r18, 0xDC	; 220
    29e6:	38 eb       	ldi	r19, 0xB8	; 184
    29e8:	48 e0       	ldi	r20, 0x08	; 8
    29ea:	5e e3       	ldi	r21, 0x3E	; 62
    29ec:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    29f0:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    29f4:	f4 01       	movw	r30, r8
    29f6:	73 83       	std	Z+3, r23	; 0x03
    29f8:	62 83       	std	Z+2, r22	; 0x02
    29fa:	6d 85       	ldd	r22, Y+13	; 0x0d
    29fc:	7e 85       	ldd	r23, Y+14	; 0x0e
    29fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a00:	98 89       	ldd	r25, Y+16	; 0x10
    2a02:	a6 01       	movw	r20, r12
    2a04:	95 01       	movw	r18, r10
    2a06:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2a0a:	2c ed       	ldi	r18, 0xDC	; 220
    2a0c:	38 eb       	ldi	r19, 0xB8	; 184
    2a0e:	48 e0       	ldi	r20, 0x08	; 8
    2a10:	5e e3       	ldi	r21, 0x3E	; 62
    2a12:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2a16:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2a1a:	d4 01       	movw	r26, r8
    2a1c:	15 96       	adiw	r26, 0x05	; 5
    2a1e:	7c 93       	st	X, r23
    2a20:	6e 93       	st	-X, r22
    2a22:	14 97       	sbiw	r26, 0x04	; 4
    2a24:	16 96       	adiw	r26, 0x06	; 6
    2a26:	2c 92       	st	X, r2
    2a28:	16 97       	sbiw	r26, 0x06	; 6
    2a2a:	18 96       	adiw	r26, 0x08	; 8
    2a2c:	1c 92       	st	X, r1
    2a2e:	1e 92       	st	-X, r1
    2a30:	17 97       	sbiw	r26, 0x07	; 7
    2a32:	80 e0       	ldi	r24, 0x00	; 0
    2a34:	62 e0       	ldi	r22, 0x02	; 2
    2a36:	43 2d       	mov	r20, r3
    2a38:	29 89       	ldd	r18, Y+17	; 0x11
    2a3a:	3a 89       	ldd	r19, Y+18	; 0x12
    2a3c:	0d 89       	ldd	r16, Y+21	; 0x15
    2a3e:	1e 89       	ldd	r17, Y+22	; 0x16
    2a40:	bd c0       	rjmp	.+378    	; 0x2bbc <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    2a42:	c3 01       	movw	r24, r6
    2a44:	b2 01       	movw	r22, r4
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	40 e0       	ldi	r20, 0x00	; 0
    2a4c:	50 e0       	ldi	r21, 0x00	; 0
    2a4e:	0e 94 eb 2b 	call	0x57d6	; 0x57d6 <__cmpsf2>
    2a52:	87 fd       	sbrc	r24, 7
    2a54:	02 c0       	rjmp	.+4      	; 0x2a5a <move_arc_stwt+0x3ac>
    2a56:	80 e0       	ldi	r24, 0x00	; 0
    2a58:	c1 c0       	rjmp	.+386    	; 0x2bdc <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    2a5a:	66 e6       	ldi	r22, 0x66	; 102
    2a5c:	76 e6       	ldi	r23, 0x66	; 102
    2a5e:	8a ea       	ldi	r24, 0xAA	; 170
    2a60:	91 e4       	ldi	r25, 0x41	; 65
    2a62:	a3 01       	movw	r20, r6
    2a64:	92 01       	movw	r18, r4
    2a66:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2a6a:	20 e0       	ldi	r18, 0x00	; 0
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	40 e8       	ldi	r20, 0x80	; 128
    2a70:	5f e3       	ldi	r21, 0x3F	; 63
    2a72:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    2a76:	7b 01       	movw	r14, r22
    2a78:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    2a7a:	66 e6       	ldi	r22, 0x66	; 102
    2a7c:	76 e6       	ldi	r23, 0x66	; 102
    2a7e:	8a ea       	ldi	r24, 0xAA	; 170
    2a80:	91 ec       	ldi	r25, 0xC1	; 193
    2a82:	a3 01       	movw	r20, r6
    2a84:	92 01       	movw	r18, r4
    2a86:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e8       	ldi	r20, 0x80	; 128
    2a90:	5f e3       	ldi	r21, 0x3F	; 63
    2a92:	0e 94 87 2b 	call	0x570e	; 0x570e <__addsf3>
    2a96:	5b 01       	movw	r10, r22
    2a98:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    2a9a:	2d b7       	in	r18, 0x3d	; 61
    2a9c:	3e b7       	in	r19, 0x3e	; 62
    2a9e:	29 50       	subi	r18, 0x09	; 9
    2aa0:	30 40       	sbci	r19, 0x00	; 0
    2aa2:	0f b6       	in	r0, 0x3f	; 63
    2aa4:	f8 94       	cli
    2aa6:	3e bf       	out	0x3e, r19	; 62
    2aa8:	0f be       	out	0x3f, r0	; 63
    2aaa:	2d bf       	out	0x3d, r18	; 61
    2aac:	8d b6       	in	r8, 0x3d	; 61
    2aae:	9e b6       	in	r9, 0x3e	; 62
    2ab0:	08 94       	sec
    2ab2:	81 1c       	adc	r8, r1
    2ab4:	91 1c       	adc	r9, r1
    2ab6:	6d 81       	ldd	r22, Y+5	; 0x05
    2ab8:	7e 81       	ldd	r23, Y+6	; 0x06
    2aba:	8f 81       	ldd	r24, Y+7	; 0x07
    2abc:	98 85       	ldd	r25, Y+8	; 0x08
    2abe:	a8 01       	movw	r20, r16
    2ac0:	97 01       	movw	r18, r14
    2ac2:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2ac6:	2c ed       	ldi	r18, 0xDC	; 220
    2ac8:	38 eb       	ldi	r19, 0xB8	; 184
    2aca:	48 e0       	ldi	r20, 0x08	; 8
    2acc:	5e e3       	ldi	r21, 0x3E	; 62
    2ace:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2ad2:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2ad6:	69 8f       	std	Y+25, r22	; 0x19
    2ad8:	7a 8f       	std	Y+26, r23	; 0x1a
    2ada:	8b 8f       	std	Y+27, r24	; 0x1b
    2adc:	9c 8f       	std	Y+28, r25	; 0x1c
    2ade:	69 85       	ldd	r22, Y+9	; 0x09
    2ae0:	7a 85       	ldd	r23, Y+10	; 0x0a
    2ae2:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ae4:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ae6:	a8 01       	movw	r20, r16
    2ae8:	97 01       	movw	r18, r14
    2aea:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2aee:	2c ed       	ldi	r18, 0xDC	; 220
    2af0:	38 eb       	ldi	r19, 0xB8	; 184
    2af2:	48 e0       	ldi	r20, 0x08	; 8
    2af4:	5e e3       	ldi	r21, 0x3E	; 62
    2af6:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2afa:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2afe:	6d 8f       	std	Y+29, r22	; 0x1d
    2b00:	7e 8f       	std	Y+30, r23	; 0x1e
    2b02:	8f 8f       	std	Y+31, r24	; 0x1f
    2b04:	98 a3       	std	Y+32, r25	; 0x20
    2b06:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b08:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b0a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b0c:	98 89       	ldd	r25, Y+16	; 0x10
    2b0e:	a8 01       	movw	r20, r16
    2b10:	97 01       	movw	r18, r14
    2b12:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2b16:	2c ed       	ldi	r18, 0xDC	; 220
    2b18:	38 eb       	ldi	r19, 0xB8	; 184
    2b1a:	48 e0       	ldi	r20, 0x08	; 8
    2b1c:	5e e3       	ldi	r21, 0x3E	; 62
    2b1e:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2b22:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2b26:	2b 01       	movw	r4, r22
    2b28:	3c 01       	movw	r6, r24
    2b2a:	6d 81       	ldd	r22, Y+5	; 0x05
    2b2c:	7e 81       	ldd	r23, Y+6	; 0x06
    2b2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b30:	98 85       	ldd	r25, Y+8	; 0x08
    2b32:	a6 01       	movw	r20, r12
    2b34:	95 01       	movw	r18, r10
    2b36:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2b3a:	2c ed       	ldi	r18, 0xDC	; 220
    2b3c:	38 eb       	ldi	r19, 0xB8	; 184
    2b3e:	48 e0       	ldi	r20, 0x08	; 8
    2b40:	5e e3       	ldi	r21, 0x3E	; 62
    2b42:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2b46:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2b4a:	d4 01       	movw	r26, r8
    2b4c:	6d 93       	st	X+, r22
    2b4e:	7c 93       	st	X, r23
    2b50:	69 85       	ldd	r22, Y+9	; 0x09
    2b52:	7a 85       	ldd	r23, Y+10	; 0x0a
    2b54:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b56:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b58:	a6 01       	movw	r20, r12
    2b5a:	95 01       	movw	r18, r10
    2b5c:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2b60:	2c ed       	ldi	r18, 0xDC	; 220
    2b62:	38 eb       	ldi	r19, 0xB8	; 184
    2b64:	48 e0       	ldi	r20, 0x08	; 8
    2b66:	5e e3       	ldi	r21, 0x3E	; 62
    2b68:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2b6c:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2b70:	f4 01       	movw	r30, r8
    2b72:	73 83       	std	Z+3, r23	; 0x03
    2b74:	62 83       	std	Z+2, r22	; 0x02
    2b76:	6d 85       	ldd	r22, Y+13	; 0x0d
    2b78:	7e 85       	ldd	r23, Y+14	; 0x0e
    2b7a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b7c:	98 89       	ldd	r25, Y+16	; 0x10
    2b7e:	a6 01       	movw	r20, r12
    2b80:	95 01       	movw	r18, r10
    2b82:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    2b86:	2c ed       	ldi	r18, 0xDC	; 220
    2b88:	38 eb       	ldi	r19, 0xB8	; 184
    2b8a:	48 e0       	ldi	r20, 0x08	; 8
    2b8c:	5e e3       	ldi	r21, 0x3E	; 62
    2b8e:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    2b92:	0e 94 5c 2c 	call	0x58b8	; 0x58b8 <__fixunssfsi>
    2b96:	d4 01       	movw	r26, r8
    2b98:	15 96       	adiw	r26, 0x05	; 5
    2b9a:	7c 93       	st	X, r23
    2b9c:	6e 93       	st	-X, r22
    2b9e:	14 97       	sbiw	r26, 0x04	; 4
    2ba0:	16 96       	adiw	r26, 0x06	; 6
    2ba2:	2c 92       	st	X, r2
    2ba4:	16 97       	sbiw	r26, 0x06	; 6
    2ba6:	18 96       	adiw	r26, 0x08	; 8
    2ba8:	1c 92       	st	X, r1
    2baa:	1e 92       	st	-X, r1
    2bac:	17 97       	sbiw	r26, 0x07	; 7
    2bae:	80 e0       	ldi	r24, 0x00	; 0
    2bb0:	62 e0       	ldi	r22, 0x02	; 2
    2bb2:	43 2d       	mov	r20, r3
    2bb4:	29 8d       	ldd	r18, Y+25	; 0x19
    2bb6:	3a 8d       	ldd	r19, Y+26	; 0x1a
    2bb8:	0d 8d       	ldd	r16, Y+29	; 0x1d
    2bba:	1e 8d       	ldd	r17, Y+30	; 0x1e
    2bbc:	72 01       	movw	r14, r4
    2bbe:	c2 2c       	mov	r12, r2
    2bc0:	aa 24       	eor	r10, r10
    2bc2:	bb 24       	eor	r11, r11
    2bc4:	83 2c       	mov	r8, r3
    2bc6:	0e 94 b0 1b 	call	0x3760	; 0x3760 <STEPPER_move>
    2bca:	81 e0       	ldi	r24, 0x01	; 1
    2bcc:	ed b7       	in	r30, 0x3d	; 61
    2bce:	fe b7       	in	r31, 0x3e	; 62
    2bd0:	39 96       	adiw	r30, 0x09	; 9
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	fe bf       	out	0x3e, r31	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    2bdc:	a0 96       	adiw	r28, 0x20	; 32
    2bde:	0f b6       	in	r0, 0x3f	; 63
    2be0:	f8 94       	cli
    2be2:	de bf       	out	0x3e, r29	; 62
    2be4:	0f be       	out	0x3f, r0	; 63
    2be6:	cd bf       	out	0x3d, r28	; 61
    2be8:	cf 91       	pop	r28
    2bea:	df 91       	pop	r29
    2bec:	1f 91       	pop	r17
    2bee:	0f 91       	pop	r16
    2bf0:	ff 90       	pop	r15
    2bf2:	ef 90       	pop	r14
    2bf4:	df 90       	pop	r13
    2bf6:	cf 90       	pop	r12
    2bf8:	bf 90       	pop	r11
    2bfa:	af 90       	pop	r10
    2bfc:	9f 90       	pop	r9
    2bfe:	8f 90       	pop	r8
    2c00:	7f 90       	pop	r7
    2c02:	6f 90       	pop	r6
    2c04:	5f 90       	pop	r5
    2c06:	4f 90       	pop	r4
    2c08:	3f 90       	pop	r3
    2c0a:	2f 90       	pop	r2
    2c0c:	08 95       	ret

00002c0e <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    2c0e:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    2c12:	28 2f       	mov	r18, r24
    2c14:	21 70       	andi	r18, 0x01	; 1
    2c16:	20 93 36 06 	sts	0x0636, r18
	leftContact =  (0b00000010 & sensors)>>1;
    2c1a:	90 e0       	ldi	r25, 0x00	; 0
    2c1c:	82 70       	andi	r24, 0x02	; 2
    2c1e:	90 70       	andi	r25, 0x00	; 0
    2c20:	95 95       	asr	r25
    2c22:	87 95       	ror	r24
    2c24:	80 93 37 06 	sts	0x0637, r24
}
    2c28:	08 95       	ret

00002c2a <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    2c2a:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    2c2e:	60 93 1e 05 	sts	0x051E, r22
    2c32:	70 93 1f 05 	sts	0x051F, r23
    2c36:	80 93 20 05 	sts	0x0520, r24
    2c3a:	90 93 21 05 	sts	0x0521, r25
	leftLightVolt = getLeftLight();
    2c3e:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    2c42:	60 93 c5 06 	sts	0x06C5, r22
    2c46:	70 93 c6 06 	sts	0x06C6, r23
    2c4a:	80 93 c7 06 	sts	0x06C7, r24
    2c4e:	90 93 c8 06 	sts	0x06C8, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    2c52:	08 95       	ret

00002c54 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    2c54:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    2c58:	60 93 87 04 	sts	0x0487, r22
    2c5c:	70 93 88 04 	sts	0x0488, r23
    2c60:	80 93 89 04 	sts	0x0489, r24
    2c64:	90 93 8a 04 	sts	0x048A, r25
	bkIR = getBackIR();
    2c68:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    2c6c:	60 93 91 04 	sts	0x0491, r22
    2c70:	70 93 92 04 	sts	0x0492, r23
    2c74:	80 93 93 04 	sts	0x0493, r24
    2c78:	90 93 94 04 	sts	0x0494, r25
	ltIR = getLeftIR();
    2c7c:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    2c80:	60 93 38 06 	sts	0x0638, r22
    2c84:	70 93 39 06 	sts	0x0639, r23
    2c88:	80 93 3a 06 	sts	0x063A, r24
    2c8c:	90 93 3b 06 	sts	0x063B, r25
	rtIR = getRightIR();
    2c90:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    2c94:	60 93 3d 06 	sts	0x063D, r22
    2c98:	70 93 3e 06 	sts	0x063E, r23
    2c9c:	80 93 3f 06 	sts	0x063F, r24
    2ca0:	90 93 40 06 	sts	0x0640, r25
}
    2ca4:	08 95       	ret

00002ca6 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    2ca6:	cf 92       	push	r12
    2ca8:	df 92       	push	r13
    2caa:	ef 92       	push	r14
    2cac:	ff 92       	push	r15
    2cae:	0f 93       	push	r16
    2cb0:	1f 93       	push	r17
    2cb2:	cf 93       	push	r28
    2cb4:	df 93       	push	r29
    2cb6:	16 2f       	mov	r17, r22
    2cb8:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    2cba:	0f e1       	ldi	r16, 0x1F	; 31
    2cbc:	f0 2e       	mov	r15, r16
    2cbe:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    2cc0:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    2cc2:	0f 2d       	mov	r16, r15
    2cc4:	06 95       	lsr	r16
    2cc6:	06 95       	lsr	r16
    2cc8:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    2cca:	c0 2f       	mov	r28, r16
    2ccc:	d0 e0       	ldi	r29, 0x00	; 0
    2cce:	c1 2e       	mov	r12, r17
    2cd0:	dd 24       	eor	r13, r13
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	b6 01       	movw	r22, r12
    2cd6:	0e 94 95 19 	call	0x332a	; 0x332a <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    2cda:	80 2f       	mov	r24, r16
    2cdc:	61 2f       	mov	r22, r17
    2cde:	0e 94 8e 19 	call	0x331c	; 0x331c <LCD_set_next_PGC>
    2ce2:	fe 01       	movw	r30, r28
    2ce4:	b5 e0       	ldi	r27, 0x05	; 5
    2ce6:	ee 0f       	add	r30, r30
    2ce8:	ff 1f       	adc	r31, r31
    2cea:	ba 95       	dec	r27
    2cec:	e1 f7       	brne	.-8      	; 0x2ce6 <LCD_set_pixel+0x40>
    2cee:	2f 2d       	mov	r18, r15
    2cf0:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    2cf2:	ee 20       	and	r14, r14
    2cf4:	89 f0       	breq	.+34     	; 0x2d18 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    2cf6:	ec 0d       	add	r30, r12
    2cf8:	fd 1d       	adc	r31, r13
    2cfa:	e0 55       	subi	r30, 0x50	; 80
    2cfc:	fa 4f       	sbci	r31, 0xFA	; 250
    2cfe:	27 70       	andi	r18, 0x07	; 7
    2d00:	30 70       	andi	r19, 0x00	; 0
    2d02:	81 e0       	ldi	r24, 0x01	; 1
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	02 c0       	rjmp	.+4      	; 0x2d0c <LCD_set_pixel+0x66>
    2d08:	88 0f       	add	r24, r24
    2d0a:	99 1f       	adc	r25, r25
    2d0c:	2a 95       	dec	r18
    2d0e:	e2 f7       	brpl	.-8      	; 0x2d08 <LCD_set_pixel+0x62>
    2d10:	20 81       	ld	r18, Z
    2d12:	28 2b       	or	r18, r24
    2d14:	20 83       	st	Z, r18
    2d16:	11 c0       	rjmp	.+34     	; 0x2d3a <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    2d18:	ec 0d       	add	r30, r12
    2d1a:	fd 1d       	adc	r31, r13
    2d1c:	e0 55       	subi	r30, 0x50	; 80
    2d1e:	fa 4f       	sbci	r31, 0xFA	; 250
    2d20:	27 70       	andi	r18, 0x07	; 7
    2d22:	30 70       	andi	r19, 0x00	; 0
    2d24:	81 e0       	ldi	r24, 0x01	; 1
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	02 c0       	rjmp	.+4      	; 0x2d2e <LCD_set_pixel+0x88>
    2d2a:	88 0f       	add	r24, r24
    2d2c:	99 1f       	adc	r25, r25
    2d2e:	2a 95       	dec	r18
    2d30:	e2 f7       	brpl	.-8      	; 0x2d2a <LCD_set_pixel+0x84>
    2d32:	80 95       	com	r24
    2d34:	20 81       	ld	r18, Z
    2d36:	82 23       	and	r24, r18
    2d38:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    2d3a:	a5 e0       	ldi	r26, 0x05	; 5
    2d3c:	cc 0f       	add	r28, r28
    2d3e:	dd 1f       	adc	r29, r29
    2d40:	aa 95       	dec	r26
    2d42:	e1 f7       	brne	.-8      	; 0x2d3c <LCD_set_pixel+0x96>
    2d44:	cc 0d       	add	r28, r12
    2d46:	dd 1d       	adc	r29, r13
    2d48:	c0 55       	subi	r28, 0x50	; 80
    2d4a:	da 4f       	sbci	r29, 0xFA	; 250
    2d4c:	88 81       	ld	r24, Y
    2d4e:	61 e0       	ldi	r22, 0x01	; 1
    2d50:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
}
    2d54:	df 91       	pop	r29
    2d56:	cf 91       	pop	r28
    2d58:	1f 91       	pop	r17
    2d5a:	0f 91       	pop	r16
    2d5c:	ff 90       	pop	r15
    2d5e:	ef 90       	pop	r14
    2d60:	df 90       	pop	r13
    2d62:	cf 90       	pop	r12
    2d64:	08 95       	ret

00002d66 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent){
    2d66:	9f 92       	push	r9
    2d68:	af 92       	push	r10
    2d6a:	bf 92       	push	r11
    2d6c:	cf 92       	push	r12
    2d6e:	df 92       	push	r13
    2d70:	ef 92       	push	r14
    2d72:	ff 92       	push	r15
    2d74:	0f 93       	push	r16
    2d76:	1f 93       	push	r17
    2d78:	a8 2e       	mov	r10, r24
    2d7a:	d6 2e       	mov	r13, r22
    2d7c:	e4 2e       	mov	r14, r20
    2d7e:	b2 2e       	mov	r11, r18
    2d80:	90 2e       	mov	r9, r16

	r = r*LCD_CELL_OFFSET;
    2d82:	dd 0c       	add	r13, r13
    2d84:	dd 0c       	add	r13, r13
    2d86:	dd 0c       	add	r13, r13
	c = c*LCD_CELL_OFFSET;
    2d88:	ff 24       	eor	r15, r15
    2d8a:	53 e0       	ldi	r21, 0x03	; 3
    2d8c:	ee 0c       	add	r14, r14
    2d8e:	ff 1c       	adc	r15, r15
    2d90:	5a 95       	dec	r21
    2d92:	e1 f7       	brne	.-8      	; 0x2d8c <printCell+0x26>
    2d94:	1e 2d       	mov	r17, r14
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    2d96:	0f e1       	ldi	r16, 0x1F	; 31
    2d98:	0d 19       	sub	r16, r13
    2d9a:	80 2f       	mov	r24, r16
    2d9c:	6e 2d       	mov	r22, r14
    2d9e:	41 e0       	ldi	r20, 0x01	; 1
    2da0:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    2da4:	48 e1       	ldi	r20, 0x18	; 24
    2da6:	c4 2e       	mov	r12, r20
    2da8:	cd 18       	sub	r12, r13
    2daa:	8c 2d       	mov	r24, r12
    2dac:	6e 2d       	mov	r22, r14
    2dae:	41 e0       	ldi	r20, 0x01	; 1
    2db0:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    2db4:	37 e0       	ldi	r19, 0x07	; 7
    2db6:	f3 2e       	mov	r15, r19
    2db8:	f1 0e       	add	r15, r17
    2dba:	80 2f       	mov	r24, r16
    2dbc:	6f 2d       	mov	r22, r15
    2dbe:	41 e0       	ldi	r20, 0x01	; 1
    2dc0:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    2dc4:	8c 2d       	mov	r24, r12
    2dc6:	6f 2d       	mov	r22, r15
    2dc8:	41 e0       	ldi	r20, 0x01	; 1
    2dca:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
	
	if(cell&0b1000){
    2dce:	ea 2c       	mov	r14, r10
    2dd0:	a3 fe       	sbrs	r10, 3
    2dd2:	24 c0       	rjmp	.+72     	; 0x2e1c <printCell+0xb6>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    2dd4:	61 2f       	mov	r22, r17
    2dd6:	6f 5f       	subi	r22, 0xFF	; 255
    2dd8:	80 2f       	mov	r24, r16
    2dda:	41 e0       	ldi	r20, 0x01	; 1
    2ddc:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    2de0:	61 2f       	mov	r22, r17
    2de2:	6e 5f       	subi	r22, 0xFE	; 254
    2de4:	80 2f       	mov	r24, r16
    2de6:	41 e0       	ldi	r20, 0x01	; 1
    2de8:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    2dec:	61 2f       	mov	r22, r17
    2dee:	6d 5f       	subi	r22, 0xFD	; 253
    2df0:	80 2f       	mov	r24, r16
    2df2:	41 e0       	ldi	r20, 0x01	; 1
    2df4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    2df8:	61 2f       	mov	r22, r17
    2dfa:	6c 5f       	subi	r22, 0xFC	; 252
    2dfc:	80 2f       	mov	r24, r16
    2dfe:	41 e0       	ldi	r20, 0x01	; 1
    2e00:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    2e04:	61 2f       	mov	r22, r17
    2e06:	6b 5f       	subi	r22, 0xFB	; 251
    2e08:	80 2f       	mov	r24, r16
    2e0a:	41 e0       	ldi	r20, 0x01	; 1
    2e0c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    2e10:	61 2f       	mov	r22, r17
    2e12:	6a 5f       	subi	r22, 0xFA	; 250
    2e14:	80 2f       	mov	r24, r16
    2e16:	41 e0       	ldi	r20, 0x01	; 1
    2e18:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
	}
	if(cell&0b0100){
    2e1c:	e2 fe       	sbrs	r14, 2
    2e1e:	25 c0       	rjmp	.+74     	; 0x2e6a <printCell+0x104>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    2e20:	8d 2d       	mov	r24, r13
    2e22:	80 95       	com	r24
    2e24:	81 5e       	subi	r24, 0xE1	; 225
    2e26:	6f 2d       	mov	r22, r15
    2e28:	41 e0       	ldi	r20, 0x01	; 1
    2e2a:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    2e2e:	8d e1       	ldi	r24, 0x1D	; 29
    2e30:	8d 19       	sub	r24, r13
    2e32:	6f 2d       	mov	r22, r15
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    2e3a:	8c e1       	ldi	r24, 0x1C	; 28
    2e3c:	8d 19       	sub	r24, r13
    2e3e:	6f 2d       	mov	r22, r15
    2e40:	41 e0       	ldi	r20, 0x01	; 1
    2e42:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    2e46:	8b e1       	ldi	r24, 0x1B	; 27
    2e48:	8d 19       	sub	r24, r13
    2e4a:	6f 2d       	mov	r22, r15
    2e4c:	41 e0       	ldi	r20, 0x01	; 1
    2e4e:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    2e52:	8a e1       	ldi	r24, 0x1A	; 26
    2e54:	8d 19       	sub	r24, r13
    2e56:	6f 2d       	mov	r22, r15
    2e58:	41 e0       	ldi	r20, 0x01	; 1
    2e5a:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    2e5e:	89 e1       	ldi	r24, 0x19	; 25
    2e60:	8d 19       	sub	r24, r13
    2e62:	6f 2d       	mov	r22, r15
    2e64:	41 e0       	ldi	r20, 0x01	; 1
    2e66:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
	}
	if(cell&0b0010){
    2e6a:	e1 fe       	sbrs	r14, 1
    2e6c:	24 c0       	rjmp	.+72     	; 0x2eb6 <printCell+0x150>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    2e6e:	61 2f       	mov	r22, r17
    2e70:	6f 5f       	subi	r22, 0xFF	; 255
    2e72:	8c 2d       	mov	r24, r12
    2e74:	41 e0       	ldi	r20, 0x01	; 1
    2e76:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    2e7a:	61 2f       	mov	r22, r17
    2e7c:	6e 5f       	subi	r22, 0xFE	; 254
    2e7e:	8c 2d       	mov	r24, r12
    2e80:	41 e0       	ldi	r20, 0x01	; 1
    2e82:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    2e86:	61 2f       	mov	r22, r17
    2e88:	6d 5f       	subi	r22, 0xFD	; 253
    2e8a:	8c 2d       	mov	r24, r12
    2e8c:	41 e0       	ldi	r20, 0x01	; 1
    2e8e:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    2e92:	61 2f       	mov	r22, r17
    2e94:	6c 5f       	subi	r22, 0xFC	; 252
    2e96:	8c 2d       	mov	r24, r12
    2e98:	41 e0       	ldi	r20, 0x01	; 1
    2e9a:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    2e9e:	61 2f       	mov	r22, r17
    2ea0:	6b 5f       	subi	r22, 0xFB	; 251
    2ea2:	8c 2d       	mov	r24, r12
    2ea4:	41 e0       	ldi	r20, 0x01	; 1
    2ea6:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    2eaa:	61 2f       	mov	r22, r17
    2eac:	6a 5f       	subi	r22, 0xFA	; 250
    2eae:	8c 2d       	mov	r24, r12
    2eb0:	41 e0       	ldi	r20, 0x01	; 1
    2eb2:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
	}
	if(cell&0b0001){
    2eb6:	e0 fe       	sbrs	r14, 0
    2eb8:	25 c0       	rjmp	.+74     	; 0x2f04 <printCell+0x19e>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    2eba:	8d 2d       	mov	r24, r13
    2ebc:	80 95       	com	r24
    2ebe:	81 5e       	subi	r24, 0xE1	; 225
    2ec0:	61 2f       	mov	r22, r17
    2ec2:	41 e0       	ldi	r20, 0x01	; 1
    2ec4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    2ec8:	8d e1       	ldi	r24, 0x1D	; 29
    2eca:	8d 19       	sub	r24, r13
    2ecc:	61 2f       	mov	r22, r17
    2ece:	41 e0       	ldi	r20, 0x01	; 1
    2ed0:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    2ed4:	8c e1       	ldi	r24, 0x1C	; 28
    2ed6:	8d 19       	sub	r24, r13
    2ed8:	61 2f       	mov	r22, r17
    2eda:	41 e0       	ldi	r20, 0x01	; 1
    2edc:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    2ee0:	8b e1       	ldi	r24, 0x1B	; 27
    2ee2:	8d 19       	sub	r24, r13
    2ee4:	61 2f       	mov	r22, r17
    2ee6:	41 e0       	ldi	r20, 0x01	; 1
    2ee8:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    2eec:	8a e1       	ldi	r24, 0x1A	; 26
    2eee:	8d 19       	sub	r24, r13
    2ef0:	61 2f       	mov	r22, r17
    2ef2:	41 e0       	ldi	r20, 0x01	; 1
    2ef4:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    2ef8:	89 e1       	ldi	r24, 0x19	; 25
    2efa:	8d 19       	sub	r24, r13
    2efc:	61 2f       	mov	r22, r17
    2efe:	41 e0       	ldi	r20, 0x01	; 1
    2f00:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
	}	
	if(isrobot){
    2f04:	bb 20       	and	r11, r11
    2f06:	e1 f1       	breq	.+120    	; 0x2f80 <printCell+0x21a>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    2f08:	2c e1       	ldi	r18, 0x1C	; 28
    2f0a:	f2 2e       	mov	r15, r18
    2f0c:	fd 18       	sub	r15, r13
    2f0e:	93 e0       	ldi	r25, 0x03	; 3
    2f10:	c9 2e       	mov	r12, r25
    2f12:	c1 0e       	add	r12, r17
    2f14:	8f 2d       	mov	r24, r15
    2f16:	6c 2d       	mov	r22, r12
    2f18:	4b 2d       	mov	r20, r11
    2f1a:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    2f1e:	8b e1       	ldi	r24, 0x1B	; 27
    2f20:	e8 2e       	mov	r14, r24
    2f22:	ed 18       	sub	r14, r13
    2f24:	8e 2d       	mov	r24, r14
    2f26:	6c 2d       	mov	r22, r12
    2f28:	4b 2d       	mov	r20, r11
    2f2a:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    2f2e:	01 2f       	mov	r16, r17
    2f30:	0c 5f       	subi	r16, 0xFC	; 252
    2f32:	8f 2d       	mov	r24, r15
    2f34:	60 2f       	mov	r22, r16
    2f36:	4b 2d       	mov	r20, r11
    2f38:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    2f3c:	8e 2d       	mov	r24, r14
    2f3e:	60 2f       	mov	r22, r16
    2f40:	4b 2d       	mov	r20, r11
    2f42:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
		
		switch(orent){
    2f46:	81 e0       	ldi	r24, 0x01	; 1
    2f48:	98 16       	cp	r9, r24
    2f4a:	69 f0       	breq	.+26     	; 0x2f66 <printCell+0x200>
    2f4c:	98 16       	cp	r9, r24
    2f4e:	38 f0       	brcs	.+14     	; 0x2f5e <printCell+0x1f8>
    2f50:	82 e0       	ldi	r24, 0x02	; 2
    2f52:	98 16       	cp	r9, r24
    2f54:	59 f0       	breq	.+22     	; 0x2f6c <printCell+0x206>
    2f56:	83 e0       	ldi	r24, 0x03	; 3
    2f58:	98 16       	cp	r9, r24
    2f5a:	91 f4       	brne	.+36     	; 0x2f80 <printCell+0x21a>
    2f5c:	0b c0       	rjmp	.+22     	; 0x2f74 <printCell+0x20e>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    2f5e:	8d e1       	ldi	r24, 0x1D	; 29
    2f60:	8d 19       	sub	r24, r13
    2f62:	6c 2d       	mov	r22, r12
    2f64:	0a c0       	rjmp	.+20     	; 0x2f7a <printCell+0x214>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    2f66:	1b 5f       	subi	r17, 0xFB	; 251
    2f68:	8f 2d       	mov	r24, r15
    2f6a:	06 c0       	rjmp	.+12     	; 0x2f78 <printCell+0x212>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    2f6c:	8a e1       	ldi	r24, 0x1A	; 26
    2f6e:	8d 19       	sub	r24, r13
    2f70:	60 2f       	mov	r22, r16
    2f72:	03 c0       	rjmp	.+6      	; 0x2f7a <printCell+0x214>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    2f74:	1e 5f       	subi	r17, 0xFE	; 254
    2f76:	8e 2d       	mov	r24, r14
    2f78:	61 2f       	mov	r22, r17
    2f7a:	4b 2d       	mov	r20, r11
    2f7c:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <LCD_set_pixel>
				break;
			default:
				break;
		}
	}
}
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	ff 90       	pop	r15
    2f86:	ef 90       	pop	r14
    2f88:	df 90       	pop	r13
    2f8a:	cf 90       	pop	r12
    2f8c:	bf 90       	pop	r11
    2f8e:	af 90       	pop	r10
    2f90:	9f 90       	pop	r9
    2f92:	08 95       	ret

00002f94 <printMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(void)
{
    2f94:	bf 92       	push	r11
    2f96:	cf 92       	push	r12
    2f98:	df 92       	push	r13
    2f9a:	ef 92       	push	r14
    2f9c:	ff 92       	push	r15
    2f9e:	0f 93       	push	r16
    2fa0:	1f 93       	push	r17
    2fa2:	cf 93       	push	r28
    2fa4:	df 93       	push	r29
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    2fa6:	80 91 34 06 	lds	r24, 0x0634
    2faa:	b8 2e       	mov	r11, r24
    2fac:	b6 94       	lsr	r11
    2fae:	b6 94       	lsr	r11
	unsigned char curCol = currentCellWorld & 0b0011;
    2fb0:	73 e0       	ldi	r23, 0x03	; 3
    2fb2:	c7 2e       	mov	r12, r23
    2fb4:	c8 22       	and	r12, r24
    2fb6:	ee 24       	eor	r14, r14
    2fb8:	ff 24       	eor	r15, r15
    2fba:	1d c0       	rjmp	.+58     	; 0x2ff6 <printMap+0x62>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    2fbc:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    2fbe:	db 14       	cp	r13, r11
    2fc0:	19 f0       	breq	.+6      	; 0x2fc8 <printMap+0x34>
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	06 c0       	rjmp	.+12     	; 0x2fd4 <printMap+0x40>
    2fc8:	20 e0       	ldi	r18, 0x00	; 0
    2fca:	30 e0       	ldi	r19, 0x00	; 0
    2fcc:	1c 15       	cp	r17, r12
    2fce:	11 f4       	brne	.+4      	; 0x2fd4 <printMap+0x40>
    2fd0:	21 e0       	ldi	r18, 0x01	; 1
    2fd2:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation);
    2fd4:	6d 2d       	mov	r22, r13
    2fd6:	41 2f       	mov	r20, r17
    2fd8:	00 91 33 05 	lds	r16, 0x0533
    2fdc:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    2fe0:	1f 5f       	subi	r17, 0xFF	; 255
    2fe2:	21 96       	adiw	r28, 0x01	; 1
    2fe4:	14 30       	cpi	r17, 0x04	; 4
    2fe6:	51 f7       	brne	.-44     	; 0x2fbc <printMap+0x28>
    2fe8:	08 94       	sec
    2fea:	e1 1c       	adc	r14, r1
    2fec:	f1 1c       	adc	r15, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    2fee:	84 e0       	ldi	r24, 0x04	; 4
    2ff0:	e8 16       	cp	r14, r24
    2ff2:	f1 04       	cpc	r15, r1
    2ff4:	51 f0       	breq	.+20     	; 0x300a <printMap+0x76>
    2ff6:	de 2c       	mov	r13, r14
    2ff8:	e7 01       	movw	r28, r14
    2ffa:	cc 0f       	add	r28, r28
    2ffc:	dd 1f       	adc	r29, r29
    2ffe:	cc 0f       	add	r28, r28
    3000:	dd 1f       	adc	r29, r29
    3002:	ce 5d       	subi	r28, 0xDE	; 222
    3004:	da 4f       	sbci	r29, 0xFA	; 250
    3006:	10 e0       	ldi	r17, 0x00	; 0
    3008:	d9 cf       	rjmp	.-78     	; 0x2fbc <printMap+0x28>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation);
		}	
	}
}
    300a:	df 91       	pop	r29
    300c:	cf 91       	pop	r28
    300e:	1f 91       	pop	r17
    3010:	0f 91       	pop	r16
    3012:	ff 90       	pop	r15
    3014:	ef 90       	pop	r14
    3016:	df 90       	pop	r13
    3018:	cf 90       	pop	r12
    301a:	bf 90       	pop	r11
    301c:	08 95       	ret

0000301e <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    301e:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <ATTINY_open>
    3022:	90 93 08 04 	sts	0x0408, r25
    3026:	80 93 07 04 	sts	0x0407, r24
	LEopstat = LED_open(); //open the LED module
    302a:	0e 94 d5 19 	call	0x33aa	; 0x33aa <LED_open>
    302e:	90 93 06 04 	sts	0x0406, r25
    3032:	80 93 05 04 	sts	0x0405, r24
	LCopstat = LCD_open(); //open the LCD module
    3036:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <LCD_open>
    303a:	90 93 04 04 	sts	0x0404, r25
    303e:	80 93 03 04 	sts	0x0403, r24
	STEPPER_open(); // Open STEPPER module for use
    3042:	0e 94 57 1c 	call	0x38ae	; 0x38ae <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    3046:	82 e0       	ldi	r24, 0x02	; 2
    3048:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <SPKR_open>
	
	LED_open();
    304c:	0e 94 d5 19 	call	0x33aa	; 0x33aa <LED_open>
	I2C_open();
    3050:	0e 94 9a 20 	call	0x4134	; 0x4134 <I2C_open>
	ADC_open();//open the ADC module
    3054:	0e 94 59 18 	call	0x30b2	; 0x30b2 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    3058:	81 e0       	ldi	r24, 0x01	; 1
    305a:	0e 94 bb 18 	call	0x3176	; 0x3176 <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    305e:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <checkIR>
	prefilter(1);
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	0e 94 a4 0c 	call	0x1948	; 0x1948 <prefilter>
	
	odometryTrigger = WORLD_RESOLUTION_SIZE/D_STEP;
    3068:	8a e9       	ldi	r24, 0x9A	; 154
    306a:	96 e3       	ldi	r25, 0x36	; 54
    306c:	ab ea       	ldi	r26, 0xAB	; 171
    306e:	b3 e4       	ldi	r27, 0x43	; 67
    3070:	80 93 0e 05 	sts	0x050E, r24
    3074:	90 93 0f 05 	sts	0x050F, r25
    3078:	a0 93 10 05 	sts	0x0510, r26
    307c:	b0 93 11 05 	sts	0x0511, r27
    3080:	20 e0       	ldi	r18, 0x00	; 0
    3082:	30 e0       	ldi	r19, 0x00	; 0
    3084:	0a c0       	rjmp	.+20     	; 0x309a <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    3086:	11 92       	st	Z+, r1
	
	odometryTrigger = WORLD_RESOLUTION_SIZE/D_STEP;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    3088:	01 96       	adiw	r24, 0x01	; 1
    308a:	80 32       	cpi	r24, 0x20	; 32
    308c:	91 05       	cpc	r25, r1
    308e:	d9 f7       	brne	.-10     	; 0x3086 <initializeRobot+0x68>
	prefilter(1);
	
	odometryTrigger = WORLD_RESOLUTION_SIZE/D_STEP;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    3090:	2f 5f       	subi	r18, 0xFF	; 255
    3092:	3f 4f       	sbci	r19, 0xFF	; 255
    3094:	24 30       	cpi	r18, 0x04	; 4
    3096:	31 05       	cpc	r19, r1
    3098:	59 f0       	breq	.+22     	; 0x30b0 <initializeRobot+0x92>
    309a:	f9 01       	movw	r30, r18
    309c:	a5 e0       	ldi	r26, 0x05	; 5
    309e:	ee 0f       	add	r30, r30
    30a0:	ff 1f       	adc	r31, r31
    30a2:	aa 95       	dec	r26
    30a4:	e1 f7       	brne	.-8      	; 0x309e <initializeRobot+0x80>
    30a6:	e0 55       	subi	r30, 0x50	; 80
    30a8:	fa 4f       	sbci	r31, 0xFA	; 250
    30aa:	80 e0       	ldi	r24, 0x00	; 0
    30ac:	90 e0       	ldi	r25, 0x00	; 0
    30ae:	eb cf       	rjmp	.-42     	; 0x3086 <initializeRobot+0x68>
    30b0:	08 95       	ret

000030b2 <ADC_open>:
    30b2:	8f e0       	ldi	r24, 0x0F	; 15
    30b4:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    30b8:	88 23       	and	r24, r24
    30ba:	31 f4       	brne	.+12     	; 0x30c8 <ADC_open+0x16>
    30bc:	0e 94 c1 20 	call	0x4182	; 0x4182 <__ADC_init>
    30c0:	8f e0       	ldi	r24, 0x0F	; 15
    30c2:	61 e0       	ldi	r22, 0x01	; 1
    30c4:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    30c8:	8f e0       	ldi	r24, 0x0F	; 15
    30ca:	91 e0       	ldi	r25, 0x01	; 1
    30cc:	08 95       	ret

000030ce <ADC_sample>:
    30ce:	8f e0       	ldi	r24, 0x0F	; 15
    30d0:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    30d4:	81 30       	cpi	r24, 0x01	; 1
    30d6:	19 f0       	breq	.+6      	; 0x30de <ADC_sample+0x10>
    30d8:	20 e0       	ldi	r18, 0x00	; 0
    30da:	30 e0       	ldi	r19, 0x00	; 0
    30dc:	13 c0       	rjmp	.+38     	; 0x3104 <ADC_sample+0x36>
    30de:	80 91 7a 00 	lds	r24, 0x007A
    30e2:	80 64       	ori	r24, 0x40	; 64
    30e4:	80 93 7a 00 	sts	0x007A, r24
    30e8:	80 91 7a 00 	lds	r24, 0x007A
    30ec:	86 fd       	sbrc	r24, 6
    30ee:	fc cf       	rjmp	.-8      	; 0x30e8 <ADC_sample+0x1a>
    30f0:	30 91 78 00 	lds	r19, 0x0078
    30f4:	20 91 79 00 	lds	r18, 0x0079
    30f8:	92 2f       	mov	r25, r18
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	23 2f       	mov	r18, r19
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	28 2b       	or	r18, r24
    3102:	39 2b       	or	r19, r25
    3104:	c9 01       	movw	r24, r18
    3106:	08 95       	ret

00003108 <ADC_set_channel>:
    3108:	58 2f       	mov	r21, r24
    310a:	80 91 2c 03 	lds	r24, 0x032C
    310e:	88 30       	cpi	r24, 0x08	; 8
    3110:	d8 f4       	brcc	.+54     	; 0x3148 <ADC_set_channel+0x40>
    3112:	40 91 7e 00 	lds	r20, 0x007E
    3116:	21 e0       	ldi	r18, 0x01	; 1
    3118:	30 e0       	ldi	r19, 0x00	; 0
    311a:	b9 01       	movw	r22, r18
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <ADC_set_channel+0x1a>
    311e:	66 0f       	add	r22, r22
    3120:	77 1f       	adc	r23, r23
    3122:	8a 95       	dec	r24
    3124:	e2 f7       	brpl	.-8      	; 0x311e <ADC_set_channel+0x16>
    3126:	cb 01       	movw	r24, r22
    3128:	80 95       	com	r24
    312a:	84 23       	and	r24, r20
    312c:	80 93 7e 00 	sts	0x007E, r24
    3130:	80 91 7e 00 	lds	r24, 0x007E
    3134:	05 2e       	mov	r0, r21
    3136:	02 c0       	rjmp	.+4      	; 0x313c <ADC_set_channel+0x34>
    3138:	22 0f       	add	r18, r18
    313a:	33 1f       	adc	r19, r19
    313c:	0a 94       	dec	r0
    313e:	e2 f7       	brpl	.-8      	; 0x3138 <ADC_set_channel+0x30>
    3140:	82 2b       	or	r24, r18
    3142:	80 93 7e 00 	sts	0x007E, r24
    3146:	0d c0       	rjmp	.+26     	; 0x3162 <ADC_set_channel+0x5a>
    3148:	20 91 7e 00 	lds	r18, 0x007E
    314c:	81 e0       	ldi	r24, 0x01	; 1
    314e:	90 e0       	ldi	r25, 0x00	; 0
    3150:	05 2e       	mov	r0, r21
    3152:	02 c0       	rjmp	.+4      	; 0x3158 <ADC_set_channel+0x50>
    3154:	88 0f       	add	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	0a 94       	dec	r0
    315a:	e2 f7       	brpl	.-8      	; 0x3154 <ADC_set_channel+0x4c>
    315c:	28 2b       	or	r18, r24
    315e:	20 93 7e 00 	sts	0x007E, r18
    3162:	50 93 2c 03 	sts	0x032C, r21
    3166:	80 91 7c 00 	lds	r24, 0x007C
    316a:	5f 71       	andi	r21, 0x1F	; 31
    316c:	80 7e       	andi	r24, 0xE0	; 224
    316e:	85 2b       	or	r24, r21
    3170:	80 93 7c 00 	sts	0x007C, r24
    3174:	08 95       	ret

00003176 <ADC_set_VREF>:
    3176:	ec e7       	ldi	r30, 0x7C	; 124
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	90 81       	ld	r25, Z
    317c:	82 95       	swap	r24
    317e:	88 0f       	add	r24, r24
    3180:	88 0f       	add	r24, r24
    3182:	80 7c       	andi	r24, 0xC0	; 192
    3184:	9f 73       	andi	r25, 0x3F	; 63
    3186:	98 2b       	or	r25, r24
    3188:	90 83       	st	Z, r25
    318a:	08 95       	ret

0000318c <main>:
    318c:	0e 94 da 20 	call	0x41b4	; 0x41b4 <CBOT_ISR_init>
    3190:	0e 94 cc 20 	call	0x4198	; 0x4198 <CBOT_init>
    3194:	0e 94 32 0c 	call	0x1864	; 0x1864 <CBOT_main>
    3198:	80 e0       	ldi	r24, 0x00	; 0
    319a:	90 e0       	ldi	r25, 0x00	; 0
    319c:	08 95       	ret

0000319e <LCD_clear>:
    319e:	0f 93       	push	r16
    31a0:	1f 93       	push	r17
    31a2:	80 e4       	ldi	r24, 0x40	; 64
    31a4:	60 e0       	ldi	r22, 0x00	; 0
    31a6:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    31aa:	00 e0       	ldi	r16, 0x00	; 0
    31ac:	80 2f       	mov	r24, r16
    31ae:	60 e0       	ldi	r22, 0x00	; 0
    31b0:	0e 94 95 19 	call	0x332a	; 0x332a <LCD_set_PGC_addr>
    31b4:	10 e0       	ldi	r17, 0x00	; 0
    31b6:	80 e0       	ldi	r24, 0x00	; 0
    31b8:	61 e0       	ldi	r22, 0x01	; 1
    31ba:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    31be:	1f 5f       	subi	r17, 0xFF	; 255
    31c0:	10 38       	cpi	r17, 0x80	; 128
    31c2:	c9 f7       	brne	.-14     	; 0x31b6 <LCD_clear+0x18>
    31c4:	0f 5f       	subi	r16, 0xFF	; 255
    31c6:	04 30       	cpi	r16, 0x04	; 4
    31c8:	89 f7       	brne	.-30     	; 0x31ac <LCD_clear+0xe>
    31ca:	83 e0       	ldi	r24, 0x03	; 3
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	0e 94 8e 19 	call	0x331c	; 0x331c <LCD_set_next_PGC>
    31d2:	1f 91       	pop	r17
    31d4:	0f 91       	pop	r16
    31d6:	08 95       	ret

000031d8 <LCD_open>:
    31d8:	0f 93       	push	r16
    31da:	1f 93       	push	r17
    31dc:	82 e0       	ldi	r24, 0x02	; 2
    31de:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    31e2:	88 23       	and	r24, r24
    31e4:	11 f4       	brne	.+4      	; 0x31ea <LCD_open+0x12>
    31e6:	82 e0       	ldi	r24, 0x02	; 2
    31e8:	06 c0       	rjmp	.+12     	; 0x31f6 <LCD_open+0x1e>
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    31f0:	88 23       	and	r24, r24
    31f2:	19 f4       	brne	.+6      	; 0x31fa <LCD_open+0x22>
    31f4:	81 e0       	ldi	r24, 0x01	; 1
    31f6:	90 e0       	ldi	r25, 0x00	; 0
    31f8:	6d c0       	rjmp	.+218    	; 0x32d4 <LCD_open+0xfc>
    31fa:	0e 94 42 23 	call	0x4684	; 0x4684 <__LCD_init>
    31fe:	85 e0       	ldi	r24, 0x05	; 5
    3200:	61 e0       	ldi	r22, 0x01	; 1
    3202:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    3206:	8e ea       	ldi	r24, 0xAE	; 174
    3208:	60 e0       	ldi	r22, 0x00	; 0
    320a:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    320e:	82 ea       	ldi	r24, 0xA2	; 162
    3210:	60 e0       	ldi	r22, 0x00	; 0
    3212:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    3216:	80 ea       	ldi	r24, 0xA0	; 160
    3218:	60 e0       	ldi	r22, 0x00	; 0
    321a:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    321e:	00 e5       	ldi	r16, 0x50	; 80
    3220:	13 ec       	ldi	r17, 0xC3	; 195
    3222:	c8 01       	movw	r24, r16
    3224:	01 97       	sbiw	r24, 0x01	; 1
    3226:	f1 f7       	brne	.-4      	; 0x3224 <LCD_open+0x4c>
    3228:	80 ec       	ldi	r24, 0xC0	; 192
    322a:	60 e0       	ldi	r22, 0x00	; 0
    322c:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    3230:	8f e2       	ldi	r24, 0x2F	; 47
    3232:	60 e0       	ldi	r22, 0x00	; 0
    3234:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    3238:	81 e8       	ldi	r24, 0x81	; 129
    323a:	60 e0       	ldi	r22, 0x00	; 0
    323c:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    3240:	86 e1       	ldi	r24, 0x16	; 22
    3242:	60 e0       	ldi	r22, 0x00	; 0
    3244:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    3248:	82 e2       	ldi	r24, 0x22	; 34
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    3250:	c8 01       	movw	r24, r16
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	f1 f7       	brne	.-4      	; 0x3252 <LCD_open+0x7a>
    3256:	8f ea       	ldi	r24, 0xAF	; 175
    3258:	60 e0       	ldi	r22, 0x00	; 0
    325a:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    325e:	86 ea       	ldi	r24, 0xA6	; 166
    3260:	60 e0       	ldi	r22, 0x00	; 0
    3262:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    3266:	85 ea       	ldi	r24, 0xA5	; 165
    3268:	60 e0       	ldi	r22, 0x00	; 0
    326a:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    326e:	80 e0       	ldi	r24, 0x00	; 0
    3270:	90 e0       	ldi	r25, 0x00	; 0
    3272:	28 e8       	ldi	r18, 0x88	; 136
    3274:	33 e1       	ldi	r19, 0x13	; 19
    3276:	f9 01       	movw	r30, r18
    3278:	31 97       	sbiw	r30, 0x01	; 1
    327a:	f1 f7       	brne	.-4      	; 0x3278 <LCD_open+0xa0>
    327c:	01 96       	adiw	r24, 0x01	; 1
    327e:	43 e0       	ldi	r20, 0x03	; 3
    3280:	88 3e       	cpi	r24, 0xE8	; 232
    3282:	94 07       	cpc	r25, r20
    3284:	c1 f7       	brne	.-16     	; 0x3276 <LCD_open+0x9e>
    3286:	83 eb       	ldi	r24, 0xB3	; 179
    3288:	60 e0       	ldi	r22, 0x00	; 0
    328a:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    328e:	80 e4       	ldi	r24, 0x40	; 64
    3290:	60 e0       	ldi	r22, 0x00	; 0
    3292:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    3296:	83 e0       	ldi	r24, 0x03	; 3
    3298:	60 e0       	ldi	r22, 0x00	; 0
    329a:	0e 94 95 19 	call	0x332a	; 0x332a <LCD_set_PGC_addr>
    329e:	83 e0       	ldi	r24, 0x03	; 3
    32a0:	60 e0       	ldi	r22, 0x00	; 0
    32a2:	0e 94 8e 19 	call	0x331c	; 0x331c <LCD_set_next_PGC>
    32a6:	10 92 1c 07 	sts	0x071C, r1
    32aa:	10 92 1e 07 	sts	0x071E, r1
    32ae:	10 92 1d 07 	sts	0x071D, r1
    32b2:	8b e3       	ldi	r24, 0x3B	; 59
    32b4:	93 e0       	ldi	r25, 0x03	; 3
    32b6:	90 93 4d 07 	sts	0x074D, r25
    32ba:	80 93 4c 07 	sts	0x074C, r24
    32be:	88 e1       	ldi	r24, 0x18	; 24
    32c0:	0e 94 6d 19 	call	0x32da	; 0x32da <LCD_set_backlight>
    32c4:	0e 94 cf 18 	call	0x319e	; 0x319e <LCD_clear>
    32c8:	84 ea       	ldi	r24, 0xA4	; 164
    32ca:	60 e0       	ldi	r22, 0x00	; 0
    32cc:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    32d0:	85 e0       	ldi	r24, 0x05	; 5
    32d2:	91 e0       	ldi	r25, 0x01	; 1
    32d4:	1f 91       	pop	r17
    32d6:	0f 91       	pop	r16
    32d8:	08 95       	ret

000032da <LCD_set_backlight>:
    32da:	1f 93       	push	r17
    32dc:	18 2f       	mov	r17, r24
    32de:	85 e0       	ldi	r24, 0x05	; 5
    32e0:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    32e4:	81 30       	cpi	r24, 0x01	; 1
    32e6:	c1 f4       	brne	.+48     	; 0x3318 <LCD_set_backlight+0x3e>
    32e8:	87 e0       	ldi	r24, 0x07	; 7
    32ea:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <SPI_set_slave_addr>
    32ee:	82 e0       	ldi	r24, 0x02	; 2
    32f0:	6a e0       	ldi	r22, 0x0A	; 10
    32f2:	0e 94 3b 1a 	call	0x3476	; 0x3476 <SPI_transmit>
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	61 eb       	ldi	r22, 0xB1	; 177
    32fa:	0e 94 3b 1a 	call	0x3476	; 0x3476 <SPI_transmit>
    32fe:	61 2f       	mov	r22, r17
    3300:	11 32       	cpi	r17, 0x21	; 33
    3302:	08 f0       	brcs	.+2      	; 0x3306 <LCD_set_backlight+0x2c>
    3304:	60 e2       	ldi	r22, 0x20	; 32
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	0e 94 3b 1a 	call	0x3476	; 0x3476 <SPI_transmit>
    330c:	89 ee       	ldi	r24, 0xE9	; 233
    330e:	8a 95       	dec	r24
    3310:	f1 f7       	brne	.-4      	; 0x330e <LCD_set_backlight+0x34>
    3312:	87 e0       	ldi	r24, 0x07	; 7
    3314:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <SPI_set_slave_addr>
    3318:	1f 91       	pop	r17
    331a:	08 95       	ret

0000331c <LCD_set_next_PGC>:
    331c:	83 70       	andi	r24, 0x03	; 3
    331e:	6f 77       	andi	r22, 0x7F	; 127
    3320:	60 93 1a 07 	sts	0x071A, r22
    3324:	80 93 1b 07 	sts	0x071B, r24
    3328:	08 95       	ret

0000332a <LCD_set_PGC_addr>:
    332a:	0f 93       	push	r16
    332c:	1f 93       	push	r17
    332e:	06 2f       	mov	r16, r22
    3330:	16 2f       	mov	r17, r22
    3332:	1f 77       	andi	r17, 0x7F	; 127
    3334:	83 70       	andi	r24, 0x03	; 3
    3336:	80 6b       	ori	r24, 0xB0	; 176
    3338:	60 e0       	ldi	r22, 0x00	; 0
    333a:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    333e:	12 95       	swap	r17
    3340:	1f 70       	andi	r17, 0x0F	; 15
    3342:	81 2f       	mov	r24, r17
    3344:	80 61       	ori	r24, 0x10	; 16
    3346:	60 e0       	ldi	r22, 0x00	; 0
    3348:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    334c:	80 2f       	mov	r24, r16
    334e:	8f 70       	andi	r24, 0x0F	; 15
    3350:	60 e0       	ldi	r22, 0x00	; 0
    3352:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    3356:	1f 91       	pop	r17
    3358:	0f 91       	pop	r16
    335a:	08 95       	ret

0000335c <LCD_write>:
    335c:	0f 93       	push	r16
    335e:	1f 93       	push	r17
    3360:	08 2f       	mov	r16, r24
    3362:	16 2f       	mov	r17, r22
    3364:	85 e0       	ldi	r24, 0x05	; 5
    3366:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    336a:	81 30       	cpi	r24, 0x01	; 1
    336c:	79 f4       	brne	.+30     	; 0x338c <LCD_write+0x30>
    336e:	11 23       	and	r17, r17
    3370:	19 f0       	breq	.+6      	; 0x3378 <LCD_write+0x1c>
    3372:	11 30       	cpi	r17, 0x01	; 1
    3374:	21 f4       	brne	.+8      	; 0x337e <LCD_write+0x22>
    3376:	02 c0       	rjmp	.+4      	; 0x337c <LCD_write+0x20>
    3378:	2b 98       	cbi	0x05, 3	; 5
    337a:	01 c0       	rjmp	.+2      	; 0x337e <LCD_write+0x22>
    337c:	2b 9a       	sbi	0x05, 3	; 5
    337e:	86 e0       	ldi	r24, 0x06	; 6
    3380:	8a 95       	dec	r24
    3382:	f1 f7       	brne	.-4      	; 0x3380 <LCD_write+0x24>
    3384:	80 e0       	ldi	r24, 0x00	; 0
    3386:	60 2f       	mov	r22, r16
    3388:	0e 94 3b 1a 	call	0x3476	; 0x3476 <SPI_transmit>
    338c:	1f 91       	pop	r17
    338e:	0f 91       	pop	r16
    3390:	08 95       	ret

00003392 <LED_clr_pattern>:
    3392:	1f 93       	push	r17
    3394:	18 2f       	mov	r17, r24
    3396:	86 e0       	ldi	r24, 0x06	; 6
    3398:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    339c:	81 30       	cpi	r24, 0x01	; 1
    339e:	19 f4       	brne	.+6      	; 0x33a6 <LED_clr_pattern+0x14>
    33a0:	81 2f       	mov	r24, r17
    33a2:	0e 94 f1 23 	call	0x47e2	; 0x47e2 <__LED_clr_pattern>
    33a6:	1f 91       	pop	r17
    33a8:	08 95       	ret

000033aa <LED_open>:
    33aa:	0e 94 f6 23 	call	0x47ec	; 0x47ec <__LED_init>
    33ae:	86 e0       	ldi	r24, 0x06	; 6
    33b0:	61 e0       	ldi	r22, 0x01	; 1
    33b2:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    33b6:	86 e0       	ldi	r24, 0x06	; 6
    33b8:	91 e0       	ldi	r25, 0x01	; 1
    33ba:	08 95       	ret

000033bc <LED_set_pattern>:
    33bc:	1f 93       	push	r17
    33be:	18 2f       	mov	r17, r24
    33c0:	86 e0       	ldi	r24, 0x06	; 6
    33c2:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    33c6:	81 30       	cpi	r24, 0x01	; 1
    33c8:	19 f4       	brne	.+6      	; 0x33d0 <LED_set_pattern+0x14>
    33ca:	81 2f       	mov	r24, r17
    33cc:	0e 94 f9 23 	call	0x47f2	; 0x47f2 <__LED_set_pattern>
    33d0:	1f 91       	pop	r17
    33d2:	08 95       	ret

000033d4 <SPI_set_slave_addr>:
    33d4:	1f 93       	push	r17
    33d6:	18 2f       	mov	r17, r24
    33d8:	82 e0       	ldi	r24, 0x02	; 2
    33da:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    33de:	81 30       	cpi	r24, 0x01	; 1
    33e0:	09 f0       	breq	.+2      	; 0x33e4 <SPI_set_slave_addr+0x10>
    33e2:	47 c0       	rjmp	.+142    	; 0x3472 <SPI_set_slave_addr+0x9e>
    33e4:	91 2f       	mov	r25, r17
    33e6:	97 70       	andi	r25, 0x07	; 7
    33e8:	80 91 1f 07 	lds	r24, 0x071F
    33ec:	98 17       	cp	r25, r24
    33ee:	09 f4       	brne	.+2      	; 0x33f2 <SPI_set_slave_addr+0x1e>
    33f0:	40 c0       	rjmp	.+128    	; 0x3472 <SPI_set_slave_addr+0x9e>
    33f2:	90 93 1f 07 	sts	0x071F, r25
    33f6:	85 b1       	in	r24, 0x05	; 5
    33f8:	88 7f       	andi	r24, 0xF8	; 248
    33fa:	89 2b       	or	r24, r25
    33fc:	85 b9       	out	0x05, r24	; 5
    33fe:	93 30       	cpi	r25, 0x03	; 3
    3400:	11 f1       	breq	.+68     	; 0x3446 <SPI_set_slave_addr+0x72>
    3402:	94 30       	cpi	r25, 0x04	; 4
    3404:	28 f4       	brcc	.+10     	; 0x3410 <SPI_set_slave_addr+0x3c>
    3406:	91 30       	cpi	r25, 0x01	; 1
    3408:	51 f0       	breq	.+20     	; 0x341e <SPI_set_slave_addr+0x4a>
    340a:	92 30       	cpi	r25, 0x02	; 2
    340c:	90 f4       	brcc	.+36     	; 0x3432 <SPI_set_slave_addr+0x5e>
    340e:	0c c0       	rjmp	.+24     	; 0x3428 <SPI_set_slave_addr+0x54>
    3410:	95 30       	cpi	r25, 0x05	; 5
    3412:	19 f1       	breq	.+70     	; 0x345a <SPI_set_slave_addr+0x86>
    3414:	95 30       	cpi	r25, 0x05	; 5
    3416:	e0 f0       	brcs	.+56     	; 0x3450 <SPI_set_slave_addr+0x7c>
    3418:	96 30       	cpi	r25, 0x06	; 6
    341a:	21 f5       	brne	.+72     	; 0x3464 <SPI_set_slave_addr+0x90>
    341c:	0f c0       	rjmp	.+30     	; 0x343c <SPI_set_slave_addr+0x68>
    341e:	e0 91 de 03 	lds	r30, 0x03DE
    3422:	f0 91 df 03 	lds	r31, 0x03DF
    3426:	22 c0       	rjmp	.+68     	; 0x346c <SPI_set_slave_addr+0x98>
    3428:	e0 91 dc 03 	lds	r30, 0x03DC
    342c:	f0 91 dd 03 	lds	r31, 0x03DD
    3430:	1d c0       	rjmp	.+58     	; 0x346c <SPI_set_slave_addr+0x98>
    3432:	e0 91 e0 03 	lds	r30, 0x03E0
    3436:	f0 91 e1 03 	lds	r31, 0x03E1
    343a:	18 c0       	rjmp	.+48     	; 0x346c <SPI_set_slave_addr+0x98>
    343c:	e0 91 e8 03 	lds	r30, 0x03E8
    3440:	f0 91 e9 03 	lds	r31, 0x03E9
    3444:	13 c0       	rjmp	.+38     	; 0x346c <SPI_set_slave_addr+0x98>
    3446:	e0 91 e2 03 	lds	r30, 0x03E2
    344a:	f0 91 e3 03 	lds	r31, 0x03E3
    344e:	0e c0       	rjmp	.+28     	; 0x346c <SPI_set_slave_addr+0x98>
    3450:	e0 91 e4 03 	lds	r30, 0x03E4
    3454:	f0 91 e5 03 	lds	r31, 0x03E5
    3458:	09 c0       	rjmp	.+18     	; 0x346c <SPI_set_slave_addr+0x98>
    345a:	e0 91 e6 03 	lds	r30, 0x03E6
    345e:	f0 91 e7 03 	lds	r31, 0x03E7
    3462:	04 c0       	rjmp	.+8      	; 0x346c <SPI_set_slave_addr+0x98>
    3464:	e0 91 ea 03 	lds	r30, 0x03EA
    3468:	f0 91 eb 03 	lds	r31, 0x03EB
    346c:	30 97       	sbiw	r30, 0x00	; 0
    346e:	09 f0       	breq	.+2      	; 0x3472 <SPI_set_slave_addr+0x9e>
    3470:	09 95       	icall
    3472:	1f 91       	pop	r17
    3474:	08 95       	ret

00003476 <SPI_transmit>:
    3476:	1f 93       	push	r17
    3478:	16 2f       	mov	r17, r22
    347a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <SPI_set_slave_addr>
    347e:	82 e0       	ldi	r24, 0x02	; 2
    3480:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    3484:	81 30       	cpi	r24, 0x01	; 1
    3486:	21 f4       	brne	.+8      	; 0x3490 <SPI_transmit+0x1a>
    3488:	1e bd       	out	0x2e, r17	; 46
    348a:	0d b4       	in	r0, 0x2d	; 45
    348c:	07 fe       	sbrs	r0, 7
    348e:	fd cf       	rjmp	.-6      	; 0x348a <SPI_transmit+0x14>
    3490:	1f 91       	pop	r17
    3492:	08 95       	ret

00003494 <__SPKR_set_up_freq_LUT>:
    3494:	0f 93       	push	r16
    3496:	1f 93       	push	r17
    3498:	cf 93       	push	r28
    349a:	df 93       	push	r29
    349c:	80 e2       	ldi	r24, 0x20	; 32
    349e:	91 e0       	ldi	r25, 0x01	; 1
    34a0:	0e 94 47 33 	call	0x668e	; 0x668e <malloc>
    34a4:	9c 01       	movw	r18, r24
    34a6:	90 93 fb 03 	sts	0x03FB, r25
    34aa:	80 93 fa 03 	sts	0x03FA, r24
    34ae:	89 2b       	or	r24, r25
    34b0:	11 f4       	brne	.+4      	; 0x34b6 <__SPKR_set_up_freq_LUT+0x22>
    34b2:	80 e0       	ldi	r24, 0x00	; 0
    34b4:	39 c0       	rjmp	.+114    	; 0x3528 <__SPKR_set_up_freq_LUT+0x94>
    34b6:	89 01       	movw	r16, r18
    34b8:	c0 e0       	ldi	r28, 0x00	; 0
    34ba:	d0 e0       	ldi	r29, 0x00	; 0
    34bc:	be 01       	movw	r22, r28
    34be:	80 e0       	ldi	r24, 0x00	; 0
    34c0:	90 e0       	ldi	r25, 0x00	; 0
    34c2:	0e 94 88 2c 	call	0x5910	; 0x5910 <__floatunsisf>
    34c6:	20 e0       	ldi	r18, 0x00	; 0
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	40 ea       	ldi	r20, 0xA0	; 160
    34cc:	51 e4       	ldi	r21, 0x41	; 65
    34ce:	0e 94 ef 2b 	call	0x57de	; 0x57de <__divsf3>
    34d2:	27 ef       	ldi	r18, 0xF7	; 247
    34d4:	35 e7       	ldi	r19, 0x75	; 117
    34d6:	40 e0       	ldi	r20, 0x00	; 0
    34d8:	5f e3       	ldi	r21, 0x3F	; 63
    34da:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    34de:	9b 01       	movw	r18, r22
    34e0:	ac 01       	movw	r20, r24
    34e2:	60 e0       	ldi	r22, 0x00	; 0
    34e4:	70 e0       	ldi	r23, 0x00	; 0
    34e6:	80 e2       	ldi	r24, 0x20	; 32
    34e8:	91 e4       	ldi	r25, 0x41	; 65
    34ea:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <pow>
    34ee:	9b 01       	movw	r18, r22
    34f0:	ac 01       	movw	r20, r24
    34f2:	ca 01       	movw	r24, r20
    34f4:	b9 01       	movw	r22, r18
    34f6:	2d ec       	ldi	r18, 0xCD	; 205
    34f8:	3c ec       	ldi	r19, 0xCC	; 204
    34fa:	42 e8       	ldi	r20, 0x82	; 130
    34fc:	51 e4       	ldi	r21, 0x41	; 65
    34fe:	0e 94 78 2d 	call	0x5af0	; 0x5af0 <__mulsf3>
    3502:	0e 94 3e 2d 	call	0x5a7c	; 0x5a7c <lrint>
    3506:	2a e0       	ldi	r18, 0x0A	; 10
    3508:	30 e0       	ldi	r19, 0x00	; 0
    350a:	40 e0       	ldi	r20, 0x00	; 0
    350c:	50 e0       	ldi	r21, 0x00	; 0
    350e:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    3512:	f8 01       	movw	r30, r16
    3514:	61 93       	st	Z+, r22
    3516:	71 93       	st	Z+, r23
    3518:	81 93       	st	Z+, r24
    351a:	91 93       	st	Z+, r25
    351c:	8f 01       	movw	r16, r30
    351e:	21 96       	adiw	r28, 0x01	; 1
    3520:	c8 34       	cpi	r28, 0x48	; 72
    3522:	d1 05       	cpc	r29, r1
    3524:	59 f6       	brne	.-106    	; 0x34bc <__SPKR_set_up_freq_LUT+0x28>
    3526:	81 e0       	ldi	r24, 0x01	; 1
    3528:	df 91       	pop	r29
    352a:	cf 91       	pop	r28
    352c:	1f 91       	pop	r17
    352e:	0f 91       	pop	r16
    3530:	08 95       	ret

00003532 <__SPKR_open_beep_mode>:
    3532:	8a e0       	ldi	r24, 0x0A	; 10
    3534:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    3538:	88 23       	and	r24, r24
    353a:	71 f4       	brne	.+28     	; 0x3558 <__SPKR_open_beep_mode+0x26>
    353c:	10 92 f7 03 	sts	0x03F7, r1
    3540:	10 92 f6 03 	sts	0x03F6, r1
    3544:	81 e0       	ldi	r24, 0x01	; 1
    3546:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__SPKR_init>
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	80 93 ed 03 	sts	0x03ED, r24
    3550:	8a e0       	ldi	r24, 0x0A	; 10
    3552:	61 e0       	ldi	r22, 0x01	; 1
    3554:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    3558:	8a e0       	ldi	r24, 0x0A	; 10
    355a:	91 e0       	ldi	r25, 0x01	; 1
    355c:	08 95       	ret

0000355e <__SPKR_open_tone_mode>:
    355e:	1f 93       	push	r17
    3560:	8b e0       	ldi	r24, 0x0B	; 11
    3562:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    3566:	88 23       	and	r24, r24
    3568:	11 f0       	breq	.+4      	; 0x356e <__SPKR_open_tone_mode+0x10>
    356a:	90 e0       	ldi	r25, 0x00	; 0
    356c:	21 c0       	rjmp	.+66     	; 0x35b0 <__SPKR_open_tone_mode+0x52>
    356e:	89 e0       	ldi	r24, 0x09	; 9
    3570:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    3574:	88 23       	and	r24, r24
    3576:	d9 f4       	brne	.+54     	; 0x35ae <__SPKR_open_tone_mode+0x50>
    3578:	0e 94 4a 1a 	call	0x3494	; 0x3494 <__SPKR_set_up_freq_LUT>
    357c:	18 2f       	mov	r17, r24
    357e:	81 30       	cpi	r24, 0x01	; 1
    3580:	b1 f4       	brne	.+44     	; 0x35ae <__SPKR_open_tone_mode+0x50>
    3582:	10 92 ee 03 	sts	0x03EE, r1
    3586:	10 92 ef 03 	sts	0x03EF, r1
    358a:	10 92 f0 03 	sts	0x03F0, r1
    358e:	10 92 f1 03 	sts	0x03F1, r1
    3592:	8d e0       	ldi	r24, 0x0D	; 13
    3594:	67 eb       	ldi	r22, 0xB7	; 183
    3596:	74 e2       	ldi	r23, 0x24	; 36
    3598:	0e 94 1a 23 	call	0x4634	; 0x4634 <ISR_attach>
    359c:	82 e0       	ldi	r24, 0x02	; 2
    359e:	0e 94 34 25 	call	0x4a68	; 0x4a68 <__SPKR_init>
    35a2:	10 93 ec 03 	sts	0x03EC, r17
    35a6:	89 e0       	ldi	r24, 0x09	; 9
    35a8:	61 e0       	ldi	r22, 0x01	; 1
    35aa:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    35ae:	91 e0       	ldi	r25, 0x01	; 1
    35b0:	89 e0       	ldi	r24, 0x09	; 9
    35b2:	1f 91       	pop	r17
    35b4:	08 95       	ret

000035b6 <SPKR_open>:
    35b6:	81 30       	cpi	r24, 0x01	; 1
    35b8:	29 f0       	breq	.+10     	; 0x35c4 <SPKR_open+0xe>
    35ba:	82 30       	cpi	r24, 0x02	; 2
    35bc:	31 f0       	breq	.+12     	; 0x35ca <SPKR_open+0x14>
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	89 e0       	ldi	r24, 0x09	; 9
    35c2:	08 95       	ret
    35c4:	0e 94 99 1a 	call	0x3532	; 0x3532 <__SPKR_open_beep_mode>
    35c8:	08 95       	ret
    35ca:	0e 94 af 1a 	call	0x355e	; 0x355e <__SPKR_open_tone_mode>
    35ce:	08 95       	ret

000035d0 <STEPPER_get_nSteps>:
    35d0:	80 91 e0 06 	lds	r24, 0x06E0
    35d4:	90 91 e1 06 	lds	r25, 0x06E1
    35d8:	20 91 e2 06 	lds	r18, 0x06E2
    35dc:	30 91 e3 06 	lds	r19, 0x06E3
    35e0:	bc 01       	movw	r22, r24
    35e2:	c9 01       	movw	r24, r18
    35e4:	08 95       	ret

000035e6 <STEPPER_stepmode>:
    35e6:	2f 92       	push	r2
    35e8:	3f 92       	push	r3
    35ea:	4f 92       	push	r4
    35ec:	5f 92       	push	r5
    35ee:	6f 92       	push	r6
    35f0:	7f 92       	push	r7
    35f2:	8f 92       	push	r8
    35f4:	9f 92       	push	r9
    35f6:	af 92       	push	r10
    35f8:	bf 92       	push	r11
    35fa:	cf 92       	push	r12
    35fc:	df 92       	push	r13
    35fe:	ef 92       	push	r14
    3600:	ff 92       	push	r15
    3602:	0f 93       	push	r16
    3604:	1f 93       	push	r17
    3606:	df 93       	push	r29
    3608:	cf 93       	push	r28
    360a:	cd b7       	in	r28, 0x3d	; 61
    360c:	de b7       	in	r29, 0x3e	; 62
    360e:	58 2e       	mov	r5, r24
    3610:	96 2e       	mov	r9, r22
    3612:	44 2e       	mov	r4, r20
    3614:	39 01       	movw	r6, r18
    3616:	3c 2c       	mov	r3, r12
    3618:	c9 8c       	ldd	r12, Y+25	; 0x19
    361a:	da 8c       	ldd	r13, Y+26	; 0x1a
    361c:	2b 8c       	ldd	r2, Y+27	; 0x1b
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	68 17       	cp	r22, r24
    3622:	39 f1       	breq	.+78     	; 0x3672 <STEPPER_stepmode+0x8c>
    3624:	68 17       	cp	r22, r24
    3626:	28 f0       	brcs	.+10     	; 0x3632 <STEPPER_stepmode+0x4c>
    3628:	92 e0       	ldi	r25, 0x02	; 2
    362a:	69 17       	cp	r22, r25
    362c:	09 f0       	breq	.+2      	; 0x3630 <STEPPER_stepmode+0x4a>
    362e:	85 c0       	rjmp	.+266    	; 0x373a <STEPPER_stepmode+0x154>
    3630:	49 c0       	rjmp	.+146    	; 0x36c4 <STEPPER_stepmode+0xde>
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	61 e0       	ldi	r22, 0x01	; 1
    3636:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <STEPPER_set_mode>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	b7 01       	movw	r22, r14
    363e:	0e 94 c5 1c 	call	0x398a	; 0x398a <STEPPER_set_accel>
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	64 2d       	mov	r22, r4
    3646:	a3 01       	movw	r20, r6
    3648:	98 01       	movw	r18, r16
    364a:	03 2d       	mov	r16, r3
    364c:	ee 24       	eor	r14, r14
    364e:	e3 94       	inc	r14
    3650:	e5 e0       	ldi	r30, 0x05	; 5
    3652:	ce 2e       	mov	r12, r30
    3654:	e7 e0       	ldi	r30, 0x07	; 7
    3656:	de 2e       	mov	r13, r30
    3658:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <STEPPER_step>
    365c:	55 20       	and	r5, r5
    365e:	09 f0       	breq	.+2      	; 0x3662 <STEPPER_stepmode+0x7c>
    3660:	6c c0       	rjmp	.+216    	; 0x373a <STEPPER_stepmode+0x154>
    3662:	00 d0       	rcall	.+0      	; 0x3664 <STEPPER_stepmode+0x7e>
    3664:	0f 92       	push	r0
    3666:	ed b7       	in	r30, 0x3d	; 61
    3668:	fe b7       	in	r31, 0x3e	; 62
    366a:	11 82       	std	Z+1, r1	; 0x01
    366c:	b3 82       	std	Z+3, r11	; 0x03
    366e:	a2 82       	std	Z+2, r10	; 0x02
    3670:	23 c0       	rjmp	.+70     	; 0x36b8 <STEPPER_stepmode+0xd2>
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	61 e0       	ldi	r22, 0x01	; 1
    3676:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <STEPPER_set_mode>
    367a:	81 e0       	ldi	r24, 0x01	; 1
    367c:	b6 01       	movw	r22, r12
    367e:	0e 94 c5 1c 	call	0x398a	; 0x398a <STEPPER_set_accel>
    3682:	81 e0       	ldi	r24, 0x01	; 1
    3684:	68 2d       	mov	r22, r8
    3686:	4d 89       	ldd	r20, Y+21	; 0x15
    3688:	5e 89       	ldd	r21, Y+22	; 0x16
    368a:	2f 89       	ldd	r18, Y+23	; 0x17
    368c:	38 8d       	ldd	r19, Y+24	; 0x18
    368e:	02 2d       	mov	r16, r2
    3690:	ee 24       	eor	r14, r14
    3692:	e3 94       	inc	r14
    3694:	75 e0       	ldi	r23, 0x05	; 5
    3696:	c7 2e       	mov	r12, r23
    3698:	77 e0       	ldi	r23, 0x07	; 7
    369a:	d7 2e       	mov	r13, r23
    369c:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <STEPPER_step>
    36a0:	55 20       	and	r5, r5
    36a2:	09 f0       	breq	.+2      	; 0x36a6 <STEPPER_stepmode+0xc0>
    36a4:	4a c0       	rjmp	.+148    	; 0x373a <STEPPER_stepmode+0x154>
    36a6:	00 d0       	rcall	.+0      	; 0x36a8 <STEPPER_stepmode+0xc2>
    36a8:	0f 92       	push	r0
    36aa:	ed b7       	in	r30, 0x3d	; 61
    36ac:	fe b7       	in	r31, 0x3e	; 62
    36ae:	91 82       	std	Z+1, r9	; 0x01
    36b0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    36b2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    36b4:	93 83       	std	Z+3, r25	; 0x03
    36b6:	82 83       	std	Z+2, r24	; 0x02
    36b8:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <STEPPER_wait_and_then>
    36bc:	0f 90       	pop	r0
    36be:	0f 90       	pop	r0
    36c0:	0f 90       	pop	r0
    36c2:	3b c0       	rjmp	.+118    	; 0x373a <STEPPER_stepmode+0x154>
    36c4:	82 e0       	ldi	r24, 0x02	; 2
    36c6:	61 e0       	ldi	r22, 0x01	; 1
    36c8:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <STEPPER_set_mode>
    36cc:	80 e0       	ldi	r24, 0x00	; 0
    36ce:	b7 01       	movw	r22, r14
    36d0:	0e 94 c5 1c 	call	0x398a	; 0x398a <STEPPER_set_accel>
    36d4:	81 e0       	ldi	r24, 0x01	; 1
    36d6:	b6 01       	movw	r22, r12
    36d8:	0e 94 c5 1c 	call	0x398a	; 0x398a <STEPPER_set_accel>
    36dc:	80 e0       	ldi	r24, 0x00	; 0
    36de:	64 2d       	mov	r22, r4
    36e0:	a3 01       	movw	r20, r6
    36e2:	98 01       	movw	r18, r16
    36e4:	03 2d       	mov	r16, r3
    36e6:	ee 24       	eor	r14, r14
    36e8:	e3 94       	inc	r14
    36ea:	95 e0       	ldi	r25, 0x05	; 5
    36ec:	c9 2e       	mov	r12, r25
    36ee:	97 e0       	ldi	r25, 0x07	; 7
    36f0:	d9 2e       	mov	r13, r25
    36f2:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <STEPPER_step>
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	68 2d       	mov	r22, r8
    36fa:	4d 89       	ldd	r20, Y+21	; 0x15
    36fc:	5e 89       	ldd	r21, Y+22	; 0x16
    36fe:	2f 89       	ldd	r18, Y+23	; 0x17
    3700:	38 8d       	ldd	r19, Y+24	; 0x18
    3702:	02 2d       	mov	r16, r2
    3704:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <STEPPER_step>
    3708:	55 20       	and	r5, r5
    370a:	b9 f4       	brne	.+46     	; 0x373a <STEPPER_stepmode+0x154>
    370c:	00 d0       	rcall	.+0      	; 0x370e <STEPPER_stepmode+0x128>
    370e:	00 d0       	rcall	.+0      	; 0x3710 <STEPPER_stepmode+0x12a>
    3710:	0f 92       	push	r0
    3712:	ad b7       	in	r26, 0x3d	; 61
    3714:	be b7       	in	r27, 0x3e	; 62
    3716:	11 96       	adiw	r26, 0x01	; 1
    3718:	ed b7       	in	r30, 0x3d	; 61
    371a:	fe b7       	in	r31, 0x3e	; 62
    371c:	91 82       	std	Z+1, r9	; 0x01
    371e:	fd 01       	movw	r30, r26
    3720:	b2 82       	std	Z+2, r11	; 0x02
    3722:	a1 82       	std	Z+1, r10	; 0x01
    3724:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3726:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3728:	94 83       	std	Z+4, r25	; 0x04
    372a:	83 83       	std	Z+3, r24	; 0x03
    372c:	0e 94 e4 1d 	call	0x3bc8	; 0x3bc8 <STEPPER_wait_and_then>
    3730:	0f 90       	pop	r0
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	cf 91       	pop	r28
    373c:	df 91       	pop	r29
    373e:	1f 91       	pop	r17
    3740:	0f 91       	pop	r16
    3742:	ff 90       	pop	r15
    3744:	ef 90       	pop	r14
    3746:	df 90       	pop	r13
    3748:	cf 90       	pop	r12
    374a:	bf 90       	pop	r11
    374c:	af 90       	pop	r10
    374e:	9f 90       	pop	r9
    3750:	8f 90       	pop	r8
    3752:	7f 90       	pop	r7
    3754:	6f 90       	pop	r6
    3756:	5f 90       	pop	r5
    3758:	4f 90       	pop	r4
    375a:	3f 90       	pop	r3
    375c:	2f 90       	pop	r2
    375e:	08 95       	ret

00003760 <STEPPER_move>:
    3760:	6f 92       	push	r6
    3762:	7f 92       	push	r7
    3764:	8f 92       	push	r8
    3766:	9f 92       	push	r9
    3768:	af 92       	push	r10
    376a:	bf 92       	push	r11
    376c:	cf 92       	push	r12
    376e:	df 92       	push	r13
    3770:	ef 92       	push	r14
    3772:	ff 92       	push	r15
    3774:	0f 93       	push	r16
    3776:	1f 93       	push	r17
    3778:	df 93       	push	r29
    377a:	cf 93       	push	r28
    377c:	cd b7       	in	r28, 0x3d	; 61
    377e:	de b7       	in	r29, 0x3e	; 62
    3780:	94 2e       	mov	r9, r20
    3782:	7c 2d       	mov	r23, r12
    3784:	d5 01       	movw	r26, r10
    3786:	49 89       	ldd	r20, Y+17	; 0x11
    3788:	5a 89       	ldd	r21, Y+18	; 0x12
    378a:	ab 88       	ldd	r10, Y+19	; 0x13
    378c:	bc 88       	ldd	r11, Y+20	; 0x14
    378e:	cd 88       	ldd	r12, Y+21	; 0x15
    3790:	de 88       	ldd	r13, Y+22	; 0x16
    3792:	9f 89       	ldd	r25, Y+23	; 0x17
    3794:	81 30       	cpi	r24, 0x01	; 1
    3796:	09 f4       	brne	.+2      	; 0x379a <STEPPER_move+0x3a>
    3798:	57 c0       	rjmp	.+174    	; 0x3848 <STEPPER_move+0xe8>
    379a:	81 30       	cpi	r24, 0x01	; 1
    379c:	b8 f1       	brcs	.+110    	; 0x380c <STEPPER_move+0xac>
    379e:	82 30       	cpi	r24, 0x02	; 2
    37a0:	09 f0       	breq	.+2      	; 0x37a4 <STEPPER_move+0x44>
    37a2:	76 c0       	rjmp	.+236    	; 0x3890 <STEPPER_move+0x130>
    37a4:	61 30       	cpi	r22, 0x01	; 1
    37a6:	91 f0       	breq	.+36     	; 0x37cc <STEPPER_move+0x6c>
    37a8:	61 30       	cpi	r22, 0x01	; 1
    37aa:	20 f0       	brcs	.+8      	; 0x37b4 <STEPPER_move+0x54>
    37ac:	62 30       	cpi	r22, 0x02	; 2
    37ae:	09 f0       	breq	.+2      	; 0x37b2 <STEPPER_move+0x52>
    37b0:	6f c0       	rjmp	.+222    	; 0x3890 <STEPPER_move+0x130>
    37b2:	15 c0       	rjmp	.+42     	; 0x37de <STEPPER_move+0x7e>
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	60 e0       	ldi	r22, 0x00	; 0
    37b8:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <STEPPER_set_mode>
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	b7 01       	movw	r22, r14
    37c0:	0e 94 c5 1c 	call	0x398a	; 0x398a <STEPPER_set_accel>
    37c4:	80 e0       	ldi	r24, 0x00	; 0
    37c6:	69 2d       	mov	r22, r9
    37c8:	a8 01       	movw	r20, r16
    37ca:	1d c0       	rjmp	.+58     	; 0x3806 <STEPPER_move+0xa6>
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	60 e0       	ldi	r22, 0x00	; 0
    37d0:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <STEPPER_set_mode>
    37d4:	81 e0       	ldi	r24, 0x01	; 1
    37d6:	b6 01       	movw	r22, r12
    37d8:	0e 94 c5 1c 	call	0x398a	; 0x398a <STEPPER_set_accel>
    37dc:	11 c0       	rjmp	.+34     	; 0x3800 <STEPPER_move+0xa0>
    37de:	82 e0       	ldi	r24, 0x02	; 2
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <STEPPER_set_mode>
    37e6:	80 e0       	ldi	r24, 0x00	; 0
    37e8:	b7 01       	movw	r22, r14
    37ea:	0e 94 c5 1c 	call	0x398a	; 0x398a <STEPPER_set_accel>
    37ee:	81 e0       	ldi	r24, 0x01	; 1
    37f0:	b6 01       	movw	r22, r12
    37f2:	0e 94 c5 1c 	call	0x398a	; 0x398a <STEPPER_set_accel>
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	69 2d       	mov	r22, r9
    37fa:	a8 01       	movw	r20, r16
    37fc:	0e 94 ae 1c 	call	0x395c	; 0x395c <STEPPER_run>
    3800:	81 e0       	ldi	r24, 0x01	; 1
    3802:	68 2d       	mov	r22, r8
    3804:	a5 01       	movw	r20, r10
    3806:	0e 94 ae 1c 	call	0x395c	; 0x395c <STEPPER_run>
    380a:	42 c0       	rjmp	.+132    	; 0x3890 <STEPPER_move+0x130>
    380c:	ed b7       	in	r30, 0x3d	; 61
    380e:	fe b7       	in	r31, 0x3e	; 62
    3810:	39 97       	sbiw	r30, 0x09	; 9
    3812:	0f b6       	in	r0, 0x3f	; 63
    3814:	f8 94       	cli
    3816:	fe bf       	out	0x3e, r31	; 62
    3818:	0f be       	out	0x3f, r0	; 63
    381a:	ed bf       	out	0x3d, r30	; 61
    381c:	6d b6       	in	r6, 0x3d	; 61
    381e:	7e b6       	in	r7, 0x3e	; 62
    3820:	08 94       	sec
    3822:	61 1c       	adc	r6, r1
    3824:	71 1c       	adc	r7, r1
    3826:	52 83       	std	Z+2, r21	; 0x02
    3828:	41 83       	std	Z+1, r20	; 0x01
    382a:	f3 01       	movw	r30, r6
    382c:	b3 82       	std	Z+3, r11	; 0x03
    382e:	a2 82       	std	Z+2, r10	; 0x02
    3830:	d5 82       	std	Z+5, r13	; 0x05
    3832:	c4 82       	std	Z+4, r12	; 0x04
    3834:	96 83       	std	Z+6, r25	; 0x06
    3836:	88 8d       	ldd	r24, Y+24	; 0x18
    3838:	99 8d       	ldd	r25, Y+25	; 0x19
    383a:	90 87       	std	Z+8, r25	; 0x08
    383c:	87 83       	std	Z+7, r24	; 0x07
    383e:	80 e0       	ldi	r24, 0x00	; 0
    3840:	49 2d       	mov	r20, r9
    3842:	c7 2e       	mov	r12, r23
    3844:	5d 01       	movw	r10, r26
    3846:	1a c0       	rjmp	.+52     	; 0x387c <STEPPER_move+0x11c>
    3848:	ed b7       	in	r30, 0x3d	; 61
    384a:	fe b7       	in	r31, 0x3e	; 62
    384c:	39 97       	sbiw	r30, 0x09	; 9
    384e:	0f b6       	in	r0, 0x3f	; 63
    3850:	f8 94       	cli
    3852:	fe bf       	out	0x3e, r31	; 62
    3854:	0f be       	out	0x3f, r0	; 63
    3856:	ed bf       	out	0x3d, r30	; 61
    3858:	ad b7       	in	r26, 0x3d	; 61
    385a:	be b7       	in	r27, 0x3e	; 62
    385c:	11 96       	adiw	r26, 0x01	; 1
    385e:	52 83       	std	Z+2, r21	; 0x02
    3860:	41 83       	std	Z+1, r20	; 0x01
    3862:	fd 01       	movw	r30, r26
    3864:	b3 82       	std	Z+3, r11	; 0x03
    3866:	a2 82       	std	Z+2, r10	; 0x02
    3868:	d5 82       	std	Z+5, r13	; 0x05
    386a:	c4 82       	std	Z+4, r12	; 0x04
    386c:	96 83       	std	Z+6, r25	; 0x06
    386e:	10 86       	std	Z+8, r1	; 0x08
    3870:	17 82       	std	Z+7, r1	; 0x07
    3872:	81 e0       	ldi	r24, 0x01	; 1
    3874:	49 2d       	mov	r20, r9
    3876:	c7 2e       	mov	r12, r23
    3878:	aa 24       	eor	r10, r10
    387a:	bb 24       	eor	r11, r11
    387c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <STEPPER_stepmode>
    3880:	8d b7       	in	r24, 0x3d	; 61
    3882:	9e b7       	in	r25, 0x3e	; 62
    3884:	09 96       	adiw	r24, 0x09	; 9
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	9e bf       	out	0x3e, r25	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	8d bf       	out	0x3d, r24	; 61
    3890:	cf 91       	pop	r28
    3892:	df 91       	pop	r29
    3894:	1f 91       	pop	r17
    3896:	0f 91       	pop	r16
    3898:	ff 90       	pop	r15
    389a:	ef 90       	pop	r14
    389c:	df 90       	pop	r13
    389e:	cf 90       	pop	r12
    38a0:	bf 90       	pop	r11
    38a2:	af 90       	pop	r10
    38a4:	9f 90       	pop	r9
    38a6:	8f 90       	pop	r8
    38a8:	7f 90       	pop	r7
    38aa:	6f 90       	pop	r6
    38ac:	08 95       	ret

000038ae <STEPPER_open>:
    38ae:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <__STEPPER_init>
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	80 93 04 07 	sts	0x0704, r24
    38b8:	ee ec       	ldi	r30, 0xCE	; 206
    38ba:	f6 e0       	ldi	r31, 0x06	; 6
    38bc:	11 92       	st	Z+, r1
    38be:	11 92       	st	Z+, r1
    38c0:	11 82       	std	Z+1, r1	; 0x01
    38c2:	10 82       	st	Z, r1
    38c4:	32 96       	adiw	r30, 0x02	; 2
    38c6:	11 82       	std	Z+1, r1	; 0x01
    38c8:	10 82       	st	Z, r1
    38ca:	32 96       	adiw	r30, 0x02	; 2
    38cc:	11 82       	std	Z+1, r1	; 0x01
    38ce:	10 82       	st	Z, r1
    38d0:	32 96       	adiw	r30, 0x02	; 2
    38d2:	11 82       	std	Z+1, r1	; 0x01
    38d4:	10 82       	st	Z, r1
    38d6:	32 96       	adiw	r30, 0x02	; 2
    38d8:	11 82       	std	Z+1, r1	; 0x01
    38da:	10 82       	st	Z, r1
    38dc:	32 96       	adiw	r30, 0x02	; 2
    38de:	11 82       	std	Z+1, r1	; 0x01
    38e0:	10 82       	st	Z, r1
    38e2:	32 96       	adiw	r30, 0x02	; 2
    38e4:	11 82       	std	Z+1, r1	; 0x01
    38e6:	10 82       	st	Z, r1
    38e8:	32 96       	adiw	r30, 0x02	; 2
    38ea:	11 82       	std	Z+1, r1	; 0x01
    38ec:	10 82       	st	Z, r1
    38ee:	32 96       	adiw	r30, 0x02	; 2
    38f0:	11 82       	std	Z+1, r1	; 0x01
    38f2:	10 82       	st	Z, r1
    38f4:	32 96       	adiw	r30, 0x02	; 2
    38f6:	11 82       	std	Z+1, r1	; 0x01
    38f8:	10 82       	st	Z, r1
    38fa:	32 96       	adiw	r30, 0x02	; 2
    38fc:	11 82       	std	Z+1, r1	; 0x01
    38fe:	10 82       	st	Z, r1
    3900:	32 96       	adiw	r30, 0x02	; 2
    3902:	11 82       	std	Z+1, r1	; 0x01
    3904:	10 82       	st	Z, r1
    3906:	36 96       	adiw	r30, 0x06	; 6
    3908:	11 92       	st	Z+, r1
    390a:	11 92       	st	Z+, r1
    390c:	11 92       	st	Z+, r1
    390e:	10 82       	st	Z, r1
    3910:	32 96       	adiw	r30, 0x02	; 2
    3912:	11 92       	st	Z+, r1
    3914:	11 92       	st	Z+, r1
    3916:	11 92       	st	Z+, r1
    3918:	11 92       	st	Z+, r1
    391a:	11 92       	st	Z+, r1
    391c:	11 92       	st	Z+, r1
    391e:	11 92       	st	Z+, r1
    3920:	11 82       	std	Z+1, r1	; 0x01
    3922:	10 82       	st	Z, r1
    3924:	32 96       	adiw	r30, 0x02	; 2
    3926:	11 82       	std	Z+1, r1	; 0x01
    3928:	10 82       	st	Z, r1
    392a:	32 96       	adiw	r30, 0x02	; 2
    392c:	11 82       	std	Z+1, r1	; 0x01
    392e:	10 82       	st	Z, r1
    3930:	32 96       	adiw	r30, 0x02	; 2
    3932:	11 82       	std	Z+1, r1	; 0x01
    3934:	10 82       	st	Z, r1
    3936:	76 97       	sbiw	r30, 0x16	; 22
    3938:	11 82       	std	Z+1, r1	; 0x01
    393a:	10 82       	st	Z, r1
    393c:	32 96       	adiw	r30, 0x02	; 2
    393e:	11 82       	std	Z+1, r1	; 0x01
    3940:	10 82       	st	Z, r1
    3942:	10 92 03 07 	sts	0x0703, r1
    3946:	10 92 02 07 	sts	0x0702, r1
    394a:	10 92 04 07 	sts	0x0704, r1
    394e:	87 e0       	ldi	r24, 0x07	; 7
    3950:	61 e0       	ldi	r22, 0x01	; 1
    3952:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    3956:	87 e0       	ldi	r24, 0x07	; 7
    3958:	91 e0       	ldi	r25, 0x01	; 1
    395a:	08 95       	ret

0000395c <STEPPER_run>:
    395c:	ef 92       	push	r14
    395e:	ff 92       	push	r15
    3960:	0f 93       	push	r16
    3962:	1f 93       	push	r17
    3964:	18 2f       	mov	r17, r24
    3966:	06 2f       	mov	r16, r22
    3968:	7a 01       	movw	r14, r20
    396a:	60 e0       	ldi	r22, 0x00	; 0
    396c:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <STEPPER_set_mode>
    3970:	81 2f       	mov	r24, r17
    3972:	60 2f       	mov	r22, r16
    3974:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <STEPPER_set_dir>
    3978:	81 2f       	mov	r24, r17
    397a:	b7 01       	movw	r22, r14
    397c:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <STEPPER_set_speed>
    3980:	1f 91       	pop	r17
    3982:	0f 91       	pop	r16
    3984:	ff 90       	pop	r15
    3986:	ef 90       	pop	r14
    3988:	08 95       	ret

0000398a <STEPPER_set_accel>:
    398a:	48 2f       	mov	r20, r24
    398c:	81 e0       	ldi	r24, 0x01	; 1
    398e:	80 93 04 07 	sts	0x0704, r24
    3992:	cb 01       	movw	r24, r22
    3994:	23 e0       	ldi	r18, 0x03	; 3
    3996:	69 3e       	cpi	r22, 0xE9	; 233
    3998:	72 07       	cpc	r23, r18
    399a:	10 f0       	brcs	.+4      	; 0x39a0 <STEPPER_set_accel+0x16>
    399c:	88 ee       	ldi	r24, 0xE8	; 232
    399e:	93 e0       	ldi	r25, 0x03	; 3
    39a0:	41 30       	cpi	r20, 0x01	; 1
    39a2:	71 f0       	breq	.+28     	; 0x39c0 <STEPPER_set_accel+0x36>
    39a4:	41 30       	cpi	r20, 0x01	; 1
    39a6:	18 f0       	brcs	.+6      	; 0x39ae <STEPPER_set_accel+0x24>
    39a8:	42 30       	cpi	r20, 0x02	; 2
    39aa:	71 f4       	brne	.+28     	; 0x39c8 <STEPPER_set_accel+0x3e>
    39ac:	05 c0       	rjmp	.+10     	; 0x39b8 <STEPPER_set_accel+0x2e>
    39ae:	90 93 d9 06 	sts	0x06D9, r25
    39b2:	80 93 d8 06 	sts	0x06D8, r24
    39b6:	08 c0       	rjmp	.+16     	; 0x39c8 <STEPPER_set_accel+0x3e>
    39b8:	90 93 d9 06 	sts	0x06D9, r25
    39bc:	80 93 d8 06 	sts	0x06D8, r24
    39c0:	90 93 db 06 	sts	0x06DB, r25
    39c4:	80 93 da 06 	sts	0x06DA, r24
    39c8:	10 92 04 07 	sts	0x0704, r1
    39cc:	08 95       	ret

000039ce <STEPPER_set_dir>:
    39ce:	98 2f       	mov	r25, r24
    39d0:	81 e0       	ldi	r24, 0x01	; 1
    39d2:	80 93 04 07 	sts	0x0704, r24
    39d6:	91 30       	cpi	r25, 0x01	; 1
    39d8:	51 f0       	breq	.+20     	; 0x39ee <STEPPER_set_dir+0x20>
    39da:	91 30       	cpi	r25, 0x01	; 1
    39dc:	18 f0       	brcs	.+6      	; 0x39e4 <STEPPER_set_dir+0x16>
    39de:	92 30       	cpi	r25, 0x02	; 2
    39e0:	41 f4       	brne	.+16     	; 0x39f2 <STEPPER_set_dir+0x24>
    39e2:	03 c0       	rjmp	.+6      	; 0x39ea <STEPPER_set_dir+0x1c>
    39e4:	60 93 f1 06 	sts	0x06F1, r22
    39e8:	04 c0       	rjmp	.+8      	; 0x39f2 <STEPPER_set_dir+0x24>
    39ea:	60 93 f1 06 	sts	0x06F1, r22
    39ee:	60 93 f2 06 	sts	0x06F2, r22
    39f2:	10 92 04 07 	sts	0x0704, r1
    39f6:	08 95       	ret

000039f8 <STEPPER_set_mode>:
    39f8:	98 2f       	mov	r25, r24
    39fa:	81 e0       	ldi	r24, 0x01	; 1
    39fc:	80 93 04 07 	sts	0x0704, r24
    3a00:	91 30       	cpi	r25, 0x01	; 1
    3a02:	51 f0       	breq	.+20     	; 0x3a18 <STEPPER_set_mode+0x20>
    3a04:	91 30       	cpi	r25, 0x01	; 1
    3a06:	18 f0       	brcs	.+6      	; 0x3a0e <STEPPER_set_mode+0x16>
    3a08:	92 30       	cpi	r25, 0x02	; 2
    3a0a:	41 f4       	brne	.+16     	; 0x3a1c <STEPPER_set_mode+0x24>
    3a0c:	03 c0       	rjmp	.+6      	; 0x3a14 <STEPPER_set_mode+0x1c>
    3a0e:	60 93 ce 06 	sts	0x06CE, r22
    3a12:	04 c0       	rjmp	.+8      	; 0x3a1c <STEPPER_set_mode+0x24>
    3a14:	60 93 ce 06 	sts	0x06CE, r22
    3a18:	60 93 cf 06 	sts	0x06CF, r22
    3a1c:	10 92 04 07 	sts	0x0704, r1
    3a20:	08 95       	ret

00003a22 <STEPPER_set_speed>:
    3a22:	48 2f       	mov	r20, r24
    3a24:	81 e0       	ldi	r24, 0x01	; 1
    3a26:	80 93 04 07 	sts	0x0704, r24
    3a2a:	cb 01       	movw	r24, r22
    3a2c:	21 e0       	ldi	r18, 0x01	; 1
    3a2e:	61 39       	cpi	r22, 0x91	; 145
    3a30:	72 07       	cpc	r23, r18
    3a32:	10 f0       	brcs	.+4      	; 0x3a38 <STEPPER_set_speed+0x16>
    3a34:	80 e9       	ldi	r24, 0x90	; 144
    3a36:	91 e0       	ldi	r25, 0x01	; 1
    3a38:	41 30       	cpi	r20, 0x01	; 1
    3a3a:	71 f0       	breq	.+28     	; 0x3a58 <STEPPER_set_speed+0x36>
    3a3c:	41 30       	cpi	r20, 0x01	; 1
    3a3e:	18 f0       	brcs	.+6      	; 0x3a46 <STEPPER_set_speed+0x24>
    3a40:	42 30       	cpi	r20, 0x02	; 2
    3a42:	71 f4       	brne	.+28     	; 0x3a60 <STEPPER_set_speed+0x3e>
    3a44:	05 c0       	rjmp	.+10     	; 0x3a50 <STEPPER_set_speed+0x2e>
    3a46:	90 93 d1 06 	sts	0x06D1, r25
    3a4a:	80 93 d0 06 	sts	0x06D0, r24
    3a4e:	08 c0       	rjmp	.+16     	; 0x3a60 <STEPPER_set_speed+0x3e>
    3a50:	90 93 d1 06 	sts	0x06D1, r25
    3a54:	80 93 d0 06 	sts	0x06D0, r24
    3a58:	90 93 d3 06 	sts	0x06D3, r25
    3a5c:	80 93 d2 06 	sts	0x06D2, r24
    3a60:	10 92 04 07 	sts	0x0704, r1
    3a64:	08 95       	ret

00003a66 <STEPPER_step>:
    3a66:	8f 92       	push	r8
    3a68:	9f 92       	push	r9
    3a6a:	af 92       	push	r10
    3a6c:	bf 92       	push	r11
    3a6e:	cf 92       	push	r12
    3a70:	df 92       	push	r13
    3a72:	ef 92       	push	r14
    3a74:	ff 92       	push	r15
    3a76:	0f 93       	push	r16
    3a78:	1f 93       	push	r17
    3a7a:	cf 93       	push	r28
    3a7c:	df 93       	push	r29
    3a7e:	18 2f       	mov	r17, r24
    3a80:	f6 2e       	mov	r15, r22
    3a82:	5a 01       	movw	r10, r20
    3a84:	49 01       	movw	r8, r18
    3a86:	e6 01       	movw	r28, r12
    3a88:	61 e0       	ldi	r22, 0x01	; 1
    3a8a:	0e 94 fc 1c 	call	0x39f8	; 0x39f8 <STEPPER_set_mode>
    3a8e:	81 2f       	mov	r24, r17
    3a90:	b5 01       	movw	r22, r10
    3a92:	a4 01       	movw	r20, r8
    3a94:	0e 94 00 26 	call	0x4c00	; 0x4c00 <STEPPER_setup_decels>
    3a98:	81 2f       	mov	r24, r17
    3a9a:	6f 2d       	mov	r22, r15
    3a9c:	0e 94 e7 1c 	call	0x39ce	; 0x39ce <STEPPER_set_dir>
    3aa0:	81 2f       	mov	r24, r17
    3aa2:	60 2f       	mov	r22, r16
    3aa4:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <STEPPER_set_stop_mode>
    3aa8:	81 2f       	mov	r24, r17
    3aaa:	b5 01       	movw	r22, r10
    3aac:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <STEPPER_set_steps>
    3ab0:	c1 14       	cp	r12, r1
    3ab2:	d1 04       	cpc	r13, r1
    3ab4:	99 f0       	breq	.+38     	; 0x3adc <STEPPER_step+0x76>
    3ab6:	11 30       	cpi	r17, 0x01	; 1
    3ab8:	49 f0       	breq	.+18     	; 0x3acc <STEPPER_step+0x66>
    3aba:	11 30       	cpi	r17, 0x01	; 1
    3abc:	18 f0       	brcs	.+6      	; 0x3ac4 <STEPPER_step+0x5e>
    3abe:	12 30       	cpi	r17, 0x02	; 2
    3ac0:	69 f4       	brne	.+26     	; 0x3adc <STEPPER_step+0x76>
    3ac2:	06 c0       	rjmp	.+12     	; 0x3ad0 <STEPPER_step+0x6a>
    3ac4:	18 82       	st	Y, r1
    3ac6:	10 92 00 07 	sts	0x0700, r1
    3aca:	08 c0       	rjmp	.+16     	; 0x3adc <STEPPER_step+0x76>
    3acc:	19 82       	std	Y+1, r1	; 0x01
    3ace:	04 c0       	rjmp	.+8      	; 0x3ad8 <STEPPER_step+0x72>
    3ad0:	18 82       	st	Y, r1
    3ad2:	19 82       	std	Y+1, r1	; 0x01
    3ad4:	10 92 00 07 	sts	0x0700, r1
    3ad8:	10 92 01 07 	sts	0x0701, r1
    3adc:	d0 93 03 07 	sts	0x0703, r29
    3ae0:	c0 93 02 07 	sts	0x0702, r28
    3ae4:	ee 20       	and	r14, r14
    3ae6:	b9 f5       	brne	.+110    	; 0x3b56 <STEPPER_step+0xf0>
    3ae8:	8c e8       	ldi	r24, 0x8C	; 140
    3aea:	93 e0       	ldi	r25, 0x03	; 3
    3aec:	90 93 03 07 	sts	0x0703, r25
    3af0:	80 93 02 07 	sts	0x0702, r24
    3af4:	81 2f       	mov	r24, r17
    3af6:	b4 01       	movw	r22, r8
    3af8:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <STEPPER_set_speed>
    3afc:	81 2f       	mov	r24, r17
    3afe:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <STEPPER_go>
    3b02:	11 30       	cpi	r17, 0x01	; 1
    3b04:	71 f0       	breq	.+28     	; 0x3b22 <STEPPER_step+0xbc>
    3b06:	11 30       	cpi	r17, 0x01	; 1
    3b08:	18 f0       	brcs	.+6      	; 0x3b10 <STEPPER_step+0xaa>
    3b0a:	12 30       	cpi	r17, 0x02	; 2
    3b0c:	59 f5       	brne	.+86     	; 0x3b64 <STEPPER_step+0xfe>
    3b0e:	12 c0       	rjmp	.+36     	; 0x3b34 <STEPPER_step+0xce>
    3b10:	10 92 8c 03 	sts	0x038C, r1
    3b14:	10 92 00 07 	sts	0x0700, r1
    3b18:	80 91 8c 03 	lds	r24, 0x038C
    3b1c:	88 23       	and	r24, r24
    3b1e:	e1 f3       	breq	.-8      	; 0x3b18 <STEPPER_step+0xb2>
    3b20:	21 c0       	rjmp	.+66     	; 0x3b64 <STEPPER_step+0xfe>
    3b22:	10 92 8d 03 	sts	0x038D, r1
    3b26:	10 92 01 07 	sts	0x0701, r1
    3b2a:	80 91 8d 03 	lds	r24, 0x038D
    3b2e:	88 23       	and	r24, r24
    3b30:	e1 f3       	breq	.-8      	; 0x3b2a <STEPPER_step+0xc4>
    3b32:	18 c0       	rjmp	.+48     	; 0x3b64 <STEPPER_step+0xfe>
    3b34:	10 92 8c 03 	sts	0x038C, r1
    3b38:	10 92 8d 03 	sts	0x038D, r1
    3b3c:	10 92 00 07 	sts	0x0700, r1
    3b40:	10 92 01 07 	sts	0x0701, r1
    3b44:	80 91 8c 03 	lds	r24, 0x038C
    3b48:	88 23       	and	r24, r24
    3b4a:	e1 f3       	breq	.-8      	; 0x3b44 <STEPPER_step+0xde>
    3b4c:	80 91 8d 03 	lds	r24, 0x038D
    3b50:	88 23       	and	r24, r24
    3b52:	c1 f3       	breq	.-16     	; 0x3b44 <STEPPER_step+0xde>
    3b54:	07 c0       	rjmp	.+14     	; 0x3b64 <STEPPER_step+0xfe>
    3b56:	81 2f       	mov	r24, r17
    3b58:	b4 01       	movw	r22, r8
    3b5a:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <STEPPER_set_speed>
    3b5e:	81 2f       	mov	r24, r17
    3b60:	0e 94 b1 25 	call	0x4b62	; 0x4b62 <STEPPER_go>
    3b64:	df 91       	pop	r29
    3b66:	cf 91       	pop	r28
    3b68:	1f 91       	pop	r17
    3b6a:	0f 91       	pop	r16
    3b6c:	ff 90       	pop	r15
    3b6e:	ef 90       	pop	r14
    3b70:	df 90       	pop	r13
    3b72:	cf 90       	pop	r12
    3b74:	bf 90       	pop	r11
    3b76:	af 90       	pop	r10
    3b78:	9f 90       	pop	r9
    3b7a:	8f 90       	pop	r8
    3b7c:	08 95       	ret

00003b7e <STEPPER_stop>:
    3b7e:	0f 93       	push	r16
    3b80:	1f 93       	push	r17
    3b82:	18 2f       	mov	r17, r24
    3b84:	06 2f       	mov	r16, r22
    3b86:	66 23       	and	r22, r22
    3b88:	49 f4       	brne	.+18     	; 0x3b9c <STEPPER_stop+0x1e>
    3b8a:	60 e0       	ldi	r22, 0x00	; 0
    3b8c:	70 e0       	ldi	r23, 0x00	; 0
    3b8e:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <STEPPER_set_speed>
    3b92:	81 2f       	mov	r24, r17
    3b94:	60 e0       	ldi	r22, 0x00	; 0
    3b96:	70 e0       	ldi	r23, 0x00	; 0
    3b98:	0e 94 d0 25 	call	0x4ba0	; 0x4ba0 <STEPPER_set_steps>
    3b9c:	81 e0       	ldi	r24, 0x01	; 1
    3b9e:	80 93 04 07 	sts	0x0704, r24
    3ba2:	11 30       	cpi	r17, 0x01	; 1
    3ba4:	51 f0       	breq	.+20     	; 0x3bba <STEPPER_stop+0x3c>
    3ba6:	11 30       	cpi	r17, 0x01	; 1
    3ba8:	18 f0       	brcs	.+6      	; 0x3bb0 <STEPPER_stop+0x32>
    3baa:	12 30       	cpi	r17, 0x02	; 2
    3bac:	41 f4       	brne	.+16     	; 0x3bbe <STEPPER_stop+0x40>
    3bae:	03 c0       	rjmp	.+6      	; 0x3bb6 <STEPPER_stop+0x38>
    3bb0:	00 93 ec 06 	sts	0x06EC, r16
    3bb4:	04 c0       	rjmp	.+8      	; 0x3bbe <STEPPER_stop+0x40>
    3bb6:	00 93 ec 06 	sts	0x06EC, r16
    3bba:	00 93 ed 06 	sts	0x06ED, r16
    3bbe:	10 92 04 07 	sts	0x0704, r1
    3bc2:	1f 91       	pop	r17
    3bc4:	0f 91       	pop	r16
    3bc6:	08 95       	ret

00003bc8 <STEPPER_wait_and_then>:
    3bc8:	cf 92       	push	r12
    3bca:	df 92       	push	r13
    3bcc:	ef 92       	push	r14
    3bce:	ff 92       	push	r15
    3bd0:	0f 93       	push	r16
    3bd2:	1f 93       	push	r17
    3bd4:	df 93       	push	r29
    3bd6:	cf 93       	push	r28
    3bd8:	cd b7       	in	r28, 0x3d	; 61
    3bda:	de b7       	in	r29, 0x3e	; 62
    3bdc:	8b 85       	ldd	r24, Y+11	; 0x0b
    3bde:	81 30       	cpi	r24, 0x01	; 1
    3be0:	61 f0       	breq	.+24     	; 0x3bfa <STEPPER_wait_and_then+0x32>
    3be2:	81 30       	cpi	r24, 0x01	; 1
    3be4:	18 f0       	brcs	.+6      	; 0x3bec <STEPPER_wait_and_then+0x24>
    3be6:	82 30       	cpi	r24, 0x02	; 2
    3be8:	a1 f5       	brne	.+104    	; 0x3c52 <STEPPER_wait_and_then+0x8a>
    3bea:	11 c0       	rjmp	.+34     	; 0x3c0e <STEPPER_wait_and_then+0x46>
    3bec:	ec 85       	ldd	r30, Y+12	; 0x0c
    3bee:	fd 85       	ldd	r31, Y+13	; 0x0d
    3bf0:	80 91 05 07 	lds	r24, 0x0705
    3bf4:	88 23       	and	r24, r24
    3bf6:	e1 f3       	breq	.-8      	; 0x3bf0 <STEPPER_wait_and_then+0x28>
    3bf8:	06 c0       	rjmp	.+12     	; 0x3c06 <STEPPER_wait_and_then+0x3e>
    3bfa:	ec 85       	ldd	r30, Y+12	; 0x0c
    3bfc:	fd 85       	ldd	r31, Y+13	; 0x0d
    3bfe:	80 91 06 07 	lds	r24, 0x0706
    3c02:	88 23       	and	r24, r24
    3c04:	e1 f3       	breq	.-8      	; 0x3bfe <STEPPER_wait_and_then+0x36>
    3c06:	30 97       	sbiw	r30, 0x00	; 0
    3c08:	21 f1       	breq	.+72     	; 0x3c52 <STEPPER_wait_and_then+0x8a>
    3c0a:	09 95       	icall
    3c0c:	22 c0       	rjmp	.+68     	; 0x3c52 <STEPPER_wait_and_then+0x8a>
    3c0e:	cc 84       	ldd	r12, Y+12	; 0x0c
    3c10:	dd 84       	ldd	r13, Y+13	; 0x0d
    3c12:	ee 84       	ldd	r14, Y+14	; 0x0e
    3c14:	ff 84       	ldd	r15, Y+15	; 0x0f
    3c16:	00 e0       	ldi	r16, 0x00	; 0
    3c18:	10 e0       	ldi	r17, 0x00	; 0
    3c1a:	00 23       	and	r16, r16
    3c1c:	51 f4       	brne	.+20     	; 0x3c32 <STEPPER_wait_and_then+0x6a>
    3c1e:	80 91 05 07 	lds	r24, 0x0705
    3c22:	88 23       	and	r24, r24
    3c24:	31 f0       	breq	.+12     	; 0x3c32 <STEPPER_wait_and_then+0x6a>
    3c26:	c1 14       	cp	r12, r1
    3c28:	d1 04       	cpc	r13, r1
    3c2a:	11 f0       	breq	.+4      	; 0x3c30 <STEPPER_wait_and_then+0x68>
    3c2c:	f6 01       	movw	r30, r12
    3c2e:	09 95       	icall
    3c30:	01 e0       	ldi	r16, 0x01	; 1
    3c32:	11 23       	and	r17, r17
    3c34:	51 f4       	brne	.+20     	; 0x3c4a <STEPPER_wait_and_then+0x82>
    3c36:	80 91 06 07 	lds	r24, 0x0706
    3c3a:	88 23       	and	r24, r24
    3c3c:	31 f0       	breq	.+12     	; 0x3c4a <STEPPER_wait_and_then+0x82>
    3c3e:	e1 14       	cp	r14, r1
    3c40:	f1 04       	cpc	r15, r1
    3c42:	11 f0       	breq	.+4      	; 0x3c48 <STEPPER_wait_and_then+0x80>
    3c44:	f7 01       	movw	r30, r14
    3c46:	09 95       	icall
    3c48:	11 e0       	ldi	r17, 0x01	; 1
    3c4a:	00 23       	and	r16, r16
    3c4c:	31 f3       	breq	.-52     	; 0x3c1a <STEPPER_wait_and_then+0x52>
    3c4e:	11 23       	and	r17, r17
    3c50:	21 f3       	breq	.-56     	; 0x3c1a <STEPPER_wait_and_then+0x52>
    3c52:	cf 91       	pop	r28
    3c54:	df 91       	pop	r29
    3c56:	1f 91       	pop	r17
    3c58:	0f 91       	pop	r16
    3c5a:	ff 90       	pop	r15
    3c5c:	ef 90       	pop	r14
    3c5e:	df 90       	pop	r13
    3c60:	cf 90       	pop	r12
    3c62:	08 95       	ret

00003c64 <SYS_get_state>:
    3c64:	e8 2f       	mov	r30, r24
    3c66:	f0 e0       	ldi	r31, 0x00	; 0
    3c68:	e3 31       	cpi	r30, 0x13	; 19
    3c6a:	f1 05       	cpc	r31, r1
    3c6c:	40 f4       	brcc	.+16     	; 0x3c7e <SYS_get_state+0x1a>
    3c6e:	e2 5c       	subi	r30, 0xC2	; 194
    3c70:	ff 4f       	sbci	r31, 0xFF	; 255
    3c72:	ee 0f       	add	r30, r30
    3c74:	ff 1f       	adc	r31, r31
    3c76:	05 90       	lpm	r0, Z+
    3c78:	f4 91       	lpm	r31, Z+
    3c7a:	e0 2d       	mov	r30, r0
    3c7c:	09 94       	ijmp
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	08 95       	ret
    3c82:	80 91 07 07 	lds	r24, 0x0707
    3c86:	08 95       	ret
    3c88:	80 91 08 07 	lds	r24, 0x0708
    3c8c:	08 95       	ret
    3c8e:	80 91 09 07 	lds	r24, 0x0709
    3c92:	08 95       	ret
    3c94:	80 91 0a 07 	lds	r24, 0x070A
    3c98:	08 95       	ret
    3c9a:	80 91 0b 07 	lds	r24, 0x070B
    3c9e:	08 95       	ret
    3ca0:	80 91 0d 07 	lds	r24, 0x070D
    3ca4:	08 95       	ret
    3ca6:	80 91 0c 07 	lds	r24, 0x070C
    3caa:	08 95       	ret
    3cac:	80 91 0e 07 	lds	r24, 0x070E
    3cb0:	08 95       	ret
    3cb2:	80 91 0f 07 	lds	r24, 0x070F
    3cb6:	08 95       	ret
    3cb8:	80 91 10 07 	lds	r24, 0x0710
    3cbc:	08 95       	ret
    3cbe:	80 91 11 07 	lds	r24, 0x0711
    3cc2:	08 95       	ret
    3cc4:	80 91 12 07 	lds	r24, 0x0712
    3cc8:	08 95       	ret
    3cca:	80 91 13 07 	lds	r24, 0x0713
    3cce:	08 95       	ret
    3cd0:	80 91 14 07 	lds	r24, 0x0714
    3cd4:	08 95       	ret
    3cd6:	80 91 15 07 	lds	r24, 0x0715
    3cda:	08 95       	ret
    3cdc:	80 91 16 07 	lds	r24, 0x0716
    3ce0:	08 95       	ret
    3ce2:	80 91 17 07 	lds	r24, 0x0717
    3ce6:	08 95       	ret
    3ce8:	80 91 18 07 	lds	r24, 0x0718
    3cec:	08 95       	ret
    3cee:	80 91 19 07 	lds	r24, 0x0719
    3cf2:	08 95       	ret

00003cf4 <SYS_set_state>:
    3cf4:	e8 2f       	mov	r30, r24
    3cf6:	f0 e0       	ldi	r31, 0x00	; 0
    3cf8:	e3 31       	cpi	r30, 0x13	; 19
    3cfa:	f1 05       	cpc	r31, r1
    3cfc:	08 f0       	brcs	.+2      	; 0x3d00 <SYS_set_state+0xc>
    3cfe:	40 c0       	rjmp	.+128    	; 0x3d80 <SYS_set_state+0x8c>
    3d00:	ef 5a       	subi	r30, 0xAF	; 175
    3d02:	ff 4f       	sbci	r31, 0xFF	; 255
    3d04:	ee 0f       	add	r30, r30
    3d06:	ff 1f       	adc	r31, r31
    3d08:	05 90       	lpm	r0, Z+
    3d0a:	f4 91       	lpm	r31, Z+
    3d0c:	e0 2d       	mov	r30, r0
    3d0e:	09 94       	ijmp
    3d10:	60 93 07 07 	sts	0x0707, r22
    3d14:	08 95       	ret
    3d16:	60 93 08 07 	sts	0x0708, r22
    3d1a:	08 95       	ret
    3d1c:	60 93 09 07 	sts	0x0709, r22
    3d20:	08 95       	ret
    3d22:	60 93 0a 07 	sts	0x070A, r22
    3d26:	08 95       	ret
    3d28:	60 93 0b 07 	sts	0x070B, r22
    3d2c:	08 95       	ret
    3d2e:	60 93 0d 07 	sts	0x070D, r22
    3d32:	08 95       	ret
    3d34:	60 93 0c 07 	sts	0x070C, r22
    3d38:	08 95       	ret
    3d3a:	60 93 0e 07 	sts	0x070E, r22
    3d3e:	08 95       	ret
    3d40:	60 93 0f 07 	sts	0x070F, r22
    3d44:	08 95       	ret
    3d46:	60 93 10 07 	sts	0x0710, r22
    3d4a:	08 95       	ret
    3d4c:	60 93 11 07 	sts	0x0711, r22
    3d50:	08 95       	ret
    3d52:	60 93 12 07 	sts	0x0712, r22
    3d56:	08 95       	ret
    3d58:	60 93 13 07 	sts	0x0713, r22
    3d5c:	08 95       	ret
    3d5e:	60 93 14 07 	sts	0x0714, r22
    3d62:	08 95       	ret
    3d64:	60 93 15 07 	sts	0x0715, r22
    3d68:	08 95       	ret
    3d6a:	60 93 16 07 	sts	0x0716, r22
    3d6e:	08 95       	ret
    3d70:	60 93 17 07 	sts	0x0717, r22
    3d74:	08 95       	ret
    3d76:	60 93 18 07 	sts	0x0718, r22
    3d7a:	08 95       	ret
    3d7c:	60 93 17 07 	sts	0x0717, r22
    3d80:	08 95       	ret

00003d82 <ATTINY_get_sensors>:
    3d82:	0f 93       	push	r16
    3d84:	1f 93       	push	r17
    3d86:	81 e0       	ldi	r24, 0x01	; 1
    3d88:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    3d8c:	81 30       	cpi	r24, 0x01	; 1
    3d8e:	11 f0       	breq	.+4      	; 0x3d94 <ATTINY_get_sensors+0x12>
    3d90:	00 e0       	ldi	r16, 0x00	; 0
    3d92:	24 c0       	rjmp	.+72     	; 0x3ddc <ATTINY_get_sensors+0x5a>
    3d94:	87 e0       	ldi	r24, 0x07	; 7
    3d96:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <SPI_set_slave_addr>
    3d9a:	82 e0       	ldi	r24, 0x02	; 2
    3d9c:	6a e0       	ldi	r22, 0x0A	; 10
    3d9e:	0e 94 3b 1a 	call	0x3476	; 0x3476 <SPI_transmit>
    3da2:	82 e0       	ldi	r24, 0x02	; 2
    3da4:	62 eb       	ldi	r22, 0xB2	; 178
    3da6:	0e 94 3b 1a 	call	0x3476	; 0x3476 <SPI_transmit>
    3daa:	18 ec       	ldi	r17, 0xC8	; 200
    3dac:	81 2f       	mov	r24, r17
    3dae:	8a 95       	dec	r24
    3db0:	f1 f7       	brne	.-4      	; 0x3dae <ATTINY_get_sensors+0x2c>
    3db2:	82 e0       	ldi	r24, 0x02	; 2
    3db4:	60 e0       	ldi	r22, 0x00	; 0
    3db6:	0e 94 9c 24 	call	0x4938	; 0x4938 <SPI_receive>
    3dba:	08 2f       	mov	r16, r24
    3dbc:	81 2f       	mov	r24, r17
    3dbe:	8a 95       	dec	r24
    3dc0:	f1 f7       	brne	.-4      	; 0x3dbe <ATTINY_get_sensors+0x3c>
    3dc2:	82 e0       	ldi	r24, 0x02	; 2
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	0e 94 9c 24 	call	0x4938	; 0x4938 <SPI_receive>
    3dca:	1a 95       	dec	r17
    3dcc:	f1 f7       	brne	.-4      	; 0x3dca <ATTINY_get_sensors+0x48>
    3dce:	87 e0       	ldi	r24, 0x07	; 7
    3dd0:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <SPI_set_slave_addr>
    3dd4:	88 e8       	ldi	r24, 0x88	; 136
    3dd6:	93 e1       	ldi	r25, 0x13	; 19
    3dd8:	01 97       	sbiw	r24, 0x01	; 1
    3dda:	f1 f7       	brne	.-4      	; 0x3dd8 <ATTINY_get_sensors+0x56>
    3ddc:	80 2f       	mov	r24, r16
    3dde:	1f 91       	pop	r17
    3de0:	0f 91       	pop	r16
    3de2:	08 95       	ret

00003de4 <ATTINY_get_SW_state>:
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	18 2f       	mov	r17, r24
    3dec:	80 91 8f 03 	lds	r24, 0x038F
    3df0:	88 23       	and	r24, r24
    3df2:	41 f0       	breq	.+16     	; 0x3e04 <ATTINY_get_SW_state+0x20>
    3df4:	80 91 99 03 	lds	r24, 0x0399
    3df8:	88 23       	and	r24, r24
    3dfa:	99 f0       	breq	.+38     	; 0x3e22 <ATTINY_get_SW_state+0x3e>
    3dfc:	10 92 8f 03 	sts	0x038F, r1
    3e00:	10 92 99 03 	sts	0x0399, r1
    3e04:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <ATTINY_get_sensors>
    3e08:	80 93 8e 03 	sts	0x038E, r24
    3e0c:	83 e9       	ldi	r24, 0x93	; 147
    3e0e:	93 e0       	ldi	r25, 0x03	; 3
    3e10:	61 e0       	ldi	r22, 0x01	; 1
    3e12:	40 e0       	ldi	r20, 0x00	; 0
    3e14:	22 e3       	ldi	r18, 0x32	; 50
    3e16:	30 e0       	ldi	r19, 0x00	; 0
    3e18:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <TMRSRVC_new>
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	80 93 8f 03 	sts	0x038F, r24
    3e22:	90 91 8e 03 	lds	r25, 0x038E
    3e26:	a1 2f       	mov	r26, r17
    3e28:	b0 e0       	ldi	r27, 0x00	; 0
    3e2a:	ed 01       	movw	r28, r26
    3e2c:	cb 5c       	subi	r28, 0xCB	; 203
    3e2e:	dc 4f       	sbci	r29, 0xFC	; 252
    3e30:	88 81       	ld	r24, Y
    3e32:	88 23       	and	r24, r24
    3e34:	69 f0       	breq	.+26     	; 0x3e50 <ATTINY_get_SW_state+0x6c>
    3e36:	fd 01       	movw	r30, r26
    3e38:	e8 5c       	subi	r30, 0xC8	; 200
    3e3a:	fc 4f       	sbci	r31, 0xFC	; 252
    3e3c:	80 81       	ld	r24, Z
    3e3e:	98 23       	and	r25, r24
    3e40:	c1 f0       	breq	.+48     	; 0x3e72 <ATTINY_get_SW_state+0x8e>
    3e42:	fd 01       	movw	r30, r26
    3e44:	e0 57       	subi	r30, 0x70	; 112
    3e46:	fc 4f       	sbci	r31, 0xFC	; 252
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	80 83       	st	Z, r24
    3e4c:	18 82       	st	Y, r1
    3e4e:	11 c0       	rjmp	.+34     	; 0x3e72 <ATTINY_get_SW_state+0x8e>
    3e50:	fd 01       	movw	r30, r26
    3e52:	e0 57       	subi	r30, 0x70	; 112
    3e54:	fc 4f       	sbci	r31, 0xFC	; 252
    3e56:	80 81       	ld	r24, Z
    3e58:	81 11       	cpse	r24, r1
    3e5a:	10 82       	st	Z, r1
    3e5c:	fd 01       	movw	r30, r26
    3e5e:	e8 5c       	subi	r30, 0xC8	; 200
    3e60:	fc 4f       	sbci	r31, 0xFC	; 252
    3e62:	80 81       	ld	r24, Z
    3e64:	98 23       	and	r25, r24
    3e66:	29 f4       	brne	.+10     	; 0x3e72 <ATTINY_get_SW_state+0x8e>
    3e68:	fd 01       	movw	r30, r26
    3e6a:	eb 5c       	subi	r30, 0xCB	; 203
    3e6c:	fc 4f       	sbci	r31, 0xFC	; 252
    3e6e:	81 e0       	ldi	r24, 0x01	; 1
    3e70:	80 83       	st	Z, r24
    3e72:	a0 57       	subi	r26, 0x70	; 112
    3e74:	bc 4f       	sbci	r27, 0xFC	; 252
    3e76:	8c 91       	ld	r24, X
    3e78:	df 91       	pop	r29
    3e7a:	cf 91       	pop	r28
    3e7c:	1f 91       	pop	r17
    3e7e:	08 95       	ret

00003e80 <ATTINY_open>:
    3e80:	82 e0       	ldi	r24, 0x02	; 2
    3e82:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    3e86:	88 23       	and	r24, r24
    3e88:	19 f4       	brne	.+6      	; 0x3e90 <ATTINY_open+0x10>
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	82 e0       	ldi	r24, 0x02	; 2
    3e8e:	08 95       	ret
    3e90:	10 92 35 07 	sts	0x0735, r1
    3e94:	10 92 34 07 	sts	0x0734, r1
    3e98:	10 92 37 07 	sts	0x0737, r1
    3e9c:	10 92 36 07 	sts	0x0736, r1
    3ea0:	10 92 39 07 	sts	0x0739, r1
    3ea4:	10 92 38 07 	sts	0x0738, r1
    3ea8:	10 92 3b 07 	sts	0x073B, r1
    3eac:	10 92 3a 07 	sts	0x073A, r1
    3eb0:	10 92 3d 07 	sts	0x073D, r1
    3eb4:	10 92 3c 07 	sts	0x073C, r1
    3eb8:	80 e9       	ldi	r24, 0x90	; 144
    3eba:	91 e0       	ldi	r25, 0x01	; 1
    3ebc:	90 93 21 07 	sts	0x0721, r25
    3ec0:	80 93 20 07 	sts	0x0720, r24
    3ec4:	90 93 23 07 	sts	0x0723, r25
    3ec8:	80 93 22 07 	sts	0x0722, r24
    3ecc:	90 93 25 07 	sts	0x0725, r25
    3ed0:	80 93 24 07 	sts	0x0724, r24
    3ed4:	90 93 27 07 	sts	0x0727, r25
    3ed8:	80 93 26 07 	sts	0x0726, r24
    3edc:	90 93 29 07 	sts	0x0729, r25
    3ee0:	80 93 28 07 	sts	0x0728, r24
    3ee4:	84 e3       	ldi	r24, 0x34	; 52
    3ee6:	98 e0       	ldi	r25, 0x08	; 8
    3ee8:	90 93 2b 07 	sts	0x072B, r25
    3eec:	80 93 2a 07 	sts	0x072A, r24
    3ef0:	90 93 2d 07 	sts	0x072D, r25
    3ef4:	80 93 2c 07 	sts	0x072C, r24
    3ef8:	90 93 2f 07 	sts	0x072F, r25
    3efc:	80 93 2e 07 	sts	0x072E, r24
    3f00:	90 93 31 07 	sts	0x0731, r25
    3f04:	80 93 30 07 	sts	0x0730, r24
    3f08:	90 93 33 07 	sts	0x0733, r25
    3f0c:	80 93 32 07 	sts	0x0732, r24
    3f10:	81 e0       	ldi	r24, 0x01	; 1
    3f12:	61 e0       	ldi	r22, 0x01	; 1
    3f14:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    3f18:	91 e0       	ldi	r25, 0x01	; 1
    3f1a:	81 e0       	ldi	r24, 0x01	; 1
    3f1c:	08 95       	ret

00003f1e <TMRSRVC_delay>:
    3f1e:	df 93       	push	r29
    3f20:	cf 93       	push	r28
    3f22:	cd b7       	in	r28, 0x3d	; 61
    3f24:	de b7       	in	r29, 0x3e	; 62
    3f26:	29 97       	sbiw	r28, 0x09	; 9
    3f28:	0f b6       	in	r0, 0x3f	; 63
    3f2a:	f8 94       	cli
    3f2c:	de bf       	out	0x3e, r29	; 62
    3f2e:	0f be       	out	0x3f, r0	; 63
    3f30:	cd bf       	out	0x3d, r28	; 61
    3f32:	9c 01       	movw	r18, r24
    3f34:	ce 01       	movw	r24, r28
    3f36:	01 96       	adiw	r24, 0x01	; 1
    3f38:	61 e0       	ldi	r22, 0x01	; 1
    3f3a:	40 e0       	ldi	r20, 0x00	; 0
    3f3c:	0e 94 b0 1f 	call	0x3f60	; 0x3f60 <TMRSRVC_new>
    3f40:	98 2f       	mov	r25, r24
    3f42:	88 23       	and	r24, r24
    3f44:	19 f4       	brne	.+6      	; 0x3f4c <TMRSRVC_delay+0x2e>
    3f46:	8f 81       	ldd	r24, Y+7	; 0x07
    3f48:	88 23       	and	r24, r24
    3f4a:	e9 f3       	breq	.-6      	; 0x3f46 <TMRSRVC_delay+0x28>
    3f4c:	89 2f       	mov	r24, r25
    3f4e:	29 96       	adiw	r28, 0x09	; 9
    3f50:	0f b6       	in	r0, 0x3f	; 63
    3f52:	f8 94       	cli
    3f54:	de bf       	out	0x3e, r29	; 62
    3f56:	0f be       	out	0x3f, r0	; 63
    3f58:	cd bf       	out	0x3d, r28	; 61
    3f5a:	cf 91       	pop	r28
    3f5c:	df 91       	pop	r29
    3f5e:	08 95       	ret

00003f60 <TMRSRVC_new>:
    3f60:	ef 92       	push	r14
    3f62:	ff 92       	push	r15
    3f64:	0f 93       	push	r16
    3f66:	1f 93       	push	r17
    3f68:	cf 93       	push	r28
    3f6a:	df 93       	push	r29
    3f6c:	ec 01       	movw	r28, r24
    3f6e:	f6 2e       	mov	r15, r22
    3f70:	e4 2e       	mov	r14, r20
    3f72:	89 01       	movw	r16, r18
    3f74:	88 e0       	ldi	r24, 0x08	; 8
    3f76:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    3f7a:	81 30       	cpi	r24, 0x01	; 1
    3f7c:	11 f0       	breq	.+4      	; 0x3f82 <TMRSRVC_new+0x22>
    3f7e:	81 e0       	ldi	r24, 0x01	; 1
    3f80:	26 c0       	rjmp	.+76     	; 0x3fce <TMRSRVC_new+0x6e>
    3f82:	84 e0       	ldi	r24, 0x04	; 4
    3f84:	90 e0       	ldi	r25, 0x00	; 0
    3f86:	0e 94 47 33 	call	0x668e	; 0x668e <malloc>
    3f8a:	fc 01       	movw	r30, r24
    3f8c:	00 97       	sbiw	r24, 0x00	; 0
    3f8e:	11 f4       	brne	.+4      	; 0x3f94 <TMRSRVC_new+0x34>
    3f90:	82 e0       	ldi	r24, 0x02	; 2
    3f92:	1d c0       	rjmp	.+58     	; 0x3fce <TMRSRVC_new+0x6e>
    3f94:	f9 82       	std	Y+1, r15	; 0x01
    3f96:	f0 fc       	sbrc	r15, 0
    3f98:	1e 82       	std	Y+6, r1	; 0x06
    3f9a:	81 e0       	ldi	r24, 0x01	; 1
    3f9c:	e8 16       	cp	r14, r24
    3f9e:	19 f4       	brne	.+6      	; 0x3fa6 <TMRSRVC_new+0x46>
    3fa0:	89 81       	ldd	r24, Y+1	; 0x01
    3fa2:	84 60       	ori	r24, 0x04	; 4
    3fa4:	89 83       	std	Y+1, r24	; 0x01
    3fa6:	89 81       	ldd	r24, Y+1	; 0x01
    3fa8:	88 60       	ori	r24, 0x08	; 8
    3faa:	89 83       	std	Y+1, r24	; 0x01
    3fac:	1b 83       	std	Y+3, r17	; 0x03
    3fae:	0a 83       	std	Y+2, r16	; 0x02
    3fb0:	1d 83       	std	Y+5, r17	; 0x05
    3fb2:	0c 83       	std	Y+4, r16	; 0x04
    3fb4:	d1 83       	std	Z+1, r29	; 0x01
    3fb6:	c0 83       	st	Z, r28
    3fb8:	13 82       	std	Z+3, r1	; 0x03
    3fba:	12 82       	std	Z+2, r1	; 0x02
    3fbc:	81 e0       	ldi	r24, 0x01	; 1
    3fbe:	80 93 fc 03 	sts	0x03FC, r24
    3fc2:	cf 01       	movw	r24, r30
    3fc4:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <TMRSRVC_insert>
    3fc8:	10 92 fc 03 	sts	0x03FC, r1
    3fcc:	80 e0       	ldi	r24, 0x00	; 0
    3fce:	df 91       	pop	r29
    3fd0:	cf 91       	pop	r28
    3fd2:	1f 91       	pop	r17
    3fd4:	0f 91       	pop	r16
    3fd6:	ff 90       	pop	r15
    3fd8:	ef 90       	pop	r14
    3fda:	08 95       	ret

00003fdc <I2C_MSTR_get>:
    3fdc:	fc 01       	movw	r30, r24
    3fde:	80 91 41 07 	lds	r24, 0x0741
    3fe2:	81 30       	cpi	r24, 0x01	; 1
    3fe4:	11 f0       	breq	.+4      	; 0x3fea <I2C_MSTR_get+0xe>
    3fe6:	85 e0       	ldi	r24, 0x05	; 5
    3fe8:	08 95       	ret
    3fea:	80 91 42 07 	lds	r24, 0x0742
    3fee:	81 30       	cpi	r24, 0x01	; 1
    3ff0:	11 f0       	breq	.+4      	; 0x3ff6 <I2C_MSTR_get+0x1a>
    3ff2:	8a e0       	ldi	r24, 0x0A	; 10
    3ff4:	08 95       	ret
    3ff6:	61 30       	cpi	r22, 0x01	; 1
    3ff8:	11 f4       	brne	.+4      	; 0x3ffe <I2C_MSTR_get+0x22>
    3ffa:	84 ec       	ldi	r24, 0xC4	; 196
    3ffc:	01 c0       	rjmp	.+2      	; 0x4000 <I2C_MSTR_get+0x24>
    3ffe:	84 e8       	ldi	r24, 0x84	; 132
    4000:	80 93 bc 00 	sts	0x00BC, r24
    4004:	80 91 bc 00 	lds	r24, 0x00BC
    4008:	87 ff       	sbrs	r24, 7
    400a:	fc cf       	rjmp	.-8      	; 0x4004 <I2C_MSTR_get+0x28>
    400c:	61 30       	cpi	r22, 0x01	; 1
    400e:	31 f4       	brne	.+12     	; 0x401c <I2C_MSTR_get+0x40>
    4010:	80 91 b9 00 	lds	r24, 0x00B9
    4014:	88 7f       	andi	r24, 0xF8	; 248
    4016:	80 35       	cpi	r24, 0x50	; 80
    4018:	59 f4       	brne	.+22     	; 0x4030 <I2C_MSTR_get+0x54>
    401a:	05 c0       	rjmp	.+10     	; 0x4026 <I2C_MSTR_get+0x4a>
    401c:	80 91 b9 00 	lds	r24, 0x00B9
    4020:	88 7f       	andi	r24, 0xF8	; 248
    4022:	88 35       	cpi	r24, 0x58	; 88
    4024:	29 f4       	brne	.+10     	; 0x4030 <I2C_MSTR_get+0x54>
    4026:	80 91 bb 00 	lds	r24, 0x00BB
    402a:	80 83       	st	Z, r24
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	08 95       	ret
    4030:	82 e0       	ldi	r24, 0x02	; 2
    4032:	08 95       	ret

00004034 <I2C_MSTR_send>:
    4034:	98 2f       	mov	r25, r24
    4036:	80 91 41 07 	lds	r24, 0x0741
    403a:	81 30       	cpi	r24, 0x01	; 1
    403c:	11 f0       	breq	.+4      	; 0x4042 <I2C_MSTR_send+0xe>
    403e:	85 e0       	ldi	r24, 0x05	; 5
    4040:	08 95       	ret
    4042:	80 91 42 07 	lds	r24, 0x0742
    4046:	81 30       	cpi	r24, 0x01	; 1
    4048:	11 f0       	breq	.+4      	; 0x404e <I2C_MSTR_send+0x1a>
    404a:	8a e0       	ldi	r24, 0x0A	; 10
    404c:	08 95       	ret
    404e:	90 93 bb 00 	sts	0x00BB, r25
    4052:	84 e8       	ldi	r24, 0x84	; 132
    4054:	80 93 bc 00 	sts	0x00BC, r24
    4058:	80 91 bc 00 	lds	r24, 0x00BC
    405c:	87 ff       	sbrs	r24, 7
    405e:	fc cf       	rjmp	.-8      	; 0x4058 <I2C_MSTR_send+0x24>
    4060:	80 91 b9 00 	lds	r24, 0x00B9
    4064:	90 e0       	ldi	r25, 0x00	; 0
    4066:	88 7f       	andi	r24, 0xF8	; 248
    4068:	90 70       	andi	r25, 0x00	; 0
    406a:	88 32       	cpi	r24, 0x28	; 40
    406c:	91 05       	cpc	r25, r1
    406e:	21 f0       	breq	.+8      	; 0x4078 <I2C_MSTR_send+0x44>
    4070:	c0 97       	sbiw	r24, 0x30	; 48
    4072:	21 f4       	brne	.+8      	; 0x407c <I2C_MSTR_send+0x48>
    4074:	83 e0       	ldi	r24, 0x03	; 3
    4076:	08 95       	ret
    4078:	80 e0       	ldi	r24, 0x00	; 0
    407a:	08 95       	ret
    407c:	8c e0       	ldi	r24, 0x0C	; 12
    407e:	08 95       	ret

00004080 <I2C_MSTR_start>:
    4080:	98 2f       	mov	r25, r24
    4082:	20 91 41 07 	lds	r18, 0x0741
    4086:	21 30       	cpi	r18, 0x01	; 1
    4088:	11 f0       	breq	.+4      	; 0x408e <I2C_MSTR_start+0xe>
    408a:	85 e0       	ldi	r24, 0x05	; 5
    408c:	08 95       	ret
    408e:	80 91 43 07 	lds	r24, 0x0743
    4092:	81 30       	cpi	r24, 0x01	; 1
    4094:	11 f4       	brne	.+4      	; 0x409a <I2C_MSTR_start+0x1a>
    4096:	89 e0       	ldi	r24, 0x09	; 9
    4098:	08 95       	ret
    409a:	20 93 42 07 	sts	0x0742, r18
    409e:	84 ea       	ldi	r24, 0xA4	; 164
    40a0:	80 93 bc 00 	sts	0x00BC, r24
    40a4:	80 91 bc 00 	lds	r24, 0x00BC
    40a8:	87 ff       	sbrs	r24, 7
    40aa:	fc cf       	rjmp	.-8      	; 0x40a4 <I2C_MSTR_start+0x24>
    40ac:	80 91 b9 00 	lds	r24, 0x00B9
    40b0:	88 7f       	andi	r24, 0xF8	; 248
    40b2:	88 30       	cpi	r24, 0x08	; 8
    40b4:	39 f0       	breq	.+14     	; 0x40c4 <I2C_MSTR_start+0x44>
    40b6:	80 91 b9 00 	lds	r24, 0x00B9
    40ba:	88 7f       	andi	r24, 0xF8	; 248
    40bc:	80 31       	cpi	r24, 0x10	; 16
    40be:	11 f0       	breq	.+4      	; 0x40c4 <I2C_MSTR_start+0x44>
    40c0:	81 e0       	ldi	r24, 0x01	; 1
    40c2:	08 95       	ret
    40c4:	61 30       	cpi	r22, 0x01	; 1
    40c6:	19 f4       	brne	.+6      	; 0x40ce <I2C_MSTR_start+0x4e>
    40c8:	99 0f       	add	r25, r25
    40ca:	91 60       	ori	r25, 0x01	; 1
    40cc:	03 c0       	rjmp	.+6      	; 0x40d4 <I2C_MSTR_start+0x54>
    40ce:	66 23       	and	r22, r22
    40d0:	19 f4       	brne	.+6      	; 0x40d8 <I2C_MSTR_start+0x58>
    40d2:	99 0f       	add	r25, r25
    40d4:	90 93 bb 00 	sts	0x00BB, r25
    40d8:	84 e8       	ldi	r24, 0x84	; 132
    40da:	80 93 bc 00 	sts	0x00BC, r24
    40de:	80 91 bc 00 	lds	r24, 0x00BC
    40e2:	87 ff       	sbrs	r24, 7
    40e4:	fc cf       	rjmp	.-8      	; 0x40de <I2C_MSTR_start+0x5e>
    40e6:	61 30       	cpi	r22, 0x01	; 1
    40e8:	31 f4       	brne	.+12     	; 0x40f6 <I2C_MSTR_start+0x76>
    40ea:	80 91 b9 00 	lds	r24, 0x00B9
    40ee:	88 7f       	andi	r24, 0xF8	; 248
    40f0:	80 34       	cpi	r24, 0x40	; 64
    40f2:	41 f4       	brne	.+16     	; 0x4104 <I2C_MSTR_start+0x84>
    40f4:	09 c0       	rjmp	.+18     	; 0x4108 <I2C_MSTR_start+0x88>
    40f6:	66 23       	and	r22, r22
    40f8:	39 f4       	brne	.+14     	; 0x4108 <I2C_MSTR_start+0x88>
    40fa:	80 91 b9 00 	lds	r24, 0x00B9
    40fe:	88 7f       	andi	r24, 0xF8	; 248
    4100:	88 31       	cpi	r24, 0x18	; 24
    4102:	11 f0       	breq	.+4      	; 0x4108 <I2C_MSTR_start+0x88>
    4104:	82 e0       	ldi	r24, 0x02	; 2
    4106:	08 95       	ret
    4108:	80 e0       	ldi	r24, 0x00	; 0
    410a:	08 95       	ret

0000410c <I2C_MSTR_stop>:
    410c:	80 91 42 07 	lds	r24, 0x0742
    4110:	81 30       	cpi	r24, 0x01	; 1
    4112:	11 f0       	breq	.+4      	; 0x4118 <I2C_MSTR_stop+0xc>
    4114:	8a e0       	ldi	r24, 0x0A	; 10
    4116:	08 95       	ret
    4118:	80 91 44 07 	lds	r24, 0x0744
    411c:	81 30       	cpi	r24, 0x01	; 1
    411e:	29 f4       	brne	.+10     	; 0x412a <I2C_MSTR_stop+0x1e>
    4120:	85 e9       	ldi	r24, 0x95	; 149
    4122:	80 93 bc 00 	sts	0x00BC, r24
    4126:	80 e0       	ldi	r24, 0x00	; 0
    4128:	08 95       	ret
    412a:	84 e9       	ldi	r24, 0x94	; 148
    412c:	80 93 bc 00 	sts	0x00BC, r24
    4130:	80 e0       	ldi	r24, 0x00	; 0
    4132:	08 95       	ret

00004134 <I2C_open>:
    4134:	82 e1       	ldi	r24, 0x12	; 18
    4136:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    413a:	88 23       	and	r24, r24
    413c:	b1 f4       	brne	.+44     	; 0x416a <I2C_open+0x36>
    413e:	10 92 41 07 	sts	0x0741, r1
    4142:	10 92 42 07 	sts	0x0742, r1
    4146:	10 92 43 07 	sts	0x0743, r1
    414a:	10 92 44 07 	sts	0x0744, r1
    414e:	10 92 45 07 	sts	0x0745, r1
    4152:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <__I2C_init>
    4156:	87 e1       	ldi	r24, 0x17	; 23
    4158:	60 e0       	ldi	r22, 0x00	; 0
    415a:	0e 94 b8 20 	call	0x4170	; 0x4170 <I2C_set_BRG>
    415e:	0e 94 f2 26 	call	0x4de4	; 0x4de4 <I2C_enable>
    4162:	82 e1       	ldi	r24, 0x12	; 18
    4164:	61 e0       	ldi	r22, 0x01	; 1
    4166:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    416a:	82 e1       	ldi	r24, 0x12	; 18
    416c:	90 e0       	ldi	r25, 0x00	; 0
    416e:	08 95       	ret

00004170 <I2C_set_BRG>:
    4170:	63 70       	andi	r22, 0x03	; 3
    4172:	60 93 b9 00 	sts	0x00B9, r22
    4176:	80 93 b8 00 	sts	0x00B8, r24
    417a:	81 e0       	ldi	r24, 0x01	; 1
    417c:	80 93 41 07 	sts	0x0741, r24
    4180:	08 95       	ret

00004182 <__ADC_init>:
    4182:	8f e1       	ldi	r24, 0x1F	; 31
    4184:	80 93 7c 00 	sts	0x007C, r24
    4188:	ea e7       	ldi	r30, 0x7A	; 122
    418a:	f0 e0       	ldi	r31, 0x00	; 0
    418c:	87 e0       	ldi	r24, 0x07	; 7
    418e:	80 83       	st	Z, r24
    4190:	80 81       	ld	r24, Z
    4192:	80 68       	ori	r24, 0x80	; 128
    4194:	80 83       	st	Z, r24
    4196:	08 95       	ret

00004198 <CBOT_init>:
    4198:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <SYS_init>
    419c:	0e 94 fe 23 	call	0x47fc	; 0x47fc <ATMEGA_open>
    41a0:	0e 94 2e 23 	call	0x465c	; 0x465c <ISR_open>
    41a4:	0e 94 c9 26 	call	0x4d92	; 0x4d92 <TMRSRVC_open>
    41a8:	0e 94 63 24 	call	0x48c6	; 0x48c6 <SPI_open>
    41ac:	0e 94 40 1f 	call	0x3e80	; 0x3e80 <ATTINY_open>
    41b0:	78 94       	sei
    41b2:	08 95       	ret

000041b4 <CBOT_ISR_init>:
    41b4:	00 00       	nop
    41b6:	08 95       	ret

000041b8 <__vector_16>:
    41b8:	1f 92       	push	r1
    41ba:	0f 92       	push	r0
    41bc:	0f b6       	in	r0, 0x3f	; 63
    41be:	0f 92       	push	r0
    41c0:	11 24       	eor	r1, r1
    41c2:	2f 93       	push	r18
    41c4:	3f 93       	push	r19
    41c6:	4f 93       	push	r20
    41c8:	5f 93       	push	r21
    41ca:	6f 93       	push	r22
    41cc:	7f 93       	push	r23
    41ce:	8f 93       	push	r24
    41d0:	9f 93       	push	r25
    41d2:	af 93       	push	r26
    41d4:	bf 93       	push	r27
    41d6:	ef 93       	push	r30
    41d8:	ff 93       	push	r31
    41da:	e0 91 bc 03 	lds	r30, 0x03BC
    41de:	f0 91 bd 03 	lds	r31, 0x03BD
    41e2:	30 97       	sbiw	r30, 0x00	; 0
    41e4:	09 f0       	breq	.+2      	; 0x41e8 <__vector_16+0x30>
    41e6:	09 95       	icall
    41e8:	ff 91       	pop	r31
    41ea:	ef 91       	pop	r30
    41ec:	bf 91       	pop	r27
    41ee:	af 91       	pop	r26
    41f0:	9f 91       	pop	r25
    41f2:	8f 91       	pop	r24
    41f4:	7f 91       	pop	r23
    41f6:	6f 91       	pop	r22
    41f8:	5f 91       	pop	r21
    41fa:	4f 91       	pop	r20
    41fc:	3f 91       	pop	r19
    41fe:	2f 91       	pop	r18
    4200:	0f 90       	pop	r0
    4202:	0f be       	out	0x3f, r0	; 63
    4204:	0f 90       	pop	r0
    4206:	1f 90       	pop	r1
    4208:	18 95       	reti

0000420a <__vector_17>:
    420a:	1f 92       	push	r1
    420c:	0f 92       	push	r0
    420e:	0f b6       	in	r0, 0x3f	; 63
    4210:	0f 92       	push	r0
    4212:	11 24       	eor	r1, r1
    4214:	2f 93       	push	r18
    4216:	3f 93       	push	r19
    4218:	4f 93       	push	r20
    421a:	5f 93       	push	r21
    421c:	6f 93       	push	r22
    421e:	7f 93       	push	r23
    4220:	8f 93       	push	r24
    4222:	9f 93       	push	r25
    4224:	af 93       	push	r26
    4226:	bf 93       	push	r27
    4228:	ef 93       	push	r30
    422a:	ff 93       	push	r31
    422c:	e0 91 be 03 	lds	r30, 0x03BE
    4230:	f0 91 bf 03 	lds	r31, 0x03BF
    4234:	30 97       	sbiw	r30, 0x00	; 0
    4236:	09 f0       	breq	.+2      	; 0x423a <__vector_17+0x30>
    4238:	09 95       	icall
    423a:	ff 91       	pop	r31
    423c:	ef 91       	pop	r30
    423e:	bf 91       	pop	r27
    4240:	af 91       	pop	r26
    4242:	9f 91       	pop	r25
    4244:	8f 91       	pop	r24
    4246:	7f 91       	pop	r23
    4248:	6f 91       	pop	r22
    424a:	5f 91       	pop	r21
    424c:	4f 91       	pop	r20
    424e:	3f 91       	pop	r19
    4250:	2f 91       	pop	r18
    4252:	0f 90       	pop	r0
    4254:	0f be       	out	0x3f, r0	; 63
    4256:	0f 90       	pop	r0
    4258:	1f 90       	pop	r1
    425a:	18 95       	reti

0000425c <__vector_18>:
    425c:	1f 92       	push	r1
    425e:	0f 92       	push	r0
    4260:	0f b6       	in	r0, 0x3f	; 63
    4262:	0f 92       	push	r0
    4264:	11 24       	eor	r1, r1
    4266:	2f 93       	push	r18
    4268:	3f 93       	push	r19
    426a:	4f 93       	push	r20
    426c:	5f 93       	push	r21
    426e:	6f 93       	push	r22
    4270:	7f 93       	push	r23
    4272:	8f 93       	push	r24
    4274:	9f 93       	push	r25
    4276:	af 93       	push	r26
    4278:	bf 93       	push	r27
    427a:	ef 93       	push	r30
    427c:	ff 93       	push	r31
    427e:	e0 91 c0 03 	lds	r30, 0x03C0
    4282:	f0 91 c1 03 	lds	r31, 0x03C1
    4286:	30 97       	sbiw	r30, 0x00	; 0
    4288:	09 f0       	breq	.+2      	; 0x428c <__vector_18+0x30>
    428a:	09 95       	icall
    428c:	ff 91       	pop	r31
    428e:	ef 91       	pop	r30
    4290:	bf 91       	pop	r27
    4292:	af 91       	pop	r26
    4294:	9f 91       	pop	r25
    4296:	8f 91       	pop	r24
    4298:	7f 91       	pop	r23
    429a:	6f 91       	pop	r22
    429c:	5f 91       	pop	r21
    429e:	4f 91       	pop	r20
    42a0:	3f 91       	pop	r19
    42a2:	2f 91       	pop	r18
    42a4:	0f 90       	pop	r0
    42a6:	0f be       	out	0x3f, r0	; 63
    42a8:	0f 90       	pop	r0
    42aa:	1f 90       	pop	r1
    42ac:	18 95       	reti

000042ae <__vector_9>:
    42ae:	1f 92       	push	r1
    42b0:	0f 92       	push	r0
    42b2:	0f b6       	in	r0, 0x3f	; 63
    42b4:	0f 92       	push	r0
    42b6:	11 24       	eor	r1, r1
    42b8:	2f 93       	push	r18
    42ba:	3f 93       	push	r19
    42bc:	4f 93       	push	r20
    42be:	5f 93       	push	r21
    42c0:	6f 93       	push	r22
    42c2:	7f 93       	push	r23
    42c4:	8f 93       	push	r24
    42c6:	9f 93       	push	r25
    42c8:	af 93       	push	r26
    42ca:	bf 93       	push	r27
    42cc:	ef 93       	push	r30
    42ce:	ff 93       	push	r31
    42d0:	e0 91 ae 03 	lds	r30, 0x03AE
    42d4:	f0 91 af 03 	lds	r31, 0x03AF
    42d8:	30 97       	sbiw	r30, 0x00	; 0
    42da:	09 f0       	breq	.+2      	; 0x42de <__vector_9+0x30>
    42dc:	09 95       	icall
    42de:	ff 91       	pop	r31
    42e0:	ef 91       	pop	r30
    42e2:	bf 91       	pop	r27
    42e4:	af 91       	pop	r26
    42e6:	9f 91       	pop	r25
    42e8:	8f 91       	pop	r24
    42ea:	7f 91       	pop	r23
    42ec:	6f 91       	pop	r22
    42ee:	5f 91       	pop	r21
    42f0:	4f 91       	pop	r20
    42f2:	3f 91       	pop	r19
    42f4:	2f 91       	pop	r18
    42f6:	0f 90       	pop	r0
    42f8:	0f be       	out	0x3f, r0	; 63
    42fa:	0f 90       	pop	r0
    42fc:	1f 90       	pop	r1
    42fe:	18 95       	reti

00004300 <__vector_10>:
    4300:	1f 92       	push	r1
    4302:	0f 92       	push	r0
    4304:	0f b6       	in	r0, 0x3f	; 63
    4306:	0f 92       	push	r0
    4308:	11 24       	eor	r1, r1
    430a:	2f 93       	push	r18
    430c:	3f 93       	push	r19
    430e:	4f 93       	push	r20
    4310:	5f 93       	push	r21
    4312:	6f 93       	push	r22
    4314:	7f 93       	push	r23
    4316:	8f 93       	push	r24
    4318:	9f 93       	push	r25
    431a:	af 93       	push	r26
    431c:	bf 93       	push	r27
    431e:	ef 93       	push	r30
    4320:	ff 93       	push	r31
    4322:	e0 91 b0 03 	lds	r30, 0x03B0
    4326:	f0 91 b1 03 	lds	r31, 0x03B1
    432a:	30 97       	sbiw	r30, 0x00	; 0
    432c:	09 f0       	breq	.+2      	; 0x4330 <__vector_10+0x30>
    432e:	09 95       	icall
    4330:	ff 91       	pop	r31
    4332:	ef 91       	pop	r30
    4334:	bf 91       	pop	r27
    4336:	af 91       	pop	r26
    4338:	9f 91       	pop	r25
    433a:	8f 91       	pop	r24
    433c:	7f 91       	pop	r23
    433e:	6f 91       	pop	r22
    4340:	5f 91       	pop	r21
    4342:	4f 91       	pop	r20
    4344:	3f 91       	pop	r19
    4346:	2f 91       	pop	r18
    4348:	0f 90       	pop	r0
    434a:	0f be       	out	0x3f, r0	; 63
    434c:	0f 90       	pop	r0
    434e:	1f 90       	pop	r1
    4350:	18 95       	reti

00004352 <__vector_11>:
    4352:	1f 92       	push	r1
    4354:	0f 92       	push	r0
    4356:	0f b6       	in	r0, 0x3f	; 63
    4358:	0f 92       	push	r0
    435a:	11 24       	eor	r1, r1
    435c:	2f 93       	push	r18
    435e:	3f 93       	push	r19
    4360:	4f 93       	push	r20
    4362:	5f 93       	push	r21
    4364:	6f 93       	push	r22
    4366:	7f 93       	push	r23
    4368:	8f 93       	push	r24
    436a:	9f 93       	push	r25
    436c:	af 93       	push	r26
    436e:	bf 93       	push	r27
    4370:	ef 93       	push	r30
    4372:	ff 93       	push	r31
    4374:	e0 91 b2 03 	lds	r30, 0x03B2
    4378:	f0 91 b3 03 	lds	r31, 0x03B3
    437c:	30 97       	sbiw	r30, 0x00	; 0
    437e:	09 f0       	breq	.+2      	; 0x4382 <__vector_11+0x30>
    4380:	09 95       	icall
    4382:	ff 91       	pop	r31
    4384:	ef 91       	pop	r30
    4386:	bf 91       	pop	r27
    4388:	af 91       	pop	r26
    438a:	9f 91       	pop	r25
    438c:	8f 91       	pop	r24
    438e:	7f 91       	pop	r23
    4390:	6f 91       	pop	r22
    4392:	5f 91       	pop	r21
    4394:	4f 91       	pop	r20
    4396:	3f 91       	pop	r19
    4398:	2f 91       	pop	r18
    439a:	0f 90       	pop	r0
    439c:	0f be       	out	0x3f, r0	; 63
    439e:	0f 90       	pop	r0
    43a0:	1f 90       	pop	r1
    43a2:	18 95       	reti

000043a4 <__vector_13>:
    43a4:	1f 92       	push	r1
    43a6:	0f 92       	push	r0
    43a8:	0f b6       	in	r0, 0x3f	; 63
    43aa:	0f 92       	push	r0
    43ac:	11 24       	eor	r1, r1
    43ae:	2f 93       	push	r18
    43b0:	3f 93       	push	r19
    43b2:	4f 93       	push	r20
    43b4:	5f 93       	push	r21
    43b6:	6f 93       	push	r22
    43b8:	7f 93       	push	r23
    43ba:	8f 93       	push	r24
    43bc:	9f 93       	push	r25
    43be:	af 93       	push	r26
    43c0:	bf 93       	push	r27
    43c2:	ef 93       	push	r30
    43c4:	ff 93       	push	r31
    43c6:	e0 91 b6 03 	lds	r30, 0x03B6
    43ca:	f0 91 b7 03 	lds	r31, 0x03B7
    43ce:	30 97       	sbiw	r30, 0x00	; 0
    43d0:	09 f0       	breq	.+2      	; 0x43d4 <__vector_13+0x30>
    43d2:	09 95       	icall
    43d4:	ff 91       	pop	r31
    43d6:	ef 91       	pop	r30
    43d8:	bf 91       	pop	r27
    43da:	af 91       	pop	r26
    43dc:	9f 91       	pop	r25
    43de:	8f 91       	pop	r24
    43e0:	7f 91       	pop	r23
    43e2:	6f 91       	pop	r22
    43e4:	5f 91       	pop	r21
    43e6:	4f 91       	pop	r20
    43e8:	3f 91       	pop	r19
    43ea:	2f 91       	pop	r18
    43ec:	0f 90       	pop	r0
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	0f 90       	pop	r0
    43f2:	1f 90       	pop	r1
    43f4:	18 95       	reti

000043f6 <__vector_14>:
    43f6:	1f 92       	push	r1
    43f8:	0f 92       	push	r0
    43fa:	0f b6       	in	r0, 0x3f	; 63
    43fc:	0f 92       	push	r0
    43fe:	11 24       	eor	r1, r1
    4400:	2f 93       	push	r18
    4402:	3f 93       	push	r19
    4404:	4f 93       	push	r20
    4406:	5f 93       	push	r21
    4408:	6f 93       	push	r22
    440a:	7f 93       	push	r23
    440c:	8f 93       	push	r24
    440e:	9f 93       	push	r25
    4410:	af 93       	push	r26
    4412:	bf 93       	push	r27
    4414:	ef 93       	push	r30
    4416:	ff 93       	push	r31
    4418:	e0 91 b8 03 	lds	r30, 0x03B8
    441c:	f0 91 b9 03 	lds	r31, 0x03B9
    4420:	30 97       	sbiw	r30, 0x00	; 0
    4422:	09 f0       	breq	.+2      	; 0x4426 <__vector_14+0x30>
    4424:	09 95       	icall
    4426:	ff 91       	pop	r31
    4428:	ef 91       	pop	r30
    442a:	bf 91       	pop	r27
    442c:	af 91       	pop	r26
    442e:	9f 91       	pop	r25
    4430:	8f 91       	pop	r24
    4432:	7f 91       	pop	r23
    4434:	6f 91       	pop	r22
    4436:	5f 91       	pop	r21
    4438:	4f 91       	pop	r20
    443a:	3f 91       	pop	r19
    443c:	2f 91       	pop	r18
    443e:	0f 90       	pop	r0
    4440:	0f be       	out	0x3f, r0	; 63
    4442:	0f 90       	pop	r0
    4444:	1f 90       	pop	r1
    4446:	18 95       	reti

00004448 <__vector_12>:
    4448:	1f 92       	push	r1
    444a:	0f 92       	push	r0
    444c:	0f b6       	in	r0, 0x3f	; 63
    444e:	0f 92       	push	r0
    4450:	11 24       	eor	r1, r1
    4452:	2f 93       	push	r18
    4454:	3f 93       	push	r19
    4456:	4f 93       	push	r20
    4458:	5f 93       	push	r21
    445a:	6f 93       	push	r22
    445c:	7f 93       	push	r23
    445e:	8f 93       	push	r24
    4460:	9f 93       	push	r25
    4462:	af 93       	push	r26
    4464:	bf 93       	push	r27
    4466:	ef 93       	push	r30
    4468:	ff 93       	push	r31
    446a:	e0 91 b4 03 	lds	r30, 0x03B4
    446e:	f0 91 b5 03 	lds	r31, 0x03B5
    4472:	30 97       	sbiw	r30, 0x00	; 0
    4474:	09 f0       	breq	.+2      	; 0x4478 <__vector_12+0x30>
    4476:	09 95       	icall
    4478:	ff 91       	pop	r31
    447a:	ef 91       	pop	r30
    447c:	bf 91       	pop	r27
    447e:	af 91       	pop	r26
    4480:	9f 91       	pop	r25
    4482:	8f 91       	pop	r24
    4484:	7f 91       	pop	r23
    4486:	6f 91       	pop	r22
    4488:	5f 91       	pop	r21
    448a:	4f 91       	pop	r20
    448c:	3f 91       	pop	r19
    448e:	2f 91       	pop	r18
    4490:	0f 90       	pop	r0
    4492:	0f be       	out	0x3f, r0	; 63
    4494:	0f 90       	pop	r0
    4496:	1f 90       	pop	r1
    4498:	18 95       	reti

0000449a <__vector_15>:
    449a:	1f 92       	push	r1
    449c:	0f 92       	push	r0
    449e:	0f b6       	in	r0, 0x3f	; 63
    44a0:	0f 92       	push	r0
    44a2:	11 24       	eor	r1, r1
    44a4:	2f 93       	push	r18
    44a6:	3f 93       	push	r19
    44a8:	4f 93       	push	r20
    44aa:	5f 93       	push	r21
    44ac:	6f 93       	push	r22
    44ae:	7f 93       	push	r23
    44b0:	8f 93       	push	r24
    44b2:	9f 93       	push	r25
    44b4:	af 93       	push	r26
    44b6:	bf 93       	push	r27
    44b8:	ef 93       	push	r30
    44ba:	ff 93       	push	r31
    44bc:	e0 91 ba 03 	lds	r30, 0x03BA
    44c0:	f0 91 bb 03 	lds	r31, 0x03BB
    44c4:	30 97       	sbiw	r30, 0x00	; 0
    44c6:	09 f0       	breq	.+2      	; 0x44ca <__vector_15+0x30>
    44c8:	09 95       	icall
    44ca:	ff 91       	pop	r31
    44cc:	ef 91       	pop	r30
    44ce:	bf 91       	pop	r27
    44d0:	af 91       	pop	r26
    44d2:	9f 91       	pop	r25
    44d4:	8f 91       	pop	r24
    44d6:	7f 91       	pop	r23
    44d8:	6f 91       	pop	r22
    44da:	5f 91       	pop	r21
    44dc:	4f 91       	pop	r20
    44de:	3f 91       	pop	r19
    44e0:	2f 91       	pop	r18
    44e2:	0f 90       	pop	r0
    44e4:	0f be       	out	0x3f, r0	; 63
    44e6:	0f 90       	pop	r0
    44e8:	1f 90       	pop	r1
    44ea:	18 95       	reti

000044ec <__vector_4>:
    44ec:	1f 92       	push	r1
    44ee:	0f 92       	push	r0
    44f0:	0f b6       	in	r0, 0x3f	; 63
    44f2:	0f 92       	push	r0
    44f4:	11 24       	eor	r1, r1
    44f6:	2f 93       	push	r18
    44f8:	3f 93       	push	r19
    44fa:	4f 93       	push	r20
    44fc:	5f 93       	push	r21
    44fe:	6f 93       	push	r22
    4500:	7f 93       	push	r23
    4502:	8f 93       	push	r24
    4504:	9f 93       	push	r25
    4506:	af 93       	push	r26
    4508:	bf 93       	push	r27
    450a:	ef 93       	push	r30
    450c:	ff 93       	push	r31
    450e:	e0 91 a4 03 	lds	r30, 0x03A4
    4512:	f0 91 a5 03 	lds	r31, 0x03A5
    4516:	30 97       	sbiw	r30, 0x00	; 0
    4518:	09 f0       	breq	.+2      	; 0x451c <__vector_4+0x30>
    451a:	09 95       	icall
    451c:	ff 91       	pop	r31
    451e:	ef 91       	pop	r30
    4520:	bf 91       	pop	r27
    4522:	af 91       	pop	r26
    4524:	9f 91       	pop	r25
    4526:	8f 91       	pop	r24
    4528:	7f 91       	pop	r23
    452a:	6f 91       	pop	r22
    452c:	5f 91       	pop	r21
    452e:	4f 91       	pop	r20
    4530:	3f 91       	pop	r19
    4532:	2f 91       	pop	r18
    4534:	0f 90       	pop	r0
    4536:	0f be       	out	0x3f, r0	; 63
    4538:	0f 90       	pop	r0
    453a:	1f 90       	pop	r1
    453c:	18 95       	reti

0000453e <__vector_5>:
    453e:	1f 92       	push	r1
    4540:	0f 92       	push	r0
    4542:	0f b6       	in	r0, 0x3f	; 63
    4544:	0f 92       	push	r0
    4546:	11 24       	eor	r1, r1
    4548:	2f 93       	push	r18
    454a:	3f 93       	push	r19
    454c:	4f 93       	push	r20
    454e:	5f 93       	push	r21
    4550:	6f 93       	push	r22
    4552:	7f 93       	push	r23
    4554:	8f 93       	push	r24
    4556:	9f 93       	push	r25
    4558:	af 93       	push	r26
    455a:	bf 93       	push	r27
    455c:	ef 93       	push	r30
    455e:	ff 93       	push	r31
    4560:	e0 91 a6 03 	lds	r30, 0x03A6
    4564:	f0 91 a7 03 	lds	r31, 0x03A7
    4568:	30 97       	sbiw	r30, 0x00	; 0
    456a:	09 f0       	breq	.+2      	; 0x456e <__vector_5+0x30>
    456c:	09 95       	icall
    456e:	ff 91       	pop	r31
    4570:	ef 91       	pop	r30
    4572:	bf 91       	pop	r27
    4574:	af 91       	pop	r26
    4576:	9f 91       	pop	r25
    4578:	8f 91       	pop	r24
    457a:	7f 91       	pop	r23
    457c:	6f 91       	pop	r22
    457e:	5f 91       	pop	r21
    4580:	4f 91       	pop	r20
    4582:	3f 91       	pop	r19
    4584:	2f 91       	pop	r18
    4586:	0f 90       	pop	r0
    4588:	0f be       	out	0x3f, r0	; 63
    458a:	0f 90       	pop	r0
    458c:	1f 90       	pop	r1
    458e:	18 95       	reti

00004590 <__vector_6>:
    4590:	1f 92       	push	r1
    4592:	0f 92       	push	r0
    4594:	0f b6       	in	r0, 0x3f	; 63
    4596:	0f 92       	push	r0
    4598:	11 24       	eor	r1, r1
    459a:	2f 93       	push	r18
    459c:	3f 93       	push	r19
    459e:	4f 93       	push	r20
    45a0:	5f 93       	push	r21
    45a2:	6f 93       	push	r22
    45a4:	7f 93       	push	r23
    45a6:	8f 93       	push	r24
    45a8:	9f 93       	push	r25
    45aa:	af 93       	push	r26
    45ac:	bf 93       	push	r27
    45ae:	ef 93       	push	r30
    45b0:	ff 93       	push	r31
    45b2:	e0 91 a8 03 	lds	r30, 0x03A8
    45b6:	f0 91 a9 03 	lds	r31, 0x03A9
    45ba:	30 97       	sbiw	r30, 0x00	; 0
    45bc:	09 f0       	breq	.+2      	; 0x45c0 <__vector_6+0x30>
    45be:	09 95       	icall
    45c0:	ff 91       	pop	r31
    45c2:	ef 91       	pop	r30
    45c4:	bf 91       	pop	r27
    45c6:	af 91       	pop	r26
    45c8:	9f 91       	pop	r25
    45ca:	8f 91       	pop	r24
    45cc:	7f 91       	pop	r23
    45ce:	6f 91       	pop	r22
    45d0:	5f 91       	pop	r21
    45d2:	4f 91       	pop	r20
    45d4:	3f 91       	pop	r19
    45d6:	2f 91       	pop	r18
    45d8:	0f 90       	pop	r0
    45da:	0f be       	out	0x3f, r0	; 63
    45dc:	0f 90       	pop	r0
    45de:	1f 90       	pop	r1
    45e0:	18 95       	reti

000045e2 <__vector_7>:
    45e2:	1f 92       	push	r1
    45e4:	0f 92       	push	r0
    45e6:	0f b6       	in	r0, 0x3f	; 63
    45e8:	0f 92       	push	r0
    45ea:	11 24       	eor	r1, r1
    45ec:	2f 93       	push	r18
    45ee:	3f 93       	push	r19
    45f0:	4f 93       	push	r20
    45f2:	5f 93       	push	r21
    45f4:	6f 93       	push	r22
    45f6:	7f 93       	push	r23
    45f8:	8f 93       	push	r24
    45fa:	9f 93       	push	r25
    45fc:	af 93       	push	r26
    45fe:	bf 93       	push	r27
    4600:	ef 93       	push	r30
    4602:	ff 93       	push	r31
    4604:	e0 91 aa 03 	lds	r30, 0x03AA
    4608:	f0 91 ab 03 	lds	r31, 0x03AB
    460c:	30 97       	sbiw	r30, 0x00	; 0
    460e:	09 f0       	breq	.+2      	; 0x4612 <__vector_7+0x30>
    4610:	09 95       	icall
    4612:	ff 91       	pop	r31
    4614:	ef 91       	pop	r30
    4616:	bf 91       	pop	r27
    4618:	af 91       	pop	r26
    461a:	9f 91       	pop	r25
    461c:	8f 91       	pop	r24
    461e:	7f 91       	pop	r23
    4620:	6f 91       	pop	r22
    4622:	5f 91       	pop	r21
    4624:	4f 91       	pop	r20
    4626:	3f 91       	pop	r19
    4628:	2f 91       	pop	r18
    462a:	0f 90       	pop	r0
    462c:	0f be       	out	0x3f, r0	; 63
    462e:	0f 90       	pop	r0
    4630:	1f 90       	pop	r1
    4632:	18 95       	reti

00004634 <ISR_attach>:
    4634:	e8 2f       	mov	r30, r24
    4636:	80 32       	cpi	r24, 0x20	; 32
    4638:	68 f4       	brcc	.+26     	; 0x4654 <ISR_attach+0x20>
    463a:	80 51       	subi	r24, 0x10	; 16
    463c:	83 30       	cpi	r24, 0x03	; 3
    463e:	50 f0       	brcs	.+20     	; 0x4654 <ISR_attach+0x20>
    4640:	f0 e0       	ldi	r31, 0x00	; 0
    4642:	ee 0f       	add	r30, r30
    4644:	ff 1f       	adc	r31, r31
    4646:	e4 56       	subi	r30, 0x64	; 100
    4648:	fc 4f       	sbci	r31, 0xFC	; 252
    464a:	20 81       	ld	r18, Z
    464c:	31 81       	ldd	r19, Z+1	; 0x01
    464e:	71 83       	std	Z+1, r23	; 0x01
    4650:	60 83       	st	Z, r22
    4652:	02 c0       	rjmp	.+4      	; 0x4658 <ISR_attach+0x24>
    4654:	20 e0       	ldi	r18, 0x00	; 0
    4656:	30 e0       	ldi	r19, 0x00	; 0
    4658:	c9 01       	movw	r24, r18
    465a:	08 95       	ret

0000465c <ISR_open>:
    465c:	80 e1       	ldi	r24, 0x10	; 16
    465e:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    4662:	88 23       	and	r24, r24
    4664:	61 f4       	brne	.+24     	; 0x467e <ISR_open+0x22>
    4666:	ec e9       	ldi	r30, 0x9C	; 156
    4668:	f3 e0       	ldi	r31, 0x03	; 3
    466a:	11 92       	st	Z+, r1
    466c:	11 92       	st	Z+, r1
    466e:	83 e0       	ldi	r24, 0x03	; 3
    4670:	ec 3d       	cpi	r30, 0xDC	; 220
    4672:	f8 07       	cpc	r31, r24
    4674:	d1 f7       	brne	.-12     	; 0x466a <ISR_open+0xe>
    4676:	80 e1       	ldi	r24, 0x10	; 16
    4678:	61 e0       	ldi	r22, 0x01	; 1
    467a:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    467e:	80 e1       	ldi	r24, 0x10	; 16
    4680:	91 e0       	ldi	r25, 0x01	; 1
    4682:	08 95       	ret

00004684 <__LCD_init>:
    4684:	23 9a       	sbi	0x04, 3	; 4
    4686:	08 95       	ret

00004688 <__LCD_putchar>:
    4688:	ff 92       	push	r15
    468a:	0f 93       	push	r16
    468c:	1f 93       	push	r17
    468e:	cf 93       	push	r28
    4690:	df 93       	push	r29
    4692:	f8 2e       	mov	r15, r24
    4694:	8a e0       	ldi	r24, 0x0A	; 10
    4696:	f8 16       	cp	r15, r24
    4698:	b1 f0       	breq	.+44     	; 0x46c6 <__LCD_putchar+0x3e>
    469a:	8f 15       	cp	r24, r15
    469c:	48 f0       	brcs	.+18     	; 0x46b0 <__LCD_putchar+0x28>
    469e:	e8 e0       	ldi	r30, 0x08	; 8
    46a0:	fe 16       	cp	r15, r30
    46a2:	b9 f1       	breq	.+110    	; 0x4712 <__LCD_putchar+0x8a>
    46a4:	ef 15       	cp	r30, r15
    46a6:	38 f1       	brcs	.+78     	; 0x46f6 <__LCD_putchar+0x6e>
    46a8:	f7 e0       	ldi	r31, 0x07	; 7
    46aa:	ff 16       	cp	r15, r31
    46ac:	51 f4       	brne	.+20     	; 0x46c2 <__LCD_putchar+0x3a>
    46ae:	3b c0       	rjmp	.+118    	; 0x4726 <__LCD_putchar+0x9e>
    46b0:	8d e0       	ldi	r24, 0x0D	; 13
    46b2:	f8 16       	cp	r15, r24
    46b4:	59 f0       	breq	.+22     	; 0x46cc <__LCD_putchar+0x44>
    46b6:	eb e1       	ldi	r30, 0x1B	; 27
    46b8:	fe 16       	cp	r15, r30
    46ba:	89 f0       	breq	.+34     	; 0x46de <__LCD_putchar+0x56>
    46bc:	fc e0       	ldi	r31, 0x0C	; 12
    46be:	ff 16       	cp	r15, r31
    46c0:	41 f0       	breq	.+16     	; 0x46d2 <__LCD_putchar+0x4a>
    46c2:	01 e0       	ldi	r16, 0x01	; 1
    46c4:	41 c0       	rjmp	.+130    	; 0x4748 <__LCD_putchar+0xc0>
    46c6:	10 92 1a 07 	sts	0x071A, r1
    46ca:	03 c0       	rjmp	.+6      	; 0x46d2 <__LCD_putchar+0x4a>
    46cc:	10 92 1a 07 	sts	0x071A, r1
    46d0:	3a c0       	rjmp	.+116    	; 0x4746 <__LCD_putchar+0xbe>
    46d2:	80 91 1b 07 	lds	r24, 0x071B
    46d6:	81 50       	subi	r24, 0x01	; 1
    46d8:	80 93 1b 07 	sts	0x071B, r24
    46dc:	34 c0       	rjmp	.+104    	; 0x4746 <__LCD_putchar+0xbe>
    46de:	0e 94 cf 18 	call	0x319e	; 0x319e <LCD_clear>
    46e2:	14 c0       	rjmp	.+40     	; 0x470c <__LCD_putchar+0x84>
    46e4:	80 e0       	ldi	r24, 0x00	; 0
    46e6:	61 e0       	ldi	r22, 0x01	; 1
    46e8:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    46ec:	80 91 1a 07 	lds	r24, 0x071A
    46f0:	8f 5f       	subi	r24, 0xFF	; 255
    46f2:	80 93 1a 07 	sts	0x071A, r24
    46f6:	80 91 1a 07 	lds	r24, 0x071A
    46fa:	87 ff       	sbrs	r24, 7
    46fc:	f3 cf       	rjmp	.-26     	; 0x46e4 <__LCD_putchar+0x5c>
    46fe:	10 92 1a 07 	sts	0x071A, r1
    4702:	80 91 1b 07 	lds	r24, 0x071B
    4706:	81 50       	subi	r24, 0x01	; 1
    4708:	80 93 1b 07 	sts	0x071B, r24
    470c:	00 e0       	ldi	r16, 0x00	; 0
    470e:	11 e0       	ldi	r17, 0x01	; 1
    4710:	1c c0       	rjmp	.+56     	; 0x474a <__LCD_putchar+0xc2>
    4712:	80 91 1a 07 	lds	r24, 0x071A
    4716:	88 23       	and	r24, r24
    4718:	b1 f0       	breq	.+44     	; 0x4746 <__LCD_putchar+0xbe>
    471a:	80 91 1a 07 	lds	r24, 0x071A
    471e:	86 50       	subi	r24, 0x06	; 6
    4720:	80 93 1a 07 	sts	0x071A, r24
    4724:	10 c0       	rjmp	.+32     	; 0x4746 <__LCD_putchar+0xbe>
    4726:	81 e0       	ldi	r24, 0x01	; 1
    4728:	0e 94 db 1a 	call	0x35b6	; 0x35b6 <SPKR_open>
    472c:	64 ef       	ldi	r22, 0xF4	; 244
    472e:	71 e0       	ldi	r23, 0x01	; 1
    4730:	80 e0       	ldi	r24, 0x00	; 0
    4732:	90 e0       	ldi	r25, 0x00	; 0
    4734:	4d e7       	ldi	r20, 0x7D	; 125
    4736:	50 e0       	ldi	r21, 0x00	; 0
    4738:	24 e6       	ldi	r18, 0x64	; 100
    473a:	30 e0       	ldi	r19, 0x00	; 0
    473c:	0e 94 5e 25 	call	0x4abc	; 0x4abc <SPKR_play_beep>
    4740:	81 e0       	ldi	r24, 0x01	; 1
    4742:	0e 94 2a 25 	call	0x4a54	; 0x4a54 <SPKR_close>
    4746:	00 e0       	ldi	r16, 0x00	; 0
    4748:	10 e0       	ldi	r17, 0x00	; 0
    474a:	80 91 1b 07 	lds	r24, 0x071B
    474e:	60 91 1a 07 	lds	r22, 0x071A
    4752:	0e 94 95 19 	call	0x332a	; 0x332a <LCD_set_PGC_addr>
    4756:	00 23       	and	r16, r16
    4758:	51 f1       	breq	.+84     	; 0x47ae <__LCD_putchar+0x126>
    475a:	85 e0       	ldi	r24, 0x05	; 5
    475c:	f8 9e       	mul	r15, r24
    475e:	c0 01       	movw	r24, r0
    4760:	11 24       	eor	r1, r1
    4762:	ec 01       	movw	r28, r24
    4764:	c3 55       	subi	r28, 0x53	; 83
    4766:	df 4f       	sbci	r29, 0xFF	; 255
    4768:	8c 01       	movw	r16, r24
    476a:	0e 54       	subi	r16, 0x4E	; 78
    476c:	1f 4f       	sbci	r17, 0xFF	; 255
    476e:	fe 01       	movw	r30, r28
    4770:	84 91       	lpm	r24, Z+
    4772:	61 e0       	ldi	r22, 0x01	; 1
    4774:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    4778:	21 96       	adiw	r28, 0x01	; 1
    477a:	c0 17       	cp	r28, r16
    477c:	d1 07       	cpc	r29, r17
    477e:	b9 f7       	brne	.-18     	; 0x476e <__LCD_putchar+0xe6>
    4780:	80 e0       	ldi	r24, 0x00	; 0
    4782:	61 e0       	ldi	r22, 0x01	; 1
    4784:	0e 94 ae 19 	call	0x335c	; 0x335c <LCD_write>
    4788:	80 91 1a 07 	lds	r24, 0x071A
    478c:	8a 5f       	subi	r24, 0xFA	; 250
    478e:	80 93 1a 07 	sts	0x071A, r24
    4792:	80 91 1a 07 	lds	r24, 0x071A
    4796:	90 e0       	ldi	r25, 0x00	; 0
    4798:	8c 37       	cpi	r24, 0x7C	; 124
    479a:	91 05       	cpc	r25, r1
    479c:	3c f0       	brlt	.+14     	; 0x47ac <__LCD_putchar+0x124>
    479e:	10 92 1a 07 	sts	0x071A, r1
    47a2:	80 91 1b 07 	lds	r24, 0x071B
    47a6:	81 50       	subi	r24, 0x01	; 1
    47a8:	80 93 1b 07 	sts	0x071B, r24
    47ac:	11 e0       	ldi	r17, 0x01	; 1
    47ae:	80 91 1b 07 	lds	r24, 0x071B
    47b2:	83 70       	andi	r24, 0x03	; 3
    47b4:	80 93 1b 07 	sts	0x071B, r24
    47b8:	11 30       	cpi	r17, 0x01	; 1
    47ba:	59 f4       	brne	.+22     	; 0x47d2 <__LCD_putchar+0x14a>
    47bc:	80 91 1c 07 	lds	r24, 0x071C
    47c0:	81 30       	cpi	r24, 0x01	; 1
    47c2:	39 f4       	brne	.+14     	; 0x47d2 <__LCD_putchar+0x14a>
    47c4:	e0 91 1d 07 	lds	r30, 0x071D
    47c8:	f0 91 1e 07 	lds	r31, 0x071E
    47cc:	30 97       	sbiw	r30, 0x00	; 0
    47ce:	09 f0       	breq	.+2      	; 0x47d2 <__LCD_putchar+0x14a>
    47d0:	09 95       	icall
    47d2:	80 e0       	ldi	r24, 0x00	; 0
    47d4:	90 e0       	ldi	r25, 0x00	; 0
    47d6:	df 91       	pop	r29
    47d8:	cf 91       	pop	r28
    47da:	1f 91       	pop	r17
    47dc:	0f 91       	pop	r16
    47de:	ff 90       	pop	r15
    47e0:	08 95       	ret

000047e2 <__LED_clr_pattern>:
    47e2:	85 fd       	sbrc	r24, 5
    47e4:	5d 98       	cbi	0x0b, 5	; 11
    47e6:	86 fd       	sbrc	r24, 6
    47e8:	5e 98       	cbi	0x0b, 6	; 11
    47ea:	08 95       	ret

000047ec <__LED_init>:
    47ec:	55 9a       	sbi	0x0a, 5	; 10
    47ee:	56 9a       	sbi	0x0a, 6	; 10
    47f0:	08 95       	ret

000047f2 <__LED_set_pattern>:
    47f2:	85 fd       	sbrc	r24, 5
    47f4:	5d 9a       	sbi	0x0b, 5	; 11
    47f6:	86 fd       	sbrc	r24, 6
    47f8:	5e 9a       	sbi	0x0b, 6	; 11
    47fa:	08 95       	ret

000047fc <ATMEGA_open>:
    47fc:	80 e0       	ldi	r24, 0x00	; 0
    47fe:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    4802:	88 23       	and	r24, r24
    4804:	51 f4       	brne	.+20     	; 0x481a <ATMEGA_open+0x1e>
    4806:	f8 94       	cli
    4808:	0e 94 10 27 	call	0x4e20	; 0x4e20 <__ATMEGA_init>
    480c:	81 e0       	ldi	r24, 0x01	; 1
    480e:	0e 94 10 24 	call	0x4820	; 0x4820 <ATMEGA_set_clk_mode>
    4812:	80 e0       	ldi	r24, 0x00	; 0
    4814:	61 e0       	ldi	r22, 0x01	; 1
    4816:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    481a:	80 e0       	ldi	r24, 0x00	; 0
    481c:	91 e0       	ldi	r25, 0x01	; 1
    481e:	08 95       	ret

00004820 <ATMEGA_set_clk_mode>:
    4820:	81 30       	cpi	r24, 0x01	; 1
    4822:	49 f0       	breq	.+18     	; 0x4836 <ATMEGA_set_clk_mode+0x16>
    4824:	f8 94       	cli
    4826:	81 30       	cpi	r24, 0x01	; 1
    4828:	20 f1       	brcs	.+72     	; 0x4872 <ATMEGA_set_clk_mode+0x52>
    482a:	82 30       	cpi	r24, 0x02	; 2
    482c:	b1 f0       	breq	.+44     	; 0x485a <ATMEGA_set_clk_mode+0x3a>
    482e:	83 30       	cpi	r24, 0x03	; 3
    4830:	09 f0       	breq	.+2      	; 0x4834 <ATMEGA_set_clk_mode+0x14>
    4832:	45 c0       	rjmp	.+138    	; 0x48be <ATMEGA_set_clk_mode+0x9e>
    4834:	17 c0       	rjmp	.+46     	; 0x4864 <ATMEGA_set_clk_mode+0x44>
    4836:	2c 9a       	sbi	0x05, 4	; 5
    4838:	80 e8       	ldi	r24, 0x80	; 128
    483a:	80 93 61 00 	sts	0x0061, r24
    483e:	10 92 61 00 	sts	0x0061, r1
    4842:	80 e0       	ldi	r24, 0x00	; 0
    4844:	90 e0       	ldi	r25, 0x00	; 0
    4846:	00 00       	nop
    4848:	01 96       	adiw	r24, 0x01	; 1
    484a:	88 32       	cpi	r24, 0x28	; 40
    484c:	91 05       	cpc	r25, r1
    484e:	d9 f7       	brne	.-10     	; 0x4846 <ATMEGA_set_clk_mode+0x26>
    4850:	10 92 68 00 	sts	0x0068, r1
    4854:	10 92 6b 00 	sts	0x006B, r1
    4858:	08 95       	ret
    485a:	80 e8       	ldi	r24, 0x80	; 128
    485c:	80 93 61 00 	sts	0x0061, r24
    4860:	83 e0       	ldi	r24, 0x03	; 3
    4862:	04 c0       	rjmp	.+8      	; 0x486c <ATMEGA_set_clk_mode+0x4c>
    4864:	80 e8       	ldi	r24, 0x80	; 128
    4866:	80 93 61 00 	sts	0x0061, r24
    486a:	88 e0       	ldi	r24, 0x08	; 8
    486c:	80 93 61 00 	sts	0x0061, r24
    4870:	28 c0       	rjmp	.+80     	; 0x48c2 <ATMEGA_set_clk_mode+0xa2>
    4872:	80 e0       	ldi	r24, 0x00	; 0
    4874:	90 e0       	ldi	r25, 0x00	; 0
    4876:	00 00       	nop
    4878:	01 96       	adiw	r24, 0x01	; 1
    487a:	2d e6       	ldi	r18, 0x6D	; 109
    487c:	80 36       	cpi	r24, 0x60	; 96
    487e:	92 07       	cpc	r25, r18
    4880:	d1 f7       	brne	.-12     	; 0x4876 <ATMEGA_set_clk_mode+0x56>
    4882:	2c 98       	cbi	0x05, 4	; 5
    4884:	80 e0       	ldi	r24, 0x00	; 0
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	00 00       	nop
    488a:	01 96       	adiw	r24, 0x01	; 1
    488c:	2d e6       	ldi	r18, 0x6D	; 109
    488e:	80 36       	cpi	r24, 0x60	; 96
    4890:	92 07       	cpc	r25, r18
    4892:	d1 f7       	brne	.-12     	; 0x4888 <ATMEGA_set_clk_mode+0x68>
    4894:	10 92 7a 00 	sts	0x007A, r1
    4898:	8f ef       	ldi	r24, 0xFF	; 255
    489a:	80 93 64 00 	sts	0x0064, r24
    489e:	80 91 68 00 	lds	r24, 0x0068
    48a2:	81 60       	ori	r24, 0x01	; 1
    48a4:	80 93 68 00 	sts	0x0068, r24
    48a8:	80 91 6b 00 	lds	r24, 0x006B
    48ac:	84 60       	ori	r24, 0x04	; 4
    48ae:	80 93 6b 00 	sts	0x006B, r24
    48b2:	78 94       	sei
    48b4:	83 b7       	in	r24, 0x33	; 51
    48b6:	81 60       	ori	r24, 0x01	; 1
    48b8:	83 bf       	out	0x33, r24	; 51
    48ba:	88 95       	sleep
    48bc:	08 95       	ret
    48be:	82 30       	cpi	r24, 0x02	; 2
    48c0:	08 f0       	brcs	.+2      	; 0x48c4 <ATMEGA_set_clk_mode+0xa4>
    48c2:	78 94       	sei
    48c4:	08 95       	ret

000048c6 <SPI_open>:
    48c6:	0f 93       	push	r16
    48c8:	1f 93       	push	r17
    48ca:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <__SPI_init>
    48ce:	80 e0       	ldi	r24, 0x00	; 0
    48d0:	6b e2       	ldi	r22, 0x2B	; 43
    48d2:	77 e2       	ldi	r23, 0x27	; 39
    48d4:	0e 94 ae 24 	call	0x495c	; 0x495c <SPI_set_config_func>
    48d8:	81 e0       	ldi	r24, 0x01	; 1
    48da:	63 e2       	ldi	r22, 0x23	; 35
    48dc:	77 e2       	ldi	r23, 0x27	; 39
    48de:	0e 94 ae 24 	call	0x495c	; 0x495c <SPI_set_config_func>
    48e2:	82 e0       	ldi	r24, 0x02	; 2
    48e4:	6b e1       	ldi	r22, 0x1B	; 27
    48e6:	77 e2       	ldi	r23, 0x27	; 39
    48e8:	0e 94 ae 24 	call	0x495c	; 0x495c <SPI_set_config_func>
    48ec:	86 e0       	ldi	r24, 0x06	; 6
    48ee:	63 e3       	ldi	r22, 0x33	; 51
    48f0:	77 e2       	ldi	r23, 0x27	; 39
    48f2:	0e 94 ae 24 	call	0x495c	; 0x495c <SPI_set_config_func>
    48f6:	03 e1       	ldi	r16, 0x13	; 19
    48f8:	17 e2       	ldi	r17, 0x27	; 39
    48fa:	83 e0       	ldi	r24, 0x03	; 3
    48fc:	b8 01       	movw	r22, r16
    48fe:	0e 94 ae 24 	call	0x495c	; 0x495c <SPI_set_config_func>
    4902:	84 e0       	ldi	r24, 0x04	; 4
    4904:	b8 01       	movw	r22, r16
    4906:	0e 94 ae 24 	call	0x495c	; 0x495c <SPI_set_config_func>
    490a:	85 e0       	ldi	r24, 0x05	; 5
    490c:	b8 01       	movw	r22, r16
    490e:	0e 94 ae 24 	call	0x495c	; 0x495c <SPI_set_config_func>
    4912:	87 e0       	ldi	r24, 0x07	; 7
    4914:	b8 01       	movw	r22, r16
    4916:	0e 94 ae 24 	call	0x495c	; 0x495c <SPI_set_config_func>
    491a:	82 e0       	ldi	r24, 0x02	; 2
    491c:	61 e0       	ldi	r22, 0x01	; 1
    491e:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    4922:	8f ef       	ldi	r24, 0xFF	; 255
    4924:	80 93 1f 07 	sts	0x071F, r24
    4928:	87 e0       	ldi	r24, 0x07	; 7
    492a:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <SPI_set_slave_addr>
    492e:	82 e0       	ldi	r24, 0x02	; 2
    4930:	91 e0       	ldi	r25, 0x01	; 1
    4932:	1f 91       	pop	r17
    4934:	0f 91       	pop	r16
    4936:	08 95       	ret

00004938 <SPI_receive>:
    4938:	1f 93       	push	r17
    493a:	16 2f       	mov	r17, r22
    493c:	0e 94 ea 19 	call	0x33d4	; 0x33d4 <SPI_set_slave_addr>
    4940:	82 e0       	ldi	r24, 0x02	; 2
    4942:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    4946:	81 30       	cpi	r24, 0x01	; 1
    4948:	11 f0       	breq	.+4      	; 0x494e <SPI_receive+0x16>
    494a:	80 e0       	ldi	r24, 0x00	; 0
    494c:	05 c0       	rjmp	.+10     	; 0x4958 <SPI_receive+0x20>
    494e:	1e bd       	out	0x2e, r17	; 46
    4950:	0d b4       	in	r0, 0x2d	; 45
    4952:	07 fe       	sbrs	r0, 7
    4954:	fd cf       	rjmp	.-6      	; 0x4950 <SPI_receive+0x18>
    4956:	8e b5       	in	r24, 0x2e	; 46
    4958:	1f 91       	pop	r17
    495a:	08 95       	ret

0000495c <SPI_set_config_func>:
    495c:	e8 2f       	mov	r30, r24
    495e:	f0 e0       	ldi	r31, 0x00	; 0
    4960:	ee 0f       	add	r30, r30
    4962:	ff 1f       	adc	r31, r31
    4964:	e4 52       	subi	r30, 0x24	; 36
    4966:	fc 4f       	sbci	r31, 0xFC	; 252
    4968:	71 83       	std	Z+1, r23	; 0x01
    496a:	60 83       	st	Z, r22
    496c:	08 95       	ret

0000496e <__SPKR_TIMER1_COMPA_vect>:
    496e:	0e 94 ba 24 	call	0x4974	; 0x4974 <SPKR_clk>
    4972:	08 95       	ret

00004974 <SPKR_clk>:
    4974:	80 91 ee 03 	lds	r24, 0x03EE
    4978:	90 91 ef 03 	lds	r25, 0x03EF
    497c:	a0 91 f0 03 	lds	r26, 0x03F0
    4980:	b0 91 f1 03 	lds	r27, 0x03F1
    4984:	20 91 f2 03 	lds	r18, 0x03F2
    4988:	30 91 f3 03 	lds	r19, 0x03F3
    498c:	40 91 f4 03 	lds	r20, 0x03F4
    4990:	50 91 f5 03 	lds	r21, 0x03F5
    4994:	28 0f       	add	r18, r24
    4996:	39 1f       	adc	r19, r25
    4998:	4a 1f       	adc	r20, r26
    499a:	5b 1f       	adc	r21, r27
    499c:	20 93 ee 03 	sts	0x03EE, r18
    49a0:	30 93 ef 03 	sts	0x03EF, r19
    49a4:	40 93 f0 03 	sts	0x03F0, r20
    49a8:	50 93 f1 03 	sts	0x03F1, r21
    49ac:	80 91 ee 03 	lds	r24, 0x03EE
    49b0:	90 91 ef 03 	lds	r25, 0x03EF
    49b4:	a0 91 f0 03 	lds	r26, 0x03F0
    49b8:	b0 91 f1 03 	lds	r27, 0x03F1
    49bc:	88 51       	subi	r24, 0x18	; 24
    49be:	96 4f       	sbci	r25, 0xF6	; 246
    49c0:	a0 40       	sbci	r26, 0x00	; 0
    49c2:	b0 40       	sbci	r27, 0x00	; 0
    49c4:	bc f0       	brlt	.+46     	; 0x49f4 <SPKR_clk+0x80>
    49c6:	8b b1       	in	r24, 0x0b	; 11
    49c8:	80 58       	subi	r24, 0x80	; 128
    49ca:	8b b9       	out	0x0b, r24	; 11
    49cc:	80 91 ee 03 	lds	r24, 0x03EE
    49d0:	90 91 ef 03 	lds	r25, 0x03EF
    49d4:	a0 91 f0 03 	lds	r26, 0x03F0
    49d8:	b0 91 f1 03 	lds	r27, 0x03F1
    49dc:	88 51       	subi	r24, 0x18	; 24
    49de:	96 4f       	sbci	r25, 0xF6	; 246
    49e0:	a0 40       	sbci	r26, 0x00	; 0
    49e2:	b0 40       	sbci	r27, 0x00	; 0
    49e4:	80 93 ee 03 	sts	0x03EE, r24
    49e8:	90 93 ef 03 	sts	0x03EF, r25
    49ec:	a0 93 f0 03 	sts	0x03F0, r26
    49f0:	b0 93 f1 03 	sts	0x03F1, r27
    49f4:	08 95       	ret

000049f6 <__SPKR_close_beep_mode>:
    49f6:	8a e0       	ldi	r24, 0x0A	; 10
    49f8:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    49fc:	81 30       	cpi	r24, 0x01	; 1
    49fe:	41 f4       	brne	.+16     	; 0x4a10 <__SPKR_close_beep_mode+0x1a>
    4a00:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__SPKR_close>
    4a04:	10 92 ed 03 	sts	0x03ED, r1
    4a08:	8a e0       	ldi	r24, 0x0A	; 10
    4a0a:	60 e0       	ldi	r22, 0x00	; 0
    4a0c:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    4a10:	08 95       	ret

00004a12 <__SPKR_close_tone_mode>:
    4a12:	89 e0       	ldi	r24, 0x09	; 9
    4a14:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    4a18:	81 30       	cpi	r24, 0x01	; 1
    4a1a:	d9 f4       	brne	.+54     	; 0x4a52 <__SPKR_close_tone_mode+0x40>
    4a1c:	80 91 ec 03 	lds	r24, 0x03EC
    4a20:	88 23       	and	r24, r24
    4a22:	11 f0       	breq	.+4      	; 0x4a28 <__SPKR_close_tone_mode+0x16>
    4a24:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <__SPKR_stop>
    4a28:	82 e0       	ldi	r24, 0x02	; 2
    4a2a:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__SPKR_close>
    4a2e:	80 91 fa 03 	lds	r24, 0x03FA
    4a32:	90 91 fb 03 	lds	r25, 0x03FB
    4a36:	00 97       	sbiw	r24, 0x00	; 0
    4a38:	31 f0       	breq	.+12     	; 0x4a46 <__SPKR_close_tone_mode+0x34>
    4a3a:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <free>
    4a3e:	10 92 fb 03 	sts	0x03FB, r1
    4a42:	10 92 fa 03 	sts	0x03FA, r1
    4a46:	10 92 ec 03 	sts	0x03EC, r1
    4a4a:	89 e0       	ldi	r24, 0x09	; 9
    4a4c:	60 e0       	ldi	r22, 0x00	; 0
    4a4e:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    4a52:	08 95       	ret

00004a54 <SPKR_close>:
    4a54:	81 30       	cpi	r24, 0x01	; 1
    4a56:	29 f0       	breq	.+10     	; 0x4a62 <SPKR_close+0xe>
    4a58:	82 30       	cpi	r24, 0x02	; 2
    4a5a:	29 f4       	brne	.+10     	; 0x4a66 <SPKR_close+0x12>
    4a5c:	0e 94 09 25 	call	0x4a12	; 0x4a12 <__SPKR_close_tone_mode>
    4a60:	08 95       	ret
    4a62:	0e 94 fb 24 	call	0x49f6	; 0x49f6 <__SPKR_close_beep_mode>
    4a66:	08 95       	ret

00004a68 <__SPKR_init>:
    4a68:	98 2f       	mov	r25, r24
    4a6a:	80 91 ec 03 	lds	r24, 0x03EC
    4a6e:	88 23       	and	r24, r24
    4a70:	31 f4       	brne	.+12     	; 0x4a7e <__SPKR_init+0x16>
    4a72:	80 91 ed 03 	lds	r24, 0x03ED
    4a76:	88 23       	and	r24, r24
    4a78:	11 f4       	brne	.+4      	; 0x4a7e <__SPKR_init+0x16>
    4a7a:	57 9a       	sbi	0x0a, 7	; 10
    4a7c:	5f 98       	cbi	0x0b, 7	; 11
    4a7e:	80 91 ec 03 	lds	r24, 0x03EC
    4a82:	88 23       	and	r24, r24
    4a84:	d1 f4       	brne	.+52     	; 0x4aba <__SPKR_init+0x52>
    4a86:	92 30       	cpi	r25, 0x02	; 2
    4a88:	c1 f4       	brne	.+48     	; 0x4aba <__SPKR_init+0x52>
    4a8a:	10 92 80 00 	sts	0x0080, r1
    4a8e:	10 92 81 00 	sts	0x0081, r1
    4a92:	80 91 81 00 	lds	r24, 0x0081
    4a96:	88 60       	ori	r24, 0x08	; 8
    4a98:	80 93 81 00 	sts	0x0081, r24
    4a9c:	80 91 81 00 	lds	r24, 0x0081
    4aa0:	81 60       	ori	r24, 0x01	; 1
    4aa2:	80 93 81 00 	sts	0x0081, r24
    4aa6:	10 92 85 00 	sts	0x0085, r1
    4aaa:	10 92 84 00 	sts	0x0084, r1
    4aae:	81 e0       	ldi	r24, 0x01	; 1
    4ab0:	80 93 89 00 	sts	0x0089, r24
    4ab4:	80 e9       	ldi	r24, 0x90	; 144
    4ab6:	80 93 88 00 	sts	0x0088, r24
    4aba:	08 95       	ret

00004abc <SPKR_play_beep>:
    4abc:	8f 92       	push	r8
    4abe:	9f 92       	push	r9
    4ac0:	af 92       	push	r10
    4ac2:	bf 92       	push	r11
    4ac4:	cf 92       	push	r12
    4ac6:	df 92       	push	r13
    4ac8:	ef 92       	push	r14
    4aca:	ff 92       	push	r15
    4acc:	0f 93       	push	r16
    4ace:	1f 93       	push	r17
    4ad0:	cf 93       	push	r28
    4ad2:	df 93       	push	r29
    4ad4:	4b 01       	movw	r8, r22
    4ad6:	5c 01       	movw	r10, r24
    4ad8:	ea 01       	movw	r28, r20
    4ada:	b9 01       	movw	r22, r18
    4adc:	21 15       	cp	r18, r1
    4ade:	31 05       	cpc	r19, r1
    4ae0:	39 f1       	breq	.+78     	; 0x4b30 <SPKR_play_beep+0x74>
    4ae2:	9e 01       	movw	r18, r28
    4ae4:	44 27       	eor	r20, r20
    4ae6:	37 fd       	sbrc	r19, 7
    4ae8:	40 95       	com	r20
    4aea:	54 2f       	mov	r21, r20
    4aec:	65 36       	cpi	r22, 0x65	; 101
    4aee:	71 05       	cpc	r23, r1
    4af0:	10 f0       	brcs	.+4      	; 0x4af6 <SPKR_play_beep+0x3a>
    4af2:	64 e6       	ldi	r22, 0x64	; 100
    4af4:	70 e0       	ldi	r23, 0x00	; 0
    4af6:	80 e0       	ldi	r24, 0x00	; 0
    4af8:	90 e0       	ldi	r25, 0x00	; 0
    4afa:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    4afe:	24 e6       	ldi	r18, 0x64	; 100
    4b00:	30 e0       	ldi	r19, 0x00	; 0
    4b02:	40 e0       	ldi	r20, 0x00	; 0
    4b04:	50 e0       	ldi	r21, 0x00	; 0
    4b06:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__udivmodsi4>
    4b0a:	79 01       	movw	r14, r18
    4b0c:	8a 01       	movw	r16, r20
    4b0e:	c5 01       	movw	r24, r10
    4b10:	b4 01       	movw	r22, r8
    4b12:	0e 94 43 27 	call	0x4e86	; 0x4e86 <SPKR_beep>
    4b16:	c7 01       	movw	r24, r14
    4b18:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TMRSRVC_delay>
    4b1c:	60 e0       	ldi	r22, 0x00	; 0
    4b1e:	70 e0       	ldi	r23, 0x00	; 0
    4b20:	80 e0       	ldi	r24, 0x00	; 0
    4b22:	90 e0       	ldi	r25, 0x00	; 0
    4b24:	0e 94 43 27 	call	0x4e86	; 0x4e86 <SPKR_beep>
    4b28:	ce 01       	movw	r24, r28
    4b2a:	8e 19       	sub	r24, r14
    4b2c:	9f 09       	sbc	r25, r15
    4b2e:	04 c0       	rjmp	.+8      	; 0x4b38 <SPKR_play_beep+0x7c>
    4b30:	41 15       	cp	r20, r1
    4b32:	51 05       	cpc	r21, r1
    4b34:	19 f0       	breq	.+6      	; 0x4b3c <SPKR_play_beep+0x80>
    4b36:	ca 01       	movw	r24, r20
    4b38:	0e 94 8f 1f 	call	0x3f1e	; 0x3f1e <TMRSRVC_delay>
    4b3c:	df 91       	pop	r29
    4b3e:	cf 91       	pop	r28
    4b40:	1f 91       	pop	r17
    4b42:	0f 91       	pop	r16
    4b44:	ff 90       	pop	r15
    4b46:	ef 90       	pop	r14
    4b48:	df 90       	pop	r13
    4b4a:	cf 90       	pop	r12
    4b4c:	bf 90       	pop	r11
    4b4e:	af 90       	pop	r10
    4b50:	9f 90       	pop	r9
    4b52:	8f 90       	pop	r8
    4b54:	08 95       	ret

00004b56 <__SPKR_stop>:
    4b56:	ef e6       	ldi	r30, 0x6F	; 111
    4b58:	f0 e0       	ldi	r31, 0x00	; 0
    4b5a:	80 81       	ld	r24, Z
    4b5c:	8d 7f       	andi	r24, 0xFD	; 253
    4b5e:	80 83       	st	Z, r24
    4b60:	08 95       	ret

00004b62 <STEPPER_go>:
    4b62:	98 2f       	mov	r25, r24
    4b64:	81 e0       	ldi	r24, 0x01	; 1
    4b66:	80 93 04 07 	sts	0x0704, r24
    4b6a:	91 30       	cpi	r25, 0x01	; 1
    4b6c:	51 f0       	breq	.+20     	; 0x4b82 <STEPPER_go+0x20>
    4b6e:	91 30       	cpi	r25, 0x01	; 1
    4b70:	18 f0       	brcs	.+6      	; 0x4b78 <STEPPER_go+0x16>
    4b72:	92 30       	cpi	r25, 0x02	; 2
    4b74:	41 f4       	brne	.+16     	; 0x4b86 <STEPPER_go+0x24>
    4b76:	03 c0       	rjmp	.+6      	; 0x4b7e <STEPPER_go+0x1c>
    4b78:	10 92 ec 06 	sts	0x06EC, r1
    4b7c:	04 c0       	rjmp	.+8      	; 0x4b86 <STEPPER_go+0x24>
    4b7e:	10 92 ec 06 	sts	0x06EC, r1
    4b82:	10 92 ed 06 	sts	0x06ED, r1
    4b86:	10 92 04 07 	sts	0x0704, r1
    4b8a:	08 95       	ret

00004b8c <__STEPPER_init>:
    4b8c:	3a 9a       	sbi	0x07, 2	; 7
    4b8e:	3b 9a       	sbi	0x07, 3	; 7
    4b90:	3c 9a       	sbi	0x07, 4	; 7
    4b92:	3d 9a       	sbi	0x07, 5	; 7
    4b94:	3e 9a       	sbi	0x07, 6	; 7
    4b96:	3f 9a       	sbi	0x07, 7	; 7
    4b98:	88 b1       	in	r24, 0x08	; 8
    4b9a:	83 70       	andi	r24, 0x03	; 3
    4b9c:	88 b9       	out	0x08, r24	; 8
    4b9e:	08 95       	ret

00004ba0 <STEPPER_set_steps>:
    4ba0:	98 2f       	mov	r25, r24
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	80 93 04 07 	sts	0x0704, r24
    4ba8:	91 30       	cpi	r25, 0x01	; 1
    4baa:	71 f0       	breq	.+28     	; 0x4bc8 <STEPPER_set_steps+0x28>
    4bac:	91 30       	cpi	r25, 0x01	; 1
    4bae:	18 f0       	brcs	.+6      	; 0x4bb6 <STEPPER_set_steps+0x16>
    4bb0:	92 30       	cpi	r25, 0x02	; 2
    4bb2:	71 f4       	brne	.+28     	; 0x4bd0 <STEPPER_set_steps+0x30>
    4bb4:	05 c0       	rjmp	.+10     	; 0x4bc0 <STEPPER_set_steps+0x20>
    4bb6:	70 93 e1 06 	sts	0x06E1, r23
    4bba:	60 93 e0 06 	sts	0x06E0, r22
    4bbe:	08 c0       	rjmp	.+16     	; 0x4bd0 <STEPPER_set_steps+0x30>
    4bc0:	70 93 e1 06 	sts	0x06E1, r23
    4bc4:	60 93 e0 06 	sts	0x06E0, r22
    4bc8:	70 93 e3 06 	sts	0x06E3, r23
    4bcc:	60 93 e2 06 	sts	0x06E2, r22
    4bd0:	10 92 04 07 	sts	0x0704, r1
    4bd4:	08 95       	ret

00004bd6 <STEPPER_set_stop_mode>:
    4bd6:	98 2f       	mov	r25, r24
    4bd8:	81 e0       	ldi	r24, 0x01	; 1
    4bda:	80 93 04 07 	sts	0x0704, r24
    4bde:	91 30       	cpi	r25, 0x01	; 1
    4be0:	51 f0       	breq	.+20     	; 0x4bf6 <STEPPER_set_stop_mode+0x20>
    4be2:	91 30       	cpi	r25, 0x01	; 1
    4be4:	18 f0       	brcs	.+6      	; 0x4bec <STEPPER_set_stop_mode+0x16>
    4be6:	92 30       	cpi	r25, 0x02	; 2
    4be8:	41 f4       	brne	.+16     	; 0x4bfa <STEPPER_set_stop_mode+0x24>
    4bea:	03 c0       	rjmp	.+6      	; 0x4bf2 <STEPPER_set_stop_mode+0x1c>
    4bec:	60 93 ee 06 	sts	0x06EE, r22
    4bf0:	04 c0       	rjmp	.+8      	; 0x4bfa <STEPPER_set_stop_mode+0x24>
    4bf2:	60 93 ee 06 	sts	0x06EE, r22
    4bf6:	60 93 ef 06 	sts	0x06EF, r22
    4bfa:	10 92 04 07 	sts	0x0704, r1
    4bfe:	08 95       	ret

00004c00 <STEPPER_setup_decels>:
    4c00:	0f 93       	push	r16
    4c02:	1f 93       	push	r17
    4c04:	cf 93       	push	r28
    4c06:	df 93       	push	r29
    4c08:	eb 01       	movw	r28, r22
    4c0a:	8a 01       	movw	r16, r20
    4c0c:	81 30       	cpi	r24, 0x01	; 1
    4c0e:	01 f1       	breq	.+64     	; 0x4c50 <STEPPER_setup_decels+0x50>
    4c10:	81 30       	cpi	r24, 0x01	; 1
    4c12:	18 f0       	brcs	.+6      	; 0x4c1a <STEPPER_setup_decels+0x1a>
    4c14:	82 30       	cpi	r24, 0x02	; 2
    4c16:	61 f5       	brne	.+88     	; 0x4c70 <STEPPER_setup_decels+0x70>
    4c18:	0d c0       	rjmp	.+26     	; 0x4c34 <STEPPER_setup_decels+0x34>
    4c1a:	80 91 d8 06 	lds	r24, 0x06D8
    4c1e:	90 91 d9 06 	lds	r25, 0x06D9
    4c22:	89 2b       	or	r24, r25
    4c24:	11 f0       	breq	.+4      	; 0x4c2a <STEPPER_setup_decels+0x2a>
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	1a c0       	rjmp	.+52     	; 0x4c5e <STEPPER_setup_decels+0x5e>
    4c2a:	10 92 e5 06 	sts	0x06E5, r1
    4c2e:	10 92 e4 06 	sts	0x06E4, r1
    4c32:	1e c0       	rjmp	.+60     	; 0x4c70 <STEPPER_setup_decels+0x70>
    4c34:	80 91 d8 06 	lds	r24, 0x06D8
    4c38:	90 91 d9 06 	lds	r25, 0x06D9
    4c3c:	89 2b       	or	r24, r25
    4c3e:	21 f0       	breq	.+8      	; 0x4c48 <STEPPER_setup_decels+0x48>
    4c40:	80 e0       	ldi	r24, 0x00	; 0
    4c42:	0e 94 76 27 	call	0x4eec	; 0x4eec <STEPPER_set_decel_step_values>
    4c46:	04 c0       	rjmp	.+8      	; 0x4c50 <STEPPER_setup_decels+0x50>
    4c48:	10 92 e5 06 	sts	0x06E5, r1
    4c4c:	10 92 e4 06 	sts	0x06E4, r1
    4c50:	80 91 da 06 	lds	r24, 0x06DA
    4c54:	90 91 db 06 	lds	r25, 0x06DB
    4c58:	89 2b       	or	r24, r25
    4c5a:	31 f0       	breq	.+12     	; 0x4c68 <STEPPER_setup_decels+0x68>
    4c5c:	81 e0       	ldi	r24, 0x01	; 1
    4c5e:	be 01       	movw	r22, r28
    4c60:	a8 01       	movw	r20, r16
    4c62:	0e 94 76 27 	call	0x4eec	; 0x4eec <STEPPER_set_decel_step_values>
    4c66:	04 c0       	rjmp	.+8      	; 0x4c70 <STEPPER_setup_decels+0x70>
    4c68:	10 92 e7 06 	sts	0x06E7, r1
    4c6c:	10 92 e6 06 	sts	0x06E6, r1
    4c70:	df 91       	pop	r29
    4c72:	cf 91       	pop	r28
    4c74:	1f 91       	pop	r17
    4c76:	0f 91       	pop	r16
    4c78:	08 95       	ret

00004c7a <SYS_init>:
    4c7a:	10 92 07 07 	sts	0x0707, r1
    4c7e:	10 92 08 07 	sts	0x0708, r1
    4c82:	10 92 0c 07 	sts	0x070C, r1
    4c86:	10 92 09 07 	sts	0x0709, r1
    4c8a:	10 92 0b 07 	sts	0x070B, r1
    4c8e:	10 92 0d 07 	sts	0x070D, r1
    4c92:	10 92 0e 07 	sts	0x070E, r1
    4c96:	10 92 0f 07 	sts	0x070F, r1
    4c9a:	10 92 10 07 	sts	0x0710, r1
    4c9e:	10 92 11 07 	sts	0x0711, r1
    4ca2:	10 92 12 07 	sts	0x0712, r1
    4ca6:	10 92 13 07 	sts	0x0713, r1
    4caa:	10 92 14 07 	sts	0x0714, r1
    4cae:	10 92 15 07 	sts	0x0715, r1
    4cb2:	10 92 16 07 	sts	0x0716, r1
    4cb6:	10 92 17 07 	sts	0x0717, r1
    4cba:	10 92 18 07 	sts	0x0718, r1
    4cbe:	08 95       	ret

00004cc0 <TMRSRVC_insert>:
    4cc0:	cf 92       	push	r12
    4cc2:	df 92       	push	r13
    4cc4:	ef 92       	push	r14
    4cc6:	ff 92       	push	r15
    4cc8:	0f 93       	push	r16
    4cca:	1f 93       	push	r17
    4ccc:	cf 93       	push	r28
    4cce:	df 93       	push	r29
    4cd0:	ec 01       	movw	r28, r24
    4cd2:	80 91 3e 07 	lds	r24, 0x073E
    4cd6:	88 23       	and	r24, r24
    4cd8:	39 f4       	brne	.+14     	; 0x4ce8 <TMRSRVC_insert+0x28>
    4cda:	d0 93 40 07 	sts	0x0740, r29
    4cde:	c0 93 3f 07 	sts	0x073F, r28
    4ce2:	0e 94 ee 26 	call	0x4ddc	; 0x4ddc <TMRSRVC_start>
    4ce6:	47 c0       	rjmp	.+142    	; 0x4d76 <TMRSRVC_insert+0xb6>
    4ce8:	c0 90 3f 07 	lds	r12, 0x073F
    4cec:	d0 90 40 07 	lds	r13, 0x0740
    4cf0:	00 e0       	ldi	r16, 0x00	; 0
    4cf2:	10 e0       	ldi	r17, 0x00	; 0
    4cf4:	ee 24       	eor	r14, r14
    4cf6:	ff 24       	eor	r15, r15
    4cf8:	37 c0       	rjmp	.+110    	; 0x4d68 <TMRSRVC_insert+0xa8>
    4cfa:	a8 81       	ld	r26, Y
    4cfc:	b9 81       	ldd	r27, Y+1	; 0x01
    4cfe:	fd 01       	movw	r30, r26
    4d00:	64 81       	ldd	r22, Z+4	; 0x04
    4d02:	75 81       	ldd	r23, Z+5	; 0x05
    4d04:	f6 01       	movw	r30, r12
    4d06:	40 81       	ld	r20, Z
    4d08:	51 81       	ldd	r21, Z+1	; 0x01
    4d0a:	fa 01       	movw	r30, r20
    4d0c:	84 81       	ldd	r24, Z+4	; 0x04
    4d0e:	95 81       	ldd	r25, Z+5	; 0x05
    4d10:	9b 01       	movw	r18, r22
    4d12:	28 1b       	sub	r18, r24
    4d14:	39 0b       	sbc	r19, r25
    4d16:	37 ff       	sbrs	r19, 7
    4d18:	0f c0       	rjmp	.+30     	; 0x4d38 <TMRSRVC_insert+0x78>
    4d1a:	86 1b       	sub	r24, r22
    4d1c:	97 0b       	sbc	r25, r23
    4d1e:	95 83       	std	Z+5, r25	; 0x05
    4d20:	84 83       	std	Z+4, r24	; 0x04
    4d22:	db 82       	std	Y+3, r13	; 0x03
    4d24:	ca 82       	std	Y+2, r12	; 0x02
    4d26:	01 2b       	or	r16, r17
    4d28:	29 f4       	brne	.+10     	; 0x4d34 <TMRSRVC_insert+0x74>
    4d2a:	d0 93 40 07 	sts	0x0740, r29
    4d2e:	c0 93 3f 07 	sts	0x073F, r28
    4d32:	21 c0       	rjmp	.+66     	; 0x4d76 <TMRSRVC_insert+0xb6>
    4d34:	f7 01       	movw	r30, r14
    4d36:	0c c0       	rjmp	.+24     	; 0x4d50 <TMRSRVC_insert+0x90>
    4d38:	f6 01       	movw	r30, r12
    4d3a:	82 81       	ldd	r24, Z+2	; 0x02
    4d3c:	93 81       	ldd	r25, Z+3	; 0x03
    4d3e:	21 15       	cp	r18, r1
    4d40:	31 05       	cpc	r19, r1
    4d42:	49 f4       	brne	.+18     	; 0x4d56 <TMRSRVC_insert+0x96>
    4d44:	fd 01       	movw	r30, r26
    4d46:	15 82       	std	Z+5, r1	; 0x05
    4d48:	14 82       	std	Z+4, r1	; 0x04
    4d4a:	9b 83       	std	Y+3, r25	; 0x03
    4d4c:	8a 83       	std	Y+2, r24	; 0x02
    4d4e:	f6 01       	movw	r30, r12
    4d50:	d3 83       	std	Z+3, r29	; 0x03
    4d52:	c2 83       	std	Z+2, r28	; 0x02
    4d54:	10 c0       	rjmp	.+32     	; 0x4d76 <TMRSRVC_insert+0xb6>
    4d56:	fd 01       	movw	r30, r26
    4d58:	35 83       	std	Z+5, r19	; 0x05
    4d5a:	24 83       	std	Z+4, r18	; 0x04
    4d5c:	00 97       	sbiw	r24, 0x00	; 0
    4d5e:	b9 f3       	breq	.-18     	; 0x4d4e <TMRSRVC_insert+0x8e>
    4d60:	0f 5f       	subi	r16, 0xFF	; 255
    4d62:	1f 4f       	sbci	r17, 0xFF	; 255
    4d64:	76 01       	movw	r14, r12
    4d66:	6c 01       	movw	r12, r24
    4d68:	80 91 3e 07 	lds	r24, 0x073E
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	08 17       	cp	r16, r24
    4d70:	19 07       	cpc	r17, r25
    4d72:	18 f2       	brcs	.-122    	; 0x4cfa <TMRSRVC_insert+0x3a>
    4d74:	ec cf       	rjmp	.-40     	; 0x4d4e <TMRSRVC_insert+0x8e>
    4d76:	80 91 3e 07 	lds	r24, 0x073E
    4d7a:	8f 5f       	subi	r24, 0xFF	; 255
    4d7c:	80 93 3e 07 	sts	0x073E, r24
    4d80:	df 91       	pop	r29
    4d82:	cf 91       	pop	r28
    4d84:	1f 91       	pop	r17
    4d86:	0f 91       	pop	r16
    4d88:	ff 90       	pop	r15
    4d8a:	ef 90       	pop	r14
    4d8c:	df 90       	pop	r13
    4d8e:	cf 90       	pop	r12
    4d90:	08 95       	ret

00004d92 <TMRSRVC_open>:
    4d92:	88 e0       	ldi	r24, 0x08	; 8
    4d94:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    4d98:	88 23       	and	r24, r24
    4d9a:	b9 f4       	brne	.+46     	; 0x4dca <TMRSRVC_open+0x38>
    4d9c:	10 92 3e 07 	sts	0x073E, r1
    4da0:	10 92 40 07 	sts	0x0740, r1
    4da4:	10 92 3f 07 	sts	0x073F, r1
    4da8:	10 92 fc 03 	sts	0x03FC, r1
    4dac:	10 92 fd 03 	sts	0x03FD, r1
    4db0:	80 e1       	ldi	r24, 0x10	; 16
    4db2:	63 ee       	ldi	r22, 0xE3	; 227
    4db4:	77 e2       	ldi	r23, 0x27	; 39
    4db6:	0e 94 ff 26 	call	0x4dfe	; 0x4dfe <__ISR_attach>
    4dba:	0e 94 ea 27 	call	0x4fd4	; 0x4fd4 <__TMRSRVC_init>
    4dbe:	0e 94 e8 26 	call	0x4dd0	; 0x4dd0 <__TMRSRVC_start>
    4dc2:	88 e0       	ldi	r24, 0x08	; 8
    4dc4:	61 e0       	ldi	r22, 0x01	; 1
    4dc6:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <SYS_set_state>
    4dca:	88 e0       	ldi	r24, 0x08	; 8
    4dcc:	91 e0       	ldi	r25, 0x01	; 1
    4dce:	08 95       	ret

00004dd0 <__TMRSRVC_start>:
    4dd0:	ee e6       	ldi	r30, 0x6E	; 110
    4dd2:	f0 e0       	ldi	r31, 0x00	; 0
    4dd4:	80 81       	ld	r24, Z
    4dd6:	82 60       	ori	r24, 0x02	; 2
    4dd8:	80 83       	st	Z, r24
    4dda:	08 95       	ret

00004ddc <TMRSRVC_start>:
    4ddc:	81 e0       	ldi	r24, 0x01	; 1
    4dde:	80 93 fd 03 	sts	0x03FD, r24
    4de2:	08 95       	ret

00004de4 <I2C_enable>:
    4de4:	80 91 41 07 	lds	r24, 0x0741
    4de8:	81 30       	cpi	r24, 0x01	; 1
    4dea:	29 f4       	brne	.+10     	; 0x4df6 <I2C_enable+0x12>
    4dec:	80 91 bc 00 	lds	r24, 0x00BC
    4df0:	84 60       	ori	r24, 0x04	; 4
    4df2:	80 93 bc 00 	sts	0x00BC, r24
    4df6:	08 95       	ret

00004df8 <__I2C_init>:
    4df8:	38 98       	cbi	0x07, 0	; 7
    4dfa:	39 98       	cbi	0x07, 1	; 7
    4dfc:	08 95       	ret

00004dfe <__ISR_attach>:
    4dfe:	80 32       	cpi	r24, 0x20	; 32
    4e00:	18 f0       	brcs	.+6      	; 0x4e08 <__ISR_attach+0xa>
    4e02:	20 e0       	ldi	r18, 0x00	; 0
    4e04:	30 e0       	ldi	r19, 0x00	; 0
    4e06:	0a c0       	rjmp	.+20     	; 0x4e1c <__ISR_attach+0x1e>
    4e08:	e8 2f       	mov	r30, r24
    4e0a:	f0 e0       	ldi	r31, 0x00	; 0
    4e0c:	ee 0f       	add	r30, r30
    4e0e:	ff 1f       	adc	r31, r31
    4e10:	e4 56       	subi	r30, 0x64	; 100
    4e12:	fc 4f       	sbci	r31, 0xFC	; 252
    4e14:	20 81       	ld	r18, Z
    4e16:	31 81       	ldd	r19, Z+1	; 0x01
    4e18:	71 83       	std	Z+1, r23	; 0x01
    4e1a:	60 83       	st	Z, r22
    4e1c:	c9 01       	movw	r24, r18
    4e1e:	08 95       	ret

00004e20 <__ATMEGA_init>:
    4e20:	24 9a       	sbi	0x04, 4	; 4
    4e22:	2c 9a       	sbi	0x05, 4	; 5
    4e24:	08 95       	ret

00004e26 <SPI_default_config>:
    4e26:	83 e5       	ldi	r24, 0x53	; 83
    4e28:	8c bd       	out	0x2c, r24	; 44
    4e2a:	81 e0       	ldi	r24, 0x01	; 1
    4e2c:	8d bd       	out	0x2d, r24	; 45
    4e2e:	8d e0       	ldi	r24, 0x0D	; 13
    4e30:	8a 95       	dec	r24
    4e32:	f1 f7       	brne	.-4      	; 0x4e30 <SPI_default_config+0xa>
    4e34:	08 95       	ret

00004e36 <SPI_ATtiny0_config>:
    4e36:	83 e5       	ldi	r24, 0x53	; 83
    4e38:	8c bd       	out	0x2c, r24	; 44
    4e3a:	1d bc       	out	0x2d, r1	; 45
    4e3c:	84 ef       	ldi	r24, 0xF4	; 244
    4e3e:	91 e0       	ldi	r25, 0x01	; 1
    4e40:	01 97       	sbiw	r24, 0x01	; 1
    4e42:	f1 f7       	brne	.-4      	; 0x4e40 <SPI_ATtiny0_config+0xa>
    4e44:	08 95       	ret

00004e46 <SPI_PSXC_config>:
    4e46:	8f e7       	ldi	r24, 0x7F	; 127
    4e48:	8c bd       	out	0x2c, r24	; 44
    4e4a:	1d bc       	out	0x2d, r1	; 45
    4e4c:	84 ef       	ldi	r24, 0xF4	; 244
    4e4e:	91 e0       	ldi	r25, 0x01	; 1
    4e50:	01 97       	sbiw	r24, 0x01	; 1
    4e52:	f1 f7       	brne	.-4      	; 0x4e50 <SPI_PSXC_config+0xa>
    4e54:	08 95       	ret

00004e56 <SPI_LCD_config>:
    4e56:	83 e5       	ldi	r24, 0x53	; 83
    4e58:	8c bd       	out	0x2c, r24	; 44
    4e5a:	81 e0       	ldi	r24, 0x01	; 1
    4e5c:	8d bd       	out	0x2d, r24	; 45
    4e5e:	8d e0       	ldi	r24, 0x0D	; 13
    4e60:	8a 95       	dec	r24
    4e62:	f1 f7       	brne	.-4      	; 0x4e60 <SPI_LCD_config+0xa>
    4e64:	08 95       	ret

00004e66 <SPI_FLASH_config>:
    4e66:	83 e5       	ldi	r24, 0x53	; 83
    4e68:	8c bd       	out	0x2c, r24	; 44
    4e6a:	81 e0       	ldi	r24, 0x01	; 1
    4e6c:	8d bd       	out	0x2d, r24	; 45
    4e6e:	84 ef       	ldi	r24, 0xF4	; 244
    4e70:	91 e0       	ldi	r25, 0x01	; 1
    4e72:	01 97       	sbiw	r24, 0x01	; 1
    4e74:	f1 f7       	brne	.-4      	; 0x4e72 <SPI_FLASH_config+0xc>
    4e76:	08 95       	ret

00004e78 <__SPI_init>:
    4e78:	25 9a       	sbi	0x04, 5	; 4
    4e7a:	26 98       	cbi	0x04, 6	; 4
    4e7c:	27 9a       	sbi	0x04, 7	; 4
    4e7e:	20 9a       	sbi	0x04, 0	; 4
    4e80:	21 9a       	sbi	0x04, 1	; 4
    4e82:	22 9a       	sbi	0x04, 2	; 4
    4e84:	08 95       	ret

00004e86 <SPKR_beep>:
    4e86:	9b 01       	movw	r18, r22
    4e88:	ac 01       	movw	r20, r24
    4e8a:	80 91 ed 03 	lds	r24, 0x03ED
    4e8e:	88 23       	and	r24, r24
    4e90:	81 f0       	breq	.+32     	; 0x4eb2 <SPKR_beep+0x2c>
    4e92:	da 01       	movw	r26, r20
    4e94:	c9 01       	movw	r24, r18
    4e96:	88 0f       	add	r24, r24
    4e98:	99 1f       	adc	r25, r25
    4e9a:	aa 1f       	adc	r26, r26
    4e9c:	bb 1f       	adc	r27, r27
    4e9e:	90 93 f9 03 	sts	0x03F9, r25
    4ea2:	80 93 f8 03 	sts	0x03F8, r24
    4ea6:	21 15       	cp	r18, r1
    4ea8:	31 05       	cpc	r19, r1
    4eaa:	41 05       	cpc	r20, r1
    4eac:	51 05       	cpc	r21, r1
    4eae:	09 f4       	brne	.+2      	; 0x4eb2 <SPKR_beep+0x2c>
    4eb0:	5f 98       	cbi	0x0b, 7	; 11
    4eb2:	08 95       	ret

00004eb4 <__SPKR_close>:
    4eb4:	82 30       	cpi	r24, 0x02	; 2
    4eb6:	29 f4       	brne	.+10     	; 0x4ec2 <__SPKR_close+0xe>
    4eb8:	80 91 81 00 	lds	r24, 0x0081
    4ebc:	8e 7f       	andi	r24, 0xFE	; 254
    4ebe:	80 93 81 00 	sts	0x0081, r24
    4ec2:	80 91 ec 03 	lds	r24, 0x03EC
    4ec6:	81 30       	cpi	r24, 0x01	; 1
    4ec8:	31 f4       	brne	.+12     	; 0x4ed6 <__SPKR_close+0x22>
    4eca:	80 91 ed 03 	lds	r24, 0x03ED
    4ece:	81 30       	cpi	r24, 0x01	; 1
    4ed0:	11 f4       	brne	.+4      	; 0x4ed6 <__SPKR_close+0x22>
    4ed2:	00 00       	nop
    4ed4:	08 95       	ret
    4ed6:	80 91 ec 03 	lds	r24, 0x03EC
    4eda:	81 30       	cpi	r24, 0x01	; 1
    4edc:	21 f0       	breq	.+8      	; 0x4ee6 <__SPKR_close+0x32>
    4ede:	80 91 ed 03 	lds	r24, 0x03ED
    4ee2:	81 30       	cpi	r24, 0x01	; 1
    4ee4:	11 f4       	brne	.+4      	; 0x4eea <__SPKR_close+0x36>
    4ee6:	5f 98       	cbi	0x0b, 7	; 11
    4ee8:	57 98       	cbi	0x0a, 7	; 10
    4eea:	08 95       	ret

00004eec <STEPPER_set_decel_step_values>:
    4eec:	ef 92       	push	r14
    4eee:	ff 92       	push	r15
    4ef0:	0f 93       	push	r16
    4ef2:	1f 93       	push	r17
    4ef4:	cf 93       	push	r28
    4ef6:	df 93       	push	r29
    4ef8:	eb 01       	movw	r28, r22
    4efa:	88 23       	and	r24, r24
    4efc:	21 f0       	breq	.+8      	; 0x4f06 <STEPPER_set_decel_step_values+0x1a>
    4efe:	81 30       	cpi	r24, 0x01	; 1
    4f00:	09 f0       	breq	.+2      	; 0x4f04 <STEPPER_set_decel_step_values+0x18>
    4f02:	5a c0       	rjmp	.+180    	; 0x4fb8 <STEPPER_set_decel_step_values+0xcc>
    4f04:	2d c0       	rjmp	.+90     	; 0x4f60 <STEPPER_set_decel_step_values+0x74>
    4f06:	9a 01       	movw	r18, r20
    4f08:	40 e0       	ldi	r20, 0x00	; 0
    4f0a:	50 e0       	ldi	r21, 0x00	; 0
    4f0c:	ca 01       	movw	r24, r20
    4f0e:	b9 01       	movw	r22, r18
    4f10:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    4f14:	20 91 d8 06 	lds	r18, 0x06D8
    4f18:	30 91 d9 06 	lds	r19, 0x06D9
    4f1c:	22 0f       	add	r18, r18
    4f1e:	33 1f       	adc	r19, r19
    4f20:	40 e0       	ldi	r20, 0x00	; 0
    4f22:	50 e0       	ldi	r21, 0x00	; 0
    4f24:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__udivmodsi4>
    4f28:	79 01       	movw	r14, r18
    4f2a:	8a 01       	movw	r16, r20
    4f2c:	a8 01       	movw	r20, r16
    4f2e:	97 01       	movw	r18, r14
    4f30:	22 0f       	add	r18, r18
    4f32:	33 1f       	adc	r19, r19
    4f34:	44 1f       	adc	r20, r20
    4f36:	55 1f       	adc	r21, r21
    4f38:	ce 01       	movw	r24, r28
    4f3a:	a0 e0       	ldi	r26, 0x00	; 0
    4f3c:	b0 e0       	ldi	r27, 0x00	; 0
    4f3e:	82 17       	cp	r24, r18
    4f40:	93 07       	cpc	r25, r19
    4f42:	a4 07       	cpc	r26, r20
    4f44:	b5 07       	cpc	r27, r21
    4f46:	28 f0       	brcs	.+10     	; 0x4f52 <STEPPER_set_decel_step_values+0x66>
    4f48:	f0 92 e5 06 	sts	0x06E5, r15
    4f4c:	e0 92 e4 06 	sts	0x06E4, r14
    4f50:	33 c0       	rjmp	.+102    	; 0x4fb8 <STEPPER_set_decel_step_values+0xcc>
    4f52:	d6 95       	lsr	r29
    4f54:	c7 95       	ror	r28
    4f56:	d0 93 e5 06 	sts	0x06E5, r29
    4f5a:	c0 93 e4 06 	sts	0x06E4, r28
    4f5e:	2c c0       	rjmp	.+88     	; 0x4fb8 <STEPPER_set_decel_step_values+0xcc>
    4f60:	9a 01       	movw	r18, r20
    4f62:	40 e0       	ldi	r20, 0x00	; 0
    4f64:	50 e0       	ldi	r21, 0x00	; 0
    4f66:	ca 01       	movw	r24, r20
    4f68:	b9 01       	movw	r22, r18
    4f6a:	0e 94 a8 32 	call	0x6550	; 0x6550 <__mulsi3>
    4f6e:	20 91 da 06 	lds	r18, 0x06DA
    4f72:	30 91 db 06 	lds	r19, 0x06DB
    4f76:	22 0f       	add	r18, r18
    4f78:	33 1f       	adc	r19, r19
    4f7a:	40 e0       	ldi	r20, 0x00	; 0
    4f7c:	50 e0       	ldi	r21, 0x00	; 0
    4f7e:	0e 94 da 32 	call	0x65b4	; 0x65b4 <__udivmodsi4>
    4f82:	79 01       	movw	r14, r18
    4f84:	8a 01       	movw	r16, r20
    4f86:	a8 01       	movw	r20, r16
    4f88:	97 01       	movw	r18, r14
    4f8a:	22 0f       	add	r18, r18
    4f8c:	33 1f       	adc	r19, r19
    4f8e:	44 1f       	adc	r20, r20
    4f90:	55 1f       	adc	r21, r21
    4f92:	ce 01       	movw	r24, r28
    4f94:	a0 e0       	ldi	r26, 0x00	; 0
    4f96:	b0 e0       	ldi	r27, 0x00	; 0
    4f98:	82 17       	cp	r24, r18
    4f9a:	93 07       	cpc	r25, r19
    4f9c:	a4 07       	cpc	r26, r20
    4f9e:	b5 07       	cpc	r27, r21
    4fa0:	28 f0       	brcs	.+10     	; 0x4fac <STEPPER_set_decel_step_values+0xc0>
    4fa2:	f0 92 e7 06 	sts	0x06E7, r15
    4fa6:	e0 92 e6 06 	sts	0x06E6, r14
    4faa:	06 c0       	rjmp	.+12     	; 0x4fb8 <STEPPER_set_decel_step_values+0xcc>
    4fac:	d6 95       	lsr	r29
    4fae:	c7 95       	ror	r28
    4fb0:	d0 93 e7 06 	sts	0x06E7, r29
    4fb4:	c0 93 e6 06 	sts	0x06E6, r28
    4fb8:	df 91       	pop	r29
    4fba:	cf 91       	pop	r28
    4fbc:	1f 91       	pop	r17
    4fbe:	0f 91       	pop	r16
    4fc0:	ff 90       	pop	r15
    4fc2:	ef 90       	pop	r14
    4fc4:	08 95       	ret

00004fc6 <__TIMER0_COMPA_vect>:
    4fc6:	0e 94 f3 27 	call	0x4fe6	; 0x4fe6 <TMRSRVC_tick>
    4fca:	0e 94 33 28 	call	0x5066	; 0x5066 <STEPPER_clk>
    4fce:	0e 94 0c 28 	call	0x5018	; 0x5018 <SPKR_beep_clk>
    4fd2:	08 95       	ret

00004fd4 <__TMRSRVC_init>:
    4fd4:	84 b5       	in	r24, 0x24	; 36
    4fd6:	82 60       	ori	r24, 0x02	; 2
    4fd8:	84 bd       	out	0x24, r24	; 36
    4fda:	85 b5       	in	r24, 0x25	; 37
    4fdc:	84 60       	ori	r24, 0x04	; 4
    4fde:	85 bd       	out	0x25, r24	; 37
    4fe0:	8e e4       	ldi	r24, 0x4E	; 78
    4fe2:	87 bd       	out	0x27, r24	; 39
    4fe4:	08 95       	ret

00004fe6 <TMRSRVC_tick>:
    4fe6:	88 e0       	ldi	r24, 0x08	; 8
    4fe8:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    4fec:	88 23       	and	r24, r24
    4fee:	11 f4       	brne	.+4      	; 0x4ff4 <TMRSRVC_tick+0xe>
    4ff0:	84 e0       	ldi	r24, 0x04	; 4
    4ff2:	08 95       	ret
    4ff4:	80 91 fd 03 	lds	r24, 0x03FD
    4ff8:	88 23       	and	r24, r24
    4ffa:	11 f4       	brne	.+4      	; 0x5000 <TMRSRVC_tick+0x1a>
    4ffc:	83 e0       	ldi	r24, 0x03	; 3
    4ffe:	08 95       	ret
    5000:	80 91 fc 03 	lds	r24, 0x03FC
    5004:	88 23       	and	r24, r24
    5006:	11 f0       	breq	.+4      	; 0x500c <TMRSRVC_tick+0x26>
    5008:	82 e0       	ldi	r24, 0x02	; 2
    500a:	08 95       	ret
    500c:	0e 94 80 2a 	call	0x5500	; 0x5500 <TMRSRVC_process>
    5010:	81 30       	cpi	r24, 0x01	; 1
    5012:	e1 f3       	breq	.-8      	; 0x500c <TMRSRVC_tick+0x26>
    5014:	80 e0       	ldi	r24, 0x00	; 0
    5016:	08 95       	ret

00005018 <SPKR_beep_clk>:
    5018:	80 91 ed 03 	lds	r24, 0x03ED
    501c:	81 30       	cpi	r24, 0x01	; 1
    501e:	11 f5       	brne	.+68     	; 0x5064 <SPKR_beep_clk+0x4c>
    5020:	80 91 f6 03 	lds	r24, 0x03F6
    5024:	90 91 f7 03 	lds	r25, 0x03F7
    5028:	20 91 f8 03 	lds	r18, 0x03F8
    502c:	30 91 f9 03 	lds	r19, 0x03F9
    5030:	28 0f       	add	r18, r24
    5032:	39 1f       	adc	r19, r25
    5034:	30 93 f7 03 	sts	0x03F7, r19
    5038:	20 93 f6 03 	sts	0x03F6, r18
    503c:	80 91 f6 03 	lds	r24, 0x03F6
    5040:	90 91 f7 03 	lds	r25, 0x03F7
    5044:	88 5e       	subi	r24, 0xE8	; 232
    5046:	93 40       	sbci	r25, 0x03	; 3
    5048:	6c f0       	brlt	.+26     	; 0x5064 <SPKR_beep_clk+0x4c>
    504a:	8b b1       	in	r24, 0x0b	; 11
    504c:	80 58       	subi	r24, 0x80	; 128
    504e:	8b b9       	out	0x0b, r24	; 11
    5050:	80 91 f6 03 	lds	r24, 0x03F6
    5054:	90 91 f7 03 	lds	r25, 0x03F7
    5058:	88 5e       	subi	r24, 0xE8	; 232
    505a:	93 40       	sbci	r25, 0x03	; 3
    505c:	90 93 f7 03 	sts	0x03F7, r25
    5060:	80 93 f6 03 	sts	0x03F6, r24
    5064:	08 95       	ret

00005066 <STEPPER_clk>:
    5066:	87 e0       	ldi	r24, 0x07	; 7
    5068:	0e 94 32 1e 	call	0x3c64	; 0x3c64 <SYS_get_state>
    506c:	81 30       	cpi	r24, 0x01	; 1
    506e:	09 f0       	breq	.+2      	; 0x5072 <STEPPER_clk+0xc>
    5070:	aa c0       	rjmp	.+340    	; 0x51c6 <STEPPER_clk+0x160>
    5072:	80 91 d8 06 	lds	r24, 0x06D8
    5076:	90 91 d9 06 	lds	r25, 0x06D9
    507a:	89 2b       	or	r24, r25
    507c:	09 f1       	breq	.+66     	; 0x50c0 <STEPPER_clk+0x5a>
    507e:	80 91 fc 06 	lds	r24, 0x06FC
    5082:	90 91 fd 06 	lds	r25, 0x06FD
    5086:	20 91 d8 06 	lds	r18, 0x06D8
    508a:	30 91 d9 06 	lds	r19, 0x06D9
    508e:	82 0f       	add	r24, r18
    5090:	93 1f       	adc	r25, r19
    5092:	90 93 fd 06 	sts	0x06FD, r25
    5096:	80 93 fc 06 	sts	0x06FC, r24
    509a:	80 91 fc 06 	lds	r24, 0x06FC
    509e:	90 91 fd 06 	lds	r25, 0x06FD
    50a2:	88 5e       	subi	r24, 0xE8	; 232
    50a4:	93 40       	sbci	r25, 0x03	; 3
    50a6:	a4 f0       	brlt	.+40     	; 0x50d0 <STEPPER_clk+0x6a>
    50a8:	80 91 fc 06 	lds	r24, 0x06FC
    50ac:	90 91 fd 06 	lds	r25, 0x06FD
    50b0:	88 5e       	subi	r24, 0xE8	; 232
    50b2:	93 40       	sbci	r25, 0x03	; 3
    50b4:	90 93 fd 06 	sts	0x06FD, r25
    50b8:	80 93 fc 06 	sts	0x06FC, r24
    50bc:	41 e0       	ldi	r20, 0x01	; 1
    50be:	09 c0       	rjmp	.+18     	; 0x50d2 <STEPPER_clk+0x6c>
    50c0:	80 91 d0 06 	lds	r24, 0x06D0
    50c4:	90 91 d1 06 	lds	r25, 0x06D1
    50c8:	90 93 d5 06 	sts	0x06D5, r25
    50cc:	80 93 d4 06 	sts	0x06D4, r24
    50d0:	40 e0       	ldi	r20, 0x00	; 0
    50d2:	80 91 da 06 	lds	r24, 0x06DA
    50d6:	90 91 db 06 	lds	r25, 0x06DB
    50da:	89 2b       	or	r24, r25
    50dc:	09 f1       	breq	.+66     	; 0x5120 <STEPPER_clk+0xba>
    50de:	80 91 fe 06 	lds	r24, 0x06FE
    50e2:	90 91 ff 06 	lds	r25, 0x06FF
    50e6:	20 91 da 06 	lds	r18, 0x06DA
    50ea:	30 91 db 06 	lds	r19, 0x06DB
    50ee:	82 0f       	add	r24, r18
    50f0:	93 1f       	adc	r25, r19
    50f2:	90 93 ff 06 	sts	0x06FF, r25
    50f6:	80 93 fe 06 	sts	0x06FE, r24
    50fa:	80 91 fe 06 	lds	r24, 0x06FE
    50fe:	90 91 ff 06 	lds	r25, 0x06FF
    5102:	88 5e       	subi	r24, 0xE8	; 232
    5104:	93 40       	sbci	r25, 0x03	; 3
    5106:	a4 f0       	brlt	.+40     	; 0x5130 <STEPPER_clk+0xca>
    5108:	80 91 fe 06 	lds	r24, 0x06FE
    510c:	90 91 ff 06 	lds	r25, 0x06FF
    5110:	88 5e       	subi	r24, 0xE8	; 232
    5112:	93 40       	sbci	r25, 0x03	; 3
    5114:	90 93 ff 06 	sts	0x06FF, r25
    5118:	80 93 fe 06 	sts	0x06FE, r24
    511c:	61 e0       	ldi	r22, 0x01	; 1
    511e:	09 c0       	rjmp	.+18     	; 0x5132 <STEPPER_clk+0xcc>
    5120:	80 91 d2 06 	lds	r24, 0x06D2
    5124:	90 91 d3 06 	lds	r25, 0x06D3
    5128:	90 93 d7 06 	sts	0x06D7, r25
    512c:	80 93 d6 06 	sts	0x06D6, r24
    5130:	60 e0       	ldi	r22, 0x00	; 0
    5132:	84 2f       	mov	r24, r20
    5134:	0e 94 e4 28 	call	0x51c8	; 0x51c8 <STEPPER_process_accel>
    5138:	80 91 f8 06 	lds	r24, 0x06F8
    513c:	90 91 f9 06 	lds	r25, 0x06F9
    5140:	20 91 d4 06 	lds	r18, 0x06D4
    5144:	30 91 d5 06 	lds	r19, 0x06D5
    5148:	28 0f       	add	r18, r24
    514a:	39 1f       	adc	r19, r25
    514c:	30 93 f9 06 	sts	0x06F9, r19
    5150:	20 93 f8 06 	sts	0x06F8, r18
    5154:	80 91 f8 06 	lds	r24, 0x06F8
    5158:	90 91 f9 06 	lds	r25, 0x06F9
    515c:	88 5e       	subi	r24, 0xE8	; 232
    515e:	93 40       	sbci	r25, 0x03	; 3
    5160:	14 f4       	brge	.+4      	; 0x5166 <STEPPER_clk+0x100>
    5162:	40 e0       	ldi	r20, 0x00	; 0
    5164:	0b c0       	rjmp	.+22     	; 0x517c <STEPPER_clk+0x116>
    5166:	80 91 f8 06 	lds	r24, 0x06F8
    516a:	90 91 f9 06 	lds	r25, 0x06F9
    516e:	88 5e       	subi	r24, 0xE8	; 232
    5170:	93 40       	sbci	r25, 0x03	; 3
    5172:	90 93 f9 06 	sts	0x06F9, r25
    5176:	80 93 f8 06 	sts	0x06F8, r24
    517a:	41 e0       	ldi	r20, 0x01	; 1
    517c:	80 91 fa 06 	lds	r24, 0x06FA
    5180:	90 91 fb 06 	lds	r25, 0x06FB
    5184:	20 91 d6 06 	lds	r18, 0x06D6
    5188:	30 91 d7 06 	lds	r19, 0x06D7
    518c:	28 0f       	add	r18, r24
    518e:	39 1f       	adc	r19, r25
    5190:	30 93 fb 06 	sts	0x06FB, r19
    5194:	20 93 fa 06 	sts	0x06FA, r18
    5198:	80 91 fa 06 	lds	r24, 0x06FA
    519c:	90 91 fb 06 	lds	r25, 0x06FB
    51a0:	88 5e       	subi	r24, 0xE8	; 232
    51a2:	93 40       	sbci	r25, 0x03	; 3
    51a4:	14 f4       	brge	.+4      	; 0x51aa <STEPPER_clk+0x144>
    51a6:	60 e0       	ldi	r22, 0x00	; 0
    51a8:	0b c0       	rjmp	.+22     	; 0x51c0 <STEPPER_clk+0x15a>
    51aa:	80 91 fa 06 	lds	r24, 0x06FA
    51ae:	90 91 fb 06 	lds	r25, 0x06FB
    51b2:	88 5e       	subi	r24, 0xE8	; 232
    51b4:	93 40       	sbci	r25, 0x03	; 3
    51b6:	90 93 fb 06 	sts	0x06FB, r25
    51ba:	80 93 fa 06 	sts	0x06FA, r24
    51be:	61 e0       	ldi	r22, 0x01	; 1
    51c0:	84 2f       	mov	r24, r20
    51c2:	0e 94 29 29 	call	0x5252	; 0x5252 <STEPPER_process_run_mode>
    51c6:	08 95       	ret

000051c8 <STEPPER_process_accel>:
    51c8:	88 23       	and	r24, r24
    51ca:	f1 f0       	breq	.+60     	; 0x5208 <STEPPER_process_accel+0x40>
    51cc:	20 91 d0 06 	lds	r18, 0x06D0
    51d0:	30 91 d1 06 	lds	r19, 0x06D1
    51d4:	80 91 d4 06 	lds	r24, 0x06D4
    51d8:	90 91 d5 06 	lds	r25, 0x06D5
    51dc:	28 1b       	sub	r18, r24
    51de:	39 0b       	sbc	r19, r25
    51e0:	12 16       	cp	r1, r18
    51e2:	13 06       	cpc	r1, r19
    51e4:	34 f4       	brge	.+12     	; 0x51f2 <STEPPER_process_accel+0x2a>
    51e6:	80 91 d4 06 	lds	r24, 0x06D4
    51ea:	90 91 d5 06 	lds	r25, 0x06D5
    51ee:	01 96       	adiw	r24, 0x01	; 1
    51f0:	07 c0       	rjmp	.+14     	; 0x5200 <STEPPER_process_accel+0x38>
    51f2:	23 2b       	or	r18, r19
    51f4:	49 f0       	breq	.+18     	; 0x5208 <STEPPER_process_accel+0x40>
    51f6:	80 91 d4 06 	lds	r24, 0x06D4
    51fa:	90 91 d5 06 	lds	r25, 0x06D5
    51fe:	01 97       	sbiw	r24, 0x01	; 1
    5200:	90 93 d5 06 	sts	0x06D5, r25
    5204:	80 93 d4 06 	sts	0x06D4, r24
    5208:	66 23       	and	r22, r22
    520a:	11 f1       	breq	.+68     	; 0x5250 <STEPPER_process_accel+0x88>
    520c:	20 91 d2 06 	lds	r18, 0x06D2
    5210:	30 91 d3 06 	lds	r19, 0x06D3
    5214:	80 91 d6 06 	lds	r24, 0x06D6
    5218:	90 91 d7 06 	lds	r25, 0x06D7
    521c:	28 1b       	sub	r18, r24
    521e:	39 0b       	sbc	r19, r25
    5220:	12 16       	cp	r1, r18
    5222:	13 06       	cpc	r1, r19
    5224:	54 f4       	brge	.+20     	; 0x523a <STEPPER_process_accel+0x72>
    5226:	80 91 d6 06 	lds	r24, 0x06D6
    522a:	90 91 d7 06 	lds	r25, 0x06D7
    522e:	01 96       	adiw	r24, 0x01	; 1
    5230:	90 93 d7 06 	sts	0x06D7, r25
    5234:	80 93 d6 06 	sts	0x06D6, r24
    5238:	08 95       	ret
    523a:	23 2b       	or	r18, r19
    523c:	49 f0       	breq	.+18     	; 0x5250 <STEPPER_process_accel+0x88>
    523e:	80 91 d6 06 	lds	r24, 0x06D6
    5242:	90 91 d7 06 	lds	r25, 0x06D7
    5246:	01 97       	sbiw	r24, 0x01	; 1
    5248:	90 93 d7 06 	sts	0x06D7, r25
    524c:	80 93 d6 06 	sts	0x06D6, r24
    5250:	08 95       	ret

00005252 <STEPPER_process_run_mode>:
    5252:	0f 93       	push	r16
    5254:	1f 93       	push	r17
    5256:	18 2f       	mov	r17, r24
    5258:	06 2f       	mov	r16, r22
    525a:	80 91 04 07 	lds	r24, 0x0704
    525e:	88 23       	and	r24, r24
    5260:	09 f0       	breq	.+2      	; 0x5264 <STEPPER_process_run_mode+0x12>
    5262:	e7 c0       	rjmp	.+462    	; 0x5432 <STEPPER_process_run_mode+0x1e0>
    5264:	80 91 ec 06 	lds	r24, 0x06EC
    5268:	88 23       	and	r24, r24
    526a:	09 f0       	breq	.+2      	; 0x526e <STEPPER_process_run_mode+0x1c>
    526c:	5a c0       	rjmp	.+180    	; 0x5322 <STEPPER_process_run_mode+0xd0>
    526e:	80 91 d4 06 	lds	r24, 0x06D4
    5272:	90 91 d5 06 	lds	r25, 0x06D5
    5276:	89 2b       	or	r24, r25
    5278:	e9 f4       	brne	.+58     	; 0x52b4 <STEPPER_process_run_mode+0x62>
    527a:	80 91 fe 03 	lds	r24, 0x03FE
    527e:	83 7e       	andi	r24, 0xE3	; 227
    5280:	80 93 fe 03 	sts	0x03FE, r24
    5284:	10 92 f5 06 	sts	0x06F5, r1
    5288:	80 91 00 07 	lds	r24, 0x0700
    528c:	88 23       	and	r24, r24
    528e:	09 f4       	brne	.+2      	; 0x5292 <STEPPER_process_run_mode+0x40>
    5290:	5d c0       	rjmp	.+186    	; 0x534c <STEPPER_process_run_mode+0xfa>
    5292:	60 91 ee 06 	lds	r22, 0x06EE
    5296:	80 e0       	ldi	r24, 0x00	; 0
    5298:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <STEPPER_stop>
    529c:	e0 91 02 07 	lds	r30, 0x0702
    52a0:	f0 91 03 07 	lds	r31, 0x0703
    52a4:	30 97       	sbiw	r30, 0x00	; 0
    52a6:	09 f4       	brne	.+2      	; 0x52aa <STEPPER_process_run_mode+0x58>
    52a8:	51 c0       	rjmp	.+162    	; 0x534c <STEPPER_process_run_mode+0xfa>
    52aa:	81 e0       	ldi	r24, 0x01	; 1
    52ac:	80 83       	st	Z, r24
    52ae:	10 92 00 07 	sts	0x0700, r1
    52b2:	4c c0       	rjmp	.+152    	; 0x534c <STEPPER_process_run_mode+0xfa>
    52b4:	80 91 ce 06 	lds	r24, 0x06CE
    52b8:	81 30       	cpi	r24, 0x01	; 1
    52ba:	41 f4       	brne	.+16     	; 0x52cc <STEPPER_process_run_mode+0x7a>
    52bc:	80 91 e0 06 	lds	r24, 0x06E0
    52c0:	90 91 e1 06 	lds	r25, 0x06E1
    52c4:	01 97       	sbiw	r24, 0x01	; 1
    52c6:	11 f4       	brne	.+4      	; 0x52cc <STEPPER_process_run_mode+0x7a>
    52c8:	11 e0       	ldi	r17, 0x01	; 1
    52ca:	02 c0       	rjmp	.+4      	; 0x52d0 <STEPPER_process_run_mode+0x7e>
    52cc:	11 23       	and	r17, r17
    52ce:	f1 f1       	breq	.+124    	; 0x534c <STEPPER_process_run_mode+0xfa>
    52d0:	e0 91 f3 06 	lds	r30, 0x06F3
    52d4:	f0 e0       	ldi	r31, 0x00	; 0
    52d6:	e3 5d       	subi	r30, 0xD3	; 211
    52d8:	fc 4f       	sbci	r31, 0xFC	; 252
    52da:	90 91 fe 03 	lds	r25, 0x03FE
    52de:	93 7e       	andi	r25, 0xE3	; 227
    52e0:	80 81       	ld	r24, Z
    52e2:	89 2b       	or	r24, r25
    52e4:	80 93 fe 03 	sts	0x03FE, r24
    52e8:	80 91 f1 06 	lds	r24, 0x06F1
    52ec:	88 23       	and	r24, r24
    52ee:	21 f4       	brne	.+8      	; 0x52f8 <STEPPER_process_run_mode+0xa6>
    52f0:	80 91 f3 06 	lds	r24, 0x06F3
    52f4:	8f 5f       	subi	r24, 0xFF	; 255
    52f6:	03 c0       	rjmp	.+6      	; 0x52fe <STEPPER_process_run_mode+0xac>
    52f8:	80 91 f3 06 	lds	r24, 0x06F3
    52fc:	81 50       	subi	r24, 0x01	; 1
    52fe:	80 93 f3 06 	sts	0x06F3, r24
    5302:	80 91 f3 06 	lds	r24, 0x06F3
    5306:	83 70       	andi	r24, 0x03	; 3
    5308:	80 93 f3 06 	sts	0x06F3, r24
    530c:	81 e0       	ldi	r24, 0x01	; 1
    530e:	80 93 f5 06 	sts	0x06F5, r24
    5312:	80 91 ce 06 	lds	r24, 0x06CE
    5316:	81 30       	cpi	r24, 0x01	; 1
    5318:	c9 f4       	brne	.+50     	; 0x534c <STEPPER_process_run_mode+0xfa>
    531a:	80 e0       	ldi	r24, 0x00	; 0
    531c:	0e 94 2c 2a 	call	0x5458	; 0x5458 <STEPPER_process_step_mode>
    5320:	15 c0       	rjmp	.+42     	; 0x534c <STEPPER_process_run_mode+0xfa>
    5322:	90 91 fe 03 	lds	r25, 0x03FE
    5326:	93 7e       	andi	r25, 0xE3	; 227
    5328:	90 93 fe 03 	sts	0x03FE, r25
    532c:	e0 91 f3 06 	lds	r30, 0x06F3
    5330:	f0 e0       	ldi	r31, 0x00	; 0
    5332:	e3 5d       	subi	r30, 0xD3	; 211
    5334:	fc 4f       	sbci	r31, 0xFC	; 252
    5336:	80 81       	ld	r24, Z
    5338:	89 2b       	or	r24, r25
    533a:	80 93 fe 03 	sts	0x03FE, r24
    533e:	82 e0       	ldi	r24, 0x02	; 2
    5340:	80 93 f5 06 	sts	0x06F5, r24
    5344:	10 92 d5 06 	sts	0x06D5, r1
    5348:	10 92 d4 06 	sts	0x06D4, r1
    534c:	80 91 ed 06 	lds	r24, 0x06ED
    5350:	88 23       	and	r24, r24
    5352:	09 f0       	breq	.+2      	; 0x5356 <STEPPER_process_run_mode+0x104>
    5354:	59 c0       	rjmp	.+178    	; 0x5408 <STEPPER_process_run_mode+0x1b6>
    5356:	80 91 d6 06 	lds	r24, 0x06D6
    535a:	90 91 d7 06 	lds	r25, 0x06D7
    535e:	89 2b       	or	r24, r25
    5360:	e9 f4       	brne	.+58     	; 0x539c <STEPPER_process_run_mode+0x14a>
    5362:	80 91 fe 03 	lds	r24, 0x03FE
    5366:	8f 71       	andi	r24, 0x1F	; 31
    5368:	80 93 fe 03 	sts	0x03FE, r24
    536c:	10 92 f6 06 	sts	0x06F6, r1
    5370:	80 91 01 07 	lds	r24, 0x0701
    5374:	88 23       	and	r24, r24
    5376:	09 f4       	brne	.+2      	; 0x537a <STEPPER_process_run_mode+0x128>
    5378:	5c c0       	rjmp	.+184    	; 0x5432 <STEPPER_process_run_mode+0x1e0>
    537a:	60 91 ef 06 	lds	r22, 0x06EF
    537e:	81 e0       	ldi	r24, 0x01	; 1
    5380:	0e 94 bf 1d 	call	0x3b7e	; 0x3b7e <STEPPER_stop>
    5384:	e0 91 02 07 	lds	r30, 0x0702
    5388:	f0 91 03 07 	lds	r31, 0x0703
    538c:	30 97       	sbiw	r30, 0x00	; 0
    538e:	09 f4       	brne	.+2      	; 0x5392 <STEPPER_process_run_mode+0x140>
    5390:	50 c0       	rjmp	.+160    	; 0x5432 <STEPPER_process_run_mode+0x1e0>
    5392:	81 e0       	ldi	r24, 0x01	; 1
    5394:	81 83       	std	Z+1, r24	; 0x01
    5396:	10 92 01 07 	sts	0x0701, r1
    539a:	4b c0       	rjmp	.+150    	; 0x5432 <STEPPER_process_run_mode+0x1e0>
    539c:	80 91 cf 06 	lds	r24, 0x06CF
    53a0:	81 30       	cpi	r24, 0x01	; 1
    53a2:	41 f4       	brne	.+16     	; 0x53b4 <STEPPER_process_run_mode+0x162>
    53a4:	80 91 e2 06 	lds	r24, 0x06E2
    53a8:	90 91 e3 06 	lds	r25, 0x06E3
    53ac:	01 97       	sbiw	r24, 0x01	; 1
    53ae:	11 f4       	brne	.+4      	; 0x53b4 <STEPPER_process_run_mode+0x162>
    53b0:	01 e0       	ldi	r16, 0x01	; 1
    53b2:	02 c0       	rjmp	.+4      	; 0x53b8 <STEPPER_process_run_mode+0x166>
    53b4:	00 23       	and	r16, r16
    53b6:	e9 f1       	breq	.+122    	; 0x5432 <STEPPER_process_run_mode+0x1e0>
    53b8:	e0 91 f4 06 	lds	r30, 0x06F4
    53bc:	f0 e0       	ldi	r31, 0x00	; 0
    53be:	ef 5c       	subi	r30, 0xCF	; 207
    53c0:	fc 4f       	sbci	r31, 0xFC	; 252
    53c2:	90 91 fe 03 	lds	r25, 0x03FE
    53c6:	9f 71       	andi	r25, 0x1F	; 31
    53c8:	80 81       	ld	r24, Z
    53ca:	89 2b       	or	r24, r25
    53cc:	80 93 fe 03 	sts	0x03FE, r24
    53d0:	80 91 f2 06 	lds	r24, 0x06F2
    53d4:	88 23       	and	r24, r24
    53d6:	21 f4       	brne	.+8      	; 0x53e0 <STEPPER_process_run_mode+0x18e>
    53d8:	80 91 f4 06 	lds	r24, 0x06F4
    53dc:	8f 5f       	subi	r24, 0xFF	; 255
    53de:	03 c0       	rjmp	.+6      	; 0x53e6 <STEPPER_process_run_mode+0x194>
    53e0:	80 91 f4 06 	lds	r24, 0x06F4
    53e4:	81 50       	subi	r24, 0x01	; 1
    53e6:	80 93 f4 06 	sts	0x06F4, r24
    53ea:	80 91 f4 06 	lds	r24, 0x06F4
    53ee:	83 70       	andi	r24, 0x03	; 3
    53f0:	80 93 f4 06 	sts	0x06F4, r24
    53f4:	81 e0       	ldi	r24, 0x01	; 1
    53f6:	80 93 f6 06 	sts	0x06F6, r24
    53fa:	80 91 cf 06 	lds	r24, 0x06CF
    53fe:	81 30       	cpi	r24, 0x01	; 1
    5400:	c1 f4       	brne	.+48     	; 0x5432 <STEPPER_process_run_mode+0x1e0>
    5402:	0e 94 2c 2a 	call	0x5458	; 0x5458 <STEPPER_process_step_mode>
    5406:	15 c0       	rjmp	.+42     	; 0x5432 <STEPPER_process_run_mode+0x1e0>
    5408:	90 91 fe 03 	lds	r25, 0x03FE
    540c:	9f 71       	andi	r25, 0x1F	; 31
    540e:	90 93 fe 03 	sts	0x03FE, r25
    5412:	e0 91 f4 06 	lds	r30, 0x06F4
    5416:	f0 e0       	ldi	r31, 0x00	; 0
    5418:	ef 5c       	subi	r30, 0xCF	; 207
    541a:	fc 4f       	sbci	r31, 0xFC	; 252
    541c:	80 81       	ld	r24, Z
    541e:	89 2b       	or	r24, r25
    5420:	80 93 fe 03 	sts	0x03FE, r24
    5424:	82 e0       	ldi	r24, 0x02	; 2
    5426:	80 93 f6 06 	sts	0x06F6, r24
    542a:	10 92 d7 06 	sts	0x06D7, r1
    542e:	10 92 d6 06 	sts	0x06D6, r1
    5432:	80 91 f7 06 	lds	r24, 0x06F7
    5436:	88 23       	and	r24, r24
    5438:	31 f4       	brne	.+12     	; 0x5446 <STEPPER_process_run_mode+0x1f4>
    543a:	8e ef       	ldi	r24, 0xFE	; 254
    543c:	93 e0       	ldi	r25, 0x03	; 3
    543e:	61 2f       	mov	r22, r17
    5440:	40 2f       	mov	r20, r16
    5442:	0e 94 ee 2a 	call	0x55dc	; 0x55dc <STEPPER_process_pwm>
    5446:	88 b1       	in	r24, 0x08	; 8
    5448:	83 70       	andi	r24, 0x03	; 3
    544a:	90 91 fe 03 	lds	r25, 0x03FE
    544e:	89 2b       	or	r24, r25
    5450:	88 b9       	out	0x08, r24	; 8
    5452:	1f 91       	pop	r17
    5454:	0f 91       	pop	r16
    5456:	08 95       	ret

00005458 <STEPPER_process_step_mode>:
    5458:	88 23       	and	r24, r24
    545a:	21 f0       	breq	.+8      	; 0x5464 <STEPPER_process_step_mode+0xc>
    545c:	81 30       	cpi	r24, 0x01	; 1
    545e:	09 f0       	breq	.+2      	; 0x5462 <STEPPER_process_step_mode+0xa>
    5460:	4e c0       	rjmp	.+156    	; 0x54fe <STEPPER_process_step_mode+0xa6>
    5462:	27 c0       	rjmp	.+78     	; 0x54b2 <STEPPER_process_step_mode+0x5a>
    5464:	80 91 e0 06 	lds	r24, 0x06E0
    5468:	90 91 e1 06 	lds	r25, 0x06E1
    546c:	89 2b       	or	r24, r25
    546e:	49 f0       	breq	.+18     	; 0x5482 <STEPPER_process_step_mode+0x2a>
    5470:	80 91 e0 06 	lds	r24, 0x06E0
    5474:	90 91 e1 06 	lds	r25, 0x06E1
    5478:	01 97       	sbiw	r24, 0x01	; 1
    547a:	90 93 e1 06 	sts	0x06E1, r25
    547e:	80 93 e0 06 	sts	0x06E0, r24
    5482:	80 91 00 07 	lds	r24, 0x0700
    5486:	88 23       	and	r24, r24
    5488:	d1 f5       	brne	.+116    	; 0x54fe <STEPPER_process_step_mode+0xa6>
    548a:	20 91 e0 06 	lds	r18, 0x06E0
    548e:	30 91 e1 06 	lds	r19, 0x06E1
    5492:	80 91 e4 06 	lds	r24, 0x06E4
    5496:	90 91 e5 06 	lds	r25, 0x06E5
    549a:	28 17       	cp	r18, r24
    549c:	39 07       	cpc	r19, r25
    549e:	79 f5       	brne	.+94     	; 0x54fe <STEPPER_process_step_mode+0xa6>
    54a0:	80 e0       	ldi	r24, 0x00	; 0
    54a2:	60 e0       	ldi	r22, 0x00	; 0
    54a4:	70 e0       	ldi	r23, 0x00	; 0
    54a6:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <STEPPER_set_speed>
    54aa:	81 e0       	ldi	r24, 0x01	; 1
    54ac:	80 93 00 07 	sts	0x0700, r24
    54b0:	08 95       	ret
    54b2:	80 91 e2 06 	lds	r24, 0x06E2
    54b6:	90 91 e3 06 	lds	r25, 0x06E3
    54ba:	89 2b       	or	r24, r25
    54bc:	49 f0       	breq	.+18     	; 0x54d0 <STEPPER_process_step_mode+0x78>
    54be:	80 91 e2 06 	lds	r24, 0x06E2
    54c2:	90 91 e3 06 	lds	r25, 0x06E3
    54c6:	01 97       	sbiw	r24, 0x01	; 1
    54c8:	90 93 e3 06 	sts	0x06E3, r25
    54cc:	80 93 e2 06 	sts	0x06E2, r24
    54d0:	80 91 01 07 	lds	r24, 0x0701
    54d4:	88 23       	and	r24, r24
    54d6:	99 f4       	brne	.+38     	; 0x54fe <STEPPER_process_step_mode+0xa6>
    54d8:	20 91 e2 06 	lds	r18, 0x06E2
    54dc:	30 91 e3 06 	lds	r19, 0x06E3
    54e0:	80 91 e6 06 	lds	r24, 0x06E6
    54e4:	90 91 e7 06 	lds	r25, 0x06E7
    54e8:	28 17       	cp	r18, r24
    54ea:	39 07       	cpc	r19, r25
    54ec:	41 f4       	brne	.+16     	; 0x54fe <STEPPER_process_step_mode+0xa6>
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	60 e0       	ldi	r22, 0x00	; 0
    54f2:	70 e0       	ldi	r23, 0x00	; 0
    54f4:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <STEPPER_set_speed>
    54f8:	81 e0       	ldi	r24, 0x01	; 1
    54fa:	80 93 01 07 	sts	0x0701, r24
    54fe:	08 95       	ret

00005500 <TMRSRVC_process>:
    5500:	ff 92       	push	r15
    5502:	0f 93       	push	r16
    5504:	1f 93       	push	r17
    5506:	cf 93       	push	r28
    5508:	df 93       	push	r29
    550a:	80 91 3e 07 	lds	r24, 0x073E
    550e:	88 23       	and	r24, r24
    5510:	09 f4       	brne	.+2      	; 0x5514 <TMRSRVC_process+0x14>
    5512:	59 c0       	rjmp	.+178    	; 0x55c6 <TMRSRVC_process+0xc6>
    5514:	00 91 3f 07 	lds	r16, 0x073F
    5518:	10 91 40 07 	lds	r17, 0x0740
    551c:	f8 01       	movw	r30, r16
    551e:	c0 81       	ld	r28, Z
    5520:	d1 81       	ldd	r29, Z+1	; 0x01
    5522:	8c 81       	ldd	r24, Y+4	; 0x04
    5524:	9d 81       	ldd	r25, Y+5	; 0x05
    5526:	01 97       	sbiw	r24, 0x01	; 1
    5528:	9d 83       	std	Y+5, r25	; 0x05
    552a:	8c 83       	std	Y+4, r24	; 0x04
    552c:	18 16       	cp	r1, r24
    552e:	19 06       	cpc	r1, r25
    5530:	0c f4       	brge	.+2      	; 0x5534 <TMRSRVC_process+0x34>
    5532:	49 c0       	rjmp	.+146    	; 0x55c6 <TMRSRVC_process+0xc6>
    5534:	89 81       	ldd	r24, Y+1	; 0x01
    5536:	80 ff       	sbrs	r24, 0
    5538:	05 c0       	rjmp	.+10     	; 0x5544 <TMRSRVC_process+0x44>
    553a:	8e 81       	ldd	r24, Y+6	; 0x06
    553c:	88 23       	and	r24, r24
    553e:	11 f4       	brne	.+4      	; 0x5544 <TMRSRVC_process+0x44>
    5540:	81 e0       	ldi	r24, 0x01	; 1
    5542:	8e 83       	std	Y+6, r24	; 0x06
    5544:	89 81       	ldd	r24, Y+1	; 0x01
    5546:	81 ff       	sbrs	r24, 1
    5548:	03 c0       	rjmp	.+6      	; 0x5550 <TMRSRVC_process+0x50>
    554a:	ef 81       	ldd	r30, Y+7	; 0x07
    554c:	f8 85       	ldd	r31, Y+8	; 0x08
    554e:	09 95       	icall
    5550:	80 91 3e 07 	lds	r24, 0x073E
    5554:	82 30       	cpi	r24, 0x02	; 2
    5556:	a8 f0       	brcs	.+42     	; 0x5582 <TMRSRVC_process+0x82>
    5558:	f8 01       	movw	r30, r16
    555a:	82 81       	ldd	r24, Z+2	; 0x02
    555c:	93 81       	ldd	r25, Z+3	; 0x03
    555e:	90 93 40 07 	sts	0x0740, r25
    5562:	80 93 3f 07 	sts	0x073F, r24
    5566:	13 82       	std	Z+3, r1	; 0x03
    5568:	12 82       	std	Z+2, r1	; 0x02
    556a:	e0 91 00 00 	lds	r30, 0x0000
    556e:	f0 91 01 00 	lds	r31, 0x0001
    5572:	84 81       	ldd	r24, Z+4	; 0x04
    5574:	95 81       	ldd	r25, Z+5	; 0x05
    5576:	18 16       	cp	r1, r24
    5578:	19 06       	cpc	r1, r25
    557a:	3c f0       	brlt	.+14     	; 0x558a <TMRSRVC_process+0x8a>
    557c:	ff 24       	eor	r15, r15
    557e:	f3 94       	inc	r15
    5580:	05 c0       	rjmp	.+10     	; 0x558c <TMRSRVC_process+0x8c>
    5582:	10 92 40 07 	sts	0x0740, r1
    5586:	10 92 3f 07 	sts	0x073F, r1
    558a:	ff 24       	eor	r15, r15
    558c:	80 91 3e 07 	lds	r24, 0x073E
    5590:	81 50       	subi	r24, 0x01	; 1
    5592:	80 93 3e 07 	sts	0x073E, r24
    5596:	80 91 3e 07 	lds	r24, 0x073E
    559a:	88 23       	and	r24, r24
    559c:	11 f4       	brne	.+4      	; 0x55a2 <TMRSRVC_process+0xa2>
    559e:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <TMRSRVC_stop>
    55a2:	89 81       	ldd	r24, Y+1	; 0x01
    55a4:	82 ff       	sbrs	r24, 2
    55a6:	08 c0       	rjmp	.+16     	; 0x55b8 <TMRSRVC_process+0xb8>
    55a8:	8a 81       	ldd	r24, Y+2	; 0x02
    55aa:	9b 81       	ldd	r25, Y+3	; 0x03
    55ac:	9d 83       	std	Y+5, r25	; 0x05
    55ae:	8c 83       	std	Y+4, r24	; 0x04
    55b0:	c8 01       	movw	r24, r16
    55b2:	0e 94 60 26 	call	0x4cc0	; 0x4cc0 <TMRSRVC_insert>
    55b6:	08 c0       	rjmp	.+16     	; 0x55c8 <TMRSRVC_process+0xc8>
    55b8:	c8 01       	movw	r24, r16
    55ba:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <free>
    55be:	89 81       	ldd	r24, Y+1	; 0x01
    55c0:	8f 7e       	andi	r24, 0xEF	; 239
    55c2:	89 83       	std	Y+1, r24	; 0x01
    55c4:	01 c0       	rjmp	.+2      	; 0x55c8 <TMRSRVC_process+0xc8>
    55c6:	ff 24       	eor	r15, r15
    55c8:	8f 2d       	mov	r24, r15
    55ca:	df 91       	pop	r29
    55cc:	cf 91       	pop	r28
    55ce:	1f 91       	pop	r17
    55d0:	0f 91       	pop	r16
    55d2:	ff 90       	pop	r15
    55d4:	08 95       	ret

000055d6 <TMRSRVC_stop>:
    55d6:	10 92 fd 03 	sts	0x03FD, r1
    55da:	08 95       	ret

000055dc <STEPPER_process_pwm>:
    55dc:	fc 01       	movw	r30, r24
    55de:	80 91 f5 06 	lds	r24, 0x06F5
    55e2:	82 30       	cpi	r24, 0x02	; 2
    55e4:	69 f4       	brne	.+26     	; 0x5600 <STEPPER_process_pwm+0x24>
    55e6:	80 91 02 04 	lds	r24, 0x0402
    55ea:	91 e0       	ldi	r25, 0x01	; 1
    55ec:	89 27       	eor	r24, r25
    55ee:	80 93 02 04 	sts	0x0402, r24
    55f2:	88 23       	and	r24, r24
    55f4:	09 f0       	breq	.+2      	; 0x55f8 <STEPPER_process_pwm+0x1c>
    55f6:	3e c0       	rjmp	.+124    	; 0x5674 <STEPPER_process_pwm+0x98>
    55f8:	80 81       	ld	r24, Z
    55fa:	83 7e       	andi	r24, 0xE3	; 227
    55fc:	80 83       	st	Z, r24
    55fe:	3a c0       	rjmp	.+116    	; 0x5674 <STEPPER_process_pwm+0x98>
    5600:	80 91 d4 06 	lds	r24, 0x06D4
    5604:	90 91 d5 06 	lds	r25, 0x06D5
    5608:	c3 97       	sbiw	r24, 0x33	; 51
    560a:	a4 f5       	brge	.+104    	; 0x5674 <STEPPER_process_pwm+0x98>
    560c:	66 23       	and	r22, r22
    560e:	d1 f0       	breq	.+52     	; 0x5644 <STEPPER_process_pwm+0x68>
    5610:	20 91 d4 06 	lds	r18, 0x06D4
    5614:	30 91 d5 06 	lds	r19, 0x06D5
    5618:	80 e6       	ldi	r24, 0x60	; 96
    561a:	90 e0       	ldi	r25, 0x00	; 0
    561c:	bc 01       	movw	r22, r24
    561e:	26 9f       	mul	r18, r22
    5620:	c0 01       	movw	r24, r0
    5622:	27 9f       	mul	r18, r23
    5624:	90 0d       	add	r25, r0
    5626:	36 9f       	mul	r19, r22
    5628:	90 0d       	add	r25, r0
    562a:	11 24       	eor	r1, r1
    562c:	88 0f       	add	r24, r24
    562e:	89 2f       	mov	r24, r25
    5630:	88 1f       	adc	r24, r24
    5632:	99 0b       	sbc	r25, r25
    5634:	90 93 e9 06 	sts	0x06E9, r25
    5638:	80 93 e8 06 	sts	0x06E8, r24
    563c:	81 e0       	ldi	r24, 0x01	; 1
    563e:	80 93 00 04 	sts	0x0400, r24
    5642:	18 c0       	rjmp	.+48     	; 0x5674 <STEPPER_process_pwm+0x98>
    5644:	80 91 00 04 	lds	r24, 0x0400
    5648:	88 23       	and	r24, r24
    564a:	a1 f0       	breq	.+40     	; 0x5674 <STEPPER_process_pwm+0x98>
    564c:	80 91 e8 06 	lds	r24, 0x06E8
    5650:	90 91 e9 06 	lds	r25, 0x06E9
    5654:	01 97       	sbiw	r24, 0x01	; 1
    5656:	90 93 e9 06 	sts	0x06E9, r25
    565a:	80 93 e8 06 	sts	0x06E8, r24
    565e:	80 91 e8 06 	lds	r24, 0x06E8
    5662:	90 91 e9 06 	lds	r25, 0x06E9
    5666:	89 2b       	or	r24, r25
    5668:	29 f4       	brne	.+10     	; 0x5674 <STEPPER_process_pwm+0x98>
    566a:	80 81       	ld	r24, Z
    566c:	83 7e       	andi	r24, 0xE3	; 227
    566e:	80 83       	st	Z, r24
    5670:	10 92 00 04 	sts	0x0400, r1
    5674:	80 91 f6 06 	lds	r24, 0x06F6
    5678:	82 30       	cpi	r24, 0x02	; 2
    567a:	69 f4       	brne	.+26     	; 0x5696 <STEPPER_process_pwm+0xba>
    567c:	80 91 01 04 	lds	r24, 0x0401
    5680:	91 e0       	ldi	r25, 0x01	; 1
    5682:	89 27       	eor	r24, r25
    5684:	80 93 01 04 	sts	0x0401, r24
    5688:	88 23       	and	r24, r24
    568a:	09 f0       	breq	.+2      	; 0x568e <STEPPER_process_pwm+0xb2>
    568c:	3e c0       	rjmp	.+124    	; 0x570a <STEPPER_process_pwm+0x12e>
    568e:	80 81       	ld	r24, Z
    5690:	8f 71       	andi	r24, 0x1F	; 31
    5692:	80 83       	st	Z, r24
    5694:	08 95       	ret
    5696:	80 91 d6 06 	lds	r24, 0x06D6
    569a:	90 91 d7 06 	lds	r25, 0x06D7
    569e:	c3 97       	sbiw	r24, 0x33	; 51
    56a0:	a4 f5       	brge	.+104    	; 0x570a <STEPPER_process_pwm+0x12e>
    56a2:	44 23       	and	r20, r20
    56a4:	d1 f0       	breq	.+52     	; 0x56da <STEPPER_process_pwm+0xfe>
    56a6:	20 91 d6 06 	lds	r18, 0x06D6
    56aa:	30 91 d7 06 	lds	r19, 0x06D7
    56ae:	80 e6       	ldi	r24, 0x60	; 96
    56b0:	90 e0       	ldi	r25, 0x00	; 0
    56b2:	ac 01       	movw	r20, r24
    56b4:	24 9f       	mul	r18, r20
    56b6:	c0 01       	movw	r24, r0
    56b8:	25 9f       	mul	r18, r21
    56ba:	90 0d       	add	r25, r0
    56bc:	34 9f       	mul	r19, r20
    56be:	90 0d       	add	r25, r0
    56c0:	11 24       	eor	r1, r1
    56c2:	88 0f       	add	r24, r24
    56c4:	89 2f       	mov	r24, r25
    56c6:	88 1f       	adc	r24, r24
    56c8:	99 0b       	sbc	r25, r25
    56ca:	90 93 eb 06 	sts	0x06EB, r25
    56ce:	80 93 ea 06 	sts	0x06EA, r24
    56d2:	81 e0       	ldi	r24, 0x01	; 1
    56d4:	80 93 ff 03 	sts	0x03FF, r24
    56d8:	08 95       	ret
    56da:	80 91 ff 03 	lds	r24, 0x03FF
    56de:	88 23       	and	r24, r24
    56e0:	a1 f0       	breq	.+40     	; 0x570a <STEPPER_process_pwm+0x12e>
    56e2:	80 91 ea 06 	lds	r24, 0x06EA
    56e6:	90 91 eb 06 	lds	r25, 0x06EB
    56ea:	01 97       	sbiw	r24, 0x01	; 1
    56ec:	90 93 eb 06 	sts	0x06EB, r25
    56f0:	80 93 ea 06 	sts	0x06EA, r24
    56f4:	80 91 ea 06 	lds	r24, 0x06EA
    56f8:	90 91 eb 06 	lds	r25, 0x06EB
    56fc:	89 2b       	or	r24, r25
    56fe:	29 f4       	brne	.+10     	; 0x570a <STEPPER_process_pwm+0x12e>
    5700:	80 81       	ld	r24, Z
    5702:	8f 71       	andi	r24, 0x1F	; 31
    5704:	80 83       	st	Z, r24
    5706:	10 92 ff 03 	sts	0x03FF, r1
    570a:	08 95       	ret

0000570c <__subsf3>:
    570c:	50 58       	subi	r21, 0x80	; 128

0000570e <__addsf3>:
    570e:	bb 27       	eor	r27, r27
    5710:	aa 27       	eor	r26, r26
    5712:	0e d0       	rcall	.+28     	; 0x5730 <__addsf3x>
    5714:	75 c1       	rjmp	.+746    	; 0x5a00 <__fp_round>
    5716:	66 d1       	rcall	.+716    	; 0x59e4 <__fp_pscA>
    5718:	30 f0       	brcs	.+12     	; 0x5726 <__addsf3+0x18>
    571a:	6b d1       	rcall	.+726    	; 0x59f2 <__fp_pscB>
    571c:	20 f0       	brcs	.+8      	; 0x5726 <__addsf3+0x18>
    571e:	31 f4       	brne	.+12     	; 0x572c <__addsf3+0x1e>
    5720:	9f 3f       	cpi	r25, 0xFF	; 255
    5722:	11 f4       	brne	.+4      	; 0x5728 <__addsf3+0x1a>
    5724:	1e f4       	brtc	.+6      	; 0x572c <__addsf3+0x1e>
    5726:	5b c1       	rjmp	.+694    	; 0x59de <__fp_nan>
    5728:	0e f4       	brtc	.+2      	; 0x572c <__addsf3+0x1e>
    572a:	e0 95       	com	r30
    572c:	e7 fb       	bst	r30, 7
    572e:	51 c1       	rjmp	.+674    	; 0x59d2 <__fp_inf>

00005730 <__addsf3x>:
    5730:	e9 2f       	mov	r30, r25
    5732:	77 d1       	rcall	.+750    	; 0x5a22 <__fp_split3>
    5734:	80 f3       	brcs	.-32     	; 0x5716 <__addsf3+0x8>
    5736:	ba 17       	cp	r27, r26
    5738:	62 07       	cpc	r22, r18
    573a:	73 07       	cpc	r23, r19
    573c:	84 07       	cpc	r24, r20
    573e:	95 07       	cpc	r25, r21
    5740:	18 f0       	brcs	.+6      	; 0x5748 <__addsf3x+0x18>
    5742:	71 f4       	brne	.+28     	; 0x5760 <__addsf3x+0x30>
    5744:	9e f5       	brtc	.+102    	; 0x57ac <__addsf3x+0x7c>
    5746:	8f c1       	rjmp	.+798    	; 0x5a66 <__fp_zero>
    5748:	0e f4       	brtc	.+2      	; 0x574c <__addsf3x+0x1c>
    574a:	e0 95       	com	r30
    574c:	0b 2e       	mov	r0, r27
    574e:	ba 2f       	mov	r27, r26
    5750:	a0 2d       	mov	r26, r0
    5752:	0b 01       	movw	r0, r22
    5754:	b9 01       	movw	r22, r18
    5756:	90 01       	movw	r18, r0
    5758:	0c 01       	movw	r0, r24
    575a:	ca 01       	movw	r24, r20
    575c:	a0 01       	movw	r20, r0
    575e:	11 24       	eor	r1, r1
    5760:	ff 27       	eor	r31, r31
    5762:	59 1b       	sub	r21, r25
    5764:	99 f0       	breq	.+38     	; 0x578c <__addsf3x+0x5c>
    5766:	59 3f       	cpi	r21, 0xF9	; 249
    5768:	50 f4       	brcc	.+20     	; 0x577e <__addsf3x+0x4e>
    576a:	50 3e       	cpi	r21, 0xE0	; 224
    576c:	68 f1       	brcs	.+90     	; 0x57c8 <__addsf3x+0x98>
    576e:	1a 16       	cp	r1, r26
    5770:	f0 40       	sbci	r31, 0x00	; 0
    5772:	a2 2f       	mov	r26, r18
    5774:	23 2f       	mov	r18, r19
    5776:	34 2f       	mov	r19, r20
    5778:	44 27       	eor	r20, r20
    577a:	58 5f       	subi	r21, 0xF8	; 248
    577c:	f3 cf       	rjmp	.-26     	; 0x5764 <__addsf3x+0x34>
    577e:	46 95       	lsr	r20
    5780:	37 95       	ror	r19
    5782:	27 95       	ror	r18
    5784:	a7 95       	ror	r26
    5786:	f0 40       	sbci	r31, 0x00	; 0
    5788:	53 95       	inc	r21
    578a:	c9 f7       	brne	.-14     	; 0x577e <__addsf3x+0x4e>
    578c:	7e f4       	brtc	.+30     	; 0x57ac <__addsf3x+0x7c>
    578e:	1f 16       	cp	r1, r31
    5790:	ba 0b       	sbc	r27, r26
    5792:	62 0b       	sbc	r22, r18
    5794:	73 0b       	sbc	r23, r19
    5796:	84 0b       	sbc	r24, r20
    5798:	ba f0       	brmi	.+46     	; 0x57c8 <__addsf3x+0x98>
    579a:	91 50       	subi	r25, 0x01	; 1
    579c:	a1 f0       	breq	.+40     	; 0x57c6 <__addsf3x+0x96>
    579e:	ff 0f       	add	r31, r31
    57a0:	bb 1f       	adc	r27, r27
    57a2:	66 1f       	adc	r22, r22
    57a4:	77 1f       	adc	r23, r23
    57a6:	88 1f       	adc	r24, r24
    57a8:	c2 f7       	brpl	.-16     	; 0x579a <__addsf3x+0x6a>
    57aa:	0e c0       	rjmp	.+28     	; 0x57c8 <__addsf3x+0x98>
    57ac:	ba 0f       	add	r27, r26
    57ae:	62 1f       	adc	r22, r18
    57b0:	73 1f       	adc	r23, r19
    57b2:	84 1f       	adc	r24, r20
    57b4:	48 f4       	brcc	.+18     	; 0x57c8 <__addsf3x+0x98>
    57b6:	87 95       	ror	r24
    57b8:	77 95       	ror	r23
    57ba:	67 95       	ror	r22
    57bc:	b7 95       	ror	r27
    57be:	f7 95       	ror	r31
    57c0:	9e 3f       	cpi	r25, 0xFE	; 254
    57c2:	08 f0       	brcs	.+2      	; 0x57c6 <__addsf3x+0x96>
    57c4:	b3 cf       	rjmp	.-154    	; 0x572c <__addsf3+0x1e>
    57c6:	93 95       	inc	r25
    57c8:	88 0f       	add	r24, r24
    57ca:	08 f0       	brcs	.+2      	; 0x57ce <__addsf3x+0x9e>
    57cc:	99 27       	eor	r25, r25
    57ce:	ee 0f       	add	r30, r30
    57d0:	97 95       	ror	r25
    57d2:	87 95       	ror	r24
    57d4:	08 95       	ret

000057d6 <__cmpsf2>:
    57d6:	d9 d0       	rcall	.+434    	; 0x598a <__fp_cmp>
    57d8:	08 f4       	brcc	.+2      	; 0x57dc <__cmpsf2+0x6>
    57da:	81 e0       	ldi	r24, 0x01	; 1
    57dc:	08 95       	ret

000057de <__divsf3>:
    57de:	0c d0       	rcall	.+24     	; 0x57f8 <__divsf3x>
    57e0:	0f c1       	rjmp	.+542    	; 0x5a00 <__fp_round>
    57e2:	07 d1       	rcall	.+526    	; 0x59f2 <__fp_pscB>
    57e4:	40 f0       	brcs	.+16     	; 0x57f6 <__divsf3+0x18>
    57e6:	fe d0       	rcall	.+508    	; 0x59e4 <__fp_pscA>
    57e8:	30 f0       	brcs	.+12     	; 0x57f6 <__divsf3+0x18>
    57ea:	21 f4       	brne	.+8      	; 0x57f4 <__divsf3+0x16>
    57ec:	5f 3f       	cpi	r21, 0xFF	; 255
    57ee:	19 f0       	breq	.+6      	; 0x57f6 <__divsf3+0x18>
    57f0:	f0 c0       	rjmp	.+480    	; 0x59d2 <__fp_inf>
    57f2:	51 11       	cpse	r21, r1
    57f4:	39 c1       	rjmp	.+626    	; 0x5a68 <__fp_szero>
    57f6:	f3 c0       	rjmp	.+486    	; 0x59de <__fp_nan>

000057f8 <__divsf3x>:
    57f8:	14 d1       	rcall	.+552    	; 0x5a22 <__fp_split3>
    57fa:	98 f3       	brcs	.-26     	; 0x57e2 <__divsf3+0x4>

000057fc <__divsf3_pse>:
    57fc:	99 23       	and	r25, r25
    57fe:	c9 f3       	breq	.-14     	; 0x57f2 <__divsf3+0x14>
    5800:	55 23       	and	r21, r21
    5802:	b1 f3       	breq	.-20     	; 0x57f0 <__divsf3+0x12>
    5804:	95 1b       	sub	r25, r21
    5806:	55 0b       	sbc	r21, r21
    5808:	bb 27       	eor	r27, r27
    580a:	aa 27       	eor	r26, r26
    580c:	62 17       	cp	r22, r18
    580e:	73 07       	cpc	r23, r19
    5810:	84 07       	cpc	r24, r20
    5812:	38 f0       	brcs	.+14     	; 0x5822 <__divsf3_pse+0x26>
    5814:	9f 5f       	subi	r25, 0xFF	; 255
    5816:	5f 4f       	sbci	r21, 0xFF	; 255
    5818:	22 0f       	add	r18, r18
    581a:	33 1f       	adc	r19, r19
    581c:	44 1f       	adc	r20, r20
    581e:	aa 1f       	adc	r26, r26
    5820:	a9 f3       	breq	.-22     	; 0x580c <__divsf3_pse+0x10>
    5822:	33 d0       	rcall	.+102    	; 0x588a <__divsf3_pse+0x8e>
    5824:	0e 2e       	mov	r0, r30
    5826:	3a f0       	brmi	.+14     	; 0x5836 <__divsf3_pse+0x3a>
    5828:	e0 e8       	ldi	r30, 0x80	; 128
    582a:	30 d0       	rcall	.+96     	; 0x588c <__divsf3_pse+0x90>
    582c:	91 50       	subi	r25, 0x01	; 1
    582e:	50 40       	sbci	r21, 0x00	; 0
    5830:	e6 95       	lsr	r30
    5832:	00 1c       	adc	r0, r0
    5834:	ca f7       	brpl	.-14     	; 0x5828 <__divsf3_pse+0x2c>
    5836:	29 d0       	rcall	.+82     	; 0x588a <__divsf3_pse+0x8e>
    5838:	fe 2f       	mov	r31, r30
    583a:	27 d0       	rcall	.+78     	; 0x588a <__divsf3_pse+0x8e>
    583c:	66 0f       	add	r22, r22
    583e:	77 1f       	adc	r23, r23
    5840:	88 1f       	adc	r24, r24
    5842:	bb 1f       	adc	r27, r27
    5844:	26 17       	cp	r18, r22
    5846:	37 07       	cpc	r19, r23
    5848:	48 07       	cpc	r20, r24
    584a:	ab 07       	cpc	r26, r27
    584c:	b0 e8       	ldi	r27, 0x80	; 128
    584e:	09 f0       	breq	.+2      	; 0x5852 <__divsf3_pse+0x56>
    5850:	bb 0b       	sbc	r27, r27
    5852:	80 2d       	mov	r24, r0
    5854:	bf 01       	movw	r22, r30
    5856:	ff 27       	eor	r31, r31
    5858:	93 58       	subi	r25, 0x83	; 131
    585a:	5f 4f       	sbci	r21, 0xFF	; 255
    585c:	2a f0       	brmi	.+10     	; 0x5868 <__divsf3_pse+0x6c>
    585e:	9e 3f       	cpi	r25, 0xFE	; 254
    5860:	51 05       	cpc	r21, r1
    5862:	68 f0       	brcs	.+26     	; 0x587e <__divsf3_pse+0x82>
    5864:	b6 c0       	rjmp	.+364    	; 0x59d2 <__fp_inf>
    5866:	00 c1       	rjmp	.+512    	; 0x5a68 <__fp_szero>
    5868:	5f 3f       	cpi	r21, 0xFF	; 255
    586a:	ec f3       	brlt	.-6      	; 0x5866 <__divsf3_pse+0x6a>
    586c:	98 3e       	cpi	r25, 0xE8	; 232
    586e:	dc f3       	brlt	.-10     	; 0x5866 <__divsf3_pse+0x6a>
    5870:	86 95       	lsr	r24
    5872:	77 95       	ror	r23
    5874:	67 95       	ror	r22
    5876:	b7 95       	ror	r27
    5878:	f7 95       	ror	r31
    587a:	9f 5f       	subi	r25, 0xFF	; 255
    587c:	c9 f7       	brne	.-14     	; 0x5870 <__divsf3_pse+0x74>
    587e:	88 0f       	add	r24, r24
    5880:	91 1d       	adc	r25, r1
    5882:	96 95       	lsr	r25
    5884:	87 95       	ror	r24
    5886:	97 f9       	bld	r25, 7
    5888:	08 95       	ret
    588a:	e1 e0       	ldi	r30, 0x01	; 1
    588c:	66 0f       	add	r22, r22
    588e:	77 1f       	adc	r23, r23
    5890:	88 1f       	adc	r24, r24
    5892:	bb 1f       	adc	r27, r27
    5894:	62 17       	cp	r22, r18
    5896:	73 07       	cpc	r23, r19
    5898:	84 07       	cpc	r24, r20
    589a:	ba 07       	cpc	r27, r26
    589c:	20 f0       	brcs	.+8      	; 0x58a6 <__divsf3_pse+0xaa>
    589e:	62 1b       	sub	r22, r18
    58a0:	73 0b       	sbc	r23, r19
    58a2:	84 0b       	sbc	r24, r20
    58a4:	ba 0b       	sbc	r27, r26
    58a6:	ee 1f       	adc	r30, r30
    58a8:	88 f7       	brcc	.-30     	; 0x588c <__divsf3_pse+0x90>
    58aa:	e0 95       	com	r30
    58ac:	08 95       	ret

000058ae <__fixsfsi>:
    58ae:	04 d0       	rcall	.+8      	; 0x58b8 <__fixunssfsi>
    58b0:	68 94       	set
    58b2:	b1 11       	cpse	r27, r1
    58b4:	d9 c0       	rjmp	.+434    	; 0x5a68 <__fp_szero>
    58b6:	08 95       	ret

000058b8 <__fixunssfsi>:
    58b8:	bc d0       	rcall	.+376    	; 0x5a32 <__fp_splitA>
    58ba:	88 f0       	brcs	.+34     	; 0x58de <__fixunssfsi+0x26>
    58bc:	9f 57       	subi	r25, 0x7F	; 127
    58be:	90 f0       	brcs	.+36     	; 0x58e4 <__fixunssfsi+0x2c>
    58c0:	b9 2f       	mov	r27, r25
    58c2:	99 27       	eor	r25, r25
    58c4:	b7 51       	subi	r27, 0x17	; 23
    58c6:	a0 f0       	brcs	.+40     	; 0x58f0 <__fixunssfsi+0x38>
    58c8:	d1 f0       	breq	.+52     	; 0x58fe <__fixunssfsi+0x46>
    58ca:	66 0f       	add	r22, r22
    58cc:	77 1f       	adc	r23, r23
    58ce:	88 1f       	adc	r24, r24
    58d0:	99 1f       	adc	r25, r25
    58d2:	1a f0       	brmi	.+6      	; 0x58da <__fixunssfsi+0x22>
    58d4:	ba 95       	dec	r27
    58d6:	c9 f7       	brne	.-14     	; 0x58ca <__fixunssfsi+0x12>
    58d8:	12 c0       	rjmp	.+36     	; 0x58fe <__fixunssfsi+0x46>
    58da:	b1 30       	cpi	r27, 0x01	; 1
    58dc:	81 f0       	breq	.+32     	; 0x58fe <__fixunssfsi+0x46>
    58de:	c3 d0       	rcall	.+390    	; 0x5a66 <__fp_zero>
    58e0:	b1 e0       	ldi	r27, 0x01	; 1
    58e2:	08 95       	ret
    58e4:	c0 c0       	rjmp	.+384    	; 0x5a66 <__fp_zero>
    58e6:	67 2f       	mov	r22, r23
    58e8:	78 2f       	mov	r23, r24
    58ea:	88 27       	eor	r24, r24
    58ec:	b8 5f       	subi	r27, 0xF8	; 248
    58ee:	39 f0       	breq	.+14     	; 0x58fe <__fixunssfsi+0x46>
    58f0:	b9 3f       	cpi	r27, 0xF9	; 249
    58f2:	cc f3       	brlt	.-14     	; 0x58e6 <__fixunssfsi+0x2e>
    58f4:	86 95       	lsr	r24
    58f6:	77 95       	ror	r23
    58f8:	67 95       	ror	r22
    58fa:	b3 95       	inc	r27
    58fc:	d9 f7       	brne	.-10     	; 0x58f4 <__fixunssfsi+0x3c>
    58fe:	3e f4       	brtc	.+14     	; 0x590e <__fixunssfsi+0x56>
    5900:	90 95       	com	r25
    5902:	80 95       	com	r24
    5904:	70 95       	com	r23
    5906:	61 95       	neg	r22
    5908:	7f 4f       	sbci	r23, 0xFF	; 255
    590a:	8f 4f       	sbci	r24, 0xFF	; 255
    590c:	9f 4f       	sbci	r25, 0xFF	; 255
    590e:	08 95       	ret

00005910 <__floatunsisf>:
    5910:	e8 94       	clt
    5912:	09 c0       	rjmp	.+18     	; 0x5926 <__floatsisf+0x12>

00005914 <__floatsisf>:
    5914:	97 fb       	bst	r25, 7
    5916:	3e f4       	brtc	.+14     	; 0x5926 <__floatsisf+0x12>
    5918:	90 95       	com	r25
    591a:	80 95       	com	r24
    591c:	70 95       	com	r23
    591e:	61 95       	neg	r22
    5920:	7f 4f       	sbci	r23, 0xFF	; 255
    5922:	8f 4f       	sbci	r24, 0xFF	; 255
    5924:	9f 4f       	sbci	r25, 0xFF	; 255
    5926:	99 23       	and	r25, r25
    5928:	a9 f0       	breq	.+42     	; 0x5954 <__floatsisf+0x40>
    592a:	f9 2f       	mov	r31, r25
    592c:	96 e9       	ldi	r25, 0x96	; 150
    592e:	bb 27       	eor	r27, r27
    5930:	93 95       	inc	r25
    5932:	f6 95       	lsr	r31
    5934:	87 95       	ror	r24
    5936:	77 95       	ror	r23
    5938:	67 95       	ror	r22
    593a:	b7 95       	ror	r27
    593c:	f1 11       	cpse	r31, r1
    593e:	f8 cf       	rjmp	.-16     	; 0x5930 <__floatsisf+0x1c>
    5940:	fa f4       	brpl	.+62     	; 0x5980 <__floatsisf+0x6c>
    5942:	bb 0f       	add	r27, r27
    5944:	11 f4       	brne	.+4      	; 0x594a <__floatsisf+0x36>
    5946:	60 ff       	sbrs	r22, 0
    5948:	1b c0       	rjmp	.+54     	; 0x5980 <__floatsisf+0x6c>
    594a:	6f 5f       	subi	r22, 0xFF	; 255
    594c:	7f 4f       	sbci	r23, 0xFF	; 255
    594e:	8f 4f       	sbci	r24, 0xFF	; 255
    5950:	9f 4f       	sbci	r25, 0xFF	; 255
    5952:	16 c0       	rjmp	.+44     	; 0x5980 <__floatsisf+0x6c>
    5954:	88 23       	and	r24, r24
    5956:	11 f0       	breq	.+4      	; 0x595c <__floatsisf+0x48>
    5958:	96 e9       	ldi	r25, 0x96	; 150
    595a:	11 c0       	rjmp	.+34     	; 0x597e <__floatsisf+0x6a>
    595c:	77 23       	and	r23, r23
    595e:	21 f0       	breq	.+8      	; 0x5968 <__floatsisf+0x54>
    5960:	9e e8       	ldi	r25, 0x8E	; 142
    5962:	87 2f       	mov	r24, r23
    5964:	76 2f       	mov	r23, r22
    5966:	05 c0       	rjmp	.+10     	; 0x5972 <__floatsisf+0x5e>
    5968:	66 23       	and	r22, r22
    596a:	71 f0       	breq	.+28     	; 0x5988 <__floatsisf+0x74>
    596c:	96 e8       	ldi	r25, 0x86	; 134
    596e:	86 2f       	mov	r24, r22
    5970:	70 e0       	ldi	r23, 0x00	; 0
    5972:	60 e0       	ldi	r22, 0x00	; 0
    5974:	2a f0       	brmi	.+10     	; 0x5980 <__floatsisf+0x6c>
    5976:	9a 95       	dec	r25
    5978:	66 0f       	add	r22, r22
    597a:	77 1f       	adc	r23, r23
    597c:	88 1f       	adc	r24, r24
    597e:	da f7       	brpl	.-10     	; 0x5976 <__floatsisf+0x62>
    5980:	88 0f       	add	r24, r24
    5982:	96 95       	lsr	r25
    5984:	87 95       	ror	r24
    5986:	97 f9       	bld	r25, 7
    5988:	08 95       	ret

0000598a <__fp_cmp>:
    598a:	99 0f       	add	r25, r25
    598c:	00 08       	sbc	r0, r0
    598e:	55 0f       	add	r21, r21
    5990:	aa 0b       	sbc	r26, r26
    5992:	e0 e8       	ldi	r30, 0x80	; 128
    5994:	fe ef       	ldi	r31, 0xFE	; 254
    5996:	16 16       	cp	r1, r22
    5998:	17 06       	cpc	r1, r23
    599a:	e8 07       	cpc	r30, r24
    599c:	f9 07       	cpc	r31, r25
    599e:	c0 f0       	brcs	.+48     	; 0x59d0 <__fp_cmp+0x46>
    59a0:	12 16       	cp	r1, r18
    59a2:	13 06       	cpc	r1, r19
    59a4:	e4 07       	cpc	r30, r20
    59a6:	f5 07       	cpc	r31, r21
    59a8:	98 f0       	brcs	.+38     	; 0x59d0 <__fp_cmp+0x46>
    59aa:	62 1b       	sub	r22, r18
    59ac:	73 0b       	sbc	r23, r19
    59ae:	84 0b       	sbc	r24, r20
    59b0:	95 0b       	sbc	r25, r21
    59b2:	39 f4       	brne	.+14     	; 0x59c2 <__fp_cmp+0x38>
    59b4:	0a 26       	eor	r0, r26
    59b6:	61 f0       	breq	.+24     	; 0x59d0 <__fp_cmp+0x46>
    59b8:	23 2b       	or	r18, r19
    59ba:	24 2b       	or	r18, r20
    59bc:	25 2b       	or	r18, r21
    59be:	21 f4       	brne	.+8      	; 0x59c8 <__fp_cmp+0x3e>
    59c0:	08 95       	ret
    59c2:	0a 26       	eor	r0, r26
    59c4:	09 f4       	brne	.+2      	; 0x59c8 <__fp_cmp+0x3e>
    59c6:	a1 40       	sbci	r26, 0x01	; 1
    59c8:	a6 95       	lsr	r26
    59ca:	8f ef       	ldi	r24, 0xFF	; 255
    59cc:	81 1d       	adc	r24, r1
    59ce:	81 1d       	adc	r24, r1
    59d0:	08 95       	ret

000059d2 <__fp_inf>:
    59d2:	97 f9       	bld	r25, 7
    59d4:	9f 67       	ori	r25, 0x7F	; 127
    59d6:	80 e8       	ldi	r24, 0x80	; 128
    59d8:	70 e0       	ldi	r23, 0x00	; 0
    59da:	60 e0       	ldi	r22, 0x00	; 0
    59dc:	08 95       	ret

000059de <__fp_nan>:
    59de:	9f ef       	ldi	r25, 0xFF	; 255
    59e0:	80 ec       	ldi	r24, 0xC0	; 192
    59e2:	08 95       	ret

000059e4 <__fp_pscA>:
    59e4:	00 24       	eor	r0, r0
    59e6:	0a 94       	dec	r0
    59e8:	16 16       	cp	r1, r22
    59ea:	17 06       	cpc	r1, r23
    59ec:	18 06       	cpc	r1, r24
    59ee:	09 06       	cpc	r0, r25
    59f0:	08 95       	ret

000059f2 <__fp_pscB>:
    59f2:	00 24       	eor	r0, r0
    59f4:	0a 94       	dec	r0
    59f6:	12 16       	cp	r1, r18
    59f8:	13 06       	cpc	r1, r19
    59fa:	14 06       	cpc	r1, r20
    59fc:	05 06       	cpc	r0, r21
    59fe:	08 95       	ret

00005a00 <__fp_round>:
    5a00:	09 2e       	mov	r0, r25
    5a02:	03 94       	inc	r0
    5a04:	00 0c       	add	r0, r0
    5a06:	11 f4       	brne	.+4      	; 0x5a0c <__fp_round+0xc>
    5a08:	88 23       	and	r24, r24
    5a0a:	52 f0       	brmi	.+20     	; 0x5a20 <__fp_round+0x20>
    5a0c:	bb 0f       	add	r27, r27
    5a0e:	40 f4       	brcc	.+16     	; 0x5a20 <__fp_round+0x20>
    5a10:	bf 2b       	or	r27, r31
    5a12:	11 f4       	brne	.+4      	; 0x5a18 <__fp_round+0x18>
    5a14:	60 ff       	sbrs	r22, 0
    5a16:	04 c0       	rjmp	.+8      	; 0x5a20 <__fp_round+0x20>
    5a18:	6f 5f       	subi	r22, 0xFF	; 255
    5a1a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a1c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a1e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a20:	08 95       	ret

00005a22 <__fp_split3>:
    5a22:	57 fd       	sbrc	r21, 7
    5a24:	90 58       	subi	r25, 0x80	; 128
    5a26:	44 0f       	add	r20, r20
    5a28:	55 1f       	adc	r21, r21
    5a2a:	59 f0       	breq	.+22     	; 0x5a42 <__fp_splitA+0x10>
    5a2c:	5f 3f       	cpi	r21, 0xFF	; 255
    5a2e:	71 f0       	breq	.+28     	; 0x5a4c <__fp_splitA+0x1a>
    5a30:	47 95       	ror	r20

00005a32 <__fp_splitA>:
    5a32:	88 0f       	add	r24, r24
    5a34:	97 fb       	bst	r25, 7
    5a36:	99 1f       	adc	r25, r25
    5a38:	61 f0       	breq	.+24     	; 0x5a52 <__fp_splitA+0x20>
    5a3a:	9f 3f       	cpi	r25, 0xFF	; 255
    5a3c:	79 f0       	breq	.+30     	; 0x5a5c <__fp_splitA+0x2a>
    5a3e:	87 95       	ror	r24
    5a40:	08 95       	ret
    5a42:	12 16       	cp	r1, r18
    5a44:	13 06       	cpc	r1, r19
    5a46:	14 06       	cpc	r1, r20
    5a48:	55 1f       	adc	r21, r21
    5a4a:	f2 cf       	rjmp	.-28     	; 0x5a30 <__fp_split3+0xe>
    5a4c:	46 95       	lsr	r20
    5a4e:	f1 df       	rcall	.-30     	; 0x5a32 <__fp_splitA>
    5a50:	08 c0       	rjmp	.+16     	; 0x5a62 <__fp_splitA+0x30>
    5a52:	16 16       	cp	r1, r22
    5a54:	17 06       	cpc	r1, r23
    5a56:	18 06       	cpc	r1, r24
    5a58:	99 1f       	adc	r25, r25
    5a5a:	f1 cf       	rjmp	.-30     	; 0x5a3e <__fp_splitA+0xc>
    5a5c:	86 95       	lsr	r24
    5a5e:	71 05       	cpc	r23, r1
    5a60:	61 05       	cpc	r22, r1
    5a62:	08 94       	sec
    5a64:	08 95       	ret

00005a66 <__fp_zero>:
    5a66:	e8 94       	clt

00005a68 <__fp_szero>:
    5a68:	bb 27       	eor	r27, r27
    5a6a:	66 27       	eor	r22, r22
    5a6c:	77 27       	eor	r23, r23
    5a6e:	cb 01       	movw	r24, r22
    5a70:	97 f9       	bld	r25, 7
    5a72:	08 95       	ret

00005a74 <__gesf2>:
    5a74:	8a df       	rcall	.-236    	; 0x598a <__fp_cmp>
    5a76:	08 f4       	brcc	.+2      	; 0x5a7a <__gesf2+0x6>
    5a78:	8f ef       	ldi	r24, 0xFF	; 255
    5a7a:	08 95       	ret

00005a7c <lrint>:
    5a7c:	da df       	rcall	.-76     	; 0x5a32 <__fp_splitA>
    5a7e:	a8 f1       	brcs	.+106    	; 0x5aea <lrint+0x6e>
    5a80:	9e 57       	subi	r25, 0x7E	; 126
    5a82:	a8 f1       	brcs	.+106    	; 0x5aee <lrint+0x72>
    5a84:	98 51       	subi	r25, 0x18	; 24
    5a86:	60 f0       	brcs	.+24     	; 0x5aa0 <lrint+0x24>
    5a88:	39 f1       	breq	.+78     	; 0x5ad8 <lrint+0x5c>
    5a8a:	98 30       	cpi	r25, 0x08	; 8
    5a8c:	70 f5       	brcc	.+92     	; 0x5aea <lrint+0x6e>
    5a8e:	09 2e       	mov	r0, r25
    5a90:	99 27       	eor	r25, r25
    5a92:	66 0f       	add	r22, r22
    5a94:	77 1f       	adc	r23, r23
    5a96:	88 1f       	adc	r24, r24
    5a98:	99 1f       	adc	r25, r25
    5a9a:	0a 94       	dec	r0
    5a9c:	d1 f7       	brne	.-12     	; 0x5a92 <lrint+0x16>
    5a9e:	1c c0       	rjmp	.+56     	; 0x5ad8 <lrint+0x5c>
    5aa0:	bb 27       	eor	r27, r27
    5aa2:	99 3f       	cpi	r25, 0xF9	; 249
    5aa4:	4c f4       	brge	.+18     	; 0x5ab8 <lrint+0x3c>
    5aa6:	b1 11       	cpse	r27, r1
    5aa8:	b1 e0       	ldi	r27, 0x01	; 1
    5aaa:	b6 2b       	or	r27, r22
    5aac:	67 2f       	mov	r22, r23
    5aae:	78 2f       	mov	r23, r24
    5ab0:	88 27       	eor	r24, r24
    5ab2:	98 5f       	subi	r25, 0xF8	; 248
    5ab4:	b1 f7       	brne	.-20     	; 0x5aa2 <lrint+0x26>
    5ab6:	08 c0       	rjmp	.+16     	; 0x5ac8 <lrint+0x4c>
    5ab8:	86 95       	lsr	r24
    5aba:	77 95       	ror	r23
    5abc:	67 95       	ror	r22
    5abe:	b7 95       	ror	r27
    5ac0:	08 f4       	brcc	.+2      	; 0x5ac4 <lrint+0x48>
    5ac2:	b1 60       	ori	r27, 0x01	; 1
    5ac4:	93 95       	inc	r25
    5ac6:	c1 f7       	brne	.-16     	; 0x5ab8 <lrint+0x3c>
    5ac8:	bb 0f       	add	r27, r27
    5aca:	30 f4       	brcc	.+12     	; 0x5ad8 <lrint+0x5c>
    5acc:	11 f4       	brne	.+4      	; 0x5ad2 <lrint+0x56>
    5ace:	60 ff       	sbrs	r22, 0
    5ad0:	03 c0       	rjmp	.+6      	; 0x5ad8 <lrint+0x5c>
    5ad2:	6f 5f       	subi	r22, 0xFF	; 255
    5ad4:	7f 4f       	sbci	r23, 0xFF	; 255
    5ad6:	8f 4f       	sbci	r24, 0xFF	; 255
    5ad8:	3e f4       	brtc	.+14     	; 0x5ae8 <lrint+0x6c>
    5ada:	90 95       	com	r25
    5adc:	80 95       	com	r24
    5ade:	70 95       	com	r23
    5ae0:	61 95       	neg	r22
    5ae2:	7f 4f       	sbci	r23, 0xFF	; 255
    5ae4:	8f 4f       	sbci	r24, 0xFF	; 255
    5ae6:	9f 4f       	sbci	r25, 0xFF	; 255
    5ae8:	08 95       	ret
    5aea:	68 94       	set
    5aec:	bd cf       	rjmp	.-134    	; 0x5a68 <__fp_szero>
    5aee:	bb cf       	rjmp	.-138    	; 0x5a66 <__fp_zero>

00005af0 <__mulsf3>:
    5af0:	0b d0       	rcall	.+22     	; 0x5b08 <__mulsf3x>
    5af2:	86 cf       	rjmp	.-244    	; 0x5a00 <__fp_round>
    5af4:	77 df       	rcall	.-274    	; 0x59e4 <__fp_pscA>
    5af6:	28 f0       	brcs	.+10     	; 0x5b02 <__mulsf3+0x12>
    5af8:	7c df       	rcall	.-264    	; 0x59f2 <__fp_pscB>
    5afa:	18 f0       	brcs	.+6      	; 0x5b02 <__mulsf3+0x12>
    5afc:	95 23       	and	r25, r21
    5afe:	09 f0       	breq	.+2      	; 0x5b02 <__mulsf3+0x12>
    5b00:	68 cf       	rjmp	.-304    	; 0x59d2 <__fp_inf>
    5b02:	6d cf       	rjmp	.-294    	; 0x59de <__fp_nan>
    5b04:	11 24       	eor	r1, r1
    5b06:	b0 cf       	rjmp	.-160    	; 0x5a68 <__fp_szero>

00005b08 <__mulsf3x>:
    5b08:	8c df       	rcall	.-232    	; 0x5a22 <__fp_split3>
    5b0a:	a0 f3       	brcs	.-24     	; 0x5af4 <__mulsf3+0x4>

00005b0c <__mulsf3_pse>:
    5b0c:	95 9f       	mul	r25, r21
    5b0e:	d1 f3       	breq	.-12     	; 0x5b04 <__mulsf3+0x14>
    5b10:	95 0f       	add	r25, r21
    5b12:	50 e0       	ldi	r21, 0x00	; 0
    5b14:	55 1f       	adc	r21, r21
    5b16:	62 9f       	mul	r22, r18
    5b18:	f0 01       	movw	r30, r0
    5b1a:	72 9f       	mul	r23, r18
    5b1c:	bb 27       	eor	r27, r27
    5b1e:	f0 0d       	add	r31, r0
    5b20:	b1 1d       	adc	r27, r1
    5b22:	63 9f       	mul	r22, r19
    5b24:	aa 27       	eor	r26, r26
    5b26:	f0 0d       	add	r31, r0
    5b28:	b1 1d       	adc	r27, r1
    5b2a:	aa 1f       	adc	r26, r26
    5b2c:	64 9f       	mul	r22, r20
    5b2e:	66 27       	eor	r22, r22
    5b30:	b0 0d       	add	r27, r0
    5b32:	a1 1d       	adc	r26, r1
    5b34:	66 1f       	adc	r22, r22
    5b36:	82 9f       	mul	r24, r18
    5b38:	22 27       	eor	r18, r18
    5b3a:	b0 0d       	add	r27, r0
    5b3c:	a1 1d       	adc	r26, r1
    5b3e:	62 1f       	adc	r22, r18
    5b40:	73 9f       	mul	r23, r19
    5b42:	b0 0d       	add	r27, r0
    5b44:	a1 1d       	adc	r26, r1
    5b46:	62 1f       	adc	r22, r18
    5b48:	83 9f       	mul	r24, r19
    5b4a:	a0 0d       	add	r26, r0
    5b4c:	61 1d       	adc	r22, r1
    5b4e:	22 1f       	adc	r18, r18
    5b50:	74 9f       	mul	r23, r20
    5b52:	33 27       	eor	r19, r19
    5b54:	a0 0d       	add	r26, r0
    5b56:	61 1d       	adc	r22, r1
    5b58:	23 1f       	adc	r18, r19
    5b5a:	84 9f       	mul	r24, r20
    5b5c:	60 0d       	add	r22, r0
    5b5e:	21 1d       	adc	r18, r1
    5b60:	82 2f       	mov	r24, r18
    5b62:	76 2f       	mov	r23, r22
    5b64:	6a 2f       	mov	r22, r26
    5b66:	11 24       	eor	r1, r1
    5b68:	9f 57       	subi	r25, 0x7F	; 127
    5b6a:	50 40       	sbci	r21, 0x00	; 0
    5b6c:	8a f0       	brmi	.+34     	; 0x5b90 <__mulsf3_pse+0x84>
    5b6e:	e1 f0       	breq	.+56     	; 0x5ba8 <__mulsf3_pse+0x9c>
    5b70:	88 23       	and	r24, r24
    5b72:	4a f0       	brmi	.+18     	; 0x5b86 <__mulsf3_pse+0x7a>
    5b74:	ee 0f       	add	r30, r30
    5b76:	ff 1f       	adc	r31, r31
    5b78:	bb 1f       	adc	r27, r27
    5b7a:	66 1f       	adc	r22, r22
    5b7c:	77 1f       	adc	r23, r23
    5b7e:	88 1f       	adc	r24, r24
    5b80:	91 50       	subi	r25, 0x01	; 1
    5b82:	50 40       	sbci	r21, 0x00	; 0
    5b84:	a9 f7       	brne	.-22     	; 0x5b70 <__mulsf3_pse+0x64>
    5b86:	9e 3f       	cpi	r25, 0xFE	; 254
    5b88:	51 05       	cpc	r21, r1
    5b8a:	70 f0       	brcs	.+28     	; 0x5ba8 <__mulsf3_pse+0x9c>
    5b8c:	22 cf       	rjmp	.-444    	; 0x59d2 <__fp_inf>
    5b8e:	6c cf       	rjmp	.-296    	; 0x5a68 <__fp_szero>
    5b90:	5f 3f       	cpi	r21, 0xFF	; 255
    5b92:	ec f3       	brlt	.-6      	; 0x5b8e <__mulsf3_pse+0x82>
    5b94:	98 3e       	cpi	r25, 0xE8	; 232
    5b96:	dc f3       	brlt	.-10     	; 0x5b8e <__mulsf3_pse+0x82>
    5b98:	86 95       	lsr	r24
    5b9a:	77 95       	ror	r23
    5b9c:	67 95       	ror	r22
    5b9e:	b7 95       	ror	r27
    5ba0:	f7 95       	ror	r31
    5ba2:	e7 95       	ror	r30
    5ba4:	9f 5f       	subi	r25, 0xFF	; 255
    5ba6:	c1 f7       	brne	.-16     	; 0x5b98 <__mulsf3_pse+0x8c>
    5ba8:	fe 2b       	or	r31, r30
    5baa:	88 0f       	add	r24, r24
    5bac:	91 1d       	adc	r25, r1
    5bae:	96 95       	lsr	r25
    5bb0:	87 95       	ror	r24
    5bb2:	97 f9       	bld	r25, 7
    5bb4:	08 95       	ret

00005bb6 <pow>:
    5bb6:	fa 01       	movw	r30, r20
    5bb8:	ee 0f       	add	r30, r30
    5bba:	ff 1f       	adc	r31, r31
    5bbc:	30 96       	adiw	r30, 0x00	; 0
    5bbe:	21 05       	cpc	r18, r1
    5bc0:	31 05       	cpc	r19, r1
    5bc2:	99 f1       	breq	.+102    	; 0x5c2a <pow+0x74>
    5bc4:	61 15       	cp	r22, r1
    5bc6:	71 05       	cpc	r23, r1
    5bc8:	61 f4       	brne	.+24     	; 0x5be2 <pow+0x2c>
    5bca:	80 38       	cpi	r24, 0x80	; 128
    5bcc:	bf e3       	ldi	r27, 0x3F	; 63
    5bce:	9b 07       	cpc	r25, r27
    5bd0:	49 f1       	breq	.+82     	; 0x5c24 <pow+0x6e>
    5bd2:	68 94       	set
    5bd4:	90 38       	cpi	r25, 0x80	; 128
    5bd6:	81 05       	cpc	r24, r1
    5bd8:	61 f0       	breq	.+24     	; 0x5bf2 <pow+0x3c>
    5bda:	80 38       	cpi	r24, 0x80	; 128
    5bdc:	bf ef       	ldi	r27, 0xFF	; 255
    5bde:	9b 07       	cpc	r25, r27
    5be0:	41 f0       	breq	.+16     	; 0x5bf2 <pow+0x3c>
    5be2:	99 23       	and	r25, r25
    5be4:	42 f5       	brpl	.+80     	; 0x5c36 <pow+0x80>
    5be6:	ff 3f       	cpi	r31, 0xFF	; 255
    5be8:	e1 05       	cpc	r30, r1
    5bea:	31 05       	cpc	r19, r1
    5bec:	21 05       	cpc	r18, r1
    5bee:	11 f1       	breq	.+68     	; 0x5c34 <pow+0x7e>
    5bf0:	e8 94       	clt
    5bf2:	08 94       	sec
    5bf4:	e7 95       	ror	r30
    5bf6:	d9 01       	movw	r26, r18
    5bf8:	aa 23       	and	r26, r26
    5bfa:	29 f4       	brne	.+10     	; 0x5c06 <pow+0x50>
    5bfc:	ab 2f       	mov	r26, r27
    5bfe:	be 2f       	mov	r27, r30
    5c00:	f8 5f       	subi	r31, 0xF8	; 248
    5c02:	d0 f3       	brcs	.-12     	; 0x5bf8 <pow+0x42>
    5c04:	10 c0       	rjmp	.+32     	; 0x5c26 <pow+0x70>
    5c06:	ff 5f       	subi	r31, 0xFF	; 255
    5c08:	70 f4       	brcc	.+28     	; 0x5c26 <pow+0x70>
    5c0a:	a6 95       	lsr	r26
    5c0c:	e0 f7       	brcc	.-8      	; 0x5c06 <pow+0x50>
    5c0e:	f7 39       	cpi	r31, 0x97	; 151
    5c10:	50 f0       	brcs	.+20     	; 0x5c26 <pow+0x70>
    5c12:	19 f0       	breq	.+6      	; 0x5c1a <pow+0x64>
    5c14:	ff 3a       	cpi	r31, 0xAF	; 175
    5c16:	38 f4       	brcc	.+14     	; 0x5c26 <pow+0x70>
    5c18:	9f 77       	andi	r25, 0x7F	; 127
    5c1a:	9f 93       	push	r25
    5c1c:	0c d0       	rcall	.+24     	; 0x5c36 <pow+0x80>
    5c1e:	0f 90       	pop	r0
    5c20:	07 fc       	sbrc	r0, 7
    5c22:	90 58       	subi	r25, 0x80	; 128
    5c24:	08 95       	ret
    5c26:	3e f0       	brts	.+14     	; 0x5c36 <pow+0x80>
    5c28:	da ce       	rjmp	.-588    	; 0x59de <__fp_nan>
    5c2a:	60 e0       	ldi	r22, 0x00	; 0
    5c2c:	70 e0       	ldi	r23, 0x00	; 0
    5c2e:	80 e8       	ldi	r24, 0x80	; 128
    5c30:	9f e3       	ldi	r25, 0x3F	; 63
    5c32:	08 95       	ret
    5c34:	4f e7       	ldi	r20, 0x7F	; 127
    5c36:	9f 77       	andi	r25, 0x7F	; 127
    5c38:	5f 93       	push	r21
    5c3a:	4f 93       	push	r20
    5c3c:	3f 93       	push	r19
    5c3e:	2f 93       	push	r18
    5c40:	9e d0       	rcall	.+316    	; 0x5d7e <log>
    5c42:	2f 91       	pop	r18
    5c44:	3f 91       	pop	r19
    5c46:	4f 91       	pop	r20
    5c48:	5f 91       	pop	r21
    5c4a:	52 df       	rcall	.-348    	; 0x5af0 <__mulsf3>
    5c4c:	05 c0       	rjmp	.+10     	; 0x5c58 <exp>
    5c4e:	19 f4       	brne	.+6      	; 0x5c56 <pow+0xa0>
    5c50:	0e f0       	brts	.+2      	; 0x5c54 <pow+0x9e>
    5c52:	bf ce       	rjmp	.-642    	; 0x59d2 <__fp_inf>
    5c54:	08 cf       	rjmp	.-496    	; 0x5a66 <__fp_zero>
    5c56:	c3 ce       	rjmp	.-634    	; 0x59de <__fp_nan>

00005c58 <exp>:
    5c58:	ec de       	rcall	.-552    	; 0x5a32 <__fp_splitA>
    5c5a:	c8 f3       	brcs	.-14     	; 0x5c4e <pow+0x98>
    5c5c:	96 38       	cpi	r25, 0x86	; 134
    5c5e:	c0 f7       	brcc	.-16     	; 0x5c50 <pow+0x9a>
    5c60:	07 f8       	bld	r0, 7
    5c62:	0f 92       	push	r0
    5c64:	e8 94       	clt
    5c66:	2b e3       	ldi	r18, 0x3B	; 59
    5c68:	3a ea       	ldi	r19, 0xAA	; 170
    5c6a:	48 eb       	ldi	r20, 0xB8	; 184
    5c6c:	5f e7       	ldi	r21, 0x7F	; 127
    5c6e:	4e df       	rcall	.-356    	; 0x5b0c <__mulsf3_pse>
    5c70:	0f 92       	push	r0
    5c72:	0f 92       	push	r0
    5c74:	0f 92       	push	r0
    5c76:	4d b7       	in	r20, 0x3d	; 61
    5c78:	5e b7       	in	r21, 0x3e	; 62
    5c7a:	0f 92       	push	r0
    5c7c:	c0 d0       	rcall	.+384    	; 0x5dfe <modf>
    5c7e:	e8 ec       	ldi	r30, 0xC8	; 200
    5c80:	f0 e0       	ldi	r31, 0x00	; 0
    5c82:	16 d0       	rcall	.+44     	; 0x5cb0 <__fp_powser>
    5c84:	4f 91       	pop	r20
    5c86:	5f 91       	pop	r21
    5c88:	ef 91       	pop	r30
    5c8a:	ff 91       	pop	r31
    5c8c:	e5 95       	asr	r30
    5c8e:	ee 1f       	adc	r30, r30
    5c90:	ff 1f       	adc	r31, r31
    5c92:	49 f0       	breq	.+18     	; 0x5ca6 <exp+0x4e>
    5c94:	fe 57       	subi	r31, 0x7E	; 126
    5c96:	e0 68       	ori	r30, 0x80	; 128
    5c98:	44 27       	eor	r20, r20
    5c9a:	ee 0f       	add	r30, r30
    5c9c:	44 1f       	adc	r20, r20
    5c9e:	fa 95       	dec	r31
    5ca0:	e1 f7       	brne	.-8      	; 0x5c9a <exp+0x42>
    5ca2:	41 95       	neg	r20
    5ca4:	55 0b       	sbc	r21, r21
    5ca6:	32 d0       	rcall	.+100    	; 0x5d0c <ldexp>
    5ca8:	0f 90       	pop	r0
    5caa:	07 fe       	sbrs	r0, 7
    5cac:	26 c0       	rjmp	.+76     	; 0x5cfa <inverse>
    5cae:	08 95       	ret

00005cb0 <__fp_powser>:
    5cb0:	df 93       	push	r29
    5cb2:	cf 93       	push	r28
    5cb4:	1f 93       	push	r17
    5cb6:	0f 93       	push	r16
    5cb8:	ff 92       	push	r15
    5cba:	ef 92       	push	r14
    5cbc:	df 92       	push	r13
    5cbe:	7b 01       	movw	r14, r22
    5cc0:	8c 01       	movw	r16, r24
    5cc2:	68 94       	set
    5cc4:	05 c0       	rjmp	.+10     	; 0x5cd0 <__fp_powser+0x20>
    5cc6:	da 2e       	mov	r13, r26
    5cc8:	ef 01       	movw	r28, r30
    5cca:	1e df       	rcall	.-452    	; 0x5b08 <__mulsf3x>
    5ccc:	fe 01       	movw	r30, r28
    5cce:	e8 94       	clt
    5cd0:	a5 91       	lpm	r26, Z+
    5cd2:	25 91       	lpm	r18, Z+
    5cd4:	35 91       	lpm	r19, Z+
    5cd6:	45 91       	lpm	r20, Z+
    5cd8:	55 91       	lpm	r21, Z+
    5cda:	ae f3       	brts	.-22     	; 0x5cc6 <__fp_powser+0x16>
    5cdc:	ef 01       	movw	r28, r30
    5cde:	28 dd       	rcall	.-1456   	; 0x5730 <__addsf3x>
    5ce0:	fe 01       	movw	r30, r28
    5ce2:	97 01       	movw	r18, r14
    5ce4:	a8 01       	movw	r20, r16
    5ce6:	da 94       	dec	r13
    5ce8:	79 f7       	brne	.-34     	; 0x5cc8 <__fp_powser+0x18>
    5cea:	df 90       	pop	r13
    5cec:	ef 90       	pop	r14
    5cee:	ff 90       	pop	r15
    5cf0:	0f 91       	pop	r16
    5cf2:	1f 91       	pop	r17
    5cf4:	cf 91       	pop	r28
    5cf6:	df 91       	pop	r29
    5cf8:	08 95       	ret

00005cfa <inverse>:
    5cfa:	9b 01       	movw	r18, r22
    5cfc:	ac 01       	movw	r20, r24
    5cfe:	60 e0       	ldi	r22, 0x00	; 0
    5d00:	70 e0       	ldi	r23, 0x00	; 0
    5d02:	80 e8       	ldi	r24, 0x80	; 128
    5d04:	9f e3       	ldi	r25, 0x3F	; 63
    5d06:	6b cd       	rjmp	.-1322   	; 0x57de <__divsf3>
    5d08:	64 ce       	rjmp	.-824    	; 0x59d2 <__fp_inf>
    5d0a:	ac c0       	rjmp	.+344    	; 0x5e64 <__fp_mpack>

00005d0c <ldexp>:
    5d0c:	92 de       	rcall	.-732    	; 0x5a32 <__fp_splitA>
    5d0e:	e8 f3       	brcs	.-6      	; 0x5d0a <inverse+0x10>
    5d10:	99 23       	and	r25, r25
    5d12:	d9 f3       	breq	.-10     	; 0x5d0a <inverse+0x10>
    5d14:	94 0f       	add	r25, r20
    5d16:	51 1d       	adc	r21, r1
    5d18:	bb f3       	brvs	.-18     	; 0x5d08 <inverse+0xe>
    5d1a:	91 50       	subi	r25, 0x01	; 1
    5d1c:	50 40       	sbci	r21, 0x00	; 0
    5d1e:	94 f0       	brlt	.+36     	; 0x5d44 <ldexp+0x38>
    5d20:	59 f0       	breq	.+22     	; 0x5d38 <ldexp+0x2c>
    5d22:	88 23       	and	r24, r24
    5d24:	32 f0       	brmi	.+12     	; 0x5d32 <ldexp+0x26>
    5d26:	66 0f       	add	r22, r22
    5d28:	77 1f       	adc	r23, r23
    5d2a:	88 1f       	adc	r24, r24
    5d2c:	91 50       	subi	r25, 0x01	; 1
    5d2e:	50 40       	sbci	r21, 0x00	; 0
    5d30:	c1 f7       	brne	.-16     	; 0x5d22 <ldexp+0x16>
    5d32:	9e 3f       	cpi	r25, 0xFE	; 254
    5d34:	51 05       	cpc	r21, r1
    5d36:	44 f7       	brge	.-48     	; 0x5d08 <inverse+0xe>
    5d38:	88 0f       	add	r24, r24
    5d3a:	91 1d       	adc	r25, r1
    5d3c:	96 95       	lsr	r25
    5d3e:	87 95       	ror	r24
    5d40:	97 f9       	bld	r25, 7
    5d42:	08 95       	ret
    5d44:	5f 3f       	cpi	r21, 0xFF	; 255
    5d46:	ac f0       	brlt	.+42     	; 0x5d72 <ldexp+0x66>
    5d48:	98 3e       	cpi	r25, 0xE8	; 232
    5d4a:	9c f0       	brlt	.+38     	; 0x5d72 <ldexp+0x66>
    5d4c:	bb 27       	eor	r27, r27
    5d4e:	86 95       	lsr	r24
    5d50:	77 95       	ror	r23
    5d52:	67 95       	ror	r22
    5d54:	b7 95       	ror	r27
    5d56:	08 f4       	brcc	.+2      	; 0x5d5a <ldexp+0x4e>
    5d58:	b1 60       	ori	r27, 0x01	; 1
    5d5a:	93 95       	inc	r25
    5d5c:	c1 f7       	brne	.-16     	; 0x5d4e <ldexp+0x42>
    5d5e:	bb 0f       	add	r27, r27
    5d60:	58 f7       	brcc	.-42     	; 0x5d38 <ldexp+0x2c>
    5d62:	11 f4       	brne	.+4      	; 0x5d68 <ldexp+0x5c>
    5d64:	60 ff       	sbrs	r22, 0
    5d66:	e8 cf       	rjmp	.-48     	; 0x5d38 <ldexp+0x2c>
    5d68:	6f 5f       	subi	r22, 0xFF	; 255
    5d6a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d6c:	8f 4f       	sbci	r24, 0xFF	; 255
    5d6e:	9f 4f       	sbci	r25, 0xFF	; 255
    5d70:	e3 cf       	rjmp	.-58     	; 0x5d38 <ldexp+0x2c>
    5d72:	7a ce       	rjmp	.-780    	; 0x5a68 <__fp_szero>
    5d74:	0e f0       	brts	.+2      	; 0x5d78 <ldexp+0x6c>
    5d76:	76 c0       	rjmp	.+236    	; 0x5e64 <__fp_mpack>
    5d78:	32 ce       	rjmp	.-924    	; 0x59de <__fp_nan>
    5d7a:	68 94       	set
    5d7c:	2a ce       	rjmp	.-940    	; 0x59d2 <__fp_inf>

00005d7e <log>:
    5d7e:	59 de       	rcall	.-846    	; 0x5a32 <__fp_splitA>
    5d80:	c8 f3       	brcs	.-14     	; 0x5d74 <ldexp+0x68>
    5d82:	99 23       	and	r25, r25
    5d84:	d1 f3       	breq	.-12     	; 0x5d7a <ldexp+0x6e>
    5d86:	c6 f3       	brts	.-16     	; 0x5d78 <ldexp+0x6c>
    5d88:	df 93       	push	r29
    5d8a:	cf 93       	push	r28
    5d8c:	1f 93       	push	r17
    5d8e:	0f 93       	push	r16
    5d90:	ff 92       	push	r15
    5d92:	c9 2f       	mov	r28, r25
    5d94:	dd 27       	eor	r29, r29
    5d96:	88 23       	and	r24, r24
    5d98:	2a f0       	brmi	.+10     	; 0x5da4 <log+0x26>
    5d9a:	21 97       	sbiw	r28, 0x01	; 1
    5d9c:	66 0f       	add	r22, r22
    5d9e:	77 1f       	adc	r23, r23
    5da0:	88 1f       	adc	r24, r24
    5da2:	da f7       	brpl	.-10     	; 0x5d9a <log+0x1c>
    5da4:	20 e0       	ldi	r18, 0x00	; 0
    5da6:	30 e0       	ldi	r19, 0x00	; 0
    5da8:	40 e8       	ldi	r20, 0x80	; 128
    5daa:	5f eb       	ldi	r21, 0xBF	; 191
    5dac:	9f e3       	ldi	r25, 0x3F	; 63
    5dae:	88 39       	cpi	r24, 0x98	; 152
    5db0:	20 f0       	brcs	.+8      	; 0x5dba <log+0x3c>
    5db2:	80 3e       	cpi	r24, 0xE0	; 224
    5db4:	30 f0       	brcs	.+12     	; 0x5dc2 <log+0x44>
    5db6:	21 96       	adiw	r28, 0x01	; 1
    5db8:	8f 77       	andi	r24, 0x7F	; 127
    5dba:	a9 dc       	rcall	.-1710   	; 0x570e <__addsf3>
    5dbc:	e0 ef       	ldi	r30, 0xF0	; 240
    5dbe:	f0 e0       	ldi	r31, 0x00	; 0
    5dc0:	03 c0       	rjmp	.+6      	; 0x5dc8 <log+0x4a>
    5dc2:	a5 dc       	rcall	.-1718   	; 0x570e <__addsf3>
    5dc4:	ed e1       	ldi	r30, 0x1D	; 29
    5dc6:	f1 e0       	ldi	r31, 0x01	; 1
    5dc8:	73 df       	rcall	.-282    	; 0x5cb0 <__fp_powser>
    5dca:	8b 01       	movw	r16, r22
    5dcc:	be 01       	movw	r22, r28
    5dce:	ec 01       	movw	r28, r24
    5dd0:	fb 2e       	mov	r15, r27
    5dd2:	6f 57       	subi	r22, 0x7F	; 127
    5dd4:	71 09       	sbc	r23, r1
    5dd6:	75 95       	asr	r23
    5dd8:	77 1f       	adc	r23, r23
    5dda:	88 0b       	sbc	r24, r24
    5ddc:	99 0b       	sbc	r25, r25
    5dde:	9a dd       	rcall	.-1228   	; 0x5914 <__floatsisf>
    5de0:	28 e1       	ldi	r18, 0x18	; 24
    5de2:	32 e7       	ldi	r19, 0x72	; 114
    5de4:	41 e3       	ldi	r20, 0x31	; 49
    5de6:	5f e3       	ldi	r21, 0x3F	; 63
    5de8:	8f de       	rcall	.-738    	; 0x5b08 <__mulsf3x>
    5dea:	af 2d       	mov	r26, r15
    5dec:	98 01       	movw	r18, r16
    5dee:	ae 01       	movw	r20, r28
    5df0:	ff 90       	pop	r15
    5df2:	0f 91       	pop	r16
    5df4:	1f 91       	pop	r17
    5df6:	cf 91       	pop	r28
    5df8:	df 91       	pop	r29
    5dfa:	9a dc       	rcall	.-1740   	; 0x5730 <__addsf3x>
    5dfc:	01 ce       	rjmp	.-1022   	; 0x5a00 <__fp_round>

00005dfe <modf>:
    5dfe:	fa 01       	movw	r30, r20
    5e00:	dc 01       	movw	r26, r24
    5e02:	aa 0f       	add	r26, r26
    5e04:	bb 1f       	adc	r27, r27
    5e06:	9b 01       	movw	r18, r22
    5e08:	ac 01       	movw	r20, r24
    5e0a:	bf 57       	subi	r27, 0x7F	; 127
    5e0c:	28 f4       	brcc	.+10     	; 0x5e18 <modf+0x1a>
    5e0e:	22 27       	eor	r18, r18
    5e10:	33 27       	eor	r19, r19
    5e12:	44 27       	eor	r20, r20
    5e14:	50 78       	andi	r21, 0x80	; 128
    5e16:	1f c0       	rjmp	.+62     	; 0x5e56 <modf+0x58>
    5e18:	b7 51       	subi	r27, 0x17	; 23
    5e1a:	88 f4       	brcc	.+34     	; 0x5e3e <modf+0x40>
    5e1c:	ab 2f       	mov	r26, r27
    5e1e:	00 24       	eor	r0, r0
    5e20:	46 95       	lsr	r20
    5e22:	37 95       	ror	r19
    5e24:	27 95       	ror	r18
    5e26:	01 1c       	adc	r0, r1
    5e28:	a3 95       	inc	r26
    5e2a:	d2 f3       	brmi	.-12     	; 0x5e20 <modf+0x22>
    5e2c:	00 20       	and	r0, r0
    5e2e:	69 f0       	breq	.+26     	; 0x5e4a <modf+0x4c>
    5e30:	22 0f       	add	r18, r18
    5e32:	33 1f       	adc	r19, r19
    5e34:	44 1f       	adc	r20, r20
    5e36:	b3 95       	inc	r27
    5e38:	da f3       	brmi	.-10     	; 0x5e30 <modf+0x32>
    5e3a:	0d d0       	rcall	.+26     	; 0x5e56 <modf+0x58>
    5e3c:	67 cc       	rjmp	.-1842   	; 0x570c <__subsf3>
    5e3e:	61 30       	cpi	r22, 0x01	; 1
    5e40:	71 05       	cpc	r23, r1
    5e42:	a0 e8       	ldi	r26, 0x80	; 128
    5e44:	8a 07       	cpc	r24, r26
    5e46:	b9 46       	sbci	r27, 0x69	; 105
    5e48:	30 f4       	brcc	.+12     	; 0x5e56 <modf+0x58>
    5e4a:	9b 01       	movw	r18, r22
    5e4c:	ac 01       	movw	r20, r24
    5e4e:	66 27       	eor	r22, r22
    5e50:	77 27       	eor	r23, r23
    5e52:	88 27       	eor	r24, r24
    5e54:	90 78       	andi	r25, 0x80	; 128
    5e56:	30 96       	adiw	r30, 0x00	; 0
    5e58:	21 f0       	breq	.+8      	; 0x5e62 <modf+0x64>
    5e5a:	20 83       	st	Z, r18
    5e5c:	31 83       	std	Z+1, r19	; 0x01
    5e5e:	42 83       	std	Z+2, r20	; 0x02
    5e60:	53 83       	std	Z+3, r21	; 0x03
    5e62:	08 95       	ret

00005e64 <__fp_mpack>:
    5e64:	9f 3f       	cpi	r25, 0xFF	; 255
    5e66:	31 f0       	breq	.+12     	; 0x5e74 <__fp_mpack_finite+0xc>

00005e68 <__fp_mpack_finite>:
    5e68:	91 50       	subi	r25, 0x01	; 1
    5e6a:	20 f4       	brcc	.+8      	; 0x5e74 <__fp_mpack_finite+0xc>
    5e6c:	87 95       	ror	r24
    5e6e:	77 95       	ror	r23
    5e70:	67 95       	ror	r22
    5e72:	b7 95       	ror	r27
    5e74:	88 0f       	add	r24, r24
    5e76:	91 1d       	adc	r25, r1
    5e78:	96 95       	lsr	r25
    5e7a:	87 95       	ror	r24
    5e7c:	97 f9       	bld	r25, 7
    5e7e:	08 95       	ret

00005e80 <vfprintf>:
    5e80:	a1 e1       	ldi	r26, 0x11	; 17
    5e82:	b0 e0       	ldi	r27, 0x00	; 0
    5e84:	e5 e4       	ldi	r30, 0x45	; 69
    5e86:	ff e2       	ldi	r31, 0x2F	; 47
    5e88:	b7 c3       	rjmp	.+1902   	; 0x65f8 <__prologue_saves__>
    5e8a:	3c 01       	movw	r6, r24
    5e8c:	7f 87       	std	Y+15, r23	; 0x0f
    5e8e:	6e 87       	std	Y+14, r22	; 0x0e
    5e90:	6a 01       	movw	r12, r20
    5e92:	fc 01       	movw	r30, r24
    5e94:	17 82       	std	Z+7, r1	; 0x07
    5e96:	16 82       	std	Z+6, r1	; 0x06
    5e98:	83 81       	ldd	r24, Z+3	; 0x03
    5e9a:	81 fd       	sbrc	r24, 1
    5e9c:	03 c0       	rjmp	.+6      	; 0x5ea4 <vfprintf+0x24>
    5e9e:	6f ef       	ldi	r22, 0xFF	; 255
    5ea0:	7f ef       	ldi	r23, 0xFF	; 255
    5ea2:	52 c3       	rjmp	.+1700   	; 0x6548 <vfprintf+0x6c8>
    5ea4:	9e 01       	movw	r18, r28
    5ea6:	2f 5f       	subi	r18, 0xFF	; 255
    5ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    5eaa:	39 8b       	std	Y+17, r19	; 0x11
    5eac:	28 8b       	std	Y+16, r18	; 0x10
    5eae:	f3 01       	movw	r30, r6
    5eb0:	23 81       	ldd	r18, Z+3	; 0x03
    5eb2:	ee 85       	ldd	r30, Y+14	; 0x0e
    5eb4:	ff 85       	ldd	r31, Y+15	; 0x0f
    5eb6:	23 fd       	sbrc	r18, 3
    5eb8:	85 91       	lpm	r24, Z+
    5eba:	23 ff       	sbrs	r18, 3
    5ebc:	81 91       	ld	r24, Z+
    5ebe:	ff 87       	std	Y+15, r31	; 0x0f
    5ec0:	ee 87       	std	Y+14, r30	; 0x0e
    5ec2:	88 23       	and	r24, r24
    5ec4:	09 f4       	brne	.+2      	; 0x5ec8 <vfprintf+0x48>
    5ec6:	3d c3       	rjmp	.+1658   	; 0x6542 <vfprintf+0x6c2>
    5ec8:	85 32       	cpi	r24, 0x25	; 37
    5eca:	51 f4       	brne	.+20     	; 0x5ee0 <vfprintf+0x60>
    5ecc:	ee 85       	ldd	r30, Y+14	; 0x0e
    5ece:	ff 85       	ldd	r31, Y+15	; 0x0f
    5ed0:	23 fd       	sbrc	r18, 3
    5ed2:	85 91       	lpm	r24, Z+
    5ed4:	23 ff       	sbrs	r18, 3
    5ed6:	81 91       	ld	r24, Z+
    5ed8:	ff 87       	std	Y+15, r31	; 0x0f
    5eda:	ee 87       	std	Y+14, r30	; 0x0e
    5edc:	85 32       	cpi	r24, 0x25	; 37
    5ede:	21 f4       	brne	.+8      	; 0x5ee8 <vfprintf+0x68>
    5ee0:	90 e0       	ldi	r25, 0x00	; 0
    5ee2:	b3 01       	movw	r22, r6
    5ee4:	20 d6       	rcall	.+3136   	; 0x6b26 <fputc>
    5ee6:	e3 cf       	rjmp	.-58     	; 0x5eae <vfprintf+0x2e>
    5ee8:	98 2f       	mov	r25, r24
    5eea:	10 e0       	ldi	r17, 0x00	; 0
    5eec:	88 24       	eor	r8, r8
    5eee:	99 24       	eor	r9, r9
    5ef0:	10 32       	cpi	r17, 0x20	; 32
    5ef2:	b0 f4       	brcc	.+44     	; 0x5f20 <vfprintf+0xa0>
    5ef4:	9b 32       	cpi	r25, 0x2B	; 43
    5ef6:	69 f0       	breq	.+26     	; 0x5f12 <vfprintf+0x92>
    5ef8:	9c 32       	cpi	r25, 0x2C	; 44
    5efa:	28 f4       	brcc	.+10     	; 0x5f06 <vfprintf+0x86>
    5efc:	90 32       	cpi	r25, 0x20	; 32
    5efe:	51 f0       	breq	.+20     	; 0x5f14 <vfprintf+0x94>
    5f00:	93 32       	cpi	r25, 0x23	; 35
    5f02:	71 f4       	brne	.+28     	; 0x5f20 <vfprintf+0xa0>
    5f04:	0b c0       	rjmp	.+22     	; 0x5f1c <vfprintf+0x9c>
    5f06:	9d 32       	cpi	r25, 0x2D	; 45
    5f08:	39 f0       	breq	.+14     	; 0x5f18 <vfprintf+0x98>
    5f0a:	90 33       	cpi	r25, 0x30	; 48
    5f0c:	49 f4       	brne	.+18     	; 0x5f20 <vfprintf+0xa0>
    5f0e:	11 60       	ori	r17, 0x01	; 1
    5f10:	28 c0       	rjmp	.+80     	; 0x5f62 <vfprintf+0xe2>
    5f12:	12 60       	ori	r17, 0x02	; 2
    5f14:	14 60       	ori	r17, 0x04	; 4
    5f16:	25 c0       	rjmp	.+74     	; 0x5f62 <vfprintf+0xe2>
    5f18:	18 60       	ori	r17, 0x08	; 8
    5f1a:	23 c0       	rjmp	.+70     	; 0x5f62 <vfprintf+0xe2>
    5f1c:	10 61       	ori	r17, 0x10	; 16
    5f1e:	21 c0       	rjmp	.+66     	; 0x5f62 <vfprintf+0xe2>
    5f20:	17 fd       	sbrc	r17, 7
    5f22:	2a c0       	rjmp	.+84     	; 0x5f78 <vfprintf+0xf8>
    5f24:	89 2f       	mov	r24, r25
    5f26:	80 53       	subi	r24, 0x30	; 48
    5f28:	8a 30       	cpi	r24, 0x0A	; 10
    5f2a:	78 f4       	brcc	.+30     	; 0x5f4a <vfprintf+0xca>
    5f2c:	16 ff       	sbrs	r17, 6
    5f2e:	06 c0       	rjmp	.+12     	; 0x5f3c <vfprintf+0xbc>
    5f30:	fa e0       	ldi	r31, 0x0A	; 10
    5f32:	9f 9e       	mul	r9, r31
    5f34:	90 2c       	mov	r9, r0
    5f36:	11 24       	eor	r1, r1
    5f38:	98 0e       	add	r9, r24
    5f3a:	13 c0       	rjmp	.+38     	; 0x5f62 <vfprintf+0xe2>
    5f3c:	3a e0       	ldi	r19, 0x0A	; 10
    5f3e:	83 9e       	mul	r8, r19
    5f40:	80 2c       	mov	r8, r0
    5f42:	11 24       	eor	r1, r1
    5f44:	88 0e       	add	r8, r24
    5f46:	10 62       	ori	r17, 0x20	; 32
    5f48:	0c c0       	rjmp	.+24     	; 0x5f62 <vfprintf+0xe2>
    5f4a:	9e 32       	cpi	r25, 0x2E	; 46
    5f4c:	21 f4       	brne	.+8      	; 0x5f56 <vfprintf+0xd6>
    5f4e:	16 fd       	sbrc	r17, 6
    5f50:	f8 c2       	rjmp	.+1520   	; 0x6542 <vfprintf+0x6c2>
    5f52:	10 64       	ori	r17, 0x40	; 64
    5f54:	06 c0       	rjmp	.+12     	; 0x5f62 <vfprintf+0xe2>
    5f56:	9c 36       	cpi	r25, 0x6C	; 108
    5f58:	11 f4       	brne	.+4      	; 0x5f5e <vfprintf+0xde>
    5f5a:	10 68       	ori	r17, 0x80	; 128
    5f5c:	02 c0       	rjmp	.+4      	; 0x5f62 <vfprintf+0xe2>
    5f5e:	98 36       	cpi	r25, 0x68	; 104
    5f60:	59 f4       	brne	.+22     	; 0x5f78 <vfprintf+0xf8>
    5f62:	ee 85       	ldd	r30, Y+14	; 0x0e
    5f64:	ff 85       	ldd	r31, Y+15	; 0x0f
    5f66:	23 fd       	sbrc	r18, 3
    5f68:	95 91       	lpm	r25, Z+
    5f6a:	23 ff       	sbrs	r18, 3
    5f6c:	91 91       	ld	r25, Z+
    5f6e:	ff 87       	std	Y+15, r31	; 0x0f
    5f70:	ee 87       	std	Y+14, r30	; 0x0e
    5f72:	99 23       	and	r25, r25
    5f74:	09 f0       	breq	.+2      	; 0x5f78 <vfprintf+0xf8>
    5f76:	bc cf       	rjmp	.-136    	; 0x5ef0 <vfprintf+0x70>
    5f78:	89 2f       	mov	r24, r25
    5f7a:	85 54       	subi	r24, 0x45	; 69
    5f7c:	83 30       	cpi	r24, 0x03	; 3
    5f7e:	20 f4       	brcc	.+8      	; 0x5f88 <vfprintf+0x108>
    5f80:	81 2f       	mov	r24, r17
    5f82:	80 61       	ori	r24, 0x10	; 16
    5f84:	90 5e       	subi	r25, 0xE0	; 224
    5f86:	07 c0       	rjmp	.+14     	; 0x5f96 <vfprintf+0x116>
    5f88:	89 2f       	mov	r24, r25
    5f8a:	85 56       	subi	r24, 0x65	; 101
    5f8c:	83 30       	cpi	r24, 0x03	; 3
    5f8e:	08 f0       	brcs	.+2      	; 0x5f92 <vfprintf+0x112>
    5f90:	8f c1       	rjmp	.+798    	; 0x62b0 <vfprintf+0x430>
    5f92:	81 2f       	mov	r24, r17
    5f94:	8f 7e       	andi	r24, 0xEF	; 239
    5f96:	86 fd       	sbrc	r24, 6
    5f98:	02 c0       	rjmp	.+4      	; 0x5f9e <vfprintf+0x11e>
    5f9a:	76 e0       	ldi	r23, 0x06	; 6
    5f9c:	97 2e       	mov	r9, r23
    5f9e:	6f e3       	ldi	r22, 0x3F	; 63
    5fa0:	f6 2e       	mov	r15, r22
    5fa2:	f8 22       	and	r15, r24
    5fa4:	95 36       	cpi	r25, 0x65	; 101
    5fa6:	19 f4       	brne	.+6      	; 0x5fae <vfprintf+0x12e>
    5fa8:	f0 e4       	ldi	r31, 0x40	; 64
    5faa:	ff 2a       	or	r15, r31
    5fac:	07 c0       	rjmp	.+14     	; 0x5fbc <vfprintf+0x13c>
    5fae:	96 36       	cpi	r25, 0x66	; 102
    5fb0:	19 f4       	brne	.+6      	; 0x5fb8 <vfprintf+0x138>
    5fb2:	20 e8       	ldi	r18, 0x80	; 128
    5fb4:	f2 2a       	or	r15, r18
    5fb6:	02 c0       	rjmp	.+4      	; 0x5fbc <vfprintf+0x13c>
    5fb8:	91 10       	cpse	r9, r1
    5fba:	9a 94       	dec	r9
    5fbc:	f7 fe       	sbrs	r15, 7
    5fbe:	0a c0       	rjmp	.+20     	; 0x5fd4 <vfprintf+0x154>
    5fc0:	3b e3       	ldi	r19, 0x3B	; 59
    5fc2:	39 15       	cp	r19, r9
    5fc4:	18 f4       	brcc	.+6      	; 0x5fcc <vfprintf+0x14c>
    5fc6:	5c e3       	ldi	r21, 0x3C	; 60
    5fc8:	b5 2e       	mov	r11, r21
    5fca:	02 c0       	rjmp	.+4      	; 0x5fd0 <vfprintf+0x150>
    5fcc:	b9 2c       	mov	r11, r9
    5fce:	b3 94       	inc	r11
    5fd0:	27 e0       	ldi	r18, 0x07	; 7
    5fd2:	09 c0       	rjmp	.+18     	; 0x5fe6 <vfprintf+0x166>
    5fd4:	47 e0       	ldi	r20, 0x07	; 7
    5fd6:	49 15       	cp	r20, r9
    5fd8:	20 f4       	brcc	.+8      	; 0x5fe2 <vfprintf+0x162>
    5fda:	bb 24       	eor	r11, r11
    5fdc:	47 e0       	ldi	r20, 0x07	; 7
    5fde:	94 2e       	mov	r9, r20
    5fe0:	f7 cf       	rjmp	.-18     	; 0x5fd0 <vfprintf+0x150>
    5fe2:	29 2d       	mov	r18, r9
    5fe4:	bb 24       	eor	r11, r11
    5fe6:	c6 01       	movw	r24, r12
    5fe8:	04 96       	adiw	r24, 0x04	; 4
    5fea:	9d 87       	std	Y+13, r25	; 0x0d
    5fec:	8c 87       	std	Y+12, r24	; 0x0c
    5fee:	f6 01       	movw	r30, r12
    5ff0:	60 81       	ld	r22, Z
    5ff2:	71 81       	ldd	r23, Z+1	; 0x01
    5ff4:	82 81       	ldd	r24, Z+2	; 0x02
    5ff6:	93 81       	ldd	r25, Z+3	; 0x03
    5ff8:	ae 01       	movw	r20, r28
    5ffa:	4f 5f       	subi	r20, 0xFF	; 255
    5ffc:	5f 4f       	sbci	r21, 0xFF	; 255
    5ffe:	0b 2d       	mov	r16, r11
    6000:	a4 d4       	rcall	.+2376   	; 0x694a <__ftoa_engine>
    6002:	6c 01       	movw	r12, r24
    6004:	09 81       	ldd	r16, Y+1	; 0x01
    6006:	20 2e       	mov	r2, r16
    6008:	33 24       	eor	r3, r3
    600a:	00 ff       	sbrs	r16, 0
    600c:	04 c0       	rjmp	.+8      	; 0x6016 <vfprintf+0x196>
    600e:	03 fd       	sbrc	r16, 3
    6010:	02 c0       	rjmp	.+4      	; 0x6016 <vfprintf+0x196>
    6012:	1d e2       	ldi	r17, 0x2D	; 45
    6014:	09 c0       	rjmp	.+18     	; 0x6028 <vfprintf+0x1a8>
    6016:	f1 fe       	sbrs	r15, 1
    6018:	02 c0       	rjmp	.+4      	; 0x601e <vfprintf+0x19e>
    601a:	1b e2       	ldi	r17, 0x2B	; 43
    601c:	05 c0       	rjmp	.+10     	; 0x6028 <vfprintf+0x1a8>
    601e:	f2 fc       	sbrc	r15, 2
    6020:	02 c0       	rjmp	.+4      	; 0x6026 <vfprintf+0x1a6>
    6022:	10 e0       	ldi	r17, 0x00	; 0
    6024:	01 c0       	rjmp	.+2      	; 0x6028 <vfprintf+0x1a8>
    6026:	10 e2       	ldi	r17, 0x20	; 32
    6028:	c1 01       	movw	r24, r2
    602a:	8c 70       	andi	r24, 0x0C	; 12
    602c:	90 70       	andi	r25, 0x00	; 0
    602e:	89 2b       	or	r24, r25
    6030:	a1 f1       	breq	.+104    	; 0x609a <vfprintf+0x21a>
    6032:	11 23       	and	r17, r17
    6034:	11 f4       	brne	.+4      	; 0x603a <vfprintf+0x1ba>
    6036:	83 e0       	ldi	r24, 0x03	; 3
    6038:	01 c0       	rjmp	.+2      	; 0x603c <vfprintf+0x1bc>
    603a:	84 e0       	ldi	r24, 0x04	; 4
    603c:	88 15       	cp	r24, r8
    603e:	10 f0       	brcs	.+4      	; 0x6044 <vfprintf+0x1c4>
    6040:	88 24       	eor	r8, r8
    6042:	09 c0       	rjmp	.+18     	; 0x6056 <vfprintf+0x1d6>
    6044:	88 1a       	sub	r8, r24
    6046:	f3 fc       	sbrc	r15, 3
    6048:	06 c0       	rjmp	.+12     	; 0x6056 <vfprintf+0x1d6>
    604a:	80 e2       	ldi	r24, 0x20	; 32
    604c:	90 e0       	ldi	r25, 0x00	; 0
    604e:	b3 01       	movw	r22, r6
    6050:	6a d5       	rcall	.+2772   	; 0x6b26 <fputc>
    6052:	8a 94       	dec	r8
    6054:	d1 f7       	brne	.-12     	; 0x604a <vfprintf+0x1ca>
    6056:	11 23       	and	r17, r17
    6058:	21 f0       	breq	.+8      	; 0x6062 <vfprintf+0x1e2>
    605a:	81 2f       	mov	r24, r17
    605c:	90 e0       	ldi	r25, 0x00	; 0
    605e:	b3 01       	movw	r22, r6
    6060:	62 d5       	rcall	.+2756   	; 0x6b26 <fputc>
    6062:	23 fe       	sbrs	r2, 3
    6064:	03 c0       	rjmp	.+6      	; 0x606c <vfprintf+0x1ec>
    6066:	0f e5       	ldi	r16, 0x5F	; 95
    6068:	15 e0       	ldi	r17, 0x05	; 5
    606a:	0d c0       	rjmp	.+26     	; 0x6086 <vfprintf+0x206>
    606c:	03 e6       	ldi	r16, 0x63	; 99
    606e:	15 e0       	ldi	r17, 0x05	; 5
    6070:	0a c0       	rjmp	.+20     	; 0x6086 <vfprintf+0x206>
    6072:	e1 14       	cp	r14, r1
    6074:	f1 04       	cpc	r15, r1
    6076:	09 f0       	breq	.+2      	; 0x607a <vfprintf+0x1fa>
    6078:	80 52       	subi	r24, 0x20	; 32
    607a:	90 e0       	ldi	r25, 0x00	; 0
    607c:	b3 01       	movw	r22, r6
    607e:	53 d5       	rcall	.+2726   	; 0x6b26 <fputc>
    6080:	0f 5f       	subi	r16, 0xFF	; 255
    6082:	1f 4f       	sbci	r17, 0xFF	; 255
    6084:	05 c0       	rjmp	.+10     	; 0x6090 <vfprintf+0x210>
    6086:	ef 2c       	mov	r14, r15
    6088:	ff 24       	eor	r15, r15
    608a:	f0 e1       	ldi	r31, 0x10	; 16
    608c:	ef 22       	and	r14, r31
    608e:	ff 24       	eor	r15, r15
    6090:	f8 01       	movw	r30, r16
    6092:	84 91       	lpm	r24, Z+
    6094:	88 23       	and	r24, r24
    6096:	69 f7       	brne	.-38     	; 0x6072 <vfprintf+0x1f2>
    6098:	08 c1       	rjmp	.+528    	; 0x62aa <vfprintf+0x42a>
    609a:	f7 fe       	sbrs	r15, 7
    609c:	12 c0       	rjmp	.+36     	; 0x60c2 <vfprintf+0x242>
    609e:	bc 0c       	add	r11, r12
    60a0:	24 fe       	sbrs	r2, 4
    60a2:	04 c0       	rjmp	.+8      	; 0x60ac <vfprintf+0x22c>
    60a4:	8a 81       	ldd	r24, Y+2	; 0x02
    60a6:	81 33       	cpi	r24, 0x31	; 49
    60a8:	09 f4       	brne	.+2      	; 0x60ac <vfprintf+0x22c>
    60aa:	ba 94       	dec	r11
    60ac:	1b 14       	cp	r1, r11
    60ae:	1c f0       	brlt	.+6      	; 0x60b6 <vfprintf+0x236>
    60b0:	bb 24       	eor	r11, r11
    60b2:	b3 94       	inc	r11
    60b4:	2d c0       	rjmp	.+90     	; 0x6110 <vfprintf+0x290>
    60b6:	f8 e0       	ldi	r31, 0x08	; 8
    60b8:	fb 15       	cp	r31, r11
    60ba:	50 f5       	brcc	.+84     	; 0x6110 <vfprintf+0x290>
    60bc:	38 e0       	ldi	r19, 0x08	; 8
    60be:	b3 2e       	mov	r11, r19
    60c0:	27 c0       	rjmp	.+78     	; 0x6110 <vfprintf+0x290>
    60c2:	f6 fc       	sbrc	r15, 6
    60c4:	25 c0       	rjmp	.+74     	; 0x6110 <vfprintf+0x290>
    60c6:	89 2d       	mov	r24, r9
    60c8:	90 e0       	ldi	r25, 0x00	; 0
    60ca:	8c 15       	cp	r24, r12
    60cc:	9d 05       	cpc	r25, r13
    60ce:	4c f0       	brlt	.+18     	; 0x60e2 <vfprintf+0x262>
    60d0:	2c ef       	ldi	r18, 0xFC	; 252
    60d2:	c2 16       	cp	r12, r18
    60d4:	2f ef       	ldi	r18, 0xFF	; 255
    60d6:	d2 06       	cpc	r13, r18
    60d8:	24 f0       	brlt	.+8      	; 0x60e2 <vfprintf+0x262>
    60da:	30 e8       	ldi	r19, 0x80	; 128
    60dc:	f3 2a       	or	r15, r19
    60de:	01 c0       	rjmp	.+2      	; 0x60e2 <vfprintf+0x262>
    60e0:	9a 94       	dec	r9
    60e2:	99 20       	and	r9, r9
    60e4:	49 f0       	breq	.+18     	; 0x60f8 <vfprintf+0x278>
    60e6:	e2 e0       	ldi	r30, 0x02	; 2
    60e8:	f0 e0       	ldi	r31, 0x00	; 0
    60ea:	ec 0f       	add	r30, r28
    60ec:	fd 1f       	adc	r31, r29
    60ee:	e9 0d       	add	r30, r9
    60f0:	f1 1d       	adc	r31, r1
    60f2:	80 81       	ld	r24, Z
    60f4:	80 33       	cpi	r24, 0x30	; 48
    60f6:	a1 f3       	breq	.-24     	; 0x60e0 <vfprintf+0x260>
    60f8:	f7 fe       	sbrs	r15, 7
    60fa:	0a c0       	rjmp	.+20     	; 0x6110 <vfprintf+0x290>
    60fc:	b9 2c       	mov	r11, r9
    60fe:	b3 94       	inc	r11
    6100:	89 2d       	mov	r24, r9
    6102:	90 e0       	ldi	r25, 0x00	; 0
    6104:	c8 16       	cp	r12, r24
    6106:	d9 06       	cpc	r13, r25
    6108:	14 f0       	brlt	.+4      	; 0x610e <vfprintf+0x28e>
    610a:	99 24       	eor	r9, r9
    610c:	01 c0       	rjmp	.+2      	; 0x6110 <vfprintf+0x290>
    610e:	9c 18       	sub	r9, r12
    6110:	f7 fc       	sbrc	r15, 7
    6112:	03 c0       	rjmp	.+6      	; 0x611a <vfprintf+0x29a>
    6114:	25 e0       	ldi	r18, 0x05	; 5
    6116:	30 e0       	ldi	r19, 0x00	; 0
    6118:	09 c0       	rjmp	.+18     	; 0x612c <vfprintf+0x2ac>
    611a:	1c 14       	cp	r1, r12
    611c:	1d 04       	cpc	r1, r13
    611e:	1c f0       	brlt	.+6      	; 0x6126 <vfprintf+0x2a6>
    6120:	21 e0       	ldi	r18, 0x01	; 1
    6122:	30 e0       	ldi	r19, 0x00	; 0
    6124:	03 c0       	rjmp	.+6      	; 0x612c <vfprintf+0x2ac>
    6126:	96 01       	movw	r18, r12
    6128:	2f 5f       	subi	r18, 0xFF	; 255
    612a:	3f 4f       	sbci	r19, 0xFF	; 255
    612c:	11 23       	and	r17, r17
    612e:	11 f0       	breq	.+4      	; 0x6134 <vfprintf+0x2b4>
    6130:	2f 5f       	subi	r18, 0xFF	; 255
    6132:	3f 4f       	sbci	r19, 0xFF	; 255
    6134:	99 20       	and	r9, r9
    6136:	29 f0       	breq	.+10     	; 0x6142 <vfprintf+0x2c2>
    6138:	89 2d       	mov	r24, r9
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	01 96       	adiw	r24, 0x01	; 1
    613e:	28 0f       	add	r18, r24
    6140:	39 1f       	adc	r19, r25
    6142:	88 2d       	mov	r24, r8
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	28 17       	cp	r18, r24
    6148:	39 07       	cpc	r19, r25
    614a:	14 f0       	brlt	.+4      	; 0x6150 <vfprintf+0x2d0>
    614c:	88 24       	eor	r8, r8
    614e:	01 c0       	rjmp	.+2      	; 0x6152 <vfprintf+0x2d2>
    6150:	82 1a       	sub	r8, r18
    6152:	4f 2c       	mov	r4, r15
    6154:	55 24       	eor	r5, r5
    6156:	c2 01       	movw	r24, r4
    6158:	89 70       	andi	r24, 0x09	; 9
    615a:	90 70       	andi	r25, 0x00	; 0
    615c:	89 2b       	or	r24, r25
    615e:	31 f0       	breq	.+12     	; 0x616c <vfprintf+0x2ec>
    6160:	07 c0       	rjmp	.+14     	; 0x6170 <vfprintf+0x2f0>
    6162:	80 e2       	ldi	r24, 0x20	; 32
    6164:	90 e0       	ldi	r25, 0x00	; 0
    6166:	b3 01       	movw	r22, r6
    6168:	de d4       	rcall	.+2492   	; 0x6b26 <fputc>
    616a:	8a 94       	dec	r8
    616c:	88 20       	and	r8, r8
    616e:	c9 f7       	brne	.-14     	; 0x6162 <vfprintf+0x2e2>
    6170:	11 23       	and	r17, r17
    6172:	21 f0       	breq	.+8      	; 0x617c <vfprintf+0x2fc>
    6174:	81 2f       	mov	r24, r17
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	b3 01       	movw	r22, r6
    617a:	d5 d4       	rcall	.+2474   	; 0x6b26 <fputc>
    617c:	43 fe       	sbrs	r4, 3
    617e:	06 c0       	rjmp	.+12     	; 0x618c <vfprintf+0x30c>
    6180:	07 c0       	rjmp	.+14     	; 0x6190 <vfprintf+0x310>
    6182:	80 e3       	ldi	r24, 0x30	; 48
    6184:	90 e0       	ldi	r25, 0x00	; 0
    6186:	b3 01       	movw	r22, r6
    6188:	ce d4       	rcall	.+2460   	; 0x6b26 <fputc>
    618a:	8a 94       	dec	r8
    618c:	88 20       	and	r8, r8
    618e:	c9 f7       	brne	.-14     	; 0x6182 <vfprintf+0x302>
    6190:	f7 fe       	sbrs	r15, 7
    6192:	44 c0       	rjmp	.+136    	; 0x621c <vfprintf+0x39c>
    6194:	86 01       	movw	r16, r12
    6196:	d7 fe       	sbrs	r13, 7
    6198:	02 c0       	rjmp	.+4      	; 0x619e <vfprintf+0x31e>
    619a:	00 e0       	ldi	r16, 0x00	; 0
    619c:	10 e0       	ldi	r17, 0x00	; 0
    619e:	76 01       	movw	r14, r12
    61a0:	08 94       	sec
    61a2:	e1 1c       	adc	r14, r1
    61a4:	f1 1c       	adc	r15, r1
    61a6:	e0 1a       	sub	r14, r16
    61a8:	f1 0a       	sbc	r15, r17
    61aa:	41 e0       	ldi	r20, 0x01	; 1
    61ac:	50 e0       	ldi	r21, 0x00	; 0
    61ae:	4c 0f       	add	r20, r28
    61b0:	5d 1f       	adc	r21, r29
    61b2:	e4 0e       	add	r14, r20
    61b4:	f5 1e       	adc	r15, r21
    61b6:	26 01       	movw	r4, r12
    61b8:	4b 18       	sub	r4, r11
    61ba:	51 08       	sbc	r5, r1
    61bc:	89 2d       	mov	r24, r9
    61be:	90 e0       	ldi	r25, 0x00	; 0
    61c0:	aa 24       	eor	r10, r10
    61c2:	bb 24       	eor	r11, r11
    61c4:	a8 1a       	sub	r10, r24
    61c6:	b9 0a       	sbc	r11, r25
    61c8:	5f ef       	ldi	r21, 0xFF	; 255
    61ca:	0f 3f       	cpi	r16, 0xFF	; 255
    61cc:	15 07       	cpc	r17, r21
    61ce:	21 f4       	brne	.+8      	; 0x61d8 <vfprintf+0x358>
    61d0:	8e e2       	ldi	r24, 0x2E	; 46
    61d2:	90 e0       	ldi	r25, 0x00	; 0
    61d4:	b3 01       	movw	r22, r6
    61d6:	a7 d4       	rcall	.+2382   	; 0x6b26 <fputc>
    61d8:	c0 16       	cp	r12, r16
    61da:	d1 06       	cpc	r13, r17
    61dc:	34 f0       	brlt	.+12     	; 0x61ea <vfprintf+0x36a>
    61de:	40 16       	cp	r4, r16
    61e0:	51 06       	cpc	r5, r17
    61e2:	1c f4       	brge	.+6      	; 0x61ea <vfprintf+0x36a>
    61e4:	f7 01       	movw	r30, r14
    61e6:	80 81       	ld	r24, Z
    61e8:	01 c0       	rjmp	.+2      	; 0x61ec <vfprintf+0x36c>
    61ea:	80 e3       	ldi	r24, 0x30	; 48
    61ec:	01 50       	subi	r16, 0x01	; 1
    61ee:	10 40       	sbci	r17, 0x00	; 0
    61f0:	08 94       	sec
    61f2:	e1 1c       	adc	r14, r1
    61f4:	f1 1c       	adc	r15, r1
    61f6:	0a 15       	cp	r16, r10
    61f8:	1b 05       	cpc	r17, r11
    61fa:	24 f0       	brlt	.+8      	; 0x6204 <vfprintf+0x384>
    61fc:	90 e0       	ldi	r25, 0x00	; 0
    61fe:	b3 01       	movw	r22, r6
    6200:	92 d4       	rcall	.+2340   	; 0x6b26 <fputc>
    6202:	e2 cf       	rjmp	.-60     	; 0x61c8 <vfprintf+0x348>
    6204:	0c 15       	cp	r16, r12
    6206:	1d 05       	cpc	r17, r13
    6208:	39 f4       	brne	.+14     	; 0x6218 <vfprintf+0x398>
    620a:	9a 81       	ldd	r25, Y+2	; 0x02
    620c:	96 33       	cpi	r25, 0x36	; 54
    620e:	18 f4       	brcc	.+6      	; 0x6216 <vfprintf+0x396>
    6210:	95 33       	cpi	r25, 0x35	; 53
    6212:	11 f4       	brne	.+4      	; 0x6218 <vfprintf+0x398>
    6214:	24 fe       	sbrs	r2, 4
    6216:	81 e3       	ldi	r24, 0x31	; 49
    6218:	90 e0       	ldi	r25, 0x00	; 0
    621a:	45 c0       	rjmp	.+138    	; 0x62a6 <vfprintf+0x426>
    621c:	8a 81       	ldd	r24, Y+2	; 0x02
    621e:	81 33       	cpi	r24, 0x31	; 49
    6220:	09 f0       	breq	.+2      	; 0x6224 <vfprintf+0x3a4>
    6222:	0f 7e       	andi	r16, 0xEF	; 239
    6224:	90 e0       	ldi	r25, 0x00	; 0
    6226:	b3 01       	movw	r22, r6
    6228:	7e d4       	rcall	.+2300   	; 0x6b26 <fputc>
    622a:	99 20       	and	r9, r9
    622c:	91 f0       	breq	.+36     	; 0x6252 <vfprintf+0x3d2>
    622e:	8e e2       	ldi	r24, 0x2E	; 46
    6230:	90 e0       	ldi	r25, 0x00	; 0
    6232:	b3 01       	movw	r22, r6
    6234:	78 d4       	rcall	.+2288   	; 0x6b26 <fputc>
    6236:	12 e0       	ldi	r17, 0x02	; 2
    6238:	e1 e0       	ldi	r30, 0x01	; 1
    623a:	f0 e0       	ldi	r31, 0x00	; 0
    623c:	ec 0f       	add	r30, r28
    623e:	fd 1f       	adc	r31, r29
    6240:	e1 0f       	add	r30, r17
    6242:	f1 1d       	adc	r31, r1
    6244:	1f 5f       	subi	r17, 0xFF	; 255
    6246:	80 81       	ld	r24, Z
    6248:	90 e0       	ldi	r25, 0x00	; 0
    624a:	b3 01       	movw	r22, r6
    624c:	6c d4       	rcall	.+2264   	; 0x6b26 <fputc>
    624e:	9a 94       	dec	r9
    6250:	99 f7       	brne	.-26     	; 0x6238 <vfprintf+0x3b8>
    6252:	44 fc       	sbrc	r4, 4
    6254:	03 c0       	rjmp	.+6      	; 0x625c <vfprintf+0x3dc>
    6256:	85 e6       	ldi	r24, 0x65	; 101
    6258:	90 e0       	ldi	r25, 0x00	; 0
    625a:	02 c0       	rjmp	.+4      	; 0x6260 <vfprintf+0x3e0>
    625c:	85 e4       	ldi	r24, 0x45	; 69
    625e:	90 e0       	ldi	r25, 0x00	; 0
    6260:	b3 01       	movw	r22, r6
    6262:	61 d4       	rcall	.+2242   	; 0x6b26 <fputc>
    6264:	d7 fc       	sbrc	r13, 7
    6266:	05 c0       	rjmp	.+10     	; 0x6272 <vfprintf+0x3f2>
    6268:	c1 14       	cp	r12, r1
    626a:	d1 04       	cpc	r13, r1
    626c:	41 f4       	brne	.+16     	; 0x627e <vfprintf+0x3fe>
    626e:	04 ff       	sbrs	r16, 4
    6270:	06 c0       	rjmp	.+12     	; 0x627e <vfprintf+0x3fe>
    6272:	d0 94       	com	r13
    6274:	c1 94       	neg	r12
    6276:	d1 08       	sbc	r13, r1
    6278:	d3 94       	inc	r13
    627a:	8d e2       	ldi	r24, 0x2D	; 45
    627c:	01 c0       	rjmp	.+2      	; 0x6280 <vfprintf+0x400>
    627e:	8b e2       	ldi	r24, 0x2B	; 43
    6280:	90 e0       	ldi	r25, 0x00	; 0
    6282:	b3 01       	movw	r22, r6
    6284:	50 d4       	rcall	.+2208   	; 0x6b26 <fputc>
    6286:	80 e3       	ldi	r24, 0x30	; 48
    6288:	05 c0       	rjmp	.+10     	; 0x6294 <vfprintf+0x414>
    628a:	8f 5f       	subi	r24, 0xFF	; 255
    628c:	26 ef       	ldi	r18, 0xF6	; 246
    628e:	3f ef       	ldi	r19, 0xFF	; 255
    6290:	c2 0e       	add	r12, r18
    6292:	d3 1e       	adc	r13, r19
    6294:	3a e0       	ldi	r19, 0x0A	; 10
    6296:	c3 16       	cp	r12, r19
    6298:	d1 04       	cpc	r13, r1
    629a:	bc f7       	brge	.-18     	; 0x628a <vfprintf+0x40a>
    629c:	90 e0       	ldi	r25, 0x00	; 0
    629e:	b3 01       	movw	r22, r6
    62a0:	42 d4       	rcall	.+2180   	; 0x6b26 <fputc>
    62a2:	c6 01       	movw	r24, r12
    62a4:	c0 96       	adiw	r24, 0x30	; 48
    62a6:	b3 01       	movw	r22, r6
    62a8:	3e d4       	rcall	.+2172   	; 0x6b26 <fputc>
    62aa:	cc 84       	ldd	r12, Y+12	; 0x0c
    62ac:	dd 84       	ldd	r13, Y+13	; 0x0d
    62ae:	46 c1       	rjmp	.+652    	; 0x653c <vfprintf+0x6bc>
    62b0:	93 36       	cpi	r25, 0x63	; 99
    62b2:	31 f0       	breq	.+12     	; 0x62c0 <vfprintf+0x440>
    62b4:	93 37       	cpi	r25, 0x73	; 115
    62b6:	99 f0       	breq	.+38     	; 0x62de <vfprintf+0x45e>
    62b8:	93 35       	cpi	r25, 0x53	; 83
    62ba:	09 f0       	breq	.+2      	; 0x62be <vfprintf+0x43e>
    62bc:	55 c0       	rjmp	.+170    	; 0x6368 <vfprintf+0x4e8>
    62be:	22 c0       	rjmp	.+68     	; 0x6304 <vfprintf+0x484>
    62c0:	f6 01       	movw	r30, r12
    62c2:	80 81       	ld	r24, Z
    62c4:	89 83       	std	Y+1, r24	; 0x01
    62c6:	5e 01       	movw	r10, r28
    62c8:	08 94       	sec
    62ca:	a1 1c       	adc	r10, r1
    62cc:	b1 1c       	adc	r11, r1
    62ce:	22 e0       	ldi	r18, 0x02	; 2
    62d0:	30 e0       	ldi	r19, 0x00	; 0
    62d2:	c2 0e       	add	r12, r18
    62d4:	d3 1e       	adc	r13, r19
    62d6:	21 e0       	ldi	r18, 0x01	; 1
    62d8:	e2 2e       	mov	r14, r18
    62da:	f1 2c       	mov	r15, r1
    62dc:	11 c0       	rjmp	.+34     	; 0x6300 <vfprintf+0x480>
    62de:	f6 01       	movw	r30, r12
    62e0:	a0 80       	ld	r10, Z
    62e2:	b1 80       	ldd	r11, Z+1	; 0x01
    62e4:	16 fd       	sbrc	r17, 6
    62e6:	03 c0       	rjmp	.+6      	; 0x62ee <vfprintf+0x46e>
    62e8:	6f ef       	ldi	r22, 0xFF	; 255
    62ea:	7f ef       	ldi	r23, 0xFF	; 255
    62ec:	02 c0       	rjmp	.+4      	; 0x62f2 <vfprintf+0x472>
    62ee:	69 2d       	mov	r22, r9
    62f0:	70 e0       	ldi	r23, 0x00	; 0
    62f2:	22 e0       	ldi	r18, 0x02	; 2
    62f4:	30 e0       	ldi	r19, 0x00	; 0
    62f6:	c2 0e       	add	r12, r18
    62f8:	d3 1e       	adc	r13, r19
    62fa:	c5 01       	movw	r24, r10
    62fc:	09 d4       	rcall	.+2066   	; 0x6b10 <strnlen>
    62fe:	7c 01       	movw	r14, r24
    6300:	1f 77       	andi	r17, 0x7F	; 127
    6302:	12 c0       	rjmp	.+36     	; 0x6328 <vfprintf+0x4a8>
    6304:	f6 01       	movw	r30, r12
    6306:	a0 80       	ld	r10, Z
    6308:	b1 80       	ldd	r11, Z+1	; 0x01
    630a:	16 fd       	sbrc	r17, 6
    630c:	03 c0       	rjmp	.+6      	; 0x6314 <vfprintf+0x494>
    630e:	6f ef       	ldi	r22, 0xFF	; 255
    6310:	7f ef       	ldi	r23, 0xFF	; 255
    6312:	02 c0       	rjmp	.+4      	; 0x6318 <vfprintf+0x498>
    6314:	69 2d       	mov	r22, r9
    6316:	70 e0       	ldi	r23, 0x00	; 0
    6318:	22 e0       	ldi	r18, 0x02	; 2
    631a:	30 e0       	ldi	r19, 0x00	; 0
    631c:	c2 0e       	add	r12, r18
    631e:	d3 1e       	adc	r13, r19
    6320:	c5 01       	movw	r24, r10
    6322:	eb d3       	rcall	.+2006   	; 0x6afa <strnlen_P>
    6324:	7c 01       	movw	r14, r24
    6326:	10 68       	ori	r17, 0x80	; 128
    6328:	13 ff       	sbrs	r17, 3
    632a:	06 c0       	rjmp	.+12     	; 0x6338 <vfprintf+0x4b8>
    632c:	19 c0       	rjmp	.+50     	; 0x6360 <vfprintf+0x4e0>
    632e:	80 e2       	ldi	r24, 0x20	; 32
    6330:	90 e0       	ldi	r25, 0x00	; 0
    6332:	b3 01       	movw	r22, r6
    6334:	f8 d3       	rcall	.+2032   	; 0x6b26 <fputc>
    6336:	8a 94       	dec	r8
    6338:	88 2d       	mov	r24, r8
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	e8 16       	cp	r14, r24
    633e:	f9 06       	cpc	r15, r25
    6340:	b0 f3       	brcs	.-20     	; 0x632e <vfprintf+0x4ae>
    6342:	0e c0       	rjmp	.+28     	; 0x6360 <vfprintf+0x4e0>
    6344:	f5 01       	movw	r30, r10
    6346:	17 fd       	sbrc	r17, 7
    6348:	85 91       	lpm	r24, Z+
    634a:	17 ff       	sbrs	r17, 7
    634c:	81 91       	ld	r24, Z+
    634e:	5f 01       	movw	r10, r30
    6350:	90 e0       	ldi	r25, 0x00	; 0
    6352:	b3 01       	movw	r22, r6
    6354:	e8 d3       	rcall	.+2000   	; 0x6b26 <fputc>
    6356:	81 10       	cpse	r8, r1
    6358:	8a 94       	dec	r8
    635a:	08 94       	sec
    635c:	e1 08       	sbc	r14, r1
    635e:	f1 08       	sbc	r15, r1
    6360:	e1 14       	cp	r14, r1
    6362:	f1 04       	cpc	r15, r1
    6364:	79 f7       	brne	.-34     	; 0x6344 <vfprintf+0x4c4>
    6366:	ea c0       	rjmp	.+468    	; 0x653c <vfprintf+0x6bc>
    6368:	94 36       	cpi	r25, 0x64	; 100
    636a:	11 f0       	breq	.+4      	; 0x6370 <vfprintf+0x4f0>
    636c:	99 36       	cpi	r25, 0x69	; 105
    636e:	81 f5       	brne	.+96     	; 0x63d0 <vfprintf+0x550>
    6370:	17 ff       	sbrs	r17, 7
    6372:	08 c0       	rjmp	.+16     	; 0x6384 <vfprintf+0x504>
    6374:	f6 01       	movw	r30, r12
    6376:	20 81       	ld	r18, Z
    6378:	31 81       	ldd	r19, Z+1	; 0x01
    637a:	42 81       	ldd	r20, Z+2	; 0x02
    637c:	53 81       	ldd	r21, Z+3	; 0x03
    637e:	84 e0       	ldi	r24, 0x04	; 4
    6380:	90 e0       	ldi	r25, 0x00	; 0
    6382:	0a c0       	rjmp	.+20     	; 0x6398 <vfprintf+0x518>
    6384:	f6 01       	movw	r30, r12
    6386:	80 81       	ld	r24, Z
    6388:	91 81       	ldd	r25, Z+1	; 0x01
    638a:	9c 01       	movw	r18, r24
    638c:	44 27       	eor	r20, r20
    638e:	37 fd       	sbrc	r19, 7
    6390:	40 95       	com	r20
    6392:	54 2f       	mov	r21, r20
    6394:	82 e0       	ldi	r24, 0x02	; 2
    6396:	90 e0       	ldi	r25, 0x00	; 0
    6398:	c8 0e       	add	r12, r24
    639a:	d9 1e       	adc	r13, r25
    639c:	9f e6       	ldi	r25, 0x6F	; 111
    639e:	f9 2e       	mov	r15, r25
    63a0:	f1 22       	and	r15, r17
    63a2:	57 ff       	sbrs	r21, 7
    63a4:	09 c0       	rjmp	.+18     	; 0x63b8 <vfprintf+0x538>
    63a6:	50 95       	com	r21
    63a8:	40 95       	com	r20
    63aa:	30 95       	com	r19
    63ac:	21 95       	neg	r18
    63ae:	3f 4f       	sbci	r19, 0xFF	; 255
    63b0:	4f 4f       	sbci	r20, 0xFF	; 255
    63b2:	5f 4f       	sbci	r21, 0xFF	; 255
    63b4:	90 e8       	ldi	r25, 0x80	; 128
    63b6:	f9 2a       	or	r15, r25
    63b8:	ca 01       	movw	r24, r20
    63ba:	b9 01       	movw	r22, r18
    63bc:	ae 01       	movw	r20, r28
    63be:	4f 5f       	subi	r20, 0xFF	; 255
    63c0:	5f 4f       	sbci	r21, 0xFF	; 255
    63c2:	2a e0       	ldi	r18, 0x0A	; 10
    63c4:	30 e0       	ldi	r19, 0x00	; 0
    63c6:	22 d4       	rcall	.+2116   	; 0x6c0c <__ultoa_invert>
    63c8:	e8 2e       	mov	r14, r24
    63ca:	e8 89       	ldd	r30, Y+16	; 0x10
    63cc:	ee 1a       	sub	r14, r30
    63ce:	40 c0       	rjmp	.+128    	; 0x6450 <vfprintf+0x5d0>
    63d0:	95 37       	cpi	r25, 0x75	; 117
    63d2:	21 f4       	brne	.+8      	; 0x63dc <vfprintf+0x55c>
    63d4:	1f 7e       	andi	r17, 0xEF	; 239
    63d6:	2a e0       	ldi	r18, 0x0A	; 10
    63d8:	30 e0       	ldi	r19, 0x00	; 0
    63da:	1c c0       	rjmp	.+56     	; 0x6414 <vfprintf+0x594>
    63dc:	19 7f       	andi	r17, 0xF9	; 249
    63de:	9f 36       	cpi	r25, 0x6F	; 111
    63e0:	61 f0       	breq	.+24     	; 0x63fa <vfprintf+0x57a>
    63e2:	90 37       	cpi	r25, 0x70	; 112
    63e4:	20 f4       	brcc	.+8      	; 0x63ee <vfprintf+0x56e>
    63e6:	98 35       	cpi	r25, 0x58	; 88
    63e8:	09 f0       	breq	.+2      	; 0x63ec <vfprintf+0x56c>
    63ea:	ab c0       	rjmp	.+342    	; 0x6542 <vfprintf+0x6c2>
    63ec:	0f c0       	rjmp	.+30     	; 0x640c <vfprintf+0x58c>
    63ee:	90 37       	cpi	r25, 0x70	; 112
    63f0:	39 f0       	breq	.+14     	; 0x6400 <vfprintf+0x580>
    63f2:	98 37       	cpi	r25, 0x78	; 120
    63f4:	09 f0       	breq	.+2      	; 0x63f8 <vfprintf+0x578>
    63f6:	a5 c0       	rjmp	.+330    	; 0x6542 <vfprintf+0x6c2>
    63f8:	04 c0       	rjmp	.+8      	; 0x6402 <vfprintf+0x582>
    63fa:	28 e0       	ldi	r18, 0x08	; 8
    63fc:	30 e0       	ldi	r19, 0x00	; 0
    63fe:	0a c0       	rjmp	.+20     	; 0x6414 <vfprintf+0x594>
    6400:	10 61       	ori	r17, 0x10	; 16
    6402:	14 fd       	sbrc	r17, 4
    6404:	14 60       	ori	r17, 0x04	; 4
    6406:	20 e1       	ldi	r18, 0x10	; 16
    6408:	30 e0       	ldi	r19, 0x00	; 0
    640a:	04 c0       	rjmp	.+8      	; 0x6414 <vfprintf+0x594>
    640c:	14 fd       	sbrc	r17, 4
    640e:	16 60       	ori	r17, 0x06	; 6
    6410:	20 e1       	ldi	r18, 0x10	; 16
    6412:	32 e0       	ldi	r19, 0x02	; 2
    6414:	17 ff       	sbrs	r17, 7
    6416:	08 c0       	rjmp	.+16     	; 0x6428 <vfprintf+0x5a8>
    6418:	f6 01       	movw	r30, r12
    641a:	60 81       	ld	r22, Z
    641c:	71 81       	ldd	r23, Z+1	; 0x01
    641e:	82 81       	ldd	r24, Z+2	; 0x02
    6420:	93 81       	ldd	r25, Z+3	; 0x03
    6422:	44 e0       	ldi	r20, 0x04	; 4
    6424:	50 e0       	ldi	r21, 0x00	; 0
    6426:	08 c0       	rjmp	.+16     	; 0x6438 <vfprintf+0x5b8>
    6428:	f6 01       	movw	r30, r12
    642a:	80 81       	ld	r24, Z
    642c:	91 81       	ldd	r25, Z+1	; 0x01
    642e:	bc 01       	movw	r22, r24
    6430:	80 e0       	ldi	r24, 0x00	; 0
    6432:	90 e0       	ldi	r25, 0x00	; 0
    6434:	42 e0       	ldi	r20, 0x02	; 2
    6436:	50 e0       	ldi	r21, 0x00	; 0
    6438:	c4 0e       	add	r12, r20
    643a:	d5 1e       	adc	r13, r21
    643c:	ae 01       	movw	r20, r28
    643e:	4f 5f       	subi	r20, 0xFF	; 255
    6440:	5f 4f       	sbci	r21, 0xFF	; 255
    6442:	e4 d3       	rcall	.+1992   	; 0x6c0c <__ultoa_invert>
    6444:	e8 2e       	mov	r14, r24
    6446:	58 89       	ldd	r21, Y+16	; 0x10
    6448:	e5 1a       	sub	r14, r21
    644a:	8f e7       	ldi	r24, 0x7F	; 127
    644c:	f8 2e       	mov	r15, r24
    644e:	f1 22       	and	r15, r17
    6450:	f6 fe       	sbrs	r15, 6
    6452:	0b c0       	rjmp	.+22     	; 0x646a <vfprintf+0x5ea>
    6454:	8e ef       	ldi	r24, 0xFE	; 254
    6456:	f8 22       	and	r15, r24
    6458:	e9 14       	cp	r14, r9
    645a:	38 f4       	brcc	.+14     	; 0x646a <vfprintf+0x5ea>
    645c:	f4 fe       	sbrs	r15, 4
    645e:	07 c0       	rjmp	.+14     	; 0x646e <vfprintf+0x5ee>
    6460:	f2 fc       	sbrc	r15, 2
    6462:	05 c0       	rjmp	.+10     	; 0x646e <vfprintf+0x5ee>
    6464:	9f ee       	ldi	r25, 0xEF	; 239
    6466:	f9 22       	and	r15, r25
    6468:	02 c0       	rjmp	.+4      	; 0x646e <vfprintf+0x5ee>
    646a:	1e 2d       	mov	r17, r14
    646c:	01 c0       	rjmp	.+2      	; 0x6470 <vfprintf+0x5f0>
    646e:	19 2d       	mov	r17, r9
    6470:	f4 fe       	sbrs	r15, 4
    6472:	0d c0       	rjmp	.+26     	; 0x648e <vfprintf+0x60e>
    6474:	fe 01       	movw	r30, r28
    6476:	ee 0d       	add	r30, r14
    6478:	f1 1d       	adc	r31, r1
    647a:	80 81       	ld	r24, Z
    647c:	80 33       	cpi	r24, 0x30	; 48
    647e:	19 f4       	brne	.+6      	; 0x6486 <vfprintf+0x606>
    6480:	e9 ee       	ldi	r30, 0xE9	; 233
    6482:	fe 22       	and	r15, r30
    6484:	08 c0       	rjmp	.+16     	; 0x6496 <vfprintf+0x616>
    6486:	1f 5f       	subi	r17, 0xFF	; 255
    6488:	f2 fe       	sbrs	r15, 2
    648a:	05 c0       	rjmp	.+10     	; 0x6496 <vfprintf+0x616>
    648c:	03 c0       	rjmp	.+6      	; 0x6494 <vfprintf+0x614>
    648e:	8f 2d       	mov	r24, r15
    6490:	86 78       	andi	r24, 0x86	; 134
    6492:	09 f0       	breq	.+2      	; 0x6496 <vfprintf+0x616>
    6494:	1f 5f       	subi	r17, 0xFF	; 255
    6496:	0f 2d       	mov	r16, r15
    6498:	f3 fc       	sbrc	r15, 3
    649a:	13 c0       	rjmp	.+38     	; 0x64c2 <vfprintf+0x642>
    649c:	f0 fe       	sbrs	r15, 0
    649e:	0e c0       	rjmp	.+28     	; 0x64bc <vfprintf+0x63c>
    64a0:	18 15       	cp	r17, r8
    64a2:	10 f0       	brcs	.+4      	; 0x64a8 <vfprintf+0x628>
    64a4:	9e 2c       	mov	r9, r14
    64a6:	0a c0       	rjmp	.+20     	; 0x64bc <vfprintf+0x63c>
    64a8:	9e 2c       	mov	r9, r14
    64aa:	98 0c       	add	r9, r8
    64ac:	91 1a       	sub	r9, r17
    64ae:	18 2d       	mov	r17, r8
    64b0:	05 c0       	rjmp	.+10     	; 0x64bc <vfprintf+0x63c>
    64b2:	80 e2       	ldi	r24, 0x20	; 32
    64b4:	90 e0       	ldi	r25, 0x00	; 0
    64b6:	b3 01       	movw	r22, r6
    64b8:	36 d3       	rcall	.+1644   	; 0x6b26 <fputc>
    64ba:	1f 5f       	subi	r17, 0xFF	; 255
    64bc:	18 15       	cp	r17, r8
    64be:	c8 f3       	brcs	.-14     	; 0x64b2 <vfprintf+0x632>
    64c0:	04 c0       	rjmp	.+8      	; 0x64ca <vfprintf+0x64a>
    64c2:	18 15       	cp	r17, r8
    64c4:	10 f4       	brcc	.+4      	; 0x64ca <vfprintf+0x64a>
    64c6:	81 1a       	sub	r8, r17
    64c8:	01 c0       	rjmp	.+2      	; 0x64cc <vfprintf+0x64c>
    64ca:	88 24       	eor	r8, r8
    64cc:	04 ff       	sbrs	r16, 4
    64ce:	0e c0       	rjmp	.+28     	; 0x64ec <vfprintf+0x66c>
    64d0:	80 e3       	ldi	r24, 0x30	; 48
    64d2:	90 e0       	ldi	r25, 0x00	; 0
    64d4:	b3 01       	movw	r22, r6
    64d6:	27 d3       	rcall	.+1614   	; 0x6b26 <fputc>
    64d8:	02 ff       	sbrs	r16, 2
    64da:	1b c0       	rjmp	.+54     	; 0x6512 <vfprintf+0x692>
    64dc:	01 fd       	sbrc	r16, 1
    64de:	03 c0       	rjmp	.+6      	; 0x64e6 <vfprintf+0x666>
    64e0:	88 e7       	ldi	r24, 0x78	; 120
    64e2:	90 e0       	ldi	r25, 0x00	; 0
    64e4:	0e c0       	rjmp	.+28     	; 0x6502 <vfprintf+0x682>
    64e6:	88 e5       	ldi	r24, 0x58	; 88
    64e8:	90 e0       	ldi	r25, 0x00	; 0
    64ea:	0b c0       	rjmp	.+22     	; 0x6502 <vfprintf+0x682>
    64ec:	80 2f       	mov	r24, r16
    64ee:	86 78       	andi	r24, 0x86	; 134
    64f0:	81 f0       	breq	.+32     	; 0x6512 <vfprintf+0x692>
    64f2:	01 ff       	sbrs	r16, 1
    64f4:	02 c0       	rjmp	.+4      	; 0x64fa <vfprintf+0x67a>
    64f6:	8b e2       	ldi	r24, 0x2B	; 43
    64f8:	01 c0       	rjmp	.+2      	; 0x64fc <vfprintf+0x67c>
    64fa:	80 e2       	ldi	r24, 0x20	; 32
    64fc:	f7 fc       	sbrc	r15, 7
    64fe:	8d e2       	ldi	r24, 0x2D	; 45
    6500:	90 e0       	ldi	r25, 0x00	; 0
    6502:	b3 01       	movw	r22, r6
    6504:	10 d3       	rcall	.+1568   	; 0x6b26 <fputc>
    6506:	05 c0       	rjmp	.+10     	; 0x6512 <vfprintf+0x692>
    6508:	80 e3       	ldi	r24, 0x30	; 48
    650a:	90 e0       	ldi	r25, 0x00	; 0
    650c:	b3 01       	movw	r22, r6
    650e:	0b d3       	rcall	.+1558   	; 0x6b26 <fputc>
    6510:	9a 94       	dec	r9
    6512:	e9 14       	cp	r14, r9
    6514:	c8 f3       	brcs	.-14     	; 0x6508 <vfprintf+0x688>
    6516:	ea 94       	dec	r14
    6518:	e1 e0       	ldi	r30, 0x01	; 1
    651a:	f0 e0       	ldi	r31, 0x00	; 0
    651c:	ec 0f       	add	r30, r28
    651e:	fd 1f       	adc	r31, r29
    6520:	ee 0d       	add	r30, r14
    6522:	f1 1d       	adc	r31, r1
    6524:	80 81       	ld	r24, Z
    6526:	90 e0       	ldi	r25, 0x00	; 0
    6528:	b3 01       	movw	r22, r6
    652a:	fd d2       	rcall	.+1530   	; 0x6b26 <fputc>
    652c:	ee 20       	and	r14, r14
    652e:	99 f7       	brne	.-26     	; 0x6516 <vfprintf+0x696>
    6530:	05 c0       	rjmp	.+10     	; 0x653c <vfprintf+0x6bc>
    6532:	80 e2       	ldi	r24, 0x20	; 32
    6534:	90 e0       	ldi	r25, 0x00	; 0
    6536:	b3 01       	movw	r22, r6
    6538:	f6 d2       	rcall	.+1516   	; 0x6b26 <fputc>
    653a:	8a 94       	dec	r8
    653c:	88 20       	and	r8, r8
    653e:	c9 f7       	brne	.-14     	; 0x6532 <vfprintf+0x6b2>
    6540:	b6 cc       	rjmp	.-1684   	; 0x5eae <vfprintf+0x2e>
    6542:	f3 01       	movw	r30, r6
    6544:	66 81       	ldd	r22, Z+6	; 0x06
    6546:	77 81       	ldd	r23, Z+7	; 0x07
    6548:	cb 01       	movw	r24, r22
    654a:	61 96       	adiw	r28, 0x11	; 17
    654c:	e2 e1       	ldi	r30, 0x12	; 18
    654e:	70 c0       	rjmp	.+224    	; 0x6630 <__epilogue_restores__>

00006550 <__mulsi3>:
    6550:	62 9f       	mul	r22, r18
    6552:	d0 01       	movw	r26, r0
    6554:	73 9f       	mul	r23, r19
    6556:	f0 01       	movw	r30, r0
    6558:	82 9f       	mul	r24, r18
    655a:	e0 0d       	add	r30, r0
    655c:	f1 1d       	adc	r31, r1
    655e:	64 9f       	mul	r22, r20
    6560:	e0 0d       	add	r30, r0
    6562:	f1 1d       	adc	r31, r1
    6564:	92 9f       	mul	r25, r18
    6566:	f0 0d       	add	r31, r0
    6568:	83 9f       	mul	r24, r19
    656a:	f0 0d       	add	r31, r0
    656c:	74 9f       	mul	r23, r20
    656e:	f0 0d       	add	r31, r0
    6570:	65 9f       	mul	r22, r21
    6572:	f0 0d       	add	r31, r0
    6574:	99 27       	eor	r25, r25
    6576:	72 9f       	mul	r23, r18
    6578:	b0 0d       	add	r27, r0
    657a:	e1 1d       	adc	r30, r1
    657c:	f9 1f       	adc	r31, r25
    657e:	63 9f       	mul	r22, r19
    6580:	b0 0d       	add	r27, r0
    6582:	e1 1d       	adc	r30, r1
    6584:	f9 1f       	adc	r31, r25
    6586:	bd 01       	movw	r22, r26
    6588:	cf 01       	movw	r24, r30
    658a:	11 24       	eor	r1, r1
    658c:	08 95       	ret

0000658e <__divmodhi4>:
    658e:	97 fb       	bst	r25, 7
    6590:	09 2e       	mov	r0, r25
    6592:	07 26       	eor	r0, r23
    6594:	0a d0       	rcall	.+20     	; 0x65aa <__divmodhi4_neg1>
    6596:	77 fd       	sbrc	r23, 7
    6598:	04 d0       	rcall	.+8      	; 0x65a2 <__divmodhi4_neg2>
    659a:	65 d0       	rcall	.+202    	; 0x6666 <__udivmodhi4>
    659c:	06 d0       	rcall	.+12     	; 0x65aa <__divmodhi4_neg1>
    659e:	00 20       	and	r0, r0
    65a0:	1a f4       	brpl	.+6      	; 0x65a8 <__divmodhi4_exit>

000065a2 <__divmodhi4_neg2>:
    65a2:	70 95       	com	r23
    65a4:	61 95       	neg	r22
    65a6:	7f 4f       	sbci	r23, 0xFF	; 255

000065a8 <__divmodhi4_exit>:
    65a8:	08 95       	ret

000065aa <__divmodhi4_neg1>:
    65aa:	f6 f7       	brtc	.-4      	; 0x65a8 <__divmodhi4_exit>
    65ac:	90 95       	com	r25
    65ae:	81 95       	neg	r24
    65b0:	9f 4f       	sbci	r25, 0xFF	; 255
    65b2:	08 95       	ret

000065b4 <__udivmodsi4>:
    65b4:	a1 e2       	ldi	r26, 0x21	; 33
    65b6:	1a 2e       	mov	r1, r26
    65b8:	aa 1b       	sub	r26, r26
    65ba:	bb 1b       	sub	r27, r27
    65bc:	fd 01       	movw	r30, r26
    65be:	0d c0       	rjmp	.+26     	; 0x65da <__udivmodsi4_ep>

000065c0 <__udivmodsi4_loop>:
    65c0:	aa 1f       	adc	r26, r26
    65c2:	bb 1f       	adc	r27, r27
    65c4:	ee 1f       	adc	r30, r30
    65c6:	ff 1f       	adc	r31, r31
    65c8:	a2 17       	cp	r26, r18
    65ca:	b3 07       	cpc	r27, r19
    65cc:	e4 07       	cpc	r30, r20
    65ce:	f5 07       	cpc	r31, r21
    65d0:	20 f0       	brcs	.+8      	; 0x65da <__udivmodsi4_ep>
    65d2:	a2 1b       	sub	r26, r18
    65d4:	b3 0b       	sbc	r27, r19
    65d6:	e4 0b       	sbc	r30, r20
    65d8:	f5 0b       	sbc	r31, r21

000065da <__udivmodsi4_ep>:
    65da:	66 1f       	adc	r22, r22
    65dc:	77 1f       	adc	r23, r23
    65de:	88 1f       	adc	r24, r24
    65e0:	99 1f       	adc	r25, r25
    65e2:	1a 94       	dec	r1
    65e4:	69 f7       	brne	.-38     	; 0x65c0 <__udivmodsi4_loop>
    65e6:	60 95       	com	r22
    65e8:	70 95       	com	r23
    65ea:	80 95       	com	r24
    65ec:	90 95       	com	r25
    65ee:	9b 01       	movw	r18, r22
    65f0:	ac 01       	movw	r20, r24
    65f2:	bd 01       	movw	r22, r26
    65f4:	cf 01       	movw	r24, r30
    65f6:	08 95       	ret

000065f8 <__prologue_saves__>:
    65f8:	2f 92       	push	r2
    65fa:	3f 92       	push	r3
    65fc:	4f 92       	push	r4
    65fe:	5f 92       	push	r5
    6600:	6f 92       	push	r6
    6602:	7f 92       	push	r7
    6604:	8f 92       	push	r8
    6606:	9f 92       	push	r9
    6608:	af 92       	push	r10
    660a:	bf 92       	push	r11
    660c:	cf 92       	push	r12
    660e:	df 92       	push	r13
    6610:	ef 92       	push	r14
    6612:	ff 92       	push	r15
    6614:	0f 93       	push	r16
    6616:	1f 93       	push	r17
    6618:	cf 93       	push	r28
    661a:	df 93       	push	r29
    661c:	cd b7       	in	r28, 0x3d	; 61
    661e:	de b7       	in	r29, 0x3e	; 62
    6620:	ca 1b       	sub	r28, r26
    6622:	db 0b       	sbc	r29, r27
    6624:	0f b6       	in	r0, 0x3f	; 63
    6626:	f8 94       	cli
    6628:	de bf       	out	0x3e, r29	; 62
    662a:	0f be       	out	0x3f, r0	; 63
    662c:	cd bf       	out	0x3d, r28	; 61
    662e:	09 94       	ijmp

00006630 <__epilogue_restores__>:
    6630:	2a 88       	ldd	r2, Y+18	; 0x12
    6632:	39 88       	ldd	r3, Y+17	; 0x11
    6634:	48 88       	ldd	r4, Y+16	; 0x10
    6636:	5f 84       	ldd	r5, Y+15	; 0x0f
    6638:	6e 84       	ldd	r6, Y+14	; 0x0e
    663a:	7d 84       	ldd	r7, Y+13	; 0x0d
    663c:	8c 84       	ldd	r8, Y+12	; 0x0c
    663e:	9b 84       	ldd	r9, Y+11	; 0x0b
    6640:	aa 84       	ldd	r10, Y+10	; 0x0a
    6642:	b9 84       	ldd	r11, Y+9	; 0x09
    6644:	c8 84       	ldd	r12, Y+8	; 0x08
    6646:	df 80       	ldd	r13, Y+7	; 0x07
    6648:	ee 80       	ldd	r14, Y+6	; 0x06
    664a:	fd 80       	ldd	r15, Y+5	; 0x05
    664c:	0c 81       	ldd	r16, Y+4	; 0x04
    664e:	1b 81       	ldd	r17, Y+3	; 0x03
    6650:	aa 81       	ldd	r26, Y+2	; 0x02
    6652:	b9 81       	ldd	r27, Y+1	; 0x01
    6654:	ce 0f       	add	r28, r30
    6656:	d1 1d       	adc	r29, r1
    6658:	0f b6       	in	r0, 0x3f	; 63
    665a:	f8 94       	cli
    665c:	de bf       	out	0x3e, r29	; 62
    665e:	0f be       	out	0x3f, r0	; 63
    6660:	cd bf       	out	0x3d, r28	; 61
    6662:	ed 01       	movw	r28, r26
    6664:	08 95       	ret

00006666 <__udivmodhi4>:
    6666:	aa 1b       	sub	r26, r26
    6668:	bb 1b       	sub	r27, r27
    666a:	51 e1       	ldi	r21, 0x11	; 17
    666c:	07 c0       	rjmp	.+14     	; 0x667c <__udivmodhi4_ep>

0000666e <__udivmodhi4_loop>:
    666e:	aa 1f       	adc	r26, r26
    6670:	bb 1f       	adc	r27, r27
    6672:	a6 17       	cp	r26, r22
    6674:	b7 07       	cpc	r27, r23
    6676:	10 f0       	brcs	.+4      	; 0x667c <__udivmodhi4_ep>
    6678:	a6 1b       	sub	r26, r22
    667a:	b7 0b       	sbc	r27, r23

0000667c <__udivmodhi4_ep>:
    667c:	88 1f       	adc	r24, r24
    667e:	99 1f       	adc	r25, r25
    6680:	5a 95       	dec	r21
    6682:	a9 f7       	brne	.-22     	; 0x666e <__udivmodhi4_loop>
    6684:	80 95       	com	r24
    6686:	90 95       	com	r25
    6688:	bc 01       	movw	r22, r24
    668a:	cd 01       	movw	r24, r26
    668c:	08 95       	ret

0000668e <malloc>:
    668e:	cf 93       	push	r28
    6690:	df 93       	push	r29
    6692:	bc 01       	movw	r22, r24
    6694:	82 30       	cpi	r24, 0x02	; 2
    6696:	91 05       	cpc	r25, r1
    6698:	10 f4       	brcc	.+4      	; 0x669e <malloc+0x10>
    669a:	62 e0       	ldi	r22, 0x02	; 2
    669c:	70 e0       	ldi	r23, 0x00	; 0
    669e:	a0 91 48 07 	lds	r26, 0x0748
    66a2:	b0 91 49 07 	lds	r27, 0x0749
    66a6:	ed 01       	movw	r28, r26
    66a8:	e0 e0       	ldi	r30, 0x00	; 0
    66aa:	f0 e0       	ldi	r31, 0x00	; 0
    66ac:	40 e0       	ldi	r20, 0x00	; 0
    66ae:	50 e0       	ldi	r21, 0x00	; 0
    66b0:	21 c0       	rjmp	.+66     	; 0x66f4 <malloc+0x66>
    66b2:	88 81       	ld	r24, Y
    66b4:	99 81       	ldd	r25, Y+1	; 0x01
    66b6:	86 17       	cp	r24, r22
    66b8:	97 07       	cpc	r25, r23
    66ba:	69 f4       	brne	.+26     	; 0x66d6 <malloc+0x48>
    66bc:	8a 81       	ldd	r24, Y+2	; 0x02
    66be:	9b 81       	ldd	r25, Y+3	; 0x03
    66c0:	30 97       	sbiw	r30, 0x00	; 0
    66c2:	19 f0       	breq	.+6      	; 0x66ca <malloc+0x3c>
    66c4:	93 83       	std	Z+3, r25	; 0x03
    66c6:	82 83       	std	Z+2, r24	; 0x02
    66c8:	04 c0       	rjmp	.+8      	; 0x66d2 <malloc+0x44>
    66ca:	90 93 49 07 	sts	0x0749, r25
    66ce:	80 93 48 07 	sts	0x0748, r24
    66d2:	fe 01       	movw	r30, r28
    66d4:	34 c0       	rjmp	.+104    	; 0x673e <malloc+0xb0>
    66d6:	68 17       	cp	r22, r24
    66d8:	79 07       	cpc	r23, r25
    66da:	38 f4       	brcc	.+14     	; 0x66ea <malloc+0x5c>
    66dc:	41 15       	cp	r20, r1
    66de:	51 05       	cpc	r21, r1
    66e0:	19 f0       	breq	.+6      	; 0x66e8 <malloc+0x5a>
    66e2:	84 17       	cp	r24, r20
    66e4:	95 07       	cpc	r25, r21
    66e6:	08 f4       	brcc	.+2      	; 0x66ea <malloc+0x5c>
    66e8:	ac 01       	movw	r20, r24
    66ea:	fe 01       	movw	r30, r28
    66ec:	8a 81       	ldd	r24, Y+2	; 0x02
    66ee:	9b 81       	ldd	r25, Y+3	; 0x03
    66f0:	9c 01       	movw	r18, r24
    66f2:	e9 01       	movw	r28, r18
    66f4:	20 97       	sbiw	r28, 0x00	; 0
    66f6:	e9 f6       	brne	.-70     	; 0x66b2 <malloc+0x24>
    66f8:	41 15       	cp	r20, r1
    66fa:	51 05       	cpc	r21, r1
    66fc:	a9 f1       	breq	.+106    	; 0x6768 <malloc+0xda>
    66fe:	ca 01       	movw	r24, r20
    6700:	86 1b       	sub	r24, r22
    6702:	97 0b       	sbc	r25, r23
    6704:	04 97       	sbiw	r24, 0x04	; 4
    6706:	08 f4       	brcc	.+2      	; 0x670a <malloc+0x7c>
    6708:	ba 01       	movw	r22, r20
    670a:	e0 e0       	ldi	r30, 0x00	; 0
    670c:	f0 e0       	ldi	r31, 0x00	; 0
    670e:	2a c0       	rjmp	.+84     	; 0x6764 <malloc+0xd6>
    6710:	8d 91       	ld	r24, X+
    6712:	9c 91       	ld	r25, X
    6714:	11 97       	sbiw	r26, 0x01	; 1
    6716:	84 17       	cp	r24, r20
    6718:	95 07       	cpc	r25, r21
    671a:	f9 f4       	brne	.+62     	; 0x675a <malloc+0xcc>
    671c:	64 17       	cp	r22, r20
    671e:	75 07       	cpc	r23, r21
    6720:	81 f4       	brne	.+32     	; 0x6742 <malloc+0xb4>
    6722:	12 96       	adiw	r26, 0x02	; 2
    6724:	8d 91       	ld	r24, X+
    6726:	9c 91       	ld	r25, X
    6728:	13 97       	sbiw	r26, 0x03	; 3
    672a:	30 97       	sbiw	r30, 0x00	; 0
    672c:	19 f0       	breq	.+6      	; 0x6734 <malloc+0xa6>
    672e:	93 83       	std	Z+3, r25	; 0x03
    6730:	82 83       	std	Z+2, r24	; 0x02
    6732:	04 c0       	rjmp	.+8      	; 0x673c <malloc+0xae>
    6734:	90 93 49 07 	sts	0x0749, r25
    6738:	80 93 48 07 	sts	0x0748, r24
    673c:	fd 01       	movw	r30, r26
    673e:	32 96       	adiw	r30, 0x02	; 2
    6740:	4f c0       	rjmp	.+158    	; 0x67e0 <malloc+0x152>
    6742:	ca 01       	movw	r24, r20
    6744:	86 1b       	sub	r24, r22
    6746:	97 0b       	sbc	r25, r23
    6748:	fd 01       	movw	r30, r26
    674a:	e8 0f       	add	r30, r24
    674c:	f9 1f       	adc	r31, r25
    674e:	61 93       	st	Z+, r22
    6750:	71 93       	st	Z+, r23
    6752:	02 97       	sbiw	r24, 0x02	; 2
    6754:	8d 93       	st	X+, r24
    6756:	9c 93       	st	X, r25
    6758:	43 c0       	rjmp	.+134    	; 0x67e0 <malloc+0x152>
    675a:	fd 01       	movw	r30, r26
    675c:	82 81       	ldd	r24, Z+2	; 0x02
    675e:	93 81       	ldd	r25, Z+3	; 0x03
    6760:	9c 01       	movw	r18, r24
    6762:	d9 01       	movw	r26, r18
    6764:	10 97       	sbiw	r26, 0x00	; 0
    6766:	a1 f6       	brne	.-88     	; 0x6710 <malloc+0x82>
    6768:	80 91 46 07 	lds	r24, 0x0746
    676c:	90 91 47 07 	lds	r25, 0x0747
    6770:	89 2b       	or	r24, r25
    6772:	41 f4       	brne	.+16     	; 0x6784 <malloc+0xf6>
    6774:	80 91 83 03 	lds	r24, 0x0383
    6778:	90 91 84 03 	lds	r25, 0x0384
    677c:	90 93 47 07 	sts	0x0747, r25
    6780:	80 93 46 07 	sts	0x0746, r24
    6784:	40 91 85 03 	lds	r20, 0x0385
    6788:	50 91 86 03 	lds	r21, 0x0386
    678c:	41 15       	cp	r20, r1
    678e:	51 05       	cpc	r21, r1
    6790:	41 f4       	brne	.+16     	; 0x67a2 <malloc+0x114>
    6792:	4d b7       	in	r20, 0x3d	; 61
    6794:	5e b7       	in	r21, 0x3e	; 62
    6796:	80 91 81 03 	lds	r24, 0x0381
    679a:	90 91 82 03 	lds	r25, 0x0382
    679e:	48 1b       	sub	r20, r24
    67a0:	59 0b       	sbc	r21, r25
    67a2:	20 91 46 07 	lds	r18, 0x0746
    67a6:	30 91 47 07 	lds	r19, 0x0747
    67aa:	24 17       	cp	r18, r20
    67ac:	35 07       	cpc	r19, r21
    67ae:	b0 f4       	brcc	.+44     	; 0x67dc <malloc+0x14e>
    67b0:	ca 01       	movw	r24, r20
    67b2:	82 1b       	sub	r24, r18
    67b4:	93 0b       	sbc	r25, r19
    67b6:	86 17       	cp	r24, r22
    67b8:	97 07       	cpc	r25, r23
    67ba:	80 f0       	brcs	.+32     	; 0x67dc <malloc+0x14e>
    67bc:	ab 01       	movw	r20, r22
    67be:	4e 5f       	subi	r20, 0xFE	; 254
    67c0:	5f 4f       	sbci	r21, 0xFF	; 255
    67c2:	84 17       	cp	r24, r20
    67c4:	95 07       	cpc	r25, r21
    67c6:	50 f0       	brcs	.+20     	; 0x67dc <malloc+0x14e>
    67c8:	42 0f       	add	r20, r18
    67ca:	53 1f       	adc	r21, r19
    67cc:	50 93 47 07 	sts	0x0747, r21
    67d0:	40 93 46 07 	sts	0x0746, r20
    67d4:	f9 01       	movw	r30, r18
    67d6:	61 93       	st	Z+, r22
    67d8:	71 93       	st	Z+, r23
    67da:	02 c0       	rjmp	.+4      	; 0x67e0 <malloc+0x152>
    67dc:	e0 e0       	ldi	r30, 0x00	; 0
    67de:	f0 e0       	ldi	r31, 0x00	; 0
    67e0:	cf 01       	movw	r24, r30
    67e2:	df 91       	pop	r29
    67e4:	cf 91       	pop	r28
    67e6:	08 95       	ret

000067e8 <free>:
    67e8:	cf 93       	push	r28
    67ea:	df 93       	push	r29
    67ec:	00 97       	sbiw	r24, 0x00	; 0
    67ee:	09 f4       	brne	.+2      	; 0x67f2 <free+0xa>
    67f0:	50 c0       	rjmp	.+160    	; 0x6892 <free+0xaa>
    67f2:	ec 01       	movw	r28, r24
    67f4:	22 97       	sbiw	r28, 0x02	; 2
    67f6:	1b 82       	std	Y+3, r1	; 0x03
    67f8:	1a 82       	std	Y+2, r1	; 0x02
    67fa:	a0 91 48 07 	lds	r26, 0x0748
    67fe:	b0 91 49 07 	lds	r27, 0x0749
    6802:	10 97       	sbiw	r26, 0x00	; 0
    6804:	09 f1       	breq	.+66     	; 0x6848 <free+0x60>
    6806:	40 e0       	ldi	r20, 0x00	; 0
    6808:	50 e0       	ldi	r21, 0x00	; 0
    680a:	ac 17       	cp	r26, r28
    680c:	bd 07       	cpc	r27, r29
    680e:	08 f1       	brcs	.+66     	; 0x6852 <free+0x6a>
    6810:	bb 83       	std	Y+3, r27	; 0x03
    6812:	aa 83       	std	Y+2, r26	; 0x02
    6814:	fe 01       	movw	r30, r28
    6816:	21 91       	ld	r18, Z+
    6818:	31 91       	ld	r19, Z+
    681a:	e2 0f       	add	r30, r18
    681c:	f3 1f       	adc	r31, r19
    681e:	ae 17       	cp	r26, r30
    6820:	bf 07       	cpc	r27, r31
    6822:	79 f4       	brne	.+30     	; 0x6842 <free+0x5a>
    6824:	8d 91       	ld	r24, X+
    6826:	9c 91       	ld	r25, X
    6828:	11 97       	sbiw	r26, 0x01	; 1
    682a:	28 0f       	add	r18, r24
    682c:	39 1f       	adc	r19, r25
    682e:	2e 5f       	subi	r18, 0xFE	; 254
    6830:	3f 4f       	sbci	r19, 0xFF	; 255
    6832:	39 83       	std	Y+1, r19	; 0x01
    6834:	28 83       	st	Y, r18
    6836:	12 96       	adiw	r26, 0x02	; 2
    6838:	8d 91       	ld	r24, X+
    683a:	9c 91       	ld	r25, X
    683c:	13 97       	sbiw	r26, 0x03	; 3
    683e:	9b 83       	std	Y+3, r25	; 0x03
    6840:	8a 83       	std	Y+2, r24	; 0x02
    6842:	41 15       	cp	r20, r1
    6844:	51 05       	cpc	r21, r1
    6846:	71 f4       	brne	.+28     	; 0x6864 <free+0x7c>
    6848:	d0 93 49 07 	sts	0x0749, r29
    684c:	c0 93 48 07 	sts	0x0748, r28
    6850:	20 c0       	rjmp	.+64     	; 0x6892 <free+0xaa>
    6852:	12 96       	adiw	r26, 0x02	; 2
    6854:	8d 91       	ld	r24, X+
    6856:	9c 91       	ld	r25, X
    6858:	13 97       	sbiw	r26, 0x03	; 3
    685a:	ad 01       	movw	r20, r26
    685c:	00 97       	sbiw	r24, 0x00	; 0
    685e:	11 f0       	breq	.+4      	; 0x6864 <free+0x7c>
    6860:	dc 01       	movw	r26, r24
    6862:	d3 cf       	rjmp	.-90     	; 0x680a <free+0x22>
    6864:	fa 01       	movw	r30, r20
    6866:	d3 83       	std	Z+3, r29	; 0x03
    6868:	c2 83       	std	Z+2, r28	; 0x02
    686a:	21 91       	ld	r18, Z+
    686c:	31 91       	ld	r19, Z+
    686e:	e2 0f       	add	r30, r18
    6870:	f3 1f       	adc	r31, r19
    6872:	ce 17       	cp	r28, r30
    6874:	df 07       	cpc	r29, r31
    6876:	69 f4       	brne	.+26     	; 0x6892 <free+0xaa>
    6878:	88 81       	ld	r24, Y
    687a:	99 81       	ldd	r25, Y+1	; 0x01
    687c:	28 0f       	add	r18, r24
    687e:	39 1f       	adc	r19, r25
    6880:	2e 5f       	subi	r18, 0xFE	; 254
    6882:	3f 4f       	sbci	r19, 0xFF	; 255
    6884:	fa 01       	movw	r30, r20
    6886:	31 83       	std	Z+1, r19	; 0x01
    6888:	20 83       	st	Z, r18
    688a:	8a 81       	ldd	r24, Y+2	; 0x02
    688c:	9b 81       	ldd	r25, Y+3	; 0x03
    688e:	93 83       	std	Z+3, r25	; 0x03
    6890:	82 83       	std	Z+2, r24	; 0x02
    6892:	df 91       	pop	r29
    6894:	cf 91       	pop	r28
    6896:	08 95       	ret

00006898 <do_rand>:
    6898:	a0 e0       	ldi	r26, 0x00	; 0
    689a:	b0 e0       	ldi	r27, 0x00	; 0
    689c:	e1 e5       	ldi	r30, 0x51	; 81
    689e:	f4 e3       	ldi	r31, 0x34	; 52
    68a0:	b3 ce       	rjmp	.-666    	; 0x6608 <__prologue_saves__+0x10>
    68a2:	ec 01       	movw	r28, r24
    68a4:	a8 80       	ld	r10, Y
    68a6:	b9 80       	ldd	r11, Y+1	; 0x01
    68a8:	ca 80       	ldd	r12, Y+2	; 0x02
    68aa:	db 80       	ldd	r13, Y+3	; 0x03
    68ac:	a1 14       	cp	r10, r1
    68ae:	b1 04       	cpc	r11, r1
    68b0:	c1 04       	cpc	r12, r1
    68b2:	d1 04       	cpc	r13, r1
    68b4:	41 f4       	brne	.+16     	; 0x68c6 <do_rand+0x2e>
    68b6:	84 e2       	ldi	r24, 0x24	; 36
    68b8:	a8 2e       	mov	r10, r24
    68ba:	89 ed       	ldi	r24, 0xD9	; 217
    68bc:	b8 2e       	mov	r11, r24
    68be:	8b e5       	ldi	r24, 0x5B	; 91
    68c0:	c8 2e       	mov	r12, r24
    68c2:	87 e0       	ldi	r24, 0x07	; 7
    68c4:	d8 2e       	mov	r13, r24
    68c6:	c6 01       	movw	r24, r12
    68c8:	b5 01       	movw	r22, r10
    68ca:	2d e1       	ldi	r18, 0x1D	; 29
    68cc:	33 ef       	ldi	r19, 0xF3	; 243
    68ce:	41 e0       	ldi	r20, 0x01	; 1
    68d0:	50 e0       	ldi	r21, 0x00	; 0
    68d2:	fa d1       	rcall	.+1012   	; 0x6cc8 <__divmodsi4>
    68d4:	27 ea       	ldi	r18, 0xA7	; 167
    68d6:	31 e4       	ldi	r19, 0x41	; 65
    68d8:	40 e0       	ldi	r20, 0x00	; 0
    68da:	50 e0       	ldi	r21, 0x00	; 0
    68dc:	39 de       	rcall	.-910    	; 0x6550 <__mulsi3>
    68de:	7b 01       	movw	r14, r22
    68e0:	8c 01       	movw	r16, r24
    68e2:	c6 01       	movw	r24, r12
    68e4:	b5 01       	movw	r22, r10
    68e6:	2d e1       	ldi	r18, 0x1D	; 29
    68e8:	33 ef       	ldi	r19, 0xF3	; 243
    68ea:	41 e0       	ldi	r20, 0x01	; 1
    68ec:	50 e0       	ldi	r21, 0x00	; 0
    68ee:	ec d1       	rcall	.+984    	; 0x6cc8 <__divmodsi4>
    68f0:	ca 01       	movw	r24, r20
    68f2:	b9 01       	movw	r22, r18
    68f4:	2c ee       	ldi	r18, 0xEC	; 236
    68f6:	34 ef       	ldi	r19, 0xF4	; 244
    68f8:	4f ef       	ldi	r20, 0xFF	; 255
    68fa:	5f ef       	ldi	r21, 0xFF	; 255
    68fc:	29 de       	rcall	.-942    	; 0x6550 <__mulsi3>
    68fe:	6e 0d       	add	r22, r14
    6900:	7f 1d       	adc	r23, r15
    6902:	80 1f       	adc	r24, r16
    6904:	91 1f       	adc	r25, r17
    6906:	97 ff       	sbrs	r25, 7
    6908:	04 c0       	rjmp	.+8      	; 0x6912 <do_rand+0x7a>
    690a:	61 50       	subi	r22, 0x01	; 1
    690c:	70 40       	sbci	r23, 0x00	; 0
    690e:	80 40       	sbci	r24, 0x00	; 0
    6910:	90 48       	sbci	r25, 0x80	; 128
    6912:	68 83       	st	Y, r22
    6914:	79 83       	std	Y+1, r23	; 0x01
    6916:	8a 83       	std	Y+2, r24	; 0x02
    6918:	9b 83       	std	Y+3, r25	; 0x03
    691a:	9b 01       	movw	r18, r22
    691c:	3f 77       	andi	r19, 0x7F	; 127
    691e:	c9 01       	movw	r24, r18
    6920:	cd b7       	in	r28, 0x3d	; 61
    6922:	de b7       	in	r29, 0x3e	; 62
    6924:	ea e0       	ldi	r30, 0x0A	; 10
    6926:	8c ce       	rjmp	.-744    	; 0x6640 <__epilogue_restores__+0x10>

00006928 <rand_r>:
    6928:	b7 df       	rcall	.-146    	; 0x6898 <do_rand>
    692a:	08 95       	ret

0000692c <rand>:
    692c:	87 e8       	ldi	r24, 0x87	; 135
    692e:	93 e0       	ldi	r25, 0x03	; 3
    6930:	b3 df       	rcall	.-154    	; 0x6898 <do_rand>
    6932:	08 95       	ret

00006934 <srand>:
    6934:	a0 e0       	ldi	r26, 0x00	; 0
    6936:	b0 e0       	ldi	r27, 0x00	; 0
    6938:	80 93 87 03 	sts	0x0387, r24
    693c:	90 93 88 03 	sts	0x0388, r25
    6940:	a0 93 89 03 	sts	0x0389, r26
    6944:	b0 93 8a 03 	sts	0x038A, r27
    6948:	08 95       	ret

0000694a <__ftoa_engine>:
    694a:	28 30       	cpi	r18, 0x08	; 8
    694c:	08 f0       	brcs	.+2      	; 0x6950 <__ftoa_engine+0x6>
    694e:	27 e0       	ldi	r18, 0x07	; 7
    6950:	33 27       	eor	r19, r19
    6952:	da 01       	movw	r26, r20
    6954:	99 0f       	add	r25, r25
    6956:	31 1d       	adc	r19, r1
    6958:	87 fd       	sbrc	r24, 7
    695a:	91 60       	ori	r25, 0x01	; 1
    695c:	00 96       	adiw	r24, 0x00	; 0
    695e:	61 05       	cpc	r22, r1
    6960:	71 05       	cpc	r23, r1
    6962:	39 f4       	brne	.+14     	; 0x6972 <__ftoa_engine+0x28>
    6964:	32 60       	ori	r19, 0x02	; 2
    6966:	2e 5f       	subi	r18, 0xFE	; 254
    6968:	3d 93       	st	X+, r19
    696a:	30 e3       	ldi	r19, 0x30	; 48
    696c:	2a 95       	dec	r18
    696e:	e1 f7       	brne	.-8      	; 0x6968 <__ftoa_engine+0x1e>
    6970:	08 95       	ret
    6972:	9f 3f       	cpi	r25, 0xFF	; 255
    6974:	30 f0       	brcs	.+12     	; 0x6982 <__ftoa_engine+0x38>
    6976:	80 38       	cpi	r24, 0x80	; 128
    6978:	71 05       	cpc	r23, r1
    697a:	61 05       	cpc	r22, r1
    697c:	09 f0       	breq	.+2      	; 0x6980 <__ftoa_engine+0x36>
    697e:	3c 5f       	subi	r19, 0xFC	; 252
    6980:	3c 5f       	subi	r19, 0xFC	; 252
    6982:	3d 93       	st	X+, r19
    6984:	91 30       	cpi	r25, 0x01	; 1
    6986:	08 f0       	brcs	.+2      	; 0x698a <__ftoa_engine+0x40>
    6988:	80 68       	ori	r24, 0x80	; 128
    698a:	91 1d       	adc	r25, r1
    698c:	df 93       	push	r29
    698e:	cf 93       	push	r28
    6990:	1f 93       	push	r17
    6992:	0f 93       	push	r16
    6994:	ff 92       	push	r15
    6996:	ef 92       	push	r14
    6998:	19 2f       	mov	r17, r25
    699a:	98 7f       	andi	r25, 0xF8	; 248
    699c:	96 95       	lsr	r25
    699e:	e9 2f       	mov	r30, r25
    69a0:	96 95       	lsr	r25
    69a2:	96 95       	lsr	r25
    69a4:	e9 0f       	add	r30, r25
    69a6:	ff 27       	eor	r31, r31
    69a8:	ef 53       	subi	r30, 0x3F	; 63
    69aa:	fa 4f       	sbci	r31, 0xFA	; 250
    69ac:	99 27       	eor	r25, r25
    69ae:	33 27       	eor	r19, r19
    69b0:	ee 24       	eor	r14, r14
    69b2:	ff 24       	eor	r15, r15
    69b4:	a7 01       	movw	r20, r14
    69b6:	e7 01       	movw	r28, r14
    69b8:	05 90       	lpm	r0, Z+
    69ba:	08 94       	sec
    69bc:	07 94       	ror	r0
    69be:	28 f4       	brcc	.+10     	; 0x69ca <__ftoa_engine+0x80>
    69c0:	36 0f       	add	r19, r22
    69c2:	e7 1e       	adc	r14, r23
    69c4:	f8 1e       	adc	r15, r24
    69c6:	49 1f       	adc	r20, r25
    69c8:	51 1d       	adc	r21, r1
    69ca:	66 0f       	add	r22, r22
    69cc:	77 1f       	adc	r23, r23
    69ce:	88 1f       	adc	r24, r24
    69d0:	99 1f       	adc	r25, r25
    69d2:	06 94       	lsr	r0
    69d4:	a1 f7       	brne	.-24     	; 0x69be <__ftoa_engine+0x74>
    69d6:	05 90       	lpm	r0, Z+
    69d8:	07 94       	ror	r0
    69da:	28 f4       	brcc	.+10     	; 0x69e6 <__ftoa_engine+0x9c>
    69dc:	e7 0e       	add	r14, r23
    69de:	f8 1e       	adc	r15, r24
    69e0:	49 1f       	adc	r20, r25
    69e2:	56 1f       	adc	r21, r22
    69e4:	c1 1d       	adc	r28, r1
    69e6:	77 0f       	add	r23, r23
    69e8:	88 1f       	adc	r24, r24
    69ea:	99 1f       	adc	r25, r25
    69ec:	66 1f       	adc	r22, r22
    69ee:	06 94       	lsr	r0
    69f0:	a1 f7       	brne	.-24     	; 0x69da <__ftoa_engine+0x90>
    69f2:	05 90       	lpm	r0, Z+
    69f4:	07 94       	ror	r0
    69f6:	28 f4       	brcc	.+10     	; 0x6a02 <__ftoa_engine+0xb8>
    69f8:	f8 0e       	add	r15, r24
    69fa:	49 1f       	adc	r20, r25
    69fc:	56 1f       	adc	r21, r22
    69fe:	c7 1f       	adc	r28, r23
    6a00:	d1 1d       	adc	r29, r1
    6a02:	88 0f       	add	r24, r24
    6a04:	99 1f       	adc	r25, r25
    6a06:	66 1f       	adc	r22, r22
    6a08:	77 1f       	adc	r23, r23
    6a0a:	06 94       	lsr	r0
    6a0c:	a1 f7       	brne	.-24     	; 0x69f6 <__ftoa_engine+0xac>
    6a0e:	05 90       	lpm	r0, Z+
    6a10:	07 94       	ror	r0
    6a12:	20 f4       	brcc	.+8      	; 0x6a1c <__ftoa_engine+0xd2>
    6a14:	49 0f       	add	r20, r25
    6a16:	56 1f       	adc	r21, r22
    6a18:	c7 1f       	adc	r28, r23
    6a1a:	d8 1f       	adc	r29, r24
    6a1c:	99 0f       	add	r25, r25
    6a1e:	66 1f       	adc	r22, r22
    6a20:	77 1f       	adc	r23, r23
    6a22:	88 1f       	adc	r24, r24
    6a24:	06 94       	lsr	r0
    6a26:	a9 f7       	brne	.-22     	; 0x6a12 <__ftoa_engine+0xc8>
    6a28:	84 91       	lpm	r24, Z+
    6a2a:	10 95       	com	r17
    6a2c:	17 70       	andi	r17, 0x07	; 7
    6a2e:	41 f0       	breq	.+16     	; 0x6a40 <__ftoa_engine+0xf6>
    6a30:	d6 95       	lsr	r29
    6a32:	c7 95       	ror	r28
    6a34:	57 95       	ror	r21
    6a36:	47 95       	ror	r20
    6a38:	f7 94       	ror	r15
    6a3a:	e7 94       	ror	r14
    6a3c:	1a 95       	dec	r17
    6a3e:	c1 f7       	brne	.-16     	; 0x6a30 <__ftoa_engine+0xe6>
    6a40:	e7 e6       	ldi	r30, 0x67	; 103
    6a42:	f5 e0       	ldi	r31, 0x05	; 5
    6a44:	68 94       	set
    6a46:	15 90       	lpm	r1, Z+
    6a48:	15 91       	lpm	r17, Z+
    6a4a:	35 91       	lpm	r19, Z+
    6a4c:	65 91       	lpm	r22, Z+
    6a4e:	95 91       	lpm	r25, Z+
    6a50:	05 90       	lpm	r0, Z+
    6a52:	7f e2       	ldi	r23, 0x2F	; 47
    6a54:	73 95       	inc	r23
    6a56:	e1 18       	sub	r14, r1
    6a58:	f1 0a       	sbc	r15, r17
    6a5a:	43 0b       	sbc	r20, r19
    6a5c:	56 0b       	sbc	r21, r22
    6a5e:	c9 0b       	sbc	r28, r25
    6a60:	d0 09       	sbc	r29, r0
    6a62:	c0 f7       	brcc	.-16     	; 0x6a54 <__ftoa_engine+0x10a>
    6a64:	e1 0c       	add	r14, r1
    6a66:	f1 1e       	adc	r15, r17
    6a68:	43 1f       	adc	r20, r19
    6a6a:	56 1f       	adc	r21, r22
    6a6c:	c9 1f       	adc	r28, r25
    6a6e:	d0 1d       	adc	r29, r0
    6a70:	7e f4       	brtc	.+30     	; 0x6a90 <__ftoa_engine+0x146>
    6a72:	70 33       	cpi	r23, 0x30	; 48
    6a74:	11 f4       	brne	.+4      	; 0x6a7a <__ftoa_engine+0x130>
    6a76:	8a 95       	dec	r24
    6a78:	e6 cf       	rjmp	.-52     	; 0x6a46 <__ftoa_engine+0xfc>
    6a7a:	e8 94       	clt
    6a7c:	01 50       	subi	r16, 0x01	; 1
    6a7e:	30 f0       	brcs	.+12     	; 0x6a8c <__ftoa_engine+0x142>
    6a80:	08 0f       	add	r16, r24
    6a82:	0a f4       	brpl	.+2      	; 0x6a86 <__ftoa_engine+0x13c>
    6a84:	00 27       	eor	r16, r16
    6a86:	02 17       	cp	r16, r18
    6a88:	08 f4       	brcc	.+2      	; 0x6a8c <__ftoa_engine+0x142>
    6a8a:	20 2f       	mov	r18, r16
    6a8c:	23 95       	inc	r18
    6a8e:	02 2f       	mov	r16, r18
    6a90:	7a 33       	cpi	r23, 0x3A	; 58
    6a92:	28 f0       	brcs	.+10     	; 0x6a9e <__ftoa_engine+0x154>
    6a94:	79 e3       	ldi	r23, 0x39	; 57
    6a96:	7d 93       	st	X+, r23
    6a98:	2a 95       	dec	r18
    6a9a:	e9 f7       	brne	.-6      	; 0x6a96 <__ftoa_engine+0x14c>
    6a9c:	10 c0       	rjmp	.+32     	; 0x6abe <__ftoa_engine+0x174>
    6a9e:	7d 93       	st	X+, r23
    6aa0:	2a 95       	dec	r18
    6aa2:	89 f6       	brne	.-94     	; 0x6a46 <__ftoa_engine+0xfc>
    6aa4:	06 94       	lsr	r0
    6aa6:	97 95       	ror	r25
    6aa8:	67 95       	ror	r22
    6aaa:	37 95       	ror	r19
    6aac:	17 95       	ror	r17
    6aae:	17 94       	ror	r1
    6ab0:	e1 18       	sub	r14, r1
    6ab2:	f1 0a       	sbc	r15, r17
    6ab4:	43 0b       	sbc	r20, r19
    6ab6:	56 0b       	sbc	r21, r22
    6ab8:	c9 0b       	sbc	r28, r25
    6aba:	d0 09       	sbc	r29, r0
    6abc:	98 f0       	brcs	.+38     	; 0x6ae4 <__ftoa_engine+0x19a>
    6abe:	23 95       	inc	r18
    6ac0:	7e 91       	ld	r23, -X
    6ac2:	73 95       	inc	r23
    6ac4:	7a 33       	cpi	r23, 0x3A	; 58
    6ac6:	08 f0       	brcs	.+2      	; 0x6aca <__ftoa_engine+0x180>
    6ac8:	70 e3       	ldi	r23, 0x30	; 48
    6aca:	7c 93       	st	X, r23
    6acc:	20 13       	cpse	r18, r16
    6ace:	b8 f7       	brcc	.-18     	; 0x6abe <__ftoa_engine+0x174>
    6ad0:	7e 91       	ld	r23, -X
    6ad2:	70 61       	ori	r23, 0x10	; 16
    6ad4:	7d 93       	st	X+, r23
    6ad6:	30 f0       	brcs	.+12     	; 0x6ae4 <__ftoa_engine+0x19a>
    6ad8:	83 95       	inc	r24
    6ada:	71 e3       	ldi	r23, 0x31	; 49
    6adc:	7d 93       	st	X+, r23
    6ade:	70 e3       	ldi	r23, 0x30	; 48
    6ae0:	2a 95       	dec	r18
    6ae2:	e1 f7       	brne	.-8      	; 0x6adc <__ftoa_engine+0x192>
    6ae4:	11 24       	eor	r1, r1
    6ae6:	ef 90       	pop	r14
    6ae8:	ff 90       	pop	r15
    6aea:	0f 91       	pop	r16
    6aec:	1f 91       	pop	r17
    6aee:	cf 91       	pop	r28
    6af0:	df 91       	pop	r29
    6af2:	99 27       	eor	r25, r25
    6af4:	87 fd       	sbrc	r24, 7
    6af6:	90 95       	com	r25
    6af8:	08 95       	ret

00006afa <strnlen_P>:
    6afa:	fc 01       	movw	r30, r24
    6afc:	05 90       	lpm	r0, Z+
    6afe:	61 50       	subi	r22, 0x01	; 1
    6b00:	70 40       	sbci	r23, 0x00	; 0
    6b02:	01 10       	cpse	r0, r1
    6b04:	d8 f7       	brcc	.-10     	; 0x6afc <strnlen_P+0x2>
    6b06:	80 95       	com	r24
    6b08:	90 95       	com	r25
    6b0a:	8e 0f       	add	r24, r30
    6b0c:	9f 1f       	adc	r25, r31
    6b0e:	08 95       	ret

00006b10 <strnlen>:
    6b10:	fc 01       	movw	r30, r24
    6b12:	61 50       	subi	r22, 0x01	; 1
    6b14:	70 40       	sbci	r23, 0x00	; 0
    6b16:	01 90       	ld	r0, Z+
    6b18:	01 10       	cpse	r0, r1
    6b1a:	d8 f7       	brcc	.-10     	; 0x6b12 <strnlen+0x2>
    6b1c:	80 95       	com	r24
    6b1e:	90 95       	com	r25
    6b20:	8e 0f       	add	r24, r30
    6b22:	9f 1f       	adc	r25, r31
    6b24:	08 95       	ret

00006b26 <fputc>:
    6b26:	0f 93       	push	r16
    6b28:	1f 93       	push	r17
    6b2a:	cf 93       	push	r28
    6b2c:	df 93       	push	r29
    6b2e:	8c 01       	movw	r16, r24
    6b30:	eb 01       	movw	r28, r22
    6b32:	8b 81       	ldd	r24, Y+3	; 0x03
    6b34:	81 ff       	sbrs	r24, 1
    6b36:	1b c0       	rjmp	.+54     	; 0x6b6e <fputc+0x48>
    6b38:	82 ff       	sbrs	r24, 2
    6b3a:	0d c0       	rjmp	.+26     	; 0x6b56 <fputc+0x30>
    6b3c:	2e 81       	ldd	r18, Y+6	; 0x06
    6b3e:	3f 81       	ldd	r19, Y+7	; 0x07
    6b40:	8c 81       	ldd	r24, Y+4	; 0x04
    6b42:	9d 81       	ldd	r25, Y+5	; 0x05
    6b44:	28 17       	cp	r18, r24
    6b46:	39 07       	cpc	r19, r25
    6b48:	64 f4       	brge	.+24     	; 0x6b62 <fputc+0x3c>
    6b4a:	e8 81       	ld	r30, Y
    6b4c:	f9 81       	ldd	r31, Y+1	; 0x01
    6b4e:	01 93       	st	Z+, r16
    6b50:	f9 83       	std	Y+1, r31	; 0x01
    6b52:	e8 83       	st	Y, r30
    6b54:	06 c0       	rjmp	.+12     	; 0x6b62 <fputc+0x3c>
    6b56:	e8 85       	ldd	r30, Y+8	; 0x08
    6b58:	f9 85       	ldd	r31, Y+9	; 0x09
    6b5a:	80 2f       	mov	r24, r16
    6b5c:	09 95       	icall
    6b5e:	89 2b       	or	r24, r25
    6b60:	31 f4       	brne	.+12     	; 0x6b6e <fputc+0x48>
    6b62:	8e 81       	ldd	r24, Y+6	; 0x06
    6b64:	9f 81       	ldd	r25, Y+7	; 0x07
    6b66:	01 96       	adiw	r24, 0x01	; 1
    6b68:	9f 83       	std	Y+7, r25	; 0x07
    6b6a:	8e 83       	std	Y+6, r24	; 0x06
    6b6c:	02 c0       	rjmp	.+4      	; 0x6b72 <fputc+0x4c>
    6b6e:	0f ef       	ldi	r16, 0xFF	; 255
    6b70:	1f ef       	ldi	r17, 0xFF	; 255
    6b72:	c8 01       	movw	r24, r16
    6b74:	df 91       	pop	r29
    6b76:	cf 91       	pop	r28
    6b78:	1f 91       	pop	r17
    6b7a:	0f 91       	pop	r16
    6b7c:	08 95       	ret

00006b7e <printf>:
    6b7e:	a0 e0       	ldi	r26, 0x00	; 0
    6b80:	b0 e0       	ldi	r27, 0x00	; 0
    6b82:	e4 ec       	ldi	r30, 0xC4	; 196
    6b84:	f5 e3       	ldi	r31, 0x35	; 53
    6b86:	48 cd       	rjmp	.-1392   	; 0x6618 <__prologue_saves__+0x20>
    6b88:	fe 01       	movw	r30, r28
    6b8a:	35 96       	adiw	r30, 0x05	; 5
    6b8c:	61 91       	ld	r22, Z+
    6b8e:	71 91       	ld	r23, Z+
    6b90:	80 91 4c 07 	lds	r24, 0x074C
    6b94:	90 91 4d 07 	lds	r25, 0x074D
    6b98:	af 01       	movw	r20, r30
    6b9a:	72 d9       	rcall	.-3356   	; 0x5e80 <vfprintf>
    6b9c:	20 96       	adiw	r28, 0x00	; 0
    6b9e:	e2 e0       	ldi	r30, 0x02	; 2
    6ba0:	57 cd       	rjmp	.-1362   	; 0x6650 <__epilogue_restores__+0x20>

00006ba2 <puts>:
    6ba2:	0f 93       	push	r16
    6ba4:	1f 93       	push	r17
    6ba6:	cf 93       	push	r28
    6ba8:	df 93       	push	r29
    6baa:	8c 01       	movw	r16, r24
    6bac:	e0 91 4c 07 	lds	r30, 0x074C
    6bb0:	f0 91 4d 07 	lds	r31, 0x074D
    6bb4:	83 81       	ldd	r24, Z+3	; 0x03
    6bb6:	81 ff       	sbrs	r24, 1
    6bb8:	21 c0       	rjmp	.+66     	; 0x6bfc <puts+0x5a>
    6bba:	c0 e0       	ldi	r28, 0x00	; 0
    6bbc:	d0 e0       	ldi	r29, 0x00	; 0
    6bbe:	0d c0       	rjmp	.+26     	; 0x6bda <puts+0x38>
    6bc0:	e0 91 4c 07 	lds	r30, 0x074C
    6bc4:	f0 91 4d 07 	lds	r31, 0x074D
    6bc8:	20 85       	ldd	r18, Z+8	; 0x08
    6bca:	31 85       	ldd	r19, Z+9	; 0x09
    6bcc:	bf 01       	movw	r22, r30
    6bce:	f9 01       	movw	r30, r18
    6bd0:	09 95       	icall
    6bd2:	89 2b       	or	r24, r25
    6bd4:	11 f0       	breq	.+4      	; 0x6bda <puts+0x38>
    6bd6:	cf ef       	ldi	r28, 0xFF	; 255
    6bd8:	df ef       	ldi	r29, 0xFF	; 255
    6bda:	f8 01       	movw	r30, r16
    6bdc:	81 91       	ld	r24, Z+
    6bde:	8f 01       	movw	r16, r30
    6be0:	88 23       	and	r24, r24
    6be2:	71 f7       	brne	.-36     	; 0x6bc0 <puts+0x1e>
    6be4:	e0 91 4c 07 	lds	r30, 0x074C
    6be8:	f0 91 4d 07 	lds	r31, 0x074D
    6bec:	20 85       	ldd	r18, Z+8	; 0x08
    6bee:	31 85       	ldd	r19, Z+9	; 0x09
    6bf0:	8a e0       	ldi	r24, 0x0A	; 10
    6bf2:	bf 01       	movw	r22, r30
    6bf4:	f9 01       	movw	r30, r18
    6bf6:	09 95       	icall
    6bf8:	89 2b       	or	r24, r25
    6bfa:	11 f0       	breq	.+4      	; 0x6c00 <puts+0x5e>
    6bfc:	cf ef       	ldi	r28, 0xFF	; 255
    6bfe:	df ef       	ldi	r29, 0xFF	; 255
    6c00:	ce 01       	movw	r24, r28
    6c02:	df 91       	pop	r29
    6c04:	cf 91       	pop	r28
    6c06:	1f 91       	pop	r17
    6c08:	0f 91       	pop	r16
    6c0a:	08 95       	ret

00006c0c <__ultoa_invert>:
    6c0c:	fa 01       	movw	r30, r20
    6c0e:	aa 27       	eor	r26, r26
    6c10:	28 30       	cpi	r18, 0x08	; 8
    6c12:	51 f1       	breq	.+84     	; 0x6c68 <__ultoa_invert+0x5c>
    6c14:	20 31       	cpi	r18, 0x10	; 16
    6c16:	81 f1       	breq	.+96     	; 0x6c78 <__ultoa_invert+0x6c>
    6c18:	e8 94       	clt
    6c1a:	6f 93       	push	r22
    6c1c:	6e 7f       	andi	r22, 0xFE	; 254
    6c1e:	6e 5f       	subi	r22, 0xFE	; 254
    6c20:	7f 4f       	sbci	r23, 0xFF	; 255
    6c22:	8f 4f       	sbci	r24, 0xFF	; 255
    6c24:	9f 4f       	sbci	r25, 0xFF	; 255
    6c26:	af 4f       	sbci	r26, 0xFF	; 255
    6c28:	b1 e0       	ldi	r27, 0x01	; 1
    6c2a:	3e d0       	rcall	.+124    	; 0x6ca8 <__ultoa_invert+0x9c>
    6c2c:	b4 e0       	ldi	r27, 0x04	; 4
    6c2e:	3c d0       	rcall	.+120    	; 0x6ca8 <__ultoa_invert+0x9c>
    6c30:	67 0f       	add	r22, r23
    6c32:	78 1f       	adc	r23, r24
    6c34:	89 1f       	adc	r24, r25
    6c36:	9a 1f       	adc	r25, r26
    6c38:	a1 1d       	adc	r26, r1
    6c3a:	68 0f       	add	r22, r24
    6c3c:	79 1f       	adc	r23, r25
    6c3e:	8a 1f       	adc	r24, r26
    6c40:	91 1d       	adc	r25, r1
    6c42:	a1 1d       	adc	r26, r1
    6c44:	6a 0f       	add	r22, r26
    6c46:	71 1d       	adc	r23, r1
    6c48:	81 1d       	adc	r24, r1
    6c4a:	91 1d       	adc	r25, r1
    6c4c:	a1 1d       	adc	r26, r1
    6c4e:	20 d0       	rcall	.+64     	; 0x6c90 <__ultoa_invert+0x84>
    6c50:	09 f4       	brne	.+2      	; 0x6c54 <__ultoa_invert+0x48>
    6c52:	68 94       	set
    6c54:	3f 91       	pop	r19
    6c56:	2a e0       	ldi	r18, 0x0A	; 10
    6c58:	26 9f       	mul	r18, r22
    6c5a:	11 24       	eor	r1, r1
    6c5c:	30 19       	sub	r19, r0
    6c5e:	30 5d       	subi	r19, 0xD0	; 208
    6c60:	31 93       	st	Z+, r19
    6c62:	de f6       	brtc	.-74     	; 0x6c1a <__ultoa_invert+0xe>
    6c64:	cf 01       	movw	r24, r30
    6c66:	08 95       	ret
    6c68:	46 2f       	mov	r20, r22
    6c6a:	47 70       	andi	r20, 0x07	; 7
    6c6c:	40 5d       	subi	r20, 0xD0	; 208
    6c6e:	41 93       	st	Z+, r20
    6c70:	b3 e0       	ldi	r27, 0x03	; 3
    6c72:	0f d0       	rcall	.+30     	; 0x6c92 <__ultoa_invert+0x86>
    6c74:	c9 f7       	brne	.-14     	; 0x6c68 <__ultoa_invert+0x5c>
    6c76:	f6 cf       	rjmp	.-20     	; 0x6c64 <__ultoa_invert+0x58>
    6c78:	46 2f       	mov	r20, r22
    6c7a:	4f 70       	andi	r20, 0x0F	; 15
    6c7c:	40 5d       	subi	r20, 0xD0	; 208
    6c7e:	4a 33       	cpi	r20, 0x3A	; 58
    6c80:	18 f0       	brcs	.+6      	; 0x6c88 <__ultoa_invert+0x7c>
    6c82:	49 5d       	subi	r20, 0xD9	; 217
    6c84:	31 fd       	sbrc	r19, 1
    6c86:	40 52       	subi	r20, 0x20	; 32
    6c88:	41 93       	st	Z+, r20
    6c8a:	02 d0       	rcall	.+4      	; 0x6c90 <__ultoa_invert+0x84>
    6c8c:	a9 f7       	brne	.-22     	; 0x6c78 <__ultoa_invert+0x6c>
    6c8e:	ea cf       	rjmp	.-44     	; 0x6c64 <__ultoa_invert+0x58>
    6c90:	b4 e0       	ldi	r27, 0x04	; 4
    6c92:	a6 95       	lsr	r26
    6c94:	97 95       	ror	r25
    6c96:	87 95       	ror	r24
    6c98:	77 95       	ror	r23
    6c9a:	67 95       	ror	r22
    6c9c:	ba 95       	dec	r27
    6c9e:	c9 f7       	brne	.-14     	; 0x6c92 <__ultoa_invert+0x86>
    6ca0:	00 97       	sbiw	r24, 0x00	; 0
    6ca2:	61 05       	cpc	r22, r1
    6ca4:	71 05       	cpc	r23, r1
    6ca6:	08 95       	ret
    6ca8:	9b 01       	movw	r18, r22
    6caa:	ac 01       	movw	r20, r24
    6cac:	0a 2e       	mov	r0, r26
    6cae:	06 94       	lsr	r0
    6cb0:	57 95       	ror	r21
    6cb2:	47 95       	ror	r20
    6cb4:	37 95       	ror	r19
    6cb6:	27 95       	ror	r18
    6cb8:	ba 95       	dec	r27
    6cba:	c9 f7       	brne	.-14     	; 0x6cae <__ultoa_invert+0xa2>
    6cbc:	62 0f       	add	r22, r18
    6cbe:	73 1f       	adc	r23, r19
    6cc0:	84 1f       	adc	r24, r20
    6cc2:	95 1f       	adc	r25, r21
    6cc4:	a0 1d       	adc	r26, r0
    6cc6:	08 95       	ret

00006cc8 <__divmodsi4>:
    6cc8:	97 fb       	bst	r25, 7
    6cca:	09 2e       	mov	r0, r25
    6ccc:	05 26       	eor	r0, r21
    6cce:	0e d0       	rcall	.+28     	; 0x6cec <__divmodsi4_neg1>
    6cd0:	57 fd       	sbrc	r21, 7
    6cd2:	04 d0       	rcall	.+8      	; 0x6cdc <__divmodsi4_neg2>
    6cd4:	6f dc       	rcall	.-1826   	; 0x65b4 <__udivmodsi4>
    6cd6:	0a d0       	rcall	.+20     	; 0x6cec <__divmodsi4_neg1>
    6cd8:	00 1c       	adc	r0, r0
    6cda:	38 f4       	brcc	.+14     	; 0x6cea <__divmodsi4_exit>

00006cdc <__divmodsi4_neg2>:
    6cdc:	50 95       	com	r21
    6cde:	40 95       	com	r20
    6ce0:	30 95       	com	r19
    6ce2:	21 95       	neg	r18
    6ce4:	3f 4f       	sbci	r19, 0xFF	; 255
    6ce6:	4f 4f       	sbci	r20, 0xFF	; 255
    6ce8:	5f 4f       	sbci	r21, 0xFF	; 255

00006cea <__divmodsi4_exit>:
    6cea:	08 95       	ret

00006cec <__divmodsi4_neg1>:
    6cec:	f6 f7       	brtc	.-4      	; 0x6cea <__divmodsi4_exit>
    6cee:	90 95       	com	r25
    6cf0:	80 95       	com	r24
    6cf2:	70 95       	com	r23
    6cf4:	61 95       	neg	r22
    6cf6:	7f 4f       	sbci	r23, 0xFF	; 255
    6cf8:	8f 4f       	sbci	r24, 0xFF	; 255
    6cfa:	9f 4f       	sbci	r25, 0xFF	; 255
    6cfc:	08 95       	ret

00006cfe <_exit>:
    6cfe:	f8 94       	cli

00006d00 <__stop_program>:
    6d00:	ff cf       	rjmp	.-2      	; 0x6d00 <__stop_program>
