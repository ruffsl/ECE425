
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002ca  00800100  00007460  000074f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007460  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c0  008003ca  008003ca  000077be  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000077be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007ed  00000000  00000000  0000781e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001e1d  00000000  00000000  0000800b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000472  00000000  00000000  00009e28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018ff  00000000  00000000  0000a29a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  0000bb9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e26  00000000  00000000  0000beec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000122b  00000000  00000000  0000cd12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 40 26 	jmp	0x4c80	; 0x4c80 <__vector_4>
      14:	0c 94 69 26 	jmp	0x4cd2	; 0x4cd2 <__vector_5>
      18:	0c 94 92 26 	jmp	0x4d24	; 0x4d24 <__vector_6>
      1c:	0c 94 bb 26 	jmp	0x4d76	; 0x4d76 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 21 25 	jmp	0x4a42	; 0x4a42 <__vector_9>
      28:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <__vector_10>
      2c:	0c 94 73 25 	jmp	0x4ae6	; 0x4ae6 <__vector_11>
      30:	0c 94 ee 25 	jmp	0x4bdc	; 0x4bdc <__vector_12>
      34:	0c 94 9c 25 	jmp	0x4b38	; 0x4b38 <__vector_13>
      38:	0c 94 c5 25 	jmp	0x4b8a	; 0x4b8a <__vector_14>
      3c:	0c 94 17 26 	jmp	0x4c2e	; 0x4c2e <__vector_15>
      40:	0c 94 a6 24 	jmp	0x494c	; 0x494c <__vector_16>
      44:	0c 94 cf 24 	jmp	0x499e	; 0x499e <__vector_17>
      48:	0c 94 f8 24 	jmp	0x49f0	; 0x49f0 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	0b 22       	and	r0, r27
      7e:	0e 22       	and	r0, r30
      80:	11 22       	and	r1, r17
      82:	14 22       	and	r1, r20
      84:	1d 22       	and	r1, r29
      86:	17 22       	and	r1, r23
      88:	1a 22       	and	r1, r26
      8a:	20 22       	and	r2, r16
      8c:	23 22       	and	r2, r19
      8e:	26 22       	and	r2, r22
      90:	29 22       	and	r2, r25
      92:	2c 22       	and	r2, r28
      94:	2f 22       	and	r2, r31
      96:	32 22       	and	r3, r18
      98:	35 22       	and	r3, r21
      9a:	38 22       	and	r3, r24
      9c:	3b 22       	and	r3, r27
      9e:	3e 22       	and	r3, r30
      a0:	41 22       	and	r4, r17
      a2:	52 22       	and	r5, r18
      a4:	55 22       	and	r5, r21
      a6:	58 22       	and	r5, r24
      a8:	5b 22       	and	r5, r27
      aa:	64 22       	and	r6, r20
      ac:	5e 22       	and	r5, r30
      ae:	61 22       	and	r6, r17
      b0:	67 22       	and	r6, r23
      b2:	6a 22       	and	r6, r26
      b4:	6d 22       	and	r6, r29
      b6:	70 22       	and	r7, r16
      b8:	73 22       	and	r7, r19
      ba:	76 22       	and	r7, r22
      bc:	79 22       	and	r7, r25
      be:	7c 22       	and	r7, r28
      c0:	7f 22       	and	r7, r31
      c2:	82 22       	and	r8, r18
      c4:	85 22       	and	r8, r21
      c6:	88 22       	and	r8, r24
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e0 e6       	ldi	r30, 0x60	; 96
     676:	f4 e7       	ldi	r31, 0x74	; 116
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	aa 3c       	cpi	r26, 0xCA	; 202
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	aa ec       	ldi	r26, 0xCA	; 202
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	aa 38       	cpi	r26, 0x8A	; 138
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 75 1c 	call	0x38ea	; 0x38ea <main>
     698:	0c 94 2e 3a 	jmp	0x745c	; 0x745c <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 b8 23 	call	0x4770	; 0x4770 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 50 24 	call	0x48a0	; 0x48a0 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 b8 23 	call	0x4770	; 0x4770 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 50 24 	call	0x48a0	; 0x48a0 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 b8 23 	call	0x4770	; 0x4770 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 50 24 	call	0x48a0	; 0x48a0 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 b8 23 	call	0x4770	; 0x4770 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 50 24 	call	0x48a0	; 0x48a0 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 b8 23 	call	0x4770	; 0x4770 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 50 24 	call	0x48a0	; 0x48a0 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 b8 23 	call	0x4770	; 0x4770 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 50 24 	call	0x48a0	; 0x48a0 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 b8 23 	call	0x4770	; 0x4770 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 50 24 	call	0x48a0	; 0x48a0 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 b8 23 	call	0x4770	; 0x4770 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 50 24 	call	0x48a0	; 0x48a0 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 b8 23 	call	0x4770	; 0x4770 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 50 24 	call	0x48a0	; 0x48a0 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 e4 23 	call	0x47c8	; 0x47c8 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 0a 24 	call	0x4814	; 0x4814 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 b8 23 	call	0x4770	; 0x4770 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 50 24 	call	0x48a0	; 0x48a0 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 33 1c 	call	0x3866	; 0x3866 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 16 1c 	call	0x382c	; 0x382c <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 37 30 	call	0x606e	; 0x606e <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 33 1c 	call	0x3866	; 0x3866 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 16 1c 	call	0x382c	; 0x382c <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 37 30 	call	0x606e	; 0x606e <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 33 1c 	call	0x3866	; 0x3866 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 16 1c 	call	0x382c	; 0x382c <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 37 30 	call	0x606e	; 0x606e <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 33 1c 	call	0x3866	; 0x3866 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 16 1c 	call	0x382c	; 0x382c <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 37 30 	call	0x606e	; 0x606e <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 33 1c 	call	0x3866	; 0x3866 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 16 1c 	call	0x382c	; 0x382c <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 37 30 	call	0x606e	; 0x606e <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 33 1c 	call	0x3866	; 0x3866 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 16 1c 	call	0x382c	; 0x382c <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 37 30 	call	0x606e	; 0x606e <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 47 04 	sts	0x0447, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 bc 22 	call	0x4578	; 0x4578 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 bc 22 	call	0x4578	; 0x4578 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 bc 22 	call	0x4578	; 0x4578 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 47 04 	sts	0x0447, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 bc 22 	call	0x4578	; 0x4578 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 bc 22 	call	0x4578	; 0x4578 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 bc 22 	call	0x4578	; 0x4578 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 80 39 	call	0x7300	; 0x7300 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 80 39 	call	0x7300	; 0x7300 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 80 39 	call	0x7300	; 0x7300 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 8d 1d 	call	0x3b1a	; 0x3b1a <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 78 1d 	call	0x3af0	; 0x3af0 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	8c eb       	ldi	r24, 0xBC	; 188
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	ae ed       	ldi	r26, 0xDE	; 222
     c56:	b6 e0       	ldi	r27, 0x06	; 6
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	e5 ed       	ldi	r30, 0xD5	; 213
     c5e:	f5 e0       	ldi	r31, 0x05	; 5
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	83 e4       	ldi	r24, 0x43	; 67
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 65 06 	lds	r10, 0x0665
     c9e:	b0 90 66 06 	lds	r11, 0x0666
     ca2:	c0 90 67 06 	lds	r12, 0x0667
     ca6:	d0 90 68 06 	lds	r13, 0x0668
			rtIR_old[i] = rtIR;
     caa:	e0 90 6a 06 	lds	r14, 0x066A
     cae:	f0 90 6b 06 	lds	r15, 0x066B
     cb2:	00 91 6c 06 	lds	r16, 0x066C
     cb6:	10 91 6d 06 	lds	r17, 0x066D
			ftIR_old[i] = ftIR;
     cba:	20 90 c4 04 	lds	r2, 0x04C4
     cbe:	30 90 c5 04 	lds	r3, 0x04C5
     cc2:	40 90 c6 04 	lds	r4, 0x04C6
     cc6:	50 90 c7 04 	lds	r5, 0x04C7
			bkIR_old[i] = bkIR;
     cca:	20 91 ce 04 	lds	r18, 0x04CE
     cce:	30 91 cf 04 	lds	r19, 0x04CF
     cd2:	40 91 d0 04 	lds	r20, 0x04D0
     cd6:	50 91 d1 04 	lds	r21, 0x04D1
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e4 5b       	subi	r30, 0xB4	; 180
     ce2:	fb 4f       	sbci	r31, 0xFB	; 251
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e2 59       	subi	r30, 0x92	; 146
     cf0:	f9 4f       	sbci	r31, 0xF9	; 249
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	eb 59       	subi	r30, 0x9B	; 155
     cfe:	fa 4f       	sbci	r31, 0xFA	; 250
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	ed 52       	subi	r30, 0x2D	; 45
     d0c:	fb 4f       	sbci	r31, 0xFB	; 251
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	a4 54       	subi	r26, 0x44	; 68
     e02:	b4 40       	sbci	r27, 0x04	; 4
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 65 06 	lds	r24, 0x0665
     e0c:	90 91 66 06 	lds	r25, 0x0666
     e10:	a0 91 67 06 	lds	r26, 0x0667
     e14:	b0 91 68 06 	lds	r27, 0x0668
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 6a 06 	lds	r24, 0x066A
     e28:	90 91 6b 06 	lds	r25, 0x066B
     e2c:	a0 91 6c 06 	lds	r26, 0x066C
     e30:	b0 91 6d 06 	lds	r27, 0x066D
     e34:	80 93 6e 06 	sts	0x066E, r24
     e38:	90 93 6f 06 	sts	0x066F, r25
     e3c:	a0 93 70 06 	sts	0x0670, r26
     e40:	b0 93 71 06 	sts	0x0671, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 c4 04 	lds	r24, 0x04C4
     e48:	90 91 c5 04 	lds	r25, 0x04C5
     e4c:	a0 91 c6 04 	lds	r26, 0x04C6
     e50:	b0 91 c7 04 	lds	r27, 0x04C7
     e54:	80 93 65 05 	sts	0x0565, r24
     e58:	90 93 66 05 	sts	0x0566, r25
     e5c:	a0 93 67 05 	sts	0x0567, r26
     e60:	b0 93 68 05 	sts	0x0568, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 ce 04 	lds	r24, 0x04CE
     e68:	90 91 cf 04 	lds	r25, 0x04CF
     e6c:	a0 91 d0 04 	lds	r26, 0x04D0
     e70:	b0 91 d1 04 	lds	r27, 0x04D1
     e74:	80 93 d3 04 	sts	0x04D3, r24
     e78:	90 93 d4 04 	sts	0x04D4, r25
     e7c:	a0 93 d5 04 	sts	0x04D5, r26
     e80:	b0 93 d6 04 	sts	0x04D6, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
     e94:	60 93 65 06 	sts	0x0665, r22
     e98:	70 93 66 06 	sts	0x0666, r23
     e9c:	80 93 67 06 	sts	0x0667, r24
     ea0:	90 93 68 06 	sts	0x0668, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
     eb8:	60 93 6a 06 	sts	0x066A, r22
     ebc:	70 93 6b 06 	sts	0x066B, r23
     ec0:	80 93 6c 06 	sts	0x066C, r24
     ec4:	90 93 6d 06 	sts	0x066D, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
     edc:	60 93 c4 04 	sts	0x04C4, r22
     ee0:	70 93 c5 04 	sts	0x04C5, r23
     ee4:	80 93 c6 04 	sts	0x04C6, r24
     ee8:	90 93 c7 04 	sts	0x04C7, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
     f00:	60 93 ce 04 	sts	0x04CE, r22
     f04:	70 93 cf 04 	sts	0x04CF, r23
     f08:	80 93 d0 04 	sts	0x04D0, r24
     f0c:	90 93 d1 04 	sts	0x04D1, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 c8 04 	sts	0x04C8, r24
     f66:	90 93 c9 04 	sts	0x04C9, r25
     f6a:	a0 93 ca 04 	sts	0x04CA, r26
     f6e:	b0 93 cb 04 	sts	0x04CB, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 c8 04 	lds	r18, 0x04C8
     f7a:	30 91 c9 04 	lds	r19, 0x04C9
     f7e:	40 91 ca 04 	lds	r20, 0x04CA
     f82:	50 91 cb 04 	lds	r21, 0x04CB
     f86:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 c8 04 	sts	0x04C8, r22
     f92:	70 93 c9 04 	sts	0x04C9, r23
     f96:	80 93 ca 04 	sts	0x04CA, r24
     f9a:	90 93 cb 04 	sts	0x04CB, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 61 05 	lds	r18, 0x0561
     fa6:	30 91 62 05 	lds	r19, 0x0562
     faa:	40 91 63 05 	lds	r20, 0x0563
     fae:	50 91 64 05 	lds	r21, 0x0564
     fb2:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__subsf3>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    102a:	8f 92       	push	r8
    102c:	af 92       	push	r10
    102e:	bf 92       	push	r11
    1030:	cf 92       	push	r12
    1032:	df 92       	push	r13
    1034:	ef 92       	push	r14
    1036:	ff 92       	push	r15
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    1040:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    1044:	67 2b       	or	r22, r23
    1046:	09 f0       	breq	.+2      	; 0x104a <moveWander+0x20>
    1048:	76 c0       	rjmp	.+236    	; 0x1136 <moveWander+0x10c>
    104a:	89 2b       	or	r24, r25
    104c:	09 f0       	breq	.+2      	; 0x1050 <moveWander+0x26>
    104e:	73 c0       	rjmp	.+230    	; 0x1136 <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    1050:	0e 94 45 38 	call	0x708a	; 0x708a <rand>
    1054:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    1056:	0e 94 45 38 	call	0x708a	; 0x708a <rand>
    105a:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    105c:	0e 94 45 38 	call	0x708a	; 0x708a <rand>
    1060:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    1062:	0e 94 45 38 	call	0x708a	; 0x708a <rand>
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	6a e0       	ldi	r22, 0x0A	; 10
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	0e 94 76 36 	call	0x6cec	; 0x6cec <__divmodhi4>
    1070:	08 97       	sbiw	r24, 0x08	; 8
    1072:	0c f0       	brlt	.+2      	; 0x1076 <moveWander+0x4c>
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	82 2e       	mov	r8, r18
    1078:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    107a:	c8 01       	movw	r24, r16
    107c:	60 e9       	ldi	r22, 0x90	; 144
    107e:	71 e0       	ldi	r23, 0x01	; 1
    1080:	0e 94 76 36 	call	0x6cec	; 0x6cec <__divmodhi4>
    1084:	20 e9       	ldi	r18, 0x90	; 144
    1086:	a2 2e       	mov	r10, r18
    1088:	21 e0       	ldi	r18, 0x01	; 1
    108a:	b2 2e       	mov	r11, r18
    108c:	a8 0e       	add	r10, r24
    108e:	b9 1e       	adc	r11, r25
    1090:	8d b7       	in	r24, 0x3d	; 61
    1092:	9e b7       	in	r25, 0x3e	; 62
    1094:	09 97       	sbiw	r24, 0x09	; 9
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	9e bf       	out	0x3e, r25	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	8d bf       	out	0x3d, r24	; 61
    10a0:	0d b7       	in	r16, 0x3d	; 61
    10a2:	1e b7       	in	r17, 0x3e	; 62
    10a4:	0f 5f       	subi	r16, 0xFF	; 255
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	c7 01       	movw	r24, r14
    10aa:	68 ec       	ldi	r22, 0xC8	; 200
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	0e 94 76 36 	call	0x6cec	; 0x6cec <__divmodhi4>
    10b2:	88 53       	subi	r24, 0x38	; 56
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	aa 27       	eor	r26, r26
    10b8:	97 fd       	sbrc	r25, 7
    10ba:	a0 95       	com	r26
    10bc:	ba 2f       	mov	r27, r26
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 39 30 	call	0x6072	; 0x6072 <__floatsisf>
    10c6:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    10ca:	6b 01       	movw	r12, r22
    10cc:	7c 01       	movw	r14, r24
    10ce:	f8 01       	movw	r30, r16
    10d0:	b1 82       	std	Z+1, r11	; 0x01
    10d2:	a0 82       	st	Z, r10
    10d4:	ce 01       	movw	r24, r28
    10d6:	68 ec       	ldi	r22, 0xC8	; 200
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	0e 94 76 36 	call	0x6cec	; 0x6cec <__divmodhi4>
    10de:	88 53       	subi	r24, 0x38	; 56
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	aa 27       	eor	r26, r26
    10e4:	97 fd       	sbrc	r25, 7
    10e6:	a0 95       	com	r26
    10e8:	ba 2f       	mov	r27, r26
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 39 30 	call	0x6072	; 0x6072 <__floatsisf>
    10f2:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    10f6:	f8 01       	movw	r30, r16
    10f8:	73 83       	std	Z+3, r23	; 0x03
    10fa:	62 83       	std	Z+2, r22	; 0x02
    10fc:	82 ec       	ldi	r24, 0xC2	; 194
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	95 83       	std	Z+5, r25	; 0x05
    1102:	84 83       	std	Z+4, r24	; 0x04
    1104:	16 82       	std	Z+6, r1	; 0x06
    1106:	10 86       	std	Z+8, r1	; 0x08
    1108:	17 82       	std	Z+7, r1	; 0x07
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	62 e0       	ldi	r22, 0x02	; 2
    110e:	48 2d       	mov	r20, r8
    1110:	95 01       	movw	r18, r10
    1112:	86 01       	movw	r16, r12
    1114:	92 ec       	ldi	r25, 0xC2	; 194
    1116:	e9 2e       	mov	r14, r25
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	f9 2e       	mov	r15, r25
    111c:	cc 24       	eor	r12, r12
    111e:	aa 24       	eor	r10, r10
    1120:	bb 24       	eor	r11, r11
    1122:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <STEPPER_move>
    1126:	8d b7       	in	r24, 0x3d	; 61
    1128:	9e b7       	in	r25, 0x3e	; 62
    112a:	09 96       	adiw	r24, 0x09	; 9
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	9e bf       	out	0x3e, r25	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	bf 90       	pop	r11
    114a:	af 90       	pop	r10
    114c:	8f 90       	pop	r8
    114e:	08 95       	ret

00001150 <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
    1150:	2f 92       	push	r2
    1152:	3f 92       	push	r3
    1154:	4f 92       	push	r4
    1156:	5f 92       	push	r5
    1158:	6f 92       	push	r6
    115a:	7f 92       	push	r7
    115c:	8f 92       	push	r8
    115e:	9f 92       	push	r9
    1160:	af 92       	push	r10
    1162:	bf 92       	push	r11
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <moveAway+0x26>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <moveAway+0x28>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    117c:	60 90 c4 04 	lds	r6, 0x04C4
    1180:	70 90 c5 04 	lds	r7, 0x04C5
    1184:	80 90 c6 04 	lds	r8, 0x04C6
    1188:	90 90 c7 04 	lds	r9, 0x04C7
    118c:	a0 90 ce 04 	lds	r10, 0x04CE
    1190:	b0 90 cf 04 	lds	r11, 0x04CF
    1194:	c0 90 d0 04 	lds	r12, 0x04D0
    1198:	d0 90 d1 04 	lds	r13, 0x04D1
	float moveX = rtIR - ltIR;
    119c:	e0 90 6a 06 	lds	r14, 0x066A
    11a0:	f0 90 6b 06 	lds	r15, 0x066B
    11a4:	00 91 6c 06 	lds	r16, 0x066C
    11a8:	10 91 6d 06 	lds	r17, 0x066D
    11ac:	80 91 65 06 	lds	r24, 0x0665
    11b0:	90 91 66 06 	lds	r25, 0x0666
    11b4:	a0 91 67 06 	lds	r26, 0x0667
    11b8:	b0 91 68 06 	lds	r27, 0x0668
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	ab 83       	std	Y+3, r26	; 0x03
    11c2:	bc 83       	std	Y+4, r27	; 0x04
    11c4:	c8 01       	movw	r24, r16
    11c6:	b7 01       	movw	r22, r14
    11c8:	29 81       	ldd	r18, Y+1	; 0x01
    11ca:	3a 81       	ldd	r19, Y+2	; 0x02
    11cc:	4b 81       	ldd	r20, Y+3	; 0x03
    11ce:	5c 81       	ldd	r21, Y+4	; 0x04
    11d0:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__subsf3>
    11d4:	1b 01       	movw	r2, r22
    11d6:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
    11d8:	c4 01       	movw	r24, r8
    11da:	b3 01       	movw	r22, r6
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 ee       	ldi	r20, 0xE0	; 224
    11e2:	50 e4       	ldi	r21, 0x40	; 64
    11e4:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    11e8:	87 fd       	sbrc	r24, 7
    11ea:	0b c0       	rjmp	.+22     	; 0x1202 <moveAway+0xb2>
    11ec:	c6 01       	movw	r24, r12
    11ee:	b5 01       	movw	r22, r10
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 ee       	ldi	r20, 0xE0	; 224
    11f6:	50 e4       	ldi	r21, 0x40	; 64
    11f8:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    11fc:	88 23       	and	r24, r24
    11fe:	0c f0       	brlt	.+2      	; 0x1202 <moveAway+0xb2>
    1200:	68 c0       	rjmp	.+208    	; 0x12d2 <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    1202:	c4 01       	movw	r24, r8
    1204:	b3 01       	movw	r22, r6
    1206:	a6 01       	movw	r20, r12
    1208:	95 01       	movw	r18, r10
    120a:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__subsf3>
    120e:	7b 01       	movw	r14, r22
    1210:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
    1212:	77 24       	eor	r7, r7
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__gesf2>
    1220:	88 23       	and	r24, r24
    1222:	14 f0       	brlt	.+4      	; 0x1228 <moveAway+0xd8>
    1224:	77 24       	eor	r7, r7
    1226:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1228:	c8 01       	movw	r24, r16
    122a:	b7 01       	movw	r22, r14
    122c:	0e 94 06 30 	call	0x600c	; 0x600c <__fixsfsi>
    1230:	9b 01       	movw	r18, r22
    1232:	77 ff       	sbrs	r23, 7
    1234:	03 c0       	rjmp	.+6      	; 0x123c <moveAway+0xec>
    1236:	30 95       	com	r19
    1238:	21 95       	neg	r18
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	b9 01       	movw	r22, r18
    123e:	88 27       	eor	r24, r24
    1240:	77 fd       	sbrc	r23, 7
    1242:	80 95       	com	r24
    1244:	98 2f       	mov	r25, r24
    1246:	0e 94 39 30 	call	0x6072	; 0x6072 <__floatsisf>
    124a:	6b 01       	movw	r12, r22
    124c:	7c 01       	movw	r14, r24
    124e:	ad b7       	in	r26, 0x3d	; 61
    1250:	be b7       	in	r27, 0x3e	; 62
    1252:	19 97       	sbiw	r26, 0x09	; 9
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	be bf       	out	0x3e, r27	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	ad bf       	out	0x3d, r26	; 61
    125e:	0d b7       	in	r16, 0x3d	; 61
    1260:	1e b7       	in	r17, 0x3e	; 62
    1262:	0f 5f       	subi	r16, 0xFF	; 255
    1264:	1f 4f       	sbci	r17, 0xFF	; 255
    1266:	a2 01       	movw	r20, r4
    1268:	91 01       	movw	r18, r2
    126a:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    126e:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1272:	4b 01       	movw	r8, r22
    1274:	5c 01       	movw	r10, r24
    1276:	82 e3       	ldi	r24, 0x32	; 50
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	f8 01       	movw	r30, r16
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24
    1280:	c7 01       	movw	r24, r14
    1282:	b6 01       	movw	r22, r12
    1284:	a2 01       	movw	r20, r4
    1286:	91 01       	movw	r18, r2
    1288:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__subsf3>
    128c:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1290:	d8 01       	movw	r26, r16
    1292:	13 96       	adiw	r26, 0x03	; 3
    1294:	7c 93       	st	X, r23
    1296:	6e 93       	st	-X, r22
    1298:	12 97       	sbiw	r26, 0x02	; 2
    129a:	82 ec       	ldi	r24, 0xC2	; 194
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	15 96       	adiw	r26, 0x05	; 5
    12a0:	9c 93       	st	X, r25
    12a2:	8e 93       	st	-X, r24
    12a4:	14 97       	sbiw	r26, 0x04	; 4
    12a6:	16 96       	adiw	r26, 0x06	; 6
    12a8:	1c 92       	st	X, r1
    12aa:	16 97       	sbiw	r26, 0x06	; 6
    12ac:	18 96       	adiw	r26, 0x08	; 8
    12ae:	1c 92       	st	X, r1
    12b0:	1e 92       	st	-X, r1
    12b2:	17 97       	sbiw	r26, 0x07	; 7
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	62 e0       	ldi	r22, 0x02	; 2
    12b8:	47 2d       	mov	r20, r7
    12ba:	22 e3       	ldi	r18, 0x32	; 50
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	84 01       	movw	r16, r8
    12c0:	e2 ec       	ldi	r30, 0xC2	; 194
    12c2:	ee 2e       	mov	r14, r30
    12c4:	e1 e0       	ldi	r30, 0x01	; 1
    12c6:	fe 2e       	mov	r15, r30
    12c8:	cc 24       	eor	r12, r12
    12ca:	aa 24       	eor	r10, r10
    12cc:	bb 24       	eor	r11, r11
    12ce:	87 2c       	mov	r8, r7
    12d0:	82 c0       	rjmp	.+260    	; 0x13d6 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
    12d2:	c8 01       	movw	r24, r16
    12d4:	b7 01       	movw	r22, r14
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e2       	ldi	r20, 0x20	; 32
    12dc:	51 e4       	ldi	r21, 0x41	; 65
    12de:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	b4 f5       	brge	.+108    	; 0x1352 <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    12e6:	c2 01       	movw	r24, r4
    12e8:	b1 01       	movw	r22, r2
    12ea:	0e 94 06 30 	call	0x600c	; 0x600c <__fixsfsi>
    12ee:	8b 01       	movw	r16, r22
    12f0:	77 ff       	sbrs	r23, 7
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <moveAway+0x1aa>
    12f4:	10 95       	com	r17
    12f6:	01 95       	neg	r16
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	2d b7       	in	r18, 0x3d	; 61
    12fc:	3e b7       	in	r19, 0x3e	; 62
    12fe:	29 50       	subi	r18, 0x09	; 9
    1300:	30 40       	sbci	r19, 0x00	; 0
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	3e bf       	out	0x3e, r19	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	2d bf       	out	0x3d, r18	; 61
    130c:	ed b7       	in	r30, 0x3d	; 61
    130e:	fe b7       	in	r31, 0x3e	; 62
    1310:	31 96       	adiw	r30, 0x01	; 1
    1312:	88 ec       	ldi	r24, 0xC8	; 200
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	ad b7       	in	r26, 0x3d	; 61
    1318:	be b7       	in	r27, 0x3e	; 62
    131a:	12 96       	adiw	r26, 0x02	; 2
    131c:	9c 93       	st	X, r25
    131e:	8e 93       	st	-X, r24
    1320:	11 97       	sbiw	r26, 0x01	; 1
    1322:	13 83       	std	Z+3, r17	; 0x03
    1324:	02 83       	std	Z+2, r16	; 0x02
    1326:	82 ec       	ldi	r24, 0xC2	; 194
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	95 83       	std	Z+5, r25	; 0x05
    132c:	84 83       	std	Z+4, r24	; 0x04
    132e:	16 82       	std	Z+6, r1	; 0x06
    1330:	10 86       	std	Z+8, r1	; 0x08
    1332:	17 82       	std	Z+7, r1	; 0x07
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	62 e0       	ldi	r22, 0x02	; 2
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	28 ec       	ldi	r18, 0xC8	; 200
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	72 ec       	ldi	r23, 0xC2	; 194
    1340:	e7 2e       	mov	r14, r23
    1342:	71 e0       	ldi	r23, 0x01	; 1
    1344:	f7 2e       	mov	r15, r23
    1346:	cc 24       	eor	r12, r12
    1348:	aa 24       	eor	r10, r10
    134a:	bb 24       	eor	r11, r11
    134c:	88 24       	eor	r8, r8
    134e:	83 94       	inc	r8
    1350:	42 c0       	rjmp	.+132    	; 0x13d6 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
    1352:	69 81       	ldd	r22, Y+1	; 0x01
    1354:	7a 81       	ldd	r23, Y+2	; 0x02
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e2       	ldi	r20, 0x20	; 32
    1360:	51 e4       	ldi	r21, 0x41	; 65
    1362:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    1366:	87 fd       	sbrc	r24, 7
    1368:	02 c0       	rjmp	.+4      	; 0x136e <moveAway+0x21e>
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	3f c0       	rjmp	.+126    	; 0x13ec <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    136e:	c2 01       	movw	r24, r4
    1370:	b1 01       	movw	r22, r2
    1372:	0e 94 06 30 	call	0x600c	; 0x600c <__fixsfsi>
    1376:	8b 01       	movw	r16, r22
    1378:	77 ff       	sbrs	r23, 7
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <moveAway+0x232>
    137c:	10 95       	com	r17
    137e:	01 95       	neg	r16
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
    1382:	2d b7       	in	r18, 0x3d	; 61
    1384:	3e b7       	in	r19, 0x3e	; 62
    1386:	29 50       	subi	r18, 0x09	; 9
    1388:	30 40       	sbci	r19, 0x00	; 0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	3e bf       	out	0x3e, r19	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	2d bf       	out	0x3d, r18	; 61
    1394:	ed b7       	in	r30, 0x3d	; 61
    1396:	fe b7       	in	r31, 0x3e	; 62
    1398:	31 96       	adiw	r30, 0x01	; 1
    139a:	88 ec       	ldi	r24, 0xC8	; 200
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	ad b7       	in	r26, 0x3d	; 61
    13a0:	be b7       	in	r27, 0x3e	; 62
    13a2:	12 96       	adiw	r26, 0x02	; 2
    13a4:	9c 93       	st	X, r25
    13a6:	8e 93       	st	-X, r24
    13a8:	11 97       	sbiw	r26, 0x01	; 1
    13aa:	13 83       	std	Z+3, r17	; 0x03
    13ac:	02 83       	std	Z+2, r16	; 0x02
    13ae:	82 ec       	ldi	r24, 0xC2	; 194
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	95 83       	std	Z+5, r25	; 0x05
    13b4:	84 83       	std	Z+4, r24	; 0x04
    13b6:	16 82       	std	Z+6, r1	; 0x06
    13b8:	10 86       	std	Z+8, r1	; 0x08
    13ba:	17 82       	std	Z+7, r1	; 0x07
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	62 e0       	ldi	r22, 0x02	; 2
    13c0:	41 e0       	ldi	r20, 0x01	; 1
    13c2:	28 ec       	ldi	r18, 0xC8	; 200
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	52 ec       	ldi	r21, 0xC2	; 194
    13c8:	e5 2e       	mov	r14, r21
    13ca:	51 e0       	ldi	r21, 0x01	; 1
    13cc:	f5 2e       	mov	r15, r21
    13ce:	cc 24       	eor	r12, r12
    13d0:	aa 24       	eor	r10, r10
    13d2:	bb 24       	eor	r11, r11
    13d4:	88 24       	eor	r8, r8
    13d6:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <STEPPER_move>
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	ed b7       	in	r30, 0x3d	; 61
    13de:	fe b7       	in	r31, 0x3e	; 62
    13e0:	39 96       	adiw	r30, 0x09	; 9
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	fe bf       	out	0x3e, r31	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	7f 90       	pop	r7
    140e:	6f 90       	pop	r6
    1410:	5f 90       	pop	r5
    1412:	4f 90       	pop	r4
    1414:	3f 90       	pop	r3
    1416:	2f 90       	pop	r2
    1418:	08 95       	ret

0000141a <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    141a:	2f 92       	push	r2
    141c:	3f 92       	push	r3
    141e:	4f 92       	push	r4
    1420:	5f 92       	push	r5
    1422:	6f 92       	push	r6
    1424:	7f 92       	push	r7
    1426:	8f 92       	push	r8
    1428:	9f 92       	push	r9
    142a:	af 92       	push	r10
    142c:	bf 92       	push	r11
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	a0 97       	sbiw	r28, 0x20	; 32
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	2b 01       	movw	r4, r22
    1450:	3c 01       	movw	r6, r24
    1452:	2d 83       	std	Y+5, r18	; 0x05
    1454:	3e 83       	std	Y+6, r19	; 0x06
    1456:	4f 83       	std	Y+7, r20	; 0x07
    1458:	58 87       	std	Y+8, r21	; 0x08
    145a:	e9 86       	std	Y+9, r14	; 0x09
    145c:	fa 86       	std	Y+10, r15	; 0x0a
    145e:	0b 87       	std	Y+11, r16	; 0x0b
    1460:	1c 87       	std	Y+12, r17	; 0x0c
    1462:	ad 86       	std	Y+13, r10	; 0x0d
    1464:	be 86       	std	Y+14, r11	; 0x0e
    1466:	cf 86       	std	Y+15, r12	; 0x0f
    1468:	d8 8a       	std	Y+16, r13	; 0x10
    146a:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    146c:	33 24       	eor	r3, r3
    146e:	ca 01       	movw	r24, r20
    1470:	b9 01       	movw	r22, r18
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__gesf2>
    147e:	18 16       	cp	r1, r24
    1480:	14 f4       	brge	.+4      	; 0x1486 <move_arc_stnb+0x6c>
    1482:	33 24       	eor	r3, r3
    1484:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1486:	6d 81       	ldd	r22, Y+5	; 0x05
    1488:	7e 81       	ldd	r23, Y+6	; 0x06
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	98 85       	ldd	r25, Y+8	; 0x08
    148e:	2c ed       	ldi	r18, 0xDC	; 220
    1490:	38 eb       	ldi	r19, 0xB8	; 184
    1492:	48 e0       	ldi	r20, 0x08	; 8
    1494:	5e e3       	ldi	r21, 0x3E	; 62
    1496:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    149a:	0e 94 06 30 	call	0x600c	; 0x600c <__fixsfsi>
    149e:	9b 01       	movw	r18, r22
    14a0:	77 ff       	sbrs	r23, 7
    14a2:	03 c0       	rjmp	.+6      	; 0x14aa <move_arc_stnb+0x90>
    14a4:	30 95       	com	r19
    14a6:	21 95       	neg	r18
    14a8:	3f 4f       	sbci	r19, 0xFF	; 255
    14aa:	b9 01       	movw	r22, r18
    14ac:	88 27       	eor	r24, r24
    14ae:	77 fd       	sbrc	r23, 7
    14b0:	80 95       	com	r24
    14b2:	98 2f       	mov	r25, r24
    14b4:	0e 94 39 30 	call	0x6072	; 0x6072 <__floatsisf>
    14b8:	69 83       	std	Y+1, r22	; 0x01
    14ba:	7a 83       	std	Y+2, r23	; 0x02
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    14be:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    14c0:	69 85       	ldd	r22, Y+9	; 0x09
    14c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    14c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    14c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    14c8:	2c ed       	ldi	r18, 0xDC	; 220
    14ca:	38 eb       	ldi	r19, 0xB8	; 184
    14cc:	48 e0       	ldi	r20, 0x08	; 8
    14ce:	5e e3       	ldi	r21, 0x3E	; 62
    14d0:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    14d4:	0e 94 06 30 	call	0x600c	; 0x600c <__fixsfsi>
    14d8:	9b 01       	movw	r18, r22
    14da:	77 ff       	sbrs	r23, 7
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <move_arc_stnb+0xca>
    14de:	30 95       	com	r19
    14e0:	21 95       	neg	r18
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	b9 01       	movw	r22, r18
    14e6:	88 27       	eor	r24, r24
    14e8:	77 fd       	sbrc	r23, 7
    14ea:	80 95       	com	r24
    14ec:	98 2f       	mov	r25, r24
    14ee:	0e 94 39 30 	call	0x6072	; 0x6072 <__floatsisf>
    14f2:	4b 01       	movw	r8, r22
    14f4:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    14f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    14f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    14fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fc:	98 89       	ldd	r25, Y+16	; 0x10
    14fe:	2c ed       	ldi	r18, 0xDC	; 220
    1500:	38 eb       	ldi	r19, 0xB8	; 184
    1502:	48 e0       	ldi	r20, 0x08	; 8
    1504:	5e e3       	ldi	r21, 0x3E	; 62
    1506:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    150a:	0e 94 06 30 	call	0x600c	; 0x600c <__fixsfsi>
    150e:	9b 01       	movw	r18, r22
    1510:	77 ff       	sbrs	r23, 7
    1512:	03 c0       	rjmp	.+6      	; 0x151a <move_arc_stnb+0x100>
    1514:	30 95       	com	r19
    1516:	21 95       	neg	r18
    1518:	3f 4f       	sbci	r19, 0xFF	; 255
    151a:	b9 01       	movw	r22, r18
    151c:	88 27       	eor	r24, r24
    151e:	77 fd       	sbrc	r23, 7
    1520:	80 95       	com	r24
    1522:	98 2f       	mov	r25, r24
    1524:	0e 94 39 30 	call	0x6072	; 0x6072 <__floatsisf>
    1528:	6b 01       	movw	r12, r22
    152a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    152c:	c3 01       	movw	r24, r6
    152e:	b2 01       	movw	r22, r4
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	5f e4       	ldi	r21, 0x4F	; 79
    1538:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    153c:	88 23       	and	r24, r24
    153e:	a1 f5       	brne	.+104    	; 0x15a8 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1540:	69 81       	ldd	r22, Y+1	; 0x01
    1542:	7a 81       	ldd	r23, Y+2	; 0x02
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    154c:	2b 01       	movw	r4, r22
    154e:	3c 01       	movw	r6, r24
    1550:	c5 01       	movw	r24, r10
    1552:	b4 01       	movw	r22, r8
    1554:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1558:	4b 01       	movw	r8, r22
    155a:	5c 01       	movw	r10, r24
    155c:	c7 01       	movw	r24, r14
    155e:	b6 01       	movw	r22, r12
    1560:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1564:	6b 01       	movw	r12, r22
    1566:	7c 01       	movw	r14, r24
    1568:	2d b7       	in	r18, 0x3d	; 61
    156a:	3e b7       	in	r19, 0x3e	; 62
    156c:	29 50       	subi	r18, 0x09	; 9
    156e:	30 40       	sbci	r19, 0x00	; 0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	3e bf       	out	0x3e, r19	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	2d bf       	out	0x3d, r18	; 61
    157a:	ed b7       	in	r30, 0x3d	; 61
    157c:	fe b7       	in	r31, 0x3e	; 62
    157e:	31 96       	adiw	r30, 0x01	; 1
    1580:	ad b7       	in	r26, 0x3d	; 61
    1582:	be b7       	in	r27, 0x3e	; 62
    1584:	12 96       	adiw	r26, 0x02	; 2
    1586:	5c 92       	st	X, r5
    1588:	4e 92       	st	-X, r4
    158a:	11 97       	sbiw	r26, 0x01	; 1
    158c:	93 82       	std	Z+3, r9	; 0x03
    158e:	82 82       	std	Z+2, r8	; 0x02
    1590:	75 83       	std	Z+5, r23	; 0x05
    1592:	64 83       	std	Z+4, r22	; 0x04
    1594:	26 82       	std	Z+6, r2	; 0x06
    1596:	10 86       	std	Z+8, r1	; 0x08
    1598:	17 82       	std	Z+7, r1	; 0x07
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	62 e0       	ldi	r22, 0x02	; 2
    159e:	43 2d       	mov	r20, r3
    15a0:	92 01       	movw	r18, r4
    15a2:	84 01       	movw	r16, r8
    15a4:	76 01       	movw	r14, r12
    15a6:	c1 c1       	rjmp	.+898    	; 0x192a <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    15a8:	c3 01       	movw	r24, r6
    15aa:	b2 01       	movw	r22, r4
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    15b8:	88 23       	and	r24, r24
    15ba:	e9 f5       	brne	.+122    	; 0x1636 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    15bc:	69 81       	ldd	r22, Y+1	; 0x01
    15be:	7a 81       	ldd	r23, Y+2	; 0x02
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    15c8:	3b 01       	movw	r6, r22
    15ca:	c5 01       	movw	r24, r10
    15cc:	b4 01       	movw	r22, r8
    15ce:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    15d2:	8b 01       	movw	r16, r22
    15d4:	c7 01       	movw	r24, r14
    15d6:	b6 01       	movw	r22, r12
    15d8:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    15dc:	7b 01       	movw	r14, r22
    15de:	2d b7       	in	r18, 0x3d	; 61
    15e0:	3e b7       	in	r19, 0x3e	; 62
    15e2:	29 50       	subi	r18, 0x09	; 9
    15e4:	30 40       	sbci	r19, 0x00	; 0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	3e bf       	out	0x3e, r19	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	2d bf       	out	0x3d, r18	; 61
    15f0:	ed b7       	in	r30, 0x3d	; 61
    15f2:	fe b7       	in	r31, 0x3e	; 62
    15f4:	31 96       	adiw	r30, 0x01	; 1
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	33 20       	and	r3, r3
    15fa:	09 f4       	brne	.+2      	; 0x15fe <move_arc_stnb+0x1e4>
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	71 82       	std	Z+1, r7	; 0x01
    1600:	60 82       	st	Z, r6
    1602:	13 83       	std	Z+3, r17	; 0x03
    1604:	02 83       	std	Z+2, r16	; 0x02
    1606:	f5 82       	std	Z+5, r15	; 0x05
    1608:	e4 82       	std	Z+4, r14	; 0x04
    160a:	26 82       	std	Z+6, r2	; 0x06
    160c:	10 86       	std	Z+8, r1	; 0x08
    160e:	17 82       	std	Z+7, r1	; 0x07
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	62 e0       	ldi	r22, 0x02	; 2
    1614:	93 01       	movw	r18, r6
    1616:	c2 2c       	mov	r12, r2
    1618:	aa 24       	eor	r10, r10
    161a:	bb 24       	eor	r11, r11
    161c:	83 2c       	mov	r8, r3
    161e:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <STEPPER_move>
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	ad b7       	in	r26, 0x3d	; 61
    1626:	be b7       	in	r27, 0x3e	; 62
    1628:	19 96       	adiw	r26, 0x09	; 9
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	be bf       	out	0x3e, r27	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	ad bf       	out	0x3d, r26	; 61
    1634:	89 c1       	rjmp	.+786    	; 0x1948 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1636:	c3 01       	movw	r24, r6
    1638:	b2 01       	movw	r22, r4
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__gesf2>
    1646:	18 16       	cp	r1, r24
    1648:	0c f0       	brlt	.+2      	; 0x164c <move_arc_stnb+0x232>
    164a:	b1 c0       	rjmp	.+354    	; 0x17ae <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    164c:	66 e6       	ldi	r22, 0x66	; 102
    164e:	76 e6       	ldi	r23, 0x66	; 102
    1650:	8a ea       	ldi	r24, 0xAA	; 170
    1652:	91 ec       	ldi	r25, 0xC1	; 193
    1654:	a3 01       	movw	r20, r6
    1656:	92 01       	movw	r18, r4
    1658:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    1668:	7b 01       	movw	r14, r22
    166a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    166c:	66 e6       	ldi	r22, 0x66	; 102
    166e:	76 e6       	ldi	r23, 0x66	; 102
    1670:	8a ea       	ldi	r24, 0xAA	; 170
    1672:	91 e4       	ldi	r25, 0x41	; 65
    1674:	a3 01       	movw	r20, r6
    1676:	92 01       	movw	r18, r4
    1678:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e8       	ldi	r20, 0x80	; 128
    1682:	5f e3       	ldi	r21, 0x3F	; 63
    1684:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    1688:	5b 01       	movw	r10, r22
    168a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    168c:	ed b7       	in	r30, 0x3d	; 61
    168e:	fe b7       	in	r31, 0x3e	; 62
    1690:	39 97       	sbiw	r30, 0x09	; 9
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	fe bf       	out	0x3e, r31	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	ed bf       	out	0x3d, r30	; 61
    169c:	8d b6       	in	r8, 0x3d	; 61
    169e:	9e b6       	in	r9, 0x3e	; 62
    16a0:	08 94       	sec
    16a2:	81 1c       	adc	r8, r1
    16a4:	91 1c       	adc	r9, r1
    16a6:	6d 81       	ldd	r22, Y+5	; 0x05
    16a8:	7e 81       	ldd	r23, Y+6	; 0x06
    16aa:	8f 81       	ldd	r24, Y+7	; 0x07
    16ac:	98 85       	ldd	r25, Y+8	; 0x08
    16ae:	a8 01       	movw	r20, r16
    16b0:	97 01       	movw	r18, r14
    16b2:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    16b6:	2c ed       	ldi	r18, 0xDC	; 220
    16b8:	38 eb       	ldi	r19, 0xB8	; 184
    16ba:	48 e0       	ldi	r20, 0x08	; 8
    16bc:	5e e3       	ldi	r21, 0x3E	; 62
    16be:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    16c2:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    16c6:	69 8b       	std	Y+17, r22	; 0x11
    16c8:	7a 8b       	std	Y+18, r23	; 0x12
    16ca:	8b 8b       	std	Y+19, r24	; 0x13
    16cc:	9c 8b       	std	Y+20, r25	; 0x14
    16ce:	69 85       	ldd	r22, Y+9	; 0x09
    16d0:	7a 85       	ldd	r23, Y+10	; 0x0a
    16d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d6:	a8 01       	movw	r20, r16
    16d8:	97 01       	movw	r18, r14
    16da:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    16de:	2c ed       	ldi	r18, 0xDC	; 220
    16e0:	38 eb       	ldi	r19, 0xB8	; 184
    16e2:	48 e0       	ldi	r20, 0x08	; 8
    16e4:	5e e3       	ldi	r21, 0x3E	; 62
    16e6:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    16ea:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    16ee:	6d 8b       	std	Y+21, r22	; 0x15
    16f0:	7e 8b       	std	Y+22, r23	; 0x16
    16f2:	8f 8b       	std	Y+23, r24	; 0x17
    16f4:	98 8f       	std	Y+24, r25	; 0x18
    16f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    16f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    16fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fc:	98 89       	ldd	r25, Y+16	; 0x10
    16fe:	a8 01       	movw	r20, r16
    1700:	97 01       	movw	r18, r14
    1702:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1706:	2c ed       	ldi	r18, 0xDC	; 220
    1708:	38 eb       	ldi	r19, 0xB8	; 184
    170a:	48 e0       	ldi	r20, 0x08	; 8
    170c:	5e e3       	ldi	r21, 0x3E	; 62
    170e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1712:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1716:	2b 01       	movw	r4, r22
    1718:	3c 01       	movw	r6, r24
    171a:	6d 81       	ldd	r22, Y+5	; 0x05
    171c:	7e 81       	ldd	r23, Y+6	; 0x06
    171e:	8f 81       	ldd	r24, Y+7	; 0x07
    1720:	98 85       	ldd	r25, Y+8	; 0x08
    1722:	a6 01       	movw	r20, r12
    1724:	95 01       	movw	r18, r10
    1726:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    172a:	2c ed       	ldi	r18, 0xDC	; 220
    172c:	38 eb       	ldi	r19, 0xB8	; 184
    172e:	48 e0       	ldi	r20, 0x08	; 8
    1730:	5e e3       	ldi	r21, 0x3E	; 62
    1732:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1736:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    173a:	d4 01       	movw	r26, r8
    173c:	6d 93       	st	X+, r22
    173e:	7c 93       	st	X, r23
    1740:	69 85       	ldd	r22, Y+9	; 0x09
    1742:	7a 85       	ldd	r23, Y+10	; 0x0a
    1744:	8b 85       	ldd	r24, Y+11	; 0x0b
    1746:	9c 85       	ldd	r25, Y+12	; 0x0c
    1748:	a6 01       	movw	r20, r12
    174a:	95 01       	movw	r18, r10
    174c:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1750:	2c ed       	ldi	r18, 0xDC	; 220
    1752:	38 eb       	ldi	r19, 0xB8	; 184
    1754:	48 e0       	ldi	r20, 0x08	; 8
    1756:	5e e3       	ldi	r21, 0x3E	; 62
    1758:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    175c:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1760:	f4 01       	movw	r30, r8
    1762:	73 83       	std	Z+3, r23	; 0x03
    1764:	62 83       	std	Z+2, r22	; 0x02
    1766:	6d 85       	ldd	r22, Y+13	; 0x0d
    1768:	7e 85       	ldd	r23, Y+14	; 0x0e
    176a:	8f 85       	ldd	r24, Y+15	; 0x0f
    176c:	98 89       	ldd	r25, Y+16	; 0x10
    176e:	a6 01       	movw	r20, r12
    1770:	95 01       	movw	r18, r10
    1772:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1776:	2c ed       	ldi	r18, 0xDC	; 220
    1778:	38 eb       	ldi	r19, 0xB8	; 184
    177a:	48 e0       	ldi	r20, 0x08	; 8
    177c:	5e e3       	ldi	r21, 0x3E	; 62
    177e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1782:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1786:	d4 01       	movw	r26, r8
    1788:	15 96       	adiw	r26, 0x05	; 5
    178a:	7c 93       	st	X, r23
    178c:	6e 93       	st	-X, r22
    178e:	14 97       	sbiw	r26, 0x04	; 4
    1790:	16 96       	adiw	r26, 0x06	; 6
    1792:	2c 92       	st	X, r2
    1794:	16 97       	sbiw	r26, 0x06	; 6
    1796:	18 96       	adiw	r26, 0x08	; 8
    1798:	1c 92       	st	X, r1
    179a:	1e 92       	st	-X, r1
    179c:	17 97       	sbiw	r26, 0x07	; 7
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	62 e0       	ldi	r22, 0x02	; 2
    17a2:	43 2d       	mov	r20, r3
    17a4:	29 89       	ldd	r18, Y+17	; 0x11
    17a6:	3a 89       	ldd	r19, Y+18	; 0x12
    17a8:	0d 89       	ldd	r16, Y+21	; 0x15
    17aa:	1e 89       	ldd	r17, Y+22	; 0x16
    17ac:	bd c0       	rjmp	.+378    	; 0x1928 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    17ae:	c3 01       	movw	r24, r6
    17b0:	b2 01       	movw	r22, r4
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    17be:	87 fd       	sbrc	r24, 7
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <move_arc_stnb+0x3ac>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	c1 c0       	rjmp	.+386    	; 0x1948 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    17c6:	66 e6       	ldi	r22, 0x66	; 102
    17c8:	76 e6       	ldi	r23, 0x66	; 102
    17ca:	8a ea       	ldi	r24, 0xAA	; 170
    17cc:	91 e4       	ldi	r25, 0x41	; 65
    17ce:	a3 01       	movw	r20, r6
    17d0:	92 01       	movw	r18, r4
    17d2:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e8       	ldi	r20, 0x80	; 128
    17dc:	5f e3       	ldi	r21, 0x3F	; 63
    17de:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    17e2:	7b 01       	movw	r14, r22
    17e4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    17e6:	66 e6       	ldi	r22, 0x66	; 102
    17e8:	76 e6       	ldi	r23, 0x66	; 102
    17ea:	8a ea       	ldi	r24, 0xAA	; 170
    17ec:	91 ec       	ldi	r25, 0xC1	; 193
    17ee:	a3 01       	movw	r20, r6
    17f0:	92 01       	movw	r18, r4
    17f2:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e8       	ldi	r20, 0x80	; 128
    17fc:	5f e3       	ldi	r21, 0x3F	; 63
    17fe:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    1802:	5b 01       	movw	r10, r22
    1804:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1806:	2d b7       	in	r18, 0x3d	; 61
    1808:	3e b7       	in	r19, 0x3e	; 62
    180a:	29 50       	subi	r18, 0x09	; 9
    180c:	30 40       	sbci	r19, 0x00	; 0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	3e bf       	out	0x3e, r19	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	2d bf       	out	0x3d, r18	; 61
    1818:	8d b6       	in	r8, 0x3d	; 61
    181a:	9e b6       	in	r9, 0x3e	; 62
    181c:	08 94       	sec
    181e:	81 1c       	adc	r8, r1
    1820:	91 1c       	adc	r9, r1
    1822:	6d 81       	ldd	r22, Y+5	; 0x05
    1824:	7e 81       	ldd	r23, Y+6	; 0x06
    1826:	8f 81       	ldd	r24, Y+7	; 0x07
    1828:	98 85       	ldd	r25, Y+8	; 0x08
    182a:	a8 01       	movw	r20, r16
    182c:	97 01       	movw	r18, r14
    182e:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1832:	2c ed       	ldi	r18, 0xDC	; 220
    1834:	38 eb       	ldi	r19, 0xB8	; 184
    1836:	48 e0       	ldi	r20, 0x08	; 8
    1838:	5e e3       	ldi	r21, 0x3E	; 62
    183a:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    183e:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1842:	69 8f       	std	Y+25, r22	; 0x19
    1844:	7a 8f       	std	Y+26, r23	; 0x1a
    1846:	8b 8f       	std	Y+27, r24	; 0x1b
    1848:	9c 8f       	std	Y+28, r25	; 0x1c
    184a:	69 85       	ldd	r22, Y+9	; 0x09
    184c:	7a 85       	ldd	r23, Y+10	; 0x0a
    184e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1850:	9c 85       	ldd	r25, Y+12	; 0x0c
    1852:	a8 01       	movw	r20, r16
    1854:	97 01       	movw	r18, r14
    1856:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    185a:	2c ed       	ldi	r18, 0xDC	; 220
    185c:	38 eb       	ldi	r19, 0xB8	; 184
    185e:	48 e0       	ldi	r20, 0x08	; 8
    1860:	5e e3       	ldi	r21, 0x3E	; 62
    1862:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1866:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    186a:	6d 8f       	std	Y+29, r22	; 0x1d
    186c:	7e 8f       	std	Y+30, r23	; 0x1e
    186e:	8f 8f       	std	Y+31, r24	; 0x1f
    1870:	98 a3       	std	Y+32, r25	; 0x20
    1872:	6d 85       	ldd	r22, Y+13	; 0x0d
    1874:	7e 85       	ldd	r23, Y+14	; 0x0e
    1876:	8f 85       	ldd	r24, Y+15	; 0x0f
    1878:	98 89       	ldd	r25, Y+16	; 0x10
    187a:	a8 01       	movw	r20, r16
    187c:	97 01       	movw	r18, r14
    187e:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1882:	2c ed       	ldi	r18, 0xDC	; 220
    1884:	38 eb       	ldi	r19, 0xB8	; 184
    1886:	48 e0       	ldi	r20, 0x08	; 8
    1888:	5e e3       	ldi	r21, 0x3E	; 62
    188a:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    188e:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1892:	2b 01       	movw	r4, r22
    1894:	3c 01       	movw	r6, r24
    1896:	6d 81       	ldd	r22, Y+5	; 0x05
    1898:	7e 81       	ldd	r23, Y+6	; 0x06
    189a:	8f 81       	ldd	r24, Y+7	; 0x07
    189c:	98 85       	ldd	r25, Y+8	; 0x08
    189e:	a6 01       	movw	r20, r12
    18a0:	95 01       	movw	r18, r10
    18a2:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    18a6:	2c ed       	ldi	r18, 0xDC	; 220
    18a8:	38 eb       	ldi	r19, 0xB8	; 184
    18aa:	48 e0       	ldi	r20, 0x08	; 8
    18ac:	5e e3       	ldi	r21, 0x3E	; 62
    18ae:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    18b2:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    18b6:	d4 01       	movw	r26, r8
    18b8:	6d 93       	st	X+, r22
    18ba:	7c 93       	st	X, r23
    18bc:	69 85       	ldd	r22, Y+9	; 0x09
    18be:	7a 85       	ldd	r23, Y+10	; 0x0a
    18c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    18c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    18c4:	a6 01       	movw	r20, r12
    18c6:	95 01       	movw	r18, r10
    18c8:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    18cc:	2c ed       	ldi	r18, 0xDC	; 220
    18ce:	38 eb       	ldi	r19, 0xB8	; 184
    18d0:	48 e0       	ldi	r20, 0x08	; 8
    18d2:	5e e3       	ldi	r21, 0x3E	; 62
    18d4:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    18d8:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    18dc:	f4 01       	movw	r30, r8
    18de:	73 83       	std	Z+3, r23	; 0x03
    18e0:	62 83       	std	Z+2, r22	; 0x02
    18e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    18e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	98 89       	ldd	r25, Y+16	; 0x10
    18ea:	a6 01       	movw	r20, r12
    18ec:	95 01       	movw	r18, r10
    18ee:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    18f2:	2c ed       	ldi	r18, 0xDC	; 220
    18f4:	38 eb       	ldi	r19, 0xB8	; 184
    18f6:	48 e0       	ldi	r20, 0x08	; 8
    18f8:	5e e3       	ldi	r21, 0x3E	; 62
    18fa:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    18fe:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1902:	d4 01       	movw	r26, r8
    1904:	15 96       	adiw	r26, 0x05	; 5
    1906:	7c 93       	st	X, r23
    1908:	6e 93       	st	-X, r22
    190a:	14 97       	sbiw	r26, 0x04	; 4
    190c:	16 96       	adiw	r26, 0x06	; 6
    190e:	2c 92       	st	X, r2
    1910:	16 97       	sbiw	r26, 0x06	; 6
    1912:	18 96       	adiw	r26, 0x08	; 8
    1914:	1c 92       	st	X, r1
    1916:	1e 92       	st	-X, r1
    1918:	17 97       	sbiw	r26, 0x07	; 7
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	62 e0       	ldi	r22, 0x02	; 2
    191e:	43 2d       	mov	r20, r3
    1920:	29 8d       	ldd	r18, Y+25	; 0x19
    1922:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1924:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1926:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1928:	72 01       	movw	r14, r4
    192a:	c2 2c       	mov	r12, r2
    192c:	aa 24       	eor	r10, r10
    192e:	bb 24       	eor	r11, r11
    1930:	83 2c       	mov	r8, r3
    1932:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <STEPPER_move>
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	ed b7       	in	r30, 0x3d	; 61
    193a:	fe b7       	in	r31, 0x3e	; 62
    193c:	39 96       	adiw	r30, 0x09	; 9
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	fe bf       	out	0x3e, r31	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1948:	a0 96       	adiw	r28, 0x20	; 32
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	bf 90       	pop	r11
    1966:	af 90       	pop	r10
    1968:	9f 90       	pop	r9
    196a:	8f 90       	pop	r8
    196c:	7f 90       	pop	r7
    196e:	6f 90       	pop	r6
    1970:	5f 90       	pop	r5
    1972:	4f 90       	pop	r4
    1974:	3f 90       	pop	r3
    1976:	2f 90       	pop	r2
    1978:	08 95       	ret

0000197a <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    197a:	2f 92       	push	r2
    197c:	3f 92       	push	r3
    197e:	4f 92       	push	r4
    1980:	5f 92       	push	r5
    1982:	6f 92       	push	r6
    1984:	7f 92       	push	r7
    1986:	8f 92       	push	r8
    1988:	9f 92       	push	r9
    198a:	af 92       	push	r10
    198c:	bf 92       	push	r11
    198e:	cf 92       	push	r12
    1990:	df 92       	push	r13
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	a0 97       	sbiw	r28, 0x20	; 32
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	2b 01       	movw	r4, r22
    19b0:	3c 01       	movw	r6, r24
    19b2:	2d 83       	std	Y+5, r18	; 0x05
    19b4:	3e 83       	std	Y+6, r19	; 0x06
    19b6:	4f 83       	std	Y+7, r20	; 0x07
    19b8:	58 87       	std	Y+8, r21	; 0x08
    19ba:	e9 86       	std	Y+9, r14	; 0x09
    19bc:	fa 86       	std	Y+10, r15	; 0x0a
    19be:	0b 87       	std	Y+11, r16	; 0x0b
    19c0:	1c 87       	std	Y+12, r17	; 0x0c
    19c2:	ad 86       	std	Y+13, r10	; 0x0d
    19c4:	be 86       	std	Y+14, r11	; 0x0e
    19c6:	cf 86       	std	Y+15, r12	; 0x0f
    19c8:	d8 8a       	std	Y+16, r13	; 0x10
    19ca:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    19cc:	33 24       	eor	r3, r3
    19ce:	ca 01       	movw	r24, r20
    19d0:	b9 01       	movw	r22, r18
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__gesf2>
    19de:	18 16       	cp	r1, r24
    19e0:	14 f4       	brge	.+4      	; 0x19e6 <move_arc_stwt+0x6c>
    19e2:	33 24       	eor	r3, r3
    19e4:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    19e6:	6d 81       	ldd	r22, Y+5	; 0x05
    19e8:	7e 81       	ldd	r23, Y+6	; 0x06
    19ea:	8f 81       	ldd	r24, Y+7	; 0x07
    19ec:	98 85       	ldd	r25, Y+8	; 0x08
    19ee:	2c ed       	ldi	r18, 0xDC	; 220
    19f0:	38 eb       	ldi	r19, 0xB8	; 184
    19f2:	48 e0       	ldi	r20, 0x08	; 8
    19f4:	5e e3       	ldi	r21, 0x3E	; 62
    19f6:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    19fa:	0e 94 06 30 	call	0x600c	; 0x600c <__fixsfsi>
    19fe:	9b 01       	movw	r18, r22
    1a00:	77 ff       	sbrs	r23, 7
    1a02:	03 c0       	rjmp	.+6      	; 0x1a0a <move_arc_stwt+0x90>
    1a04:	30 95       	com	r19
    1a06:	21 95       	neg	r18
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	88 27       	eor	r24, r24
    1a0e:	77 fd       	sbrc	r23, 7
    1a10:	80 95       	com	r24
    1a12:	98 2f       	mov	r25, r24
    1a14:	0e 94 39 30 	call	0x6072	; 0x6072 <__floatsisf>
    1a18:	69 83       	std	Y+1, r22	; 0x01
    1a1a:	7a 83       	std	Y+2, r23	; 0x02
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1a20:	69 85       	ldd	r22, Y+9	; 0x09
    1a22:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a24:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a26:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a28:	2c ed       	ldi	r18, 0xDC	; 220
    1a2a:	38 eb       	ldi	r19, 0xB8	; 184
    1a2c:	48 e0       	ldi	r20, 0x08	; 8
    1a2e:	5e e3       	ldi	r21, 0x3E	; 62
    1a30:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1a34:	0e 94 06 30 	call	0x600c	; 0x600c <__fixsfsi>
    1a38:	9b 01       	movw	r18, r22
    1a3a:	77 ff       	sbrs	r23, 7
    1a3c:	03 c0       	rjmp	.+6      	; 0x1a44 <move_arc_stwt+0xca>
    1a3e:	30 95       	com	r19
    1a40:	21 95       	neg	r18
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	b9 01       	movw	r22, r18
    1a46:	88 27       	eor	r24, r24
    1a48:	77 fd       	sbrc	r23, 7
    1a4a:	80 95       	com	r24
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	0e 94 39 30 	call	0x6072	; 0x6072 <__floatsisf>
    1a52:	4b 01       	movw	r8, r22
    1a54:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1a56:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a58:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5c:	98 89       	ldd	r25, Y+16	; 0x10
    1a5e:	2c ed       	ldi	r18, 0xDC	; 220
    1a60:	38 eb       	ldi	r19, 0xB8	; 184
    1a62:	48 e0       	ldi	r20, 0x08	; 8
    1a64:	5e e3       	ldi	r21, 0x3E	; 62
    1a66:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1a6a:	0e 94 06 30 	call	0x600c	; 0x600c <__fixsfsi>
    1a6e:	9b 01       	movw	r18, r22
    1a70:	77 ff       	sbrs	r23, 7
    1a72:	03 c0       	rjmp	.+6      	; 0x1a7a <move_arc_stwt+0x100>
    1a74:	30 95       	com	r19
    1a76:	21 95       	neg	r18
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	b9 01       	movw	r22, r18
    1a7c:	88 27       	eor	r24, r24
    1a7e:	77 fd       	sbrc	r23, 7
    1a80:	80 95       	com	r24
    1a82:	98 2f       	mov	r25, r24
    1a84:	0e 94 39 30 	call	0x6072	; 0x6072 <__floatsisf>
    1a88:	6b 01       	movw	r12, r22
    1a8a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    1a8c:	c3 01       	movw	r24, r6
    1a8e:	b2 01       	movw	r22, r4
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	5f e4       	ldi	r21, 0x4F	; 79
    1a98:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	a1 f5       	brne	.+104    	; 0x1b08 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    1aa0:	69 81       	ldd	r22, Y+1	; 0x01
    1aa2:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1aac:	2b 01       	movw	r4, r22
    1aae:	3c 01       	movw	r6, r24
    1ab0:	c5 01       	movw	r24, r10
    1ab2:	b4 01       	movw	r22, r8
    1ab4:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1ab8:	4b 01       	movw	r8, r22
    1aba:	5c 01       	movw	r10, r24
    1abc:	c7 01       	movw	r24, r14
    1abe:	b6 01       	movw	r22, r12
    1ac0:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1ac4:	6b 01       	movw	r12, r22
    1ac6:	7c 01       	movw	r14, r24
    1ac8:	2d b7       	in	r18, 0x3d	; 61
    1aca:	3e b7       	in	r19, 0x3e	; 62
    1acc:	29 50       	subi	r18, 0x09	; 9
    1ace:	30 40       	sbci	r19, 0x00	; 0
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	3e bf       	out	0x3e, r19	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	2d bf       	out	0x3d, r18	; 61
    1ada:	ed b7       	in	r30, 0x3d	; 61
    1adc:	fe b7       	in	r31, 0x3e	; 62
    1ade:	31 96       	adiw	r30, 0x01	; 1
    1ae0:	ad b7       	in	r26, 0x3d	; 61
    1ae2:	be b7       	in	r27, 0x3e	; 62
    1ae4:	12 96       	adiw	r26, 0x02	; 2
    1ae6:	5c 92       	st	X, r5
    1ae8:	4e 92       	st	-X, r4
    1aea:	11 97       	sbiw	r26, 0x01	; 1
    1aec:	93 82       	std	Z+3, r9	; 0x03
    1aee:	82 82       	std	Z+2, r8	; 0x02
    1af0:	75 83       	std	Z+5, r23	; 0x05
    1af2:	64 83       	std	Z+4, r22	; 0x04
    1af4:	26 82       	std	Z+6, r2	; 0x06
    1af6:	10 86       	std	Z+8, r1	; 0x08
    1af8:	17 82       	std	Z+7, r1	; 0x07
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	62 e0       	ldi	r22, 0x02	; 2
    1afe:	43 2d       	mov	r20, r3
    1b00:	92 01       	movw	r18, r4
    1b02:	84 01       	movw	r16, r8
    1b04:	76 01       	movw	r14, r12
    1b06:	c1 c1       	rjmp	.+898    	; 0x1e8a <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1b08:	c3 01       	movw	r24, r6
    1b0a:	b2 01       	movw	r22, r4
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    1b18:	88 23       	and	r24, r24
    1b1a:	e9 f5       	brne	.+122    	; 0x1b96 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    1b1c:	69 81       	ldd	r22, Y+1	; 0x01
    1b1e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1b28:	3b 01       	movw	r6, r22
    1b2a:	c5 01       	movw	r24, r10
    1b2c:	b4 01       	movw	r22, r8
    1b2e:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1b32:	8b 01       	movw	r16, r22
    1b34:	c7 01       	movw	r24, r14
    1b36:	b6 01       	movw	r22, r12
    1b38:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1b3c:	7b 01       	movw	r14, r22
    1b3e:	2d b7       	in	r18, 0x3d	; 61
    1b40:	3e b7       	in	r19, 0x3e	; 62
    1b42:	29 50       	subi	r18, 0x09	; 9
    1b44:	30 40       	sbci	r19, 0x00	; 0
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	3e bf       	out	0x3e, r19	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	2d bf       	out	0x3d, r18	; 61
    1b50:	ed b7       	in	r30, 0x3d	; 61
    1b52:	fe b7       	in	r31, 0x3e	; 62
    1b54:	31 96       	adiw	r30, 0x01	; 1
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	33 20       	and	r3, r3
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <move_arc_stwt+0x1e4>
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	71 82       	std	Z+1, r7	; 0x01
    1b60:	60 82       	st	Z, r6
    1b62:	13 83       	std	Z+3, r17	; 0x03
    1b64:	02 83       	std	Z+2, r16	; 0x02
    1b66:	f5 82       	std	Z+5, r15	; 0x05
    1b68:	e4 82       	std	Z+4, r14	; 0x04
    1b6a:	26 82       	std	Z+6, r2	; 0x06
    1b6c:	10 86       	std	Z+8, r1	; 0x08
    1b6e:	17 82       	std	Z+7, r1	; 0x07
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	62 e0       	ldi	r22, 0x02	; 2
    1b74:	93 01       	movw	r18, r6
    1b76:	c2 2c       	mov	r12, r2
    1b78:	aa 24       	eor	r10, r10
    1b7a:	bb 24       	eor	r11, r11
    1b7c:	83 2c       	mov	r8, r3
    1b7e:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <STEPPER_move>
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	ad b7       	in	r26, 0x3d	; 61
    1b86:	be b7       	in	r27, 0x3e	; 62
    1b88:	19 96       	adiw	r26, 0x09	; 9
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	be bf       	out	0x3e, r27	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	ad bf       	out	0x3d, r26	; 61
    1b94:	89 c1       	rjmp	.+786    	; 0x1ea8 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1b96:	c3 01       	movw	r24, r6
    1b98:	b2 01       	movw	r22, r4
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__gesf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	0c f0       	brlt	.+2      	; 0x1bac <move_arc_stwt+0x232>
    1baa:	b1 c0       	rjmp	.+354    	; 0x1d0e <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1bac:	66 e6       	ldi	r22, 0x66	; 102
    1bae:	76 e6       	ldi	r23, 0x66	; 102
    1bb0:	8a ea       	ldi	r24, 0xAA	; 170
    1bb2:	91 ec       	ldi	r25, 0xC1	; 193
    1bb4:	a3 01       	movw	r20, r6
    1bb6:	92 01       	movw	r18, r4
    1bb8:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    1bc8:	7b 01       	movw	r14, r22
    1bca:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1bcc:	66 e6       	ldi	r22, 0x66	; 102
    1bce:	76 e6       	ldi	r23, 0x66	; 102
    1bd0:	8a ea       	ldi	r24, 0xAA	; 170
    1bd2:	91 e4       	ldi	r25, 0x41	; 65
    1bd4:	a3 01       	movw	r20, r6
    1bd6:	92 01       	movw	r18, r4
    1bd8:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    1be8:	5b 01       	movw	r10, r22
    1bea:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1bec:	ed b7       	in	r30, 0x3d	; 61
    1bee:	fe b7       	in	r31, 0x3e	; 62
    1bf0:	39 97       	sbiw	r30, 0x09	; 9
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	fe bf       	out	0x3e, r31	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	ed bf       	out	0x3d, r30	; 61
    1bfc:	8d b6       	in	r8, 0x3d	; 61
    1bfe:	9e b6       	in	r9, 0x3e	; 62
    1c00:	08 94       	sec
    1c02:	81 1c       	adc	r8, r1
    1c04:	91 1c       	adc	r9, r1
    1c06:	6d 81       	ldd	r22, Y+5	; 0x05
    1c08:	7e 81       	ldd	r23, Y+6	; 0x06
    1c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c0c:	98 85       	ldd	r25, Y+8	; 0x08
    1c0e:	a8 01       	movw	r20, r16
    1c10:	97 01       	movw	r18, r14
    1c12:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1c16:	2c ed       	ldi	r18, 0xDC	; 220
    1c18:	38 eb       	ldi	r19, 0xB8	; 184
    1c1a:	48 e0       	ldi	r20, 0x08	; 8
    1c1c:	5e e3       	ldi	r21, 0x3E	; 62
    1c1e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1c22:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1c26:	69 8b       	std	Y+17, r22	; 0x11
    1c28:	7a 8b       	std	Y+18, r23	; 0x12
    1c2a:	8b 8b       	std	Y+19, r24	; 0x13
    1c2c:	9c 8b       	std	Y+20, r25	; 0x14
    1c2e:	69 85       	ldd	r22, Y+9	; 0x09
    1c30:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c32:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c34:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c36:	a8 01       	movw	r20, r16
    1c38:	97 01       	movw	r18, r14
    1c3a:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1c3e:	2c ed       	ldi	r18, 0xDC	; 220
    1c40:	38 eb       	ldi	r19, 0xB8	; 184
    1c42:	48 e0       	ldi	r20, 0x08	; 8
    1c44:	5e e3       	ldi	r21, 0x3E	; 62
    1c46:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1c4a:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1c4e:	6d 8b       	std	Y+21, r22	; 0x15
    1c50:	7e 8b       	std	Y+22, r23	; 0x16
    1c52:	8f 8b       	std	Y+23, r24	; 0x17
    1c54:	98 8f       	std	Y+24, r25	; 0x18
    1c56:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c58:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5c:	98 89       	ldd	r25, Y+16	; 0x10
    1c5e:	a8 01       	movw	r20, r16
    1c60:	97 01       	movw	r18, r14
    1c62:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1c66:	2c ed       	ldi	r18, 0xDC	; 220
    1c68:	38 eb       	ldi	r19, 0xB8	; 184
    1c6a:	48 e0       	ldi	r20, 0x08	; 8
    1c6c:	5e e3       	ldi	r21, 0x3E	; 62
    1c6e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1c72:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1c76:	2b 01       	movw	r4, r22
    1c78:	3c 01       	movw	r6, r24
    1c7a:	6d 81       	ldd	r22, Y+5	; 0x05
    1c7c:	7e 81       	ldd	r23, Y+6	; 0x06
    1c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c80:	98 85       	ldd	r25, Y+8	; 0x08
    1c82:	a6 01       	movw	r20, r12
    1c84:	95 01       	movw	r18, r10
    1c86:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1c8a:	2c ed       	ldi	r18, 0xDC	; 220
    1c8c:	38 eb       	ldi	r19, 0xB8	; 184
    1c8e:	48 e0       	ldi	r20, 0x08	; 8
    1c90:	5e e3       	ldi	r21, 0x3E	; 62
    1c92:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1c96:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1c9a:	d4 01       	movw	r26, r8
    1c9c:	6d 93       	st	X+, r22
    1c9e:	7c 93       	st	X, r23
    1ca0:	69 85       	ldd	r22, Y+9	; 0x09
    1ca2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ca4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ca6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ca8:	a6 01       	movw	r20, r12
    1caa:	95 01       	movw	r18, r10
    1cac:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1cb0:	2c ed       	ldi	r18, 0xDC	; 220
    1cb2:	38 eb       	ldi	r19, 0xB8	; 184
    1cb4:	48 e0       	ldi	r20, 0x08	; 8
    1cb6:	5e e3       	ldi	r21, 0x3E	; 62
    1cb8:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1cbc:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1cc0:	f4 01       	movw	r30, r8
    1cc2:	73 83       	std	Z+3, r23	; 0x03
    1cc4:	62 83       	std	Z+2, r22	; 0x02
    1cc6:	6d 85       	ldd	r22, Y+13	; 0x0d
    1cc8:	7e 85       	ldd	r23, Y+14	; 0x0e
    1cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ccc:	98 89       	ldd	r25, Y+16	; 0x10
    1cce:	a6 01       	movw	r20, r12
    1cd0:	95 01       	movw	r18, r10
    1cd2:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1cd6:	2c ed       	ldi	r18, 0xDC	; 220
    1cd8:	38 eb       	ldi	r19, 0xB8	; 184
    1cda:	48 e0       	ldi	r20, 0x08	; 8
    1cdc:	5e e3       	ldi	r21, 0x3E	; 62
    1cde:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1ce2:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1ce6:	d4 01       	movw	r26, r8
    1ce8:	15 96       	adiw	r26, 0x05	; 5
    1cea:	7c 93       	st	X, r23
    1cec:	6e 93       	st	-X, r22
    1cee:	14 97       	sbiw	r26, 0x04	; 4
    1cf0:	16 96       	adiw	r26, 0x06	; 6
    1cf2:	2c 92       	st	X, r2
    1cf4:	16 97       	sbiw	r26, 0x06	; 6
    1cf6:	18 96       	adiw	r26, 0x08	; 8
    1cf8:	1c 92       	st	X, r1
    1cfa:	1e 92       	st	-X, r1
    1cfc:	17 97       	sbiw	r26, 0x07	; 7
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	62 e0       	ldi	r22, 0x02	; 2
    1d02:	43 2d       	mov	r20, r3
    1d04:	29 89       	ldd	r18, Y+17	; 0x11
    1d06:	3a 89       	ldd	r19, Y+18	; 0x12
    1d08:	0d 89       	ldd	r16, Y+21	; 0x15
    1d0a:	1e 89       	ldd	r17, Y+22	; 0x16
    1d0c:	bd c0       	rjmp	.+378    	; 0x1e88 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    1d0e:	c3 01       	movw	r24, r6
    1d10:	b2 01       	movw	r22, r4
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    1d1e:	87 fd       	sbrc	r24, 7
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <move_arc_stwt+0x3ac>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	c1 c0       	rjmp	.+386    	; 0x1ea8 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1d26:	66 e6       	ldi	r22, 0x66	; 102
    1d28:	76 e6       	ldi	r23, 0x66	; 102
    1d2a:	8a ea       	ldi	r24, 0xAA	; 170
    1d2c:	91 e4       	ldi	r25, 0x41	; 65
    1d2e:	a3 01       	movw	r20, r6
    1d30:	92 01       	movw	r18, r4
    1d32:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    1d42:	7b 01       	movw	r14, r22
    1d44:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1d46:	66 e6       	ldi	r22, 0x66	; 102
    1d48:	76 e6       	ldi	r23, 0x66	; 102
    1d4a:	8a ea       	ldi	r24, 0xAA	; 170
    1d4c:	91 ec       	ldi	r25, 0xC1	; 193
    1d4e:	a3 01       	movw	r20, r6
    1d50:	92 01       	movw	r18, r4
    1d52:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e8       	ldi	r20, 0x80	; 128
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    1d62:	5b 01       	movw	r10, r22
    1d64:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1d66:	2d b7       	in	r18, 0x3d	; 61
    1d68:	3e b7       	in	r19, 0x3e	; 62
    1d6a:	29 50       	subi	r18, 0x09	; 9
    1d6c:	30 40       	sbci	r19, 0x00	; 0
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	3e bf       	out	0x3e, r19	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	2d bf       	out	0x3d, r18	; 61
    1d78:	8d b6       	in	r8, 0x3d	; 61
    1d7a:	9e b6       	in	r9, 0x3e	; 62
    1d7c:	08 94       	sec
    1d7e:	81 1c       	adc	r8, r1
    1d80:	91 1c       	adc	r9, r1
    1d82:	6d 81       	ldd	r22, Y+5	; 0x05
    1d84:	7e 81       	ldd	r23, Y+6	; 0x06
    1d86:	8f 81       	ldd	r24, Y+7	; 0x07
    1d88:	98 85       	ldd	r25, Y+8	; 0x08
    1d8a:	a8 01       	movw	r20, r16
    1d8c:	97 01       	movw	r18, r14
    1d8e:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1d92:	2c ed       	ldi	r18, 0xDC	; 220
    1d94:	38 eb       	ldi	r19, 0xB8	; 184
    1d96:	48 e0       	ldi	r20, 0x08	; 8
    1d98:	5e e3       	ldi	r21, 0x3E	; 62
    1d9a:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1d9e:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1da2:	69 8f       	std	Y+25, r22	; 0x19
    1da4:	7a 8f       	std	Y+26, r23	; 0x1a
    1da6:	8b 8f       	std	Y+27, r24	; 0x1b
    1da8:	9c 8f       	std	Y+28, r25	; 0x1c
    1daa:	69 85       	ldd	r22, Y+9	; 0x09
    1dac:	7a 85       	ldd	r23, Y+10	; 0x0a
    1dae:	8b 85       	ldd	r24, Y+11	; 0x0b
    1db0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1db2:	a8 01       	movw	r20, r16
    1db4:	97 01       	movw	r18, r14
    1db6:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1dba:	2c ed       	ldi	r18, 0xDC	; 220
    1dbc:	38 eb       	ldi	r19, 0xB8	; 184
    1dbe:	48 e0       	ldi	r20, 0x08	; 8
    1dc0:	5e e3       	ldi	r21, 0x3E	; 62
    1dc2:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1dc6:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1dca:	6d 8f       	std	Y+29, r22	; 0x1d
    1dcc:	7e 8f       	std	Y+30, r23	; 0x1e
    1dce:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd0:	98 a3       	std	Y+32, r25	; 0x20
    1dd2:	6d 85       	ldd	r22, Y+13	; 0x0d
    1dd4:	7e 85       	ldd	r23, Y+14	; 0x0e
    1dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd8:	98 89       	ldd	r25, Y+16	; 0x10
    1dda:	a8 01       	movw	r20, r16
    1ddc:	97 01       	movw	r18, r14
    1dde:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1de2:	2c ed       	ldi	r18, 0xDC	; 220
    1de4:	38 eb       	ldi	r19, 0xB8	; 184
    1de6:	48 e0       	ldi	r20, 0x08	; 8
    1de8:	5e e3       	ldi	r21, 0x3E	; 62
    1dea:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1dee:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1df2:	2b 01       	movw	r4, r22
    1df4:	3c 01       	movw	r6, r24
    1df6:	6d 81       	ldd	r22, Y+5	; 0x05
    1df8:	7e 81       	ldd	r23, Y+6	; 0x06
    1dfa:	8f 81       	ldd	r24, Y+7	; 0x07
    1dfc:	98 85       	ldd	r25, Y+8	; 0x08
    1dfe:	a6 01       	movw	r20, r12
    1e00:	95 01       	movw	r18, r10
    1e02:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1e06:	2c ed       	ldi	r18, 0xDC	; 220
    1e08:	38 eb       	ldi	r19, 0xB8	; 184
    1e0a:	48 e0       	ldi	r20, 0x08	; 8
    1e0c:	5e e3       	ldi	r21, 0x3E	; 62
    1e0e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1e12:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1e16:	d4 01       	movw	r26, r8
    1e18:	6d 93       	st	X+, r22
    1e1a:	7c 93       	st	X, r23
    1e1c:	69 85       	ldd	r22, Y+9	; 0x09
    1e1e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e20:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e22:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e24:	a6 01       	movw	r20, r12
    1e26:	95 01       	movw	r18, r10
    1e28:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1e2c:	2c ed       	ldi	r18, 0xDC	; 220
    1e2e:	38 eb       	ldi	r19, 0xB8	; 184
    1e30:	48 e0       	ldi	r20, 0x08	; 8
    1e32:	5e e3       	ldi	r21, 0x3E	; 62
    1e34:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1e38:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1e3c:	f4 01       	movw	r30, r8
    1e3e:	73 83       	std	Z+3, r23	; 0x03
    1e40:	62 83       	std	Z+2, r22	; 0x02
    1e42:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e44:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e48:	98 89       	ldd	r25, Y+16	; 0x10
    1e4a:	a6 01       	movw	r20, r12
    1e4c:	95 01       	movw	r18, r10
    1e4e:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    1e52:	2c ed       	ldi	r18, 0xDC	; 220
    1e54:	38 eb       	ldi	r19, 0xB8	; 184
    1e56:	48 e0       	ldi	r20, 0x08	; 8
    1e58:	5e e3       	ldi	r21, 0x3E	; 62
    1e5a:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    1e5e:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    1e62:	d4 01       	movw	r26, r8
    1e64:	15 96       	adiw	r26, 0x05	; 5
    1e66:	7c 93       	st	X, r23
    1e68:	6e 93       	st	-X, r22
    1e6a:	14 97       	sbiw	r26, 0x04	; 4
    1e6c:	16 96       	adiw	r26, 0x06	; 6
    1e6e:	2c 92       	st	X, r2
    1e70:	16 97       	sbiw	r26, 0x06	; 6
    1e72:	18 96       	adiw	r26, 0x08	; 8
    1e74:	1c 92       	st	X, r1
    1e76:	1e 92       	st	-X, r1
    1e78:	17 97       	sbiw	r26, 0x07	; 7
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	62 e0       	ldi	r22, 0x02	; 2
    1e7e:	43 2d       	mov	r20, r3
    1e80:	29 8d       	ldd	r18, Y+25	; 0x19
    1e82:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1e84:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1e86:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1e88:	72 01       	movw	r14, r4
    1e8a:	c2 2c       	mov	r12, r2
    1e8c:	aa 24       	eor	r10, r10
    1e8e:	bb 24       	eor	r11, r11
    1e90:	83 2c       	mov	r8, r3
    1e92:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <STEPPER_move>
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	ed b7       	in	r30, 0x3d	; 61
    1e9a:	fe b7       	in	r31, 0x3e	; 62
    1e9c:	39 96       	adiw	r30, 0x09	; 9
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	fe bf       	out	0x3e, r31	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1ea8:	a0 96       	adiw	r28, 0x20	; 32
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
    1ec4:	bf 90       	pop	r11
    1ec6:	af 90       	pop	r10
    1ec8:	9f 90       	pop	r9
    1eca:	8f 90       	pop	r8
    1ecc:	7f 90       	pop	r7
    1ece:	6f 90       	pop	r6
    1ed0:	5f 90       	pop	r5
    1ed2:	4f 90       	pop	r4
    1ed4:	3f 90       	pop	r3
    1ed6:	2f 90       	pop	r2
    1ed8:	08 95       	ret

00001eda <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1eda:	0e 94 8b 22 	call	0x4516	; 0x4516 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1ede:	28 2f       	mov	r18, r24
    1ee0:	21 70       	andi	r18, 0x01	; 1
    1ee2:	20 93 63 06 	sts	0x0663, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	82 70       	andi	r24, 0x02	; 2
    1eea:	90 70       	andi	r25, 0x00	; 0
    1eec:	95 95       	asr	r25
    1eee:	87 95       	ror	r24
    1ef0:	80 93 64 06 	sts	0x0664, r24
}
    1ef4:	08 95       	ret

00001ef6 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1ef6:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1efa:	60 93 5b 05 	sts	0x055B, r22
    1efe:	70 93 5c 05 	sts	0x055C, r23
    1f02:	80 93 5d 05 	sts	0x055D, r24
    1f06:	90 93 5e 05 	sts	0x055E, r25
	leftLightVolt = getLeftLight();
    1f0a:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1f0e:	60 93 f2 06 	sts	0x06F2, r22
    1f12:	70 93 f3 06 	sts	0x06F3, r23
    1f16:	80 93 f4 06 	sts	0x06F4, r24
    1f1a:	90 93 f5 06 	sts	0x06F5, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1f1e:	08 95       	ret

00001f20 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1f20:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1f24:	60 93 c4 04 	sts	0x04C4, r22
    1f28:	70 93 c5 04 	sts	0x04C5, r23
    1f2c:	80 93 c6 04 	sts	0x04C6, r24
    1f30:	90 93 c7 04 	sts	0x04C7, r25
	bkIR = getBackIR();
    1f34:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1f38:	60 93 ce 04 	sts	0x04CE, r22
    1f3c:	70 93 cf 04 	sts	0x04CF, r23
    1f40:	80 93 d0 04 	sts	0x04D0, r24
    1f44:	90 93 d1 04 	sts	0x04D1, r25
	ltIR = getLeftIR();
    1f48:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1f4c:	60 93 65 06 	sts	0x0665, r22
    1f50:	70 93 66 06 	sts	0x0666, r23
    1f54:	80 93 67 06 	sts	0x0667, r24
    1f58:	90 93 68 06 	sts	0x0668, r25
	rtIR = getRightIR();
    1f5c:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1f60:	60 93 6a 06 	sts	0x066A, r22
    1f64:	70 93 6b 06 	sts	0x066B, r23
    1f68:	80 93 6c 06 	sts	0x066C, r24
    1f6c:	90 93 6d 06 	sts	0x066D, r25
}
    1f70:	08 95       	ret

00001f72 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	16 2f       	mov	r17, r22
    1f84:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1f86:	0f e1       	ldi	r16, 0x1F	; 31
    1f88:	f0 2e       	mov	r15, r16
    1f8a:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1f8c:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1f8e:	0f 2d       	mov	r16, r15
    1f90:	06 95       	lsr	r16
    1f92:	06 95       	lsr	r16
    1f94:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1f96:	c0 2f       	mov	r28, r16
    1f98:	d0 e0       	ldi	r29, 0x00	; 0
    1f9a:	c1 2e       	mov	r12, r17
    1f9c:	dd 24       	eor	r13, r13
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	b6 01       	movw	r22, r12
    1fa2:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1fa6:	80 2f       	mov	r24, r16
    1fa8:	61 2f       	mov	r22, r17
    1faa:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <LCD_set_next_PGC>
    1fae:	fe 01       	movw	r30, r28
    1fb0:	b5 e0       	ldi	r27, 0x05	; 5
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	ba 95       	dec	r27
    1fb8:	e1 f7       	brne	.-8      	; 0x1fb2 <LCD_set_pixel+0x40>
    1fba:	2f 2d       	mov	r18, r15
    1fbc:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1fbe:	ee 20       	and	r14, r14
    1fc0:	89 f0       	breq	.+34     	; 0x1fe4 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1fc2:	ec 0d       	add	r30, r12
    1fc4:	fd 1d       	adc	r31, r13
    1fc6:	e3 52       	subi	r30, 0x23	; 35
    1fc8:	fa 4f       	sbci	r31, 0xFA	; 250
    1fca:	27 70       	andi	r18, 0x07	; 7
    1fcc:	30 70       	andi	r19, 0x00	; 0
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <LCD_set_pixel+0x66>
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	2a 95       	dec	r18
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <LCD_set_pixel+0x62>
    1fdc:	20 81       	ld	r18, Z
    1fde:	28 2b       	or	r18, r24
    1fe0:	20 83       	st	Z, r18
    1fe2:	11 c0       	rjmp	.+34     	; 0x2006 <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1fe4:	ec 0d       	add	r30, r12
    1fe6:	fd 1d       	adc	r31, r13
    1fe8:	e3 52       	subi	r30, 0x23	; 35
    1fea:	fa 4f       	sbci	r31, 0xFA	; 250
    1fec:	27 70       	andi	r18, 0x07	; 7
    1fee:	30 70       	andi	r19, 0x00	; 0
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <LCD_set_pixel+0x88>
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	2a 95       	dec	r18
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <LCD_set_pixel+0x84>
    1ffe:	80 95       	com	r24
    2000:	20 81       	ld	r18, Z
    2002:	82 23       	and	r24, r18
    2004:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    2006:	a5 e0       	ldi	r26, 0x05	; 5
    2008:	cc 0f       	add	r28, r28
    200a:	dd 1f       	adc	r29, r29
    200c:	aa 95       	dec	r26
    200e:	e1 f7       	brne	.-8      	; 0x2008 <LCD_set_pixel+0x96>
    2010:	cc 0d       	add	r28, r12
    2012:	dd 1d       	adc	r29, r13
    2014:	c3 52       	subi	r28, 0x23	; 35
    2016:	da 4f       	sbci	r29, 0xFA	; 250
    2018:	88 81       	ld	r24, Y
    201a:	61 e0       	ldi	r22, 0x01	; 1
    201c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
}
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	ff 90       	pop	r15
    202a:	ef 90       	pop	r14
    202c:	df 90       	pop	r13
    202e:	cf 90       	pop	r12
    2030:	08 95       	ret

00002032 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent){
    2032:	9f 92       	push	r9
    2034:	af 92       	push	r10
    2036:	bf 92       	push	r11
    2038:	cf 92       	push	r12
    203a:	df 92       	push	r13
    203c:	ef 92       	push	r14
    203e:	ff 92       	push	r15
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	a8 2e       	mov	r10, r24
    2046:	d6 2e       	mov	r13, r22
    2048:	e4 2e       	mov	r14, r20
    204a:	b2 2e       	mov	r11, r18
    204c:	90 2e       	mov	r9, r16

	r = r*LCD_CELL_OFFSET;
    204e:	dd 0c       	add	r13, r13
    2050:	dd 0c       	add	r13, r13
    2052:	dd 0c       	add	r13, r13
	c = c*LCD_CELL_OFFSET;
    2054:	ff 24       	eor	r15, r15
    2056:	53 e0       	ldi	r21, 0x03	; 3
    2058:	ee 0c       	add	r14, r14
    205a:	ff 1c       	adc	r15, r15
    205c:	5a 95       	dec	r21
    205e:	e1 f7       	brne	.-8      	; 0x2058 <printCell+0x26>
    2060:	1e 2d       	mov	r17, r14
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    2062:	0f e1       	ldi	r16, 0x1F	; 31
    2064:	0d 19       	sub	r16, r13
    2066:	80 2f       	mov	r24, r16
    2068:	6e 2d       	mov	r22, r14
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    2070:	48 e1       	ldi	r20, 0x18	; 24
    2072:	c4 2e       	mov	r12, r20
    2074:	cd 18       	sub	r12, r13
    2076:	8c 2d       	mov	r24, r12
    2078:	6e 2d       	mov	r22, r14
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    2080:	37 e0       	ldi	r19, 0x07	; 7
    2082:	f3 2e       	mov	r15, r19
    2084:	f1 0e       	add	r15, r17
    2086:	80 2f       	mov	r24, r16
    2088:	6f 2d       	mov	r22, r15
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    2090:	8c 2d       	mov	r24, r12
    2092:	6f 2d       	mov	r22, r15
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	
	if(cell&0b1000){
    209a:	ea 2c       	mov	r14, r10
    209c:	a3 fe       	sbrs	r10, 3
    209e:	24 c0       	rjmp	.+72     	; 0x20e8 <printCell+0xb6>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    20a0:	61 2f       	mov	r22, r17
    20a2:	6f 5f       	subi	r22, 0xFF	; 255
    20a4:	80 2f       	mov	r24, r16
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    20ac:	61 2f       	mov	r22, r17
    20ae:	6e 5f       	subi	r22, 0xFE	; 254
    20b0:	80 2f       	mov	r24, r16
    20b2:	41 e0       	ldi	r20, 0x01	; 1
    20b4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    20b8:	61 2f       	mov	r22, r17
    20ba:	6d 5f       	subi	r22, 0xFD	; 253
    20bc:	80 2f       	mov	r24, r16
    20be:	41 e0       	ldi	r20, 0x01	; 1
    20c0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    20c4:	61 2f       	mov	r22, r17
    20c6:	6c 5f       	subi	r22, 0xFC	; 252
    20c8:	80 2f       	mov	r24, r16
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    20d0:	61 2f       	mov	r22, r17
    20d2:	6b 5f       	subi	r22, 0xFB	; 251
    20d4:	80 2f       	mov	r24, r16
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    20dc:	61 2f       	mov	r22, r17
    20de:	6a 5f       	subi	r22, 0xFA	; 250
    20e0:	80 2f       	mov	r24, r16
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	}
	if(cell&0b0100){
    20e8:	e2 fe       	sbrs	r14, 2
    20ea:	25 c0       	rjmp	.+74     	; 0x2136 <printCell+0x104>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    20ec:	8d 2d       	mov	r24, r13
    20ee:	80 95       	com	r24
    20f0:	81 5e       	subi	r24, 0xE1	; 225
    20f2:	6f 2d       	mov	r22, r15
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    20fa:	8d e1       	ldi	r24, 0x1D	; 29
    20fc:	8d 19       	sub	r24, r13
    20fe:	6f 2d       	mov	r22, r15
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    2106:	8c e1       	ldi	r24, 0x1C	; 28
    2108:	8d 19       	sub	r24, r13
    210a:	6f 2d       	mov	r22, r15
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    2112:	8b e1       	ldi	r24, 0x1B	; 27
    2114:	8d 19       	sub	r24, r13
    2116:	6f 2d       	mov	r22, r15
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    211e:	8a e1       	ldi	r24, 0x1A	; 26
    2120:	8d 19       	sub	r24, r13
    2122:	6f 2d       	mov	r22, r15
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    212a:	89 e1       	ldi	r24, 0x19	; 25
    212c:	8d 19       	sub	r24, r13
    212e:	6f 2d       	mov	r22, r15
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	}
	if(cell&0b0010){
    2136:	e1 fe       	sbrs	r14, 1
    2138:	24 c0       	rjmp	.+72     	; 0x2182 <printCell+0x150>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    213a:	61 2f       	mov	r22, r17
    213c:	6f 5f       	subi	r22, 0xFF	; 255
    213e:	8c 2d       	mov	r24, r12
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    2146:	61 2f       	mov	r22, r17
    2148:	6e 5f       	subi	r22, 0xFE	; 254
    214a:	8c 2d       	mov	r24, r12
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    2152:	61 2f       	mov	r22, r17
    2154:	6d 5f       	subi	r22, 0xFD	; 253
    2156:	8c 2d       	mov	r24, r12
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    215e:	61 2f       	mov	r22, r17
    2160:	6c 5f       	subi	r22, 0xFC	; 252
    2162:	8c 2d       	mov	r24, r12
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    216a:	61 2f       	mov	r22, r17
    216c:	6b 5f       	subi	r22, 0xFB	; 251
    216e:	8c 2d       	mov	r24, r12
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    2176:	61 2f       	mov	r22, r17
    2178:	6a 5f       	subi	r22, 0xFA	; 250
    217a:	8c 2d       	mov	r24, r12
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	}
	if(cell&0b0001){
    2182:	e0 fe       	sbrs	r14, 0
    2184:	25 c0       	rjmp	.+74     	; 0x21d0 <printCell+0x19e>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    2186:	8d 2d       	mov	r24, r13
    2188:	80 95       	com	r24
    218a:	81 5e       	subi	r24, 0xE1	; 225
    218c:	61 2f       	mov	r22, r17
    218e:	41 e0       	ldi	r20, 0x01	; 1
    2190:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    2194:	8d e1       	ldi	r24, 0x1D	; 29
    2196:	8d 19       	sub	r24, r13
    2198:	61 2f       	mov	r22, r17
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    21a0:	8c e1       	ldi	r24, 0x1C	; 28
    21a2:	8d 19       	sub	r24, r13
    21a4:	61 2f       	mov	r22, r17
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    21ac:	8b e1       	ldi	r24, 0x1B	; 27
    21ae:	8d 19       	sub	r24, r13
    21b0:	61 2f       	mov	r22, r17
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    21b8:	8a e1       	ldi	r24, 0x1A	; 26
    21ba:	8d 19       	sub	r24, r13
    21bc:	61 2f       	mov	r22, r17
    21be:	41 e0       	ldi	r20, 0x01	; 1
    21c0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    21c4:	89 e1       	ldi	r24, 0x19	; 25
    21c6:	8d 19       	sub	r24, r13
    21c8:	61 2f       	mov	r22, r17
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	}	
	if(isrobot){
    21d0:	bb 20       	and	r11, r11
    21d2:	e1 f1       	breq	.+120    	; 0x224c <printCell+0x21a>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    21d4:	2c e1       	ldi	r18, 0x1C	; 28
    21d6:	f2 2e       	mov	r15, r18
    21d8:	fd 18       	sub	r15, r13
    21da:	93 e0       	ldi	r25, 0x03	; 3
    21dc:	c9 2e       	mov	r12, r25
    21de:	c1 0e       	add	r12, r17
    21e0:	8f 2d       	mov	r24, r15
    21e2:	6c 2d       	mov	r22, r12
    21e4:	4b 2d       	mov	r20, r11
    21e6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    21ea:	8b e1       	ldi	r24, 0x1B	; 27
    21ec:	e8 2e       	mov	r14, r24
    21ee:	ed 18       	sub	r14, r13
    21f0:	8e 2d       	mov	r24, r14
    21f2:	6c 2d       	mov	r22, r12
    21f4:	4b 2d       	mov	r20, r11
    21f6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    21fa:	01 2f       	mov	r16, r17
    21fc:	0c 5f       	subi	r16, 0xFC	; 252
    21fe:	8f 2d       	mov	r24, r15
    2200:	60 2f       	mov	r22, r16
    2202:	4b 2d       	mov	r20, r11
    2204:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    2208:	8e 2d       	mov	r24, r14
    220a:	60 2f       	mov	r22, r16
    220c:	4b 2d       	mov	r20, r11
    220e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		
		switch(orent){
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	98 16       	cp	r9, r24
    2216:	69 f0       	breq	.+26     	; 0x2232 <printCell+0x200>
    2218:	98 16       	cp	r9, r24
    221a:	38 f0       	brcs	.+14     	; 0x222a <printCell+0x1f8>
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	98 16       	cp	r9, r24
    2220:	59 f0       	breq	.+22     	; 0x2238 <printCell+0x206>
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	98 16       	cp	r9, r24
    2226:	91 f4       	brne	.+36     	; 0x224c <printCell+0x21a>
    2228:	0b c0       	rjmp	.+22     	; 0x2240 <printCell+0x20e>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    222a:	8d e1       	ldi	r24, 0x1D	; 29
    222c:	8d 19       	sub	r24, r13
    222e:	6c 2d       	mov	r22, r12
    2230:	0a c0       	rjmp	.+20     	; 0x2246 <printCell+0x214>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    2232:	1b 5f       	subi	r17, 0xFB	; 251
    2234:	8f 2d       	mov	r24, r15
    2236:	06 c0       	rjmp	.+12     	; 0x2244 <printCell+0x212>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    2238:	8a e1       	ldi	r24, 0x1A	; 26
    223a:	8d 19       	sub	r24, r13
    223c:	60 2f       	mov	r22, r16
    223e:	03 c0       	rjmp	.+6      	; 0x2246 <printCell+0x214>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    2240:	1e 5f       	subi	r17, 0xFE	; 254
    2242:	8e 2d       	mov	r24, r14
    2244:	61 2f       	mov	r22, r17
    2246:	4b 2d       	mov	r20, r11
    2248:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
				break;
			default:
				break;
		}
	}
}
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	bf 90       	pop	r11
    225a:	af 90       	pop	r10
    225c:	9f 90       	pop	r9
    225e:	08 95       	ret

00002260 <printMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(void)
{
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    2272:	80 91 61 06 	lds	r24, 0x0661
    2276:	b8 2e       	mov	r11, r24
    2278:	b6 94       	lsr	r11
    227a:	b6 94       	lsr	r11
	unsigned char curCol = currentCellWorld & 0b0011;
    227c:	73 e0       	ldi	r23, 0x03	; 3
    227e:	c7 2e       	mov	r12, r23
    2280:	c8 22       	and	r12, r24
    2282:	ee 24       	eor	r14, r14
    2284:	ff 24       	eor	r15, r15
    2286:	1d c0       	rjmp	.+58     	; 0x22c2 <printMap+0x62>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    2288:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    228a:	db 14       	cp	r13, r11
    228c:	19 f0       	breq	.+6      	; 0x2294 <printMap+0x34>
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	06 c0       	rjmp	.+12     	; 0x22a0 <printMap+0x40>
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	1c 15       	cp	r17, r12
    229a:	11 f4       	brne	.+4      	; 0x22a0 <printMap+0x40>
    229c:	21 e0       	ldi	r18, 0x01	; 1
    229e:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation);
    22a0:	6d 2d       	mov	r22, r13
    22a2:	41 2f       	mov	r20, r17
    22a4:	00 91 60 05 	lds	r16, 0x0560
    22a8:	0e 94 19 10 	call	0x2032	; 0x2032 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    22ac:	1f 5f       	subi	r17, 0xFF	; 255
    22ae:	21 96       	adiw	r28, 0x01	; 1
    22b0:	14 30       	cpi	r17, 0x04	; 4
    22b2:	51 f7       	brne	.-44     	; 0x2288 <printMap+0x28>
    22b4:	08 94       	sec
    22b6:	e1 1c       	adc	r14, r1
    22b8:	f1 1c       	adc	r15, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    22ba:	84 e0       	ldi	r24, 0x04	; 4
    22bc:	e8 16       	cp	r14, r24
    22be:	f1 04       	cpc	r15, r1
    22c0:	51 f0       	breq	.+20     	; 0x22d6 <printMap+0x76>
    22c2:	de 2c       	mov	r13, r14
    22c4:	e7 01       	movw	r28, r14
    22c6:	cc 0f       	add	r28, r28
    22c8:	dd 1f       	adc	r29, r29
    22ca:	cc 0f       	add	r28, r28
    22cc:	dd 1f       	adc	r29, r29
    22ce:	c5 5a       	subi	r28, 0xA5	; 165
    22d0:	dc 4f       	sbci	r29, 0xFC	; 252
    22d2:	10 e0       	ldi	r17, 0x00	; 0
    22d4:	d9 cf       	rjmp	.-78     	; 0x2288 <printMap+0x28>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation);
		}	
	}
}
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	ff 90       	pop	r15
    22e0:	ef 90       	pop	r14
    22e2:	df 90       	pop	r13
    22e4:	cf 90       	pop	r12
    22e6:	bf 90       	pop	r11
    22e8:	08 95       	ret

000022ea <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
    22ea:	1f 93       	push	r17
    22ec:	18 2f       	mov	r17, r24
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	
	// AT START: odometry is REALLY SMALL & odometryTrigger is at approx 343
	// Suggest breaking apart the IF case?
	if((odometry > odometryTrigger))
    22ee:	60 91 f6 06 	lds	r22, 0x06F6
    22f2:	70 91 f7 06 	lds	r23, 0x06F7
    22f6:	80 91 f8 06 	lds	r24, 0x06F8
    22fa:	90 91 f9 06 	lds	r25, 0x06F9
    22fe:	20 91 48 04 	lds	r18, 0x0448
    2302:	30 91 49 04 	lds	r19, 0x0449
    2306:	40 91 4a 04 	lds	r20, 0x044A
    230a:	50 91 4b 04 	lds	r21, 0x044B
    230e:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	5f e3       	ldi	r21, 0x3F	; 63
    231a:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    231e:	2c ed       	ldi	r18, 0xDC	; 220
    2320:	38 eb       	ldi	r19, 0xB8	; 184
    2322:	48 e0       	ldi	r20, 0x08	; 8
    2324:	5e e3       	ldi	r21, 0x3E	; 62
    2326:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    232a:	20 91 4b 05 	lds	r18, 0x054B
    232e:	30 91 4c 05 	lds	r19, 0x054C
    2332:	40 91 4d 05 	lds	r20, 0x054D
    2336:	50 91 4e 05 	lds	r21, 0x054E
    233a:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__gesf2>
    233e:	18 16       	cp	r1, r24
    2340:	bc f4       	brge	.+46     	; 0x2370 <checkOdometry+0x86>
	{
		odometryFlag = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	80 93 69 06 	sts	0x0669, r24
		odometryStepL = 0;
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a0 e0       	ldi	r26, 0x00	; 0
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	80 93 f6 06 	sts	0x06F6, r24
    2354:	90 93 f7 06 	sts	0x06F7, r25
    2358:	a0 93 f8 06 	sts	0x06F8, r26
    235c:	b0 93 f9 06 	sts	0x06F9, r27
		odometryStepR = 0;
    2360:	80 93 48 04 	sts	0x0448, r24
    2364:	90 93 49 04 	sts	0x0449, r25
    2368:	a0 93 4a 04 	sts	0x044A, r26
    236c:	b0 93 4b 04 	sts	0x044B, r27
	}
	if (reset){
    2370:	11 23       	and	r17, r17
    2372:	d9 f0       	breq	.+54     	; 0x23aa <checkOdometry+0xc0>
		STEPPER_set_steps(STEPPER_BOTH,0);
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <STEPPER_set_steps>
		odometryFlag = 0;
    237e:	10 92 69 06 	sts	0x0669, r1
		odometryStepL = 0;
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e0       	ldi	r26, 0x00	; 0
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	80 93 f6 06 	sts	0x06F6, r24
    238e:	90 93 f7 06 	sts	0x06F7, r25
    2392:	a0 93 f8 06 	sts	0x06F8, r26
    2396:	b0 93 f9 06 	sts	0x06F9, r27
		odometryStepR = 0;
    239a:	80 93 48 04 	sts	0x0448, r24
    239e:	90 93 49 04 	sts	0x0449, r25
    23a2:	a0 93 4a 04 	sts	0x044A, r26
    23a6:	b0 93 4b 04 	sts	0x044B, r27
	
	// // Else the flag RESETS to ZERO?!
	// else{
		// odometryFlag = 0;
	// }
}
    23aa:	1f 91       	pop	r17
    23ac:	08 95       	ret

000023ae <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    23ae:	0e 94 0a 23 	call	0x4614	; 0x4614 <ATTINY_open>
    23b2:	90 93 47 04 	sts	0x0447, r25
    23b6:	80 93 46 04 	sts	0x0446, r24
	LEopstat = LED_open(); //open the LED module
    23ba:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <LED_open>
    23be:	90 93 45 04 	sts	0x0445, r25
    23c2:	80 93 44 04 	sts	0x0444, r24
	LCopstat = LCD_open(); //open the LCD module
    23c6:	0e 94 9b 1c 	call	0x3936	; 0x3936 <LCD_open>
    23ca:	90 93 43 04 	sts	0x0443, r25
    23ce:	80 93 42 04 	sts	0x0442, r24
	STEPPER_open(); // Open STEPPER module for use
    23d2:	0e 94 06 20 	call	0x400c	; 0x400c <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <SPKR_open>
	
	LED_open();
    23dc:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <LED_open>
	I2C_open();
    23e0:	0e 94 64 24 	call	0x48c8	; 0x48c8 <I2C_open>
	ADC_open();//open the ADC module
    23e4:	0e 94 08 1c 	call	0x3810	; 0x3810 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	0e 94 6a 1c 	call	0x38d4	; 0x38d4 <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    23ee:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <checkIR>
	prefilter(1);
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    23f8:	8f ee       	ldi	r24, 0xEF	; 239
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a5 e8       	ldi	r26, 0x85	; 133
    23fe:	b1 e4       	ldi	r27, 0x41	; 65
    2400:	80 93 4b 05 	sts	0x054B, r24
    2404:	90 93 4c 05 	sts	0x054C, r25
    2408:	a0 93 4d 05 	sts	0x054D, r26
    240c:	b0 93 4e 05 	sts	0x054E, r27
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	0a c0       	rjmp	.+20     	; 0x242a <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    2416:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	80 32       	cpi	r24, 0x20	; 32
    241c:	91 05       	cpc	r25, r1
    241e:	d9 f7       	brne	.-10     	; 0x2416 <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    2420:	2f 5f       	subi	r18, 0xFF	; 255
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	24 30       	cpi	r18, 0x04	; 4
    2426:	31 05       	cpc	r19, r1
    2428:	59 f0       	breq	.+22     	; 0x2440 <initializeRobot+0x92>
    242a:	f9 01       	movw	r30, r18
    242c:	a5 e0       	ldi	r26, 0x05	; 5
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	aa 95       	dec	r26
    2434:	e1 f7       	brne	.-8      	; 0x242e <initializeRobot+0x80>
    2436:	e3 52       	subi	r30, 0x23	; 35
    2438:	fa 4f       	sbci	r31, 0xFA	; 250
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	eb cf       	rjmp	.-42     	; 0x2416 <initializeRobot+0x68>
    2440:	08 95       	ret

00002442 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    2442:	ef 92       	push	r14
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    244a:	60 91 c4 04 	lds	r22, 0x04C4
    244e:	70 91 c5 04 	lds	r23, 0x04C5
    2452:	80 91 c6 04 	lds	r24, 0x04C6
    2456:	90 91 c7 04 	lds	r25, 0x04C7
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e5       	ldi	r20, 0x50	; 80
    2460:	51 e4       	ldi	r21, 0x41	; 65
    2462:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    2466:	f8 2e       	mov	r15, r24
    2468:	ff 1c       	adc	r15, r15
    246a:	ff 24       	eor	r15, r15
    246c:	ff 1c       	adc	r15, r15
    246e:	ff 0c       	add	r15, r15
    2470:	ff 0c       	add	r15, r15
    2472:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    2474:	60 91 65 06 	lds	r22, 0x0665
    2478:	70 91 66 06 	lds	r23, 0x0666
    247c:	80 91 67 06 	lds	r24, 0x0667
    2480:	90 91 68 06 	lds	r25, 0x0668
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 ef       	ldi	r20, 0xF0	; 240
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    2490:	08 2f       	mov	r16, r24
    2492:	00 1f       	adc	r16, r16
    2494:	00 27       	eor	r16, r16
    2496:	00 1f       	adc	r16, r16
    2498:	00 0f       	add	r16, r16
    249a:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    249c:	60 91 ce 04 	lds	r22, 0x04CE
    24a0:	70 91 cf 04 	lds	r23, 0x04CF
    24a4:	80 91 d0 04 	lds	r24, 0x04D0
    24a8:	90 91 d1 04 	lds	r25, 0x04D1
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4c e0       	ldi	r20, 0x0C	; 12
    24b2:	52 e4       	ldi	r21, 0x42	; 66
    24b4:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    24b8:	18 2f       	mov	r17, r24
    24ba:	11 1f       	adc	r17, r17
    24bc:	11 27       	eor	r17, r17
    24be:	11 1f       	adc	r17, r17
    24c0:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    24c2:	ee 24       	eor	r14, r14
    24c4:	60 91 6a 06 	lds	r22, 0x066A
    24c8:	70 91 6b 06 	lds	r23, 0x066B
    24cc:	80 91 6c 06 	lds	r24, 0x066C
    24d0:	90 91 6d 06 	lds	r25, 0x066D
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 ef       	ldi	r20, 0xF0	; 240
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    24e0:	88 23       	and	r24, r24
    24e2:	14 f4       	brge	.+4      	; 0x24e8 <checkWorld+0xa6>
    24e4:	ee 24       	eor	r14, r14
    24e6:	e3 94       	inc	r14
    24e8:	8f 2d       	mov	r24, r15
    24ea:	8e 0d       	add	r24, r14
    24ec:	80 0f       	add	r24, r16
    24ee:	81 0f       	add	r24, r17
    24f0:	80 93 cc 04 	sts	0x04CC, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    24f4:	20 91 cd 04 	lds	r18, 0x04CD
    24f8:	e2 2f       	mov	r30, r18
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	ea 51       	subi	r30, 0x1A	; 26
    24fe:	f9 4f       	sbci	r31, 0xF9	; 249
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	90 93 d2 04 	sts	0x04D2, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    2506:	89 17       	cp	r24, r25
    2508:	19 f4       	brne	.+6      	; 0x2510 <checkWorld+0xce>
		currentMoveWorld += 1;
    250a:	2f 5f       	subi	r18, 0xFF	; 255
    250c:	20 93 cd 04 	sts	0x04CD, r18
	}
}
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	ff 90       	pop	r15
    2516:	ef 90       	pop	r14
    2518:	08 95       	ret

0000251a <moveWallOld>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWallOld( void )
{	
    251a:	2f 92       	push	r2
    251c:	3f 92       	push	r3
    251e:	4f 92       	push	r4
    2520:	5f 92       	push	r5
    2522:	6f 92       	push	r6
    2524:	7f 92       	push	r7
    2526:	8f 92       	push	r8
    2528:	9f 92       	push	r9
    252a:	af 92       	push	r10
    252c:	bf 92       	push	r11
    252e:	cf 92       	push	r12
    2530:	df 92       	push	r13
    2532:	ef 92       	push	r14
    2534:	ff 92       	push	r15
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    253a:	e0 90 c4 04 	lds	r14, 0x04C4
    253e:	f0 90 c5 04 	lds	r15, 0x04C5
    2542:	00 91 c6 04 	lds	r16, 0x04C6
    2546:	10 91 c7 04 	lds	r17, 0x04C7
    254a:	33 24       	eor	r3, r3
    254c:	c8 01       	movw	r24, r16
    254e:	b7 01       	movw	r22, r14
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	50 e0       	ldi	r21, 0x00	; 0
    2558:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    255c:	88 23       	and	r24, r24
    255e:	14 f4       	brge	.+4      	; 0x2564 <moveWallOld+0x4a>
    2560:	33 24       	eor	r3, r3
    2562:	33 94       	inc	r3
    2564:	a0 90 6a 06 	lds	r10, 0x066A
    2568:	b0 90 6b 06 	lds	r11, 0x066B
    256c:	c0 90 6c 06 	lds	r12, 0x066C
    2570:	d0 90 6d 06 	lds	r13, 0x066D
    2574:	40 90 65 06 	lds	r4, 0x0665
    2578:	50 90 66 06 	lds	r5, 0x0666
    257c:	60 90 67 06 	lds	r6, 0x0667
    2580:	70 90 68 06 	lds	r7, 0x0668
    2584:	88 24       	eor	r8, r8
    2586:	60 91 ce 04 	lds	r22, 0x04CE
    258a:	70 91 cf 04 	lds	r23, 0x04CF
    258e:	80 91 d0 04 	lds	r24, 0x04D0
    2592:	90 91 d1 04 	lds	r25, 0x04D1
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e7       	ldi	r20, 0x70	; 112
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    25a2:	88 23       	and	r24, r24
    25a4:	14 f4       	brge	.+4      	; 0x25aa <moveWallOld+0x90>
    25a6:	88 24       	eor	r8, r8
    25a8:	83 94       	inc	r8
    25aa:	93 2c       	mov	r9, r3
    25ac:	98 28       	or	r9, r8
    25ae:	88 24       	eor	r8, r8
    25b0:	c6 01       	movw	r24, r12
    25b2:	b5 01       	movw	r22, r10
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e7       	ldi	r20, 0x70	; 112
    25ba:	51 e4       	ldi	r21, 0x41	; 65
    25bc:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    25c0:	88 23       	and	r24, r24
    25c2:	14 f4       	brge	.+4      	; 0x25c8 <moveWallOld+0xae>
    25c4:	88 24       	eor	r8, r8
    25c6:	83 94       	inc	r8
    25c8:	98 28       	or	r9, r8
    25ca:	88 24       	eor	r8, r8
    25cc:	c3 01       	movw	r24, r6
    25ce:	b2 01       	movw	r22, r4
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e7       	ldi	r20, 0x70	; 112
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    25dc:	88 23       	and	r24, r24
    25de:	14 f4       	brge	.+4      	; 0x25e4 <moveWallOld+0xca>
    25e0:	88 24       	eor	r8, r8
    25e2:	83 94       	inc	r8
    25e4:	29 2c       	mov	r2, r9
    25e6:	28 28       	or	r2, r8
	if(!isWall){	
    25e8:	81 f4       	brne	.+32     	; 0x260a <moveWallOld+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	9f e4       	ldi	r25, 0x4F	; 79
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e2       	ldi	r20, 0x20	; 32
    25f8:	51 e4       	ldi	r21, 0x41	; 65
    25fa:	79 01       	movw	r14, r18
    25fc:	8a 01       	movw	r16, r20
    25fe:	59 01       	movw	r10, r18
    2600:	6a 01       	movw	r12, r20
    2602:	88 24       	eor	r8, r8
    2604:	0e 94 0d 0a 	call	0x141a	; 0x141a <move_arc_stnb>
    2608:	f7 c0       	rjmp	.+494    	; 0x27f8 <moveWallOld+0x2de>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    260a:	c6 01       	movw	r24, r12
    260c:	b5 01       	movw	r22, r10
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e7       	ldi	r20, 0x70	; 112
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__gesf2>
    261a:	18 16       	cp	r1, r24
    261c:	64 f4       	brge	.+24     	; 0x2636 <moveWallOld+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a0 e4       	ldi	r26, 0x40	; 64
    2624:	b0 ec       	ldi	r27, 0xC0	; 192
    2626:	80 93 6a 06 	sts	0x066A, r24
    262a:	90 93 6b 06 	sts	0x066B, r25
    262e:	a0 93 6c 06 	sts	0x066C, r26
    2632:	b0 93 6d 06 	sts	0x066D, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    2636:	c3 01       	movw	r24, r6
    2638:	b2 01       	movw	r22, r4
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e7       	ldi	r20, 0x70	; 112
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__gesf2>
    2646:	18 16       	cp	r1, r24
    2648:	14 f0       	brlt	.+4      	; 0x264e <moveWallOld+0x134>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	0d c0       	rjmp	.+26     	; 0x2668 <moveWallOld+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 e4       	ldi	r26, 0x40	; 64
    2654:	b0 ec       	ldi	r27, 0xC0	; 192
    2656:	80 93 65 06 	sts	0x0665, r24
    265a:	90 93 66 06 	sts	0x0666, r25
    265e:	a0 93 67 06 	sts	0x0667, r26
    2662:	b0 93 68 06 	sts	0x0668, r27
    2666:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    2668:	33 20       	and	r3, r3
    266a:	21 f1       	breq	.+72     	; 0x26b4 <moveWallOld+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    266c:	88 23       	and	r24, r24
    266e:	29 f0       	breq	.+10     	; 0x267a <moveWallOld+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	70 e0       	ldi	r23, 0x00	; 0
    2674:	8a e7       	ldi	r24, 0x7A	; 122
    2676:	94 e4       	ldi	r25, 0x44	; 68
    2678:	04 c0       	rjmp	.+8      	; 0x2682 <moveWallOld+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	8a e7       	ldi	r24, 0x7A	; 122
    2680:	94 ec       	ldi	r25, 0xC4	; 196
    2682:	a8 01       	movw	r20, r16
    2684:	97 01       	movw	r18, r14
    2686:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    268a:	20 91 65 06 	lds	r18, 0x0665
    268e:	30 91 66 06 	lds	r19, 0x0666
    2692:	40 91 67 06 	lds	r20, 0x0667
    2696:	50 91 68 06 	lds	r21, 0x0668
    269a:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    269e:	9b 01       	movw	r18, r22
    26a0:	ac 01       	movw	r20, r24
    26a2:	60 91 6a 06 	lds	r22, 0x066A
    26a6:	70 91 6b 06 	lds	r23, 0x066B
    26aa:	80 91 6c 06 	lds	r24, 0x066C
    26ae:	90 91 6d 06 	lds	r25, 0x066D
    26b2:	10 c0       	rjmp	.+32     	; 0x26d4 <moveWallOld+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    26b4:	60 91 6a 06 	lds	r22, 0x066A
    26b8:	70 91 6b 06 	lds	r23, 0x066B
    26bc:	80 91 6c 06 	lds	r24, 0x066C
    26c0:	90 91 6d 06 	lds	r25, 0x066D
    26c4:	20 91 65 06 	lds	r18, 0x0665
    26c8:	30 91 66 06 	lds	r19, 0x0666
    26cc:	40 91 67 06 	lds	r20, 0x0667
    26d0:	50 91 68 06 	lds	r21, 0x0668
    26d4:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    26d8:	90 58       	subi	r25, 0x80	; 128
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    26e0:	6b 01       	movw	r12, r22
    26e2:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    26e4:	0e 94 06 30 	call	0x600c	; 0x600c <__fixsfsi>
    26e8:	8b 01       	movw	r16, r22
    26ea:	77 ff       	sbrs	r23, 7
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <moveWallOld+0x1da>
    26ee:	10 95       	com	r17
    26f0:	01 95       	neg	r16
    26f2:	1f 4f       	sbci	r17, 0xFF	; 255
    26f4:	05 36       	cpi	r16, 0x65	; 101
    26f6:	11 05       	cpc	r17, r1
    26f8:	fc f0       	brlt	.+62     	; 0x2738 <moveWallOld+0x21e>
    26fa:	c7 01       	movw	r24, r14
    26fc:	b6 01       	movw	r22, r12
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    270a:	88 23       	and	r24, r24
    270c:	a9 f0       	breq	.+42     	; 0x2738 <moveWallOld+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    270e:	b8 01       	movw	r22, r16
    2710:	88 27       	eor	r24, r24
    2712:	77 fd       	sbrc	r23, 7
    2714:	80 95       	com	r24
    2716:	98 2f       	mov	r25, r24
    2718:	0e 94 39 30 	call	0x6072	; 0x6072 <__floatsisf>
    271c:	9b 01       	movw	r18, r22
    271e:	ac 01       	movw	r20, r24
    2720:	c7 01       	movw	r24, r14
    2722:	b6 01       	movw	r22, r12
    2724:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	48 ec       	ldi	r20, 0xC8	; 200
    272e:	52 e4       	ldi	r21, 0x42	; 66
    2730:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    2734:	6b 01       	movw	r12, r22
    2736:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2738:	c7 01       	movw	r24, r14
    273a:	b6 01       	movw	r22, r12
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	48 ec       	ldi	r20, 0xC8	; 200
    2742:	52 e4       	ldi	r21, 0x42	; 66
    2744:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    2748:	6b 01       	movw	r12, r22
    274a:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    274c:	8d b7       	in	r24, 0x3d	; 61
    274e:	9e b7       	in	r25, 0x3e	; 62
    2750:	09 97       	sbiw	r24, 0x09	; 9
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	9e bf       	out	0x3e, r25	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	8d bf       	out	0x3d, r24	; 61
    275c:	0d b7       	in	r16, 0x3d	; 61
    275e:	1e b7       	in	r17, 0x3e	; 62
    2760:	0f 5f       	subi	r16, 0xFF	; 255
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	c7 01       	movw	r24, r14
    2766:	b6 01       	movw	r22, r12
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	48 ec       	ldi	r20, 0xC8	; 200
    276e:	52 e4       	ldi	r21, 0x42	; 66
    2770:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	48 ec       	ldi	r20, 0xC8	; 200
    277a:	52 e4       	ldi	r21, 0x42	; 66
    277c:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    2780:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    2784:	4b 01       	movw	r8, r22
    2786:	5c 01       	movw	r10, r24
    2788:	82 e3       	ldi	r24, 0x32	; 50
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	f8 01       	movw	r30, r16
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	80 83       	st	Z, r24
    2792:	c7 01       	movw	r24, r14
    2794:	b6 01       	movw	r22, r12
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	48 ec       	ldi	r20, 0xC8	; 200
    279c:	52 ec       	ldi	r21, 0xC2	; 194
    279e:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	48 ec       	ldi	r20, 0xC8	; 200
    27a8:	52 e4       	ldi	r21, 0x42	; 66
    27aa:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    27ae:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    27b2:	f8 01       	movw	r30, r16
    27b4:	73 83       	std	Z+3, r23	; 0x03
    27b6:	62 83       	std	Z+2, r22	; 0x02
    27b8:	82 ec       	ldi	r24, 0xC2	; 194
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	95 83       	std	Z+5, r25	; 0x05
    27be:	84 83       	std	Z+4, r24	; 0x04
    27c0:	16 82       	std	Z+6, r1	; 0x06
    27c2:	10 86       	std	Z+8, r1	; 0x08
    27c4:	17 82       	std	Z+7, r1	; 0x07
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	62 e0       	ldi	r22, 0x02	; 2
    27ca:	41 e0       	ldi	r20, 0x01	; 1
    27cc:	22 e3       	ldi	r18, 0x32	; 50
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	84 01       	movw	r16, r8
    27d2:	92 ec       	ldi	r25, 0xC2	; 194
    27d4:	e9 2e       	mov	r14, r25
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	f9 2e       	mov	r15, r25
    27da:	cc 24       	eor	r12, r12
    27dc:	aa 24       	eor	r10, r10
    27de:	bb 24       	eor	r11, r11
    27e0:	88 24       	eor	r8, r8
    27e2:	83 94       	inc	r8
    27e4:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <STEPPER_move>
    27e8:	8d b7       	in	r24, 0x3d	; 61
    27ea:	9e b7       	in	r25, 0x3e	; 62
    27ec:	09 96       	adiw	r24, 0x09	; 9
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	9e bf       	out	0x3e, r25	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    27f8:	82 2d       	mov	r24, r2
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	ff 90       	pop	r15
    2800:	ef 90       	pop	r14
    2802:	df 90       	pop	r13
    2804:	cf 90       	pop	r12
    2806:	bf 90       	pop	r11
    2808:	af 90       	pop	r10
    280a:	9f 90       	pop	r9
    280c:	8f 90       	pop	r8
    280e:	7f 90       	pop	r7
    2810:	6f 90       	pop	r6
    2812:	5f 90       	pop	r5
    2814:	4f 90       	pop	r4
    2816:	3f 90       	pop	r3
    2818:	2f 90       	pop	r2
    281a:	08 95       	ret

0000281c <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    281c:	2f 92       	push	r2
    281e:	3f 92       	push	r3
    2820:	4f 92       	push	r4
    2822:	5f 92       	push	r5
    2824:	6f 92       	push	r6
    2826:	7f 92       	push	r7
    2828:	8f 92       	push	r8
    282a:	9f 92       	push	r9
    282c:	af 92       	push	r10
    282e:	bf 92       	push	r11
    2830:	cf 92       	push	r12
    2832:	df 92       	push	r13
    2834:	ef 92       	push	r14
    2836:	ff 92       	push	r15
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    283c:	e0 90 c4 04 	lds	r14, 0x04C4
    2840:	f0 90 c5 04 	lds	r15, 0x04C5
    2844:	00 91 c6 04 	lds	r16, 0x04C6
    2848:	10 91 c7 04 	lds	r17, 0x04C7
    284c:	33 24       	eor	r3, r3
    284e:	c8 01       	movw	r24, r16
    2850:	b7 01       	movw	r22, r14
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    285e:	88 23       	and	r24, r24
    2860:	14 f4       	brge	.+4      	; 0x2866 <moveWall+0x4a>
    2862:	33 24       	eor	r3, r3
    2864:	33 94       	inc	r3
    2866:	a0 90 6a 06 	lds	r10, 0x066A
    286a:	b0 90 6b 06 	lds	r11, 0x066B
    286e:	c0 90 6c 06 	lds	r12, 0x066C
    2872:	d0 90 6d 06 	lds	r13, 0x066D
    2876:	40 90 65 06 	lds	r4, 0x0665
    287a:	50 90 66 06 	lds	r5, 0x0666
    287e:	60 90 67 06 	lds	r6, 0x0667
    2882:	70 90 68 06 	lds	r7, 0x0668
    2886:	88 24       	eor	r8, r8
    2888:	60 91 ce 04 	lds	r22, 0x04CE
    288c:	70 91 cf 04 	lds	r23, 0x04CF
    2890:	80 91 d0 04 	lds	r24, 0x04D0
    2894:	90 91 d1 04 	lds	r25, 0x04D1
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e7       	ldi	r20, 0x70	; 112
    289e:	51 e4       	ldi	r21, 0x41	; 65
    28a0:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    28a4:	88 23       	and	r24, r24
    28a6:	14 f4       	brge	.+4      	; 0x28ac <moveWall+0x90>
    28a8:	88 24       	eor	r8, r8
    28aa:	83 94       	inc	r8
    28ac:	93 2c       	mov	r9, r3
    28ae:	98 28       	or	r9, r8
    28b0:	88 24       	eor	r8, r8
    28b2:	c6 01       	movw	r24, r12
    28b4:	b5 01       	movw	r22, r10
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e7       	ldi	r20, 0x70	; 112
    28bc:	51 e4       	ldi	r21, 0x41	; 65
    28be:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    28c2:	88 23       	and	r24, r24
    28c4:	14 f4       	brge	.+4      	; 0x28ca <moveWall+0xae>
    28c6:	88 24       	eor	r8, r8
    28c8:	83 94       	inc	r8
    28ca:	98 28       	or	r9, r8
    28cc:	88 24       	eor	r8, r8
    28ce:	c3 01       	movw	r24, r6
    28d0:	b2 01       	movw	r22, r4
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e7       	ldi	r20, 0x70	; 112
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    28de:	88 23       	and	r24, r24
    28e0:	14 f4       	brge	.+4      	; 0x28e6 <moveWall+0xca>
    28e2:	88 24       	eor	r8, r8
    28e4:	83 94       	inc	r8
    28e6:	29 2c       	mov	r2, r9
    28e8:	28 28       	or	r2, r8
	if(!isWall){
    28ea:	09 f0       	breq	.+2      	; 0x28ee <moveWall+0xd2>
    28ec:	8a c0       	rjmp	.+276    	; 0x2a02 <moveWall+0x1e6>
	
		// Update odometry
		curr_step = STEPPER_get_nSteps();
    28ee:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <STEPPER_get_nSteps>
    28f2:	60 93 5d 06 	sts	0x065D, r22
    28f6:	70 93 5e 06 	sts	0x065E, r23
    28fa:	80 93 5f 06 	sts	0x065F, r24
    28fe:	90 93 60 06 	sts	0x0660, r25
		
		if(curr_step.left != 0){
    2902:	cb 01       	movw	r24, r22
    2904:	61 15       	cp	r22, r1
    2906:	71 05       	cpc	r23, r1
    2908:	e1 f0       	breq	.+56     	; 0x2942 <moveWall+0x126>
			odometryStepL += WALL_STEP - curr_step.left;
    290a:	64 e1       	ldi	r22, 0x14	; 20
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	68 1b       	sub	r22, r24
    2910:	79 0b       	sbc	r23, r25
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 37 30 	call	0x606e	; 0x606e <__floatunsisf>
    291a:	9b 01       	movw	r18, r22
    291c:	ac 01       	movw	r20, r24
    291e:	60 91 f6 06 	lds	r22, 0x06F6
    2922:	70 91 f7 06 	lds	r23, 0x06F7
    2926:	80 91 f8 06 	lds	r24, 0x06F8
    292a:	90 91 f9 06 	lds	r25, 0x06F9
    292e:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    2932:	60 93 f6 06 	sts	0x06F6, r22
    2936:	70 93 f7 06 	sts	0x06F7, r23
    293a:	80 93 f8 06 	sts	0x06F8, r24
    293e:	90 93 f9 06 	sts	0x06F9, r25
		}
		if(curr_step.right != 0){
    2942:	80 91 5f 06 	lds	r24, 0x065F
    2946:	90 91 60 06 	lds	r25, 0x0660
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	e1 f0       	breq	.+56     	; 0x2986 <moveWall+0x16a>
			odometryStepR += WALL_STEP - curr_step.right;
    294e:	64 e1       	ldi	r22, 0x14	; 20
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	68 1b       	sub	r22, r24
    2954:	79 0b       	sbc	r23, r25
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	0e 94 37 30 	call	0x606e	; 0x606e <__floatunsisf>
    295e:	9b 01       	movw	r18, r22
    2960:	ac 01       	movw	r20, r24
    2962:	60 91 48 04 	lds	r22, 0x0448
    2966:	70 91 49 04 	lds	r23, 0x0449
    296a:	80 91 4a 04 	lds	r24, 0x044A
    296e:	90 91 4b 04 	lds	r25, 0x044B
    2972:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    2976:	60 93 48 04 	sts	0x0448, r22
    297a:	70 93 49 04 	sts	0x0449, r23
    297e:	80 93 4a 04 	sts	0x044A, r24
    2982:	90 93 4b 04 	sts	0x044B, r25
		}
		
		STEPPER_set_steps(STEPPER_BOTH,0);
    2986:	82 e0       	ldi	r24, 0x02	; 2
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <STEPPER_set_steps>
	
		// Move with wall
		STEPPER_move_stnb( STEPPER_BOTH, 
    2990:	8d b7       	in	r24, 0x3d	; 61
    2992:	9e b7       	in	r25, 0x3e	; 62
    2994:	09 97       	sbiw	r24, 0x09	; 9
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	9e bf       	out	0x3e, r25	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	8d bf       	out	0x3d, r24	; 61
    29a0:	ed b7       	in	r30, 0x3d	; 61
    29a2:	fe b7       	in	r31, 0x3e	; 62
    29a4:	31 96       	adiw	r30, 0x01	; 1
    29a6:	84 e1       	ldi	r24, 0x14	; 20
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	ad b7       	in	r26, 0x3d	; 61
    29ac:	be b7       	in	r27, 0x3e	; 62
    29ae:	12 96       	adiw	r26, 0x02	; 2
    29b0:	9c 93       	st	X, r25
    29b2:	8e 93       	st	-X, r24
    29b4:	11 97       	sbiw	r26, 0x01	; 1
    29b6:	88 ec       	ldi	r24, 0xC8	; 200
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	93 83       	std	Z+3, r25	; 0x03
    29bc:	82 83       	std	Z+2, r24	; 0x02
    29be:	82 ec       	ldi	r24, 0xC2	; 194
    29c0:	91 e0       	ldi	r25, 0x01	; 1
    29c2:	95 83       	std	Z+5, r25	; 0x05
    29c4:	84 83       	std	Z+4, r24	; 0x04
    29c6:	16 82       	std	Z+6, r1	; 0x06
    29c8:	10 86       	std	Z+8, r1	; 0x08
    29ca:	17 82       	std	Z+7, r1	; 0x07
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	62 e0       	ldi	r22, 0x02	; 2
    29d0:	41 e0       	ldi	r20, 0x01	; 1
    29d2:	24 e1       	ldi	r18, 0x14	; 20
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	08 ec       	ldi	r16, 0xC8	; 200
    29d8:	10 e0       	ldi	r17, 0x00	; 0
    29da:	72 ec       	ldi	r23, 0xC2	; 194
    29dc:	e7 2e       	mov	r14, r23
    29de:	71 e0       	ldi	r23, 0x01	; 1
    29e0:	f7 2e       	mov	r15, r23
    29e2:	cc 24       	eor	r12, r12
    29e4:	aa 24       	eor	r10, r10
    29e6:	bb 24       	eor	r11, r11
    29e8:	88 24       	eor	r8, r8
    29ea:	83 94       	inc	r8
    29ec:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <STEPPER_move>
    29f0:	ed b7       	in	r30, 0x3d	; 61
    29f2:	fe b7       	in	r31, 0x3e	; 62
    29f4:	39 96       	adiw	r30, 0x09	; 9
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	fe bf       	out	0x3e, r31	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	ed bf       	out	0x3d, r30	; 61
    2a00:	48 c1       	rjmp	.+656    	; 0x2c92 <moveWall+0x476>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2a02:	c6 01       	movw	r24, r12
    2a04:	b5 01       	movw	r22, r10
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e7       	ldi	r20, 0x70	; 112
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__gesf2>
    2a12:	18 16       	cp	r1, r24
    2a14:	64 f4       	brge	.+24     	; 0x2a2e <moveWall+0x212>
		rtIR = IR_WALL_R_THRESH-18;
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	a0 e4       	ldi	r26, 0x40	; 64
    2a1c:	b0 ec       	ldi	r27, 0xC0	; 192
    2a1e:	80 93 6a 06 	sts	0x066A, r24
    2a22:	90 93 6b 06 	sts	0x066B, r25
    2a26:	a0 93 6c 06 	sts	0x066C, r26
    2a2a:	b0 93 6d 06 	sts	0x066D, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    2a2e:	c3 01       	movw	r24, r6
    2a30:	b2 01       	movw	r22, r4
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e7       	ldi	r20, 0x70	; 112
    2a38:	51 e4       	ldi	r21, 0x41	; 65
    2a3a:	0e 94 e9 30 	call	0x61d2	; 0x61d2 <__gesf2>
    2a3e:	18 16       	cp	r1, r24
    2a40:	14 f0       	brlt	.+4      	; 0x2a46 <moveWall+0x22a>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	0d c0       	rjmp	.+26     	; 0x2a60 <moveWall+0x244>
		ltIR = IR_WALL_L_THRESH-18;
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	a0 e4       	ldi	r26, 0x40	; 64
    2a4c:	b0 ec       	ldi	r27, 0xC0	; 192
    2a4e:	80 93 65 06 	sts	0x0665, r24
    2a52:	90 93 66 06 	sts	0x0666, r25
    2a56:	a0 93 67 06 	sts	0x0667, r26
    2a5a:	b0 93 68 06 	sts	0x0668, r27
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    2a60:	33 20       	and	r3, r3
    2a62:	21 f1       	breq	.+72     	; 0x2aac <moveWall+0x290>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    2a64:	88 23       	and	r24, r24
    2a66:	29 f0       	breq	.+10     	; 0x2a72 <moveWall+0x256>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	8a e7       	ldi	r24, 0x7A	; 122
    2a6e:	94 e4       	ldi	r25, 0x44	; 68
    2a70:	04 c0       	rjmp	.+8      	; 0x2a7a <moveWall+0x25e>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	70 e0       	ldi	r23, 0x00	; 0
    2a76:	8a e7       	ldi	r24, 0x7A	; 122
    2a78:	94 ec       	ldi	r25, 0xC4	; 196
    2a7a:	a8 01       	movw	r20, r16
    2a7c:	97 01       	movw	r18, r14
    2a7e:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    2a82:	20 91 65 06 	lds	r18, 0x0665
    2a86:	30 91 66 06 	lds	r19, 0x0666
    2a8a:	40 91 67 06 	lds	r20, 0x0667
    2a8e:	50 91 68 06 	lds	r21, 0x0668
    2a92:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    2a96:	9b 01       	movw	r18, r22
    2a98:	ac 01       	movw	r20, r24
    2a9a:	60 91 6a 06 	lds	r22, 0x066A
    2a9e:	70 91 6b 06 	lds	r23, 0x066B
    2aa2:	80 91 6c 06 	lds	r24, 0x066C
    2aa6:	90 91 6d 06 	lds	r25, 0x066D
    2aaa:	10 c0       	rjmp	.+32     	; 0x2acc <moveWall+0x2b0>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2aac:	60 91 6a 06 	lds	r22, 0x066A
    2ab0:	70 91 6b 06 	lds	r23, 0x066B
    2ab4:	80 91 6c 06 	lds	r24, 0x066C
    2ab8:	90 91 6d 06 	lds	r25, 0x066D
    2abc:	20 91 65 06 	lds	r18, 0x0665
    2ac0:	30 91 66 06 	lds	r19, 0x0666
    2ac4:	40 91 67 06 	lds	r20, 0x0667
    2ac8:	50 91 68 06 	lds	r21, 0x0668
    2acc:	0e 94 35 2f 	call	0x5e6a	; 0x5e6a <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2ad0:	90 58       	subi	r25, 0x80	; 128
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2ad8:	6b 01       	movw	r12, r22
    2ada:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2adc:	0e 94 06 30 	call	0x600c	; 0x600c <__fixsfsi>
    2ae0:	8b 01       	movw	r16, r22
    2ae2:	77 ff       	sbrs	r23, 7
    2ae4:	03 c0       	rjmp	.+6      	; 0x2aec <moveWall+0x2d0>
    2ae6:	10 95       	com	r17
    2ae8:	01 95       	neg	r16
    2aea:	1f 4f       	sbci	r17, 0xFF	; 255
    2aec:	05 36       	cpi	r16, 0x65	; 101
    2aee:	11 05       	cpc	r17, r1
    2af0:	fc f0       	brlt	.+62     	; 0x2b30 <moveWall+0x314>
    2af2:	c7 01       	movw	r24, r14
    2af4:	b6 01       	movw	r22, r12
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__cmpsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	a9 f0       	breq	.+42     	; 0x2b30 <moveWall+0x314>
		effort = MAX_EFFORT*(effort/abs(effort));
    2b06:	b8 01       	movw	r22, r16
    2b08:	88 27       	eor	r24, r24
    2b0a:	77 fd       	sbrc	r23, 7
    2b0c:	80 95       	com	r24
    2b0e:	98 2f       	mov	r25, r24
    2b10:	0e 94 39 30 	call	0x6072	; 0x6072 <__floatsisf>
    2b14:	9b 01       	movw	r18, r22
    2b16:	ac 01       	movw	r20, r24
    2b18:	c7 01       	movw	r24, r14
    2b1a:	b6 01       	movw	r22, r12
    2b1c:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	48 ec       	ldi	r20, 0xC8	; 200
    2b26:	52 e4       	ldi	r21, 0x42	; 66
    2b28:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    2b2c:	6b 01       	movw	r12, r22
    2b2e:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2b30:	c7 01       	movw	r24, r14
    2b32:	b6 01       	movw	r22, r12
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	48 ec       	ldi	r20, 0xC8	; 200
    2b3a:	52 e4       	ldi	r21, 0x42	; 66
    2b3c:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    2b40:	4b 01       	movw	r8, r22
    2b42:	5c 01       	movw	r10, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
    2b44:	0e 94 97 1e 	call	0x3d2e	; 0x3d2e <STEPPER_get_nSteps>
    2b48:	60 93 5d 06 	sts	0x065D, r22
    2b4c:	70 93 5e 06 	sts	0x065E, r23
    2b50:	80 93 5f 06 	sts	0x065F, r24
    2b54:	90 93 60 06 	sts	0x0660, r25
	
	if(curr_step.left != 0){
    2b58:	cb 01       	movw	r24, r22
    2b5a:	61 15       	cp	r22, r1
    2b5c:	71 05       	cpc	r23, r1
    2b5e:	e1 f0       	breq	.+56     	; 0x2b98 <moveWall+0x37c>
		odometryStepL += WALL_STEP - (curr_step.left);
    2b60:	64 e1       	ldi	r22, 0x14	; 20
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	68 1b       	sub	r22, r24
    2b66:	79 0b       	sbc	r23, r25
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 37 30 	call	0x606e	; 0x606e <__floatunsisf>
    2b70:	9b 01       	movw	r18, r22
    2b72:	ac 01       	movw	r20, r24
    2b74:	60 91 f6 06 	lds	r22, 0x06F6
    2b78:	70 91 f7 06 	lds	r23, 0x06F7
    2b7c:	80 91 f8 06 	lds	r24, 0x06F8
    2b80:	90 91 f9 06 	lds	r25, 0x06F9
    2b84:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    2b88:	60 93 f6 06 	sts	0x06F6, r22
    2b8c:	70 93 f7 06 	sts	0x06F7, r23
    2b90:	80 93 f8 06 	sts	0x06F8, r24
    2b94:	90 93 f9 06 	sts	0x06F9, r25
	}
	if(curr_step.right != 0){
    2b98:	80 91 5f 06 	lds	r24, 0x065F
    2b9c:	90 91 60 06 	lds	r25, 0x0660
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	e1 f0       	breq	.+56     	; 0x2bdc <moveWall+0x3c0>
		odometryStepR += WALL_STEP - (curr_step.right);
    2ba4:	64 e1       	ldi	r22, 0x14	; 20
    2ba6:	70 e0       	ldi	r23, 0x00	; 0
    2ba8:	68 1b       	sub	r22, r24
    2baa:	79 0b       	sbc	r23, r25
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	0e 94 37 30 	call	0x606e	; 0x606e <__floatunsisf>
    2bb4:	9b 01       	movw	r18, r22
    2bb6:	ac 01       	movw	r20, r24
    2bb8:	60 91 48 04 	lds	r22, 0x0448
    2bbc:	70 91 49 04 	lds	r23, 0x0449
    2bc0:	80 91 4a 04 	lds	r24, 0x044A
    2bc4:	90 91 4b 04 	lds	r25, 0x044B
    2bc8:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    2bcc:	60 93 48 04 	sts	0x0448, r22
    2bd0:	70 93 49 04 	sts	0x0449, r23
    2bd4:	80 93 4a 04 	sts	0x044A, r24
    2bd8:	90 93 4b 04 	sts	0x044B, r25
	}
	
	STEPPER_set_steps(STEPPER_BOTH,0);
    2bdc:	82 e0       	ldi	r24, 0x02	; 2
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	70 e0       	ldi	r23, 0x00	; 0
    2be2:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <STEPPER_set_steps>
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    2be6:	8d b7       	in	r24, 0x3d	; 61
    2be8:	9e b7       	in	r25, 0x3e	; 62
    2bea:	09 97       	sbiw	r24, 0x09	; 9
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	9e bf       	out	0x3e, r25	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	8d bf       	out	0x3d, r24	; 61
    2bf6:	0d b7       	in	r16, 0x3d	; 61
    2bf8:	1e b7       	in	r17, 0x3e	; 62
    2bfa:	0f 5f       	subi	r16, 0xFF	; 255
    2bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfe:	c5 01       	movw	r24, r10
    2c00:	b4 01       	movw	r22, r8
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	48 ec       	ldi	r20, 0xC8	; 200
    2c08:	52 e4       	ldi	r21, 0x42	; 66
    2c0a:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	48 ec       	ldi	r20, 0xC8	; 200
    2c14:	52 e4       	ldi	r21, 0x42	; 66
    2c16:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    2c1a:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    2c1e:	6b 01       	movw	r12, r22
    2c20:	7c 01       	movw	r14, r24
    2c22:	84 e1       	ldi	r24, 0x14	; 20
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	d8 01       	movw	r26, r16
    2c28:	8d 93       	st	X+, r24
    2c2a:	9c 93       	st	X, r25
    2c2c:	c5 01       	movw	r24, r10
    2c2e:	b4 01       	movw	r22, r8
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	48 ec       	ldi	r20, 0xC8	; 200
    2c36:	52 ec       	ldi	r21, 0xC2	; 194
    2c38:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	48 ec       	ldi	r20, 0xC8	; 200
    2c42:	52 e4       	ldi	r21, 0x42	; 66
    2c44:	0e 94 36 2f 	call	0x5e6c	; 0x5e6c <__addsf3>
    2c48:	0e 94 0b 30 	call	0x6016	; 0x6016 <__fixunssfsi>
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	73 83       	std	Z+3, r23	; 0x03
    2c50:	62 83       	std	Z+2, r22	; 0x02
    2c52:	82 ec       	ldi	r24, 0xC2	; 194
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	95 83       	std	Z+5, r25	; 0x05
    2c58:	84 83       	std	Z+4, r24	; 0x04
    2c5a:	16 82       	std	Z+6, r1	; 0x06
    2c5c:	10 86       	std	Z+8, r1	; 0x08
    2c5e:	17 82       	std	Z+7, r1	; 0x07
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	62 e0       	ldi	r22, 0x02	; 2
    2c64:	41 e0       	ldi	r20, 0x01	; 1
    2c66:	24 e1       	ldi	r18, 0x14	; 20
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	86 01       	movw	r16, r12
    2c6c:	52 ec       	ldi	r21, 0xC2	; 194
    2c6e:	e5 2e       	mov	r14, r21
    2c70:	51 e0       	ldi	r21, 0x01	; 1
    2c72:	f5 2e       	mov	r15, r21
    2c74:	cc 24       	eor	r12, r12
    2c76:	aa 24       	eor	r10, r10
    2c78:	bb 24       	eor	r11, r11
    2c7a:	88 24       	eor	r8, r8
    2c7c:	83 94       	inc	r8
    2c7e:	0e 94 5f 1f 	call	0x3ebe	; 0x3ebe <STEPPER_move>
    2c82:	8d b7       	in	r24, 0x3d	; 61
    2c84:	9e b7       	in	r25, 0x3e	; 62
    2c86:	09 96       	adiw	r24, 0x09	; 9
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	9e bf       	out	0x3e, r25	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    2c92:	82 2d       	mov	r24, r2
    2c94:	1f 91       	pop	r17
    2c96:	0f 91       	pop	r16
    2c98:	ff 90       	pop	r15
    2c9a:	ef 90       	pop	r14
    2c9c:	df 90       	pop	r13
    2c9e:	cf 90       	pop	r12
    2ca0:	bf 90       	pop	r11
    2ca2:	af 90       	pop	r10
    2ca4:	9f 90       	pop	r9
    2ca6:	8f 90       	pop	r8
    2ca8:	7f 90       	pop	r7
    2caa:	6f 90       	pop	r6
    2cac:	5f 90       	pop	r5
    2cae:	4f 90       	pop	r4
    2cb0:	3f 90       	pop	r3
    2cb2:	2f 90       	pop	r2
    2cb4:	08 95       	ret

00002cb6 <shiftMap>:
* Input Variables:	unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curOrient)
{		
    2cb6:	ff 92       	push	r15
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
    2cbc:	16 2f       	mov	r17, r22
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    2cbe:	08 2f       	mov	r16, r24
    2cc0:	06 95       	lsr	r16
    2cc2:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;
    2cc4:	e3 e0       	ldi	r30, 0x03	; 3
    2cc6:	fe 2e       	mov	r15, r30
    2cc8:	f8 22       	and	r15, r24
		
	// // Git the currrent orientation of the robot
	// unsigned char curOrient = currentOrientation;
			
		
	switch(currentMove){
    2cca:	80 91 fa 06 	lds	r24, 0x06FA
    2cce:	82 30       	cpi	r24, 0x02	; 2
    2cd0:	31 f0       	breq	.+12     	; 0x2cde <shiftMap+0x28>
    2cd2:	83 30       	cpi	r24, 0x03	; 3
    2cd4:	a9 f0       	breq	.+42     	; 0x2d00 <shiftMap+0x4a>
    2cd6:	81 30       	cpi	r24, 0x01	; 1
    2cd8:	b1 f4       	brne	.+44     	; 0x2d06 <shiftMap+0x50>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    2cda:	11 50       	subi	r17, 0x01	; 1
    2cdc:	12 c0       	rjmp	.+36     	; 0x2d02 <shiftMap+0x4c>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    2cde:	61 30       	cpi	r22, 0x01	; 1
    2ce0:	49 f0       	breq	.+18     	; 0x2cf4 <shiftMap+0x3e>
    2ce2:	61 30       	cpi	r22, 0x01	; 1
    2ce4:	28 f0       	brcs	.+10     	; 0x2cf0 <shiftMap+0x3a>
    2ce6:	62 30       	cpi	r22, 0x02	; 2
    2ce8:	39 f0       	breq	.+14     	; 0x2cf8 <shiftMap+0x42>
    2cea:	63 30       	cpi	r22, 0x03	; 3
    2cec:	b9 f4       	brne	.+46     	; 0x2d1c <shiftMap+0x66>
    2cee:	06 c0       	rjmp	.+12     	; 0x2cfc <shiftMap+0x46>
				case NORTH:
					curRow -= 1;
    2cf0:	01 50       	subi	r16, 0x01	; 1
    2cf2:	14 c0       	rjmp	.+40     	; 0x2d1c <shiftMap+0x66>
					break;
				case EAST:
					curCol += 1;
    2cf4:	f3 94       	inc	r15
    2cf6:	12 c0       	rjmp	.+36     	; 0x2d1c <shiftMap+0x66>
					break;
				case SOUTH:
					curRow += 1;					
    2cf8:	0f 5f       	subi	r16, 0xFF	; 255
    2cfa:	10 c0       	rjmp	.+32     	; 0x2d1c <shiftMap+0x66>
					break;
				case WEST:
					curCol -= 1;					
    2cfc:	fa 94       	dec	r15
    2cfe:	0e c0       	rjmp	.+28     	; 0x2d1c <shiftMap+0x66>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    2d00:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    2d02:	13 70       	andi	r17, 0x03	; 3
    2d04:	0b c0       	rjmp	.+22     	; 0x2d1c <shiftMap+0x66>
			break;
		default:
			LCD_printf("Whatz3?!");
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <shiftMap+0x52>
    2d08:	84 e4       	ldi	r24, 0x44	; 68
    2d0a:	91 e0       	ldi	r25, 0x01	; 1
    2d0c:	ed b7       	in	r30, 0x3d	; 61
    2d0e:	fe b7       	in	r31, 0x3e	; 62
    2d10:	92 83       	std	Z+2, r25	; 0x02
    2d12:	81 83       	std	Z+1, r24	; 0x01
    2d14:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    2d1c:	10 93 60 05 	sts	0x0560, r17
    2d20:	00 0f       	add	r16, r16
    2d22:	00 0f       	add	r16, r16
	return currentCell;
}
    2d24:	80 2f       	mov	r24, r16
    2d26:	8f 0d       	add	r24, r15
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	ff 90       	pop	r15
    2d2e:	08 95       	ret

00002d30 <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    2d30:	8f 92       	push	r8
    2d32:	af 92       	push	r10
    2d34:	bf 92       	push	r11
    2d36:	cf 92       	push	r12
    2d38:	df 92       	push	r13
    2d3a:	ef 92       	push	r14
    2d3c:	ff 92       	push	r15
    2d3e:	0f 93       	push	r16
    2d40:	1f 93       	push	r17
	switch(currentMove){
    2d42:	80 91 fa 06 	lds	r24, 0x06FA
    2d46:	82 30       	cpi	r24, 0x02	; 2
    2d48:	69 f0       	breq	.+26     	; 0x2d64 <moveMap+0x34>
    2d4a:	83 30       	cpi	r24, 0x03	; 3
    2d4c:	a1 f0       	breq	.+40     	; 0x2d76 <moveMap+0x46>
    2d4e:	81 30       	cpi	r24, 0x01	; 1
    2d50:	51 f5       	brne	.+84     	; 0x2da6 <moveMap+0x76>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2d52:	60 e0       	ldi	r22, 0x00	; 0
    2d54:	70 e0       	ldi	r23, 0x00	; 0
    2d56:	80 e0       	ldi	r24, 0x00	; 0
    2d58:	90 e0       	ldi	r25, 0x00	; 0
    2d5a:	20 e0       	ldi	r18, 0x00	; 0
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	4c e8       	ldi	r20, 0x8C	; 140
    2d60:	51 ec       	ldi	r21, 0xC1	; 193
    2d62:	11 c0       	rjmp	.+34     	; 0x2d86 <moveMap+0x56>
			// while(!odometryFlag){
				// moveWall();
				// checkOdometry(0);
			// }
			
			move_arc_stwt(NO_TURN, 45, 10, 10, 0);
    2d64:	60 e0       	ldi	r22, 0x00	; 0
    2d66:	70 e0       	ldi	r23, 0x00	; 0
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	9f e4       	ldi	r25, 0x4F	; 79
    2d6c:	20 e0       	ldi	r18, 0x00	; 0
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	44 e3       	ldi	r20, 0x34	; 52
    2d72:	52 e4       	ldi	r21, 0x42	; 66
    2d74:	08 c0       	rjmp	.+16     	; 0x2d86 <moveMap+0x56>
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2d76:	60 e0       	ldi	r22, 0x00	; 0
    2d78:	70 e0       	ldi	r23, 0x00	; 0
    2d7a:	80 e0       	ldi	r24, 0x00	; 0
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	4c e8       	ldi	r20, 0x8C	; 140
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	0f 2e       	mov	r0, r31
    2d88:	f0 e0       	ldi	r31, 0x00	; 0
    2d8a:	ef 2e       	mov	r14, r31
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	ff 2e       	mov	r15, r31
    2d90:	f0 e2       	ldi	r31, 0x20	; 32
    2d92:	0f 2f       	mov	r16, r31
    2d94:	f1 e4       	ldi	r31, 0x41	; 65
    2d96:	1f 2f       	mov	r17, r31
    2d98:	f0 2d       	mov	r31, r0
    2d9a:	57 01       	movw	r10, r14
    2d9c:	68 01       	movw	r12, r16
    2d9e:	88 24       	eor	r8, r8
    2da0:	0e 94 bd 0c 	call	0x197a	; 0x197a <move_arc_stwt>
    2da4:	0b c0       	rjmp	.+22     	; 0x2dbc <moveMap+0x8c>
			break;
		default:
			LCD_printf("Whatz2?!");
    2da6:	00 d0       	rcall	.+0      	; 0x2da8 <moveMap+0x78>
    2da8:	8d e4       	ldi	r24, 0x4D	; 77
    2daa:	91 e0       	ldi	r25, 0x01	; 1
    2dac:	ed b7       	in	r30, 0x3d	; 61
    2dae:	fe b7       	in	r31, 0x3e	; 62
    2db0:	92 83       	std	Z+2, r25	; 0x02
    2db2:	81 83       	std	Z+1, r24	; 0x01
    2db4:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    2db8:	0f 90       	pop	r0
    2dba:	0f 90       	pop	r0
			break;
	}
}
    2dbc:	1f 91       	pop	r17
    2dbe:	0f 91       	pop	r16
    2dc0:	ff 90       	pop	r15
    2dc2:	ef 90       	pop	r14
    2dc4:	df 90       	pop	r13
    2dc6:	cf 90       	pop	r12
    2dc8:	bf 90       	pop	r11
    2dca:	af 90       	pop	r10
    2dcc:	8f 90       	pop	r8
    2dce:	08 95       	ret

00002dd0 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    2dd0:	80 91 cc 04 	lds	r24, 0x04CC
    2dd4:	80 fd       	sbrc	r24, 0
    2dd6:	02 c0       	rjmp	.+4      	; 0x2ddc <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    2dd8:	81 e0       	ldi	r24, 0x01	; 1
    2dda:	05 c0       	rjmp	.+10     	; 0x2de6 <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    2ddc:	83 fd       	sbrc	r24, 3
    2dde:	02 c0       	rjmp	.+4      	; 0x2de4 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    2de0:	82 e0       	ldi	r24, 0x02	; 2
    2de2:	01 c0       	rjmp	.+2      	; 0x2de6 <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    2de4:	83 e0       	ldi	r24, 0x03	; 3
    2de6:	80 93 fa 06 	sts	0x06FA, r24
	}
	
	switch(oldMove){
    2dea:	80 91 fb 06 	lds	r24, 0x06FB
    2dee:	81 30       	cpi	r24, 0x01	; 1
    2df0:	29 f0       	breq	.+10     	; 0x2dfc <planMap+0x2c>
    2df2:	81 30       	cpi	r24, 0x01	; 1
    2df4:	38 f0       	brcs	.+14     	; 0x2e04 <planMap+0x34>
    2df6:	84 30       	cpi	r24, 0x04	; 4
    2df8:	28 f4       	brcc	.+10     	; 0x2e04 <planMap+0x34>
    2dfa:	0f c0       	rjmp	.+30     	; 0x2e1a <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    2dfc:	82 e0       	ldi	r24, 0x02	; 2
    2dfe:	80 93 fa 06 	sts	0x06FA, r24
    2e02:	0b c0       	rjmp	.+22     	; 0x2e1a <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    2e04:	00 d0       	rcall	.+0      	; 0x2e06 <planMap+0x36>
    2e06:	86 e5       	ldi	r24, 0x56	; 86
    2e08:	91 e0       	ldi	r25, 0x01	; 1
    2e0a:	ed b7       	in	r30, 0x3d	; 61
    2e0c:	fe b7       	in	r31, 0x3e	; 62
    2e0e:	92 83       	std	Z+2, r25	; 0x02
    2e10:	81 83       	std	Z+1, r24	; 0x01
    2e12:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    2e16:	0f 90       	pop	r0
    2e18:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    2e1a:	80 91 fa 06 	lds	r24, 0x06FA
    2e1e:	80 93 fb 06 	sts	0x06FB, r24
}
    2e22:	08 95       	ret

00002e24 <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
    2e24:	90 91 ca 03 	lds	r25, 0x03CA
    2e28:	95 30       	cpi	r25, 0x05	; 5
    2e2a:	70 f0       	brcs	.+28     	; 0x2e48 <planGateway+0x24>
    2e2c:	ed ef       	ldi	r30, 0xFD	; 253
    2e2e:	f6 e0       	ldi	r31, 0x06	; 6
		for(i = 0; i<BRANCH_MAX; i++){
			localizeGateways[0][i] = localizeGateways[0][i+1];
    2e30:	81 81       	ldd	r24, Z+1	; 0x01
    2e32:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][i+1];
    2e34:	86 81       	ldd	r24, Z+6	; 0x06
    2e36:	85 83       	std	Z+5, r24	; 0x05
    2e38:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
		for(i = 0; i<BRANCH_MAX; i++){
    2e3a:	87 e0       	ldi	r24, 0x07	; 7
    2e3c:	e2 30       	cpi	r30, 0x02	; 2
    2e3e:	f8 07       	cpc	r31, r24
    2e40:	b9 f7       	brne	.-18     	; 0x2e30 <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][i+1];
			localizeGateways[1][i] = localizeGateways[1][i+1];
		}
		currentBranch--;
    2e42:	91 50       	subi	r25, 0x01	; 1
    2e44:	90 93 ca 03 	sts	0x03CA, r25
	}
	
	// Decide what the current move should be
	planMap();
    2e48:	0e 94 e8 16 	call	0x2dd0	; 0x2dd0 <planMap>
	
	// Save the current gateway and move
	localizeGateways[0][currentBranch] = currentGateway;
    2e4c:	90 91 ca 03 	lds	r25, 0x03CA
    2e50:	e9 2f       	mov	r30, r25
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	e3 50       	subi	r30, 0x03	; 3
    2e56:	f9 4f       	sbci	r31, 0xF9	; 249
    2e58:	80 91 cc 04 	lds	r24, 0x04CC
    2e5c:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    2e5e:	80 91 fa 06 	lds	r24, 0x06FA
    2e62:	85 83       	std	Z+5, r24	; 0x05

	// Increment current branch 
	currentBranch++;
    2e64:	9f 5f       	subi	r25, 0xFF	; 255
    2e66:	90 93 ca 03 	sts	0x03CA, r25
}
    2e6a:	08 95       	ret

00002e6c <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    2e6c:	8f 92       	push	r8
    2e6e:	af 92       	push	r10
    2e70:	bf 92       	push	r11
    2e72:	cf 92       	push	r12
    2e74:	df 92       	push	r13
    2e76:	ef 92       	push	r14
    2e78:	ff 92       	push	r15
    2e7a:	0f 93       	push	r16
    2e7c:	1f 93       	push	r17
	LCD_clear();
    2e7e:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    2e82:	e0 91 cd 04 	lds	r30, 0x04CD
    2e86:	f0 e0       	ldi	r31, 0x00	; 0
    2e88:	e1 5b       	subi	r30, 0xB1	; 177
    2e8a:	fa 4f       	sbci	r31, 0xFA	; 250
    2e8c:	e0 81       	ld	r30, Z
    2e8e:	e0 93 fa 06 	sts	0x06FA, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    2e92:	80 e0       	ldi	r24, 0x00	; 0
    2e94:	e1 30       	cpi	r30, 0x01	; 1
    2e96:	09 f4       	brne	.+2      	; 0x2e9a <moveWorld+0x2e>
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	90 e0       	ldi	r25, 0x00	; 0
    2e9c:	e3 30       	cpi	r30, 0x03	; 3
    2e9e:	09 f4       	brne	.+2      	; 0x2ea2 <moveWorld+0x36>
    2ea0:	91 e0       	ldi	r25, 0x01	; 1
    2ea2:	89 2b       	or	r24, r25
    2ea4:	28 2f       	mov	r18, r24
    2ea6:	30 e0       	ldi	r19, 0x00	; 0
    2ea8:	40 e0       	ldi	r20, 0x00	; 0
    2eaa:	50 e0       	ldi	r21, 0x00	; 0
    2eac:	80 91 fb 06 	lds	r24, 0x06FB
    2eb0:	82 30       	cpi	r24, 0x02	; 2
    2eb2:	11 f4       	brne	.+4      	; 0x2eb8 <moveWorld+0x4c>
    2eb4:	41 e0       	ldi	r20, 0x01	; 1
    2eb6:	50 e0       	ldi	r21, 0x00	; 0
    2eb8:	24 23       	and	r18, r20
    2eba:	35 23       	and	r19, r21
    2ebc:	23 2b       	or	r18, r19
    2ebe:	b9 f0       	breq	.+46     	; 0x2eee <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.5/5.0), 10, 10, 0);		
    2ec0:	60 e0       	ldi	r22, 0x00	; 0
    2ec2:	70 e0       	ldi	r23, 0x00	; 0
    2ec4:	80 e0       	ldi	r24, 0x00	; 0
    2ec6:	9f e4       	ldi	r25, 0x4F	; 79
    2ec8:	28 e4       	ldi	r18, 0x48	; 72
    2eca:	31 ee       	ldi	r19, 0xE1	; 225
    2ecc:	46 eb       	ldi	r20, 0xB6	; 182
    2ece:	51 e4       	ldi	r21, 0x41	; 65
    2ed0:	0f 2e       	mov	r0, r31
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	ef 2e       	mov	r14, r31
    2ed6:	f0 e0       	ldi	r31, 0x00	; 0
    2ed8:	ff 2e       	mov	r15, r31
    2eda:	f0 e2       	ldi	r31, 0x20	; 32
    2edc:	0f 2f       	mov	r16, r31
    2ede:	f1 e4       	ldi	r31, 0x41	; 65
    2ee0:	1f 2f       	mov	r17, r31
    2ee2:	f0 2d       	mov	r31, r0
    2ee4:	57 01       	movw	r10, r14
    2ee6:	68 01       	movw	r12, r16
    2ee8:	88 24       	eor	r8, r8
    2eea:	0e 94 bd 0c 	call	0x197a	; 0x197a <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    2eee:	20 91 fb 06 	lds	r18, 0x06FB
    2ef2:	80 e0       	ldi	r24, 0x00	; 0
    2ef4:	21 30       	cpi	r18, 0x01	; 1
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <moveWorld+0x8e>
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	90 e0       	ldi	r25, 0x00	; 0
    2efc:	23 30       	cpi	r18, 0x03	; 3
    2efe:	09 f4       	brne	.+2      	; 0x2f02 <moveWorld+0x96>
    2f00:	91 e0       	ldi	r25, 0x01	; 1
    2f02:	89 2b       	or	r24, r25
    2f04:	28 2f       	mov	r18, r24
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	40 e0       	ldi	r20, 0x00	; 0
    2f0a:	50 e0       	ldi	r21, 0x00	; 0
    2f0c:	80 91 fa 06 	lds	r24, 0x06FA
    2f10:	82 30       	cpi	r24, 0x02	; 2
    2f12:	11 f4       	brne	.+4      	; 0x2f18 <moveWorld+0xac>
    2f14:	41 e0       	ldi	r20, 0x01	; 1
    2f16:	50 e0       	ldi	r21, 0x00	; 0
    2f18:	24 23       	and	r18, r20
    2f1a:	35 23       	and	r19, r21
    2f1c:	23 2b       	or	r18, r19
    2f1e:	b9 f0       	breq	.+46     	; 0x2f4e <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.2/5.0), 10, 10, 0);		
    2f20:	60 e0       	ldi	r22, 0x00	; 0
    2f22:	70 e0       	ldi	r23, 0x00	; 0
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	9f e4       	ldi	r25, 0x4F	; 79
    2f28:	25 e3       	ldi	r18, 0x35	; 53
    2f2a:	3f ee       	ldi	r19, 0xEF	; 239
    2f2c:	40 ea       	ldi	r20, 0xA0	; 160
    2f2e:	51 e4       	ldi	r21, 0x41	; 65
    2f30:	0f 2e       	mov	r0, r31
    2f32:	f0 e0       	ldi	r31, 0x00	; 0
    2f34:	ef 2e       	mov	r14, r31
    2f36:	f0 e0       	ldi	r31, 0x00	; 0
    2f38:	ff 2e       	mov	r15, r31
    2f3a:	f0 e2       	ldi	r31, 0x20	; 32
    2f3c:	0f 2f       	mov	r16, r31
    2f3e:	f1 e4       	ldi	r31, 0x41	; 65
    2f40:	1f 2f       	mov	r17, r31
    2f42:	f0 2d       	mov	r31, r0
    2f44:	57 01       	movw	r10, r14
    2f46:	68 01       	movw	r12, r16
    2f48:	88 24       	eor	r8, r8
    2f4a:	0e 94 bd 0c 	call	0x197a	; 0x197a <move_arc_stwt>
	}
	
	switch(currentMove){
    2f4e:	80 91 fa 06 	lds	r24, 0x06FA
    2f52:	82 30       	cpi	r24, 0x02	; 2
    2f54:	c1 f1       	breq	.+112    	; 0x2fc6 <moveWorld+0x15a>
    2f56:	83 30       	cpi	r24, 0x03	; 3
    2f58:	09 f4       	brne	.+2      	; 0x2f5c <moveWorld+0xf0>
    2f5a:	61 c0       	rjmp	.+194    	; 0x301e <moveWorld+0x1b2>
    2f5c:	81 30       	cpi	r24, 0x01	; 1
    2f5e:	09 f0       	breq	.+2      	; 0x2f62 <moveWorld+0xf6>
    2f60:	9f c0       	rjmp	.+318    	; 0x30a0 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2f62:	8d b7       	in	r24, 0x3d	; 61
    2f64:	9e b7       	in	r25, 0x3e	; 62
    2f66:	08 97       	sbiw	r24, 0x08	; 8
    2f68:	0f b6       	in	r0, 0x3f	; 63
    2f6a:	f8 94       	cli
    2f6c:	9e bf       	out	0x3e, r25	; 62
    2f6e:	0f be       	out	0x3f, r0	; 63
    2f70:	8d bf       	out	0x3d, r24	; 61
    2f72:	ed b7       	in	r30, 0x3d	; 61
    2f74:	fe b7       	in	r31, 0x3e	; 62
    2f76:	31 96       	adiw	r30, 0x01	; 1
    2f78:	8f e5       	ldi	r24, 0x5F	; 95
    2f7a:	91 e0       	ldi	r25, 0x01	; 1
    2f7c:	ad b7       	in	r26, 0x3d	; 61
    2f7e:	be b7       	in	r27, 0x3e	; 62
    2f80:	12 96       	adiw	r26, 0x02	; 2
    2f82:	9c 93       	st	X, r25
    2f84:	8e 93       	st	-X, r24
    2f86:	11 97       	sbiw	r26, 0x01	; 1
    2f88:	80 91 cd 04 	lds	r24, 0x04CD
    2f8c:	82 83       	std	Z+2, r24	; 0x02
    2f8e:	13 82       	std	Z+3, r1	; 0x03
    2f90:	80 91 cc 04 	lds	r24, 0x04CC
    2f94:	84 83       	std	Z+4, r24	; 0x04
    2f96:	15 82       	std	Z+5, r1	; 0x05
    2f98:	80 91 d2 04 	lds	r24, 0x04D2
    2f9c:	86 83       	std	Z+6, r24	; 0x06
    2f9e:	17 82       	std	Z+7, r1	; 0x07
    2fa0:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2fa4:	ed b7       	in	r30, 0x3d	; 61
    2fa6:	fe b7       	in	r31, 0x3e	; 62
    2fa8:	38 96       	adiw	r30, 0x08	; 8
    2faa:	0f b6       	in	r0, 0x3f	; 63
    2fac:	f8 94       	cli
    2fae:	fe bf       	out	0x3e, r31	; 62
    2fb0:	0f be       	out	0x3f, r0	; 63
    2fb2:	ed bf       	out	0x3d, r30	; 61
    2fb4:	60 e0       	ldi	r22, 0x00	; 0
    2fb6:	70 e0       	ldi	r23, 0x00	; 0
    2fb8:	80 e0       	ldi	r24, 0x00	; 0
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	20 e0       	ldi	r18, 0x00	; 0
    2fbe:	30 e0       	ldi	r19, 0x00	; 0
    2fc0:	4c e8       	ldi	r20, 0x8C	; 140
    2fc2:	51 ec       	ldi	r21, 0xC1	; 193
    2fc4:	5d c0       	rjmp	.+186    	; 0x3080 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2fc6:	8d b7       	in	r24, 0x3d	; 61
    2fc8:	9e b7       	in	r25, 0x3e	; 62
    2fca:	08 97       	sbiw	r24, 0x08	; 8
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	9e bf       	out	0x3e, r25	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	8d bf       	out	0x3d, r24	; 61
    2fd6:	ed b7       	in	r30, 0x3d	; 61
    2fd8:	fe b7       	in	r31, 0x3e	; 62
    2fda:	31 96       	adiw	r30, 0x01	; 1
    2fdc:	8a e8       	ldi	r24, 0x8A	; 138
    2fde:	91 e0       	ldi	r25, 0x01	; 1
    2fe0:	ad b7       	in	r26, 0x3d	; 61
    2fe2:	be b7       	in	r27, 0x3e	; 62
    2fe4:	12 96       	adiw	r26, 0x02	; 2
    2fe6:	9c 93       	st	X, r25
    2fe8:	8e 93       	st	-X, r24
    2fea:	11 97       	sbiw	r26, 0x01	; 1
    2fec:	80 91 cd 04 	lds	r24, 0x04CD
    2ff0:	82 83       	std	Z+2, r24	; 0x02
    2ff2:	13 82       	std	Z+3, r1	; 0x03
    2ff4:	80 91 cc 04 	lds	r24, 0x04CC
    2ff8:	84 83       	std	Z+4, r24	; 0x04
    2ffa:	15 82       	std	Z+5, r1	; 0x05
    2ffc:	80 91 d2 04 	lds	r24, 0x04D2
    3000:	86 83       	std	Z+6, r24	; 0x06
    3002:	17 82       	std	Z+7, r1	; 0x07
    3004:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWallOld();
    3008:	ed b7       	in	r30, 0x3d	; 61
    300a:	fe b7       	in	r31, 0x3e	; 62
    300c:	38 96       	adiw	r30, 0x08	; 8
    300e:	0f b6       	in	r0, 0x3f	; 63
    3010:	f8 94       	cli
    3012:	fe bf       	out	0x3e, r31	; 62
    3014:	0f be       	out	0x3f, r0	; 63
    3016:	ed bf       	out	0x3d, r30	; 61
    3018:	0e 94 8d 12 	call	0x251a	; 0x251a <moveWallOld>
    301c:	53 c0       	rjmp	.+166    	; 0x30c4 <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    301e:	8d b7       	in	r24, 0x3d	; 61
    3020:	9e b7       	in	r25, 0x3e	; 62
    3022:	08 97       	sbiw	r24, 0x08	; 8
    3024:	0f b6       	in	r0, 0x3f	; 63
    3026:	f8 94       	cli
    3028:	9e bf       	out	0x3e, r25	; 62
    302a:	0f be       	out	0x3f, r0	; 63
    302c:	8d bf       	out	0x3d, r24	; 61
    302e:	ed b7       	in	r30, 0x3d	; 61
    3030:	fe b7       	in	r31, 0x3e	; 62
    3032:	31 96       	adiw	r30, 0x01	; 1
    3034:	88 eb       	ldi	r24, 0xB8	; 184
    3036:	91 e0       	ldi	r25, 0x01	; 1
    3038:	ad b7       	in	r26, 0x3d	; 61
    303a:	be b7       	in	r27, 0x3e	; 62
    303c:	12 96       	adiw	r26, 0x02	; 2
    303e:	9c 93       	st	X, r25
    3040:	8e 93       	st	-X, r24
    3042:	11 97       	sbiw	r26, 0x01	; 1
    3044:	80 91 cd 04 	lds	r24, 0x04CD
    3048:	82 83       	std	Z+2, r24	; 0x02
    304a:	13 82       	std	Z+3, r1	; 0x03
    304c:	80 91 cc 04 	lds	r24, 0x04CC
    3050:	84 83       	std	Z+4, r24	; 0x04
    3052:	15 82       	std	Z+5, r1	; 0x05
    3054:	80 91 d2 04 	lds	r24, 0x04D2
    3058:	86 83       	std	Z+6, r24	; 0x06
    305a:	17 82       	std	Z+7, r1	; 0x07
    305c:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    3060:	ed b7       	in	r30, 0x3d	; 61
    3062:	fe b7       	in	r31, 0x3e	; 62
    3064:	38 96       	adiw	r30, 0x08	; 8
    3066:	0f b6       	in	r0, 0x3f	; 63
    3068:	f8 94       	cli
    306a:	fe bf       	out	0x3e, r31	; 62
    306c:	0f be       	out	0x3f, r0	; 63
    306e:	ed bf       	out	0x3d, r30	; 61
    3070:	60 e0       	ldi	r22, 0x00	; 0
    3072:	70 e0       	ldi	r23, 0x00	; 0
    3074:	80 e0       	ldi	r24, 0x00	; 0
    3076:	90 e0       	ldi	r25, 0x00	; 0
    3078:	20 e0       	ldi	r18, 0x00	; 0
    307a:	30 e0       	ldi	r19, 0x00	; 0
    307c:	4c e8       	ldi	r20, 0x8C	; 140
    307e:	51 e4       	ldi	r21, 0x41	; 65
    3080:	0f 2e       	mov	r0, r31
    3082:	f0 e0       	ldi	r31, 0x00	; 0
    3084:	ef 2e       	mov	r14, r31
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	ff 2e       	mov	r15, r31
    308a:	f0 e2       	ldi	r31, 0x20	; 32
    308c:	0f 2f       	mov	r16, r31
    308e:	f1 e4       	ldi	r31, 0x41	; 65
    3090:	1f 2f       	mov	r17, r31
    3092:	f0 2d       	mov	r31, r0
    3094:	57 01       	movw	r10, r14
    3096:	68 01       	movw	r12, r16
    3098:	88 24       	eor	r8, r8
    309a:	0e 94 bd 0c 	call	0x197a	; 0x197a <move_arc_stwt>
    309e:	12 c0       	rjmp	.+36     	; 0x30c4 <moveWorld+0x258>
			break;
		default:
			LCD_printf("Whatz4?!");
    30a0:	00 d0       	rcall	.+0      	; 0x30a2 <moveWorld+0x236>
    30a2:	84 ee       	ldi	r24, 0xE4	; 228
    30a4:	91 e0       	ldi	r25, 0x01	; 1
    30a6:	ad b7       	in	r26, 0x3d	; 61
    30a8:	be b7       	in	r27, 0x3e	; 62
    30aa:	12 96       	adiw	r26, 0x02	; 2
    30ac:	9c 93       	st	X, r25
    30ae:	8e 93       	st	-X, r24
    30b0:	11 97       	sbiw	r26, 0x01	; 1
    30b2:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    30b6:	0f 90       	pop	r0
    30b8:	0f 90       	pop	r0
    30ba:	82 e0       	ldi	r24, 0x02	; 2
    30bc:	60 e0       	ldi	r22, 0x00	; 0
    30be:	0e 94 89 21 	call	0x4312	; 0x4312 <STEPPER_stop>
    30c2:	ff cf       	rjmp	.-2      	; 0x30c2 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    30c4:	80 91 fa 06 	lds	r24, 0x06FA
    30c8:	80 93 fb 06 	sts	0x06FB, r24
	return 1;
}
    30cc:	81 e0       	ldi	r24, 0x01	; 1
    30ce:	1f 91       	pop	r17
    30d0:	0f 91       	pop	r16
    30d2:	ff 90       	pop	r15
    30d4:	ef 90       	pop	r14
    30d6:	df 90       	pop	r13
    30d8:	cf 90       	pop	r12
    30da:	bf 90       	pop	r11
    30dc:	af 90       	pop	r10
    30de:	8f 90       	pop	r8
    30e0:	08 95       	ret

000030e2 <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    30e2:	0e 94 36 17 	call	0x2e6c	; 0x2e6c <moveWorld>
    30e6:	88 23       	and	r24, r24
    30e8:	69 f0       	breq	.+26     	; 0x3104 <moveBehavior+0x22>
		Ierror = 0;
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	a0 e0       	ldi	r26, 0x00	; 0
    30f0:	b0 e0       	ldi	r27, 0x00	; 0
    30f2:	80 93 c8 04 	sts	0x04C8, r24
    30f6:	90 93 c9 04 	sts	0x04C9, r25
    30fa:	a0 93 ca 04 	sts	0x04CA, r26
    30fe:	b0 93 cb 04 	sts	0x04CB, r27
    3102:	81 e0       	ldi	r24, 0x01	; 1
		return 1; 
	}
	return 0;	
}
    3104:	08 95       	ret

00003106 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    3106:	ff 92       	push	r15
    3108:	0f 93       	push	r16
    310a:	1f 93       	push	r17
    310c:	cf 93       	push	r28
    310e:	df 93       	push	r29
    3110:	ff 24       	eor	r15, r15
    3112:	f3 94       	inc	r15
    3114:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    3116:	cd ee       	ldi	r28, 0xED	; 237
    3118:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    311a:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    311e:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    3120:	81 30       	cpi	r24, 0x01	; 1
    3122:	21 f0       	breq	.+8      	; 0x312c <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    3124:	82 30       	cpi	r24, 0x02	; 2
    3126:	11 f0       	breq	.+4      	; 0x312c <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    3128:	83 30       	cpi	r24, 0x03	; 3
    312a:	39 f4       	brne	.+14     	; 0x313a <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    312c:	e1 2f       	mov	r30, r17
    312e:	f0 e0       	ldi	r31, 0x00	; 0
    3130:	e1 5b       	subi	r30, 0xB1	; 177
    3132:	fa 4f       	sbci	r31, 0xFA	; 250
    3134:	00 83       	st	Z, r16
			i++;
    3136:	1f 5f       	subi	r17, 0xFF	; 255
    3138:	02 c0       	rjmp	.+4      	; 0x313e <movesInput+0x38>
		}

		if (btnHolder != 0){
    313a:	88 23       	and	r24, r24
    313c:	21 f1       	breq	.+72     	; 0x3186 <movesInput+0x80>
			LCD_clear();
    313e:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    3142:	8d b7       	in	r24, 0x3d	; 61
    3144:	9e b7       	in	r25, 0x3e	; 62
    3146:	08 97       	sbiw	r24, 0x08	; 8
    3148:	0f b6       	in	r0, 0x3f	; 63
    314a:	f8 94       	cli
    314c:	9e bf       	out	0x3e, r25	; 62
    314e:	0f be       	out	0x3f, r0	; 63
    3150:	8d bf       	out	0x3d, r24	; 61
    3152:	ed b7       	in	r30, 0x3d	; 61
    3154:	fe b7       	in	r31, 0x3e	; 62
    3156:	31 96       	adiw	r30, 0x01	; 1
    3158:	ad b7       	in	r26, 0x3d	; 61
    315a:	be b7       	in	r27, 0x3e	; 62
    315c:	12 96       	adiw	r26, 0x02	; 2
    315e:	dc 93       	st	X, r29
    3160:	ce 93       	st	-X, r28
    3162:	11 97       	sbiw	r26, 0x01	; 1
    3164:	f2 82       	std	Z+2, r15	; 0x02
    3166:	13 82       	std	Z+3, r1	; 0x03
    3168:	04 83       	std	Z+4, r16	; 0x04
    316a:	15 82       	std	Z+5, r1	; 0x05
    316c:	16 83       	std	Z+6, r17	; 0x06
    316e:	17 82       	std	Z+7, r1	; 0x07
    3170:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    3174:	f0 2e       	mov	r15, r16
    3176:	8d b7       	in	r24, 0x3d	; 61
    3178:	9e b7       	in	r25, 0x3e	; 62
    317a:	08 96       	adiw	r24, 0x08	; 8
    317c:	0f b6       	in	r0, 0x3f	; 63
    317e:	f8 94       	cli
    3180:	9e bf       	out	0x3e, r25	; 62
    3182:	0f be       	out	0x3f, r0	; 63
    3184:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    3186:	84 ef       	ldi	r24, 0xF4	; 244
    3188:	91 e0       	ldi	r25, 0x01	; 1
    318a:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    318e:	1b 30       	cpi	r17, 0x0B	; 11
    3190:	20 f2       	brcs	.-120    	; 0x311a <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    3192:	1f 5f       	subi	r17, 0xFF	; 255
    3194:	e1 2f       	mov	r30, r17
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	e1 5b       	subi	r30, 0xB1	; 177
    319a:	fa 4f       	sbci	r31, 0xFA	; 250
    319c:	84 e0       	ldi	r24, 0x04	; 4
    319e:	80 83       	st	Z, r24
}
    31a0:	df 91       	pop	r29
    31a2:	cf 91       	pop	r28
    31a4:	1f 91       	pop	r17
    31a6:	0f 91       	pop	r16
    31a8:	ff 90       	pop	r15
    31aa:	08 95       	ret

000031ac <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    31ac:	1f 93       	push	r17
    31ae:	cf 93       	push	r28
    31b0:	df 93       	push	r29
    31b2:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    31b4:	ce e1       	ldi	r28, 0x1E	; 30
    31b6:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    31b8:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    31bc:	81 30       	cpi	r24, 0x01	; 1
    31be:	21 f4       	brne	.+8      	; 0x31c8 <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    31c0:	80 91 61 06 	lds	r24, 0x0661
    31c4:	88 0f       	add	r24, r24
    31c6:	06 c0       	rjmp	.+12     	; 0x31d4 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    31c8:	82 30       	cpi	r24, 0x02	; 2
    31ca:	39 f4       	brne	.+14     	; 0x31da <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    31cc:	80 91 61 06 	lds	r24, 0x0661
    31d0:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    31d2:	8f 5f       	subi	r24, 0xFF	; 255
    31d4:	80 93 61 06 	sts	0x0661, r24
			i++;
    31d8:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    31da:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    31de:	00 d0       	rcall	.+0      	; 0x31e0 <worldInput+0x34>
    31e0:	00 d0       	rcall	.+0      	; 0x31e2 <worldInput+0x36>
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <worldInput+0x38>
    31e4:	ed b7       	in	r30, 0x3d	; 61
    31e6:	fe b7       	in	r31, 0x3e	; 62
    31e8:	31 96       	adiw	r30, 0x01	; 1
    31ea:	ad b7       	in	r26, 0x3d	; 61
    31ec:	be b7       	in	r27, 0x3e	; 62
    31ee:	12 96       	adiw	r26, 0x02	; 2
    31f0:	dc 93       	st	X, r29
    31f2:	ce 93       	st	-X, r28
    31f4:	11 97       	sbiw	r26, 0x01	; 1
    31f6:	80 91 61 06 	lds	r24, 0x0661
    31fa:	82 83       	std	Z+2, r24	; 0x02
    31fc:	13 82       	std	Z+3, r1	; 0x03
    31fe:	14 83       	std	Z+4, r17	; 0x04
    3200:	15 82       	std	Z+5, r1	; 0x05
    3202:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    3206:	8d b7       	in	r24, 0x3d	; 61
    3208:	9e b7       	in	r25, 0x3e	; 62
    320a:	06 96       	adiw	r24, 0x06	; 6
    320c:	0f b6       	in	r0, 0x3f	; 63
    320e:	f8 94       	cli
    3210:	9e bf       	out	0x3e, r25	; 62
    3212:	0f be       	out	0x3f, r0	; 63
    3214:	8d bf       	out	0x3d, r24	; 61
    3216:	84 ef       	ldi	r24, 0xF4	; 244
    3218:	91 e0       	ldi	r25, 0x01	; 1
    321a:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    321e:	14 30       	cpi	r17, 0x04	; 4
    3220:	58 f2       	brcs	.-106    	; 0x31b8 <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    3222:	80 91 61 06 	lds	r24, 0x0661
    3226:	80 93 62 06 	sts	0x0662, r24
}
    322a:	df 91       	pop	r29
    322c:	cf 91       	pop	r28
    322e:	1f 91       	pop	r17
    3230:	08 95       	ret

00003232 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    3232:	1f 93       	push	r17
    3234:	cf 93       	push	r28
    3236:	df 93       	push	r29
    3238:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    323a:	c6 e4       	ldi	r28, 0x46	; 70
    323c:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    323e:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    3242:	81 30       	cpi	r24, 0x01	; 1
    3244:	21 f4       	brne	.+8      	; 0x324e <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    3246:	80 91 60 05 	lds	r24, 0x0560
    324a:	88 0f       	add	r24, r24
    324c:	06 c0       	rjmp	.+12     	; 0x325a <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    324e:	82 30       	cpi	r24, 0x02	; 2
    3250:	41 f4       	brne	.+16     	; 0x3262 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    3252:	80 91 60 05 	lds	r24, 0x0560
    3256:	88 0f       	add	r24, r24
			currentOrientation += 1;
    3258:	8f 5f       	subi	r24, 0xFF	; 255
    325a:	80 93 60 05 	sts	0x0560, r24
			i++;
    325e:	1f 5f       	subi	r17, 0xFF	; 255
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    3262:	88 23       	and	r24, r24
    3264:	f1 f0       	breq	.+60     	; 0x32a2 <orientationInput+0x70>
			LCD_clear();
    3266:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    326a:	00 d0       	rcall	.+0      	; 0x326c <orientationInput+0x3a>
    326c:	00 d0       	rcall	.+0      	; 0x326e <orientationInput+0x3c>
    326e:	00 d0       	rcall	.+0      	; 0x3270 <orientationInput+0x3e>
    3270:	ed b7       	in	r30, 0x3d	; 61
    3272:	fe b7       	in	r31, 0x3e	; 62
    3274:	31 96       	adiw	r30, 0x01	; 1
    3276:	ad b7       	in	r26, 0x3d	; 61
    3278:	be b7       	in	r27, 0x3e	; 62
    327a:	12 96       	adiw	r26, 0x02	; 2
    327c:	dc 93       	st	X, r29
    327e:	ce 93       	st	-X, r28
    3280:	11 97       	sbiw	r26, 0x01	; 1
    3282:	80 91 60 05 	lds	r24, 0x0560
    3286:	82 83       	std	Z+2, r24	; 0x02
    3288:	13 82       	std	Z+3, r1	; 0x03
    328a:	14 83       	std	Z+4, r17	; 0x04
    328c:	15 82       	std	Z+5, r1	; 0x05
    328e:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    3292:	8d b7       	in	r24, 0x3d	; 61
    3294:	9e b7       	in	r25, 0x3e	; 62
    3296:	06 96       	adiw	r24, 0x06	; 6
    3298:	0f b6       	in	r0, 0x3f	; 63
    329a:	f8 94       	cli
    329c:	9e bf       	out	0x3e, r25	; 62
    329e:	0f be       	out	0x3f, r0	; 63
    32a0:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    32a2:	84 ef       	ldi	r24, 0xF4	; 244
    32a4:	91 e0       	ldi	r25, 0x01	; 1
    32a6:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    32aa:	12 30       	cpi	r17, 0x02	; 2
    32ac:	40 f2       	brcs	.-112    	; 0x323e <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    32ae:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
	switch(currentOrientation){
    32b2:	80 91 60 05 	lds	r24, 0x0560
    32b6:	81 30       	cpi	r24, 0x01	; 1
    32b8:	51 f0       	breq	.+20     	; 0x32ce <orientationInput+0x9c>
    32ba:	81 30       	cpi	r24, 0x01	; 1
    32bc:	28 f0       	brcs	.+10     	; 0x32c8 <orientationInput+0x96>
    32be:	82 30       	cpi	r24, 0x02	; 2
    32c0:	49 f0       	breq	.+18     	; 0x32d4 <orientationInput+0xa2>
    32c2:	83 30       	cpi	r24, 0x03	; 3
    32c4:	71 f4       	brne	.+28     	; 0x32e2 <orientationInput+0xb0>
    32c6:	09 c0       	rjmp	.+18     	; 0x32da <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    32c8:	85 e7       	ldi	r24, 0x75	; 117
    32ca:	92 e0       	ldi	r25, 0x02	; 2
    32cc:	08 c0       	rjmp	.+16     	; 0x32de <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    32ce:	87 e9       	ldi	r24, 0x97	; 151
    32d0:	92 e0       	ldi	r25, 0x02	; 2
    32d2:	05 c0       	rjmp	.+10     	; 0x32de <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    32d4:	88 eb       	ldi	r24, 0xB8	; 184
    32d6:	92 e0       	ldi	r25, 0x02	; 2
    32d8:	02 c0       	rjmp	.+4      	; 0x32de <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    32da:	8a ed       	ldi	r24, 0xDA	; 218
    32dc:	92 e0       	ldi	r25, 0x02	; 2
    32de:	0e 94 80 39 	call	0x7300	; 0x7300 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    32e2:	80 91 60 05 	lds	r24, 0x0560
    32e6:	80 93 5f 05 	sts	0x055F, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    32ea:	84 ef       	ldi	r24, 0xF4	; 244
    32ec:	91 e0       	ldi	r25, 0x01	; 1
    32ee:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
}
    32f2:	df 91       	pop	r29
    32f4:	cf 91       	pop	r28
    32f6:	1f 91       	pop	r17
    32f8:	08 95       	ret

000032fa <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    32fa:	cf 92       	push	r12
    32fc:	df 92       	push	r13
    32fe:	ef 92       	push	r14
    3300:	ff 92       	push	r15
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	df 93       	push	r29
    3308:	cf 93       	push	r28
    330a:	0f 92       	push	r0
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    3310:	80 91 61 06 	lds	r24, 0x0661
    3314:	f8 2e       	mov	r15, r24
    3316:	f6 94       	lsr	r15
    3318:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    331a:	98 2f       	mov	r25, r24
    331c:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    331e:	00 91 60 05 	lds	r16, 0x0560
    3322:	cc 24       	eor	r12, r12
    3324:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    3326:	f6 01       	movw	r30, r12
    3328:	e1 5b       	subi	r30, 0xB1	; 177
    332a:	fa 4f       	sbci	r31, 0xFA	; 250
    332c:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    332e:	ef 2d       	mov	r30, r15
    3330:	f0 e0       	ldi	r31, 0x00	; 0
    3332:	ee 0f       	add	r30, r30
    3334:	ff 1f       	adc	r31, r31
    3336:	ee 0f       	add	r30, r30
    3338:	ff 1f       	adc	r31, r31
    333a:	e9 0f       	add	r30, r25
    333c:	f1 1d       	adc	r31, r1
    333e:	e5 5a       	subi	r30, 0xA5	; 165
    3340:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    3342:	80 81       	ld	r24, Z
    3344:	60 2f       	mov	r22, r16
    3346:	41 e0       	ldi	r20, 0x01	; 1
    3348:	99 83       	std	Y+1, r25	; 0x01
    334a:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    334e:	f6 01       	movw	r30, r12
    3350:	ea 51       	subi	r30, 0x1A	; 26
    3352:	f9 4f       	sbci	r31, 0xF9	; 249
    3354:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    3356:	99 81       	ldd	r25, Y+1	; 0x01
    3358:	12 30       	cpi	r17, 0x02	; 2
    335a:	89 f4       	brne	.+34     	; 0x337e <getGateways+0x84>
			switch(curOrient){
    335c:	01 30       	cpi	r16, 0x01	; 1
    335e:	49 f0       	breq	.+18     	; 0x3372 <getGateways+0x78>
    3360:	01 30       	cpi	r16, 0x01	; 1
    3362:	28 f0       	brcs	.+10     	; 0x336e <getGateways+0x74>
    3364:	02 30       	cpi	r16, 0x02	; 2
    3366:	39 f0       	breq	.+14     	; 0x3376 <getGateways+0x7c>
    3368:	03 30       	cpi	r16, 0x03	; 3
    336a:	89 f4       	brne	.+34     	; 0x338e <getGateways+0x94>
    336c:	06 c0       	rjmp	.+12     	; 0x337a <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    336e:	fa 94       	dec	r15
    3370:	0e c0       	rjmp	.+28     	; 0x338e <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    3372:	9f 5f       	subi	r25, 0xFF	; 255
    3374:	0c c0       	rjmp	.+24     	; 0x338e <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    3376:	f3 94       	inc	r15
    3378:	0a c0       	rjmp	.+20     	; 0x338e <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    337a:	91 50       	subi	r25, 0x01	; 1
    337c:	08 c0       	rjmp	.+16     	; 0x338e <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    337e:	13 30       	cpi	r17, 0x03	; 3
    3380:	11 f4       	brne	.+4      	; 0x3386 <getGateways+0x8c>
			curOrient++;
    3382:	0f 5f       	subi	r16, 0xFF	; 255
    3384:	03 c0       	rjmp	.+6      	; 0x338c <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    3386:	11 30       	cpi	r17, 0x01	; 1
    3388:	11 f4       	brne	.+4      	; 0x338e <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    338a:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    338c:	03 70       	andi	r16, 0x03	; 3
    338e:	08 94       	sec
    3390:	c1 1c       	adc	r12, r1
    3392:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    3394:	8d e0       	ldi	r24, 0x0D	; 13
    3396:	c8 16       	cp	r12, r24
    3398:	d1 04       	cpc	r13, r1
    339a:	29 f6       	brne	.-118    	; 0x3326 <getGateways+0x2c>
    339c:	cc 24       	eor	r12, r12
    339e:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    33a0:	7b ef       	ldi	r23, 0xFB	; 251
    33a2:	e7 2e       	mov	r14, r23
    33a4:	72 e0       	ldi	r23, 0x02	; 2
    33a6:	f7 2e       	mov	r15, r23
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    33a8:	f6 01       	movw	r30, r12
    33aa:	ea 51       	subi	r30, 0x1A	; 26
    33ac:	f9 4f       	sbci	r31, 0xF9	; 249
    33ae:	00 81       	ld	r16, Z
		LCD_clear();
    33b0:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    33b4:	20 2f       	mov	r18, r16
    33b6:	30 e0       	ldi	r19, 0x00	; 0
    33b8:	ad b7       	in	r26, 0x3d	; 61
    33ba:	be b7       	in	r27, 0x3e	; 62
    33bc:	54 97       	sbiw	r26, 0x14	; 20
    33be:	0f b6       	in	r0, 0x3f	; 63
    33c0:	f8 94       	cli
    33c2:	be bf       	out	0x3e, r27	; 62
    33c4:	0f be       	out	0x3f, r0	; 63
    33c6:	ad bf       	out	0x3d, r26	; 61
    33c8:	ed b7       	in	r30, 0x3d	; 61
    33ca:	fe b7       	in	r31, 0x3e	; 62
    33cc:	31 96       	adiw	r30, 0x01	; 1
    33ce:	12 96       	adiw	r26, 0x02	; 2
    33d0:	fc 92       	st	X, r15
    33d2:	ee 92       	st	-X, r14
    33d4:	11 97       	sbiw	r26, 0x01	; 1
    33d6:	d3 82       	std	Z+3, r13	; 0x03
    33d8:	c2 82       	std	Z+2, r12	; 0x02
    33da:	11 27       	eor	r17, r17
    33dc:	07 fd       	sbrc	r16, 7
    33de:	10 95       	com	r17
    33e0:	00 27       	eor	r16, r16
    33e2:	11 0f       	add	r17, r17
    33e4:	00 1f       	adc	r16, r16
    33e6:	11 27       	eor	r17, r17
    33e8:	15 83       	std	Z+5, r17	; 0x05
    33ea:	04 83       	std	Z+4, r16	; 0x04
    33ec:	c9 01       	movw	r24, r18
    33ee:	56 e0       	ldi	r21, 0x06	; 6
    33f0:	96 95       	lsr	r25
    33f2:	87 95       	ror	r24
    33f4:	5a 95       	dec	r21
    33f6:	e1 f7       	brne	.-8      	; 0x33f0 <getGateways+0xf6>
    33f8:	81 70       	andi	r24, 0x01	; 1
    33fa:	90 70       	andi	r25, 0x00	; 0
    33fc:	97 83       	std	Z+7, r25	; 0x07
    33fe:	86 83       	std	Z+6, r24	; 0x06
    3400:	c9 01       	movw	r24, r18
    3402:	45 e0       	ldi	r20, 0x05	; 5
    3404:	96 95       	lsr	r25
    3406:	87 95       	ror	r24
    3408:	4a 95       	dec	r20
    340a:	e1 f7       	brne	.-8      	; 0x3404 <getGateways+0x10a>
    340c:	81 70       	andi	r24, 0x01	; 1
    340e:	90 70       	andi	r25, 0x00	; 0
    3410:	91 87       	std	Z+9, r25	; 0x09
    3412:	80 87       	std	Z+8, r24	; 0x08
    3414:	c9 01       	movw	r24, r18
    3416:	04 e0       	ldi	r16, 0x04	; 4
    3418:	96 95       	lsr	r25
    341a:	87 95       	ror	r24
    341c:	0a 95       	dec	r16
    341e:	e1 f7       	brne	.-8      	; 0x3418 <getGateways+0x11e>
    3420:	81 70       	andi	r24, 0x01	; 1
    3422:	90 70       	andi	r25, 0x00	; 0
    3424:	93 87       	std	Z+11, r25	; 0x0b
    3426:	82 87       	std	Z+10, r24	; 0x0a
    3428:	c9 01       	movw	r24, r18
    342a:	13 e0       	ldi	r17, 0x03	; 3
    342c:	96 95       	lsr	r25
    342e:	87 95       	ror	r24
    3430:	1a 95       	dec	r17
    3432:	e1 f7       	brne	.-8      	; 0x342c <getGateways+0x132>
    3434:	81 70       	andi	r24, 0x01	; 1
    3436:	90 70       	andi	r25, 0x00	; 0
    3438:	95 87       	std	Z+13, r25	; 0x0d
    343a:	84 87       	std	Z+12, r24	; 0x0c
    343c:	c9 01       	movw	r24, r18
    343e:	96 95       	lsr	r25
    3440:	87 95       	ror	r24
    3442:	96 95       	lsr	r25
    3444:	87 95       	ror	r24
    3446:	81 70       	andi	r24, 0x01	; 1
    3448:	90 70       	andi	r25, 0x00	; 0
    344a:	97 87       	std	Z+15, r25	; 0x0f
    344c:	86 87       	std	Z+14, r24	; 0x0e
    344e:	c9 01       	movw	r24, r18
    3450:	96 95       	lsr	r25
    3452:	87 95       	ror	r24
    3454:	81 70       	andi	r24, 0x01	; 1
    3456:	90 70       	andi	r25, 0x00	; 0
    3458:	91 8b       	std	Z+17, r25	; 0x11
    345a:	80 8b       	std	Z+16, r24	; 0x10
    345c:	21 70       	andi	r18, 0x01	; 1
    345e:	30 70       	andi	r19, 0x00	; 0
    3460:	33 8b       	std	Z+19, r19	; 0x13
    3462:	22 8b       	std	Z+18, r18	; 0x12
    3464:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
		TMRSRVC_delay(1000);//wait 1 second
    3468:	ed b7       	in	r30, 0x3d	; 61
    346a:	fe b7       	in	r31, 0x3e	; 62
    346c:	74 96       	adiw	r30, 0x14	; 20
    346e:	0f b6       	in	r0, 0x3f	; 63
    3470:	f8 94       	cli
    3472:	fe bf       	out	0x3e, r31	; 62
    3474:	0f be       	out	0x3f, r0	; 63
    3476:	ed bf       	out	0x3d, r30	; 61
    3478:	88 ee       	ldi	r24, 0xE8	; 232
    347a:	93 e0       	ldi	r25, 0x03	; 3
    347c:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
    3480:	08 94       	sec
    3482:	c1 1c       	adc	r12, r1
    3484:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    3486:	fd e0       	ldi	r31, 0x0D	; 13
    3488:	cf 16       	cp	r12, r31
    348a:	d1 04       	cpc	r13, r1
    348c:	09 f0       	breq	.+2      	; 0x3490 <getGateways+0x196>
    348e:	8c cf       	rjmp	.-232    	; 0x33a8 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    3490:	0f 90       	pop	r0
    3492:	cf 91       	pop	r28
    3494:	df 91       	pop	r29
    3496:	1f 91       	pop	r17
    3498:	0f 91       	pop	r16
    349a:	ff 90       	pop	r15
    349c:	ef 90       	pop	r14
    349e:	df 90       	pop	r13
    34a0:	cf 90       	pop	r12
    34a2:	08 95       	ret

000034a4 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    34a4:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    34a6:	10 91 61 06 	lds	r17, 0x0661
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    34aa:	80 91 cc 04 	lds	r24, 0x04CC
    34ae:	60 91 60 05 	lds	r22, 0x0560
    34b2:	40 e0       	ldi	r20, 0x00	; 0
    34b4:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    34b8:	e1 2f       	mov	r30, r17
    34ba:	e6 95       	lsr	r30
    34bc:	e6 95       	lsr	r30
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	ee 0f       	add	r30, r30
    34c2:	ff 1f       	adc	r31, r31
    34c4:	ee 0f       	add	r30, r30
    34c6:	ff 1f       	adc	r31, r31
    34c8:	13 70       	andi	r17, 0x03	; 3
    34ca:	e1 0f       	add	r30, r17
    34cc:	f1 1d       	adc	r31, r1
    34ce:	e5 5a       	subi	r30, 0xA5	; 165
    34d0:	fc 4f       	sbci	r31, 0xFC	; 252
    34d2:	80 83       	st	Z, r24
}
    34d4:	1f 91       	pop	r17
    34d6:	08 95       	ret

000034d8 <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char *ptROBOT_WORLD, unsigned char row, unsigned char col)
{	
    34d8:	ef 92       	push	r14
    34da:	ff 92       	push	r15
    34dc:	0f 93       	push	r16
    34de:	1f 93       	push	r17
    34e0:	cf 93       	push	r28
    34e2:	df 93       	push	r29
    34e4:	ec 01       	movw	r28, r24
    34e6:	f6 2e       	mov	r15, r22
    34e8:	04 2f       	mov	r16, r20
    34ea:	ee 24       	eor	r14, r14
    34ec:	2a c0       	rjmp	.+84     	; 0x3542 <matchBranch+0x6a>
	// Then check for a matching brache
	for(i = 0; i <= currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if(!((curRow<WORLD_ROW_SIZE)&(curCol<WORLD_COLUMN_SIZE))){
    34ee:	83 e0       	ldi	r24, 0x03	; 3
    34f0:	8f 15       	cp	r24, r15
    34f2:	68 f1       	brcs	.+90     	; 0x354e <matchBranch+0x76>
    34f4:	04 30       	cpi	r16, 0x04	; 4
    34f6:	58 f5       	brcc	.+86     	; 0x354e <matchBranch+0x76>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    34f8:	ee 2d       	mov	r30, r14
    34fa:	f0 e0       	ldi	r31, 0x00	; 0
    34fc:	e3 50       	subi	r30, 0x03	; 3
    34fe:	f9 4f       	sbci	r31, 0xF9	; 249
		
		// Get the current orientation 
		curOrnt = localizeGateways[1][i];
    3500:	15 81       	ldd	r17, Z+5	; 0x05
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    3502:	80 81       	ld	r24, Z
    3504:	61 2f       	mov	r22, r17
    3506:	40 e0       	ldi	r20, 0x00	; 0
    3508:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// Get gateway from map
		gateway = *(ptROBOT_WORLD+curRow+curCol);
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    350c:	fe 01       	movw	r30, r28
    350e:	e0 0f       	add	r30, r16
    3510:	f1 1d       	adc	r31, r1
    3512:	ef 0d       	add	r30, r15
    3514:	f1 1d       	adc	r31, r1
    3516:	90 81       	ld	r25, Z
    3518:	89 17       	cp	r24, r25
    351a:	c9 f4       	brne	.+50     	; 0x354e <matchBranch+0x76>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		currentCellWorld = (curRow << 2) + curCol;
    351c:	8f 2d       	mov	r24, r15
    351e:	88 0f       	add	r24, r24
    3520:	88 0f       	add	r24, r24
    3522:	80 0f       	add	r24, r16
    3524:	80 93 61 06 	sts	0x0661, r24
		
		// Prep for the gateway by moving with the next branch		
		currentCellWorld = shiftMap(currentCellWorld, curOrnt);
    3528:	61 2f       	mov	r22, r17
    352a:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <shiftMap>
    352e:	80 93 61 06 	sts	0x0661, r24
		currentOrientation = curOrnt;
    3532:	10 93 60 05 	sts	0x0560, r17
		
		// Get the currrent cell of the branch
		curRow = currentCellWorld >> 2;
    3536:	f8 2e       	mov	r15, r24
    3538:	f6 94       	lsr	r15
    353a:	f6 94       	lsr	r15
		curCol = currentCellWorld & 0b0011;
    353c:	08 2f       	mov	r16, r24
    353e:	03 70       	andi	r16, 0x03	; 3
	unsigned char curCol = col;
	unsigned char curOrnt, i;
	
	
	// Then check for a matching brache
	for(i = 0; i <= currentBranch; i++){
    3540:	e3 94       	inc	r14
    3542:	80 91 ca 03 	lds	r24, 0x03CA
    3546:	8e 15       	cp	r24, r14
    3548:	90 f6       	brcc	.-92     	; 0x34ee <matchBranch+0x16>
    354a:	81 e0       	ldi	r24, 0x01	; 1
    354c:	01 c0       	rjmp	.+2      	; 0x3550 <matchBranch+0x78>
    354e:	80 e0       	ldi	r24, 0x00	; 0
		curCol = currentCellWorld & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	return SUCCESS;
}
    3550:	df 91       	pop	r29
    3552:	cf 91       	pop	r28
    3554:	1f 91       	pop	r17
    3556:	0f 91       	pop	r16
    3558:	ff 90       	pop	r15
    355a:	ef 90       	pop	r14
    355c:	08 95       	ret

0000355e <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    355e:	cf 92       	push	r12
    3560:	df 92       	push	r13
    3562:	ef 92       	push	r14
    3564:	ff 92       	push	r15
    3566:	0f 93       	push	r16
    3568:	1f 93       	push	r17
    356a:	cf 93       	push	r28
    356c:	df 93       	push	r29
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    356e:	c0 90 fd 06 	lds	r12, 0x06FD
    3572:	ee 24       	eor	r14, r14
    3574:	00 e0       	ldi	r16, 0x00	; 0
    3576:	10 e0       	ldi	r17, 0x00	; 0
    3578:	15 c0       	rjmp	.+42     	; 0x35a4 <localizeGateway+0x46>
	
		// And For ever column in the map
		for(col = 0; col <= WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			if(localizeSeed == ROBOT_WORLD[row][col]){
    357a:	88 81       	ld	r24, Y
    357c:	c8 16       	cp	r12, r24
    357e:	41 f4       	brne	.+16     	; 0x3590 <localizeGateway+0x32>
			
				//Check to see if we have a matching branch
				if(matchBranch(*ROBOT_WORLD,row,col)){
    3580:	8b e5       	ldi	r24, 0x5B	; 91
    3582:	93 e0       	ldi	r25, 0x03	; 3
    3584:	6d 2d       	mov	r22, r13
    3586:	4f 2d       	mov	r20, r15
    3588:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <matchBranch>
    358c:	81 11       	cpse	r24, r1
					matchRow = row;
					matchCol = col;
					matchSeeds++;
    358e:	e3 94       	inc	r14
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row <= WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col <= WORLD_COLUMN_SIZE; col++){
    3590:	f3 94       	inc	r15
    3592:	21 96       	adiw	r28, 0x01	; 1
    3594:	85 e0       	ldi	r24, 0x05	; 5
    3596:	f8 16       	cp	r15, r24
    3598:	81 f7       	brne	.-32     	; 0x357a <localizeGateway+0x1c>
    359a:	0f 5f       	subi	r16, 0xFF	; 255
    359c:	1f 4f       	sbci	r17, 0xFF	; 255
	// Stores the last matching seed index
	unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row <= WORLD_ROW_SIZE; row++){
    359e:	05 30       	cpi	r16, 0x05	; 5
    35a0:	11 05       	cpc	r17, r1
    35a2:	51 f0       	breq	.+20     	; 0x35b8 <localizeGateway+0x5a>
    35a4:	d0 2e       	mov	r13, r16
    35a6:	e8 01       	movw	r28, r16
    35a8:	cc 0f       	add	r28, r28
    35aa:	dd 1f       	adc	r29, r29
    35ac:	cc 0f       	add	r28, r28
    35ae:	dd 1f       	adc	r29, r29
    35b0:	c5 5a       	subi	r28, 0xA5	; 165
    35b2:	dc 4f       	sbci	r29, 0xFC	; 252
    35b4:	ff 24       	eor	r15, r15
    35b6:	e1 cf       	rjmp	.-62     	; 0x357a <localizeGateway+0x1c>
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	91 e0       	ldi	r25, 0x01	; 1
    35bc:	e9 12       	cpse	r14, r25
    35be:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	// If we have none or more than one seed
	// return failure
	return 1;
}
    35c0:	df 91       	pop	r29
    35c2:	cf 91       	pop	r28
    35c4:	1f 91       	pop	r17
    35c6:	0f 91       	pop	r16
    35c8:	ff 90       	pop	r15
    35ca:	ef 90       	pop	r14
    35cc:	df 90       	pop	r13
    35ce:	cf 90       	pop	r12
    35d0:	08 95       	ret

000035d2 <CBOT_main>:
/*******************************************************************
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
    35d2:	cf 92       	push	r12
    35d4:	df 92       	push	r13
    35d6:	ef 92       	push	r14
    35d8:	ff 92       	push	r15
    35da:	0f 93       	push	r16
    35dc:	1f 93       	push	r17
    35de:	cf 93       	push	r28
    35e0:	df 93       	push	r29
	// initialize the robot
	initializeRobot();
    35e2:	0e 94 d7 11 	call	0x23ae	; 0x23ae <initializeRobot>
	
	// reset the Odometry
	checkOdometry(1);
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	0e 94 75 11 	call	0x22ea	; 0x22ea <checkOdometry>
	
	isLost = 1;
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	80 93 fc 06 	sts	0x06FC, r24
		}
		
		//Print Tree
		
		LCD_clear();
		LCD_printf("Branch");
    35f2:	2d e2       	ldi	r18, 0x2D	; 45
    35f4:	c2 2e       	mov	r12, r18
    35f6:	23 e0       	ldi	r18, 0x03	; 3
    35f8:	d2 2e       	mov	r13, r18
		for(i = 0; i<BRANCH_MAX; i++){
			branch = localizeGateways[0][i];
			LCD_printf("%3d", branch);
    35fa:	c4 e3       	ldi	r28, 0x34	; 52
    35fc:	d3 e0       	ldi	r29, 0x03	; 3
		}
		LCD_printf("Move  ");
    35fe:	98 e3       	ldi	r25, 0x38	; 56
    3600:	e9 2e       	mov	r14, r25
    3602:	93 e0       	ldi	r25, 0x03	; 3
    3604:	f9 2e       	mov	r15, r25
		for(i = 0; i<BRANCH_MAX; i++){
			move = localizeGateways[1][i];
			LCD_printf("%3d", move);
		}
		LCD_printf("isLost %1d",isLost);
    3606:	0f e3       	ldi	r16, 0x3F	; 63
    3608:	13 e0       	ldi	r17, 0x03	; 3
    360a:	e2 c0       	rjmp	.+452    	; 0x37d0 <CBOT_main+0x1fe>
	
	// Localization Loop 
	while(isLost)
	{	
		//Sense Gateway
		checkIR();	
    360c:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <checkIR>
		checkWorld();
    3610:	0e 94 21 12 	call	0x2442	; 0x2442 <checkWorld>
		
		//Plan using the Gateway
		planGateway();
    3614:	0e 94 12 17 	call	0x2e24	; 0x2e24 <planGateway>
		
		//Localize from Gateways?
		isLost = localizeGateway();
    3618:	0e 94 af 1a 	call	0x355e	; 0x355e <localizeGateway>
    361c:	80 93 fc 06 	sts	0x06FC, r24
		if(!isLost){			
    3620:	88 23       	and	r24, r24
    3622:	a1 f4       	brne	.+40     	; 0x364c <CBOT_main+0x7a>
			LCD_clear();
    3624:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
			LCD_printf("LOLZ\nI'm found!");
    3628:	00 d0       	rcall	.+0      	; 0x362a <CBOT_main+0x58>
    362a:	8d e1       	ldi	r24, 0x1D	; 29
    362c:	93 e0       	ldi	r25, 0x03	; 3
    362e:	ad b7       	in	r26, 0x3d	; 61
    3630:	be b7       	in	r27, 0x3e	; 62
    3632:	12 96       	adiw	r26, 0x02	; 2
    3634:	9c 93       	st	X, r25
    3636:	8e 93       	st	-X, r24
    3638:	11 97       	sbiw	r26, 0x01	; 1
    363a:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
			TMRSRVC_delay(3000);//wait 3 seconds
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	88 eb       	ldi	r24, 0xB8	; 184
    3644:	9b e0       	ldi	r25, 0x0B	; 11
    3646:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
    364a:	c7 c0       	rjmp	.+398    	; 0x37da <CBOT_main+0x208>
			break;
		}
		
		//Print Tree
		
		LCD_clear();
    364c:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
		LCD_printf("Branch");
    3650:	00 d0       	rcall	.+0      	; 0x3652 <CBOT_main+0x80>
    3652:	ed b7       	in	r30, 0x3d	; 61
    3654:	fe b7       	in	r31, 0x3e	; 62
    3656:	d2 82       	std	Z+2, r13	; 0x02
    3658:	c1 82       	std	Z+1, r12	; 0x01
    365a:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
		for(i = 0; i<BRANCH_MAX; i++){
			branch = localizeGateways[0][i];
			LCD_printf("%3d", branch);
    365e:	00 d0       	rcall	.+0      	; 0x3660 <CBOT_main+0x8e>
    3660:	ed b7       	in	r30, 0x3d	; 61
    3662:	fe b7       	in	r31, 0x3e	; 62
    3664:	31 96       	adiw	r30, 0x01	; 1
    3666:	ad b7       	in	r26, 0x3d	; 61
    3668:	be b7       	in	r27, 0x3e	; 62
    366a:	12 96       	adiw	r26, 0x02	; 2
    366c:	dc 93       	st	X, r29
    366e:	ce 93       	st	-X, r28
    3670:	11 97       	sbiw	r26, 0x01	; 1
    3672:	80 91 fd 06 	lds	r24, 0x06FD
    3676:	82 83       	std	Z+2, r24	; 0x02
    3678:	13 82       	std	Z+3, r1	; 0x03
    367a:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    367e:	ed b7       	in	r30, 0x3d	; 61
    3680:	fe b7       	in	r31, 0x3e	; 62
    3682:	31 96       	adiw	r30, 0x01	; 1
    3684:	ad b7       	in	r26, 0x3d	; 61
    3686:	be b7       	in	r27, 0x3e	; 62
    3688:	12 96       	adiw	r26, 0x02	; 2
    368a:	dc 93       	st	X, r29
    368c:	ce 93       	st	-X, r28
    368e:	11 97       	sbiw	r26, 0x01	; 1
    3690:	80 91 fe 06 	lds	r24, 0x06FE
    3694:	82 83       	std	Z+2, r24	; 0x02
    3696:	13 82       	std	Z+3, r1	; 0x03
    3698:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    369c:	ed b7       	in	r30, 0x3d	; 61
    369e:	fe b7       	in	r31, 0x3e	; 62
    36a0:	31 96       	adiw	r30, 0x01	; 1
    36a2:	ad b7       	in	r26, 0x3d	; 61
    36a4:	be b7       	in	r27, 0x3e	; 62
    36a6:	12 96       	adiw	r26, 0x02	; 2
    36a8:	dc 93       	st	X, r29
    36aa:	ce 93       	st	-X, r28
    36ac:	11 97       	sbiw	r26, 0x01	; 1
    36ae:	80 91 ff 06 	lds	r24, 0x06FF
    36b2:	82 83       	std	Z+2, r24	; 0x02
    36b4:	13 82       	std	Z+3, r1	; 0x03
    36b6:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    36ba:	ed b7       	in	r30, 0x3d	; 61
    36bc:	fe b7       	in	r31, 0x3e	; 62
    36be:	31 96       	adiw	r30, 0x01	; 1
    36c0:	ad b7       	in	r26, 0x3d	; 61
    36c2:	be b7       	in	r27, 0x3e	; 62
    36c4:	12 96       	adiw	r26, 0x02	; 2
    36c6:	dc 93       	st	X, r29
    36c8:	ce 93       	st	-X, r28
    36ca:	11 97       	sbiw	r26, 0x01	; 1
    36cc:	80 91 00 07 	lds	r24, 0x0700
    36d0:	82 83       	std	Z+2, r24	; 0x02
    36d2:	13 82       	std	Z+3, r1	; 0x03
    36d4:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    36d8:	ed b7       	in	r30, 0x3d	; 61
    36da:	fe b7       	in	r31, 0x3e	; 62
    36dc:	31 96       	adiw	r30, 0x01	; 1
    36de:	ad b7       	in	r26, 0x3d	; 61
    36e0:	be b7       	in	r27, 0x3e	; 62
    36e2:	12 96       	adiw	r26, 0x02	; 2
    36e4:	dc 93       	st	X, r29
    36e6:	ce 93       	st	-X, r28
    36e8:	11 97       	sbiw	r26, 0x01	; 1
    36ea:	80 91 01 07 	lds	r24, 0x0701
    36ee:	82 83       	std	Z+2, r24	; 0x02
    36f0:	13 82       	std	Z+3, r1	; 0x03
    36f2:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
		}
		LCD_printf("Move  ");
    36f6:	0f 90       	pop	r0
    36f8:	0f 90       	pop	r0
    36fa:	ed b7       	in	r30, 0x3d	; 61
    36fc:	fe b7       	in	r31, 0x3e	; 62
    36fe:	f2 82       	std	Z+2, r15	; 0x02
    3700:	e1 82       	std	Z+1, r14	; 0x01
    3702:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
		for(i = 0; i<BRANCH_MAX; i++){
			move = localizeGateways[1][i];
			LCD_printf("%3d", move);
    3706:	00 d0       	rcall	.+0      	; 0x3708 <CBOT_main+0x136>
    3708:	ed b7       	in	r30, 0x3d	; 61
    370a:	fe b7       	in	r31, 0x3e	; 62
    370c:	31 96       	adiw	r30, 0x01	; 1
    370e:	ad b7       	in	r26, 0x3d	; 61
    3710:	be b7       	in	r27, 0x3e	; 62
    3712:	12 96       	adiw	r26, 0x02	; 2
    3714:	dc 93       	st	X, r29
    3716:	ce 93       	st	-X, r28
    3718:	11 97       	sbiw	r26, 0x01	; 1
    371a:	80 91 02 07 	lds	r24, 0x0702
    371e:	82 83       	std	Z+2, r24	; 0x02
    3720:	13 82       	std	Z+3, r1	; 0x03
    3722:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    3726:	ed b7       	in	r30, 0x3d	; 61
    3728:	fe b7       	in	r31, 0x3e	; 62
    372a:	31 96       	adiw	r30, 0x01	; 1
    372c:	ad b7       	in	r26, 0x3d	; 61
    372e:	be b7       	in	r27, 0x3e	; 62
    3730:	12 96       	adiw	r26, 0x02	; 2
    3732:	dc 93       	st	X, r29
    3734:	ce 93       	st	-X, r28
    3736:	11 97       	sbiw	r26, 0x01	; 1
    3738:	80 91 03 07 	lds	r24, 0x0703
    373c:	82 83       	std	Z+2, r24	; 0x02
    373e:	13 82       	std	Z+3, r1	; 0x03
    3740:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    3744:	ed b7       	in	r30, 0x3d	; 61
    3746:	fe b7       	in	r31, 0x3e	; 62
    3748:	31 96       	adiw	r30, 0x01	; 1
    374a:	ad b7       	in	r26, 0x3d	; 61
    374c:	be b7       	in	r27, 0x3e	; 62
    374e:	12 96       	adiw	r26, 0x02	; 2
    3750:	dc 93       	st	X, r29
    3752:	ce 93       	st	-X, r28
    3754:	11 97       	sbiw	r26, 0x01	; 1
    3756:	80 91 04 07 	lds	r24, 0x0704
    375a:	82 83       	std	Z+2, r24	; 0x02
    375c:	13 82       	std	Z+3, r1	; 0x03
    375e:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    3762:	ed b7       	in	r30, 0x3d	; 61
    3764:	fe b7       	in	r31, 0x3e	; 62
    3766:	31 96       	adiw	r30, 0x01	; 1
    3768:	ad b7       	in	r26, 0x3d	; 61
    376a:	be b7       	in	r27, 0x3e	; 62
    376c:	12 96       	adiw	r26, 0x02	; 2
    376e:	dc 93       	st	X, r29
    3770:	ce 93       	st	-X, r28
    3772:	11 97       	sbiw	r26, 0x01	; 1
    3774:	80 91 05 07 	lds	r24, 0x0705
    3778:	82 83       	std	Z+2, r24	; 0x02
    377a:	13 82       	std	Z+3, r1	; 0x03
    377c:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
    3780:	ed b7       	in	r30, 0x3d	; 61
    3782:	fe b7       	in	r31, 0x3e	; 62
    3784:	31 96       	adiw	r30, 0x01	; 1
    3786:	ad b7       	in	r26, 0x3d	; 61
    3788:	be b7       	in	r27, 0x3e	; 62
    378a:	12 96       	adiw	r26, 0x02	; 2
    378c:	dc 93       	st	X, r29
    378e:	ce 93       	st	-X, r28
    3790:	11 97       	sbiw	r26, 0x01	; 1
    3792:	80 91 06 07 	lds	r24, 0x0706
    3796:	82 83       	std	Z+2, r24	; 0x02
    3798:	13 82       	std	Z+3, r1	; 0x03
    379a:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
		}
		LCD_printf("isLost %1d",isLost);
    379e:	ed b7       	in	r30, 0x3d	; 61
    37a0:	fe b7       	in	r31, 0x3e	; 62
    37a2:	31 96       	adiw	r30, 0x01	; 1
    37a4:	ad b7       	in	r26, 0x3d	; 61
    37a6:	be b7       	in	r27, 0x3e	; 62
    37a8:	12 96       	adiw	r26, 0x02	; 2
    37aa:	1c 93       	st	X, r17
    37ac:	0e 93       	st	-X, r16
    37ae:	11 97       	sbiw	r26, 0x01	; 1
    37b0:	80 91 fc 06 	lds	r24, 0x06FC
    37b4:	82 83       	std	Z+2, r24	; 0x02
    37b6:	13 82       	std	Z+3, r1	; 0x03
    37b8:	0e 94 6e 39 	call	0x72dc	; 0x72dc <printf>
		TMRSRVC_delay(2000);//wait 3 seconds
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	0f 90       	pop	r0
    37c2:	0f 90       	pop	r0
    37c4:	80 ed       	ldi	r24, 0xD0	; 208
    37c6:	97 e0       	ldi	r25, 0x07	; 7
    37c8:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
		
		//Act on the Gateway
		moveMap();
    37cc:	0e 94 98 16 	call	0x2d30	; 0x2d30 <moveMap>
	
	isLost = 1;
	unsigned char i, branch, move;
	
	// Localization Loop 
	while(isLost)
    37d0:	80 91 fc 06 	lds	r24, 0x06FC
    37d4:	88 23       	and	r24, r24
    37d6:	09 f0       	breq	.+2      	; 0x37da <CBOT_main+0x208>
    37d8:	19 cf       	rjmp	.-462    	; 0x360c <CBOT_main+0x3a>
		// TMRSRVC_delay(1000);//wait 3 seconds
	}
	**/
	
	
	LCD_clear();
    37da:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
	TMRSRVC_delay(1000);//wait 1 seconds
    37de:	88 ee       	ldi	r24, 0xE8	; 232
    37e0:	93 e0       	ldi	r25, 0x03	; 3
    37e2:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
	LCD_printf("      New Map\n\n\n\n");
    37e6:	8a e4       	ldi	r24, 0x4A	; 74
    37e8:	93 e0       	ldi	r25, 0x03	; 3
    37ea:	0e 94 80 39 	call	0x7300	; 0x7300 <puts>
	printMap();
    37ee:	0e 94 30 11 	call	0x2260	; 0x2260 <printMap>
	TMRSRVC_delay(10000);//wait 10 seconds
    37f2:	80 e1       	ldi	r24, 0x10	; 16
    37f4:	97 e2       	ldi	r25, 0x27	; 39
    37f6:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
	LCD_clear();
    37fa:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
		// LCD_clear();
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/
}// end the CBOT_main()
    37fe:	df 91       	pop	r29
    3800:	cf 91       	pop	r28
    3802:	1f 91       	pop	r17
    3804:	0f 91       	pop	r16
    3806:	ff 90       	pop	r15
    3808:	ef 90       	pop	r14
    380a:	df 90       	pop	r13
    380c:	cf 90       	pop	r12
    380e:	08 95       	ret

00003810 <ADC_open>:
    3810:	8f e0       	ldi	r24, 0x0F	; 15
    3812:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3816:	88 23       	and	r24, r24
    3818:	31 f4       	brne	.+12     	; 0x3826 <ADC_open+0x16>
    381a:	0e 94 8b 24 	call	0x4916	; 0x4916 <__ADC_init>
    381e:	8f e0       	ldi	r24, 0x0F	; 15
    3820:	61 e0       	ldi	r22, 0x01	; 1
    3822:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    3826:	8f e0       	ldi	r24, 0x0F	; 15
    3828:	91 e0       	ldi	r25, 0x01	; 1
    382a:	08 95       	ret

0000382c <ADC_sample>:
    382c:	8f e0       	ldi	r24, 0x0F	; 15
    382e:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3832:	81 30       	cpi	r24, 0x01	; 1
    3834:	19 f0       	breq	.+6      	; 0x383c <ADC_sample+0x10>
    3836:	20 e0       	ldi	r18, 0x00	; 0
    3838:	30 e0       	ldi	r19, 0x00	; 0
    383a:	13 c0       	rjmp	.+38     	; 0x3862 <ADC_sample+0x36>
    383c:	80 91 7a 00 	lds	r24, 0x007A
    3840:	80 64       	ori	r24, 0x40	; 64
    3842:	80 93 7a 00 	sts	0x007A, r24
    3846:	80 91 7a 00 	lds	r24, 0x007A
    384a:	86 fd       	sbrc	r24, 6
    384c:	fc cf       	rjmp	.-8      	; 0x3846 <ADC_sample+0x1a>
    384e:	30 91 78 00 	lds	r19, 0x0078
    3852:	20 91 79 00 	lds	r18, 0x0079
    3856:	92 2f       	mov	r25, r18
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	23 2f       	mov	r18, r19
    385c:	30 e0       	ldi	r19, 0x00	; 0
    385e:	28 2b       	or	r18, r24
    3860:	39 2b       	or	r19, r25
    3862:	c9 01       	movw	r24, r18
    3864:	08 95       	ret

00003866 <ADC_set_channel>:
    3866:	58 2f       	mov	r21, r24
    3868:	80 91 6b 03 	lds	r24, 0x036B
    386c:	88 30       	cpi	r24, 0x08	; 8
    386e:	d8 f4       	brcc	.+54     	; 0x38a6 <ADC_set_channel+0x40>
    3870:	40 91 7e 00 	lds	r20, 0x007E
    3874:	21 e0       	ldi	r18, 0x01	; 1
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	b9 01       	movw	r22, r18
    387a:	02 c0       	rjmp	.+4      	; 0x3880 <ADC_set_channel+0x1a>
    387c:	66 0f       	add	r22, r22
    387e:	77 1f       	adc	r23, r23
    3880:	8a 95       	dec	r24
    3882:	e2 f7       	brpl	.-8      	; 0x387c <ADC_set_channel+0x16>
    3884:	cb 01       	movw	r24, r22
    3886:	80 95       	com	r24
    3888:	84 23       	and	r24, r20
    388a:	80 93 7e 00 	sts	0x007E, r24
    388e:	80 91 7e 00 	lds	r24, 0x007E
    3892:	05 2e       	mov	r0, r21
    3894:	02 c0       	rjmp	.+4      	; 0x389a <ADC_set_channel+0x34>
    3896:	22 0f       	add	r18, r18
    3898:	33 1f       	adc	r19, r19
    389a:	0a 94       	dec	r0
    389c:	e2 f7       	brpl	.-8      	; 0x3896 <ADC_set_channel+0x30>
    389e:	82 2b       	or	r24, r18
    38a0:	80 93 7e 00 	sts	0x007E, r24
    38a4:	0d c0       	rjmp	.+26     	; 0x38c0 <ADC_set_channel+0x5a>
    38a6:	20 91 7e 00 	lds	r18, 0x007E
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	05 2e       	mov	r0, r21
    38b0:	02 c0       	rjmp	.+4      	; 0x38b6 <ADC_set_channel+0x50>
    38b2:	88 0f       	add	r24, r24
    38b4:	99 1f       	adc	r25, r25
    38b6:	0a 94       	dec	r0
    38b8:	e2 f7       	brpl	.-8      	; 0x38b2 <ADC_set_channel+0x4c>
    38ba:	28 2b       	or	r18, r24
    38bc:	20 93 7e 00 	sts	0x007E, r18
    38c0:	50 93 6b 03 	sts	0x036B, r21
    38c4:	80 91 7c 00 	lds	r24, 0x007C
    38c8:	5f 71       	andi	r21, 0x1F	; 31
    38ca:	80 7e       	andi	r24, 0xE0	; 224
    38cc:	85 2b       	or	r24, r21
    38ce:	80 93 7c 00 	sts	0x007C, r24
    38d2:	08 95       	ret

000038d4 <ADC_set_VREF>:
    38d4:	ec e7       	ldi	r30, 0x7C	; 124
    38d6:	f0 e0       	ldi	r31, 0x00	; 0
    38d8:	90 81       	ld	r25, Z
    38da:	82 95       	swap	r24
    38dc:	88 0f       	add	r24, r24
    38de:	88 0f       	add	r24, r24
    38e0:	80 7c       	andi	r24, 0xC0	; 192
    38e2:	9f 73       	andi	r25, 0x3F	; 63
    38e4:	98 2b       	or	r25, r24
    38e6:	90 83       	st	Z, r25
    38e8:	08 95       	ret

000038ea <main>:
    38ea:	0e 94 a4 24 	call	0x4948	; 0x4948 <CBOT_ISR_init>
    38ee:	0e 94 96 24 	call	0x492c	; 0x492c <CBOT_init>
    38f2:	0e 94 e9 1a 	call	0x35d2	; 0x35d2 <CBOT_main>
    38f6:	80 e0       	ldi	r24, 0x00	; 0
    38f8:	90 e0       	ldi	r25, 0x00	; 0
    38fa:	08 95       	ret

000038fc <LCD_clear>:
    38fc:	0f 93       	push	r16
    38fe:	1f 93       	push	r17
    3900:	80 e4       	ldi	r24, 0x40	; 64
    3902:	60 e0       	ldi	r22, 0x00	; 0
    3904:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    3908:	00 e0       	ldi	r16, 0x00	; 0
    390a:	80 2f       	mov	r24, r16
    390c:	60 e0       	ldi	r22, 0x00	; 0
    390e:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_set_PGC_addr>
    3912:	10 e0       	ldi	r17, 0x00	; 0
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	61 e0       	ldi	r22, 0x01	; 1
    3918:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    391c:	1f 5f       	subi	r17, 0xFF	; 255
    391e:	10 38       	cpi	r17, 0x80	; 128
    3920:	c9 f7       	brne	.-14     	; 0x3914 <LCD_clear+0x18>
    3922:	0f 5f       	subi	r16, 0xFF	; 255
    3924:	04 30       	cpi	r16, 0x04	; 4
    3926:	89 f7       	brne	.-30     	; 0x390a <LCD_clear+0xe>
    3928:	83 e0       	ldi	r24, 0x03	; 3
    392a:	60 e0       	ldi	r22, 0x00	; 0
    392c:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <LCD_set_next_PGC>
    3930:	1f 91       	pop	r17
    3932:	0f 91       	pop	r16
    3934:	08 95       	ret

00003936 <LCD_open>:
    3936:	0f 93       	push	r16
    3938:	1f 93       	push	r17
    393a:	82 e0       	ldi	r24, 0x02	; 2
    393c:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3940:	88 23       	and	r24, r24
    3942:	11 f4       	brne	.+4      	; 0x3948 <LCD_open+0x12>
    3944:	82 e0       	ldi	r24, 0x02	; 2
    3946:	06 c0       	rjmp	.+12     	; 0x3954 <LCD_open+0x1e>
    3948:	81 e0       	ldi	r24, 0x01	; 1
    394a:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    394e:	88 23       	and	r24, r24
    3950:	19 f4       	brne	.+6      	; 0x3958 <LCD_open+0x22>
    3952:	81 e0       	ldi	r24, 0x01	; 1
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	6d c0       	rjmp	.+218    	; 0x3a32 <LCD_open+0xfc>
    3958:	0e 94 0c 27 	call	0x4e18	; 0x4e18 <__LCD_init>
    395c:	85 e0       	ldi	r24, 0x05	; 5
    395e:	61 e0       	ldi	r22, 0x01	; 1
    3960:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    3964:	8e ea       	ldi	r24, 0xAE	; 174
    3966:	60 e0       	ldi	r22, 0x00	; 0
    3968:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    396c:	82 ea       	ldi	r24, 0xA2	; 162
    396e:	60 e0       	ldi	r22, 0x00	; 0
    3970:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    3974:	80 ea       	ldi	r24, 0xA0	; 160
    3976:	60 e0       	ldi	r22, 0x00	; 0
    3978:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    397c:	00 e5       	ldi	r16, 0x50	; 80
    397e:	13 ec       	ldi	r17, 0xC3	; 195
    3980:	c8 01       	movw	r24, r16
    3982:	01 97       	sbiw	r24, 0x01	; 1
    3984:	f1 f7       	brne	.-4      	; 0x3982 <LCD_open+0x4c>
    3986:	80 ec       	ldi	r24, 0xC0	; 192
    3988:	60 e0       	ldi	r22, 0x00	; 0
    398a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    398e:	8f e2       	ldi	r24, 0x2F	; 47
    3990:	60 e0       	ldi	r22, 0x00	; 0
    3992:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    3996:	81 e8       	ldi	r24, 0x81	; 129
    3998:	60 e0       	ldi	r22, 0x00	; 0
    399a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    399e:	86 e1       	ldi	r24, 0x16	; 22
    39a0:	60 e0       	ldi	r22, 0x00	; 0
    39a2:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    39a6:	82 e2       	ldi	r24, 0x22	; 34
    39a8:	60 e0       	ldi	r22, 0x00	; 0
    39aa:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    39ae:	c8 01       	movw	r24, r16
    39b0:	01 97       	sbiw	r24, 0x01	; 1
    39b2:	f1 f7       	brne	.-4      	; 0x39b0 <LCD_open+0x7a>
    39b4:	8f ea       	ldi	r24, 0xAF	; 175
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    39bc:	86 ea       	ldi	r24, 0xA6	; 166
    39be:	60 e0       	ldi	r22, 0x00	; 0
    39c0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    39c4:	85 ea       	ldi	r24, 0xA5	; 165
    39c6:	60 e0       	ldi	r22, 0x00	; 0
    39c8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    39cc:	80 e0       	ldi	r24, 0x00	; 0
    39ce:	90 e0       	ldi	r25, 0x00	; 0
    39d0:	28 e8       	ldi	r18, 0x88	; 136
    39d2:	33 e1       	ldi	r19, 0x13	; 19
    39d4:	f9 01       	movw	r30, r18
    39d6:	31 97       	sbiw	r30, 0x01	; 1
    39d8:	f1 f7       	brne	.-4      	; 0x39d6 <LCD_open+0xa0>
    39da:	01 96       	adiw	r24, 0x01	; 1
    39dc:	43 e0       	ldi	r20, 0x03	; 3
    39de:	88 3e       	cpi	r24, 0xE8	; 232
    39e0:	94 07       	cpc	r25, r20
    39e2:	c1 f7       	brne	.-16     	; 0x39d4 <LCD_open+0x9e>
    39e4:	83 eb       	ldi	r24, 0xB3	; 179
    39e6:	60 e0       	ldi	r22, 0x00	; 0
    39e8:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    39ec:	80 e4       	ldi	r24, 0x40	; 64
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    39f4:	83 e0       	ldi	r24, 0x03	; 3
    39f6:	60 e0       	ldi	r22, 0x00	; 0
    39f8:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_set_PGC_addr>
    39fc:	83 e0       	ldi	r24, 0x03	; 3
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	0e 94 3d 1d 	call	0x3a7a	; 0x3a7a <LCD_set_next_PGC>
    3a04:	10 92 56 07 	sts	0x0756, r1
    3a08:	10 92 58 07 	sts	0x0758, r1
    3a0c:	10 92 57 07 	sts	0x0757, r1
    3a10:	8a e7       	ldi	r24, 0x7A	; 122
    3a12:	93 e0       	ldi	r25, 0x03	; 3
    3a14:	90 93 87 07 	sts	0x0787, r25
    3a18:	80 93 86 07 	sts	0x0786, r24
    3a1c:	88 e1       	ldi	r24, 0x18	; 24
    3a1e:	0e 94 1c 1d 	call	0x3a38	; 0x3a38 <LCD_set_backlight>
    3a22:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
    3a26:	84 ea       	ldi	r24, 0xA4	; 164
    3a28:	60 e0       	ldi	r22, 0x00	; 0
    3a2a:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    3a2e:	85 e0       	ldi	r24, 0x05	; 5
    3a30:	91 e0       	ldi	r25, 0x01	; 1
    3a32:	1f 91       	pop	r17
    3a34:	0f 91       	pop	r16
    3a36:	08 95       	ret

00003a38 <LCD_set_backlight>:
    3a38:	1f 93       	push	r17
    3a3a:	18 2f       	mov	r17, r24
    3a3c:	85 e0       	ldi	r24, 0x05	; 5
    3a3e:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3a42:	81 30       	cpi	r24, 0x01	; 1
    3a44:	c1 f4       	brne	.+48     	; 0x3a76 <LCD_set_backlight+0x3e>
    3a46:	87 e0       	ldi	r24, 0x07	; 7
    3a48:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <SPI_set_slave_addr>
    3a4c:	82 e0       	ldi	r24, 0x02	; 2
    3a4e:	6a e0       	ldi	r22, 0x0A	; 10
    3a50:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <SPI_transmit>
    3a54:	82 e0       	ldi	r24, 0x02	; 2
    3a56:	61 eb       	ldi	r22, 0xB1	; 177
    3a58:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <SPI_transmit>
    3a5c:	61 2f       	mov	r22, r17
    3a5e:	11 32       	cpi	r17, 0x21	; 33
    3a60:	08 f0       	brcs	.+2      	; 0x3a64 <LCD_set_backlight+0x2c>
    3a62:	60 e2       	ldi	r22, 0x20	; 32
    3a64:	82 e0       	ldi	r24, 0x02	; 2
    3a66:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <SPI_transmit>
    3a6a:	89 ee       	ldi	r24, 0xE9	; 233
    3a6c:	8a 95       	dec	r24
    3a6e:	f1 f7       	brne	.-4      	; 0x3a6c <LCD_set_backlight+0x34>
    3a70:	87 e0       	ldi	r24, 0x07	; 7
    3a72:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <SPI_set_slave_addr>
    3a76:	1f 91       	pop	r17
    3a78:	08 95       	ret

00003a7a <LCD_set_next_PGC>:
    3a7a:	83 70       	andi	r24, 0x03	; 3
    3a7c:	6f 77       	andi	r22, 0x7F	; 127
    3a7e:	60 93 54 07 	sts	0x0754, r22
    3a82:	80 93 55 07 	sts	0x0755, r24
    3a86:	08 95       	ret

00003a88 <LCD_set_PGC_addr>:
    3a88:	0f 93       	push	r16
    3a8a:	1f 93       	push	r17
    3a8c:	06 2f       	mov	r16, r22
    3a8e:	16 2f       	mov	r17, r22
    3a90:	1f 77       	andi	r17, 0x7F	; 127
    3a92:	83 70       	andi	r24, 0x03	; 3
    3a94:	80 6b       	ori	r24, 0xB0	; 176
    3a96:	60 e0       	ldi	r22, 0x00	; 0
    3a98:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    3a9c:	12 95       	swap	r17
    3a9e:	1f 70       	andi	r17, 0x0F	; 15
    3aa0:	81 2f       	mov	r24, r17
    3aa2:	80 61       	ori	r24, 0x10	; 16
    3aa4:	60 e0       	ldi	r22, 0x00	; 0
    3aa6:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    3aaa:	80 2f       	mov	r24, r16
    3aac:	8f 70       	andi	r24, 0x0F	; 15
    3aae:	60 e0       	ldi	r22, 0x00	; 0
    3ab0:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    3ab4:	1f 91       	pop	r17
    3ab6:	0f 91       	pop	r16
    3ab8:	08 95       	ret

00003aba <LCD_write>:
    3aba:	0f 93       	push	r16
    3abc:	1f 93       	push	r17
    3abe:	08 2f       	mov	r16, r24
    3ac0:	16 2f       	mov	r17, r22
    3ac2:	85 e0       	ldi	r24, 0x05	; 5
    3ac4:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3ac8:	81 30       	cpi	r24, 0x01	; 1
    3aca:	79 f4       	brne	.+30     	; 0x3aea <LCD_write+0x30>
    3acc:	11 23       	and	r17, r17
    3ace:	19 f0       	breq	.+6      	; 0x3ad6 <LCD_write+0x1c>
    3ad0:	11 30       	cpi	r17, 0x01	; 1
    3ad2:	21 f4       	brne	.+8      	; 0x3adc <LCD_write+0x22>
    3ad4:	02 c0       	rjmp	.+4      	; 0x3ada <LCD_write+0x20>
    3ad6:	2b 98       	cbi	0x05, 3	; 5
    3ad8:	01 c0       	rjmp	.+2      	; 0x3adc <LCD_write+0x22>
    3ada:	2b 9a       	sbi	0x05, 3	; 5
    3adc:	86 e0       	ldi	r24, 0x06	; 6
    3ade:	8a 95       	dec	r24
    3ae0:	f1 f7       	brne	.-4      	; 0x3ade <LCD_write+0x24>
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	60 2f       	mov	r22, r16
    3ae6:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <SPI_transmit>
    3aea:	1f 91       	pop	r17
    3aec:	0f 91       	pop	r16
    3aee:	08 95       	ret

00003af0 <LED_clr_pattern>:
    3af0:	1f 93       	push	r17
    3af2:	18 2f       	mov	r17, r24
    3af4:	86 e0       	ldi	r24, 0x06	; 6
    3af6:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3afa:	81 30       	cpi	r24, 0x01	; 1
    3afc:	19 f4       	brne	.+6      	; 0x3b04 <LED_clr_pattern+0x14>
    3afe:	81 2f       	mov	r24, r17
    3b00:	0e 94 bb 27 	call	0x4f76	; 0x4f76 <__LED_clr_pattern>
    3b04:	1f 91       	pop	r17
    3b06:	08 95       	ret

00003b08 <LED_open>:
    3b08:	0e 94 c0 27 	call	0x4f80	; 0x4f80 <__LED_init>
    3b0c:	86 e0       	ldi	r24, 0x06	; 6
    3b0e:	61 e0       	ldi	r22, 0x01	; 1
    3b10:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    3b14:	86 e0       	ldi	r24, 0x06	; 6
    3b16:	91 e0       	ldi	r25, 0x01	; 1
    3b18:	08 95       	ret

00003b1a <LED_set_pattern>:
    3b1a:	1f 93       	push	r17
    3b1c:	18 2f       	mov	r17, r24
    3b1e:	86 e0       	ldi	r24, 0x06	; 6
    3b20:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3b24:	81 30       	cpi	r24, 0x01	; 1
    3b26:	19 f4       	brne	.+6      	; 0x3b2e <LED_set_pattern+0x14>
    3b28:	81 2f       	mov	r24, r17
    3b2a:	0e 94 c3 27 	call	0x4f86	; 0x4f86 <__LED_set_pattern>
    3b2e:	1f 91       	pop	r17
    3b30:	08 95       	ret

00003b32 <SPI_set_slave_addr>:
    3b32:	1f 93       	push	r17
    3b34:	18 2f       	mov	r17, r24
    3b36:	82 e0       	ldi	r24, 0x02	; 2
    3b38:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3b3c:	81 30       	cpi	r24, 0x01	; 1
    3b3e:	09 f0       	breq	.+2      	; 0x3b42 <SPI_set_slave_addr+0x10>
    3b40:	47 c0       	rjmp	.+142    	; 0x3bd0 <SPI_set_slave_addr+0x9e>
    3b42:	91 2f       	mov	r25, r17
    3b44:	97 70       	andi	r25, 0x07	; 7
    3b46:	80 91 59 07 	lds	r24, 0x0759
    3b4a:	98 17       	cp	r25, r24
    3b4c:	09 f4       	brne	.+2      	; 0x3b50 <SPI_set_slave_addr+0x1e>
    3b4e:	40 c0       	rjmp	.+128    	; 0x3bd0 <SPI_set_slave_addr+0x9e>
    3b50:	90 93 59 07 	sts	0x0759, r25
    3b54:	85 b1       	in	r24, 0x05	; 5
    3b56:	88 7f       	andi	r24, 0xF8	; 248
    3b58:	89 2b       	or	r24, r25
    3b5a:	85 b9       	out	0x05, r24	; 5
    3b5c:	93 30       	cpi	r25, 0x03	; 3
    3b5e:	11 f1       	breq	.+68     	; 0x3ba4 <SPI_set_slave_addr+0x72>
    3b60:	94 30       	cpi	r25, 0x04	; 4
    3b62:	28 f4       	brcc	.+10     	; 0x3b6e <SPI_set_slave_addr+0x3c>
    3b64:	91 30       	cpi	r25, 0x01	; 1
    3b66:	51 f0       	breq	.+20     	; 0x3b7c <SPI_set_slave_addr+0x4a>
    3b68:	92 30       	cpi	r25, 0x02	; 2
    3b6a:	90 f4       	brcc	.+36     	; 0x3b90 <SPI_set_slave_addr+0x5e>
    3b6c:	0c c0       	rjmp	.+24     	; 0x3b86 <SPI_set_slave_addr+0x54>
    3b6e:	95 30       	cpi	r25, 0x05	; 5
    3b70:	19 f1       	breq	.+70     	; 0x3bb8 <SPI_set_slave_addr+0x86>
    3b72:	95 30       	cpi	r25, 0x05	; 5
    3b74:	e0 f0       	brcs	.+56     	; 0x3bae <SPI_set_slave_addr+0x7c>
    3b76:	96 30       	cpi	r25, 0x06	; 6
    3b78:	21 f5       	brne	.+72     	; 0x3bc2 <SPI_set_slave_addr+0x90>
    3b7a:	0f c0       	rjmp	.+30     	; 0x3b9a <SPI_set_slave_addr+0x68>
    3b7c:	e0 91 1d 04 	lds	r30, 0x041D
    3b80:	f0 91 1e 04 	lds	r31, 0x041E
    3b84:	22 c0       	rjmp	.+68     	; 0x3bca <SPI_set_slave_addr+0x98>
    3b86:	e0 91 1b 04 	lds	r30, 0x041B
    3b8a:	f0 91 1c 04 	lds	r31, 0x041C
    3b8e:	1d c0       	rjmp	.+58     	; 0x3bca <SPI_set_slave_addr+0x98>
    3b90:	e0 91 1f 04 	lds	r30, 0x041F
    3b94:	f0 91 20 04 	lds	r31, 0x0420
    3b98:	18 c0       	rjmp	.+48     	; 0x3bca <SPI_set_slave_addr+0x98>
    3b9a:	e0 91 27 04 	lds	r30, 0x0427
    3b9e:	f0 91 28 04 	lds	r31, 0x0428
    3ba2:	13 c0       	rjmp	.+38     	; 0x3bca <SPI_set_slave_addr+0x98>
    3ba4:	e0 91 21 04 	lds	r30, 0x0421
    3ba8:	f0 91 22 04 	lds	r31, 0x0422
    3bac:	0e c0       	rjmp	.+28     	; 0x3bca <SPI_set_slave_addr+0x98>
    3bae:	e0 91 23 04 	lds	r30, 0x0423
    3bb2:	f0 91 24 04 	lds	r31, 0x0424
    3bb6:	09 c0       	rjmp	.+18     	; 0x3bca <SPI_set_slave_addr+0x98>
    3bb8:	e0 91 25 04 	lds	r30, 0x0425
    3bbc:	f0 91 26 04 	lds	r31, 0x0426
    3bc0:	04 c0       	rjmp	.+8      	; 0x3bca <SPI_set_slave_addr+0x98>
    3bc2:	e0 91 29 04 	lds	r30, 0x0429
    3bc6:	f0 91 2a 04 	lds	r31, 0x042A
    3bca:	30 97       	sbiw	r30, 0x00	; 0
    3bcc:	09 f0       	breq	.+2      	; 0x3bd0 <SPI_set_slave_addr+0x9e>
    3bce:	09 95       	icall
    3bd0:	1f 91       	pop	r17
    3bd2:	08 95       	ret

00003bd4 <SPI_transmit>:
    3bd4:	1f 93       	push	r17
    3bd6:	16 2f       	mov	r17, r22
    3bd8:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <SPI_set_slave_addr>
    3bdc:	82 e0       	ldi	r24, 0x02	; 2
    3bde:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3be2:	81 30       	cpi	r24, 0x01	; 1
    3be4:	21 f4       	brne	.+8      	; 0x3bee <SPI_transmit+0x1a>
    3be6:	1e bd       	out	0x2e, r17	; 46
    3be8:	0d b4       	in	r0, 0x2d	; 45
    3bea:	07 fe       	sbrs	r0, 7
    3bec:	fd cf       	rjmp	.-6      	; 0x3be8 <SPI_transmit+0x14>
    3bee:	1f 91       	pop	r17
    3bf0:	08 95       	ret

00003bf2 <__SPKR_set_up_freq_LUT>:
    3bf2:	0f 93       	push	r16
    3bf4:	1f 93       	push	r17
    3bf6:	cf 93       	push	r28
    3bf8:	df 93       	push	r29
    3bfa:	80 e2       	ldi	r24, 0x20	; 32
    3bfc:	91 e0       	ldi	r25, 0x01	; 1
    3bfe:	0e 94 f6 36 	call	0x6dec	; 0x6dec <malloc>
    3c02:	9c 01       	movw	r18, r24
    3c04:	90 93 3a 04 	sts	0x043A, r25
    3c08:	80 93 39 04 	sts	0x0439, r24
    3c0c:	89 2b       	or	r24, r25
    3c0e:	11 f4       	brne	.+4      	; 0x3c14 <__SPKR_set_up_freq_LUT+0x22>
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	39 c0       	rjmp	.+114    	; 0x3c86 <__SPKR_set_up_freq_LUT+0x94>
    3c14:	89 01       	movw	r16, r18
    3c16:	c0 e0       	ldi	r28, 0x00	; 0
    3c18:	d0 e0       	ldi	r29, 0x00	; 0
    3c1a:	be 01       	movw	r22, r28
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	0e 94 37 30 	call	0x606e	; 0x606e <__floatunsisf>
    3c24:	20 e0       	ldi	r18, 0x00	; 0
    3c26:	30 e0       	ldi	r19, 0x00	; 0
    3c28:	40 ea       	ldi	r20, 0xA0	; 160
    3c2a:	51 e4       	ldi	r21, 0x41	; 65
    3c2c:	0e 94 9e 2f 	call	0x5f3c	; 0x5f3c <__divsf3>
    3c30:	27 ef       	ldi	r18, 0xF7	; 247
    3c32:	35 e7       	ldi	r19, 0x75	; 117
    3c34:	40 e0       	ldi	r20, 0x00	; 0
    3c36:	5f e3       	ldi	r21, 0x3F	; 63
    3c38:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    3c3c:	9b 01       	movw	r18, r22
    3c3e:	ac 01       	movw	r20, r24
    3c40:	60 e0       	ldi	r22, 0x00	; 0
    3c42:	70 e0       	ldi	r23, 0x00	; 0
    3c44:	80 e2       	ldi	r24, 0x20	; 32
    3c46:	91 e4       	ldi	r25, 0x41	; 65
    3c48:	0e 94 8a 31 	call	0x6314	; 0x6314 <pow>
    3c4c:	9b 01       	movw	r18, r22
    3c4e:	ac 01       	movw	r20, r24
    3c50:	ca 01       	movw	r24, r20
    3c52:	b9 01       	movw	r22, r18
    3c54:	2d ec       	ldi	r18, 0xCD	; 205
    3c56:	3c ec       	ldi	r19, 0xCC	; 204
    3c58:	42 e8       	ldi	r20, 0x82	; 130
    3c5a:	51 e4       	ldi	r21, 0x41	; 65
    3c5c:	0e 94 27 31 	call	0x624e	; 0x624e <__mulsf3>
    3c60:	0e 94 ed 30 	call	0x61da	; 0x61da <lrint>
    3c64:	2a e0       	ldi	r18, 0x0A	; 10
    3c66:	30 e0       	ldi	r19, 0x00	; 0
    3c68:	40 e0       	ldi	r20, 0x00	; 0
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	0e 94 57 36 	call	0x6cae	; 0x6cae <__mulsi3>
    3c70:	f8 01       	movw	r30, r16
    3c72:	61 93       	st	Z+, r22
    3c74:	71 93       	st	Z+, r23
    3c76:	81 93       	st	Z+, r24
    3c78:	91 93       	st	Z+, r25
    3c7a:	8f 01       	movw	r16, r30
    3c7c:	21 96       	adiw	r28, 0x01	; 1
    3c7e:	c8 34       	cpi	r28, 0x48	; 72
    3c80:	d1 05       	cpc	r29, r1
    3c82:	59 f6       	brne	.-106    	; 0x3c1a <__SPKR_set_up_freq_LUT+0x28>
    3c84:	81 e0       	ldi	r24, 0x01	; 1
    3c86:	df 91       	pop	r29
    3c88:	cf 91       	pop	r28
    3c8a:	1f 91       	pop	r17
    3c8c:	0f 91       	pop	r16
    3c8e:	08 95       	ret

00003c90 <__SPKR_open_beep_mode>:
    3c90:	8a e0       	ldi	r24, 0x0A	; 10
    3c92:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3c96:	88 23       	and	r24, r24
    3c98:	71 f4       	brne	.+28     	; 0x3cb6 <__SPKR_open_beep_mode+0x26>
    3c9a:	10 92 36 04 	sts	0x0436, r1
    3c9e:	10 92 35 04 	sts	0x0435, r1
    3ca2:	81 e0       	ldi	r24, 0x01	; 1
    3ca4:	0e 94 fe 28 	call	0x51fc	; 0x51fc <__SPKR_init>
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	80 93 2c 04 	sts	0x042C, r24
    3cae:	8a e0       	ldi	r24, 0x0A	; 10
    3cb0:	61 e0       	ldi	r22, 0x01	; 1
    3cb2:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    3cb6:	8a e0       	ldi	r24, 0x0A	; 10
    3cb8:	91 e0       	ldi	r25, 0x01	; 1
    3cba:	08 95       	ret

00003cbc <__SPKR_open_tone_mode>:
    3cbc:	1f 93       	push	r17
    3cbe:	8b e0       	ldi	r24, 0x0B	; 11
    3cc0:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3cc4:	88 23       	and	r24, r24
    3cc6:	11 f0       	breq	.+4      	; 0x3ccc <__SPKR_open_tone_mode+0x10>
    3cc8:	90 e0       	ldi	r25, 0x00	; 0
    3cca:	21 c0       	rjmp	.+66     	; 0x3d0e <__SPKR_open_tone_mode+0x52>
    3ccc:	89 e0       	ldi	r24, 0x09	; 9
    3cce:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    3cd2:	88 23       	and	r24, r24
    3cd4:	d9 f4       	brne	.+54     	; 0x3d0c <__SPKR_open_tone_mode+0x50>
    3cd6:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <__SPKR_set_up_freq_LUT>
    3cda:	18 2f       	mov	r17, r24
    3cdc:	81 30       	cpi	r24, 0x01	; 1
    3cde:	b1 f4       	brne	.+44     	; 0x3d0c <__SPKR_open_tone_mode+0x50>
    3ce0:	10 92 2d 04 	sts	0x042D, r1
    3ce4:	10 92 2e 04 	sts	0x042E, r1
    3ce8:	10 92 2f 04 	sts	0x042F, r1
    3cec:	10 92 30 04 	sts	0x0430, r1
    3cf0:	8d e0       	ldi	r24, 0x0D	; 13
    3cf2:	61 e8       	ldi	r22, 0x81	; 129
    3cf4:	78 e2       	ldi	r23, 0x28	; 40
    3cf6:	0e 94 e4 26 	call	0x4dc8	; 0x4dc8 <ISR_attach>
    3cfa:	82 e0       	ldi	r24, 0x02	; 2
    3cfc:	0e 94 fe 28 	call	0x51fc	; 0x51fc <__SPKR_init>
    3d00:	10 93 2b 04 	sts	0x042B, r17
    3d04:	89 e0       	ldi	r24, 0x09	; 9
    3d06:	61 e0       	ldi	r22, 0x01	; 1
    3d08:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    3d0c:	91 e0       	ldi	r25, 0x01	; 1
    3d0e:	89 e0       	ldi	r24, 0x09	; 9
    3d10:	1f 91       	pop	r17
    3d12:	08 95       	ret

00003d14 <SPKR_open>:
    3d14:	81 30       	cpi	r24, 0x01	; 1
    3d16:	29 f0       	breq	.+10     	; 0x3d22 <SPKR_open+0xe>
    3d18:	82 30       	cpi	r24, 0x02	; 2
    3d1a:	31 f0       	breq	.+12     	; 0x3d28 <SPKR_open+0x14>
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	89 e0       	ldi	r24, 0x09	; 9
    3d20:	08 95       	ret
    3d22:	0e 94 48 1e 	call	0x3c90	; 0x3c90 <__SPKR_open_beep_mode>
    3d26:	08 95       	ret
    3d28:	0e 94 5e 1e 	call	0x3cbc	; 0x3cbc <__SPKR_open_tone_mode>
    3d2c:	08 95       	ret

00003d2e <STEPPER_get_nSteps>:
    3d2e:	80 91 1a 07 	lds	r24, 0x071A
    3d32:	90 91 1b 07 	lds	r25, 0x071B
    3d36:	20 91 1c 07 	lds	r18, 0x071C
    3d3a:	30 91 1d 07 	lds	r19, 0x071D
    3d3e:	bc 01       	movw	r22, r24
    3d40:	c9 01       	movw	r24, r18
    3d42:	08 95       	ret

00003d44 <STEPPER_stepmode>:
    3d44:	2f 92       	push	r2
    3d46:	3f 92       	push	r3
    3d48:	4f 92       	push	r4
    3d4a:	5f 92       	push	r5
    3d4c:	6f 92       	push	r6
    3d4e:	7f 92       	push	r7
    3d50:	8f 92       	push	r8
    3d52:	9f 92       	push	r9
    3d54:	af 92       	push	r10
    3d56:	bf 92       	push	r11
    3d58:	cf 92       	push	r12
    3d5a:	df 92       	push	r13
    3d5c:	ef 92       	push	r14
    3d5e:	ff 92       	push	r15
    3d60:	0f 93       	push	r16
    3d62:	1f 93       	push	r17
    3d64:	df 93       	push	r29
    3d66:	cf 93       	push	r28
    3d68:	cd b7       	in	r28, 0x3d	; 61
    3d6a:	de b7       	in	r29, 0x3e	; 62
    3d6c:	58 2e       	mov	r5, r24
    3d6e:	96 2e       	mov	r9, r22
    3d70:	44 2e       	mov	r4, r20
    3d72:	39 01       	movw	r6, r18
    3d74:	3c 2c       	mov	r3, r12
    3d76:	c9 8c       	ldd	r12, Y+25	; 0x19
    3d78:	da 8c       	ldd	r13, Y+26	; 0x1a
    3d7a:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3d7c:	81 e0       	ldi	r24, 0x01	; 1
    3d7e:	68 17       	cp	r22, r24
    3d80:	39 f1       	breq	.+78     	; 0x3dd0 <STEPPER_stepmode+0x8c>
    3d82:	68 17       	cp	r22, r24
    3d84:	28 f0       	brcs	.+10     	; 0x3d90 <STEPPER_stepmode+0x4c>
    3d86:	92 e0       	ldi	r25, 0x02	; 2
    3d88:	69 17       	cp	r22, r25
    3d8a:	09 f0       	breq	.+2      	; 0x3d8e <STEPPER_stepmode+0x4a>
    3d8c:	85 c0       	rjmp	.+266    	; 0x3e98 <STEPPER_stepmode+0x154>
    3d8e:	49 c0       	rjmp	.+146    	; 0x3e22 <STEPPER_stepmode+0xde>
    3d90:	80 e0       	ldi	r24, 0x00	; 0
    3d92:	61 e0       	ldi	r22, 0x01	; 1
    3d94:	0e 94 ab 20 	call	0x4156	; 0x4156 <STEPPER_set_mode>
    3d98:	80 e0       	ldi	r24, 0x00	; 0
    3d9a:	b7 01       	movw	r22, r14
    3d9c:	0e 94 74 20 	call	0x40e8	; 0x40e8 <STEPPER_set_accel>
    3da0:	80 e0       	ldi	r24, 0x00	; 0
    3da2:	64 2d       	mov	r22, r4
    3da4:	a3 01       	movw	r20, r6
    3da6:	98 01       	movw	r18, r16
    3da8:	03 2d       	mov	r16, r3
    3daa:	ee 24       	eor	r14, r14
    3dac:	e3 94       	inc	r14
    3dae:	ef e3       	ldi	r30, 0x3F	; 63
    3db0:	ce 2e       	mov	r12, r30
    3db2:	e7 e0       	ldi	r30, 0x07	; 7
    3db4:	de 2e       	mov	r13, r30
    3db6:	0e 94 fd 20 	call	0x41fa	; 0x41fa <STEPPER_step>
    3dba:	55 20       	and	r5, r5
    3dbc:	09 f0       	breq	.+2      	; 0x3dc0 <STEPPER_stepmode+0x7c>
    3dbe:	6c c0       	rjmp	.+216    	; 0x3e98 <STEPPER_stepmode+0x154>
    3dc0:	00 d0       	rcall	.+0      	; 0x3dc2 <STEPPER_stepmode+0x7e>
    3dc2:	0f 92       	push	r0
    3dc4:	ed b7       	in	r30, 0x3d	; 61
    3dc6:	fe b7       	in	r31, 0x3e	; 62
    3dc8:	11 82       	std	Z+1, r1	; 0x01
    3dca:	b3 82       	std	Z+3, r11	; 0x03
    3dcc:	a2 82       	std	Z+2, r10	; 0x02
    3dce:	23 c0       	rjmp	.+70     	; 0x3e16 <STEPPER_stepmode+0xd2>
    3dd0:	81 e0       	ldi	r24, 0x01	; 1
    3dd2:	61 e0       	ldi	r22, 0x01	; 1
    3dd4:	0e 94 ab 20 	call	0x4156	; 0x4156 <STEPPER_set_mode>
    3dd8:	81 e0       	ldi	r24, 0x01	; 1
    3dda:	b6 01       	movw	r22, r12
    3ddc:	0e 94 74 20 	call	0x40e8	; 0x40e8 <STEPPER_set_accel>
    3de0:	81 e0       	ldi	r24, 0x01	; 1
    3de2:	68 2d       	mov	r22, r8
    3de4:	4d 89       	ldd	r20, Y+21	; 0x15
    3de6:	5e 89       	ldd	r21, Y+22	; 0x16
    3de8:	2f 89       	ldd	r18, Y+23	; 0x17
    3dea:	38 8d       	ldd	r19, Y+24	; 0x18
    3dec:	02 2d       	mov	r16, r2
    3dee:	ee 24       	eor	r14, r14
    3df0:	e3 94       	inc	r14
    3df2:	7f e3       	ldi	r23, 0x3F	; 63
    3df4:	c7 2e       	mov	r12, r23
    3df6:	77 e0       	ldi	r23, 0x07	; 7
    3df8:	d7 2e       	mov	r13, r23
    3dfa:	0e 94 fd 20 	call	0x41fa	; 0x41fa <STEPPER_step>
    3dfe:	55 20       	and	r5, r5
    3e00:	09 f0       	breq	.+2      	; 0x3e04 <STEPPER_stepmode+0xc0>
    3e02:	4a c0       	rjmp	.+148    	; 0x3e98 <STEPPER_stepmode+0x154>
    3e04:	00 d0       	rcall	.+0      	; 0x3e06 <STEPPER_stepmode+0xc2>
    3e06:	0f 92       	push	r0
    3e08:	ed b7       	in	r30, 0x3d	; 61
    3e0a:	fe b7       	in	r31, 0x3e	; 62
    3e0c:	91 82       	std	Z+1, r9	; 0x01
    3e0e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e10:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e12:	93 83       	std	Z+3, r25	; 0x03
    3e14:	82 83       	std	Z+2, r24	; 0x02
    3e16:	0e 94 ae 21 	call	0x435c	; 0x435c <STEPPER_wait_and_then>
    3e1a:	0f 90       	pop	r0
    3e1c:	0f 90       	pop	r0
    3e1e:	0f 90       	pop	r0
    3e20:	3b c0       	rjmp	.+118    	; 0x3e98 <STEPPER_stepmode+0x154>
    3e22:	82 e0       	ldi	r24, 0x02	; 2
    3e24:	61 e0       	ldi	r22, 0x01	; 1
    3e26:	0e 94 ab 20 	call	0x4156	; 0x4156 <STEPPER_set_mode>
    3e2a:	80 e0       	ldi	r24, 0x00	; 0
    3e2c:	b7 01       	movw	r22, r14
    3e2e:	0e 94 74 20 	call	0x40e8	; 0x40e8 <STEPPER_set_accel>
    3e32:	81 e0       	ldi	r24, 0x01	; 1
    3e34:	b6 01       	movw	r22, r12
    3e36:	0e 94 74 20 	call	0x40e8	; 0x40e8 <STEPPER_set_accel>
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	64 2d       	mov	r22, r4
    3e3e:	a3 01       	movw	r20, r6
    3e40:	98 01       	movw	r18, r16
    3e42:	03 2d       	mov	r16, r3
    3e44:	ee 24       	eor	r14, r14
    3e46:	e3 94       	inc	r14
    3e48:	9f e3       	ldi	r25, 0x3F	; 63
    3e4a:	c9 2e       	mov	r12, r25
    3e4c:	97 e0       	ldi	r25, 0x07	; 7
    3e4e:	d9 2e       	mov	r13, r25
    3e50:	0e 94 fd 20 	call	0x41fa	; 0x41fa <STEPPER_step>
    3e54:	81 e0       	ldi	r24, 0x01	; 1
    3e56:	68 2d       	mov	r22, r8
    3e58:	4d 89       	ldd	r20, Y+21	; 0x15
    3e5a:	5e 89       	ldd	r21, Y+22	; 0x16
    3e5c:	2f 89       	ldd	r18, Y+23	; 0x17
    3e5e:	38 8d       	ldd	r19, Y+24	; 0x18
    3e60:	02 2d       	mov	r16, r2
    3e62:	0e 94 fd 20 	call	0x41fa	; 0x41fa <STEPPER_step>
    3e66:	55 20       	and	r5, r5
    3e68:	b9 f4       	brne	.+46     	; 0x3e98 <STEPPER_stepmode+0x154>
    3e6a:	00 d0       	rcall	.+0      	; 0x3e6c <STEPPER_stepmode+0x128>
    3e6c:	00 d0       	rcall	.+0      	; 0x3e6e <STEPPER_stepmode+0x12a>
    3e6e:	0f 92       	push	r0
    3e70:	ad b7       	in	r26, 0x3d	; 61
    3e72:	be b7       	in	r27, 0x3e	; 62
    3e74:	11 96       	adiw	r26, 0x01	; 1
    3e76:	ed b7       	in	r30, 0x3d	; 61
    3e78:	fe b7       	in	r31, 0x3e	; 62
    3e7a:	91 82       	std	Z+1, r9	; 0x01
    3e7c:	fd 01       	movw	r30, r26
    3e7e:	b2 82       	std	Z+2, r11	; 0x02
    3e80:	a1 82       	std	Z+1, r10	; 0x01
    3e82:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e84:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e86:	94 83       	std	Z+4, r25	; 0x04
    3e88:	83 83       	std	Z+3, r24	; 0x03
    3e8a:	0e 94 ae 21 	call	0x435c	; 0x435c <STEPPER_wait_and_then>
    3e8e:	0f 90       	pop	r0
    3e90:	0f 90       	pop	r0
    3e92:	0f 90       	pop	r0
    3e94:	0f 90       	pop	r0
    3e96:	0f 90       	pop	r0
    3e98:	cf 91       	pop	r28
    3e9a:	df 91       	pop	r29
    3e9c:	1f 91       	pop	r17
    3e9e:	0f 91       	pop	r16
    3ea0:	ff 90       	pop	r15
    3ea2:	ef 90       	pop	r14
    3ea4:	df 90       	pop	r13
    3ea6:	cf 90       	pop	r12
    3ea8:	bf 90       	pop	r11
    3eaa:	af 90       	pop	r10
    3eac:	9f 90       	pop	r9
    3eae:	8f 90       	pop	r8
    3eb0:	7f 90       	pop	r7
    3eb2:	6f 90       	pop	r6
    3eb4:	5f 90       	pop	r5
    3eb6:	4f 90       	pop	r4
    3eb8:	3f 90       	pop	r3
    3eba:	2f 90       	pop	r2
    3ebc:	08 95       	ret

00003ebe <STEPPER_move>:
    3ebe:	6f 92       	push	r6
    3ec0:	7f 92       	push	r7
    3ec2:	8f 92       	push	r8
    3ec4:	9f 92       	push	r9
    3ec6:	af 92       	push	r10
    3ec8:	bf 92       	push	r11
    3eca:	cf 92       	push	r12
    3ecc:	df 92       	push	r13
    3ece:	ef 92       	push	r14
    3ed0:	ff 92       	push	r15
    3ed2:	0f 93       	push	r16
    3ed4:	1f 93       	push	r17
    3ed6:	df 93       	push	r29
    3ed8:	cf 93       	push	r28
    3eda:	cd b7       	in	r28, 0x3d	; 61
    3edc:	de b7       	in	r29, 0x3e	; 62
    3ede:	94 2e       	mov	r9, r20
    3ee0:	7c 2d       	mov	r23, r12
    3ee2:	d5 01       	movw	r26, r10
    3ee4:	49 89       	ldd	r20, Y+17	; 0x11
    3ee6:	5a 89       	ldd	r21, Y+18	; 0x12
    3ee8:	ab 88       	ldd	r10, Y+19	; 0x13
    3eea:	bc 88       	ldd	r11, Y+20	; 0x14
    3eec:	cd 88       	ldd	r12, Y+21	; 0x15
    3eee:	de 88       	ldd	r13, Y+22	; 0x16
    3ef0:	9f 89       	ldd	r25, Y+23	; 0x17
    3ef2:	81 30       	cpi	r24, 0x01	; 1
    3ef4:	09 f4       	brne	.+2      	; 0x3ef8 <STEPPER_move+0x3a>
    3ef6:	57 c0       	rjmp	.+174    	; 0x3fa6 <STEPPER_move+0xe8>
    3ef8:	81 30       	cpi	r24, 0x01	; 1
    3efa:	b8 f1       	brcs	.+110    	; 0x3f6a <STEPPER_move+0xac>
    3efc:	82 30       	cpi	r24, 0x02	; 2
    3efe:	09 f0       	breq	.+2      	; 0x3f02 <STEPPER_move+0x44>
    3f00:	76 c0       	rjmp	.+236    	; 0x3fee <STEPPER_move+0x130>
    3f02:	61 30       	cpi	r22, 0x01	; 1
    3f04:	91 f0       	breq	.+36     	; 0x3f2a <STEPPER_move+0x6c>
    3f06:	61 30       	cpi	r22, 0x01	; 1
    3f08:	20 f0       	brcs	.+8      	; 0x3f12 <STEPPER_move+0x54>
    3f0a:	62 30       	cpi	r22, 0x02	; 2
    3f0c:	09 f0       	breq	.+2      	; 0x3f10 <STEPPER_move+0x52>
    3f0e:	6f c0       	rjmp	.+222    	; 0x3fee <STEPPER_move+0x130>
    3f10:	15 c0       	rjmp	.+42     	; 0x3f3c <STEPPER_move+0x7e>
    3f12:	80 e0       	ldi	r24, 0x00	; 0
    3f14:	60 e0       	ldi	r22, 0x00	; 0
    3f16:	0e 94 ab 20 	call	0x4156	; 0x4156 <STEPPER_set_mode>
    3f1a:	80 e0       	ldi	r24, 0x00	; 0
    3f1c:	b7 01       	movw	r22, r14
    3f1e:	0e 94 74 20 	call	0x40e8	; 0x40e8 <STEPPER_set_accel>
    3f22:	80 e0       	ldi	r24, 0x00	; 0
    3f24:	69 2d       	mov	r22, r9
    3f26:	a8 01       	movw	r20, r16
    3f28:	1d c0       	rjmp	.+58     	; 0x3f64 <STEPPER_move+0xa6>
    3f2a:	81 e0       	ldi	r24, 0x01	; 1
    3f2c:	60 e0       	ldi	r22, 0x00	; 0
    3f2e:	0e 94 ab 20 	call	0x4156	; 0x4156 <STEPPER_set_mode>
    3f32:	81 e0       	ldi	r24, 0x01	; 1
    3f34:	b6 01       	movw	r22, r12
    3f36:	0e 94 74 20 	call	0x40e8	; 0x40e8 <STEPPER_set_accel>
    3f3a:	11 c0       	rjmp	.+34     	; 0x3f5e <STEPPER_move+0xa0>
    3f3c:	82 e0       	ldi	r24, 0x02	; 2
    3f3e:	60 e0       	ldi	r22, 0x00	; 0
    3f40:	0e 94 ab 20 	call	0x4156	; 0x4156 <STEPPER_set_mode>
    3f44:	80 e0       	ldi	r24, 0x00	; 0
    3f46:	b7 01       	movw	r22, r14
    3f48:	0e 94 74 20 	call	0x40e8	; 0x40e8 <STEPPER_set_accel>
    3f4c:	81 e0       	ldi	r24, 0x01	; 1
    3f4e:	b6 01       	movw	r22, r12
    3f50:	0e 94 74 20 	call	0x40e8	; 0x40e8 <STEPPER_set_accel>
    3f54:	80 e0       	ldi	r24, 0x00	; 0
    3f56:	69 2d       	mov	r22, r9
    3f58:	a8 01       	movw	r20, r16
    3f5a:	0e 94 5d 20 	call	0x40ba	; 0x40ba <STEPPER_run>
    3f5e:	81 e0       	ldi	r24, 0x01	; 1
    3f60:	68 2d       	mov	r22, r8
    3f62:	a5 01       	movw	r20, r10
    3f64:	0e 94 5d 20 	call	0x40ba	; 0x40ba <STEPPER_run>
    3f68:	42 c0       	rjmp	.+132    	; 0x3fee <STEPPER_move+0x130>
    3f6a:	ed b7       	in	r30, 0x3d	; 61
    3f6c:	fe b7       	in	r31, 0x3e	; 62
    3f6e:	39 97       	sbiw	r30, 0x09	; 9
    3f70:	0f b6       	in	r0, 0x3f	; 63
    3f72:	f8 94       	cli
    3f74:	fe bf       	out	0x3e, r31	; 62
    3f76:	0f be       	out	0x3f, r0	; 63
    3f78:	ed bf       	out	0x3d, r30	; 61
    3f7a:	6d b6       	in	r6, 0x3d	; 61
    3f7c:	7e b6       	in	r7, 0x3e	; 62
    3f7e:	08 94       	sec
    3f80:	61 1c       	adc	r6, r1
    3f82:	71 1c       	adc	r7, r1
    3f84:	52 83       	std	Z+2, r21	; 0x02
    3f86:	41 83       	std	Z+1, r20	; 0x01
    3f88:	f3 01       	movw	r30, r6
    3f8a:	b3 82       	std	Z+3, r11	; 0x03
    3f8c:	a2 82       	std	Z+2, r10	; 0x02
    3f8e:	d5 82       	std	Z+5, r13	; 0x05
    3f90:	c4 82       	std	Z+4, r12	; 0x04
    3f92:	96 83       	std	Z+6, r25	; 0x06
    3f94:	88 8d       	ldd	r24, Y+24	; 0x18
    3f96:	99 8d       	ldd	r25, Y+25	; 0x19
    3f98:	90 87       	std	Z+8, r25	; 0x08
    3f9a:	87 83       	std	Z+7, r24	; 0x07
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	49 2d       	mov	r20, r9
    3fa0:	c7 2e       	mov	r12, r23
    3fa2:	5d 01       	movw	r10, r26
    3fa4:	1a c0       	rjmp	.+52     	; 0x3fda <STEPPER_move+0x11c>
    3fa6:	ed b7       	in	r30, 0x3d	; 61
    3fa8:	fe b7       	in	r31, 0x3e	; 62
    3faa:	39 97       	sbiw	r30, 0x09	; 9
    3fac:	0f b6       	in	r0, 0x3f	; 63
    3fae:	f8 94       	cli
    3fb0:	fe bf       	out	0x3e, r31	; 62
    3fb2:	0f be       	out	0x3f, r0	; 63
    3fb4:	ed bf       	out	0x3d, r30	; 61
    3fb6:	ad b7       	in	r26, 0x3d	; 61
    3fb8:	be b7       	in	r27, 0x3e	; 62
    3fba:	11 96       	adiw	r26, 0x01	; 1
    3fbc:	52 83       	std	Z+2, r21	; 0x02
    3fbe:	41 83       	std	Z+1, r20	; 0x01
    3fc0:	fd 01       	movw	r30, r26
    3fc2:	b3 82       	std	Z+3, r11	; 0x03
    3fc4:	a2 82       	std	Z+2, r10	; 0x02
    3fc6:	d5 82       	std	Z+5, r13	; 0x05
    3fc8:	c4 82       	std	Z+4, r12	; 0x04
    3fca:	96 83       	std	Z+6, r25	; 0x06
    3fcc:	10 86       	std	Z+8, r1	; 0x08
    3fce:	17 82       	std	Z+7, r1	; 0x07
    3fd0:	81 e0       	ldi	r24, 0x01	; 1
    3fd2:	49 2d       	mov	r20, r9
    3fd4:	c7 2e       	mov	r12, r23
    3fd6:	aa 24       	eor	r10, r10
    3fd8:	bb 24       	eor	r11, r11
    3fda:	0e 94 a2 1e 	call	0x3d44	; 0x3d44 <STEPPER_stepmode>
    3fde:	8d b7       	in	r24, 0x3d	; 61
    3fe0:	9e b7       	in	r25, 0x3e	; 62
    3fe2:	09 96       	adiw	r24, 0x09	; 9
    3fe4:	0f b6       	in	r0, 0x3f	; 63
    3fe6:	f8 94       	cli
    3fe8:	9e bf       	out	0x3e, r25	; 62
    3fea:	0f be       	out	0x3f, r0	; 63
    3fec:	8d bf       	out	0x3d, r24	; 61
    3fee:	cf 91       	pop	r28
    3ff0:	df 91       	pop	r29
    3ff2:	1f 91       	pop	r17
    3ff4:	0f 91       	pop	r16
    3ff6:	ff 90       	pop	r15
    3ff8:	ef 90       	pop	r14
    3ffa:	df 90       	pop	r13
    3ffc:	cf 90       	pop	r12
    3ffe:	bf 90       	pop	r11
    4000:	af 90       	pop	r10
    4002:	9f 90       	pop	r9
    4004:	8f 90       	pop	r8
    4006:	7f 90       	pop	r7
    4008:	6f 90       	pop	r6
    400a:	08 95       	ret

0000400c <STEPPER_open>:
    400c:	0e 94 90 29 	call	0x5320	; 0x5320 <__STEPPER_init>
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	80 93 3e 07 	sts	0x073E, r24
    4016:	e8 e0       	ldi	r30, 0x08	; 8
    4018:	f7 e0       	ldi	r31, 0x07	; 7
    401a:	11 92       	st	Z+, r1
    401c:	11 92       	st	Z+, r1
    401e:	11 82       	std	Z+1, r1	; 0x01
    4020:	10 82       	st	Z, r1
    4022:	32 96       	adiw	r30, 0x02	; 2
    4024:	11 82       	std	Z+1, r1	; 0x01
    4026:	10 82       	st	Z, r1
    4028:	32 96       	adiw	r30, 0x02	; 2
    402a:	11 82       	std	Z+1, r1	; 0x01
    402c:	10 82       	st	Z, r1
    402e:	32 96       	adiw	r30, 0x02	; 2
    4030:	11 82       	std	Z+1, r1	; 0x01
    4032:	10 82       	st	Z, r1
    4034:	32 96       	adiw	r30, 0x02	; 2
    4036:	11 82       	std	Z+1, r1	; 0x01
    4038:	10 82       	st	Z, r1
    403a:	32 96       	adiw	r30, 0x02	; 2
    403c:	11 82       	std	Z+1, r1	; 0x01
    403e:	10 82       	st	Z, r1
    4040:	32 96       	adiw	r30, 0x02	; 2
    4042:	11 82       	std	Z+1, r1	; 0x01
    4044:	10 82       	st	Z, r1
    4046:	32 96       	adiw	r30, 0x02	; 2
    4048:	11 82       	std	Z+1, r1	; 0x01
    404a:	10 82       	st	Z, r1
    404c:	32 96       	adiw	r30, 0x02	; 2
    404e:	11 82       	std	Z+1, r1	; 0x01
    4050:	10 82       	st	Z, r1
    4052:	32 96       	adiw	r30, 0x02	; 2
    4054:	11 82       	std	Z+1, r1	; 0x01
    4056:	10 82       	st	Z, r1
    4058:	32 96       	adiw	r30, 0x02	; 2
    405a:	11 82       	std	Z+1, r1	; 0x01
    405c:	10 82       	st	Z, r1
    405e:	32 96       	adiw	r30, 0x02	; 2
    4060:	11 82       	std	Z+1, r1	; 0x01
    4062:	10 82       	st	Z, r1
    4064:	36 96       	adiw	r30, 0x06	; 6
    4066:	11 92       	st	Z+, r1
    4068:	11 92       	st	Z+, r1
    406a:	11 92       	st	Z+, r1
    406c:	10 82       	st	Z, r1
    406e:	32 96       	adiw	r30, 0x02	; 2
    4070:	11 92       	st	Z+, r1
    4072:	11 92       	st	Z+, r1
    4074:	11 92       	st	Z+, r1
    4076:	11 92       	st	Z+, r1
    4078:	11 92       	st	Z+, r1
    407a:	11 92       	st	Z+, r1
    407c:	11 92       	st	Z+, r1
    407e:	11 82       	std	Z+1, r1	; 0x01
    4080:	10 82       	st	Z, r1
    4082:	32 96       	adiw	r30, 0x02	; 2
    4084:	11 82       	std	Z+1, r1	; 0x01
    4086:	10 82       	st	Z, r1
    4088:	32 96       	adiw	r30, 0x02	; 2
    408a:	11 82       	std	Z+1, r1	; 0x01
    408c:	10 82       	st	Z, r1
    408e:	32 96       	adiw	r30, 0x02	; 2
    4090:	11 82       	std	Z+1, r1	; 0x01
    4092:	10 82       	st	Z, r1
    4094:	76 97       	sbiw	r30, 0x16	; 22
    4096:	11 82       	std	Z+1, r1	; 0x01
    4098:	10 82       	st	Z, r1
    409a:	32 96       	adiw	r30, 0x02	; 2
    409c:	11 82       	std	Z+1, r1	; 0x01
    409e:	10 82       	st	Z, r1
    40a0:	10 92 3d 07 	sts	0x073D, r1
    40a4:	10 92 3c 07 	sts	0x073C, r1
    40a8:	10 92 3e 07 	sts	0x073E, r1
    40ac:	87 e0       	ldi	r24, 0x07	; 7
    40ae:	61 e0       	ldi	r22, 0x01	; 1
    40b0:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    40b4:	87 e0       	ldi	r24, 0x07	; 7
    40b6:	91 e0       	ldi	r25, 0x01	; 1
    40b8:	08 95       	ret

000040ba <STEPPER_run>:
    40ba:	ef 92       	push	r14
    40bc:	ff 92       	push	r15
    40be:	0f 93       	push	r16
    40c0:	1f 93       	push	r17
    40c2:	18 2f       	mov	r17, r24
    40c4:	06 2f       	mov	r16, r22
    40c6:	7a 01       	movw	r14, r20
    40c8:	60 e0       	ldi	r22, 0x00	; 0
    40ca:	0e 94 ab 20 	call	0x4156	; 0x4156 <STEPPER_set_mode>
    40ce:	81 2f       	mov	r24, r17
    40d0:	60 2f       	mov	r22, r16
    40d2:	0e 94 96 20 	call	0x412c	; 0x412c <STEPPER_set_dir>
    40d6:	81 2f       	mov	r24, r17
    40d8:	b7 01       	movw	r22, r14
    40da:	0e 94 c0 20 	call	0x4180	; 0x4180 <STEPPER_set_speed>
    40de:	1f 91       	pop	r17
    40e0:	0f 91       	pop	r16
    40e2:	ff 90       	pop	r15
    40e4:	ef 90       	pop	r14
    40e6:	08 95       	ret

000040e8 <STEPPER_set_accel>:
    40e8:	48 2f       	mov	r20, r24
    40ea:	81 e0       	ldi	r24, 0x01	; 1
    40ec:	80 93 3e 07 	sts	0x073E, r24
    40f0:	cb 01       	movw	r24, r22
    40f2:	23 e0       	ldi	r18, 0x03	; 3
    40f4:	69 3e       	cpi	r22, 0xE9	; 233
    40f6:	72 07       	cpc	r23, r18
    40f8:	10 f0       	brcs	.+4      	; 0x40fe <STEPPER_set_accel+0x16>
    40fa:	88 ee       	ldi	r24, 0xE8	; 232
    40fc:	93 e0       	ldi	r25, 0x03	; 3
    40fe:	41 30       	cpi	r20, 0x01	; 1
    4100:	71 f0       	breq	.+28     	; 0x411e <STEPPER_set_accel+0x36>
    4102:	41 30       	cpi	r20, 0x01	; 1
    4104:	18 f0       	brcs	.+6      	; 0x410c <STEPPER_set_accel+0x24>
    4106:	42 30       	cpi	r20, 0x02	; 2
    4108:	71 f4       	brne	.+28     	; 0x4126 <STEPPER_set_accel+0x3e>
    410a:	05 c0       	rjmp	.+10     	; 0x4116 <STEPPER_set_accel+0x2e>
    410c:	90 93 13 07 	sts	0x0713, r25
    4110:	80 93 12 07 	sts	0x0712, r24
    4114:	08 c0       	rjmp	.+16     	; 0x4126 <STEPPER_set_accel+0x3e>
    4116:	90 93 13 07 	sts	0x0713, r25
    411a:	80 93 12 07 	sts	0x0712, r24
    411e:	90 93 15 07 	sts	0x0715, r25
    4122:	80 93 14 07 	sts	0x0714, r24
    4126:	10 92 3e 07 	sts	0x073E, r1
    412a:	08 95       	ret

0000412c <STEPPER_set_dir>:
    412c:	98 2f       	mov	r25, r24
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	80 93 3e 07 	sts	0x073E, r24
    4134:	91 30       	cpi	r25, 0x01	; 1
    4136:	51 f0       	breq	.+20     	; 0x414c <STEPPER_set_dir+0x20>
    4138:	91 30       	cpi	r25, 0x01	; 1
    413a:	18 f0       	brcs	.+6      	; 0x4142 <STEPPER_set_dir+0x16>
    413c:	92 30       	cpi	r25, 0x02	; 2
    413e:	41 f4       	brne	.+16     	; 0x4150 <STEPPER_set_dir+0x24>
    4140:	03 c0       	rjmp	.+6      	; 0x4148 <STEPPER_set_dir+0x1c>
    4142:	60 93 2b 07 	sts	0x072B, r22
    4146:	04 c0       	rjmp	.+8      	; 0x4150 <STEPPER_set_dir+0x24>
    4148:	60 93 2b 07 	sts	0x072B, r22
    414c:	60 93 2c 07 	sts	0x072C, r22
    4150:	10 92 3e 07 	sts	0x073E, r1
    4154:	08 95       	ret

00004156 <STEPPER_set_mode>:
    4156:	98 2f       	mov	r25, r24
    4158:	81 e0       	ldi	r24, 0x01	; 1
    415a:	80 93 3e 07 	sts	0x073E, r24
    415e:	91 30       	cpi	r25, 0x01	; 1
    4160:	51 f0       	breq	.+20     	; 0x4176 <STEPPER_set_mode+0x20>
    4162:	91 30       	cpi	r25, 0x01	; 1
    4164:	18 f0       	brcs	.+6      	; 0x416c <STEPPER_set_mode+0x16>
    4166:	92 30       	cpi	r25, 0x02	; 2
    4168:	41 f4       	brne	.+16     	; 0x417a <STEPPER_set_mode+0x24>
    416a:	03 c0       	rjmp	.+6      	; 0x4172 <STEPPER_set_mode+0x1c>
    416c:	60 93 08 07 	sts	0x0708, r22
    4170:	04 c0       	rjmp	.+8      	; 0x417a <STEPPER_set_mode+0x24>
    4172:	60 93 08 07 	sts	0x0708, r22
    4176:	60 93 09 07 	sts	0x0709, r22
    417a:	10 92 3e 07 	sts	0x073E, r1
    417e:	08 95       	ret

00004180 <STEPPER_set_speed>:
    4180:	48 2f       	mov	r20, r24
    4182:	81 e0       	ldi	r24, 0x01	; 1
    4184:	80 93 3e 07 	sts	0x073E, r24
    4188:	cb 01       	movw	r24, r22
    418a:	21 e0       	ldi	r18, 0x01	; 1
    418c:	61 39       	cpi	r22, 0x91	; 145
    418e:	72 07       	cpc	r23, r18
    4190:	10 f0       	brcs	.+4      	; 0x4196 <STEPPER_set_speed+0x16>
    4192:	80 e9       	ldi	r24, 0x90	; 144
    4194:	91 e0       	ldi	r25, 0x01	; 1
    4196:	41 30       	cpi	r20, 0x01	; 1
    4198:	71 f0       	breq	.+28     	; 0x41b6 <STEPPER_set_speed+0x36>
    419a:	41 30       	cpi	r20, 0x01	; 1
    419c:	18 f0       	brcs	.+6      	; 0x41a4 <STEPPER_set_speed+0x24>
    419e:	42 30       	cpi	r20, 0x02	; 2
    41a0:	71 f4       	brne	.+28     	; 0x41be <STEPPER_set_speed+0x3e>
    41a2:	05 c0       	rjmp	.+10     	; 0x41ae <STEPPER_set_speed+0x2e>
    41a4:	90 93 0b 07 	sts	0x070B, r25
    41a8:	80 93 0a 07 	sts	0x070A, r24
    41ac:	08 c0       	rjmp	.+16     	; 0x41be <STEPPER_set_speed+0x3e>
    41ae:	90 93 0b 07 	sts	0x070B, r25
    41b2:	80 93 0a 07 	sts	0x070A, r24
    41b6:	90 93 0d 07 	sts	0x070D, r25
    41ba:	80 93 0c 07 	sts	0x070C, r24
    41be:	10 92 3e 07 	sts	0x073E, r1
    41c2:	08 95       	ret

000041c4 <STEPPER_set_steps>:
    41c4:	98 2f       	mov	r25, r24
    41c6:	81 e0       	ldi	r24, 0x01	; 1
    41c8:	80 93 3e 07 	sts	0x073E, r24
    41cc:	91 30       	cpi	r25, 0x01	; 1
    41ce:	71 f0       	breq	.+28     	; 0x41ec <STEPPER_set_steps+0x28>
    41d0:	91 30       	cpi	r25, 0x01	; 1
    41d2:	18 f0       	brcs	.+6      	; 0x41da <STEPPER_set_steps+0x16>
    41d4:	92 30       	cpi	r25, 0x02	; 2
    41d6:	71 f4       	brne	.+28     	; 0x41f4 <STEPPER_set_steps+0x30>
    41d8:	05 c0       	rjmp	.+10     	; 0x41e4 <STEPPER_set_steps+0x20>
    41da:	70 93 1b 07 	sts	0x071B, r23
    41de:	60 93 1a 07 	sts	0x071A, r22
    41e2:	08 c0       	rjmp	.+16     	; 0x41f4 <STEPPER_set_steps+0x30>
    41e4:	70 93 1b 07 	sts	0x071B, r23
    41e8:	60 93 1a 07 	sts	0x071A, r22
    41ec:	70 93 1d 07 	sts	0x071D, r23
    41f0:	60 93 1c 07 	sts	0x071C, r22
    41f4:	10 92 3e 07 	sts	0x073E, r1
    41f8:	08 95       	ret

000041fa <STEPPER_step>:
    41fa:	8f 92       	push	r8
    41fc:	9f 92       	push	r9
    41fe:	af 92       	push	r10
    4200:	bf 92       	push	r11
    4202:	cf 92       	push	r12
    4204:	df 92       	push	r13
    4206:	ef 92       	push	r14
    4208:	ff 92       	push	r15
    420a:	0f 93       	push	r16
    420c:	1f 93       	push	r17
    420e:	cf 93       	push	r28
    4210:	df 93       	push	r29
    4212:	18 2f       	mov	r17, r24
    4214:	f6 2e       	mov	r15, r22
    4216:	5a 01       	movw	r10, r20
    4218:	49 01       	movw	r8, r18
    421a:	e6 01       	movw	r28, r12
    421c:	61 e0       	ldi	r22, 0x01	; 1
    421e:	0e 94 ab 20 	call	0x4156	; 0x4156 <STEPPER_set_mode>
    4222:	81 2f       	mov	r24, r17
    4224:	b5 01       	movw	r22, r10
    4226:	a4 01       	movw	r20, r8
    4228:	0e 94 af 29 	call	0x535e	; 0x535e <STEPPER_setup_decels>
    422c:	81 2f       	mov	r24, r17
    422e:	6f 2d       	mov	r22, r15
    4230:	0e 94 96 20 	call	0x412c	; 0x412c <STEPPER_set_dir>
    4234:	81 2f       	mov	r24, r17
    4236:	60 2f       	mov	r22, r16
    4238:	0e 94 9a 29 	call	0x5334	; 0x5334 <STEPPER_set_stop_mode>
    423c:	81 2f       	mov	r24, r17
    423e:	b5 01       	movw	r22, r10
    4240:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <STEPPER_set_steps>
    4244:	c1 14       	cp	r12, r1
    4246:	d1 04       	cpc	r13, r1
    4248:	99 f0       	breq	.+38     	; 0x4270 <STEPPER_step+0x76>
    424a:	11 30       	cpi	r17, 0x01	; 1
    424c:	49 f0       	breq	.+18     	; 0x4260 <STEPPER_step+0x66>
    424e:	11 30       	cpi	r17, 0x01	; 1
    4250:	18 f0       	brcs	.+6      	; 0x4258 <STEPPER_step+0x5e>
    4252:	12 30       	cpi	r17, 0x02	; 2
    4254:	69 f4       	brne	.+26     	; 0x4270 <STEPPER_step+0x76>
    4256:	06 c0       	rjmp	.+12     	; 0x4264 <STEPPER_step+0x6a>
    4258:	18 82       	st	Y, r1
    425a:	10 92 3a 07 	sts	0x073A, r1
    425e:	08 c0       	rjmp	.+16     	; 0x4270 <STEPPER_step+0x76>
    4260:	19 82       	std	Y+1, r1	; 0x01
    4262:	04 c0       	rjmp	.+8      	; 0x426c <STEPPER_step+0x72>
    4264:	18 82       	st	Y, r1
    4266:	19 82       	std	Y+1, r1	; 0x01
    4268:	10 92 3a 07 	sts	0x073A, r1
    426c:	10 92 3b 07 	sts	0x073B, r1
    4270:	d0 93 3d 07 	sts	0x073D, r29
    4274:	c0 93 3c 07 	sts	0x073C, r28
    4278:	ee 20       	and	r14, r14
    427a:	b9 f5       	brne	.+110    	; 0x42ea <STEPPER_step+0xf0>
    427c:	8b ec       	ldi	r24, 0xCB	; 203
    427e:	93 e0       	ldi	r25, 0x03	; 3
    4280:	90 93 3d 07 	sts	0x073D, r25
    4284:	80 93 3c 07 	sts	0x073C, r24
    4288:	81 2f       	mov	r24, r17
    428a:	b4 01       	movw	r22, r8
    428c:	0e 94 c0 20 	call	0x4180	; 0x4180 <STEPPER_set_speed>
    4290:	81 2f       	mov	r24, r17
    4292:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <STEPPER_go>
    4296:	11 30       	cpi	r17, 0x01	; 1
    4298:	71 f0       	breq	.+28     	; 0x42b6 <STEPPER_step+0xbc>
    429a:	11 30       	cpi	r17, 0x01	; 1
    429c:	18 f0       	brcs	.+6      	; 0x42a4 <STEPPER_step+0xaa>
    429e:	12 30       	cpi	r17, 0x02	; 2
    42a0:	59 f5       	brne	.+86     	; 0x42f8 <STEPPER_step+0xfe>
    42a2:	12 c0       	rjmp	.+36     	; 0x42c8 <STEPPER_step+0xce>
    42a4:	10 92 cb 03 	sts	0x03CB, r1
    42a8:	10 92 3a 07 	sts	0x073A, r1
    42ac:	80 91 cb 03 	lds	r24, 0x03CB
    42b0:	88 23       	and	r24, r24
    42b2:	e1 f3       	breq	.-8      	; 0x42ac <STEPPER_step+0xb2>
    42b4:	21 c0       	rjmp	.+66     	; 0x42f8 <STEPPER_step+0xfe>
    42b6:	10 92 cc 03 	sts	0x03CC, r1
    42ba:	10 92 3b 07 	sts	0x073B, r1
    42be:	80 91 cc 03 	lds	r24, 0x03CC
    42c2:	88 23       	and	r24, r24
    42c4:	e1 f3       	breq	.-8      	; 0x42be <STEPPER_step+0xc4>
    42c6:	18 c0       	rjmp	.+48     	; 0x42f8 <STEPPER_step+0xfe>
    42c8:	10 92 cb 03 	sts	0x03CB, r1
    42cc:	10 92 cc 03 	sts	0x03CC, r1
    42d0:	10 92 3a 07 	sts	0x073A, r1
    42d4:	10 92 3b 07 	sts	0x073B, r1
    42d8:	80 91 cb 03 	lds	r24, 0x03CB
    42dc:	88 23       	and	r24, r24
    42de:	e1 f3       	breq	.-8      	; 0x42d8 <STEPPER_step+0xde>
    42e0:	80 91 cc 03 	lds	r24, 0x03CC
    42e4:	88 23       	and	r24, r24
    42e6:	c1 f3       	breq	.-16     	; 0x42d8 <STEPPER_step+0xde>
    42e8:	07 c0       	rjmp	.+14     	; 0x42f8 <STEPPER_step+0xfe>
    42ea:	81 2f       	mov	r24, r17
    42ec:	b4 01       	movw	r22, r8
    42ee:	0e 94 c0 20 	call	0x4180	; 0x4180 <STEPPER_set_speed>
    42f2:	81 2f       	mov	r24, r17
    42f4:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <STEPPER_go>
    42f8:	df 91       	pop	r29
    42fa:	cf 91       	pop	r28
    42fc:	1f 91       	pop	r17
    42fe:	0f 91       	pop	r16
    4300:	ff 90       	pop	r15
    4302:	ef 90       	pop	r14
    4304:	df 90       	pop	r13
    4306:	cf 90       	pop	r12
    4308:	bf 90       	pop	r11
    430a:	af 90       	pop	r10
    430c:	9f 90       	pop	r9
    430e:	8f 90       	pop	r8
    4310:	08 95       	ret

00004312 <STEPPER_stop>:
    4312:	0f 93       	push	r16
    4314:	1f 93       	push	r17
    4316:	18 2f       	mov	r17, r24
    4318:	06 2f       	mov	r16, r22
    431a:	66 23       	and	r22, r22
    431c:	49 f4       	brne	.+18     	; 0x4330 <STEPPER_stop+0x1e>
    431e:	60 e0       	ldi	r22, 0x00	; 0
    4320:	70 e0       	ldi	r23, 0x00	; 0
    4322:	0e 94 c0 20 	call	0x4180	; 0x4180 <STEPPER_set_speed>
    4326:	81 2f       	mov	r24, r17
    4328:	60 e0       	ldi	r22, 0x00	; 0
    432a:	70 e0       	ldi	r23, 0x00	; 0
    432c:	0e 94 e2 20 	call	0x41c4	; 0x41c4 <STEPPER_set_steps>
    4330:	81 e0       	ldi	r24, 0x01	; 1
    4332:	80 93 3e 07 	sts	0x073E, r24
    4336:	11 30       	cpi	r17, 0x01	; 1
    4338:	51 f0       	breq	.+20     	; 0x434e <STEPPER_stop+0x3c>
    433a:	11 30       	cpi	r17, 0x01	; 1
    433c:	18 f0       	brcs	.+6      	; 0x4344 <STEPPER_stop+0x32>
    433e:	12 30       	cpi	r17, 0x02	; 2
    4340:	41 f4       	brne	.+16     	; 0x4352 <STEPPER_stop+0x40>
    4342:	03 c0       	rjmp	.+6      	; 0x434a <STEPPER_stop+0x38>
    4344:	00 93 26 07 	sts	0x0726, r16
    4348:	04 c0       	rjmp	.+8      	; 0x4352 <STEPPER_stop+0x40>
    434a:	00 93 26 07 	sts	0x0726, r16
    434e:	00 93 27 07 	sts	0x0727, r16
    4352:	10 92 3e 07 	sts	0x073E, r1
    4356:	1f 91       	pop	r17
    4358:	0f 91       	pop	r16
    435a:	08 95       	ret

0000435c <STEPPER_wait_and_then>:
    435c:	cf 92       	push	r12
    435e:	df 92       	push	r13
    4360:	ef 92       	push	r14
    4362:	ff 92       	push	r15
    4364:	0f 93       	push	r16
    4366:	1f 93       	push	r17
    4368:	df 93       	push	r29
    436a:	cf 93       	push	r28
    436c:	cd b7       	in	r28, 0x3d	; 61
    436e:	de b7       	in	r29, 0x3e	; 62
    4370:	8b 85       	ldd	r24, Y+11	; 0x0b
    4372:	81 30       	cpi	r24, 0x01	; 1
    4374:	61 f0       	breq	.+24     	; 0x438e <STEPPER_wait_and_then+0x32>
    4376:	81 30       	cpi	r24, 0x01	; 1
    4378:	18 f0       	brcs	.+6      	; 0x4380 <STEPPER_wait_and_then+0x24>
    437a:	82 30       	cpi	r24, 0x02	; 2
    437c:	a1 f5       	brne	.+104    	; 0x43e6 <STEPPER_wait_and_then+0x8a>
    437e:	11 c0       	rjmp	.+34     	; 0x43a2 <STEPPER_wait_and_then+0x46>
    4380:	ec 85       	ldd	r30, Y+12	; 0x0c
    4382:	fd 85       	ldd	r31, Y+13	; 0x0d
    4384:	80 91 3f 07 	lds	r24, 0x073F
    4388:	88 23       	and	r24, r24
    438a:	e1 f3       	breq	.-8      	; 0x4384 <STEPPER_wait_and_then+0x28>
    438c:	06 c0       	rjmp	.+12     	; 0x439a <STEPPER_wait_and_then+0x3e>
    438e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4390:	fd 85       	ldd	r31, Y+13	; 0x0d
    4392:	80 91 40 07 	lds	r24, 0x0740
    4396:	88 23       	and	r24, r24
    4398:	e1 f3       	breq	.-8      	; 0x4392 <STEPPER_wait_and_then+0x36>
    439a:	30 97       	sbiw	r30, 0x00	; 0
    439c:	21 f1       	breq	.+72     	; 0x43e6 <STEPPER_wait_and_then+0x8a>
    439e:	09 95       	icall
    43a0:	22 c0       	rjmp	.+68     	; 0x43e6 <STEPPER_wait_and_then+0x8a>
    43a2:	cc 84       	ldd	r12, Y+12	; 0x0c
    43a4:	dd 84       	ldd	r13, Y+13	; 0x0d
    43a6:	ee 84       	ldd	r14, Y+14	; 0x0e
    43a8:	ff 84       	ldd	r15, Y+15	; 0x0f
    43aa:	00 e0       	ldi	r16, 0x00	; 0
    43ac:	10 e0       	ldi	r17, 0x00	; 0
    43ae:	00 23       	and	r16, r16
    43b0:	51 f4       	brne	.+20     	; 0x43c6 <STEPPER_wait_and_then+0x6a>
    43b2:	80 91 3f 07 	lds	r24, 0x073F
    43b6:	88 23       	and	r24, r24
    43b8:	31 f0       	breq	.+12     	; 0x43c6 <STEPPER_wait_and_then+0x6a>
    43ba:	c1 14       	cp	r12, r1
    43bc:	d1 04       	cpc	r13, r1
    43be:	11 f0       	breq	.+4      	; 0x43c4 <STEPPER_wait_and_then+0x68>
    43c0:	f6 01       	movw	r30, r12
    43c2:	09 95       	icall
    43c4:	01 e0       	ldi	r16, 0x01	; 1
    43c6:	11 23       	and	r17, r17
    43c8:	51 f4       	brne	.+20     	; 0x43de <STEPPER_wait_and_then+0x82>
    43ca:	80 91 40 07 	lds	r24, 0x0740
    43ce:	88 23       	and	r24, r24
    43d0:	31 f0       	breq	.+12     	; 0x43de <STEPPER_wait_and_then+0x82>
    43d2:	e1 14       	cp	r14, r1
    43d4:	f1 04       	cpc	r15, r1
    43d6:	11 f0       	breq	.+4      	; 0x43dc <STEPPER_wait_and_then+0x80>
    43d8:	f7 01       	movw	r30, r14
    43da:	09 95       	icall
    43dc:	11 e0       	ldi	r17, 0x01	; 1
    43de:	00 23       	and	r16, r16
    43e0:	31 f3       	breq	.-52     	; 0x43ae <STEPPER_wait_and_then+0x52>
    43e2:	11 23       	and	r17, r17
    43e4:	21 f3       	breq	.-56     	; 0x43ae <STEPPER_wait_and_then+0x52>
    43e6:	cf 91       	pop	r28
    43e8:	df 91       	pop	r29
    43ea:	1f 91       	pop	r17
    43ec:	0f 91       	pop	r16
    43ee:	ff 90       	pop	r15
    43f0:	ef 90       	pop	r14
    43f2:	df 90       	pop	r13
    43f4:	cf 90       	pop	r12
    43f6:	08 95       	ret

000043f8 <SYS_get_state>:
    43f8:	e8 2f       	mov	r30, r24
    43fa:	f0 e0       	ldi	r31, 0x00	; 0
    43fc:	e3 31       	cpi	r30, 0x13	; 19
    43fe:	f1 05       	cpc	r31, r1
    4400:	40 f4       	brcc	.+16     	; 0x4412 <SYS_get_state+0x1a>
    4402:	e2 5c       	subi	r30, 0xC2	; 194
    4404:	ff 4f       	sbci	r31, 0xFF	; 255
    4406:	ee 0f       	add	r30, r30
    4408:	ff 1f       	adc	r31, r31
    440a:	05 90       	lpm	r0, Z+
    440c:	f4 91       	lpm	r31, Z+
    440e:	e0 2d       	mov	r30, r0
    4410:	09 94       	ijmp
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	08 95       	ret
    4416:	80 91 41 07 	lds	r24, 0x0741
    441a:	08 95       	ret
    441c:	80 91 42 07 	lds	r24, 0x0742
    4420:	08 95       	ret
    4422:	80 91 43 07 	lds	r24, 0x0743
    4426:	08 95       	ret
    4428:	80 91 44 07 	lds	r24, 0x0744
    442c:	08 95       	ret
    442e:	80 91 45 07 	lds	r24, 0x0745
    4432:	08 95       	ret
    4434:	80 91 47 07 	lds	r24, 0x0747
    4438:	08 95       	ret
    443a:	80 91 46 07 	lds	r24, 0x0746
    443e:	08 95       	ret
    4440:	80 91 48 07 	lds	r24, 0x0748
    4444:	08 95       	ret
    4446:	80 91 49 07 	lds	r24, 0x0749
    444a:	08 95       	ret
    444c:	80 91 4a 07 	lds	r24, 0x074A
    4450:	08 95       	ret
    4452:	80 91 4b 07 	lds	r24, 0x074B
    4456:	08 95       	ret
    4458:	80 91 4c 07 	lds	r24, 0x074C
    445c:	08 95       	ret
    445e:	80 91 4d 07 	lds	r24, 0x074D
    4462:	08 95       	ret
    4464:	80 91 4e 07 	lds	r24, 0x074E
    4468:	08 95       	ret
    446a:	80 91 4f 07 	lds	r24, 0x074F
    446e:	08 95       	ret
    4470:	80 91 50 07 	lds	r24, 0x0750
    4474:	08 95       	ret
    4476:	80 91 51 07 	lds	r24, 0x0751
    447a:	08 95       	ret
    447c:	80 91 52 07 	lds	r24, 0x0752
    4480:	08 95       	ret
    4482:	80 91 53 07 	lds	r24, 0x0753
    4486:	08 95       	ret

00004488 <SYS_set_state>:
    4488:	e8 2f       	mov	r30, r24
    448a:	f0 e0       	ldi	r31, 0x00	; 0
    448c:	e3 31       	cpi	r30, 0x13	; 19
    448e:	f1 05       	cpc	r31, r1
    4490:	08 f0       	brcs	.+2      	; 0x4494 <SYS_set_state+0xc>
    4492:	40 c0       	rjmp	.+128    	; 0x4514 <SYS_set_state+0x8c>
    4494:	ef 5a       	subi	r30, 0xAF	; 175
    4496:	ff 4f       	sbci	r31, 0xFF	; 255
    4498:	ee 0f       	add	r30, r30
    449a:	ff 1f       	adc	r31, r31
    449c:	05 90       	lpm	r0, Z+
    449e:	f4 91       	lpm	r31, Z+
    44a0:	e0 2d       	mov	r30, r0
    44a2:	09 94       	ijmp
    44a4:	60 93 41 07 	sts	0x0741, r22
    44a8:	08 95       	ret
    44aa:	60 93 42 07 	sts	0x0742, r22
    44ae:	08 95       	ret
    44b0:	60 93 43 07 	sts	0x0743, r22
    44b4:	08 95       	ret
    44b6:	60 93 44 07 	sts	0x0744, r22
    44ba:	08 95       	ret
    44bc:	60 93 45 07 	sts	0x0745, r22
    44c0:	08 95       	ret
    44c2:	60 93 47 07 	sts	0x0747, r22
    44c6:	08 95       	ret
    44c8:	60 93 46 07 	sts	0x0746, r22
    44cc:	08 95       	ret
    44ce:	60 93 48 07 	sts	0x0748, r22
    44d2:	08 95       	ret
    44d4:	60 93 49 07 	sts	0x0749, r22
    44d8:	08 95       	ret
    44da:	60 93 4a 07 	sts	0x074A, r22
    44de:	08 95       	ret
    44e0:	60 93 4b 07 	sts	0x074B, r22
    44e4:	08 95       	ret
    44e6:	60 93 4c 07 	sts	0x074C, r22
    44ea:	08 95       	ret
    44ec:	60 93 4d 07 	sts	0x074D, r22
    44f0:	08 95       	ret
    44f2:	60 93 4e 07 	sts	0x074E, r22
    44f6:	08 95       	ret
    44f8:	60 93 4f 07 	sts	0x074F, r22
    44fc:	08 95       	ret
    44fe:	60 93 50 07 	sts	0x0750, r22
    4502:	08 95       	ret
    4504:	60 93 51 07 	sts	0x0751, r22
    4508:	08 95       	ret
    450a:	60 93 52 07 	sts	0x0752, r22
    450e:	08 95       	ret
    4510:	60 93 51 07 	sts	0x0751, r22
    4514:	08 95       	ret

00004516 <ATTINY_get_sensors>:
    4516:	0f 93       	push	r16
    4518:	1f 93       	push	r17
    451a:	81 e0       	ldi	r24, 0x01	; 1
    451c:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    4520:	81 30       	cpi	r24, 0x01	; 1
    4522:	11 f0       	breq	.+4      	; 0x4528 <ATTINY_get_sensors+0x12>
    4524:	00 e0       	ldi	r16, 0x00	; 0
    4526:	24 c0       	rjmp	.+72     	; 0x4570 <ATTINY_get_sensors+0x5a>
    4528:	87 e0       	ldi	r24, 0x07	; 7
    452a:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <SPI_set_slave_addr>
    452e:	82 e0       	ldi	r24, 0x02	; 2
    4530:	6a e0       	ldi	r22, 0x0A	; 10
    4532:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <SPI_transmit>
    4536:	82 e0       	ldi	r24, 0x02	; 2
    4538:	62 eb       	ldi	r22, 0xB2	; 178
    453a:	0e 94 ea 1d 	call	0x3bd4	; 0x3bd4 <SPI_transmit>
    453e:	18 ec       	ldi	r17, 0xC8	; 200
    4540:	81 2f       	mov	r24, r17
    4542:	8a 95       	dec	r24
    4544:	f1 f7       	brne	.-4      	; 0x4542 <ATTINY_get_sensors+0x2c>
    4546:	82 e0       	ldi	r24, 0x02	; 2
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	0e 94 66 28 	call	0x50cc	; 0x50cc <SPI_receive>
    454e:	08 2f       	mov	r16, r24
    4550:	81 2f       	mov	r24, r17
    4552:	8a 95       	dec	r24
    4554:	f1 f7       	brne	.-4      	; 0x4552 <ATTINY_get_sensors+0x3c>
    4556:	82 e0       	ldi	r24, 0x02	; 2
    4558:	60 e0       	ldi	r22, 0x00	; 0
    455a:	0e 94 66 28 	call	0x50cc	; 0x50cc <SPI_receive>
    455e:	1a 95       	dec	r17
    4560:	f1 f7       	brne	.-4      	; 0x455e <ATTINY_get_sensors+0x48>
    4562:	87 e0       	ldi	r24, 0x07	; 7
    4564:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <SPI_set_slave_addr>
    4568:	88 e8       	ldi	r24, 0x88	; 136
    456a:	93 e1       	ldi	r25, 0x13	; 19
    456c:	01 97       	sbiw	r24, 0x01	; 1
    456e:	f1 f7       	brne	.-4      	; 0x456c <ATTINY_get_sensors+0x56>
    4570:	80 2f       	mov	r24, r16
    4572:	1f 91       	pop	r17
    4574:	0f 91       	pop	r16
    4576:	08 95       	ret

00004578 <ATTINY_get_SW_state>:
    4578:	1f 93       	push	r17
    457a:	cf 93       	push	r28
    457c:	df 93       	push	r29
    457e:	18 2f       	mov	r17, r24
    4580:	80 91 ce 03 	lds	r24, 0x03CE
    4584:	88 23       	and	r24, r24
    4586:	41 f0       	breq	.+16     	; 0x4598 <ATTINY_get_SW_state+0x20>
    4588:	80 91 d8 03 	lds	r24, 0x03D8
    458c:	88 23       	and	r24, r24
    458e:	99 f0       	breq	.+38     	; 0x45b6 <ATTINY_get_SW_state+0x3e>
    4590:	10 92 ce 03 	sts	0x03CE, r1
    4594:	10 92 d8 03 	sts	0x03D8, r1
    4598:	0e 94 8b 22 	call	0x4516	; 0x4516 <ATTINY_get_sensors>
    459c:	80 93 cd 03 	sts	0x03CD, r24
    45a0:	82 ed       	ldi	r24, 0xD2	; 210
    45a2:	93 e0       	ldi	r25, 0x03	; 3
    45a4:	61 e0       	ldi	r22, 0x01	; 1
    45a6:	40 e0       	ldi	r20, 0x00	; 0
    45a8:	22 e3       	ldi	r18, 0x32	; 50
    45aa:	30 e0       	ldi	r19, 0x00	; 0
    45ac:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <TMRSRVC_new>
    45b0:	81 e0       	ldi	r24, 0x01	; 1
    45b2:	80 93 ce 03 	sts	0x03CE, r24
    45b6:	90 91 cd 03 	lds	r25, 0x03CD
    45ba:	a1 2f       	mov	r26, r17
    45bc:	b0 e0       	ldi	r27, 0x00	; 0
    45be:	ed 01       	movw	r28, r26
    45c0:	cc 58       	subi	r28, 0x8C	; 140
    45c2:	dc 4f       	sbci	r29, 0xFC	; 252
    45c4:	88 81       	ld	r24, Y
    45c6:	88 23       	and	r24, r24
    45c8:	69 f0       	breq	.+26     	; 0x45e4 <ATTINY_get_SW_state+0x6c>
    45ca:	fd 01       	movw	r30, r26
    45cc:	e9 58       	subi	r30, 0x89	; 137
    45ce:	fc 4f       	sbci	r31, 0xFC	; 252
    45d0:	80 81       	ld	r24, Z
    45d2:	98 23       	and	r25, r24
    45d4:	c1 f0       	breq	.+48     	; 0x4606 <ATTINY_get_SW_state+0x8e>
    45d6:	fd 01       	movw	r30, r26
    45d8:	e1 53       	subi	r30, 0x31	; 49
    45da:	fc 4f       	sbci	r31, 0xFC	; 252
    45dc:	81 e0       	ldi	r24, 0x01	; 1
    45de:	80 83       	st	Z, r24
    45e0:	18 82       	st	Y, r1
    45e2:	11 c0       	rjmp	.+34     	; 0x4606 <ATTINY_get_SW_state+0x8e>
    45e4:	fd 01       	movw	r30, r26
    45e6:	e1 53       	subi	r30, 0x31	; 49
    45e8:	fc 4f       	sbci	r31, 0xFC	; 252
    45ea:	80 81       	ld	r24, Z
    45ec:	81 11       	cpse	r24, r1
    45ee:	10 82       	st	Z, r1
    45f0:	fd 01       	movw	r30, r26
    45f2:	e9 58       	subi	r30, 0x89	; 137
    45f4:	fc 4f       	sbci	r31, 0xFC	; 252
    45f6:	80 81       	ld	r24, Z
    45f8:	98 23       	and	r25, r24
    45fa:	29 f4       	brne	.+10     	; 0x4606 <ATTINY_get_SW_state+0x8e>
    45fc:	fd 01       	movw	r30, r26
    45fe:	ec 58       	subi	r30, 0x8C	; 140
    4600:	fc 4f       	sbci	r31, 0xFC	; 252
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	80 83       	st	Z, r24
    4606:	a1 53       	subi	r26, 0x31	; 49
    4608:	bc 4f       	sbci	r27, 0xFC	; 252
    460a:	8c 91       	ld	r24, X
    460c:	df 91       	pop	r29
    460e:	cf 91       	pop	r28
    4610:	1f 91       	pop	r17
    4612:	08 95       	ret

00004614 <ATTINY_open>:
    4614:	82 e0       	ldi	r24, 0x02	; 2
    4616:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    461a:	88 23       	and	r24, r24
    461c:	19 f4       	brne	.+6      	; 0x4624 <ATTINY_open+0x10>
    461e:	90 e0       	ldi	r25, 0x00	; 0
    4620:	82 e0       	ldi	r24, 0x02	; 2
    4622:	08 95       	ret
    4624:	10 92 6f 07 	sts	0x076F, r1
    4628:	10 92 6e 07 	sts	0x076E, r1
    462c:	10 92 71 07 	sts	0x0771, r1
    4630:	10 92 70 07 	sts	0x0770, r1
    4634:	10 92 73 07 	sts	0x0773, r1
    4638:	10 92 72 07 	sts	0x0772, r1
    463c:	10 92 75 07 	sts	0x0775, r1
    4640:	10 92 74 07 	sts	0x0774, r1
    4644:	10 92 77 07 	sts	0x0777, r1
    4648:	10 92 76 07 	sts	0x0776, r1
    464c:	80 e9       	ldi	r24, 0x90	; 144
    464e:	91 e0       	ldi	r25, 0x01	; 1
    4650:	90 93 5b 07 	sts	0x075B, r25
    4654:	80 93 5a 07 	sts	0x075A, r24
    4658:	90 93 5d 07 	sts	0x075D, r25
    465c:	80 93 5c 07 	sts	0x075C, r24
    4660:	90 93 5f 07 	sts	0x075F, r25
    4664:	80 93 5e 07 	sts	0x075E, r24
    4668:	90 93 61 07 	sts	0x0761, r25
    466c:	80 93 60 07 	sts	0x0760, r24
    4670:	90 93 63 07 	sts	0x0763, r25
    4674:	80 93 62 07 	sts	0x0762, r24
    4678:	84 e3       	ldi	r24, 0x34	; 52
    467a:	98 e0       	ldi	r25, 0x08	; 8
    467c:	90 93 65 07 	sts	0x0765, r25
    4680:	80 93 64 07 	sts	0x0764, r24
    4684:	90 93 67 07 	sts	0x0767, r25
    4688:	80 93 66 07 	sts	0x0766, r24
    468c:	90 93 69 07 	sts	0x0769, r25
    4690:	80 93 68 07 	sts	0x0768, r24
    4694:	90 93 6b 07 	sts	0x076B, r25
    4698:	80 93 6a 07 	sts	0x076A, r24
    469c:	90 93 6d 07 	sts	0x076D, r25
    46a0:	80 93 6c 07 	sts	0x076C, r24
    46a4:	81 e0       	ldi	r24, 0x01	; 1
    46a6:	61 e0       	ldi	r22, 0x01	; 1
    46a8:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    46ac:	91 e0       	ldi	r25, 0x01	; 1
    46ae:	81 e0       	ldi	r24, 0x01	; 1
    46b0:	08 95       	ret

000046b2 <TMRSRVC_delay>:
    46b2:	df 93       	push	r29
    46b4:	cf 93       	push	r28
    46b6:	cd b7       	in	r28, 0x3d	; 61
    46b8:	de b7       	in	r29, 0x3e	; 62
    46ba:	29 97       	sbiw	r28, 0x09	; 9
    46bc:	0f b6       	in	r0, 0x3f	; 63
    46be:	f8 94       	cli
    46c0:	de bf       	out	0x3e, r29	; 62
    46c2:	0f be       	out	0x3f, r0	; 63
    46c4:	cd bf       	out	0x3d, r28	; 61
    46c6:	9c 01       	movw	r18, r24
    46c8:	ce 01       	movw	r24, r28
    46ca:	01 96       	adiw	r24, 0x01	; 1
    46cc:	61 e0       	ldi	r22, 0x01	; 1
    46ce:	40 e0       	ldi	r20, 0x00	; 0
    46d0:	0e 94 7a 23 	call	0x46f4	; 0x46f4 <TMRSRVC_new>
    46d4:	98 2f       	mov	r25, r24
    46d6:	88 23       	and	r24, r24
    46d8:	19 f4       	brne	.+6      	; 0x46e0 <TMRSRVC_delay+0x2e>
    46da:	8f 81       	ldd	r24, Y+7	; 0x07
    46dc:	88 23       	and	r24, r24
    46de:	e9 f3       	breq	.-6      	; 0x46da <TMRSRVC_delay+0x28>
    46e0:	89 2f       	mov	r24, r25
    46e2:	29 96       	adiw	r28, 0x09	; 9
    46e4:	0f b6       	in	r0, 0x3f	; 63
    46e6:	f8 94       	cli
    46e8:	de bf       	out	0x3e, r29	; 62
    46ea:	0f be       	out	0x3f, r0	; 63
    46ec:	cd bf       	out	0x3d, r28	; 61
    46ee:	cf 91       	pop	r28
    46f0:	df 91       	pop	r29
    46f2:	08 95       	ret

000046f4 <TMRSRVC_new>:
    46f4:	ef 92       	push	r14
    46f6:	ff 92       	push	r15
    46f8:	0f 93       	push	r16
    46fa:	1f 93       	push	r17
    46fc:	cf 93       	push	r28
    46fe:	df 93       	push	r29
    4700:	ec 01       	movw	r28, r24
    4702:	f6 2e       	mov	r15, r22
    4704:	e4 2e       	mov	r14, r20
    4706:	89 01       	movw	r16, r18
    4708:	88 e0       	ldi	r24, 0x08	; 8
    470a:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    470e:	81 30       	cpi	r24, 0x01	; 1
    4710:	11 f0       	breq	.+4      	; 0x4716 <TMRSRVC_new+0x22>
    4712:	81 e0       	ldi	r24, 0x01	; 1
    4714:	26 c0       	rjmp	.+76     	; 0x4762 <TMRSRVC_new+0x6e>
    4716:	84 e0       	ldi	r24, 0x04	; 4
    4718:	90 e0       	ldi	r25, 0x00	; 0
    471a:	0e 94 f6 36 	call	0x6dec	; 0x6dec <malloc>
    471e:	fc 01       	movw	r30, r24
    4720:	00 97       	sbiw	r24, 0x00	; 0
    4722:	11 f4       	brne	.+4      	; 0x4728 <TMRSRVC_new+0x34>
    4724:	82 e0       	ldi	r24, 0x02	; 2
    4726:	1d c0       	rjmp	.+58     	; 0x4762 <TMRSRVC_new+0x6e>
    4728:	f9 82       	std	Y+1, r15	; 0x01
    472a:	f0 fc       	sbrc	r15, 0
    472c:	1e 82       	std	Y+6, r1	; 0x06
    472e:	81 e0       	ldi	r24, 0x01	; 1
    4730:	e8 16       	cp	r14, r24
    4732:	19 f4       	brne	.+6      	; 0x473a <TMRSRVC_new+0x46>
    4734:	89 81       	ldd	r24, Y+1	; 0x01
    4736:	84 60       	ori	r24, 0x04	; 4
    4738:	89 83       	std	Y+1, r24	; 0x01
    473a:	89 81       	ldd	r24, Y+1	; 0x01
    473c:	88 60       	ori	r24, 0x08	; 8
    473e:	89 83       	std	Y+1, r24	; 0x01
    4740:	1b 83       	std	Y+3, r17	; 0x03
    4742:	0a 83       	std	Y+2, r16	; 0x02
    4744:	1d 83       	std	Y+5, r17	; 0x05
    4746:	0c 83       	std	Y+4, r16	; 0x04
    4748:	d1 83       	std	Z+1, r29	; 0x01
    474a:	c0 83       	st	Z, r28
    474c:	13 82       	std	Z+3, r1	; 0x03
    474e:	12 82       	std	Z+2, r1	; 0x02
    4750:	81 e0       	ldi	r24, 0x01	; 1
    4752:	80 93 3b 04 	sts	0x043B, r24
    4756:	cf 01       	movw	r24, r30
    4758:	0e 94 0f 2a 	call	0x541e	; 0x541e <TMRSRVC_insert>
    475c:	10 92 3b 04 	sts	0x043B, r1
    4760:	80 e0       	ldi	r24, 0x00	; 0
    4762:	df 91       	pop	r29
    4764:	cf 91       	pop	r28
    4766:	1f 91       	pop	r17
    4768:	0f 91       	pop	r16
    476a:	ff 90       	pop	r15
    476c:	ef 90       	pop	r14
    476e:	08 95       	ret

00004770 <I2C_MSTR_get>:
    4770:	fc 01       	movw	r30, r24
    4772:	80 91 7b 07 	lds	r24, 0x077B
    4776:	81 30       	cpi	r24, 0x01	; 1
    4778:	11 f0       	breq	.+4      	; 0x477e <I2C_MSTR_get+0xe>
    477a:	85 e0       	ldi	r24, 0x05	; 5
    477c:	08 95       	ret
    477e:	80 91 7c 07 	lds	r24, 0x077C
    4782:	81 30       	cpi	r24, 0x01	; 1
    4784:	11 f0       	breq	.+4      	; 0x478a <I2C_MSTR_get+0x1a>
    4786:	8a e0       	ldi	r24, 0x0A	; 10
    4788:	08 95       	ret
    478a:	61 30       	cpi	r22, 0x01	; 1
    478c:	11 f4       	brne	.+4      	; 0x4792 <I2C_MSTR_get+0x22>
    478e:	84 ec       	ldi	r24, 0xC4	; 196
    4790:	01 c0       	rjmp	.+2      	; 0x4794 <I2C_MSTR_get+0x24>
    4792:	84 e8       	ldi	r24, 0x84	; 132
    4794:	80 93 bc 00 	sts	0x00BC, r24
    4798:	80 91 bc 00 	lds	r24, 0x00BC
    479c:	87 ff       	sbrs	r24, 7
    479e:	fc cf       	rjmp	.-8      	; 0x4798 <I2C_MSTR_get+0x28>
    47a0:	61 30       	cpi	r22, 0x01	; 1
    47a2:	31 f4       	brne	.+12     	; 0x47b0 <I2C_MSTR_get+0x40>
    47a4:	80 91 b9 00 	lds	r24, 0x00B9
    47a8:	88 7f       	andi	r24, 0xF8	; 248
    47aa:	80 35       	cpi	r24, 0x50	; 80
    47ac:	59 f4       	brne	.+22     	; 0x47c4 <I2C_MSTR_get+0x54>
    47ae:	05 c0       	rjmp	.+10     	; 0x47ba <I2C_MSTR_get+0x4a>
    47b0:	80 91 b9 00 	lds	r24, 0x00B9
    47b4:	88 7f       	andi	r24, 0xF8	; 248
    47b6:	88 35       	cpi	r24, 0x58	; 88
    47b8:	29 f4       	brne	.+10     	; 0x47c4 <I2C_MSTR_get+0x54>
    47ba:	80 91 bb 00 	lds	r24, 0x00BB
    47be:	80 83       	st	Z, r24
    47c0:	80 e0       	ldi	r24, 0x00	; 0
    47c2:	08 95       	ret
    47c4:	82 e0       	ldi	r24, 0x02	; 2
    47c6:	08 95       	ret

000047c8 <I2C_MSTR_send>:
    47c8:	98 2f       	mov	r25, r24
    47ca:	80 91 7b 07 	lds	r24, 0x077B
    47ce:	81 30       	cpi	r24, 0x01	; 1
    47d0:	11 f0       	breq	.+4      	; 0x47d6 <I2C_MSTR_send+0xe>
    47d2:	85 e0       	ldi	r24, 0x05	; 5
    47d4:	08 95       	ret
    47d6:	80 91 7c 07 	lds	r24, 0x077C
    47da:	81 30       	cpi	r24, 0x01	; 1
    47dc:	11 f0       	breq	.+4      	; 0x47e2 <I2C_MSTR_send+0x1a>
    47de:	8a e0       	ldi	r24, 0x0A	; 10
    47e0:	08 95       	ret
    47e2:	90 93 bb 00 	sts	0x00BB, r25
    47e6:	84 e8       	ldi	r24, 0x84	; 132
    47e8:	80 93 bc 00 	sts	0x00BC, r24
    47ec:	80 91 bc 00 	lds	r24, 0x00BC
    47f0:	87 ff       	sbrs	r24, 7
    47f2:	fc cf       	rjmp	.-8      	; 0x47ec <I2C_MSTR_send+0x24>
    47f4:	80 91 b9 00 	lds	r24, 0x00B9
    47f8:	90 e0       	ldi	r25, 0x00	; 0
    47fa:	88 7f       	andi	r24, 0xF8	; 248
    47fc:	90 70       	andi	r25, 0x00	; 0
    47fe:	88 32       	cpi	r24, 0x28	; 40
    4800:	91 05       	cpc	r25, r1
    4802:	21 f0       	breq	.+8      	; 0x480c <I2C_MSTR_send+0x44>
    4804:	c0 97       	sbiw	r24, 0x30	; 48
    4806:	21 f4       	brne	.+8      	; 0x4810 <I2C_MSTR_send+0x48>
    4808:	83 e0       	ldi	r24, 0x03	; 3
    480a:	08 95       	ret
    480c:	80 e0       	ldi	r24, 0x00	; 0
    480e:	08 95       	ret
    4810:	8c e0       	ldi	r24, 0x0C	; 12
    4812:	08 95       	ret

00004814 <I2C_MSTR_start>:
    4814:	98 2f       	mov	r25, r24
    4816:	20 91 7b 07 	lds	r18, 0x077B
    481a:	21 30       	cpi	r18, 0x01	; 1
    481c:	11 f0       	breq	.+4      	; 0x4822 <I2C_MSTR_start+0xe>
    481e:	85 e0       	ldi	r24, 0x05	; 5
    4820:	08 95       	ret
    4822:	80 91 7d 07 	lds	r24, 0x077D
    4826:	81 30       	cpi	r24, 0x01	; 1
    4828:	11 f4       	brne	.+4      	; 0x482e <I2C_MSTR_start+0x1a>
    482a:	89 e0       	ldi	r24, 0x09	; 9
    482c:	08 95       	ret
    482e:	20 93 7c 07 	sts	0x077C, r18
    4832:	84 ea       	ldi	r24, 0xA4	; 164
    4834:	80 93 bc 00 	sts	0x00BC, r24
    4838:	80 91 bc 00 	lds	r24, 0x00BC
    483c:	87 ff       	sbrs	r24, 7
    483e:	fc cf       	rjmp	.-8      	; 0x4838 <I2C_MSTR_start+0x24>
    4840:	80 91 b9 00 	lds	r24, 0x00B9
    4844:	88 7f       	andi	r24, 0xF8	; 248
    4846:	88 30       	cpi	r24, 0x08	; 8
    4848:	39 f0       	breq	.+14     	; 0x4858 <I2C_MSTR_start+0x44>
    484a:	80 91 b9 00 	lds	r24, 0x00B9
    484e:	88 7f       	andi	r24, 0xF8	; 248
    4850:	80 31       	cpi	r24, 0x10	; 16
    4852:	11 f0       	breq	.+4      	; 0x4858 <I2C_MSTR_start+0x44>
    4854:	81 e0       	ldi	r24, 0x01	; 1
    4856:	08 95       	ret
    4858:	61 30       	cpi	r22, 0x01	; 1
    485a:	19 f4       	brne	.+6      	; 0x4862 <I2C_MSTR_start+0x4e>
    485c:	99 0f       	add	r25, r25
    485e:	91 60       	ori	r25, 0x01	; 1
    4860:	03 c0       	rjmp	.+6      	; 0x4868 <I2C_MSTR_start+0x54>
    4862:	66 23       	and	r22, r22
    4864:	19 f4       	brne	.+6      	; 0x486c <I2C_MSTR_start+0x58>
    4866:	99 0f       	add	r25, r25
    4868:	90 93 bb 00 	sts	0x00BB, r25
    486c:	84 e8       	ldi	r24, 0x84	; 132
    486e:	80 93 bc 00 	sts	0x00BC, r24
    4872:	80 91 bc 00 	lds	r24, 0x00BC
    4876:	87 ff       	sbrs	r24, 7
    4878:	fc cf       	rjmp	.-8      	; 0x4872 <I2C_MSTR_start+0x5e>
    487a:	61 30       	cpi	r22, 0x01	; 1
    487c:	31 f4       	brne	.+12     	; 0x488a <I2C_MSTR_start+0x76>
    487e:	80 91 b9 00 	lds	r24, 0x00B9
    4882:	88 7f       	andi	r24, 0xF8	; 248
    4884:	80 34       	cpi	r24, 0x40	; 64
    4886:	41 f4       	brne	.+16     	; 0x4898 <I2C_MSTR_start+0x84>
    4888:	09 c0       	rjmp	.+18     	; 0x489c <I2C_MSTR_start+0x88>
    488a:	66 23       	and	r22, r22
    488c:	39 f4       	brne	.+14     	; 0x489c <I2C_MSTR_start+0x88>
    488e:	80 91 b9 00 	lds	r24, 0x00B9
    4892:	88 7f       	andi	r24, 0xF8	; 248
    4894:	88 31       	cpi	r24, 0x18	; 24
    4896:	11 f0       	breq	.+4      	; 0x489c <I2C_MSTR_start+0x88>
    4898:	82 e0       	ldi	r24, 0x02	; 2
    489a:	08 95       	ret
    489c:	80 e0       	ldi	r24, 0x00	; 0
    489e:	08 95       	ret

000048a0 <I2C_MSTR_stop>:
    48a0:	80 91 7c 07 	lds	r24, 0x077C
    48a4:	81 30       	cpi	r24, 0x01	; 1
    48a6:	11 f0       	breq	.+4      	; 0x48ac <I2C_MSTR_stop+0xc>
    48a8:	8a e0       	ldi	r24, 0x0A	; 10
    48aa:	08 95       	ret
    48ac:	80 91 7e 07 	lds	r24, 0x077E
    48b0:	81 30       	cpi	r24, 0x01	; 1
    48b2:	29 f4       	brne	.+10     	; 0x48be <I2C_MSTR_stop+0x1e>
    48b4:	85 e9       	ldi	r24, 0x95	; 149
    48b6:	80 93 bc 00 	sts	0x00BC, r24
    48ba:	80 e0       	ldi	r24, 0x00	; 0
    48bc:	08 95       	ret
    48be:	84 e9       	ldi	r24, 0x94	; 148
    48c0:	80 93 bc 00 	sts	0x00BC, r24
    48c4:	80 e0       	ldi	r24, 0x00	; 0
    48c6:	08 95       	ret

000048c8 <I2C_open>:
    48c8:	82 e1       	ldi	r24, 0x12	; 18
    48ca:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    48ce:	88 23       	and	r24, r24
    48d0:	b1 f4       	brne	.+44     	; 0x48fe <I2C_open+0x36>
    48d2:	10 92 7b 07 	sts	0x077B, r1
    48d6:	10 92 7c 07 	sts	0x077C, r1
    48da:	10 92 7d 07 	sts	0x077D, r1
    48de:	10 92 7e 07 	sts	0x077E, r1
    48e2:	10 92 7f 07 	sts	0x077F, r1
    48e6:	0e 94 ab 2a 	call	0x5556	; 0x5556 <__I2C_init>
    48ea:	87 e1       	ldi	r24, 0x17	; 23
    48ec:	60 e0       	ldi	r22, 0x00	; 0
    48ee:	0e 94 82 24 	call	0x4904	; 0x4904 <I2C_set_BRG>
    48f2:	0e 94 a1 2a 	call	0x5542	; 0x5542 <I2C_enable>
    48f6:	82 e1       	ldi	r24, 0x12	; 18
    48f8:	61 e0       	ldi	r22, 0x01	; 1
    48fa:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    48fe:	82 e1       	ldi	r24, 0x12	; 18
    4900:	90 e0       	ldi	r25, 0x00	; 0
    4902:	08 95       	ret

00004904 <I2C_set_BRG>:
    4904:	63 70       	andi	r22, 0x03	; 3
    4906:	60 93 b9 00 	sts	0x00B9, r22
    490a:	80 93 b8 00 	sts	0x00B8, r24
    490e:	81 e0       	ldi	r24, 0x01	; 1
    4910:	80 93 7b 07 	sts	0x077B, r24
    4914:	08 95       	ret

00004916 <__ADC_init>:
    4916:	8f e1       	ldi	r24, 0x1F	; 31
    4918:	80 93 7c 00 	sts	0x007C, r24
    491c:	ea e7       	ldi	r30, 0x7A	; 122
    491e:	f0 e0       	ldi	r31, 0x00	; 0
    4920:	87 e0       	ldi	r24, 0x07	; 7
    4922:	80 83       	st	Z, r24
    4924:	80 81       	ld	r24, Z
    4926:	80 68       	ori	r24, 0x80	; 128
    4928:	80 83       	st	Z, r24
    492a:	08 95       	ret

0000492c <CBOT_init>:
    492c:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <SYS_init>
    4930:	0e 94 c8 27 	call	0x4f90	; 0x4f90 <ATMEGA_open>
    4934:	0e 94 f8 26 	call	0x4df0	; 0x4df0 <ISR_open>
    4938:	0e 94 78 2a 	call	0x54f0	; 0x54f0 <TMRSRVC_open>
    493c:	0e 94 2d 28 	call	0x505a	; 0x505a <SPI_open>
    4940:	0e 94 0a 23 	call	0x4614	; 0x4614 <ATTINY_open>
    4944:	78 94       	sei
    4946:	08 95       	ret

00004948 <CBOT_ISR_init>:
    4948:	00 00       	nop
    494a:	08 95       	ret

0000494c <__vector_16>:
    494c:	1f 92       	push	r1
    494e:	0f 92       	push	r0
    4950:	0f b6       	in	r0, 0x3f	; 63
    4952:	0f 92       	push	r0
    4954:	11 24       	eor	r1, r1
    4956:	2f 93       	push	r18
    4958:	3f 93       	push	r19
    495a:	4f 93       	push	r20
    495c:	5f 93       	push	r21
    495e:	6f 93       	push	r22
    4960:	7f 93       	push	r23
    4962:	8f 93       	push	r24
    4964:	9f 93       	push	r25
    4966:	af 93       	push	r26
    4968:	bf 93       	push	r27
    496a:	ef 93       	push	r30
    496c:	ff 93       	push	r31
    496e:	e0 91 fb 03 	lds	r30, 0x03FB
    4972:	f0 91 fc 03 	lds	r31, 0x03FC
    4976:	30 97       	sbiw	r30, 0x00	; 0
    4978:	09 f0       	breq	.+2      	; 0x497c <__vector_16+0x30>
    497a:	09 95       	icall
    497c:	ff 91       	pop	r31
    497e:	ef 91       	pop	r30
    4980:	bf 91       	pop	r27
    4982:	af 91       	pop	r26
    4984:	9f 91       	pop	r25
    4986:	8f 91       	pop	r24
    4988:	7f 91       	pop	r23
    498a:	6f 91       	pop	r22
    498c:	5f 91       	pop	r21
    498e:	4f 91       	pop	r20
    4990:	3f 91       	pop	r19
    4992:	2f 91       	pop	r18
    4994:	0f 90       	pop	r0
    4996:	0f be       	out	0x3f, r0	; 63
    4998:	0f 90       	pop	r0
    499a:	1f 90       	pop	r1
    499c:	18 95       	reti

0000499e <__vector_17>:
    499e:	1f 92       	push	r1
    49a0:	0f 92       	push	r0
    49a2:	0f b6       	in	r0, 0x3f	; 63
    49a4:	0f 92       	push	r0
    49a6:	11 24       	eor	r1, r1
    49a8:	2f 93       	push	r18
    49aa:	3f 93       	push	r19
    49ac:	4f 93       	push	r20
    49ae:	5f 93       	push	r21
    49b0:	6f 93       	push	r22
    49b2:	7f 93       	push	r23
    49b4:	8f 93       	push	r24
    49b6:	9f 93       	push	r25
    49b8:	af 93       	push	r26
    49ba:	bf 93       	push	r27
    49bc:	ef 93       	push	r30
    49be:	ff 93       	push	r31
    49c0:	e0 91 fd 03 	lds	r30, 0x03FD
    49c4:	f0 91 fe 03 	lds	r31, 0x03FE
    49c8:	30 97       	sbiw	r30, 0x00	; 0
    49ca:	09 f0       	breq	.+2      	; 0x49ce <__vector_17+0x30>
    49cc:	09 95       	icall
    49ce:	ff 91       	pop	r31
    49d0:	ef 91       	pop	r30
    49d2:	bf 91       	pop	r27
    49d4:	af 91       	pop	r26
    49d6:	9f 91       	pop	r25
    49d8:	8f 91       	pop	r24
    49da:	7f 91       	pop	r23
    49dc:	6f 91       	pop	r22
    49de:	5f 91       	pop	r21
    49e0:	4f 91       	pop	r20
    49e2:	3f 91       	pop	r19
    49e4:	2f 91       	pop	r18
    49e6:	0f 90       	pop	r0
    49e8:	0f be       	out	0x3f, r0	; 63
    49ea:	0f 90       	pop	r0
    49ec:	1f 90       	pop	r1
    49ee:	18 95       	reti

000049f0 <__vector_18>:
    49f0:	1f 92       	push	r1
    49f2:	0f 92       	push	r0
    49f4:	0f b6       	in	r0, 0x3f	; 63
    49f6:	0f 92       	push	r0
    49f8:	11 24       	eor	r1, r1
    49fa:	2f 93       	push	r18
    49fc:	3f 93       	push	r19
    49fe:	4f 93       	push	r20
    4a00:	5f 93       	push	r21
    4a02:	6f 93       	push	r22
    4a04:	7f 93       	push	r23
    4a06:	8f 93       	push	r24
    4a08:	9f 93       	push	r25
    4a0a:	af 93       	push	r26
    4a0c:	bf 93       	push	r27
    4a0e:	ef 93       	push	r30
    4a10:	ff 93       	push	r31
    4a12:	e0 91 ff 03 	lds	r30, 0x03FF
    4a16:	f0 91 00 04 	lds	r31, 0x0400
    4a1a:	30 97       	sbiw	r30, 0x00	; 0
    4a1c:	09 f0       	breq	.+2      	; 0x4a20 <__vector_18+0x30>
    4a1e:	09 95       	icall
    4a20:	ff 91       	pop	r31
    4a22:	ef 91       	pop	r30
    4a24:	bf 91       	pop	r27
    4a26:	af 91       	pop	r26
    4a28:	9f 91       	pop	r25
    4a2a:	8f 91       	pop	r24
    4a2c:	7f 91       	pop	r23
    4a2e:	6f 91       	pop	r22
    4a30:	5f 91       	pop	r21
    4a32:	4f 91       	pop	r20
    4a34:	3f 91       	pop	r19
    4a36:	2f 91       	pop	r18
    4a38:	0f 90       	pop	r0
    4a3a:	0f be       	out	0x3f, r0	; 63
    4a3c:	0f 90       	pop	r0
    4a3e:	1f 90       	pop	r1
    4a40:	18 95       	reti

00004a42 <__vector_9>:
    4a42:	1f 92       	push	r1
    4a44:	0f 92       	push	r0
    4a46:	0f b6       	in	r0, 0x3f	; 63
    4a48:	0f 92       	push	r0
    4a4a:	11 24       	eor	r1, r1
    4a4c:	2f 93       	push	r18
    4a4e:	3f 93       	push	r19
    4a50:	4f 93       	push	r20
    4a52:	5f 93       	push	r21
    4a54:	6f 93       	push	r22
    4a56:	7f 93       	push	r23
    4a58:	8f 93       	push	r24
    4a5a:	9f 93       	push	r25
    4a5c:	af 93       	push	r26
    4a5e:	bf 93       	push	r27
    4a60:	ef 93       	push	r30
    4a62:	ff 93       	push	r31
    4a64:	e0 91 ed 03 	lds	r30, 0x03ED
    4a68:	f0 91 ee 03 	lds	r31, 0x03EE
    4a6c:	30 97       	sbiw	r30, 0x00	; 0
    4a6e:	09 f0       	breq	.+2      	; 0x4a72 <__vector_9+0x30>
    4a70:	09 95       	icall
    4a72:	ff 91       	pop	r31
    4a74:	ef 91       	pop	r30
    4a76:	bf 91       	pop	r27
    4a78:	af 91       	pop	r26
    4a7a:	9f 91       	pop	r25
    4a7c:	8f 91       	pop	r24
    4a7e:	7f 91       	pop	r23
    4a80:	6f 91       	pop	r22
    4a82:	5f 91       	pop	r21
    4a84:	4f 91       	pop	r20
    4a86:	3f 91       	pop	r19
    4a88:	2f 91       	pop	r18
    4a8a:	0f 90       	pop	r0
    4a8c:	0f be       	out	0x3f, r0	; 63
    4a8e:	0f 90       	pop	r0
    4a90:	1f 90       	pop	r1
    4a92:	18 95       	reti

00004a94 <__vector_10>:
    4a94:	1f 92       	push	r1
    4a96:	0f 92       	push	r0
    4a98:	0f b6       	in	r0, 0x3f	; 63
    4a9a:	0f 92       	push	r0
    4a9c:	11 24       	eor	r1, r1
    4a9e:	2f 93       	push	r18
    4aa0:	3f 93       	push	r19
    4aa2:	4f 93       	push	r20
    4aa4:	5f 93       	push	r21
    4aa6:	6f 93       	push	r22
    4aa8:	7f 93       	push	r23
    4aaa:	8f 93       	push	r24
    4aac:	9f 93       	push	r25
    4aae:	af 93       	push	r26
    4ab0:	bf 93       	push	r27
    4ab2:	ef 93       	push	r30
    4ab4:	ff 93       	push	r31
    4ab6:	e0 91 ef 03 	lds	r30, 0x03EF
    4aba:	f0 91 f0 03 	lds	r31, 0x03F0
    4abe:	30 97       	sbiw	r30, 0x00	; 0
    4ac0:	09 f0       	breq	.+2      	; 0x4ac4 <__vector_10+0x30>
    4ac2:	09 95       	icall
    4ac4:	ff 91       	pop	r31
    4ac6:	ef 91       	pop	r30
    4ac8:	bf 91       	pop	r27
    4aca:	af 91       	pop	r26
    4acc:	9f 91       	pop	r25
    4ace:	8f 91       	pop	r24
    4ad0:	7f 91       	pop	r23
    4ad2:	6f 91       	pop	r22
    4ad4:	5f 91       	pop	r21
    4ad6:	4f 91       	pop	r20
    4ad8:	3f 91       	pop	r19
    4ada:	2f 91       	pop	r18
    4adc:	0f 90       	pop	r0
    4ade:	0f be       	out	0x3f, r0	; 63
    4ae0:	0f 90       	pop	r0
    4ae2:	1f 90       	pop	r1
    4ae4:	18 95       	reti

00004ae6 <__vector_11>:
    4ae6:	1f 92       	push	r1
    4ae8:	0f 92       	push	r0
    4aea:	0f b6       	in	r0, 0x3f	; 63
    4aec:	0f 92       	push	r0
    4aee:	11 24       	eor	r1, r1
    4af0:	2f 93       	push	r18
    4af2:	3f 93       	push	r19
    4af4:	4f 93       	push	r20
    4af6:	5f 93       	push	r21
    4af8:	6f 93       	push	r22
    4afa:	7f 93       	push	r23
    4afc:	8f 93       	push	r24
    4afe:	9f 93       	push	r25
    4b00:	af 93       	push	r26
    4b02:	bf 93       	push	r27
    4b04:	ef 93       	push	r30
    4b06:	ff 93       	push	r31
    4b08:	e0 91 f1 03 	lds	r30, 0x03F1
    4b0c:	f0 91 f2 03 	lds	r31, 0x03F2
    4b10:	30 97       	sbiw	r30, 0x00	; 0
    4b12:	09 f0       	breq	.+2      	; 0x4b16 <__vector_11+0x30>
    4b14:	09 95       	icall
    4b16:	ff 91       	pop	r31
    4b18:	ef 91       	pop	r30
    4b1a:	bf 91       	pop	r27
    4b1c:	af 91       	pop	r26
    4b1e:	9f 91       	pop	r25
    4b20:	8f 91       	pop	r24
    4b22:	7f 91       	pop	r23
    4b24:	6f 91       	pop	r22
    4b26:	5f 91       	pop	r21
    4b28:	4f 91       	pop	r20
    4b2a:	3f 91       	pop	r19
    4b2c:	2f 91       	pop	r18
    4b2e:	0f 90       	pop	r0
    4b30:	0f be       	out	0x3f, r0	; 63
    4b32:	0f 90       	pop	r0
    4b34:	1f 90       	pop	r1
    4b36:	18 95       	reti

00004b38 <__vector_13>:
    4b38:	1f 92       	push	r1
    4b3a:	0f 92       	push	r0
    4b3c:	0f b6       	in	r0, 0x3f	; 63
    4b3e:	0f 92       	push	r0
    4b40:	11 24       	eor	r1, r1
    4b42:	2f 93       	push	r18
    4b44:	3f 93       	push	r19
    4b46:	4f 93       	push	r20
    4b48:	5f 93       	push	r21
    4b4a:	6f 93       	push	r22
    4b4c:	7f 93       	push	r23
    4b4e:	8f 93       	push	r24
    4b50:	9f 93       	push	r25
    4b52:	af 93       	push	r26
    4b54:	bf 93       	push	r27
    4b56:	ef 93       	push	r30
    4b58:	ff 93       	push	r31
    4b5a:	e0 91 f5 03 	lds	r30, 0x03F5
    4b5e:	f0 91 f6 03 	lds	r31, 0x03F6
    4b62:	30 97       	sbiw	r30, 0x00	; 0
    4b64:	09 f0       	breq	.+2      	; 0x4b68 <__vector_13+0x30>
    4b66:	09 95       	icall
    4b68:	ff 91       	pop	r31
    4b6a:	ef 91       	pop	r30
    4b6c:	bf 91       	pop	r27
    4b6e:	af 91       	pop	r26
    4b70:	9f 91       	pop	r25
    4b72:	8f 91       	pop	r24
    4b74:	7f 91       	pop	r23
    4b76:	6f 91       	pop	r22
    4b78:	5f 91       	pop	r21
    4b7a:	4f 91       	pop	r20
    4b7c:	3f 91       	pop	r19
    4b7e:	2f 91       	pop	r18
    4b80:	0f 90       	pop	r0
    4b82:	0f be       	out	0x3f, r0	; 63
    4b84:	0f 90       	pop	r0
    4b86:	1f 90       	pop	r1
    4b88:	18 95       	reti

00004b8a <__vector_14>:
    4b8a:	1f 92       	push	r1
    4b8c:	0f 92       	push	r0
    4b8e:	0f b6       	in	r0, 0x3f	; 63
    4b90:	0f 92       	push	r0
    4b92:	11 24       	eor	r1, r1
    4b94:	2f 93       	push	r18
    4b96:	3f 93       	push	r19
    4b98:	4f 93       	push	r20
    4b9a:	5f 93       	push	r21
    4b9c:	6f 93       	push	r22
    4b9e:	7f 93       	push	r23
    4ba0:	8f 93       	push	r24
    4ba2:	9f 93       	push	r25
    4ba4:	af 93       	push	r26
    4ba6:	bf 93       	push	r27
    4ba8:	ef 93       	push	r30
    4baa:	ff 93       	push	r31
    4bac:	e0 91 f7 03 	lds	r30, 0x03F7
    4bb0:	f0 91 f8 03 	lds	r31, 0x03F8
    4bb4:	30 97       	sbiw	r30, 0x00	; 0
    4bb6:	09 f0       	breq	.+2      	; 0x4bba <__vector_14+0x30>
    4bb8:	09 95       	icall
    4bba:	ff 91       	pop	r31
    4bbc:	ef 91       	pop	r30
    4bbe:	bf 91       	pop	r27
    4bc0:	af 91       	pop	r26
    4bc2:	9f 91       	pop	r25
    4bc4:	8f 91       	pop	r24
    4bc6:	7f 91       	pop	r23
    4bc8:	6f 91       	pop	r22
    4bca:	5f 91       	pop	r21
    4bcc:	4f 91       	pop	r20
    4bce:	3f 91       	pop	r19
    4bd0:	2f 91       	pop	r18
    4bd2:	0f 90       	pop	r0
    4bd4:	0f be       	out	0x3f, r0	; 63
    4bd6:	0f 90       	pop	r0
    4bd8:	1f 90       	pop	r1
    4bda:	18 95       	reti

00004bdc <__vector_12>:
    4bdc:	1f 92       	push	r1
    4bde:	0f 92       	push	r0
    4be0:	0f b6       	in	r0, 0x3f	; 63
    4be2:	0f 92       	push	r0
    4be4:	11 24       	eor	r1, r1
    4be6:	2f 93       	push	r18
    4be8:	3f 93       	push	r19
    4bea:	4f 93       	push	r20
    4bec:	5f 93       	push	r21
    4bee:	6f 93       	push	r22
    4bf0:	7f 93       	push	r23
    4bf2:	8f 93       	push	r24
    4bf4:	9f 93       	push	r25
    4bf6:	af 93       	push	r26
    4bf8:	bf 93       	push	r27
    4bfa:	ef 93       	push	r30
    4bfc:	ff 93       	push	r31
    4bfe:	e0 91 f3 03 	lds	r30, 0x03F3
    4c02:	f0 91 f4 03 	lds	r31, 0x03F4
    4c06:	30 97       	sbiw	r30, 0x00	; 0
    4c08:	09 f0       	breq	.+2      	; 0x4c0c <__vector_12+0x30>
    4c0a:	09 95       	icall
    4c0c:	ff 91       	pop	r31
    4c0e:	ef 91       	pop	r30
    4c10:	bf 91       	pop	r27
    4c12:	af 91       	pop	r26
    4c14:	9f 91       	pop	r25
    4c16:	8f 91       	pop	r24
    4c18:	7f 91       	pop	r23
    4c1a:	6f 91       	pop	r22
    4c1c:	5f 91       	pop	r21
    4c1e:	4f 91       	pop	r20
    4c20:	3f 91       	pop	r19
    4c22:	2f 91       	pop	r18
    4c24:	0f 90       	pop	r0
    4c26:	0f be       	out	0x3f, r0	; 63
    4c28:	0f 90       	pop	r0
    4c2a:	1f 90       	pop	r1
    4c2c:	18 95       	reti

00004c2e <__vector_15>:
    4c2e:	1f 92       	push	r1
    4c30:	0f 92       	push	r0
    4c32:	0f b6       	in	r0, 0x3f	; 63
    4c34:	0f 92       	push	r0
    4c36:	11 24       	eor	r1, r1
    4c38:	2f 93       	push	r18
    4c3a:	3f 93       	push	r19
    4c3c:	4f 93       	push	r20
    4c3e:	5f 93       	push	r21
    4c40:	6f 93       	push	r22
    4c42:	7f 93       	push	r23
    4c44:	8f 93       	push	r24
    4c46:	9f 93       	push	r25
    4c48:	af 93       	push	r26
    4c4a:	bf 93       	push	r27
    4c4c:	ef 93       	push	r30
    4c4e:	ff 93       	push	r31
    4c50:	e0 91 f9 03 	lds	r30, 0x03F9
    4c54:	f0 91 fa 03 	lds	r31, 0x03FA
    4c58:	30 97       	sbiw	r30, 0x00	; 0
    4c5a:	09 f0       	breq	.+2      	; 0x4c5e <__vector_15+0x30>
    4c5c:	09 95       	icall
    4c5e:	ff 91       	pop	r31
    4c60:	ef 91       	pop	r30
    4c62:	bf 91       	pop	r27
    4c64:	af 91       	pop	r26
    4c66:	9f 91       	pop	r25
    4c68:	8f 91       	pop	r24
    4c6a:	7f 91       	pop	r23
    4c6c:	6f 91       	pop	r22
    4c6e:	5f 91       	pop	r21
    4c70:	4f 91       	pop	r20
    4c72:	3f 91       	pop	r19
    4c74:	2f 91       	pop	r18
    4c76:	0f 90       	pop	r0
    4c78:	0f be       	out	0x3f, r0	; 63
    4c7a:	0f 90       	pop	r0
    4c7c:	1f 90       	pop	r1
    4c7e:	18 95       	reti

00004c80 <__vector_4>:
    4c80:	1f 92       	push	r1
    4c82:	0f 92       	push	r0
    4c84:	0f b6       	in	r0, 0x3f	; 63
    4c86:	0f 92       	push	r0
    4c88:	11 24       	eor	r1, r1
    4c8a:	2f 93       	push	r18
    4c8c:	3f 93       	push	r19
    4c8e:	4f 93       	push	r20
    4c90:	5f 93       	push	r21
    4c92:	6f 93       	push	r22
    4c94:	7f 93       	push	r23
    4c96:	8f 93       	push	r24
    4c98:	9f 93       	push	r25
    4c9a:	af 93       	push	r26
    4c9c:	bf 93       	push	r27
    4c9e:	ef 93       	push	r30
    4ca0:	ff 93       	push	r31
    4ca2:	e0 91 e3 03 	lds	r30, 0x03E3
    4ca6:	f0 91 e4 03 	lds	r31, 0x03E4
    4caa:	30 97       	sbiw	r30, 0x00	; 0
    4cac:	09 f0       	breq	.+2      	; 0x4cb0 <__vector_4+0x30>
    4cae:	09 95       	icall
    4cb0:	ff 91       	pop	r31
    4cb2:	ef 91       	pop	r30
    4cb4:	bf 91       	pop	r27
    4cb6:	af 91       	pop	r26
    4cb8:	9f 91       	pop	r25
    4cba:	8f 91       	pop	r24
    4cbc:	7f 91       	pop	r23
    4cbe:	6f 91       	pop	r22
    4cc0:	5f 91       	pop	r21
    4cc2:	4f 91       	pop	r20
    4cc4:	3f 91       	pop	r19
    4cc6:	2f 91       	pop	r18
    4cc8:	0f 90       	pop	r0
    4cca:	0f be       	out	0x3f, r0	; 63
    4ccc:	0f 90       	pop	r0
    4cce:	1f 90       	pop	r1
    4cd0:	18 95       	reti

00004cd2 <__vector_5>:
    4cd2:	1f 92       	push	r1
    4cd4:	0f 92       	push	r0
    4cd6:	0f b6       	in	r0, 0x3f	; 63
    4cd8:	0f 92       	push	r0
    4cda:	11 24       	eor	r1, r1
    4cdc:	2f 93       	push	r18
    4cde:	3f 93       	push	r19
    4ce0:	4f 93       	push	r20
    4ce2:	5f 93       	push	r21
    4ce4:	6f 93       	push	r22
    4ce6:	7f 93       	push	r23
    4ce8:	8f 93       	push	r24
    4cea:	9f 93       	push	r25
    4cec:	af 93       	push	r26
    4cee:	bf 93       	push	r27
    4cf0:	ef 93       	push	r30
    4cf2:	ff 93       	push	r31
    4cf4:	e0 91 e5 03 	lds	r30, 0x03E5
    4cf8:	f0 91 e6 03 	lds	r31, 0x03E6
    4cfc:	30 97       	sbiw	r30, 0x00	; 0
    4cfe:	09 f0       	breq	.+2      	; 0x4d02 <__vector_5+0x30>
    4d00:	09 95       	icall
    4d02:	ff 91       	pop	r31
    4d04:	ef 91       	pop	r30
    4d06:	bf 91       	pop	r27
    4d08:	af 91       	pop	r26
    4d0a:	9f 91       	pop	r25
    4d0c:	8f 91       	pop	r24
    4d0e:	7f 91       	pop	r23
    4d10:	6f 91       	pop	r22
    4d12:	5f 91       	pop	r21
    4d14:	4f 91       	pop	r20
    4d16:	3f 91       	pop	r19
    4d18:	2f 91       	pop	r18
    4d1a:	0f 90       	pop	r0
    4d1c:	0f be       	out	0x3f, r0	; 63
    4d1e:	0f 90       	pop	r0
    4d20:	1f 90       	pop	r1
    4d22:	18 95       	reti

00004d24 <__vector_6>:
    4d24:	1f 92       	push	r1
    4d26:	0f 92       	push	r0
    4d28:	0f b6       	in	r0, 0x3f	; 63
    4d2a:	0f 92       	push	r0
    4d2c:	11 24       	eor	r1, r1
    4d2e:	2f 93       	push	r18
    4d30:	3f 93       	push	r19
    4d32:	4f 93       	push	r20
    4d34:	5f 93       	push	r21
    4d36:	6f 93       	push	r22
    4d38:	7f 93       	push	r23
    4d3a:	8f 93       	push	r24
    4d3c:	9f 93       	push	r25
    4d3e:	af 93       	push	r26
    4d40:	bf 93       	push	r27
    4d42:	ef 93       	push	r30
    4d44:	ff 93       	push	r31
    4d46:	e0 91 e7 03 	lds	r30, 0x03E7
    4d4a:	f0 91 e8 03 	lds	r31, 0x03E8
    4d4e:	30 97       	sbiw	r30, 0x00	; 0
    4d50:	09 f0       	breq	.+2      	; 0x4d54 <__vector_6+0x30>
    4d52:	09 95       	icall
    4d54:	ff 91       	pop	r31
    4d56:	ef 91       	pop	r30
    4d58:	bf 91       	pop	r27
    4d5a:	af 91       	pop	r26
    4d5c:	9f 91       	pop	r25
    4d5e:	8f 91       	pop	r24
    4d60:	7f 91       	pop	r23
    4d62:	6f 91       	pop	r22
    4d64:	5f 91       	pop	r21
    4d66:	4f 91       	pop	r20
    4d68:	3f 91       	pop	r19
    4d6a:	2f 91       	pop	r18
    4d6c:	0f 90       	pop	r0
    4d6e:	0f be       	out	0x3f, r0	; 63
    4d70:	0f 90       	pop	r0
    4d72:	1f 90       	pop	r1
    4d74:	18 95       	reti

00004d76 <__vector_7>:
    4d76:	1f 92       	push	r1
    4d78:	0f 92       	push	r0
    4d7a:	0f b6       	in	r0, 0x3f	; 63
    4d7c:	0f 92       	push	r0
    4d7e:	11 24       	eor	r1, r1
    4d80:	2f 93       	push	r18
    4d82:	3f 93       	push	r19
    4d84:	4f 93       	push	r20
    4d86:	5f 93       	push	r21
    4d88:	6f 93       	push	r22
    4d8a:	7f 93       	push	r23
    4d8c:	8f 93       	push	r24
    4d8e:	9f 93       	push	r25
    4d90:	af 93       	push	r26
    4d92:	bf 93       	push	r27
    4d94:	ef 93       	push	r30
    4d96:	ff 93       	push	r31
    4d98:	e0 91 e9 03 	lds	r30, 0x03E9
    4d9c:	f0 91 ea 03 	lds	r31, 0x03EA
    4da0:	30 97       	sbiw	r30, 0x00	; 0
    4da2:	09 f0       	breq	.+2      	; 0x4da6 <__vector_7+0x30>
    4da4:	09 95       	icall
    4da6:	ff 91       	pop	r31
    4da8:	ef 91       	pop	r30
    4daa:	bf 91       	pop	r27
    4dac:	af 91       	pop	r26
    4dae:	9f 91       	pop	r25
    4db0:	8f 91       	pop	r24
    4db2:	7f 91       	pop	r23
    4db4:	6f 91       	pop	r22
    4db6:	5f 91       	pop	r21
    4db8:	4f 91       	pop	r20
    4dba:	3f 91       	pop	r19
    4dbc:	2f 91       	pop	r18
    4dbe:	0f 90       	pop	r0
    4dc0:	0f be       	out	0x3f, r0	; 63
    4dc2:	0f 90       	pop	r0
    4dc4:	1f 90       	pop	r1
    4dc6:	18 95       	reti

00004dc8 <ISR_attach>:
    4dc8:	e8 2f       	mov	r30, r24
    4dca:	80 32       	cpi	r24, 0x20	; 32
    4dcc:	68 f4       	brcc	.+26     	; 0x4de8 <ISR_attach+0x20>
    4dce:	80 51       	subi	r24, 0x10	; 16
    4dd0:	83 30       	cpi	r24, 0x03	; 3
    4dd2:	50 f0       	brcs	.+20     	; 0x4de8 <ISR_attach+0x20>
    4dd4:	f0 e0       	ldi	r31, 0x00	; 0
    4dd6:	ee 0f       	add	r30, r30
    4dd8:	ff 1f       	adc	r31, r31
    4dda:	e5 52       	subi	r30, 0x25	; 37
    4ddc:	fc 4f       	sbci	r31, 0xFC	; 252
    4dde:	20 81       	ld	r18, Z
    4de0:	31 81       	ldd	r19, Z+1	; 0x01
    4de2:	71 83       	std	Z+1, r23	; 0x01
    4de4:	60 83       	st	Z, r22
    4de6:	02 c0       	rjmp	.+4      	; 0x4dec <ISR_attach+0x24>
    4de8:	20 e0       	ldi	r18, 0x00	; 0
    4dea:	30 e0       	ldi	r19, 0x00	; 0
    4dec:	c9 01       	movw	r24, r18
    4dee:	08 95       	ret

00004df0 <ISR_open>:
    4df0:	80 e1       	ldi	r24, 0x10	; 16
    4df2:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    4df6:	88 23       	and	r24, r24
    4df8:	61 f4       	brne	.+24     	; 0x4e12 <ISR_open+0x22>
    4dfa:	eb ed       	ldi	r30, 0xDB	; 219
    4dfc:	f3 e0       	ldi	r31, 0x03	; 3
    4dfe:	11 92       	st	Z+, r1
    4e00:	11 92       	st	Z+, r1
    4e02:	84 e0       	ldi	r24, 0x04	; 4
    4e04:	eb 31       	cpi	r30, 0x1B	; 27
    4e06:	f8 07       	cpc	r31, r24
    4e08:	d1 f7       	brne	.-12     	; 0x4dfe <ISR_open+0xe>
    4e0a:	80 e1       	ldi	r24, 0x10	; 16
    4e0c:	61 e0       	ldi	r22, 0x01	; 1
    4e0e:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    4e12:	80 e1       	ldi	r24, 0x10	; 16
    4e14:	91 e0       	ldi	r25, 0x01	; 1
    4e16:	08 95       	ret

00004e18 <__LCD_init>:
    4e18:	23 9a       	sbi	0x04, 3	; 4
    4e1a:	08 95       	ret

00004e1c <__LCD_putchar>:
    4e1c:	ff 92       	push	r15
    4e1e:	0f 93       	push	r16
    4e20:	1f 93       	push	r17
    4e22:	cf 93       	push	r28
    4e24:	df 93       	push	r29
    4e26:	f8 2e       	mov	r15, r24
    4e28:	8a e0       	ldi	r24, 0x0A	; 10
    4e2a:	f8 16       	cp	r15, r24
    4e2c:	b1 f0       	breq	.+44     	; 0x4e5a <__LCD_putchar+0x3e>
    4e2e:	8f 15       	cp	r24, r15
    4e30:	48 f0       	brcs	.+18     	; 0x4e44 <__LCD_putchar+0x28>
    4e32:	e8 e0       	ldi	r30, 0x08	; 8
    4e34:	fe 16       	cp	r15, r30
    4e36:	b9 f1       	breq	.+110    	; 0x4ea6 <__LCD_putchar+0x8a>
    4e38:	ef 15       	cp	r30, r15
    4e3a:	38 f1       	brcs	.+78     	; 0x4e8a <__LCD_putchar+0x6e>
    4e3c:	f7 e0       	ldi	r31, 0x07	; 7
    4e3e:	ff 16       	cp	r15, r31
    4e40:	51 f4       	brne	.+20     	; 0x4e56 <__LCD_putchar+0x3a>
    4e42:	3b c0       	rjmp	.+118    	; 0x4eba <__LCD_putchar+0x9e>
    4e44:	8d e0       	ldi	r24, 0x0D	; 13
    4e46:	f8 16       	cp	r15, r24
    4e48:	59 f0       	breq	.+22     	; 0x4e60 <__LCD_putchar+0x44>
    4e4a:	eb e1       	ldi	r30, 0x1B	; 27
    4e4c:	fe 16       	cp	r15, r30
    4e4e:	89 f0       	breq	.+34     	; 0x4e72 <__LCD_putchar+0x56>
    4e50:	fc e0       	ldi	r31, 0x0C	; 12
    4e52:	ff 16       	cp	r15, r31
    4e54:	41 f0       	breq	.+16     	; 0x4e66 <__LCD_putchar+0x4a>
    4e56:	01 e0       	ldi	r16, 0x01	; 1
    4e58:	41 c0       	rjmp	.+130    	; 0x4edc <__LCD_putchar+0xc0>
    4e5a:	10 92 54 07 	sts	0x0754, r1
    4e5e:	03 c0       	rjmp	.+6      	; 0x4e66 <__LCD_putchar+0x4a>
    4e60:	10 92 54 07 	sts	0x0754, r1
    4e64:	3a c0       	rjmp	.+116    	; 0x4eda <__LCD_putchar+0xbe>
    4e66:	80 91 55 07 	lds	r24, 0x0755
    4e6a:	81 50       	subi	r24, 0x01	; 1
    4e6c:	80 93 55 07 	sts	0x0755, r24
    4e70:	34 c0       	rjmp	.+104    	; 0x4eda <__LCD_putchar+0xbe>
    4e72:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <LCD_clear>
    4e76:	14 c0       	rjmp	.+40     	; 0x4ea0 <__LCD_putchar+0x84>
    4e78:	80 e0       	ldi	r24, 0x00	; 0
    4e7a:	61 e0       	ldi	r22, 0x01	; 1
    4e7c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    4e80:	80 91 54 07 	lds	r24, 0x0754
    4e84:	8f 5f       	subi	r24, 0xFF	; 255
    4e86:	80 93 54 07 	sts	0x0754, r24
    4e8a:	80 91 54 07 	lds	r24, 0x0754
    4e8e:	87 ff       	sbrs	r24, 7
    4e90:	f3 cf       	rjmp	.-26     	; 0x4e78 <__LCD_putchar+0x5c>
    4e92:	10 92 54 07 	sts	0x0754, r1
    4e96:	80 91 55 07 	lds	r24, 0x0755
    4e9a:	81 50       	subi	r24, 0x01	; 1
    4e9c:	80 93 55 07 	sts	0x0755, r24
    4ea0:	00 e0       	ldi	r16, 0x00	; 0
    4ea2:	11 e0       	ldi	r17, 0x01	; 1
    4ea4:	1c c0       	rjmp	.+56     	; 0x4ede <__LCD_putchar+0xc2>
    4ea6:	80 91 54 07 	lds	r24, 0x0754
    4eaa:	88 23       	and	r24, r24
    4eac:	b1 f0       	breq	.+44     	; 0x4eda <__LCD_putchar+0xbe>
    4eae:	80 91 54 07 	lds	r24, 0x0754
    4eb2:	86 50       	subi	r24, 0x06	; 6
    4eb4:	80 93 54 07 	sts	0x0754, r24
    4eb8:	10 c0       	rjmp	.+32     	; 0x4eda <__LCD_putchar+0xbe>
    4eba:	81 e0       	ldi	r24, 0x01	; 1
    4ebc:	0e 94 8a 1e 	call	0x3d14	; 0x3d14 <SPKR_open>
    4ec0:	64 ef       	ldi	r22, 0xF4	; 244
    4ec2:	71 e0       	ldi	r23, 0x01	; 1
    4ec4:	80 e0       	ldi	r24, 0x00	; 0
    4ec6:	90 e0       	ldi	r25, 0x00	; 0
    4ec8:	4d e7       	ldi	r20, 0x7D	; 125
    4eca:	50 e0       	ldi	r21, 0x00	; 0
    4ecc:	24 e6       	ldi	r18, 0x64	; 100
    4ece:	30 e0       	ldi	r19, 0x00	; 0
    4ed0:	0e 94 28 29 	call	0x5250	; 0x5250 <SPKR_play_beep>
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
    4ed6:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <SPKR_close>
    4eda:	00 e0       	ldi	r16, 0x00	; 0
    4edc:	10 e0       	ldi	r17, 0x00	; 0
    4ede:	80 91 55 07 	lds	r24, 0x0755
    4ee2:	60 91 54 07 	lds	r22, 0x0754
    4ee6:	0e 94 44 1d 	call	0x3a88	; 0x3a88 <LCD_set_PGC_addr>
    4eea:	00 23       	and	r16, r16
    4eec:	51 f1       	breq	.+84     	; 0x4f42 <__LCD_putchar+0x126>
    4eee:	85 e0       	ldi	r24, 0x05	; 5
    4ef0:	f8 9e       	mul	r15, r24
    4ef2:	c0 01       	movw	r24, r0
    4ef4:	11 24       	eor	r1, r1
    4ef6:	ec 01       	movw	r28, r24
    4ef8:	c3 55       	subi	r28, 0x53	; 83
    4efa:	df 4f       	sbci	r29, 0xFF	; 255
    4efc:	8c 01       	movw	r16, r24
    4efe:	0e 54       	subi	r16, 0x4E	; 78
    4f00:	1f 4f       	sbci	r17, 0xFF	; 255
    4f02:	fe 01       	movw	r30, r28
    4f04:	84 91       	lpm	r24, Z+
    4f06:	61 e0       	ldi	r22, 0x01	; 1
    4f08:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    4f0c:	21 96       	adiw	r28, 0x01	; 1
    4f0e:	c0 17       	cp	r28, r16
    4f10:	d1 07       	cpc	r29, r17
    4f12:	b9 f7       	brne	.-18     	; 0x4f02 <__LCD_putchar+0xe6>
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	61 e0       	ldi	r22, 0x01	; 1
    4f18:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <LCD_write>
    4f1c:	80 91 54 07 	lds	r24, 0x0754
    4f20:	8a 5f       	subi	r24, 0xFA	; 250
    4f22:	80 93 54 07 	sts	0x0754, r24
    4f26:	80 91 54 07 	lds	r24, 0x0754
    4f2a:	90 e0       	ldi	r25, 0x00	; 0
    4f2c:	8c 37       	cpi	r24, 0x7C	; 124
    4f2e:	91 05       	cpc	r25, r1
    4f30:	3c f0       	brlt	.+14     	; 0x4f40 <__LCD_putchar+0x124>
    4f32:	10 92 54 07 	sts	0x0754, r1
    4f36:	80 91 55 07 	lds	r24, 0x0755
    4f3a:	81 50       	subi	r24, 0x01	; 1
    4f3c:	80 93 55 07 	sts	0x0755, r24
    4f40:	11 e0       	ldi	r17, 0x01	; 1
    4f42:	80 91 55 07 	lds	r24, 0x0755
    4f46:	83 70       	andi	r24, 0x03	; 3
    4f48:	80 93 55 07 	sts	0x0755, r24
    4f4c:	11 30       	cpi	r17, 0x01	; 1
    4f4e:	59 f4       	brne	.+22     	; 0x4f66 <__LCD_putchar+0x14a>
    4f50:	80 91 56 07 	lds	r24, 0x0756
    4f54:	81 30       	cpi	r24, 0x01	; 1
    4f56:	39 f4       	brne	.+14     	; 0x4f66 <__LCD_putchar+0x14a>
    4f58:	e0 91 57 07 	lds	r30, 0x0757
    4f5c:	f0 91 58 07 	lds	r31, 0x0758
    4f60:	30 97       	sbiw	r30, 0x00	; 0
    4f62:	09 f0       	breq	.+2      	; 0x4f66 <__LCD_putchar+0x14a>
    4f64:	09 95       	icall
    4f66:	80 e0       	ldi	r24, 0x00	; 0
    4f68:	90 e0       	ldi	r25, 0x00	; 0
    4f6a:	df 91       	pop	r29
    4f6c:	cf 91       	pop	r28
    4f6e:	1f 91       	pop	r17
    4f70:	0f 91       	pop	r16
    4f72:	ff 90       	pop	r15
    4f74:	08 95       	ret

00004f76 <__LED_clr_pattern>:
    4f76:	85 fd       	sbrc	r24, 5
    4f78:	5d 98       	cbi	0x0b, 5	; 11
    4f7a:	86 fd       	sbrc	r24, 6
    4f7c:	5e 98       	cbi	0x0b, 6	; 11
    4f7e:	08 95       	ret

00004f80 <__LED_init>:
    4f80:	55 9a       	sbi	0x0a, 5	; 10
    4f82:	56 9a       	sbi	0x0a, 6	; 10
    4f84:	08 95       	ret

00004f86 <__LED_set_pattern>:
    4f86:	85 fd       	sbrc	r24, 5
    4f88:	5d 9a       	sbi	0x0b, 5	; 11
    4f8a:	86 fd       	sbrc	r24, 6
    4f8c:	5e 9a       	sbi	0x0b, 6	; 11
    4f8e:	08 95       	ret

00004f90 <ATMEGA_open>:
    4f90:	80 e0       	ldi	r24, 0x00	; 0
    4f92:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    4f96:	88 23       	and	r24, r24
    4f98:	51 f4       	brne	.+20     	; 0x4fae <ATMEGA_open+0x1e>
    4f9a:	f8 94       	cli
    4f9c:	0e 94 bf 2a 	call	0x557e	; 0x557e <__ATMEGA_init>
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	0e 94 da 27 	call	0x4fb4	; 0x4fb4 <ATMEGA_set_clk_mode>
    4fa6:	80 e0       	ldi	r24, 0x00	; 0
    4fa8:	61 e0       	ldi	r22, 0x01	; 1
    4faa:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    4fae:	80 e0       	ldi	r24, 0x00	; 0
    4fb0:	91 e0       	ldi	r25, 0x01	; 1
    4fb2:	08 95       	ret

00004fb4 <ATMEGA_set_clk_mode>:
    4fb4:	81 30       	cpi	r24, 0x01	; 1
    4fb6:	49 f0       	breq	.+18     	; 0x4fca <ATMEGA_set_clk_mode+0x16>
    4fb8:	f8 94       	cli
    4fba:	81 30       	cpi	r24, 0x01	; 1
    4fbc:	20 f1       	brcs	.+72     	; 0x5006 <ATMEGA_set_clk_mode+0x52>
    4fbe:	82 30       	cpi	r24, 0x02	; 2
    4fc0:	b1 f0       	breq	.+44     	; 0x4fee <ATMEGA_set_clk_mode+0x3a>
    4fc2:	83 30       	cpi	r24, 0x03	; 3
    4fc4:	09 f0       	breq	.+2      	; 0x4fc8 <ATMEGA_set_clk_mode+0x14>
    4fc6:	45 c0       	rjmp	.+138    	; 0x5052 <ATMEGA_set_clk_mode+0x9e>
    4fc8:	17 c0       	rjmp	.+46     	; 0x4ff8 <ATMEGA_set_clk_mode+0x44>
    4fca:	2c 9a       	sbi	0x05, 4	; 5
    4fcc:	80 e8       	ldi	r24, 0x80	; 128
    4fce:	80 93 61 00 	sts	0x0061, r24
    4fd2:	10 92 61 00 	sts	0x0061, r1
    4fd6:	80 e0       	ldi	r24, 0x00	; 0
    4fd8:	90 e0       	ldi	r25, 0x00	; 0
    4fda:	00 00       	nop
    4fdc:	01 96       	adiw	r24, 0x01	; 1
    4fde:	88 32       	cpi	r24, 0x28	; 40
    4fe0:	91 05       	cpc	r25, r1
    4fe2:	d9 f7       	brne	.-10     	; 0x4fda <ATMEGA_set_clk_mode+0x26>
    4fe4:	10 92 68 00 	sts	0x0068, r1
    4fe8:	10 92 6b 00 	sts	0x006B, r1
    4fec:	08 95       	ret
    4fee:	80 e8       	ldi	r24, 0x80	; 128
    4ff0:	80 93 61 00 	sts	0x0061, r24
    4ff4:	83 e0       	ldi	r24, 0x03	; 3
    4ff6:	04 c0       	rjmp	.+8      	; 0x5000 <ATMEGA_set_clk_mode+0x4c>
    4ff8:	80 e8       	ldi	r24, 0x80	; 128
    4ffa:	80 93 61 00 	sts	0x0061, r24
    4ffe:	88 e0       	ldi	r24, 0x08	; 8
    5000:	80 93 61 00 	sts	0x0061, r24
    5004:	28 c0       	rjmp	.+80     	; 0x5056 <ATMEGA_set_clk_mode+0xa2>
    5006:	80 e0       	ldi	r24, 0x00	; 0
    5008:	90 e0       	ldi	r25, 0x00	; 0
    500a:	00 00       	nop
    500c:	01 96       	adiw	r24, 0x01	; 1
    500e:	2d e6       	ldi	r18, 0x6D	; 109
    5010:	80 36       	cpi	r24, 0x60	; 96
    5012:	92 07       	cpc	r25, r18
    5014:	d1 f7       	brne	.-12     	; 0x500a <ATMEGA_set_clk_mode+0x56>
    5016:	2c 98       	cbi	0x05, 4	; 5
    5018:	80 e0       	ldi	r24, 0x00	; 0
    501a:	90 e0       	ldi	r25, 0x00	; 0
    501c:	00 00       	nop
    501e:	01 96       	adiw	r24, 0x01	; 1
    5020:	2d e6       	ldi	r18, 0x6D	; 109
    5022:	80 36       	cpi	r24, 0x60	; 96
    5024:	92 07       	cpc	r25, r18
    5026:	d1 f7       	brne	.-12     	; 0x501c <ATMEGA_set_clk_mode+0x68>
    5028:	10 92 7a 00 	sts	0x007A, r1
    502c:	8f ef       	ldi	r24, 0xFF	; 255
    502e:	80 93 64 00 	sts	0x0064, r24
    5032:	80 91 68 00 	lds	r24, 0x0068
    5036:	81 60       	ori	r24, 0x01	; 1
    5038:	80 93 68 00 	sts	0x0068, r24
    503c:	80 91 6b 00 	lds	r24, 0x006B
    5040:	84 60       	ori	r24, 0x04	; 4
    5042:	80 93 6b 00 	sts	0x006B, r24
    5046:	78 94       	sei
    5048:	83 b7       	in	r24, 0x33	; 51
    504a:	81 60       	ori	r24, 0x01	; 1
    504c:	83 bf       	out	0x33, r24	; 51
    504e:	88 95       	sleep
    5050:	08 95       	ret
    5052:	82 30       	cpi	r24, 0x02	; 2
    5054:	08 f0       	brcs	.+2      	; 0x5058 <ATMEGA_set_clk_mode+0xa4>
    5056:	78 94       	sei
    5058:	08 95       	ret

0000505a <SPI_open>:
    505a:	0f 93       	push	r16
    505c:	1f 93       	push	r17
    505e:	0e 94 eb 2a 	call	0x55d6	; 0x55d6 <__SPI_init>
    5062:	80 e0       	ldi	r24, 0x00	; 0
    5064:	6a ed       	ldi	r22, 0xDA	; 218
    5066:	7a e2       	ldi	r23, 0x2A	; 42
    5068:	0e 94 78 28 	call	0x50f0	; 0x50f0 <SPI_set_config_func>
    506c:	81 e0       	ldi	r24, 0x01	; 1
    506e:	62 ed       	ldi	r22, 0xD2	; 210
    5070:	7a e2       	ldi	r23, 0x2A	; 42
    5072:	0e 94 78 28 	call	0x50f0	; 0x50f0 <SPI_set_config_func>
    5076:	82 e0       	ldi	r24, 0x02	; 2
    5078:	6a ec       	ldi	r22, 0xCA	; 202
    507a:	7a e2       	ldi	r23, 0x2A	; 42
    507c:	0e 94 78 28 	call	0x50f0	; 0x50f0 <SPI_set_config_func>
    5080:	86 e0       	ldi	r24, 0x06	; 6
    5082:	62 ee       	ldi	r22, 0xE2	; 226
    5084:	7a e2       	ldi	r23, 0x2A	; 42
    5086:	0e 94 78 28 	call	0x50f0	; 0x50f0 <SPI_set_config_func>
    508a:	02 ec       	ldi	r16, 0xC2	; 194
    508c:	1a e2       	ldi	r17, 0x2A	; 42
    508e:	83 e0       	ldi	r24, 0x03	; 3
    5090:	b8 01       	movw	r22, r16
    5092:	0e 94 78 28 	call	0x50f0	; 0x50f0 <SPI_set_config_func>
    5096:	84 e0       	ldi	r24, 0x04	; 4
    5098:	b8 01       	movw	r22, r16
    509a:	0e 94 78 28 	call	0x50f0	; 0x50f0 <SPI_set_config_func>
    509e:	85 e0       	ldi	r24, 0x05	; 5
    50a0:	b8 01       	movw	r22, r16
    50a2:	0e 94 78 28 	call	0x50f0	; 0x50f0 <SPI_set_config_func>
    50a6:	87 e0       	ldi	r24, 0x07	; 7
    50a8:	b8 01       	movw	r22, r16
    50aa:	0e 94 78 28 	call	0x50f0	; 0x50f0 <SPI_set_config_func>
    50ae:	82 e0       	ldi	r24, 0x02	; 2
    50b0:	61 e0       	ldi	r22, 0x01	; 1
    50b2:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    50b6:	8f ef       	ldi	r24, 0xFF	; 255
    50b8:	80 93 59 07 	sts	0x0759, r24
    50bc:	87 e0       	ldi	r24, 0x07	; 7
    50be:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <SPI_set_slave_addr>
    50c2:	82 e0       	ldi	r24, 0x02	; 2
    50c4:	91 e0       	ldi	r25, 0x01	; 1
    50c6:	1f 91       	pop	r17
    50c8:	0f 91       	pop	r16
    50ca:	08 95       	ret

000050cc <SPI_receive>:
    50cc:	1f 93       	push	r17
    50ce:	16 2f       	mov	r17, r22
    50d0:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <SPI_set_slave_addr>
    50d4:	82 e0       	ldi	r24, 0x02	; 2
    50d6:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    50da:	81 30       	cpi	r24, 0x01	; 1
    50dc:	11 f0       	breq	.+4      	; 0x50e2 <SPI_receive+0x16>
    50de:	80 e0       	ldi	r24, 0x00	; 0
    50e0:	05 c0       	rjmp	.+10     	; 0x50ec <SPI_receive+0x20>
    50e2:	1e bd       	out	0x2e, r17	; 46
    50e4:	0d b4       	in	r0, 0x2d	; 45
    50e6:	07 fe       	sbrs	r0, 7
    50e8:	fd cf       	rjmp	.-6      	; 0x50e4 <SPI_receive+0x18>
    50ea:	8e b5       	in	r24, 0x2e	; 46
    50ec:	1f 91       	pop	r17
    50ee:	08 95       	ret

000050f0 <SPI_set_config_func>:
    50f0:	e8 2f       	mov	r30, r24
    50f2:	f0 e0       	ldi	r31, 0x00	; 0
    50f4:	ee 0f       	add	r30, r30
    50f6:	ff 1f       	adc	r31, r31
    50f8:	e5 5e       	subi	r30, 0xE5	; 229
    50fa:	fb 4f       	sbci	r31, 0xFB	; 251
    50fc:	71 83       	std	Z+1, r23	; 0x01
    50fe:	60 83       	st	Z, r22
    5100:	08 95       	ret

00005102 <__SPKR_TIMER1_COMPA_vect>:
    5102:	0e 94 84 28 	call	0x5108	; 0x5108 <SPKR_clk>
    5106:	08 95       	ret

00005108 <SPKR_clk>:
    5108:	80 91 2d 04 	lds	r24, 0x042D
    510c:	90 91 2e 04 	lds	r25, 0x042E
    5110:	a0 91 2f 04 	lds	r26, 0x042F
    5114:	b0 91 30 04 	lds	r27, 0x0430
    5118:	20 91 31 04 	lds	r18, 0x0431
    511c:	30 91 32 04 	lds	r19, 0x0432
    5120:	40 91 33 04 	lds	r20, 0x0433
    5124:	50 91 34 04 	lds	r21, 0x0434
    5128:	28 0f       	add	r18, r24
    512a:	39 1f       	adc	r19, r25
    512c:	4a 1f       	adc	r20, r26
    512e:	5b 1f       	adc	r21, r27
    5130:	20 93 2d 04 	sts	0x042D, r18
    5134:	30 93 2e 04 	sts	0x042E, r19
    5138:	40 93 2f 04 	sts	0x042F, r20
    513c:	50 93 30 04 	sts	0x0430, r21
    5140:	80 91 2d 04 	lds	r24, 0x042D
    5144:	90 91 2e 04 	lds	r25, 0x042E
    5148:	a0 91 2f 04 	lds	r26, 0x042F
    514c:	b0 91 30 04 	lds	r27, 0x0430
    5150:	88 51       	subi	r24, 0x18	; 24
    5152:	96 4f       	sbci	r25, 0xF6	; 246
    5154:	a0 40       	sbci	r26, 0x00	; 0
    5156:	b0 40       	sbci	r27, 0x00	; 0
    5158:	bc f0       	brlt	.+46     	; 0x5188 <SPKR_clk+0x80>
    515a:	8b b1       	in	r24, 0x0b	; 11
    515c:	80 58       	subi	r24, 0x80	; 128
    515e:	8b b9       	out	0x0b, r24	; 11
    5160:	80 91 2d 04 	lds	r24, 0x042D
    5164:	90 91 2e 04 	lds	r25, 0x042E
    5168:	a0 91 2f 04 	lds	r26, 0x042F
    516c:	b0 91 30 04 	lds	r27, 0x0430
    5170:	88 51       	subi	r24, 0x18	; 24
    5172:	96 4f       	sbci	r25, 0xF6	; 246
    5174:	a0 40       	sbci	r26, 0x00	; 0
    5176:	b0 40       	sbci	r27, 0x00	; 0
    5178:	80 93 2d 04 	sts	0x042D, r24
    517c:	90 93 2e 04 	sts	0x042E, r25
    5180:	a0 93 2f 04 	sts	0x042F, r26
    5184:	b0 93 30 04 	sts	0x0430, r27
    5188:	08 95       	ret

0000518a <__SPKR_close_beep_mode>:
    518a:	8a e0       	ldi	r24, 0x0A	; 10
    518c:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    5190:	81 30       	cpi	r24, 0x01	; 1
    5192:	41 f4       	brne	.+16     	; 0x51a4 <__SPKR_close_beep_mode+0x1a>
    5194:	0e 94 09 2b 	call	0x5612	; 0x5612 <__SPKR_close>
    5198:	10 92 2c 04 	sts	0x042C, r1
    519c:	8a e0       	ldi	r24, 0x0A	; 10
    519e:	60 e0       	ldi	r22, 0x00	; 0
    51a0:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    51a4:	08 95       	ret

000051a6 <__SPKR_close_tone_mode>:
    51a6:	89 e0       	ldi	r24, 0x09	; 9
    51a8:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    51ac:	81 30       	cpi	r24, 0x01	; 1
    51ae:	d9 f4       	brne	.+54     	; 0x51e6 <__SPKR_close_tone_mode+0x40>
    51b0:	80 91 2b 04 	lds	r24, 0x042B
    51b4:	88 23       	and	r24, r24
    51b6:	11 f0       	breq	.+4      	; 0x51bc <__SPKR_close_tone_mode+0x16>
    51b8:	0e 94 75 29 	call	0x52ea	; 0x52ea <__SPKR_stop>
    51bc:	82 e0       	ldi	r24, 0x02	; 2
    51be:	0e 94 09 2b 	call	0x5612	; 0x5612 <__SPKR_close>
    51c2:	80 91 39 04 	lds	r24, 0x0439
    51c6:	90 91 3a 04 	lds	r25, 0x043A
    51ca:	00 97       	sbiw	r24, 0x00	; 0
    51cc:	31 f0       	breq	.+12     	; 0x51da <__SPKR_close_tone_mode+0x34>
    51ce:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <free>
    51d2:	10 92 3a 04 	sts	0x043A, r1
    51d6:	10 92 39 04 	sts	0x0439, r1
    51da:	10 92 2b 04 	sts	0x042B, r1
    51de:	89 e0       	ldi	r24, 0x09	; 9
    51e0:	60 e0       	ldi	r22, 0x00	; 0
    51e2:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    51e6:	08 95       	ret

000051e8 <SPKR_close>:
    51e8:	81 30       	cpi	r24, 0x01	; 1
    51ea:	29 f0       	breq	.+10     	; 0x51f6 <SPKR_close+0xe>
    51ec:	82 30       	cpi	r24, 0x02	; 2
    51ee:	29 f4       	brne	.+10     	; 0x51fa <SPKR_close+0x12>
    51f0:	0e 94 d3 28 	call	0x51a6	; 0x51a6 <__SPKR_close_tone_mode>
    51f4:	08 95       	ret
    51f6:	0e 94 c5 28 	call	0x518a	; 0x518a <__SPKR_close_beep_mode>
    51fa:	08 95       	ret

000051fc <__SPKR_init>:
    51fc:	98 2f       	mov	r25, r24
    51fe:	80 91 2b 04 	lds	r24, 0x042B
    5202:	88 23       	and	r24, r24
    5204:	31 f4       	brne	.+12     	; 0x5212 <__SPKR_init+0x16>
    5206:	80 91 2c 04 	lds	r24, 0x042C
    520a:	88 23       	and	r24, r24
    520c:	11 f4       	brne	.+4      	; 0x5212 <__SPKR_init+0x16>
    520e:	57 9a       	sbi	0x0a, 7	; 10
    5210:	5f 98       	cbi	0x0b, 7	; 11
    5212:	80 91 2b 04 	lds	r24, 0x042B
    5216:	88 23       	and	r24, r24
    5218:	d1 f4       	brne	.+52     	; 0x524e <__SPKR_init+0x52>
    521a:	92 30       	cpi	r25, 0x02	; 2
    521c:	c1 f4       	brne	.+48     	; 0x524e <__SPKR_init+0x52>
    521e:	10 92 80 00 	sts	0x0080, r1
    5222:	10 92 81 00 	sts	0x0081, r1
    5226:	80 91 81 00 	lds	r24, 0x0081
    522a:	88 60       	ori	r24, 0x08	; 8
    522c:	80 93 81 00 	sts	0x0081, r24
    5230:	80 91 81 00 	lds	r24, 0x0081
    5234:	81 60       	ori	r24, 0x01	; 1
    5236:	80 93 81 00 	sts	0x0081, r24
    523a:	10 92 85 00 	sts	0x0085, r1
    523e:	10 92 84 00 	sts	0x0084, r1
    5242:	81 e0       	ldi	r24, 0x01	; 1
    5244:	80 93 89 00 	sts	0x0089, r24
    5248:	80 e9       	ldi	r24, 0x90	; 144
    524a:	80 93 88 00 	sts	0x0088, r24
    524e:	08 95       	ret

00005250 <SPKR_play_beep>:
    5250:	8f 92       	push	r8
    5252:	9f 92       	push	r9
    5254:	af 92       	push	r10
    5256:	bf 92       	push	r11
    5258:	cf 92       	push	r12
    525a:	df 92       	push	r13
    525c:	ef 92       	push	r14
    525e:	ff 92       	push	r15
    5260:	0f 93       	push	r16
    5262:	1f 93       	push	r17
    5264:	cf 93       	push	r28
    5266:	df 93       	push	r29
    5268:	4b 01       	movw	r8, r22
    526a:	5c 01       	movw	r10, r24
    526c:	ea 01       	movw	r28, r20
    526e:	b9 01       	movw	r22, r18
    5270:	21 15       	cp	r18, r1
    5272:	31 05       	cpc	r19, r1
    5274:	39 f1       	breq	.+78     	; 0x52c4 <SPKR_play_beep+0x74>
    5276:	9e 01       	movw	r18, r28
    5278:	44 27       	eor	r20, r20
    527a:	37 fd       	sbrc	r19, 7
    527c:	40 95       	com	r20
    527e:	54 2f       	mov	r21, r20
    5280:	65 36       	cpi	r22, 0x65	; 101
    5282:	71 05       	cpc	r23, r1
    5284:	10 f0       	brcs	.+4      	; 0x528a <SPKR_play_beep+0x3a>
    5286:	64 e6       	ldi	r22, 0x64	; 100
    5288:	70 e0       	ldi	r23, 0x00	; 0
    528a:	80 e0       	ldi	r24, 0x00	; 0
    528c:	90 e0       	ldi	r25, 0x00	; 0
    528e:	0e 94 57 36 	call	0x6cae	; 0x6cae <__mulsi3>
    5292:	24 e6       	ldi	r18, 0x64	; 100
    5294:	30 e0       	ldi	r19, 0x00	; 0
    5296:	40 e0       	ldi	r20, 0x00	; 0
    5298:	50 e0       	ldi	r21, 0x00	; 0
    529a:	0e 94 89 36 	call	0x6d12	; 0x6d12 <__udivmodsi4>
    529e:	79 01       	movw	r14, r18
    52a0:	8a 01       	movw	r16, r20
    52a2:	c5 01       	movw	r24, r10
    52a4:	b4 01       	movw	r22, r8
    52a6:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <SPKR_beep>
    52aa:	c7 01       	movw	r24, r14
    52ac:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
    52b0:	60 e0       	ldi	r22, 0x00	; 0
    52b2:	70 e0       	ldi	r23, 0x00	; 0
    52b4:	80 e0       	ldi	r24, 0x00	; 0
    52b6:	90 e0       	ldi	r25, 0x00	; 0
    52b8:	0e 94 f2 2a 	call	0x55e4	; 0x55e4 <SPKR_beep>
    52bc:	ce 01       	movw	r24, r28
    52be:	8e 19       	sub	r24, r14
    52c0:	9f 09       	sbc	r25, r15
    52c2:	04 c0       	rjmp	.+8      	; 0x52cc <SPKR_play_beep+0x7c>
    52c4:	41 15       	cp	r20, r1
    52c6:	51 05       	cpc	r21, r1
    52c8:	19 f0       	breq	.+6      	; 0x52d0 <SPKR_play_beep+0x80>
    52ca:	ca 01       	movw	r24, r20
    52cc:	0e 94 59 23 	call	0x46b2	; 0x46b2 <TMRSRVC_delay>
    52d0:	df 91       	pop	r29
    52d2:	cf 91       	pop	r28
    52d4:	1f 91       	pop	r17
    52d6:	0f 91       	pop	r16
    52d8:	ff 90       	pop	r15
    52da:	ef 90       	pop	r14
    52dc:	df 90       	pop	r13
    52de:	cf 90       	pop	r12
    52e0:	bf 90       	pop	r11
    52e2:	af 90       	pop	r10
    52e4:	9f 90       	pop	r9
    52e6:	8f 90       	pop	r8
    52e8:	08 95       	ret

000052ea <__SPKR_stop>:
    52ea:	ef e6       	ldi	r30, 0x6F	; 111
    52ec:	f0 e0       	ldi	r31, 0x00	; 0
    52ee:	80 81       	ld	r24, Z
    52f0:	8d 7f       	andi	r24, 0xFD	; 253
    52f2:	80 83       	st	Z, r24
    52f4:	08 95       	ret

000052f6 <STEPPER_go>:
    52f6:	98 2f       	mov	r25, r24
    52f8:	81 e0       	ldi	r24, 0x01	; 1
    52fa:	80 93 3e 07 	sts	0x073E, r24
    52fe:	91 30       	cpi	r25, 0x01	; 1
    5300:	51 f0       	breq	.+20     	; 0x5316 <STEPPER_go+0x20>
    5302:	91 30       	cpi	r25, 0x01	; 1
    5304:	18 f0       	brcs	.+6      	; 0x530c <STEPPER_go+0x16>
    5306:	92 30       	cpi	r25, 0x02	; 2
    5308:	41 f4       	brne	.+16     	; 0x531a <STEPPER_go+0x24>
    530a:	03 c0       	rjmp	.+6      	; 0x5312 <STEPPER_go+0x1c>
    530c:	10 92 26 07 	sts	0x0726, r1
    5310:	04 c0       	rjmp	.+8      	; 0x531a <STEPPER_go+0x24>
    5312:	10 92 26 07 	sts	0x0726, r1
    5316:	10 92 27 07 	sts	0x0727, r1
    531a:	10 92 3e 07 	sts	0x073E, r1
    531e:	08 95       	ret

00005320 <__STEPPER_init>:
    5320:	3a 9a       	sbi	0x07, 2	; 7
    5322:	3b 9a       	sbi	0x07, 3	; 7
    5324:	3c 9a       	sbi	0x07, 4	; 7
    5326:	3d 9a       	sbi	0x07, 5	; 7
    5328:	3e 9a       	sbi	0x07, 6	; 7
    532a:	3f 9a       	sbi	0x07, 7	; 7
    532c:	88 b1       	in	r24, 0x08	; 8
    532e:	83 70       	andi	r24, 0x03	; 3
    5330:	88 b9       	out	0x08, r24	; 8
    5332:	08 95       	ret

00005334 <STEPPER_set_stop_mode>:
    5334:	98 2f       	mov	r25, r24
    5336:	81 e0       	ldi	r24, 0x01	; 1
    5338:	80 93 3e 07 	sts	0x073E, r24
    533c:	91 30       	cpi	r25, 0x01	; 1
    533e:	51 f0       	breq	.+20     	; 0x5354 <STEPPER_set_stop_mode+0x20>
    5340:	91 30       	cpi	r25, 0x01	; 1
    5342:	18 f0       	brcs	.+6      	; 0x534a <STEPPER_set_stop_mode+0x16>
    5344:	92 30       	cpi	r25, 0x02	; 2
    5346:	41 f4       	brne	.+16     	; 0x5358 <STEPPER_set_stop_mode+0x24>
    5348:	03 c0       	rjmp	.+6      	; 0x5350 <STEPPER_set_stop_mode+0x1c>
    534a:	60 93 28 07 	sts	0x0728, r22
    534e:	04 c0       	rjmp	.+8      	; 0x5358 <STEPPER_set_stop_mode+0x24>
    5350:	60 93 28 07 	sts	0x0728, r22
    5354:	60 93 29 07 	sts	0x0729, r22
    5358:	10 92 3e 07 	sts	0x073E, r1
    535c:	08 95       	ret

0000535e <STEPPER_setup_decels>:
    535e:	0f 93       	push	r16
    5360:	1f 93       	push	r17
    5362:	cf 93       	push	r28
    5364:	df 93       	push	r29
    5366:	eb 01       	movw	r28, r22
    5368:	8a 01       	movw	r16, r20
    536a:	81 30       	cpi	r24, 0x01	; 1
    536c:	01 f1       	breq	.+64     	; 0x53ae <STEPPER_setup_decels+0x50>
    536e:	81 30       	cpi	r24, 0x01	; 1
    5370:	18 f0       	brcs	.+6      	; 0x5378 <STEPPER_setup_decels+0x1a>
    5372:	82 30       	cpi	r24, 0x02	; 2
    5374:	61 f5       	brne	.+88     	; 0x53ce <STEPPER_setup_decels+0x70>
    5376:	0d c0       	rjmp	.+26     	; 0x5392 <STEPPER_setup_decels+0x34>
    5378:	80 91 12 07 	lds	r24, 0x0712
    537c:	90 91 13 07 	lds	r25, 0x0713
    5380:	89 2b       	or	r24, r25
    5382:	11 f0       	breq	.+4      	; 0x5388 <STEPPER_setup_decels+0x2a>
    5384:	80 e0       	ldi	r24, 0x00	; 0
    5386:	1a c0       	rjmp	.+52     	; 0x53bc <STEPPER_setup_decels+0x5e>
    5388:	10 92 1f 07 	sts	0x071F, r1
    538c:	10 92 1e 07 	sts	0x071E, r1
    5390:	1e c0       	rjmp	.+60     	; 0x53ce <STEPPER_setup_decels+0x70>
    5392:	80 91 12 07 	lds	r24, 0x0712
    5396:	90 91 13 07 	lds	r25, 0x0713
    539a:	89 2b       	or	r24, r25
    539c:	21 f0       	breq	.+8      	; 0x53a6 <STEPPER_setup_decels+0x48>
    539e:	80 e0       	ldi	r24, 0x00	; 0
    53a0:	0e 94 25 2b 	call	0x564a	; 0x564a <STEPPER_set_decel_step_values>
    53a4:	04 c0       	rjmp	.+8      	; 0x53ae <STEPPER_setup_decels+0x50>
    53a6:	10 92 1f 07 	sts	0x071F, r1
    53aa:	10 92 1e 07 	sts	0x071E, r1
    53ae:	80 91 14 07 	lds	r24, 0x0714
    53b2:	90 91 15 07 	lds	r25, 0x0715
    53b6:	89 2b       	or	r24, r25
    53b8:	31 f0       	breq	.+12     	; 0x53c6 <STEPPER_setup_decels+0x68>
    53ba:	81 e0       	ldi	r24, 0x01	; 1
    53bc:	be 01       	movw	r22, r28
    53be:	a8 01       	movw	r20, r16
    53c0:	0e 94 25 2b 	call	0x564a	; 0x564a <STEPPER_set_decel_step_values>
    53c4:	04 c0       	rjmp	.+8      	; 0x53ce <STEPPER_setup_decels+0x70>
    53c6:	10 92 21 07 	sts	0x0721, r1
    53ca:	10 92 20 07 	sts	0x0720, r1
    53ce:	df 91       	pop	r29
    53d0:	cf 91       	pop	r28
    53d2:	1f 91       	pop	r17
    53d4:	0f 91       	pop	r16
    53d6:	08 95       	ret

000053d8 <SYS_init>:
    53d8:	10 92 41 07 	sts	0x0741, r1
    53dc:	10 92 42 07 	sts	0x0742, r1
    53e0:	10 92 46 07 	sts	0x0746, r1
    53e4:	10 92 43 07 	sts	0x0743, r1
    53e8:	10 92 45 07 	sts	0x0745, r1
    53ec:	10 92 47 07 	sts	0x0747, r1
    53f0:	10 92 48 07 	sts	0x0748, r1
    53f4:	10 92 49 07 	sts	0x0749, r1
    53f8:	10 92 4a 07 	sts	0x074A, r1
    53fc:	10 92 4b 07 	sts	0x074B, r1
    5400:	10 92 4c 07 	sts	0x074C, r1
    5404:	10 92 4d 07 	sts	0x074D, r1
    5408:	10 92 4e 07 	sts	0x074E, r1
    540c:	10 92 4f 07 	sts	0x074F, r1
    5410:	10 92 50 07 	sts	0x0750, r1
    5414:	10 92 51 07 	sts	0x0751, r1
    5418:	10 92 52 07 	sts	0x0752, r1
    541c:	08 95       	ret

0000541e <TMRSRVC_insert>:
    541e:	cf 92       	push	r12
    5420:	df 92       	push	r13
    5422:	ef 92       	push	r14
    5424:	ff 92       	push	r15
    5426:	0f 93       	push	r16
    5428:	1f 93       	push	r17
    542a:	cf 93       	push	r28
    542c:	df 93       	push	r29
    542e:	ec 01       	movw	r28, r24
    5430:	80 91 78 07 	lds	r24, 0x0778
    5434:	88 23       	and	r24, r24
    5436:	39 f4       	brne	.+14     	; 0x5446 <TMRSRVC_insert+0x28>
    5438:	d0 93 7a 07 	sts	0x077A, r29
    543c:	c0 93 79 07 	sts	0x0779, r28
    5440:	0e 94 9d 2a 	call	0x553a	; 0x553a <TMRSRVC_start>
    5444:	47 c0       	rjmp	.+142    	; 0x54d4 <TMRSRVC_insert+0xb6>
    5446:	c0 90 79 07 	lds	r12, 0x0779
    544a:	d0 90 7a 07 	lds	r13, 0x077A
    544e:	00 e0       	ldi	r16, 0x00	; 0
    5450:	10 e0       	ldi	r17, 0x00	; 0
    5452:	ee 24       	eor	r14, r14
    5454:	ff 24       	eor	r15, r15
    5456:	37 c0       	rjmp	.+110    	; 0x54c6 <TMRSRVC_insert+0xa8>
    5458:	a8 81       	ld	r26, Y
    545a:	b9 81       	ldd	r27, Y+1	; 0x01
    545c:	fd 01       	movw	r30, r26
    545e:	64 81       	ldd	r22, Z+4	; 0x04
    5460:	75 81       	ldd	r23, Z+5	; 0x05
    5462:	f6 01       	movw	r30, r12
    5464:	40 81       	ld	r20, Z
    5466:	51 81       	ldd	r21, Z+1	; 0x01
    5468:	fa 01       	movw	r30, r20
    546a:	84 81       	ldd	r24, Z+4	; 0x04
    546c:	95 81       	ldd	r25, Z+5	; 0x05
    546e:	9b 01       	movw	r18, r22
    5470:	28 1b       	sub	r18, r24
    5472:	39 0b       	sbc	r19, r25
    5474:	37 ff       	sbrs	r19, 7
    5476:	0f c0       	rjmp	.+30     	; 0x5496 <TMRSRVC_insert+0x78>
    5478:	86 1b       	sub	r24, r22
    547a:	97 0b       	sbc	r25, r23
    547c:	95 83       	std	Z+5, r25	; 0x05
    547e:	84 83       	std	Z+4, r24	; 0x04
    5480:	db 82       	std	Y+3, r13	; 0x03
    5482:	ca 82       	std	Y+2, r12	; 0x02
    5484:	01 2b       	or	r16, r17
    5486:	29 f4       	brne	.+10     	; 0x5492 <TMRSRVC_insert+0x74>
    5488:	d0 93 7a 07 	sts	0x077A, r29
    548c:	c0 93 79 07 	sts	0x0779, r28
    5490:	21 c0       	rjmp	.+66     	; 0x54d4 <TMRSRVC_insert+0xb6>
    5492:	f7 01       	movw	r30, r14
    5494:	0c c0       	rjmp	.+24     	; 0x54ae <TMRSRVC_insert+0x90>
    5496:	f6 01       	movw	r30, r12
    5498:	82 81       	ldd	r24, Z+2	; 0x02
    549a:	93 81       	ldd	r25, Z+3	; 0x03
    549c:	21 15       	cp	r18, r1
    549e:	31 05       	cpc	r19, r1
    54a0:	49 f4       	brne	.+18     	; 0x54b4 <TMRSRVC_insert+0x96>
    54a2:	fd 01       	movw	r30, r26
    54a4:	15 82       	std	Z+5, r1	; 0x05
    54a6:	14 82       	std	Z+4, r1	; 0x04
    54a8:	9b 83       	std	Y+3, r25	; 0x03
    54aa:	8a 83       	std	Y+2, r24	; 0x02
    54ac:	f6 01       	movw	r30, r12
    54ae:	d3 83       	std	Z+3, r29	; 0x03
    54b0:	c2 83       	std	Z+2, r28	; 0x02
    54b2:	10 c0       	rjmp	.+32     	; 0x54d4 <TMRSRVC_insert+0xb6>
    54b4:	fd 01       	movw	r30, r26
    54b6:	35 83       	std	Z+5, r19	; 0x05
    54b8:	24 83       	std	Z+4, r18	; 0x04
    54ba:	00 97       	sbiw	r24, 0x00	; 0
    54bc:	b9 f3       	breq	.-18     	; 0x54ac <TMRSRVC_insert+0x8e>
    54be:	0f 5f       	subi	r16, 0xFF	; 255
    54c0:	1f 4f       	sbci	r17, 0xFF	; 255
    54c2:	76 01       	movw	r14, r12
    54c4:	6c 01       	movw	r12, r24
    54c6:	80 91 78 07 	lds	r24, 0x0778
    54ca:	90 e0       	ldi	r25, 0x00	; 0
    54cc:	08 17       	cp	r16, r24
    54ce:	19 07       	cpc	r17, r25
    54d0:	18 f2       	brcs	.-122    	; 0x5458 <TMRSRVC_insert+0x3a>
    54d2:	ec cf       	rjmp	.-40     	; 0x54ac <TMRSRVC_insert+0x8e>
    54d4:	80 91 78 07 	lds	r24, 0x0778
    54d8:	8f 5f       	subi	r24, 0xFF	; 255
    54da:	80 93 78 07 	sts	0x0778, r24
    54de:	df 91       	pop	r29
    54e0:	cf 91       	pop	r28
    54e2:	1f 91       	pop	r17
    54e4:	0f 91       	pop	r16
    54e6:	ff 90       	pop	r15
    54e8:	ef 90       	pop	r14
    54ea:	df 90       	pop	r13
    54ec:	cf 90       	pop	r12
    54ee:	08 95       	ret

000054f0 <TMRSRVC_open>:
    54f0:	88 e0       	ldi	r24, 0x08	; 8
    54f2:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    54f6:	88 23       	and	r24, r24
    54f8:	b9 f4       	brne	.+46     	; 0x5528 <TMRSRVC_open+0x38>
    54fa:	10 92 78 07 	sts	0x0778, r1
    54fe:	10 92 7a 07 	sts	0x077A, r1
    5502:	10 92 79 07 	sts	0x0779, r1
    5506:	10 92 3b 04 	sts	0x043B, r1
    550a:	10 92 3c 04 	sts	0x043C, r1
    550e:	80 e1       	ldi	r24, 0x10	; 16
    5510:	62 e9       	ldi	r22, 0x92	; 146
    5512:	7b e2       	ldi	r23, 0x2B	; 43
    5514:	0e 94 ae 2a 	call	0x555c	; 0x555c <__ISR_attach>
    5518:	0e 94 99 2b 	call	0x5732	; 0x5732 <__TMRSRVC_init>
    551c:	0e 94 97 2a 	call	0x552e	; 0x552e <__TMRSRVC_start>
    5520:	88 e0       	ldi	r24, 0x08	; 8
    5522:	61 e0       	ldi	r22, 0x01	; 1
    5524:	0e 94 44 22 	call	0x4488	; 0x4488 <SYS_set_state>
    5528:	88 e0       	ldi	r24, 0x08	; 8
    552a:	91 e0       	ldi	r25, 0x01	; 1
    552c:	08 95       	ret

0000552e <__TMRSRVC_start>:
    552e:	ee e6       	ldi	r30, 0x6E	; 110
    5530:	f0 e0       	ldi	r31, 0x00	; 0
    5532:	80 81       	ld	r24, Z
    5534:	82 60       	ori	r24, 0x02	; 2
    5536:	80 83       	st	Z, r24
    5538:	08 95       	ret

0000553a <TMRSRVC_start>:
    553a:	81 e0       	ldi	r24, 0x01	; 1
    553c:	80 93 3c 04 	sts	0x043C, r24
    5540:	08 95       	ret

00005542 <I2C_enable>:
    5542:	80 91 7b 07 	lds	r24, 0x077B
    5546:	81 30       	cpi	r24, 0x01	; 1
    5548:	29 f4       	brne	.+10     	; 0x5554 <I2C_enable+0x12>
    554a:	80 91 bc 00 	lds	r24, 0x00BC
    554e:	84 60       	ori	r24, 0x04	; 4
    5550:	80 93 bc 00 	sts	0x00BC, r24
    5554:	08 95       	ret

00005556 <__I2C_init>:
    5556:	38 98       	cbi	0x07, 0	; 7
    5558:	39 98       	cbi	0x07, 1	; 7
    555a:	08 95       	ret

0000555c <__ISR_attach>:
    555c:	80 32       	cpi	r24, 0x20	; 32
    555e:	18 f0       	brcs	.+6      	; 0x5566 <__ISR_attach+0xa>
    5560:	20 e0       	ldi	r18, 0x00	; 0
    5562:	30 e0       	ldi	r19, 0x00	; 0
    5564:	0a c0       	rjmp	.+20     	; 0x557a <__ISR_attach+0x1e>
    5566:	e8 2f       	mov	r30, r24
    5568:	f0 e0       	ldi	r31, 0x00	; 0
    556a:	ee 0f       	add	r30, r30
    556c:	ff 1f       	adc	r31, r31
    556e:	e5 52       	subi	r30, 0x25	; 37
    5570:	fc 4f       	sbci	r31, 0xFC	; 252
    5572:	20 81       	ld	r18, Z
    5574:	31 81       	ldd	r19, Z+1	; 0x01
    5576:	71 83       	std	Z+1, r23	; 0x01
    5578:	60 83       	st	Z, r22
    557a:	c9 01       	movw	r24, r18
    557c:	08 95       	ret

0000557e <__ATMEGA_init>:
    557e:	24 9a       	sbi	0x04, 4	; 4
    5580:	2c 9a       	sbi	0x05, 4	; 5
    5582:	08 95       	ret

00005584 <SPI_default_config>:
    5584:	83 e5       	ldi	r24, 0x53	; 83
    5586:	8c bd       	out	0x2c, r24	; 44
    5588:	81 e0       	ldi	r24, 0x01	; 1
    558a:	8d bd       	out	0x2d, r24	; 45
    558c:	8d e0       	ldi	r24, 0x0D	; 13
    558e:	8a 95       	dec	r24
    5590:	f1 f7       	brne	.-4      	; 0x558e <SPI_default_config+0xa>
    5592:	08 95       	ret

00005594 <SPI_ATtiny0_config>:
    5594:	83 e5       	ldi	r24, 0x53	; 83
    5596:	8c bd       	out	0x2c, r24	; 44
    5598:	1d bc       	out	0x2d, r1	; 45
    559a:	84 ef       	ldi	r24, 0xF4	; 244
    559c:	91 e0       	ldi	r25, 0x01	; 1
    559e:	01 97       	sbiw	r24, 0x01	; 1
    55a0:	f1 f7       	brne	.-4      	; 0x559e <SPI_ATtiny0_config+0xa>
    55a2:	08 95       	ret

000055a4 <SPI_PSXC_config>:
    55a4:	8f e7       	ldi	r24, 0x7F	; 127
    55a6:	8c bd       	out	0x2c, r24	; 44
    55a8:	1d bc       	out	0x2d, r1	; 45
    55aa:	84 ef       	ldi	r24, 0xF4	; 244
    55ac:	91 e0       	ldi	r25, 0x01	; 1
    55ae:	01 97       	sbiw	r24, 0x01	; 1
    55b0:	f1 f7       	brne	.-4      	; 0x55ae <SPI_PSXC_config+0xa>
    55b2:	08 95       	ret

000055b4 <SPI_LCD_config>:
    55b4:	83 e5       	ldi	r24, 0x53	; 83
    55b6:	8c bd       	out	0x2c, r24	; 44
    55b8:	81 e0       	ldi	r24, 0x01	; 1
    55ba:	8d bd       	out	0x2d, r24	; 45
    55bc:	8d e0       	ldi	r24, 0x0D	; 13
    55be:	8a 95       	dec	r24
    55c0:	f1 f7       	brne	.-4      	; 0x55be <SPI_LCD_config+0xa>
    55c2:	08 95       	ret

000055c4 <SPI_FLASH_config>:
    55c4:	83 e5       	ldi	r24, 0x53	; 83
    55c6:	8c bd       	out	0x2c, r24	; 44
    55c8:	81 e0       	ldi	r24, 0x01	; 1
    55ca:	8d bd       	out	0x2d, r24	; 45
    55cc:	84 ef       	ldi	r24, 0xF4	; 244
    55ce:	91 e0       	ldi	r25, 0x01	; 1
    55d0:	01 97       	sbiw	r24, 0x01	; 1
    55d2:	f1 f7       	brne	.-4      	; 0x55d0 <SPI_FLASH_config+0xc>
    55d4:	08 95       	ret

000055d6 <__SPI_init>:
    55d6:	25 9a       	sbi	0x04, 5	; 4
    55d8:	26 98       	cbi	0x04, 6	; 4
    55da:	27 9a       	sbi	0x04, 7	; 4
    55dc:	20 9a       	sbi	0x04, 0	; 4
    55de:	21 9a       	sbi	0x04, 1	; 4
    55e0:	22 9a       	sbi	0x04, 2	; 4
    55e2:	08 95       	ret

000055e4 <SPKR_beep>:
    55e4:	9b 01       	movw	r18, r22
    55e6:	ac 01       	movw	r20, r24
    55e8:	80 91 2c 04 	lds	r24, 0x042C
    55ec:	88 23       	and	r24, r24
    55ee:	81 f0       	breq	.+32     	; 0x5610 <SPKR_beep+0x2c>
    55f0:	da 01       	movw	r26, r20
    55f2:	c9 01       	movw	r24, r18
    55f4:	88 0f       	add	r24, r24
    55f6:	99 1f       	adc	r25, r25
    55f8:	aa 1f       	adc	r26, r26
    55fa:	bb 1f       	adc	r27, r27
    55fc:	90 93 38 04 	sts	0x0438, r25
    5600:	80 93 37 04 	sts	0x0437, r24
    5604:	21 15       	cp	r18, r1
    5606:	31 05       	cpc	r19, r1
    5608:	41 05       	cpc	r20, r1
    560a:	51 05       	cpc	r21, r1
    560c:	09 f4       	brne	.+2      	; 0x5610 <SPKR_beep+0x2c>
    560e:	5f 98       	cbi	0x0b, 7	; 11
    5610:	08 95       	ret

00005612 <__SPKR_close>:
    5612:	82 30       	cpi	r24, 0x02	; 2
    5614:	29 f4       	brne	.+10     	; 0x5620 <__SPKR_close+0xe>
    5616:	80 91 81 00 	lds	r24, 0x0081
    561a:	8e 7f       	andi	r24, 0xFE	; 254
    561c:	80 93 81 00 	sts	0x0081, r24
    5620:	80 91 2b 04 	lds	r24, 0x042B
    5624:	81 30       	cpi	r24, 0x01	; 1
    5626:	31 f4       	brne	.+12     	; 0x5634 <__SPKR_close+0x22>
    5628:	80 91 2c 04 	lds	r24, 0x042C
    562c:	81 30       	cpi	r24, 0x01	; 1
    562e:	11 f4       	brne	.+4      	; 0x5634 <__SPKR_close+0x22>
    5630:	00 00       	nop
    5632:	08 95       	ret
    5634:	80 91 2b 04 	lds	r24, 0x042B
    5638:	81 30       	cpi	r24, 0x01	; 1
    563a:	21 f0       	breq	.+8      	; 0x5644 <__SPKR_close+0x32>
    563c:	80 91 2c 04 	lds	r24, 0x042C
    5640:	81 30       	cpi	r24, 0x01	; 1
    5642:	11 f4       	brne	.+4      	; 0x5648 <__SPKR_close+0x36>
    5644:	5f 98       	cbi	0x0b, 7	; 11
    5646:	57 98       	cbi	0x0a, 7	; 10
    5648:	08 95       	ret

0000564a <STEPPER_set_decel_step_values>:
    564a:	ef 92       	push	r14
    564c:	ff 92       	push	r15
    564e:	0f 93       	push	r16
    5650:	1f 93       	push	r17
    5652:	cf 93       	push	r28
    5654:	df 93       	push	r29
    5656:	eb 01       	movw	r28, r22
    5658:	88 23       	and	r24, r24
    565a:	21 f0       	breq	.+8      	; 0x5664 <STEPPER_set_decel_step_values+0x1a>
    565c:	81 30       	cpi	r24, 0x01	; 1
    565e:	09 f0       	breq	.+2      	; 0x5662 <STEPPER_set_decel_step_values+0x18>
    5660:	5a c0       	rjmp	.+180    	; 0x5716 <STEPPER_set_decel_step_values+0xcc>
    5662:	2d c0       	rjmp	.+90     	; 0x56be <STEPPER_set_decel_step_values+0x74>
    5664:	9a 01       	movw	r18, r20
    5666:	40 e0       	ldi	r20, 0x00	; 0
    5668:	50 e0       	ldi	r21, 0x00	; 0
    566a:	ca 01       	movw	r24, r20
    566c:	b9 01       	movw	r22, r18
    566e:	0e 94 57 36 	call	0x6cae	; 0x6cae <__mulsi3>
    5672:	20 91 12 07 	lds	r18, 0x0712
    5676:	30 91 13 07 	lds	r19, 0x0713
    567a:	22 0f       	add	r18, r18
    567c:	33 1f       	adc	r19, r19
    567e:	40 e0       	ldi	r20, 0x00	; 0
    5680:	50 e0       	ldi	r21, 0x00	; 0
    5682:	0e 94 89 36 	call	0x6d12	; 0x6d12 <__udivmodsi4>
    5686:	79 01       	movw	r14, r18
    5688:	8a 01       	movw	r16, r20
    568a:	a8 01       	movw	r20, r16
    568c:	97 01       	movw	r18, r14
    568e:	22 0f       	add	r18, r18
    5690:	33 1f       	adc	r19, r19
    5692:	44 1f       	adc	r20, r20
    5694:	55 1f       	adc	r21, r21
    5696:	ce 01       	movw	r24, r28
    5698:	a0 e0       	ldi	r26, 0x00	; 0
    569a:	b0 e0       	ldi	r27, 0x00	; 0
    569c:	82 17       	cp	r24, r18
    569e:	93 07       	cpc	r25, r19
    56a0:	a4 07       	cpc	r26, r20
    56a2:	b5 07       	cpc	r27, r21
    56a4:	28 f0       	brcs	.+10     	; 0x56b0 <STEPPER_set_decel_step_values+0x66>
    56a6:	f0 92 1f 07 	sts	0x071F, r15
    56aa:	e0 92 1e 07 	sts	0x071E, r14
    56ae:	33 c0       	rjmp	.+102    	; 0x5716 <STEPPER_set_decel_step_values+0xcc>
    56b0:	d6 95       	lsr	r29
    56b2:	c7 95       	ror	r28
    56b4:	d0 93 1f 07 	sts	0x071F, r29
    56b8:	c0 93 1e 07 	sts	0x071E, r28
    56bc:	2c c0       	rjmp	.+88     	; 0x5716 <STEPPER_set_decel_step_values+0xcc>
    56be:	9a 01       	movw	r18, r20
    56c0:	40 e0       	ldi	r20, 0x00	; 0
    56c2:	50 e0       	ldi	r21, 0x00	; 0
    56c4:	ca 01       	movw	r24, r20
    56c6:	b9 01       	movw	r22, r18
    56c8:	0e 94 57 36 	call	0x6cae	; 0x6cae <__mulsi3>
    56cc:	20 91 14 07 	lds	r18, 0x0714
    56d0:	30 91 15 07 	lds	r19, 0x0715
    56d4:	22 0f       	add	r18, r18
    56d6:	33 1f       	adc	r19, r19
    56d8:	40 e0       	ldi	r20, 0x00	; 0
    56da:	50 e0       	ldi	r21, 0x00	; 0
    56dc:	0e 94 89 36 	call	0x6d12	; 0x6d12 <__udivmodsi4>
    56e0:	79 01       	movw	r14, r18
    56e2:	8a 01       	movw	r16, r20
    56e4:	a8 01       	movw	r20, r16
    56e6:	97 01       	movw	r18, r14
    56e8:	22 0f       	add	r18, r18
    56ea:	33 1f       	adc	r19, r19
    56ec:	44 1f       	adc	r20, r20
    56ee:	55 1f       	adc	r21, r21
    56f0:	ce 01       	movw	r24, r28
    56f2:	a0 e0       	ldi	r26, 0x00	; 0
    56f4:	b0 e0       	ldi	r27, 0x00	; 0
    56f6:	82 17       	cp	r24, r18
    56f8:	93 07       	cpc	r25, r19
    56fa:	a4 07       	cpc	r26, r20
    56fc:	b5 07       	cpc	r27, r21
    56fe:	28 f0       	brcs	.+10     	; 0x570a <STEPPER_set_decel_step_values+0xc0>
    5700:	f0 92 21 07 	sts	0x0721, r15
    5704:	e0 92 20 07 	sts	0x0720, r14
    5708:	06 c0       	rjmp	.+12     	; 0x5716 <STEPPER_set_decel_step_values+0xcc>
    570a:	d6 95       	lsr	r29
    570c:	c7 95       	ror	r28
    570e:	d0 93 21 07 	sts	0x0721, r29
    5712:	c0 93 20 07 	sts	0x0720, r28
    5716:	df 91       	pop	r29
    5718:	cf 91       	pop	r28
    571a:	1f 91       	pop	r17
    571c:	0f 91       	pop	r16
    571e:	ff 90       	pop	r15
    5720:	ef 90       	pop	r14
    5722:	08 95       	ret

00005724 <__TIMER0_COMPA_vect>:
    5724:	0e 94 a2 2b 	call	0x5744	; 0x5744 <TMRSRVC_tick>
    5728:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <STEPPER_clk>
    572c:	0e 94 bb 2b 	call	0x5776	; 0x5776 <SPKR_beep_clk>
    5730:	08 95       	ret

00005732 <__TMRSRVC_init>:
    5732:	84 b5       	in	r24, 0x24	; 36
    5734:	82 60       	ori	r24, 0x02	; 2
    5736:	84 bd       	out	0x24, r24	; 36
    5738:	85 b5       	in	r24, 0x25	; 37
    573a:	84 60       	ori	r24, 0x04	; 4
    573c:	85 bd       	out	0x25, r24	; 37
    573e:	8e e4       	ldi	r24, 0x4E	; 78
    5740:	87 bd       	out	0x27, r24	; 39
    5742:	08 95       	ret

00005744 <TMRSRVC_tick>:
    5744:	88 e0       	ldi	r24, 0x08	; 8
    5746:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    574a:	88 23       	and	r24, r24
    574c:	11 f4       	brne	.+4      	; 0x5752 <TMRSRVC_tick+0xe>
    574e:	84 e0       	ldi	r24, 0x04	; 4
    5750:	08 95       	ret
    5752:	80 91 3c 04 	lds	r24, 0x043C
    5756:	88 23       	and	r24, r24
    5758:	11 f4       	brne	.+4      	; 0x575e <TMRSRVC_tick+0x1a>
    575a:	83 e0       	ldi	r24, 0x03	; 3
    575c:	08 95       	ret
    575e:	80 91 3b 04 	lds	r24, 0x043B
    5762:	88 23       	and	r24, r24
    5764:	11 f0       	breq	.+4      	; 0x576a <TMRSRVC_tick+0x26>
    5766:	82 e0       	ldi	r24, 0x02	; 2
    5768:	08 95       	ret
    576a:	0e 94 2f 2e 	call	0x5c5e	; 0x5c5e <TMRSRVC_process>
    576e:	81 30       	cpi	r24, 0x01	; 1
    5770:	e1 f3       	breq	.-8      	; 0x576a <TMRSRVC_tick+0x26>
    5772:	80 e0       	ldi	r24, 0x00	; 0
    5774:	08 95       	ret

00005776 <SPKR_beep_clk>:
    5776:	80 91 2c 04 	lds	r24, 0x042C
    577a:	81 30       	cpi	r24, 0x01	; 1
    577c:	11 f5       	brne	.+68     	; 0x57c2 <SPKR_beep_clk+0x4c>
    577e:	80 91 35 04 	lds	r24, 0x0435
    5782:	90 91 36 04 	lds	r25, 0x0436
    5786:	20 91 37 04 	lds	r18, 0x0437
    578a:	30 91 38 04 	lds	r19, 0x0438
    578e:	28 0f       	add	r18, r24
    5790:	39 1f       	adc	r19, r25
    5792:	30 93 36 04 	sts	0x0436, r19
    5796:	20 93 35 04 	sts	0x0435, r18
    579a:	80 91 35 04 	lds	r24, 0x0435
    579e:	90 91 36 04 	lds	r25, 0x0436
    57a2:	88 5e       	subi	r24, 0xE8	; 232
    57a4:	93 40       	sbci	r25, 0x03	; 3
    57a6:	6c f0       	brlt	.+26     	; 0x57c2 <SPKR_beep_clk+0x4c>
    57a8:	8b b1       	in	r24, 0x0b	; 11
    57aa:	80 58       	subi	r24, 0x80	; 128
    57ac:	8b b9       	out	0x0b, r24	; 11
    57ae:	80 91 35 04 	lds	r24, 0x0435
    57b2:	90 91 36 04 	lds	r25, 0x0436
    57b6:	88 5e       	subi	r24, 0xE8	; 232
    57b8:	93 40       	sbci	r25, 0x03	; 3
    57ba:	90 93 36 04 	sts	0x0436, r25
    57be:	80 93 35 04 	sts	0x0435, r24
    57c2:	08 95       	ret

000057c4 <STEPPER_clk>:
    57c4:	87 e0       	ldi	r24, 0x07	; 7
    57c6:	0e 94 fc 21 	call	0x43f8	; 0x43f8 <SYS_get_state>
    57ca:	81 30       	cpi	r24, 0x01	; 1
    57cc:	09 f0       	breq	.+2      	; 0x57d0 <STEPPER_clk+0xc>
    57ce:	aa c0       	rjmp	.+340    	; 0x5924 <STEPPER_clk+0x160>
    57d0:	80 91 12 07 	lds	r24, 0x0712
    57d4:	90 91 13 07 	lds	r25, 0x0713
    57d8:	89 2b       	or	r24, r25
    57da:	09 f1       	breq	.+66     	; 0x581e <STEPPER_clk+0x5a>
    57dc:	80 91 36 07 	lds	r24, 0x0736
    57e0:	90 91 37 07 	lds	r25, 0x0737
    57e4:	20 91 12 07 	lds	r18, 0x0712
    57e8:	30 91 13 07 	lds	r19, 0x0713
    57ec:	82 0f       	add	r24, r18
    57ee:	93 1f       	adc	r25, r19
    57f0:	90 93 37 07 	sts	0x0737, r25
    57f4:	80 93 36 07 	sts	0x0736, r24
    57f8:	80 91 36 07 	lds	r24, 0x0736
    57fc:	90 91 37 07 	lds	r25, 0x0737
    5800:	88 5e       	subi	r24, 0xE8	; 232
    5802:	93 40       	sbci	r25, 0x03	; 3
    5804:	a4 f0       	brlt	.+40     	; 0x582e <STEPPER_clk+0x6a>
    5806:	80 91 36 07 	lds	r24, 0x0736
    580a:	90 91 37 07 	lds	r25, 0x0737
    580e:	88 5e       	subi	r24, 0xE8	; 232
    5810:	93 40       	sbci	r25, 0x03	; 3
    5812:	90 93 37 07 	sts	0x0737, r25
    5816:	80 93 36 07 	sts	0x0736, r24
    581a:	41 e0       	ldi	r20, 0x01	; 1
    581c:	09 c0       	rjmp	.+18     	; 0x5830 <STEPPER_clk+0x6c>
    581e:	80 91 0a 07 	lds	r24, 0x070A
    5822:	90 91 0b 07 	lds	r25, 0x070B
    5826:	90 93 0f 07 	sts	0x070F, r25
    582a:	80 93 0e 07 	sts	0x070E, r24
    582e:	40 e0       	ldi	r20, 0x00	; 0
    5830:	80 91 14 07 	lds	r24, 0x0714
    5834:	90 91 15 07 	lds	r25, 0x0715
    5838:	89 2b       	or	r24, r25
    583a:	09 f1       	breq	.+66     	; 0x587e <STEPPER_clk+0xba>
    583c:	80 91 38 07 	lds	r24, 0x0738
    5840:	90 91 39 07 	lds	r25, 0x0739
    5844:	20 91 14 07 	lds	r18, 0x0714
    5848:	30 91 15 07 	lds	r19, 0x0715
    584c:	82 0f       	add	r24, r18
    584e:	93 1f       	adc	r25, r19
    5850:	90 93 39 07 	sts	0x0739, r25
    5854:	80 93 38 07 	sts	0x0738, r24
    5858:	80 91 38 07 	lds	r24, 0x0738
    585c:	90 91 39 07 	lds	r25, 0x0739
    5860:	88 5e       	subi	r24, 0xE8	; 232
    5862:	93 40       	sbci	r25, 0x03	; 3
    5864:	a4 f0       	brlt	.+40     	; 0x588e <STEPPER_clk+0xca>
    5866:	80 91 38 07 	lds	r24, 0x0738
    586a:	90 91 39 07 	lds	r25, 0x0739
    586e:	88 5e       	subi	r24, 0xE8	; 232
    5870:	93 40       	sbci	r25, 0x03	; 3
    5872:	90 93 39 07 	sts	0x0739, r25
    5876:	80 93 38 07 	sts	0x0738, r24
    587a:	61 e0       	ldi	r22, 0x01	; 1
    587c:	09 c0       	rjmp	.+18     	; 0x5890 <STEPPER_clk+0xcc>
    587e:	80 91 0c 07 	lds	r24, 0x070C
    5882:	90 91 0d 07 	lds	r25, 0x070D
    5886:	90 93 11 07 	sts	0x0711, r25
    588a:	80 93 10 07 	sts	0x0710, r24
    588e:	60 e0       	ldi	r22, 0x00	; 0
    5890:	84 2f       	mov	r24, r20
    5892:	0e 94 93 2c 	call	0x5926	; 0x5926 <STEPPER_process_accel>
    5896:	80 91 32 07 	lds	r24, 0x0732
    589a:	90 91 33 07 	lds	r25, 0x0733
    589e:	20 91 0e 07 	lds	r18, 0x070E
    58a2:	30 91 0f 07 	lds	r19, 0x070F
    58a6:	28 0f       	add	r18, r24
    58a8:	39 1f       	adc	r19, r25
    58aa:	30 93 33 07 	sts	0x0733, r19
    58ae:	20 93 32 07 	sts	0x0732, r18
    58b2:	80 91 32 07 	lds	r24, 0x0732
    58b6:	90 91 33 07 	lds	r25, 0x0733
    58ba:	88 5e       	subi	r24, 0xE8	; 232
    58bc:	93 40       	sbci	r25, 0x03	; 3
    58be:	14 f4       	brge	.+4      	; 0x58c4 <STEPPER_clk+0x100>
    58c0:	40 e0       	ldi	r20, 0x00	; 0
    58c2:	0b c0       	rjmp	.+22     	; 0x58da <STEPPER_clk+0x116>
    58c4:	80 91 32 07 	lds	r24, 0x0732
    58c8:	90 91 33 07 	lds	r25, 0x0733
    58cc:	88 5e       	subi	r24, 0xE8	; 232
    58ce:	93 40       	sbci	r25, 0x03	; 3
    58d0:	90 93 33 07 	sts	0x0733, r25
    58d4:	80 93 32 07 	sts	0x0732, r24
    58d8:	41 e0       	ldi	r20, 0x01	; 1
    58da:	80 91 34 07 	lds	r24, 0x0734
    58de:	90 91 35 07 	lds	r25, 0x0735
    58e2:	20 91 10 07 	lds	r18, 0x0710
    58e6:	30 91 11 07 	lds	r19, 0x0711
    58ea:	28 0f       	add	r18, r24
    58ec:	39 1f       	adc	r19, r25
    58ee:	30 93 35 07 	sts	0x0735, r19
    58f2:	20 93 34 07 	sts	0x0734, r18
    58f6:	80 91 34 07 	lds	r24, 0x0734
    58fa:	90 91 35 07 	lds	r25, 0x0735
    58fe:	88 5e       	subi	r24, 0xE8	; 232
    5900:	93 40       	sbci	r25, 0x03	; 3
    5902:	14 f4       	brge	.+4      	; 0x5908 <STEPPER_clk+0x144>
    5904:	60 e0       	ldi	r22, 0x00	; 0
    5906:	0b c0       	rjmp	.+22     	; 0x591e <STEPPER_clk+0x15a>
    5908:	80 91 34 07 	lds	r24, 0x0734
    590c:	90 91 35 07 	lds	r25, 0x0735
    5910:	88 5e       	subi	r24, 0xE8	; 232
    5912:	93 40       	sbci	r25, 0x03	; 3
    5914:	90 93 35 07 	sts	0x0735, r25
    5918:	80 93 34 07 	sts	0x0734, r24
    591c:	61 e0       	ldi	r22, 0x01	; 1
    591e:	84 2f       	mov	r24, r20
    5920:	0e 94 d8 2c 	call	0x59b0	; 0x59b0 <STEPPER_process_run_mode>
    5924:	08 95       	ret

00005926 <STEPPER_process_accel>:
    5926:	88 23       	and	r24, r24
    5928:	f1 f0       	breq	.+60     	; 0x5966 <STEPPER_process_accel+0x40>
    592a:	20 91 0a 07 	lds	r18, 0x070A
    592e:	30 91 0b 07 	lds	r19, 0x070B
    5932:	80 91 0e 07 	lds	r24, 0x070E
    5936:	90 91 0f 07 	lds	r25, 0x070F
    593a:	28 1b       	sub	r18, r24
    593c:	39 0b       	sbc	r19, r25
    593e:	12 16       	cp	r1, r18
    5940:	13 06       	cpc	r1, r19
    5942:	34 f4       	brge	.+12     	; 0x5950 <STEPPER_process_accel+0x2a>
    5944:	80 91 0e 07 	lds	r24, 0x070E
    5948:	90 91 0f 07 	lds	r25, 0x070F
    594c:	01 96       	adiw	r24, 0x01	; 1
    594e:	07 c0       	rjmp	.+14     	; 0x595e <STEPPER_process_accel+0x38>
    5950:	23 2b       	or	r18, r19
    5952:	49 f0       	breq	.+18     	; 0x5966 <STEPPER_process_accel+0x40>
    5954:	80 91 0e 07 	lds	r24, 0x070E
    5958:	90 91 0f 07 	lds	r25, 0x070F
    595c:	01 97       	sbiw	r24, 0x01	; 1
    595e:	90 93 0f 07 	sts	0x070F, r25
    5962:	80 93 0e 07 	sts	0x070E, r24
    5966:	66 23       	and	r22, r22
    5968:	11 f1       	breq	.+68     	; 0x59ae <STEPPER_process_accel+0x88>
    596a:	20 91 0c 07 	lds	r18, 0x070C
    596e:	30 91 0d 07 	lds	r19, 0x070D
    5972:	80 91 10 07 	lds	r24, 0x0710
    5976:	90 91 11 07 	lds	r25, 0x0711
    597a:	28 1b       	sub	r18, r24
    597c:	39 0b       	sbc	r19, r25
    597e:	12 16       	cp	r1, r18
    5980:	13 06       	cpc	r1, r19
    5982:	54 f4       	brge	.+20     	; 0x5998 <STEPPER_process_accel+0x72>
    5984:	80 91 10 07 	lds	r24, 0x0710
    5988:	90 91 11 07 	lds	r25, 0x0711
    598c:	01 96       	adiw	r24, 0x01	; 1
    598e:	90 93 11 07 	sts	0x0711, r25
    5992:	80 93 10 07 	sts	0x0710, r24
    5996:	08 95       	ret
    5998:	23 2b       	or	r18, r19
    599a:	49 f0       	breq	.+18     	; 0x59ae <STEPPER_process_accel+0x88>
    599c:	80 91 10 07 	lds	r24, 0x0710
    59a0:	90 91 11 07 	lds	r25, 0x0711
    59a4:	01 97       	sbiw	r24, 0x01	; 1
    59a6:	90 93 11 07 	sts	0x0711, r25
    59aa:	80 93 10 07 	sts	0x0710, r24
    59ae:	08 95       	ret

000059b0 <STEPPER_process_run_mode>:
    59b0:	0f 93       	push	r16
    59b2:	1f 93       	push	r17
    59b4:	18 2f       	mov	r17, r24
    59b6:	06 2f       	mov	r16, r22
    59b8:	80 91 3e 07 	lds	r24, 0x073E
    59bc:	88 23       	and	r24, r24
    59be:	09 f0       	breq	.+2      	; 0x59c2 <STEPPER_process_run_mode+0x12>
    59c0:	e7 c0       	rjmp	.+462    	; 0x5b90 <STEPPER_process_run_mode+0x1e0>
    59c2:	80 91 26 07 	lds	r24, 0x0726
    59c6:	88 23       	and	r24, r24
    59c8:	09 f0       	breq	.+2      	; 0x59cc <STEPPER_process_run_mode+0x1c>
    59ca:	5a c0       	rjmp	.+180    	; 0x5a80 <STEPPER_process_run_mode+0xd0>
    59cc:	80 91 0e 07 	lds	r24, 0x070E
    59d0:	90 91 0f 07 	lds	r25, 0x070F
    59d4:	89 2b       	or	r24, r25
    59d6:	e9 f4       	brne	.+58     	; 0x5a12 <STEPPER_process_run_mode+0x62>
    59d8:	80 91 3d 04 	lds	r24, 0x043D
    59dc:	83 7e       	andi	r24, 0xE3	; 227
    59de:	80 93 3d 04 	sts	0x043D, r24
    59e2:	10 92 2f 07 	sts	0x072F, r1
    59e6:	80 91 3a 07 	lds	r24, 0x073A
    59ea:	88 23       	and	r24, r24
    59ec:	09 f4       	brne	.+2      	; 0x59f0 <STEPPER_process_run_mode+0x40>
    59ee:	5d c0       	rjmp	.+186    	; 0x5aaa <STEPPER_process_run_mode+0xfa>
    59f0:	60 91 28 07 	lds	r22, 0x0728
    59f4:	80 e0       	ldi	r24, 0x00	; 0
    59f6:	0e 94 89 21 	call	0x4312	; 0x4312 <STEPPER_stop>
    59fa:	e0 91 3c 07 	lds	r30, 0x073C
    59fe:	f0 91 3d 07 	lds	r31, 0x073D
    5a02:	30 97       	sbiw	r30, 0x00	; 0
    5a04:	09 f4       	brne	.+2      	; 0x5a08 <STEPPER_process_run_mode+0x58>
    5a06:	51 c0       	rjmp	.+162    	; 0x5aaa <STEPPER_process_run_mode+0xfa>
    5a08:	81 e0       	ldi	r24, 0x01	; 1
    5a0a:	80 83       	st	Z, r24
    5a0c:	10 92 3a 07 	sts	0x073A, r1
    5a10:	4c c0       	rjmp	.+152    	; 0x5aaa <STEPPER_process_run_mode+0xfa>
    5a12:	80 91 08 07 	lds	r24, 0x0708
    5a16:	81 30       	cpi	r24, 0x01	; 1
    5a18:	41 f4       	brne	.+16     	; 0x5a2a <STEPPER_process_run_mode+0x7a>
    5a1a:	80 91 1a 07 	lds	r24, 0x071A
    5a1e:	90 91 1b 07 	lds	r25, 0x071B
    5a22:	01 97       	sbiw	r24, 0x01	; 1
    5a24:	11 f4       	brne	.+4      	; 0x5a2a <STEPPER_process_run_mode+0x7a>
    5a26:	11 e0       	ldi	r17, 0x01	; 1
    5a28:	02 c0       	rjmp	.+4      	; 0x5a2e <STEPPER_process_run_mode+0x7e>
    5a2a:	11 23       	and	r17, r17
    5a2c:	f1 f1       	breq	.+124    	; 0x5aaa <STEPPER_process_run_mode+0xfa>
    5a2e:	e0 91 2d 07 	lds	r30, 0x072D
    5a32:	f0 e0       	ldi	r31, 0x00	; 0
    5a34:	e4 59       	subi	r30, 0x94	; 148
    5a36:	fc 4f       	sbci	r31, 0xFC	; 252
    5a38:	90 91 3d 04 	lds	r25, 0x043D
    5a3c:	93 7e       	andi	r25, 0xE3	; 227
    5a3e:	80 81       	ld	r24, Z
    5a40:	89 2b       	or	r24, r25
    5a42:	80 93 3d 04 	sts	0x043D, r24
    5a46:	80 91 2b 07 	lds	r24, 0x072B
    5a4a:	88 23       	and	r24, r24
    5a4c:	21 f4       	brne	.+8      	; 0x5a56 <STEPPER_process_run_mode+0xa6>
    5a4e:	80 91 2d 07 	lds	r24, 0x072D
    5a52:	8f 5f       	subi	r24, 0xFF	; 255
    5a54:	03 c0       	rjmp	.+6      	; 0x5a5c <STEPPER_process_run_mode+0xac>
    5a56:	80 91 2d 07 	lds	r24, 0x072D
    5a5a:	81 50       	subi	r24, 0x01	; 1
    5a5c:	80 93 2d 07 	sts	0x072D, r24
    5a60:	80 91 2d 07 	lds	r24, 0x072D
    5a64:	83 70       	andi	r24, 0x03	; 3
    5a66:	80 93 2d 07 	sts	0x072D, r24
    5a6a:	81 e0       	ldi	r24, 0x01	; 1
    5a6c:	80 93 2f 07 	sts	0x072F, r24
    5a70:	80 91 08 07 	lds	r24, 0x0708
    5a74:	81 30       	cpi	r24, 0x01	; 1
    5a76:	c9 f4       	brne	.+50     	; 0x5aaa <STEPPER_process_run_mode+0xfa>
    5a78:	80 e0       	ldi	r24, 0x00	; 0
    5a7a:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <STEPPER_process_step_mode>
    5a7e:	15 c0       	rjmp	.+42     	; 0x5aaa <STEPPER_process_run_mode+0xfa>
    5a80:	90 91 3d 04 	lds	r25, 0x043D
    5a84:	93 7e       	andi	r25, 0xE3	; 227
    5a86:	90 93 3d 04 	sts	0x043D, r25
    5a8a:	e0 91 2d 07 	lds	r30, 0x072D
    5a8e:	f0 e0       	ldi	r31, 0x00	; 0
    5a90:	e4 59       	subi	r30, 0x94	; 148
    5a92:	fc 4f       	sbci	r31, 0xFC	; 252
    5a94:	80 81       	ld	r24, Z
    5a96:	89 2b       	or	r24, r25
    5a98:	80 93 3d 04 	sts	0x043D, r24
    5a9c:	82 e0       	ldi	r24, 0x02	; 2
    5a9e:	80 93 2f 07 	sts	0x072F, r24
    5aa2:	10 92 0f 07 	sts	0x070F, r1
    5aa6:	10 92 0e 07 	sts	0x070E, r1
    5aaa:	80 91 27 07 	lds	r24, 0x0727
    5aae:	88 23       	and	r24, r24
    5ab0:	09 f0       	breq	.+2      	; 0x5ab4 <STEPPER_process_run_mode+0x104>
    5ab2:	59 c0       	rjmp	.+178    	; 0x5b66 <STEPPER_process_run_mode+0x1b6>
    5ab4:	80 91 10 07 	lds	r24, 0x0710
    5ab8:	90 91 11 07 	lds	r25, 0x0711
    5abc:	89 2b       	or	r24, r25
    5abe:	e9 f4       	brne	.+58     	; 0x5afa <STEPPER_process_run_mode+0x14a>
    5ac0:	80 91 3d 04 	lds	r24, 0x043D
    5ac4:	8f 71       	andi	r24, 0x1F	; 31
    5ac6:	80 93 3d 04 	sts	0x043D, r24
    5aca:	10 92 30 07 	sts	0x0730, r1
    5ace:	80 91 3b 07 	lds	r24, 0x073B
    5ad2:	88 23       	and	r24, r24
    5ad4:	09 f4       	brne	.+2      	; 0x5ad8 <STEPPER_process_run_mode+0x128>
    5ad6:	5c c0       	rjmp	.+184    	; 0x5b90 <STEPPER_process_run_mode+0x1e0>
    5ad8:	60 91 29 07 	lds	r22, 0x0729
    5adc:	81 e0       	ldi	r24, 0x01	; 1
    5ade:	0e 94 89 21 	call	0x4312	; 0x4312 <STEPPER_stop>
    5ae2:	e0 91 3c 07 	lds	r30, 0x073C
    5ae6:	f0 91 3d 07 	lds	r31, 0x073D
    5aea:	30 97       	sbiw	r30, 0x00	; 0
    5aec:	09 f4       	brne	.+2      	; 0x5af0 <STEPPER_process_run_mode+0x140>
    5aee:	50 c0       	rjmp	.+160    	; 0x5b90 <STEPPER_process_run_mode+0x1e0>
    5af0:	81 e0       	ldi	r24, 0x01	; 1
    5af2:	81 83       	std	Z+1, r24	; 0x01
    5af4:	10 92 3b 07 	sts	0x073B, r1
    5af8:	4b c0       	rjmp	.+150    	; 0x5b90 <STEPPER_process_run_mode+0x1e0>
    5afa:	80 91 09 07 	lds	r24, 0x0709
    5afe:	81 30       	cpi	r24, 0x01	; 1
    5b00:	41 f4       	brne	.+16     	; 0x5b12 <STEPPER_process_run_mode+0x162>
    5b02:	80 91 1c 07 	lds	r24, 0x071C
    5b06:	90 91 1d 07 	lds	r25, 0x071D
    5b0a:	01 97       	sbiw	r24, 0x01	; 1
    5b0c:	11 f4       	brne	.+4      	; 0x5b12 <STEPPER_process_run_mode+0x162>
    5b0e:	01 e0       	ldi	r16, 0x01	; 1
    5b10:	02 c0       	rjmp	.+4      	; 0x5b16 <STEPPER_process_run_mode+0x166>
    5b12:	00 23       	and	r16, r16
    5b14:	e9 f1       	breq	.+122    	; 0x5b90 <STEPPER_process_run_mode+0x1e0>
    5b16:	e0 91 2e 07 	lds	r30, 0x072E
    5b1a:	f0 e0       	ldi	r31, 0x00	; 0
    5b1c:	e0 59       	subi	r30, 0x90	; 144
    5b1e:	fc 4f       	sbci	r31, 0xFC	; 252
    5b20:	90 91 3d 04 	lds	r25, 0x043D
    5b24:	9f 71       	andi	r25, 0x1F	; 31
    5b26:	80 81       	ld	r24, Z
    5b28:	89 2b       	or	r24, r25
    5b2a:	80 93 3d 04 	sts	0x043D, r24
    5b2e:	80 91 2c 07 	lds	r24, 0x072C
    5b32:	88 23       	and	r24, r24
    5b34:	21 f4       	brne	.+8      	; 0x5b3e <STEPPER_process_run_mode+0x18e>
    5b36:	80 91 2e 07 	lds	r24, 0x072E
    5b3a:	8f 5f       	subi	r24, 0xFF	; 255
    5b3c:	03 c0       	rjmp	.+6      	; 0x5b44 <STEPPER_process_run_mode+0x194>
    5b3e:	80 91 2e 07 	lds	r24, 0x072E
    5b42:	81 50       	subi	r24, 0x01	; 1
    5b44:	80 93 2e 07 	sts	0x072E, r24
    5b48:	80 91 2e 07 	lds	r24, 0x072E
    5b4c:	83 70       	andi	r24, 0x03	; 3
    5b4e:	80 93 2e 07 	sts	0x072E, r24
    5b52:	81 e0       	ldi	r24, 0x01	; 1
    5b54:	80 93 30 07 	sts	0x0730, r24
    5b58:	80 91 09 07 	lds	r24, 0x0709
    5b5c:	81 30       	cpi	r24, 0x01	; 1
    5b5e:	c1 f4       	brne	.+48     	; 0x5b90 <STEPPER_process_run_mode+0x1e0>
    5b60:	0e 94 db 2d 	call	0x5bb6	; 0x5bb6 <STEPPER_process_step_mode>
    5b64:	15 c0       	rjmp	.+42     	; 0x5b90 <STEPPER_process_run_mode+0x1e0>
    5b66:	90 91 3d 04 	lds	r25, 0x043D
    5b6a:	9f 71       	andi	r25, 0x1F	; 31
    5b6c:	90 93 3d 04 	sts	0x043D, r25
    5b70:	e0 91 2e 07 	lds	r30, 0x072E
    5b74:	f0 e0       	ldi	r31, 0x00	; 0
    5b76:	e0 59       	subi	r30, 0x90	; 144
    5b78:	fc 4f       	sbci	r31, 0xFC	; 252
    5b7a:	80 81       	ld	r24, Z
    5b7c:	89 2b       	or	r24, r25
    5b7e:	80 93 3d 04 	sts	0x043D, r24
    5b82:	82 e0       	ldi	r24, 0x02	; 2
    5b84:	80 93 30 07 	sts	0x0730, r24
    5b88:	10 92 11 07 	sts	0x0711, r1
    5b8c:	10 92 10 07 	sts	0x0710, r1
    5b90:	80 91 31 07 	lds	r24, 0x0731
    5b94:	88 23       	and	r24, r24
    5b96:	31 f4       	brne	.+12     	; 0x5ba4 <STEPPER_process_run_mode+0x1f4>
    5b98:	8d e3       	ldi	r24, 0x3D	; 61
    5b9a:	94 e0       	ldi	r25, 0x04	; 4
    5b9c:	61 2f       	mov	r22, r17
    5b9e:	40 2f       	mov	r20, r16
    5ba0:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <STEPPER_process_pwm>
    5ba4:	88 b1       	in	r24, 0x08	; 8
    5ba6:	83 70       	andi	r24, 0x03	; 3
    5ba8:	90 91 3d 04 	lds	r25, 0x043D
    5bac:	89 2b       	or	r24, r25
    5bae:	88 b9       	out	0x08, r24	; 8
    5bb0:	1f 91       	pop	r17
    5bb2:	0f 91       	pop	r16
    5bb4:	08 95       	ret

00005bb6 <STEPPER_process_step_mode>:
    5bb6:	88 23       	and	r24, r24
    5bb8:	21 f0       	breq	.+8      	; 0x5bc2 <STEPPER_process_step_mode+0xc>
    5bba:	81 30       	cpi	r24, 0x01	; 1
    5bbc:	09 f0       	breq	.+2      	; 0x5bc0 <STEPPER_process_step_mode+0xa>
    5bbe:	4e c0       	rjmp	.+156    	; 0x5c5c <STEPPER_process_step_mode+0xa6>
    5bc0:	27 c0       	rjmp	.+78     	; 0x5c10 <STEPPER_process_step_mode+0x5a>
    5bc2:	80 91 1a 07 	lds	r24, 0x071A
    5bc6:	90 91 1b 07 	lds	r25, 0x071B
    5bca:	89 2b       	or	r24, r25
    5bcc:	49 f0       	breq	.+18     	; 0x5be0 <STEPPER_process_step_mode+0x2a>
    5bce:	80 91 1a 07 	lds	r24, 0x071A
    5bd2:	90 91 1b 07 	lds	r25, 0x071B
    5bd6:	01 97       	sbiw	r24, 0x01	; 1
    5bd8:	90 93 1b 07 	sts	0x071B, r25
    5bdc:	80 93 1a 07 	sts	0x071A, r24
    5be0:	80 91 3a 07 	lds	r24, 0x073A
    5be4:	88 23       	and	r24, r24
    5be6:	d1 f5       	brne	.+116    	; 0x5c5c <STEPPER_process_step_mode+0xa6>
    5be8:	20 91 1a 07 	lds	r18, 0x071A
    5bec:	30 91 1b 07 	lds	r19, 0x071B
    5bf0:	80 91 1e 07 	lds	r24, 0x071E
    5bf4:	90 91 1f 07 	lds	r25, 0x071F
    5bf8:	28 17       	cp	r18, r24
    5bfa:	39 07       	cpc	r19, r25
    5bfc:	79 f5       	brne	.+94     	; 0x5c5c <STEPPER_process_step_mode+0xa6>
    5bfe:	80 e0       	ldi	r24, 0x00	; 0
    5c00:	60 e0       	ldi	r22, 0x00	; 0
    5c02:	70 e0       	ldi	r23, 0x00	; 0
    5c04:	0e 94 c0 20 	call	0x4180	; 0x4180 <STEPPER_set_speed>
    5c08:	81 e0       	ldi	r24, 0x01	; 1
    5c0a:	80 93 3a 07 	sts	0x073A, r24
    5c0e:	08 95       	ret
    5c10:	80 91 1c 07 	lds	r24, 0x071C
    5c14:	90 91 1d 07 	lds	r25, 0x071D
    5c18:	89 2b       	or	r24, r25
    5c1a:	49 f0       	breq	.+18     	; 0x5c2e <STEPPER_process_step_mode+0x78>
    5c1c:	80 91 1c 07 	lds	r24, 0x071C
    5c20:	90 91 1d 07 	lds	r25, 0x071D
    5c24:	01 97       	sbiw	r24, 0x01	; 1
    5c26:	90 93 1d 07 	sts	0x071D, r25
    5c2a:	80 93 1c 07 	sts	0x071C, r24
    5c2e:	80 91 3b 07 	lds	r24, 0x073B
    5c32:	88 23       	and	r24, r24
    5c34:	99 f4       	brne	.+38     	; 0x5c5c <STEPPER_process_step_mode+0xa6>
    5c36:	20 91 1c 07 	lds	r18, 0x071C
    5c3a:	30 91 1d 07 	lds	r19, 0x071D
    5c3e:	80 91 20 07 	lds	r24, 0x0720
    5c42:	90 91 21 07 	lds	r25, 0x0721
    5c46:	28 17       	cp	r18, r24
    5c48:	39 07       	cpc	r19, r25
    5c4a:	41 f4       	brne	.+16     	; 0x5c5c <STEPPER_process_step_mode+0xa6>
    5c4c:	81 e0       	ldi	r24, 0x01	; 1
    5c4e:	60 e0       	ldi	r22, 0x00	; 0
    5c50:	70 e0       	ldi	r23, 0x00	; 0
    5c52:	0e 94 c0 20 	call	0x4180	; 0x4180 <STEPPER_set_speed>
    5c56:	81 e0       	ldi	r24, 0x01	; 1
    5c58:	80 93 3b 07 	sts	0x073B, r24
    5c5c:	08 95       	ret

00005c5e <TMRSRVC_process>:
    5c5e:	ff 92       	push	r15
    5c60:	0f 93       	push	r16
    5c62:	1f 93       	push	r17
    5c64:	cf 93       	push	r28
    5c66:	df 93       	push	r29
    5c68:	80 91 78 07 	lds	r24, 0x0778
    5c6c:	88 23       	and	r24, r24
    5c6e:	09 f4       	brne	.+2      	; 0x5c72 <TMRSRVC_process+0x14>
    5c70:	59 c0       	rjmp	.+178    	; 0x5d24 <TMRSRVC_process+0xc6>
    5c72:	00 91 79 07 	lds	r16, 0x0779
    5c76:	10 91 7a 07 	lds	r17, 0x077A
    5c7a:	f8 01       	movw	r30, r16
    5c7c:	c0 81       	ld	r28, Z
    5c7e:	d1 81       	ldd	r29, Z+1	; 0x01
    5c80:	8c 81       	ldd	r24, Y+4	; 0x04
    5c82:	9d 81       	ldd	r25, Y+5	; 0x05
    5c84:	01 97       	sbiw	r24, 0x01	; 1
    5c86:	9d 83       	std	Y+5, r25	; 0x05
    5c88:	8c 83       	std	Y+4, r24	; 0x04
    5c8a:	18 16       	cp	r1, r24
    5c8c:	19 06       	cpc	r1, r25
    5c8e:	0c f4       	brge	.+2      	; 0x5c92 <TMRSRVC_process+0x34>
    5c90:	49 c0       	rjmp	.+146    	; 0x5d24 <TMRSRVC_process+0xc6>
    5c92:	89 81       	ldd	r24, Y+1	; 0x01
    5c94:	80 ff       	sbrs	r24, 0
    5c96:	05 c0       	rjmp	.+10     	; 0x5ca2 <TMRSRVC_process+0x44>
    5c98:	8e 81       	ldd	r24, Y+6	; 0x06
    5c9a:	88 23       	and	r24, r24
    5c9c:	11 f4       	brne	.+4      	; 0x5ca2 <TMRSRVC_process+0x44>
    5c9e:	81 e0       	ldi	r24, 0x01	; 1
    5ca0:	8e 83       	std	Y+6, r24	; 0x06
    5ca2:	89 81       	ldd	r24, Y+1	; 0x01
    5ca4:	81 ff       	sbrs	r24, 1
    5ca6:	03 c0       	rjmp	.+6      	; 0x5cae <TMRSRVC_process+0x50>
    5ca8:	ef 81       	ldd	r30, Y+7	; 0x07
    5caa:	f8 85       	ldd	r31, Y+8	; 0x08
    5cac:	09 95       	icall
    5cae:	80 91 78 07 	lds	r24, 0x0778
    5cb2:	82 30       	cpi	r24, 0x02	; 2
    5cb4:	a8 f0       	brcs	.+42     	; 0x5ce0 <TMRSRVC_process+0x82>
    5cb6:	f8 01       	movw	r30, r16
    5cb8:	82 81       	ldd	r24, Z+2	; 0x02
    5cba:	93 81       	ldd	r25, Z+3	; 0x03
    5cbc:	90 93 7a 07 	sts	0x077A, r25
    5cc0:	80 93 79 07 	sts	0x0779, r24
    5cc4:	13 82       	std	Z+3, r1	; 0x03
    5cc6:	12 82       	std	Z+2, r1	; 0x02
    5cc8:	e0 91 00 00 	lds	r30, 0x0000
    5ccc:	f0 91 01 00 	lds	r31, 0x0001
    5cd0:	84 81       	ldd	r24, Z+4	; 0x04
    5cd2:	95 81       	ldd	r25, Z+5	; 0x05
    5cd4:	18 16       	cp	r1, r24
    5cd6:	19 06       	cpc	r1, r25
    5cd8:	3c f0       	brlt	.+14     	; 0x5ce8 <TMRSRVC_process+0x8a>
    5cda:	ff 24       	eor	r15, r15
    5cdc:	f3 94       	inc	r15
    5cde:	05 c0       	rjmp	.+10     	; 0x5cea <TMRSRVC_process+0x8c>
    5ce0:	10 92 7a 07 	sts	0x077A, r1
    5ce4:	10 92 79 07 	sts	0x0779, r1
    5ce8:	ff 24       	eor	r15, r15
    5cea:	80 91 78 07 	lds	r24, 0x0778
    5cee:	81 50       	subi	r24, 0x01	; 1
    5cf0:	80 93 78 07 	sts	0x0778, r24
    5cf4:	80 91 78 07 	lds	r24, 0x0778
    5cf8:	88 23       	and	r24, r24
    5cfa:	11 f4       	brne	.+4      	; 0x5d00 <TMRSRVC_process+0xa2>
    5cfc:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <TMRSRVC_stop>
    5d00:	89 81       	ldd	r24, Y+1	; 0x01
    5d02:	82 ff       	sbrs	r24, 2
    5d04:	08 c0       	rjmp	.+16     	; 0x5d16 <TMRSRVC_process+0xb8>
    5d06:	8a 81       	ldd	r24, Y+2	; 0x02
    5d08:	9b 81       	ldd	r25, Y+3	; 0x03
    5d0a:	9d 83       	std	Y+5, r25	; 0x05
    5d0c:	8c 83       	std	Y+4, r24	; 0x04
    5d0e:	c8 01       	movw	r24, r16
    5d10:	0e 94 0f 2a 	call	0x541e	; 0x541e <TMRSRVC_insert>
    5d14:	08 c0       	rjmp	.+16     	; 0x5d26 <TMRSRVC_process+0xc8>
    5d16:	c8 01       	movw	r24, r16
    5d18:	0e 94 a3 37 	call	0x6f46	; 0x6f46 <free>
    5d1c:	89 81       	ldd	r24, Y+1	; 0x01
    5d1e:	8f 7e       	andi	r24, 0xEF	; 239
    5d20:	89 83       	std	Y+1, r24	; 0x01
    5d22:	01 c0       	rjmp	.+2      	; 0x5d26 <TMRSRVC_process+0xc8>
    5d24:	ff 24       	eor	r15, r15
    5d26:	8f 2d       	mov	r24, r15
    5d28:	df 91       	pop	r29
    5d2a:	cf 91       	pop	r28
    5d2c:	1f 91       	pop	r17
    5d2e:	0f 91       	pop	r16
    5d30:	ff 90       	pop	r15
    5d32:	08 95       	ret

00005d34 <TMRSRVC_stop>:
    5d34:	10 92 3c 04 	sts	0x043C, r1
    5d38:	08 95       	ret

00005d3a <STEPPER_process_pwm>:
    5d3a:	fc 01       	movw	r30, r24
    5d3c:	80 91 2f 07 	lds	r24, 0x072F
    5d40:	82 30       	cpi	r24, 0x02	; 2
    5d42:	69 f4       	brne	.+26     	; 0x5d5e <STEPPER_process_pwm+0x24>
    5d44:	80 91 41 04 	lds	r24, 0x0441
    5d48:	91 e0       	ldi	r25, 0x01	; 1
    5d4a:	89 27       	eor	r24, r25
    5d4c:	80 93 41 04 	sts	0x0441, r24
    5d50:	88 23       	and	r24, r24
    5d52:	09 f0       	breq	.+2      	; 0x5d56 <STEPPER_process_pwm+0x1c>
    5d54:	3e c0       	rjmp	.+124    	; 0x5dd2 <STEPPER_process_pwm+0x98>
    5d56:	80 81       	ld	r24, Z
    5d58:	83 7e       	andi	r24, 0xE3	; 227
    5d5a:	80 83       	st	Z, r24
    5d5c:	3a c0       	rjmp	.+116    	; 0x5dd2 <STEPPER_process_pwm+0x98>
    5d5e:	80 91 0e 07 	lds	r24, 0x070E
    5d62:	90 91 0f 07 	lds	r25, 0x070F
    5d66:	c3 97       	sbiw	r24, 0x33	; 51
    5d68:	a4 f5       	brge	.+104    	; 0x5dd2 <STEPPER_process_pwm+0x98>
    5d6a:	66 23       	and	r22, r22
    5d6c:	d1 f0       	breq	.+52     	; 0x5da2 <STEPPER_process_pwm+0x68>
    5d6e:	20 91 0e 07 	lds	r18, 0x070E
    5d72:	30 91 0f 07 	lds	r19, 0x070F
    5d76:	80 e6       	ldi	r24, 0x60	; 96
    5d78:	90 e0       	ldi	r25, 0x00	; 0
    5d7a:	bc 01       	movw	r22, r24
    5d7c:	26 9f       	mul	r18, r22
    5d7e:	c0 01       	movw	r24, r0
    5d80:	27 9f       	mul	r18, r23
    5d82:	90 0d       	add	r25, r0
    5d84:	36 9f       	mul	r19, r22
    5d86:	90 0d       	add	r25, r0
    5d88:	11 24       	eor	r1, r1
    5d8a:	88 0f       	add	r24, r24
    5d8c:	89 2f       	mov	r24, r25
    5d8e:	88 1f       	adc	r24, r24
    5d90:	99 0b       	sbc	r25, r25
    5d92:	90 93 23 07 	sts	0x0723, r25
    5d96:	80 93 22 07 	sts	0x0722, r24
    5d9a:	81 e0       	ldi	r24, 0x01	; 1
    5d9c:	80 93 3f 04 	sts	0x043F, r24
    5da0:	18 c0       	rjmp	.+48     	; 0x5dd2 <STEPPER_process_pwm+0x98>
    5da2:	80 91 3f 04 	lds	r24, 0x043F
    5da6:	88 23       	and	r24, r24
    5da8:	a1 f0       	breq	.+40     	; 0x5dd2 <STEPPER_process_pwm+0x98>
    5daa:	80 91 22 07 	lds	r24, 0x0722
    5dae:	90 91 23 07 	lds	r25, 0x0723
    5db2:	01 97       	sbiw	r24, 0x01	; 1
    5db4:	90 93 23 07 	sts	0x0723, r25
    5db8:	80 93 22 07 	sts	0x0722, r24
    5dbc:	80 91 22 07 	lds	r24, 0x0722
    5dc0:	90 91 23 07 	lds	r25, 0x0723
    5dc4:	89 2b       	or	r24, r25
    5dc6:	29 f4       	brne	.+10     	; 0x5dd2 <STEPPER_process_pwm+0x98>
    5dc8:	80 81       	ld	r24, Z
    5dca:	83 7e       	andi	r24, 0xE3	; 227
    5dcc:	80 83       	st	Z, r24
    5dce:	10 92 3f 04 	sts	0x043F, r1
    5dd2:	80 91 30 07 	lds	r24, 0x0730
    5dd6:	82 30       	cpi	r24, 0x02	; 2
    5dd8:	69 f4       	brne	.+26     	; 0x5df4 <STEPPER_process_pwm+0xba>
    5dda:	80 91 40 04 	lds	r24, 0x0440
    5dde:	91 e0       	ldi	r25, 0x01	; 1
    5de0:	89 27       	eor	r24, r25
    5de2:	80 93 40 04 	sts	0x0440, r24
    5de6:	88 23       	and	r24, r24
    5de8:	09 f0       	breq	.+2      	; 0x5dec <STEPPER_process_pwm+0xb2>
    5dea:	3e c0       	rjmp	.+124    	; 0x5e68 <STEPPER_process_pwm+0x12e>
    5dec:	80 81       	ld	r24, Z
    5dee:	8f 71       	andi	r24, 0x1F	; 31
    5df0:	80 83       	st	Z, r24
    5df2:	08 95       	ret
    5df4:	80 91 10 07 	lds	r24, 0x0710
    5df8:	90 91 11 07 	lds	r25, 0x0711
    5dfc:	c3 97       	sbiw	r24, 0x33	; 51
    5dfe:	a4 f5       	brge	.+104    	; 0x5e68 <STEPPER_process_pwm+0x12e>
    5e00:	44 23       	and	r20, r20
    5e02:	d1 f0       	breq	.+52     	; 0x5e38 <STEPPER_process_pwm+0xfe>
    5e04:	20 91 10 07 	lds	r18, 0x0710
    5e08:	30 91 11 07 	lds	r19, 0x0711
    5e0c:	80 e6       	ldi	r24, 0x60	; 96
    5e0e:	90 e0       	ldi	r25, 0x00	; 0
    5e10:	ac 01       	movw	r20, r24
    5e12:	24 9f       	mul	r18, r20
    5e14:	c0 01       	movw	r24, r0
    5e16:	25 9f       	mul	r18, r21
    5e18:	90 0d       	add	r25, r0
    5e1a:	34 9f       	mul	r19, r20
    5e1c:	90 0d       	add	r25, r0
    5e1e:	11 24       	eor	r1, r1
    5e20:	88 0f       	add	r24, r24
    5e22:	89 2f       	mov	r24, r25
    5e24:	88 1f       	adc	r24, r24
    5e26:	99 0b       	sbc	r25, r25
    5e28:	90 93 25 07 	sts	0x0725, r25
    5e2c:	80 93 24 07 	sts	0x0724, r24
    5e30:	81 e0       	ldi	r24, 0x01	; 1
    5e32:	80 93 3e 04 	sts	0x043E, r24
    5e36:	08 95       	ret
    5e38:	80 91 3e 04 	lds	r24, 0x043E
    5e3c:	88 23       	and	r24, r24
    5e3e:	a1 f0       	breq	.+40     	; 0x5e68 <STEPPER_process_pwm+0x12e>
    5e40:	80 91 24 07 	lds	r24, 0x0724
    5e44:	90 91 25 07 	lds	r25, 0x0725
    5e48:	01 97       	sbiw	r24, 0x01	; 1
    5e4a:	90 93 25 07 	sts	0x0725, r25
    5e4e:	80 93 24 07 	sts	0x0724, r24
    5e52:	80 91 24 07 	lds	r24, 0x0724
    5e56:	90 91 25 07 	lds	r25, 0x0725
    5e5a:	89 2b       	or	r24, r25
    5e5c:	29 f4       	brne	.+10     	; 0x5e68 <STEPPER_process_pwm+0x12e>
    5e5e:	80 81       	ld	r24, Z
    5e60:	8f 71       	andi	r24, 0x1F	; 31
    5e62:	80 83       	st	Z, r24
    5e64:	10 92 3e 04 	sts	0x043E, r1
    5e68:	08 95       	ret

00005e6a <__subsf3>:
    5e6a:	50 58       	subi	r21, 0x80	; 128

00005e6c <__addsf3>:
    5e6c:	bb 27       	eor	r27, r27
    5e6e:	aa 27       	eor	r26, r26
    5e70:	0e d0       	rcall	.+28     	; 0x5e8e <__addsf3x>
    5e72:	75 c1       	rjmp	.+746    	; 0x615e <__fp_round>
    5e74:	66 d1       	rcall	.+716    	; 0x6142 <__fp_pscA>
    5e76:	30 f0       	brcs	.+12     	; 0x5e84 <__addsf3+0x18>
    5e78:	6b d1       	rcall	.+726    	; 0x6150 <__fp_pscB>
    5e7a:	20 f0       	brcs	.+8      	; 0x5e84 <__addsf3+0x18>
    5e7c:	31 f4       	brne	.+12     	; 0x5e8a <__addsf3+0x1e>
    5e7e:	9f 3f       	cpi	r25, 0xFF	; 255
    5e80:	11 f4       	brne	.+4      	; 0x5e86 <__addsf3+0x1a>
    5e82:	1e f4       	brtc	.+6      	; 0x5e8a <__addsf3+0x1e>
    5e84:	5b c1       	rjmp	.+694    	; 0x613c <__fp_nan>
    5e86:	0e f4       	brtc	.+2      	; 0x5e8a <__addsf3+0x1e>
    5e88:	e0 95       	com	r30
    5e8a:	e7 fb       	bst	r30, 7
    5e8c:	51 c1       	rjmp	.+674    	; 0x6130 <__fp_inf>

00005e8e <__addsf3x>:
    5e8e:	e9 2f       	mov	r30, r25
    5e90:	77 d1       	rcall	.+750    	; 0x6180 <__fp_split3>
    5e92:	80 f3       	brcs	.-32     	; 0x5e74 <__addsf3+0x8>
    5e94:	ba 17       	cp	r27, r26
    5e96:	62 07       	cpc	r22, r18
    5e98:	73 07       	cpc	r23, r19
    5e9a:	84 07       	cpc	r24, r20
    5e9c:	95 07       	cpc	r25, r21
    5e9e:	18 f0       	brcs	.+6      	; 0x5ea6 <__addsf3x+0x18>
    5ea0:	71 f4       	brne	.+28     	; 0x5ebe <__addsf3x+0x30>
    5ea2:	9e f5       	brtc	.+102    	; 0x5f0a <__addsf3x+0x7c>
    5ea4:	8f c1       	rjmp	.+798    	; 0x61c4 <__fp_zero>
    5ea6:	0e f4       	brtc	.+2      	; 0x5eaa <__addsf3x+0x1c>
    5ea8:	e0 95       	com	r30
    5eaa:	0b 2e       	mov	r0, r27
    5eac:	ba 2f       	mov	r27, r26
    5eae:	a0 2d       	mov	r26, r0
    5eb0:	0b 01       	movw	r0, r22
    5eb2:	b9 01       	movw	r22, r18
    5eb4:	90 01       	movw	r18, r0
    5eb6:	0c 01       	movw	r0, r24
    5eb8:	ca 01       	movw	r24, r20
    5eba:	a0 01       	movw	r20, r0
    5ebc:	11 24       	eor	r1, r1
    5ebe:	ff 27       	eor	r31, r31
    5ec0:	59 1b       	sub	r21, r25
    5ec2:	99 f0       	breq	.+38     	; 0x5eea <__addsf3x+0x5c>
    5ec4:	59 3f       	cpi	r21, 0xF9	; 249
    5ec6:	50 f4       	brcc	.+20     	; 0x5edc <__addsf3x+0x4e>
    5ec8:	50 3e       	cpi	r21, 0xE0	; 224
    5eca:	68 f1       	brcs	.+90     	; 0x5f26 <__addsf3x+0x98>
    5ecc:	1a 16       	cp	r1, r26
    5ece:	f0 40       	sbci	r31, 0x00	; 0
    5ed0:	a2 2f       	mov	r26, r18
    5ed2:	23 2f       	mov	r18, r19
    5ed4:	34 2f       	mov	r19, r20
    5ed6:	44 27       	eor	r20, r20
    5ed8:	58 5f       	subi	r21, 0xF8	; 248
    5eda:	f3 cf       	rjmp	.-26     	; 0x5ec2 <__addsf3x+0x34>
    5edc:	46 95       	lsr	r20
    5ede:	37 95       	ror	r19
    5ee0:	27 95       	ror	r18
    5ee2:	a7 95       	ror	r26
    5ee4:	f0 40       	sbci	r31, 0x00	; 0
    5ee6:	53 95       	inc	r21
    5ee8:	c9 f7       	brne	.-14     	; 0x5edc <__addsf3x+0x4e>
    5eea:	7e f4       	brtc	.+30     	; 0x5f0a <__addsf3x+0x7c>
    5eec:	1f 16       	cp	r1, r31
    5eee:	ba 0b       	sbc	r27, r26
    5ef0:	62 0b       	sbc	r22, r18
    5ef2:	73 0b       	sbc	r23, r19
    5ef4:	84 0b       	sbc	r24, r20
    5ef6:	ba f0       	brmi	.+46     	; 0x5f26 <__addsf3x+0x98>
    5ef8:	91 50       	subi	r25, 0x01	; 1
    5efa:	a1 f0       	breq	.+40     	; 0x5f24 <__addsf3x+0x96>
    5efc:	ff 0f       	add	r31, r31
    5efe:	bb 1f       	adc	r27, r27
    5f00:	66 1f       	adc	r22, r22
    5f02:	77 1f       	adc	r23, r23
    5f04:	88 1f       	adc	r24, r24
    5f06:	c2 f7       	brpl	.-16     	; 0x5ef8 <__addsf3x+0x6a>
    5f08:	0e c0       	rjmp	.+28     	; 0x5f26 <__addsf3x+0x98>
    5f0a:	ba 0f       	add	r27, r26
    5f0c:	62 1f       	adc	r22, r18
    5f0e:	73 1f       	adc	r23, r19
    5f10:	84 1f       	adc	r24, r20
    5f12:	48 f4       	brcc	.+18     	; 0x5f26 <__addsf3x+0x98>
    5f14:	87 95       	ror	r24
    5f16:	77 95       	ror	r23
    5f18:	67 95       	ror	r22
    5f1a:	b7 95       	ror	r27
    5f1c:	f7 95       	ror	r31
    5f1e:	9e 3f       	cpi	r25, 0xFE	; 254
    5f20:	08 f0       	brcs	.+2      	; 0x5f24 <__addsf3x+0x96>
    5f22:	b3 cf       	rjmp	.-154    	; 0x5e8a <__addsf3+0x1e>
    5f24:	93 95       	inc	r25
    5f26:	88 0f       	add	r24, r24
    5f28:	08 f0       	brcs	.+2      	; 0x5f2c <__addsf3x+0x9e>
    5f2a:	99 27       	eor	r25, r25
    5f2c:	ee 0f       	add	r30, r30
    5f2e:	97 95       	ror	r25
    5f30:	87 95       	ror	r24
    5f32:	08 95       	ret

00005f34 <__cmpsf2>:
    5f34:	d9 d0       	rcall	.+434    	; 0x60e8 <__fp_cmp>
    5f36:	08 f4       	brcc	.+2      	; 0x5f3a <__cmpsf2+0x6>
    5f38:	81 e0       	ldi	r24, 0x01	; 1
    5f3a:	08 95       	ret

00005f3c <__divsf3>:
    5f3c:	0c d0       	rcall	.+24     	; 0x5f56 <__divsf3x>
    5f3e:	0f c1       	rjmp	.+542    	; 0x615e <__fp_round>
    5f40:	07 d1       	rcall	.+526    	; 0x6150 <__fp_pscB>
    5f42:	40 f0       	brcs	.+16     	; 0x5f54 <__divsf3+0x18>
    5f44:	fe d0       	rcall	.+508    	; 0x6142 <__fp_pscA>
    5f46:	30 f0       	brcs	.+12     	; 0x5f54 <__divsf3+0x18>
    5f48:	21 f4       	brne	.+8      	; 0x5f52 <__divsf3+0x16>
    5f4a:	5f 3f       	cpi	r21, 0xFF	; 255
    5f4c:	19 f0       	breq	.+6      	; 0x5f54 <__divsf3+0x18>
    5f4e:	f0 c0       	rjmp	.+480    	; 0x6130 <__fp_inf>
    5f50:	51 11       	cpse	r21, r1
    5f52:	39 c1       	rjmp	.+626    	; 0x61c6 <__fp_szero>
    5f54:	f3 c0       	rjmp	.+486    	; 0x613c <__fp_nan>

00005f56 <__divsf3x>:
    5f56:	14 d1       	rcall	.+552    	; 0x6180 <__fp_split3>
    5f58:	98 f3       	brcs	.-26     	; 0x5f40 <__divsf3+0x4>

00005f5a <__divsf3_pse>:
    5f5a:	99 23       	and	r25, r25
    5f5c:	c9 f3       	breq	.-14     	; 0x5f50 <__divsf3+0x14>
    5f5e:	55 23       	and	r21, r21
    5f60:	b1 f3       	breq	.-20     	; 0x5f4e <__divsf3+0x12>
    5f62:	95 1b       	sub	r25, r21
    5f64:	55 0b       	sbc	r21, r21
    5f66:	bb 27       	eor	r27, r27
    5f68:	aa 27       	eor	r26, r26
    5f6a:	62 17       	cp	r22, r18
    5f6c:	73 07       	cpc	r23, r19
    5f6e:	84 07       	cpc	r24, r20
    5f70:	38 f0       	brcs	.+14     	; 0x5f80 <__divsf3_pse+0x26>
    5f72:	9f 5f       	subi	r25, 0xFF	; 255
    5f74:	5f 4f       	sbci	r21, 0xFF	; 255
    5f76:	22 0f       	add	r18, r18
    5f78:	33 1f       	adc	r19, r19
    5f7a:	44 1f       	adc	r20, r20
    5f7c:	aa 1f       	adc	r26, r26
    5f7e:	a9 f3       	breq	.-22     	; 0x5f6a <__divsf3_pse+0x10>
    5f80:	33 d0       	rcall	.+102    	; 0x5fe8 <__divsf3_pse+0x8e>
    5f82:	0e 2e       	mov	r0, r30
    5f84:	3a f0       	brmi	.+14     	; 0x5f94 <__divsf3_pse+0x3a>
    5f86:	e0 e8       	ldi	r30, 0x80	; 128
    5f88:	30 d0       	rcall	.+96     	; 0x5fea <__divsf3_pse+0x90>
    5f8a:	91 50       	subi	r25, 0x01	; 1
    5f8c:	50 40       	sbci	r21, 0x00	; 0
    5f8e:	e6 95       	lsr	r30
    5f90:	00 1c       	adc	r0, r0
    5f92:	ca f7       	brpl	.-14     	; 0x5f86 <__divsf3_pse+0x2c>
    5f94:	29 d0       	rcall	.+82     	; 0x5fe8 <__divsf3_pse+0x8e>
    5f96:	fe 2f       	mov	r31, r30
    5f98:	27 d0       	rcall	.+78     	; 0x5fe8 <__divsf3_pse+0x8e>
    5f9a:	66 0f       	add	r22, r22
    5f9c:	77 1f       	adc	r23, r23
    5f9e:	88 1f       	adc	r24, r24
    5fa0:	bb 1f       	adc	r27, r27
    5fa2:	26 17       	cp	r18, r22
    5fa4:	37 07       	cpc	r19, r23
    5fa6:	48 07       	cpc	r20, r24
    5fa8:	ab 07       	cpc	r26, r27
    5faa:	b0 e8       	ldi	r27, 0x80	; 128
    5fac:	09 f0       	breq	.+2      	; 0x5fb0 <__divsf3_pse+0x56>
    5fae:	bb 0b       	sbc	r27, r27
    5fb0:	80 2d       	mov	r24, r0
    5fb2:	bf 01       	movw	r22, r30
    5fb4:	ff 27       	eor	r31, r31
    5fb6:	93 58       	subi	r25, 0x83	; 131
    5fb8:	5f 4f       	sbci	r21, 0xFF	; 255
    5fba:	2a f0       	brmi	.+10     	; 0x5fc6 <__divsf3_pse+0x6c>
    5fbc:	9e 3f       	cpi	r25, 0xFE	; 254
    5fbe:	51 05       	cpc	r21, r1
    5fc0:	68 f0       	brcs	.+26     	; 0x5fdc <__divsf3_pse+0x82>
    5fc2:	b6 c0       	rjmp	.+364    	; 0x6130 <__fp_inf>
    5fc4:	00 c1       	rjmp	.+512    	; 0x61c6 <__fp_szero>
    5fc6:	5f 3f       	cpi	r21, 0xFF	; 255
    5fc8:	ec f3       	brlt	.-6      	; 0x5fc4 <__divsf3_pse+0x6a>
    5fca:	98 3e       	cpi	r25, 0xE8	; 232
    5fcc:	dc f3       	brlt	.-10     	; 0x5fc4 <__divsf3_pse+0x6a>
    5fce:	86 95       	lsr	r24
    5fd0:	77 95       	ror	r23
    5fd2:	67 95       	ror	r22
    5fd4:	b7 95       	ror	r27
    5fd6:	f7 95       	ror	r31
    5fd8:	9f 5f       	subi	r25, 0xFF	; 255
    5fda:	c9 f7       	brne	.-14     	; 0x5fce <__divsf3_pse+0x74>
    5fdc:	88 0f       	add	r24, r24
    5fde:	91 1d       	adc	r25, r1
    5fe0:	96 95       	lsr	r25
    5fe2:	87 95       	ror	r24
    5fe4:	97 f9       	bld	r25, 7
    5fe6:	08 95       	ret
    5fe8:	e1 e0       	ldi	r30, 0x01	; 1
    5fea:	66 0f       	add	r22, r22
    5fec:	77 1f       	adc	r23, r23
    5fee:	88 1f       	adc	r24, r24
    5ff0:	bb 1f       	adc	r27, r27
    5ff2:	62 17       	cp	r22, r18
    5ff4:	73 07       	cpc	r23, r19
    5ff6:	84 07       	cpc	r24, r20
    5ff8:	ba 07       	cpc	r27, r26
    5ffa:	20 f0       	brcs	.+8      	; 0x6004 <__divsf3_pse+0xaa>
    5ffc:	62 1b       	sub	r22, r18
    5ffe:	73 0b       	sbc	r23, r19
    6000:	84 0b       	sbc	r24, r20
    6002:	ba 0b       	sbc	r27, r26
    6004:	ee 1f       	adc	r30, r30
    6006:	88 f7       	brcc	.-30     	; 0x5fea <__divsf3_pse+0x90>
    6008:	e0 95       	com	r30
    600a:	08 95       	ret

0000600c <__fixsfsi>:
    600c:	04 d0       	rcall	.+8      	; 0x6016 <__fixunssfsi>
    600e:	68 94       	set
    6010:	b1 11       	cpse	r27, r1
    6012:	d9 c0       	rjmp	.+434    	; 0x61c6 <__fp_szero>
    6014:	08 95       	ret

00006016 <__fixunssfsi>:
    6016:	bc d0       	rcall	.+376    	; 0x6190 <__fp_splitA>
    6018:	88 f0       	brcs	.+34     	; 0x603c <__fixunssfsi+0x26>
    601a:	9f 57       	subi	r25, 0x7F	; 127
    601c:	90 f0       	brcs	.+36     	; 0x6042 <__fixunssfsi+0x2c>
    601e:	b9 2f       	mov	r27, r25
    6020:	99 27       	eor	r25, r25
    6022:	b7 51       	subi	r27, 0x17	; 23
    6024:	a0 f0       	brcs	.+40     	; 0x604e <__fixunssfsi+0x38>
    6026:	d1 f0       	breq	.+52     	; 0x605c <__fixunssfsi+0x46>
    6028:	66 0f       	add	r22, r22
    602a:	77 1f       	adc	r23, r23
    602c:	88 1f       	adc	r24, r24
    602e:	99 1f       	adc	r25, r25
    6030:	1a f0       	brmi	.+6      	; 0x6038 <__fixunssfsi+0x22>
    6032:	ba 95       	dec	r27
    6034:	c9 f7       	brne	.-14     	; 0x6028 <__fixunssfsi+0x12>
    6036:	12 c0       	rjmp	.+36     	; 0x605c <__fixunssfsi+0x46>
    6038:	b1 30       	cpi	r27, 0x01	; 1
    603a:	81 f0       	breq	.+32     	; 0x605c <__fixunssfsi+0x46>
    603c:	c3 d0       	rcall	.+390    	; 0x61c4 <__fp_zero>
    603e:	b1 e0       	ldi	r27, 0x01	; 1
    6040:	08 95       	ret
    6042:	c0 c0       	rjmp	.+384    	; 0x61c4 <__fp_zero>
    6044:	67 2f       	mov	r22, r23
    6046:	78 2f       	mov	r23, r24
    6048:	88 27       	eor	r24, r24
    604a:	b8 5f       	subi	r27, 0xF8	; 248
    604c:	39 f0       	breq	.+14     	; 0x605c <__fixunssfsi+0x46>
    604e:	b9 3f       	cpi	r27, 0xF9	; 249
    6050:	cc f3       	brlt	.-14     	; 0x6044 <__fixunssfsi+0x2e>
    6052:	86 95       	lsr	r24
    6054:	77 95       	ror	r23
    6056:	67 95       	ror	r22
    6058:	b3 95       	inc	r27
    605a:	d9 f7       	brne	.-10     	; 0x6052 <__fixunssfsi+0x3c>
    605c:	3e f4       	brtc	.+14     	; 0x606c <__fixunssfsi+0x56>
    605e:	90 95       	com	r25
    6060:	80 95       	com	r24
    6062:	70 95       	com	r23
    6064:	61 95       	neg	r22
    6066:	7f 4f       	sbci	r23, 0xFF	; 255
    6068:	8f 4f       	sbci	r24, 0xFF	; 255
    606a:	9f 4f       	sbci	r25, 0xFF	; 255
    606c:	08 95       	ret

0000606e <__floatunsisf>:
    606e:	e8 94       	clt
    6070:	09 c0       	rjmp	.+18     	; 0x6084 <__floatsisf+0x12>

00006072 <__floatsisf>:
    6072:	97 fb       	bst	r25, 7
    6074:	3e f4       	brtc	.+14     	; 0x6084 <__floatsisf+0x12>
    6076:	90 95       	com	r25
    6078:	80 95       	com	r24
    607a:	70 95       	com	r23
    607c:	61 95       	neg	r22
    607e:	7f 4f       	sbci	r23, 0xFF	; 255
    6080:	8f 4f       	sbci	r24, 0xFF	; 255
    6082:	9f 4f       	sbci	r25, 0xFF	; 255
    6084:	99 23       	and	r25, r25
    6086:	a9 f0       	breq	.+42     	; 0x60b2 <__floatsisf+0x40>
    6088:	f9 2f       	mov	r31, r25
    608a:	96 e9       	ldi	r25, 0x96	; 150
    608c:	bb 27       	eor	r27, r27
    608e:	93 95       	inc	r25
    6090:	f6 95       	lsr	r31
    6092:	87 95       	ror	r24
    6094:	77 95       	ror	r23
    6096:	67 95       	ror	r22
    6098:	b7 95       	ror	r27
    609a:	f1 11       	cpse	r31, r1
    609c:	f8 cf       	rjmp	.-16     	; 0x608e <__floatsisf+0x1c>
    609e:	fa f4       	brpl	.+62     	; 0x60de <__floatsisf+0x6c>
    60a0:	bb 0f       	add	r27, r27
    60a2:	11 f4       	brne	.+4      	; 0x60a8 <__floatsisf+0x36>
    60a4:	60 ff       	sbrs	r22, 0
    60a6:	1b c0       	rjmp	.+54     	; 0x60de <__floatsisf+0x6c>
    60a8:	6f 5f       	subi	r22, 0xFF	; 255
    60aa:	7f 4f       	sbci	r23, 0xFF	; 255
    60ac:	8f 4f       	sbci	r24, 0xFF	; 255
    60ae:	9f 4f       	sbci	r25, 0xFF	; 255
    60b0:	16 c0       	rjmp	.+44     	; 0x60de <__floatsisf+0x6c>
    60b2:	88 23       	and	r24, r24
    60b4:	11 f0       	breq	.+4      	; 0x60ba <__floatsisf+0x48>
    60b6:	96 e9       	ldi	r25, 0x96	; 150
    60b8:	11 c0       	rjmp	.+34     	; 0x60dc <__floatsisf+0x6a>
    60ba:	77 23       	and	r23, r23
    60bc:	21 f0       	breq	.+8      	; 0x60c6 <__floatsisf+0x54>
    60be:	9e e8       	ldi	r25, 0x8E	; 142
    60c0:	87 2f       	mov	r24, r23
    60c2:	76 2f       	mov	r23, r22
    60c4:	05 c0       	rjmp	.+10     	; 0x60d0 <__floatsisf+0x5e>
    60c6:	66 23       	and	r22, r22
    60c8:	71 f0       	breq	.+28     	; 0x60e6 <__floatsisf+0x74>
    60ca:	96 e8       	ldi	r25, 0x86	; 134
    60cc:	86 2f       	mov	r24, r22
    60ce:	70 e0       	ldi	r23, 0x00	; 0
    60d0:	60 e0       	ldi	r22, 0x00	; 0
    60d2:	2a f0       	brmi	.+10     	; 0x60de <__floatsisf+0x6c>
    60d4:	9a 95       	dec	r25
    60d6:	66 0f       	add	r22, r22
    60d8:	77 1f       	adc	r23, r23
    60da:	88 1f       	adc	r24, r24
    60dc:	da f7       	brpl	.-10     	; 0x60d4 <__floatsisf+0x62>
    60de:	88 0f       	add	r24, r24
    60e0:	96 95       	lsr	r25
    60e2:	87 95       	ror	r24
    60e4:	97 f9       	bld	r25, 7
    60e6:	08 95       	ret

000060e8 <__fp_cmp>:
    60e8:	99 0f       	add	r25, r25
    60ea:	00 08       	sbc	r0, r0
    60ec:	55 0f       	add	r21, r21
    60ee:	aa 0b       	sbc	r26, r26
    60f0:	e0 e8       	ldi	r30, 0x80	; 128
    60f2:	fe ef       	ldi	r31, 0xFE	; 254
    60f4:	16 16       	cp	r1, r22
    60f6:	17 06       	cpc	r1, r23
    60f8:	e8 07       	cpc	r30, r24
    60fa:	f9 07       	cpc	r31, r25
    60fc:	c0 f0       	brcs	.+48     	; 0x612e <__fp_cmp+0x46>
    60fe:	12 16       	cp	r1, r18
    6100:	13 06       	cpc	r1, r19
    6102:	e4 07       	cpc	r30, r20
    6104:	f5 07       	cpc	r31, r21
    6106:	98 f0       	brcs	.+38     	; 0x612e <__fp_cmp+0x46>
    6108:	62 1b       	sub	r22, r18
    610a:	73 0b       	sbc	r23, r19
    610c:	84 0b       	sbc	r24, r20
    610e:	95 0b       	sbc	r25, r21
    6110:	39 f4       	brne	.+14     	; 0x6120 <__fp_cmp+0x38>
    6112:	0a 26       	eor	r0, r26
    6114:	61 f0       	breq	.+24     	; 0x612e <__fp_cmp+0x46>
    6116:	23 2b       	or	r18, r19
    6118:	24 2b       	or	r18, r20
    611a:	25 2b       	or	r18, r21
    611c:	21 f4       	brne	.+8      	; 0x6126 <__fp_cmp+0x3e>
    611e:	08 95       	ret
    6120:	0a 26       	eor	r0, r26
    6122:	09 f4       	brne	.+2      	; 0x6126 <__fp_cmp+0x3e>
    6124:	a1 40       	sbci	r26, 0x01	; 1
    6126:	a6 95       	lsr	r26
    6128:	8f ef       	ldi	r24, 0xFF	; 255
    612a:	81 1d       	adc	r24, r1
    612c:	81 1d       	adc	r24, r1
    612e:	08 95       	ret

00006130 <__fp_inf>:
    6130:	97 f9       	bld	r25, 7
    6132:	9f 67       	ori	r25, 0x7F	; 127
    6134:	80 e8       	ldi	r24, 0x80	; 128
    6136:	70 e0       	ldi	r23, 0x00	; 0
    6138:	60 e0       	ldi	r22, 0x00	; 0
    613a:	08 95       	ret

0000613c <__fp_nan>:
    613c:	9f ef       	ldi	r25, 0xFF	; 255
    613e:	80 ec       	ldi	r24, 0xC0	; 192
    6140:	08 95       	ret

00006142 <__fp_pscA>:
    6142:	00 24       	eor	r0, r0
    6144:	0a 94       	dec	r0
    6146:	16 16       	cp	r1, r22
    6148:	17 06       	cpc	r1, r23
    614a:	18 06       	cpc	r1, r24
    614c:	09 06       	cpc	r0, r25
    614e:	08 95       	ret

00006150 <__fp_pscB>:
    6150:	00 24       	eor	r0, r0
    6152:	0a 94       	dec	r0
    6154:	12 16       	cp	r1, r18
    6156:	13 06       	cpc	r1, r19
    6158:	14 06       	cpc	r1, r20
    615a:	05 06       	cpc	r0, r21
    615c:	08 95       	ret

0000615e <__fp_round>:
    615e:	09 2e       	mov	r0, r25
    6160:	03 94       	inc	r0
    6162:	00 0c       	add	r0, r0
    6164:	11 f4       	brne	.+4      	; 0x616a <__fp_round+0xc>
    6166:	88 23       	and	r24, r24
    6168:	52 f0       	brmi	.+20     	; 0x617e <__fp_round+0x20>
    616a:	bb 0f       	add	r27, r27
    616c:	40 f4       	brcc	.+16     	; 0x617e <__fp_round+0x20>
    616e:	bf 2b       	or	r27, r31
    6170:	11 f4       	brne	.+4      	; 0x6176 <__fp_round+0x18>
    6172:	60 ff       	sbrs	r22, 0
    6174:	04 c0       	rjmp	.+8      	; 0x617e <__fp_round+0x20>
    6176:	6f 5f       	subi	r22, 0xFF	; 255
    6178:	7f 4f       	sbci	r23, 0xFF	; 255
    617a:	8f 4f       	sbci	r24, 0xFF	; 255
    617c:	9f 4f       	sbci	r25, 0xFF	; 255
    617e:	08 95       	ret

00006180 <__fp_split3>:
    6180:	57 fd       	sbrc	r21, 7
    6182:	90 58       	subi	r25, 0x80	; 128
    6184:	44 0f       	add	r20, r20
    6186:	55 1f       	adc	r21, r21
    6188:	59 f0       	breq	.+22     	; 0x61a0 <__fp_splitA+0x10>
    618a:	5f 3f       	cpi	r21, 0xFF	; 255
    618c:	71 f0       	breq	.+28     	; 0x61aa <__fp_splitA+0x1a>
    618e:	47 95       	ror	r20

00006190 <__fp_splitA>:
    6190:	88 0f       	add	r24, r24
    6192:	97 fb       	bst	r25, 7
    6194:	99 1f       	adc	r25, r25
    6196:	61 f0       	breq	.+24     	; 0x61b0 <__fp_splitA+0x20>
    6198:	9f 3f       	cpi	r25, 0xFF	; 255
    619a:	79 f0       	breq	.+30     	; 0x61ba <__fp_splitA+0x2a>
    619c:	87 95       	ror	r24
    619e:	08 95       	ret
    61a0:	12 16       	cp	r1, r18
    61a2:	13 06       	cpc	r1, r19
    61a4:	14 06       	cpc	r1, r20
    61a6:	55 1f       	adc	r21, r21
    61a8:	f2 cf       	rjmp	.-28     	; 0x618e <__fp_split3+0xe>
    61aa:	46 95       	lsr	r20
    61ac:	f1 df       	rcall	.-30     	; 0x6190 <__fp_splitA>
    61ae:	08 c0       	rjmp	.+16     	; 0x61c0 <__fp_splitA+0x30>
    61b0:	16 16       	cp	r1, r22
    61b2:	17 06       	cpc	r1, r23
    61b4:	18 06       	cpc	r1, r24
    61b6:	99 1f       	adc	r25, r25
    61b8:	f1 cf       	rjmp	.-30     	; 0x619c <__fp_splitA+0xc>
    61ba:	86 95       	lsr	r24
    61bc:	71 05       	cpc	r23, r1
    61be:	61 05       	cpc	r22, r1
    61c0:	08 94       	sec
    61c2:	08 95       	ret

000061c4 <__fp_zero>:
    61c4:	e8 94       	clt

000061c6 <__fp_szero>:
    61c6:	bb 27       	eor	r27, r27
    61c8:	66 27       	eor	r22, r22
    61ca:	77 27       	eor	r23, r23
    61cc:	cb 01       	movw	r24, r22
    61ce:	97 f9       	bld	r25, 7
    61d0:	08 95       	ret

000061d2 <__gesf2>:
    61d2:	8a df       	rcall	.-236    	; 0x60e8 <__fp_cmp>
    61d4:	08 f4       	brcc	.+2      	; 0x61d8 <__gesf2+0x6>
    61d6:	8f ef       	ldi	r24, 0xFF	; 255
    61d8:	08 95       	ret

000061da <lrint>:
    61da:	da df       	rcall	.-76     	; 0x6190 <__fp_splitA>
    61dc:	a8 f1       	brcs	.+106    	; 0x6248 <lrint+0x6e>
    61de:	9e 57       	subi	r25, 0x7E	; 126
    61e0:	a8 f1       	brcs	.+106    	; 0x624c <lrint+0x72>
    61e2:	98 51       	subi	r25, 0x18	; 24
    61e4:	60 f0       	brcs	.+24     	; 0x61fe <lrint+0x24>
    61e6:	39 f1       	breq	.+78     	; 0x6236 <lrint+0x5c>
    61e8:	98 30       	cpi	r25, 0x08	; 8
    61ea:	70 f5       	brcc	.+92     	; 0x6248 <lrint+0x6e>
    61ec:	09 2e       	mov	r0, r25
    61ee:	99 27       	eor	r25, r25
    61f0:	66 0f       	add	r22, r22
    61f2:	77 1f       	adc	r23, r23
    61f4:	88 1f       	adc	r24, r24
    61f6:	99 1f       	adc	r25, r25
    61f8:	0a 94       	dec	r0
    61fa:	d1 f7       	brne	.-12     	; 0x61f0 <lrint+0x16>
    61fc:	1c c0       	rjmp	.+56     	; 0x6236 <lrint+0x5c>
    61fe:	bb 27       	eor	r27, r27
    6200:	99 3f       	cpi	r25, 0xF9	; 249
    6202:	4c f4       	brge	.+18     	; 0x6216 <lrint+0x3c>
    6204:	b1 11       	cpse	r27, r1
    6206:	b1 e0       	ldi	r27, 0x01	; 1
    6208:	b6 2b       	or	r27, r22
    620a:	67 2f       	mov	r22, r23
    620c:	78 2f       	mov	r23, r24
    620e:	88 27       	eor	r24, r24
    6210:	98 5f       	subi	r25, 0xF8	; 248
    6212:	b1 f7       	brne	.-20     	; 0x6200 <lrint+0x26>
    6214:	08 c0       	rjmp	.+16     	; 0x6226 <lrint+0x4c>
    6216:	86 95       	lsr	r24
    6218:	77 95       	ror	r23
    621a:	67 95       	ror	r22
    621c:	b7 95       	ror	r27
    621e:	08 f4       	brcc	.+2      	; 0x6222 <lrint+0x48>
    6220:	b1 60       	ori	r27, 0x01	; 1
    6222:	93 95       	inc	r25
    6224:	c1 f7       	brne	.-16     	; 0x6216 <lrint+0x3c>
    6226:	bb 0f       	add	r27, r27
    6228:	30 f4       	brcc	.+12     	; 0x6236 <lrint+0x5c>
    622a:	11 f4       	brne	.+4      	; 0x6230 <lrint+0x56>
    622c:	60 ff       	sbrs	r22, 0
    622e:	03 c0       	rjmp	.+6      	; 0x6236 <lrint+0x5c>
    6230:	6f 5f       	subi	r22, 0xFF	; 255
    6232:	7f 4f       	sbci	r23, 0xFF	; 255
    6234:	8f 4f       	sbci	r24, 0xFF	; 255
    6236:	3e f4       	brtc	.+14     	; 0x6246 <lrint+0x6c>
    6238:	90 95       	com	r25
    623a:	80 95       	com	r24
    623c:	70 95       	com	r23
    623e:	61 95       	neg	r22
    6240:	7f 4f       	sbci	r23, 0xFF	; 255
    6242:	8f 4f       	sbci	r24, 0xFF	; 255
    6244:	9f 4f       	sbci	r25, 0xFF	; 255
    6246:	08 95       	ret
    6248:	68 94       	set
    624a:	bd cf       	rjmp	.-134    	; 0x61c6 <__fp_szero>
    624c:	bb cf       	rjmp	.-138    	; 0x61c4 <__fp_zero>

0000624e <__mulsf3>:
    624e:	0b d0       	rcall	.+22     	; 0x6266 <__mulsf3x>
    6250:	86 cf       	rjmp	.-244    	; 0x615e <__fp_round>
    6252:	77 df       	rcall	.-274    	; 0x6142 <__fp_pscA>
    6254:	28 f0       	brcs	.+10     	; 0x6260 <__mulsf3+0x12>
    6256:	7c df       	rcall	.-264    	; 0x6150 <__fp_pscB>
    6258:	18 f0       	brcs	.+6      	; 0x6260 <__mulsf3+0x12>
    625a:	95 23       	and	r25, r21
    625c:	09 f0       	breq	.+2      	; 0x6260 <__mulsf3+0x12>
    625e:	68 cf       	rjmp	.-304    	; 0x6130 <__fp_inf>
    6260:	6d cf       	rjmp	.-294    	; 0x613c <__fp_nan>
    6262:	11 24       	eor	r1, r1
    6264:	b0 cf       	rjmp	.-160    	; 0x61c6 <__fp_szero>

00006266 <__mulsf3x>:
    6266:	8c df       	rcall	.-232    	; 0x6180 <__fp_split3>
    6268:	a0 f3       	brcs	.-24     	; 0x6252 <__mulsf3+0x4>

0000626a <__mulsf3_pse>:
    626a:	95 9f       	mul	r25, r21
    626c:	d1 f3       	breq	.-12     	; 0x6262 <__mulsf3+0x14>
    626e:	95 0f       	add	r25, r21
    6270:	50 e0       	ldi	r21, 0x00	; 0
    6272:	55 1f       	adc	r21, r21
    6274:	62 9f       	mul	r22, r18
    6276:	f0 01       	movw	r30, r0
    6278:	72 9f       	mul	r23, r18
    627a:	bb 27       	eor	r27, r27
    627c:	f0 0d       	add	r31, r0
    627e:	b1 1d       	adc	r27, r1
    6280:	63 9f       	mul	r22, r19
    6282:	aa 27       	eor	r26, r26
    6284:	f0 0d       	add	r31, r0
    6286:	b1 1d       	adc	r27, r1
    6288:	aa 1f       	adc	r26, r26
    628a:	64 9f       	mul	r22, r20
    628c:	66 27       	eor	r22, r22
    628e:	b0 0d       	add	r27, r0
    6290:	a1 1d       	adc	r26, r1
    6292:	66 1f       	adc	r22, r22
    6294:	82 9f       	mul	r24, r18
    6296:	22 27       	eor	r18, r18
    6298:	b0 0d       	add	r27, r0
    629a:	a1 1d       	adc	r26, r1
    629c:	62 1f       	adc	r22, r18
    629e:	73 9f       	mul	r23, r19
    62a0:	b0 0d       	add	r27, r0
    62a2:	a1 1d       	adc	r26, r1
    62a4:	62 1f       	adc	r22, r18
    62a6:	83 9f       	mul	r24, r19
    62a8:	a0 0d       	add	r26, r0
    62aa:	61 1d       	adc	r22, r1
    62ac:	22 1f       	adc	r18, r18
    62ae:	74 9f       	mul	r23, r20
    62b0:	33 27       	eor	r19, r19
    62b2:	a0 0d       	add	r26, r0
    62b4:	61 1d       	adc	r22, r1
    62b6:	23 1f       	adc	r18, r19
    62b8:	84 9f       	mul	r24, r20
    62ba:	60 0d       	add	r22, r0
    62bc:	21 1d       	adc	r18, r1
    62be:	82 2f       	mov	r24, r18
    62c0:	76 2f       	mov	r23, r22
    62c2:	6a 2f       	mov	r22, r26
    62c4:	11 24       	eor	r1, r1
    62c6:	9f 57       	subi	r25, 0x7F	; 127
    62c8:	50 40       	sbci	r21, 0x00	; 0
    62ca:	8a f0       	brmi	.+34     	; 0x62ee <__mulsf3_pse+0x84>
    62cc:	e1 f0       	breq	.+56     	; 0x6306 <__mulsf3_pse+0x9c>
    62ce:	88 23       	and	r24, r24
    62d0:	4a f0       	brmi	.+18     	; 0x62e4 <__mulsf3_pse+0x7a>
    62d2:	ee 0f       	add	r30, r30
    62d4:	ff 1f       	adc	r31, r31
    62d6:	bb 1f       	adc	r27, r27
    62d8:	66 1f       	adc	r22, r22
    62da:	77 1f       	adc	r23, r23
    62dc:	88 1f       	adc	r24, r24
    62de:	91 50       	subi	r25, 0x01	; 1
    62e0:	50 40       	sbci	r21, 0x00	; 0
    62e2:	a9 f7       	brne	.-22     	; 0x62ce <__mulsf3_pse+0x64>
    62e4:	9e 3f       	cpi	r25, 0xFE	; 254
    62e6:	51 05       	cpc	r21, r1
    62e8:	70 f0       	brcs	.+28     	; 0x6306 <__mulsf3_pse+0x9c>
    62ea:	22 cf       	rjmp	.-444    	; 0x6130 <__fp_inf>
    62ec:	6c cf       	rjmp	.-296    	; 0x61c6 <__fp_szero>
    62ee:	5f 3f       	cpi	r21, 0xFF	; 255
    62f0:	ec f3       	brlt	.-6      	; 0x62ec <__mulsf3_pse+0x82>
    62f2:	98 3e       	cpi	r25, 0xE8	; 232
    62f4:	dc f3       	brlt	.-10     	; 0x62ec <__mulsf3_pse+0x82>
    62f6:	86 95       	lsr	r24
    62f8:	77 95       	ror	r23
    62fa:	67 95       	ror	r22
    62fc:	b7 95       	ror	r27
    62fe:	f7 95       	ror	r31
    6300:	e7 95       	ror	r30
    6302:	9f 5f       	subi	r25, 0xFF	; 255
    6304:	c1 f7       	brne	.-16     	; 0x62f6 <__mulsf3_pse+0x8c>
    6306:	fe 2b       	or	r31, r30
    6308:	88 0f       	add	r24, r24
    630a:	91 1d       	adc	r25, r1
    630c:	96 95       	lsr	r25
    630e:	87 95       	ror	r24
    6310:	97 f9       	bld	r25, 7
    6312:	08 95       	ret

00006314 <pow>:
    6314:	fa 01       	movw	r30, r20
    6316:	ee 0f       	add	r30, r30
    6318:	ff 1f       	adc	r31, r31
    631a:	30 96       	adiw	r30, 0x00	; 0
    631c:	21 05       	cpc	r18, r1
    631e:	31 05       	cpc	r19, r1
    6320:	99 f1       	breq	.+102    	; 0x6388 <pow+0x74>
    6322:	61 15       	cp	r22, r1
    6324:	71 05       	cpc	r23, r1
    6326:	61 f4       	brne	.+24     	; 0x6340 <pow+0x2c>
    6328:	80 38       	cpi	r24, 0x80	; 128
    632a:	bf e3       	ldi	r27, 0x3F	; 63
    632c:	9b 07       	cpc	r25, r27
    632e:	49 f1       	breq	.+82     	; 0x6382 <pow+0x6e>
    6330:	68 94       	set
    6332:	90 38       	cpi	r25, 0x80	; 128
    6334:	81 05       	cpc	r24, r1
    6336:	61 f0       	breq	.+24     	; 0x6350 <pow+0x3c>
    6338:	80 38       	cpi	r24, 0x80	; 128
    633a:	bf ef       	ldi	r27, 0xFF	; 255
    633c:	9b 07       	cpc	r25, r27
    633e:	41 f0       	breq	.+16     	; 0x6350 <pow+0x3c>
    6340:	99 23       	and	r25, r25
    6342:	42 f5       	brpl	.+80     	; 0x6394 <pow+0x80>
    6344:	ff 3f       	cpi	r31, 0xFF	; 255
    6346:	e1 05       	cpc	r30, r1
    6348:	31 05       	cpc	r19, r1
    634a:	21 05       	cpc	r18, r1
    634c:	11 f1       	breq	.+68     	; 0x6392 <pow+0x7e>
    634e:	e8 94       	clt
    6350:	08 94       	sec
    6352:	e7 95       	ror	r30
    6354:	d9 01       	movw	r26, r18
    6356:	aa 23       	and	r26, r26
    6358:	29 f4       	brne	.+10     	; 0x6364 <pow+0x50>
    635a:	ab 2f       	mov	r26, r27
    635c:	be 2f       	mov	r27, r30
    635e:	f8 5f       	subi	r31, 0xF8	; 248
    6360:	d0 f3       	brcs	.-12     	; 0x6356 <pow+0x42>
    6362:	10 c0       	rjmp	.+32     	; 0x6384 <pow+0x70>
    6364:	ff 5f       	subi	r31, 0xFF	; 255
    6366:	70 f4       	brcc	.+28     	; 0x6384 <pow+0x70>
    6368:	a6 95       	lsr	r26
    636a:	e0 f7       	brcc	.-8      	; 0x6364 <pow+0x50>
    636c:	f7 39       	cpi	r31, 0x97	; 151
    636e:	50 f0       	brcs	.+20     	; 0x6384 <pow+0x70>
    6370:	19 f0       	breq	.+6      	; 0x6378 <pow+0x64>
    6372:	ff 3a       	cpi	r31, 0xAF	; 175
    6374:	38 f4       	brcc	.+14     	; 0x6384 <pow+0x70>
    6376:	9f 77       	andi	r25, 0x7F	; 127
    6378:	9f 93       	push	r25
    637a:	0c d0       	rcall	.+24     	; 0x6394 <pow+0x80>
    637c:	0f 90       	pop	r0
    637e:	07 fc       	sbrc	r0, 7
    6380:	90 58       	subi	r25, 0x80	; 128
    6382:	08 95       	ret
    6384:	3e f0       	brts	.+14     	; 0x6394 <pow+0x80>
    6386:	da ce       	rjmp	.-588    	; 0x613c <__fp_nan>
    6388:	60 e0       	ldi	r22, 0x00	; 0
    638a:	70 e0       	ldi	r23, 0x00	; 0
    638c:	80 e8       	ldi	r24, 0x80	; 128
    638e:	9f e3       	ldi	r25, 0x3F	; 63
    6390:	08 95       	ret
    6392:	4f e7       	ldi	r20, 0x7F	; 127
    6394:	9f 77       	andi	r25, 0x7F	; 127
    6396:	5f 93       	push	r21
    6398:	4f 93       	push	r20
    639a:	3f 93       	push	r19
    639c:	2f 93       	push	r18
    639e:	9e d0       	rcall	.+316    	; 0x64dc <log>
    63a0:	2f 91       	pop	r18
    63a2:	3f 91       	pop	r19
    63a4:	4f 91       	pop	r20
    63a6:	5f 91       	pop	r21
    63a8:	52 df       	rcall	.-348    	; 0x624e <__mulsf3>
    63aa:	05 c0       	rjmp	.+10     	; 0x63b6 <exp>
    63ac:	19 f4       	brne	.+6      	; 0x63b4 <pow+0xa0>
    63ae:	0e f0       	brts	.+2      	; 0x63b2 <pow+0x9e>
    63b0:	bf ce       	rjmp	.-642    	; 0x6130 <__fp_inf>
    63b2:	08 cf       	rjmp	.-496    	; 0x61c4 <__fp_zero>
    63b4:	c3 ce       	rjmp	.-634    	; 0x613c <__fp_nan>

000063b6 <exp>:
    63b6:	ec de       	rcall	.-552    	; 0x6190 <__fp_splitA>
    63b8:	c8 f3       	brcs	.-14     	; 0x63ac <pow+0x98>
    63ba:	96 38       	cpi	r25, 0x86	; 134
    63bc:	c0 f7       	brcc	.-16     	; 0x63ae <pow+0x9a>
    63be:	07 f8       	bld	r0, 7
    63c0:	0f 92       	push	r0
    63c2:	e8 94       	clt
    63c4:	2b e3       	ldi	r18, 0x3B	; 59
    63c6:	3a ea       	ldi	r19, 0xAA	; 170
    63c8:	48 eb       	ldi	r20, 0xB8	; 184
    63ca:	5f e7       	ldi	r21, 0x7F	; 127
    63cc:	4e df       	rcall	.-356    	; 0x626a <__mulsf3_pse>
    63ce:	0f 92       	push	r0
    63d0:	0f 92       	push	r0
    63d2:	0f 92       	push	r0
    63d4:	4d b7       	in	r20, 0x3d	; 61
    63d6:	5e b7       	in	r21, 0x3e	; 62
    63d8:	0f 92       	push	r0
    63da:	c0 d0       	rcall	.+384    	; 0x655c <modf>
    63dc:	e8 ec       	ldi	r30, 0xC8	; 200
    63de:	f0 e0       	ldi	r31, 0x00	; 0
    63e0:	16 d0       	rcall	.+44     	; 0x640e <__fp_powser>
    63e2:	4f 91       	pop	r20
    63e4:	5f 91       	pop	r21
    63e6:	ef 91       	pop	r30
    63e8:	ff 91       	pop	r31
    63ea:	e5 95       	asr	r30
    63ec:	ee 1f       	adc	r30, r30
    63ee:	ff 1f       	adc	r31, r31
    63f0:	49 f0       	breq	.+18     	; 0x6404 <exp+0x4e>
    63f2:	fe 57       	subi	r31, 0x7E	; 126
    63f4:	e0 68       	ori	r30, 0x80	; 128
    63f6:	44 27       	eor	r20, r20
    63f8:	ee 0f       	add	r30, r30
    63fa:	44 1f       	adc	r20, r20
    63fc:	fa 95       	dec	r31
    63fe:	e1 f7       	brne	.-8      	; 0x63f8 <exp+0x42>
    6400:	41 95       	neg	r20
    6402:	55 0b       	sbc	r21, r21
    6404:	32 d0       	rcall	.+100    	; 0x646a <ldexp>
    6406:	0f 90       	pop	r0
    6408:	07 fe       	sbrs	r0, 7
    640a:	26 c0       	rjmp	.+76     	; 0x6458 <inverse>
    640c:	08 95       	ret

0000640e <__fp_powser>:
    640e:	df 93       	push	r29
    6410:	cf 93       	push	r28
    6412:	1f 93       	push	r17
    6414:	0f 93       	push	r16
    6416:	ff 92       	push	r15
    6418:	ef 92       	push	r14
    641a:	df 92       	push	r13
    641c:	7b 01       	movw	r14, r22
    641e:	8c 01       	movw	r16, r24
    6420:	68 94       	set
    6422:	05 c0       	rjmp	.+10     	; 0x642e <__fp_powser+0x20>
    6424:	da 2e       	mov	r13, r26
    6426:	ef 01       	movw	r28, r30
    6428:	1e df       	rcall	.-452    	; 0x6266 <__mulsf3x>
    642a:	fe 01       	movw	r30, r28
    642c:	e8 94       	clt
    642e:	a5 91       	lpm	r26, Z+
    6430:	25 91       	lpm	r18, Z+
    6432:	35 91       	lpm	r19, Z+
    6434:	45 91       	lpm	r20, Z+
    6436:	55 91       	lpm	r21, Z+
    6438:	ae f3       	brts	.-22     	; 0x6424 <__fp_powser+0x16>
    643a:	ef 01       	movw	r28, r30
    643c:	28 dd       	rcall	.-1456   	; 0x5e8e <__addsf3x>
    643e:	fe 01       	movw	r30, r28
    6440:	97 01       	movw	r18, r14
    6442:	a8 01       	movw	r20, r16
    6444:	da 94       	dec	r13
    6446:	79 f7       	brne	.-34     	; 0x6426 <__fp_powser+0x18>
    6448:	df 90       	pop	r13
    644a:	ef 90       	pop	r14
    644c:	ff 90       	pop	r15
    644e:	0f 91       	pop	r16
    6450:	1f 91       	pop	r17
    6452:	cf 91       	pop	r28
    6454:	df 91       	pop	r29
    6456:	08 95       	ret

00006458 <inverse>:
    6458:	9b 01       	movw	r18, r22
    645a:	ac 01       	movw	r20, r24
    645c:	60 e0       	ldi	r22, 0x00	; 0
    645e:	70 e0       	ldi	r23, 0x00	; 0
    6460:	80 e8       	ldi	r24, 0x80	; 128
    6462:	9f e3       	ldi	r25, 0x3F	; 63
    6464:	6b cd       	rjmp	.-1322   	; 0x5f3c <__divsf3>
    6466:	64 ce       	rjmp	.-824    	; 0x6130 <__fp_inf>
    6468:	ac c0       	rjmp	.+344    	; 0x65c2 <__fp_mpack>

0000646a <ldexp>:
    646a:	92 de       	rcall	.-732    	; 0x6190 <__fp_splitA>
    646c:	e8 f3       	brcs	.-6      	; 0x6468 <inverse+0x10>
    646e:	99 23       	and	r25, r25
    6470:	d9 f3       	breq	.-10     	; 0x6468 <inverse+0x10>
    6472:	94 0f       	add	r25, r20
    6474:	51 1d       	adc	r21, r1
    6476:	bb f3       	brvs	.-18     	; 0x6466 <inverse+0xe>
    6478:	91 50       	subi	r25, 0x01	; 1
    647a:	50 40       	sbci	r21, 0x00	; 0
    647c:	94 f0       	brlt	.+36     	; 0x64a2 <ldexp+0x38>
    647e:	59 f0       	breq	.+22     	; 0x6496 <ldexp+0x2c>
    6480:	88 23       	and	r24, r24
    6482:	32 f0       	brmi	.+12     	; 0x6490 <ldexp+0x26>
    6484:	66 0f       	add	r22, r22
    6486:	77 1f       	adc	r23, r23
    6488:	88 1f       	adc	r24, r24
    648a:	91 50       	subi	r25, 0x01	; 1
    648c:	50 40       	sbci	r21, 0x00	; 0
    648e:	c1 f7       	brne	.-16     	; 0x6480 <ldexp+0x16>
    6490:	9e 3f       	cpi	r25, 0xFE	; 254
    6492:	51 05       	cpc	r21, r1
    6494:	44 f7       	brge	.-48     	; 0x6466 <inverse+0xe>
    6496:	88 0f       	add	r24, r24
    6498:	91 1d       	adc	r25, r1
    649a:	96 95       	lsr	r25
    649c:	87 95       	ror	r24
    649e:	97 f9       	bld	r25, 7
    64a0:	08 95       	ret
    64a2:	5f 3f       	cpi	r21, 0xFF	; 255
    64a4:	ac f0       	brlt	.+42     	; 0x64d0 <ldexp+0x66>
    64a6:	98 3e       	cpi	r25, 0xE8	; 232
    64a8:	9c f0       	brlt	.+38     	; 0x64d0 <ldexp+0x66>
    64aa:	bb 27       	eor	r27, r27
    64ac:	86 95       	lsr	r24
    64ae:	77 95       	ror	r23
    64b0:	67 95       	ror	r22
    64b2:	b7 95       	ror	r27
    64b4:	08 f4       	brcc	.+2      	; 0x64b8 <ldexp+0x4e>
    64b6:	b1 60       	ori	r27, 0x01	; 1
    64b8:	93 95       	inc	r25
    64ba:	c1 f7       	brne	.-16     	; 0x64ac <ldexp+0x42>
    64bc:	bb 0f       	add	r27, r27
    64be:	58 f7       	brcc	.-42     	; 0x6496 <ldexp+0x2c>
    64c0:	11 f4       	brne	.+4      	; 0x64c6 <ldexp+0x5c>
    64c2:	60 ff       	sbrs	r22, 0
    64c4:	e8 cf       	rjmp	.-48     	; 0x6496 <ldexp+0x2c>
    64c6:	6f 5f       	subi	r22, 0xFF	; 255
    64c8:	7f 4f       	sbci	r23, 0xFF	; 255
    64ca:	8f 4f       	sbci	r24, 0xFF	; 255
    64cc:	9f 4f       	sbci	r25, 0xFF	; 255
    64ce:	e3 cf       	rjmp	.-58     	; 0x6496 <ldexp+0x2c>
    64d0:	7a ce       	rjmp	.-780    	; 0x61c6 <__fp_szero>
    64d2:	0e f0       	brts	.+2      	; 0x64d6 <ldexp+0x6c>
    64d4:	76 c0       	rjmp	.+236    	; 0x65c2 <__fp_mpack>
    64d6:	32 ce       	rjmp	.-924    	; 0x613c <__fp_nan>
    64d8:	68 94       	set
    64da:	2a ce       	rjmp	.-940    	; 0x6130 <__fp_inf>

000064dc <log>:
    64dc:	59 de       	rcall	.-846    	; 0x6190 <__fp_splitA>
    64de:	c8 f3       	brcs	.-14     	; 0x64d2 <ldexp+0x68>
    64e0:	99 23       	and	r25, r25
    64e2:	d1 f3       	breq	.-12     	; 0x64d8 <ldexp+0x6e>
    64e4:	c6 f3       	brts	.-16     	; 0x64d6 <ldexp+0x6c>
    64e6:	df 93       	push	r29
    64e8:	cf 93       	push	r28
    64ea:	1f 93       	push	r17
    64ec:	0f 93       	push	r16
    64ee:	ff 92       	push	r15
    64f0:	c9 2f       	mov	r28, r25
    64f2:	dd 27       	eor	r29, r29
    64f4:	88 23       	and	r24, r24
    64f6:	2a f0       	brmi	.+10     	; 0x6502 <log+0x26>
    64f8:	21 97       	sbiw	r28, 0x01	; 1
    64fa:	66 0f       	add	r22, r22
    64fc:	77 1f       	adc	r23, r23
    64fe:	88 1f       	adc	r24, r24
    6500:	da f7       	brpl	.-10     	; 0x64f8 <log+0x1c>
    6502:	20 e0       	ldi	r18, 0x00	; 0
    6504:	30 e0       	ldi	r19, 0x00	; 0
    6506:	40 e8       	ldi	r20, 0x80	; 128
    6508:	5f eb       	ldi	r21, 0xBF	; 191
    650a:	9f e3       	ldi	r25, 0x3F	; 63
    650c:	88 39       	cpi	r24, 0x98	; 152
    650e:	20 f0       	brcs	.+8      	; 0x6518 <log+0x3c>
    6510:	80 3e       	cpi	r24, 0xE0	; 224
    6512:	30 f0       	brcs	.+12     	; 0x6520 <log+0x44>
    6514:	21 96       	adiw	r28, 0x01	; 1
    6516:	8f 77       	andi	r24, 0x7F	; 127
    6518:	a9 dc       	rcall	.-1710   	; 0x5e6c <__addsf3>
    651a:	e0 ef       	ldi	r30, 0xF0	; 240
    651c:	f0 e0       	ldi	r31, 0x00	; 0
    651e:	03 c0       	rjmp	.+6      	; 0x6526 <log+0x4a>
    6520:	a5 dc       	rcall	.-1718   	; 0x5e6c <__addsf3>
    6522:	ed e1       	ldi	r30, 0x1D	; 29
    6524:	f1 e0       	ldi	r31, 0x01	; 1
    6526:	73 df       	rcall	.-282    	; 0x640e <__fp_powser>
    6528:	8b 01       	movw	r16, r22
    652a:	be 01       	movw	r22, r28
    652c:	ec 01       	movw	r28, r24
    652e:	fb 2e       	mov	r15, r27
    6530:	6f 57       	subi	r22, 0x7F	; 127
    6532:	71 09       	sbc	r23, r1
    6534:	75 95       	asr	r23
    6536:	77 1f       	adc	r23, r23
    6538:	88 0b       	sbc	r24, r24
    653a:	99 0b       	sbc	r25, r25
    653c:	9a dd       	rcall	.-1228   	; 0x6072 <__floatsisf>
    653e:	28 e1       	ldi	r18, 0x18	; 24
    6540:	32 e7       	ldi	r19, 0x72	; 114
    6542:	41 e3       	ldi	r20, 0x31	; 49
    6544:	5f e3       	ldi	r21, 0x3F	; 63
    6546:	8f de       	rcall	.-738    	; 0x6266 <__mulsf3x>
    6548:	af 2d       	mov	r26, r15
    654a:	98 01       	movw	r18, r16
    654c:	ae 01       	movw	r20, r28
    654e:	ff 90       	pop	r15
    6550:	0f 91       	pop	r16
    6552:	1f 91       	pop	r17
    6554:	cf 91       	pop	r28
    6556:	df 91       	pop	r29
    6558:	9a dc       	rcall	.-1740   	; 0x5e8e <__addsf3x>
    655a:	01 ce       	rjmp	.-1022   	; 0x615e <__fp_round>

0000655c <modf>:
    655c:	fa 01       	movw	r30, r20
    655e:	dc 01       	movw	r26, r24
    6560:	aa 0f       	add	r26, r26
    6562:	bb 1f       	adc	r27, r27
    6564:	9b 01       	movw	r18, r22
    6566:	ac 01       	movw	r20, r24
    6568:	bf 57       	subi	r27, 0x7F	; 127
    656a:	28 f4       	brcc	.+10     	; 0x6576 <modf+0x1a>
    656c:	22 27       	eor	r18, r18
    656e:	33 27       	eor	r19, r19
    6570:	44 27       	eor	r20, r20
    6572:	50 78       	andi	r21, 0x80	; 128
    6574:	1f c0       	rjmp	.+62     	; 0x65b4 <modf+0x58>
    6576:	b7 51       	subi	r27, 0x17	; 23
    6578:	88 f4       	brcc	.+34     	; 0x659c <modf+0x40>
    657a:	ab 2f       	mov	r26, r27
    657c:	00 24       	eor	r0, r0
    657e:	46 95       	lsr	r20
    6580:	37 95       	ror	r19
    6582:	27 95       	ror	r18
    6584:	01 1c       	adc	r0, r1
    6586:	a3 95       	inc	r26
    6588:	d2 f3       	brmi	.-12     	; 0x657e <modf+0x22>
    658a:	00 20       	and	r0, r0
    658c:	69 f0       	breq	.+26     	; 0x65a8 <modf+0x4c>
    658e:	22 0f       	add	r18, r18
    6590:	33 1f       	adc	r19, r19
    6592:	44 1f       	adc	r20, r20
    6594:	b3 95       	inc	r27
    6596:	da f3       	brmi	.-10     	; 0x658e <modf+0x32>
    6598:	0d d0       	rcall	.+26     	; 0x65b4 <modf+0x58>
    659a:	67 cc       	rjmp	.-1842   	; 0x5e6a <__subsf3>
    659c:	61 30       	cpi	r22, 0x01	; 1
    659e:	71 05       	cpc	r23, r1
    65a0:	a0 e8       	ldi	r26, 0x80	; 128
    65a2:	8a 07       	cpc	r24, r26
    65a4:	b9 46       	sbci	r27, 0x69	; 105
    65a6:	30 f4       	brcc	.+12     	; 0x65b4 <modf+0x58>
    65a8:	9b 01       	movw	r18, r22
    65aa:	ac 01       	movw	r20, r24
    65ac:	66 27       	eor	r22, r22
    65ae:	77 27       	eor	r23, r23
    65b0:	88 27       	eor	r24, r24
    65b2:	90 78       	andi	r25, 0x80	; 128
    65b4:	30 96       	adiw	r30, 0x00	; 0
    65b6:	21 f0       	breq	.+8      	; 0x65c0 <modf+0x64>
    65b8:	20 83       	st	Z, r18
    65ba:	31 83       	std	Z+1, r19	; 0x01
    65bc:	42 83       	std	Z+2, r20	; 0x02
    65be:	53 83       	std	Z+3, r21	; 0x03
    65c0:	08 95       	ret

000065c2 <__fp_mpack>:
    65c2:	9f 3f       	cpi	r25, 0xFF	; 255
    65c4:	31 f0       	breq	.+12     	; 0x65d2 <__fp_mpack_finite+0xc>

000065c6 <__fp_mpack_finite>:
    65c6:	91 50       	subi	r25, 0x01	; 1
    65c8:	20 f4       	brcc	.+8      	; 0x65d2 <__fp_mpack_finite+0xc>
    65ca:	87 95       	ror	r24
    65cc:	77 95       	ror	r23
    65ce:	67 95       	ror	r22
    65d0:	b7 95       	ror	r27
    65d2:	88 0f       	add	r24, r24
    65d4:	91 1d       	adc	r25, r1
    65d6:	96 95       	lsr	r25
    65d8:	87 95       	ror	r24
    65da:	97 f9       	bld	r25, 7
    65dc:	08 95       	ret

000065de <vfprintf>:
    65de:	a1 e1       	ldi	r26, 0x11	; 17
    65e0:	b0 e0       	ldi	r27, 0x00	; 0
    65e2:	e4 ef       	ldi	r30, 0xF4	; 244
    65e4:	f2 e3       	ldi	r31, 0x32	; 50
    65e6:	b7 c3       	rjmp	.+1902   	; 0x6d56 <__prologue_saves__>
    65e8:	3c 01       	movw	r6, r24
    65ea:	7f 87       	std	Y+15, r23	; 0x0f
    65ec:	6e 87       	std	Y+14, r22	; 0x0e
    65ee:	6a 01       	movw	r12, r20
    65f0:	fc 01       	movw	r30, r24
    65f2:	17 82       	std	Z+7, r1	; 0x07
    65f4:	16 82       	std	Z+6, r1	; 0x06
    65f6:	83 81       	ldd	r24, Z+3	; 0x03
    65f8:	81 fd       	sbrc	r24, 1
    65fa:	03 c0       	rjmp	.+6      	; 0x6602 <vfprintf+0x24>
    65fc:	6f ef       	ldi	r22, 0xFF	; 255
    65fe:	7f ef       	ldi	r23, 0xFF	; 255
    6600:	52 c3       	rjmp	.+1700   	; 0x6ca6 <vfprintf+0x6c8>
    6602:	9e 01       	movw	r18, r28
    6604:	2f 5f       	subi	r18, 0xFF	; 255
    6606:	3f 4f       	sbci	r19, 0xFF	; 255
    6608:	39 8b       	std	Y+17, r19	; 0x11
    660a:	28 8b       	std	Y+16, r18	; 0x10
    660c:	f3 01       	movw	r30, r6
    660e:	23 81       	ldd	r18, Z+3	; 0x03
    6610:	ee 85       	ldd	r30, Y+14	; 0x0e
    6612:	ff 85       	ldd	r31, Y+15	; 0x0f
    6614:	23 fd       	sbrc	r18, 3
    6616:	85 91       	lpm	r24, Z+
    6618:	23 ff       	sbrs	r18, 3
    661a:	81 91       	ld	r24, Z+
    661c:	ff 87       	std	Y+15, r31	; 0x0f
    661e:	ee 87       	std	Y+14, r30	; 0x0e
    6620:	88 23       	and	r24, r24
    6622:	09 f4       	brne	.+2      	; 0x6626 <vfprintf+0x48>
    6624:	3d c3       	rjmp	.+1658   	; 0x6ca0 <vfprintf+0x6c2>
    6626:	85 32       	cpi	r24, 0x25	; 37
    6628:	51 f4       	brne	.+20     	; 0x663e <vfprintf+0x60>
    662a:	ee 85       	ldd	r30, Y+14	; 0x0e
    662c:	ff 85       	ldd	r31, Y+15	; 0x0f
    662e:	23 fd       	sbrc	r18, 3
    6630:	85 91       	lpm	r24, Z+
    6632:	23 ff       	sbrs	r18, 3
    6634:	81 91       	ld	r24, Z+
    6636:	ff 87       	std	Y+15, r31	; 0x0f
    6638:	ee 87       	std	Y+14, r30	; 0x0e
    663a:	85 32       	cpi	r24, 0x25	; 37
    663c:	21 f4       	brne	.+8      	; 0x6646 <vfprintf+0x68>
    663e:	90 e0       	ldi	r25, 0x00	; 0
    6640:	b3 01       	movw	r22, r6
    6642:	20 d6       	rcall	.+3136   	; 0x7284 <fputc>
    6644:	e3 cf       	rjmp	.-58     	; 0x660c <vfprintf+0x2e>
    6646:	98 2f       	mov	r25, r24
    6648:	10 e0       	ldi	r17, 0x00	; 0
    664a:	88 24       	eor	r8, r8
    664c:	99 24       	eor	r9, r9
    664e:	10 32       	cpi	r17, 0x20	; 32
    6650:	b0 f4       	brcc	.+44     	; 0x667e <vfprintf+0xa0>
    6652:	9b 32       	cpi	r25, 0x2B	; 43
    6654:	69 f0       	breq	.+26     	; 0x6670 <vfprintf+0x92>
    6656:	9c 32       	cpi	r25, 0x2C	; 44
    6658:	28 f4       	brcc	.+10     	; 0x6664 <vfprintf+0x86>
    665a:	90 32       	cpi	r25, 0x20	; 32
    665c:	51 f0       	breq	.+20     	; 0x6672 <vfprintf+0x94>
    665e:	93 32       	cpi	r25, 0x23	; 35
    6660:	71 f4       	brne	.+28     	; 0x667e <vfprintf+0xa0>
    6662:	0b c0       	rjmp	.+22     	; 0x667a <vfprintf+0x9c>
    6664:	9d 32       	cpi	r25, 0x2D	; 45
    6666:	39 f0       	breq	.+14     	; 0x6676 <vfprintf+0x98>
    6668:	90 33       	cpi	r25, 0x30	; 48
    666a:	49 f4       	brne	.+18     	; 0x667e <vfprintf+0xa0>
    666c:	11 60       	ori	r17, 0x01	; 1
    666e:	28 c0       	rjmp	.+80     	; 0x66c0 <vfprintf+0xe2>
    6670:	12 60       	ori	r17, 0x02	; 2
    6672:	14 60       	ori	r17, 0x04	; 4
    6674:	25 c0       	rjmp	.+74     	; 0x66c0 <vfprintf+0xe2>
    6676:	18 60       	ori	r17, 0x08	; 8
    6678:	23 c0       	rjmp	.+70     	; 0x66c0 <vfprintf+0xe2>
    667a:	10 61       	ori	r17, 0x10	; 16
    667c:	21 c0       	rjmp	.+66     	; 0x66c0 <vfprintf+0xe2>
    667e:	17 fd       	sbrc	r17, 7
    6680:	2a c0       	rjmp	.+84     	; 0x66d6 <vfprintf+0xf8>
    6682:	89 2f       	mov	r24, r25
    6684:	80 53       	subi	r24, 0x30	; 48
    6686:	8a 30       	cpi	r24, 0x0A	; 10
    6688:	78 f4       	brcc	.+30     	; 0x66a8 <vfprintf+0xca>
    668a:	16 ff       	sbrs	r17, 6
    668c:	06 c0       	rjmp	.+12     	; 0x669a <vfprintf+0xbc>
    668e:	fa e0       	ldi	r31, 0x0A	; 10
    6690:	9f 9e       	mul	r9, r31
    6692:	90 2c       	mov	r9, r0
    6694:	11 24       	eor	r1, r1
    6696:	98 0e       	add	r9, r24
    6698:	13 c0       	rjmp	.+38     	; 0x66c0 <vfprintf+0xe2>
    669a:	3a e0       	ldi	r19, 0x0A	; 10
    669c:	83 9e       	mul	r8, r19
    669e:	80 2c       	mov	r8, r0
    66a0:	11 24       	eor	r1, r1
    66a2:	88 0e       	add	r8, r24
    66a4:	10 62       	ori	r17, 0x20	; 32
    66a6:	0c c0       	rjmp	.+24     	; 0x66c0 <vfprintf+0xe2>
    66a8:	9e 32       	cpi	r25, 0x2E	; 46
    66aa:	21 f4       	brne	.+8      	; 0x66b4 <vfprintf+0xd6>
    66ac:	16 fd       	sbrc	r17, 6
    66ae:	f8 c2       	rjmp	.+1520   	; 0x6ca0 <vfprintf+0x6c2>
    66b0:	10 64       	ori	r17, 0x40	; 64
    66b2:	06 c0       	rjmp	.+12     	; 0x66c0 <vfprintf+0xe2>
    66b4:	9c 36       	cpi	r25, 0x6C	; 108
    66b6:	11 f4       	brne	.+4      	; 0x66bc <vfprintf+0xde>
    66b8:	10 68       	ori	r17, 0x80	; 128
    66ba:	02 c0       	rjmp	.+4      	; 0x66c0 <vfprintf+0xe2>
    66bc:	98 36       	cpi	r25, 0x68	; 104
    66be:	59 f4       	brne	.+22     	; 0x66d6 <vfprintf+0xf8>
    66c0:	ee 85       	ldd	r30, Y+14	; 0x0e
    66c2:	ff 85       	ldd	r31, Y+15	; 0x0f
    66c4:	23 fd       	sbrc	r18, 3
    66c6:	95 91       	lpm	r25, Z+
    66c8:	23 ff       	sbrs	r18, 3
    66ca:	91 91       	ld	r25, Z+
    66cc:	ff 87       	std	Y+15, r31	; 0x0f
    66ce:	ee 87       	std	Y+14, r30	; 0x0e
    66d0:	99 23       	and	r25, r25
    66d2:	09 f0       	breq	.+2      	; 0x66d6 <vfprintf+0xf8>
    66d4:	bc cf       	rjmp	.-136    	; 0x664e <vfprintf+0x70>
    66d6:	89 2f       	mov	r24, r25
    66d8:	85 54       	subi	r24, 0x45	; 69
    66da:	83 30       	cpi	r24, 0x03	; 3
    66dc:	20 f4       	brcc	.+8      	; 0x66e6 <vfprintf+0x108>
    66de:	81 2f       	mov	r24, r17
    66e0:	80 61       	ori	r24, 0x10	; 16
    66e2:	90 5e       	subi	r25, 0xE0	; 224
    66e4:	07 c0       	rjmp	.+14     	; 0x66f4 <vfprintf+0x116>
    66e6:	89 2f       	mov	r24, r25
    66e8:	85 56       	subi	r24, 0x65	; 101
    66ea:	83 30       	cpi	r24, 0x03	; 3
    66ec:	08 f0       	brcs	.+2      	; 0x66f0 <vfprintf+0x112>
    66ee:	8f c1       	rjmp	.+798    	; 0x6a0e <vfprintf+0x430>
    66f0:	81 2f       	mov	r24, r17
    66f2:	8f 7e       	andi	r24, 0xEF	; 239
    66f4:	86 fd       	sbrc	r24, 6
    66f6:	02 c0       	rjmp	.+4      	; 0x66fc <vfprintf+0x11e>
    66f8:	76 e0       	ldi	r23, 0x06	; 6
    66fa:	97 2e       	mov	r9, r23
    66fc:	6f e3       	ldi	r22, 0x3F	; 63
    66fe:	f6 2e       	mov	r15, r22
    6700:	f8 22       	and	r15, r24
    6702:	95 36       	cpi	r25, 0x65	; 101
    6704:	19 f4       	brne	.+6      	; 0x670c <vfprintf+0x12e>
    6706:	f0 e4       	ldi	r31, 0x40	; 64
    6708:	ff 2a       	or	r15, r31
    670a:	07 c0       	rjmp	.+14     	; 0x671a <vfprintf+0x13c>
    670c:	96 36       	cpi	r25, 0x66	; 102
    670e:	19 f4       	brne	.+6      	; 0x6716 <vfprintf+0x138>
    6710:	20 e8       	ldi	r18, 0x80	; 128
    6712:	f2 2a       	or	r15, r18
    6714:	02 c0       	rjmp	.+4      	; 0x671a <vfprintf+0x13c>
    6716:	91 10       	cpse	r9, r1
    6718:	9a 94       	dec	r9
    671a:	f7 fe       	sbrs	r15, 7
    671c:	0a c0       	rjmp	.+20     	; 0x6732 <vfprintf+0x154>
    671e:	3b e3       	ldi	r19, 0x3B	; 59
    6720:	39 15       	cp	r19, r9
    6722:	18 f4       	brcc	.+6      	; 0x672a <vfprintf+0x14c>
    6724:	5c e3       	ldi	r21, 0x3C	; 60
    6726:	b5 2e       	mov	r11, r21
    6728:	02 c0       	rjmp	.+4      	; 0x672e <vfprintf+0x150>
    672a:	b9 2c       	mov	r11, r9
    672c:	b3 94       	inc	r11
    672e:	27 e0       	ldi	r18, 0x07	; 7
    6730:	09 c0       	rjmp	.+18     	; 0x6744 <vfprintf+0x166>
    6732:	47 e0       	ldi	r20, 0x07	; 7
    6734:	49 15       	cp	r20, r9
    6736:	20 f4       	brcc	.+8      	; 0x6740 <vfprintf+0x162>
    6738:	bb 24       	eor	r11, r11
    673a:	47 e0       	ldi	r20, 0x07	; 7
    673c:	94 2e       	mov	r9, r20
    673e:	f7 cf       	rjmp	.-18     	; 0x672e <vfprintf+0x150>
    6740:	29 2d       	mov	r18, r9
    6742:	bb 24       	eor	r11, r11
    6744:	c6 01       	movw	r24, r12
    6746:	04 96       	adiw	r24, 0x04	; 4
    6748:	9d 87       	std	Y+13, r25	; 0x0d
    674a:	8c 87       	std	Y+12, r24	; 0x0c
    674c:	f6 01       	movw	r30, r12
    674e:	60 81       	ld	r22, Z
    6750:	71 81       	ldd	r23, Z+1	; 0x01
    6752:	82 81       	ldd	r24, Z+2	; 0x02
    6754:	93 81       	ldd	r25, Z+3	; 0x03
    6756:	ae 01       	movw	r20, r28
    6758:	4f 5f       	subi	r20, 0xFF	; 255
    675a:	5f 4f       	sbci	r21, 0xFF	; 255
    675c:	0b 2d       	mov	r16, r11
    675e:	a4 d4       	rcall	.+2376   	; 0x70a8 <__ftoa_engine>
    6760:	6c 01       	movw	r12, r24
    6762:	09 81       	ldd	r16, Y+1	; 0x01
    6764:	20 2e       	mov	r2, r16
    6766:	33 24       	eor	r3, r3
    6768:	00 ff       	sbrs	r16, 0
    676a:	04 c0       	rjmp	.+8      	; 0x6774 <vfprintf+0x196>
    676c:	03 fd       	sbrc	r16, 3
    676e:	02 c0       	rjmp	.+4      	; 0x6774 <vfprintf+0x196>
    6770:	1d e2       	ldi	r17, 0x2D	; 45
    6772:	09 c0       	rjmp	.+18     	; 0x6786 <vfprintf+0x1a8>
    6774:	f1 fe       	sbrs	r15, 1
    6776:	02 c0       	rjmp	.+4      	; 0x677c <vfprintf+0x19e>
    6778:	1b e2       	ldi	r17, 0x2B	; 43
    677a:	05 c0       	rjmp	.+10     	; 0x6786 <vfprintf+0x1a8>
    677c:	f2 fc       	sbrc	r15, 2
    677e:	02 c0       	rjmp	.+4      	; 0x6784 <vfprintf+0x1a6>
    6780:	10 e0       	ldi	r17, 0x00	; 0
    6782:	01 c0       	rjmp	.+2      	; 0x6786 <vfprintf+0x1a8>
    6784:	10 e2       	ldi	r17, 0x20	; 32
    6786:	c1 01       	movw	r24, r2
    6788:	8c 70       	andi	r24, 0x0C	; 12
    678a:	90 70       	andi	r25, 0x00	; 0
    678c:	89 2b       	or	r24, r25
    678e:	a1 f1       	breq	.+104    	; 0x67f8 <vfprintf+0x21a>
    6790:	11 23       	and	r17, r17
    6792:	11 f4       	brne	.+4      	; 0x6798 <vfprintf+0x1ba>
    6794:	83 e0       	ldi	r24, 0x03	; 3
    6796:	01 c0       	rjmp	.+2      	; 0x679a <vfprintf+0x1bc>
    6798:	84 e0       	ldi	r24, 0x04	; 4
    679a:	88 15       	cp	r24, r8
    679c:	10 f0       	brcs	.+4      	; 0x67a2 <vfprintf+0x1c4>
    679e:	88 24       	eor	r8, r8
    67a0:	09 c0       	rjmp	.+18     	; 0x67b4 <vfprintf+0x1d6>
    67a2:	88 1a       	sub	r8, r24
    67a4:	f3 fc       	sbrc	r15, 3
    67a6:	06 c0       	rjmp	.+12     	; 0x67b4 <vfprintf+0x1d6>
    67a8:	80 e2       	ldi	r24, 0x20	; 32
    67aa:	90 e0       	ldi	r25, 0x00	; 0
    67ac:	b3 01       	movw	r22, r6
    67ae:	6a d5       	rcall	.+2772   	; 0x7284 <fputc>
    67b0:	8a 94       	dec	r8
    67b2:	d1 f7       	brne	.-12     	; 0x67a8 <vfprintf+0x1ca>
    67b4:	11 23       	and	r17, r17
    67b6:	21 f0       	breq	.+8      	; 0x67c0 <vfprintf+0x1e2>
    67b8:	81 2f       	mov	r24, r17
    67ba:	90 e0       	ldi	r25, 0x00	; 0
    67bc:	b3 01       	movw	r22, r6
    67be:	62 d5       	rcall	.+2756   	; 0x7284 <fputc>
    67c0:	23 fe       	sbrs	r2, 3
    67c2:	03 c0       	rjmp	.+6      	; 0x67ca <vfprintf+0x1ec>
    67c4:	0f e5       	ldi	r16, 0x5F	; 95
    67c6:	15 e0       	ldi	r17, 0x05	; 5
    67c8:	0d c0       	rjmp	.+26     	; 0x67e4 <vfprintf+0x206>
    67ca:	03 e6       	ldi	r16, 0x63	; 99
    67cc:	15 e0       	ldi	r17, 0x05	; 5
    67ce:	0a c0       	rjmp	.+20     	; 0x67e4 <vfprintf+0x206>
    67d0:	e1 14       	cp	r14, r1
    67d2:	f1 04       	cpc	r15, r1
    67d4:	09 f0       	breq	.+2      	; 0x67d8 <vfprintf+0x1fa>
    67d6:	80 52       	subi	r24, 0x20	; 32
    67d8:	90 e0       	ldi	r25, 0x00	; 0
    67da:	b3 01       	movw	r22, r6
    67dc:	53 d5       	rcall	.+2726   	; 0x7284 <fputc>
    67de:	0f 5f       	subi	r16, 0xFF	; 255
    67e0:	1f 4f       	sbci	r17, 0xFF	; 255
    67e2:	05 c0       	rjmp	.+10     	; 0x67ee <vfprintf+0x210>
    67e4:	ef 2c       	mov	r14, r15
    67e6:	ff 24       	eor	r15, r15
    67e8:	f0 e1       	ldi	r31, 0x10	; 16
    67ea:	ef 22       	and	r14, r31
    67ec:	ff 24       	eor	r15, r15
    67ee:	f8 01       	movw	r30, r16
    67f0:	84 91       	lpm	r24, Z+
    67f2:	88 23       	and	r24, r24
    67f4:	69 f7       	brne	.-38     	; 0x67d0 <vfprintf+0x1f2>
    67f6:	08 c1       	rjmp	.+528    	; 0x6a08 <vfprintf+0x42a>
    67f8:	f7 fe       	sbrs	r15, 7
    67fa:	12 c0       	rjmp	.+36     	; 0x6820 <vfprintf+0x242>
    67fc:	bc 0c       	add	r11, r12
    67fe:	24 fe       	sbrs	r2, 4
    6800:	04 c0       	rjmp	.+8      	; 0x680a <vfprintf+0x22c>
    6802:	8a 81       	ldd	r24, Y+2	; 0x02
    6804:	81 33       	cpi	r24, 0x31	; 49
    6806:	09 f4       	brne	.+2      	; 0x680a <vfprintf+0x22c>
    6808:	ba 94       	dec	r11
    680a:	1b 14       	cp	r1, r11
    680c:	1c f0       	brlt	.+6      	; 0x6814 <vfprintf+0x236>
    680e:	bb 24       	eor	r11, r11
    6810:	b3 94       	inc	r11
    6812:	2d c0       	rjmp	.+90     	; 0x686e <vfprintf+0x290>
    6814:	f8 e0       	ldi	r31, 0x08	; 8
    6816:	fb 15       	cp	r31, r11
    6818:	50 f5       	brcc	.+84     	; 0x686e <vfprintf+0x290>
    681a:	38 e0       	ldi	r19, 0x08	; 8
    681c:	b3 2e       	mov	r11, r19
    681e:	27 c0       	rjmp	.+78     	; 0x686e <vfprintf+0x290>
    6820:	f6 fc       	sbrc	r15, 6
    6822:	25 c0       	rjmp	.+74     	; 0x686e <vfprintf+0x290>
    6824:	89 2d       	mov	r24, r9
    6826:	90 e0       	ldi	r25, 0x00	; 0
    6828:	8c 15       	cp	r24, r12
    682a:	9d 05       	cpc	r25, r13
    682c:	4c f0       	brlt	.+18     	; 0x6840 <vfprintf+0x262>
    682e:	2c ef       	ldi	r18, 0xFC	; 252
    6830:	c2 16       	cp	r12, r18
    6832:	2f ef       	ldi	r18, 0xFF	; 255
    6834:	d2 06       	cpc	r13, r18
    6836:	24 f0       	brlt	.+8      	; 0x6840 <vfprintf+0x262>
    6838:	30 e8       	ldi	r19, 0x80	; 128
    683a:	f3 2a       	or	r15, r19
    683c:	01 c0       	rjmp	.+2      	; 0x6840 <vfprintf+0x262>
    683e:	9a 94       	dec	r9
    6840:	99 20       	and	r9, r9
    6842:	49 f0       	breq	.+18     	; 0x6856 <vfprintf+0x278>
    6844:	e2 e0       	ldi	r30, 0x02	; 2
    6846:	f0 e0       	ldi	r31, 0x00	; 0
    6848:	ec 0f       	add	r30, r28
    684a:	fd 1f       	adc	r31, r29
    684c:	e9 0d       	add	r30, r9
    684e:	f1 1d       	adc	r31, r1
    6850:	80 81       	ld	r24, Z
    6852:	80 33       	cpi	r24, 0x30	; 48
    6854:	a1 f3       	breq	.-24     	; 0x683e <vfprintf+0x260>
    6856:	f7 fe       	sbrs	r15, 7
    6858:	0a c0       	rjmp	.+20     	; 0x686e <vfprintf+0x290>
    685a:	b9 2c       	mov	r11, r9
    685c:	b3 94       	inc	r11
    685e:	89 2d       	mov	r24, r9
    6860:	90 e0       	ldi	r25, 0x00	; 0
    6862:	c8 16       	cp	r12, r24
    6864:	d9 06       	cpc	r13, r25
    6866:	14 f0       	brlt	.+4      	; 0x686c <vfprintf+0x28e>
    6868:	99 24       	eor	r9, r9
    686a:	01 c0       	rjmp	.+2      	; 0x686e <vfprintf+0x290>
    686c:	9c 18       	sub	r9, r12
    686e:	f7 fc       	sbrc	r15, 7
    6870:	03 c0       	rjmp	.+6      	; 0x6878 <vfprintf+0x29a>
    6872:	25 e0       	ldi	r18, 0x05	; 5
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	09 c0       	rjmp	.+18     	; 0x688a <vfprintf+0x2ac>
    6878:	1c 14       	cp	r1, r12
    687a:	1d 04       	cpc	r1, r13
    687c:	1c f0       	brlt	.+6      	; 0x6884 <vfprintf+0x2a6>
    687e:	21 e0       	ldi	r18, 0x01	; 1
    6880:	30 e0       	ldi	r19, 0x00	; 0
    6882:	03 c0       	rjmp	.+6      	; 0x688a <vfprintf+0x2ac>
    6884:	96 01       	movw	r18, r12
    6886:	2f 5f       	subi	r18, 0xFF	; 255
    6888:	3f 4f       	sbci	r19, 0xFF	; 255
    688a:	11 23       	and	r17, r17
    688c:	11 f0       	breq	.+4      	; 0x6892 <vfprintf+0x2b4>
    688e:	2f 5f       	subi	r18, 0xFF	; 255
    6890:	3f 4f       	sbci	r19, 0xFF	; 255
    6892:	99 20       	and	r9, r9
    6894:	29 f0       	breq	.+10     	; 0x68a0 <vfprintf+0x2c2>
    6896:	89 2d       	mov	r24, r9
    6898:	90 e0       	ldi	r25, 0x00	; 0
    689a:	01 96       	adiw	r24, 0x01	; 1
    689c:	28 0f       	add	r18, r24
    689e:	39 1f       	adc	r19, r25
    68a0:	88 2d       	mov	r24, r8
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	28 17       	cp	r18, r24
    68a6:	39 07       	cpc	r19, r25
    68a8:	14 f0       	brlt	.+4      	; 0x68ae <vfprintf+0x2d0>
    68aa:	88 24       	eor	r8, r8
    68ac:	01 c0       	rjmp	.+2      	; 0x68b0 <vfprintf+0x2d2>
    68ae:	82 1a       	sub	r8, r18
    68b0:	4f 2c       	mov	r4, r15
    68b2:	55 24       	eor	r5, r5
    68b4:	c2 01       	movw	r24, r4
    68b6:	89 70       	andi	r24, 0x09	; 9
    68b8:	90 70       	andi	r25, 0x00	; 0
    68ba:	89 2b       	or	r24, r25
    68bc:	31 f0       	breq	.+12     	; 0x68ca <vfprintf+0x2ec>
    68be:	07 c0       	rjmp	.+14     	; 0x68ce <vfprintf+0x2f0>
    68c0:	80 e2       	ldi	r24, 0x20	; 32
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    68c4:	b3 01       	movw	r22, r6
    68c6:	de d4       	rcall	.+2492   	; 0x7284 <fputc>
    68c8:	8a 94       	dec	r8
    68ca:	88 20       	and	r8, r8
    68cc:	c9 f7       	brne	.-14     	; 0x68c0 <vfprintf+0x2e2>
    68ce:	11 23       	and	r17, r17
    68d0:	21 f0       	breq	.+8      	; 0x68da <vfprintf+0x2fc>
    68d2:	81 2f       	mov	r24, r17
    68d4:	90 e0       	ldi	r25, 0x00	; 0
    68d6:	b3 01       	movw	r22, r6
    68d8:	d5 d4       	rcall	.+2474   	; 0x7284 <fputc>
    68da:	43 fe       	sbrs	r4, 3
    68dc:	06 c0       	rjmp	.+12     	; 0x68ea <vfprintf+0x30c>
    68de:	07 c0       	rjmp	.+14     	; 0x68ee <vfprintf+0x310>
    68e0:	80 e3       	ldi	r24, 0x30	; 48
    68e2:	90 e0       	ldi	r25, 0x00	; 0
    68e4:	b3 01       	movw	r22, r6
    68e6:	ce d4       	rcall	.+2460   	; 0x7284 <fputc>
    68e8:	8a 94       	dec	r8
    68ea:	88 20       	and	r8, r8
    68ec:	c9 f7       	brne	.-14     	; 0x68e0 <vfprintf+0x302>
    68ee:	f7 fe       	sbrs	r15, 7
    68f0:	44 c0       	rjmp	.+136    	; 0x697a <vfprintf+0x39c>
    68f2:	86 01       	movw	r16, r12
    68f4:	d7 fe       	sbrs	r13, 7
    68f6:	02 c0       	rjmp	.+4      	; 0x68fc <vfprintf+0x31e>
    68f8:	00 e0       	ldi	r16, 0x00	; 0
    68fa:	10 e0       	ldi	r17, 0x00	; 0
    68fc:	76 01       	movw	r14, r12
    68fe:	08 94       	sec
    6900:	e1 1c       	adc	r14, r1
    6902:	f1 1c       	adc	r15, r1
    6904:	e0 1a       	sub	r14, r16
    6906:	f1 0a       	sbc	r15, r17
    6908:	41 e0       	ldi	r20, 0x01	; 1
    690a:	50 e0       	ldi	r21, 0x00	; 0
    690c:	4c 0f       	add	r20, r28
    690e:	5d 1f       	adc	r21, r29
    6910:	e4 0e       	add	r14, r20
    6912:	f5 1e       	adc	r15, r21
    6914:	26 01       	movw	r4, r12
    6916:	4b 18       	sub	r4, r11
    6918:	51 08       	sbc	r5, r1
    691a:	89 2d       	mov	r24, r9
    691c:	90 e0       	ldi	r25, 0x00	; 0
    691e:	aa 24       	eor	r10, r10
    6920:	bb 24       	eor	r11, r11
    6922:	a8 1a       	sub	r10, r24
    6924:	b9 0a       	sbc	r11, r25
    6926:	5f ef       	ldi	r21, 0xFF	; 255
    6928:	0f 3f       	cpi	r16, 0xFF	; 255
    692a:	15 07       	cpc	r17, r21
    692c:	21 f4       	brne	.+8      	; 0x6936 <vfprintf+0x358>
    692e:	8e e2       	ldi	r24, 0x2E	; 46
    6930:	90 e0       	ldi	r25, 0x00	; 0
    6932:	b3 01       	movw	r22, r6
    6934:	a7 d4       	rcall	.+2382   	; 0x7284 <fputc>
    6936:	c0 16       	cp	r12, r16
    6938:	d1 06       	cpc	r13, r17
    693a:	34 f0       	brlt	.+12     	; 0x6948 <vfprintf+0x36a>
    693c:	40 16       	cp	r4, r16
    693e:	51 06       	cpc	r5, r17
    6940:	1c f4       	brge	.+6      	; 0x6948 <vfprintf+0x36a>
    6942:	f7 01       	movw	r30, r14
    6944:	80 81       	ld	r24, Z
    6946:	01 c0       	rjmp	.+2      	; 0x694a <vfprintf+0x36c>
    6948:	80 e3       	ldi	r24, 0x30	; 48
    694a:	01 50       	subi	r16, 0x01	; 1
    694c:	10 40       	sbci	r17, 0x00	; 0
    694e:	08 94       	sec
    6950:	e1 1c       	adc	r14, r1
    6952:	f1 1c       	adc	r15, r1
    6954:	0a 15       	cp	r16, r10
    6956:	1b 05       	cpc	r17, r11
    6958:	24 f0       	brlt	.+8      	; 0x6962 <vfprintf+0x384>
    695a:	90 e0       	ldi	r25, 0x00	; 0
    695c:	b3 01       	movw	r22, r6
    695e:	92 d4       	rcall	.+2340   	; 0x7284 <fputc>
    6960:	e2 cf       	rjmp	.-60     	; 0x6926 <vfprintf+0x348>
    6962:	0c 15       	cp	r16, r12
    6964:	1d 05       	cpc	r17, r13
    6966:	39 f4       	brne	.+14     	; 0x6976 <vfprintf+0x398>
    6968:	9a 81       	ldd	r25, Y+2	; 0x02
    696a:	96 33       	cpi	r25, 0x36	; 54
    696c:	18 f4       	brcc	.+6      	; 0x6974 <vfprintf+0x396>
    696e:	95 33       	cpi	r25, 0x35	; 53
    6970:	11 f4       	brne	.+4      	; 0x6976 <vfprintf+0x398>
    6972:	24 fe       	sbrs	r2, 4
    6974:	81 e3       	ldi	r24, 0x31	; 49
    6976:	90 e0       	ldi	r25, 0x00	; 0
    6978:	45 c0       	rjmp	.+138    	; 0x6a04 <vfprintf+0x426>
    697a:	8a 81       	ldd	r24, Y+2	; 0x02
    697c:	81 33       	cpi	r24, 0x31	; 49
    697e:	09 f0       	breq	.+2      	; 0x6982 <vfprintf+0x3a4>
    6980:	0f 7e       	andi	r16, 0xEF	; 239
    6982:	90 e0       	ldi	r25, 0x00	; 0
    6984:	b3 01       	movw	r22, r6
    6986:	7e d4       	rcall	.+2300   	; 0x7284 <fputc>
    6988:	99 20       	and	r9, r9
    698a:	91 f0       	breq	.+36     	; 0x69b0 <vfprintf+0x3d2>
    698c:	8e e2       	ldi	r24, 0x2E	; 46
    698e:	90 e0       	ldi	r25, 0x00	; 0
    6990:	b3 01       	movw	r22, r6
    6992:	78 d4       	rcall	.+2288   	; 0x7284 <fputc>
    6994:	12 e0       	ldi	r17, 0x02	; 2
    6996:	e1 e0       	ldi	r30, 0x01	; 1
    6998:	f0 e0       	ldi	r31, 0x00	; 0
    699a:	ec 0f       	add	r30, r28
    699c:	fd 1f       	adc	r31, r29
    699e:	e1 0f       	add	r30, r17
    69a0:	f1 1d       	adc	r31, r1
    69a2:	1f 5f       	subi	r17, 0xFF	; 255
    69a4:	80 81       	ld	r24, Z
    69a6:	90 e0       	ldi	r25, 0x00	; 0
    69a8:	b3 01       	movw	r22, r6
    69aa:	6c d4       	rcall	.+2264   	; 0x7284 <fputc>
    69ac:	9a 94       	dec	r9
    69ae:	99 f7       	brne	.-26     	; 0x6996 <vfprintf+0x3b8>
    69b0:	44 fc       	sbrc	r4, 4
    69b2:	03 c0       	rjmp	.+6      	; 0x69ba <vfprintf+0x3dc>
    69b4:	85 e6       	ldi	r24, 0x65	; 101
    69b6:	90 e0       	ldi	r25, 0x00	; 0
    69b8:	02 c0       	rjmp	.+4      	; 0x69be <vfprintf+0x3e0>
    69ba:	85 e4       	ldi	r24, 0x45	; 69
    69bc:	90 e0       	ldi	r25, 0x00	; 0
    69be:	b3 01       	movw	r22, r6
    69c0:	61 d4       	rcall	.+2242   	; 0x7284 <fputc>
    69c2:	d7 fc       	sbrc	r13, 7
    69c4:	05 c0       	rjmp	.+10     	; 0x69d0 <vfprintf+0x3f2>
    69c6:	c1 14       	cp	r12, r1
    69c8:	d1 04       	cpc	r13, r1
    69ca:	41 f4       	brne	.+16     	; 0x69dc <vfprintf+0x3fe>
    69cc:	04 ff       	sbrs	r16, 4
    69ce:	06 c0       	rjmp	.+12     	; 0x69dc <vfprintf+0x3fe>
    69d0:	d0 94       	com	r13
    69d2:	c1 94       	neg	r12
    69d4:	d1 08       	sbc	r13, r1
    69d6:	d3 94       	inc	r13
    69d8:	8d e2       	ldi	r24, 0x2D	; 45
    69da:	01 c0       	rjmp	.+2      	; 0x69de <vfprintf+0x400>
    69dc:	8b e2       	ldi	r24, 0x2B	; 43
    69de:	90 e0       	ldi	r25, 0x00	; 0
    69e0:	b3 01       	movw	r22, r6
    69e2:	50 d4       	rcall	.+2208   	; 0x7284 <fputc>
    69e4:	80 e3       	ldi	r24, 0x30	; 48
    69e6:	05 c0       	rjmp	.+10     	; 0x69f2 <vfprintf+0x414>
    69e8:	8f 5f       	subi	r24, 0xFF	; 255
    69ea:	26 ef       	ldi	r18, 0xF6	; 246
    69ec:	3f ef       	ldi	r19, 0xFF	; 255
    69ee:	c2 0e       	add	r12, r18
    69f0:	d3 1e       	adc	r13, r19
    69f2:	3a e0       	ldi	r19, 0x0A	; 10
    69f4:	c3 16       	cp	r12, r19
    69f6:	d1 04       	cpc	r13, r1
    69f8:	bc f7       	brge	.-18     	; 0x69e8 <vfprintf+0x40a>
    69fa:	90 e0       	ldi	r25, 0x00	; 0
    69fc:	b3 01       	movw	r22, r6
    69fe:	42 d4       	rcall	.+2180   	; 0x7284 <fputc>
    6a00:	c6 01       	movw	r24, r12
    6a02:	c0 96       	adiw	r24, 0x30	; 48
    6a04:	b3 01       	movw	r22, r6
    6a06:	3e d4       	rcall	.+2172   	; 0x7284 <fputc>
    6a08:	cc 84       	ldd	r12, Y+12	; 0x0c
    6a0a:	dd 84       	ldd	r13, Y+13	; 0x0d
    6a0c:	46 c1       	rjmp	.+652    	; 0x6c9a <vfprintf+0x6bc>
    6a0e:	93 36       	cpi	r25, 0x63	; 99
    6a10:	31 f0       	breq	.+12     	; 0x6a1e <vfprintf+0x440>
    6a12:	93 37       	cpi	r25, 0x73	; 115
    6a14:	99 f0       	breq	.+38     	; 0x6a3c <vfprintf+0x45e>
    6a16:	93 35       	cpi	r25, 0x53	; 83
    6a18:	09 f0       	breq	.+2      	; 0x6a1c <vfprintf+0x43e>
    6a1a:	55 c0       	rjmp	.+170    	; 0x6ac6 <vfprintf+0x4e8>
    6a1c:	22 c0       	rjmp	.+68     	; 0x6a62 <vfprintf+0x484>
    6a1e:	f6 01       	movw	r30, r12
    6a20:	80 81       	ld	r24, Z
    6a22:	89 83       	std	Y+1, r24	; 0x01
    6a24:	5e 01       	movw	r10, r28
    6a26:	08 94       	sec
    6a28:	a1 1c       	adc	r10, r1
    6a2a:	b1 1c       	adc	r11, r1
    6a2c:	22 e0       	ldi	r18, 0x02	; 2
    6a2e:	30 e0       	ldi	r19, 0x00	; 0
    6a30:	c2 0e       	add	r12, r18
    6a32:	d3 1e       	adc	r13, r19
    6a34:	21 e0       	ldi	r18, 0x01	; 1
    6a36:	e2 2e       	mov	r14, r18
    6a38:	f1 2c       	mov	r15, r1
    6a3a:	11 c0       	rjmp	.+34     	; 0x6a5e <vfprintf+0x480>
    6a3c:	f6 01       	movw	r30, r12
    6a3e:	a0 80       	ld	r10, Z
    6a40:	b1 80       	ldd	r11, Z+1	; 0x01
    6a42:	16 fd       	sbrc	r17, 6
    6a44:	03 c0       	rjmp	.+6      	; 0x6a4c <vfprintf+0x46e>
    6a46:	6f ef       	ldi	r22, 0xFF	; 255
    6a48:	7f ef       	ldi	r23, 0xFF	; 255
    6a4a:	02 c0       	rjmp	.+4      	; 0x6a50 <vfprintf+0x472>
    6a4c:	69 2d       	mov	r22, r9
    6a4e:	70 e0       	ldi	r23, 0x00	; 0
    6a50:	22 e0       	ldi	r18, 0x02	; 2
    6a52:	30 e0       	ldi	r19, 0x00	; 0
    6a54:	c2 0e       	add	r12, r18
    6a56:	d3 1e       	adc	r13, r19
    6a58:	c5 01       	movw	r24, r10
    6a5a:	09 d4       	rcall	.+2066   	; 0x726e <strnlen>
    6a5c:	7c 01       	movw	r14, r24
    6a5e:	1f 77       	andi	r17, 0x7F	; 127
    6a60:	12 c0       	rjmp	.+36     	; 0x6a86 <vfprintf+0x4a8>
    6a62:	f6 01       	movw	r30, r12
    6a64:	a0 80       	ld	r10, Z
    6a66:	b1 80       	ldd	r11, Z+1	; 0x01
    6a68:	16 fd       	sbrc	r17, 6
    6a6a:	03 c0       	rjmp	.+6      	; 0x6a72 <vfprintf+0x494>
    6a6c:	6f ef       	ldi	r22, 0xFF	; 255
    6a6e:	7f ef       	ldi	r23, 0xFF	; 255
    6a70:	02 c0       	rjmp	.+4      	; 0x6a76 <vfprintf+0x498>
    6a72:	69 2d       	mov	r22, r9
    6a74:	70 e0       	ldi	r23, 0x00	; 0
    6a76:	22 e0       	ldi	r18, 0x02	; 2
    6a78:	30 e0       	ldi	r19, 0x00	; 0
    6a7a:	c2 0e       	add	r12, r18
    6a7c:	d3 1e       	adc	r13, r19
    6a7e:	c5 01       	movw	r24, r10
    6a80:	eb d3       	rcall	.+2006   	; 0x7258 <strnlen_P>
    6a82:	7c 01       	movw	r14, r24
    6a84:	10 68       	ori	r17, 0x80	; 128
    6a86:	13 ff       	sbrs	r17, 3
    6a88:	06 c0       	rjmp	.+12     	; 0x6a96 <vfprintf+0x4b8>
    6a8a:	19 c0       	rjmp	.+50     	; 0x6abe <vfprintf+0x4e0>
    6a8c:	80 e2       	ldi	r24, 0x20	; 32
    6a8e:	90 e0       	ldi	r25, 0x00	; 0
    6a90:	b3 01       	movw	r22, r6
    6a92:	f8 d3       	rcall	.+2032   	; 0x7284 <fputc>
    6a94:	8a 94       	dec	r8
    6a96:	88 2d       	mov	r24, r8
    6a98:	90 e0       	ldi	r25, 0x00	; 0
    6a9a:	e8 16       	cp	r14, r24
    6a9c:	f9 06       	cpc	r15, r25
    6a9e:	b0 f3       	brcs	.-20     	; 0x6a8c <vfprintf+0x4ae>
    6aa0:	0e c0       	rjmp	.+28     	; 0x6abe <vfprintf+0x4e0>
    6aa2:	f5 01       	movw	r30, r10
    6aa4:	17 fd       	sbrc	r17, 7
    6aa6:	85 91       	lpm	r24, Z+
    6aa8:	17 ff       	sbrs	r17, 7
    6aaa:	81 91       	ld	r24, Z+
    6aac:	5f 01       	movw	r10, r30
    6aae:	90 e0       	ldi	r25, 0x00	; 0
    6ab0:	b3 01       	movw	r22, r6
    6ab2:	e8 d3       	rcall	.+2000   	; 0x7284 <fputc>
    6ab4:	81 10       	cpse	r8, r1
    6ab6:	8a 94       	dec	r8
    6ab8:	08 94       	sec
    6aba:	e1 08       	sbc	r14, r1
    6abc:	f1 08       	sbc	r15, r1
    6abe:	e1 14       	cp	r14, r1
    6ac0:	f1 04       	cpc	r15, r1
    6ac2:	79 f7       	brne	.-34     	; 0x6aa2 <vfprintf+0x4c4>
    6ac4:	ea c0       	rjmp	.+468    	; 0x6c9a <vfprintf+0x6bc>
    6ac6:	94 36       	cpi	r25, 0x64	; 100
    6ac8:	11 f0       	breq	.+4      	; 0x6ace <vfprintf+0x4f0>
    6aca:	99 36       	cpi	r25, 0x69	; 105
    6acc:	81 f5       	brne	.+96     	; 0x6b2e <vfprintf+0x550>
    6ace:	17 ff       	sbrs	r17, 7
    6ad0:	08 c0       	rjmp	.+16     	; 0x6ae2 <vfprintf+0x504>
    6ad2:	f6 01       	movw	r30, r12
    6ad4:	20 81       	ld	r18, Z
    6ad6:	31 81       	ldd	r19, Z+1	; 0x01
    6ad8:	42 81       	ldd	r20, Z+2	; 0x02
    6ada:	53 81       	ldd	r21, Z+3	; 0x03
    6adc:	84 e0       	ldi	r24, 0x04	; 4
    6ade:	90 e0       	ldi	r25, 0x00	; 0
    6ae0:	0a c0       	rjmp	.+20     	; 0x6af6 <vfprintf+0x518>
    6ae2:	f6 01       	movw	r30, r12
    6ae4:	80 81       	ld	r24, Z
    6ae6:	91 81       	ldd	r25, Z+1	; 0x01
    6ae8:	9c 01       	movw	r18, r24
    6aea:	44 27       	eor	r20, r20
    6aec:	37 fd       	sbrc	r19, 7
    6aee:	40 95       	com	r20
    6af0:	54 2f       	mov	r21, r20
    6af2:	82 e0       	ldi	r24, 0x02	; 2
    6af4:	90 e0       	ldi	r25, 0x00	; 0
    6af6:	c8 0e       	add	r12, r24
    6af8:	d9 1e       	adc	r13, r25
    6afa:	9f e6       	ldi	r25, 0x6F	; 111
    6afc:	f9 2e       	mov	r15, r25
    6afe:	f1 22       	and	r15, r17
    6b00:	57 ff       	sbrs	r21, 7
    6b02:	09 c0       	rjmp	.+18     	; 0x6b16 <vfprintf+0x538>
    6b04:	50 95       	com	r21
    6b06:	40 95       	com	r20
    6b08:	30 95       	com	r19
    6b0a:	21 95       	neg	r18
    6b0c:	3f 4f       	sbci	r19, 0xFF	; 255
    6b0e:	4f 4f       	sbci	r20, 0xFF	; 255
    6b10:	5f 4f       	sbci	r21, 0xFF	; 255
    6b12:	90 e8       	ldi	r25, 0x80	; 128
    6b14:	f9 2a       	or	r15, r25
    6b16:	ca 01       	movw	r24, r20
    6b18:	b9 01       	movw	r22, r18
    6b1a:	ae 01       	movw	r20, r28
    6b1c:	4f 5f       	subi	r20, 0xFF	; 255
    6b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    6b20:	2a e0       	ldi	r18, 0x0A	; 10
    6b22:	30 e0       	ldi	r19, 0x00	; 0
    6b24:	22 d4       	rcall	.+2116   	; 0x736a <__ultoa_invert>
    6b26:	e8 2e       	mov	r14, r24
    6b28:	e8 89       	ldd	r30, Y+16	; 0x10
    6b2a:	ee 1a       	sub	r14, r30
    6b2c:	40 c0       	rjmp	.+128    	; 0x6bae <vfprintf+0x5d0>
    6b2e:	95 37       	cpi	r25, 0x75	; 117
    6b30:	21 f4       	brne	.+8      	; 0x6b3a <vfprintf+0x55c>
    6b32:	1f 7e       	andi	r17, 0xEF	; 239
    6b34:	2a e0       	ldi	r18, 0x0A	; 10
    6b36:	30 e0       	ldi	r19, 0x00	; 0
    6b38:	1c c0       	rjmp	.+56     	; 0x6b72 <vfprintf+0x594>
    6b3a:	19 7f       	andi	r17, 0xF9	; 249
    6b3c:	9f 36       	cpi	r25, 0x6F	; 111
    6b3e:	61 f0       	breq	.+24     	; 0x6b58 <vfprintf+0x57a>
    6b40:	90 37       	cpi	r25, 0x70	; 112
    6b42:	20 f4       	brcc	.+8      	; 0x6b4c <vfprintf+0x56e>
    6b44:	98 35       	cpi	r25, 0x58	; 88
    6b46:	09 f0       	breq	.+2      	; 0x6b4a <vfprintf+0x56c>
    6b48:	ab c0       	rjmp	.+342    	; 0x6ca0 <vfprintf+0x6c2>
    6b4a:	0f c0       	rjmp	.+30     	; 0x6b6a <vfprintf+0x58c>
    6b4c:	90 37       	cpi	r25, 0x70	; 112
    6b4e:	39 f0       	breq	.+14     	; 0x6b5e <vfprintf+0x580>
    6b50:	98 37       	cpi	r25, 0x78	; 120
    6b52:	09 f0       	breq	.+2      	; 0x6b56 <vfprintf+0x578>
    6b54:	a5 c0       	rjmp	.+330    	; 0x6ca0 <vfprintf+0x6c2>
    6b56:	04 c0       	rjmp	.+8      	; 0x6b60 <vfprintf+0x582>
    6b58:	28 e0       	ldi	r18, 0x08	; 8
    6b5a:	30 e0       	ldi	r19, 0x00	; 0
    6b5c:	0a c0       	rjmp	.+20     	; 0x6b72 <vfprintf+0x594>
    6b5e:	10 61       	ori	r17, 0x10	; 16
    6b60:	14 fd       	sbrc	r17, 4
    6b62:	14 60       	ori	r17, 0x04	; 4
    6b64:	20 e1       	ldi	r18, 0x10	; 16
    6b66:	30 e0       	ldi	r19, 0x00	; 0
    6b68:	04 c0       	rjmp	.+8      	; 0x6b72 <vfprintf+0x594>
    6b6a:	14 fd       	sbrc	r17, 4
    6b6c:	16 60       	ori	r17, 0x06	; 6
    6b6e:	20 e1       	ldi	r18, 0x10	; 16
    6b70:	32 e0       	ldi	r19, 0x02	; 2
    6b72:	17 ff       	sbrs	r17, 7
    6b74:	08 c0       	rjmp	.+16     	; 0x6b86 <vfprintf+0x5a8>
    6b76:	f6 01       	movw	r30, r12
    6b78:	60 81       	ld	r22, Z
    6b7a:	71 81       	ldd	r23, Z+1	; 0x01
    6b7c:	82 81       	ldd	r24, Z+2	; 0x02
    6b7e:	93 81       	ldd	r25, Z+3	; 0x03
    6b80:	44 e0       	ldi	r20, 0x04	; 4
    6b82:	50 e0       	ldi	r21, 0x00	; 0
    6b84:	08 c0       	rjmp	.+16     	; 0x6b96 <vfprintf+0x5b8>
    6b86:	f6 01       	movw	r30, r12
    6b88:	80 81       	ld	r24, Z
    6b8a:	91 81       	ldd	r25, Z+1	; 0x01
    6b8c:	bc 01       	movw	r22, r24
    6b8e:	80 e0       	ldi	r24, 0x00	; 0
    6b90:	90 e0       	ldi	r25, 0x00	; 0
    6b92:	42 e0       	ldi	r20, 0x02	; 2
    6b94:	50 e0       	ldi	r21, 0x00	; 0
    6b96:	c4 0e       	add	r12, r20
    6b98:	d5 1e       	adc	r13, r21
    6b9a:	ae 01       	movw	r20, r28
    6b9c:	4f 5f       	subi	r20, 0xFF	; 255
    6b9e:	5f 4f       	sbci	r21, 0xFF	; 255
    6ba0:	e4 d3       	rcall	.+1992   	; 0x736a <__ultoa_invert>
    6ba2:	e8 2e       	mov	r14, r24
    6ba4:	58 89       	ldd	r21, Y+16	; 0x10
    6ba6:	e5 1a       	sub	r14, r21
    6ba8:	8f e7       	ldi	r24, 0x7F	; 127
    6baa:	f8 2e       	mov	r15, r24
    6bac:	f1 22       	and	r15, r17
    6bae:	f6 fe       	sbrs	r15, 6
    6bb0:	0b c0       	rjmp	.+22     	; 0x6bc8 <vfprintf+0x5ea>
    6bb2:	8e ef       	ldi	r24, 0xFE	; 254
    6bb4:	f8 22       	and	r15, r24
    6bb6:	e9 14       	cp	r14, r9
    6bb8:	38 f4       	brcc	.+14     	; 0x6bc8 <vfprintf+0x5ea>
    6bba:	f4 fe       	sbrs	r15, 4
    6bbc:	07 c0       	rjmp	.+14     	; 0x6bcc <vfprintf+0x5ee>
    6bbe:	f2 fc       	sbrc	r15, 2
    6bc0:	05 c0       	rjmp	.+10     	; 0x6bcc <vfprintf+0x5ee>
    6bc2:	9f ee       	ldi	r25, 0xEF	; 239
    6bc4:	f9 22       	and	r15, r25
    6bc6:	02 c0       	rjmp	.+4      	; 0x6bcc <vfprintf+0x5ee>
    6bc8:	1e 2d       	mov	r17, r14
    6bca:	01 c0       	rjmp	.+2      	; 0x6bce <vfprintf+0x5f0>
    6bcc:	19 2d       	mov	r17, r9
    6bce:	f4 fe       	sbrs	r15, 4
    6bd0:	0d c0       	rjmp	.+26     	; 0x6bec <vfprintf+0x60e>
    6bd2:	fe 01       	movw	r30, r28
    6bd4:	ee 0d       	add	r30, r14
    6bd6:	f1 1d       	adc	r31, r1
    6bd8:	80 81       	ld	r24, Z
    6bda:	80 33       	cpi	r24, 0x30	; 48
    6bdc:	19 f4       	brne	.+6      	; 0x6be4 <vfprintf+0x606>
    6bde:	e9 ee       	ldi	r30, 0xE9	; 233
    6be0:	fe 22       	and	r15, r30
    6be2:	08 c0       	rjmp	.+16     	; 0x6bf4 <vfprintf+0x616>
    6be4:	1f 5f       	subi	r17, 0xFF	; 255
    6be6:	f2 fe       	sbrs	r15, 2
    6be8:	05 c0       	rjmp	.+10     	; 0x6bf4 <vfprintf+0x616>
    6bea:	03 c0       	rjmp	.+6      	; 0x6bf2 <vfprintf+0x614>
    6bec:	8f 2d       	mov	r24, r15
    6bee:	86 78       	andi	r24, 0x86	; 134
    6bf0:	09 f0       	breq	.+2      	; 0x6bf4 <vfprintf+0x616>
    6bf2:	1f 5f       	subi	r17, 0xFF	; 255
    6bf4:	0f 2d       	mov	r16, r15
    6bf6:	f3 fc       	sbrc	r15, 3
    6bf8:	13 c0       	rjmp	.+38     	; 0x6c20 <vfprintf+0x642>
    6bfa:	f0 fe       	sbrs	r15, 0
    6bfc:	0e c0       	rjmp	.+28     	; 0x6c1a <vfprintf+0x63c>
    6bfe:	18 15       	cp	r17, r8
    6c00:	10 f0       	brcs	.+4      	; 0x6c06 <vfprintf+0x628>
    6c02:	9e 2c       	mov	r9, r14
    6c04:	0a c0       	rjmp	.+20     	; 0x6c1a <vfprintf+0x63c>
    6c06:	9e 2c       	mov	r9, r14
    6c08:	98 0c       	add	r9, r8
    6c0a:	91 1a       	sub	r9, r17
    6c0c:	18 2d       	mov	r17, r8
    6c0e:	05 c0       	rjmp	.+10     	; 0x6c1a <vfprintf+0x63c>
    6c10:	80 e2       	ldi	r24, 0x20	; 32
    6c12:	90 e0       	ldi	r25, 0x00	; 0
    6c14:	b3 01       	movw	r22, r6
    6c16:	36 d3       	rcall	.+1644   	; 0x7284 <fputc>
    6c18:	1f 5f       	subi	r17, 0xFF	; 255
    6c1a:	18 15       	cp	r17, r8
    6c1c:	c8 f3       	brcs	.-14     	; 0x6c10 <vfprintf+0x632>
    6c1e:	04 c0       	rjmp	.+8      	; 0x6c28 <vfprintf+0x64a>
    6c20:	18 15       	cp	r17, r8
    6c22:	10 f4       	brcc	.+4      	; 0x6c28 <vfprintf+0x64a>
    6c24:	81 1a       	sub	r8, r17
    6c26:	01 c0       	rjmp	.+2      	; 0x6c2a <vfprintf+0x64c>
    6c28:	88 24       	eor	r8, r8
    6c2a:	04 ff       	sbrs	r16, 4
    6c2c:	0e c0       	rjmp	.+28     	; 0x6c4a <vfprintf+0x66c>
    6c2e:	80 e3       	ldi	r24, 0x30	; 48
    6c30:	90 e0       	ldi	r25, 0x00	; 0
    6c32:	b3 01       	movw	r22, r6
    6c34:	27 d3       	rcall	.+1614   	; 0x7284 <fputc>
    6c36:	02 ff       	sbrs	r16, 2
    6c38:	1b c0       	rjmp	.+54     	; 0x6c70 <vfprintf+0x692>
    6c3a:	01 fd       	sbrc	r16, 1
    6c3c:	03 c0       	rjmp	.+6      	; 0x6c44 <vfprintf+0x666>
    6c3e:	88 e7       	ldi	r24, 0x78	; 120
    6c40:	90 e0       	ldi	r25, 0x00	; 0
    6c42:	0e c0       	rjmp	.+28     	; 0x6c60 <vfprintf+0x682>
    6c44:	88 e5       	ldi	r24, 0x58	; 88
    6c46:	90 e0       	ldi	r25, 0x00	; 0
    6c48:	0b c0       	rjmp	.+22     	; 0x6c60 <vfprintf+0x682>
    6c4a:	80 2f       	mov	r24, r16
    6c4c:	86 78       	andi	r24, 0x86	; 134
    6c4e:	81 f0       	breq	.+32     	; 0x6c70 <vfprintf+0x692>
    6c50:	01 ff       	sbrs	r16, 1
    6c52:	02 c0       	rjmp	.+4      	; 0x6c58 <vfprintf+0x67a>
    6c54:	8b e2       	ldi	r24, 0x2B	; 43
    6c56:	01 c0       	rjmp	.+2      	; 0x6c5a <vfprintf+0x67c>
    6c58:	80 e2       	ldi	r24, 0x20	; 32
    6c5a:	f7 fc       	sbrc	r15, 7
    6c5c:	8d e2       	ldi	r24, 0x2D	; 45
    6c5e:	90 e0       	ldi	r25, 0x00	; 0
    6c60:	b3 01       	movw	r22, r6
    6c62:	10 d3       	rcall	.+1568   	; 0x7284 <fputc>
    6c64:	05 c0       	rjmp	.+10     	; 0x6c70 <vfprintf+0x692>
    6c66:	80 e3       	ldi	r24, 0x30	; 48
    6c68:	90 e0       	ldi	r25, 0x00	; 0
    6c6a:	b3 01       	movw	r22, r6
    6c6c:	0b d3       	rcall	.+1558   	; 0x7284 <fputc>
    6c6e:	9a 94       	dec	r9
    6c70:	e9 14       	cp	r14, r9
    6c72:	c8 f3       	brcs	.-14     	; 0x6c66 <vfprintf+0x688>
    6c74:	ea 94       	dec	r14
    6c76:	e1 e0       	ldi	r30, 0x01	; 1
    6c78:	f0 e0       	ldi	r31, 0x00	; 0
    6c7a:	ec 0f       	add	r30, r28
    6c7c:	fd 1f       	adc	r31, r29
    6c7e:	ee 0d       	add	r30, r14
    6c80:	f1 1d       	adc	r31, r1
    6c82:	80 81       	ld	r24, Z
    6c84:	90 e0       	ldi	r25, 0x00	; 0
    6c86:	b3 01       	movw	r22, r6
    6c88:	fd d2       	rcall	.+1530   	; 0x7284 <fputc>
    6c8a:	ee 20       	and	r14, r14
    6c8c:	99 f7       	brne	.-26     	; 0x6c74 <vfprintf+0x696>
    6c8e:	05 c0       	rjmp	.+10     	; 0x6c9a <vfprintf+0x6bc>
    6c90:	80 e2       	ldi	r24, 0x20	; 32
    6c92:	90 e0       	ldi	r25, 0x00	; 0
    6c94:	b3 01       	movw	r22, r6
    6c96:	f6 d2       	rcall	.+1516   	; 0x7284 <fputc>
    6c98:	8a 94       	dec	r8
    6c9a:	88 20       	and	r8, r8
    6c9c:	c9 f7       	brne	.-14     	; 0x6c90 <vfprintf+0x6b2>
    6c9e:	b6 cc       	rjmp	.-1684   	; 0x660c <vfprintf+0x2e>
    6ca0:	f3 01       	movw	r30, r6
    6ca2:	66 81       	ldd	r22, Z+6	; 0x06
    6ca4:	77 81       	ldd	r23, Z+7	; 0x07
    6ca6:	cb 01       	movw	r24, r22
    6ca8:	61 96       	adiw	r28, 0x11	; 17
    6caa:	e2 e1       	ldi	r30, 0x12	; 18
    6cac:	70 c0       	rjmp	.+224    	; 0x6d8e <__epilogue_restores__>

00006cae <__mulsi3>:
    6cae:	62 9f       	mul	r22, r18
    6cb0:	d0 01       	movw	r26, r0
    6cb2:	73 9f       	mul	r23, r19
    6cb4:	f0 01       	movw	r30, r0
    6cb6:	82 9f       	mul	r24, r18
    6cb8:	e0 0d       	add	r30, r0
    6cba:	f1 1d       	adc	r31, r1
    6cbc:	64 9f       	mul	r22, r20
    6cbe:	e0 0d       	add	r30, r0
    6cc0:	f1 1d       	adc	r31, r1
    6cc2:	92 9f       	mul	r25, r18
    6cc4:	f0 0d       	add	r31, r0
    6cc6:	83 9f       	mul	r24, r19
    6cc8:	f0 0d       	add	r31, r0
    6cca:	74 9f       	mul	r23, r20
    6ccc:	f0 0d       	add	r31, r0
    6cce:	65 9f       	mul	r22, r21
    6cd0:	f0 0d       	add	r31, r0
    6cd2:	99 27       	eor	r25, r25
    6cd4:	72 9f       	mul	r23, r18
    6cd6:	b0 0d       	add	r27, r0
    6cd8:	e1 1d       	adc	r30, r1
    6cda:	f9 1f       	adc	r31, r25
    6cdc:	63 9f       	mul	r22, r19
    6cde:	b0 0d       	add	r27, r0
    6ce0:	e1 1d       	adc	r30, r1
    6ce2:	f9 1f       	adc	r31, r25
    6ce4:	bd 01       	movw	r22, r26
    6ce6:	cf 01       	movw	r24, r30
    6ce8:	11 24       	eor	r1, r1
    6cea:	08 95       	ret

00006cec <__divmodhi4>:
    6cec:	97 fb       	bst	r25, 7
    6cee:	09 2e       	mov	r0, r25
    6cf0:	07 26       	eor	r0, r23
    6cf2:	0a d0       	rcall	.+20     	; 0x6d08 <__divmodhi4_neg1>
    6cf4:	77 fd       	sbrc	r23, 7
    6cf6:	04 d0       	rcall	.+8      	; 0x6d00 <__divmodhi4_neg2>
    6cf8:	65 d0       	rcall	.+202    	; 0x6dc4 <__udivmodhi4>
    6cfa:	06 d0       	rcall	.+12     	; 0x6d08 <__divmodhi4_neg1>
    6cfc:	00 20       	and	r0, r0
    6cfe:	1a f4       	brpl	.+6      	; 0x6d06 <__divmodhi4_exit>

00006d00 <__divmodhi4_neg2>:
    6d00:	70 95       	com	r23
    6d02:	61 95       	neg	r22
    6d04:	7f 4f       	sbci	r23, 0xFF	; 255

00006d06 <__divmodhi4_exit>:
    6d06:	08 95       	ret

00006d08 <__divmodhi4_neg1>:
    6d08:	f6 f7       	brtc	.-4      	; 0x6d06 <__divmodhi4_exit>
    6d0a:	90 95       	com	r25
    6d0c:	81 95       	neg	r24
    6d0e:	9f 4f       	sbci	r25, 0xFF	; 255
    6d10:	08 95       	ret

00006d12 <__udivmodsi4>:
    6d12:	a1 e2       	ldi	r26, 0x21	; 33
    6d14:	1a 2e       	mov	r1, r26
    6d16:	aa 1b       	sub	r26, r26
    6d18:	bb 1b       	sub	r27, r27
    6d1a:	fd 01       	movw	r30, r26
    6d1c:	0d c0       	rjmp	.+26     	; 0x6d38 <__udivmodsi4_ep>

00006d1e <__udivmodsi4_loop>:
    6d1e:	aa 1f       	adc	r26, r26
    6d20:	bb 1f       	adc	r27, r27
    6d22:	ee 1f       	adc	r30, r30
    6d24:	ff 1f       	adc	r31, r31
    6d26:	a2 17       	cp	r26, r18
    6d28:	b3 07       	cpc	r27, r19
    6d2a:	e4 07       	cpc	r30, r20
    6d2c:	f5 07       	cpc	r31, r21
    6d2e:	20 f0       	brcs	.+8      	; 0x6d38 <__udivmodsi4_ep>
    6d30:	a2 1b       	sub	r26, r18
    6d32:	b3 0b       	sbc	r27, r19
    6d34:	e4 0b       	sbc	r30, r20
    6d36:	f5 0b       	sbc	r31, r21

00006d38 <__udivmodsi4_ep>:
    6d38:	66 1f       	adc	r22, r22
    6d3a:	77 1f       	adc	r23, r23
    6d3c:	88 1f       	adc	r24, r24
    6d3e:	99 1f       	adc	r25, r25
    6d40:	1a 94       	dec	r1
    6d42:	69 f7       	brne	.-38     	; 0x6d1e <__udivmodsi4_loop>
    6d44:	60 95       	com	r22
    6d46:	70 95       	com	r23
    6d48:	80 95       	com	r24
    6d4a:	90 95       	com	r25
    6d4c:	9b 01       	movw	r18, r22
    6d4e:	ac 01       	movw	r20, r24
    6d50:	bd 01       	movw	r22, r26
    6d52:	cf 01       	movw	r24, r30
    6d54:	08 95       	ret

00006d56 <__prologue_saves__>:
    6d56:	2f 92       	push	r2
    6d58:	3f 92       	push	r3
    6d5a:	4f 92       	push	r4
    6d5c:	5f 92       	push	r5
    6d5e:	6f 92       	push	r6
    6d60:	7f 92       	push	r7
    6d62:	8f 92       	push	r8
    6d64:	9f 92       	push	r9
    6d66:	af 92       	push	r10
    6d68:	bf 92       	push	r11
    6d6a:	cf 92       	push	r12
    6d6c:	df 92       	push	r13
    6d6e:	ef 92       	push	r14
    6d70:	ff 92       	push	r15
    6d72:	0f 93       	push	r16
    6d74:	1f 93       	push	r17
    6d76:	cf 93       	push	r28
    6d78:	df 93       	push	r29
    6d7a:	cd b7       	in	r28, 0x3d	; 61
    6d7c:	de b7       	in	r29, 0x3e	; 62
    6d7e:	ca 1b       	sub	r28, r26
    6d80:	db 0b       	sbc	r29, r27
    6d82:	0f b6       	in	r0, 0x3f	; 63
    6d84:	f8 94       	cli
    6d86:	de bf       	out	0x3e, r29	; 62
    6d88:	0f be       	out	0x3f, r0	; 63
    6d8a:	cd bf       	out	0x3d, r28	; 61
    6d8c:	09 94       	ijmp

00006d8e <__epilogue_restores__>:
    6d8e:	2a 88       	ldd	r2, Y+18	; 0x12
    6d90:	39 88       	ldd	r3, Y+17	; 0x11
    6d92:	48 88       	ldd	r4, Y+16	; 0x10
    6d94:	5f 84       	ldd	r5, Y+15	; 0x0f
    6d96:	6e 84       	ldd	r6, Y+14	; 0x0e
    6d98:	7d 84       	ldd	r7, Y+13	; 0x0d
    6d9a:	8c 84       	ldd	r8, Y+12	; 0x0c
    6d9c:	9b 84       	ldd	r9, Y+11	; 0x0b
    6d9e:	aa 84       	ldd	r10, Y+10	; 0x0a
    6da0:	b9 84       	ldd	r11, Y+9	; 0x09
    6da2:	c8 84       	ldd	r12, Y+8	; 0x08
    6da4:	df 80       	ldd	r13, Y+7	; 0x07
    6da6:	ee 80       	ldd	r14, Y+6	; 0x06
    6da8:	fd 80       	ldd	r15, Y+5	; 0x05
    6daa:	0c 81       	ldd	r16, Y+4	; 0x04
    6dac:	1b 81       	ldd	r17, Y+3	; 0x03
    6dae:	aa 81       	ldd	r26, Y+2	; 0x02
    6db0:	b9 81       	ldd	r27, Y+1	; 0x01
    6db2:	ce 0f       	add	r28, r30
    6db4:	d1 1d       	adc	r29, r1
    6db6:	0f b6       	in	r0, 0x3f	; 63
    6db8:	f8 94       	cli
    6dba:	de bf       	out	0x3e, r29	; 62
    6dbc:	0f be       	out	0x3f, r0	; 63
    6dbe:	cd bf       	out	0x3d, r28	; 61
    6dc0:	ed 01       	movw	r28, r26
    6dc2:	08 95       	ret

00006dc4 <__udivmodhi4>:
    6dc4:	aa 1b       	sub	r26, r26
    6dc6:	bb 1b       	sub	r27, r27
    6dc8:	51 e1       	ldi	r21, 0x11	; 17
    6dca:	07 c0       	rjmp	.+14     	; 0x6dda <__udivmodhi4_ep>

00006dcc <__udivmodhi4_loop>:
    6dcc:	aa 1f       	adc	r26, r26
    6dce:	bb 1f       	adc	r27, r27
    6dd0:	a6 17       	cp	r26, r22
    6dd2:	b7 07       	cpc	r27, r23
    6dd4:	10 f0       	brcs	.+4      	; 0x6dda <__udivmodhi4_ep>
    6dd6:	a6 1b       	sub	r26, r22
    6dd8:	b7 0b       	sbc	r27, r23

00006dda <__udivmodhi4_ep>:
    6dda:	88 1f       	adc	r24, r24
    6ddc:	99 1f       	adc	r25, r25
    6dde:	5a 95       	dec	r21
    6de0:	a9 f7       	brne	.-22     	; 0x6dcc <__udivmodhi4_loop>
    6de2:	80 95       	com	r24
    6de4:	90 95       	com	r25
    6de6:	bc 01       	movw	r22, r24
    6de8:	cd 01       	movw	r24, r26
    6dea:	08 95       	ret

00006dec <malloc>:
    6dec:	cf 93       	push	r28
    6dee:	df 93       	push	r29
    6df0:	bc 01       	movw	r22, r24
    6df2:	82 30       	cpi	r24, 0x02	; 2
    6df4:	91 05       	cpc	r25, r1
    6df6:	10 f4       	brcc	.+4      	; 0x6dfc <malloc+0x10>
    6df8:	62 e0       	ldi	r22, 0x02	; 2
    6dfa:	70 e0       	ldi	r23, 0x00	; 0
    6dfc:	a0 91 82 07 	lds	r26, 0x0782
    6e00:	b0 91 83 07 	lds	r27, 0x0783
    6e04:	ed 01       	movw	r28, r26
    6e06:	e0 e0       	ldi	r30, 0x00	; 0
    6e08:	f0 e0       	ldi	r31, 0x00	; 0
    6e0a:	40 e0       	ldi	r20, 0x00	; 0
    6e0c:	50 e0       	ldi	r21, 0x00	; 0
    6e0e:	21 c0       	rjmp	.+66     	; 0x6e52 <malloc+0x66>
    6e10:	88 81       	ld	r24, Y
    6e12:	99 81       	ldd	r25, Y+1	; 0x01
    6e14:	86 17       	cp	r24, r22
    6e16:	97 07       	cpc	r25, r23
    6e18:	69 f4       	brne	.+26     	; 0x6e34 <malloc+0x48>
    6e1a:	8a 81       	ldd	r24, Y+2	; 0x02
    6e1c:	9b 81       	ldd	r25, Y+3	; 0x03
    6e1e:	30 97       	sbiw	r30, 0x00	; 0
    6e20:	19 f0       	breq	.+6      	; 0x6e28 <malloc+0x3c>
    6e22:	93 83       	std	Z+3, r25	; 0x03
    6e24:	82 83       	std	Z+2, r24	; 0x02
    6e26:	04 c0       	rjmp	.+8      	; 0x6e30 <malloc+0x44>
    6e28:	90 93 83 07 	sts	0x0783, r25
    6e2c:	80 93 82 07 	sts	0x0782, r24
    6e30:	fe 01       	movw	r30, r28
    6e32:	34 c0       	rjmp	.+104    	; 0x6e9c <malloc+0xb0>
    6e34:	68 17       	cp	r22, r24
    6e36:	79 07       	cpc	r23, r25
    6e38:	38 f4       	brcc	.+14     	; 0x6e48 <malloc+0x5c>
    6e3a:	41 15       	cp	r20, r1
    6e3c:	51 05       	cpc	r21, r1
    6e3e:	19 f0       	breq	.+6      	; 0x6e46 <malloc+0x5a>
    6e40:	84 17       	cp	r24, r20
    6e42:	95 07       	cpc	r25, r21
    6e44:	08 f4       	brcc	.+2      	; 0x6e48 <malloc+0x5c>
    6e46:	ac 01       	movw	r20, r24
    6e48:	fe 01       	movw	r30, r28
    6e4a:	8a 81       	ldd	r24, Y+2	; 0x02
    6e4c:	9b 81       	ldd	r25, Y+3	; 0x03
    6e4e:	9c 01       	movw	r18, r24
    6e50:	e9 01       	movw	r28, r18
    6e52:	20 97       	sbiw	r28, 0x00	; 0
    6e54:	e9 f6       	brne	.-70     	; 0x6e10 <malloc+0x24>
    6e56:	41 15       	cp	r20, r1
    6e58:	51 05       	cpc	r21, r1
    6e5a:	a9 f1       	breq	.+106    	; 0x6ec6 <malloc+0xda>
    6e5c:	ca 01       	movw	r24, r20
    6e5e:	86 1b       	sub	r24, r22
    6e60:	97 0b       	sbc	r25, r23
    6e62:	04 97       	sbiw	r24, 0x04	; 4
    6e64:	08 f4       	brcc	.+2      	; 0x6e68 <malloc+0x7c>
    6e66:	ba 01       	movw	r22, r20
    6e68:	e0 e0       	ldi	r30, 0x00	; 0
    6e6a:	f0 e0       	ldi	r31, 0x00	; 0
    6e6c:	2a c0       	rjmp	.+84     	; 0x6ec2 <malloc+0xd6>
    6e6e:	8d 91       	ld	r24, X+
    6e70:	9c 91       	ld	r25, X
    6e72:	11 97       	sbiw	r26, 0x01	; 1
    6e74:	84 17       	cp	r24, r20
    6e76:	95 07       	cpc	r25, r21
    6e78:	f9 f4       	brne	.+62     	; 0x6eb8 <malloc+0xcc>
    6e7a:	64 17       	cp	r22, r20
    6e7c:	75 07       	cpc	r23, r21
    6e7e:	81 f4       	brne	.+32     	; 0x6ea0 <malloc+0xb4>
    6e80:	12 96       	adiw	r26, 0x02	; 2
    6e82:	8d 91       	ld	r24, X+
    6e84:	9c 91       	ld	r25, X
    6e86:	13 97       	sbiw	r26, 0x03	; 3
    6e88:	30 97       	sbiw	r30, 0x00	; 0
    6e8a:	19 f0       	breq	.+6      	; 0x6e92 <malloc+0xa6>
    6e8c:	93 83       	std	Z+3, r25	; 0x03
    6e8e:	82 83       	std	Z+2, r24	; 0x02
    6e90:	04 c0       	rjmp	.+8      	; 0x6e9a <malloc+0xae>
    6e92:	90 93 83 07 	sts	0x0783, r25
    6e96:	80 93 82 07 	sts	0x0782, r24
    6e9a:	fd 01       	movw	r30, r26
    6e9c:	32 96       	adiw	r30, 0x02	; 2
    6e9e:	4f c0       	rjmp	.+158    	; 0x6f3e <malloc+0x152>
    6ea0:	ca 01       	movw	r24, r20
    6ea2:	86 1b       	sub	r24, r22
    6ea4:	97 0b       	sbc	r25, r23
    6ea6:	fd 01       	movw	r30, r26
    6ea8:	e8 0f       	add	r30, r24
    6eaa:	f9 1f       	adc	r31, r25
    6eac:	61 93       	st	Z+, r22
    6eae:	71 93       	st	Z+, r23
    6eb0:	02 97       	sbiw	r24, 0x02	; 2
    6eb2:	8d 93       	st	X+, r24
    6eb4:	9c 93       	st	X, r25
    6eb6:	43 c0       	rjmp	.+134    	; 0x6f3e <malloc+0x152>
    6eb8:	fd 01       	movw	r30, r26
    6eba:	82 81       	ldd	r24, Z+2	; 0x02
    6ebc:	93 81       	ldd	r25, Z+3	; 0x03
    6ebe:	9c 01       	movw	r18, r24
    6ec0:	d9 01       	movw	r26, r18
    6ec2:	10 97       	sbiw	r26, 0x00	; 0
    6ec4:	a1 f6       	brne	.-88     	; 0x6e6e <malloc+0x82>
    6ec6:	80 91 80 07 	lds	r24, 0x0780
    6eca:	90 91 81 07 	lds	r25, 0x0781
    6ece:	89 2b       	or	r24, r25
    6ed0:	41 f4       	brne	.+16     	; 0x6ee2 <malloc+0xf6>
    6ed2:	80 91 c2 03 	lds	r24, 0x03C2
    6ed6:	90 91 c3 03 	lds	r25, 0x03C3
    6eda:	90 93 81 07 	sts	0x0781, r25
    6ede:	80 93 80 07 	sts	0x0780, r24
    6ee2:	40 91 c4 03 	lds	r20, 0x03C4
    6ee6:	50 91 c5 03 	lds	r21, 0x03C5
    6eea:	41 15       	cp	r20, r1
    6eec:	51 05       	cpc	r21, r1
    6eee:	41 f4       	brne	.+16     	; 0x6f00 <malloc+0x114>
    6ef0:	4d b7       	in	r20, 0x3d	; 61
    6ef2:	5e b7       	in	r21, 0x3e	; 62
    6ef4:	80 91 c0 03 	lds	r24, 0x03C0
    6ef8:	90 91 c1 03 	lds	r25, 0x03C1
    6efc:	48 1b       	sub	r20, r24
    6efe:	59 0b       	sbc	r21, r25
    6f00:	20 91 80 07 	lds	r18, 0x0780
    6f04:	30 91 81 07 	lds	r19, 0x0781
    6f08:	24 17       	cp	r18, r20
    6f0a:	35 07       	cpc	r19, r21
    6f0c:	b0 f4       	brcc	.+44     	; 0x6f3a <malloc+0x14e>
    6f0e:	ca 01       	movw	r24, r20
    6f10:	82 1b       	sub	r24, r18
    6f12:	93 0b       	sbc	r25, r19
    6f14:	86 17       	cp	r24, r22
    6f16:	97 07       	cpc	r25, r23
    6f18:	80 f0       	brcs	.+32     	; 0x6f3a <malloc+0x14e>
    6f1a:	ab 01       	movw	r20, r22
    6f1c:	4e 5f       	subi	r20, 0xFE	; 254
    6f1e:	5f 4f       	sbci	r21, 0xFF	; 255
    6f20:	84 17       	cp	r24, r20
    6f22:	95 07       	cpc	r25, r21
    6f24:	50 f0       	brcs	.+20     	; 0x6f3a <malloc+0x14e>
    6f26:	42 0f       	add	r20, r18
    6f28:	53 1f       	adc	r21, r19
    6f2a:	50 93 81 07 	sts	0x0781, r21
    6f2e:	40 93 80 07 	sts	0x0780, r20
    6f32:	f9 01       	movw	r30, r18
    6f34:	61 93       	st	Z+, r22
    6f36:	71 93       	st	Z+, r23
    6f38:	02 c0       	rjmp	.+4      	; 0x6f3e <malloc+0x152>
    6f3a:	e0 e0       	ldi	r30, 0x00	; 0
    6f3c:	f0 e0       	ldi	r31, 0x00	; 0
    6f3e:	cf 01       	movw	r24, r30
    6f40:	df 91       	pop	r29
    6f42:	cf 91       	pop	r28
    6f44:	08 95       	ret

00006f46 <free>:
    6f46:	cf 93       	push	r28
    6f48:	df 93       	push	r29
    6f4a:	00 97       	sbiw	r24, 0x00	; 0
    6f4c:	09 f4       	brne	.+2      	; 0x6f50 <free+0xa>
    6f4e:	50 c0       	rjmp	.+160    	; 0x6ff0 <free+0xaa>
    6f50:	ec 01       	movw	r28, r24
    6f52:	22 97       	sbiw	r28, 0x02	; 2
    6f54:	1b 82       	std	Y+3, r1	; 0x03
    6f56:	1a 82       	std	Y+2, r1	; 0x02
    6f58:	a0 91 82 07 	lds	r26, 0x0782
    6f5c:	b0 91 83 07 	lds	r27, 0x0783
    6f60:	10 97       	sbiw	r26, 0x00	; 0
    6f62:	09 f1       	breq	.+66     	; 0x6fa6 <free+0x60>
    6f64:	40 e0       	ldi	r20, 0x00	; 0
    6f66:	50 e0       	ldi	r21, 0x00	; 0
    6f68:	ac 17       	cp	r26, r28
    6f6a:	bd 07       	cpc	r27, r29
    6f6c:	08 f1       	brcs	.+66     	; 0x6fb0 <free+0x6a>
    6f6e:	bb 83       	std	Y+3, r27	; 0x03
    6f70:	aa 83       	std	Y+2, r26	; 0x02
    6f72:	fe 01       	movw	r30, r28
    6f74:	21 91       	ld	r18, Z+
    6f76:	31 91       	ld	r19, Z+
    6f78:	e2 0f       	add	r30, r18
    6f7a:	f3 1f       	adc	r31, r19
    6f7c:	ae 17       	cp	r26, r30
    6f7e:	bf 07       	cpc	r27, r31
    6f80:	79 f4       	brne	.+30     	; 0x6fa0 <free+0x5a>
    6f82:	8d 91       	ld	r24, X+
    6f84:	9c 91       	ld	r25, X
    6f86:	11 97       	sbiw	r26, 0x01	; 1
    6f88:	28 0f       	add	r18, r24
    6f8a:	39 1f       	adc	r19, r25
    6f8c:	2e 5f       	subi	r18, 0xFE	; 254
    6f8e:	3f 4f       	sbci	r19, 0xFF	; 255
    6f90:	39 83       	std	Y+1, r19	; 0x01
    6f92:	28 83       	st	Y, r18
    6f94:	12 96       	adiw	r26, 0x02	; 2
    6f96:	8d 91       	ld	r24, X+
    6f98:	9c 91       	ld	r25, X
    6f9a:	13 97       	sbiw	r26, 0x03	; 3
    6f9c:	9b 83       	std	Y+3, r25	; 0x03
    6f9e:	8a 83       	std	Y+2, r24	; 0x02
    6fa0:	41 15       	cp	r20, r1
    6fa2:	51 05       	cpc	r21, r1
    6fa4:	71 f4       	brne	.+28     	; 0x6fc2 <free+0x7c>
    6fa6:	d0 93 83 07 	sts	0x0783, r29
    6faa:	c0 93 82 07 	sts	0x0782, r28
    6fae:	20 c0       	rjmp	.+64     	; 0x6ff0 <free+0xaa>
    6fb0:	12 96       	adiw	r26, 0x02	; 2
    6fb2:	8d 91       	ld	r24, X+
    6fb4:	9c 91       	ld	r25, X
    6fb6:	13 97       	sbiw	r26, 0x03	; 3
    6fb8:	ad 01       	movw	r20, r26
    6fba:	00 97       	sbiw	r24, 0x00	; 0
    6fbc:	11 f0       	breq	.+4      	; 0x6fc2 <free+0x7c>
    6fbe:	dc 01       	movw	r26, r24
    6fc0:	d3 cf       	rjmp	.-90     	; 0x6f68 <free+0x22>
    6fc2:	fa 01       	movw	r30, r20
    6fc4:	d3 83       	std	Z+3, r29	; 0x03
    6fc6:	c2 83       	std	Z+2, r28	; 0x02
    6fc8:	21 91       	ld	r18, Z+
    6fca:	31 91       	ld	r19, Z+
    6fcc:	e2 0f       	add	r30, r18
    6fce:	f3 1f       	adc	r31, r19
    6fd0:	ce 17       	cp	r28, r30
    6fd2:	df 07       	cpc	r29, r31
    6fd4:	69 f4       	brne	.+26     	; 0x6ff0 <free+0xaa>
    6fd6:	88 81       	ld	r24, Y
    6fd8:	99 81       	ldd	r25, Y+1	; 0x01
    6fda:	28 0f       	add	r18, r24
    6fdc:	39 1f       	adc	r19, r25
    6fde:	2e 5f       	subi	r18, 0xFE	; 254
    6fe0:	3f 4f       	sbci	r19, 0xFF	; 255
    6fe2:	fa 01       	movw	r30, r20
    6fe4:	31 83       	std	Z+1, r19	; 0x01
    6fe6:	20 83       	st	Z, r18
    6fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    6fea:	9b 81       	ldd	r25, Y+3	; 0x03
    6fec:	93 83       	std	Z+3, r25	; 0x03
    6fee:	82 83       	std	Z+2, r24	; 0x02
    6ff0:	df 91       	pop	r29
    6ff2:	cf 91       	pop	r28
    6ff4:	08 95       	ret

00006ff6 <do_rand>:
    6ff6:	a0 e0       	ldi	r26, 0x00	; 0
    6ff8:	b0 e0       	ldi	r27, 0x00	; 0
    6ffa:	e0 e0       	ldi	r30, 0x00	; 0
    6ffc:	f8 e3       	ldi	r31, 0x38	; 56
    6ffe:	b3 ce       	rjmp	.-666    	; 0x6d66 <__prologue_saves__+0x10>
    7000:	ec 01       	movw	r28, r24
    7002:	a8 80       	ld	r10, Y
    7004:	b9 80       	ldd	r11, Y+1	; 0x01
    7006:	ca 80       	ldd	r12, Y+2	; 0x02
    7008:	db 80       	ldd	r13, Y+3	; 0x03
    700a:	a1 14       	cp	r10, r1
    700c:	b1 04       	cpc	r11, r1
    700e:	c1 04       	cpc	r12, r1
    7010:	d1 04       	cpc	r13, r1
    7012:	41 f4       	brne	.+16     	; 0x7024 <do_rand+0x2e>
    7014:	84 e2       	ldi	r24, 0x24	; 36
    7016:	a8 2e       	mov	r10, r24
    7018:	89 ed       	ldi	r24, 0xD9	; 217
    701a:	b8 2e       	mov	r11, r24
    701c:	8b e5       	ldi	r24, 0x5B	; 91
    701e:	c8 2e       	mov	r12, r24
    7020:	87 e0       	ldi	r24, 0x07	; 7
    7022:	d8 2e       	mov	r13, r24
    7024:	c6 01       	movw	r24, r12
    7026:	b5 01       	movw	r22, r10
    7028:	2d e1       	ldi	r18, 0x1D	; 29
    702a:	33 ef       	ldi	r19, 0xF3	; 243
    702c:	41 e0       	ldi	r20, 0x01	; 1
    702e:	50 e0       	ldi	r21, 0x00	; 0
    7030:	fa d1       	rcall	.+1012   	; 0x7426 <__divmodsi4>
    7032:	27 ea       	ldi	r18, 0xA7	; 167
    7034:	31 e4       	ldi	r19, 0x41	; 65
    7036:	40 e0       	ldi	r20, 0x00	; 0
    7038:	50 e0       	ldi	r21, 0x00	; 0
    703a:	39 de       	rcall	.-910    	; 0x6cae <__mulsi3>
    703c:	7b 01       	movw	r14, r22
    703e:	8c 01       	movw	r16, r24
    7040:	c6 01       	movw	r24, r12
    7042:	b5 01       	movw	r22, r10
    7044:	2d e1       	ldi	r18, 0x1D	; 29
    7046:	33 ef       	ldi	r19, 0xF3	; 243
    7048:	41 e0       	ldi	r20, 0x01	; 1
    704a:	50 e0       	ldi	r21, 0x00	; 0
    704c:	ec d1       	rcall	.+984    	; 0x7426 <__divmodsi4>
    704e:	ca 01       	movw	r24, r20
    7050:	b9 01       	movw	r22, r18
    7052:	2c ee       	ldi	r18, 0xEC	; 236
    7054:	34 ef       	ldi	r19, 0xF4	; 244
    7056:	4f ef       	ldi	r20, 0xFF	; 255
    7058:	5f ef       	ldi	r21, 0xFF	; 255
    705a:	29 de       	rcall	.-942    	; 0x6cae <__mulsi3>
    705c:	6e 0d       	add	r22, r14
    705e:	7f 1d       	adc	r23, r15
    7060:	80 1f       	adc	r24, r16
    7062:	91 1f       	adc	r25, r17
    7064:	97 ff       	sbrs	r25, 7
    7066:	04 c0       	rjmp	.+8      	; 0x7070 <do_rand+0x7a>
    7068:	61 50       	subi	r22, 0x01	; 1
    706a:	70 40       	sbci	r23, 0x00	; 0
    706c:	80 40       	sbci	r24, 0x00	; 0
    706e:	90 48       	sbci	r25, 0x80	; 128
    7070:	68 83       	st	Y, r22
    7072:	79 83       	std	Y+1, r23	; 0x01
    7074:	8a 83       	std	Y+2, r24	; 0x02
    7076:	9b 83       	std	Y+3, r25	; 0x03
    7078:	9b 01       	movw	r18, r22
    707a:	3f 77       	andi	r19, 0x7F	; 127
    707c:	c9 01       	movw	r24, r18
    707e:	cd b7       	in	r28, 0x3d	; 61
    7080:	de b7       	in	r29, 0x3e	; 62
    7082:	ea e0       	ldi	r30, 0x0A	; 10
    7084:	8c ce       	rjmp	.-744    	; 0x6d9e <__epilogue_restores__+0x10>

00007086 <rand_r>:
    7086:	b7 df       	rcall	.-146    	; 0x6ff6 <do_rand>
    7088:	08 95       	ret

0000708a <rand>:
    708a:	86 ec       	ldi	r24, 0xC6	; 198
    708c:	93 e0       	ldi	r25, 0x03	; 3
    708e:	b3 df       	rcall	.-154    	; 0x6ff6 <do_rand>
    7090:	08 95       	ret

00007092 <srand>:
    7092:	a0 e0       	ldi	r26, 0x00	; 0
    7094:	b0 e0       	ldi	r27, 0x00	; 0
    7096:	80 93 c6 03 	sts	0x03C6, r24
    709a:	90 93 c7 03 	sts	0x03C7, r25
    709e:	a0 93 c8 03 	sts	0x03C8, r26
    70a2:	b0 93 c9 03 	sts	0x03C9, r27
    70a6:	08 95       	ret

000070a8 <__ftoa_engine>:
    70a8:	28 30       	cpi	r18, 0x08	; 8
    70aa:	08 f0       	brcs	.+2      	; 0x70ae <__ftoa_engine+0x6>
    70ac:	27 e0       	ldi	r18, 0x07	; 7
    70ae:	33 27       	eor	r19, r19
    70b0:	da 01       	movw	r26, r20
    70b2:	99 0f       	add	r25, r25
    70b4:	31 1d       	adc	r19, r1
    70b6:	87 fd       	sbrc	r24, 7
    70b8:	91 60       	ori	r25, 0x01	; 1
    70ba:	00 96       	adiw	r24, 0x00	; 0
    70bc:	61 05       	cpc	r22, r1
    70be:	71 05       	cpc	r23, r1
    70c0:	39 f4       	brne	.+14     	; 0x70d0 <__ftoa_engine+0x28>
    70c2:	32 60       	ori	r19, 0x02	; 2
    70c4:	2e 5f       	subi	r18, 0xFE	; 254
    70c6:	3d 93       	st	X+, r19
    70c8:	30 e3       	ldi	r19, 0x30	; 48
    70ca:	2a 95       	dec	r18
    70cc:	e1 f7       	brne	.-8      	; 0x70c6 <__ftoa_engine+0x1e>
    70ce:	08 95       	ret
    70d0:	9f 3f       	cpi	r25, 0xFF	; 255
    70d2:	30 f0       	brcs	.+12     	; 0x70e0 <__ftoa_engine+0x38>
    70d4:	80 38       	cpi	r24, 0x80	; 128
    70d6:	71 05       	cpc	r23, r1
    70d8:	61 05       	cpc	r22, r1
    70da:	09 f0       	breq	.+2      	; 0x70de <__ftoa_engine+0x36>
    70dc:	3c 5f       	subi	r19, 0xFC	; 252
    70de:	3c 5f       	subi	r19, 0xFC	; 252
    70e0:	3d 93       	st	X+, r19
    70e2:	91 30       	cpi	r25, 0x01	; 1
    70e4:	08 f0       	brcs	.+2      	; 0x70e8 <__ftoa_engine+0x40>
    70e6:	80 68       	ori	r24, 0x80	; 128
    70e8:	91 1d       	adc	r25, r1
    70ea:	df 93       	push	r29
    70ec:	cf 93       	push	r28
    70ee:	1f 93       	push	r17
    70f0:	0f 93       	push	r16
    70f2:	ff 92       	push	r15
    70f4:	ef 92       	push	r14
    70f6:	19 2f       	mov	r17, r25
    70f8:	98 7f       	andi	r25, 0xF8	; 248
    70fa:	96 95       	lsr	r25
    70fc:	e9 2f       	mov	r30, r25
    70fe:	96 95       	lsr	r25
    7100:	96 95       	lsr	r25
    7102:	e9 0f       	add	r30, r25
    7104:	ff 27       	eor	r31, r31
    7106:	ef 53       	subi	r30, 0x3F	; 63
    7108:	fa 4f       	sbci	r31, 0xFA	; 250
    710a:	99 27       	eor	r25, r25
    710c:	33 27       	eor	r19, r19
    710e:	ee 24       	eor	r14, r14
    7110:	ff 24       	eor	r15, r15
    7112:	a7 01       	movw	r20, r14
    7114:	e7 01       	movw	r28, r14
    7116:	05 90       	lpm	r0, Z+
    7118:	08 94       	sec
    711a:	07 94       	ror	r0
    711c:	28 f4       	brcc	.+10     	; 0x7128 <__ftoa_engine+0x80>
    711e:	36 0f       	add	r19, r22
    7120:	e7 1e       	adc	r14, r23
    7122:	f8 1e       	adc	r15, r24
    7124:	49 1f       	adc	r20, r25
    7126:	51 1d       	adc	r21, r1
    7128:	66 0f       	add	r22, r22
    712a:	77 1f       	adc	r23, r23
    712c:	88 1f       	adc	r24, r24
    712e:	99 1f       	adc	r25, r25
    7130:	06 94       	lsr	r0
    7132:	a1 f7       	brne	.-24     	; 0x711c <__ftoa_engine+0x74>
    7134:	05 90       	lpm	r0, Z+
    7136:	07 94       	ror	r0
    7138:	28 f4       	brcc	.+10     	; 0x7144 <__ftoa_engine+0x9c>
    713a:	e7 0e       	add	r14, r23
    713c:	f8 1e       	adc	r15, r24
    713e:	49 1f       	adc	r20, r25
    7140:	56 1f       	adc	r21, r22
    7142:	c1 1d       	adc	r28, r1
    7144:	77 0f       	add	r23, r23
    7146:	88 1f       	adc	r24, r24
    7148:	99 1f       	adc	r25, r25
    714a:	66 1f       	adc	r22, r22
    714c:	06 94       	lsr	r0
    714e:	a1 f7       	brne	.-24     	; 0x7138 <__ftoa_engine+0x90>
    7150:	05 90       	lpm	r0, Z+
    7152:	07 94       	ror	r0
    7154:	28 f4       	brcc	.+10     	; 0x7160 <__ftoa_engine+0xb8>
    7156:	f8 0e       	add	r15, r24
    7158:	49 1f       	adc	r20, r25
    715a:	56 1f       	adc	r21, r22
    715c:	c7 1f       	adc	r28, r23
    715e:	d1 1d       	adc	r29, r1
    7160:	88 0f       	add	r24, r24
    7162:	99 1f       	adc	r25, r25
    7164:	66 1f       	adc	r22, r22
    7166:	77 1f       	adc	r23, r23
    7168:	06 94       	lsr	r0
    716a:	a1 f7       	brne	.-24     	; 0x7154 <__ftoa_engine+0xac>
    716c:	05 90       	lpm	r0, Z+
    716e:	07 94       	ror	r0
    7170:	20 f4       	brcc	.+8      	; 0x717a <__ftoa_engine+0xd2>
    7172:	49 0f       	add	r20, r25
    7174:	56 1f       	adc	r21, r22
    7176:	c7 1f       	adc	r28, r23
    7178:	d8 1f       	adc	r29, r24
    717a:	99 0f       	add	r25, r25
    717c:	66 1f       	adc	r22, r22
    717e:	77 1f       	adc	r23, r23
    7180:	88 1f       	adc	r24, r24
    7182:	06 94       	lsr	r0
    7184:	a9 f7       	brne	.-22     	; 0x7170 <__ftoa_engine+0xc8>
    7186:	84 91       	lpm	r24, Z+
    7188:	10 95       	com	r17
    718a:	17 70       	andi	r17, 0x07	; 7
    718c:	41 f0       	breq	.+16     	; 0x719e <__ftoa_engine+0xf6>
    718e:	d6 95       	lsr	r29
    7190:	c7 95       	ror	r28
    7192:	57 95       	ror	r21
    7194:	47 95       	ror	r20
    7196:	f7 94       	ror	r15
    7198:	e7 94       	ror	r14
    719a:	1a 95       	dec	r17
    719c:	c1 f7       	brne	.-16     	; 0x718e <__ftoa_engine+0xe6>
    719e:	e7 e6       	ldi	r30, 0x67	; 103
    71a0:	f5 e0       	ldi	r31, 0x05	; 5
    71a2:	68 94       	set
    71a4:	15 90       	lpm	r1, Z+
    71a6:	15 91       	lpm	r17, Z+
    71a8:	35 91       	lpm	r19, Z+
    71aa:	65 91       	lpm	r22, Z+
    71ac:	95 91       	lpm	r25, Z+
    71ae:	05 90       	lpm	r0, Z+
    71b0:	7f e2       	ldi	r23, 0x2F	; 47
    71b2:	73 95       	inc	r23
    71b4:	e1 18       	sub	r14, r1
    71b6:	f1 0a       	sbc	r15, r17
    71b8:	43 0b       	sbc	r20, r19
    71ba:	56 0b       	sbc	r21, r22
    71bc:	c9 0b       	sbc	r28, r25
    71be:	d0 09       	sbc	r29, r0
    71c0:	c0 f7       	brcc	.-16     	; 0x71b2 <__ftoa_engine+0x10a>
    71c2:	e1 0c       	add	r14, r1
    71c4:	f1 1e       	adc	r15, r17
    71c6:	43 1f       	adc	r20, r19
    71c8:	56 1f       	adc	r21, r22
    71ca:	c9 1f       	adc	r28, r25
    71cc:	d0 1d       	adc	r29, r0
    71ce:	7e f4       	brtc	.+30     	; 0x71ee <__ftoa_engine+0x146>
    71d0:	70 33       	cpi	r23, 0x30	; 48
    71d2:	11 f4       	brne	.+4      	; 0x71d8 <__ftoa_engine+0x130>
    71d4:	8a 95       	dec	r24
    71d6:	e6 cf       	rjmp	.-52     	; 0x71a4 <__ftoa_engine+0xfc>
    71d8:	e8 94       	clt
    71da:	01 50       	subi	r16, 0x01	; 1
    71dc:	30 f0       	brcs	.+12     	; 0x71ea <__ftoa_engine+0x142>
    71de:	08 0f       	add	r16, r24
    71e0:	0a f4       	brpl	.+2      	; 0x71e4 <__ftoa_engine+0x13c>
    71e2:	00 27       	eor	r16, r16
    71e4:	02 17       	cp	r16, r18
    71e6:	08 f4       	brcc	.+2      	; 0x71ea <__ftoa_engine+0x142>
    71e8:	20 2f       	mov	r18, r16
    71ea:	23 95       	inc	r18
    71ec:	02 2f       	mov	r16, r18
    71ee:	7a 33       	cpi	r23, 0x3A	; 58
    71f0:	28 f0       	brcs	.+10     	; 0x71fc <__ftoa_engine+0x154>
    71f2:	79 e3       	ldi	r23, 0x39	; 57
    71f4:	7d 93       	st	X+, r23
    71f6:	2a 95       	dec	r18
    71f8:	e9 f7       	brne	.-6      	; 0x71f4 <__ftoa_engine+0x14c>
    71fa:	10 c0       	rjmp	.+32     	; 0x721c <__ftoa_engine+0x174>
    71fc:	7d 93       	st	X+, r23
    71fe:	2a 95       	dec	r18
    7200:	89 f6       	brne	.-94     	; 0x71a4 <__ftoa_engine+0xfc>
    7202:	06 94       	lsr	r0
    7204:	97 95       	ror	r25
    7206:	67 95       	ror	r22
    7208:	37 95       	ror	r19
    720a:	17 95       	ror	r17
    720c:	17 94       	ror	r1
    720e:	e1 18       	sub	r14, r1
    7210:	f1 0a       	sbc	r15, r17
    7212:	43 0b       	sbc	r20, r19
    7214:	56 0b       	sbc	r21, r22
    7216:	c9 0b       	sbc	r28, r25
    7218:	d0 09       	sbc	r29, r0
    721a:	98 f0       	brcs	.+38     	; 0x7242 <__ftoa_engine+0x19a>
    721c:	23 95       	inc	r18
    721e:	7e 91       	ld	r23, -X
    7220:	73 95       	inc	r23
    7222:	7a 33       	cpi	r23, 0x3A	; 58
    7224:	08 f0       	brcs	.+2      	; 0x7228 <__ftoa_engine+0x180>
    7226:	70 e3       	ldi	r23, 0x30	; 48
    7228:	7c 93       	st	X, r23
    722a:	20 13       	cpse	r18, r16
    722c:	b8 f7       	brcc	.-18     	; 0x721c <__ftoa_engine+0x174>
    722e:	7e 91       	ld	r23, -X
    7230:	70 61       	ori	r23, 0x10	; 16
    7232:	7d 93       	st	X+, r23
    7234:	30 f0       	brcs	.+12     	; 0x7242 <__ftoa_engine+0x19a>
    7236:	83 95       	inc	r24
    7238:	71 e3       	ldi	r23, 0x31	; 49
    723a:	7d 93       	st	X+, r23
    723c:	70 e3       	ldi	r23, 0x30	; 48
    723e:	2a 95       	dec	r18
    7240:	e1 f7       	brne	.-8      	; 0x723a <__ftoa_engine+0x192>
    7242:	11 24       	eor	r1, r1
    7244:	ef 90       	pop	r14
    7246:	ff 90       	pop	r15
    7248:	0f 91       	pop	r16
    724a:	1f 91       	pop	r17
    724c:	cf 91       	pop	r28
    724e:	df 91       	pop	r29
    7250:	99 27       	eor	r25, r25
    7252:	87 fd       	sbrc	r24, 7
    7254:	90 95       	com	r25
    7256:	08 95       	ret

00007258 <strnlen_P>:
    7258:	fc 01       	movw	r30, r24
    725a:	05 90       	lpm	r0, Z+
    725c:	61 50       	subi	r22, 0x01	; 1
    725e:	70 40       	sbci	r23, 0x00	; 0
    7260:	01 10       	cpse	r0, r1
    7262:	d8 f7       	brcc	.-10     	; 0x725a <strnlen_P+0x2>
    7264:	80 95       	com	r24
    7266:	90 95       	com	r25
    7268:	8e 0f       	add	r24, r30
    726a:	9f 1f       	adc	r25, r31
    726c:	08 95       	ret

0000726e <strnlen>:
    726e:	fc 01       	movw	r30, r24
    7270:	61 50       	subi	r22, 0x01	; 1
    7272:	70 40       	sbci	r23, 0x00	; 0
    7274:	01 90       	ld	r0, Z+
    7276:	01 10       	cpse	r0, r1
    7278:	d8 f7       	brcc	.-10     	; 0x7270 <strnlen+0x2>
    727a:	80 95       	com	r24
    727c:	90 95       	com	r25
    727e:	8e 0f       	add	r24, r30
    7280:	9f 1f       	adc	r25, r31
    7282:	08 95       	ret

00007284 <fputc>:
    7284:	0f 93       	push	r16
    7286:	1f 93       	push	r17
    7288:	cf 93       	push	r28
    728a:	df 93       	push	r29
    728c:	8c 01       	movw	r16, r24
    728e:	eb 01       	movw	r28, r22
    7290:	8b 81       	ldd	r24, Y+3	; 0x03
    7292:	81 ff       	sbrs	r24, 1
    7294:	1b c0       	rjmp	.+54     	; 0x72cc <fputc+0x48>
    7296:	82 ff       	sbrs	r24, 2
    7298:	0d c0       	rjmp	.+26     	; 0x72b4 <fputc+0x30>
    729a:	2e 81       	ldd	r18, Y+6	; 0x06
    729c:	3f 81       	ldd	r19, Y+7	; 0x07
    729e:	8c 81       	ldd	r24, Y+4	; 0x04
    72a0:	9d 81       	ldd	r25, Y+5	; 0x05
    72a2:	28 17       	cp	r18, r24
    72a4:	39 07       	cpc	r19, r25
    72a6:	64 f4       	brge	.+24     	; 0x72c0 <fputc+0x3c>
    72a8:	e8 81       	ld	r30, Y
    72aa:	f9 81       	ldd	r31, Y+1	; 0x01
    72ac:	01 93       	st	Z+, r16
    72ae:	f9 83       	std	Y+1, r31	; 0x01
    72b0:	e8 83       	st	Y, r30
    72b2:	06 c0       	rjmp	.+12     	; 0x72c0 <fputc+0x3c>
    72b4:	e8 85       	ldd	r30, Y+8	; 0x08
    72b6:	f9 85       	ldd	r31, Y+9	; 0x09
    72b8:	80 2f       	mov	r24, r16
    72ba:	09 95       	icall
    72bc:	89 2b       	or	r24, r25
    72be:	31 f4       	brne	.+12     	; 0x72cc <fputc+0x48>
    72c0:	8e 81       	ldd	r24, Y+6	; 0x06
    72c2:	9f 81       	ldd	r25, Y+7	; 0x07
    72c4:	01 96       	adiw	r24, 0x01	; 1
    72c6:	9f 83       	std	Y+7, r25	; 0x07
    72c8:	8e 83       	std	Y+6, r24	; 0x06
    72ca:	02 c0       	rjmp	.+4      	; 0x72d0 <fputc+0x4c>
    72cc:	0f ef       	ldi	r16, 0xFF	; 255
    72ce:	1f ef       	ldi	r17, 0xFF	; 255
    72d0:	c8 01       	movw	r24, r16
    72d2:	df 91       	pop	r29
    72d4:	cf 91       	pop	r28
    72d6:	1f 91       	pop	r17
    72d8:	0f 91       	pop	r16
    72da:	08 95       	ret

000072dc <printf>:
    72dc:	a0 e0       	ldi	r26, 0x00	; 0
    72de:	b0 e0       	ldi	r27, 0x00	; 0
    72e0:	e3 e7       	ldi	r30, 0x73	; 115
    72e2:	f9 e3       	ldi	r31, 0x39	; 57
    72e4:	48 cd       	rjmp	.-1392   	; 0x6d76 <__prologue_saves__+0x20>
    72e6:	fe 01       	movw	r30, r28
    72e8:	35 96       	adiw	r30, 0x05	; 5
    72ea:	61 91       	ld	r22, Z+
    72ec:	71 91       	ld	r23, Z+
    72ee:	80 91 86 07 	lds	r24, 0x0786
    72f2:	90 91 87 07 	lds	r25, 0x0787
    72f6:	af 01       	movw	r20, r30
    72f8:	72 d9       	rcall	.-3356   	; 0x65de <vfprintf>
    72fa:	20 96       	adiw	r28, 0x00	; 0
    72fc:	e2 e0       	ldi	r30, 0x02	; 2
    72fe:	57 cd       	rjmp	.-1362   	; 0x6dae <__epilogue_restores__+0x20>

00007300 <puts>:
    7300:	0f 93       	push	r16
    7302:	1f 93       	push	r17
    7304:	cf 93       	push	r28
    7306:	df 93       	push	r29
    7308:	8c 01       	movw	r16, r24
    730a:	e0 91 86 07 	lds	r30, 0x0786
    730e:	f0 91 87 07 	lds	r31, 0x0787
    7312:	83 81       	ldd	r24, Z+3	; 0x03
    7314:	81 ff       	sbrs	r24, 1
    7316:	21 c0       	rjmp	.+66     	; 0x735a <puts+0x5a>
    7318:	c0 e0       	ldi	r28, 0x00	; 0
    731a:	d0 e0       	ldi	r29, 0x00	; 0
    731c:	0d c0       	rjmp	.+26     	; 0x7338 <puts+0x38>
    731e:	e0 91 86 07 	lds	r30, 0x0786
    7322:	f0 91 87 07 	lds	r31, 0x0787
    7326:	20 85       	ldd	r18, Z+8	; 0x08
    7328:	31 85       	ldd	r19, Z+9	; 0x09
    732a:	bf 01       	movw	r22, r30
    732c:	f9 01       	movw	r30, r18
    732e:	09 95       	icall
    7330:	89 2b       	or	r24, r25
    7332:	11 f0       	breq	.+4      	; 0x7338 <puts+0x38>
    7334:	cf ef       	ldi	r28, 0xFF	; 255
    7336:	df ef       	ldi	r29, 0xFF	; 255
    7338:	f8 01       	movw	r30, r16
    733a:	81 91       	ld	r24, Z+
    733c:	8f 01       	movw	r16, r30
    733e:	88 23       	and	r24, r24
    7340:	71 f7       	brne	.-36     	; 0x731e <puts+0x1e>
    7342:	e0 91 86 07 	lds	r30, 0x0786
    7346:	f0 91 87 07 	lds	r31, 0x0787
    734a:	20 85       	ldd	r18, Z+8	; 0x08
    734c:	31 85       	ldd	r19, Z+9	; 0x09
    734e:	8a e0       	ldi	r24, 0x0A	; 10
    7350:	bf 01       	movw	r22, r30
    7352:	f9 01       	movw	r30, r18
    7354:	09 95       	icall
    7356:	89 2b       	or	r24, r25
    7358:	11 f0       	breq	.+4      	; 0x735e <puts+0x5e>
    735a:	cf ef       	ldi	r28, 0xFF	; 255
    735c:	df ef       	ldi	r29, 0xFF	; 255
    735e:	ce 01       	movw	r24, r28
    7360:	df 91       	pop	r29
    7362:	cf 91       	pop	r28
    7364:	1f 91       	pop	r17
    7366:	0f 91       	pop	r16
    7368:	08 95       	ret

0000736a <__ultoa_invert>:
    736a:	fa 01       	movw	r30, r20
    736c:	aa 27       	eor	r26, r26
    736e:	28 30       	cpi	r18, 0x08	; 8
    7370:	51 f1       	breq	.+84     	; 0x73c6 <__ultoa_invert+0x5c>
    7372:	20 31       	cpi	r18, 0x10	; 16
    7374:	81 f1       	breq	.+96     	; 0x73d6 <__ultoa_invert+0x6c>
    7376:	e8 94       	clt
    7378:	6f 93       	push	r22
    737a:	6e 7f       	andi	r22, 0xFE	; 254
    737c:	6e 5f       	subi	r22, 0xFE	; 254
    737e:	7f 4f       	sbci	r23, 0xFF	; 255
    7380:	8f 4f       	sbci	r24, 0xFF	; 255
    7382:	9f 4f       	sbci	r25, 0xFF	; 255
    7384:	af 4f       	sbci	r26, 0xFF	; 255
    7386:	b1 e0       	ldi	r27, 0x01	; 1
    7388:	3e d0       	rcall	.+124    	; 0x7406 <__ultoa_invert+0x9c>
    738a:	b4 e0       	ldi	r27, 0x04	; 4
    738c:	3c d0       	rcall	.+120    	; 0x7406 <__ultoa_invert+0x9c>
    738e:	67 0f       	add	r22, r23
    7390:	78 1f       	adc	r23, r24
    7392:	89 1f       	adc	r24, r25
    7394:	9a 1f       	adc	r25, r26
    7396:	a1 1d       	adc	r26, r1
    7398:	68 0f       	add	r22, r24
    739a:	79 1f       	adc	r23, r25
    739c:	8a 1f       	adc	r24, r26
    739e:	91 1d       	adc	r25, r1
    73a0:	a1 1d       	adc	r26, r1
    73a2:	6a 0f       	add	r22, r26
    73a4:	71 1d       	adc	r23, r1
    73a6:	81 1d       	adc	r24, r1
    73a8:	91 1d       	adc	r25, r1
    73aa:	a1 1d       	adc	r26, r1
    73ac:	20 d0       	rcall	.+64     	; 0x73ee <__ultoa_invert+0x84>
    73ae:	09 f4       	brne	.+2      	; 0x73b2 <__ultoa_invert+0x48>
    73b0:	68 94       	set
    73b2:	3f 91       	pop	r19
    73b4:	2a e0       	ldi	r18, 0x0A	; 10
    73b6:	26 9f       	mul	r18, r22
    73b8:	11 24       	eor	r1, r1
    73ba:	30 19       	sub	r19, r0
    73bc:	30 5d       	subi	r19, 0xD0	; 208
    73be:	31 93       	st	Z+, r19
    73c0:	de f6       	brtc	.-74     	; 0x7378 <__ultoa_invert+0xe>
    73c2:	cf 01       	movw	r24, r30
    73c4:	08 95       	ret
    73c6:	46 2f       	mov	r20, r22
    73c8:	47 70       	andi	r20, 0x07	; 7
    73ca:	40 5d       	subi	r20, 0xD0	; 208
    73cc:	41 93       	st	Z+, r20
    73ce:	b3 e0       	ldi	r27, 0x03	; 3
    73d0:	0f d0       	rcall	.+30     	; 0x73f0 <__ultoa_invert+0x86>
    73d2:	c9 f7       	brne	.-14     	; 0x73c6 <__ultoa_invert+0x5c>
    73d4:	f6 cf       	rjmp	.-20     	; 0x73c2 <__ultoa_invert+0x58>
    73d6:	46 2f       	mov	r20, r22
    73d8:	4f 70       	andi	r20, 0x0F	; 15
    73da:	40 5d       	subi	r20, 0xD0	; 208
    73dc:	4a 33       	cpi	r20, 0x3A	; 58
    73de:	18 f0       	brcs	.+6      	; 0x73e6 <__ultoa_invert+0x7c>
    73e0:	49 5d       	subi	r20, 0xD9	; 217
    73e2:	31 fd       	sbrc	r19, 1
    73e4:	40 52       	subi	r20, 0x20	; 32
    73e6:	41 93       	st	Z+, r20
    73e8:	02 d0       	rcall	.+4      	; 0x73ee <__ultoa_invert+0x84>
    73ea:	a9 f7       	brne	.-22     	; 0x73d6 <__ultoa_invert+0x6c>
    73ec:	ea cf       	rjmp	.-44     	; 0x73c2 <__ultoa_invert+0x58>
    73ee:	b4 e0       	ldi	r27, 0x04	; 4
    73f0:	a6 95       	lsr	r26
    73f2:	97 95       	ror	r25
    73f4:	87 95       	ror	r24
    73f6:	77 95       	ror	r23
    73f8:	67 95       	ror	r22
    73fa:	ba 95       	dec	r27
    73fc:	c9 f7       	brne	.-14     	; 0x73f0 <__ultoa_invert+0x86>
    73fe:	00 97       	sbiw	r24, 0x00	; 0
    7400:	61 05       	cpc	r22, r1
    7402:	71 05       	cpc	r23, r1
    7404:	08 95       	ret
    7406:	9b 01       	movw	r18, r22
    7408:	ac 01       	movw	r20, r24
    740a:	0a 2e       	mov	r0, r26
    740c:	06 94       	lsr	r0
    740e:	57 95       	ror	r21
    7410:	47 95       	ror	r20
    7412:	37 95       	ror	r19
    7414:	27 95       	ror	r18
    7416:	ba 95       	dec	r27
    7418:	c9 f7       	brne	.-14     	; 0x740c <__ultoa_invert+0xa2>
    741a:	62 0f       	add	r22, r18
    741c:	73 1f       	adc	r23, r19
    741e:	84 1f       	adc	r24, r20
    7420:	95 1f       	adc	r25, r21
    7422:	a0 1d       	adc	r26, r0
    7424:	08 95       	ret

00007426 <__divmodsi4>:
    7426:	97 fb       	bst	r25, 7
    7428:	09 2e       	mov	r0, r25
    742a:	05 26       	eor	r0, r21
    742c:	0e d0       	rcall	.+28     	; 0x744a <__divmodsi4_neg1>
    742e:	57 fd       	sbrc	r21, 7
    7430:	04 d0       	rcall	.+8      	; 0x743a <__divmodsi4_neg2>
    7432:	6f dc       	rcall	.-1826   	; 0x6d12 <__udivmodsi4>
    7434:	0a d0       	rcall	.+20     	; 0x744a <__divmodsi4_neg1>
    7436:	00 1c       	adc	r0, r0
    7438:	38 f4       	brcc	.+14     	; 0x7448 <__divmodsi4_exit>

0000743a <__divmodsi4_neg2>:
    743a:	50 95       	com	r21
    743c:	40 95       	com	r20
    743e:	30 95       	com	r19
    7440:	21 95       	neg	r18
    7442:	3f 4f       	sbci	r19, 0xFF	; 255
    7444:	4f 4f       	sbci	r20, 0xFF	; 255
    7446:	5f 4f       	sbci	r21, 0xFF	; 255

00007448 <__divmodsi4_exit>:
    7448:	08 95       	ret

0000744a <__divmodsi4_neg1>:
    744a:	f6 f7       	brtc	.-4      	; 0x7448 <__divmodsi4_exit>
    744c:	90 95       	com	r25
    744e:	80 95       	com	r24
    7450:	70 95       	com	r23
    7452:	61 95       	neg	r22
    7454:	7f 4f       	sbci	r23, 0xFF	; 255
    7456:	8f 4f       	sbci	r24, 0xFF	; 255
    7458:	9f 4f       	sbci	r25, 0xFF	; 255
    745a:	08 95       	ret

0000745c <_exit>:
    745c:	f8 94       	cli

0000745e <__stop_program>:
    745e:	ff cf       	rjmp	.-2      	; 0x745e <__stop_program>
