
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002da  00800100  000070d8  0000716c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000070d8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003c5  008003da  008003da  00007446  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00007446  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000007cf  00000000  00000000  000074a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d2e  00000000  00000000  00007c75  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000487  00000000  00000000  000099a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000018e6  00000000  00000000  00009e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  0000b710  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d8e  00000000  00000000  0000ba30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000121d  00000000  00000000  0000c7be  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 17 25 	jmp	0x4a2e	; 0x4a2e <__vector_4>
      14:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__vector_5>
      18:	0c 94 69 25 	jmp	0x4ad2	; 0x4ad2 <__vector_6>
      1c:	0c 94 92 25 	jmp	0x4b24	; 0x4b24 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 f8 23 	jmp	0x47f0	; 0x47f0 <__vector_9>
      28:	0c 94 21 24 	jmp	0x4842	; 0x4842 <__vector_10>
      2c:	0c 94 4a 24 	jmp	0x4894	; 0x4894 <__vector_11>
      30:	0c 94 c5 24 	jmp	0x498a	; 0x498a <__vector_12>
      34:	0c 94 73 24 	jmp	0x48e6	; 0x48e6 <__vector_13>
      38:	0c 94 9c 24 	jmp	0x4938	; 0x4938 <__vector_14>
      3c:	0c 94 ee 24 	jmp	0x49dc	; 0x49dc <__vector_15>
      40:	0c 94 7d 23 	jmp	0x46fa	; 0x46fa <__vector_16>
      44:	0c 94 a6 23 	jmp	0x474c	; 0x474c <__vector_17>
      48:	0c 94 cf 23 	jmp	0x479e	; 0x479e <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	e2 20       	and	r14, r2
      7e:	e5 20       	and	r14, r5
      80:	e8 20       	and	r14, r8
      82:	eb 20       	and	r14, r11
      84:	f4 20       	and	r15, r4
      86:	ee 20       	and	r14, r14
      88:	f1 20       	and	r15, r1
      8a:	f7 20       	and	r15, r7
      8c:	fa 20       	and	r15, r10
      8e:	fd 20       	and	r15, r13
      90:	00 21       	and	r16, r0
      92:	03 21       	and	r16, r3
      94:	06 21       	and	r16, r6
      96:	09 21       	and	r16, r9
      98:	0c 21       	and	r16, r12
      9a:	0f 21       	and	r16, r15
      9c:	12 21       	and	r17, r2
      9e:	15 21       	and	r17, r5
      a0:	18 21       	and	r17, r8
      a2:	29 21       	and	r18, r9
      a4:	2c 21       	and	r18, r12
      a6:	2f 21       	and	r18, r15
      a8:	32 21       	and	r19, r2
      aa:	3b 21       	and	r19, r11
      ac:	35 21       	and	r19, r5
      ae:	38 21       	and	r19, r8
      b0:	3e 21       	and	r19, r14
      b2:	41 21       	and	r20, r1
      b4:	44 21       	and	r20, r4
      b6:	47 21       	and	r20, r7
      b8:	4a 21       	and	r20, r10
      ba:	4d 21       	and	r20, r13
      bc:	50 21       	and	r21, r0
      be:	53 21       	and	r21, r3
      c0:	56 21       	and	r21, r6
      c2:	59 21       	and	r21, r9
      c4:	5c 21       	and	r21, r12
      c6:	5f 21       	and	r21, r15
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e8 ed       	ldi	r30, 0xD8	; 216
     676:	f0 e7       	ldi	r31, 0x70	; 112
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	aa 3d       	cpi	r26, 0xDA	; 218
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	aa ed       	ldi	r26, 0xDA	; 218
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	af 39       	cpi	r26, 0x9F	; 159
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 4c 1b 	call	0x3698	; 0x3698 <main>
     698:	0c 94 6a 38 	jmp	0x70d4	; 0x70d4 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 bb 22 	call	0x4576	; 0x4576 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 8f 22 	call	0x451e	; 0x451e <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 27 23 	call	0x464e	; 0x464e <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 bb 22 	call	0x4576	; 0x4576 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 8f 22 	call	0x451e	; 0x451e <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 27 23 	call	0x464e	; 0x464e <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 bb 22 	call	0x4576	; 0x4576 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 8f 22 	call	0x451e	; 0x451e <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 27 23 	call	0x464e	; 0x464e <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 bb 22 	call	0x4576	; 0x4576 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 8f 22 	call	0x451e	; 0x451e <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 27 23 	call	0x464e	; 0x464e <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 bb 22 	call	0x4576	; 0x4576 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 8f 22 	call	0x451e	; 0x451e <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 27 23 	call	0x464e	; 0x464e <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 bb 22 	call	0x4576	; 0x4576 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 8f 22 	call	0x451e	; 0x451e <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 27 23 	call	0x464e	; 0x464e <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 bb 22 	call	0x4576	; 0x4576 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 8f 22 	call	0x451e	; 0x451e <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 27 23 	call	0x464e	; 0x464e <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 bb 22 	call	0x4576	; 0x4576 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 8f 22 	call	0x451e	; 0x451e <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 27 23 	call	0x464e	; 0x464e <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 bb 22 	call	0x4576	; 0x4576 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 8f 22 	call	0x451e	; 0x451e <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 27 23 	call	0x464e	; 0x464e <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 bb 22 	call	0x4576	; 0x4576 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 e1 22 	call	0x45c2	; 0x45c2 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 8f 22 	call	0x451e	; 0x451e <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 27 23 	call	0x464e	; 0x464e <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 41 1b 	call	0x3682	; 0x3682 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 0a 1b 	call	0x3614	; 0x3614 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 ed 1a 	call	0x35da	; 0x35da <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 41 1b 	call	0x3682	; 0x3682 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 0a 1b 	call	0x3614	; 0x3614 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 ed 1a 	call	0x35da	; 0x35da <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 41 1b 	call	0x3682	; 0x3682 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 0a 1b 	call	0x3614	; 0x3614 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 ed 1a 	call	0x35da	; 0x35da <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 41 1b 	call	0x3682	; 0x3682 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 0a 1b 	call	0x3614	; 0x3614 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 ed 1a 	call	0x35da	; 0x35da <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 41 1b 	call	0x3682	; 0x3682 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 0a 1b 	call	0x3614	; 0x3614 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 ed 1a 	call	0x35da	; 0x35da <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 41 1b 	call	0x3682	; 0x3682 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 0a 1b 	call	0x3614	; 0x3614 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 ed 1a 	call	0x35da	; 0x35da <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 66 04 	sts	0x0466, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 93 21 	call	0x4326	; 0x4326 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 93 21 	call	0x4326	; 0x4326 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 93 21 	call	0x4326	; 0x4326 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 66 04 	sts	0x0466, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 93 21 	call	0x4326	; 0x4326 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 93 21 	call	0x4326	; 0x4326 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 93 21 	call	0x4326	; 0x4326 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 d7 37 	call	0x6fae	; 0x6fae <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 4f 1c 	call	0x389e	; 0x389e <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 4f 1c 	call	0x389e	; 0x389e <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 d7 37 	call	0x6fae	; 0x6fae <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 4f 1c 	call	0x389e	; 0x389e <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 4f 1c 	call	0x389e	; 0x389e <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 d7 37 	call	0x6fae	; 0x6fae <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 64 1c 	call	0x38c8	; 0x38c8 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 4f 1c 	call	0x389e	; 0x389e <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 4f 1c 	call	0x389e	; 0x389e <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	8b ed       	ldi	r24, 0xDB	; 219
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	ad ef       	ldi	r26, 0xFD	; 253
     c56:	b6 e0       	ldi	r27, 0x06	; 6
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	e4 ef       	ldi	r30, 0xF4	; 244
     c5e:	f5 e0       	ldi	r31, 0x05	; 5
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	82 e6       	ldi	r24, 0x62	; 98
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 84 06 	lds	r10, 0x0684
     c9e:	b0 90 85 06 	lds	r11, 0x0685
     ca2:	c0 90 86 06 	lds	r12, 0x0686
     ca6:	d0 90 87 06 	lds	r13, 0x0687
			rtIR_old[i] = rtIR;
     caa:	e0 90 89 06 	lds	r14, 0x0689
     cae:	f0 90 8a 06 	lds	r15, 0x068A
     cb2:	00 91 8b 06 	lds	r16, 0x068B
     cb6:	10 91 8c 06 	lds	r17, 0x068C
			ftIR_old[i] = ftIR;
     cba:	20 90 e3 04 	lds	r2, 0x04E3
     cbe:	30 90 e4 04 	lds	r3, 0x04E4
     cc2:	40 90 e5 04 	lds	r4, 0x04E5
     cc6:	50 90 e6 04 	lds	r5, 0x04E6
			bkIR_old[i] = bkIR;
     cca:	20 91 ed 04 	lds	r18, 0x04ED
     cce:	30 91 ee 04 	lds	r19, 0x04EE
     cd2:	40 91 ef 04 	lds	r20, 0x04EF
     cd6:	50 91 f0 04 	lds	r21, 0x04F0
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e5 59       	subi	r30, 0x95	; 149
     ce2:	fb 4f       	sbci	r31, 0xFB	; 251
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e3 57       	subi	r30, 0x73	; 115
     cf0:	f9 4f       	sbci	r31, 0xF9	; 249
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	ec 57       	subi	r30, 0x7C	; 124
     cfe:	fa 4f       	sbci	r31, 0xFA	; 250
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	ee 50       	subi	r30, 0x0E	; 14
     d0c:	fb 4f       	sbci	r31, 0xFB	; 251
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	a3 56       	subi	r26, 0x63	; 99
     e02:	b4 40       	sbci	r27, 0x04	; 4
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 84 06 	lds	r24, 0x0684
     e0c:	90 91 85 06 	lds	r25, 0x0685
     e10:	a0 91 86 06 	lds	r26, 0x0686
     e14:	b0 91 87 06 	lds	r27, 0x0687
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 89 06 	lds	r24, 0x0689
     e28:	90 91 8a 06 	lds	r25, 0x068A
     e2c:	a0 91 8b 06 	lds	r26, 0x068B
     e30:	b0 91 8c 06 	lds	r27, 0x068C
     e34:	80 93 8d 06 	sts	0x068D, r24
     e38:	90 93 8e 06 	sts	0x068E, r25
     e3c:	a0 93 8f 06 	sts	0x068F, r26
     e40:	b0 93 90 06 	sts	0x0690, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 e3 04 	lds	r24, 0x04E3
     e48:	90 91 e4 04 	lds	r25, 0x04E4
     e4c:	a0 91 e5 04 	lds	r26, 0x04E5
     e50:	b0 91 e6 04 	lds	r27, 0x04E6
     e54:	80 93 84 05 	sts	0x0584, r24
     e58:	90 93 85 05 	sts	0x0585, r25
     e5c:	a0 93 86 05 	sts	0x0586, r26
     e60:	b0 93 87 05 	sts	0x0587, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 ed 04 	lds	r24, 0x04ED
     e68:	90 91 ee 04 	lds	r25, 0x04EE
     e6c:	a0 91 ef 04 	lds	r26, 0x04EF
     e70:	b0 91 f0 04 	lds	r27, 0x04F0
     e74:	80 93 f2 04 	sts	0x04F2, r24
     e78:	90 93 f3 04 	sts	0x04F3, r25
     e7c:	a0 93 f4 04 	sts	0x04F4, r26
     e80:	b0 93 f5 04 	sts	0x04F5, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
     e94:	60 93 84 06 	sts	0x0684, r22
     e98:	70 93 85 06 	sts	0x0685, r23
     e9c:	80 93 86 06 	sts	0x0686, r24
     ea0:	90 93 87 06 	sts	0x0687, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
     eb8:	60 93 89 06 	sts	0x0689, r22
     ebc:	70 93 8a 06 	sts	0x068A, r23
     ec0:	80 93 8b 06 	sts	0x068B, r24
     ec4:	90 93 8c 06 	sts	0x068C, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
     edc:	60 93 e3 04 	sts	0x04E3, r22
     ee0:	70 93 e4 04 	sts	0x04E4, r23
     ee4:	80 93 e5 04 	sts	0x04E5, r24
     ee8:	90 93 e6 04 	sts	0x04E6, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
     f00:	60 93 ed 04 	sts	0x04ED, r22
     f04:	70 93 ee 04 	sts	0x04EE, r23
     f08:	80 93 ef 04 	sts	0x04EF, r24
     f0c:	90 93 f0 04 	sts	0x04F0, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 e7 04 	sts	0x04E7, r24
     f66:	90 93 e8 04 	sts	0x04E8, r25
     f6a:	a0 93 e9 04 	sts	0x04E9, r26
     f6e:	b0 93 ea 04 	sts	0x04EA, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 e7 04 	lds	r18, 0x04E7
     f7a:	30 91 e8 04 	lds	r19, 0x04E8
     f7e:	40 91 e9 04 	lds	r20, 0x04E9
     f82:	50 91 ea 04 	lds	r21, 0x04EA
     f86:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 e7 04 	sts	0x04E7, r22
     f92:	70 93 e8 04 	sts	0x04E8, r23
     f96:	80 93 e9 04 	sts	0x04E9, r24
     f9a:	90 93 ea 04 	sts	0x04EA, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 80 05 	lds	r18, 0x0580
     fa6:	30 91 81 05 	lds	r19, 0x0581
     faa:	40 91 82 05 	lds	r20, 0x0582
     fae:	50 91 83 05 	lds	r21, 0x0583
     fb2:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__subsf3>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	a0 97       	sbiw	r28, 0x20	; 32
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	2b 01       	movw	r4, r22
    1060:	3c 01       	movw	r6, r24
    1062:	2d 83       	std	Y+5, r18	; 0x05
    1064:	3e 83       	std	Y+6, r19	; 0x06
    1066:	4f 83       	std	Y+7, r20	; 0x07
    1068:	58 87       	std	Y+8, r21	; 0x08
    106a:	e9 86       	std	Y+9, r14	; 0x09
    106c:	fa 86       	std	Y+10, r15	; 0x0a
    106e:	0b 87       	std	Y+11, r16	; 0x0b
    1070:	1c 87       	std	Y+12, r17	; 0x0c
    1072:	ad 86       	std	Y+13, r10	; 0x0d
    1074:	be 86       	std	Y+14, r11	; 0x0e
    1076:	cf 86       	std	Y+15, r12	; 0x0f
    1078:	d8 8a       	std	Y+16, r13	; 0x10
    107a:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    107c:	33 24       	eor	r3, r3
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__gesf2>
    108e:	18 16       	cp	r1, r24
    1090:	14 f4       	brge	.+4      	; 0x1096 <move_arc_stnb+0x6c>
    1092:	33 24       	eor	r3, r3
    1094:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1096:	6d 81       	ldd	r22, Y+5	; 0x05
    1098:	7e 81       	ldd	r23, Y+6	; 0x06
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	2c ed       	ldi	r18, 0xDC	; 220
    10a0:	38 eb       	ldi	r19, 0xB8	; 184
    10a2:	48 e0       	ldi	r20, 0x08	; 8
    10a4:	5e e3       	ldi	r21, 0x3E	; 62
    10a6:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    10aa:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <__fixsfsi>
    10ae:	9b 01       	movw	r18, r22
    10b0:	77 ff       	sbrs	r23, 7
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <move_arc_stnb+0x90>
    10b4:	30 95       	com	r19
    10b6:	21 95       	neg	r18
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	b9 01       	movw	r22, r18
    10bc:	88 27       	eor	r24, r24
    10be:	77 fd       	sbrc	r23, 7
    10c0:	80 95       	com	r24
    10c2:	98 2f       	mov	r25, r24
    10c4:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__floatsisf>
    10c8:	69 83       	std	Y+1, r22	; 0x01
    10ca:	7a 83       	std	Y+2, r23	; 0x02
    10cc:	8b 83       	std	Y+3, r24	; 0x03
    10ce:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    10d0:	69 85       	ldd	r22, Y+9	; 0x09
    10d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10d8:	2c ed       	ldi	r18, 0xDC	; 220
    10da:	38 eb       	ldi	r19, 0xB8	; 184
    10dc:	48 e0       	ldi	r20, 0x08	; 8
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    10e4:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <__fixsfsi>
    10e8:	9b 01       	movw	r18, r22
    10ea:	77 ff       	sbrs	r23, 7
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <move_arc_stnb+0xca>
    10ee:	30 95       	com	r19
    10f0:	21 95       	neg	r18
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	b9 01       	movw	r22, r18
    10f6:	88 27       	eor	r24, r24
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	80 95       	com	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__floatsisf>
    1102:	4b 01       	movw	r8, r22
    1104:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1106:	6d 85       	ldd	r22, Y+13	; 0x0d
    1108:	7e 85       	ldd	r23, Y+14	; 0x0e
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	98 89       	ldd	r25, Y+16	; 0x10
    110e:	2c ed       	ldi	r18, 0xDC	; 220
    1110:	38 eb       	ldi	r19, 0xB8	; 184
    1112:	48 e0       	ldi	r20, 0x08	; 8
    1114:	5e e3       	ldi	r21, 0x3E	; 62
    1116:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    111a:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <__fixsfsi>
    111e:	9b 01       	movw	r18, r22
    1120:	77 ff       	sbrs	r23, 7
    1122:	03 c0       	rjmp	.+6      	; 0x112a <move_arc_stnb+0x100>
    1124:	30 95       	com	r19
    1126:	21 95       	neg	r18
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	b9 01       	movw	r22, r18
    112c:	88 27       	eor	r24, r24
    112e:	77 fd       	sbrc	r23, 7
    1130:	80 95       	com	r24
    1132:	98 2f       	mov	r25, r24
    1134:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__floatsisf>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	5f e4       	ldi	r21, 0x4F	; 79
    1148:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    114c:	88 23       	and	r24, r24
    114e:	a1 f5       	brne	.+104    	; 0x11b8 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1150:	69 81       	ldd	r22, Y+1	; 0x01
    1152:	7a 81       	ldd	r23, Y+2	; 0x02
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    115c:	2b 01       	movw	r4, r22
    115e:	3c 01       	movw	r6, r24
    1160:	c5 01       	movw	r24, r10
    1162:	b4 01       	movw	r22, r8
    1164:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1168:	4b 01       	movw	r8, r22
    116a:	5c 01       	movw	r10, r24
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	2d b7       	in	r18, 0x3d	; 61
    117a:	3e b7       	in	r19, 0x3e	; 62
    117c:	29 50       	subi	r18, 0x09	; 9
    117e:	30 40       	sbci	r19, 0x00	; 0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	3e bf       	out	0x3e, r19	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	2d bf       	out	0x3d, r18	; 61
    118a:	ed b7       	in	r30, 0x3d	; 61
    118c:	fe b7       	in	r31, 0x3e	; 62
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	ad b7       	in	r26, 0x3d	; 61
    1192:	be b7       	in	r27, 0x3e	; 62
    1194:	12 96       	adiw	r26, 0x02	; 2
    1196:	5c 92       	st	X, r5
    1198:	4e 92       	st	-X, r4
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	93 82       	std	Z+3, r9	; 0x03
    119e:	82 82       	std	Z+2, r8	; 0x02
    11a0:	75 83       	std	Z+5, r23	; 0x05
    11a2:	64 83       	std	Z+4, r22	; 0x04
    11a4:	26 82       	std	Z+6, r2	; 0x06
    11a6:	10 86       	std	Z+8, r1	; 0x08
    11a8:	17 82       	std	Z+7, r1	; 0x07
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	43 2d       	mov	r20, r3
    11b0:	92 01       	movw	r18, r4
    11b2:	84 01       	movw	r16, r8
    11b4:	76 01       	movw	r14, r12
    11b6:	c1 c1       	rjmp	.+898    	; 0x153a <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    11b8:	c3 01       	movw	r24, r6
    11ba:	b2 01       	movw	r22, r4
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	e9 f5       	brne	.+122    	; 0x1246 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    11d8:	3b 01       	movw	r6, r22
    11da:	c5 01       	movw	r24, r10
    11dc:	b4 01       	movw	r22, r8
    11de:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    11e2:	8b 01       	movw	r16, r22
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    11ec:	7b 01       	movw	r14, r22
    11ee:	2d b7       	in	r18, 0x3d	; 61
    11f0:	3e b7       	in	r19, 0x3e	; 62
    11f2:	29 50       	subi	r18, 0x09	; 9
    11f4:	30 40       	sbci	r19, 0x00	; 0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	3e bf       	out	0x3e, r19	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	2d bf       	out	0x3d, r18	; 61
    1200:	ed b7       	in	r30, 0x3d	; 61
    1202:	fe b7       	in	r31, 0x3e	; 62
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	33 20       	and	r3, r3
    120a:	09 f4       	brne	.+2      	; 0x120e <move_arc_stnb+0x1e4>
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	71 82       	std	Z+1, r7	; 0x01
    1210:	60 82       	st	Z, r6
    1212:	13 83       	std	Z+3, r17	; 0x03
    1214:	02 83       	std	Z+2, r16	; 0x02
    1216:	f5 82       	std	Z+5, r15	; 0x05
    1218:	e4 82       	std	Z+4, r14	; 0x04
    121a:	26 82       	std	Z+6, r2	; 0x06
    121c:	10 86       	std	Z+8, r1	; 0x08
    121e:	17 82       	std	Z+7, r1	; 0x07
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	93 01       	movw	r18, r6
    1226:	c2 2c       	mov	r12, r2
    1228:	aa 24       	eor	r10, r10
    122a:	bb 24       	eor	r11, r11
    122c:	83 2c       	mov	r8, r3
    122e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_move>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	ad b7       	in	r26, 0x3d	; 61
    1236:	be b7       	in	r27, 0x3e	; 62
    1238:	19 96       	adiw	r26, 0x09	; 9
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	be bf       	out	0x3e, r27	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	ad bf       	out	0x3d, r26	; 61
    1244:	89 c1       	rjmp	.+786    	; 0x1558 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1246:	c3 01       	movw	r24, r6
    1248:	b2 01       	movw	r22, r4
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__gesf2>
    1256:	18 16       	cp	r1, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <move_arc_stnb+0x232>
    125a:	b1 c0       	rjmp	.+354    	; 0x13be <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    125c:	66 e6       	ldi	r22, 0x66	; 102
    125e:	76 e6       	ldi	r23, 0x66	; 102
    1260:	8a ea       	ldi	r24, 0xAA	; 170
    1262:	91 ec       	ldi	r25, 0xC1	; 193
    1264:	a3 01       	movw	r20, r6
    1266:	92 01       	movw	r18, r4
    1268:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    127c:	66 e6       	ldi	r22, 0x66	; 102
    127e:	76 e6       	ldi	r23, 0x66	; 102
    1280:	8a ea       	ldi	r24, 0xAA	; 170
    1282:	91 e4       	ldi	r25, 0x41	; 65
    1284:	a3 01       	movw	r20, r6
    1286:	92 01       	movw	r18, r4
    1288:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    1298:	5b 01       	movw	r10, r22
    129a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    129c:	ed b7       	in	r30, 0x3d	; 61
    129e:	fe b7       	in	r31, 0x3e	; 62
    12a0:	39 97       	sbiw	r30, 0x09	; 9
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	fe bf       	out	0x3e, r31	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	ed bf       	out	0x3d, r30	; 61
    12ac:	8d b6       	in	r8, 0x3d	; 61
    12ae:	9e b6       	in	r9, 0x3e	; 62
    12b0:	08 94       	sec
    12b2:	81 1c       	adc	r8, r1
    12b4:	91 1c       	adc	r9, r1
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	a8 01       	movw	r20, r16
    12c0:	97 01       	movw	r18, r14
    12c2:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    12c6:	2c ed       	ldi	r18, 0xDC	; 220
    12c8:	38 eb       	ldi	r19, 0xB8	; 184
    12ca:	48 e0       	ldi	r20, 0x08	; 8
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    12d2:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    12d6:	69 8b       	std	Y+17, r22	; 0x11
    12d8:	7a 8b       	std	Y+18, r23	; 0x12
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	69 85       	ldd	r22, Y+9	; 0x09
    12e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e6:	a8 01       	movw	r20, r16
    12e8:	97 01       	movw	r18, r14
    12ea:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    12ee:	2c ed       	ldi	r18, 0xDC	; 220
    12f0:	38 eb       	ldi	r19, 0xB8	; 184
    12f2:	48 e0       	ldi	r20, 0x08	; 8
    12f4:	5e e3       	ldi	r21, 0x3E	; 62
    12f6:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    12fa:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    12fe:	6d 8b       	std	Y+21, r22	; 0x15
    1300:	7e 8b       	std	Y+22, r23	; 0x16
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	98 8f       	std	Y+24, r25	; 0x18
    1306:	6d 85       	ldd	r22, Y+13	; 0x0d
    1308:	7e 85       	ldd	r23, Y+14	; 0x0e
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
    130c:	98 89       	ldd	r25, Y+16	; 0x10
    130e:	a8 01       	movw	r20, r16
    1310:	97 01       	movw	r18, r14
    1312:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1316:	2c ed       	ldi	r18, 0xDC	; 220
    1318:	38 eb       	ldi	r19, 0xB8	; 184
    131a:	48 e0       	ldi	r20, 0x08	; 8
    131c:	5e e3       	ldi	r21, 0x3E	; 62
    131e:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1322:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1326:	2b 01       	movw	r4, r22
    1328:	3c 01       	movw	r6, r24
    132a:	6d 81       	ldd	r22, Y+5	; 0x05
    132c:	7e 81       	ldd	r23, Y+6	; 0x06
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	a6 01       	movw	r20, r12
    1334:	95 01       	movw	r18, r10
    1336:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    133a:	2c ed       	ldi	r18, 0xDC	; 220
    133c:	38 eb       	ldi	r19, 0xB8	; 184
    133e:	48 e0       	ldi	r20, 0x08	; 8
    1340:	5e e3       	ldi	r21, 0x3E	; 62
    1342:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1346:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    134a:	d4 01       	movw	r26, r8
    134c:	6d 93       	st	X+, r22
    134e:	7c 93       	st	X, r23
    1350:	69 85       	ldd	r22, Y+9	; 0x09
    1352:	7a 85       	ldd	r23, Y+10	; 0x0a
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9c 85       	ldd	r25, Y+12	; 0x0c
    1358:	a6 01       	movw	r20, r12
    135a:	95 01       	movw	r18, r10
    135c:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1360:	2c ed       	ldi	r18, 0xDC	; 220
    1362:	38 eb       	ldi	r19, 0xB8	; 184
    1364:	48 e0       	ldi	r20, 0x08	; 8
    1366:	5e e3       	ldi	r21, 0x3E	; 62
    1368:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    136c:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1370:	f4 01       	movw	r30, r8
    1372:	73 83       	std	Z+3, r23	; 0x03
    1374:	62 83       	std	Z+2, r22	; 0x02
    1376:	6d 85       	ldd	r22, Y+13	; 0x0d
    1378:	7e 85       	ldd	r23, Y+14	; 0x0e
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	98 89       	ldd	r25, Y+16	; 0x10
    137e:	a6 01       	movw	r20, r12
    1380:	95 01       	movw	r18, r10
    1382:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1386:	2c ed       	ldi	r18, 0xDC	; 220
    1388:	38 eb       	ldi	r19, 0xB8	; 184
    138a:	48 e0       	ldi	r20, 0x08	; 8
    138c:	5e e3       	ldi	r21, 0x3E	; 62
    138e:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1392:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1396:	d4 01       	movw	r26, r8
    1398:	15 96       	adiw	r26, 0x05	; 5
    139a:	7c 93       	st	X, r23
    139c:	6e 93       	st	-X, r22
    139e:	14 97       	sbiw	r26, 0x04	; 4
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2c 92       	st	X, r2
    13a4:	16 97       	sbiw	r26, 0x06	; 6
    13a6:	18 96       	adiw	r26, 0x08	; 8
    13a8:	1c 92       	st	X, r1
    13aa:	1e 92       	st	-X, r1
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	43 2d       	mov	r20, r3
    13b4:	29 89       	ldd	r18, Y+17	; 0x11
    13b6:	3a 89       	ldd	r19, Y+18	; 0x12
    13b8:	0d 89       	ldd	r16, Y+21	; 0x15
    13ba:	1e 89       	ldd	r17, Y+22	; 0x16
    13bc:	bd c0       	rjmp	.+378    	; 0x1538 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    13be:	c3 01       	movw	r24, r6
    13c0:	b2 01       	movw	r22, r4
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    13ce:	87 fd       	sbrc	r24, 7
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <move_arc_stnb+0x3ac>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	c1 c0       	rjmp	.+386    	; 0x1558 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    13d6:	66 e6       	ldi	r22, 0x66	; 102
    13d8:	76 e6       	ldi	r23, 0x66	; 102
    13da:	8a ea       	ldi	r24, 0xAA	; 170
    13dc:	91 e4       	ldi	r25, 0x41	; 65
    13de:	a3 01       	movw	r20, r6
    13e0:	92 01       	movw	r18, r4
    13e2:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    13f6:	66 e6       	ldi	r22, 0x66	; 102
    13f8:	76 e6       	ldi	r23, 0x66	; 102
    13fa:	8a ea       	ldi	r24, 0xAA	; 170
    13fc:	91 ec       	ldi	r25, 0xC1	; 193
    13fe:	a3 01       	movw	r20, r6
    1400:	92 01       	movw	r18, r4
    1402:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    1412:	5b 01       	movw	r10, r22
    1414:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1416:	2d b7       	in	r18, 0x3d	; 61
    1418:	3e b7       	in	r19, 0x3e	; 62
    141a:	29 50       	subi	r18, 0x09	; 9
    141c:	30 40       	sbci	r19, 0x00	; 0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	3e bf       	out	0x3e, r19	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	2d bf       	out	0x3d, r18	; 61
    1428:	8d b6       	in	r8, 0x3d	; 61
    142a:	9e b6       	in	r9, 0x3e	; 62
    142c:	08 94       	sec
    142e:	81 1c       	adc	r8, r1
    1430:	91 1c       	adc	r9, r1
    1432:	6d 81       	ldd	r22, Y+5	; 0x05
    1434:	7e 81       	ldd	r23, Y+6	; 0x06
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	a8 01       	movw	r20, r16
    143c:	97 01       	movw	r18, r14
    143e:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1442:	2c ed       	ldi	r18, 0xDC	; 220
    1444:	38 eb       	ldi	r19, 0xB8	; 184
    1446:	48 e0       	ldi	r20, 0x08	; 8
    1448:	5e e3       	ldi	r21, 0x3E	; 62
    144a:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    144e:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1452:	69 8f       	std	Y+25, r22	; 0x19
    1454:	7a 8f       	std	Y+26, r23	; 0x1a
    1456:	8b 8f       	std	Y+27, r24	; 0x1b
    1458:	9c 8f       	std	Y+28, r25	; 0x1c
    145a:	69 85       	ldd	r22, Y+9	; 0x09
    145c:	7a 85       	ldd	r23, Y+10	; 0x0a
    145e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1460:	9c 85       	ldd	r25, Y+12	; 0x0c
    1462:	a8 01       	movw	r20, r16
    1464:	97 01       	movw	r18, r14
    1466:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    146a:	2c ed       	ldi	r18, 0xDC	; 220
    146c:	38 eb       	ldi	r19, 0xB8	; 184
    146e:	48 e0       	ldi	r20, 0x08	; 8
    1470:	5e e3       	ldi	r21, 0x3E	; 62
    1472:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1476:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    147a:	6d 8f       	std	Y+29, r22	; 0x1d
    147c:	7e 8f       	std	Y+30, r23	; 0x1e
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
    1480:	98 a3       	std	Y+32, r25	; 0x20
    1482:	6d 85       	ldd	r22, Y+13	; 0x0d
    1484:	7e 85       	ldd	r23, Y+14	; 0x0e
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	98 89       	ldd	r25, Y+16	; 0x10
    148a:	a8 01       	movw	r20, r16
    148c:	97 01       	movw	r18, r14
    148e:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1492:	2c ed       	ldi	r18, 0xDC	; 220
    1494:	38 eb       	ldi	r19, 0xB8	; 184
    1496:	48 e0       	ldi	r20, 0x08	; 8
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    149e:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    14a2:	2b 01       	movw	r4, r22
    14a4:	3c 01       	movw	r6, r24
    14a6:	6d 81       	ldd	r22, Y+5	; 0x05
    14a8:	7e 81       	ldd	r23, Y+6	; 0x06
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	a6 01       	movw	r20, r12
    14b0:	95 01       	movw	r18, r10
    14b2:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    14b6:	2c ed       	ldi	r18, 0xDC	; 220
    14b8:	38 eb       	ldi	r19, 0xB8	; 184
    14ba:	48 e0       	ldi	r20, 0x08	; 8
    14bc:	5e e3       	ldi	r21, 0x3E	; 62
    14be:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    14c2:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    14c6:	d4 01       	movw	r26, r8
    14c8:	6d 93       	st	X+, r22
    14ca:	7c 93       	st	X, r23
    14cc:	69 85       	ldd	r22, Y+9	; 0x09
    14ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    14d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d4:	a6 01       	movw	r20, r12
    14d6:	95 01       	movw	r18, r10
    14d8:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    14dc:	2c ed       	ldi	r18, 0xDC	; 220
    14de:	38 eb       	ldi	r19, 0xB8	; 184
    14e0:	48 e0       	ldi	r20, 0x08	; 8
    14e2:	5e e3       	ldi	r21, 0x3E	; 62
    14e4:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    14e8:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    14ec:	f4 01       	movw	r30, r8
    14ee:	73 83       	std	Z+3, r23	; 0x03
    14f0:	62 83       	std	Z+2, r22	; 0x02
    14f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    14f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    14f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f8:	98 89       	ldd	r25, Y+16	; 0x10
    14fa:	a6 01       	movw	r20, r12
    14fc:	95 01       	movw	r18, r10
    14fe:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1502:	2c ed       	ldi	r18, 0xDC	; 220
    1504:	38 eb       	ldi	r19, 0xB8	; 184
    1506:	48 e0       	ldi	r20, 0x08	; 8
    1508:	5e e3       	ldi	r21, 0x3E	; 62
    150a:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    150e:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1512:	d4 01       	movw	r26, r8
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	7c 93       	st	X, r23
    1518:	6e 93       	st	-X, r22
    151a:	14 97       	sbiw	r26, 0x04	; 4
    151c:	16 96       	adiw	r26, 0x06	; 6
    151e:	2c 92       	st	X, r2
    1520:	16 97       	sbiw	r26, 0x06	; 6
    1522:	18 96       	adiw	r26, 0x08	; 8
    1524:	1c 92       	st	X, r1
    1526:	1e 92       	st	-X, r1
    1528:	17 97       	sbiw	r26, 0x07	; 7
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	43 2d       	mov	r20, r3
    1530:	29 8d       	ldd	r18, Y+25	; 0x19
    1532:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1534:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1536:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1538:	72 01       	movw	r14, r4
    153a:	c2 2c       	mov	r12, r2
    153c:	aa 24       	eor	r10, r10
    153e:	bb 24       	eor	r11, r11
    1540:	83 2c       	mov	r8, r3
    1542:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_move>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	ed b7       	in	r30, 0x3d	; 61
    154a:	fe b7       	in	r31, 0x3e	; 62
    154c:	39 96       	adiw	r30, 0x09	; 9
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	fe bf       	out	0x3e, r31	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    1558:	a0 96       	adiw	r28, 0x20	; 32
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    158a:	2f 92       	push	r2
    158c:	3f 92       	push	r3
    158e:	4f 92       	push	r4
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	a0 97       	sbiw	r28, 0x20	; 32
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	2b 01       	movw	r4, r22
    15c0:	3c 01       	movw	r6, r24
    15c2:	2d 83       	std	Y+5, r18	; 0x05
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	4f 83       	std	Y+7, r20	; 0x07
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	e9 86       	std	Y+9, r14	; 0x09
    15cc:	fa 86       	std	Y+10, r15	; 0x0a
    15ce:	0b 87       	std	Y+11, r16	; 0x0b
    15d0:	1c 87       	std	Y+12, r17	; 0x0c
    15d2:	ad 86       	std	Y+13, r10	; 0x0d
    15d4:	be 86       	std	Y+14, r11	; 0x0e
    15d6:	cf 86       	std	Y+15, r12	; 0x0f
    15d8:	d8 8a       	std	Y+16, r13	; 0x10
    15da:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    15dc:	33 24       	eor	r3, r3
    15de:	ca 01       	movw	r24, r20
    15e0:	b9 01       	movw	r22, r18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	14 f4       	brge	.+4      	; 0x15f6 <move_arc_stwt+0x6c>
    15f2:	33 24       	eor	r3, r3
    15f4:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	2c ed       	ldi	r18, 0xDC	; 220
    1600:	38 eb       	ldi	r19, 0xB8	; 184
    1602:	48 e0       	ldi	r20, 0x08	; 8
    1604:	5e e3       	ldi	r21, 0x3E	; 62
    1606:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    160a:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <__fixsfsi>
    160e:	9b 01       	movw	r18, r22
    1610:	77 ff       	sbrs	r23, 7
    1612:	03 c0       	rjmp	.+6      	; 0x161a <move_arc_stwt+0x90>
    1614:	30 95       	com	r19
    1616:	21 95       	neg	r18
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	b9 01       	movw	r22, r18
    161c:	88 27       	eor	r24, r24
    161e:	77 fd       	sbrc	r23, 7
    1620:	80 95       	com	r24
    1622:	98 2f       	mov	r25, r24
    1624:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__floatsisf>
    1628:	69 83       	std	Y+1, r22	; 0x01
    162a:	7a 83       	std	Y+2, r23	; 0x02
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1630:	69 85       	ldd	r22, Y+9	; 0x09
    1632:	7a 85       	ldd	r23, Y+10	; 0x0a
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	2c ed       	ldi	r18, 0xDC	; 220
    163a:	38 eb       	ldi	r19, 0xB8	; 184
    163c:	48 e0       	ldi	r20, 0x08	; 8
    163e:	5e e3       	ldi	r21, 0x3E	; 62
    1640:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1644:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <__fixsfsi>
    1648:	9b 01       	movw	r18, r22
    164a:	77 ff       	sbrs	r23, 7
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <move_arc_stwt+0xca>
    164e:	30 95       	com	r19
    1650:	21 95       	neg	r18
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	b9 01       	movw	r22, r18
    1656:	88 27       	eor	r24, r24
    1658:	77 fd       	sbrc	r23, 7
    165a:	80 95       	com	r24
    165c:	98 2f       	mov	r25, r24
    165e:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__floatsisf>
    1662:	4b 01       	movw	r8, r22
    1664:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1666:	6d 85       	ldd	r22, Y+13	; 0x0d
    1668:	7e 85       	ldd	r23, Y+14	; 0x0e
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	2c ed       	ldi	r18, 0xDC	; 220
    1670:	38 eb       	ldi	r19, 0xB8	; 184
    1672:	48 e0       	ldi	r20, 0x08	; 8
    1674:	5e e3       	ldi	r21, 0x3E	; 62
    1676:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    167a:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <__fixsfsi>
    167e:	9b 01       	movw	r18, r22
    1680:	77 ff       	sbrs	r23, 7
    1682:	03 c0       	rjmp	.+6      	; 0x168a <move_arc_stwt+0x100>
    1684:	30 95       	com	r19
    1686:	21 95       	neg	r18
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	b9 01       	movw	r22, r18
    168c:	88 27       	eor	r24, r24
    168e:	77 fd       	sbrc	r23, 7
    1690:	80 95       	com	r24
    1692:	98 2f       	mov	r25, r24
    1694:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__floatsisf>
    1698:	6b 01       	movw	r12, r22
    169a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    169c:	c3 01       	movw	r24, r6
    169e:	b2 01       	movw	r22, r4
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	5f e4       	ldi	r21, 0x4F	; 79
    16a8:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	a1 f5       	brne	.+104    	; 0x1718 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    16b0:	69 81       	ldd	r22, Y+1	; 0x01
    16b2:	7a 81       	ldd	r23, Y+2	; 0x02
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    16bc:	2b 01       	movw	r4, r22
    16be:	3c 01       	movw	r6, r24
    16c0:	c5 01       	movw	r24, r10
    16c2:	b4 01       	movw	r22, r8
    16c4:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    16c8:	4b 01       	movw	r8, r22
    16ca:	5c 01       	movw	r10, r24
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    16d4:	6b 01       	movw	r12, r22
    16d6:	7c 01       	movw	r14, r24
    16d8:	2d b7       	in	r18, 0x3d	; 61
    16da:	3e b7       	in	r19, 0x3e	; 62
    16dc:	29 50       	subi	r18, 0x09	; 9
    16de:	30 40       	sbci	r19, 0x00	; 0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	3e bf       	out	0x3e, r19	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	2d bf       	out	0x3d, r18	; 61
    16ea:	ed b7       	in	r30, 0x3d	; 61
    16ec:	fe b7       	in	r31, 0x3e	; 62
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	ad b7       	in	r26, 0x3d	; 61
    16f2:	be b7       	in	r27, 0x3e	; 62
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	5c 92       	st	X, r5
    16f8:	4e 92       	st	-X, r4
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	93 82       	std	Z+3, r9	; 0x03
    16fe:	82 82       	std	Z+2, r8	; 0x02
    1700:	75 83       	std	Z+5, r23	; 0x05
    1702:	64 83       	std	Z+4, r22	; 0x04
    1704:	26 82       	std	Z+6, r2	; 0x06
    1706:	10 86       	std	Z+8, r1	; 0x08
    1708:	17 82       	std	Z+7, r1	; 0x07
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	43 2d       	mov	r20, r3
    1710:	92 01       	movw	r18, r4
    1712:	84 01       	movw	r16, r8
    1714:	76 01       	movw	r14, r12
    1716:	c1 c1       	rjmp	.+898    	; 0x1a9a <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1718:	c3 01       	movw	r24, r6
    171a:	b2 01       	movw	r22, r4
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	e9 f5       	brne	.+122    	; 0x17a6 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    172c:	69 81       	ldd	r22, Y+1	; 0x01
    172e:	7a 81       	ldd	r23, Y+2	; 0x02
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1738:	3b 01       	movw	r6, r22
    173a:	c5 01       	movw	r24, r10
    173c:	b4 01       	movw	r22, r8
    173e:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1742:	8b 01       	movw	r16, r22
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    174c:	7b 01       	movw	r14, r22
    174e:	2d b7       	in	r18, 0x3d	; 61
    1750:	3e b7       	in	r19, 0x3e	; 62
    1752:	29 50       	subi	r18, 0x09	; 9
    1754:	30 40       	sbci	r19, 0x00	; 0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	3e bf       	out	0x3e, r19	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	2d bf       	out	0x3d, r18	; 61
    1760:	ed b7       	in	r30, 0x3d	; 61
    1762:	fe b7       	in	r31, 0x3e	; 62
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	33 20       	and	r3, r3
    176a:	09 f4       	brne	.+2      	; 0x176e <move_arc_stwt+0x1e4>
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	71 82       	std	Z+1, r7	; 0x01
    1770:	60 82       	st	Z, r6
    1772:	13 83       	std	Z+3, r17	; 0x03
    1774:	02 83       	std	Z+2, r16	; 0x02
    1776:	f5 82       	std	Z+5, r15	; 0x05
    1778:	e4 82       	std	Z+4, r14	; 0x04
    177a:	26 82       	std	Z+6, r2	; 0x06
    177c:	10 86       	std	Z+8, r1	; 0x08
    177e:	17 82       	std	Z+7, r1	; 0x07
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	93 01       	movw	r18, r6
    1786:	c2 2c       	mov	r12, r2
    1788:	aa 24       	eor	r10, r10
    178a:	bb 24       	eor	r11, r11
    178c:	83 2c       	mov	r8, r3
    178e:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_move>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	ad b7       	in	r26, 0x3d	; 61
    1796:	be b7       	in	r27, 0x3e	; 62
    1798:	19 96       	adiw	r26, 0x09	; 9
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	be bf       	out	0x3e, r27	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	ad bf       	out	0x3d, r26	; 61
    17a4:	89 c1       	rjmp	.+786    	; 0x1ab8 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__gesf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <move_arc_stwt+0x232>
    17ba:	b1 c0       	rjmp	.+354    	; 0x191e <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    17bc:	66 e6       	ldi	r22, 0x66	; 102
    17be:	76 e6       	ldi	r23, 0x66	; 102
    17c0:	8a ea       	ldi	r24, 0xAA	; 170
    17c2:	91 ec       	ldi	r25, 0xC1	; 193
    17c4:	a3 01       	movw	r20, r6
    17c6:	92 01       	movw	r18, r4
    17c8:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    17d8:	7b 01       	movw	r14, r22
    17da:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    17dc:	66 e6       	ldi	r22, 0x66	; 102
    17de:	76 e6       	ldi	r23, 0x66	; 102
    17e0:	8a ea       	ldi	r24, 0xAA	; 170
    17e2:	91 e4       	ldi	r25, 0x41	; 65
    17e4:	a3 01       	movw	r20, r6
    17e6:	92 01       	movw	r18, r4
    17e8:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    17f8:	5b 01       	movw	r10, r22
    17fa:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    17fc:	ed b7       	in	r30, 0x3d	; 61
    17fe:	fe b7       	in	r31, 0x3e	; 62
    1800:	39 97       	sbiw	r30, 0x09	; 9
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	fe bf       	out	0x3e, r31	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	ed bf       	out	0x3d, r30	; 61
    180c:	8d b6       	in	r8, 0x3d	; 61
    180e:	9e b6       	in	r9, 0x3e	; 62
    1810:	08 94       	sec
    1812:	81 1c       	adc	r8, r1
    1814:	91 1c       	adc	r9, r1
    1816:	6d 81       	ldd	r22, Y+5	; 0x05
    1818:	7e 81       	ldd	r23, Y+6	; 0x06
    181a:	8f 81       	ldd	r24, Y+7	; 0x07
    181c:	98 85       	ldd	r25, Y+8	; 0x08
    181e:	a8 01       	movw	r20, r16
    1820:	97 01       	movw	r18, r14
    1822:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1826:	2c ed       	ldi	r18, 0xDC	; 220
    1828:	38 eb       	ldi	r19, 0xB8	; 184
    182a:	48 e0       	ldi	r20, 0x08	; 8
    182c:	5e e3       	ldi	r21, 0x3E	; 62
    182e:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1832:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1836:	69 8b       	std	Y+17, r22	; 0x11
    1838:	7a 8b       	std	Y+18, r23	; 0x12
    183a:	8b 8b       	std	Y+19, r24	; 0x13
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	69 85       	ldd	r22, Y+9	; 0x09
    1840:	7a 85       	ldd	r23, Y+10	; 0x0a
    1842:	8b 85       	ldd	r24, Y+11	; 0x0b
    1844:	9c 85       	ldd	r25, Y+12	; 0x0c
    1846:	a8 01       	movw	r20, r16
    1848:	97 01       	movw	r18, r14
    184a:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    184e:	2c ed       	ldi	r18, 0xDC	; 220
    1850:	38 eb       	ldi	r19, 0xB8	; 184
    1852:	48 e0       	ldi	r20, 0x08	; 8
    1854:	5e e3       	ldi	r21, 0x3E	; 62
    1856:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    185a:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    185e:	6d 8b       	std	Y+21, r22	; 0x15
    1860:	7e 8b       	std	Y+22, r23	; 0x16
    1862:	8f 8b       	std	Y+23, r24	; 0x17
    1864:	98 8f       	std	Y+24, r25	; 0x18
    1866:	6d 85       	ldd	r22, Y+13	; 0x0d
    1868:	7e 85       	ldd	r23, Y+14	; 0x0e
    186a:	8f 85       	ldd	r24, Y+15	; 0x0f
    186c:	98 89       	ldd	r25, Y+16	; 0x10
    186e:	a8 01       	movw	r20, r16
    1870:	97 01       	movw	r18, r14
    1872:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1876:	2c ed       	ldi	r18, 0xDC	; 220
    1878:	38 eb       	ldi	r19, 0xB8	; 184
    187a:	48 e0       	ldi	r20, 0x08	; 8
    187c:	5e e3       	ldi	r21, 0x3E	; 62
    187e:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1882:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1886:	2b 01       	movw	r4, r22
    1888:	3c 01       	movw	r6, r24
    188a:	6d 81       	ldd	r22, Y+5	; 0x05
    188c:	7e 81       	ldd	r23, Y+6	; 0x06
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	a6 01       	movw	r20, r12
    1894:	95 01       	movw	r18, r10
    1896:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    189a:	2c ed       	ldi	r18, 0xDC	; 220
    189c:	38 eb       	ldi	r19, 0xB8	; 184
    189e:	48 e0       	ldi	r20, 0x08	; 8
    18a0:	5e e3       	ldi	r21, 0x3E	; 62
    18a2:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    18a6:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    18aa:	d4 01       	movw	r26, r8
    18ac:	6d 93       	st	X+, r22
    18ae:	7c 93       	st	X, r23
    18b0:	69 85       	ldd	r22, Y+9	; 0x09
    18b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    18b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b8:	a6 01       	movw	r20, r12
    18ba:	95 01       	movw	r18, r10
    18bc:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    18c0:	2c ed       	ldi	r18, 0xDC	; 220
    18c2:	38 eb       	ldi	r19, 0xB8	; 184
    18c4:	48 e0       	ldi	r20, 0x08	; 8
    18c6:	5e e3       	ldi	r21, 0x3E	; 62
    18c8:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    18cc:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    18d0:	f4 01       	movw	r30, r8
    18d2:	73 83       	std	Z+3, r23	; 0x03
    18d4:	62 83       	std	Z+2, r22	; 0x02
    18d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    18d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	98 89       	ldd	r25, Y+16	; 0x10
    18de:	a6 01       	movw	r20, r12
    18e0:	95 01       	movw	r18, r10
    18e2:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    18e6:	2c ed       	ldi	r18, 0xDC	; 220
    18e8:	38 eb       	ldi	r19, 0xB8	; 184
    18ea:	48 e0       	ldi	r20, 0x08	; 8
    18ec:	5e e3       	ldi	r21, 0x3E	; 62
    18ee:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    18f2:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    18f6:	d4 01       	movw	r26, r8
    18f8:	15 96       	adiw	r26, 0x05	; 5
    18fa:	7c 93       	st	X, r23
    18fc:	6e 93       	st	-X, r22
    18fe:	14 97       	sbiw	r26, 0x04	; 4
    1900:	16 96       	adiw	r26, 0x06	; 6
    1902:	2c 92       	st	X, r2
    1904:	16 97       	sbiw	r26, 0x06	; 6
    1906:	18 96       	adiw	r26, 0x08	; 8
    1908:	1c 92       	st	X, r1
    190a:	1e 92       	st	-X, r1
    190c:	17 97       	sbiw	r26, 0x07	; 7
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	43 2d       	mov	r20, r3
    1914:	29 89       	ldd	r18, Y+17	; 0x11
    1916:	3a 89       	ldd	r19, Y+18	; 0x12
    1918:	0d 89       	ldd	r16, Y+21	; 0x15
    191a:	1e 89       	ldd	r17, Y+22	; 0x16
    191c:	bd c0       	rjmp	.+378    	; 0x1a98 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    191e:	c3 01       	movw	r24, r6
    1920:	b2 01       	movw	r22, r4
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    192e:	87 fd       	sbrc	r24, 7
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <move_arc_stwt+0x3ac>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	c1 c0       	rjmp	.+386    	; 0x1ab8 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1936:	66 e6       	ldi	r22, 0x66	; 102
    1938:	76 e6       	ldi	r23, 0x66	; 102
    193a:	8a ea       	ldi	r24, 0xAA	; 170
    193c:	91 e4       	ldi	r25, 0x41	; 65
    193e:	a3 01       	movw	r20, r6
    1940:	92 01       	movw	r18, r4
    1942:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    1952:	7b 01       	movw	r14, r22
    1954:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1956:	66 e6       	ldi	r22, 0x66	; 102
    1958:	76 e6       	ldi	r23, 0x66	; 102
    195a:	8a ea       	ldi	r24, 0xAA	; 170
    195c:	91 ec       	ldi	r25, 0xC1	; 193
    195e:	a3 01       	movw	r20, r6
    1960:	92 01       	movw	r18, r4
    1962:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    1972:	5b 01       	movw	r10, r22
    1974:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1976:	2d b7       	in	r18, 0x3d	; 61
    1978:	3e b7       	in	r19, 0x3e	; 62
    197a:	29 50       	subi	r18, 0x09	; 9
    197c:	30 40       	sbci	r19, 0x00	; 0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	3e bf       	out	0x3e, r19	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	2d bf       	out	0x3d, r18	; 61
    1988:	8d b6       	in	r8, 0x3d	; 61
    198a:	9e b6       	in	r9, 0x3e	; 62
    198c:	08 94       	sec
    198e:	81 1c       	adc	r8, r1
    1990:	91 1c       	adc	r9, r1
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	a8 01       	movw	r20, r16
    199c:	97 01       	movw	r18, r14
    199e:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    19a2:	2c ed       	ldi	r18, 0xDC	; 220
    19a4:	38 eb       	ldi	r19, 0xB8	; 184
    19a6:	48 e0       	ldi	r20, 0x08	; 8
    19a8:	5e e3       	ldi	r21, 0x3E	; 62
    19aa:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    19ae:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    19b2:	69 8f       	std	Y+25, r22	; 0x19
    19b4:	7a 8f       	std	Y+26, r23	; 0x1a
    19b6:	8b 8f       	std	Y+27, r24	; 0x1b
    19b8:	9c 8f       	std	Y+28, r25	; 0x1c
    19ba:	69 85       	ldd	r22, Y+9	; 0x09
    19bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    19be:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c2:	a8 01       	movw	r20, r16
    19c4:	97 01       	movw	r18, r14
    19c6:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    19ca:	2c ed       	ldi	r18, 0xDC	; 220
    19cc:	38 eb       	ldi	r19, 0xB8	; 184
    19ce:	48 e0       	ldi	r20, 0x08	; 8
    19d0:	5e e3       	ldi	r21, 0x3E	; 62
    19d2:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    19d6:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    19da:	6d 8f       	std	Y+29, r22	; 0x1d
    19dc:	7e 8f       	std	Y+30, r23	; 0x1e
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
    19e0:	98 a3       	std	Y+32, r25	; 0x20
    19e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    19e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	98 89       	ldd	r25, Y+16	; 0x10
    19ea:	a8 01       	movw	r20, r16
    19ec:	97 01       	movw	r18, r14
    19ee:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    19f2:	2c ed       	ldi	r18, 0xDC	; 220
    19f4:	38 eb       	ldi	r19, 0xB8	; 184
    19f6:	48 e0       	ldi	r20, 0x08	; 8
    19f8:	5e e3       	ldi	r21, 0x3E	; 62
    19fa:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    19fe:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1a02:	2b 01       	movw	r4, r22
    1a04:	3c 01       	movw	r6, r24
    1a06:	6d 81       	ldd	r22, Y+5	; 0x05
    1a08:	7e 81       	ldd	r23, Y+6	; 0x06
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	a6 01       	movw	r20, r12
    1a10:	95 01       	movw	r18, r10
    1a12:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1a16:	2c ed       	ldi	r18, 0xDC	; 220
    1a18:	38 eb       	ldi	r19, 0xB8	; 184
    1a1a:	48 e0       	ldi	r20, 0x08	; 8
    1a1c:	5e e3       	ldi	r21, 0x3E	; 62
    1a1e:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1a22:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1a26:	d4 01       	movw	r26, r8
    1a28:	6d 93       	st	X+, r22
    1a2a:	7c 93       	st	X, r23
    1a2c:	69 85       	ldd	r22, Y+9	; 0x09
    1a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a34:	a6 01       	movw	r20, r12
    1a36:	95 01       	movw	r18, r10
    1a38:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1a3c:	2c ed       	ldi	r18, 0xDC	; 220
    1a3e:	38 eb       	ldi	r19, 0xB8	; 184
    1a40:	48 e0       	ldi	r20, 0x08	; 8
    1a42:	5e e3       	ldi	r21, 0x3E	; 62
    1a44:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1a48:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1a4c:	f4 01       	movw	r30, r8
    1a4e:	73 83       	std	Z+3, r23	; 0x03
    1a50:	62 83       	std	Z+2, r22	; 0x02
    1a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	a6 01       	movw	r20, r12
    1a5c:	95 01       	movw	r18, r10
    1a5e:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1a62:	2c ed       	ldi	r18, 0xDC	; 220
    1a64:	38 eb       	ldi	r19, 0xB8	; 184
    1a66:	48 e0       	ldi	r20, 0x08	; 8
    1a68:	5e e3       	ldi	r21, 0x3E	; 62
    1a6a:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    1a6e:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    1a72:	d4 01       	movw	r26, r8
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	7c 93       	st	X, r23
    1a78:	6e 93       	st	-X, r22
    1a7a:	14 97       	sbiw	r26, 0x04	; 4
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	2c 92       	st	X, r2
    1a80:	16 97       	sbiw	r26, 0x06	; 6
    1a82:	18 96       	adiw	r26, 0x08	; 8
    1a84:	1c 92       	st	X, r1
    1a86:	1e 92       	st	-X, r1
    1a88:	17 97       	sbiw	r26, 0x07	; 7
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	43 2d       	mov	r20, r3
    1a90:	29 8d       	ldd	r18, Y+25	; 0x19
    1a92:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a94:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1a96:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a98:	72 01       	movw	r14, r4
    1a9a:	c2 2c       	mov	r12, r2
    1a9c:	aa 24       	eor	r10, r10
    1a9e:	bb 24       	eor	r11, r11
    1aa0:	83 2c       	mov	r8, r3
    1aa2:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_move>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	ed b7       	in	r30, 0x3d	; 61
    1aaa:	fe b7       	in	r31, 0x3e	; 62
    1aac:	39 96       	adiw	r30, 0x09	; 9
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	fe bf       	out	0x3e, r31	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1ab8:	a0 96       	adiw	r28, 0x20	; 32
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	5f 90       	pop	r5
    1ae2:	4f 90       	pop	r4
    1ae4:	3f 90       	pop	r3
    1ae6:	2f 90       	pop	r2
    1ae8:	08 95       	ret

00001aea <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1aea:	0e 94 62 21 	call	0x42c4	; 0x42c4 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1aee:	28 2f       	mov	r18, r24
    1af0:	21 70       	andi	r18, 0x01	; 1
    1af2:	20 93 82 06 	sts	0x0682, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	82 70       	andi	r24, 0x02	; 2
    1afa:	90 70       	andi	r25, 0x00	; 0
    1afc:	95 95       	asr	r25
    1afe:	87 95       	ror	r24
    1b00:	80 93 83 06 	sts	0x0683, r24
}
    1b04:	08 95       	ret

00001b06 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1b06:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1b0a:	60 93 7a 05 	sts	0x057A, r22
    1b0e:	70 93 7b 05 	sts	0x057B, r23
    1b12:	80 93 7c 05 	sts	0x057C, r24
    1b16:	90 93 7d 05 	sts	0x057D, r25
	leftLightVolt = getLeftLight();
    1b1a:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1b1e:	60 93 11 07 	sts	0x0711, r22
    1b22:	70 93 12 07 	sts	0x0712, r23
    1b26:	80 93 13 07 	sts	0x0713, r24
    1b2a:	90 93 14 07 	sts	0x0714, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1b2e:	08 95       	ret

00001b30 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1b30:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1b34:	60 93 e3 04 	sts	0x04E3, r22
    1b38:	70 93 e4 04 	sts	0x04E4, r23
    1b3c:	80 93 e5 04 	sts	0x04E5, r24
    1b40:	90 93 e6 04 	sts	0x04E6, r25
	bkIR = getBackIR();
    1b44:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1b48:	60 93 ed 04 	sts	0x04ED, r22
    1b4c:	70 93 ee 04 	sts	0x04EE, r23
    1b50:	80 93 ef 04 	sts	0x04EF, r24
    1b54:	90 93 f0 04 	sts	0x04F0, r25
	ltIR = getLeftIR();
    1b58:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1b5c:	60 93 84 06 	sts	0x0684, r22
    1b60:	70 93 85 06 	sts	0x0685, r23
    1b64:	80 93 86 06 	sts	0x0686, r24
    1b68:	90 93 87 06 	sts	0x0687, r25
	rtIR = getRightIR();
    1b6c:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1b70:	60 93 89 06 	sts	0x0689, r22
    1b74:	70 93 8a 06 	sts	0x068A, r23
    1b78:	80 93 8b 06 	sts	0x068B, r24
    1b7c:	90 93 8c 06 	sts	0x068C, r25
}
    1b80:	08 95       	ret

00001b82 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1b82:	cf 92       	push	r12
    1b84:	df 92       	push	r13
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	16 2f       	mov	r17, r22
    1b94:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1b96:	5f e1       	ldi	r21, 0x1F	; 31
    1b98:	f5 2e       	mov	r15, r21
    1b9a:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1b9c:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1b9e:	0f 2d       	mov	r16, r15
    1ba0:	06 95       	lsr	r16
    1ba2:	06 95       	lsr	r16
    1ba4:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1ba6:	c0 2f       	mov	r28, r16
    1ba8:	d0 e0       	ldi	r29, 0x00	; 0
    1baa:	c1 2e       	mov	r12, r17
    1bac:	dd 24       	eor	r13, r13
    1bae:	ce 01       	movw	r24, r28
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1bb6:	80 2f       	mov	r24, r16
    1bb8:	61 2f       	mov	r22, r17
    1bba:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_set_next_PGC>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	45 e0       	ldi	r20, 0x05	; 5
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	4a 95       	dec	r20
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <LCD_set_pixel+0x40>
    1bca:	2f 2d       	mov	r18, r15
    1bcc:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1bce:	ee 20       	and	r14, r14
    1bd0:	89 f0       	breq	.+34     	; 0x1bf4 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1bd2:	ec 0d       	add	r30, r12
    1bd4:	fd 1d       	adc	r31, r13
    1bd6:	e4 50       	subi	r30, 0x04	; 4
    1bd8:	fa 4f       	sbci	r31, 0xFA	; 250
    1bda:	27 70       	andi	r18, 0x07	; 7
    1bdc:	30 70       	andi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <LCD_set_pixel+0x66>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	2a 95       	dec	r18
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <LCD_set_pixel+0x62>
    1bec:	20 81       	ld	r18, Z
    1bee:	28 2b       	or	r18, r24
    1bf0:	20 83       	st	Z, r18
    1bf2:	11 c0       	rjmp	.+34     	; 0x1c16 <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1bf4:	ec 0d       	add	r30, r12
    1bf6:	fd 1d       	adc	r31, r13
    1bf8:	e4 50       	subi	r30, 0x04	; 4
    1bfa:	fa 4f       	sbci	r31, 0xFA	; 250
    1bfc:	27 70       	andi	r18, 0x07	; 7
    1bfe:	30 70       	andi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <LCD_set_pixel+0x88>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	2a 95       	dec	r18
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <LCD_set_pixel+0x84>
    1c0e:	80 95       	com	r24
    1c10:	20 81       	ld	r18, Z
    1c12:	82 23       	and	r24, r18
    1c14:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1c16:	35 e0       	ldi	r19, 0x05	; 5
    1c18:	cc 0f       	add	r28, r28
    1c1a:	dd 1f       	adc	r29, r29
    1c1c:	3a 95       	dec	r19
    1c1e:	e1 f7       	brne	.-8      	; 0x1c18 <LCD_set_pixel+0x96>
    1c20:	cc 0d       	add	r28, r12
    1c22:	dd 1d       	adc	r29, r13
    1c24:	c4 50       	subi	r28, 0x04	; 4
    1c26:	da 4f       	sbci	r29, 0xFA	; 250
    1c28:	88 81       	ld	r24, Y
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
}
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	08 95       	ret

00001c42 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1c42:	7f 92       	push	r7
    1c44:	8f 92       	push	r8
    1c46:	9f 92       	push	r9
    1c48:	af 92       	push	r10
    1c4a:	bf 92       	push	r11
    1c4c:	cf 92       	push	r12
    1c4e:	df 92       	push	r13
    1c50:	ef 92       	push	r14
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	98 2e       	mov	r9, r24
    1c5a:	b6 2e       	mov	r11, r22
    1c5c:	c4 2e       	mov	r12, r20
    1c5e:	a2 2e       	mov	r10, r18
    1c60:	80 2e       	mov	r8, r16
    1c62:	7e 2c       	mov	r7, r14

	r = r*LCD_CELL_OFFSET;
    1c64:	bb 0c       	add	r11, r11
    1c66:	bb 0c       	add	r11, r11
    1c68:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1c6a:	dd 24       	eor	r13, r13
    1c6c:	23 e0       	ldi	r18, 0x03	; 3
    1c6e:	cc 0c       	add	r12, r12
    1c70:	dd 1c       	adc	r13, r13
    1c72:	2a 95       	dec	r18
    1c74:	e1 f7       	brne	.-8      	; 0x1c6e <printCell+0x2c>
    1c76:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1c78:	0f e1       	ldi	r16, 0x1F	; 31
    1c7a:	0b 19       	sub	r16, r11
    1c7c:	80 2f       	mov	r24, r16
    1c7e:	6c 2d       	mov	r22, r12
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1c86:	98 e1       	ldi	r25, 0x18	; 24
    1c88:	e9 2e       	mov	r14, r25
    1c8a:	eb 18       	sub	r14, r11
    1c8c:	8e 2d       	mov	r24, r14
    1c8e:	6c 2d       	mov	r22, r12
    1c90:	41 e0       	ldi	r20, 0x01	; 1
    1c92:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1c96:	87 e0       	ldi	r24, 0x07	; 7
    1c98:	f8 2e       	mov	r15, r24
    1c9a:	fc 0c       	add	r15, r12
    1c9c:	80 2f       	mov	r24, r16
    1c9e:	6f 2d       	mov	r22, r15
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1ca6:	8e 2d       	mov	r24, r14
    1ca8:	6f 2d       	mov	r22, r15
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	
	if(cell&0b1000){
    1cb0:	c9 2c       	mov	r12, r9
    1cb2:	93 fe       	sbrs	r9, 3
    1cb4:	24 c0       	rjmp	.+72     	; 0x1cfe <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1cb6:	61 2f       	mov	r22, r17
    1cb8:	6f 5f       	subi	r22, 0xFF	; 255
    1cba:	80 2f       	mov	r24, r16
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1cc2:	61 2f       	mov	r22, r17
    1cc4:	6e 5f       	subi	r22, 0xFE	; 254
    1cc6:	80 2f       	mov	r24, r16
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1cce:	61 2f       	mov	r22, r17
    1cd0:	6d 5f       	subi	r22, 0xFD	; 253
    1cd2:	80 2f       	mov	r24, r16
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1cda:	61 2f       	mov	r22, r17
    1cdc:	6c 5f       	subi	r22, 0xFC	; 252
    1cde:	80 2f       	mov	r24, r16
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1ce6:	61 2f       	mov	r22, r17
    1ce8:	6b 5f       	subi	r22, 0xFB	; 251
    1cea:	80 2f       	mov	r24, r16
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1cf2:	61 2f       	mov	r22, r17
    1cf4:	6a 5f       	subi	r22, 0xFA	; 250
    1cf6:	80 2f       	mov	r24, r16
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0100){
    1cfe:	c2 fe       	sbrs	r12, 2
    1d00:	25 c0       	rjmp	.+74     	; 0x1d4c <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1d02:	8b 2d       	mov	r24, r11
    1d04:	80 95       	com	r24
    1d06:	81 5e       	subi	r24, 0xE1	; 225
    1d08:	6f 2d       	mov	r22, r15
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1d10:	8d e1       	ldi	r24, 0x1D	; 29
    1d12:	8b 19       	sub	r24, r11
    1d14:	6f 2d       	mov	r22, r15
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1d1c:	8c e1       	ldi	r24, 0x1C	; 28
    1d1e:	8b 19       	sub	r24, r11
    1d20:	6f 2d       	mov	r22, r15
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1d28:	8b e1       	ldi	r24, 0x1B	; 27
    1d2a:	8b 19       	sub	r24, r11
    1d2c:	6f 2d       	mov	r22, r15
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1d34:	8a e1       	ldi	r24, 0x1A	; 26
    1d36:	8b 19       	sub	r24, r11
    1d38:	6f 2d       	mov	r22, r15
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1d40:	89 e1       	ldi	r24, 0x19	; 25
    1d42:	8b 19       	sub	r24, r11
    1d44:	6f 2d       	mov	r22, r15
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0010){
    1d4c:	c1 fe       	sbrs	r12, 1
    1d4e:	24 c0       	rjmp	.+72     	; 0x1d98 <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1d50:	61 2f       	mov	r22, r17
    1d52:	6f 5f       	subi	r22, 0xFF	; 255
    1d54:	8e 2d       	mov	r24, r14
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1d5c:	61 2f       	mov	r22, r17
    1d5e:	6e 5f       	subi	r22, 0xFE	; 254
    1d60:	8e 2d       	mov	r24, r14
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1d68:	61 2f       	mov	r22, r17
    1d6a:	6d 5f       	subi	r22, 0xFD	; 253
    1d6c:	8e 2d       	mov	r24, r14
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1d74:	61 2f       	mov	r22, r17
    1d76:	6c 5f       	subi	r22, 0xFC	; 252
    1d78:	8e 2d       	mov	r24, r14
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1d80:	61 2f       	mov	r22, r17
    1d82:	6b 5f       	subi	r22, 0xFB	; 251
    1d84:	8e 2d       	mov	r24, r14
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1d8c:	61 2f       	mov	r22, r17
    1d8e:	6a 5f       	subi	r22, 0xFA	; 250
    1d90:	8e 2d       	mov	r24, r14
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0001){
    1d98:	c0 fe       	sbrs	r12, 0
    1d9a:	25 c0       	rjmp	.+74     	; 0x1de6 <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1d9c:	8b 2d       	mov	r24, r11
    1d9e:	80 95       	com	r24
    1da0:	81 5e       	subi	r24, 0xE1	; 225
    1da2:	61 2f       	mov	r22, r17
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1daa:	8d e1       	ldi	r24, 0x1D	; 29
    1dac:	8b 19       	sub	r24, r11
    1dae:	61 2f       	mov	r22, r17
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1db6:	8c e1       	ldi	r24, 0x1C	; 28
    1db8:	8b 19       	sub	r24, r11
    1dba:	61 2f       	mov	r22, r17
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1dc2:	8b e1       	ldi	r24, 0x1B	; 27
    1dc4:	8b 19       	sub	r24, r11
    1dc6:	61 2f       	mov	r22, r17
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1dce:	8a e1       	ldi	r24, 0x1A	; 26
    1dd0:	8b 19       	sub	r24, r11
    1dd2:	61 2f       	mov	r22, r17
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1dda:	89 e1       	ldi	r24, 0x19	; 25
    1ddc:	8b 19       	sub	r24, r11
    1dde:	61 2f       	mov	r22, r17
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}	
	if(isrobot){
    1de6:	aa 20       	and	r10, r10
    1de8:	e1 f1       	breq	.+120    	; 0x1e62 <printCell+0x220>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1dea:	bc e1       	ldi	r27, 0x1C	; 28
    1dec:	eb 2e       	mov	r14, r27
    1dee:	eb 18       	sub	r14, r11
    1df0:	a3 e0       	ldi	r26, 0x03	; 3
    1df2:	ca 2e       	mov	r12, r26
    1df4:	c1 0e       	add	r12, r17
    1df6:	8e 2d       	mov	r24, r14
    1df8:	6c 2d       	mov	r22, r12
    1dfa:	4a 2d       	mov	r20, r10
    1dfc:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1e00:	fb e1       	ldi	r31, 0x1B	; 27
    1e02:	ff 2e       	mov	r15, r31
    1e04:	fb 18       	sub	r15, r11
    1e06:	8f 2d       	mov	r24, r15
    1e08:	6c 2d       	mov	r22, r12
    1e0a:	4a 2d       	mov	r20, r10
    1e0c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1e10:	01 2f       	mov	r16, r17
    1e12:	0c 5f       	subi	r16, 0xFC	; 252
    1e14:	8e 2d       	mov	r24, r14
    1e16:	60 2f       	mov	r22, r16
    1e18:	4a 2d       	mov	r20, r10
    1e1a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1e1e:	8f 2d       	mov	r24, r15
    1e20:	60 2f       	mov	r22, r16
    1e22:	4a 2d       	mov	r20, r10
    1e24:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		
		switch(orent){
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	88 16       	cp	r8, r24
    1e2c:	71 f0       	breq	.+28     	; 0x1e4a <printCell+0x208>
    1e2e:	88 16       	cp	r8, r24
    1e30:	40 f0       	brcs	.+16     	; 0x1e42 <printCell+0x200>
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	88 16       	cp	r8, r24
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <printCell+0x20e>
    1e38:	83 e0       	ldi	r24, 0x03	; 3
    1e3a:	88 16       	cp	r8, r24
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <printCell+0x1fe>
    1e3e:	4a c0       	rjmp	.+148    	; 0x1ed4 <printCell+0x292>
    1e40:	0b c0       	rjmp	.+22     	; 0x1e58 <printCell+0x216>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1e42:	8d e1       	ldi	r24, 0x1D	; 29
    1e44:	8b 19       	sub	r24, r11
    1e46:	6c 2d       	mov	r22, r12
    1e48:	0a c0       	rjmp	.+20     	; 0x1e5e <printCell+0x21c>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1e4a:	1b 5f       	subi	r17, 0xFB	; 251
    1e4c:	8e 2d       	mov	r24, r14
    1e4e:	06 c0       	rjmp	.+12     	; 0x1e5c <printCell+0x21a>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    1e50:	8a e1       	ldi	r24, 0x1A	; 26
    1e52:	8b 19       	sub	r24, r11
    1e54:	60 2f       	mov	r22, r16
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <printCell+0x21c>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    1e58:	1e 5f       	subi	r17, 0xFE	; 254
    1e5a:	8f 2d       	mov	r24, r15
    1e5c:	61 2f       	mov	r22, r17
    1e5e:	4a 2d       	mov	r20, r10
    1e60:	37 c0       	rjmp	.+110    	; 0x1ed0 <printCell+0x28e>
				break;
			default:
				break;
		}
	}
	else if(reset){
    1e62:	77 20       	and	r7, r7
    1e64:	b9 f1       	breq	.+110    	; 0x1ed4 <printCell+0x292>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1e66:	ec e1       	ldi	r30, 0x1C	; 28
    1e68:	ce 2e       	mov	r12, r30
    1e6a:	cb 18       	sub	r12, r11
    1e6c:	73 e0       	ldi	r23, 0x03	; 3
    1e6e:	e7 2e       	mov	r14, r23
    1e70:	e1 0e       	add	r14, r17
    1e72:	8c 2d       	mov	r24, r12
    1e74:	6e 2d       	mov	r22, r14
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1e7c:	0b e1       	ldi	r16, 0x1B	; 27
    1e7e:	0b 19       	sub	r16, r11
    1e80:	80 2f       	mov	r24, r16
    1e82:	6e 2d       	mov	r22, r14
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1e8a:	64 e0       	ldi	r22, 0x04	; 4
    1e8c:	f6 2e       	mov	r15, r22
    1e8e:	f1 0e       	add	r15, r17
    1e90:	8c 2d       	mov	r24, r12
    1e92:	6f 2d       	mov	r22, r15
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1e9a:	80 2f       	mov	r24, r16
    1e9c:	6f 2d       	mov	r22, r15
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1ea4:	8d e1       	ldi	r24, 0x1D	; 29
    1ea6:	8b 19       	sub	r24, r11
    1ea8:	6e 2d       	mov	r22, r14
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1eb0:	1b 5f       	subi	r17, 0xFB	; 251
    1eb2:	8c 2d       	mov	r24, r12
    1eb4:	61 2f       	mov	r22, r17
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    1ebc:	8a e1       	ldi	r24, 0x1A	; 26
    1ebe:	8b 19       	sub	r24, r11
    1ec0:	6f 2d       	mov	r22, r15
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    1ec8:	13 50       	subi	r17, 0x03	; 3
    1eca:	80 2f       	mov	r24, r16
    1ecc:	61 2f       	mov	r22, r17
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		}
}
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	bf 90       	pop	r11
    1ee2:	af 90       	pop	r10
    1ee4:	9f 90       	pop	r9
    1ee6:	8f 90       	pop	r8
    1ee8:	7f 90       	pop	r7
    1eea:	08 95       	ret

00001eec <printMap>:
* Input Variables:	char
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(char reset)
{
    1eec:	9f 92       	push	r9
    1eee:	af 92       	push	r10
    1ef0:	bf 92       	push	r11
    1ef2:	cf 92       	push	r12
    1ef4:	df 92       	push	r13
    1ef6:	ef 92       	push	r14
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	98 2e       	mov	r9, r24
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    1f04:	80 91 80 06 	lds	r24, 0x0680
    1f08:	a8 2e       	mov	r10, r24
    1f0a:	a6 94       	lsr	r10
    1f0c:	a6 94       	lsr	r10
	unsigned char curCol = currentCellWorld & 0b0011;
    1f0e:	43 e0       	ldi	r20, 0x03	; 3
    1f10:	b4 2e       	mov	r11, r20
    1f12:	b8 22       	and	r11, r24
    1f14:	cc 24       	eor	r12, r12
    1f16:	dd 24       	eor	r13, r13
    1f18:	1e c0       	rjmp	.+60     	; 0x1f56 <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    1f1a:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    1f1c:	fa 14       	cp	r15, r10
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <printMap+0x3a>
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	06 c0       	rjmp	.+12     	; 0x1f32 <printMap+0x46>
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	1b 15       	cp	r17, r11
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <printMap+0x46>
    1f2e:	21 e0       	ldi	r18, 0x01	; 1
    1f30:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation, reset);
    1f32:	6f 2d       	mov	r22, r15
    1f34:	41 2f       	mov	r20, r17
    1f36:	00 91 7f 05 	lds	r16, 0x057F
    1f3a:	e9 2c       	mov	r14, r9
    1f3c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    1f40:	1f 5f       	subi	r17, 0xFF	; 255
    1f42:	21 96       	adiw	r28, 0x01	; 1
    1f44:	14 30       	cpi	r17, 0x04	; 4
    1f46:	49 f7       	brne	.-46     	; 0x1f1a <printMap+0x2e>
    1f48:	08 94       	sec
    1f4a:	c1 1c       	adc	r12, r1
    1f4c:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    1f4e:	84 e0       	ldi	r24, 0x04	; 4
    1f50:	c8 16       	cp	r12, r24
    1f52:	d1 04       	cpc	r13, r1
    1f54:	51 f0       	breq	.+20     	; 0x1f6a <printMap+0x7e>
    1f56:	fc 2c       	mov	r15, r12
    1f58:	e6 01       	movw	r28, r12
    1f5a:	cc 0f       	add	r28, r28
    1f5c:	dd 1f       	adc	r29, r29
    1f5e:	cc 0f       	add	r28, r28
    1f60:	dd 1f       	adc	r29, r29
    1f62:	c1 59       	subi	r28, 0x91	; 145
    1f64:	dc 4f       	sbci	r29, 0xFC	; 252
    1f66:	10 e0       	ldi	r17, 0x00	; 0
    1f68:	d8 cf       	rjmp	.-80     	; 0x1f1a <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation, reset);
		}	
	}
}
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	df 90       	pop	r13
    1f78:	cf 90       	pop	r12
    1f7a:	bf 90       	pop	r11
    1f7c:	af 90       	pop	r10
    1f7e:	9f 90       	pop	r9
    1f80:	08 95       	ret

00001f82 <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
    1f82:	1f 93       	push	r17
    1f84:	18 2f       	mov	r17, r24
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	
	// AT START: odometry is REALLY SMALL & odometryTrigger is at approx 343
	// Suggest breaking apart the IF case?
	if((odometry > odometryTrigger))
    1f86:	60 91 15 07 	lds	r22, 0x0715
    1f8a:	70 91 16 07 	lds	r23, 0x0716
    1f8e:	80 91 17 07 	lds	r24, 0x0717
    1f92:	90 91 18 07 	lds	r25, 0x0718
    1f96:	20 91 67 04 	lds	r18, 0x0467
    1f9a:	30 91 68 04 	lds	r19, 0x0468
    1f9e:	40 91 69 04 	lds	r20, 0x0469
    1fa2:	50 91 6a 04 	lds	r21, 0x046A
    1fa6:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	5f e3       	ldi	r21, 0x3F	; 63
    1fb2:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1fb6:	2c ed       	ldi	r18, 0xDC	; 220
    1fb8:	38 eb       	ldi	r19, 0xB8	; 184
    1fba:	48 e0       	ldi	r20, 0x08	; 8
    1fbc:	5e e3       	ldi	r21, 0x3E	; 62
    1fbe:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    1fc2:	20 91 6a 05 	lds	r18, 0x056A
    1fc6:	30 91 6b 05 	lds	r19, 0x056B
    1fca:	40 91 6c 05 	lds	r20, 0x056C
    1fce:	50 91 6d 05 	lds	r21, 0x056D
    1fd2:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__gesf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	bc f4       	brge	.+46     	; 0x2008 <checkOdometry+0x86>
	{
		odometryFlag = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	80 93 88 06 	sts	0x0688, r24
		odometryStepL = 0;
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 e0       	ldi	r26, 0x00	; 0
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	80 93 15 07 	sts	0x0715, r24
    1fec:	90 93 16 07 	sts	0x0716, r25
    1ff0:	a0 93 17 07 	sts	0x0717, r26
    1ff4:	b0 93 18 07 	sts	0x0718, r27
		odometryStepR = 0;
    1ff8:	80 93 67 04 	sts	0x0467, r24
    1ffc:	90 93 68 04 	sts	0x0468, r25
    2000:	a0 93 69 04 	sts	0x0469, r26
    2004:	b0 93 6a 04 	sts	0x046A, r27
	}
	if (reset){
    2008:	11 23       	and	r17, r17
    200a:	d9 f0       	breq	.+54     	; 0x2042 <checkOdometry+0xc0>
		STEPPER_set_steps(STEPPER_BOTH,0);
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <STEPPER_set_steps>
		odometryFlag = 0;
    2016:	10 92 88 06 	sts	0x0688, r1
		odometryStepL = 0;
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	80 93 15 07 	sts	0x0715, r24
    2026:	90 93 16 07 	sts	0x0716, r25
    202a:	a0 93 17 07 	sts	0x0717, r26
    202e:	b0 93 18 07 	sts	0x0718, r27
		odometryStepR = 0;
    2032:	80 93 67 04 	sts	0x0467, r24
    2036:	90 93 68 04 	sts	0x0468, r25
    203a:	a0 93 69 04 	sts	0x0469, r26
    203e:	b0 93 6a 04 	sts	0x046A, r27
	
	// // Else the flag RESETS to ZERO?!
	// else{
		// odometryFlag = 0;
	// }
}
    2042:	1f 91       	pop	r17
    2044:	08 95       	ret

00002046 <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2046:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <ATTINY_open>
    204a:	90 93 66 04 	sts	0x0466, r25
    204e:	80 93 65 04 	sts	0x0465, r24
	LEopstat = LED_open(); //open the LED module
    2052:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <LED_open>
    2056:	90 93 64 04 	sts	0x0464, r25
    205a:	80 93 63 04 	sts	0x0463, r24
	LCopstat = LCD_open(); //open the LCD module
    205e:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <LCD_open>
    2062:	90 93 62 04 	sts	0x0462, r25
    2066:	80 93 61 04 	sts	0x0461, r24
	STEPPER_open(); // Open STEPPER module for use
    206a:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <SPKR_open>
	
	LED_open();
    2074:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <LED_open>
	I2C_open();
    2078:	0e 94 3b 23 	call	0x4676	; 0x4676 <I2C_open>
	ADC_open();//open the ADC module
    207c:	0e 94 df 1a 	call	0x35be	; 0x35be <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	0e 94 41 1b 	call	0x3682	; 0x3682 <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    2086:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <checkIR>
	prefilter(1);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    2090:	8f ee       	ldi	r24, 0xEF	; 239
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a5 e8       	ldi	r26, 0x85	; 133
    2096:	b1 e4       	ldi	r27, 0x41	; 65
    2098:	80 93 6a 05 	sts	0x056A, r24
    209c:	90 93 6b 05 	sts	0x056B, r25
    20a0:	a0 93 6c 05 	sts	0x056C, r26
    20a4:	b0 93 6d 05 	sts	0x056D, r27
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	0a c0       	rjmp	.+20     	; 0x20c2 <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    20ae:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	80 32       	cpi	r24, 0x20	; 32
    20b4:	91 05       	cpc	r25, r1
    20b6:	d9 f7       	brne	.-10     	; 0x20ae <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    20b8:	2f 5f       	subi	r18, 0xFF	; 255
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	24 30       	cpi	r18, 0x04	; 4
    20be:	31 05       	cpc	r19, r1
    20c0:	59 f0       	breq	.+22     	; 0x20d8 <initializeRobot+0x92>
    20c2:	f9 01       	movw	r30, r18
    20c4:	55 e0       	ldi	r21, 0x05	; 5
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	5a 95       	dec	r21
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <initializeRobot+0x80>
    20ce:	e4 50       	subi	r30, 0x04	; 4
    20d0:	fa 4f       	sbci	r31, 0xFA	; 250
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	eb cf       	rjmp	.-42     	; 0x20ae <initializeRobot+0x68>
    20d8:	08 95       	ret

000020da <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    20da:	ef 92       	push	r14
    20dc:	ff 92       	push	r15
    20de:	0f 93       	push	r16
    20e0:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    20e2:	60 91 e3 04 	lds	r22, 0x04E3
    20e6:	70 91 e4 04 	lds	r23, 0x04E4
    20ea:	80 91 e5 04 	lds	r24, 0x04E5
    20ee:	90 91 e6 04 	lds	r25, 0x04E6
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	40 e5       	ldi	r20, 0x50	; 80
    20f8:	51 e4       	ldi	r21, 0x41	; 65
    20fa:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    20fe:	f8 2e       	mov	r15, r24
    2100:	ff 1c       	adc	r15, r15
    2102:	ff 24       	eor	r15, r15
    2104:	ff 1c       	adc	r15, r15
    2106:	ff 0c       	add	r15, r15
    2108:	ff 0c       	add	r15, r15
    210a:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    210c:	60 91 84 06 	lds	r22, 0x0684
    2110:	70 91 85 06 	lds	r23, 0x0685
    2114:	80 91 86 06 	lds	r24, 0x0686
    2118:	90 91 87 06 	lds	r25, 0x0687
    211c:	20 e0       	ldi	r18, 0x00	; 0
    211e:	30 e0       	ldi	r19, 0x00	; 0
    2120:	40 ef       	ldi	r20, 0xF0	; 240
    2122:	51 e4       	ldi	r21, 0x41	; 65
    2124:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    2128:	08 2f       	mov	r16, r24
    212a:	00 1f       	adc	r16, r16
    212c:	00 27       	eor	r16, r16
    212e:	00 1f       	adc	r16, r16
    2130:	00 0f       	add	r16, r16
    2132:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    2134:	60 91 ed 04 	lds	r22, 0x04ED
    2138:	70 91 ee 04 	lds	r23, 0x04EE
    213c:	80 91 ef 04 	lds	r24, 0x04EF
    2140:	90 91 f0 04 	lds	r25, 0x04F0
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4c e0       	ldi	r20, 0x0C	; 12
    214a:	52 e4       	ldi	r21, 0x42	; 66
    214c:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    2150:	18 2f       	mov	r17, r24
    2152:	11 1f       	adc	r17, r17
    2154:	11 27       	eor	r17, r17
    2156:	11 1f       	adc	r17, r17
    2158:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    215a:	ee 24       	eor	r14, r14
    215c:	60 91 89 06 	lds	r22, 0x0689
    2160:	70 91 8a 06 	lds	r23, 0x068A
    2164:	80 91 8b 06 	lds	r24, 0x068B
    2168:	90 91 8c 06 	lds	r25, 0x068C
    216c:	20 e0       	ldi	r18, 0x00	; 0
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	40 ef       	ldi	r20, 0xF0	; 240
    2172:	51 e4       	ldi	r21, 0x41	; 65
    2174:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    2178:	88 23       	and	r24, r24
    217a:	14 f4       	brge	.+4      	; 0x2180 <checkWorld+0xa6>
    217c:	ee 24       	eor	r14, r14
    217e:	e3 94       	inc	r14
    2180:	8f 2d       	mov	r24, r15
    2182:	8e 0d       	add	r24, r14
    2184:	80 0f       	add	r24, r16
    2186:	81 0f       	add	r24, r17
    2188:	80 93 eb 04 	sts	0x04EB, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    218c:	20 91 ec 04 	lds	r18, 0x04EC
    2190:	e2 2f       	mov	r30, r18
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	eb 5f       	subi	r30, 0xFB	; 251
    2196:	f8 4f       	sbci	r31, 0xF8	; 248
    2198:	91 81       	ldd	r25, Z+1	; 0x01
    219a:	90 93 f1 04 	sts	0x04F1, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    219e:	89 17       	cp	r24, r25
    21a0:	19 f4       	brne	.+6      	; 0x21a8 <checkWorld+0xce>
		currentMoveWorld += 1;
    21a2:	2f 5f       	subi	r18, 0xFF	; 255
    21a4:	20 93 ec 04 	sts	0x04EC, r18
	}
}
    21a8:	1f 91       	pop	r17
    21aa:	0f 91       	pop	r16
    21ac:	ff 90       	pop	r15
    21ae:	ef 90       	pop	r14
    21b0:	08 95       	ret

000021b2 <moveWallOld>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWallOld( void )
{	
    21b2:	2f 92       	push	r2
    21b4:	3f 92       	push	r3
    21b6:	4f 92       	push	r4
    21b8:	5f 92       	push	r5
    21ba:	6f 92       	push	r6
    21bc:	7f 92       	push	r7
    21be:	8f 92       	push	r8
    21c0:	9f 92       	push	r9
    21c2:	af 92       	push	r10
    21c4:	bf 92       	push	r11
    21c6:	cf 92       	push	r12
    21c8:	df 92       	push	r13
    21ca:	ef 92       	push	r14
    21cc:	ff 92       	push	r15
    21ce:	0f 93       	push	r16
    21d0:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    21d2:	e0 90 e3 04 	lds	r14, 0x04E3
    21d6:	f0 90 e4 04 	lds	r15, 0x04E4
    21da:	00 91 e5 04 	lds	r16, 0x04E5
    21de:	10 91 e6 04 	lds	r17, 0x04E6
    21e2:	33 24       	eor	r3, r3
    21e4:	c8 01       	movw	r24, r16
    21e6:	b7 01       	movw	r22, r14
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e0       	ldi	r20, 0x00	; 0
    21ee:	50 e0       	ldi	r21, 0x00	; 0
    21f0:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    21f4:	88 23       	and	r24, r24
    21f6:	14 f4       	brge	.+4      	; 0x21fc <moveWallOld+0x4a>
    21f8:	33 24       	eor	r3, r3
    21fa:	33 94       	inc	r3
    21fc:	a0 90 89 06 	lds	r10, 0x0689
    2200:	b0 90 8a 06 	lds	r11, 0x068A
    2204:	c0 90 8b 06 	lds	r12, 0x068B
    2208:	d0 90 8c 06 	lds	r13, 0x068C
    220c:	40 90 84 06 	lds	r4, 0x0684
    2210:	50 90 85 06 	lds	r5, 0x0685
    2214:	60 90 86 06 	lds	r6, 0x0686
    2218:	70 90 87 06 	lds	r7, 0x0687
    221c:	88 24       	eor	r8, r8
    221e:	60 91 ed 04 	lds	r22, 0x04ED
    2222:	70 91 ee 04 	lds	r23, 0x04EE
    2226:	80 91 ef 04 	lds	r24, 0x04EF
    222a:	90 91 f0 04 	lds	r25, 0x04F0
    222e:	20 e0       	ldi	r18, 0x00	; 0
    2230:	30 e0       	ldi	r19, 0x00	; 0
    2232:	40 e7       	ldi	r20, 0x70	; 112
    2234:	51 e4       	ldi	r21, 0x41	; 65
    2236:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    223a:	88 23       	and	r24, r24
    223c:	14 f4       	brge	.+4      	; 0x2242 <moveWallOld+0x90>
    223e:	88 24       	eor	r8, r8
    2240:	83 94       	inc	r8
    2242:	93 2c       	mov	r9, r3
    2244:	98 28       	or	r9, r8
    2246:	88 24       	eor	r8, r8
    2248:	c6 01       	movw	r24, r12
    224a:	b5 01       	movw	r22, r10
    224c:	20 e0       	ldi	r18, 0x00	; 0
    224e:	30 e0       	ldi	r19, 0x00	; 0
    2250:	40 e7       	ldi	r20, 0x70	; 112
    2252:	51 e4       	ldi	r21, 0x41	; 65
    2254:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    2258:	88 23       	and	r24, r24
    225a:	14 f4       	brge	.+4      	; 0x2260 <moveWallOld+0xae>
    225c:	88 24       	eor	r8, r8
    225e:	83 94       	inc	r8
    2260:	98 28       	or	r9, r8
    2262:	88 24       	eor	r8, r8
    2264:	c3 01       	movw	r24, r6
    2266:	b2 01       	movw	r22, r4
    2268:	20 e0       	ldi	r18, 0x00	; 0
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e7       	ldi	r20, 0x70	; 112
    226e:	51 e4       	ldi	r21, 0x41	; 65
    2270:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    2274:	88 23       	and	r24, r24
    2276:	14 f4       	brge	.+4      	; 0x227c <moveWallOld+0xca>
    2278:	88 24       	eor	r8, r8
    227a:	83 94       	inc	r8
    227c:	29 2c       	mov	r2, r9
    227e:	28 28       	or	r2, r8
	if(!isWall){	
    2280:	81 f4       	brne	.+32     	; 0x22a2 <moveWallOld+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    2282:	60 e0       	ldi	r22, 0x00	; 0
    2284:	70 e0       	ldi	r23, 0x00	; 0
    2286:	80 e0       	ldi	r24, 0x00	; 0
    2288:	9f e4       	ldi	r25, 0x4F	; 79
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e2       	ldi	r20, 0x20	; 32
    2290:	51 e4       	ldi	r21, 0x41	; 65
    2292:	79 01       	movw	r14, r18
    2294:	8a 01       	movw	r16, r20
    2296:	59 01       	movw	r10, r18
    2298:	6a 01       	movw	r12, r20
    229a:	88 24       	eor	r8, r8
    229c:	0e 94 15 08 	call	0x102a	; 0x102a <move_arc_stnb>
    22a0:	f7 c0       	rjmp	.+494    	; 0x2490 <moveWallOld+0x2de>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    22a2:	c6 01       	movw	r24, r12
    22a4:	b5 01       	movw	r22, r10
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	40 e7       	ldi	r20, 0x70	; 112
    22ac:	51 e4       	ldi	r21, 0x41	; 65
    22ae:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__gesf2>
    22b2:	18 16       	cp	r1, r24
    22b4:	64 f4       	brge	.+24     	; 0x22ce <moveWallOld+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    22b6:	80 e0       	ldi	r24, 0x00	; 0
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	a0 e4       	ldi	r26, 0x40	; 64
    22bc:	b0 ec       	ldi	r27, 0xC0	; 192
    22be:	80 93 89 06 	sts	0x0689, r24
    22c2:	90 93 8a 06 	sts	0x068A, r25
    22c6:	a0 93 8b 06 	sts	0x068B, r26
    22ca:	b0 93 8c 06 	sts	0x068C, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    22ce:	c3 01       	movw	r24, r6
    22d0:	b2 01       	movw	r22, r4
    22d2:	20 e0       	ldi	r18, 0x00	; 0
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	40 e7       	ldi	r20, 0x70	; 112
    22d8:	51 e4       	ldi	r21, 0x41	; 65
    22da:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__gesf2>
    22de:	18 16       	cp	r1, r24
    22e0:	14 f0       	brlt	.+4      	; 0x22e6 <moveWallOld+0x134>
    22e2:	80 e0       	ldi	r24, 0x00	; 0
    22e4:	0d c0       	rjmp	.+26     	; 0x2300 <moveWallOld+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    22e6:	80 e0       	ldi	r24, 0x00	; 0
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	a0 e4       	ldi	r26, 0x40	; 64
    22ec:	b0 ec       	ldi	r27, 0xC0	; 192
    22ee:	80 93 84 06 	sts	0x0684, r24
    22f2:	90 93 85 06 	sts	0x0685, r25
    22f6:	a0 93 86 06 	sts	0x0686, r26
    22fa:	b0 93 87 06 	sts	0x0687, r27
    22fe:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    2300:	33 20       	and	r3, r3
    2302:	21 f1       	breq	.+72     	; 0x234c <moveWallOld+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    2304:	88 23       	and	r24, r24
    2306:	29 f0       	breq	.+10     	; 0x2312 <moveWallOld+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2308:	60 e0       	ldi	r22, 0x00	; 0
    230a:	70 e0       	ldi	r23, 0x00	; 0
    230c:	8a e7       	ldi	r24, 0x7A	; 122
    230e:	94 e4       	ldi	r25, 0x44	; 68
    2310:	04 c0       	rjmp	.+8      	; 0x231a <moveWallOld+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    2312:	60 e0       	ldi	r22, 0x00	; 0
    2314:	70 e0       	ldi	r23, 0x00	; 0
    2316:	8a e7       	ldi	r24, 0x7A	; 122
    2318:	94 ec       	ldi	r25, 0xC4	; 196
    231a:	a8 01       	movw	r20, r16
    231c:	97 01       	movw	r18, r14
    231e:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    2322:	20 91 84 06 	lds	r18, 0x0684
    2326:	30 91 85 06 	lds	r19, 0x0685
    232a:	40 91 86 06 	lds	r20, 0x0686
    232e:	50 91 87 06 	lds	r21, 0x0687
    2332:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    2336:	9b 01       	movw	r18, r22
    2338:	ac 01       	movw	r20, r24
    233a:	60 91 89 06 	lds	r22, 0x0689
    233e:	70 91 8a 06 	lds	r23, 0x068A
    2342:	80 91 8b 06 	lds	r24, 0x068B
    2346:	90 91 8c 06 	lds	r25, 0x068C
    234a:	10 c0       	rjmp	.+32     	; 0x236c <moveWallOld+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    234c:	60 91 89 06 	lds	r22, 0x0689
    2350:	70 91 8a 06 	lds	r23, 0x068A
    2354:	80 91 8b 06 	lds	r24, 0x068B
    2358:	90 91 8c 06 	lds	r25, 0x068C
    235c:	20 91 84 06 	lds	r18, 0x0684
    2360:	30 91 85 06 	lds	r19, 0x0685
    2364:	40 91 86 06 	lds	r20, 0x0686
    2368:	50 91 87 06 	lds	r21, 0x0687
    236c:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2370:	90 58       	subi	r25, 0x80	; 128
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2378:	6b 01       	movw	r12, r22
    237a:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    237c:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <__fixsfsi>
    2380:	8b 01       	movw	r16, r22
    2382:	77 ff       	sbrs	r23, 7
    2384:	03 c0       	rjmp	.+6      	; 0x238c <moveWallOld+0x1da>
    2386:	10 95       	com	r17
    2388:	01 95       	neg	r16
    238a:	1f 4f       	sbci	r17, 0xFF	; 255
    238c:	05 36       	cpi	r16, 0x65	; 101
    238e:	11 05       	cpc	r17, r1
    2390:	fc f0       	brlt	.+62     	; 0x23d0 <moveWallOld+0x21e>
    2392:	c7 01       	movw	r24, r14
    2394:	b6 01       	movw	r22, r12
    2396:	20 e0       	ldi	r18, 0x00	; 0
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	40 e0       	ldi	r20, 0x00	; 0
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    23a2:	88 23       	and	r24, r24
    23a4:	a9 f0       	breq	.+42     	; 0x23d0 <moveWallOld+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    23a6:	b8 01       	movw	r22, r16
    23a8:	88 27       	eor	r24, r24
    23aa:	77 fd       	sbrc	r23, 7
    23ac:	80 95       	com	r24
    23ae:	98 2f       	mov	r25, r24
    23b0:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__floatsisf>
    23b4:	9b 01       	movw	r18, r22
    23b6:	ac 01       	movw	r20, r24
    23b8:	c7 01       	movw	r24, r14
    23ba:	b6 01       	movw	r22, r12
    23bc:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	48 ec       	ldi	r20, 0xC8	; 200
    23c6:	52 e4       	ldi	r21, 0x42	; 66
    23c8:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    23cc:	6b 01       	movw	r12, r22
    23ce:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    23d0:	c7 01       	movw	r24, r14
    23d2:	b6 01       	movw	r22, r12
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	48 ec       	ldi	r20, 0xC8	; 200
    23da:	52 e4       	ldi	r21, 0x42	; 66
    23dc:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    23e0:	6b 01       	movw	r12, r22
    23e2:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    23e4:	8d b7       	in	r24, 0x3d	; 61
    23e6:	9e b7       	in	r25, 0x3e	; 62
    23e8:	09 97       	sbiw	r24, 0x09	; 9
    23ea:	0f b6       	in	r0, 0x3f	; 63
    23ec:	f8 94       	cli
    23ee:	9e bf       	out	0x3e, r25	; 62
    23f0:	0f be       	out	0x3f, r0	; 63
    23f2:	8d bf       	out	0x3d, r24	; 61
    23f4:	0d b7       	in	r16, 0x3d	; 61
    23f6:	1e b7       	in	r17, 0x3e	; 62
    23f8:	0f 5f       	subi	r16, 0xFF	; 255
    23fa:	1f 4f       	sbci	r17, 0xFF	; 255
    23fc:	c7 01       	movw	r24, r14
    23fe:	b6 01       	movw	r22, r12
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	48 ec       	ldi	r20, 0xC8	; 200
    2406:	52 e4       	ldi	r21, 0x42	; 66
    2408:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	48 ec       	ldi	r20, 0xC8	; 200
    2412:	52 e4       	ldi	r21, 0x42	; 66
    2414:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    2418:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    241c:	4b 01       	movw	r8, r22
    241e:	5c 01       	movw	r10, r24
    2420:	82 e3       	ldi	r24, 0x32	; 50
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	f8 01       	movw	r30, r16
    2426:	91 83       	std	Z+1, r25	; 0x01
    2428:	80 83       	st	Z, r24
    242a:	c7 01       	movw	r24, r14
    242c:	b6 01       	movw	r22, r12
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	48 ec       	ldi	r20, 0xC8	; 200
    2434:	52 ec       	ldi	r21, 0xC2	; 194
    2436:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	48 ec       	ldi	r20, 0xC8	; 200
    2440:	52 e4       	ldi	r21, 0x42	; 66
    2442:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    2446:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    244a:	f8 01       	movw	r30, r16
    244c:	73 83       	std	Z+3, r23	; 0x03
    244e:	62 83       	std	Z+2, r22	; 0x02
    2450:	82 ec       	ldi	r24, 0xC2	; 194
    2452:	91 e0       	ldi	r25, 0x01	; 1
    2454:	95 83       	std	Z+5, r25	; 0x05
    2456:	84 83       	std	Z+4, r24	; 0x04
    2458:	16 82       	std	Z+6, r1	; 0x06
    245a:	10 86       	std	Z+8, r1	; 0x08
    245c:	17 82       	std	Z+7, r1	; 0x07
    245e:	81 e0       	ldi	r24, 0x01	; 1
    2460:	62 e0       	ldi	r22, 0x02	; 2
    2462:	41 e0       	ldi	r20, 0x01	; 1
    2464:	22 e3       	ldi	r18, 0x32	; 50
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	84 01       	movw	r16, r8
    246a:	92 ec       	ldi	r25, 0xC2	; 194
    246c:	e9 2e       	mov	r14, r25
    246e:	91 e0       	ldi	r25, 0x01	; 1
    2470:	f9 2e       	mov	r15, r25
    2472:	cc 24       	eor	r12, r12
    2474:	aa 24       	eor	r10, r10
    2476:	bb 24       	eor	r11, r11
    2478:	88 24       	eor	r8, r8
    247a:	83 94       	inc	r8
    247c:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_move>
    2480:	8d b7       	in	r24, 0x3d	; 61
    2482:	9e b7       	in	r25, 0x3e	; 62
    2484:	09 96       	adiw	r24, 0x09	; 9
    2486:	0f b6       	in	r0, 0x3f	; 63
    2488:	f8 94       	cli
    248a:	9e bf       	out	0x3e, r25	; 62
    248c:	0f be       	out	0x3f, r0	; 63
    248e:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    2490:	82 2d       	mov	r24, r2
    2492:	1f 91       	pop	r17
    2494:	0f 91       	pop	r16
    2496:	ff 90       	pop	r15
    2498:	ef 90       	pop	r14
    249a:	df 90       	pop	r13
    249c:	cf 90       	pop	r12
    249e:	bf 90       	pop	r11
    24a0:	af 90       	pop	r10
    24a2:	9f 90       	pop	r9
    24a4:	8f 90       	pop	r8
    24a6:	7f 90       	pop	r7
    24a8:	6f 90       	pop	r6
    24aa:	5f 90       	pop	r5
    24ac:	4f 90       	pop	r4
    24ae:	3f 90       	pop	r3
    24b0:	2f 90       	pop	r2
    24b2:	08 95       	ret

000024b4 <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    24b4:	2f 92       	push	r2
    24b6:	3f 92       	push	r3
    24b8:	4f 92       	push	r4
    24ba:	5f 92       	push	r5
    24bc:	6f 92       	push	r6
    24be:	7f 92       	push	r7
    24c0:	8f 92       	push	r8
    24c2:	9f 92       	push	r9
    24c4:	af 92       	push	r10
    24c6:	bf 92       	push	r11
    24c8:	cf 92       	push	r12
    24ca:	df 92       	push	r13
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    24d4:	e0 90 e3 04 	lds	r14, 0x04E3
    24d8:	f0 90 e4 04 	lds	r15, 0x04E4
    24dc:	00 91 e5 04 	lds	r16, 0x04E5
    24e0:	10 91 e6 04 	lds	r17, 0x04E6
    24e4:	33 24       	eor	r3, r3
    24e6:	c8 01       	movw	r24, r16
    24e8:	b7 01       	movw	r22, r14
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e0       	ldi	r20, 0x00	; 0
    24f0:	50 e0       	ldi	r21, 0x00	; 0
    24f2:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    24f6:	88 23       	and	r24, r24
    24f8:	14 f4       	brge	.+4      	; 0x24fe <moveWall+0x4a>
    24fa:	33 24       	eor	r3, r3
    24fc:	33 94       	inc	r3
    24fe:	a0 90 89 06 	lds	r10, 0x0689
    2502:	b0 90 8a 06 	lds	r11, 0x068A
    2506:	c0 90 8b 06 	lds	r12, 0x068B
    250a:	d0 90 8c 06 	lds	r13, 0x068C
    250e:	40 90 84 06 	lds	r4, 0x0684
    2512:	50 90 85 06 	lds	r5, 0x0685
    2516:	60 90 86 06 	lds	r6, 0x0686
    251a:	70 90 87 06 	lds	r7, 0x0687
    251e:	88 24       	eor	r8, r8
    2520:	60 91 ed 04 	lds	r22, 0x04ED
    2524:	70 91 ee 04 	lds	r23, 0x04EE
    2528:	80 91 ef 04 	lds	r24, 0x04EF
    252c:	90 91 f0 04 	lds	r25, 0x04F0
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	30 e0       	ldi	r19, 0x00	; 0
    2534:	40 e7       	ldi	r20, 0x70	; 112
    2536:	51 e4       	ldi	r21, 0x41	; 65
    2538:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    253c:	88 23       	and	r24, r24
    253e:	14 f4       	brge	.+4      	; 0x2544 <moveWall+0x90>
    2540:	88 24       	eor	r8, r8
    2542:	83 94       	inc	r8
    2544:	93 2c       	mov	r9, r3
    2546:	98 28       	or	r9, r8
    2548:	88 24       	eor	r8, r8
    254a:	c6 01       	movw	r24, r12
    254c:	b5 01       	movw	r22, r10
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e7       	ldi	r20, 0x70	; 112
    2554:	51 e4       	ldi	r21, 0x41	; 65
    2556:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    255a:	88 23       	and	r24, r24
    255c:	14 f4       	brge	.+4      	; 0x2562 <moveWall+0xae>
    255e:	88 24       	eor	r8, r8
    2560:	83 94       	inc	r8
    2562:	98 28       	or	r9, r8
    2564:	88 24       	eor	r8, r8
    2566:	c3 01       	movw	r24, r6
    2568:	b2 01       	movw	r22, r4
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e7       	ldi	r20, 0x70	; 112
    2570:	51 e4       	ldi	r21, 0x41	; 65
    2572:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    2576:	88 23       	and	r24, r24
    2578:	14 f4       	brge	.+4      	; 0x257e <moveWall+0xca>
    257a:	88 24       	eor	r8, r8
    257c:	83 94       	inc	r8
    257e:	29 2c       	mov	r2, r9
    2580:	28 28       	or	r2, r8
	if(!isWall){
    2582:	09 f0       	breq	.+2      	; 0x2586 <moveWall+0xd2>
    2584:	8a c0       	rjmp	.+276    	; 0x269a <moveWall+0x1e6>
	
		// Update odometry
		curr_step = STEPPER_get_nSteps();
    2586:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <STEPPER_get_nSteps>
    258a:	60 93 7c 06 	sts	0x067C, r22
    258e:	70 93 7d 06 	sts	0x067D, r23
    2592:	80 93 7e 06 	sts	0x067E, r24
    2596:	90 93 7f 06 	sts	0x067F, r25
		
		if(curr_step.left != 0){
    259a:	cb 01       	movw	r24, r22
    259c:	61 15       	cp	r22, r1
    259e:	71 05       	cpc	r23, r1
    25a0:	e1 f0       	breq	.+56     	; 0x25da <moveWall+0x126>
			odometryStepL += WALL_STEP - curr_step.left;
    25a2:	64 e1       	ldi	r22, 0x14	; 20
    25a4:	70 e0       	ldi	r23, 0x00	; 0
    25a6:	68 1b       	sub	r22, r24
    25a8:	79 0b       	sbc	r23, r25
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	90 e0       	ldi	r25, 0x00	; 0
    25ae:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__floatunsisf>
    25b2:	9b 01       	movw	r18, r22
    25b4:	ac 01       	movw	r20, r24
    25b6:	60 91 15 07 	lds	r22, 0x0715
    25ba:	70 91 16 07 	lds	r23, 0x0716
    25be:	80 91 17 07 	lds	r24, 0x0717
    25c2:	90 91 18 07 	lds	r25, 0x0718
    25c6:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    25ca:	60 93 15 07 	sts	0x0715, r22
    25ce:	70 93 16 07 	sts	0x0716, r23
    25d2:	80 93 17 07 	sts	0x0717, r24
    25d6:	90 93 18 07 	sts	0x0718, r25
		}
		if(curr_step.right != 0){
    25da:	80 91 7e 06 	lds	r24, 0x067E
    25de:	90 91 7f 06 	lds	r25, 0x067F
    25e2:	00 97       	sbiw	r24, 0x00	; 0
    25e4:	e1 f0       	breq	.+56     	; 0x261e <moveWall+0x16a>
			odometryStepR += WALL_STEP - curr_step.right;
    25e6:	64 e1       	ldi	r22, 0x14	; 20
    25e8:	70 e0       	ldi	r23, 0x00	; 0
    25ea:	68 1b       	sub	r22, r24
    25ec:	79 0b       	sbc	r23, r25
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__floatunsisf>
    25f6:	9b 01       	movw	r18, r22
    25f8:	ac 01       	movw	r20, r24
    25fa:	60 91 67 04 	lds	r22, 0x0467
    25fe:	70 91 68 04 	lds	r23, 0x0468
    2602:	80 91 69 04 	lds	r24, 0x0469
    2606:	90 91 6a 04 	lds	r25, 0x046A
    260a:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    260e:	60 93 67 04 	sts	0x0467, r22
    2612:	70 93 68 04 	sts	0x0468, r23
    2616:	80 93 69 04 	sts	0x0469, r24
    261a:	90 93 6a 04 	sts	0x046A, r25
		}
		
		STEPPER_set_steps(STEPPER_BOTH,0);
    261e:	82 e0       	ldi	r24, 0x02	; 2
    2620:	60 e0       	ldi	r22, 0x00	; 0
    2622:	70 e0       	ldi	r23, 0x00	; 0
    2624:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <STEPPER_set_steps>
	
		// Move with wall
		STEPPER_move_stnb( STEPPER_BOTH, 
    2628:	8d b7       	in	r24, 0x3d	; 61
    262a:	9e b7       	in	r25, 0x3e	; 62
    262c:	09 97       	sbiw	r24, 0x09	; 9
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	9e bf       	out	0x3e, r25	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	8d bf       	out	0x3d, r24	; 61
    2638:	ed b7       	in	r30, 0x3d	; 61
    263a:	fe b7       	in	r31, 0x3e	; 62
    263c:	31 96       	adiw	r30, 0x01	; 1
    263e:	84 e1       	ldi	r24, 0x14	; 20
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	ad b7       	in	r26, 0x3d	; 61
    2644:	be b7       	in	r27, 0x3e	; 62
    2646:	12 96       	adiw	r26, 0x02	; 2
    2648:	9c 93       	st	X, r25
    264a:	8e 93       	st	-X, r24
    264c:	11 97       	sbiw	r26, 0x01	; 1
    264e:	88 ec       	ldi	r24, 0xC8	; 200
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	93 83       	std	Z+3, r25	; 0x03
    2654:	82 83       	std	Z+2, r24	; 0x02
    2656:	82 ec       	ldi	r24, 0xC2	; 194
    2658:	91 e0       	ldi	r25, 0x01	; 1
    265a:	95 83       	std	Z+5, r25	; 0x05
    265c:	84 83       	std	Z+4, r24	; 0x04
    265e:	16 82       	std	Z+6, r1	; 0x06
    2660:	10 86       	std	Z+8, r1	; 0x08
    2662:	17 82       	std	Z+7, r1	; 0x07
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	62 e0       	ldi	r22, 0x02	; 2
    2668:	41 e0       	ldi	r20, 0x01	; 1
    266a:	24 e1       	ldi	r18, 0x14	; 20
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	08 ec       	ldi	r16, 0xC8	; 200
    2670:	10 e0       	ldi	r17, 0x00	; 0
    2672:	72 ec       	ldi	r23, 0xC2	; 194
    2674:	e7 2e       	mov	r14, r23
    2676:	71 e0       	ldi	r23, 0x01	; 1
    2678:	f7 2e       	mov	r15, r23
    267a:	cc 24       	eor	r12, r12
    267c:	aa 24       	eor	r10, r10
    267e:	bb 24       	eor	r11, r11
    2680:	88 24       	eor	r8, r8
    2682:	83 94       	inc	r8
    2684:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_move>
    2688:	ed b7       	in	r30, 0x3d	; 61
    268a:	fe b7       	in	r31, 0x3e	; 62
    268c:	39 96       	adiw	r30, 0x09	; 9
    268e:	0f b6       	in	r0, 0x3f	; 63
    2690:	f8 94       	cli
    2692:	fe bf       	out	0x3e, r31	; 62
    2694:	0f be       	out	0x3f, r0	; 63
    2696:	ed bf       	out	0x3d, r30	; 61
    2698:	48 c1       	rjmp	.+656    	; 0x292a <moveWall+0x476>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    269a:	c6 01       	movw	r24, r12
    269c:	b5 01       	movw	r22, r10
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e7       	ldi	r20, 0x70	; 112
    26a4:	51 e4       	ldi	r21, 0x41	; 65
    26a6:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__gesf2>
    26aa:	18 16       	cp	r1, r24
    26ac:	64 f4       	brge	.+24     	; 0x26c6 <moveWall+0x212>
		rtIR = IR_WALL_R_THRESH-18;
    26ae:	80 e0       	ldi	r24, 0x00	; 0
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e4       	ldi	r26, 0x40	; 64
    26b4:	b0 ec       	ldi	r27, 0xC0	; 192
    26b6:	80 93 89 06 	sts	0x0689, r24
    26ba:	90 93 8a 06 	sts	0x068A, r25
    26be:	a0 93 8b 06 	sts	0x068B, r26
    26c2:	b0 93 8c 06 	sts	0x068C, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    26c6:	c3 01       	movw	r24, r6
    26c8:	b2 01       	movw	r22, r4
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e7       	ldi	r20, 0x70	; 112
    26d0:	51 e4       	ldi	r21, 0x41	; 65
    26d2:	0e 94 c0 2f 	call	0x5f80	; 0x5f80 <__gesf2>
    26d6:	18 16       	cp	r1, r24
    26d8:	14 f0       	brlt	.+4      	; 0x26de <moveWall+0x22a>
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	0d c0       	rjmp	.+26     	; 0x26f8 <moveWall+0x244>
		ltIR = IR_WALL_L_THRESH-18;
    26de:	80 e0       	ldi	r24, 0x00	; 0
    26e0:	90 e0       	ldi	r25, 0x00	; 0
    26e2:	a0 e4       	ldi	r26, 0x40	; 64
    26e4:	b0 ec       	ldi	r27, 0xC0	; 192
    26e6:	80 93 84 06 	sts	0x0684, r24
    26ea:	90 93 85 06 	sts	0x0685, r25
    26ee:	a0 93 86 06 	sts	0x0686, r26
    26f2:	b0 93 87 06 	sts	0x0687, r27
    26f6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    26f8:	33 20       	and	r3, r3
    26fa:	21 f1       	breq	.+72     	; 0x2744 <moveWall+0x290>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    26fc:	88 23       	and	r24, r24
    26fe:	29 f0       	breq	.+10     	; 0x270a <moveWall+0x256>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2700:	60 e0       	ldi	r22, 0x00	; 0
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	8a e7       	ldi	r24, 0x7A	; 122
    2706:	94 e4       	ldi	r25, 0x44	; 68
    2708:	04 c0       	rjmp	.+8      	; 0x2712 <moveWall+0x25e>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    270a:	60 e0       	ldi	r22, 0x00	; 0
    270c:	70 e0       	ldi	r23, 0x00	; 0
    270e:	8a e7       	ldi	r24, 0x7A	; 122
    2710:	94 ec       	ldi	r25, 0xC4	; 196
    2712:	a8 01       	movw	r20, r16
    2714:	97 01       	movw	r18, r14
    2716:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    271a:	20 91 84 06 	lds	r18, 0x0684
    271e:	30 91 85 06 	lds	r19, 0x0685
    2722:	40 91 86 06 	lds	r20, 0x0686
    2726:	50 91 87 06 	lds	r21, 0x0687
    272a:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    272e:	9b 01       	movw	r18, r22
    2730:	ac 01       	movw	r20, r24
    2732:	60 91 89 06 	lds	r22, 0x0689
    2736:	70 91 8a 06 	lds	r23, 0x068A
    273a:	80 91 8b 06 	lds	r24, 0x068B
    273e:	90 91 8c 06 	lds	r25, 0x068C
    2742:	10 c0       	rjmp	.+32     	; 0x2764 <moveWall+0x2b0>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2744:	60 91 89 06 	lds	r22, 0x0689
    2748:	70 91 8a 06 	lds	r23, 0x068A
    274c:	80 91 8b 06 	lds	r24, 0x068B
    2750:	90 91 8c 06 	lds	r25, 0x068C
    2754:	20 91 84 06 	lds	r18, 0x0684
    2758:	30 91 85 06 	lds	r19, 0x0685
    275c:	40 91 86 06 	lds	r20, 0x0686
    2760:	50 91 87 06 	lds	r21, 0x0687
    2764:	0e 94 0c 2e 	call	0x5c18	; 0x5c18 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2768:	90 58       	subi	r25, 0x80	; 128
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2770:	6b 01       	movw	r12, r22
    2772:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2774:	0e 94 dd 2e 	call	0x5dba	; 0x5dba <__fixsfsi>
    2778:	8b 01       	movw	r16, r22
    277a:	77 ff       	sbrs	r23, 7
    277c:	03 c0       	rjmp	.+6      	; 0x2784 <moveWall+0x2d0>
    277e:	10 95       	com	r17
    2780:	01 95       	neg	r16
    2782:	1f 4f       	sbci	r17, 0xFF	; 255
    2784:	05 36       	cpi	r16, 0x65	; 101
    2786:	11 05       	cpc	r17, r1
    2788:	fc f0       	brlt	.+62     	; 0x27c8 <moveWall+0x314>
    278a:	c7 01       	movw	r24, r14
    278c:	b6 01       	movw	r22, r12
    278e:	20 e0       	ldi	r18, 0x00	; 0
    2790:	30 e0       	ldi	r19, 0x00	; 0
    2792:	40 e0       	ldi	r20, 0x00	; 0
    2794:	50 e0       	ldi	r21, 0x00	; 0
    2796:	0e 94 71 2e 	call	0x5ce2	; 0x5ce2 <__cmpsf2>
    279a:	88 23       	and	r24, r24
    279c:	a9 f0       	breq	.+42     	; 0x27c8 <moveWall+0x314>
		effort = MAX_EFFORT*(effort/abs(effort));
    279e:	b8 01       	movw	r22, r16
    27a0:	88 27       	eor	r24, r24
    27a2:	77 fd       	sbrc	r23, 7
    27a4:	80 95       	com	r24
    27a6:	98 2f       	mov	r25, r24
    27a8:	0e 94 10 2f 	call	0x5e20	; 0x5e20 <__floatsisf>
    27ac:	9b 01       	movw	r18, r22
    27ae:	ac 01       	movw	r20, r24
    27b0:	c7 01       	movw	r24, r14
    27b2:	b6 01       	movw	r22, r12
    27b4:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    27b8:	20 e0       	ldi	r18, 0x00	; 0
    27ba:	30 e0       	ldi	r19, 0x00	; 0
    27bc:	48 ec       	ldi	r20, 0xC8	; 200
    27be:	52 e4       	ldi	r21, 0x42	; 66
    27c0:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    27c4:	6b 01       	movw	r12, r22
    27c6:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    27c8:	c7 01       	movw	r24, r14
    27ca:	b6 01       	movw	r22, r12
    27cc:	20 e0       	ldi	r18, 0x00	; 0
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	48 ec       	ldi	r20, 0xC8	; 200
    27d2:	52 e4       	ldi	r21, 0x42	; 66
    27d4:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    27d8:	4b 01       	movw	r8, r22
    27da:	5c 01       	movw	r10, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
    27dc:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <STEPPER_get_nSteps>
    27e0:	60 93 7c 06 	sts	0x067C, r22
    27e4:	70 93 7d 06 	sts	0x067D, r23
    27e8:	80 93 7e 06 	sts	0x067E, r24
    27ec:	90 93 7f 06 	sts	0x067F, r25
	
	if(curr_step.left != 0){
    27f0:	cb 01       	movw	r24, r22
    27f2:	61 15       	cp	r22, r1
    27f4:	71 05       	cpc	r23, r1
    27f6:	e1 f0       	breq	.+56     	; 0x2830 <moveWall+0x37c>
		odometryStepL += WALL_STEP - (curr_step.left);
    27f8:	64 e1       	ldi	r22, 0x14	; 20
    27fa:	70 e0       	ldi	r23, 0x00	; 0
    27fc:	68 1b       	sub	r22, r24
    27fe:	79 0b       	sbc	r23, r25
    2800:	80 e0       	ldi	r24, 0x00	; 0
    2802:	90 e0       	ldi	r25, 0x00	; 0
    2804:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__floatunsisf>
    2808:	9b 01       	movw	r18, r22
    280a:	ac 01       	movw	r20, r24
    280c:	60 91 15 07 	lds	r22, 0x0715
    2810:	70 91 16 07 	lds	r23, 0x0716
    2814:	80 91 17 07 	lds	r24, 0x0717
    2818:	90 91 18 07 	lds	r25, 0x0718
    281c:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    2820:	60 93 15 07 	sts	0x0715, r22
    2824:	70 93 16 07 	sts	0x0716, r23
    2828:	80 93 17 07 	sts	0x0717, r24
    282c:	90 93 18 07 	sts	0x0718, r25
	}
	if(curr_step.right != 0){
    2830:	80 91 7e 06 	lds	r24, 0x067E
    2834:	90 91 7f 06 	lds	r25, 0x067F
    2838:	00 97       	sbiw	r24, 0x00	; 0
    283a:	e1 f0       	breq	.+56     	; 0x2874 <moveWall+0x3c0>
		odometryStepR += WALL_STEP - (curr_step.right);
    283c:	64 e1       	ldi	r22, 0x14	; 20
    283e:	70 e0       	ldi	r23, 0x00	; 0
    2840:	68 1b       	sub	r22, r24
    2842:	79 0b       	sbc	r23, r25
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__floatunsisf>
    284c:	9b 01       	movw	r18, r22
    284e:	ac 01       	movw	r20, r24
    2850:	60 91 67 04 	lds	r22, 0x0467
    2854:	70 91 68 04 	lds	r23, 0x0468
    2858:	80 91 69 04 	lds	r24, 0x0469
    285c:	90 91 6a 04 	lds	r25, 0x046A
    2860:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    2864:	60 93 67 04 	sts	0x0467, r22
    2868:	70 93 68 04 	sts	0x0468, r23
    286c:	80 93 69 04 	sts	0x0469, r24
    2870:	90 93 6a 04 	sts	0x046A, r25
	}
	
	STEPPER_set_steps(STEPPER_BOTH,0);
    2874:	82 e0       	ldi	r24, 0x02	; 2
    2876:	60 e0       	ldi	r22, 0x00	; 0
    2878:	70 e0       	ldi	r23, 0x00	; 0
    287a:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <STEPPER_set_steps>
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    287e:	8d b7       	in	r24, 0x3d	; 61
    2880:	9e b7       	in	r25, 0x3e	; 62
    2882:	09 97       	sbiw	r24, 0x09	; 9
    2884:	0f b6       	in	r0, 0x3f	; 63
    2886:	f8 94       	cli
    2888:	9e bf       	out	0x3e, r25	; 62
    288a:	0f be       	out	0x3f, r0	; 63
    288c:	8d bf       	out	0x3d, r24	; 61
    288e:	0d b7       	in	r16, 0x3d	; 61
    2890:	1e b7       	in	r17, 0x3e	; 62
    2892:	0f 5f       	subi	r16, 0xFF	; 255
    2894:	1f 4f       	sbci	r17, 0xFF	; 255
    2896:	c5 01       	movw	r24, r10
    2898:	b4 01       	movw	r22, r8
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	48 ec       	ldi	r20, 0xC8	; 200
    28a0:	52 e4       	ldi	r21, 0x42	; 66
    28a2:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    28a6:	20 e0       	ldi	r18, 0x00	; 0
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	48 ec       	ldi	r20, 0xC8	; 200
    28ac:	52 e4       	ldi	r21, 0x42	; 66
    28ae:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    28b2:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    28b6:	6b 01       	movw	r12, r22
    28b8:	7c 01       	movw	r14, r24
    28ba:	84 e1       	ldi	r24, 0x14	; 20
    28bc:	90 e0       	ldi	r25, 0x00	; 0
    28be:	d8 01       	movw	r26, r16
    28c0:	8d 93       	st	X+, r24
    28c2:	9c 93       	st	X, r25
    28c4:	c5 01       	movw	r24, r10
    28c6:	b4 01       	movw	r22, r8
    28c8:	20 e0       	ldi	r18, 0x00	; 0
    28ca:	30 e0       	ldi	r19, 0x00	; 0
    28cc:	48 ec       	ldi	r20, 0xC8	; 200
    28ce:	52 ec       	ldi	r21, 0xC2	; 194
    28d0:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	48 ec       	ldi	r20, 0xC8	; 200
    28da:	52 e4       	ldi	r21, 0x42	; 66
    28dc:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__addsf3>
    28e0:	0e 94 e2 2e 	call	0x5dc4	; 0x5dc4 <__fixunssfsi>
    28e4:	f8 01       	movw	r30, r16
    28e6:	73 83       	std	Z+3, r23	; 0x03
    28e8:	62 83       	std	Z+2, r22	; 0x02
    28ea:	82 ec       	ldi	r24, 0xC2	; 194
    28ec:	91 e0       	ldi	r25, 0x01	; 1
    28ee:	95 83       	std	Z+5, r25	; 0x05
    28f0:	84 83       	std	Z+4, r24	; 0x04
    28f2:	16 82       	std	Z+6, r1	; 0x06
    28f4:	10 86       	std	Z+8, r1	; 0x08
    28f6:	17 82       	std	Z+7, r1	; 0x07
    28f8:	81 e0       	ldi	r24, 0x01	; 1
    28fa:	62 e0       	ldi	r22, 0x02	; 2
    28fc:	41 e0       	ldi	r20, 0x01	; 1
    28fe:	24 e1       	ldi	r18, 0x14	; 20
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	86 01       	movw	r16, r12
    2904:	52 ec       	ldi	r21, 0xC2	; 194
    2906:	e5 2e       	mov	r14, r21
    2908:	51 e0       	ldi	r21, 0x01	; 1
    290a:	f5 2e       	mov	r15, r21
    290c:	cc 24       	eor	r12, r12
    290e:	aa 24       	eor	r10, r10
    2910:	bb 24       	eor	r11, r11
    2912:	88 24       	eor	r8, r8
    2914:	83 94       	inc	r8
    2916:	0e 94 36 1e 	call	0x3c6c	; 0x3c6c <STEPPER_move>
    291a:	8d b7       	in	r24, 0x3d	; 61
    291c:	9e b7       	in	r25, 0x3e	; 62
    291e:	09 96       	adiw	r24, 0x09	; 9
    2920:	0f b6       	in	r0, 0x3f	; 63
    2922:	f8 94       	cli
    2924:	9e bf       	out	0x3e, r25	; 62
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    292a:	82 2d       	mov	r24, r2
    292c:	1f 91       	pop	r17
    292e:	0f 91       	pop	r16
    2930:	ff 90       	pop	r15
    2932:	ef 90       	pop	r14
    2934:	df 90       	pop	r13
    2936:	cf 90       	pop	r12
    2938:	bf 90       	pop	r11
    293a:	af 90       	pop	r10
    293c:	9f 90       	pop	r9
    293e:	8f 90       	pop	r8
    2940:	7f 90       	pop	r7
    2942:	6f 90       	pop	r6
    2944:	5f 90       	pop	r5
    2946:	4f 90       	pop	r4
    2948:	3f 90       	pop	r3
    294a:	2f 90       	pop	r2
    294c:	08 95       	ret

0000294e <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    294e:	ff 92       	push	r15
    2950:	0f 93       	push	r16
    2952:	1f 93       	push	r17
    2954:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    2956:	08 2f       	mov	r16, r24
    2958:	06 95       	lsr	r16
    295a:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;
    295c:	e3 e0       	ldi	r30, 0x03	; 3
    295e:	fe 2e       	mov	r15, r30
    2960:	f8 22       	and	r15, r24
		
	// // Git the currrent orientation of the robot
	// unsigned char curOrient = currentOrientation;
			
		
	switch(curMove){
    2962:	62 30       	cpi	r22, 0x02	; 2
    2964:	31 f0       	breq	.+12     	; 0x2972 <shiftMap+0x24>
    2966:	63 30       	cpi	r22, 0x03	; 3
    2968:	a9 f0       	breq	.+42     	; 0x2994 <shiftMap+0x46>
    296a:	61 30       	cpi	r22, 0x01	; 1
    296c:	b1 f4       	brne	.+44     	; 0x299a <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    296e:	11 50       	subi	r17, 0x01	; 1
    2970:	12 c0       	rjmp	.+36     	; 0x2996 <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    2972:	41 30       	cpi	r20, 0x01	; 1
    2974:	49 f0       	breq	.+18     	; 0x2988 <shiftMap+0x3a>
    2976:	41 30       	cpi	r20, 0x01	; 1
    2978:	28 f0       	brcs	.+10     	; 0x2984 <shiftMap+0x36>
    297a:	42 30       	cpi	r20, 0x02	; 2
    297c:	39 f0       	breq	.+14     	; 0x298c <shiftMap+0x3e>
    297e:	43 30       	cpi	r20, 0x03	; 3
    2980:	b9 f4       	brne	.+46     	; 0x29b0 <shiftMap+0x62>
    2982:	06 c0       	rjmp	.+12     	; 0x2990 <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    2984:	01 50       	subi	r16, 0x01	; 1
    2986:	14 c0       	rjmp	.+40     	; 0x29b0 <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    2988:	f3 94       	inc	r15
    298a:	12 c0       	rjmp	.+36     	; 0x29b0 <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    298c:	0f 5f       	subi	r16, 0xFF	; 255
    298e:	10 c0       	rjmp	.+32     	; 0x29b0 <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    2990:	fa 94       	dec	r15
    2992:	0e c0       	rjmp	.+28     	; 0x29b0 <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    2994:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    2996:	13 70       	andi	r17, 0x03	; 3
    2998:	0b c0       	rjmp	.+22     	; 0x29b0 <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    299a:	00 d0       	rcall	.+0      	; 0x299c <shiftMap+0x4e>
    299c:	84 e4       	ldi	r24, 0x44	; 68
    299e:	91 e0       	ldi	r25, 0x01	; 1
    29a0:	ed b7       	in	r30, 0x3d	; 61
    29a2:	fe b7       	in	r31, 0x3e	; 62
    29a4:	92 83       	std	Z+2, r25	; 0x02
    29a6:	81 83       	std	Z+1, r24	; 0x01
    29a8:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    29b0:	10 93 7f 05 	sts	0x057F, r17
    29b4:	00 0f       	add	r16, r16
    29b6:	00 0f       	add	r16, r16
	return currentCell;
}
    29b8:	80 2f       	mov	r24, r16
    29ba:	8f 0d       	add	r24, r15
    29bc:	1f 91       	pop	r17
    29be:	0f 91       	pop	r16
    29c0:	ff 90       	pop	r15
    29c2:	08 95       	ret

000029c4 <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    29c4:	8f 92       	push	r8
    29c6:	af 92       	push	r10
    29c8:	bf 92       	push	r11
    29ca:	cf 92       	push	r12
    29cc:	df 92       	push	r13
    29ce:	ef 92       	push	r14
    29d0:	ff 92       	push	r15
    29d2:	0f 93       	push	r16
    29d4:	1f 93       	push	r17
	switch(currentMove){
    29d6:	80 91 19 07 	lds	r24, 0x0719
    29da:	82 30       	cpi	r24, 0x02	; 2
    29dc:	69 f0       	breq	.+26     	; 0x29f8 <moveMap+0x34>
    29de:	83 30       	cpi	r24, 0x03	; 3
    29e0:	a1 f0       	breq	.+40     	; 0x2a0a <moveMap+0x46>
    29e2:	81 30       	cpi	r24, 0x01	; 1
    29e4:	51 f5       	brne	.+84     	; 0x2a3a <moveMap+0x76>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    29e6:	60 e0       	ldi	r22, 0x00	; 0
    29e8:	70 e0       	ldi	r23, 0x00	; 0
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	90 e0       	ldi	r25, 0x00	; 0
    29ee:	20 e0       	ldi	r18, 0x00	; 0
    29f0:	30 e0       	ldi	r19, 0x00	; 0
    29f2:	4c e8       	ldi	r20, 0x8C	; 140
    29f4:	51 ec       	ldi	r21, 0xC1	; 193
    29f6:	11 c0       	rjmp	.+34     	; 0x2a1a <moveMap+0x56>
			// while(!odometryFlag){
				// moveWall();
				// checkOdometry(0);
			// }
			
			move_arc_stwt(NO_TURN, 45, 10, 10, 0);
    29f8:	60 e0       	ldi	r22, 0x00	; 0
    29fa:	70 e0       	ldi	r23, 0x00	; 0
    29fc:	80 e0       	ldi	r24, 0x00	; 0
    29fe:	9f e4       	ldi	r25, 0x4F	; 79
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	44 e3       	ldi	r20, 0x34	; 52
    2a06:	52 e4       	ldi	r21, 0x42	; 66
    2a08:	08 c0       	rjmp	.+16     	; 0x2a1a <moveMap+0x56>
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2a0a:	60 e0       	ldi	r22, 0x00	; 0
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	80 e0       	ldi	r24, 0x00	; 0
    2a10:	90 e0       	ldi	r25, 0x00	; 0
    2a12:	20 e0       	ldi	r18, 0x00	; 0
    2a14:	30 e0       	ldi	r19, 0x00	; 0
    2a16:	4c e8       	ldi	r20, 0x8C	; 140
    2a18:	51 e4       	ldi	r21, 0x41	; 65
    2a1a:	0f 2e       	mov	r0, r31
    2a1c:	f0 e0       	ldi	r31, 0x00	; 0
    2a1e:	ef 2e       	mov	r14, r31
    2a20:	f0 e0       	ldi	r31, 0x00	; 0
    2a22:	ff 2e       	mov	r15, r31
    2a24:	f0 e2       	ldi	r31, 0x20	; 32
    2a26:	0f 2f       	mov	r16, r31
    2a28:	f1 e4       	ldi	r31, 0x41	; 65
    2a2a:	1f 2f       	mov	r17, r31
    2a2c:	f0 2d       	mov	r31, r0
    2a2e:	57 01       	movw	r10, r14
    2a30:	68 01       	movw	r12, r16
    2a32:	88 24       	eor	r8, r8
    2a34:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2a38:	0b c0       	rjmp	.+22     	; 0x2a50 <moveMap+0x8c>
			break;
		default:
			LCD_printf("Whatz2?!");
    2a3a:	00 d0       	rcall	.+0      	; 0x2a3c <moveMap+0x78>
    2a3c:	8d e4       	ldi	r24, 0x4D	; 77
    2a3e:	91 e0       	ldi	r25, 0x01	; 1
    2a40:	ed b7       	in	r30, 0x3d	; 61
    2a42:	fe b7       	in	r31, 0x3e	; 62
    2a44:	92 83       	std	Z+2, r25	; 0x02
    2a46:	81 83       	std	Z+1, r24	; 0x01
    2a48:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    2a4c:	0f 90       	pop	r0
    2a4e:	0f 90       	pop	r0
			break;
	}
}
    2a50:	1f 91       	pop	r17
    2a52:	0f 91       	pop	r16
    2a54:	ff 90       	pop	r15
    2a56:	ef 90       	pop	r14
    2a58:	df 90       	pop	r13
    2a5a:	cf 90       	pop	r12
    2a5c:	bf 90       	pop	r11
    2a5e:	af 90       	pop	r10
    2a60:	8f 90       	pop	r8
    2a62:	08 95       	ret

00002a64 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    2a64:	80 91 eb 04 	lds	r24, 0x04EB
    2a68:	80 fd       	sbrc	r24, 0
    2a6a:	02 c0       	rjmp	.+4      	; 0x2a70 <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	05 c0       	rjmp	.+10     	; 0x2a7a <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    2a70:	83 fd       	sbrc	r24, 3
    2a72:	02 c0       	rjmp	.+4      	; 0x2a78 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    2a74:	82 e0       	ldi	r24, 0x02	; 2
    2a76:	01 c0       	rjmp	.+2      	; 0x2a7a <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    2a78:	83 e0       	ldi	r24, 0x03	; 3
    2a7a:	80 93 19 07 	sts	0x0719, r24
	}
	
	switch(oldMove){
    2a7e:	80 91 1a 07 	lds	r24, 0x071A
    2a82:	81 30       	cpi	r24, 0x01	; 1
    2a84:	29 f0       	breq	.+10     	; 0x2a90 <planMap+0x2c>
    2a86:	81 30       	cpi	r24, 0x01	; 1
    2a88:	38 f0       	brcs	.+14     	; 0x2a98 <planMap+0x34>
    2a8a:	84 30       	cpi	r24, 0x04	; 4
    2a8c:	28 f4       	brcc	.+10     	; 0x2a98 <planMap+0x34>
    2a8e:	0f c0       	rjmp	.+30     	; 0x2aae <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    2a90:	82 e0       	ldi	r24, 0x02	; 2
    2a92:	80 93 19 07 	sts	0x0719, r24
    2a96:	0b c0       	rjmp	.+22     	; 0x2aae <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    2a98:	00 d0       	rcall	.+0      	; 0x2a9a <planMap+0x36>
    2a9a:	86 e5       	ldi	r24, 0x56	; 86
    2a9c:	91 e0       	ldi	r25, 0x01	; 1
    2a9e:	ed b7       	in	r30, 0x3d	; 61
    2aa0:	fe b7       	in	r31, 0x3e	; 62
    2aa2:	92 83       	std	Z+2, r25	; 0x02
    2aa4:	81 83       	std	Z+1, r24	; 0x01
    2aa6:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    2aaa:	0f 90       	pop	r0
    2aac:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    2aae:	80 91 19 07 	lds	r24, 0x0719
    2ab2:	80 93 1a 07 	sts	0x071A, r24
}
    2ab6:	08 95       	ret

00002ab8 <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
    2ab8:	80 91 e9 03 	lds	r24, 0x03E9
    2abc:	85 30       	cpi	r24, 0x05	; 5
    2abe:	80 f0       	brcs	.+32     	; 0x2ae0 <planGateway+0x28>
    2ac0:	ea ed       	ldi	r30, 0xDA	; 218
    2ac2:	f3 e0       	ldi	r31, 0x03	; 3
		for(i = 0; i<=(BRANCH_MAX-1); i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    2ac4:	81 81       	ldd	r24, Z+1	; 0x01
    2ac6:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    2ac8:	86 81       	ldd	r24, Z+6	; 0x06
    2aca:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2acc:	83 85       	ldd	r24, Z+11	; 0x0b
    2ace:	82 87       	std	Z+10, r24	; 0x0a
    2ad0:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
		for(i = 0; i<=(BRANCH_MAX-1); i++){
    2ad2:	83 e0       	ldi	r24, 0x03	; 3
    2ad4:	ef 3d       	cpi	r30, 0xDF	; 223
    2ad6:	f8 07       	cpc	r31, r24
    2ad8:	a9 f7       	brne	.-22     	; 0x2ac4 <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    2ada:	84 e0       	ldi	r24, 0x04	; 4
    2adc:	80 93 e9 03 	sts	0x03E9, r24
	}
	
	// Decide what the current move should be
	planMap();
    2ae0:	0e 94 32 15 	call	0x2a64	; 0x2a64 <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    2ae4:	e0 91 e9 03 	lds	r30, 0x03E9
    2ae8:	f0 e0       	ldi	r31, 0x00	; 0
    2aea:	e6 52       	subi	r30, 0x26	; 38
    2aec:	fc 4f       	sbci	r31, 0xFC	; 252
    2aee:	80 91 eb 04 	lds	r24, 0x04EB
    2af2:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    2af4:	90 91 19 07 	lds	r25, 0x0719
    2af8:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    2afa:	80 91 7f 05 	lds	r24, 0x057F
    2afe:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    2b00:	91 30       	cpi	r25, 0x01	; 1
    2b02:	19 f0       	breq	.+6      	; 0x2b0a <planGateway+0x52>
    2b04:	93 30       	cpi	r25, 0x03	; 3
    2b06:	41 f4       	brne	.+16     	; 0x2b18 <planGateway+0x60>
    2b08:	02 c0       	rjmp	.+4      	; 0x2b0e <planGateway+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    2b0a:	81 50       	subi	r24, 0x01	; 1
    2b0c:	01 c0       	rjmp	.+2      	; 0x2b10 <planGateway+0x58>
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    2b0e:	8f 5f       	subi	r24, 0xFF	; 255
    2b10:	83 70       	andi	r24, 0x03	; 3
    2b12:	80 93 7f 05 	sts	0x057F, r24
    2b16:	0b c0       	rjmp	.+22     	; 0x2b2e <planGateway+0x76>
			break;
		default:
			LCD_printf("Whatz2?!");
    2b18:	00 d0       	rcall	.+0      	; 0x2b1a <planGateway+0x62>
    2b1a:	8d e4       	ldi	r24, 0x4D	; 77
    2b1c:	91 e0       	ldi	r25, 0x01	; 1
    2b1e:	ed b7       	in	r30, 0x3d	; 61
    2b20:	fe b7       	in	r31, 0x3e	; 62
    2b22:	92 83       	std	Z+2, r25	; 0x02
    2b24:	81 83       	std	Z+1, r24	; 0x01
    2b26:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    2b2a:	0f 90       	pop	r0
    2b2c:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    2b2e:	80 91 e9 03 	lds	r24, 0x03E9
    2b32:	8f 5f       	subi	r24, 0xFF	; 255
    2b34:	80 93 e9 03 	sts	0x03E9, r24
}
    2b38:	08 95       	ret

00002b3a <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    2b3a:	8f 92       	push	r8
    2b3c:	af 92       	push	r10
    2b3e:	bf 92       	push	r11
    2b40:	cf 92       	push	r12
    2b42:	df 92       	push	r13
    2b44:	ef 92       	push	r14
    2b46:	ff 92       	push	r15
    2b48:	0f 93       	push	r16
    2b4a:	1f 93       	push	r17
	LCD_clear();
    2b4c:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    2b50:	e0 91 ec 04 	lds	r30, 0x04EC
    2b54:	f0 e0       	ldi	r31, 0x00	; 0
    2b56:	e2 59       	subi	r30, 0x92	; 146
    2b58:	fa 4f       	sbci	r31, 0xFA	; 250
    2b5a:	e0 81       	ld	r30, Z
    2b5c:	e0 93 19 07 	sts	0x0719, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    2b60:	80 e0       	ldi	r24, 0x00	; 0
    2b62:	e1 30       	cpi	r30, 0x01	; 1
    2b64:	09 f4       	brne	.+2      	; 0x2b68 <moveWorld+0x2e>
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	e3 30       	cpi	r30, 0x03	; 3
    2b6c:	09 f4       	brne	.+2      	; 0x2b70 <moveWorld+0x36>
    2b6e:	91 e0       	ldi	r25, 0x01	; 1
    2b70:	89 2b       	or	r24, r25
    2b72:	28 2f       	mov	r18, r24
    2b74:	30 e0       	ldi	r19, 0x00	; 0
    2b76:	40 e0       	ldi	r20, 0x00	; 0
    2b78:	50 e0       	ldi	r21, 0x00	; 0
    2b7a:	80 91 1a 07 	lds	r24, 0x071A
    2b7e:	82 30       	cpi	r24, 0x02	; 2
    2b80:	11 f4       	brne	.+4      	; 0x2b86 <moveWorld+0x4c>
    2b82:	41 e0       	ldi	r20, 0x01	; 1
    2b84:	50 e0       	ldi	r21, 0x00	; 0
    2b86:	24 23       	and	r18, r20
    2b88:	35 23       	and	r19, r21
    2b8a:	23 2b       	or	r18, r19
    2b8c:	b9 f0       	breq	.+46     	; 0x2bbc <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.5/5.0), 10, 10, 0);		
    2b8e:	60 e0       	ldi	r22, 0x00	; 0
    2b90:	70 e0       	ldi	r23, 0x00	; 0
    2b92:	80 e0       	ldi	r24, 0x00	; 0
    2b94:	9f e4       	ldi	r25, 0x4F	; 79
    2b96:	28 e4       	ldi	r18, 0x48	; 72
    2b98:	31 ee       	ldi	r19, 0xE1	; 225
    2b9a:	46 eb       	ldi	r20, 0xB6	; 182
    2b9c:	51 e4       	ldi	r21, 0x41	; 65
    2b9e:	0f 2e       	mov	r0, r31
    2ba0:	f0 e0       	ldi	r31, 0x00	; 0
    2ba2:	ef 2e       	mov	r14, r31
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	ff 2e       	mov	r15, r31
    2ba8:	f0 e2       	ldi	r31, 0x20	; 32
    2baa:	0f 2f       	mov	r16, r31
    2bac:	f1 e4       	ldi	r31, 0x41	; 65
    2bae:	1f 2f       	mov	r17, r31
    2bb0:	f0 2d       	mov	r31, r0
    2bb2:	57 01       	movw	r10, r14
    2bb4:	68 01       	movw	r12, r16
    2bb6:	88 24       	eor	r8, r8
    2bb8:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    2bbc:	20 91 1a 07 	lds	r18, 0x071A
    2bc0:	80 e0       	ldi	r24, 0x00	; 0
    2bc2:	21 30       	cpi	r18, 0x01	; 1
    2bc4:	09 f4       	brne	.+2      	; 0x2bc8 <moveWorld+0x8e>
    2bc6:	81 e0       	ldi	r24, 0x01	; 1
    2bc8:	90 e0       	ldi	r25, 0x00	; 0
    2bca:	23 30       	cpi	r18, 0x03	; 3
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <moveWorld+0x96>
    2bce:	91 e0       	ldi	r25, 0x01	; 1
    2bd0:	89 2b       	or	r24, r25
    2bd2:	28 2f       	mov	r18, r24
    2bd4:	30 e0       	ldi	r19, 0x00	; 0
    2bd6:	40 e0       	ldi	r20, 0x00	; 0
    2bd8:	50 e0       	ldi	r21, 0x00	; 0
    2bda:	80 91 19 07 	lds	r24, 0x0719
    2bde:	82 30       	cpi	r24, 0x02	; 2
    2be0:	11 f4       	brne	.+4      	; 0x2be6 <moveWorld+0xac>
    2be2:	41 e0       	ldi	r20, 0x01	; 1
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	24 23       	and	r18, r20
    2be8:	35 23       	and	r19, r21
    2bea:	23 2b       	or	r18, r19
    2bec:	b9 f0       	breq	.+46     	; 0x2c1c <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.2/5.0), 10, 10, 0);		
    2bee:	60 e0       	ldi	r22, 0x00	; 0
    2bf0:	70 e0       	ldi	r23, 0x00	; 0
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	9f e4       	ldi	r25, 0x4F	; 79
    2bf6:	25 e3       	ldi	r18, 0x35	; 53
    2bf8:	3f ee       	ldi	r19, 0xEF	; 239
    2bfa:	40 ea       	ldi	r20, 0xA0	; 160
    2bfc:	51 e4       	ldi	r21, 0x41	; 65
    2bfe:	0f 2e       	mov	r0, r31
    2c00:	f0 e0       	ldi	r31, 0x00	; 0
    2c02:	ef 2e       	mov	r14, r31
    2c04:	f0 e0       	ldi	r31, 0x00	; 0
    2c06:	ff 2e       	mov	r15, r31
    2c08:	f0 e2       	ldi	r31, 0x20	; 32
    2c0a:	0f 2f       	mov	r16, r31
    2c0c:	f1 e4       	ldi	r31, 0x41	; 65
    2c0e:	1f 2f       	mov	r17, r31
    2c10:	f0 2d       	mov	r31, r0
    2c12:	57 01       	movw	r10, r14
    2c14:	68 01       	movw	r12, r16
    2c16:	88 24       	eor	r8, r8
    2c18:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	switch(currentMove){
    2c1c:	80 91 19 07 	lds	r24, 0x0719
    2c20:	82 30       	cpi	r24, 0x02	; 2
    2c22:	c1 f1       	breq	.+112    	; 0x2c94 <moveWorld+0x15a>
    2c24:	83 30       	cpi	r24, 0x03	; 3
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <moveWorld+0xf0>
    2c28:	61 c0       	rjmp	.+194    	; 0x2cec <moveWorld+0x1b2>
    2c2a:	81 30       	cpi	r24, 0x01	; 1
    2c2c:	09 f0       	breq	.+2      	; 0x2c30 <moveWorld+0xf6>
    2c2e:	9f c0       	rjmp	.+318    	; 0x2d6e <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2c30:	8d b7       	in	r24, 0x3d	; 61
    2c32:	9e b7       	in	r25, 0x3e	; 62
    2c34:	08 97       	sbiw	r24, 0x08	; 8
    2c36:	0f b6       	in	r0, 0x3f	; 63
    2c38:	f8 94       	cli
    2c3a:	9e bf       	out	0x3e, r25	; 62
    2c3c:	0f be       	out	0x3f, r0	; 63
    2c3e:	8d bf       	out	0x3d, r24	; 61
    2c40:	ed b7       	in	r30, 0x3d	; 61
    2c42:	fe b7       	in	r31, 0x3e	; 62
    2c44:	31 96       	adiw	r30, 0x01	; 1
    2c46:	8f e5       	ldi	r24, 0x5F	; 95
    2c48:	91 e0       	ldi	r25, 0x01	; 1
    2c4a:	ad b7       	in	r26, 0x3d	; 61
    2c4c:	be b7       	in	r27, 0x3e	; 62
    2c4e:	12 96       	adiw	r26, 0x02	; 2
    2c50:	9c 93       	st	X, r25
    2c52:	8e 93       	st	-X, r24
    2c54:	11 97       	sbiw	r26, 0x01	; 1
    2c56:	80 91 ec 04 	lds	r24, 0x04EC
    2c5a:	82 83       	std	Z+2, r24	; 0x02
    2c5c:	13 82       	std	Z+3, r1	; 0x03
    2c5e:	80 91 eb 04 	lds	r24, 0x04EB
    2c62:	84 83       	std	Z+4, r24	; 0x04
    2c64:	15 82       	std	Z+5, r1	; 0x05
    2c66:	80 91 f1 04 	lds	r24, 0x04F1
    2c6a:	86 83       	std	Z+6, r24	; 0x06
    2c6c:	17 82       	std	Z+7, r1	; 0x07
    2c6e:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2c72:	ed b7       	in	r30, 0x3d	; 61
    2c74:	fe b7       	in	r31, 0x3e	; 62
    2c76:	38 96       	adiw	r30, 0x08	; 8
    2c78:	0f b6       	in	r0, 0x3f	; 63
    2c7a:	f8 94       	cli
    2c7c:	fe bf       	out	0x3e, r31	; 62
    2c7e:	0f be       	out	0x3f, r0	; 63
    2c80:	ed bf       	out	0x3d, r30	; 61
    2c82:	60 e0       	ldi	r22, 0x00	; 0
    2c84:	70 e0       	ldi	r23, 0x00	; 0
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	20 e0       	ldi	r18, 0x00	; 0
    2c8c:	30 e0       	ldi	r19, 0x00	; 0
    2c8e:	4c e8       	ldi	r20, 0x8C	; 140
    2c90:	51 ec       	ldi	r21, 0xC1	; 193
    2c92:	5d c0       	rjmp	.+186    	; 0x2d4e <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2c94:	8d b7       	in	r24, 0x3d	; 61
    2c96:	9e b7       	in	r25, 0x3e	; 62
    2c98:	08 97       	sbiw	r24, 0x08	; 8
    2c9a:	0f b6       	in	r0, 0x3f	; 63
    2c9c:	f8 94       	cli
    2c9e:	9e bf       	out	0x3e, r25	; 62
    2ca0:	0f be       	out	0x3f, r0	; 63
    2ca2:	8d bf       	out	0x3d, r24	; 61
    2ca4:	ed b7       	in	r30, 0x3d	; 61
    2ca6:	fe b7       	in	r31, 0x3e	; 62
    2ca8:	31 96       	adiw	r30, 0x01	; 1
    2caa:	8a e8       	ldi	r24, 0x8A	; 138
    2cac:	91 e0       	ldi	r25, 0x01	; 1
    2cae:	ad b7       	in	r26, 0x3d	; 61
    2cb0:	be b7       	in	r27, 0x3e	; 62
    2cb2:	12 96       	adiw	r26, 0x02	; 2
    2cb4:	9c 93       	st	X, r25
    2cb6:	8e 93       	st	-X, r24
    2cb8:	11 97       	sbiw	r26, 0x01	; 1
    2cba:	80 91 ec 04 	lds	r24, 0x04EC
    2cbe:	82 83       	std	Z+2, r24	; 0x02
    2cc0:	13 82       	std	Z+3, r1	; 0x03
    2cc2:	80 91 eb 04 	lds	r24, 0x04EB
    2cc6:	84 83       	std	Z+4, r24	; 0x04
    2cc8:	15 82       	std	Z+5, r1	; 0x05
    2cca:	80 91 f1 04 	lds	r24, 0x04F1
    2cce:	86 83       	std	Z+6, r24	; 0x06
    2cd0:	17 82       	std	Z+7, r1	; 0x07
    2cd2:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWallOld();
    2cd6:	ed b7       	in	r30, 0x3d	; 61
    2cd8:	fe b7       	in	r31, 0x3e	; 62
    2cda:	38 96       	adiw	r30, 0x08	; 8
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	fe bf       	out	0x3e, r31	; 62
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	ed bf       	out	0x3d, r30	; 61
    2ce6:	0e 94 d9 10 	call	0x21b2	; 0x21b2 <moveWallOld>
    2cea:	53 c0       	rjmp	.+166    	; 0x2d92 <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2cec:	8d b7       	in	r24, 0x3d	; 61
    2cee:	9e b7       	in	r25, 0x3e	; 62
    2cf0:	08 97       	sbiw	r24, 0x08	; 8
    2cf2:	0f b6       	in	r0, 0x3f	; 63
    2cf4:	f8 94       	cli
    2cf6:	9e bf       	out	0x3e, r25	; 62
    2cf8:	0f be       	out	0x3f, r0	; 63
    2cfa:	8d bf       	out	0x3d, r24	; 61
    2cfc:	ed b7       	in	r30, 0x3d	; 61
    2cfe:	fe b7       	in	r31, 0x3e	; 62
    2d00:	31 96       	adiw	r30, 0x01	; 1
    2d02:	88 eb       	ldi	r24, 0xB8	; 184
    2d04:	91 e0       	ldi	r25, 0x01	; 1
    2d06:	ad b7       	in	r26, 0x3d	; 61
    2d08:	be b7       	in	r27, 0x3e	; 62
    2d0a:	12 96       	adiw	r26, 0x02	; 2
    2d0c:	9c 93       	st	X, r25
    2d0e:	8e 93       	st	-X, r24
    2d10:	11 97       	sbiw	r26, 0x01	; 1
    2d12:	80 91 ec 04 	lds	r24, 0x04EC
    2d16:	82 83       	std	Z+2, r24	; 0x02
    2d18:	13 82       	std	Z+3, r1	; 0x03
    2d1a:	80 91 eb 04 	lds	r24, 0x04EB
    2d1e:	84 83       	std	Z+4, r24	; 0x04
    2d20:	15 82       	std	Z+5, r1	; 0x05
    2d22:	80 91 f1 04 	lds	r24, 0x04F1
    2d26:	86 83       	std	Z+6, r24	; 0x06
    2d28:	17 82       	std	Z+7, r1	; 0x07
    2d2a:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2d2e:	ed b7       	in	r30, 0x3d	; 61
    2d30:	fe b7       	in	r31, 0x3e	; 62
    2d32:	38 96       	adiw	r30, 0x08	; 8
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	fe bf       	out	0x3e, r31	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	ed bf       	out	0x3d, r30	; 61
    2d3e:	60 e0       	ldi	r22, 0x00	; 0
    2d40:	70 e0       	ldi	r23, 0x00	; 0
    2d42:	80 e0       	ldi	r24, 0x00	; 0
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	4c e8       	ldi	r20, 0x8C	; 140
    2d4c:	51 e4       	ldi	r21, 0x41	; 65
    2d4e:	0f 2e       	mov	r0, r31
    2d50:	f0 e0       	ldi	r31, 0x00	; 0
    2d52:	ef 2e       	mov	r14, r31
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	ff 2e       	mov	r15, r31
    2d58:	f0 e2       	ldi	r31, 0x20	; 32
    2d5a:	0f 2f       	mov	r16, r31
    2d5c:	f1 e4       	ldi	r31, 0x41	; 65
    2d5e:	1f 2f       	mov	r17, r31
    2d60:	f0 2d       	mov	r31, r0
    2d62:	57 01       	movw	r10, r14
    2d64:	68 01       	movw	r12, r16
    2d66:	88 24       	eor	r8, r8
    2d68:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2d6c:	12 c0       	rjmp	.+36     	; 0x2d92 <moveWorld+0x258>
			break;
		default:
			LCD_printf("Whatz4?!");
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <moveWorld+0x236>
    2d70:	84 ee       	ldi	r24, 0xE4	; 228
    2d72:	91 e0       	ldi	r25, 0x01	; 1
    2d74:	ad b7       	in	r26, 0x3d	; 61
    2d76:	be b7       	in	r27, 0x3e	; 62
    2d78:	12 96       	adiw	r26, 0x02	; 2
    2d7a:	9c 93       	st	X, r25
    2d7c:	8e 93       	st	-X, r24
    2d7e:	11 97       	sbiw	r26, 0x01	; 1
    2d80:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    2d84:	0f 90       	pop	r0
    2d86:	0f 90       	pop	r0
    2d88:	82 e0       	ldi	r24, 0x02	; 2
    2d8a:	60 e0       	ldi	r22, 0x00	; 0
    2d8c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <STEPPER_stop>
    2d90:	ff cf       	rjmp	.-2      	; 0x2d90 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    2d92:	80 91 19 07 	lds	r24, 0x0719
    2d96:	80 93 1a 07 	sts	0x071A, r24
	return 1;
}
    2d9a:	81 e0       	ldi	r24, 0x01	; 1
    2d9c:	1f 91       	pop	r17
    2d9e:	0f 91       	pop	r16
    2da0:	ff 90       	pop	r15
    2da2:	ef 90       	pop	r14
    2da4:	df 90       	pop	r13
    2da6:	cf 90       	pop	r12
    2da8:	bf 90       	pop	r11
    2daa:	af 90       	pop	r10
    2dac:	8f 90       	pop	r8
    2dae:	08 95       	ret

00002db0 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    2db0:	ff 92       	push	r15
    2db2:	0f 93       	push	r16
    2db4:	1f 93       	push	r17
    2db6:	cf 93       	push	r28
    2db8:	df 93       	push	r29
    2dba:	ff 24       	eor	r15, r15
    2dbc:	f3 94       	inc	r15
    2dbe:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2dc0:	cd ee       	ldi	r28, 0xED	; 237
    2dc2:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    2dc4:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    2dc8:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    2dca:	81 30       	cpi	r24, 0x01	; 1
    2dcc:	21 f0       	breq	.+8      	; 0x2dd6 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2dce:	82 30       	cpi	r24, 0x02	; 2
    2dd0:	11 f0       	breq	.+4      	; 0x2dd6 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    2dd2:	83 30       	cpi	r24, 0x03	; 3
    2dd4:	39 f4       	brne	.+14     	; 0x2de4 <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    2dd6:	e1 2f       	mov	r30, r17
    2dd8:	f0 e0       	ldi	r31, 0x00	; 0
    2dda:	e2 59       	subi	r30, 0x92	; 146
    2ddc:	fa 4f       	sbci	r31, 0xFA	; 250
    2dde:	00 83       	st	Z, r16
			i++;
    2de0:	1f 5f       	subi	r17, 0xFF	; 255
    2de2:	02 c0       	rjmp	.+4      	; 0x2de8 <movesInput+0x38>
		}

		if (btnHolder != 0){
    2de4:	88 23       	and	r24, r24
    2de6:	21 f1       	breq	.+72     	; 0x2e30 <movesInput+0x80>
			LCD_clear();
    2de8:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2dec:	8d b7       	in	r24, 0x3d	; 61
    2dee:	9e b7       	in	r25, 0x3e	; 62
    2df0:	08 97       	sbiw	r24, 0x08	; 8
    2df2:	0f b6       	in	r0, 0x3f	; 63
    2df4:	f8 94       	cli
    2df6:	9e bf       	out	0x3e, r25	; 62
    2df8:	0f be       	out	0x3f, r0	; 63
    2dfa:	8d bf       	out	0x3d, r24	; 61
    2dfc:	ed b7       	in	r30, 0x3d	; 61
    2dfe:	fe b7       	in	r31, 0x3e	; 62
    2e00:	31 96       	adiw	r30, 0x01	; 1
    2e02:	ad b7       	in	r26, 0x3d	; 61
    2e04:	be b7       	in	r27, 0x3e	; 62
    2e06:	12 96       	adiw	r26, 0x02	; 2
    2e08:	dc 93       	st	X, r29
    2e0a:	ce 93       	st	-X, r28
    2e0c:	11 97       	sbiw	r26, 0x01	; 1
    2e0e:	f2 82       	std	Z+2, r15	; 0x02
    2e10:	13 82       	std	Z+3, r1	; 0x03
    2e12:	04 83       	std	Z+4, r16	; 0x04
    2e14:	15 82       	std	Z+5, r1	; 0x05
    2e16:	16 83       	std	Z+6, r17	; 0x06
    2e18:	17 82       	std	Z+7, r1	; 0x07
    2e1a:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    2e1e:	f0 2e       	mov	r15, r16
    2e20:	8d b7       	in	r24, 0x3d	; 61
    2e22:	9e b7       	in	r25, 0x3e	; 62
    2e24:	08 96       	adiw	r24, 0x08	; 8
    2e26:	0f b6       	in	r0, 0x3f	; 63
    2e28:	f8 94       	cli
    2e2a:	9e bf       	out	0x3e, r25	; 62
    2e2c:	0f be       	out	0x3f, r0	; 63
    2e2e:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2e30:	84 ef       	ldi	r24, 0xF4	; 244
    2e32:	91 e0       	ldi	r25, 0x01	; 1
    2e34:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    2e38:	1b 30       	cpi	r17, 0x0B	; 11
    2e3a:	20 f2       	brcs	.-120    	; 0x2dc4 <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    2e3c:	1f 5f       	subi	r17, 0xFF	; 255
    2e3e:	e1 2f       	mov	r30, r17
    2e40:	f0 e0       	ldi	r31, 0x00	; 0
    2e42:	e2 59       	subi	r30, 0x92	; 146
    2e44:	fa 4f       	sbci	r31, 0xFA	; 250
    2e46:	84 e0       	ldi	r24, 0x04	; 4
    2e48:	80 83       	st	Z, r24
}
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	ff 90       	pop	r15
    2e54:	08 95       	ret

00002e56 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    2e56:	1f 93       	push	r17
    2e58:	cf 93       	push	r28
    2e5a:	df 93       	push	r29
    2e5c:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2e5e:	ce e1       	ldi	r28, 0x1E	; 30
    2e60:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    2e62:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2e66:	81 30       	cpi	r24, 0x01	; 1
    2e68:	21 f4       	brne	.+8      	; 0x2e72 <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    2e6a:	80 91 80 06 	lds	r24, 0x0680
    2e6e:	88 0f       	add	r24, r24
    2e70:	06 c0       	rjmp	.+12     	; 0x2e7e <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2e72:	82 30       	cpi	r24, 0x02	; 2
    2e74:	39 f4       	brne	.+14     	; 0x2e84 <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    2e76:	80 91 80 06 	lds	r24, 0x0680
    2e7a:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    2e7c:	8f 5f       	subi	r24, 0xFF	; 255
    2e7e:	80 93 80 06 	sts	0x0680, r24
			i++;
    2e82:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    2e84:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2e88:	00 d0       	rcall	.+0      	; 0x2e8a <worldInput+0x34>
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <worldInput+0x36>
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <worldInput+0x38>
    2e8e:	ed b7       	in	r30, 0x3d	; 61
    2e90:	fe b7       	in	r31, 0x3e	; 62
    2e92:	31 96       	adiw	r30, 0x01	; 1
    2e94:	ad b7       	in	r26, 0x3d	; 61
    2e96:	be b7       	in	r27, 0x3e	; 62
    2e98:	12 96       	adiw	r26, 0x02	; 2
    2e9a:	dc 93       	st	X, r29
    2e9c:	ce 93       	st	-X, r28
    2e9e:	11 97       	sbiw	r26, 0x01	; 1
    2ea0:	80 91 80 06 	lds	r24, 0x0680
    2ea4:	82 83       	std	Z+2, r24	; 0x02
    2ea6:	13 82       	std	Z+3, r1	; 0x03
    2ea8:	14 83       	std	Z+4, r17	; 0x04
    2eaa:	15 82       	std	Z+5, r1	; 0x05
    2eac:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2eb0:	8d b7       	in	r24, 0x3d	; 61
    2eb2:	9e b7       	in	r25, 0x3e	; 62
    2eb4:	06 96       	adiw	r24, 0x06	; 6
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	9e bf       	out	0x3e, r25	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	8d bf       	out	0x3d, r24	; 61
    2ec0:	84 ef       	ldi	r24, 0xF4	; 244
    2ec2:	91 e0       	ldi	r25, 0x01	; 1
    2ec4:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    2ec8:	14 30       	cpi	r17, 0x04	; 4
    2eca:	58 f2       	brcs	.-106    	; 0x2e62 <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    2ecc:	80 91 80 06 	lds	r24, 0x0680
    2ed0:	80 93 81 06 	sts	0x0681, r24
}
    2ed4:	df 91       	pop	r29
    2ed6:	cf 91       	pop	r28
    2ed8:	1f 91       	pop	r17
    2eda:	08 95       	ret

00002edc <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    2edc:	1f 93       	push	r17
    2ede:	cf 93       	push	r28
    2ee0:	df 93       	push	r29
    2ee2:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2ee4:	c6 e4       	ldi	r28, 0x46	; 70
    2ee6:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    2ee8:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2eec:	81 30       	cpi	r24, 0x01	; 1
    2eee:	21 f4       	brne	.+8      	; 0x2ef8 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    2ef0:	80 91 7f 05 	lds	r24, 0x057F
    2ef4:	88 0f       	add	r24, r24
    2ef6:	06 c0       	rjmp	.+12     	; 0x2f04 <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2ef8:	82 30       	cpi	r24, 0x02	; 2
    2efa:	41 f4       	brne	.+16     	; 0x2f0c <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    2efc:	80 91 7f 05 	lds	r24, 0x057F
    2f00:	88 0f       	add	r24, r24
			currentOrientation += 1;
    2f02:	8f 5f       	subi	r24, 0xFF	; 255
    2f04:	80 93 7f 05 	sts	0x057F, r24
			i++;
    2f08:	1f 5f       	subi	r17, 0xFF	; 255
    2f0a:	02 c0       	rjmp	.+4      	; 0x2f10 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    2f0c:	88 23       	and	r24, r24
    2f0e:	f1 f0       	breq	.+60     	; 0x2f4c <orientationInput+0x70>
			LCD_clear();
    2f10:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2f14:	00 d0       	rcall	.+0      	; 0x2f16 <orientationInput+0x3a>
    2f16:	00 d0       	rcall	.+0      	; 0x2f18 <orientationInput+0x3c>
    2f18:	00 d0       	rcall	.+0      	; 0x2f1a <orientationInput+0x3e>
    2f1a:	ed b7       	in	r30, 0x3d	; 61
    2f1c:	fe b7       	in	r31, 0x3e	; 62
    2f1e:	31 96       	adiw	r30, 0x01	; 1
    2f20:	ad b7       	in	r26, 0x3d	; 61
    2f22:	be b7       	in	r27, 0x3e	; 62
    2f24:	12 96       	adiw	r26, 0x02	; 2
    2f26:	dc 93       	st	X, r29
    2f28:	ce 93       	st	-X, r28
    2f2a:	11 97       	sbiw	r26, 0x01	; 1
    2f2c:	80 91 7f 05 	lds	r24, 0x057F
    2f30:	82 83       	std	Z+2, r24	; 0x02
    2f32:	13 82       	std	Z+3, r1	; 0x03
    2f34:	14 83       	std	Z+4, r17	; 0x04
    2f36:	15 82       	std	Z+5, r1	; 0x05
    2f38:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    2f3c:	8d b7       	in	r24, 0x3d	; 61
    2f3e:	9e b7       	in	r25, 0x3e	; 62
    2f40:	06 96       	adiw	r24, 0x06	; 6
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	9e bf       	out	0x3e, r25	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2f4c:	84 ef       	ldi	r24, 0xF4	; 244
    2f4e:	91 e0       	ldi	r25, 0x01	; 1
    2f50:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    2f54:	12 30       	cpi	r17, 0x02	; 2
    2f56:	40 f2       	brcs	.-112    	; 0x2ee8 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    2f58:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
	switch(currentOrientation){
    2f5c:	80 91 7f 05 	lds	r24, 0x057F
    2f60:	81 30       	cpi	r24, 0x01	; 1
    2f62:	51 f0       	breq	.+20     	; 0x2f78 <orientationInput+0x9c>
    2f64:	81 30       	cpi	r24, 0x01	; 1
    2f66:	28 f0       	brcs	.+10     	; 0x2f72 <orientationInput+0x96>
    2f68:	82 30       	cpi	r24, 0x02	; 2
    2f6a:	49 f0       	breq	.+18     	; 0x2f7e <orientationInput+0xa2>
    2f6c:	83 30       	cpi	r24, 0x03	; 3
    2f6e:	71 f4       	brne	.+28     	; 0x2f8c <orientationInput+0xb0>
    2f70:	09 c0       	rjmp	.+18     	; 0x2f84 <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    2f72:	85 e7       	ldi	r24, 0x75	; 117
    2f74:	92 e0       	ldi	r25, 0x02	; 2
    2f76:	08 c0       	rjmp	.+16     	; 0x2f88 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    2f78:	87 e9       	ldi	r24, 0x97	; 151
    2f7a:	92 e0       	ldi	r25, 0x02	; 2
    2f7c:	05 c0       	rjmp	.+10     	; 0x2f88 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    2f7e:	88 eb       	ldi	r24, 0xB8	; 184
    2f80:	92 e0       	ldi	r25, 0x02	; 2
    2f82:	02 c0       	rjmp	.+4      	; 0x2f88 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    2f84:	8a ed       	ldi	r24, 0xDA	; 218
    2f86:	92 e0       	ldi	r25, 0x02	; 2
    2f88:	0e 94 d7 37 	call	0x6fae	; 0x6fae <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    2f8c:	80 91 7f 05 	lds	r24, 0x057F
    2f90:	80 93 7e 05 	sts	0x057E, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    2f94:	84 ef       	ldi	r24, 0xF4	; 244
    2f96:	91 e0       	ldi	r25, 0x01	; 1
    2f98:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
}
    2f9c:	df 91       	pop	r29
    2f9e:	cf 91       	pop	r28
    2fa0:	1f 91       	pop	r17
    2fa2:	08 95       	ret

00002fa4 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    2fa4:	cf 92       	push	r12
    2fa6:	df 92       	push	r13
    2fa8:	ef 92       	push	r14
    2faa:	ff 92       	push	r15
    2fac:	0f 93       	push	r16
    2fae:	1f 93       	push	r17
    2fb0:	df 93       	push	r29
    2fb2:	cf 93       	push	r28
    2fb4:	0f 92       	push	r0
    2fb6:	cd b7       	in	r28, 0x3d	; 61
    2fb8:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    2fba:	80 91 80 06 	lds	r24, 0x0680
    2fbe:	f8 2e       	mov	r15, r24
    2fc0:	f6 94       	lsr	r15
    2fc2:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    2fc4:	98 2f       	mov	r25, r24
    2fc6:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    2fc8:	00 91 7f 05 	lds	r16, 0x057F
    2fcc:	cc 24       	eor	r12, r12
    2fce:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    2fd0:	f6 01       	movw	r30, r12
    2fd2:	e2 59       	subi	r30, 0x92	; 146
    2fd4:	fa 4f       	sbci	r31, 0xFA	; 250
    2fd6:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    2fd8:	ef 2d       	mov	r30, r15
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	ee 0f       	add	r30, r30
    2fde:	ff 1f       	adc	r31, r31
    2fe0:	ee 0f       	add	r30, r30
    2fe2:	ff 1f       	adc	r31, r31
    2fe4:	e9 0f       	add	r30, r25
    2fe6:	f1 1d       	adc	r31, r1
    2fe8:	e1 59       	subi	r30, 0x91	; 145
    2fea:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    2fec:	80 81       	ld	r24, Z
    2fee:	60 2f       	mov	r22, r16
    2ff0:	41 e0       	ldi	r20, 0x01	; 1
    2ff2:	99 83       	std	Y+1, r25	; 0x01
    2ff4:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    2ff8:	f6 01       	movw	r30, r12
    2ffa:	eb 5f       	subi	r30, 0xFB	; 251
    2ffc:	f8 4f       	sbci	r31, 0xF8	; 248
    2ffe:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    3000:	99 81       	ldd	r25, Y+1	; 0x01
    3002:	12 30       	cpi	r17, 0x02	; 2
    3004:	89 f4       	brne	.+34     	; 0x3028 <getGateways+0x84>
			switch(curOrient){
    3006:	01 30       	cpi	r16, 0x01	; 1
    3008:	49 f0       	breq	.+18     	; 0x301c <getGateways+0x78>
    300a:	01 30       	cpi	r16, 0x01	; 1
    300c:	28 f0       	brcs	.+10     	; 0x3018 <getGateways+0x74>
    300e:	02 30       	cpi	r16, 0x02	; 2
    3010:	39 f0       	breq	.+14     	; 0x3020 <getGateways+0x7c>
    3012:	03 30       	cpi	r16, 0x03	; 3
    3014:	89 f4       	brne	.+34     	; 0x3038 <getGateways+0x94>
    3016:	06 c0       	rjmp	.+12     	; 0x3024 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    3018:	fa 94       	dec	r15
    301a:	0e c0       	rjmp	.+28     	; 0x3038 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    301c:	9f 5f       	subi	r25, 0xFF	; 255
    301e:	0c c0       	rjmp	.+24     	; 0x3038 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    3020:	f3 94       	inc	r15
    3022:	0a c0       	rjmp	.+20     	; 0x3038 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    3024:	91 50       	subi	r25, 0x01	; 1
    3026:	08 c0       	rjmp	.+16     	; 0x3038 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    3028:	13 30       	cpi	r17, 0x03	; 3
    302a:	11 f4       	brne	.+4      	; 0x3030 <getGateways+0x8c>
			curOrient++;
    302c:	0f 5f       	subi	r16, 0xFF	; 255
    302e:	03 c0       	rjmp	.+6      	; 0x3036 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    3030:	11 30       	cpi	r17, 0x01	; 1
    3032:	11 f4       	brne	.+4      	; 0x3038 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    3034:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    3036:	03 70       	andi	r16, 0x03	; 3
    3038:	08 94       	sec
    303a:	c1 1c       	adc	r12, r1
    303c:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    303e:	8d e0       	ldi	r24, 0x0D	; 13
    3040:	c8 16       	cp	r12, r24
    3042:	d1 04       	cpc	r13, r1
    3044:	29 f6       	brne	.-118    	; 0x2fd0 <getGateways+0x2c>
    3046:	cc 24       	eor	r12, r12
    3048:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    304a:	7b ef       	ldi	r23, 0xFB	; 251
    304c:	e7 2e       	mov	r14, r23
    304e:	72 e0       	ldi	r23, 0x02	; 2
    3050:	f7 2e       	mov	r15, r23
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    3052:	f6 01       	movw	r30, r12
    3054:	eb 5f       	subi	r30, 0xFB	; 251
    3056:	f8 4f       	sbci	r31, 0xF8	; 248
    3058:	00 81       	ld	r16, Z
		LCD_clear();
    305a:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    305e:	20 2f       	mov	r18, r16
    3060:	30 e0       	ldi	r19, 0x00	; 0
    3062:	ad b7       	in	r26, 0x3d	; 61
    3064:	be b7       	in	r27, 0x3e	; 62
    3066:	54 97       	sbiw	r26, 0x14	; 20
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	be bf       	out	0x3e, r27	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	ad bf       	out	0x3d, r26	; 61
    3072:	ed b7       	in	r30, 0x3d	; 61
    3074:	fe b7       	in	r31, 0x3e	; 62
    3076:	31 96       	adiw	r30, 0x01	; 1
    3078:	12 96       	adiw	r26, 0x02	; 2
    307a:	fc 92       	st	X, r15
    307c:	ee 92       	st	-X, r14
    307e:	11 97       	sbiw	r26, 0x01	; 1
    3080:	d3 82       	std	Z+3, r13	; 0x03
    3082:	c2 82       	std	Z+2, r12	; 0x02
    3084:	11 27       	eor	r17, r17
    3086:	07 fd       	sbrc	r16, 7
    3088:	10 95       	com	r17
    308a:	00 27       	eor	r16, r16
    308c:	11 0f       	add	r17, r17
    308e:	00 1f       	adc	r16, r16
    3090:	11 27       	eor	r17, r17
    3092:	15 83       	std	Z+5, r17	; 0x05
    3094:	04 83       	std	Z+4, r16	; 0x04
    3096:	c9 01       	movw	r24, r18
    3098:	56 e0       	ldi	r21, 0x06	; 6
    309a:	96 95       	lsr	r25
    309c:	87 95       	ror	r24
    309e:	5a 95       	dec	r21
    30a0:	e1 f7       	brne	.-8      	; 0x309a <getGateways+0xf6>
    30a2:	81 70       	andi	r24, 0x01	; 1
    30a4:	90 70       	andi	r25, 0x00	; 0
    30a6:	97 83       	std	Z+7, r25	; 0x07
    30a8:	86 83       	std	Z+6, r24	; 0x06
    30aa:	c9 01       	movw	r24, r18
    30ac:	45 e0       	ldi	r20, 0x05	; 5
    30ae:	96 95       	lsr	r25
    30b0:	87 95       	ror	r24
    30b2:	4a 95       	dec	r20
    30b4:	e1 f7       	brne	.-8      	; 0x30ae <getGateways+0x10a>
    30b6:	81 70       	andi	r24, 0x01	; 1
    30b8:	90 70       	andi	r25, 0x00	; 0
    30ba:	91 87       	std	Z+9, r25	; 0x09
    30bc:	80 87       	std	Z+8, r24	; 0x08
    30be:	c9 01       	movw	r24, r18
    30c0:	04 e0       	ldi	r16, 0x04	; 4
    30c2:	96 95       	lsr	r25
    30c4:	87 95       	ror	r24
    30c6:	0a 95       	dec	r16
    30c8:	e1 f7       	brne	.-8      	; 0x30c2 <getGateways+0x11e>
    30ca:	81 70       	andi	r24, 0x01	; 1
    30cc:	90 70       	andi	r25, 0x00	; 0
    30ce:	93 87       	std	Z+11, r25	; 0x0b
    30d0:	82 87       	std	Z+10, r24	; 0x0a
    30d2:	c9 01       	movw	r24, r18
    30d4:	13 e0       	ldi	r17, 0x03	; 3
    30d6:	96 95       	lsr	r25
    30d8:	87 95       	ror	r24
    30da:	1a 95       	dec	r17
    30dc:	e1 f7       	brne	.-8      	; 0x30d6 <getGateways+0x132>
    30de:	81 70       	andi	r24, 0x01	; 1
    30e0:	90 70       	andi	r25, 0x00	; 0
    30e2:	95 87       	std	Z+13, r25	; 0x0d
    30e4:	84 87       	std	Z+12, r24	; 0x0c
    30e6:	c9 01       	movw	r24, r18
    30e8:	96 95       	lsr	r25
    30ea:	87 95       	ror	r24
    30ec:	96 95       	lsr	r25
    30ee:	87 95       	ror	r24
    30f0:	81 70       	andi	r24, 0x01	; 1
    30f2:	90 70       	andi	r25, 0x00	; 0
    30f4:	97 87       	std	Z+15, r25	; 0x0f
    30f6:	86 87       	std	Z+14, r24	; 0x0e
    30f8:	c9 01       	movw	r24, r18
    30fa:	96 95       	lsr	r25
    30fc:	87 95       	ror	r24
    30fe:	81 70       	andi	r24, 0x01	; 1
    3100:	90 70       	andi	r25, 0x00	; 0
    3102:	91 8b       	std	Z+17, r25	; 0x11
    3104:	80 8b       	std	Z+16, r24	; 0x10
    3106:	21 70       	andi	r18, 0x01	; 1
    3108:	30 70       	andi	r19, 0x00	; 0
    310a:	33 8b       	std	Z+19, r19	; 0x13
    310c:	22 8b       	std	Z+18, r18	; 0x12
    310e:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
		TMRSRVC_delay(1000);//wait 1 second
    3112:	ed b7       	in	r30, 0x3d	; 61
    3114:	fe b7       	in	r31, 0x3e	; 62
    3116:	74 96       	adiw	r30, 0x14	; 20
    3118:	0f b6       	in	r0, 0x3f	; 63
    311a:	f8 94       	cli
    311c:	fe bf       	out	0x3e, r31	; 62
    311e:	0f be       	out	0x3f, r0	; 63
    3120:	ed bf       	out	0x3d, r30	; 61
    3122:	88 ee       	ldi	r24, 0xE8	; 232
    3124:	93 e0       	ldi	r25, 0x03	; 3
    3126:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
    312a:	08 94       	sec
    312c:	c1 1c       	adc	r12, r1
    312e:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    3130:	fd e0       	ldi	r31, 0x0D	; 13
    3132:	cf 16       	cp	r12, r31
    3134:	d1 04       	cpc	r13, r1
    3136:	09 f0       	breq	.+2      	; 0x313a <getGateways+0x196>
    3138:	8c cf       	rjmp	.-232    	; 0x3052 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    313a:	0f 90       	pop	r0
    313c:	cf 91       	pop	r28
    313e:	df 91       	pop	r29
    3140:	1f 91       	pop	r17
    3142:	0f 91       	pop	r16
    3144:	ff 90       	pop	r15
    3146:	ef 90       	pop	r14
    3148:	df 90       	pop	r13
    314a:	cf 90       	pop	r12
    314c:	08 95       	ret

0000314e <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    314e:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    3150:	10 91 80 06 	lds	r17, 0x0680
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    3154:	80 91 eb 04 	lds	r24, 0x04EB
    3158:	60 91 7f 05 	lds	r22, 0x057F
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    3162:	e1 2f       	mov	r30, r17
    3164:	e6 95       	lsr	r30
    3166:	e6 95       	lsr	r30
    3168:	f0 e0       	ldi	r31, 0x00	; 0
    316a:	ee 0f       	add	r30, r30
    316c:	ff 1f       	adc	r31, r31
    316e:	ee 0f       	add	r30, r30
    3170:	ff 1f       	adc	r31, r31
    3172:	13 70       	andi	r17, 0x03	; 3
    3174:	e1 0f       	add	r30, r17
    3176:	f1 1d       	adc	r31, r1
    3178:	e1 59       	subi	r30, 0x91	; 145
    317a:	fc 4f       	sbci	r31, 0xFC	; 252
    317c:	80 83       	st	Z, r24
}
    317e:	1f 91       	pop	r17
    3180:	08 95       	ret

00003182 <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char *ptROBOT_WORLD, unsigned char row, unsigned char col)
{	
    3182:	df 92       	push	r13
    3184:	ef 92       	push	r14
    3186:	ff 92       	push	r15
    3188:	0f 93       	push	r16
    318a:	1f 93       	push	r17
    318c:	06 2f       	mov	r16, r22
    318e:	14 2f       	mov	r17, r20
    3190:	ff 24       	eor	r15, r15
    3192:	2e c0       	rjmp	.+92     	; 0x31f0 <matchBranch+0x6e>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    3194:	05 30       	cpi	r16, 0x05	; 5
    3196:	90 f5       	brcc	.+100    	; 0x31fc <matchBranch+0x7a>
    3198:	15 30       	cpi	r17, 0x05	; 5
    319a:	80 f5       	brcc	.+96     	; 0x31fc <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    319c:	ef 2d       	mov	r30, r15
    319e:	f0 e0       	ldi	r31, 0x00	; 0
    31a0:	e6 52       	subi	r30, 0x26	; 38
    31a2:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    31a4:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    31a6:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    31a8:	80 81       	ld	r24, Z
    31aa:	6e 2d       	mov	r22, r14
    31ac:	40 e0       	ldi	r20, 0x00	; 0
    31ae:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    31b2:	e0 2f       	mov	r30, r16
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	ee 0f       	add	r30, r30
    31b8:	ff 1f       	adc	r31, r31
    31ba:	ee 0f       	add	r30, r30
    31bc:	ff 1f       	adc	r31, r31
    31be:	e1 0f       	add	r30, r17
    31c0:	f1 1d       	adc	r31, r1
    31c2:	e1 59       	subi	r30, 0x91	; 145
    31c4:	fc 4f       	sbci	r31, 0xFC	; 252
    31c6:	90 81       	ld	r25, Z
    31c8:	89 17       	cp	r24, r25
    31ca:	c1 f4       	brne	.+48     	; 0x31fc <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		currentCellWorld = (curRow << 2) + curCol;
    31cc:	80 2f       	mov	r24, r16
    31ce:	88 0f       	add	r24, r24
    31d0:	88 0f       	add	r24, r24
    31d2:	81 0f       	add	r24, r17
    31d4:	80 93 80 06 	sts	0x0680, r24
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		currentCellWorld = shiftMap(currentCellWorld, curMove, curOrnt);
    31d8:	6d 2d       	mov	r22, r13
    31da:	4e 2d       	mov	r20, r14
    31dc:	0e 94 a7 14 	call	0x294e	; 0x294e <shiftMap>
    31e0:	80 93 80 06 	sts	0x0680, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = currentCellWorld >> 2;
    31e4:	08 2f       	mov	r16, r24
    31e6:	06 95       	lsr	r16
    31e8:	06 95       	lsr	r16
		curCol = currentCellWorld & 0b0011;
    31ea:	18 2f       	mov	r17, r24
    31ec:	13 70       	andi	r17, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    31ee:	f3 94       	inc	r15
    31f0:	80 91 e9 03 	lds	r24, 0x03E9
    31f4:	f8 16       	cp	r15, r24
    31f6:	70 f2       	brcs	.-100    	; 0x3194 <matchBranch+0x12>
    31f8:	81 e0       	ldi	r24, 0x01	; 1
    31fa:	01 c0       	rjmp	.+2      	; 0x31fe <matchBranch+0x7c>
    31fc:	80 e0       	ldi	r24, 0x00	; 0
		curCol = currentCellWorld & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	return SUCCESS;
}
    31fe:	1f 91       	pop	r17
    3200:	0f 91       	pop	r16
    3202:	ff 90       	pop	r15
    3204:	ef 90       	pop	r14
    3206:	df 90       	pop	r13
    3208:	08 95       	ret

0000320a <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    320a:	df 92       	push	r13
    320c:	ef 92       	push	r14
    320e:	ff 92       	push	r15
    3210:	0f 93       	push	r16
    3212:	1f 93       	push	r17
    3214:	cf 93       	push	r28
    3216:	df 93       	push	r29
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    3218:	d0 90 da 03 	lds	r13, 0x03DA
	// Local variables for nested for loops 
	unsigned char row, col;
	// Stores the number of matching seeds
	matchSeeds = 0;
    321c:	10 92 1b 07 	sts	0x071B, r1
    3220:	00 e0       	ldi	r16, 0x00	; 0
    3222:	10 e0       	ldi	r17, 0x00	; 0
    3224:	1a c0       	rjmp	.+52     	; 0x325a <localizeGateway+0x50>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    3226:	88 81       	ld	r24, Y
    3228:	d8 16       	cp	r13, r24
    322a:	69 f4       	brne	.+26     	; 0x3246 <localizeGateway+0x3c>
			
				//Check to see if we have a matching branch
				if(matchBranch(*ROBOT_WORLD,row,col)){
    322c:	8f e6       	ldi	r24, 0x6F	; 111
    322e:	93 e0       	ldi	r25, 0x03	; 3
    3230:	6e 2d       	mov	r22, r14
    3232:	4f 2d       	mov	r20, r15
    3234:	0e 94 c1 18 	call	0x3182	; 0x3182 <matchBranch>
    3238:	88 23       	and	r24, r24
    323a:	29 f0       	breq	.+10     	; 0x3246 <localizeGateway+0x3c>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    323c:	80 91 1b 07 	lds	r24, 0x071B
    3240:	8f 5f       	subi	r24, 0xFF	; 255
    3242:	80 93 1b 07 	sts	0x071B, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    3246:	f3 94       	inc	r15
    3248:	21 96       	adiw	r28, 0x01	; 1
    324a:	84 e0       	ldi	r24, 0x04	; 4
    324c:	f8 16       	cp	r15, r24
    324e:	59 f7       	brne	.-42     	; 0x3226 <localizeGateway+0x1c>
    3250:	0f 5f       	subi	r16, 0xFF	; 255
    3252:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    3254:	04 30       	cpi	r16, 0x04	; 4
    3256:	11 05       	cpc	r17, r1
    3258:	51 f0       	breq	.+20     	; 0x326e <localizeGateway+0x64>
    325a:	e0 2e       	mov	r14, r16
    325c:	e8 01       	movw	r28, r16
    325e:	cc 0f       	add	r28, r28
    3260:	dd 1f       	adc	r29, r29
    3262:	cc 0f       	add	r28, r28
    3264:	dd 1f       	adc	r29, r29
    3266:	c1 59       	subi	r28, 0x91	; 145
    3268:	dc 4f       	sbci	r29, 0xFC	; 252
    326a:	ff 24       	eor	r15, r15
    326c:	dc cf       	rjmp	.-72     	; 0x3226 <localizeGateway+0x1c>
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	80 91 1b 07 	lds	r24, 0x071B
    3274:	81 30       	cpi	r24, 0x01	; 1
    3276:	09 f0       	breq	.+2      	; 0x327a <localizeGateway+0x70>
    3278:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    327a:	89 2f       	mov	r24, r25
    327c:	df 91       	pop	r29
    327e:	cf 91       	pop	r28
    3280:	1f 91       	pop	r17
    3282:	0f 91       	pop	r16
    3284:	ff 90       	pop	r15
    3286:	ef 90       	pop	r14
    3288:	df 90       	pop	r13
    328a:	08 95       	ret

0000328c <CBOT_main>:
/*******************************************************************
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
    328c:	8f 92       	push	r8
    328e:	9f 92       	push	r9
    3290:	af 92       	push	r10
    3292:	bf 92       	push	r11
    3294:	cf 92       	push	r12
    3296:	df 92       	push	r13
    3298:	ef 92       	push	r14
    329a:	ff 92       	push	r15
    329c:	0f 93       	push	r16
    329e:	1f 93       	push	r17
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
	// initialize the robot
	initializeRobot();
    32a4:	0e 94 23 10 	call	0x2046	; 0x2046 <initializeRobot>
	
	// Loop variables for print debug
	unsigned char i, branch, move, orent;
	
	// Display the map
	LCD_clear();
    32a8:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    32ac:	8d e1       	ldi	r24, 0x1D	; 29
    32ae:	93 e0       	ldi	r25, 0x03	; 3
    32b0:	0e 94 d7 37 	call	0x6fae	; 0x6fae <puts>
	printMap(RESET);
    32b4:	81 e0       	ldi	r24, 0x01	; 1
    32b6:	0e 94 76 0f 	call	0x1eec	; 0x1eec <printMap>
	TMRSRVC_delay(1000);//wait 1 seconds
    32ba:	88 ee       	ldi	r24, 0xE8	; 232
    32bc:	93 e0       	ldi	r25, 0x03	; 3
    32be:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
	LCD_clear();
    32c2:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
		//Localize from Gateways?
		isLost = localizeGateway();
				
		//Print Tree		
		LCD_clear();
		LCD_printf("Branch");
    32c6:	6e e2       	ldi	r22, 0x2E	; 46
    32c8:	86 2e       	mov	r8, r22
    32ca:	63 e0       	ldi	r22, 0x03	; 3
    32cc:	96 2e       	mov	r9, r22
		for(i = 0; i<BRANCH_MAX; i++){
			branch = localizeGateways[0][i];
			LCD_printf("%3d", branch);
    32ce:	c5 e3       	ldi	r28, 0x35	; 53
    32d0:	d3 e0       	ldi	r29, 0x03	; 3
		}
		LCD_printf("Move  ");
    32d2:	59 e3       	ldi	r21, 0x39	; 57
    32d4:	a5 2e       	mov	r10, r21
    32d6:	53 e0       	ldi	r21, 0x03	; 3
    32d8:	b5 2e       	mov	r11, r21
		for(i = 0; i<BRANCH_MAX; i++){
			move = localizeGateways[1][i];
			LCD_printf("%3d", move);
		}
		LCD_printf("Ornt  ");
    32da:	40 e4       	ldi	r20, 0x40	; 64
    32dc:	c4 2e       	mov	r12, r20
    32de:	43 e0       	ldi	r20, 0x03	; 3
    32e0:	d4 2e       	mov	r13, r20
		for(i = 0; i<BRANCH_MAX; i++){
			orent = localizeGateways[2][i];
			LCD_printf("%3d", orent);
		}
		LCD_printf("isLost %1d ",isLost);
    32e2:	37 e4       	ldi	r19, 0x47	; 71
    32e4:	e3 2e       	mov	r14, r19
    32e6:	33 e0       	ldi	r19, 0x03	; 3
    32e8:	f3 2e       	mov	r15, r19
		LCD_printf("seeds: %1d", matchSeeds);
    32ea:	03 e5       	ldi	r16, 0x53	; 83
    32ec:	13 e0       	ldi	r17, 0x03	; 3
    32ee:	35 c1       	rjmp	.+618    	; 0x355a <CBOT_main+0x2ce>
	
	// Localization Loop 
	while(isLost)
	{	
		//Sense Gateway
		checkIR();	
    32f0:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <checkIR>
		checkWorld();
    32f4:	0e 94 6d 10 	call	0x20da	; 0x20da <checkWorld>
		
		//Plan using the Gateway
		planGateway();
    32f8:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <planGateway>
		
		//Localize from Gateways?
		isLost = localizeGateway();
    32fc:	0e 94 05 19 	call	0x320a	; 0x320a <localizeGateway>
    3300:	80 93 6e 03 	sts	0x036E, r24
				
		//Print Tree		
		LCD_clear();
    3304:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
		LCD_printf("Branch");
    3308:	00 d0       	rcall	.+0      	; 0x330a <CBOT_main+0x7e>
    330a:	ad b7       	in	r26, 0x3d	; 61
    330c:	be b7       	in	r27, 0x3e	; 62
    330e:	12 96       	adiw	r26, 0x02	; 2
    3310:	9c 92       	st	X, r9
    3312:	8e 92       	st	-X, r8
    3314:	11 97       	sbiw	r26, 0x01	; 1
    3316:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
		for(i = 0; i<BRANCH_MAX; i++){
			branch = localizeGateways[0][i];
			LCD_printf("%3d", branch);
    331a:	00 d0       	rcall	.+0      	; 0x331c <CBOT_main+0x90>
    331c:	ed b7       	in	r30, 0x3d	; 61
    331e:	fe b7       	in	r31, 0x3e	; 62
    3320:	31 96       	adiw	r30, 0x01	; 1
    3322:	ad b7       	in	r26, 0x3d	; 61
    3324:	be b7       	in	r27, 0x3e	; 62
    3326:	12 96       	adiw	r26, 0x02	; 2
    3328:	dc 93       	st	X, r29
    332a:	ce 93       	st	-X, r28
    332c:	11 97       	sbiw	r26, 0x01	; 1
    332e:	80 91 da 03 	lds	r24, 0x03DA
    3332:	82 83       	std	Z+2, r24	; 0x02
    3334:	13 82       	std	Z+3, r1	; 0x03
    3336:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    333a:	ed b7       	in	r30, 0x3d	; 61
    333c:	fe b7       	in	r31, 0x3e	; 62
    333e:	31 96       	adiw	r30, 0x01	; 1
    3340:	ad b7       	in	r26, 0x3d	; 61
    3342:	be b7       	in	r27, 0x3e	; 62
    3344:	12 96       	adiw	r26, 0x02	; 2
    3346:	dc 93       	st	X, r29
    3348:	ce 93       	st	-X, r28
    334a:	11 97       	sbiw	r26, 0x01	; 1
    334c:	80 91 db 03 	lds	r24, 0x03DB
    3350:	82 83       	std	Z+2, r24	; 0x02
    3352:	13 82       	std	Z+3, r1	; 0x03
    3354:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    3358:	ed b7       	in	r30, 0x3d	; 61
    335a:	fe b7       	in	r31, 0x3e	; 62
    335c:	31 96       	adiw	r30, 0x01	; 1
    335e:	ad b7       	in	r26, 0x3d	; 61
    3360:	be b7       	in	r27, 0x3e	; 62
    3362:	12 96       	adiw	r26, 0x02	; 2
    3364:	dc 93       	st	X, r29
    3366:	ce 93       	st	-X, r28
    3368:	11 97       	sbiw	r26, 0x01	; 1
    336a:	80 91 dc 03 	lds	r24, 0x03DC
    336e:	82 83       	std	Z+2, r24	; 0x02
    3370:	13 82       	std	Z+3, r1	; 0x03
    3372:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    3376:	ed b7       	in	r30, 0x3d	; 61
    3378:	fe b7       	in	r31, 0x3e	; 62
    337a:	31 96       	adiw	r30, 0x01	; 1
    337c:	ad b7       	in	r26, 0x3d	; 61
    337e:	be b7       	in	r27, 0x3e	; 62
    3380:	12 96       	adiw	r26, 0x02	; 2
    3382:	dc 93       	st	X, r29
    3384:	ce 93       	st	-X, r28
    3386:	11 97       	sbiw	r26, 0x01	; 1
    3388:	80 91 dd 03 	lds	r24, 0x03DD
    338c:	82 83       	std	Z+2, r24	; 0x02
    338e:	13 82       	std	Z+3, r1	; 0x03
    3390:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    3394:	ed b7       	in	r30, 0x3d	; 61
    3396:	fe b7       	in	r31, 0x3e	; 62
    3398:	31 96       	adiw	r30, 0x01	; 1
    339a:	ad b7       	in	r26, 0x3d	; 61
    339c:	be b7       	in	r27, 0x3e	; 62
    339e:	12 96       	adiw	r26, 0x02	; 2
    33a0:	dc 93       	st	X, r29
    33a2:	ce 93       	st	-X, r28
    33a4:	11 97       	sbiw	r26, 0x01	; 1
    33a6:	80 91 de 03 	lds	r24, 0x03DE
    33aa:	82 83       	std	Z+2, r24	; 0x02
    33ac:	13 82       	std	Z+3, r1	; 0x03
    33ae:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
		}
		LCD_printf("Move  ");
    33b2:	0f 90       	pop	r0
    33b4:	0f 90       	pop	r0
    33b6:	ed b7       	in	r30, 0x3d	; 61
    33b8:	fe b7       	in	r31, 0x3e	; 62
    33ba:	b2 82       	std	Z+2, r11	; 0x02
    33bc:	a1 82       	std	Z+1, r10	; 0x01
    33be:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
		for(i = 0; i<BRANCH_MAX; i++){
			move = localizeGateways[1][i];
			LCD_printf("%3d", move);
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <CBOT_main+0x138>
    33c4:	ed b7       	in	r30, 0x3d	; 61
    33c6:	fe b7       	in	r31, 0x3e	; 62
    33c8:	31 96       	adiw	r30, 0x01	; 1
    33ca:	ad b7       	in	r26, 0x3d	; 61
    33cc:	be b7       	in	r27, 0x3e	; 62
    33ce:	12 96       	adiw	r26, 0x02	; 2
    33d0:	dc 93       	st	X, r29
    33d2:	ce 93       	st	-X, r28
    33d4:	11 97       	sbiw	r26, 0x01	; 1
    33d6:	80 91 df 03 	lds	r24, 0x03DF
    33da:	82 83       	std	Z+2, r24	; 0x02
    33dc:	13 82       	std	Z+3, r1	; 0x03
    33de:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    33e2:	ed b7       	in	r30, 0x3d	; 61
    33e4:	fe b7       	in	r31, 0x3e	; 62
    33e6:	31 96       	adiw	r30, 0x01	; 1
    33e8:	ad b7       	in	r26, 0x3d	; 61
    33ea:	be b7       	in	r27, 0x3e	; 62
    33ec:	12 96       	adiw	r26, 0x02	; 2
    33ee:	dc 93       	st	X, r29
    33f0:	ce 93       	st	-X, r28
    33f2:	11 97       	sbiw	r26, 0x01	; 1
    33f4:	80 91 e0 03 	lds	r24, 0x03E0
    33f8:	82 83       	std	Z+2, r24	; 0x02
    33fa:	13 82       	std	Z+3, r1	; 0x03
    33fc:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    3400:	ed b7       	in	r30, 0x3d	; 61
    3402:	fe b7       	in	r31, 0x3e	; 62
    3404:	31 96       	adiw	r30, 0x01	; 1
    3406:	ad b7       	in	r26, 0x3d	; 61
    3408:	be b7       	in	r27, 0x3e	; 62
    340a:	12 96       	adiw	r26, 0x02	; 2
    340c:	dc 93       	st	X, r29
    340e:	ce 93       	st	-X, r28
    3410:	11 97       	sbiw	r26, 0x01	; 1
    3412:	80 91 e1 03 	lds	r24, 0x03E1
    3416:	82 83       	std	Z+2, r24	; 0x02
    3418:	13 82       	std	Z+3, r1	; 0x03
    341a:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    341e:	ed b7       	in	r30, 0x3d	; 61
    3420:	fe b7       	in	r31, 0x3e	; 62
    3422:	31 96       	adiw	r30, 0x01	; 1
    3424:	ad b7       	in	r26, 0x3d	; 61
    3426:	be b7       	in	r27, 0x3e	; 62
    3428:	12 96       	adiw	r26, 0x02	; 2
    342a:	dc 93       	st	X, r29
    342c:	ce 93       	st	-X, r28
    342e:	11 97       	sbiw	r26, 0x01	; 1
    3430:	80 91 e2 03 	lds	r24, 0x03E2
    3434:	82 83       	std	Z+2, r24	; 0x02
    3436:	13 82       	std	Z+3, r1	; 0x03
    3438:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    343c:	ed b7       	in	r30, 0x3d	; 61
    343e:	fe b7       	in	r31, 0x3e	; 62
    3440:	31 96       	adiw	r30, 0x01	; 1
    3442:	ad b7       	in	r26, 0x3d	; 61
    3444:	be b7       	in	r27, 0x3e	; 62
    3446:	12 96       	adiw	r26, 0x02	; 2
    3448:	dc 93       	st	X, r29
    344a:	ce 93       	st	-X, r28
    344c:	11 97       	sbiw	r26, 0x01	; 1
    344e:	80 91 e3 03 	lds	r24, 0x03E3
    3452:	82 83       	std	Z+2, r24	; 0x02
    3454:	13 82       	std	Z+3, r1	; 0x03
    3456:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
		}
		LCD_printf("Ornt  ");
    345a:	0f 90       	pop	r0
    345c:	0f 90       	pop	r0
    345e:	ed b7       	in	r30, 0x3d	; 61
    3460:	fe b7       	in	r31, 0x3e	; 62
    3462:	d2 82       	std	Z+2, r13	; 0x02
    3464:	c1 82       	std	Z+1, r12	; 0x01
    3466:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
		for(i = 0; i<BRANCH_MAX; i++){
			orent = localizeGateways[2][i];
			LCD_printf("%3d", orent);
    346a:	00 d0       	rcall	.+0      	; 0x346c <CBOT_main+0x1e0>
    346c:	ed b7       	in	r30, 0x3d	; 61
    346e:	fe b7       	in	r31, 0x3e	; 62
    3470:	31 96       	adiw	r30, 0x01	; 1
    3472:	ad b7       	in	r26, 0x3d	; 61
    3474:	be b7       	in	r27, 0x3e	; 62
    3476:	12 96       	adiw	r26, 0x02	; 2
    3478:	dc 93       	st	X, r29
    347a:	ce 93       	st	-X, r28
    347c:	11 97       	sbiw	r26, 0x01	; 1
    347e:	80 91 e4 03 	lds	r24, 0x03E4
    3482:	82 83       	std	Z+2, r24	; 0x02
    3484:	13 82       	std	Z+3, r1	; 0x03
    3486:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    348a:	ed b7       	in	r30, 0x3d	; 61
    348c:	fe b7       	in	r31, 0x3e	; 62
    348e:	31 96       	adiw	r30, 0x01	; 1
    3490:	ad b7       	in	r26, 0x3d	; 61
    3492:	be b7       	in	r27, 0x3e	; 62
    3494:	12 96       	adiw	r26, 0x02	; 2
    3496:	dc 93       	st	X, r29
    3498:	ce 93       	st	-X, r28
    349a:	11 97       	sbiw	r26, 0x01	; 1
    349c:	80 91 e5 03 	lds	r24, 0x03E5
    34a0:	82 83       	std	Z+2, r24	; 0x02
    34a2:	13 82       	std	Z+3, r1	; 0x03
    34a4:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    34a8:	ed b7       	in	r30, 0x3d	; 61
    34aa:	fe b7       	in	r31, 0x3e	; 62
    34ac:	31 96       	adiw	r30, 0x01	; 1
    34ae:	ad b7       	in	r26, 0x3d	; 61
    34b0:	be b7       	in	r27, 0x3e	; 62
    34b2:	12 96       	adiw	r26, 0x02	; 2
    34b4:	dc 93       	st	X, r29
    34b6:	ce 93       	st	-X, r28
    34b8:	11 97       	sbiw	r26, 0x01	; 1
    34ba:	80 91 e6 03 	lds	r24, 0x03E6
    34be:	82 83       	std	Z+2, r24	; 0x02
    34c0:	13 82       	std	Z+3, r1	; 0x03
    34c2:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    34c6:	ed b7       	in	r30, 0x3d	; 61
    34c8:	fe b7       	in	r31, 0x3e	; 62
    34ca:	31 96       	adiw	r30, 0x01	; 1
    34cc:	ad b7       	in	r26, 0x3d	; 61
    34ce:	be b7       	in	r27, 0x3e	; 62
    34d0:	12 96       	adiw	r26, 0x02	; 2
    34d2:	dc 93       	st	X, r29
    34d4:	ce 93       	st	-X, r28
    34d6:	11 97       	sbiw	r26, 0x01	; 1
    34d8:	80 91 e7 03 	lds	r24, 0x03E7
    34dc:	82 83       	std	Z+2, r24	; 0x02
    34de:	13 82       	std	Z+3, r1	; 0x03
    34e0:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
    34e4:	ed b7       	in	r30, 0x3d	; 61
    34e6:	fe b7       	in	r31, 0x3e	; 62
    34e8:	31 96       	adiw	r30, 0x01	; 1
    34ea:	ad b7       	in	r26, 0x3d	; 61
    34ec:	be b7       	in	r27, 0x3e	; 62
    34ee:	12 96       	adiw	r26, 0x02	; 2
    34f0:	dc 93       	st	X, r29
    34f2:	ce 93       	st	-X, r28
    34f4:	11 97       	sbiw	r26, 0x01	; 1
    34f6:	80 91 e8 03 	lds	r24, 0x03E8
    34fa:	82 83       	std	Z+2, r24	; 0x02
    34fc:	13 82       	std	Z+3, r1	; 0x03
    34fe:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
		}
		LCD_printf("isLost %1d ",isLost);
    3502:	ed b7       	in	r30, 0x3d	; 61
    3504:	fe b7       	in	r31, 0x3e	; 62
    3506:	31 96       	adiw	r30, 0x01	; 1
    3508:	ad b7       	in	r26, 0x3d	; 61
    350a:	be b7       	in	r27, 0x3e	; 62
    350c:	12 96       	adiw	r26, 0x02	; 2
    350e:	fc 92       	st	X, r15
    3510:	ee 92       	st	-X, r14
    3512:	11 97       	sbiw	r26, 0x01	; 1
    3514:	80 91 6e 03 	lds	r24, 0x036E
    3518:	82 83       	std	Z+2, r24	; 0x02
    351a:	13 82       	std	Z+3, r1	; 0x03
    351c:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
		LCD_printf("seeds: %1d", matchSeeds);
    3520:	ed b7       	in	r30, 0x3d	; 61
    3522:	fe b7       	in	r31, 0x3e	; 62
    3524:	31 96       	adiw	r30, 0x01	; 1
    3526:	ad b7       	in	r26, 0x3d	; 61
    3528:	be b7       	in	r27, 0x3e	; 62
    352a:	12 96       	adiw	r26, 0x02	; 2
    352c:	1c 93       	st	X, r17
    352e:	0e 93       	st	-X, r16
    3530:	11 97       	sbiw	r26, 0x01	; 1
    3532:	80 91 1b 07 	lds	r24, 0x071B
    3536:	82 83       	std	Z+2, r24	; 0x02
    3538:	13 82       	std	Z+3, r1	; 0x03
    353a:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
		TMRSRVC_delay(2000);//wait 3 seconds
    353e:	0f 90       	pop	r0
    3540:	0f 90       	pop	r0
    3542:	0f 90       	pop	r0
    3544:	0f 90       	pop	r0
    3546:	80 ed       	ldi	r24, 0xD0	; 208
    3548:	97 e0       	ldi	r25, 0x07	; 7
    354a:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
		
		//Act on the Gateway
		moveMap();
    354e:	0e 94 e2 14 	call	0x29c4	; 0x29c4 <moveMap>
		
		// Break if not isLost
		if(!isLost){
    3552:	80 91 6e 03 	lds	r24, 0x036E
    3556:	88 23       	and	r24, r24
    3558:	29 f0       	breq	.+10     	; 0x3564 <CBOT_main+0x2d8>
	printMap(RESET);
	TMRSRVC_delay(1000);//wait 1 seconds
	LCD_clear();
	
	// Localization Loop 
	while(isLost)
    355a:	80 91 6e 03 	lds	r24, 0x036E
    355e:	88 23       	and	r24, r24
    3560:	09 f0       	breq	.+2      	; 0x3564 <CBOT_main+0x2d8>
    3562:	c6 ce       	rjmp	.-628    	; 0x32f0 <CBOT_main+0x64>
		// LCD_printf("%5.5f\n%5.5f\n",odometryStepL,odometryStepL);
		// TMRSRVC_delay(1000);//wait 3 seconds
	}
	**/
	
	LCD_clear();
    3564:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
	LCD_printf("LOLZ\nI'm found!");
    3568:	00 d0       	rcall	.+0      	; 0x356a <CBOT_main+0x2de>
    356a:	8e e5       	ldi	r24, 0x5E	; 94
    356c:	93 e0       	ldi	r25, 0x03	; 3
    356e:	ed b7       	in	r30, 0x3d	; 61
    3570:	fe b7       	in	r31, 0x3e	; 62
    3572:	92 83       	std	Z+2, r25	; 0x02
    3574:	81 83       	std	Z+1, r24	; 0x01
    3576:	0e 94 c5 37 	call	0x6f8a	; 0x6f8a <printf>
	TMRSRVC_delay(3000);//wait 3 seconds
    357a:	0f 90       	pop	r0
    357c:	0f 90       	pop	r0
    357e:	88 eb       	ldi	r24, 0xB8	; 184
    3580:	9b e0       	ldi	r25, 0x0B	; 11
    3582:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
	
	LCD_clear();
    3586:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    358a:	8d e1       	ldi	r24, 0x1D	; 29
    358c:	93 e0       	ldi	r25, 0x03	; 3
    358e:	0e 94 d7 37 	call	0x6fae	; 0x6fae <puts>
	printMap(RESET);
    3592:	81 e0       	ldi	r24, 0x01	; 1
    3594:	0e 94 76 0f 	call	0x1eec	; 0x1eec <printMap>
	TMRSRVC_delay(10000);//wait 10 seconds
    3598:	80 e1       	ldi	r24, 0x10	; 16
    359a:	97 e2       	ldi	r25, 0x27	; 39
    359c:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
	LCD_clear();
    35a0:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
		// LCD_clear();
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/
}// end the CBOT_main()
    35a4:	df 91       	pop	r29
    35a6:	cf 91       	pop	r28
    35a8:	1f 91       	pop	r17
    35aa:	0f 91       	pop	r16
    35ac:	ff 90       	pop	r15
    35ae:	ef 90       	pop	r14
    35b0:	df 90       	pop	r13
    35b2:	cf 90       	pop	r12
    35b4:	bf 90       	pop	r11
    35b6:	af 90       	pop	r10
    35b8:	9f 90       	pop	r9
    35ba:	8f 90       	pop	r8
    35bc:	08 95       	ret

000035be <ADC_open>:
    35be:	8f e0       	ldi	r24, 0x0F	; 15
    35c0:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    35c4:	88 23       	and	r24, r24
    35c6:	31 f4       	brne	.+12     	; 0x35d4 <ADC_open+0x16>
    35c8:	0e 94 62 23 	call	0x46c4	; 0x46c4 <__ADC_init>
    35cc:	8f e0       	ldi	r24, 0x0F	; 15
    35ce:	61 e0       	ldi	r22, 0x01	; 1
    35d0:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    35d4:	8f e0       	ldi	r24, 0x0F	; 15
    35d6:	91 e0       	ldi	r25, 0x01	; 1
    35d8:	08 95       	ret

000035da <ADC_sample>:
    35da:	8f e0       	ldi	r24, 0x0F	; 15
    35dc:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    35e0:	81 30       	cpi	r24, 0x01	; 1
    35e2:	19 f0       	breq	.+6      	; 0x35ea <ADC_sample+0x10>
    35e4:	20 e0       	ldi	r18, 0x00	; 0
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	13 c0       	rjmp	.+38     	; 0x3610 <ADC_sample+0x36>
    35ea:	80 91 7a 00 	lds	r24, 0x007A
    35ee:	80 64       	ori	r24, 0x40	; 64
    35f0:	80 93 7a 00 	sts	0x007A, r24
    35f4:	80 91 7a 00 	lds	r24, 0x007A
    35f8:	86 fd       	sbrc	r24, 6
    35fa:	fc cf       	rjmp	.-8      	; 0x35f4 <ADC_sample+0x1a>
    35fc:	30 91 78 00 	lds	r19, 0x0078
    3600:	20 91 79 00 	lds	r18, 0x0079
    3604:	92 2f       	mov	r25, r18
    3606:	80 e0       	ldi	r24, 0x00	; 0
    3608:	23 2f       	mov	r18, r19
    360a:	30 e0       	ldi	r19, 0x00	; 0
    360c:	28 2b       	or	r18, r24
    360e:	39 2b       	or	r19, r25
    3610:	c9 01       	movw	r24, r18
    3612:	08 95       	ret

00003614 <ADC_set_channel>:
    3614:	58 2f       	mov	r21, r24
    3616:	80 91 7f 03 	lds	r24, 0x037F
    361a:	88 30       	cpi	r24, 0x08	; 8
    361c:	d8 f4       	brcc	.+54     	; 0x3654 <ADC_set_channel+0x40>
    361e:	40 91 7e 00 	lds	r20, 0x007E
    3622:	21 e0       	ldi	r18, 0x01	; 1
    3624:	30 e0       	ldi	r19, 0x00	; 0
    3626:	b9 01       	movw	r22, r18
    3628:	02 c0       	rjmp	.+4      	; 0x362e <ADC_set_channel+0x1a>
    362a:	66 0f       	add	r22, r22
    362c:	77 1f       	adc	r23, r23
    362e:	8a 95       	dec	r24
    3630:	e2 f7       	brpl	.-8      	; 0x362a <ADC_set_channel+0x16>
    3632:	cb 01       	movw	r24, r22
    3634:	80 95       	com	r24
    3636:	84 23       	and	r24, r20
    3638:	80 93 7e 00 	sts	0x007E, r24
    363c:	80 91 7e 00 	lds	r24, 0x007E
    3640:	05 2e       	mov	r0, r21
    3642:	02 c0       	rjmp	.+4      	; 0x3648 <ADC_set_channel+0x34>
    3644:	22 0f       	add	r18, r18
    3646:	33 1f       	adc	r19, r19
    3648:	0a 94       	dec	r0
    364a:	e2 f7       	brpl	.-8      	; 0x3644 <ADC_set_channel+0x30>
    364c:	82 2b       	or	r24, r18
    364e:	80 93 7e 00 	sts	0x007E, r24
    3652:	0d c0       	rjmp	.+26     	; 0x366e <ADC_set_channel+0x5a>
    3654:	20 91 7e 00 	lds	r18, 0x007E
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	90 e0       	ldi	r25, 0x00	; 0
    365c:	05 2e       	mov	r0, r21
    365e:	02 c0       	rjmp	.+4      	; 0x3664 <ADC_set_channel+0x50>
    3660:	88 0f       	add	r24, r24
    3662:	99 1f       	adc	r25, r25
    3664:	0a 94       	dec	r0
    3666:	e2 f7       	brpl	.-8      	; 0x3660 <ADC_set_channel+0x4c>
    3668:	28 2b       	or	r18, r24
    366a:	20 93 7e 00 	sts	0x007E, r18
    366e:	50 93 7f 03 	sts	0x037F, r21
    3672:	80 91 7c 00 	lds	r24, 0x007C
    3676:	5f 71       	andi	r21, 0x1F	; 31
    3678:	80 7e       	andi	r24, 0xE0	; 224
    367a:	85 2b       	or	r24, r21
    367c:	80 93 7c 00 	sts	0x007C, r24
    3680:	08 95       	ret

00003682 <ADC_set_VREF>:
    3682:	ec e7       	ldi	r30, 0x7C	; 124
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	90 81       	ld	r25, Z
    3688:	82 95       	swap	r24
    368a:	88 0f       	add	r24, r24
    368c:	88 0f       	add	r24, r24
    368e:	80 7c       	andi	r24, 0xC0	; 192
    3690:	9f 73       	andi	r25, 0x3F	; 63
    3692:	98 2b       	or	r25, r24
    3694:	90 83       	st	Z, r25
    3696:	08 95       	ret

00003698 <main>:
    3698:	0e 94 7b 23 	call	0x46f6	; 0x46f6 <CBOT_ISR_init>
    369c:	0e 94 6d 23 	call	0x46da	; 0x46da <CBOT_init>
    36a0:	0e 94 46 19 	call	0x328c	; 0x328c <CBOT_main>
    36a4:	80 e0       	ldi	r24, 0x00	; 0
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	08 95       	ret

000036aa <LCD_clear>:
    36aa:	0f 93       	push	r16
    36ac:	1f 93       	push	r17
    36ae:	80 e4       	ldi	r24, 0x40	; 64
    36b0:	60 e0       	ldi	r22, 0x00	; 0
    36b2:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    36b6:	00 e0       	ldi	r16, 0x00	; 0
    36b8:	80 2f       	mov	r24, r16
    36ba:	60 e0       	ldi	r22, 0x00	; 0
    36bc:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LCD_set_PGC_addr>
    36c0:	10 e0       	ldi	r17, 0x00	; 0
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	61 e0       	ldi	r22, 0x01	; 1
    36c6:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    36ca:	1f 5f       	subi	r17, 0xFF	; 255
    36cc:	10 38       	cpi	r17, 0x80	; 128
    36ce:	c9 f7       	brne	.-14     	; 0x36c2 <LCD_clear+0x18>
    36d0:	0f 5f       	subi	r16, 0xFF	; 255
    36d2:	04 30       	cpi	r16, 0x04	; 4
    36d4:	89 f7       	brne	.-30     	; 0x36b8 <LCD_clear+0xe>
    36d6:	83 e0       	ldi	r24, 0x03	; 3
    36d8:	60 e0       	ldi	r22, 0x00	; 0
    36da:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_set_next_PGC>
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	08 95       	ret

000036e4 <LCD_open>:
    36e4:	0f 93       	push	r16
    36e6:	1f 93       	push	r17
    36e8:	82 e0       	ldi	r24, 0x02	; 2
    36ea:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    36ee:	88 23       	and	r24, r24
    36f0:	11 f4       	brne	.+4      	; 0x36f6 <LCD_open+0x12>
    36f2:	82 e0       	ldi	r24, 0x02	; 2
    36f4:	06 c0       	rjmp	.+12     	; 0x3702 <LCD_open+0x1e>
    36f6:	81 e0       	ldi	r24, 0x01	; 1
    36f8:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    36fc:	88 23       	and	r24, r24
    36fe:	19 f4       	brne	.+6      	; 0x3706 <LCD_open+0x22>
    3700:	81 e0       	ldi	r24, 0x01	; 1
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	6d c0       	rjmp	.+218    	; 0x37e0 <LCD_open+0xfc>
    3706:	0e 94 e3 25 	call	0x4bc6	; 0x4bc6 <__LCD_init>
    370a:	85 e0       	ldi	r24, 0x05	; 5
    370c:	61 e0       	ldi	r22, 0x01	; 1
    370e:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    3712:	8e ea       	ldi	r24, 0xAE	; 174
    3714:	60 e0       	ldi	r22, 0x00	; 0
    3716:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    371a:	82 ea       	ldi	r24, 0xA2	; 162
    371c:	60 e0       	ldi	r22, 0x00	; 0
    371e:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    3722:	80 ea       	ldi	r24, 0xA0	; 160
    3724:	60 e0       	ldi	r22, 0x00	; 0
    3726:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    372a:	00 e5       	ldi	r16, 0x50	; 80
    372c:	13 ec       	ldi	r17, 0xC3	; 195
    372e:	c8 01       	movw	r24, r16
    3730:	01 97       	sbiw	r24, 0x01	; 1
    3732:	f1 f7       	brne	.-4      	; 0x3730 <LCD_open+0x4c>
    3734:	80 ec       	ldi	r24, 0xC0	; 192
    3736:	60 e0       	ldi	r22, 0x00	; 0
    3738:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    373c:	8f e2       	ldi	r24, 0x2F	; 47
    373e:	60 e0       	ldi	r22, 0x00	; 0
    3740:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    3744:	81 e8       	ldi	r24, 0x81	; 129
    3746:	60 e0       	ldi	r22, 0x00	; 0
    3748:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    374c:	86 e1       	ldi	r24, 0x16	; 22
    374e:	60 e0       	ldi	r22, 0x00	; 0
    3750:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    3754:	82 e2       	ldi	r24, 0x22	; 34
    3756:	60 e0       	ldi	r22, 0x00	; 0
    3758:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    375c:	c8 01       	movw	r24, r16
    375e:	01 97       	sbiw	r24, 0x01	; 1
    3760:	f1 f7       	brne	.-4      	; 0x375e <LCD_open+0x7a>
    3762:	8f ea       	ldi	r24, 0xAF	; 175
    3764:	60 e0       	ldi	r22, 0x00	; 0
    3766:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    376a:	86 ea       	ldi	r24, 0xA6	; 166
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    3772:	85 ea       	ldi	r24, 0xA5	; 165
    3774:	60 e0       	ldi	r22, 0x00	; 0
    3776:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    377a:	80 e0       	ldi	r24, 0x00	; 0
    377c:	90 e0       	ldi	r25, 0x00	; 0
    377e:	28 e8       	ldi	r18, 0x88	; 136
    3780:	33 e1       	ldi	r19, 0x13	; 19
    3782:	f9 01       	movw	r30, r18
    3784:	31 97       	sbiw	r30, 0x01	; 1
    3786:	f1 f7       	brne	.-4      	; 0x3784 <LCD_open+0xa0>
    3788:	01 96       	adiw	r24, 0x01	; 1
    378a:	43 e0       	ldi	r20, 0x03	; 3
    378c:	88 3e       	cpi	r24, 0xE8	; 232
    378e:	94 07       	cpc	r25, r20
    3790:	c1 f7       	brne	.-16     	; 0x3782 <LCD_open+0x9e>
    3792:	83 eb       	ldi	r24, 0xB3	; 179
    3794:	60 e0       	ldi	r22, 0x00	; 0
    3796:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    379a:	80 e4       	ldi	r24, 0x40	; 64
    379c:	60 e0       	ldi	r22, 0x00	; 0
    379e:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    37a2:	83 e0       	ldi	r24, 0x03	; 3
    37a4:	60 e0       	ldi	r22, 0x00	; 0
    37a6:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LCD_set_PGC_addr>
    37aa:	83 e0       	ldi	r24, 0x03	; 3
    37ac:	60 e0       	ldi	r22, 0x00	; 0
    37ae:	0e 94 14 1c 	call	0x3828	; 0x3828 <LCD_set_next_PGC>
    37b2:	10 92 6b 07 	sts	0x076B, r1
    37b6:	10 92 6d 07 	sts	0x076D, r1
    37ba:	10 92 6c 07 	sts	0x076C, r1
    37be:	8e e8       	ldi	r24, 0x8E	; 142
    37c0:	93 e0       	ldi	r25, 0x03	; 3
    37c2:	90 93 9c 07 	sts	0x079C, r25
    37c6:	80 93 9b 07 	sts	0x079B, r24
    37ca:	88 e1       	ldi	r24, 0x18	; 24
    37cc:	0e 94 f3 1b 	call	0x37e6	; 0x37e6 <LCD_set_backlight>
    37d0:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
    37d4:	84 ea       	ldi	r24, 0xA4	; 164
    37d6:	60 e0       	ldi	r22, 0x00	; 0
    37d8:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    37dc:	85 e0       	ldi	r24, 0x05	; 5
    37de:	91 e0       	ldi	r25, 0x01	; 1
    37e0:	1f 91       	pop	r17
    37e2:	0f 91       	pop	r16
    37e4:	08 95       	ret

000037e6 <LCD_set_backlight>:
    37e6:	1f 93       	push	r17
    37e8:	18 2f       	mov	r17, r24
    37ea:	85 e0       	ldi	r24, 0x05	; 5
    37ec:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    37f0:	81 30       	cpi	r24, 0x01	; 1
    37f2:	c1 f4       	brne	.+48     	; 0x3824 <LCD_set_backlight+0x3e>
    37f4:	87 e0       	ldi	r24, 0x07	; 7
    37f6:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <SPI_set_slave_addr>
    37fa:	82 e0       	ldi	r24, 0x02	; 2
    37fc:	6a e0       	ldi	r22, 0x0A	; 10
    37fe:	0e 94 c1 1c 	call	0x3982	; 0x3982 <SPI_transmit>
    3802:	82 e0       	ldi	r24, 0x02	; 2
    3804:	61 eb       	ldi	r22, 0xB1	; 177
    3806:	0e 94 c1 1c 	call	0x3982	; 0x3982 <SPI_transmit>
    380a:	61 2f       	mov	r22, r17
    380c:	11 32       	cpi	r17, 0x21	; 33
    380e:	08 f0       	brcs	.+2      	; 0x3812 <LCD_set_backlight+0x2c>
    3810:	60 e2       	ldi	r22, 0x20	; 32
    3812:	82 e0       	ldi	r24, 0x02	; 2
    3814:	0e 94 c1 1c 	call	0x3982	; 0x3982 <SPI_transmit>
    3818:	89 ee       	ldi	r24, 0xE9	; 233
    381a:	8a 95       	dec	r24
    381c:	f1 f7       	brne	.-4      	; 0x381a <LCD_set_backlight+0x34>
    381e:	87 e0       	ldi	r24, 0x07	; 7
    3820:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <SPI_set_slave_addr>
    3824:	1f 91       	pop	r17
    3826:	08 95       	ret

00003828 <LCD_set_next_PGC>:
    3828:	83 70       	andi	r24, 0x03	; 3
    382a:	6f 77       	andi	r22, 0x7F	; 127
    382c:	60 93 69 07 	sts	0x0769, r22
    3830:	80 93 6a 07 	sts	0x076A, r24
    3834:	08 95       	ret

00003836 <LCD_set_PGC_addr>:
    3836:	0f 93       	push	r16
    3838:	1f 93       	push	r17
    383a:	06 2f       	mov	r16, r22
    383c:	16 2f       	mov	r17, r22
    383e:	1f 77       	andi	r17, 0x7F	; 127
    3840:	83 70       	andi	r24, 0x03	; 3
    3842:	80 6b       	ori	r24, 0xB0	; 176
    3844:	60 e0       	ldi	r22, 0x00	; 0
    3846:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    384a:	12 95       	swap	r17
    384c:	1f 70       	andi	r17, 0x0F	; 15
    384e:	81 2f       	mov	r24, r17
    3850:	80 61       	ori	r24, 0x10	; 16
    3852:	60 e0       	ldi	r22, 0x00	; 0
    3854:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    3858:	80 2f       	mov	r24, r16
    385a:	8f 70       	andi	r24, 0x0F	; 15
    385c:	60 e0       	ldi	r22, 0x00	; 0
    385e:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    3862:	1f 91       	pop	r17
    3864:	0f 91       	pop	r16
    3866:	08 95       	ret

00003868 <LCD_write>:
    3868:	0f 93       	push	r16
    386a:	1f 93       	push	r17
    386c:	08 2f       	mov	r16, r24
    386e:	16 2f       	mov	r17, r22
    3870:	85 e0       	ldi	r24, 0x05	; 5
    3872:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    3876:	81 30       	cpi	r24, 0x01	; 1
    3878:	79 f4       	brne	.+30     	; 0x3898 <LCD_write+0x30>
    387a:	11 23       	and	r17, r17
    387c:	19 f0       	breq	.+6      	; 0x3884 <LCD_write+0x1c>
    387e:	11 30       	cpi	r17, 0x01	; 1
    3880:	21 f4       	brne	.+8      	; 0x388a <LCD_write+0x22>
    3882:	02 c0       	rjmp	.+4      	; 0x3888 <LCD_write+0x20>
    3884:	2b 98       	cbi	0x05, 3	; 5
    3886:	01 c0       	rjmp	.+2      	; 0x388a <LCD_write+0x22>
    3888:	2b 9a       	sbi	0x05, 3	; 5
    388a:	86 e0       	ldi	r24, 0x06	; 6
    388c:	8a 95       	dec	r24
    388e:	f1 f7       	brne	.-4      	; 0x388c <LCD_write+0x24>
    3890:	80 e0       	ldi	r24, 0x00	; 0
    3892:	60 2f       	mov	r22, r16
    3894:	0e 94 c1 1c 	call	0x3982	; 0x3982 <SPI_transmit>
    3898:	1f 91       	pop	r17
    389a:	0f 91       	pop	r16
    389c:	08 95       	ret

0000389e <LED_clr_pattern>:
    389e:	1f 93       	push	r17
    38a0:	18 2f       	mov	r17, r24
    38a2:	86 e0       	ldi	r24, 0x06	; 6
    38a4:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    38a8:	81 30       	cpi	r24, 0x01	; 1
    38aa:	19 f4       	brne	.+6      	; 0x38b2 <LED_clr_pattern+0x14>
    38ac:	81 2f       	mov	r24, r17
    38ae:	0e 94 92 26 	call	0x4d24	; 0x4d24 <__LED_clr_pattern>
    38b2:	1f 91       	pop	r17
    38b4:	08 95       	ret

000038b6 <LED_open>:
    38b6:	0e 94 97 26 	call	0x4d2e	; 0x4d2e <__LED_init>
    38ba:	86 e0       	ldi	r24, 0x06	; 6
    38bc:	61 e0       	ldi	r22, 0x01	; 1
    38be:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    38c2:	86 e0       	ldi	r24, 0x06	; 6
    38c4:	91 e0       	ldi	r25, 0x01	; 1
    38c6:	08 95       	ret

000038c8 <LED_set_pattern>:
    38c8:	1f 93       	push	r17
    38ca:	18 2f       	mov	r17, r24
    38cc:	86 e0       	ldi	r24, 0x06	; 6
    38ce:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    38d2:	81 30       	cpi	r24, 0x01	; 1
    38d4:	19 f4       	brne	.+6      	; 0x38dc <LED_set_pattern+0x14>
    38d6:	81 2f       	mov	r24, r17
    38d8:	0e 94 9a 26 	call	0x4d34	; 0x4d34 <__LED_set_pattern>
    38dc:	1f 91       	pop	r17
    38de:	08 95       	ret

000038e0 <SPI_set_slave_addr>:
    38e0:	1f 93       	push	r17
    38e2:	18 2f       	mov	r17, r24
    38e4:	82 e0       	ldi	r24, 0x02	; 2
    38e6:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    38ea:	81 30       	cpi	r24, 0x01	; 1
    38ec:	09 f0       	breq	.+2      	; 0x38f0 <SPI_set_slave_addr+0x10>
    38ee:	47 c0       	rjmp	.+142    	; 0x397e <SPI_set_slave_addr+0x9e>
    38f0:	91 2f       	mov	r25, r17
    38f2:	97 70       	andi	r25, 0x07	; 7
    38f4:	80 91 6e 07 	lds	r24, 0x076E
    38f8:	98 17       	cp	r25, r24
    38fa:	09 f4       	brne	.+2      	; 0x38fe <SPI_set_slave_addr+0x1e>
    38fc:	40 c0       	rjmp	.+128    	; 0x397e <SPI_set_slave_addr+0x9e>
    38fe:	90 93 6e 07 	sts	0x076E, r25
    3902:	85 b1       	in	r24, 0x05	; 5
    3904:	88 7f       	andi	r24, 0xF8	; 248
    3906:	89 2b       	or	r24, r25
    3908:	85 b9       	out	0x05, r24	; 5
    390a:	93 30       	cpi	r25, 0x03	; 3
    390c:	11 f1       	breq	.+68     	; 0x3952 <SPI_set_slave_addr+0x72>
    390e:	94 30       	cpi	r25, 0x04	; 4
    3910:	28 f4       	brcc	.+10     	; 0x391c <SPI_set_slave_addr+0x3c>
    3912:	91 30       	cpi	r25, 0x01	; 1
    3914:	51 f0       	breq	.+20     	; 0x392a <SPI_set_slave_addr+0x4a>
    3916:	92 30       	cpi	r25, 0x02	; 2
    3918:	90 f4       	brcc	.+36     	; 0x393e <SPI_set_slave_addr+0x5e>
    391a:	0c c0       	rjmp	.+24     	; 0x3934 <SPI_set_slave_addr+0x54>
    391c:	95 30       	cpi	r25, 0x05	; 5
    391e:	19 f1       	breq	.+70     	; 0x3966 <SPI_set_slave_addr+0x86>
    3920:	95 30       	cpi	r25, 0x05	; 5
    3922:	e0 f0       	brcs	.+56     	; 0x395c <SPI_set_slave_addr+0x7c>
    3924:	96 30       	cpi	r25, 0x06	; 6
    3926:	21 f5       	brne	.+72     	; 0x3970 <SPI_set_slave_addr+0x90>
    3928:	0f c0       	rjmp	.+30     	; 0x3948 <SPI_set_slave_addr+0x68>
    392a:	e0 91 3c 04 	lds	r30, 0x043C
    392e:	f0 91 3d 04 	lds	r31, 0x043D
    3932:	22 c0       	rjmp	.+68     	; 0x3978 <SPI_set_slave_addr+0x98>
    3934:	e0 91 3a 04 	lds	r30, 0x043A
    3938:	f0 91 3b 04 	lds	r31, 0x043B
    393c:	1d c0       	rjmp	.+58     	; 0x3978 <SPI_set_slave_addr+0x98>
    393e:	e0 91 3e 04 	lds	r30, 0x043E
    3942:	f0 91 3f 04 	lds	r31, 0x043F
    3946:	18 c0       	rjmp	.+48     	; 0x3978 <SPI_set_slave_addr+0x98>
    3948:	e0 91 46 04 	lds	r30, 0x0446
    394c:	f0 91 47 04 	lds	r31, 0x0447
    3950:	13 c0       	rjmp	.+38     	; 0x3978 <SPI_set_slave_addr+0x98>
    3952:	e0 91 40 04 	lds	r30, 0x0440
    3956:	f0 91 41 04 	lds	r31, 0x0441
    395a:	0e c0       	rjmp	.+28     	; 0x3978 <SPI_set_slave_addr+0x98>
    395c:	e0 91 42 04 	lds	r30, 0x0442
    3960:	f0 91 43 04 	lds	r31, 0x0443
    3964:	09 c0       	rjmp	.+18     	; 0x3978 <SPI_set_slave_addr+0x98>
    3966:	e0 91 44 04 	lds	r30, 0x0444
    396a:	f0 91 45 04 	lds	r31, 0x0445
    396e:	04 c0       	rjmp	.+8      	; 0x3978 <SPI_set_slave_addr+0x98>
    3970:	e0 91 48 04 	lds	r30, 0x0448
    3974:	f0 91 49 04 	lds	r31, 0x0449
    3978:	30 97       	sbiw	r30, 0x00	; 0
    397a:	09 f0       	breq	.+2      	; 0x397e <SPI_set_slave_addr+0x9e>
    397c:	09 95       	icall
    397e:	1f 91       	pop	r17
    3980:	08 95       	ret

00003982 <SPI_transmit>:
    3982:	1f 93       	push	r17
    3984:	16 2f       	mov	r17, r22
    3986:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <SPI_set_slave_addr>
    398a:	82 e0       	ldi	r24, 0x02	; 2
    398c:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    3990:	81 30       	cpi	r24, 0x01	; 1
    3992:	21 f4       	brne	.+8      	; 0x399c <SPI_transmit+0x1a>
    3994:	1e bd       	out	0x2e, r17	; 46
    3996:	0d b4       	in	r0, 0x2d	; 45
    3998:	07 fe       	sbrs	r0, 7
    399a:	fd cf       	rjmp	.-6      	; 0x3996 <SPI_transmit+0x14>
    399c:	1f 91       	pop	r17
    399e:	08 95       	ret

000039a0 <__SPKR_set_up_freq_LUT>:
    39a0:	0f 93       	push	r16
    39a2:	1f 93       	push	r17
    39a4:	cf 93       	push	r28
    39a6:	df 93       	push	r29
    39a8:	80 e2       	ldi	r24, 0x20	; 32
    39aa:	91 e0       	ldi	r25, 0x01	; 1
    39ac:	0e 94 a6 35 	call	0x6b4c	; 0x6b4c <malloc>
    39b0:	9c 01       	movw	r18, r24
    39b2:	90 93 59 04 	sts	0x0459, r25
    39b6:	80 93 58 04 	sts	0x0458, r24
    39ba:	89 2b       	or	r24, r25
    39bc:	11 f4       	brne	.+4      	; 0x39c2 <__SPKR_set_up_freq_LUT+0x22>
    39be:	80 e0       	ldi	r24, 0x00	; 0
    39c0:	39 c0       	rjmp	.+114    	; 0x3a34 <__SPKR_set_up_freq_LUT+0x94>
    39c2:	89 01       	movw	r16, r18
    39c4:	c0 e0       	ldi	r28, 0x00	; 0
    39c6:	d0 e0       	ldi	r29, 0x00	; 0
    39c8:	be 01       	movw	r22, r28
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <__floatunsisf>
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	30 e0       	ldi	r19, 0x00	; 0
    39d6:	40 ea       	ldi	r20, 0xA0	; 160
    39d8:	51 e4       	ldi	r21, 0x41	; 65
    39da:	0e 94 75 2e 	call	0x5cea	; 0x5cea <__divsf3>
    39de:	27 ef       	ldi	r18, 0xF7	; 247
    39e0:	35 e7       	ldi	r19, 0x75	; 117
    39e2:	40 e0       	ldi	r20, 0x00	; 0
    39e4:	5f e3       	ldi	r21, 0x3F	; 63
    39e6:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    39ea:	9b 01       	movw	r18, r22
    39ec:	ac 01       	movw	r20, r24
    39ee:	60 e0       	ldi	r22, 0x00	; 0
    39f0:	70 e0       	ldi	r23, 0x00	; 0
    39f2:	80 e2       	ldi	r24, 0x20	; 32
    39f4:	91 e4       	ldi	r25, 0x41	; 65
    39f6:	0e 94 61 30 	call	0x60c2	; 0x60c2 <pow>
    39fa:	9b 01       	movw	r18, r22
    39fc:	ac 01       	movw	r20, r24
    39fe:	ca 01       	movw	r24, r20
    3a00:	b9 01       	movw	r22, r18
    3a02:	2d ec       	ldi	r18, 0xCD	; 205
    3a04:	3c ec       	ldi	r19, 0xCC	; 204
    3a06:	42 e8       	ldi	r20, 0x82	; 130
    3a08:	51 e4       	ldi	r21, 0x41	; 65
    3a0a:	0e 94 fe 2f 	call	0x5ffc	; 0x5ffc <__mulsf3>
    3a0e:	0e 94 c4 2f 	call	0x5f88	; 0x5f88 <lrint>
    3a12:	2a e0       	ldi	r18, 0x0A	; 10
    3a14:	30 e0       	ldi	r19, 0x00	; 0
    3a16:	40 e0       	ldi	r20, 0x00	; 0
    3a18:	50 e0       	ldi	r21, 0x00	; 0
    3a1a:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__mulsi3>
    3a1e:	f8 01       	movw	r30, r16
    3a20:	61 93       	st	Z+, r22
    3a22:	71 93       	st	Z+, r23
    3a24:	81 93       	st	Z+, r24
    3a26:	91 93       	st	Z+, r25
    3a28:	8f 01       	movw	r16, r30
    3a2a:	21 96       	adiw	r28, 0x01	; 1
    3a2c:	c8 34       	cpi	r28, 0x48	; 72
    3a2e:	d1 05       	cpc	r29, r1
    3a30:	59 f6       	brne	.-106    	; 0x39c8 <__SPKR_set_up_freq_LUT+0x28>
    3a32:	81 e0       	ldi	r24, 0x01	; 1
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	1f 91       	pop	r17
    3a3a:	0f 91       	pop	r16
    3a3c:	08 95       	ret

00003a3e <__SPKR_open_beep_mode>:
    3a3e:	8a e0       	ldi	r24, 0x0A	; 10
    3a40:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    3a44:	88 23       	and	r24, r24
    3a46:	71 f4       	brne	.+28     	; 0x3a64 <__SPKR_open_beep_mode+0x26>
    3a48:	10 92 55 04 	sts	0x0455, r1
    3a4c:	10 92 54 04 	sts	0x0454, r1
    3a50:	81 e0       	ldi	r24, 0x01	; 1
    3a52:	0e 94 d5 27 	call	0x4faa	; 0x4faa <__SPKR_init>
    3a56:	81 e0       	ldi	r24, 0x01	; 1
    3a58:	80 93 4b 04 	sts	0x044B, r24
    3a5c:	8a e0       	ldi	r24, 0x0A	; 10
    3a5e:	61 e0       	ldi	r22, 0x01	; 1
    3a60:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    3a64:	8a e0       	ldi	r24, 0x0A	; 10
    3a66:	91 e0       	ldi	r25, 0x01	; 1
    3a68:	08 95       	ret

00003a6a <__SPKR_open_tone_mode>:
    3a6a:	1f 93       	push	r17
    3a6c:	8b e0       	ldi	r24, 0x0B	; 11
    3a6e:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    3a72:	88 23       	and	r24, r24
    3a74:	11 f0       	breq	.+4      	; 0x3a7a <__SPKR_open_tone_mode+0x10>
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	21 c0       	rjmp	.+66     	; 0x3abc <__SPKR_open_tone_mode+0x52>
    3a7a:	89 e0       	ldi	r24, 0x09	; 9
    3a7c:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    3a80:	88 23       	and	r24, r24
    3a82:	d9 f4       	brne	.+54     	; 0x3aba <__SPKR_open_tone_mode+0x50>
    3a84:	0e 94 d0 1c 	call	0x39a0	; 0x39a0 <__SPKR_set_up_freq_LUT>
    3a88:	18 2f       	mov	r17, r24
    3a8a:	81 30       	cpi	r24, 0x01	; 1
    3a8c:	b1 f4       	brne	.+44     	; 0x3aba <__SPKR_open_tone_mode+0x50>
    3a8e:	10 92 4c 04 	sts	0x044C, r1
    3a92:	10 92 4d 04 	sts	0x044D, r1
    3a96:	10 92 4e 04 	sts	0x044E, r1
    3a9a:	10 92 4f 04 	sts	0x044F, r1
    3a9e:	8d e0       	ldi	r24, 0x0D	; 13
    3aa0:	68 e5       	ldi	r22, 0x58	; 88
    3aa2:	77 e2       	ldi	r23, 0x27	; 39
    3aa4:	0e 94 bb 25 	call	0x4b76	; 0x4b76 <ISR_attach>
    3aa8:	82 e0       	ldi	r24, 0x02	; 2
    3aaa:	0e 94 d5 27 	call	0x4faa	; 0x4faa <__SPKR_init>
    3aae:	10 93 4a 04 	sts	0x044A, r17
    3ab2:	89 e0       	ldi	r24, 0x09	; 9
    3ab4:	61 e0       	ldi	r22, 0x01	; 1
    3ab6:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    3aba:	91 e0       	ldi	r25, 0x01	; 1
    3abc:	89 e0       	ldi	r24, 0x09	; 9
    3abe:	1f 91       	pop	r17
    3ac0:	08 95       	ret

00003ac2 <SPKR_open>:
    3ac2:	81 30       	cpi	r24, 0x01	; 1
    3ac4:	29 f0       	breq	.+10     	; 0x3ad0 <SPKR_open+0xe>
    3ac6:	82 30       	cpi	r24, 0x02	; 2
    3ac8:	31 f0       	breq	.+12     	; 0x3ad6 <SPKR_open+0x14>
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	89 e0       	ldi	r24, 0x09	; 9
    3ace:	08 95       	ret
    3ad0:	0e 94 1f 1d 	call	0x3a3e	; 0x3a3e <__SPKR_open_beep_mode>
    3ad4:	08 95       	ret
    3ad6:	0e 94 35 1d 	call	0x3a6a	; 0x3a6a <__SPKR_open_tone_mode>
    3ada:	08 95       	ret

00003adc <STEPPER_get_nSteps>:
    3adc:	80 91 2f 07 	lds	r24, 0x072F
    3ae0:	90 91 30 07 	lds	r25, 0x0730
    3ae4:	20 91 31 07 	lds	r18, 0x0731
    3ae8:	30 91 32 07 	lds	r19, 0x0732
    3aec:	bc 01       	movw	r22, r24
    3aee:	c9 01       	movw	r24, r18
    3af0:	08 95       	ret

00003af2 <STEPPER_stepmode>:
    3af2:	2f 92       	push	r2
    3af4:	3f 92       	push	r3
    3af6:	4f 92       	push	r4
    3af8:	5f 92       	push	r5
    3afa:	6f 92       	push	r6
    3afc:	7f 92       	push	r7
    3afe:	8f 92       	push	r8
    3b00:	9f 92       	push	r9
    3b02:	af 92       	push	r10
    3b04:	bf 92       	push	r11
    3b06:	cf 92       	push	r12
    3b08:	df 92       	push	r13
    3b0a:	ef 92       	push	r14
    3b0c:	ff 92       	push	r15
    3b0e:	0f 93       	push	r16
    3b10:	1f 93       	push	r17
    3b12:	df 93       	push	r29
    3b14:	cf 93       	push	r28
    3b16:	cd b7       	in	r28, 0x3d	; 61
    3b18:	de b7       	in	r29, 0x3e	; 62
    3b1a:	58 2e       	mov	r5, r24
    3b1c:	96 2e       	mov	r9, r22
    3b1e:	44 2e       	mov	r4, r20
    3b20:	39 01       	movw	r6, r18
    3b22:	3c 2c       	mov	r3, r12
    3b24:	c9 8c       	ldd	r12, Y+25	; 0x19
    3b26:	da 8c       	ldd	r13, Y+26	; 0x1a
    3b28:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3b2a:	81 e0       	ldi	r24, 0x01	; 1
    3b2c:	68 17       	cp	r22, r24
    3b2e:	39 f1       	breq	.+78     	; 0x3b7e <STEPPER_stepmode+0x8c>
    3b30:	68 17       	cp	r22, r24
    3b32:	28 f0       	brcs	.+10     	; 0x3b3e <STEPPER_stepmode+0x4c>
    3b34:	92 e0       	ldi	r25, 0x02	; 2
    3b36:	69 17       	cp	r22, r25
    3b38:	09 f0       	breq	.+2      	; 0x3b3c <STEPPER_stepmode+0x4a>
    3b3a:	85 c0       	rjmp	.+266    	; 0x3c46 <STEPPER_stepmode+0x154>
    3b3c:	49 c0       	rjmp	.+146    	; 0x3bd0 <STEPPER_stepmode+0xde>
    3b3e:	80 e0       	ldi	r24, 0x00	; 0
    3b40:	61 e0       	ldi	r22, 0x01	; 1
    3b42:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <STEPPER_set_mode>
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	b7 01       	movw	r22, r14
    3b4a:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <STEPPER_set_accel>
    3b4e:	80 e0       	ldi	r24, 0x00	; 0
    3b50:	64 2d       	mov	r22, r4
    3b52:	a3 01       	movw	r20, r6
    3b54:	98 01       	movw	r18, r16
    3b56:	03 2d       	mov	r16, r3
    3b58:	ee 24       	eor	r14, r14
    3b5a:	e3 94       	inc	r14
    3b5c:	e4 e5       	ldi	r30, 0x54	; 84
    3b5e:	ce 2e       	mov	r12, r30
    3b60:	e7 e0       	ldi	r30, 0x07	; 7
    3b62:	de 2e       	mov	r13, r30
    3b64:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <STEPPER_step>
    3b68:	55 20       	and	r5, r5
    3b6a:	09 f0       	breq	.+2      	; 0x3b6e <STEPPER_stepmode+0x7c>
    3b6c:	6c c0       	rjmp	.+216    	; 0x3c46 <STEPPER_stepmode+0x154>
    3b6e:	00 d0       	rcall	.+0      	; 0x3b70 <STEPPER_stepmode+0x7e>
    3b70:	0f 92       	push	r0
    3b72:	ed b7       	in	r30, 0x3d	; 61
    3b74:	fe b7       	in	r31, 0x3e	; 62
    3b76:	11 82       	std	Z+1, r1	; 0x01
    3b78:	b3 82       	std	Z+3, r11	; 0x03
    3b7a:	a2 82       	std	Z+2, r10	; 0x02
    3b7c:	23 c0       	rjmp	.+70     	; 0x3bc4 <STEPPER_stepmode+0xd2>
    3b7e:	81 e0       	ldi	r24, 0x01	; 1
    3b80:	61 e0       	ldi	r22, 0x01	; 1
    3b82:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <STEPPER_set_mode>
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	b6 01       	movw	r22, r12
    3b8a:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <STEPPER_set_accel>
    3b8e:	81 e0       	ldi	r24, 0x01	; 1
    3b90:	68 2d       	mov	r22, r8
    3b92:	4d 89       	ldd	r20, Y+21	; 0x15
    3b94:	5e 89       	ldd	r21, Y+22	; 0x16
    3b96:	2f 89       	ldd	r18, Y+23	; 0x17
    3b98:	38 8d       	ldd	r19, Y+24	; 0x18
    3b9a:	02 2d       	mov	r16, r2
    3b9c:	ee 24       	eor	r14, r14
    3b9e:	e3 94       	inc	r14
    3ba0:	74 e5       	ldi	r23, 0x54	; 84
    3ba2:	c7 2e       	mov	r12, r23
    3ba4:	77 e0       	ldi	r23, 0x07	; 7
    3ba6:	d7 2e       	mov	r13, r23
    3ba8:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <STEPPER_step>
    3bac:	55 20       	and	r5, r5
    3bae:	09 f0       	breq	.+2      	; 0x3bb2 <STEPPER_stepmode+0xc0>
    3bb0:	4a c0       	rjmp	.+148    	; 0x3c46 <STEPPER_stepmode+0x154>
    3bb2:	00 d0       	rcall	.+0      	; 0x3bb4 <STEPPER_stepmode+0xc2>
    3bb4:	0f 92       	push	r0
    3bb6:	ed b7       	in	r30, 0x3d	; 61
    3bb8:	fe b7       	in	r31, 0x3e	; 62
    3bba:	91 82       	std	Z+1, r9	; 0x01
    3bbc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3bbe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3bc0:	93 83       	std	Z+3, r25	; 0x03
    3bc2:	82 83       	std	Z+2, r24	; 0x02
    3bc4:	0e 94 85 20 	call	0x410a	; 0x410a <STEPPER_wait_and_then>
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	0f 90       	pop	r0
    3bce:	3b c0       	rjmp	.+118    	; 0x3c46 <STEPPER_stepmode+0x154>
    3bd0:	82 e0       	ldi	r24, 0x02	; 2
    3bd2:	61 e0       	ldi	r22, 0x01	; 1
    3bd4:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <STEPPER_set_mode>
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	b7 01       	movw	r22, r14
    3bdc:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <STEPPER_set_accel>
    3be0:	81 e0       	ldi	r24, 0x01	; 1
    3be2:	b6 01       	movw	r22, r12
    3be4:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <STEPPER_set_accel>
    3be8:	80 e0       	ldi	r24, 0x00	; 0
    3bea:	64 2d       	mov	r22, r4
    3bec:	a3 01       	movw	r20, r6
    3bee:	98 01       	movw	r18, r16
    3bf0:	03 2d       	mov	r16, r3
    3bf2:	ee 24       	eor	r14, r14
    3bf4:	e3 94       	inc	r14
    3bf6:	94 e5       	ldi	r25, 0x54	; 84
    3bf8:	c9 2e       	mov	r12, r25
    3bfa:	97 e0       	ldi	r25, 0x07	; 7
    3bfc:	d9 2e       	mov	r13, r25
    3bfe:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <STEPPER_step>
    3c02:	81 e0       	ldi	r24, 0x01	; 1
    3c04:	68 2d       	mov	r22, r8
    3c06:	4d 89       	ldd	r20, Y+21	; 0x15
    3c08:	5e 89       	ldd	r21, Y+22	; 0x16
    3c0a:	2f 89       	ldd	r18, Y+23	; 0x17
    3c0c:	38 8d       	ldd	r19, Y+24	; 0x18
    3c0e:	02 2d       	mov	r16, r2
    3c10:	0e 94 d4 1f 	call	0x3fa8	; 0x3fa8 <STEPPER_step>
    3c14:	55 20       	and	r5, r5
    3c16:	b9 f4       	brne	.+46     	; 0x3c46 <STEPPER_stepmode+0x154>
    3c18:	00 d0       	rcall	.+0      	; 0x3c1a <STEPPER_stepmode+0x128>
    3c1a:	00 d0       	rcall	.+0      	; 0x3c1c <STEPPER_stepmode+0x12a>
    3c1c:	0f 92       	push	r0
    3c1e:	ad b7       	in	r26, 0x3d	; 61
    3c20:	be b7       	in	r27, 0x3e	; 62
    3c22:	11 96       	adiw	r26, 0x01	; 1
    3c24:	ed b7       	in	r30, 0x3d	; 61
    3c26:	fe b7       	in	r31, 0x3e	; 62
    3c28:	91 82       	std	Z+1, r9	; 0x01
    3c2a:	fd 01       	movw	r30, r26
    3c2c:	b2 82       	std	Z+2, r11	; 0x02
    3c2e:	a1 82       	std	Z+1, r10	; 0x01
    3c30:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c32:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3c34:	94 83       	std	Z+4, r25	; 0x04
    3c36:	83 83       	std	Z+3, r24	; 0x03
    3c38:	0e 94 85 20 	call	0x410a	; 0x410a <STEPPER_wait_and_then>
    3c3c:	0f 90       	pop	r0
    3c3e:	0f 90       	pop	r0
    3c40:	0f 90       	pop	r0
    3c42:	0f 90       	pop	r0
    3c44:	0f 90       	pop	r0
    3c46:	cf 91       	pop	r28
    3c48:	df 91       	pop	r29
    3c4a:	1f 91       	pop	r17
    3c4c:	0f 91       	pop	r16
    3c4e:	ff 90       	pop	r15
    3c50:	ef 90       	pop	r14
    3c52:	df 90       	pop	r13
    3c54:	cf 90       	pop	r12
    3c56:	bf 90       	pop	r11
    3c58:	af 90       	pop	r10
    3c5a:	9f 90       	pop	r9
    3c5c:	8f 90       	pop	r8
    3c5e:	7f 90       	pop	r7
    3c60:	6f 90       	pop	r6
    3c62:	5f 90       	pop	r5
    3c64:	4f 90       	pop	r4
    3c66:	3f 90       	pop	r3
    3c68:	2f 90       	pop	r2
    3c6a:	08 95       	ret

00003c6c <STEPPER_move>:
    3c6c:	6f 92       	push	r6
    3c6e:	7f 92       	push	r7
    3c70:	8f 92       	push	r8
    3c72:	9f 92       	push	r9
    3c74:	af 92       	push	r10
    3c76:	bf 92       	push	r11
    3c78:	cf 92       	push	r12
    3c7a:	df 92       	push	r13
    3c7c:	ef 92       	push	r14
    3c7e:	ff 92       	push	r15
    3c80:	0f 93       	push	r16
    3c82:	1f 93       	push	r17
    3c84:	df 93       	push	r29
    3c86:	cf 93       	push	r28
    3c88:	cd b7       	in	r28, 0x3d	; 61
    3c8a:	de b7       	in	r29, 0x3e	; 62
    3c8c:	94 2e       	mov	r9, r20
    3c8e:	7c 2d       	mov	r23, r12
    3c90:	d5 01       	movw	r26, r10
    3c92:	49 89       	ldd	r20, Y+17	; 0x11
    3c94:	5a 89       	ldd	r21, Y+18	; 0x12
    3c96:	ab 88       	ldd	r10, Y+19	; 0x13
    3c98:	bc 88       	ldd	r11, Y+20	; 0x14
    3c9a:	cd 88       	ldd	r12, Y+21	; 0x15
    3c9c:	de 88       	ldd	r13, Y+22	; 0x16
    3c9e:	9f 89       	ldd	r25, Y+23	; 0x17
    3ca0:	81 30       	cpi	r24, 0x01	; 1
    3ca2:	09 f4       	brne	.+2      	; 0x3ca6 <STEPPER_move+0x3a>
    3ca4:	57 c0       	rjmp	.+174    	; 0x3d54 <STEPPER_move+0xe8>
    3ca6:	81 30       	cpi	r24, 0x01	; 1
    3ca8:	b8 f1       	brcs	.+110    	; 0x3d18 <STEPPER_move+0xac>
    3caa:	82 30       	cpi	r24, 0x02	; 2
    3cac:	09 f0       	breq	.+2      	; 0x3cb0 <STEPPER_move+0x44>
    3cae:	76 c0       	rjmp	.+236    	; 0x3d9c <STEPPER_move+0x130>
    3cb0:	61 30       	cpi	r22, 0x01	; 1
    3cb2:	91 f0       	breq	.+36     	; 0x3cd8 <STEPPER_move+0x6c>
    3cb4:	61 30       	cpi	r22, 0x01	; 1
    3cb6:	20 f0       	brcs	.+8      	; 0x3cc0 <STEPPER_move+0x54>
    3cb8:	62 30       	cpi	r22, 0x02	; 2
    3cba:	09 f0       	breq	.+2      	; 0x3cbe <STEPPER_move+0x52>
    3cbc:	6f c0       	rjmp	.+222    	; 0x3d9c <STEPPER_move+0x130>
    3cbe:	15 c0       	rjmp	.+42     	; 0x3cea <STEPPER_move+0x7e>
    3cc0:	80 e0       	ldi	r24, 0x00	; 0
    3cc2:	60 e0       	ldi	r22, 0x00	; 0
    3cc4:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <STEPPER_set_mode>
    3cc8:	80 e0       	ldi	r24, 0x00	; 0
    3cca:	b7 01       	movw	r22, r14
    3ccc:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <STEPPER_set_accel>
    3cd0:	80 e0       	ldi	r24, 0x00	; 0
    3cd2:	69 2d       	mov	r22, r9
    3cd4:	a8 01       	movw	r20, r16
    3cd6:	1d c0       	rjmp	.+58     	; 0x3d12 <STEPPER_move+0xa6>
    3cd8:	81 e0       	ldi	r24, 0x01	; 1
    3cda:	60 e0       	ldi	r22, 0x00	; 0
    3cdc:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <STEPPER_set_mode>
    3ce0:	81 e0       	ldi	r24, 0x01	; 1
    3ce2:	b6 01       	movw	r22, r12
    3ce4:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <STEPPER_set_accel>
    3ce8:	11 c0       	rjmp	.+34     	; 0x3d0c <STEPPER_move+0xa0>
    3cea:	82 e0       	ldi	r24, 0x02	; 2
    3cec:	60 e0       	ldi	r22, 0x00	; 0
    3cee:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <STEPPER_set_mode>
    3cf2:	80 e0       	ldi	r24, 0x00	; 0
    3cf4:	b7 01       	movw	r22, r14
    3cf6:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <STEPPER_set_accel>
    3cfa:	81 e0       	ldi	r24, 0x01	; 1
    3cfc:	b6 01       	movw	r22, r12
    3cfe:	0e 94 4b 1f 	call	0x3e96	; 0x3e96 <STEPPER_set_accel>
    3d02:	80 e0       	ldi	r24, 0x00	; 0
    3d04:	69 2d       	mov	r22, r9
    3d06:	a8 01       	movw	r20, r16
    3d08:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <STEPPER_run>
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	68 2d       	mov	r22, r8
    3d10:	a5 01       	movw	r20, r10
    3d12:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <STEPPER_run>
    3d16:	42 c0       	rjmp	.+132    	; 0x3d9c <STEPPER_move+0x130>
    3d18:	ed b7       	in	r30, 0x3d	; 61
    3d1a:	fe b7       	in	r31, 0x3e	; 62
    3d1c:	39 97       	sbiw	r30, 0x09	; 9
    3d1e:	0f b6       	in	r0, 0x3f	; 63
    3d20:	f8 94       	cli
    3d22:	fe bf       	out	0x3e, r31	; 62
    3d24:	0f be       	out	0x3f, r0	; 63
    3d26:	ed bf       	out	0x3d, r30	; 61
    3d28:	6d b6       	in	r6, 0x3d	; 61
    3d2a:	7e b6       	in	r7, 0x3e	; 62
    3d2c:	08 94       	sec
    3d2e:	61 1c       	adc	r6, r1
    3d30:	71 1c       	adc	r7, r1
    3d32:	52 83       	std	Z+2, r21	; 0x02
    3d34:	41 83       	std	Z+1, r20	; 0x01
    3d36:	f3 01       	movw	r30, r6
    3d38:	b3 82       	std	Z+3, r11	; 0x03
    3d3a:	a2 82       	std	Z+2, r10	; 0x02
    3d3c:	d5 82       	std	Z+5, r13	; 0x05
    3d3e:	c4 82       	std	Z+4, r12	; 0x04
    3d40:	96 83       	std	Z+6, r25	; 0x06
    3d42:	88 8d       	ldd	r24, Y+24	; 0x18
    3d44:	99 8d       	ldd	r25, Y+25	; 0x19
    3d46:	90 87       	std	Z+8, r25	; 0x08
    3d48:	87 83       	std	Z+7, r24	; 0x07
    3d4a:	80 e0       	ldi	r24, 0x00	; 0
    3d4c:	49 2d       	mov	r20, r9
    3d4e:	c7 2e       	mov	r12, r23
    3d50:	5d 01       	movw	r10, r26
    3d52:	1a c0       	rjmp	.+52     	; 0x3d88 <STEPPER_move+0x11c>
    3d54:	ed b7       	in	r30, 0x3d	; 61
    3d56:	fe b7       	in	r31, 0x3e	; 62
    3d58:	39 97       	sbiw	r30, 0x09	; 9
    3d5a:	0f b6       	in	r0, 0x3f	; 63
    3d5c:	f8 94       	cli
    3d5e:	fe bf       	out	0x3e, r31	; 62
    3d60:	0f be       	out	0x3f, r0	; 63
    3d62:	ed bf       	out	0x3d, r30	; 61
    3d64:	ad b7       	in	r26, 0x3d	; 61
    3d66:	be b7       	in	r27, 0x3e	; 62
    3d68:	11 96       	adiw	r26, 0x01	; 1
    3d6a:	52 83       	std	Z+2, r21	; 0x02
    3d6c:	41 83       	std	Z+1, r20	; 0x01
    3d6e:	fd 01       	movw	r30, r26
    3d70:	b3 82       	std	Z+3, r11	; 0x03
    3d72:	a2 82       	std	Z+2, r10	; 0x02
    3d74:	d5 82       	std	Z+5, r13	; 0x05
    3d76:	c4 82       	std	Z+4, r12	; 0x04
    3d78:	96 83       	std	Z+6, r25	; 0x06
    3d7a:	10 86       	std	Z+8, r1	; 0x08
    3d7c:	17 82       	std	Z+7, r1	; 0x07
    3d7e:	81 e0       	ldi	r24, 0x01	; 1
    3d80:	49 2d       	mov	r20, r9
    3d82:	c7 2e       	mov	r12, r23
    3d84:	aa 24       	eor	r10, r10
    3d86:	bb 24       	eor	r11, r11
    3d88:	0e 94 79 1d 	call	0x3af2	; 0x3af2 <STEPPER_stepmode>
    3d8c:	8d b7       	in	r24, 0x3d	; 61
    3d8e:	9e b7       	in	r25, 0x3e	; 62
    3d90:	09 96       	adiw	r24, 0x09	; 9
    3d92:	0f b6       	in	r0, 0x3f	; 63
    3d94:	f8 94       	cli
    3d96:	9e bf       	out	0x3e, r25	; 62
    3d98:	0f be       	out	0x3f, r0	; 63
    3d9a:	8d bf       	out	0x3d, r24	; 61
    3d9c:	cf 91       	pop	r28
    3d9e:	df 91       	pop	r29
    3da0:	1f 91       	pop	r17
    3da2:	0f 91       	pop	r16
    3da4:	ff 90       	pop	r15
    3da6:	ef 90       	pop	r14
    3da8:	df 90       	pop	r13
    3daa:	cf 90       	pop	r12
    3dac:	bf 90       	pop	r11
    3dae:	af 90       	pop	r10
    3db0:	9f 90       	pop	r9
    3db2:	8f 90       	pop	r8
    3db4:	7f 90       	pop	r7
    3db6:	6f 90       	pop	r6
    3db8:	08 95       	ret

00003dba <STEPPER_open>:
    3dba:	0e 94 67 28 	call	0x50ce	; 0x50ce <__STEPPER_init>
    3dbe:	81 e0       	ldi	r24, 0x01	; 1
    3dc0:	80 93 53 07 	sts	0x0753, r24
    3dc4:	ed e1       	ldi	r30, 0x1D	; 29
    3dc6:	f7 e0       	ldi	r31, 0x07	; 7
    3dc8:	11 92       	st	Z+, r1
    3dca:	11 92       	st	Z+, r1
    3dcc:	11 82       	std	Z+1, r1	; 0x01
    3dce:	10 82       	st	Z, r1
    3dd0:	32 96       	adiw	r30, 0x02	; 2
    3dd2:	11 82       	std	Z+1, r1	; 0x01
    3dd4:	10 82       	st	Z, r1
    3dd6:	32 96       	adiw	r30, 0x02	; 2
    3dd8:	11 82       	std	Z+1, r1	; 0x01
    3dda:	10 82       	st	Z, r1
    3ddc:	32 96       	adiw	r30, 0x02	; 2
    3dde:	11 82       	std	Z+1, r1	; 0x01
    3de0:	10 82       	st	Z, r1
    3de2:	32 96       	adiw	r30, 0x02	; 2
    3de4:	11 82       	std	Z+1, r1	; 0x01
    3de6:	10 82       	st	Z, r1
    3de8:	32 96       	adiw	r30, 0x02	; 2
    3dea:	11 82       	std	Z+1, r1	; 0x01
    3dec:	10 82       	st	Z, r1
    3dee:	32 96       	adiw	r30, 0x02	; 2
    3df0:	11 82       	std	Z+1, r1	; 0x01
    3df2:	10 82       	st	Z, r1
    3df4:	32 96       	adiw	r30, 0x02	; 2
    3df6:	11 82       	std	Z+1, r1	; 0x01
    3df8:	10 82       	st	Z, r1
    3dfa:	32 96       	adiw	r30, 0x02	; 2
    3dfc:	11 82       	std	Z+1, r1	; 0x01
    3dfe:	10 82       	st	Z, r1
    3e00:	32 96       	adiw	r30, 0x02	; 2
    3e02:	11 82       	std	Z+1, r1	; 0x01
    3e04:	10 82       	st	Z, r1
    3e06:	32 96       	adiw	r30, 0x02	; 2
    3e08:	11 82       	std	Z+1, r1	; 0x01
    3e0a:	10 82       	st	Z, r1
    3e0c:	32 96       	adiw	r30, 0x02	; 2
    3e0e:	11 82       	std	Z+1, r1	; 0x01
    3e10:	10 82       	st	Z, r1
    3e12:	36 96       	adiw	r30, 0x06	; 6
    3e14:	11 92       	st	Z+, r1
    3e16:	11 92       	st	Z+, r1
    3e18:	11 92       	st	Z+, r1
    3e1a:	10 82       	st	Z, r1
    3e1c:	32 96       	adiw	r30, 0x02	; 2
    3e1e:	11 92       	st	Z+, r1
    3e20:	11 92       	st	Z+, r1
    3e22:	11 92       	st	Z+, r1
    3e24:	11 92       	st	Z+, r1
    3e26:	11 92       	st	Z+, r1
    3e28:	11 92       	st	Z+, r1
    3e2a:	11 92       	st	Z+, r1
    3e2c:	11 82       	std	Z+1, r1	; 0x01
    3e2e:	10 82       	st	Z, r1
    3e30:	32 96       	adiw	r30, 0x02	; 2
    3e32:	11 82       	std	Z+1, r1	; 0x01
    3e34:	10 82       	st	Z, r1
    3e36:	32 96       	adiw	r30, 0x02	; 2
    3e38:	11 82       	std	Z+1, r1	; 0x01
    3e3a:	10 82       	st	Z, r1
    3e3c:	32 96       	adiw	r30, 0x02	; 2
    3e3e:	11 82       	std	Z+1, r1	; 0x01
    3e40:	10 82       	st	Z, r1
    3e42:	76 97       	sbiw	r30, 0x16	; 22
    3e44:	11 82       	std	Z+1, r1	; 0x01
    3e46:	10 82       	st	Z, r1
    3e48:	32 96       	adiw	r30, 0x02	; 2
    3e4a:	11 82       	std	Z+1, r1	; 0x01
    3e4c:	10 82       	st	Z, r1
    3e4e:	10 92 52 07 	sts	0x0752, r1
    3e52:	10 92 51 07 	sts	0x0751, r1
    3e56:	10 92 53 07 	sts	0x0753, r1
    3e5a:	87 e0       	ldi	r24, 0x07	; 7
    3e5c:	61 e0       	ldi	r22, 0x01	; 1
    3e5e:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    3e62:	87 e0       	ldi	r24, 0x07	; 7
    3e64:	91 e0       	ldi	r25, 0x01	; 1
    3e66:	08 95       	ret

00003e68 <STEPPER_run>:
    3e68:	ef 92       	push	r14
    3e6a:	ff 92       	push	r15
    3e6c:	0f 93       	push	r16
    3e6e:	1f 93       	push	r17
    3e70:	18 2f       	mov	r17, r24
    3e72:	06 2f       	mov	r16, r22
    3e74:	7a 01       	movw	r14, r20
    3e76:	60 e0       	ldi	r22, 0x00	; 0
    3e78:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <STEPPER_set_mode>
    3e7c:	81 2f       	mov	r24, r17
    3e7e:	60 2f       	mov	r22, r16
    3e80:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <STEPPER_set_dir>
    3e84:	81 2f       	mov	r24, r17
    3e86:	b7 01       	movw	r22, r14
    3e88:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <STEPPER_set_speed>
    3e8c:	1f 91       	pop	r17
    3e8e:	0f 91       	pop	r16
    3e90:	ff 90       	pop	r15
    3e92:	ef 90       	pop	r14
    3e94:	08 95       	ret

00003e96 <STEPPER_set_accel>:
    3e96:	48 2f       	mov	r20, r24
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	80 93 53 07 	sts	0x0753, r24
    3e9e:	cb 01       	movw	r24, r22
    3ea0:	23 e0       	ldi	r18, 0x03	; 3
    3ea2:	69 3e       	cpi	r22, 0xE9	; 233
    3ea4:	72 07       	cpc	r23, r18
    3ea6:	10 f0       	brcs	.+4      	; 0x3eac <STEPPER_set_accel+0x16>
    3ea8:	88 ee       	ldi	r24, 0xE8	; 232
    3eaa:	93 e0       	ldi	r25, 0x03	; 3
    3eac:	41 30       	cpi	r20, 0x01	; 1
    3eae:	71 f0       	breq	.+28     	; 0x3ecc <STEPPER_set_accel+0x36>
    3eb0:	41 30       	cpi	r20, 0x01	; 1
    3eb2:	18 f0       	brcs	.+6      	; 0x3eba <STEPPER_set_accel+0x24>
    3eb4:	42 30       	cpi	r20, 0x02	; 2
    3eb6:	71 f4       	brne	.+28     	; 0x3ed4 <STEPPER_set_accel+0x3e>
    3eb8:	05 c0       	rjmp	.+10     	; 0x3ec4 <STEPPER_set_accel+0x2e>
    3eba:	90 93 28 07 	sts	0x0728, r25
    3ebe:	80 93 27 07 	sts	0x0727, r24
    3ec2:	08 c0       	rjmp	.+16     	; 0x3ed4 <STEPPER_set_accel+0x3e>
    3ec4:	90 93 28 07 	sts	0x0728, r25
    3ec8:	80 93 27 07 	sts	0x0727, r24
    3ecc:	90 93 2a 07 	sts	0x072A, r25
    3ed0:	80 93 29 07 	sts	0x0729, r24
    3ed4:	10 92 53 07 	sts	0x0753, r1
    3ed8:	08 95       	ret

00003eda <STEPPER_set_dir>:
    3eda:	98 2f       	mov	r25, r24
    3edc:	81 e0       	ldi	r24, 0x01	; 1
    3ede:	80 93 53 07 	sts	0x0753, r24
    3ee2:	91 30       	cpi	r25, 0x01	; 1
    3ee4:	51 f0       	breq	.+20     	; 0x3efa <STEPPER_set_dir+0x20>
    3ee6:	91 30       	cpi	r25, 0x01	; 1
    3ee8:	18 f0       	brcs	.+6      	; 0x3ef0 <STEPPER_set_dir+0x16>
    3eea:	92 30       	cpi	r25, 0x02	; 2
    3eec:	41 f4       	brne	.+16     	; 0x3efe <STEPPER_set_dir+0x24>
    3eee:	03 c0       	rjmp	.+6      	; 0x3ef6 <STEPPER_set_dir+0x1c>
    3ef0:	60 93 40 07 	sts	0x0740, r22
    3ef4:	04 c0       	rjmp	.+8      	; 0x3efe <STEPPER_set_dir+0x24>
    3ef6:	60 93 40 07 	sts	0x0740, r22
    3efa:	60 93 41 07 	sts	0x0741, r22
    3efe:	10 92 53 07 	sts	0x0753, r1
    3f02:	08 95       	ret

00003f04 <STEPPER_set_mode>:
    3f04:	98 2f       	mov	r25, r24
    3f06:	81 e0       	ldi	r24, 0x01	; 1
    3f08:	80 93 53 07 	sts	0x0753, r24
    3f0c:	91 30       	cpi	r25, 0x01	; 1
    3f0e:	51 f0       	breq	.+20     	; 0x3f24 <STEPPER_set_mode+0x20>
    3f10:	91 30       	cpi	r25, 0x01	; 1
    3f12:	18 f0       	brcs	.+6      	; 0x3f1a <STEPPER_set_mode+0x16>
    3f14:	92 30       	cpi	r25, 0x02	; 2
    3f16:	41 f4       	brne	.+16     	; 0x3f28 <STEPPER_set_mode+0x24>
    3f18:	03 c0       	rjmp	.+6      	; 0x3f20 <STEPPER_set_mode+0x1c>
    3f1a:	60 93 1d 07 	sts	0x071D, r22
    3f1e:	04 c0       	rjmp	.+8      	; 0x3f28 <STEPPER_set_mode+0x24>
    3f20:	60 93 1d 07 	sts	0x071D, r22
    3f24:	60 93 1e 07 	sts	0x071E, r22
    3f28:	10 92 53 07 	sts	0x0753, r1
    3f2c:	08 95       	ret

00003f2e <STEPPER_set_speed>:
    3f2e:	48 2f       	mov	r20, r24
    3f30:	81 e0       	ldi	r24, 0x01	; 1
    3f32:	80 93 53 07 	sts	0x0753, r24
    3f36:	cb 01       	movw	r24, r22
    3f38:	21 e0       	ldi	r18, 0x01	; 1
    3f3a:	61 39       	cpi	r22, 0x91	; 145
    3f3c:	72 07       	cpc	r23, r18
    3f3e:	10 f0       	brcs	.+4      	; 0x3f44 <STEPPER_set_speed+0x16>
    3f40:	80 e9       	ldi	r24, 0x90	; 144
    3f42:	91 e0       	ldi	r25, 0x01	; 1
    3f44:	41 30       	cpi	r20, 0x01	; 1
    3f46:	71 f0       	breq	.+28     	; 0x3f64 <STEPPER_set_speed+0x36>
    3f48:	41 30       	cpi	r20, 0x01	; 1
    3f4a:	18 f0       	brcs	.+6      	; 0x3f52 <STEPPER_set_speed+0x24>
    3f4c:	42 30       	cpi	r20, 0x02	; 2
    3f4e:	71 f4       	brne	.+28     	; 0x3f6c <STEPPER_set_speed+0x3e>
    3f50:	05 c0       	rjmp	.+10     	; 0x3f5c <STEPPER_set_speed+0x2e>
    3f52:	90 93 20 07 	sts	0x0720, r25
    3f56:	80 93 1f 07 	sts	0x071F, r24
    3f5a:	08 c0       	rjmp	.+16     	; 0x3f6c <STEPPER_set_speed+0x3e>
    3f5c:	90 93 20 07 	sts	0x0720, r25
    3f60:	80 93 1f 07 	sts	0x071F, r24
    3f64:	90 93 22 07 	sts	0x0722, r25
    3f68:	80 93 21 07 	sts	0x0721, r24
    3f6c:	10 92 53 07 	sts	0x0753, r1
    3f70:	08 95       	ret

00003f72 <STEPPER_set_steps>:
    3f72:	98 2f       	mov	r25, r24
    3f74:	81 e0       	ldi	r24, 0x01	; 1
    3f76:	80 93 53 07 	sts	0x0753, r24
    3f7a:	91 30       	cpi	r25, 0x01	; 1
    3f7c:	71 f0       	breq	.+28     	; 0x3f9a <STEPPER_set_steps+0x28>
    3f7e:	91 30       	cpi	r25, 0x01	; 1
    3f80:	18 f0       	brcs	.+6      	; 0x3f88 <STEPPER_set_steps+0x16>
    3f82:	92 30       	cpi	r25, 0x02	; 2
    3f84:	71 f4       	brne	.+28     	; 0x3fa2 <STEPPER_set_steps+0x30>
    3f86:	05 c0       	rjmp	.+10     	; 0x3f92 <STEPPER_set_steps+0x20>
    3f88:	70 93 30 07 	sts	0x0730, r23
    3f8c:	60 93 2f 07 	sts	0x072F, r22
    3f90:	08 c0       	rjmp	.+16     	; 0x3fa2 <STEPPER_set_steps+0x30>
    3f92:	70 93 30 07 	sts	0x0730, r23
    3f96:	60 93 2f 07 	sts	0x072F, r22
    3f9a:	70 93 32 07 	sts	0x0732, r23
    3f9e:	60 93 31 07 	sts	0x0731, r22
    3fa2:	10 92 53 07 	sts	0x0753, r1
    3fa6:	08 95       	ret

00003fa8 <STEPPER_step>:
    3fa8:	8f 92       	push	r8
    3faa:	9f 92       	push	r9
    3fac:	af 92       	push	r10
    3fae:	bf 92       	push	r11
    3fb0:	cf 92       	push	r12
    3fb2:	df 92       	push	r13
    3fb4:	ef 92       	push	r14
    3fb6:	ff 92       	push	r15
    3fb8:	0f 93       	push	r16
    3fba:	1f 93       	push	r17
    3fbc:	cf 93       	push	r28
    3fbe:	df 93       	push	r29
    3fc0:	18 2f       	mov	r17, r24
    3fc2:	f6 2e       	mov	r15, r22
    3fc4:	5a 01       	movw	r10, r20
    3fc6:	49 01       	movw	r8, r18
    3fc8:	e6 01       	movw	r28, r12
    3fca:	61 e0       	ldi	r22, 0x01	; 1
    3fcc:	0e 94 82 1f 	call	0x3f04	; 0x3f04 <STEPPER_set_mode>
    3fd0:	81 2f       	mov	r24, r17
    3fd2:	b5 01       	movw	r22, r10
    3fd4:	a4 01       	movw	r20, r8
    3fd6:	0e 94 86 28 	call	0x510c	; 0x510c <STEPPER_setup_decels>
    3fda:	81 2f       	mov	r24, r17
    3fdc:	6f 2d       	mov	r22, r15
    3fde:	0e 94 6d 1f 	call	0x3eda	; 0x3eda <STEPPER_set_dir>
    3fe2:	81 2f       	mov	r24, r17
    3fe4:	60 2f       	mov	r22, r16
    3fe6:	0e 94 71 28 	call	0x50e2	; 0x50e2 <STEPPER_set_stop_mode>
    3fea:	81 2f       	mov	r24, r17
    3fec:	b5 01       	movw	r22, r10
    3fee:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <STEPPER_set_steps>
    3ff2:	c1 14       	cp	r12, r1
    3ff4:	d1 04       	cpc	r13, r1
    3ff6:	99 f0       	breq	.+38     	; 0x401e <STEPPER_step+0x76>
    3ff8:	11 30       	cpi	r17, 0x01	; 1
    3ffa:	49 f0       	breq	.+18     	; 0x400e <STEPPER_step+0x66>
    3ffc:	11 30       	cpi	r17, 0x01	; 1
    3ffe:	18 f0       	brcs	.+6      	; 0x4006 <STEPPER_step+0x5e>
    4000:	12 30       	cpi	r17, 0x02	; 2
    4002:	69 f4       	brne	.+26     	; 0x401e <STEPPER_step+0x76>
    4004:	06 c0       	rjmp	.+12     	; 0x4012 <STEPPER_step+0x6a>
    4006:	18 82       	st	Y, r1
    4008:	10 92 4f 07 	sts	0x074F, r1
    400c:	08 c0       	rjmp	.+16     	; 0x401e <STEPPER_step+0x76>
    400e:	19 82       	std	Y+1, r1	; 0x01
    4010:	04 c0       	rjmp	.+8      	; 0x401a <STEPPER_step+0x72>
    4012:	18 82       	st	Y, r1
    4014:	19 82       	std	Y+1, r1	; 0x01
    4016:	10 92 4f 07 	sts	0x074F, r1
    401a:	10 92 50 07 	sts	0x0750, r1
    401e:	d0 93 52 07 	sts	0x0752, r29
    4022:	c0 93 51 07 	sts	0x0751, r28
    4026:	ee 20       	and	r14, r14
    4028:	b9 f5       	brne	.+110    	; 0x4098 <STEPPER_step+0xf0>
    402a:	8a ee       	ldi	r24, 0xEA	; 234
    402c:	93 e0       	ldi	r25, 0x03	; 3
    402e:	90 93 52 07 	sts	0x0752, r25
    4032:	80 93 51 07 	sts	0x0751, r24
    4036:	81 2f       	mov	r24, r17
    4038:	b4 01       	movw	r22, r8
    403a:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <STEPPER_set_speed>
    403e:	81 2f       	mov	r24, r17
    4040:	0e 94 52 28 	call	0x50a4	; 0x50a4 <STEPPER_go>
    4044:	11 30       	cpi	r17, 0x01	; 1
    4046:	71 f0       	breq	.+28     	; 0x4064 <STEPPER_step+0xbc>
    4048:	11 30       	cpi	r17, 0x01	; 1
    404a:	18 f0       	brcs	.+6      	; 0x4052 <STEPPER_step+0xaa>
    404c:	12 30       	cpi	r17, 0x02	; 2
    404e:	59 f5       	brne	.+86     	; 0x40a6 <STEPPER_step+0xfe>
    4050:	12 c0       	rjmp	.+36     	; 0x4076 <STEPPER_step+0xce>
    4052:	10 92 ea 03 	sts	0x03EA, r1
    4056:	10 92 4f 07 	sts	0x074F, r1
    405a:	80 91 ea 03 	lds	r24, 0x03EA
    405e:	88 23       	and	r24, r24
    4060:	e1 f3       	breq	.-8      	; 0x405a <STEPPER_step+0xb2>
    4062:	21 c0       	rjmp	.+66     	; 0x40a6 <STEPPER_step+0xfe>
    4064:	10 92 eb 03 	sts	0x03EB, r1
    4068:	10 92 50 07 	sts	0x0750, r1
    406c:	80 91 eb 03 	lds	r24, 0x03EB
    4070:	88 23       	and	r24, r24
    4072:	e1 f3       	breq	.-8      	; 0x406c <STEPPER_step+0xc4>
    4074:	18 c0       	rjmp	.+48     	; 0x40a6 <STEPPER_step+0xfe>
    4076:	10 92 ea 03 	sts	0x03EA, r1
    407a:	10 92 eb 03 	sts	0x03EB, r1
    407e:	10 92 4f 07 	sts	0x074F, r1
    4082:	10 92 50 07 	sts	0x0750, r1
    4086:	80 91 ea 03 	lds	r24, 0x03EA
    408a:	88 23       	and	r24, r24
    408c:	e1 f3       	breq	.-8      	; 0x4086 <STEPPER_step+0xde>
    408e:	80 91 eb 03 	lds	r24, 0x03EB
    4092:	88 23       	and	r24, r24
    4094:	c1 f3       	breq	.-16     	; 0x4086 <STEPPER_step+0xde>
    4096:	07 c0       	rjmp	.+14     	; 0x40a6 <STEPPER_step+0xfe>
    4098:	81 2f       	mov	r24, r17
    409a:	b4 01       	movw	r22, r8
    409c:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <STEPPER_set_speed>
    40a0:	81 2f       	mov	r24, r17
    40a2:	0e 94 52 28 	call	0x50a4	; 0x50a4 <STEPPER_go>
    40a6:	df 91       	pop	r29
    40a8:	cf 91       	pop	r28
    40aa:	1f 91       	pop	r17
    40ac:	0f 91       	pop	r16
    40ae:	ff 90       	pop	r15
    40b0:	ef 90       	pop	r14
    40b2:	df 90       	pop	r13
    40b4:	cf 90       	pop	r12
    40b6:	bf 90       	pop	r11
    40b8:	af 90       	pop	r10
    40ba:	9f 90       	pop	r9
    40bc:	8f 90       	pop	r8
    40be:	08 95       	ret

000040c0 <STEPPER_stop>:
    40c0:	0f 93       	push	r16
    40c2:	1f 93       	push	r17
    40c4:	18 2f       	mov	r17, r24
    40c6:	06 2f       	mov	r16, r22
    40c8:	66 23       	and	r22, r22
    40ca:	49 f4       	brne	.+18     	; 0x40de <STEPPER_stop+0x1e>
    40cc:	60 e0       	ldi	r22, 0x00	; 0
    40ce:	70 e0       	ldi	r23, 0x00	; 0
    40d0:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <STEPPER_set_speed>
    40d4:	81 2f       	mov	r24, r17
    40d6:	60 e0       	ldi	r22, 0x00	; 0
    40d8:	70 e0       	ldi	r23, 0x00	; 0
    40da:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <STEPPER_set_steps>
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	80 93 53 07 	sts	0x0753, r24
    40e4:	11 30       	cpi	r17, 0x01	; 1
    40e6:	51 f0       	breq	.+20     	; 0x40fc <STEPPER_stop+0x3c>
    40e8:	11 30       	cpi	r17, 0x01	; 1
    40ea:	18 f0       	brcs	.+6      	; 0x40f2 <STEPPER_stop+0x32>
    40ec:	12 30       	cpi	r17, 0x02	; 2
    40ee:	41 f4       	brne	.+16     	; 0x4100 <STEPPER_stop+0x40>
    40f0:	03 c0       	rjmp	.+6      	; 0x40f8 <STEPPER_stop+0x38>
    40f2:	00 93 3b 07 	sts	0x073B, r16
    40f6:	04 c0       	rjmp	.+8      	; 0x4100 <STEPPER_stop+0x40>
    40f8:	00 93 3b 07 	sts	0x073B, r16
    40fc:	00 93 3c 07 	sts	0x073C, r16
    4100:	10 92 53 07 	sts	0x0753, r1
    4104:	1f 91       	pop	r17
    4106:	0f 91       	pop	r16
    4108:	08 95       	ret

0000410a <STEPPER_wait_and_then>:
    410a:	cf 92       	push	r12
    410c:	df 92       	push	r13
    410e:	ef 92       	push	r14
    4110:	ff 92       	push	r15
    4112:	0f 93       	push	r16
    4114:	1f 93       	push	r17
    4116:	df 93       	push	r29
    4118:	cf 93       	push	r28
    411a:	cd b7       	in	r28, 0x3d	; 61
    411c:	de b7       	in	r29, 0x3e	; 62
    411e:	8b 85       	ldd	r24, Y+11	; 0x0b
    4120:	81 30       	cpi	r24, 0x01	; 1
    4122:	61 f0       	breq	.+24     	; 0x413c <STEPPER_wait_and_then+0x32>
    4124:	81 30       	cpi	r24, 0x01	; 1
    4126:	18 f0       	brcs	.+6      	; 0x412e <STEPPER_wait_and_then+0x24>
    4128:	82 30       	cpi	r24, 0x02	; 2
    412a:	a1 f5       	brne	.+104    	; 0x4194 <STEPPER_wait_and_then+0x8a>
    412c:	11 c0       	rjmp	.+34     	; 0x4150 <STEPPER_wait_and_then+0x46>
    412e:	ec 85       	ldd	r30, Y+12	; 0x0c
    4130:	fd 85       	ldd	r31, Y+13	; 0x0d
    4132:	80 91 54 07 	lds	r24, 0x0754
    4136:	88 23       	and	r24, r24
    4138:	e1 f3       	breq	.-8      	; 0x4132 <STEPPER_wait_and_then+0x28>
    413a:	06 c0       	rjmp	.+12     	; 0x4148 <STEPPER_wait_and_then+0x3e>
    413c:	ec 85       	ldd	r30, Y+12	; 0x0c
    413e:	fd 85       	ldd	r31, Y+13	; 0x0d
    4140:	80 91 55 07 	lds	r24, 0x0755
    4144:	88 23       	and	r24, r24
    4146:	e1 f3       	breq	.-8      	; 0x4140 <STEPPER_wait_and_then+0x36>
    4148:	30 97       	sbiw	r30, 0x00	; 0
    414a:	21 f1       	breq	.+72     	; 0x4194 <STEPPER_wait_and_then+0x8a>
    414c:	09 95       	icall
    414e:	22 c0       	rjmp	.+68     	; 0x4194 <STEPPER_wait_and_then+0x8a>
    4150:	cc 84       	ldd	r12, Y+12	; 0x0c
    4152:	dd 84       	ldd	r13, Y+13	; 0x0d
    4154:	ee 84       	ldd	r14, Y+14	; 0x0e
    4156:	ff 84       	ldd	r15, Y+15	; 0x0f
    4158:	00 e0       	ldi	r16, 0x00	; 0
    415a:	10 e0       	ldi	r17, 0x00	; 0
    415c:	00 23       	and	r16, r16
    415e:	51 f4       	brne	.+20     	; 0x4174 <STEPPER_wait_and_then+0x6a>
    4160:	80 91 54 07 	lds	r24, 0x0754
    4164:	88 23       	and	r24, r24
    4166:	31 f0       	breq	.+12     	; 0x4174 <STEPPER_wait_and_then+0x6a>
    4168:	c1 14       	cp	r12, r1
    416a:	d1 04       	cpc	r13, r1
    416c:	11 f0       	breq	.+4      	; 0x4172 <STEPPER_wait_and_then+0x68>
    416e:	f6 01       	movw	r30, r12
    4170:	09 95       	icall
    4172:	01 e0       	ldi	r16, 0x01	; 1
    4174:	11 23       	and	r17, r17
    4176:	51 f4       	brne	.+20     	; 0x418c <STEPPER_wait_and_then+0x82>
    4178:	80 91 55 07 	lds	r24, 0x0755
    417c:	88 23       	and	r24, r24
    417e:	31 f0       	breq	.+12     	; 0x418c <STEPPER_wait_and_then+0x82>
    4180:	e1 14       	cp	r14, r1
    4182:	f1 04       	cpc	r15, r1
    4184:	11 f0       	breq	.+4      	; 0x418a <STEPPER_wait_and_then+0x80>
    4186:	f7 01       	movw	r30, r14
    4188:	09 95       	icall
    418a:	11 e0       	ldi	r17, 0x01	; 1
    418c:	00 23       	and	r16, r16
    418e:	31 f3       	breq	.-52     	; 0x415c <STEPPER_wait_and_then+0x52>
    4190:	11 23       	and	r17, r17
    4192:	21 f3       	breq	.-56     	; 0x415c <STEPPER_wait_and_then+0x52>
    4194:	cf 91       	pop	r28
    4196:	df 91       	pop	r29
    4198:	1f 91       	pop	r17
    419a:	0f 91       	pop	r16
    419c:	ff 90       	pop	r15
    419e:	ef 90       	pop	r14
    41a0:	df 90       	pop	r13
    41a2:	cf 90       	pop	r12
    41a4:	08 95       	ret

000041a6 <SYS_get_state>:
    41a6:	e8 2f       	mov	r30, r24
    41a8:	f0 e0       	ldi	r31, 0x00	; 0
    41aa:	e3 31       	cpi	r30, 0x13	; 19
    41ac:	f1 05       	cpc	r31, r1
    41ae:	40 f4       	brcc	.+16     	; 0x41c0 <SYS_get_state+0x1a>
    41b0:	e2 5c       	subi	r30, 0xC2	; 194
    41b2:	ff 4f       	sbci	r31, 0xFF	; 255
    41b4:	ee 0f       	add	r30, r30
    41b6:	ff 1f       	adc	r31, r31
    41b8:	05 90       	lpm	r0, Z+
    41ba:	f4 91       	lpm	r31, Z+
    41bc:	e0 2d       	mov	r30, r0
    41be:	09 94       	ijmp
    41c0:	80 e0       	ldi	r24, 0x00	; 0
    41c2:	08 95       	ret
    41c4:	80 91 56 07 	lds	r24, 0x0756
    41c8:	08 95       	ret
    41ca:	80 91 57 07 	lds	r24, 0x0757
    41ce:	08 95       	ret
    41d0:	80 91 58 07 	lds	r24, 0x0758
    41d4:	08 95       	ret
    41d6:	80 91 59 07 	lds	r24, 0x0759
    41da:	08 95       	ret
    41dc:	80 91 5a 07 	lds	r24, 0x075A
    41e0:	08 95       	ret
    41e2:	80 91 5c 07 	lds	r24, 0x075C
    41e6:	08 95       	ret
    41e8:	80 91 5b 07 	lds	r24, 0x075B
    41ec:	08 95       	ret
    41ee:	80 91 5d 07 	lds	r24, 0x075D
    41f2:	08 95       	ret
    41f4:	80 91 5e 07 	lds	r24, 0x075E
    41f8:	08 95       	ret
    41fa:	80 91 5f 07 	lds	r24, 0x075F
    41fe:	08 95       	ret
    4200:	80 91 60 07 	lds	r24, 0x0760
    4204:	08 95       	ret
    4206:	80 91 61 07 	lds	r24, 0x0761
    420a:	08 95       	ret
    420c:	80 91 62 07 	lds	r24, 0x0762
    4210:	08 95       	ret
    4212:	80 91 63 07 	lds	r24, 0x0763
    4216:	08 95       	ret
    4218:	80 91 64 07 	lds	r24, 0x0764
    421c:	08 95       	ret
    421e:	80 91 65 07 	lds	r24, 0x0765
    4222:	08 95       	ret
    4224:	80 91 66 07 	lds	r24, 0x0766
    4228:	08 95       	ret
    422a:	80 91 67 07 	lds	r24, 0x0767
    422e:	08 95       	ret
    4230:	80 91 68 07 	lds	r24, 0x0768
    4234:	08 95       	ret

00004236 <SYS_set_state>:
    4236:	e8 2f       	mov	r30, r24
    4238:	f0 e0       	ldi	r31, 0x00	; 0
    423a:	e3 31       	cpi	r30, 0x13	; 19
    423c:	f1 05       	cpc	r31, r1
    423e:	08 f0       	brcs	.+2      	; 0x4242 <SYS_set_state+0xc>
    4240:	40 c0       	rjmp	.+128    	; 0x42c2 <SYS_set_state+0x8c>
    4242:	ef 5a       	subi	r30, 0xAF	; 175
    4244:	ff 4f       	sbci	r31, 0xFF	; 255
    4246:	ee 0f       	add	r30, r30
    4248:	ff 1f       	adc	r31, r31
    424a:	05 90       	lpm	r0, Z+
    424c:	f4 91       	lpm	r31, Z+
    424e:	e0 2d       	mov	r30, r0
    4250:	09 94       	ijmp
    4252:	60 93 56 07 	sts	0x0756, r22
    4256:	08 95       	ret
    4258:	60 93 57 07 	sts	0x0757, r22
    425c:	08 95       	ret
    425e:	60 93 58 07 	sts	0x0758, r22
    4262:	08 95       	ret
    4264:	60 93 59 07 	sts	0x0759, r22
    4268:	08 95       	ret
    426a:	60 93 5a 07 	sts	0x075A, r22
    426e:	08 95       	ret
    4270:	60 93 5c 07 	sts	0x075C, r22
    4274:	08 95       	ret
    4276:	60 93 5b 07 	sts	0x075B, r22
    427a:	08 95       	ret
    427c:	60 93 5d 07 	sts	0x075D, r22
    4280:	08 95       	ret
    4282:	60 93 5e 07 	sts	0x075E, r22
    4286:	08 95       	ret
    4288:	60 93 5f 07 	sts	0x075F, r22
    428c:	08 95       	ret
    428e:	60 93 60 07 	sts	0x0760, r22
    4292:	08 95       	ret
    4294:	60 93 61 07 	sts	0x0761, r22
    4298:	08 95       	ret
    429a:	60 93 62 07 	sts	0x0762, r22
    429e:	08 95       	ret
    42a0:	60 93 63 07 	sts	0x0763, r22
    42a4:	08 95       	ret
    42a6:	60 93 64 07 	sts	0x0764, r22
    42aa:	08 95       	ret
    42ac:	60 93 65 07 	sts	0x0765, r22
    42b0:	08 95       	ret
    42b2:	60 93 66 07 	sts	0x0766, r22
    42b6:	08 95       	ret
    42b8:	60 93 67 07 	sts	0x0767, r22
    42bc:	08 95       	ret
    42be:	60 93 66 07 	sts	0x0766, r22
    42c2:	08 95       	ret

000042c4 <ATTINY_get_sensors>:
    42c4:	0f 93       	push	r16
    42c6:	1f 93       	push	r17
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    42ce:	81 30       	cpi	r24, 0x01	; 1
    42d0:	11 f0       	breq	.+4      	; 0x42d6 <ATTINY_get_sensors+0x12>
    42d2:	00 e0       	ldi	r16, 0x00	; 0
    42d4:	24 c0       	rjmp	.+72     	; 0x431e <ATTINY_get_sensors+0x5a>
    42d6:	87 e0       	ldi	r24, 0x07	; 7
    42d8:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <SPI_set_slave_addr>
    42dc:	82 e0       	ldi	r24, 0x02	; 2
    42de:	6a e0       	ldi	r22, 0x0A	; 10
    42e0:	0e 94 c1 1c 	call	0x3982	; 0x3982 <SPI_transmit>
    42e4:	82 e0       	ldi	r24, 0x02	; 2
    42e6:	62 eb       	ldi	r22, 0xB2	; 178
    42e8:	0e 94 c1 1c 	call	0x3982	; 0x3982 <SPI_transmit>
    42ec:	18 ec       	ldi	r17, 0xC8	; 200
    42ee:	81 2f       	mov	r24, r17
    42f0:	8a 95       	dec	r24
    42f2:	f1 f7       	brne	.-4      	; 0x42f0 <ATTINY_get_sensors+0x2c>
    42f4:	82 e0       	ldi	r24, 0x02	; 2
    42f6:	60 e0       	ldi	r22, 0x00	; 0
    42f8:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <SPI_receive>
    42fc:	08 2f       	mov	r16, r24
    42fe:	81 2f       	mov	r24, r17
    4300:	8a 95       	dec	r24
    4302:	f1 f7       	brne	.-4      	; 0x4300 <ATTINY_get_sensors+0x3c>
    4304:	82 e0       	ldi	r24, 0x02	; 2
    4306:	60 e0       	ldi	r22, 0x00	; 0
    4308:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <SPI_receive>
    430c:	1a 95       	dec	r17
    430e:	f1 f7       	brne	.-4      	; 0x430c <ATTINY_get_sensors+0x48>
    4310:	87 e0       	ldi	r24, 0x07	; 7
    4312:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <SPI_set_slave_addr>
    4316:	88 e8       	ldi	r24, 0x88	; 136
    4318:	93 e1       	ldi	r25, 0x13	; 19
    431a:	01 97       	sbiw	r24, 0x01	; 1
    431c:	f1 f7       	brne	.-4      	; 0x431a <ATTINY_get_sensors+0x56>
    431e:	80 2f       	mov	r24, r16
    4320:	1f 91       	pop	r17
    4322:	0f 91       	pop	r16
    4324:	08 95       	ret

00004326 <ATTINY_get_SW_state>:
    4326:	1f 93       	push	r17
    4328:	cf 93       	push	r28
    432a:	df 93       	push	r29
    432c:	18 2f       	mov	r17, r24
    432e:	80 91 ed 03 	lds	r24, 0x03ED
    4332:	88 23       	and	r24, r24
    4334:	41 f0       	breq	.+16     	; 0x4346 <ATTINY_get_SW_state+0x20>
    4336:	80 91 f7 03 	lds	r24, 0x03F7
    433a:	88 23       	and	r24, r24
    433c:	99 f0       	breq	.+38     	; 0x4364 <ATTINY_get_SW_state+0x3e>
    433e:	10 92 ed 03 	sts	0x03ED, r1
    4342:	10 92 f7 03 	sts	0x03F7, r1
    4346:	0e 94 62 21 	call	0x42c4	; 0x42c4 <ATTINY_get_sensors>
    434a:	80 93 ec 03 	sts	0x03EC, r24
    434e:	81 ef       	ldi	r24, 0xF1	; 241
    4350:	93 e0       	ldi	r25, 0x03	; 3
    4352:	61 e0       	ldi	r22, 0x01	; 1
    4354:	40 e0       	ldi	r20, 0x00	; 0
    4356:	22 e3       	ldi	r18, 0x32	; 50
    4358:	30 e0       	ldi	r19, 0x00	; 0
    435a:	0e 94 51 22 	call	0x44a2	; 0x44a2 <TMRSRVC_new>
    435e:	81 e0       	ldi	r24, 0x01	; 1
    4360:	80 93 ed 03 	sts	0x03ED, r24
    4364:	90 91 ec 03 	lds	r25, 0x03EC
    4368:	a1 2f       	mov	r26, r17
    436a:	b0 e0       	ldi	r27, 0x00	; 0
    436c:	ed 01       	movw	r28, r26
    436e:	c8 57       	subi	r28, 0x78	; 120
    4370:	dc 4f       	sbci	r29, 0xFC	; 252
    4372:	88 81       	ld	r24, Y
    4374:	88 23       	and	r24, r24
    4376:	69 f0       	breq	.+26     	; 0x4392 <ATTINY_get_SW_state+0x6c>
    4378:	fd 01       	movw	r30, r26
    437a:	e5 57       	subi	r30, 0x75	; 117
    437c:	fc 4f       	sbci	r31, 0xFC	; 252
    437e:	80 81       	ld	r24, Z
    4380:	98 23       	and	r25, r24
    4382:	c1 f0       	breq	.+48     	; 0x43b4 <ATTINY_get_SW_state+0x8e>
    4384:	fd 01       	movw	r30, r26
    4386:	e2 51       	subi	r30, 0x12	; 18
    4388:	fc 4f       	sbci	r31, 0xFC	; 252
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	80 83       	st	Z, r24
    438e:	18 82       	st	Y, r1
    4390:	11 c0       	rjmp	.+34     	; 0x43b4 <ATTINY_get_SW_state+0x8e>
    4392:	fd 01       	movw	r30, r26
    4394:	e2 51       	subi	r30, 0x12	; 18
    4396:	fc 4f       	sbci	r31, 0xFC	; 252
    4398:	80 81       	ld	r24, Z
    439a:	81 11       	cpse	r24, r1
    439c:	10 82       	st	Z, r1
    439e:	fd 01       	movw	r30, r26
    43a0:	e5 57       	subi	r30, 0x75	; 117
    43a2:	fc 4f       	sbci	r31, 0xFC	; 252
    43a4:	80 81       	ld	r24, Z
    43a6:	98 23       	and	r25, r24
    43a8:	29 f4       	brne	.+10     	; 0x43b4 <ATTINY_get_SW_state+0x8e>
    43aa:	fd 01       	movw	r30, r26
    43ac:	e8 57       	subi	r30, 0x78	; 120
    43ae:	fc 4f       	sbci	r31, 0xFC	; 252
    43b0:	81 e0       	ldi	r24, 0x01	; 1
    43b2:	80 83       	st	Z, r24
    43b4:	a2 51       	subi	r26, 0x12	; 18
    43b6:	bc 4f       	sbci	r27, 0xFC	; 252
    43b8:	8c 91       	ld	r24, X
    43ba:	df 91       	pop	r29
    43bc:	cf 91       	pop	r28
    43be:	1f 91       	pop	r17
    43c0:	08 95       	ret

000043c2 <ATTINY_open>:
    43c2:	82 e0       	ldi	r24, 0x02	; 2
    43c4:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    43c8:	88 23       	and	r24, r24
    43ca:	19 f4       	brne	.+6      	; 0x43d2 <ATTINY_open+0x10>
    43cc:	90 e0       	ldi	r25, 0x00	; 0
    43ce:	82 e0       	ldi	r24, 0x02	; 2
    43d0:	08 95       	ret
    43d2:	10 92 84 07 	sts	0x0784, r1
    43d6:	10 92 83 07 	sts	0x0783, r1
    43da:	10 92 86 07 	sts	0x0786, r1
    43de:	10 92 85 07 	sts	0x0785, r1
    43e2:	10 92 88 07 	sts	0x0788, r1
    43e6:	10 92 87 07 	sts	0x0787, r1
    43ea:	10 92 8a 07 	sts	0x078A, r1
    43ee:	10 92 89 07 	sts	0x0789, r1
    43f2:	10 92 8c 07 	sts	0x078C, r1
    43f6:	10 92 8b 07 	sts	0x078B, r1
    43fa:	80 e9       	ldi	r24, 0x90	; 144
    43fc:	91 e0       	ldi	r25, 0x01	; 1
    43fe:	90 93 70 07 	sts	0x0770, r25
    4402:	80 93 6f 07 	sts	0x076F, r24
    4406:	90 93 72 07 	sts	0x0772, r25
    440a:	80 93 71 07 	sts	0x0771, r24
    440e:	90 93 74 07 	sts	0x0774, r25
    4412:	80 93 73 07 	sts	0x0773, r24
    4416:	90 93 76 07 	sts	0x0776, r25
    441a:	80 93 75 07 	sts	0x0775, r24
    441e:	90 93 78 07 	sts	0x0778, r25
    4422:	80 93 77 07 	sts	0x0777, r24
    4426:	84 e3       	ldi	r24, 0x34	; 52
    4428:	98 e0       	ldi	r25, 0x08	; 8
    442a:	90 93 7a 07 	sts	0x077A, r25
    442e:	80 93 79 07 	sts	0x0779, r24
    4432:	90 93 7c 07 	sts	0x077C, r25
    4436:	80 93 7b 07 	sts	0x077B, r24
    443a:	90 93 7e 07 	sts	0x077E, r25
    443e:	80 93 7d 07 	sts	0x077D, r24
    4442:	90 93 80 07 	sts	0x0780, r25
    4446:	80 93 7f 07 	sts	0x077F, r24
    444a:	90 93 82 07 	sts	0x0782, r25
    444e:	80 93 81 07 	sts	0x0781, r24
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	61 e0       	ldi	r22, 0x01	; 1
    4456:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    445a:	91 e0       	ldi	r25, 0x01	; 1
    445c:	81 e0       	ldi	r24, 0x01	; 1
    445e:	08 95       	ret

00004460 <TMRSRVC_delay>:
    4460:	df 93       	push	r29
    4462:	cf 93       	push	r28
    4464:	cd b7       	in	r28, 0x3d	; 61
    4466:	de b7       	in	r29, 0x3e	; 62
    4468:	29 97       	sbiw	r28, 0x09	; 9
    446a:	0f b6       	in	r0, 0x3f	; 63
    446c:	f8 94       	cli
    446e:	de bf       	out	0x3e, r29	; 62
    4470:	0f be       	out	0x3f, r0	; 63
    4472:	cd bf       	out	0x3d, r28	; 61
    4474:	9c 01       	movw	r18, r24
    4476:	ce 01       	movw	r24, r28
    4478:	01 96       	adiw	r24, 0x01	; 1
    447a:	61 e0       	ldi	r22, 0x01	; 1
    447c:	40 e0       	ldi	r20, 0x00	; 0
    447e:	0e 94 51 22 	call	0x44a2	; 0x44a2 <TMRSRVC_new>
    4482:	98 2f       	mov	r25, r24
    4484:	88 23       	and	r24, r24
    4486:	19 f4       	brne	.+6      	; 0x448e <TMRSRVC_delay+0x2e>
    4488:	8f 81       	ldd	r24, Y+7	; 0x07
    448a:	88 23       	and	r24, r24
    448c:	e9 f3       	breq	.-6      	; 0x4488 <TMRSRVC_delay+0x28>
    448e:	89 2f       	mov	r24, r25
    4490:	29 96       	adiw	r28, 0x09	; 9
    4492:	0f b6       	in	r0, 0x3f	; 63
    4494:	f8 94       	cli
    4496:	de bf       	out	0x3e, r29	; 62
    4498:	0f be       	out	0x3f, r0	; 63
    449a:	cd bf       	out	0x3d, r28	; 61
    449c:	cf 91       	pop	r28
    449e:	df 91       	pop	r29
    44a0:	08 95       	ret

000044a2 <TMRSRVC_new>:
    44a2:	ef 92       	push	r14
    44a4:	ff 92       	push	r15
    44a6:	0f 93       	push	r16
    44a8:	1f 93       	push	r17
    44aa:	cf 93       	push	r28
    44ac:	df 93       	push	r29
    44ae:	ec 01       	movw	r28, r24
    44b0:	f6 2e       	mov	r15, r22
    44b2:	e4 2e       	mov	r14, r20
    44b4:	89 01       	movw	r16, r18
    44b6:	88 e0       	ldi	r24, 0x08	; 8
    44b8:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    44bc:	81 30       	cpi	r24, 0x01	; 1
    44be:	11 f0       	breq	.+4      	; 0x44c4 <TMRSRVC_new+0x22>
    44c0:	81 e0       	ldi	r24, 0x01	; 1
    44c2:	26 c0       	rjmp	.+76     	; 0x4510 <TMRSRVC_new+0x6e>
    44c4:	84 e0       	ldi	r24, 0x04	; 4
    44c6:	90 e0       	ldi	r25, 0x00	; 0
    44c8:	0e 94 a6 35 	call	0x6b4c	; 0x6b4c <malloc>
    44cc:	fc 01       	movw	r30, r24
    44ce:	00 97       	sbiw	r24, 0x00	; 0
    44d0:	11 f4       	brne	.+4      	; 0x44d6 <TMRSRVC_new+0x34>
    44d2:	82 e0       	ldi	r24, 0x02	; 2
    44d4:	1d c0       	rjmp	.+58     	; 0x4510 <TMRSRVC_new+0x6e>
    44d6:	f9 82       	std	Y+1, r15	; 0x01
    44d8:	f0 fc       	sbrc	r15, 0
    44da:	1e 82       	std	Y+6, r1	; 0x06
    44dc:	81 e0       	ldi	r24, 0x01	; 1
    44de:	e8 16       	cp	r14, r24
    44e0:	19 f4       	brne	.+6      	; 0x44e8 <TMRSRVC_new+0x46>
    44e2:	89 81       	ldd	r24, Y+1	; 0x01
    44e4:	84 60       	ori	r24, 0x04	; 4
    44e6:	89 83       	std	Y+1, r24	; 0x01
    44e8:	89 81       	ldd	r24, Y+1	; 0x01
    44ea:	88 60       	ori	r24, 0x08	; 8
    44ec:	89 83       	std	Y+1, r24	; 0x01
    44ee:	1b 83       	std	Y+3, r17	; 0x03
    44f0:	0a 83       	std	Y+2, r16	; 0x02
    44f2:	1d 83       	std	Y+5, r17	; 0x05
    44f4:	0c 83       	std	Y+4, r16	; 0x04
    44f6:	d1 83       	std	Z+1, r29	; 0x01
    44f8:	c0 83       	st	Z, r28
    44fa:	13 82       	std	Z+3, r1	; 0x03
    44fc:	12 82       	std	Z+2, r1	; 0x02
    44fe:	81 e0       	ldi	r24, 0x01	; 1
    4500:	80 93 5a 04 	sts	0x045A, r24
    4504:	cf 01       	movw	r24, r30
    4506:	0e 94 e6 28 	call	0x51cc	; 0x51cc <TMRSRVC_insert>
    450a:	10 92 5a 04 	sts	0x045A, r1
    450e:	80 e0       	ldi	r24, 0x00	; 0
    4510:	df 91       	pop	r29
    4512:	cf 91       	pop	r28
    4514:	1f 91       	pop	r17
    4516:	0f 91       	pop	r16
    4518:	ff 90       	pop	r15
    451a:	ef 90       	pop	r14
    451c:	08 95       	ret

0000451e <I2C_MSTR_get>:
    451e:	fc 01       	movw	r30, r24
    4520:	80 91 90 07 	lds	r24, 0x0790
    4524:	81 30       	cpi	r24, 0x01	; 1
    4526:	11 f0       	breq	.+4      	; 0x452c <I2C_MSTR_get+0xe>
    4528:	85 e0       	ldi	r24, 0x05	; 5
    452a:	08 95       	ret
    452c:	80 91 91 07 	lds	r24, 0x0791
    4530:	81 30       	cpi	r24, 0x01	; 1
    4532:	11 f0       	breq	.+4      	; 0x4538 <I2C_MSTR_get+0x1a>
    4534:	8a e0       	ldi	r24, 0x0A	; 10
    4536:	08 95       	ret
    4538:	61 30       	cpi	r22, 0x01	; 1
    453a:	11 f4       	brne	.+4      	; 0x4540 <I2C_MSTR_get+0x22>
    453c:	84 ec       	ldi	r24, 0xC4	; 196
    453e:	01 c0       	rjmp	.+2      	; 0x4542 <I2C_MSTR_get+0x24>
    4540:	84 e8       	ldi	r24, 0x84	; 132
    4542:	80 93 bc 00 	sts	0x00BC, r24
    4546:	80 91 bc 00 	lds	r24, 0x00BC
    454a:	87 ff       	sbrs	r24, 7
    454c:	fc cf       	rjmp	.-8      	; 0x4546 <I2C_MSTR_get+0x28>
    454e:	61 30       	cpi	r22, 0x01	; 1
    4550:	31 f4       	brne	.+12     	; 0x455e <I2C_MSTR_get+0x40>
    4552:	80 91 b9 00 	lds	r24, 0x00B9
    4556:	88 7f       	andi	r24, 0xF8	; 248
    4558:	80 35       	cpi	r24, 0x50	; 80
    455a:	59 f4       	brne	.+22     	; 0x4572 <I2C_MSTR_get+0x54>
    455c:	05 c0       	rjmp	.+10     	; 0x4568 <I2C_MSTR_get+0x4a>
    455e:	80 91 b9 00 	lds	r24, 0x00B9
    4562:	88 7f       	andi	r24, 0xF8	; 248
    4564:	88 35       	cpi	r24, 0x58	; 88
    4566:	29 f4       	brne	.+10     	; 0x4572 <I2C_MSTR_get+0x54>
    4568:	80 91 bb 00 	lds	r24, 0x00BB
    456c:	80 83       	st	Z, r24
    456e:	80 e0       	ldi	r24, 0x00	; 0
    4570:	08 95       	ret
    4572:	82 e0       	ldi	r24, 0x02	; 2
    4574:	08 95       	ret

00004576 <I2C_MSTR_send>:
    4576:	98 2f       	mov	r25, r24
    4578:	80 91 90 07 	lds	r24, 0x0790
    457c:	81 30       	cpi	r24, 0x01	; 1
    457e:	11 f0       	breq	.+4      	; 0x4584 <I2C_MSTR_send+0xe>
    4580:	85 e0       	ldi	r24, 0x05	; 5
    4582:	08 95       	ret
    4584:	80 91 91 07 	lds	r24, 0x0791
    4588:	81 30       	cpi	r24, 0x01	; 1
    458a:	11 f0       	breq	.+4      	; 0x4590 <I2C_MSTR_send+0x1a>
    458c:	8a e0       	ldi	r24, 0x0A	; 10
    458e:	08 95       	ret
    4590:	90 93 bb 00 	sts	0x00BB, r25
    4594:	84 e8       	ldi	r24, 0x84	; 132
    4596:	80 93 bc 00 	sts	0x00BC, r24
    459a:	80 91 bc 00 	lds	r24, 0x00BC
    459e:	87 ff       	sbrs	r24, 7
    45a0:	fc cf       	rjmp	.-8      	; 0x459a <I2C_MSTR_send+0x24>
    45a2:	80 91 b9 00 	lds	r24, 0x00B9
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	88 7f       	andi	r24, 0xF8	; 248
    45aa:	90 70       	andi	r25, 0x00	; 0
    45ac:	88 32       	cpi	r24, 0x28	; 40
    45ae:	91 05       	cpc	r25, r1
    45b0:	21 f0       	breq	.+8      	; 0x45ba <I2C_MSTR_send+0x44>
    45b2:	c0 97       	sbiw	r24, 0x30	; 48
    45b4:	21 f4       	brne	.+8      	; 0x45be <I2C_MSTR_send+0x48>
    45b6:	83 e0       	ldi	r24, 0x03	; 3
    45b8:	08 95       	ret
    45ba:	80 e0       	ldi	r24, 0x00	; 0
    45bc:	08 95       	ret
    45be:	8c e0       	ldi	r24, 0x0C	; 12
    45c0:	08 95       	ret

000045c2 <I2C_MSTR_start>:
    45c2:	98 2f       	mov	r25, r24
    45c4:	20 91 90 07 	lds	r18, 0x0790
    45c8:	21 30       	cpi	r18, 0x01	; 1
    45ca:	11 f0       	breq	.+4      	; 0x45d0 <I2C_MSTR_start+0xe>
    45cc:	85 e0       	ldi	r24, 0x05	; 5
    45ce:	08 95       	ret
    45d0:	80 91 92 07 	lds	r24, 0x0792
    45d4:	81 30       	cpi	r24, 0x01	; 1
    45d6:	11 f4       	brne	.+4      	; 0x45dc <I2C_MSTR_start+0x1a>
    45d8:	89 e0       	ldi	r24, 0x09	; 9
    45da:	08 95       	ret
    45dc:	20 93 91 07 	sts	0x0791, r18
    45e0:	84 ea       	ldi	r24, 0xA4	; 164
    45e2:	80 93 bc 00 	sts	0x00BC, r24
    45e6:	80 91 bc 00 	lds	r24, 0x00BC
    45ea:	87 ff       	sbrs	r24, 7
    45ec:	fc cf       	rjmp	.-8      	; 0x45e6 <I2C_MSTR_start+0x24>
    45ee:	80 91 b9 00 	lds	r24, 0x00B9
    45f2:	88 7f       	andi	r24, 0xF8	; 248
    45f4:	88 30       	cpi	r24, 0x08	; 8
    45f6:	39 f0       	breq	.+14     	; 0x4606 <I2C_MSTR_start+0x44>
    45f8:	80 91 b9 00 	lds	r24, 0x00B9
    45fc:	88 7f       	andi	r24, 0xF8	; 248
    45fe:	80 31       	cpi	r24, 0x10	; 16
    4600:	11 f0       	breq	.+4      	; 0x4606 <I2C_MSTR_start+0x44>
    4602:	81 e0       	ldi	r24, 0x01	; 1
    4604:	08 95       	ret
    4606:	61 30       	cpi	r22, 0x01	; 1
    4608:	19 f4       	brne	.+6      	; 0x4610 <I2C_MSTR_start+0x4e>
    460a:	99 0f       	add	r25, r25
    460c:	91 60       	ori	r25, 0x01	; 1
    460e:	03 c0       	rjmp	.+6      	; 0x4616 <I2C_MSTR_start+0x54>
    4610:	66 23       	and	r22, r22
    4612:	19 f4       	brne	.+6      	; 0x461a <I2C_MSTR_start+0x58>
    4614:	99 0f       	add	r25, r25
    4616:	90 93 bb 00 	sts	0x00BB, r25
    461a:	84 e8       	ldi	r24, 0x84	; 132
    461c:	80 93 bc 00 	sts	0x00BC, r24
    4620:	80 91 bc 00 	lds	r24, 0x00BC
    4624:	87 ff       	sbrs	r24, 7
    4626:	fc cf       	rjmp	.-8      	; 0x4620 <I2C_MSTR_start+0x5e>
    4628:	61 30       	cpi	r22, 0x01	; 1
    462a:	31 f4       	brne	.+12     	; 0x4638 <I2C_MSTR_start+0x76>
    462c:	80 91 b9 00 	lds	r24, 0x00B9
    4630:	88 7f       	andi	r24, 0xF8	; 248
    4632:	80 34       	cpi	r24, 0x40	; 64
    4634:	41 f4       	brne	.+16     	; 0x4646 <I2C_MSTR_start+0x84>
    4636:	09 c0       	rjmp	.+18     	; 0x464a <I2C_MSTR_start+0x88>
    4638:	66 23       	and	r22, r22
    463a:	39 f4       	brne	.+14     	; 0x464a <I2C_MSTR_start+0x88>
    463c:	80 91 b9 00 	lds	r24, 0x00B9
    4640:	88 7f       	andi	r24, 0xF8	; 248
    4642:	88 31       	cpi	r24, 0x18	; 24
    4644:	11 f0       	breq	.+4      	; 0x464a <I2C_MSTR_start+0x88>
    4646:	82 e0       	ldi	r24, 0x02	; 2
    4648:	08 95       	ret
    464a:	80 e0       	ldi	r24, 0x00	; 0
    464c:	08 95       	ret

0000464e <I2C_MSTR_stop>:
    464e:	80 91 91 07 	lds	r24, 0x0791
    4652:	81 30       	cpi	r24, 0x01	; 1
    4654:	11 f0       	breq	.+4      	; 0x465a <I2C_MSTR_stop+0xc>
    4656:	8a e0       	ldi	r24, 0x0A	; 10
    4658:	08 95       	ret
    465a:	80 91 93 07 	lds	r24, 0x0793
    465e:	81 30       	cpi	r24, 0x01	; 1
    4660:	29 f4       	brne	.+10     	; 0x466c <I2C_MSTR_stop+0x1e>
    4662:	85 e9       	ldi	r24, 0x95	; 149
    4664:	80 93 bc 00 	sts	0x00BC, r24
    4668:	80 e0       	ldi	r24, 0x00	; 0
    466a:	08 95       	ret
    466c:	84 e9       	ldi	r24, 0x94	; 148
    466e:	80 93 bc 00 	sts	0x00BC, r24
    4672:	80 e0       	ldi	r24, 0x00	; 0
    4674:	08 95       	ret

00004676 <I2C_open>:
    4676:	82 e1       	ldi	r24, 0x12	; 18
    4678:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    467c:	88 23       	and	r24, r24
    467e:	b1 f4       	brne	.+44     	; 0x46ac <I2C_open+0x36>
    4680:	10 92 90 07 	sts	0x0790, r1
    4684:	10 92 91 07 	sts	0x0791, r1
    4688:	10 92 92 07 	sts	0x0792, r1
    468c:	10 92 93 07 	sts	0x0793, r1
    4690:	10 92 94 07 	sts	0x0794, r1
    4694:	0e 94 82 29 	call	0x5304	; 0x5304 <__I2C_init>
    4698:	87 e1       	ldi	r24, 0x17	; 23
    469a:	60 e0       	ldi	r22, 0x00	; 0
    469c:	0e 94 59 23 	call	0x46b2	; 0x46b2 <I2C_set_BRG>
    46a0:	0e 94 78 29 	call	0x52f0	; 0x52f0 <I2C_enable>
    46a4:	82 e1       	ldi	r24, 0x12	; 18
    46a6:	61 e0       	ldi	r22, 0x01	; 1
    46a8:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    46ac:	82 e1       	ldi	r24, 0x12	; 18
    46ae:	90 e0       	ldi	r25, 0x00	; 0
    46b0:	08 95       	ret

000046b2 <I2C_set_BRG>:
    46b2:	63 70       	andi	r22, 0x03	; 3
    46b4:	60 93 b9 00 	sts	0x00B9, r22
    46b8:	80 93 b8 00 	sts	0x00B8, r24
    46bc:	81 e0       	ldi	r24, 0x01	; 1
    46be:	80 93 90 07 	sts	0x0790, r24
    46c2:	08 95       	ret

000046c4 <__ADC_init>:
    46c4:	8f e1       	ldi	r24, 0x1F	; 31
    46c6:	80 93 7c 00 	sts	0x007C, r24
    46ca:	ea e7       	ldi	r30, 0x7A	; 122
    46cc:	f0 e0       	ldi	r31, 0x00	; 0
    46ce:	87 e0       	ldi	r24, 0x07	; 7
    46d0:	80 83       	st	Z, r24
    46d2:	80 81       	ld	r24, Z
    46d4:	80 68       	ori	r24, 0x80	; 128
    46d6:	80 83       	st	Z, r24
    46d8:	08 95       	ret

000046da <CBOT_init>:
    46da:	0e 94 c3 28 	call	0x5186	; 0x5186 <SYS_init>
    46de:	0e 94 9f 26 	call	0x4d3e	; 0x4d3e <ATMEGA_open>
    46e2:	0e 94 cf 25 	call	0x4b9e	; 0x4b9e <ISR_open>
    46e6:	0e 94 4f 29 	call	0x529e	; 0x529e <TMRSRVC_open>
    46ea:	0e 94 04 27 	call	0x4e08	; 0x4e08 <SPI_open>
    46ee:	0e 94 e1 21 	call	0x43c2	; 0x43c2 <ATTINY_open>
    46f2:	78 94       	sei
    46f4:	08 95       	ret

000046f6 <CBOT_ISR_init>:
    46f6:	00 00       	nop
    46f8:	08 95       	ret

000046fa <__vector_16>:
    46fa:	1f 92       	push	r1
    46fc:	0f 92       	push	r0
    46fe:	0f b6       	in	r0, 0x3f	; 63
    4700:	0f 92       	push	r0
    4702:	11 24       	eor	r1, r1
    4704:	2f 93       	push	r18
    4706:	3f 93       	push	r19
    4708:	4f 93       	push	r20
    470a:	5f 93       	push	r21
    470c:	6f 93       	push	r22
    470e:	7f 93       	push	r23
    4710:	8f 93       	push	r24
    4712:	9f 93       	push	r25
    4714:	af 93       	push	r26
    4716:	bf 93       	push	r27
    4718:	ef 93       	push	r30
    471a:	ff 93       	push	r31
    471c:	e0 91 1a 04 	lds	r30, 0x041A
    4720:	f0 91 1b 04 	lds	r31, 0x041B
    4724:	30 97       	sbiw	r30, 0x00	; 0
    4726:	09 f0       	breq	.+2      	; 0x472a <__vector_16+0x30>
    4728:	09 95       	icall
    472a:	ff 91       	pop	r31
    472c:	ef 91       	pop	r30
    472e:	bf 91       	pop	r27
    4730:	af 91       	pop	r26
    4732:	9f 91       	pop	r25
    4734:	8f 91       	pop	r24
    4736:	7f 91       	pop	r23
    4738:	6f 91       	pop	r22
    473a:	5f 91       	pop	r21
    473c:	4f 91       	pop	r20
    473e:	3f 91       	pop	r19
    4740:	2f 91       	pop	r18
    4742:	0f 90       	pop	r0
    4744:	0f be       	out	0x3f, r0	; 63
    4746:	0f 90       	pop	r0
    4748:	1f 90       	pop	r1
    474a:	18 95       	reti

0000474c <__vector_17>:
    474c:	1f 92       	push	r1
    474e:	0f 92       	push	r0
    4750:	0f b6       	in	r0, 0x3f	; 63
    4752:	0f 92       	push	r0
    4754:	11 24       	eor	r1, r1
    4756:	2f 93       	push	r18
    4758:	3f 93       	push	r19
    475a:	4f 93       	push	r20
    475c:	5f 93       	push	r21
    475e:	6f 93       	push	r22
    4760:	7f 93       	push	r23
    4762:	8f 93       	push	r24
    4764:	9f 93       	push	r25
    4766:	af 93       	push	r26
    4768:	bf 93       	push	r27
    476a:	ef 93       	push	r30
    476c:	ff 93       	push	r31
    476e:	e0 91 1c 04 	lds	r30, 0x041C
    4772:	f0 91 1d 04 	lds	r31, 0x041D
    4776:	30 97       	sbiw	r30, 0x00	; 0
    4778:	09 f0       	breq	.+2      	; 0x477c <__vector_17+0x30>
    477a:	09 95       	icall
    477c:	ff 91       	pop	r31
    477e:	ef 91       	pop	r30
    4780:	bf 91       	pop	r27
    4782:	af 91       	pop	r26
    4784:	9f 91       	pop	r25
    4786:	8f 91       	pop	r24
    4788:	7f 91       	pop	r23
    478a:	6f 91       	pop	r22
    478c:	5f 91       	pop	r21
    478e:	4f 91       	pop	r20
    4790:	3f 91       	pop	r19
    4792:	2f 91       	pop	r18
    4794:	0f 90       	pop	r0
    4796:	0f be       	out	0x3f, r0	; 63
    4798:	0f 90       	pop	r0
    479a:	1f 90       	pop	r1
    479c:	18 95       	reti

0000479e <__vector_18>:
    479e:	1f 92       	push	r1
    47a0:	0f 92       	push	r0
    47a2:	0f b6       	in	r0, 0x3f	; 63
    47a4:	0f 92       	push	r0
    47a6:	11 24       	eor	r1, r1
    47a8:	2f 93       	push	r18
    47aa:	3f 93       	push	r19
    47ac:	4f 93       	push	r20
    47ae:	5f 93       	push	r21
    47b0:	6f 93       	push	r22
    47b2:	7f 93       	push	r23
    47b4:	8f 93       	push	r24
    47b6:	9f 93       	push	r25
    47b8:	af 93       	push	r26
    47ba:	bf 93       	push	r27
    47bc:	ef 93       	push	r30
    47be:	ff 93       	push	r31
    47c0:	e0 91 1e 04 	lds	r30, 0x041E
    47c4:	f0 91 1f 04 	lds	r31, 0x041F
    47c8:	30 97       	sbiw	r30, 0x00	; 0
    47ca:	09 f0       	breq	.+2      	; 0x47ce <__vector_18+0x30>
    47cc:	09 95       	icall
    47ce:	ff 91       	pop	r31
    47d0:	ef 91       	pop	r30
    47d2:	bf 91       	pop	r27
    47d4:	af 91       	pop	r26
    47d6:	9f 91       	pop	r25
    47d8:	8f 91       	pop	r24
    47da:	7f 91       	pop	r23
    47dc:	6f 91       	pop	r22
    47de:	5f 91       	pop	r21
    47e0:	4f 91       	pop	r20
    47e2:	3f 91       	pop	r19
    47e4:	2f 91       	pop	r18
    47e6:	0f 90       	pop	r0
    47e8:	0f be       	out	0x3f, r0	; 63
    47ea:	0f 90       	pop	r0
    47ec:	1f 90       	pop	r1
    47ee:	18 95       	reti

000047f0 <__vector_9>:
    47f0:	1f 92       	push	r1
    47f2:	0f 92       	push	r0
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	0f 92       	push	r0
    47f8:	11 24       	eor	r1, r1
    47fa:	2f 93       	push	r18
    47fc:	3f 93       	push	r19
    47fe:	4f 93       	push	r20
    4800:	5f 93       	push	r21
    4802:	6f 93       	push	r22
    4804:	7f 93       	push	r23
    4806:	8f 93       	push	r24
    4808:	9f 93       	push	r25
    480a:	af 93       	push	r26
    480c:	bf 93       	push	r27
    480e:	ef 93       	push	r30
    4810:	ff 93       	push	r31
    4812:	e0 91 0c 04 	lds	r30, 0x040C
    4816:	f0 91 0d 04 	lds	r31, 0x040D
    481a:	30 97       	sbiw	r30, 0x00	; 0
    481c:	09 f0       	breq	.+2      	; 0x4820 <__vector_9+0x30>
    481e:	09 95       	icall
    4820:	ff 91       	pop	r31
    4822:	ef 91       	pop	r30
    4824:	bf 91       	pop	r27
    4826:	af 91       	pop	r26
    4828:	9f 91       	pop	r25
    482a:	8f 91       	pop	r24
    482c:	7f 91       	pop	r23
    482e:	6f 91       	pop	r22
    4830:	5f 91       	pop	r21
    4832:	4f 91       	pop	r20
    4834:	3f 91       	pop	r19
    4836:	2f 91       	pop	r18
    4838:	0f 90       	pop	r0
    483a:	0f be       	out	0x3f, r0	; 63
    483c:	0f 90       	pop	r0
    483e:	1f 90       	pop	r1
    4840:	18 95       	reti

00004842 <__vector_10>:
    4842:	1f 92       	push	r1
    4844:	0f 92       	push	r0
    4846:	0f b6       	in	r0, 0x3f	; 63
    4848:	0f 92       	push	r0
    484a:	11 24       	eor	r1, r1
    484c:	2f 93       	push	r18
    484e:	3f 93       	push	r19
    4850:	4f 93       	push	r20
    4852:	5f 93       	push	r21
    4854:	6f 93       	push	r22
    4856:	7f 93       	push	r23
    4858:	8f 93       	push	r24
    485a:	9f 93       	push	r25
    485c:	af 93       	push	r26
    485e:	bf 93       	push	r27
    4860:	ef 93       	push	r30
    4862:	ff 93       	push	r31
    4864:	e0 91 0e 04 	lds	r30, 0x040E
    4868:	f0 91 0f 04 	lds	r31, 0x040F
    486c:	30 97       	sbiw	r30, 0x00	; 0
    486e:	09 f0       	breq	.+2      	; 0x4872 <__vector_10+0x30>
    4870:	09 95       	icall
    4872:	ff 91       	pop	r31
    4874:	ef 91       	pop	r30
    4876:	bf 91       	pop	r27
    4878:	af 91       	pop	r26
    487a:	9f 91       	pop	r25
    487c:	8f 91       	pop	r24
    487e:	7f 91       	pop	r23
    4880:	6f 91       	pop	r22
    4882:	5f 91       	pop	r21
    4884:	4f 91       	pop	r20
    4886:	3f 91       	pop	r19
    4888:	2f 91       	pop	r18
    488a:	0f 90       	pop	r0
    488c:	0f be       	out	0x3f, r0	; 63
    488e:	0f 90       	pop	r0
    4890:	1f 90       	pop	r1
    4892:	18 95       	reti

00004894 <__vector_11>:
    4894:	1f 92       	push	r1
    4896:	0f 92       	push	r0
    4898:	0f b6       	in	r0, 0x3f	; 63
    489a:	0f 92       	push	r0
    489c:	11 24       	eor	r1, r1
    489e:	2f 93       	push	r18
    48a0:	3f 93       	push	r19
    48a2:	4f 93       	push	r20
    48a4:	5f 93       	push	r21
    48a6:	6f 93       	push	r22
    48a8:	7f 93       	push	r23
    48aa:	8f 93       	push	r24
    48ac:	9f 93       	push	r25
    48ae:	af 93       	push	r26
    48b0:	bf 93       	push	r27
    48b2:	ef 93       	push	r30
    48b4:	ff 93       	push	r31
    48b6:	e0 91 10 04 	lds	r30, 0x0410
    48ba:	f0 91 11 04 	lds	r31, 0x0411
    48be:	30 97       	sbiw	r30, 0x00	; 0
    48c0:	09 f0       	breq	.+2      	; 0x48c4 <__vector_11+0x30>
    48c2:	09 95       	icall
    48c4:	ff 91       	pop	r31
    48c6:	ef 91       	pop	r30
    48c8:	bf 91       	pop	r27
    48ca:	af 91       	pop	r26
    48cc:	9f 91       	pop	r25
    48ce:	8f 91       	pop	r24
    48d0:	7f 91       	pop	r23
    48d2:	6f 91       	pop	r22
    48d4:	5f 91       	pop	r21
    48d6:	4f 91       	pop	r20
    48d8:	3f 91       	pop	r19
    48da:	2f 91       	pop	r18
    48dc:	0f 90       	pop	r0
    48de:	0f be       	out	0x3f, r0	; 63
    48e0:	0f 90       	pop	r0
    48e2:	1f 90       	pop	r1
    48e4:	18 95       	reti

000048e6 <__vector_13>:
    48e6:	1f 92       	push	r1
    48e8:	0f 92       	push	r0
    48ea:	0f b6       	in	r0, 0x3f	; 63
    48ec:	0f 92       	push	r0
    48ee:	11 24       	eor	r1, r1
    48f0:	2f 93       	push	r18
    48f2:	3f 93       	push	r19
    48f4:	4f 93       	push	r20
    48f6:	5f 93       	push	r21
    48f8:	6f 93       	push	r22
    48fa:	7f 93       	push	r23
    48fc:	8f 93       	push	r24
    48fe:	9f 93       	push	r25
    4900:	af 93       	push	r26
    4902:	bf 93       	push	r27
    4904:	ef 93       	push	r30
    4906:	ff 93       	push	r31
    4908:	e0 91 14 04 	lds	r30, 0x0414
    490c:	f0 91 15 04 	lds	r31, 0x0415
    4910:	30 97       	sbiw	r30, 0x00	; 0
    4912:	09 f0       	breq	.+2      	; 0x4916 <__vector_13+0x30>
    4914:	09 95       	icall
    4916:	ff 91       	pop	r31
    4918:	ef 91       	pop	r30
    491a:	bf 91       	pop	r27
    491c:	af 91       	pop	r26
    491e:	9f 91       	pop	r25
    4920:	8f 91       	pop	r24
    4922:	7f 91       	pop	r23
    4924:	6f 91       	pop	r22
    4926:	5f 91       	pop	r21
    4928:	4f 91       	pop	r20
    492a:	3f 91       	pop	r19
    492c:	2f 91       	pop	r18
    492e:	0f 90       	pop	r0
    4930:	0f be       	out	0x3f, r0	; 63
    4932:	0f 90       	pop	r0
    4934:	1f 90       	pop	r1
    4936:	18 95       	reti

00004938 <__vector_14>:
    4938:	1f 92       	push	r1
    493a:	0f 92       	push	r0
    493c:	0f b6       	in	r0, 0x3f	; 63
    493e:	0f 92       	push	r0
    4940:	11 24       	eor	r1, r1
    4942:	2f 93       	push	r18
    4944:	3f 93       	push	r19
    4946:	4f 93       	push	r20
    4948:	5f 93       	push	r21
    494a:	6f 93       	push	r22
    494c:	7f 93       	push	r23
    494e:	8f 93       	push	r24
    4950:	9f 93       	push	r25
    4952:	af 93       	push	r26
    4954:	bf 93       	push	r27
    4956:	ef 93       	push	r30
    4958:	ff 93       	push	r31
    495a:	e0 91 16 04 	lds	r30, 0x0416
    495e:	f0 91 17 04 	lds	r31, 0x0417
    4962:	30 97       	sbiw	r30, 0x00	; 0
    4964:	09 f0       	breq	.+2      	; 0x4968 <__vector_14+0x30>
    4966:	09 95       	icall
    4968:	ff 91       	pop	r31
    496a:	ef 91       	pop	r30
    496c:	bf 91       	pop	r27
    496e:	af 91       	pop	r26
    4970:	9f 91       	pop	r25
    4972:	8f 91       	pop	r24
    4974:	7f 91       	pop	r23
    4976:	6f 91       	pop	r22
    4978:	5f 91       	pop	r21
    497a:	4f 91       	pop	r20
    497c:	3f 91       	pop	r19
    497e:	2f 91       	pop	r18
    4980:	0f 90       	pop	r0
    4982:	0f be       	out	0x3f, r0	; 63
    4984:	0f 90       	pop	r0
    4986:	1f 90       	pop	r1
    4988:	18 95       	reti

0000498a <__vector_12>:
    498a:	1f 92       	push	r1
    498c:	0f 92       	push	r0
    498e:	0f b6       	in	r0, 0x3f	; 63
    4990:	0f 92       	push	r0
    4992:	11 24       	eor	r1, r1
    4994:	2f 93       	push	r18
    4996:	3f 93       	push	r19
    4998:	4f 93       	push	r20
    499a:	5f 93       	push	r21
    499c:	6f 93       	push	r22
    499e:	7f 93       	push	r23
    49a0:	8f 93       	push	r24
    49a2:	9f 93       	push	r25
    49a4:	af 93       	push	r26
    49a6:	bf 93       	push	r27
    49a8:	ef 93       	push	r30
    49aa:	ff 93       	push	r31
    49ac:	e0 91 12 04 	lds	r30, 0x0412
    49b0:	f0 91 13 04 	lds	r31, 0x0413
    49b4:	30 97       	sbiw	r30, 0x00	; 0
    49b6:	09 f0       	breq	.+2      	; 0x49ba <__vector_12+0x30>
    49b8:	09 95       	icall
    49ba:	ff 91       	pop	r31
    49bc:	ef 91       	pop	r30
    49be:	bf 91       	pop	r27
    49c0:	af 91       	pop	r26
    49c2:	9f 91       	pop	r25
    49c4:	8f 91       	pop	r24
    49c6:	7f 91       	pop	r23
    49c8:	6f 91       	pop	r22
    49ca:	5f 91       	pop	r21
    49cc:	4f 91       	pop	r20
    49ce:	3f 91       	pop	r19
    49d0:	2f 91       	pop	r18
    49d2:	0f 90       	pop	r0
    49d4:	0f be       	out	0x3f, r0	; 63
    49d6:	0f 90       	pop	r0
    49d8:	1f 90       	pop	r1
    49da:	18 95       	reti

000049dc <__vector_15>:
    49dc:	1f 92       	push	r1
    49de:	0f 92       	push	r0
    49e0:	0f b6       	in	r0, 0x3f	; 63
    49e2:	0f 92       	push	r0
    49e4:	11 24       	eor	r1, r1
    49e6:	2f 93       	push	r18
    49e8:	3f 93       	push	r19
    49ea:	4f 93       	push	r20
    49ec:	5f 93       	push	r21
    49ee:	6f 93       	push	r22
    49f0:	7f 93       	push	r23
    49f2:	8f 93       	push	r24
    49f4:	9f 93       	push	r25
    49f6:	af 93       	push	r26
    49f8:	bf 93       	push	r27
    49fa:	ef 93       	push	r30
    49fc:	ff 93       	push	r31
    49fe:	e0 91 18 04 	lds	r30, 0x0418
    4a02:	f0 91 19 04 	lds	r31, 0x0419
    4a06:	30 97       	sbiw	r30, 0x00	; 0
    4a08:	09 f0       	breq	.+2      	; 0x4a0c <__vector_15+0x30>
    4a0a:	09 95       	icall
    4a0c:	ff 91       	pop	r31
    4a0e:	ef 91       	pop	r30
    4a10:	bf 91       	pop	r27
    4a12:	af 91       	pop	r26
    4a14:	9f 91       	pop	r25
    4a16:	8f 91       	pop	r24
    4a18:	7f 91       	pop	r23
    4a1a:	6f 91       	pop	r22
    4a1c:	5f 91       	pop	r21
    4a1e:	4f 91       	pop	r20
    4a20:	3f 91       	pop	r19
    4a22:	2f 91       	pop	r18
    4a24:	0f 90       	pop	r0
    4a26:	0f be       	out	0x3f, r0	; 63
    4a28:	0f 90       	pop	r0
    4a2a:	1f 90       	pop	r1
    4a2c:	18 95       	reti

00004a2e <__vector_4>:
    4a2e:	1f 92       	push	r1
    4a30:	0f 92       	push	r0
    4a32:	0f b6       	in	r0, 0x3f	; 63
    4a34:	0f 92       	push	r0
    4a36:	11 24       	eor	r1, r1
    4a38:	2f 93       	push	r18
    4a3a:	3f 93       	push	r19
    4a3c:	4f 93       	push	r20
    4a3e:	5f 93       	push	r21
    4a40:	6f 93       	push	r22
    4a42:	7f 93       	push	r23
    4a44:	8f 93       	push	r24
    4a46:	9f 93       	push	r25
    4a48:	af 93       	push	r26
    4a4a:	bf 93       	push	r27
    4a4c:	ef 93       	push	r30
    4a4e:	ff 93       	push	r31
    4a50:	e0 91 02 04 	lds	r30, 0x0402
    4a54:	f0 91 03 04 	lds	r31, 0x0403
    4a58:	30 97       	sbiw	r30, 0x00	; 0
    4a5a:	09 f0       	breq	.+2      	; 0x4a5e <__vector_4+0x30>
    4a5c:	09 95       	icall
    4a5e:	ff 91       	pop	r31
    4a60:	ef 91       	pop	r30
    4a62:	bf 91       	pop	r27
    4a64:	af 91       	pop	r26
    4a66:	9f 91       	pop	r25
    4a68:	8f 91       	pop	r24
    4a6a:	7f 91       	pop	r23
    4a6c:	6f 91       	pop	r22
    4a6e:	5f 91       	pop	r21
    4a70:	4f 91       	pop	r20
    4a72:	3f 91       	pop	r19
    4a74:	2f 91       	pop	r18
    4a76:	0f 90       	pop	r0
    4a78:	0f be       	out	0x3f, r0	; 63
    4a7a:	0f 90       	pop	r0
    4a7c:	1f 90       	pop	r1
    4a7e:	18 95       	reti

00004a80 <__vector_5>:
    4a80:	1f 92       	push	r1
    4a82:	0f 92       	push	r0
    4a84:	0f b6       	in	r0, 0x3f	; 63
    4a86:	0f 92       	push	r0
    4a88:	11 24       	eor	r1, r1
    4a8a:	2f 93       	push	r18
    4a8c:	3f 93       	push	r19
    4a8e:	4f 93       	push	r20
    4a90:	5f 93       	push	r21
    4a92:	6f 93       	push	r22
    4a94:	7f 93       	push	r23
    4a96:	8f 93       	push	r24
    4a98:	9f 93       	push	r25
    4a9a:	af 93       	push	r26
    4a9c:	bf 93       	push	r27
    4a9e:	ef 93       	push	r30
    4aa0:	ff 93       	push	r31
    4aa2:	e0 91 04 04 	lds	r30, 0x0404
    4aa6:	f0 91 05 04 	lds	r31, 0x0405
    4aaa:	30 97       	sbiw	r30, 0x00	; 0
    4aac:	09 f0       	breq	.+2      	; 0x4ab0 <__vector_5+0x30>
    4aae:	09 95       	icall
    4ab0:	ff 91       	pop	r31
    4ab2:	ef 91       	pop	r30
    4ab4:	bf 91       	pop	r27
    4ab6:	af 91       	pop	r26
    4ab8:	9f 91       	pop	r25
    4aba:	8f 91       	pop	r24
    4abc:	7f 91       	pop	r23
    4abe:	6f 91       	pop	r22
    4ac0:	5f 91       	pop	r21
    4ac2:	4f 91       	pop	r20
    4ac4:	3f 91       	pop	r19
    4ac6:	2f 91       	pop	r18
    4ac8:	0f 90       	pop	r0
    4aca:	0f be       	out	0x3f, r0	; 63
    4acc:	0f 90       	pop	r0
    4ace:	1f 90       	pop	r1
    4ad0:	18 95       	reti

00004ad2 <__vector_6>:
    4ad2:	1f 92       	push	r1
    4ad4:	0f 92       	push	r0
    4ad6:	0f b6       	in	r0, 0x3f	; 63
    4ad8:	0f 92       	push	r0
    4ada:	11 24       	eor	r1, r1
    4adc:	2f 93       	push	r18
    4ade:	3f 93       	push	r19
    4ae0:	4f 93       	push	r20
    4ae2:	5f 93       	push	r21
    4ae4:	6f 93       	push	r22
    4ae6:	7f 93       	push	r23
    4ae8:	8f 93       	push	r24
    4aea:	9f 93       	push	r25
    4aec:	af 93       	push	r26
    4aee:	bf 93       	push	r27
    4af0:	ef 93       	push	r30
    4af2:	ff 93       	push	r31
    4af4:	e0 91 06 04 	lds	r30, 0x0406
    4af8:	f0 91 07 04 	lds	r31, 0x0407
    4afc:	30 97       	sbiw	r30, 0x00	; 0
    4afe:	09 f0       	breq	.+2      	; 0x4b02 <__vector_6+0x30>
    4b00:	09 95       	icall
    4b02:	ff 91       	pop	r31
    4b04:	ef 91       	pop	r30
    4b06:	bf 91       	pop	r27
    4b08:	af 91       	pop	r26
    4b0a:	9f 91       	pop	r25
    4b0c:	8f 91       	pop	r24
    4b0e:	7f 91       	pop	r23
    4b10:	6f 91       	pop	r22
    4b12:	5f 91       	pop	r21
    4b14:	4f 91       	pop	r20
    4b16:	3f 91       	pop	r19
    4b18:	2f 91       	pop	r18
    4b1a:	0f 90       	pop	r0
    4b1c:	0f be       	out	0x3f, r0	; 63
    4b1e:	0f 90       	pop	r0
    4b20:	1f 90       	pop	r1
    4b22:	18 95       	reti

00004b24 <__vector_7>:
    4b24:	1f 92       	push	r1
    4b26:	0f 92       	push	r0
    4b28:	0f b6       	in	r0, 0x3f	; 63
    4b2a:	0f 92       	push	r0
    4b2c:	11 24       	eor	r1, r1
    4b2e:	2f 93       	push	r18
    4b30:	3f 93       	push	r19
    4b32:	4f 93       	push	r20
    4b34:	5f 93       	push	r21
    4b36:	6f 93       	push	r22
    4b38:	7f 93       	push	r23
    4b3a:	8f 93       	push	r24
    4b3c:	9f 93       	push	r25
    4b3e:	af 93       	push	r26
    4b40:	bf 93       	push	r27
    4b42:	ef 93       	push	r30
    4b44:	ff 93       	push	r31
    4b46:	e0 91 08 04 	lds	r30, 0x0408
    4b4a:	f0 91 09 04 	lds	r31, 0x0409
    4b4e:	30 97       	sbiw	r30, 0x00	; 0
    4b50:	09 f0       	breq	.+2      	; 0x4b54 <__vector_7+0x30>
    4b52:	09 95       	icall
    4b54:	ff 91       	pop	r31
    4b56:	ef 91       	pop	r30
    4b58:	bf 91       	pop	r27
    4b5a:	af 91       	pop	r26
    4b5c:	9f 91       	pop	r25
    4b5e:	8f 91       	pop	r24
    4b60:	7f 91       	pop	r23
    4b62:	6f 91       	pop	r22
    4b64:	5f 91       	pop	r21
    4b66:	4f 91       	pop	r20
    4b68:	3f 91       	pop	r19
    4b6a:	2f 91       	pop	r18
    4b6c:	0f 90       	pop	r0
    4b6e:	0f be       	out	0x3f, r0	; 63
    4b70:	0f 90       	pop	r0
    4b72:	1f 90       	pop	r1
    4b74:	18 95       	reti

00004b76 <ISR_attach>:
    4b76:	e8 2f       	mov	r30, r24
    4b78:	80 32       	cpi	r24, 0x20	; 32
    4b7a:	68 f4       	brcc	.+26     	; 0x4b96 <ISR_attach+0x20>
    4b7c:	80 51       	subi	r24, 0x10	; 16
    4b7e:	83 30       	cpi	r24, 0x03	; 3
    4b80:	50 f0       	brcs	.+20     	; 0x4b96 <ISR_attach+0x20>
    4b82:	f0 e0       	ldi	r31, 0x00	; 0
    4b84:	ee 0f       	add	r30, r30
    4b86:	ff 1f       	adc	r31, r31
    4b88:	e6 50       	subi	r30, 0x06	; 6
    4b8a:	fc 4f       	sbci	r31, 0xFC	; 252
    4b8c:	20 81       	ld	r18, Z
    4b8e:	31 81       	ldd	r19, Z+1	; 0x01
    4b90:	71 83       	std	Z+1, r23	; 0x01
    4b92:	60 83       	st	Z, r22
    4b94:	02 c0       	rjmp	.+4      	; 0x4b9a <ISR_attach+0x24>
    4b96:	20 e0       	ldi	r18, 0x00	; 0
    4b98:	30 e0       	ldi	r19, 0x00	; 0
    4b9a:	c9 01       	movw	r24, r18
    4b9c:	08 95       	ret

00004b9e <ISR_open>:
    4b9e:	80 e1       	ldi	r24, 0x10	; 16
    4ba0:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    4ba4:	88 23       	and	r24, r24
    4ba6:	61 f4       	brne	.+24     	; 0x4bc0 <ISR_open+0x22>
    4ba8:	ea ef       	ldi	r30, 0xFA	; 250
    4baa:	f3 e0       	ldi	r31, 0x03	; 3
    4bac:	11 92       	st	Z+, r1
    4bae:	11 92       	st	Z+, r1
    4bb0:	84 e0       	ldi	r24, 0x04	; 4
    4bb2:	ea 33       	cpi	r30, 0x3A	; 58
    4bb4:	f8 07       	cpc	r31, r24
    4bb6:	d1 f7       	brne	.-12     	; 0x4bac <ISR_open+0xe>
    4bb8:	80 e1       	ldi	r24, 0x10	; 16
    4bba:	61 e0       	ldi	r22, 0x01	; 1
    4bbc:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    4bc0:	80 e1       	ldi	r24, 0x10	; 16
    4bc2:	91 e0       	ldi	r25, 0x01	; 1
    4bc4:	08 95       	ret

00004bc6 <__LCD_init>:
    4bc6:	23 9a       	sbi	0x04, 3	; 4
    4bc8:	08 95       	ret

00004bca <__LCD_putchar>:
    4bca:	ff 92       	push	r15
    4bcc:	0f 93       	push	r16
    4bce:	1f 93       	push	r17
    4bd0:	cf 93       	push	r28
    4bd2:	df 93       	push	r29
    4bd4:	f8 2e       	mov	r15, r24
    4bd6:	8a e0       	ldi	r24, 0x0A	; 10
    4bd8:	f8 16       	cp	r15, r24
    4bda:	b1 f0       	breq	.+44     	; 0x4c08 <__LCD_putchar+0x3e>
    4bdc:	8f 15       	cp	r24, r15
    4bde:	48 f0       	brcs	.+18     	; 0x4bf2 <__LCD_putchar+0x28>
    4be0:	e8 e0       	ldi	r30, 0x08	; 8
    4be2:	fe 16       	cp	r15, r30
    4be4:	b9 f1       	breq	.+110    	; 0x4c54 <__LCD_putchar+0x8a>
    4be6:	ef 15       	cp	r30, r15
    4be8:	38 f1       	brcs	.+78     	; 0x4c38 <__LCD_putchar+0x6e>
    4bea:	f7 e0       	ldi	r31, 0x07	; 7
    4bec:	ff 16       	cp	r15, r31
    4bee:	51 f4       	brne	.+20     	; 0x4c04 <__LCD_putchar+0x3a>
    4bf0:	3b c0       	rjmp	.+118    	; 0x4c68 <__LCD_putchar+0x9e>
    4bf2:	8d e0       	ldi	r24, 0x0D	; 13
    4bf4:	f8 16       	cp	r15, r24
    4bf6:	59 f0       	breq	.+22     	; 0x4c0e <__LCD_putchar+0x44>
    4bf8:	eb e1       	ldi	r30, 0x1B	; 27
    4bfa:	fe 16       	cp	r15, r30
    4bfc:	89 f0       	breq	.+34     	; 0x4c20 <__LCD_putchar+0x56>
    4bfe:	fc e0       	ldi	r31, 0x0C	; 12
    4c00:	ff 16       	cp	r15, r31
    4c02:	41 f0       	breq	.+16     	; 0x4c14 <__LCD_putchar+0x4a>
    4c04:	01 e0       	ldi	r16, 0x01	; 1
    4c06:	41 c0       	rjmp	.+130    	; 0x4c8a <__LCD_putchar+0xc0>
    4c08:	10 92 69 07 	sts	0x0769, r1
    4c0c:	03 c0       	rjmp	.+6      	; 0x4c14 <__LCD_putchar+0x4a>
    4c0e:	10 92 69 07 	sts	0x0769, r1
    4c12:	3a c0       	rjmp	.+116    	; 0x4c88 <__LCD_putchar+0xbe>
    4c14:	80 91 6a 07 	lds	r24, 0x076A
    4c18:	81 50       	subi	r24, 0x01	; 1
    4c1a:	80 93 6a 07 	sts	0x076A, r24
    4c1e:	34 c0       	rjmp	.+104    	; 0x4c88 <__LCD_putchar+0xbe>
    4c20:	0e 94 55 1b 	call	0x36aa	; 0x36aa <LCD_clear>
    4c24:	14 c0       	rjmp	.+40     	; 0x4c4e <__LCD_putchar+0x84>
    4c26:	80 e0       	ldi	r24, 0x00	; 0
    4c28:	61 e0       	ldi	r22, 0x01	; 1
    4c2a:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    4c2e:	80 91 69 07 	lds	r24, 0x0769
    4c32:	8f 5f       	subi	r24, 0xFF	; 255
    4c34:	80 93 69 07 	sts	0x0769, r24
    4c38:	80 91 69 07 	lds	r24, 0x0769
    4c3c:	87 ff       	sbrs	r24, 7
    4c3e:	f3 cf       	rjmp	.-26     	; 0x4c26 <__LCD_putchar+0x5c>
    4c40:	10 92 69 07 	sts	0x0769, r1
    4c44:	80 91 6a 07 	lds	r24, 0x076A
    4c48:	81 50       	subi	r24, 0x01	; 1
    4c4a:	80 93 6a 07 	sts	0x076A, r24
    4c4e:	00 e0       	ldi	r16, 0x00	; 0
    4c50:	11 e0       	ldi	r17, 0x01	; 1
    4c52:	1c c0       	rjmp	.+56     	; 0x4c8c <__LCD_putchar+0xc2>
    4c54:	80 91 69 07 	lds	r24, 0x0769
    4c58:	88 23       	and	r24, r24
    4c5a:	b1 f0       	breq	.+44     	; 0x4c88 <__LCD_putchar+0xbe>
    4c5c:	80 91 69 07 	lds	r24, 0x0769
    4c60:	86 50       	subi	r24, 0x06	; 6
    4c62:	80 93 69 07 	sts	0x0769, r24
    4c66:	10 c0       	rjmp	.+32     	; 0x4c88 <__LCD_putchar+0xbe>
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <SPKR_open>
    4c6e:	64 ef       	ldi	r22, 0xF4	; 244
    4c70:	71 e0       	ldi	r23, 0x01	; 1
    4c72:	80 e0       	ldi	r24, 0x00	; 0
    4c74:	90 e0       	ldi	r25, 0x00	; 0
    4c76:	4d e7       	ldi	r20, 0x7D	; 125
    4c78:	50 e0       	ldi	r21, 0x00	; 0
    4c7a:	24 e6       	ldi	r18, 0x64	; 100
    4c7c:	30 e0       	ldi	r19, 0x00	; 0
    4c7e:	0e 94 ff 27 	call	0x4ffe	; 0x4ffe <SPKR_play_beep>
    4c82:	81 e0       	ldi	r24, 0x01	; 1
    4c84:	0e 94 cb 27 	call	0x4f96	; 0x4f96 <SPKR_close>
    4c88:	00 e0       	ldi	r16, 0x00	; 0
    4c8a:	10 e0       	ldi	r17, 0x00	; 0
    4c8c:	80 91 6a 07 	lds	r24, 0x076A
    4c90:	60 91 69 07 	lds	r22, 0x0769
    4c94:	0e 94 1b 1c 	call	0x3836	; 0x3836 <LCD_set_PGC_addr>
    4c98:	00 23       	and	r16, r16
    4c9a:	51 f1       	breq	.+84     	; 0x4cf0 <__LCD_putchar+0x126>
    4c9c:	85 e0       	ldi	r24, 0x05	; 5
    4c9e:	f8 9e       	mul	r15, r24
    4ca0:	c0 01       	movw	r24, r0
    4ca2:	11 24       	eor	r1, r1
    4ca4:	ec 01       	movw	r28, r24
    4ca6:	c3 55       	subi	r28, 0x53	; 83
    4ca8:	df 4f       	sbci	r29, 0xFF	; 255
    4caa:	8c 01       	movw	r16, r24
    4cac:	0e 54       	subi	r16, 0x4E	; 78
    4cae:	1f 4f       	sbci	r17, 0xFF	; 255
    4cb0:	fe 01       	movw	r30, r28
    4cb2:	84 91       	lpm	r24, Z+
    4cb4:	61 e0       	ldi	r22, 0x01	; 1
    4cb6:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    4cba:	21 96       	adiw	r28, 0x01	; 1
    4cbc:	c0 17       	cp	r28, r16
    4cbe:	d1 07       	cpc	r29, r17
    4cc0:	b9 f7       	brne	.-18     	; 0x4cb0 <__LCD_putchar+0xe6>
    4cc2:	80 e0       	ldi	r24, 0x00	; 0
    4cc4:	61 e0       	ldi	r22, 0x01	; 1
    4cc6:	0e 94 34 1c 	call	0x3868	; 0x3868 <LCD_write>
    4cca:	80 91 69 07 	lds	r24, 0x0769
    4cce:	8a 5f       	subi	r24, 0xFA	; 250
    4cd0:	80 93 69 07 	sts	0x0769, r24
    4cd4:	80 91 69 07 	lds	r24, 0x0769
    4cd8:	90 e0       	ldi	r25, 0x00	; 0
    4cda:	8c 37       	cpi	r24, 0x7C	; 124
    4cdc:	91 05       	cpc	r25, r1
    4cde:	3c f0       	brlt	.+14     	; 0x4cee <__LCD_putchar+0x124>
    4ce0:	10 92 69 07 	sts	0x0769, r1
    4ce4:	80 91 6a 07 	lds	r24, 0x076A
    4ce8:	81 50       	subi	r24, 0x01	; 1
    4cea:	80 93 6a 07 	sts	0x076A, r24
    4cee:	11 e0       	ldi	r17, 0x01	; 1
    4cf0:	80 91 6a 07 	lds	r24, 0x076A
    4cf4:	83 70       	andi	r24, 0x03	; 3
    4cf6:	80 93 6a 07 	sts	0x076A, r24
    4cfa:	11 30       	cpi	r17, 0x01	; 1
    4cfc:	59 f4       	brne	.+22     	; 0x4d14 <__LCD_putchar+0x14a>
    4cfe:	80 91 6b 07 	lds	r24, 0x076B
    4d02:	81 30       	cpi	r24, 0x01	; 1
    4d04:	39 f4       	brne	.+14     	; 0x4d14 <__LCD_putchar+0x14a>
    4d06:	e0 91 6c 07 	lds	r30, 0x076C
    4d0a:	f0 91 6d 07 	lds	r31, 0x076D
    4d0e:	30 97       	sbiw	r30, 0x00	; 0
    4d10:	09 f0       	breq	.+2      	; 0x4d14 <__LCD_putchar+0x14a>
    4d12:	09 95       	icall
    4d14:	80 e0       	ldi	r24, 0x00	; 0
    4d16:	90 e0       	ldi	r25, 0x00	; 0
    4d18:	df 91       	pop	r29
    4d1a:	cf 91       	pop	r28
    4d1c:	1f 91       	pop	r17
    4d1e:	0f 91       	pop	r16
    4d20:	ff 90       	pop	r15
    4d22:	08 95       	ret

00004d24 <__LED_clr_pattern>:
    4d24:	85 fd       	sbrc	r24, 5
    4d26:	5d 98       	cbi	0x0b, 5	; 11
    4d28:	86 fd       	sbrc	r24, 6
    4d2a:	5e 98       	cbi	0x0b, 6	; 11
    4d2c:	08 95       	ret

00004d2e <__LED_init>:
    4d2e:	55 9a       	sbi	0x0a, 5	; 10
    4d30:	56 9a       	sbi	0x0a, 6	; 10
    4d32:	08 95       	ret

00004d34 <__LED_set_pattern>:
    4d34:	85 fd       	sbrc	r24, 5
    4d36:	5d 9a       	sbi	0x0b, 5	; 11
    4d38:	86 fd       	sbrc	r24, 6
    4d3a:	5e 9a       	sbi	0x0b, 6	; 11
    4d3c:	08 95       	ret

00004d3e <ATMEGA_open>:
    4d3e:	80 e0       	ldi	r24, 0x00	; 0
    4d40:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    4d44:	88 23       	and	r24, r24
    4d46:	51 f4       	brne	.+20     	; 0x4d5c <ATMEGA_open+0x1e>
    4d48:	f8 94       	cli
    4d4a:	0e 94 96 29 	call	0x532c	; 0x532c <__ATMEGA_init>
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <ATMEGA_set_clk_mode>
    4d54:	80 e0       	ldi	r24, 0x00	; 0
    4d56:	61 e0       	ldi	r22, 0x01	; 1
    4d58:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    4d5c:	80 e0       	ldi	r24, 0x00	; 0
    4d5e:	91 e0       	ldi	r25, 0x01	; 1
    4d60:	08 95       	ret

00004d62 <ATMEGA_set_clk_mode>:
    4d62:	81 30       	cpi	r24, 0x01	; 1
    4d64:	49 f0       	breq	.+18     	; 0x4d78 <ATMEGA_set_clk_mode+0x16>
    4d66:	f8 94       	cli
    4d68:	81 30       	cpi	r24, 0x01	; 1
    4d6a:	20 f1       	brcs	.+72     	; 0x4db4 <ATMEGA_set_clk_mode+0x52>
    4d6c:	82 30       	cpi	r24, 0x02	; 2
    4d6e:	b1 f0       	breq	.+44     	; 0x4d9c <ATMEGA_set_clk_mode+0x3a>
    4d70:	83 30       	cpi	r24, 0x03	; 3
    4d72:	09 f0       	breq	.+2      	; 0x4d76 <ATMEGA_set_clk_mode+0x14>
    4d74:	45 c0       	rjmp	.+138    	; 0x4e00 <ATMEGA_set_clk_mode+0x9e>
    4d76:	17 c0       	rjmp	.+46     	; 0x4da6 <ATMEGA_set_clk_mode+0x44>
    4d78:	2c 9a       	sbi	0x05, 4	; 5
    4d7a:	80 e8       	ldi	r24, 0x80	; 128
    4d7c:	80 93 61 00 	sts	0x0061, r24
    4d80:	10 92 61 00 	sts	0x0061, r1
    4d84:	80 e0       	ldi	r24, 0x00	; 0
    4d86:	90 e0       	ldi	r25, 0x00	; 0
    4d88:	00 00       	nop
    4d8a:	01 96       	adiw	r24, 0x01	; 1
    4d8c:	88 32       	cpi	r24, 0x28	; 40
    4d8e:	91 05       	cpc	r25, r1
    4d90:	d9 f7       	brne	.-10     	; 0x4d88 <ATMEGA_set_clk_mode+0x26>
    4d92:	10 92 68 00 	sts	0x0068, r1
    4d96:	10 92 6b 00 	sts	0x006B, r1
    4d9a:	08 95       	ret
    4d9c:	80 e8       	ldi	r24, 0x80	; 128
    4d9e:	80 93 61 00 	sts	0x0061, r24
    4da2:	83 e0       	ldi	r24, 0x03	; 3
    4da4:	04 c0       	rjmp	.+8      	; 0x4dae <ATMEGA_set_clk_mode+0x4c>
    4da6:	80 e8       	ldi	r24, 0x80	; 128
    4da8:	80 93 61 00 	sts	0x0061, r24
    4dac:	88 e0       	ldi	r24, 0x08	; 8
    4dae:	80 93 61 00 	sts	0x0061, r24
    4db2:	28 c0       	rjmp	.+80     	; 0x4e04 <ATMEGA_set_clk_mode+0xa2>
    4db4:	80 e0       	ldi	r24, 0x00	; 0
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	00 00       	nop
    4dba:	01 96       	adiw	r24, 0x01	; 1
    4dbc:	2d e6       	ldi	r18, 0x6D	; 109
    4dbe:	80 36       	cpi	r24, 0x60	; 96
    4dc0:	92 07       	cpc	r25, r18
    4dc2:	d1 f7       	brne	.-12     	; 0x4db8 <ATMEGA_set_clk_mode+0x56>
    4dc4:	2c 98       	cbi	0x05, 4	; 5
    4dc6:	80 e0       	ldi	r24, 0x00	; 0
    4dc8:	90 e0       	ldi	r25, 0x00	; 0
    4dca:	00 00       	nop
    4dcc:	01 96       	adiw	r24, 0x01	; 1
    4dce:	2d e6       	ldi	r18, 0x6D	; 109
    4dd0:	80 36       	cpi	r24, 0x60	; 96
    4dd2:	92 07       	cpc	r25, r18
    4dd4:	d1 f7       	brne	.-12     	; 0x4dca <ATMEGA_set_clk_mode+0x68>
    4dd6:	10 92 7a 00 	sts	0x007A, r1
    4dda:	8f ef       	ldi	r24, 0xFF	; 255
    4ddc:	80 93 64 00 	sts	0x0064, r24
    4de0:	80 91 68 00 	lds	r24, 0x0068
    4de4:	81 60       	ori	r24, 0x01	; 1
    4de6:	80 93 68 00 	sts	0x0068, r24
    4dea:	80 91 6b 00 	lds	r24, 0x006B
    4dee:	84 60       	ori	r24, 0x04	; 4
    4df0:	80 93 6b 00 	sts	0x006B, r24
    4df4:	78 94       	sei
    4df6:	83 b7       	in	r24, 0x33	; 51
    4df8:	81 60       	ori	r24, 0x01	; 1
    4dfa:	83 bf       	out	0x33, r24	; 51
    4dfc:	88 95       	sleep
    4dfe:	08 95       	ret
    4e00:	82 30       	cpi	r24, 0x02	; 2
    4e02:	08 f0       	brcs	.+2      	; 0x4e06 <ATMEGA_set_clk_mode+0xa4>
    4e04:	78 94       	sei
    4e06:	08 95       	ret

00004e08 <SPI_open>:
    4e08:	0f 93       	push	r16
    4e0a:	1f 93       	push	r17
    4e0c:	0e 94 c2 29 	call	0x5384	; 0x5384 <__SPI_init>
    4e10:	80 e0       	ldi	r24, 0x00	; 0
    4e12:	61 eb       	ldi	r22, 0xB1	; 177
    4e14:	79 e2       	ldi	r23, 0x29	; 41
    4e16:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <SPI_set_config_func>
    4e1a:	81 e0       	ldi	r24, 0x01	; 1
    4e1c:	69 ea       	ldi	r22, 0xA9	; 169
    4e1e:	79 e2       	ldi	r23, 0x29	; 41
    4e20:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <SPI_set_config_func>
    4e24:	82 e0       	ldi	r24, 0x02	; 2
    4e26:	61 ea       	ldi	r22, 0xA1	; 161
    4e28:	79 e2       	ldi	r23, 0x29	; 41
    4e2a:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <SPI_set_config_func>
    4e2e:	86 e0       	ldi	r24, 0x06	; 6
    4e30:	69 eb       	ldi	r22, 0xB9	; 185
    4e32:	79 e2       	ldi	r23, 0x29	; 41
    4e34:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <SPI_set_config_func>
    4e38:	09 e9       	ldi	r16, 0x99	; 153
    4e3a:	19 e2       	ldi	r17, 0x29	; 41
    4e3c:	83 e0       	ldi	r24, 0x03	; 3
    4e3e:	b8 01       	movw	r22, r16
    4e40:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <SPI_set_config_func>
    4e44:	84 e0       	ldi	r24, 0x04	; 4
    4e46:	b8 01       	movw	r22, r16
    4e48:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <SPI_set_config_func>
    4e4c:	85 e0       	ldi	r24, 0x05	; 5
    4e4e:	b8 01       	movw	r22, r16
    4e50:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <SPI_set_config_func>
    4e54:	87 e0       	ldi	r24, 0x07	; 7
    4e56:	b8 01       	movw	r22, r16
    4e58:	0e 94 4f 27 	call	0x4e9e	; 0x4e9e <SPI_set_config_func>
    4e5c:	82 e0       	ldi	r24, 0x02	; 2
    4e5e:	61 e0       	ldi	r22, 0x01	; 1
    4e60:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    4e64:	8f ef       	ldi	r24, 0xFF	; 255
    4e66:	80 93 6e 07 	sts	0x076E, r24
    4e6a:	87 e0       	ldi	r24, 0x07	; 7
    4e6c:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <SPI_set_slave_addr>
    4e70:	82 e0       	ldi	r24, 0x02	; 2
    4e72:	91 e0       	ldi	r25, 0x01	; 1
    4e74:	1f 91       	pop	r17
    4e76:	0f 91       	pop	r16
    4e78:	08 95       	ret

00004e7a <SPI_receive>:
    4e7a:	1f 93       	push	r17
    4e7c:	16 2f       	mov	r17, r22
    4e7e:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <SPI_set_slave_addr>
    4e82:	82 e0       	ldi	r24, 0x02	; 2
    4e84:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    4e88:	81 30       	cpi	r24, 0x01	; 1
    4e8a:	11 f0       	breq	.+4      	; 0x4e90 <SPI_receive+0x16>
    4e8c:	80 e0       	ldi	r24, 0x00	; 0
    4e8e:	05 c0       	rjmp	.+10     	; 0x4e9a <SPI_receive+0x20>
    4e90:	1e bd       	out	0x2e, r17	; 46
    4e92:	0d b4       	in	r0, 0x2d	; 45
    4e94:	07 fe       	sbrs	r0, 7
    4e96:	fd cf       	rjmp	.-6      	; 0x4e92 <SPI_receive+0x18>
    4e98:	8e b5       	in	r24, 0x2e	; 46
    4e9a:	1f 91       	pop	r17
    4e9c:	08 95       	ret

00004e9e <SPI_set_config_func>:
    4e9e:	e8 2f       	mov	r30, r24
    4ea0:	f0 e0       	ldi	r31, 0x00	; 0
    4ea2:	ee 0f       	add	r30, r30
    4ea4:	ff 1f       	adc	r31, r31
    4ea6:	e6 5c       	subi	r30, 0xC6	; 198
    4ea8:	fb 4f       	sbci	r31, 0xFB	; 251
    4eaa:	71 83       	std	Z+1, r23	; 0x01
    4eac:	60 83       	st	Z, r22
    4eae:	08 95       	ret

00004eb0 <__SPKR_TIMER1_COMPA_vect>:
    4eb0:	0e 94 5b 27 	call	0x4eb6	; 0x4eb6 <SPKR_clk>
    4eb4:	08 95       	ret

00004eb6 <SPKR_clk>:
    4eb6:	80 91 4c 04 	lds	r24, 0x044C
    4eba:	90 91 4d 04 	lds	r25, 0x044D
    4ebe:	a0 91 4e 04 	lds	r26, 0x044E
    4ec2:	b0 91 4f 04 	lds	r27, 0x044F
    4ec6:	20 91 50 04 	lds	r18, 0x0450
    4eca:	30 91 51 04 	lds	r19, 0x0451
    4ece:	40 91 52 04 	lds	r20, 0x0452
    4ed2:	50 91 53 04 	lds	r21, 0x0453
    4ed6:	28 0f       	add	r18, r24
    4ed8:	39 1f       	adc	r19, r25
    4eda:	4a 1f       	adc	r20, r26
    4edc:	5b 1f       	adc	r21, r27
    4ede:	20 93 4c 04 	sts	0x044C, r18
    4ee2:	30 93 4d 04 	sts	0x044D, r19
    4ee6:	40 93 4e 04 	sts	0x044E, r20
    4eea:	50 93 4f 04 	sts	0x044F, r21
    4eee:	80 91 4c 04 	lds	r24, 0x044C
    4ef2:	90 91 4d 04 	lds	r25, 0x044D
    4ef6:	a0 91 4e 04 	lds	r26, 0x044E
    4efa:	b0 91 4f 04 	lds	r27, 0x044F
    4efe:	88 51       	subi	r24, 0x18	; 24
    4f00:	96 4f       	sbci	r25, 0xF6	; 246
    4f02:	a0 40       	sbci	r26, 0x00	; 0
    4f04:	b0 40       	sbci	r27, 0x00	; 0
    4f06:	bc f0       	brlt	.+46     	; 0x4f36 <SPKR_clk+0x80>
    4f08:	8b b1       	in	r24, 0x0b	; 11
    4f0a:	80 58       	subi	r24, 0x80	; 128
    4f0c:	8b b9       	out	0x0b, r24	; 11
    4f0e:	80 91 4c 04 	lds	r24, 0x044C
    4f12:	90 91 4d 04 	lds	r25, 0x044D
    4f16:	a0 91 4e 04 	lds	r26, 0x044E
    4f1a:	b0 91 4f 04 	lds	r27, 0x044F
    4f1e:	88 51       	subi	r24, 0x18	; 24
    4f20:	96 4f       	sbci	r25, 0xF6	; 246
    4f22:	a0 40       	sbci	r26, 0x00	; 0
    4f24:	b0 40       	sbci	r27, 0x00	; 0
    4f26:	80 93 4c 04 	sts	0x044C, r24
    4f2a:	90 93 4d 04 	sts	0x044D, r25
    4f2e:	a0 93 4e 04 	sts	0x044E, r26
    4f32:	b0 93 4f 04 	sts	0x044F, r27
    4f36:	08 95       	ret

00004f38 <__SPKR_close_beep_mode>:
    4f38:	8a e0       	ldi	r24, 0x0A	; 10
    4f3a:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    4f3e:	81 30       	cpi	r24, 0x01	; 1
    4f40:	41 f4       	brne	.+16     	; 0x4f52 <__SPKR_close_beep_mode+0x1a>
    4f42:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <__SPKR_close>
    4f46:	10 92 4b 04 	sts	0x044B, r1
    4f4a:	8a e0       	ldi	r24, 0x0A	; 10
    4f4c:	60 e0       	ldi	r22, 0x00	; 0
    4f4e:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    4f52:	08 95       	ret

00004f54 <__SPKR_close_tone_mode>:
    4f54:	89 e0       	ldi	r24, 0x09	; 9
    4f56:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    4f5a:	81 30       	cpi	r24, 0x01	; 1
    4f5c:	d9 f4       	brne	.+54     	; 0x4f94 <__SPKR_close_tone_mode+0x40>
    4f5e:	80 91 4a 04 	lds	r24, 0x044A
    4f62:	88 23       	and	r24, r24
    4f64:	11 f0       	breq	.+4      	; 0x4f6a <__SPKR_close_tone_mode+0x16>
    4f66:	0e 94 4c 28 	call	0x5098	; 0x5098 <__SPKR_stop>
    4f6a:	82 e0       	ldi	r24, 0x02	; 2
    4f6c:	0e 94 e0 29 	call	0x53c0	; 0x53c0 <__SPKR_close>
    4f70:	80 91 58 04 	lds	r24, 0x0458
    4f74:	90 91 59 04 	lds	r25, 0x0459
    4f78:	00 97       	sbiw	r24, 0x00	; 0
    4f7a:	31 f0       	breq	.+12     	; 0x4f88 <__SPKR_close_tone_mode+0x34>
    4f7c:	0e 94 53 36 	call	0x6ca6	; 0x6ca6 <free>
    4f80:	10 92 59 04 	sts	0x0459, r1
    4f84:	10 92 58 04 	sts	0x0458, r1
    4f88:	10 92 4a 04 	sts	0x044A, r1
    4f8c:	89 e0       	ldi	r24, 0x09	; 9
    4f8e:	60 e0       	ldi	r22, 0x00	; 0
    4f90:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    4f94:	08 95       	ret

00004f96 <SPKR_close>:
    4f96:	81 30       	cpi	r24, 0x01	; 1
    4f98:	29 f0       	breq	.+10     	; 0x4fa4 <SPKR_close+0xe>
    4f9a:	82 30       	cpi	r24, 0x02	; 2
    4f9c:	29 f4       	brne	.+10     	; 0x4fa8 <SPKR_close+0x12>
    4f9e:	0e 94 aa 27 	call	0x4f54	; 0x4f54 <__SPKR_close_tone_mode>
    4fa2:	08 95       	ret
    4fa4:	0e 94 9c 27 	call	0x4f38	; 0x4f38 <__SPKR_close_beep_mode>
    4fa8:	08 95       	ret

00004faa <__SPKR_init>:
    4faa:	98 2f       	mov	r25, r24
    4fac:	80 91 4a 04 	lds	r24, 0x044A
    4fb0:	88 23       	and	r24, r24
    4fb2:	31 f4       	brne	.+12     	; 0x4fc0 <__SPKR_init+0x16>
    4fb4:	80 91 4b 04 	lds	r24, 0x044B
    4fb8:	88 23       	and	r24, r24
    4fba:	11 f4       	brne	.+4      	; 0x4fc0 <__SPKR_init+0x16>
    4fbc:	57 9a       	sbi	0x0a, 7	; 10
    4fbe:	5f 98       	cbi	0x0b, 7	; 11
    4fc0:	80 91 4a 04 	lds	r24, 0x044A
    4fc4:	88 23       	and	r24, r24
    4fc6:	d1 f4       	brne	.+52     	; 0x4ffc <__SPKR_init+0x52>
    4fc8:	92 30       	cpi	r25, 0x02	; 2
    4fca:	c1 f4       	brne	.+48     	; 0x4ffc <__SPKR_init+0x52>
    4fcc:	10 92 80 00 	sts	0x0080, r1
    4fd0:	10 92 81 00 	sts	0x0081, r1
    4fd4:	80 91 81 00 	lds	r24, 0x0081
    4fd8:	88 60       	ori	r24, 0x08	; 8
    4fda:	80 93 81 00 	sts	0x0081, r24
    4fde:	80 91 81 00 	lds	r24, 0x0081
    4fe2:	81 60       	ori	r24, 0x01	; 1
    4fe4:	80 93 81 00 	sts	0x0081, r24
    4fe8:	10 92 85 00 	sts	0x0085, r1
    4fec:	10 92 84 00 	sts	0x0084, r1
    4ff0:	81 e0       	ldi	r24, 0x01	; 1
    4ff2:	80 93 89 00 	sts	0x0089, r24
    4ff6:	80 e9       	ldi	r24, 0x90	; 144
    4ff8:	80 93 88 00 	sts	0x0088, r24
    4ffc:	08 95       	ret

00004ffe <SPKR_play_beep>:
    4ffe:	8f 92       	push	r8
    5000:	9f 92       	push	r9
    5002:	af 92       	push	r10
    5004:	bf 92       	push	r11
    5006:	cf 92       	push	r12
    5008:	df 92       	push	r13
    500a:	ef 92       	push	r14
    500c:	ff 92       	push	r15
    500e:	0f 93       	push	r16
    5010:	1f 93       	push	r17
    5012:	cf 93       	push	r28
    5014:	df 93       	push	r29
    5016:	4b 01       	movw	r8, r22
    5018:	5c 01       	movw	r10, r24
    501a:	ea 01       	movw	r28, r20
    501c:	b9 01       	movw	r22, r18
    501e:	21 15       	cp	r18, r1
    5020:	31 05       	cpc	r19, r1
    5022:	39 f1       	breq	.+78     	; 0x5072 <SPKR_play_beep+0x74>
    5024:	9e 01       	movw	r18, r28
    5026:	44 27       	eor	r20, r20
    5028:	37 fd       	sbrc	r19, 7
    502a:	40 95       	com	r20
    502c:	54 2f       	mov	r21, r20
    502e:	65 36       	cpi	r22, 0x65	; 101
    5030:	71 05       	cpc	r23, r1
    5032:	10 f0       	brcs	.+4      	; 0x5038 <SPKR_play_beep+0x3a>
    5034:	64 e6       	ldi	r22, 0x64	; 100
    5036:	70 e0       	ldi	r23, 0x00	; 0
    5038:	80 e0       	ldi	r24, 0x00	; 0
    503a:	90 e0       	ldi	r25, 0x00	; 0
    503c:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__mulsi3>
    5040:	24 e6       	ldi	r18, 0x64	; 100
    5042:	30 e0       	ldi	r19, 0x00	; 0
    5044:	40 e0       	ldi	r20, 0x00	; 0
    5046:	50 e0       	ldi	r21, 0x00	; 0
    5048:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <__udivmodsi4>
    504c:	79 01       	movw	r14, r18
    504e:	8a 01       	movw	r16, r20
    5050:	c5 01       	movw	r24, r10
    5052:	b4 01       	movw	r22, r8
    5054:	0e 94 c9 29 	call	0x5392	; 0x5392 <SPKR_beep>
    5058:	c7 01       	movw	r24, r14
    505a:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
    505e:	60 e0       	ldi	r22, 0x00	; 0
    5060:	70 e0       	ldi	r23, 0x00	; 0
    5062:	80 e0       	ldi	r24, 0x00	; 0
    5064:	90 e0       	ldi	r25, 0x00	; 0
    5066:	0e 94 c9 29 	call	0x5392	; 0x5392 <SPKR_beep>
    506a:	ce 01       	movw	r24, r28
    506c:	8e 19       	sub	r24, r14
    506e:	9f 09       	sbc	r25, r15
    5070:	04 c0       	rjmp	.+8      	; 0x507a <SPKR_play_beep+0x7c>
    5072:	41 15       	cp	r20, r1
    5074:	51 05       	cpc	r21, r1
    5076:	19 f0       	breq	.+6      	; 0x507e <SPKR_play_beep+0x80>
    5078:	ca 01       	movw	r24, r20
    507a:	0e 94 30 22 	call	0x4460	; 0x4460 <TMRSRVC_delay>
    507e:	df 91       	pop	r29
    5080:	cf 91       	pop	r28
    5082:	1f 91       	pop	r17
    5084:	0f 91       	pop	r16
    5086:	ff 90       	pop	r15
    5088:	ef 90       	pop	r14
    508a:	df 90       	pop	r13
    508c:	cf 90       	pop	r12
    508e:	bf 90       	pop	r11
    5090:	af 90       	pop	r10
    5092:	9f 90       	pop	r9
    5094:	8f 90       	pop	r8
    5096:	08 95       	ret

00005098 <__SPKR_stop>:
    5098:	ef e6       	ldi	r30, 0x6F	; 111
    509a:	f0 e0       	ldi	r31, 0x00	; 0
    509c:	80 81       	ld	r24, Z
    509e:	8d 7f       	andi	r24, 0xFD	; 253
    50a0:	80 83       	st	Z, r24
    50a2:	08 95       	ret

000050a4 <STEPPER_go>:
    50a4:	98 2f       	mov	r25, r24
    50a6:	81 e0       	ldi	r24, 0x01	; 1
    50a8:	80 93 53 07 	sts	0x0753, r24
    50ac:	91 30       	cpi	r25, 0x01	; 1
    50ae:	51 f0       	breq	.+20     	; 0x50c4 <STEPPER_go+0x20>
    50b0:	91 30       	cpi	r25, 0x01	; 1
    50b2:	18 f0       	brcs	.+6      	; 0x50ba <STEPPER_go+0x16>
    50b4:	92 30       	cpi	r25, 0x02	; 2
    50b6:	41 f4       	brne	.+16     	; 0x50c8 <STEPPER_go+0x24>
    50b8:	03 c0       	rjmp	.+6      	; 0x50c0 <STEPPER_go+0x1c>
    50ba:	10 92 3b 07 	sts	0x073B, r1
    50be:	04 c0       	rjmp	.+8      	; 0x50c8 <STEPPER_go+0x24>
    50c0:	10 92 3b 07 	sts	0x073B, r1
    50c4:	10 92 3c 07 	sts	0x073C, r1
    50c8:	10 92 53 07 	sts	0x0753, r1
    50cc:	08 95       	ret

000050ce <__STEPPER_init>:
    50ce:	3a 9a       	sbi	0x07, 2	; 7
    50d0:	3b 9a       	sbi	0x07, 3	; 7
    50d2:	3c 9a       	sbi	0x07, 4	; 7
    50d4:	3d 9a       	sbi	0x07, 5	; 7
    50d6:	3e 9a       	sbi	0x07, 6	; 7
    50d8:	3f 9a       	sbi	0x07, 7	; 7
    50da:	88 b1       	in	r24, 0x08	; 8
    50dc:	83 70       	andi	r24, 0x03	; 3
    50de:	88 b9       	out	0x08, r24	; 8
    50e0:	08 95       	ret

000050e2 <STEPPER_set_stop_mode>:
    50e2:	98 2f       	mov	r25, r24
    50e4:	81 e0       	ldi	r24, 0x01	; 1
    50e6:	80 93 53 07 	sts	0x0753, r24
    50ea:	91 30       	cpi	r25, 0x01	; 1
    50ec:	51 f0       	breq	.+20     	; 0x5102 <STEPPER_set_stop_mode+0x20>
    50ee:	91 30       	cpi	r25, 0x01	; 1
    50f0:	18 f0       	brcs	.+6      	; 0x50f8 <STEPPER_set_stop_mode+0x16>
    50f2:	92 30       	cpi	r25, 0x02	; 2
    50f4:	41 f4       	brne	.+16     	; 0x5106 <STEPPER_set_stop_mode+0x24>
    50f6:	03 c0       	rjmp	.+6      	; 0x50fe <STEPPER_set_stop_mode+0x1c>
    50f8:	60 93 3d 07 	sts	0x073D, r22
    50fc:	04 c0       	rjmp	.+8      	; 0x5106 <STEPPER_set_stop_mode+0x24>
    50fe:	60 93 3d 07 	sts	0x073D, r22
    5102:	60 93 3e 07 	sts	0x073E, r22
    5106:	10 92 53 07 	sts	0x0753, r1
    510a:	08 95       	ret

0000510c <STEPPER_setup_decels>:
    510c:	0f 93       	push	r16
    510e:	1f 93       	push	r17
    5110:	cf 93       	push	r28
    5112:	df 93       	push	r29
    5114:	eb 01       	movw	r28, r22
    5116:	8a 01       	movw	r16, r20
    5118:	81 30       	cpi	r24, 0x01	; 1
    511a:	01 f1       	breq	.+64     	; 0x515c <STEPPER_setup_decels+0x50>
    511c:	81 30       	cpi	r24, 0x01	; 1
    511e:	18 f0       	brcs	.+6      	; 0x5126 <STEPPER_setup_decels+0x1a>
    5120:	82 30       	cpi	r24, 0x02	; 2
    5122:	61 f5       	brne	.+88     	; 0x517c <STEPPER_setup_decels+0x70>
    5124:	0d c0       	rjmp	.+26     	; 0x5140 <STEPPER_setup_decels+0x34>
    5126:	80 91 27 07 	lds	r24, 0x0727
    512a:	90 91 28 07 	lds	r25, 0x0728
    512e:	89 2b       	or	r24, r25
    5130:	11 f0       	breq	.+4      	; 0x5136 <STEPPER_setup_decels+0x2a>
    5132:	80 e0       	ldi	r24, 0x00	; 0
    5134:	1a c0       	rjmp	.+52     	; 0x516a <STEPPER_setup_decels+0x5e>
    5136:	10 92 34 07 	sts	0x0734, r1
    513a:	10 92 33 07 	sts	0x0733, r1
    513e:	1e c0       	rjmp	.+60     	; 0x517c <STEPPER_setup_decels+0x70>
    5140:	80 91 27 07 	lds	r24, 0x0727
    5144:	90 91 28 07 	lds	r25, 0x0728
    5148:	89 2b       	or	r24, r25
    514a:	21 f0       	breq	.+8      	; 0x5154 <STEPPER_setup_decels+0x48>
    514c:	80 e0       	ldi	r24, 0x00	; 0
    514e:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <STEPPER_set_decel_step_values>
    5152:	04 c0       	rjmp	.+8      	; 0x515c <STEPPER_setup_decels+0x50>
    5154:	10 92 34 07 	sts	0x0734, r1
    5158:	10 92 33 07 	sts	0x0733, r1
    515c:	80 91 29 07 	lds	r24, 0x0729
    5160:	90 91 2a 07 	lds	r25, 0x072A
    5164:	89 2b       	or	r24, r25
    5166:	31 f0       	breq	.+12     	; 0x5174 <STEPPER_setup_decels+0x68>
    5168:	81 e0       	ldi	r24, 0x01	; 1
    516a:	be 01       	movw	r22, r28
    516c:	a8 01       	movw	r20, r16
    516e:	0e 94 fc 29 	call	0x53f8	; 0x53f8 <STEPPER_set_decel_step_values>
    5172:	04 c0       	rjmp	.+8      	; 0x517c <STEPPER_setup_decels+0x70>
    5174:	10 92 36 07 	sts	0x0736, r1
    5178:	10 92 35 07 	sts	0x0735, r1
    517c:	df 91       	pop	r29
    517e:	cf 91       	pop	r28
    5180:	1f 91       	pop	r17
    5182:	0f 91       	pop	r16
    5184:	08 95       	ret

00005186 <SYS_init>:
    5186:	10 92 56 07 	sts	0x0756, r1
    518a:	10 92 57 07 	sts	0x0757, r1
    518e:	10 92 5b 07 	sts	0x075B, r1
    5192:	10 92 58 07 	sts	0x0758, r1
    5196:	10 92 5a 07 	sts	0x075A, r1
    519a:	10 92 5c 07 	sts	0x075C, r1
    519e:	10 92 5d 07 	sts	0x075D, r1
    51a2:	10 92 5e 07 	sts	0x075E, r1
    51a6:	10 92 5f 07 	sts	0x075F, r1
    51aa:	10 92 60 07 	sts	0x0760, r1
    51ae:	10 92 61 07 	sts	0x0761, r1
    51b2:	10 92 62 07 	sts	0x0762, r1
    51b6:	10 92 63 07 	sts	0x0763, r1
    51ba:	10 92 64 07 	sts	0x0764, r1
    51be:	10 92 65 07 	sts	0x0765, r1
    51c2:	10 92 66 07 	sts	0x0766, r1
    51c6:	10 92 67 07 	sts	0x0767, r1
    51ca:	08 95       	ret

000051cc <TMRSRVC_insert>:
    51cc:	cf 92       	push	r12
    51ce:	df 92       	push	r13
    51d0:	ef 92       	push	r14
    51d2:	ff 92       	push	r15
    51d4:	0f 93       	push	r16
    51d6:	1f 93       	push	r17
    51d8:	cf 93       	push	r28
    51da:	df 93       	push	r29
    51dc:	ec 01       	movw	r28, r24
    51de:	80 91 8d 07 	lds	r24, 0x078D
    51e2:	88 23       	and	r24, r24
    51e4:	39 f4       	brne	.+14     	; 0x51f4 <TMRSRVC_insert+0x28>
    51e6:	d0 93 8f 07 	sts	0x078F, r29
    51ea:	c0 93 8e 07 	sts	0x078E, r28
    51ee:	0e 94 74 29 	call	0x52e8	; 0x52e8 <TMRSRVC_start>
    51f2:	47 c0       	rjmp	.+142    	; 0x5282 <TMRSRVC_insert+0xb6>
    51f4:	c0 90 8e 07 	lds	r12, 0x078E
    51f8:	d0 90 8f 07 	lds	r13, 0x078F
    51fc:	00 e0       	ldi	r16, 0x00	; 0
    51fe:	10 e0       	ldi	r17, 0x00	; 0
    5200:	ee 24       	eor	r14, r14
    5202:	ff 24       	eor	r15, r15
    5204:	37 c0       	rjmp	.+110    	; 0x5274 <TMRSRVC_insert+0xa8>
    5206:	a8 81       	ld	r26, Y
    5208:	b9 81       	ldd	r27, Y+1	; 0x01
    520a:	fd 01       	movw	r30, r26
    520c:	64 81       	ldd	r22, Z+4	; 0x04
    520e:	75 81       	ldd	r23, Z+5	; 0x05
    5210:	f6 01       	movw	r30, r12
    5212:	40 81       	ld	r20, Z
    5214:	51 81       	ldd	r21, Z+1	; 0x01
    5216:	fa 01       	movw	r30, r20
    5218:	84 81       	ldd	r24, Z+4	; 0x04
    521a:	95 81       	ldd	r25, Z+5	; 0x05
    521c:	9b 01       	movw	r18, r22
    521e:	28 1b       	sub	r18, r24
    5220:	39 0b       	sbc	r19, r25
    5222:	37 ff       	sbrs	r19, 7
    5224:	0f c0       	rjmp	.+30     	; 0x5244 <TMRSRVC_insert+0x78>
    5226:	86 1b       	sub	r24, r22
    5228:	97 0b       	sbc	r25, r23
    522a:	95 83       	std	Z+5, r25	; 0x05
    522c:	84 83       	std	Z+4, r24	; 0x04
    522e:	db 82       	std	Y+3, r13	; 0x03
    5230:	ca 82       	std	Y+2, r12	; 0x02
    5232:	01 2b       	or	r16, r17
    5234:	29 f4       	brne	.+10     	; 0x5240 <TMRSRVC_insert+0x74>
    5236:	d0 93 8f 07 	sts	0x078F, r29
    523a:	c0 93 8e 07 	sts	0x078E, r28
    523e:	21 c0       	rjmp	.+66     	; 0x5282 <TMRSRVC_insert+0xb6>
    5240:	f7 01       	movw	r30, r14
    5242:	0c c0       	rjmp	.+24     	; 0x525c <TMRSRVC_insert+0x90>
    5244:	f6 01       	movw	r30, r12
    5246:	82 81       	ldd	r24, Z+2	; 0x02
    5248:	93 81       	ldd	r25, Z+3	; 0x03
    524a:	21 15       	cp	r18, r1
    524c:	31 05       	cpc	r19, r1
    524e:	49 f4       	brne	.+18     	; 0x5262 <TMRSRVC_insert+0x96>
    5250:	fd 01       	movw	r30, r26
    5252:	15 82       	std	Z+5, r1	; 0x05
    5254:	14 82       	std	Z+4, r1	; 0x04
    5256:	9b 83       	std	Y+3, r25	; 0x03
    5258:	8a 83       	std	Y+2, r24	; 0x02
    525a:	f6 01       	movw	r30, r12
    525c:	d3 83       	std	Z+3, r29	; 0x03
    525e:	c2 83       	std	Z+2, r28	; 0x02
    5260:	10 c0       	rjmp	.+32     	; 0x5282 <TMRSRVC_insert+0xb6>
    5262:	fd 01       	movw	r30, r26
    5264:	35 83       	std	Z+5, r19	; 0x05
    5266:	24 83       	std	Z+4, r18	; 0x04
    5268:	00 97       	sbiw	r24, 0x00	; 0
    526a:	b9 f3       	breq	.-18     	; 0x525a <TMRSRVC_insert+0x8e>
    526c:	0f 5f       	subi	r16, 0xFF	; 255
    526e:	1f 4f       	sbci	r17, 0xFF	; 255
    5270:	76 01       	movw	r14, r12
    5272:	6c 01       	movw	r12, r24
    5274:	80 91 8d 07 	lds	r24, 0x078D
    5278:	90 e0       	ldi	r25, 0x00	; 0
    527a:	08 17       	cp	r16, r24
    527c:	19 07       	cpc	r17, r25
    527e:	18 f2       	brcs	.-122    	; 0x5206 <TMRSRVC_insert+0x3a>
    5280:	ec cf       	rjmp	.-40     	; 0x525a <TMRSRVC_insert+0x8e>
    5282:	80 91 8d 07 	lds	r24, 0x078D
    5286:	8f 5f       	subi	r24, 0xFF	; 255
    5288:	80 93 8d 07 	sts	0x078D, r24
    528c:	df 91       	pop	r29
    528e:	cf 91       	pop	r28
    5290:	1f 91       	pop	r17
    5292:	0f 91       	pop	r16
    5294:	ff 90       	pop	r15
    5296:	ef 90       	pop	r14
    5298:	df 90       	pop	r13
    529a:	cf 90       	pop	r12
    529c:	08 95       	ret

0000529e <TMRSRVC_open>:
    529e:	88 e0       	ldi	r24, 0x08	; 8
    52a0:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    52a4:	88 23       	and	r24, r24
    52a6:	b9 f4       	brne	.+46     	; 0x52d6 <TMRSRVC_open+0x38>
    52a8:	10 92 8d 07 	sts	0x078D, r1
    52ac:	10 92 8f 07 	sts	0x078F, r1
    52b0:	10 92 8e 07 	sts	0x078E, r1
    52b4:	10 92 5a 04 	sts	0x045A, r1
    52b8:	10 92 5b 04 	sts	0x045B, r1
    52bc:	80 e1       	ldi	r24, 0x10	; 16
    52be:	69 e6       	ldi	r22, 0x69	; 105
    52c0:	7a e2       	ldi	r23, 0x2A	; 42
    52c2:	0e 94 85 29 	call	0x530a	; 0x530a <__ISR_attach>
    52c6:	0e 94 70 2a 	call	0x54e0	; 0x54e0 <__TMRSRVC_init>
    52ca:	0e 94 6e 29 	call	0x52dc	; 0x52dc <__TMRSRVC_start>
    52ce:	88 e0       	ldi	r24, 0x08	; 8
    52d0:	61 e0       	ldi	r22, 0x01	; 1
    52d2:	0e 94 1b 21 	call	0x4236	; 0x4236 <SYS_set_state>
    52d6:	88 e0       	ldi	r24, 0x08	; 8
    52d8:	91 e0       	ldi	r25, 0x01	; 1
    52da:	08 95       	ret

000052dc <__TMRSRVC_start>:
    52dc:	ee e6       	ldi	r30, 0x6E	; 110
    52de:	f0 e0       	ldi	r31, 0x00	; 0
    52e0:	80 81       	ld	r24, Z
    52e2:	82 60       	ori	r24, 0x02	; 2
    52e4:	80 83       	st	Z, r24
    52e6:	08 95       	ret

000052e8 <TMRSRVC_start>:
    52e8:	81 e0       	ldi	r24, 0x01	; 1
    52ea:	80 93 5b 04 	sts	0x045B, r24
    52ee:	08 95       	ret

000052f0 <I2C_enable>:
    52f0:	80 91 90 07 	lds	r24, 0x0790
    52f4:	81 30       	cpi	r24, 0x01	; 1
    52f6:	29 f4       	brne	.+10     	; 0x5302 <I2C_enable+0x12>
    52f8:	80 91 bc 00 	lds	r24, 0x00BC
    52fc:	84 60       	ori	r24, 0x04	; 4
    52fe:	80 93 bc 00 	sts	0x00BC, r24
    5302:	08 95       	ret

00005304 <__I2C_init>:
    5304:	38 98       	cbi	0x07, 0	; 7
    5306:	39 98       	cbi	0x07, 1	; 7
    5308:	08 95       	ret

0000530a <__ISR_attach>:
    530a:	80 32       	cpi	r24, 0x20	; 32
    530c:	18 f0       	brcs	.+6      	; 0x5314 <__ISR_attach+0xa>
    530e:	20 e0       	ldi	r18, 0x00	; 0
    5310:	30 e0       	ldi	r19, 0x00	; 0
    5312:	0a c0       	rjmp	.+20     	; 0x5328 <__ISR_attach+0x1e>
    5314:	e8 2f       	mov	r30, r24
    5316:	f0 e0       	ldi	r31, 0x00	; 0
    5318:	ee 0f       	add	r30, r30
    531a:	ff 1f       	adc	r31, r31
    531c:	e6 50       	subi	r30, 0x06	; 6
    531e:	fc 4f       	sbci	r31, 0xFC	; 252
    5320:	20 81       	ld	r18, Z
    5322:	31 81       	ldd	r19, Z+1	; 0x01
    5324:	71 83       	std	Z+1, r23	; 0x01
    5326:	60 83       	st	Z, r22
    5328:	c9 01       	movw	r24, r18
    532a:	08 95       	ret

0000532c <__ATMEGA_init>:
    532c:	24 9a       	sbi	0x04, 4	; 4
    532e:	2c 9a       	sbi	0x05, 4	; 5
    5330:	08 95       	ret

00005332 <SPI_default_config>:
    5332:	83 e5       	ldi	r24, 0x53	; 83
    5334:	8c bd       	out	0x2c, r24	; 44
    5336:	81 e0       	ldi	r24, 0x01	; 1
    5338:	8d bd       	out	0x2d, r24	; 45
    533a:	8d e0       	ldi	r24, 0x0D	; 13
    533c:	8a 95       	dec	r24
    533e:	f1 f7       	brne	.-4      	; 0x533c <SPI_default_config+0xa>
    5340:	08 95       	ret

00005342 <SPI_ATtiny0_config>:
    5342:	83 e5       	ldi	r24, 0x53	; 83
    5344:	8c bd       	out	0x2c, r24	; 44
    5346:	1d bc       	out	0x2d, r1	; 45
    5348:	84 ef       	ldi	r24, 0xF4	; 244
    534a:	91 e0       	ldi	r25, 0x01	; 1
    534c:	01 97       	sbiw	r24, 0x01	; 1
    534e:	f1 f7       	brne	.-4      	; 0x534c <SPI_ATtiny0_config+0xa>
    5350:	08 95       	ret

00005352 <SPI_PSXC_config>:
    5352:	8f e7       	ldi	r24, 0x7F	; 127
    5354:	8c bd       	out	0x2c, r24	; 44
    5356:	1d bc       	out	0x2d, r1	; 45
    5358:	84 ef       	ldi	r24, 0xF4	; 244
    535a:	91 e0       	ldi	r25, 0x01	; 1
    535c:	01 97       	sbiw	r24, 0x01	; 1
    535e:	f1 f7       	brne	.-4      	; 0x535c <SPI_PSXC_config+0xa>
    5360:	08 95       	ret

00005362 <SPI_LCD_config>:
    5362:	83 e5       	ldi	r24, 0x53	; 83
    5364:	8c bd       	out	0x2c, r24	; 44
    5366:	81 e0       	ldi	r24, 0x01	; 1
    5368:	8d bd       	out	0x2d, r24	; 45
    536a:	8d e0       	ldi	r24, 0x0D	; 13
    536c:	8a 95       	dec	r24
    536e:	f1 f7       	brne	.-4      	; 0x536c <SPI_LCD_config+0xa>
    5370:	08 95       	ret

00005372 <SPI_FLASH_config>:
    5372:	83 e5       	ldi	r24, 0x53	; 83
    5374:	8c bd       	out	0x2c, r24	; 44
    5376:	81 e0       	ldi	r24, 0x01	; 1
    5378:	8d bd       	out	0x2d, r24	; 45
    537a:	84 ef       	ldi	r24, 0xF4	; 244
    537c:	91 e0       	ldi	r25, 0x01	; 1
    537e:	01 97       	sbiw	r24, 0x01	; 1
    5380:	f1 f7       	brne	.-4      	; 0x537e <SPI_FLASH_config+0xc>
    5382:	08 95       	ret

00005384 <__SPI_init>:
    5384:	25 9a       	sbi	0x04, 5	; 4
    5386:	26 98       	cbi	0x04, 6	; 4
    5388:	27 9a       	sbi	0x04, 7	; 4
    538a:	20 9a       	sbi	0x04, 0	; 4
    538c:	21 9a       	sbi	0x04, 1	; 4
    538e:	22 9a       	sbi	0x04, 2	; 4
    5390:	08 95       	ret

00005392 <SPKR_beep>:
    5392:	9b 01       	movw	r18, r22
    5394:	ac 01       	movw	r20, r24
    5396:	80 91 4b 04 	lds	r24, 0x044B
    539a:	88 23       	and	r24, r24
    539c:	81 f0       	breq	.+32     	; 0x53be <SPKR_beep+0x2c>
    539e:	da 01       	movw	r26, r20
    53a0:	c9 01       	movw	r24, r18
    53a2:	88 0f       	add	r24, r24
    53a4:	99 1f       	adc	r25, r25
    53a6:	aa 1f       	adc	r26, r26
    53a8:	bb 1f       	adc	r27, r27
    53aa:	90 93 57 04 	sts	0x0457, r25
    53ae:	80 93 56 04 	sts	0x0456, r24
    53b2:	21 15       	cp	r18, r1
    53b4:	31 05       	cpc	r19, r1
    53b6:	41 05       	cpc	r20, r1
    53b8:	51 05       	cpc	r21, r1
    53ba:	09 f4       	brne	.+2      	; 0x53be <SPKR_beep+0x2c>
    53bc:	5f 98       	cbi	0x0b, 7	; 11
    53be:	08 95       	ret

000053c0 <__SPKR_close>:
    53c0:	82 30       	cpi	r24, 0x02	; 2
    53c2:	29 f4       	brne	.+10     	; 0x53ce <__SPKR_close+0xe>
    53c4:	80 91 81 00 	lds	r24, 0x0081
    53c8:	8e 7f       	andi	r24, 0xFE	; 254
    53ca:	80 93 81 00 	sts	0x0081, r24
    53ce:	80 91 4a 04 	lds	r24, 0x044A
    53d2:	81 30       	cpi	r24, 0x01	; 1
    53d4:	31 f4       	brne	.+12     	; 0x53e2 <__SPKR_close+0x22>
    53d6:	80 91 4b 04 	lds	r24, 0x044B
    53da:	81 30       	cpi	r24, 0x01	; 1
    53dc:	11 f4       	brne	.+4      	; 0x53e2 <__SPKR_close+0x22>
    53de:	00 00       	nop
    53e0:	08 95       	ret
    53e2:	80 91 4a 04 	lds	r24, 0x044A
    53e6:	81 30       	cpi	r24, 0x01	; 1
    53e8:	21 f0       	breq	.+8      	; 0x53f2 <__SPKR_close+0x32>
    53ea:	80 91 4b 04 	lds	r24, 0x044B
    53ee:	81 30       	cpi	r24, 0x01	; 1
    53f0:	11 f4       	brne	.+4      	; 0x53f6 <__SPKR_close+0x36>
    53f2:	5f 98       	cbi	0x0b, 7	; 11
    53f4:	57 98       	cbi	0x0a, 7	; 10
    53f6:	08 95       	ret

000053f8 <STEPPER_set_decel_step_values>:
    53f8:	ef 92       	push	r14
    53fa:	ff 92       	push	r15
    53fc:	0f 93       	push	r16
    53fe:	1f 93       	push	r17
    5400:	cf 93       	push	r28
    5402:	df 93       	push	r29
    5404:	eb 01       	movw	r28, r22
    5406:	88 23       	and	r24, r24
    5408:	21 f0       	breq	.+8      	; 0x5412 <STEPPER_set_decel_step_values+0x1a>
    540a:	81 30       	cpi	r24, 0x01	; 1
    540c:	09 f0       	breq	.+2      	; 0x5410 <STEPPER_set_decel_step_values+0x18>
    540e:	5a c0       	rjmp	.+180    	; 0x54c4 <STEPPER_set_decel_step_values+0xcc>
    5410:	2d c0       	rjmp	.+90     	; 0x546c <STEPPER_set_decel_step_values+0x74>
    5412:	9a 01       	movw	r18, r20
    5414:	40 e0       	ldi	r20, 0x00	; 0
    5416:	50 e0       	ldi	r21, 0x00	; 0
    5418:	ca 01       	movw	r24, r20
    541a:	b9 01       	movw	r22, r18
    541c:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__mulsi3>
    5420:	20 91 27 07 	lds	r18, 0x0727
    5424:	30 91 28 07 	lds	r19, 0x0728
    5428:	22 0f       	add	r18, r18
    542a:	33 1f       	adc	r19, r19
    542c:	40 e0       	ldi	r20, 0x00	; 0
    542e:	50 e0       	ldi	r21, 0x00	; 0
    5430:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <__udivmodsi4>
    5434:	79 01       	movw	r14, r18
    5436:	8a 01       	movw	r16, r20
    5438:	a8 01       	movw	r20, r16
    543a:	97 01       	movw	r18, r14
    543c:	22 0f       	add	r18, r18
    543e:	33 1f       	adc	r19, r19
    5440:	44 1f       	adc	r20, r20
    5442:	55 1f       	adc	r21, r21
    5444:	ce 01       	movw	r24, r28
    5446:	a0 e0       	ldi	r26, 0x00	; 0
    5448:	b0 e0       	ldi	r27, 0x00	; 0
    544a:	82 17       	cp	r24, r18
    544c:	93 07       	cpc	r25, r19
    544e:	a4 07       	cpc	r26, r20
    5450:	b5 07       	cpc	r27, r21
    5452:	28 f0       	brcs	.+10     	; 0x545e <STEPPER_set_decel_step_values+0x66>
    5454:	f0 92 34 07 	sts	0x0734, r15
    5458:	e0 92 33 07 	sts	0x0733, r14
    545c:	33 c0       	rjmp	.+102    	; 0x54c4 <STEPPER_set_decel_step_values+0xcc>
    545e:	d6 95       	lsr	r29
    5460:	c7 95       	ror	r28
    5462:	d0 93 34 07 	sts	0x0734, r29
    5466:	c0 93 33 07 	sts	0x0733, r28
    546a:	2c c0       	rjmp	.+88     	; 0x54c4 <STEPPER_set_decel_step_values+0xcc>
    546c:	9a 01       	movw	r18, r20
    546e:	40 e0       	ldi	r20, 0x00	; 0
    5470:	50 e0       	ldi	r21, 0x00	; 0
    5472:	ca 01       	movw	r24, r20
    5474:	b9 01       	movw	r22, r18
    5476:	0e 94 2e 35 	call	0x6a5c	; 0x6a5c <__mulsi3>
    547a:	20 91 29 07 	lds	r18, 0x0729
    547e:	30 91 2a 07 	lds	r19, 0x072A
    5482:	22 0f       	add	r18, r18
    5484:	33 1f       	adc	r19, r19
    5486:	40 e0       	ldi	r20, 0x00	; 0
    5488:	50 e0       	ldi	r21, 0x00	; 0
    548a:	0e 94 4d 35 	call	0x6a9a	; 0x6a9a <__udivmodsi4>
    548e:	79 01       	movw	r14, r18
    5490:	8a 01       	movw	r16, r20
    5492:	a8 01       	movw	r20, r16
    5494:	97 01       	movw	r18, r14
    5496:	22 0f       	add	r18, r18
    5498:	33 1f       	adc	r19, r19
    549a:	44 1f       	adc	r20, r20
    549c:	55 1f       	adc	r21, r21
    549e:	ce 01       	movw	r24, r28
    54a0:	a0 e0       	ldi	r26, 0x00	; 0
    54a2:	b0 e0       	ldi	r27, 0x00	; 0
    54a4:	82 17       	cp	r24, r18
    54a6:	93 07       	cpc	r25, r19
    54a8:	a4 07       	cpc	r26, r20
    54aa:	b5 07       	cpc	r27, r21
    54ac:	28 f0       	brcs	.+10     	; 0x54b8 <STEPPER_set_decel_step_values+0xc0>
    54ae:	f0 92 36 07 	sts	0x0736, r15
    54b2:	e0 92 35 07 	sts	0x0735, r14
    54b6:	06 c0       	rjmp	.+12     	; 0x54c4 <STEPPER_set_decel_step_values+0xcc>
    54b8:	d6 95       	lsr	r29
    54ba:	c7 95       	ror	r28
    54bc:	d0 93 36 07 	sts	0x0736, r29
    54c0:	c0 93 35 07 	sts	0x0735, r28
    54c4:	df 91       	pop	r29
    54c6:	cf 91       	pop	r28
    54c8:	1f 91       	pop	r17
    54ca:	0f 91       	pop	r16
    54cc:	ff 90       	pop	r15
    54ce:	ef 90       	pop	r14
    54d0:	08 95       	ret

000054d2 <__TIMER0_COMPA_vect>:
    54d2:	0e 94 79 2a 	call	0x54f2	; 0x54f2 <TMRSRVC_tick>
    54d6:	0e 94 b9 2a 	call	0x5572	; 0x5572 <STEPPER_clk>
    54da:	0e 94 92 2a 	call	0x5524	; 0x5524 <SPKR_beep_clk>
    54de:	08 95       	ret

000054e0 <__TMRSRVC_init>:
    54e0:	84 b5       	in	r24, 0x24	; 36
    54e2:	82 60       	ori	r24, 0x02	; 2
    54e4:	84 bd       	out	0x24, r24	; 36
    54e6:	85 b5       	in	r24, 0x25	; 37
    54e8:	84 60       	ori	r24, 0x04	; 4
    54ea:	85 bd       	out	0x25, r24	; 37
    54ec:	8e e4       	ldi	r24, 0x4E	; 78
    54ee:	87 bd       	out	0x27, r24	; 39
    54f0:	08 95       	ret

000054f2 <TMRSRVC_tick>:
    54f2:	88 e0       	ldi	r24, 0x08	; 8
    54f4:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    54f8:	88 23       	and	r24, r24
    54fa:	11 f4       	brne	.+4      	; 0x5500 <TMRSRVC_tick+0xe>
    54fc:	84 e0       	ldi	r24, 0x04	; 4
    54fe:	08 95       	ret
    5500:	80 91 5b 04 	lds	r24, 0x045B
    5504:	88 23       	and	r24, r24
    5506:	11 f4       	brne	.+4      	; 0x550c <TMRSRVC_tick+0x1a>
    5508:	83 e0       	ldi	r24, 0x03	; 3
    550a:	08 95       	ret
    550c:	80 91 5a 04 	lds	r24, 0x045A
    5510:	88 23       	and	r24, r24
    5512:	11 f0       	breq	.+4      	; 0x5518 <TMRSRVC_tick+0x26>
    5514:	82 e0       	ldi	r24, 0x02	; 2
    5516:	08 95       	ret
    5518:	0e 94 06 2d 	call	0x5a0c	; 0x5a0c <TMRSRVC_process>
    551c:	81 30       	cpi	r24, 0x01	; 1
    551e:	e1 f3       	breq	.-8      	; 0x5518 <TMRSRVC_tick+0x26>
    5520:	80 e0       	ldi	r24, 0x00	; 0
    5522:	08 95       	ret

00005524 <SPKR_beep_clk>:
    5524:	80 91 4b 04 	lds	r24, 0x044B
    5528:	81 30       	cpi	r24, 0x01	; 1
    552a:	11 f5       	brne	.+68     	; 0x5570 <SPKR_beep_clk+0x4c>
    552c:	80 91 54 04 	lds	r24, 0x0454
    5530:	90 91 55 04 	lds	r25, 0x0455
    5534:	20 91 56 04 	lds	r18, 0x0456
    5538:	30 91 57 04 	lds	r19, 0x0457
    553c:	28 0f       	add	r18, r24
    553e:	39 1f       	adc	r19, r25
    5540:	30 93 55 04 	sts	0x0455, r19
    5544:	20 93 54 04 	sts	0x0454, r18
    5548:	80 91 54 04 	lds	r24, 0x0454
    554c:	90 91 55 04 	lds	r25, 0x0455
    5550:	88 5e       	subi	r24, 0xE8	; 232
    5552:	93 40       	sbci	r25, 0x03	; 3
    5554:	6c f0       	brlt	.+26     	; 0x5570 <SPKR_beep_clk+0x4c>
    5556:	8b b1       	in	r24, 0x0b	; 11
    5558:	80 58       	subi	r24, 0x80	; 128
    555a:	8b b9       	out	0x0b, r24	; 11
    555c:	80 91 54 04 	lds	r24, 0x0454
    5560:	90 91 55 04 	lds	r25, 0x0455
    5564:	88 5e       	subi	r24, 0xE8	; 232
    5566:	93 40       	sbci	r25, 0x03	; 3
    5568:	90 93 55 04 	sts	0x0455, r25
    556c:	80 93 54 04 	sts	0x0454, r24
    5570:	08 95       	ret

00005572 <STEPPER_clk>:
    5572:	87 e0       	ldi	r24, 0x07	; 7
    5574:	0e 94 d3 20 	call	0x41a6	; 0x41a6 <SYS_get_state>
    5578:	81 30       	cpi	r24, 0x01	; 1
    557a:	09 f0       	breq	.+2      	; 0x557e <STEPPER_clk+0xc>
    557c:	aa c0       	rjmp	.+340    	; 0x56d2 <STEPPER_clk+0x160>
    557e:	80 91 27 07 	lds	r24, 0x0727
    5582:	90 91 28 07 	lds	r25, 0x0728
    5586:	89 2b       	or	r24, r25
    5588:	09 f1       	breq	.+66     	; 0x55cc <STEPPER_clk+0x5a>
    558a:	80 91 4b 07 	lds	r24, 0x074B
    558e:	90 91 4c 07 	lds	r25, 0x074C
    5592:	20 91 27 07 	lds	r18, 0x0727
    5596:	30 91 28 07 	lds	r19, 0x0728
    559a:	82 0f       	add	r24, r18
    559c:	93 1f       	adc	r25, r19
    559e:	90 93 4c 07 	sts	0x074C, r25
    55a2:	80 93 4b 07 	sts	0x074B, r24
    55a6:	80 91 4b 07 	lds	r24, 0x074B
    55aa:	90 91 4c 07 	lds	r25, 0x074C
    55ae:	88 5e       	subi	r24, 0xE8	; 232
    55b0:	93 40       	sbci	r25, 0x03	; 3
    55b2:	a4 f0       	brlt	.+40     	; 0x55dc <STEPPER_clk+0x6a>
    55b4:	80 91 4b 07 	lds	r24, 0x074B
    55b8:	90 91 4c 07 	lds	r25, 0x074C
    55bc:	88 5e       	subi	r24, 0xE8	; 232
    55be:	93 40       	sbci	r25, 0x03	; 3
    55c0:	90 93 4c 07 	sts	0x074C, r25
    55c4:	80 93 4b 07 	sts	0x074B, r24
    55c8:	41 e0       	ldi	r20, 0x01	; 1
    55ca:	09 c0       	rjmp	.+18     	; 0x55de <STEPPER_clk+0x6c>
    55cc:	80 91 1f 07 	lds	r24, 0x071F
    55d0:	90 91 20 07 	lds	r25, 0x0720
    55d4:	90 93 24 07 	sts	0x0724, r25
    55d8:	80 93 23 07 	sts	0x0723, r24
    55dc:	40 e0       	ldi	r20, 0x00	; 0
    55de:	80 91 29 07 	lds	r24, 0x0729
    55e2:	90 91 2a 07 	lds	r25, 0x072A
    55e6:	89 2b       	or	r24, r25
    55e8:	09 f1       	breq	.+66     	; 0x562c <STEPPER_clk+0xba>
    55ea:	80 91 4d 07 	lds	r24, 0x074D
    55ee:	90 91 4e 07 	lds	r25, 0x074E
    55f2:	20 91 29 07 	lds	r18, 0x0729
    55f6:	30 91 2a 07 	lds	r19, 0x072A
    55fa:	82 0f       	add	r24, r18
    55fc:	93 1f       	adc	r25, r19
    55fe:	90 93 4e 07 	sts	0x074E, r25
    5602:	80 93 4d 07 	sts	0x074D, r24
    5606:	80 91 4d 07 	lds	r24, 0x074D
    560a:	90 91 4e 07 	lds	r25, 0x074E
    560e:	88 5e       	subi	r24, 0xE8	; 232
    5610:	93 40       	sbci	r25, 0x03	; 3
    5612:	a4 f0       	brlt	.+40     	; 0x563c <STEPPER_clk+0xca>
    5614:	80 91 4d 07 	lds	r24, 0x074D
    5618:	90 91 4e 07 	lds	r25, 0x074E
    561c:	88 5e       	subi	r24, 0xE8	; 232
    561e:	93 40       	sbci	r25, 0x03	; 3
    5620:	90 93 4e 07 	sts	0x074E, r25
    5624:	80 93 4d 07 	sts	0x074D, r24
    5628:	61 e0       	ldi	r22, 0x01	; 1
    562a:	09 c0       	rjmp	.+18     	; 0x563e <STEPPER_clk+0xcc>
    562c:	80 91 21 07 	lds	r24, 0x0721
    5630:	90 91 22 07 	lds	r25, 0x0722
    5634:	90 93 26 07 	sts	0x0726, r25
    5638:	80 93 25 07 	sts	0x0725, r24
    563c:	60 e0       	ldi	r22, 0x00	; 0
    563e:	84 2f       	mov	r24, r20
    5640:	0e 94 6a 2b 	call	0x56d4	; 0x56d4 <STEPPER_process_accel>
    5644:	80 91 47 07 	lds	r24, 0x0747
    5648:	90 91 48 07 	lds	r25, 0x0748
    564c:	20 91 23 07 	lds	r18, 0x0723
    5650:	30 91 24 07 	lds	r19, 0x0724
    5654:	28 0f       	add	r18, r24
    5656:	39 1f       	adc	r19, r25
    5658:	30 93 48 07 	sts	0x0748, r19
    565c:	20 93 47 07 	sts	0x0747, r18
    5660:	80 91 47 07 	lds	r24, 0x0747
    5664:	90 91 48 07 	lds	r25, 0x0748
    5668:	88 5e       	subi	r24, 0xE8	; 232
    566a:	93 40       	sbci	r25, 0x03	; 3
    566c:	14 f4       	brge	.+4      	; 0x5672 <STEPPER_clk+0x100>
    566e:	40 e0       	ldi	r20, 0x00	; 0
    5670:	0b c0       	rjmp	.+22     	; 0x5688 <STEPPER_clk+0x116>
    5672:	80 91 47 07 	lds	r24, 0x0747
    5676:	90 91 48 07 	lds	r25, 0x0748
    567a:	88 5e       	subi	r24, 0xE8	; 232
    567c:	93 40       	sbci	r25, 0x03	; 3
    567e:	90 93 48 07 	sts	0x0748, r25
    5682:	80 93 47 07 	sts	0x0747, r24
    5686:	41 e0       	ldi	r20, 0x01	; 1
    5688:	80 91 49 07 	lds	r24, 0x0749
    568c:	90 91 4a 07 	lds	r25, 0x074A
    5690:	20 91 25 07 	lds	r18, 0x0725
    5694:	30 91 26 07 	lds	r19, 0x0726
    5698:	28 0f       	add	r18, r24
    569a:	39 1f       	adc	r19, r25
    569c:	30 93 4a 07 	sts	0x074A, r19
    56a0:	20 93 49 07 	sts	0x0749, r18
    56a4:	80 91 49 07 	lds	r24, 0x0749
    56a8:	90 91 4a 07 	lds	r25, 0x074A
    56ac:	88 5e       	subi	r24, 0xE8	; 232
    56ae:	93 40       	sbci	r25, 0x03	; 3
    56b0:	14 f4       	brge	.+4      	; 0x56b6 <STEPPER_clk+0x144>
    56b2:	60 e0       	ldi	r22, 0x00	; 0
    56b4:	0b c0       	rjmp	.+22     	; 0x56cc <STEPPER_clk+0x15a>
    56b6:	80 91 49 07 	lds	r24, 0x0749
    56ba:	90 91 4a 07 	lds	r25, 0x074A
    56be:	88 5e       	subi	r24, 0xE8	; 232
    56c0:	93 40       	sbci	r25, 0x03	; 3
    56c2:	90 93 4a 07 	sts	0x074A, r25
    56c6:	80 93 49 07 	sts	0x0749, r24
    56ca:	61 e0       	ldi	r22, 0x01	; 1
    56cc:	84 2f       	mov	r24, r20
    56ce:	0e 94 af 2b 	call	0x575e	; 0x575e <STEPPER_process_run_mode>
    56d2:	08 95       	ret

000056d4 <STEPPER_process_accel>:
    56d4:	88 23       	and	r24, r24
    56d6:	f1 f0       	breq	.+60     	; 0x5714 <STEPPER_process_accel+0x40>
    56d8:	20 91 1f 07 	lds	r18, 0x071F
    56dc:	30 91 20 07 	lds	r19, 0x0720
    56e0:	80 91 23 07 	lds	r24, 0x0723
    56e4:	90 91 24 07 	lds	r25, 0x0724
    56e8:	28 1b       	sub	r18, r24
    56ea:	39 0b       	sbc	r19, r25
    56ec:	12 16       	cp	r1, r18
    56ee:	13 06       	cpc	r1, r19
    56f0:	34 f4       	brge	.+12     	; 0x56fe <STEPPER_process_accel+0x2a>
    56f2:	80 91 23 07 	lds	r24, 0x0723
    56f6:	90 91 24 07 	lds	r25, 0x0724
    56fa:	01 96       	adiw	r24, 0x01	; 1
    56fc:	07 c0       	rjmp	.+14     	; 0x570c <STEPPER_process_accel+0x38>
    56fe:	23 2b       	or	r18, r19
    5700:	49 f0       	breq	.+18     	; 0x5714 <STEPPER_process_accel+0x40>
    5702:	80 91 23 07 	lds	r24, 0x0723
    5706:	90 91 24 07 	lds	r25, 0x0724
    570a:	01 97       	sbiw	r24, 0x01	; 1
    570c:	90 93 24 07 	sts	0x0724, r25
    5710:	80 93 23 07 	sts	0x0723, r24
    5714:	66 23       	and	r22, r22
    5716:	11 f1       	breq	.+68     	; 0x575c <STEPPER_process_accel+0x88>
    5718:	20 91 21 07 	lds	r18, 0x0721
    571c:	30 91 22 07 	lds	r19, 0x0722
    5720:	80 91 25 07 	lds	r24, 0x0725
    5724:	90 91 26 07 	lds	r25, 0x0726
    5728:	28 1b       	sub	r18, r24
    572a:	39 0b       	sbc	r19, r25
    572c:	12 16       	cp	r1, r18
    572e:	13 06       	cpc	r1, r19
    5730:	54 f4       	brge	.+20     	; 0x5746 <STEPPER_process_accel+0x72>
    5732:	80 91 25 07 	lds	r24, 0x0725
    5736:	90 91 26 07 	lds	r25, 0x0726
    573a:	01 96       	adiw	r24, 0x01	; 1
    573c:	90 93 26 07 	sts	0x0726, r25
    5740:	80 93 25 07 	sts	0x0725, r24
    5744:	08 95       	ret
    5746:	23 2b       	or	r18, r19
    5748:	49 f0       	breq	.+18     	; 0x575c <STEPPER_process_accel+0x88>
    574a:	80 91 25 07 	lds	r24, 0x0725
    574e:	90 91 26 07 	lds	r25, 0x0726
    5752:	01 97       	sbiw	r24, 0x01	; 1
    5754:	90 93 26 07 	sts	0x0726, r25
    5758:	80 93 25 07 	sts	0x0725, r24
    575c:	08 95       	ret

0000575e <STEPPER_process_run_mode>:
    575e:	0f 93       	push	r16
    5760:	1f 93       	push	r17
    5762:	18 2f       	mov	r17, r24
    5764:	06 2f       	mov	r16, r22
    5766:	80 91 53 07 	lds	r24, 0x0753
    576a:	88 23       	and	r24, r24
    576c:	09 f0       	breq	.+2      	; 0x5770 <STEPPER_process_run_mode+0x12>
    576e:	e7 c0       	rjmp	.+462    	; 0x593e <STEPPER_process_run_mode+0x1e0>
    5770:	80 91 3b 07 	lds	r24, 0x073B
    5774:	88 23       	and	r24, r24
    5776:	09 f0       	breq	.+2      	; 0x577a <STEPPER_process_run_mode+0x1c>
    5778:	5a c0       	rjmp	.+180    	; 0x582e <STEPPER_process_run_mode+0xd0>
    577a:	80 91 23 07 	lds	r24, 0x0723
    577e:	90 91 24 07 	lds	r25, 0x0724
    5782:	89 2b       	or	r24, r25
    5784:	e9 f4       	brne	.+58     	; 0x57c0 <STEPPER_process_run_mode+0x62>
    5786:	80 91 5c 04 	lds	r24, 0x045C
    578a:	83 7e       	andi	r24, 0xE3	; 227
    578c:	80 93 5c 04 	sts	0x045C, r24
    5790:	10 92 44 07 	sts	0x0744, r1
    5794:	80 91 4f 07 	lds	r24, 0x074F
    5798:	88 23       	and	r24, r24
    579a:	09 f4       	brne	.+2      	; 0x579e <STEPPER_process_run_mode+0x40>
    579c:	5d c0       	rjmp	.+186    	; 0x5858 <STEPPER_process_run_mode+0xfa>
    579e:	60 91 3d 07 	lds	r22, 0x073D
    57a2:	80 e0       	ldi	r24, 0x00	; 0
    57a4:	0e 94 60 20 	call	0x40c0	; 0x40c0 <STEPPER_stop>
    57a8:	e0 91 51 07 	lds	r30, 0x0751
    57ac:	f0 91 52 07 	lds	r31, 0x0752
    57b0:	30 97       	sbiw	r30, 0x00	; 0
    57b2:	09 f4       	brne	.+2      	; 0x57b6 <STEPPER_process_run_mode+0x58>
    57b4:	51 c0       	rjmp	.+162    	; 0x5858 <STEPPER_process_run_mode+0xfa>
    57b6:	81 e0       	ldi	r24, 0x01	; 1
    57b8:	80 83       	st	Z, r24
    57ba:	10 92 4f 07 	sts	0x074F, r1
    57be:	4c c0       	rjmp	.+152    	; 0x5858 <STEPPER_process_run_mode+0xfa>
    57c0:	80 91 1d 07 	lds	r24, 0x071D
    57c4:	81 30       	cpi	r24, 0x01	; 1
    57c6:	41 f4       	brne	.+16     	; 0x57d8 <STEPPER_process_run_mode+0x7a>
    57c8:	80 91 2f 07 	lds	r24, 0x072F
    57cc:	90 91 30 07 	lds	r25, 0x0730
    57d0:	01 97       	sbiw	r24, 0x01	; 1
    57d2:	11 f4       	brne	.+4      	; 0x57d8 <STEPPER_process_run_mode+0x7a>
    57d4:	11 e0       	ldi	r17, 0x01	; 1
    57d6:	02 c0       	rjmp	.+4      	; 0x57dc <STEPPER_process_run_mode+0x7e>
    57d8:	11 23       	and	r17, r17
    57da:	f1 f1       	breq	.+124    	; 0x5858 <STEPPER_process_run_mode+0xfa>
    57dc:	e0 91 42 07 	lds	r30, 0x0742
    57e0:	f0 e0       	ldi	r31, 0x00	; 0
    57e2:	e0 58       	subi	r30, 0x80	; 128
    57e4:	fc 4f       	sbci	r31, 0xFC	; 252
    57e6:	90 91 5c 04 	lds	r25, 0x045C
    57ea:	93 7e       	andi	r25, 0xE3	; 227
    57ec:	80 81       	ld	r24, Z
    57ee:	89 2b       	or	r24, r25
    57f0:	80 93 5c 04 	sts	0x045C, r24
    57f4:	80 91 40 07 	lds	r24, 0x0740
    57f8:	88 23       	and	r24, r24
    57fa:	21 f4       	brne	.+8      	; 0x5804 <STEPPER_process_run_mode+0xa6>
    57fc:	80 91 42 07 	lds	r24, 0x0742
    5800:	8f 5f       	subi	r24, 0xFF	; 255
    5802:	03 c0       	rjmp	.+6      	; 0x580a <STEPPER_process_run_mode+0xac>
    5804:	80 91 42 07 	lds	r24, 0x0742
    5808:	81 50       	subi	r24, 0x01	; 1
    580a:	80 93 42 07 	sts	0x0742, r24
    580e:	80 91 42 07 	lds	r24, 0x0742
    5812:	83 70       	andi	r24, 0x03	; 3
    5814:	80 93 42 07 	sts	0x0742, r24
    5818:	81 e0       	ldi	r24, 0x01	; 1
    581a:	80 93 44 07 	sts	0x0744, r24
    581e:	80 91 1d 07 	lds	r24, 0x071D
    5822:	81 30       	cpi	r24, 0x01	; 1
    5824:	c9 f4       	brne	.+50     	; 0x5858 <STEPPER_process_run_mode+0xfa>
    5826:	80 e0       	ldi	r24, 0x00	; 0
    5828:	0e 94 b2 2c 	call	0x5964	; 0x5964 <STEPPER_process_step_mode>
    582c:	15 c0       	rjmp	.+42     	; 0x5858 <STEPPER_process_run_mode+0xfa>
    582e:	90 91 5c 04 	lds	r25, 0x045C
    5832:	93 7e       	andi	r25, 0xE3	; 227
    5834:	90 93 5c 04 	sts	0x045C, r25
    5838:	e0 91 42 07 	lds	r30, 0x0742
    583c:	f0 e0       	ldi	r31, 0x00	; 0
    583e:	e0 58       	subi	r30, 0x80	; 128
    5840:	fc 4f       	sbci	r31, 0xFC	; 252
    5842:	80 81       	ld	r24, Z
    5844:	89 2b       	or	r24, r25
    5846:	80 93 5c 04 	sts	0x045C, r24
    584a:	82 e0       	ldi	r24, 0x02	; 2
    584c:	80 93 44 07 	sts	0x0744, r24
    5850:	10 92 24 07 	sts	0x0724, r1
    5854:	10 92 23 07 	sts	0x0723, r1
    5858:	80 91 3c 07 	lds	r24, 0x073C
    585c:	88 23       	and	r24, r24
    585e:	09 f0       	breq	.+2      	; 0x5862 <STEPPER_process_run_mode+0x104>
    5860:	59 c0       	rjmp	.+178    	; 0x5914 <STEPPER_process_run_mode+0x1b6>
    5862:	80 91 25 07 	lds	r24, 0x0725
    5866:	90 91 26 07 	lds	r25, 0x0726
    586a:	89 2b       	or	r24, r25
    586c:	e9 f4       	brne	.+58     	; 0x58a8 <STEPPER_process_run_mode+0x14a>
    586e:	80 91 5c 04 	lds	r24, 0x045C
    5872:	8f 71       	andi	r24, 0x1F	; 31
    5874:	80 93 5c 04 	sts	0x045C, r24
    5878:	10 92 45 07 	sts	0x0745, r1
    587c:	80 91 50 07 	lds	r24, 0x0750
    5880:	88 23       	and	r24, r24
    5882:	09 f4       	brne	.+2      	; 0x5886 <STEPPER_process_run_mode+0x128>
    5884:	5c c0       	rjmp	.+184    	; 0x593e <STEPPER_process_run_mode+0x1e0>
    5886:	60 91 3e 07 	lds	r22, 0x073E
    588a:	81 e0       	ldi	r24, 0x01	; 1
    588c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <STEPPER_stop>
    5890:	e0 91 51 07 	lds	r30, 0x0751
    5894:	f0 91 52 07 	lds	r31, 0x0752
    5898:	30 97       	sbiw	r30, 0x00	; 0
    589a:	09 f4       	brne	.+2      	; 0x589e <STEPPER_process_run_mode+0x140>
    589c:	50 c0       	rjmp	.+160    	; 0x593e <STEPPER_process_run_mode+0x1e0>
    589e:	81 e0       	ldi	r24, 0x01	; 1
    58a0:	81 83       	std	Z+1, r24	; 0x01
    58a2:	10 92 50 07 	sts	0x0750, r1
    58a6:	4b c0       	rjmp	.+150    	; 0x593e <STEPPER_process_run_mode+0x1e0>
    58a8:	80 91 1e 07 	lds	r24, 0x071E
    58ac:	81 30       	cpi	r24, 0x01	; 1
    58ae:	41 f4       	brne	.+16     	; 0x58c0 <STEPPER_process_run_mode+0x162>
    58b0:	80 91 31 07 	lds	r24, 0x0731
    58b4:	90 91 32 07 	lds	r25, 0x0732
    58b8:	01 97       	sbiw	r24, 0x01	; 1
    58ba:	11 f4       	brne	.+4      	; 0x58c0 <STEPPER_process_run_mode+0x162>
    58bc:	01 e0       	ldi	r16, 0x01	; 1
    58be:	02 c0       	rjmp	.+4      	; 0x58c4 <STEPPER_process_run_mode+0x166>
    58c0:	00 23       	and	r16, r16
    58c2:	e9 f1       	breq	.+122    	; 0x593e <STEPPER_process_run_mode+0x1e0>
    58c4:	e0 91 43 07 	lds	r30, 0x0743
    58c8:	f0 e0       	ldi	r31, 0x00	; 0
    58ca:	ec 57       	subi	r30, 0x7C	; 124
    58cc:	fc 4f       	sbci	r31, 0xFC	; 252
    58ce:	90 91 5c 04 	lds	r25, 0x045C
    58d2:	9f 71       	andi	r25, 0x1F	; 31
    58d4:	80 81       	ld	r24, Z
    58d6:	89 2b       	or	r24, r25
    58d8:	80 93 5c 04 	sts	0x045C, r24
    58dc:	80 91 41 07 	lds	r24, 0x0741
    58e0:	88 23       	and	r24, r24
    58e2:	21 f4       	brne	.+8      	; 0x58ec <STEPPER_process_run_mode+0x18e>
    58e4:	80 91 43 07 	lds	r24, 0x0743
    58e8:	8f 5f       	subi	r24, 0xFF	; 255
    58ea:	03 c0       	rjmp	.+6      	; 0x58f2 <STEPPER_process_run_mode+0x194>
    58ec:	80 91 43 07 	lds	r24, 0x0743
    58f0:	81 50       	subi	r24, 0x01	; 1
    58f2:	80 93 43 07 	sts	0x0743, r24
    58f6:	80 91 43 07 	lds	r24, 0x0743
    58fa:	83 70       	andi	r24, 0x03	; 3
    58fc:	80 93 43 07 	sts	0x0743, r24
    5900:	81 e0       	ldi	r24, 0x01	; 1
    5902:	80 93 45 07 	sts	0x0745, r24
    5906:	80 91 1e 07 	lds	r24, 0x071E
    590a:	81 30       	cpi	r24, 0x01	; 1
    590c:	c1 f4       	brne	.+48     	; 0x593e <STEPPER_process_run_mode+0x1e0>
    590e:	0e 94 b2 2c 	call	0x5964	; 0x5964 <STEPPER_process_step_mode>
    5912:	15 c0       	rjmp	.+42     	; 0x593e <STEPPER_process_run_mode+0x1e0>
    5914:	90 91 5c 04 	lds	r25, 0x045C
    5918:	9f 71       	andi	r25, 0x1F	; 31
    591a:	90 93 5c 04 	sts	0x045C, r25
    591e:	e0 91 43 07 	lds	r30, 0x0743
    5922:	f0 e0       	ldi	r31, 0x00	; 0
    5924:	ec 57       	subi	r30, 0x7C	; 124
    5926:	fc 4f       	sbci	r31, 0xFC	; 252
    5928:	80 81       	ld	r24, Z
    592a:	89 2b       	or	r24, r25
    592c:	80 93 5c 04 	sts	0x045C, r24
    5930:	82 e0       	ldi	r24, 0x02	; 2
    5932:	80 93 45 07 	sts	0x0745, r24
    5936:	10 92 26 07 	sts	0x0726, r1
    593a:	10 92 25 07 	sts	0x0725, r1
    593e:	80 91 46 07 	lds	r24, 0x0746
    5942:	88 23       	and	r24, r24
    5944:	31 f4       	brne	.+12     	; 0x5952 <STEPPER_process_run_mode+0x1f4>
    5946:	8c e5       	ldi	r24, 0x5C	; 92
    5948:	94 e0       	ldi	r25, 0x04	; 4
    594a:	61 2f       	mov	r22, r17
    594c:	40 2f       	mov	r20, r16
    594e:	0e 94 74 2d 	call	0x5ae8	; 0x5ae8 <STEPPER_process_pwm>
    5952:	88 b1       	in	r24, 0x08	; 8
    5954:	83 70       	andi	r24, 0x03	; 3
    5956:	90 91 5c 04 	lds	r25, 0x045C
    595a:	89 2b       	or	r24, r25
    595c:	88 b9       	out	0x08, r24	; 8
    595e:	1f 91       	pop	r17
    5960:	0f 91       	pop	r16
    5962:	08 95       	ret

00005964 <STEPPER_process_step_mode>:
    5964:	88 23       	and	r24, r24
    5966:	21 f0       	breq	.+8      	; 0x5970 <STEPPER_process_step_mode+0xc>
    5968:	81 30       	cpi	r24, 0x01	; 1
    596a:	09 f0       	breq	.+2      	; 0x596e <STEPPER_process_step_mode+0xa>
    596c:	4e c0       	rjmp	.+156    	; 0x5a0a <STEPPER_process_step_mode+0xa6>
    596e:	27 c0       	rjmp	.+78     	; 0x59be <STEPPER_process_step_mode+0x5a>
    5970:	80 91 2f 07 	lds	r24, 0x072F
    5974:	90 91 30 07 	lds	r25, 0x0730
    5978:	89 2b       	or	r24, r25
    597a:	49 f0       	breq	.+18     	; 0x598e <STEPPER_process_step_mode+0x2a>
    597c:	80 91 2f 07 	lds	r24, 0x072F
    5980:	90 91 30 07 	lds	r25, 0x0730
    5984:	01 97       	sbiw	r24, 0x01	; 1
    5986:	90 93 30 07 	sts	0x0730, r25
    598a:	80 93 2f 07 	sts	0x072F, r24
    598e:	80 91 4f 07 	lds	r24, 0x074F
    5992:	88 23       	and	r24, r24
    5994:	d1 f5       	brne	.+116    	; 0x5a0a <STEPPER_process_step_mode+0xa6>
    5996:	20 91 2f 07 	lds	r18, 0x072F
    599a:	30 91 30 07 	lds	r19, 0x0730
    599e:	80 91 33 07 	lds	r24, 0x0733
    59a2:	90 91 34 07 	lds	r25, 0x0734
    59a6:	28 17       	cp	r18, r24
    59a8:	39 07       	cpc	r19, r25
    59aa:	79 f5       	brne	.+94     	; 0x5a0a <STEPPER_process_step_mode+0xa6>
    59ac:	80 e0       	ldi	r24, 0x00	; 0
    59ae:	60 e0       	ldi	r22, 0x00	; 0
    59b0:	70 e0       	ldi	r23, 0x00	; 0
    59b2:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <STEPPER_set_speed>
    59b6:	81 e0       	ldi	r24, 0x01	; 1
    59b8:	80 93 4f 07 	sts	0x074F, r24
    59bc:	08 95       	ret
    59be:	80 91 31 07 	lds	r24, 0x0731
    59c2:	90 91 32 07 	lds	r25, 0x0732
    59c6:	89 2b       	or	r24, r25
    59c8:	49 f0       	breq	.+18     	; 0x59dc <STEPPER_process_step_mode+0x78>
    59ca:	80 91 31 07 	lds	r24, 0x0731
    59ce:	90 91 32 07 	lds	r25, 0x0732
    59d2:	01 97       	sbiw	r24, 0x01	; 1
    59d4:	90 93 32 07 	sts	0x0732, r25
    59d8:	80 93 31 07 	sts	0x0731, r24
    59dc:	80 91 50 07 	lds	r24, 0x0750
    59e0:	88 23       	and	r24, r24
    59e2:	99 f4       	brne	.+38     	; 0x5a0a <STEPPER_process_step_mode+0xa6>
    59e4:	20 91 31 07 	lds	r18, 0x0731
    59e8:	30 91 32 07 	lds	r19, 0x0732
    59ec:	80 91 35 07 	lds	r24, 0x0735
    59f0:	90 91 36 07 	lds	r25, 0x0736
    59f4:	28 17       	cp	r18, r24
    59f6:	39 07       	cpc	r19, r25
    59f8:	41 f4       	brne	.+16     	; 0x5a0a <STEPPER_process_step_mode+0xa6>
    59fa:	81 e0       	ldi	r24, 0x01	; 1
    59fc:	60 e0       	ldi	r22, 0x00	; 0
    59fe:	70 e0       	ldi	r23, 0x00	; 0
    5a00:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <STEPPER_set_speed>
    5a04:	81 e0       	ldi	r24, 0x01	; 1
    5a06:	80 93 50 07 	sts	0x0750, r24
    5a0a:	08 95       	ret

00005a0c <TMRSRVC_process>:
    5a0c:	ff 92       	push	r15
    5a0e:	0f 93       	push	r16
    5a10:	1f 93       	push	r17
    5a12:	cf 93       	push	r28
    5a14:	df 93       	push	r29
    5a16:	80 91 8d 07 	lds	r24, 0x078D
    5a1a:	88 23       	and	r24, r24
    5a1c:	09 f4       	brne	.+2      	; 0x5a20 <TMRSRVC_process+0x14>
    5a1e:	59 c0       	rjmp	.+178    	; 0x5ad2 <TMRSRVC_process+0xc6>
    5a20:	00 91 8e 07 	lds	r16, 0x078E
    5a24:	10 91 8f 07 	lds	r17, 0x078F
    5a28:	f8 01       	movw	r30, r16
    5a2a:	c0 81       	ld	r28, Z
    5a2c:	d1 81       	ldd	r29, Z+1	; 0x01
    5a2e:	8c 81       	ldd	r24, Y+4	; 0x04
    5a30:	9d 81       	ldd	r25, Y+5	; 0x05
    5a32:	01 97       	sbiw	r24, 0x01	; 1
    5a34:	9d 83       	std	Y+5, r25	; 0x05
    5a36:	8c 83       	std	Y+4, r24	; 0x04
    5a38:	18 16       	cp	r1, r24
    5a3a:	19 06       	cpc	r1, r25
    5a3c:	0c f4       	brge	.+2      	; 0x5a40 <TMRSRVC_process+0x34>
    5a3e:	49 c0       	rjmp	.+146    	; 0x5ad2 <TMRSRVC_process+0xc6>
    5a40:	89 81       	ldd	r24, Y+1	; 0x01
    5a42:	80 ff       	sbrs	r24, 0
    5a44:	05 c0       	rjmp	.+10     	; 0x5a50 <TMRSRVC_process+0x44>
    5a46:	8e 81       	ldd	r24, Y+6	; 0x06
    5a48:	88 23       	and	r24, r24
    5a4a:	11 f4       	brne	.+4      	; 0x5a50 <TMRSRVC_process+0x44>
    5a4c:	81 e0       	ldi	r24, 0x01	; 1
    5a4e:	8e 83       	std	Y+6, r24	; 0x06
    5a50:	89 81       	ldd	r24, Y+1	; 0x01
    5a52:	81 ff       	sbrs	r24, 1
    5a54:	03 c0       	rjmp	.+6      	; 0x5a5c <TMRSRVC_process+0x50>
    5a56:	ef 81       	ldd	r30, Y+7	; 0x07
    5a58:	f8 85       	ldd	r31, Y+8	; 0x08
    5a5a:	09 95       	icall
    5a5c:	80 91 8d 07 	lds	r24, 0x078D
    5a60:	82 30       	cpi	r24, 0x02	; 2
    5a62:	a8 f0       	brcs	.+42     	; 0x5a8e <TMRSRVC_process+0x82>
    5a64:	f8 01       	movw	r30, r16
    5a66:	82 81       	ldd	r24, Z+2	; 0x02
    5a68:	93 81       	ldd	r25, Z+3	; 0x03
    5a6a:	90 93 8f 07 	sts	0x078F, r25
    5a6e:	80 93 8e 07 	sts	0x078E, r24
    5a72:	13 82       	std	Z+3, r1	; 0x03
    5a74:	12 82       	std	Z+2, r1	; 0x02
    5a76:	e0 91 00 00 	lds	r30, 0x0000
    5a7a:	f0 91 01 00 	lds	r31, 0x0001
    5a7e:	84 81       	ldd	r24, Z+4	; 0x04
    5a80:	95 81       	ldd	r25, Z+5	; 0x05
    5a82:	18 16       	cp	r1, r24
    5a84:	19 06       	cpc	r1, r25
    5a86:	3c f0       	brlt	.+14     	; 0x5a96 <TMRSRVC_process+0x8a>
    5a88:	ff 24       	eor	r15, r15
    5a8a:	f3 94       	inc	r15
    5a8c:	05 c0       	rjmp	.+10     	; 0x5a98 <TMRSRVC_process+0x8c>
    5a8e:	10 92 8f 07 	sts	0x078F, r1
    5a92:	10 92 8e 07 	sts	0x078E, r1
    5a96:	ff 24       	eor	r15, r15
    5a98:	80 91 8d 07 	lds	r24, 0x078D
    5a9c:	81 50       	subi	r24, 0x01	; 1
    5a9e:	80 93 8d 07 	sts	0x078D, r24
    5aa2:	80 91 8d 07 	lds	r24, 0x078D
    5aa6:	88 23       	and	r24, r24
    5aa8:	11 f4       	brne	.+4      	; 0x5aae <TMRSRVC_process+0xa2>
    5aaa:	0e 94 71 2d 	call	0x5ae2	; 0x5ae2 <TMRSRVC_stop>
    5aae:	89 81       	ldd	r24, Y+1	; 0x01
    5ab0:	82 ff       	sbrs	r24, 2
    5ab2:	08 c0       	rjmp	.+16     	; 0x5ac4 <TMRSRVC_process+0xb8>
    5ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    5ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    5ab8:	9d 83       	std	Y+5, r25	; 0x05
    5aba:	8c 83       	std	Y+4, r24	; 0x04
    5abc:	c8 01       	movw	r24, r16
    5abe:	0e 94 e6 28 	call	0x51cc	; 0x51cc <TMRSRVC_insert>
    5ac2:	08 c0       	rjmp	.+16     	; 0x5ad4 <TMRSRVC_process+0xc8>
    5ac4:	c8 01       	movw	r24, r16
    5ac6:	0e 94 53 36 	call	0x6ca6	; 0x6ca6 <free>
    5aca:	89 81       	ldd	r24, Y+1	; 0x01
    5acc:	8f 7e       	andi	r24, 0xEF	; 239
    5ace:	89 83       	std	Y+1, r24	; 0x01
    5ad0:	01 c0       	rjmp	.+2      	; 0x5ad4 <TMRSRVC_process+0xc8>
    5ad2:	ff 24       	eor	r15, r15
    5ad4:	8f 2d       	mov	r24, r15
    5ad6:	df 91       	pop	r29
    5ad8:	cf 91       	pop	r28
    5ada:	1f 91       	pop	r17
    5adc:	0f 91       	pop	r16
    5ade:	ff 90       	pop	r15
    5ae0:	08 95       	ret

00005ae2 <TMRSRVC_stop>:
    5ae2:	10 92 5b 04 	sts	0x045B, r1
    5ae6:	08 95       	ret

00005ae8 <STEPPER_process_pwm>:
    5ae8:	fc 01       	movw	r30, r24
    5aea:	80 91 44 07 	lds	r24, 0x0744
    5aee:	82 30       	cpi	r24, 0x02	; 2
    5af0:	69 f4       	brne	.+26     	; 0x5b0c <STEPPER_process_pwm+0x24>
    5af2:	80 91 60 04 	lds	r24, 0x0460
    5af6:	91 e0       	ldi	r25, 0x01	; 1
    5af8:	89 27       	eor	r24, r25
    5afa:	80 93 60 04 	sts	0x0460, r24
    5afe:	88 23       	and	r24, r24
    5b00:	09 f0       	breq	.+2      	; 0x5b04 <STEPPER_process_pwm+0x1c>
    5b02:	3e c0       	rjmp	.+124    	; 0x5b80 <STEPPER_process_pwm+0x98>
    5b04:	80 81       	ld	r24, Z
    5b06:	83 7e       	andi	r24, 0xE3	; 227
    5b08:	80 83       	st	Z, r24
    5b0a:	3a c0       	rjmp	.+116    	; 0x5b80 <STEPPER_process_pwm+0x98>
    5b0c:	80 91 23 07 	lds	r24, 0x0723
    5b10:	90 91 24 07 	lds	r25, 0x0724
    5b14:	c3 97       	sbiw	r24, 0x33	; 51
    5b16:	a4 f5       	brge	.+104    	; 0x5b80 <STEPPER_process_pwm+0x98>
    5b18:	66 23       	and	r22, r22
    5b1a:	d1 f0       	breq	.+52     	; 0x5b50 <STEPPER_process_pwm+0x68>
    5b1c:	20 91 23 07 	lds	r18, 0x0723
    5b20:	30 91 24 07 	lds	r19, 0x0724
    5b24:	80 e6       	ldi	r24, 0x60	; 96
    5b26:	90 e0       	ldi	r25, 0x00	; 0
    5b28:	bc 01       	movw	r22, r24
    5b2a:	26 9f       	mul	r18, r22
    5b2c:	c0 01       	movw	r24, r0
    5b2e:	27 9f       	mul	r18, r23
    5b30:	90 0d       	add	r25, r0
    5b32:	36 9f       	mul	r19, r22
    5b34:	90 0d       	add	r25, r0
    5b36:	11 24       	eor	r1, r1
    5b38:	88 0f       	add	r24, r24
    5b3a:	89 2f       	mov	r24, r25
    5b3c:	88 1f       	adc	r24, r24
    5b3e:	99 0b       	sbc	r25, r25
    5b40:	90 93 38 07 	sts	0x0738, r25
    5b44:	80 93 37 07 	sts	0x0737, r24
    5b48:	81 e0       	ldi	r24, 0x01	; 1
    5b4a:	80 93 5e 04 	sts	0x045E, r24
    5b4e:	18 c0       	rjmp	.+48     	; 0x5b80 <STEPPER_process_pwm+0x98>
    5b50:	80 91 5e 04 	lds	r24, 0x045E
    5b54:	88 23       	and	r24, r24
    5b56:	a1 f0       	breq	.+40     	; 0x5b80 <STEPPER_process_pwm+0x98>
    5b58:	80 91 37 07 	lds	r24, 0x0737
    5b5c:	90 91 38 07 	lds	r25, 0x0738
    5b60:	01 97       	sbiw	r24, 0x01	; 1
    5b62:	90 93 38 07 	sts	0x0738, r25
    5b66:	80 93 37 07 	sts	0x0737, r24
    5b6a:	80 91 37 07 	lds	r24, 0x0737
    5b6e:	90 91 38 07 	lds	r25, 0x0738
    5b72:	89 2b       	or	r24, r25
    5b74:	29 f4       	brne	.+10     	; 0x5b80 <STEPPER_process_pwm+0x98>
    5b76:	80 81       	ld	r24, Z
    5b78:	83 7e       	andi	r24, 0xE3	; 227
    5b7a:	80 83       	st	Z, r24
    5b7c:	10 92 5e 04 	sts	0x045E, r1
    5b80:	80 91 45 07 	lds	r24, 0x0745
    5b84:	82 30       	cpi	r24, 0x02	; 2
    5b86:	69 f4       	brne	.+26     	; 0x5ba2 <STEPPER_process_pwm+0xba>
    5b88:	80 91 5f 04 	lds	r24, 0x045F
    5b8c:	91 e0       	ldi	r25, 0x01	; 1
    5b8e:	89 27       	eor	r24, r25
    5b90:	80 93 5f 04 	sts	0x045F, r24
    5b94:	88 23       	and	r24, r24
    5b96:	09 f0       	breq	.+2      	; 0x5b9a <STEPPER_process_pwm+0xb2>
    5b98:	3e c0       	rjmp	.+124    	; 0x5c16 <STEPPER_process_pwm+0x12e>
    5b9a:	80 81       	ld	r24, Z
    5b9c:	8f 71       	andi	r24, 0x1F	; 31
    5b9e:	80 83       	st	Z, r24
    5ba0:	08 95       	ret
    5ba2:	80 91 25 07 	lds	r24, 0x0725
    5ba6:	90 91 26 07 	lds	r25, 0x0726
    5baa:	c3 97       	sbiw	r24, 0x33	; 51
    5bac:	a4 f5       	brge	.+104    	; 0x5c16 <STEPPER_process_pwm+0x12e>
    5bae:	44 23       	and	r20, r20
    5bb0:	d1 f0       	breq	.+52     	; 0x5be6 <STEPPER_process_pwm+0xfe>
    5bb2:	20 91 25 07 	lds	r18, 0x0725
    5bb6:	30 91 26 07 	lds	r19, 0x0726
    5bba:	80 e6       	ldi	r24, 0x60	; 96
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	ac 01       	movw	r20, r24
    5bc0:	24 9f       	mul	r18, r20
    5bc2:	c0 01       	movw	r24, r0
    5bc4:	25 9f       	mul	r18, r21
    5bc6:	90 0d       	add	r25, r0
    5bc8:	34 9f       	mul	r19, r20
    5bca:	90 0d       	add	r25, r0
    5bcc:	11 24       	eor	r1, r1
    5bce:	88 0f       	add	r24, r24
    5bd0:	89 2f       	mov	r24, r25
    5bd2:	88 1f       	adc	r24, r24
    5bd4:	99 0b       	sbc	r25, r25
    5bd6:	90 93 3a 07 	sts	0x073A, r25
    5bda:	80 93 39 07 	sts	0x0739, r24
    5bde:	81 e0       	ldi	r24, 0x01	; 1
    5be0:	80 93 5d 04 	sts	0x045D, r24
    5be4:	08 95       	ret
    5be6:	80 91 5d 04 	lds	r24, 0x045D
    5bea:	88 23       	and	r24, r24
    5bec:	a1 f0       	breq	.+40     	; 0x5c16 <STEPPER_process_pwm+0x12e>
    5bee:	80 91 39 07 	lds	r24, 0x0739
    5bf2:	90 91 3a 07 	lds	r25, 0x073A
    5bf6:	01 97       	sbiw	r24, 0x01	; 1
    5bf8:	90 93 3a 07 	sts	0x073A, r25
    5bfc:	80 93 39 07 	sts	0x0739, r24
    5c00:	80 91 39 07 	lds	r24, 0x0739
    5c04:	90 91 3a 07 	lds	r25, 0x073A
    5c08:	89 2b       	or	r24, r25
    5c0a:	29 f4       	brne	.+10     	; 0x5c16 <STEPPER_process_pwm+0x12e>
    5c0c:	80 81       	ld	r24, Z
    5c0e:	8f 71       	andi	r24, 0x1F	; 31
    5c10:	80 83       	st	Z, r24
    5c12:	10 92 5d 04 	sts	0x045D, r1
    5c16:	08 95       	ret

00005c18 <__subsf3>:
    5c18:	50 58       	subi	r21, 0x80	; 128

00005c1a <__addsf3>:
    5c1a:	bb 27       	eor	r27, r27
    5c1c:	aa 27       	eor	r26, r26
    5c1e:	0e d0       	rcall	.+28     	; 0x5c3c <__addsf3x>
    5c20:	75 c1       	rjmp	.+746    	; 0x5f0c <__fp_round>
    5c22:	66 d1       	rcall	.+716    	; 0x5ef0 <__fp_pscA>
    5c24:	30 f0       	brcs	.+12     	; 0x5c32 <__addsf3+0x18>
    5c26:	6b d1       	rcall	.+726    	; 0x5efe <__fp_pscB>
    5c28:	20 f0       	brcs	.+8      	; 0x5c32 <__addsf3+0x18>
    5c2a:	31 f4       	brne	.+12     	; 0x5c38 <__addsf3+0x1e>
    5c2c:	9f 3f       	cpi	r25, 0xFF	; 255
    5c2e:	11 f4       	brne	.+4      	; 0x5c34 <__addsf3+0x1a>
    5c30:	1e f4       	brtc	.+6      	; 0x5c38 <__addsf3+0x1e>
    5c32:	5b c1       	rjmp	.+694    	; 0x5eea <__fp_nan>
    5c34:	0e f4       	brtc	.+2      	; 0x5c38 <__addsf3+0x1e>
    5c36:	e0 95       	com	r30
    5c38:	e7 fb       	bst	r30, 7
    5c3a:	51 c1       	rjmp	.+674    	; 0x5ede <__fp_inf>

00005c3c <__addsf3x>:
    5c3c:	e9 2f       	mov	r30, r25
    5c3e:	77 d1       	rcall	.+750    	; 0x5f2e <__fp_split3>
    5c40:	80 f3       	brcs	.-32     	; 0x5c22 <__addsf3+0x8>
    5c42:	ba 17       	cp	r27, r26
    5c44:	62 07       	cpc	r22, r18
    5c46:	73 07       	cpc	r23, r19
    5c48:	84 07       	cpc	r24, r20
    5c4a:	95 07       	cpc	r25, r21
    5c4c:	18 f0       	brcs	.+6      	; 0x5c54 <__addsf3x+0x18>
    5c4e:	71 f4       	brne	.+28     	; 0x5c6c <__addsf3x+0x30>
    5c50:	9e f5       	brtc	.+102    	; 0x5cb8 <__addsf3x+0x7c>
    5c52:	8f c1       	rjmp	.+798    	; 0x5f72 <__fp_zero>
    5c54:	0e f4       	brtc	.+2      	; 0x5c58 <__addsf3x+0x1c>
    5c56:	e0 95       	com	r30
    5c58:	0b 2e       	mov	r0, r27
    5c5a:	ba 2f       	mov	r27, r26
    5c5c:	a0 2d       	mov	r26, r0
    5c5e:	0b 01       	movw	r0, r22
    5c60:	b9 01       	movw	r22, r18
    5c62:	90 01       	movw	r18, r0
    5c64:	0c 01       	movw	r0, r24
    5c66:	ca 01       	movw	r24, r20
    5c68:	a0 01       	movw	r20, r0
    5c6a:	11 24       	eor	r1, r1
    5c6c:	ff 27       	eor	r31, r31
    5c6e:	59 1b       	sub	r21, r25
    5c70:	99 f0       	breq	.+38     	; 0x5c98 <__addsf3x+0x5c>
    5c72:	59 3f       	cpi	r21, 0xF9	; 249
    5c74:	50 f4       	brcc	.+20     	; 0x5c8a <__addsf3x+0x4e>
    5c76:	50 3e       	cpi	r21, 0xE0	; 224
    5c78:	68 f1       	brcs	.+90     	; 0x5cd4 <__addsf3x+0x98>
    5c7a:	1a 16       	cp	r1, r26
    5c7c:	f0 40       	sbci	r31, 0x00	; 0
    5c7e:	a2 2f       	mov	r26, r18
    5c80:	23 2f       	mov	r18, r19
    5c82:	34 2f       	mov	r19, r20
    5c84:	44 27       	eor	r20, r20
    5c86:	58 5f       	subi	r21, 0xF8	; 248
    5c88:	f3 cf       	rjmp	.-26     	; 0x5c70 <__addsf3x+0x34>
    5c8a:	46 95       	lsr	r20
    5c8c:	37 95       	ror	r19
    5c8e:	27 95       	ror	r18
    5c90:	a7 95       	ror	r26
    5c92:	f0 40       	sbci	r31, 0x00	; 0
    5c94:	53 95       	inc	r21
    5c96:	c9 f7       	brne	.-14     	; 0x5c8a <__addsf3x+0x4e>
    5c98:	7e f4       	brtc	.+30     	; 0x5cb8 <__addsf3x+0x7c>
    5c9a:	1f 16       	cp	r1, r31
    5c9c:	ba 0b       	sbc	r27, r26
    5c9e:	62 0b       	sbc	r22, r18
    5ca0:	73 0b       	sbc	r23, r19
    5ca2:	84 0b       	sbc	r24, r20
    5ca4:	ba f0       	brmi	.+46     	; 0x5cd4 <__addsf3x+0x98>
    5ca6:	91 50       	subi	r25, 0x01	; 1
    5ca8:	a1 f0       	breq	.+40     	; 0x5cd2 <__addsf3x+0x96>
    5caa:	ff 0f       	add	r31, r31
    5cac:	bb 1f       	adc	r27, r27
    5cae:	66 1f       	adc	r22, r22
    5cb0:	77 1f       	adc	r23, r23
    5cb2:	88 1f       	adc	r24, r24
    5cb4:	c2 f7       	brpl	.-16     	; 0x5ca6 <__addsf3x+0x6a>
    5cb6:	0e c0       	rjmp	.+28     	; 0x5cd4 <__addsf3x+0x98>
    5cb8:	ba 0f       	add	r27, r26
    5cba:	62 1f       	adc	r22, r18
    5cbc:	73 1f       	adc	r23, r19
    5cbe:	84 1f       	adc	r24, r20
    5cc0:	48 f4       	brcc	.+18     	; 0x5cd4 <__addsf3x+0x98>
    5cc2:	87 95       	ror	r24
    5cc4:	77 95       	ror	r23
    5cc6:	67 95       	ror	r22
    5cc8:	b7 95       	ror	r27
    5cca:	f7 95       	ror	r31
    5ccc:	9e 3f       	cpi	r25, 0xFE	; 254
    5cce:	08 f0       	brcs	.+2      	; 0x5cd2 <__addsf3x+0x96>
    5cd0:	b3 cf       	rjmp	.-154    	; 0x5c38 <__addsf3+0x1e>
    5cd2:	93 95       	inc	r25
    5cd4:	88 0f       	add	r24, r24
    5cd6:	08 f0       	brcs	.+2      	; 0x5cda <__addsf3x+0x9e>
    5cd8:	99 27       	eor	r25, r25
    5cda:	ee 0f       	add	r30, r30
    5cdc:	97 95       	ror	r25
    5cde:	87 95       	ror	r24
    5ce0:	08 95       	ret

00005ce2 <__cmpsf2>:
    5ce2:	d9 d0       	rcall	.+434    	; 0x5e96 <__fp_cmp>
    5ce4:	08 f4       	brcc	.+2      	; 0x5ce8 <__cmpsf2+0x6>
    5ce6:	81 e0       	ldi	r24, 0x01	; 1
    5ce8:	08 95       	ret

00005cea <__divsf3>:
    5cea:	0c d0       	rcall	.+24     	; 0x5d04 <__divsf3x>
    5cec:	0f c1       	rjmp	.+542    	; 0x5f0c <__fp_round>
    5cee:	07 d1       	rcall	.+526    	; 0x5efe <__fp_pscB>
    5cf0:	40 f0       	brcs	.+16     	; 0x5d02 <__divsf3+0x18>
    5cf2:	fe d0       	rcall	.+508    	; 0x5ef0 <__fp_pscA>
    5cf4:	30 f0       	brcs	.+12     	; 0x5d02 <__divsf3+0x18>
    5cf6:	21 f4       	brne	.+8      	; 0x5d00 <__divsf3+0x16>
    5cf8:	5f 3f       	cpi	r21, 0xFF	; 255
    5cfa:	19 f0       	breq	.+6      	; 0x5d02 <__divsf3+0x18>
    5cfc:	f0 c0       	rjmp	.+480    	; 0x5ede <__fp_inf>
    5cfe:	51 11       	cpse	r21, r1
    5d00:	39 c1       	rjmp	.+626    	; 0x5f74 <__fp_szero>
    5d02:	f3 c0       	rjmp	.+486    	; 0x5eea <__fp_nan>

00005d04 <__divsf3x>:
    5d04:	14 d1       	rcall	.+552    	; 0x5f2e <__fp_split3>
    5d06:	98 f3       	brcs	.-26     	; 0x5cee <__divsf3+0x4>

00005d08 <__divsf3_pse>:
    5d08:	99 23       	and	r25, r25
    5d0a:	c9 f3       	breq	.-14     	; 0x5cfe <__divsf3+0x14>
    5d0c:	55 23       	and	r21, r21
    5d0e:	b1 f3       	breq	.-20     	; 0x5cfc <__divsf3+0x12>
    5d10:	95 1b       	sub	r25, r21
    5d12:	55 0b       	sbc	r21, r21
    5d14:	bb 27       	eor	r27, r27
    5d16:	aa 27       	eor	r26, r26
    5d18:	62 17       	cp	r22, r18
    5d1a:	73 07       	cpc	r23, r19
    5d1c:	84 07       	cpc	r24, r20
    5d1e:	38 f0       	brcs	.+14     	; 0x5d2e <__divsf3_pse+0x26>
    5d20:	9f 5f       	subi	r25, 0xFF	; 255
    5d22:	5f 4f       	sbci	r21, 0xFF	; 255
    5d24:	22 0f       	add	r18, r18
    5d26:	33 1f       	adc	r19, r19
    5d28:	44 1f       	adc	r20, r20
    5d2a:	aa 1f       	adc	r26, r26
    5d2c:	a9 f3       	breq	.-22     	; 0x5d18 <__divsf3_pse+0x10>
    5d2e:	33 d0       	rcall	.+102    	; 0x5d96 <__divsf3_pse+0x8e>
    5d30:	0e 2e       	mov	r0, r30
    5d32:	3a f0       	brmi	.+14     	; 0x5d42 <__divsf3_pse+0x3a>
    5d34:	e0 e8       	ldi	r30, 0x80	; 128
    5d36:	30 d0       	rcall	.+96     	; 0x5d98 <__divsf3_pse+0x90>
    5d38:	91 50       	subi	r25, 0x01	; 1
    5d3a:	50 40       	sbci	r21, 0x00	; 0
    5d3c:	e6 95       	lsr	r30
    5d3e:	00 1c       	adc	r0, r0
    5d40:	ca f7       	brpl	.-14     	; 0x5d34 <__divsf3_pse+0x2c>
    5d42:	29 d0       	rcall	.+82     	; 0x5d96 <__divsf3_pse+0x8e>
    5d44:	fe 2f       	mov	r31, r30
    5d46:	27 d0       	rcall	.+78     	; 0x5d96 <__divsf3_pse+0x8e>
    5d48:	66 0f       	add	r22, r22
    5d4a:	77 1f       	adc	r23, r23
    5d4c:	88 1f       	adc	r24, r24
    5d4e:	bb 1f       	adc	r27, r27
    5d50:	26 17       	cp	r18, r22
    5d52:	37 07       	cpc	r19, r23
    5d54:	48 07       	cpc	r20, r24
    5d56:	ab 07       	cpc	r26, r27
    5d58:	b0 e8       	ldi	r27, 0x80	; 128
    5d5a:	09 f0       	breq	.+2      	; 0x5d5e <__divsf3_pse+0x56>
    5d5c:	bb 0b       	sbc	r27, r27
    5d5e:	80 2d       	mov	r24, r0
    5d60:	bf 01       	movw	r22, r30
    5d62:	ff 27       	eor	r31, r31
    5d64:	93 58       	subi	r25, 0x83	; 131
    5d66:	5f 4f       	sbci	r21, 0xFF	; 255
    5d68:	2a f0       	brmi	.+10     	; 0x5d74 <__divsf3_pse+0x6c>
    5d6a:	9e 3f       	cpi	r25, 0xFE	; 254
    5d6c:	51 05       	cpc	r21, r1
    5d6e:	68 f0       	brcs	.+26     	; 0x5d8a <__divsf3_pse+0x82>
    5d70:	b6 c0       	rjmp	.+364    	; 0x5ede <__fp_inf>
    5d72:	00 c1       	rjmp	.+512    	; 0x5f74 <__fp_szero>
    5d74:	5f 3f       	cpi	r21, 0xFF	; 255
    5d76:	ec f3       	brlt	.-6      	; 0x5d72 <__divsf3_pse+0x6a>
    5d78:	98 3e       	cpi	r25, 0xE8	; 232
    5d7a:	dc f3       	brlt	.-10     	; 0x5d72 <__divsf3_pse+0x6a>
    5d7c:	86 95       	lsr	r24
    5d7e:	77 95       	ror	r23
    5d80:	67 95       	ror	r22
    5d82:	b7 95       	ror	r27
    5d84:	f7 95       	ror	r31
    5d86:	9f 5f       	subi	r25, 0xFF	; 255
    5d88:	c9 f7       	brne	.-14     	; 0x5d7c <__divsf3_pse+0x74>
    5d8a:	88 0f       	add	r24, r24
    5d8c:	91 1d       	adc	r25, r1
    5d8e:	96 95       	lsr	r25
    5d90:	87 95       	ror	r24
    5d92:	97 f9       	bld	r25, 7
    5d94:	08 95       	ret
    5d96:	e1 e0       	ldi	r30, 0x01	; 1
    5d98:	66 0f       	add	r22, r22
    5d9a:	77 1f       	adc	r23, r23
    5d9c:	88 1f       	adc	r24, r24
    5d9e:	bb 1f       	adc	r27, r27
    5da0:	62 17       	cp	r22, r18
    5da2:	73 07       	cpc	r23, r19
    5da4:	84 07       	cpc	r24, r20
    5da6:	ba 07       	cpc	r27, r26
    5da8:	20 f0       	brcs	.+8      	; 0x5db2 <__divsf3_pse+0xaa>
    5daa:	62 1b       	sub	r22, r18
    5dac:	73 0b       	sbc	r23, r19
    5dae:	84 0b       	sbc	r24, r20
    5db0:	ba 0b       	sbc	r27, r26
    5db2:	ee 1f       	adc	r30, r30
    5db4:	88 f7       	brcc	.-30     	; 0x5d98 <__divsf3_pse+0x90>
    5db6:	e0 95       	com	r30
    5db8:	08 95       	ret

00005dba <__fixsfsi>:
    5dba:	04 d0       	rcall	.+8      	; 0x5dc4 <__fixunssfsi>
    5dbc:	68 94       	set
    5dbe:	b1 11       	cpse	r27, r1
    5dc0:	d9 c0       	rjmp	.+434    	; 0x5f74 <__fp_szero>
    5dc2:	08 95       	ret

00005dc4 <__fixunssfsi>:
    5dc4:	bc d0       	rcall	.+376    	; 0x5f3e <__fp_splitA>
    5dc6:	88 f0       	brcs	.+34     	; 0x5dea <__fixunssfsi+0x26>
    5dc8:	9f 57       	subi	r25, 0x7F	; 127
    5dca:	90 f0       	brcs	.+36     	; 0x5df0 <__fixunssfsi+0x2c>
    5dcc:	b9 2f       	mov	r27, r25
    5dce:	99 27       	eor	r25, r25
    5dd0:	b7 51       	subi	r27, 0x17	; 23
    5dd2:	a0 f0       	brcs	.+40     	; 0x5dfc <__fixunssfsi+0x38>
    5dd4:	d1 f0       	breq	.+52     	; 0x5e0a <__fixunssfsi+0x46>
    5dd6:	66 0f       	add	r22, r22
    5dd8:	77 1f       	adc	r23, r23
    5dda:	88 1f       	adc	r24, r24
    5ddc:	99 1f       	adc	r25, r25
    5dde:	1a f0       	brmi	.+6      	; 0x5de6 <__fixunssfsi+0x22>
    5de0:	ba 95       	dec	r27
    5de2:	c9 f7       	brne	.-14     	; 0x5dd6 <__fixunssfsi+0x12>
    5de4:	12 c0       	rjmp	.+36     	; 0x5e0a <__fixunssfsi+0x46>
    5de6:	b1 30       	cpi	r27, 0x01	; 1
    5de8:	81 f0       	breq	.+32     	; 0x5e0a <__fixunssfsi+0x46>
    5dea:	c3 d0       	rcall	.+390    	; 0x5f72 <__fp_zero>
    5dec:	b1 e0       	ldi	r27, 0x01	; 1
    5dee:	08 95       	ret
    5df0:	c0 c0       	rjmp	.+384    	; 0x5f72 <__fp_zero>
    5df2:	67 2f       	mov	r22, r23
    5df4:	78 2f       	mov	r23, r24
    5df6:	88 27       	eor	r24, r24
    5df8:	b8 5f       	subi	r27, 0xF8	; 248
    5dfa:	39 f0       	breq	.+14     	; 0x5e0a <__fixunssfsi+0x46>
    5dfc:	b9 3f       	cpi	r27, 0xF9	; 249
    5dfe:	cc f3       	brlt	.-14     	; 0x5df2 <__fixunssfsi+0x2e>
    5e00:	86 95       	lsr	r24
    5e02:	77 95       	ror	r23
    5e04:	67 95       	ror	r22
    5e06:	b3 95       	inc	r27
    5e08:	d9 f7       	brne	.-10     	; 0x5e00 <__fixunssfsi+0x3c>
    5e0a:	3e f4       	brtc	.+14     	; 0x5e1a <__fixunssfsi+0x56>
    5e0c:	90 95       	com	r25
    5e0e:	80 95       	com	r24
    5e10:	70 95       	com	r23
    5e12:	61 95       	neg	r22
    5e14:	7f 4f       	sbci	r23, 0xFF	; 255
    5e16:	8f 4f       	sbci	r24, 0xFF	; 255
    5e18:	9f 4f       	sbci	r25, 0xFF	; 255
    5e1a:	08 95       	ret

00005e1c <__floatunsisf>:
    5e1c:	e8 94       	clt
    5e1e:	09 c0       	rjmp	.+18     	; 0x5e32 <__floatsisf+0x12>

00005e20 <__floatsisf>:
    5e20:	97 fb       	bst	r25, 7
    5e22:	3e f4       	brtc	.+14     	; 0x5e32 <__floatsisf+0x12>
    5e24:	90 95       	com	r25
    5e26:	80 95       	com	r24
    5e28:	70 95       	com	r23
    5e2a:	61 95       	neg	r22
    5e2c:	7f 4f       	sbci	r23, 0xFF	; 255
    5e2e:	8f 4f       	sbci	r24, 0xFF	; 255
    5e30:	9f 4f       	sbci	r25, 0xFF	; 255
    5e32:	99 23       	and	r25, r25
    5e34:	a9 f0       	breq	.+42     	; 0x5e60 <__floatsisf+0x40>
    5e36:	f9 2f       	mov	r31, r25
    5e38:	96 e9       	ldi	r25, 0x96	; 150
    5e3a:	bb 27       	eor	r27, r27
    5e3c:	93 95       	inc	r25
    5e3e:	f6 95       	lsr	r31
    5e40:	87 95       	ror	r24
    5e42:	77 95       	ror	r23
    5e44:	67 95       	ror	r22
    5e46:	b7 95       	ror	r27
    5e48:	f1 11       	cpse	r31, r1
    5e4a:	f8 cf       	rjmp	.-16     	; 0x5e3c <__floatsisf+0x1c>
    5e4c:	fa f4       	brpl	.+62     	; 0x5e8c <__floatsisf+0x6c>
    5e4e:	bb 0f       	add	r27, r27
    5e50:	11 f4       	brne	.+4      	; 0x5e56 <__floatsisf+0x36>
    5e52:	60 ff       	sbrs	r22, 0
    5e54:	1b c0       	rjmp	.+54     	; 0x5e8c <__floatsisf+0x6c>
    5e56:	6f 5f       	subi	r22, 0xFF	; 255
    5e58:	7f 4f       	sbci	r23, 0xFF	; 255
    5e5a:	8f 4f       	sbci	r24, 0xFF	; 255
    5e5c:	9f 4f       	sbci	r25, 0xFF	; 255
    5e5e:	16 c0       	rjmp	.+44     	; 0x5e8c <__floatsisf+0x6c>
    5e60:	88 23       	and	r24, r24
    5e62:	11 f0       	breq	.+4      	; 0x5e68 <__floatsisf+0x48>
    5e64:	96 e9       	ldi	r25, 0x96	; 150
    5e66:	11 c0       	rjmp	.+34     	; 0x5e8a <__floatsisf+0x6a>
    5e68:	77 23       	and	r23, r23
    5e6a:	21 f0       	breq	.+8      	; 0x5e74 <__floatsisf+0x54>
    5e6c:	9e e8       	ldi	r25, 0x8E	; 142
    5e6e:	87 2f       	mov	r24, r23
    5e70:	76 2f       	mov	r23, r22
    5e72:	05 c0       	rjmp	.+10     	; 0x5e7e <__floatsisf+0x5e>
    5e74:	66 23       	and	r22, r22
    5e76:	71 f0       	breq	.+28     	; 0x5e94 <__floatsisf+0x74>
    5e78:	96 e8       	ldi	r25, 0x86	; 134
    5e7a:	86 2f       	mov	r24, r22
    5e7c:	70 e0       	ldi	r23, 0x00	; 0
    5e7e:	60 e0       	ldi	r22, 0x00	; 0
    5e80:	2a f0       	brmi	.+10     	; 0x5e8c <__floatsisf+0x6c>
    5e82:	9a 95       	dec	r25
    5e84:	66 0f       	add	r22, r22
    5e86:	77 1f       	adc	r23, r23
    5e88:	88 1f       	adc	r24, r24
    5e8a:	da f7       	brpl	.-10     	; 0x5e82 <__floatsisf+0x62>
    5e8c:	88 0f       	add	r24, r24
    5e8e:	96 95       	lsr	r25
    5e90:	87 95       	ror	r24
    5e92:	97 f9       	bld	r25, 7
    5e94:	08 95       	ret

00005e96 <__fp_cmp>:
    5e96:	99 0f       	add	r25, r25
    5e98:	00 08       	sbc	r0, r0
    5e9a:	55 0f       	add	r21, r21
    5e9c:	aa 0b       	sbc	r26, r26
    5e9e:	e0 e8       	ldi	r30, 0x80	; 128
    5ea0:	fe ef       	ldi	r31, 0xFE	; 254
    5ea2:	16 16       	cp	r1, r22
    5ea4:	17 06       	cpc	r1, r23
    5ea6:	e8 07       	cpc	r30, r24
    5ea8:	f9 07       	cpc	r31, r25
    5eaa:	c0 f0       	brcs	.+48     	; 0x5edc <__fp_cmp+0x46>
    5eac:	12 16       	cp	r1, r18
    5eae:	13 06       	cpc	r1, r19
    5eb0:	e4 07       	cpc	r30, r20
    5eb2:	f5 07       	cpc	r31, r21
    5eb4:	98 f0       	brcs	.+38     	; 0x5edc <__fp_cmp+0x46>
    5eb6:	62 1b       	sub	r22, r18
    5eb8:	73 0b       	sbc	r23, r19
    5eba:	84 0b       	sbc	r24, r20
    5ebc:	95 0b       	sbc	r25, r21
    5ebe:	39 f4       	brne	.+14     	; 0x5ece <__fp_cmp+0x38>
    5ec0:	0a 26       	eor	r0, r26
    5ec2:	61 f0       	breq	.+24     	; 0x5edc <__fp_cmp+0x46>
    5ec4:	23 2b       	or	r18, r19
    5ec6:	24 2b       	or	r18, r20
    5ec8:	25 2b       	or	r18, r21
    5eca:	21 f4       	brne	.+8      	; 0x5ed4 <__fp_cmp+0x3e>
    5ecc:	08 95       	ret
    5ece:	0a 26       	eor	r0, r26
    5ed0:	09 f4       	brne	.+2      	; 0x5ed4 <__fp_cmp+0x3e>
    5ed2:	a1 40       	sbci	r26, 0x01	; 1
    5ed4:	a6 95       	lsr	r26
    5ed6:	8f ef       	ldi	r24, 0xFF	; 255
    5ed8:	81 1d       	adc	r24, r1
    5eda:	81 1d       	adc	r24, r1
    5edc:	08 95       	ret

00005ede <__fp_inf>:
    5ede:	97 f9       	bld	r25, 7
    5ee0:	9f 67       	ori	r25, 0x7F	; 127
    5ee2:	80 e8       	ldi	r24, 0x80	; 128
    5ee4:	70 e0       	ldi	r23, 0x00	; 0
    5ee6:	60 e0       	ldi	r22, 0x00	; 0
    5ee8:	08 95       	ret

00005eea <__fp_nan>:
    5eea:	9f ef       	ldi	r25, 0xFF	; 255
    5eec:	80 ec       	ldi	r24, 0xC0	; 192
    5eee:	08 95       	ret

00005ef0 <__fp_pscA>:
    5ef0:	00 24       	eor	r0, r0
    5ef2:	0a 94       	dec	r0
    5ef4:	16 16       	cp	r1, r22
    5ef6:	17 06       	cpc	r1, r23
    5ef8:	18 06       	cpc	r1, r24
    5efa:	09 06       	cpc	r0, r25
    5efc:	08 95       	ret

00005efe <__fp_pscB>:
    5efe:	00 24       	eor	r0, r0
    5f00:	0a 94       	dec	r0
    5f02:	12 16       	cp	r1, r18
    5f04:	13 06       	cpc	r1, r19
    5f06:	14 06       	cpc	r1, r20
    5f08:	05 06       	cpc	r0, r21
    5f0a:	08 95       	ret

00005f0c <__fp_round>:
    5f0c:	09 2e       	mov	r0, r25
    5f0e:	03 94       	inc	r0
    5f10:	00 0c       	add	r0, r0
    5f12:	11 f4       	brne	.+4      	; 0x5f18 <__fp_round+0xc>
    5f14:	88 23       	and	r24, r24
    5f16:	52 f0       	brmi	.+20     	; 0x5f2c <__fp_round+0x20>
    5f18:	bb 0f       	add	r27, r27
    5f1a:	40 f4       	brcc	.+16     	; 0x5f2c <__fp_round+0x20>
    5f1c:	bf 2b       	or	r27, r31
    5f1e:	11 f4       	brne	.+4      	; 0x5f24 <__fp_round+0x18>
    5f20:	60 ff       	sbrs	r22, 0
    5f22:	04 c0       	rjmp	.+8      	; 0x5f2c <__fp_round+0x20>
    5f24:	6f 5f       	subi	r22, 0xFF	; 255
    5f26:	7f 4f       	sbci	r23, 0xFF	; 255
    5f28:	8f 4f       	sbci	r24, 0xFF	; 255
    5f2a:	9f 4f       	sbci	r25, 0xFF	; 255
    5f2c:	08 95       	ret

00005f2e <__fp_split3>:
    5f2e:	57 fd       	sbrc	r21, 7
    5f30:	90 58       	subi	r25, 0x80	; 128
    5f32:	44 0f       	add	r20, r20
    5f34:	55 1f       	adc	r21, r21
    5f36:	59 f0       	breq	.+22     	; 0x5f4e <__fp_splitA+0x10>
    5f38:	5f 3f       	cpi	r21, 0xFF	; 255
    5f3a:	71 f0       	breq	.+28     	; 0x5f58 <__fp_splitA+0x1a>
    5f3c:	47 95       	ror	r20

00005f3e <__fp_splitA>:
    5f3e:	88 0f       	add	r24, r24
    5f40:	97 fb       	bst	r25, 7
    5f42:	99 1f       	adc	r25, r25
    5f44:	61 f0       	breq	.+24     	; 0x5f5e <__fp_splitA+0x20>
    5f46:	9f 3f       	cpi	r25, 0xFF	; 255
    5f48:	79 f0       	breq	.+30     	; 0x5f68 <__fp_splitA+0x2a>
    5f4a:	87 95       	ror	r24
    5f4c:	08 95       	ret
    5f4e:	12 16       	cp	r1, r18
    5f50:	13 06       	cpc	r1, r19
    5f52:	14 06       	cpc	r1, r20
    5f54:	55 1f       	adc	r21, r21
    5f56:	f2 cf       	rjmp	.-28     	; 0x5f3c <__fp_split3+0xe>
    5f58:	46 95       	lsr	r20
    5f5a:	f1 df       	rcall	.-30     	; 0x5f3e <__fp_splitA>
    5f5c:	08 c0       	rjmp	.+16     	; 0x5f6e <__fp_splitA+0x30>
    5f5e:	16 16       	cp	r1, r22
    5f60:	17 06       	cpc	r1, r23
    5f62:	18 06       	cpc	r1, r24
    5f64:	99 1f       	adc	r25, r25
    5f66:	f1 cf       	rjmp	.-30     	; 0x5f4a <__fp_splitA+0xc>
    5f68:	86 95       	lsr	r24
    5f6a:	71 05       	cpc	r23, r1
    5f6c:	61 05       	cpc	r22, r1
    5f6e:	08 94       	sec
    5f70:	08 95       	ret

00005f72 <__fp_zero>:
    5f72:	e8 94       	clt

00005f74 <__fp_szero>:
    5f74:	bb 27       	eor	r27, r27
    5f76:	66 27       	eor	r22, r22
    5f78:	77 27       	eor	r23, r23
    5f7a:	cb 01       	movw	r24, r22
    5f7c:	97 f9       	bld	r25, 7
    5f7e:	08 95       	ret

00005f80 <__gesf2>:
    5f80:	8a df       	rcall	.-236    	; 0x5e96 <__fp_cmp>
    5f82:	08 f4       	brcc	.+2      	; 0x5f86 <__gesf2+0x6>
    5f84:	8f ef       	ldi	r24, 0xFF	; 255
    5f86:	08 95       	ret

00005f88 <lrint>:
    5f88:	da df       	rcall	.-76     	; 0x5f3e <__fp_splitA>
    5f8a:	a8 f1       	brcs	.+106    	; 0x5ff6 <lrint+0x6e>
    5f8c:	9e 57       	subi	r25, 0x7E	; 126
    5f8e:	a8 f1       	brcs	.+106    	; 0x5ffa <lrint+0x72>
    5f90:	98 51       	subi	r25, 0x18	; 24
    5f92:	60 f0       	brcs	.+24     	; 0x5fac <lrint+0x24>
    5f94:	39 f1       	breq	.+78     	; 0x5fe4 <lrint+0x5c>
    5f96:	98 30       	cpi	r25, 0x08	; 8
    5f98:	70 f5       	brcc	.+92     	; 0x5ff6 <lrint+0x6e>
    5f9a:	09 2e       	mov	r0, r25
    5f9c:	99 27       	eor	r25, r25
    5f9e:	66 0f       	add	r22, r22
    5fa0:	77 1f       	adc	r23, r23
    5fa2:	88 1f       	adc	r24, r24
    5fa4:	99 1f       	adc	r25, r25
    5fa6:	0a 94       	dec	r0
    5fa8:	d1 f7       	brne	.-12     	; 0x5f9e <lrint+0x16>
    5faa:	1c c0       	rjmp	.+56     	; 0x5fe4 <lrint+0x5c>
    5fac:	bb 27       	eor	r27, r27
    5fae:	99 3f       	cpi	r25, 0xF9	; 249
    5fb0:	4c f4       	brge	.+18     	; 0x5fc4 <lrint+0x3c>
    5fb2:	b1 11       	cpse	r27, r1
    5fb4:	b1 e0       	ldi	r27, 0x01	; 1
    5fb6:	b6 2b       	or	r27, r22
    5fb8:	67 2f       	mov	r22, r23
    5fba:	78 2f       	mov	r23, r24
    5fbc:	88 27       	eor	r24, r24
    5fbe:	98 5f       	subi	r25, 0xF8	; 248
    5fc0:	b1 f7       	brne	.-20     	; 0x5fae <lrint+0x26>
    5fc2:	08 c0       	rjmp	.+16     	; 0x5fd4 <lrint+0x4c>
    5fc4:	86 95       	lsr	r24
    5fc6:	77 95       	ror	r23
    5fc8:	67 95       	ror	r22
    5fca:	b7 95       	ror	r27
    5fcc:	08 f4       	brcc	.+2      	; 0x5fd0 <lrint+0x48>
    5fce:	b1 60       	ori	r27, 0x01	; 1
    5fd0:	93 95       	inc	r25
    5fd2:	c1 f7       	brne	.-16     	; 0x5fc4 <lrint+0x3c>
    5fd4:	bb 0f       	add	r27, r27
    5fd6:	30 f4       	brcc	.+12     	; 0x5fe4 <lrint+0x5c>
    5fd8:	11 f4       	brne	.+4      	; 0x5fde <lrint+0x56>
    5fda:	60 ff       	sbrs	r22, 0
    5fdc:	03 c0       	rjmp	.+6      	; 0x5fe4 <lrint+0x5c>
    5fde:	6f 5f       	subi	r22, 0xFF	; 255
    5fe0:	7f 4f       	sbci	r23, 0xFF	; 255
    5fe2:	8f 4f       	sbci	r24, 0xFF	; 255
    5fe4:	3e f4       	brtc	.+14     	; 0x5ff4 <lrint+0x6c>
    5fe6:	90 95       	com	r25
    5fe8:	80 95       	com	r24
    5fea:	70 95       	com	r23
    5fec:	61 95       	neg	r22
    5fee:	7f 4f       	sbci	r23, 0xFF	; 255
    5ff0:	8f 4f       	sbci	r24, 0xFF	; 255
    5ff2:	9f 4f       	sbci	r25, 0xFF	; 255
    5ff4:	08 95       	ret
    5ff6:	68 94       	set
    5ff8:	bd cf       	rjmp	.-134    	; 0x5f74 <__fp_szero>
    5ffa:	bb cf       	rjmp	.-138    	; 0x5f72 <__fp_zero>

00005ffc <__mulsf3>:
    5ffc:	0b d0       	rcall	.+22     	; 0x6014 <__mulsf3x>
    5ffe:	86 cf       	rjmp	.-244    	; 0x5f0c <__fp_round>
    6000:	77 df       	rcall	.-274    	; 0x5ef0 <__fp_pscA>
    6002:	28 f0       	brcs	.+10     	; 0x600e <__mulsf3+0x12>
    6004:	7c df       	rcall	.-264    	; 0x5efe <__fp_pscB>
    6006:	18 f0       	brcs	.+6      	; 0x600e <__mulsf3+0x12>
    6008:	95 23       	and	r25, r21
    600a:	09 f0       	breq	.+2      	; 0x600e <__mulsf3+0x12>
    600c:	68 cf       	rjmp	.-304    	; 0x5ede <__fp_inf>
    600e:	6d cf       	rjmp	.-294    	; 0x5eea <__fp_nan>
    6010:	11 24       	eor	r1, r1
    6012:	b0 cf       	rjmp	.-160    	; 0x5f74 <__fp_szero>

00006014 <__mulsf3x>:
    6014:	8c df       	rcall	.-232    	; 0x5f2e <__fp_split3>
    6016:	a0 f3       	brcs	.-24     	; 0x6000 <__mulsf3+0x4>

00006018 <__mulsf3_pse>:
    6018:	95 9f       	mul	r25, r21
    601a:	d1 f3       	breq	.-12     	; 0x6010 <__mulsf3+0x14>
    601c:	95 0f       	add	r25, r21
    601e:	50 e0       	ldi	r21, 0x00	; 0
    6020:	55 1f       	adc	r21, r21
    6022:	62 9f       	mul	r22, r18
    6024:	f0 01       	movw	r30, r0
    6026:	72 9f       	mul	r23, r18
    6028:	bb 27       	eor	r27, r27
    602a:	f0 0d       	add	r31, r0
    602c:	b1 1d       	adc	r27, r1
    602e:	63 9f       	mul	r22, r19
    6030:	aa 27       	eor	r26, r26
    6032:	f0 0d       	add	r31, r0
    6034:	b1 1d       	adc	r27, r1
    6036:	aa 1f       	adc	r26, r26
    6038:	64 9f       	mul	r22, r20
    603a:	66 27       	eor	r22, r22
    603c:	b0 0d       	add	r27, r0
    603e:	a1 1d       	adc	r26, r1
    6040:	66 1f       	adc	r22, r22
    6042:	82 9f       	mul	r24, r18
    6044:	22 27       	eor	r18, r18
    6046:	b0 0d       	add	r27, r0
    6048:	a1 1d       	adc	r26, r1
    604a:	62 1f       	adc	r22, r18
    604c:	73 9f       	mul	r23, r19
    604e:	b0 0d       	add	r27, r0
    6050:	a1 1d       	adc	r26, r1
    6052:	62 1f       	adc	r22, r18
    6054:	83 9f       	mul	r24, r19
    6056:	a0 0d       	add	r26, r0
    6058:	61 1d       	adc	r22, r1
    605a:	22 1f       	adc	r18, r18
    605c:	74 9f       	mul	r23, r20
    605e:	33 27       	eor	r19, r19
    6060:	a0 0d       	add	r26, r0
    6062:	61 1d       	adc	r22, r1
    6064:	23 1f       	adc	r18, r19
    6066:	84 9f       	mul	r24, r20
    6068:	60 0d       	add	r22, r0
    606a:	21 1d       	adc	r18, r1
    606c:	82 2f       	mov	r24, r18
    606e:	76 2f       	mov	r23, r22
    6070:	6a 2f       	mov	r22, r26
    6072:	11 24       	eor	r1, r1
    6074:	9f 57       	subi	r25, 0x7F	; 127
    6076:	50 40       	sbci	r21, 0x00	; 0
    6078:	8a f0       	brmi	.+34     	; 0x609c <__mulsf3_pse+0x84>
    607a:	e1 f0       	breq	.+56     	; 0x60b4 <__mulsf3_pse+0x9c>
    607c:	88 23       	and	r24, r24
    607e:	4a f0       	brmi	.+18     	; 0x6092 <__mulsf3_pse+0x7a>
    6080:	ee 0f       	add	r30, r30
    6082:	ff 1f       	adc	r31, r31
    6084:	bb 1f       	adc	r27, r27
    6086:	66 1f       	adc	r22, r22
    6088:	77 1f       	adc	r23, r23
    608a:	88 1f       	adc	r24, r24
    608c:	91 50       	subi	r25, 0x01	; 1
    608e:	50 40       	sbci	r21, 0x00	; 0
    6090:	a9 f7       	brne	.-22     	; 0x607c <__mulsf3_pse+0x64>
    6092:	9e 3f       	cpi	r25, 0xFE	; 254
    6094:	51 05       	cpc	r21, r1
    6096:	70 f0       	brcs	.+28     	; 0x60b4 <__mulsf3_pse+0x9c>
    6098:	22 cf       	rjmp	.-444    	; 0x5ede <__fp_inf>
    609a:	6c cf       	rjmp	.-296    	; 0x5f74 <__fp_szero>
    609c:	5f 3f       	cpi	r21, 0xFF	; 255
    609e:	ec f3       	brlt	.-6      	; 0x609a <__mulsf3_pse+0x82>
    60a0:	98 3e       	cpi	r25, 0xE8	; 232
    60a2:	dc f3       	brlt	.-10     	; 0x609a <__mulsf3_pse+0x82>
    60a4:	86 95       	lsr	r24
    60a6:	77 95       	ror	r23
    60a8:	67 95       	ror	r22
    60aa:	b7 95       	ror	r27
    60ac:	f7 95       	ror	r31
    60ae:	e7 95       	ror	r30
    60b0:	9f 5f       	subi	r25, 0xFF	; 255
    60b2:	c1 f7       	brne	.-16     	; 0x60a4 <__mulsf3_pse+0x8c>
    60b4:	fe 2b       	or	r31, r30
    60b6:	88 0f       	add	r24, r24
    60b8:	91 1d       	adc	r25, r1
    60ba:	96 95       	lsr	r25
    60bc:	87 95       	ror	r24
    60be:	97 f9       	bld	r25, 7
    60c0:	08 95       	ret

000060c2 <pow>:
    60c2:	fa 01       	movw	r30, r20
    60c4:	ee 0f       	add	r30, r30
    60c6:	ff 1f       	adc	r31, r31
    60c8:	30 96       	adiw	r30, 0x00	; 0
    60ca:	21 05       	cpc	r18, r1
    60cc:	31 05       	cpc	r19, r1
    60ce:	99 f1       	breq	.+102    	; 0x6136 <pow+0x74>
    60d0:	61 15       	cp	r22, r1
    60d2:	71 05       	cpc	r23, r1
    60d4:	61 f4       	brne	.+24     	; 0x60ee <pow+0x2c>
    60d6:	80 38       	cpi	r24, 0x80	; 128
    60d8:	bf e3       	ldi	r27, 0x3F	; 63
    60da:	9b 07       	cpc	r25, r27
    60dc:	49 f1       	breq	.+82     	; 0x6130 <pow+0x6e>
    60de:	68 94       	set
    60e0:	90 38       	cpi	r25, 0x80	; 128
    60e2:	81 05       	cpc	r24, r1
    60e4:	61 f0       	breq	.+24     	; 0x60fe <pow+0x3c>
    60e6:	80 38       	cpi	r24, 0x80	; 128
    60e8:	bf ef       	ldi	r27, 0xFF	; 255
    60ea:	9b 07       	cpc	r25, r27
    60ec:	41 f0       	breq	.+16     	; 0x60fe <pow+0x3c>
    60ee:	99 23       	and	r25, r25
    60f0:	42 f5       	brpl	.+80     	; 0x6142 <pow+0x80>
    60f2:	ff 3f       	cpi	r31, 0xFF	; 255
    60f4:	e1 05       	cpc	r30, r1
    60f6:	31 05       	cpc	r19, r1
    60f8:	21 05       	cpc	r18, r1
    60fa:	11 f1       	breq	.+68     	; 0x6140 <pow+0x7e>
    60fc:	e8 94       	clt
    60fe:	08 94       	sec
    6100:	e7 95       	ror	r30
    6102:	d9 01       	movw	r26, r18
    6104:	aa 23       	and	r26, r26
    6106:	29 f4       	brne	.+10     	; 0x6112 <pow+0x50>
    6108:	ab 2f       	mov	r26, r27
    610a:	be 2f       	mov	r27, r30
    610c:	f8 5f       	subi	r31, 0xF8	; 248
    610e:	d0 f3       	brcs	.-12     	; 0x6104 <pow+0x42>
    6110:	10 c0       	rjmp	.+32     	; 0x6132 <pow+0x70>
    6112:	ff 5f       	subi	r31, 0xFF	; 255
    6114:	70 f4       	brcc	.+28     	; 0x6132 <pow+0x70>
    6116:	a6 95       	lsr	r26
    6118:	e0 f7       	brcc	.-8      	; 0x6112 <pow+0x50>
    611a:	f7 39       	cpi	r31, 0x97	; 151
    611c:	50 f0       	brcs	.+20     	; 0x6132 <pow+0x70>
    611e:	19 f0       	breq	.+6      	; 0x6126 <pow+0x64>
    6120:	ff 3a       	cpi	r31, 0xAF	; 175
    6122:	38 f4       	brcc	.+14     	; 0x6132 <pow+0x70>
    6124:	9f 77       	andi	r25, 0x7F	; 127
    6126:	9f 93       	push	r25
    6128:	0c d0       	rcall	.+24     	; 0x6142 <pow+0x80>
    612a:	0f 90       	pop	r0
    612c:	07 fc       	sbrc	r0, 7
    612e:	90 58       	subi	r25, 0x80	; 128
    6130:	08 95       	ret
    6132:	3e f0       	brts	.+14     	; 0x6142 <pow+0x80>
    6134:	da ce       	rjmp	.-588    	; 0x5eea <__fp_nan>
    6136:	60 e0       	ldi	r22, 0x00	; 0
    6138:	70 e0       	ldi	r23, 0x00	; 0
    613a:	80 e8       	ldi	r24, 0x80	; 128
    613c:	9f e3       	ldi	r25, 0x3F	; 63
    613e:	08 95       	ret
    6140:	4f e7       	ldi	r20, 0x7F	; 127
    6142:	9f 77       	andi	r25, 0x7F	; 127
    6144:	5f 93       	push	r21
    6146:	4f 93       	push	r20
    6148:	3f 93       	push	r19
    614a:	2f 93       	push	r18
    614c:	9e d0       	rcall	.+316    	; 0x628a <log>
    614e:	2f 91       	pop	r18
    6150:	3f 91       	pop	r19
    6152:	4f 91       	pop	r20
    6154:	5f 91       	pop	r21
    6156:	52 df       	rcall	.-348    	; 0x5ffc <__mulsf3>
    6158:	05 c0       	rjmp	.+10     	; 0x6164 <exp>
    615a:	19 f4       	brne	.+6      	; 0x6162 <pow+0xa0>
    615c:	0e f0       	brts	.+2      	; 0x6160 <pow+0x9e>
    615e:	bf ce       	rjmp	.-642    	; 0x5ede <__fp_inf>
    6160:	08 cf       	rjmp	.-496    	; 0x5f72 <__fp_zero>
    6162:	c3 ce       	rjmp	.-634    	; 0x5eea <__fp_nan>

00006164 <exp>:
    6164:	ec de       	rcall	.-552    	; 0x5f3e <__fp_splitA>
    6166:	c8 f3       	brcs	.-14     	; 0x615a <pow+0x98>
    6168:	96 38       	cpi	r25, 0x86	; 134
    616a:	c0 f7       	brcc	.-16     	; 0x615c <pow+0x9a>
    616c:	07 f8       	bld	r0, 7
    616e:	0f 92       	push	r0
    6170:	e8 94       	clt
    6172:	2b e3       	ldi	r18, 0x3B	; 59
    6174:	3a ea       	ldi	r19, 0xAA	; 170
    6176:	48 eb       	ldi	r20, 0xB8	; 184
    6178:	5f e7       	ldi	r21, 0x7F	; 127
    617a:	4e df       	rcall	.-356    	; 0x6018 <__mulsf3_pse>
    617c:	0f 92       	push	r0
    617e:	0f 92       	push	r0
    6180:	0f 92       	push	r0
    6182:	4d b7       	in	r20, 0x3d	; 61
    6184:	5e b7       	in	r21, 0x3e	; 62
    6186:	0f 92       	push	r0
    6188:	c0 d0       	rcall	.+384    	; 0x630a <modf>
    618a:	e8 ec       	ldi	r30, 0xC8	; 200
    618c:	f0 e0       	ldi	r31, 0x00	; 0
    618e:	16 d0       	rcall	.+44     	; 0x61bc <__fp_powser>
    6190:	4f 91       	pop	r20
    6192:	5f 91       	pop	r21
    6194:	ef 91       	pop	r30
    6196:	ff 91       	pop	r31
    6198:	e5 95       	asr	r30
    619a:	ee 1f       	adc	r30, r30
    619c:	ff 1f       	adc	r31, r31
    619e:	49 f0       	breq	.+18     	; 0x61b2 <exp+0x4e>
    61a0:	fe 57       	subi	r31, 0x7E	; 126
    61a2:	e0 68       	ori	r30, 0x80	; 128
    61a4:	44 27       	eor	r20, r20
    61a6:	ee 0f       	add	r30, r30
    61a8:	44 1f       	adc	r20, r20
    61aa:	fa 95       	dec	r31
    61ac:	e1 f7       	brne	.-8      	; 0x61a6 <exp+0x42>
    61ae:	41 95       	neg	r20
    61b0:	55 0b       	sbc	r21, r21
    61b2:	32 d0       	rcall	.+100    	; 0x6218 <ldexp>
    61b4:	0f 90       	pop	r0
    61b6:	07 fe       	sbrs	r0, 7
    61b8:	26 c0       	rjmp	.+76     	; 0x6206 <inverse>
    61ba:	08 95       	ret

000061bc <__fp_powser>:
    61bc:	df 93       	push	r29
    61be:	cf 93       	push	r28
    61c0:	1f 93       	push	r17
    61c2:	0f 93       	push	r16
    61c4:	ff 92       	push	r15
    61c6:	ef 92       	push	r14
    61c8:	df 92       	push	r13
    61ca:	7b 01       	movw	r14, r22
    61cc:	8c 01       	movw	r16, r24
    61ce:	68 94       	set
    61d0:	05 c0       	rjmp	.+10     	; 0x61dc <__fp_powser+0x20>
    61d2:	da 2e       	mov	r13, r26
    61d4:	ef 01       	movw	r28, r30
    61d6:	1e df       	rcall	.-452    	; 0x6014 <__mulsf3x>
    61d8:	fe 01       	movw	r30, r28
    61da:	e8 94       	clt
    61dc:	a5 91       	lpm	r26, Z+
    61de:	25 91       	lpm	r18, Z+
    61e0:	35 91       	lpm	r19, Z+
    61e2:	45 91       	lpm	r20, Z+
    61e4:	55 91       	lpm	r21, Z+
    61e6:	ae f3       	brts	.-22     	; 0x61d2 <__fp_powser+0x16>
    61e8:	ef 01       	movw	r28, r30
    61ea:	28 dd       	rcall	.-1456   	; 0x5c3c <__addsf3x>
    61ec:	fe 01       	movw	r30, r28
    61ee:	97 01       	movw	r18, r14
    61f0:	a8 01       	movw	r20, r16
    61f2:	da 94       	dec	r13
    61f4:	79 f7       	brne	.-34     	; 0x61d4 <__fp_powser+0x18>
    61f6:	df 90       	pop	r13
    61f8:	ef 90       	pop	r14
    61fa:	ff 90       	pop	r15
    61fc:	0f 91       	pop	r16
    61fe:	1f 91       	pop	r17
    6200:	cf 91       	pop	r28
    6202:	df 91       	pop	r29
    6204:	08 95       	ret

00006206 <inverse>:
    6206:	9b 01       	movw	r18, r22
    6208:	ac 01       	movw	r20, r24
    620a:	60 e0       	ldi	r22, 0x00	; 0
    620c:	70 e0       	ldi	r23, 0x00	; 0
    620e:	80 e8       	ldi	r24, 0x80	; 128
    6210:	9f e3       	ldi	r25, 0x3F	; 63
    6212:	6b cd       	rjmp	.-1322   	; 0x5cea <__divsf3>
    6214:	64 ce       	rjmp	.-824    	; 0x5ede <__fp_inf>
    6216:	ac c0       	rjmp	.+344    	; 0x6370 <__fp_mpack>

00006218 <ldexp>:
    6218:	92 de       	rcall	.-732    	; 0x5f3e <__fp_splitA>
    621a:	e8 f3       	brcs	.-6      	; 0x6216 <inverse+0x10>
    621c:	99 23       	and	r25, r25
    621e:	d9 f3       	breq	.-10     	; 0x6216 <inverse+0x10>
    6220:	94 0f       	add	r25, r20
    6222:	51 1d       	adc	r21, r1
    6224:	bb f3       	brvs	.-18     	; 0x6214 <inverse+0xe>
    6226:	91 50       	subi	r25, 0x01	; 1
    6228:	50 40       	sbci	r21, 0x00	; 0
    622a:	94 f0       	brlt	.+36     	; 0x6250 <ldexp+0x38>
    622c:	59 f0       	breq	.+22     	; 0x6244 <ldexp+0x2c>
    622e:	88 23       	and	r24, r24
    6230:	32 f0       	brmi	.+12     	; 0x623e <ldexp+0x26>
    6232:	66 0f       	add	r22, r22
    6234:	77 1f       	adc	r23, r23
    6236:	88 1f       	adc	r24, r24
    6238:	91 50       	subi	r25, 0x01	; 1
    623a:	50 40       	sbci	r21, 0x00	; 0
    623c:	c1 f7       	brne	.-16     	; 0x622e <ldexp+0x16>
    623e:	9e 3f       	cpi	r25, 0xFE	; 254
    6240:	51 05       	cpc	r21, r1
    6242:	44 f7       	brge	.-48     	; 0x6214 <inverse+0xe>
    6244:	88 0f       	add	r24, r24
    6246:	91 1d       	adc	r25, r1
    6248:	96 95       	lsr	r25
    624a:	87 95       	ror	r24
    624c:	97 f9       	bld	r25, 7
    624e:	08 95       	ret
    6250:	5f 3f       	cpi	r21, 0xFF	; 255
    6252:	ac f0       	brlt	.+42     	; 0x627e <ldexp+0x66>
    6254:	98 3e       	cpi	r25, 0xE8	; 232
    6256:	9c f0       	brlt	.+38     	; 0x627e <ldexp+0x66>
    6258:	bb 27       	eor	r27, r27
    625a:	86 95       	lsr	r24
    625c:	77 95       	ror	r23
    625e:	67 95       	ror	r22
    6260:	b7 95       	ror	r27
    6262:	08 f4       	brcc	.+2      	; 0x6266 <ldexp+0x4e>
    6264:	b1 60       	ori	r27, 0x01	; 1
    6266:	93 95       	inc	r25
    6268:	c1 f7       	brne	.-16     	; 0x625a <ldexp+0x42>
    626a:	bb 0f       	add	r27, r27
    626c:	58 f7       	brcc	.-42     	; 0x6244 <ldexp+0x2c>
    626e:	11 f4       	brne	.+4      	; 0x6274 <ldexp+0x5c>
    6270:	60 ff       	sbrs	r22, 0
    6272:	e8 cf       	rjmp	.-48     	; 0x6244 <ldexp+0x2c>
    6274:	6f 5f       	subi	r22, 0xFF	; 255
    6276:	7f 4f       	sbci	r23, 0xFF	; 255
    6278:	8f 4f       	sbci	r24, 0xFF	; 255
    627a:	9f 4f       	sbci	r25, 0xFF	; 255
    627c:	e3 cf       	rjmp	.-58     	; 0x6244 <ldexp+0x2c>
    627e:	7a ce       	rjmp	.-780    	; 0x5f74 <__fp_szero>
    6280:	0e f0       	brts	.+2      	; 0x6284 <ldexp+0x6c>
    6282:	76 c0       	rjmp	.+236    	; 0x6370 <__fp_mpack>
    6284:	32 ce       	rjmp	.-924    	; 0x5eea <__fp_nan>
    6286:	68 94       	set
    6288:	2a ce       	rjmp	.-940    	; 0x5ede <__fp_inf>

0000628a <log>:
    628a:	59 de       	rcall	.-846    	; 0x5f3e <__fp_splitA>
    628c:	c8 f3       	brcs	.-14     	; 0x6280 <ldexp+0x68>
    628e:	99 23       	and	r25, r25
    6290:	d1 f3       	breq	.-12     	; 0x6286 <ldexp+0x6e>
    6292:	c6 f3       	brts	.-16     	; 0x6284 <ldexp+0x6c>
    6294:	df 93       	push	r29
    6296:	cf 93       	push	r28
    6298:	1f 93       	push	r17
    629a:	0f 93       	push	r16
    629c:	ff 92       	push	r15
    629e:	c9 2f       	mov	r28, r25
    62a0:	dd 27       	eor	r29, r29
    62a2:	88 23       	and	r24, r24
    62a4:	2a f0       	brmi	.+10     	; 0x62b0 <log+0x26>
    62a6:	21 97       	sbiw	r28, 0x01	; 1
    62a8:	66 0f       	add	r22, r22
    62aa:	77 1f       	adc	r23, r23
    62ac:	88 1f       	adc	r24, r24
    62ae:	da f7       	brpl	.-10     	; 0x62a6 <log+0x1c>
    62b0:	20 e0       	ldi	r18, 0x00	; 0
    62b2:	30 e0       	ldi	r19, 0x00	; 0
    62b4:	40 e8       	ldi	r20, 0x80	; 128
    62b6:	5f eb       	ldi	r21, 0xBF	; 191
    62b8:	9f e3       	ldi	r25, 0x3F	; 63
    62ba:	88 39       	cpi	r24, 0x98	; 152
    62bc:	20 f0       	brcs	.+8      	; 0x62c6 <log+0x3c>
    62be:	80 3e       	cpi	r24, 0xE0	; 224
    62c0:	30 f0       	brcs	.+12     	; 0x62ce <log+0x44>
    62c2:	21 96       	adiw	r28, 0x01	; 1
    62c4:	8f 77       	andi	r24, 0x7F	; 127
    62c6:	a9 dc       	rcall	.-1710   	; 0x5c1a <__addsf3>
    62c8:	e0 ef       	ldi	r30, 0xF0	; 240
    62ca:	f0 e0       	ldi	r31, 0x00	; 0
    62cc:	03 c0       	rjmp	.+6      	; 0x62d4 <log+0x4a>
    62ce:	a5 dc       	rcall	.-1718   	; 0x5c1a <__addsf3>
    62d0:	ed e1       	ldi	r30, 0x1D	; 29
    62d2:	f1 e0       	ldi	r31, 0x01	; 1
    62d4:	73 df       	rcall	.-282    	; 0x61bc <__fp_powser>
    62d6:	8b 01       	movw	r16, r22
    62d8:	be 01       	movw	r22, r28
    62da:	ec 01       	movw	r28, r24
    62dc:	fb 2e       	mov	r15, r27
    62de:	6f 57       	subi	r22, 0x7F	; 127
    62e0:	71 09       	sbc	r23, r1
    62e2:	75 95       	asr	r23
    62e4:	77 1f       	adc	r23, r23
    62e6:	88 0b       	sbc	r24, r24
    62e8:	99 0b       	sbc	r25, r25
    62ea:	9a dd       	rcall	.-1228   	; 0x5e20 <__floatsisf>
    62ec:	28 e1       	ldi	r18, 0x18	; 24
    62ee:	32 e7       	ldi	r19, 0x72	; 114
    62f0:	41 e3       	ldi	r20, 0x31	; 49
    62f2:	5f e3       	ldi	r21, 0x3F	; 63
    62f4:	8f de       	rcall	.-738    	; 0x6014 <__mulsf3x>
    62f6:	af 2d       	mov	r26, r15
    62f8:	98 01       	movw	r18, r16
    62fa:	ae 01       	movw	r20, r28
    62fc:	ff 90       	pop	r15
    62fe:	0f 91       	pop	r16
    6300:	1f 91       	pop	r17
    6302:	cf 91       	pop	r28
    6304:	df 91       	pop	r29
    6306:	9a dc       	rcall	.-1740   	; 0x5c3c <__addsf3x>
    6308:	01 ce       	rjmp	.-1022   	; 0x5f0c <__fp_round>

0000630a <modf>:
    630a:	fa 01       	movw	r30, r20
    630c:	dc 01       	movw	r26, r24
    630e:	aa 0f       	add	r26, r26
    6310:	bb 1f       	adc	r27, r27
    6312:	9b 01       	movw	r18, r22
    6314:	ac 01       	movw	r20, r24
    6316:	bf 57       	subi	r27, 0x7F	; 127
    6318:	28 f4       	brcc	.+10     	; 0x6324 <modf+0x1a>
    631a:	22 27       	eor	r18, r18
    631c:	33 27       	eor	r19, r19
    631e:	44 27       	eor	r20, r20
    6320:	50 78       	andi	r21, 0x80	; 128
    6322:	1f c0       	rjmp	.+62     	; 0x6362 <modf+0x58>
    6324:	b7 51       	subi	r27, 0x17	; 23
    6326:	88 f4       	brcc	.+34     	; 0x634a <modf+0x40>
    6328:	ab 2f       	mov	r26, r27
    632a:	00 24       	eor	r0, r0
    632c:	46 95       	lsr	r20
    632e:	37 95       	ror	r19
    6330:	27 95       	ror	r18
    6332:	01 1c       	adc	r0, r1
    6334:	a3 95       	inc	r26
    6336:	d2 f3       	brmi	.-12     	; 0x632c <modf+0x22>
    6338:	00 20       	and	r0, r0
    633a:	69 f0       	breq	.+26     	; 0x6356 <modf+0x4c>
    633c:	22 0f       	add	r18, r18
    633e:	33 1f       	adc	r19, r19
    6340:	44 1f       	adc	r20, r20
    6342:	b3 95       	inc	r27
    6344:	da f3       	brmi	.-10     	; 0x633c <modf+0x32>
    6346:	0d d0       	rcall	.+26     	; 0x6362 <modf+0x58>
    6348:	67 cc       	rjmp	.-1842   	; 0x5c18 <__subsf3>
    634a:	61 30       	cpi	r22, 0x01	; 1
    634c:	71 05       	cpc	r23, r1
    634e:	a0 e8       	ldi	r26, 0x80	; 128
    6350:	8a 07       	cpc	r24, r26
    6352:	b9 46       	sbci	r27, 0x69	; 105
    6354:	30 f4       	brcc	.+12     	; 0x6362 <modf+0x58>
    6356:	9b 01       	movw	r18, r22
    6358:	ac 01       	movw	r20, r24
    635a:	66 27       	eor	r22, r22
    635c:	77 27       	eor	r23, r23
    635e:	88 27       	eor	r24, r24
    6360:	90 78       	andi	r25, 0x80	; 128
    6362:	30 96       	adiw	r30, 0x00	; 0
    6364:	21 f0       	breq	.+8      	; 0x636e <modf+0x64>
    6366:	20 83       	st	Z, r18
    6368:	31 83       	std	Z+1, r19	; 0x01
    636a:	42 83       	std	Z+2, r20	; 0x02
    636c:	53 83       	std	Z+3, r21	; 0x03
    636e:	08 95       	ret

00006370 <__fp_mpack>:
    6370:	9f 3f       	cpi	r25, 0xFF	; 255
    6372:	31 f0       	breq	.+12     	; 0x6380 <__fp_mpack_finite+0xc>

00006374 <__fp_mpack_finite>:
    6374:	91 50       	subi	r25, 0x01	; 1
    6376:	20 f4       	brcc	.+8      	; 0x6380 <__fp_mpack_finite+0xc>
    6378:	87 95       	ror	r24
    637a:	77 95       	ror	r23
    637c:	67 95       	ror	r22
    637e:	b7 95       	ror	r27
    6380:	88 0f       	add	r24, r24
    6382:	91 1d       	adc	r25, r1
    6384:	96 95       	lsr	r25
    6386:	87 95       	ror	r24
    6388:	97 f9       	bld	r25, 7
    638a:	08 95       	ret

0000638c <vfprintf>:
    638c:	a1 e1       	ldi	r26, 0x11	; 17
    638e:	b0 e0       	ldi	r27, 0x00	; 0
    6390:	eb ec       	ldi	r30, 0xCB	; 203
    6392:	f1 e3       	ldi	r31, 0x31	; 49
    6394:	a4 c3       	rjmp	.+1864   	; 0x6ade <__prologue_saves__>
    6396:	3c 01       	movw	r6, r24
    6398:	7f 87       	std	Y+15, r23	; 0x0f
    639a:	6e 87       	std	Y+14, r22	; 0x0e
    639c:	6a 01       	movw	r12, r20
    639e:	fc 01       	movw	r30, r24
    63a0:	17 82       	std	Z+7, r1	; 0x07
    63a2:	16 82       	std	Z+6, r1	; 0x06
    63a4:	83 81       	ldd	r24, Z+3	; 0x03
    63a6:	81 fd       	sbrc	r24, 1
    63a8:	03 c0       	rjmp	.+6      	; 0x63b0 <vfprintf+0x24>
    63aa:	6f ef       	ldi	r22, 0xFF	; 255
    63ac:	7f ef       	ldi	r23, 0xFF	; 255
    63ae:	52 c3       	rjmp	.+1700   	; 0x6a54 <vfprintf+0x6c8>
    63b0:	9e 01       	movw	r18, r28
    63b2:	2f 5f       	subi	r18, 0xFF	; 255
    63b4:	3f 4f       	sbci	r19, 0xFF	; 255
    63b6:	39 8b       	std	Y+17, r19	; 0x11
    63b8:	28 8b       	std	Y+16, r18	; 0x10
    63ba:	f3 01       	movw	r30, r6
    63bc:	23 81       	ldd	r18, Z+3	; 0x03
    63be:	ee 85       	ldd	r30, Y+14	; 0x0e
    63c0:	ff 85       	ldd	r31, Y+15	; 0x0f
    63c2:	23 fd       	sbrc	r18, 3
    63c4:	85 91       	lpm	r24, Z+
    63c6:	23 ff       	sbrs	r18, 3
    63c8:	81 91       	ld	r24, Z+
    63ca:	ff 87       	std	Y+15, r31	; 0x0f
    63cc:	ee 87       	std	Y+14, r30	; 0x0e
    63ce:	88 23       	and	r24, r24
    63d0:	09 f4       	brne	.+2      	; 0x63d4 <vfprintf+0x48>
    63d2:	3d c3       	rjmp	.+1658   	; 0x6a4e <vfprintf+0x6c2>
    63d4:	85 32       	cpi	r24, 0x25	; 37
    63d6:	51 f4       	brne	.+20     	; 0x63ec <vfprintf+0x60>
    63d8:	ee 85       	ldd	r30, Y+14	; 0x0e
    63da:	ff 85       	ldd	r31, Y+15	; 0x0f
    63dc:	23 fd       	sbrc	r18, 3
    63de:	85 91       	lpm	r24, Z+
    63e0:	23 ff       	sbrs	r18, 3
    63e2:	81 91       	ld	r24, Z+
    63e4:	ff 87       	std	Y+15, r31	; 0x0f
    63e6:	ee 87       	std	Y+14, r30	; 0x0e
    63e8:	85 32       	cpi	r24, 0x25	; 37
    63ea:	21 f4       	brne	.+8      	; 0x63f4 <vfprintf+0x68>
    63ec:	90 e0       	ldi	r25, 0x00	; 0
    63ee:	b3 01       	movw	r22, r6
    63f0:	a0 d5       	rcall	.+2880   	; 0x6f32 <fputc>
    63f2:	e3 cf       	rjmp	.-58     	; 0x63ba <vfprintf+0x2e>
    63f4:	98 2f       	mov	r25, r24
    63f6:	10 e0       	ldi	r17, 0x00	; 0
    63f8:	88 24       	eor	r8, r8
    63fa:	99 24       	eor	r9, r9
    63fc:	10 32       	cpi	r17, 0x20	; 32
    63fe:	b0 f4       	brcc	.+44     	; 0x642c <vfprintf+0xa0>
    6400:	9b 32       	cpi	r25, 0x2B	; 43
    6402:	69 f0       	breq	.+26     	; 0x641e <vfprintf+0x92>
    6404:	9c 32       	cpi	r25, 0x2C	; 44
    6406:	28 f4       	brcc	.+10     	; 0x6412 <vfprintf+0x86>
    6408:	90 32       	cpi	r25, 0x20	; 32
    640a:	51 f0       	breq	.+20     	; 0x6420 <vfprintf+0x94>
    640c:	93 32       	cpi	r25, 0x23	; 35
    640e:	71 f4       	brne	.+28     	; 0x642c <vfprintf+0xa0>
    6410:	0b c0       	rjmp	.+22     	; 0x6428 <vfprintf+0x9c>
    6412:	9d 32       	cpi	r25, 0x2D	; 45
    6414:	39 f0       	breq	.+14     	; 0x6424 <vfprintf+0x98>
    6416:	90 33       	cpi	r25, 0x30	; 48
    6418:	49 f4       	brne	.+18     	; 0x642c <vfprintf+0xa0>
    641a:	11 60       	ori	r17, 0x01	; 1
    641c:	28 c0       	rjmp	.+80     	; 0x646e <vfprintf+0xe2>
    641e:	12 60       	ori	r17, 0x02	; 2
    6420:	14 60       	ori	r17, 0x04	; 4
    6422:	25 c0       	rjmp	.+74     	; 0x646e <vfprintf+0xe2>
    6424:	18 60       	ori	r17, 0x08	; 8
    6426:	23 c0       	rjmp	.+70     	; 0x646e <vfprintf+0xe2>
    6428:	10 61       	ori	r17, 0x10	; 16
    642a:	21 c0       	rjmp	.+66     	; 0x646e <vfprintf+0xe2>
    642c:	17 fd       	sbrc	r17, 7
    642e:	2a c0       	rjmp	.+84     	; 0x6484 <vfprintf+0xf8>
    6430:	89 2f       	mov	r24, r25
    6432:	80 53       	subi	r24, 0x30	; 48
    6434:	8a 30       	cpi	r24, 0x0A	; 10
    6436:	78 f4       	brcc	.+30     	; 0x6456 <vfprintf+0xca>
    6438:	16 ff       	sbrs	r17, 6
    643a:	06 c0       	rjmp	.+12     	; 0x6448 <vfprintf+0xbc>
    643c:	fa e0       	ldi	r31, 0x0A	; 10
    643e:	9f 9e       	mul	r9, r31
    6440:	90 2c       	mov	r9, r0
    6442:	11 24       	eor	r1, r1
    6444:	98 0e       	add	r9, r24
    6446:	13 c0       	rjmp	.+38     	; 0x646e <vfprintf+0xe2>
    6448:	3a e0       	ldi	r19, 0x0A	; 10
    644a:	83 9e       	mul	r8, r19
    644c:	80 2c       	mov	r8, r0
    644e:	11 24       	eor	r1, r1
    6450:	88 0e       	add	r8, r24
    6452:	10 62       	ori	r17, 0x20	; 32
    6454:	0c c0       	rjmp	.+24     	; 0x646e <vfprintf+0xe2>
    6456:	9e 32       	cpi	r25, 0x2E	; 46
    6458:	21 f4       	brne	.+8      	; 0x6462 <vfprintf+0xd6>
    645a:	16 fd       	sbrc	r17, 6
    645c:	f8 c2       	rjmp	.+1520   	; 0x6a4e <vfprintf+0x6c2>
    645e:	10 64       	ori	r17, 0x40	; 64
    6460:	06 c0       	rjmp	.+12     	; 0x646e <vfprintf+0xe2>
    6462:	9c 36       	cpi	r25, 0x6C	; 108
    6464:	11 f4       	brne	.+4      	; 0x646a <vfprintf+0xde>
    6466:	10 68       	ori	r17, 0x80	; 128
    6468:	02 c0       	rjmp	.+4      	; 0x646e <vfprintf+0xe2>
    646a:	98 36       	cpi	r25, 0x68	; 104
    646c:	59 f4       	brne	.+22     	; 0x6484 <vfprintf+0xf8>
    646e:	ee 85       	ldd	r30, Y+14	; 0x0e
    6470:	ff 85       	ldd	r31, Y+15	; 0x0f
    6472:	23 fd       	sbrc	r18, 3
    6474:	95 91       	lpm	r25, Z+
    6476:	23 ff       	sbrs	r18, 3
    6478:	91 91       	ld	r25, Z+
    647a:	ff 87       	std	Y+15, r31	; 0x0f
    647c:	ee 87       	std	Y+14, r30	; 0x0e
    647e:	99 23       	and	r25, r25
    6480:	09 f0       	breq	.+2      	; 0x6484 <vfprintf+0xf8>
    6482:	bc cf       	rjmp	.-136    	; 0x63fc <vfprintf+0x70>
    6484:	89 2f       	mov	r24, r25
    6486:	85 54       	subi	r24, 0x45	; 69
    6488:	83 30       	cpi	r24, 0x03	; 3
    648a:	20 f4       	brcc	.+8      	; 0x6494 <vfprintf+0x108>
    648c:	81 2f       	mov	r24, r17
    648e:	80 61       	ori	r24, 0x10	; 16
    6490:	90 5e       	subi	r25, 0xE0	; 224
    6492:	07 c0       	rjmp	.+14     	; 0x64a2 <vfprintf+0x116>
    6494:	89 2f       	mov	r24, r25
    6496:	85 56       	subi	r24, 0x65	; 101
    6498:	83 30       	cpi	r24, 0x03	; 3
    649a:	08 f0       	brcs	.+2      	; 0x649e <vfprintf+0x112>
    649c:	8f c1       	rjmp	.+798    	; 0x67bc <vfprintf+0x430>
    649e:	81 2f       	mov	r24, r17
    64a0:	8f 7e       	andi	r24, 0xEF	; 239
    64a2:	86 fd       	sbrc	r24, 6
    64a4:	02 c0       	rjmp	.+4      	; 0x64aa <vfprintf+0x11e>
    64a6:	76 e0       	ldi	r23, 0x06	; 6
    64a8:	97 2e       	mov	r9, r23
    64aa:	6f e3       	ldi	r22, 0x3F	; 63
    64ac:	f6 2e       	mov	r15, r22
    64ae:	f8 22       	and	r15, r24
    64b0:	95 36       	cpi	r25, 0x65	; 101
    64b2:	19 f4       	brne	.+6      	; 0x64ba <vfprintf+0x12e>
    64b4:	f0 e4       	ldi	r31, 0x40	; 64
    64b6:	ff 2a       	or	r15, r31
    64b8:	07 c0       	rjmp	.+14     	; 0x64c8 <vfprintf+0x13c>
    64ba:	96 36       	cpi	r25, 0x66	; 102
    64bc:	19 f4       	brne	.+6      	; 0x64c4 <vfprintf+0x138>
    64be:	20 e8       	ldi	r18, 0x80	; 128
    64c0:	f2 2a       	or	r15, r18
    64c2:	02 c0       	rjmp	.+4      	; 0x64c8 <vfprintf+0x13c>
    64c4:	91 10       	cpse	r9, r1
    64c6:	9a 94       	dec	r9
    64c8:	f7 fe       	sbrs	r15, 7
    64ca:	0a c0       	rjmp	.+20     	; 0x64e0 <vfprintf+0x154>
    64cc:	3b e3       	ldi	r19, 0x3B	; 59
    64ce:	39 15       	cp	r19, r9
    64d0:	18 f4       	brcc	.+6      	; 0x64d8 <vfprintf+0x14c>
    64d2:	5c e3       	ldi	r21, 0x3C	; 60
    64d4:	b5 2e       	mov	r11, r21
    64d6:	02 c0       	rjmp	.+4      	; 0x64dc <vfprintf+0x150>
    64d8:	b9 2c       	mov	r11, r9
    64da:	b3 94       	inc	r11
    64dc:	27 e0       	ldi	r18, 0x07	; 7
    64de:	09 c0       	rjmp	.+18     	; 0x64f2 <vfprintf+0x166>
    64e0:	47 e0       	ldi	r20, 0x07	; 7
    64e2:	49 15       	cp	r20, r9
    64e4:	20 f4       	brcc	.+8      	; 0x64ee <vfprintf+0x162>
    64e6:	bb 24       	eor	r11, r11
    64e8:	47 e0       	ldi	r20, 0x07	; 7
    64ea:	94 2e       	mov	r9, r20
    64ec:	f7 cf       	rjmp	.-18     	; 0x64dc <vfprintf+0x150>
    64ee:	29 2d       	mov	r18, r9
    64f0:	bb 24       	eor	r11, r11
    64f2:	c6 01       	movw	r24, r12
    64f4:	04 96       	adiw	r24, 0x04	; 4
    64f6:	9d 87       	std	Y+13, r25	; 0x0d
    64f8:	8c 87       	std	Y+12, r24	; 0x0c
    64fa:	f6 01       	movw	r30, r12
    64fc:	60 81       	ld	r22, Z
    64fe:	71 81       	ldd	r23, Z+1	; 0x01
    6500:	82 81       	ldd	r24, Z+2	; 0x02
    6502:	93 81       	ldd	r25, Z+3	; 0x03
    6504:	ae 01       	movw	r20, r28
    6506:	4f 5f       	subi	r20, 0xFF	; 255
    6508:	5f 4f       	sbci	r21, 0xFF	; 255
    650a:	0b 2d       	mov	r16, r11
    650c:	24 d4       	rcall	.+2120   	; 0x6d56 <__ftoa_engine>
    650e:	6c 01       	movw	r12, r24
    6510:	09 81       	ldd	r16, Y+1	; 0x01
    6512:	20 2e       	mov	r2, r16
    6514:	33 24       	eor	r3, r3
    6516:	00 ff       	sbrs	r16, 0
    6518:	04 c0       	rjmp	.+8      	; 0x6522 <vfprintf+0x196>
    651a:	03 fd       	sbrc	r16, 3
    651c:	02 c0       	rjmp	.+4      	; 0x6522 <vfprintf+0x196>
    651e:	1d e2       	ldi	r17, 0x2D	; 45
    6520:	09 c0       	rjmp	.+18     	; 0x6534 <vfprintf+0x1a8>
    6522:	f1 fe       	sbrs	r15, 1
    6524:	02 c0       	rjmp	.+4      	; 0x652a <vfprintf+0x19e>
    6526:	1b e2       	ldi	r17, 0x2B	; 43
    6528:	05 c0       	rjmp	.+10     	; 0x6534 <vfprintf+0x1a8>
    652a:	f2 fc       	sbrc	r15, 2
    652c:	02 c0       	rjmp	.+4      	; 0x6532 <vfprintf+0x1a6>
    652e:	10 e0       	ldi	r17, 0x00	; 0
    6530:	01 c0       	rjmp	.+2      	; 0x6534 <vfprintf+0x1a8>
    6532:	10 e2       	ldi	r17, 0x20	; 32
    6534:	c1 01       	movw	r24, r2
    6536:	8c 70       	andi	r24, 0x0C	; 12
    6538:	90 70       	andi	r25, 0x00	; 0
    653a:	89 2b       	or	r24, r25
    653c:	a1 f1       	breq	.+104    	; 0x65a6 <vfprintf+0x21a>
    653e:	11 23       	and	r17, r17
    6540:	11 f4       	brne	.+4      	; 0x6546 <vfprintf+0x1ba>
    6542:	83 e0       	ldi	r24, 0x03	; 3
    6544:	01 c0       	rjmp	.+2      	; 0x6548 <vfprintf+0x1bc>
    6546:	84 e0       	ldi	r24, 0x04	; 4
    6548:	88 15       	cp	r24, r8
    654a:	10 f0       	brcs	.+4      	; 0x6550 <vfprintf+0x1c4>
    654c:	88 24       	eor	r8, r8
    654e:	09 c0       	rjmp	.+18     	; 0x6562 <vfprintf+0x1d6>
    6550:	88 1a       	sub	r8, r24
    6552:	f3 fc       	sbrc	r15, 3
    6554:	06 c0       	rjmp	.+12     	; 0x6562 <vfprintf+0x1d6>
    6556:	80 e2       	ldi	r24, 0x20	; 32
    6558:	90 e0       	ldi	r25, 0x00	; 0
    655a:	b3 01       	movw	r22, r6
    655c:	ea d4       	rcall	.+2516   	; 0x6f32 <fputc>
    655e:	8a 94       	dec	r8
    6560:	d1 f7       	brne	.-12     	; 0x6556 <vfprintf+0x1ca>
    6562:	11 23       	and	r17, r17
    6564:	21 f0       	breq	.+8      	; 0x656e <vfprintf+0x1e2>
    6566:	81 2f       	mov	r24, r17
    6568:	90 e0       	ldi	r25, 0x00	; 0
    656a:	b3 01       	movw	r22, r6
    656c:	e2 d4       	rcall	.+2500   	; 0x6f32 <fputc>
    656e:	23 fe       	sbrs	r2, 3
    6570:	03 c0       	rjmp	.+6      	; 0x6578 <vfprintf+0x1ec>
    6572:	0f e5       	ldi	r16, 0x5F	; 95
    6574:	15 e0       	ldi	r17, 0x05	; 5
    6576:	0d c0       	rjmp	.+26     	; 0x6592 <vfprintf+0x206>
    6578:	03 e6       	ldi	r16, 0x63	; 99
    657a:	15 e0       	ldi	r17, 0x05	; 5
    657c:	0a c0       	rjmp	.+20     	; 0x6592 <vfprintf+0x206>
    657e:	e1 14       	cp	r14, r1
    6580:	f1 04       	cpc	r15, r1
    6582:	09 f0       	breq	.+2      	; 0x6586 <vfprintf+0x1fa>
    6584:	80 52       	subi	r24, 0x20	; 32
    6586:	90 e0       	ldi	r25, 0x00	; 0
    6588:	b3 01       	movw	r22, r6
    658a:	d3 d4       	rcall	.+2470   	; 0x6f32 <fputc>
    658c:	0f 5f       	subi	r16, 0xFF	; 255
    658e:	1f 4f       	sbci	r17, 0xFF	; 255
    6590:	05 c0       	rjmp	.+10     	; 0x659c <vfprintf+0x210>
    6592:	ef 2c       	mov	r14, r15
    6594:	ff 24       	eor	r15, r15
    6596:	f0 e1       	ldi	r31, 0x10	; 16
    6598:	ef 22       	and	r14, r31
    659a:	ff 24       	eor	r15, r15
    659c:	f8 01       	movw	r30, r16
    659e:	84 91       	lpm	r24, Z+
    65a0:	88 23       	and	r24, r24
    65a2:	69 f7       	brne	.-38     	; 0x657e <vfprintf+0x1f2>
    65a4:	08 c1       	rjmp	.+528    	; 0x67b6 <vfprintf+0x42a>
    65a6:	f7 fe       	sbrs	r15, 7
    65a8:	12 c0       	rjmp	.+36     	; 0x65ce <vfprintf+0x242>
    65aa:	bc 0c       	add	r11, r12
    65ac:	24 fe       	sbrs	r2, 4
    65ae:	04 c0       	rjmp	.+8      	; 0x65b8 <vfprintf+0x22c>
    65b0:	8a 81       	ldd	r24, Y+2	; 0x02
    65b2:	81 33       	cpi	r24, 0x31	; 49
    65b4:	09 f4       	brne	.+2      	; 0x65b8 <vfprintf+0x22c>
    65b6:	ba 94       	dec	r11
    65b8:	1b 14       	cp	r1, r11
    65ba:	1c f0       	brlt	.+6      	; 0x65c2 <vfprintf+0x236>
    65bc:	bb 24       	eor	r11, r11
    65be:	b3 94       	inc	r11
    65c0:	2d c0       	rjmp	.+90     	; 0x661c <vfprintf+0x290>
    65c2:	f8 e0       	ldi	r31, 0x08	; 8
    65c4:	fb 15       	cp	r31, r11
    65c6:	50 f5       	brcc	.+84     	; 0x661c <vfprintf+0x290>
    65c8:	38 e0       	ldi	r19, 0x08	; 8
    65ca:	b3 2e       	mov	r11, r19
    65cc:	27 c0       	rjmp	.+78     	; 0x661c <vfprintf+0x290>
    65ce:	f6 fc       	sbrc	r15, 6
    65d0:	25 c0       	rjmp	.+74     	; 0x661c <vfprintf+0x290>
    65d2:	89 2d       	mov	r24, r9
    65d4:	90 e0       	ldi	r25, 0x00	; 0
    65d6:	8c 15       	cp	r24, r12
    65d8:	9d 05       	cpc	r25, r13
    65da:	4c f0       	brlt	.+18     	; 0x65ee <vfprintf+0x262>
    65dc:	2c ef       	ldi	r18, 0xFC	; 252
    65de:	c2 16       	cp	r12, r18
    65e0:	2f ef       	ldi	r18, 0xFF	; 255
    65e2:	d2 06       	cpc	r13, r18
    65e4:	24 f0       	brlt	.+8      	; 0x65ee <vfprintf+0x262>
    65e6:	30 e8       	ldi	r19, 0x80	; 128
    65e8:	f3 2a       	or	r15, r19
    65ea:	01 c0       	rjmp	.+2      	; 0x65ee <vfprintf+0x262>
    65ec:	9a 94       	dec	r9
    65ee:	99 20       	and	r9, r9
    65f0:	49 f0       	breq	.+18     	; 0x6604 <vfprintf+0x278>
    65f2:	e2 e0       	ldi	r30, 0x02	; 2
    65f4:	f0 e0       	ldi	r31, 0x00	; 0
    65f6:	ec 0f       	add	r30, r28
    65f8:	fd 1f       	adc	r31, r29
    65fa:	e9 0d       	add	r30, r9
    65fc:	f1 1d       	adc	r31, r1
    65fe:	80 81       	ld	r24, Z
    6600:	80 33       	cpi	r24, 0x30	; 48
    6602:	a1 f3       	breq	.-24     	; 0x65ec <vfprintf+0x260>
    6604:	f7 fe       	sbrs	r15, 7
    6606:	0a c0       	rjmp	.+20     	; 0x661c <vfprintf+0x290>
    6608:	b9 2c       	mov	r11, r9
    660a:	b3 94       	inc	r11
    660c:	89 2d       	mov	r24, r9
    660e:	90 e0       	ldi	r25, 0x00	; 0
    6610:	c8 16       	cp	r12, r24
    6612:	d9 06       	cpc	r13, r25
    6614:	14 f0       	brlt	.+4      	; 0x661a <vfprintf+0x28e>
    6616:	99 24       	eor	r9, r9
    6618:	01 c0       	rjmp	.+2      	; 0x661c <vfprintf+0x290>
    661a:	9c 18       	sub	r9, r12
    661c:	f7 fc       	sbrc	r15, 7
    661e:	03 c0       	rjmp	.+6      	; 0x6626 <vfprintf+0x29a>
    6620:	25 e0       	ldi	r18, 0x05	; 5
    6622:	30 e0       	ldi	r19, 0x00	; 0
    6624:	09 c0       	rjmp	.+18     	; 0x6638 <vfprintf+0x2ac>
    6626:	1c 14       	cp	r1, r12
    6628:	1d 04       	cpc	r1, r13
    662a:	1c f0       	brlt	.+6      	; 0x6632 <vfprintf+0x2a6>
    662c:	21 e0       	ldi	r18, 0x01	; 1
    662e:	30 e0       	ldi	r19, 0x00	; 0
    6630:	03 c0       	rjmp	.+6      	; 0x6638 <vfprintf+0x2ac>
    6632:	96 01       	movw	r18, r12
    6634:	2f 5f       	subi	r18, 0xFF	; 255
    6636:	3f 4f       	sbci	r19, 0xFF	; 255
    6638:	11 23       	and	r17, r17
    663a:	11 f0       	breq	.+4      	; 0x6640 <vfprintf+0x2b4>
    663c:	2f 5f       	subi	r18, 0xFF	; 255
    663e:	3f 4f       	sbci	r19, 0xFF	; 255
    6640:	99 20       	and	r9, r9
    6642:	29 f0       	breq	.+10     	; 0x664e <vfprintf+0x2c2>
    6644:	89 2d       	mov	r24, r9
    6646:	90 e0       	ldi	r25, 0x00	; 0
    6648:	01 96       	adiw	r24, 0x01	; 1
    664a:	28 0f       	add	r18, r24
    664c:	39 1f       	adc	r19, r25
    664e:	88 2d       	mov	r24, r8
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	28 17       	cp	r18, r24
    6654:	39 07       	cpc	r19, r25
    6656:	14 f0       	brlt	.+4      	; 0x665c <vfprintf+0x2d0>
    6658:	88 24       	eor	r8, r8
    665a:	01 c0       	rjmp	.+2      	; 0x665e <vfprintf+0x2d2>
    665c:	82 1a       	sub	r8, r18
    665e:	4f 2c       	mov	r4, r15
    6660:	55 24       	eor	r5, r5
    6662:	c2 01       	movw	r24, r4
    6664:	89 70       	andi	r24, 0x09	; 9
    6666:	90 70       	andi	r25, 0x00	; 0
    6668:	89 2b       	or	r24, r25
    666a:	31 f0       	breq	.+12     	; 0x6678 <vfprintf+0x2ec>
    666c:	07 c0       	rjmp	.+14     	; 0x667c <vfprintf+0x2f0>
    666e:	80 e2       	ldi	r24, 0x20	; 32
    6670:	90 e0       	ldi	r25, 0x00	; 0
    6672:	b3 01       	movw	r22, r6
    6674:	5e d4       	rcall	.+2236   	; 0x6f32 <fputc>
    6676:	8a 94       	dec	r8
    6678:	88 20       	and	r8, r8
    667a:	c9 f7       	brne	.-14     	; 0x666e <vfprintf+0x2e2>
    667c:	11 23       	and	r17, r17
    667e:	21 f0       	breq	.+8      	; 0x6688 <vfprintf+0x2fc>
    6680:	81 2f       	mov	r24, r17
    6682:	90 e0       	ldi	r25, 0x00	; 0
    6684:	b3 01       	movw	r22, r6
    6686:	55 d4       	rcall	.+2218   	; 0x6f32 <fputc>
    6688:	43 fe       	sbrs	r4, 3
    668a:	06 c0       	rjmp	.+12     	; 0x6698 <vfprintf+0x30c>
    668c:	07 c0       	rjmp	.+14     	; 0x669c <vfprintf+0x310>
    668e:	80 e3       	ldi	r24, 0x30	; 48
    6690:	90 e0       	ldi	r25, 0x00	; 0
    6692:	b3 01       	movw	r22, r6
    6694:	4e d4       	rcall	.+2204   	; 0x6f32 <fputc>
    6696:	8a 94       	dec	r8
    6698:	88 20       	and	r8, r8
    669a:	c9 f7       	brne	.-14     	; 0x668e <vfprintf+0x302>
    669c:	f7 fe       	sbrs	r15, 7
    669e:	44 c0       	rjmp	.+136    	; 0x6728 <vfprintf+0x39c>
    66a0:	86 01       	movw	r16, r12
    66a2:	d7 fe       	sbrs	r13, 7
    66a4:	02 c0       	rjmp	.+4      	; 0x66aa <vfprintf+0x31e>
    66a6:	00 e0       	ldi	r16, 0x00	; 0
    66a8:	10 e0       	ldi	r17, 0x00	; 0
    66aa:	76 01       	movw	r14, r12
    66ac:	08 94       	sec
    66ae:	e1 1c       	adc	r14, r1
    66b0:	f1 1c       	adc	r15, r1
    66b2:	e0 1a       	sub	r14, r16
    66b4:	f1 0a       	sbc	r15, r17
    66b6:	41 e0       	ldi	r20, 0x01	; 1
    66b8:	50 e0       	ldi	r21, 0x00	; 0
    66ba:	4c 0f       	add	r20, r28
    66bc:	5d 1f       	adc	r21, r29
    66be:	e4 0e       	add	r14, r20
    66c0:	f5 1e       	adc	r15, r21
    66c2:	26 01       	movw	r4, r12
    66c4:	4b 18       	sub	r4, r11
    66c6:	51 08       	sbc	r5, r1
    66c8:	89 2d       	mov	r24, r9
    66ca:	90 e0       	ldi	r25, 0x00	; 0
    66cc:	aa 24       	eor	r10, r10
    66ce:	bb 24       	eor	r11, r11
    66d0:	a8 1a       	sub	r10, r24
    66d2:	b9 0a       	sbc	r11, r25
    66d4:	5f ef       	ldi	r21, 0xFF	; 255
    66d6:	0f 3f       	cpi	r16, 0xFF	; 255
    66d8:	15 07       	cpc	r17, r21
    66da:	21 f4       	brne	.+8      	; 0x66e4 <vfprintf+0x358>
    66dc:	8e e2       	ldi	r24, 0x2E	; 46
    66de:	90 e0       	ldi	r25, 0x00	; 0
    66e0:	b3 01       	movw	r22, r6
    66e2:	27 d4       	rcall	.+2126   	; 0x6f32 <fputc>
    66e4:	c0 16       	cp	r12, r16
    66e6:	d1 06       	cpc	r13, r17
    66e8:	34 f0       	brlt	.+12     	; 0x66f6 <vfprintf+0x36a>
    66ea:	40 16       	cp	r4, r16
    66ec:	51 06       	cpc	r5, r17
    66ee:	1c f4       	brge	.+6      	; 0x66f6 <vfprintf+0x36a>
    66f0:	f7 01       	movw	r30, r14
    66f2:	80 81       	ld	r24, Z
    66f4:	01 c0       	rjmp	.+2      	; 0x66f8 <vfprintf+0x36c>
    66f6:	80 e3       	ldi	r24, 0x30	; 48
    66f8:	01 50       	subi	r16, 0x01	; 1
    66fa:	10 40       	sbci	r17, 0x00	; 0
    66fc:	08 94       	sec
    66fe:	e1 1c       	adc	r14, r1
    6700:	f1 1c       	adc	r15, r1
    6702:	0a 15       	cp	r16, r10
    6704:	1b 05       	cpc	r17, r11
    6706:	24 f0       	brlt	.+8      	; 0x6710 <vfprintf+0x384>
    6708:	90 e0       	ldi	r25, 0x00	; 0
    670a:	b3 01       	movw	r22, r6
    670c:	12 d4       	rcall	.+2084   	; 0x6f32 <fputc>
    670e:	e2 cf       	rjmp	.-60     	; 0x66d4 <vfprintf+0x348>
    6710:	0c 15       	cp	r16, r12
    6712:	1d 05       	cpc	r17, r13
    6714:	39 f4       	brne	.+14     	; 0x6724 <vfprintf+0x398>
    6716:	9a 81       	ldd	r25, Y+2	; 0x02
    6718:	96 33       	cpi	r25, 0x36	; 54
    671a:	18 f4       	brcc	.+6      	; 0x6722 <vfprintf+0x396>
    671c:	95 33       	cpi	r25, 0x35	; 53
    671e:	11 f4       	brne	.+4      	; 0x6724 <vfprintf+0x398>
    6720:	24 fe       	sbrs	r2, 4
    6722:	81 e3       	ldi	r24, 0x31	; 49
    6724:	90 e0       	ldi	r25, 0x00	; 0
    6726:	45 c0       	rjmp	.+138    	; 0x67b2 <vfprintf+0x426>
    6728:	8a 81       	ldd	r24, Y+2	; 0x02
    672a:	81 33       	cpi	r24, 0x31	; 49
    672c:	09 f0       	breq	.+2      	; 0x6730 <vfprintf+0x3a4>
    672e:	0f 7e       	andi	r16, 0xEF	; 239
    6730:	90 e0       	ldi	r25, 0x00	; 0
    6732:	b3 01       	movw	r22, r6
    6734:	fe d3       	rcall	.+2044   	; 0x6f32 <fputc>
    6736:	99 20       	and	r9, r9
    6738:	91 f0       	breq	.+36     	; 0x675e <vfprintf+0x3d2>
    673a:	8e e2       	ldi	r24, 0x2E	; 46
    673c:	90 e0       	ldi	r25, 0x00	; 0
    673e:	b3 01       	movw	r22, r6
    6740:	f8 d3       	rcall	.+2032   	; 0x6f32 <fputc>
    6742:	12 e0       	ldi	r17, 0x02	; 2
    6744:	e1 e0       	ldi	r30, 0x01	; 1
    6746:	f0 e0       	ldi	r31, 0x00	; 0
    6748:	ec 0f       	add	r30, r28
    674a:	fd 1f       	adc	r31, r29
    674c:	e1 0f       	add	r30, r17
    674e:	f1 1d       	adc	r31, r1
    6750:	1f 5f       	subi	r17, 0xFF	; 255
    6752:	80 81       	ld	r24, Z
    6754:	90 e0       	ldi	r25, 0x00	; 0
    6756:	b3 01       	movw	r22, r6
    6758:	ec d3       	rcall	.+2008   	; 0x6f32 <fputc>
    675a:	9a 94       	dec	r9
    675c:	99 f7       	brne	.-26     	; 0x6744 <vfprintf+0x3b8>
    675e:	44 fc       	sbrc	r4, 4
    6760:	03 c0       	rjmp	.+6      	; 0x6768 <vfprintf+0x3dc>
    6762:	85 e6       	ldi	r24, 0x65	; 101
    6764:	90 e0       	ldi	r25, 0x00	; 0
    6766:	02 c0       	rjmp	.+4      	; 0x676c <vfprintf+0x3e0>
    6768:	85 e4       	ldi	r24, 0x45	; 69
    676a:	90 e0       	ldi	r25, 0x00	; 0
    676c:	b3 01       	movw	r22, r6
    676e:	e1 d3       	rcall	.+1986   	; 0x6f32 <fputc>
    6770:	d7 fc       	sbrc	r13, 7
    6772:	05 c0       	rjmp	.+10     	; 0x677e <vfprintf+0x3f2>
    6774:	c1 14       	cp	r12, r1
    6776:	d1 04       	cpc	r13, r1
    6778:	41 f4       	brne	.+16     	; 0x678a <vfprintf+0x3fe>
    677a:	04 ff       	sbrs	r16, 4
    677c:	06 c0       	rjmp	.+12     	; 0x678a <vfprintf+0x3fe>
    677e:	d0 94       	com	r13
    6780:	c1 94       	neg	r12
    6782:	d1 08       	sbc	r13, r1
    6784:	d3 94       	inc	r13
    6786:	8d e2       	ldi	r24, 0x2D	; 45
    6788:	01 c0       	rjmp	.+2      	; 0x678c <vfprintf+0x400>
    678a:	8b e2       	ldi	r24, 0x2B	; 43
    678c:	90 e0       	ldi	r25, 0x00	; 0
    678e:	b3 01       	movw	r22, r6
    6790:	d0 d3       	rcall	.+1952   	; 0x6f32 <fputc>
    6792:	80 e3       	ldi	r24, 0x30	; 48
    6794:	05 c0       	rjmp	.+10     	; 0x67a0 <vfprintf+0x414>
    6796:	8f 5f       	subi	r24, 0xFF	; 255
    6798:	26 ef       	ldi	r18, 0xF6	; 246
    679a:	3f ef       	ldi	r19, 0xFF	; 255
    679c:	c2 0e       	add	r12, r18
    679e:	d3 1e       	adc	r13, r19
    67a0:	3a e0       	ldi	r19, 0x0A	; 10
    67a2:	c3 16       	cp	r12, r19
    67a4:	d1 04       	cpc	r13, r1
    67a6:	bc f7       	brge	.-18     	; 0x6796 <vfprintf+0x40a>
    67a8:	90 e0       	ldi	r25, 0x00	; 0
    67aa:	b3 01       	movw	r22, r6
    67ac:	c2 d3       	rcall	.+1924   	; 0x6f32 <fputc>
    67ae:	c6 01       	movw	r24, r12
    67b0:	c0 96       	adiw	r24, 0x30	; 48
    67b2:	b3 01       	movw	r22, r6
    67b4:	be d3       	rcall	.+1916   	; 0x6f32 <fputc>
    67b6:	cc 84       	ldd	r12, Y+12	; 0x0c
    67b8:	dd 84       	ldd	r13, Y+13	; 0x0d
    67ba:	46 c1       	rjmp	.+652    	; 0x6a48 <vfprintf+0x6bc>
    67bc:	93 36       	cpi	r25, 0x63	; 99
    67be:	31 f0       	breq	.+12     	; 0x67cc <vfprintf+0x440>
    67c0:	93 37       	cpi	r25, 0x73	; 115
    67c2:	99 f0       	breq	.+38     	; 0x67ea <vfprintf+0x45e>
    67c4:	93 35       	cpi	r25, 0x53	; 83
    67c6:	09 f0       	breq	.+2      	; 0x67ca <vfprintf+0x43e>
    67c8:	55 c0       	rjmp	.+170    	; 0x6874 <vfprintf+0x4e8>
    67ca:	22 c0       	rjmp	.+68     	; 0x6810 <vfprintf+0x484>
    67cc:	f6 01       	movw	r30, r12
    67ce:	80 81       	ld	r24, Z
    67d0:	89 83       	std	Y+1, r24	; 0x01
    67d2:	5e 01       	movw	r10, r28
    67d4:	08 94       	sec
    67d6:	a1 1c       	adc	r10, r1
    67d8:	b1 1c       	adc	r11, r1
    67da:	22 e0       	ldi	r18, 0x02	; 2
    67dc:	30 e0       	ldi	r19, 0x00	; 0
    67de:	c2 0e       	add	r12, r18
    67e0:	d3 1e       	adc	r13, r19
    67e2:	21 e0       	ldi	r18, 0x01	; 1
    67e4:	e2 2e       	mov	r14, r18
    67e6:	f1 2c       	mov	r15, r1
    67e8:	11 c0       	rjmp	.+34     	; 0x680c <vfprintf+0x480>
    67ea:	f6 01       	movw	r30, r12
    67ec:	a0 80       	ld	r10, Z
    67ee:	b1 80       	ldd	r11, Z+1	; 0x01
    67f0:	16 fd       	sbrc	r17, 6
    67f2:	03 c0       	rjmp	.+6      	; 0x67fa <vfprintf+0x46e>
    67f4:	6f ef       	ldi	r22, 0xFF	; 255
    67f6:	7f ef       	ldi	r23, 0xFF	; 255
    67f8:	02 c0       	rjmp	.+4      	; 0x67fe <vfprintf+0x472>
    67fa:	69 2d       	mov	r22, r9
    67fc:	70 e0       	ldi	r23, 0x00	; 0
    67fe:	22 e0       	ldi	r18, 0x02	; 2
    6800:	30 e0       	ldi	r19, 0x00	; 0
    6802:	c2 0e       	add	r12, r18
    6804:	d3 1e       	adc	r13, r19
    6806:	c5 01       	movw	r24, r10
    6808:	89 d3       	rcall	.+1810   	; 0x6f1c <strnlen>
    680a:	7c 01       	movw	r14, r24
    680c:	1f 77       	andi	r17, 0x7F	; 127
    680e:	12 c0       	rjmp	.+36     	; 0x6834 <vfprintf+0x4a8>
    6810:	f6 01       	movw	r30, r12
    6812:	a0 80       	ld	r10, Z
    6814:	b1 80       	ldd	r11, Z+1	; 0x01
    6816:	16 fd       	sbrc	r17, 6
    6818:	03 c0       	rjmp	.+6      	; 0x6820 <vfprintf+0x494>
    681a:	6f ef       	ldi	r22, 0xFF	; 255
    681c:	7f ef       	ldi	r23, 0xFF	; 255
    681e:	02 c0       	rjmp	.+4      	; 0x6824 <vfprintf+0x498>
    6820:	69 2d       	mov	r22, r9
    6822:	70 e0       	ldi	r23, 0x00	; 0
    6824:	22 e0       	ldi	r18, 0x02	; 2
    6826:	30 e0       	ldi	r19, 0x00	; 0
    6828:	c2 0e       	add	r12, r18
    682a:	d3 1e       	adc	r13, r19
    682c:	c5 01       	movw	r24, r10
    682e:	6b d3       	rcall	.+1750   	; 0x6f06 <strnlen_P>
    6830:	7c 01       	movw	r14, r24
    6832:	10 68       	ori	r17, 0x80	; 128
    6834:	13 ff       	sbrs	r17, 3
    6836:	06 c0       	rjmp	.+12     	; 0x6844 <vfprintf+0x4b8>
    6838:	19 c0       	rjmp	.+50     	; 0x686c <vfprintf+0x4e0>
    683a:	80 e2       	ldi	r24, 0x20	; 32
    683c:	90 e0       	ldi	r25, 0x00	; 0
    683e:	b3 01       	movw	r22, r6
    6840:	78 d3       	rcall	.+1776   	; 0x6f32 <fputc>
    6842:	8a 94       	dec	r8
    6844:	88 2d       	mov	r24, r8
    6846:	90 e0       	ldi	r25, 0x00	; 0
    6848:	e8 16       	cp	r14, r24
    684a:	f9 06       	cpc	r15, r25
    684c:	b0 f3       	brcs	.-20     	; 0x683a <vfprintf+0x4ae>
    684e:	0e c0       	rjmp	.+28     	; 0x686c <vfprintf+0x4e0>
    6850:	f5 01       	movw	r30, r10
    6852:	17 fd       	sbrc	r17, 7
    6854:	85 91       	lpm	r24, Z+
    6856:	17 ff       	sbrs	r17, 7
    6858:	81 91       	ld	r24, Z+
    685a:	5f 01       	movw	r10, r30
    685c:	90 e0       	ldi	r25, 0x00	; 0
    685e:	b3 01       	movw	r22, r6
    6860:	68 d3       	rcall	.+1744   	; 0x6f32 <fputc>
    6862:	81 10       	cpse	r8, r1
    6864:	8a 94       	dec	r8
    6866:	08 94       	sec
    6868:	e1 08       	sbc	r14, r1
    686a:	f1 08       	sbc	r15, r1
    686c:	e1 14       	cp	r14, r1
    686e:	f1 04       	cpc	r15, r1
    6870:	79 f7       	brne	.-34     	; 0x6850 <vfprintf+0x4c4>
    6872:	ea c0       	rjmp	.+468    	; 0x6a48 <vfprintf+0x6bc>
    6874:	94 36       	cpi	r25, 0x64	; 100
    6876:	11 f0       	breq	.+4      	; 0x687c <vfprintf+0x4f0>
    6878:	99 36       	cpi	r25, 0x69	; 105
    687a:	81 f5       	brne	.+96     	; 0x68dc <vfprintf+0x550>
    687c:	17 ff       	sbrs	r17, 7
    687e:	08 c0       	rjmp	.+16     	; 0x6890 <vfprintf+0x504>
    6880:	f6 01       	movw	r30, r12
    6882:	20 81       	ld	r18, Z
    6884:	31 81       	ldd	r19, Z+1	; 0x01
    6886:	42 81       	ldd	r20, Z+2	; 0x02
    6888:	53 81       	ldd	r21, Z+3	; 0x03
    688a:	84 e0       	ldi	r24, 0x04	; 4
    688c:	90 e0       	ldi	r25, 0x00	; 0
    688e:	0a c0       	rjmp	.+20     	; 0x68a4 <vfprintf+0x518>
    6890:	f6 01       	movw	r30, r12
    6892:	80 81       	ld	r24, Z
    6894:	91 81       	ldd	r25, Z+1	; 0x01
    6896:	9c 01       	movw	r18, r24
    6898:	44 27       	eor	r20, r20
    689a:	37 fd       	sbrc	r19, 7
    689c:	40 95       	com	r20
    689e:	54 2f       	mov	r21, r20
    68a0:	82 e0       	ldi	r24, 0x02	; 2
    68a2:	90 e0       	ldi	r25, 0x00	; 0
    68a4:	c8 0e       	add	r12, r24
    68a6:	d9 1e       	adc	r13, r25
    68a8:	9f e6       	ldi	r25, 0x6F	; 111
    68aa:	f9 2e       	mov	r15, r25
    68ac:	f1 22       	and	r15, r17
    68ae:	57 ff       	sbrs	r21, 7
    68b0:	09 c0       	rjmp	.+18     	; 0x68c4 <vfprintf+0x538>
    68b2:	50 95       	com	r21
    68b4:	40 95       	com	r20
    68b6:	30 95       	com	r19
    68b8:	21 95       	neg	r18
    68ba:	3f 4f       	sbci	r19, 0xFF	; 255
    68bc:	4f 4f       	sbci	r20, 0xFF	; 255
    68be:	5f 4f       	sbci	r21, 0xFF	; 255
    68c0:	90 e8       	ldi	r25, 0x80	; 128
    68c2:	f9 2a       	or	r15, r25
    68c4:	ca 01       	movw	r24, r20
    68c6:	b9 01       	movw	r22, r18
    68c8:	ae 01       	movw	r20, r28
    68ca:	4f 5f       	subi	r20, 0xFF	; 255
    68cc:	5f 4f       	sbci	r21, 0xFF	; 255
    68ce:	2a e0       	ldi	r18, 0x0A	; 10
    68d0:	30 e0       	ldi	r19, 0x00	; 0
    68d2:	a2 d3       	rcall	.+1860   	; 0x7018 <__ultoa_invert>
    68d4:	e8 2e       	mov	r14, r24
    68d6:	e8 89       	ldd	r30, Y+16	; 0x10
    68d8:	ee 1a       	sub	r14, r30
    68da:	40 c0       	rjmp	.+128    	; 0x695c <vfprintf+0x5d0>
    68dc:	95 37       	cpi	r25, 0x75	; 117
    68de:	21 f4       	brne	.+8      	; 0x68e8 <vfprintf+0x55c>
    68e0:	1f 7e       	andi	r17, 0xEF	; 239
    68e2:	2a e0       	ldi	r18, 0x0A	; 10
    68e4:	30 e0       	ldi	r19, 0x00	; 0
    68e6:	1c c0       	rjmp	.+56     	; 0x6920 <vfprintf+0x594>
    68e8:	19 7f       	andi	r17, 0xF9	; 249
    68ea:	9f 36       	cpi	r25, 0x6F	; 111
    68ec:	61 f0       	breq	.+24     	; 0x6906 <vfprintf+0x57a>
    68ee:	90 37       	cpi	r25, 0x70	; 112
    68f0:	20 f4       	brcc	.+8      	; 0x68fa <vfprintf+0x56e>
    68f2:	98 35       	cpi	r25, 0x58	; 88
    68f4:	09 f0       	breq	.+2      	; 0x68f8 <vfprintf+0x56c>
    68f6:	ab c0       	rjmp	.+342    	; 0x6a4e <vfprintf+0x6c2>
    68f8:	0f c0       	rjmp	.+30     	; 0x6918 <vfprintf+0x58c>
    68fa:	90 37       	cpi	r25, 0x70	; 112
    68fc:	39 f0       	breq	.+14     	; 0x690c <vfprintf+0x580>
    68fe:	98 37       	cpi	r25, 0x78	; 120
    6900:	09 f0       	breq	.+2      	; 0x6904 <vfprintf+0x578>
    6902:	a5 c0       	rjmp	.+330    	; 0x6a4e <vfprintf+0x6c2>
    6904:	04 c0       	rjmp	.+8      	; 0x690e <vfprintf+0x582>
    6906:	28 e0       	ldi	r18, 0x08	; 8
    6908:	30 e0       	ldi	r19, 0x00	; 0
    690a:	0a c0       	rjmp	.+20     	; 0x6920 <vfprintf+0x594>
    690c:	10 61       	ori	r17, 0x10	; 16
    690e:	14 fd       	sbrc	r17, 4
    6910:	14 60       	ori	r17, 0x04	; 4
    6912:	20 e1       	ldi	r18, 0x10	; 16
    6914:	30 e0       	ldi	r19, 0x00	; 0
    6916:	04 c0       	rjmp	.+8      	; 0x6920 <vfprintf+0x594>
    6918:	14 fd       	sbrc	r17, 4
    691a:	16 60       	ori	r17, 0x06	; 6
    691c:	20 e1       	ldi	r18, 0x10	; 16
    691e:	32 e0       	ldi	r19, 0x02	; 2
    6920:	17 ff       	sbrs	r17, 7
    6922:	08 c0       	rjmp	.+16     	; 0x6934 <vfprintf+0x5a8>
    6924:	f6 01       	movw	r30, r12
    6926:	60 81       	ld	r22, Z
    6928:	71 81       	ldd	r23, Z+1	; 0x01
    692a:	82 81       	ldd	r24, Z+2	; 0x02
    692c:	93 81       	ldd	r25, Z+3	; 0x03
    692e:	44 e0       	ldi	r20, 0x04	; 4
    6930:	50 e0       	ldi	r21, 0x00	; 0
    6932:	08 c0       	rjmp	.+16     	; 0x6944 <vfprintf+0x5b8>
    6934:	f6 01       	movw	r30, r12
    6936:	80 81       	ld	r24, Z
    6938:	91 81       	ldd	r25, Z+1	; 0x01
    693a:	bc 01       	movw	r22, r24
    693c:	80 e0       	ldi	r24, 0x00	; 0
    693e:	90 e0       	ldi	r25, 0x00	; 0
    6940:	42 e0       	ldi	r20, 0x02	; 2
    6942:	50 e0       	ldi	r21, 0x00	; 0
    6944:	c4 0e       	add	r12, r20
    6946:	d5 1e       	adc	r13, r21
    6948:	ae 01       	movw	r20, r28
    694a:	4f 5f       	subi	r20, 0xFF	; 255
    694c:	5f 4f       	sbci	r21, 0xFF	; 255
    694e:	64 d3       	rcall	.+1736   	; 0x7018 <__ultoa_invert>
    6950:	e8 2e       	mov	r14, r24
    6952:	58 89       	ldd	r21, Y+16	; 0x10
    6954:	e5 1a       	sub	r14, r21
    6956:	8f e7       	ldi	r24, 0x7F	; 127
    6958:	f8 2e       	mov	r15, r24
    695a:	f1 22       	and	r15, r17
    695c:	f6 fe       	sbrs	r15, 6
    695e:	0b c0       	rjmp	.+22     	; 0x6976 <vfprintf+0x5ea>
    6960:	8e ef       	ldi	r24, 0xFE	; 254
    6962:	f8 22       	and	r15, r24
    6964:	e9 14       	cp	r14, r9
    6966:	38 f4       	brcc	.+14     	; 0x6976 <vfprintf+0x5ea>
    6968:	f4 fe       	sbrs	r15, 4
    696a:	07 c0       	rjmp	.+14     	; 0x697a <vfprintf+0x5ee>
    696c:	f2 fc       	sbrc	r15, 2
    696e:	05 c0       	rjmp	.+10     	; 0x697a <vfprintf+0x5ee>
    6970:	9f ee       	ldi	r25, 0xEF	; 239
    6972:	f9 22       	and	r15, r25
    6974:	02 c0       	rjmp	.+4      	; 0x697a <vfprintf+0x5ee>
    6976:	1e 2d       	mov	r17, r14
    6978:	01 c0       	rjmp	.+2      	; 0x697c <vfprintf+0x5f0>
    697a:	19 2d       	mov	r17, r9
    697c:	f4 fe       	sbrs	r15, 4
    697e:	0d c0       	rjmp	.+26     	; 0x699a <vfprintf+0x60e>
    6980:	fe 01       	movw	r30, r28
    6982:	ee 0d       	add	r30, r14
    6984:	f1 1d       	adc	r31, r1
    6986:	80 81       	ld	r24, Z
    6988:	80 33       	cpi	r24, 0x30	; 48
    698a:	19 f4       	brne	.+6      	; 0x6992 <vfprintf+0x606>
    698c:	e9 ee       	ldi	r30, 0xE9	; 233
    698e:	fe 22       	and	r15, r30
    6990:	08 c0       	rjmp	.+16     	; 0x69a2 <vfprintf+0x616>
    6992:	1f 5f       	subi	r17, 0xFF	; 255
    6994:	f2 fe       	sbrs	r15, 2
    6996:	05 c0       	rjmp	.+10     	; 0x69a2 <vfprintf+0x616>
    6998:	03 c0       	rjmp	.+6      	; 0x69a0 <vfprintf+0x614>
    699a:	8f 2d       	mov	r24, r15
    699c:	86 78       	andi	r24, 0x86	; 134
    699e:	09 f0       	breq	.+2      	; 0x69a2 <vfprintf+0x616>
    69a0:	1f 5f       	subi	r17, 0xFF	; 255
    69a2:	0f 2d       	mov	r16, r15
    69a4:	f3 fc       	sbrc	r15, 3
    69a6:	13 c0       	rjmp	.+38     	; 0x69ce <vfprintf+0x642>
    69a8:	f0 fe       	sbrs	r15, 0
    69aa:	0e c0       	rjmp	.+28     	; 0x69c8 <vfprintf+0x63c>
    69ac:	18 15       	cp	r17, r8
    69ae:	10 f0       	brcs	.+4      	; 0x69b4 <vfprintf+0x628>
    69b0:	9e 2c       	mov	r9, r14
    69b2:	0a c0       	rjmp	.+20     	; 0x69c8 <vfprintf+0x63c>
    69b4:	9e 2c       	mov	r9, r14
    69b6:	98 0c       	add	r9, r8
    69b8:	91 1a       	sub	r9, r17
    69ba:	18 2d       	mov	r17, r8
    69bc:	05 c0       	rjmp	.+10     	; 0x69c8 <vfprintf+0x63c>
    69be:	80 e2       	ldi	r24, 0x20	; 32
    69c0:	90 e0       	ldi	r25, 0x00	; 0
    69c2:	b3 01       	movw	r22, r6
    69c4:	b6 d2       	rcall	.+1388   	; 0x6f32 <fputc>
    69c6:	1f 5f       	subi	r17, 0xFF	; 255
    69c8:	18 15       	cp	r17, r8
    69ca:	c8 f3       	brcs	.-14     	; 0x69be <vfprintf+0x632>
    69cc:	04 c0       	rjmp	.+8      	; 0x69d6 <vfprintf+0x64a>
    69ce:	18 15       	cp	r17, r8
    69d0:	10 f4       	brcc	.+4      	; 0x69d6 <vfprintf+0x64a>
    69d2:	81 1a       	sub	r8, r17
    69d4:	01 c0       	rjmp	.+2      	; 0x69d8 <vfprintf+0x64c>
    69d6:	88 24       	eor	r8, r8
    69d8:	04 ff       	sbrs	r16, 4
    69da:	0e c0       	rjmp	.+28     	; 0x69f8 <vfprintf+0x66c>
    69dc:	80 e3       	ldi	r24, 0x30	; 48
    69de:	90 e0       	ldi	r25, 0x00	; 0
    69e0:	b3 01       	movw	r22, r6
    69e2:	a7 d2       	rcall	.+1358   	; 0x6f32 <fputc>
    69e4:	02 ff       	sbrs	r16, 2
    69e6:	1b c0       	rjmp	.+54     	; 0x6a1e <vfprintf+0x692>
    69e8:	01 fd       	sbrc	r16, 1
    69ea:	03 c0       	rjmp	.+6      	; 0x69f2 <vfprintf+0x666>
    69ec:	88 e7       	ldi	r24, 0x78	; 120
    69ee:	90 e0       	ldi	r25, 0x00	; 0
    69f0:	0e c0       	rjmp	.+28     	; 0x6a0e <vfprintf+0x682>
    69f2:	88 e5       	ldi	r24, 0x58	; 88
    69f4:	90 e0       	ldi	r25, 0x00	; 0
    69f6:	0b c0       	rjmp	.+22     	; 0x6a0e <vfprintf+0x682>
    69f8:	80 2f       	mov	r24, r16
    69fa:	86 78       	andi	r24, 0x86	; 134
    69fc:	81 f0       	breq	.+32     	; 0x6a1e <vfprintf+0x692>
    69fe:	01 ff       	sbrs	r16, 1
    6a00:	02 c0       	rjmp	.+4      	; 0x6a06 <vfprintf+0x67a>
    6a02:	8b e2       	ldi	r24, 0x2B	; 43
    6a04:	01 c0       	rjmp	.+2      	; 0x6a08 <vfprintf+0x67c>
    6a06:	80 e2       	ldi	r24, 0x20	; 32
    6a08:	f7 fc       	sbrc	r15, 7
    6a0a:	8d e2       	ldi	r24, 0x2D	; 45
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	b3 01       	movw	r22, r6
    6a10:	90 d2       	rcall	.+1312   	; 0x6f32 <fputc>
    6a12:	05 c0       	rjmp	.+10     	; 0x6a1e <vfprintf+0x692>
    6a14:	80 e3       	ldi	r24, 0x30	; 48
    6a16:	90 e0       	ldi	r25, 0x00	; 0
    6a18:	b3 01       	movw	r22, r6
    6a1a:	8b d2       	rcall	.+1302   	; 0x6f32 <fputc>
    6a1c:	9a 94       	dec	r9
    6a1e:	e9 14       	cp	r14, r9
    6a20:	c8 f3       	brcs	.-14     	; 0x6a14 <vfprintf+0x688>
    6a22:	ea 94       	dec	r14
    6a24:	e1 e0       	ldi	r30, 0x01	; 1
    6a26:	f0 e0       	ldi	r31, 0x00	; 0
    6a28:	ec 0f       	add	r30, r28
    6a2a:	fd 1f       	adc	r31, r29
    6a2c:	ee 0d       	add	r30, r14
    6a2e:	f1 1d       	adc	r31, r1
    6a30:	80 81       	ld	r24, Z
    6a32:	90 e0       	ldi	r25, 0x00	; 0
    6a34:	b3 01       	movw	r22, r6
    6a36:	7d d2       	rcall	.+1274   	; 0x6f32 <fputc>
    6a38:	ee 20       	and	r14, r14
    6a3a:	99 f7       	brne	.-26     	; 0x6a22 <vfprintf+0x696>
    6a3c:	05 c0       	rjmp	.+10     	; 0x6a48 <vfprintf+0x6bc>
    6a3e:	80 e2       	ldi	r24, 0x20	; 32
    6a40:	90 e0       	ldi	r25, 0x00	; 0
    6a42:	b3 01       	movw	r22, r6
    6a44:	76 d2       	rcall	.+1260   	; 0x6f32 <fputc>
    6a46:	8a 94       	dec	r8
    6a48:	88 20       	and	r8, r8
    6a4a:	c9 f7       	brne	.-14     	; 0x6a3e <vfprintf+0x6b2>
    6a4c:	b6 cc       	rjmp	.-1684   	; 0x63ba <vfprintf+0x2e>
    6a4e:	f3 01       	movw	r30, r6
    6a50:	66 81       	ldd	r22, Z+6	; 0x06
    6a52:	77 81       	ldd	r23, Z+7	; 0x07
    6a54:	cb 01       	movw	r24, r22
    6a56:	61 96       	adiw	r28, 0x11	; 17
    6a58:	e2 e1       	ldi	r30, 0x12	; 18
    6a5a:	5d c0       	rjmp	.+186    	; 0x6b16 <__epilogue_restores__>

00006a5c <__mulsi3>:
    6a5c:	62 9f       	mul	r22, r18
    6a5e:	d0 01       	movw	r26, r0
    6a60:	73 9f       	mul	r23, r19
    6a62:	f0 01       	movw	r30, r0
    6a64:	82 9f       	mul	r24, r18
    6a66:	e0 0d       	add	r30, r0
    6a68:	f1 1d       	adc	r31, r1
    6a6a:	64 9f       	mul	r22, r20
    6a6c:	e0 0d       	add	r30, r0
    6a6e:	f1 1d       	adc	r31, r1
    6a70:	92 9f       	mul	r25, r18
    6a72:	f0 0d       	add	r31, r0
    6a74:	83 9f       	mul	r24, r19
    6a76:	f0 0d       	add	r31, r0
    6a78:	74 9f       	mul	r23, r20
    6a7a:	f0 0d       	add	r31, r0
    6a7c:	65 9f       	mul	r22, r21
    6a7e:	f0 0d       	add	r31, r0
    6a80:	99 27       	eor	r25, r25
    6a82:	72 9f       	mul	r23, r18
    6a84:	b0 0d       	add	r27, r0
    6a86:	e1 1d       	adc	r30, r1
    6a88:	f9 1f       	adc	r31, r25
    6a8a:	63 9f       	mul	r22, r19
    6a8c:	b0 0d       	add	r27, r0
    6a8e:	e1 1d       	adc	r30, r1
    6a90:	f9 1f       	adc	r31, r25
    6a92:	bd 01       	movw	r22, r26
    6a94:	cf 01       	movw	r24, r30
    6a96:	11 24       	eor	r1, r1
    6a98:	08 95       	ret

00006a9a <__udivmodsi4>:
    6a9a:	a1 e2       	ldi	r26, 0x21	; 33
    6a9c:	1a 2e       	mov	r1, r26
    6a9e:	aa 1b       	sub	r26, r26
    6aa0:	bb 1b       	sub	r27, r27
    6aa2:	fd 01       	movw	r30, r26
    6aa4:	0d c0       	rjmp	.+26     	; 0x6ac0 <__udivmodsi4_ep>

00006aa6 <__udivmodsi4_loop>:
    6aa6:	aa 1f       	adc	r26, r26
    6aa8:	bb 1f       	adc	r27, r27
    6aaa:	ee 1f       	adc	r30, r30
    6aac:	ff 1f       	adc	r31, r31
    6aae:	a2 17       	cp	r26, r18
    6ab0:	b3 07       	cpc	r27, r19
    6ab2:	e4 07       	cpc	r30, r20
    6ab4:	f5 07       	cpc	r31, r21
    6ab6:	20 f0       	brcs	.+8      	; 0x6ac0 <__udivmodsi4_ep>
    6ab8:	a2 1b       	sub	r26, r18
    6aba:	b3 0b       	sbc	r27, r19
    6abc:	e4 0b       	sbc	r30, r20
    6abe:	f5 0b       	sbc	r31, r21

00006ac0 <__udivmodsi4_ep>:
    6ac0:	66 1f       	adc	r22, r22
    6ac2:	77 1f       	adc	r23, r23
    6ac4:	88 1f       	adc	r24, r24
    6ac6:	99 1f       	adc	r25, r25
    6ac8:	1a 94       	dec	r1
    6aca:	69 f7       	brne	.-38     	; 0x6aa6 <__udivmodsi4_loop>
    6acc:	60 95       	com	r22
    6ace:	70 95       	com	r23
    6ad0:	80 95       	com	r24
    6ad2:	90 95       	com	r25
    6ad4:	9b 01       	movw	r18, r22
    6ad6:	ac 01       	movw	r20, r24
    6ad8:	bd 01       	movw	r22, r26
    6ada:	cf 01       	movw	r24, r30
    6adc:	08 95       	ret

00006ade <__prologue_saves__>:
    6ade:	2f 92       	push	r2
    6ae0:	3f 92       	push	r3
    6ae2:	4f 92       	push	r4
    6ae4:	5f 92       	push	r5
    6ae6:	6f 92       	push	r6
    6ae8:	7f 92       	push	r7
    6aea:	8f 92       	push	r8
    6aec:	9f 92       	push	r9
    6aee:	af 92       	push	r10
    6af0:	bf 92       	push	r11
    6af2:	cf 92       	push	r12
    6af4:	df 92       	push	r13
    6af6:	ef 92       	push	r14
    6af8:	ff 92       	push	r15
    6afa:	0f 93       	push	r16
    6afc:	1f 93       	push	r17
    6afe:	cf 93       	push	r28
    6b00:	df 93       	push	r29
    6b02:	cd b7       	in	r28, 0x3d	; 61
    6b04:	de b7       	in	r29, 0x3e	; 62
    6b06:	ca 1b       	sub	r28, r26
    6b08:	db 0b       	sbc	r29, r27
    6b0a:	0f b6       	in	r0, 0x3f	; 63
    6b0c:	f8 94       	cli
    6b0e:	de bf       	out	0x3e, r29	; 62
    6b10:	0f be       	out	0x3f, r0	; 63
    6b12:	cd bf       	out	0x3d, r28	; 61
    6b14:	09 94       	ijmp

00006b16 <__epilogue_restores__>:
    6b16:	2a 88       	ldd	r2, Y+18	; 0x12
    6b18:	39 88       	ldd	r3, Y+17	; 0x11
    6b1a:	48 88       	ldd	r4, Y+16	; 0x10
    6b1c:	5f 84       	ldd	r5, Y+15	; 0x0f
    6b1e:	6e 84       	ldd	r6, Y+14	; 0x0e
    6b20:	7d 84       	ldd	r7, Y+13	; 0x0d
    6b22:	8c 84       	ldd	r8, Y+12	; 0x0c
    6b24:	9b 84       	ldd	r9, Y+11	; 0x0b
    6b26:	aa 84       	ldd	r10, Y+10	; 0x0a
    6b28:	b9 84       	ldd	r11, Y+9	; 0x09
    6b2a:	c8 84       	ldd	r12, Y+8	; 0x08
    6b2c:	df 80       	ldd	r13, Y+7	; 0x07
    6b2e:	ee 80       	ldd	r14, Y+6	; 0x06
    6b30:	fd 80       	ldd	r15, Y+5	; 0x05
    6b32:	0c 81       	ldd	r16, Y+4	; 0x04
    6b34:	1b 81       	ldd	r17, Y+3	; 0x03
    6b36:	aa 81       	ldd	r26, Y+2	; 0x02
    6b38:	b9 81       	ldd	r27, Y+1	; 0x01
    6b3a:	ce 0f       	add	r28, r30
    6b3c:	d1 1d       	adc	r29, r1
    6b3e:	0f b6       	in	r0, 0x3f	; 63
    6b40:	f8 94       	cli
    6b42:	de bf       	out	0x3e, r29	; 62
    6b44:	0f be       	out	0x3f, r0	; 63
    6b46:	cd bf       	out	0x3d, r28	; 61
    6b48:	ed 01       	movw	r28, r26
    6b4a:	08 95       	ret

00006b4c <malloc>:
    6b4c:	cf 93       	push	r28
    6b4e:	df 93       	push	r29
    6b50:	bc 01       	movw	r22, r24
    6b52:	82 30       	cpi	r24, 0x02	; 2
    6b54:	91 05       	cpc	r25, r1
    6b56:	10 f4       	brcc	.+4      	; 0x6b5c <malloc+0x10>
    6b58:	62 e0       	ldi	r22, 0x02	; 2
    6b5a:	70 e0       	ldi	r23, 0x00	; 0
    6b5c:	a0 91 97 07 	lds	r26, 0x0797
    6b60:	b0 91 98 07 	lds	r27, 0x0798
    6b64:	ed 01       	movw	r28, r26
    6b66:	e0 e0       	ldi	r30, 0x00	; 0
    6b68:	f0 e0       	ldi	r31, 0x00	; 0
    6b6a:	40 e0       	ldi	r20, 0x00	; 0
    6b6c:	50 e0       	ldi	r21, 0x00	; 0
    6b6e:	21 c0       	rjmp	.+66     	; 0x6bb2 <malloc+0x66>
    6b70:	88 81       	ld	r24, Y
    6b72:	99 81       	ldd	r25, Y+1	; 0x01
    6b74:	86 17       	cp	r24, r22
    6b76:	97 07       	cpc	r25, r23
    6b78:	69 f4       	brne	.+26     	; 0x6b94 <malloc+0x48>
    6b7a:	8a 81       	ldd	r24, Y+2	; 0x02
    6b7c:	9b 81       	ldd	r25, Y+3	; 0x03
    6b7e:	30 97       	sbiw	r30, 0x00	; 0
    6b80:	19 f0       	breq	.+6      	; 0x6b88 <malloc+0x3c>
    6b82:	93 83       	std	Z+3, r25	; 0x03
    6b84:	82 83       	std	Z+2, r24	; 0x02
    6b86:	04 c0       	rjmp	.+8      	; 0x6b90 <malloc+0x44>
    6b88:	90 93 98 07 	sts	0x0798, r25
    6b8c:	80 93 97 07 	sts	0x0797, r24
    6b90:	fe 01       	movw	r30, r28
    6b92:	34 c0       	rjmp	.+104    	; 0x6bfc <malloc+0xb0>
    6b94:	68 17       	cp	r22, r24
    6b96:	79 07       	cpc	r23, r25
    6b98:	38 f4       	brcc	.+14     	; 0x6ba8 <malloc+0x5c>
    6b9a:	41 15       	cp	r20, r1
    6b9c:	51 05       	cpc	r21, r1
    6b9e:	19 f0       	breq	.+6      	; 0x6ba6 <malloc+0x5a>
    6ba0:	84 17       	cp	r24, r20
    6ba2:	95 07       	cpc	r25, r21
    6ba4:	08 f4       	brcc	.+2      	; 0x6ba8 <malloc+0x5c>
    6ba6:	ac 01       	movw	r20, r24
    6ba8:	fe 01       	movw	r30, r28
    6baa:	8a 81       	ldd	r24, Y+2	; 0x02
    6bac:	9b 81       	ldd	r25, Y+3	; 0x03
    6bae:	9c 01       	movw	r18, r24
    6bb0:	e9 01       	movw	r28, r18
    6bb2:	20 97       	sbiw	r28, 0x00	; 0
    6bb4:	e9 f6       	brne	.-70     	; 0x6b70 <malloc+0x24>
    6bb6:	41 15       	cp	r20, r1
    6bb8:	51 05       	cpc	r21, r1
    6bba:	a9 f1       	breq	.+106    	; 0x6c26 <malloc+0xda>
    6bbc:	ca 01       	movw	r24, r20
    6bbe:	86 1b       	sub	r24, r22
    6bc0:	97 0b       	sbc	r25, r23
    6bc2:	04 97       	sbiw	r24, 0x04	; 4
    6bc4:	08 f4       	brcc	.+2      	; 0x6bc8 <malloc+0x7c>
    6bc6:	ba 01       	movw	r22, r20
    6bc8:	e0 e0       	ldi	r30, 0x00	; 0
    6bca:	f0 e0       	ldi	r31, 0x00	; 0
    6bcc:	2a c0       	rjmp	.+84     	; 0x6c22 <malloc+0xd6>
    6bce:	8d 91       	ld	r24, X+
    6bd0:	9c 91       	ld	r25, X
    6bd2:	11 97       	sbiw	r26, 0x01	; 1
    6bd4:	84 17       	cp	r24, r20
    6bd6:	95 07       	cpc	r25, r21
    6bd8:	f9 f4       	brne	.+62     	; 0x6c18 <malloc+0xcc>
    6bda:	64 17       	cp	r22, r20
    6bdc:	75 07       	cpc	r23, r21
    6bde:	81 f4       	brne	.+32     	; 0x6c00 <malloc+0xb4>
    6be0:	12 96       	adiw	r26, 0x02	; 2
    6be2:	8d 91       	ld	r24, X+
    6be4:	9c 91       	ld	r25, X
    6be6:	13 97       	sbiw	r26, 0x03	; 3
    6be8:	30 97       	sbiw	r30, 0x00	; 0
    6bea:	19 f0       	breq	.+6      	; 0x6bf2 <malloc+0xa6>
    6bec:	93 83       	std	Z+3, r25	; 0x03
    6bee:	82 83       	std	Z+2, r24	; 0x02
    6bf0:	04 c0       	rjmp	.+8      	; 0x6bfa <malloc+0xae>
    6bf2:	90 93 98 07 	sts	0x0798, r25
    6bf6:	80 93 97 07 	sts	0x0797, r24
    6bfa:	fd 01       	movw	r30, r26
    6bfc:	32 96       	adiw	r30, 0x02	; 2
    6bfe:	4f c0       	rjmp	.+158    	; 0x6c9e <malloc+0x152>
    6c00:	ca 01       	movw	r24, r20
    6c02:	86 1b       	sub	r24, r22
    6c04:	97 0b       	sbc	r25, r23
    6c06:	fd 01       	movw	r30, r26
    6c08:	e8 0f       	add	r30, r24
    6c0a:	f9 1f       	adc	r31, r25
    6c0c:	61 93       	st	Z+, r22
    6c0e:	71 93       	st	Z+, r23
    6c10:	02 97       	sbiw	r24, 0x02	; 2
    6c12:	8d 93       	st	X+, r24
    6c14:	9c 93       	st	X, r25
    6c16:	43 c0       	rjmp	.+134    	; 0x6c9e <malloc+0x152>
    6c18:	fd 01       	movw	r30, r26
    6c1a:	82 81       	ldd	r24, Z+2	; 0x02
    6c1c:	93 81       	ldd	r25, Z+3	; 0x03
    6c1e:	9c 01       	movw	r18, r24
    6c20:	d9 01       	movw	r26, r18
    6c22:	10 97       	sbiw	r26, 0x00	; 0
    6c24:	a1 f6       	brne	.-88     	; 0x6bce <malloc+0x82>
    6c26:	80 91 95 07 	lds	r24, 0x0795
    6c2a:	90 91 96 07 	lds	r25, 0x0796
    6c2e:	89 2b       	or	r24, r25
    6c30:	41 f4       	brne	.+16     	; 0x6c42 <malloc+0xf6>
    6c32:	80 91 d6 03 	lds	r24, 0x03D6
    6c36:	90 91 d7 03 	lds	r25, 0x03D7
    6c3a:	90 93 96 07 	sts	0x0796, r25
    6c3e:	80 93 95 07 	sts	0x0795, r24
    6c42:	40 91 d8 03 	lds	r20, 0x03D8
    6c46:	50 91 d9 03 	lds	r21, 0x03D9
    6c4a:	41 15       	cp	r20, r1
    6c4c:	51 05       	cpc	r21, r1
    6c4e:	41 f4       	brne	.+16     	; 0x6c60 <malloc+0x114>
    6c50:	4d b7       	in	r20, 0x3d	; 61
    6c52:	5e b7       	in	r21, 0x3e	; 62
    6c54:	80 91 d4 03 	lds	r24, 0x03D4
    6c58:	90 91 d5 03 	lds	r25, 0x03D5
    6c5c:	48 1b       	sub	r20, r24
    6c5e:	59 0b       	sbc	r21, r25
    6c60:	20 91 95 07 	lds	r18, 0x0795
    6c64:	30 91 96 07 	lds	r19, 0x0796
    6c68:	24 17       	cp	r18, r20
    6c6a:	35 07       	cpc	r19, r21
    6c6c:	b0 f4       	brcc	.+44     	; 0x6c9a <malloc+0x14e>
    6c6e:	ca 01       	movw	r24, r20
    6c70:	82 1b       	sub	r24, r18
    6c72:	93 0b       	sbc	r25, r19
    6c74:	86 17       	cp	r24, r22
    6c76:	97 07       	cpc	r25, r23
    6c78:	80 f0       	brcs	.+32     	; 0x6c9a <malloc+0x14e>
    6c7a:	ab 01       	movw	r20, r22
    6c7c:	4e 5f       	subi	r20, 0xFE	; 254
    6c7e:	5f 4f       	sbci	r21, 0xFF	; 255
    6c80:	84 17       	cp	r24, r20
    6c82:	95 07       	cpc	r25, r21
    6c84:	50 f0       	brcs	.+20     	; 0x6c9a <malloc+0x14e>
    6c86:	42 0f       	add	r20, r18
    6c88:	53 1f       	adc	r21, r19
    6c8a:	50 93 96 07 	sts	0x0796, r21
    6c8e:	40 93 95 07 	sts	0x0795, r20
    6c92:	f9 01       	movw	r30, r18
    6c94:	61 93       	st	Z+, r22
    6c96:	71 93       	st	Z+, r23
    6c98:	02 c0       	rjmp	.+4      	; 0x6c9e <malloc+0x152>
    6c9a:	e0 e0       	ldi	r30, 0x00	; 0
    6c9c:	f0 e0       	ldi	r31, 0x00	; 0
    6c9e:	cf 01       	movw	r24, r30
    6ca0:	df 91       	pop	r29
    6ca2:	cf 91       	pop	r28
    6ca4:	08 95       	ret

00006ca6 <free>:
    6ca6:	cf 93       	push	r28
    6ca8:	df 93       	push	r29
    6caa:	00 97       	sbiw	r24, 0x00	; 0
    6cac:	09 f4       	brne	.+2      	; 0x6cb0 <free+0xa>
    6cae:	50 c0       	rjmp	.+160    	; 0x6d50 <free+0xaa>
    6cb0:	ec 01       	movw	r28, r24
    6cb2:	22 97       	sbiw	r28, 0x02	; 2
    6cb4:	1b 82       	std	Y+3, r1	; 0x03
    6cb6:	1a 82       	std	Y+2, r1	; 0x02
    6cb8:	a0 91 97 07 	lds	r26, 0x0797
    6cbc:	b0 91 98 07 	lds	r27, 0x0798
    6cc0:	10 97       	sbiw	r26, 0x00	; 0
    6cc2:	09 f1       	breq	.+66     	; 0x6d06 <free+0x60>
    6cc4:	40 e0       	ldi	r20, 0x00	; 0
    6cc6:	50 e0       	ldi	r21, 0x00	; 0
    6cc8:	ac 17       	cp	r26, r28
    6cca:	bd 07       	cpc	r27, r29
    6ccc:	08 f1       	brcs	.+66     	; 0x6d10 <free+0x6a>
    6cce:	bb 83       	std	Y+3, r27	; 0x03
    6cd0:	aa 83       	std	Y+2, r26	; 0x02
    6cd2:	fe 01       	movw	r30, r28
    6cd4:	21 91       	ld	r18, Z+
    6cd6:	31 91       	ld	r19, Z+
    6cd8:	e2 0f       	add	r30, r18
    6cda:	f3 1f       	adc	r31, r19
    6cdc:	ae 17       	cp	r26, r30
    6cde:	bf 07       	cpc	r27, r31
    6ce0:	79 f4       	brne	.+30     	; 0x6d00 <free+0x5a>
    6ce2:	8d 91       	ld	r24, X+
    6ce4:	9c 91       	ld	r25, X
    6ce6:	11 97       	sbiw	r26, 0x01	; 1
    6ce8:	28 0f       	add	r18, r24
    6cea:	39 1f       	adc	r19, r25
    6cec:	2e 5f       	subi	r18, 0xFE	; 254
    6cee:	3f 4f       	sbci	r19, 0xFF	; 255
    6cf0:	39 83       	std	Y+1, r19	; 0x01
    6cf2:	28 83       	st	Y, r18
    6cf4:	12 96       	adiw	r26, 0x02	; 2
    6cf6:	8d 91       	ld	r24, X+
    6cf8:	9c 91       	ld	r25, X
    6cfa:	13 97       	sbiw	r26, 0x03	; 3
    6cfc:	9b 83       	std	Y+3, r25	; 0x03
    6cfe:	8a 83       	std	Y+2, r24	; 0x02
    6d00:	41 15       	cp	r20, r1
    6d02:	51 05       	cpc	r21, r1
    6d04:	71 f4       	brne	.+28     	; 0x6d22 <free+0x7c>
    6d06:	d0 93 98 07 	sts	0x0798, r29
    6d0a:	c0 93 97 07 	sts	0x0797, r28
    6d0e:	20 c0       	rjmp	.+64     	; 0x6d50 <free+0xaa>
    6d10:	12 96       	adiw	r26, 0x02	; 2
    6d12:	8d 91       	ld	r24, X+
    6d14:	9c 91       	ld	r25, X
    6d16:	13 97       	sbiw	r26, 0x03	; 3
    6d18:	ad 01       	movw	r20, r26
    6d1a:	00 97       	sbiw	r24, 0x00	; 0
    6d1c:	11 f0       	breq	.+4      	; 0x6d22 <free+0x7c>
    6d1e:	dc 01       	movw	r26, r24
    6d20:	d3 cf       	rjmp	.-90     	; 0x6cc8 <free+0x22>
    6d22:	fa 01       	movw	r30, r20
    6d24:	d3 83       	std	Z+3, r29	; 0x03
    6d26:	c2 83       	std	Z+2, r28	; 0x02
    6d28:	21 91       	ld	r18, Z+
    6d2a:	31 91       	ld	r19, Z+
    6d2c:	e2 0f       	add	r30, r18
    6d2e:	f3 1f       	adc	r31, r19
    6d30:	ce 17       	cp	r28, r30
    6d32:	df 07       	cpc	r29, r31
    6d34:	69 f4       	brne	.+26     	; 0x6d50 <free+0xaa>
    6d36:	88 81       	ld	r24, Y
    6d38:	99 81       	ldd	r25, Y+1	; 0x01
    6d3a:	28 0f       	add	r18, r24
    6d3c:	39 1f       	adc	r19, r25
    6d3e:	2e 5f       	subi	r18, 0xFE	; 254
    6d40:	3f 4f       	sbci	r19, 0xFF	; 255
    6d42:	fa 01       	movw	r30, r20
    6d44:	31 83       	std	Z+1, r19	; 0x01
    6d46:	20 83       	st	Z, r18
    6d48:	8a 81       	ldd	r24, Y+2	; 0x02
    6d4a:	9b 81       	ldd	r25, Y+3	; 0x03
    6d4c:	93 83       	std	Z+3, r25	; 0x03
    6d4e:	82 83       	std	Z+2, r24	; 0x02
    6d50:	df 91       	pop	r29
    6d52:	cf 91       	pop	r28
    6d54:	08 95       	ret

00006d56 <__ftoa_engine>:
    6d56:	28 30       	cpi	r18, 0x08	; 8
    6d58:	08 f0       	brcs	.+2      	; 0x6d5c <__ftoa_engine+0x6>
    6d5a:	27 e0       	ldi	r18, 0x07	; 7
    6d5c:	33 27       	eor	r19, r19
    6d5e:	da 01       	movw	r26, r20
    6d60:	99 0f       	add	r25, r25
    6d62:	31 1d       	adc	r19, r1
    6d64:	87 fd       	sbrc	r24, 7
    6d66:	91 60       	ori	r25, 0x01	; 1
    6d68:	00 96       	adiw	r24, 0x00	; 0
    6d6a:	61 05       	cpc	r22, r1
    6d6c:	71 05       	cpc	r23, r1
    6d6e:	39 f4       	brne	.+14     	; 0x6d7e <__ftoa_engine+0x28>
    6d70:	32 60       	ori	r19, 0x02	; 2
    6d72:	2e 5f       	subi	r18, 0xFE	; 254
    6d74:	3d 93       	st	X+, r19
    6d76:	30 e3       	ldi	r19, 0x30	; 48
    6d78:	2a 95       	dec	r18
    6d7a:	e1 f7       	brne	.-8      	; 0x6d74 <__ftoa_engine+0x1e>
    6d7c:	08 95       	ret
    6d7e:	9f 3f       	cpi	r25, 0xFF	; 255
    6d80:	30 f0       	brcs	.+12     	; 0x6d8e <__ftoa_engine+0x38>
    6d82:	80 38       	cpi	r24, 0x80	; 128
    6d84:	71 05       	cpc	r23, r1
    6d86:	61 05       	cpc	r22, r1
    6d88:	09 f0       	breq	.+2      	; 0x6d8c <__ftoa_engine+0x36>
    6d8a:	3c 5f       	subi	r19, 0xFC	; 252
    6d8c:	3c 5f       	subi	r19, 0xFC	; 252
    6d8e:	3d 93       	st	X+, r19
    6d90:	91 30       	cpi	r25, 0x01	; 1
    6d92:	08 f0       	brcs	.+2      	; 0x6d96 <__ftoa_engine+0x40>
    6d94:	80 68       	ori	r24, 0x80	; 128
    6d96:	91 1d       	adc	r25, r1
    6d98:	df 93       	push	r29
    6d9a:	cf 93       	push	r28
    6d9c:	1f 93       	push	r17
    6d9e:	0f 93       	push	r16
    6da0:	ff 92       	push	r15
    6da2:	ef 92       	push	r14
    6da4:	19 2f       	mov	r17, r25
    6da6:	98 7f       	andi	r25, 0xF8	; 248
    6da8:	96 95       	lsr	r25
    6daa:	e9 2f       	mov	r30, r25
    6dac:	96 95       	lsr	r25
    6dae:	96 95       	lsr	r25
    6db0:	e9 0f       	add	r30, r25
    6db2:	ff 27       	eor	r31, r31
    6db4:	ef 53       	subi	r30, 0x3F	; 63
    6db6:	fa 4f       	sbci	r31, 0xFA	; 250
    6db8:	99 27       	eor	r25, r25
    6dba:	33 27       	eor	r19, r19
    6dbc:	ee 24       	eor	r14, r14
    6dbe:	ff 24       	eor	r15, r15
    6dc0:	a7 01       	movw	r20, r14
    6dc2:	e7 01       	movw	r28, r14
    6dc4:	05 90       	lpm	r0, Z+
    6dc6:	08 94       	sec
    6dc8:	07 94       	ror	r0
    6dca:	28 f4       	brcc	.+10     	; 0x6dd6 <__ftoa_engine+0x80>
    6dcc:	36 0f       	add	r19, r22
    6dce:	e7 1e       	adc	r14, r23
    6dd0:	f8 1e       	adc	r15, r24
    6dd2:	49 1f       	adc	r20, r25
    6dd4:	51 1d       	adc	r21, r1
    6dd6:	66 0f       	add	r22, r22
    6dd8:	77 1f       	adc	r23, r23
    6dda:	88 1f       	adc	r24, r24
    6ddc:	99 1f       	adc	r25, r25
    6dde:	06 94       	lsr	r0
    6de0:	a1 f7       	brne	.-24     	; 0x6dca <__ftoa_engine+0x74>
    6de2:	05 90       	lpm	r0, Z+
    6de4:	07 94       	ror	r0
    6de6:	28 f4       	brcc	.+10     	; 0x6df2 <__ftoa_engine+0x9c>
    6de8:	e7 0e       	add	r14, r23
    6dea:	f8 1e       	adc	r15, r24
    6dec:	49 1f       	adc	r20, r25
    6dee:	56 1f       	adc	r21, r22
    6df0:	c1 1d       	adc	r28, r1
    6df2:	77 0f       	add	r23, r23
    6df4:	88 1f       	adc	r24, r24
    6df6:	99 1f       	adc	r25, r25
    6df8:	66 1f       	adc	r22, r22
    6dfa:	06 94       	lsr	r0
    6dfc:	a1 f7       	brne	.-24     	; 0x6de6 <__ftoa_engine+0x90>
    6dfe:	05 90       	lpm	r0, Z+
    6e00:	07 94       	ror	r0
    6e02:	28 f4       	brcc	.+10     	; 0x6e0e <__ftoa_engine+0xb8>
    6e04:	f8 0e       	add	r15, r24
    6e06:	49 1f       	adc	r20, r25
    6e08:	56 1f       	adc	r21, r22
    6e0a:	c7 1f       	adc	r28, r23
    6e0c:	d1 1d       	adc	r29, r1
    6e0e:	88 0f       	add	r24, r24
    6e10:	99 1f       	adc	r25, r25
    6e12:	66 1f       	adc	r22, r22
    6e14:	77 1f       	adc	r23, r23
    6e16:	06 94       	lsr	r0
    6e18:	a1 f7       	brne	.-24     	; 0x6e02 <__ftoa_engine+0xac>
    6e1a:	05 90       	lpm	r0, Z+
    6e1c:	07 94       	ror	r0
    6e1e:	20 f4       	brcc	.+8      	; 0x6e28 <__ftoa_engine+0xd2>
    6e20:	49 0f       	add	r20, r25
    6e22:	56 1f       	adc	r21, r22
    6e24:	c7 1f       	adc	r28, r23
    6e26:	d8 1f       	adc	r29, r24
    6e28:	99 0f       	add	r25, r25
    6e2a:	66 1f       	adc	r22, r22
    6e2c:	77 1f       	adc	r23, r23
    6e2e:	88 1f       	adc	r24, r24
    6e30:	06 94       	lsr	r0
    6e32:	a9 f7       	brne	.-22     	; 0x6e1e <__ftoa_engine+0xc8>
    6e34:	84 91       	lpm	r24, Z+
    6e36:	10 95       	com	r17
    6e38:	17 70       	andi	r17, 0x07	; 7
    6e3a:	41 f0       	breq	.+16     	; 0x6e4c <__ftoa_engine+0xf6>
    6e3c:	d6 95       	lsr	r29
    6e3e:	c7 95       	ror	r28
    6e40:	57 95       	ror	r21
    6e42:	47 95       	ror	r20
    6e44:	f7 94       	ror	r15
    6e46:	e7 94       	ror	r14
    6e48:	1a 95       	dec	r17
    6e4a:	c1 f7       	brne	.-16     	; 0x6e3c <__ftoa_engine+0xe6>
    6e4c:	e7 e6       	ldi	r30, 0x67	; 103
    6e4e:	f5 e0       	ldi	r31, 0x05	; 5
    6e50:	68 94       	set
    6e52:	15 90       	lpm	r1, Z+
    6e54:	15 91       	lpm	r17, Z+
    6e56:	35 91       	lpm	r19, Z+
    6e58:	65 91       	lpm	r22, Z+
    6e5a:	95 91       	lpm	r25, Z+
    6e5c:	05 90       	lpm	r0, Z+
    6e5e:	7f e2       	ldi	r23, 0x2F	; 47
    6e60:	73 95       	inc	r23
    6e62:	e1 18       	sub	r14, r1
    6e64:	f1 0a       	sbc	r15, r17
    6e66:	43 0b       	sbc	r20, r19
    6e68:	56 0b       	sbc	r21, r22
    6e6a:	c9 0b       	sbc	r28, r25
    6e6c:	d0 09       	sbc	r29, r0
    6e6e:	c0 f7       	brcc	.-16     	; 0x6e60 <__ftoa_engine+0x10a>
    6e70:	e1 0c       	add	r14, r1
    6e72:	f1 1e       	adc	r15, r17
    6e74:	43 1f       	adc	r20, r19
    6e76:	56 1f       	adc	r21, r22
    6e78:	c9 1f       	adc	r28, r25
    6e7a:	d0 1d       	adc	r29, r0
    6e7c:	7e f4       	brtc	.+30     	; 0x6e9c <__ftoa_engine+0x146>
    6e7e:	70 33       	cpi	r23, 0x30	; 48
    6e80:	11 f4       	brne	.+4      	; 0x6e86 <__ftoa_engine+0x130>
    6e82:	8a 95       	dec	r24
    6e84:	e6 cf       	rjmp	.-52     	; 0x6e52 <__ftoa_engine+0xfc>
    6e86:	e8 94       	clt
    6e88:	01 50       	subi	r16, 0x01	; 1
    6e8a:	30 f0       	brcs	.+12     	; 0x6e98 <__ftoa_engine+0x142>
    6e8c:	08 0f       	add	r16, r24
    6e8e:	0a f4       	brpl	.+2      	; 0x6e92 <__ftoa_engine+0x13c>
    6e90:	00 27       	eor	r16, r16
    6e92:	02 17       	cp	r16, r18
    6e94:	08 f4       	brcc	.+2      	; 0x6e98 <__ftoa_engine+0x142>
    6e96:	20 2f       	mov	r18, r16
    6e98:	23 95       	inc	r18
    6e9a:	02 2f       	mov	r16, r18
    6e9c:	7a 33       	cpi	r23, 0x3A	; 58
    6e9e:	28 f0       	brcs	.+10     	; 0x6eaa <__ftoa_engine+0x154>
    6ea0:	79 e3       	ldi	r23, 0x39	; 57
    6ea2:	7d 93       	st	X+, r23
    6ea4:	2a 95       	dec	r18
    6ea6:	e9 f7       	brne	.-6      	; 0x6ea2 <__ftoa_engine+0x14c>
    6ea8:	10 c0       	rjmp	.+32     	; 0x6eca <__ftoa_engine+0x174>
    6eaa:	7d 93       	st	X+, r23
    6eac:	2a 95       	dec	r18
    6eae:	89 f6       	brne	.-94     	; 0x6e52 <__ftoa_engine+0xfc>
    6eb0:	06 94       	lsr	r0
    6eb2:	97 95       	ror	r25
    6eb4:	67 95       	ror	r22
    6eb6:	37 95       	ror	r19
    6eb8:	17 95       	ror	r17
    6eba:	17 94       	ror	r1
    6ebc:	e1 18       	sub	r14, r1
    6ebe:	f1 0a       	sbc	r15, r17
    6ec0:	43 0b       	sbc	r20, r19
    6ec2:	56 0b       	sbc	r21, r22
    6ec4:	c9 0b       	sbc	r28, r25
    6ec6:	d0 09       	sbc	r29, r0
    6ec8:	98 f0       	brcs	.+38     	; 0x6ef0 <__ftoa_engine+0x19a>
    6eca:	23 95       	inc	r18
    6ecc:	7e 91       	ld	r23, -X
    6ece:	73 95       	inc	r23
    6ed0:	7a 33       	cpi	r23, 0x3A	; 58
    6ed2:	08 f0       	brcs	.+2      	; 0x6ed6 <__ftoa_engine+0x180>
    6ed4:	70 e3       	ldi	r23, 0x30	; 48
    6ed6:	7c 93       	st	X, r23
    6ed8:	20 13       	cpse	r18, r16
    6eda:	b8 f7       	brcc	.-18     	; 0x6eca <__ftoa_engine+0x174>
    6edc:	7e 91       	ld	r23, -X
    6ede:	70 61       	ori	r23, 0x10	; 16
    6ee0:	7d 93       	st	X+, r23
    6ee2:	30 f0       	brcs	.+12     	; 0x6ef0 <__ftoa_engine+0x19a>
    6ee4:	83 95       	inc	r24
    6ee6:	71 e3       	ldi	r23, 0x31	; 49
    6ee8:	7d 93       	st	X+, r23
    6eea:	70 e3       	ldi	r23, 0x30	; 48
    6eec:	2a 95       	dec	r18
    6eee:	e1 f7       	brne	.-8      	; 0x6ee8 <__ftoa_engine+0x192>
    6ef0:	11 24       	eor	r1, r1
    6ef2:	ef 90       	pop	r14
    6ef4:	ff 90       	pop	r15
    6ef6:	0f 91       	pop	r16
    6ef8:	1f 91       	pop	r17
    6efa:	cf 91       	pop	r28
    6efc:	df 91       	pop	r29
    6efe:	99 27       	eor	r25, r25
    6f00:	87 fd       	sbrc	r24, 7
    6f02:	90 95       	com	r25
    6f04:	08 95       	ret

00006f06 <strnlen_P>:
    6f06:	fc 01       	movw	r30, r24
    6f08:	05 90       	lpm	r0, Z+
    6f0a:	61 50       	subi	r22, 0x01	; 1
    6f0c:	70 40       	sbci	r23, 0x00	; 0
    6f0e:	01 10       	cpse	r0, r1
    6f10:	d8 f7       	brcc	.-10     	; 0x6f08 <strnlen_P+0x2>
    6f12:	80 95       	com	r24
    6f14:	90 95       	com	r25
    6f16:	8e 0f       	add	r24, r30
    6f18:	9f 1f       	adc	r25, r31
    6f1a:	08 95       	ret

00006f1c <strnlen>:
    6f1c:	fc 01       	movw	r30, r24
    6f1e:	61 50       	subi	r22, 0x01	; 1
    6f20:	70 40       	sbci	r23, 0x00	; 0
    6f22:	01 90       	ld	r0, Z+
    6f24:	01 10       	cpse	r0, r1
    6f26:	d8 f7       	brcc	.-10     	; 0x6f1e <strnlen+0x2>
    6f28:	80 95       	com	r24
    6f2a:	90 95       	com	r25
    6f2c:	8e 0f       	add	r24, r30
    6f2e:	9f 1f       	adc	r25, r31
    6f30:	08 95       	ret

00006f32 <fputc>:
    6f32:	0f 93       	push	r16
    6f34:	1f 93       	push	r17
    6f36:	cf 93       	push	r28
    6f38:	df 93       	push	r29
    6f3a:	8c 01       	movw	r16, r24
    6f3c:	eb 01       	movw	r28, r22
    6f3e:	8b 81       	ldd	r24, Y+3	; 0x03
    6f40:	81 ff       	sbrs	r24, 1
    6f42:	1b c0       	rjmp	.+54     	; 0x6f7a <fputc+0x48>
    6f44:	82 ff       	sbrs	r24, 2
    6f46:	0d c0       	rjmp	.+26     	; 0x6f62 <fputc+0x30>
    6f48:	2e 81       	ldd	r18, Y+6	; 0x06
    6f4a:	3f 81       	ldd	r19, Y+7	; 0x07
    6f4c:	8c 81       	ldd	r24, Y+4	; 0x04
    6f4e:	9d 81       	ldd	r25, Y+5	; 0x05
    6f50:	28 17       	cp	r18, r24
    6f52:	39 07       	cpc	r19, r25
    6f54:	64 f4       	brge	.+24     	; 0x6f6e <fputc+0x3c>
    6f56:	e8 81       	ld	r30, Y
    6f58:	f9 81       	ldd	r31, Y+1	; 0x01
    6f5a:	01 93       	st	Z+, r16
    6f5c:	f9 83       	std	Y+1, r31	; 0x01
    6f5e:	e8 83       	st	Y, r30
    6f60:	06 c0       	rjmp	.+12     	; 0x6f6e <fputc+0x3c>
    6f62:	e8 85       	ldd	r30, Y+8	; 0x08
    6f64:	f9 85       	ldd	r31, Y+9	; 0x09
    6f66:	80 2f       	mov	r24, r16
    6f68:	09 95       	icall
    6f6a:	89 2b       	or	r24, r25
    6f6c:	31 f4       	brne	.+12     	; 0x6f7a <fputc+0x48>
    6f6e:	8e 81       	ldd	r24, Y+6	; 0x06
    6f70:	9f 81       	ldd	r25, Y+7	; 0x07
    6f72:	01 96       	adiw	r24, 0x01	; 1
    6f74:	9f 83       	std	Y+7, r25	; 0x07
    6f76:	8e 83       	std	Y+6, r24	; 0x06
    6f78:	02 c0       	rjmp	.+4      	; 0x6f7e <fputc+0x4c>
    6f7a:	0f ef       	ldi	r16, 0xFF	; 255
    6f7c:	1f ef       	ldi	r17, 0xFF	; 255
    6f7e:	c8 01       	movw	r24, r16
    6f80:	df 91       	pop	r29
    6f82:	cf 91       	pop	r28
    6f84:	1f 91       	pop	r17
    6f86:	0f 91       	pop	r16
    6f88:	08 95       	ret

00006f8a <printf>:
    6f8a:	a0 e0       	ldi	r26, 0x00	; 0
    6f8c:	b0 e0       	ldi	r27, 0x00	; 0
    6f8e:	ea ec       	ldi	r30, 0xCA	; 202
    6f90:	f7 e3       	ldi	r31, 0x37	; 55
    6f92:	b5 cd       	rjmp	.-1174   	; 0x6afe <__prologue_saves__+0x20>
    6f94:	fe 01       	movw	r30, r28
    6f96:	35 96       	adiw	r30, 0x05	; 5
    6f98:	61 91       	ld	r22, Z+
    6f9a:	71 91       	ld	r23, Z+
    6f9c:	80 91 9b 07 	lds	r24, 0x079B
    6fa0:	90 91 9c 07 	lds	r25, 0x079C
    6fa4:	af 01       	movw	r20, r30
    6fa6:	f2 d9       	rcall	.-3100   	; 0x638c <vfprintf>
    6fa8:	20 96       	adiw	r28, 0x00	; 0
    6faa:	e2 e0       	ldi	r30, 0x02	; 2
    6fac:	c4 cd       	rjmp	.-1144   	; 0x6b36 <__epilogue_restores__+0x20>

00006fae <puts>:
    6fae:	0f 93       	push	r16
    6fb0:	1f 93       	push	r17
    6fb2:	cf 93       	push	r28
    6fb4:	df 93       	push	r29
    6fb6:	8c 01       	movw	r16, r24
    6fb8:	e0 91 9b 07 	lds	r30, 0x079B
    6fbc:	f0 91 9c 07 	lds	r31, 0x079C
    6fc0:	83 81       	ldd	r24, Z+3	; 0x03
    6fc2:	81 ff       	sbrs	r24, 1
    6fc4:	21 c0       	rjmp	.+66     	; 0x7008 <puts+0x5a>
    6fc6:	c0 e0       	ldi	r28, 0x00	; 0
    6fc8:	d0 e0       	ldi	r29, 0x00	; 0
    6fca:	0d c0       	rjmp	.+26     	; 0x6fe6 <puts+0x38>
    6fcc:	e0 91 9b 07 	lds	r30, 0x079B
    6fd0:	f0 91 9c 07 	lds	r31, 0x079C
    6fd4:	20 85       	ldd	r18, Z+8	; 0x08
    6fd6:	31 85       	ldd	r19, Z+9	; 0x09
    6fd8:	bf 01       	movw	r22, r30
    6fda:	f9 01       	movw	r30, r18
    6fdc:	09 95       	icall
    6fde:	89 2b       	or	r24, r25
    6fe0:	11 f0       	breq	.+4      	; 0x6fe6 <puts+0x38>
    6fe2:	cf ef       	ldi	r28, 0xFF	; 255
    6fe4:	df ef       	ldi	r29, 0xFF	; 255
    6fe6:	f8 01       	movw	r30, r16
    6fe8:	81 91       	ld	r24, Z+
    6fea:	8f 01       	movw	r16, r30
    6fec:	88 23       	and	r24, r24
    6fee:	71 f7       	brne	.-36     	; 0x6fcc <puts+0x1e>
    6ff0:	e0 91 9b 07 	lds	r30, 0x079B
    6ff4:	f0 91 9c 07 	lds	r31, 0x079C
    6ff8:	20 85       	ldd	r18, Z+8	; 0x08
    6ffa:	31 85       	ldd	r19, Z+9	; 0x09
    6ffc:	8a e0       	ldi	r24, 0x0A	; 10
    6ffe:	bf 01       	movw	r22, r30
    7000:	f9 01       	movw	r30, r18
    7002:	09 95       	icall
    7004:	89 2b       	or	r24, r25
    7006:	11 f0       	breq	.+4      	; 0x700c <puts+0x5e>
    7008:	cf ef       	ldi	r28, 0xFF	; 255
    700a:	df ef       	ldi	r29, 0xFF	; 255
    700c:	ce 01       	movw	r24, r28
    700e:	df 91       	pop	r29
    7010:	cf 91       	pop	r28
    7012:	1f 91       	pop	r17
    7014:	0f 91       	pop	r16
    7016:	08 95       	ret

00007018 <__ultoa_invert>:
    7018:	fa 01       	movw	r30, r20
    701a:	aa 27       	eor	r26, r26
    701c:	28 30       	cpi	r18, 0x08	; 8
    701e:	51 f1       	breq	.+84     	; 0x7074 <__ultoa_invert+0x5c>
    7020:	20 31       	cpi	r18, 0x10	; 16
    7022:	81 f1       	breq	.+96     	; 0x7084 <__ultoa_invert+0x6c>
    7024:	e8 94       	clt
    7026:	6f 93       	push	r22
    7028:	6e 7f       	andi	r22, 0xFE	; 254
    702a:	6e 5f       	subi	r22, 0xFE	; 254
    702c:	7f 4f       	sbci	r23, 0xFF	; 255
    702e:	8f 4f       	sbci	r24, 0xFF	; 255
    7030:	9f 4f       	sbci	r25, 0xFF	; 255
    7032:	af 4f       	sbci	r26, 0xFF	; 255
    7034:	b1 e0       	ldi	r27, 0x01	; 1
    7036:	3e d0       	rcall	.+124    	; 0x70b4 <__ultoa_invert+0x9c>
    7038:	b4 e0       	ldi	r27, 0x04	; 4
    703a:	3c d0       	rcall	.+120    	; 0x70b4 <__ultoa_invert+0x9c>
    703c:	67 0f       	add	r22, r23
    703e:	78 1f       	adc	r23, r24
    7040:	89 1f       	adc	r24, r25
    7042:	9a 1f       	adc	r25, r26
    7044:	a1 1d       	adc	r26, r1
    7046:	68 0f       	add	r22, r24
    7048:	79 1f       	adc	r23, r25
    704a:	8a 1f       	adc	r24, r26
    704c:	91 1d       	adc	r25, r1
    704e:	a1 1d       	adc	r26, r1
    7050:	6a 0f       	add	r22, r26
    7052:	71 1d       	adc	r23, r1
    7054:	81 1d       	adc	r24, r1
    7056:	91 1d       	adc	r25, r1
    7058:	a1 1d       	adc	r26, r1
    705a:	20 d0       	rcall	.+64     	; 0x709c <__ultoa_invert+0x84>
    705c:	09 f4       	brne	.+2      	; 0x7060 <__ultoa_invert+0x48>
    705e:	68 94       	set
    7060:	3f 91       	pop	r19
    7062:	2a e0       	ldi	r18, 0x0A	; 10
    7064:	26 9f       	mul	r18, r22
    7066:	11 24       	eor	r1, r1
    7068:	30 19       	sub	r19, r0
    706a:	30 5d       	subi	r19, 0xD0	; 208
    706c:	31 93       	st	Z+, r19
    706e:	de f6       	brtc	.-74     	; 0x7026 <__ultoa_invert+0xe>
    7070:	cf 01       	movw	r24, r30
    7072:	08 95       	ret
    7074:	46 2f       	mov	r20, r22
    7076:	47 70       	andi	r20, 0x07	; 7
    7078:	40 5d       	subi	r20, 0xD0	; 208
    707a:	41 93       	st	Z+, r20
    707c:	b3 e0       	ldi	r27, 0x03	; 3
    707e:	0f d0       	rcall	.+30     	; 0x709e <__ultoa_invert+0x86>
    7080:	c9 f7       	brne	.-14     	; 0x7074 <__ultoa_invert+0x5c>
    7082:	f6 cf       	rjmp	.-20     	; 0x7070 <__ultoa_invert+0x58>
    7084:	46 2f       	mov	r20, r22
    7086:	4f 70       	andi	r20, 0x0F	; 15
    7088:	40 5d       	subi	r20, 0xD0	; 208
    708a:	4a 33       	cpi	r20, 0x3A	; 58
    708c:	18 f0       	brcs	.+6      	; 0x7094 <__ultoa_invert+0x7c>
    708e:	49 5d       	subi	r20, 0xD9	; 217
    7090:	31 fd       	sbrc	r19, 1
    7092:	40 52       	subi	r20, 0x20	; 32
    7094:	41 93       	st	Z+, r20
    7096:	02 d0       	rcall	.+4      	; 0x709c <__ultoa_invert+0x84>
    7098:	a9 f7       	brne	.-22     	; 0x7084 <__ultoa_invert+0x6c>
    709a:	ea cf       	rjmp	.-44     	; 0x7070 <__ultoa_invert+0x58>
    709c:	b4 e0       	ldi	r27, 0x04	; 4
    709e:	a6 95       	lsr	r26
    70a0:	97 95       	ror	r25
    70a2:	87 95       	ror	r24
    70a4:	77 95       	ror	r23
    70a6:	67 95       	ror	r22
    70a8:	ba 95       	dec	r27
    70aa:	c9 f7       	brne	.-14     	; 0x709e <__ultoa_invert+0x86>
    70ac:	00 97       	sbiw	r24, 0x00	; 0
    70ae:	61 05       	cpc	r22, r1
    70b0:	71 05       	cpc	r23, r1
    70b2:	08 95       	ret
    70b4:	9b 01       	movw	r18, r22
    70b6:	ac 01       	movw	r20, r24
    70b8:	0a 2e       	mov	r0, r26
    70ba:	06 94       	lsr	r0
    70bc:	57 95       	ror	r21
    70be:	47 95       	ror	r20
    70c0:	37 95       	ror	r19
    70c2:	27 95       	ror	r18
    70c4:	ba 95       	dec	r27
    70c6:	c9 f7       	brne	.-14     	; 0x70ba <__ultoa_invert+0xa2>
    70c8:	62 0f       	add	r22, r18
    70ca:	73 1f       	adc	r23, r19
    70cc:	84 1f       	adc	r24, r20
    70ce:	95 1f       	adc	r25, r21
    70d0:	a0 1d       	adc	r26, r0
    70d2:	08 95       	ret

000070d4 <_exit>:
    70d4:	f8 94       	cli

000070d6 <__stop_program>:
    70d6:	ff cf       	rjmp	.-2      	; 0x70d6 <__stop_program>
