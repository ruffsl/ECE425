
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000036a  00800100  00006cf6  00006d8a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006cf6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003cf  0080046a  0080046a  000070f4  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000070f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000811  00000000  00000000  00007154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001dc0  00000000  00000000  00007965  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000047a  00000000  00000000  00009725  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a4a  00000000  00000000  00009b9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  0000b5ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000dfe  00000000  00000000  0000b93c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012fa  00000000  00000000  0000c73a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 26 23 	jmp	0x464c	; 0x464c <__vector_4>
      14:	0c 94 4f 23 	jmp	0x469e	; 0x469e <__vector_5>
      18:	0c 94 78 23 	jmp	0x46f0	; 0x46f0 <__vector_6>
      1c:	0c 94 a1 23 	jmp	0x4742	; 0x4742 <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 07 22 	jmp	0x440e	; 0x440e <__vector_9>
      28:	0c 94 30 22 	jmp	0x4460	; 0x4460 <__vector_10>
      2c:	0c 94 59 22 	jmp	0x44b2	; 0x44b2 <__vector_11>
      30:	0c 94 d4 22 	jmp	0x45a8	; 0x45a8 <__vector_12>
      34:	0c 94 82 22 	jmp	0x4504	; 0x4504 <__vector_13>
      38:	0c 94 ab 22 	jmp	0x4556	; 0x4556 <__vector_14>
      3c:	0c 94 fd 22 	jmp	0x45fa	; 0x45fa <__vector_15>
      40:	0c 94 8c 21 	jmp	0x4318	; 0x4318 <__vector_16>
      44:	0c 94 b5 21 	jmp	0x436a	; 0x436a <__vector_17>
      48:	0c 94 de 21 	jmp	0x43bc	; 0x43bc <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	f1 1e       	adc	r15, r17
      7e:	f4 1e       	adc	r15, r20
      80:	f7 1e       	adc	r15, r23
      82:	fa 1e       	adc	r15, r26
      84:	03 1f       	adc	r16, r19
      86:	fd 1e       	adc	r15, r29
      88:	00 1f       	adc	r16, r16
      8a:	06 1f       	adc	r16, r22
      8c:	09 1f       	adc	r16, r25
      8e:	0c 1f       	adc	r16, r28
      90:	0f 1f       	adc	r16, r31
      92:	12 1f       	adc	r17, r18
      94:	15 1f       	adc	r17, r21
      96:	18 1f       	adc	r17, r24
      98:	1b 1f       	adc	r17, r27
      9a:	1e 1f       	adc	r17, r30
      9c:	21 1f       	adc	r18, r17
      9e:	24 1f       	adc	r18, r20
      a0:	27 1f       	adc	r18, r23
      a2:	38 1f       	adc	r19, r24
      a4:	3b 1f       	adc	r19, r27
      a6:	3e 1f       	adc	r19, r30
      a8:	41 1f       	adc	r20, r17
      aa:	4a 1f       	adc	r20, r26
      ac:	44 1f       	adc	r20, r20
      ae:	47 1f       	adc	r20, r23
      b0:	4d 1f       	adc	r20, r29
      b2:	50 1f       	adc	r21, r16
      b4:	53 1f       	adc	r21, r19
      b6:	56 1f       	adc	r21, r22
      b8:	59 1f       	adc	r21, r25
      ba:	5c 1f       	adc	r21, r28
      bc:	5f 1f       	adc	r21, r31
      be:	62 1f       	adc	r22, r18
      c0:	65 1f       	adc	r22, r21
      c2:	68 1f       	adc	r22, r24
      c4:	6b 1f       	adc	r22, r27
      c6:	6e 1f       	adc	r22, r30
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e6 ef       	ldi	r30, 0xF6	; 246
     676:	fc e6       	ldi	r31, 0x6C	; 108
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	aa 36       	cpi	r26, 0x6A	; 106
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	18 e0       	ldi	r17, 0x08	; 8
     686:	aa e6       	ldi	r26, 0x6A	; 106
     688:	b4 e0       	ldi	r27, 0x04	; 4
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	a9 33       	cpi	r26, 0x39	; 57
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 5b 19 	call	0x32b6	; 0x32b6 <main>
     698:	0c 94 79 36 	jmp	0x6cf2	; 0x6cf2 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 ca 20 	call	0x4194	; 0x4194 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 9e 20 	call	0x413c	; 0x413c <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 ca 20 	call	0x4194	; 0x4194 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 9e 20 	call	0x413c	; 0x413c <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 ca 20 	call	0x4194	; 0x4194 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 9e 20 	call	0x413c	; 0x413c <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 ca 20 	call	0x4194	; 0x4194 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 9e 20 	call	0x413c	; 0x413c <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 ca 20 	call	0x4194	; 0x4194 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 9e 20 	call	0x413c	; 0x413c <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 ca 20 	call	0x4194	; 0x4194 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 9e 20 	call	0x413c	; 0x413c <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 ca 20 	call	0x4194	; 0x4194 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 9e 20 	call	0x413c	; 0x413c <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 ca 20 	call	0x4194	; 0x4194 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 9e 20 	call	0x413c	; 0x413c <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 ca 20 	call	0x4194	; 0x4194 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 9e 20 	call	0x413c	; 0x413c <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 ca 20 	call	0x4194	; 0x4194 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 9e 20 	call	0x413c	; 0x413c <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 36 21 	call	0x426c	; 0x426c <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 19 19 	call	0x3232	; 0x3232 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 50 19 	call	0x32a0	; 0x32a0 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 19 19 	call	0x3232	; 0x3232 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 50 19 	call	0x32a0	; 0x32a0 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 19 19 	call	0x3232	; 0x3232 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 19 19 	call	0x3232	; 0x3232 <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 50 19 	call	0x32a0	; 0x32a0 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 19 19 	call	0x3232	; 0x3232 <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 50 19 	call	0x32a0	; 0x32a0 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 19 19 	call	0x3232	; 0x3232 <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 fc 18 	call	0x31f8	; 0x31f8 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 07 05 	sts	0x0507, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 07 05 	sts	0x0507, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 a2 1f 	call	0x3f44	; 0x3f44 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 5e 1a 	call	0x34bc	; 0x34bc <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	88 e7       	ldi	r24, 0x78	; 120
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	ab e9       	ldi	r26, 0x9B	; 155
     c56:	b7 e0       	ldi	r27, 0x07	; 7
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	e3 e9       	ldi	r30, 0x93	; 147
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	80 e0       	ldi	r24, 0x00	; 0
     c66:	96 e0       	ldi	r25, 0x06	; 6
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 23 07 	lds	r10, 0x0723
     c9e:	b0 90 24 07 	lds	r11, 0x0724
     ca2:	c0 90 25 07 	lds	r12, 0x0725
     ca6:	d0 90 26 07 	lds	r13, 0x0726
			rtIR_old[i] = rtIR;
     caa:	e0 90 27 07 	lds	r14, 0x0727
     cae:	f0 90 28 07 	lds	r15, 0x0728
     cb2:	00 91 29 07 	lds	r16, 0x0729
     cb6:	10 91 2a 07 	lds	r17, 0x072A
			ftIR_old[i] = ftIR;
     cba:	20 90 80 05 	lds	r2, 0x0580
     cbe:	30 90 81 05 	lds	r3, 0x0581
     cc2:	40 90 82 05 	lds	r4, 0x0582
     cc6:	50 90 83 05 	lds	r5, 0x0583
			bkIR_old[i] = bkIR;
     cca:	20 91 8a 05 	lds	r18, 0x058A
     cce:	30 91 8b 05 	lds	r19, 0x058B
     cd2:	40 91 8c 05 	lds	r20, 0x058C
     cd6:	50 91 8d 05 	lds	r21, 0x058D
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e8 5f       	subi	r30, 0xF8	; 248
     ce2:	fa 4f       	sbci	r31, 0xFA	; 250
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e5 5d       	subi	r30, 0xD5	; 213
     cf0:	f8 4f       	sbci	r31, 0xF8	; 248
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	ed 5d       	subi	r30, 0xDD	; 221
     cfe:	f9 4f       	sbci	r31, 0xF9	; 249
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	e0 57       	subi	r30, 0x70	; 112
     d0c:	fa 4f       	sbci	r31, 0xFA	; 250
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	a0 50       	subi	r26, 0x00	; 0
     e02:	b5 40       	sbci	r27, 0x05	; 5
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 23 07 	lds	r24, 0x0723
     e0c:	90 91 24 07 	lds	r25, 0x0724
     e10:	a0 91 25 07 	lds	r26, 0x0725
     e14:	b0 91 26 07 	lds	r27, 0x0726
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 27 07 	lds	r24, 0x0727
     e28:	90 91 28 07 	lds	r25, 0x0728
     e2c:	a0 91 29 07 	lds	r26, 0x0729
     e30:	b0 91 2a 07 	lds	r27, 0x072A
     e34:	80 93 2b 07 	sts	0x072B, r24
     e38:	90 93 2c 07 	sts	0x072C, r25
     e3c:	a0 93 2d 07 	sts	0x072D, r26
     e40:	b0 93 2e 07 	sts	0x072E, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 80 05 	lds	r24, 0x0580
     e48:	90 91 81 05 	lds	r25, 0x0581
     e4c:	a0 91 82 05 	lds	r26, 0x0582
     e50:	b0 91 83 05 	lds	r27, 0x0583
     e54:	80 93 23 06 	sts	0x0623, r24
     e58:	90 93 24 06 	sts	0x0624, r25
     e5c:	a0 93 25 06 	sts	0x0625, r26
     e60:	b0 93 26 06 	sts	0x0626, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 8a 05 	lds	r24, 0x058A
     e68:	90 91 8b 05 	lds	r25, 0x058B
     e6c:	a0 91 8c 05 	lds	r26, 0x058C
     e70:	b0 91 8d 05 	lds	r27, 0x058D
     e74:	80 93 90 05 	sts	0x0590, r24
     e78:	90 93 91 05 	sts	0x0591, r25
     e7c:	a0 93 92 05 	sts	0x0592, r26
     e80:	b0 93 93 05 	sts	0x0593, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
     e94:	60 93 23 07 	sts	0x0723, r22
     e98:	70 93 24 07 	sts	0x0724, r23
     e9c:	80 93 25 07 	sts	0x0725, r24
     ea0:	90 93 26 07 	sts	0x0726, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
     eb8:	60 93 27 07 	sts	0x0727, r22
     ebc:	70 93 28 07 	sts	0x0728, r23
     ec0:	80 93 29 07 	sts	0x0729, r24
     ec4:	90 93 2a 07 	sts	0x072A, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
     edc:	60 93 80 05 	sts	0x0580, r22
     ee0:	70 93 81 05 	sts	0x0581, r23
     ee4:	80 93 82 05 	sts	0x0582, r24
     ee8:	90 93 83 05 	sts	0x0583, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
     f00:	60 93 8a 05 	sts	0x058A, r22
     f04:	70 93 8b 05 	sts	0x058B, r23
     f08:	80 93 8c 05 	sts	0x058C, r24
     f0c:	90 93 8d 05 	sts	0x058D, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 84 05 	sts	0x0584, r24
     f66:	90 93 85 05 	sts	0x0585, r25
     f6a:	a0 93 86 05 	sts	0x0586, r26
     f6e:	b0 93 87 05 	sts	0x0587, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 84 05 	lds	r18, 0x0584
     f7a:	30 91 85 05 	lds	r19, 0x0585
     f7e:	40 91 86 05 	lds	r20, 0x0586
     f82:	50 91 87 05 	lds	r21, 0x0587
     f86:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 84 05 	sts	0x0584, r22
     f92:	70 93 85 05 	sts	0x0585, r23
     f96:	80 93 86 05 	sts	0x0586, r24
     f9a:	90 93 87 05 	sts	0x0587, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 1f 06 	lds	r18, 0x061F
     fa6:	30 91 20 06 	lds	r19, 0x0620
     faa:	40 91 21 06 	lds	r20, 0x0621
     fae:	50 91 22 06 	lds	r21, 0x0622
     fb2:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__subsf3>
     fb6:	2d ec       	ldi	r18, 0xCD	; 205
     fb8:	3c ec       	ldi	r19, 0xCC	; 204
     fba:	4c ec       	ldi	r20, 0xCC	; 204
     fbc:	5d e3       	ldi	r21, 0x3D	; 61
     fbe:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	a0 97       	sbiw	r28, 0x20	; 32
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	2b 01       	movw	r4, r22
    1060:	3c 01       	movw	r6, r24
    1062:	2d 83       	std	Y+5, r18	; 0x05
    1064:	3e 83       	std	Y+6, r19	; 0x06
    1066:	4f 83       	std	Y+7, r20	; 0x07
    1068:	58 87       	std	Y+8, r21	; 0x08
    106a:	e9 86       	std	Y+9, r14	; 0x09
    106c:	fa 86       	std	Y+10, r15	; 0x0a
    106e:	0b 87       	std	Y+11, r16	; 0x0b
    1070:	1c 87       	std	Y+12, r17	; 0x0c
    1072:	ad 86       	std	Y+13, r10	; 0x0d
    1074:	be 86       	std	Y+14, r11	; 0x0e
    1076:	cf 86       	std	Y+15, r12	; 0x0f
    1078:	d8 8a       	std	Y+16, r13	; 0x10
    107a:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    107c:	33 24       	eor	r3, r3
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <__gesf2>
    108e:	18 16       	cp	r1, r24
    1090:	14 f4       	brge	.+4      	; 0x1096 <move_arc_stnb+0x6c>
    1092:	33 24       	eor	r3, r3
    1094:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1096:	6d 81       	ldd	r22, Y+5	; 0x05
    1098:	7e 81       	ldd	r23, Y+6	; 0x06
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	2c ed       	ldi	r18, 0xDC	; 220
    10a0:	38 eb       	ldi	r19, 0xB8	; 184
    10a2:	48 e0       	ldi	r20, 0x08	; 8
    10a4:	5e e3       	ldi	r21, 0x3E	; 62
    10a6:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    10aa:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fixsfsi>
    10ae:	9b 01       	movw	r18, r22
    10b0:	77 ff       	sbrs	r23, 7
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <move_arc_stnb+0x90>
    10b4:	30 95       	com	r19
    10b6:	21 95       	neg	r18
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	b9 01       	movw	r22, r18
    10bc:	88 27       	eor	r24, r24
    10be:	77 fd       	sbrc	r23, 7
    10c0:	80 95       	com	r24
    10c2:	98 2f       	mov	r25, r24
    10c4:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <__floatsisf>
    10c8:	69 83       	std	Y+1, r22	; 0x01
    10ca:	7a 83       	std	Y+2, r23	; 0x02
    10cc:	8b 83       	std	Y+3, r24	; 0x03
    10ce:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    10d0:	69 85       	ldd	r22, Y+9	; 0x09
    10d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10d8:	2c ed       	ldi	r18, 0xDC	; 220
    10da:	38 eb       	ldi	r19, 0xB8	; 184
    10dc:	48 e0       	ldi	r20, 0x08	; 8
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    10e4:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fixsfsi>
    10e8:	9b 01       	movw	r18, r22
    10ea:	77 ff       	sbrs	r23, 7
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <move_arc_stnb+0xca>
    10ee:	30 95       	com	r19
    10f0:	21 95       	neg	r18
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	b9 01       	movw	r22, r18
    10f6:	88 27       	eor	r24, r24
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	80 95       	com	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <__floatsisf>
    1102:	4b 01       	movw	r8, r22
    1104:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1106:	6d 85       	ldd	r22, Y+13	; 0x0d
    1108:	7e 85       	ldd	r23, Y+14	; 0x0e
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	98 89       	ldd	r25, Y+16	; 0x10
    110e:	2c ed       	ldi	r18, 0xDC	; 220
    1110:	38 eb       	ldi	r19, 0xB8	; 184
    1112:	48 e0       	ldi	r20, 0x08	; 8
    1114:	5e e3       	ldi	r21, 0x3E	; 62
    1116:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    111a:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fixsfsi>
    111e:	9b 01       	movw	r18, r22
    1120:	77 ff       	sbrs	r23, 7
    1122:	03 c0       	rjmp	.+6      	; 0x112a <move_arc_stnb+0x100>
    1124:	30 95       	com	r19
    1126:	21 95       	neg	r18
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	b9 01       	movw	r22, r18
    112c:	88 27       	eor	r24, r24
    112e:	77 fd       	sbrc	r23, 7
    1130:	80 95       	com	r24
    1132:	98 2f       	mov	r25, r24
    1134:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <__floatsisf>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	5f e4       	ldi	r21, 0x4F	; 79
    1148:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    114c:	88 23       	and	r24, r24
    114e:	a1 f5       	brne	.+104    	; 0x11b8 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1150:	69 81       	ldd	r22, Y+1	; 0x01
    1152:	7a 81       	ldd	r23, Y+2	; 0x02
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    115c:	2b 01       	movw	r4, r22
    115e:	3c 01       	movw	r6, r24
    1160:	c5 01       	movw	r24, r10
    1162:	b4 01       	movw	r22, r8
    1164:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1168:	4b 01       	movw	r8, r22
    116a:	5c 01       	movw	r10, r24
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	2d b7       	in	r18, 0x3d	; 61
    117a:	3e b7       	in	r19, 0x3e	; 62
    117c:	29 50       	subi	r18, 0x09	; 9
    117e:	30 40       	sbci	r19, 0x00	; 0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	3e bf       	out	0x3e, r19	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	2d bf       	out	0x3d, r18	; 61
    118a:	ed b7       	in	r30, 0x3d	; 61
    118c:	fe b7       	in	r31, 0x3e	; 62
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	ad b7       	in	r26, 0x3d	; 61
    1192:	be b7       	in	r27, 0x3e	; 62
    1194:	12 96       	adiw	r26, 0x02	; 2
    1196:	5c 92       	st	X, r5
    1198:	4e 92       	st	-X, r4
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	93 82       	std	Z+3, r9	; 0x03
    119e:	82 82       	std	Z+2, r8	; 0x02
    11a0:	75 83       	std	Z+5, r23	; 0x05
    11a2:	64 83       	std	Z+4, r22	; 0x04
    11a4:	26 82       	std	Z+6, r2	; 0x06
    11a6:	10 86       	std	Z+8, r1	; 0x08
    11a8:	17 82       	std	Z+7, r1	; 0x07
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	43 2d       	mov	r20, r3
    11b0:	92 01       	movw	r18, r4
    11b2:	84 01       	movw	r16, r8
    11b4:	76 01       	movw	r14, r12
    11b6:	c1 c1       	rjmp	.+898    	; 0x153a <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    11b8:	c3 01       	movw	r24, r6
    11ba:	b2 01       	movw	r22, r4
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	e9 f5       	brne	.+122    	; 0x1246 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    11d8:	3b 01       	movw	r6, r22
    11da:	c5 01       	movw	r24, r10
    11dc:	b4 01       	movw	r22, r8
    11de:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    11e2:	8b 01       	movw	r16, r22
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    11ec:	7b 01       	movw	r14, r22
    11ee:	2d b7       	in	r18, 0x3d	; 61
    11f0:	3e b7       	in	r19, 0x3e	; 62
    11f2:	29 50       	subi	r18, 0x09	; 9
    11f4:	30 40       	sbci	r19, 0x00	; 0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	3e bf       	out	0x3e, r19	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	2d bf       	out	0x3d, r18	; 61
    1200:	ed b7       	in	r30, 0x3d	; 61
    1202:	fe b7       	in	r31, 0x3e	; 62
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	33 20       	and	r3, r3
    120a:	09 f4       	brne	.+2      	; 0x120e <move_arc_stnb+0x1e4>
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	71 82       	std	Z+1, r7	; 0x01
    1210:	60 82       	st	Z, r6
    1212:	13 83       	std	Z+3, r17	; 0x03
    1214:	02 83       	std	Z+2, r16	; 0x02
    1216:	f5 82       	std	Z+5, r15	; 0x05
    1218:	e4 82       	std	Z+4, r14	; 0x04
    121a:	26 82       	std	Z+6, r2	; 0x06
    121c:	10 86       	std	Z+8, r1	; 0x08
    121e:	17 82       	std	Z+7, r1	; 0x07
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	93 01       	movw	r18, r6
    1226:	c2 2c       	mov	r12, r2
    1228:	aa 24       	eor	r10, r10
    122a:	bb 24       	eor	r11, r11
    122c:	83 2c       	mov	r8, r3
    122e:	0e 94 45 1c 	call	0x388a	; 0x388a <STEPPER_move>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	ad b7       	in	r26, 0x3d	; 61
    1236:	be b7       	in	r27, 0x3e	; 62
    1238:	19 96       	adiw	r26, 0x09	; 9
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	be bf       	out	0x3e, r27	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	ad bf       	out	0x3d, r26	; 61
    1244:	89 c1       	rjmp	.+786    	; 0x1558 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1246:	c3 01       	movw	r24, r6
    1248:	b2 01       	movw	r22, r4
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <__gesf2>
    1256:	18 16       	cp	r1, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <move_arc_stnb+0x232>
    125a:	b1 c0       	rjmp	.+354    	; 0x13be <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    125c:	66 e6       	ldi	r22, 0x66	; 102
    125e:	76 e6       	ldi	r23, 0x66	; 102
    1260:	8a ea       	ldi	r24, 0xAA	; 170
    1262:	91 ec       	ldi	r25, 0xC1	; 193
    1264:	a3 01       	movw	r20, r6
    1266:	92 01       	movw	r18, r4
    1268:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    127c:	66 e6       	ldi	r22, 0x66	; 102
    127e:	76 e6       	ldi	r23, 0x66	; 102
    1280:	8a ea       	ldi	r24, 0xAA	; 170
    1282:	91 e4       	ldi	r25, 0x41	; 65
    1284:	a3 01       	movw	r20, r6
    1286:	92 01       	movw	r18, r4
    1288:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
    1298:	5b 01       	movw	r10, r22
    129a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    129c:	ed b7       	in	r30, 0x3d	; 61
    129e:	fe b7       	in	r31, 0x3e	; 62
    12a0:	39 97       	sbiw	r30, 0x09	; 9
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	fe bf       	out	0x3e, r31	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	ed bf       	out	0x3d, r30	; 61
    12ac:	8d b6       	in	r8, 0x3d	; 61
    12ae:	9e b6       	in	r9, 0x3e	; 62
    12b0:	08 94       	sec
    12b2:	81 1c       	adc	r8, r1
    12b4:	91 1c       	adc	r9, r1
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	a8 01       	movw	r20, r16
    12c0:	97 01       	movw	r18, r14
    12c2:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    12c6:	2c ed       	ldi	r18, 0xDC	; 220
    12c8:	38 eb       	ldi	r19, 0xB8	; 184
    12ca:	48 e0       	ldi	r20, 0x08	; 8
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    12d2:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    12d6:	69 8b       	std	Y+17, r22	; 0x11
    12d8:	7a 8b       	std	Y+18, r23	; 0x12
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	69 85       	ldd	r22, Y+9	; 0x09
    12e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e6:	a8 01       	movw	r20, r16
    12e8:	97 01       	movw	r18, r14
    12ea:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    12ee:	2c ed       	ldi	r18, 0xDC	; 220
    12f0:	38 eb       	ldi	r19, 0xB8	; 184
    12f2:	48 e0       	ldi	r20, 0x08	; 8
    12f4:	5e e3       	ldi	r21, 0x3E	; 62
    12f6:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    12fa:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    12fe:	6d 8b       	std	Y+21, r22	; 0x15
    1300:	7e 8b       	std	Y+22, r23	; 0x16
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	98 8f       	std	Y+24, r25	; 0x18
    1306:	6d 85       	ldd	r22, Y+13	; 0x0d
    1308:	7e 85       	ldd	r23, Y+14	; 0x0e
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
    130c:	98 89       	ldd	r25, Y+16	; 0x10
    130e:	a8 01       	movw	r20, r16
    1310:	97 01       	movw	r18, r14
    1312:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    1316:	2c ed       	ldi	r18, 0xDC	; 220
    1318:	38 eb       	ldi	r19, 0xB8	; 184
    131a:	48 e0       	ldi	r20, 0x08	; 8
    131c:	5e e3       	ldi	r21, 0x3E	; 62
    131e:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1322:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1326:	2b 01       	movw	r4, r22
    1328:	3c 01       	movw	r6, r24
    132a:	6d 81       	ldd	r22, Y+5	; 0x05
    132c:	7e 81       	ldd	r23, Y+6	; 0x06
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	a6 01       	movw	r20, r12
    1334:	95 01       	movw	r18, r10
    1336:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    133a:	2c ed       	ldi	r18, 0xDC	; 220
    133c:	38 eb       	ldi	r19, 0xB8	; 184
    133e:	48 e0       	ldi	r20, 0x08	; 8
    1340:	5e e3       	ldi	r21, 0x3E	; 62
    1342:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1346:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    134a:	d4 01       	movw	r26, r8
    134c:	6d 93       	st	X+, r22
    134e:	7c 93       	st	X, r23
    1350:	69 85       	ldd	r22, Y+9	; 0x09
    1352:	7a 85       	ldd	r23, Y+10	; 0x0a
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9c 85       	ldd	r25, Y+12	; 0x0c
    1358:	a6 01       	movw	r20, r12
    135a:	95 01       	movw	r18, r10
    135c:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    1360:	2c ed       	ldi	r18, 0xDC	; 220
    1362:	38 eb       	ldi	r19, 0xB8	; 184
    1364:	48 e0       	ldi	r20, 0x08	; 8
    1366:	5e e3       	ldi	r21, 0x3E	; 62
    1368:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    136c:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1370:	f4 01       	movw	r30, r8
    1372:	73 83       	std	Z+3, r23	; 0x03
    1374:	62 83       	std	Z+2, r22	; 0x02
    1376:	6d 85       	ldd	r22, Y+13	; 0x0d
    1378:	7e 85       	ldd	r23, Y+14	; 0x0e
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	98 89       	ldd	r25, Y+16	; 0x10
    137e:	a6 01       	movw	r20, r12
    1380:	95 01       	movw	r18, r10
    1382:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    1386:	2c ed       	ldi	r18, 0xDC	; 220
    1388:	38 eb       	ldi	r19, 0xB8	; 184
    138a:	48 e0       	ldi	r20, 0x08	; 8
    138c:	5e e3       	ldi	r21, 0x3E	; 62
    138e:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1392:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1396:	d4 01       	movw	r26, r8
    1398:	15 96       	adiw	r26, 0x05	; 5
    139a:	7c 93       	st	X, r23
    139c:	6e 93       	st	-X, r22
    139e:	14 97       	sbiw	r26, 0x04	; 4
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2c 92       	st	X, r2
    13a4:	16 97       	sbiw	r26, 0x06	; 6
    13a6:	18 96       	adiw	r26, 0x08	; 8
    13a8:	1c 92       	st	X, r1
    13aa:	1e 92       	st	-X, r1
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	43 2d       	mov	r20, r3
    13b4:	29 89       	ldd	r18, Y+17	; 0x11
    13b6:	3a 89       	ldd	r19, Y+18	; 0x12
    13b8:	0d 89       	ldd	r16, Y+21	; 0x15
    13ba:	1e 89       	ldd	r17, Y+22	; 0x16
    13bc:	bd c0       	rjmp	.+378    	; 0x1538 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    13be:	c3 01       	movw	r24, r6
    13c0:	b2 01       	movw	r22, r4
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    13ce:	87 fd       	sbrc	r24, 7
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <move_arc_stnb+0x3ac>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	c1 c0       	rjmp	.+386    	; 0x1558 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    13d6:	66 e6       	ldi	r22, 0x66	; 102
    13d8:	76 e6       	ldi	r23, 0x66	; 102
    13da:	8a ea       	ldi	r24, 0xAA	; 170
    13dc:	91 e4       	ldi	r25, 0x41	; 65
    13de:	a3 01       	movw	r20, r6
    13e0:	92 01       	movw	r18, r4
    13e2:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    13f6:	66 e6       	ldi	r22, 0x66	; 102
    13f8:	76 e6       	ldi	r23, 0x66	; 102
    13fa:	8a ea       	ldi	r24, 0xAA	; 170
    13fc:	91 ec       	ldi	r25, 0xC1	; 193
    13fe:	a3 01       	movw	r20, r6
    1400:	92 01       	movw	r18, r4
    1402:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
    1412:	5b 01       	movw	r10, r22
    1414:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1416:	2d b7       	in	r18, 0x3d	; 61
    1418:	3e b7       	in	r19, 0x3e	; 62
    141a:	29 50       	subi	r18, 0x09	; 9
    141c:	30 40       	sbci	r19, 0x00	; 0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	3e bf       	out	0x3e, r19	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	2d bf       	out	0x3d, r18	; 61
    1428:	8d b6       	in	r8, 0x3d	; 61
    142a:	9e b6       	in	r9, 0x3e	; 62
    142c:	08 94       	sec
    142e:	81 1c       	adc	r8, r1
    1430:	91 1c       	adc	r9, r1
    1432:	6d 81       	ldd	r22, Y+5	; 0x05
    1434:	7e 81       	ldd	r23, Y+6	; 0x06
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	a8 01       	movw	r20, r16
    143c:	97 01       	movw	r18, r14
    143e:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    1442:	2c ed       	ldi	r18, 0xDC	; 220
    1444:	38 eb       	ldi	r19, 0xB8	; 184
    1446:	48 e0       	ldi	r20, 0x08	; 8
    1448:	5e e3       	ldi	r21, 0x3E	; 62
    144a:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    144e:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1452:	69 8f       	std	Y+25, r22	; 0x19
    1454:	7a 8f       	std	Y+26, r23	; 0x1a
    1456:	8b 8f       	std	Y+27, r24	; 0x1b
    1458:	9c 8f       	std	Y+28, r25	; 0x1c
    145a:	69 85       	ldd	r22, Y+9	; 0x09
    145c:	7a 85       	ldd	r23, Y+10	; 0x0a
    145e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1460:	9c 85       	ldd	r25, Y+12	; 0x0c
    1462:	a8 01       	movw	r20, r16
    1464:	97 01       	movw	r18, r14
    1466:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    146a:	2c ed       	ldi	r18, 0xDC	; 220
    146c:	38 eb       	ldi	r19, 0xB8	; 184
    146e:	48 e0       	ldi	r20, 0x08	; 8
    1470:	5e e3       	ldi	r21, 0x3E	; 62
    1472:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1476:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    147a:	6d 8f       	std	Y+29, r22	; 0x1d
    147c:	7e 8f       	std	Y+30, r23	; 0x1e
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
    1480:	98 a3       	std	Y+32, r25	; 0x20
    1482:	6d 85       	ldd	r22, Y+13	; 0x0d
    1484:	7e 85       	ldd	r23, Y+14	; 0x0e
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	98 89       	ldd	r25, Y+16	; 0x10
    148a:	a8 01       	movw	r20, r16
    148c:	97 01       	movw	r18, r14
    148e:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    1492:	2c ed       	ldi	r18, 0xDC	; 220
    1494:	38 eb       	ldi	r19, 0xB8	; 184
    1496:	48 e0       	ldi	r20, 0x08	; 8
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    149e:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    14a2:	2b 01       	movw	r4, r22
    14a4:	3c 01       	movw	r6, r24
    14a6:	6d 81       	ldd	r22, Y+5	; 0x05
    14a8:	7e 81       	ldd	r23, Y+6	; 0x06
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	a6 01       	movw	r20, r12
    14b0:	95 01       	movw	r18, r10
    14b2:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    14b6:	2c ed       	ldi	r18, 0xDC	; 220
    14b8:	38 eb       	ldi	r19, 0xB8	; 184
    14ba:	48 e0       	ldi	r20, 0x08	; 8
    14bc:	5e e3       	ldi	r21, 0x3E	; 62
    14be:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    14c2:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    14c6:	d4 01       	movw	r26, r8
    14c8:	6d 93       	st	X+, r22
    14ca:	7c 93       	st	X, r23
    14cc:	69 85       	ldd	r22, Y+9	; 0x09
    14ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    14d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d4:	a6 01       	movw	r20, r12
    14d6:	95 01       	movw	r18, r10
    14d8:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    14dc:	2c ed       	ldi	r18, 0xDC	; 220
    14de:	38 eb       	ldi	r19, 0xB8	; 184
    14e0:	48 e0       	ldi	r20, 0x08	; 8
    14e2:	5e e3       	ldi	r21, 0x3E	; 62
    14e4:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    14e8:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    14ec:	f4 01       	movw	r30, r8
    14ee:	73 83       	std	Z+3, r23	; 0x03
    14f0:	62 83       	std	Z+2, r22	; 0x02
    14f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    14f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    14f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f8:	98 89       	ldd	r25, Y+16	; 0x10
    14fa:	a6 01       	movw	r20, r12
    14fc:	95 01       	movw	r18, r10
    14fe:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    1502:	2c ed       	ldi	r18, 0xDC	; 220
    1504:	38 eb       	ldi	r19, 0xB8	; 184
    1506:	48 e0       	ldi	r20, 0x08	; 8
    1508:	5e e3       	ldi	r21, 0x3E	; 62
    150a:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    150e:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1512:	d4 01       	movw	r26, r8
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	7c 93       	st	X, r23
    1518:	6e 93       	st	-X, r22
    151a:	14 97       	sbiw	r26, 0x04	; 4
    151c:	16 96       	adiw	r26, 0x06	; 6
    151e:	2c 92       	st	X, r2
    1520:	16 97       	sbiw	r26, 0x06	; 6
    1522:	18 96       	adiw	r26, 0x08	; 8
    1524:	1c 92       	st	X, r1
    1526:	1e 92       	st	-X, r1
    1528:	17 97       	sbiw	r26, 0x07	; 7
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	43 2d       	mov	r20, r3
    1530:	29 8d       	ldd	r18, Y+25	; 0x19
    1532:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1534:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1536:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1538:	72 01       	movw	r14, r4
    153a:	c2 2c       	mov	r12, r2
    153c:	aa 24       	eor	r10, r10
    153e:	bb 24       	eor	r11, r11
    1540:	83 2c       	mov	r8, r3
    1542:	0e 94 45 1c 	call	0x388a	; 0x388a <STEPPER_move>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	ed b7       	in	r30, 0x3d	; 61
    154a:	fe b7       	in	r31, 0x3e	; 62
    154c:	39 96       	adiw	r30, 0x09	; 9
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	fe bf       	out	0x3e, r31	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1558:	a0 96       	adiw	r28, 0x20	; 32
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    158a:	2f 92       	push	r2
    158c:	3f 92       	push	r3
    158e:	4f 92       	push	r4
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	a0 97       	sbiw	r28, 0x20	; 32
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	2b 01       	movw	r4, r22
    15c0:	3c 01       	movw	r6, r24
    15c2:	2d 83       	std	Y+5, r18	; 0x05
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	4f 83       	std	Y+7, r20	; 0x07
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	e9 86       	std	Y+9, r14	; 0x09
    15cc:	fa 86       	std	Y+10, r15	; 0x0a
    15ce:	0b 87       	std	Y+11, r16	; 0x0b
    15d0:	1c 87       	std	Y+12, r17	; 0x0c
    15d2:	ad 86       	std	Y+13, r10	; 0x0d
    15d4:	be 86       	std	Y+14, r11	; 0x0e
    15d6:	cf 86       	std	Y+15, r12	; 0x0f
    15d8:	d8 8a       	std	Y+16, r13	; 0x10
    15da:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    15dc:	33 24       	eor	r3, r3
    15de:	ca 01       	movw	r24, r20
    15e0:	b9 01       	movw	r22, r18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	14 f4       	brge	.+4      	; 0x15f6 <move_arc_stwt+0x6c>
    15f2:	33 24       	eor	r3, r3
    15f4:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	2c ed       	ldi	r18, 0xDC	; 220
    1600:	38 eb       	ldi	r19, 0xB8	; 184
    1602:	48 e0       	ldi	r20, 0x08	; 8
    1604:	5e e3       	ldi	r21, 0x3E	; 62
    1606:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    160a:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fixsfsi>
    160e:	9b 01       	movw	r18, r22
    1610:	77 ff       	sbrs	r23, 7
    1612:	03 c0       	rjmp	.+6      	; 0x161a <move_arc_stwt+0x90>
    1614:	30 95       	com	r19
    1616:	21 95       	neg	r18
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	b9 01       	movw	r22, r18
    161c:	88 27       	eor	r24, r24
    161e:	77 fd       	sbrc	r23, 7
    1620:	80 95       	com	r24
    1622:	98 2f       	mov	r25, r24
    1624:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <__floatsisf>
    1628:	69 83       	std	Y+1, r22	; 0x01
    162a:	7a 83       	std	Y+2, r23	; 0x02
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1630:	69 85       	ldd	r22, Y+9	; 0x09
    1632:	7a 85       	ldd	r23, Y+10	; 0x0a
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	2c ed       	ldi	r18, 0xDC	; 220
    163a:	38 eb       	ldi	r19, 0xB8	; 184
    163c:	48 e0       	ldi	r20, 0x08	; 8
    163e:	5e e3       	ldi	r21, 0x3E	; 62
    1640:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1644:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fixsfsi>
    1648:	9b 01       	movw	r18, r22
    164a:	77 ff       	sbrs	r23, 7
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <move_arc_stwt+0xca>
    164e:	30 95       	com	r19
    1650:	21 95       	neg	r18
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	b9 01       	movw	r22, r18
    1656:	88 27       	eor	r24, r24
    1658:	77 fd       	sbrc	r23, 7
    165a:	80 95       	com	r24
    165c:	98 2f       	mov	r25, r24
    165e:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <__floatsisf>
    1662:	4b 01       	movw	r8, r22
    1664:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1666:	6d 85       	ldd	r22, Y+13	; 0x0d
    1668:	7e 85       	ldd	r23, Y+14	; 0x0e
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	2c ed       	ldi	r18, 0xDC	; 220
    1670:	38 eb       	ldi	r19, 0xB8	; 184
    1672:	48 e0       	ldi	r20, 0x08	; 8
    1674:	5e e3       	ldi	r21, 0x3E	; 62
    1676:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    167a:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fixsfsi>
    167e:	9b 01       	movw	r18, r22
    1680:	77 ff       	sbrs	r23, 7
    1682:	03 c0       	rjmp	.+6      	; 0x168a <move_arc_stwt+0x100>
    1684:	30 95       	com	r19
    1686:	21 95       	neg	r18
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	b9 01       	movw	r22, r18
    168c:	88 27       	eor	r24, r24
    168e:	77 fd       	sbrc	r23, 7
    1690:	80 95       	com	r24
    1692:	98 2f       	mov	r25, r24
    1694:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <__floatsisf>
    1698:	6b 01       	movw	r12, r22
    169a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    169c:	c3 01       	movw	r24, r6
    169e:	b2 01       	movw	r22, r4
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	5f e4       	ldi	r21, 0x4F	; 79
    16a8:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	a1 f5       	brne	.+104    	; 0x1718 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    16b0:	69 81       	ldd	r22, Y+1	; 0x01
    16b2:	7a 81       	ldd	r23, Y+2	; 0x02
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    16bc:	2b 01       	movw	r4, r22
    16be:	3c 01       	movw	r6, r24
    16c0:	c5 01       	movw	r24, r10
    16c2:	b4 01       	movw	r22, r8
    16c4:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    16c8:	4b 01       	movw	r8, r22
    16ca:	5c 01       	movw	r10, r24
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    16d4:	6b 01       	movw	r12, r22
    16d6:	7c 01       	movw	r14, r24
    16d8:	2d b7       	in	r18, 0x3d	; 61
    16da:	3e b7       	in	r19, 0x3e	; 62
    16dc:	29 50       	subi	r18, 0x09	; 9
    16de:	30 40       	sbci	r19, 0x00	; 0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	3e bf       	out	0x3e, r19	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	2d bf       	out	0x3d, r18	; 61
    16ea:	ed b7       	in	r30, 0x3d	; 61
    16ec:	fe b7       	in	r31, 0x3e	; 62
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	ad b7       	in	r26, 0x3d	; 61
    16f2:	be b7       	in	r27, 0x3e	; 62
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	5c 92       	st	X, r5
    16f8:	4e 92       	st	-X, r4
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	93 82       	std	Z+3, r9	; 0x03
    16fe:	82 82       	std	Z+2, r8	; 0x02
    1700:	75 83       	std	Z+5, r23	; 0x05
    1702:	64 83       	std	Z+4, r22	; 0x04
    1704:	26 82       	std	Z+6, r2	; 0x06
    1706:	10 86       	std	Z+8, r1	; 0x08
    1708:	17 82       	std	Z+7, r1	; 0x07
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	43 2d       	mov	r20, r3
    1710:	92 01       	movw	r18, r4
    1712:	84 01       	movw	r16, r8
    1714:	76 01       	movw	r14, r12
    1716:	c1 c1       	rjmp	.+898    	; 0x1a9a <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1718:	c3 01       	movw	r24, r6
    171a:	b2 01       	movw	r22, r4
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	e9 f5       	brne	.+122    	; 0x17a6 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    172c:	69 81       	ldd	r22, Y+1	; 0x01
    172e:	7a 81       	ldd	r23, Y+2	; 0x02
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1738:	3b 01       	movw	r6, r22
    173a:	c5 01       	movw	r24, r10
    173c:	b4 01       	movw	r22, r8
    173e:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1742:	8b 01       	movw	r16, r22
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    174c:	7b 01       	movw	r14, r22
    174e:	2d b7       	in	r18, 0x3d	; 61
    1750:	3e b7       	in	r19, 0x3e	; 62
    1752:	29 50       	subi	r18, 0x09	; 9
    1754:	30 40       	sbci	r19, 0x00	; 0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	3e bf       	out	0x3e, r19	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	2d bf       	out	0x3d, r18	; 61
    1760:	ed b7       	in	r30, 0x3d	; 61
    1762:	fe b7       	in	r31, 0x3e	; 62
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	33 20       	and	r3, r3
    176a:	09 f4       	brne	.+2      	; 0x176e <move_arc_stwt+0x1e4>
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	71 82       	std	Z+1, r7	; 0x01
    1770:	60 82       	st	Z, r6
    1772:	13 83       	std	Z+3, r17	; 0x03
    1774:	02 83       	std	Z+2, r16	; 0x02
    1776:	f5 82       	std	Z+5, r15	; 0x05
    1778:	e4 82       	std	Z+4, r14	; 0x04
    177a:	26 82       	std	Z+6, r2	; 0x06
    177c:	10 86       	std	Z+8, r1	; 0x08
    177e:	17 82       	std	Z+7, r1	; 0x07
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	93 01       	movw	r18, r6
    1786:	c2 2c       	mov	r12, r2
    1788:	aa 24       	eor	r10, r10
    178a:	bb 24       	eor	r11, r11
    178c:	83 2c       	mov	r8, r3
    178e:	0e 94 45 1c 	call	0x388a	; 0x388a <STEPPER_move>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	ad b7       	in	r26, 0x3d	; 61
    1796:	be b7       	in	r27, 0x3e	; 62
    1798:	19 96       	adiw	r26, 0x09	; 9
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	be bf       	out	0x3e, r27	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	ad bf       	out	0x3d, r26	; 61
    17a4:	89 c1       	rjmp	.+786    	; 0x1ab8 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <__gesf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <move_arc_stwt+0x232>
    17ba:	b1 c0       	rjmp	.+354    	; 0x191e <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    17bc:	66 e6       	ldi	r22, 0x66	; 102
    17be:	76 e6       	ldi	r23, 0x66	; 102
    17c0:	8a ea       	ldi	r24, 0xAA	; 170
    17c2:	91 ec       	ldi	r25, 0xC1	; 193
    17c4:	a3 01       	movw	r20, r6
    17c6:	92 01       	movw	r18, r4
    17c8:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
    17d8:	7b 01       	movw	r14, r22
    17da:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    17dc:	66 e6       	ldi	r22, 0x66	; 102
    17de:	76 e6       	ldi	r23, 0x66	; 102
    17e0:	8a ea       	ldi	r24, 0xAA	; 170
    17e2:	91 e4       	ldi	r25, 0x41	; 65
    17e4:	a3 01       	movw	r20, r6
    17e6:	92 01       	movw	r18, r4
    17e8:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
    17f8:	5b 01       	movw	r10, r22
    17fa:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    17fc:	ed b7       	in	r30, 0x3d	; 61
    17fe:	fe b7       	in	r31, 0x3e	; 62
    1800:	39 97       	sbiw	r30, 0x09	; 9
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	fe bf       	out	0x3e, r31	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	ed bf       	out	0x3d, r30	; 61
    180c:	8d b6       	in	r8, 0x3d	; 61
    180e:	9e b6       	in	r9, 0x3e	; 62
    1810:	08 94       	sec
    1812:	81 1c       	adc	r8, r1
    1814:	91 1c       	adc	r9, r1
    1816:	6d 81       	ldd	r22, Y+5	; 0x05
    1818:	7e 81       	ldd	r23, Y+6	; 0x06
    181a:	8f 81       	ldd	r24, Y+7	; 0x07
    181c:	98 85       	ldd	r25, Y+8	; 0x08
    181e:	a8 01       	movw	r20, r16
    1820:	97 01       	movw	r18, r14
    1822:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    1826:	2c ed       	ldi	r18, 0xDC	; 220
    1828:	38 eb       	ldi	r19, 0xB8	; 184
    182a:	48 e0       	ldi	r20, 0x08	; 8
    182c:	5e e3       	ldi	r21, 0x3E	; 62
    182e:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1832:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1836:	69 8b       	std	Y+17, r22	; 0x11
    1838:	7a 8b       	std	Y+18, r23	; 0x12
    183a:	8b 8b       	std	Y+19, r24	; 0x13
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	69 85       	ldd	r22, Y+9	; 0x09
    1840:	7a 85       	ldd	r23, Y+10	; 0x0a
    1842:	8b 85       	ldd	r24, Y+11	; 0x0b
    1844:	9c 85       	ldd	r25, Y+12	; 0x0c
    1846:	a8 01       	movw	r20, r16
    1848:	97 01       	movw	r18, r14
    184a:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    184e:	2c ed       	ldi	r18, 0xDC	; 220
    1850:	38 eb       	ldi	r19, 0xB8	; 184
    1852:	48 e0       	ldi	r20, 0x08	; 8
    1854:	5e e3       	ldi	r21, 0x3E	; 62
    1856:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    185a:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    185e:	6d 8b       	std	Y+21, r22	; 0x15
    1860:	7e 8b       	std	Y+22, r23	; 0x16
    1862:	8f 8b       	std	Y+23, r24	; 0x17
    1864:	98 8f       	std	Y+24, r25	; 0x18
    1866:	6d 85       	ldd	r22, Y+13	; 0x0d
    1868:	7e 85       	ldd	r23, Y+14	; 0x0e
    186a:	8f 85       	ldd	r24, Y+15	; 0x0f
    186c:	98 89       	ldd	r25, Y+16	; 0x10
    186e:	a8 01       	movw	r20, r16
    1870:	97 01       	movw	r18, r14
    1872:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    1876:	2c ed       	ldi	r18, 0xDC	; 220
    1878:	38 eb       	ldi	r19, 0xB8	; 184
    187a:	48 e0       	ldi	r20, 0x08	; 8
    187c:	5e e3       	ldi	r21, 0x3E	; 62
    187e:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1882:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1886:	2b 01       	movw	r4, r22
    1888:	3c 01       	movw	r6, r24
    188a:	6d 81       	ldd	r22, Y+5	; 0x05
    188c:	7e 81       	ldd	r23, Y+6	; 0x06
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	a6 01       	movw	r20, r12
    1894:	95 01       	movw	r18, r10
    1896:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    189a:	2c ed       	ldi	r18, 0xDC	; 220
    189c:	38 eb       	ldi	r19, 0xB8	; 184
    189e:	48 e0       	ldi	r20, 0x08	; 8
    18a0:	5e e3       	ldi	r21, 0x3E	; 62
    18a2:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    18a6:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    18aa:	d4 01       	movw	r26, r8
    18ac:	6d 93       	st	X+, r22
    18ae:	7c 93       	st	X, r23
    18b0:	69 85       	ldd	r22, Y+9	; 0x09
    18b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    18b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b8:	a6 01       	movw	r20, r12
    18ba:	95 01       	movw	r18, r10
    18bc:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    18c0:	2c ed       	ldi	r18, 0xDC	; 220
    18c2:	38 eb       	ldi	r19, 0xB8	; 184
    18c4:	48 e0       	ldi	r20, 0x08	; 8
    18c6:	5e e3       	ldi	r21, 0x3E	; 62
    18c8:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    18cc:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    18d0:	f4 01       	movw	r30, r8
    18d2:	73 83       	std	Z+3, r23	; 0x03
    18d4:	62 83       	std	Z+2, r22	; 0x02
    18d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    18d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	98 89       	ldd	r25, Y+16	; 0x10
    18de:	a6 01       	movw	r20, r12
    18e0:	95 01       	movw	r18, r10
    18e2:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    18e6:	2c ed       	ldi	r18, 0xDC	; 220
    18e8:	38 eb       	ldi	r19, 0xB8	; 184
    18ea:	48 e0       	ldi	r20, 0x08	; 8
    18ec:	5e e3       	ldi	r21, 0x3E	; 62
    18ee:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    18f2:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    18f6:	d4 01       	movw	r26, r8
    18f8:	15 96       	adiw	r26, 0x05	; 5
    18fa:	7c 93       	st	X, r23
    18fc:	6e 93       	st	-X, r22
    18fe:	14 97       	sbiw	r26, 0x04	; 4
    1900:	16 96       	adiw	r26, 0x06	; 6
    1902:	2c 92       	st	X, r2
    1904:	16 97       	sbiw	r26, 0x06	; 6
    1906:	18 96       	adiw	r26, 0x08	; 8
    1908:	1c 92       	st	X, r1
    190a:	1e 92       	st	-X, r1
    190c:	17 97       	sbiw	r26, 0x07	; 7
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	43 2d       	mov	r20, r3
    1914:	29 89       	ldd	r18, Y+17	; 0x11
    1916:	3a 89       	ldd	r19, Y+18	; 0x12
    1918:	0d 89       	ldd	r16, Y+21	; 0x15
    191a:	1e 89       	ldd	r17, Y+22	; 0x16
    191c:	bd c0       	rjmp	.+378    	; 0x1a98 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    191e:	c3 01       	movw	r24, r6
    1920:	b2 01       	movw	r22, r4
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    192e:	87 fd       	sbrc	r24, 7
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <move_arc_stwt+0x3ac>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	c1 c0       	rjmp	.+386    	; 0x1ab8 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1936:	66 e6       	ldi	r22, 0x66	; 102
    1938:	76 e6       	ldi	r23, 0x66	; 102
    193a:	8a ea       	ldi	r24, 0xAA	; 170
    193c:	91 e4       	ldi	r25, 0x41	; 65
    193e:	a3 01       	movw	r20, r6
    1940:	92 01       	movw	r18, r4
    1942:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
    1952:	7b 01       	movw	r14, r22
    1954:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1956:	66 e6       	ldi	r22, 0x66	; 102
    1958:	76 e6       	ldi	r23, 0x66	; 102
    195a:	8a ea       	ldi	r24, 0xAA	; 170
    195c:	91 ec       	ldi	r25, 0xC1	; 193
    195e:	a3 01       	movw	r20, r6
    1960:	92 01       	movw	r18, r4
    1962:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
    1972:	5b 01       	movw	r10, r22
    1974:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1976:	2d b7       	in	r18, 0x3d	; 61
    1978:	3e b7       	in	r19, 0x3e	; 62
    197a:	29 50       	subi	r18, 0x09	; 9
    197c:	30 40       	sbci	r19, 0x00	; 0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	3e bf       	out	0x3e, r19	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	2d bf       	out	0x3d, r18	; 61
    1988:	8d b6       	in	r8, 0x3d	; 61
    198a:	9e b6       	in	r9, 0x3e	; 62
    198c:	08 94       	sec
    198e:	81 1c       	adc	r8, r1
    1990:	91 1c       	adc	r9, r1
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	a8 01       	movw	r20, r16
    199c:	97 01       	movw	r18, r14
    199e:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    19a2:	2c ed       	ldi	r18, 0xDC	; 220
    19a4:	38 eb       	ldi	r19, 0xB8	; 184
    19a6:	48 e0       	ldi	r20, 0x08	; 8
    19a8:	5e e3       	ldi	r21, 0x3E	; 62
    19aa:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    19ae:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    19b2:	69 8f       	std	Y+25, r22	; 0x19
    19b4:	7a 8f       	std	Y+26, r23	; 0x1a
    19b6:	8b 8f       	std	Y+27, r24	; 0x1b
    19b8:	9c 8f       	std	Y+28, r25	; 0x1c
    19ba:	69 85       	ldd	r22, Y+9	; 0x09
    19bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    19be:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c2:	a8 01       	movw	r20, r16
    19c4:	97 01       	movw	r18, r14
    19c6:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    19ca:	2c ed       	ldi	r18, 0xDC	; 220
    19cc:	38 eb       	ldi	r19, 0xB8	; 184
    19ce:	48 e0       	ldi	r20, 0x08	; 8
    19d0:	5e e3       	ldi	r21, 0x3E	; 62
    19d2:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    19d6:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    19da:	6d 8f       	std	Y+29, r22	; 0x1d
    19dc:	7e 8f       	std	Y+30, r23	; 0x1e
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
    19e0:	98 a3       	std	Y+32, r25	; 0x20
    19e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    19e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	98 89       	ldd	r25, Y+16	; 0x10
    19ea:	a8 01       	movw	r20, r16
    19ec:	97 01       	movw	r18, r14
    19ee:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    19f2:	2c ed       	ldi	r18, 0xDC	; 220
    19f4:	38 eb       	ldi	r19, 0xB8	; 184
    19f6:	48 e0       	ldi	r20, 0x08	; 8
    19f8:	5e e3       	ldi	r21, 0x3E	; 62
    19fa:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    19fe:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1a02:	2b 01       	movw	r4, r22
    1a04:	3c 01       	movw	r6, r24
    1a06:	6d 81       	ldd	r22, Y+5	; 0x05
    1a08:	7e 81       	ldd	r23, Y+6	; 0x06
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	a6 01       	movw	r20, r12
    1a10:	95 01       	movw	r18, r10
    1a12:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    1a16:	2c ed       	ldi	r18, 0xDC	; 220
    1a18:	38 eb       	ldi	r19, 0xB8	; 184
    1a1a:	48 e0       	ldi	r20, 0x08	; 8
    1a1c:	5e e3       	ldi	r21, 0x3E	; 62
    1a1e:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1a22:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1a26:	d4 01       	movw	r26, r8
    1a28:	6d 93       	st	X+, r22
    1a2a:	7c 93       	st	X, r23
    1a2c:	69 85       	ldd	r22, Y+9	; 0x09
    1a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a34:	a6 01       	movw	r20, r12
    1a36:	95 01       	movw	r18, r10
    1a38:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    1a3c:	2c ed       	ldi	r18, 0xDC	; 220
    1a3e:	38 eb       	ldi	r19, 0xB8	; 184
    1a40:	48 e0       	ldi	r20, 0x08	; 8
    1a42:	5e e3       	ldi	r21, 0x3E	; 62
    1a44:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1a48:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1a4c:	f4 01       	movw	r30, r8
    1a4e:	73 83       	std	Z+3, r23	; 0x03
    1a50:	62 83       	std	Z+2, r22	; 0x02
    1a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	a6 01       	movw	r20, r12
    1a5c:	95 01       	movw	r18, r10
    1a5e:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    1a62:	2c ed       	ldi	r18, 0xDC	; 220
    1a64:	38 eb       	ldi	r19, 0xB8	; 184
    1a66:	48 e0       	ldi	r20, 0x08	; 8
    1a68:	5e e3       	ldi	r21, 0x3E	; 62
    1a6a:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    1a6e:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1a72:	d4 01       	movw	r26, r8
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	7c 93       	st	X, r23
    1a78:	6e 93       	st	-X, r22
    1a7a:	14 97       	sbiw	r26, 0x04	; 4
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	2c 92       	st	X, r2
    1a80:	16 97       	sbiw	r26, 0x06	; 6
    1a82:	18 96       	adiw	r26, 0x08	; 8
    1a84:	1c 92       	st	X, r1
    1a86:	1e 92       	st	-X, r1
    1a88:	17 97       	sbiw	r26, 0x07	; 7
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	43 2d       	mov	r20, r3
    1a90:	29 8d       	ldd	r18, Y+25	; 0x19
    1a92:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a94:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1a96:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a98:	72 01       	movw	r14, r4
    1a9a:	c2 2c       	mov	r12, r2
    1a9c:	aa 24       	eor	r10, r10
    1a9e:	bb 24       	eor	r11, r11
    1aa0:	83 2c       	mov	r8, r3
    1aa2:	0e 94 45 1c 	call	0x388a	; 0x388a <STEPPER_move>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	ed b7       	in	r30, 0x3d	; 61
    1aaa:	fe b7       	in	r31, 0x3e	; 62
    1aac:	39 96       	adiw	r30, 0x09	; 9
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	fe bf       	out	0x3e, r31	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1ab8:	a0 96       	adiw	r28, 0x20	; 32
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	5f 90       	pop	r5
    1ae2:	4f 90       	pop	r4
    1ae4:	3f 90       	pop	r3
    1ae6:	2f 90       	pop	r2
    1ae8:	08 95       	ret

00001aea <setOdometry>:
* Input Variables:	void
* Output Return:	float odometry 
* Overview:		    Sets the odometry to move
********************************************************************/
void setOdometry( float odometry )
{	
    1aea:	8f 92       	push	r8
    1aec:	af 92       	push	r10
    1aee:	bf 92       	push	r11
    1af0:	cf 92       	push	r12
    1af2:	ef 92       	push	r14
    1af4:	ff 92       	push	r15
    1af6:	0f 93       	push	r16
    1af8:	1f 93       	push	r17
	// Set the gloable odometryTrigger
	odometryTrigger = odometry;
    1afa:	60 93 08 06 	sts	0x0608, r22
    1afe:	70 93 09 06 	sts	0x0609, r23
    1b02:	80 93 0a 06 	sts	0x060A, r24
    1b06:	90 93 0b 06 	sts	0x060B, r25

	// Set the stepers
	STEPPER_move_stnb( STEPPER_BOTH, 
    1b0a:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    1b0e:	8b 01       	movw	r16, r22
    1b10:	9c 01       	movw	r18, r24
    1b12:	8d b7       	in	r24, 0x3d	; 61
    1b14:	9e b7       	in	r25, 0x3e	; 62
    1b16:	09 97       	sbiw	r24, 0x09	; 9
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	9e bf       	out	0x3e, r25	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	8d bf       	out	0x3d, r24	; 61
    1b22:	ed b7       	in	r30, 0x3d	; 61
    1b24:	fe b7       	in	r31, 0x3e	; 62
    1b26:	31 96       	adiw	r30, 0x01	; 1
    1b28:	ad b7       	in	r26, 0x3d	; 61
    1b2a:	be b7       	in	r27, 0x3e	; 62
    1b2c:	12 96       	adiw	r26, 0x02	; 2
    1b2e:	1c 93       	st	X, r17
    1b30:	0e 93       	st	-X, r16
    1b32:	11 97       	sbiw	r26, 0x01	; 1
    1b34:	84 ef       	ldi	r24, 0xF4	; 244
    1b36:	91 e0       	ldi	r25, 0x01	; 1
    1b38:	93 83       	std	Z+3, r25	; 0x03
    1b3a:	82 83       	std	Z+2, r24	; 0x02
    1b3c:	95 83       	std	Z+5, r25	; 0x05
    1b3e:	84 83       	std	Z+4, r24	; 0x04
    1b40:	16 82       	std	Z+6, r1	; 0x06
    1b42:	10 86       	std	Z+8, r1	; 0x08
    1b44:	17 82       	std	Z+7, r1	; 0x07
    1b46:	81 e0       	ldi	r24, 0x01	; 1
    1b48:	62 e0       	ldi	r22, 0x02	; 2
    1b4a:	41 e0       	ldi	r20, 0x01	; 1
    1b4c:	98 01       	movw	r18, r16
    1b4e:	04 ef       	ldi	r16, 0xF4	; 244
    1b50:	11 e0       	ldi	r17, 0x01	; 1
    1b52:	94 ef       	ldi	r25, 0xF4	; 244
    1b54:	e9 2e       	mov	r14, r25
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	f9 2e       	mov	r15, r25
    1b5a:	cc 24       	eor	r12, r12
    1b5c:	aa 24       	eor	r10, r10
    1b5e:	bb 24       	eor	r11, r11
    1b60:	88 24       	eor	r8, r8
    1b62:	83 94       	inc	r8
    1b64:	0e 94 45 1c 	call	0x388a	; 0x388a <STEPPER_move>
    1b68:	8d b7       	in	r24, 0x3d	; 61
    1b6a:	9e b7       	in	r25, 0x3e	; 62
    1b6c:	09 96       	adiw	r24, 0x09	; 9
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	9e bf       	out	0x3e, r25	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	8d bf       	out	0x3d, r24	; 61
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF, // Left
	STEPPER_REV, odometryTrigger, MAX_SPEED_STEP, MAX_ACL_STEP, STEPPER_BRK_OFF ); // Right
}
    1b78:	1f 91       	pop	r17
    1b7a:	0f 91       	pop	r16
    1b7c:	ff 90       	pop	r15
    1b7e:	ef 90       	pop	r14
    1b80:	cf 90       	pop	r12
    1b82:	bf 90       	pop	r11
    1b84:	af 90       	pop	r10
    1b86:	8f 90       	pop	r8
    1b88:	08 95       	ret

00001b8a <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1b8a:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1b8e:	28 2f       	mov	r18, r24
    1b90:	21 70       	andi	r18, 0x01	; 1
    1b92:	20 93 21 07 	sts	0x0721, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1b96:	90 e0       	ldi	r25, 0x00	; 0
    1b98:	82 70       	andi	r24, 0x02	; 2
    1b9a:	90 70       	andi	r25, 0x00	; 0
    1b9c:	95 95       	asr	r25
    1b9e:	87 95       	ror	r24
    1ba0:	80 93 22 07 	sts	0x0722, r24
}
    1ba4:	08 95       	ret

00001ba6 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1ba6:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1baa:	60 93 18 06 	sts	0x0618, r22
    1bae:	70 93 19 06 	sts	0x0619, r23
    1bb2:	80 93 1a 06 	sts	0x061A, r24
    1bb6:	90 93 1b 06 	sts	0x061B, r25
	leftLightVolt = getLeftLight();
    1bba:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1bbe:	60 93 af 07 	sts	0x07AF, r22
    1bc2:	70 93 b0 07 	sts	0x07B0, r23
    1bc6:	80 93 b1 07 	sts	0x07B1, r24
    1bca:	90 93 b2 07 	sts	0x07B2, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1bce:	08 95       	ret

00001bd0 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1bd0:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1bd4:	60 93 80 05 	sts	0x0580, r22
    1bd8:	70 93 81 05 	sts	0x0581, r23
    1bdc:	80 93 82 05 	sts	0x0582, r24
    1be0:	90 93 83 05 	sts	0x0583, r25
	bkIR = getBackIR();
    1be4:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1be8:	60 93 8a 05 	sts	0x058A, r22
    1bec:	70 93 8b 05 	sts	0x058B, r23
    1bf0:	80 93 8c 05 	sts	0x058C, r24
    1bf4:	90 93 8d 05 	sts	0x058D, r25
	ltIR = getLeftIR();
    1bf8:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1bfc:	60 93 23 07 	sts	0x0723, r22
    1c00:	70 93 24 07 	sts	0x0724, r23
    1c04:	80 93 25 07 	sts	0x0725, r24
    1c08:	90 93 26 07 	sts	0x0726, r25
	rtIR = getRightIR();
    1c0c:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1c10:	60 93 27 07 	sts	0x0727, r22
    1c14:	70 93 28 07 	sts	0x0728, r23
    1c18:	80 93 29 07 	sts	0x0729, r24
    1c1c:	90 93 2a 07 	sts	0x072A, r25
}
    1c20:	08 95       	ret

00001c22 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1c22:	cf 92       	push	r12
    1c24:	df 92       	push	r13
    1c26:	ef 92       	push	r14
    1c28:	ff 92       	push	r15
    1c2a:	0f 93       	push	r16
    1c2c:	1f 93       	push	r17
    1c2e:	cf 93       	push	r28
    1c30:	df 93       	push	r29
    1c32:	16 2f       	mov	r17, r22
    1c34:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1c36:	5f e1       	ldi	r21, 0x1F	; 31
    1c38:	f5 2e       	mov	r15, r21
    1c3a:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1c3c:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1c3e:	0f 2d       	mov	r16, r15
    1c40:	06 95       	lsr	r16
    1c42:	06 95       	lsr	r16
    1c44:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1c46:	c0 2f       	mov	r28, r16
    1c48:	d0 e0       	ldi	r29, 0x00	; 0
    1c4a:	c1 2e       	mov	r12, r17
    1c4c:	dd 24       	eor	r13, r13
    1c4e:	ce 01       	movw	r24, r28
    1c50:	b6 01       	movw	r22, r12
    1c52:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1c56:	80 2f       	mov	r24, r16
    1c58:	61 2f       	mov	r22, r17
    1c5a:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_set_next_PGC>
    1c5e:	fe 01       	movw	r30, r28
    1c60:	45 e0       	ldi	r20, 0x05	; 5
    1c62:	ee 0f       	add	r30, r30
    1c64:	ff 1f       	adc	r31, r31
    1c66:	4a 95       	dec	r20
    1c68:	e1 f7       	brne	.-8      	; 0x1c62 <LCD_set_pixel+0x40>
    1c6a:	2f 2d       	mov	r18, r15
    1c6c:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1c6e:	ee 20       	and	r14, r14
    1c70:	89 f0       	breq	.+34     	; 0x1c94 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1c72:	ec 0d       	add	r30, r12
    1c74:	fd 1d       	adc	r31, r13
    1c76:	e5 56       	subi	r30, 0x65	; 101
    1c78:	f9 4f       	sbci	r31, 0xF9	; 249
    1c7a:	27 70       	andi	r18, 0x07	; 7
    1c7c:	30 70       	andi	r19, 0x00	; 0
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	02 c0       	rjmp	.+4      	; 0x1c88 <LCD_set_pixel+0x66>
    1c84:	88 0f       	add	r24, r24
    1c86:	99 1f       	adc	r25, r25
    1c88:	2a 95       	dec	r18
    1c8a:	e2 f7       	brpl	.-8      	; 0x1c84 <LCD_set_pixel+0x62>
    1c8c:	20 81       	ld	r18, Z
    1c8e:	28 2b       	or	r18, r24
    1c90:	20 83       	st	Z, r18
    1c92:	11 c0       	rjmp	.+34     	; 0x1cb6 <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1c94:	ec 0d       	add	r30, r12
    1c96:	fd 1d       	adc	r31, r13
    1c98:	e5 56       	subi	r30, 0x65	; 101
    1c9a:	f9 4f       	sbci	r31, 0xF9	; 249
    1c9c:	27 70       	andi	r18, 0x07	; 7
    1c9e:	30 70       	andi	r19, 0x00	; 0
    1ca0:	81 e0       	ldi	r24, 0x01	; 1
    1ca2:	90 e0       	ldi	r25, 0x00	; 0
    1ca4:	02 c0       	rjmp	.+4      	; 0x1caa <LCD_set_pixel+0x88>
    1ca6:	88 0f       	add	r24, r24
    1ca8:	99 1f       	adc	r25, r25
    1caa:	2a 95       	dec	r18
    1cac:	e2 f7       	brpl	.-8      	; 0x1ca6 <LCD_set_pixel+0x84>
    1cae:	80 95       	com	r24
    1cb0:	20 81       	ld	r18, Z
    1cb2:	82 23       	and	r24, r18
    1cb4:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1cb6:	35 e0       	ldi	r19, 0x05	; 5
    1cb8:	cc 0f       	add	r28, r28
    1cba:	dd 1f       	adc	r29, r29
    1cbc:	3a 95       	dec	r19
    1cbe:	e1 f7       	brne	.-8      	; 0x1cb8 <LCD_set_pixel+0x96>
    1cc0:	cc 0d       	add	r28, r12
    1cc2:	dd 1d       	adc	r29, r13
    1cc4:	c5 56       	subi	r28, 0x65	; 101
    1cc6:	d9 4f       	sbci	r29, 0xF9	; 249
    1cc8:	88 81       	ld	r24, Y
    1cca:	61 e0       	ldi	r22, 0x01	; 1
    1ccc:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
}
    1cd0:	df 91       	pop	r29
    1cd2:	cf 91       	pop	r28
    1cd4:	1f 91       	pop	r17
    1cd6:	0f 91       	pop	r16
    1cd8:	ff 90       	pop	r15
    1cda:	ef 90       	pop	r14
    1cdc:	df 90       	pop	r13
    1cde:	cf 90       	pop	r12
    1ce0:	08 95       	ret

00001ce2 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1ce2:	7f 92       	push	r7
    1ce4:	8f 92       	push	r8
    1ce6:	9f 92       	push	r9
    1ce8:	af 92       	push	r10
    1cea:	bf 92       	push	r11
    1cec:	cf 92       	push	r12
    1cee:	df 92       	push	r13
    1cf0:	ef 92       	push	r14
    1cf2:	ff 92       	push	r15
    1cf4:	0f 93       	push	r16
    1cf6:	1f 93       	push	r17
    1cf8:	98 2e       	mov	r9, r24
    1cfa:	b6 2e       	mov	r11, r22
    1cfc:	c4 2e       	mov	r12, r20
    1cfe:	a2 2e       	mov	r10, r18
    1d00:	80 2e       	mov	r8, r16
    1d02:	7e 2c       	mov	r7, r14

	r = r*LCD_CELL_OFFSET;
    1d04:	bb 0c       	add	r11, r11
    1d06:	bb 0c       	add	r11, r11
    1d08:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1d0a:	dd 24       	eor	r13, r13
    1d0c:	23 e0       	ldi	r18, 0x03	; 3
    1d0e:	cc 0c       	add	r12, r12
    1d10:	dd 1c       	adc	r13, r13
    1d12:	2a 95       	dec	r18
    1d14:	e1 f7       	brne	.-8      	; 0x1d0e <printCell+0x2c>
    1d16:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1d18:	0f e1       	ldi	r16, 0x1F	; 31
    1d1a:	0b 19       	sub	r16, r11
    1d1c:	80 2f       	mov	r24, r16
    1d1e:	6c 2d       	mov	r22, r12
    1d20:	41 e0       	ldi	r20, 0x01	; 1
    1d22:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1d26:	98 e1       	ldi	r25, 0x18	; 24
    1d28:	e9 2e       	mov	r14, r25
    1d2a:	eb 18       	sub	r14, r11
    1d2c:	8e 2d       	mov	r24, r14
    1d2e:	6c 2d       	mov	r22, r12
    1d30:	41 e0       	ldi	r20, 0x01	; 1
    1d32:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1d36:	87 e0       	ldi	r24, 0x07	; 7
    1d38:	f8 2e       	mov	r15, r24
    1d3a:	fc 0c       	add	r15, r12
    1d3c:	80 2f       	mov	r24, r16
    1d3e:	6f 2d       	mov	r22, r15
    1d40:	41 e0       	ldi	r20, 0x01	; 1
    1d42:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1d46:	8e 2d       	mov	r24, r14
    1d48:	6f 2d       	mov	r22, r15
    1d4a:	41 e0       	ldi	r20, 0x01	; 1
    1d4c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	
	if(cell&0b1000){
    1d50:	c9 2c       	mov	r12, r9
    1d52:	93 fe       	sbrs	r9, 3
    1d54:	24 c0       	rjmp	.+72     	; 0x1d9e <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1d56:	61 2f       	mov	r22, r17
    1d58:	6f 5f       	subi	r22, 0xFF	; 255
    1d5a:	80 2f       	mov	r24, r16
    1d5c:	41 e0       	ldi	r20, 0x01	; 1
    1d5e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1d62:	61 2f       	mov	r22, r17
    1d64:	6e 5f       	subi	r22, 0xFE	; 254
    1d66:	80 2f       	mov	r24, r16
    1d68:	41 e0       	ldi	r20, 0x01	; 1
    1d6a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1d6e:	61 2f       	mov	r22, r17
    1d70:	6d 5f       	subi	r22, 0xFD	; 253
    1d72:	80 2f       	mov	r24, r16
    1d74:	41 e0       	ldi	r20, 0x01	; 1
    1d76:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1d7a:	61 2f       	mov	r22, r17
    1d7c:	6c 5f       	subi	r22, 0xFC	; 252
    1d7e:	80 2f       	mov	r24, r16
    1d80:	41 e0       	ldi	r20, 0x01	; 1
    1d82:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1d86:	61 2f       	mov	r22, r17
    1d88:	6b 5f       	subi	r22, 0xFB	; 251
    1d8a:	80 2f       	mov	r24, r16
    1d8c:	41 e0       	ldi	r20, 0x01	; 1
    1d8e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1d92:	61 2f       	mov	r22, r17
    1d94:	6a 5f       	subi	r22, 0xFA	; 250
    1d96:	80 2f       	mov	r24, r16
    1d98:	41 e0       	ldi	r20, 0x01	; 1
    1d9a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	}
	if(cell&0b0100){
    1d9e:	c2 fe       	sbrs	r12, 2
    1da0:	25 c0       	rjmp	.+74     	; 0x1dec <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1da2:	8b 2d       	mov	r24, r11
    1da4:	80 95       	com	r24
    1da6:	81 5e       	subi	r24, 0xE1	; 225
    1da8:	6f 2d       	mov	r22, r15
    1daa:	41 e0       	ldi	r20, 0x01	; 1
    1dac:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1db0:	8d e1       	ldi	r24, 0x1D	; 29
    1db2:	8b 19       	sub	r24, r11
    1db4:	6f 2d       	mov	r22, r15
    1db6:	41 e0       	ldi	r20, 0x01	; 1
    1db8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1dbc:	8c e1       	ldi	r24, 0x1C	; 28
    1dbe:	8b 19       	sub	r24, r11
    1dc0:	6f 2d       	mov	r22, r15
    1dc2:	41 e0       	ldi	r20, 0x01	; 1
    1dc4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1dc8:	8b e1       	ldi	r24, 0x1B	; 27
    1dca:	8b 19       	sub	r24, r11
    1dcc:	6f 2d       	mov	r22, r15
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1dd4:	8a e1       	ldi	r24, 0x1A	; 26
    1dd6:	8b 19       	sub	r24, r11
    1dd8:	6f 2d       	mov	r22, r15
    1dda:	41 e0       	ldi	r20, 0x01	; 1
    1ddc:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1de0:	89 e1       	ldi	r24, 0x19	; 25
    1de2:	8b 19       	sub	r24, r11
    1de4:	6f 2d       	mov	r22, r15
    1de6:	41 e0       	ldi	r20, 0x01	; 1
    1de8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	}
	if(cell&0b0010){
    1dec:	c1 fe       	sbrs	r12, 1
    1dee:	24 c0       	rjmp	.+72     	; 0x1e38 <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1df0:	61 2f       	mov	r22, r17
    1df2:	6f 5f       	subi	r22, 0xFF	; 255
    1df4:	8e 2d       	mov	r24, r14
    1df6:	41 e0       	ldi	r20, 0x01	; 1
    1df8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1dfc:	61 2f       	mov	r22, r17
    1dfe:	6e 5f       	subi	r22, 0xFE	; 254
    1e00:	8e 2d       	mov	r24, r14
    1e02:	41 e0       	ldi	r20, 0x01	; 1
    1e04:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1e08:	61 2f       	mov	r22, r17
    1e0a:	6d 5f       	subi	r22, 0xFD	; 253
    1e0c:	8e 2d       	mov	r24, r14
    1e0e:	41 e0       	ldi	r20, 0x01	; 1
    1e10:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1e14:	61 2f       	mov	r22, r17
    1e16:	6c 5f       	subi	r22, 0xFC	; 252
    1e18:	8e 2d       	mov	r24, r14
    1e1a:	41 e0       	ldi	r20, 0x01	; 1
    1e1c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1e20:	61 2f       	mov	r22, r17
    1e22:	6b 5f       	subi	r22, 0xFB	; 251
    1e24:	8e 2d       	mov	r24, r14
    1e26:	41 e0       	ldi	r20, 0x01	; 1
    1e28:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1e2c:	61 2f       	mov	r22, r17
    1e2e:	6a 5f       	subi	r22, 0xFA	; 250
    1e30:	8e 2d       	mov	r24, r14
    1e32:	41 e0       	ldi	r20, 0x01	; 1
    1e34:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	}
	if(cell&0b0001){
    1e38:	c0 fe       	sbrs	r12, 0
    1e3a:	25 c0       	rjmp	.+74     	; 0x1e86 <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1e3c:	8b 2d       	mov	r24, r11
    1e3e:	80 95       	com	r24
    1e40:	81 5e       	subi	r24, 0xE1	; 225
    1e42:	61 2f       	mov	r22, r17
    1e44:	41 e0       	ldi	r20, 0x01	; 1
    1e46:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1e4a:	8d e1       	ldi	r24, 0x1D	; 29
    1e4c:	8b 19       	sub	r24, r11
    1e4e:	61 2f       	mov	r22, r17
    1e50:	41 e0       	ldi	r20, 0x01	; 1
    1e52:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1e56:	8c e1       	ldi	r24, 0x1C	; 28
    1e58:	8b 19       	sub	r24, r11
    1e5a:	61 2f       	mov	r22, r17
    1e5c:	41 e0       	ldi	r20, 0x01	; 1
    1e5e:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1e62:	8b e1       	ldi	r24, 0x1B	; 27
    1e64:	8b 19       	sub	r24, r11
    1e66:	61 2f       	mov	r22, r17
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1e6e:	8a e1       	ldi	r24, 0x1A	; 26
    1e70:	8b 19       	sub	r24, r11
    1e72:	61 2f       	mov	r22, r17
    1e74:	41 e0       	ldi	r20, 0x01	; 1
    1e76:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1e7a:	89 e1       	ldi	r24, 0x19	; 25
    1e7c:	8b 19       	sub	r24, r11
    1e7e:	61 2f       	mov	r22, r17
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
	}	
	if(isrobot){
    1e86:	aa 20       	and	r10, r10
    1e88:	e1 f1       	breq	.+120    	; 0x1f02 <printCell+0x220>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1e8a:	bc e1       	ldi	r27, 0x1C	; 28
    1e8c:	eb 2e       	mov	r14, r27
    1e8e:	eb 18       	sub	r14, r11
    1e90:	a3 e0       	ldi	r26, 0x03	; 3
    1e92:	ca 2e       	mov	r12, r26
    1e94:	c1 0e       	add	r12, r17
    1e96:	8e 2d       	mov	r24, r14
    1e98:	6c 2d       	mov	r22, r12
    1e9a:	4a 2d       	mov	r20, r10
    1e9c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1ea0:	fb e1       	ldi	r31, 0x1B	; 27
    1ea2:	ff 2e       	mov	r15, r31
    1ea4:	fb 18       	sub	r15, r11
    1ea6:	8f 2d       	mov	r24, r15
    1ea8:	6c 2d       	mov	r22, r12
    1eaa:	4a 2d       	mov	r20, r10
    1eac:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1eb0:	01 2f       	mov	r16, r17
    1eb2:	0c 5f       	subi	r16, 0xFC	; 252
    1eb4:	8e 2d       	mov	r24, r14
    1eb6:	60 2f       	mov	r22, r16
    1eb8:	4a 2d       	mov	r20, r10
    1eba:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1ebe:	8f 2d       	mov	r24, r15
    1ec0:	60 2f       	mov	r22, r16
    1ec2:	4a 2d       	mov	r20, r10
    1ec4:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		
		switch(orent){
    1ec8:	81 e0       	ldi	r24, 0x01	; 1
    1eca:	88 16       	cp	r8, r24
    1ecc:	71 f0       	breq	.+28     	; 0x1eea <printCell+0x208>
    1ece:	88 16       	cp	r8, r24
    1ed0:	40 f0       	brcs	.+16     	; 0x1ee2 <printCell+0x200>
    1ed2:	82 e0       	ldi	r24, 0x02	; 2
    1ed4:	88 16       	cp	r8, r24
    1ed6:	61 f0       	breq	.+24     	; 0x1ef0 <printCell+0x20e>
    1ed8:	83 e0       	ldi	r24, 0x03	; 3
    1eda:	88 16       	cp	r8, r24
    1edc:	09 f0       	breq	.+2      	; 0x1ee0 <printCell+0x1fe>
    1ede:	4a c0       	rjmp	.+148    	; 0x1f74 <printCell+0x292>
    1ee0:	0b c0       	rjmp	.+22     	; 0x1ef8 <printCell+0x216>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1ee2:	8d e1       	ldi	r24, 0x1D	; 29
    1ee4:	8b 19       	sub	r24, r11
    1ee6:	6c 2d       	mov	r22, r12
    1ee8:	0a c0       	rjmp	.+20     	; 0x1efe <printCell+0x21c>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1eea:	1b 5f       	subi	r17, 0xFB	; 251
    1eec:	8e 2d       	mov	r24, r14
    1eee:	06 c0       	rjmp	.+12     	; 0x1efc <printCell+0x21a>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    1ef0:	8a e1       	ldi	r24, 0x1A	; 26
    1ef2:	8b 19       	sub	r24, r11
    1ef4:	60 2f       	mov	r22, r16
    1ef6:	03 c0       	rjmp	.+6      	; 0x1efe <printCell+0x21c>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    1ef8:	1e 5f       	subi	r17, 0xFE	; 254
    1efa:	8f 2d       	mov	r24, r15
    1efc:	61 2f       	mov	r22, r17
    1efe:	4a 2d       	mov	r20, r10
    1f00:	37 c0       	rjmp	.+110    	; 0x1f70 <printCell+0x28e>
				break;
			default:
				break;
		}
	}
	else if(reset){
    1f02:	77 20       	and	r7, r7
    1f04:	b9 f1       	breq	.+110    	; 0x1f74 <printCell+0x292>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1f06:	ec e1       	ldi	r30, 0x1C	; 28
    1f08:	ce 2e       	mov	r12, r30
    1f0a:	cb 18       	sub	r12, r11
    1f0c:	73 e0       	ldi	r23, 0x03	; 3
    1f0e:	e7 2e       	mov	r14, r23
    1f10:	e1 0e       	add	r14, r17
    1f12:	8c 2d       	mov	r24, r12
    1f14:	6e 2d       	mov	r22, r14
    1f16:	40 e0       	ldi	r20, 0x00	; 0
    1f18:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1f1c:	0b e1       	ldi	r16, 0x1B	; 27
    1f1e:	0b 19       	sub	r16, r11
    1f20:	80 2f       	mov	r24, r16
    1f22:	6e 2d       	mov	r22, r14
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1f2a:	64 e0       	ldi	r22, 0x04	; 4
    1f2c:	f6 2e       	mov	r15, r22
    1f2e:	f1 0e       	add	r15, r17
    1f30:	8c 2d       	mov	r24, r12
    1f32:	6f 2d       	mov	r22, r15
    1f34:	40 e0       	ldi	r20, 0x00	; 0
    1f36:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1f3a:	80 2f       	mov	r24, r16
    1f3c:	6f 2d       	mov	r22, r15
    1f3e:	40 e0       	ldi	r20, 0x00	; 0
    1f40:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1f44:	8d e1       	ldi	r24, 0x1D	; 29
    1f46:	8b 19       	sub	r24, r11
    1f48:	6e 2d       	mov	r22, r14
    1f4a:	40 e0       	ldi	r20, 0x00	; 0
    1f4c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1f50:	1b 5f       	subi	r17, 0xFB	; 251
    1f52:	8c 2d       	mov	r24, r12
    1f54:	61 2f       	mov	r22, r17
    1f56:	40 e0       	ldi	r20, 0x00	; 0
    1f58:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    1f5c:	8a e1       	ldi	r24, 0x1A	; 26
    1f5e:	8b 19       	sub	r24, r11
    1f60:	6f 2d       	mov	r22, r15
    1f62:	40 e0       	ldi	r20, 0x00	; 0
    1f64:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    1f68:	13 50       	subi	r17, 0x03	; 3
    1f6a:	80 2f       	mov	r24, r16
    1f6c:	61 2f       	mov	r22, r17
    1f6e:	40 e0       	ldi	r20, 0x00	; 0
    1f70:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <LCD_set_pixel>
		}
}
    1f74:	1f 91       	pop	r17
    1f76:	0f 91       	pop	r16
    1f78:	ff 90       	pop	r15
    1f7a:	ef 90       	pop	r14
    1f7c:	df 90       	pop	r13
    1f7e:	cf 90       	pop	r12
    1f80:	bf 90       	pop	r11
    1f82:	af 90       	pop	r10
    1f84:	9f 90       	pop	r9
    1f86:	8f 90       	pop	r8
    1f88:	7f 90       	pop	r7
    1f8a:	08 95       	ret

00001f8c <printMap>:
* Input Variables:	char
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(char reset)
{
    1f8c:	9f 92       	push	r9
    1f8e:	af 92       	push	r10
    1f90:	bf 92       	push	r11
    1f92:	cf 92       	push	r12
    1f94:	df 92       	push	r13
    1f96:	ef 92       	push	r14
    1f98:	ff 92       	push	r15
    1f9a:	0f 93       	push	r16
    1f9c:	1f 93       	push	r17
    1f9e:	cf 93       	push	r28
    1fa0:	df 93       	push	r29
    1fa2:	98 2e       	mov	r9, r24
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    1fa4:	80 91 1f 07 	lds	r24, 0x071F
    1fa8:	a8 2e       	mov	r10, r24
    1faa:	a6 94       	lsr	r10
    1fac:	a6 94       	lsr	r10
	unsigned char curCol = currentCellWorld & 0b0011;
    1fae:	43 e0       	ldi	r20, 0x03	; 3
    1fb0:	b4 2e       	mov	r11, r20
    1fb2:	b8 22       	and	r11, r24
    1fb4:	cc 24       	eor	r12, r12
    1fb6:	dd 24       	eor	r13, r13
    1fb8:	1e c0       	rjmp	.+60     	; 0x1ff6 <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    1fba:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    1fbc:	fa 14       	cp	r15, r10
    1fbe:	19 f0       	breq	.+6      	; 0x1fc6 <printMap+0x3a>
    1fc0:	20 e0       	ldi	r18, 0x00	; 0
    1fc2:	30 e0       	ldi	r19, 0x00	; 0
    1fc4:	06 c0       	rjmp	.+12     	; 0x1fd2 <printMap+0x46>
    1fc6:	20 e0       	ldi	r18, 0x00	; 0
    1fc8:	30 e0       	ldi	r19, 0x00	; 0
    1fca:	1b 15       	cp	r17, r11
    1fcc:	11 f4       	brne	.+4      	; 0x1fd2 <printMap+0x46>
    1fce:	21 e0       	ldi	r18, 0x01	; 1
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation, reset);
    1fd2:	6f 2d       	mov	r22, r15
    1fd4:	41 2f       	mov	r20, r17
    1fd6:	00 91 1d 06 	lds	r16, 0x061D
    1fda:	e9 2c       	mov	r14, r9
    1fdc:	0e 94 71 0e 	call	0x1ce2	; 0x1ce2 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    1fe0:	1f 5f       	subi	r17, 0xFF	; 255
    1fe2:	21 96       	adiw	r28, 0x01	; 1
    1fe4:	14 30       	cpi	r17, 0x04	; 4
    1fe6:	49 f7       	brne	.-46     	; 0x1fba <printMap+0x2e>
    1fe8:	08 94       	sec
    1fea:	c1 1c       	adc	r12, r1
    1fec:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    1fee:	84 e0       	ldi	r24, 0x04	; 4
    1ff0:	c8 16       	cp	r12, r24
    1ff2:	d1 04       	cpc	r13, r1
    1ff4:	51 f0       	breq	.+20     	; 0x200a <printMap+0x7e>
    1ff6:	fc 2c       	mov	r15, r12
    1ff8:	e6 01       	movw	r28, r12
    1ffa:	cc 0f       	add	r28, r28
    1ffc:	dd 1f       	adc	r29, r29
    1ffe:	cc 0f       	add	r28, r28
    2000:	dd 1f       	adc	r29, r29
    2002:	c2 50       	subi	r28, 0x02	; 2
    2004:	dc 4f       	sbci	r29, 0xFC	; 252
    2006:	10 e0       	ldi	r17, 0x00	; 0
    2008:	d8 cf       	rjmp	.-80     	; 0x1fba <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation, reset);
		}	
	}
}
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	1f 91       	pop	r17
    2010:	0f 91       	pop	r16
    2012:	ff 90       	pop	r15
    2014:	ef 90       	pop	r14
    2016:	df 90       	pop	r13
    2018:	cf 90       	pop	r12
    201a:	bf 90       	pop	r11
    201c:	af 90       	pop	r10
    201e:	9f 90       	pop	r9
    2020:	08 95       	ret

00002022 <checkOdometry>:
*					sets the flag whe appropriate
********************************************************************/
char checkOdometry( char reset )
{	
	// Check for a reset
	if (reset){
    2022:	88 23       	and	r24, r24
    2024:	91 f0       	breq	.+36     	; 0x204a <checkOdometry+0x28>
		odometryTrigger = 0;
    2026:	80 e0       	ldi	r24, 0x00	; 0
    2028:	90 e0       	ldi	r25, 0x00	; 0
    202a:	a0 e0       	ldi	r26, 0x00	; 0
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	80 93 08 06 	sts	0x0608, r24
    2032:	90 93 09 06 	sts	0x0609, r25
    2036:	a0 93 0a 06 	sts	0x060A, r26
    203a:	b0 93 0b 06 	sts	0x060B, r27
		STEPPER_set_steps(STEPPER_BOTH,odometryTrigger);
    203e:	82 e0       	ldi	r24, 0x02	; 2
    2040:	60 e0       	ldi	r22, 0x00	; 0
    2042:	70 e0       	ldi	r23, 0x00	; 0
    2044:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <STEPPER_set_steps>
    2048:	17 c0       	rjmp	.+46     	; 0x2078 <checkOdometry+0x56>
		return SUCCESS;
	}

	// Get the current number of steps
	curr_step = STEPPER_get_nSteps();
    204a:	0e 94 7d 1b 	call	0x36fa	; 0x36fa <STEPPER_get_nSteps>
    204e:	60 93 1b 07 	sts	0x071B, r22
    2052:	70 93 1c 07 	sts	0x071C, r23
    2056:	80 93 1d 07 	sts	0x071D, r24
    205a:	90 93 1e 07 	sts	0x071E, r25
    205e:	40 e0       	ldi	r20, 0x00	; 0
    2060:	80 91 1d 07 	lds	r24, 0x071D
    2064:	90 91 1e 07 	lds	r25, 0x071E
    2068:	20 91 1b 07 	lds	r18, 0x071B
    206c:	30 91 1c 07 	lds	r19, 0x071C
    2070:	82 0f       	add	r24, r18
    2072:	93 1f       	adc	r25, r19
    2074:	89 2b       	or	r24, r25
    2076:	09 f4       	brne	.+2      	; 0x207a <checkOdometry+0x58>
    2078:	41 e0       	ldi	r20, 0x01	; 1
	}

	// But if not zero
	//then return fial
	return FAIL;
}
    207a:	84 2f       	mov	r24, r20
    207c:	08 95       	ret

0000207e <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{
    207e:	5f 92       	push	r5
    2080:	6f 92       	push	r6
    2082:	7f 92       	push	r7
    2084:	8f 92       	push	r8
    2086:	9f 92       	push	r9
    2088:	af 92       	push	r10
    208a:	bf 92       	push	r11
    208c:	cf 92       	push	r12
    208e:	df 92       	push	r13
    2090:	ef 92       	push	r14
    2092:	ff 92       	push	r15
    2094:	0f 93       	push	r16
    2096:	1f 93       	push	r17
    2098:	cf 93       	push	r28
    209a:	df 93       	push	r29
	// Check for collision
	if(ftIR <= IR_OBST_F_THRESH){
    209c:	e0 90 80 05 	lds	r14, 0x0580
    20a0:	f0 90 81 05 	lds	r15, 0x0581
    20a4:	00 91 82 05 	lds	r16, 0x0582
    20a8:	10 91 83 05 	lds	r17, 0x0583
    20ac:	c8 01       	movw	r24, r16
    20ae:	b7 01       	movw	r22, r14
    20b0:	20 e0       	ldi	r18, 0x00	; 0
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e2       	ldi	r20, 0x20	; 32
    20b6:	51 e4       	ldi	r21, 0x41	; 65
    20b8:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    20bc:	18 16       	cp	r1, r24
    20be:	14 f0       	brlt	.+4      	; 0x20c4 <moveWall+0x46>
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	15 c1       	rjmp	.+554    	; 0x22ee <moveWall+0x270>
		return SUCCESS;
	}

	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    20c4:	55 24       	eor	r5, r5
    20c6:	c8 01       	movw	r24, r16
    20c8:	b7 01       	movw	r22, r14
    20ca:	20 e0       	ldi	r18, 0x00	; 0
    20cc:	30 e0       	ldi	r19, 0x00	; 0
    20ce:	40 e0       	ldi	r20, 0x00	; 0
    20d0:	50 e0       	ldi	r21, 0x00	; 0
    20d2:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    20d6:	88 23       	and	r24, r24
    20d8:	14 f4       	brge	.+4      	; 0x20de <moveWall+0x60>
    20da:	55 24       	eor	r5, r5
    20dc:	53 94       	inc	r5
    20de:	a0 90 27 07 	lds	r10, 0x0727
    20e2:	b0 90 28 07 	lds	r11, 0x0728
    20e6:	c0 90 29 07 	lds	r12, 0x0729
    20ea:	d0 90 2a 07 	lds	r13, 0x072A
    20ee:	60 90 23 07 	lds	r6, 0x0723
    20f2:	70 90 24 07 	lds	r7, 0x0724
    20f6:	80 90 25 07 	lds	r8, 0x0725
    20fa:	90 90 26 07 	lds	r9, 0x0726
	if(!isWall){
    20fe:	55 20       	and	r5, r5
    2100:	41 f5       	brne	.+80     	; 0x2152 <moveWall+0xd4>
    2102:	60 91 8a 05 	lds	r22, 0x058A
    2106:	70 91 8b 05 	lds	r23, 0x058B
    210a:	80 91 8c 05 	lds	r24, 0x058C
    210e:	90 91 8d 05 	lds	r25, 0x058D
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e7       	ldi	r20, 0x70	; 112
    2118:	51 e4       	ldi	r21, 0x41	; 65
    211a:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    211e:	87 fd       	sbrc	r24, 7
    2120:	18 c0       	rjmp	.+48     	; 0x2152 <moveWall+0xd4>
    2122:	c6 01       	movw	r24, r12
    2124:	b5 01       	movw	r22, r10
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	40 e7       	ldi	r20, 0x70	; 112
    212c:	51 e4       	ldi	r21, 0x41	; 65
    212e:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    2132:	87 fd       	sbrc	r24, 7
    2134:	0e c0       	rjmp	.+28     	; 0x2152 <moveWall+0xd4>
    2136:	c4 01       	movw	r24, r8
    2138:	b3 01       	movw	r22, r6
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	40 e7       	ldi	r20, 0x70	; 112
    2140:	51 e4       	ldi	r21, 0x41	; 65
    2142:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    2146:	87 fd       	sbrc	r24, 7
    2148:	04 c0       	rjmp	.+8      	; 0x2152 <moveWall+0xd4>
	
		// Update the speeds the same to go forward
		STEPPER_set_speed(STEPPER_BOTH, MAX_SPEED_STEP);
    214a:	82 e0       	ldi	r24, 0x02	; 2
    214c:	64 ef       	ldi	r22, 0xF4	; 244
    214e:	71 e0       	ldi	r23, 0x01	; 1
    2150:	c9 c0       	rjmp	.+402    	; 0x22e4 <moveWall+0x266>
	BOOL isLEFT;
	float error;	
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2152:	c6 01       	movw	r24, r12
    2154:	b5 01       	movw	r22, r10
    2156:	20 e0       	ldi	r18, 0x00	; 0
    2158:	30 e0       	ldi	r19, 0x00	; 0
    215a:	40 e7       	ldi	r20, 0x70	; 112
    215c:	51 e4       	ldi	r21, 0x41	; 65
    215e:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <__gesf2>
    2162:	18 16       	cp	r1, r24
    2164:	64 f4       	brge	.+24     	; 0x217e <moveWall+0x100>
		rtIR = IR_WALL_R_THRESH-18;
    2166:	80 e0       	ldi	r24, 0x00	; 0
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	a0 e4       	ldi	r26, 0x40	; 64
    216c:	b0 ec       	ldi	r27, 0xC0	; 192
    216e:	80 93 27 07 	sts	0x0727, r24
    2172:	90 93 28 07 	sts	0x0728, r25
    2176:	a0 93 29 07 	sts	0x0729, r26
    217a:	b0 93 2a 07 	sts	0x072A, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    217e:	c4 01       	movw	r24, r8
    2180:	b3 01       	movw	r22, r6
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e7       	ldi	r20, 0x70	; 112
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 cf 2d 	call	0x5b9e	; 0x5b9e <__gesf2>
    218e:	18 16       	cp	r1, r24
    2190:	14 f0       	brlt	.+4      	; 0x2196 <moveWall+0x118>
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	0d c0       	rjmp	.+26     	; 0x21b0 <moveWall+0x132>
		ltIR = IR_WALL_L_THRESH-18;
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	a0 e4       	ldi	r26, 0x40	; 64
    219c:	b0 ec       	ldi	r27, 0xC0	; 192
    219e:	80 93 23 07 	sts	0x0723, r24
    21a2:	90 93 24 07 	sts	0x0724, r25
    21a6:	a0 93 25 07 	sts	0x0725, r26
    21aa:	b0 93 26 07 	sts	0x0726, r27
    21ae:	81 e0       	ldi	r24, 0x01	; 1
		isLEFT = 1;
	}
	
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    21b0:	55 20       	and	r5, r5
    21b2:	21 f1       	breq	.+72     	; 0x21fc <moveWall+0x17e>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    21b4:	88 23       	and	r24, r24
    21b6:	29 f0       	breq	.+10     	; 0x21c2 <moveWall+0x144>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    21b8:	60 e0       	ldi	r22, 0x00	; 0
    21ba:	70 e0       	ldi	r23, 0x00	; 0
    21bc:	8a e7       	ldi	r24, 0x7A	; 122
    21be:	94 e4       	ldi	r25, 0x44	; 68
    21c0:	04 c0       	rjmp	.+8      	; 0x21ca <moveWall+0x14c>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    21c2:	60 e0       	ldi	r22, 0x00	; 0
    21c4:	70 e0       	ldi	r23, 0x00	; 0
    21c6:	8a e7       	ldi	r24, 0x7A	; 122
    21c8:	94 ec       	ldi	r25, 0xC4	; 196
    21ca:	a8 01       	movw	r20, r16
    21cc:	97 01       	movw	r18, r14
    21ce:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    21d2:	20 91 23 07 	lds	r18, 0x0723
    21d6:	30 91 24 07 	lds	r19, 0x0724
    21da:	40 91 25 07 	lds	r20, 0x0725
    21de:	50 91 26 07 	lds	r21, 0x0726
    21e2:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
    21e6:	9b 01       	movw	r18, r22
    21e8:	ac 01       	movw	r20, r24
    21ea:	60 91 27 07 	lds	r22, 0x0727
    21ee:	70 91 28 07 	lds	r23, 0x0728
    21f2:	80 91 29 07 	lds	r24, 0x0729
    21f6:	90 91 2a 07 	lds	r25, 0x072A
    21fa:	10 c0       	rjmp	.+32     	; 0x221c <moveWall+0x19e>
	// the error is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    21fc:	60 91 27 07 	lds	r22, 0x0727
    2200:	70 91 28 07 	lds	r23, 0x0728
    2204:	80 91 29 07 	lds	r24, 0x0729
    2208:	90 91 2a 07 	lds	r25, 0x072A
    220c:	20 91 23 07 	lds	r18, 0x0723
    2210:	30 91 24 07 	lds	r19, 0x0724
    2214:	40 91 25 07 	lds	r20, 0x0725
    2218:	50 91 26 07 	lds	r21, 0x0726
    221c:	0e 94 1b 2c 	call	0x5836	; 0x5836 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2220:	90 58       	subi	r25, 0x80	; 128
    2222:	40 e0       	ldi	r20, 0x00	; 0
    2224:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2228:	7b 01       	movw	r14, r22
    222a:	8c 01       	movw	r16, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    222c:	0e 94 ec 2c 	call	0x59d8	; 0x59d8 <__fixsfsi>
    2230:	eb 01       	movw	r28, r22
    2232:	77 ff       	sbrs	r23, 7
    2234:	03 c0       	rjmp	.+6      	; 0x223c <moveWall+0x1be>
    2236:	d0 95       	com	r29
    2238:	c1 95       	neg	r28
    223a:	df 4f       	sbci	r29, 0xFF	; 255
    223c:	c5 36       	cpi	r28, 0x65	; 101
    223e:	d1 05       	cpc	r29, r1
    2240:	fc f0       	brlt	.+62     	; 0x2280 <moveWall+0x202>
    2242:	c8 01       	movw	r24, r16
    2244:	b7 01       	movw	r22, r14
    2246:	20 e0       	ldi	r18, 0x00	; 0
    2248:	30 e0       	ldi	r19, 0x00	; 0
    224a:	40 e0       	ldi	r20, 0x00	; 0
    224c:	50 e0       	ldi	r21, 0x00	; 0
    224e:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    2252:	88 23       	and	r24, r24
    2254:	a9 f0       	breq	.+42     	; 0x2280 <moveWall+0x202>
		effort = MAX_EFFORT*(effort/abs(effort));
    2256:	be 01       	movw	r22, r28
    2258:	88 27       	eor	r24, r24
    225a:	77 fd       	sbrc	r23, 7
    225c:	80 95       	com	r24
    225e:	98 2f       	mov	r25, r24
    2260:	0e 94 1f 2d 	call	0x5a3e	; 0x5a3e <__floatsisf>
    2264:	9b 01       	movw	r18, r22
    2266:	ac 01       	movw	r20, r24
    2268:	c8 01       	movw	r24, r16
    226a:	b7 01       	movw	r22, r14
    226c:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    2270:	20 e0       	ldi	r18, 0x00	; 0
    2272:	30 e0       	ldi	r19, 0x00	; 0
    2274:	48 ec       	ldi	r20, 0xC8	; 200
    2276:	52 e4       	ldi	r21, 0x42	; 66
    2278:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    227c:	7b 01       	movw	r14, r22
    227e:	8c 01       	movw	r16, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED_STEP/2 + (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
    2280:	c8 01       	movw	r24, r16
    2282:	b7 01       	movw	r22, r14
    2284:	20 e0       	ldi	r18, 0x00	; 0
    2286:	30 e0       	ldi	r19, 0x00	; 0
    2288:	48 ec       	ldi	r20, 0xC8	; 200
    228a:	52 e4       	ldi	r21, 0x42	; 66
    228c:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    2290:	7b 01       	movw	r14, r22
    2292:	8c 01       	movw	r16, r24
	float stepper_speed_R = MAX_SPEED_STEP/2 - (MAX_SPEED_STEP/2)*(effort/MAX_EFFORT);
	
	// Update the speeds the same to move with wall
	STEPPER_set_speed(STEPPER_LEFT, stepper_speed_L);
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	4a e7       	ldi	r20, 0x7A	; 122
    229a:	53 e4       	ldi	r21, 0x43	; 67
    229c:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a e7       	ldi	r20, 0x7A	; 122
    22a6:	53 e4       	ldi	r21, 0x43	; 67
    22a8:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
    22ac:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    22b0:	9b 01       	movw	r18, r22
    22b2:	ac 01       	movw	r20, r24
    22b4:	80 e0       	ldi	r24, 0x00	; 0
    22b6:	b9 01       	movw	r22, r18
    22b8:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <STEPPER_set_speed>
	STEPPER_set_speed(STEPPER_RIGHT, stepper_speed_R);
    22bc:	c8 01       	movw	r24, r16
    22be:	b7 01       	movw	r22, r14
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	4a e7       	ldi	r20, 0x7A	; 122
    22c6:	53 ec       	ldi	r21, 0xC3	; 195
    22c8:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    22cc:	20 e0       	ldi	r18, 0x00	; 0
    22ce:	30 e0       	ldi	r19, 0x00	; 0
    22d0:	4a e7       	ldi	r20, 0x7A	; 122
    22d2:	53 e4       	ldi	r21, 0x43	; 67
    22d4:	0e 94 1c 2c 	call	0x5838	; 0x5838 <__addsf3>
    22d8:	0e 94 f1 2c 	call	0x59e2	; 0x59e2 <__fixunssfsi>
    22dc:	9b 01       	movw	r18, r22
    22de:	ac 01       	movw	r20, r24
    22e0:	81 e0       	ldi	r24, 0x01	; 1
    22e2:	b9 01       	movw	r22, r18
    22e4:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <STEPPER_set_speed>
	
	// Return weather or not we are finished
	return checkOdometry(NO_RESET);
    22e8:	80 e0       	ldi	r24, 0x00	; 0
    22ea:	0e 94 11 10 	call	0x2022	; 0x2022 <checkOdometry>
}
    22ee:	df 91       	pop	r29
    22f0:	cf 91       	pop	r28
    22f2:	1f 91       	pop	r17
    22f4:	0f 91       	pop	r16
    22f6:	ff 90       	pop	r15
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	bf 90       	pop	r11
    2300:	af 90       	pop	r10
    2302:	9f 90       	pop	r9
    2304:	8f 90       	pop	r8
    2306:	7f 90       	pop	r7
    2308:	6f 90       	pop	r6
    230a:	5f 90       	pop	r5
    230c:	08 95       	ret

0000230e <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    230e:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <ATTINY_open>
    2312:	90 93 07 05 	sts	0x0507, r25
    2316:	80 93 06 05 	sts	0x0506, r24
	LEopstat = LED_open(); //open the LED module
    231a:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <LED_open>
    231e:	90 93 05 05 	sts	0x0505, r25
    2322:	80 93 04 05 	sts	0x0504, r24
	LCopstat = LCD_open(); //open the LCD module
    2326:	0e 94 81 19 	call	0x3302	; 0x3302 <LCD_open>
    232a:	90 93 03 05 	sts	0x0503, r25
    232e:	80 93 02 05 	sts	0x0502, r24
	STEPPER_open(); // Open STEPPER module for use
    2332:	0e 94 ec 1c 	call	0x39d8	; 0x39d8 <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    2336:	82 e0       	ldi	r24, 0x02	; 2
    2338:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <SPKR_open>
	
	LED_open();
    233c:	0e 94 6a 1a 	call	0x34d4	; 0x34d4 <LED_open>
	I2C_open();
    2340:	0e 94 4a 21 	call	0x4294	; 0x4294 <I2C_open>
	ADC_open();//open the ADC module
    2344:	0e 94 ee 18 	call	0x31dc	; 0x31dc <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2348:	81 e0       	ldi	r24, 0x01	; 1
    234a:	0e 94 50 19 	call	0x32a0	; 0x32a0 <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    234e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <checkIR>
	prefilter(1);
    2352:	81 e0       	ldi	r24, 0x01	; 1
    2354:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    2358:	8f ee       	ldi	r24, 0xEF	; 239
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	a5 e8       	ldi	r26, 0x85	; 133
    235e:	b1 e4       	ldi	r27, 0x41	; 65
    2360:	80 93 08 06 	sts	0x0608, r24
    2364:	90 93 09 06 	sts	0x0609, r25
    2368:	a0 93 0a 06 	sts	0x060A, r26
    236c:	b0 93 0b 06 	sts	0x060B, r27
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	0a c0       	rjmp	.+20     	; 0x238a <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    2376:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    2378:	01 96       	adiw	r24, 0x01	; 1
    237a:	80 32       	cpi	r24, 0x20	; 32
    237c:	91 05       	cpc	r25, r1
    237e:	d9 f7       	brne	.-10     	; 0x2376 <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    2380:	2f 5f       	subi	r18, 0xFF	; 255
    2382:	3f 4f       	sbci	r19, 0xFF	; 255
    2384:	24 30       	cpi	r18, 0x04	; 4
    2386:	31 05       	cpc	r19, r1
    2388:	59 f0       	breq	.+22     	; 0x23a0 <initializeRobot+0x92>
    238a:	f9 01       	movw	r30, r18
    238c:	55 e0       	ldi	r21, 0x05	; 5
    238e:	ee 0f       	add	r30, r30
    2390:	ff 1f       	adc	r31, r31
    2392:	5a 95       	dec	r21
    2394:	e1 f7       	brne	.-8      	; 0x238e <initializeRobot+0x80>
    2396:	e5 56       	subi	r30, 0x65	; 101
    2398:	f9 4f       	sbci	r31, 0xF9	; 249
    239a:	80 e0       	ldi	r24, 0x00	; 0
    239c:	90 e0       	ldi	r25, 0x00	; 0
    239e:	eb cf       	rjmp	.-42     	; 0x2376 <initializeRobot+0x68>
    23a0:	08 95       	ret

000023a2 <fourNeighborSearch>:
********************************************************************/
unsigned char fourNeighborSearch(unsigned char curCell)
{	
	
	// Get the cell current row and column
	unsigned char curRow = (curCell>>2);
    23a2:	48 2f       	mov	r20, r24
    23a4:	46 95       	lsr	r20
    23a6:	46 95       	lsr	r20
	unsigned char curCol = (curCell&0b0011);
    23a8:	58 2f       	mov	r21, r24
    23aa:	53 70       	andi	r21, 0x03	; 3
	
	// If our current cell is 0
	// then we have reached our goal
	if( ROBOT_METRIC_WORLD[curRow][curCol] == 0){
    23ac:	a4 2f       	mov	r26, r20
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	25 2f       	mov	r18, r21
    23b2:	30 e0       	ldi	r19, 0x00	; 0
    23b4:	fd 01       	movw	r30, r26
    23b6:	ee 0f       	add	r30, r30
    23b8:	ff 1f       	adc	r31, r31
    23ba:	ee 0f       	add	r30, r30
    23bc:	ff 1f       	adc	r31, r31
    23be:	e2 0f       	add	r30, r18
    23c0:	f3 1f       	adc	r31, r19
    23c2:	e5 58       	subi	r30, 0x85	; 133
    23c4:	fb 4f       	sbci	r31, 0xFB	; 251
    23c6:	80 81       	ld	r24, Z
    23c8:	88 23       	and	r24, r24
    23ca:	11 f4       	brne	.+4      	; 0x23d0 <fourNeighborSearch+0x2e>
    23cc:	81 e0       	ldi	r24, 0x01	; 1
    23ce:	08 95       	ret
	
	// Perform a 4-neighbor search and store the lowest value
	
	// LCD_clear();
	//Check the north cell
	curRow--;
    23d0:	e4 2f       	mov	r30, r20
    23d2:	e1 50       	subi	r30, 0x01	; 1
	if((curRow)<WORLD_ROW_SIZE){
    23d4:	e4 30       	cpi	r30, 0x04	; 4
    23d6:	80 f4       	brcc	.+32     	; 0x23f8 <fourNeighborSearch+0x56>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    23d8:	f0 e0       	ldi	r31, 0x00	; 0
    23da:	ee 0f       	add	r30, r30
    23dc:	ff 1f       	adc	r31, r31
    23de:	ee 0f       	add	r30, r30
    23e0:	ff 1f       	adc	r31, r31
    23e2:	e2 0f       	add	r30, r18
    23e4:	f3 1f       	adc	r31, r19
    23e6:	e5 58       	subi	r30, 0x85	; 133
    23e8:	fb 4f       	sbci	r31, 0xFB	; 251
    23ea:	e0 81       	ld	r30, Z
		// LCD_printf("NORTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    23ec:	e4 36       	cpi	r30, 0x64	; 100
    23ee:	20 f4       	brcc	.+8      	; 0x23f8 <fourNeighborSearch+0x56>
			minVal = curVal;
			nextOrientation = NORTH;
    23f0:	10 92 1e 06 	sts	0x061E, r1
    23f4:	9e 2f       	mov	r25, r30
    23f6:	01 c0       	rjmp	.+2      	; 0x23fa <fourNeighborSearch+0x58>
    23f8:	94 e6       	ldi	r25, 0x64	; 100
		}
	}
	
	curRow++;
	curRow++;
    23fa:	84 2f       	mov	r24, r20
    23fc:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the south cell
	if((curRow)<WORLD_ROW_SIZE){
    23fe:	84 30       	cpi	r24, 0x04	; 4
    2400:	88 f4       	brcc	.+34     	; 0x2424 <fourNeighborSearch+0x82>
		curVal = ROBOT_METRIC_WORLD[(curRow)][curCol];
    2402:	e8 2f       	mov	r30, r24
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	ee 0f       	add	r30, r30
    2408:	ff 1f       	adc	r31, r31
    240a:	ee 0f       	add	r30, r30
    240c:	ff 1f       	adc	r31, r31
    240e:	e2 0f       	add	r30, r18
    2410:	f3 1f       	adc	r31, r19
    2412:	e5 58       	subi	r30, 0x85	; 133
    2414:	fb 4f       	sbci	r31, 0xFB	; 251
    2416:	e0 81       	ld	r30, Z
		// LCD_printf("SOUTH curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2418:	e9 17       	cp	r30, r25
    241a:	20 f4       	brcc	.+8      	; 0x2424 <fourNeighborSearch+0x82>
			minVal = curVal;
			nextOrientation = SOUTH;
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	80 93 1e 06 	sts	0x061E, r24
    2422:	9e 2f       	mov	r25, r30
		}
	}
	
	curRow--;
	curCol++;
    2424:	85 2f       	mov	r24, r21
    2426:	8f 5f       	subi	r24, 0xFF	; 255
	// Check the east cell
	if((curCol)<WORLD_COLUMN_SIZE){
    2428:	84 30       	cpi	r24, 0x04	; 4
    242a:	81 f0       	breq	.+32     	; 0x244c <fourNeighborSearch+0xaa>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
    242c:	fd 01       	movw	r30, r26
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	ee 0f       	add	r30, r30
    2434:	ff 1f       	adc	r31, r31
    2436:	e8 0f       	add	r30, r24
    2438:	f1 1d       	adc	r31, r1
    243a:	e5 58       	subi	r30, 0x85	; 133
    243c:	fb 4f       	sbci	r31, 0xFB	; 251
    243e:	e0 81       	ld	r30, Z
		// LCD_printf("EAST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2440:	e9 17       	cp	r30, r25
    2442:	20 f4       	brcc	.+8      	; 0x244c <fourNeighborSearch+0xaa>
			minVal = curVal;
			nextOrientation = EAST;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	80 93 1e 06 	sts	0x061E, r24
    244a:	9e 2f       	mov	r25, r30
		}
	}
	
	curCol--;
	curCol--;
    244c:	85 2f       	mov	r24, r21
    244e:	81 50       	subi	r24, 0x01	; 1
	// Check the west cell
	if((curCol)<WORLD_COLUMN_SIZE){
    2450:	84 30       	cpi	r24, 0x04	; 4
    2452:	80 f4       	brcc	.+32     	; 0x2474 <fourNeighborSearch+0xd2>
		curVal = ROBOT_METRIC_WORLD[curRow][(curCol)];
		// LCD_printf("WEST curVal: %i\n",curVal);
		// TMRSRVC_delay(1000);
		if(curVal<minVal){
    2454:	aa 0f       	add	r26, r26
    2456:	bb 1f       	adc	r27, r27
    2458:	aa 0f       	add	r26, r26
    245a:	bb 1f       	adc	r27, r27
    245c:	a8 0f       	add	r26, r24
    245e:	b1 1d       	adc	r27, r1
    2460:	a5 58       	subi	r26, 0x85	; 133
    2462:	bb 4f       	sbci	r27, 0xFB	; 251
    2464:	8c 91       	ld	r24, X
    2466:	89 17       	cp	r24, r25
    2468:	28 f4       	brcc	.+10     	; 0x2474 <fourNeighborSearch+0xd2>
			minVal = curVal;
			nextOrientation = WEST;
    246a:	83 e0       	ldi	r24, 0x03	; 3
    246c:	80 93 1e 06 	sts	0x061E, r24
    2470:	80 e0       	ldi	r24, 0x00	; 0
    2472:	08 95       	ret
    2474:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return FAIL;
}
    2476:	08 95       	ret

00002478 <wavefrontMake>:
* Output Return:	void
* Overview:			Makes the wavefront metric map to goal location
*					from current location 
********************************************************************/
void wavefrontMake(void)
{
    2478:	bf 92       	push	r11
    247a:	cf 92       	push	r12
    247c:	df 92       	push	r13
    247e:	ef 92       	push	r14
    2480:	ff 92       	push	r15
    2482:	0f 93       	push	r16
    2484:	1f 93       	push	r17
    2486:	cf 93       	push	r28
    2488:	df 93       	push	r29
	// User-defined goal location
	// unsigned char goalLocation = currentGoalWorld;
	// Extract x and y goal location
	int rowGoal = (currentGoalWorld>>2);
    248a:	80 91 8e 05 	lds	r24, 0x058E
	int colGoal = (currentGoalWorld&0b0011);
    248e:	28 2f       	mov	r18, r24
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	23 70       	andi	r18, 0x03	; 3
    2494:	30 70       	andi	r19, 0x00	; 0
    2496:	86 95       	lsr	r24
    2498:	86 95       	lsr	r24
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	cc 27       	eor	r28, r28
    249e:	dd 27       	eor	r29, r29
    24a0:	c8 1b       	sub	r28, r24
    24a2:	d9 0b       	sbc	r29, r25
    24a4:	00 e0       	ldi	r16, 0x00	; 0
    24a6:	10 e0       	ldi	r17, 0x00	; 0
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    24a8:	cc 24       	eor	r12, r12
    24aa:	dd 24       	eor	r13, r13
    24ac:	c2 1a       	sub	r12, r18
    24ae:	d3 0a       	sbc	r13, r19
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
				ROBOT_METRIC_WORLD[row][col] = 99;
    24b0:	f3 e6       	ldi	r31, 0x63	; 99
    24b2:	bf 2e       	mov	r11, r31
    24b4:	25 c0       	rjmp	.+74     	; 0x2500 <wavefrontMake+0x88>
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
    24b6:	8c 91       	ld	r24, X
    24b8:	8f 30       	cpi	r24, 0x0F	; 15
    24ba:	11 f4       	brne	.+4      	; 0x24c0 <wavefrontMake+0x48>
				ROBOT_METRIC_WORLD[row][col] = 99;
    24bc:	b0 82       	st	Z, r11
    24be:	11 c0       	rjmp	.+34     	; 0x24e2 <wavefrontMake+0x6a>
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
				colDelta = abs(col - colGoal);
    24c0:	9a 01       	movw	r18, r20
    24c2:	57 ff       	sbrs	r21, 7
    24c4:	04 c0       	rjmp	.+8      	; 0x24ce <wavefrontMake+0x56>
    24c6:	22 27       	eor	r18, r18
    24c8:	33 27       	eor	r19, r19
    24ca:	24 1b       	sub	r18, r20
    24cc:	35 0b       	sbc	r19, r21
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
    24ce:	22 9f       	mul	r18, r18
    24d0:	c0 01       	movw	r24, r0
    24d2:	23 9f       	mul	r18, r19
    24d4:	90 0d       	add	r25, r0
    24d6:	32 9f       	mul	r19, r18
    24d8:	90 0d       	add	r25, r0
    24da:	11 24       	eor	r1, r1
    24dc:	8e 0d       	add	r24, r14
    24de:	9f 1d       	adc	r25, r15
    24e0:	80 83       	st	Z, r24
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
    24e2:	6f 5f       	subi	r22, 0xFF	; 255
    24e4:	7f 4f       	sbci	r23, 0xFF	; 255
    24e6:	11 96       	adiw	r26, 0x01	; 1
    24e8:	31 96       	adiw	r30, 0x01	; 1
    24ea:	4f 5f       	subi	r20, 0xFF	; 255
    24ec:	5f 4f       	sbci	r21, 0xFF	; 255
    24ee:	64 30       	cpi	r22, 0x04	; 4
    24f0:	71 05       	cpc	r23, r1
    24f2:	09 f7       	brne	.-62     	; 0x24b6 <wavefrontMake+0x3e>
	unsigned int rowDelta, colDelta;
	int row, col;
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
    24f4:	0f 5f       	subi	r16, 0xFF	; 255
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	21 96       	adiw	r28, 0x01	; 1
    24fa:	04 30       	cpi	r16, 0x04	; 4
    24fc:	11 05       	cpc	r17, r1
    24fe:	e9 f0       	breq	.+58     	; 0x253a <wavefrontMake+0xc2>
				ROBOT_METRIC_WORLD[row][col] = 99;
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs(row - rowGoal);
    2500:	ce 01       	movw	r24, r28
    2502:	d7 ff       	sbrs	r29, 7
    2504:	04 c0       	rjmp	.+8      	; 0x250e <wavefrontMake+0x96>
    2506:	88 27       	eor	r24, r24
    2508:	99 27       	eor	r25, r25
    250a:	8c 1b       	sub	r24, r28
    250c:	9d 0b       	sbc	r25, r29
				colDelta = abs(col - colGoal);
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
    250e:	88 9f       	mul	r24, r24
    2510:	70 01       	movw	r14, r0
    2512:	89 9f       	mul	r24, r25
    2514:	f0 0c       	add	r15, r0
    2516:	98 9f       	mul	r25, r24
    2518:	f0 0c       	add	r15, r0
    251a:	11 24       	eor	r1, r1
    251c:	c8 01       	movw	r24, r16
    251e:	88 0f       	add	r24, r24
    2520:	99 1f       	adc	r25, r25
    2522:	88 0f       	add	r24, r24
    2524:	99 1f       	adc	r25, r25
    2526:	dc 01       	movw	r26, r24
    2528:	a2 50       	subi	r26, 0x02	; 2
    252a:	bc 4f       	sbci	r27, 0xFC	; 252
    252c:	fc 01       	movw	r30, r24
    252e:	e5 58       	subi	r30, 0x85	; 133
    2530:	fb 4f       	sbci	r31, 0xFB	; 251
    2532:	a6 01       	movw	r20, r12
    2534:	60 e0       	ldi	r22, 0x00	; 0
    2536:	70 e0       	ldi	r23, 0x00	; 0
    2538:	be cf       	rjmp	.-132    	; 0x24b6 <wavefrontMake+0x3e>
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
			}
		}
	}
}
    253a:	df 91       	pop	r29
    253c:	cf 91       	pop	r28
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	ff 90       	pop	r15
    2544:	ef 90       	pop	r14
    2546:	df 90       	pop	r13
    2548:	cf 90       	pop	r12
    254a:	bf 90       	pop	r11
    254c:	08 95       	ret

0000254e <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    254e:	ef 92       	push	r14
    2550:	ff 92       	push	r15
    2552:	0f 93       	push	r16
    2554:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    2556:	60 91 80 05 	lds	r22, 0x0580
    255a:	70 91 81 05 	lds	r23, 0x0581
    255e:	80 91 82 05 	lds	r24, 0x0582
    2562:	90 91 83 05 	lds	r25, 0x0583
    2566:	20 e0       	ldi	r18, 0x00	; 0
    2568:	30 e0       	ldi	r19, 0x00	; 0
    256a:	40 e2       	ldi	r20, 0x20	; 32
    256c:	51 e4       	ldi	r21, 0x41	; 65
    256e:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    2572:	f8 2e       	mov	r15, r24
    2574:	ff 1c       	adc	r15, r15
    2576:	ff 24       	eor	r15, r15
    2578:	ff 1c       	adc	r15, r15
    257a:	ff 0c       	add	r15, r15
    257c:	ff 0c       	add	r15, r15
    257e:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    2580:	60 91 23 07 	lds	r22, 0x0723
    2584:	70 91 24 07 	lds	r23, 0x0724
    2588:	80 91 25 07 	lds	r24, 0x0725
    258c:	90 91 26 07 	lds	r25, 0x0726
    2590:	20 e0       	ldi	r18, 0x00	; 0
    2592:	30 e0       	ldi	r19, 0x00	; 0
    2594:	40 ef       	ldi	r20, 0xF0	; 240
    2596:	51 e4       	ldi	r21, 0x41	; 65
    2598:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    259c:	08 2f       	mov	r16, r24
    259e:	00 1f       	adc	r16, r16
    25a0:	00 27       	eor	r16, r16
    25a2:	00 1f       	adc	r16, r16
    25a4:	00 0f       	add	r16, r16
    25a6:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    25a8:	60 91 8a 05 	lds	r22, 0x058A
    25ac:	70 91 8b 05 	lds	r23, 0x058B
    25b0:	80 91 8c 05 	lds	r24, 0x058C
    25b4:	90 91 8d 05 	lds	r25, 0x058D
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	4c e0       	ldi	r20, 0x0C	; 12
    25be:	52 e4       	ldi	r21, 0x42	; 66
    25c0:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    25c4:	18 2f       	mov	r17, r24
    25c6:	11 1f       	adc	r17, r17
    25c8:	11 27       	eor	r17, r17
    25ca:	11 1f       	adc	r17, r17
    25cc:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    25ce:	ee 24       	eor	r14, r14
    25d0:	60 91 27 07 	lds	r22, 0x0727
    25d4:	70 91 28 07 	lds	r23, 0x0728
    25d8:	80 91 29 07 	lds	r24, 0x0729
    25dc:	90 91 2a 07 	lds	r25, 0x072A
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 ef       	ldi	r20, 0xF0	; 240
    25e6:	51 e4       	ldi	r21, 0x41	; 65
    25e8:	0e 94 80 2c 	call	0x5900	; 0x5900 <__cmpsf2>
    25ec:	88 23       	and	r24, r24
    25ee:	14 f4       	brge	.+4      	; 0x25f4 <checkWorld+0xa6>
    25f0:	ee 24       	eor	r14, r14
    25f2:	e3 94       	inc	r14
    25f4:	8f 2d       	mov	r24, r15
    25f6:	8e 0d       	add	r24, r14
    25f8:	80 0f       	add	r24, r16
    25fa:	81 0f       	add	r24, r17
    25fc:	80 93 88 05 	sts	0x0588, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    2600:	20 91 89 05 	lds	r18, 0x0589
    2604:	e2 2f       	mov	r30, r18
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	ed 55       	subi	r30, 0x5D	; 93
    260a:	f8 4f       	sbci	r31, 0xF8	; 248
    260c:	91 81       	ldd	r25, Z+1	; 0x01
    260e:	90 93 8f 05 	sts	0x058F, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    2612:	89 17       	cp	r24, r25
    2614:	19 f4       	brne	.+6      	; 0x261c <checkWorld+0xce>
		currentMoveWorld += 1;
    2616:	2f 5f       	subi	r18, 0xFF	; 255
    2618:	20 93 89 05 	sts	0x0589, r18
	}
}
    261c:	1f 91       	pop	r17
    261e:	0f 91       	pop	r16
    2620:	ff 90       	pop	r15
    2622:	ef 90       	pop	r14
    2624:	08 95       	ret

00002626 <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    2626:	ff 92       	push	r15
    2628:	0f 93       	push	r16
    262a:	1f 93       	push	r17
    262c:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    262e:	08 2f       	mov	r16, r24
    2630:	06 95       	lsr	r16
    2632:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;
    2634:	a3 e0       	ldi	r26, 0x03	; 3
    2636:	fa 2e       	mov	r15, r26
    2638:	f8 22       	and	r15, r24
		
	// // Git the currrent orientation of the robot
	// unsigned char curOrient = currentOrientation;
			
		
	switch(curMove){
    263a:	62 30       	cpi	r22, 0x02	; 2
    263c:	31 f0       	breq	.+12     	; 0x264a <shiftMap+0x24>
    263e:	63 30       	cpi	r22, 0x03	; 3
    2640:	a9 f0       	breq	.+42     	; 0x266c <shiftMap+0x46>
    2642:	61 30       	cpi	r22, 0x01	; 1
    2644:	b1 f4       	brne	.+44     	; 0x2672 <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    2646:	11 50       	subi	r17, 0x01	; 1
    2648:	12 c0       	rjmp	.+36     	; 0x266e <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    264a:	41 30       	cpi	r20, 0x01	; 1
    264c:	49 f0       	breq	.+18     	; 0x2660 <shiftMap+0x3a>
    264e:	41 30       	cpi	r20, 0x01	; 1
    2650:	28 f0       	brcs	.+10     	; 0x265c <shiftMap+0x36>
    2652:	42 30       	cpi	r20, 0x02	; 2
    2654:	39 f0       	breq	.+14     	; 0x2664 <shiftMap+0x3e>
    2656:	43 30       	cpi	r20, 0x03	; 3
    2658:	b9 f4       	brne	.+46     	; 0x2688 <shiftMap+0x62>
    265a:	06 c0       	rjmp	.+12     	; 0x2668 <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    265c:	01 50       	subi	r16, 0x01	; 1
    265e:	14 c0       	rjmp	.+40     	; 0x2688 <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    2660:	f3 94       	inc	r15
    2662:	12 c0       	rjmp	.+36     	; 0x2688 <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    2664:	0f 5f       	subi	r16, 0xFF	; 255
    2666:	10 c0       	rjmp	.+32     	; 0x2688 <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    2668:	fa 94       	dec	r15
    266a:	0e c0       	rjmp	.+28     	; 0x2688 <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    266c:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    266e:	13 70       	andi	r17, 0x03	; 3
    2670:	0b c0       	rjmp	.+22     	; 0x2688 <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    2672:	00 d0       	rcall	.+0      	; 0x2674 <shiftMap+0x4e>
    2674:	84 e4       	ldi	r24, 0x44	; 68
    2676:	91 e0       	ldi	r25, 0x01	; 1
    2678:	ed b7       	in	r30, 0x3d	; 61
    267a:	fe b7       	in	r31, 0x3e	; 62
    267c:	92 83       	std	Z+2, r25	; 0x02
    267e:	81 83       	std	Z+1, r24	; 0x01
    2680:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
    2684:	0f 90       	pop	r0
    2686:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    2688:	10 93 1d 06 	sts	0x061D, r17
    268c:	00 0f       	add	r16, r16
    268e:	00 0f       	add	r16, r16
	return currentCell;
}
    2690:	80 2f       	mov	r24, r16
    2692:	8f 0d       	add	r24, r15
    2694:	1f 91       	pop	r17
    2696:	0f 91       	pop	r16
    2698:	ff 90       	pop	r15
    269a:	08 95       	ret

0000269c <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    269c:	80 91 88 05 	lds	r24, 0x0588
    26a0:	80 fd       	sbrc	r24, 0
    26a2:	02 c0       	rjmp	.+4      	; 0x26a8 <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	05 c0       	rjmp	.+10     	; 0x26b2 <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    26a8:	83 fd       	sbrc	r24, 3
    26aa:	02 c0       	rjmp	.+4      	; 0x26b0 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    26ac:	82 e0       	ldi	r24, 0x02	; 2
    26ae:	01 c0       	rjmp	.+2      	; 0x26b2 <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    26b0:	83 e0       	ldi	r24, 0x03	; 3
    26b2:	80 93 b3 07 	sts	0x07B3, r24
	}
	
	switch(oldMove){
    26b6:	80 91 b4 07 	lds	r24, 0x07B4
    26ba:	81 30       	cpi	r24, 0x01	; 1
    26bc:	29 f0       	breq	.+10     	; 0x26c8 <planMap+0x2c>
    26be:	81 30       	cpi	r24, 0x01	; 1
    26c0:	38 f0       	brcs	.+14     	; 0x26d0 <planMap+0x34>
    26c2:	84 30       	cpi	r24, 0x04	; 4
    26c4:	28 f4       	brcc	.+10     	; 0x26d0 <planMap+0x34>
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    26c8:	82 e0       	ldi	r24, 0x02	; 2
    26ca:	80 93 b3 07 	sts	0x07B3, r24
    26ce:	0b c0       	rjmp	.+22     	; 0x26e6 <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    26d0:	00 d0       	rcall	.+0      	; 0x26d2 <planMap+0x36>
    26d2:	8d e4       	ldi	r24, 0x4D	; 77
    26d4:	91 e0       	ldi	r25, 0x01	; 1
    26d6:	ed b7       	in	r30, 0x3d	; 61
    26d8:	fe b7       	in	r31, 0x3e	; 62
    26da:	92 83       	std	Z+2, r25	; 0x02
    26dc:	81 83       	std	Z+1, r24	; 0x01
    26de:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
    26e2:	0f 90       	pop	r0
    26e4:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    26e6:	80 91 b3 07 	lds	r24, 0x07B3
    26ea:	80 93 b4 07 	sts	0x07B4, r24
}
    26ee:	08 95       	ret

000026f0 <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
    26f0:	80 91 7a 04 	lds	r24, 0x047A
    26f4:	85 30       	cpi	r24, 0x05	; 5
    26f6:	80 f0       	brcs	.+32     	; 0x2718 <planGateway+0x28>
    26f8:	eb e6       	ldi	r30, 0x6B	; 107
    26fa:	f4 e0       	ldi	r31, 0x04	; 4
		for(i = 0; i<=(BRANCH_MAX-1); i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    26fc:	81 81       	ldd	r24, Z+1	; 0x01
    26fe:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    2700:	86 81       	ldd	r24, Z+6	; 0x06
    2702:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2704:	83 85       	ldd	r24, Z+11	; 0x0b
    2706:	82 87       	std	Z+10, r24	; 0x0a
    2708:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
		for(i = 0; i<=(BRANCH_MAX-1); i++){
    270a:	84 e0       	ldi	r24, 0x04	; 4
    270c:	e0 37       	cpi	r30, 0x70	; 112
    270e:	f8 07       	cpc	r31, r24
    2710:	a9 f7       	brne	.-22     	; 0x26fc <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    2712:	84 e0       	ldi	r24, 0x04	; 4
    2714:	80 93 7a 04 	sts	0x047A, r24
	}
	
	// Decide what the current move should be
	planMap();
    2718:	0e 94 4e 13 	call	0x269c	; 0x269c <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    271c:	e0 91 7a 04 	lds	r30, 0x047A
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	e5 59       	subi	r30, 0x95	; 149
    2724:	fb 4f       	sbci	r31, 0xFB	; 251
    2726:	80 91 88 05 	lds	r24, 0x0588
    272a:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    272c:	90 91 b3 07 	lds	r25, 0x07B3
    2730:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    2732:	80 91 1d 06 	lds	r24, 0x061D
    2736:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    2738:	91 30       	cpi	r25, 0x01	; 1
    273a:	19 f0       	breq	.+6      	; 0x2742 <planGateway+0x52>
    273c:	93 30       	cpi	r25, 0x03	; 3
    273e:	41 f4       	brne	.+16     	; 0x2750 <planGateway+0x60>
    2740:	02 c0       	rjmp	.+4      	; 0x2746 <planGateway+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    2742:	81 50       	subi	r24, 0x01	; 1
    2744:	01 c0       	rjmp	.+2      	; 0x2748 <planGateway+0x58>
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    2746:	8f 5f       	subi	r24, 0xFF	; 255
    2748:	83 70       	andi	r24, 0x03	; 3
    274a:	80 93 1d 06 	sts	0x061D, r24
    274e:	0b c0       	rjmp	.+22     	; 0x2766 <planGateway+0x76>
			break;
		default:
			LCD_printf("Whatz2?!");
    2750:	00 d0       	rcall	.+0      	; 0x2752 <planGateway+0x62>
    2752:	86 e5       	ldi	r24, 0x56	; 86
    2754:	91 e0       	ldi	r25, 0x01	; 1
    2756:	ed b7       	in	r30, 0x3d	; 61
    2758:	fe b7       	in	r31, 0x3e	; 62
    275a:	92 83       	std	Z+2, r25	; 0x02
    275c:	81 83       	std	Z+1, r24	; 0x01
    275e:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
    2762:	0f 90       	pop	r0
    2764:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    2766:	80 91 7a 04 	lds	r24, 0x047A
    276a:	8f 5f       	subi	r24, 0xFF	; 255
    276c:	80 93 7a 04 	sts	0x047A, r24
}
    2770:	08 95       	ret

00002772 <planMetric>:
* Output Return:	none
* Overview:			Moves around the map using metric navigation
********************************************************************/
void planMetric (void)
{
	switch(currentOrientation){
    2772:	90 91 1d 06 	lds	r25, 0x061D
    2776:	91 30       	cpi	r25, 0x01	; 1
    2778:	91 f0       	breq	.+36     	; 0x279e <planMetric+0x2c>
    277a:	91 30       	cpi	r25, 0x01	; 1
    277c:	28 f0       	brcs	.+10     	; 0x2788 <planMetric+0x16>
    277e:	92 30       	cpi	r25, 0x02	; 2
    2780:	d9 f0       	breq	.+54     	; 0x27b8 <planMetric+0x46>
    2782:	93 30       	cpi	r25, 0x03	; 3
    2784:	c1 f5       	brne	.+112    	; 0x27f6 <planMetric+0x84>
    2786:	23 c0       	rjmp	.+70     	; 0x27ce <planMetric+0x5c>
		case NORTH:
			switch(nextOrientation){
    2788:	80 91 1e 06 	lds	r24, 0x061E
    278c:	81 30       	cpi	r24, 0x01	; 1
    278e:	91 f0       	breq	.+36     	; 0x27b4 <planMetric+0x42>
    2790:	81 30       	cpi	r24, 0x01	; 1
    2792:	68 f1       	brcs	.+90     	; 0x27ee <planMetric+0x7c>
    2794:	82 30       	cpi	r24, 0x02	; 2
    2796:	49 f1       	breq	.+82     	; 0x27ea <planMetric+0x78>
    2798:	83 30       	cpi	r24, 0x03	; 3
    279a:	69 f5       	brne	.+90     	; 0x27f6 <planMetric+0x84>
    279c:	26 c0       	rjmp	.+76     	; 0x27ea <planMetric+0x78>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case EAST:
			switch(nextOrientation){
    279e:	80 91 1e 06 	lds	r24, 0x061E
    27a2:	81 30       	cpi	r24, 0x01	; 1
    27a4:	21 f1       	breq	.+72     	; 0x27ee <planMetric+0x7c>
    27a6:	81 30       	cpi	r24, 0x01	; 1
    27a8:	e8 f0       	brcs	.+58     	; 0x27e4 <planMetric+0x72>
    27aa:	82 30       	cpi	r24, 0x02	; 2
    27ac:	19 f0       	breq	.+6      	; 0x27b4 <planMetric+0x42>
    27ae:	83 30       	cpi	r24, 0x03	; 3
    27b0:	11 f5       	brne	.+68     	; 0x27f6 <planMetric+0x84>
    27b2:	18 c0       	rjmp	.+48     	; 0x27e4 <planMetric+0x72>
				case NORTH:
					currentMove = MOVE_LEFT; break;
				case EAST:
					currentMove = MOVE_FORWARD; break;
				case SOUTH:
					currentMove = MOVE_RIGHT; break;
    27b4:	83 e0       	ldi	r24, 0x03	; 3
    27b6:	1c c0       	rjmp	.+56     	; 0x27f0 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case SOUTH:
			switch(nextOrientation){
    27b8:	80 91 1e 06 	lds	r24, 0x061E
    27bc:	81 30       	cpi	r24, 0x01	; 1
    27be:	c1 f0       	breq	.+48     	; 0x27f0 <planMetric+0x7e>
    27c0:	81 30       	cpi	r24, 0x01	; 1
    27c2:	98 f0       	brcs	.+38     	; 0x27ea <planMetric+0x78>
    27c4:	82 30       	cpi	r24, 0x02	; 2
    27c6:	a1 f0       	breq	.+40     	; 0x27f0 <planMetric+0x7e>
    27c8:	83 30       	cpi	r24, 0x03	; 3
    27ca:	a9 f4       	brne	.+42     	; 0x27f6 <planMetric+0x84>
    27cc:	11 c0       	rjmp	.+34     	; 0x27f0 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case WEST:
			switch(nextOrientation){
    27ce:	80 91 1e 06 	lds	r24, 0x061E
    27d2:	81 30       	cpi	r24, 0x01	; 1
    27d4:	69 f0       	breq	.+26     	; 0x27f0 <planMetric+0x7e>
    27d6:	81 30       	cpi	r24, 0x01	; 1
    27d8:	28 f0       	brcs	.+10     	; 0x27e4 <planMetric+0x72>
    27da:	82 30       	cpi	r24, 0x02	; 2
    27dc:	31 f0       	breq	.+12     	; 0x27ea <planMetric+0x78>
    27de:	83 30       	cpi	r24, 0x03	; 3
    27e0:	51 f4       	brne	.+20     	; 0x27f6 <planMetric+0x84>
    27e2:	05 c0       	rjmp	.+10     	; 0x27ee <planMetric+0x7c>
				case NORTH:
					currentMove = MOVE_RIGHT; break;
    27e4:	90 93 b3 07 	sts	0x07B3, r25
    27e8:	08 95       	ret
				case EAST:
					currentMove = MOVE_LEFT; break;
				case SOUTH:
					currentMove = MOVE_LEFT; break;
    27ea:	81 e0       	ldi	r24, 0x01	; 1
    27ec:	01 c0       	rjmp	.+2      	; 0x27f0 <planMetric+0x7e>
				case WEST:
					currentMove = MOVE_FORWARD; break;
    27ee:	82 e0       	ldi	r24, 0x02	; 2
    27f0:	80 93 b3 07 	sts	0x07B3, r24
    27f4:	08 95       	ret
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		default:
			LCD_printf("Whatz5?!"); break;
    27f6:	00 d0       	rcall	.+0      	; 0x27f8 <planMetric+0x86>
    27f8:	8f e5       	ldi	r24, 0x5F	; 95
    27fa:	91 e0       	ldi	r25, 0x01	; 1
    27fc:	ed b7       	in	r30, 0x3d	; 61
    27fe:	fe b7       	in	r31, 0x3e	; 62
    2800:	92 83       	std	Z+2, r25	; 0x02
    2802:	81 83       	std	Z+1, r24	; 0x01
    2804:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
    2808:	0f 90       	pop	r0
    280a:	0f 90       	pop	r0
    280c:	08 95       	ret

0000280e <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    280e:	8f 92       	push	r8
    2810:	af 92       	push	r10
    2812:	bf 92       	push	r11
    2814:	cf 92       	push	r12
    2816:	df 92       	push	r13
    2818:	ef 92       	push	r14
    281a:	ff 92       	push	r15
    281c:	0f 93       	push	r16
    281e:	1f 93       	push	r17
	LCD_clear();
    2820:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	char isDone = 0;
	
	currentMove = moveCommands[currentMoveWorld];
    2824:	e0 91 89 05 	lds	r30, 0x0589
    2828:	f0 e0       	ldi	r31, 0x00	; 0
    282a:	e4 5f       	subi	r30, 0xF4	; 244
    282c:	f9 4f       	sbci	r31, 0xF9	; 249
    282e:	e0 81       	ld	r30, Z
    2830:	e0 93 b3 07 	sts	0x07B3, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	e1 30       	cpi	r30, 0x01	; 1
    2838:	09 f4       	brne	.+2      	; 0x283c <moveWorld+0x2e>
    283a:	81 e0       	ldi	r24, 0x01	; 1
    283c:	90 e0       	ldi	r25, 0x00	; 0
    283e:	e3 30       	cpi	r30, 0x03	; 3
    2840:	09 f4       	brne	.+2      	; 0x2844 <moveWorld+0x36>
    2842:	91 e0       	ldi	r25, 0x01	; 1
    2844:	89 2b       	or	r24, r25
    2846:	28 2f       	mov	r18, r24
    2848:	30 e0       	ldi	r19, 0x00	; 0
    284a:	40 e0       	ldi	r20, 0x00	; 0
    284c:	50 e0       	ldi	r21, 0x00	; 0
    284e:	80 91 b4 07 	lds	r24, 0x07B4
    2852:	82 30       	cpi	r24, 0x02	; 2
    2854:	11 f4       	brne	.+4      	; 0x285a <moveWorld+0x4c>
    2856:	41 e0       	ldi	r20, 0x01	; 1
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	24 23       	and	r18, r20
    285c:	35 23       	and	r19, r21
    285e:	23 2b       	or	r18, r19
    2860:	b9 f0       	breq	.+46     	; 0x2890 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.5/5.0), 10, 10, 0);		
    2862:	60 e0       	ldi	r22, 0x00	; 0
    2864:	70 e0       	ldi	r23, 0x00	; 0
    2866:	80 e0       	ldi	r24, 0x00	; 0
    2868:	9f e4       	ldi	r25, 0x4F	; 79
    286a:	28 e4       	ldi	r18, 0x48	; 72
    286c:	31 ee       	ldi	r19, 0xE1	; 225
    286e:	46 eb       	ldi	r20, 0xB6	; 182
    2870:	51 e4       	ldi	r21, 0x41	; 65
    2872:	0f 2e       	mov	r0, r31
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	ef 2e       	mov	r14, r31
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	ff 2e       	mov	r15, r31
    287c:	f0 e2       	ldi	r31, 0x20	; 32
    287e:	0f 2f       	mov	r16, r31
    2880:	f1 e4       	ldi	r31, 0x41	; 65
    2882:	1f 2f       	mov	r17, r31
    2884:	f0 2d       	mov	r31, r0
    2886:	57 01       	movw	r10, r14
    2888:	68 01       	movw	r12, r16
    288a:	88 24       	eor	r8, r8
    288c:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    2890:	20 91 b4 07 	lds	r18, 0x07B4
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	21 30       	cpi	r18, 0x01	; 1
    2898:	09 f4       	brne	.+2      	; 0x289c <moveWorld+0x8e>
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	23 30       	cpi	r18, 0x03	; 3
    28a0:	09 f4       	brne	.+2      	; 0x28a4 <moveWorld+0x96>
    28a2:	91 e0       	ldi	r25, 0x01	; 1
    28a4:	89 2b       	or	r24, r25
    28a6:	28 2f       	mov	r18, r24
    28a8:	30 e0       	ldi	r19, 0x00	; 0
    28aa:	40 e0       	ldi	r20, 0x00	; 0
    28ac:	50 e0       	ldi	r21, 0x00	; 0
    28ae:	80 91 b3 07 	lds	r24, 0x07B3
    28b2:	82 30       	cpi	r24, 0x02	; 2
    28b4:	11 f4       	brne	.+4      	; 0x28ba <moveWorld+0xac>
    28b6:	41 e0       	ldi	r20, 0x01	; 1
    28b8:	50 e0       	ldi	r21, 0x00	; 0
    28ba:	24 23       	and	r18, r20
    28bc:	35 23       	and	r19, r21
    28be:	23 2b       	or	r18, r19
    28c0:	b9 f0       	breq	.+46     	; 0x28f0 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.2/5.0), 10, 10, 0);		
    28c2:	60 e0       	ldi	r22, 0x00	; 0
    28c4:	70 e0       	ldi	r23, 0x00	; 0
    28c6:	80 e0       	ldi	r24, 0x00	; 0
    28c8:	9f e4       	ldi	r25, 0x4F	; 79
    28ca:	25 e3       	ldi	r18, 0x35	; 53
    28cc:	3f ee       	ldi	r19, 0xEF	; 239
    28ce:	40 ea       	ldi	r20, 0xA0	; 160
    28d0:	51 e4       	ldi	r21, 0x41	; 65
    28d2:	0f 2e       	mov	r0, r31
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	ef 2e       	mov	r14, r31
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	ff 2e       	mov	r15, r31
    28dc:	f0 e2       	ldi	r31, 0x20	; 32
    28de:	0f 2f       	mov	r16, r31
    28e0:	f1 e4       	ldi	r31, 0x41	; 65
    28e2:	1f 2f       	mov	r17, r31
    28e4:	f0 2d       	mov	r31, r0
    28e6:	57 01       	movw	r10, r14
    28e8:	68 01       	movw	r12, r16
    28ea:	88 24       	eor	r8, r8
    28ec:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	switch(currentMove){
    28f0:	80 91 b3 07 	lds	r24, 0x07B3
    28f4:	82 30       	cpi	r24, 0x02	; 2
    28f6:	c1 f1       	breq	.+112    	; 0x2968 <moveWorld+0x15a>
    28f8:	83 30       	cpi	r24, 0x03	; 3
    28fa:	09 f4       	brne	.+2      	; 0x28fe <moveWorld+0xf0>
    28fc:	77 c0       	rjmp	.+238    	; 0x29ec <moveWorld+0x1de>
    28fe:	81 30       	cpi	r24, 0x01	; 1
    2900:	09 f0       	breq	.+2      	; 0x2904 <moveWorld+0xf6>
    2902:	b5 c0       	rjmp	.+362    	; 0x2a6e <moveWorld+0x260>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2904:	8d b7       	in	r24, 0x3d	; 61
    2906:	9e b7       	in	r25, 0x3e	; 62
    2908:	08 97       	sbiw	r24, 0x08	; 8
    290a:	0f b6       	in	r0, 0x3f	; 63
    290c:	f8 94       	cli
    290e:	9e bf       	out	0x3e, r25	; 62
    2910:	0f be       	out	0x3f, r0	; 63
    2912:	8d bf       	out	0x3d, r24	; 61
    2914:	ed b7       	in	r30, 0x3d	; 61
    2916:	fe b7       	in	r31, 0x3e	; 62
    2918:	31 96       	adiw	r30, 0x01	; 1
    291a:	88 e6       	ldi	r24, 0x68	; 104
    291c:	91 e0       	ldi	r25, 0x01	; 1
    291e:	ad b7       	in	r26, 0x3d	; 61
    2920:	be b7       	in	r27, 0x3e	; 62
    2922:	12 96       	adiw	r26, 0x02	; 2
    2924:	9c 93       	st	X, r25
    2926:	8e 93       	st	-X, r24
    2928:	11 97       	sbiw	r26, 0x01	; 1
    292a:	80 91 89 05 	lds	r24, 0x0589
    292e:	82 83       	std	Z+2, r24	; 0x02
    2930:	13 82       	std	Z+3, r1	; 0x03
    2932:	80 91 88 05 	lds	r24, 0x0588
    2936:	84 83       	std	Z+4, r24	; 0x04
    2938:	15 82       	std	Z+5, r1	; 0x05
    293a:	80 91 8f 05 	lds	r24, 0x058F
    293e:	86 83       	std	Z+6, r24	; 0x06
    2940:	17 82       	std	Z+7, r1	; 0x07
    2942:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2946:	ed b7       	in	r30, 0x3d	; 61
    2948:	fe b7       	in	r31, 0x3e	; 62
    294a:	38 96       	adiw	r30, 0x08	; 8
    294c:	0f b6       	in	r0, 0x3f	; 63
    294e:	f8 94       	cli
    2950:	fe bf       	out	0x3e, r31	; 62
    2952:	0f be       	out	0x3f, r0	; 63
    2954:	ed bf       	out	0x3d, r30	; 61
    2956:	60 e0       	ldi	r22, 0x00	; 0
    2958:	70 e0       	ldi	r23, 0x00	; 0
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	20 e0       	ldi	r18, 0x00	; 0
    2960:	30 e0       	ldi	r19, 0x00	; 0
    2962:	4c e8       	ldi	r20, 0x8C	; 140
    2964:	51 ec       	ldi	r21, 0xC1	; 193
    2966:	73 c0       	rjmp	.+230    	; 0x2a4e <moveWorld+0x240>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2968:	8d b7       	in	r24, 0x3d	; 61
    296a:	9e b7       	in	r25, 0x3e	; 62
    296c:	08 97       	sbiw	r24, 0x08	; 8
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	f8 94       	cli
    2972:	9e bf       	out	0x3e, r25	; 62
    2974:	0f be       	out	0x3f, r0	; 63
    2976:	8d bf       	out	0x3d, r24	; 61
    2978:	ed b7       	in	r30, 0x3d	; 61
    297a:	fe b7       	in	r31, 0x3e	; 62
    297c:	31 96       	adiw	r30, 0x01	; 1
    297e:	83 e9       	ldi	r24, 0x93	; 147
    2980:	91 e0       	ldi	r25, 0x01	; 1
    2982:	ad b7       	in	r26, 0x3d	; 61
    2984:	be b7       	in	r27, 0x3e	; 62
    2986:	12 96       	adiw	r26, 0x02	; 2
    2988:	9c 93       	st	X, r25
    298a:	8e 93       	st	-X, r24
    298c:	11 97       	sbiw	r26, 0x01	; 1
    298e:	80 91 89 05 	lds	r24, 0x0589
    2992:	82 83       	std	Z+2, r24	; 0x02
    2994:	13 82       	std	Z+3, r1	; 0x03
    2996:	80 91 88 05 	lds	r24, 0x0588
    299a:	84 83       	std	Z+4, r24	; 0x04
    299c:	15 82       	std	Z+5, r1	; 0x05
    299e:	80 91 8f 05 	lds	r24, 0x058F
    29a2:	86 83       	std	Z+6, r24	; 0x06
    29a4:	17 82       	std	Z+7, r1	; 0x07
    29a6:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
		
			setOdometry(WALL_STEP);
    29aa:	ed b7       	in	r30, 0x3d	; 61
    29ac:	fe b7       	in	r31, 0x3e	; 62
    29ae:	38 96       	adiw	r30, 0x08	; 8
    29b0:	0f b6       	in	r0, 0x3f	; 63
    29b2:	f8 94       	cli
    29b4:	fe bf       	out	0x3e, r31	; 62
    29b6:	0f be       	out	0x3f, r0	; 63
    29b8:	ed bf       	out	0x3d, r30	; 61
    29ba:	60 e0       	ldi	r22, 0x00	; 0
    29bc:	70 e0       	ldi	r23, 0x00	; 0
    29be:	86 e9       	ldi	r24, 0x96	; 150
    29c0:	93 e4       	ldi	r25, 0x43	; 67
    29c2:	0e 94 75 0d 	call	0x1aea	; 0x1aea <setOdometry>
			while(!isDone){
				checkIR();
    29c6:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <checkIR>
				isDone = moveWall();
    29ca:	0e 94 3f 10 	call	0x207e	; 0x207e <moveWall>
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
			// TMRSRVC_delay(1000);//wait 1 seconds
		
			setOdometry(WALL_STEP);
			while(!isDone){
    29ce:	88 23       	and	r24, r24
    29d0:	d1 f3       	breq	.-12     	; 0x29c6 <moveWorld+0x1b8>
				checkIR();
				isDone = moveWall();
			}
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_ON);
    29d2:	82 e0       	ldi	r24, 0x02	; 2
    29d4:	61 e0       	ldi	r22, 0x01	; 1
    29d6:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <STEPPER_stop>
			TMRSRVC_delay(100);//wait .1 seconds
    29da:	84 e6       	ldi	r24, 0x64	; 100
    29dc:	90 e0       	ldi	r25, 0x00	; 0
    29de:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    29e2:	82 e0       	ldi	r24, 0x02	; 2
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <STEPPER_stop>
    29ea:	53 c0       	rjmp	.+166    	; 0x2a92 <moveWorld+0x284>
			
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    29ec:	8d b7       	in	r24, 0x3d	; 61
    29ee:	9e b7       	in	r25, 0x3e	; 62
    29f0:	08 97       	sbiw	r24, 0x08	; 8
    29f2:	0f b6       	in	r0, 0x3f	; 63
    29f4:	f8 94       	cli
    29f6:	9e bf       	out	0x3e, r25	; 62
    29f8:	0f be       	out	0x3f, r0	; 63
    29fa:	8d bf       	out	0x3d, r24	; 61
    29fc:	ed b7       	in	r30, 0x3d	; 61
    29fe:	fe b7       	in	r31, 0x3e	; 62
    2a00:	31 96       	adiw	r30, 0x01	; 1
    2a02:	81 ec       	ldi	r24, 0xC1	; 193
    2a04:	91 e0       	ldi	r25, 0x01	; 1
    2a06:	ad b7       	in	r26, 0x3d	; 61
    2a08:	be b7       	in	r27, 0x3e	; 62
    2a0a:	12 96       	adiw	r26, 0x02	; 2
    2a0c:	9c 93       	st	X, r25
    2a0e:	8e 93       	st	-X, r24
    2a10:	11 97       	sbiw	r26, 0x01	; 1
    2a12:	80 91 89 05 	lds	r24, 0x0589
    2a16:	82 83       	std	Z+2, r24	; 0x02
    2a18:	13 82       	std	Z+3, r1	; 0x03
    2a1a:	80 91 88 05 	lds	r24, 0x0588
    2a1e:	84 83       	std	Z+4, r24	; 0x04
    2a20:	15 82       	std	Z+5, r1	; 0x05
    2a22:	80 91 8f 05 	lds	r24, 0x058F
    2a26:	86 83       	std	Z+6, r24	; 0x06
    2a28:	17 82       	std	Z+7, r1	; 0x07
    2a2a:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2a2e:	ed b7       	in	r30, 0x3d	; 61
    2a30:	fe b7       	in	r31, 0x3e	; 62
    2a32:	38 96       	adiw	r30, 0x08	; 8
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	fe bf       	out	0x3e, r31	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	ed bf       	out	0x3d, r30	; 61
    2a3e:	60 e0       	ldi	r22, 0x00	; 0
    2a40:	70 e0       	ldi	r23, 0x00	; 0
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	20 e0       	ldi	r18, 0x00	; 0
    2a48:	30 e0       	ldi	r19, 0x00	; 0
    2a4a:	4c e8       	ldi	r20, 0x8C	; 140
    2a4c:	51 e4       	ldi	r21, 0x41	; 65
    2a4e:	0f 2e       	mov	r0, r31
    2a50:	f0 e0       	ldi	r31, 0x00	; 0
    2a52:	ef 2e       	mov	r14, r31
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	ff 2e       	mov	r15, r31
    2a58:	f0 e2       	ldi	r31, 0x20	; 32
    2a5a:	0f 2f       	mov	r16, r31
    2a5c:	f1 e4       	ldi	r31, 0x41	; 65
    2a5e:	1f 2f       	mov	r17, r31
    2a60:	f0 2d       	mov	r31, r0
    2a62:	57 01       	movw	r10, r14
    2a64:	68 01       	movw	r12, r16
    2a66:	88 24       	eor	r8, r8
    2a68:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2a6c:	12 c0       	rjmp	.+36     	; 0x2a92 <moveWorld+0x284>
			break;
		default:
			LCD_printf("Whatz4?!");
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <moveWorld+0x262>
    2a70:	8d ee       	ldi	r24, 0xED	; 237
    2a72:	91 e0       	ldi	r25, 0x01	; 1
    2a74:	ad b7       	in	r26, 0x3d	; 61
    2a76:	be b7       	in	r27, 0x3e	; 62
    2a78:	12 96       	adiw	r26, 0x02	; 2
    2a7a:	9c 93       	st	X, r25
    2a7c:	8e 93       	st	-X, r24
    2a7e:	11 97       	sbiw	r26, 0x01	; 1
    2a80:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	82 e0       	ldi	r24, 0x02	; 2
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <STEPPER_stop>
    2a90:	ff cf       	rjmp	.-2      	; 0x2a90 <moveWorld+0x282>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    2a92:	80 91 b3 07 	lds	r24, 0x07B3
    2a96:	80 93 b4 07 	sts	0x07B4, r24
	return 1;
    2a9a:	81 e0       	ldi	r24, 0x01	; 1
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	cf 90       	pop	r12
    2aa8:	bf 90       	pop	r11
    2aaa:	af 90       	pop	r10
    2aac:	8f 90       	pop	r8
    2aae:	08 95       	ret

00002ab0 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    2ab0:	ff 92       	push	r15
    2ab2:	0f 93       	push	r16
    2ab4:	1f 93       	push	r17
    2ab6:	cf 93       	push	r28
    2ab8:	df 93       	push	r29
    2aba:	ff 24       	eor	r15, r15
    2abc:	f3 94       	inc	r15
    2abe:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2ac0:	c6 ef       	ldi	r28, 0xF6	; 246
    2ac2:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    2ac4:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    2ac8:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    2aca:	81 30       	cpi	r24, 0x01	; 1
    2acc:	21 f0       	breq	.+8      	; 0x2ad6 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2ace:	82 30       	cpi	r24, 0x02	; 2
    2ad0:	11 f0       	breq	.+4      	; 0x2ad6 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    2ad2:	83 30       	cpi	r24, 0x03	; 3
    2ad4:	39 f4       	brne	.+14     	; 0x2ae4 <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    2ad6:	e1 2f       	mov	r30, r17
    2ad8:	f0 e0       	ldi	r31, 0x00	; 0
    2ada:	e4 5f       	subi	r30, 0xF4	; 244
    2adc:	f9 4f       	sbci	r31, 0xF9	; 249
    2ade:	00 83       	st	Z, r16
			i++;
    2ae0:	1f 5f       	subi	r17, 0xFF	; 255
    2ae2:	02 c0       	rjmp	.+4      	; 0x2ae8 <movesInput+0x38>
		}

		if (btnHolder != 0){
    2ae4:	88 23       	and	r24, r24
    2ae6:	21 f1       	breq	.+72     	; 0x2b30 <movesInput+0x80>
			LCD_clear();
    2ae8:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    2aec:	8d b7       	in	r24, 0x3d	; 61
    2aee:	9e b7       	in	r25, 0x3e	; 62
    2af0:	08 97       	sbiw	r24, 0x08	; 8
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	9e bf       	out	0x3e, r25	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	8d bf       	out	0x3d, r24	; 61
    2afc:	ed b7       	in	r30, 0x3d	; 61
    2afe:	fe b7       	in	r31, 0x3e	; 62
    2b00:	31 96       	adiw	r30, 0x01	; 1
    2b02:	ad b7       	in	r26, 0x3d	; 61
    2b04:	be b7       	in	r27, 0x3e	; 62
    2b06:	12 96       	adiw	r26, 0x02	; 2
    2b08:	dc 93       	st	X, r29
    2b0a:	ce 93       	st	-X, r28
    2b0c:	11 97       	sbiw	r26, 0x01	; 1
    2b0e:	f2 82       	std	Z+2, r15	; 0x02
    2b10:	13 82       	std	Z+3, r1	; 0x03
    2b12:	04 83       	std	Z+4, r16	; 0x04
    2b14:	15 82       	std	Z+5, r1	; 0x05
    2b16:	16 83       	std	Z+6, r17	; 0x06
    2b18:	17 82       	std	Z+7, r1	; 0x07
    2b1a:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
    2b1e:	f0 2e       	mov	r15, r16
    2b20:	8d b7       	in	r24, 0x3d	; 61
    2b22:	9e b7       	in	r25, 0x3e	; 62
    2b24:	08 96       	adiw	r24, 0x08	; 8
    2b26:	0f b6       	in	r0, 0x3f	; 63
    2b28:	f8 94       	cli
    2b2a:	9e bf       	out	0x3e, r25	; 62
    2b2c:	0f be       	out	0x3f, r0	; 63
    2b2e:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2b30:	84 ef       	ldi	r24, 0xF4	; 244
    2b32:	91 e0       	ldi	r25, 0x01	; 1
    2b34:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    2b38:	1b 30       	cpi	r17, 0x0B	; 11
    2b3a:	20 f2       	brcs	.-120    	; 0x2ac4 <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    2b3c:	1f 5f       	subi	r17, 0xFF	; 255
    2b3e:	e1 2f       	mov	r30, r17
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	e4 5f       	subi	r30, 0xF4	; 244
    2b44:	f9 4f       	sbci	r31, 0xF9	; 249
    2b46:	84 e0       	ldi	r24, 0x04	; 4
    2b48:	80 83       	st	Z, r24
}
    2b4a:	df 91       	pop	r29
    2b4c:	cf 91       	pop	r28
    2b4e:	1f 91       	pop	r17
    2b50:	0f 91       	pop	r16
    2b52:	ff 90       	pop	r15
    2b54:	08 95       	ret

00002b56 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    2b56:	1f 93       	push	r17
    2b58:	cf 93       	push	r28
    2b5a:	df 93       	push	r29
    2b5c:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2b5e:	c7 e2       	ldi	r28, 0x27	; 39
    2b60:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    2b62:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2b66:	81 30       	cpi	r24, 0x01	; 1
    2b68:	21 f4       	brne	.+8      	; 0x2b72 <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    2b6a:	80 91 1f 07 	lds	r24, 0x071F
    2b6e:	88 0f       	add	r24, r24
    2b70:	06 c0       	rjmp	.+12     	; 0x2b7e <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2b72:	82 30       	cpi	r24, 0x02	; 2
    2b74:	39 f4       	brne	.+14     	; 0x2b84 <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    2b76:	80 91 1f 07 	lds	r24, 0x071F
    2b7a:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    2b7c:	8f 5f       	subi	r24, 0xFF	; 255
    2b7e:	80 93 1f 07 	sts	0x071F, r24
			i++;
    2b82:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    2b84:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    2b88:	00 d0       	rcall	.+0      	; 0x2b8a <worldInput+0x34>
    2b8a:	00 d0       	rcall	.+0      	; 0x2b8c <worldInput+0x36>
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <worldInput+0x38>
    2b8e:	ed b7       	in	r30, 0x3d	; 61
    2b90:	fe b7       	in	r31, 0x3e	; 62
    2b92:	31 96       	adiw	r30, 0x01	; 1
    2b94:	ad b7       	in	r26, 0x3d	; 61
    2b96:	be b7       	in	r27, 0x3e	; 62
    2b98:	12 96       	adiw	r26, 0x02	; 2
    2b9a:	dc 93       	st	X, r29
    2b9c:	ce 93       	st	-X, r28
    2b9e:	11 97       	sbiw	r26, 0x01	; 1
    2ba0:	80 91 1f 07 	lds	r24, 0x071F
    2ba4:	82 83       	std	Z+2, r24	; 0x02
    2ba6:	13 82       	std	Z+3, r1	; 0x03
    2ba8:	14 83       	std	Z+4, r17	; 0x04
    2baa:	15 82       	std	Z+5, r1	; 0x05
    2bac:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2bb0:	8d b7       	in	r24, 0x3d	; 61
    2bb2:	9e b7       	in	r25, 0x3e	; 62
    2bb4:	06 96       	adiw	r24, 0x06	; 6
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	9e bf       	out	0x3e, r25	; 62
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	8d bf       	out	0x3d, r24	; 61
    2bc0:	84 ef       	ldi	r24, 0xF4	; 244
    2bc2:	91 e0       	ldi	r25, 0x01	; 1
    2bc4:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    2bc8:	14 30       	cpi	r17, 0x04	; 4
    2bca:	58 f2       	brcs	.-106    	; 0x2b62 <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    2bcc:	80 91 1f 07 	lds	r24, 0x071F
    2bd0:	80 93 20 07 	sts	0x0720, r24
}
    2bd4:	df 91       	pop	r29
    2bd6:	cf 91       	pop	r28
    2bd8:	1f 91       	pop	r17
    2bda:	08 95       	ret

00002bdc <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    2bdc:	1f 93       	push	r17
    2bde:	cf 93       	push	r28
    2be0:	df 93       	push	r29
    2be2:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2be4:	cf e4       	ldi	r28, 0x4F	; 79
    2be6:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    2be8:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    2bec:	81 30       	cpi	r24, 0x01	; 1
    2bee:	21 f4       	brne	.+8      	; 0x2bf8 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    2bf0:	80 91 1d 06 	lds	r24, 0x061D
    2bf4:	88 0f       	add	r24, r24
    2bf6:	06 c0       	rjmp	.+12     	; 0x2c04 <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    2bf8:	82 30       	cpi	r24, 0x02	; 2
    2bfa:	41 f4       	brne	.+16     	; 0x2c0c <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    2bfc:	80 91 1d 06 	lds	r24, 0x061D
    2c00:	88 0f       	add	r24, r24
			currentOrientation += 1;
    2c02:	8f 5f       	subi	r24, 0xFF	; 255
    2c04:	80 93 1d 06 	sts	0x061D, r24
			i++;
    2c08:	1f 5f       	subi	r17, 0xFF	; 255
    2c0a:	02 c0       	rjmp	.+4      	; 0x2c10 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    2c0c:	88 23       	and	r24, r24
    2c0e:	f1 f0       	breq	.+60     	; 0x2c4c <orientationInput+0x70>
			LCD_clear();
    2c10:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    2c14:	00 d0       	rcall	.+0      	; 0x2c16 <orientationInput+0x3a>
    2c16:	00 d0       	rcall	.+0      	; 0x2c18 <orientationInput+0x3c>
    2c18:	00 d0       	rcall	.+0      	; 0x2c1a <orientationInput+0x3e>
    2c1a:	ed b7       	in	r30, 0x3d	; 61
    2c1c:	fe b7       	in	r31, 0x3e	; 62
    2c1e:	31 96       	adiw	r30, 0x01	; 1
    2c20:	ad b7       	in	r26, 0x3d	; 61
    2c22:	be b7       	in	r27, 0x3e	; 62
    2c24:	12 96       	adiw	r26, 0x02	; 2
    2c26:	dc 93       	st	X, r29
    2c28:	ce 93       	st	-X, r28
    2c2a:	11 97       	sbiw	r26, 0x01	; 1
    2c2c:	80 91 1d 06 	lds	r24, 0x061D
    2c30:	82 83       	std	Z+2, r24	; 0x02
    2c32:	13 82       	std	Z+3, r1	; 0x03
    2c34:	14 83       	std	Z+4, r17	; 0x04
    2c36:	15 82       	std	Z+5, r1	; 0x05
    2c38:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
    2c3c:	8d b7       	in	r24, 0x3d	; 61
    2c3e:	9e b7       	in	r25, 0x3e	; 62
    2c40:	06 96       	adiw	r24, 0x06	; 6
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	f8 94       	cli
    2c46:	9e bf       	out	0x3e, r25	; 62
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    2c4c:	84 ef       	ldi	r24, 0xF4	; 244
    2c4e:	91 e0       	ldi	r25, 0x01	; 1
    2c50:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    2c54:	12 30       	cpi	r17, 0x02	; 2
    2c56:	40 f2       	brcs	.-112    	; 0x2be8 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    2c58:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
	switch(currentOrientation){
    2c5c:	80 91 1d 06 	lds	r24, 0x061D
    2c60:	81 30       	cpi	r24, 0x01	; 1
    2c62:	51 f0       	breq	.+20     	; 0x2c78 <orientationInput+0x9c>
    2c64:	81 30       	cpi	r24, 0x01	; 1
    2c66:	28 f0       	brcs	.+10     	; 0x2c72 <orientationInput+0x96>
    2c68:	82 30       	cpi	r24, 0x02	; 2
    2c6a:	49 f0       	breq	.+18     	; 0x2c7e <orientationInput+0xa2>
    2c6c:	83 30       	cpi	r24, 0x03	; 3
    2c6e:	71 f4       	brne	.+28     	; 0x2c8c <orientationInput+0xb0>
    2c70:	09 c0       	rjmp	.+18     	; 0x2c84 <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    2c72:	8e e7       	ldi	r24, 0x7E	; 126
    2c74:	92 e0       	ldi	r25, 0x02	; 2
    2c76:	08 c0       	rjmp	.+16     	; 0x2c88 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    2c78:	80 ea       	ldi	r24, 0xA0	; 160
    2c7a:	92 e0       	ldi	r25, 0x02	; 2
    2c7c:	05 c0       	rjmp	.+10     	; 0x2c88 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    2c7e:	81 ec       	ldi	r24, 0xC1	; 193
    2c80:	92 e0       	ldi	r25, 0x02	; 2
    2c82:	02 c0       	rjmp	.+4      	; 0x2c88 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    2c84:	83 ee       	ldi	r24, 0xE3	; 227
    2c86:	92 e0       	ldi	r25, 0x02	; 2
    2c88:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    2c8c:	80 91 1d 06 	lds	r24, 0x061D
    2c90:	80 93 1c 06 	sts	0x061C, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    2c94:	84 ef       	ldi	r24, 0xF4	; 244
    2c96:	91 e0       	ldi	r25, 0x01	; 1
    2c98:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
}
    2c9c:	df 91       	pop	r29
    2c9e:	cf 91       	pop	r28
    2ca0:	1f 91       	pop	r17
    2ca2:	08 95       	ret

00002ca4 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    2ca4:	cf 92       	push	r12
    2ca6:	df 92       	push	r13
    2ca8:	ef 92       	push	r14
    2caa:	ff 92       	push	r15
    2cac:	0f 93       	push	r16
    2cae:	1f 93       	push	r17
    2cb0:	df 93       	push	r29
    2cb2:	cf 93       	push	r28
    2cb4:	0f 92       	push	r0
    2cb6:	cd b7       	in	r28, 0x3d	; 61
    2cb8:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    2cba:	80 91 1f 07 	lds	r24, 0x071F
    2cbe:	f8 2e       	mov	r15, r24
    2cc0:	f6 94       	lsr	r15
    2cc2:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    2cc4:	98 2f       	mov	r25, r24
    2cc6:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    2cc8:	00 91 1d 06 	lds	r16, 0x061D
    2ccc:	cc 24       	eor	r12, r12
    2cce:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    2cd0:	f6 01       	movw	r30, r12
    2cd2:	e4 5f       	subi	r30, 0xF4	; 244
    2cd4:	f9 4f       	sbci	r31, 0xF9	; 249
    2cd6:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    2cd8:	ef 2d       	mov	r30, r15
    2cda:	f0 e0       	ldi	r31, 0x00	; 0
    2cdc:	ee 0f       	add	r30, r30
    2cde:	ff 1f       	adc	r31, r31
    2ce0:	ee 0f       	add	r30, r30
    2ce2:	ff 1f       	adc	r31, r31
    2ce4:	e9 0f       	add	r30, r25
    2ce6:	f1 1d       	adc	r31, r1
    2ce8:	e2 50       	subi	r30, 0x02	; 2
    2cea:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    2cec:	80 81       	ld	r24, Z
    2cee:	60 2f       	mov	r22, r16
    2cf0:	41 e0       	ldi	r20, 0x01	; 1
    2cf2:	99 83       	std	Y+1, r25	; 0x01
    2cf4:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    2cf8:	f6 01       	movw	r30, r12
    2cfa:	ed 55       	subi	r30, 0x5D	; 93
    2cfc:	f8 4f       	sbci	r31, 0xF8	; 248
    2cfe:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    2d00:	99 81       	ldd	r25, Y+1	; 0x01
    2d02:	12 30       	cpi	r17, 0x02	; 2
    2d04:	89 f4       	brne	.+34     	; 0x2d28 <getGateways+0x84>
			switch(curOrient){
    2d06:	01 30       	cpi	r16, 0x01	; 1
    2d08:	49 f0       	breq	.+18     	; 0x2d1c <getGateways+0x78>
    2d0a:	01 30       	cpi	r16, 0x01	; 1
    2d0c:	28 f0       	brcs	.+10     	; 0x2d18 <getGateways+0x74>
    2d0e:	02 30       	cpi	r16, 0x02	; 2
    2d10:	39 f0       	breq	.+14     	; 0x2d20 <getGateways+0x7c>
    2d12:	03 30       	cpi	r16, 0x03	; 3
    2d14:	89 f4       	brne	.+34     	; 0x2d38 <getGateways+0x94>
    2d16:	06 c0       	rjmp	.+12     	; 0x2d24 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    2d18:	fa 94       	dec	r15
    2d1a:	0e c0       	rjmp	.+28     	; 0x2d38 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    2d1c:	9f 5f       	subi	r25, 0xFF	; 255
    2d1e:	0c c0       	rjmp	.+24     	; 0x2d38 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    2d20:	f3 94       	inc	r15
    2d22:	0a c0       	rjmp	.+20     	; 0x2d38 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    2d24:	91 50       	subi	r25, 0x01	; 1
    2d26:	08 c0       	rjmp	.+16     	; 0x2d38 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    2d28:	13 30       	cpi	r17, 0x03	; 3
    2d2a:	11 f4       	brne	.+4      	; 0x2d30 <getGateways+0x8c>
			curOrient++;
    2d2c:	0f 5f       	subi	r16, 0xFF	; 255
    2d2e:	03 c0       	rjmp	.+6      	; 0x2d36 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    2d30:	11 30       	cpi	r17, 0x01	; 1
    2d32:	11 f4       	brne	.+4      	; 0x2d38 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    2d34:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    2d36:	03 70       	andi	r16, 0x03	; 3
    2d38:	08 94       	sec
    2d3a:	c1 1c       	adc	r12, r1
    2d3c:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2d3e:	8d e0       	ldi	r24, 0x0D	; 13
    2d40:	c8 16       	cp	r12, r24
    2d42:	d1 04       	cpc	r13, r1
    2d44:	29 f6       	brne	.-118    	; 0x2cd0 <getGateways+0x2c>
    2d46:	cc 24       	eor	r12, r12
    2d48:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2d4a:	e4 e0       	ldi	r30, 0x04	; 4
    2d4c:	ee 2e       	mov	r14, r30
    2d4e:	e3 e0       	ldi	r30, 0x03	; 3
    2d50:	fe 2e       	mov	r15, r30
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    2d52:	f6 01       	movw	r30, r12
    2d54:	ed 55       	subi	r30, 0x5D	; 93
    2d56:	f8 4f       	sbci	r31, 0xF8	; 248
    2d58:	00 81       	ld	r16, Z
		LCD_clear();
    2d5a:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    2d5e:	20 2f       	mov	r18, r16
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	ad b7       	in	r26, 0x3d	; 61
    2d64:	be b7       	in	r27, 0x3e	; 62
    2d66:	54 97       	sbiw	r26, 0x14	; 20
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	f8 94       	cli
    2d6c:	be bf       	out	0x3e, r27	; 62
    2d6e:	0f be       	out	0x3f, r0	; 63
    2d70:	ad bf       	out	0x3d, r26	; 61
    2d72:	ed b7       	in	r30, 0x3d	; 61
    2d74:	fe b7       	in	r31, 0x3e	; 62
    2d76:	31 96       	adiw	r30, 0x01	; 1
    2d78:	12 96       	adiw	r26, 0x02	; 2
    2d7a:	fc 92       	st	X, r15
    2d7c:	ee 92       	st	-X, r14
    2d7e:	11 97       	sbiw	r26, 0x01	; 1
    2d80:	d3 82       	std	Z+3, r13	; 0x03
    2d82:	c2 82       	std	Z+2, r12	; 0x02
    2d84:	11 27       	eor	r17, r17
    2d86:	07 fd       	sbrc	r16, 7
    2d88:	10 95       	com	r17
    2d8a:	00 27       	eor	r16, r16
    2d8c:	11 0f       	add	r17, r17
    2d8e:	00 1f       	adc	r16, r16
    2d90:	11 27       	eor	r17, r17
    2d92:	15 83       	std	Z+5, r17	; 0x05
    2d94:	04 83       	std	Z+4, r16	; 0x04
    2d96:	c9 01       	movw	r24, r18
    2d98:	66 e0       	ldi	r22, 0x06	; 6
    2d9a:	96 95       	lsr	r25
    2d9c:	87 95       	ror	r24
    2d9e:	6a 95       	dec	r22
    2da0:	e1 f7       	brne	.-8      	; 0x2d9a <getGateways+0xf6>
    2da2:	81 70       	andi	r24, 0x01	; 1
    2da4:	90 70       	andi	r25, 0x00	; 0
    2da6:	97 83       	std	Z+7, r25	; 0x07
    2da8:	86 83       	std	Z+6, r24	; 0x06
    2daa:	c9 01       	movw	r24, r18
    2dac:	55 e0       	ldi	r21, 0x05	; 5
    2dae:	96 95       	lsr	r25
    2db0:	87 95       	ror	r24
    2db2:	5a 95       	dec	r21
    2db4:	e1 f7       	brne	.-8      	; 0x2dae <getGateways+0x10a>
    2db6:	81 70       	andi	r24, 0x01	; 1
    2db8:	90 70       	andi	r25, 0x00	; 0
    2dba:	91 87       	std	Z+9, r25	; 0x09
    2dbc:	80 87       	std	Z+8, r24	; 0x08
    2dbe:	c9 01       	movw	r24, r18
    2dc0:	44 e0       	ldi	r20, 0x04	; 4
    2dc2:	96 95       	lsr	r25
    2dc4:	87 95       	ror	r24
    2dc6:	4a 95       	dec	r20
    2dc8:	e1 f7       	brne	.-8      	; 0x2dc2 <getGateways+0x11e>
    2dca:	81 70       	andi	r24, 0x01	; 1
    2dcc:	90 70       	andi	r25, 0x00	; 0
    2dce:	93 87       	std	Z+11, r25	; 0x0b
    2dd0:	82 87       	std	Z+10, r24	; 0x0a
    2dd2:	c9 01       	movw	r24, r18
    2dd4:	03 e0       	ldi	r16, 0x03	; 3
    2dd6:	96 95       	lsr	r25
    2dd8:	87 95       	ror	r24
    2dda:	0a 95       	dec	r16
    2ddc:	e1 f7       	brne	.-8      	; 0x2dd6 <getGateways+0x132>
    2dde:	81 70       	andi	r24, 0x01	; 1
    2de0:	90 70       	andi	r25, 0x00	; 0
    2de2:	95 87       	std	Z+13, r25	; 0x0d
    2de4:	84 87       	std	Z+12, r24	; 0x0c
    2de6:	c9 01       	movw	r24, r18
    2de8:	96 95       	lsr	r25
    2dea:	87 95       	ror	r24
    2dec:	96 95       	lsr	r25
    2dee:	87 95       	ror	r24
    2df0:	81 70       	andi	r24, 0x01	; 1
    2df2:	90 70       	andi	r25, 0x00	; 0
    2df4:	97 87       	std	Z+15, r25	; 0x0f
    2df6:	86 87       	std	Z+14, r24	; 0x0e
    2df8:	c9 01       	movw	r24, r18
    2dfa:	96 95       	lsr	r25
    2dfc:	87 95       	ror	r24
    2dfe:	81 70       	andi	r24, 0x01	; 1
    2e00:	90 70       	andi	r25, 0x00	; 0
    2e02:	91 8b       	std	Z+17, r25	; 0x11
    2e04:	80 8b       	std	Z+16, r24	; 0x10
    2e06:	21 70       	andi	r18, 0x01	; 1
    2e08:	30 70       	andi	r19, 0x00	; 0
    2e0a:	33 8b       	std	Z+19, r19	; 0x13
    2e0c:	22 8b       	std	Z+18, r18	; 0x12
    2e0e:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
		TMRSRVC_delay(1000);//wait 1 second
    2e12:	ed b7       	in	r30, 0x3d	; 61
    2e14:	fe b7       	in	r31, 0x3e	; 62
    2e16:	74 96       	adiw	r30, 0x14	; 20
    2e18:	0f b6       	in	r0, 0x3f	; 63
    2e1a:	f8 94       	cli
    2e1c:	fe bf       	out	0x3e, r31	; 62
    2e1e:	0f be       	out	0x3f, r0	; 63
    2e20:	ed bf       	out	0x3d, r30	; 61
    2e22:	88 ee       	ldi	r24, 0xE8	; 232
    2e24:	93 e0       	ldi	r25, 0x03	; 3
    2e26:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
    2e2a:	08 94       	sec
    2e2c:	c1 1c       	adc	r12, r1
    2e2e:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    2e30:	fd e0       	ldi	r31, 0x0D	; 13
    2e32:	cf 16       	cp	r12, r31
    2e34:	d1 04       	cpc	r13, r1
    2e36:	09 f0       	breq	.+2      	; 0x2e3a <getGateways+0x196>
    2e38:	8c cf       	rjmp	.-232    	; 0x2d52 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    2e3a:	0f 90       	pop	r0
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	ff 90       	pop	r15
    2e46:	ef 90       	pop	r14
    2e48:	df 90       	pop	r13
    2e4a:	cf 90       	pop	r12
    2e4c:	08 95       	ret

00002e4e <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    2e4e:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    2e50:	10 91 1f 07 	lds	r17, 0x071F
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    2e54:	80 91 88 05 	lds	r24, 0x0588
    2e58:	60 91 1d 06 	lds	r22, 0x061D
    2e5c:	40 e0       	ldi	r20, 0x00	; 0
    2e5e:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    2e62:	e1 2f       	mov	r30, r17
    2e64:	e6 95       	lsr	r30
    2e66:	e6 95       	lsr	r30
    2e68:	f0 e0       	ldi	r31, 0x00	; 0
    2e6a:	ee 0f       	add	r30, r30
    2e6c:	ff 1f       	adc	r31, r31
    2e6e:	ee 0f       	add	r30, r30
    2e70:	ff 1f       	adc	r31, r31
    2e72:	13 70       	andi	r17, 0x03	; 3
    2e74:	e1 0f       	add	r30, r17
    2e76:	f1 1d       	adc	r31, r1
    2e78:	e2 50       	subi	r30, 0x02	; 2
    2e7a:	fc 4f       	sbci	r31, 0xFC	; 252
    2e7c:	80 83       	st	Z, r24
}
    2e7e:	1f 91       	pop	r17
    2e80:	08 95       	ret

00002e82 <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char *ptROBOT_WORLD, unsigned char row, unsigned char col)
{	
    2e82:	df 92       	push	r13
    2e84:	ef 92       	push	r14
    2e86:	ff 92       	push	r15
    2e88:	0f 93       	push	r16
    2e8a:	1f 93       	push	r17
    2e8c:	06 2f       	mov	r16, r22
    2e8e:	14 2f       	mov	r17, r20
    2e90:	ff 24       	eor	r15, r15
    2e92:	2e c0       	rjmp	.+92     	; 0x2ef0 <matchBranch+0x6e>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    2e94:	05 30       	cpi	r16, 0x05	; 5
    2e96:	90 f5       	brcc	.+100    	; 0x2efc <matchBranch+0x7a>
    2e98:	15 30       	cpi	r17, 0x05	; 5
    2e9a:	80 f5       	brcc	.+96     	; 0x2efc <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    2e9c:	ef 2d       	mov	r30, r15
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	e5 59       	subi	r30, 0x95	; 149
    2ea2:	fb 4f       	sbci	r31, 0xFB	; 251
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    2ea4:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    2ea6:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    2ea8:	80 81       	ld	r24, Z
    2eaa:	6e 2d       	mov	r22, r14
    2eac:	40 e0       	ldi	r20, 0x00	; 0
    2eae:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    2eb2:	e0 2f       	mov	r30, r16
    2eb4:	f0 e0       	ldi	r31, 0x00	; 0
    2eb6:	ee 0f       	add	r30, r30
    2eb8:	ff 1f       	adc	r31, r31
    2eba:	ee 0f       	add	r30, r30
    2ebc:	ff 1f       	adc	r31, r31
    2ebe:	e1 0f       	add	r30, r17
    2ec0:	f1 1d       	adc	r31, r1
    2ec2:	e2 50       	subi	r30, 0x02	; 2
    2ec4:	fc 4f       	sbci	r31, 0xFC	; 252
    2ec6:	90 81       	ld	r25, Z
    2ec8:	89 17       	cp	r24, r25
    2eca:	c1 f4       	brne	.+48     	; 0x2efc <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		currentCellWorld = (curRow << 2) + curCol;
    2ecc:	80 2f       	mov	r24, r16
    2ece:	88 0f       	add	r24, r24
    2ed0:	88 0f       	add	r24, r24
    2ed2:	81 0f       	add	r24, r17
    2ed4:	80 93 1f 07 	sts	0x071F, r24
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		currentCellWorld = shiftMap(currentCellWorld, curMove, curOrnt);
    2ed8:	6d 2d       	mov	r22, r13
    2eda:	4e 2d       	mov	r20, r14
    2edc:	0e 94 13 13 	call	0x2626	; 0x2626 <shiftMap>
    2ee0:	80 93 1f 07 	sts	0x071F, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = currentCellWorld >> 2;
    2ee4:	08 2f       	mov	r16, r24
    2ee6:	06 95       	lsr	r16
    2ee8:	06 95       	lsr	r16
		curCol = currentCellWorld & 0b0011;
    2eea:	18 2f       	mov	r17, r24
    2eec:	13 70       	andi	r17, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    2eee:	f3 94       	inc	r15
    2ef0:	80 91 7a 04 	lds	r24, 0x047A
    2ef4:	f8 16       	cp	r15, r24
    2ef6:	70 f2       	brcs	.-100    	; 0x2e94 <matchBranch+0x12>
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <matchBranch+0x7c>
    2efc:	80 e0       	ldi	r24, 0x00	; 0
		curCol = currentCellWorld & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	return SUCCESS;
}
    2efe:	1f 91       	pop	r17
    2f00:	0f 91       	pop	r16
    2f02:	ff 90       	pop	r15
    2f04:	ef 90       	pop	r14
    2f06:	df 90       	pop	r13
    2f08:	08 95       	ret

00002f0a <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    2f0a:	df 92       	push	r13
    2f0c:	ef 92       	push	r14
    2f0e:	ff 92       	push	r15
    2f10:	0f 93       	push	r16
    2f12:	1f 93       	push	r17
    2f14:	cf 93       	push	r28
    2f16:	df 93       	push	r29
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    2f18:	d0 90 6b 04 	lds	r13, 0x046B
	// Local variables for nested for loops 
	unsigned char row, col;
	// Stores the number of matching seeds
	matchSeeds = 0;
    2f1c:	10 92 b5 07 	sts	0x07B5, r1
    2f20:	00 e0       	ldi	r16, 0x00	; 0
    2f22:	10 e0       	ldi	r17, 0x00	; 0
    2f24:	1a c0       	rjmp	.+52     	; 0x2f5a <localizeGateway+0x50>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    2f26:	88 81       	ld	r24, Y
    2f28:	d8 16       	cp	r13, r24
    2f2a:	69 f4       	brne	.+26     	; 0x2f46 <localizeGateway+0x3c>
			
				//Check to see if we have a matching branch
				if(matchBranch(*ROBOT_WORLD,row,col)){
    2f2c:	8e ef       	ldi	r24, 0xFE	; 254
    2f2e:	93 e0       	ldi	r25, 0x03	; 3
    2f30:	6e 2d       	mov	r22, r14
    2f32:	4f 2d       	mov	r20, r15
    2f34:	0e 94 41 17 	call	0x2e82	; 0x2e82 <matchBranch>
    2f38:	88 23       	and	r24, r24
    2f3a:	29 f0       	breq	.+10     	; 0x2f46 <localizeGateway+0x3c>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    2f3c:	80 91 b5 07 	lds	r24, 0x07B5
    2f40:	8f 5f       	subi	r24, 0xFF	; 255
    2f42:	80 93 b5 07 	sts	0x07B5, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    2f46:	f3 94       	inc	r15
    2f48:	21 96       	adiw	r28, 0x01	; 1
    2f4a:	84 e0       	ldi	r24, 0x04	; 4
    2f4c:	f8 16       	cp	r15, r24
    2f4e:	59 f7       	brne	.-42     	; 0x2f26 <localizeGateway+0x1c>
    2f50:	0f 5f       	subi	r16, 0xFF	; 255
    2f52:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    2f54:	04 30       	cpi	r16, 0x04	; 4
    2f56:	11 05       	cpc	r17, r1
    2f58:	51 f0       	breq	.+20     	; 0x2f6e <localizeGateway+0x64>
    2f5a:	e0 2e       	mov	r14, r16
    2f5c:	e8 01       	movw	r28, r16
    2f5e:	cc 0f       	add	r28, r28
    2f60:	dd 1f       	adc	r29, r29
    2f62:	cc 0f       	add	r28, r28
    2f64:	dd 1f       	adc	r29, r29
    2f66:	c2 50       	subi	r28, 0x02	; 2
    2f68:	dc 4f       	sbci	r29, 0xFC	; 252
    2f6a:	ff 24       	eor	r15, r15
    2f6c:	dc cf       	rjmp	.-72     	; 0x2f26 <localizeGateway+0x1c>
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	80 91 b5 07 	lds	r24, 0x07B5
    2f74:	81 30       	cpi	r24, 0x01	; 1
    2f76:	09 f0       	breq	.+2      	; 0x2f7a <localizeGateway+0x70>
    2f78:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    2f7a:	89 2f       	mov	r24, r25
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	1f 91       	pop	r17
    2f82:	0f 91       	pop	r16
    2f84:	ff 90       	pop	r15
    2f86:	ef 90       	pop	r14
    2f88:	df 90       	pop	r13
    2f8a:	08 95       	ret

00002f8c <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    2f8c:	8f 92       	push	r8
    2f8e:	af 92       	push	r10
    2f90:	bf 92       	push	r11
    2f92:	cf 92       	push	r12
    2f94:	df 92       	push	r13
    2f96:	ef 92       	push	r14
    2f98:	ff 92       	push	r15
    2f9a:	0f 93       	push	r16
    2f9c:	1f 93       	push	r17
	char isDone = 0;
	pidController(0,RESET);
    2f9e:	60 e0       	ldi	r22, 0x00	; 0
    2fa0:	70 e0       	ldi	r23, 0x00	; 0
    2fa2:	80 e0       	ldi	r24, 0x00	; 0
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	41 e0       	ldi	r20, 0x01	; 1
    2fa8:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
	switch(currentMove){
    2fac:	80 91 b3 07 	lds	r24, 0x07B3
    2fb0:	82 30       	cpi	r24, 0x02	; 2
    2fb2:	69 f0       	breq	.+26     	; 0x2fce <moveMap+0x42>
    2fb4:	83 30       	cpi	r24, 0x03	; 3
    2fb6:	c1 f0       	breq	.+48     	; 0x2fe8 <moveMap+0x5c>
    2fb8:	81 30       	cpi	r24, 0x01	; 1
    2fba:	d1 f5       	brne	.+116    	; 0x3030 <moveMap+0xa4>
		case MOVE_LEFT:
			move_arc_stwt(POINT_TURN, LEFT_TURN, 30, 30, 0);
    2fbc:	60 e0       	ldi	r22, 0x00	; 0
    2fbe:	70 e0       	ldi	r23, 0x00	; 0
    2fc0:	80 e0       	ldi	r24, 0x00	; 0
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	20 e0       	ldi	r18, 0x00	; 0
    2fc6:	30 e0       	ldi	r19, 0x00	; 0
    2fc8:	4c e8       	ldi	r20, 0x8C	; 140
    2fca:	51 ec       	ldi	r21, 0xC1	; 193
    2fcc:	15 c0       	rjmp	.+42     	; 0x2ff8 <moveMap+0x6c>
			TMRSRVC_delay(BRAKE_DELAY);
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
    2fce:	60 e0       	ldi	r22, 0x00	; 0
    2fd0:	70 e0       	ldi	r23, 0x00	; 0
    2fd2:	86 e9       	ldi	r24, 0x96	; 150
    2fd4:	93 e4       	ldi	r25, 0x43	; 67
    2fd6:	0e 94 75 0d 	call	0x1aea	; 0x1aea <setOdometry>
			while(!isDone){
				checkIR();
    2fda:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <checkIR>
				isDone = moveWall();
    2fde:	0e 94 3f 10 	call	0x207e	; 0x207e <moveWall>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			break;
		case MOVE_FORWARD:
		
			setOdometry(WALL_STEP);
			while(!isDone){
    2fe2:	88 23       	and	r24, r24
    2fe4:	d1 f3       	breq	.-12     	; 0x2fda <moveMap+0x4e>
    2fe6:	17 c0       	rjmp	.+46     	; 0x3016 <moveMap+0x8a>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
			
			// move_arc_stwt(NO_TURN, 45, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 30, 30, 0);
    2fe8:	60 e0       	ldi	r22, 0x00	; 0
    2fea:	70 e0       	ldi	r23, 0x00	; 0
    2fec:	80 e0       	ldi	r24, 0x00	; 0
    2fee:	90 e0       	ldi	r25, 0x00	; 0
    2ff0:	20 e0       	ldi	r18, 0x00	; 0
    2ff2:	30 e0       	ldi	r19, 0x00	; 0
    2ff4:	4c e8       	ldi	r20, 0x8C	; 140
    2ff6:	51 e4       	ldi	r21, 0x41	; 65
    2ff8:	0f 2e       	mov	r0, r31
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	ef 2e       	mov	r14, r31
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	ff 2e       	mov	r15, r31
    3002:	f0 ef       	ldi	r31, 0xF0	; 240
    3004:	0f 2f       	mov	r16, r31
    3006:	f1 e4       	ldi	r31, 0x41	; 65
    3008:	1f 2f       	mov	r17, r31
    300a:	f0 2d       	mov	r31, r0
    300c:	57 01       	movw	r10, r14
    300e:	68 01       	movw	r12, r16
    3010:	88 24       	eor	r8, r8
    3012:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_ON);
    3016:	82 e0       	ldi	r24, 0x02	; 2
    3018:	61 e0       	ldi	r22, 0x01	; 1
    301a:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <STEPPER_stop>
			TMRSRVC_delay(BRAKE_DELAY);
    301e:	82 e3       	ldi	r24, 0x32	; 50
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
			STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    3026:	82 e0       	ldi	r24, 0x02	; 2
    3028:	60 e0       	ldi	r22, 0x00	; 0
    302a:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <STEPPER_stop>
    302e:	0b c0       	rjmp	.+22     	; 0x3046 <moveMap+0xba>
			break;
		default:
			LCD_printf("Whatz2?!");
    3030:	00 d0       	rcall	.+0      	; 0x3032 <moveMap+0xa6>
    3032:	86 e5       	ldi	r24, 0x56	; 86
    3034:	91 e0       	ldi	r25, 0x01	; 1
    3036:	ed b7       	in	r30, 0x3d	; 61
    3038:	fe b7       	in	r31, 0x3e	; 62
    303a:	92 83       	std	Z+2, r25	; 0x02
    303c:	81 83       	std	Z+1, r24	; 0x01
    303e:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
			break;
	}
}
    3046:	1f 91       	pop	r17
    3048:	0f 91       	pop	r16
    304a:	ff 90       	pop	r15
    304c:	ef 90       	pop	r14
    304e:	df 90       	pop	r13
    3050:	cf 90       	pop	r12
    3052:	bf 90       	pop	r11
    3054:	af 90       	pop	r10
    3056:	8f 90       	pop	r8
    3058:	08 95       	ret

0000305a <CBOT_main>:
********************************************************************/

void CBOT_main( void )
{
	// initialize the robot
	initializeRobot();
    305a:	0e 94 87 11 	call	0x230e	; 0x230e <initializeRobot>
	
	// // Loop variables for print debug
	// unsigned char i, branch, move, orent;
	
	// Display the map
	LCD_clear();
    305e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    3062:	86 e2       	ldi	r24, 0x26	; 38
    3064:	93 e0       	ldi	r25, 0x03	; 3
    3066:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <puts>
	printMap(RESET);
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <printMap>
	TMRSRVC_delay(1000);//wait 1 seconds
    3070:	88 ee       	ldi	r24, 0xE8	; 232
    3072:	93 e0       	ldi	r25, 0x03	; 3
    3074:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
	LCD_clear();
    3078:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
    307c:	10 c0       	rjmp	.+32     	; 0x309e <CBOT_main+0x44>
	
	// Localization Loop 
	while(isLost)
	{	
		//Sense Gateway
		checkIR();	
    307e:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <checkIR>
		checkWorld();
    3082:	0e 94 a7 12 	call	0x254e	; 0x254e <checkWorld>
		
		//Plan using the Gateway
		planGateway();
    3086:	0e 94 78 13 	call	0x26f0	; 0x26f0 <planGateway>
		
		//Localize from Gateways?
		isLost = localizeGateway();
    308a:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <localizeGateway>
    308e:	80 93 fd 03 	sts	0x03FD, r24
		// LCD_printf("seeds: %1d", matchSeeds);
		
		// TMRSRVC_delay(5000);//wait 5 seconds
		
		//Act on the Gateway
		moveMap();
    3092:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <moveMap>
		
		// Break if not isLost
		if(!isLost){
    3096:	80 91 fd 03 	lds	r24, 0x03FD
    309a:	88 23       	and	r24, r24
    309c:	21 f0       	breq	.+8      	; 0x30a6 <CBOT_main+0x4c>
	printMap(RESET);
	TMRSRVC_delay(1000);//wait 1 seconds
	LCD_clear();
	
	// Localization Loop 
	while(isLost)
    309e:	80 91 fd 03 	lds	r24, 0x03FD
    30a2:	88 23       	and	r24, r24
    30a4:	61 f7       	brne	.-40     	; 0x307e <CBOT_main+0x24>
			break;
		}
	}
	
	
	LCD_clear();
    30a6:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
	LCD_printf("LOLZ\nI'm found!");
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <CBOT_main+0x52>
    30ac:	87 e3       	ldi	r24, 0x37	; 55
    30ae:	93 e0       	ldi	r25, 0x03	; 3
    30b0:	ed b7       	in	r30, 0x3d	; 61
    30b2:	fe b7       	in	r31, 0x3e	; 62
    30b4:	92 83       	std	Z+2, r25	; 0x02
    30b6:	81 83       	std	Z+1, r24	; 0x01
    30b8:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
	TMRSRVC_delay(3000);//wait 3 seconds
    30bc:	0f 90       	pop	r0
    30be:	0f 90       	pop	r0
    30c0:	88 eb       	ldi	r24, 0xB8	; 184
    30c2:	9b e0       	ldi	r25, 0x0B	; 11
    30c4:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
	
	LCD_clear();
    30c8:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
	LCD_printf("      New Map\n\n\n\n");
    30cc:	86 e2       	ldi	r24, 0x26	; 38
    30ce:	93 e0       	ldi	r25, 0x03	; 3
    30d0:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <puts>
	printMap(RESET);
    30d4:	81 e0       	ldi	r24, 0x01	; 1
    30d6:	0e 94 c6 0f 	call	0x1f8c	; 0x1f8c <printMap>
	TMRSRVC_delay(5000);//wait 5 seconds
    30da:	88 e8       	ldi	r24, 0x88	; 136
    30dc:	93 e1       	ldi	r25, 0x13	; 19
    30de:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
	LCD_clear();
    30e2:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
	
	// currentCellWorld = 0b0000;
	currentGoalWorld = 12;
    30e6:	8c e0       	ldi	r24, 0x0C	; 12
    30e8:	80 93 8e 05 	sts	0x058E, r24
	
	// Make metric map
	wavefrontMake();
    30ec:	0e 94 3c 12 	call	0x2478	; 0x2478 <wavefrontMake>
    30f0:	5a c0       	rjmp	.+180    	; 0x31a6 <CBOT_main+0x14c>
	
	// Metric Loop 
	while(!isGoal){
	
		LCD_clear();
    30f2:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
		switch(currentOrientation){
    30f6:	80 91 1d 06 	lds	r24, 0x061D
    30fa:	81 30       	cpi	r24, 0x01	; 1
    30fc:	51 f0       	breq	.+20     	; 0x3112 <CBOT_main+0xb8>
    30fe:	81 30       	cpi	r24, 0x01	; 1
    3100:	28 f0       	brcs	.+10     	; 0x310c <CBOT_main+0xb2>
    3102:	82 30       	cpi	r24, 0x02	; 2
    3104:	49 f0       	breq	.+18     	; 0x3118 <CBOT_main+0xbe>
    3106:	83 30       	cpi	r24, 0x03	; 3
    3108:	71 f4       	brne	.+28     	; 0x3126 <CBOT_main+0xcc>
    310a:	09 c0       	rjmp	.+18     	; 0x311e <CBOT_main+0xc4>
			case NORTH:
				LCD_printf("CurtOrent:NORTH\n");
    310c:	87 e4       	ldi	r24, 0x47	; 71
    310e:	93 e0       	ldi	r25, 0x03	; 3
    3110:	08 c0       	rjmp	.+16     	; 0x3122 <CBOT_main+0xc8>
				break;
			case EAST:
				LCD_printf("CurtOrent:EAST\n");
    3112:	87 e5       	ldi	r24, 0x57	; 87
    3114:	93 e0       	ldi	r25, 0x03	; 3
    3116:	05 c0       	rjmp	.+10     	; 0x3122 <CBOT_main+0xc8>
				break;
			case SOUTH:
				LCD_printf("CurtOrent:SOUTH\n");
    3118:	86 e6       	ldi	r24, 0x66	; 102
    311a:	93 e0       	ldi	r25, 0x03	; 3
    311c:	02 c0       	rjmp	.+4      	; 0x3122 <CBOT_main+0xc8>
				break;
			case WEST:
				LCD_printf("CurtOrent:WEST\n");
    311e:	86 e7       	ldi	r24, 0x76	; 118
    3120:	93 e0       	ldi	r25, 0x03	; 3
    3122:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <puts>
			default:
				break;
		}
	
		// Find the next orentation
		isGoal = fourNeighborSearch(currentCellWorld);
    3126:	80 91 1f 07 	lds	r24, 0x071F
    312a:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <fourNeighborSearch>
    312e:	80 93 6a 04 	sts	0x046A, r24
		if(isGoal){
    3132:	88 23       	and	r24, r24
    3134:	e9 f5       	brne	.+122    	; 0x31b0 <CBOT_main+0x156>
		
		// if(nextOrientation != SOUTH){
			// break;
		// }
				
		switch(nextOrientation){
    3136:	80 91 1e 06 	lds	r24, 0x061E
    313a:	81 30       	cpi	r24, 0x01	; 1
    313c:	51 f0       	breq	.+20     	; 0x3152 <CBOT_main+0xf8>
    313e:	81 30       	cpi	r24, 0x01	; 1
    3140:	28 f0       	brcs	.+10     	; 0x314c <CBOT_main+0xf2>
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	49 f0       	breq	.+18     	; 0x3158 <CBOT_main+0xfe>
    3146:	83 30       	cpi	r24, 0x03	; 3
    3148:	71 f4       	brne	.+28     	; 0x3166 <CBOT_main+0x10c>
    314a:	09 c0       	rjmp	.+18     	; 0x315e <CBOT_main+0x104>
			case NORTH:
				LCD_printf("NextOrent:NORTH\n");
    314c:	85 e8       	ldi	r24, 0x85	; 133
    314e:	93 e0       	ldi	r25, 0x03	; 3
    3150:	08 c0       	rjmp	.+16     	; 0x3162 <CBOT_main+0x108>
				break;
			case EAST:
				LCD_printf("NextOrent:EAST\n");
    3152:	85 e9       	ldi	r24, 0x95	; 149
    3154:	93 e0       	ldi	r25, 0x03	; 3
    3156:	05 c0       	rjmp	.+10     	; 0x3162 <CBOT_main+0x108>
				break;
			case SOUTH:
				LCD_printf("NextOrent:SOUTH\n");
    3158:	84 ea       	ldi	r24, 0xA4	; 164
    315a:	93 e0       	ldi	r25, 0x03	; 3
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <CBOT_main+0x108>
				break;
			case WEST:
				LCD_printf("NextOrent:WEST\n");
    315e:	84 eb       	ldi	r24, 0xB4	; 180
    3160:	93 e0       	ldi	r25, 0x03	; 3
    3162:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <puts>
				break;
			default:
				break;
		}
		
		switch(currentMove){
    3166:	80 91 b3 07 	lds	r24, 0x07B3
    316a:	82 30       	cpi	r24, 0x02	; 2
    316c:	51 f0       	breq	.+20     	; 0x3182 <CBOT_main+0x128>
    316e:	83 30       	cpi	r24, 0x03	; 3
    3170:	29 f0       	breq	.+10     	; 0x317c <CBOT_main+0x122>
    3172:	81 30       	cpi	r24, 0x01	; 1
    3174:	51 f4       	brne	.+20     	; 0x318a <CBOT_main+0x130>
			case MOVE_LEFT:
				LCD_printf("CurMOVE:LEFT\n");
    3176:	83 ec       	ldi	r24, 0xC3	; 195
    3178:	93 e0       	ldi	r25, 0x03	; 3
    317a:	05 c0       	rjmp	.+10     	; 0x3186 <CBOT_main+0x12c>
				break;
			case MOVE_RIGHT:
				LCD_printf("CurMOVE:RIGHT\n");
    317c:	80 ed       	ldi	r24, 0xD0	; 208
    317e:	93 e0       	ldi	r25, 0x03	; 3
    3180:	02 c0       	rjmp	.+4      	; 0x3186 <CBOT_main+0x12c>
				break;
			case MOVE_FORWARD:
				LCD_printf("CurMOVE:FORWARD\n");
    3182:	8e ed       	ldi	r24, 0xDE	; 222
    3184:	93 e0       	ldi	r25, 0x03	; 3
    3186:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <puts>
			default:
				break;
		}
		
		// Plan using metric map and next orientation
		planMetric();
    318a:	0e 94 b9 13 	call	0x2772	; 0x2772 <planMetric>
		
		// Act on the move
		moveMap();
    318e:	0e 94 c6 17 	call	0x2f8c	; 0x2f8c <moveMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    3192:	80 91 1f 07 	lds	r24, 0x071F
    3196:	60 91 b3 07 	lds	r22, 0x07B3
    319a:	40 91 1d 06 	lds	r20, 0x061D
    319e:	0e 94 13 13 	call	0x2626	; 0x2626 <shiftMap>
    31a2:	80 93 1f 07 	sts	0x071F, r24
	
	// Make metric map
	wavefrontMake();
	
	// Metric Loop 
	while(!isGoal){
    31a6:	80 91 6a 04 	lds	r24, 0x046A
    31aa:	88 23       	and	r24, r24
    31ac:	09 f4       	brne	.+2      	; 0x31b0 <CBOT_main+0x156>
    31ae:	a1 cf       	rjmp	.-190    	; 0x30f2 <CBOT_main+0x98>
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
		// TMRSRVC_delay(2000);//wait 1 seconds
	}
	
	LCD_clear();
    31b0:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
	LCD_printf("LOLZ\nI'm here!");
    31b4:	00 d0       	rcall	.+0      	; 0x31b6 <CBOT_main+0x15c>
    31b6:	8e ee       	ldi	r24, 0xEE	; 238
    31b8:	93 e0       	ldi	r25, 0x03	; 3
    31ba:	ed b7       	in	r30, 0x3d	; 61
    31bc:	fe b7       	in	r31, 0x3e	; 62
    31be:	92 83       	std	Z+2, r25	; 0x02
    31c0:	81 83       	std	Z+1, r24	; 0x01
    31c2:	0e 94 d4 35 	call	0x6ba8	; 0x6ba8 <printf>
	STEPPER_stop(STEPPER_BOTH, STEPPER_BRK_OFF);
    31c6:	0f 90       	pop	r0
    31c8:	0f 90       	pop	r0
    31ca:	82 e0       	ldi	r24, 0x02	; 2
    31cc:	60 e0       	ldi	r22, 0x00	; 0
    31ce:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <STEPPER_stop>
	TMRSRVC_delay(5000);//wait 3 seconds
    31d2:	88 e8       	ldi	r24, 0x88	; 136
    31d4:	93 e1       	ldi	r25, 0x13	; 19
    31d6:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
		// LCD_clear();
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/
}// end the CBOT_main()
    31da:	08 95       	ret

000031dc <ADC_open>:
    31dc:	8f e0       	ldi	r24, 0x0F	; 15
    31de:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    31e2:	88 23       	and	r24, r24
    31e4:	31 f4       	brne	.+12     	; 0x31f2 <ADC_open+0x16>
    31e6:	0e 94 71 21 	call	0x42e2	; 0x42e2 <__ADC_init>
    31ea:	8f e0       	ldi	r24, 0x0F	; 15
    31ec:	61 e0       	ldi	r22, 0x01	; 1
    31ee:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    31f2:	8f e0       	ldi	r24, 0x0F	; 15
    31f4:	91 e0       	ldi	r25, 0x01	; 1
    31f6:	08 95       	ret

000031f8 <ADC_sample>:
    31f8:	8f e0       	ldi	r24, 0x0F	; 15
    31fa:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    31fe:	81 30       	cpi	r24, 0x01	; 1
    3200:	19 f0       	breq	.+6      	; 0x3208 <ADC_sample+0x10>
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	13 c0       	rjmp	.+38     	; 0x322e <ADC_sample+0x36>
    3208:	80 91 7a 00 	lds	r24, 0x007A
    320c:	80 64       	ori	r24, 0x40	; 64
    320e:	80 93 7a 00 	sts	0x007A, r24
    3212:	80 91 7a 00 	lds	r24, 0x007A
    3216:	86 fd       	sbrc	r24, 6
    3218:	fc cf       	rjmp	.-8      	; 0x3212 <ADC_sample+0x1a>
    321a:	30 91 78 00 	lds	r19, 0x0078
    321e:	20 91 79 00 	lds	r18, 0x0079
    3222:	92 2f       	mov	r25, r18
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	23 2f       	mov	r18, r19
    3228:	30 e0       	ldi	r19, 0x00	; 0
    322a:	28 2b       	or	r18, r24
    322c:	39 2b       	or	r19, r25
    322e:	c9 01       	movw	r24, r18
    3230:	08 95       	ret

00003232 <ADC_set_channel>:
    3232:	58 2f       	mov	r21, r24
    3234:	80 91 0e 04 	lds	r24, 0x040E
    3238:	88 30       	cpi	r24, 0x08	; 8
    323a:	d8 f4       	brcc	.+54     	; 0x3272 <ADC_set_channel+0x40>
    323c:	40 91 7e 00 	lds	r20, 0x007E
    3240:	21 e0       	ldi	r18, 0x01	; 1
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	b9 01       	movw	r22, r18
    3246:	02 c0       	rjmp	.+4      	; 0x324c <ADC_set_channel+0x1a>
    3248:	66 0f       	add	r22, r22
    324a:	77 1f       	adc	r23, r23
    324c:	8a 95       	dec	r24
    324e:	e2 f7       	brpl	.-8      	; 0x3248 <ADC_set_channel+0x16>
    3250:	cb 01       	movw	r24, r22
    3252:	80 95       	com	r24
    3254:	84 23       	and	r24, r20
    3256:	80 93 7e 00 	sts	0x007E, r24
    325a:	80 91 7e 00 	lds	r24, 0x007E
    325e:	05 2e       	mov	r0, r21
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <ADC_set_channel+0x34>
    3262:	22 0f       	add	r18, r18
    3264:	33 1f       	adc	r19, r19
    3266:	0a 94       	dec	r0
    3268:	e2 f7       	brpl	.-8      	; 0x3262 <ADC_set_channel+0x30>
    326a:	82 2b       	or	r24, r18
    326c:	80 93 7e 00 	sts	0x007E, r24
    3270:	0d c0       	rjmp	.+26     	; 0x328c <ADC_set_channel+0x5a>
    3272:	20 91 7e 00 	lds	r18, 0x007E
    3276:	81 e0       	ldi	r24, 0x01	; 1
    3278:	90 e0       	ldi	r25, 0x00	; 0
    327a:	05 2e       	mov	r0, r21
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <ADC_set_channel+0x50>
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	0a 94       	dec	r0
    3284:	e2 f7       	brpl	.-8      	; 0x327e <ADC_set_channel+0x4c>
    3286:	28 2b       	or	r18, r24
    3288:	20 93 7e 00 	sts	0x007E, r18
    328c:	50 93 0e 04 	sts	0x040E, r21
    3290:	80 91 7c 00 	lds	r24, 0x007C
    3294:	5f 71       	andi	r21, 0x1F	; 31
    3296:	80 7e       	andi	r24, 0xE0	; 224
    3298:	85 2b       	or	r24, r21
    329a:	80 93 7c 00 	sts	0x007C, r24
    329e:	08 95       	ret

000032a0 <ADC_set_VREF>:
    32a0:	ec e7       	ldi	r30, 0x7C	; 124
    32a2:	f0 e0       	ldi	r31, 0x00	; 0
    32a4:	90 81       	ld	r25, Z
    32a6:	82 95       	swap	r24
    32a8:	88 0f       	add	r24, r24
    32aa:	88 0f       	add	r24, r24
    32ac:	80 7c       	andi	r24, 0xC0	; 192
    32ae:	9f 73       	andi	r25, 0x3F	; 63
    32b0:	98 2b       	or	r25, r24
    32b2:	90 83       	st	Z, r25
    32b4:	08 95       	ret

000032b6 <main>:
    32b6:	0e 94 8a 21 	call	0x4314	; 0x4314 <CBOT_ISR_init>
    32ba:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <CBOT_init>
    32be:	0e 94 2d 18 	call	0x305a	; 0x305a <CBOT_main>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	90 e0       	ldi	r25, 0x00	; 0
    32c6:	08 95       	ret

000032c8 <LCD_clear>:
    32c8:	0f 93       	push	r16
    32ca:	1f 93       	push	r17
    32cc:	80 e4       	ldi	r24, 0x40	; 64
    32ce:	60 e0       	ldi	r22, 0x00	; 0
    32d0:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    32d4:	00 e0       	ldi	r16, 0x00	; 0
    32d6:	80 2f       	mov	r24, r16
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_set_PGC_addr>
    32de:	10 e0       	ldi	r17, 0x00	; 0
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	61 e0       	ldi	r22, 0x01	; 1
    32e4:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    32e8:	1f 5f       	subi	r17, 0xFF	; 255
    32ea:	10 38       	cpi	r17, 0x80	; 128
    32ec:	c9 f7       	brne	.-14     	; 0x32e0 <LCD_clear+0x18>
    32ee:	0f 5f       	subi	r16, 0xFF	; 255
    32f0:	04 30       	cpi	r16, 0x04	; 4
    32f2:	89 f7       	brne	.-30     	; 0x32d6 <LCD_clear+0xe>
    32f4:	83 e0       	ldi	r24, 0x03	; 3
    32f6:	60 e0       	ldi	r22, 0x00	; 0
    32f8:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_set_next_PGC>
    32fc:	1f 91       	pop	r17
    32fe:	0f 91       	pop	r16
    3300:	08 95       	ret

00003302 <LCD_open>:
    3302:	0f 93       	push	r16
    3304:	1f 93       	push	r17
    3306:	82 e0       	ldi	r24, 0x02	; 2
    3308:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    330c:	88 23       	and	r24, r24
    330e:	11 f4       	brne	.+4      	; 0x3314 <LCD_open+0x12>
    3310:	82 e0       	ldi	r24, 0x02	; 2
    3312:	06 c0       	rjmp	.+12     	; 0x3320 <LCD_open+0x1e>
    3314:	81 e0       	ldi	r24, 0x01	; 1
    3316:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    331a:	88 23       	and	r24, r24
    331c:	19 f4       	brne	.+6      	; 0x3324 <LCD_open+0x22>
    331e:	81 e0       	ldi	r24, 0x01	; 1
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	6d c0       	rjmp	.+218    	; 0x33fe <LCD_open+0xfc>
    3324:	0e 94 f2 23 	call	0x47e4	; 0x47e4 <__LCD_init>
    3328:	85 e0       	ldi	r24, 0x05	; 5
    332a:	61 e0       	ldi	r22, 0x01	; 1
    332c:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    3330:	8e ea       	ldi	r24, 0xAE	; 174
    3332:	60 e0       	ldi	r22, 0x00	; 0
    3334:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    3338:	82 ea       	ldi	r24, 0xA2	; 162
    333a:	60 e0       	ldi	r22, 0x00	; 0
    333c:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    3340:	80 ea       	ldi	r24, 0xA0	; 160
    3342:	60 e0       	ldi	r22, 0x00	; 0
    3344:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    3348:	00 e5       	ldi	r16, 0x50	; 80
    334a:	13 ec       	ldi	r17, 0xC3	; 195
    334c:	c8 01       	movw	r24, r16
    334e:	01 97       	sbiw	r24, 0x01	; 1
    3350:	f1 f7       	brne	.-4      	; 0x334e <LCD_open+0x4c>
    3352:	80 ec       	ldi	r24, 0xC0	; 192
    3354:	60 e0       	ldi	r22, 0x00	; 0
    3356:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    335a:	8f e2       	ldi	r24, 0x2F	; 47
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    3362:	81 e8       	ldi	r24, 0x81	; 129
    3364:	60 e0       	ldi	r22, 0x00	; 0
    3366:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    336a:	86 e1       	ldi	r24, 0x16	; 22
    336c:	60 e0       	ldi	r22, 0x00	; 0
    336e:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    3372:	82 e2       	ldi	r24, 0x22	; 34
    3374:	60 e0       	ldi	r22, 0x00	; 0
    3376:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    337a:	c8 01       	movw	r24, r16
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <LCD_open+0x7a>
    3380:	8f ea       	ldi	r24, 0xAF	; 175
    3382:	60 e0       	ldi	r22, 0x00	; 0
    3384:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    3388:	86 ea       	ldi	r24, 0xA6	; 166
    338a:	60 e0       	ldi	r22, 0x00	; 0
    338c:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    3390:	85 ea       	ldi	r24, 0xA5	; 165
    3392:	60 e0       	ldi	r22, 0x00	; 0
    3394:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    3398:	80 e0       	ldi	r24, 0x00	; 0
    339a:	90 e0       	ldi	r25, 0x00	; 0
    339c:	28 e8       	ldi	r18, 0x88	; 136
    339e:	33 e1       	ldi	r19, 0x13	; 19
    33a0:	f9 01       	movw	r30, r18
    33a2:	31 97       	sbiw	r30, 0x01	; 1
    33a4:	f1 f7       	brne	.-4      	; 0x33a2 <LCD_open+0xa0>
    33a6:	01 96       	adiw	r24, 0x01	; 1
    33a8:	43 e0       	ldi	r20, 0x03	; 3
    33aa:	88 3e       	cpi	r24, 0xE8	; 232
    33ac:	94 07       	cpc	r25, r20
    33ae:	c1 f7       	brne	.-16     	; 0x33a0 <LCD_open+0x9e>
    33b0:	83 eb       	ldi	r24, 0xB3	; 179
    33b2:	60 e0       	ldi	r22, 0x00	; 0
    33b4:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    33b8:	80 e4       	ldi	r24, 0x40	; 64
    33ba:	60 e0       	ldi	r22, 0x00	; 0
    33bc:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    33c0:	83 e0       	ldi	r24, 0x03	; 3
    33c2:	60 e0       	ldi	r22, 0x00	; 0
    33c4:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_set_PGC_addr>
    33c8:	83 e0       	ldi	r24, 0x03	; 3
    33ca:	60 e0       	ldi	r22, 0x00	; 0
    33cc:	0e 94 23 1a 	call	0x3446	; 0x3446 <LCD_set_next_PGC>
    33d0:	10 92 05 08 	sts	0x0805, r1
    33d4:	10 92 07 08 	sts	0x0807, r1
    33d8:	10 92 06 08 	sts	0x0806, r1
    33dc:	8d e1       	ldi	r24, 0x1D	; 29
    33de:	94 e0       	ldi	r25, 0x04	; 4
    33e0:	90 93 36 08 	sts	0x0836, r25
    33e4:	80 93 35 08 	sts	0x0835, r24
    33e8:	88 e1       	ldi	r24, 0x18	; 24
    33ea:	0e 94 02 1a 	call	0x3404	; 0x3404 <LCD_set_backlight>
    33ee:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
    33f2:	84 ea       	ldi	r24, 0xA4	; 164
    33f4:	60 e0       	ldi	r22, 0x00	; 0
    33f6:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    33fa:	85 e0       	ldi	r24, 0x05	; 5
    33fc:	91 e0       	ldi	r25, 0x01	; 1
    33fe:	1f 91       	pop	r17
    3400:	0f 91       	pop	r16
    3402:	08 95       	ret

00003404 <LCD_set_backlight>:
    3404:	1f 93       	push	r17
    3406:	18 2f       	mov	r17, r24
    3408:	85 e0       	ldi	r24, 0x05	; 5
    340a:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    340e:	81 30       	cpi	r24, 0x01	; 1
    3410:	c1 f4       	brne	.+48     	; 0x3442 <LCD_set_backlight+0x3e>
    3412:	87 e0       	ldi	r24, 0x07	; 7
    3414:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <SPI_set_slave_addr>
    3418:	82 e0       	ldi	r24, 0x02	; 2
    341a:	6a e0       	ldi	r22, 0x0A	; 10
    341c:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <SPI_transmit>
    3420:	82 e0       	ldi	r24, 0x02	; 2
    3422:	61 eb       	ldi	r22, 0xB1	; 177
    3424:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <SPI_transmit>
    3428:	61 2f       	mov	r22, r17
    342a:	11 32       	cpi	r17, 0x21	; 33
    342c:	08 f0       	brcs	.+2      	; 0x3430 <LCD_set_backlight+0x2c>
    342e:	60 e2       	ldi	r22, 0x20	; 32
    3430:	82 e0       	ldi	r24, 0x02	; 2
    3432:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <SPI_transmit>
    3436:	89 ee       	ldi	r24, 0xE9	; 233
    3438:	8a 95       	dec	r24
    343a:	f1 f7       	brne	.-4      	; 0x3438 <LCD_set_backlight+0x34>
    343c:	87 e0       	ldi	r24, 0x07	; 7
    343e:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <SPI_set_slave_addr>
    3442:	1f 91       	pop	r17
    3444:	08 95       	ret

00003446 <LCD_set_next_PGC>:
    3446:	83 70       	andi	r24, 0x03	; 3
    3448:	6f 77       	andi	r22, 0x7F	; 127
    344a:	60 93 03 08 	sts	0x0803, r22
    344e:	80 93 04 08 	sts	0x0804, r24
    3452:	08 95       	ret

00003454 <LCD_set_PGC_addr>:
    3454:	0f 93       	push	r16
    3456:	1f 93       	push	r17
    3458:	06 2f       	mov	r16, r22
    345a:	16 2f       	mov	r17, r22
    345c:	1f 77       	andi	r17, 0x7F	; 127
    345e:	83 70       	andi	r24, 0x03	; 3
    3460:	80 6b       	ori	r24, 0xB0	; 176
    3462:	60 e0       	ldi	r22, 0x00	; 0
    3464:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    3468:	12 95       	swap	r17
    346a:	1f 70       	andi	r17, 0x0F	; 15
    346c:	81 2f       	mov	r24, r17
    346e:	80 61       	ori	r24, 0x10	; 16
    3470:	60 e0       	ldi	r22, 0x00	; 0
    3472:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    3476:	80 2f       	mov	r24, r16
    3478:	8f 70       	andi	r24, 0x0F	; 15
    347a:	60 e0       	ldi	r22, 0x00	; 0
    347c:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    3480:	1f 91       	pop	r17
    3482:	0f 91       	pop	r16
    3484:	08 95       	ret

00003486 <LCD_write>:
    3486:	0f 93       	push	r16
    3488:	1f 93       	push	r17
    348a:	08 2f       	mov	r16, r24
    348c:	16 2f       	mov	r17, r22
    348e:	85 e0       	ldi	r24, 0x05	; 5
    3490:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    3494:	81 30       	cpi	r24, 0x01	; 1
    3496:	79 f4       	brne	.+30     	; 0x34b6 <LCD_write+0x30>
    3498:	11 23       	and	r17, r17
    349a:	19 f0       	breq	.+6      	; 0x34a2 <LCD_write+0x1c>
    349c:	11 30       	cpi	r17, 0x01	; 1
    349e:	21 f4       	brne	.+8      	; 0x34a8 <LCD_write+0x22>
    34a0:	02 c0       	rjmp	.+4      	; 0x34a6 <LCD_write+0x20>
    34a2:	2b 98       	cbi	0x05, 3	; 5
    34a4:	01 c0       	rjmp	.+2      	; 0x34a8 <LCD_write+0x22>
    34a6:	2b 9a       	sbi	0x05, 3	; 5
    34a8:	86 e0       	ldi	r24, 0x06	; 6
    34aa:	8a 95       	dec	r24
    34ac:	f1 f7       	brne	.-4      	; 0x34aa <LCD_write+0x24>
    34ae:	80 e0       	ldi	r24, 0x00	; 0
    34b0:	60 2f       	mov	r22, r16
    34b2:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <SPI_transmit>
    34b6:	1f 91       	pop	r17
    34b8:	0f 91       	pop	r16
    34ba:	08 95       	ret

000034bc <LED_clr_pattern>:
    34bc:	1f 93       	push	r17
    34be:	18 2f       	mov	r17, r24
    34c0:	86 e0       	ldi	r24, 0x06	; 6
    34c2:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    34c6:	81 30       	cpi	r24, 0x01	; 1
    34c8:	19 f4       	brne	.+6      	; 0x34d0 <LED_clr_pattern+0x14>
    34ca:	81 2f       	mov	r24, r17
    34cc:	0e 94 a1 24 	call	0x4942	; 0x4942 <__LED_clr_pattern>
    34d0:	1f 91       	pop	r17
    34d2:	08 95       	ret

000034d4 <LED_open>:
    34d4:	0e 94 a6 24 	call	0x494c	; 0x494c <__LED_init>
    34d8:	86 e0       	ldi	r24, 0x06	; 6
    34da:	61 e0       	ldi	r22, 0x01	; 1
    34dc:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    34e0:	86 e0       	ldi	r24, 0x06	; 6
    34e2:	91 e0       	ldi	r25, 0x01	; 1
    34e4:	08 95       	ret

000034e6 <LED_set_pattern>:
    34e6:	1f 93       	push	r17
    34e8:	18 2f       	mov	r17, r24
    34ea:	86 e0       	ldi	r24, 0x06	; 6
    34ec:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    34f0:	81 30       	cpi	r24, 0x01	; 1
    34f2:	19 f4       	brne	.+6      	; 0x34fa <LED_set_pattern+0x14>
    34f4:	81 2f       	mov	r24, r17
    34f6:	0e 94 a9 24 	call	0x4952	; 0x4952 <__LED_set_pattern>
    34fa:	1f 91       	pop	r17
    34fc:	08 95       	ret

000034fe <SPI_set_slave_addr>:
    34fe:	1f 93       	push	r17
    3500:	18 2f       	mov	r17, r24
    3502:	82 e0       	ldi	r24, 0x02	; 2
    3504:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    3508:	81 30       	cpi	r24, 0x01	; 1
    350a:	09 f0       	breq	.+2      	; 0x350e <SPI_set_slave_addr+0x10>
    350c:	47 c0       	rjmp	.+142    	; 0x359c <SPI_set_slave_addr+0x9e>
    350e:	91 2f       	mov	r25, r17
    3510:	97 70       	andi	r25, 0x07	; 7
    3512:	80 91 08 08 	lds	r24, 0x0808
    3516:	98 17       	cp	r25, r24
    3518:	09 f4       	brne	.+2      	; 0x351c <SPI_set_slave_addr+0x1e>
    351a:	40 c0       	rjmp	.+128    	; 0x359c <SPI_set_slave_addr+0x9e>
    351c:	90 93 08 08 	sts	0x0808, r25
    3520:	85 b1       	in	r24, 0x05	; 5
    3522:	88 7f       	andi	r24, 0xF8	; 248
    3524:	89 2b       	or	r24, r25
    3526:	85 b9       	out	0x05, r24	; 5
    3528:	93 30       	cpi	r25, 0x03	; 3
    352a:	11 f1       	breq	.+68     	; 0x3570 <SPI_set_slave_addr+0x72>
    352c:	94 30       	cpi	r25, 0x04	; 4
    352e:	28 f4       	brcc	.+10     	; 0x353a <SPI_set_slave_addr+0x3c>
    3530:	91 30       	cpi	r25, 0x01	; 1
    3532:	51 f0       	breq	.+20     	; 0x3548 <SPI_set_slave_addr+0x4a>
    3534:	92 30       	cpi	r25, 0x02	; 2
    3536:	90 f4       	brcc	.+36     	; 0x355c <SPI_set_slave_addr+0x5e>
    3538:	0c c0       	rjmp	.+24     	; 0x3552 <SPI_set_slave_addr+0x54>
    353a:	95 30       	cpi	r25, 0x05	; 5
    353c:	19 f1       	breq	.+70     	; 0x3584 <SPI_set_slave_addr+0x86>
    353e:	95 30       	cpi	r25, 0x05	; 5
    3540:	e0 f0       	brcs	.+56     	; 0x357a <SPI_set_slave_addr+0x7c>
    3542:	96 30       	cpi	r25, 0x06	; 6
    3544:	21 f5       	brne	.+72     	; 0x358e <SPI_set_slave_addr+0x90>
    3546:	0f c0       	rjmp	.+30     	; 0x3566 <SPI_set_slave_addr+0x68>
    3548:	e0 91 dd 04 	lds	r30, 0x04DD
    354c:	f0 91 de 04 	lds	r31, 0x04DE
    3550:	22 c0       	rjmp	.+68     	; 0x3596 <SPI_set_slave_addr+0x98>
    3552:	e0 91 db 04 	lds	r30, 0x04DB
    3556:	f0 91 dc 04 	lds	r31, 0x04DC
    355a:	1d c0       	rjmp	.+58     	; 0x3596 <SPI_set_slave_addr+0x98>
    355c:	e0 91 df 04 	lds	r30, 0x04DF
    3560:	f0 91 e0 04 	lds	r31, 0x04E0
    3564:	18 c0       	rjmp	.+48     	; 0x3596 <SPI_set_slave_addr+0x98>
    3566:	e0 91 e7 04 	lds	r30, 0x04E7
    356a:	f0 91 e8 04 	lds	r31, 0x04E8
    356e:	13 c0       	rjmp	.+38     	; 0x3596 <SPI_set_slave_addr+0x98>
    3570:	e0 91 e1 04 	lds	r30, 0x04E1
    3574:	f0 91 e2 04 	lds	r31, 0x04E2
    3578:	0e c0       	rjmp	.+28     	; 0x3596 <SPI_set_slave_addr+0x98>
    357a:	e0 91 e3 04 	lds	r30, 0x04E3
    357e:	f0 91 e4 04 	lds	r31, 0x04E4
    3582:	09 c0       	rjmp	.+18     	; 0x3596 <SPI_set_slave_addr+0x98>
    3584:	e0 91 e5 04 	lds	r30, 0x04E5
    3588:	f0 91 e6 04 	lds	r31, 0x04E6
    358c:	04 c0       	rjmp	.+8      	; 0x3596 <SPI_set_slave_addr+0x98>
    358e:	e0 91 e9 04 	lds	r30, 0x04E9
    3592:	f0 91 ea 04 	lds	r31, 0x04EA
    3596:	30 97       	sbiw	r30, 0x00	; 0
    3598:	09 f0       	breq	.+2      	; 0x359c <SPI_set_slave_addr+0x9e>
    359a:	09 95       	icall
    359c:	1f 91       	pop	r17
    359e:	08 95       	ret

000035a0 <SPI_transmit>:
    35a0:	1f 93       	push	r17
    35a2:	16 2f       	mov	r17, r22
    35a4:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <SPI_set_slave_addr>
    35a8:	82 e0       	ldi	r24, 0x02	; 2
    35aa:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    35ae:	81 30       	cpi	r24, 0x01	; 1
    35b0:	21 f4       	brne	.+8      	; 0x35ba <SPI_transmit+0x1a>
    35b2:	1e bd       	out	0x2e, r17	; 46
    35b4:	0d b4       	in	r0, 0x2d	; 45
    35b6:	07 fe       	sbrs	r0, 7
    35b8:	fd cf       	rjmp	.-6      	; 0x35b4 <SPI_transmit+0x14>
    35ba:	1f 91       	pop	r17
    35bc:	08 95       	ret

000035be <__SPKR_set_up_freq_LUT>:
    35be:	0f 93       	push	r16
    35c0:	1f 93       	push	r17
    35c2:	cf 93       	push	r28
    35c4:	df 93       	push	r29
    35c6:	80 e2       	ldi	r24, 0x20	; 32
    35c8:	91 e0       	ldi	r25, 0x01	; 1
    35ca:	0e 94 b5 33 	call	0x676a	; 0x676a <malloc>
    35ce:	9c 01       	movw	r18, r24
    35d0:	90 93 fa 04 	sts	0x04FA, r25
    35d4:	80 93 f9 04 	sts	0x04F9, r24
    35d8:	89 2b       	or	r24, r25
    35da:	11 f4       	brne	.+4      	; 0x35e0 <__SPKR_set_up_freq_LUT+0x22>
    35dc:	80 e0       	ldi	r24, 0x00	; 0
    35de:	39 c0       	rjmp	.+114    	; 0x3652 <__SPKR_set_up_freq_LUT+0x94>
    35e0:	89 01       	movw	r16, r18
    35e2:	c0 e0       	ldi	r28, 0x00	; 0
    35e4:	d0 e0       	ldi	r29, 0x00	; 0
    35e6:	be 01       	movw	r22, r28
    35e8:	80 e0       	ldi	r24, 0x00	; 0
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <__floatunsisf>
    35f0:	20 e0       	ldi	r18, 0x00	; 0
    35f2:	30 e0       	ldi	r19, 0x00	; 0
    35f4:	40 ea       	ldi	r20, 0xA0	; 160
    35f6:	51 e4       	ldi	r21, 0x41	; 65
    35f8:	0e 94 84 2c 	call	0x5908	; 0x5908 <__divsf3>
    35fc:	27 ef       	ldi	r18, 0xF7	; 247
    35fe:	35 e7       	ldi	r19, 0x75	; 117
    3600:	40 e0       	ldi	r20, 0x00	; 0
    3602:	5f e3       	ldi	r21, 0x3F	; 63
    3604:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    3608:	9b 01       	movw	r18, r22
    360a:	ac 01       	movw	r20, r24
    360c:	60 e0       	ldi	r22, 0x00	; 0
    360e:	70 e0       	ldi	r23, 0x00	; 0
    3610:	80 e2       	ldi	r24, 0x20	; 32
    3612:	91 e4       	ldi	r25, 0x41	; 65
    3614:	0e 94 70 2e 	call	0x5ce0	; 0x5ce0 <pow>
    3618:	9b 01       	movw	r18, r22
    361a:	ac 01       	movw	r20, r24
    361c:	ca 01       	movw	r24, r20
    361e:	b9 01       	movw	r22, r18
    3620:	2d ec       	ldi	r18, 0xCD	; 205
    3622:	3c ec       	ldi	r19, 0xCC	; 204
    3624:	42 e8       	ldi	r20, 0x82	; 130
    3626:	51 e4       	ldi	r21, 0x41	; 65
    3628:	0e 94 0d 2e 	call	0x5c1a	; 0x5c1a <__mulsf3>
    362c:	0e 94 d3 2d 	call	0x5ba6	; 0x5ba6 <lrint>
    3630:	2a e0       	ldi	r18, 0x0A	; 10
    3632:	30 e0       	ldi	r19, 0x00	; 0
    3634:	40 e0       	ldi	r20, 0x00	; 0
    3636:	50 e0       	ldi	r21, 0x00	; 0
    3638:	0e 94 3d 33 	call	0x667a	; 0x667a <__mulsi3>
    363c:	f8 01       	movw	r30, r16
    363e:	61 93       	st	Z+, r22
    3640:	71 93       	st	Z+, r23
    3642:	81 93       	st	Z+, r24
    3644:	91 93       	st	Z+, r25
    3646:	8f 01       	movw	r16, r30
    3648:	21 96       	adiw	r28, 0x01	; 1
    364a:	c8 34       	cpi	r28, 0x48	; 72
    364c:	d1 05       	cpc	r29, r1
    364e:	59 f6       	brne	.-106    	; 0x35e6 <__SPKR_set_up_freq_LUT+0x28>
    3650:	81 e0       	ldi	r24, 0x01	; 1
    3652:	df 91       	pop	r29
    3654:	cf 91       	pop	r28
    3656:	1f 91       	pop	r17
    3658:	0f 91       	pop	r16
    365a:	08 95       	ret

0000365c <__SPKR_open_beep_mode>:
    365c:	8a e0       	ldi	r24, 0x0A	; 10
    365e:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    3662:	88 23       	and	r24, r24
    3664:	71 f4       	brne	.+28     	; 0x3682 <__SPKR_open_beep_mode+0x26>
    3666:	10 92 f6 04 	sts	0x04F6, r1
    366a:	10 92 f5 04 	sts	0x04F5, r1
    366e:	81 e0       	ldi	r24, 0x01	; 1
    3670:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__SPKR_init>
    3674:	81 e0       	ldi	r24, 0x01	; 1
    3676:	80 93 ec 04 	sts	0x04EC, r24
    367a:	8a e0       	ldi	r24, 0x0A	; 10
    367c:	61 e0       	ldi	r22, 0x01	; 1
    367e:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    3682:	8a e0       	ldi	r24, 0x0A	; 10
    3684:	91 e0       	ldi	r25, 0x01	; 1
    3686:	08 95       	ret

00003688 <__SPKR_open_tone_mode>:
    3688:	1f 93       	push	r17
    368a:	8b e0       	ldi	r24, 0x0B	; 11
    368c:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    3690:	88 23       	and	r24, r24
    3692:	11 f0       	breq	.+4      	; 0x3698 <__SPKR_open_tone_mode+0x10>
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	21 c0       	rjmp	.+66     	; 0x36da <__SPKR_open_tone_mode+0x52>
    3698:	89 e0       	ldi	r24, 0x09	; 9
    369a:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    369e:	88 23       	and	r24, r24
    36a0:	d9 f4       	brne	.+54     	; 0x36d8 <__SPKR_open_tone_mode+0x50>
    36a2:	0e 94 df 1a 	call	0x35be	; 0x35be <__SPKR_set_up_freq_LUT>
    36a6:	18 2f       	mov	r17, r24
    36a8:	81 30       	cpi	r24, 0x01	; 1
    36aa:	b1 f4       	brne	.+44     	; 0x36d8 <__SPKR_open_tone_mode+0x50>
    36ac:	10 92 ed 04 	sts	0x04ED, r1
    36b0:	10 92 ee 04 	sts	0x04EE, r1
    36b4:	10 92 ef 04 	sts	0x04EF, r1
    36b8:	10 92 f0 04 	sts	0x04F0, r1
    36bc:	8d e0       	ldi	r24, 0x0D	; 13
    36be:	67 e6       	ldi	r22, 0x67	; 103
    36c0:	75 e2       	ldi	r23, 0x25	; 37
    36c2:	0e 94 ca 23 	call	0x4794	; 0x4794 <ISR_attach>
    36c6:	82 e0       	ldi	r24, 0x02	; 2
    36c8:	0e 94 e4 25 	call	0x4bc8	; 0x4bc8 <__SPKR_init>
    36cc:	10 93 eb 04 	sts	0x04EB, r17
    36d0:	89 e0       	ldi	r24, 0x09	; 9
    36d2:	61 e0       	ldi	r22, 0x01	; 1
    36d4:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    36d8:	91 e0       	ldi	r25, 0x01	; 1
    36da:	89 e0       	ldi	r24, 0x09	; 9
    36dc:	1f 91       	pop	r17
    36de:	08 95       	ret

000036e0 <SPKR_open>:
    36e0:	81 30       	cpi	r24, 0x01	; 1
    36e2:	29 f0       	breq	.+10     	; 0x36ee <SPKR_open+0xe>
    36e4:	82 30       	cpi	r24, 0x02	; 2
    36e6:	31 f0       	breq	.+12     	; 0x36f4 <SPKR_open+0x14>
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	89 e0       	ldi	r24, 0x09	; 9
    36ec:	08 95       	ret
    36ee:	0e 94 2e 1b 	call	0x365c	; 0x365c <__SPKR_open_beep_mode>
    36f2:	08 95       	ret
    36f4:	0e 94 44 1b 	call	0x3688	; 0x3688 <__SPKR_open_tone_mode>
    36f8:	08 95       	ret

000036fa <STEPPER_get_nSteps>:
    36fa:	80 91 c9 07 	lds	r24, 0x07C9
    36fe:	90 91 ca 07 	lds	r25, 0x07CA
    3702:	20 91 cb 07 	lds	r18, 0x07CB
    3706:	30 91 cc 07 	lds	r19, 0x07CC
    370a:	bc 01       	movw	r22, r24
    370c:	c9 01       	movw	r24, r18
    370e:	08 95       	ret

00003710 <STEPPER_stepmode>:
    3710:	2f 92       	push	r2
    3712:	3f 92       	push	r3
    3714:	4f 92       	push	r4
    3716:	5f 92       	push	r5
    3718:	6f 92       	push	r6
    371a:	7f 92       	push	r7
    371c:	8f 92       	push	r8
    371e:	9f 92       	push	r9
    3720:	af 92       	push	r10
    3722:	bf 92       	push	r11
    3724:	cf 92       	push	r12
    3726:	df 92       	push	r13
    3728:	ef 92       	push	r14
    372a:	ff 92       	push	r15
    372c:	0f 93       	push	r16
    372e:	1f 93       	push	r17
    3730:	df 93       	push	r29
    3732:	cf 93       	push	r28
    3734:	cd b7       	in	r28, 0x3d	; 61
    3736:	de b7       	in	r29, 0x3e	; 62
    3738:	58 2e       	mov	r5, r24
    373a:	96 2e       	mov	r9, r22
    373c:	44 2e       	mov	r4, r20
    373e:	39 01       	movw	r6, r18
    3740:	3c 2c       	mov	r3, r12
    3742:	c9 8c       	ldd	r12, Y+25	; 0x19
    3744:	da 8c       	ldd	r13, Y+26	; 0x1a
    3746:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	68 17       	cp	r22, r24
    374c:	39 f1       	breq	.+78     	; 0x379c <STEPPER_stepmode+0x8c>
    374e:	68 17       	cp	r22, r24
    3750:	28 f0       	brcs	.+10     	; 0x375c <STEPPER_stepmode+0x4c>
    3752:	92 e0       	ldi	r25, 0x02	; 2
    3754:	69 17       	cp	r22, r25
    3756:	09 f0       	breq	.+2      	; 0x375a <STEPPER_stepmode+0x4a>
    3758:	85 c0       	rjmp	.+266    	; 0x3864 <STEPPER_stepmode+0x154>
    375a:	49 c0       	rjmp	.+146    	; 0x37ee <STEPPER_stepmode+0xde>
    375c:	80 e0       	ldi	r24, 0x00	; 0
    375e:	61 e0       	ldi	r22, 0x01	; 1
    3760:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <STEPPER_set_mode>
    3764:	80 e0       	ldi	r24, 0x00	; 0
    3766:	b7 01       	movw	r22, r14
    3768:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <STEPPER_set_accel>
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	64 2d       	mov	r22, r4
    3770:	a3 01       	movw	r20, r6
    3772:	98 01       	movw	r18, r16
    3774:	03 2d       	mov	r16, r3
    3776:	ee 24       	eor	r14, r14
    3778:	e3 94       	inc	r14
    377a:	ee ee       	ldi	r30, 0xEE	; 238
    377c:	ce 2e       	mov	r12, r30
    377e:	e7 e0       	ldi	r30, 0x07	; 7
    3780:	de 2e       	mov	r13, r30
    3782:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <STEPPER_step>
    3786:	55 20       	and	r5, r5
    3788:	09 f0       	breq	.+2      	; 0x378c <STEPPER_stepmode+0x7c>
    378a:	6c c0       	rjmp	.+216    	; 0x3864 <STEPPER_stepmode+0x154>
    378c:	00 d0       	rcall	.+0      	; 0x378e <STEPPER_stepmode+0x7e>
    378e:	0f 92       	push	r0
    3790:	ed b7       	in	r30, 0x3d	; 61
    3792:	fe b7       	in	r31, 0x3e	; 62
    3794:	11 82       	std	Z+1, r1	; 0x01
    3796:	b3 82       	std	Z+3, r11	; 0x03
    3798:	a2 82       	std	Z+2, r10	; 0x02
    379a:	23 c0       	rjmp	.+70     	; 0x37e2 <STEPPER_stepmode+0xd2>
    379c:	81 e0       	ldi	r24, 0x01	; 1
    379e:	61 e0       	ldi	r22, 0x01	; 1
    37a0:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <STEPPER_set_mode>
    37a4:	81 e0       	ldi	r24, 0x01	; 1
    37a6:	b6 01       	movw	r22, r12
    37a8:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <STEPPER_set_accel>
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	68 2d       	mov	r22, r8
    37b0:	4d 89       	ldd	r20, Y+21	; 0x15
    37b2:	5e 89       	ldd	r21, Y+22	; 0x16
    37b4:	2f 89       	ldd	r18, Y+23	; 0x17
    37b6:	38 8d       	ldd	r19, Y+24	; 0x18
    37b8:	02 2d       	mov	r16, r2
    37ba:	ee 24       	eor	r14, r14
    37bc:	e3 94       	inc	r14
    37be:	7e ee       	ldi	r23, 0xEE	; 238
    37c0:	c7 2e       	mov	r12, r23
    37c2:	77 e0       	ldi	r23, 0x07	; 7
    37c4:	d7 2e       	mov	r13, r23
    37c6:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <STEPPER_step>
    37ca:	55 20       	and	r5, r5
    37cc:	09 f0       	breq	.+2      	; 0x37d0 <STEPPER_stepmode+0xc0>
    37ce:	4a c0       	rjmp	.+148    	; 0x3864 <STEPPER_stepmode+0x154>
    37d0:	00 d0       	rcall	.+0      	; 0x37d2 <STEPPER_stepmode+0xc2>
    37d2:	0f 92       	push	r0
    37d4:	ed b7       	in	r30, 0x3d	; 61
    37d6:	fe b7       	in	r31, 0x3e	; 62
    37d8:	91 82       	std	Z+1, r9	; 0x01
    37da:	8c 8d       	ldd	r24, Y+28	; 0x1c
    37dc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    37de:	93 83       	std	Z+3, r25	; 0x03
    37e0:	82 83       	std	Z+2, r24	; 0x02
    37e2:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <STEPPER_wait_and_then>
    37e6:	0f 90       	pop	r0
    37e8:	0f 90       	pop	r0
    37ea:	0f 90       	pop	r0
    37ec:	3b c0       	rjmp	.+118    	; 0x3864 <STEPPER_stepmode+0x154>
    37ee:	82 e0       	ldi	r24, 0x02	; 2
    37f0:	61 e0       	ldi	r22, 0x01	; 1
    37f2:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <STEPPER_set_mode>
    37f6:	80 e0       	ldi	r24, 0x00	; 0
    37f8:	b7 01       	movw	r22, r14
    37fa:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <STEPPER_set_accel>
    37fe:	81 e0       	ldi	r24, 0x01	; 1
    3800:	b6 01       	movw	r22, r12
    3802:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <STEPPER_set_accel>
    3806:	80 e0       	ldi	r24, 0x00	; 0
    3808:	64 2d       	mov	r22, r4
    380a:	a3 01       	movw	r20, r6
    380c:	98 01       	movw	r18, r16
    380e:	03 2d       	mov	r16, r3
    3810:	ee 24       	eor	r14, r14
    3812:	e3 94       	inc	r14
    3814:	9e ee       	ldi	r25, 0xEE	; 238
    3816:	c9 2e       	mov	r12, r25
    3818:	97 e0       	ldi	r25, 0x07	; 7
    381a:	d9 2e       	mov	r13, r25
    381c:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <STEPPER_step>
    3820:	81 e0       	ldi	r24, 0x01	; 1
    3822:	68 2d       	mov	r22, r8
    3824:	4d 89       	ldd	r20, Y+21	; 0x15
    3826:	5e 89       	ldd	r21, Y+22	; 0x16
    3828:	2f 89       	ldd	r18, Y+23	; 0x17
    382a:	38 8d       	ldd	r19, Y+24	; 0x18
    382c:	02 2d       	mov	r16, r2
    382e:	0e 94 e3 1d 	call	0x3bc6	; 0x3bc6 <STEPPER_step>
    3832:	55 20       	and	r5, r5
    3834:	b9 f4       	brne	.+46     	; 0x3864 <STEPPER_stepmode+0x154>
    3836:	00 d0       	rcall	.+0      	; 0x3838 <STEPPER_stepmode+0x128>
    3838:	00 d0       	rcall	.+0      	; 0x383a <STEPPER_stepmode+0x12a>
    383a:	0f 92       	push	r0
    383c:	ad b7       	in	r26, 0x3d	; 61
    383e:	be b7       	in	r27, 0x3e	; 62
    3840:	11 96       	adiw	r26, 0x01	; 1
    3842:	ed b7       	in	r30, 0x3d	; 61
    3844:	fe b7       	in	r31, 0x3e	; 62
    3846:	91 82       	std	Z+1, r9	; 0x01
    3848:	fd 01       	movw	r30, r26
    384a:	b2 82       	std	Z+2, r11	; 0x02
    384c:	a1 82       	std	Z+1, r10	; 0x01
    384e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3850:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3852:	94 83       	std	Z+4, r25	; 0x04
    3854:	83 83       	std	Z+3, r24	; 0x03
    3856:	0e 94 94 1e 	call	0x3d28	; 0x3d28 <STEPPER_wait_and_then>
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	0f 90       	pop	r0
    3864:	cf 91       	pop	r28
    3866:	df 91       	pop	r29
    3868:	1f 91       	pop	r17
    386a:	0f 91       	pop	r16
    386c:	ff 90       	pop	r15
    386e:	ef 90       	pop	r14
    3870:	df 90       	pop	r13
    3872:	cf 90       	pop	r12
    3874:	bf 90       	pop	r11
    3876:	af 90       	pop	r10
    3878:	9f 90       	pop	r9
    387a:	8f 90       	pop	r8
    387c:	7f 90       	pop	r7
    387e:	6f 90       	pop	r6
    3880:	5f 90       	pop	r5
    3882:	4f 90       	pop	r4
    3884:	3f 90       	pop	r3
    3886:	2f 90       	pop	r2
    3888:	08 95       	ret

0000388a <STEPPER_move>:
    388a:	6f 92       	push	r6
    388c:	7f 92       	push	r7
    388e:	8f 92       	push	r8
    3890:	9f 92       	push	r9
    3892:	af 92       	push	r10
    3894:	bf 92       	push	r11
    3896:	cf 92       	push	r12
    3898:	df 92       	push	r13
    389a:	ef 92       	push	r14
    389c:	ff 92       	push	r15
    389e:	0f 93       	push	r16
    38a0:	1f 93       	push	r17
    38a2:	df 93       	push	r29
    38a4:	cf 93       	push	r28
    38a6:	cd b7       	in	r28, 0x3d	; 61
    38a8:	de b7       	in	r29, 0x3e	; 62
    38aa:	94 2e       	mov	r9, r20
    38ac:	7c 2d       	mov	r23, r12
    38ae:	d5 01       	movw	r26, r10
    38b0:	49 89       	ldd	r20, Y+17	; 0x11
    38b2:	5a 89       	ldd	r21, Y+18	; 0x12
    38b4:	ab 88       	ldd	r10, Y+19	; 0x13
    38b6:	bc 88       	ldd	r11, Y+20	; 0x14
    38b8:	cd 88       	ldd	r12, Y+21	; 0x15
    38ba:	de 88       	ldd	r13, Y+22	; 0x16
    38bc:	9f 89       	ldd	r25, Y+23	; 0x17
    38be:	81 30       	cpi	r24, 0x01	; 1
    38c0:	09 f4       	brne	.+2      	; 0x38c4 <STEPPER_move+0x3a>
    38c2:	57 c0       	rjmp	.+174    	; 0x3972 <STEPPER_move+0xe8>
    38c4:	81 30       	cpi	r24, 0x01	; 1
    38c6:	b8 f1       	brcs	.+110    	; 0x3936 <STEPPER_move+0xac>
    38c8:	82 30       	cpi	r24, 0x02	; 2
    38ca:	09 f0       	breq	.+2      	; 0x38ce <STEPPER_move+0x44>
    38cc:	76 c0       	rjmp	.+236    	; 0x39ba <STEPPER_move+0x130>
    38ce:	61 30       	cpi	r22, 0x01	; 1
    38d0:	91 f0       	breq	.+36     	; 0x38f6 <STEPPER_move+0x6c>
    38d2:	61 30       	cpi	r22, 0x01	; 1
    38d4:	20 f0       	brcs	.+8      	; 0x38de <STEPPER_move+0x54>
    38d6:	62 30       	cpi	r22, 0x02	; 2
    38d8:	09 f0       	breq	.+2      	; 0x38dc <STEPPER_move+0x52>
    38da:	6f c0       	rjmp	.+222    	; 0x39ba <STEPPER_move+0x130>
    38dc:	15 c0       	rjmp	.+42     	; 0x3908 <STEPPER_move+0x7e>
    38de:	80 e0       	ldi	r24, 0x00	; 0
    38e0:	60 e0       	ldi	r22, 0x00	; 0
    38e2:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <STEPPER_set_mode>
    38e6:	80 e0       	ldi	r24, 0x00	; 0
    38e8:	b7 01       	movw	r22, r14
    38ea:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <STEPPER_set_accel>
    38ee:	80 e0       	ldi	r24, 0x00	; 0
    38f0:	69 2d       	mov	r22, r9
    38f2:	a8 01       	movw	r20, r16
    38f4:	1d c0       	rjmp	.+58     	; 0x3930 <STEPPER_move+0xa6>
    38f6:	81 e0       	ldi	r24, 0x01	; 1
    38f8:	60 e0       	ldi	r22, 0x00	; 0
    38fa:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <STEPPER_set_mode>
    38fe:	81 e0       	ldi	r24, 0x01	; 1
    3900:	b6 01       	movw	r22, r12
    3902:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <STEPPER_set_accel>
    3906:	11 c0       	rjmp	.+34     	; 0x392a <STEPPER_move+0xa0>
    3908:	82 e0       	ldi	r24, 0x02	; 2
    390a:	60 e0       	ldi	r22, 0x00	; 0
    390c:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <STEPPER_set_mode>
    3910:	80 e0       	ldi	r24, 0x00	; 0
    3912:	b7 01       	movw	r22, r14
    3914:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <STEPPER_set_accel>
    3918:	81 e0       	ldi	r24, 0x01	; 1
    391a:	b6 01       	movw	r22, r12
    391c:	0e 94 5a 1d 	call	0x3ab4	; 0x3ab4 <STEPPER_set_accel>
    3920:	80 e0       	ldi	r24, 0x00	; 0
    3922:	69 2d       	mov	r22, r9
    3924:	a8 01       	movw	r20, r16
    3926:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <STEPPER_run>
    392a:	81 e0       	ldi	r24, 0x01	; 1
    392c:	68 2d       	mov	r22, r8
    392e:	a5 01       	movw	r20, r10
    3930:	0e 94 43 1d 	call	0x3a86	; 0x3a86 <STEPPER_run>
    3934:	42 c0       	rjmp	.+132    	; 0x39ba <STEPPER_move+0x130>
    3936:	ed b7       	in	r30, 0x3d	; 61
    3938:	fe b7       	in	r31, 0x3e	; 62
    393a:	39 97       	sbiw	r30, 0x09	; 9
    393c:	0f b6       	in	r0, 0x3f	; 63
    393e:	f8 94       	cli
    3940:	fe bf       	out	0x3e, r31	; 62
    3942:	0f be       	out	0x3f, r0	; 63
    3944:	ed bf       	out	0x3d, r30	; 61
    3946:	6d b6       	in	r6, 0x3d	; 61
    3948:	7e b6       	in	r7, 0x3e	; 62
    394a:	08 94       	sec
    394c:	61 1c       	adc	r6, r1
    394e:	71 1c       	adc	r7, r1
    3950:	52 83       	std	Z+2, r21	; 0x02
    3952:	41 83       	std	Z+1, r20	; 0x01
    3954:	f3 01       	movw	r30, r6
    3956:	b3 82       	std	Z+3, r11	; 0x03
    3958:	a2 82       	std	Z+2, r10	; 0x02
    395a:	d5 82       	std	Z+5, r13	; 0x05
    395c:	c4 82       	std	Z+4, r12	; 0x04
    395e:	96 83       	std	Z+6, r25	; 0x06
    3960:	88 8d       	ldd	r24, Y+24	; 0x18
    3962:	99 8d       	ldd	r25, Y+25	; 0x19
    3964:	90 87       	std	Z+8, r25	; 0x08
    3966:	87 83       	std	Z+7, r24	; 0x07
    3968:	80 e0       	ldi	r24, 0x00	; 0
    396a:	49 2d       	mov	r20, r9
    396c:	c7 2e       	mov	r12, r23
    396e:	5d 01       	movw	r10, r26
    3970:	1a c0       	rjmp	.+52     	; 0x39a6 <STEPPER_move+0x11c>
    3972:	ed b7       	in	r30, 0x3d	; 61
    3974:	fe b7       	in	r31, 0x3e	; 62
    3976:	39 97       	sbiw	r30, 0x09	; 9
    3978:	0f b6       	in	r0, 0x3f	; 63
    397a:	f8 94       	cli
    397c:	fe bf       	out	0x3e, r31	; 62
    397e:	0f be       	out	0x3f, r0	; 63
    3980:	ed bf       	out	0x3d, r30	; 61
    3982:	ad b7       	in	r26, 0x3d	; 61
    3984:	be b7       	in	r27, 0x3e	; 62
    3986:	11 96       	adiw	r26, 0x01	; 1
    3988:	52 83       	std	Z+2, r21	; 0x02
    398a:	41 83       	std	Z+1, r20	; 0x01
    398c:	fd 01       	movw	r30, r26
    398e:	b3 82       	std	Z+3, r11	; 0x03
    3990:	a2 82       	std	Z+2, r10	; 0x02
    3992:	d5 82       	std	Z+5, r13	; 0x05
    3994:	c4 82       	std	Z+4, r12	; 0x04
    3996:	96 83       	std	Z+6, r25	; 0x06
    3998:	10 86       	std	Z+8, r1	; 0x08
    399a:	17 82       	std	Z+7, r1	; 0x07
    399c:	81 e0       	ldi	r24, 0x01	; 1
    399e:	49 2d       	mov	r20, r9
    39a0:	c7 2e       	mov	r12, r23
    39a2:	aa 24       	eor	r10, r10
    39a4:	bb 24       	eor	r11, r11
    39a6:	0e 94 88 1b 	call	0x3710	; 0x3710 <STEPPER_stepmode>
    39aa:	8d b7       	in	r24, 0x3d	; 61
    39ac:	9e b7       	in	r25, 0x3e	; 62
    39ae:	09 96       	adiw	r24, 0x09	; 9
    39b0:	0f b6       	in	r0, 0x3f	; 63
    39b2:	f8 94       	cli
    39b4:	9e bf       	out	0x3e, r25	; 62
    39b6:	0f be       	out	0x3f, r0	; 63
    39b8:	8d bf       	out	0x3d, r24	; 61
    39ba:	cf 91       	pop	r28
    39bc:	df 91       	pop	r29
    39be:	1f 91       	pop	r17
    39c0:	0f 91       	pop	r16
    39c2:	ff 90       	pop	r15
    39c4:	ef 90       	pop	r14
    39c6:	df 90       	pop	r13
    39c8:	cf 90       	pop	r12
    39ca:	bf 90       	pop	r11
    39cc:	af 90       	pop	r10
    39ce:	9f 90       	pop	r9
    39d0:	8f 90       	pop	r8
    39d2:	7f 90       	pop	r7
    39d4:	6f 90       	pop	r6
    39d6:	08 95       	ret

000039d8 <STEPPER_open>:
    39d8:	0e 94 76 26 	call	0x4cec	; 0x4cec <__STEPPER_init>
    39dc:	81 e0       	ldi	r24, 0x01	; 1
    39de:	80 93 ed 07 	sts	0x07ED, r24
    39e2:	e7 eb       	ldi	r30, 0xB7	; 183
    39e4:	f7 e0       	ldi	r31, 0x07	; 7
    39e6:	11 92       	st	Z+, r1
    39e8:	11 92       	st	Z+, r1
    39ea:	11 82       	std	Z+1, r1	; 0x01
    39ec:	10 82       	st	Z, r1
    39ee:	32 96       	adiw	r30, 0x02	; 2
    39f0:	11 82       	std	Z+1, r1	; 0x01
    39f2:	10 82       	st	Z, r1
    39f4:	32 96       	adiw	r30, 0x02	; 2
    39f6:	11 82       	std	Z+1, r1	; 0x01
    39f8:	10 82       	st	Z, r1
    39fa:	32 96       	adiw	r30, 0x02	; 2
    39fc:	11 82       	std	Z+1, r1	; 0x01
    39fe:	10 82       	st	Z, r1
    3a00:	32 96       	adiw	r30, 0x02	; 2
    3a02:	11 82       	std	Z+1, r1	; 0x01
    3a04:	10 82       	st	Z, r1
    3a06:	32 96       	adiw	r30, 0x02	; 2
    3a08:	11 82       	std	Z+1, r1	; 0x01
    3a0a:	10 82       	st	Z, r1
    3a0c:	32 96       	adiw	r30, 0x02	; 2
    3a0e:	11 82       	std	Z+1, r1	; 0x01
    3a10:	10 82       	st	Z, r1
    3a12:	32 96       	adiw	r30, 0x02	; 2
    3a14:	11 82       	std	Z+1, r1	; 0x01
    3a16:	10 82       	st	Z, r1
    3a18:	32 96       	adiw	r30, 0x02	; 2
    3a1a:	11 82       	std	Z+1, r1	; 0x01
    3a1c:	10 82       	st	Z, r1
    3a1e:	32 96       	adiw	r30, 0x02	; 2
    3a20:	11 82       	std	Z+1, r1	; 0x01
    3a22:	10 82       	st	Z, r1
    3a24:	32 96       	adiw	r30, 0x02	; 2
    3a26:	11 82       	std	Z+1, r1	; 0x01
    3a28:	10 82       	st	Z, r1
    3a2a:	32 96       	adiw	r30, 0x02	; 2
    3a2c:	11 82       	std	Z+1, r1	; 0x01
    3a2e:	10 82       	st	Z, r1
    3a30:	36 96       	adiw	r30, 0x06	; 6
    3a32:	11 92       	st	Z+, r1
    3a34:	11 92       	st	Z+, r1
    3a36:	11 92       	st	Z+, r1
    3a38:	10 82       	st	Z, r1
    3a3a:	32 96       	adiw	r30, 0x02	; 2
    3a3c:	11 92       	st	Z+, r1
    3a3e:	11 92       	st	Z+, r1
    3a40:	11 92       	st	Z+, r1
    3a42:	11 92       	st	Z+, r1
    3a44:	11 92       	st	Z+, r1
    3a46:	11 92       	st	Z+, r1
    3a48:	11 92       	st	Z+, r1
    3a4a:	11 82       	std	Z+1, r1	; 0x01
    3a4c:	10 82       	st	Z, r1
    3a4e:	32 96       	adiw	r30, 0x02	; 2
    3a50:	11 82       	std	Z+1, r1	; 0x01
    3a52:	10 82       	st	Z, r1
    3a54:	32 96       	adiw	r30, 0x02	; 2
    3a56:	11 82       	std	Z+1, r1	; 0x01
    3a58:	10 82       	st	Z, r1
    3a5a:	32 96       	adiw	r30, 0x02	; 2
    3a5c:	11 82       	std	Z+1, r1	; 0x01
    3a5e:	10 82       	st	Z, r1
    3a60:	76 97       	sbiw	r30, 0x16	; 22
    3a62:	11 82       	std	Z+1, r1	; 0x01
    3a64:	10 82       	st	Z, r1
    3a66:	32 96       	adiw	r30, 0x02	; 2
    3a68:	11 82       	std	Z+1, r1	; 0x01
    3a6a:	10 82       	st	Z, r1
    3a6c:	10 92 ec 07 	sts	0x07EC, r1
    3a70:	10 92 eb 07 	sts	0x07EB, r1
    3a74:	10 92 ed 07 	sts	0x07ED, r1
    3a78:	87 e0       	ldi	r24, 0x07	; 7
    3a7a:	61 e0       	ldi	r22, 0x01	; 1
    3a7c:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    3a80:	87 e0       	ldi	r24, 0x07	; 7
    3a82:	91 e0       	ldi	r25, 0x01	; 1
    3a84:	08 95       	ret

00003a86 <STEPPER_run>:
    3a86:	ef 92       	push	r14
    3a88:	ff 92       	push	r15
    3a8a:	0f 93       	push	r16
    3a8c:	1f 93       	push	r17
    3a8e:	18 2f       	mov	r17, r24
    3a90:	06 2f       	mov	r16, r22
    3a92:	7a 01       	movw	r14, r20
    3a94:	60 e0       	ldi	r22, 0x00	; 0
    3a96:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <STEPPER_set_mode>
    3a9a:	81 2f       	mov	r24, r17
    3a9c:	60 2f       	mov	r22, r16
    3a9e:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <STEPPER_set_dir>
    3aa2:	81 2f       	mov	r24, r17
    3aa4:	b7 01       	movw	r22, r14
    3aa6:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <STEPPER_set_speed>
    3aaa:	1f 91       	pop	r17
    3aac:	0f 91       	pop	r16
    3aae:	ff 90       	pop	r15
    3ab0:	ef 90       	pop	r14
    3ab2:	08 95       	ret

00003ab4 <STEPPER_set_accel>:
    3ab4:	48 2f       	mov	r20, r24
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	80 93 ed 07 	sts	0x07ED, r24
    3abc:	cb 01       	movw	r24, r22
    3abe:	23 e0       	ldi	r18, 0x03	; 3
    3ac0:	69 3e       	cpi	r22, 0xE9	; 233
    3ac2:	72 07       	cpc	r23, r18
    3ac4:	10 f0       	brcs	.+4      	; 0x3aca <STEPPER_set_accel+0x16>
    3ac6:	88 ee       	ldi	r24, 0xE8	; 232
    3ac8:	93 e0       	ldi	r25, 0x03	; 3
    3aca:	41 30       	cpi	r20, 0x01	; 1
    3acc:	71 f0       	breq	.+28     	; 0x3aea <STEPPER_set_accel+0x36>
    3ace:	41 30       	cpi	r20, 0x01	; 1
    3ad0:	18 f0       	brcs	.+6      	; 0x3ad8 <STEPPER_set_accel+0x24>
    3ad2:	42 30       	cpi	r20, 0x02	; 2
    3ad4:	71 f4       	brne	.+28     	; 0x3af2 <STEPPER_set_accel+0x3e>
    3ad6:	05 c0       	rjmp	.+10     	; 0x3ae2 <STEPPER_set_accel+0x2e>
    3ad8:	90 93 c2 07 	sts	0x07C2, r25
    3adc:	80 93 c1 07 	sts	0x07C1, r24
    3ae0:	08 c0       	rjmp	.+16     	; 0x3af2 <STEPPER_set_accel+0x3e>
    3ae2:	90 93 c2 07 	sts	0x07C2, r25
    3ae6:	80 93 c1 07 	sts	0x07C1, r24
    3aea:	90 93 c4 07 	sts	0x07C4, r25
    3aee:	80 93 c3 07 	sts	0x07C3, r24
    3af2:	10 92 ed 07 	sts	0x07ED, r1
    3af6:	08 95       	ret

00003af8 <STEPPER_set_dir>:
    3af8:	98 2f       	mov	r25, r24
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	80 93 ed 07 	sts	0x07ED, r24
    3b00:	91 30       	cpi	r25, 0x01	; 1
    3b02:	51 f0       	breq	.+20     	; 0x3b18 <STEPPER_set_dir+0x20>
    3b04:	91 30       	cpi	r25, 0x01	; 1
    3b06:	18 f0       	brcs	.+6      	; 0x3b0e <STEPPER_set_dir+0x16>
    3b08:	92 30       	cpi	r25, 0x02	; 2
    3b0a:	41 f4       	brne	.+16     	; 0x3b1c <STEPPER_set_dir+0x24>
    3b0c:	03 c0       	rjmp	.+6      	; 0x3b14 <STEPPER_set_dir+0x1c>
    3b0e:	60 93 da 07 	sts	0x07DA, r22
    3b12:	04 c0       	rjmp	.+8      	; 0x3b1c <STEPPER_set_dir+0x24>
    3b14:	60 93 da 07 	sts	0x07DA, r22
    3b18:	60 93 db 07 	sts	0x07DB, r22
    3b1c:	10 92 ed 07 	sts	0x07ED, r1
    3b20:	08 95       	ret

00003b22 <STEPPER_set_mode>:
    3b22:	98 2f       	mov	r25, r24
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	80 93 ed 07 	sts	0x07ED, r24
    3b2a:	91 30       	cpi	r25, 0x01	; 1
    3b2c:	51 f0       	breq	.+20     	; 0x3b42 <STEPPER_set_mode+0x20>
    3b2e:	91 30       	cpi	r25, 0x01	; 1
    3b30:	18 f0       	brcs	.+6      	; 0x3b38 <STEPPER_set_mode+0x16>
    3b32:	92 30       	cpi	r25, 0x02	; 2
    3b34:	41 f4       	brne	.+16     	; 0x3b46 <STEPPER_set_mode+0x24>
    3b36:	03 c0       	rjmp	.+6      	; 0x3b3e <STEPPER_set_mode+0x1c>
    3b38:	60 93 b7 07 	sts	0x07B7, r22
    3b3c:	04 c0       	rjmp	.+8      	; 0x3b46 <STEPPER_set_mode+0x24>
    3b3e:	60 93 b7 07 	sts	0x07B7, r22
    3b42:	60 93 b8 07 	sts	0x07B8, r22
    3b46:	10 92 ed 07 	sts	0x07ED, r1
    3b4a:	08 95       	ret

00003b4c <STEPPER_set_speed>:
    3b4c:	48 2f       	mov	r20, r24
    3b4e:	81 e0       	ldi	r24, 0x01	; 1
    3b50:	80 93 ed 07 	sts	0x07ED, r24
    3b54:	cb 01       	movw	r24, r22
    3b56:	21 e0       	ldi	r18, 0x01	; 1
    3b58:	61 39       	cpi	r22, 0x91	; 145
    3b5a:	72 07       	cpc	r23, r18
    3b5c:	10 f0       	brcs	.+4      	; 0x3b62 <STEPPER_set_speed+0x16>
    3b5e:	80 e9       	ldi	r24, 0x90	; 144
    3b60:	91 e0       	ldi	r25, 0x01	; 1
    3b62:	41 30       	cpi	r20, 0x01	; 1
    3b64:	71 f0       	breq	.+28     	; 0x3b82 <STEPPER_set_speed+0x36>
    3b66:	41 30       	cpi	r20, 0x01	; 1
    3b68:	18 f0       	brcs	.+6      	; 0x3b70 <STEPPER_set_speed+0x24>
    3b6a:	42 30       	cpi	r20, 0x02	; 2
    3b6c:	71 f4       	brne	.+28     	; 0x3b8a <STEPPER_set_speed+0x3e>
    3b6e:	05 c0       	rjmp	.+10     	; 0x3b7a <STEPPER_set_speed+0x2e>
    3b70:	90 93 ba 07 	sts	0x07BA, r25
    3b74:	80 93 b9 07 	sts	0x07B9, r24
    3b78:	08 c0       	rjmp	.+16     	; 0x3b8a <STEPPER_set_speed+0x3e>
    3b7a:	90 93 ba 07 	sts	0x07BA, r25
    3b7e:	80 93 b9 07 	sts	0x07B9, r24
    3b82:	90 93 bc 07 	sts	0x07BC, r25
    3b86:	80 93 bb 07 	sts	0x07BB, r24
    3b8a:	10 92 ed 07 	sts	0x07ED, r1
    3b8e:	08 95       	ret

00003b90 <STEPPER_set_steps>:
    3b90:	98 2f       	mov	r25, r24
    3b92:	81 e0       	ldi	r24, 0x01	; 1
    3b94:	80 93 ed 07 	sts	0x07ED, r24
    3b98:	91 30       	cpi	r25, 0x01	; 1
    3b9a:	71 f0       	breq	.+28     	; 0x3bb8 <STEPPER_set_steps+0x28>
    3b9c:	91 30       	cpi	r25, 0x01	; 1
    3b9e:	18 f0       	brcs	.+6      	; 0x3ba6 <STEPPER_set_steps+0x16>
    3ba0:	92 30       	cpi	r25, 0x02	; 2
    3ba2:	71 f4       	brne	.+28     	; 0x3bc0 <STEPPER_set_steps+0x30>
    3ba4:	05 c0       	rjmp	.+10     	; 0x3bb0 <STEPPER_set_steps+0x20>
    3ba6:	70 93 ca 07 	sts	0x07CA, r23
    3baa:	60 93 c9 07 	sts	0x07C9, r22
    3bae:	08 c0       	rjmp	.+16     	; 0x3bc0 <STEPPER_set_steps+0x30>
    3bb0:	70 93 ca 07 	sts	0x07CA, r23
    3bb4:	60 93 c9 07 	sts	0x07C9, r22
    3bb8:	70 93 cc 07 	sts	0x07CC, r23
    3bbc:	60 93 cb 07 	sts	0x07CB, r22
    3bc0:	10 92 ed 07 	sts	0x07ED, r1
    3bc4:	08 95       	ret

00003bc6 <STEPPER_step>:
    3bc6:	8f 92       	push	r8
    3bc8:	9f 92       	push	r9
    3bca:	af 92       	push	r10
    3bcc:	bf 92       	push	r11
    3bce:	cf 92       	push	r12
    3bd0:	df 92       	push	r13
    3bd2:	ef 92       	push	r14
    3bd4:	ff 92       	push	r15
    3bd6:	0f 93       	push	r16
    3bd8:	1f 93       	push	r17
    3bda:	cf 93       	push	r28
    3bdc:	df 93       	push	r29
    3bde:	18 2f       	mov	r17, r24
    3be0:	f6 2e       	mov	r15, r22
    3be2:	5a 01       	movw	r10, r20
    3be4:	49 01       	movw	r8, r18
    3be6:	e6 01       	movw	r28, r12
    3be8:	61 e0       	ldi	r22, 0x01	; 1
    3bea:	0e 94 91 1d 	call	0x3b22	; 0x3b22 <STEPPER_set_mode>
    3bee:	81 2f       	mov	r24, r17
    3bf0:	b5 01       	movw	r22, r10
    3bf2:	a4 01       	movw	r20, r8
    3bf4:	0e 94 95 26 	call	0x4d2a	; 0x4d2a <STEPPER_setup_decels>
    3bf8:	81 2f       	mov	r24, r17
    3bfa:	6f 2d       	mov	r22, r15
    3bfc:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <STEPPER_set_dir>
    3c00:	81 2f       	mov	r24, r17
    3c02:	60 2f       	mov	r22, r16
    3c04:	0e 94 80 26 	call	0x4d00	; 0x4d00 <STEPPER_set_stop_mode>
    3c08:	81 2f       	mov	r24, r17
    3c0a:	b5 01       	movw	r22, r10
    3c0c:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <STEPPER_set_steps>
    3c10:	c1 14       	cp	r12, r1
    3c12:	d1 04       	cpc	r13, r1
    3c14:	99 f0       	breq	.+38     	; 0x3c3c <STEPPER_step+0x76>
    3c16:	11 30       	cpi	r17, 0x01	; 1
    3c18:	49 f0       	breq	.+18     	; 0x3c2c <STEPPER_step+0x66>
    3c1a:	11 30       	cpi	r17, 0x01	; 1
    3c1c:	18 f0       	brcs	.+6      	; 0x3c24 <STEPPER_step+0x5e>
    3c1e:	12 30       	cpi	r17, 0x02	; 2
    3c20:	69 f4       	brne	.+26     	; 0x3c3c <STEPPER_step+0x76>
    3c22:	06 c0       	rjmp	.+12     	; 0x3c30 <STEPPER_step+0x6a>
    3c24:	18 82       	st	Y, r1
    3c26:	10 92 e9 07 	sts	0x07E9, r1
    3c2a:	08 c0       	rjmp	.+16     	; 0x3c3c <STEPPER_step+0x76>
    3c2c:	19 82       	std	Y+1, r1	; 0x01
    3c2e:	04 c0       	rjmp	.+8      	; 0x3c38 <STEPPER_step+0x72>
    3c30:	18 82       	st	Y, r1
    3c32:	19 82       	std	Y+1, r1	; 0x01
    3c34:	10 92 e9 07 	sts	0x07E9, r1
    3c38:	10 92 ea 07 	sts	0x07EA, r1
    3c3c:	d0 93 ec 07 	sts	0x07EC, r29
    3c40:	c0 93 eb 07 	sts	0x07EB, r28
    3c44:	ee 20       	and	r14, r14
    3c46:	b9 f5       	brne	.+110    	; 0x3cb6 <STEPPER_step+0xf0>
    3c48:	8b e8       	ldi	r24, 0x8B	; 139
    3c4a:	94 e0       	ldi	r25, 0x04	; 4
    3c4c:	90 93 ec 07 	sts	0x07EC, r25
    3c50:	80 93 eb 07 	sts	0x07EB, r24
    3c54:	81 2f       	mov	r24, r17
    3c56:	b4 01       	movw	r22, r8
    3c58:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <STEPPER_set_speed>
    3c5c:	81 2f       	mov	r24, r17
    3c5e:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <STEPPER_go>
    3c62:	11 30       	cpi	r17, 0x01	; 1
    3c64:	71 f0       	breq	.+28     	; 0x3c82 <STEPPER_step+0xbc>
    3c66:	11 30       	cpi	r17, 0x01	; 1
    3c68:	18 f0       	brcs	.+6      	; 0x3c70 <STEPPER_step+0xaa>
    3c6a:	12 30       	cpi	r17, 0x02	; 2
    3c6c:	59 f5       	brne	.+86     	; 0x3cc4 <STEPPER_step+0xfe>
    3c6e:	12 c0       	rjmp	.+36     	; 0x3c94 <STEPPER_step+0xce>
    3c70:	10 92 8b 04 	sts	0x048B, r1
    3c74:	10 92 e9 07 	sts	0x07E9, r1
    3c78:	80 91 8b 04 	lds	r24, 0x048B
    3c7c:	88 23       	and	r24, r24
    3c7e:	e1 f3       	breq	.-8      	; 0x3c78 <STEPPER_step+0xb2>
    3c80:	21 c0       	rjmp	.+66     	; 0x3cc4 <STEPPER_step+0xfe>
    3c82:	10 92 8c 04 	sts	0x048C, r1
    3c86:	10 92 ea 07 	sts	0x07EA, r1
    3c8a:	80 91 8c 04 	lds	r24, 0x048C
    3c8e:	88 23       	and	r24, r24
    3c90:	e1 f3       	breq	.-8      	; 0x3c8a <STEPPER_step+0xc4>
    3c92:	18 c0       	rjmp	.+48     	; 0x3cc4 <STEPPER_step+0xfe>
    3c94:	10 92 8b 04 	sts	0x048B, r1
    3c98:	10 92 8c 04 	sts	0x048C, r1
    3c9c:	10 92 e9 07 	sts	0x07E9, r1
    3ca0:	10 92 ea 07 	sts	0x07EA, r1
    3ca4:	80 91 8b 04 	lds	r24, 0x048B
    3ca8:	88 23       	and	r24, r24
    3caa:	e1 f3       	breq	.-8      	; 0x3ca4 <STEPPER_step+0xde>
    3cac:	80 91 8c 04 	lds	r24, 0x048C
    3cb0:	88 23       	and	r24, r24
    3cb2:	c1 f3       	breq	.-16     	; 0x3ca4 <STEPPER_step+0xde>
    3cb4:	07 c0       	rjmp	.+14     	; 0x3cc4 <STEPPER_step+0xfe>
    3cb6:	81 2f       	mov	r24, r17
    3cb8:	b4 01       	movw	r22, r8
    3cba:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <STEPPER_set_speed>
    3cbe:	81 2f       	mov	r24, r17
    3cc0:	0e 94 61 26 	call	0x4cc2	; 0x4cc2 <STEPPER_go>
    3cc4:	df 91       	pop	r29
    3cc6:	cf 91       	pop	r28
    3cc8:	1f 91       	pop	r17
    3cca:	0f 91       	pop	r16
    3ccc:	ff 90       	pop	r15
    3cce:	ef 90       	pop	r14
    3cd0:	df 90       	pop	r13
    3cd2:	cf 90       	pop	r12
    3cd4:	bf 90       	pop	r11
    3cd6:	af 90       	pop	r10
    3cd8:	9f 90       	pop	r9
    3cda:	8f 90       	pop	r8
    3cdc:	08 95       	ret

00003cde <STEPPER_stop>:
    3cde:	0f 93       	push	r16
    3ce0:	1f 93       	push	r17
    3ce2:	18 2f       	mov	r17, r24
    3ce4:	06 2f       	mov	r16, r22
    3ce6:	66 23       	and	r22, r22
    3ce8:	49 f4       	brne	.+18     	; 0x3cfc <STEPPER_stop+0x1e>
    3cea:	60 e0       	ldi	r22, 0x00	; 0
    3cec:	70 e0       	ldi	r23, 0x00	; 0
    3cee:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <STEPPER_set_speed>
    3cf2:	81 2f       	mov	r24, r17
    3cf4:	60 e0       	ldi	r22, 0x00	; 0
    3cf6:	70 e0       	ldi	r23, 0x00	; 0
    3cf8:	0e 94 c8 1d 	call	0x3b90	; 0x3b90 <STEPPER_set_steps>
    3cfc:	81 e0       	ldi	r24, 0x01	; 1
    3cfe:	80 93 ed 07 	sts	0x07ED, r24
    3d02:	11 30       	cpi	r17, 0x01	; 1
    3d04:	51 f0       	breq	.+20     	; 0x3d1a <STEPPER_stop+0x3c>
    3d06:	11 30       	cpi	r17, 0x01	; 1
    3d08:	18 f0       	brcs	.+6      	; 0x3d10 <STEPPER_stop+0x32>
    3d0a:	12 30       	cpi	r17, 0x02	; 2
    3d0c:	41 f4       	brne	.+16     	; 0x3d1e <STEPPER_stop+0x40>
    3d0e:	03 c0       	rjmp	.+6      	; 0x3d16 <STEPPER_stop+0x38>
    3d10:	00 93 d5 07 	sts	0x07D5, r16
    3d14:	04 c0       	rjmp	.+8      	; 0x3d1e <STEPPER_stop+0x40>
    3d16:	00 93 d5 07 	sts	0x07D5, r16
    3d1a:	00 93 d6 07 	sts	0x07D6, r16
    3d1e:	10 92 ed 07 	sts	0x07ED, r1
    3d22:	1f 91       	pop	r17
    3d24:	0f 91       	pop	r16
    3d26:	08 95       	ret

00003d28 <STEPPER_wait_and_then>:
    3d28:	cf 92       	push	r12
    3d2a:	df 92       	push	r13
    3d2c:	ef 92       	push	r14
    3d2e:	ff 92       	push	r15
    3d30:	0f 93       	push	r16
    3d32:	1f 93       	push	r17
    3d34:	df 93       	push	r29
    3d36:	cf 93       	push	r28
    3d38:	cd b7       	in	r28, 0x3d	; 61
    3d3a:	de b7       	in	r29, 0x3e	; 62
    3d3c:	8b 85       	ldd	r24, Y+11	; 0x0b
    3d3e:	81 30       	cpi	r24, 0x01	; 1
    3d40:	61 f0       	breq	.+24     	; 0x3d5a <STEPPER_wait_and_then+0x32>
    3d42:	81 30       	cpi	r24, 0x01	; 1
    3d44:	18 f0       	brcs	.+6      	; 0x3d4c <STEPPER_wait_and_then+0x24>
    3d46:	82 30       	cpi	r24, 0x02	; 2
    3d48:	a1 f5       	brne	.+104    	; 0x3db2 <STEPPER_wait_and_then+0x8a>
    3d4a:	11 c0       	rjmp	.+34     	; 0x3d6e <STEPPER_wait_and_then+0x46>
    3d4c:	ec 85       	ldd	r30, Y+12	; 0x0c
    3d4e:	fd 85       	ldd	r31, Y+13	; 0x0d
    3d50:	80 91 ee 07 	lds	r24, 0x07EE
    3d54:	88 23       	and	r24, r24
    3d56:	e1 f3       	breq	.-8      	; 0x3d50 <STEPPER_wait_and_then+0x28>
    3d58:	06 c0       	rjmp	.+12     	; 0x3d66 <STEPPER_wait_and_then+0x3e>
    3d5a:	ec 85       	ldd	r30, Y+12	; 0x0c
    3d5c:	fd 85       	ldd	r31, Y+13	; 0x0d
    3d5e:	80 91 ef 07 	lds	r24, 0x07EF
    3d62:	88 23       	and	r24, r24
    3d64:	e1 f3       	breq	.-8      	; 0x3d5e <STEPPER_wait_and_then+0x36>
    3d66:	30 97       	sbiw	r30, 0x00	; 0
    3d68:	21 f1       	breq	.+72     	; 0x3db2 <STEPPER_wait_and_then+0x8a>
    3d6a:	09 95       	icall
    3d6c:	22 c0       	rjmp	.+68     	; 0x3db2 <STEPPER_wait_and_then+0x8a>
    3d6e:	cc 84       	ldd	r12, Y+12	; 0x0c
    3d70:	dd 84       	ldd	r13, Y+13	; 0x0d
    3d72:	ee 84       	ldd	r14, Y+14	; 0x0e
    3d74:	ff 84       	ldd	r15, Y+15	; 0x0f
    3d76:	00 e0       	ldi	r16, 0x00	; 0
    3d78:	10 e0       	ldi	r17, 0x00	; 0
    3d7a:	00 23       	and	r16, r16
    3d7c:	51 f4       	brne	.+20     	; 0x3d92 <STEPPER_wait_and_then+0x6a>
    3d7e:	80 91 ee 07 	lds	r24, 0x07EE
    3d82:	88 23       	and	r24, r24
    3d84:	31 f0       	breq	.+12     	; 0x3d92 <STEPPER_wait_and_then+0x6a>
    3d86:	c1 14       	cp	r12, r1
    3d88:	d1 04       	cpc	r13, r1
    3d8a:	11 f0       	breq	.+4      	; 0x3d90 <STEPPER_wait_and_then+0x68>
    3d8c:	f6 01       	movw	r30, r12
    3d8e:	09 95       	icall
    3d90:	01 e0       	ldi	r16, 0x01	; 1
    3d92:	11 23       	and	r17, r17
    3d94:	51 f4       	brne	.+20     	; 0x3daa <STEPPER_wait_and_then+0x82>
    3d96:	80 91 ef 07 	lds	r24, 0x07EF
    3d9a:	88 23       	and	r24, r24
    3d9c:	31 f0       	breq	.+12     	; 0x3daa <STEPPER_wait_and_then+0x82>
    3d9e:	e1 14       	cp	r14, r1
    3da0:	f1 04       	cpc	r15, r1
    3da2:	11 f0       	breq	.+4      	; 0x3da8 <STEPPER_wait_and_then+0x80>
    3da4:	f7 01       	movw	r30, r14
    3da6:	09 95       	icall
    3da8:	11 e0       	ldi	r17, 0x01	; 1
    3daa:	00 23       	and	r16, r16
    3dac:	31 f3       	breq	.-52     	; 0x3d7a <STEPPER_wait_and_then+0x52>
    3dae:	11 23       	and	r17, r17
    3db0:	21 f3       	breq	.-56     	; 0x3d7a <STEPPER_wait_and_then+0x52>
    3db2:	cf 91       	pop	r28
    3db4:	df 91       	pop	r29
    3db6:	1f 91       	pop	r17
    3db8:	0f 91       	pop	r16
    3dba:	ff 90       	pop	r15
    3dbc:	ef 90       	pop	r14
    3dbe:	df 90       	pop	r13
    3dc0:	cf 90       	pop	r12
    3dc2:	08 95       	ret

00003dc4 <SYS_get_state>:
    3dc4:	e8 2f       	mov	r30, r24
    3dc6:	f0 e0       	ldi	r31, 0x00	; 0
    3dc8:	e3 31       	cpi	r30, 0x13	; 19
    3dca:	f1 05       	cpc	r31, r1
    3dcc:	40 f4       	brcc	.+16     	; 0x3dde <SYS_get_state+0x1a>
    3dce:	e2 5c       	subi	r30, 0xC2	; 194
    3dd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd2:	ee 0f       	add	r30, r30
    3dd4:	ff 1f       	adc	r31, r31
    3dd6:	05 90       	lpm	r0, Z+
    3dd8:	f4 91       	lpm	r31, Z+
    3dda:	e0 2d       	mov	r30, r0
    3ddc:	09 94       	ijmp
    3dde:	80 e0       	ldi	r24, 0x00	; 0
    3de0:	08 95       	ret
    3de2:	80 91 f0 07 	lds	r24, 0x07F0
    3de6:	08 95       	ret
    3de8:	80 91 f1 07 	lds	r24, 0x07F1
    3dec:	08 95       	ret
    3dee:	80 91 f2 07 	lds	r24, 0x07F2
    3df2:	08 95       	ret
    3df4:	80 91 f3 07 	lds	r24, 0x07F3
    3df8:	08 95       	ret
    3dfa:	80 91 f4 07 	lds	r24, 0x07F4
    3dfe:	08 95       	ret
    3e00:	80 91 f6 07 	lds	r24, 0x07F6
    3e04:	08 95       	ret
    3e06:	80 91 f5 07 	lds	r24, 0x07F5
    3e0a:	08 95       	ret
    3e0c:	80 91 f7 07 	lds	r24, 0x07F7
    3e10:	08 95       	ret
    3e12:	80 91 f8 07 	lds	r24, 0x07F8
    3e16:	08 95       	ret
    3e18:	80 91 f9 07 	lds	r24, 0x07F9
    3e1c:	08 95       	ret
    3e1e:	80 91 fa 07 	lds	r24, 0x07FA
    3e22:	08 95       	ret
    3e24:	80 91 fb 07 	lds	r24, 0x07FB
    3e28:	08 95       	ret
    3e2a:	80 91 fc 07 	lds	r24, 0x07FC
    3e2e:	08 95       	ret
    3e30:	80 91 fd 07 	lds	r24, 0x07FD
    3e34:	08 95       	ret
    3e36:	80 91 fe 07 	lds	r24, 0x07FE
    3e3a:	08 95       	ret
    3e3c:	80 91 ff 07 	lds	r24, 0x07FF
    3e40:	08 95       	ret
    3e42:	80 91 00 08 	lds	r24, 0x0800
    3e46:	08 95       	ret
    3e48:	80 91 01 08 	lds	r24, 0x0801
    3e4c:	08 95       	ret
    3e4e:	80 91 02 08 	lds	r24, 0x0802
    3e52:	08 95       	ret

00003e54 <SYS_set_state>:
    3e54:	e8 2f       	mov	r30, r24
    3e56:	f0 e0       	ldi	r31, 0x00	; 0
    3e58:	e3 31       	cpi	r30, 0x13	; 19
    3e5a:	f1 05       	cpc	r31, r1
    3e5c:	08 f0       	brcs	.+2      	; 0x3e60 <SYS_set_state+0xc>
    3e5e:	40 c0       	rjmp	.+128    	; 0x3ee0 <SYS_set_state+0x8c>
    3e60:	ef 5a       	subi	r30, 0xAF	; 175
    3e62:	ff 4f       	sbci	r31, 0xFF	; 255
    3e64:	ee 0f       	add	r30, r30
    3e66:	ff 1f       	adc	r31, r31
    3e68:	05 90       	lpm	r0, Z+
    3e6a:	f4 91       	lpm	r31, Z+
    3e6c:	e0 2d       	mov	r30, r0
    3e6e:	09 94       	ijmp
    3e70:	60 93 f0 07 	sts	0x07F0, r22
    3e74:	08 95       	ret
    3e76:	60 93 f1 07 	sts	0x07F1, r22
    3e7a:	08 95       	ret
    3e7c:	60 93 f2 07 	sts	0x07F2, r22
    3e80:	08 95       	ret
    3e82:	60 93 f3 07 	sts	0x07F3, r22
    3e86:	08 95       	ret
    3e88:	60 93 f4 07 	sts	0x07F4, r22
    3e8c:	08 95       	ret
    3e8e:	60 93 f6 07 	sts	0x07F6, r22
    3e92:	08 95       	ret
    3e94:	60 93 f5 07 	sts	0x07F5, r22
    3e98:	08 95       	ret
    3e9a:	60 93 f7 07 	sts	0x07F7, r22
    3e9e:	08 95       	ret
    3ea0:	60 93 f8 07 	sts	0x07F8, r22
    3ea4:	08 95       	ret
    3ea6:	60 93 f9 07 	sts	0x07F9, r22
    3eaa:	08 95       	ret
    3eac:	60 93 fa 07 	sts	0x07FA, r22
    3eb0:	08 95       	ret
    3eb2:	60 93 fb 07 	sts	0x07FB, r22
    3eb6:	08 95       	ret
    3eb8:	60 93 fc 07 	sts	0x07FC, r22
    3ebc:	08 95       	ret
    3ebe:	60 93 fd 07 	sts	0x07FD, r22
    3ec2:	08 95       	ret
    3ec4:	60 93 fe 07 	sts	0x07FE, r22
    3ec8:	08 95       	ret
    3eca:	60 93 ff 07 	sts	0x07FF, r22
    3ece:	08 95       	ret
    3ed0:	60 93 00 08 	sts	0x0800, r22
    3ed4:	08 95       	ret
    3ed6:	60 93 01 08 	sts	0x0801, r22
    3eda:	08 95       	ret
    3edc:	60 93 00 08 	sts	0x0800, r22
    3ee0:	08 95       	ret

00003ee2 <ATTINY_get_sensors>:
    3ee2:	0f 93       	push	r16
    3ee4:	1f 93       	push	r17
    3ee6:	81 e0       	ldi	r24, 0x01	; 1
    3ee8:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    3eec:	81 30       	cpi	r24, 0x01	; 1
    3eee:	11 f0       	breq	.+4      	; 0x3ef4 <ATTINY_get_sensors+0x12>
    3ef0:	00 e0       	ldi	r16, 0x00	; 0
    3ef2:	24 c0       	rjmp	.+72     	; 0x3f3c <ATTINY_get_sensors+0x5a>
    3ef4:	87 e0       	ldi	r24, 0x07	; 7
    3ef6:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <SPI_set_slave_addr>
    3efa:	82 e0       	ldi	r24, 0x02	; 2
    3efc:	6a e0       	ldi	r22, 0x0A	; 10
    3efe:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <SPI_transmit>
    3f02:	82 e0       	ldi	r24, 0x02	; 2
    3f04:	62 eb       	ldi	r22, 0xB2	; 178
    3f06:	0e 94 d0 1a 	call	0x35a0	; 0x35a0 <SPI_transmit>
    3f0a:	18 ec       	ldi	r17, 0xC8	; 200
    3f0c:	81 2f       	mov	r24, r17
    3f0e:	8a 95       	dec	r24
    3f10:	f1 f7       	brne	.-4      	; 0x3f0e <ATTINY_get_sensors+0x2c>
    3f12:	82 e0       	ldi	r24, 0x02	; 2
    3f14:	60 e0       	ldi	r22, 0x00	; 0
    3f16:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <SPI_receive>
    3f1a:	08 2f       	mov	r16, r24
    3f1c:	81 2f       	mov	r24, r17
    3f1e:	8a 95       	dec	r24
    3f20:	f1 f7       	brne	.-4      	; 0x3f1e <ATTINY_get_sensors+0x3c>
    3f22:	82 e0       	ldi	r24, 0x02	; 2
    3f24:	60 e0       	ldi	r22, 0x00	; 0
    3f26:	0e 94 4c 25 	call	0x4a98	; 0x4a98 <SPI_receive>
    3f2a:	1a 95       	dec	r17
    3f2c:	f1 f7       	brne	.-4      	; 0x3f2a <ATTINY_get_sensors+0x48>
    3f2e:	87 e0       	ldi	r24, 0x07	; 7
    3f30:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <SPI_set_slave_addr>
    3f34:	88 e8       	ldi	r24, 0x88	; 136
    3f36:	93 e1       	ldi	r25, 0x13	; 19
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	f1 f7       	brne	.-4      	; 0x3f38 <ATTINY_get_sensors+0x56>
    3f3c:	80 2f       	mov	r24, r16
    3f3e:	1f 91       	pop	r17
    3f40:	0f 91       	pop	r16
    3f42:	08 95       	ret

00003f44 <ATTINY_get_SW_state>:
    3f44:	1f 93       	push	r17
    3f46:	cf 93       	push	r28
    3f48:	df 93       	push	r29
    3f4a:	18 2f       	mov	r17, r24
    3f4c:	80 91 8e 04 	lds	r24, 0x048E
    3f50:	88 23       	and	r24, r24
    3f52:	41 f0       	breq	.+16     	; 0x3f64 <ATTINY_get_SW_state+0x20>
    3f54:	80 91 98 04 	lds	r24, 0x0498
    3f58:	88 23       	and	r24, r24
    3f5a:	99 f0       	breq	.+38     	; 0x3f82 <ATTINY_get_SW_state+0x3e>
    3f5c:	10 92 8e 04 	sts	0x048E, r1
    3f60:	10 92 98 04 	sts	0x0498, r1
    3f64:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <ATTINY_get_sensors>
    3f68:	80 93 8d 04 	sts	0x048D, r24
    3f6c:	82 e9       	ldi	r24, 0x92	; 146
    3f6e:	94 e0       	ldi	r25, 0x04	; 4
    3f70:	61 e0       	ldi	r22, 0x01	; 1
    3f72:	40 e0       	ldi	r20, 0x00	; 0
    3f74:	22 e3       	ldi	r18, 0x32	; 50
    3f76:	30 e0       	ldi	r19, 0x00	; 0
    3f78:	0e 94 60 20 	call	0x40c0	; 0x40c0 <TMRSRVC_new>
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	80 93 8e 04 	sts	0x048E, r24
    3f82:	90 91 8d 04 	lds	r25, 0x048D
    3f86:	a1 2f       	mov	r26, r17
    3f88:	b0 e0       	ldi	r27, 0x00	; 0
    3f8a:	ed 01       	movw	r28, r26
    3f8c:	c9 5e       	subi	r28, 0xE9	; 233
    3f8e:	db 4f       	sbci	r29, 0xFB	; 251
    3f90:	88 81       	ld	r24, Y
    3f92:	88 23       	and	r24, r24
    3f94:	69 f0       	breq	.+26     	; 0x3fb0 <ATTINY_get_SW_state+0x6c>
    3f96:	fd 01       	movw	r30, r26
    3f98:	e6 5e       	subi	r30, 0xE6	; 230
    3f9a:	fb 4f       	sbci	r31, 0xFB	; 251
    3f9c:	80 81       	ld	r24, Z
    3f9e:	98 23       	and	r25, r24
    3fa0:	c1 f0       	breq	.+48     	; 0x3fd2 <ATTINY_get_SW_state+0x8e>
    3fa2:	fd 01       	movw	r30, r26
    3fa4:	e1 57       	subi	r30, 0x71	; 113
    3fa6:	fb 4f       	sbci	r31, 0xFB	; 251
    3fa8:	81 e0       	ldi	r24, 0x01	; 1
    3faa:	80 83       	st	Z, r24
    3fac:	18 82       	st	Y, r1
    3fae:	11 c0       	rjmp	.+34     	; 0x3fd2 <ATTINY_get_SW_state+0x8e>
    3fb0:	fd 01       	movw	r30, r26
    3fb2:	e1 57       	subi	r30, 0x71	; 113
    3fb4:	fb 4f       	sbci	r31, 0xFB	; 251
    3fb6:	80 81       	ld	r24, Z
    3fb8:	81 11       	cpse	r24, r1
    3fba:	10 82       	st	Z, r1
    3fbc:	fd 01       	movw	r30, r26
    3fbe:	e6 5e       	subi	r30, 0xE6	; 230
    3fc0:	fb 4f       	sbci	r31, 0xFB	; 251
    3fc2:	80 81       	ld	r24, Z
    3fc4:	98 23       	and	r25, r24
    3fc6:	29 f4       	brne	.+10     	; 0x3fd2 <ATTINY_get_SW_state+0x8e>
    3fc8:	fd 01       	movw	r30, r26
    3fca:	e9 5e       	subi	r30, 0xE9	; 233
    3fcc:	fb 4f       	sbci	r31, 0xFB	; 251
    3fce:	81 e0       	ldi	r24, 0x01	; 1
    3fd0:	80 83       	st	Z, r24
    3fd2:	a1 57       	subi	r26, 0x71	; 113
    3fd4:	bb 4f       	sbci	r27, 0xFB	; 251
    3fd6:	8c 91       	ld	r24, X
    3fd8:	df 91       	pop	r29
    3fda:	cf 91       	pop	r28
    3fdc:	1f 91       	pop	r17
    3fde:	08 95       	ret

00003fe0 <ATTINY_open>:
    3fe0:	82 e0       	ldi	r24, 0x02	; 2
    3fe2:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    3fe6:	88 23       	and	r24, r24
    3fe8:	19 f4       	brne	.+6      	; 0x3ff0 <ATTINY_open+0x10>
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	82 e0       	ldi	r24, 0x02	; 2
    3fee:	08 95       	ret
    3ff0:	10 92 1e 08 	sts	0x081E, r1
    3ff4:	10 92 1d 08 	sts	0x081D, r1
    3ff8:	10 92 20 08 	sts	0x0820, r1
    3ffc:	10 92 1f 08 	sts	0x081F, r1
    4000:	10 92 22 08 	sts	0x0822, r1
    4004:	10 92 21 08 	sts	0x0821, r1
    4008:	10 92 24 08 	sts	0x0824, r1
    400c:	10 92 23 08 	sts	0x0823, r1
    4010:	10 92 26 08 	sts	0x0826, r1
    4014:	10 92 25 08 	sts	0x0825, r1
    4018:	80 e9       	ldi	r24, 0x90	; 144
    401a:	91 e0       	ldi	r25, 0x01	; 1
    401c:	90 93 0a 08 	sts	0x080A, r25
    4020:	80 93 09 08 	sts	0x0809, r24
    4024:	90 93 0c 08 	sts	0x080C, r25
    4028:	80 93 0b 08 	sts	0x080B, r24
    402c:	90 93 0e 08 	sts	0x080E, r25
    4030:	80 93 0d 08 	sts	0x080D, r24
    4034:	90 93 10 08 	sts	0x0810, r25
    4038:	80 93 0f 08 	sts	0x080F, r24
    403c:	90 93 12 08 	sts	0x0812, r25
    4040:	80 93 11 08 	sts	0x0811, r24
    4044:	84 e3       	ldi	r24, 0x34	; 52
    4046:	98 e0       	ldi	r25, 0x08	; 8
    4048:	90 93 14 08 	sts	0x0814, r25
    404c:	80 93 13 08 	sts	0x0813, r24
    4050:	90 93 16 08 	sts	0x0816, r25
    4054:	80 93 15 08 	sts	0x0815, r24
    4058:	90 93 18 08 	sts	0x0818, r25
    405c:	80 93 17 08 	sts	0x0817, r24
    4060:	90 93 1a 08 	sts	0x081A, r25
    4064:	80 93 19 08 	sts	0x0819, r24
    4068:	90 93 1c 08 	sts	0x081C, r25
    406c:	80 93 1b 08 	sts	0x081B, r24
    4070:	81 e0       	ldi	r24, 0x01	; 1
    4072:	61 e0       	ldi	r22, 0x01	; 1
    4074:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    4078:	91 e0       	ldi	r25, 0x01	; 1
    407a:	81 e0       	ldi	r24, 0x01	; 1
    407c:	08 95       	ret

0000407e <TMRSRVC_delay>:
    407e:	df 93       	push	r29
    4080:	cf 93       	push	r28
    4082:	cd b7       	in	r28, 0x3d	; 61
    4084:	de b7       	in	r29, 0x3e	; 62
    4086:	29 97       	sbiw	r28, 0x09	; 9
    4088:	0f b6       	in	r0, 0x3f	; 63
    408a:	f8 94       	cli
    408c:	de bf       	out	0x3e, r29	; 62
    408e:	0f be       	out	0x3f, r0	; 63
    4090:	cd bf       	out	0x3d, r28	; 61
    4092:	9c 01       	movw	r18, r24
    4094:	ce 01       	movw	r24, r28
    4096:	01 96       	adiw	r24, 0x01	; 1
    4098:	61 e0       	ldi	r22, 0x01	; 1
    409a:	40 e0       	ldi	r20, 0x00	; 0
    409c:	0e 94 60 20 	call	0x40c0	; 0x40c0 <TMRSRVC_new>
    40a0:	98 2f       	mov	r25, r24
    40a2:	88 23       	and	r24, r24
    40a4:	19 f4       	brne	.+6      	; 0x40ac <TMRSRVC_delay+0x2e>
    40a6:	8f 81       	ldd	r24, Y+7	; 0x07
    40a8:	88 23       	and	r24, r24
    40aa:	e9 f3       	breq	.-6      	; 0x40a6 <TMRSRVC_delay+0x28>
    40ac:	89 2f       	mov	r24, r25
    40ae:	29 96       	adiw	r28, 0x09	; 9
    40b0:	0f b6       	in	r0, 0x3f	; 63
    40b2:	f8 94       	cli
    40b4:	de bf       	out	0x3e, r29	; 62
    40b6:	0f be       	out	0x3f, r0	; 63
    40b8:	cd bf       	out	0x3d, r28	; 61
    40ba:	cf 91       	pop	r28
    40bc:	df 91       	pop	r29
    40be:	08 95       	ret

000040c0 <TMRSRVC_new>:
    40c0:	ef 92       	push	r14
    40c2:	ff 92       	push	r15
    40c4:	0f 93       	push	r16
    40c6:	1f 93       	push	r17
    40c8:	cf 93       	push	r28
    40ca:	df 93       	push	r29
    40cc:	ec 01       	movw	r28, r24
    40ce:	f6 2e       	mov	r15, r22
    40d0:	e4 2e       	mov	r14, r20
    40d2:	89 01       	movw	r16, r18
    40d4:	88 e0       	ldi	r24, 0x08	; 8
    40d6:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    40da:	81 30       	cpi	r24, 0x01	; 1
    40dc:	11 f0       	breq	.+4      	; 0x40e2 <TMRSRVC_new+0x22>
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	26 c0       	rjmp	.+76     	; 0x412e <TMRSRVC_new+0x6e>
    40e2:	84 e0       	ldi	r24, 0x04	; 4
    40e4:	90 e0       	ldi	r25, 0x00	; 0
    40e6:	0e 94 b5 33 	call	0x676a	; 0x676a <malloc>
    40ea:	fc 01       	movw	r30, r24
    40ec:	00 97       	sbiw	r24, 0x00	; 0
    40ee:	11 f4       	brne	.+4      	; 0x40f4 <TMRSRVC_new+0x34>
    40f0:	82 e0       	ldi	r24, 0x02	; 2
    40f2:	1d c0       	rjmp	.+58     	; 0x412e <TMRSRVC_new+0x6e>
    40f4:	f9 82       	std	Y+1, r15	; 0x01
    40f6:	f0 fc       	sbrc	r15, 0
    40f8:	1e 82       	std	Y+6, r1	; 0x06
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	e8 16       	cp	r14, r24
    40fe:	19 f4       	brne	.+6      	; 0x4106 <TMRSRVC_new+0x46>
    4100:	89 81       	ldd	r24, Y+1	; 0x01
    4102:	84 60       	ori	r24, 0x04	; 4
    4104:	89 83       	std	Y+1, r24	; 0x01
    4106:	89 81       	ldd	r24, Y+1	; 0x01
    4108:	88 60       	ori	r24, 0x08	; 8
    410a:	89 83       	std	Y+1, r24	; 0x01
    410c:	1b 83       	std	Y+3, r17	; 0x03
    410e:	0a 83       	std	Y+2, r16	; 0x02
    4110:	1d 83       	std	Y+5, r17	; 0x05
    4112:	0c 83       	std	Y+4, r16	; 0x04
    4114:	d1 83       	std	Z+1, r29	; 0x01
    4116:	c0 83       	st	Z, r28
    4118:	13 82       	std	Z+3, r1	; 0x03
    411a:	12 82       	std	Z+2, r1	; 0x02
    411c:	81 e0       	ldi	r24, 0x01	; 1
    411e:	80 93 fb 04 	sts	0x04FB, r24
    4122:	cf 01       	movw	r24, r30
    4124:	0e 94 f5 26 	call	0x4dea	; 0x4dea <TMRSRVC_insert>
    4128:	10 92 fb 04 	sts	0x04FB, r1
    412c:	80 e0       	ldi	r24, 0x00	; 0
    412e:	df 91       	pop	r29
    4130:	cf 91       	pop	r28
    4132:	1f 91       	pop	r17
    4134:	0f 91       	pop	r16
    4136:	ff 90       	pop	r15
    4138:	ef 90       	pop	r14
    413a:	08 95       	ret

0000413c <I2C_MSTR_get>:
    413c:	fc 01       	movw	r30, r24
    413e:	80 91 2a 08 	lds	r24, 0x082A
    4142:	81 30       	cpi	r24, 0x01	; 1
    4144:	11 f0       	breq	.+4      	; 0x414a <I2C_MSTR_get+0xe>
    4146:	85 e0       	ldi	r24, 0x05	; 5
    4148:	08 95       	ret
    414a:	80 91 2b 08 	lds	r24, 0x082B
    414e:	81 30       	cpi	r24, 0x01	; 1
    4150:	11 f0       	breq	.+4      	; 0x4156 <I2C_MSTR_get+0x1a>
    4152:	8a e0       	ldi	r24, 0x0A	; 10
    4154:	08 95       	ret
    4156:	61 30       	cpi	r22, 0x01	; 1
    4158:	11 f4       	brne	.+4      	; 0x415e <I2C_MSTR_get+0x22>
    415a:	84 ec       	ldi	r24, 0xC4	; 196
    415c:	01 c0       	rjmp	.+2      	; 0x4160 <I2C_MSTR_get+0x24>
    415e:	84 e8       	ldi	r24, 0x84	; 132
    4160:	80 93 bc 00 	sts	0x00BC, r24
    4164:	80 91 bc 00 	lds	r24, 0x00BC
    4168:	87 ff       	sbrs	r24, 7
    416a:	fc cf       	rjmp	.-8      	; 0x4164 <I2C_MSTR_get+0x28>
    416c:	61 30       	cpi	r22, 0x01	; 1
    416e:	31 f4       	brne	.+12     	; 0x417c <I2C_MSTR_get+0x40>
    4170:	80 91 b9 00 	lds	r24, 0x00B9
    4174:	88 7f       	andi	r24, 0xF8	; 248
    4176:	80 35       	cpi	r24, 0x50	; 80
    4178:	59 f4       	brne	.+22     	; 0x4190 <I2C_MSTR_get+0x54>
    417a:	05 c0       	rjmp	.+10     	; 0x4186 <I2C_MSTR_get+0x4a>
    417c:	80 91 b9 00 	lds	r24, 0x00B9
    4180:	88 7f       	andi	r24, 0xF8	; 248
    4182:	88 35       	cpi	r24, 0x58	; 88
    4184:	29 f4       	brne	.+10     	; 0x4190 <I2C_MSTR_get+0x54>
    4186:	80 91 bb 00 	lds	r24, 0x00BB
    418a:	80 83       	st	Z, r24
    418c:	80 e0       	ldi	r24, 0x00	; 0
    418e:	08 95       	ret
    4190:	82 e0       	ldi	r24, 0x02	; 2
    4192:	08 95       	ret

00004194 <I2C_MSTR_send>:
    4194:	98 2f       	mov	r25, r24
    4196:	80 91 2a 08 	lds	r24, 0x082A
    419a:	81 30       	cpi	r24, 0x01	; 1
    419c:	11 f0       	breq	.+4      	; 0x41a2 <I2C_MSTR_send+0xe>
    419e:	85 e0       	ldi	r24, 0x05	; 5
    41a0:	08 95       	ret
    41a2:	80 91 2b 08 	lds	r24, 0x082B
    41a6:	81 30       	cpi	r24, 0x01	; 1
    41a8:	11 f0       	breq	.+4      	; 0x41ae <I2C_MSTR_send+0x1a>
    41aa:	8a e0       	ldi	r24, 0x0A	; 10
    41ac:	08 95       	ret
    41ae:	90 93 bb 00 	sts	0x00BB, r25
    41b2:	84 e8       	ldi	r24, 0x84	; 132
    41b4:	80 93 bc 00 	sts	0x00BC, r24
    41b8:	80 91 bc 00 	lds	r24, 0x00BC
    41bc:	87 ff       	sbrs	r24, 7
    41be:	fc cf       	rjmp	.-8      	; 0x41b8 <I2C_MSTR_send+0x24>
    41c0:	80 91 b9 00 	lds	r24, 0x00B9
    41c4:	90 e0       	ldi	r25, 0x00	; 0
    41c6:	88 7f       	andi	r24, 0xF8	; 248
    41c8:	90 70       	andi	r25, 0x00	; 0
    41ca:	88 32       	cpi	r24, 0x28	; 40
    41cc:	91 05       	cpc	r25, r1
    41ce:	21 f0       	breq	.+8      	; 0x41d8 <I2C_MSTR_send+0x44>
    41d0:	c0 97       	sbiw	r24, 0x30	; 48
    41d2:	21 f4       	brne	.+8      	; 0x41dc <I2C_MSTR_send+0x48>
    41d4:	83 e0       	ldi	r24, 0x03	; 3
    41d6:	08 95       	ret
    41d8:	80 e0       	ldi	r24, 0x00	; 0
    41da:	08 95       	ret
    41dc:	8c e0       	ldi	r24, 0x0C	; 12
    41de:	08 95       	ret

000041e0 <I2C_MSTR_start>:
    41e0:	98 2f       	mov	r25, r24
    41e2:	20 91 2a 08 	lds	r18, 0x082A
    41e6:	21 30       	cpi	r18, 0x01	; 1
    41e8:	11 f0       	breq	.+4      	; 0x41ee <I2C_MSTR_start+0xe>
    41ea:	85 e0       	ldi	r24, 0x05	; 5
    41ec:	08 95       	ret
    41ee:	80 91 2c 08 	lds	r24, 0x082C
    41f2:	81 30       	cpi	r24, 0x01	; 1
    41f4:	11 f4       	brne	.+4      	; 0x41fa <I2C_MSTR_start+0x1a>
    41f6:	89 e0       	ldi	r24, 0x09	; 9
    41f8:	08 95       	ret
    41fa:	20 93 2b 08 	sts	0x082B, r18
    41fe:	84 ea       	ldi	r24, 0xA4	; 164
    4200:	80 93 bc 00 	sts	0x00BC, r24
    4204:	80 91 bc 00 	lds	r24, 0x00BC
    4208:	87 ff       	sbrs	r24, 7
    420a:	fc cf       	rjmp	.-8      	; 0x4204 <I2C_MSTR_start+0x24>
    420c:	80 91 b9 00 	lds	r24, 0x00B9
    4210:	88 7f       	andi	r24, 0xF8	; 248
    4212:	88 30       	cpi	r24, 0x08	; 8
    4214:	39 f0       	breq	.+14     	; 0x4224 <I2C_MSTR_start+0x44>
    4216:	80 91 b9 00 	lds	r24, 0x00B9
    421a:	88 7f       	andi	r24, 0xF8	; 248
    421c:	80 31       	cpi	r24, 0x10	; 16
    421e:	11 f0       	breq	.+4      	; 0x4224 <I2C_MSTR_start+0x44>
    4220:	81 e0       	ldi	r24, 0x01	; 1
    4222:	08 95       	ret
    4224:	61 30       	cpi	r22, 0x01	; 1
    4226:	19 f4       	brne	.+6      	; 0x422e <I2C_MSTR_start+0x4e>
    4228:	99 0f       	add	r25, r25
    422a:	91 60       	ori	r25, 0x01	; 1
    422c:	03 c0       	rjmp	.+6      	; 0x4234 <I2C_MSTR_start+0x54>
    422e:	66 23       	and	r22, r22
    4230:	19 f4       	brne	.+6      	; 0x4238 <I2C_MSTR_start+0x58>
    4232:	99 0f       	add	r25, r25
    4234:	90 93 bb 00 	sts	0x00BB, r25
    4238:	84 e8       	ldi	r24, 0x84	; 132
    423a:	80 93 bc 00 	sts	0x00BC, r24
    423e:	80 91 bc 00 	lds	r24, 0x00BC
    4242:	87 ff       	sbrs	r24, 7
    4244:	fc cf       	rjmp	.-8      	; 0x423e <I2C_MSTR_start+0x5e>
    4246:	61 30       	cpi	r22, 0x01	; 1
    4248:	31 f4       	brne	.+12     	; 0x4256 <I2C_MSTR_start+0x76>
    424a:	80 91 b9 00 	lds	r24, 0x00B9
    424e:	88 7f       	andi	r24, 0xF8	; 248
    4250:	80 34       	cpi	r24, 0x40	; 64
    4252:	41 f4       	brne	.+16     	; 0x4264 <I2C_MSTR_start+0x84>
    4254:	09 c0       	rjmp	.+18     	; 0x4268 <I2C_MSTR_start+0x88>
    4256:	66 23       	and	r22, r22
    4258:	39 f4       	brne	.+14     	; 0x4268 <I2C_MSTR_start+0x88>
    425a:	80 91 b9 00 	lds	r24, 0x00B9
    425e:	88 7f       	andi	r24, 0xF8	; 248
    4260:	88 31       	cpi	r24, 0x18	; 24
    4262:	11 f0       	breq	.+4      	; 0x4268 <I2C_MSTR_start+0x88>
    4264:	82 e0       	ldi	r24, 0x02	; 2
    4266:	08 95       	ret
    4268:	80 e0       	ldi	r24, 0x00	; 0
    426a:	08 95       	ret

0000426c <I2C_MSTR_stop>:
    426c:	80 91 2b 08 	lds	r24, 0x082B
    4270:	81 30       	cpi	r24, 0x01	; 1
    4272:	11 f0       	breq	.+4      	; 0x4278 <I2C_MSTR_stop+0xc>
    4274:	8a e0       	ldi	r24, 0x0A	; 10
    4276:	08 95       	ret
    4278:	80 91 2d 08 	lds	r24, 0x082D
    427c:	81 30       	cpi	r24, 0x01	; 1
    427e:	29 f4       	brne	.+10     	; 0x428a <I2C_MSTR_stop+0x1e>
    4280:	85 e9       	ldi	r24, 0x95	; 149
    4282:	80 93 bc 00 	sts	0x00BC, r24
    4286:	80 e0       	ldi	r24, 0x00	; 0
    4288:	08 95       	ret
    428a:	84 e9       	ldi	r24, 0x94	; 148
    428c:	80 93 bc 00 	sts	0x00BC, r24
    4290:	80 e0       	ldi	r24, 0x00	; 0
    4292:	08 95       	ret

00004294 <I2C_open>:
    4294:	82 e1       	ldi	r24, 0x12	; 18
    4296:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    429a:	88 23       	and	r24, r24
    429c:	b1 f4       	brne	.+44     	; 0x42ca <I2C_open+0x36>
    429e:	10 92 2a 08 	sts	0x082A, r1
    42a2:	10 92 2b 08 	sts	0x082B, r1
    42a6:	10 92 2c 08 	sts	0x082C, r1
    42aa:	10 92 2d 08 	sts	0x082D, r1
    42ae:	10 92 2e 08 	sts	0x082E, r1
    42b2:	0e 94 91 27 	call	0x4f22	; 0x4f22 <__I2C_init>
    42b6:	87 e1       	ldi	r24, 0x17	; 23
    42b8:	60 e0       	ldi	r22, 0x00	; 0
    42ba:	0e 94 68 21 	call	0x42d0	; 0x42d0 <I2C_set_BRG>
    42be:	0e 94 87 27 	call	0x4f0e	; 0x4f0e <I2C_enable>
    42c2:	82 e1       	ldi	r24, 0x12	; 18
    42c4:	61 e0       	ldi	r22, 0x01	; 1
    42c6:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    42ca:	82 e1       	ldi	r24, 0x12	; 18
    42cc:	90 e0       	ldi	r25, 0x00	; 0
    42ce:	08 95       	ret

000042d0 <I2C_set_BRG>:
    42d0:	63 70       	andi	r22, 0x03	; 3
    42d2:	60 93 b9 00 	sts	0x00B9, r22
    42d6:	80 93 b8 00 	sts	0x00B8, r24
    42da:	81 e0       	ldi	r24, 0x01	; 1
    42dc:	80 93 2a 08 	sts	0x082A, r24
    42e0:	08 95       	ret

000042e2 <__ADC_init>:
    42e2:	8f e1       	ldi	r24, 0x1F	; 31
    42e4:	80 93 7c 00 	sts	0x007C, r24
    42e8:	ea e7       	ldi	r30, 0x7A	; 122
    42ea:	f0 e0       	ldi	r31, 0x00	; 0
    42ec:	87 e0       	ldi	r24, 0x07	; 7
    42ee:	80 83       	st	Z, r24
    42f0:	80 81       	ld	r24, Z
    42f2:	80 68       	ori	r24, 0x80	; 128
    42f4:	80 83       	st	Z, r24
    42f6:	08 95       	ret

000042f8 <CBOT_init>:
    42f8:	0e 94 d2 26 	call	0x4da4	; 0x4da4 <SYS_init>
    42fc:	0e 94 ae 24 	call	0x495c	; 0x495c <ATMEGA_open>
    4300:	0e 94 de 23 	call	0x47bc	; 0x47bc <ISR_open>
    4304:	0e 94 5e 27 	call	0x4ebc	; 0x4ebc <TMRSRVC_open>
    4308:	0e 94 13 25 	call	0x4a26	; 0x4a26 <SPI_open>
    430c:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <ATTINY_open>
    4310:	78 94       	sei
    4312:	08 95       	ret

00004314 <CBOT_ISR_init>:
    4314:	00 00       	nop
    4316:	08 95       	ret

00004318 <__vector_16>:
    4318:	1f 92       	push	r1
    431a:	0f 92       	push	r0
    431c:	0f b6       	in	r0, 0x3f	; 63
    431e:	0f 92       	push	r0
    4320:	11 24       	eor	r1, r1
    4322:	2f 93       	push	r18
    4324:	3f 93       	push	r19
    4326:	4f 93       	push	r20
    4328:	5f 93       	push	r21
    432a:	6f 93       	push	r22
    432c:	7f 93       	push	r23
    432e:	8f 93       	push	r24
    4330:	9f 93       	push	r25
    4332:	af 93       	push	r26
    4334:	bf 93       	push	r27
    4336:	ef 93       	push	r30
    4338:	ff 93       	push	r31
    433a:	e0 91 bb 04 	lds	r30, 0x04BB
    433e:	f0 91 bc 04 	lds	r31, 0x04BC
    4342:	30 97       	sbiw	r30, 0x00	; 0
    4344:	09 f0       	breq	.+2      	; 0x4348 <__vector_16+0x30>
    4346:	09 95       	icall
    4348:	ff 91       	pop	r31
    434a:	ef 91       	pop	r30
    434c:	bf 91       	pop	r27
    434e:	af 91       	pop	r26
    4350:	9f 91       	pop	r25
    4352:	8f 91       	pop	r24
    4354:	7f 91       	pop	r23
    4356:	6f 91       	pop	r22
    4358:	5f 91       	pop	r21
    435a:	4f 91       	pop	r20
    435c:	3f 91       	pop	r19
    435e:	2f 91       	pop	r18
    4360:	0f 90       	pop	r0
    4362:	0f be       	out	0x3f, r0	; 63
    4364:	0f 90       	pop	r0
    4366:	1f 90       	pop	r1
    4368:	18 95       	reti

0000436a <__vector_17>:
    436a:	1f 92       	push	r1
    436c:	0f 92       	push	r0
    436e:	0f b6       	in	r0, 0x3f	; 63
    4370:	0f 92       	push	r0
    4372:	11 24       	eor	r1, r1
    4374:	2f 93       	push	r18
    4376:	3f 93       	push	r19
    4378:	4f 93       	push	r20
    437a:	5f 93       	push	r21
    437c:	6f 93       	push	r22
    437e:	7f 93       	push	r23
    4380:	8f 93       	push	r24
    4382:	9f 93       	push	r25
    4384:	af 93       	push	r26
    4386:	bf 93       	push	r27
    4388:	ef 93       	push	r30
    438a:	ff 93       	push	r31
    438c:	e0 91 bd 04 	lds	r30, 0x04BD
    4390:	f0 91 be 04 	lds	r31, 0x04BE
    4394:	30 97       	sbiw	r30, 0x00	; 0
    4396:	09 f0       	breq	.+2      	; 0x439a <__vector_17+0x30>
    4398:	09 95       	icall
    439a:	ff 91       	pop	r31
    439c:	ef 91       	pop	r30
    439e:	bf 91       	pop	r27
    43a0:	af 91       	pop	r26
    43a2:	9f 91       	pop	r25
    43a4:	8f 91       	pop	r24
    43a6:	7f 91       	pop	r23
    43a8:	6f 91       	pop	r22
    43aa:	5f 91       	pop	r21
    43ac:	4f 91       	pop	r20
    43ae:	3f 91       	pop	r19
    43b0:	2f 91       	pop	r18
    43b2:	0f 90       	pop	r0
    43b4:	0f be       	out	0x3f, r0	; 63
    43b6:	0f 90       	pop	r0
    43b8:	1f 90       	pop	r1
    43ba:	18 95       	reti

000043bc <__vector_18>:
    43bc:	1f 92       	push	r1
    43be:	0f 92       	push	r0
    43c0:	0f b6       	in	r0, 0x3f	; 63
    43c2:	0f 92       	push	r0
    43c4:	11 24       	eor	r1, r1
    43c6:	2f 93       	push	r18
    43c8:	3f 93       	push	r19
    43ca:	4f 93       	push	r20
    43cc:	5f 93       	push	r21
    43ce:	6f 93       	push	r22
    43d0:	7f 93       	push	r23
    43d2:	8f 93       	push	r24
    43d4:	9f 93       	push	r25
    43d6:	af 93       	push	r26
    43d8:	bf 93       	push	r27
    43da:	ef 93       	push	r30
    43dc:	ff 93       	push	r31
    43de:	e0 91 bf 04 	lds	r30, 0x04BF
    43e2:	f0 91 c0 04 	lds	r31, 0x04C0
    43e6:	30 97       	sbiw	r30, 0x00	; 0
    43e8:	09 f0       	breq	.+2      	; 0x43ec <__vector_18+0x30>
    43ea:	09 95       	icall
    43ec:	ff 91       	pop	r31
    43ee:	ef 91       	pop	r30
    43f0:	bf 91       	pop	r27
    43f2:	af 91       	pop	r26
    43f4:	9f 91       	pop	r25
    43f6:	8f 91       	pop	r24
    43f8:	7f 91       	pop	r23
    43fa:	6f 91       	pop	r22
    43fc:	5f 91       	pop	r21
    43fe:	4f 91       	pop	r20
    4400:	3f 91       	pop	r19
    4402:	2f 91       	pop	r18
    4404:	0f 90       	pop	r0
    4406:	0f be       	out	0x3f, r0	; 63
    4408:	0f 90       	pop	r0
    440a:	1f 90       	pop	r1
    440c:	18 95       	reti

0000440e <__vector_9>:
    440e:	1f 92       	push	r1
    4410:	0f 92       	push	r0
    4412:	0f b6       	in	r0, 0x3f	; 63
    4414:	0f 92       	push	r0
    4416:	11 24       	eor	r1, r1
    4418:	2f 93       	push	r18
    441a:	3f 93       	push	r19
    441c:	4f 93       	push	r20
    441e:	5f 93       	push	r21
    4420:	6f 93       	push	r22
    4422:	7f 93       	push	r23
    4424:	8f 93       	push	r24
    4426:	9f 93       	push	r25
    4428:	af 93       	push	r26
    442a:	bf 93       	push	r27
    442c:	ef 93       	push	r30
    442e:	ff 93       	push	r31
    4430:	e0 91 ad 04 	lds	r30, 0x04AD
    4434:	f0 91 ae 04 	lds	r31, 0x04AE
    4438:	30 97       	sbiw	r30, 0x00	; 0
    443a:	09 f0       	breq	.+2      	; 0x443e <__vector_9+0x30>
    443c:	09 95       	icall
    443e:	ff 91       	pop	r31
    4440:	ef 91       	pop	r30
    4442:	bf 91       	pop	r27
    4444:	af 91       	pop	r26
    4446:	9f 91       	pop	r25
    4448:	8f 91       	pop	r24
    444a:	7f 91       	pop	r23
    444c:	6f 91       	pop	r22
    444e:	5f 91       	pop	r21
    4450:	4f 91       	pop	r20
    4452:	3f 91       	pop	r19
    4454:	2f 91       	pop	r18
    4456:	0f 90       	pop	r0
    4458:	0f be       	out	0x3f, r0	; 63
    445a:	0f 90       	pop	r0
    445c:	1f 90       	pop	r1
    445e:	18 95       	reti

00004460 <__vector_10>:
    4460:	1f 92       	push	r1
    4462:	0f 92       	push	r0
    4464:	0f b6       	in	r0, 0x3f	; 63
    4466:	0f 92       	push	r0
    4468:	11 24       	eor	r1, r1
    446a:	2f 93       	push	r18
    446c:	3f 93       	push	r19
    446e:	4f 93       	push	r20
    4470:	5f 93       	push	r21
    4472:	6f 93       	push	r22
    4474:	7f 93       	push	r23
    4476:	8f 93       	push	r24
    4478:	9f 93       	push	r25
    447a:	af 93       	push	r26
    447c:	bf 93       	push	r27
    447e:	ef 93       	push	r30
    4480:	ff 93       	push	r31
    4482:	e0 91 af 04 	lds	r30, 0x04AF
    4486:	f0 91 b0 04 	lds	r31, 0x04B0
    448a:	30 97       	sbiw	r30, 0x00	; 0
    448c:	09 f0       	breq	.+2      	; 0x4490 <__vector_10+0x30>
    448e:	09 95       	icall
    4490:	ff 91       	pop	r31
    4492:	ef 91       	pop	r30
    4494:	bf 91       	pop	r27
    4496:	af 91       	pop	r26
    4498:	9f 91       	pop	r25
    449a:	8f 91       	pop	r24
    449c:	7f 91       	pop	r23
    449e:	6f 91       	pop	r22
    44a0:	5f 91       	pop	r21
    44a2:	4f 91       	pop	r20
    44a4:	3f 91       	pop	r19
    44a6:	2f 91       	pop	r18
    44a8:	0f 90       	pop	r0
    44aa:	0f be       	out	0x3f, r0	; 63
    44ac:	0f 90       	pop	r0
    44ae:	1f 90       	pop	r1
    44b0:	18 95       	reti

000044b2 <__vector_11>:
    44b2:	1f 92       	push	r1
    44b4:	0f 92       	push	r0
    44b6:	0f b6       	in	r0, 0x3f	; 63
    44b8:	0f 92       	push	r0
    44ba:	11 24       	eor	r1, r1
    44bc:	2f 93       	push	r18
    44be:	3f 93       	push	r19
    44c0:	4f 93       	push	r20
    44c2:	5f 93       	push	r21
    44c4:	6f 93       	push	r22
    44c6:	7f 93       	push	r23
    44c8:	8f 93       	push	r24
    44ca:	9f 93       	push	r25
    44cc:	af 93       	push	r26
    44ce:	bf 93       	push	r27
    44d0:	ef 93       	push	r30
    44d2:	ff 93       	push	r31
    44d4:	e0 91 b1 04 	lds	r30, 0x04B1
    44d8:	f0 91 b2 04 	lds	r31, 0x04B2
    44dc:	30 97       	sbiw	r30, 0x00	; 0
    44de:	09 f0       	breq	.+2      	; 0x44e2 <__vector_11+0x30>
    44e0:	09 95       	icall
    44e2:	ff 91       	pop	r31
    44e4:	ef 91       	pop	r30
    44e6:	bf 91       	pop	r27
    44e8:	af 91       	pop	r26
    44ea:	9f 91       	pop	r25
    44ec:	8f 91       	pop	r24
    44ee:	7f 91       	pop	r23
    44f0:	6f 91       	pop	r22
    44f2:	5f 91       	pop	r21
    44f4:	4f 91       	pop	r20
    44f6:	3f 91       	pop	r19
    44f8:	2f 91       	pop	r18
    44fa:	0f 90       	pop	r0
    44fc:	0f be       	out	0x3f, r0	; 63
    44fe:	0f 90       	pop	r0
    4500:	1f 90       	pop	r1
    4502:	18 95       	reti

00004504 <__vector_13>:
    4504:	1f 92       	push	r1
    4506:	0f 92       	push	r0
    4508:	0f b6       	in	r0, 0x3f	; 63
    450a:	0f 92       	push	r0
    450c:	11 24       	eor	r1, r1
    450e:	2f 93       	push	r18
    4510:	3f 93       	push	r19
    4512:	4f 93       	push	r20
    4514:	5f 93       	push	r21
    4516:	6f 93       	push	r22
    4518:	7f 93       	push	r23
    451a:	8f 93       	push	r24
    451c:	9f 93       	push	r25
    451e:	af 93       	push	r26
    4520:	bf 93       	push	r27
    4522:	ef 93       	push	r30
    4524:	ff 93       	push	r31
    4526:	e0 91 b5 04 	lds	r30, 0x04B5
    452a:	f0 91 b6 04 	lds	r31, 0x04B6
    452e:	30 97       	sbiw	r30, 0x00	; 0
    4530:	09 f0       	breq	.+2      	; 0x4534 <__vector_13+0x30>
    4532:	09 95       	icall
    4534:	ff 91       	pop	r31
    4536:	ef 91       	pop	r30
    4538:	bf 91       	pop	r27
    453a:	af 91       	pop	r26
    453c:	9f 91       	pop	r25
    453e:	8f 91       	pop	r24
    4540:	7f 91       	pop	r23
    4542:	6f 91       	pop	r22
    4544:	5f 91       	pop	r21
    4546:	4f 91       	pop	r20
    4548:	3f 91       	pop	r19
    454a:	2f 91       	pop	r18
    454c:	0f 90       	pop	r0
    454e:	0f be       	out	0x3f, r0	; 63
    4550:	0f 90       	pop	r0
    4552:	1f 90       	pop	r1
    4554:	18 95       	reti

00004556 <__vector_14>:
    4556:	1f 92       	push	r1
    4558:	0f 92       	push	r0
    455a:	0f b6       	in	r0, 0x3f	; 63
    455c:	0f 92       	push	r0
    455e:	11 24       	eor	r1, r1
    4560:	2f 93       	push	r18
    4562:	3f 93       	push	r19
    4564:	4f 93       	push	r20
    4566:	5f 93       	push	r21
    4568:	6f 93       	push	r22
    456a:	7f 93       	push	r23
    456c:	8f 93       	push	r24
    456e:	9f 93       	push	r25
    4570:	af 93       	push	r26
    4572:	bf 93       	push	r27
    4574:	ef 93       	push	r30
    4576:	ff 93       	push	r31
    4578:	e0 91 b7 04 	lds	r30, 0x04B7
    457c:	f0 91 b8 04 	lds	r31, 0x04B8
    4580:	30 97       	sbiw	r30, 0x00	; 0
    4582:	09 f0       	breq	.+2      	; 0x4586 <__vector_14+0x30>
    4584:	09 95       	icall
    4586:	ff 91       	pop	r31
    4588:	ef 91       	pop	r30
    458a:	bf 91       	pop	r27
    458c:	af 91       	pop	r26
    458e:	9f 91       	pop	r25
    4590:	8f 91       	pop	r24
    4592:	7f 91       	pop	r23
    4594:	6f 91       	pop	r22
    4596:	5f 91       	pop	r21
    4598:	4f 91       	pop	r20
    459a:	3f 91       	pop	r19
    459c:	2f 91       	pop	r18
    459e:	0f 90       	pop	r0
    45a0:	0f be       	out	0x3f, r0	; 63
    45a2:	0f 90       	pop	r0
    45a4:	1f 90       	pop	r1
    45a6:	18 95       	reti

000045a8 <__vector_12>:
    45a8:	1f 92       	push	r1
    45aa:	0f 92       	push	r0
    45ac:	0f b6       	in	r0, 0x3f	; 63
    45ae:	0f 92       	push	r0
    45b0:	11 24       	eor	r1, r1
    45b2:	2f 93       	push	r18
    45b4:	3f 93       	push	r19
    45b6:	4f 93       	push	r20
    45b8:	5f 93       	push	r21
    45ba:	6f 93       	push	r22
    45bc:	7f 93       	push	r23
    45be:	8f 93       	push	r24
    45c0:	9f 93       	push	r25
    45c2:	af 93       	push	r26
    45c4:	bf 93       	push	r27
    45c6:	ef 93       	push	r30
    45c8:	ff 93       	push	r31
    45ca:	e0 91 b3 04 	lds	r30, 0x04B3
    45ce:	f0 91 b4 04 	lds	r31, 0x04B4
    45d2:	30 97       	sbiw	r30, 0x00	; 0
    45d4:	09 f0       	breq	.+2      	; 0x45d8 <__vector_12+0x30>
    45d6:	09 95       	icall
    45d8:	ff 91       	pop	r31
    45da:	ef 91       	pop	r30
    45dc:	bf 91       	pop	r27
    45de:	af 91       	pop	r26
    45e0:	9f 91       	pop	r25
    45e2:	8f 91       	pop	r24
    45e4:	7f 91       	pop	r23
    45e6:	6f 91       	pop	r22
    45e8:	5f 91       	pop	r21
    45ea:	4f 91       	pop	r20
    45ec:	3f 91       	pop	r19
    45ee:	2f 91       	pop	r18
    45f0:	0f 90       	pop	r0
    45f2:	0f be       	out	0x3f, r0	; 63
    45f4:	0f 90       	pop	r0
    45f6:	1f 90       	pop	r1
    45f8:	18 95       	reti

000045fa <__vector_15>:
    45fa:	1f 92       	push	r1
    45fc:	0f 92       	push	r0
    45fe:	0f b6       	in	r0, 0x3f	; 63
    4600:	0f 92       	push	r0
    4602:	11 24       	eor	r1, r1
    4604:	2f 93       	push	r18
    4606:	3f 93       	push	r19
    4608:	4f 93       	push	r20
    460a:	5f 93       	push	r21
    460c:	6f 93       	push	r22
    460e:	7f 93       	push	r23
    4610:	8f 93       	push	r24
    4612:	9f 93       	push	r25
    4614:	af 93       	push	r26
    4616:	bf 93       	push	r27
    4618:	ef 93       	push	r30
    461a:	ff 93       	push	r31
    461c:	e0 91 b9 04 	lds	r30, 0x04B9
    4620:	f0 91 ba 04 	lds	r31, 0x04BA
    4624:	30 97       	sbiw	r30, 0x00	; 0
    4626:	09 f0       	breq	.+2      	; 0x462a <__vector_15+0x30>
    4628:	09 95       	icall
    462a:	ff 91       	pop	r31
    462c:	ef 91       	pop	r30
    462e:	bf 91       	pop	r27
    4630:	af 91       	pop	r26
    4632:	9f 91       	pop	r25
    4634:	8f 91       	pop	r24
    4636:	7f 91       	pop	r23
    4638:	6f 91       	pop	r22
    463a:	5f 91       	pop	r21
    463c:	4f 91       	pop	r20
    463e:	3f 91       	pop	r19
    4640:	2f 91       	pop	r18
    4642:	0f 90       	pop	r0
    4644:	0f be       	out	0x3f, r0	; 63
    4646:	0f 90       	pop	r0
    4648:	1f 90       	pop	r1
    464a:	18 95       	reti

0000464c <__vector_4>:
    464c:	1f 92       	push	r1
    464e:	0f 92       	push	r0
    4650:	0f b6       	in	r0, 0x3f	; 63
    4652:	0f 92       	push	r0
    4654:	11 24       	eor	r1, r1
    4656:	2f 93       	push	r18
    4658:	3f 93       	push	r19
    465a:	4f 93       	push	r20
    465c:	5f 93       	push	r21
    465e:	6f 93       	push	r22
    4660:	7f 93       	push	r23
    4662:	8f 93       	push	r24
    4664:	9f 93       	push	r25
    4666:	af 93       	push	r26
    4668:	bf 93       	push	r27
    466a:	ef 93       	push	r30
    466c:	ff 93       	push	r31
    466e:	e0 91 a3 04 	lds	r30, 0x04A3
    4672:	f0 91 a4 04 	lds	r31, 0x04A4
    4676:	30 97       	sbiw	r30, 0x00	; 0
    4678:	09 f0       	breq	.+2      	; 0x467c <__vector_4+0x30>
    467a:	09 95       	icall
    467c:	ff 91       	pop	r31
    467e:	ef 91       	pop	r30
    4680:	bf 91       	pop	r27
    4682:	af 91       	pop	r26
    4684:	9f 91       	pop	r25
    4686:	8f 91       	pop	r24
    4688:	7f 91       	pop	r23
    468a:	6f 91       	pop	r22
    468c:	5f 91       	pop	r21
    468e:	4f 91       	pop	r20
    4690:	3f 91       	pop	r19
    4692:	2f 91       	pop	r18
    4694:	0f 90       	pop	r0
    4696:	0f be       	out	0x3f, r0	; 63
    4698:	0f 90       	pop	r0
    469a:	1f 90       	pop	r1
    469c:	18 95       	reti

0000469e <__vector_5>:
    469e:	1f 92       	push	r1
    46a0:	0f 92       	push	r0
    46a2:	0f b6       	in	r0, 0x3f	; 63
    46a4:	0f 92       	push	r0
    46a6:	11 24       	eor	r1, r1
    46a8:	2f 93       	push	r18
    46aa:	3f 93       	push	r19
    46ac:	4f 93       	push	r20
    46ae:	5f 93       	push	r21
    46b0:	6f 93       	push	r22
    46b2:	7f 93       	push	r23
    46b4:	8f 93       	push	r24
    46b6:	9f 93       	push	r25
    46b8:	af 93       	push	r26
    46ba:	bf 93       	push	r27
    46bc:	ef 93       	push	r30
    46be:	ff 93       	push	r31
    46c0:	e0 91 a5 04 	lds	r30, 0x04A5
    46c4:	f0 91 a6 04 	lds	r31, 0x04A6
    46c8:	30 97       	sbiw	r30, 0x00	; 0
    46ca:	09 f0       	breq	.+2      	; 0x46ce <__vector_5+0x30>
    46cc:	09 95       	icall
    46ce:	ff 91       	pop	r31
    46d0:	ef 91       	pop	r30
    46d2:	bf 91       	pop	r27
    46d4:	af 91       	pop	r26
    46d6:	9f 91       	pop	r25
    46d8:	8f 91       	pop	r24
    46da:	7f 91       	pop	r23
    46dc:	6f 91       	pop	r22
    46de:	5f 91       	pop	r21
    46e0:	4f 91       	pop	r20
    46e2:	3f 91       	pop	r19
    46e4:	2f 91       	pop	r18
    46e6:	0f 90       	pop	r0
    46e8:	0f be       	out	0x3f, r0	; 63
    46ea:	0f 90       	pop	r0
    46ec:	1f 90       	pop	r1
    46ee:	18 95       	reti

000046f0 <__vector_6>:
    46f0:	1f 92       	push	r1
    46f2:	0f 92       	push	r0
    46f4:	0f b6       	in	r0, 0x3f	; 63
    46f6:	0f 92       	push	r0
    46f8:	11 24       	eor	r1, r1
    46fa:	2f 93       	push	r18
    46fc:	3f 93       	push	r19
    46fe:	4f 93       	push	r20
    4700:	5f 93       	push	r21
    4702:	6f 93       	push	r22
    4704:	7f 93       	push	r23
    4706:	8f 93       	push	r24
    4708:	9f 93       	push	r25
    470a:	af 93       	push	r26
    470c:	bf 93       	push	r27
    470e:	ef 93       	push	r30
    4710:	ff 93       	push	r31
    4712:	e0 91 a7 04 	lds	r30, 0x04A7
    4716:	f0 91 a8 04 	lds	r31, 0x04A8
    471a:	30 97       	sbiw	r30, 0x00	; 0
    471c:	09 f0       	breq	.+2      	; 0x4720 <__vector_6+0x30>
    471e:	09 95       	icall
    4720:	ff 91       	pop	r31
    4722:	ef 91       	pop	r30
    4724:	bf 91       	pop	r27
    4726:	af 91       	pop	r26
    4728:	9f 91       	pop	r25
    472a:	8f 91       	pop	r24
    472c:	7f 91       	pop	r23
    472e:	6f 91       	pop	r22
    4730:	5f 91       	pop	r21
    4732:	4f 91       	pop	r20
    4734:	3f 91       	pop	r19
    4736:	2f 91       	pop	r18
    4738:	0f 90       	pop	r0
    473a:	0f be       	out	0x3f, r0	; 63
    473c:	0f 90       	pop	r0
    473e:	1f 90       	pop	r1
    4740:	18 95       	reti

00004742 <__vector_7>:
    4742:	1f 92       	push	r1
    4744:	0f 92       	push	r0
    4746:	0f b6       	in	r0, 0x3f	; 63
    4748:	0f 92       	push	r0
    474a:	11 24       	eor	r1, r1
    474c:	2f 93       	push	r18
    474e:	3f 93       	push	r19
    4750:	4f 93       	push	r20
    4752:	5f 93       	push	r21
    4754:	6f 93       	push	r22
    4756:	7f 93       	push	r23
    4758:	8f 93       	push	r24
    475a:	9f 93       	push	r25
    475c:	af 93       	push	r26
    475e:	bf 93       	push	r27
    4760:	ef 93       	push	r30
    4762:	ff 93       	push	r31
    4764:	e0 91 a9 04 	lds	r30, 0x04A9
    4768:	f0 91 aa 04 	lds	r31, 0x04AA
    476c:	30 97       	sbiw	r30, 0x00	; 0
    476e:	09 f0       	breq	.+2      	; 0x4772 <__vector_7+0x30>
    4770:	09 95       	icall
    4772:	ff 91       	pop	r31
    4774:	ef 91       	pop	r30
    4776:	bf 91       	pop	r27
    4778:	af 91       	pop	r26
    477a:	9f 91       	pop	r25
    477c:	8f 91       	pop	r24
    477e:	7f 91       	pop	r23
    4780:	6f 91       	pop	r22
    4782:	5f 91       	pop	r21
    4784:	4f 91       	pop	r20
    4786:	3f 91       	pop	r19
    4788:	2f 91       	pop	r18
    478a:	0f 90       	pop	r0
    478c:	0f be       	out	0x3f, r0	; 63
    478e:	0f 90       	pop	r0
    4790:	1f 90       	pop	r1
    4792:	18 95       	reti

00004794 <ISR_attach>:
    4794:	e8 2f       	mov	r30, r24
    4796:	80 32       	cpi	r24, 0x20	; 32
    4798:	68 f4       	brcc	.+26     	; 0x47b4 <ISR_attach+0x20>
    479a:	80 51       	subi	r24, 0x10	; 16
    479c:	83 30       	cpi	r24, 0x03	; 3
    479e:	50 f0       	brcs	.+20     	; 0x47b4 <ISR_attach+0x20>
    47a0:	f0 e0       	ldi	r31, 0x00	; 0
    47a2:	ee 0f       	add	r30, r30
    47a4:	ff 1f       	adc	r31, r31
    47a6:	e5 56       	subi	r30, 0x65	; 101
    47a8:	fb 4f       	sbci	r31, 0xFB	; 251
    47aa:	20 81       	ld	r18, Z
    47ac:	31 81       	ldd	r19, Z+1	; 0x01
    47ae:	71 83       	std	Z+1, r23	; 0x01
    47b0:	60 83       	st	Z, r22
    47b2:	02 c0       	rjmp	.+4      	; 0x47b8 <ISR_attach+0x24>
    47b4:	20 e0       	ldi	r18, 0x00	; 0
    47b6:	30 e0       	ldi	r19, 0x00	; 0
    47b8:	c9 01       	movw	r24, r18
    47ba:	08 95       	ret

000047bc <ISR_open>:
    47bc:	80 e1       	ldi	r24, 0x10	; 16
    47be:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    47c2:	88 23       	and	r24, r24
    47c4:	61 f4       	brne	.+24     	; 0x47de <ISR_open+0x22>
    47c6:	eb e9       	ldi	r30, 0x9B	; 155
    47c8:	f4 e0       	ldi	r31, 0x04	; 4
    47ca:	11 92       	st	Z+, r1
    47cc:	11 92       	st	Z+, r1
    47ce:	84 e0       	ldi	r24, 0x04	; 4
    47d0:	eb 3d       	cpi	r30, 0xDB	; 219
    47d2:	f8 07       	cpc	r31, r24
    47d4:	d1 f7       	brne	.-12     	; 0x47ca <ISR_open+0xe>
    47d6:	80 e1       	ldi	r24, 0x10	; 16
    47d8:	61 e0       	ldi	r22, 0x01	; 1
    47da:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    47de:	80 e1       	ldi	r24, 0x10	; 16
    47e0:	91 e0       	ldi	r25, 0x01	; 1
    47e2:	08 95       	ret

000047e4 <__LCD_init>:
    47e4:	23 9a       	sbi	0x04, 3	; 4
    47e6:	08 95       	ret

000047e8 <__LCD_putchar>:
    47e8:	ff 92       	push	r15
    47ea:	0f 93       	push	r16
    47ec:	1f 93       	push	r17
    47ee:	cf 93       	push	r28
    47f0:	df 93       	push	r29
    47f2:	f8 2e       	mov	r15, r24
    47f4:	8a e0       	ldi	r24, 0x0A	; 10
    47f6:	f8 16       	cp	r15, r24
    47f8:	b1 f0       	breq	.+44     	; 0x4826 <__LCD_putchar+0x3e>
    47fa:	8f 15       	cp	r24, r15
    47fc:	48 f0       	brcs	.+18     	; 0x4810 <__LCD_putchar+0x28>
    47fe:	e8 e0       	ldi	r30, 0x08	; 8
    4800:	fe 16       	cp	r15, r30
    4802:	b9 f1       	breq	.+110    	; 0x4872 <__LCD_putchar+0x8a>
    4804:	ef 15       	cp	r30, r15
    4806:	38 f1       	brcs	.+78     	; 0x4856 <__LCD_putchar+0x6e>
    4808:	f7 e0       	ldi	r31, 0x07	; 7
    480a:	ff 16       	cp	r15, r31
    480c:	51 f4       	brne	.+20     	; 0x4822 <__LCD_putchar+0x3a>
    480e:	3b c0       	rjmp	.+118    	; 0x4886 <__LCD_putchar+0x9e>
    4810:	8d e0       	ldi	r24, 0x0D	; 13
    4812:	f8 16       	cp	r15, r24
    4814:	59 f0       	breq	.+22     	; 0x482c <__LCD_putchar+0x44>
    4816:	eb e1       	ldi	r30, 0x1B	; 27
    4818:	fe 16       	cp	r15, r30
    481a:	89 f0       	breq	.+34     	; 0x483e <__LCD_putchar+0x56>
    481c:	fc e0       	ldi	r31, 0x0C	; 12
    481e:	ff 16       	cp	r15, r31
    4820:	41 f0       	breq	.+16     	; 0x4832 <__LCD_putchar+0x4a>
    4822:	01 e0       	ldi	r16, 0x01	; 1
    4824:	41 c0       	rjmp	.+130    	; 0x48a8 <__LCD_putchar+0xc0>
    4826:	10 92 03 08 	sts	0x0803, r1
    482a:	03 c0       	rjmp	.+6      	; 0x4832 <__LCD_putchar+0x4a>
    482c:	10 92 03 08 	sts	0x0803, r1
    4830:	3a c0       	rjmp	.+116    	; 0x48a6 <__LCD_putchar+0xbe>
    4832:	80 91 04 08 	lds	r24, 0x0804
    4836:	81 50       	subi	r24, 0x01	; 1
    4838:	80 93 04 08 	sts	0x0804, r24
    483c:	34 c0       	rjmp	.+104    	; 0x48a6 <__LCD_putchar+0xbe>
    483e:	0e 94 64 19 	call	0x32c8	; 0x32c8 <LCD_clear>
    4842:	14 c0       	rjmp	.+40     	; 0x486c <__LCD_putchar+0x84>
    4844:	80 e0       	ldi	r24, 0x00	; 0
    4846:	61 e0       	ldi	r22, 0x01	; 1
    4848:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    484c:	80 91 03 08 	lds	r24, 0x0803
    4850:	8f 5f       	subi	r24, 0xFF	; 255
    4852:	80 93 03 08 	sts	0x0803, r24
    4856:	80 91 03 08 	lds	r24, 0x0803
    485a:	87 ff       	sbrs	r24, 7
    485c:	f3 cf       	rjmp	.-26     	; 0x4844 <__LCD_putchar+0x5c>
    485e:	10 92 03 08 	sts	0x0803, r1
    4862:	80 91 04 08 	lds	r24, 0x0804
    4866:	81 50       	subi	r24, 0x01	; 1
    4868:	80 93 04 08 	sts	0x0804, r24
    486c:	00 e0       	ldi	r16, 0x00	; 0
    486e:	11 e0       	ldi	r17, 0x01	; 1
    4870:	1c c0       	rjmp	.+56     	; 0x48aa <__LCD_putchar+0xc2>
    4872:	80 91 03 08 	lds	r24, 0x0803
    4876:	88 23       	and	r24, r24
    4878:	b1 f0       	breq	.+44     	; 0x48a6 <__LCD_putchar+0xbe>
    487a:	80 91 03 08 	lds	r24, 0x0803
    487e:	86 50       	subi	r24, 0x06	; 6
    4880:	80 93 03 08 	sts	0x0803, r24
    4884:	10 c0       	rjmp	.+32     	; 0x48a6 <__LCD_putchar+0xbe>
    4886:	81 e0       	ldi	r24, 0x01	; 1
    4888:	0e 94 70 1b 	call	0x36e0	; 0x36e0 <SPKR_open>
    488c:	64 ef       	ldi	r22, 0xF4	; 244
    488e:	71 e0       	ldi	r23, 0x01	; 1
    4890:	80 e0       	ldi	r24, 0x00	; 0
    4892:	90 e0       	ldi	r25, 0x00	; 0
    4894:	4d e7       	ldi	r20, 0x7D	; 125
    4896:	50 e0       	ldi	r21, 0x00	; 0
    4898:	24 e6       	ldi	r18, 0x64	; 100
    489a:	30 e0       	ldi	r19, 0x00	; 0
    489c:	0e 94 0e 26 	call	0x4c1c	; 0x4c1c <SPKR_play_beep>
    48a0:	81 e0       	ldi	r24, 0x01	; 1
    48a2:	0e 94 da 25 	call	0x4bb4	; 0x4bb4 <SPKR_close>
    48a6:	00 e0       	ldi	r16, 0x00	; 0
    48a8:	10 e0       	ldi	r17, 0x00	; 0
    48aa:	80 91 04 08 	lds	r24, 0x0804
    48ae:	60 91 03 08 	lds	r22, 0x0803
    48b2:	0e 94 2a 1a 	call	0x3454	; 0x3454 <LCD_set_PGC_addr>
    48b6:	00 23       	and	r16, r16
    48b8:	51 f1       	breq	.+84     	; 0x490e <__LCD_putchar+0x126>
    48ba:	85 e0       	ldi	r24, 0x05	; 5
    48bc:	f8 9e       	mul	r15, r24
    48be:	c0 01       	movw	r24, r0
    48c0:	11 24       	eor	r1, r1
    48c2:	ec 01       	movw	r28, r24
    48c4:	c3 55       	subi	r28, 0x53	; 83
    48c6:	df 4f       	sbci	r29, 0xFF	; 255
    48c8:	8c 01       	movw	r16, r24
    48ca:	0e 54       	subi	r16, 0x4E	; 78
    48cc:	1f 4f       	sbci	r17, 0xFF	; 255
    48ce:	fe 01       	movw	r30, r28
    48d0:	84 91       	lpm	r24, Z+
    48d2:	61 e0       	ldi	r22, 0x01	; 1
    48d4:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    48d8:	21 96       	adiw	r28, 0x01	; 1
    48da:	c0 17       	cp	r28, r16
    48dc:	d1 07       	cpc	r29, r17
    48de:	b9 f7       	brne	.-18     	; 0x48ce <__LCD_putchar+0xe6>
    48e0:	80 e0       	ldi	r24, 0x00	; 0
    48e2:	61 e0       	ldi	r22, 0x01	; 1
    48e4:	0e 94 43 1a 	call	0x3486	; 0x3486 <LCD_write>
    48e8:	80 91 03 08 	lds	r24, 0x0803
    48ec:	8a 5f       	subi	r24, 0xFA	; 250
    48ee:	80 93 03 08 	sts	0x0803, r24
    48f2:	80 91 03 08 	lds	r24, 0x0803
    48f6:	90 e0       	ldi	r25, 0x00	; 0
    48f8:	8c 37       	cpi	r24, 0x7C	; 124
    48fa:	91 05       	cpc	r25, r1
    48fc:	3c f0       	brlt	.+14     	; 0x490c <__LCD_putchar+0x124>
    48fe:	10 92 03 08 	sts	0x0803, r1
    4902:	80 91 04 08 	lds	r24, 0x0804
    4906:	81 50       	subi	r24, 0x01	; 1
    4908:	80 93 04 08 	sts	0x0804, r24
    490c:	11 e0       	ldi	r17, 0x01	; 1
    490e:	80 91 04 08 	lds	r24, 0x0804
    4912:	83 70       	andi	r24, 0x03	; 3
    4914:	80 93 04 08 	sts	0x0804, r24
    4918:	11 30       	cpi	r17, 0x01	; 1
    491a:	59 f4       	brne	.+22     	; 0x4932 <__LCD_putchar+0x14a>
    491c:	80 91 05 08 	lds	r24, 0x0805
    4920:	81 30       	cpi	r24, 0x01	; 1
    4922:	39 f4       	brne	.+14     	; 0x4932 <__LCD_putchar+0x14a>
    4924:	e0 91 06 08 	lds	r30, 0x0806
    4928:	f0 91 07 08 	lds	r31, 0x0807
    492c:	30 97       	sbiw	r30, 0x00	; 0
    492e:	09 f0       	breq	.+2      	; 0x4932 <__LCD_putchar+0x14a>
    4930:	09 95       	icall
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	90 e0       	ldi	r25, 0x00	; 0
    4936:	df 91       	pop	r29
    4938:	cf 91       	pop	r28
    493a:	1f 91       	pop	r17
    493c:	0f 91       	pop	r16
    493e:	ff 90       	pop	r15
    4940:	08 95       	ret

00004942 <__LED_clr_pattern>:
    4942:	85 fd       	sbrc	r24, 5
    4944:	5d 98       	cbi	0x0b, 5	; 11
    4946:	86 fd       	sbrc	r24, 6
    4948:	5e 98       	cbi	0x0b, 6	; 11
    494a:	08 95       	ret

0000494c <__LED_init>:
    494c:	55 9a       	sbi	0x0a, 5	; 10
    494e:	56 9a       	sbi	0x0a, 6	; 10
    4950:	08 95       	ret

00004952 <__LED_set_pattern>:
    4952:	85 fd       	sbrc	r24, 5
    4954:	5d 9a       	sbi	0x0b, 5	; 11
    4956:	86 fd       	sbrc	r24, 6
    4958:	5e 9a       	sbi	0x0b, 6	; 11
    495a:	08 95       	ret

0000495c <ATMEGA_open>:
    495c:	80 e0       	ldi	r24, 0x00	; 0
    495e:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    4962:	88 23       	and	r24, r24
    4964:	51 f4       	brne	.+20     	; 0x497a <ATMEGA_open+0x1e>
    4966:	f8 94       	cli
    4968:	0e 94 a5 27 	call	0x4f4a	; 0x4f4a <__ATMEGA_init>
    496c:	81 e0       	ldi	r24, 0x01	; 1
    496e:	0e 94 c0 24 	call	0x4980	; 0x4980 <ATMEGA_set_clk_mode>
    4972:	80 e0       	ldi	r24, 0x00	; 0
    4974:	61 e0       	ldi	r22, 0x01	; 1
    4976:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    497a:	80 e0       	ldi	r24, 0x00	; 0
    497c:	91 e0       	ldi	r25, 0x01	; 1
    497e:	08 95       	ret

00004980 <ATMEGA_set_clk_mode>:
    4980:	81 30       	cpi	r24, 0x01	; 1
    4982:	49 f0       	breq	.+18     	; 0x4996 <ATMEGA_set_clk_mode+0x16>
    4984:	f8 94       	cli
    4986:	81 30       	cpi	r24, 0x01	; 1
    4988:	20 f1       	brcs	.+72     	; 0x49d2 <ATMEGA_set_clk_mode+0x52>
    498a:	82 30       	cpi	r24, 0x02	; 2
    498c:	b1 f0       	breq	.+44     	; 0x49ba <ATMEGA_set_clk_mode+0x3a>
    498e:	83 30       	cpi	r24, 0x03	; 3
    4990:	09 f0       	breq	.+2      	; 0x4994 <ATMEGA_set_clk_mode+0x14>
    4992:	45 c0       	rjmp	.+138    	; 0x4a1e <ATMEGA_set_clk_mode+0x9e>
    4994:	17 c0       	rjmp	.+46     	; 0x49c4 <ATMEGA_set_clk_mode+0x44>
    4996:	2c 9a       	sbi	0x05, 4	; 5
    4998:	80 e8       	ldi	r24, 0x80	; 128
    499a:	80 93 61 00 	sts	0x0061, r24
    499e:	10 92 61 00 	sts	0x0061, r1
    49a2:	80 e0       	ldi	r24, 0x00	; 0
    49a4:	90 e0       	ldi	r25, 0x00	; 0
    49a6:	00 00       	nop
    49a8:	01 96       	adiw	r24, 0x01	; 1
    49aa:	88 32       	cpi	r24, 0x28	; 40
    49ac:	91 05       	cpc	r25, r1
    49ae:	d9 f7       	brne	.-10     	; 0x49a6 <ATMEGA_set_clk_mode+0x26>
    49b0:	10 92 68 00 	sts	0x0068, r1
    49b4:	10 92 6b 00 	sts	0x006B, r1
    49b8:	08 95       	ret
    49ba:	80 e8       	ldi	r24, 0x80	; 128
    49bc:	80 93 61 00 	sts	0x0061, r24
    49c0:	83 e0       	ldi	r24, 0x03	; 3
    49c2:	04 c0       	rjmp	.+8      	; 0x49cc <ATMEGA_set_clk_mode+0x4c>
    49c4:	80 e8       	ldi	r24, 0x80	; 128
    49c6:	80 93 61 00 	sts	0x0061, r24
    49ca:	88 e0       	ldi	r24, 0x08	; 8
    49cc:	80 93 61 00 	sts	0x0061, r24
    49d0:	28 c0       	rjmp	.+80     	; 0x4a22 <ATMEGA_set_clk_mode+0xa2>
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	90 e0       	ldi	r25, 0x00	; 0
    49d6:	00 00       	nop
    49d8:	01 96       	adiw	r24, 0x01	; 1
    49da:	2d e6       	ldi	r18, 0x6D	; 109
    49dc:	80 36       	cpi	r24, 0x60	; 96
    49de:	92 07       	cpc	r25, r18
    49e0:	d1 f7       	brne	.-12     	; 0x49d6 <ATMEGA_set_clk_mode+0x56>
    49e2:	2c 98       	cbi	0x05, 4	; 5
    49e4:	80 e0       	ldi	r24, 0x00	; 0
    49e6:	90 e0       	ldi	r25, 0x00	; 0
    49e8:	00 00       	nop
    49ea:	01 96       	adiw	r24, 0x01	; 1
    49ec:	2d e6       	ldi	r18, 0x6D	; 109
    49ee:	80 36       	cpi	r24, 0x60	; 96
    49f0:	92 07       	cpc	r25, r18
    49f2:	d1 f7       	brne	.-12     	; 0x49e8 <ATMEGA_set_clk_mode+0x68>
    49f4:	10 92 7a 00 	sts	0x007A, r1
    49f8:	8f ef       	ldi	r24, 0xFF	; 255
    49fa:	80 93 64 00 	sts	0x0064, r24
    49fe:	80 91 68 00 	lds	r24, 0x0068
    4a02:	81 60       	ori	r24, 0x01	; 1
    4a04:	80 93 68 00 	sts	0x0068, r24
    4a08:	80 91 6b 00 	lds	r24, 0x006B
    4a0c:	84 60       	ori	r24, 0x04	; 4
    4a0e:	80 93 6b 00 	sts	0x006B, r24
    4a12:	78 94       	sei
    4a14:	83 b7       	in	r24, 0x33	; 51
    4a16:	81 60       	ori	r24, 0x01	; 1
    4a18:	83 bf       	out	0x33, r24	; 51
    4a1a:	88 95       	sleep
    4a1c:	08 95       	ret
    4a1e:	82 30       	cpi	r24, 0x02	; 2
    4a20:	08 f0       	brcs	.+2      	; 0x4a24 <ATMEGA_set_clk_mode+0xa4>
    4a22:	78 94       	sei
    4a24:	08 95       	ret

00004a26 <SPI_open>:
    4a26:	0f 93       	push	r16
    4a28:	1f 93       	push	r17
    4a2a:	0e 94 d1 27 	call	0x4fa2	; 0x4fa2 <__SPI_init>
    4a2e:	80 e0       	ldi	r24, 0x00	; 0
    4a30:	60 ec       	ldi	r22, 0xC0	; 192
    4a32:	77 e2       	ldi	r23, 0x27	; 39
    4a34:	0e 94 5e 25 	call	0x4abc	; 0x4abc <SPI_set_config_func>
    4a38:	81 e0       	ldi	r24, 0x01	; 1
    4a3a:	68 eb       	ldi	r22, 0xB8	; 184
    4a3c:	77 e2       	ldi	r23, 0x27	; 39
    4a3e:	0e 94 5e 25 	call	0x4abc	; 0x4abc <SPI_set_config_func>
    4a42:	82 e0       	ldi	r24, 0x02	; 2
    4a44:	60 eb       	ldi	r22, 0xB0	; 176
    4a46:	77 e2       	ldi	r23, 0x27	; 39
    4a48:	0e 94 5e 25 	call	0x4abc	; 0x4abc <SPI_set_config_func>
    4a4c:	86 e0       	ldi	r24, 0x06	; 6
    4a4e:	68 ec       	ldi	r22, 0xC8	; 200
    4a50:	77 e2       	ldi	r23, 0x27	; 39
    4a52:	0e 94 5e 25 	call	0x4abc	; 0x4abc <SPI_set_config_func>
    4a56:	08 ea       	ldi	r16, 0xA8	; 168
    4a58:	17 e2       	ldi	r17, 0x27	; 39
    4a5a:	83 e0       	ldi	r24, 0x03	; 3
    4a5c:	b8 01       	movw	r22, r16
    4a5e:	0e 94 5e 25 	call	0x4abc	; 0x4abc <SPI_set_config_func>
    4a62:	84 e0       	ldi	r24, 0x04	; 4
    4a64:	b8 01       	movw	r22, r16
    4a66:	0e 94 5e 25 	call	0x4abc	; 0x4abc <SPI_set_config_func>
    4a6a:	85 e0       	ldi	r24, 0x05	; 5
    4a6c:	b8 01       	movw	r22, r16
    4a6e:	0e 94 5e 25 	call	0x4abc	; 0x4abc <SPI_set_config_func>
    4a72:	87 e0       	ldi	r24, 0x07	; 7
    4a74:	b8 01       	movw	r22, r16
    4a76:	0e 94 5e 25 	call	0x4abc	; 0x4abc <SPI_set_config_func>
    4a7a:	82 e0       	ldi	r24, 0x02	; 2
    4a7c:	61 e0       	ldi	r22, 0x01	; 1
    4a7e:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    4a82:	8f ef       	ldi	r24, 0xFF	; 255
    4a84:	80 93 08 08 	sts	0x0808, r24
    4a88:	87 e0       	ldi	r24, 0x07	; 7
    4a8a:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <SPI_set_slave_addr>
    4a8e:	82 e0       	ldi	r24, 0x02	; 2
    4a90:	91 e0       	ldi	r25, 0x01	; 1
    4a92:	1f 91       	pop	r17
    4a94:	0f 91       	pop	r16
    4a96:	08 95       	ret

00004a98 <SPI_receive>:
    4a98:	1f 93       	push	r17
    4a9a:	16 2f       	mov	r17, r22
    4a9c:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <SPI_set_slave_addr>
    4aa0:	82 e0       	ldi	r24, 0x02	; 2
    4aa2:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    4aa6:	81 30       	cpi	r24, 0x01	; 1
    4aa8:	11 f0       	breq	.+4      	; 0x4aae <SPI_receive+0x16>
    4aaa:	80 e0       	ldi	r24, 0x00	; 0
    4aac:	05 c0       	rjmp	.+10     	; 0x4ab8 <SPI_receive+0x20>
    4aae:	1e bd       	out	0x2e, r17	; 46
    4ab0:	0d b4       	in	r0, 0x2d	; 45
    4ab2:	07 fe       	sbrs	r0, 7
    4ab4:	fd cf       	rjmp	.-6      	; 0x4ab0 <SPI_receive+0x18>
    4ab6:	8e b5       	in	r24, 0x2e	; 46
    4ab8:	1f 91       	pop	r17
    4aba:	08 95       	ret

00004abc <SPI_set_config_func>:
    4abc:	e8 2f       	mov	r30, r24
    4abe:	f0 e0       	ldi	r31, 0x00	; 0
    4ac0:	ee 0f       	add	r30, r30
    4ac2:	ff 1f       	adc	r31, r31
    4ac4:	e5 52       	subi	r30, 0x25	; 37
    4ac6:	fb 4f       	sbci	r31, 0xFB	; 251
    4ac8:	71 83       	std	Z+1, r23	; 0x01
    4aca:	60 83       	st	Z, r22
    4acc:	08 95       	ret

00004ace <__SPKR_TIMER1_COMPA_vect>:
    4ace:	0e 94 6a 25 	call	0x4ad4	; 0x4ad4 <SPKR_clk>
    4ad2:	08 95       	ret

00004ad4 <SPKR_clk>:
    4ad4:	80 91 ed 04 	lds	r24, 0x04ED
    4ad8:	90 91 ee 04 	lds	r25, 0x04EE
    4adc:	a0 91 ef 04 	lds	r26, 0x04EF
    4ae0:	b0 91 f0 04 	lds	r27, 0x04F0
    4ae4:	20 91 f1 04 	lds	r18, 0x04F1
    4ae8:	30 91 f2 04 	lds	r19, 0x04F2
    4aec:	40 91 f3 04 	lds	r20, 0x04F3
    4af0:	50 91 f4 04 	lds	r21, 0x04F4
    4af4:	28 0f       	add	r18, r24
    4af6:	39 1f       	adc	r19, r25
    4af8:	4a 1f       	adc	r20, r26
    4afa:	5b 1f       	adc	r21, r27
    4afc:	20 93 ed 04 	sts	0x04ED, r18
    4b00:	30 93 ee 04 	sts	0x04EE, r19
    4b04:	40 93 ef 04 	sts	0x04EF, r20
    4b08:	50 93 f0 04 	sts	0x04F0, r21
    4b0c:	80 91 ed 04 	lds	r24, 0x04ED
    4b10:	90 91 ee 04 	lds	r25, 0x04EE
    4b14:	a0 91 ef 04 	lds	r26, 0x04EF
    4b18:	b0 91 f0 04 	lds	r27, 0x04F0
    4b1c:	88 51       	subi	r24, 0x18	; 24
    4b1e:	96 4f       	sbci	r25, 0xF6	; 246
    4b20:	a0 40       	sbci	r26, 0x00	; 0
    4b22:	b0 40       	sbci	r27, 0x00	; 0
    4b24:	bc f0       	brlt	.+46     	; 0x4b54 <SPKR_clk+0x80>
    4b26:	8b b1       	in	r24, 0x0b	; 11
    4b28:	80 58       	subi	r24, 0x80	; 128
    4b2a:	8b b9       	out	0x0b, r24	; 11
    4b2c:	80 91 ed 04 	lds	r24, 0x04ED
    4b30:	90 91 ee 04 	lds	r25, 0x04EE
    4b34:	a0 91 ef 04 	lds	r26, 0x04EF
    4b38:	b0 91 f0 04 	lds	r27, 0x04F0
    4b3c:	88 51       	subi	r24, 0x18	; 24
    4b3e:	96 4f       	sbci	r25, 0xF6	; 246
    4b40:	a0 40       	sbci	r26, 0x00	; 0
    4b42:	b0 40       	sbci	r27, 0x00	; 0
    4b44:	80 93 ed 04 	sts	0x04ED, r24
    4b48:	90 93 ee 04 	sts	0x04EE, r25
    4b4c:	a0 93 ef 04 	sts	0x04EF, r26
    4b50:	b0 93 f0 04 	sts	0x04F0, r27
    4b54:	08 95       	ret

00004b56 <__SPKR_close_beep_mode>:
    4b56:	8a e0       	ldi	r24, 0x0A	; 10
    4b58:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    4b5c:	81 30       	cpi	r24, 0x01	; 1
    4b5e:	41 f4       	brne	.+16     	; 0x4b70 <__SPKR_close_beep_mode+0x1a>
    4b60:	0e 94 ef 27 	call	0x4fde	; 0x4fde <__SPKR_close>
    4b64:	10 92 ec 04 	sts	0x04EC, r1
    4b68:	8a e0       	ldi	r24, 0x0A	; 10
    4b6a:	60 e0       	ldi	r22, 0x00	; 0
    4b6c:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    4b70:	08 95       	ret

00004b72 <__SPKR_close_tone_mode>:
    4b72:	89 e0       	ldi	r24, 0x09	; 9
    4b74:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    4b78:	81 30       	cpi	r24, 0x01	; 1
    4b7a:	d9 f4       	brne	.+54     	; 0x4bb2 <__SPKR_close_tone_mode+0x40>
    4b7c:	80 91 eb 04 	lds	r24, 0x04EB
    4b80:	88 23       	and	r24, r24
    4b82:	11 f0       	breq	.+4      	; 0x4b88 <__SPKR_close_tone_mode+0x16>
    4b84:	0e 94 5b 26 	call	0x4cb6	; 0x4cb6 <__SPKR_stop>
    4b88:	82 e0       	ldi	r24, 0x02	; 2
    4b8a:	0e 94 ef 27 	call	0x4fde	; 0x4fde <__SPKR_close>
    4b8e:	80 91 f9 04 	lds	r24, 0x04F9
    4b92:	90 91 fa 04 	lds	r25, 0x04FA
    4b96:	00 97       	sbiw	r24, 0x00	; 0
    4b98:	31 f0       	breq	.+12     	; 0x4ba6 <__SPKR_close_tone_mode+0x34>
    4b9a:	0e 94 62 34 	call	0x68c4	; 0x68c4 <free>
    4b9e:	10 92 fa 04 	sts	0x04FA, r1
    4ba2:	10 92 f9 04 	sts	0x04F9, r1
    4ba6:	10 92 eb 04 	sts	0x04EB, r1
    4baa:	89 e0       	ldi	r24, 0x09	; 9
    4bac:	60 e0       	ldi	r22, 0x00	; 0
    4bae:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    4bb2:	08 95       	ret

00004bb4 <SPKR_close>:
    4bb4:	81 30       	cpi	r24, 0x01	; 1
    4bb6:	29 f0       	breq	.+10     	; 0x4bc2 <SPKR_close+0xe>
    4bb8:	82 30       	cpi	r24, 0x02	; 2
    4bba:	29 f4       	brne	.+10     	; 0x4bc6 <SPKR_close+0x12>
    4bbc:	0e 94 b9 25 	call	0x4b72	; 0x4b72 <__SPKR_close_tone_mode>
    4bc0:	08 95       	ret
    4bc2:	0e 94 ab 25 	call	0x4b56	; 0x4b56 <__SPKR_close_beep_mode>
    4bc6:	08 95       	ret

00004bc8 <__SPKR_init>:
    4bc8:	98 2f       	mov	r25, r24
    4bca:	80 91 eb 04 	lds	r24, 0x04EB
    4bce:	88 23       	and	r24, r24
    4bd0:	31 f4       	brne	.+12     	; 0x4bde <__SPKR_init+0x16>
    4bd2:	80 91 ec 04 	lds	r24, 0x04EC
    4bd6:	88 23       	and	r24, r24
    4bd8:	11 f4       	brne	.+4      	; 0x4bde <__SPKR_init+0x16>
    4bda:	57 9a       	sbi	0x0a, 7	; 10
    4bdc:	5f 98       	cbi	0x0b, 7	; 11
    4bde:	80 91 eb 04 	lds	r24, 0x04EB
    4be2:	88 23       	and	r24, r24
    4be4:	d1 f4       	brne	.+52     	; 0x4c1a <__SPKR_init+0x52>
    4be6:	92 30       	cpi	r25, 0x02	; 2
    4be8:	c1 f4       	brne	.+48     	; 0x4c1a <__SPKR_init+0x52>
    4bea:	10 92 80 00 	sts	0x0080, r1
    4bee:	10 92 81 00 	sts	0x0081, r1
    4bf2:	80 91 81 00 	lds	r24, 0x0081
    4bf6:	88 60       	ori	r24, 0x08	; 8
    4bf8:	80 93 81 00 	sts	0x0081, r24
    4bfc:	80 91 81 00 	lds	r24, 0x0081
    4c00:	81 60       	ori	r24, 0x01	; 1
    4c02:	80 93 81 00 	sts	0x0081, r24
    4c06:	10 92 85 00 	sts	0x0085, r1
    4c0a:	10 92 84 00 	sts	0x0084, r1
    4c0e:	81 e0       	ldi	r24, 0x01	; 1
    4c10:	80 93 89 00 	sts	0x0089, r24
    4c14:	80 e9       	ldi	r24, 0x90	; 144
    4c16:	80 93 88 00 	sts	0x0088, r24
    4c1a:	08 95       	ret

00004c1c <SPKR_play_beep>:
    4c1c:	8f 92       	push	r8
    4c1e:	9f 92       	push	r9
    4c20:	af 92       	push	r10
    4c22:	bf 92       	push	r11
    4c24:	cf 92       	push	r12
    4c26:	df 92       	push	r13
    4c28:	ef 92       	push	r14
    4c2a:	ff 92       	push	r15
    4c2c:	0f 93       	push	r16
    4c2e:	1f 93       	push	r17
    4c30:	cf 93       	push	r28
    4c32:	df 93       	push	r29
    4c34:	4b 01       	movw	r8, r22
    4c36:	5c 01       	movw	r10, r24
    4c38:	ea 01       	movw	r28, r20
    4c3a:	b9 01       	movw	r22, r18
    4c3c:	21 15       	cp	r18, r1
    4c3e:	31 05       	cpc	r19, r1
    4c40:	39 f1       	breq	.+78     	; 0x4c90 <SPKR_play_beep+0x74>
    4c42:	9e 01       	movw	r18, r28
    4c44:	44 27       	eor	r20, r20
    4c46:	37 fd       	sbrc	r19, 7
    4c48:	40 95       	com	r20
    4c4a:	54 2f       	mov	r21, r20
    4c4c:	65 36       	cpi	r22, 0x65	; 101
    4c4e:	71 05       	cpc	r23, r1
    4c50:	10 f0       	brcs	.+4      	; 0x4c56 <SPKR_play_beep+0x3a>
    4c52:	64 e6       	ldi	r22, 0x64	; 100
    4c54:	70 e0       	ldi	r23, 0x00	; 0
    4c56:	80 e0       	ldi	r24, 0x00	; 0
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	0e 94 3d 33 	call	0x667a	; 0x667a <__mulsi3>
    4c5e:	24 e6       	ldi	r18, 0x64	; 100
    4c60:	30 e0       	ldi	r19, 0x00	; 0
    4c62:	40 e0       	ldi	r20, 0x00	; 0
    4c64:	50 e0       	ldi	r21, 0x00	; 0
    4c66:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <__udivmodsi4>
    4c6a:	79 01       	movw	r14, r18
    4c6c:	8a 01       	movw	r16, r20
    4c6e:	c5 01       	movw	r24, r10
    4c70:	b4 01       	movw	r22, r8
    4c72:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <SPKR_beep>
    4c76:	c7 01       	movw	r24, r14
    4c78:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
    4c7c:	60 e0       	ldi	r22, 0x00	; 0
    4c7e:	70 e0       	ldi	r23, 0x00	; 0
    4c80:	80 e0       	ldi	r24, 0x00	; 0
    4c82:	90 e0       	ldi	r25, 0x00	; 0
    4c84:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <SPKR_beep>
    4c88:	ce 01       	movw	r24, r28
    4c8a:	8e 19       	sub	r24, r14
    4c8c:	9f 09       	sbc	r25, r15
    4c8e:	04 c0       	rjmp	.+8      	; 0x4c98 <SPKR_play_beep+0x7c>
    4c90:	41 15       	cp	r20, r1
    4c92:	51 05       	cpc	r21, r1
    4c94:	19 f0       	breq	.+6      	; 0x4c9c <SPKR_play_beep+0x80>
    4c96:	ca 01       	movw	r24, r20
    4c98:	0e 94 3f 20 	call	0x407e	; 0x407e <TMRSRVC_delay>
    4c9c:	df 91       	pop	r29
    4c9e:	cf 91       	pop	r28
    4ca0:	1f 91       	pop	r17
    4ca2:	0f 91       	pop	r16
    4ca4:	ff 90       	pop	r15
    4ca6:	ef 90       	pop	r14
    4ca8:	df 90       	pop	r13
    4caa:	cf 90       	pop	r12
    4cac:	bf 90       	pop	r11
    4cae:	af 90       	pop	r10
    4cb0:	9f 90       	pop	r9
    4cb2:	8f 90       	pop	r8
    4cb4:	08 95       	ret

00004cb6 <__SPKR_stop>:
    4cb6:	ef e6       	ldi	r30, 0x6F	; 111
    4cb8:	f0 e0       	ldi	r31, 0x00	; 0
    4cba:	80 81       	ld	r24, Z
    4cbc:	8d 7f       	andi	r24, 0xFD	; 253
    4cbe:	80 83       	st	Z, r24
    4cc0:	08 95       	ret

00004cc2 <STEPPER_go>:
    4cc2:	98 2f       	mov	r25, r24
    4cc4:	81 e0       	ldi	r24, 0x01	; 1
    4cc6:	80 93 ed 07 	sts	0x07ED, r24
    4cca:	91 30       	cpi	r25, 0x01	; 1
    4ccc:	51 f0       	breq	.+20     	; 0x4ce2 <STEPPER_go+0x20>
    4cce:	91 30       	cpi	r25, 0x01	; 1
    4cd0:	18 f0       	brcs	.+6      	; 0x4cd8 <STEPPER_go+0x16>
    4cd2:	92 30       	cpi	r25, 0x02	; 2
    4cd4:	41 f4       	brne	.+16     	; 0x4ce6 <STEPPER_go+0x24>
    4cd6:	03 c0       	rjmp	.+6      	; 0x4cde <STEPPER_go+0x1c>
    4cd8:	10 92 d5 07 	sts	0x07D5, r1
    4cdc:	04 c0       	rjmp	.+8      	; 0x4ce6 <STEPPER_go+0x24>
    4cde:	10 92 d5 07 	sts	0x07D5, r1
    4ce2:	10 92 d6 07 	sts	0x07D6, r1
    4ce6:	10 92 ed 07 	sts	0x07ED, r1
    4cea:	08 95       	ret

00004cec <__STEPPER_init>:
    4cec:	3a 9a       	sbi	0x07, 2	; 7
    4cee:	3b 9a       	sbi	0x07, 3	; 7
    4cf0:	3c 9a       	sbi	0x07, 4	; 7
    4cf2:	3d 9a       	sbi	0x07, 5	; 7
    4cf4:	3e 9a       	sbi	0x07, 6	; 7
    4cf6:	3f 9a       	sbi	0x07, 7	; 7
    4cf8:	88 b1       	in	r24, 0x08	; 8
    4cfa:	83 70       	andi	r24, 0x03	; 3
    4cfc:	88 b9       	out	0x08, r24	; 8
    4cfe:	08 95       	ret

00004d00 <STEPPER_set_stop_mode>:
    4d00:	98 2f       	mov	r25, r24
    4d02:	81 e0       	ldi	r24, 0x01	; 1
    4d04:	80 93 ed 07 	sts	0x07ED, r24
    4d08:	91 30       	cpi	r25, 0x01	; 1
    4d0a:	51 f0       	breq	.+20     	; 0x4d20 <STEPPER_set_stop_mode+0x20>
    4d0c:	91 30       	cpi	r25, 0x01	; 1
    4d0e:	18 f0       	brcs	.+6      	; 0x4d16 <STEPPER_set_stop_mode+0x16>
    4d10:	92 30       	cpi	r25, 0x02	; 2
    4d12:	41 f4       	brne	.+16     	; 0x4d24 <STEPPER_set_stop_mode+0x24>
    4d14:	03 c0       	rjmp	.+6      	; 0x4d1c <STEPPER_set_stop_mode+0x1c>
    4d16:	60 93 d7 07 	sts	0x07D7, r22
    4d1a:	04 c0       	rjmp	.+8      	; 0x4d24 <STEPPER_set_stop_mode+0x24>
    4d1c:	60 93 d7 07 	sts	0x07D7, r22
    4d20:	60 93 d8 07 	sts	0x07D8, r22
    4d24:	10 92 ed 07 	sts	0x07ED, r1
    4d28:	08 95       	ret

00004d2a <STEPPER_setup_decels>:
    4d2a:	0f 93       	push	r16
    4d2c:	1f 93       	push	r17
    4d2e:	cf 93       	push	r28
    4d30:	df 93       	push	r29
    4d32:	eb 01       	movw	r28, r22
    4d34:	8a 01       	movw	r16, r20
    4d36:	81 30       	cpi	r24, 0x01	; 1
    4d38:	01 f1       	breq	.+64     	; 0x4d7a <STEPPER_setup_decels+0x50>
    4d3a:	81 30       	cpi	r24, 0x01	; 1
    4d3c:	18 f0       	brcs	.+6      	; 0x4d44 <STEPPER_setup_decels+0x1a>
    4d3e:	82 30       	cpi	r24, 0x02	; 2
    4d40:	61 f5       	brne	.+88     	; 0x4d9a <STEPPER_setup_decels+0x70>
    4d42:	0d c0       	rjmp	.+26     	; 0x4d5e <STEPPER_setup_decels+0x34>
    4d44:	80 91 c1 07 	lds	r24, 0x07C1
    4d48:	90 91 c2 07 	lds	r25, 0x07C2
    4d4c:	89 2b       	or	r24, r25
    4d4e:	11 f0       	breq	.+4      	; 0x4d54 <STEPPER_setup_decels+0x2a>
    4d50:	80 e0       	ldi	r24, 0x00	; 0
    4d52:	1a c0       	rjmp	.+52     	; 0x4d88 <STEPPER_setup_decels+0x5e>
    4d54:	10 92 ce 07 	sts	0x07CE, r1
    4d58:	10 92 cd 07 	sts	0x07CD, r1
    4d5c:	1e c0       	rjmp	.+60     	; 0x4d9a <STEPPER_setup_decels+0x70>
    4d5e:	80 91 c1 07 	lds	r24, 0x07C1
    4d62:	90 91 c2 07 	lds	r25, 0x07C2
    4d66:	89 2b       	or	r24, r25
    4d68:	21 f0       	breq	.+8      	; 0x4d72 <STEPPER_setup_decels+0x48>
    4d6a:	80 e0       	ldi	r24, 0x00	; 0
    4d6c:	0e 94 0b 28 	call	0x5016	; 0x5016 <STEPPER_set_decel_step_values>
    4d70:	04 c0       	rjmp	.+8      	; 0x4d7a <STEPPER_setup_decels+0x50>
    4d72:	10 92 ce 07 	sts	0x07CE, r1
    4d76:	10 92 cd 07 	sts	0x07CD, r1
    4d7a:	80 91 c3 07 	lds	r24, 0x07C3
    4d7e:	90 91 c4 07 	lds	r25, 0x07C4
    4d82:	89 2b       	or	r24, r25
    4d84:	31 f0       	breq	.+12     	; 0x4d92 <STEPPER_setup_decels+0x68>
    4d86:	81 e0       	ldi	r24, 0x01	; 1
    4d88:	be 01       	movw	r22, r28
    4d8a:	a8 01       	movw	r20, r16
    4d8c:	0e 94 0b 28 	call	0x5016	; 0x5016 <STEPPER_set_decel_step_values>
    4d90:	04 c0       	rjmp	.+8      	; 0x4d9a <STEPPER_setup_decels+0x70>
    4d92:	10 92 d0 07 	sts	0x07D0, r1
    4d96:	10 92 cf 07 	sts	0x07CF, r1
    4d9a:	df 91       	pop	r29
    4d9c:	cf 91       	pop	r28
    4d9e:	1f 91       	pop	r17
    4da0:	0f 91       	pop	r16
    4da2:	08 95       	ret

00004da4 <SYS_init>:
    4da4:	10 92 f0 07 	sts	0x07F0, r1
    4da8:	10 92 f1 07 	sts	0x07F1, r1
    4dac:	10 92 f5 07 	sts	0x07F5, r1
    4db0:	10 92 f2 07 	sts	0x07F2, r1
    4db4:	10 92 f4 07 	sts	0x07F4, r1
    4db8:	10 92 f6 07 	sts	0x07F6, r1
    4dbc:	10 92 f7 07 	sts	0x07F7, r1
    4dc0:	10 92 f8 07 	sts	0x07F8, r1
    4dc4:	10 92 f9 07 	sts	0x07F9, r1
    4dc8:	10 92 fa 07 	sts	0x07FA, r1
    4dcc:	10 92 fb 07 	sts	0x07FB, r1
    4dd0:	10 92 fc 07 	sts	0x07FC, r1
    4dd4:	10 92 fd 07 	sts	0x07FD, r1
    4dd8:	10 92 fe 07 	sts	0x07FE, r1
    4ddc:	10 92 ff 07 	sts	0x07FF, r1
    4de0:	10 92 00 08 	sts	0x0800, r1
    4de4:	10 92 01 08 	sts	0x0801, r1
    4de8:	08 95       	ret

00004dea <TMRSRVC_insert>:
    4dea:	cf 92       	push	r12
    4dec:	df 92       	push	r13
    4dee:	ef 92       	push	r14
    4df0:	ff 92       	push	r15
    4df2:	0f 93       	push	r16
    4df4:	1f 93       	push	r17
    4df6:	cf 93       	push	r28
    4df8:	df 93       	push	r29
    4dfa:	ec 01       	movw	r28, r24
    4dfc:	80 91 27 08 	lds	r24, 0x0827
    4e00:	88 23       	and	r24, r24
    4e02:	39 f4       	brne	.+14     	; 0x4e12 <TMRSRVC_insert+0x28>
    4e04:	d0 93 29 08 	sts	0x0829, r29
    4e08:	c0 93 28 08 	sts	0x0828, r28
    4e0c:	0e 94 83 27 	call	0x4f06	; 0x4f06 <TMRSRVC_start>
    4e10:	47 c0       	rjmp	.+142    	; 0x4ea0 <TMRSRVC_insert+0xb6>
    4e12:	c0 90 28 08 	lds	r12, 0x0828
    4e16:	d0 90 29 08 	lds	r13, 0x0829
    4e1a:	00 e0       	ldi	r16, 0x00	; 0
    4e1c:	10 e0       	ldi	r17, 0x00	; 0
    4e1e:	ee 24       	eor	r14, r14
    4e20:	ff 24       	eor	r15, r15
    4e22:	37 c0       	rjmp	.+110    	; 0x4e92 <TMRSRVC_insert+0xa8>
    4e24:	a8 81       	ld	r26, Y
    4e26:	b9 81       	ldd	r27, Y+1	; 0x01
    4e28:	fd 01       	movw	r30, r26
    4e2a:	64 81       	ldd	r22, Z+4	; 0x04
    4e2c:	75 81       	ldd	r23, Z+5	; 0x05
    4e2e:	f6 01       	movw	r30, r12
    4e30:	40 81       	ld	r20, Z
    4e32:	51 81       	ldd	r21, Z+1	; 0x01
    4e34:	fa 01       	movw	r30, r20
    4e36:	84 81       	ldd	r24, Z+4	; 0x04
    4e38:	95 81       	ldd	r25, Z+5	; 0x05
    4e3a:	9b 01       	movw	r18, r22
    4e3c:	28 1b       	sub	r18, r24
    4e3e:	39 0b       	sbc	r19, r25
    4e40:	37 ff       	sbrs	r19, 7
    4e42:	0f c0       	rjmp	.+30     	; 0x4e62 <TMRSRVC_insert+0x78>
    4e44:	86 1b       	sub	r24, r22
    4e46:	97 0b       	sbc	r25, r23
    4e48:	95 83       	std	Z+5, r25	; 0x05
    4e4a:	84 83       	std	Z+4, r24	; 0x04
    4e4c:	db 82       	std	Y+3, r13	; 0x03
    4e4e:	ca 82       	std	Y+2, r12	; 0x02
    4e50:	01 2b       	or	r16, r17
    4e52:	29 f4       	brne	.+10     	; 0x4e5e <TMRSRVC_insert+0x74>
    4e54:	d0 93 29 08 	sts	0x0829, r29
    4e58:	c0 93 28 08 	sts	0x0828, r28
    4e5c:	21 c0       	rjmp	.+66     	; 0x4ea0 <TMRSRVC_insert+0xb6>
    4e5e:	f7 01       	movw	r30, r14
    4e60:	0c c0       	rjmp	.+24     	; 0x4e7a <TMRSRVC_insert+0x90>
    4e62:	f6 01       	movw	r30, r12
    4e64:	82 81       	ldd	r24, Z+2	; 0x02
    4e66:	93 81       	ldd	r25, Z+3	; 0x03
    4e68:	21 15       	cp	r18, r1
    4e6a:	31 05       	cpc	r19, r1
    4e6c:	49 f4       	brne	.+18     	; 0x4e80 <TMRSRVC_insert+0x96>
    4e6e:	fd 01       	movw	r30, r26
    4e70:	15 82       	std	Z+5, r1	; 0x05
    4e72:	14 82       	std	Z+4, r1	; 0x04
    4e74:	9b 83       	std	Y+3, r25	; 0x03
    4e76:	8a 83       	std	Y+2, r24	; 0x02
    4e78:	f6 01       	movw	r30, r12
    4e7a:	d3 83       	std	Z+3, r29	; 0x03
    4e7c:	c2 83       	std	Z+2, r28	; 0x02
    4e7e:	10 c0       	rjmp	.+32     	; 0x4ea0 <TMRSRVC_insert+0xb6>
    4e80:	fd 01       	movw	r30, r26
    4e82:	35 83       	std	Z+5, r19	; 0x05
    4e84:	24 83       	std	Z+4, r18	; 0x04
    4e86:	00 97       	sbiw	r24, 0x00	; 0
    4e88:	b9 f3       	breq	.-18     	; 0x4e78 <TMRSRVC_insert+0x8e>
    4e8a:	0f 5f       	subi	r16, 0xFF	; 255
    4e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    4e8e:	76 01       	movw	r14, r12
    4e90:	6c 01       	movw	r12, r24
    4e92:	80 91 27 08 	lds	r24, 0x0827
    4e96:	90 e0       	ldi	r25, 0x00	; 0
    4e98:	08 17       	cp	r16, r24
    4e9a:	19 07       	cpc	r17, r25
    4e9c:	18 f2       	brcs	.-122    	; 0x4e24 <TMRSRVC_insert+0x3a>
    4e9e:	ec cf       	rjmp	.-40     	; 0x4e78 <TMRSRVC_insert+0x8e>
    4ea0:	80 91 27 08 	lds	r24, 0x0827
    4ea4:	8f 5f       	subi	r24, 0xFF	; 255
    4ea6:	80 93 27 08 	sts	0x0827, r24
    4eaa:	df 91       	pop	r29
    4eac:	cf 91       	pop	r28
    4eae:	1f 91       	pop	r17
    4eb0:	0f 91       	pop	r16
    4eb2:	ff 90       	pop	r15
    4eb4:	ef 90       	pop	r14
    4eb6:	df 90       	pop	r13
    4eb8:	cf 90       	pop	r12
    4eba:	08 95       	ret

00004ebc <TMRSRVC_open>:
    4ebc:	88 e0       	ldi	r24, 0x08	; 8
    4ebe:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    4ec2:	88 23       	and	r24, r24
    4ec4:	b9 f4       	brne	.+46     	; 0x4ef4 <TMRSRVC_open+0x38>
    4ec6:	10 92 27 08 	sts	0x0827, r1
    4eca:	10 92 29 08 	sts	0x0829, r1
    4ece:	10 92 28 08 	sts	0x0828, r1
    4ed2:	10 92 fb 04 	sts	0x04FB, r1
    4ed6:	10 92 fc 04 	sts	0x04FC, r1
    4eda:	80 e1       	ldi	r24, 0x10	; 16
    4edc:	68 e7       	ldi	r22, 0x78	; 120
    4ede:	78 e2       	ldi	r23, 0x28	; 40
    4ee0:	0e 94 94 27 	call	0x4f28	; 0x4f28 <__ISR_attach>
    4ee4:	0e 94 7f 28 	call	0x50fe	; 0x50fe <__TMRSRVC_init>
    4ee8:	0e 94 7d 27 	call	0x4efa	; 0x4efa <__TMRSRVC_start>
    4eec:	88 e0       	ldi	r24, 0x08	; 8
    4eee:	61 e0       	ldi	r22, 0x01	; 1
    4ef0:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <SYS_set_state>
    4ef4:	88 e0       	ldi	r24, 0x08	; 8
    4ef6:	91 e0       	ldi	r25, 0x01	; 1
    4ef8:	08 95       	ret

00004efa <__TMRSRVC_start>:
    4efa:	ee e6       	ldi	r30, 0x6E	; 110
    4efc:	f0 e0       	ldi	r31, 0x00	; 0
    4efe:	80 81       	ld	r24, Z
    4f00:	82 60       	ori	r24, 0x02	; 2
    4f02:	80 83       	st	Z, r24
    4f04:	08 95       	ret

00004f06 <TMRSRVC_start>:
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	80 93 fc 04 	sts	0x04FC, r24
    4f0c:	08 95       	ret

00004f0e <I2C_enable>:
    4f0e:	80 91 2a 08 	lds	r24, 0x082A
    4f12:	81 30       	cpi	r24, 0x01	; 1
    4f14:	29 f4       	brne	.+10     	; 0x4f20 <I2C_enable+0x12>
    4f16:	80 91 bc 00 	lds	r24, 0x00BC
    4f1a:	84 60       	ori	r24, 0x04	; 4
    4f1c:	80 93 bc 00 	sts	0x00BC, r24
    4f20:	08 95       	ret

00004f22 <__I2C_init>:
    4f22:	38 98       	cbi	0x07, 0	; 7
    4f24:	39 98       	cbi	0x07, 1	; 7
    4f26:	08 95       	ret

00004f28 <__ISR_attach>:
    4f28:	80 32       	cpi	r24, 0x20	; 32
    4f2a:	18 f0       	brcs	.+6      	; 0x4f32 <__ISR_attach+0xa>
    4f2c:	20 e0       	ldi	r18, 0x00	; 0
    4f2e:	30 e0       	ldi	r19, 0x00	; 0
    4f30:	0a c0       	rjmp	.+20     	; 0x4f46 <__ISR_attach+0x1e>
    4f32:	e8 2f       	mov	r30, r24
    4f34:	f0 e0       	ldi	r31, 0x00	; 0
    4f36:	ee 0f       	add	r30, r30
    4f38:	ff 1f       	adc	r31, r31
    4f3a:	e5 56       	subi	r30, 0x65	; 101
    4f3c:	fb 4f       	sbci	r31, 0xFB	; 251
    4f3e:	20 81       	ld	r18, Z
    4f40:	31 81       	ldd	r19, Z+1	; 0x01
    4f42:	71 83       	std	Z+1, r23	; 0x01
    4f44:	60 83       	st	Z, r22
    4f46:	c9 01       	movw	r24, r18
    4f48:	08 95       	ret

00004f4a <__ATMEGA_init>:
    4f4a:	24 9a       	sbi	0x04, 4	; 4
    4f4c:	2c 9a       	sbi	0x05, 4	; 5
    4f4e:	08 95       	ret

00004f50 <SPI_default_config>:
    4f50:	83 e5       	ldi	r24, 0x53	; 83
    4f52:	8c bd       	out	0x2c, r24	; 44
    4f54:	81 e0       	ldi	r24, 0x01	; 1
    4f56:	8d bd       	out	0x2d, r24	; 45
    4f58:	8d e0       	ldi	r24, 0x0D	; 13
    4f5a:	8a 95       	dec	r24
    4f5c:	f1 f7       	brne	.-4      	; 0x4f5a <SPI_default_config+0xa>
    4f5e:	08 95       	ret

00004f60 <SPI_ATtiny0_config>:
    4f60:	83 e5       	ldi	r24, 0x53	; 83
    4f62:	8c bd       	out	0x2c, r24	; 44
    4f64:	1d bc       	out	0x2d, r1	; 45
    4f66:	84 ef       	ldi	r24, 0xF4	; 244
    4f68:	91 e0       	ldi	r25, 0x01	; 1
    4f6a:	01 97       	sbiw	r24, 0x01	; 1
    4f6c:	f1 f7       	brne	.-4      	; 0x4f6a <SPI_ATtiny0_config+0xa>
    4f6e:	08 95       	ret

00004f70 <SPI_PSXC_config>:
    4f70:	8f e7       	ldi	r24, 0x7F	; 127
    4f72:	8c bd       	out	0x2c, r24	; 44
    4f74:	1d bc       	out	0x2d, r1	; 45
    4f76:	84 ef       	ldi	r24, 0xF4	; 244
    4f78:	91 e0       	ldi	r25, 0x01	; 1
    4f7a:	01 97       	sbiw	r24, 0x01	; 1
    4f7c:	f1 f7       	brne	.-4      	; 0x4f7a <SPI_PSXC_config+0xa>
    4f7e:	08 95       	ret

00004f80 <SPI_LCD_config>:
    4f80:	83 e5       	ldi	r24, 0x53	; 83
    4f82:	8c bd       	out	0x2c, r24	; 44
    4f84:	81 e0       	ldi	r24, 0x01	; 1
    4f86:	8d bd       	out	0x2d, r24	; 45
    4f88:	8d e0       	ldi	r24, 0x0D	; 13
    4f8a:	8a 95       	dec	r24
    4f8c:	f1 f7       	brne	.-4      	; 0x4f8a <SPI_LCD_config+0xa>
    4f8e:	08 95       	ret

00004f90 <SPI_FLASH_config>:
    4f90:	83 e5       	ldi	r24, 0x53	; 83
    4f92:	8c bd       	out	0x2c, r24	; 44
    4f94:	81 e0       	ldi	r24, 0x01	; 1
    4f96:	8d bd       	out	0x2d, r24	; 45
    4f98:	84 ef       	ldi	r24, 0xF4	; 244
    4f9a:	91 e0       	ldi	r25, 0x01	; 1
    4f9c:	01 97       	sbiw	r24, 0x01	; 1
    4f9e:	f1 f7       	brne	.-4      	; 0x4f9c <SPI_FLASH_config+0xc>
    4fa0:	08 95       	ret

00004fa2 <__SPI_init>:
    4fa2:	25 9a       	sbi	0x04, 5	; 4
    4fa4:	26 98       	cbi	0x04, 6	; 4
    4fa6:	27 9a       	sbi	0x04, 7	; 4
    4fa8:	20 9a       	sbi	0x04, 0	; 4
    4faa:	21 9a       	sbi	0x04, 1	; 4
    4fac:	22 9a       	sbi	0x04, 2	; 4
    4fae:	08 95       	ret

00004fb0 <SPKR_beep>:
    4fb0:	9b 01       	movw	r18, r22
    4fb2:	ac 01       	movw	r20, r24
    4fb4:	80 91 ec 04 	lds	r24, 0x04EC
    4fb8:	88 23       	and	r24, r24
    4fba:	81 f0       	breq	.+32     	; 0x4fdc <SPKR_beep+0x2c>
    4fbc:	da 01       	movw	r26, r20
    4fbe:	c9 01       	movw	r24, r18
    4fc0:	88 0f       	add	r24, r24
    4fc2:	99 1f       	adc	r25, r25
    4fc4:	aa 1f       	adc	r26, r26
    4fc6:	bb 1f       	adc	r27, r27
    4fc8:	90 93 f8 04 	sts	0x04F8, r25
    4fcc:	80 93 f7 04 	sts	0x04F7, r24
    4fd0:	21 15       	cp	r18, r1
    4fd2:	31 05       	cpc	r19, r1
    4fd4:	41 05       	cpc	r20, r1
    4fd6:	51 05       	cpc	r21, r1
    4fd8:	09 f4       	brne	.+2      	; 0x4fdc <SPKR_beep+0x2c>
    4fda:	5f 98       	cbi	0x0b, 7	; 11
    4fdc:	08 95       	ret

00004fde <__SPKR_close>:
    4fde:	82 30       	cpi	r24, 0x02	; 2
    4fe0:	29 f4       	brne	.+10     	; 0x4fec <__SPKR_close+0xe>
    4fe2:	80 91 81 00 	lds	r24, 0x0081
    4fe6:	8e 7f       	andi	r24, 0xFE	; 254
    4fe8:	80 93 81 00 	sts	0x0081, r24
    4fec:	80 91 eb 04 	lds	r24, 0x04EB
    4ff0:	81 30       	cpi	r24, 0x01	; 1
    4ff2:	31 f4       	brne	.+12     	; 0x5000 <__SPKR_close+0x22>
    4ff4:	80 91 ec 04 	lds	r24, 0x04EC
    4ff8:	81 30       	cpi	r24, 0x01	; 1
    4ffa:	11 f4       	brne	.+4      	; 0x5000 <__SPKR_close+0x22>
    4ffc:	00 00       	nop
    4ffe:	08 95       	ret
    5000:	80 91 eb 04 	lds	r24, 0x04EB
    5004:	81 30       	cpi	r24, 0x01	; 1
    5006:	21 f0       	breq	.+8      	; 0x5010 <__SPKR_close+0x32>
    5008:	80 91 ec 04 	lds	r24, 0x04EC
    500c:	81 30       	cpi	r24, 0x01	; 1
    500e:	11 f4       	brne	.+4      	; 0x5014 <__SPKR_close+0x36>
    5010:	5f 98       	cbi	0x0b, 7	; 11
    5012:	57 98       	cbi	0x0a, 7	; 10
    5014:	08 95       	ret

00005016 <STEPPER_set_decel_step_values>:
    5016:	ef 92       	push	r14
    5018:	ff 92       	push	r15
    501a:	0f 93       	push	r16
    501c:	1f 93       	push	r17
    501e:	cf 93       	push	r28
    5020:	df 93       	push	r29
    5022:	eb 01       	movw	r28, r22
    5024:	88 23       	and	r24, r24
    5026:	21 f0       	breq	.+8      	; 0x5030 <STEPPER_set_decel_step_values+0x1a>
    5028:	81 30       	cpi	r24, 0x01	; 1
    502a:	09 f0       	breq	.+2      	; 0x502e <STEPPER_set_decel_step_values+0x18>
    502c:	5a c0       	rjmp	.+180    	; 0x50e2 <STEPPER_set_decel_step_values+0xcc>
    502e:	2d c0       	rjmp	.+90     	; 0x508a <STEPPER_set_decel_step_values+0x74>
    5030:	9a 01       	movw	r18, r20
    5032:	40 e0       	ldi	r20, 0x00	; 0
    5034:	50 e0       	ldi	r21, 0x00	; 0
    5036:	ca 01       	movw	r24, r20
    5038:	b9 01       	movw	r22, r18
    503a:	0e 94 3d 33 	call	0x667a	; 0x667a <__mulsi3>
    503e:	20 91 c1 07 	lds	r18, 0x07C1
    5042:	30 91 c2 07 	lds	r19, 0x07C2
    5046:	22 0f       	add	r18, r18
    5048:	33 1f       	adc	r19, r19
    504a:	40 e0       	ldi	r20, 0x00	; 0
    504c:	50 e0       	ldi	r21, 0x00	; 0
    504e:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <__udivmodsi4>
    5052:	79 01       	movw	r14, r18
    5054:	8a 01       	movw	r16, r20
    5056:	a8 01       	movw	r20, r16
    5058:	97 01       	movw	r18, r14
    505a:	22 0f       	add	r18, r18
    505c:	33 1f       	adc	r19, r19
    505e:	44 1f       	adc	r20, r20
    5060:	55 1f       	adc	r21, r21
    5062:	ce 01       	movw	r24, r28
    5064:	a0 e0       	ldi	r26, 0x00	; 0
    5066:	b0 e0       	ldi	r27, 0x00	; 0
    5068:	82 17       	cp	r24, r18
    506a:	93 07       	cpc	r25, r19
    506c:	a4 07       	cpc	r26, r20
    506e:	b5 07       	cpc	r27, r21
    5070:	28 f0       	brcs	.+10     	; 0x507c <STEPPER_set_decel_step_values+0x66>
    5072:	f0 92 ce 07 	sts	0x07CE, r15
    5076:	e0 92 cd 07 	sts	0x07CD, r14
    507a:	33 c0       	rjmp	.+102    	; 0x50e2 <STEPPER_set_decel_step_values+0xcc>
    507c:	d6 95       	lsr	r29
    507e:	c7 95       	ror	r28
    5080:	d0 93 ce 07 	sts	0x07CE, r29
    5084:	c0 93 cd 07 	sts	0x07CD, r28
    5088:	2c c0       	rjmp	.+88     	; 0x50e2 <STEPPER_set_decel_step_values+0xcc>
    508a:	9a 01       	movw	r18, r20
    508c:	40 e0       	ldi	r20, 0x00	; 0
    508e:	50 e0       	ldi	r21, 0x00	; 0
    5090:	ca 01       	movw	r24, r20
    5092:	b9 01       	movw	r22, r18
    5094:	0e 94 3d 33 	call	0x667a	; 0x667a <__mulsi3>
    5098:	20 91 c3 07 	lds	r18, 0x07C3
    509c:	30 91 c4 07 	lds	r19, 0x07C4
    50a0:	22 0f       	add	r18, r18
    50a2:	33 1f       	adc	r19, r19
    50a4:	40 e0       	ldi	r20, 0x00	; 0
    50a6:	50 e0       	ldi	r21, 0x00	; 0
    50a8:	0e 94 5c 33 	call	0x66b8	; 0x66b8 <__udivmodsi4>
    50ac:	79 01       	movw	r14, r18
    50ae:	8a 01       	movw	r16, r20
    50b0:	a8 01       	movw	r20, r16
    50b2:	97 01       	movw	r18, r14
    50b4:	22 0f       	add	r18, r18
    50b6:	33 1f       	adc	r19, r19
    50b8:	44 1f       	adc	r20, r20
    50ba:	55 1f       	adc	r21, r21
    50bc:	ce 01       	movw	r24, r28
    50be:	a0 e0       	ldi	r26, 0x00	; 0
    50c0:	b0 e0       	ldi	r27, 0x00	; 0
    50c2:	82 17       	cp	r24, r18
    50c4:	93 07       	cpc	r25, r19
    50c6:	a4 07       	cpc	r26, r20
    50c8:	b5 07       	cpc	r27, r21
    50ca:	28 f0       	brcs	.+10     	; 0x50d6 <STEPPER_set_decel_step_values+0xc0>
    50cc:	f0 92 d0 07 	sts	0x07D0, r15
    50d0:	e0 92 cf 07 	sts	0x07CF, r14
    50d4:	06 c0       	rjmp	.+12     	; 0x50e2 <STEPPER_set_decel_step_values+0xcc>
    50d6:	d6 95       	lsr	r29
    50d8:	c7 95       	ror	r28
    50da:	d0 93 d0 07 	sts	0x07D0, r29
    50de:	c0 93 cf 07 	sts	0x07CF, r28
    50e2:	df 91       	pop	r29
    50e4:	cf 91       	pop	r28
    50e6:	1f 91       	pop	r17
    50e8:	0f 91       	pop	r16
    50ea:	ff 90       	pop	r15
    50ec:	ef 90       	pop	r14
    50ee:	08 95       	ret

000050f0 <__TIMER0_COMPA_vect>:
    50f0:	0e 94 88 28 	call	0x5110	; 0x5110 <TMRSRVC_tick>
    50f4:	0e 94 c8 28 	call	0x5190	; 0x5190 <STEPPER_clk>
    50f8:	0e 94 a1 28 	call	0x5142	; 0x5142 <SPKR_beep_clk>
    50fc:	08 95       	ret

000050fe <__TMRSRVC_init>:
    50fe:	84 b5       	in	r24, 0x24	; 36
    5100:	82 60       	ori	r24, 0x02	; 2
    5102:	84 bd       	out	0x24, r24	; 36
    5104:	85 b5       	in	r24, 0x25	; 37
    5106:	84 60       	ori	r24, 0x04	; 4
    5108:	85 bd       	out	0x25, r24	; 37
    510a:	8e e4       	ldi	r24, 0x4E	; 78
    510c:	87 bd       	out	0x27, r24	; 39
    510e:	08 95       	ret

00005110 <TMRSRVC_tick>:
    5110:	88 e0       	ldi	r24, 0x08	; 8
    5112:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    5116:	88 23       	and	r24, r24
    5118:	11 f4       	brne	.+4      	; 0x511e <TMRSRVC_tick+0xe>
    511a:	84 e0       	ldi	r24, 0x04	; 4
    511c:	08 95       	ret
    511e:	80 91 fc 04 	lds	r24, 0x04FC
    5122:	88 23       	and	r24, r24
    5124:	11 f4       	brne	.+4      	; 0x512a <TMRSRVC_tick+0x1a>
    5126:	83 e0       	ldi	r24, 0x03	; 3
    5128:	08 95       	ret
    512a:	80 91 fb 04 	lds	r24, 0x04FB
    512e:	88 23       	and	r24, r24
    5130:	11 f0       	breq	.+4      	; 0x5136 <TMRSRVC_tick+0x26>
    5132:	82 e0       	ldi	r24, 0x02	; 2
    5134:	08 95       	ret
    5136:	0e 94 15 2b 	call	0x562a	; 0x562a <TMRSRVC_process>
    513a:	81 30       	cpi	r24, 0x01	; 1
    513c:	e1 f3       	breq	.-8      	; 0x5136 <TMRSRVC_tick+0x26>
    513e:	80 e0       	ldi	r24, 0x00	; 0
    5140:	08 95       	ret

00005142 <SPKR_beep_clk>:
    5142:	80 91 ec 04 	lds	r24, 0x04EC
    5146:	81 30       	cpi	r24, 0x01	; 1
    5148:	11 f5       	brne	.+68     	; 0x518e <SPKR_beep_clk+0x4c>
    514a:	80 91 f5 04 	lds	r24, 0x04F5
    514e:	90 91 f6 04 	lds	r25, 0x04F6
    5152:	20 91 f7 04 	lds	r18, 0x04F7
    5156:	30 91 f8 04 	lds	r19, 0x04F8
    515a:	28 0f       	add	r18, r24
    515c:	39 1f       	adc	r19, r25
    515e:	30 93 f6 04 	sts	0x04F6, r19
    5162:	20 93 f5 04 	sts	0x04F5, r18
    5166:	80 91 f5 04 	lds	r24, 0x04F5
    516a:	90 91 f6 04 	lds	r25, 0x04F6
    516e:	88 5e       	subi	r24, 0xE8	; 232
    5170:	93 40       	sbci	r25, 0x03	; 3
    5172:	6c f0       	brlt	.+26     	; 0x518e <SPKR_beep_clk+0x4c>
    5174:	8b b1       	in	r24, 0x0b	; 11
    5176:	80 58       	subi	r24, 0x80	; 128
    5178:	8b b9       	out	0x0b, r24	; 11
    517a:	80 91 f5 04 	lds	r24, 0x04F5
    517e:	90 91 f6 04 	lds	r25, 0x04F6
    5182:	88 5e       	subi	r24, 0xE8	; 232
    5184:	93 40       	sbci	r25, 0x03	; 3
    5186:	90 93 f6 04 	sts	0x04F6, r25
    518a:	80 93 f5 04 	sts	0x04F5, r24
    518e:	08 95       	ret

00005190 <STEPPER_clk>:
    5190:	87 e0       	ldi	r24, 0x07	; 7
    5192:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <SYS_get_state>
    5196:	81 30       	cpi	r24, 0x01	; 1
    5198:	09 f0       	breq	.+2      	; 0x519c <STEPPER_clk+0xc>
    519a:	aa c0       	rjmp	.+340    	; 0x52f0 <STEPPER_clk+0x160>
    519c:	80 91 c1 07 	lds	r24, 0x07C1
    51a0:	90 91 c2 07 	lds	r25, 0x07C2
    51a4:	89 2b       	or	r24, r25
    51a6:	09 f1       	breq	.+66     	; 0x51ea <STEPPER_clk+0x5a>
    51a8:	80 91 e5 07 	lds	r24, 0x07E5
    51ac:	90 91 e6 07 	lds	r25, 0x07E6
    51b0:	20 91 c1 07 	lds	r18, 0x07C1
    51b4:	30 91 c2 07 	lds	r19, 0x07C2
    51b8:	82 0f       	add	r24, r18
    51ba:	93 1f       	adc	r25, r19
    51bc:	90 93 e6 07 	sts	0x07E6, r25
    51c0:	80 93 e5 07 	sts	0x07E5, r24
    51c4:	80 91 e5 07 	lds	r24, 0x07E5
    51c8:	90 91 e6 07 	lds	r25, 0x07E6
    51cc:	88 5e       	subi	r24, 0xE8	; 232
    51ce:	93 40       	sbci	r25, 0x03	; 3
    51d0:	a4 f0       	brlt	.+40     	; 0x51fa <STEPPER_clk+0x6a>
    51d2:	80 91 e5 07 	lds	r24, 0x07E5
    51d6:	90 91 e6 07 	lds	r25, 0x07E6
    51da:	88 5e       	subi	r24, 0xE8	; 232
    51dc:	93 40       	sbci	r25, 0x03	; 3
    51de:	90 93 e6 07 	sts	0x07E6, r25
    51e2:	80 93 e5 07 	sts	0x07E5, r24
    51e6:	41 e0       	ldi	r20, 0x01	; 1
    51e8:	09 c0       	rjmp	.+18     	; 0x51fc <STEPPER_clk+0x6c>
    51ea:	80 91 b9 07 	lds	r24, 0x07B9
    51ee:	90 91 ba 07 	lds	r25, 0x07BA
    51f2:	90 93 be 07 	sts	0x07BE, r25
    51f6:	80 93 bd 07 	sts	0x07BD, r24
    51fa:	40 e0       	ldi	r20, 0x00	; 0
    51fc:	80 91 c3 07 	lds	r24, 0x07C3
    5200:	90 91 c4 07 	lds	r25, 0x07C4
    5204:	89 2b       	or	r24, r25
    5206:	09 f1       	breq	.+66     	; 0x524a <STEPPER_clk+0xba>
    5208:	80 91 e7 07 	lds	r24, 0x07E7
    520c:	90 91 e8 07 	lds	r25, 0x07E8
    5210:	20 91 c3 07 	lds	r18, 0x07C3
    5214:	30 91 c4 07 	lds	r19, 0x07C4
    5218:	82 0f       	add	r24, r18
    521a:	93 1f       	adc	r25, r19
    521c:	90 93 e8 07 	sts	0x07E8, r25
    5220:	80 93 e7 07 	sts	0x07E7, r24
    5224:	80 91 e7 07 	lds	r24, 0x07E7
    5228:	90 91 e8 07 	lds	r25, 0x07E8
    522c:	88 5e       	subi	r24, 0xE8	; 232
    522e:	93 40       	sbci	r25, 0x03	; 3
    5230:	a4 f0       	brlt	.+40     	; 0x525a <STEPPER_clk+0xca>
    5232:	80 91 e7 07 	lds	r24, 0x07E7
    5236:	90 91 e8 07 	lds	r25, 0x07E8
    523a:	88 5e       	subi	r24, 0xE8	; 232
    523c:	93 40       	sbci	r25, 0x03	; 3
    523e:	90 93 e8 07 	sts	0x07E8, r25
    5242:	80 93 e7 07 	sts	0x07E7, r24
    5246:	61 e0       	ldi	r22, 0x01	; 1
    5248:	09 c0       	rjmp	.+18     	; 0x525c <STEPPER_clk+0xcc>
    524a:	80 91 bb 07 	lds	r24, 0x07BB
    524e:	90 91 bc 07 	lds	r25, 0x07BC
    5252:	90 93 c0 07 	sts	0x07C0, r25
    5256:	80 93 bf 07 	sts	0x07BF, r24
    525a:	60 e0       	ldi	r22, 0x00	; 0
    525c:	84 2f       	mov	r24, r20
    525e:	0e 94 79 29 	call	0x52f2	; 0x52f2 <STEPPER_process_accel>
    5262:	80 91 e1 07 	lds	r24, 0x07E1
    5266:	90 91 e2 07 	lds	r25, 0x07E2
    526a:	20 91 bd 07 	lds	r18, 0x07BD
    526e:	30 91 be 07 	lds	r19, 0x07BE
    5272:	28 0f       	add	r18, r24
    5274:	39 1f       	adc	r19, r25
    5276:	30 93 e2 07 	sts	0x07E2, r19
    527a:	20 93 e1 07 	sts	0x07E1, r18
    527e:	80 91 e1 07 	lds	r24, 0x07E1
    5282:	90 91 e2 07 	lds	r25, 0x07E2
    5286:	88 5e       	subi	r24, 0xE8	; 232
    5288:	93 40       	sbci	r25, 0x03	; 3
    528a:	14 f4       	brge	.+4      	; 0x5290 <STEPPER_clk+0x100>
    528c:	40 e0       	ldi	r20, 0x00	; 0
    528e:	0b c0       	rjmp	.+22     	; 0x52a6 <STEPPER_clk+0x116>
    5290:	80 91 e1 07 	lds	r24, 0x07E1
    5294:	90 91 e2 07 	lds	r25, 0x07E2
    5298:	88 5e       	subi	r24, 0xE8	; 232
    529a:	93 40       	sbci	r25, 0x03	; 3
    529c:	90 93 e2 07 	sts	0x07E2, r25
    52a0:	80 93 e1 07 	sts	0x07E1, r24
    52a4:	41 e0       	ldi	r20, 0x01	; 1
    52a6:	80 91 e3 07 	lds	r24, 0x07E3
    52aa:	90 91 e4 07 	lds	r25, 0x07E4
    52ae:	20 91 bf 07 	lds	r18, 0x07BF
    52b2:	30 91 c0 07 	lds	r19, 0x07C0
    52b6:	28 0f       	add	r18, r24
    52b8:	39 1f       	adc	r19, r25
    52ba:	30 93 e4 07 	sts	0x07E4, r19
    52be:	20 93 e3 07 	sts	0x07E3, r18
    52c2:	80 91 e3 07 	lds	r24, 0x07E3
    52c6:	90 91 e4 07 	lds	r25, 0x07E4
    52ca:	88 5e       	subi	r24, 0xE8	; 232
    52cc:	93 40       	sbci	r25, 0x03	; 3
    52ce:	14 f4       	brge	.+4      	; 0x52d4 <STEPPER_clk+0x144>
    52d0:	60 e0       	ldi	r22, 0x00	; 0
    52d2:	0b c0       	rjmp	.+22     	; 0x52ea <STEPPER_clk+0x15a>
    52d4:	80 91 e3 07 	lds	r24, 0x07E3
    52d8:	90 91 e4 07 	lds	r25, 0x07E4
    52dc:	88 5e       	subi	r24, 0xE8	; 232
    52de:	93 40       	sbci	r25, 0x03	; 3
    52e0:	90 93 e4 07 	sts	0x07E4, r25
    52e4:	80 93 e3 07 	sts	0x07E3, r24
    52e8:	61 e0       	ldi	r22, 0x01	; 1
    52ea:	84 2f       	mov	r24, r20
    52ec:	0e 94 be 29 	call	0x537c	; 0x537c <STEPPER_process_run_mode>
    52f0:	08 95       	ret

000052f2 <STEPPER_process_accel>:
    52f2:	88 23       	and	r24, r24
    52f4:	f1 f0       	breq	.+60     	; 0x5332 <STEPPER_process_accel+0x40>
    52f6:	20 91 b9 07 	lds	r18, 0x07B9
    52fa:	30 91 ba 07 	lds	r19, 0x07BA
    52fe:	80 91 bd 07 	lds	r24, 0x07BD
    5302:	90 91 be 07 	lds	r25, 0x07BE
    5306:	28 1b       	sub	r18, r24
    5308:	39 0b       	sbc	r19, r25
    530a:	12 16       	cp	r1, r18
    530c:	13 06       	cpc	r1, r19
    530e:	34 f4       	brge	.+12     	; 0x531c <STEPPER_process_accel+0x2a>
    5310:	80 91 bd 07 	lds	r24, 0x07BD
    5314:	90 91 be 07 	lds	r25, 0x07BE
    5318:	01 96       	adiw	r24, 0x01	; 1
    531a:	07 c0       	rjmp	.+14     	; 0x532a <STEPPER_process_accel+0x38>
    531c:	23 2b       	or	r18, r19
    531e:	49 f0       	breq	.+18     	; 0x5332 <STEPPER_process_accel+0x40>
    5320:	80 91 bd 07 	lds	r24, 0x07BD
    5324:	90 91 be 07 	lds	r25, 0x07BE
    5328:	01 97       	sbiw	r24, 0x01	; 1
    532a:	90 93 be 07 	sts	0x07BE, r25
    532e:	80 93 bd 07 	sts	0x07BD, r24
    5332:	66 23       	and	r22, r22
    5334:	11 f1       	breq	.+68     	; 0x537a <STEPPER_process_accel+0x88>
    5336:	20 91 bb 07 	lds	r18, 0x07BB
    533a:	30 91 bc 07 	lds	r19, 0x07BC
    533e:	80 91 bf 07 	lds	r24, 0x07BF
    5342:	90 91 c0 07 	lds	r25, 0x07C0
    5346:	28 1b       	sub	r18, r24
    5348:	39 0b       	sbc	r19, r25
    534a:	12 16       	cp	r1, r18
    534c:	13 06       	cpc	r1, r19
    534e:	54 f4       	brge	.+20     	; 0x5364 <STEPPER_process_accel+0x72>
    5350:	80 91 bf 07 	lds	r24, 0x07BF
    5354:	90 91 c0 07 	lds	r25, 0x07C0
    5358:	01 96       	adiw	r24, 0x01	; 1
    535a:	90 93 c0 07 	sts	0x07C0, r25
    535e:	80 93 bf 07 	sts	0x07BF, r24
    5362:	08 95       	ret
    5364:	23 2b       	or	r18, r19
    5366:	49 f0       	breq	.+18     	; 0x537a <STEPPER_process_accel+0x88>
    5368:	80 91 bf 07 	lds	r24, 0x07BF
    536c:	90 91 c0 07 	lds	r25, 0x07C0
    5370:	01 97       	sbiw	r24, 0x01	; 1
    5372:	90 93 c0 07 	sts	0x07C0, r25
    5376:	80 93 bf 07 	sts	0x07BF, r24
    537a:	08 95       	ret

0000537c <STEPPER_process_run_mode>:
    537c:	0f 93       	push	r16
    537e:	1f 93       	push	r17
    5380:	18 2f       	mov	r17, r24
    5382:	06 2f       	mov	r16, r22
    5384:	80 91 ed 07 	lds	r24, 0x07ED
    5388:	88 23       	and	r24, r24
    538a:	09 f0       	breq	.+2      	; 0x538e <STEPPER_process_run_mode+0x12>
    538c:	e7 c0       	rjmp	.+462    	; 0x555c <STEPPER_process_run_mode+0x1e0>
    538e:	80 91 d5 07 	lds	r24, 0x07D5
    5392:	88 23       	and	r24, r24
    5394:	09 f0       	breq	.+2      	; 0x5398 <STEPPER_process_run_mode+0x1c>
    5396:	5a c0       	rjmp	.+180    	; 0x544c <STEPPER_process_run_mode+0xd0>
    5398:	80 91 bd 07 	lds	r24, 0x07BD
    539c:	90 91 be 07 	lds	r25, 0x07BE
    53a0:	89 2b       	or	r24, r25
    53a2:	e9 f4       	brne	.+58     	; 0x53de <STEPPER_process_run_mode+0x62>
    53a4:	80 91 fd 04 	lds	r24, 0x04FD
    53a8:	83 7e       	andi	r24, 0xE3	; 227
    53aa:	80 93 fd 04 	sts	0x04FD, r24
    53ae:	10 92 de 07 	sts	0x07DE, r1
    53b2:	80 91 e9 07 	lds	r24, 0x07E9
    53b6:	88 23       	and	r24, r24
    53b8:	09 f4       	brne	.+2      	; 0x53bc <STEPPER_process_run_mode+0x40>
    53ba:	5d c0       	rjmp	.+186    	; 0x5476 <STEPPER_process_run_mode+0xfa>
    53bc:	60 91 d7 07 	lds	r22, 0x07D7
    53c0:	80 e0       	ldi	r24, 0x00	; 0
    53c2:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <STEPPER_stop>
    53c6:	e0 91 eb 07 	lds	r30, 0x07EB
    53ca:	f0 91 ec 07 	lds	r31, 0x07EC
    53ce:	30 97       	sbiw	r30, 0x00	; 0
    53d0:	09 f4       	brne	.+2      	; 0x53d4 <STEPPER_process_run_mode+0x58>
    53d2:	51 c0       	rjmp	.+162    	; 0x5476 <STEPPER_process_run_mode+0xfa>
    53d4:	81 e0       	ldi	r24, 0x01	; 1
    53d6:	80 83       	st	Z, r24
    53d8:	10 92 e9 07 	sts	0x07E9, r1
    53dc:	4c c0       	rjmp	.+152    	; 0x5476 <STEPPER_process_run_mode+0xfa>
    53de:	80 91 b7 07 	lds	r24, 0x07B7
    53e2:	81 30       	cpi	r24, 0x01	; 1
    53e4:	41 f4       	brne	.+16     	; 0x53f6 <STEPPER_process_run_mode+0x7a>
    53e6:	80 91 c9 07 	lds	r24, 0x07C9
    53ea:	90 91 ca 07 	lds	r25, 0x07CA
    53ee:	01 97       	sbiw	r24, 0x01	; 1
    53f0:	11 f4       	brne	.+4      	; 0x53f6 <STEPPER_process_run_mode+0x7a>
    53f2:	11 e0       	ldi	r17, 0x01	; 1
    53f4:	02 c0       	rjmp	.+4      	; 0x53fa <STEPPER_process_run_mode+0x7e>
    53f6:	11 23       	and	r17, r17
    53f8:	f1 f1       	breq	.+124    	; 0x5476 <STEPPER_process_run_mode+0xfa>
    53fa:	e0 91 dc 07 	lds	r30, 0x07DC
    53fe:	f0 e0       	ldi	r31, 0x00	; 0
    5400:	e1 5f       	subi	r30, 0xF1	; 241
    5402:	fb 4f       	sbci	r31, 0xFB	; 251
    5404:	90 91 fd 04 	lds	r25, 0x04FD
    5408:	93 7e       	andi	r25, 0xE3	; 227
    540a:	80 81       	ld	r24, Z
    540c:	89 2b       	or	r24, r25
    540e:	80 93 fd 04 	sts	0x04FD, r24
    5412:	80 91 da 07 	lds	r24, 0x07DA
    5416:	88 23       	and	r24, r24
    5418:	21 f4       	brne	.+8      	; 0x5422 <STEPPER_process_run_mode+0xa6>
    541a:	80 91 dc 07 	lds	r24, 0x07DC
    541e:	8f 5f       	subi	r24, 0xFF	; 255
    5420:	03 c0       	rjmp	.+6      	; 0x5428 <STEPPER_process_run_mode+0xac>
    5422:	80 91 dc 07 	lds	r24, 0x07DC
    5426:	81 50       	subi	r24, 0x01	; 1
    5428:	80 93 dc 07 	sts	0x07DC, r24
    542c:	80 91 dc 07 	lds	r24, 0x07DC
    5430:	83 70       	andi	r24, 0x03	; 3
    5432:	80 93 dc 07 	sts	0x07DC, r24
    5436:	81 e0       	ldi	r24, 0x01	; 1
    5438:	80 93 de 07 	sts	0x07DE, r24
    543c:	80 91 b7 07 	lds	r24, 0x07B7
    5440:	81 30       	cpi	r24, 0x01	; 1
    5442:	c9 f4       	brne	.+50     	; 0x5476 <STEPPER_process_run_mode+0xfa>
    5444:	80 e0       	ldi	r24, 0x00	; 0
    5446:	0e 94 c1 2a 	call	0x5582	; 0x5582 <STEPPER_process_step_mode>
    544a:	15 c0       	rjmp	.+42     	; 0x5476 <STEPPER_process_run_mode+0xfa>
    544c:	90 91 fd 04 	lds	r25, 0x04FD
    5450:	93 7e       	andi	r25, 0xE3	; 227
    5452:	90 93 fd 04 	sts	0x04FD, r25
    5456:	e0 91 dc 07 	lds	r30, 0x07DC
    545a:	f0 e0       	ldi	r31, 0x00	; 0
    545c:	e1 5f       	subi	r30, 0xF1	; 241
    545e:	fb 4f       	sbci	r31, 0xFB	; 251
    5460:	80 81       	ld	r24, Z
    5462:	89 2b       	or	r24, r25
    5464:	80 93 fd 04 	sts	0x04FD, r24
    5468:	82 e0       	ldi	r24, 0x02	; 2
    546a:	80 93 de 07 	sts	0x07DE, r24
    546e:	10 92 be 07 	sts	0x07BE, r1
    5472:	10 92 bd 07 	sts	0x07BD, r1
    5476:	80 91 d6 07 	lds	r24, 0x07D6
    547a:	88 23       	and	r24, r24
    547c:	09 f0       	breq	.+2      	; 0x5480 <STEPPER_process_run_mode+0x104>
    547e:	59 c0       	rjmp	.+178    	; 0x5532 <STEPPER_process_run_mode+0x1b6>
    5480:	80 91 bf 07 	lds	r24, 0x07BF
    5484:	90 91 c0 07 	lds	r25, 0x07C0
    5488:	89 2b       	or	r24, r25
    548a:	e9 f4       	brne	.+58     	; 0x54c6 <STEPPER_process_run_mode+0x14a>
    548c:	80 91 fd 04 	lds	r24, 0x04FD
    5490:	8f 71       	andi	r24, 0x1F	; 31
    5492:	80 93 fd 04 	sts	0x04FD, r24
    5496:	10 92 df 07 	sts	0x07DF, r1
    549a:	80 91 ea 07 	lds	r24, 0x07EA
    549e:	88 23       	and	r24, r24
    54a0:	09 f4       	brne	.+2      	; 0x54a4 <STEPPER_process_run_mode+0x128>
    54a2:	5c c0       	rjmp	.+184    	; 0x555c <STEPPER_process_run_mode+0x1e0>
    54a4:	60 91 d8 07 	lds	r22, 0x07D8
    54a8:	81 e0       	ldi	r24, 0x01	; 1
    54aa:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <STEPPER_stop>
    54ae:	e0 91 eb 07 	lds	r30, 0x07EB
    54b2:	f0 91 ec 07 	lds	r31, 0x07EC
    54b6:	30 97       	sbiw	r30, 0x00	; 0
    54b8:	09 f4       	brne	.+2      	; 0x54bc <STEPPER_process_run_mode+0x140>
    54ba:	50 c0       	rjmp	.+160    	; 0x555c <STEPPER_process_run_mode+0x1e0>
    54bc:	81 e0       	ldi	r24, 0x01	; 1
    54be:	81 83       	std	Z+1, r24	; 0x01
    54c0:	10 92 ea 07 	sts	0x07EA, r1
    54c4:	4b c0       	rjmp	.+150    	; 0x555c <STEPPER_process_run_mode+0x1e0>
    54c6:	80 91 b8 07 	lds	r24, 0x07B8
    54ca:	81 30       	cpi	r24, 0x01	; 1
    54cc:	41 f4       	brne	.+16     	; 0x54de <STEPPER_process_run_mode+0x162>
    54ce:	80 91 cb 07 	lds	r24, 0x07CB
    54d2:	90 91 cc 07 	lds	r25, 0x07CC
    54d6:	01 97       	sbiw	r24, 0x01	; 1
    54d8:	11 f4       	brne	.+4      	; 0x54de <STEPPER_process_run_mode+0x162>
    54da:	01 e0       	ldi	r16, 0x01	; 1
    54dc:	02 c0       	rjmp	.+4      	; 0x54e2 <STEPPER_process_run_mode+0x166>
    54de:	00 23       	and	r16, r16
    54e0:	e9 f1       	breq	.+122    	; 0x555c <STEPPER_process_run_mode+0x1e0>
    54e2:	e0 91 dd 07 	lds	r30, 0x07DD
    54e6:	f0 e0       	ldi	r31, 0x00	; 0
    54e8:	ed 5e       	subi	r30, 0xED	; 237
    54ea:	fb 4f       	sbci	r31, 0xFB	; 251
    54ec:	90 91 fd 04 	lds	r25, 0x04FD
    54f0:	9f 71       	andi	r25, 0x1F	; 31
    54f2:	80 81       	ld	r24, Z
    54f4:	89 2b       	or	r24, r25
    54f6:	80 93 fd 04 	sts	0x04FD, r24
    54fa:	80 91 db 07 	lds	r24, 0x07DB
    54fe:	88 23       	and	r24, r24
    5500:	21 f4       	brne	.+8      	; 0x550a <STEPPER_process_run_mode+0x18e>
    5502:	80 91 dd 07 	lds	r24, 0x07DD
    5506:	8f 5f       	subi	r24, 0xFF	; 255
    5508:	03 c0       	rjmp	.+6      	; 0x5510 <STEPPER_process_run_mode+0x194>
    550a:	80 91 dd 07 	lds	r24, 0x07DD
    550e:	81 50       	subi	r24, 0x01	; 1
    5510:	80 93 dd 07 	sts	0x07DD, r24
    5514:	80 91 dd 07 	lds	r24, 0x07DD
    5518:	83 70       	andi	r24, 0x03	; 3
    551a:	80 93 dd 07 	sts	0x07DD, r24
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	80 93 df 07 	sts	0x07DF, r24
    5524:	80 91 b8 07 	lds	r24, 0x07B8
    5528:	81 30       	cpi	r24, 0x01	; 1
    552a:	c1 f4       	brne	.+48     	; 0x555c <STEPPER_process_run_mode+0x1e0>
    552c:	0e 94 c1 2a 	call	0x5582	; 0x5582 <STEPPER_process_step_mode>
    5530:	15 c0       	rjmp	.+42     	; 0x555c <STEPPER_process_run_mode+0x1e0>
    5532:	90 91 fd 04 	lds	r25, 0x04FD
    5536:	9f 71       	andi	r25, 0x1F	; 31
    5538:	90 93 fd 04 	sts	0x04FD, r25
    553c:	e0 91 dd 07 	lds	r30, 0x07DD
    5540:	f0 e0       	ldi	r31, 0x00	; 0
    5542:	ed 5e       	subi	r30, 0xED	; 237
    5544:	fb 4f       	sbci	r31, 0xFB	; 251
    5546:	80 81       	ld	r24, Z
    5548:	89 2b       	or	r24, r25
    554a:	80 93 fd 04 	sts	0x04FD, r24
    554e:	82 e0       	ldi	r24, 0x02	; 2
    5550:	80 93 df 07 	sts	0x07DF, r24
    5554:	10 92 c0 07 	sts	0x07C0, r1
    5558:	10 92 bf 07 	sts	0x07BF, r1
    555c:	80 91 e0 07 	lds	r24, 0x07E0
    5560:	88 23       	and	r24, r24
    5562:	31 f4       	brne	.+12     	; 0x5570 <STEPPER_process_run_mode+0x1f4>
    5564:	8d ef       	ldi	r24, 0xFD	; 253
    5566:	94 e0       	ldi	r25, 0x04	; 4
    5568:	61 2f       	mov	r22, r17
    556a:	40 2f       	mov	r20, r16
    556c:	0e 94 83 2b 	call	0x5706	; 0x5706 <STEPPER_process_pwm>
    5570:	88 b1       	in	r24, 0x08	; 8
    5572:	83 70       	andi	r24, 0x03	; 3
    5574:	90 91 fd 04 	lds	r25, 0x04FD
    5578:	89 2b       	or	r24, r25
    557a:	88 b9       	out	0x08, r24	; 8
    557c:	1f 91       	pop	r17
    557e:	0f 91       	pop	r16
    5580:	08 95       	ret

00005582 <STEPPER_process_step_mode>:
    5582:	88 23       	and	r24, r24
    5584:	21 f0       	breq	.+8      	; 0x558e <STEPPER_process_step_mode+0xc>
    5586:	81 30       	cpi	r24, 0x01	; 1
    5588:	09 f0       	breq	.+2      	; 0x558c <STEPPER_process_step_mode+0xa>
    558a:	4e c0       	rjmp	.+156    	; 0x5628 <STEPPER_process_step_mode+0xa6>
    558c:	27 c0       	rjmp	.+78     	; 0x55dc <STEPPER_process_step_mode+0x5a>
    558e:	80 91 c9 07 	lds	r24, 0x07C9
    5592:	90 91 ca 07 	lds	r25, 0x07CA
    5596:	89 2b       	or	r24, r25
    5598:	49 f0       	breq	.+18     	; 0x55ac <STEPPER_process_step_mode+0x2a>
    559a:	80 91 c9 07 	lds	r24, 0x07C9
    559e:	90 91 ca 07 	lds	r25, 0x07CA
    55a2:	01 97       	sbiw	r24, 0x01	; 1
    55a4:	90 93 ca 07 	sts	0x07CA, r25
    55a8:	80 93 c9 07 	sts	0x07C9, r24
    55ac:	80 91 e9 07 	lds	r24, 0x07E9
    55b0:	88 23       	and	r24, r24
    55b2:	d1 f5       	brne	.+116    	; 0x5628 <STEPPER_process_step_mode+0xa6>
    55b4:	20 91 c9 07 	lds	r18, 0x07C9
    55b8:	30 91 ca 07 	lds	r19, 0x07CA
    55bc:	80 91 cd 07 	lds	r24, 0x07CD
    55c0:	90 91 ce 07 	lds	r25, 0x07CE
    55c4:	28 17       	cp	r18, r24
    55c6:	39 07       	cpc	r19, r25
    55c8:	79 f5       	brne	.+94     	; 0x5628 <STEPPER_process_step_mode+0xa6>
    55ca:	80 e0       	ldi	r24, 0x00	; 0
    55cc:	60 e0       	ldi	r22, 0x00	; 0
    55ce:	70 e0       	ldi	r23, 0x00	; 0
    55d0:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <STEPPER_set_speed>
    55d4:	81 e0       	ldi	r24, 0x01	; 1
    55d6:	80 93 e9 07 	sts	0x07E9, r24
    55da:	08 95       	ret
    55dc:	80 91 cb 07 	lds	r24, 0x07CB
    55e0:	90 91 cc 07 	lds	r25, 0x07CC
    55e4:	89 2b       	or	r24, r25
    55e6:	49 f0       	breq	.+18     	; 0x55fa <STEPPER_process_step_mode+0x78>
    55e8:	80 91 cb 07 	lds	r24, 0x07CB
    55ec:	90 91 cc 07 	lds	r25, 0x07CC
    55f0:	01 97       	sbiw	r24, 0x01	; 1
    55f2:	90 93 cc 07 	sts	0x07CC, r25
    55f6:	80 93 cb 07 	sts	0x07CB, r24
    55fa:	80 91 ea 07 	lds	r24, 0x07EA
    55fe:	88 23       	and	r24, r24
    5600:	99 f4       	brne	.+38     	; 0x5628 <STEPPER_process_step_mode+0xa6>
    5602:	20 91 cb 07 	lds	r18, 0x07CB
    5606:	30 91 cc 07 	lds	r19, 0x07CC
    560a:	80 91 cf 07 	lds	r24, 0x07CF
    560e:	90 91 d0 07 	lds	r25, 0x07D0
    5612:	28 17       	cp	r18, r24
    5614:	39 07       	cpc	r19, r25
    5616:	41 f4       	brne	.+16     	; 0x5628 <STEPPER_process_step_mode+0xa6>
    5618:	81 e0       	ldi	r24, 0x01	; 1
    561a:	60 e0       	ldi	r22, 0x00	; 0
    561c:	70 e0       	ldi	r23, 0x00	; 0
    561e:	0e 94 a6 1d 	call	0x3b4c	; 0x3b4c <STEPPER_set_speed>
    5622:	81 e0       	ldi	r24, 0x01	; 1
    5624:	80 93 ea 07 	sts	0x07EA, r24
    5628:	08 95       	ret

0000562a <TMRSRVC_process>:
    562a:	ff 92       	push	r15
    562c:	0f 93       	push	r16
    562e:	1f 93       	push	r17
    5630:	cf 93       	push	r28
    5632:	df 93       	push	r29
    5634:	80 91 27 08 	lds	r24, 0x0827
    5638:	88 23       	and	r24, r24
    563a:	09 f4       	brne	.+2      	; 0x563e <TMRSRVC_process+0x14>
    563c:	59 c0       	rjmp	.+178    	; 0x56f0 <TMRSRVC_process+0xc6>
    563e:	00 91 28 08 	lds	r16, 0x0828
    5642:	10 91 29 08 	lds	r17, 0x0829
    5646:	f8 01       	movw	r30, r16
    5648:	c0 81       	ld	r28, Z
    564a:	d1 81       	ldd	r29, Z+1	; 0x01
    564c:	8c 81       	ldd	r24, Y+4	; 0x04
    564e:	9d 81       	ldd	r25, Y+5	; 0x05
    5650:	01 97       	sbiw	r24, 0x01	; 1
    5652:	9d 83       	std	Y+5, r25	; 0x05
    5654:	8c 83       	std	Y+4, r24	; 0x04
    5656:	18 16       	cp	r1, r24
    5658:	19 06       	cpc	r1, r25
    565a:	0c f4       	brge	.+2      	; 0x565e <TMRSRVC_process+0x34>
    565c:	49 c0       	rjmp	.+146    	; 0x56f0 <TMRSRVC_process+0xc6>
    565e:	89 81       	ldd	r24, Y+1	; 0x01
    5660:	80 ff       	sbrs	r24, 0
    5662:	05 c0       	rjmp	.+10     	; 0x566e <TMRSRVC_process+0x44>
    5664:	8e 81       	ldd	r24, Y+6	; 0x06
    5666:	88 23       	and	r24, r24
    5668:	11 f4       	brne	.+4      	; 0x566e <TMRSRVC_process+0x44>
    566a:	81 e0       	ldi	r24, 0x01	; 1
    566c:	8e 83       	std	Y+6, r24	; 0x06
    566e:	89 81       	ldd	r24, Y+1	; 0x01
    5670:	81 ff       	sbrs	r24, 1
    5672:	03 c0       	rjmp	.+6      	; 0x567a <TMRSRVC_process+0x50>
    5674:	ef 81       	ldd	r30, Y+7	; 0x07
    5676:	f8 85       	ldd	r31, Y+8	; 0x08
    5678:	09 95       	icall
    567a:	80 91 27 08 	lds	r24, 0x0827
    567e:	82 30       	cpi	r24, 0x02	; 2
    5680:	a8 f0       	brcs	.+42     	; 0x56ac <TMRSRVC_process+0x82>
    5682:	f8 01       	movw	r30, r16
    5684:	82 81       	ldd	r24, Z+2	; 0x02
    5686:	93 81       	ldd	r25, Z+3	; 0x03
    5688:	90 93 29 08 	sts	0x0829, r25
    568c:	80 93 28 08 	sts	0x0828, r24
    5690:	13 82       	std	Z+3, r1	; 0x03
    5692:	12 82       	std	Z+2, r1	; 0x02
    5694:	e0 91 00 00 	lds	r30, 0x0000
    5698:	f0 91 01 00 	lds	r31, 0x0001
    569c:	84 81       	ldd	r24, Z+4	; 0x04
    569e:	95 81       	ldd	r25, Z+5	; 0x05
    56a0:	18 16       	cp	r1, r24
    56a2:	19 06       	cpc	r1, r25
    56a4:	3c f0       	brlt	.+14     	; 0x56b4 <TMRSRVC_process+0x8a>
    56a6:	ff 24       	eor	r15, r15
    56a8:	f3 94       	inc	r15
    56aa:	05 c0       	rjmp	.+10     	; 0x56b6 <TMRSRVC_process+0x8c>
    56ac:	10 92 29 08 	sts	0x0829, r1
    56b0:	10 92 28 08 	sts	0x0828, r1
    56b4:	ff 24       	eor	r15, r15
    56b6:	80 91 27 08 	lds	r24, 0x0827
    56ba:	81 50       	subi	r24, 0x01	; 1
    56bc:	80 93 27 08 	sts	0x0827, r24
    56c0:	80 91 27 08 	lds	r24, 0x0827
    56c4:	88 23       	and	r24, r24
    56c6:	11 f4       	brne	.+4      	; 0x56cc <TMRSRVC_process+0xa2>
    56c8:	0e 94 80 2b 	call	0x5700	; 0x5700 <TMRSRVC_stop>
    56cc:	89 81       	ldd	r24, Y+1	; 0x01
    56ce:	82 ff       	sbrs	r24, 2
    56d0:	08 c0       	rjmp	.+16     	; 0x56e2 <TMRSRVC_process+0xb8>
    56d2:	8a 81       	ldd	r24, Y+2	; 0x02
    56d4:	9b 81       	ldd	r25, Y+3	; 0x03
    56d6:	9d 83       	std	Y+5, r25	; 0x05
    56d8:	8c 83       	std	Y+4, r24	; 0x04
    56da:	c8 01       	movw	r24, r16
    56dc:	0e 94 f5 26 	call	0x4dea	; 0x4dea <TMRSRVC_insert>
    56e0:	08 c0       	rjmp	.+16     	; 0x56f2 <TMRSRVC_process+0xc8>
    56e2:	c8 01       	movw	r24, r16
    56e4:	0e 94 62 34 	call	0x68c4	; 0x68c4 <free>
    56e8:	89 81       	ldd	r24, Y+1	; 0x01
    56ea:	8f 7e       	andi	r24, 0xEF	; 239
    56ec:	89 83       	std	Y+1, r24	; 0x01
    56ee:	01 c0       	rjmp	.+2      	; 0x56f2 <TMRSRVC_process+0xc8>
    56f0:	ff 24       	eor	r15, r15
    56f2:	8f 2d       	mov	r24, r15
    56f4:	df 91       	pop	r29
    56f6:	cf 91       	pop	r28
    56f8:	1f 91       	pop	r17
    56fa:	0f 91       	pop	r16
    56fc:	ff 90       	pop	r15
    56fe:	08 95       	ret

00005700 <TMRSRVC_stop>:
    5700:	10 92 fc 04 	sts	0x04FC, r1
    5704:	08 95       	ret

00005706 <STEPPER_process_pwm>:
    5706:	fc 01       	movw	r30, r24
    5708:	80 91 de 07 	lds	r24, 0x07DE
    570c:	82 30       	cpi	r24, 0x02	; 2
    570e:	69 f4       	brne	.+26     	; 0x572a <STEPPER_process_pwm+0x24>
    5710:	80 91 01 05 	lds	r24, 0x0501
    5714:	91 e0       	ldi	r25, 0x01	; 1
    5716:	89 27       	eor	r24, r25
    5718:	80 93 01 05 	sts	0x0501, r24
    571c:	88 23       	and	r24, r24
    571e:	09 f0       	breq	.+2      	; 0x5722 <STEPPER_process_pwm+0x1c>
    5720:	3e c0       	rjmp	.+124    	; 0x579e <STEPPER_process_pwm+0x98>
    5722:	80 81       	ld	r24, Z
    5724:	83 7e       	andi	r24, 0xE3	; 227
    5726:	80 83       	st	Z, r24
    5728:	3a c0       	rjmp	.+116    	; 0x579e <STEPPER_process_pwm+0x98>
    572a:	80 91 bd 07 	lds	r24, 0x07BD
    572e:	90 91 be 07 	lds	r25, 0x07BE
    5732:	c3 97       	sbiw	r24, 0x33	; 51
    5734:	a4 f5       	brge	.+104    	; 0x579e <STEPPER_process_pwm+0x98>
    5736:	66 23       	and	r22, r22
    5738:	d1 f0       	breq	.+52     	; 0x576e <STEPPER_process_pwm+0x68>
    573a:	20 91 bd 07 	lds	r18, 0x07BD
    573e:	30 91 be 07 	lds	r19, 0x07BE
    5742:	80 e6       	ldi	r24, 0x60	; 96
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	bc 01       	movw	r22, r24
    5748:	26 9f       	mul	r18, r22
    574a:	c0 01       	movw	r24, r0
    574c:	27 9f       	mul	r18, r23
    574e:	90 0d       	add	r25, r0
    5750:	36 9f       	mul	r19, r22
    5752:	90 0d       	add	r25, r0
    5754:	11 24       	eor	r1, r1
    5756:	88 0f       	add	r24, r24
    5758:	89 2f       	mov	r24, r25
    575a:	88 1f       	adc	r24, r24
    575c:	99 0b       	sbc	r25, r25
    575e:	90 93 d2 07 	sts	0x07D2, r25
    5762:	80 93 d1 07 	sts	0x07D1, r24
    5766:	81 e0       	ldi	r24, 0x01	; 1
    5768:	80 93 ff 04 	sts	0x04FF, r24
    576c:	18 c0       	rjmp	.+48     	; 0x579e <STEPPER_process_pwm+0x98>
    576e:	80 91 ff 04 	lds	r24, 0x04FF
    5772:	88 23       	and	r24, r24
    5774:	a1 f0       	breq	.+40     	; 0x579e <STEPPER_process_pwm+0x98>
    5776:	80 91 d1 07 	lds	r24, 0x07D1
    577a:	90 91 d2 07 	lds	r25, 0x07D2
    577e:	01 97       	sbiw	r24, 0x01	; 1
    5780:	90 93 d2 07 	sts	0x07D2, r25
    5784:	80 93 d1 07 	sts	0x07D1, r24
    5788:	80 91 d1 07 	lds	r24, 0x07D1
    578c:	90 91 d2 07 	lds	r25, 0x07D2
    5790:	89 2b       	or	r24, r25
    5792:	29 f4       	brne	.+10     	; 0x579e <STEPPER_process_pwm+0x98>
    5794:	80 81       	ld	r24, Z
    5796:	83 7e       	andi	r24, 0xE3	; 227
    5798:	80 83       	st	Z, r24
    579a:	10 92 ff 04 	sts	0x04FF, r1
    579e:	80 91 df 07 	lds	r24, 0x07DF
    57a2:	82 30       	cpi	r24, 0x02	; 2
    57a4:	69 f4       	brne	.+26     	; 0x57c0 <STEPPER_process_pwm+0xba>
    57a6:	80 91 00 05 	lds	r24, 0x0500
    57aa:	91 e0       	ldi	r25, 0x01	; 1
    57ac:	89 27       	eor	r24, r25
    57ae:	80 93 00 05 	sts	0x0500, r24
    57b2:	88 23       	and	r24, r24
    57b4:	09 f0       	breq	.+2      	; 0x57b8 <STEPPER_process_pwm+0xb2>
    57b6:	3e c0       	rjmp	.+124    	; 0x5834 <STEPPER_process_pwm+0x12e>
    57b8:	80 81       	ld	r24, Z
    57ba:	8f 71       	andi	r24, 0x1F	; 31
    57bc:	80 83       	st	Z, r24
    57be:	08 95       	ret
    57c0:	80 91 bf 07 	lds	r24, 0x07BF
    57c4:	90 91 c0 07 	lds	r25, 0x07C0
    57c8:	c3 97       	sbiw	r24, 0x33	; 51
    57ca:	a4 f5       	brge	.+104    	; 0x5834 <STEPPER_process_pwm+0x12e>
    57cc:	44 23       	and	r20, r20
    57ce:	d1 f0       	breq	.+52     	; 0x5804 <STEPPER_process_pwm+0xfe>
    57d0:	20 91 bf 07 	lds	r18, 0x07BF
    57d4:	30 91 c0 07 	lds	r19, 0x07C0
    57d8:	80 e6       	ldi	r24, 0x60	; 96
    57da:	90 e0       	ldi	r25, 0x00	; 0
    57dc:	ac 01       	movw	r20, r24
    57de:	24 9f       	mul	r18, r20
    57e0:	c0 01       	movw	r24, r0
    57e2:	25 9f       	mul	r18, r21
    57e4:	90 0d       	add	r25, r0
    57e6:	34 9f       	mul	r19, r20
    57e8:	90 0d       	add	r25, r0
    57ea:	11 24       	eor	r1, r1
    57ec:	88 0f       	add	r24, r24
    57ee:	89 2f       	mov	r24, r25
    57f0:	88 1f       	adc	r24, r24
    57f2:	99 0b       	sbc	r25, r25
    57f4:	90 93 d4 07 	sts	0x07D4, r25
    57f8:	80 93 d3 07 	sts	0x07D3, r24
    57fc:	81 e0       	ldi	r24, 0x01	; 1
    57fe:	80 93 fe 04 	sts	0x04FE, r24
    5802:	08 95       	ret
    5804:	80 91 fe 04 	lds	r24, 0x04FE
    5808:	88 23       	and	r24, r24
    580a:	a1 f0       	breq	.+40     	; 0x5834 <STEPPER_process_pwm+0x12e>
    580c:	80 91 d3 07 	lds	r24, 0x07D3
    5810:	90 91 d4 07 	lds	r25, 0x07D4
    5814:	01 97       	sbiw	r24, 0x01	; 1
    5816:	90 93 d4 07 	sts	0x07D4, r25
    581a:	80 93 d3 07 	sts	0x07D3, r24
    581e:	80 91 d3 07 	lds	r24, 0x07D3
    5822:	90 91 d4 07 	lds	r25, 0x07D4
    5826:	89 2b       	or	r24, r25
    5828:	29 f4       	brne	.+10     	; 0x5834 <STEPPER_process_pwm+0x12e>
    582a:	80 81       	ld	r24, Z
    582c:	8f 71       	andi	r24, 0x1F	; 31
    582e:	80 83       	st	Z, r24
    5830:	10 92 fe 04 	sts	0x04FE, r1
    5834:	08 95       	ret

00005836 <__subsf3>:
    5836:	50 58       	subi	r21, 0x80	; 128

00005838 <__addsf3>:
    5838:	bb 27       	eor	r27, r27
    583a:	aa 27       	eor	r26, r26
    583c:	0e d0       	rcall	.+28     	; 0x585a <__addsf3x>
    583e:	75 c1       	rjmp	.+746    	; 0x5b2a <__fp_round>
    5840:	66 d1       	rcall	.+716    	; 0x5b0e <__fp_pscA>
    5842:	30 f0       	brcs	.+12     	; 0x5850 <__addsf3+0x18>
    5844:	6b d1       	rcall	.+726    	; 0x5b1c <__fp_pscB>
    5846:	20 f0       	brcs	.+8      	; 0x5850 <__addsf3+0x18>
    5848:	31 f4       	brne	.+12     	; 0x5856 <__addsf3+0x1e>
    584a:	9f 3f       	cpi	r25, 0xFF	; 255
    584c:	11 f4       	brne	.+4      	; 0x5852 <__addsf3+0x1a>
    584e:	1e f4       	brtc	.+6      	; 0x5856 <__addsf3+0x1e>
    5850:	5b c1       	rjmp	.+694    	; 0x5b08 <__fp_nan>
    5852:	0e f4       	brtc	.+2      	; 0x5856 <__addsf3+0x1e>
    5854:	e0 95       	com	r30
    5856:	e7 fb       	bst	r30, 7
    5858:	51 c1       	rjmp	.+674    	; 0x5afc <__fp_inf>

0000585a <__addsf3x>:
    585a:	e9 2f       	mov	r30, r25
    585c:	77 d1       	rcall	.+750    	; 0x5b4c <__fp_split3>
    585e:	80 f3       	brcs	.-32     	; 0x5840 <__addsf3+0x8>
    5860:	ba 17       	cp	r27, r26
    5862:	62 07       	cpc	r22, r18
    5864:	73 07       	cpc	r23, r19
    5866:	84 07       	cpc	r24, r20
    5868:	95 07       	cpc	r25, r21
    586a:	18 f0       	brcs	.+6      	; 0x5872 <__addsf3x+0x18>
    586c:	71 f4       	brne	.+28     	; 0x588a <__addsf3x+0x30>
    586e:	9e f5       	brtc	.+102    	; 0x58d6 <__addsf3x+0x7c>
    5870:	8f c1       	rjmp	.+798    	; 0x5b90 <__fp_zero>
    5872:	0e f4       	brtc	.+2      	; 0x5876 <__addsf3x+0x1c>
    5874:	e0 95       	com	r30
    5876:	0b 2e       	mov	r0, r27
    5878:	ba 2f       	mov	r27, r26
    587a:	a0 2d       	mov	r26, r0
    587c:	0b 01       	movw	r0, r22
    587e:	b9 01       	movw	r22, r18
    5880:	90 01       	movw	r18, r0
    5882:	0c 01       	movw	r0, r24
    5884:	ca 01       	movw	r24, r20
    5886:	a0 01       	movw	r20, r0
    5888:	11 24       	eor	r1, r1
    588a:	ff 27       	eor	r31, r31
    588c:	59 1b       	sub	r21, r25
    588e:	99 f0       	breq	.+38     	; 0x58b6 <__addsf3x+0x5c>
    5890:	59 3f       	cpi	r21, 0xF9	; 249
    5892:	50 f4       	brcc	.+20     	; 0x58a8 <__addsf3x+0x4e>
    5894:	50 3e       	cpi	r21, 0xE0	; 224
    5896:	68 f1       	brcs	.+90     	; 0x58f2 <__addsf3x+0x98>
    5898:	1a 16       	cp	r1, r26
    589a:	f0 40       	sbci	r31, 0x00	; 0
    589c:	a2 2f       	mov	r26, r18
    589e:	23 2f       	mov	r18, r19
    58a0:	34 2f       	mov	r19, r20
    58a2:	44 27       	eor	r20, r20
    58a4:	58 5f       	subi	r21, 0xF8	; 248
    58a6:	f3 cf       	rjmp	.-26     	; 0x588e <__addsf3x+0x34>
    58a8:	46 95       	lsr	r20
    58aa:	37 95       	ror	r19
    58ac:	27 95       	ror	r18
    58ae:	a7 95       	ror	r26
    58b0:	f0 40       	sbci	r31, 0x00	; 0
    58b2:	53 95       	inc	r21
    58b4:	c9 f7       	brne	.-14     	; 0x58a8 <__addsf3x+0x4e>
    58b6:	7e f4       	brtc	.+30     	; 0x58d6 <__addsf3x+0x7c>
    58b8:	1f 16       	cp	r1, r31
    58ba:	ba 0b       	sbc	r27, r26
    58bc:	62 0b       	sbc	r22, r18
    58be:	73 0b       	sbc	r23, r19
    58c0:	84 0b       	sbc	r24, r20
    58c2:	ba f0       	brmi	.+46     	; 0x58f2 <__addsf3x+0x98>
    58c4:	91 50       	subi	r25, 0x01	; 1
    58c6:	a1 f0       	breq	.+40     	; 0x58f0 <__addsf3x+0x96>
    58c8:	ff 0f       	add	r31, r31
    58ca:	bb 1f       	adc	r27, r27
    58cc:	66 1f       	adc	r22, r22
    58ce:	77 1f       	adc	r23, r23
    58d0:	88 1f       	adc	r24, r24
    58d2:	c2 f7       	brpl	.-16     	; 0x58c4 <__addsf3x+0x6a>
    58d4:	0e c0       	rjmp	.+28     	; 0x58f2 <__addsf3x+0x98>
    58d6:	ba 0f       	add	r27, r26
    58d8:	62 1f       	adc	r22, r18
    58da:	73 1f       	adc	r23, r19
    58dc:	84 1f       	adc	r24, r20
    58de:	48 f4       	brcc	.+18     	; 0x58f2 <__addsf3x+0x98>
    58e0:	87 95       	ror	r24
    58e2:	77 95       	ror	r23
    58e4:	67 95       	ror	r22
    58e6:	b7 95       	ror	r27
    58e8:	f7 95       	ror	r31
    58ea:	9e 3f       	cpi	r25, 0xFE	; 254
    58ec:	08 f0       	brcs	.+2      	; 0x58f0 <__addsf3x+0x96>
    58ee:	b3 cf       	rjmp	.-154    	; 0x5856 <__addsf3+0x1e>
    58f0:	93 95       	inc	r25
    58f2:	88 0f       	add	r24, r24
    58f4:	08 f0       	brcs	.+2      	; 0x58f8 <__addsf3x+0x9e>
    58f6:	99 27       	eor	r25, r25
    58f8:	ee 0f       	add	r30, r30
    58fa:	97 95       	ror	r25
    58fc:	87 95       	ror	r24
    58fe:	08 95       	ret

00005900 <__cmpsf2>:
    5900:	d9 d0       	rcall	.+434    	; 0x5ab4 <__fp_cmp>
    5902:	08 f4       	brcc	.+2      	; 0x5906 <__cmpsf2+0x6>
    5904:	81 e0       	ldi	r24, 0x01	; 1
    5906:	08 95       	ret

00005908 <__divsf3>:
    5908:	0c d0       	rcall	.+24     	; 0x5922 <__divsf3x>
    590a:	0f c1       	rjmp	.+542    	; 0x5b2a <__fp_round>
    590c:	07 d1       	rcall	.+526    	; 0x5b1c <__fp_pscB>
    590e:	40 f0       	brcs	.+16     	; 0x5920 <__divsf3+0x18>
    5910:	fe d0       	rcall	.+508    	; 0x5b0e <__fp_pscA>
    5912:	30 f0       	brcs	.+12     	; 0x5920 <__divsf3+0x18>
    5914:	21 f4       	brne	.+8      	; 0x591e <__divsf3+0x16>
    5916:	5f 3f       	cpi	r21, 0xFF	; 255
    5918:	19 f0       	breq	.+6      	; 0x5920 <__divsf3+0x18>
    591a:	f0 c0       	rjmp	.+480    	; 0x5afc <__fp_inf>
    591c:	51 11       	cpse	r21, r1
    591e:	39 c1       	rjmp	.+626    	; 0x5b92 <__fp_szero>
    5920:	f3 c0       	rjmp	.+486    	; 0x5b08 <__fp_nan>

00005922 <__divsf3x>:
    5922:	14 d1       	rcall	.+552    	; 0x5b4c <__fp_split3>
    5924:	98 f3       	brcs	.-26     	; 0x590c <__divsf3+0x4>

00005926 <__divsf3_pse>:
    5926:	99 23       	and	r25, r25
    5928:	c9 f3       	breq	.-14     	; 0x591c <__divsf3+0x14>
    592a:	55 23       	and	r21, r21
    592c:	b1 f3       	breq	.-20     	; 0x591a <__divsf3+0x12>
    592e:	95 1b       	sub	r25, r21
    5930:	55 0b       	sbc	r21, r21
    5932:	bb 27       	eor	r27, r27
    5934:	aa 27       	eor	r26, r26
    5936:	62 17       	cp	r22, r18
    5938:	73 07       	cpc	r23, r19
    593a:	84 07       	cpc	r24, r20
    593c:	38 f0       	brcs	.+14     	; 0x594c <__divsf3_pse+0x26>
    593e:	9f 5f       	subi	r25, 0xFF	; 255
    5940:	5f 4f       	sbci	r21, 0xFF	; 255
    5942:	22 0f       	add	r18, r18
    5944:	33 1f       	adc	r19, r19
    5946:	44 1f       	adc	r20, r20
    5948:	aa 1f       	adc	r26, r26
    594a:	a9 f3       	breq	.-22     	; 0x5936 <__divsf3_pse+0x10>
    594c:	33 d0       	rcall	.+102    	; 0x59b4 <__divsf3_pse+0x8e>
    594e:	0e 2e       	mov	r0, r30
    5950:	3a f0       	brmi	.+14     	; 0x5960 <__divsf3_pse+0x3a>
    5952:	e0 e8       	ldi	r30, 0x80	; 128
    5954:	30 d0       	rcall	.+96     	; 0x59b6 <__divsf3_pse+0x90>
    5956:	91 50       	subi	r25, 0x01	; 1
    5958:	50 40       	sbci	r21, 0x00	; 0
    595a:	e6 95       	lsr	r30
    595c:	00 1c       	adc	r0, r0
    595e:	ca f7       	brpl	.-14     	; 0x5952 <__divsf3_pse+0x2c>
    5960:	29 d0       	rcall	.+82     	; 0x59b4 <__divsf3_pse+0x8e>
    5962:	fe 2f       	mov	r31, r30
    5964:	27 d0       	rcall	.+78     	; 0x59b4 <__divsf3_pse+0x8e>
    5966:	66 0f       	add	r22, r22
    5968:	77 1f       	adc	r23, r23
    596a:	88 1f       	adc	r24, r24
    596c:	bb 1f       	adc	r27, r27
    596e:	26 17       	cp	r18, r22
    5970:	37 07       	cpc	r19, r23
    5972:	48 07       	cpc	r20, r24
    5974:	ab 07       	cpc	r26, r27
    5976:	b0 e8       	ldi	r27, 0x80	; 128
    5978:	09 f0       	breq	.+2      	; 0x597c <__divsf3_pse+0x56>
    597a:	bb 0b       	sbc	r27, r27
    597c:	80 2d       	mov	r24, r0
    597e:	bf 01       	movw	r22, r30
    5980:	ff 27       	eor	r31, r31
    5982:	93 58       	subi	r25, 0x83	; 131
    5984:	5f 4f       	sbci	r21, 0xFF	; 255
    5986:	2a f0       	brmi	.+10     	; 0x5992 <__divsf3_pse+0x6c>
    5988:	9e 3f       	cpi	r25, 0xFE	; 254
    598a:	51 05       	cpc	r21, r1
    598c:	68 f0       	brcs	.+26     	; 0x59a8 <__divsf3_pse+0x82>
    598e:	b6 c0       	rjmp	.+364    	; 0x5afc <__fp_inf>
    5990:	00 c1       	rjmp	.+512    	; 0x5b92 <__fp_szero>
    5992:	5f 3f       	cpi	r21, 0xFF	; 255
    5994:	ec f3       	brlt	.-6      	; 0x5990 <__divsf3_pse+0x6a>
    5996:	98 3e       	cpi	r25, 0xE8	; 232
    5998:	dc f3       	brlt	.-10     	; 0x5990 <__divsf3_pse+0x6a>
    599a:	86 95       	lsr	r24
    599c:	77 95       	ror	r23
    599e:	67 95       	ror	r22
    59a0:	b7 95       	ror	r27
    59a2:	f7 95       	ror	r31
    59a4:	9f 5f       	subi	r25, 0xFF	; 255
    59a6:	c9 f7       	brne	.-14     	; 0x599a <__divsf3_pse+0x74>
    59a8:	88 0f       	add	r24, r24
    59aa:	91 1d       	adc	r25, r1
    59ac:	96 95       	lsr	r25
    59ae:	87 95       	ror	r24
    59b0:	97 f9       	bld	r25, 7
    59b2:	08 95       	ret
    59b4:	e1 e0       	ldi	r30, 0x01	; 1
    59b6:	66 0f       	add	r22, r22
    59b8:	77 1f       	adc	r23, r23
    59ba:	88 1f       	adc	r24, r24
    59bc:	bb 1f       	adc	r27, r27
    59be:	62 17       	cp	r22, r18
    59c0:	73 07       	cpc	r23, r19
    59c2:	84 07       	cpc	r24, r20
    59c4:	ba 07       	cpc	r27, r26
    59c6:	20 f0       	brcs	.+8      	; 0x59d0 <__divsf3_pse+0xaa>
    59c8:	62 1b       	sub	r22, r18
    59ca:	73 0b       	sbc	r23, r19
    59cc:	84 0b       	sbc	r24, r20
    59ce:	ba 0b       	sbc	r27, r26
    59d0:	ee 1f       	adc	r30, r30
    59d2:	88 f7       	brcc	.-30     	; 0x59b6 <__divsf3_pse+0x90>
    59d4:	e0 95       	com	r30
    59d6:	08 95       	ret

000059d8 <__fixsfsi>:
    59d8:	04 d0       	rcall	.+8      	; 0x59e2 <__fixunssfsi>
    59da:	68 94       	set
    59dc:	b1 11       	cpse	r27, r1
    59de:	d9 c0       	rjmp	.+434    	; 0x5b92 <__fp_szero>
    59e0:	08 95       	ret

000059e2 <__fixunssfsi>:
    59e2:	bc d0       	rcall	.+376    	; 0x5b5c <__fp_splitA>
    59e4:	88 f0       	brcs	.+34     	; 0x5a08 <__fixunssfsi+0x26>
    59e6:	9f 57       	subi	r25, 0x7F	; 127
    59e8:	90 f0       	brcs	.+36     	; 0x5a0e <__fixunssfsi+0x2c>
    59ea:	b9 2f       	mov	r27, r25
    59ec:	99 27       	eor	r25, r25
    59ee:	b7 51       	subi	r27, 0x17	; 23
    59f0:	a0 f0       	brcs	.+40     	; 0x5a1a <__fixunssfsi+0x38>
    59f2:	d1 f0       	breq	.+52     	; 0x5a28 <__fixunssfsi+0x46>
    59f4:	66 0f       	add	r22, r22
    59f6:	77 1f       	adc	r23, r23
    59f8:	88 1f       	adc	r24, r24
    59fa:	99 1f       	adc	r25, r25
    59fc:	1a f0       	brmi	.+6      	; 0x5a04 <__fixunssfsi+0x22>
    59fe:	ba 95       	dec	r27
    5a00:	c9 f7       	brne	.-14     	; 0x59f4 <__fixunssfsi+0x12>
    5a02:	12 c0       	rjmp	.+36     	; 0x5a28 <__fixunssfsi+0x46>
    5a04:	b1 30       	cpi	r27, 0x01	; 1
    5a06:	81 f0       	breq	.+32     	; 0x5a28 <__fixunssfsi+0x46>
    5a08:	c3 d0       	rcall	.+390    	; 0x5b90 <__fp_zero>
    5a0a:	b1 e0       	ldi	r27, 0x01	; 1
    5a0c:	08 95       	ret
    5a0e:	c0 c0       	rjmp	.+384    	; 0x5b90 <__fp_zero>
    5a10:	67 2f       	mov	r22, r23
    5a12:	78 2f       	mov	r23, r24
    5a14:	88 27       	eor	r24, r24
    5a16:	b8 5f       	subi	r27, 0xF8	; 248
    5a18:	39 f0       	breq	.+14     	; 0x5a28 <__fixunssfsi+0x46>
    5a1a:	b9 3f       	cpi	r27, 0xF9	; 249
    5a1c:	cc f3       	brlt	.-14     	; 0x5a10 <__fixunssfsi+0x2e>
    5a1e:	86 95       	lsr	r24
    5a20:	77 95       	ror	r23
    5a22:	67 95       	ror	r22
    5a24:	b3 95       	inc	r27
    5a26:	d9 f7       	brne	.-10     	; 0x5a1e <__fixunssfsi+0x3c>
    5a28:	3e f4       	brtc	.+14     	; 0x5a38 <__fixunssfsi+0x56>
    5a2a:	90 95       	com	r25
    5a2c:	80 95       	com	r24
    5a2e:	70 95       	com	r23
    5a30:	61 95       	neg	r22
    5a32:	7f 4f       	sbci	r23, 0xFF	; 255
    5a34:	8f 4f       	sbci	r24, 0xFF	; 255
    5a36:	9f 4f       	sbci	r25, 0xFF	; 255
    5a38:	08 95       	ret

00005a3a <__floatunsisf>:
    5a3a:	e8 94       	clt
    5a3c:	09 c0       	rjmp	.+18     	; 0x5a50 <__floatsisf+0x12>

00005a3e <__floatsisf>:
    5a3e:	97 fb       	bst	r25, 7
    5a40:	3e f4       	brtc	.+14     	; 0x5a50 <__floatsisf+0x12>
    5a42:	90 95       	com	r25
    5a44:	80 95       	com	r24
    5a46:	70 95       	com	r23
    5a48:	61 95       	neg	r22
    5a4a:	7f 4f       	sbci	r23, 0xFF	; 255
    5a4c:	8f 4f       	sbci	r24, 0xFF	; 255
    5a4e:	9f 4f       	sbci	r25, 0xFF	; 255
    5a50:	99 23       	and	r25, r25
    5a52:	a9 f0       	breq	.+42     	; 0x5a7e <__floatsisf+0x40>
    5a54:	f9 2f       	mov	r31, r25
    5a56:	96 e9       	ldi	r25, 0x96	; 150
    5a58:	bb 27       	eor	r27, r27
    5a5a:	93 95       	inc	r25
    5a5c:	f6 95       	lsr	r31
    5a5e:	87 95       	ror	r24
    5a60:	77 95       	ror	r23
    5a62:	67 95       	ror	r22
    5a64:	b7 95       	ror	r27
    5a66:	f1 11       	cpse	r31, r1
    5a68:	f8 cf       	rjmp	.-16     	; 0x5a5a <__floatsisf+0x1c>
    5a6a:	fa f4       	brpl	.+62     	; 0x5aaa <__floatsisf+0x6c>
    5a6c:	bb 0f       	add	r27, r27
    5a6e:	11 f4       	brne	.+4      	; 0x5a74 <__floatsisf+0x36>
    5a70:	60 ff       	sbrs	r22, 0
    5a72:	1b c0       	rjmp	.+54     	; 0x5aaa <__floatsisf+0x6c>
    5a74:	6f 5f       	subi	r22, 0xFF	; 255
    5a76:	7f 4f       	sbci	r23, 0xFF	; 255
    5a78:	8f 4f       	sbci	r24, 0xFF	; 255
    5a7a:	9f 4f       	sbci	r25, 0xFF	; 255
    5a7c:	16 c0       	rjmp	.+44     	; 0x5aaa <__floatsisf+0x6c>
    5a7e:	88 23       	and	r24, r24
    5a80:	11 f0       	breq	.+4      	; 0x5a86 <__floatsisf+0x48>
    5a82:	96 e9       	ldi	r25, 0x96	; 150
    5a84:	11 c0       	rjmp	.+34     	; 0x5aa8 <__floatsisf+0x6a>
    5a86:	77 23       	and	r23, r23
    5a88:	21 f0       	breq	.+8      	; 0x5a92 <__floatsisf+0x54>
    5a8a:	9e e8       	ldi	r25, 0x8E	; 142
    5a8c:	87 2f       	mov	r24, r23
    5a8e:	76 2f       	mov	r23, r22
    5a90:	05 c0       	rjmp	.+10     	; 0x5a9c <__floatsisf+0x5e>
    5a92:	66 23       	and	r22, r22
    5a94:	71 f0       	breq	.+28     	; 0x5ab2 <__floatsisf+0x74>
    5a96:	96 e8       	ldi	r25, 0x86	; 134
    5a98:	86 2f       	mov	r24, r22
    5a9a:	70 e0       	ldi	r23, 0x00	; 0
    5a9c:	60 e0       	ldi	r22, 0x00	; 0
    5a9e:	2a f0       	brmi	.+10     	; 0x5aaa <__floatsisf+0x6c>
    5aa0:	9a 95       	dec	r25
    5aa2:	66 0f       	add	r22, r22
    5aa4:	77 1f       	adc	r23, r23
    5aa6:	88 1f       	adc	r24, r24
    5aa8:	da f7       	brpl	.-10     	; 0x5aa0 <__floatsisf+0x62>
    5aaa:	88 0f       	add	r24, r24
    5aac:	96 95       	lsr	r25
    5aae:	87 95       	ror	r24
    5ab0:	97 f9       	bld	r25, 7
    5ab2:	08 95       	ret

00005ab4 <__fp_cmp>:
    5ab4:	99 0f       	add	r25, r25
    5ab6:	00 08       	sbc	r0, r0
    5ab8:	55 0f       	add	r21, r21
    5aba:	aa 0b       	sbc	r26, r26
    5abc:	e0 e8       	ldi	r30, 0x80	; 128
    5abe:	fe ef       	ldi	r31, 0xFE	; 254
    5ac0:	16 16       	cp	r1, r22
    5ac2:	17 06       	cpc	r1, r23
    5ac4:	e8 07       	cpc	r30, r24
    5ac6:	f9 07       	cpc	r31, r25
    5ac8:	c0 f0       	brcs	.+48     	; 0x5afa <__fp_cmp+0x46>
    5aca:	12 16       	cp	r1, r18
    5acc:	13 06       	cpc	r1, r19
    5ace:	e4 07       	cpc	r30, r20
    5ad0:	f5 07       	cpc	r31, r21
    5ad2:	98 f0       	brcs	.+38     	; 0x5afa <__fp_cmp+0x46>
    5ad4:	62 1b       	sub	r22, r18
    5ad6:	73 0b       	sbc	r23, r19
    5ad8:	84 0b       	sbc	r24, r20
    5ada:	95 0b       	sbc	r25, r21
    5adc:	39 f4       	brne	.+14     	; 0x5aec <__fp_cmp+0x38>
    5ade:	0a 26       	eor	r0, r26
    5ae0:	61 f0       	breq	.+24     	; 0x5afa <__fp_cmp+0x46>
    5ae2:	23 2b       	or	r18, r19
    5ae4:	24 2b       	or	r18, r20
    5ae6:	25 2b       	or	r18, r21
    5ae8:	21 f4       	brne	.+8      	; 0x5af2 <__fp_cmp+0x3e>
    5aea:	08 95       	ret
    5aec:	0a 26       	eor	r0, r26
    5aee:	09 f4       	brne	.+2      	; 0x5af2 <__fp_cmp+0x3e>
    5af0:	a1 40       	sbci	r26, 0x01	; 1
    5af2:	a6 95       	lsr	r26
    5af4:	8f ef       	ldi	r24, 0xFF	; 255
    5af6:	81 1d       	adc	r24, r1
    5af8:	81 1d       	adc	r24, r1
    5afa:	08 95       	ret

00005afc <__fp_inf>:
    5afc:	97 f9       	bld	r25, 7
    5afe:	9f 67       	ori	r25, 0x7F	; 127
    5b00:	80 e8       	ldi	r24, 0x80	; 128
    5b02:	70 e0       	ldi	r23, 0x00	; 0
    5b04:	60 e0       	ldi	r22, 0x00	; 0
    5b06:	08 95       	ret

00005b08 <__fp_nan>:
    5b08:	9f ef       	ldi	r25, 0xFF	; 255
    5b0a:	80 ec       	ldi	r24, 0xC0	; 192
    5b0c:	08 95       	ret

00005b0e <__fp_pscA>:
    5b0e:	00 24       	eor	r0, r0
    5b10:	0a 94       	dec	r0
    5b12:	16 16       	cp	r1, r22
    5b14:	17 06       	cpc	r1, r23
    5b16:	18 06       	cpc	r1, r24
    5b18:	09 06       	cpc	r0, r25
    5b1a:	08 95       	ret

00005b1c <__fp_pscB>:
    5b1c:	00 24       	eor	r0, r0
    5b1e:	0a 94       	dec	r0
    5b20:	12 16       	cp	r1, r18
    5b22:	13 06       	cpc	r1, r19
    5b24:	14 06       	cpc	r1, r20
    5b26:	05 06       	cpc	r0, r21
    5b28:	08 95       	ret

00005b2a <__fp_round>:
    5b2a:	09 2e       	mov	r0, r25
    5b2c:	03 94       	inc	r0
    5b2e:	00 0c       	add	r0, r0
    5b30:	11 f4       	brne	.+4      	; 0x5b36 <__fp_round+0xc>
    5b32:	88 23       	and	r24, r24
    5b34:	52 f0       	brmi	.+20     	; 0x5b4a <__fp_round+0x20>
    5b36:	bb 0f       	add	r27, r27
    5b38:	40 f4       	brcc	.+16     	; 0x5b4a <__fp_round+0x20>
    5b3a:	bf 2b       	or	r27, r31
    5b3c:	11 f4       	brne	.+4      	; 0x5b42 <__fp_round+0x18>
    5b3e:	60 ff       	sbrs	r22, 0
    5b40:	04 c0       	rjmp	.+8      	; 0x5b4a <__fp_round+0x20>
    5b42:	6f 5f       	subi	r22, 0xFF	; 255
    5b44:	7f 4f       	sbci	r23, 0xFF	; 255
    5b46:	8f 4f       	sbci	r24, 0xFF	; 255
    5b48:	9f 4f       	sbci	r25, 0xFF	; 255
    5b4a:	08 95       	ret

00005b4c <__fp_split3>:
    5b4c:	57 fd       	sbrc	r21, 7
    5b4e:	90 58       	subi	r25, 0x80	; 128
    5b50:	44 0f       	add	r20, r20
    5b52:	55 1f       	adc	r21, r21
    5b54:	59 f0       	breq	.+22     	; 0x5b6c <__fp_splitA+0x10>
    5b56:	5f 3f       	cpi	r21, 0xFF	; 255
    5b58:	71 f0       	breq	.+28     	; 0x5b76 <__fp_splitA+0x1a>
    5b5a:	47 95       	ror	r20

00005b5c <__fp_splitA>:
    5b5c:	88 0f       	add	r24, r24
    5b5e:	97 fb       	bst	r25, 7
    5b60:	99 1f       	adc	r25, r25
    5b62:	61 f0       	breq	.+24     	; 0x5b7c <__fp_splitA+0x20>
    5b64:	9f 3f       	cpi	r25, 0xFF	; 255
    5b66:	79 f0       	breq	.+30     	; 0x5b86 <__fp_splitA+0x2a>
    5b68:	87 95       	ror	r24
    5b6a:	08 95       	ret
    5b6c:	12 16       	cp	r1, r18
    5b6e:	13 06       	cpc	r1, r19
    5b70:	14 06       	cpc	r1, r20
    5b72:	55 1f       	adc	r21, r21
    5b74:	f2 cf       	rjmp	.-28     	; 0x5b5a <__fp_split3+0xe>
    5b76:	46 95       	lsr	r20
    5b78:	f1 df       	rcall	.-30     	; 0x5b5c <__fp_splitA>
    5b7a:	08 c0       	rjmp	.+16     	; 0x5b8c <__fp_splitA+0x30>
    5b7c:	16 16       	cp	r1, r22
    5b7e:	17 06       	cpc	r1, r23
    5b80:	18 06       	cpc	r1, r24
    5b82:	99 1f       	adc	r25, r25
    5b84:	f1 cf       	rjmp	.-30     	; 0x5b68 <__fp_splitA+0xc>
    5b86:	86 95       	lsr	r24
    5b88:	71 05       	cpc	r23, r1
    5b8a:	61 05       	cpc	r22, r1
    5b8c:	08 94       	sec
    5b8e:	08 95       	ret

00005b90 <__fp_zero>:
    5b90:	e8 94       	clt

00005b92 <__fp_szero>:
    5b92:	bb 27       	eor	r27, r27
    5b94:	66 27       	eor	r22, r22
    5b96:	77 27       	eor	r23, r23
    5b98:	cb 01       	movw	r24, r22
    5b9a:	97 f9       	bld	r25, 7
    5b9c:	08 95       	ret

00005b9e <__gesf2>:
    5b9e:	8a df       	rcall	.-236    	; 0x5ab4 <__fp_cmp>
    5ba0:	08 f4       	brcc	.+2      	; 0x5ba4 <__gesf2+0x6>
    5ba2:	8f ef       	ldi	r24, 0xFF	; 255
    5ba4:	08 95       	ret

00005ba6 <lrint>:
    5ba6:	da df       	rcall	.-76     	; 0x5b5c <__fp_splitA>
    5ba8:	a8 f1       	brcs	.+106    	; 0x5c14 <lrint+0x6e>
    5baa:	9e 57       	subi	r25, 0x7E	; 126
    5bac:	a8 f1       	brcs	.+106    	; 0x5c18 <lrint+0x72>
    5bae:	98 51       	subi	r25, 0x18	; 24
    5bb0:	60 f0       	brcs	.+24     	; 0x5bca <lrint+0x24>
    5bb2:	39 f1       	breq	.+78     	; 0x5c02 <lrint+0x5c>
    5bb4:	98 30       	cpi	r25, 0x08	; 8
    5bb6:	70 f5       	brcc	.+92     	; 0x5c14 <lrint+0x6e>
    5bb8:	09 2e       	mov	r0, r25
    5bba:	99 27       	eor	r25, r25
    5bbc:	66 0f       	add	r22, r22
    5bbe:	77 1f       	adc	r23, r23
    5bc0:	88 1f       	adc	r24, r24
    5bc2:	99 1f       	adc	r25, r25
    5bc4:	0a 94       	dec	r0
    5bc6:	d1 f7       	brne	.-12     	; 0x5bbc <lrint+0x16>
    5bc8:	1c c0       	rjmp	.+56     	; 0x5c02 <lrint+0x5c>
    5bca:	bb 27       	eor	r27, r27
    5bcc:	99 3f       	cpi	r25, 0xF9	; 249
    5bce:	4c f4       	brge	.+18     	; 0x5be2 <lrint+0x3c>
    5bd0:	b1 11       	cpse	r27, r1
    5bd2:	b1 e0       	ldi	r27, 0x01	; 1
    5bd4:	b6 2b       	or	r27, r22
    5bd6:	67 2f       	mov	r22, r23
    5bd8:	78 2f       	mov	r23, r24
    5bda:	88 27       	eor	r24, r24
    5bdc:	98 5f       	subi	r25, 0xF8	; 248
    5bde:	b1 f7       	brne	.-20     	; 0x5bcc <lrint+0x26>
    5be0:	08 c0       	rjmp	.+16     	; 0x5bf2 <lrint+0x4c>
    5be2:	86 95       	lsr	r24
    5be4:	77 95       	ror	r23
    5be6:	67 95       	ror	r22
    5be8:	b7 95       	ror	r27
    5bea:	08 f4       	brcc	.+2      	; 0x5bee <lrint+0x48>
    5bec:	b1 60       	ori	r27, 0x01	; 1
    5bee:	93 95       	inc	r25
    5bf0:	c1 f7       	brne	.-16     	; 0x5be2 <lrint+0x3c>
    5bf2:	bb 0f       	add	r27, r27
    5bf4:	30 f4       	brcc	.+12     	; 0x5c02 <lrint+0x5c>
    5bf6:	11 f4       	brne	.+4      	; 0x5bfc <lrint+0x56>
    5bf8:	60 ff       	sbrs	r22, 0
    5bfa:	03 c0       	rjmp	.+6      	; 0x5c02 <lrint+0x5c>
    5bfc:	6f 5f       	subi	r22, 0xFF	; 255
    5bfe:	7f 4f       	sbci	r23, 0xFF	; 255
    5c00:	8f 4f       	sbci	r24, 0xFF	; 255
    5c02:	3e f4       	brtc	.+14     	; 0x5c12 <lrint+0x6c>
    5c04:	90 95       	com	r25
    5c06:	80 95       	com	r24
    5c08:	70 95       	com	r23
    5c0a:	61 95       	neg	r22
    5c0c:	7f 4f       	sbci	r23, 0xFF	; 255
    5c0e:	8f 4f       	sbci	r24, 0xFF	; 255
    5c10:	9f 4f       	sbci	r25, 0xFF	; 255
    5c12:	08 95       	ret
    5c14:	68 94       	set
    5c16:	bd cf       	rjmp	.-134    	; 0x5b92 <__fp_szero>
    5c18:	bb cf       	rjmp	.-138    	; 0x5b90 <__fp_zero>

00005c1a <__mulsf3>:
    5c1a:	0b d0       	rcall	.+22     	; 0x5c32 <__mulsf3x>
    5c1c:	86 cf       	rjmp	.-244    	; 0x5b2a <__fp_round>
    5c1e:	77 df       	rcall	.-274    	; 0x5b0e <__fp_pscA>
    5c20:	28 f0       	brcs	.+10     	; 0x5c2c <__mulsf3+0x12>
    5c22:	7c df       	rcall	.-264    	; 0x5b1c <__fp_pscB>
    5c24:	18 f0       	brcs	.+6      	; 0x5c2c <__mulsf3+0x12>
    5c26:	95 23       	and	r25, r21
    5c28:	09 f0       	breq	.+2      	; 0x5c2c <__mulsf3+0x12>
    5c2a:	68 cf       	rjmp	.-304    	; 0x5afc <__fp_inf>
    5c2c:	6d cf       	rjmp	.-294    	; 0x5b08 <__fp_nan>
    5c2e:	11 24       	eor	r1, r1
    5c30:	b0 cf       	rjmp	.-160    	; 0x5b92 <__fp_szero>

00005c32 <__mulsf3x>:
    5c32:	8c df       	rcall	.-232    	; 0x5b4c <__fp_split3>
    5c34:	a0 f3       	brcs	.-24     	; 0x5c1e <__mulsf3+0x4>

00005c36 <__mulsf3_pse>:
    5c36:	95 9f       	mul	r25, r21
    5c38:	d1 f3       	breq	.-12     	; 0x5c2e <__mulsf3+0x14>
    5c3a:	95 0f       	add	r25, r21
    5c3c:	50 e0       	ldi	r21, 0x00	; 0
    5c3e:	55 1f       	adc	r21, r21
    5c40:	62 9f       	mul	r22, r18
    5c42:	f0 01       	movw	r30, r0
    5c44:	72 9f       	mul	r23, r18
    5c46:	bb 27       	eor	r27, r27
    5c48:	f0 0d       	add	r31, r0
    5c4a:	b1 1d       	adc	r27, r1
    5c4c:	63 9f       	mul	r22, r19
    5c4e:	aa 27       	eor	r26, r26
    5c50:	f0 0d       	add	r31, r0
    5c52:	b1 1d       	adc	r27, r1
    5c54:	aa 1f       	adc	r26, r26
    5c56:	64 9f       	mul	r22, r20
    5c58:	66 27       	eor	r22, r22
    5c5a:	b0 0d       	add	r27, r0
    5c5c:	a1 1d       	adc	r26, r1
    5c5e:	66 1f       	adc	r22, r22
    5c60:	82 9f       	mul	r24, r18
    5c62:	22 27       	eor	r18, r18
    5c64:	b0 0d       	add	r27, r0
    5c66:	a1 1d       	adc	r26, r1
    5c68:	62 1f       	adc	r22, r18
    5c6a:	73 9f       	mul	r23, r19
    5c6c:	b0 0d       	add	r27, r0
    5c6e:	a1 1d       	adc	r26, r1
    5c70:	62 1f       	adc	r22, r18
    5c72:	83 9f       	mul	r24, r19
    5c74:	a0 0d       	add	r26, r0
    5c76:	61 1d       	adc	r22, r1
    5c78:	22 1f       	adc	r18, r18
    5c7a:	74 9f       	mul	r23, r20
    5c7c:	33 27       	eor	r19, r19
    5c7e:	a0 0d       	add	r26, r0
    5c80:	61 1d       	adc	r22, r1
    5c82:	23 1f       	adc	r18, r19
    5c84:	84 9f       	mul	r24, r20
    5c86:	60 0d       	add	r22, r0
    5c88:	21 1d       	adc	r18, r1
    5c8a:	82 2f       	mov	r24, r18
    5c8c:	76 2f       	mov	r23, r22
    5c8e:	6a 2f       	mov	r22, r26
    5c90:	11 24       	eor	r1, r1
    5c92:	9f 57       	subi	r25, 0x7F	; 127
    5c94:	50 40       	sbci	r21, 0x00	; 0
    5c96:	8a f0       	brmi	.+34     	; 0x5cba <__mulsf3_pse+0x84>
    5c98:	e1 f0       	breq	.+56     	; 0x5cd2 <__mulsf3_pse+0x9c>
    5c9a:	88 23       	and	r24, r24
    5c9c:	4a f0       	brmi	.+18     	; 0x5cb0 <__mulsf3_pse+0x7a>
    5c9e:	ee 0f       	add	r30, r30
    5ca0:	ff 1f       	adc	r31, r31
    5ca2:	bb 1f       	adc	r27, r27
    5ca4:	66 1f       	adc	r22, r22
    5ca6:	77 1f       	adc	r23, r23
    5ca8:	88 1f       	adc	r24, r24
    5caa:	91 50       	subi	r25, 0x01	; 1
    5cac:	50 40       	sbci	r21, 0x00	; 0
    5cae:	a9 f7       	brne	.-22     	; 0x5c9a <__mulsf3_pse+0x64>
    5cb0:	9e 3f       	cpi	r25, 0xFE	; 254
    5cb2:	51 05       	cpc	r21, r1
    5cb4:	70 f0       	brcs	.+28     	; 0x5cd2 <__mulsf3_pse+0x9c>
    5cb6:	22 cf       	rjmp	.-444    	; 0x5afc <__fp_inf>
    5cb8:	6c cf       	rjmp	.-296    	; 0x5b92 <__fp_szero>
    5cba:	5f 3f       	cpi	r21, 0xFF	; 255
    5cbc:	ec f3       	brlt	.-6      	; 0x5cb8 <__mulsf3_pse+0x82>
    5cbe:	98 3e       	cpi	r25, 0xE8	; 232
    5cc0:	dc f3       	brlt	.-10     	; 0x5cb8 <__mulsf3_pse+0x82>
    5cc2:	86 95       	lsr	r24
    5cc4:	77 95       	ror	r23
    5cc6:	67 95       	ror	r22
    5cc8:	b7 95       	ror	r27
    5cca:	f7 95       	ror	r31
    5ccc:	e7 95       	ror	r30
    5cce:	9f 5f       	subi	r25, 0xFF	; 255
    5cd0:	c1 f7       	brne	.-16     	; 0x5cc2 <__mulsf3_pse+0x8c>
    5cd2:	fe 2b       	or	r31, r30
    5cd4:	88 0f       	add	r24, r24
    5cd6:	91 1d       	adc	r25, r1
    5cd8:	96 95       	lsr	r25
    5cda:	87 95       	ror	r24
    5cdc:	97 f9       	bld	r25, 7
    5cde:	08 95       	ret

00005ce0 <pow>:
    5ce0:	fa 01       	movw	r30, r20
    5ce2:	ee 0f       	add	r30, r30
    5ce4:	ff 1f       	adc	r31, r31
    5ce6:	30 96       	adiw	r30, 0x00	; 0
    5ce8:	21 05       	cpc	r18, r1
    5cea:	31 05       	cpc	r19, r1
    5cec:	99 f1       	breq	.+102    	; 0x5d54 <pow+0x74>
    5cee:	61 15       	cp	r22, r1
    5cf0:	71 05       	cpc	r23, r1
    5cf2:	61 f4       	brne	.+24     	; 0x5d0c <pow+0x2c>
    5cf4:	80 38       	cpi	r24, 0x80	; 128
    5cf6:	bf e3       	ldi	r27, 0x3F	; 63
    5cf8:	9b 07       	cpc	r25, r27
    5cfa:	49 f1       	breq	.+82     	; 0x5d4e <pow+0x6e>
    5cfc:	68 94       	set
    5cfe:	90 38       	cpi	r25, 0x80	; 128
    5d00:	81 05       	cpc	r24, r1
    5d02:	61 f0       	breq	.+24     	; 0x5d1c <pow+0x3c>
    5d04:	80 38       	cpi	r24, 0x80	; 128
    5d06:	bf ef       	ldi	r27, 0xFF	; 255
    5d08:	9b 07       	cpc	r25, r27
    5d0a:	41 f0       	breq	.+16     	; 0x5d1c <pow+0x3c>
    5d0c:	99 23       	and	r25, r25
    5d0e:	42 f5       	brpl	.+80     	; 0x5d60 <pow+0x80>
    5d10:	ff 3f       	cpi	r31, 0xFF	; 255
    5d12:	e1 05       	cpc	r30, r1
    5d14:	31 05       	cpc	r19, r1
    5d16:	21 05       	cpc	r18, r1
    5d18:	11 f1       	breq	.+68     	; 0x5d5e <pow+0x7e>
    5d1a:	e8 94       	clt
    5d1c:	08 94       	sec
    5d1e:	e7 95       	ror	r30
    5d20:	d9 01       	movw	r26, r18
    5d22:	aa 23       	and	r26, r26
    5d24:	29 f4       	brne	.+10     	; 0x5d30 <pow+0x50>
    5d26:	ab 2f       	mov	r26, r27
    5d28:	be 2f       	mov	r27, r30
    5d2a:	f8 5f       	subi	r31, 0xF8	; 248
    5d2c:	d0 f3       	brcs	.-12     	; 0x5d22 <pow+0x42>
    5d2e:	10 c0       	rjmp	.+32     	; 0x5d50 <pow+0x70>
    5d30:	ff 5f       	subi	r31, 0xFF	; 255
    5d32:	70 f4       	brcc	.+28     	; 0x5d50 <pow+0x70>
    5d34:	a6 95       	lsr	r26
    5d36:	e0 f7       	brcc	.-8      	; 0x5d30 <pow+0x50>
    5d38:	f7 39       	cpi	r31, 0x97	; 151
    5d3a:	50 f0       	brcs	.+20     	; 0x5d50 <pow+0x70>
    5d3c:	19 f0       	breq	.+6      	; 0x5d44 <pow+0x64>
    5d3e:	ff 3a       	cpi	r31, 0xAF	; 175
    5d40:	38 f4       	brcc	.+14     	; 0x5d50 <pow+0x70>
    5d42:	9f 77       	andi	r25, 0x7F	; 127
    5d44:	9f 93       	push	r25
    5d46:	0c d0       	rcall	.+24     	; 0x5d60 <pow+0x80>
    5d48:	0f 90       	pop	r0
    5d4a:	07 fc       	sbrc	r0, 7
    5d4c:	90 58       	subi	r25, 0x80	; 128
    5d4e:	08 95       	ret
    5d50:	3e f0       	brts	.+14     	; 0x5d60 <pow+0x80>
    5d52:	da ce       	rjmp	.-588    	; 0x5b08 <__fp_nan>
    5d54:	60 e0       	ldi	r22, 0x00	; 0
    5d56:	70 e0       	ldi	r23, 0x00	; 0
    5d58:	80 e8       	ldi	r24, 0x80	; 128
    5d5a:	9f e3       	ldi	r25, 0x3F	; 63
    5d5c:	08 95       	ret
    5d5e:	4f e7       	ldi	r20, 0x7F	; 127
    5d60:	9f 77       	andi	r25, 0x7F	; 127
    5d62:	5f 93       	push	r21
    5d64:	4f 93       	push	r20
    5d66:	3f 93       	push	r19
    5d68:	2f 93       	push	r18
    5d6a:	9e d0       	rcall	.+316    	; 0x5ea8 <log>
    5d6c:	2f 91       	pop	r18
    5d6e:	3f 91       	pop	r19
    5d70:	4f 91       	pop	r20
    5d72:	5f 91       	pop	r21
    5d74:	52 df       	rcall	.-348    	; 0x5c1a <__mulsf3>
    5d76:	05 c0       	rjmp	.+10     	; 0x5d82 <exp>
    5d78:	19 f4       	brne	.+6      	; 0x5d80 <pow+0xa0>
    5d7a:	0e f0       	brts	.+2      	; 0x5d7e <pow+0x9e>
    5d7c:	bf ce       	rjmp	.-642    	; 0x5afc <__fp_inf>
    5d7e:	08 cf       	rjmp	.-496    	; 0x5b90 <__fp_zero>
    5d80:	c3 ce       	rjmp	.-634    	; 0x5b08 <__fp_nan>

00005d82 <exp>:
    5d82:	ec de       	rcall	.-552    	; 0x5b5c <__fp_splitA>
    5d84:	c8 f3       	brcs	.-14     	; 0x5d78 <pow+0x98>
    5d86:	96 38       	cpi	r25, 0x86	; 134
    5d88:	c0 f7       	brcc	.-16     	; 0x5d7a <pow+0x9a>
    5d8a:	07 f8       	bld	r0, 7
    5d8c:	0f 92       	push	r0
    5d8e:	e8 94       	clt
    5d90:	2b e3       	ldi	r18, 0x3B	; 59
    5d92:	3a ea       	ldi	r19, 0xAA	; 170
    5d94:	48 eb       	ldi	r20, 0xB8	; 184
    5d96:	5f e7       	ldi	r21, 0x7F	; 127
    5d98:	4e df       	rcall	.-356    	; 0x5c36 <__mulsf3_pse>
    5d9a:	0f 92       	push	r0
    5d9c:	0f 92       	push	r0
    5d9e:	0f 92       	push	r0
    5da0:	4d b7       	in	r20, 0x3d	; 61
    5da2:	5e b7       	in	r21, 0x3e	; 62
    5da4:	0f 92       	push	r0
    5da6:	c0 d0       	rcall	.+384    	; 0x5f28 <modf>
    5da8:	e8 ec       	ldi	r30, 0xC8	; 200
    5daa:	f0 e0       	ldi	r31, 0x00	; 0
    5dac:	16 d0       	rcall	.+44     	; 0x5dda <__fp_powser>
    5dae:	4f 91       	pop	r20
    5db0:	5f 91       	pop	r21
    5db2:	ef 91       	pop	r30
    5db4:	ff 91       	pop	r31
    5db6:	e5 95       	asr	r30
    5db8:	ee 1f       	adc	r30, r30
    5dba:	ff 1f       	adc	r31, r31
    5dbc:	49 f0       	breq	.+18     	; 0x5dd0 <exp+0x4e>
    5dbe:	fe 57       	subi	r31, 0x7E	; 126
    5dc0:	e0 68       	ori	r30, 0x80	; 128
    5dc2:	44 27       	eor	r20, r20
    5dc4:	ee 0f       	add	r30, r30
    5dc6:	44 1f       	adc	r20, r20
    5dc8:	fa 95       	dec	r31
    5dca:	e1 f7       	brne	.-8      	; 0x5dc4 <exp+0x42>
    5dcc:	41 95       	neg	r20
    5dce:	55 0b       	sbc	r21, r21
    5dd0:	32 d0       	rcall	.+100    	; 0x5e36 <ldexp>
    5dd2:	0f 90       	pop	r0
    5dd4:	07 fe       	sbrs	r0, 7
    5dd6:	26 c0       	rjmp	.+76     	; 0x5e24 <inverse>
    5dd8:	08 95       	ret

00005dda <__fp_powser>:
    5dda:	df 93       	push	r29
    5ddc:	cf 93       	push	r28
    5dde:	1f 93       	push	r17
    5de0:	0f 93       	push	r16
    5de2:	ff 92       	push	r15
    5de4:	ef 92       	push	r14
    5de6:	df 92       	push	r13
    5de8:	7b 01       	movw	r14, r22
    5dea:	8c 01       	movw	r16, r24
    5dec:	68 94       	set
    5dee:	05 c0       	rjmp	.+10     	; 0x5dfa <__fp_powser+0x20>
    5df0:	da 2e       	mov	r13, r26
    5df2:	ef 01       	movw	r28, r30
    5df4:	1e df       	rcall	.-452    	; 0x5c32 <__mulsf3x>
    5df6:	fe 01       	movw	r30, r28
    5df8:	e8 94       	clt
    5dfa:	a5 91       	lpm	r26, Z+
    5dfc:	25 91       	lpm	r18, Z+
    5dfe:	35 91       	lpm	r19, Z+
    5e00:	45 91       	lpm	r20, Z+
    5e02:	55 91       	lpm	r21, Z+
    5e04:	ae f3       	brts	.-22     	; 0x5df0 <__fp_powser+0x16>
    5e06:	ef 01       	movw	r28, r30
    5e08:	28 dd       	rcall	.-1456   	; 0x585a <__addsf3x>
    5e0a:	fe 01       	movw	r30, r28
    5e0c:	97 01       	movw	r18, r14
    5e0e:	a8 01       	movw	r20, r16
    5e10:	da 94       	dec	r13
    5e12:	79 f7       	brne	.-34     	; 0x5df2 <__fp_powser+0x18>
    5e14:	df 90       	pop	r13
    5e16:	ef 90       	pop	r14
    5e18:	ff 90       	pop	r15
    5e1a:	0f 91       	pop	r16
    5e1c:	1f 91       	pop	r17
    5e1e:	cf 91       	pop	r28
    5e20:	df 91       	pop	r29
    5e22:	08 95       	ret

00005e24 <inverse>:
    5e24:	9b 01       	movw	r18, r22
    5e26:	ac 01       	movw	r20, r24
    5e28:	60 e0       	ldi	r22, 0x00	; 0
    5e2a:	70 e0       	ldi	r23, 0x00	; 0
    5e2c:	80 e8       	ldi	r24, 0x80	; 128
    5e2e:	9f e3       	ldi	r25, 0x3F	; 63
    5e30:	6b cd       	rjmp	.-1322   	; 0x5908 <__divsf3>
    5e32:	64 ce       	rjmp	.-824    	; 0x5afc <__fp_inf>
    5e34:	ac c0       	rjmp	.+344    	; 0x5f8e <__fp_mpack>

00005e36 <ldexp>:
    5e36:	92 de       	rcall	.-732    	; 0x5b5c <__fp_splitA>
    5e38:	e8 f3       	brcs	.-6      	; 0x5e34 <inverse+0x10>
    5e3a:	99 23       	and	r25, r25
    5e3c:	d9 f3       	breq	.-10     	; 0x5e34 <inverse+0x10>
    5e3e:	94 0f       	add	r25, r20
    5e40:	51 1d       	adc	r21, r1
    5e42:	bb f3       	brvs	.-18     	; 0x5e32 <inverse+0xe>
    5e44:	91 50       	subi	r25, 0x01	; 1
    5e46:	50 40       	sbci	r21, 0x00	; 0
    5e48:	94 f0       	brlt	.+36     	; 0x5e6e <ldexp+0x38>
    5e4a:	59 f0       	breq	.+22     	; 0x5e62 <ldexp+0x2c>
    5e4c:	88 23       	and	r24, r24
    5e4e:	32 f0       	brmi	.+12     	; 0x5e5c <ldexp+0x26>
    5e50:	66 0f       	add	r22, r22
    5e52:	77 1f       	adc	r23, r23
    5e54:	88 1f       	adc	r24, r24
    5e56:	91 50       	subi	r25, 0x01	; 1
    5e58:	50 40       	sbci	r21, 0x00	; 0
    5e5a:	c1 f7       	brne	.-16     	; 0x5e4c <ldexp+0x16>
    5e5c:	9e 3f       	cpi	r25, 0xFE	; 254
    5e5e:	51 05       	cpc	r21, r1
    5e60:	44 f7       	brge	.-48     	; 0x5e32 <inverse+0xe>
    5e62:	88 0f       	add	r24, r24
    5e64:	91 1d       	adc	r25, r1
    5e66:	96 95       	lsr	r25
    5e68:	87 95       	ror	r24
    5e6a:	97 f9       	bld	r25, 7
    5e6c:	08 95       	ret
    5e6e:	5f 3f       	cpi	r21, 0xFF	; 255
    5e70:	ac f0       	brlt	.+42     	; 0x5e9c <ldexp+0x66>
    5e72:	98 3e       	cpi	r25, 0xE8	; 232
    5e74:	9c f0       	brlt	.+38     	; 0x5e9c <ldexp+0x66>
    5e76:	bb 27       	eor	r27, r27
    5e78:	86 95       	lsr	r24
    5e7a:	77 95       	ror	r23
    5e7c:	67 95       	ror	r22
    5e7e:	b7 95       	ror	r27
    5e80:	08 f4       	brcc	.+2      	; 0x5e84 <ldexp+0x4e>
    5e82:	b1 60       	ori	r27, 0x01	; 1
    5e84:	93 95       	inc	r25
    5e86:	c1 f7       	brne	.-16     	; 0x5e78 <ldexp+0x42>
    5e88:	bb 0f       	add	r27, r27
    5e8a:	58 f7       	brcc	.-42     	; 0x5e62 <ldexp+0x2c>
    5e8c:	11 f4       	brne	.+4      	; 0x5e92 <ldexp+0x5c>
    5e8e:	60 ff       	sbrs	r22, 0
    5e90:	e8 cf       	rjmp	.-48     	; 0x5e62 <ldexp+0x2c>
    5e92:	6f 5f       	subi	r22, 0xFF	; 255
    5e94:	7f 4f       	sbci	r23, 0xFF	; 255
    5e96:	8f 4f       	sbci	r24, 0xFF	; 255
    5e98:	9f 4f       	sbci	r25, 0xFF	; 255
    5e9a:	e3 cf       	rjmp	.-58     	; 0x5e62 <ldexp+0x2c>
    5e9c:	7a ce       	rjmp	.-780    	; 0x5b92 <__fp_szero>
    5e9e:	0e f0       	brts	.+2      	; 0x5ea2 <ldexp+0x6c>
    5ea0:	76 c0       	rjmp	.+236    	; 0x5f8e <__fp_mpack>
    5ea2:	32 ce       	rjmp	.-924    	; 0x5b08 <__fp_nan>
    5ea4:	68 94       	set
    5ea6:	2a ce       	rjmp	.-940    	; 0x5afc <__fp_inf>

00005ea8 <log>:
    5ea8:	59 de       	rcall	.-846    	; 0x5b5c <__fp_splitA>
    5eaa:	c8 f3       	brcs	.-14     	; 0x5e9e <ldexp+0x68>
    5eac:	99 23       	and	r25, r25
    5eae:	d1 f3       	breq	.-12     	; 0x5ea4 <ldexp+0x6e>
    5eb0:	c6 f3       	brts	.-16     	; 0x5ea2 <ldexp+0x6c>
    5eb2:	df 93       	push	r29
    5eb4:	cf 93       	push	r28
    5eb6:	1f 93       	push	r17
    5eb8:	0f 93       	push	r16
    5eba:	ff 92       	push	r15
    5ebc:	c9 2f       	mov	r28, r25
    5ebe:	dd 27       	eor	r29, r29
    5ec0:	88 23       	and	r24, r24
    5ec2:	2a f0       	brmi	.+10     	; 0x5ece <log+0x26>
    5ec4:	21 97       	sbiw	r28, 0x01	; 1
    5ec6:	66 0f       	add	r22, r22
    5ec8:	77 1f       	adc	r23, r23
    5eca:	88 1f       	adc	r24, r24
    5ecc:	da f7       	brpl	.-10     	; 0x5ec4 <log+0x1c>
    5ece:	20 e0       	ldi	r18, 0x00	; 0
    5ed0:	30 e0       	ldi	r19, 0x00	; 0
    5ed2:	40 e8       	ldi	r20, 0x80	; 128
    5ed4:	5f eb       	ldi	r21, 0xBF	; 191
    5ed6:	9f e3       	ldi	r25, 0x3F	; 63
    5ed8:	88 39       	cpi	r24, 0x98	; 152
    5eda:	20 f0       	brcs	.+8      	; 0x5ee4 <log+0x3c>
    5edc:	80 3e       	cpi	r24, 0xE0	; 224
    5ede:	30 f0       	brcs	.+12     	; 0x5eec <log+0x44>
    5ee0:	21 96       	adiw	r28, 0x01	; 1
    5ee2:	8f 77       	andi	r24, 0x7F	; 127
    5ee4:	a9 dc       	rcall	.-1710   	; 0x5838 <__addsf3>
    5ee6:	e0 ef       	ldi	r30, 0xF0	; 240
    5ee8:	f0 e0       	ldi	r31, 0x00	; 0
    5eea:	03 c0       	rjmp	.+6      	; 0x5ef2 <log+0x4a>
    5eec:	a5 dc       	rcall	.-1718   	; 0x5838 <__addsf3>
    5eee:	ed e1       	ldi	r30, 0x1D	; 29
    5ef0:	f1 e0       	ldi	r31, 0x01	; 1
    5ef2:	73 df       	rcall	.-282    	; 0x5dda <__fp_powser>
    5ef4:	8b 01       	movw	r16, r22
    5ef6:	be 01       	movw	r22, r28
    5ef8:	ec 01       	movw	r28, r24
    5efa:	fb 2e       	mov	r15, r27
    5efc:	6f 57       	subi	r22, 0x7F	; 127
    5efe:	71 09       	sbc	r23, r1
    5f00:	75 95       	asr	r23
    5f02:	77 1f       	adc	r23, r23
    5f04:	88 0b       	sbc	r24, r24
    5f06:	99 0b       	sbc	r25, r25
    5f08:	9a dd       	rcall	.-1228   	; 0x5a3e <__floatsisf>
    5f0a:	28 e1       	ldi	r18, 0x18	; 24
    5f0c:	32 e7       	ldi	r19, 0x72	; 114
    5f0e:	41 e3       	ldi	r20, 0x31	; 49
    5f10:	5f e3       	ldi	r21, 0x3F	; 63
    5f12:	8f de       	rcall	.-738    	; 0x5c32 <__mulsf3x>
    5f14:	af 2d       	mov	r26, r15
    5f16:	98 01       	movw	r18, r16
    5f18:	ae 01       	movw	r20, r28
    5f1a:	ff 90       	pop	r15
    5f1c:	0f 91       	pop	r16
    5f1e:	1f 91       	pop	r17
    5f20:	cf 91       	pop	r28
    5f22:	df 91       	pop	r29
    5f24:	9a dc       	rcall	.-1740   	; 0x585a <__addsf3x>
    5f26:	01 ce       	rjmp	.-1022   	; 0x5b2a <__fp_round>

00005f28 <modf>:
    5f28:	fa 01       	movw	r30, r20
    5f2a:	dc 01       	movw	r26, r24
    5f2c:	aa 0f       	add	r26, r26
    5f2e:	bb 1f       	adc	r27, r27
    5f30:	9b 01       	movw	r18, r22
    5f32:	ac 01       	movw	r20, r24
    5f34:	bf 57       	subi	r27, 0x7F	; 127
    5f36:	28 f4       	brcc	.+10     	; 0x5f42 <modf+0x1a>
    5f38:	22 27       	eor	r18, r18
    5f3a:	33 27       	eor	r19, r19
    5f3c:	44 27       	eor	r20, r20
    5f3e:	50 78       	andi	r21, 0x80	; 128
    5f40:	1f c0       	rjmp	.+62     	; 0x5f80 <modf+0x58>
    5f42:	b7 51       	subi	r27, 0x17	; 23
    5f44:	88 f4       	brcc	.+34     	; 0x5f68 <modf+0x40>
    5f46:	ab 2f       	mov	r26, r27
    5f48:	00 24       	eor	r0, r0
    5f4a:	46 95       	lsr	r20
    5f4c:	37 95       	ror	r19
    5f4e:	27 95       	ror	r18
    5f50:	01 1c       	adc	r0, r1
    5f52:	a3 95       	inc	r26
    5f54:	d2 f3       	brmi	.-12     	; 0x5f4a <modf+0x22>
    5f56:	00 20       	and	r0, r0
    5f58:	69 f0       	breq	.+26     	; 0x5f74 <modf+0x4c>
    5f5a:	22 0f       	add	r18, r18
    5f5c:	33 1f       	adc	r19, r19
    5f5e:	44 1f       	adc	r20, r20
    5f60:	b3 95       	inc	r27
    5f62:	da f3       	brmi	.-10     	; 0x5f5a <modf+0x32>
    5f64:	0d d0       	rcall	.+26     	; 0x5f80 <modf+0x58>
    5f66:	67 cc       	rjmp	.-1842   	; 0x5836 <__subsf3>
    5f68:	61 30       	cpi	r22, 0x01	; 1
    5f6a:	71 05       	cpc	r23, r1
    5f6c:	a0 e8       	ldi	r26, 0x80	; 128
    5f6e:	8a 07       	cpc	r24, r26
    5f70:	b9 46       	sbci	r27, 0x69	; 105
    5f72:	30 f4       	brcc	.+12     	; 0x5f80 <modf+0x58>
    5f74:	9b 01       	movw	r18, r22
    5f76:	ac 01       	movw	r20, r24
    5f78:	66 27       	eor	r22, r22
    5f7a:	77 27       	eor	r23, r23
    5f7c:	88 27       	eor	r24, r24
    5f7e:	90 78       	andi	r25, 0x80	; 128
    5f80:	30 96       	adiw	r30, 0x00	; 0
    5f82:	21 f0       	breq	.+8      	; 0x5f8c <modf+0x64>
    5f84:	20 83       	st	Z, r18
    5f86:	31 83       	std	Z+1, r19	; 0x01
    5f88:	42 83       	std	Z+2, r20	; 0x02
    5f8a:	53 83       	std	Z+3, r21	; 0x03
    5f8c:	08 95       	ret

00005f8e <__fp_mpack>:
    5f8e:	9f 3f       	cpi	r25, 0xFF	; 255
    5f90:	31 f0       	breq	.+12     	; 0x5f9e <__fp_mpack_finite+0xc>

00005f92 <__fp_mpack_finite>:
    5f92:	91 50       	subi	r25, 0x01	; 1
    5f94:	20 f4       	brcc	.+8      	; 0x5f9e <__fp_mpack_finite+0xc>
    5f96:	87 95       	ror	r24
    5f98:	77 95       	ror	r23
    5f9a:	67 95       	ror	r22
    5f9c:	b7 95       	ror	r27
    5f9e:	88 0f       	add	r24, r24
    5fa0:	91 1d       	adc	r25, r1
    5fa2:	96 95       	lsr	r25
    5fa4:	87 95       	ror	r24
    5fa6:	97 f9       	bld	r25, 7
    5fa8:	08 95       	ret

00005faa <vfprintf>:
    5faa:	a1 e1       	ldi	r26, 0x11	; 17
    5fac:	b0 e0       	ldi	r27, 0x00	; 0
    5fae:	ea ed       	ldi	r30, 0xDA	; 218
    5fb0:	ff e2       	ldi	r31, 0x2F	; 47
    5fb2:	a4 c3       	rjmp	.+1864   	; 0x66fc <__prologue_saves__>
    5fb4:	3c 01       	movw	r6, r24
    5fb6:	7f 87       	std	Y+15, r23	; 0x0f
    5fb8:	6e 87       	std	Y+14, r22	; 0x0e
    5fba:	6a 01       	movw	r12, r20
    5fbc:	fc 01       	movw	r30, r24
    5fbe:	17 82       	std	Z+7, r1	; 0x07
    5fc0:	16 82       	std	Z+6, r1	; 0x06
    5fc2:	83 81       	ldd	r24, Z+3	; 0x03
    5fc4:	81 fd       	sbrc	r24, 1
    5fc6:	03 c0       	rjmp	.+6      	; 0x5fce <vfprintf+0x24>
    5fc8:	6f ef       	ldi	r22, 0xFF	; 255
    5fca:	7f ef       	ldi	r23, 0xFF	; 255
    5fcc:	52 c3       	rjmp	.+1700   	; 0x6672 <vfprintf+0x6c8>
    5fce:	9e 01       	movw	r18, r28
    5fd0:	2f 5f       	subi	r18, 0xFF	; 255
    5fd2:	3f 4f       	sbci	r19, 0xFF	; 255
    5fd4:	39 8b       	std	Y+17, r19	; 0x11
    5fd6:	28 8b       	std	Y+16, r18	; 0x10
    5fd8:	f3 01       	movw	r30, r6
    5fda:	23 81       	ldd	r18, Z+3	; 0x03
    5fdc:	ee 85       	ldd	r30, Y+14	; 0x0e
    5fde:	ff 85       	ldd	r31, Y+15	; 0x0f
    5fe0:	23 fd       	sbrc	r18, 3
    5fe2:	85 91       	lpm	r24, Z+
    5fe4:	23 ff       	sbrs	r18, 3
    5fe6:	81 91       	ld	r24, Z+
    5fe8:	ff 87       	std	Y+15, r31	; 0x0f
    5fea:	ee 87       	std	Y+14, r30	; 0x0e
    5fec:	88 23       	and	r24, r24
    5fee:	09 f4       	brne	.+2      	; 0x5ff2 <vfprintf+0x48>
    5ff0:	3d c3       	rjmp	.+1658   	; 0x666c <vfprintf+0x6c2>
    5ff2:	85 32       	cpi	r24, 0x25	; 37
    5ff4:	51 f4       	brne	.+20     	; 0x600a <vfprintf+0x60>
    5ff6:	ee 85       	ldd	r30, Y+14	; 0x0e
    5ff8:	ff 85       	ldd	r31, Y+15	; 0x0f
    5ffa:	23 fd       	sbrc	r18, 3
    5ffc:	85 91       	lpm	r24, Z+
    5ffe:	23 ff       	sbrs	r18, 3
    6000:	81 91       	ld	r24, Z+
    6002:	ff 87       	std	Y+15, r31	; 0x0f
    6004:	ee 87       	std	Y+14, r30	; 0x0e
    6006:	85 32       	cpi	r24, 0x25	; 37
    6008:	21 f4       	brne	.+8      	; 0x6012 <vfprintf+0x68>
    600a:	90 e0       	ldi	r25, 0x00	; 0
    600c:	b3 01       	movw	r22, r6
    600e:	a0 d5       	rcall	.+2880   	; 0x6b50 <fputc>
    6010:	e3 cf       	rjmp	.-58     	; 0x5fd8 <vfprintf+0x2e>
    6012:	98 2f       	mov	r25, r24
    6014:	10 e0       	ldi	r17, 0x00	; 0
    6016:	88 24       	eor	r8, r8
    6018:	99 24       	eor	r9, r9
    601a:	10 32       	cpi	r17, 0x20	; 32
    601c:	b0 f4       	brcc	.+44     	; 0x604a <vfprintf+0xa0>
    601e:	9b 32       	cpi	r25, 0x2B	; 43
    6020:	69 f0       	breq	.+26     	; 0x603c <vfprintf+0x92>
    6022:	9c 32       	cpi	r25, 0x2C	; 44
    6024:	28 f4       	brcc	.+10     	; 0x6030 <vfprintf+0x86>
    6026:	90 32       	cpi	r25, 0x20	; 32
    6028:	51 f0       	breq	.+20     	; 0x603e <vfprintf+0x94>
    602a:	93 32       	cpi	r25, 0x23	; 35
    602c:	71 f4       	brne	.+28     	; 0x604a <vfprintf+0xa0>
    602e:	0b c0       	rjmp	.+22     	; 0x6046 <vfprintf+0x9c>
    6030:	9d 32       	cpi	r25, 0x2D	; 45
    6032:	39 f0       	breq	.+14     	; 0x6042 <vfprintf+0x98>
    6034:	90 33       	cpi	r25, 0x30	; 48
    6036:	49 f4       	brne	.+18     	; 0x604a <vfprintf+0xa0>
    6038:	11 60       	ori	r17, 0x01	; 1
    603a:	28 c0       	rjmp	.+80     	; 0x608c <vfprintf+0xe2>
    603c:	12 60       	ori	r17, 0x02	; 2
    603e:	14 60       	ori	r17, 0x04	; 4
    6040:	25 c0       	rjmp	.+74     	; 0x608c <vfprintf+0xe2>
    6042:	18 60       	ori	r17, 0x08	; 8
    6044:	23 c0       	rjmp	.+70     	; 0x608c <vfprintf+0xe2>
    6046:	10 61       	ori	r17, 0x10	; 16
    6048:	21 c0       	rjmp	.+66     	; 0x608c <vfprintf+0xe2>
    604a:	17 fd       	sbrc	r17, 7
    604c:	2a c0       	rjmp	.+84     	; 0x60a2 <vfprintf+0xf8>
    604e:	89 2f       	mov	r24, r25
    6050:	80 53       	subi	r24, 0x30	; 48
    6052:	8a 30       	cpi	r24, 0x0A	; 10
    6054:	78 f4       	brcc	.+30     	; 0x6074 <vfprintf+0xca>
    6056:	16 ff       	sbrs	r17, 6
    6058:	06 c0       	rjmp	.+12     	; 0x6066 <vfprintf+0xbc>
    605a:	fa e0       	ldi	r31, 0x0A	; 10
    605c:	9f 9e       	mul	r9, r31
    605e:	90 2c       	mov	r9, r0
    6060:	11 24       	eor	r1, r1
    6062:	98 0e       	add	r9, r24
    6064:	13 c0       	rjmp	.+38     	; 0x608c <vfprintf+0xe2>
    6066:	3a e0       	ldi	r19, 0x0A	; 10
    6068:	83 9e       	mul	r8, r19
    606a:	80 2c       	mov	r8, r0
    606c:	11 24       	eor	r1, r1
    606e:	88 0e       	add	r8, r24
    6070:	10 62       	ori	r17, 0x20	; 32
    6072:	0c c0       	rjmp	.+24     	; 0x608c <vfprintf+0xe2>
    6074:	9e 32       	cpi	r25, 0x2E	; 46
    6076:	21 f4       	brne	.+8      	; 0x6080 <vfprintf+0xd6>
    6078:	16 fd       	sbrc	r17, 6
    607a:	f8 c2       	rjmp	.+1520   	; 0x666c <vfprintf+0x6c2>
    607c:	10 64       	ori	r17, 0x40	; 64
    607e:	06 c0       	rjmp	.+12     	; 0x608c <vfprintf+0xe2>
    6080:	9c 36       	cpi	r25, 0x6C	; 108
    6082:	11 f4       	brne	.+4      	; 0x6088 <vfprintf+0xde>
    6084:	10 68       	ori	r17, 0x80	; 128
    6086:	02 c0       	rjmp	.+4      	; 0x608c <vfprintf+0xe2>
    6088:	98 36       	cpi	r25, 0x68	; 104
    608a:	59 f4       	brne	.+22     	; 0x60a2 <vfprintf+0xf8>
    608c:	ee 85       	ldd	r30, Y+14	; 0x0e
    608e:	ff 85       	ldd	r31, Y+15	; 0x0f
    6090:	23 fd       	sbrc	r18, 3
    6092:	95 91       	lpm	r25, Z+
    6094:	23 ff       	sbrs	r18, 3
    6096:	91 91       	ld	r25, Z+
    6098:	ff 87       	std	Y+15, r31	; 0x0f
    609a:	ee 87       	std	Y+14, r30	; 0x0e
    609c:	99 23       	and	r25, r25
    609e:	09 f0       	breq	.+2      	; 0x60a2 <vfprintf+0xf8>
    60a0:	bc cf       	rjmp	.-136    	; 0x601a <vfprintf+0x70>
    60a2:	89 2f       	mov	r24, r25
    60a4:	85 54       	subi	r24, 0x45	; 69
    60a6:	83 30       	cpi	r24, 0x03	; 3
    60a8:	20 f4       	brcc	.+8      	; 0x60b2 <vfprintf+0x108>
    60aa:	81 2f       	mov	r24, r17
    60ac:	80 61       	ori	r24, 0x10	; 16
    60ae:	90 5e       	subi	r25, 0xE0	; 224
    60b0:	07 c0       	rjmp	.+14     	; 0x60c0 <vfprintf+0x116>
    60b2:	89 2f       	mov	r24, r25
    60b4:	85 56       	subi	r24, 0x65	; 101
    60b6:	83 30       	cpi	r24, 0x03	; 3
    60b8:	08 f0       	brcs	.+2      	; 0x60bc <vfprintf+0x112>
    60ba:	8f c1       	rjmp	.+798    	; 0x63da <vfprintf+0x430>
    60bc:	81 2f       	mov	r24, r17
    60be:	8f 7e       	andi	r24, 0xEF	; 239
    60c0:	86 fd       	sbrc	r24, 6
    60c2:	02 c0       	rjmp	.+4      	; 0x60c8 <vfprintf+0x11e>
    60c4:	76 e0       	ldi	r23, 0x06	; 6
    60c6:	97 2e       	mov	r9, r23
    60c8:	6f e3       	ldi	r22, 0x3F	; 63
    60ca:	f6 2e       	mov	r15, r22
    60cc:	f8 22       	and	r15, r24
    60ce:	95 36       	cpi	r25, 0x65	; 101
    60d0:	19 f4       	brne	.+6      	; 0x60d8 <vfprintf+0x12e>
    60d2:	f0 e4       	ldi	r31, 0x40	; 64
    60d4:	ff 2a       	or	r15, r31
    60d6:	07 c0       	rjmp	.+14     	; 0x60e6 <vfprintf+0x13c>
    60d8:	96 36       	cpi	r25, 0x66	; 102
    60da:	19 f4       	brne	.+6      	; 0x60e2 <vfprintf+0x138>
    60dc:	20 e8       	ldi	r18, 0x80	; 128
    60de:	f2 2a       	or	r15, r18
    60e0:	02 c0       	rjmp	.+4      	; 0x60e6 <vfprintf+0x13c>
    60e2:	91 10       	cpse	r9, r1
    60e4:	9a 94       	dec	r9
    60e6:	f7 fe       	sbrs	r15, 7
    60e8:	0a c0       	rjmp	.+20     	; 0x60fe <vfprintf+0x154>
    60ea:	3b e3       	ldi	r19, 0x3B	; 59
    60ec:	39 15       	cp	r19, r9
    60ee:	18 f4       	brcc	.+6      	; 0x60f6 <vfprintf+0x14c>
    60f0:	5c e3       	ldi	r21, 0x3C	; 60
    60f2:	b5 2e       	mov	r11, r21
    60f4:	02 c0       	rjmp	.+4      	; 0x60fa <vfprintf+0x150>
    60f6:	b9 2c       	mov	r11, r9
    60f8:	b3 94       	inc	r11
    60fa:	27 e0       	ldi	r18, 0x07	; 7
    60fc:	09 c0       	rjmp	.+18     	; 0x6110 <vfprintf+0x166>
    60fe:	47 e0       	ldi	r20, 0x07	; 7
    6100:	49 15       	cp	r20, r9
    6102:	20 f4       	brcc	.+8      	; 0x610c <vfprintf+0x162>
    6104:	bb 24       	eor	r11, r11
    6106:	47 e0       	ldi	r20, 0x07	; 7
    6108:	94 2e       	mov	r9, r20
    610a:	f7 cf       	rjmp	.-18     	; 0x60fa <vfprintf+0x150>
    610c:	29 2d       	mov	r18, r9
    610e:	bb 24       	eor	r11, r11
    6110:	c6 01       	movw	r24, r12
    6112:	04 96       	adiw	r24, 0x04	; 4
    6114:	9d 87       	std	Y+13, r25	; 0x0d
    6116:	8c 87       	std	Y+12, r24	; 0x0c
    6118:	f6 01       	movw	r30, r12
    611a:	60 81       	ld	r22, Z
    611c:	71 81       	ldd	r23, Z+1	; 0x01
    611e:	82 81       	ldd	r24, Z+2	; 0x02
    6120:	93 81       	ldd	r25, Z+3	; 0x03
    6122:	ae 01       	movw	r20, r28
    6124:	4f 5f       	subi	r20, 0xFF	; 255
    6126:	5f 4f       	sbci	r21, 0xFF	; 255
    6128:	0b 2d       	mov	r16, r11
    612a:	24 d4       	rcall	.+2120   	; 0x6974 <__ftoa_engine>
    612c:	6c 01       	movw	r12, r24
    612e:	09 81       	ldd	r16, Y+1	; 0x01
    6130:	20 2e       	mov	r2, r16
    6132:	33 24       	eor	r3, r3
    6134:	00 ff       	sbrs	r16, 0
    6136:	04 c0       	rjmp	.+8      	; 0x6140 <vfprintf+0x196>
    6138:	03 fd       	sbrc	r16, 3
    613a:	02 c0       	rjmp	.+4      	; 0x6140 <vfprintf+0x196>
    613c:	1d e2       	ldi	r17, 0x2D	; 45
    613e:	09 c0       	rjmp	.+18     	; 0x6152 <vfprintf+0x1a8>
    6140:	f1 fe       	sbrs	r15, 1
    6142:	02 c0       	rjmp	.+4      	; 0x6148 <vfprintf+0x19e>
    6144:	1b e2       	ldi	r17, 0x2B	; 43
    6146:	05 c0       	rjmp	.+10     	; 0x6152 <vfprintf+0x1a8>
    6148:	f2 fc       	sbrc	r15, 2
    614a:	02 c0       	rjmp	.+4      	; 0x6150 <vfprintf+0x1a6>
    614c:	10 e0       	ldi	r17, 0x00	; 0
    614e:	01 c0       	rjmp	.+2      	; 0x6152 <vfprintf+0x1a8>
    6150:	10 e2       	ldi	r17, 0x20	; 32
    6152:	c1 01       	movw	r24, r2
    6154:	8c 70       	andi	r24, 0x0C	; 12
    6156:	90 70       	andi	r25, 0x00	; 0
    6158:	89 2b       	or	r24, r25
    615a:	a1 f1       	breq	.+104    	; 0x61c4 <vfprintf+0x21a>
    615c:	11 23       	and	r17, r17
    615e:	11 f4       	brne	.+4      	; 0x6164 <vfprintf+0x1ba>
    6160:	83 e0       	ldi	r24, 0x03	; 3
    6162:	01 c0       	rjmp	.+2      	; 0x6166 <vfprintf+0x1bc>
    6164:	84 e0       	ldi	r24, 0x04	; 4
    6166:	88 15       	cp	r24, r8
    6168:	10 f0       	brcs	.+4      	; 0x616e <vfprintf+0x1c4>
    616a:	88 24       	eor	r8, r8
    616c:	09 c0       	rjmp	.+18     	; 0x6180 <vfprintf+0x1d6>
    616e:	88 1a       	sub	r8, r24
    6170:	f3 fc       	sbrc	r15, 3
    6172:	06 c0       	rjmp	.+12     	; 0x6180 <vfprintf+0x1d6>
    6174:	80 e2       	ldi	r24, 0x20	; 32
    6176:	90 e0       	ldi	r25, 0x00	; 0
    6178:	b3 01       	movw	r22, r6
    617a:	ea d4       	rcall	.+2516   	; 0x6b50 <fputc>
    617c:	8a 94       	dec	r8
    617e:	d1 f7       	brne	.-12     	; 0x6174 <vfprintf+0x1ca>
    6180:	11 23       	and	r17, r17
    6182:	21 f0       	breq	.+8      	; 0x618c <vfprintf+0x1e2>
    6184:	81 2f       	mov	r24, r17
    6186:	90 e0       	ldi	r25, 0x00	; 0
    6188:	b3 01       	movw	r22, r6
    618a:	e2 d4       	rcall	.+2500   	; 0x6b50 <fputc>
    618c:	23 fe       	sbrs	r2, 3
    618e:	03 c0       	rjmp	.+6      	; 0x6196 <vfprintf+0x1ec>
    6190:	0f e5       	ldi	r16, 0x5F	; 95
    6192:	15 e0       	ldi	r17, 0x05	; 5
    6194:	0d c0       	rjmp	.+26     	; 0x61b0 <vfprintf+0x206>
    6196:	03 e6       	ldi	r16, 0x63	; 99
    6198:	15 e0       	ldi	r17, 0x05	; 5
    619a:	0a c0       	rjmp	.+20     	; 0x61b0 <vfprintf+0x206>
    619c:	e1 14       	cp	r14, r1
    619e:	f1 04       	cpc	r15, r1
    61a0:	09 f0       	breq	.+2      	; 0x61a4 <vfprintf+0x1fa>
    61a2:	80 52       	subi	r24, 0x20	; 32
    61a4:	90 e0       	ldi	r25, 0x00	; 0
    61a6:	b3 01       	movw	r22, r6
    61a8:	d3 d4       	rcall	.+2470   	; 0x6b50 <fputc>
    61aa:	0f 5f       	subi	r16, 0xFF	; 255
    61ac:	1f 4f       	sbci	r17, 0xFF	; 255
    61ae:	05 c0       	rjmp	.+10     	; 0x61ba <vfprintf+0x210>
    61b0:	ef 2c       	mov	r14, r15
    61b2:	ff 24       	eor	r15, r15
    61b4:	f0 e1       	ldi	r31, 0x10	; 16
    61b6:	ef 22       	and	r14, r31
    61b8:	ff 24       	eor	r15, r15
    61ba:	f8 01       	movw	r30, r16
    61bc:	84 91       	lpm	r24, Z+
    61be:	88 23       	and	r24, r24
    61c0:	69 f7       	brne	.-38     	; 0x619c <vfprintf+0x1f2>
    61c2:	08 c1       	rjmp	.+528    	; 0x63d4 <vfprintf+0x42a>
    61c4:	f7 fe       	sbrs	r15, 7
    61c6:	12 c0       	rjmp	.+36     	; 0x61ec <vfprintf+0x242>
    61c8:	bc 0c       	add	r11, r12
    61ca:	24 fe       	sbrs	r2, 4
    61cc:	04 c0       	rjmp	.+8      	; 0x61d6 <vfprintf+0x22c>
    61ce:	8a 81       	ldd	r24, Y+2	; 0x02
    61d0:	81 33       	cpi	r24, 0x31	; 49
    61d2:	09 f4       	brne	.+2      	; 0x61d6 <vfprintf+0x22c>
    61d4:	ba 94       	dec	r11
    61d6:	1b 14       	cp	r1, r11
    61d8:	1c f0       	brlt	.+6      	; 0x61e0 <vfprintf+0x236>
    61da:	bb 24       	eor	r11, r11
    61dc:	b3 94       	inc	r11
    61de:	2d c0       	rjmp	.+90     	; 0x623a <vfprintf+0x290>
    61e0:	f8 e0       	ldi	r31, 0x08	; 8
    61e2:	fb 15       	cp	r31, r11
    61e4:	50 f5       	brcc	.+84     	; 0x623a <vfprintf+0x290>
    61e6:	38 e0       	ldi	r19, 0x08	; 8
    61e8:	b3 2e       	mov	r11, r19
    61ea:	27 c0       	rjmp	.+78     	; 0x623a <vfprintf+0x290>
    61ec:	f6 fc       	sbrc	r15, 6
    61ee:	25 c0       	rjmp	.+74     	; 0x623a <vfprintf+0x290>
    61f0:	89 2d       	mov	r24, r9
    61f2:	90 e0       	ldi	r25, 0x00	; 0
    61f4:	8c 15       	cp	r24, r12
    61f6:	9d 05       	cpc	r25, r13
    61f8:	4c f0       	brlt	.+18     	; 0x620c <vfprintf+0x262>
    61fa:	2c ef       	ldi	r18, 0xFC	; 252
    61fc:	c2 16       	cp	r12, r18
    61fe:	2f ef       	ldi	r18, 0xFF	; 255
    6200:	d2 06       	cpc	r13, r18
    6202:	24 f0       	brlt	.+8      	; 0x620c <vfprintf+0x262>
    6204:	30 e8       	ldi	r19, 0x80	; 128
    6206:	f3 2a       	or	r15, r19
    6208:	01 c0       	rjmp	.+2      	; 0x620c <vfprintf+0x262>
    620a:	9a 94       	dec	r9
    620c:	99 20       	and	r9, r9
    620e:	49 f0       	breq	.+18     	; 0x6222 <vfprintf+0x278>
    6210:	e2 e0       	ldi	r30, 0x02	; 2
    6212:	f0 e0       	ldi	r31, 0x00	; 0
    6214:	ec 0f       	add	r30, r28
    6216:	fd 1f       	adc	r31, r29
    6218:	e9 0d       	add	r30, r9
    621a:	f1 1d       	adc	r31, r1
    621c:	80 81       	ld	r24, Z
    621e:	80 33       	cpi	r24, 0x30	; 48
    6220:	a1 f3       	breq	.-24     	; 0x620a <vfprintf+0x260>
    6222:	f7 fe       	sbrs	r15, 7
    6224:	0a c0       	rjmp	.+20     	; 0x623a <vfprintf+0x290>
    6226:	b9 2c       	mov	r11, r9
    6228:	b3 94       	inc	r11
    622a:	89 2d       	mov	r24, r9
    622c:	90 e0       	ldi	r25, 0x00	; 0
    622e:	c8 16       	cp	r12, r24
    6230:	d9 06       	cpc	r13, r25
    6232:	14 f0       	brlt	.+4      	; 0x6238 <vfprintf+0x28e>
    6234:	99 24       	eor	r9, r9
    6236:	01 c0       	rjmp	.+2      	; 0x623a <vfprintf+0x290>
    6238:	9c 18       	sub	r9, r12
    623a:	f7 fc       	sbrc	r15, 7
    623c:	03 c0       	rjmp	.+6      	; 0x6244 <vfprintf+0x29a>
    623e:	25 e0       	ldi	r18, 0x05	; 5
    6240:	30 e0       	ldi	r19, 0x00	; 0
    6242:	09 c0       	rjmp	.+18     	; 0x6256 <vfprintf+0x2ac>
    6244:	1c 14       	cp	r1, r12
    6246:	1d 04       	cpc	r1, r13
    6248:	1c f0       	brlt	.+6      	; 0x6250 <vfprintf+0x2a6>
    624a:	21 e0       	ldi	r18, 0x01	; 1
    624c:	30 e0       	ldi	r19, 0x00	; 0
    624e:	03 c0       	rjmp	.+6      	; 0x6256 <vfprintf+0x2ac>
    6250:	96 01       	movw	r18, r12
    6252:	2f 5f       	subi	r18, 0xFF	; 255
    6254:	3f 4f       	sbci	r19, 0xFF	; 255
    6256:	11 23       	and	r17, r17
    6258:	11 f0       	breq	.+4      	; 0x625e <vfprintf+0x2b4>
    625a:	2f 5f       	subi	r18, 0xFF	; 255
    625c:	3f 4f       	sbci	r19, 0xFF	; 255
    625e:	99 20       	and	r9, r9
    6260:	29 f0       	breq	.+10     	; 0x626c <vfprintf+0x2c2>
    6262:	89 2d       	mov	r24, r9
    6264:	90 e0       	ldi	r25, 0x00	; 0
    6266:	01 96       	adiw	r24, 0x01	; 1
    6268:	28 0f       	add	r18, r24
    626a:	39 1f       	adc	r19, r25
    626c:	88 2d       	mov	r24, r8
    626e:	90 e0       	ldi	r25, 0x00	; 0
    6270:	28 17       	cp	r18, r24
    6272:	39 07       	cpc	r19, r25
    6274:	14 f0       	brlt	.+4      	; 0x627a <vfprintf+0x2d0>
    6276:	88 24       	eor	r8, r8
    6278:	01 c0       	rjmp	.+2      	; 0x627c <vfprintf+0x2d2>
    627a:	82 1a       	sub	r8, r18
    627c:	4f 2c       	mov	r4, r15
    627e:	55 24       	eor	r5, r5
    6280:	c2 01       	movw	r24, r4
    6282:	89 70       	andi	r24, 0x09	; 9
    6284:	90 70       	andi	r25, 0x00	; 0
    6286:	89 2b       	or	r24, r25
    6288:	31 f0       	breq	.+12     	; 0x6296 <vfprintf+0x2ec>
    628a:	07 c0       	rjmp	.+14     	; 0x629a <vfprintf+0x2f0>
    628c:	80 e2       	ldi	r24, 0x20	; 32
    628e:	90 e0       	ldi	r25, 0x00	; 0
    6290:	b3 01       	movw	r22, r6
    6292:	5e d4       	rcall	.+2236   	; 0x6b50 <fputc>
    6294:	8a 94       	dec	r8
    6296:	88 20       	and	r8, r8
    6298:	c9 f7       	brne	.-14     	; 0x628c <vfprintf+0x2e2>
    629a:	11 23       	and	r17, r17
    629c:	21 f0       	breq	.+8      	; 0x62a6 <vfprintf+0x2fc>
    629e:	81 2f       	mov	r24, r17
    62a0:	90 e0       	ldi	r25, 0x00	; 0
    62a2:	b3 01       	movw	r22, r6
    62a4:	55 d4       	rcall	.+2218   	; 0x6b50 <fputc>
    62a6:	43 fe       	sbrs	r4, 3
    62a8:	06 c0       	rjmp	.+12     	; 0x62b6 <vfprintf+0x30c>
    62aa:	07 c0       	rjmp	.+14     	; 0x62ba <vfprintf+0x310>
    62ac:	80 e3       	ldi	r24, 0x30	; 48
    62ae:	90 e0       	ldi	r25, 0x00	; 0
    62b0:	b3 01       	movw	r22, r6
    62b2:	4e d4       	rcall	.+2204   	; 0x6b50 <fputc>
    62b4:	8a 94       	dec	r8
    62b6:	88 20       	and	r8, r8
    62b8:	c9 f7       	brne	.-14     	; 0x62ac <vfprintf+0x302>
    62ba:	f7 fe       	sbrs	r15, 7
    62bc:	44 c0       	rjmp	.+136    	; 0x6346 <vfprintf+0x39c>
    62be:	86 01       	movw	r16, r12
    62c0:	d7 fe       	sbrs	r13, 7
    62c2:	02 c0       	rjmp	.+4      	; 0x62c8 <vfprintf+0x31e>
    62c4:	00 e0       	ldi	r16, 0x00	; 0
    62c6:	10 e0       	ldi	r17, 0x00	; 0
    62c8:	76 01       	movw	r14, r12
    62ca:	08 94       	sec
    62cc:	e1 1c       	adc	r14, r1
    62ce:	f1 1c       	adc	r15, r1
    62d0:	e0 1a       	sub	r14, r16
    62d2:	f1 0a       	sbc	r15, r17
    62d4:	41 e0       	ldi	r20, 0x01	; 1
    62d6:	50 e0       	ldi	r21, 0x00	; 0
    62d8:	4c 0f       	add	r20, r28
    62da:	5d 1f       	adc	r21, r29
    62dc:	e4 0e       	add	r14, r20
    62de:	f5 1e       	adc	r15, r21
    62e0:	26 01       	movw	r4, r12
    62e2:	4b 18       	sub	r4, r11
    62e4:	51 08       	sbc	r5, r1
    62e6:	89 2d       	mov	r24, r9
    62e8:	90 e0       	ldi	r25, 0x00	; 0
    62ea:	aa 24       	eor	r10, r10
    62ec:	bb 24       	eor	r11, r11
    62ee:	a8 1a       	sub	r10, r24
    62f0:	b9 0a       	sbc	r11, r25
    62f2:	5f ef       	ldi	r21, 0xFF	; 255
    62f4:	0f 3f       	cpi	r16, 0xFF	; 255
    62f6:	15 07       	cpc	r17, r21
    62f8:	21 f4       	brne	.+8      	; 0x6302 <vfprintf+0x358>
    62fa:	8e e2       	ldi	r24, 0x2E	; 46
    62fc:	90 e0       	ldi	r25, 0x00	; 0
    62fe:	b3 01       	movw	r22, r6
    6300:	27 d4       	rcall	.+2126   	; 0x6b50 <fputc>
    6302:	c0 16       	cp	r12, r16
    6304:	d1 06       	cpc	r13, r17
    6306:	34 f0       	brlt	.+12     	; 0x6314 <vfprintf+0x36a>
    6308:	40 16       	cp	r4, r16
    630a:	51 06       	cpc	r5, r17
    630c:	1c f4       	brge	.+6      	; 0x6314 <vfprintf+0x36a>
    630e:	f7 01       	movw	r30, r14
    6310:	80 81       	ld	r24, Z
    6312:	01 c0       	rjmp	.+2      	; 0x6316 <vfprintf+0x36c>
    6314:	80 e3       	ldi	r24, 0x30	; 48
    6316:	01 50       	subi	r16, 0x01	; 1
    6318:	10 40       	sbci	r17, 0x00	; 0
    631a:	08 94       	sec
    631c:	e1 1c       	adc	r14, r1
    631e:	f1 1c       	adc	r15, r1
    6320:	0a 15       	cp	r16, r10
    6322:	1b 05       	cpc	r17, r11
    6324:	24 f0       	brlt	.+8      	; 0x632e <vfprintf+0x384>
    6326:	90 e0       	ldi	r25, 0x00	; 0
    6328:	b3 01       	movw	r22, r6
    632a:	12 d4       	rcall	.+2084   	; 0x6b50 <fputc>
    632c:	e2 cf       	rjmp	.-60     	; 0x62f2 <vfprintf+0x348>
    632e:	0c 15       	cp	r16, r12
    6330:	1d 05       	cpc	r17, r13
    6332:	39 f4       	brne	.+14     	; 0x6342 <vfprintf+0x398>
    6334:	9a 81       	ldd	r25, Y+2	; 0x02
    6336:	96 33       	cpi	r25, 0x36	; 54
    6338:	18 f4       	brcc	.+6      	; 0x6340 <vfprintf+0x396>
    633a:	95 33       	cpi	r25, 0x35	; 53
    633c:	11 f4       	brne	.+4      	; 0x6342 <vfprintf+0x398>
    633e:	24 fe       	sbrs	r2, 4
    6340:	81 e3       	ldi	r24, 0x31	; 49
    6342:	90 e0       	ldi	r25, 0x00	; 0
    6344:	45 c0       	rjmp	.+138    	; 0x63d0 <vfprintf+0x426>
    6346:	8a 81       	ldd	r24, Y+2	; 0x02
    6348:	81 33       	cpi	r24, 0x31	; 49
    634a:	09 f0       	breq	.+2      	; 0x634e <vfprintf+0x3a4>
    634c:	0f 7e       	andi	r16, 0xEF	; 239
    634e:	90 e0       	ldi	r25, 0x00	; 0
    6350:	b3 01       	movw	r22, r6
    6352:	fe d3       	rcall	.+2044   	; 0x6b50 <fputc>
    6354:	99 20       	and	r9, r9
    6356:	91 f0       	breq	.+36     	; 0x637c <vfprintf+0x3d2>
    6358:	8e e2       	ldi	r24, 0x2E	; 46
    635a:	90 e0       	ldi	r25, 0x00	; 0
    635c:	b3 01       	movw	r22, r6
    635e:	f8 d3       	rcall	.+2032   	; 0x6b50 <fputc>
    6360:	12 e0       	ldi	r17, 0x02	; 2
    6362:	e1 e0       	ldi	r30, 0x01	; 1
    6364:	f0 e0       	ldi	r31, 0x00	; 0
    6366:	ec 0f       	add	r30, r28
    6368:	fd 1f       	adc	r31, r29
    636a:	e1 0f       	add	r30, r17
    636c:	f1 1d       	adc	r31, r1
    636e:	1f 5f       	subi	r17, 0xFF	; 255
    6370:	80 81       	ld	r24, Z
    6372:	90 e0       	ldi	r25, 0x00	; 0
    6374:	b3 01       	movw	r22, r6
    6376:	ec d3       	rcall	.+2008   	; 0x6b50 <fputc>
    6378:	9a 94       	dec	r9
    637a:	99 f7       	brne	.-26     	; 0x6362 <vfprintf+0x3b8>
    637c:	44 fc       	sbrc	r4, 4
    637e:	03 c0       	rjmp	.+6      	; 0x6386 <vfprintf+0x3dc>
    6380:	85 e6       	ldi	r24, 0x65	; 101
    6382:	90 e0       	ldi	r25, 0x00	; 0
    6384:	02 c0       	rjmp	.+4      	; 0x638a <vfprintf+0x3e0>
    6386:	85 e4       	ldi	r24, 0x45	; 69
    6388:	90 e0       	ldi	r25, 0x00	; 0
    638a:	b3 01       	movw	r22, r6
    638c:	e1 d3       	rcall	.+1986   	; 0x6b50 <fputc>
    638e:	d7 fc       	sbrc	r13, 7
    6390:	05 c0       	rjmp	.+10     	; 0x639c <vfprintf+0x3f2>
    6392:	c1 14       	cp	r12, r1
    6394:	d1 04       	cpc	r13, r1
    6396:	41 f4       	brne	.+16     	; 0x63a8 <vfprintf+0x3fe>
    6398:	04 ff       	sbrs	r16, 4
    639a:	06 c0       	rjmp	.+12     	; 0x63a8 <vfprintf+0x3fe>
    639c:	d0 94       	com	r13
    639e:	c1 94       	neg	r12
    63a0:	d1 08       	sbc	r13, r1
    63a2:	d3 94       	inc	r13
    63a4:	8d e2       	ldi	r24, 0x2D	; 45
    63a6:	01 c0       	rjmp	.+2      	; 0x63aa <vfprintf+0x400>
    63a8:	8b e2       	ldi	r24, 0x2B	; 43
    63aa:	90 e0       	ldi	r25, 0x00	; 0
    63ac:	b3 01       	movw	r22, r6
    63ae:	d0 d3       	rcall	.+1952   	; 0x6b50 <fputc>
    63b0:	80 e3       	ldi	r24, 0x30	; 48
    63b2:	05 c0       	rjmp	.+10     	; 0x63be <vfprintf+0x414>
    63b4:	8f 5f       	subi	r24, 0xFF	; 255
    63b6:	26 ef       	ldi	r18, 0xF6	; 246
    63b8:	3f ef       	ldi	r19, 0xFF	; 255
    63ba:	c2 0e       	add	r12, r18
    63bc:	d3 1e       	adc	r13, r19
    63be:	3a e0       	ldi	r19, 0x0A	; 10
    63c0:	c3 16       	cp	r12, r19
    63c2:	d1 04       	cpc	r13, r1
    63c4:	bc f7       	brge	.-18     	; 0x63b4 <vfprintf+0x40a>
    63c6:	90 e0       	ldi	r25, 0x00	; 0
    63c8:	b3 01       	movw	r22, r6
    63ca:	c2 d3       	rcall	.+1924   	; 0x6b50 <fputc>
    63cc:	c6 01       	movw	r24, r12
    63ce:	c0 96       	adiw	r24, 0x30	; 48
    63d0:	b3 01       	movw	r22, r6
    63d2:	be d3       	rcall	.+1916   	; 0x6b50 <fputc>
    63d4:	cc 84       	ldd	r12, Y+12	; 0x0c
    63d6:	dd 84       	ldd	r13, Y+13	; 0x0d
    63d8:	46 c1       	rjmp	.+652    	; 0x6666 <vfprintf+0x6bc>
    63da:	93 36       	cpi	r25, 0x63	; 99
    63dc:	31 f0       	breq	.+12     	; 0x63ea <vfprintf+0x440>
    63de:	93 37       	cpi	r25, 0x73	; 115
    63e0:	99 f0       	breq	.+38     	; 0x6408 <vfprintf+0x45e>
    63e2:	93 35       	cpi	r25, 0x53	; 83
    63e4:	09 f0       	breq	.+2      	; 0x63e8 <vfprintf+0x43e>
    63e6:	55 c0       	rjmp	.+170    	; 0x6492 <vfprintf+0x4e8>
    63e8:	22 c0       	rjmp	.+68     	; 0x642e <vfprintf+0x484>
    63ea:	f6 01       	movw	r30, r12
    63ec:	80 81       	ld	r24, Z
    63ee:	89 83       	std	Y+1, r24	; 0x01
    63f0:	5e 01       	movw	r10, r28
    63f2:	08 94       	sec
    63f4:	a1 1c       	adc	r10, r1
    63f6:	b1 1c       	adc	r11, r1
    63f8:	22 e0       	ldi	r18, 0x02	; 2
    63fa:	30 e0       	ldi	r19, 0x00	; 0
    63fc:	c2 0e       	add	r12, r18
    63fe:	d3 1e       	adc	r13, r19
    6400:	21 e0       	ldi	r18, 0x01	; 1
    6402:	e2 2e       	mov	r14, r18
    6404:	f1 2c       	mov	r15, r1
    6406:	11 c0       	rjmp	.+34     	; 0x642a <vfprintf+0x480>
    6408:	f6 01       	movw	r30, r12
    640a:	a0 80       	ld	r10, Z
    640c:	b1 80       	ldd	r11, Z+1	; 0x01
    640e:	16 fd       	sbrc	r17, 6
    6410:	03 c0       	rjmp	.+6      	; 0x6418 <vfprintf+0x46e>
    6412:	6f ef       	ldi	r22, 0xFF	; 255
    6414:	7f ef       	ldi	r23, 0xFF	; 255
    6416:	02 c0       	rjmp	.+4      	; 0x641c <vfprintf+0x472>
    6418:	69 2d       	mov	r22, r9
    641a:	70 e0       	ldi	r23, 0x00	; 0
    641c:	22 e0       	ldi	r18, 0x02	; 2
    641e:	30 e0       	ldi	r19, 0x00	; 0
    6420:	c2 0e       	add	r12, r18
    6422:	d3 1e       	adc	r13, r19
    6424:	c5 01       	movw	r24, r10
    6426:	89 d3       	rcall	.+1810   	; 0x6b3a <strnlen>
    6428:	7c 01       	movw	r14, r24
    642a:	1f 77       	andi	r17, 0x7F	; 127
    642c:	12 c0       	rjmp	.+36     	; 0x6452 <vfprintf+0x4a8>
    642e:	f6 01       	movw	r30, r12
    6430:	a0 80       	ld	r10, Z
    6432:	b1 80       	ldd	r11, Z+1	; 0x01
    6434:	16 fd       	sbrc	r17, 6
    6436:	03 c0       	rjmp	.+6      	; 0x643e <vfprintf+0x494>
    6438:	6f ef       	ldi	r22, 0xFF	; 255
    643a:	7f ef       	ldi	r23, 0xFF	; 255
    643c:	02 c0       	rjmp	.+4      	; 0x6442 <vfprintf+0x498>
    643e:	69 2d       	mov	r22, r9
    6440:	70 e0       	ldi	r23, 0x00	; 0
    6442:	22 e0       	ldi	r18, 0x02	; 2
    6444:	30 e0       	ldi	r19, 0x00	; 0
    6446:	c2 0e       	add	r12, r18
    6448:	d3 1e       	adc	r13, r19
    644a:	c5 01       	movw	r24, r10
    644c:	6b d3       	rcall	.+1750   	; 0x6b24 <strnlen_P>
    644e:	7c 01       	movw	r14, r24
    6450:	10 68       	ori	r17, 0x80	; 128
    6452:	13 ff       	sbrs	r17, 3
    6454:	06 c0       	rjmp	.+12     	; 0x6462 <vfprintf+0x4b8>
    6456:	19 c0       	rjmp	.+50     	; 0x648a <vfprintf+0x4e0>
    6458:	80 e2       	ldi	r24, 0x20	; 32
    645a:	90 e0       	ldi	r25, 0x00	; 0
    645c:	b3 01       	movw	r22, r6
    645e:	78 d3       	rcall	.+1776   	; 0x6b50 <fputc>
    6460:	8a 94       	dec	r8
    6462:	88 2d       	mov	r24, r8
    6464:	90 e0       	ldi	r25, 0x00	; 0
    6466:	e8 16       	cp	r14, r24
    6468:	f9 06       	cpc	r15, r25
    646a:	b0 f3       	brcs	.-20     	; 0x6458 <vfprintf+0x4ae>
    646c:	0e c0       	rjmp	.+28     	; 0x648a <vfprintf+0x4e0>
    646e:	f5 01       	movw	r30, r10
    6470:	17 fd       	sbrc	r17, 7
    6472:	85 91       	lpm	r24, Z+
    6474:	17 ff       	sbrs	r17, 7
    6476:	81 91       	ld	r24, Z+
    6478:	5f 01       	movw	r10, r30
    647a:	90 e0       	ldi	r25, 0x00	; 0
    647c:	b3 01       	movw	r22, r6
    647e:	68 d3       	rcall	.+1744   	; 0x6b50 <fputc>
    6480:	81 10       	cpse	r8, r1
    6482:	8a 94       	dec	r8
    6484:	08 94       	sec
    6486:	e1 08       	sbc	r14, r1
    6488:	f1 08       	sbc	r15, r1
    648a:	e1 14       	cp	r14, r1
    648c:	f1 04       	cpc	r15, r1
    648e:	79 f7       	brne	.-34     	; 0x646e <vfprintf+0x4c4>
    6490:	ea c0       	rjmp	.+468    	; 0x6666 <vfprintf+0x6bc>
    6492:	94 36       	cpi	r25, 0x64	; 100
    6494:	11 f0       	breq	.+4      	; 0x649a <vfprintf+0x4f0>
    6496:	99 36       	cpi	r25, 0x69	; 105
    6498:	81 f5       	brne	.+96     	; 0x64fa <vfprintf+0x550>
    649a:	17 ff       	sbrs	r17, 7
    649c:	08 c0       	rjmp	.+16     	; 0x64ae <vfprintf+0x504>
    649e:	f6 01       	movw	r30, r12
    64a0:	20 81       	ld	r18, Z
    64a2:	31 81       	ldd	r19, Z+1	; 0x01
    64a4:	42 81       	ldd	r20, Z+2	; 0x02
    64a6:	53 81       	ldd	r21, Z+3	; 0x03
    64a8:	84 e0       	ldi	r24, 0x04	; 4
    64aa:	90 e0       	ldi	r25, 0x00	; 0
    64ac:	0a c0       	rjmp	.+20     	; 0x64c2 <vfprintf+0x518>
    64ae:	f6 01       	movw	r30, r12
    64b0:	80 81       	ld	r24, Z
    64b2:	91 81       	ldd	r25, Z+1	; 0x01
    64b4:	9c 01       	movw	r18, r24
    64b6:	44 27       	eor	r20, r20
    64b8:	37 fd       	sbrc	r19, 7
    64ba:	40 95       	com	r20
    64bc:	54 2f       	mov	r21, r20
    64be:	82 e0       	ldi	r24, 0x02	; 2
    64c0:	90 e0       	ldi	r25, 0x00	; 0
    64c2:	c8 0e       	add	r12, r24
    64c4:	d9 1e       	adc	r13, r25
    64c6:	9f e6       	ldi	r25, 0x6F	; 111
    64c8:	f9 2e       	mov	r15, r25
    64ca:	f1 22       	and	r15, r17
    64cc:	57 ff       	sbrs	r21, 7
    64ce:	09 c0       	rjmp	.+18     	; 0x64e2 <vfprintf+0x538>
    64d0:	50 95       	com	r21
    64d2:	40 95       	com	r20
    64d4:	30 95       	com	r19
    64d6:	21 95       	neg	r18
    64d8:	3f 4f       	sbci	r19, 0xFF	; 255
    64da:	4f 4f       	sbci	r20, 0xFF	; 255
    64dc:	5f 4f       	sbci	r21, 0xFF	; 255
    64de:	90 e8       	ldi	r25, 0x80	; 128
    64e0:	f9 2a       	or	r15, r25
    64e2:	ca 01       	movw	r24, r20
    64e4:	b9 01       	movw	r22, r18
    64e6:	ae 01       	movw	r20, r28
    64e8:	4f 5f       	subi	r20, 0xFF	; 255
    64ea:	5f 4f       	sbci	r21, 0xFF	; 255
    64ec:	2a e0       	ldi	r18, 0x0A	; 10
    64ee:	30 e0       	ldi	r19, 0x00	; 0
    64f0:	a2 d3       	rcall	.+1860   	; 0x6c36 <__ultoa_invert>
    64f2:	e8 2e       	mov	r14, r24
    64f4:	e8 89       	ldd	r30, Y+16	; 0x10
    64f6:	ee 1a       	sub	r14, r30
    64f8:	40 c0       	rjmp	.+128    	; 0x657a <vfprintf+0x5d0>
    64fa:	95 37       	cpi	r25, 0x75	; 117
    64fc:	21 f4       	brne	.+8      	; 0x6506 <vfprintf+0x55c>
    64fe:	1f 7e       	andi	r17, 0xEF	; 239
    6500:	2a e0       	ldi	r18, 0x0A	; 10
    6502:	30 e0       	ldi	r19, 0x00	; 0
    6504:	1c c0       	rjmp	.+56     	; 0x653e <vfprintf+0x594>
    6506:	19 7f       	andi	r17, 0xF9	; 249
    6508:	9f 36       	cpi	r25, 0x6F	; 111
    650a:	61 f0       	breq	.+24     	; 0x6524 <vfprintf+0x57a>
    650c:	90 37       	cpi	r25, 0x70	; 112
    650e:	20 f4       	brcc	.+8      	; 0x6518 <vfprintf+0x56e>
    6510:	98 35       	cpi	r25, 0x58	; 88
    6512:	09 f0       	breq	.+2      	; 0x6516 <vfprintf+0x56c>
    6514:	ab c0       	rjmp	.+342    	; 0x666c <vfprintf+0x6c2>
    6516:	0f c0       	rjmp	.+30     	; 0x6536 <vfprintf+0x58c>
    6518:	90 37       	cpi	r25, 0x70	; 112
    651a:	39 f0       	breq	.+14     	; 0x652a <vfprintf+0x580>
    651c:	98 37       	cpi	r25, 0x78	; 120
    651e:	09 f0       	breq	.+2      	; 0x6522 <vfprintf+0x578>
    6520:	a5 c0       	rjmp	.+330    	; 0x666c <vfprintf+0x6c2>
    6522:	04 c0       	rjmp	.+8      	; 0x652c <vfprintf+0x582>
    6524:	28 e0       	ldi	r18, 0x08	; 8
    6526:	30 e0       	ldi	r19, 0x00	; 0
    6528:	0a c0       	rjmp	.+20     	; 0x653e <vfprintf+0x594>
    652a:	10 61       	ori	r17, 0x10	; 16
    652c:	14 fd       	sbrc	r17, 4
    652e:	14 60       	ori	r17, 0x04	; 4
    6530:	20 e1       	ldi	r18, 0x10	; 16
    6532:	30 e0       	ldi	r19, 0x00	; 0
    6534:	04 c0       	rjmp	.+8      	; 0x653e <vfprintf+0x594>
    6536:	14 fd       	sbrc	r17, 4
    6538:	16 60       	ori	r17, 0x06	; 6
    653a:	20 e1       	ldi	r18, 0x10	; 16
    653c:	32 e0       	ldi	r19, 0x02	; 2
    653e:	17 ff       	sbrs	r17, 7
    6540:	08 c0       	rjmp	.+16     	; 0x6552 <vfprintf+0x5a8>
    6542:	f6 01       	movw	r30, r12
    6544:	60 81       	ld	r22, Z
    6546:	71 81       	ldd	r23, Z+1	; 0x01
    6548:	82 81       	ldd	r24, Z+2	; 0x02
    654a:	93 81       	ldd	r25, Z+3	; 0x03
    654c:	44 e0       	ldi	r20, 0x04	; 4
    654e:	50 e0       	ldi	r21, 0x00	; 0
    6550:	08 c0       	rjmp	.+16     	; 0x6562 <vfprintf+0x5b8>
    6552:	f6 01       	movw	r30, r12
    6554:	80 81       	ld	r24, Z
    6556:	91 81       	ldd	r25, Z+1	; 0x01
    6558:	bc 01       	movw	r22, r24
    655a:	80 e0       	ldi	r24, 0x00	; 0
    655c:	90 e0       	ldi	r25, 0x00	; 0
    655e:	42 e0       	ldi	r20, 0x02	; 2
    6560:	50 e0       	ldi	r21, 0x00	; 0
    6562:	c4 0e       	add	r12, r20
    6564:	d5 1e       	adc	r13, r21
    6566:	ae 01       	movw	r20, r28
    6568:	4f 5f       	subi	r20, 0xFF	; 255
    656a:	5f 4f       	sbci	r21, 0xFF	; 255
    656c:	64 d3       	rcall	.+1736   	; 0x6c36 <__ultoa_invert>
    656e:	e8 2e       	mov	r14, r24
    6570:	58 89       	ldd	r21, Y+16	; 0x10
    6572:	e5 1a       	sub	r14, r21
    6574:	8f e7       	ldi	r24, 0x7F	; 127
    6576:	f8 2e       	mov	r15, r24
    6578:	f1 22       	and	r15, r17
    657a:	f6 fe       	sbrs	r15, 6
    657c:	0b c0       	rjmp	.+22     	; 0x6594 <vfprintf+0x5ea>
    657e:	8e ef       	ldi	r24, 0xFE	; 254
    6580:	f8 22       	and	r15, r24
    6582:	e9 14       	cp	r14, r9
    6584:	38 f4       	brcc	.+14     	; 0x6594 <vfprintf+0x5ea>
    6586:	f4 fe       	sbrs	r15, 4
    6588:	07 c0       	rjmp	.+14     	; 0x6598 <vfprintf+0x5ee>
    658a:	f2 fc       	sbrc	r15, 2
    658c:	05 c0       	rjmp	.+10     	; 0x6598 <vfprintf+0x5ee>
    658e:	9f ee       	ldi	r25, 0xEF	; 239
    6590:	f9 22       	and	r15, r25
    6592:	02 c0       	rjmp	.+4      	; 0x6598 <vfprintf+0x5ee>
    6594:	1e 2d       	mov	r17, r14
    6596:	01 c0       	rjmp	.+2      	; 0x659a <vfprintf+0x5f0>
    6598:	19 2d       	mov	r17, r9
    659a:	f4 fe       	sbrs	r15, 4
    659c:	0d c0       	rjmp	.+26     	; 0x65b8 <vfprintf+0x60e>
    659e:	fe 01       	movw	r30, r28
    65a0:	ee 0d       	add	r30, r14
    65a2:	f1 1d       	adc	r31, r1
    65a4:	80 81       	ld	r24, Z
    65a6:	80 33       	cpi	r24, 0x30	; 48
    65a8:	19 f4       	brne	.+6      	; 0x65b0 <vfprintf+0x606>
    65aa:	e9 ee       	ldi	r30, 0xE9	; 233
    65ac:	fe 22       	and	r15, r30
    65ae:	08 c0       	rjmp	.+16     	; 0x65c0 <vfprintf+0x616>
    65b0:	1f 5f       	subi	r17, 0xFF	; 255
    65b2:	f2 fe       	sbrs	r15, 2
    65b4:	05 c0       	rjmp	.+10     	; 0x65c0 <vfprintf+0x616>
    65b6:	03 c0       	rjmp	.+6      	; 0x65be <vfprintf+0x614>
    65b8:	8f 2d       	mov	r24, r15
    65ba:	86 78       	andi	r24, 0x86	; 134
    65bc:	09 f0       	breq	.+2      	; 0x65c0 <vfprintf+0x616>
    65be:	1f 5f       	subi	r17, 0xFF	; 255
    65c0:	0f 2d       	mov	r16, r15
    65c2:	f3 fc       	sbrc	r15, 3
    65c4:	13 c0       	rjmp	.+38     	; 0x65ec <vfprintf+0x642>
    65c6:	f0 fe       	sbrs	r15, 0
    65c8:	0e c0       	rjmp	.+28     	; 0x65e6 <vfprintf+0x63c>
    65ca:	18 15       	cp	r17, r8
    65cc:	10 f0       	brcs	.+4      	; 0x65d2 <vfprintf+0x628>
    65ce:	9e 2c       	mov	r9, r14
    65d0:	0a c0       	rjmp	.+20     	; 0x65e6 <vfprintf+0x63c>
    65d2:	9e 2c       	mov	r9, r14
    65d4:	98 0c       	add	r9, r8
    65d6:	91 1a       	sub	r9, r17
    65d8:	18 2d       	mov	r17, r8
    65da:	05 c0       	rjmp	.+10     	; 0x65e6 <vfprintf+0x63c>
    65dc:	80 e2       	ldi	r24, 0x20	; 32
    65de:	90 e0       	ldi	r25, 0x00	; 0
    65e0:	b3 01       	movw	r22, r6
    65e2:	b6 d2       	rcall	.+1388   	; 0x6b50 <fputc>
    65e4:	1f 5f       	subi	r17, 0xFF	; 255
    65e6:	18 15       	cp	r17, r8
    65e8:	c8 f3       	brcs	.-14     	; 0x65dc <vfprintf+0x632>
    65ea:	04 c0       	rjmp	.+8      	; 0x65f4 <vfprintf+0x64a>
    65ec:	18 15       	cp	r17, r8
    65ee:	10 f4       	brcc	.+4      	; 0x65f4 <vfprintf+0x64a>
    65f0:	81 1a       	sub	r8, r17
    65f2:	01 c0       	rjmp	.+2      	; 0x65f6 <vfprintf+0x64c>
    65f4:	88 24       	eor	r8, r8
    65f6:	04 ff       	sbrs	r16, 4
    65f8:	0e c0       	rjmp	.+28     	; 0x6616 <vfprintf+0x66c>
    65fa:	80 e3       	ldi	r24, 0x30	; 48
    65fc:	90 e0       	ldi	r25, 0x00	; 0
    65fe:	b3 01       	movw	r22, r6
    6600:	a7 d2       	rcall	.+1358   	; 0x6b50 <fputc>
    6602:	02 ff       	sbrs	r16, 2
    6604:	1b c0       	rjmp	.+54     	; 0x663c <vfprintf+0x692>
    6606:	01 fd       	sbrc	r16, 1
    6608:	03 c0       	rjmp	.+6      	; 0x6610 <vfprintf+0x666>
    660a:	88 e7       	ldi	r24, 0x78	; 120
    660c:	90 e0       	ldi	r25, 0x00	; 0
    660e:	0e c0       	rjmp	.+28     	; 0x662c <vfprintf+0x682>
    6610:	88 e5       	ldi	r24, 0x58	; 88
    6612:	90 e0       	ldi	r25, 0x00	; 0
    6614:	0b c0       	rjmp	.+22     	; 0x662c <vfprintf+0x682>
    6616:	80 2f       	mov	r24, r16
    6618:	86 78       	andi	r24, 0x86	; 134
    661a:	81 f0       	breq	.+32     	; 0x663c <vfprintf+0x692>
    661c:	01 ff       	sbrs	r16, 1
    661e:	02 c0       	rjmp	.+4      	; 0x6624 <vfprintf+0x67a>
    6620:	8b e2       	ldi	r24, 0x2B	; 43
    6622:	01 c0       	rjmp	.+2      	; 0x6626 <vfprintf+0x67c>
    6624:	80 e2       	ldi	r24, 0x20	; 32
    6626:	f7 fc       	sbrc	r15, 7
    6628:	8d e2       	ldi	r24, 0x2D	; 45
    662a:	90 e0       	ldi	r25, 0x00	; 0
    662c:	b3 01       	movw	r22, r6
    662e:	90 d2       	rcall	.+1312   	; 0x6b50 <fputc>
    6630:	05 c0       	rjmp	.+10     	; 0x663c <vfprintf+0x692>
    6632:	80 e3       	ldi	r24, 0x30	; 48
    6634:	90 e0       	ldi	r25, 0x00	; 0
    6636:	b3 01       	movw	r22, r6
    6638:	8b d2       	rcall	.+1302   	; 0x6b50 <fputc>
    663a:	9a 94       	dec	r9
    663c:	e9 14       	cp	r14, r9
    663e:	c8 f3       	brcs	.-14     	; 0x6632 <vfprintf+0x688>
    6640:	ea 94       	dec	r14
    6642:	e1 e0       	ldi	r30, 0x01	; 1
    6644:	f0 e0       	ldi	r31, 0x00	; 0
    6646:	ec 0f       	add	r30, r28
    6648:	fd 1f       	adc	r31, r29
    664a:	ee 0d       	add	r30, r14
    664c:	f1 1d       	adc	r31, r1
    664e:	80 81       	ld	r24, Z
    6650:	90 e0       	ldi	r25, 0x00	; 0
    6652:	b3 01       	movw	r22, r6
    6654:	7d d2       	rcall	.+1274   	; 0x6b50 <fputc>
    6656:	ee 20       	and	r14, r14
    6658:	99 f7       	brne	.-26     	; 0x6640 <vfprintf+0x696>
    665a:	05 c0       	rjmp	.+10     	; 0x6666 <vfprintf+0x6bc>
    665c:	80 e2       	ldi	r24, 0x20	; 32
    665e:	90 e0       	ldi	r25, 0x00	; 0
    6660:	b3 01       	movw	r22, r6
    6662:	76 d2       	rcall	.+1260   	; 0x6b50 <fputc>
    6664:	8a 94       	dec	r8
    6666:	88 20       	and	r8, r8
    6668:	c9 f7       	brne	.-14     	; 0x665c <vfprintf+0x6b2>
    666a:	b6 cc       	rjmp	.-1684   	; 0x5fd8 <vfprintf+0x2e>
    666c:	f3 01       	movw	r30, r6
    666e:	66 81       	ldd	r22, Z+6	; 0x06
    6670:	77 81       	ldd	r23, Z+7	; 0x07
    6672:	cb 01       	movw	r24, r22
    6674:	61 96       	adiw	r28, 0x11	; 17
    6676:	e2 e1       	ldi	r30, 0x12	; 18
    6678:	5d c0       	rjmp	.+186    	; 0x6734 <__epilogue_restores__>

0000667a <__mulsi3>:
    667a:	62 9f       	mul	r22, r18
    667c:	d0 01       	movw	r26, r0
    667e:	73 9f       	mul	r23, r19
    6680:	f0 01       	movw	r30, r0
    6682:	82 9f       	mul	r24, r18
    6684:	e0 0d       	add	r30, r0
    6686:	f1 1d       	adc	r31, r1
    6688:	64 9f       	mul	r22, r20
    668a:	e0 0d       	add	r30, r0
    668c:	f1 1d       	adc	r31, r1
    668e:	92 9f       	mul	r25, r18
    6690:	f0 0d       	add	r31, r0
    6692:	83 9f       	mul	r24, r19
    6694:	f0 0d       	add	r31, r0
    6696:	74 9f       	mul	r23, r20
    6698:	f0 0d       	add	r31, r0
    669a:	65 9f       	mul	r22, r21
    669c:	f0 0d       	add	r31, r0
    669e:	99 27       	eor	r25, r25
    66a0:	72 9f       	mul	r23, r18
    66a2:	b0 0d       	add	r27, r0
    66a4:	e1 1d       	adc	r30, r1
    66a6:	f9 1f       	adc	r31, r25
    66a8:	63 9f       	mul	r22, r19
    66aa:	b0 0d       	add	r27, r0
    66ac:	e1 1d       	adc	r30, r1
    66ae:	f9 1f       	adc	r31, r25
    66b0:	bd 01       	movw	r22, r26
    66b2:	cf 01       	movw	r24, r30
    66b4:	11 24       	eor	r1, r1
    66b6:	08 95       	ret

000066b8 <__udivmodsi4>:
    66b8:	a1 e2       	ldi	r26, 0x21	; 33
    66ba:	1a 2e       	mov	r1, r26
    66bc:	aa 1b       	sub	r26, r26
    66be:	bb 1b       	sub	r27, r27
    66c0:	fd 01       	movw	r30, r26
    66c2:	0d c0       	rjmp	.+26     	; 0x66de <__udivmodsi4_ep>

000066c4 <__udivmodsi4_loop>:
    66c4:	aa 1f       	adc	r26, r26
    66c6:	bb 1f       	adc	r27, r27
    66c8:	ee 1f       	adc	r30, r30
    66ca:	ff 1f       	adc	r31, r31
    66cc:	a2 17       	cp	r26, r18
    66ce:	b3 07       	cpc	r27, r19
    66d0:	e4 07       	cpc	r30, r20
    66d2:	f5 07       	cpc	r31, r21
    66d4:	20 f0       	brcs	.+8      	; 0x66de <__udivmodsi4_ep>
    66d6:	a2 1b       	sub	r26, r18
    66d8:	b3 0b       	sbc	r27, r19
    66da:	e4 0b       	sbc	r30, r20
    66dc:	f5 0b       	sbc	r31, r21

000066de <__udivmodsi4_ep>:
    66de:	66 1f       	adc	r22, r22
    66e0:	77 1f       	adc	r23, r23
    66e2:	88 1f       	adc	r24, r24
    66e4:	99 1f       	adc	r25, r25
    66e6:	1a 94       	dec	r1
    66e8:	69 f7       	brne	.-38     	; 0x66c4 <__udivmodsi4_loop>
    66ea:	60 95       	com	r22
    66ec:	70 95       	com	r23
    66ee:	80 95       	com	r24
    66f0:	90 95       	com	r25
    66f2:	9b 01       	movw	r18, r22
    66f4:	ac 01       	movw	r20, r24
    66f6:	bd 01       	movw	r22, r26
    66f8:	cf 01       	movw	r24, r30
    66fa:	08 95       	ret

000066fc <__prologue_saves__>:
    66fc:	2f 92       	push	r2
    66fe:	3f 92       	push	r3
    6700:	4f 92       	push	r4
    6702:	5f 92       	push	r5
    6704:	6f 92       	push	r6
    6706:	7f 92       	push	r7
    6708:	8f 92       	push	r8
    670a:	9f 92       	push	r9
    670c:	af 92       	push	r10
    670e:	bf 92       	push	r11
    6710:	cf 92       	push	r12
    6712:	df 92       	push	r13
    6714:	ef 92       	push	r14
    6716:	ff 92       	push	r15
    6718:	0f 93       	push	r16
    671a:	1f 93       	push	r17
    671c:	cf 93       	push	r28
    671e:	df 93       	push	r29
    6720:	cd b7       	in	r28, 0x3d	; 61
    6722:	de b7       	in	r29, 0x3e	; 62
    6724:	ca 1b       	sub	r28, r26
    6726:	db 0b       	sbc	r29, r27
    6728:	0f b6       	in	r0, 0x3f	; 63
    672a:	f8 94       	cli
    672c:	de bf       	out	0x3e, r29	; 62
    672e:	0f be       	out	0x3f, r0	; 63
    6730:	cd bf       	out	0x3d, r28	; 61
    6732:	09 94       	ijmp

00006734 <__epilogue_restores__>:
    6734:	2a 88       	ldd	r2, Y+18	; 0x12
    6736:	39 88       	ldd	r3, Y+17	; 0x11
    6738:	48 88       	ldd	r4, Y+16	; 0x10
    673a:	5f 84       	ldd	r5, Y+15	; 0x0f
    673c:	6e 84       	ldd	r6, Y+14	; 0x0e
    673e:	7d 84       	ldd	r7, Y+13	; 0x0d
    6740:	8c 84       	ldd	r8, Y+12	; 0x0c
    6742:	9b 84       	ldd	r9, Y+11	; 0x0b
    6744:	aa 84       	ldd	r10, Y+10	; 0x0a
    6746:	b9 84       	ldd	r11, Y+9	; 0x09
    6748:	c8 84       	ldd	r12, Y+8	; 0x08
    674a:	df 80       	ldd	r13, Y+7	; 0x07
    674c:	ee 80       	ldd	r14, Y+6	; 0x06
    674e:	fd 80       	ldd	r15, Y+5	; 0x05
    6750:	0c 81       	ldd	r16, Y+4	; 0x04
    6752:	1b 81       	ldd	r17, Y+3	; 0x03
    6754:	aa 81       	ldd	r26, Y+2	; 0x02
    6756:	b9 81       	ldd	r27, Y+1	; 0x01
    6758:	ce 0f       	add	r28, r30
    675a:	d1 1d       	adc	r29, r1
    675c:	0f b6       	in	r0, 0x3f	; 63
    675e:	f8 94       	cli
    6760:	de bf       	out	0x3e, r29	; 62
    6762:	0f be       	out	0x3f, r0	; 63
    6764:	cd bf       	out	0x3d, r28	; 61
    6766:	ed 01       	movw	r28, r26
    6768:	08 95       	ret

0000676a <malloc>:
    676a:	cf 93       	push	r28
    676c:	df 93       	push	r29
    676e:	bc 01       	movw	r22, r24
    6770:	82 30       	cpi	r24, 0x02	; 2
    6772:	91 05       	cpc	r25, r1
    6774:	10 f4       	brcc	.+4      	; 0x677a <malloc+0x10>
    6776:	62 e0       	ldi	r22, 0x02	; 2
    6778:	70 e0       	ldi	r23, 0x00	; 0
    677a:	a0 91 31 08 	lds	r26, 0x0831
    677e:	b0 91 32 08 	lds	r27, 0x0832
    6782:	ed 01       	movw	r28, r26
    6784:	e0 e0       	ldi	r30, 0x00	; 0
    6786:	f0 e0       	ldi	r31, 0x00	; 0
    6788:	40 e0       	ldi	r20, 0x00	; 0
    678a:	50 e0       	ldi	r21, 0x00	; 0
    678c:	21 c0       	rjmp	.+66     	; 0x67d0 <malloc+0x66>
    678e:	88 81       	ld	r24, Y
    6790:	99 81       	ldd	r25, Y+1	; 0x01
    6792:	86 17       	cp	r24, r22
    6794:	97 07       	cpc	r25, r23
    6796:	69 f4       	brne	.+26     	; 0x67b2 <malloc+0x48>
    6798:	8a 81       	ldd	r24, Y+2	; 0x02
    679a:	9b 81       	ldd	r25, Y+3	; 0x03
    679c:	30 97       	sbiw	r30, 0x00	; 0
    679e:	19 f0       	breq	.+6      	; 0x67a6 <malloc+0x3c>
    67a0:	93 83       	std	Z+3, r25	; 0x03
    67a2:	82 83       	std	Z+2, r24	; 0x02
    67a4:	04 c0       	rjmp	.+8      	; 0x67ae <malloc+0x44>
    67a6:	90 93 32 08 	sts	0x0832, r25
    67aa:	80 93 31 08 	sts	0x0831, r24
    67ae:	fe 01       	movw	r30, r28
    67b0:	34 c0       	rjmp	.+104    	; 0x681a <malloc+0xb0>
    67b2:	68 17       	cp	r22, r24
    67b4:	79 07       	cpc	r23, r25
    67b6:	38 f4       	brcc	.+14     	; 0x67c6 <malloc+0x5c>
    67b8:	41 15       	cp	r20, r1
    67ba:	51 05       	cpc	r21, r1
    67bc:	19 f0       	breq	.+6      	; 0x67c4 <malloc+0x5a>
    67be:	84 17       	cp	r24, r20
    67c0:	95 07       	cpc	r25, r21
    67c2:	08 f4       	brcc	.+2      	; 0x67c6 <malloc+0x5c>
    67c4:	ac 01       	movw	r20, r24
    67c6:	fe 01       	movw	r30, r28
    67c8:	8a 81       	ldd	r24, Y+2	; 0x02
    67ca:	9b 81       	ldd	r25, Y+3	; 0x03
    67cc:	9c 01       	movw	r18, r24
    67ce:	e9 01       	movw	r28, r18
    67d0:	20 97       	sbiw	r28, 0x00	; 0
    67d2:	e9 f6       	brne	.-70     	; 0x678e <malloc+0x24>
    67d4:	41 15       	cp	r20, r1
    67d6:	51 05       	cpc	r21, r1
    67d8:	a9 f1       	breq	.+106    	; 0x6844 <malloc+0xda>
    67da:	ca 01       	movw	r24, r20
    67dc:	86 1b       	sub	r24, r22
    67de:	97 0b       	sbc	r25, r23
    67e0:	04 97       	sbiw	r24, 0x04	; 4
    67e2:	08 f4       	brcc	.+2      	; 0x67e6 <malloc+0x7c>
    67e4:	ba 01       	movw	r22, r20
    67e6:	e0 e0       	ldi	r30, 0x00	; 0
    67e8:	f0 e0       	ldi	r31, 0x00	; 0
    67ea:	2a c0       	rjmp	.+84     	; 0x6840 <malloc+0xd6>
    67ec:	8d 91       	ld	r24, X+
    67ee:	9c 91       	ld	r25, X
    67f0:	11 97       	sbiw	r26, 0x01	; 1
    67f2:	84 17       	cp	r24, r20
    67f4:	95 07       	cpc	r25, r21
    67f6:	f9 f4       	brne	.+62     	; 0x6836 <malloc+0xcc>
    67f8:	64 17       	cp	r22, r20
    67fa:	75 07       	cpc	r23, r21
    67fc:	81 f4       	brne	.+32     	; 0x681e <malloc+0xb4>
    67fe:	12 96       	adiw	r26, 0x02	; 2
    6800:	8d 91       	ld	r24, X+
    6802:	9c 91       	ld	r25, X
    6804:	13 97       	sbiw	r26, 0x03	; 3
    6806:	30 97       	sbiw	r30, 0x00	; 0
    6808:	19 f0       	breq	.+6      	; 0x6810 <malloc+0xa6>
    680a:	93 83       	std	Z+3, r25	; 0x03
    680c:	82 83       	std	Z+2, r24	; 0x02
    680e:	04 c0       	rjmp	.+8      	; 0x6818 <malloc+0xae>
    6810:	90 93 32 08 	sts	0x0832, r25
    6814:	80 93 31 08 	sts	0x0831, r24
    6818:	fd 01       	movw	r30, r26
    681a:	32 96       	adiw	r30, 0x02	; 2
    681c:	4f c0       	rjmp	.+158    	; 0x68bc <malloc+0x152>
    681e:	ca 01       	movw	r24, r20
    6820:	86 1b       	sub	r24, r22
    6822:	97 0b       	sbc	r25, r23
    6824:	fd 01       	movw	r30, r26
    6826:	e8 0f       	add	r30, r24
    6828:	f9 1f       	adc	r31, r25
    682a:	61 93       	st	Z+, r22
    682c:	71 93       	st	Z+, r23
    682e:	02 97       	sbiw	r24, 0x02	; 2
    6830:	8d 93       	st	X+, r24
    6832:	9c 93       	st	X, r25
    6834:	43 c0       	rjmp	.+134    	; 0x68bc <malloc+0x152>
    6836:	fd 01       	movw	r30, r26
    6838:	82 81       	ldd	r24, Z+2	; 0x02
    683a:	93 81       	ldd	r25, Z+3	; 0x03
    683c:	9c 01       	movw	r18, r24
    683e:	d9 01       	movw	r26, r18
    6840:	10 97       	sbiw	r26, 0x00	; 0
    6842:	a1 f6       	brne	.-88     	; 0x67ec <malloc+0x82>
    6844:	80 91 2f 08 	lds	r24, 0x082F
    6848:	90 91 30 08 	lds	r25, 0x0830
    684c:	89 2b       	or	r24, r25
    684e:	41 f4       	brne	.+16     	; 0x6860 <malloc+0xf6>
    6850:	80 91 65 04 	lds	r24, 0x0465
    6854:	90 91 66 04 	lds	r25, 0x0466
    6858:	90 93 30 08 	sts	0x0830, r25
    685c:	80 93 2f 08 	sts	0x082F, r24
    6860:	40 91 67 04 	lds	r20, 0x0467
    6864:	50 91 68 04 	lds	r21, 0x0468
    6868:	41 15       	cp	r20, r1
    686a:	51 05       	cpc	r21, r1
    686c:	41 f4       	brne	.+16     	; 0x687e <malloc+0x114>
    686e:	4d b7       	in	r20, 0x3d	; 61
    6870:	5e b7       	in	r21, 0x3e	; 62
    6872:	80 91 63 04 	lds	r24, 0x0463
    6876:	90 91 64 04 	lds	r25, 0x0464
    687a:	48 1b       	sub	r20, r24
    687c:	59 0b       	sbc	r21, r25
    687e:	20 91 2f 08 	lds	r18, 0x082F
    6882:	30 91 30 08 	lds	r19, 0x0830
    6886:	24 17       	cp	r18, r20
    6888:	35 07       	cpc	r19, r21
    688a:	b0 f4       	brcc	.+44     	; 0x68b8 <malloc+0x14e>
    688c:	ca 01       	movw	r24, r20
    688e:	82 1b       	sub	r24, r18
    6890:	93 0b       	sbc	r25, r19
    6892:	86 17       	cp	r24, r22
    6894:	97 07       	cpc	r25, r23
    6896:	80 f0       	brcs	.+32     	; 0x68b8 <malloc+0x14e>
    6898:	ab 01       	movw	r20, r22
    689a:	4e 5f       	subi	r20, 0xFE	; 254
    689c:	5f 4f       	sbci	r21, 0xFF	; 255
    689e:	84 17       	cp	r24, r20
    68a0:	95 07       	cpc	r25, r21
    68a2:	50 f0       	brcs	.+20     	; 0x68b8 <malloc+0x14e>
    68a4:	42 0f       	add	r20, r18
    68a6:	53 1f       	adc	r21, r19
    68a8:	50 93 30 08 	sts	0x0830, r21
    68ac:	40 93 2f 08 	sts	0x082F, r20
    68b0:	f9 01       	movw	r30, r18
    68b2:	61 93       	st	Z+, r22
    68b4:	71 93       	st	Z+, r23
    68b6:	02 c0       	rjmp	.+4      	; 0x68bc <malloc+0x152>
    68b8:	e0 e0       	ldi	r30, 0x00	; 0
    68ba:	f0 e0       	ldi	r31, 0x00	; 0
    68bc:	cf 01       	movw	r24, r30
    68be:	df 91       	pop	r29
    68c0:	cf 91       	pop	r28
    68c2:	08 95       	ret

000068c4 <free>:
    68c4:	cf 93       	push	r28
    68c6:	df 93       	push	r29
    68c8:	00 97       	sbiw	r24, 0x00	; 0
    68ca:	09 f4       	brne	.+2      	; 0x68ce <free+0xa>
    68cc:	50 c0       	rjmp	.+160    	; 0x696e <free+0xaa>
    68ce:	ec 01       	movw	r28, r24
    68d0:	22 97       	sbiw	r28, 0x02	; 2
    68d2:	1b 82       	std	Y+3, r1	; 0x03
    68d4:	1a 82       	std	Y+2, r1	; 0x02
    68d6:	a0 91 31 08 	lds	r26, 0x0831
    68da:	b0 91 32 08 	lds	r27, 0x0832
    68de:	10 97       	sbiw	r26, 0x00	; 0
    68e0:	09 f1       	breq	.+66     	; 0x6924 <free+0x60>
    68e2:	40 e0       	ldi	r20, 0x00	; 0
    68e4:	50 e0       	ldi	r21, 0x00	; 0
    68e6:	ac 17       	cp	r26, r28
    68e8:	bd 07       	cpc	r27, r29
    68ea:	08 f1       	brcs	.+66     	; 0x692e <free+0x6a>
    68ec:	bb 83       	std	Y+3, r27	; 0x03
    68ee:	aa 83       	std	Y+2, r26	; 0x02
    68f0:	fe 01       	movw	r30, r28
    68f2:	21 91       	ld	r18, Z+
    68f4:	31 91       	ld	r19, Z+
    68f6:	e2 0f       	add	r30, r18
    68f8:	f3 1f       	adc	r31, r19
    68fa:	ae 17       	cp	r26, r30
    68fc:	bf 07       	cpc	r27, r31
    68fe:	79 f4       	brne	.+30     	; 0x691e <free+0x5a>
    6900:	8d 91       	ld	r24, X+
    6902:	9c 91       	ld	r25, X
    6904:	11 97       	sbiw	r26, 0x01	; 1
    6906:	28 0f       	add	r18, r24
    6908:	39 1f       	adc	r19, r25
    690a:	2e 5f       	subi	r18, 0xFE	; 254
    690c:	3f 4f       	sbci	r19, 0xFF	; 255
    690e:	39 83       	std	Y+1, r19	; 0x01
    6910:	28 83       	st	Y, r18
    6912:	12 96       	adiw	r26, 0x02	; 2
    6914:	8d 91       	ld	r24, X+
    6916:	9c 91       	ld	r25, X
    6918:	13 97       	sbiw	r26, 0x03	; 3
    691a:	9b 83       	std	Y+3, r25	; 0x03
    691c:	8a 83       	std	Y+2, r24	; 0x02
    691e:	41 15       	cp	r20, r1
    6920:	51 05       	cpc	r21, r1
    6922:	71 f4       	brne	.+28     	; 0x6940 <free+0x7c>
    6924:	d0 93 32 08 	sts	0x0832, r29
    6928:	c0 93 31 08 	sts	0x0831, r28
    692c:	20 c0       	rjmp	.+64     	; 0x696e <free+0xaa>
    692e:	12 96       	adiw	r26, 0x02	; 2
    6930:	8d 91       	ld	r24, X+
    6932:	9c 91       	ld	r25, X
    6934:	13 97       	sbiw	r26, 0x03	; 3
    6936:	ad 01       	movw	r20, r26
    6938:	00 97       	sbiw	r24, 0x00	; 0
    693a:	11 f0       	breq	.+4      	; 0x6940 <free+0x7c>
    693c:	dc 01       	movw	r26, r24
    693e:	d3 cf       	rjmp	.-90     	; 0x68e6 <free+0x22>
    6940:	fa 01       	movw	r30, r20
    6942:	d3 83       	std	Z+3, r29	; 0x03
    6944:	c2 83       	std	Z+2, r28	; 0x02
    6946:	21 91       	ld	r18, Z+
    6948:	31 91       	ld	r19, Z+
    694a:	e2 0f       	add	r30, r18
    694c:	f3 1f       	adc	r31, r19
    694e:	ce 17       	cp	r28, r30
    6950:	df 07       	cpc	r29, r31
    6952:	69 f4       	brne	.+26     	; 0x696e <free+0xaa>
    6954:	88 81       	ld	r24, Y
    6956:	99 81       	ldd	r25, Y+1	; 0x01
    6958:	28 0f       	add	r18, r24
    695a:	39 1f       	adc	r19, r25
    695c:	2e 5f       	subi	r18, 0xFE	; 254
    695e:	3f 4f       	sbci	r19, 0xFF	; 255
    6960:	fa 01       	movw	r30, r20
    6962:	31 83       	std	Z+1, r19	; 0x01
    6964:	20 83       	st	Z, r18
    6966:	8a 81       	ldd	r24, Y+2	; 0x02
    6968:	9b 81       	ldd	r25, Y+3	; 0x03
    696a:	93 83       	std	Z+3, r25	; 0x03
    696c:	82 83       	std	Z+2, r24	; 0x02
    696e:	df 91       	pop	r29
    6970:	cf 91       	pop	r28
    6972:	08 95       	ret

00006974 <__ftoa_engine>:
    6974:	28 30       	cpi	r18, 0x08	; 8
    6976:	08 f0       	brcs	.+2      	; 0x697a <__ftoa_engine+0x6>
    6978:	27 e0       	ldi	r18, 0x07	; 7
    697a:	33 27       	eor	r19, r19
    697c:	da 01       	movw	r26, r20
    697e:	99 0f       	add	r25, r25
    6980:	31 1d       	adc	r19, r1
    6982:	87 fd       	sbrc	r24, 7
    6984:	91 60       	ori	r25, 0x01	; 1
    6986:	00 96       	adiw	r24, 0x00	; 0
    6988:	61 05       	cpc	r22, r1
    698a:	71 05       	cpc	r23, r1
    698c:	39 f4       	brne	.+14     	; 0x699c <__ftoa_engine+0x28>
    698e:	32 60       	ori	r19, 0x02	; 2
    6990:	2e 5f       	subi	r18, 0xFE	; 254
    6992:	3d 93       	st	X+, r19
    6994:	30 e3       	ldi	r19, 0x30	; 48
    6996:	2a 95       	dec	r18
    6998:	e1 f7       	brne	.-8      	; 0x6992 <__ftoa_engine+0x1e>
    699a:	08 95       	ret
    699c:	9f 3f       	cpi	r25, 0xFF	; 255
    699e:	30 f0       	brcs	.+12     	; 0x69ac <__ftoa_engine+0x38>
    69a0:	80 38       	cpi	r24, 0x80	; 128
    69a2:	71 05       	cpc	r23, r1
    69a4:	61 05       	cpc	r22, r1
    69a6:	09 f0       	breq	.+2      	; 0x69aa <__ftoa_engine+0x36>
    69a8:	3c 5f       	subi	r19, 0xFC	; 252
    69aa:	3c 5f       	subi	r19, 0xFC	; 252
    69ac:	3d 93       	st	X+, r19
    69ae:	91 30       	cpi	r25, 0x01	; 1
    69b0:	08 f0       	brcs	.+2      	; 0x69b4 <__ftoa_engine+0x40>
    69b2:	80 68       	ori	r24, 0x80	; 128
    69b4:	91 1d       	adc	r25, r1
    69b6:	df 93       	push	r29
    69b8:	cf 93       	push	r28
    69ba:	1f 93       	push	r17
    69bc:	0f 93       	push	r16
    69be:	ff 92       	push	r15
    69c0:	ef 92       	push	r14
    69c2:	19 2f       	mov	r17, r25
    69c4:	98 7f       	andi	r25, 0xF8	; 248
    69c6:	96 95       	lsr	r25
    69c8:	e9 2f       	mov	r30, r25
    69ca:	96 95       	lsr	r25
    69cc:	96 95       	lsr	r25
    69ce:	e9 0f       	add	r30, r25
    69d0:	ff 27       	eor	r31, r31
    69d2:	ef 53       	subi	r30, 0x3F	; 63
    69d4:	fa 4f       	sbci	r31, 0xFA	; 250
    69d6:	99 27       	eor	r25, r25
    69d8:	33 27       	eor	r19, r19
    69da:	ee 24       	eor	r14, r14
    69dc:	ff 24       	eor	r15, r15
    69de:	a7 01       	movw	r20, r14
    69e0:	e7 01       	movw	r28, r14
    69e2:	05 90       	lpm	r0, Z+
    69e4:	08 94       	sec
    69e6:	07 94       	ror	r0
    69e8:	28 f4       	brcc	.+10     	; 0x69f4 <__ftoa_engine+0x80>
    69ea:	36 0f       	add	r19, r22
    69ec:	e7 1e       	adc	r14, r23
    69ee:	f8 1e       	adc	r15, r24
    69f0:	49 1f       	adc	r20, r25
    69f2:	51 1d       	adc	r21, r1
    69f4:	66 0f       	add	r22, r22
    69f6:	77 1f       	adc	r23, r23
    69f8:	88 1f       	adc	r24, r24
    69fa:	99 1f       	adc	r25, r25
    69fc:	06 94       	lsr	r0
    69fe:	a1 f7       	brne	.-24     	; 0x69e8 <__ftoa_engine+0x74>
    6a00:	05 90       	lpm	r0, Z+
    6a02:	07 94       	ror	r0
    6a04:	28 f4       	brcc	.+10     	; 0x6a10 <__ftoa_engine+0x9c>
    6a06:	e7 0e       	add	r14, r23
    6a08:	f8 1e       	adc	r15, r24
    6a0a:	49 1f       	adc	r20, r25
    6a0c:	56 1f       	adc	r21, r22
    6a0e:	c1 1d       	adc	r28, r1
    6a10:	77 0f       	add	r23, r23
    6a12:	88 1f       	adc	r24, r24
    6a14:	99 1f       	adc	r25, r25
    6a16:	66 1f       	adc	r22, r22
    6a18:	06 94       	lsr	r0
    6a1a:	a1 f7       	brne	.-24     	; 0x6a04 <__ftoa_engine+0x90>
    6a1c:	05 90       	lpm	r0, Z+
    6a1e:	07 94       	ror	r0
    6a20:	28 f4       	brcc	.+10     	; 0x6a2c <__ftoa_engine+0xb8>
    6a22:	f8 0e       	add	r15, r24
    6a24:	49 1f       	adc	r20, r25
    6a26:	56 1f       	adc	r21, r22
    6a28:	c7 1f       	adc	r28, r23
    6a2a:	d1 1d       	adc	r29, r1
    6a2c:	88 0f       	add	r24, r24
    6a2e:	99 1f       	adc	r25, r25
    6a30:	66 1f       	adc	r22, r22
    6a32:	77 1f       	adc	r23, r23
    6a34:	06 94       	lsr	r0
    6a36:	a1 f7       	brne	.-24     	; 0x6a20 <__ftoa_engine+0xac>
    6a38:	05 90       	lpm	r0, Z+
    6a3a:	07 94       	ror	r0
    6a3c:	20 f4       	brcc	.+8      	; 0x6a46 <__ftoa_engine+0xd2>
    6a3e:	49 0f       	add	r20, r25
    6a40:	56 1f       	adc	r21, r22
    6a42:	c7 1f       	adc	r28, r23
    6a44:	d8 1f       	adc	r29, r24
    6a46:	99 0f       	add	r25, r25
    6a48:	66 1f       	adc	r22, r22
    6a4a:	77 1f       	adc	r23, r23
    6a4c:	88 1f       	adc	r24, r24
    6a4e:	06 94       	lsr	r0
    6a50:	a9 f7       	brne	.-22     	; 0x6a3c <__ftoa_engine+0xc8>
    6a52:	84 91       	lpm	r24, Z+
    6a54:	10 95       	com	r17
    6a56:	17 70       	andi	r17, 0x07	; 7
    6a58:	41 f0       	breq	.+16     	; 0x6a6a <__ftoa_engine+0xf6>
    6a5a:	d6 95       	lsr	r29
    6a5c:	c7 95       	ror	r28
    6a5e:	57 95       	ror	r21
    6a60:	47 95       	ror	r20
    6a62:	f7 94       	ror	r15
    6a64:	e7 94       	ror	r14
    6a66:	1a 95       	dec	r17
    6a68:	c1 f7       	brne	.-16     	; 0x6a5a <__ftoa_engine+0xe6>
    6a6a:	e7 e6       	ldi	r30, 0x67	; 103
    6a6c:	f5 e0       	ldi	r31, 0x05	; 5
    6a6e:	68 94       	set
    6a70:	15 90       	lpm	r1, Z+
    6a72:	15 91       	lpm	r17, Z+
    6a74:	35 91       	lpm	r19, Z+
    6a76:	65 91       	lpm	r22, Z+
    6a78:	95 91       	lpm	r25, Z+
    6a7a:	05 90       	lpm	r0, Z+
    6a7c:	7f e2       	ldi	r23, 0x2F	; 47
    6a7e:	73 95       	inc	r23
    6a80:	e1 18       	sub	r14, r1
    6a82:	f1 0a       	sbc	r15, r17
    6a84:	43 0b       	sbc	r20, r19
    6a86:	56 0b       	sbc	r21, r22
    6a88:	c9 0b       	sbc	r28, r25
    6a8a:	d0 09       	sbc	r29, r0
    6a8c:	c0 f7       	brcc	.-16     	; 0x6a7e <__ftoa_engine+0x10a>
    6a8e:	e1 0c       	add	r14, r1
    6a90:	f1 1e       	adc	r15, r17
    6a92:	43 1f       	adc	r20, r19
    6a94:	56 1f       	adc	r21, r22
    6a96:	c9 1f       	adc	r28, r25
    6a98:	d0 1d       	adc	r29, r0
    6a9a:	7e f4       	brtc	.+30     	; 0x6aba <__ftoa_engine+0x146>
    6a9c:	70 33       	cpi	r23, 0x30	; 48
    6a9e:	11 f4       	brne	.+4      	; 0x6aa4 <__ftoa_engine+0x130>
    6aa0:	8a 95       	dec	r24
    6aa2:	e6 cf       	rjmp	.-52     	; 0x6a70 <__ftoa_engine+0xfc>
    6aa4:	e8 94       	clt
    6aa6:	01 50       	subi	r16, 0x01	; 1
    6aa8:	30 f0       	brcs	.+12     	; 0x6ab6 <__ftoa_engine+0x142>
    6aaa:	08 0f       	add	r16, r24
    6aac:	0a f4       	brpl	.+2      	; 0x6ab0 <__ftoa_engine+0x13c>
    6aae:	00 27       	eor	r16, r16
    6ab0:	02 17       	cp	r16, r18
    6ab2:	08 f4       	brcc	.+2      	; 0x6ab6 <__ftoa_engine+0x142>
    6ab4:	20 2f       	mov	r18, r16
    6ab6:	23 95       	inc	r18
    6ab8:	02 2f       	mov	r16, r18
    6aba:	7a 33       	cpi	r23, 0x3A	; 58
    6abc:	28 f0       	brcs	.+10     	; 0x6ac8 <__ftoa_engine+0x154>
    6abe:	79 e3       	ldi	r23, 0x39	; 57
    6ac0:	7d 93       	st	X+, r23
    6ac2:	2a 95       	dec	r18
    6ac4:	e9 f7       	brne	.-6      	; 0x6ac0 <__ftoa_engine+0x14c>
    6ac6:	10 c0       	rjmp	.+32     	; 0x6ae8 <__ftoa_engine+0x174>
    6ac8:	7d 93       	st	X+, r23
    6aca:	2a 95       	dec	r18
    6acc:	89 f6       	brne	.-94     	; 0x6a70 <__ftoa_engine+0xfc>
    6ace:	06 94       	lsr	r0
    6ad0:	97 95       	ror	r25
    6ad2:	67 95       	ror	r22
    6ad4:	37 95       	ror	r19
    6ad6:	17 95       	ror	r17
    6ad8:	17 94       	ror	r1
    6ada:	e1 18       	sub	r14, r1
    6adc:	f1 0a       	sbc	r15, r17
    6ade:	43 0b       	sbc	r20, r19
    6ae0:	56 0b       	sbc	r21, r22
    6ae2:	c9 0b       	sbc	r28, r25
    6ae4:	d0 09       	sbc	r29, r0
    6ae6:	98 f0       	brcs	.+38     	; 0x6b0e <__ftoa_engine+0x19a>
    6ae8:	23 95       	inc	r18
    6aea:	7e 91       	ld	r23, -X
    6aec:	73 95       	inc	r23
    6aee:	7a 33       	cpi	r23, 0x3A	; 58
    6af0:	08 f0       	brcs	.+2      	; 0x6af4 <__ftoa_engine+0x180>
    6af2:	70 e3       	ldi	r23, 0x30	; 48
    6af4:	7c 93       	st	X, r23
    6af6:	20 13       	cpse	r18, r16
    6af8:	b8 f7       	brcc	.-18     	; 0x6ae8 <__ftoa_engine+0x174>
    6afa:	7e 91       	ld	r23, -X
    6afc:	70 61       	ori	r23, 0x10	; 16
    6afe:	7d 93       	st	X+, r23
    6b00:	30 f0       	brcs	.+12     	; 0x6b0e <__ftoa_engine+0x19a>
    6b02:	83 95       	inc	r24
    6b04:	71 e3       	ldi	r23, 0x31	; 49
    6b06:	7d 93       	st	X+, r23
    6b08:	70 e3       	ldi	r23, 0x30	; 48
    6b0a:	2a 95       	dec	r18
    6b0c:	e1 f7       	brne	.-8      	; 0x6b06 <__ftoa_engine+0x192>
    6b0e:	11 24       	eor	r1, r1
    6b10:	ef 90       	pop	r14
    6b12:	ff 90       	pop	r15
    6b14:	0f 91       	pop	r16
    6b16:	1f 91       	pop	r17
    6b18:	cf 91       	pop	r28
    6b1a:	df 91       	pop	r29
    6b1c:	99 27       	eor	r25, r25
    6b1e:	87 fd       	sbrc	r24, 7
    6b20:	90 95       	com	r25
    6b22:	08 95       	ret

00006b24 <strnlen_P>:
    6b24:	fc 01       	movw	r30, r24
    6b26:	05 90       	lpm	r0, Z+
    6b28:	61 50       	subi	r22, 0x01	; 1
    6b2a:	70 40       	sbci	r23, 0x00	; 0
    6b2c:	01 10       	cpse	r0, r1
    6b2e:	d8 f7       	brcc	.-10     	; 0x6b26 <strnlen_P+0x2>
    6b30:	80 95       	com	r24
    6b32:	90 95       	com	r25
    6b34:	8e 0f       	add	r24, r30
    6b36:	9f 1f       	adc	r25, r31
    6b38:	08 95       	ret

00006b3a <strnlen>:
    6b3a:	fc 01       	movw	r30, r24
    6b3c:	61 50       	subi	r22, 0x01	; 1
    6b3e:	70 40       	sbci	r23, 0x00	; 0
    6b40:	01 90       	ld	r0, Z+
    6b42:	01 10       	cpse	r0, r1
    6b44:	d8 f7       	brcc	.-10     	; 0x6b3c <strnlen+0x2>
    6b46:	80 95       	com	r24
    6b48:	90 95       	com	r25
    6b4a:	8e 0f       	add	r24, r30
    6b4c:	9f 1f       	adc	r25, r31
    6b4e:	08 95       	ret

00006b50 <fputc>:
    6b50:	0f 93       	push	r16
    6b52:	1f 93       	push	r17
    6b54:	cf 93       	push	r28
    6b56:	df 93       	push	r29
    6b58:	8c 01       	movw	r16, r24
    6b5a:	eb 01       	movw	r28, r22
    6b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    6b5e:	81 ff       	sbrs	r24, 1
    6b60:	1b c0       	rjmp	.+54     	; 0x6b98 <fputc+0x48>
    6b62:	82 ff       	sbrs	r24, 2
    6b64:	0d c0       	rjmp	.+26     	; 0x6b80 <fputc+0x30>
    6b66:	2e 81       	ldd	r18, Y+6	; 0x06
    6b68:	3f 81       	ldd	r19, Y+7	; 0x07
    6b6a:	8c 81       	ldd	r24, Y+4	; 0x04
    6b6c:	9d 81       	ldd	r25, Y+5	; 0x05
    6b6e:	28 17       	cp	r18, r24
    6b70:	39 07       	cpc	r19, r25
    6b72:	64 f4       	brge	.+24     	; 0x6b8c <fputc+0x3c>
    6b74:	e8 81       	ld	r30, Y
    6b76:	f9 81       	ldd	r31, Y+1	; 0x01
    6b78:	01 93       	st	Z+, r16
    6b7a:	f9 83       	std	Y+1, r31	; 0x01
    6b7c:	e8 83       	st	Y, r30
    6b7e:	06 c0       	rjmp	.+12     	; 0x6b8c <fputc+0x3c>
    6b80:	e8 85       	ldd	r30, Y+8	; 0x08
    6b82:	f9 85       	ldd	r31, Y+9	; 0x09
    6b84:	80 2f       	mov	r24, r16
    6b86:	09 95       	icall
    6b88:	89 2b       	or	r24, r25
    6b8a:	31 f4       	brne	.+12     	; 0x6b98 <fputc+0x48>
    6b8c:	8e 81       	ldd	r24, Y+6	; 0x06
    6b8e:	9f 81       	ldd	r25, Y+7	; 0x07
    6b90:	01 96       	adiw	r24, 0x01	; 1
    6b92:	9f 83       	std	Y+7, r25	; 0x07
    6b94:	8e 83       	std	Y+6, r24	; 0x06
    6b96:	02 c0       	rjmp	.+4      	; 0x6b9c <fputc+0x4c>
    6b98:	0f ef       	ldi	r16, 0xFF	; 255
    6b9a:	1f ef       	ldi	r17, 0xFF	; 255
    6b9c:	c8 01       	movw	r24, r16
    6b9e:	df 91       	pop	r29
    6ba0:	cf 91       	pop	r28
    6ba2:	1f 91       	pop	r17
    6ba4:	0f 91       	pop	r16
    6ba6:	08 95       	ret

00006ba8 <printf>:
    6ba8:	a0 e0       	ldi	r26, 0x00	; 0
    6baa:	b0 e0       	ldi	r27, 0x00	; 0
    6bac:	e9 ed       	ldi	r30, 0xD9	; 217
    6bae:	f5 e3       	ldi	r31, 0x35	; 53
    6bb0:	b5 cd       	rjmp	.-1174   	; 0x671c <__prologue_saves__+0x20>
    6bb2:	fe 01       	movw	r30, r28
    6bb4:	35 96       	adiw	r30, 0x05	; 5
    6bb6:	61 91       	ld	r22, Z+
    6bb8:	71 91       	ld	r23, Z+
    6bba:	80 91 35 08 	lds	r24, 0x0835
    6bbe:	90 91 36 08 	lds	r25, 0x0836
    6bc2:	af 01       	movw	r20, r30
    6bc4:	f2 d9       	rcall	.-3100   	; 0x5faa <vfprintf>
    6bc6:	20 96       	adiw	r28, 0x00	; 0
    6bc8:	e2 e0       	ldi	r30, 0x02	; 2
    6bca:	c4 cd       	rjmp	.-1144   	; 0x6754 <__epilogue_restores__+0x20>

00006bcc <puts>:
    6bcc:	0f 93       	push	r16
    6bce:	1f 93       	push	r17
    6bd0:	cf 93       	push	r28
    6bd2:	df 93       	push	r29
    6bd4:	8c 01       	movw	r16, r24
    6bd6:	e0 91 35 08 	lds	r30, 0x0835
    6bda:	f0 91 36 08 	lds	r31, 0x0836
    6bde:	83 81       	ldd	r24, Z+3	; 0x03
    6be0:	81 ff       	sbrs	r24, 1
    6be2:	21 c0       	rjmp	.+66     	; 0x6c26 <puts+0x5a>
    6be4:	c0 e0       	ldi	r28, 0x00	; 0
    6be6:	d0 e0       	ldi	r29, 0x00	; 0
    6be8:	0d c0       	rjmp	.+26     	; 0x6c04 <puts+0x38>
    6bea:	e0 91 35 08 	lds	r30, 0x0835
    6bee:	f0 91 36 08 	lds	r31, 0x0836
    6bf2:	20 85       	ldd	r18, Z+8	; 0x08
    6bf4:	31 85       	ldd	r19, Z+9	; 0x09
    6bf6:	bf 01       	movw	r22, r30
    6bf8:	f9 01       	movw	r30, r18
    6bfa:	09 95       	icall
    6bfc:	89 2b       	or	r24, r25
    6bfe:	11 f0       	breq	.+4      	; 0x6c04 <puts+0x38>
    6c00:	cf ef       	ldi	r28, 0xFF	; 255
    6c02:	df ef       	ldi	r29, 0xFF	; 255
    6c04:	f8 01       	movw	r30, r16
    6c06:	81 91       	ld	r24, Z+
    6c08:	8f 01       	movw	r16, r30
    6c0a:	88 23       	and	r24, r24
    6c0c:	71 f7       	brne	.-36     	; 0x6bea <puts+0x1e>
    6c0e:	e0 91 35 08 	lds	r30, 0x0835
    6c12:	f0 91 36 08 	lds	r31, 0x0836
    6c16:	20 85       	ldd	r18, Z+8	; 0x08
    6c18:	31 85       	ldd	r19, Z+9	; 0x09
    6c1a:	8a e0       	ldi	r24, 0x0A	; 10
    6c1c:	bf 01       	movw	r22, r30
    6c1e:	f9 01       	movw	r30, r18
    6c20:	09 95       	icall
    6c22:	89 2b       	or	r24, r25
    6c24:	11 f0       	breq	.+4      	; 0x6c2a <puts+0x5e>
    6c26:	cf ef       	ldi	r28, 0xFF	; 255
    6c28:	df ef       	ldi	r29, 0xFF	; 255
    6c2a:	ce 01       	movw	r24, r28
    6c2c:	df 91       	pop	r29
    6c2e:	cf 91       	pop	r28
    6c30:	1f 91       	pop	r17
    6c32:	0f 91       	pop	r16
    6c34:	08 95       	ret

00006c36 <__ultoa_invert>:
    6c36:	fa 01       	movw	r30, r20
    6c38:	aa 27       	eor	r26, r26
    6c3a:	28 30       	cpi	r18, 0x08	; 8
    6c3c:	51 f1       	breq	.+84     	; 0x6c92 <__ultoa_invert+0x5c>
    6c3e:	20 31       	cpi	r18, 0x10	; 16
    6c40:	81 f1       	breq	.+96     	; 0x6ca2 <__ultoa_invert+0x6c>
    6c42:	e8 94       	clt
    6c44:	6f 93       	push	r22
    6c46:	6e 7f       	andi	r22, 0xFE	; 254
    6c48:	6e 5f       	subi	r22, 0xFE	; 254
    6c4a:	7f 4f       	sbci	r23, 0xFF	; 255
    6c4c:	8f 4f       	sbci	r24, 0xFF	; 255
    6c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    6c50:	af 4f       	sbci	r26, 0xFF	; 255
    6c52:	b1 e0       	ldi	r27, 0x01	; 1
    6c54:	3e d0       	rcall	.+124    	; 0x6cd2 <__ultoa_invert+0x9c>
    6c56:	b4 e0       	ldi	r27, 0x04	; 4
    6c58:	3c d0       	rcall	.+120    	; 0x6cd2 <__ultoa_invert+0x9c>
    6c5a:	67 0f       	add	r22, r23
    6c5c:	78 1f       	adc	r23, r24
    6c5e:	89 1f       	adc	r24, r25
    6c60:	9a 1f       	adc	r25, r26
    6c62:	a1 1d       	adc	r26, r1
    6c64:	68 0f       	add	r22, r24
    6c66:	79 1f       	adc	r23, r25
    6c68:	8a 1f       	adc	r24, r26
    6c6a:	91 1d       	adc	r25, r1
    6c6c:	a1 1d       	adc	r26, r1
    6c6e:	6a 0f       	add	r22, r26
    6c70:	71 1d       	adc	r23, r1
    6c72:	81 1d       	adc	r24, r1
    6c74:	91 1d       	adc	r25, r1
    6c76:	a1 1d       	adc	r26, r1
    6c78:	20 d0       	rcall	.+64     	; 0x6cba <__ultoa_invert+0x84>
    6c7a:	09 f4       	brne	.+2      	; 0x6c7e <__ultoa_invert+0x48>
    6c7c:	68 94       	set
    6c7e:	3f 91       	pop	r19
    6c80:	2a e0       	ldi	r18, 0x0A	; 10
    6c82:	26 9f       	mul	r18, r22
    6c84:	11 24       	eor	r1, r1
    6c86:	30 19       	sub	r19, r0
    6c88:	30 5d       	subi	r19, 0xD0	; 208
    6c8a:	31 93       	st	Z+, r19
    6c8c:	de f6       	brtc	.-74     	; 0x6c44 <__ultoa_invert+0xe>
    6c8e:	cf 01       	movw	r24, r30
    6c90:	08 95       	ret
    6c92:	46 2f       	mov	r20, r22
    6c94:	47 70       	andi	r20, 0x07	; 7
    6c96:	40 5d       	subi	r20, 0xD0	; 208
    6c98:	41 93       	st	Z+, r20
    6c9a:	b3 e0       	ldi	r27, 0x03	; 3
    6c9c:	0f d0       	rcall	.+30     	; 0x6cbc <__ultoa_invert+0x86>
    6c9e:	c9 f7       	brne	.-14     	; 0x6c92 <__ultoa_invert+0x5c>
    6ca0:	f6 cf       	rjmp	.-20     	; 0x6c8e <__ultoa_invert+0x58>
    6ca2:	46 2f       	mov	r20, r22
    6ca4:	4f 70       	andi	r20, 0x0F	; 15
    6ca6:	40 5d       	subi	r20, 0xD0	; 208
    6ca8:	4a 33       	cpi	r20, 0x3A	; 58
    6caa:	18 f0       	brcs	.+6      	; 0x6cb2 <__ultoa_invert+0x7c>
    6cac:	49 5d       	subi	r20, 0xD9	; 217
    6cae:	31 fd       	sbrc	r19, 1
    6cb0:	40 52       	subi	r20, 0x20	; 32
    6cb2:	41 93       	st	Z+, r20
    6cb4:	02 d0       	rcall	.+4      	; 0x6cba <__ultoa_invert+0x84>
    6cb6:	a9 f7       	brne	.-22     	; 0x6ca2 <__ultoa_invert+0x6c>
    6cb8:	ea cf       	rjmp	.-44     	; 0x6c8e <__ultoa_invert+0x58>
    6cba:	b4 e0       	ldi	r27, 0x04	; 4
    6cbc:	a6 95       	lsr	r26
    6cbe:	97 95       	ror	r25
    6cc0:	87 95       	ror	r24
    6cc2:	77 95       	ror	r23
    6cc4:	67 95       	ror	r22
    6cc6:	ba 95       	dec	r27
    6cc8:	c9 f7       	brne	.-14     	; 0x6cbc <__ultoa_invert+0x86>
    6cca:	00 97       	sbiw	r24, 0x00	; 0
    6ccc:	61 05       	cpc	r22, r1
    6cce:	71 05       	cpc	r23, r1
    6cd0:	08 95       	ret
    6cd2:	9b 01       	movw	r18, r22
    6cd4:	ac 01       	movw	r20, r24
    6cd6:	0a 2e       	mov	r0, r26
    6cd8:	06 94       	lsr	r0
    6cda:	57 95       	ror	r21
    6cdc:	47 95       	ror	r20
    6cde:	37 95       	ror	r19
    6ce0:	27 95       	ror	r18
    6ce2:	ba 95       	dec	r27
    6ce4:	c9 f7       	brne	.-14     	; 0x6cd8 <__ultoa_invert+0xa2>
    6ce6:	62 0f       	add	r22, r18
    6ce8:	73 1f       	adc	r23, r19
    6cea:	84 1f       	adc	r24, r20
    6cec:	95 1f       	adc	r25, r21
    6cee:	a0 1d       	adc	r26, r0
    6cf0:	08 95       	ret

00006cf2 <_exit>:
    6cf2:	f8 94       	cli

00006cf4 <__stop_program>:
    6cf4:	ff cf       	rjmp	.-2      	; 0x6cf4 <__stop_program>
