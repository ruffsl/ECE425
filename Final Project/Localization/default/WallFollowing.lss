
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000398  00800100  000074a8  0000753c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000074a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003b4  00800498  00800498  000078d4  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000078d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000787  00000000  00000000  00007934  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001c54  00000000  00000000  000080bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000044b  00000000  00000000  00009d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000195f  00000000  00000000  0000a15a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000320  00000000  00000000  0000babc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000d84  00000000  00000000  0000bddc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000010f0  00000000  00000000  0000cb60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 64 26 	jmp	0x4cc8	; 0x4cc8 <__vector_4>
      14:	0c 94 8d 26 	jmp	0x4d1a	; 0x4d1a <__vector_5>
      18:	0c 94 b6 26 	jmp	0x4d6c	; 0x4d6c <__vector_6>
      1c:	0c 94 df 26 	jmp	0x4dbe	; 0x4dbe <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__vector_9>
      28:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <__vector_10>
      2c:	0c 94 97 25 	jmp	0x4b2e	; 0x4b2e <__vector_11>
      30:	0c 94 12 26 	jmp	0x4c24	; 0x4c24 <__vector_12>
      34:	0c 94 c0 25 	jmp	0x4b80	; 0x4b80 <__vector_13>
      38:	0c 94 e9 25 	jmp	0x4bd2	; 0x4bd2 <__vector_14>
      3c:	0c 94 3b 26 	jmp	0x4c76	; 0x4c76 <__vector_15>
      40:	0c 94 ca 24 	jmp	0x4994	; 0x4994 <__vector_16>
      44:	0c 94 f3 24 	jmp	0x49e6	; 0x49e6 <__vector_17>
      48:	0c 94 1c 25 	jmp	0x4a38	; 0x4a38 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	2f 22       	and	r2, r31
      7e:	32 22       	and	r3, r18
      80:	35 22       	and	r3, r21
      82:	38 22       	and	r3, r24
      84:	41 22       	and	r4, r17
      86:	3b 22       	and	r3, r27
      88:	3e 22       	and	r3, r30
      8a:	44 22       	and	r4, r20
      8c:	47 22       	and	r4, r23
      8e:	4a 22       	and	r4, r26
      90:	4d 22       	and	r4, r29
      92:	50 22       	and	r5, r16
      94:	53 22       	and	r5, r19
      96:	56 22       	and	r5, r22
      98:	59 22       	and	r5, r25
      9a:	5c 22       	and	r5, r28
      9c:	5f 22       	and	r5, r31
      9e:	62 22       	and	r6, r18
      a0:	65 22       	and	r6, r21
      a2:	76 22       	and	r7, r22
      a4:	79 22       	and	r7, r25
      a6:	7c 22       	and	r7, r28
      a8:	7f 22       	and	r7, r31
      aa:	88 22       	and	r8, r24
      ac:	82 22       	and	r8, r18
      ae:	85 22       	and	r8, r21
      b0:	8b 22       	and	r8, r27
      b2:	8e 22       	and	r8, r30
      b4:	91 22       	and	r9, r17
      b6:	94 22       	and	r9, r20
      b8:	97 22       	and	r9, r23
      ba:	9a 22       	and	r9, r26
      bc:	9d 22       	and	r9, r29
      be:	a0 22       	and	r10, r16
      c0:	a3 22       	and	r10, r19
      c2:	a6 22       	and	r10, r22
      c4:	a9 22       	and	r10, r25
      c6:	ac 22       	and	r10, r28
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	14 e0       	ldi	r17, 0x04	; 4
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	e8 ea       	ldi	r30, 0xA8	; 168
     676:	f4 e7       	ldi	r31, 0x74	; 116
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a8 39       	cpi	r26, 0x98	; 152
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	18 e0       	ldi	r17, 0x08	; 8
     686:	a8 e9       	ldi	r26, 0x98	; 152
     688:	b4 e0       	ldi	r27, 0x04	; 4
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	ac 34       	cpi	r26, 0x4C	; 76
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 99 1c 	call	0x3932	; 0x3932 <main>
     698:	0c 94 52 3a 	jmp	0x74a4	; 0x74a4 <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 08 24 	call	0x4810	; 0x4810 <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 74 24 	call	0x48e8	; 0x48e8 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 08 24 	call	0x4810	; 0x4810 <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 74 24 	call	0x48e8	; 0x48e8 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 08 24 	call	0x4810	; 0x4810 <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 74 24 	call	0x48e8	; 0x48e8 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 08 24 	call	0x4810	; 0x4810 <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 74 24 	call	0x48e8	; 0x48e8 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 08 24 	call	0x4810	; 0x4810 <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 74 24 	call	0x48e8	; 0x48e8 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 08 24 	call	0x4810	; 0x4810 <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 74 24 	call	0x48e8	; 0x48e8 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 08 24 	call	0x4810	; 0x4810 <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 74 24 	call	0x48e8	; 0x48e8 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 08 24 	call	0x4810	; 0x4810 <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 74 24 	call	0x48e8	; 0x48e8 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 08 24 	call	0x4810	; 0x4810 <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 74 24 	call	0x48e8	; 0x48e8 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 08 24 	call	0x4810	; 0x4810 <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 2e 24 	call	0x485c	; 0x485c <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 dc 23 	call	0x47b8	; 0x47b8 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 74 24 	call	0x48e8	; 0x48e8 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 8e 1c 	call	0x391c	; 0x391c <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 57 1c 	call	0x38ae	; 0x38ae <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 3a 1c 	call	0x3874	; 0x3874 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 8e 1c 	call	0x391c	; 0x391c <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 57 1c 	call	0x38ae	; 0x38ae <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 3a 1c 	call	0x3874	; 0x3874 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 8e 1c 	call	0x391c	; 0x391c <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 57 1c 	call	0x38ae	; 0x38ae <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 3a 1c 	call	0x3874	; 0x3874 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 8e 1c 	call	0x391c	; 0x391c <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 57 1c 	call	0x38ae	; 0x38ae <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 3a 1c 	call	0x3874	; 0x3874 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 8e 1c 	call	0x391c	; 0x391c <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 57 1c 	call	0x38ae	; 0x38ae <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 3a 1c 	call	0x3874	; 0x3874 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 8e 1c 	call	0x391c	; 0x391c <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 57 1c 	call	0x38ae	; 0x38ae <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 3a 1c 	call	0x3874	; 0x3874 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 14 05 	sts	0x0514, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 14 05 	sts	0x0514, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 e0 22 	call	0x45c0	; 0x45c0 <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 9c 1d 	call	0x3b38	; 0x3b38 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	89 e8       	ldi	r24, 0x89	; 137
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	ab ea       	ldi	r26, 0xAB	; 171
     c56:	b7 e0       	ldi	r27, 0x07	; 7
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	e2 ea       	ldi	r30, 0xA2	; 162
     c5e:	f6 e0       	ldi	r31, 0x06	; 6
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	80 e1       	ldi	r24, 0x10	; 16
     c66:	96 e0       	ldi	r25, 0x06	; 6
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 32 07 	lds	r10, 0x0732
     c9e:	b0 90 33 07 	lds	r11, 0x0733
     ca2:	c0 90 34 07 	lds	r12, 0x0734
     ca6:	d0 90 35 07 	lds	r13, 0x0735
			rtIR_old[i] = rtIR;
     caa:	e0 90 37 07 	lds	r14, 0x0737
     cae:	f0 90 38 07 	lds	r15, 0x0738
     cb2:	00 91 39 07 	lds	r16, 0x0739
     cb6:	10 91 3a 07 	lds	r17, 0x073A
			ftIR_old[i] = ftIR;
     cba:	20 90 91 05 	lds	r2, 0x0591
     cbe:	30 90 92 05 	lds	r3, 0x0592
     cc2:	40 90 93 05 	lds	r4, 0x0593
     cc6:	50 90 94 05 	lds	r5, 0x0594
			bkIR_old[i] = bkIR;
     cca:	20 91 9b 05 	lds	r18, 0x059B
     cce:	30 91 9c 05 	lds	r19, 0x059C
     cd2:	40 91 9d 05 	lds	r20, 0x059D
     cd6:	50 91 9e 05 	lds	r21, 0x059E
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	e7 5e       	subi	r30, 0xE7	; 231
     ce2:	fa 4f       	sbci	r31, 0xFA	; 250
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e5 5c       	subi	r30, 0xC5	; 197
     cf0:	f8 4f       	sbci	r31, 0xF8	; 248
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	ee 5c       	subi	r30, 0xCE	; 206
     cfe:	f9 4f       	sbci	r31, 0xF9	; 249
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	e0 56       	subi	r30, 0x60	; 96
     d0c:	fa 4f       	sbci	r31, 0xFA	; 250
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	a1 51       	subi	r26, 0x11	; 17
     e02:	b5 40       	sbci	r27, 0x05	; 5
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 32 07 	lds	r24, 0x0732
     e0c:	90 91 33 07 	lds	r25, 0x0733
     e10:	a0 91 34 07 	lds	r26, 0x0734
     e14:	b0 91 35 07 	lds	r27, 0x0735
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 37 07 	lds	r24, 0x0737
     e28:	90 91 38 07 	lds	r25, 0x0738
     e2c:	a0 91 39 07 	lds	r26, 0x0739
     e30:	b0 91 3a 07 	lds	r27, 0x073A
     e34:	80 93 3b 07 	sts	0x073B, r24
     e38:	90 93 3c 07 	sts	0x073C, r25
     e3c:	a0 93 3d 07 	sts	0x073D, r26
     e40:	b0 93 3e 07 	sts	0x073E, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 91 05 	lds	r24, 0x0591
     e48:	90 91 92 05 	lds	r25, 0x0592
     e4c:	a0 91 93 05 	lds	r26, 0x0593
     e50:	b0 91 94 05 	lds	r27, 0x0594
     e54:	80 93 32 06 	sts	0x0632, r24
     e58:	90 93 33 06 	sts	0x0633, r25
     e5c:	a0 93 34 06 	sts	0x0634, r26
     e60:	b0 93 35 06 	sts	0x0635, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 9b 05 	lds	r24, 0x059B
     e68:	90 91 9c 05 	lds	r25, 0x059C
     e6c:	a0 91 9d 05 	lds	r26, 0x059D
     e70:	b0 91 9e 05 	lds	r27, 0x059E
     e74:	80 93 a0 05 	sts	0x05A0, r24
     e78:	90 93 a1 05 	sts	0x05A1, r25
     e7c:	a0 93 a2 05 	sts	0x05A2, r26
     e80:	b0 93 a3 05 	sts	0x05A3, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
     e94:	60 93 32 07 	sts	0x0732, r22
     e98:	70 93 33 07 	sts	0x0733, r23
     e9c:	80 93 34 07 	sts	0x0734, r24
     ea0:	90 93 35 07 	sts	0x0735, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
     eb8:	60 93 37 07 	sts	0x0737, r22
     ebc:	70 93 38 07 	sts	0x0738, r23
     ec0:	80 93 39 07 	sts	0x0739, r24
     ec4:	90 93 3a 07 	sts	0x073A, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
     edc:	60 93 91 05 	sts	0x0591, r22
     ee0:	70 93 92 05 	sts	0x0592, r23
     ee4:	80 93 93 05 	sts	0x0593, r24
     ee8:	90 93 94 05 	sts	0x0594, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
     f00:	60 93 9b 05 	sts	0x059B, r22
     f04:	70 93 9c 05 	sts	0x059C, r23
     f08:	80 93 9d 05 	sts	0x059D, r24
     f0c:	90 93 9e 05 	sts	0x059E, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 95 05 	sts	0x0595, r24
     f66:	90 93 96 05 	sts	0x0596, r25
     f6a:	a0 93 97 05 	sts	0x0597, r26
     f6e:	b0 93 98 05 	sts	0x0598, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 95 05 	lds	r18, 0x0595
     f7a:	30 91 96 05 	lds	r19, 0x0596
     f7e:	40 91 97 05 	lds	r20, 0x0597
     f82:	50 91 98 05 	lds	r21, 0x0598
     f86:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 95 05 	sts	0x0595, r22
     f92:	70 93 96 05 	sts	0x0596, r23
     f96:	80 93 97 05 	sts	0x0597, r24
     f9a:	90 93 98 05 	sts	0x0598, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 2e 06 	lds	r18, 0x062E
     fa6:	30 91 2f 06 	lds	r19, 0x062F
     faa:	40 91 30 06 	lds	r20, 0x0630
     fae:	50 91 31 06 	lds	r21, 0x0631
     fb2:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__subsf3>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <moveWander>:
* Output Return:	none
* Overview:			This function checks for walls and moves the 
*					robot randomly if walls are not detected
********************************************************************/
char moveWander ( void )
{	
    102a:	8f 92       	push	r8
    102c:	af 92       	push	r10
    102e:	bf 92       	push	r11
    1030:	cf 92       	push	r12
    1032:	df 92       	push	r13
    1034:	ef 92       	push	r14
    1036:	ff 92       	push	r15
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	cf 93       	push	r28
    103e:	df 93       	push	r29
	// notify that we have
	char isWander = 1;
	
	// if we are wondering
	// first check the current progress of our wondering
	STEPPER_STEPS curr_steps = STEPPER_get_nSteps();
    1040:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <STEPPER_get_nSteps>
	
	
	// IF my motion is complete do another random motion
	if ((curr_steps.left == 0)&(curr_steps.right == 0))
    1044:	67 2b       	or	r22, r23
    1046:	09 f0       	breq	.+2      	; 0x104a <moveWander+0x20>
    1048:	76 c0       	rjmp	.+236    	; 0x1136 <moveWander+0x10c>
    104a:	89 2b       	or	r24, r25
    104c:	09 f0       	breq	.+2      	; 0x1050 <moveWander+0x26>
    104e:	73 c0       	rjmp	.+230    	; 0x1136 <moveWander+0x10c>
	{
		// create random values for wheel position and wheel speed
		int moveRand = rand()%400+400;
    1050:	0e 94 69 38 	call	0x70d2	; 0x70d2 <rand>
    1054:	8c 01       	movw	r16, r24
		float turnRandR = rand()%200+200;
    1056:	0e 94 69 38 	call	0x70d2	; 0x70d2 <rand>
    105a:	ec 01       	movw	r28, r24
		float turnRandL = rand()%200+200;
    105c:	0e 94 69 38 	call	0x70d2	; 0x70d2 <rand>
    1060:	7c 01       	movw	r14, r24
		
		// Weight the chance that we will go forward slightly more
		// so that the robot may possibly traverse farther
		BOOL direction = ~((rand()%10)>7);
    1062:	0e 94 69 38 	call	0x70d2	; 0x70d2 <rand>
    1066:	20 e0       	ldi	r18, 0x00	; 0
    1068:	6a e0       	ldi	r22, 0x0A	; 10
    106a:	70 e0       	ldi	r23, 0x00	; 0
    106c:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <__divmodhi4>
    1070:	08 97       	sbiw	r24, 0x08	; 8
    1072:	0c f0       	brlt	.+2      	; 0x1076 <moveWander+0x4c>
    1074:	21 e0       	ldi	r18, 0x01	; 1
    1076:	82 2e       	mov	r8, r18
    1078:	80 94       	com	r8
				
		// Move.
		STEPPER_move_stnb( STEPPER_BOTH, 
    107a:	c8 01       	movw	r24, r16
    107c:	60 e9       	ldi	r22, 0x90	; 144
    107e:	71 e0       	ldi	r23, 0x01	; 1
    1080:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <__divmodhi4>
    1084:	20 e9       	ldi	r18, 0x90	; 144
    1086:	a2 2e       	mov	r10, r18
    1088:	21 e0       	ldi	r18, 0x01	; 1
    108a:	b2 2e       	mov	r11, r18
    108c:	a8 0e       	add	r10, r24
    108e:	b9 1e       	adc	r11, r25
    1090:	8d b7       	in	r24, 0x3d	; 61
    1092:	9e b7       	in	r25, 0x3e	; 62
    1094:	09 97       	sbiw	r24, 0x09	; 9
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	9e bf       	out	0x3e, r25	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	8d bf       	out	0x3d, r24	; 61
    10a0:	0d b7       	in	r16, 0x3d	; 61
    10a2:	1e b7       	in	r17, 0x3e	; 62
    10a4:	0f 5f       	subi	r16, 0xFF	; 255
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	c7 01       	movw	r24, r14
    10aa:	68 ec       	ldi	r22, 0xC8	; 200
    10ac:	70 e0       	ldi	r23, 0x00	; 0
    10ae:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <__divmodhi4>
    10b2:	88 53       	subi	r24, 0x38	; 56
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	aa 27       	eor	r26, r26
    10b8:	97 fd       	sbrc	r25, 7
    10ba:	a0 95       	com	r26
    10bc:	ba 2f       	mov	r27, r26
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatsisf>
    10c6:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    10ca:	6b 01       	movw	r12, r22
    10cc:	7c 01       	movw	r14, r24
    10ce:	f8 01       	movw	r30, r16
    10d0:	b1 82       	std	Z+1, r11	; 0x01
    10d2:	a0 82       	st	Z, r10
    10d4:	ce 01       	movw	r24, r28
    10d6:	68 ec       	ldi	r22, 0xC8	; 200
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	0e 94 9a 36 	call	0x6d34	; 0x6d34 <__divmodhi4>
    10de:	88 53       	subi	r24, 0x38	; 56
    10e0:	9f 4f       	sbci	r25, 0xFF	; 255
    10e2:	aa 27       	eor	r26, r26
    10e4:	97 fd       	sbrc	r25, 7
    10e6:	a0 95       	com	r26
    10e8:	ba 2f       	mov	r27, r26
    10ea:	bc 01       	movw	r22, r24
    10ec:	cd 01       	movw	r24, r26
    10ee:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatsisf>
    10f2:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    10f6:	f8 01       	movw	r30, r16
    10f8:	73 83       	std	Z+3, r23	; 0x03
    10fa:	62 83       	std	Z+2, r22	; 0x02
    10fc:	82 ec       	ldi	r24, 0xC2	; 194
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	95 83       	std	Z+5, r25	; 0x05
    1102:	84 83       	std	Z+4, r24	; 0x04
    1104:	16 82       	std	Z+6, r1	; 0x06
    1106:	10 86       	std	Z+8, r1	; 0x08
    1108:	17 82       	std	Z+7, r1	; 0x07
    110a:	81 e0       	ldi	r24, 0x01	; 1
    110c:	62 e0       	ldi	r22, 0x02	; 2
    110e:	48 2d       	mov	r20, r8
    1110:	95 01       	movw	r18, r10
    1112:	86 01       	movw	r16, r12
    1114:	92 ec       	ldi	r25, 0xC2	; 194
    1116:	e9 2e       	mov	r14, r25
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	f9 2e       	mov	r15, r25
    111c:	cc 24       	eor	r12, r12
    111e:	aa 24       	eor	r10, r10
    1120:	bb 24       	eor	r11, r11
    1122:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <STEPPER_move>
    1126:	8d b7       	in	r24, 0x3d	; 61
    1128:	9e b7       	in	r25, 0x3e	; 62
    112a:	09 96       	adiw	r24, 0x09	; 9
    112c:	0f b6       	in	r0, 0x3f	; 63
    112e:	f8 94       	cli
    1130:	9e bf       	out	0x3e, r25	; 62
    1132:	0f be       	out	0x3f, r0	; 63
    1134:	8d bf       	out	0x3d, r24	; 61
		// debug LCP print statement
		// LCD_clear();
		// LCD_printf("moveWander\nmoveRand: %3d\nturnRandR: %3d\nturnRandL: %3d\n",moveRand,turnRandR,turnRandL);
		}
	return isWander;
}
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	1f 91       	pop	r17
    113e:	0f 91       	pop	r16
    1140:	ff 90       	pop	r15
    1142:	ef 90       	pop	r14
    1144:	df 90       	pop	r13
    1146:	cf 90       	pop	r12
    1148:	bf 90       	pop	r11
    114a:	af 90       	pop	r10
    114c:	8f 90       	pop	r8
    114e:	08 95       	ret

00001150 <moveAway>:
* Input Variables:	none
* Output Return:	char
* Overview:			Use a comment block like this before functions
********************************************************************/
char moveAway ( void )
{	
    1150:	2f 92       	push	r2
    1152:	3f 92       	push	r3
    1154:	4f 92       	push	r4
    1156:	5f 92       	push	r5
    1158:	6f 92       	push	r6
    115a:	7f 92       	push	r7
    115c:	8f 92       	push	r8
    115e:	9f 92       	push	r9
    1160:	af 92       	push	r10
    1162:	bf 92       	push	r11
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	df 93       	push	r29
    1172:	cf 93       	push	r28
    1174:	00 d0       	rcall	.+0      	; 0x1176 <moveAway+0x26>
    1176:	00 d0       	rcall	.+0      	; 0x1178 <moveAway+0x28>
    1178:	cd b7       	in	r28, 0x3d	; 61
    117a:	de b7       	in	r29, 0x3e	; 62
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    117c:	60 90 91 05 	lds	r6, 0x0591
    1180:	70 90 92 05 	lds	r7, 0x0592
    1184:	80 90 93 05 	lds	r8, 0x0593
    1188:	90 90 94 05 	lds	r9, 0x0594
    118c:	a0 90 9b 05 	lds	r10, 0x059B
    1190:	b0 90 9c 05 	lds	r11, 0x059C
    1194:	c0 90 9d 05 	lds	r12, 0x059D
    1198:	d0 90 9e 05 	lds	r13, 0x059E
	float moveX = rtIR - ltIR;
    119c:	e0 90 37 07 	lds	r14, 0x0737
    11a0:	f0 90 38 07 	lds	r15, 0x0738
    11a4:	00 91 39 07 	lds	r16, 0x0739
    11a8:	10 91 3a 07 	lds	r17, 0x073A
    11ac:	80 91 32 07 	lds	r24, 0x0732
    11b0:	90 91 33 07 	lds	r25, 0x0733
    11b4:	a0 91 34 07 	lds	r26, 0x0734
    11b8:	b0 91 35 07 	lds	r27, 0x0735
    11bc:	89 83       	std	Y+1, r24	; 0x01
    11be:	9a 83       	std	Y+2, r25	; 0x02
    11c0:	ab 83       	std	Y+3, r26	; 0x03
    11c2:	bc 83       	std	Y+4, r27	; 0x04
    11c4:	c8 01       	movw	r24, r16
    11c6:	b7 01       	movw	r22, r14
    11c8:	29 81       	ldd	r18, Y+1	; 0x01
    11ca:	3a 81       	ldd	r19, Y+2	; 0x02
    11cc:	4b 81       	ldd	r20, Y+3	; 0x03
    11ce:	5c 81       	ldd	r21, Y+4	; 0x04
    11d0:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__subsf3>
    11d4:	1b 01       	movw	r2, r22
    11d6:	2c 01       	movw	r4, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
    11d8:	c4 01       	movw	r24, r8
    11da:	b3 01       	movw	r22, r6
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 ee       	ldi	r20, 0xE0	; 224
    11e2:	50 e4       	ldi	r21, 0x40	; 64
    11e4:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    11e8:	87 fd       	sbrc	r24, 7
    11ea:	0b c0       	rjmp	.+22     	; 0x1202 <moveAway+0xb2>
    11ec:	c6 01       	movw	r24, r12
    11ee:	b5 01       	movw	r22, r10
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	40 ee       	ldi	r20, 0xE0	; 224
    11f6:	50 e4       	ldi	r21, 0x40	; 64
    11f8:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    11fc:	88 23       	and	r24, r24
    11fe:	0c f0       	brlt	.+2      	; 0x1202 <moveAway+0xb2>
    1200:	68 c0       	rjmp	.+208    	; 0x12d2 <moveAway+0x182>
{	
	char shyRobot = 0;
	
	// Use the differences between the front and back
	// left and right distances to calculate a force vector
	float moveY = ftIR - bkIR;
    1202:	c4 01       	movw	r24, r8
    1204:	b3 01       	movw	r22, r6
    1206:	a6 01       	movw	r20, r12
    1208:	95 01       	movw	r18, r10
    120a:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__subsf3>
    120e:	7b 01       	movw	r14, r22
    1210:	8c 01       	movw	r16, r24
	
	// if the object is in front of us are behind us
	// move appropriately in the Y direction
	if ((ftIR < IR_OBST_F_THRESH)|(bkIR < IR_OBST_B_THRESH))
	{
			BOOL moveForward = (moveY >= 0);
    1212:	77 24       	eor	r7, r7
    1214:	20 e0       	ldi	r18, 0x00	; 0
    1216:	30 e0       	ldi	r19, 0x00	; 0
    1218:	40 e0       	ldi	r20, 0x00	; 0
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	0e 94 0d 31 	call	0x621a	; 0x621a <__gesf2>
    1220:	88 23       	and	r24, r24
    1222:	14 f0       	brlt	.+4      	; 0x1228 <moveAway+0xd8>
    1224:	77 24       	eor	r7, r7
    1226:	73 94       	inc	r7
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    1228:	c8 01       	movw	r24, r16
    122a:	b7 01       	movw	r22, r14
    122c:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fixsfsi>
    1230:	9b 01       	movw	r18, r22
    1232:	77 ff       	sbrs	r23, 7
    1234:	03 c0       	rjmp	.+6      	; 0x123c <moveAway+0xec>
    1236:	30 95       	com	r19
    1238:	21 95       	neg	r18
    123a:	3f 4f       	sbci	r19, 0xFF	; 255
    123c:	b9 01       	movw	r22, r18
    123e:	88 27       	eor	r24, r24
    1240:	77 fd       	sbrc	r23, 7
    1242:	80 95       	com	r24
    1244:	98 2f       	mov	r25, r24
    1246:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatsisf>
    124a:	6b 01       	movw	r12, r22
    124c:	7c 01       	movw	r14, r24
    124e:	ad b7       	in	r26, 0x3d	; 61
    1250:	be b7       	in	r27, 0x3e	; 62
    1252:	19 97       	sbiw	r26, 0x09	; 9
    1254:	0f b6       	in	r0, 0x3f	; 63
    1256:	f8 94       	cli
    1258:	be bf       	out	0x3e, r27	; 62
    125a:	0f be       	out	0x3f, r0	; 63
    125c:	ad bf       	out	0x3d, r26	; 61
    125e:	0d b7       	in	r16, 0x3d	; 61
    1260:	1e b7       	in	r17, 0x3e	; 62
    1262:	0f 5f       	subi	r16, 0xFF	; 255
    1264:	1f 4f       	sbci	r17, 0xFF	; 255
    1266:	a2 01       	movw	r20, r4
    1268:	91 01       	movw	r18, r2
    126a:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    126e:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1272:	4b 01       	movw	r8, r22
    1274:	5c 01       	movw	r10, r24
    1276:	82 e3       	ldi	r24, 0x32	; 50
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	f8 01       	movw	r30, r16
    127c:	91 83       	std	Z+1, r25	; 0x01
    127e:	80 83       	st	Z, r24
    1280:	c7 01       	movw	r24, r14
    1282:	b6 01       	movw	r22, r12
    1284:	a2 01       	movw	r20, r4
    1286:	91 01       	movw	r18, r2
    1288:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__subsf3>
    128c:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1290:	d8 01       	movw	r26, r16
    1292:	13 96       	adiw	r26, 0x03	; 3
    1294:	7c 93       	st	X, r23
    1296:	6e 93       	st	-X, r22
    1298:	12 97       	sbiw	r26, 0x02	; 2
    129a:	82 ec       	ldi	r24, 0xC2	; 194
    129c:	91 e0       	ldi	r25, 0x01	; 1
    129e:	15 96       	adiw	r26, 0x05	; 5
    12a0:	9c 93       	st	X, r25
    12a2:	8e 93       	st	-X, r24
    12a4:	14 97       	sbiw	r26, 0x04	; 4
    12a6:	16 96       	adiw	r26, 0x06	; 6
    12a8:	1c 92       	st	X, r1
    12aa:	16 97       	sbiw	r26, 0x06	; 6
    12ac:	18 96       	adiw	r26, 0x08	; 8
    12ae:	1c 92       	st	X, r1
    12b0:	1e 92       	st	-X, r1
    12b2:	17 97       	sbiw	r26, 0x07	; 7
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	62 e0       	ldi	r22, 0x02	; 2
    12b8:	47 2d       	mov	r20, r7
    12ba:	22 e3       	ldi	r18, 0x32	; 50
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	84 01       	movw	r16, r8
    12c0:	e2 ec       	ldi	r30, 0xC2	; 194
    12c2:	ee 2e       	mov	r14, r30
    12c4:	e1 e0       	ldi	r30, 0x01	; 1
    12c6:	fe 2e       	mov	r15, r30
    12c8:	cc 24       	eor	r12, r12
    12ca:	aa 24       	eor	r10, r10
    12cc:	bb 24       	eor	r11, r11
    12ce:	87 2c       	mov	r8, r7
    12d0:	82 c0       	rjmp	.+260    	; 0x13d6 <moveAway+0x286>
			shyRobot = 1;
	}
	
	// if the object is on either side of the robot
	// rotate the robot appropriately
	else if ((rtIR < IR_OBST_R_THRESH))
    12d2:	c8 01       	movw	r24, r16
    12d4:	b7 01       	movw	r22, r14
    12d6:	20 e0       	ldi	r18, 0x00	; 0
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	40 e2       	ldi	r20, 0x20	; 32
    12dc:	51 e4       	ldi	r21, 0x41	; 65
    12de:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    12e2:	88 23       	and	r24, r24
    12e4:	b4 f5       	brge	.+108    	; 0x1352 <moveAway+0x202>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    12e6:	c2 01       	movw	r24, r4
    12e8:	b1 01       	movw	r22, r2
    12ea:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fixsfsi>
    12ee:	8b 01       	movw	r16, r22
    12f0:	77 ff       	sbrs	r23, 7
    12f2:	03 c0       	rjmp	.+6      	; 0x12fa <moveAway+0x1aa>
    12f4:	10 95       	com	r17
    12f6:	01 95       	neg	r16
    12f8:	1f 4f       	sbci	r17, 0xFF	; 255
    12fa:	2d b7       	in	r18, 0x3d	; 61
    12fc:	3e b7       	in	r19, 0x3e	; 62
    12fe:	29 50       	subi	r18, 0x09	; 9
    1300:	30 40       	sbci	r19, 0x00	; 0
    1302:	0f b6       	in	r0, 0x3f	; 63
    1304:	f8 94       	cli
    1306:	3e bf       	out	0x3e, r19	; 62
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	2d bf       	out	0x3d, r18	; 61
    130c:	ed b7       	in	r30, 0x3d	; 61
    130e:	fe b7       	in	r31, 0x3e	; 62
    1310:	31 96       	adiw	r30, 0x01	; 1
    1312:	88 ec       	ldi	r24, 0xC8	; 200
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	ad b7       	in	r26, 0x3d	; 61
    1318:	be b7       	in	r27, 0x3e	; 62
    131a:	12 96       	adiw	r26, 0x02	; 2
    131c:	9c 93       	st	X, r25
    131e:	8e 93       	st	-X, r24
    1320:	11 97       	sbiw	r26, 0x01	; 1
    1322:	13 83       	std	Z+3, r17	; 0x03
    1324:	02 83       	std	Z+2, r16	; 0x02
    1326:	82 ec       	ldi	r24, 0xC2	; 194
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	95 83       	std	Z+5, r25	; 0x05
    132c:	84 83       	std	Z+4, r24	; 0x04
    132e:	16 82       	std	Z+6, r1	; 0x06
    1330:	10 86       	std	Z+8, r1	; 0x08
    1332:	17 82       	std	Z+7, r1	; 0x07
    1334:	81 e0       	ldi	r24, 0x01	; 1
    1336:	62 e0       	ldi	r22, 0x02	; 2
    1338:	40 e0       	ldi	r20, 0x00	; 0
    133a:	28 ec       	ldi	r18, 0xC8	; 200
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	72 ec       	ldi	r23, 0xC2	; 194
    1340:	e7 2e       	mov	r14, r23
    1342:	71 e0       	ldi	r23, 0x01	; 1
    1344:	f7 2e       	mov	r15, r23
    1346:	cc 24       	eor	r12, r12
    1348:	aa 24       	eor	r10, r10
    134a:	bb 24       	eor	r11, r11
    134c:	88 24       	eor	r8, r8
    134e:	83 94       	inc	r8
    1350:	42 c0       	rjmp	.+132    	; 0x13d6 <moveAway+0x286>
			
			// if the robot was shy
			// state that fact
			shyRobot = 1;
	}
	else if ((ltIR < IR_OBST_L_THRESH))
    1352:	69 81       	ldd	r22, Y+1	; 0x01
    1354:	7a 81       	ldd	r23, Y+2	; 0x02
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	40 e2       	ldi	r20, 0x20	; 32
    1360:	51 e4       	ldi	r21, 0x41	; 65
    1362:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    1366:	87 fd       	sbrc	r24, 7
    1368:	02 c0       	rjmp	.+4      	; 0x136e <moveAway+0x21e>
    136a:	80 e0       	ldi	r24, 0x00	; 0
    136c:	3f c0       	rjmp	.+126    	; 0x13ec <moveAway+0x29c>
	{
			// BOOL moveForwardR = ~(moveX <= 0);
			// BOOL moveForwardL = ~(moveX > 0);
			
			// Move.
			STEPPER_move_stnb( STEPPER_BOTH, 
    136e:	c2 01       	movw	r24, r4
    1370:	b1 01       	movw	r22, r2
    1372:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fixsfsi>
    1376:	8b 01       	movw	r16, r22
    1378:	77 ff       	sbrs	r23, 7
    137a:	03 c0       	rjmp	.+6      	; 0x1382 <moveAway+0x232>
    137c:	10 95       	com	r17
    137e:	01 95       	neg	r16
    1380:	1f 4f       	sbci	r17, 0xFF	; 255
    1382:	2d b7       	in	r18, 0x3d	; 61
    1384:	3e b7       	in	r19, 0x3e	; 62
    1386:	29 50       	subi	r18, 0x09	; 9
    1388:	30 40       	sbci	r19, 0x00	; 0
    138a:	0f b6       	in	r0, 0x3f	; 63
    138c:	f8 94       	cli
    138e:	3e bf       	out	0x3e, r19	; 62
    1390:	0f be       	out	0x3f, r0	; 63
    1392:	2d bf       	out	0x3d, r18	; 61
    1394:	ed b7       	in	r30, 0x3d	; 61
    1396:	fe b7       	in	r31, 0x3e	; 62
    1398:	31 96       	adiw	r30, 0x01	; 1
    139a:	88 ec       	ldi	r24, 0xC8	; 200
    139c:	90 e0       	ldi	r25, 0x00	; 0
    139e:	ad b7       	in	r26, 0x3d	; 61
    13a0:	be b7       	in	r27, 0x3e	; 62
    13a2:	12 96       	adiw	r26, 0x02	; 2
    13a4:	9c 93       	st	X, r25
    13a6:	8e 93       	st	-X, r24
    13a8:	11 97       	sbiw	r26, 0x01	; 1
    13aa:	13 83       	std	Z+3, r17	; 0x03
    13ac:	02 83       	std	Z+2, r16	; 0x02
    13ae:	82 ec       	ldi	r24, 0xC2	; 194
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	95 83       	std	Z+5, r25	; 0x05
    13b4:	84 83       	std	Z+4, r24	; 0x04
    13b6:	16 82       	std	Z+6, r1	; 0x06
    13b8:	10 86       	std	Z+8, r1	; 0x08
    13ba:	17 82       	std	Z+7, r1	; 0x07
    13bc:	81 e0       	ldi	r24, 0x01	; 1
    13be:	62 e0       	ldi	r22, 0x02	; 2
    13c0:	41 e0       	ldi	r20, 0x01	; 1
    13c2:	28 ec       	ldi	r18, 0xC8	; 200
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	52 ec       	ldi	r21, 0xC2	; 194
    13c8:	e5 2e       	mov	r14, r21
    13ca:	51 e0       	ldi	r21, 0x01	; 1
    13cc:	f5 2e       	mov	r15, r21
    13ce:	cc 24       	eor	r12, r12
    13d0:	aa 24       	eor	r10, r10
    13d2:	bb 24       	eor	r11, r11
    13d4:	88 24       	eor	r8, r8
    13d6:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <STEPPER_move>
    13da:	81 e0       	ldi	r24, 0x01	; 1
    13dc:	ed b7       	in	r30, 0x3d	; 61
    13de:	fe b7       	in	r31, 0x3e	; 62
    13e0:	39 96       	adiw	r30, 0x09	; 9
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	fe bf       	out	0x3e, r31	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	ed bf       	out	0x3d, r30	; 61
			// state that fact
			shyRobot = 1;
	}
	
	return shyRobot;
}
    13ec:	0f 90       	pop	r0
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	cf 91       	pop	r28
    13f6:	df 91       	pop	r29
    13f8:	1f 91       	pop	r17
    13fa:	0f 91       	pop	r16
    13fc:	ff 90       	pop	r15
    13fe:	ef 90       	pop	r14
    1400:	df 90       	pop	r13
    1402:	cf 90       	pop	r12
    1404:	bf 90       	pop	r11
    1406:	af 90       	pop	r10
    1408:	9f 90       	pop	r9
    140a:	8f 90       	pop	r8
    140c:	7f 90       	pop	r7
    140e:	6f 90       	pop	r6
    1410:	5f 90       	pop	r5
    1412:	4f 90       	pop	r4
    1414:	3f 90       	pop	r3
    1416:	2f 90       	pop	r2
    1418:	08 95       	ret

0000141a <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    141a:	2f 92       	push	r2
    141c:	3f 92       	push	r3
    141e:	4f 92       	push	r4
    1420:	5f 92       	push	r5
    1422:	6f 92       	push	r6
    1424:	7f 92       	push	r7
    1426:	8f 92       	push	r8
    1428:	9f 92       	push	r9
    142a:	af 92       	push	r10
    142c:	bf 92       	push	r11
    142e:	cf 92       	push	r12
    1430:	df 92       	push	r13
    1432:	ef 92       	push	r14
    1434:	ff 92       	push	r15
    1436:	0f 93       	push	r16
    1438:	1f 93       	push	r17
    143a:	df 93       	push	r29
    143c:	cf 93       	push	r28
    143e:	cd b7       	in	r28, 0x3d	; 61
    1440:	de b7       	in	r29, 0x3e	; 62
    1442:	a0 97       	sbiw	r28, 0x20	; 32
    1444:	0f b6       	in	r0, 0x3f	; 63
    1446:	f8 94       	cli
    1448:	de bf       	out	0x3e, r29	; 62
    144a:	0f be       	out	0x3f, r0	; 63
    144c:	cd bf       	out	0x3d, r28	; 61
    144e:	2b 01       	movw	r4, r22
    1450:	3c 01       	movw	r6, r24
    1452:	2d 83       	std	Y+5, r18	; 0x05
    1454:	3e 83       	std	Y+6, r19	; 0x06
    1456:	4f 83       	std	Y+7, r20	; 0x07
    1458:	58 87       	std	Y+8, r21	; 0x08
    145a:	e9 86       	std	Y+9, r14	; 0x09
    145c:	fa 86       	std	Y+10, r15	; 0x0a
    145e:	0b 87       	std	Y+11, r16	; 0x0b
    1460:	1c 87       	std	Y+12, r17	; 0x0c
    1462:	ad 86       	std	Y+13, r10	; 0x0d
    1464:	be 86       	std	Y+14, r11	; 0x0e
    1466:	cf 86       	std	Y+15, r12	; 0x0f
    1468:	d8 8a       	std	Y+16, r13	; 0x10
    146a:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    146c:	33 24       	eor	r3, r3
    146e:	ca 01       	movw	r24, r20
    1470:	b9 01       	movw	r22, r18
    1472:	20 e0       	ldi	r18, 0x00	; 0
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	50 e0       	ldi	r21, 0x00	; 0
    147a:	0e 94 0d 31 	call	0x621a	; 0x621a <__gesf2>
    147e:	18 16       	cp	r1, r24
    1480:	14 f4       	brge	.+4      	; 0x1486 <move_arc_stnb+0x6c>
    1482:	33 24       	eor	r3, r3
    1484:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1486:	6d 81       	ldd	r22, Y+5	; 0x05
    1488:	7e 81       	ldd	r23, Y+6	; 0x06
    148a:	8f 81       	ldd	r24, Y+7	; 0x07
    148c:	98 85       	ldd	r25, Y+8	; 0x08
    148e:	2c ed       	ldi	r18, 0xDC	; 220
    1490:	38 eb       	ldi	r19, 0xB8	; 184
    1492:	48 e0       	ldi	r20, 0x08	; 8
    1494:	5e e3       	ldi	r21, 0x3E	; 62
    1496:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    149a:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fixsfsi>
    149e:	9b 01       	movw	r18, r22
    14a0:	77 ff       	sbrs	r23, 7
    14a2:	03 c0       	rjmp	.+6      	; 0x14aa <move_arc_stnb+0x90>
    14a4:	30 95       	com	r19
    14a6:	21 95       	neg	r18
    14a8:	3f 4f       	sbci	r19, 0xFF	; 255
    14aa:	b9 01       	movw	r22, r18
    14ac:	88 27       	eor	r24, r24
    14ae:	77 fd       	sbrc	r23, 7
    14b0:	80 95       	com	r24
    14b2:	98 2f       	mov	r25, r24
    14b4:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatsisf>
    14b8:	69 83       	std	Y+1, r22	; 0x01
    14ba:	7a 83       	std	Y+2, r23	; 0x02
    14bc:	8b 83       	std	Y+3, r24	; 0x03
    14be:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    14c0:	69 85       	ldd	r22, Y+9	; 0x09
    14c2:	7a 85       	ldd	r23, Y+10	; 0x0a
    14c4:	8b 85       	ldd	r24, Y+11	; 0x0b
    14c6:	9c 85       	ldd	r25, Y+12	; 0x0c
    14c8:	2c ed       	ldi	r18, 0xDC	; 220
    14ca:	38 eb       	ldi	r19, 0xB8	; 184
    14cc:	48 e0       	ldi	r20, 0x08	; 8
    14ce:	5e e3       	ldi	r21, 0x3E	; 62
    14d0:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    14d4:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fixsfsi>
    14d8:	9b 01       	movw	r18, r22
    14da:	77 ff       	sbrs	r23, 7
    14dc:	03 c0       	rjmp	.+6      	; 0x14e4 <move_arc_stnb+0xca>
    14de:	30 95       	com	r19
    14e0:	21 95       	neg	r18
    14e2:	3f 4f       	sbci	r19, 0xFF	; 255
    14e4:	b9 01       	movw	r22, r18
    14e6:	88 27       	eor	r24, r24
    14e8:	77 fd       	sbrc	r23, 7
    14ea:	80 95       	com	r24
    14ec:	98 2f       	mov	r25, r24
    14ee:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatsisf>
    14f2:	4b 01       	movw	r8, r22
    14f4:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    14f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    14f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    14fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    14fc:	98 89       	ldd	r25, Y+16	; 0x10
    14fe:	2c ed       	ldi	r18, 0xDC	; 220
    1500:	38 eb       	ldi	r19, 0xB8	; 184
    1502:	48 e0       	ldi	r20, 0x08	; 8
    1504:	5e e3       	ldi	r21, 0x3E	; 62
    1506:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    150a:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fixsfsi>
    150e:	9b 01       	movw	r18, r22
    1510:	77 ff       	sbrs	r23, 7
    1512:	03 c0       	rjmp	.+6      	; 0x151a <move_arc_stnb+0x100>
    1514:	30 95       	com	r19
    1516:	21 95       	neg	r18
    1518:	3f 4f       	sbci	r19, 0xFF	; 255
    151a:	b9 01       	movw	r22, r18
    151c:	88 27       	eor	r24, r24
    151e:	77 fd       	sbrc	r23, 7
    1520:	80 95       	com	r24
    1522:	98 2f       	mov	r25, r24
    1524:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatsisf>
    1528:	6b 01       	movw	r12, r22
    152a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    152c:	c3 01       	movw	r24, r6
    152e:	b2 01       	movw	r22, r4
    1530:	20 e0       	ldi	r18, 0x00	; 0
    1532:	30 e0       	ldi	r19, 0x00	; 0
    1534:	40 e0       	ldi	r20, 0x00	; 0
    1536:	5f e4       	ldi	r21, 0x4F	; 79
    1538:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    153c:	88 23       	and	r24, r24
    153e:	a1 f5       	brne	.+104    	; 0x15a8 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1540:	69 81       	ldd	r22, Y+1	; 0x01
    1542:	7a 81       	ldd	r23, Y+2	; 0x02
    1544:	8b 81       	ldd	r24, Y+3	; 0x03
    1546:	9c 81       	ldd	r25, Y+4	; 0x04
    1548:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    154c:	2b 01       	movw	r4, r22
    154e:	3c 01       	movw	r6, r24
    1550:	c5 01       	movw	r24, r10
    1552:	b4 01       	movw	r22, r8
    1554:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1558:	4b 01       	movw	r8, r22
    155a:	5c 01       	movw	r10, r24
    155c:	c7 01       	movw	r24, r14
    155e:	b6 01       	movw	r22, r12
    1560:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1564:	6b 01       	movw	r12, r22
    1566:	7c 01       	movw	r14, r24
    1568:	2d b7       	in	r18, 0x3d	; 61
    156a:	3e b7       	in	r19, 0x3e	; 62
    156c:	29 50       	subi	r18, 0x09	; 9
    156e:	30 40       	sbci	r19, 0x00	; 0
    1570:	0f b6       	in	r0, 0x3f	; 63
    1572:	f8 94       	cli
    1574:	3e bf       	out	0x3e, r19	; 62
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	2d bf       	out	0x3d, r18	; 61
    157a:	ed b7       	in	r30, 0x3d	; 61
    157c:	fe b7       	in	r31, 0x3e	; 62
    157e:	31 96       	adiw	r30, 0x01	; 1
    1580:	ad b7       	in	r26, 0x3d	; 61
    1582:	be b7       	in	r27, 0x3e	; 62
    1584:	12 96       	adiw	r26, 0x02	; 2
    1586:	5c 92       	st	X, r5
    1588:	4e 92       	st	-X, r4
    158a:	11 97       	sbiw	r26, 0x01	; 1
    158c:	93 82       	std	Z+3, r9	; 0x03
    158e:	82 82       	std	Z+2, r8	; 0x02
    1590:	75 83       	std	Z+5, r23	; 0x05
    1592:	64 83       	std	Z+4, r22	; 0x04
    1594:	26 82       	std	Z+6, r2	; 0x06
    1596:	10 86       	std	Z+8, r1	; 0x08
    1598:	17 82       	std	Z+7, r1	; 0x07
    159a:	81 e0       	ldi	r24, 0x01	; 1
    159c:	62 e0       	ldi	r22, 0x02	; 2
    159e:	43 2d       	mov	r20, r3
    15a0:	92 01       	movw	r18, r4
    15a2:	84 01       	movw	r16, r8
    15a4:	76 01       	movw	r14, r12
    15a6:	c1 c1       	rjmp	.+898    	; 0x192a <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    15a8:	c3 01       	movw	r24, r6
    15aa:	b2 01       	movw	r22, r4
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e0       	ldi	r20, 0x00	; 0
    15b2:	50 e0       	ldi	r21, 0x00	; 0
    15b4:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    15b8:	88 23       	and	r24, r24
    15ba:	e9 f5       	brne	.+122    	; 0x1636 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    15bc:	69 81       	ldd	r22, Y+1	; 0x01
    15be:	7a 81       	ldd	r23, Y+2	; 0x02
    15c0:	8b 81       	ldd	r24, Y+3	; 0x03
    15c2:	9c 81       	ldd	r25, Y+4	; 0x04
    15c4:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    15c8:	3b 01       	movw	r6, r22
    15ca:	c5 01       	movw	r24, r10
    15cc:	b4 01       	movw	r22, r8
    15ce:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    15d2:	8b 01       	movw	r16, r22
    15d4:	c7 01       	movw	r24, r14
    15d6:	b6 01       	movw	r22, r12
    15d8:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    15dc:	7b 01       	movw	r14, r22
    15de:	2d b7       	in	r18, 0x3d	; 61
    15e0:	3e b7       	in	r19, 0x3e	; 62
    15e2:	29 50       	subi	r18, 0x09	; 9
    15e4:	30 40       	sbci	r19, 0x00	; 0
    15e6:	0f b6       	in	r0, 0x3f	; 63
    15e8:	f8 94       	cli
    15ea:	3e bf       	out	0x3e, r19	; 62
    15ec:	0f be       	out	0x3f, r0	; 63
    15ee:	2d bf       	out	0x3d, r18	; 61
    15f0:	ed b7       	in	r30, 0x3d	; 61
    15f2:	fe b7       	in	r31, 0x3e	; 62
    15f4:	31 96       	adiw	r30, 0x01	; 1
    15f6:	40 e0       	ldi	r20, 0x00	; 0
    15f8:	33 20       	and	r3, r3
    15fa:	09 f4       	brne	.+2      	; 0x15fe <move_arc_stnb+0x1e4>
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	71 82       	std	Z+1, r7	; 0x01
    1600:	60 82       	st	Z, r6
    1602:	13 83       	std	Z+3, r17	; 0x03
    1604:	02 83       	std	Z+2, r16	; 0x02
    1606:	f5 82       	std	Z+5, r15	; 0x05
    1608:	e4 82       	std	Z+4, r14	; 0x04
    160a:	26 82       	std	Z+6, r2	; 0x06
    160c:	10 86       	std	Z+8, r1	; 0x08
    160e:	17 82       	std	Z+7, r1	; 0x07
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	62 e0       	ldi	r22, 0x02	; 2
    1614:	93 01       	movw	r18, r6
    1616:	c2 2c       	mov	r12, r2
    1618:	aa 24       	eor	r10, r10
    161a:	bb 24       	eor	r11, r11
    161c:	83 2c       	mov	r8, r3
    161e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <STEPPER_move>
    1622:	81 e0       	ldi	r24, 0x01	; 1
    1624:	ad b7       	in	r26, 0x3d	; 61
    1626:	be b7       	in	r27, 0x3e	; 62
    1628:	19 96       	adiw	r26, 0x09	; 9
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	be bf       	out	0x3e, r27	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	ad bf       	out	0x3d, r26	; 61
    1634:	89 c1       	rjmp	.+786    	; 0x1948 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1636:	c3 01       	movw	r24, r6
    1638:	b2 01       	movw	r22, r4
    163a:	20 e0       	ldi	r18, 0x00	; 0
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	40 e0       	ldi	r20, 0x00	; 0
    1640:	50 e0       	ldi	r21, 0x00	; 0
    1642:	0e 94 0d 31 	call	0x621a	; 0x621a <__gesf2>
    1646:	18 16       	cp	r1, r24
    1648:	0c f0       	brlt	.+2      	; 0x164c <move_arc_stnb+0x232>
    164a:	b1 c0       	rjmp	.+354    	; 0x17ae <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    164c:	66 e6       	ldi	r22, 0x66	; 102
    164e:	76 e6       	ldi	r23, 0x66	; 102
    1650:	8a ea       	ldi	r24, 0xAA	; 170
    1652:	91 ec       	ldi	r25, 0xC1	; 193
    1654:	a3 01       	movw	r20, r6
    1656:	92 01       	movw	r18, r4
    1658:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    165c:	20 e0       	ldi	r18, 0x00	; 0
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	40 e8       	ldi	r20, 0x80	; 128
    1662:	5f e3       	ldi	r21, 0x3F	; 63
    1664:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    1668:	7b 01       	movw	r14, r22
    166a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    166c:	66 e6       	ldi	r22, 0x66	; 102
    166e:	76 e6       	ldi	r23, 0x66	; 102
    1670:	8a ea       	ldi	r24, 0xAA	; 170
    1672:	91 e4       	ldi	r25, 0x41	; 65
    1674:	a3 01       	movw	r20, r6
    1676:	92 01       	movw	r18, r4
    1678:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    167c:	20 e0       	ldi	r18, 0x00	; 0
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	40 e8       	ldi	r20, 0x80	; 128
    1682:	5f e3       	ldi	r21, 0x3F	; 63
    1684:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    1688:	5b 01       	movw	r10, r22
    168a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    168c:	ed b7       	in	r30, 0x3d	; 61
    168e:	fe b7       	in	r31, 0x3e	; 62
    1690:	39 97       	sbiw	r30, 0x09	; 9
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	fe bf       	out	0x3e, r31	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	ed bf       	out	0x3d, r30	; 61
    169c:	8d b6       	in	r8, 0x3d	; 61
    169e:	9e b6       	in	r9, 0x3e	; 62
    16a0:	08 94       	sec
    16a2:	81 1c       	adc	r8, r1
    16a4:	91 1c       	adc	r9, r1
    16a6:	6d 81       	ldd	r22, Y+5	; 0x05
    16a8:	7e 81       	ldd	r23, Y+6	; 0x06
    16aa:	8f 81       	ldd	r24, Y+7	; 0x07
    16ac:	98 85       	ldd	r25, Y+8	; 0x08
    16ae:	a8 01       	movw	r20, r16
    16b0:	97 01       	movw	r18, r14
    16b2:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    16b6:	2c ed       	ldi	r18, 0xDC	; 220
    16b8:	38 eb       	ldi	r19, 0xB8	; 184
    16ba:	48 e0       	ldi	r20, 0x08	; 8
    16bc:	5e e3       	ldi	r21, 0x3E	; 62
    16be:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    16c2:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    16c6:	69 8b       	std	Y+17, r22	; 0x11
    16c8:	7a 8b       	std	Y+18, r23	; 0x12
    16ca:	8b 8b       	std	Y+19, r24	; 0x13
    16cc:	9c 8b       	std	Y+20, r25	; 0x14
    16ce:	69 85       	ldd	r22, Y+9	; 0x09
    16d0:	7a 85       	ldd	r23, Y+10	; 0x0a
    16d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    16d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    16d6:	a8 01       	movw	r20, r16
    16d8:	97 01       	movw	r18, r14
    16da:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    16de:	2c ed       	ldi	r18, 0xDC	; 220
    16e0:	38 eb       	ldi	r19, 0xB8	; 184
    16e2:	48 e0       	ldi	r20, 0x08	; 8
    16e4:	5e e3       	ldi	r21, 0x3E	; 62
    16e6:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    16ea:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    16ee:	6d 8b       	std	Y+21, r22	; 0x15
    16f0:	7e 8b       	std	Y+22, r23	; 0x16
    16f2:	8f 8b       	std	Y+23, r24	; 0x17
    16f4:	98 8f       	std	Y+24, r25	; 0x18
    16f6:	6d 85       	ldd	r22, Y+13	; 0x0d
    16f8:	7e 85       	ldd	r23, Y+14	; 0x0e
    16fa:	8f 85       	ldd	r24, Y+15	; 0x0f
    16fc:	98 89       	ldd	r25, Y+16	; 0x10
    16fe:	a8 01       	movw	r20, r16
    1700:	97 01       	movw	r18, r14
    1702:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1706:	2c ed       	ldi	r18, 0xDC	; 220
    1708:	38 eb       	ldi	r19, 0xB8	; 184
    170a:	48 e0       	ldi	r20, 0x08	; 8
    170c:	5e e3       	ldi	r21, 0x3E	; 62
    170e:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1712:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1716:	2b 01       	movw	r4, r22
    1718:	3c 01       	movw	r6, r24
    171a:	6d 81       	ldd	r22, Y+5	; 0x05
    171c:	7e 81       	ldd	r23, Y+6	; 0x06
    171e:	8f 81       	ldd	r24, Y+7	; 0x07
    1720:	98 85       	ldd	r25, Y+8	; 0x08
    1722:	a6 01       	movw	r20, r12
    1724:	95 01       	movw	r18, r10
    1726:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    172a:	2c ed       	ldi	r18, 0xDC	; 220
    172c:	38 eb       	ldi	r19, 0xB8	; 184
    172e:	48 e0       	ldi	r20, 0x08	; 8
    1730:	5e e3       	ldi	r21, 0x3E	; 62
    1732:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1736:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    173a:	d4 01       	movw	r26, r8
    173c:	6d 93       	st	X+, r22
    173e:	7c 93       	st	X, r23
    1740:	69 85       	ldd	r22, Y+9	; 0x09
    1742:	7a 85       	ldd	r23, Y+10	; 0x0a
    1744:	8b 85       	ldd	r24, Y+11	; 0x0b
    1746:	9c 85       	ldd	r25, Y+12	; 0x0c
    1748:	a6 01       	movw	r20, r12
    174a:	95 01       	movw	r18, r10
    174c:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1750:	2c ed       	ldi	r18, 0xDC	; 220
    1752:	38 eb       	ldi	r19, 0xB8	; 184
    1754:	48 e0       	ldi	r20, 0x08	; 8
    1756:	5e e3       	ldi	r21, 0x3E	; 62
    1758:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    175c:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1760:	f4 01       	movw	r30, r8
    1762:	73 83       	std	Z+3, r23	; 0x03
    1764:	62 83       	std	Z+2, r22	; 0x02
    1766:	6d 85       	ldd	r22, Y+13	; 0x0d
    1768:	7e 85       	ldd	r23, Y+14	; 0x0e
    176a:	8f 85       	ldd	r24, Y+15	; 0x0f
    176c:	98 89       	ldd	r25, Y+16	; 0x10
    176e:	a6 01       	movw	r20, r12
    1770:	95 01       	movw	r18, r10
    1772:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1776:	2c ed       	ldi	r18, 0xDC	; 220
    1778:	38 eb       	ldi	r19, 0xB8	; 184
    177a:	48 e0       	ldi	r20, 0x08	; 8
    177c:	5e e3       	ldi	r21, 0x3E	; 62
    177e:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1782:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1786:	d4 01       	movw	r26, r8
    1788:	15 96       	adiw	r26, 0x05	; 5
    178a:	7c 93       	st	X, r23
    178c:	6e 93       	st	-X, r22
    178e:	14 97       	sbiw	r26, 0x04	; 4
    1790:	16 96       	adiw	r26, 0x06	; 6
    1792:	2c 92       	st	X, r2
    1794:	16 97       	sbiw	r26, 0x06	; 6
    1796:	18 96       	adiw	r26, 0x08	; 8
    1798:	1c 92       	st	X, r1
    179a:	1e 92       	st	-X, r1
    179c:	17 97       	sbiw	r26, 0x07	; 7
    179e:	81 e0       	ldi	r24, 0x01	; 1
    17a0:	62 e0       	ldi	r22, 0x02	; 2
    17a2:	43 2d       	mov	r20, r3
    17a4:	29 89       	ldd	r18, Y+17	; 0x11
    17a6:	3a 89       	ldd	r19, Y+18	; 0x12
    17a8:	0d 89       	ldd	r16, Y+21	; 0x15
    17aa:	1e 89       	ldd	r17, Y+22	; 0x16
    17ac:	bd c0       	rjmp	.+378    	; 0x1928 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    17ae:	c3 01       	movw	r24, r6
    17b0:	b2 01       	movw	r22, r4
    17b2:	20 e0       	ldi	r18, 0x00	; 0
    17b4:	30 e0       	ldi	r19, 0x00	; 0
    17b6:	40 e0       	ldi	r20, 0x00	; 0
    17b8:	50 e0       	ldi	r21, 0x00	; 0
    17ba:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    17be:	87 fd       	sbrc	r24, 7
    17c0:	02 c0       	rjmp	.+4      	; 0x17c6 <move_arc_stnb+0x3ac>
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	c1 c0       	rjmp	.+386    	; 0x1948 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    17c6:	66 e6       	ldi	r22, 0x66	; 102
    17c8:	76 e6       	ldi	r23, 0x66	; 102
    17ca:	8a ea       	ldi	r24, 0xAA	; 170
    17cc:	91 e4       	ldi	r25, 0x41	; 65
    17ce:	a3 01       	movw	r20, r6
    17d0:	92 01       	movw	r18, r4
    17d2:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e8       	ldi	r20, 0x80	; 128
    17dc:	5f e3       	ldi	r21, 0x3F	; 63
    17de:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    17e2:	7b 01       	movw	r14, r22
    17e4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    17e6:	66 e6       	ldi	r22, 0x66	; 102
    17e8:	76 e6       	ldi	r23, 0x66	; 102
    17ea:	8a ea       	ldi	r24, 0xAA	; 170
    17ec:	91 ec       	ldi	r25, 0xC1	; 193
    17ee:	a3 01       	movw	r20, r6
    17f0:	92 01       	movw	r18, r4
    17f2:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    17f6:	20 e0       	ldi	r18, 0x00	; 0
    17f8:	30 e0       	ldi	r19, 0x00	; 0
    17fa:	40 e8       	ldi	r20, 0x80	; 128
    17fc:	5f e3       	ldi	r21, 0x3F	; 63
    17fe:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    1802:	5b 01       	movw	r10, r22
    1804:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1806:	2d b7       	in	r18, 0x3d	; 61
    1808:	3e b7       	in	r19, 0x3e	; 62
    180a:	29 50       	subi	r18, 0x09	; 9
    180c:	30 40       	sbci	r19, 0x00	; 0
    180e:	0f b6       	in	r0, 0x3f	; 63
    1810:	f8 94       	cli
    1812:	3e bf       	out	0x3e, r19	; 62
    1814:	0f be       	out	0x3f, r0	; 63
    1816:	2d bf       	out	0x3d, r18	; 61
    1818:	8d b6       	in	r8, 0x3d	; 61
    181a:	9e b6       	in	r9, 0x3e	; 62
    181c:	08 94       	sec
    181e:	81 1c       	adc	r8, r1
    1820:	91 1c       	adc	r9, r1
    1822:	6d 81       	ldd	r22, Y+5	; 0x05
    1824:	7e 81       	ldd	r23, Y+6	; 0x06
    1826:	8f 81       	ldd	r24, Y+7	; 0x07
    1828:	98 85       	ldd	r25, Y+8	; 0x08
    182a:	a8 01       	movw	r20, r16
    182c:	97 01       	movw	r18, r14
    182e:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1832:	2c ed       	ldi	r18, 0xDC	; 220
    1834:	38 eb       	ldi	r19, 0xB8	; 184
    1836:	48 e0       	ldi	r20, 0x08	; 8
    1838:	5e e3       	ldi	r21, 0x3E	; 62
    183a:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    183e:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1842:	69 8f       	std	Y+25, r22	; 0x19
    1844:	7a 8f       	std	Y+26, r23	; 0x1a
    1846:	8b 8f       	std	Y+27, r24	; 0x1b
    1848:	9c 8f       	std	Y+28, r25	; 0x1c
    184a:	69 85       	ldd	r22, Y+9	; 0x09
    184c:	7a 85       	ldd	r23, Y+10	; 0x0a
    184e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1850:	9c 85       	ldd	r25, Y+12	; 0x0c
    1852:	a8 01       	movw	r20, r16
    1854:	97 01       	movw	r18, r14
    1856:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    185a:	2c ed       	ldi	r18, 0xDC	; 220
    185c:	38 eb       	ldi	r19, 0xB8	; 184
    185e:	48 e0       	ldi	r20, 0x08	; 8
    1860:	5e e3       	ldi	r21, 0x3E	; 62
    1862:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1866:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    186a:	6d 8f       	std	Y+29, r22	; 0x1d
    186c:	7e 8f       	std	Y+30, r23	; 0x1e
    186e:	8f 8f       	std	Y+31, r24	; 0x1f
    1870:	98 a3       	std	Y+32, r25	; 0x20
    1872:	6d 85       	ldd	r22, Y+13	; 0x0d
    1874:	7e 85       	ldd	r23, Y+14	; 0x0e
    1876:	8f 85       	ldd	r24, Y+15	; 0x0f
    1878:	98 89       	ldd	r25, Y+16	; 0x10
    187a:	a8 01       	movw	r20, r16
    187c:	97 01       	movw	r18, r14
    187e:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1882:	2c ed       	ldi	r18, 0xDC	; 220
    1884:	38 eb       	ldi	r19, 0xB8	; 184
    1886:	48 e0       	ldi	r20, 0x08	; 8
    1888:	5e e3       	ldi	r21, 0x3E	; 62
    188a:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    188e:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1892:	2b 01       	movw	r4, r22
    1894:	3c 01       	movw	r6, r24
    1896:	6d 81       	ldd	r22, Y+5	; 0x05
    1898:	7e 81       	ldd	r23, Y+6	; 0x06
    189a:	8f 81       	ldd	r24, Y+7	; 0x07
    189c:	98 85       	ldd	r25, Y+8	; 0x08
    189e:	a6 01       	movw	r20, r12
    18a0:	95 01       	movw	r18, r10
    18a2:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    18a6:	2c ed       	ldi	r18, 0xDC	; 220
    18a8:	38 eb       	ldi	r19, 0xB8	; 184
    18aa:	48 e0       	ldi	r20, 0x08	; 8
    18ac:	5e e3       	ldi	r21, 0x3E	; 62
    18ae:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    18b2:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    18b6:	d4 01       	movw	r26, r8
    18b8:	6d 93       	st	X+, r22
    18ba:	7c 93       	st	X, r23
    18bc:	69 85       	ldd	r22, Y+9	; 0x09
    18be:	7a 85       	ldd	r23, Y+10	; 0x0a
    18c0:	8b 85       	ldd	r24, Y+11	; 0x0b
    18c2:	9c 85       	ldd	r25, Y+12	; 0x0c
    18c4:	a6 01       	movw	r20, r12
    18c6:	95 01       	movw	r18, r10
    18c8:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    18cc:	2c ed       	ldi	r18, 0xDC	; 220
    18ce:	38 eb       	ldi	r19, 0xB8	; 184
    18d0:	48 e0       	ldi	r20, 0x08	; 8
    18d2:	5e e3       	ldi	r21, 0x3E	; 62
    18d4:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    18d8:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    18dc:	f4 01       	movw	r30, r8
    18de:	73 83       	std	Z+3, r23	; 0x03
    18e0:	62 83       	std	Z+2, r22	; 0x02
    18e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    18e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    18e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    18e8:	98 89       	ldd	r25, Y+16	; 0x10
    18ea:	a6 01       	movw	r20, r12
    18ec:	95 01       	movw	r18, r10
    18ee:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    18f2:	2c ed       	ldi	r18, 0xDC	; 220
    18f4:	38 eb       	ldi	r19, 0xB8	; 184
    18f6:	48 e0       	ldi	r20, 0x08	; 8
    18f8:	5e e3       	ldi	r21, 0x3E	; 62
    18fa:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    18fe:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1902:	d4 01       	movw	r26, r8
    1904:	15 96       	adiw	r26, 0x05	; 5
    1906:	7c 93       	st	X, r23
    1908:	6e 93       	st	-X, r22
    190a:	14 97       	sbiw	r26, 0x04	; 4
    190c:	16 96       	adiw	r26, 0x06	; 6
    190e:	2c 92       	st	X, r2
    1910:	16 97       	sbiw	r26, 0x06	; 6
    1912:	18 96       	adiw	r26, 0x08	; 8
    1914:	1c 92       	st	X, r1
    1916:	1e 92       	st	-X, r1
    1918:	17 97       	sbiw	r26, 0x07	; 7
    191a:	81 e0       	ldi	r24, 0x01	; 1
    191c:	62 e0       	ldi	r22, 0x02	; 2
    191e:	43 2d       	mov	r20, r3
    1920:	29 8d       	ldd	r18, Y+25	; 0x19
    1922:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1924:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1926:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1928:	72 01       	movw	r14, r4
    192a:	c2 2c       	mov	r12, r2
    192c:	aa 24       	eor	r10, r10
    192e:	bb 24       	eor	r11, r11
    1930:	83 2c       	mov	r8, r3
    1932:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <STEPPER_move>
    1936:	81 e0       	ldi	r24, 0x01	; 1
    1938:	ed b7       	in	r30, 0x3d	; 61
    193a:	fe b7       	in	r31, 0x3e	; 62
    193c:	39 96       	adiw	r30, 0x09	; 9
    193e:	0f b6       	in	r0, 0x3f	; 63
    1940:	f8 94       	cli
    1942:	fe bf       	out	0x3e, r31	; 62
    1944:	0f be       	out	0x3f, r0	; 63
    1946:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1948:	a0 96       	adiw	r28, 0x20	; 32
    194a:	0f b6       	in	r0, 0x3f	; 63
    194c:	f8 94       	cli
    194e:	de bf       	out	0x3e, r29	; 62
    1950:	0f be       	out	0x3f, r0	; 63
    1952:	cd bf       	out	0x3d, r28	; 61
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	1f 91       	pop	r17
    195a:	0f 91       	pop	r16
    195c:	ff 90       	pop	r15
    195e:	ef 90       	pop	r14
    1960:	df 90       	pop	r13
    1962:	cf 90       	pop	r12
    1964:	bf 90       	pop	r11
    1966:	af 90       	pop	r10
    1968:	9f 90       	pop	r9
    196a:	8f 90       	pop	r8
    196c:	7f 90       	pop	r7
    196e:	6f 90       	pop	r6
    1970:	5f 90       	pop	r5
    1972:	4f 90       	pop	r4
    1974:	3f 90       	pop	r3
    1976:	2f 90       	pop	r2
    1978:	08 95       	ret

0000197a <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    197a:	2f 92       	push	r2
    197c:	3f 92       	push	r3
    197e:	4f 92       	push	r4
    1980:	5f 92       	push	r5
    1982:	6f 92       	push	r6
    1984:	7f 92       	push	r7
    1986:	8f 92       	push	r8
    1988:	9f 92       	push	r9
    198a:	af 92       	push	r10
    198c:	bf 92       	push	r11
    198e:	cf 92       	push	r12
    1990:	df 92       	push	r13
    1992:	ef 92       	push	r14
    1994:	ff 92       	push	r15
    1996:	0f 93       	push	r16
    1998:	1f 93       	push	r17
    199a:	df 93       	push	r29
    199c:	cf 93       	push	r28
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	a0 97       	sbiw	r28, 0x20	; 32
    19a4:	0f b6       	in	r0, 0x3f	; 63
    19a6:	f8 94       	cli
    19a8:	de bf       	out	0x3e, r29	; 62
    19aa:	0f be       	out	0x3f, r0	; 63
    19ac:	cd bf       	out	0x3d, r28	; 61
    19ae:	2b 01       	movw	r4, r22
    19b0:	3c 01       	movw	r6, r24
    19b2:	2d 83       	std	Y+5, r18	; 0x05
    19b4:	3e 83       	std	Y+6, r19	; 0x06
    19b6:	4f 83       	std	Y+7, r20	; 0x07
    19b8:	58 87       	std	Y+8, r21	; 0x08
    19ba:	e9 86       	std	Y+9, r14	; 0x09
    19bc:	fa 86       	std	Y+10, r15	; 0x0a
    19be:	0b 87       	std	Y+11, r16	; 0x0b
    19c0:	1c 87       	std	Y+12, r17	; 0x0c
    19c2:	ad 86       	std	Y+13, r10	; 0x0d
    19c4:	be 86       	std	Y+14, r11	; 0x0e
    19c6:	cf 86       	std	Y+15, r12	; 0x0f
    19c8:	d8 8a       	std	Y+16, r13	; 0x10
    19ca:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    19cc:	33 24       	eor	r3, r3
    19ce:	ca 01       	movw	r24, r20
    19d0:	b9 01       	movw	r22, r18
    19d2:	20 e0       	ldi	r18, 0x00	; 0
    19d4:	30 e0       	ldi	r19, 0x00	; 0
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	0e 94 0d 31 	call	0x621a	; 0x621a <__gesf2>
    19de:	18 16       	cp	r1, r24
    19e0:	14 f4       	brge	.+4      	; 0x19e6 <move_arc_stwt+0x6c>
    19e2:	33 24       	eor	r3, r3
    19e4:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    19e6:	6d 81       	ldd	r22, Y+5	; 0x05
    19e8:	7e 81       	ldd	r23, Y+6	; 0x06
    19ea:	8f 81       	ldd	r24, Y+7	; 0x07
    19ec:	98 85       	ldd	r25, Y+8	; 0x08
    19ee:	2c ed       	ldi	r18, 0xDC	; 220
    19f0:	38 eb       	ldi	r19, 0xB8	; 184
    19f2:	48 e0       	ldi	r20, 0x08	; 8
    19f4:	5e e3       	ldi	r21, 0x3E	; 62
    19f6:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    19fa:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fixsfsi>
    19fe:	9b 01       	movw	r18, r22
    1a00:	77 ff       	sbrs	r23, 7
    1a02:	03 c0       	rjmp	.+6      	; 0x1a0a <move_arc_stwt+0x90>
    1a04:	30 95       	com	r19
    1a06:	21 95       	neg	r18
    1a08:	3f 4f       	sbci	r19, 0xFF	; 255
    1a0a:	b9 01       	movw	r22, r18
    1a0c:	88 27       	eor	r24, r24
    1a0e:	77 fd       	sbrc	r23, 7
    1a10:	80 95       	com	r24
    1a12:	98 2f       	mov	r25, r24
    1a14:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatsisf>
    1a18:	69 83       	std	Y+1, r22	; 0x01
    1a1a:	7a 83       	std	Y+2, r23	; 0x02
    1a1c:	8b 83       	std	Y+3, r24	; 0x03
    1a1e:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1a20:	69 85       	ldd	r22, Y+9	; 0x09
    1a22:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a24:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a26:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a28:	2c ed       	ldi	r18, 0xDC	; 220
    1a2a:	38 eb       	ldi	r19, 0xB8	; 184
    1a2c:	48 e0       	ldi	r20, 0x08	; 8
    1a2e:	5e e3       	ldi	r21, 0x3E	; 62
    1a30:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1a34:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fixsfsi>
    1a38:	9b 01       	movw	r18, r22
    1a3a:	77 ff       	sbrs	r23, 7
    1a3c:	03 c0       	rjmp	.+6      	; 0x1a44 <move_arc_stwt+0xca>
    1a3e:	30 95       	com	r19
    1a40:	21 95       	neg	r18
    1a42:	3f 4f       	sbci	r19, 0xFF	; 255
    1a44:	b9 01       	movw	r22, r18
    1a46:	88 27       	eor	r24, r24
    1a48:	77 fd       	sbrc	r23, 7
    1a4a:	80 95       	com	r24
    1a4c:	98 2f       	mov	r25, r24
    1a4e:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatsisf>
    1a52:	4b 01       	movw	r8, r22
    1a54:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1a56:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a58:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a5c:	98 89       	ldd	r25, Y+16	; 0x10
    1a5e:	2c ed       	ldi	r18, 0xDC	; 220
    1a60:	38 eb       	ldi	r19, 0xB8	; 184
    1a62:	48 e0       	ldi	r20, 0x08	; 8
    1a64:	5e e3       	ldi	r21, 0x3E	; 62
    1a66:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1a6a:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fixsfsi>
    1a6e:	9b 01       	movw	r18, r22
    1a70:	77 ff       	sbrs	r23, 7
    1a72:	03 c0       	rjmp	.+6      	; 0x1a7a <move_arc_stwt+0x100>
    1a74:	30 95       	com	r19
    1a76:	21 95       	neg	r18
    1a78:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7a:	b9 01       	movw	r22, r18
    1a7c:	88 27       	eor	r24, r24
    1a7e:	77 fd       	sbrc	r23, 7
    1a80:	80 95       	com	r24
    1a82:	98 2f       	mov	r25, r24
    1a84:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatsisf>
    1a88:	6b 01       	movw	r12, r22
    1a8a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    1a8c:	c3 01       	movw	r24, r6
    1a8e:	b2 01       	movw	r22, r4
    1a90:	20 e0       	ldi	r18, 0x00	; 0
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	40 e0       	ldi	r20, 0x00	; 0
    1a96:	5f e4       	ldi	r21, 0x4F	; 79
    1a98:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    1a9c:	88 23       	and	r24, r24
    1a9e:	a1 f5       	brne	.+104    	; 0x1b08 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    1aa0:	69 81       	ldd	r22, Y+1	; 0x01
    1aa2:	7a 81       	ldd	r23, Y+2	; 0x02
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1aac:	2b 01       	movw	r4, r22
    1aae:	3c 01       	movw	r6, r24
    1ab0:	c5 01       	movw	r24, r10
    1ab2:	b4 01       	movw	r22, r8
    1ab4:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1ab8:	4b 01       	movw	r8, r22
    1aba:	5c 01       	movw	r10, r24
    1abc:	c7 01       	movw	r24, r14
    1abe:	b6 01       	movw	r22, r12
    1ac0:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1ac4:	6b 01       	movw	r12, r22
    1ac6:	7c 01       	movw	r14, r24
    1ac8:	2d b7       	in	r18, 0x3d	; 61
    1aca:	3e b7       	in	r19, 0x3e	; 62
    1acc:	29 50       	subi	r18, 0x09	; 9
    1ace:	30 40       	sbci	r19, 0x00	; 0
    1ad0:	0f b6       	in	r0, 0x3f	; 63
    1ad2:	f8 94       	cli
    1ad4:	3e bf       	out	0x3e, r19	; 62
    1ad6:	0f be       	out	0x3f, r0	; 63
    1ad8:	2d bf       	out	0x3d, r18	; 61
    1ada:	ed b7       	in	r30, 0x3d	; 61
    1adc:	fe b7       	in	r31, 0x3e	; 62
    1ade:	31 96       	adiw	r30, 0x01	; 1
    1ae0:	ad b7       	in	r26, 0x3d	; 61
    1ae2:	be b7       	in	r27, 0x3e	; 62
    1ae4:	12 96       	adiw	r26, 0x02	; 2
    1ae6:	5c 92       	st	X, r5
    1ae8:	4e 92       	st	-X, r4
    1aea:	11 97       	sbiw	r26, 0x01	; 1
    1aec:	93 82       	std	Z+3, r9	; 0x03
    1aee:	82 82       	std	Z+2, r8	; 0x02
    1af0:	75 83       	std	Z+5, r23	; 0x05
    1af2:	64 83       	std	Z+4, r22	; 0x04
    1af4:	26 82       	std	Z+6, r2	; 0x06
    1af6:	10 86       	std	Z+8, r1	; 0x08
    1af8:	17 82       	std	Z+7, r1	; 0x07
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	62 e0       	ldi	r22, 0x02	; 2
    1afe:	43 2d       	mov	r20, r3
    1b00:	92 01       	movw	r18, r4
    1b02:	84 01       	movw	r16, r8
    1b04:	76 01       	movw	r14, r12
    1b06:	c1 c1       	rjmp	.+898    	; 0x1e8a <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1b08:	c3 01       	movw	r24, r6
    1b0a:	b2 01       	movw	r22, r4
    1b0c:	20 e0       	ldi	r18, 0x00	; 0
    1b0e:	30 e0       	ldi	r19, 0x00	; 0
    1b10:	40 e0       	ldi	r20, 0x00	; 0
    1b12:	50 e0       	ldi	r21, 0x00	; 0
    1b14:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    1b18:	88 23       	and	r24, r24
    1b1a:	e9 f5       	brne	.+122    	; 0x1b96 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    1b1c:	69 81       	ldd	r22, Y+1	; 0x01
    1b1e:	7a 81       	ldd	r23, Y+2	; 0x02
    1b20:	8b 81       	ldd	r24, Y+3	; 0x03
    1b22:	9c 81       	ldd	r25, Y+4	; 0x04
    1b24:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1b28:	3b 01       	movw	r6, r22
    1b2a:	c5 01       	movw	r24, r10
    1b2c:	b4 01       	movw	r22, r8
    1b2e:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1b32:	8b 01       	movw	r16, r22
    1b34:	c7 01       	movw	r24, r14
    1b36:	b6 01       	movw	r22, r12
    1b38:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1b3c:	7b 01       	movw	r14, r22
    1b3e:	2d b7       	in	r18, 0x3d	; 61
    1b40:	3e b7       	in	r19, 0x3e	; 62
    1b42:	29 50       	subi	r18, 0x09	; 9
    1b44:	30 40       	sbci	r19, 0x00	; 0
    1b46:	0f b6       	in	r0, 0x3f	; 63
    1b48:	f8 94       	cli
    1b4a:	3e bf       	out	0x3e, r19	; 62
    1b4c:	0f be       	out	0x3f, r0	; 63
    1b4e:	2d bf       	out	0x3d, r18	; 61
    1b50:	ed b7       	in	r30, 0x3d	; 61
    1b52:	fe b7       	in	r31, 0x3e	; 62
    1b54:	31 96       	adiw	r30, 0x01	; 1
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	33 20       	and	r3, r3
    1b5a:	09 f4       	brne	.+2      	; 0x1b5e <move_arc_stwt+0x1e4>
    1b5c:	41 e0       	ldi	r20, 0x01	; 1
    1b5e:	71 82       	std	Z+1, r7	; 0x01
    1b60:	60 82       	st	Z, r6
    1b62:	13 83       	std	Z+3, r17	; 0x03
    1b64:	02 83       	std	Z+2, r16	; 0x02
    1b66:	f5 82       	std	Z+5, r15	; 0x05
    1b68:	e4 82       	std	Z+4, r14	; 0x04
    1b6a:	26 82       	std	Z+6, r2	; 0x06
    1b6c:	10 86       	std	Z+8, r1	; 0x08
    1b6e:	17 82       	std	Z+7, r1	; 0x07
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	62 e0       	ldi	r22, 0x02	; 2
    1b74:	93 01       	movw	r18, r6
    1b76:	c2 2c       	mov	r12, r2
    1b78:	aa 24       	eor	r10, r10
    1b7a:	bb 24       	eor	r11, r11
    1b7c:	83 2c       	mov	r8, r3
    1b7e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <STEPPER_move>
    1b82:	81 e0       	ldi	r24, 0x01	; 1
    1b84:	ad b7       	in	r26, 0x3d	; 61
    1b86:	be b7       	in	r27, 0x3e	; 62
    1b88:	19 96       	adiw	r26, 0x09	; 9
    1b8a:	0f b6       	in	r0, 0x3f	; 63
    1b8c:	f8 94       	cli
    1b8e:	be bf       	out	0x3e, r27	; 62
    1b90:	0f be       	out	0x3f, r0	; 63
    1b92:	ad bf       	out	0x3d, r26	; 61
    1b94:	89 c1       	rjmp	.+786    	; 0x1ea8 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1b96:	c3 01       	movw	r24, r6
    1b98:	b2 01       	movw	r22, r4
    1b9a:	20 e0       	ldi	r18, 0x00	; 0
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	0e 94 0d 31 	call	0x621a	; 0x621a <__gesf2>
    1ba6:	18 16       	cp	r1, r24
    1ba8:	0c f0       	brlt	.+2      	; 0x1bac <move_arc_stwt+0x232>
    1baa:	b1 c0       	rjmp	.+354    	; 0x1d0e <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1bac:	66 e6       	ldi	r22, 0x66	; 102
    1bae:	76 e6       	ldi	r23, 0x66	; 102
    1bb0:	8a ea       	ldi	r24, 0xAA	; 170
    1bb2:	91 ec       	ldi	r25, 0xC1	; 193
    1bb4:	a3 01       	movw	r20, r6
    1bb6:	92 01       	movw	r18, r4
    1bb8:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e8       	ldi	r20, 0x80	; 128
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    1bc8:	7b 01       	movw	r14, r22
    1bca:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1bcc:	66 e6       	ldi	r22, 0x66	; 102
    1bce:	76 e6       	ldi	r23, 0x66	; 102
    1bd0:	8a ea       	ldi	r24, 0xAA	; 170
    1bd2:	91 e4       	ldi	r25, 0x41	; 65
    1bd4:	a3 01       	movw	r20, r6
    1bd6:	92 01       	movw	r18, r4
    1bd8:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1bdc:	20 e0       	ldi	r18, 0x00	; 0
    1bde:	30 e0       	ldi	r19, 0x00	; 0
    1be0:	40 e8       	ldi	r20, 0x80	; 128
    1be2:	5f e3       	ldi	r21, 0x3F	; 63
    1be4:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    1be8:	5b 01       	movw	r10, r22
    1bea:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1bec:	ed b7       	in	r30, 0x3d	; 61
    1bee:	fe b7       	in	r31, 0x3e	; 62
    1bf0:	39 97       	sbiw	r30, 0x09	; 9
    1bf2:	0f b6       	in	r0, 0x3f	; 63
    1bf4:	f8 94       	cli
    1bf6:	fe bf       	out	0x3e, r31	; 62
    1bf8:	0f be       	out	0x3f, r0	; 63
    1bfa:	ed bf       	out	0x3d, r30	; 61
    1bfc:	8d b6       	in	r8, 0x3d	; 61
    1bfe:	9e b6       	in	r9, 0x3e	; 62
    1c00:	08 94       	sec
    1c02:	81 1c       	adc	r8, r1
    1c04:	91 1c       	adc	r9, r1
    1c06:	6d 81       	ldd	r22, Y+5	; 0x05
    1c08:	7e 81       	ldd	r23, Y+6	; 0x06
    1c0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1c0c:	98 85       	ldd	r25, Y+8	; 0x08
    1c0e:	a8 01       	movw	r20, r16
    1c10:	97 01       	movw	r18, r14
    1c12:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1c16:	2c ed       	ldi	r18, 0xDC	; 220
    1c18:	38 eb       	ldi	r19, 0xB8	; 184
    1c1a:	48 e0       	ldi	r20, 0x08	; 8
    1c1c:	5e e3       	ldi	r21, 0x3E	; 62
    1c1e:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1c22:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1c26:	69 8b       	std	Y+17, r22	; 0x11
    1c28:	7a 8b       	std	Y+18, r23	; 0x12
    1c2a:	8b 8b       	std	Y+19, r24	; 0x13
    1c2c:	9c 8b       	std	Y+20, r25	; 0x14
    1c2e:	69 85       	ldd	r22, Y+9	; 0x09
    1c30:	7a 85       	ldd	r23, Y+10	; 0x0a
    1c32:	8b 85       	ldd	r24, Y+11	; 0x0b
    1c34:	9c 85       	ldd	r25, Y+12	; 0x0c
    1c36:	a8 01       	movw	r20, r16
    1c38:	97 01       	movw	r18, r14
    1c3a:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1c3e:	2c ed       	ldi	r18, 0xDC	; 220
    1c40:	38 eb       	ldi	r19, 0xB8	; 184
    1c42:	48 e0       	ldi	r20, 0x08	; 8
    1c44:	5e e3       	ldi	r21, 0x3E	; 62
    1c46:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1c4a:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1c4e:	6d 8b       	std	Y+21, r22	; 0x15
    1c50:	7e 8b       	std	Y+22, r23	; 0x16
    1c52:	8f 8b       	std	Y+23, r24	; 0x17
    1c54:	98 8f       	std	Y+24, r25	; 0x18
    1c56:	6d 85       	ldd	r22, Y+13	; 0x0d
    1c58:	7e 85       	ldd	r23, Y+14	; 0x0e
    1c5a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5c:	98 89       	ldd	r25, Y+16	; 0x10
    1c5e:	a8 01       	movw	r20, r16
    1c60:	97 01       	movw	r18, r14
    1c62:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1c66:	2c ed       	ldi	r18, 0xDC	; 220
    1c68:	38 eb       	ldi	r19, 0xB8	; 184
    1c6a:	48 e0       	ldi	r20, 0x08	; 8
    1c6c:	5e e3       	ldi	r21, 0x3E	; 62
    1c6e:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1c72:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1c76:	2b 01       	movw	r4, r22
    1c78:	3c 01       	movw	r6, r24
    1c7a:	6d 81       	ldd	r22, Y+5	; 0x05
    1c7c:	7e 81       	ldd	r23, Y+6	; 0x06
    1c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    1c80:	98 85       	ldd	r25, Y+8	; 0x08
    1c82:	a6 01       	movw	r20, r12
    1c84:	95 01       	movw	r18, r10
    1c86:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1c8a:	2c ed       	ldi	r18, 0xDC	; 220
    1c8c:	38 eb       	ldi	r19, 0xB8	; 184
    1c8e:	48 e0       	ldi	r20, 0x08	; 8
    1c90:	5e e3       	ldi	r21, 0x3E	; 62
    1c92:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1c96:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1c9a:	d4 01       	movw	r26, r8
    1c9c:	6d 93       	st	X+, r22
    1c9e:	7c 93       	st	X, r23
    1ca0:	69 85       	ldd	r22, Y+9	; 0x09
    1ca2:	7a 85       	ldd	r23, Y+10	; 0x0a
    1ca4:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ca6:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ca8:	a6 01       	movw	r20, r12
    1caa:	95 01       	movw	r18, r10
    1cac:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1cb0:	2c ed       	ldi	r18, 0xDC	; 220
    1cb2:	38 eb       	ldi	r19, 0xB8	; 184
    1cb4:	48 e0       	ldi	r20, 0x08	; 8
    1cb6:	5e e3       	ldi	r21, 0x3E	; 62
    1cb8:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1cbc:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1cc0:	f4 01       	movw	r30, r8
    1cc2:	73 83       	std	Z+3, r23	; 0x03
    1cc4:	62 83       	std	Z+2, r22	; 0x02
    1cc6:	6d 85       	ldd	r22, Y+13	; 0x0d
    1cc8:	7e 85       	ldd	r23, Y+14	; 0x0e
    1cca:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ccc:	98 89       	ldd	r25, Y+16	; 0x10
    1cce:	a6 01       	movw	r20, r12
    1cd0:	95 01       	movw	r18, r10
    1cd2:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1cd6:	2c ed       	ldi	r18, 0xDC	; 220
    1cd8:	38 eb       	ldi	r19, 0xB8	; 184
    1cda:	48 e0       	ldi	r20, 0x08	; 8
    1cdc:	5e e3       	ldi	r21, 0x3E	; 62
    1cde:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1ce2:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1ce6:	d4 01       	movw	r26, r8
    1ce8:	15 96       	adiw	r26, 0x05	; 5
    1cea:	7c 93       	st	X, r23
    1cec:	6e 93       	st	-X, r22
    1cee:	14 97       	sbiw	r26, 0x04	; 4
    1cf0:	16 96       	adiw	r26, 0x06	; 6
    1cf2:	2c 92       	st	X, r2
    1cf4:	16 97       	sbiw	r26, 0x06	; 6
    1cf6:	18 96       	adiw	r26, 0x08	; 8
    1cf8:	1c 92       	st	X, r1
    1cfa:	1e 92       	st	-X, r1
    1cfc:	17 97       	sbiw	r26, 0x07	; 7
    1cfe:	80 e0       	ldi	r24, 0x00	; 0
    1d00:	62 e0       	ldi	r22, 0x02	; 2
    1d02:	43 2d       	mov	r20, r3
    1d04:	29 89       	ldd	r18, Y+17	; 0x11
    1d06:	3a 89       	ldd	r19, Y+18	; 0x12
    1d08:	0d 89       	ldd	r16, Y+21	; 0x15
    1d0a:	1e 89       	ldd	r17, Y+22	; 0x16
    1d0c:	bd c0       	rjmp	.+378    	; 0x1e88 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    1d0e:	c3 01       	movw	r24, r6
    1d10:	b2 01       	movw	r22, r4
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	30 e0       	ldi	r19, 0x00	; 0
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	50 e0       	ldi	r21, 0x00	; 0
    1d1a:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    1d1e:	87 fd       	sbrc	r24, 7
    1d20:	02 c0       	rjmp	.+4      	; 0x1d26 <move_arc_stwt+0x3ac>
    1d22:	80 e0       	ldi	r24, 0x00	; 0
    1d24:	c1 c0       	rjmp	.+386    	; 0x1ea8 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1d26:	66 e6       	ldi	r22, 0x66	; 102
    1d28:	76 e6       	ldi	r23, 0x66	; 102
    1d2a:	8a ea       	ldi	r24, 0xAA	; 170
    1d2c:	91 e4       	ldi	r25, 0x41	; 65
    1d2e:	a3 01       	movw	r20, r6
    1d30:	92 01       	movw	r18, r4
    1d32:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e8       	ldi	r20, 0x80	; 128
    1d3c:	5f e3       	ldi	r21, 0x3F	; 63
    1d3e:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    1d42:	7b 01       	movw	r14, r22
    1d44:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1d46:	66 e6       	ldi	r22, 0x66	; 102
    1d48:	76 e6       	ldi	r23, 0x66	; 102
    1d4a:	8a ea       	ldi	r24, 0xAA	; 170
    1d4c:	91 ec       	ldi	r25, 0xC1	; 193
    1d4e:	a3 01       	movw	r20, r6
    1d50:	92 01       	movw	r18, r4
    1d52:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1d56:	20 e0       	ldi	r18, 0x00	; 0
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	40 e8       	ldi	r20, 0x80	; 128
    1d5c:	5f e3       	ldi	r21, 0x3F	; 63
    1d5e:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    1d62:	5b 01       	movw	r10, r22
    1d64:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1d66:	2d b7       	in	r18, 0x3d	; 61
    1d68:	3e b7       	in	r19, 0x3e	; 62
    1d6a:	29 50       	subi	r18, 0x09	; 9
    1d6c:	30 40       	sbci	r19, 0x00	; 0
    1d6e:	0f b6       	in	r0, 0x3f	; 63
    1d70:	f8 94       	cli
    1d72:	3e bf       	out	0x3e, r19	; 62
    1d74:	0f be       	out	0x3f, r0	; 63
    1d76:	2d bf       	out	0x3d, r18	; 61
    1d78:	8d b6       	in	r8, 0x3d	; 61
    1d7a:	9e b6       	in	r9, 0x3e	; 62
    1d7c:	08 94       	sec
    1d7e:	81 1c       	adc	r8, r1
    1d80:	91 1c       	adc	r9, r1
    1d82:	6d 81       	ldd	r22, Y+5	; 0x05
    1d84:	7e 81       	ldd	r23, Y+6	; 0x06
    1d86:	8f 81       	ldd	r24, Y+7	; 0x07
    1d88:	98 85       	ldd	r25, Y+8	; 0x08
    1d8a:	a8 01       	movw	r20, r16
    1d8c:	97 01       	movw	r18, r14
    1d8e:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1d92:	2c ed       	ldi	r18, 0xDC	; 220
    1d94:	38 eb       	ldi	r19, 0xB8	; 184
    1d96:	48 e0       	ldi	r20, 0x08	; 8
    1d98:	5e e3       	ldi	r21, 0x3E	; 62
    1d9a:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1d9e:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1da2:	69 8f       	std	Y+25, r22	; 0x19
    1da4:	7a 8f       	std	Y+26, r23	; 0x1a
    1da6:	8b 8f       	std	Y+27, r24	; 0x1b
    1da8:	9c 8f       	std	Y+28, r25	; 0x1c
    1daa:	69 85       	ldd	r22, Y+9	; 0x09
    1dac:	7a 85       	ldd	r23, Y+10	; 0x0a
    1dae:	8b 85       	ldd	r24, Y+11	; 0x0b
    1db0:	9c 85       	ldd	r25, Y+12	; 0x0c
    1db2:	a8 01       	movw	r20, r16
    1db4:	97 01       	movw	r18, r14
    1db6:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1dba:	2c ed       	ldi	r18, 0xDC	; 220
    1dbc:	38 eb       	ldi	r19, 0xB8	; 184
    1dbe:	48 e0       	ldi	r20, 0x08	; 8
    1dc0:	5e e3       	ldi	r21, 0x3E	; 62
    1dc2:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1dc6:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1dca:	6d 8f       	std	Y+29, r22	; 0x1d
    1dcc:	7e 8f       	std	Y+30, r23	; 0x1e
    1dce:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd0:	98 a3       	std	Y+32, r25	; 0x20
    1dd2:	6d 85       	ldd	r22, Y+13	; 0x0d
    1dd4:	7e 85       	ldd	r23, Y+14	; 0x0e
    1dd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1dd8:	98 89       	ldd	r25, Y+16	; 0x10
    1dda:	a8 01       	movw	r20, r16
    1ddc:	97 01       	movw	r18, r14
    1dde:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1de2:	2c ed       	ldi	r18, 0xDC	; 220
    1de4:	38 eb       	ldi	r19, 0xB8	; 184
    1de6:	48 e0       	ldi	r20, 0x08	; 8
    1de8:	5e e3       	ldi	r21, 0x3E	; 62
    1dea:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1dee:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1df2:	2b 01       	movw	r4, r22
    1df4:	3c 01       	movw	r6, r24
    1df6:	6d 81       	ldd	r22, Y+5	; 0x05
    1df8:	7e 81       	ldd	r23, Y+6	; 0x06
    1dfa:	8f 81       	ldd	r24, Y+7	; 0x07
    1dfc:	98 85       	ldd	r25, Y+8	; 0x08
    1dfe:	a6 01       	movw	r20, r12
    1e00:	95 01       	movw	r18, r10
    1e02:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1e06:	2c ed       	ldi	r18, 0xDC	; 220
    1e08:	38 eb       	ldi	r19, 0xB8	; 184
    1e0a:	48 e0       	ldi	r20, 0x08	; 8
    1e0c:	5e e3       	ldi	r21, 0x3E	; 62
    1e0e:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1e12:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1e16:	d4 01       	movw	r26, r8
    1e18:	6d 93       	st	X+, r22
    1e1a:	7c 93       	st	X, r23
    1e1c:	69 85       	ldd	r22, Y+9	; 0x09
    1e1e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1e20:	8b 85       	ldd	r24, Y+11	; 0x0b
    1e22:	9c 85       	ldd	r25, Y+12	; 0x0c
    1e24:	a6 01       	movw	r20, r12
    1e26:	95 01       	movw	r18, r10
    1e28:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1e2c:	2c ed       	ldi	r18, 0xDC	; 220
    1e2e:	38 eb       	ldi	r19, 0xB8	; 184
    1e30:	48 e0       	ldi	r20, 0x08	; 8
    1e32:	5e e3       	ldi	r21, 0x3E	; 62
    1e34:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1e38:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1e3c:	f4 01       	movw	r30, r8
    1e3e:	73 83       	std	Z+3, r23	; 0x03
    1e40:	62 83       	std	Z+2, r22	; 0x02
    1e42:	6d 85       	ldd	r22, Y+13	; 0x0d
    1e44:	7e 85       	ldd	r23, Y+14	; 0x0e
    1e46:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e48:	98 89       	ldd	r25, Y+16	; 0x10
    1e4a:	a6 01       	movw	r20, r12
    1e4c:	95 01       	movw	r18, r10
    1e4e:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    1e52:	2c ed       	ldi	r18, 0xDC	; 220
    1e54:	38 eb       	ldi	r19, 0xB8	; 184
    1e56:	48 e0       	ldi	r20, 0x08	; 8
    1e58:	5e e3       	ldi	r21, 0x3E	; 62
    1e5a:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    1e5e:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    1e62:	d4 01       	movw	r26, r8
    1e64:	15 96       	adiw	r26, 0x05	; 5
    1e66:	7c 93       	st	X, r23
    1e68:	6e 93       	st	-X, r22
    1e6a:	14 97       	sbiw	r26, 0x04	; 4
    1e6c:	16 96       	adiw	r26, 0x06	; 6
    1e6e:	2c 92       	st	X, r2
    1e70:	16 97       	sbiw	r26, 0x06	; 6
    1e72:	18 96       	adiw	r26, 0x08	; 8
    1e74:	1c 92       	st	X, r1
    1e76:	1e 92       	st	-X, r1
    1e78:	17 97       	sbiw	r26, 0x07	; 7
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	62 e0       	ldi	r22, 0x02	; 2
    1e7e:	43 2d       	mov	r20, r3
    1e80:	29 8d       	ldd	r18, Y+25	; 0x19
    1e82:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1e84:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1e86:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1e88:	72 01       	movw	r14, r4
    1e8a:	c2 2c       	mov	r12, r2
    1e8c:	aa 24       	eor	r10, r10
    1e8e:	bb 24       	eor	r11, r11
    1e90:	83 2c       	mov	r8, r3
    1e92:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <STEPPER_move>
    1e96:	81 e0       	ldi	r24, 0x01	; 1
    1e98:	ed b7       	in	r30, 0x3d	; 61
    1e9a:	fe b7       	in	r31, 0x3e	; 62
    1e9c:	39 96       	adiw	r30, 0x09	; 9
    1e9e:	0f b6       	in	r0, 0x3f	; 63
    1ea0:	f8 94       	cli
    1ea2:	fe bf       	out	0x3e, r31	; 62
    1ea4:	0f be       	out	0x3f, r0	; 63
    1ea6:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1ea8:	a0 96       	adiw	r28, 0x20	; 32
    1eaa:	0f b6       	in	r0, 0x3f	; 63
    1eac:	f8 94       	cli
    1eae:	de bf       	out	0x3e, r29	; 62
    1eb0:	0f be       	out	0x3f, r0	; 63
    1eb2:	cd bf       	out	0x3d, r28	; 61
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	1f 91       	pop	r17
    1eba:	0f 91       	pop	r16
    1ebc:	ff 90       	pop	r15
    1ebe:	ef 90       	pop	r14
    1ec0:	df 90       	pop	r13
    1ec2:	cf 90       	pop	r12
    1ec4:	bf 90       	pop	r11
    1ec6:	af 90       	pop	r10
    1ec8:	9f 90       	pop	r9
    1eca:	8f 90       	pop	r8
    1ecc:	7f 90       	pop	r7
    1ece:	6f 90       	pop	r6
    1ed0:	5f 90       	pop	r5
    1ed2:	4f 90       	pop	r4
    1ed4:	3f 90       	pop	r3
    1ed6:	2f 90       	pop	r2
    1ed8:	08 95       	ret

00001eda <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1eda:	0e 94 af 22 	call	0x455e	; 0x455e <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1ede:	28 2f       	mov	r18, r24
    1ee0:	21 70       	andi	r18, 0x01	; 1
    1ee2:	20 93 30 07 	sts	0x0730, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1ee6:	90 e0       	ldi	r25, 0x00	; 0
    1ee8:	82 70       	andi	r24, 0x02	; 2
    1eea:	90 70       	andi	r25, 0x00	; 0
    1eec:	95 95       	asr	r25
    1eee:	87 95       	ror	r24
    1ef0:	80 93 31 07 	sts	0x0731, r24
}
    1ef4:	08 95       	ret

00001ef6 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1ef6:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1efa:	60 93 28 06 	sts	0x0628, r22
    1efe:	70 93 29 06 	sts	0x0629, r23
    1f02:	80 93 2a 06 	sts	0x062A, r24
    1f06:	90 93 2b 06 	sts	0x062B, r25
	leftLightVolt = getLeftLight();
    1f0a:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1f0e:	60 93 bf 07 	sts	0x07BF, r22
    1f12:	70 93 c0 07 	sts	0x07C0, r23
    1f16:	80 93 c1 07 	sts	0x07C1, r24
    1f1a:	90 93 c2 07 	sts	0x07C2, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1f1e:	08 95       	ret

00001f20 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1f20:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1f24:	60 93 91 05 	sts	0x0591, r22
    1f28:	70 93 92 05 	sts	0x0592, r23
    1f2c:	80 93 93 05 	sts	0x0593, r24
    1f30:	90 93 94 05 	sts	0x0594, r25
	bkIR = getBackIR();
    1f34:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1f38:	60 93 9b 05 	sts	0x059B, r22
    1f3c:	70 93 9c 05 	sts	0x059C, r23
    1f40:	80 93 9d 05 	sts	0x059D, r24
    1f44:	90 93 9e 05 	sts	0x059E, r25
	ltIR = getLeftIR();
    1f48:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1f4c:	60 93 32 07 	sts	0x0732, r22
    1f50:	70 93 33 07 	sts	0x0733, r23
    1f54:	80 93 34 07 	sts	0x0734, r24
    1f58:	90 93 35 07 	sts	0x0735, r25
	rtIR = getRightIR();
    1f5c:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1f60:	60 93 37 07 	sts	0x0737, r22
    1f64:	70 93 38 07 	sts	0x0738, r23
    1f68:	80 93 39 07 	sts	0x0739, r24
    1f6c:	90 93 3a 07 	sts	0x073A, r25
}
    1f70:	08 95       	ret

00001f72 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1f72:	cf 92       	push	r12
    1f74:	df 92       	push	r13
    1f76:	ef 92       	push	r14
    1f78:	ff 92       	push	r15
    1f7a:	0f 93       	push	r16
    1f7c:	1f 93       	push	r17
    1f7e:	cf 93       	push	r28
    1f80:	df 93       	push	r29
    1f82:	16 2f       	mov	r17, r22
    1f84:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1f86:	0f e1       	ldi	r16, 0x1F	; 31
    1f88:	f0 2e       	mov	r15, r16
    1f8a:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1f8c:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1f8e:	0f 2d       	mov	r16, r15
    1f90:	06 95       	lsr	r16
    1f92:	06 95       	lsr	r16
    1f94:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1f96:	c0 2f       	mov	r28, r16
    1f98:	d0 e0       	ldi	r29, 0x00	; 0
    1f9a:	c1 2e       	mov	r12, r17
    1f9c:	dd 24       	eor	r13, r13
    1f9e:	ce 01       	movw	r24, r28
    1fa0:	b6 01       	movw	r22, r12
    1fa2:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1fa6:	80 2f       	mov	r24, r16
    1fa8:	61 2f       	mov	r22, r17
    1faa:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <LCD_set_next_PGC>
    1fae:	fe 01       	movw	r30, r28
    1fb0:	b5 e0       	ldi	r27, 0x05	; 5
    1fb2:	ee 0f       	add	r30, r30
    1fb4:	ff 1f       	adc	r31, r31
    1fb6:	ba 95       	dec	r27
    1fb8:	e1 f7       	brne	.-8      	; 0x1fb2 <LCD_set_pixel+0x40>
    1fba:	2f 2d       	mov	r18, r15
    1fbc:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1fbe:	ee 20       	and	r14, r14
    1fc0:	89 f0       	breq	.+34     	; 0x1fe4 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1fc2:	ec 0d       	add	r30, r12
    1fc4:	fd 1d       	adc	r31, r13
    1fc6:	e6 55       	subi	r30, 0x56	; 86
    1fc8:	f9 4f       	sbci	r31, 0xF9	; 249
    1fca:	27 70       	andi	r18, 0x07	; 7
    1fcc:	30 70       	andi	r19, 0x00	; 0
    1fce:	81 e0       	ldi	r24, 0x01	; 1
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	02 c0       	rjmp	.+4      	; 0x1fd8 <LCD_set_pixel+0x66>
    1fd4:	88 0f       	add	r24, r24
    1fd6:	99 1f       	adc	r25, r25
    1fd8:	2a 95       	dec	r18
    1fda:	e2 f7       	brpl	.-8      	; 0x1fd4 <LCD_set_pixel+0x62>
    1fdc:	20 81       	ld	r18, Z
    1fde:	28 2b       	or	r18, r24
    1fe0:	20 83       	st	Z, r18
    1fe2:	11 c0       	rjmp	.+34     	; 0x2006 <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1fe4:	ec 0d       	add	r30, r12
    1fe6:	fd 1d       	adc	r31, r13
    1fe8:	e6 55       	subi	r30, 0x56	; 86
    1fea:	f9 4f       	sbci	r31, 0xF9	; 249
    1fec:	27 70       	andi	r18, 0x07	; 7
    1fee:	30 70       	andi	r19, 0x00	; 0
    1ff0:	81 e0       	ldi	r24, 0x01	; 1
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	02 c0       	rjmp	.+4      	; 0x1ffa <LCD_set_pixel+0x88>
    1ff6:	88 0f       	add	r24, r24
    1ff8:	99 1f       	adc	r25, r25
    1ffa:	2a 95       	dec	r18
    1ffc:	e2 f7       	brpl	.-8      	; 0x1ff6 <LCD_set_pixel+0x84>
    1ffe:	80 95       	com	r24
    2000:	20 81       	ld	r18, Z
    2002:	82 23       	and	r24, r18
    2004:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    2006:	a5 e0       	ldi	r26, 0x05	; 5
    2008:	cc 0f       	add	r28, r28
    200a:	dd 1f       	adc	r29, r29
    200c:	aa 95       	dec	r26
    200e:	e1 f7       	brne	.-8      	; 0x2008 <LCD_set_pixel+0x96>
    2010:	cc 0d       	add	r28, r12
    2012:	dd 1d       	adc	r29, r13
    2014:	c6 55       	subi	r28, 0x56	; 86
    2016:	d9 4f       	sbci	r29, 0xF9	; 249
    2018:	88 81       	ld	r24, Y
    201a:	61 e0       	ldi	r22, 0x01	; 1
    201c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
}
    2020:	df 91       	pop	r29
    2022:	cf 91       	pop	r28
    2024:	1f 91       	pop	r17
    2026:	0f 91       	pop	r16
    2028:	ff 90       	pop	r15
    202a:	ef 90       	pop	r14
    202c:	df 90       	pop	r13
    202e:	cf 90       	pop	r12
    2030:	08 95       	ret

00002032 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent){
    2032:	9f 92       	push	r9
    2034:	af 92       	push	r10
    2036:	bf 92       	push	r11
    2038:	cf 92       	push	r12
    203a:	df 92       	push	r13
    203c:	ef 92       	push	r14
    203e:	ff 92       	push	r15
    2040:	0f 93       	push	r16
    2042:	1f 93       	push	r17
    2044:	a8 2e       	mov	r10, r24
    2046:	d6 2e       	mov	r13, r22
    2048:	e4 2e       	mov	r14, r20
    204a:	b2 2e       	mov	r11, r18
    204c:	90 2e       	mov	r9, r16

	r = r*LCD_CELL_OFFSET;
    204e:	dd 0c       	add	r13, r13
    2050:	dd 0c       	add	r13, r13
    2052:	dd 0c       	add	r13, r13
	c = c*LCD_CELL_OFFSET;
    2054:	ff 24       	eor	r15, r15
    2056:	53 e0       	ldi	r21, 0x03	; 3
    2058:	ee 0c       	add	r14, r14
    205a:	ff 1c       	adc	r15, r15
    205c:	5a 95       	dec	r21
    205e:	e1 f7       	brne	.-8      	; 0x2058 <printCell+0x26>
    2060:	1e 2d       	mov	r17, r14
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    2062:	0f e1       	ldi	r16, 0x1F	; 31
    2064:	0d 19       	sub	r16, r13
    2066:	80 2f       	mov	r24, r16
    2068:	6e 2d       	mov	r22, r14
    206a:	41 e0       	ldi	r20, 0x01	; 1
    206c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    2070:	48 e1       	ldi	r20, 0x18	; 24
    2072:	c4 2e       	mov	r12, r20
    2074:	cd 18       	sub	r12, r13
    2076:	8c 2d       	mov	r24, r12
    2078:	6e 2d       	mov	r22, r14
    207a:	41 e0       	ldi	r20, 0x01	; 1
    207c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    2080:	37 e0       	ldi	r19, 0x07	; 7
    2082:	f3 2e       	mov	r15, r19
    2084:	f1 0e       	add	r15, r17
    2086:	80 2f       	mov	r24, r16
    2088:	6f 2d       	mov	r22, r15
    208a:	41 e0       	ldi	r20, 0x01	; 1
    208c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    2090:	8c 2d       	mov	r24, r12
    2092:	6f 2d       	mov	r22, r15
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	
	if(cell&0b1000){
    209a:	ea 2c       	mov	r14, r10
    209c:	a3 fe       	sbrs	r10, 3
    209e:	24 c0       	rjmp	.+72     	; 0x20e8 <printCell+0xb6>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    20a0:	61 2f       	mov	r22, r17
    20a2:	6f 5f       	subi	r22, 0xFF	; 255
    20a4:	80 2f       	mov	r24, r16
    20a6:	41 e0       	ldi	r20, 0x01	; 1
    20a8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    20ac:	61 2f       	mov	r22, r17
    20ae:	6e 5f       	subi	r22, 0xFE	; 254
    20b0:	80 2f       	mov	r24, r16
    20b2:	41 e0       	ldi	r20, 0x01	; 1
    20b4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    20b8:	61 2f       	mov	r22, r17
    20ba:	6d 5f       	subi	r22, 0xFD	; 253
    20bc:	80 2f       	mov	r24, r16
    20be:	41 e0       	ldi	r20, 0x01	; 1
    20c0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    20c4:	61 2f       	mov	r22, r17
    20c6:	6c 5f       	subi	r22, 0xFC	; 252
    20c8:	80 2f       	mov	r24, r16
    20ca:	41 e0       	ldi	r20, 0x01	; 1
    20cc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    20d0:	61 2f       	mov	r22, r17
    20d2:	6b 5f       	subi	r22, 0xFB	; 251
    20d4:	80 2f       	mov	r24, r16
    20d6:	41 e0       	ldi	r20, 0x01	; 1
    20d8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    20dc:	61 2f       	mov	r22, r17
    20de:	6a 5f       	subi	r22, 0xFA	; 250
    20e0:	80 2f       	mov	r24, r16
    20e2:	41 e0       	ldi	r20, 0x01	; 1
    20e4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	}
	if(cell&0b0100){
    20e8:	e2 fe       	sbrs	r14, 2
    20ea:	25 c0       	rjmp	.+74     	; 0x2136 <printCell+0x104>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    20ec:	8d 2d       	mov	r24, r13
    20ee:	80 95       	com	r24
    20f0:	81 5e       	subi	r24, 0xE1	; 225
    20f2:	6f 2d       	mov	r22, r15
    20f4:	41 e0       	ldi	r20, 0x01	; 1
    20f6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    20fa:	8d e1       	ldi	r24, 0x1D	; 29
    20fc:	8d 19       	sub	r24, r13
    20fe:	6f 2d       	mov	r22, r15
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    2106:	8c e1       	ldi	r24, 0x1C	; 28
    2108:	8d 19       	sub	r24, r13
    210a:	6f 2d       	mov	r22, r15
    210c:	41 e0       	ldi	r20, 0x01	; 1
    210e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    2112:	8b e1       	ldi	r24, 0x1B	; 27
    2114:	8d 19       	sub	r24, r13
    2116:	6f 2d       	mov	r22, r15
    2118:	41 e0       	ldi	r20, 0x01	; 1
    211a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    211e:	8a e1       	ldi	r24, 0x1A	; 26
    2120:	8d 19       	sub	r24, r13
    2122:	6f 2d       	mov	r22, r15
    2124:	41 e0       	ldi	r20, 0x01	; 1
    2126:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    212a:	89 e1       	ldi	r24, 0x19	; 25
    212c:	8d 19       	sub	r24, r13
    212e:	6f 2d       	mov	r22, r15
    2130:	41 e0       	ldi	r20, 0x01	; 1
    2132:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	}
	if(cell&0b0010){
    2136:	e1 fe       	sbrs	r14, 1
    2138:	24 c0       	rjmp	.+72     	; 0x2182 <printCell+0x150>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    213a:	61 2f       	mov	r22, r17
    213c:	6f 5f       	subi	r22, 0xFF	; 255
    213e:	8c 2d       	mov	r24, r12
    2140:	41 e0       	ldi	r20, 0x01	; 1
    2142:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    2146:	61 2f       	mov	r22, r17
    2148:	6e 5f       	subi	r22, 0xFE	; 254
    214a:	8c 2d       	mov	r24, r12
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    2152:	61 2f       	mov	r22, r17
    2154:	6d 5f       	subi	r22, 0xFD	; 253
    2156:	8c 2d       	mov	r24, r12
    2158:	41 e0       	ldi	r20, 0x01	; 1
    215a:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    215e:	61 2f       	mov	r22, r17
    2160:	6c 5f       	subi	r22, 0xFC	; 252
    2162:	8c 2d       	mov	r24, r12
    2164:	41 e0       	ldi	r20, 0x01	; 1
    2166:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    216a:	61 2f       	mov	r22, r17
    216c:	6b 5f       	subi	r22, 0xFB	; 251
    216e:	8c 2d       	mov	r24, r12
    2170:	41 e0       	ldi	r20, 0x01	; 1
    2172:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    2176:	61 2f       	mov	r22, r17
    2178:	6a 5f       	subi	r22, 0xFA	; 250
    217a:	8c 2d       	mov	r24, r12
    217c:	41 e0       	ldi	r20, 0x01	; 1
    217e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	}
	if(cell&0b0001){
    2182:	e0 fe       	sbrs	r14, 0
    2184:	25 c0       	rjmp	.+74     	; 0x21d0 <printCell+0x19e>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    2186:	8d 2d       	mov	r24, r13
    2188:	80 95       	com	r24
    218a:	81 5e       	subi	r24, 0xE1	; 225
    218c:	61 2f       	mov	r22, r17
    218e:	41 e0       	ldi	r20, 0x01	; 1
    2190:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    2194:	8d e1       	ldi	r24, 0x1D	; 29
    2196:	8d 19       	sub	r24, r13
    2198:	61 2f       	mov	r22, r17
    219a:	41 e0       	ldi	r20, 0x01	; 1
    219c:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    21a0:	8c e1       	ldi	r24, 0x1C	; 28
    21a2:	8d 19       	sub	r24, r13
    21a4:	61 2f       	mov	r22, r17
    21a6:	41 e0       	ldi	r20, 0x01	; 1
    21a8:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    21ac:	8b e1       	ldi	r24, 0x1B	; 27
    21ae:	8d 19       	sub	r24, r13
    21b0:	61 2f       	mov	r22, r17
    21b2:	41 e0       	ldi	r20, 0x01	; 1
    21b4:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    21b8:	8a e1       	ldi	r24, 0x1A	; 26
    21ba:	8d 19       	sub	r24, r13
    21bc:	61 2f       	mov	r22, r17
    21be:	41 e0       	ldi	r20, 0x01	; 1
    21c0:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    21c4:	89 e1       	ldi	r24, 0x19	; 25
    21c6:	8d 19       	sub	r24, r13
    21c8:	61 2f       	mov	r22, r17
    21ca:	41 e0       	ldi	r20, 0x01	; 1
    21cc:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
	}	
	if(isrobot){
    21d0:	bb 20       	and	r11, r11
    21d2:	e1 f1       	breq	.+120    	; 0x224c <printCell+0x21a>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    21d4:	2c e1       	ldi	r18, 0x1C	; 28
    21d6:	f2 2e       	mov	r15, r18
    21d8:	fd 18       	sub	r15, r13
    21da:	93 e0       	ldi	r25, 0x03	; 3
    21dc:	c9 2e       	mov	r12, r25
    21de:	c1 0e       	add	r12, r17
    21e0:	8f 2d       	mov	r24, r15
    21e2:	6c 2d       	mov	r22, r12
    21e4:	4b 2d       	mov	r20, r11
    21e6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    21ea:	8b e1       	ldi	r24, 0x1B	; 27
    21ec:	e8 2e       	mov	r14, r24
    21ee:	ed 18       	sub	r14, r13
    21f0:	8e 2d       	mov	r24, r14
    21f2:	6c 2d       	mov	r22, r12
    21f4:	4b 2d       	mov	r20, r11
    21f6:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    21fa:	01 2f       	mov	r16, r17
    21fc:	0c 5f       	subi	r16, 0xFC	; 252
    21fe:	8f 2d       	mov	r24, r15
    2200:	60 2f       	mov	r22, r16
    2202:	4b 2d       	mov	r20, r11
    2204:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    2208:	8e 2d       	mov	r24, r14
    220a:	60 2f       	mov	r22, r16
    220c:	4b 2d       	mov	r20, r11
    220e:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
		
		switch(orent){
    2212:	81 e0       	ldi	r24, 0x01	; 1
    2214:	98 16       	cp	r9, r24
    2216:	69 f0       	breq	.+26     	; 0x2232 <printCell+0x200>
    2218:	98 16       	cp	r9, r24
    221a:	38 f0       	brcs	.+14     	; 0x222a <printCell+0x1f8>
    221c:	82 e0       	ldi	r24, 0x02	; 2
    221e:	98 16       	cp	r9, r24
    2220:	59 f0       	breq	.+22     	; 0x2238 <printCell+0x206>
    2222:	83 e0       	ldi	r24, 0x03	; 3
    2224:	98 16       	cp	r9, r24
    2226:	91 f4       	brne	.+36     	; 0x224c <printCell+0x21a>
    2228:	0b c0       	rjmp	.+22     	; 0x2240 <printCell+0x20e>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    222a:	8d e1       	ldi	r24, 0x1D	; 29
    222c:	8d 19       	sub	r24, r13
    222e:	6c 2d       	mov	r22, r12
    2230:	0a c0       	rjmp	.+20     	; 0x2246 <printCell+0x214>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    2232:	1b 5f       	subi	r17, 0xFB	; 251
    2234:	8f 2d       	mov	r24, r15
    2236:	06 c0       	rjmp	.+12     	; 0x2244 <printCell+0x212>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    2238:	8a e1       	ldi	r24, 0x1A	; 26
    223a:	8d 19       	sub	r24, r13
    223c:	60 2f       	mov	r22, r16
    223e:	03 c0       	rjmp	.+6      	; 0x2246 <printCell+0x214>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    2240:	1e 5f       	subi	r17, 0xFE	; 254
    2242:	8e 2d       	mov	r24, r14
    2244:	61 2f       	mov	r22, r17
    2246:	4b 2d       	mov	r20, r11
    2248:	0e 94 b9 0f 	call	0x1f72	; 0x1f72 <LCD_set_pixel>
				break;
			default:
				break;
		}
	}
}
    224c:	1f 91       	pop	r17
    224e:	0f 91       	pop	r16
    2250:	ff 90       	pop	r15
    2252:	ef 90       	pop	r14
    2254:	df 90       	pop	r13
    2256:	cf 90       	pop	r12
    2258:	bf 90       	pop	r11
    225a:	af 90       	pop	r10
    225c:	9f 90       	pop	r9
    225e:	08 95       	ret

00002260 <printMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(void)
{
    2260:	bf 92       	push	r11
    2262:	cf 92       	push	r12
    2264:	df 92       	push	r13
    2266:	ef 92       	push	r14
    2268:	ff 92       	push	r15
    226a:	0f 93       	push	r16
    226c:	1f 93       	push	r17
    226e:	cf 93       	push	r28
    2270:	df 93       	push	r29
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    2272:	80 91 2e 07 	lds	r24, 0x072E
    2276:	b8 2e       	mov	r11, r24
    2278:	b6 94       	lsr	r11
    227a:	b6 94       	lsr	r11
	unsigned char curCol = currentCellWorld & 0b0011;
    227c:	73 e0       	ldi	r23, 0x03	; 3
    227e:	c7 2e       	mov	r12, r23
    2280:	c8 22       	and	r12, r24
    2282:	ee 24       	eor	r14, r14
    2284:	ff 24       	eor	r15, r15
    2286:	1d c0       	rjmp	.+58     	; 0x22c2 <printMap+0x62>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    2288:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    228a:	db 14       	cp	r13, r11
    228c:	19 f0       	breq	.+6      	; 0x2294 <printMap+0x34>
    228e:	20 e0       	ldi	r18, 0x00	; 0
    2290:	30 e0       	ldi	r19, 0x00	; 0
    2292:	06 c0       	rjmp	.+12     	; 0x22a0 <printMap+0x40>
    2294:	20 e0       	ldi	r18, 0x00	; 0
    2296:	30 e0       	ldi	r19, 0x00	; 0
    2298:	1c 15       	cp	r17, r12
    229a:	11 f4       	brne	.+4      	; 0x22a0 <printMap+0x40>
    229c:	21 e0       	ldi	r18, 0x01	; 1
    229e:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation);
    22a0:	6d 2d       	mov	r22, r13
    22a2:	41 2f       	mov	r20, r17
    22a4:	00 91 2d 06 	lds	r16, 0x062D
    22a8:	0e 94 19 10 	call	0x2032	; 0x2032 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    22ac:	1f 5f       	subi	r17, 0xFF	; 255
    22ae:	21 96       	adiw	r28, 0x01	; 1
    22b0:	14 30       	cpi	r17, 0x04	; 4
    22b2:	51 f7       	brne	.-44     	; 0x2288 <printMap+0x28>
    22b4:	08 94       	sec
    22b6:	e1 1c       	adc	r14, r1
    22b8:	f1 1c       	adc	r15, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    22ba:	84 e0       	ldi	r24, 0x04	; 4
    22bc:	e8 16       	cp	r14, r24
    22be:	f1 04       	cpc	r15, r1
    22c0:	51 f0       	breq	.+20     	; 0x22d6 <printMap+0x76>
    22c2:	de 2c       	mov	r13, r14
    22c4:	e7 01       	movw	r28, r14
    22c6:	cc 0f       	add	r28, r28
    22c8:	dd 1f       	adc	r29, r29
    22ca:	cc 0f       	add	r28, r28
    22cc:	dd 1f       	adc	r29, r29
    22ce:	c7 5d       	subi	r28, 0xD7	; 215
    22d0:	db 4f       	sbci	r29, 0xFB	; 251
    22d2:	10 e0       	ldi	r17, 0x00	; 0
    22d4:	d9 cf       	rjmp	.-78     	; 0x2288 <printMap+0x28>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation);
		}	
	}
}
    22d6:	df 91       	pop	r29
    22d8:	cf 91       	pop	r28
    22da:	1f 91       	pop	r17
    22dc:	0f 91       	pop	r16
    22de:	ff 90       	pop	r15
    22e0:	ef 90       	pop	r14
    22e2:	df 90       	pop	r13
    22e4:	cf 90       	pop	r12
    22e6:	bf 90       	pop	r11
    22e8:	08 95       	ret

000022ea <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
    22ea:	1f 93       	push	r17
    22ec:	18 2f       	mov	r17, r24
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	
	// AT START: odometry is REALLY SMALL & odometryTrigger is at approx 343
	// Suggest breaking apart the IF case?
	if((odometry > odometryTrigger))
    22ee:	60 91 c3 07 	lds	r22, 0x07C3
    22f2:	70 91 c4 07 	lds	r23, 0x07C4
    22f6:	80 91 c5 07 	lds	r24, 0x07C5
    22fa:	90 91 c6 07 	lds	r25, 0x07C6
    22fe:	20 91 15 05 	lds	r18, 0x0515
    2302:	30 91 16 05 	lds	r19, 0x0516
    2306:	40 91 17 05 	lds	r20, 0x0517
    230a:	50 91 18 05 	lds	r21, 0x0518
    230e:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	5f e3       	ldi	r21, 0x3F	; 63
    231a:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    231e:	2c ed       	ldi	r18, 0xDC	; 220
    2320:	38 eb       	ldi	r19, 0xB8	; 184
    2322:	48 e0       	ldi	r20, 0x08	; 8
    2324:	5e e3       	ldi	r21, 0x3E	; 62
    2326:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    232a:	20 91 18 06 	lds	r18, 0x0618
    232e:	30 91 19 06 	lds	r19, 0x0619
    2332:	40 91 1a 06 	lds	r20, 0x061A
    2336:	50 91 1b 06 	lds	r21, 0x061B
    233a:	0e 94 0d 31 	call	0x621a	; 0x621a <__gesf2>
    233e:	18 16       	cp	r1, r24
    2340:	bc f4       	brge	.+46     	; 0x2370 <checkOdometry+0x86>
	{
		odometryFlag = 1;
    2342:	81 e0       	ldi	r24, 0x01	; 1
    2344:	80 93 36 07 	sts	0x0736, r24
		odometryStepL = 0;
    2348:	80 e0       	ldi	r24, 0x00	; 0
    234a:	90 e0       	ldi	r25, 0x00	; 0
    234c:	a0 e0       	ldi	r26, 0x00	; 0
    234e:	b0 e0       	ldi	r27, 0x00	; 0
    2350:	80 93 c3 07 	sts	0x07C3, r24
    2354:	90 93 c4 07 	sts	0x07C4, r25
    2358:	a0 93 c5 07 	sts	0x07C5, r26
    235c:	b0 93 c6 07 	sts	0x07C6, r27
		odometryStepR = 0;
    2360:	80 93 15 05 	sts	0x0515, r24
    2364:	90 93 16 05 	sts	0x0516, r25
    2368:	a0 93 17 05 	sts	0x0517, r26
    236c:	b0 93 18 05 	sts	0x0518, r27
	}
	if (reset){
    2370:	11 23       	and	r17, r17
    2372:	d9 f0       	breq	.+54     	; 0x23aa <checkOdometry+0xc0>
		STEPPER_set_steps(STEPPER_BOTH,0);
    2374:	82 e0       	ldi	r24, 0x02	; 2
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	0e 94 06 21 	call	0x420c	; 0x420c <STEPPER_set_steps>
		odometryFlag = 0;
    237e:	10 92 36 07 	sts	0x0736, r1
		odometryStepL = 0;
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	a0 e0       	ldi	r26, 0x00	; 0
    2388:	b0 e0       	ldi	r27, 0x00	; 0
    238a:	80 93 c3 07 	sts	0x07C3, r24
    238e:	90 93 c4 07 	sts	0x07C4, r25
    2392:	a0 93 c5 07 	sts	0x07C5, r26
    2396:	b0 93 c6 07 	sts	0x07C6, r27
		odometryStepR = 0;
    239a:	80 93 15 05 	sts	0x0515, r24
    239e:	90 93 16 05 	sts	0x0516, r25
    23a2:	a0 93 17 05 	sts	0x0517, r26
    23a6:	b0 93 18 05 	sts	0x0518, r27
	
	// // Else the flag RESETS to ZERO?!
	// else{
		// odometryFlag = 0;
	// }
}
    23aa:	1f 91       	pop	r17
    23ac:	08 95       	ret

000023ae <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    23ae:	0e 94 2e 23 	call	0x465c	; 0x465c <ATTINY_open>
    23b2:	90 93 14 05 	sts	0x0514, r25
    23b6:	80 93 13 05 	sts	0x0513, r24
	LEopstat = LED_open(); //open the LED module
    23ba:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <LED_open>
    23be:	90 93 12 05 	sts	0x0512, r25
    23c2:	80 93 11 05 	sts	0x0511, r24
	LCopstat = LCD_open(); //open the LCD module
    23c6:	0e 94 bf 1c 	call	0x397e	; 0x397e <LCD_open>
    23ca:	90 93 10 05 	sts	0x0510, r25
    23ce:	80 93 0f 05 	sts	0x050F, r24
	STEPPER_open(); // Open STEPPER module for use
    23d2:	0e 94 2a 20 	call	0x4054	; 0x4054 <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <SPKR_open>
	
	LED_open();
    23dc:	0e 94 a8 1d 	call	0x3b50	; 0x3b50 <LED_open>
	I2C_open();
    23e0:	0e 94 88 24 	call	0x4910	; 0x4910 <I2C_open>
	ADC_open();//open the ADC module
    23e4:	0e 94 2c 1c 	call	0x3858	; 0x3858 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    23e8:	81 e0       	ldi	r24, 0x01	; 1
    23ea:	0e 94 8e 1c 	call	0x391c	; 0x391c <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    23ee:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <checkIR>
	prefilter(1);
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    23f8:	8f ee       	ldi	r24, 0xEF	; 239
    23fa:	90 e0       	ldi	r25, 0x00	; 0
    23fc:	a5 e8       	ldi	r26, 0x85	; 133
    23fe:	b1 e4       	ldi	r27, 0x41	; 65
    2400:	80 93 18 06 	sts	0x0618, r24
    2404:	90 93 19 06 	sts	0x0619, r25
    2408:	a0 93 1a 06 	sts	0x061A, r26
    240c:	b0 93 1b 06 	sts	0x061B, r27
    2410:	20 e0       	ldi	r18, 0x00	; 0
    2412:	30 e0       	ldi	r19, 0x00	; 0
    2414:	0a c0       	rjmp	.+20     	; 0x242a <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    2416:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    2418:	01 96       	adiw	r24, 0x01	; 1
    241a:	80 32       	cpi	r24, 0x20	; 32
    241c:	91 05       	cpc	r25, r1
    241e:	d9 f7       	brne	.-10     	; 0x2416 <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    2420:	2f 5f       	subi	r18, 0xFF	; 255
    2422:	3f 4f       	sbci	r19, 0xFF	; 255
    2424:	24 30       	cpi	r18, 0x04	; 4
    2426:	31 05       	cpc	r19, r1
    2428:	59 f0       	breq	.+22     	; 0x2440 <initializeRobot+0x92>
    242a:	f9 01       	movw	r30, r18
    242c:	a5 e0       	ldi	r26, 0x05	; 5
    242e:	ee 0f       	add	r30, r30
    2430:	ff 1f       	adc	r31, r31
    2432:	aa 95       	dec	r26
    2434:	e1 f7       	brne	.-8      	; 0x242e <initializeRobot+0x80>
    2436:	e6 55       	subi	r30, 0x56	; 86
    2438:	f9 4f       	sbci	r31, 0xF9	; 249
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	eb cf       	rjmp	.-42     	; 0x2416 <initializeRobot+0x68>
    2440:	08 95       	ret

00002442 <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    2442:	ef 92       	push	r14
    2444:	ff 92       	push	r15
    2446:	0f 93       	push	r16
    2448:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    244a:	60 91 91 05 	lds	r22, 0x0591
    244e:	70 91 92 05 	lds	r23, 0x0592
    2452:	80 91 93 05 	lds	r24, 0x0593
    2456:	90 91 94 05 	lds	r25, 0x0594
    245a:	20 e0       	ldi	r18, 0x00	; 0
    245c:	30 e0       	ldi	r19, 0x00	; 0
    245e:	40 e5       	ldi	r20, 0x50	; 80
    2460:	51 e4       	ldi	r21, 0x41	; 65
    2462:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    2466:	f8 2e       	mov	r15, r24
    2468:	ff 1c       	adc	r15, r15
    246a:	ff 24       	eor	r15, r15
    246c:	ff 1c       	adc	r15, r15
    246e:	ff 0c       	add	r15, r15
    2470:	ff 0c       	add	r15, r15
    2472:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    2474:	60 91 32 07 	lds	r22, 0x0732
    2478:	70 91 33 07 	lds	r23, 0x0733
    247c:	80 91 34 07 	lds	r24, 0x0734
    2480:	90 91 35 07 	lds	r25, 0x0735
    2484:	20 e0       	ldi	r18, 0x00	; 0
    2486:	30 e0       	ldi	r19, 0x00	; 0
    2488:	40 ef       	ldi	r20, 0xF0	; 240
    248a:	51 e4       	ldi	r21, 0x41	; 65
    248c:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    2490:	08 2f       	mov	r16, r24
    2492:	00 1f       	adc	r16, r16
    2494:	00 27       	eor	r16, r16
    2496:	00 1f       	adc	r16, r16
    2498:	00 0f       	add	r16, r16
    249a:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    249c:	60 91 9b 05 	lds	r22, 0x059B
    24a0:	70 91 9c 05 	lds	r23, 0x059C
    24a4:	80 91 9d 05 	lds	r24, 0x059D
    24a8:	90 91 9e 05 	lds	r25, 0x059E
    24ac:	20 e0       	ldi	r18, 0x00	; 0
    24ae:	30 e0       	ldi	r19, 0x00	; 0
    24b0:	4c e0       	ldi	r20, 0x0C	; 12
    24b2:	52 e4       	ldi	r21, 0x42	; 66
    24b4:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    24b8:	18 2f       	mov	r17, r24
    24ba:	11 1f       	adc	r17, r17
    24bc:	11 27       	eor	r17, r17
    24be:	11 1f       	adc	r17, r17
    24c0:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    24c2:	ee 24       	eor	r14, r14
    24c4:	60 91 37 07 	lds	r22, 0x0737
    24c8:	70 91 38 07 	lds	r23, 0x0738
    24cc:	80 91 39 07 	lds	r24, 0x0739
    24d0:	90 91 3a 07 	lds	r25, 0x073A
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 ef       	ldi	r20, 0xF0	; 240
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    24e0:	88 23       	and	r24, r24
    24e2:	14 f4       	brge	.+4      	; 0x24e8 <checkWorld+0xa6>
    24e4:	ee 24       	eor	r14, r14
    24e6:	e3 94       	inc	r14
    24e8:	8f 2d       	mov	r24, r15
    24ea:	8e 0d       	add	r24, r14
    24ec:	80 0f       	add	r24, r16
    24ee:	81 0f       	add	r24, r17
    24f0:	80 93 99 05 	sts	0x0599, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    24f4:	20 91 9a 05 	lds	r18, 0x059A
    24f8:	e2 2f       	mov	r30, r18
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	ed 54       	subi	r30, 0x4D	; 77
    24fe:	f8 4f       	sbci	r31, 0xF8	; 248
    2500:	91 81       	ldd	r25, Z+1	; 0x01
    2502:	90 93 9f 05 	sts	0x059F, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    2506:	89 17       	cp	r24, r25
    2508:	19 f4       	brne	.+6      	; 0x2510 <checkWorld+0xce>
		currentMoveWorld += 1;
    250a:	2f 5f       	subi	r18, 0xFF	; 255
    250c:	20 93 9a 05 	sts	0x059A, r18
	}
}
    2510:	1f 91       	pop	r17
    2512:	0f 91       	pop	r16
    2514:	ff 90       	pop	r15
    2516:	ef 90       	pop	r14
    2518:	08 95       	ret

0000251a <moveWallOld>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWallOld( void )
{	
    251a:	2f 92       	push	r2
    251c:	3f 92       	push	r3
    251e:	4f 92       	push	r4
    2520:	5f 92       	push	r5
    2522:	6f 92       	push	r6
    2524:	7f 92       	push	r7
    2526:	8f 92       	push	r8
    2528:	9f 92       	push	r9
    252a:	af 92       	push	r10
    252c:	bf 92       	push	r11
    252e:	cf 92       	push	r12
    2530:	df 92       	push	r13
    2532:	ef 92       	push	r14
    2534:	ff 92       	push	r15
    2536:	0f 93       	push	r16
    2538:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    253a:	e0 90 91 05 	lds	r14, 0x0591
    253e:	f0 90 92 05 	lds	r15, 0x0592
    2542:	00 91 93 05 	lds	r16, 0x0593
    2546:	10 91 94 05 	lds	r17, 0x0594
    254a:	33 24       	eor	r3, r3
    254c:	c8 01       	movw	r24, r16
    254e:	b7 01       	movw	r22, r14
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	30 e0       	ldi	r19, 0x00	; 0
    2554:	40 e0       	ldi	r20, 0x00	; 0
    2556:	50 e0       	ldi	r21, 0x00	; 0
    2558:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    255c:	88 23       	and	r24, r24
    255e:	14 f4       	brge	.+4      	; 0x2564 <moveWallOld+0x4a>
    2560:	33 24       	eor	r3, r3
    2562:	33 94       	inc	r3
    2564:	a0 90 37 07 	lds	r10, 0x0737
    2568:	b0 90 38 07 	lds	r11, 0x0738
    256c:	c0 90 39 07 	lds	r12, 0x0739
    2570:	d0 90 3a 07 	lds	r13, 0x073A
    2574:	40 90 32 07 	lds	r4, 0x0732
    2578:	50 90 33 07 	lds	r5, 0x0733
    257c:	60 90 34 07 	lds	r6, 0x0734
    2580:	70 90 35 07 	lds	r7, 0x0735
    2584:	88 24       	eor	r8, r8
    2586:	60 91 9b 05 	lds	r22, 0x059B
    258a:	70 91 9c 05 	lds	r23, 0x059C
    258e:	80 91 9d 05 	lds	r24, 0x059D
    2592:	90 91 9e 05 	lds	r25, 0x059E
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	40 e7       	ldi	r20, 0x70	; 112
    259c:	51 e4       	ldi	r21, 0x41	; 65
    259e:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    25a2:	88 23       	and	r24, r24
    25a4:	14 f4       	brge	.+4      	; 0x25aa <moveWallOld+0x90>
    25a6:	88 24       	eor	r8, r8
    25a8:	83 94       	inc	r8
    25aa:	93 2c       	mov	r9, r3
    25ac:	98 28       	or	r9, r8
    25ae:	88 24       	eor	r8, r8
    25b0:	c6 01       	movw	r24, r12
    25b2:	b5 01       	movw	r22, r10
    25b4:	20 e0       	ldi	r18, 0x00	; 0
    25b6:	30 e0       	ldi	r19, 0x00	; 0
    25b8:	40 e7       	ldi	r20, 0x70	; 112
    25ba:	51 e4       	ldi	r21, 0x41	; 65
    25bc:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    25c0:	88 23       	and	r24, r24
    25c2:	14 f4       	brge	.+4      	; 0x25c8 <moveWallOld+0xae>
    25c4:	88 24       	eor	r8, r8
    25c6:	83 94       	inc	r8
    25c8:	98 28       	or	r9, r8
    25ca:	88 24       	eor	r8, r8
    25cc:	c3 01       	movw	r24, r6
    25ce:	b2 01       	movw	r22, r4
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	40 e7       	ldi	r20, 0x70	; 112
    25d6:	51 e4       	ldi	r21, 0x41	; 65
    25d8:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    25dc:	88 23       	and	r24, r24
    25de:	14 f4       	brge	.+4      	; 0x25e4 <moveWallOld+0xca>
    25e0:	88 24       	eor	r8, r8
    25e2:	83 94       	inc	r8
    25e4:	29 2c       	mov	r2, r9
    25e6:	28 28       	or	r2, r8
	if(!isWall){	
    25e8:	81 f4       	brne	.+32     	; 0x260a <moveWallOld+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	9f e4       	ldi	r25, 0x4F	; 79
    25f2:	20 e0       	ldi	r18, 0x00	; 0
    25f4:	30 e0       	ldi	r19, 0x00	; 0
    25f6:	40 e2       	ldi	r20, 0x20	; 32
    25f8:	51 e4       	ldi	r21, 0x41	; 65
    25fa:	79 01       	movw	r14, r18
    25fc:	8a 01       	movw	r16, r20
    25fe:	59 01       	movw	r10, r18
    2600:	6a 01       	movw	r12, r20
    2602:	88 24       	eor	r8, r8
    2604:	0e 94 0d 0a 	call	0x141a	; 0x141a <move_arc_stnb>
    2608:	f7 c0       	rjmp	.+494    	; 0x27f8 <moveWallOld+0x2de>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    260a:	c6 01       	movw	r24, r12
    260c:	b5 01       	movw	r22, r10
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e7       	ldi	r20, 0x70	; 112
    2614:	51 e4       	ldi	r21, 0x41	; 65
    2616:	0e 94 0d 31 	call	0x621a	; 0x621a <__gesf2>
    261a:	18 16       	cp	r1, r24
    261c:	64 f4       	brge	.+24     	; 0x2636 <moveWallOld+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    261e:	80 e0       	ldi	r24, 0x00	; 0
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	a0 e4       	ldi	r26, 0x40	; 64
    2624:	b0 ec       	ldi	r27, 0xC0	; 192
    2626:	80 93 37 07 	sts	0x0737, r24
    262a:	90 93 38 07 	sts	0x0738, r25
    262e:	a0 93 39 07 	sts	0x0739, r26
    2632:	b0 93 3a 07 	sts	0x073A, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    2636:	c3 01       	movw	r24, r6
    2638:	b2 01       	movw	r22, r4
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e7       	ldi	r20, 0x70	; 112
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	0e 94 0d 31 	call	0x621a	; 0x621a <__gesf2>
    2646:	18 16       	cp	r1, r24
    2648:	14 f0       	brlt	.+4      	; 0x264e <moveWallOld+0x134>
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	0d c0       	rjmp	.+26     	; 0x2668 <moveWallOld+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	a0 e4       	ldi	r26, 0x40	; 64
    2654:	b0 ec       	ldi	r27, 0xC0	; 192
    2656:	80 93 32 07 	sts	0x0732, r24
    265a:	90 93 33 07 	sts	0x0733, r25
    265e:	a0 93 34 07 	sts	0x0734, r26
    2662:	b0 93 35 07 	sts	0x0735, r27
    2666:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    2668:	33 20       	and	r3, r3
    266a:	21 f1       	breq	.+72     	; 0x26b4 <moveWallOld+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    266c:	88 23       	and	r24, r24
    266e:	29 f0       	breq	.+10     	; 0x267a <moveWallOld+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2670:	60 e0       	ldi	r22, 0x00	; 0
    2672:	70 e0       	ldi	r23, 0x00	; 0
    2674:	8a e7       	ldi	r24, 0x7A	; 122
    2676:	94 e4       	ldi	r25, 0x44	; 68
    2678:	04 c0       	rjmp	.+8      	; 0x2682 <moveWallOld+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    267a:	60 e0       	ldi	r22, 0x00	; 0
    267c:	70 e0       	ldi	r23, 0x00	; 0
    267e:	8a e7       	ldi	r24, 0x7A	; 122
    2680:	94 ec       	ldi	r25, 0xC4	; 196
    2682:	a8 01       	movw	r20, r16
    2684:	97 01       	movw	r18, r14
    2686:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    268a:	20 91 32 07 	lds	r18, 0x0732
    268e:	30 91 33 07 	lds	r19, 0x0733
    2692:	40 91 34 07 	lds	r20, 0x0734
    2696:	50 91 35 07 	lds	r21, 0x0735
    269a:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    269e:	9b 01       	movw	r18, r22
    26a0:	ac 01       	movw	r20, r24
    26a2:	60 91 37 07 	lds	r22, 0x0737
    26a6:	70 91 38 07 	lds	r23, 0x0738
    26aa:	80 91 39 07 	lds	r24, 0x0739
    26ae:	90 91 3a 07 	lds	r25, 0x073A
    26b2:	10 c0       	rjmp	.+32     	; 0x26d4 <moveWallOld+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    26b4:	60 91 37 07 	lds	r22, 0x0737
    26b8:	70 91 38 07 	lds	r23, 0x0738
    26bc:	80 91 39 07 	lds	r24, 0x0739
    26c0:	90 91 3a 07 	lds	r25, 0x073A
    26c4:	20 91 32 07 	lds	r18, 0x0732
    26c8:	30 91 33 07 	lds	r19, 0x0733
    26cc:	40 91 34 07 	lds	r20, 0x0734
    26d0:	50 91 35 07 	lds	r21, 0x0735
    26d4:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    26d8:	90 58       	subi	r25, 0x80	; 128
    26da:	40 e0       	ldi	r20, 0x00	; 0
    26dc:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    26e0:	6b 01       	movw	r12, r22
    26e2:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    26e4:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fixsfsi>
    26e8:	8b 01       	movw	r16, r22
    26ea:	77 ff       	sbrs	r23, 7
    26ec:	03 c0       	rjmp	.+6      	; 0x26f4 <moveWallOld+0x1da>
    26ee:	10 95       	com	r17
    26f0:	01 95       	neg	r16
    26f2:	1f 4f       	sbci	r17, 0xFF	; 255
    26f4:	05 36       	cpi	r16, 0x65	; 101
    26f6:	11 05       	cpc	r17, r1
    26f8:	fc f0       	brlt	.+62     	; 0x2738 <moveWallOld+0x21e>
    26fa:	c7 01       	movw	r24, r14
    26fc:	b6 01       	movw	r22, r12
    26fe:	20 e0       	ldi	r18, 0x00	; 0
    2700:	30 e0       	ldi	r19, 0x00	; 0
    2702:	40 e0       	ldi	r20, 0x00	; 0
    2704:	50 e0       	ldi	r21, 0x00	; 0
    2706:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    270a:	88 23       	and	r24, r24
    270c:	a9 f0       	breq	.+42     	; 0x2738 <moveWallOld+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    270e:	b8 01       	movw	r22, r16
    2710:	88 27       	eor	r24, r24
    2712:	77 fd       	sbrc	r23, 7
    2714:	80 95       	com	r24
    2716:	98 2f       	mov	r25, r24
    2718:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatsisf>
    271c:	9b 01       	movw	r18, r22
    271e:	ac 01       	movw	r20, r24
    2720:	c7 01       	movw	r24, r14
    2722:	b6 01       	movw	r22, r12
    2724:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	48 ec       	ldi	r20, 0xC8	; 200
    272e:	52 e4       	ldi	r21, 0x42	; 66
    2730:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    2734:	6b 01       	movw	r12, r22
    2736:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2738:	c7 01       	movw	r24, r14
    273a:	b6 01       	movw	r22, r12
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	48 ec       	ldi	r20, 0xC8	; 200
    2742:	52 e4       	ldi	r21, 0x42	; 66
    2744:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    2748:	6b 01       	movw	r12, r22
    274a:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    274c:	8d b7       	in	r24, 0x3d	; 61
    274e:	9e b7       	in	r25, 0x3e	; 62
    2750:	09 97       	sbiw	r24, 0x09	; 9
    2752:	0f b6       	in	r0, 0x3f	; 63
    2754:	f8 94       	cli
    2756:	9e bf       	out	0x3e, r25	; 62
    2758:	0f be       	out	0x3f, r0	; 63
    275a:	8d bf       	out	0x3d, r24	; 61
    275c:	0d b7       	in	r16, 0x3d	; 61
    275e:	1e b7       	in	r17, 0x3e	; 62
    2760:	0f 5f       	subi	r16, 0xFF	; 255
    2762:	1f 4f       	sbci	r17, 0xFF	; 255
    2764:	c7 01       	movw	r24, r14
    2766:	b6 01       	movw	r22, r12
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	48 ec       	ldi	r20, 0xC8	; 200
    276e:	52 e4       	ldi	r21, 0x42	; 66
    2770:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    2774:	20 e0       	ldi	r18, 0x00	; 0
    2776:	30 e0       	ldi	r19, 0x00	; 0
    2778:	48 ec       	ldi	r20, 0xC8	; 200
    277a:	52 e4       	ldi	r21, 0x42	; 66
    277c:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    2780:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    2784:	4b 01       	movw	r8, r22
    2786:	5c 01       	movw	r10, r24
    2788:	82 e3       	ldi	r24, 0x32	; 50
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	f8 01       	movw	r30, r16
    278e:	91 83       	std	Z+1, r25	; 0x01
    2790:	80 83       	st	Z, r24
    2792:	c7 01       	movw	r24, r14
    2794:	b6 01       	movw	r22, r12
    2796:	20 e0       	ldi	r18, 0x00	; 0
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	48 ec       	ldi	r20, 0xC8	; 200
    279c:	52 ec       	ldi	r21, 0xC2	; 194
    279e:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	48 ec       	ldi	r20, 0xC8	; 200
    27a8:	52 e4       	ldi	r21, 0x42	; 66
    27aa:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    27ae:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    27b2:	f8 01       	movw	r30, r16
    27b4:	73 83       	std	Z+3, r23	; 0x03
    27b6:	62 83       	std	Z+2, r22	; 0x02
    27b8:	82 ec       	ldi	r24, 0xC2	; 194
    27ba:	91 e0       	ldi	r25, 0x01	; 1
    27bc:	95 83       	std	Z+5, r25	; 0x05
    27be:	84 83       	std	Z+4, r24	; 0x04
    27c0:	16 82       	std	Z+6, r1	; 0x06
    27c2:	10 86       	std	Z+8, r1	; 0x08
    27c4:	17 82       	std	Z+7, r1	; 0x07
    27c6:	81 e0       	ldi	r24, 0x01	; 1
    27c8:	62 e0       	ldi	r22, 0x02	; 2
    27ca:	41 e0       	ldi	r20, 0x01	; 1
    27cc:	22 e3       	ldi	r18, 0x32	; 50
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	84 01       	movw	r16, r8
    27d2:	92 ec       	ldi	r25, 0xC2	; 194
    27d4:	e9 2e       	mov	r14, r25
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	f9 2e       	mov	r15, r25
    27da:	cc 24       	eor	r12, r12
    27dc:	aa 24       	eor	r10, r10
    27de:	bb 24       	eor	r11, r11
    27e0:	88 24       	eor	r8, r8
    27e2:	83 94       	inc	r8
    27e4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <STEPPER_move>
    27e8:	8d b7       	in	r24, 0x3d	; 61
    27ea:	9e b7       	in	r25, 0x3e	; 62
    27ec:	09 96       	adiw	r24, 0x09	; 9
    27ee:	0f b6       	in	r0, 0x3f	; 63
    27f0:	f8 94       	cli
    27f2:	9e bf       	out	0x3e, r25	; 62
    27f4:	0f be       	out	0x3f, r0	; 63
    27f6:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    27f8:	82 2d       	mov	r24, r2
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	ff 90       	pop	r15
    2800:	ef 90       	pop	r14
    2802:	df 90       	pop	r13
    2804:	cf 90       	pop	r12
    2806:	bf 90       	pop	r11
    2808:	af 90       	pop	r10
    280a:	9f 90       	pop	r9
    280c:	8f 90       	pop	r8
    280e:	7f 90       	pop	r7
    2810:	6f 90       	pop	r6
    2812:	5f 90       	pop	r5
    2814:	4f 90       	pop	r4
    2816:	3f 90       	pop	r3
    2818:	2f 90       	pop	r2
    281a:	08 95       	ret

0000281c <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    281c:	2f 92       	push	r2
    281e:	3f 92       	push	r3
    2820:	4f 92       	push	r4
    2822:	5f 92       	push	r5
    2824:	6f 92       	push	r6
    2826:	7f 92       	push	r7
    2828:	8f 92       	push	r8
    282a:	9f 92       	push	r9
    282c:	af 92       	push	r10
    282e:	bf 92       	push	r11
    2830:	cf 92       	push	r12
    2832:	df 92       	push	r13
    2834:	ef 92       	push	r14
    2836:	ff 92       	push	r15
    2838:	0f 93       	push	r16
    283a:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    283c:	e0 90 91 05 	lds	r14, 0x0591
    2840:	f0 90 92 05 	lds	r15, 0x0592
    2844:	00 91 93 05 	lds	r16, 0x0593
    2848:	10 91 94 05 	lds	r17, 0x0594
    284c:	33 24       	eor	r3, r3
    284e:	c8 01       	movw	r24, r16
    2850:	b7 01       	movw	r22, r14
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	50 e0       	ldi	r21, 0x00	; 0
    285a:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    285e:	88 23       	and	r24, r24
    2860:	14 f4       	brge	.+4      	; 0x2866 <moveWall+0x4a>
    2862:	33 24       	eor	r3, r3
    2864:	33 94       	inc	r3
    2866:	a0 90 37 07 	lds	r10, 0x0737
    286a:	b0 90 38 07 	lds	r11, 0x0738
    286e:	c0 90 39 07 	lds	r12, 0x0739
    2872:	d0 90 3a 07 	lds	r13, 0x073A
    2876:	40 90 32 07 	lds	r4, 0x0732
    287a:	50 90 33 07 	lds	r5, 0x0733
    287e:	60 90 34 07 	lds	r6, 0x0734
    2882:	70 90 35 07 	lds	r7, 0x0735
    2886:	88 24       	eor	r8, r8
    2888:	60 91 9b 05 	lds	r22, 0x059B
    288c:	70 91 9c 05 	lds	r23, 0x059C
    2890:	80 91 9d 05 	lds	r24, 0x059D
    2894:	90 91 9e 05 	lds	r25, 0x059E
    2898:	20 e0       	ldi	r18, 0x00	; 0
    289a:	30 e0       	ldi	r19, 0x00	; 0
    289c:	40 e7       	ldi	r20, 0x70	; 112
    289e:	51 e4       	ldi	r21, 0x41	; 65
    28a0:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    28a4:	88 23       	and	r24, r24
    28a6:	14 f4       	brge	.+4      	; 0x28ac <moveWall+0x90>
    28a8:	88 24       	eor	r8, r8
    28aa:	83 94       	inc	r8
    28ac:	93 2c       	mov	r9, r3
    28ae:	98 28       	or	r9, r8
    28b0:	88 24       	eor	r8, r8
    28b2:	c6 01       	movw	r24, r12
    28b4:	b5 01       	movw	r22, r10
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e7       	ldi	r20, 0x70	; 112
    28bc:	51 e4       	ldi	r21, 0x41	; 65
    28be:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    28c2:	88 23       	and	r24, r24
    28c4:	14 f4       	brge	.+4      	; 0x28ca <moveWall+0xae>
    28c6:	88 24       	eor	r8, r8
    28c8:	83 94       	inc	r8
    28ca:	98 28       	or	r9, r8
    28cc:	88 24       	eor	r8, r8
    28ce:	c3 01       	movw	r24, r6
    28d0:	b2 01       	movw	r22, r4
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	30 e0       	ldi	r19, 0x00	; 0
    28d6:	40 e7       	ldi	r20, 0x70	; 112
    28d8:	51 e4       	ldi	r21, 0x41	; 65
    28da:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    28de:	88 23       	and	r24, r24
    28e0:	14 f4       	brge	.+4      	; 0x28e6 <moveWall+0xca>
    28e2:	88 24       	eor	r8, r8
    28e4:	83 94       	inc	r8
    28e6:	29 2c       	mov	r2, r9
    28e8:	28 28       	or	r2, r8
	if(!isWall){
    28ea:	09 f0       	breq	.+2      	; 0x28ee <moveWall+0xd2>
    28ec:	8a c0       	rjmp	.+276    	; 0x2a02 <moveWall+0x1e6>
	
		// Update odometry
		curr_step = STEPPER_get_nSteps();
    28ee:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <STEPPER_get_nSteps>
    28f2:	60 93 2a 07 	sts	0x072A, r22
    28f6:	70 93 2b 07 	sts	0x072B, r23
    28fa:	80 93 2c 07 	sts	0x072C, r24
    28fe:	90 93 2d 07 	sts	0x072D, r25
		
		if(curr_step.left != 0){
    2902:	cb 01       	movw	r24, r22
    2904:	61 15       	cp	r22, r1
    2906:	71 05       	cpc	r23, r1
    2908:	e1 f0       	breq	.+56     	; 0x2942 <moveWall+0x126>
			odometryStepL += WALL_STEP - curr_step.left;
    290a:	64 e1       	ldi	r22, 0x14	; 20
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	68 1b       	sub	r22, r24
    2910:	79 0b       	sbc	r23, r25
    2912:	80 e0       	ldi	r24, 0x00	; 0
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__floatunsisf>
    291a:	9b 01       	movw	r18, r22
    291c:	ac 01       	movw	r20, r24
    291e:	60 91 c3 07 	lds	r22, 0x07C3
    2922:	70 91 c4 07 	lds	r23, 0x07C4
    2926:	80 91 c5 07 	lds	r24, 0x07C5
    292a:	90 91 c6 07 	lds	r25, 0x07C6
    292e:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    2932:	60 93 c3 07 	sts	0x07C3, r22
    2936:	70 93 c4 07 	sts	0x07C4, r23
    293a:	80 93 c5 07 	sts	0x07C5, r24
    293e:	90 93 c6 07 	sts	0x07C6, r25
		}
		if(curr_step.right != 0){
    2942:	80 91 2c 07 	lds	r24, 0x072C
    2946:	90 91 2d 07 	lds	r25, 0x072D
    294a:	00 97       	sbiw	r24, 0x00	; 0
    294c:	e1 f0       	breq	.+56     	; 0x2986 <moveWall+0x16a>
			odometryStepR += WALL_STEP - curr_step.right;
    294e:	64 e1       	ldi	r22, 0x14	; 20
    2950:	70 e0       	ldi	r23, 0x00	; 0
    2952:	68 1b       	sub	r22, r24
    2954:	79 0b       	sbc	r23, r25
    2956:	80 e0       	ldi	r24, 0x00	; 0
    2958:	90 e0       	ldi	r25, 0x00	; 0
    295a:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__floatunsisf>
    295e:	9b 01       	movw	r18, r22
    2960:	ac 01       	movw	r20, r24
    2962:	60 91 15 05 	lds	r22, 0x0515
    2966:	70 91 16 05 	lds	r23, 0x0516
    296a:	80 91 17 05 	lds	r24, 0x0517
    296e:	90 91 18 05 	lds	r25, 0x0518
    2972:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    2976:	60 93 15 05 	sts	0x0515, r22
    297a:	70 93 16 05 	sts	0x0516, r23
    297e:	80 93 17 05 	sts	0x0517, r24
    2982:	90 93 18 05 	sts	0x0518, r25
		}
		
		STEPPER_set_steps(STEPPER_BOTH,0);
    2986:	82 e0       	ldi	r24, 0x02	; 2
    2988:	60 e0       	ldi	r22, 0x00	; 0
    298a:	70 e0       	ldi	r23, 0x00	; 0
    298c:	0e 94 06 21 	call	0x420c	; 0x420c <STEPPER_set_steps>
	
		// Move with wall
		STEPPER_move_stnb( STEPPER_BOTH, 
    2990:	8d b7       	in	r24, 0x3d	; 61
    2992:	9e b7       	in	r25, 0x3e	; 62
    2994:	09 97       	sbiw	r24, 0x09	; 9
    2996:	0f b6       	in	r0, 0x3f	; 63
    2998:	f8 94       	cli
    299a:	9e bf       	out	0x3e, r25	; 62
    299c:	0f be       	out	0x3f, r0	; 63
    299e:	8d bf       	out	0x3d, r24	; 61
    29a0:	ed b7       	in	r30, 0x3d	; 61
    29a2:	fe b7       	in	r31, 0x3e	; 62
    29a4:	31 96       	adiw	r30, 0x01	; 1
    29a6:	84 e1       	ldi	r24, 0x14	; 20
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	ad b7       	in	r26, 0x3d	; 61
    29ac:	be b7       	in	r27, 0x3e	; 62
    29ae:	12 96       	adiw	r26, 0x02	; 2
    29b0:	9c 93       	st	X, r25
    29b2:	8e 93       	st	-X, r24
    29b4:	11 97       	sbiw	r26, 0x01	; 1
    29b6:	88 ec       	ldi	r24, 0xC8	; 200
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	93 83       	std	Z+3, r25	; 0x03
    29bc:	82 83       	std	Z+2, r24	; 0x02
    29be:	82 ec       	ldi	r24, 0xC2	; 194
    29c0:	91 e0       	ldi	r25, 0x01	; 1
    29c2:	95 83       	std	Z+5, r25	; 0x05
    29c4:	84 83       	std	Z+4, r24	; 0x04
    29c6:	16 82       	std	Z+6, r1	; 0x06
    29c8:	10 86       	std	Z+8, r1	; 0x08
    29ca:	17 82       	std	Z+7, r1	; 0x07
    29cc:	81 e0       	ldi	r24, 0x01	; 1
    29ce:	62 e0       	ldi	r22, 0x02	; 2
    29d0:	41 e0       	ldi	r20, 0x01	; 1
    29d2:	24 e1       	ldi	r18, 0x14	; 20
    29d4:	30 e0       	ldi	r19, 0x00	; 0
    29d6:	08 ec       	ldi	r16, 0xC8	; 200
    29d8:	10 e0       	ldi	r17, 0x00	; 0
    29da:	72 ec       	ldi	r23, 0xC2	; 194
    29dc:	e7 2e       	mov	r14, r23
    29de:	71 e0       	ldi	r23, 0x01	; 1
    29e0:	f7 2e       	mov	r15, r23
    29e2:	cc 24       	eor	r12, r12
    29e4:	aa 24       	eor	r10, r10
    29e6:	bb 24       	eor	r11, r11
    29e8:	88 24       	eor	r8, r8
    29ea:	83 94       	inc	r8
    29ec:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <STEPPER_move>
    29f0:	ed b7       	in	r30, 0x3d	; 61
    29f2:	fe b7       	in	r31, 0x3e	; 62
    29f4:	39 96       	adiw	r30, 0x09	; 9
    29f6:	0f b6       	in	r0, 0x3f	; 63
    29f8:	f8 94       	cli
    29fa:	fe bf       	out	0x3e, r31	; 62
    29fc:	0f be       	out	0x3f, r0	; 63
    29fe:	ed bf       	out	0x3d, r30	; 61
    2a00:	48 c1       	rjmp	.+656    	; 0x2c92 <moveWall+0x476>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2a02:	c6 01       	movw	r24, r12
    2a04:	b5 01       	movw	r22, r10
    2a06:	20 e0       	ldi	r18, 0x00	; 0
    2a08:	30 e0       	ldi	r19, 0x00	; 0
    2a0a:	40 e7       	ldi	r20, 0x70	; 112
    2a0c:	51 e4       	ldi	r21, 0x41	; 65
    2a0e:	0e 94 0d 31 	call	0x621a	; 0x621a <__gesf2>
    2a12:	18 16       	cp	r1, r24
    2a14:	64 f4       	brge	.+24     	; 0x2a2e <moveWall+0x212>
		rtIR = IR_WALL_R_THRESH-18;
    2a16:	80 e0       	ldi	r24, 0x00	; 0
    2a18:	90 e0       	ldi	r25, 0x00	; 0
    2a1a:	a0 e4       	ldi	r26, 0x40	; 64
    2a1c:	b0 ec       	ldi	r27, 0xC0	; 192
    2a1e:	80 93 37 07 	sts	0x0737, r24
    2a22:	90 93 38 07 	sts	0x0738, r25
    2a26:	a0 93 39 07 	sts	0x0739, r26
    2a2a:	b0 93 3a 07 	sts	0x073A, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    2a2e:	c3 01       	movw	r24, r6
    2a30:	b2 01       	movw	r22, r4
    2a32:	20 e0       	ldi	r18, 0x00	; 0
    2a34:	30 e0       	ldi	r19, 0x00	; 0
    2a36:	40 e7       	ldi	r20, 0x70	; 112
    2a38:	51 e4       	ldi	r21, 0x41	; 65
    2a3a:	0e 94 0d 31 	call	0x621a	; 0x621a <__gesf2>
    2a3e:	18 16       	cp	r1, r24
    2a40:	14 f0       	brlt	.+4      	; 0x2a46 <moveWall+0x22a>
    2a42:	80 e0       	ldi	r24, 0x00	; 0
    2a44:	0d c0       	rjmp	.+26     	; 0x2a60 <moveWall+0x244>
		ltIR = IR_WALL_L_THRESH-18;
    2a46:	80 e0       	ldi	r24, 0x00	; 0
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	a0 e4       	ldi	r26, 0x40	; 64
    2a4c:	b0 ec       	ldi	r27, 0xC0	; 192
    2a4e:	80 93 32 07 	sts	0x0732, r24
    2a52:	90 93 33 07 	sts	0x0733, r25
    2a56:	a0 93 34 07 	sts	0x0734, r26
    2a5a:	b0 93 35 07 	sts	0x0735, r27
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    2a60:	33 20       	and	r3, r3
    2a62:	21 f1       	breq	.+72     	; 0x2aac <moveWall+0x290>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    2a64:	88 23       	and	r24, r24
    2a66:	29 f0       	breq	.+10     	; 0x2a72 <moveWall+0x256>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2a68:	60 e0       	ldi	r22, 0x00	; 0
    2a6a:	70 e0       	ldi	r23, 0x00	; 0
    2a6c:	8a e7       	ldi	r24, 0x7A	; 122
    2a6e:	94 e4       	ldi	r25, 0x44	; 68
    2a70:	04 c0       	rjmp	.+8      	; 0x2a7a <moveWall+0x25e>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    2a72:	60 e0       	ldi	r22, 0x00	; 0
    2a74:	70 e0       	ldi	r23, 0x00	; 0
    2a76:	8a e7       	ldi	r24, 0x7A	; 122
    2a78:	94 ec       	ldi	r25, 0xC4	; 196
    2a7a:	a8 01       	movw	r20, r16
    2a7c:	97 01       	movw	r18, r14
    2a7e:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    2a82:	20 91 32 07 	lds	r18, 0x0732
    2a86:	30 91 33 07 	lds	r19, 0x0733
    2a8a:	40 91 34 07 	lds	r20, 0x0734
    2a8e:	50 91 35 07 	lds	r21, 0x0735
    2a92:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    2a96:	9b 01       	movw	r18, r22
    2a98:	ac 01       	movw	r20, r24
    2a9a:	60 91 37 07 	lds	r22, 0x0737
    2a9e:	70 91 38 07 	lds	r23, 0x0738
    2aa2:	80 91 39 07 	lds	r24, 0x0739
    2aa6:	90 91 3a 07 	lds	r25, 0x073A
    2aaa:	10 c0       	rjmp	.+32     	; 0x2acc <moveWall+0x2b0>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2aac:	60 91 37 07 	lds	r22, 0x0737
    2ab0:	70 91 38 07 	lds	r23, 0x0738
    2ab4:	80 91 39 07 	lds	r24, 0x0739
    2ab8:	90 91 3a 07 	lds	r25, 0x073A
    2abc:	20 91 32 07 	lds	r18, 0x0732
    2ac0:	30 91 33 07 	lds	r19, 0x0733
    2ac4:	40 91 34 07 	lds	r20, 0x0734
    2ac8:	50 91 35 07 	lds	r21, 0x0735
    2acc:	0e 94 59 2f 	call	0x5eb2	; 0x5eb2 <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2ad0:	90 58       	subi	r25, 0x80	; 128
    2ad2:	40 e0       	ldi	r20, 0x00	; 0
    2ad4:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2ad8:	6b 01       	movw	r12, r22
    2ada:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2adc:	0e 94 2a 30 	call	0x6054	; 0x6054 <__fixsfsi>
    2ae0:	8b 01       	movw	r16, r22
    2ae2:	77 ff       	sbrs	r23, 7
    2ae4:	03 c0       	rjmp	.+6      	; 0x2aec <moveWall+0x2d0>
    2ae6:	10 95       	com	r17
    2ae8:	01 95       	neg	r16
    2aea:	1f 4f       	sbci	r17, 0xFF	; 255
    2aec:	05 36       	cpi	r16, 0x65	; 101
    2aee:	11 05       	cpc	r17, r1
    2af0:	fc f0       	brlt	.+62     	; 0x2b30 <moveWall+0x314>
    2af2:	c7 01       	movw	r24, r14
    2af4:	b6 01       	movw	r22, r12
    2af6:	20 e0       	ldi	r18, 0x00	; 0
    2af8:	30 e0       	ldi	r19, 0x00	; 0
    2afa:	40 e0       	ldi	r20, 0x00	; 0
    2afc:	50 e0       	ldi	r21, 0x00	; 0
    2afe:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__cmpsf2>
    2b02:	88 23       	and	r24, r24
    2b04:	a9 f0       	breq	.+42     	; 0x2b30 <moveWall+0x314>
		effort = MAX_EFFORT*(effort/abs(effort));
    2b06:	b8 01       	movw	r22, r16
    2b08:	88 27       	eor	r24, r24
    2b0a:	77 fd       	sbrc	r23, 7
    2b0c:	80 95       	com	r24
    2b0e:	98 2f       	mov	r25, r24
    2b10:	0e 94 5d 30 	call	0x60ba	; 0x60ba <__floatsisf>
    2b14:	9b 01       	movw	r18, r22
    2b16:	ac 01       	movw	r20, r24
    2b18:	c7 01       	movw	r24, r14
    2b1a:	b6 01       	movw	r22, r12
    2b1c:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    2b20:	20 e0       	ldi	r18, 0x00	; 0
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	48 ec       	ldi	r20, 0xC8	; 200
    2b26:	52 e4       	ldi	r21, 0x42	; 66
    2b28:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    2b2c:	6b 01       	movw	r12, r22
    2b2e:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2b30:	c7 01       	movw	r24, r14
    2b32:	b6 01       	movw	r22, r12
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	48 ec       	ldi	r20, 0xC8	; 200
    2b3a:	52 e4       	ldi	r21, 0x42	; 66
    2b3c:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    2b40:	4b 01       	movw	r8, r22
    2b42:	5c 01       	movw	r10, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
    2b44:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <STEPPER_get_nSteps>
    2b48:	60 93 2a 07 	sts	0x072A, r22
    2b4c:	70 93 2b 07 	sts	0x072B, r23
    2b50:	80 93 2c 07 	sts	0x072C, r24
    2b54:	90 93 2d 07 	sts	0x072D, r25
	
	if(curr_step.left != 0){
    2b58:	cb 01       	movw	r24, r22
    2b5a:	61 15       	cp	r22, r1
    2b5c:	71 05       	cpc	r23, r1
    2b5e:	e1 f0       	breq	.+56     	; 0x2b98 <moveWall+0x37c>
		odometryStepL += WALL_STEP - (curr_step.left);
    2b60:	64 e1       	ldi	r22, 0x14	; 20
    2b62:	70 e0       	ldi	r23, 0x00	; 0
    2b64:	68 1b       	sub	r22, r24
    2b66:	79 0b       	sbc	r23, r25
    2b68:	80 e0       	ldi	r24, 0x00	; 0
    2b6a:	90 e0       	ldi	r25, 0x00	; 0
    2b6c:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__floatunsisf>
    2b70:	9b 01       	movw	r18, r22
    2b72:	ac 01       	movw	r20, r24
    2b74:	60 91 c3 07 	lds	r22, 0x07C3
    2b78:	70 91 c4 07 	lds	r23, 0x07C4
    2b7c:	80 91 c5 07 	lds	r24, 0x07C5
    2b80:	90 91 c6 07 	lds	r25, 0x07C6
    2b84:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    2b88:	60 93 c3 07 	sts	0x07C3, r22
    2b8c:	70 93 c4 07 	sts	0x07C4, r23
    2b90:	80 93 c5 07 	sts	0x07C5, r24
    2b94:	90 93 c6 07 	sts	0x07C6, r25
	}
	if(curr_step.right != 0){
    2b98:	80 91 2c 07 	lds	r24, 0x072C
    2b9c:	90 91 2d 07 	lds	r25, 0x072D
    2ba0:	00 97       	sbiw	r24, 0x00	; 0
    2ba2:	e1 f0       	breq	.+56     	; 0x2bdc <moveWall+0x3c0>
		odometryStepR += WALL_STEP - (curr_step.right);
    2ba4:	64 e1       	ldi	r22, 0x14	; 20
    2ba6:	70 e0       	ldi	r23, 0x00	; 0
    2ba8:	68 1b       	sub	r22, r24
    2baa:	79 0b       	sbc	r23, r25
    2bac:	80 e0       	ldi	r24, 0x00	; 0
    2bae:	90 e0       	ldi	r25, 0x00	; 0
    2bb0:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__floatunsisf>
    2bb4:	9b 01       	movw	r18, r22
    2bb6:	ac 01       	movw	r20, r24
    2bb8:	60 91 15 05 	lds	r22, 0x0515
    2bbc:	70 91 16 05 	lds	r23, 0x0516
    2bc0:	80 91 17 05 	lds	r24, 0x0517
    2bc4:	90 91 18 05 	lds	r25, 0x0518
    2bc8:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    2bcc:	60 93 15 05 	sts	0x0515, r22
    2bd0:	70 93 16 05 	sts	0x0516, r23
    2bd4:	80 93 17 05 	sts	0x0517, r24
    2bd8:	90 93 18 05 	sts	0x0518, r25
	}
	
	STEPPER_set_steps(STEPPER_BOTH,0);
    2bdc:	82 e0       	ldi	r24, 0x02	; 2
    2bde:	60 e0       	ldi	r22, 0x00	; 0
    2be0:	70 e0       	ldi	r23, 0x00	; 0
    2be2:	0e 94 06 21 	call	0x420c	; 0x420c <STEPPER_set_steps>
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    2be6:	8d b7       	in	r24, 0x3d	; 61
    2be8:	9e b7       	in	r25, 0x3e	; 62
    2bea:	09 97       	sbiw	r24, 0x09	; 9
    2bec:	0f b6       	in	r0, 0x3f	; 63
    2bee:	f8 94       	cli
    2bf0:	9e bf       	out	0x3e, r25	; 62
    2bf2:	0f be       	out	0x3f, r0	; 63
    2bf4:	8d bf       	out	0x3d, r24	; 61
    2bf6:	0d b7       	in	r16, 0x3d	; 61
    2bf8:	1e b7       	in	r17, 0x3e	; 62
    2bfa:	0f 5f       	subi	r16, 0xFF	; 255
    2bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    2bfe:	c5 01       	movw	r24, r10
    2c00:	b4 01       	movw	r22, r8
    2c02:	20 e0       	ldi	r18, 0x00	; 0
    2c04:	30 e0       	ldi	r19, 0x00	; 0
    2c06:	48 ec       	ldi	r20, 0xC8	; 200
    2c08:	52 e4       	ldi	r21, 0x42	; 66
    2c0a:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	48 ec       	ldi	r20, 0xC8	; 200
    2c14:	52 e4       	ldi	r21, 0x42	; 66
    2c16:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    2c1a:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    2c1e:	6b 01       	movw	r12, r22
    2c20:	7c 01       	movw	r14, r24
    2c22:	84 e1       	ldi	r24, 0x14	; 20
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	d8 01       	movw	r26, r16
    2c28:	8d 93       	st	X+, r24
    2c2a:	9c 93       	st	X, r25
    2c2c:	c5 01       	movw	r24, r10
    2c2e:	b4 01       	movw	r22, r8
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	48 ec       	ldi	r20, 0xC8	; 200
    2c36:	52 ec       	ldi	r21, 0xC2	; 194
    2c38:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    2c3c:	20 e0       	ldi	r18, 0x00	; 0
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	48 ec       	ldi	r20, 0xC8	; 200
    2c42:	52 e4       	ldi	r21, 0x42	; 66
    2c44:	0e 94 5a 2f 	call	0x5eb4	; 0x5eb4 <__addsf3>
    2c48:	0e 94 2f 30 	call	0x605e	; 0x605e <__fixunssfsi>
    2c4c:	f8 01       	movw	r30, r16
    2c4e:	73 83       	std	Z+3, r23	; 0x03
    2c50:	62 83       	std	Z+2, r22	; 0x02
    2c52:	82 ec       	ldi	r24, 0xC2	; 194
    2c54:	91 e0       	ldi	r25, 0x01	; 1
    2c56:	95 83       	std	Z+5, r25	; 0x05
    2c58:	84 83       	std	Z+4, r24	; 0x04
    2c5a:	16 82       	std	Z+6, r1	; 0x06
    2c5c:	10 86       	std	Z+8, r1	; 0x08
    2c5e:	17 82       	std	Z+7, r1	; 0x07
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	62 e0       	ldi	r22, 0x02	; 2
    2c64:	41 e0       	ldi	r20, 0x01	; 1
    2c66:	24 e1       	ldi	r18, 0x14	; 20
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	86 01       	movw	r16, r12
    2c6c:	52 ec       	ldi	r21, 0xC2	; 194
    2c6e:	e5 2e       	mov	r14, r21
    2c70:	51 e0       	ldi	r21, 0x01	; 1
    2c72:	f5 2e       	mov	r15, r21
    2c74:	cc 24       	eor	r12, r12
    2c76:	aa 24       	eor	r10, r10
    2c78:	bb 24       	eor	r11, r11
    2c7a:	88 24       	eor	r8, r8
    2c7c:	83 94       	inc	r8
    2c7e:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <STEPPER_move>
    2c82:	8d b7       	in	r24, 0x3d	; 61
    2c84:	9e b7       	in	r25, 0x3e	; 62
    2c86:	09 96       	adiw	r24, 0x09	; 9
    2c88:	0f b6       	in	r0, 0x3f	; 63
    2c8a:	f8 94       	cli
    2c8c:	9e bf       	out	0x3e, r25	; 62
    2c8e:	0f be       	out	0x3f, r0	; 63
    2c90:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    2c92:	82 2d       	mov	r24, r2
    2c94:	1f 91       	pop	r17
    2c96:	0f 91       	pop	r16
    2c98:	ff 90       	pop	r15
    2c9a:	ef 90       	pop	r14
    2c9c:	df 90       	pop	r13
    2c9e:	cf 90       	pop	r12
    2ca0:	bf 90       	pop	r11
    2ca2:	af 90       	pop	r10
    2ca4:	9f 90       	pop	r9
    2ca6:	8f 90       	pop	r8
    2ca8:	7f 90       	pop	r7
    2caa:	6f 90       	pop	r6
    2cac:	5f 90       	pop	r5
    2cae:	4f 90       	pop	r4
    2cb0:	3f 90       	pop	r3
    2cb2:	2f 90       	pop	r2
    2cb4:	08 95       	ret

00002cb6 <shiftMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    shifts the map after robot moves
********************************************************************/
void shiftMap( void )
{		
    2cb6:	ff 92       	push	r15
    2cb8:	0f 93       	push	r16
    2cba:	1f 93       	push	r17
	// Get the currrent location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    2cbc:	80 91 2e 07 	lds	r24, 0x072E
    2cc0:	08 2f       	mov	r16, r24
    2cc2:	06 95       	lsr	r16
    2cc4:	06 95       	lsr	r16
	unsigned char curCol = currentCellWorld & 0b0011;
    2cc6:	e3 e0       	ldi	r30, 0x03	; 3
    2cc8:	fe 2e       	mov	r15, r30
    2cca:	f8 22       	and	r15, r24
		
	// Git the currrent orientation of the robot
	unsigned char curOrient = currentOrientation;
    2ccc:	10 91 2d 06 	lds	r17, 0x062D
			
		
	switch(currentMove){
    2cd0:	80 91 c7 07 	lds	r24, 0x07C7
    2cd4:	82 30       	cpi	r24, 0x02	; 2
    2cd6:	31 f0       	breq	.+12     	; 0x2ce4 <shiftMap+0x2e>
    2cd8:	83 30       	cpi	r24, 0x03	; 3
    2cda:	a9 f0       	breq	.+42     	; 0x2d06 <shiftMap+0x50>
    2cdc:	81 30       	cpi	r24, 0x01	; 1
    2cde:	b1 f4       	brne	.+44     	; 0x2d0c <shiftMap+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    2ce0:	11 50       	subi	r17, 0x01	; 1
    2ce2:	12 c0       	rjmp	.+36     	; 0x2d08 <shiftMap+0x52>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    2ce4:	11 30       	cpi	r17, 0x01	; 1
    2ce6:	49 f0       	breq	.+18     	; 0x2cfa <shiftMap+0x44>
    2ce8:	11 30       	cpi	r17, 0x01	; 1
    2cea:	28 f0       	brcs	.+10     	; 0x2cf6 <shiftMap+0x40>
    2cec:	12 30       	cpi	r17, 0x02	; 2
    2cee:	39 f0       	breq	.+14     	; 0x2cfe <shiftMap+0x48>
    2cf0:	13 30       	cpi	r17, 0x03	; 3
    2cf2:	b9 f4       	brne	.+46     	; 0x2d22 <shiftMap+0x6c>
    2cf4:	06 c0       	rjmp	.+12     	; 0x2d02 <shiftMap+0x4c>
				case NORTH:
					curRow -= 1;
    2cf6:	01 50       	subi	r16, 0x01	; 1
    2cf8:	14 c0       	rjmp	.+40     	; 0x2d22 <shiftMap+0x6c>
					break;
				case EAST:
					curCol += 1;
    2cfa:	f3 94       	inc	r15
    2cfc:	12 c0       	rjmp	.+36     	; 0x2d22 <shiftMap+0x6c>
					break;
				case SOUTH:
					curRow += 1;					
    2cfe:	0f 5f       	subi	r16, 0xFF	; 255
    2d00:	10 c0       	rjmp	.+32     	; 0x2d22 <shiftMap+0x6c>
					break;
				case WEST:
					curCol -= 1;					
    2d02:	fa 94       	dec	r15
    2d04:	0e c0       	rjmp	.+28     	; 0x2d22 <shiftMap+0x6c>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    2d06:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    2d08:	13 70       	andi	r17, 0x03	; 3
    2d0a:	0b c0       	rjmp	.+22     	; 0x2d22 <shiftMap+0x6c>
			break;
		default:
			LCD_printf("Whatz3?!");
    2d0c:	00 d0       	rcall	.+0      	; 0x2d0e <shiftMap+0x58>
    2d0e:	84 e4       	ldi	r24, 0x44	; 68
    2d10:	91 e0       	ldi	r25, 0x01	; 1
    2d12:	ed b7       	in	r30, 0x3d	; 61
    2d14:	fe b7       	in	r31, 0x3e	; 62
    2d16:	92 83       	std	Z+2, r25	; 0x02
    2d18:	81 83       	std	Z+1, r24	; 0x01
    2d1a:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
    2d1e:	0f 90       	pop	r0
    2d20:	0f 90       	pop	r0
			break;
	}
	
	// Set the new cell of the robot
	currentCellWorld = (curRow << 2) + curCol;
    2d22:	00 0f       	add	r16, r16
    2d24:	00 0f       	add	r16, r16
    2d26:	0f 0d       	add	r16, r15
    2d28:	00 93 2e 07 	sts	0x072E, r16
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    2d2c:	10 93 2d 06 	sts	0x062D, r17
}
    2d30:	1f 91       	pop	r17
    2d32:	0f 91       	pop	r16
    2d34:	ff 90       	pop	r15
    2d36:	08 95       	ret

00002d38 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    2d38:	80 91 99 05 	lds	r24, 0x0599
    2d3c:	80 fd       	sbrc	r24, 0
    2d3e:	02 c0       	rjmp	.+4      	; 0x2d44 <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	05 c0       	rjmp	.+10     	; 0x2d4e <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    2d44:	83 fd       	sbrc	r24, 3
    2d46:	02 c0       	rjmp	.+4      	; 0x2d4c <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    2d48:	82 e0       	ldi	r24, 0x02	; 2
    2d4a:	01 c0       	rjmp	.+2      	; 0x2d4e <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    2d4c:	83 e0       	ldi	r24, 0x03	; 3
    2d4e:	80 93 c7 07 	sts	0x07C7, r24
	}
	
	switch(oldMove){
    2d52:	80 91 c8 07 	lds	r24, 0x07C8
    2d56:	81 30       	cpi	r24, 0x01	; 1
    2d58:	29 f0       	breq	.+10     	; 0x2d64 <planMap+0x2c>
    2d5a:	81 30       	cpi	r24, 0x01	; 1
    2d5c:	38 f0       	brcs	.+14     	; 0x2d6c <planMap+0x34>
    2d5e:	84 30       	cpi	r24, 0x04	; 4
    2d60:	28 f4       	brcc	.+10     	; 0x2d6c <planMap+0x34>
    2d62:	0f c0       	rjmp	.+30     	; 0x2d82 <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    2d64:	82 e0       	ldi	r24, 0x02	; 2
    2d66:	80 93 c7 07 	sts	0x07C7, r24
    2d6a:	0b c0       	rjmp	.+22     	; 0x2d82 <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    2d6c:	00 d0       	rcall	.+0      	; 0x2d6e <planMap+0x36>
    2d6e:	8d e4       	ldi	r24, 0x4D	; 77
    2d70:	91 e0       	ldi	r25, 0x01	; 1
    2d72:	ed b7       	in	r30, 0x3d	; 61
    2d74:	fe b7       	in	r31, 0x3e	; 62
    2d76:	92 83       	std	Z+2, r25	; 0x02
    2d78:	81 83       	std	Z+1, r24	; 0x01
    2d7a:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    2d82:	80 91 c7 07 	lds	r24, 0x07C7
    2d86:	80 93 c8 07 	sts	0x07C8, r24
}
    2d8a:	08 95       	ret

00002d8c <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    2d8c:	8f 92       	push	r8
    2d8e:	af 92       	push	r10
    2d90:	bf 92       	push	r11
    2d92:	cf 92       	push	r12
    2d94:	df 92       	push	r13
    2d96:	ef 92       	push	r14
    2d98:	ff 92       	push	r15
    2d9a:	0f 93       	push	r16
    2d9c:	1f 93       	push	r17
	LCD_clear();
    2d9e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    2da2:	e0 91 9a 05 	lds	r30, 0x059A
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	e4 5e       	subi	r30, 0xE4	; 228
    2daa:	f9 4f       	sbci	r31, 0xF9	; 249
    2dac:	e0 81       	ld	r30, Z
    2dae:	e0 93 c7 07 	sts	0x07C7, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    2db2:	80 e0       	ldi	r24, 0x00	; 0
    2db4:	e1 30       	cpi	r30, 0x01	; 1
    2db6:	09 f4       	brne	.+2      	; 0x2dba <moveWorld+0x2e>
    2db8:	81 e0       	ldi	r24, 0x01	; 1
    2dba:	90 e0       	ldi	r25, 0x00	; 0
    2dbc:	e3 30       	cpi	r30, 0x03	; 3
    2dbe:	09 f4       	brne	.+2      	; 0x2dc2 <moveWorld+0x36>
    2dc0:	91 e0       	ldi	r25, 0x01	; 1
    2dc2:	89 2b       	or	r24, r25
    2dc4:	28 2f       	mov	r18, r24
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	40 e0       	ldi	r20, 0x00	; 0
    2dca:	50 e0       	ldi	r21, 0x00	; 0
    2dcc:	80 91 c8 07 	lds	r24, 0x07C8
    2dd0:	82 30       	cpi	r24, 0x02	; 2
    2dd2:	11 f4       	brne	.+4      	; 0x2dd8 <moveWorld+0x4c>
    2dd4:	41 e0       	ldi	r20, 0x01	; 1
    2dd6:	50 e0       	ldi	r21, 0x00	; 0
    2dd8:	24 23       	and	r18, r20
    2dda:	35 23       	and	r19, r21
    2ddc:	23 2b       	or	r18, r19
    2dde:	b9 f0       	breq	.+46     	; 0x2e0e <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.5/5.0), 10, 10, 0);		
    2de0:	60 e0       	ldi	r22, 0x00	; 0
    2de2:	70 e0       	ldi	r23, 0x00	; 0
    2de4:	80 e0       	ldi	r24, 0x00	; 0
    2de6:	9f e4       	ldi	r25, 0x4F	; 79
    2de8:	28 e4       	ldi	r18, 0x48	; 72
    2dea:	31 ee       	ldi	r19, 0xE1	; 225
    2dec:	46 eb       	ldi	r20, 0xB6	; 182
    2dee:	51 e4       	ldi	r21, 0x41	; 65
    2df0:	0f 2e       	mov	r0, r31
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	ef 2e       	mov	r14, r31
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	ff 2e       	mov	r15, r31
    2dfa:	f0 e2       	ldi	r31, 0x20	; 32
    2dfc:	0f 2f       	mov	r16, r31
    2dfe:	f1 e4       	ldi	r31, 0x41	; 65
    2e00:	1f 2f       	mov	r17, r31
    2e02:	f0 2d       	mov	r31, r0
    2e04:	57 01       	movw	r10, r14
    2e06:	68 01       	movw	r12, r16
    2e08:	88 24       	eor	r8, r8
    2e0a:	0e 94 bd 0c 	call	0x197a	; 0x197a <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    2e0e:	20 91 c8 07 	lds	r18, 0x07C8
    2e12:	80 e0       	ldi	r24, 0x00	; 0
    2e14:	21 30       	cpi	r18, 0x01	; 1
    2e16:	09 f4       	brne	.+2      	; 0x2e1a <moveWorld+0x8e>
    2e18:	81 e0       	ldi	r24, 0x01	; 1
    2e1a:	90 e0       	ldi	r25, 0x00	; 0
    2e1c:	23 30       	cpi	r18, 0x03	; 3
    2e1e:	09 f4       	brne	.+2      	; 0x2e22 <moveWorld+0x96>
    2e20:	91 e0       	ldi	r25, 0x01	; 1
    2e22:	89 2b       	or	r24, r25
    2e24:	28 2f       	mov	r18, r24
    2e26:	30 e0       	ldi	r19, 0x00	; 0
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	50 e0       	ldi	r21, 0x00	; 0
    2e2c:	80 91 c7 07 	lds	r24, 0x07C7
    2e30:	82 30       	cpi	r24, 0x02	; 2
    2e32:	11 f4       	brne	.+4      	; 0x2e38 <moveWorld+0xac>
    2e34:	41 e0       	ldi	r20, 0x01	; 1
    2e36:	50 e0       	ldi	r21, 0x00	; 0
    2e38:	24 23       	and	r18, r20
    2e3a:	35 23       	and	r19, r21
    2e3c:	23 2b       	or	r18, r19
    2e3e:	b9 f0       	breq	.+46     	; 0x2e6e <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.2/5.0), 10, 10, 0);		
    2e40:	60 e0       	ldi	r22, 0x00	; 0
    2e42:	70 e0       	ldi	r23, 0x00	; 0
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	9f e4       	ldi	r25, 0x4F	; 79
    2e48:	25 e3       	ldi	r18, 0x35	; 53
    2e4a:	3f ee       	ldi	r19, 0xEF	; 239
    2e4c:	40 ea       	ldi	r20, 0xA0	; 160
    2e4e:	51 e4       	ldi	r21, 0x41	; 65
    2e50:	0f 2e       	mov	r0, r31
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	ef 2e       	mov	r14, r31
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	ff 2e       	mov	r15, r31
    2e5a:	f0 e2       	ldi	r31, 0x20	; 32
    2e5c:	0f 2f       	mov	r16, r31
    2e5e:	f1 e4       	ldi	r31, 0x41	; 65
    2e60:	1f 2f       	mov	r17, r31
    2e62:	f0 2d       	mov	r31, r0
    2e64:	57 01       	movw	r10, r14
    2e66:	68 01       	movw	r12, r16
    2e68:	88 24       	eor	r8, r8
    2e6a:	0e 94 bd 0c 	call	0x197a	; 0x197a <move_arc_stwt>
	}
	
	switch(currentMove){
    2e6e:	80 91 c7 07 	lds	r24, 0x07C7
    2e72:	82 30       	cpi	r24, 0x02	; 2
    2e74:	c1 f1       	breq	.+112    	; 0x2ee6 <moveWorld+0x15a>
    2e76:	83 30       	cpi	r24, 0x03	; 3
    2e78:	09 f4       	brne	.+2      	; 0x2e7c <moveWorld+0xf0>
    2e7a:	61 c0       	rjmp	.+194    	; 0x2f3e <moveWorld+0x1b2>
    2e7c:	81 30       	cpi	r24, 0x01	; 1
    2e7e:	09 f0       	breq	.+2      	; 0x2e82 <moveWorld+0xf6>
    2e80:	9f c0       	rjmp	.+318    	; 0x2fc0 <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2e82:	8d b7       	in	r24, 0x3d	; 61
    2e84:	9e b7       	in	r25, 0x3e	; 62
    2e86:	08 97       	sbiw	r24, 0x08	; 8
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	9e bf       	out	0x3e, r25	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	8d bf       	out	0x3d, r24	; 61
    2e92:	ed b7       	in	r30, 0x3d	; 61
    2e94:	fe b7       	in	r31, 0x3e	; 62
    2e96:	31 96       	adiw	r30, 0x01	; 1
    2e98:	86 e5       	ldi	r24, 0x56	; 86
    2e9a:	91 e0       	ldi	r25, 0x01	; 1
    2e9c:	ad b7       	in	r26, 0x3d	; 61
    2e9e:	be b7       	in	r27, 0x3e	; 62
    2ea0:	12 96       	adiw	r26, 0x02	; 2
    2ea2:	9c 93       	st	X, r25
    2ea4:	8e 93       	st	-X, r24
    2ea6:	11 97       	sbiw	r26, 0x01	; 1
    2ea8:	80 91 9a 05 	lds	r24, 0x059A
    2eac:	82 83       	std	Z+2, r24	; 0x02
    2eae:	13 82       	std	Z+3, r1	; 0x03
    2eb0:	80 91 99 05 	lds	r24, 0x0599
    2eb4:	84 83       	std	Z+4, r24	; 0x04
    2eb6:	15 82       	std	Z+5, r1	; 0x05
    2eb8:	80 91 9f 05 	lds	r24, 0x059F
    2ebc:	86 83       	std	Z+6, r24	; 0x06
    2ebe:	17 82       	std	Z+7, r1	; 0x07
    2ec0:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2ec4:	ed b7       	in	r30, 0x3d	; 61
    2ec6:	fe b7       	in	r31, 0x3e	; 62
    2ec8:	38 96       	adiw	r30, 0x08	; 8
    2eca:	0f b6       	in	r0, 0x3f	; 63
    2ecc:	f8 94       	cli
    2ece:	fe bf       	out	0x3e, r31	; 62
    2ed0:	0f be       	out	0x3f, r0	; 63
    2ed2:	ed bf       	out	0x3d, r30	; 61
    2ed4:	60 e0       	ldi	r22, 0x00	; 0
    2ed6:	70 e0       	ldi	r23, 0x00	; 0
    2ed8:	80 e0       	ldi	r24, 0x00	; 0
    2eda:	90 e0       	ldi	r25, 0x00	; 0
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	4c e8       	ldi	r20, 0x8C	; 140
    2ee2:	51 ec       	ldi	r21, 0xC1	; 193
    2ee4:	5d c0       	rjmp	.+186    	; 0x2fa0 <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2ee6:	8d b7       	in	r24, 0x3d	; 61
    2ee8:	9e b7       	in	r25, 0x3e	; 62
    2eea:	08 97       	sbiw	r24, 0x08	; 8
    2eec:	0f b6       	in	r0, 0x3f	; 63
    2eee:	f8 94       	cli
    2ef0:	9e bf       	out	0x3e, r25	; 62
    2ef2:	0f be       	out	0x3f, r0	; 63
    2ef4:	8d bf       	out	0x3d, r24	; 61
    2ef6:	ed b7       	in	r30, 0x3d	; 61
    2ef8:	fe b7       	in	r31, 0x3e	; 62
    2efa:	31 96       	adiw	r30, 0x01	; 1
    2efc:	81 e8       	ldi	r24, 0x81	; 129
    2efe:	91 e0       	ldi	r25, 0x01	; 1
    2f00:	ad b7       	in	r26, 0x3d	; 61
    2f02:	be b7       	in	r27, 0x3e	; 62
    2f04:	12 96       	adiw	r26, 0x02	; 2
    2f06:	9c 93       	st	X, r25
    2f08:	8e 93       	st	-X, r24
    2f0a:	11 97       	sbiw	r26, 0x01	; 1
    2f0c:	80 91 9a 05 	lds	r24, 0x059A
    2f10:	82 83       	std	Z+2, r24	; 0x02
    2f12:	13 82       	std	Z+3, r1	; 0x03
    2f14:	80 91 99 05 	lds	r24, 0x0599
    2f18:	84 83       	std	Z+4, r24	; 0x04
    2f1a:	15 82       	std	Z+5, r1	; 0x05
    2f1c:	80 91 9f 05 	lds	r24, 0x059F
    2f20:	86 83       	std	Z+6, r24	; 0x06
    2f22:	17 82       	std	Z+7, r1	; 0x07
    2f24:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWallOld();
    2f28:	ed b7       	in	r30, 0x3d	; 61
    2f2a:	fe b7       	in	r31, 0x3e	; 62
    2f2c:	38 96       	adiw	r30, 0x08	; 8
    2f2e:	0f b6       	in	r0, 0x3f	; 63
    2f30:	f8 94       	cli
    2f32:	fe bf       	out	0x3e, r31	; 62
    2f34:	0f be       	out	0x3f, r0	; 63
    2f36:	ed bf       	out	0x3d, r30	; 61
    2f38:	0e 94 8d 12 	call	0x251a	; 0x251a <moveWallOld>
    2f3c:	53 c0       	rjmp	.+166    	; 0x2fe4 <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    2f3e:	8d b7       	in	r24, 0x3d	; 61
    2f40:	9e b7       	in	r25, 0x3e	; 62
    2f42:	08 97       	sbiw	r24, 0x08	; 8
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	9e bf       	out	0x3e, r25	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	8d bf       	out	0x3d, r24	; 61
    2f4e:	ed b7       	in	r30, 0x3d	; 61
    2f50:	fe b7       	in	r31, 0x3e	; 62
    2f52:	31 96       	adiw	r30, 0x01	; 1
    2f54:	8f ea       	ldi	r24, 0xAF	; 175
    2f56:	91 e0       	ldi	r25, 0x01	; 1
    2f58:	ad b7       	in	r26, 0x3d	; 61
    2f5a:	be b7       	in	r27, 0x3e	; 62
    2f5c:	12 96       	adiw	r26, 0x02	; 2
    2f5e:	9c 93       	st	X, r25
    2f60:	8e 93       	st	-X, r24
    2f62:	11 97       	sbiw	r26, 0x01	; 1
    2f64:	80 91 9a 05 	lds	r24, 0x059A
    2f68:	82 83       	std	Z+2, r24	; 0x02
    2f6a:	13 82       	std	Z+3, r1	; 0x03
    2f6c:	80 91 99 05 	lds	r24, 0x0599
    2f70:	84 83       	std	Z+4, r24	; 0x04
    2f72:	15 82       	std	Z+5, r1	; 0x05
    2f74:	80 91 9f 05 	lds	r24, 0x059F
    2f78:	86 83       	std	Z+6, r24	; 0x06
    2f7a:	17 82       	std	Z+7, r1	; 0x07
    2f7c:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2f80:	ed b7       	in	r30, 0x3d	; 61
    2f82:	fe b7       	in	r31, 0x3e	; 62
    2f84:	38 96       	adiw	r30, 0x08	; 8
    2f86:	0f b6       	in	r0, 0x3f	; 63
    2f88:	f8 94       	cli
    2f8a:	fe bf       	out	0x3e, r31	; 62
    2f8c:	0f be       	out	0x3f, r0	; 63
    2f8e:	ed bf       	out	0x3d, r30	; 61
    2f90:	60 e0       	ldi	r22, 0x00	; 0
    2f92:	70 e0       	ldi	r23, 0x00	; 0
    2f94:	80 e0       	ldi	r24, 0x00	; 0
    2f96:	90 e0       	ldi	r25, 0x00	; 0
    2f98:	20 e0       	ldi	r18, 0x00	; 0
    2f9a:	30 e0       	ldi	r19, 0x00	; 0
    2f9c:	4c e8       	ldi	r20, 0x8C	; 140
    2f9e:	51 e4       	ldi	r21, 0x41	; 65
    2fa0:	0f 2e       	mov	r0, r31
    2fa2:	f0 e0       	ldi	r31, 0x00	; 0
    2fa4:	ef 2e       	mov	r14, r31
    2fa6:	f0 e0       	ldi	r31, 0x00	; 0
    2fa8:	ff 2e       	mov	r15, r31
    2faa:	f0 e2       	ldi	r31, 0x20	; 32
    2fac:	0f 2f       	mov	r16, r31
    2fae:	f1 e4       	ldi	r31, 0x41	; 65
    2fb0:	1f 2f       	mov	r17, r31
    2fb2:	f0 2d       	mov	r31, r0
    2fb4:	57 01       	movw	r10, r14
    2fb6:	68 01       	movw	r12, r16
    2fb8:	88 24       	eor	r8, r8
    2fba:	0e 94 bd 0c 	call	0x197a	; 0x197a <move_arc_stwt>
    2fbe:	12 c0       	rjmp	.+36     	; 0x2fe4 <moveWorld+0x258>
			break;
		default:
			LCD_printf("Whatz4?!");
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <moveWorld+0x236>
    2fc2:	8b ed       	ldi	r24, 0xDB	; 219
    2fc4:	91 e0       	ldi	r25, 0x01	; 1
    2fc6:	ad b7       	in	r26, 0x3d	; 61
    2fc8:	be b7       	in	r27, 0x3e	; 62
    2fca:	12 96       	adiw	r26, 0x02	; 2
    2fcc:	9c 93       	st	X, r25
    2fce:	8e 93       	st	-X, r24
    2fd0:	11 97       	sbiw	r26, 0x01	; 1
    2fd2:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    2fd6:	0f 90       	pop	r0
    2fd8:	0f 90       	pop	r0
    2fda:	82 e0       	ldi	r24, 0x02	; 2
    2fdc:	60 e0       	ldi	r22, 0x00	; 0
    2fde:	0e 94 ad 21 	call	0x435a	; 0x435a <STEPPER_stop>
    2fe2:	ff cf       	rjmp	.-2      	; 0x2fe2 <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    2fe4:	80 91 c7 07 	lds	r24, 0x07C7
    2fe8:	80 93 c8 07 	sts	0x07C8, r24
	return 1;
}
    2fec:	81 e0       	ldi	r24, 0x01	; 1
    2fee:	1f 91       	pop	r17
    2ff0:	0f 91       	pop	r16
    2ff2:	ff 90       	pop	r15
    2ff4:	ef 90       	pop	r14
    2ff6:	df 90       	pop	r13
    2ff8:	cf 90       	pop	r12
    2ffa:	bf 90       	pop	r11
    2ffc:	af 90       	pop	r10
    2ffe:	8f 90       	pop	r8
    3000:	08 95       	ret

00003002 <moveBehavior>:
	// if(moveAway()){
		// Ierror = 0;
		// return 1; 
	// }
	
	if(moveWorld()){
    3002:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <moveWorld>
    3006:	88 23       	and	r24, r24
    3008:	69 f0       	breq	.+26     	; 0x3024 <moveBehavior+0x22>
		Ierror = 0;
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	a0 e0       	ldi	r26, 0x00	; 0
    3010:	b0 e0       	ldi	r27, 0x00	; 0
    3012:	80 93 95 05 	sts	0x0595, r24
    3016:	90 93 96 05 	sts	0x0596, r25
    301a:	a0 93 97 05 	sts	0x0597, r26
    301e:	b0 93 98 05 	sts	0x0598, r27
    3022:	81 e0       	ldi	r24, 0x01	; 1
		return 1; 
	}
	return 0;	
}
    3024:	08 95       	ret

00003026 <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	ff 24       	eor	r15, r15
    3032:	f3 94       	inc	r15
    3034:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    3036:	c4 ee       	ldi	r28, 0xE4	; 228
    3038:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    303a:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    303e:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    3040:	81 30       	cpi	r24, 0x01	; 1
    3042:	21 f0       	breq	.+8      	; 0x304c <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    3044:	82 30       	cpi	r24, 0x02	; 2
    3046:	11 f0       	breq	.+4      	; 0x304c <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    3048:	83 30       	cpi	r24, 0x03	; 3
    304a:	39 f4       	brne	.+14     	; 0x305a <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    304c:	e1 2f       	mov	r30, r17
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	e4 5e       	subi	r30, 0xE4	; 228
    3052:	f9 4f       	sbci	r31, 0xF9	; 249
    3054:	00 83       	st	Z, r16
			i++;
    3056:	1f 5f       	subi	r17, 0xFF	; 255
    3058:	02 c0       	rjmp	.+4      	; 0x305e <movesInput+0x38>
		}

		if (btnHolder != 0){
    305a:	88 23       	and	r24, r24
    305c:	21 f1       	breq	.+72     	; 0x30a6 <movesInput+0x80>
			LCD_clear();
    305e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    3062:	8d b7       	in	r24, 0x3d	; 61
    3064:	9e b7       	in	r25, 0x3e	; 62
    3066:	08 97       	sbiw	r24, 0x08	; 8
    3068:	0f b6       	in	r0, 0x3f	; 63
    306a:	f8 94       	cli
    306c:	9e bf       	out	0x3e, r25	; 62
    306e:	0f be       	out	0x3f, r0	; 63
    3070:	8d bf       	out	0x3d, r24	; 61
    3072:	ed b7       	in	r30, 0x3d	; 61
    3074:	fe b7       	in	r31, 0x3e	; 62
    3076:	31 96       	adiw	r30, 0x01	; 1
    3078:	ad b7       	in	r26, 0x3d	; 61
    307a:	be b7       	in	r27, 0x3e	; 62
    307c:	12 96       	adiw	r26, 0x02	; 2
    307e:	dc 93       	st	X, r29
    3080:	ce 93       	st	-X, r28
    3082:	11 97       	sbiw	r26, 0x01	; 1
    3084:	f2 82       	std	Z+2, r15	; 0x02
    3086:	13 82       	std	Z+3, r1	; 0x03
    3088:	04 83       	std	Z+4, r16	; 0x04
    308a:	15 82       	std	Z+5, r1	; 0x05
    308c:	16 83       	std	Z+6, r17	; 0x06
    308e:	17 82       	std	Z+7, r1	; 0x07
    3090:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
    3094:	f0 2e       	mov	r15, r16
    3096:	8d b7       	in	r24, 0x3d	; 61
    3098:	9e b7       	in	r25, 0x3e	; 62
    309a:	08 96       	adiw	r24, 0x08	; 8
    309c:	0f b6       	in	r0, 0x3f	; 63
    309e:	f8 94       	cli
    30a0:	9e bf       	out	0x3e, r25	; 62
    30a2:	0f be       	out	0x3f, r0	; 63
    30a4:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    30a6:	84 ef       	ldi	r24, 0xF4	; 244
    30a8:	91 e0       	ldi	r25, 0x01	; 1
    30aa:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    30ae:	1b 30       	cpi	r17, 0x0B	; 11
    30b0:	20 f2       	brcs	.-120    	; 0x303a <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    30b2:	1f 5f       	subi	r17, 0xFF	; 255
    30b4:	e1 2f       	mov	r30, r17
    30b6:	f0 e0       	ldi	r31, 0x00	; 0
    30b8:	e4 5e       	subi	r30, 0xE4	; 228
    30ba:	f9 4f       	sbci	r31, 0xF9	; 249
    30bc:	84 e0       	ldi	r24, 0x04	; 4
    30be:	80 83       	st	Z, r24
}
    30c0:	df 91       	pop	r29
    30c2:	cf 91       	pop	r28
    30c4:	1f 91       	pop	r17
    30c6:	0f 91       	pop	r16
    30c8:	ff 90       	pop	r15
    30ca:	08 95       	ret

000030cc <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    30cc:	1f 93       	push	r17
    30ce:	cf 93       	push	r28
    30d0:	df 93       	push	r29
    30d2:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    30d4:	c5 e1       	ldi	r28, 0x15	; 21
    30d6:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    30d8:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    30dc:	81 30       	cpi	r24, 0x01	; 1
    30de:	21 f4       	brne	.+8      	; 0x30e8 <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    30e0:	80 91 2e 07 	lds	r24, 0x072E
    30e4:	88 0f       	add	r24, r24
    30e6:	06 c0       	rjmp	.+12     	; 0x30f4 <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    30e8:	82 30       	cpi	r24, 0x02	; 2
    30ea:	39 f4       	brne	.+14     	; 0x30fa <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    30ec:	80 91 2e 07 	lds	r24, 0x072E
    30f0:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    30f2:	8f 5f       	subi	r24, 0xFF	; 255
    30f4:	80 93 2e 07 	sts	0x072E, r24
			i++;
    30f8:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    30fa:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    30fe:	00 d0       	rcall	.+0      	; 0x3100 <worldInput+0x34>
    3100:	00 d0       	rcall	.+0      	; 0x3102 <worldInput+0x36>
    3102:	00 d0       	rcall	.+0      	; 0x3104 <worldInput+0x38>
    3104:	ed b7       	in	r30, 0x3d	; 61
    3106:	fe b7       	in	r31, 0x3e	; 62
    3108:	31 96       	adiw	r30, 0x01	; 1
    310a:	ad b7       	in	r26, 0x3d	; 61
    310c:	be b7       	in	r27, 0x3e	; 62
    310e:	12 96       	adiw	r26, 0x02	; 2
    3110:	dc 93       	st	X, r29
    3112:	ce 93       	st	-X, r28
    3114:	11 97       	sbiw	r26, 0x01	; 1
    3116:	80 91 2e 07 	lds	r24, 0x072E
    311a:	82 83       	std	Z+2, r24	; 0x02
    311c:	13 82       	std	Z+3, r1	; 0x03
    311e:	14 83       	std	Z+4, r17	; 0x04
    3120:	15 82       	std	Z+5, r1	; 0x05
    3122:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    3126:	8d b7       	in	r24, 0x3d	; 61
    3128:	9e b7       	in	r25, 0x3e	; 62
    312a:	06 96       	adiw	r24, 0x06	; 6
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	9e bf       	out	0x3e, r25	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	8d bf       	out	0x3d, r24	; 61
    3136:	84 ef       	ldi	r24, 0xF4	; 244
    3138:	91 e0       	ldi	r25, 0x01	; 1
    313a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    313e:	14 30       	cpi	r17, 0x04	; 4
    3140:	58 f2       	brcs	.-106    	; 0x30d8 <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    3142:	80 91 2e 07 	lds	r24, 0x072E
    3146:	80 93 2f 07 	sts	0x072F, r24
}
    314a:	df 91       	pop	r29
    314c:	cf 91       	pop	r28
    314e:	1f 91       	pop	r17
    3150:	08 95       	ret

00003152 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    3152:	1f 93       	push	r17
    3154:	cf 93       	push	r28
    3156:	df 93       	push	r29
    3158:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    315a:	cd e3       	ldi	r28, 0x3D	; 61
    315c:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    315e:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    3162:	81 30       	cpi	r24, 0x01	; 1
    3164:	21 f4       	brne	.+8      	; 0x316e <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    3166:	80 91 2d 06 	lds	r24, 0x062D
    316a:	88 0f       	add	r24, r24
    316c:	06 c0       	rjmp	.+12     	; 0x317a <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    316e:	82 30       	cpi	r24, 0x02	; 2
    3170:	41 f4       	brne	.+16     	; 0x3182 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    3172:	80 91 2d 06 	lds	r24, 0x062D
    3176:	88 0f       	add	r24, r24
			currentOrientation += 1;
    3178:	8f 5f       	subi	r24, 0xFF	; 255
    317a:	80 93 2d 06 	sts	0x062D, r24
			i++;
    317e:	1f 5f       	subi	r17, 0xFF	; 255
    3180:	02 c0       	rjmp	.+4      	; 0x3186 <orientationInput+0x34>
		}

		if (btnHolder != 0){
    3182:	88 23       	and	r24, r24
    3184:	f1 f0       	breq	.+60     	; 0x31c2 <orientationInput+0x70>
			LCD_clear();
    3186:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    318a:	00 d0       	rcall	.+0      	; 0x318c <orientationInput+0x3a>
    318c:	00 d0       	rcall	.+0      	; 0x318e <orientationInput+0x3c>
    318e:	00 d0       	rcall	.+0      	; 0x3190 <orientationInput+0x3e>
    3190:	ed b7       	in	r30, 0x3d	; 61
    3192:	fe b7       	in	r31, 0x3e	; 62
    3194:	31 96       	adiw	r30, 0x01	; 1
    3196:	ad b7       	in	r26, 0x3d	; 61
    3198:	be b7       	in	r27, 0x3e	; 62
    319a:	12 96       	adiw	r26, 0x02	; 2
    319c:	dc 93       	st	X, r29
    319e:	ce 93       	st	-X, r28
    31a0:	11 97       	sbiw	r26, 0x01	; 1
    31a2:	80 91 2d 06 	lds	r24, 0x062D
    31a6:	82 83       	std	Z+2, r24	; 0x02
    31a8:	13 82       	std	Z+3, r1	; 0x03
    31aa:	14 83       	std	Z+4, r17	; 0x04
    31ac:	15 82       	std	Z+5, r1	; 0x05
    31ae:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
    31b2:	8d b7       	in	r24, 0x3d	; 61
    31b4:	9e b7       	in	r25, 0x3e	; 62
    31b6:	06 96       	adiw	r24, 0x06	; 6
    31b8:	0f b6       	in	r0, 0x3f	; 63
    31ba:	f8 94       	cli
    31bc:	9e bf       	out	0x3e, r25	; 62
    31be:	0f be       	out	0x3f, r0	; 63
    31c0:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    31c2:	84 ef       	ldi	r24, 0xF4	; 244
    31c4:	91 e0       	ldi	r25, 0x01	; 1
    31c6:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    31ca:	12 30       	cpi	r17, 0x02	; 2
    31cc:	40 f2       	brcs	.-112    	; 0x315e <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    31ce:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	switch(currentOrientation){
    31d2:	80 91 2d 06 	lds	r24, 0x062D
    31d6:	81 30       	cpi	r24, 0x01	; 1
    31d8:	51 f0       	breq	.+20     	; 0x31ee <orientationInput+0x9c>
    31da:	81 30       	cpi	r24, 0x01	; 1
    31dc:	28 f0       	brcs	.+10     	; 0x31e8 <orientationInput+0x96>
    31de:	82 30       	cpi	r24, 0x02	; 2
    31e0:	49 f0       	breq	.+18     	; 0x31f4 <orientationInput+0xa2>
    31e2:	83 30       	cpi	r24, 0x03	; 3
    31e4:	71 f4       	brne	.+28     	; 0x3202 <orientationInput+0xb0>
    31e6:	09 c0       	rjmp	.+18     	; 0x31fa <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    31e8:	8c e6       	ldi	r24, 0x6C	; 108
    31ea:	92 e0       	ldi	r25, 0x02	; 2
    31ec:	08 c0       	rjmp	.+16     	; 0x31fe <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    31ee:	8e e8       	ldi	r24, 0x8E	; 142
    31f0:	92 e0       	ldi	r25, 0x02	; 2
    31f2:	05 c0       	rjmp	.+10     	; 0x31fe <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    31f4:	8f ea       	ldi	r24, 0xAF	; 175
    31f6:	92 e0       	ldi	r25, 0x02	; 2
    31f8:	02 c0       	rjmp	.+4      	; 0x31fe <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    31fa:	81 ed       	ldi	r24, 0xD1	; 209
    31fc:	92 e0       	ldi	r25, 0x02	; 2
    31fe:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    3202:	80 91 2d 06 	lds	r24, 0x062D
    3206:	80 93 2c 06 	sts	0x062C, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    320a:	84 ef       	ldi	r24, 0xF4	; 244
    320c:	91 e0       	ldi	r25, 0x01	; 1
    320e:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
}
    3212:	df 91       	pop	r29
    3214:	cf 91       	pop	r28
    3216:	1f 91       	pop	r17
    3218:	08 95       	ret

0000321a <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    321a:	cf 92       	push	r12
    321c:	df 92       	push	r13
    321e:	ef 92       	push	r14
    3220:	ff 92       	push	r15
    3222:	0f 93       	push	r16
    3224:	1f 93       	push	r17
    3226:	df 93       	push	r29
    3228:	cf 93       	push	r28
    322a:	0f 92       	push	r0
    322c:	cd b7       	in	r28, 0x3d	; 61
    322e:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    3230:	80 91 2e 07 	lds	r24, 0x072E
    3234:	f8 2e       	mov	r15, r24
    3236:	f6 94       	lsr	r15
    3238:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    323a:	98 2f       	mov	r25, r24
    323c:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    323e:	00 91 2d 06 	lds	r16, 0x062D
    3242:	cc 24       	eor	r12, r12
    3244:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    3246:	f6 01       	movw	r30, r12
    3248:	e4 5e       	subi	r30, 0xE4	; 228
    324a:	f9 4f       	sbci	r31, 0xF9	; 249
    324c:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    324e:	ef 2d       	mov	r30, r15
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	ee 0f       	add	r30, r30
    3254:	ff 1f       	adc	r31, r31
    3256:	ee 0f       	add	r30, r30
    3258:	ff 1f       	adc	r31, r31
    325a:	e9 0f       	add	r30, r25
    325c:	f1 1d       	adc	r31, r1
    325e:	e7 5d       	subi	r30, 0xD7	; 215
    3260:	fb 4f       	sbci	r31, 0xFB	; 251
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    3262:	80 81       	ld	r24, Z
    3264:	60 2f       	mov	r22, r16
    3266:	41 e0       	ldi	r20, 0x01	; 1
    3268:	99 83       	std	Y+1, r25	; 0x01
    326a:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    326e:	f6 01       	movw	r30, r12
    3270:	ed 54       	subi	r30, 0x4D	; 77
    3272:	f8 4f       	sbci	r31, 0xF8	; 248
    3274:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    3276:	99 81       	ldd	r25, Y+1	; 0x01
    3278:	12 30       	cpi	r17, 0x02	; 2
    327a:	89 f4       	brne	.+34     	; 0x329e <getGateways+0x84>
			switch(curOrient){
    327c:	01 30       	cpi	r16, 0x01	; 1
    327e:	49 f0       	breq	.+18     	; 0x3292 <getGateways+0x78>
    3280:	01 30       	cpi	r16, 0x01	; 1
    3282:	28 f0       	brcs	.+10     	; 0x328e <getGateways+0x74>
    3284:	02 30       	cpi	r16, 0x02	; 2
    3286:	39 f0       	breq	.+14     	; 0x3296 <getGateways+0x7c>
    3288:	03 30       	cpi	r16, 0x03	; 3
    328a:	89 f4       	brne	.+34     	; 0x32ae <getGateways+0x94>
    328c:	06 c0       	rjmp	.+12     	; 0x329a <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    328e:	fa 94       	dec	r15
    3290:	0e c0       	rjmp	.+28     	; 0x32ae <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    3292:	9f 5f       	subi	r25, 0xFF	; 255
    3294:	0c c0       	rjmp	.+24     	; 0x32ae <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    3296:	f3 94       	inc	r15
    3298:	0a c0       	rjmp	.+20     	; 0x32ae <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    329a:	91 50       	subi	r25, 0x01	; 1
    329c:	08 c0       	rjmp	.+16     	; 0x32ae <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    329e:	13 30       	cpi	r17, 0x03	; 3
    32a0:	11 f4       	brne	.+4      	; 0x32a6 <getGateways+0x8c>
			curOrient++;
    32a2:	0f 5f       	subi	r16, 0xFF	; 255
    32a4:	03 c0       	rjmp	.+6      	; 0x32ac <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    32a6:	11 30       	cpi	r17, 0x01	; 1
    32a8:	11 f4       	brne	.+4      	; 0x32ae <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    32aa:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    32ac:	03 70       	andi	r16, 0x03	; 3
    32ae:	08 94       	sec
    32b0:	c1 1c       	adc	r12, r1
    32b2:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    32b4:	8d e0       	ldi	r24, 0x0D	; 13
    32b6:	c8 16       	cp	r12, r24
    32b8:	d1 04       	cpc	r13, r1
    32ba:	29 f6       	brne	.-118    	; 0x3246 <getGateways+0x2c>
    32bc:	cc 24       	eor	r12, r12
    32be:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    32c0:	72 ef       	ldi	r23, 0xF2	; 242
    32c2:	e7 2e       	mov	r14, r23
    32c4:	72 e0       	ldi	r23, 0x02	; 2
    32c6:	f7 2e       	mov	r15, r23
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    32c8:	f6 01       	movw	r30, r12
    32ca:	ed 54       	subi	r30, 0x4D	; 77
    32cc:	f8 4f       	sbci	r31, 0xF8	; 248
    32ce:	00 81       	ld	r16, Z
		LCD_clear();
    32d0:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    32d4:	20 2f       	mov	r18, r16
    32d6:	30 e0       	ldi	r19, 0x00	; 0
    32d8:	ad b7       	in	r26, 0x3d	; 61
    32da:	be b7       	in	r27, 0x3e	; 62
    32dc:	54 97       	sbiw	r26, 0x14	; 20
    32de:	0f b6       	in	r0, 0x3f	; 63
    32e0:	f8 94       	cli
    32e2:	be bf       	out	0x3e, r27	; 62
    32e4:	0f be       	out	0x3f, r0	; 63
    32e6:	ad bf       	out	0x3d, r26	; 61
    32e8:	ed b7       	in	r30, 0x3d	; 61
    32ea:	fe b7       	in	r31, 0x3e	; 62
    32ec:	31 96       	adiw	r30, 0x01	; 1
    32ee:	12 96       	adiw	r26, 0x02	; 2
    32f0:	fc 92       	st	X, r15
    32f2:	ee 92       	st	-X, r14
    32f4:	11 97       	sbiw	r26, 0x01	; 1
    32f6:	d3 82       	std	Z+3, r13	; 0x03
    32f8:	c2 82       	std	Z+2, r12	; 0x02
    32fa:	11 27       	eor	r17, r17
    32fc:	07 fd       	sbrc	r16, 7
    32fe:	10 95       	com	r17
    3300:	00 27       	eor	r16, r16
    3302:	11 0f       	add	r17, r17
    3304:	00 1f       	adc	r16, r16
    3306:	11 27       	eor	r17, r17
    3308:	15 83       	std	Z+5, r17	; 0x05
    330a:	04 83       	std	Z+4, r16	; 0x04
    330c:	c9 01       	movw	r24, r18
    330e:	56 e0       	ldi	r21, 0x06	; 6
    3310:	96 95       	lsr	r25
    3312:	87 95       	ror	r24
    3314:	5a 95       	dec	r21
    3316:	e1 f7       	brne	.-8      	; 0x3310 <getGateways+0xf6>
    3318:	81 70       	andi	r24, 0x01	; 1
    331a:	90 70       	andi	r25, 0x00	; 0
    331c:	97 83       	std	Z+7, r25	; 0x07
    331e:	86 83       	std	Z+6, r24	; 0x06
    3320:	c9 01       	movw	r24, r18
    3322:	45 e0       	ldi	r20, 0x05	; 5
    3324:	96 95       	lsr	r25
    3326:	87 95       	ror	r24
    3328:	4a 95       	dec	r20
    332a:	e1 f7       	brne	.-8      	; 0x3324 <getGateways+0x10a>
    332c:	81 70       	andi	r24, 0x01	; 1
    332e:	90 70       	andi	r25, 0x00	; 0
    3330:	91 87       	std	Z+9, r25	; 0x09
    3332:	80 87       	std	Z+8, r24	; 0x08
    3334:	c9 01       	movw	r24, r18
    3336:	04 e0       	ldi	r16, 0x04	; 4
    3338:	96 95       	lsr	r25
    333a:	87 95       	ror	r24
    333c:	0a 95       	dec	r16
    333e:	e1 f7       	brne	.-8      	; 0x3338 <getGateways+0x11e>
    3340:	81 70       	andi	r24, 0x01	; 1
    3342:	90 70       	andi	r25, 0x00	; 0
    3344:	93 87       	std	Z+11, r25	; 0x0b
    3346:	82 87       	std	Z+10, r24	; 0x0a
    3348:	c9 01       	movw	r24, r18
    334a:	13 e0       	ldi	r17, 0x03	; 3
    334c:	96 95       	lsr	r25
    334e:	87 95       	ror	r24
    3350:	1a 95       	dec	r17
    3352:	e1 f7       	brne	.-8      	; 0x334c <getGateways+0x132>
    3354:	81 70       	andi	r24, 0x01	; 1
    3356:	90 70       	andi	r25, 0x00	; 0
    3358:	95 87       	std	Z+13, r25	; 0x0d
    335a:	84 87       	std	Z+12, r24	; 0x0c
    335c:	c9 01       	movw	r24, r18
    335e:	96 95       	lsr	r25
    3360:	87 95       	ror	r24
    3362:	96 95       	lsr	r25
    3364:	87 95       	ror	r24
    3366:	81 70       	andi	r24, 0x01	; 1
    3368:	90 70       	andi	r25, 0x00	; 0
    336a:	97 87       	std	Z+15, r25	; 0x0f
    336c:	86 87       	std	Z+14, r24	; 0x0e
    336e:	c9 01       	movw	r24, r18
    3370:	96 95       	lsr	r25
    3372:	87 95       	ror	r24
    3374:	81 70       	andi	r24, 0x01	; 1
    3376:	90 70       	andi	r25, 0x00	; 0
    3378:	91 8b       	std	Z+17, r25	; 0x11
    337a:	80 8b       	std	Z+16, r24	; 0x10
    337c:	21 70       	andi	r18, 0x01	; 1
    337e:	30 70       	andi	r19, 0x00	; 0
    3380:	33 8b       	std	Z+19, r19	; 0x13
    3382:	22 8b       	std	Z+18, r18	; 0x12
    3384:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
		TMRSRVC_delay(1000);//wait 1 second
    3388:	ed b7       	in	r30, 0x3d	; 61
    338a:	fe b7       	in	r31, 0x3e	; 62
    338c:	74 96       	adiw	r30, 0x14	; 20
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	fe bf       	out	0x3e, r31	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	ed bf       	out	0x3d, r30	; 61
    3398:	88 ee       	ldi	r24, 0xE8	; 232
    339a:	93 e0       	ldi	r25, 0x03	; 3
    339c:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
    33a0:	08 94       	sec
    33a2:	c1 1c       	adc	r12, r1
    33a4:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    33a6:	fd e0       	ldi	r31, 0x0D	; 13
    33a8:	cf 16       	cp	r12, r31
    33aa:	d1 04       	cpc	r13, r1
    33ac:	09 f0       	breq	.+2      	; 0x33b0 <getGateways+0x196>
    33ae:	8c cf       	rjmp	.-232    	; 0x32c8 <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    33b0:	0f 90       	pop	r0
    33b2:	cf 91       	pop	r28
    33b4:	df 91       	pop	r29
    33b6:	1f 91       	pop	r17
    33b8:	0f 91       	pop	r16
    33ba:	ff 90       	pop	r15
    33bc:	ef 90       	pop	r14
    33be:	df 90       	pop	r13
    33c0:	cf 90       	pop	r12
    33c2:	08 95       	ret

000033c4 <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    33c4:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    33c6:	10 91 2e 07 	lds	r17, 0x072E
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    33ca:	80 91 99 05 	lds	r24, 0x0599
    33ce:	60 91 2d 06 	lds	r22, 0x062D
    33d2:	40 e0       	ldi	r20, 0x00	; 0
    33d4:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    33d8:	e1 2f       	mov	r30, r17
    33da:	e6 95       	lsr	r30
    33dc:	e6 95       	lsr	r30
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	ee 0f       	add	r30, r30
    33e2:	ff 1f       	adc	r31, r31
    33e4:	ee 0f       	add	r30, r30
    33e6:	ff 1f       	adc	r31, r31
    33e8:	13 70       	andi	r17, 0x03	; 3
    33ea:	e1 0f       	add	r30, r17
    33ec:	f1 1d       	adc	r31, r1
    33ee:	e7 5d       	subi	r30, 0xD7	; 215
    33f0:	fb 4f       	sbci	r31, 0xFB	; 251
    33f2:	80 83       	st	Z, r24
}
    33f4:	1f 91       	pop	r17
    33f6:	08 95       	ret

000033f8 <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    33f8:	8f 92       	push	r8
    33fa:	af 92       	push	r10
    33fc:	bf 92       	push	r11
    33fe:	cf 92       	push	r12
    3400:	df 92       	push	r13
    3402:	ef 92       	push	r14
    3404:	ff 92       	push	r15
    3406:	0f 93       	push	r16
    3408:	1f 93       	push	r17
	switch(currentMove){
    340a:	80 91 c7 07 	lds	r24, 0x07C7
    340e:	82 30       	cpi	r24, 0x02	; 2
    3410:	69 f0       	breq	.+26     	; 0x342c <moveMap+0x34>
    3412:	83 30       	cpi	r24, 0x03	; 3
    3414:	b9 f0       	breq	.+46     	; 0x3444 <moveMap+0x4c>
    3416:	81 30       	cpi	r24, 0x01	; 1
    3418:	69 f5       	brne	.+90     	; 0x3474 <moveMap+0x7c>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    341a:	60 e0       	ldi	r22, 0x00	; 0
    341c:	70 e0       	ldi	r23, 0x00	; 0
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	20 e0       	ldi	r18, 0x00	; 0
    3424:	30 e0       	ldi	r19, 0x00	; 0
    3426:	4c e8       	ldi	r20, 0x8C	; 140
    3428:	51 ec       	ldi	r21, 0xC1	; 193
    342a:	14 c0       	rjmp	.+40     	; 0x3454 <moveMap+0x5c>
			break;
		case MOVE_FORWARD:
			checkOdometry(1);
    342c:	81 e0       	ldi	r24, 0x01	; 1
    342e:	03 c0       	rjmp	.+6      	; 0x3436 <moveMap+0x3e>
			while(!odometryFlag){
				moveWall();
    3430:	0e 94 0e 14 	call	0x281c	; 0x281c <moveWall>
				checkOdometry(0);
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	0e 94 75 11 	call	0x22ea	; 0x22ea <checkOdometry>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
			break;
		case MOVE_FORWARD:
			checkOdometry(1);
			while(!odometryFlag){
    343a:	80 91 36 07 	lds	r24, 0x0736
    343e:	88 23       	and	r24, r24
    3440:	b9 f3       	breq	.-18     	; 0x3430 <moveMap+0x38>
    3442:	23 c0       	rjmp	.+70     	; 0x348a <moveMap+0x92>
				moveWall();
				checkOdometry(0);
			}
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    3444:	60 e0       	ldi	r22, 0x00	; 0
    3446:	70 e0       	ldi	r23, 0x00	; 0
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	30 e0       	ldi	r19, 0x00	; 0
    3450:	4c e8       	ldi	r20, 0x8C	; 140
    3452:	51 e4       	ldi	r21, 0x41	; 65
    3454:	0f 2e       	mov	r0, r31
    3456:	f0 e0       	ldi	r31, 0x00	; 0
    3458:	ef 2e       	mov	r14, r31
    345a:	f0 e0       	ldi	r31, 0x00	; 0
    345c:	ff 2e       	mov	r15, r31
    345e:	f0 e2       	ldi	r31, 0x20	; 32
    3460:	0f 2f       	mov	r16, r31
    3462:	f1 e4       	ldi	r31, 0x41	; 65
    3464:	1f 2f       	mov	r17, r31
    3466:	f0 2d       	mov	r31, r0
    3468:	57 01       	movw	r10, r14
    346a:	68 01       	movw	r12, r16
    346c:	88 24       	eor	r8, r8
    346e:	0e 94 bd 0c 	call	0x197a	; 0x197a <move_arc_stwt>
    3472:	0b c0       	rjmp	.+22     	; 0x348a <moveMap+0x92>
			break;
		default:
			LCD_printf("Whatz2?!");
    3474:	00 d0       	rcall	.+0      	; 0x3476 <moveMap+0x7e>
    3476:	84 e1       	ldi	r24, 0x14	; 20
    3478:	93 e0       	ldi	r25, 0x03	; 3
    347a:	ed b7       	in	r30, 0x3d	; 61
    347c:	fe b7       	in	r31, 0x3e	; 62
    347e:	92 83       	std	Z+2, r25	; 0x02
    3480:	81 83       	std	Z+1, r24	; 0x01
    3482:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
    3486:	0f 90       	pop	r0
    3488:	0f 90       	pop	r0
			break;
	}
}
    348a:	1f 91       	pop	r17
    348c:	0f 91       	pop	r16
    348e:	ff 90       	pop	r15
    3490:	ef 90       	pop	r14
    3492:	df 90       	pop	r13
    3494:	cf 90       	pop	r12
    3496:	bf 90       	pop	r11
    3498:	af 90       	pop	r10
    349a:	8f 90       	pop	r8
    349c:	08 95       	ret

0000349e <CBOT_main>:
/*******************************************************************
* Function:        void CBOT_main( void )
********************************************************************/

void CBOT_main( void )
{
    349e:	cf 92       	push	r12
    34a0:	df 92       	push	r13
    34a2:	ff 92       	push	r15
    34a4:	0f 93       	push	r16
    34a6:	1f 93       	push	r17
    34a8:	cf 93       	push	r28
    34aa:	df 93       	push	r29
	// initialize the robot
	initializeRobot();
    34ac:	0e 94 d7 11 	call	0x23ae	; 0x23ae <initializeRobot>
	
	checkOdometry(1);
    34b0:	81 e0       	ldi	r24, 0x01	; 1
    34b2:	0e 94 75 11 	call	0x22ea	; 0x22ea <checkOdometry>
	// while(1){}
	
		
	
	
	LCD_printf("      New Map\n\n\n\n");	
    34b6:	8d e1       	ldi	r24, 0x1D	; 29
    34b8:	93 e0       	ldi	r25, 0x03	; 3
    34ba:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
	printMap();
    34be:	0e 94 30 11 	call	0x2260	; 0x2260 <printMap>
	TMRSRVC_delay(10000);//wait 1 seconds
    34c2:	80 e1       	ldi	r24, 0x10	; 16
    34c4:	97 e2       	ldi	r25, 0x27	; 39
    34c6:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();	
    34ca:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	
	// Enter the robot's current (starting) position
	LCD_printf("START Map/nlocation\n\n\n");	
    34ce:	8e e2       	ldi	r24, 0x2E	; 46
    34d0:	93 e0       	ldi	r25, 0x03	; 3
    34d2:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    34d6:	88 ee       	ldi	r24, 0xE8	; 232
    34d8:	93 e0       	ldi	r25, 0x03	; 3
    34da:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    34de:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	worldInput();
    34e2:	0e 94 66 18 	call	0x30cc	; 0x30cc <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    34e6:	88 ee       	ldi	r24, 0xE8	; 232
    34e8:	93 e0       	ldi	r25, 0x03	; 3
    34ea:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    34ee:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Map/norientation\n\n\n");	
    34f2:	84 e4       	ldi	r24, 0x44	; 68
    34f4:	93 e0       	ldi	r25, 0x03	; 3
    34f6:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    34fa:	88 ee       	ldi	r24, 0xE8	; 232
    34fc:	93 e0       	ldi	r25, 0x03	; 3
    34fe:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    3502:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	orientationInput();
    3506:	0e 94 a9 18 	call	0x3152	; 0x3152 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    350a:	88 ee       	ldi	r24, 0xE8	; 232
    350c:	93 e0       	ldi	r25, 0x03	; 3
    350e:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    3512:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	
	isMapping = 0;
    3516:	10 92 c9 07 	sts	0x07C9, r1
	
	
	LCD_printf("      Your Map\n\n\n\n");	
    351a:	8d e5       	ldi	r24, 0x5D	; 93
    351c:	93 e0       	ldi	r25, 0x03	; 3
    351e:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
	printMap();
    3522:	0e 94 30 11 	call	0x2260	; 0x2260 <printMap>
	TMRSRVC_delay(1000);//wait 1 seconds
    3526:	88 ee       	ldi	r24, 0xE8	; 232
    3528:	93 e0       	ldi	r25, 0x03	; 3
    352a:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();	
    352e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
		
		//Shift the Map
		shiftMap();
		
		//Break?
		isMapping = ((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
    3532:	ff 24       	eor	r15, r15
    3534:	f3 94       	inc	r15
			break;
		}
		
		//Print Map
		LCD_clear();
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    3536:	ee e7       	ldi	r30, 0x7E	; 126
    3538:	ce 2e       	mov	r12, r30
    353a:	e3 e0       	ldi	r30, 0x03	; 3
    353c:	de 2e       	mov	r13, r30
    353e:	2e c1       	rjmp	.+604    	; 0x379c <CBOT_main+0x2fe>
	LCD_clear();	
		
	while(!isMapping)
	{	
		//Sense
		checkIR();	
    3540:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <checkIR>
		checkWorld();
    3544:	0e 94 21 12 	call	0x2442	; 0x2442 <checkWorld>
		
		//Record
		setGateways();
    3548:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <setGateways>
				
		//Plan using the Map
		planMap();
    354c:	0e 94 9c 16 	call	0x2d38	; 0x2d38 <planMap>
		
		//Act on the Map
		moveMap();
    3550:	0e 94 fc 19 	call	0x33f8	; 0x33f8 <moveMap>
		
		//Shift the Map
		shiftMap();
    3554:	0e 94 5b 16 	call	0x2cb6	; 0x2cb6 <shiftMap>
		
		//Break?
		isMapping = ((currentCellWorldStart == currentCellWorld)&&(currentOrientationStart == currentOrientation));
    3558:	90 91 2f 07 	lds	r25, 0x072F
    355c:	80 91 2e 07 	lds	r24, 0x072E
    3560:	98 17       	cp	r25, r24
    3562:	19 f0       	breq	.+6      	; 0x356a <CBOT_main+0xcc>
    3564:	80 e0       	ldi	r24, 0x00	; 0
    3566:	90 e0       	ldi	r25, 0x00	; 0
    3568:	09 c0       	rjmp	.+18     	; 0x357c <CBOT_main+0xde>
    356a:	20 e0       	ldi	r18, 0x00	; 0
    356c:	90 91 2c 06 	lds	r25, 0x062C
    3570:	80 91 2d 06 	lds	r24, 0x062D
    3574:	98 13       	cpse	r25, r24
    3576:	21 e0       	ldi	r18, 0x01	; 1
    3578:	2f 25       	eor	r18, r15
    357a:	82 2f       	mov	r24, r18
    357c:	80 93 c9 07 	sts	0x07C9, r24
		if(isMapping){			
    3580:	88 23       	and	r24, r24
    3582:	91 f0       	breq	.+36     	; 0x35a8 <CBOT_main+0x10a>
			LCD_clear();
    3584:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
			LCD_printf("LOLZ\nI'm done!");
    3588:	00 d0       	rcall	.+0      	; 0x358a <CBOT_main+0xec>
    358a:	8f e6       	ldi	r24, 0x6F	; 111
    358c:	93 e0       	ldi	r25, 0x03	; 3
    358e:	cd b7       	in	r28, 0x3d	; 61
    3590:	de b7       	in	r29, 0x3e	; 62
    3592:	9a 83       	std	Y+2, r25	; 0x02
    3594:	89 83       	std	Y+1, r24	; 0x01
    3596:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
			TMRSRVC_delay(3000);//wait 3 seconds
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	88 eb       	ldi	r24, 0xB8	; 184
    35a0:	9b e0       	ldi	r25, 0x0B	; 11
    35a2:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
    35a6:	ff c0       	rjmp	.+510    	; 0x37a6 <CBOT_main+0x308>
			break;
		}
		
		//Print Map
		LCD_clear();
    35a8:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
		LCD_printf("      Move"BYTETOBINARYPATTERN"\n      Cell"BYTETOBINARYPATTERN"\n      Ornt"BYTETOBINARYPATTERN"\n\n",BYTETOBINARY(currentMove),BYTETOBINARY(currentCellWorld),BYTETOBINARY(currentOrientation));
    35ac:	80 91 c7 07 	lds	r24, 0x07C7
    35b0:	28 2f       	mov	r18, r24
    35b2:	30 e0       	ldi	r19, 0x00	; 0
    35b4:	60 91 2e 07 	lds	r22, 0x072E
    35b8:	46 2f       	mov	r20, r22
    35ba:	50 e0       	ldi	r21, 0x00	; 0
    35bc:	00 91 2d 06 	lds	r16, 0x062D
    35c0:	a0 2f       	mov	r26, r16
    35c2:	b0 e0       	ldi	r27, 0x00	; 0
    35c4:	ed b7       	in	r30, 0x3d	; 61
    35c6:	fe b7       	in	r31, 0x3e	; 62
    35c8:	f2 97       	sbiw	r30, 0x32	; 50
    35ca:	0f b6       	in	r0, 0x3f	; 63
    35cc:	f8 94       	cli
    35ce:	fe bf       	out	0x3e, r31	; 62
    35d0:	0f be       	out	0x3f, r0	; 63
    35d2:	ed bf       	out	0x3d, r30	; 61
    35d4:	31 96       	adiw	r30, 0x01	; 1
    35d6:	cd b7       	in	r28, 0x3d	; 61
    35d8:	de b7       	in	r29, 0x3e	; 62
    35da:	da 82       	std	Y+2, r13	; 0x02
    35dc:	c9 82       	std	Y+1, r12	; 0x01
    35de:	99 27       	eor	r25, r25
    35e0:	87 fd       	sbrc	r24, 7
    35e2:	90 95       	com	r25
    35e4:	88 27       	eor	r24, r24
    35e6:	99 0f       	add	r25, r25
    35e8:	88 1f       	adc	r24, r24
    35ea:	99 27       	eor	r25, r25
    35ec:	93 83       	std	Z+3, r25	; 0x03
    35ee:	82 83       	std	Z+2, r24	; 0x02
    35f0:	c9 01       	movw	r24, r18
    35f2:	16 e0       	ldi	r17, 0x06	; 6
    35f4:	96 95       	lsr	r25
    35f6:	87 95       	ror	r24
    35f8:	1a 95       	dec	r17
    35fa:	e1 f7       	brne	.-8      	; 0x35f4 <CBOT_main+0x156>
    35fc:	81 70       	andi	r24, 0x01	; 1
    35fe:	90 70       	andi	r25, 0x00	; 0
    3600:	95 83       	std	Z+5, r25	; 0x05
    3602:	84 83       	std	Z+4, r24	; 0x04
    3604:	c9 01       	movw	r24, r18
    3606:	75 e0       	ldi	r23, 0x05	; 5
    3608:	96 95       	lsr	r25
    360a:	87 95       	ror	r24
    360c:	7a 95       	dec	r23
    360e:	e1 f7       	brne	.-8      	; 0x3608 <CBOT_main+0x16a>
    3610:	81 70       	andi	r24, 0x01	; 1
    3612:	90 70       	andi	r25, 0x00	; 0
    3614:	97 83       	std	Z+7, r25	; 0x07
    3616:	86 83       	std	Z+6, r24	; 0x06
    3618:	c9 01       	movw	r24, r18
    361a:	14 e0       	ldi	r17, 0x04	; 4
    361c:	96 95       	lsr	r25
    361e:	87 95       	ror	r24
    3620:	1a 95       	dec	r17
    3622:	e1 f7       	brne	.-8      	; 0x361c <CBOT_main+0x17e>
    3624:	81 70       	andi	r24, 0x01	; 1
    3626:	90 70       	andi	r25, 0x00	; 0
    3628:	91 87       	std	Z+9, r25	; 0x09
    362a:	80 87       	std	Z+8, r24	; 0x08
    362c:	c9 01       	movw	r24, r18
    362e:	73 e0       	ldi	r23, 0x03	; 3
    3630:	96 95       	lsr	r25
    3632:	87 95       	ror	r24
    3634:	7a 95       	dec	r23
    3636:	e1 f7       	brne	.-8      	; 0x3630 <CBOT_main+0x192>
    3638:	81 70       	andi	r24, 0x01	; 1
    363a:	90 70       	andi	r25, 0x00	; 0
    363c:	93 87       	std	Z+11, r25	; 0x0b
    363e:	82 87       	std	Z+10, r24	; 0x0a
    3640:	c9 01       	movw	r24, r18
    3642:	96 95       	lsr	r25
    3644:	87 95       	ror	r24
    3646:	96 95       	lsr	r25
    3648:	87 95       	ror	r24
    364a:	81 70       	andi	r24, 0x01	; 1
    364c:	90 70       	andi	r25, 0x00	; 0
    364e:	95 87       	std	Z+13, r25	; 0x0d
    3650:	84 87       	std	Z+12, r24	; 0x0c
    3652:	c9 01       	movw	r24, r18
    3654:	96 95       	lsr	r25
    3656:	87 95       	ror	r24
    3658:	81 70       	andi	r24, 0x01	; 1
    365a:	90 70       	andi	r25, 0x00	; 0
    365c:	97 87       	std	Z+15, r25	; 0x0f
    365e:	86 87       	std	Z+14, r24	; 0x0e
    3660:	21 70       	andi	r18, 0x01	; 1
    3662:	30 70       	andi	r19, 0x00	; 0
    3664:	31 8b       	std	Z+17, r19	; 0x11
    3666:	20 8b       	std	Z+16, r18	; 0x10
    3668:	77 27       	eor	r23, r23
    366a:	67 fd       	sbrc	r22, 7
    366c:	70 95       	com	r23
    366e:	66 27       	eor	r22, r22
    3670:	77 0f       	add	r23, r23
    3672:	66 1f       	adc	r22, r22
    3674:	77 27       	eor	r23, r23
    3676:	73 8b       	std	Z+19, r23	; 0x13
    3678:	62 8b       	std	Z+18, r22	; 0x12
    367a:	ca 01       	movw	r24, r20
    367c:	76 e0       	ldi	r23, 0x06	; 6
    367e:	96 95       	lsr	r25
    3680:	87 95       	ror	r24
    3682:	7a 95       	dec	r23
    3684:	e1 f7       	brne	.-8      	; 0x367e <CBOT_main+0x1e0>
    3686:	81 70       	andi	r24, 0x01	; 1
    3688:	90 70       	andi	r25, 0x00	; 0
    368a:	95 8b       	std	Z+21, r25	; 0x15
    368c:	84 8b       	std	Z+20, r24	; 0x14
    368e:	ca 01       	movw	r24, r20
    3690:	65 e0       	ldi	r22, 0x05	; 5
    3692:	96 95       	lsr	r25
    3694:	87 95       	ror	r24
    3696:	6a 95       	dec	r22
    3698:	e1 f7       	brne	.-8      	; 0x3692 <CBOT_main+0x1f4>
    369a:	81 70       	andi	r24, 0x01	; 1
    369c:	90 70       	andi	r25, 0x00	; 0
    369e:	97 8b       	std	Z+23, r25	; 0x17
    36a0:	86 8b       	std	Z+22, r24	; 0x16
    36a2:	ca 01       	movw	r24, r20
    36a4:	34 e0       	ldi	r19, 0x04	; 4
    36a6:	96 95       	lsr	r25
    36a8:	87 95       	ror	r24
    36aa:	3a 95       	dec	r19
    36ac:	e1 f7       	brne	.-8      	; 0x36a6 <CBOT_main+0x208>
    36ae:	81 70       	andi	r24, 0x01	; 1
    36b0:	90 70       	andi	r25, 0x00	; 0
    36b2:	91 8f       	std	Z+25, r25	; 0x19
    36b4:	80 8f       	std	Z+24, r24	; 0x18
    36b6:	ca 01       	movw	r24, r20
    36b8:	23 e0       	ldi	r18, 0x03	; 3
    36ba:	96 95       	lsr	r25
    36bc:	87 95       	ror	r24
    36be:	2a 95       	dec	r18
    36c0:	e1 f7       	brne	.-8      	; 0x36ba <CBOT_main+0x21c>
    36c2:	81 70       	andi	r24, 0x01	; 1
    36c4:	90 70       	andi	r25, 0x00	; 0
    36c6:	93 8f       	std	Z+27, r25	; 0x1b
    36c8:	82 8f       	std	Z+26, r24	; 0x1a
    36ca:	ca 01       	movw	r24, r20
    36cc:	96 95       	lsr	r25
    36ce:	87 95       	ror	r24
    36d0:	96 95       	lsr	r25
    36d2:	87 95       	ror	r24
    36d4:	81 70       	andi	r24, 0x01	; 1
    36d6:	90 70       	andi	r25, 0x00	; 0
    36d8:	95 8f       	std	Z+29, r25	; 0x1d
    36da:	84 8f       	std	Z+28, r24	; 0x1c
    36dc:	ca 01       	movw	r24, r20
    36de:	96 95       	lsr	r25
    36e0:	87 95       	ror	r24
    36e2:	81 70       	andi	r24, 0x01	; 1
    36e4:	90 70       	andi	r25, 0x00	; 0
    36e6:	97 8f       	std	Z+31, r25	; 0x1f
    36e8:	86 8f       	std	Z+30, r24	; 0x1e
    36ea:	41 70       	andi	r20, 0x01	; 1
    36ec:	50 70       	andi	r21, 0x00	; 0
    36ee:	51 a3       	std	Z+33, r21	; 0x21
    36f0:	40 a3       	std	Z+32, r20	; 0x20
    36f2:	11 27       	eor	r17, r17
    36f4:	07 fd       	sbrc	r16, 7
    36f6:	10 95       	com	r17
    36f8:	00 27       	eor	r16, r16
    36fa:	11 0f       	add	r17, r17
    36fc:	00 1f       	adc	r16, r16
    36fe:	11 27       	eor	r17, r17
    3700:	13 a3       	std	Z+35, r17	; 0x23
    3702:	02 a3       	std	Z+34, r16	; 0x22
    3704:	cd 01       	movw	r24, r26
    3706:	56 e0       	ldi	r21, 0x06	; 6
    3708:	96 95       	lsr	r25
    370a:	87 95       	ror	r24
    370c:	5a 95       	dec	r21
    370e:	e1 f7       	brne	.-8      	; 0x3708 <CBOT_main+0x26a>
    3710:	81 70       	andi	r24, 0x01	; 1
    3712:	90 70       	andi	r25, 0x00	; 0
    3714:	95 a3       	std	Z+37, r25	; 0x25
    3716:	84 a3       	std	Z+36, r24	; 0x24
    3718:	cd 01       	movw	r24, r26
    371a:	45 e0       	ldi	r20, 0x05	; 5
    371c:	96 95       	lsr	r25
    371e:	87 95       	ror	r24
    3720:	4a 95       	dec	r20
    3722:	e1 f7       	brne	.-8      	; 0x371c <CBOT_main+0x27e>
    3724:	81 70       	andi	r24, 0x01	; 1
    3726:	90 70       	andi	r25, 0x00	; 0
    3728:	97 a3       	std	Z+39, r25	; 0x27
    372a:	86 a3       	std	Z+38, r24	; 0x26
    372c:	cd 01       	movw	r24, r26
    372e:	34 e0       	ldi	r19, 0x04	; 4
    3730:	96 95       	lsr	r25
    3732:	87 95       	ror	r24
    3734:	3a 95       	dec	r19
    3736:	e1 f7       	brne	.-8      	; 0x3730 <CBOT_main+0x292>
    3738:	81 70       	andi	r24, 0x01	; 1
    373a:	90 70       	andi	r25, 0x00	; 0
    373c:	91 a7       	std	Z+41, r25	; 0x29
    373e:	80 a7       	std	Z+40, r24	; 0x28
    3740:	cd 01       	movw	r24, r26
    3742:	23 e0       	ldi	r18, 0x03	; 3
    3744:	96 95       	lsr	r25
    3746:	87 95       	ror	r24
    3748:	2a 95       	dec	r18
    374a:	e1 f7       	brne	.-8      	; 0x3744 <CBOT_main+0x2a6>
    374c:	81 70       	andi	r24, 0x01	; 1
    374e:	90 70       	andi	r25, 0x00	; 0
    3750:	93 a7       	std	Z+43, r25	; 0x2b
    3752:	82 a7       	std	Z+42, r24	; 0x2a
    3754:	cd 01       	movw	r24, r26
    3756:	96 95       	lsr	r25
    3758:	87 95       	ror	r24
    375a:	96 95       	lsr	r25
    375c:	87 95       	ror	r24
    375e:	81 70       	andi	r24, 0x01	; 1
    3760:	90 70       	andi	r25, 0x00	; 0
    3762:	95 a7       	std	Z+45, r25	; 0x2d
    3764:	84 a7       	std	Z+44, r24	; 0x2c
    3766:	cd 01       	movw	r24, r26
    3768:	96 95       	lsr	r25
    376a:	87 95       	ror	r24
    376c:	81 70       	andi	r24, 0x01	; 1
    376e:	90 70       	andi	r25, 0x00	; 0
    3770:	97 a7       	std	Z+47, r25	; 0x2f
    3772:	86 a7       	std	Z+46, r24	; 0x2e
    3774:	a1 70       	andi	r26, 0x01	; 1
    3776:	b0 70       	andi	r27, 0x00	; 0
    3778:	b1 ab       	std	Z+49, r27	; 0x31
    377a:	a0 ab       	std	Z+48, r26	; 0x30
    377c:	0e 94 92 39 	call	0x7324	; 0x7324 <printf>
		printMap();
    3780:	ed b7       	in	r30, 0x3d	; 61
    3782:	fe b7       	in	r31, 0x3e	; 62
    3784:	f2 96       	adiw	r30, 0x32	; 50
    3786:	0f b6       	in	r0, 0x3f	; 63
    3788:	f8 94       	cli
    378a:	fe bf       	out	0x3e, r31	; 62
    378c:	0f be       	out	0x3f, r0	; 63
    378e:	ed bf       	out	0x3d, r30	; 61
    3790:	0e 94 30 11 	call	0x2260	; 0x2260 <printMap>
		TMRSRVC_delay(500);//wait 3 seconds
    3794:	84 ef       	ldi	r24, 0xF4	; 244
    3796:	91 e0       	ldi	r25, 0x01	; 1
    3798:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_printf("      Your Map\n\n\n\n");	
	printMap();
	TMRSRVC_delay(1000);//wait 1 seconds
	LCD_clear();	
		
	while(!isMapping)
    379c:	80 91 c9 07 	lds	r24, 0x07C9
    37a0:	88 23       	and	r24, r24
    37a2:	09 f4       	brne	.+2      	; 0x37a6 <CBOT_main+0x308>
    37a4:	cd ce       	rjmp	.-614    	; 0x3540 <CBOT_main+0xa2>
		TMRSRVC_delay(500);//wait 3 seconds
	}
	
	
	// Print the map
	LCD_clear();	
    37a6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	printMap();
    37aa:	0e 94 30 11 	call	0x2260	; 0x2260 <printMap>
	TMRSRVC_delay(10000);//wait 10 seconds
    37ae:	80 e1       	ldi	r24, 0x10	; 16
    37b0:	97 e2       	ldi	r25, 0x27	; 39
    37b2:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();	
    37b6:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	
	// Enter the robot's current (starting) position
	LCD_printf("START Path\nlocation\n\n\n");	
    37ba:	81 ed       	ldi	r24, 0xD1	; 209
    37bc:	93 e0       	ldi	r25, 0x03	; 3
    37be:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    37c2:	88 ee       	ldi	r24, 0xE8	; 232
    37c4:	93 e0       	ldi	r25, 0x03	; 3
    37c6:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    37ca:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	worldInput();
    37ce:	0e 94 66 18 	call	0x30cc	; 0x30cc <worldInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    37d2:	88 ee       	ldi	r24, 0xE8	; 232
    37d4:	93 e0       	ldi	r25, 0x03	; 3
    37d6:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    37da:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	
	// Enter the robot's current (starting) orientation
	LCD_printf("START Path\norientation\n\n\n");
    37de:	87 ee       	ldi	r24, 0xE7	; 231
    37e0:	93 e0       	ldi	r25, 0x03	; 3
    37e2:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    37e6:	88 ee       	ldi	r24, 0xE8	; 232
    37e8:	93 e0       	ldi	r25, 0x03	; 3
    37ea:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    37ee:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	orientationInput();
    37f2:	0e 94 a9 18 	call	0x3152	; 0x3152 <orientationInput>
	TMRSRVC_delay(1000);//wait 3 seconds
    37f6:	88 ee       	ldi	r24, 0xE8	; 232
    37f8:	93 e0       	ldi	r25, 0x03	; 3
    37fa:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    37fe:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	
	// Enter the robot topological commands
	LCD_printf("ENTER Path\ncommands\n\n\n");
    3802:	80 e0       	ldi	r24, 0x00	; 0
    3804:	94 e0       	ldi	r25, 0x04	; 4
    3806:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    380a:	88 ee       	ldi	r24, 0xE8	; 232
    380c:	93 e0       	ldi	r25, 0x03	; 3
    380e:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    3812:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	movesInput();
    3816:	0e 94 13 18 	call	0x3026	; 0x3026 <movesInput>
	TMRSRVC_delay(1000);//wait 1 seconds
    381a:	88 ee       	ldi	r24, 0xE8	; 232
    381c:	93 e0       	ldi	r25, 0x03	; 3
    381e:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    3822:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	
	// Print the robot gateways
	LCD_printf("Robot Gateways:\n\n\n\n");
    3826:	86 e1       	ldi	r24, 0x16	; 22
    3828:	94 e0       	ldi	r25, 0x04	; 4
    382a:	0e 94 a4 39 	call	0x7348	; 0x7348 <puts>
	TMRSRVC_delay(1000);//wait 1 seconds
    382e:	88 ee       	ldi	r24, 0xE8	; 232
    3830:	93 e0       	ldi	r25, 0x03	; 3
    3832:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    3836:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
	getGateways();
    383a:	0e 94 0d 19 	call	0x321a	; 0x321a <getGateways>
	TMRSRVC_delay(1000);//wait 1 seconds
    383e:	88 ee       	ldi	r24, 0xE8	; 232
    3840:	93 e0       	ldi	r25, 0x03	; 3
    3842:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
	LCD_clear();
    3846:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
		
		
	// Infinite loop
	while (1)
    {
		checkIR();	
    384a:	0e 94 90 0f 	call	0x1f20	; 0x1f20 <checkIR>
		checkWorld();
    384e:	0e 94 21 12 	call	0x2442	; 0x2442 <checkWorld>
		moveWorld();
    3852:	0e 94 c6 16 	call	0x2d8c	; 0x2d8c <moveWorld>
    3856:	f9 cf       	rjmp	.-14     	; 0x384a <CBOT_main+0x3ac>

00003858 <ADC_open>:
    3858:	8f e0       	ldi	r24, 0x0F	; 15
    385a:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    385e:	88 23       	and	r24, r24
    3860:	31 f4       	brne	.+12     	; 0x386e <ADC_open+0x16>
    3862:	0e 94 af 24 	call	0x495e	; 0x495e <__ADC_init>
    3866:	8f e0       	ldi	r24, 0x0F	; 15
    3868:	61 e0       	ldi	r22, 0x01	; 1
    386a:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    386e:	8f e0       	ldi	r24, 0x0F	; 15
    3870:	91 e0       	ldi	r25, 0x01	; 1
    3872:	08 95       	ret

00003874 <ADC_sample>:
    3874:	8f e0       	ldi	r24, 0x0F	; 15
    3876:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    387a:	81 30       	cpi	r24, 0x01	; 1
    387c:	19 f0       	breq	.+6      	; 0x3884 <ADC_sample+0x10>
    387e:	20 e0       	ldi	r18, 0x00	; 0
    3880:	30 e0       	ldi	r19, 0x00	; 0
    3882:	13 c0       	rjmp	.+38     	; 0x38aa <ADC_sample+0x36>
    3884:	80 91 7a 00 	lds	r24, 0x007A
    3888:	80 64       	ori	r24, 0x40	; 64
    388a:	80 93 7a 00 	sts	0x007A, r24
    388e:	80 91 7a 00 	lds	r24, 0x007A
    3892:	86 fd       	sbrc	r24, 6
    3894:	fc cf       	rjmp	.-8      	; 0x388e <ADC_sample+0x1a>
    3896:	30 91 78 00 	lds	r19, 0x0078
    389a:	20 91 79 00 	lds	r18, 0x0079
    389e:	92 2f       	mov	r25, r18
    38a0:	80 e0       	ldi	r24, 0x00	; 0
    38a2:	23 2f       	mov	r18, r19
    38a4:	30 e0       	ldi	r19, 0x00	; 0
    38a6:	28 2b       	or	r18, r24
    38a8:	39 2b       	or	r19, r25
    38aa:	c9 01       	movw	r24, r18
    38ac:	08 95       	ret

000038ae <ADC_set_channel>:
    38ae:	58 2f       	mov	r21, r24
    38b0:	80 91 39 04 	lds	r24, 0x0439
    38b4:	88 30       	cpi	r24, 0x08	; 8
    38b6:	d8 f4       	brcc	.+54     	; 0x38ee <ADC_set_channel+0x40>
    38b8:	40 91 7e 00 	lds	r20, 0x007E
    38bc:	21 e0       	ldi	r18, 0x01	; 1
    38be:	30 e0       	ldi	r19, 0x00	; 0
    38c0:	b9 01       	movw	r22, r18
    38c2:	02 c0       	rjmp	.+4      	; 0x38c8 <ADC_set_channel+0x1a>
    38c4:	66 0f       	add	r22, r22
    38c6:	77 1f       	adc	r23, r23
    38c8:	8a 95       	dec	r24
    38ca:	e2 f7       	brpl	.-8      	; 0x38c4 <ADC_set_channel+0x16>
    38cc:	cb 01       	movw	r24, r22
    38ce:	80 95       	com	r24
    38d0:	84 23       	and	r24, r20
    38d2:	80 93 7e 00 	sts	0x007E, r24
    38d6:	80 91 7e 00 	lds	r24, 0x007E
    38da:	05 2e       	mov	r0, r21
    38dc:	02 c0       	rjmp	.+4      	; 0x38e2 <ADC_set_channel+0x34>
    38de:	22 0f       	add	r18, r18
    38e0:	33 1f       	adc	r19, r19
    38e2:	0a 94       	dec	r0
    38e4:	e2 f7       	brpl	.-8      	; 0x38de <ADC_set_channel+0x30>
    38e6:	82 2b       	or	r24, r18
    38e8:	80 93 7e 00 	sts	0x007E, r24
    38ec:	0d c0       	rjmp	.+26     	; 0x3908 <ADC_set_channel+0x5a>
    38ee:	20 91 7e 00 	lds	r18, 0x007E
    38f2:	81 e0       	ldi	r24, 0x01	; 1
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	05 2e       	mov	r0, r21
    38f8:	02 c0       	rjmp	.+4      	; 0x38fe <ADC_set_channel+0x50>
    38fa:	88 0f       	add	r24, r24
    38fc:	99 1f       	adc	r25, r25
    38fe:	0a 94       	dec	r0
    3900:	e2 f7       	brpl	.-8      	; 0x38fa <ADC_set_channel+0x4c>
    3902:	28 2b       	or	r18, r24
    3904:	20 93 7e 00 	sts	0x007E, r18
    3908:	50 93 39 04 	sts	0x0439, r21
    390c:	80 91 7c 00 	lds	r24, 0x007C
    3910:	5f 71       	andi	r21, 0x1F	; 31
    3912:	80 7e       	andi	r24, 0xE0	; 224
    3914:	85 2b       	or	r24, r21
    3916:	80 93 7c 00 	sts	0x007C, r24
    391a:	08 95       	ret

0000391c <ADC_set_VREF>:
    391c:	ec e7       	ldi	r30, 0x7C	; 124
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	90 81       	ld	r25, Z
    3922:	82 95       	swap	r24
    3924:	88 0f       	add	r24, r24
    3926:	88 0f       	add	r24, r24
    3928:	80 7c       	andi	r24, 0xC0	; 192
    392a:	9f 73       	andi	r25, 0x3F	; 63
    392c:	98 2b       	or	r25, r24
    392e:	90 83       	st	Z, r25
    3930:	08 95       	ret

00003932 <main>:
    3932:	0e 94 c8 24 	call	0x4990	; 0x4990 <CBOT_ISR_init>
    3936:	0e 94 ba 24 	call	0x4974	; 0x4974 <CBOT_init>
    393a:	0e 94 4f 1a 	call	0x349e	; 0x349e <CBOT_main>
    393e:	80 e0       	ldi	r24, 0x00	; 0
    3940:	90 e0       	ldi	r25, 0x00	; 0
    3942:	08 95       	ret

00003944 <LCD_clear>:
    3944:	0f 93       	push	r16
    3946:	1f 93       	push	r17
    3948:	80 e4       	ldi	r24, 0x40	; 64
    394a:	60 e0       	ldi	r22, 0x00	; 0
    394c:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    3950:	00 e0       	ldi	r16, 0x00	; 0
    3952:	80 2f       	mov	r24, r16
    3954:	60 e0       	ldi	r22, 0x00	; 0
    3956:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <LCD_set_PGC_addr>
    395a:	10 e0       	ldi	r17, 0x00	; 0
    395c:	80 e0       	ldi	r24, 0x00	; 0
    395e:	61 e0       	ldi	r22, 0x01	; 1
    3960:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    3964:	1f 5f       	subi	r17, 0xFF	; 255
    3966:	10 38       	cpi	r17, 0x80	; 128
    3968:	c9 f7       	brne	.-14     	; 0x395c <LCD_clear+0x18>
    396a:	0f 5f       	subi	r16, 0xFF	; 255
    396c:	04 30       	cpi	r16, 0x04	; 4
    396e:	89 f7       	brne	.-30     	; 0x3952 <LCD_clear+0xe>
    3970:	83 e0       	ldi	r24, 0x03	; 3
    3972:	60 e0       	ldi	r22, 0x00	; 0
    3974:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <LCD_set_next_PGC>
    3978:	1f 91       	pop	r17
    397a:	0f 91       	pop	r16
    397c:	08 95       	ret

0000397e <LCD_open>:
    397e:	0f 93       	push	r16
    3980:	1f 93       	push	r17
    3982:	82 e0       	ldi	r24, 0x02	; 2
    3984:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    3988:	88 23       	and	r24, r24
    398a:	11 f4       	brne	.+4      	; 0x3990 <LCD_open+0x12>
    398c:	82 e0       	ldi	r24, 0x02	; 2
    398e:	06 c0       	rjmp	.+12     	; 0x399c <LCD_open+0x1e>
    3990:	81 e0       	ldi	r24, 0x01	; 1
    3992:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    3996:	88 23       	and	r24, r24
    3998:	19 f4       	brne	.+6      	; 0x39a0 <LCD_open+0x22>
    399a:	81 e0       	ldi	r24, 0x01	; 1
    399c:	90 e0       	ldi	r25, 0x00	; 0
    399e:	6d c0       	rjmp	.+218    	; 0x3a7a <LCD_open+0xfc>
    39a0:	0e 94 30 27 	call	0x4e60	; 0x4e60 <__LCD_init>
    39a4:	85 e0       	ldi	r24, 0x05	; 5
    39a6:	61 e0       	ldi	r22, 0x01	; 1
    39a8:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    39ac:	8e ea       	ldi	r24, 0xAE	; 174
    39ae:	60 e0       	ldi	r22, 0x00	; 0
    39b0:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    39b4:	82 ea       	ldi	r24, 0xA2	; 162
    39b6:	60 e0       	ldi	r22, 0x00	; 0
    39b8:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    39bc:	80 ea       	ldi	r24, 0xA0	; 160
    39be:	60 e0       	ldi	r22, 0x00	; 0
    39c0:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    39c4:	00 e5       	ldi	r16, 0x50	; 80
    39c6:	13 ec       	ldi	r17, 0xC3	; 195
    39c8:	c8 01       	movw	r24, r16
    39ca:	01 97       	sbiw	r24, 0x01	; 1
    39cc:	f1 f7       	brne	.-4      	; 0x39ca <LCD_open+0x4c>
    39ce:	80 ec       	ldi	r24, 0xC0	; 192
    39d0:	60 e0       	ldi	r22, 0x00	; 0
    39d2:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    39d6:	8f e2       	ldi	r24, 0x2F	; 47
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    39de:	81 e8       	ldi	r24, 0x81	; 129
    39e0:	60 e0       	ldi	r22, 0x00	; 0
    39e2:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    39e6:	86 e1       	ldi	r24, 0x16	; 22
    39e8:	60 e0       	ldi	r22, 0x00	; 0
    39ea:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    39ee:	82 e2       	ldi	r24, 0x22	; 34
    39f0:	60 e0       	ldi	r22, 0x00	; 0
    39f2:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    39f6:	c8 01       	movw	r24, r16
    39f8:	01 97       	sbiw	r24, 0x01	; 1
    39fa:	f1 f7       	brne	.-4      	; 0x39f8 <LCD_open+0x7a>
    39fc:	8f ea       	ldi	r24, 0xAF	; 175
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    3a04:	86 ea       	ldi	r24, 0xA6	; 166
    3a06:	60 e0       	ldi	r22, 0x00	; 0
    3a08:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    3a0c:	85 ea       	ldi	r24, 0xA5	; 165
    3a0e:	60 e0       	ldi	r22, 0x00	; 0
    3a10:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    3a14:	80 e0       	ldi	r24, 0x00	; 0
    3a16:	90 e0       	ldi	r25, 0x00	; 0
    3a18:	28 e8       	ldi	r18, 0x88	; 136
    3a1a:	33 e1       	ldi	r19, 0x13	; 19
    3a1c:	f9 01       	movw	r30, r18
    3a1e:	31 97       	sbiw	r30, 0x01	; 1
    3a20:	f1 f7       	brne	.-4      	; 0x3a1e <LCD_open+0xa0>
    3a22:	01 96       	adiw	r24, 0x01	; 1
    3a24:	43 e0       	ldi	r20, 0x03	; 3
    3a26:	88 3e       	cpi	r24, 0xE8	; 232
    3a28:	94 07       	cpc	r25, r20
    3a2a:	c1 f7       	brne	.-16     	; 0x3a1c <LCD_open+0x9e>
    3a2c:	83 eb       	ldi	r24, 0xB3	; 179
    3a2e:	60 e0       	ldi	r22, 0x00	; 0
    3a30:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    3a34:	80 e4       	ldi	r24, 0x40	; 64
    3a36:	60 e0       	ldi	r22, 0x00	; 0
    3a38:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    3a3c:	83 e0       	ldi	r24, 0x03	; 3
    3a3e:	60 e0       	ldi	r22, 0x00	; 0
    3a40:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <LCD_set_PGC_addr>
    3a44:	83 e0       	ldi	r24, 0x03	; 3
    3a46:	60 e0       	ldi	r22, 0x00	; 0
    3a48:	0e 94 61 1d 	call	0x3ac2	; 0x3ac2 <LCD_set_next_PGC>
    3a4c:	10 92 18 08 	sts	0x0818, r1
    3a50:	10 92 1a 08 	sts	0x081A, r1
    3a54:	10 92 19 08 	sts	0x0819, r1
    3a58:	88 e4       	ldi	r24, 0x48	; 72
    3a5a:	94 e0       	ldi	r25, 0x04	; 4
    3a5c:	90 93 49 08 	sts	0x0849, r25
    3a60:	80 93 48 08 	sts	0x0848, r24
    3a64:	88 e1       	ldi	r24, 0x18	; 24
    3a66:	0e 94 40 1d 	call	0x3a80	; 0x3a80 <LCD_set_backlight>
    3a6a:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
    3a6e:	84 ea       	ldi	r24, 0xA4	; 164
    3a70:	60 e0       	ldi	r22, 0x00	; 0
    3a72:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    3a76:	85 e0       	ldi	r24, 0x05	; 5
    3a78:	91 e0       	ldi	r25, 0x01	; 1
    3a7a:	1f 91       	pop	r17
    3a7c:	0f 91       	pop	r16
    3a7e:	08 95       	ret

00003a80 <LCD_set_backlight>:
    3a80:	1f 93       	push	r17
    3a82:	18 2f       	mov	r17, r24
    3a84:	85 e0       	ldi	r24, 0x05	; 5
    3a86:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    3a8a:	81 30       	cpi	r24, 0x01	; 1
    3a8c:	c1 f4       	brne	.+48     	; 0x3abe <LCD_set_backlight+0x3e>
    3a8e:	87 e0       	ldi	r24, 0x07	; 7
    3a90:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <SPI_set_slave_addr>
    3a94:	82 e0       	ldi	r24, 0x02	; 2
    3a96:	6a e0       	ldi	r22, 0x0A	; 10
    3a98:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <SPI_transmit>
    3a9c:	82 e0       	ldi	r24, 0x02	; 2
    3a9e:	61 eb       	ldi	r22, 0xB1	; 177
    3aa0:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <SPI_transmit>
    3aa4:	61 2f       	mov	r22, r17
    3aa6:	11 32       	cpi	r17, 0x21	; 33
    3aa8:	08 f0       	brcs	.+2      	; 0x3aac <LCD_set_backlight+0x2c>
    3aaa:	60 e2       	ldi	r22, 0x20	; 32
    3aac:	82 e0       	ldi	r24, 0x02	; 2
    3aae:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <SPI_transmit>
    3ab2:	89 ee       	ldi	r24, 0xE9	; 233
    3ab4:	8a 95       	dec	r24
    3ab6:	f1 f7       	brne	.-4      	; 0x3ab4 <LCD_set_backlight+0x34>
    3ab8:	87 e0       	ldi	r24, 0x07	; 7
    3aba:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <SPI_set_slave_addr>
    3abe:	1f 91       	pop	r17
    3ac0:	08 95       	ret

00003ac2 <LCD_set_next_PGC>:
    3ac2:	83 70       	andi	r24, 0x03	; 3
    3ac4:	6f 77       	andi	r22, 0x7F	; 127
    3ac6:	60 93 16 08 	sts	0x0816, r22
    3aca:	80 93 17 08 	sts	0x0817, r24
    3ace:	08 95       	ret

00003ad0 <LCD_set_PGC_addr>:
    3ad0:	0f 93       	push	r16
    3ad2:	1f 93       	push	r17
    3ad4:	06 2f       	mov	r16, r22
    3ad6:	16 2f       	mov	r17, r22
    3ad8:	1f 77       	andi	r17, 0x7F	; 127
    3ada:	83 70       	andi	r24, 0x03	; 3
    3adc:	80 6b       	ori	r24, 0xB0	; 176
    3ade:	60 e0       	ldi	r22, 0x00	; 0
    3ae0:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    3ae4:	12 95       	swap	r17
    3ae6:	1f 70       	andi	r17, 0x0F	; 15
    3ae8:	81 2f       	mov	r24, r17
    3aea:	80 61       	ori	r24, 0x10	; 16
    3aec:	60 e0       	ldi	r22, 0x00	; 0
    3aee:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    3af2:	80 2f       	mov	r24, r16
    3af4:	8f 70       	andi	r24, 0x0F	; 15
    3af6:	60 e0       	ldi	r22, 0x00	; 0
    3af8:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    3afc:	1f 91       	pop	r17
    3afe:	0f 91       	pop	r16
    3b00:	08 95       	ret

00003b02 <LCD_write>:
    3b02:	0f 93       	push	r16
    3b04:	1f 93       	push	r17
    3b06:	08 2f       	mov	r16, r24
    3b08:	16 2f       	mov	r17, r22
    3b0a:	85 e0       	ldi	r24, 0x05	; 5
    3b0c:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    3b10:	81 30       	cpi	r24, 0x01	; 1
    3b12:	79 f4       	brne	.+30     	; 0x3b32 <LCD_write+0x30>
    3b14:	11 23       	and	r17, r17
    3b16:	19 f0       	breq	.+6      	; 0x3b1e <LCD_write+0x1c>
    3b18:	11 30       	cpi	r17, 0x01	; 1
    3b1a:	21 f4       	brne	.+8      	; 0x3b24 <LCD_write+0x22>
    3b1c:	02 c0       	rjmp	.+4      	; 0x3b22 <LCD_write+0x20>
    3b1e:	2b 98       	cbi	0x05, 3	; 5
    3b20:	01 c0       	rjmp	.+2      	; 0x3b24 <LCD_write+0x22>
    3b22:	2b 9a       	sbi	0x05, 3	; 5
    3b24:	86 e0       	ldi	r24, 0x06	; 6
    3b26:	8a 95       	dec	r24
    3b28:	f1 f7       	brne	.-4      	; 0x3b26 <LCD_write+0x24>
    3b2a:	80 e0       	ldi	r24, 0x00	; 0
    3b2c:	60 2f       	mov	r22, r16
    3b2e:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <SPI_transmit>
    3b32:	1f 91       	pop	r17
    3b34:	0f 91       	pop	r16
    3b36:	08 95       	ret

00003b38 <LED_clr_pattern>:
    3b38:	1f 93       	push	r17
    3b3a:	18 2f       	mov	r17, r24
    3b3c:	86 e0       	ldi	r24, 0x06	; 6
    3b3e:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    3b42:	81 30       	cpi	r24, 0x01	; 1
    3b44:	19 f4       	brne	.+6      	; 0x3b4c <LED_clr_pattern+0x14>
    3b46:	81 2f       	mov	r24, r17
    3b48:	0e 94 df 27 	call	0x4fbe	; 0x4fbe <__LED_clr_pattern>
    3b4c:	1f 91       	pop	r17
    3b4e:	08 95       	ret

00003b50 <LED_open>:
    3b50:	0e 94 e4 27 	call	0x4fc8	; 0x4fc8 <__LED_init>
    3b54:	86 e0       	ldi	r24, 0x06	; 6
    3b56:	61 e0       	ldi	r22, 0x01	; 1
    3b58:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    3b5c:	86 e0       	ldi	r24, 0x06	; 6
    3b5e:	91 e0       	ldi	r25, 0x01	; 1
    3b60:	08 95       	ret

00003b62 <LED_set_pattern>:
    3b62:	1f 93       	push	r17
    3b64:	18 2f       	mov	r17, r24
    3b66:	86 e0       	ldi	r24, 0x06	; 6
    3b68:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    3b6c:	81 30       	cpi	r24, 0x01	; 1
    3b6e:	19 f4       	brne	.+6      	; 0x3b76 <LED_set_pattern+0x14>
    3b70:	81 2f       	mov	r24, r17
    3b72:	0e 94 e7 27 	call	0x4fce	; 0x4fce <__LED_set_pattern>
    3b76:	1f 91       	pop	r17
    3b78:	08 95       	ret

00003b7a <SPI_set_slave_addr>:
    3b7a:	1f 93       	push	r17
    3b7c:	18 2f       	mov	r17, r24
    3b7e:	82 e0       	ldi	r24, 0x02	; 2
    3b80:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    3b84:	81 30       	cpi	r24, 0x01	; 1
    3b86:	09 f0       	breq	.+2      	; 0x3b8a <SPI_set_slave_addr+0x10>
    3b88:	47 c0       	rjmp	.+142    	; 0x3c18 <SPI_set_slave_addr+0x9e>
    3b8a:	91 2f       	mov	r25, r17
    3b8c:	97 70       	andi	r25, 0x07	; 7
    3b8e:	80 91 1b 08 	lds	r24, 0x081B
    3b92:	98 17       	cp	r25, r24
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <SPI_set_slave_addr+0x1e>
    3b96:	40 c0       	rjmp	.+128    	; 0x3c18 <SPI_set_slave_addr+0x9e>
    3b98:	90 93 1b 08 	sts	0x081B, r25
    3b9c:	85 b1       	in	r24, 0x05	; 5
    3b9e:	88 7f       	andi	r24, 0xF8	; 248
    3ba0:	89 2b       	or	r24, r25
    3ba2:	85 b9       	out	0x05, r24	; 5
    3ba4:	93 30       	cpi	r25, 0x03	; 3
    3ba6:	11 f1       	breq	.+68     	; 0x3bec <SPI_set_slave_addr+0x72>
    3ba8:	94 30       	cpi	r25, 0x04	; 4
    3baa:	28 f4       	brcc	.+10     	; 0x3bb6 <SPI_set_slave_addr+0x3c>
    3bac:	91 30       	cpi	r25, 0x01	; 1
    3bae:	51 f0       	breq	.+20     	; 0x3bc4 <SPI_set_slave_addr+0x4a>
    3bb0:	92 30       	cpi	r25, 0x02	; 2
    3bb2:	90 f4       	brcc	.+36     	; 0x3bd8 <SPI_set_slave_addr+0x5e>
    3bb4:	0c c0       	rjmp	.+24     	; 0x3bce <SPI_set_slave_addr+0x54>
    3bb6:	95 30       	cpi	r25, 0x05	; 5
    3bb8:	19 f1       	breq	.+70     	; 0x3c00 <SPI_set_slave_addr+0x86>
    3bba:	95 30       	cpi	r25, 0x05	; 5
    3bbc:	e0 f0       	brcs	.+56     	; 0x3bf6 <SPI_set_slave_addr+0x7c>
    3bbe:	96 30       	cpi	r25, 0x06	; 6
    3bc0:	21 f5       	brne	.+72     	; 0x3c0a <SPI_set_slave_addr+0x90>
    3bc2:	0f c0       	rjmp	.+30     	; 0x3be2 <SPI_set_slave_addr+0x68>
    3bc4:	e0 91 ea 04 	lds	r30, 0x04EA
    3bc8:	f0 91 eb 04 	lds	r31, 0x04EB
    3bcc:	22 c0       	rjmp	.+68     	; 0x3c12 <SPI_set_slave_addr+0x98>
    3bce:	e0 91 e8 04 	lds	r30, 0x04E8
    3bd2:	f0 91 e9 04 	lds	r31, 0x04E9
    3bd6:	1d c0       	rjmp	.+58     	; 0x3c12 <SPI_set_slave_addr+0x98>
    3bd8:	e0 91 ec 04 	lds	r30, 0x04EC
    3bdc:	f0 91 ed 04 	lds	r31, 0x04ED
    3be0:	18 c0       	rjmp	.+48     	; 0x3c12 <SPI_set_slave_addr+0x98>
    3be2:	e0 91 f4 04 	lds	r30, 0x04F4
    3be6:	f0 91 f5 04 	lds	r31, 0x04F5
    3bea:	13 c0       	rjmp	.+38     	; 0x3c12 <SPI_set_slave_addr+0x98>
    3bec:	e0 91 ee 04 	lds	r30, 0x04EE
    3bf0:	f0 91 ef 04 	lds	r31, 0x04EF
    3bf4:	0e c0       	rjmp	.+28     	; 0x3c12 <SPI_set_slave_addr+0x98>
    3bf6:	e0 91 f0 04 	lds	r30, 0x04F0
    3bfa:	f0 91 f1 04 	lds	r31, 0x04F1
    3bfe:	09 c0       	rjmp	.+18     	; 0x3c12 <SPI_set_slave_addr+0x98>
    3c00:	e0 91 f2 04 	lds	r30, 0x04F2
    3c04:	f0 91 f3 04 	lds	r31, 0x04F3
    3c08:	04 c0       	rjmp	.+8      	; 0x3c12 <SPI_set_slave_addr+0x98>
    3c0a:	e0 91 f6 04 	lds	r30, 0x04F6
    3c0e:	f0 91 f7 04 	lds	r31, 0x04F7
    3c12:	30 97       	sbiw	r30, 0x00	; 0
    3c14:	09 f0       	breq	.+2      	; 0x3c18 <SPI_set_slave_addr+0x9e>
    3c16:	09 95       	icall
    3c18:	1f 91       	pop	r17
    3c1a:	08 95       	ret

00003c1c <SPI_transmit>:
    3c1c:	1f 93       	push	r17
    3c1e:	16 2f       	mov	r17, r22
    3c20:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <SPI_set_slave_addr>
    3c24:	82 e0       	ldi	r24, 0x02	; 2
    3c26:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    3c2a:	81 30       	cpi	r24, 0x01	; 1
    3c2c:	21 f4       	brne	.+8      	; 0x3c36 <SPI_transmit+0x1a>
    3c2e:	1e bd       	out	0x2e, r17	; 46
    3c30:	0d b4       	in	r0, 0x2d	; 45
    3c32:	07 fe       	sbrs	r0, 7
    3c34:	fd cf       	rjmp	.-6      	; 0x3c30 <SPI_transmit+0x14>
    3c36:	1f 91       	pop	r17
    3c38:	08 95       	ret

00003c3a <__SPKR_set_up_freq_LUT>:
    3c3a:	0f 93       	push	r16
    3c3c:	1f 93       	push	r17
    3c3e:	cf 93       	push	r28
    3c40:	df 93       	push	r29
    3c42:	80 e2       	ldi	r24, 0x20	; 32
    3c44:	91 e0       	ldi	r25, 0x01	; 1
    3c46:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <malloc>
    3c4a:	9c 01       	movw	r18, r24
    3c4c:	90 93 07 05 	sts	0x0507, r25
    3c50:	80 93 06 05 	sts	0x0506, r24
    3c54:	89 2b       	or	r24, r25
    3c56:	11 f4       	brne	.+4      	; 0x3c5c <__SPKR_set_up_freq_LUT+0x22>
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	39 c0       	rjmp	.+114    	; 0x3cce <__SPKR_set_up_freq_LUT+0x94>
    3c5c:	89 01       	movw	r16, r18
    3c5e:	c0 e0       	ldi	r28, 0x00	; 0
    3c60:	d0 e0       	ldi	r29, 0x00	; 0
    3c62:	be 01       	movw	r22, r28
    3c64:	80 e0       	ldi	r24, 0x00	; 0
    3c66:	90 e0       	ldi	r25, 0x00	; 0
    3c68:	0e 94 5b 30 	call	0x60b6	; 0x60b6 <__floatunsisf>
    3c6c:	20 e0       	ldi	r18, 0x00	; 0
    3c6e:	30 e0       	ldi	r19, 0x00	; 0
    3c70:	40 ea       	ldi	r20, 0xA0	; 160
    3c72:	51 e4       	ldi	r21, 0x41	; 65
    3c74:	0e 94 c2 2f 	call	0x5f84	; 0x5f84 <__divsf3>
    3c78:	27 ef       	ldi	r18, 0xF7	; 247
    3c7a:	35 e7       	ldi	r19, 0x75	; 117
    3c7c:	40 e0       	ldi	r20, 0x00	; 0
    3c7e:	5f e3       	ldi	r21, 0x3F	; 63
    3c80:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    3c84:	9b 01       	movw	r18, r22
    3c86:	ac 01       	movw	r20, r24
    3c88:	60 e0       	ldi	r22, 0x00	; 0
    3c8a:	70 e0       	ldi	r23, 0x00	; 0
    3c8c:	80 e2       	ldi	r24, 0x20	; 32
    3c8e:	91 e4       	ldi	r25, 0x41	; 65
    3c90:	0e 94 ae 31 	call	0x635c	; 0x635c <pow>
    3c94:	9b 01       	movw	r18, r22
    3c96:	ac 01       	movw	r20, r24
    3c98:	ca 01       	movw	r24, r20
    3c9a:	b9 01       	movw	r22, r18
    3c9c:	2d ec       	ldi	r18, 0xCD	; 205
    3c9e:	3c ec       	ldi	r19, 0xCC	; 204
    3ca0:	42 e8       	ldi	r20, 0x82	; 130
    3ca2:	51 e4       	ldi	r21, 0x41	; 65
    3ca4:	0e 94 4b 31 	call	0x6296	; 0x6296 <__mulsf3>
    3ca8:	0e 94 11 31 	call	0x6222	; 0x6222 <lrint>
    3cac:	2a e0       	ldi	r18, 0x0A	; 10
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	40 e0       	ldi	r20, 0x00	; 0
    3cb2:	50 e0       	ldi	r21, 0x00	; 0
    3cb4:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <__mulsi3>
    3cb8:	f8 01       	movw	r30, r16
    3cba:	61 93       	st	Z+, r22
    3cbc:	71 93       	st	Z+, r23
    3cbe:	81 93       	st	Z+, r24
    3cc0:	91 93       	st	Z+, r25
    3cc2:	8f 01       	movw	r16, r30
    3cc4:	21 96       	adiw	r28, 0x01	; 1
    3cc6:	c8 34       	cpi	r28, 0x48	; 72
    3cc8:	d1 05       	cpc	r29, r1
    3cca:	59 f6       	brne	.-106    	; 0x3c62 <__SPKR_set_up_freq_LUT+0x28>
    3ccc:	81 e0       	ldi	r24, 0x01	; 1
    3cce:	df 91       	pop	r29
    3cd0:	cf 91       	pop	r28
    3cd2:	1f 91       	pop	r17
    3cd4:	0f 91       	pop	r16
    3cd6:	08 95       	ret

00003cd8 <__SPKR_open_beep_mode>:
    3cd8:	8a e0       	ldi	r24, 0x0A	; 10
    3cda:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    3cde:	88 23       	and	r24, r24
    3ce0:	71 f4       	brne	.+28     	; 0x3cfe <__SPKR_open_beep_mode+0x26>
    3ce2:	10 92 03 05 	sts	0x0503, r1
    3ce6:	10 92 02 05 	sts	0x0502, r1
    3cea:	81 e0       	ldi	r24, 0x01	; 1
    3cec:	0e 94 22 29 	call	0x5244	; 0x5244 <__SPKR_init>
    3cf0:	81 e0       	ldi	r24, 0x01	; 1
    3cf2:	80 93 f9 04 	sts	0x04F9, r24
    3cf6:	8a e0       	ldi	r24, 0x0A	; 10
    3cf8:	61 e0       	ldi	r22, 0x01	; 1
    3cfa:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    3cfe:	8a e0       	ldi	r24, 0x0A	; 10
    3d00:	91 e0       	ldi	r25, 0x01	; 1
    3d02:	08 95       	ret

00003d04 <__SPKR_open_tone_mode>:
    3d04:	1f 93       	push	r17
    3d06:	8b e0       	ldi	r24, 0x0B	; 11
    3d08:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    3d0c:	88 23       	and	r24, r24
    3d0e:	11 f0       	breq	.+4      	; 0x3d14 <__SPKR_open_tone_mode+0x10>
    3d10:	90 e0       	ldi	r25, 0x00	; 0
    3d12:	21 c0       	rjmp	.+66     	; 0x3d56 <__SPKR_open_tone_mode+0x52>
    3d14:	89 e0       	ldi	r24, 0x09	; 9
    3d16:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    3d1a:	88 23       	and	r24, r24
    3d1c:	d9 f4       	brne	.+54     	; 0x3d54 <__SPKR_open_tone_mode+0x50>
    3d1e:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <__SPKR_set_up_freq_LUT>
    3d22:	18 2f       	mov	r17, r24
    3d24:	81 30       	cpi	r24, 0x01	; 1
    3d26:	b1 f4       	brne	.+44     	; 0x3d54 <__SPKR_open_tone_mode+0x50>
    3d28:	10 92 fa 04 	sts	0x04FA, r1
    3d2c:	10 92 fb 04 	sts	0x04FB, r1
    3d30:	10 92 fc 04 	sts	0x04FC, r1
    3d34:	10 92 fd 04 	sts	0x04FD, r1
    3d38:	8d e0       	ldi	r24, 0x0D	; 13
    3d3a:	65 ea       	ldi	r22, 0xA5	; 165
    3d3c:	78 e2       	ldi	r23, 0x28	; 40
    3d3e:	0e 94 08 27 	call	0x4e10	; 0x4e10 <ISR_attach>
    3d42:	82 e0       	ldi	r24, 0x02	; 2
    3d44:	0e 94 22 29 	call	0x5244	; 0x5244 <__SPKR_init>
    3d48:	10 93 f8 04 	sts	0x04F8, r17
    3d4c:	89 e0       	ldi	r24, 0x09	; 9
    3d4e:	61 e0       	ldi	r22, 0x01	; 1
    3d50:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    3d54:	91 e0       	ldi	r25, 0x01	; 1
    3d56:	89 e0       	ldi	r24, 0x09	; 9
    3d58:	1f 91       	pop	r17
    3d5a:	08 95       	ret

00003d5c <SPKR_open>:
    3d5c:	81 30       	cpi	r24, 0x01	; 1
    3d5e:	29 f0       	breq	.+10     	; 0x3d6a <SPKR_open+0xe>
    3d60:	82 30       	cpi	r24, 0x02	; 2
    3d62:	31 f0       	breq	.+12     	; 0x3d70 <SPKR_open+0x14>
    3d64:	90 e0       	ldi	r25, 0x00	; 0
    3d66:	89 e0       	ldi	r24, 0x09	; 9
    3d68:	08 95       	ret
    3d6a:	0e 94 6c 1e 	call	0x3cd8	; 0x3cd8 <__SPKR_open_beep_mode>
    3d6e:	08 95       	ret
    3d70:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <__SPKR_open_tone_mode>
    3d74:	08 95       	ret

00003d76 <STEPPER_get_nSteps>:
    3d76:	80 91 dc 07 	lds	r24, 0x07DC
    3d7a:	90 91 dd 07 	lds	r25, 0x07DD
    3d7e:	20 91 de 07 	lds	r18, 0x07DE
    3d82:	30 91 df 07 	lds	r19, 0x07DF
    3d86:	bc 01       	movw	r22, r24
    3d88:	c9 01       	movw	r24, r18
    3d8a:	08 95       	ret

00003d8c <STEPPER_stepmode>:
    3d8c:	2f 92       	push	r2
    3d8e:	3f 92       	push	r3
    3d90:	4f 92       	push	r4
    3d92:	5f 92       	push	r5
    3d94:	6f 92       	push	r6
    3d96:	7f 92       	push	r7
    3d98:	8f 92       	push	r8
    3d9a:	9f 92       	push	r9
    3d9c:	af 92       	push	r10
    3d9e:	bf 92       	push	r11
    3da0:	cf 92       	push	r12
    3da2:	df 92       	push	r13
    3da4:	ef 92       	push	r14
    3da6:	ff 92       	push	r15
    3da8:	0f 93       	push	r16
    3daa:	1f 93       	push	r17
    3dac:	df 93       	push	r29
    3dae:	cf 93       	push	r28
    3db0:	cd b7       	in	r28, 0x3d	; 61
    3db2:	de b7       	in	r29, 0x3e	; 62
    3db4:	58 2e       	mov	r5, r24
    3db6:	96 2e       	mov	r9, r22
    3db8:	44 2e       	mov	r4, r20
    3dba:	39 01       	movw	r6, r18
    3dbc:	3c 2c       	mov	r3, r12
    3dbe:	c9 8c       	ldd	r12, Y+25	; 0x19
    3dc0:	da 8c       	ldd	r13, Y+26	; 0x1a
    3dc2:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	68 17       	cp	r22, r24
    3dc8:	39 f1       	breq	.+78     	; 0x3e18 <STEPPER_stepmode+0x8c>
    3dca:	68 17       	cp	r22, r24
    3dcc:	28 f0       	brcs	.+10     	; 0x3dd8 <STEPPER_stepmode+0x4c>
    3dce:	92 e0       	ldi	r25, 0x02	; 2
    3dd0:	69 17       	cp	r22, r25
    3dd2:	09 f0       	breq	.+2      	; 0x3dd6 <STEPPER_stepmode+0x4a>
    3dd4:	85 c0       	rjmp	.+266    	; 0x3ee0 <STEPPER_stepmode+0x154>
    3dd6:	49 c0       	rjmp	.+146    	; 0x3e6a <STEPPER_stepmode+0xde>
    3dd8:	80 e0       	ldi	r24, 0x00	; 0
    3dda:	61 e0       	ldi	r22, 0x01	; 1
    3ddc:	0e 94 cf 20 	call	0x419e	; 0x419e <STEPPER_set_mode>
    3de0:	80 e0       	ldi	r24, 0x00	; 0
    3de2:	b7 01       	movw	r22, r14
    3de4:	0e 94 98 20 	call	0x4130	; 0x4130 <STEPPER_set_accel>
    3de8:	80 e0       	ldi	r24, 0x00	; 0
    3dea:	64 2d       	mov	r22, r4
    3dec:	a3 01       	movw	r20, r6
    3dee:	98 01       	movw	r18, r16
    3df0:	03 2d       	mov	r16, r3
    3df2:	ee 24       	eor	r14, r14
    3df4:	e3 94       	inc	r14
    3df6:	e1 e0       	ldi	r30, 0x01	; 1
    3df8:	ce 2e       	mov	r12, r30
    3dfa:	e8 e0       	ldi	r30, 0x08	; 8
    3dfc:	de 2e       	mov	r13, r30
    3dfe:	0e 94 21 21 	call	0x4242	; 0x4242 <STEPPER_step>
    3e02:	55 20       	and	r5, r5
    3e04:	09 f0       	breq	.+2      	; 0x3e08 <STEPPER_stepmode+0x7c>
    3e06:	6c c0       	rjmp	.+216    	; 0x3ee0 <STEPPER_stepmode+0x154>
    3e08:	00 d0       	rcall	.+0      	; 0x3e0a <STEPPER_stepmode+0x7e>
    3e0a:	0f 92       	push	r0
    3e0c:	ed b7       	in	r30, 0x3d	; 61
    3e0e:	fe b7       	in	r31, 0x3e	; 62
    3e10:	11 82       	std	Z+1, r1	; 0x01
    3e12:	b3 82       	std	Z+3, r11	; 0x03
    3e14:	a2 82       	std	Z+2, r10	; 0x02
    3e16:	23 c0       	rjmp	.+70     	; 0x3e5e <STEPPER_stepmode+0xd2>
    3e18:	81 e0       	ldi	r24, 0x01	; 1
    3e1a:	61 e0       	ldi	r22, 0x01	; 1
    3e1c:	0e 94 cf 20 	call	0x419e	; 0x419e <STEPPER_set_mode>
    3e20:	81 e0       	ldi	r24, 0x01	; 1
    3e22:	b6 01       	movw	r22, r12
    3e24:	0e 94 98 20 	call	0x4130	; 0x4130 <STEPPER_set_accel>
    3e28:	81 e0       	ldi	r24, 0x01	; 1
    3e2a:	68 2d       	mov	r22, r8
    3e2c:	4d 89       	ldd	r20, Y+21	; 0x15
    3e2e:	5e 89       	ldd	r21, Y+22	; 0x16
    3e30:	2f 89       	ldd	r18, Y+23	; 0x17
    3e32:	38 8d       	ldd	r19, Y+24	; 0x18
    3e34:	02 2d       	mov	r16, r2
    3e36:	ee 24       	eor	r14, r14
    3e38:	e3 94       	inc	r14
    3e3a:	71 e0       	ldi	r23, 0x01	; 1
    3e3c:	c7 2e       	mov	r12, r23
    3e3e:	78 e0       	ldi	r23, 0x08	; 8
    3e40:	d7 2e       	mov	r13, r23
    3e42:	0e 94 21 21 	call	0x4242	; 0x4242 <STEPPER_step>
    3e46:	55 20       	and	r5, r5
    3e48:	09 f0       	breq	.+2      	; 0x3e4c <STEPPER_stepmode+0xc0>
    3e4a:	4a c0       	rjmp	.+148    	; 0x3ee0 <STEPPER_stepmode+0x154>
    3e4c:	00 d0       	rcall	.+0      	; 0x3e4e <STEPPER_stepmode+0xc2>
    3e4e:	0f 92       	push	r0
    3e50:	ed b7       	in	r30, 0x3d	; 61
    3e52:	fe b7       	in	r31, 0x3e	; 62
    3e54:	91 82       	std	Z+1, r9	; 0x01
    3e56:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3e58:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3e5a:	93 83       	std	Z+3, r25	; 0x03
    3e5c:	82 83       	std	Z+2, r24	; 0x02
    3e5e:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <STEPPER_wait_and_then>
    3e62:	0f 90       	pop	r0
    3e64:	0f 90       	pop	r0
    3e66:	0f 90       	pop	r0
    3e68:	3b c0       	rjmp	.+118    	; 0x3ee0 <STEPPER_stepmode+0x154>
    3e6a:	82 e0       	ldi	r24, 0x02	; 2
    3e6c:	61 e0       	ldi	r22, 0x01	; 1
    3e6e:	0e 94 cf 20 	call	0x419e	; 0x419e <STEPPER_set_mode>
    3e72:	80 e0       	ldi	r24, 0x00	; 0
    3e74:	b7 01       	movw	r22, r14
    3e76:	0e 94 98 20 	call	0x4130	; 0x4130 <STEPPER_set_accel>
    3e7a:	81 e0       	ldi	r24, 0x01	; 1
    3e7c:	b6 01       	movw	r22, r12
    3e7e:	0e 94 98 20 	call	0x4130	; 0x4130 <STEPPER_set_accel>
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	64 2d       	mov	r22, r4
    3e86:	a3 01       	movw	r20, r6
    3e88:	98 01       	movw	r18, r16
    3e8a:	03 2d       	mov	r16, r3
    3e8c:	ee 24       	eor	r14, r14
    3e8e:	e3 94       	inc	r14
    3e90:	91 e0       	ldi	r25, 0x01	; 1
    3e92:	c9 2e       	mov	r12, r25
    3e94:	98 e0       	ldi	r25, 0x08	; 8
    3e96:	d9 2e       	mov	r13, r25
    3e98:	0e 94 21 21 	call	0x4242	; 0x4242 <STEPPER_step>
    3e9c:	81 e0       	ldi	r24, 0x01	; 1
    3e9e:	68 2d       	mov	r22, r8
    3ea0:	4d 89       	ldd	r20, Y+21	; 0x15
    3ea2:	5e 89       	ldd	r21, Y+22	; 0x16
    3ea4:	2f 89       	ldd	r18, Y+23	; 0x17
    3ea6:	38 8d       	ldd	r19, Y+24	; 0x18
    3ea8:	02 2d       	mov	r16, r2
    3eaa:	0e 94 21 21 	call	0x4242	; 0x4242 <STEPPER_step>
    3eae:	55 20       	and	r5, r5
    3eb0:	b9 f4       	brne	.+46     	; 0x3ee0 <STEPPER_stepmode+0x154>
    3eb2:	00 d0       	rcall	.+0      	; 0x3eb4 <STEPPER_stepmode+0x128>
    3eb4:	00 d0       	rcall	.+0      	; 0x3eb6 <STEPPER_stepmode+0x12a>
    3eb6:	0f 92       	push	r0
    3eb8:	ad b7       	in	r26, 0x3d	; 61
    3eba:	be b7       	in	r27, 0x3e	; 62
    3ebc:	11 96       	adiw	r26, 0x01	; 1
    3ebe:	ed b7       	in	r30, 0x3d	; 61
    3ec0:	fe b7       	in	r31, 0x3e	; 62
    3ec2:	91 82       	std	Z+1, r9	; 0x01
    3ec4:	fd 01       	movw	r30, r26
    3ec6:	b2 82       	std	Z+2, r11	; 0x02
    3ec8:	a1 82       	std	Z+1, r10	; 0x01
    3eca:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3ecc:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3ece:	94 83       	std	Z+4, r25	; 0x04
    3ed0:	83 83       	std	Z+3, r24	; 0x03
    3ed2:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <STEPPER_wait_and_then>
    3ed6:	0f 90       	pop	r0
    3ed8:	0f 90       	pop	r0
    3eda:	0f 90       	pop	r0
    3edc:	0f 90       	pop	r0
    3ede:	0f 90       	pop	r0
    3ee0:	cf 91       	pop	r28
    3ee2:	df 91       	pop	r29
    3ee4:	1f 91       	pop	r17
    3ee6:	0f 91       	pop	r16
    3ee8:	ff 90       	pop	r15
    3eea:	ef 90       	pop	r14
    3eec:	df 90       	pop	r13
    3eee:	cf 90       	pop	r12
    3ef0:	bf 90       	pop	r11
    3ef2:	af 90       	pop	r10
    3ef4:	9f 90       	pop	r9
    3ef6:	8f 90       	pop	r8
    3ef8:	7f 90       	pop	r7
    3efa:	6f 90       	pop	r6
    3efc:	5f 90       	pop	r5
    3efe:	4f 90       	pop	r4
    3f00:	3f 90       	pop	r3
    3f02:	2f 90       	pop	r2
    3f04:	08 95       	ret

00003f06 <STEPPER_move>:
    3f06:	6f 92       	push	r6
    3f08:	7f 92       	push	r7
    3f0a:	8f 92       	push	r8
    3f0c:	9f 92       	push	r9
    3f0e:	af 92       	push	r10
    3f10:	bf 92       	push	r11
    3f12:	cf 92       	push	r12
    3f14:	df 92       	push	r13
    3f16:	ef 92       	push	r14
    3f18:	ff 92       	push	r15
    3f1a:	0f 93       	push	r16
    3f1c:	1f 93       	push	r17
    3f1e:	df 93       	push	r29
    3f20:	cf 93       	push	r28
    3f22:	cd b7       	in	r28, 0x3d	; 61
    3f24:	de b7       	in	r29, 0x3e	; 62
    3f26:	94 2e       	mov	r9, r20
    3f28:	7c 2d       	mov	r23, r12
    3f2a:	d5 01       	movw	r26, r10
    3f2c:	49 89       	ldd	r20, Y+17	; 0x11
    3f2e:	5a 89       	ldd	r21, Y+18	; 0x12
    3f30:	ab 88       	ldd	r10, Y+19	; 0x13
    3f32:	bc 88       	ldd	r11, Y+20	; 0x14
    3f34:	cd 88       	ldd	r12, Y+21	; 0x15
    3f36:	de 88       	ldd	r13, Y+22	; 0x16
    3f38:	9f 89       	ldd	r25, Y+23	; 0x17
    3f3a:	81 30       	cpi	r24, 0x01	; 1
    3f3c:	09 f4       	brne	.+2      	; 0x3f40 <STEPPER_move+0x3a>
    3f3e:	57 c0       	rjmp	.+174    	; 0x3fee <STEPPER_move+0xe8>
    3f40:	81 30       	cpi	r24, 0x01	; 1
    3f42:	b8 f1       	brcs	.+110    	; 0x3fb2 <STEPPER_move+0xac>
    3f44:	82 30       	cpi	r24, 0x02	; 2
    3f46:	09 f0       	breq	.+2      	; 0x3f4a <STEPPER_move+0x44>
    3f48:	76 c0       	rjmp	.+236    	; 0x4036 <STEPPER_move+0x130>
    3f4a:	61 30       	cpi	r22, 0x01	; 1
    3f4c:	91 f0       	breq	.+36     	; 0x3f72 <STEPPER_move+0x6c>
    3f4e:	61 30       	cpi	r22, 0x01	; 1
    3f50:	20 f0       	brcs	.+8      	; 0x3f5a <STEPPER_move+0x54>
    3f52:	62 30       	cpi	r22, 0x02	; 2
    3f54:	09 f0       	breq	.+2      	; 0x3f58 <STEPPER_move+0x52>
    3f56:	6f c0       	rjmp	.+222    	; 0x4036 <STEPPER_move+0x130>
    3f58:	15 c0       	rjmp	.+42     	; 0x3f84 <STEPPER_move+0x7e>
    3f5a:	80 e0       	ldi	r24, 0x00	; 0
    3f5c:	60 e0       	ldi	r22, 0x00	; 0
    3f5e:	0e 94 cf 20 	call	0x419e	; 0x419e <STEPPER_set_mode>
    3f62:	80 e0       	ldi	r24, 0x00	; 0
    3f64:	b7 01       	movw	r22, r14
    3f66:	0e 94 98 20 	call	0x4130	; 0x4130 <STEPPER_set_accel>
    3f6a:	80 e0       	ldi	r24, 0x00	; 0
    3f6c:	69 2d       	mov	r22, r9
    3f6e:	a8 01       	movw	r20, r16
    3f70:	1d c0       	rjmp	.+58     	; 0x3fac <STEPPER_move+0xa6>
    3f72:	81 e0       	ldi	r24, 0x01	; 1
    3f74:	60 e0       	ldi	r22, 0x00	; 0
    3f76:	0e 94 cf 20 	call	0x419e	; 0x419e <STEPPER_set_mode>
    3f7a:	81 e0       	ldi	r24, 0x01	; 1
    3f7c:	b6 01       	movw	r22, r12
    3f7e:	0e 94 98 20 	call	0x4130	; 0x4130 <STEPPER_set_accel>
    3f82:	11 c0       	rjmp	.+34     	; 0x3fa6 <STEPPER_move+0xa0>
    3f84:	82 e0       	ldi	r24, 0x02	; 2
    3f86:	60 e0       	ldi	r22, 0x00	; 0
    3f88:	0e 94 cf 20 	call	0x419e	; 0x419e <STEPPER_set_mode>
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	b7 01       	movw	r22, r14
    3f90:	0e 94 98 20 	call	0x4130	; 0x4130 <STEPPER_set_accel>
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	b6 01       	movw	r22, r12
    3f98:	0e 94 98 20 	call	0x4130	; 0x4130 <STEPPER_set_accel>
    3f9c:	80 e0       	ldi	r24, 0x00	; 0
    3f9e:	69 2d       	mov	r22, r9
    3fa0:	a8 01       	movw	r20, r16
    3fa2:	0e 94 81 20 	call	0x4102	; 0x4102 <STEPPER_run>
    3fa6:	81 e0       	ldi	r24, 0x01	; 1
    3fa8:	68 2d       	mov	r22, r8
    3faa:	a5 01       	movw	r20, r10
    3fac:	0e 94 81 20 	call	0x4102	; 0x4102 <STEPPER_run>
    3fb0:	42 c0       	rjmp	.+132    	; 0x4036 <STEPPER_move+0x130>
    3fb2:	ed b7       	in	r30, 0x3d	; 61
    3fb4:	fe b7       	in	r31, 0x3e	; 62
    3fb6:	39 97       	sbiw	r30, 0x09	; 9
    3fb8:	0f b6       	in	r0, 0x3f	; 63
    3fba:	f8 94       	cli
    3fbc:	fe bf       	out	0x3e, r31	; 62
    3fbe:	0f be       	out	0x3f, r0	; 63
    3fc0:	ed bf       	out	0x3d, r30	; 61
    3fc2:	6d b6       	in	r6, 0x3d	; 61
    3fc4:	7e b6       	in	r7, 0x3e	; 62
    3fc6:	08 94       	sec
    3fc8:	61 1c       	adc	r6, r1
    3fca:	71 1c       	adc	r7, r1
    3fcc:	52 83       	std	Z+2, r21	; 0x02
    3fce:	41 83       	std	Z+1, r20	; 0x01
    3fd0:	f3 01       	movw	r30, r6
    3fd2:	b3 82       	std	Z+3, r11	; 0x03
    3fd4:	a2 82       	std	Z+2, r10	; 0x02
    3fd6:	d5 82       	std	Z+5, r13	; 0x05
    3fd8:	c4 82       	std	Z+4, r12	; 0x04
    3fda:	96 83       	std	Z+6, r25	; 0x06
    3fdc:	88 8d       	ldd	r24, Y+24	; 0x18
    3fde:	99 8d       	ldd	r25, Y+25	; 0x19
    3fe0:	90 87       	std	Z+8, r25	; 0x08
    3fe2:	87 83       	std	Z+7, r24	; 0x07
    3fe4:	80 e0       	ldi	r24, 0x00	; 0
    3fe6:	49 2d       	mov	r20, r9
    3fe8:	c7 2e       	mov	r12, r23
    3fea:	5d 01       	movw	r10, r26
    3fec:	1a c0       	rjmp	.+52     	; 0x4022 <STEPPER_move+0x11c>
    3fee:	ed b7       	in	r30, 0x3d	; 61
    3ff0:	fe b7       	in	r31, 0x3e	; 62
    3ff2:	39 97       	sbiw	r30, 0x09	; 9
    3ff4:	0f b6       	in	r0, 0x3f	; 63
    3ff6:	f8 94       	cli
    3ff8:	fe bf       	out	0x3e, r31	; 62
    3ffa:	0f be       	out	0x3f, r0	; 63
    3ffc:	ed bf       	out	0x3d, r30	; 61
    3ffe:	ad b7       	in	r26, 0x3d	; 61
    4000:	be b7       	in	r27, 0x3e	; 62
    4002:	11 96       	adiw	r26, 0x01	; 1
    4004:	52 83       	std	Z+2, r21	; 0x02
    4006:	41 83       	std	Z+1, r20	; 0x01
    4008:	fd 01       	movw	r30, r26
    400a:	b3 82       	std	Z+3, r11	; 0x03
    400c:	a2 82       	std	Z+2, r10	; 0x02
    400e:	d5 82       	std	Z+5, r13	; 0x05
    4010:	c4 82       	std	Z+4, r12	; 0x04
    4012:	96 83       	std	Z+6, r25	; 0x06
    4014:	10 86       	std	Z+8, r1	; 0x08
    4016:	17 82       	std	Z+7, r1	; 0x07
    4018:	81 e0       	ldi	r24, 0x01	; 1
    401a:	49 2d       	mov	r20, r9
    401c:	c7 2e       	mov	r12, r23
    401e:	aa 24       	eor	r10, r10
    4020:	bb 24       	eor	r11, r11
    4022:	0e 94 c6 1e 	call	0x3d8c	; 0x3d8c <STEPPER_stepmode>
    4026:	8d b7       	in	r24, 0x3d	; 61
    4028:	9e b7       	in	r25, 0x3e	; 62
    402a:	09 96       	adiw	r24, 0x09	; 9
    402c:	0f b6       	in	r0, 0x3f	; 63
    402e:	f8 94       	cli
    4030:	9e bf       	out	0x3e, r25	; 62
    4032:	0f be       	out	0x3f, r0	; 63
    4034:	8d bf       	out	0x3d, r24	; 61
    4036:	cf 91       	pop	r28
    4038:	df 91       	pop	r29
    403a:	1f 91       	pop	r17
    403c:	0f 91       	pop	r16
    403e:	ff 90       	pop	r15
    4040:	ef 90       	pop	r14
    4042:	df 90       	pop	r13
    4044:	cf 90       	pop	r12
    4046:	bf 90       	pop	r11
    4048:	af 90       	pop	r10
    404a:	9f 90       	pop	r9
    404c:	8f 90       	pop	r8
    404e:	7f 90       	pop	r7
    4050:	6f 90       	pop	r6
    4052:	08 95       	ret

00004054 <STEPPER_open>:
    4054:	0e 94 b4 29 	call	0x5368	; 0x5368 <__STEPPER_init>
    4058:	81 e0       	ldi	r24, 0x01	; 1
    405a:	80 93 00 08 	sts	0x0800, r24
    405e:	ea ec       	ldi	r30, 0xCA	; 202
    4060:	f7 e0       	ldi	r31, 0x07	; 7
    4062:	11 92       	st	Z+, r1
    4064:	11 92       	st	Z+, r1
    4066:	11 82       	std	Z+1, r1	; 0x01
    4068:	10 82       	st	Z, r1
    406a:	32 96       	adiw	r30, 0x02	; 2
    406c:	11 82       	std	Z+1, r1	; 0x01
    406e:	10 82       	st	Z, r1
    4070:	32 96       	adiw	r30, 0x02	; 2
    4072:	11 82       	std	Z+1, r1	; 0x01
    4074:	10 82       	st	Z, r1
    4076:	32 96       	adiw	r30, 0x02	; 2
    4078:	11 82       	std	Z+1, r1	; 0x01
    407a:	10 82       	st	Z, r1
    407c:	32 96       	adiw	r30, 0x02	; 2
    407e:	11 82       	std	Z+1, r1	; 0x01
    4080:	10 82       	st	Z, r1
    4082:	32 96       	adiw	r30, 0x02	; 2
    4084:	11 82       	std	Z+1, r1	; 0x01
    4086:	10 82       	st	Z, r1
    4088:	32 96       	adiw	r30, 0x02	; 2
    408a:	11 82       	std	Z+1, r1	; 0x01
    408c:	10 82       	st	Z, r1
    408e:	32 96       	adiw	r30, 0x02	; 2
    4090:	11 82       	std	Z+1, r1	; 0x01
    4092:	10 82       	st	Z, r1
    4094:	32 96       	adiw	r30, 0x02	; 2
    4096:	11 82       	std	Z+1, r1	; 0x01
    4098:	10 82       	st	Z, r1
    409a:	32 96       	adiw	r30, 0x02	; 2
    409c:	11 82       	std	Z+1, r1	; 0x01
    409e:	10 82       	st	Z, r1
    40a0:	32 96       	adiw	r30, 0x02	; 2
    40a2:	11 82       	std	Z+1, r1	; 0x01
    40a4:	10 82       	st	Z, r1
    40a6:	32 96       	adiw	r30, 0x02	; 2
    40a8:	11 82       	std	Z+1, r1	; 0x01
    40aa:	10 82       	st	Z, r1
    40ac:	36 96       	adiw	r30, 0x06	; 6
    40ae:	11 92       	st	Z+, r1
    40b0:	11 92       	st	Z+, r1
    40b2:	11 92       	st	Z+, r1
    40b4:	10 82       	st	Z, r1
    40b6:	32 96       	adiw	r30, 0x02	; 2
    40b8:	11 92       	st	Z+, r1
    40ba:	11 92       	st	Z+, r1
    40bc:	11 92       	st	Z+, r1
    40be:	11 92       	st	Z+, r1
    40c0:	11 92       	st	Z+, r1
    40c2:	11 92       	st	Z+, r1
    40c4:	11 92       	st	Z+, r1
    40c6:	11 82       	std	Z+1, r1	; 0x01
    40c8:	10 82       	st	Z, r1
    40ca:	32 96       	adiw	r30, 0x02	; 2
    40cc:	11 82       	std	Z+1, r1	; 0x01
    40ce:	10 82       	st	Z, r1
    40d0:	32 96       	adiw	r30, 0x02	; 2
    40d2:	11 82       	std	Z+1, r1	; 0x01
    40d4:	10 82       	st	Z, r1
    40d6:	32 96       	adiw	r30, 0x02	; 2
    40d8:	11 82       	std	Z+1, r1	; 0x01
    40da:	10 82       	st	Z, r1
    40dc:	76 97       	sbiw	r30, 0x16	; 22
    40de:	11 82       	std	Z+1, r1	; 0x01
    40e0:	10 82       	st	Z, r1
    40e2:	32 96       	adiw	r30, 0x02	; 2
    40e4:	11 82       	std	Z+1, r1	; 0x01
    40e6:	10 82       	st	Z, r1
    40e8:	10 92 ff 07 	sts	0x07FF, r1
    40ec:	10 92 fe 07 	sts	0x07FE, r1
    40f0:	10 92 00 08 	sts	0x0800, r1
    40f4:	87 e0       	ldi	r24, 0x07	; 7
    40f6:	61 e0       	ldi	r22, 0x01	; 1
    40f8:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    40fc:	87 e0       	ldi	r24, 0x07	; 7
    40fe:	91 e0       	ldi	r25, 0x01	; 1
    4100:	08 95       	ret

00004102 <STEPPER_run>:
    4102:	ef 92       	push	r14
    4104:	ff 92       	push	r15
    4106:	0f 93       	push	r16
    4108:	1f 93       	push	r17
    410a:	18 2f       	mov	r17, r24
    410c:	06 2f       	mov	r16, r22
    410e:	7a 01       	movw	r14, r20
    4110:	60 e0       	ldi	r22, 0x00	; 0
    4112:	0e 94 cf 20 	call	0x419e	; 0x419e <STEPPER_set_mode>
    4116:	81 2f       	mov	r24, r17
    4118:	60 2f       	mov	r22, r16
    411a:	0e 94 ba 20 	call	0x4174	; 0x4174 <STEPPER_set_dir>
    411e:	81 2f       	mov	r24, r17
    4120:	b7 01       	movw	r22, r14
    4122:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <STEPPER_set_speed>
    4126:	1f 91       	pop	r17
    4128:	0f 91       	pop	r16
    412a:	ff 90       	pop	r15
    412c:	ef 90       	pop	r14
    412e:	08 95       	ret

00004130 <STEPPER_set_accel>:
    4130:	48 2f       	mov	r20, r24
    4132:	81 e0       	ldi	r24, 0x01	; 1
    4134:	80 93 00 08 	sts	0x0800, r24
    4138:	cb 01       	movw	r24, r22
    413a:	23 e0       	ldi	r18, 0x03	; 3
    413c:	69 3e       	cpi	r22, 0xE9	; 233
    413e:	72 07       	cpc	r23, r18
    4140:	10 f0       	brcs	.+4      	; 0x4146 <STEPPER_set_accel+0x16>
    4142:	88 ee       	ldi	r24, 0xE8	; 232
    4144:	93 e0       	ldi	r25, 0x03	; 3
    4146:	41 30       	cpi	r20, 0x01	; 1
    4148:	71 f0       	breq	.+28     	; 0x4166 <STEPPER_set_accel+0x36>
    414a:	41 30       	cpi	r20, 0x01	; 1
    414c:	18 f0       	brcs	.+6      	; 0x4154 <STEPPER_set_accel+0x24>
    414e:	42 30       	cpi	r20, 0x02	; 2
    4150:	71 f4       	brne	.+28     	; 0x416e <STEPPER_set_accel+0x3e>
    4152:	05 c0       	rjmp	.+10     	; 0x415e <STEPPER_set_accel+0x2e>
    4154:	90 93 d5 07 	sts	0x07D5, r25
    4158:	80 93 d4 07 	sts	0x07D4, r24
    415c:	08 c0       	rjmp	.+16     	; 0x416e <STEPPER_set_accel+0x3e>
    415e:	90 93 d5 07 	sts	0x07D5, r25
    4162:	80 93 d4 07 	sts	0x07D4, r24
    4166:	90 93 d7 07 	sts	0x07D7, r25
    416a:	80 93 d6 07 	sts	0x07D6, r24
    416e:	10 92 00 08 	sts	0x0800, r1
    4172:	08 95       	ret

00004174 <STEPPER_set_dir>:
    4174:	98 2f       	mov	r25, r24
    4176:	81 e0       	ldi	r24, 0x01	; 1
    4178:	80 93 00 08 	sts	0x0800, r24
    417c:	91 30       	cpi	r25, 0x01	; 1
    417e:	51 f0       	breq	.+20     	; 0x4194 <STEPPER_set_dir+0x20>
    4180:	91 30       	cpi	r25, 0x01	; 1
    4182:	18 f0       	brcs	.+6      	; 0x418a <STEPPER_set_dir+0x16>
    4184:	92 30       	cpi	r25, 0x02	; 2
    4186:	41 f4       	brne	.+16     	; 0x4198 <STEPPER_set_dir+0x24>
    4188:	03 c0       	rjmp	.+6      	; 0x4190 <STEPPER_set_dir+0x1c>
    418a:	60 93 ed 07 	sts	0x07ED, r22
    418e:	04 c0       	rjmp	.+8      	; 0x4198 <STEPPER_set_dir+0x24>
    4190:	60 93 ed 07 	sts	0x07ED, r22
    4194:	60 93 ee 07 	sts	0x07EE, r22
    4198:	10 92 00 08 	sts	0x0800, r1
    419c:	08 95       	ret

0000419e <STEPPER_set_mode>:
    419e:	98 2f       	mov	r25, r24
    41a0:	81 e0       	ldi	r24, 0x01	; 1
    41a2:	80 93 00 08 	sts	0x0800, r24
    41a6:	91 30       	cpi	r25, 0x01	; 1
    41a8:	51 f0       	breq	.+20     	; 0x41be <STEPPER_set_mode+0x20>
    41aa:	91 30       	cpi	r25, 0x01	; 1
    41ac:	18 f0       	brcs	.+6      	; 0x41b4 <STEPPER_set_mode+0x16>
    41ae:	92 30       	cpi	r25, 0x02	; 2
    41b0:	41 f4       	brne	.+16     	; 0x41c2 <STEPPER_set_mode+0x24>
    41b2:	03 c0       	rjmp	.+6      	; 0x41ba <STEPPER_set_mode+0x1c>
    41b4:	60 93 ca 07 	sts	0x07CA, r22
    41b8:	04 c0       	rjmp	.+8      	; 0x41c2 <STEPPER_set_mode+0x24>
    41ba:	60 93 ca 07 	sts	0x07CA, r22
    41be:	60 93 cb 07 	sts	0x07CB, r22
    41c2:	10 92 00 08 	sts	0x0800, r1
    41c6:	08 95       	ret

000041c8 <STEPPER_set_speed>:
    41c8:	48 2f       	mov	r20, r24
    41ca:	81 e0       	ldi	r24, 0x01	; 1
    41cc:	80 93 00 08 	sts	0x0800, r24
    41d0:	cb 01       	movw	r24, r22
    41d2:	21 e0       	ldi	r18, 0x01	; 1
    41d4:	61 39       	cpi	r22, 0x91	; 145
    41d6:	72 07       	cpc	r23, r18
    41d8:	10 f0       	brcs	.+4      	; 0x41de <STEPPER_set_speed+0x16>
    41da:	80 e9       	ldi	r24, 0x90	; 144
    41dc:	91 e0       	ldi	r25, 0x01	; 1
    41de:	41 30       	cpi	r20, 0x01	; 1
    41e0:	71 f0       	breq	.+28     	; 0x41fe <STEPPER_set_speed+0x36>
    41e2:	41 30       	cpi	r20, 0x01	; 1
    41e4:	18 f0       	brcs	.+6      	; 0x41ec <STEPPER_set_speed+0x24>
    41e6:	42 30       	cpi	r20, 0x02	; 2
    41e8:	71 f4       	brne	.+28     	; 0x4206 <STEPPER_set_speed+0x3e>
    41ea:	05 c0       	rjmp	.+10     	; 0x41f6 <STEPPER_set_speed+0x2e>
    41ec:	90 93 cd 07 	sts	0x07CD, r25
    41f0:	80 93 cc 07 	sts	0x07CC, r24
    41f4:	08 c0       	rjmp	.+16     	; 0x4206 <STEPPER_set_speed+0x3e>
    41f6:	90 93 cd 07 	sts	0x07CD, r25
    41fa:	80 93 cc 07 	sts	0x07CC, r24
    41fe:	90 93 cf 07 	sts	0x07CF, r25
    4202:	80 93 ce 07 	sts	0x07CE, r24
    4206:	10 92 00 08 	sts	0x0800, r1
    420a:	08 95       	ret

0000420c <STEPPER_set_steps>:
    420c:	98 2f       	mov	r25, r24
    420e:	81 e0       	ldi	r24, 0x01	; 1
    4210:	80 93 00 08 	sts	0x0800, r24
    4214:	91 30       	cpi	r25, 0x01	; 1
    4216:	71 f0       	breq	.+28     	; 0x4234 <STEPPER_set_steps+0x28>
    4218:	91 30       	cpi	r25, 0x01	; 1
    421a:	18 f0       	brcs	.+6      	; 0x4222 <STEPPER_set_steps+0x16>
    421c:	92 30       	cpi	r25, 0x02	; 2
    421e:	71 f4       	brne	.+28     	; 0x423c <STEPPER_set_steps+0x30>
    4220:	05 c0       	rjmp	.+10     	; 0x422c <STEPPER_set_steps+0x20>
    4222:	70 93 dd 07 	sts	0x07DD, r23
    4226:	60 93 dc 07 	sts	0x07DC, r22
    422a:	08 c0       	rjmp	.+16     	; 0x423c <STEPPER_set_steps+0x30>
    422c:	70 93 dd 07 	sts	0x07DD, r23
    4230:	60 93 dc 07 	sts	0x07DC, r22
    4234:	70 93 df 07 	sts	0x07DF, r23
    4238:	60 93 de 07 	sts	0x07DE, r22
    423c:	10 92 00 08 	sts	0x0800, r1
    4240:	08 95       	ret

00004242 <STEPPER_step>:
    4242:	8f 92       	push	r8
    4244:	9f 92       	push	r9
    4246:	af 92       	push	r10
    4248:	bf 92       	push	r11
    424a:	cf 92       	push	r12
    424c:	df 92       	push	r13
    424e:	ef 92       	push	r14
    4250:	ff 92       	push	r15
    4252:	0f 93       	push	r16
    4254:	1f 93       	push	r17
    4256:	cf 93       	push	r28
    4258:	df 93       	push	r29
    425a:	18 2f       	mov	r17, r24
    425c:	f6 2e       	mov	r15, r22
    425e:	5a 01       	movw	r10, r20
    4260:	49 01       	movw	r8, r18
    4262:	e6 01       	movw	r28, r12
    4264:	61 e0       	ldi	r22, 0x01	; 1
    4266:	0e 94 cf 20 	call	0x419e	; 0x419e <STEPPER_set_mode>
    426a:	81 2f       	mov	r24, r17
    426c:	b5 01       	movw	r22, r10
    426e:	a4 01       	movw	r20, r8
    4270:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <STEPPER_setup_decels>
    4274:	81 2f       	mov	r24, r17
    4276:	6f 2d       	mov	r22, r15
    4278:	0e 94 ba 20 	call	0x4174	; 0x4174 <STEPPER_set_dir>
    427c:	81 2f       	mov	r24, r17
    427e:	60 2f       	mov	r22, r16
    4280:	0e 94 be 29 	call	0x537c	; 0x537c <STEPPER_set_stop_mode>
    4284:	81 2f       	mov	r24, r17
    4286:	b5 01       	movw	r22, r10
    4288:	0e 94 06 21 	call	0x420c	; 0x420c <STEPPER_set_steps>
    428c:	c1 14       	cp	r12, r1
    428e:	d1 04       	cpc	r13, r1
    4290:	99 f0       	breq	.+38     	; 0x42b8 <STEPPER_step+0x76>
    4292:	11 30       	cpi	r17, 0x01	; 1
    4294:	49 f0       	breq	.+18     	; 0x42a8 <STEPPER_step+0x66>
    4296:	11 30       	cpi	r17, 0x01	; 1
    4298:	18 f0       	brcs	.+6      	; 0x42a0 <STEPPER_step+0x5e>
    429a:	12 30       	cpi	r17, 0x02	; 2
    429c:	69 f4       	brne	.+26     	; 0x42b8 <STEPPER_step+0x76>
    429e:	06 c0       	rjmp	.+12     	; 0x42ac <STEPPER_step+0x6a>
    42a0:	18 82       	st	Y, r1
    42a2:	10 92 fc 07 	sts	0x07FC, r1
    42a6:	08 c0       	rjmp	.+16     	; 0x42b8 <STEPPER_step+0x76>
    42a8:	19 82       	std	Y+1, r1	; 0x01
    42aa:	04 c0       	rjmp	.+8      	; 0x42b4 <STEPPER_step+0x72>
    42ac:	18 82       	st	Y, r1
    42ae:	19 82       	std	Y+1, r1	; 0x01
    42b0:	10 92 fc 07 	sts	0x07FC, r1
    42b4:	10 92 fd 07 	sts	0x07FD, r1
    42b8:	d0 93 ff 07 	sts	0x07FF, r29
    42bc:	c0 93 fe 07 	sts	0x07FE, r28
    42c0:	ee 20       	and	r14, r14
    42c2:	b9 f5       	brne	.+110    	; 0x4332 <STEPPER_step+0xf0>
    42c4:	88 e9       	ldi	r24, 0x98	; 152
    42c6:	94 e0       	ldi	r25, 0x04	; 4
    42c8:	90 93 ff 07 	sts	0x07FF, r25
    42cc:	80 93 fe 07 	sts	0x07FE, r24
    42d0:	81 2f       	mov	r24, r17
    42d2:	b4 01       	movw	r22, r8
    42d4:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <STEPPER_set_speed>
    42d8:	81 2f       	mov	r24, r17
    42da:	0e 94 9f 29 	call	0x533e	; 0x533e <STEPPER_go>
    42de:	11 30       	cpi	r17, 0x01	; 1
    42e0:	71 f0       	breq	.+28     	; 0x42fe <STEPPER_step+0xbc>
    42e2:	11 30       	cpi	r17, 0x01	; 1
    42e4:	18 f0       	brcs	.+6      	; 0x42ec <STEPPER_step+0xaa>
    42e6:	12 30       	cpi	r17, 0x02	; 2
    42e8:	59 f5       	brne	.+86     	; 0x4340 <STEPPER_step+0xfe>
    42ea:	12 c0       	rjmp	.+36     	; 0x4310 <STEPPER_step+0xce>
    42ec:	10 92 98 04 	sts	0x0498, r1
    42f0:	10 92 fc 07 	sts	0x07FC, r1
    42f4:	80 91 98 04 	lds	r24, 0x0498
    42f8:	88 23       	and	r24, r24
    42fa:	e1 f3       	breq	.-8      	; 0x42f4 <STEPPER_step+0xb2>
    42fc:	21 c0       	rjmp	.+66     	; 0x4340 <STEPPER_step+0xfe>
    42fe:	10 92 99 04 	sts	0x0499, r1
    4302:	10 92 fd 07 	sts	0x07FD, r1
    4306:	80 91 99 04 	lds	r24, 0x0499
    430a:	88 23       	and	r24, r24
    430c:	e1 f3       	breq	.-8      	; 0x4306 <STEPPER_step+0xc4>
    430e:	18 c0       	rjmp	.+48     	; 0x4340 <STEPPER_step+0xfe>
    4310:	10 92 98 04 	sts	0x0498, r1
    4314:	10 92 99 04 	sts	0x0499, r1
    4318:	10 92 fc 07 	sts	0x07FC, r1
    431c:	10 92 fd 07 	sts	0x07FD, r1
    4320:	80 91 98 04 	lds	r24, 0x0498
    4324:	88 23       	and	r24, r24
    4326:	e1 f3       	breq	.-8      	; 0x4320 <STEPPER_step+0xde>
    4328:	80 91 99 04 	lds	r24, 0x0499
    432c:	88 23       	and	r24, r24
    432e:	c1 f3       	breq	.-16     	; 0x4320 <STEPPER_step+0xde>
    4330:	07 c0       	rjmp	.+14     	; 0x4340 <STEPPER_step+0xfe>
    4332:	81 2f       	mov	r24, r17
    4334:	b4 01       	movw	r22, r8
    4336:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <STEPPER_set_speed>
    433a:	81 2f       	mov	r24, r17
    433c:	0e 94 9f 29 	call	0x533e	; 0x533e <STEPPER_go>
    4340:	df 91       	pop	r29
    4342:	cf 91       	pop	r28
    4344:	1f 91       	pop	r17
    4346:	0f 91       	pop	r16
    4348:	ff 90       	pop	r15
    434a:	ef 90       	pop	r14
    434c:	df 90       	pop	r13
    434e:	cf 90       	pop	r12
    4350:	bf 90       	pop	r11
    4352:	af 90       	pop	r10
    4354:	9f 90       	pop	r9
    4356:	8f 90       	pop	r8
    4358:	08 95       	ret

0000435a <STEPPER_stop>:
    435a:	0f 93       	push	r16
    435c:	1f 93       	push	r17
    435e:	18 2f       	mov	r17, r24
    4360:	06 2f       	mov	r16, r22
    4362:	66 23       	and	r22, r22
    4364:	49 f4       	brne	.+18     	; 0x4378 <STEPPER_stop+0x1e>
    4366:	60 e0       	ldi	r22, 0x00	; 0
    4368:	70 e0       	ldi	r23, 0x00	; 0
    436a:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <STEPPER_set_speed>
    436e:	81 2f       	mov	r24, r17
    4370:	60 e0       	ldi	r22, 0x00	; 0
    4372:	70 e0       	ldi	r23, 0x00	; 0
    4374:	0e 94 06 21 	call	0x420c	; 0x420c <STEPPER_set_steps>
    4378:	81 e0       	ldi	r24, 0x01	; 1
    437a:	80 93 00 08 	sts	0x0800, r24
    437e:	11 30       	cpi	r17, 0x01	; 1
    4380:	51 f0       	breq	.+20     	; 0x4396 <STEPPER_stop+0x3c>
    4382:	11 30       	cpi	r17, 0x01	; 1
    4384:	18 f0       	brcs	.+6      	; 0x438c <STEPPER_stop+0x32>
    4386:	12 30       	cpi	r17, 0x02	; 2
    4388:	41 f4       	brne	.+16     	; 0x439a <STEPPER_stop+0x40>
    438a:	03 c0       	rjmp	.+6      	; 0x4392 <STEPPER_stop+0x38>
    438c:	00 93 e8 07 	sts	0x07E8, r16
    4390:	04 c0       	rjmp	.+8      	; 0x439a <STEPPER_stop+0x40>
    4392:	00 93 e8 07 	sts	0x07E8, r16
    4396:	00 93 e9 07 	sts	0x07E9, r16
    439a:	10 92 00 08 	sts	0x0800, r1
    439e:	1f 91       	pop	r17
    43a0:	0f 91       	pop	r16
    43a2:	08 95       	ret

000043a4 <STEPPER_wait_and_then>:
    43a4:	cf 92       	push	r12
    43a6:	df 92       	push	r13
    43a8:	ef 92       	push	r14
    43aa:	ff 92       	push	r15
    43ac:	0f 93       	push	r16
    43ae:	1f 93       	push	r17
    43b0:	df 93       	push	r29
    43b2:	cf 93       	push	r28
    43b4:	cd b7       	in	r28, 0x3d	; 61
    43b6:	de b7       	in	r29, 0x3e	; 62
    43b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    43ba:	81 30       	cpi	r24, 0x01	; 1
    43bc:	61 f0       	breq	.+24     	; 0x43d6 <STEPPER_wait_and_then+0x32>
    43be:	81 30       	cpi	r24, 0x01	; 1
    43c0:	18 f0       	brcs	.+6      	; 0x43c8 <STEPPER_wait_and_then+0x24>
    43c2:	82 30       	cpi	r24, 0x02	; 2
    43c4:	a1 f5       	brne	.+104    	; 0x442e <STEPPER_wait_and_then+0x8a>
    43c6:	11 c0       	rjmp	.+34     	; 0x43ea <STEPPER_wait_and_then+0x46>
    43c8:	ec 85       	ldd	r30, Y+12	; 0x0c
    43ca:	fd 85       	ldd	r31, Y+13	; 0x0d
    43cc:	80 91 01 08 	lds	r24, 0x0801
    43d0:	88 23       	and	r24, r24
    43d2:	e1 f3       	breq	.-8      	; 0x43cc <STEPPER_wait_and_then+0x28>
    43d4:	06 c0       	rjmp	.+12     	; 0x43e2 <STEPPER_wait_and_then+0x3e>
    43d6:	ec 85       	ldd	r30, Y+12	; 0x0c
    43d8:	fd 85       	ldd	r31, Y+13	; 0x0d
    43da:	80 91 02 08 	lds	r24, 0x0802
    43de:	88 23       	and	r24, r24
    43e0:	e1 f3       	breq	.-8      	; 0x43da <STEPPER_wait_and_then+0x36>
    43e2:	30 97       	sbiw	r30, 0x00	; 0
    43e4:	21 f1       	breq	.+72     	; 0x442e <STEPPER_wait_and_then+0x8a>
    43e6:	09 95       	icall
    43e8:	22 c0       	rjmp	.+68     	; 0x442e <STEPPER_wait_and_then+0x8a>
    43ea:	cc 84       	ldd	r12, Y+12	; 0x0c
    43ec:	dd 84       	ldd	r13, Y+13	; 0x0d
    43ee:	ee 84       	ldd	r14, Y+14	; 0x0e
    43f0:	ff 84       	ldd	r15, Y+15	; 0x0f
    43f2:	00 e0       	ldi	r16, 0x00	; 0
    43f4:	10 e0       	ldi	r17, 0x00	; 0
    43f6:	00 23       	and	r16, r16
    43f8:	51 f4       	brne	.+20     	; 0x440e <STEPPER_wait_and_then+0x6a>
    43fa:	80 91 01 08 	lds	r24, 0x0801
    43fe:	88 23       	and	r24, r24
    4400:	31 f0       	breq	.+12     	; 0x440e <STEPPER_wait_and_then+0x6a>
    4402:	c1 14       	cp	r12, r1
    4404:	d1 04       	cpc	r13, r1
    4406:	11 f0       	breq	.+4      	; 0x440c <STEPPER_wait_and_then+0x68>
    4408:	f6 01       	movw	r30, r12
    440a:	09 95       	icall
    440c:	01 e0       	ldi	r16, 0x01	; 1
    440e:	11 23       	and	r17, r17
    4410:	51 f4       	brne	.+20     	; 0x4426 <STEPPER_wait_and_then+0x82>
    4412:	80 91 02 08 	lds	r24, 0x0802
    4416:	88 23       	and	r24, r24
    4418:	31 f0       	breq	.+12     	; 0x4426 <STEPPER_wait_and_then+0x82>
    441a:	e1 14       	cp	r14, r1
    441c:	f1 04       	cpc	r15, r1
    441e:	11 f0       	breq	.+4      	; 0x4424 <STEPPER_wait_and_then+0x80>
    4420:	f7 01       	movw	r30, r14
    4422:	09 95       	icall
    4424:	11 e0       	ldi	r17, 0x01	; 1
    4426:	00 23       	and	r16, r16
    4428:	31 f3       	breq	.-52     	; 0x43f6 <STEPPER_wait_and_then+0x52>
    442a:	11 23       	and	r17, r17
    442c:	21 f3       	breq	.-56     	; 0x43f6 <STEPPER_wait_and_then+0x52>
    442e:	cf 91       	pop	r28
    4430:	df 91       	pop	r29
    4432:	1f 91       	pop	r17
    4434:	0f 91       	pop	r16
    4436:	ff 90       	pop	r15
    4438:	ef 90       	pop	r14
    443a:	df 90       	pop	r13
    443c:	cf 90       	pop	r12
    443e:	08 95       	ret

00004440 <SYS_get_state>:
    4440:	e8 2f       	mov	r30, r24
    4442:	f0 e0       	ldi	r31, 0x00	; 0
    4444:	e3 31       	cpi	r30, 0x13	; 19
    4446:	f1 05       	cpc	r31, r1
    4448:	40 f4       	brcc	.+16     	; 0x445a <SYS_get_state+0x1a>
    444a:	e2 5c       	subi	r30, 0xC2	; 194
    444c:	ff 4f       	sbci	r31, 0xFF	; 255
    444e:	ee 0f       	add	r30, r30
    4450:	ff 1f       	adc	r31, r31
    4452:	05 90       	lpm	r0, Z+
    4454:	f4 91       	lpm	r31, Z+
    4456:	e0 2d       	mov	r30, r0
    4458:	09 94       	ijmp
    445a:	80 e0       	ldi	r24, 0x00	; 0
    445c:	08 95       	ret
    445e:	80 91 03 08 	lds	r24, 0x0803
    4462:	08 95       	ret
    4464:	80 91 04 08 	lds	r24, 0x0804
    4468:	08 95       	ret
    446a:	80 91 05 08 	lds	r24, 0x0805
    446e:	08 95       	ret
    4470:	80 91 06 08 	lds	r24, 0x0806
    4474:	08 95       	ret
    4476:	80 91 07 08 	lds	r24, 0x0807
    447a:	08 95       	ret
    447c:	80 91 09 08 	lds	r24, 0x0809
    4480:	08 95       	ret
    4482:	80 91 08 08 	lds	r24, 0x0808
    4486:	08 95       	ret
    4488:	80 91 0a 08 	lds	r24, 0x080A
    448c:	08 95       	ret
    448e:	80 91 0b 08 	lds	r24, 0x080B
    4492:	08 95       	ret
    4494:	80 91 0c 08 	lds	r24, 0x080C
    4498:	08 95       	ret
    449a:	80 91 0d 08 	lds	r24, 0x080D
    449e:	08 95       	ret
    44a0:	80 91 0e 08 	lds	r24, 0x080E
    44a4:	08 95       	ret
    44a6:	80 91 0f 08 	lds	r24, 0x080F
    44aa:	08 95       	ret
    44ac:	80 91 10 08 	lds	r24, 0x0810
    44b0:	08 95       	ret
    44b2:	80 91 11 08 	lds	r24, 0x0811
    44b6:	08 95       	ret
    44b8:	80 91 12 08 	lds	r24, 0x0812
    44bc:	08 95       	ret
    44be:	80 91 13 08 	lds	r24, 0x0813
    44c2:	08 95       	ret
    44c4:	80 91 14 08 	lds	r24, 0x0814
    44c8:	08 95       	ret
    44ca:	80 91 15 08 	lds	r24, 0x0815
    44ce:	08 95       	ret

000044d0 <SYS_set_state>:
    44d0:	e8 2f       	mov	r30, r24
    44d2:	f0 e0       	ldi	r31, 0x00	; 0
    44d4:	e3 31       	cpi	r30, 0x13	; 19
    44d6:	f1 05       	cpc	r31, r1
    44d8:	08 f0       	brcs	.+2      	; 0x44dc <SYS_set_state+0xc>
    44da:	40 c0       	rjmp	.+128    	; 0x455c <SYS_set_state+0x8c>
    44dc:	ef 5a       	subi	r30, 0xAF	; 175
    44de:	ff 4f       	sbci	r31, 0xFF	; 255
    44e0:	ee 0f       	add	r30, r30
    44e2:	ff 1f       	adc	r31, r31
    44e4:	05 90       	lpm	r0, Z+
    44e6:	f4 91       	lpm	r31, Z+
    44e8:	e0 2d       	mov	r30, r0
    44ea:	09 94       	ijmp
    44ec:	60 93 03 08 	sts	0x0803, r22
    44f0:	08 95       	ret
    44f2:	60 93 04 08 	sts	0x0804, r22
    44f6:	08 95       	ret
    44f8:	60 93 05 08 	sts	0x0805, r22
    44fc:	08 95       	ret
    44fe:	60 93 06 08 	sts	0x0806, r22
    4502:	08 95       	ret
    4504:	60 93 07 08 	sts	0x0807, r22
    4508:	08 95       	ret
    450a:	60 93 09 08 	sts	0x0809, r22
    450e:	08 95       	ret
    4510:	60 93 08 08 	sts	0x0808, r22
    4514:	08 95       	ret
    4516:	60 93 0a 08 	sts	0x080A, r22
    451a:	08 95       	ret
    451c:	60 93 0b 08 	sts	0x080B, r22
    4520:	08 95       	ret
    4522:	60 93 0c 08 	sts	0x080C, r22
    4526:	08 95       	ret
    4528:	60 93 0d 08 	sts	0x080D, r22
    452c:	08 95       	ret
    452e:	60 93 0e 08 	sts	0x080E, r22
    4532:	08 95       	ret
    4534:	60 93 0f 08 	sts	0x080F, r22
    4538:	08 95       	ret
    453a:	60 93 10 08 	sts	0x0810, r22
    453e:	08 95       	ret
    4540:	60 93 11 08 	sts	0x0811, r22
    4544:	08 95       	ret
    4546:	60 93 12 08 	sts	0x0812, r22
    454a:	08 95       	ret
    454c:	60 93 13 08 	sts	0x0813, r22
    4550:	08 95       	ret
    4552:	60 93 14 08 	sts	0x0814, r22
    4556:	08 95       	ret
    4558:	60 93 13 08 	sts	0x0813, r22
    455c:	08 95       	ret

0000455e <ATTINY_get_sensors>:
    455e:	0f 93       	push	r16
    4560:	1f 93       	push	r17
    4562:	81 e0       	ldi	r24, 0x01	; 1
    4564:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    4568:	81 30       	cpi	r24, 0x01	; 1
    456a:	11 f0       	breq	.+4      	; 0x4570 <ATTINY_get_sensors+0x12>
    456c:	00 e0       	ldi	r16, 0x00	; 0
    456e:	24 c0       	rjmp	.+72     	; 0x45b8 <ATTINY_get_sensors+0x5a>
    4570:	87 e0       	ldi	r24, 0x07	; 7
    4572:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <SPI_set_slave_addr>
    4576:	82 e0       	ldi	r24, 0x02	; 2
    4578:	6a e0       	ldi	r22, 0x0A	; 10
    457a:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <SPI_transmit>
    457e:	82 e0       	ldi	r24, 0x02	; 2
    4580:	62 eb       	ldi	r22, 0xB2	; 178
    4582:	0e 94 0e 1e 	call	0x3c1c	; 0x3c1c <SPI_transmit>
    4586:	18 ec       	ldi	r17, 0xC8	; 200
    4588:	81 2f       	mov	r24, r17
    458a:	8a 95       	dec	r24
    458c:	f1 f7       	brne	.-4      	; 0x458a <ATTINY_get_sensors+0x2c>
    458e:	82 e0       	ldi	r24, 0x02	; 2
    4590:	60 e0       	ldi	r22, 0x00	; 0
    4592:	0e 94 8a 28 	call	0x5114	; 0x5114 <SPI_receive>
    4596:	08 2f       	mov	r16, r24
    4598:	81 2f       	mov	r24, r17
    459a:	8a 95       	dec	r24
    459c:	f1 f7       	brne	.-4      	; 0x459a <ATTINY_get_sensors+0x3c>
    459e:	82 e0       	ldi	r24, 0x02	; 2
    45a0:	60 e0       	ldi	r22, 0x00	; 0
    45a2:	0e 94 8a 28 	call	0x5114	; 0x5114 <SPI_receive>
    45a6:	1a 95       	dec	r17
    45a8:	f1 f7       	brne	.-4      	; 0x45a6 <ATTINY_get_sensors+0x48>
    45aa:	87 e0       	ldi	r24, 0x07	; 7
    45ac:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <SPI_set_slave_addr>
    45b0:	88 e8       	ldi	r24, 0x88	; 136
    45b2:	93 e1       	ldi	r25, 0x13	; 19
    45b4:	01 97       	sbiw	r24, 0x01	; 1
    45b6:	f1 f7       	brne	.-4      	; 0x45b4 <ATTINY_get_sensors+0x56>
    45b8:	80 2f       	mov	r24, r16
    45ba:	1f 91       	pop	r17
    45bc:	0f 91       	pop	r16
    45be:	08 95       	ret

000045c0 <ATTINY_get_SW_state>:
    45c0:	1f 93       	push	r17
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	18 2f       	mov	r17, r24
    45c8:	80 91 9b 04 	lds	r24, 0x049B
    45cc:	88 23       	and	r24, r24
    45ce:	41 f0       	breq	.+16     	; 0x45e0 <ATTINY_get_SW_state+0x20>
    45d0:	80 91 a5 04 	lds	r24, 0x04A5
    45d4:	88 23       	and	r24, r24
    45d6:	99 f0       	breq	.+38     	; 0x45fe <ATTINY_get_SW_state+0x3e>
    45d8:	10 92 9b 04 	sts	0x049B, r1
    45dc:	10 92 a5 04 	sts	0x04A5, r1
    45e0:	0e 94 af 22 	call	0x455e	; 0x455e <ATTINY_get_sensors>
    45e4:	80 93 9a 04 	sts	0x049A, r24
    45e8:	8f e9       	ldi	r24, 0x9F	; 159
    45ea:	94 e0       	ldi	r25, 0x04	; 4
    45ec:	61 e0       	ldi	r22, 0x01	; 1
    45ee:	40 e0       	ldi	r20, 0x00	; 0
    45f0:	22 e3       	ldi	r18, 0x32	; 50
    45f2:	30 e0       	ldi	r19, 0x00	; 0
    45f4:	0e 94 9e 23 	call	0x473c	; 0x473c <TMRSRVC_new>
    45f8:	81 e0       	ldi	r24, 0x01	; 1
    45fa:	80 93 9b 04 	sts	0x049B, r24
    45fe:	90 91 9a 04 	lds	r25, 0x049A
    4602:	a1 2f       	mov	r26, r17
    4604:	b0 e0       	ldi	r27, 0x00	; 0
    4606:	ed 01       	movw	r28, r26
    4608:	ce 5b       	subi	r28, 0xBE	; 190
    460a:	db 4f       	sbci	r29, 0xFB	; 251
    460c:	88 81       	ld	r24, Y
    460e:	88 23       	and	r24, r24
    4610:	69 f0       	breq	.+26     	; 0x462c <ATTINY_get_SW_state+0x6c>
    4612:	fd 01       	movw	r30, r26
    4614:	eb 5b       	subi	r30, 0xBB	; 187
    4616:	fb 4f       	sbci	r31, 0xFB	; 251
    4618:	80 81       	ld	r24, Z
    461a:	98 23       	and	r25, r24
    461c:	c1 f0       	breq	.+48     	; 0x464e <ATTINY_get_SW_state+0x8e>
    461e:	fd 01       	movw	r30, r26
    4620:	e4 56       	subi	r30, 0x64	; 100
    4622:	fb 4f       	sbci	r31, 0xFB	; 251
    4624:	81 e0       	ldi	r24, 0x01	; 1
    4626:	80 83       	st	Z, r24
    4628:	18 82       	st	Y, r1
    462a:	11 c0       	rjmp	.+34     	; 0x464e <ATTINY_get_SW_state+0x8e>
    462c:	fd 01       	movw	r30, r26
    462e:	e4 56       	subi	r30, 0x64	; 100
    4630:	fb 4f       	sbci	r31, 0xFB	; 251
    4632:	80 81       	ld	r24, Z
    4634:	81 11       	cpse	r24, r1
    4636:	10 82       	st	Z, r1
    4638:	fd 01       	movw	r30, r26
    463a:	eb 5b       	subi	r30, 0xBB	; 187
    463c:	fb 4f       	sbci	r31, 0xFB	; 251
    463e:	80 81       	ld	r24, Z
    4640:	98 23       	and	r25, r24
    4642:	29 f4       	brne	.+10     	; 0x464e <ATTINY_get_SW_state+0x8e>
    4644:	fd 01       	movw	r30, r26
    4646:	ee 5b       	subi	r30, 0xBE	; 190
    4648:	fb 4f       	sbci	r31, 0xFB	; 251
    464a:	81 e0       	ldi	r24, 0x01	; 1
    464c:	80 83       	st	Z, r24
    464e:	a4 56       	subi	r26, 0x64	; 100
    4650:	bb 4f       	sbci	r27, 0xFB	; 251
    4652:	8c 91       	ld	r24, X
    4654:	df 91       	pop	r29
    4656:	cf 91       	pop	r28
    4658:	1f 91       	pop	r17
    465a:	08 95       	ret

0000465c <ATTINY_open>:
    465c:	82 e0       	ldi	r24, 0x02	; 2
    465e:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    4662:	88 23       	and	r24, r24
    4664:	19 f4       	brne	.+6      	; 0x466c <ATTINY_open+0x10>
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	82 e0       	ldi	r24, 0x02	; 2
    466a:	08 95       	ret
    466c:	10 92 31 08 	sts	0x0831, r1
    4670:	10 92 30 08 	sts	0x0830, r1
    4674:	10 92 33 08 	sts	0x0833, r1
    4678:	10 92 32 08 	sts	0x0832, r1
    467c:	10 92 35 08 	sts	0x0835, r1
    4680:	10 92 34 08 	sts	0x0834, r1
    4684:	10 92 37 08 	sts	0x0837, r1
    4688:	10 92 36 08 	sts	0x0836, r1
    468c:	10 92 39 08 	sts	0x0839, r1
    4690:	10 92 38 08 	sts	0x0838, r1
    4694:	80 e9       	ldi	r24, 0x90	; 144
    4696:	91 e0       	ldi	r25, 0x01	; 1
    4698:	90 93 1d 08 	sts	0x081D, r25
    469c:	80 93 1c 08 	sts	0x081C, r24
    46a0:	90 93 1f 08 	sts	0x081F, r25
    46a4:	80 93 1e 08 	sts	0x081E, r24
    46a8:	90 93 21 08 	sts	0x0821, r25
    46ac:	80 93 20 08 	sts	0x0820, r24
    46b0:	90 93 23 08 	sts	0x0823, r25
    46b4:	80 93 22 08 	sts	0x0822, r24
    46b8:	90 93 25 08 	sts	0x0825, r25
    46bc:	80 93 24 08 	sts	0x0824, r24
    46c0:	84 e3       	ldi	r24, 0x34	; 52
    46c2:	98 e0       	ldi	r25, 0x08	; 8
    46c4:	90 93 27 08 	sts	0x0827, r25
    46c8:	80 93 26 08 	sts	0x0826, r24
    46cc:	90 93 29 08 	sts	0x0829, r25
    46d0:	80 93 28 08 	sts	0x0828, r24
    46d4:	90 93 2b 08 	sts	0x082B, r25
    46d8:	80 93 2a 08 	sts	0x082A, r24
    46dc:	90 93 2d 08 	sts	0x082D, r25
    46e0:	80 93 2c 08 	sts	0x082C, r24
    46e4:	90 93 2f 08 	sts	0x082F, r25
    46e8:	80 93 2e 08 	sts	0x082E, r24
    46ec:	81 e0       	ldi	r24, 0x01	; 1
    46ee:	61 e0       	ldi	r22, 0x01	; 1
    46f0:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    46f4:	91 e0       	ldi	r25, 0x01	; 1
    46f6:	81 e0       	ldi	r24, 0x01	; 1
    46f8:	08 95       	ret

000046fa <TMRSRVC_delay>:
    46fa:	df 93       	push	r29
    46fc:	cf 93       	push	r28
    46fe:	cd b7       	in	r28, 0x3d	; 61
    4700:	de b7       	in	r29, 0x3e	; 62
    4702:	29 97       	sbiw	r28, 0x09	; 9
    4704:	0f b6       	in	r0, 0x3f	; 63
    4706:	f8 94       	cli
    4708:	de bf       	out	0x3e, r29	; 62
    470a:	0f be       	out	0x3f, r0	; 63
    470c:	cd bf       	out	0x3d, r28	; 61
    470e:	9c 01       	movw	r18, r24
    4710:	ce 01       	movw	r24, r28
    4712:	01 96       	adiw	r24, 0x01	; 1
    4714:	61 e0       	ldi	r22, 0x01	; 1
    4716:	40 e0       	ldi	r20, 0x00	; 0
    4718:	0e 94 9e 23 	call	0x473c	; 0x473c <TMRSRVC_new>
    471c:	98 2f       	mov	r25, r24
    471e:	88 23       	and	r24, r24
    4720:	19 f4       	brne	.+6      	; 0x4728 <TMRSRVC_delay+0x2e>
    4722:	8f 81       	ldd	r24, Y+7	; 0x07
    4724:	88 23       	and	r24, r24
    4726:	e9 f3       	breq	.-6      	; 0x4722 <TMRSRVC_delay+0x28>
    4728:	89 2f       	mov	r24, r25
    472a:	29 96       	adiw	r28, 0x09	; 9
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	f8 94       	cli
    4730:	de bf       	out	0x3e, r29	; 62
    4732:	0f be       	out	0x3f, r0	; 63
    4734:	cd bf       	out	0x3d, r28	; 61
    4736:	cf 91       	pop	r28
    4738:	df 91       	pop	r29
    473a:	08 95       	ret

0000473c <TMRSRVC_new>:
    473c:	ef 92       	push	r14
    473e:	ff 92       	push	r15
    4740:	0f 93       	push	r16
    4742:	1f 93       	push	r17
    4744:	cf 93       	push	r28
    4746:	df 93       	push	r29
    4748:	ec 01       	movw	r28, r24
    474a:	f6 2e       	mov	r15, r22
    474c:	e4 2e       	mov	r14, r20
    474e:	89 01       	movw	r16, r18
    4750:	88 e0       	ldi	r24, 0x08	; 8
    4752:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    4756:	81 30       	cpi	r24, 0x01	; 1
    4758:	11 f0       	breq	.+4      	; 0x475e <TMRSRVC_new+0x22>
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	26 c0       	rjmp	.+76     	; 0x47aa <TMRSRVC_new+0x6e>
    475e:	84 e0       	ldi	r24, 0x04	; 4
    4760:	90 e0       	ldi	r25, 0x00	; 0
    4762:	0e 94 1a 37 	call	0x6e34	; 0x6e34 <malloc>
    4766:	fc 01       	movw	r30, r24
    4768:	00 97       	sbiw	r24, 0x00	; 0
    476a:	11 f4       	brne	.+4      	; 0x4770 <TMRSRVC_new+0x34>
    476c:	82 e0       	ldi	r24, 0x02	; 2
    476e:	1d c0       	rjmp	.+58     	; 0x47aa <TMRSRVC_new+0x6e>
    4770:	f9 82       	std	Y+1, r15	; 0x01
    4772:	f0 fc       	sbrc	r15, 0
    4774:	1e 82       	std	Y+6, r1	; 0x06
    4776:	81 e0       	ldi	r24, 0x01	; 1
    4778:	e8 16       	cp	r14, r24
    477a:	19 f4       	brne	.+6      	; 0x4782 <TMRSRVC_new+0x46>
    477c:	89 81       	ldd	r24, Y+1	; 0x01
    477e:	84 60       	ori	r24, 0x04	; 4
    4780:	89 83       	std	Y+1, r24	; 0x01
    4782:	89 81       	ldd	r24, Y+1	; 0x01
    4784:	88 60       	ori	r24, 0x08	; 8
    4786:	89 83       	std	Y+1, r24	; 0x01
    4788:	1b 83       	std	Y+3, r17	; 0x03
    478a:	0a 83       	std	Y+2, r16	; 0x02
    478c:	1d 83       	std	Y+5, r17	; 0x05
    478e:	0c 83       	std	Y+4, r16	; 0x04
    4790:	d1 83       	std	Z+1, r29	; 0x01
    4792:	c0 83       	st	Z, r28
    4794:	13 82       	std	Z+3, r1	; 0x03
    4796:	12 82       	std	Z+2, r1	; 0x02
    4798:	81 e0       	ldi	r24, 0x01	; 1
    479a:	80 93 08 05 	sts	0x0508, r24
    479e:	cf 01       	movw	r24, r30
    47a0:	0e 94 33 2a 	call	0x5466	; 0x5466 <TMRSRVC_insert>
    47a4:	10 92 08 05 	sts	0x0508, r1
    47a8:	80 e0       	ldi	r24, 0x00	; 0
    47aa:	df 91       	pop	r29
    47ac:	cf 91       	pop	r28
    47ae:	1f 91       	pop	r17
    47b0:	0f 91       	pop	r16
    47b2:	ff 90       	pop	r15
    47b4:	ef 90       	pop	r14
    47b6:	08 95       	ret

000047b8 <I2C_MSTR_get>:
    47b8:	fc 01       	movw	r30, r24
    47ba:	80 91 3d 08 	lds	r24, 0x083D
    47be:	81 30       	cpi	r24, 0x01	; 1
    47c0:	11 f0       	breq	.+4      	; 0x47c6 <I2C_MSTR_get+0xe>
    47c2:	85 e0       	ldi	r24, 0x05	; 5
    47c4:	08 95       	ret
    47c6:	80 91 3e 08 	lds	r24, 0x083E
    47ca:	81 30       	cpi	r24, 0x01	; 1
    47cc:	11 f0       	breq	.+4      	; 0x47d2 <I2C_MSTR_get+0x1a>
    47ce:	8a e0       	ldi	r24, 0x0A	; 10
    47d0:	08 95       	ret
    47d2:	61 30       	cpi	r22, 0x01	; 1
    47d4:	11 f4       	brne	.+4      	; 0x47da <I2C_MSTR_get+0x22>
    47d6:	84 ec       	ldi	r24, 0xC4	; 196
    47d8:	01 c0       	rjmp	.+2      	; 0x47dc <I2C_MSTR_get+0x24>
    47da:	84 e8       	ldi	r24, 0x84	; 132
    47dc:	80 93 bc 00 	sts	0x00BC, r24
    47e0:	80 91 bc 00 	lds	r24, 0x00BC
    47e4:	87 ff       	sbrs	r24, 7
    47e6:	fc cf       	rjmp	.-8      	; 0x47e0 <I2C_MSTR_get+0x28>
    47e8:	61 30       	cpi	r22, 0x01	; 1
    47ea:	31 f4       	brne	.+12     	; 0x47f8 <I2C_MSTR_get+0x40>
    47ec:	80 91 b9 00 	lds	r24, 0x00B9
    47f0:	88 7f       	andi	r24, 0xF8	; 248
    47f2:	80 35       	cpi	r24, 0x50	; 80
    47f4:	59 f4       	brne	.+22     	; 0x480c <I2C_MSTR_get+0x54>
    47f6:	05 c0       	rjmp	.+10     	; 0x4802 <I2C_MSTR_get+0x4a>
    47f8:	80 91 b9 00 	lds	r24, 0x00B9
    47fc:	88 7f       	andi	r24, 0xF8	; 248
    47fe:	88 35       	cpi	r24, 0x58	; 88
    4800:	29 f4       	brne	.+10     	; 0x480c <I2C_MSTR_get+0x54>
    4802:	80 91 bb 00 	lds	r24, 0x00BB
    4806:	80 83       	st	Z, r24
    4808:	80 e0       	ldi	r24, 0x00	; 0
    480a:	08 95       	ret
    480c:	82 e0       	ldi	r24, 0x02	; 2
    480e:	08 95       	ret

00004810 <I2C_MSTR_send>:
    4810:	98 2f       	mov	r25, r24
    4812:	80 91 3d 08 	lds	r24, 0x083D
    4816:	81 30       	cpi	r24, 0x01	; 1
    4818:	11 f0       	breq	.+4      	; 0x481e <I2C_MSTR_send+0xe>
    481a:	85 e0       	ldi	r24, 0x05	; 5
    481c:	08 95       	ret
    481e:	80 91 3e 08 	lds	r24, 0x083E
    4822:	81 30       	cpi	r24, 0x01	; 1
    4824:	11 f0       	breq	.+4      	; 0x482a <I2C_MSTR_send+0x1a>
    4826:	8a e0       	ldi	r24, 0x0A	; 10
    4828:	08 95       	ret
    482a:	90 93 bb 00 	sts	0x00BB, r25
    482e:	84 e8       	ldi	r24, 0x84	; 132
    4830:	80 93 bc 00 	sts	0x00BC, r24
    4834:	80 91 bc 00 	lds	r24, 0x00BC
    4838:	87 ff       	sbrs	r24, 7
    483a:	fc cf       	rjmp	.-8      	; 0x4834 <I2C_MSTR_send+0x24>
    483c:	80 91 b9 00 	lds	r24, 0x00B9
    4840:	90 e0       	ldi	r25, 0x00	; 0
    4842:	88 7f       	andi	r24, 0xF8	; 248
    4844:	90 70       	andi	r25, 0x00	; 0
    4846:	88 32       	cpi	r24, 0x28	; 40
    4848:	91 05       	cpc	r25, r1
    484a:	21 f0       	breq	.+8      	; 0x4854 <I2C_MSTR_send+0x44>
    484c:	c0 97       	sbiw	r24, 0x30	; 48
    484e:	21 f4       	brne	.+8      	; 0x4858 <I2C_MSTR_send+0x48>
    4850:	83 e0       	ldi	r24, 0x03	; 3
    4852:	08 95       	ret
    4854:	80 e0       	ldi	r24, 0x00	; 0
    4856:	08 95       	ret
    4858:	8c e0       	ldi	r24, 0x0C	; 12
    485a:	08 95       	ret

0000485c <I2C_MSTR_start>:
    485c:	98 2f       	mov	r25, r24
    485e:	20 91 3d 08 	lds	r18, 0x083D
    4862:	21 30       	cpi	r18, 0x01	; 1
    4864:	11 f0       	breq	.+4      	; 0x486a <I2C_MSTR_start+0xe>
    4866:	85 e0       	ldi	r24, 0x05	; 5
    4868:	08 95       	ret
    486a:	80 91 3f 08 	lds	r24, 0x083F
    486e:	81 30       	cpi	r24, 0x01	; 1
    4870:	11 f4       	brne	.+4      	; 0x4876 <I2C_MSTR_start+0x1a>
    4872:	89 e0       	ldi	r24, 0x09	; 9
    4874:	08 95       	ret
    4876:	20 93 3e 08 	sts	0x083E, r18
    487a:	84 ea       	ldi	r24, 0xA4	; 164
    487c:	80 93 bc 00 	sts	0x00BC, r24
    4880:	80 91 bc 00 	lds	r24, 0x00BC
    4884:	87 ff       	sbrs	r24, 7
    4886:	fc cf       	rjmp	.-8      	; 0x4880 <I2C_MSTR_start+0x24>
    4888:	80 91 b9 00 	lds	r24, 0x00B9
    488c:	88 7f       	andi	r24, 0xF8	; 248
    488e:	88 30       	cpi	r24, 0x08	; 8
    4890:	39 f0       	breq	.+14     	; 0x48a0 <I2C_MSTR_start+0x44>
    4892:	80 91 b9 00 	lds	r24, 0x00B9
    4896:	88 7f       	andi	r24, 0xF8	; 248
    4898:	80 31       	cpi	r24, 0x10	; 16
    489a:	11 f0       	breq	.+4      	; 0x48a0 <I2C_MSTR_start+0x44>
    489c:	81 e0       	ldi	r24, 0x01	; 1
    489e:	08 95       	ret
    48a0:	61 30       	cpi	r22, 0x01	; 1
    48a2:	19 f4       	brne	.+6      	; 0x48aa <I2C_MSTR_start+0x4e>
    48a4:	99 0f       	add	r25, r25
    48a6:	91 60       	ori	r25, 0x01	; 1
    48a8:	03 c0       	rjmp	.+6      	; 0x48b0 <I2C_MSTR_start+0x54>
    48aa:	66 23       	and	r22, r22
    48ac:	19 f4       	brne	.+6      	; 0x48b4 <I2C_MSTR_start+0x58>
    48ae:	99 0f       	add	r25, r25
    48b0:	90 93 bb 00 	sts	0x00BB, r25
    48b4:	84 e8       	ldi	r24, 0x84	; 132
    48b6:	80 93 bc 00 	sts	0x00BC, r24
    48ba:	80 91 bc 00 	lds	r24, 0x00BC
    48be:	87 ff       	sbrs	r24, 7
    48c0:	fc cf       	rjmp	.-8      	; 0x48ba <I2C_MSTR_start+0x5e>
    48c2:	61 30       	cpi	r22, 0x01	; 1
    48c4:	31 f4       	brne	.+12     	; 0x48d2 <I2C_MSTR_start+0x76>
    48c6:	80 91 b9 00 	lds	r24, 0x00B9
    48ca:	88 7f       	andi	r24, 0xF8	; 248
    48cc:	80 34       	cpi	r24, 0x40	; 64
    48ce:	41 f4       	brne	.+16     	; 0x48e0 <I2C_MSTR_start+0x84>
    48d0:	09 c0       	rjmp	.+18     	; 0x48e4 <I2C_MSTR_start+0x88>
    48d2:	66 23       	and	r22, r22
    48d4:	39 f4       	brne	.+14     	; 0x48e4 <I2C_MSTR_start+0x88>
    48d6:	80 91 b9 00 	lds	r24, 0x00B9
    48da:	88 7f       	andi	r24, 0xF8	; 248
    48dc:	88 31       	cpi	r24, 0x18	; 24
    48de:	11 f0       	breq	.+4      	; 0x48e4 <I2C_MSTR_start+0x88>
    48e0:	82 e0       	ldi	r24, 0x02	; 2
    48e2:	08 95       	ret
    48e4:	80 e0       	ldi	r24, 0x00	; 0
    48e6:	08 95       	ret

000048e8 <I2C_MSTR_stop>:
    48e8:	80 91 3e 08 	lds	r24, 0x083E
    48ec:	81 30       	cpi	r24, 0x01	; 1
    48ee:	11 f0       	breq	.+4      	; 0x48f4 <I2C_MSTR_stop+0xc>
    48f0:	8a e0       	ldi	r24, 0x0A	; 10
    48f2:	08 95       	ret
    48f4:	80 91 40 08 	lds	r24, 0x0840
    48f8:	81 30       	cpi	r24, 0x01	; 1
    48fa:	29 f4       	brne	.+10     	; 0x4906 <I2C_MSTR_stop+0x1e>
    48fc:	85 e9       	ldi	r24, 0x95	; 149
    48fe:	80 93 bc 00 	sts	0x00BC, r24
    4902:	80 e0       	ldi	r24, 0x00	; 0
    4904:	08 95       	ret
    4906:	84 e9       	ldi	r24, 0x94	; 148
    4908:	80 93 bc 00 	sts	0x00BC, r24
    490c:	80 e0       	ldi	r24, 0x00	; 0
    490e:	08 95       	ret

00004910 <I2C_open>:
    4910:	82 e1       	ldi	r24, 0x12	; 18
    4912:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    4916:	88 23       	and	r24, r24
    4918:	b1 f4       	brne	.+44     	; 0x4946 <I2C_open+0x36>
    491a:	10 92 3d 08 	sts	0x083D, r1
    491e:	10 92 3e 08 	sts	0x083E, r1
    4922:	10 92 3f 08 	sts	0x083F, r1
    4926:	10 92 40 08 	sts	0x0840, r1
    492a:	10 92 41 08 	sts	0x0841, r1
    492e:	0e 94 cf 2a 	call	0x559e	; 0x559e <__I2C_init>
    4932:	87 e1       	ldi	r24, 0x17	; 23
    4934:	60 e0       	ldi	r22, 0x00	; 0
    4936:	0e 94 a6 24 	call	0x494c	; 0x494c <I2C_set_BRG>
    493a:	0e 94 c5 2a 	call	0x558a	; 0x558a <I2C_enable>
    493e:	82 e1       	ldi	r24, 0x12	; 18
    4940:	61 e0       	ldi	r22, 0x01	; 1
    4942:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    4946:	82 e1       	ldi	r24, 0x12	; 18
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	08 95       	ret

0000494c <I2C_set_BRG>:
    494c:	63 70       	andi	r22, 0x03	; 3
    494e:	60 93 b9 00 	sts	0x00B9, r22
    4952:	80 93 b8 00 	sts	0x00B8, r24
    4956:	81 e0       	ldi	r24, 0x01	; 1
    4958:	80 93 3d 08 	sts	0x083D, r24
    495c:	08 95       	ret

0000495e <__ADC_init>:
    495e:	8f e1       	ldi	r24, 0x1F	; 31
    4960:	80 93 7c 00 	sts	0x007C, r24
    4964:	ea e7       	ldi	r30, 0x7A	; 122
    4966:	f0 e0       	ldi	r31, 0x00	; 0
    4968:	87 e0       	ldi	r24, 0x07	; 7
    496a:	80 83       	st	Z, r24
    496c:	80 81       	ld	r24, Z
    496e:	80 68       	ori	r24, 0x80	; 128
    4970:	80 83       	st	Z, r24
    4972:	08 95       	ret

00004974 <CBOT_init>:
    4974:	0e 94 10 2a 	call	0x5420	; 0x5420 <SYS_init>
    4978:	0e 94 ec 27 	call	0x4fd8	; 0x4fd8 <ATMEGA_open>
    497c:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <ISR_open>
    4980:	0e 94 9c 2a 	call	0x5538	; 0x5538 <TMRSRVC_open>
    4984:	0e 94 51 28 	call	0x50a2	; 0x50a2 <SPI_open>
    4988:	0e 94 2e 23 	call	0x465c	; 0x465c <ATTINY_open>
    498c:	78 94       	sei
    498e:	08 95       	ret

00004990 <CBOT_ISR_init>:
    4990:	00 00       	nop
    4992:	08 95       	ret

00004994 <__vector_16>:
    4994:	1f 92       	push	r1
    4996:	0f 92       	push	r0
    4998:	0f b6       	in	r0, 0x3f	; 63
    499a:	0f 92       	push	r0
    499c:	11 24       	eor	r1, r1
    499e:	2f 93       	push	r18
    49a0:	3f 93       	push	r19
    49a2:	4f 93       	push	r20
    49a4:	5f 93       	push	r21
    49a6:	6f 93       	push	r22
    49a8:	7f 93       	push	r23
    49aa:	8f 93       	push	r24
    49ac:	9f 93       	push	r25
    49ae:	af 93       	push	r26
    49b0:	bf 93       	push	r27
    49b2:	ef 93       	push	r30
    49b4:	ff 93       	push	r31
    49b6:	e0 91 c8 04 	lds	r30, 0x04C8
    49ba:	f0 91 c9 04 	lds	r31, 0x04C9
    49be:	30 97       	sbiw	r30, 0x00	; 0
    49c0:	09 f0       	breq	.+2      	; 0x49c4 <__vector_16+0x30>
    49c2:	09 95       	icall
    49c4:	ff 91       	pop	r31
    49c6:	ef 91       	pop	r30
    49c8:	bf 91       	pop	r27
    49ca:	af 91       	pop	r26
    49cc:	9f 91       	pop	r25
    49ce:	8f 91       	pop	r24
    49d0:	7f 91       	pop	r23
    49d2:	6f 91       	pop	r22
    49d4:	5f 91       	pop	r21
    49d6:	4f 91       	pop	r20
    49d8:	3f 91       	pop	r19
    49da:	2f 91       	pop	r18
    49dc:	0f 90       	pop	r0
    49de:	0f be       	out	0x3f, r0	; 63
    49e0:	0f 90       	pop	r0
    49e2:	1f 90       	pop	r1
    49e4:	18 95       	reti

000049e6 <__vector_17>:
    49e6:	1f 92       	push	r1
    49e8:	0f 92       	push	r0
    49ea:	0f b6       	in	r0, 0x3f	; 63
    49ec:	0f 92       	push	r0
    49ee:	11 24       	eor	r1, r1
    49f0:	2f 93       	push	r18
    49f2:	3f 93       	push	r19
    49f4:	4f 93       	push	r20
    49f6:	5f 93       	push	r21
    49f8:	6f 93       	push	r22
    49fa:	7f 93       	push	r23
    49fc:	8f 93       	push	r24
    49fe:	9f 93       	push	r25
    4a00:	af 93       	push	r26
    4a02:	bf 93       	push	r27
    4a04:	ef 93       	push	r30
    4a06:	ff 93       	push	r31
    4a08:	e0 91 ca 04 	lds	r30, 0x04CA
    4a0c:	f0 91 cb 04 	lds	r31, 0x04CB
    4a10:	30 97       	sbiw	r30, 0x00	; 0
    4a12:	09 f0       	breq	.+2      	; 0x4a16 <__vector_17+0x30>
    4a14:	09 95       	icall
    4a16:	ff 91       	pop	r31
    4a18:	ef 91       	pop	r30
    4a1a:	bf 91       	pop	r27
    4a1c:	af 91       	pop	r26
    4a1e:	9f 91       	pop	r25
    4a20:	8f 91       	pop	r24
    4a22:	7f 91       	pop	r23
    4a24:	6f 91       	pop	r22
    4a26:	5f 91       	pop	r21
    4a28:	4f 91       	pop	r20
    4a2a:	3f 91       	pop	r19
    4a2c:	2f 91       	pop	r18
    4a2e:	0f 90       	pop	r0
    4a30:	0f be       	out	0x3f, r0	; 63
    4a32:	0f 90       	pop	r0
    4a34:	1f 90       	pop	r1
    4a36:	18 95       	reti

00004a38 <__vector_18>:
    4a38:	1f 92       	push	r1
    4a3a:	0f 92       	push	r0
    4a3c:	0f b6       	in	r0, 0x3f	; 63
    4a3e:	0f 92       	push	r0
    4a40:	11 24       	eor	r1, r1
    4a42:	2f 93       	push	r18
    4a44:	3f 93       	push	r19
    4a46:	4f 93       	push	r20
    4a48:	5f 93       	push	r21
    4a4a:	6f 93       	push	r22
    4a4c:	7f 93       	push	r23
    4a4e:	8f 93       	push	r24
    4a50:	9f 93       	push	r25
    4a52:	af 93       	push	r26
    4a54:	bf 93       	push	r27
    4a56:	ef 93       	push	r30
    4a58:	ff 93       	push	r31
    4a5a:	e0 91 cc 04 	lds	r30, 0x04CC
    4a5e:	f0 91 cd 04 	lds	r31, 0x04CD
    4a62:	30 97       	sbiw	r30, 0x00	; 0
    4a64:	09 f0       	breq	.+2      	; 0x4a68 <__vector_18+0x30>
    4a66:	09 95       	icall
    4a68:	ff 91       	pop	r31
    4a6a:	ef 91       	pop	r30
    4a6c:	bf 91       	pop	r27
    4a6e:	af 91       	pop	r26
    4a70:	9f 91       	pop	r25
    4a72:	8f 91       	pop	r24
    4a74:	7f 91       	pop	r23
    4a76:	6f 91       	pop	r22
    4a78:	5f 91       	pop	r21
    4a7a:	4f 91       	pop	r20
    4a7c:	3f 91       	pop	r19
    4a7e:	2f 91       	pop	r18
    4a80:	0f 90       	pop	r0
    4a82:	0f be       	out	0x3f, r0	; 63
    4a84:	0f 90       	pop	r0
    4a86:	1f 90       	pop	r1
    4a88:	18 95       	reti

00004a8a <__vector_9>:
    4a8a:	1f 92       	push	r1
    4a8c:	0f 92       	push	r0
    4a8e:	0f b6       	in	r0, 0x3f	; 63
    4a90:	0f 92       	push	r0
    4a92:	11 24       	eor	r1, r1
    4a94:	2f 93       	push	r18
    4a96:	3f 93       	push	r19
    4a98:	4f 93       	push	r20
    4a9a:	5f 93       	push	r21
    4a9c:	6f 93       	push	r22
    4a9e:	7f 93       	push	r23
    4aa0:	8f 93       	push	r24
    4aa2:	9f 93       	push	r25
    4aa4:	af 93       	push	r26
    4aa6:	bf 93       	push	r27
    4aa8:	ef 93       	push	r30
    4aaa:	ff 93       	push	r31
    4aac:	e0 91 ba 04 	lds	r30, 0x04BA
    4ab0:	f0 91 bb 04 	lds	r31, 0x04BB
    4ab4:	30 97       	sbiw	r30, 0x00	; 0
    4ab6:	09 f0       	breq	.+2      	; 0x4aba <__vector_9+0x30>
    4ab8:	09 95       	icall
    4aba:	ff 91       	pop	r31
    4abc:	ef 91       	pop	r30
    4abe:	bf 91       	pop	r27
    4ac0:	af 91       	pop	r26
    4ac2:	9f 91       	pop	r25
    4ac4:	8f 91       	pop	r24
    4ac6:	7f 91       	pop	r23
    4ac8:	6f 91       	pop	r22
    4aca:	5f 91       	pop	r21
    4acc:	4f 91       	pop	r20
    4ace:	3f 91       	pop	r19
    4ad0:	2f 91       	pop	r18
    4ad2:	0f 90       	pop	r0
    4ad4:	0f be       	out	0x3f, r0	; 63
    4ad6:	0f 90       	pop	r0
    4ad8:	1f 90       	pop	r1
    4ada:	18 95       	reti

00004adc <__vector_10>:
    4adc:	1f 92       	push	r1
    4ade:	0f 92       	push	r0
    4ae0:	0f b6       	in	r0, 0x3f	; 63
    4ae2:	0f 92       	push	r0
    4ae4:	11 24       	eor	r1, r1
    4ae6:	2f 93       	push	r18
    4ae8:	3f 93       	push	r19
    4aea:	4f 93       	push	r20
    4aec:	5f 93       	push	r21
    4aee:	6f 93       	push	r22
    4af0:	7f 93       	push	r23
    4af2:	8f 93       	push	r24
    4af4:	9f 93       	push	r25
    4af6:	af 93       	push	r26
    4af8:	bf 93       	push	r27
    4afa:	ef 93       	push	r30
    4afc:	ff 93       	push	r31
    4afe:	e0 91 bc 04 	lds	r30, 0x04BC
    4b02:	f0 91 bd 04 	lds	r31, 0x04BD
    4b06:	30 97       	sbiw	r30, 0x00	; 0
    4b08:	09 f0       	breq	.+2      	; 0x4b0c <__vector_10+0x30>
    4b0a:	09 95       	icall
    4b0c:	ff 91       	pop	r31
    4b0e:	ef 91       	pop	r30
    4b10:	bf 91       	pop	r27
    4b12:	af 91       	pop	r26
    4b14:	9f 91       	pop	r25
    4b16:	8f 91       	pop	r24
    4b18:	7f 91       	pop	r23
    4b1a:	6f 91       	pop	r22
    4b1c:	5f 91       	pop	r21
    4b1e:	4f 91       	pop	r20
    4b20:	3f 91       	pop	r19
    4b22:	2f 91       	pop	r18
    4b24:	0f 90       	pop	r0
    4b26:	0f be       	out	0x3f, r0	; 63
    4b28:	0f 90       	pop	r0
    4b2a:	1f 90       	pop	r1
    4b2c:	18 95       	reti

00004b2e <__vector_11>:
    4b2e:	1f 92       	push	r1
    4b30:	0f 92       	push	r0
    4b32:	0f b6       	in	r0, 0x3f	; 63
    4b34:	0f 92       	push	r0
    4b36:	11 24       	eor	r1, r1
    4b38:	2f 93       	push	r18
    4b3a:	3f 93       	push	r19
    4b3c:	4f 93       	push	r20
    4b3e:	5f 93       	push	r21
    4b40:	6f 93       	push	r22
    4b42:	7f 93       	push	r23
    4b44:	8f 93       	push	r24
    4b46:	9f 93       	push	r25
    4b48:	af 93       	push	r26
    4b4a:	bf 93       	push	r27
    4b4c:	ef 93       	push	r30
    4b4e:	ff 93       	push	r31
    4b50:	e0 91 be 04 	lds	r30, 0x04BE
    4b54:	f0 91 bf 04 	lds	r31, 0x04BF
    4b58:	30 97       	sbiw	r30, 0x00	; 0
    4b5a:	09 f0       	breq	.+2      	; 0x4b5e <__vector_11+0x30>
    4b5c:	09 95       	icall
    4b5e:	ff 91       	pop	r31
    4b60:	ef 91       	pop	r30
    4b62:	bf 91       	pop	r27
    4b64:	af 91       	pop	r26
    4b66:	9f 91       	pop	r25
    4b68:	8f 91       	pop	r24
    4b6a:	7f 91       	pop	r23
    4b6c:	6f 91       	pop	r22
    4b6e:	5f 91       	pop	r21
    4b70:	4f 91       	pop	r20
    4b72:	3f 91       	pop	r19
    4b74:	2f 91       	pop	r18
    4b76:	0f 90       	pop	r0
    4b78:	0f be       	out	0x3f, r0	; 63
    4b7a:	0f 90       	pop	r0
    4b7c:	1f 90       	pop	r1
    4b7e:	18 95       	reti

00004b80 <__vector_13>:
    4b80:	1f 92       	push	r1
    4b82:	0f 92       	push	r0
    4b84:	0f b6       	in	r0, 0x3f	; 63
    4b86:	0f 92       	push	r0
    4b88:	11 24       	eor	r1, r1
    4b8a:	2f 93       	push	r18
    4b8c:	3f 93       	push	r19
    4b8e:	4f 93       	push	r20
    4b90:	5f 93       	push	r21
    4b92:	6f 93       	push	r22
    4b94:	7f 93       	push	r23
    4b96:	8f 93       	push	r24
    4b98:	9f 93       	push	r25
    4b9a:	af 93       	push	r26
    4b9c:	bf 93       	push	r27
    4b9e:	ef 93       	push	r30
    4ba0:	ff 93       	push	r31
    4ba2:	e0 91 c2 04 	lds	r30, 0x04C2
    4ba6:	f0 91 c3 04 	lds	r31, 0x04C3
    4baa:	30 97       	sbiw	r30, 0x00	; 0
    4bac:	09 f0       	breq	.+2      	; 0x4bb0 <__vector_13+0x30>
    4bae:	09 95       	icall
    4bb0:	ff 91       	pop	r31
    4bb2:	ef 91       	pop	r30
    4bb4:	bf 91       	pop	r27
    4bb6:	af 91       	pop	r26
    4bb8:	9f 91       	pop	r25
    4bba:	8f 91       	pop	r24
    4bbc:	7f 91       	pop	r23
    4bbe:	6f 91       	pop	r22
    4bc0:	5f 91       	pop	r21
    4bc2:	4f 91       	pop	r20
    4bc4:	3f 91       	pop	r19
    4bc6:	2f 91       	pop	r18
    4bc8:	0f 90       	pop	r0
    4bca:	0f be       	out	0x3f, r0	; 63
    4bcc:	0f 90       	pop	r0
    4bce:	1f 90       	pop	r1
    4bd0:	18 95       	reti

00004bd2 <__vector_14>:
    4bd2:	1f 92       	push	r1
    4bd4:	0f 92       	push	r0
    4bd6:	0f b6       	in	r0, 0x3f	; 63
    4bd8:	0f 92       	push	r0
    4bda:	11 24       	eor	r1, r1
    4bdc:	2f 93       	push	r18
    4bde:	3f 93       	push	r19
    4be0:	4f 93       	push	r20
    4be2:	5f 93       	push	r21
    4be4:	6f 93       	push	r22
    4be6:	7f 93       	push	r23
    4be8:	8f 93       	push	r24
    4bea:	9f 93       	push	r25
    4bec:	af 93       	push	r26
    4bee:	bf 93       	push	r27
    4bf0:	ef 93       	push	r30
    4bf2:	ff 93       	push	r31
    4bf4:	e0 91 c4 04 	lds	r30, 0x04C4
    4bf8:	f0 91 c5 04 	lds	r31, 0x04C5
    4bfc:	30 97       	sbiw	r30, 0x00	; 0
    4bfe:	09 f0       	breq	.+2      	; 0x4c02 <__vector_14+0x30>
    4c00:	09 95       	icall
    4c02:	ff 91       	pop	r31
    4c04:	ef 91       	pop	r30
    4c06:	bf 91       	pop	r27
    4c08:	af 91       	pop	r26
    4c0a:	9f 91       	pop	r25
    4c0c:	8f 91       	pop	r24
    4c0e:	7f 91       	pop	r23
    4c10:	6f 91       	pop	r22
    4c12:	5f 91       	pop	r21
    4c14:	4f 91       	pop	r20
    4c16:	3f 91       	pop	r19
    4c18:	2f 91       	pop	r18
    4c1a:	0f 90       	pop	r0
    4c1c:	0f be       	out	0x3f, r0	; 63
    4c1e:	0f 90       	pop	r0
    4c20:	1f 90       	pop	r1
    4c22:	18 95       	reti

00004c24 <__vector_12>:
    4c24:	1f 92       	push	r1
    4c26:	0f 92       	push	r0
    4c28:	0f b6       	in	r0, 0x3f	; 63
    4c2a:	0f 92       	push	r0
    4c2c:	11 24       	eor	r1, r1
    4c2e:	2f 93       	push	r18
    4c30:	3f 93       	push	r19
    4c32:	4f 93       	push	r20
    4c34:	5f 93       	push	r21
    4c36:	6f 93       	push	r22
    4c38:	7f 93       	push	r23
    4c3a:	8f 93       	push	r24
    4c3c:	9f 93       	push	r25
    4c3e:	af 93       	push	r26
    4c40:	bf 93       	push	r27
    4c42:	ef 93       	push	r30
    4c44:	ff 93       	push	r31
    4c46:	e0 91 c0 04 	lds	r30, 0x04C0
    4c4a:	f0 91 c1 04 	lds	r31, 0x04C1
    4c4e:	30 97       	sbiw	r30, 0x00	; 0
    4c50:	09 f0       	breq	.+2      	; 0x4c54 <__vector_12+0x30>
    4c52:	09 95       	icall
    4c54:	ff 91       	pop	r31
    4c56:	ef 91       	pop	r30
    4c58:	bf 91       	pop	r27
    4c5a:	af 91       	pop	r26
    4c5c:	9f 91       	pop	r25
    4c5e:	8f 91       	pop	r24
    4c60:	7f 91       	pop	r23
    4c62:	6f 91       	pop	r22
    4c64:	5f 91       	pop	r21
    4c66:	4f 91       	pop	r20
    4c68:	3f 91       	pop	r19
    4c6a:	2f 91       	pop	r18
    4c6c:	0f 90       	pop	r0
    4c6e:	0f be       	out	0x3f, r0	; 63
    4c70:	0f 90       	pop	r0
    4c72:	1f 90       	pop	r1
    4c74:	18 95       	reti

00004c76 <__vector_15>:
    4c76:	1f 92       	push	r1
    4c78:	0f 92       	push	r0
    4c7a:	0f b6       	in	r0, 0x3f	; 63
    4c7c:	0f 92       	push	r0
    4c7e:	11 24       	eor	r1, r1
    4c80:	2f 93       	push	r18
    4c82:	3f 93       	push	r19
    4c84:	4f 93       	push	r20
    4c86:	5f 93       	push	r21
    4c88:	6f 93       	push	r22
    4c8a:	7f 93       	push	r23
    4c8c:	8f 93       	push	r24
    4c8e:	9f 93       	push	r25
    4c90:	af 93       	push	r26
    4c92:	bf 93       	push	r27
    4c94:	ef 93       	push	r30
    4c96:	ff 93       	push	r31
    4c98:	e0 91 c6 04 	lds	r30, 0x04C6
    4c9c:	f0 91 c7 04 	lds	r31, 0x04C7
    4ca0:	30 97       	sbiw	r30, 0x00	; 0
    4ca2:	09 f0       	breq	.+2      	; 0x4ca6 <__vector_15+0x30>
    4ca4:	09 95       	icall
    4ca6:	ff 91       	pop	r31
    4ca8:	ef 91       	pop	r30
    4caa:	bf 91       	pop	r27
    4cac:	af 91       	pop	r26
    4cae:	9f 91       	pop	r25
    4cb0:	8f 91       	pop	r24
    4cb2:	7f 91       	pop	r23
    4cb4:	6f 91       	pop	r22
    4cb6:	5f 91       	pop	r21
    4cb8:	4f 91       	pop	r20
    4cba:	3f 91       	pop	r19
    4cbc:	2f 91       	pop	r18
    4cbe:	0f 90       	pop	r0
    4cc0:	0f be       	out	0x3f, r0	; 63
    4cc2:	0f 90       	pop	r0
    4cc4:	1f 90       	pop	r1
    4cc6:	18 95       	reti

00004cc8 <__vector_4>:
    4cc8:	1f 92       	push	r1
    4cca:	0f 92       	push	r0
    4ccc:	0f b6       	in	r0, 0x3f	; 63
    4cce:	0f 92       	push	r0
    4cd0:	11 24       	eor	r1, r1
    4cd2:	2f 93       	push	r18
    4cd4:	3f 93       	push	r19
    4cd6:	4f 93       	push	r20
    4cd8:	5f 93       	push	r21
    4cda:	6f 93       	push	r22
    4cdc:	7f 93       	push	r23
    4cde:	8f 93       	push	r24
    4ce0:	9f 93       	push	r25
    4ce2:	af 93       	push	r26
    4ce4:	bf 93       	push	r27
    4ce6:	ef 93       	push	r30
    4ce8:	ff 93       	push	r31
    4cea:	e0 91 b0 04 	lds	r30, 0x04B0
    4cee:	f0 91 b1 04 	lds	r31, 0x04B1
    4cf2:	30 97       	sbiw	r30, 0x00	; 0
    4cf4:	09 f0       	breq	.+2      	; 0x4cf8 <__vector_4+0x30>
    4cf6:	09 95       	icall
    4cf8:	ff 91       	pop	r31
    4cfa:	ef 91       	pop	r30
    4cfc:	bf 91       	pop	r27
    4cfe:	af 91       	pop	r26
    4d00:	9f 91       	pop	r25
    4d02:	8f 91       	pop	r24
    4d04:	7f 91       	pop	r23
    4d06:	6f 91       	pop	r22
    4d08:	5f 91       	pop	r21
    4d0a:	4f 91       	pop	r20
    4d0c:	3f 91       	pop	r19
    4d0e:	2f 91       	pop	r18
    4d10:	0f 90       	pop	r0
    4d12:	0f be       	out	0x3f, r0	; 63
    4d14:	0f 90       	pop	r0
    4d16:	1f 90       	pop	r1
    4d18:	18 95       	reti

00004d1a <__vector_5>:
    4d1a:	1f 92       	push	r1
    4d1c:	0f 92       	push	r0
    4d1e:	0f b6       	in	r0, 0x3f	; 63
    4d20:	0f 92       	push	r0
    4d22:	11 24       	eor	r1, r1
    4d24:	2f 93       	push	r18
    4d26:	3f 93       	push	r19
    4d28:	4f 93       	push	r20
    4d2a:	5f 93       	push	r21
    4d2c:	6f 93       	push	r22
    4d2e:	7f 93       	push	r23
    4d30:	8f 93       	push	r24
    4d32:	9f 93       	push	r25
    4d34:	af 93       	push	r26
    4d36:	bf 93       	push	r27
    4d38:	ef 93       	push	r30
    4d3a:	ff 93       	push	r31
    4d3c:	e0 91 b2 04 	lds	r30, 0x04B2
    4d40:	f0 91 b3 04 	lds	r31, 0x04B3
    4d44:	30 97       	sbiw	r30, 0x00	; 0
    4d46:	09 f0       	breq	.+2      	; 0x4d4a <__vector_5+0x30>
    4d48:	09 95       	icall
    4d4a:	ff 91       	pop	r31
    4d4c:	ef 91       	pop	r30
    4d4e:	bf 91       	pop	r27
    4d50:	af 91       	pop	r26
    4d52:	9f 91       	pop	r25
    4d54:	8f 91       	pop	r24
    4d56:	7f 91       	pop	r23
    4d58:	6f 91       	pop	r22
    4d5a:	5f 91       	pop	r21
    4d5c:	4f 91       	pop	r20
    4d5e:	3f 91       	pop	r19
    4d60:	2f 91       	pop	r18
    4d62:	0f 90       	pop	r0
    4d64:	0f be       	out	0x3f, r0	; 63
    4d66:	0f 90       	pop	r0
    4d68:	1f 90       	pop	r1
    4d6a:	18 95       	reti

00004d6c <__vector_6>:
    4d6c:	1f 92       	push	r1
    4d6e:	0f 92       	push	r0
    4d70:	0f b6       	in	r0, 0x3f	; 63
    4d72:	0f 92       	push	r0
    4d74:	11 24       	eor	r1, r1
    4d76:	2f 93       	push	r18
    4d78:	3f 93       	push	r19
    4d7a:	4f 93       	push	r20
    4d7c:	5f 93       	push	r21
    4d7e:	6f 93       	push	r22
    4d80:	7f 93       	push	r23
    4d82:	8f 93       	push	r24
    4d84:	9f 93       	push	r25
    4d86:	af 93       	push	r26
    4d88:	bf 93       	push	r27
    4d8a:	ef 93       	push	r30
    4d8c:	ff 93       	push	r31
    4d8e:	e0 91 b4 04 	lds	r30, 0x04B4
    4d92:	f0 91 b5 04 	lds	r31, 0x04B5
    4d96:	30 97       	sbiw	r30, 0x00	; 0
    4d98:	09 f0       	breq	.+2      	; 0x4d9c <__vector_6+0x30>
    4d9a:	09 95       	icall
    4d9c:	ff 91       	pop	r31
    4d9e:	ef 91       	pop	r30
    4da0:	bf 91       	pop	r27
    4da2:	af 91       	pop	r26
    4da4:	9f 91       	pop	r25
    4da6:	8f 91       	pop	r24
    4da8:	7f 91       	pop	r23
    4daa:	6f 91       	pop	r22
    4dac:	5f 91       	pop	r21
    4dae:	4f 91       	pop	r20
    4db0:	3f 91       	pop	r19
    4db2:	2f 91       	pop	r18
    4db4:	0f 90       	pop	r0
    4db6:	0f be       	out	0x3f, r0	; 63
    4db8:	0f 90       	pop	r0
    4dba:	1f 90       	pop	r1
    4dbc:	18 95       	reti

00004dbe <__vector_7>:
    4dbe:	1f 92       	push	r1
    4dc0:	0f 92       	push	r0
    4dc2:	0f b6       	in	r0, 0x3f	; 63
    4dc4:	0f 92       	push	r0
    4dc6:	11 24       	eor	r1, r1
    4dc8:	2f 93       	push	r18
    4dca:	3f 93       	push	r19
    4dcc:	4f 93       	push	r20
    4dce:	5f 93       	push	r21
    4dd0:	6f 93       	push	r22
    4dd2:	7f 93       	push	r23
    4dd4:	8f 93       	push	r24
    4dd6:	9f 93       	push	r25
    4dd8:	af 93       	push	r26
    4dda:	bf 93       	push	r27
    4ddc:	ef 93       	push	r30
    4dde:	ff 93       	push	r31
    4de0:	e0 91 b6 04 	lds	r30, 0x04B6
    4de4:	f0 91 b7 04 	lds	r31, 0x04B7
    4de8:	30 97       	sbiw	r30, 0x00	; 0
    4dea:	09 f0       	breq	.+2      	; 0x4dee <__vector_7+0x30>
    4dec:	09 95       	icall
    4dee:	ff 91       	pop	r31
    4df0:	ef 91       	pop	r30
    4df2:	bf 91       	pop	r27
    4df4:	af 91       	pop	r26
    4df6:	9f 91       	pop	r25
    4df8:	8f 91       	pop	r24
    4dfa:	7f 91       	pop	r23
    4dfc:	6f 91       	pop	r22
    4dfe:	5f 91       	pop	r21
    4e00:	4f 91       	pop	r20
    4e02:	3f 91       	pop	r19
    4e04:	2f 91       	pop	r18
    4e06:	0f 90       	pop	r0
    4e08:	0f be       	out	0x3f, r0	; 63
    4e0a:	0f 90       	pop	r0
    4e0c:	1f 90       	pop	r1
    4e0e:	18 95       	reti

00004e10 <ISR_attach>:
    4e10:	e8 2f       	mov	r30, r24
    4e12:	80 32       	cpi	r24, 0x20	; 32
    4e14:	68 f4       	brcc	.+26     	; 0x4e30 <ISR_attach+0x20>
    4e16:	80 51       	subi	r24, 0x10	; 16
    4e18:	83 30       	cpi	r24, 0x03	; 3
    4e1a:	50 f0       	brcs	.+20     	; 0x4e30 <ISR_attach+0x20>
    4e1c:	f0 e0       	ldi	r31, 0x00	; 0
    4e1e:	ee 0f       	add	r30, r30
    4e20:	ff 1f       	adc	r31, r31
    4e22:	e8 55       	subi	r30, 0x58	; 88
    4e24:	fb 4f       	sbci	r31, 0xFB	; 251
    4e26:	20 81       	ld	r18, Z
    4e28:	31 81       	ldd	r19, Z+1	; 0x01
    4e2a:	71 83       	std	Z+1, r23	; 0x01
    4e2c:	60 83       	st	Z, r22
    4e2e:	02 c0       	rjmp	.+4      	; 0x4e34 <ISR_attach+0x24>
    4e30:	20 e0       	ldi	r18, 0x00	; 0
    4e32:	30 e0       	ldi	r19, 0x00	; 0
    4e34:	c9 01       	movw	r24, r18
    4e36:	08 95       	ret

00004e38 <ISR_open>:
    4e38:	80 e1       	ldi	r24, 0x10	; 16
    4e3a:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    4e3e:	88 23       	and	r24, r24
    4e40:	61 f4       	brne	.+24     	; 0x4e5a <ISR_open+0x22>
    4e42:	e8 ea       	ldi	r30, 0xA8	; 168
    4e44:	f4 e0       	ldi	r31, 0x04	; 4
    4e46:	11 92       	st	Z+, r1
    4e48:	11 92       	st	Z+, r1
    4e4a:	84 e0       	ldi	r24, 0x04	; 4
    4e4c:	e8 3e       	cpi	r30, 0xE8	; 232
    4e4e:	f8 07       	cpc	r31, r24
    4e50:	d1 f7       	brne	.-12     	; 0x4e46 <ISR_open+0xe>
    4e52:	80 e1       	ldi	r24, 0x10	; 16
    4e54:	61 e0       	ldi	r22, 0x01	; 1
    4e56:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    4e5a:	80 e1       	ldi	r24, 0x10	; 16
    4e5c:	91 e0       	ldi	r25, 0x01	; 1
    4e5e:	08 95       	ret

00004e60 <__LCD_init>:
    4e60:	23 9a       	sbi	0x04, 3	; 4
    4e62:	08 95       	ret

00004e64 <__LCD_putchar>:
    4e64:	ff 92       	push	r15
    4e66:	0f 93       	push	r16
    4e68:	1f 93       	push	r17
    4e6a:	cf 93       	push	r28
    4e6c:	df 93       	push	r29
    4e6e:	f8 2e       	mov	r15, r24
    4e70:	8a e0       	ldi	r24, 0x0A	; 10
    4e72:	f8 16       	cp	r15, r24
    4e74:	b1 f0       	breq	.+44     	; 0x4ea2 <__LCD_putchar+0x3e>
    4e76:	8f 15       	cp	r24, r15
    4e78:	48 f0       	brcs	.+18     	; 0x4e8c <__LCD_putchar+0x28>
    4e7a:	e8 e0       	ldi	r30, 0x08	; 8
    4e7c:	fe 16       	cp	r15, r30
    4e7e:	b9 f1       	breq	.+110    	; 0x4eee <__LCD_putchar+0x8a>
    4e80:	ef 15       	cp	r30, r15
    4e82:	38 f1       	brcs	.+78     	; 0x4ed2 <__LCD_putchar+0x6e>
    4e84:	f7 e0       	ldi	r31, 0x07	; 7
    4e86:	ff 16       	cp	r15, r31
    4e88:	51 f4       	brne	.+20     	; 0x4e9e <__LCD_putchar+0x3a>
    4e8a:	3b c0       	rjmp	.+118    	; 0x4f02 <__LCD_putchar+0x9e>
    4e8c:	8d e0       	ldi	r24, 0x0D	; 13
    4e8e:	f8 16       	cp	r15, r24
    4e90:	59 f0       	breq	.+22     	; 0x4ea8 <__LCD_putchar+0x44>
    4e92:	eb e1       	ldi	r30, 0x1B	; 27
    4e94:	fe 16       	cp	r15, r30
    4e96:	89 f0       	breq	.+34     	; 0x4eba <__LCD_putchar+0x56>
    4e98:	fc e0       	ldi	r31, 0x0C	; 12
    4e9a:	ff 16       	cp	r15, r31
    4e9c:	41 f0       	breq	.+16     	; 0x4eae <__LCD_putchar+0x4a>
    4e9e:	01 e0       	ldi	r16, 0x01	; 1
    4ea0:	41 c0       	rjmp	.+130    	; 0x4f24 <__LCD_putchar+0xc0>
    4ea2:	10 92 16 08 	sts	0x0816, r1
    4ea6:	03 c0       	rjmp	.+6      	; 0x4eae <__LCD_putchar+0x4a>
    4ea8:	10 92 16 08 	sts	0x0816, r1
    4eac:	3a c0       	rjmp	.+116    	; 0x4f22 <__LCD_putchar+0xbe>
    4eae:	80 91 17 08 	lds	r24, 0x0817
    4eb2:	81 50       	subi	r24, 0x01	; 1
    4eb4:	80 93 17 08 	sts	0x0817, r24
    4eb8:	34 c0       	rjmp	.+104    	; 0x4f22 <__LCD_putchar+0xbe>
    4eba:	0e 94 a2 1c 	call	0x3944	; 0x3944 <LCD_clear>
    4ebe:	14 c0       	rjmp	.+40     	; 0x4ee8 <__LCD_putchar+0x84>
    4ec0:	80 e0       	ldi	r24, 0x00	; 0
    4ec2:	61 e0       	ldi	r22, 0x01	; 1
    4ec4:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    4ec8:	80 91 16 08 	lds	r24, 0x0816
    4ecc:	8f 5f       	subi	r24, 0xFF	; 255
    4ece:	80 93 16 08 	sts	0x0816, r24
    4ed2:	80 91 16 08 	lds	r24, 0x0816
    4ed6:	87 ff       	sbrs	r24, 7
    4ed8:	f3 cf       	rjmp	.-26     	; 0x4ec0 <__LCD_putchar+0x5c>
    4eda:	10 92 16 08 	sts	0x0816, r1
    4ede:	80 91 17 08 	lds	r24, 0x0817
    4ee2:	81 50       	subi	r24, 0x01	; 1
    4ee4:	80 93 17 08 	sts	0x0817, r24
    4ee8:	00 e0       	ldi	r16, 0x00	; 0
    4eea:	11 e0       	ldi	r17, 0x01	; 1
    4eec:	1c c0       	rjmp	.+56     	; 0x4f26 <__LCD_putchar+0xc2>
    4eee:	80 91 16 08 	lds	r24, 0x0816
    4ef2:	88 23       	and	r24, r24
    4ef4:	b1 f0       	breq	.+44     	; 0x4f22 <__LCD_putchar+0xbe>
    4ef6:	80 91 16 08 	lds	r24, 0x0816
    4efa:	86 50       	subi	r24, 0x06	; 6
    4efc:	80 93 16 08 	sts	0x0816, r24
    4f00:	10 c0       	rjmp	.+32     	; 0x4f22 <__LCD_putchar+0xbe>
    4f02:	81 e0       	ldi	r24, 0x01	; 1
    4f04:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <SPKR_open>
    4f08:	64 ef       	ldi	r22, 0xF4	; 244
    4f0a:	71 e0       	ldi	r23, 0x01	; 1
    4f0c:	80 e0       	ldi	r24, 0x00	; 0
    4f0e:	90 e0       	ldi	r25, 0x00	; 0
    4f10:	4d e7       	ldi	r20, 0x7D	; 125
    4f12:	50 e0       	ldi	r21, 0x00	; 0
    4f14:	24 e6       	ldi	r18, 0x64	; 100
    4f16:	30 e0       	ldi	r19, 0x00	; 0
    4f18:	0e 94 4c 29 	call	0x5298	; 0x5298 <SPKR_play_beep>
    4f1c:	81 e0       	ldi	r24, 0x01	; 1
    4f1e:	0e 94 18 29 	call	0x5230	; 0x5230 <SPKR_close>
    4f22:	00 e0       	ldi	r16, 0x00	; 0
    4f24:	10 e0       	ldi	r17, 0x00	; 0
    4f26:	80 91 17 08 	lds	r24, 0x0817
    4f2a:	60 91 16 08 	lds	r22, 0x0816
    4f2e:	0e 94 68 1d 	call	0x3ad0	; 0x3ad0 <LCD_set_PGC_addr>
    4f32:	00 23       	and	r16, r16
    4f34:	51 f1       	breq	.+84     	; 0x4f8a <__LCD_putchar+0x126>
    4f36:	85 e0       	ldi	r24, 0x05	; 5
    4f38:	f8 9e       	mul	r15, r24
    4f3a:	c0 01       	movw	r24, r0
    4f3c:	11 24       	eor	r1, r1
    4f3e:	ec 01       	movw	r28, r24
    4f40:	c3 55       	subi	r28, 0x53	; 83
    4f42:	df 4f       	sbci	r29, 0xFF	; 255
    4f44:	8c 01       	movw	r16, r24
    4f46:	0e 54       	subi	r16, 0x4E	; 78
    4f48:	1f 4f       	sbci	r17, 0xFF	; 255
    4f4a:	fe 01       	movw	r30, r28
    4f4c:	84 91       	lpm	r24, Z+
    4f4e:	61 e0       	ldi	r22, 0x01	; 1
    4f50:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    4f54:	21 96       	adiw	r28, 0x01	; 1
    4f56:	c0 17       	cp	r28, r16
    4f58:	d1 07       	cpc	r29, r17
    4f5a:	b9 f7       	brne	.-18     	; 0x4f4a <__LCD_putchar+0xe6>
    4f5c:	80 e0       	ldi	r24, 0x00	; 0
    4f5e:	61 e0       	ldi	r22, 0x01	; 1
    4f60:	0e 94 81 1d 	call	0x3b02	; 0x3b02 <LCD_write>
    4f64:	80 91 16 08 	lds	r24, 0x0816
    4f68:	8a 5f       	subi	r24, 0xFA	; 250
    4f6a:	80 93 16 08 	sts	0x0816, r24
    4f6e:	80 91 16 08 	lds	r24, 0x0816
    4f72:	90 e0       	ldi	r25, 0x00	; 0
    4f74:	8c 37       	cpi	r24, 0x7C	; 124
    4f76:	91 05       	cpc	r25, r1
    4f78:	3c f0       	brlt	.+14     	; 0x4f88 <__LCD_putchar+0x124>
    4f7a:	10 92 16 08 	sts	0x0816, r1
    4f7e:	80 91 17 08 	lds	r24, 0x0817
    4f82:	81 50       	subi	r24, 0x01	; 1
    4f84:	80 93 17 08 	sts	0x0817, r24
    4f88:	11 e0       	ldi	r17, 0x01	; 1
    4f8a:	80 91 17 08 	lds	r24, 0x0817
    4f8e:	83 70       	andi	r24, 0x03	; 3
    4f90:	80 93 17 08 	sts	0x0817, r24
    4f94:	11 30       	cpi	r17, 0x01	; 1
    4f96:	59 f4       	brne	.+22     	; 0x4fae <__LCD_putchar+0x14a>
    4f98:	80 91 18 08 	lds	r24, 0x0818
    4f9c:	81 30       	cpi	r24, 0x01	; 1
    4f9e:	39 f4       	brne	.+14     	; 0x4fae <__LCD_putchar+0x14a>
    4fa0:	e0 91 19 08 	lds	r30, 0x0819
    4fa4:	f0 91 1a 08 	lds	r31, 0x081A
    4fa8:	30 97       	sbiw	r30, 0x00	; 0
    4faa:	09 f0       	breq	.+2      	; 0x4fae <__LCD_putchar+0x14a>
    4fac:	09 95       	icall
    4fae:	80 e0       	ldi	r24, 0x00	; 0
    4fb0:	90 e0       	ldi	r25, 0x00	; 0
    4fb2:	df 91       	pop	r29
    4fb4:	cf 91       	pop	r28
    4fb6:	1f 91       	pop	r17
    4fb8:	0f 91       	pop	r16
    4fba:	ff 90       	pop	r15
    4fbc:	08 95       	ret

00004fbe <__LED_clr_pattern>:
    4fbe:	85 fd       	sbrc	r24, 5
    4fc0:	5d 98       	cbi	0x0b, 5	; 11
    4fc2:	86 fd       	sbrc	r24, 6
    4fc4:	5e 98       	cbi	0x0b, 6	; 11
    4fc6:	08 95       	ret

00004fc8 <__LED_init>:
    4fc8:	55 9a       	sbi	0x0a, 5	; 10
    4fca:	56 9a       	sbi	0x0a, 6	; 10
    4fcc:	08 95       	ret

00004fce <__LED_set_pattern>:
    4fce:	85 fd       	sbrc	r24, 5
    4fd0:	5d 9a       	sbi	0x0b, 5	; 11
    4fd2:	86 fd       	sbrc	r24, 6
    4fd4:	5e 9a       	sbi	0x0b, 6	; 11
    4fd6:	08 95       	ret

00004fd8 <ATMEGA_open>:
    4fd8:	80 e0       	ldi	r24, 0x00	; 0
    4fda:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    4fde:	88 23       	and	r24, r24
    4fe0:	51 f4       	brne	.+20     	; 0x4ff6 <ATMEGA_open+0x1e>
    4fe2:	f8 94       	cli
    4fe4:	0e 94 e3 2a 	call	0x55c6	; 0x55c6 <__ATMEGA_init>
    4fe8:	81 e0       	ldi	r24, 0x01	; 1
    4fea:	0e 94 fe 27 	call	0x4ffc	; 0x4ffc <ATMEGA_set_clk_mode>
    4fee:	80 e0       	ldi	r24, 0x00	; 0
    4ff0:	61 e0       	ldi	r22, 0x01	; 1
    4ff2:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    4ff6:	80 e0       	ldi	r24, 0x00	; 0
    4ff8:	91 e0       	ldi	r25, 0x01	; 1
    4ffa:	08 95       	ret

00004ffc <ATMEGA_set_clk_mode>:
    4ffc:	81 30       	cpi	r24, 0x01	; 1
    4ffe:	49 f0       	breq	.+18     	; 0x5012 <ATMEGA_set_clk_mode+0x16>
    5000:	f8 94       	cli
    5002:	81 30       	cpi	r24, 0x01	; 1
    5004:	20 f1       	brcs	.+72     	; 0x504e <ATMEGA_set_clk_mode+0x52>
    5006:	82 30       	cpi	r24, 0x02	; 2
    5008:	b1 f0       	breq	.+44     	; 0x5036 <ATMEGA_set_clk_mode+0x3a>
    500a:	83 30       	cpi	r24, 0x03	; 3
    500c:	09 f0       	breq	.+2      	; 0x5010 <ATMEGA_set_clk_mode+0x14>
    500e:	45 c0       	rjmp	.+138    	; 0x509a <ATMEGA_set_clk_mode+0x9e>
    5010:	17 c0       	rjmp	.+46     	; 0x5040 <ATMEGA_set_clk_mode+0x44>
    5012:	2c 9a       	sbi	0x05, 4	; 5
    5014:	80 e8       	ldi	r24, 0x80	; 128
    5016:	80 93 61 00 	sts	0x0061, r24
    501a:	10 92 61 00 	sts	0x0061, r1
    501e:	80 e0       	ldi	r24, 0x00	; 0
    5020:	90 e0       	ldi	r25, 0x00	; 0
    5022:	00 00       	nop
    5024:	01 96       	adiw	r24, 0x01	; 1
    5026:	88 32       	cpi	r24, 0x28	; 40
    5028:	91 05       	cpc	r25, r1
    502a:	d9 f7       	brne	.-10     	; 0x5022 <ATMEGA_set_clk_mode+0x26>
    502c:	10 92 68 00 	sts	0x0068, r1
    5030:	10 92 6b 00 	sts	0x006B, r1
    5034:	08 95       	ret
    5036:	80 e8       	ldi	r24, 0x80	; 128
    5038:	80 93 61 00 	sts	0x0061, r24
    503c:	83 e0       	ldi	r24, 0x03	; 3
    503e:	04 c0       	rjmp	.+8      	; 0x5048 <ATMEGA_set_clk_mode+0x4c>
    5040:	80 e8       	ldi	r24, 0x80	; 128
    5042:	80 93 61 00 	sts	0x0061, r24
    5046:	88 e0       	ldi	r24, 0x08	; 8
    5048:	80 93 61 00 	sts	0x0061, r24
    504c:	28 c0       	rjmp	.+80     	; 0x509e <ATMEGA_set_clk_mode+0xa2>
    504e:	80 e0       	ldi	r24, 0x00	; 0
    5050:	90 e0       	ldi	r25, 0x00	; 0
    5052:	00 00       	nop
    5054:	01 96       	adiw	r24, 0x01	; 1
    5056:	2d e6       	ldi	r18, 0x6D	; 109
    5058:	80 36       	cpi	r24, 0x60	; 96
    505a:	92 07       	cpc	r25, r18
    505c:	d1 f7       	brne	.-12     	; 0x5052 <ATMEGA_set_clk_mode+0x56>
    505e:	2c 98       	cbi	0x05, 4	; 5
    5060:	80 e0       	ldi	r24, 0x00	; 0
    5062:	90 e0       	ldi	r25, 0x00	; 0
    5064:	00 00       	nop
    5066:	01 96       	adiw	r24, 0x01	; 1
    5068:	2d e6       	ldi	r18, 0x6D	; 109
    506a:	80 36       	cpi	r24, 0x60	; 96
    506c:	92 07       	cpc	r25, r18
    506e:	d1 f7       	brne	.-12     	; 0x5064 <ATMEGA_set_clk_mode+0x68>
    5070:	10 92 7a 00 	sts	0x007A, r1
    5074:	8f ef       	ldi	r24, 0xFF	; 255
    5076:	80 93 64 00 	sts	0x0064, r24
    507a:	80 91 68 00 	lds	r24, 0x0068
    507e:	81 60       	ori	r24, 0x01	; 1
    5080:	80 93 68 00 	sts	0x0068, r24
    5084:	80 91 6b 00 	lds	r24, 0x006B
    5088:	84 60       	ori	r24, 0x04	; 4
    508a:	80 93 6b 00 	sts	0x006B, r24
    508e:	78 94       	sei
    5090:	83 b7       	in	r24, 0x33	; 51
    5092:	81 60       	ori	r24, 0x01	; 1
    5094:	83 bf       	out	0x33, r24	; 51
    5096:	88 95       	sleep
    5098:	08 95       	ret
    509a:	82 30       	cpi	r24, 0x02	; 2
    509c:	08 f0       	brcs	.+2      	; 0x50a0 <ATMEGA_set_clk_mode+0xa4>
    509e:	78 94       	sei
    50a0:	08 95       	ret

000050a2 <SPI_open>:
    50a2:	0f 93       	push	r16
    50a4:	1f 93       	push	r17
    50a6:	0e 94 0f 2b 	call	0x561e	; 0x561e <__SPI_init>
    50aa:	80 e0       	ldi	r24, 0x00	; 0
    50ac:	6e ef       	ldi	r22, 0xFE	; 254
    50ae:	7a e2       	ldi	r23, 0x2A	; 42
    50b0:	0e 94 9c 28 	call	0x5138	; 0x5138 <SPI_set_config_func>
    50b4:	81 e0       	ldi	r24, 0x01	; 1
    50b6:	66 ef       	ldi	r22, 0xF6	; 246
    50b8:	7a e2       	ldi	r23, 0x2A	; 42
    50ba:	0e 94 9c 28 	call	0x5138	; 0x5138 <SPI_set_config_func>
    50be:	82 e0       	ldi	r24, 0x02	; 2
    50c0:	6e ee       	ldi	r22, 0xEE	; 238
    50c2:	7a e2       	ldi	r23, 0x2A	; 42
    50c4:	0e 94 9c 28 	call	0x5138	; 0x5138 <SPI_set_config_func>
    50c8:	86 e0       	ldi	r24, 0x06	; 6
    50ca:	66 e0       	ldi	r22, 0x06	; 6
    50cc:	7b e2       	ldi	r23, 0x2B	; 43
    50ce:	0e 94 9c 28 	call	0x5138	; 0x5138 <SPI_set_config_func>
    50d2:	06 ee       	ldi	r16, 0xE6	; 230
    50d4:	1a e2       	ldi	r17, 0x2A	; 42
    50d6:	83 e0       	ldi	r24, 0x03	; 3
    50d8:	b8 01       	movw	r22, r16
    50da:	0e 94 9c 28 	call	0x5138	; 0x5138 <SPI_set_config_func>
    50de:	84 e0       	ldi	r24, 0x04	; 4
    50e0:	b8 01       	movw	r22, r16
    50e2:	0e 94 9c 28 	call	0x5138	; 0x5138 <SPI_set_config_func>
    50e6:	85 e0       	ldi	r24, 0x05	; 5
    50e8:	b8 01       	movw	r22, r16
    50ea:	0e 94 9c 28 	call	0x5138	; 0x5138 <SPI_set_config_func>
    50ee:	87 e0       	ldi	r24, 0x07	; 7
    50f0:	b8 01       	movw	r22, r16
    50f2:	0e 94 9c 28 	call	0x5138	; 0x5138 <SPI_set_config_func>
    50f6:	82 e0       	ldi	r24, 0x02	; 2
    50f8:	61 e0       	ldi	r22, 0x01	; 1
    50fa:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    50fe:	8f ef       	ldi	r24, 0xFF	; 255
    5100:	80 93 1b 08 	sts	0x081B, r24
    5104:	87 e0       	ldi	r24, 0x07	; 7
    5106:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <SPI_set_slave_addr>
    510a:	82 e0       	ldi	r24, 0x02	; 2
    510c:	91 e0       	ldi	r25, 0x01	; 1
    510e:	1f 91       	pop	r17
    5110:	0f 91       	pop	r16
    5112:	08 95       	ret

00005114 <SPI_receive>:
    5114:	1f 93       	push	r17
    5116:	16 2f       	mov	r17, r22
    5118:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <SPI_set_slave_addr>
    511c:	82 e0       	ldi	r24, 0x02	; 2
    511e:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    5122:	81 30       	cpi	r24, 0x01	; 1
    5124:	11 f0       	breq	.+4      	; 0x512a <SPI_receive+0x16>
    5126:	80 e0       	ldi	r24, 0x00	; 0
    5128:	05 c0       	rjmp	.+10     	; 0x5134 <SPI_receive+0x20>
    512a:	1e bd       	out	0x2e, r17	; 46
    512c:	0d b4       	in	r0, 0x2d	; 45
    512e:	07 fe       	sbrs	r0, 7
    5130:	fd cf       	rjmp	.-6      	; 0x512c <SPI_receive+0x18>
    5132:	8e b5       	in	r24, 0x2e	; 46
    5134:	1f 91       	pop	r17
    5136:	08 95       	ret

00005138 <SPI_set_config_func>:
    5138:	e8 2f       	mov	r30, r24
    513a:	f0 e0       	ldi	r31, 0x00	; 0
    513c:	ee 0f       	add	r30, r30
    513e:	ff 1f       	adc	r31, r31
    5140:	e8 51       	subi	r30, 0x18	; 24
    5142:	fb 4f       	sbci	r31, 0xFB	; 251
    5144:	71 83       	std	Z+1, r23	; 0x01
    5146:	60 83       	st	Z, r22
    5148:	08 95       	ret

0000514a <__SPKR_TIMER1_COMPA_vect>:
    514a:	0e 94 a8 28 	call	0x5150	; 0x5150 <SPKR_clk>
    514e:	08 95       	ret

00005150 <SPKR_clk>:
    5150:	80 91 fa 04 	lds	r24, 0x04FA
    5154:	90 91 fb 04 	lds	r25, 0x04FB
    5158:	a0 91 fc 04 	lds	r26, 0x04FC
    515c:	b0 91 fd 04 	lds	r27, 0x04FD
    5160:	20 91 fe 04 	lds	r18, 0x04FE
    5164:	30 91 ff 04 	lds	r19, 0x04FF
    5168:	40 91 00 05 	lds	r20, 0x0500
    516c:	50 91 01 05 	lds	r21, 0x0501
    5170:	28 0f       	add	r18, r24
    5172:	39 1f       	adc	r19, r25
    5174:	4a 1f       	adc	r20, r26
    5176:	5b 1f       	adc	r21, r27
    5178:	20 93 fa 04 	sts	0x04FA, r18
    517c:	30 93 fb 04 	sts	0x04FB, r19
    5180:	40 93 fc 04 	sts	0x04FC, r20
    5184:	50 93 fd 04 	sts	0x04FD, r21
    5188:	80 91 fa 04 	lds	r24, 0x04FA
    518c:	90 91 fb 04 	lds	r25, 0x04FB
    5190:	a0 91 fc 04 	lds	r26, 0x04FC
    5194:	b0 91 fd 04 	lds	r27, 0x04FD
    5198:	88 51       	subi	r24, 0x18	; 24
    519a:	96 4f       	sbci	r25, 0xF6	; 246
    519c:	a0 40       	sbci	r26, 0x00	; 0
    519e:	b0 40       	sbci	r27, 0x00	; 0
    51a0:	bc f0       	brlt	.+46     	; 0x51d0 <SPKR_clk+0x80>
    51a2:	8b b1       	in	r24, 0x0b	; 11
    51a4:	80 58       	subi	r24, 0x80	; 128
    51a6:	8b b9       	out	0x0b, r24	; 11
    51a8:	80 91 fa 04 	lds	r24, 0x04FA
    51ac:	90 91 fb 04 	lds	r25, 0x04FB
    51b0:	a0 91 fc 04 	lds	r26, 0x04FC
    51b4:	b0 91 fd 04 	lds	r27, 0x04FD
    51b8:	88 51       	subi	r24, 0x18	; 24
    51ba:	96 4f       	sbci	r25, 0xF6	; 246
    51bc:	a0 40       	sbci	r26, 0x00	; 0
    51be:	b0 40       	sbci	r27, 0x00	; 0
    51c0:	80 93 fa 04 	sts	0x04FA, r24
    51c4:	90 93 fb 04 	sts	0x04FB, r25
    51c8:	a0 93 fc 04 	sts	0x04FC, r26
    51cc:	b0 93 fd 04 	sts	0x04FD, r27
    51d0:	08 95       	ret

000051d2 <__SPKR_close_beep_mode>:
    51d2:	8a e0       	ldi	r24, 0x0A	; 10
    51d4:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    51d8:	81 30       	cpi	r24, 0x01	; 1
    51da:	41 f4       	brne	.+16     	; 0x51ec <__SPKR_close_beep_mode+0x1a>
    51dc:	0e 94 2d 2b 	call	0x565a	; 0x565a <__SPKR_close>
    51e0:	10 92 f9 04 	sts	0x04F9, r1
    51e4:	8a e0       	ldi	r24, 0x0A	; 10
    51e6:	60 e0       	ldi	r22, 0x00	; 0
    51e8:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    51ec:	08 95       	ret

000051ee <__SPKR_close_tone_mode>:
    51ee:	89 e0       	ldi	r24, 0x09	; 9
    51f0:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    51f4:	81 30       	cpi	r24, 0x01	; 1
    51f6:	d9 f4       	brne	.+54     	; 0x522e <__SPKR_close_tone_mode+0x40>
    51f8:	80 91 f8 04 	lds	r24, 0x04F8
    51fc:	88 23       	and	r24, r24
    51fe:	11 f0       	breq	.+4      	; 0x5204 <__SPKR_close_tone_mode+0x16>
    5200:	0e 94 99 29 	call	0x5332	; 0x5332 <__SPKR_stop>
    5204:	82 e0       	ldi	r24, 0x02	; 2
    5206:	0e 94 2d 2b 	call	0x565a	; 0x565a <__SPKR_close>
    520a:	80 91 06 05 	lds	r24, 0x0506
    520e:	90 91 07 05 	lds	r25, 0x0507
    5212:	00 97       	sbiw	r24, 0x00	; 0
    5214:	31 f0       	breq	.+12     	; 0x5222 <__SPKR_close_tone_mode+0x34>
    5216:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <free>
    521a:	10 92 07 05 	sts	0x0507, r1
    521e:	10 92 06 05 	sts	0x0506, r1
    5222:	10 92 f8 04 	sts	0x04F8, r1
    5226:	89 e0       	ldi	r24, 0x09	; 9
    5228:	60 e0       	ldi	r22, 0x00	; 0
    522a:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    522e:	08 95       	ret

00005230 <SPKR_close>:
    5230:	81 30       	cpi	r24, 0x01	; 1
    5232:	29 f0       	breq	.+10     	; 0x523e <SPKR_close+0xe>
    5234:	82 30       	cpi	r24, 0x02	; 2
    5236:	29 f4       	brne	.+10     	; 0x5242 <SPKR_close+0x12>
    5238:	0e 94 f7 28 	call	0x51ee	; 0x51ee <__SPKR_close_tone_mode>
    523c:	08 95       	ret
    523e:	0e 94 e9 28 	call	0x51d2	; 0x51d2 <__SPKR_close_beep_mode>
    5242:	08 95       	ret

00005244 <__SPKR_init>:
    5244:	98 2f       	mov	r25, r24
    5246:	80 91 f8 04 	lds	r24, 0x04F8
    524a:	88 23       	and	r24, r24
    524c:	31 f4       	brne	.+12     	; 0x525a <__SPKR_init+0x16>
    524e:	80 91 f9 04 	lds	r24, 0x04F9
    5252:	88 23       	and	r24, r24
    5254:	11 f4       	brne	.+4      	; 0x525a <__SPKR_init+0x16>
    5256:	57 9a       	sbi	0x0a, 7	; 10
    5258:	5f 98       	cbi	0x0b, 7	; 11
    525a:	80 91 f8 04 	lds	r24, 0x04F8
    525e:	88 23       	and	r24, r24
    5260:	d1 f4       	brne	.+52     	; 0x5296 <__SPKR_init+0x52>
    5262:	92 30       	cpi	r25, 0x02	; 2
    5264:	c1 f4       	brne	.+48     	; 0x5296 <__SPKR_init+0x52>
    5266:	10 92 80 00 	sts	0x0080, r1
    526a:	10 92 81 00 	sts	0x0081, r1
    526e:	80 91 81 00 	lds	r24, 0x0081
    5272:	88 60       	ori	r24, 0x08	; 8
    5274:	80 93 81 00 	sts	0x0081, r24
    5278:	80 91 81 00 	lds	r24, 0x0081
    527c:	81 60       	ori	r24, 0x01	; 1
    527e:	80 93 81 00 	sts	0x0081, r24
    5282:	10 92 85 00 	sts	0x0085, r1
    5286:	10 92 84 00 	sts	0x0084, r1
    528a:	81 e0       	ldi	r24, 0x01	; 1
    528c:	80 93 89 00 	sts	0x0089, r24
    5290:	80 e9       	ldi	r24, 0x90	; 144
    5292:	80 93 88 00 	sts	0x0088, r24
    5296:	08 95       	ret

00005298 <SPKR_play_beep>:
    5298:	8f 92       	push	r8
    529a:	9f 92       	push	r9
    529c:	af 92       	push	r10
    529e:	bf 92       	push	r11
    52a0:	cf 92       	push	r12
    52a2:	df 92       	push	r13
    52a4:	ef 92       	push	r14
    52a6:	ff 92       	push	r15
    52a8:	0f 93       	push	r16
    52aa:	1f 93       	push	r17
    52ac:	cf 93       	push	r28
    52ae:	df 93       	push	r29
    52b0:	4b 01       	movw	r8, r22
    52b2:	5c 01       	movw	r10, r24
    52b4:	ea 01       	movw	r28, r20
    52b6:	b9 01       	movw	r22, r18
    52b8:	21 15       	cp	r18, r1
    52ba:	31 05       	cpc	r19, r1
    52bc:	39 f1       	breq	.+78     	; 0x530c <SPKR_play_beep+0x74>
    52be:	9e 01       	movw	r18, r28
    52c0:	44 27       	eor	r20, r20
    52c2:	37 fd       	sbrc	r19, 7
    52c4:	40 95       	com	r20
    52c6:	54 2f       	mov	r21, r20
    52c8:	65 36       	cpi	r22, 0x65	; 101
    52ca:	71 05       	cpc	r23, r1
    52cc:	10 f0       	brcs	.+4      	; 0x52d2 <SPKR_play_beep+0x3a>
    52ce:	64 e6       	ldi	r22, 0x64	; 100
    52d0:	70 e0       	ldi	r23, 0x00	; 0
    52d2:	80 e0       	ldi	r24, 0x00	; 0
    52d4:	90 e0       	ldi	r25, 0x00	; 0
    52d6:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <__mulsi3>
    52da:	24 e6       	ldi	r18, 0x64	; 100
    52dc:	30 e0       	ldi	r19, 0x00	; 0
    52de:	40 e0       	ldi	r20, 0x00	; 0
    52e0:	50 e0       	ldi	r21, 0x00	; 0
    52e2:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <__udivmodsi4>
    52e6:	79 01       	movw	r14, r18
    52e8:	8a 01       	movw	r16, r20
    52ea:	c5 01       	movw	r24, r10
    52ec:	b4 01       	movw	r22, r8
    52ee:	0e 94 16 2b 	call	0x562c	; 0x562c <SPKR_beep>
    52f2:	c7 01       	movw	r24, r14
    52f4:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
    52f8:	60 e0       	ldi	r22, 0x00	; 0
    52fa:	70 e0       	ldi	r23, 0x00	; 0
    52fc:	80 e0       	ldi	r24, 0x00	; 0
    52fe:	90 e0       	ldi	r25, 0x00	; 0
    5300:	0e 94 16 2b 	call	0x562c	; 0x562c <SPKR_beep>
    5304:	ce 01       	movw	r24, r28
    5306:	8e 19       	sub	r24, r14
    5308:	9f 09       	sbc	r25, r15
    530a:	04 c0       	rjmp	.+8      	; 0x5314 <SPKR_play_beep+0x7c>
    530c:	41 15       	cp	r20, r1
    530e:	51 05       	cpc	r21, r1
    5310:	19 f0       	breq	.+6      	; 0x5318 <SPKR_play_beep+0x80>
    5312:	ca 01       	movw	r24, r20
    5314:	0e 94 7d 23 	call	0x46fa	; 0x46fa <TMRSRVC_delay>
    5318:	df 91       	pop	r29
    531a:	cf 91       	pop	r28
    531c:	1f 91       	pop	r17
    531e:	0f 91       	pop	r16
    5320:	ff 90       	pop	r15
    5322:	ef 90       	pop	r14
    5324:	df 90       	pop	r13
    5326:	cf 90       	pop	r12
    5328:	bf 90       	pop	r11
    532a:	af 90       	pop	r10
    532c:	9f 90       	pop	r9
    532e:	8f 90       	pop	r8
    5330:	08 95       	ret

00005332 <__SPKR_stop>:
    5332:	ef e6       	ldi	r30, 0x6F	; 111
    5334:	f0 e0       	ldi	r31, 0x00	; 0
    5336:	80 81       	ld	r24, Z
    5338:	8d 7f       	andi	r24, 0xFD	; 253
    533a:	80 83       	st	Z, r24
    533c:	08 95       	ret

0000533e <STEPPER_go>:
    533e:	98 2f       	mov	r25, r24
    5340:	81 e0       	ldi	r24, 0x01	; 1
    5342:	80 93 00 08 	sts	0x0800, r24
    5346:	91 30       	cpi	r25, 0x01	; 1
    5348:	51 f0       	breq	.+20     	; 0x535e <STEPPER_go+0x20>
    534a:	91 30       	cpi	r25, 0x01	; 1
    534c:	18 f0       	brcs	.+6      	; 0x5354 <STEPPER_go+0x16>
    534e:	92 30       	cpi	r25, 0x02	; 2
    5350:	41 f4       	brne	.+16     	; 0x5362 <STEPPER_go+0x24>
    5352:	03 c0       	rjmp	.+6      	; 0x535a <STEPPER_go+0x1c>
    5354:	10 92 e8 07 	sts	0x07E8, r1
    5358:	04 c0       	rjmp	.+8      	; 0x5362 <STEPPER_go+0x24>
    535a:	10 92 e8 07 	sts	0x07E8, r1
    535e:	10 92 e9 07 	sts	0x07E9, r1
    5362:	10 92 00 08 	sts	0x0800, r1
    5366:	08 95       	ret

00005368 <__STEPPER_init>:
    5368:	3a 9a       	sbi	0x07, 2	; 7
    536a:	3b 9a       	sbi	0x07, 3	; 7
    536c:	3c 9a       	sbi	0x07, 4	; 7
    536e:	3d 9a       	sbi	0x07, 5	; 7
    5370:	3e 9a       	sbi	0x07, 6	; 7
    5372:	3f 9a       	sbi	0x07, 7	; 7
    5374:	88 b1       	in	r24, 0x08	; 8
    5376:	83 70       	andi	r24, 0x03	; 3
    5378:	88 b9       	out	0x08, r24	; 8
    537a:	08 95       	ret

0000537c <STEPPER_set_stop_mode>:
    537c:	98 2f       	mov	r25, r24
    537e:	81 e0       	ldi	r24, 0x01	; 1
    5380:	80 93 00 08 	sts	0x0800, r24
    5384:	91 30       	cpi	r25, 0x01	; 1
    5386:	51 f0       	breq	.+20     	; 0x539c <STEPPER_set_stop_mode+0x20>
    5388:	91 30       	cpi	r25, 0x01	; 1
    538a:	18 f0       	brcs	.+6      	; 0x5392 <STEPPER_set_stop_mode+0x16>
    538c:	92 30       	cpi	r25, 0x02	; 2
    538e:	41 f4       	brne	.+16     	; 0x53a0 <STEPPER_set_stop_mode+0x24>
    5390:	03 c0       	rjmp	.+6      	; 0x5398 <STEPPER_set_stop_mode+0x1c>
    5392:	60 93 ea 07 	sts	0x07EA, r22
    5396:	04 c0       	rjmp	.+8      	; 0x53a0 <STEPPER_set_stop_mode+0x24>
    5398:	60 93 ea 07 	sts	0x07EA, r22
    539c:	60 93 eb 07 	sts	0x07EB, r22
    53a0:	10 92 00 08 	sts	0x0800, r1
    53a4:	08 95       	ret

000053a6 <STEPPER_setup_decels>:
    53a6:	0f 93       	push	r16
    53a8:	1f 93       	push	r17
    53aa:	cf 93       	push	r28
    53ac:	df 93       	push	r29
    53ae:	eb 01       	movw	r28, r22
    53b0:	8a 01       	movw	r16, r20
    53b2:	81 30       	cpi	r24, 0x01	; 1
    53b4:	01 f1       	breq	.+64     	; 0x53f6 <STEPPER_setup_decels+0x50>
    53b6:	81 30       	cpi	r24, 0x01	; 1
    53b8:	18 f0       	brcs	.+6      	; 0x53c0 <STEPPER_setup_decels+0x1a>
    53ba:	82 30       	cpi	r24, 0x02	; 2
    53bc:	61 f5       	brne	.+88     	; 0x5416 <STEPPER_setup_decels+0x70>
    53be:	0d c0       	rjmp	.+26     	; 0x53da <STEPPER_setup_decels+0x34>
    53c0:	80 91 d4 07 	lds	r24, 0x07D4
    53c4:	90 91 d5 07 	lds	r25, 0x07D5
    53c8:	89 2b       	or	r24, r25
    53ca:	11 f0       	breq	.+4      	; 0x53d0 <STEPPER_setup_decels+0x2a>
    53cc:	80 e0       	ldi	r24, 0x00	; 0
    53ce:	1a c0       	rjmp	.+52     	; 0x5404 <STEPPER_setup_decels+0x5e>
    53d0:	10 92 e1 07 	sts	0x07E1, r1
    53d4:	10 92 e0 07 	sts	0x07E0, r1
    53d8:	1e c0       	rjmp	.+60     	; 0x5416 <STEPPER_setup_decels+0x70>
    53da:	80 91 d4 07 	lds	r24, 0x07D4
    53de:	90 91 d5 07 	lds	r25, 0x07D5
    53e2:	89 2b       	or	r24, r25
    53e4:	21 f0       	breq	.+8      	; 0x53ee <STEPPER_setup_decels+0x48>
    53e6:	80 e0       	ldi	r24, 0x00	; 0
    53e8:	0e 94 49 2b 	call	0x5692	; 0x5692 <STEPPER_set_decel_step_values>
    53ec:	04 c0       	rjmp	.+8      	; 0x53f6 <STEPPER_setup_decels+0x50>
    53ee:	10 92 e1 07 	sts	0x07E1, r1
    53f2:	10 92 e0 07 	sts	0x07E0, r1
    53f6:	80 91 d6 07 	lds	r24, 0x07D6
    53fa:	90 91 d7 07 	lds	r25, 0x07D7
    53fe:	89 2b       	or	r24, r25
    5400:	31 f0       	breq	.+12     	; 0x540e <STEPPER_setup_decels+0x68>
    5402:	81 e0       	ldi	r24, 0x01	; 1
    5404:	be 01       	movw	r22, r28
    5406:	a8 01       	movw	r20, r16
    5408:	0e 94 49 2b 	call	0x5692	; 0x5692 <STEPPER_set_decel_step_values>
    540c:	04 c0       	rjmp	.+8      	; 0x5416 <STEPPER_setup_decels+0x70>
    540e:	10 92 e3 07 	sts	0x07E3, r1
    5412:	10 92 e2 07 	sts	0x07E2, r1
    5416:	df 91       	pop	r29
    5418:	cf 91       	pop	r28
    541a:	1f 91       	pop	r17
    541c:	0f 91       	pop	r16
    541e:	08 95       	ret

00005420 <SYS_init>:
    5420:	10 92 03 08 	sts	0x0803, r1
    5424:	10 92 04 08 	sts	0x0804, r1
    5428:	10 92 08 08 	sts	0x0808, r1
    542c:	10 92 05 08 	sts	0x0805, r1
    5430:	10 92 07 08 	sts	0x0807, r1
    5434:	10 92 09 08 	sts	0x0809, r1
    5438:	10 92 0a 08 	sts	0x080A, r1
    543c:	10 92 0b 08 	sts	0x080B, r1
    5440:	10 92 0c 08 	sts	0x080C, r1
    5444:	10 92 0d 08 	sts	0x080D, r1
    5448:	10 92 0e 08 	sts	0x080E, r1
    544c:	10 92 0f 08 	sts	0x080F, r1
    5450:	10 92 10 08 	sts	0x0810, r1
    5454:	10 92 11 08 	sts	0x0811, r1
    5458:	10 92 12 08 	sts	0x0812, r1
    545c:	10 92 13 08 	sts	0x0813, r1
    5460:	10 92 14 08 	sts	0x0814, r1
    5464:	08 95       	ret

00005466 <TMRSRVC_insert>:
    5466:	cf 92       	push	r12
    5468:	df 92       	push	r13
    546a:	ef 92       	push	r14
    546c:	ff 92       	push	r15
    546e:	0f 93       	push	r16
    5470:	1f 93       	push	r17
    5472:	cf 93       	push	r28
    5474:	df 93       	push	r29
    5476:	ec 01       	movw	r28, r24
    5478:	80 91 3a 08 	lds	r24, 0x083A
    547c:	88 23       	and	r24, r24
    547e:	39 f4       	brne	.+14     	; 0x548e <TMRSRVC_insert+0x28>
    5480:	d0 93 3c 08 	sts	0x083C, r29
    5484:	c0 93 3b 08 	sts	0x083B, r28
    5488:	0e 94 c1 2a 	call	0x5582	; 0x5582 <TMRSRVC_start>
    548c:	47 c0       	rjmp	.+142    	; 0x551c <TMRSRVC_insert+0xb6>
    548e:	c0 90 3b 08 	lds	r12, 0x083B
    5492:	d0 90 3c 08 	lds	r13, 0x083C
    5496:	00 e0       	ldi	r16, 0x00	; 0
    5498:	10 e0       	ldi	r17, 0x00	; 0
    549a:	ee 24       	eor	r14, r14
    549c:	ff 24       	eor	r15, r15
    549e:	37 c0       	rjmp	.+110    	; 0x550e <TMRSRVC_insert+0xa8>
    54a0:	a8 81       	ld	r26, Y
    54a2:	b9 81       	ldd	r27, Y+1	; 0x01
    54a4:	fd 01       	movw	r30, r26
    54a6:	64 81       	ldd	r22, Z+4	; 0x04
    54a8:	75 81       	ldd	r23, Z+5	; 0x05
    54aa:	f6 01       	movw	r30, r12
    54ac:	40 81       	ld	r20, Z
    54ae:	51 81       	ldd	r21, Z+1	; 0x01
    54b0:	fa 01       	movw	r30, r20
    54b2:	84 81       	ldd	r24, Z+4	; 0x04
    54b4:	95 81       	ldd	r25, Z+5	; 0x05
    54b6:	9b 01       	movw	r18, r22
    54b8:	28 1b       	sub	r18, r24
    54ba:	39 0b       	sbc	r19, r25
    54bc:	37 ff       	sbrs	r19, 7
    54be:	0f c0       	rjmp	.+30     	; 0x54de <TMRSRVC_insert+0x78>
    54c0:	86 1b       	sub	r24, r22
    54c2:	97 0b       	sbc	r25, r23
    54c4:	95 83       	std	Z+5, r25	; 0x05
    54c6:	84 83       	std	Z+4, r24	; 0x04
    54c8:	db 82       	std	Y+3, r13	; 0x03
    54ca:	ca 82       	std	Y+2, r12	; 0x02
    54cc:	01 2b       	or	r16, r17
    54ce:	29 f4       	brne	.+10     	; 0x54da <TMRSRVC_insert+0x74>
    54d0:	d0 93 3c 08 	sts	0x083C, r29
    54d4:	c0 93 3b 08 	sts	0x083B, r28
    54d8:	21 c0       	rjmp	.+66     	; 0x551c <TMRSRVC_insert+0xb6>
    54da:	f7 01       	movw	r30, r14
    54dc:	0c c0       	rjmp	.+24     	; 0x54f6 <TMRSRVC_insert+0x90>
    54de:	f6 01       	movw	r30, r12
    54e0:	82 81       	ldd	r24, Z+2	; 0x02
    54e2:	93 81       	ldd	r25, Z+3	; 0x03
    54e4:	21 15       	cp	r18, r1
    54e6:	31 05       	cpc	r19, r1
    54e8:	49 f4       	brne	.+18     	; 0x54fc <TMRSRVC_insert+0x96>
    54ea:	fd 01       	movw	r30, r26
    54ec:	15 82       	std	Z+5, r1	; 0x05
    54ee:	14 82       	std	Z+4, r1	; 0x04
    54f0:	9b 83       	std	Y+3, r25	; 0x03
    54f2:	8a 83       	std	Y+2, r24	; 0x02
    54f4:	f6 01       	movw	r30, r12
    54f6:	d3 83       	std	Z+3, r29	; 0x03
    54f8:	c2 83       	std	Z+2, r28	; 0x02
    54fa:	10 c0       	rjmp	.+32     	; 0x551c <TMRSRVC_insert+0xb6>
    54fc:	fd 01       	movw	r30, r26
    54fe:	35 83       	std	Z+5, r19	; 0x05
    5500:	24 83       	std	Z+4, r18	; 0x04
    5502:	00 97       	sbiw	r24, 0x00	; 0
    5504:	b9 f3       	breq	.-18     	; 0x54f4 <TMRSRVC_insert+0x8e>
    5506:	0f 5f       	subi	r16, 0xFF	; 255
    5508:	1f 4f       	sbci	r17, 0xFF	; 255
    550a:	76 01       	movw	r14, r12
    550c:	6c 01       	movw	r12, r24
    550e:	80 91 3a 08 	lds	r24, 0x083A
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	08 17       	cp	r16, r24
    5516:	19 07       	cpc	r17, r25
    5518:	18 f2       	brcs	.-122    	; 0x54a0 <TMRSRVC_insert+0x3a>
    551a:	ec cf       	rjmp	.-40     	; 0x54f4 <TMRSRVC_insert+0x8e>
    551c:	80 91 3a 08 	lds	r24, 0x083A
    5520:	8f 5f       	subi	r24, 0xFF	; 255
    5522:	80 93 3a 08 	sts	0x083A, r24
    5526:	df 91       	pop	r29
    5528:	cf 91       	pop	r28
    552a:	1f 91       	pop	r17
    552c:	0f 91       	pop	r16
    552e:	ff 90       	pop	r15
    5530:	ef 90       	pop	r14
    5532:	df 90       	pop	r13
    5534:	cf 90       	pop	r12
    5536:	08 95       	ret

00005538 <TMRSRVC_open>:
    5538:	88 e0       	ldi	r24, 0x08	; 8
    553a:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    553e:	88 23       	and	r24, r24
    5540:	b9 f4       	brne	.+46     	; 0x5570 <TMRSRVC_open+0x38>
    5542:	10 92 3a 08 	sts	0x083A, r1
    5546:	10 92 3c 08 	sts	0x083C, r1
    554a:	10 92 3b 08 	sts	0x083B, r1
    554e:	10 92 08 05 	sts	0x0508, r1
    5552:	10 92 09 05 	sts	0x0509, r1
    5556:	80 e1       	ldi	r24, 0x10	; 16
    5558:	66 eb       	ldi	r22, 0xB6	; 182
    555a:	7b e2       	ldi	r23, 0x2B	; 43
    555c:	0e 94 d2 2a 	call	0x55a4	; 0x55a4 <__ISR_attach>
    5560:	0e 94 bd 2b 	call	0x577a	; 0x577a <__TMRSRVC_init>
    5564:	0e 94 bb 2a 	call	0x5576	; 0x5576 <__TMRSRVC_start>
    5568:	88 e0       	ldi	r24, 0x08	; 8
    556a:	61 e0       	ldi	r22, 0x01	; 1
    556c:	0e 94 68 22 	call	0x44d0	; 0x44d0 <SYS_set_state>
    5570:	88 e0       	ldi	r24, 0x08	; 8
    5572:	91 e0       	ldi	r25, 0x01	; 1
    5574:	08 95       	ret

00005576 <__TMRSRVC_start>:
    5576:	ee e6       	ldi	r30, 0x6E	; 110
    5578:	f0 e0       	ldi	r31, 0x00	; 0
    557a:	80 81       	ld	r24, Z
    557c:	82 60       	ori	r24, 0x02	; 2
    557e:	80 83       	st	Z, r24
    5580:	08 95       	ret

00005582 <TMRSRVC_start>:
    5582:	81 e0       	ldi	r24, 0x01	; 1
    5584:	80 93 09 05 	sts	0x0509, r24
    5588:	08 95       	ret

0000558a <I2C_enable>:
    558a:	80 91 3d 08 	lds	r24, 0x083D
    558e:	81 30       	cpi	r24, 0x01	; 1
    5590:	29 f4       	brne	.+10     	; 0x559c <I2C_enable+0x12>
    5592:	80 91 bc 00 	lds	r24, 0x00BC
    5596:	84 60       	ori	r24, 0x04	; 4
    5598:	80 93 bc 00 	sts	0x00BC, r24
    559c:	08 95       	ret

0000559e <__I2C_init>:
    559e:	38 98       	cbi	0x07, 0	; 7
    55a0:	39 98       	cbi	0x07, 1	; 7
    55a2:	08 95       	ret

000055a4 <__ISR_attach>:
    55a4:	80 32       	cpi	r24, 0x20	; 32
    55a6:	18 f0       	brcs	.+6      	; 0x55ae <__ISR_attach+0xa>
    55a8:	20 e0       	ldi	r18, 0x00	; 0
    55aa:	30 e0       	ldi	r19, 0x00	; 0
    55ac:	0a c0       	rjmp	.+20     	; 0x55c2 <__ISR_attach+0x1e>
    55ae:	e8 2f       	mov	r30, r24
    55b0:	f0 e0       	ldi	r31, 0x00	; 0
    55b2:	ee 0f       	add	r30, r30
    55b4:	ff 1f       	adc	r31, r31
    55b6:	e8 55       	subi	r30, 0x58	; 88
    55b8:	fb 4f       	sbci	r31, 0xFB	; 251
    55ba:	20 81       	ld	r18, Z
    55bc:	31 81       	ldd	r19, Z+1	; 0x01
    55be:	71 83       	std	Z+1, r23	; 0x01
    55c0:	60 83       	st	Z, r22
    55c2:	c9 01       	movw	r24, r18
    55c4:	08 95       	ret

000055c6 <__ATMEGA_init>:
    55c6:	24 9a       	sbi	0x04, 4	; 4
    55c8:	2c 9a       	sbi	0x05, 4	; 5
    55ca:	08 95       	ret

000055cc <SPI_default_config>:
    55cc:	83 e5       	ldi	r24, 0x53	; 83
    55ce:	8c bd       	out	0x2c, r24	; 44
    55d0:	81 e0       	ldi	r24, 0x01	; 1
    55d2:	8d bd       	out	0x2d, r24	; 45
    55d4:	8d e0       	ldi	r24, 0x0D	; 13
    55d6:	8a 95       	dec	r24
    55d8:	f1 f7       	brne	.-4      	; 0x55d6 <SPI_default_config+0xa>
    55da:	08 95       	ret

000055dc <SPI_ATtiny0_config>:
    55dc:	83 e5       	ldi	r24, 0x53	; 83
    55de:	8c bd       	out	0x2c, r24	; 44
    55e0:	1d bc       	out	0x2d, r1	; 45
    55e2:	84 ef       	ldi	r24, 0xF4	; 244
    55e4:	91 e0       	ldi	r25, 0x01	; 1
    55e6:	01 97       	sbiw	r24, 0x01	; 1
    55e8:	f1 f7       	brne	.-4      	; 0x55e6 <SPI_ATtiny0_config+0xa>
    55ea:	08 95       	ret

000055ec <SPI_PSXC_config>:
    55ec:	8f e7       	ldi	r24, 0x7F	; 127
    55ee:	8c bd       	out	0x2c, r24	; 44
    55f0:	1d bc       	out	0x2d, r1	; 45
    55f2:	84 ef       	ldi	r24, 0xF4	; 244
    55f4:	91 e0       	ldi	r25, 0x01	; 1
    55f6:	01 97       	sbiw	r24, 0x01	; 1
    55f8:	f1 f7       	brne	.-4      	; 0x55f6 <SPI_PSXC_config+0xa>
    55fa:	08 95       	ret

000055fc <SPI_LCD_config>:
    55fc:	83 e5       	ldi	r24, 0x53	; 83
    55fe:	8c bd       	out	0x2c, r24	; 44
    5600:	81 e0       	ldi	r24, 0x01	; 1
    5602:	8d bd       	out	0x2d, r24	; 45
    5604:	8d e0       	ldi	r24, 0x0D	; 13
    5606:	8a 95       	dec	r24
    5608:	f1 f7       	brne	.-4      	; 0x5606 <SPI_LCD_config+0xa>
    560a:	08 95       	ret

0000560c <SPI_FLASH_config>:
    560c:	83 e5       	ldi	r24, 0x53	; 83
    560e:	8c bd       	out	0x2c, r24	; 44
    5610:	81 e0       	ldi	r24, 0x01	; 1
    5612:	8d bd       	out	0x2d, r24	; 45
    5614:	84 ef       	ldi	r24, 0xF4	; 244
    5616:	91 e0       	ldi	r25, 0x01	; 1
    5618:	01 97       	sbiw	r24, 0x01	; 1
    561a:	f1 f7       	brne	.-4      	; 0x5618 <SPI_FLASH_config+0xc>
    561c:	08 95       	ret

0000561e <__SPI_init>:
    561e:	25 9a       	sbi	0x04, 5	; 4
    5620:	26 98       	cbi	0x04, 6	; 4
    5622:	27 9a       	sbi	0x04, 7	; 4
    5624:	20 9a       	sbi	0x04, 0	; 4
    5626:	21 9a       	sbi	0x04, 1	; 4
    5628:	22 9a       	sbi	0x04, 2	; 4
    562a:	08 95       	ret

0000562c <SPKR_beep>:
    562c:	9b 01       	movw	r18, r22
    562e:	ac 01       	movw	r20, r24
    5630:	80 91 f9 04 	lds	r24, 0x04F9
    5634:	88 23       	and	r24, r24
    5636:	81 f0       	breq	.+32     	; 0x5658 <SPKR_beep+0x2c>
    5638:	da 01       	movw	r26, r20
    563a:	c9 01       	movw	r24, r18
    563c:	88 0f       	add	r24, r24
    563e:	99 1f       	adc	r25, r25
    5640:	aa 1f       	adc	r26, r26
    5642:	bb 1f       	adc	r27, r27
    5644:	90 93 05 05 	sts	0x0505, r25
    5648:	80 93 04 05 	sts	0x0504, r24
    564c:	21 15       	cp	r18, r1
    564e:	31 05       	cpc	r19, r1
    5650:	41 05       	cpc	r20, r1
    5652:	51 05       	cpc	r21, r1
    5654:	09 f4       	brne	.+2      	; 0x5658 <SPKR_beep+0x2c>
    5656:	5f 98       	cbi	0x0b, 7	; 11
    5658:	08 95       	ret

0000565a <__SPKR_close>:
    565a:	82 30       	cpi	r24, 0x02	; 2
    565c:	29 f4       	brne	.+10     	; 0x5668 <__SPKR_close+0xe>
    565e:	80 91 81 00 	lds	r24, 0x0081
    5662:	8e 7f       	andi	r24, 0xFE	; 254
    5664:	80 93 81 00 	sts	0x0081, r24
    5668:	80 91 f8 04 	lds	r24, 0x04F8
    566c:	81 30       	cpi	r24, 0x01	; 1
    566e:	31 f4       	brne	.+12     	; 0x567c <__SPKR_close+0x22>
    5670:	80 91 f9 04 	lds	r24, 0x04F9
    5674:	81 30       	cpi	r24, 0x01	; 1
    5676:	11 f4       	brne	.+4      	; 0x567c <__SPKR_close+0x22>
    5678:	00 00       	nop
    567a:	08 95       	ret
    567c:	80 91 f8 04 	lds	r24, 0x04F8
    5680:	81 30       	cpi	r24, 0x01	; 1
    5682:	21 f0       	breq	.+8      	; 0x568c <__SPKR_close+0x32>
    5684:	80 91 f9 04 	lds	r24, 0x04F9
    5688:	81 30       	cpi	r24, 0x01	; 1
    568a:	11 f4       	brne	.+4      	; 0x5690 <__SPKR_close+0x36>
    568c:	5f 98       	cbi	0x0b, 7	; 11
    568e:	57 98       	cbi	0x0a, 7	; 10
    5690:	08 95       	ret

00005692 <STEPPER_set_decel_step_values>:
    5692:	ef 92       	push	r14
    5694:	ff 92       	push	r15
    5696:	0f 93       	push	r16
    5698:	1f 93       	push	r17
    569a:	cf 93       	push	r28
    569c:	df 93       	push	r29
    569e:	eb 01       	movw	r28, r22
    56a0:	88 23       	and	r24, r24
    56a2:	21 f0       	breq	.+8      	; 0x56ac <STEPPER_set_decel_step_values+0x1a>
    56a4:	81 30       	cpi	r24, 0x01	; 1
    56a6:	09 f0       	breq	.+2      	; 0x56aa <STEPPER_set_decel_step_values+0x18>
    56a8:	5a c0       	rjmp	.+180    	; 0x575e <STEPPER_set_decel_step_values+0xcc>
    56aa:	2d c0       	rjmp	.+90     	; 0x5706 <STEPPER_set_decel_step_values+0x74>
    56ac:	9a 01       	movw	r18, r20
    56ae:	40 e0       	ldi	r20, 0x00	; 0
    56b0:	50 e0       	ldi	r21, 0x00	; 0
    56b2:	ca 01       	movw	r24, r20
    56b4:	b9 01       	movw	r22, r18
    56b6:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <__mulsi3>
    56ba:	20 91 d4 07 	lds	r18, 0x07D4
    56be:	30 91 d5 07 	lds	r19, 0x07D5
    56c2:	22 0f       	add	r18, r18
    56c4:	33 1f       	adc	r19, r19
    56c6:	40 e0       	ldi	r20, 0x00	; 0
    56c8:	50 e0       	ldi	r21, 0x00	; 0
    56ca:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <__udivmodsi4>
    56ce:	79 01       	movw	r14, r18
    56d0:	8a 01       	movw	r16, r20
    56d2:	a8 01       	movw	r20, r16
    56d4:	97 01       	movw	r18, r14
    56d6:	22 0f       	add	r18, r18
    56d8:	33 1f       	adc	r19, r19
    56da:	44 1f       	adc	r20, r20
    56dc:	55 1f       	adc	r21, r21
    56de:	ce 01       	movw	r24, r28
    56e0:	a0 e0       	ldi	r26, 0x00	; 0
    56e2:	b0 e0       	ldi	r27, 0x00	; 0
    56e4:	82 17       	cp	r24, r18
    56e6:	93 07       	cpc	r25, r19
    56e8:	a4 07       	cpc	r26, r20
    56ea:	b5 07       	cpc	r27, r21
    56ec:	28 f0       	brcs	.+10     	; 0x56f8 <STEPPER_set_decel_step_values+0x66>
    56ee:	f0 92 e1 07 	sts	0x07E1, r15
    56f2:	e0 92 e0 07 	sts	0x07E0, r14
    56f6:	33 c0       	rjmp	.+102    	; 0x575e <STEPPER_set_decel_step_values+0xcc>
    56f8:	d6 95       	lsr	r29
    56fa:	c7 95       	ror	r28
    56fc:	d0 93 e1 07 	sts	0x07E1, r29
    5700:	c0 93 e0 07 	sts	0x07E0, r28
    5704:	2c c0       	rjmp	.+88     	; 0x575e <STEPPER_set_decel_step_values+0xcc>
    5706:	9a 01       	movw	r18, r20
    5708:	40 e0       	ldi	r20, 0x00	; 0
    570a:	50 e0       	ldi	r21, 0x00	; 0
    570c:	ca 01       	movw	r24, r20
    570e:	b9 01       	movw	r22, r18
    5710:	0e 94 7b 36 	call	0x6cf6	; 0x6cf6 <__mulsi3>
    5714:	20 91 d6 07 	lds	r18, 0x07D6
    5718:	30 91 d7 07 	lds	r19, 0x07D7
    571c:	22 0f       	add	r18, r18
    571e:	33 1f       	adc	r19, r19
    5720:	40 e0       	ldi	r20, 0x00	; 0
    5722:	50 e0       	ldi	r21, 0x00	; 0
    5724:	0e 94 ad 36 	call	0x6d5a	; 0x6d5a <__udivmodsi4>
    5728:	79 01       	movw	r14, r18
    572a:	8a 01       	movw	r16, r20
    572c:	a8 01       	movw	r20, r16
    572e:	97 01       	movw	r18, r14
    5730:	22 0f       	add	r18, r18
    5732:	33 1f       	adc	r19, r19
    5734:	44 1f       	adc	r20, r20
    5736:	55 1f       	adc	r21, r21
    5738:	ce 01       	movw	r24, r28
    573a:	a0 e0       	ldi	r26, 0x00	; 0
    573c:	b0 e0       	ldi	r27, 0x00	; 0
    573e:	82 17       	cp	r24, r18
    5740:	93 07       	cpc	r25, r19
    5742:	a4 07       	cpc	r26, r20
    5744:	b5 07       	cpc	r27, r21
    5746:	28 f0       	brcs	.+10     	; 0x5752 <STEPPER_set_decel_step_values+0xc0>
    5748:	f0 92 e3 07 	sts	0x07E3, r15
    574c:	e0 92 e2 07 	sts	0x07E2, r14
    5750:	06 c0       	rjmp	.+12     	; 0x575e <STEPPER_set_decel_step_values+0xcc>
    5752:	d6 95       	lsr	r29
    5754:	c7 95       	ror	r28
    5756:	d0 93 e3 07 	sts	0x07E3, r29
    575a:	c0 93 e2 07 	sts	0x07E2, r28
    575e:	df 91       	pop	r29
    5760:	cf 91       	pop	r28
    5762:	1f 91       	pop	r17
    5764:	0f 91       	pop	r16
    5766:	ff 90       	pop	r15
    5768:	ef 90       	pop	r14
    576a:	08 95       	ret

0000576c <__TIMER0_COMPA_vect>:
    576c:	0e 94 c6 2b 	call	0x578c	; 0x578c <TMRSRVC_tick>
    5770:	0e 94 06 2c 	call	0x580c	; 0x580c <STEPPER_clk>
    5774:	0e 94 df 2b 	call	0x57be	; 0x57be <SPKR_beep_clk>
    5778:	08 95       	ret

0000577a <__TMRSRVC_init>:
    577a:	84 b5       	in	r24, 0x24	; 36
    577c:	82 60       	ori	r24, 0x02	; 2
    577e:	84 bd       	out	0x24, r24	; 36
    5780:	85 b5       	in	r24, 0x25	; 37
    5782:	84 60       	ori	r24, 0x04	; 4
    5784:	85 bd       	out	0x25, r24	; 37
    5786:	8e e4       	ldi	r24, 0x4E	; 78
    5788:	87 bd       	out	0x27, r24	; 39
    578a:	08 95       	ret

0000578c <TMRSRVC_tick>:
    578c:	88 e0       	ldi	r24, 0x08	; 8
    578e:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    5792:	88 23       	and	r24, r24
    5794:	11 f4       	brne	.+4      	; 0x579a <TMRSRVC_tick+0xe>
    5796:	84 e0       	ldi	r24, 0x04	; 4
    5798:	08 95       	ret
    579a:	80 91 09 05 	lds	r24, 0x0509
    579e:	88 23       	and	r24, r24
    57a0:	11 f4       	brne	.+4      	; 0x57a6 <TMRSRVC_tick+0x1a>
    57a2:	83 e0       	ldi	r24, 0x03	; 3
    57a4:	08 95       	ret
    57a6:	80 91 08 05 	lds	r24, 0x0508
    57aa:	88 23       	and	r24, r24
    57ac:	11 f0       	breq	.+4      	; 0x57b2 <TMRSRVC_tick+0x26>
    57ae:	82 e0       	ldi	r24, 0x02	; 2
    57b0:	08 95       	ret
    57b2:	0e 94 53 2e 	call	0x5ca6	; 0x5ca6 <TMRSRVC_process>
    57b6:	81 30       	cpi	r24, 0x01	; 1
    57b8:	e1 f3       	breq	.-8      	; 0x57b2 <TMRSRVC_tick+0x26>
    57ba:	80 e0       	ldi	r24, 0x00	; 0
    57bc:	08 95       	ret

000057be <SPKR_beep_clk>:
    57be:	80 91 f9 04 	lds	r24, 0x04F9
    57c2:	81 30       	cpi	r24, 0x01	; 1
    57c4:	11 f5       	brne	.+68     	; 0x580a <SPKR_beep_clk+0x4c>
    57c6:	80 91 02 05 	lds	r24, 0x0502
    57ca:	90 91 03 05 	lds	r25, 0x0503
    57ce:	20 91 04 05 	lds	r18, 0x0504
    57d2:	30 91 05 05 	lds	r19, 0x0505
    57d6:	28 0f       	add	r18, r24
    57d8:	39 1f       	adc	r19, r25
    57da:	30 93 03 05 	sts	0x0503, r19
    57de:	20 93 02 05 	sts	0x0502, r18
    57e2:	80 91 02 05 	lds	r24, 0x0502
    57e6:	90 91 03 05 	lds	r25, 0x0503
    57ea:	88 5e       	subi	r24, 0xE8	; 232
    57ec:	93 40       	sbci	r25, 0x03	; 3
    57ee:	6c f0       	brlt	.+26     	; 0x580a <SPKR_beep_clk+0x4c>
    57f0:	8b b1       	in	r24, 0x0b	; 11
    57f2:	80 58       	subi	r24, 0x80	; 128
    57f4:	8b b9       	out	0x0b, r24	; 11
    57f6:	80 91 02 05 	lds	r24, 0x0502
    57fa:	90 91 03 05 	lds	r25, 0x0503
    57fe:	88 5e       	subi	r24, 0xE8	; 232
    5800:	93 40       	sbci	r25, 0x03	; 3
    5802:	90 93 03 05 	sts	0x0503, r25
    5806:	80 93 02 05 	sts	0x0502, r24
    580a:	08 95       	ret

0000580c <STEPPER_clk>:
    580c:	87 e0       	ldi	r24, 0x07	; 7
    580e:	0e 94 20 22 	call	0x4440	; 0x4440 <SYS_get_state>
    5812:	81 30       	cpi	r24, 0x01	; 1
    5814:	09 f0       	breq	.+2      	; 0x5818 <STEPPER_clk+0xc>
    5816:	aa c0       	rjmp	.+340    	; 0x596c <STEPPER_clk+0x160>
    5818:	80 91 d4 07 	lds	r24, 0x07D4
    581c:	90 91 d5 07 	lds	r25, 0x07D5
    5820:	89 2b       	or	r24, r25
    5822:	09 f1       	breq	.+66     	; 0x5866 <STEPPER_clk+0x5a>
    5824:	80 91 f8 07 	lds	r24, 0x07F8
    5828:	90 91 f9 07 	lds	r25, 0x07F9
    582c:	20 91 d4 07 	lds	r18, 0x07D4
    5830:	30 91 d5 07 	lds	r19, 0x07D5
    5834:	82 0f       	add	r24, r18
    5836:	93 1f       	adc	r25, r19
    5838:	90 93 f9 07 	sts	0x07F9, r25
    583c:	80 93 f8 07 	sts	0x07F8, r24
    5840:	80 91 f8 07 	lds	r24, 0x07F8
    5844:	90 91 f9 07 	lds	r25, 0x07F9
    5848:	88 5e       	subi	r24, 0xE8	; 232
    584a:	93 40       	sbci	r25, 0x03	; 3
    584c:	a4 f0       	brlt	.+40     	; 0x5876 <STEPPER_clk+0x6a>
    584e:	80 91 f8 07 	lds	r24, 0x07F8
    5852:	90 91 f9 07 	lds	r25, 0x07F9
    5856:	88 5e       	subi	r24, 0xE8	; 232
    5858:	93 40       	sbci	r25, 0x03	; 3
    585a:	90 93 f9 07 	sts	0x07F9, r25
    585e:	80 93 f8 07 	sts	0x07F8, r24
    5862:	41 e0       	ldi	r20, 0x01	; 1
    5864:	09 c0       	rjmp	.+18     	; 0x5878 <STEPPER_clk+0x6c>
    5866:	80 91 cc 07 	lds	r24, 0x07CC
    586a:	90 91 cd 07 	lds	r25, 0x07CD
    586e:	90 93 d1 07 	sts	0x07D1, r25
    5872:	80 93 d0 07 	sts	0x07D0, r24
    5876:	40 e0       	ldi	r20, 0x00	; 0
    5878:	80 91 d6 07 	lds	r24, 0x07D6
    587c:	90 91 d7 07 	lds	r25, 0x07D7
    5880:	89 2b       	or	r24, r25
    5882:	09 f1       	breq	.+66     	; 0x58c6 <STEPPER_clk+0xba>
    5884:	80 91 fa 07 	lds	r24, 0x07FA
    5888:	90 91 fb 07 	lds	r25, 0x07FB
    588c:	20 91 d6 07 	lds	r18, 0x07D6
    5890:	30 91 d7 07 	lds	r19, 0x07D7
    5894:	82 0f       	add	r24, r18
    5896:	93 1f       	adc	r25, r19
    5898:	90 93 fb 07 	sts	0x07FB, r25
    589c:	80 93 fa 07 	sts	0x07FA, r24
    58a0:	80 91 fa 07 	lds	r24, 0x07FA
    58a4:	90 91 fb 07 	lds	r25, 0x07FB
    58a8:	88 5e       	subi	r24, 0xE8	; 232
    58aa:	93 40       	sbci	r25, 0x03	; 3
    58ac:	a4 f0       	brlt	.+40     	; 0x58d6 <STEPPER_clk+0xca>
    58ae:	80 91 fa 07 	lds	r24, 0x07FA
    58b2:	90 91 fb 07 	lds	r25, 0x07FB
    58b6:	88 5e       	subi	r24, 0xE8	; 232
    58b8:	93 40       	sbci	r25, 0x03	; 3
    58ba:	90 93 fb 07 	sts	0x07FB, r25
    58be:	80 93 fa 07 	sts	0x07FA, r24
    58c2:	61 e0       	ldi	r22, 0x01	; 1
    58c4:	09 c0       	rjmp	.+18     	; 0x58d8 <STEPPER_clk+0xcc>
    58c6:	80 91 ce 07 	lds	r24, 0x07CE
    58ca:	90 91 cf 07 	lds	r25, 0x07CF
    58ce:	90 93 d3 07 	sts	0x07D3, r25
    58d2:	80 93 d2 07 	sts	0x07D2, r24
    58d6:	60 e0       	ldi	r22, 0x00	; 0
    58d8:	84 2f       	mov	r24, r20
    58da:	0e 94 b7 2c 	call	0x596e	; 0x596e <STEPPER_process_accel>
    58de:	80 91 f4 07 	lds	r24, 0x07F4
    58e2:	90 91 f5 07 	lds	r25, 0x07F5
    58e6:	20 91 d0 07 	lds	r18, 0x07D0
    58ea:	30 91 d1 07 	lds	r19, 0x07D1
    58ee:	28 0f       	add	r18, r24
    58f0:	39 1f       	adc	r19, r25
    58f2:	30 93 f5 07 	sts	0x07F5, r19
    58f6:	20 93 f4 07 	sts	0x07F4, r18
    58fa:	80 91 f4 07 	lds	r24, 0x07F4
    58fe:	90 91 f5 07 	lds	r25, 0x07F5
    5902:	88 5e       	subi	r24, 0xE8	; 232
    5904:	93 40       	sbci	r25, 0x03	; 3
    5906:	14 f4       	brge	.+4      	; 0x590c <STEPPER_clk+0x100>
    5908:	40 e0       	ldi	r20, 0x00	; 0
    590a:	0b c0       	rjmp	.+22     	; 0x5922 <STEPPER_clk+0x116>
    590c:	80 91 f4 07 	lds	r24, 0x07F4
    5910:	90 91 f5 07 	lds	r25, 0x07F5
    5914:	88 5e       	subi	r24, 0xE8	; 232
    5916:	93 40       	sbci	r25, 0x03	; 3
    5918:	90 93 f5 07 	sts	0x07F5, r25
    591c:	80 93 f4 07 	sts	0x07F4, r24
    5920:	41 e0       	ldi	r20, 0x01	; 1
    5922:	80 91 f6 07 	lds	r24, 0x07F6
    5926:	90 91 f7 07 	lds	r25, 0x07F7
    592a:	20 91 d2 07 	lds	r18, 0x07D2
    592e:	30 91 d3 07 	lds	r19, 0x07D3
    5932:	28 0f       	add	r18, r24
    5934:	39 1f       	adc	r19, r25
    5936:	30 93 f7 07 	sts	0x07F7, r19
    593a:	20 93 f6 07 	sts	0x07F6, r18
    593e:	80 91 f6 07 	lds	r24, 0x07F6
    5942:	90 91 f7 07 	lds	r25, 0x07F7
    5946:	88 5e       	subi	r24, 0xE8	; 232
    5948:	93 40       	sbci	r25, 0x03	; 3
    594a:	14 f4       	brge	.+4      	; 0x5950 <STEPPER_clk+0x144>
    594c:	60 e0       	ldi	r22, 0x00	; 0
    594e:	0b c0       	rjmp	.+22     	; 0x5966 <STEPPER_clk+0x15a>
    5950:	80 91 f6 07 	lds	r24, 0x07F6
    5954:	90 91 f7 07 	lds	r25, 0x07F7
    5958:	88 5e       	subi	r24, 0xE8	; 232
    595a:	93 40       	sbci	r25, 0x03	; 3
    595c:	90 93 f7 07 	sts	0x07F7, r25
    5960:	80 93 f6 07 	sts	0x07F6, r24
    5964:	61 e0       	ldi	r22, 0x01	; 1
    5966:	84 2f       	mov	r24, r20
    5968:	0e 94 fc 2c 	call	0x59f8	; 0x59f8 <STEPPER_process_run_mode>
    596c:	08 95       	ret

0000596e <STEPPER_process_accel>:
    596e:	88 23       	and	r24, r24
    5970:	f1 f0       	breq	.+60     	; 0x59ae <STEPPER_process_accel+0x40>
    5972:	20 91 cc 07 	lds	r18, 0x07CC
    5976:	30 91 cd 07 	lds	r19, 0x07CD
    597a:	80 91 d0 07 	lds	r24, 0x07D0
    597e:	90 91 d1 07 	lds	r25, 0x07D1
    5982:	28 1b       	sub	r18, r24
    5984:	39 0b       	sbc	r19, r25
    5986:	12 16       	cp	r1, r18
    5988:	13 06       	cpc	r1, r19
    598a:	34 f4       	brge	.+12     	; 0x5998 <STEPPER_process_accel+0x2a>
    598c:	80 91 d0 07 	lds	r24, 0x07D0
    5990:	90 91 d1 07 	lds	r25, 0x07D1
    5994:	01 96       	adiw	r24, 0x01	; 1
    5996:	07 c0       	rjmp	.+14     	; 0x59a6 <STEPPER_process_accel+0x38>
    5998:	23 2b       	or	r18, r19
    599a:	49 f0       	breq	.+18     	; 0x59ae <STEPPER_process_accel+0x40>
    599c:	80 91 d0 07 	lds	r24, 0x07D0
    59a0:	90 91 d1 07 	lds	r25, 0x07D1
    59a4:	01 97       	sbiw	r24, 0x01	; 1
    59a6:	90 93 d1 07 	sts	0x07D1, r25
    59aa:	80 93 d0 07 	sts	0x07D0, r24
    59ae:	66 23       	and	r22, r22
    59b0:	11 f1       	breq	.+68     	; 0x59f6 <STEPPER_process_accel+0x88>
    59b2:	20 91 ce 07 	lds	r18, 0x07CE
    59b6:	30 91 cf 07 	lds	r19, 0x07CF
    59ba:	80 91 d2 07 	lds	r24, 0x07D2
    59be:	90 91 d3 07 	lds	r25, 0x07D3
    59c2:	28 1b       	sub	r18, r24
    59c4:	39 0b       	sbc	r19, r25
    59c6:	12 16       	cp	r1, r18
    59c8:	13 06       	cpc	r1, r19
    59ca:	54 f4       	brge	.+20     	; 0x59e0 <STEPPER_process_accel+0x72>
    59cc:	80 91 d2 07 	lds	r24, 0x07D2
    59d0:	90 91 d3 07 	lds	r25, 0x07D3
    59d4:	01 96       	adiw	r24, 0x01	; 1
    59d6:	90 93 d3 07 	sts	0x07D3, r25
    59da:	80 93 d2 07 	sts	0x07D2, r24
    59de:	08 95       	ret
    59e0:	23 2b       	or	r18, r19
    59e2:	49 f0       	breq	.+18     	; 0x59f6 <STEPPER_process_accel+0x88>
    59e4:	80 91 d2 07 	lds	r24, 0x07D2
    59e8:	90 91 d3 07 	lds	r25, 0x07D3
    59ec:	01 97       	sbiw	r24, 0x01	; 1
    59ee:	90 93 d3 07 	sts	0x07D3, r25
    59f2:	80 93 d2 07 	sts	0x07D2, r24
    59f6:	08 95       	ret

000059f8 <STEPPER_process_run_mode>:
    59f8:	0f 93       	push	r16
    59fa:	1f 93       	push	r17
    59fc:	18 2f       	mov	r17, r24
    59fe:	06 2f       	mov	r16, r22
    5a00:	80 91 00 08 	lds	r24, 0x0800
    5a04:	88 23       	and	r24, r24
    5a06:	09 f0       	breq	.+2      	; 0x5a0a <STEPPER_process_run_mode+0x12>
    5a08:	e7 c0       	rjmp	.+462    	; 0x5bd8 <STEPPER_process_run_mode+0x1e0>
    5a0a:	80 91 e8 07 	lds	r24, 0x07E8
    5a0e:	88 23       	and	r24, r24
    5a10:	09 f0       	breq	.+2      	; 0x5a14 <STEPPER_process_run_mode+0x1c>
    5a12:	5a c0       	rjmp	.+180    	; 0x5ac8 <STEPPER_process_run_mode+0xd0>
    5a14:	80 91 d0 07 	lds	r24, 0x07D0
    5a18:	90 91 d1 07 	lds	r25, 0x07D1
    5a1c:	89 2b       	or	r24, r25
    5a1e:	e9 f4       	brne	.+58     	; 0x5a5a <STEPPER_process_run_mode+0x62>
    5a20:	80 91 0a 05 	lds	r24, 0x050A
    5a24:	83 7e       	andi	r24, 0xE3	; 227
    5a26:	80 93 0a 05 	sts	0x050A, r24
    5a2a:	10 92 f1 07 	sts	0x07F1, r1
    5a2e:	80 91 fc 07 	lds	r24, 0x07FC
    5a32:	88 23       	and	r24, r24
    5a34:	09 f4       	brne	.+2      	; 0x5a38 <STEPPER_process_run_mode+0x40>
    5a36:	5d c0       	rjmp	.+186    	; 0x5af2 <STEPPER_process_run_mode+0xfa>
    5a38:	60 91 ea 07 	lds	r22, 0x07EA
    5a3c:	80 e0       	ldi	r24, 0x00	; 0
    5a3e:	0e 94 ad 21 	call	0x435a	; 0x435a <STEPPER_stop>
    5a42:	e0 91 fe 07 	lds	r30, 0x07FE
    5a46:	f0 91 ff 07 	lds	r31, 0x07FF
    5a4a:	30 97       	sbiw	r30, 0x00	; 0
    5a4c:	09 f4       	brne	.+2      	; 0x5a50 <STEPPER_process_run_mode+0x58>
    5a4e:	51 c0       	rjmp	.+162    	; 0x5af2 <STEPPER_process_run_mode+0xfa>
    5a50:	81 e0       	ldi	r24, 0x01	; 1
    5a52:	80 83       	st	Z, r24
    5a54:	10 92 fc 07 	sts	0x07FC, r1
    5a58:	4c c0       	rjmp	.+152    	; 0x5af2 <STEPPER_process_run_mode+0xfa>
    5a5a:	80 91 ca 07 	lds	r24, 0x07CA
    5a5e:	81 30       	cpi	r24, 0x01	; 1
    5a60:	41 f4       	brne	.+16     	; 0x5a72 <STEPPER_process_run_mode+0x7a>
    5a62:	80 91 dc 07 	lds	r24, 0x07DC
    5a66:	90 91 dd 07 	lds	r25, 0x07DD
    5a6a:	01 97       	sbiw	r24, 0x01	; 1
    5a6c:	11 f4       	brne	.+4      	; 0x5a72 <STEPPER_process_run_mode+0x7a>
    5a6e:	11 e0       	ldi	r17, 0x01	; 1
    5a70:	02 c0       	rjmp	.+4      	; 0x5a76 <STEPPER_process_run_mode+0x7e>
    5a72:	11 23       	and	r17, r17
    5a74:	f1 f1       	breq	.+124    	; 0x5af2 <STEPPER_process_run_mode+0xfa>
    5a76:	e0 91 ef 07 	lds	r30, 0x07EF
    5a7a:	f0 e0       	ldi	r31, 0x00	; 0
    5a7c:	e6 5c       	subi	r30, 0xC6	; 198
    5a7e:	fb 4f       	sbci	r31, 0xFB	; 251
    5a80:	90 91 0a 05 	lds	r25, 0x050A
    5a84:	93 7e       	andi	r25, 0xE3	; 227
    5a86:	80 81       	ld	r24, Z
    5a88:	89 2b       	or	r24, r25
    5a8a:	80 93 0a 05 	sts	0x050A, r24
    5a8e:	80 91 ed 07 	lds	r24, 0x07ED
    5a92:	88 23       	and	r24, r24
    5a94:	21 f4       	brne	.+8      	; 0x5a9e <STEPPER_process_run_mode+0xa6>
    5a96:	80 91 ef 07 	lds	r24, 0x07EF
    5a9a:	8f 5f       	subi	r24, 0xFF	; 255
    5a9c:	03 c0       	rjmp	.+6      	; 0x5aa4 <STEPPER_process_run_mode+0xac>
    5a9e:	80 91 ef 07 	lds	r24, 0x07EF
    5aa2:	81 50       	subi	r24, 0x01	; 1
    5aa4:	80 93 ef 07 	sts	0x07EF, r24
    5aa8:	80 91 ef 07 	lds	r24, 0x07EF
    5aac:	83 70       	andi	r24, 0x03	; 3
    5aae:	80 93 ef 07 	sts	0x07EF, r24
    5ab2:	81 e0       	ldi	r24, 0x01	; 1
    5ab4:	80 93 f1 07 	sts	0x07F1, r24
    5ab8:	80 91 ca 07 	lds	r24, 0x07CA
    5abc:	81 30       	cpi	r24, 0x01	; 1
    5abe:	c9 f4       	brne	.+50     	; 0x5af2 <STEPPER_process_run_mode+0xfa>
    5ac0:	80 e0       	ldi	r24, 0x00	; 0
    5ac2:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <STEPPER_process_step_mode>
    5ac6:	15 c0       	rjmp	.+42     	; 0x5af2 <STEPPER_process_run_mode+0xfa>
    5ac8:	90 91 0a 05 	lds	r25, 0x050A
    5acc:	93 7e       	andi	r25, 0xE3	; 227
    5ace:	90 93 0a 05 	sts	0x050A, r25
    5ad2:	e0 91 ef 07 	lds	r30, 0x07EF
    5ad6:	f0 e0       	ldi	r31, 0x00	; 0
    5ad8:	e6 5c       	subi	r30, 0xC6	; 198
    5ada:	fb 4f       	sbci	r31, 0xFB	; 251
    5adc:	80 81       	ld	r24, Z
    5ade:	89 2b       	or	r24, r25
    5ae0:	80 93 0a 05 	sts	0x050A, r24
    5ae4:	82 e0       	ldi	r24, 0x02	; 2
    5ae6:	80 93 f1 07 	sts	0x07F1, r24
    5aea:	10 92 d1 07 	sts	0x07D1, r1
    5aee:	10 92 d0 07 	sts	0x07D0, r1
    5af2:	80 91 e9 07 	lds	r24, 0x07E9
    5af6:	88 23       	and	r24, r24
    5af8:	09 f0       	breq	.+2      	; 0x5afc <STEPPER_process_run_mode+0x104>
    5afa:	59 c0       	rjmp	.+178    	; 0x5bae <STEPPER_process_run_mode+0x1b6>
    5afc:	80 91 d2 07 	lds	r24, 0x07D2
    5b00:	90 91 d3 07 	lds	r25, 0x07D3
    5b04:	89 2b       	or	r24, r25
    5b06:	e9 f4       	brne	.+58     	; 0x5b42 <STEPPER_process_run_mode+0x14a>
    5b08:	80 91 0a 05 	lds	r24, 0x050A
    5b0c:	8f 71       	andi	r24, 0x1F	; 31
    5b0e:	80 93 0a 05 	sts	0x050A, r24
    5b12:	10 92 f2 07 	sts	0x07F2, r1
    5b16:	80 91 fd 07 	lds	r24, 0x07FD
    5b1a:	88 23       	and	r24, r24
    5b1c:	09 f4       	brne	.+2      	; 0x5b20 <STEPPER_process_run_mode+0x128>
    5b1e:	5c c0       	rjmp	.+184    	; 0x5bd8 <STEPPER_process_run_mode+0x1e0>
    5b20:	60 91 eb 07 	lds	r22, 0x07EB
    5b24:	81 e0       	ldi	r24, 0x01	; 1
    5b26:	0e 94 ad 21 	call	0x435a	; 0x435a <STEPPER_stop>
    5b2a:	e0 91 fe 07 	lds	r30, 0x07FE
    5b2e:	f0 91 ff 07 	lds	r31, 0x07FF
    5b32:	30 97       	sbiw	r30, 0x00	; 0
    5b34:	09 f4       	brne	.+2      	; 0x5b38 <STEPPER_process_run_mode+0x140>
    5b36:	50 c0       	rjmp	.+160    	; 0x5bd8 <STEPPER_process_run_mode+0x1e0>
    5b38:	81 e0       	ldi	r24, 0x01	; 1
    5b3a:	81 83       	std	Z+1, r24	; 0x01
    5b3c:	10 92 fd 07 	sts	0x07FD, r1
    5b40:	4b c0       	rjmp	.+150    	; 0x5bd8 <STEPPER_process_run_mode+0x1e0>
    5b42:	80 91 cb 07 	lds	r24, 0x07CB
    5b46:	81 30       	cpi	r24, 0x01	; 1
    5b48:	41 f4       	brne	.+16     	; 0x5b5a <STEPPER_process_run_mode+0x162>
    5b4a:	80 91 de 07 	lds	r24, 0x07DE
    5b4e:	90 91 df 07 	lds	r25, 0x07DF
    5b52:	01 97       	sbiw	r24, 0x01	; 1
    5b54:	11 f4       	brne	.+4      	; 0x5b5a <STEPPER_process_run_mode+0x162>
    5b56:	01 e0       	ldi	r16, 0x01	; 1
    5b58:	02 c0       	rjmp	.+4      	; 0x5b5e <STEPPER_process_run_mode+0x166>
    5b5a:	00 23       	and	r16, r16
    5b5c:	e9 f1       	breq	.+122    	; 0x5bd8 <STEPPER_process_run_mode+0x1e0>
    5b5e:	e0 91 f0 07 	lds	r30, 0x07F0
    5b62:	f0 e0       	ldi	r31, 0x00	; 0
    5b64:	e2 5c       	subi	r30, 0xC2	; 194
    5b66:	fb 4f       	sbci	r31, 0xFB	; 251
    5b68:	90 91 0a 05 	lds	r25, 0x050A
    5b6c:	9f 71       	andi	r25, 0x1F	; 31
    5b6e:	80 81       	ld	r24, Z
    5b70:	89 2b       	or	r24, r25
    5b72:	80 93 0a 05 	sts	0x050A, r24
    5b76:	80 91 ee 07 	lds	r24, 0x07EE
    5b7a:	88 23       	and	r24, r24
    5b7c:	21 f4       	brne	.+8      	; 0x5b86 <STEPPER_process_run_mode+0x18e>
    5b7e:	80 91 f0 07 	lds	r24, 0x07F0
    5b82:	8f 5f       	subi	r24, 0xFF	; 255
    5b84:	03 c0       	rjmp	.+6      	; 0x5b8c <STEPPER_process_run_mode+0x194>
    5b86:	80 91 f0 07 	lds	r24, 0x07F0
    5b8a:	81 50       	subi	r24, 0x01	; 1
    5b8c:	80 93 f0 07 	sts	0x07F0, r24
    5b90:	80 91 f0 07 	lds	r24, 0x07F0
    5b94:	83 70       	andi	r24, 0x03	; 3
    5b96:	80 93 f0 07 	sts	0x07F0, r24
    5b9a:	81 e0       	ldi	r24, 0x01	; 1
    5b9c:	80 93 f2 07 	sts	0x07F2, r24
    5ba0:	80 91 cb 07 	lds	r24, 0x07CB
    5ba4:	81 30       	cpi	r24, 0x01	; 1
    5ba6:	c1 f4       	brne	.+48     	; 0x5bd8 <STEPPER_process_run_mode+0x1e0>
    5ba8:	0e 94 ff 2d 	call	0x5bfe	; 0x5bfe <STEPPER_process_step_mode>
    5bac:	15 c0       	rjmp	.+42     	; 0x5bd8 <STEPPER_process_run_mode+0x1e0>
    5bae:	90 91 0a 05 	lds	r25, 0x050A
    5bb2:	9f 71       	andi	r25, 0x1F	; 31
    5bb4:	90 93 0a 05 	sts	0x050A, r25
    5bb8:	e0 91 f0 07 	lds	r30, 0x07F0
    5bbc:	f0 e0       	ldi	r31, 0x00	; 0
    5bbe:	e2 5c       	subi	r30, 0xC2	; 194
    5bc0:	fb 4f       	sbci	r31, 0xFB	; 251
    5bc2:	80 81       	ld	r24, Z
    5bc4:	89 2b       	or	r24, r25
    5bc6:	80 93 0a 05 	sts	0x050A, r24
    5bca:	82 e0       	ldi	r24, 0x02	; 2
    5bcc:	80 93 f2 07 	sts	0x07F2, r24
    5bd0:	10 92 d3 07 	sts	0x07D3, r1
    5bd4:	10 92 d2 07 	sts	0x07D2, r1
    5bd8:	80 91 f3 07 	lds	r24, 0x07F3
    5bdc:	88 23       	and	r24, r24
    5bde:	31 f4       	brne	.+12     	; 0x5bec <STEPPER_process_run_mode+0x1f4>
    5be0:	8a e0       	ldi	r24, 0x0A	; 10
    5be2:	95 e0       	ldi	r25, 0x05	; 5
    5be4:	61 2f       	mov	r22, r17
    5be6:	40 2f       	mov	r20, r16
    5be8:	0e 94 c1 2e 	call	0x5d82	; 0x5d82 <STEPPER_process_pwm>
    5bec:	88 b1       	in	r24, 0x08	; 8
    5bee:	83 70       	andi	r24, 0x03	; 3
    5bf0:	90 91 0a 05 	lds	r25, 0x050A
    5bf4:	89 2b       	or	r24, r25
    5bf6:	88 b9       	out	0x08, r24	; 8
    5bf8:	1f 91       	pop	r17
    5bfa:	0f 91       	pop	r16
    5bfc:	08 95       	ret

00005bfe <STEPPER_process_step_mode>:
    5bfe:	88 23       	and	r24, r24
    5c00:	21 f0       	breq	.+8      	; 0x5c0a <STEPPER_process_step_mode+0xc>
    5c02:	81 30       	cpi	r24, 0x01	; 1
    5c04:	09 f0       	breq	.+2      	; 0x5c08 <STEPPER_process_step_mode+0xa>
    5c06:	4e c0       	rjmp	.+156    	; 0x5ca4 <STEPPER_process_step_mode+0xa6>
    5c08:	27 c0       	rjmp	.+78     	; 0x5c58 <STEPPER_process_step_mode+0x5a>
    5c0a:	80 91 dc 07 	lds	r24, 0x07DC
    5c0e:	90 91 dd 07 	lds	r25, 0x07DD
    5c12:	89 2b       	or	r24, r25
    5c14:	49 f0       	breq	.+18     	; 0x5c28 <STEPPER_process_step_mode+0x2a>
    5c16:	80 91 dc 07 	lds	r24, 0x07DC
    5c1a:	90 91 dd 07 	lds	r25, 0x07DD
    5c1e:	01 97       	sbiw	r24, 0x01	; 1
    5c20:	90 93 dd 07 	sts	0x07DD, r25
    5c24:	80 93 dc 07 	sts	0x07DC, r24
    5c28:	80 91 fc 07 	lds	r24, 0x07FC
    5c2c:	88 23       	and	r24, r24
    5c2e:	d1 f5       	brne	.+116    	; 0x5ca4 <STEPPER_process_step_mode+0xa6>
    5c30:	20 91 dc 07 	lds	r18, 0x07DC
    5c34:	30 91 dd 07 	lds	r19, 0x07DD
    5c38:	80 91 e0 07 	lds	r24, 0x07E0
    5c3c:	90 91 e1 07 	lds	r25, 0x07E1
    5c40:	28 17       	cp	r18, r24
    5c42:	39 07       	cpc	r19, r25
    5c44:	79 f5       	brne	.+94     	; 0x5ca4 <STEPPER_process_step_mode+0xa6>
    5c46:	80 e0       	ldi	r24, 0x00	; 0
    5c48:	60 e0       	ldi	r22, 0x00	; 0
    5c4a:	70 e0       	ldi	r23, 0x00	; 0
    5c4c:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <STEPPER_set_speed>
    5c50:	81 e0       	ldi	r24, 0x01	; 1
    5c52:	80 93 fc 07 	sts	0x07FC, r24
    5c56:	08 95       	ret
    5c58:	80 91 de 07 	lds	r24, 0x07DE
    5c5c:	90 91 df 07 	lds	r25, 0x07DF
    5c60:	89 2b       	or	r24, r25
    5c62:	49 f0       	breq	.+18     	; 0x5c76 <STEPPER_process_step_mode+0x78>
    5c64:	80 91 de 07 	lds	r24, 0x07DE
    5c68:	90 91 df 07 	lds	r25, 0x07DF
    5c6c:	01 97       	sbiw	r24, 0x01	; 1
    5c6e:	90 93 df 07 	sts	0x07DF, r25
    5c72:	80 93 de 07 	sts	0x07DE, r24
    5c76:	80 91 fd 07 	lds	r24, 0x07FD
    5c7a:	88 23       	and	r24, r24
    5c7c:	99 f4       	brne	.+38     	; 0x5ca4 <STEPPER_process_step_mode+0xa6>
    5c7e:	20 91 de 07 	lds	r18, 0x07DE
    5c82:	30 91 df 07 	lds	r19, 0x07DF
    5c86:	80 91 e2 07 	lds	r24, 0x07E2
    5c8a:	90 91 e3 07 	lds	r25, 0x07E3
    5c8e:	28 17       	cp	r18, r24
    5c90:	39 07       	cpc	r19, r25
    5c92:	41 f4       	brne	.+16     	; 0x5ca4 <STEPPER_process_step_mode+0xa6>
    5c94:	81 e0       	ldi	r24, 0x01	; 1
    5c96:	60 e0       	ldi	r22, 0x00	; 0
    5c98:	70 e0       	ldi	r23, 0x00	; 0
    5c9a:	0e 94 e4 20 	call	0x41c8	; 0x41c8 <STEPPER_set_speed>
    5c9e:	81 e0       	ldi	r24, 0x01	; 1
    5ca0:	80 93 fd 07 	sts	0x07FD, r24
    5ca4:	08 95       	ret

00005ca6 <TMRSRVC_process>:
    5ca6:	ff 92       	push	r15
    5ca8:	0f 93       	push	r16
    5caa:	1f 93       	push	r17
    5cac:	cf 93       	push	r28
    5cae:	df 93       	push	r29
    5cb0:	80 91 3a 08 	lds	r24, 0x083A
    5cb4:	88 23       	and	r24, r24
    5cb6:	09 f4       	brne	.+2      	; 0x5cba <TMRSRVC_process+0x14>
    5cb8:	59 c0       	rjmp	.+178    	; 0x5d6c <TMRSRVC_process+0xc6>
    5cba:	00 91 3b 08 	lds	r16, 0x083B
    5cbe:	10 91 3c 08 	lds	r17, 0x083C
    5cc2:	f8 01       	movw	r30, r16
    5cc4:	c0 81       	ld	r28, Z
    5cc6:	d1 81       	ldd	r29, Z+1	; 0x01
    5cc8:	8c 81       	ldd	r24, Y+4	; 0x04
    5cca:	9d 81       	ldd	r25, Y+5	; 0x05
    5ccc:	01 97       	sbiw	r24, 0x01	; 1
    5cce:	9d 83       	std	Y+5, r25	; 0x05
    5cd0:	8c 83       	std	Y+4, r24	; 0x04
    5cd2:	18 16       	cp	r1, r24
    5cd4:	19 06       	cpc	r1, r25
    5cd6:	0c f4       	brge	.+2      	; 0x5cda <TMRSRVC_process+0x34>
    5cd8:	49 c0       	rjmp	.+146    	; 0x5d6c <TMRSRVC_process+0xc6>
    5cda:	89 81       	ldd	r24, Y+1	; 0x01
    5cdc:	80 ff       	sbrs	r24, 0
    5cde:	05 c0       	rjmp	.+10     	; 0x5cea <TMRSRVC_process+0x44>
    5ce0:	8e 81       	ldd	r24, Y+6	; 0x06
    5ce2:	88 23       	and	r24, r24
    5ce4:	11 f4       	brne	.+4      	; 0x5cea <TMRSRVC_process+0x44>
    5ce6:	81 e0       	ldi	r24, 0x01	; 1
    5ce8:	8e 83       	std	Y+6, r24	; 0x06
    5cea:	89 81       	ldd	r24, Y+1	; 0x01
    5cec:	81 ff       	sbrs	r24, 1
    5cee:	03 c0       	rjmp	.+6      	; 0x5cf6 <TMRSRVC_process+0x50>
    5cf0:	ef 81       	ldd	r30, Y+7	; 0x07
    5cf2:	f8 85       	ldd	r31, Y+8	; 0x08
    5cf4:	09 95       	icall
    5cf6:	80 91 3a 08 	lds	r24, 0x083A
    5cfa:	82 30       	cpi	r24, 0x02	; 2
    5cfc:	a8 f0       	brcs	.+42     	; 0x5d28 <TMRSRVC_process+0x82>
    5cfe:	f8 01       	movw	r30, r16
    5d00:	82 81       	ldd	r24, Z+2	; 0x02
    5d02:	93 81       	ldd	r25, Z+3	; 0x03
    5d04:	90 93 3c 08 	sts	0x083C, r25
    5d08:	80 93 3b 08 	sts	0x083B, r24
    5d0c:	13 82       	std	Z+3, r1	; 0x03
    5d0e:	12 82       	std	Z+2, r1	; 0x02
    5d10:	e0 91 00 00 	lds	r30, 0x0000
    5d14:	f0 91 01 00 	lds	r31, 0x0001
    5d18:	84 81       	ldd	r24, Z+4	; 0x04
    5d1a:	95 81       	ldd	r25, Z+5	; 0x05
    5d1c:	18 16       	cp	r1, r24
    5d1e:	19 06       	cpc	r1, r25
    5d20:	3c f0       	brlt	.+14     	; 0x5d30 <TMRSRVC_process+0x8a>
    5d22:	ff 24       	eor	r15, r15
    5d24:	f3 94       	inc	r15
    5d26:	05 c0       	rjmp	.+10     	; 0x5d32 <TMRSRVC_process+0x8c>
    5d28:	10 92 3c 08 	sts	0x083C, r1
    5d2c:	10 92 3b 08 	sts	0x083B, r1
    5d30:	ff 24       	eor	r15, r15
    5d32:	80 91 3a 08 	lds	r24, 0x083A
    5d36:	81 50       	subi	r24, 0x01	; 1
    5d38:	80 93 3a 08 	sts	0x083A, r24
    5d3c:	80 91 3a 08 	lds	r24, 0x083A
    5d40:	88 23       	and	r24, r24
    5d42:	11 f4       	brne	.+4      	; 0x5d48 <TMRSRVC_process+0xa2>
    5d44:	0e 94 be 2e 	call	0x5d7c	; 0x5d7c <TMRSRVC_stop>
    5d48:	89 81       	ldd	r24, Y+1	; 0x01
    5d4a:	82 ff       	sbrs	r24, 2
    5d4c:	08 c0       	rjmp	.+16     	; 0x5d5e <TMRSRVC_process+0xb8>
    5d4e:	8a 81       	ldd	r24, Y+2	; 0x02
    5d50:	9b 81       	ldd	r25, Y+3	; 0x03
    5d52:	9d 83       	std	Y+5, r25	; 0x05
    5d54:	8c 83       	std	Y+4, r24	; 0x04
    5d56:	c8 01       	movw	r24, r16
    5d58:	0e 94 33 2a 	call	0x5466	; 0x5466 <TMRSRVC_insert>
    5d5c:	08 c0       	rjmp	.+16     	; 0x5d6e <TMRSRVC_process+0xc8>
    5d5e:	c8 01       	movw	r24, r16
    5d60:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <free>
    5d64:	89 81       	ldd	r24, Y+1	; 0x01
    5d66:	8f 7e       	andi	r24, 0xEF	; 239
    5d68:	89 83       	std	Y+1, r24	; 0x01
    5d6a:	01 c0       	rjmp	.+2      	; 0x5d6e <TMRSRVC_process+0xc8>
    5d6c:	ff 24       	eor	r15, r15
    5d6e:	8f 2d       	mov	r24, r15
    5d70:	df 91       	pop	r29
    5d72:	cf 91       	pop	r28
    5d74:	1f 91       	pop	r17
    5d76:	0f 91       	pop	r16
    5d78:	ff 90       	pop	r15
    5d7a:	08 95       	ret

00005d7c <TMRSRVC_stop>:
    5d7c:	10 92 09 05 	sts	0x0509, r1
    5d80:	08 95       	ret

00005d82 <STEPPER_process_pwm>:
    5d82:	fc 01       	movw	r30, r24
    5d84:	80 91 f1 07 	lds	r24, 0x07F1
    5d88:	82 30       	cpi	r24, 0x02	; 2
    5d8a:	69 f4       	brne	.+26     	; 0x5da6 <STEPPER_process_pwm+0x24>
    5d8c:	80 91 0e 05 	lds	r24, 0x050E
    5d90:	91 e0       	ldi	r25, 0x01	; 1
    5d92:	89 27       	eor	r24, r25
    5d94:	80 93 0e 05 	sts	0x050E, r24
    5d98:	88 23       	and	r24, r24
    5d9a:	09 f0       	breq	.+2      	; 0x5d9e <STEPPER_process_pwm+0x1c>
    5d9c:	3e c0       	rjmp	.+124    	; 0x5e1a <STEPPER_process_pwm+0x98>
    5d9e:	80 81       	ld	r24, Z
    5da0:	83 7e       	andi	r24, 0xE3	; 227
    5da2:	80 83       	st	Z, r24
    5da4:	3a c0       	rjmp	.+116    	; 0x5e1a <STEPPER_process_pwm+0x98>
    5da6:	80 91 d0 07 	lds	r24, 0x07D0
    5daa:	90 91 d1 07 	lds	r25, 0x07D1
    5dae:	c3 97       	sbiw	r24, 0x33	; 51
    5db0:	a4 f5       	brge	.+104    	; 0x5e1a <STEPPER_process_pwm+0x98>
    5db2:	66 23       	and	r22, r22
    5db4:	d1 f0       	breq	.+52     	; 0x5dea <STEPPER_process_pwm+0x68>
    5db6:	20 91 d0 07 	lds	r18, 0x07D0
    5dba:	30 91 d1 07 	lds	r19, 0x07D1
    5dbe:	80 e6       	ldi	r24, 0x60	; 96
    5dc0:	90 e0       	ldi	r25, 0x00	; 0
    5dc2:	bc 01       	movw	r22, r24
    5dc4:	26 9f       	mul	r18, r22
    5dc6:	c0 01       	movw	r24, r0
    5dc8:	27 9f       	mul	r18, r23
    5dca:	90 0d       	add	r25, r0
    5dcc:	36 9f       	mul	r19, r22
    5dce:	90 0d       	add	r25, r0
    5dd0:	11 24       	eor	r1, r1
    5dd2:	88 0f       	add	r24, r24
    5dd4:	89 2f       	mov	r24, r25
    5dd6:	88 1f       	adc	r24, r24
    5dd8:	99 0b       	sbc	r25, r25
    5dda:	90 93 e5 07 	sts	0x07E5, r25
    5dde:	80 93 e4 07 	sts	0x07E4, r24
    5de2:	81 e0       	ldi	r24, 0x01	; 1
    5de4:	80 93 0c 05 	sts	0x050C, r24
    5de8:	18 c0       	rjmp	.+48     	; 0x5e1a <STEPPER_process_pwm+0x98>
    5dea:	80 91 0c 05 	lds	r24, 0x050C
    5dee:	88 23       	and	r24, r24
    5df0:	a1 f0       	breq	.+40     	; 0x5e1a <STEPPER_process_pwm+0x98>
    5df2:	80 91 e4 07 	lds	r24, 0x07E4
    5df6:	90 91 e5 07 	lds	r25, 0x07E5
    5dfa:	01 97       	sbiw	r24, 0x01	; 1
    5dfc:	90 93 e5 07 	sts	0x07E5, r25
    5e00:	80 93 e4 07 	sts	0x07E4, r24
    5e04:	80 91 e4 07 	lds	r24, 0x07E4
    5e08:	90 91 e5 07 	lds	r25, 0x07E5
    5e0c:	89 2b       	or	r24, r25
    5e0e:	29 f4       	brne	.+10     	; 0x5e1a <STEPPER_process_pwm+0x98>
    5e10:	80 81       	ld	r24, Z
    5e12:	83 7e       	andi	r24, 0xE3	; 227
    5e14:	80 83       	st	Z, r24
    5e16:	10 92 0c 05 	sts	0x050C, r1
    5e1a:	80 91 f2 07 	lds	r24, 0x07F2
    5e1e:	82 30       	cpi	r24, 0x02	; 2
    5e20:	69 f4       	brne	.+26     	; 0x5e3c <STEPPER_process_pwm+0xba>
    5e22:	80 91 0d 05 	lds	r24, 0x050D
    5e26:	91 e0       	ldi	r25, 0x01	; 1
    5e28:	89 27       	eor	r24, r25
    5e2a:	80 93 0d 05 	sts	0x050D, r24
    5e2e:	88 23       	and	r24, r24
    5e30:	09 f0       	breq	.+2      	; 0x5e34 <STEPPER_process_pwm+0xb2>
    5e32:	3e c0       	rjmp	.+124    	; 0x5eb0 <STEPPER_process_pwm+0x12e>
    5e34:	80 81       	ld	r24, Z
    5e36:	8f 71       	andi	r24, 0x1F	; 31
    5e38:	80 83       	st	Z, r24
    5e3a:	08 95       	ret
    5e3c:	80 91 d2 07 	lds	r24, 0x07D2
    5e40:	90 91 d3 07 	lds	r25, 0x07D3
    5e44:	c3 97       	sbiw	r24, 0x33	; 51
    5e46:	a4 f5       	brge	.+104    	; 0x5eb0 <STEPPER_process_pwm+0x12e>
    5e48:	44 23       	and	r20, r20
    5e4a:	d1 f0       	breq	.+52     	; 0x5e80 <STEPPER_process_pwm+0xfe>
    5e4c:	20 91 d2 07 	lds	r18, 0x07D2
    5e50:	30 91 d3 07 	lds	r19, 0x07D3
    5e54:	80 e6       	ldi	r24, 0x60	; 96
    5e56:	90 e0       	ldi	r25, 0x00	; 0
    5e58:	ac 01       	movw	r20, r24
    5e5a:	24 9f       	mul	r18, r20
    5e5c:	c0 01       	movw	r24, r0
    5e5e:	25 9f       	mul	r18, r21
    5e60:	90 0d       	add	r25, r0
    5e62:	34 9f       	mul	r19, r20
    5e64:	90 0d       	add	r25, r0
    5e66:	11 24       	eor	r1, r1
    5e68:	88 0f       	add	r24, r24
    5e6a:	89 2f       	mov	r24, r25
    5e6c:	88 1f       	adc	r24, r24
    5e6e:	99 0b       	sbc	r25, r25
    5e70:	90 93 e7 07 	sts	0x07E7, r25
    5e74:	80 93 e6 07 	sts	0x07E6, r24
    5e78:	81 e0       	ldi	r24, 0x01	; 1
    5e7a:	80 93 0b 05 	sts	0x050B, r24
    5e7e:	08 95       	ret
    5e80:	80 91 0b 05 	lds	r24, 0x050B
    5e84:	88 23       	and	r24, r24
    5e86:	a1 f0       	breq	.+40     	; 0x5eb0 <STEPPER_process_pwm+0x12e>
    5e88:	80 91 e6 07 	lds	r24, 0x07E6
    5e8c:	90 91 e7 07 	lds	r25, 0x07E7
    5e90:	01 97       	sbiw	r24, 0x01	; 1
    5e92:	90 93 e7 07 	sts	0x07E7, r25
    5e96:	80 93 e6 07 	sts	0x07E6, r24
    5e9a:	80 91 e6 07 	lds	r24, 0x07E6
    5e9e:	90 91 e7 07 	lds	r25, 0x07E7
    5ea2:	89 2b       	or	r24, r25
    5ea4:	29 f4       	brne	.+10     	; 0x5eb0 <STEPPER_process_pwm+0x12e>
    5ea6:	80 81       	ld	r24, Z
    5ea8:	8f 71       	andi	r24, 0x1F	; 31
    5eaa:	80 83       	st	Z, r24
    5eac:	10 92 0b 05 	sts	0x050B, r1
    5eb0:	08 95       	ret

00005eb2 <__subsf3>:
    5eb2:	50 58       	subi	r21, 0x80	; 128

00005eb4 <__addsf3>:
    5eb4:	bb 27       	eor	r27, r27
    5eb6:	aa 27       	eor	r26, r26
    5eb8:	0e d0       	rcall	.+28     	; 0x5ed6 <__addsf3x>
    5eba:	75 c1       	rjmp	.+746    	; 0x61a6 <__fp_round>
    5ebc:	66 d1       	rcall	.+716    	; 0x618a <__fp_pscA>
    5ebe:	30 f0       	brcs	.+12     	; 0x5ecc <__addsf3+0x18>
    5ec0:	6b d1       	rcall	.+726    	; 0x6198 <__fp_pscB>
    5ec2:	20 f0       	brcs	.+8      	; 0x5ecc <__addsf3+0x18>
    5ec4:	31 f4       	brne	.+12     	; 0x5ed2 <__addsf3+0x1e>
    5ec6:	9f 3f       	cpi	r25, 0xFF	; 255
    5ec8:	11 f4       	brne	.+4      	; 0x5ece <__addsf3+0x1a>
    5eca:	1e f4       	brtc	.+6      	; 0x5ed2 <__addsf3+0x1e>
    5ecc:	5b c1       	rjmp	.+694    	; 0x6184 <__fp_nan>
    5ece:	0e f4       	brtc	.+2      	; 0x5ed2 <__addsf3+0x1e>
    5ed0:	e0 95       	com	r30
    5ed2:	e7 fb       	bst	r30, 7
    5ed4:	51 c1       	rjmp	.+674    	; 0x6178 <__fp_inf>

00005ed6 <__addsf3x>:
    5ed6:	e9 2f       	mov	r30, r25
    5ed8:	77 d1       	rcall	.+750    	; 0x61c8 <__fp_split3>
    5eda:	80 f3       	brcs	.-32     	; 0x5ebc <__addsf3+0x8>
    5edc:	ba 17       	cp	r27, r26
    5ede:	62 07       	cpc	r22, r18
    5ee0:	73 07       	cpc	r23, r19
    5ee2:	84 07       	cpc	r24, r20
    5ee4:	95 07       	cpc	r25, r21
    5ee6:	18 f0       	brcs	.+6      	; 0x5eee <__addsf3x+0x18>
    5ee8:	71 f4       	brne	.+28     	; 0x5f06 <__addsf3x+0x30>
    5eea:	9e f5       	brtc	.+102    	; 0x5f52 <__addsf3x+0x7c>
    5eec:	8f c1       	rjmp	.+798    	; 0x620c <__fp_zero>
    5eee:	0e f4       	brtc	.+2      	; 0x5ef2 <__addsf3x+0x1c>
    5ef0:	e0 95       	com	r30
    5ef2:	0b 2e       	mov	r0, r27
    5ef4:	ba 2f       	mov	r27, r26
    5ef6:	a0 2d       	mov	r26, r0
    5ef8:	0b 01       	movw	r0, r22
    5efa:	b9 01       	movw	r22, r18
    5efc:	90 01       	movw	r18, r0
    5efe:	0c 01       	movw	r0, r24
    5f00:	ca 01       	movw	r24, r20
    5f02:	a0 01       	movw	r20, r0
    5f04:	11 24       	eor	r1, r1
    5f06:	ff 27       	eor	r31, r31
    5f08:	59 1b       	sub	r21, r25
    5f0a:	99 f0       	breq	.+38     	; 0x5f32 <__addsf3x+0x5c>
    5f0c:	59 3f       	cpi	r21, 0xF9	; 249
    5f0e:	50 f4       	brcc	.+20     	; 0x5f24 <__addsf3x+0x4e>
    5f10:	50 3e       	cpi	r21, 0xE0	; 224
    5f12:	68 f1       	brcs	.+90     	; 0x5f6e <__addsf3x+0x98>
    5f14:	1a 16       	cp	r1, r26
    5f16:	f0 40       	sbci	r31, 0x00	; 0
    5f18:	a2 2f       	mov	r26, r18
    5f1a:	23 2f       	mov	r18, r19
    5f1c:	34 2f       	mov	r19, r20
    5f1e:	44 27       	eor	r20, r20
    5f20:	58 5f       	subi	r21, 0xF8	; 248
    5f22:	f3 cf       	rjmp	.-26     	; 0x5f0a <__addsf3x+0x34>
    5f24:	46 95       	lsr	r20
    5f26:	37 95       	ror	r19
    5f28:	27 95       	ror	r18
    5f2a:	a7 95       	ror	r26
    5f2c:	f0 40       	sbci	r31, 0x00	; 0
    5f2e:	53 95       	inc	r21
    5f30:	c9 f7       	brne	.-14     	; 0x5f24 <__addsf3x+0x4e>
    5f32:	7e f4       	brtc	.+30     	; 0x5f52 <__addsf3x+0x7c>
    5f34:	1f 16       	cp	r1, r31
    5f36:	ba 0b       	sbc	r27, r26
    5f38:	62 0b       	sbc	r22, r18
    5f3a:	73 0b       	sbc	r23, r19
    5f3c:	84 0b       	sbc	r24, r20
    5f3e:	ba f0       	brmi	.+46     	; 0x5f6e <__addsf3x+0x98>
    5f40:	91 50       	subi	r25, 0x01	; 1
    5f42:	a1 f0       	breq	.+40     	; 0x5f6c <__addsf3x+0x96>
    5f44:	ff 0f       	add	r31, r31
    5f46:	bb 1f       	adc	r27, r27
    5f48:	66 1f       	adc	r22, r22
    5f4a:	77 1f       	adc	r23, r23
    5f4c:	88 1f       	adc	r24, r24
    5f4e:	c2 f7       	brpl	.-16     	; 0x5f40 <__addsf3x+0x6a>
    5f50:	0e c0       	rjmp	.+28     	; 0x5f6e <__addsf3x+0x98>
    5f52:	ba 0f       	add	r27, r26
    5f54:	62 1f       	adc	r22, r18
    5f56:	73 1f       	adc	r23, r19
    5f58:	84 1f       	adc	r24, r20
    5f5a:	48 f4       	brcc	.+18     	; 0x5f6e <__addsf3x+0x98>
    5f5c:	87 95       	ror	r24
    5f5e:	77 95       	ror	r23
    5f60:	67 95       	ror	r22
    5f62:	b7 95       	ror	r27
    5f64:	f7 95       	ror	r31
    5f66:	9e 3f       	cpi	r25, 0xFE	; 254
    5f68:	08 f0       	brcs	.+2      	; 0x5f6c <__addsf3x+0x96>
    5f6a:	b3 cf       	rjmp	.-154    	; 0x5ed2 <__addsf3+0x1e>
    5f6c:	93 95       	inc	r25
    5f6e:	88 0f       	add	r24, r24
    5f70:	08 f0       	brcs	.+2      	; 0x5f74 <__addsf3x+0x9e>
    5f72:	99 27       	eor	r25, r25
    5f74:	ee 0f       	add	r30, r30
    5f76:	97 95       	ror	r25
    5f78:	87 95       	ror	r24
    5f7a:	08 95       	ret

00005f7c <__cmpsf2>:
    5f7c:	d9 d0       	rcall	.+434    	; 0x6130 <__fp_cmp>
    5f7e:	08 f4       	brcc	.+2      	; 0x5f82 <__cmpsf2+0x6>
    5f80:	81 e0       	ldi	r24, 0x01	; 1
    5f82:	08 95       	ret

00005f84 <__divsf3>:
    5f84:	0c d0       	rcall	.+24     	; 0x5f9e <__divsf3x>
    5f86:	0f c1       	rjmp	.+542    	; 0x61a6 <__fp_round>
    5f88:	07 d1       	rcall	.+526    	; 0x6198 <__fp_pscB>
    5f8a:	40 f0       	brcs	.+16     	; 0x5f9c <__divsf3+0x18>
    5f8c:	fe d0       	rcall	.+508    	; 0x618a <__fp_pscA>
    5f8e:	30 f0       	brcs	.+12     	; 0x5f9c <__divsf3+0x18>
    5f90:	21 f4       	brne	.+8      	; 0x5f9a <__divsf3+0x16>
    5f92:	5f 3f       	cpi	r21, 0xFF	; 255
    5f94:	19 f0       	breq	.+6      	; 0x5f9c <__divsf3+0x18>
    5f96:	f0 c0       	rjmp	.+480    	; 0x6178 <__fp_inf>
    5f98:	51 11       	cpse	r21, r1
    5f9a:	39 c1       	rjmp	.+626    	; 0x620e <__fp_szero>
    5f9c:	f3 c0       	rjmp	.+486    	; 0x6184 <__fp_nan>

00005f9e <__divsf3x>:
    5f9e:	14 d1       	rcall	.+552    	; 0x61c8 <__fp_split3>
    5fa0:	98 f3       	brcs	.-26     	; 0x5f88 <__divsf3+0x4>

00005fa2 <__divsf3_pse>:
    5fa2:	99 23       	and	r25, r25
    5fa4:	c9 f3       	breq	.-14     	; 0x5f98 <__divsf3+0x14>
    5fa6:	55 23       	and	r21, r21
    5fa8:	b1 f3       	breq	.-20     	; 0x5f96 <__divsf3+0x12>
    5faa:	95 1b       	sub	r25, r21
    5fac:	55 0b       	sbc	r21, r21
    5fae:	bb 27       	eor	r27, r27
    5fb0:	aa 27       	eor	r26, r26
    5fb2:	62 17       	cp	r22, r18
    5fb4:	73 07       	cpc	r23, r19
    5fb6:	84 07       	cpc	r24, r20
    5fb8:	38 f0       	brcs	.+14     	; 0x5fc8 <__divsf3_pse+0x26>
    5fba:	9f 5f       	subi	r25, 0xFF	; 255
    5fbc:	5f 4f       	sbci	r21, 0xFF	; 255
    5fbe:	22 0f       	add	r18, r18
    5fc0:	33 1f       	adc	r19, r19
    5fc2:	44 1f       	adc	r20, r20
    5fc4:	aa 1f       	adc	r26, r26
    5fc6:	a9 f3       	breq	.-22     	; 0x5fb2 <__divsf3_pse+0x10>
    5fc8:	33 d0       	rcall	.+102    	; 0x6030 <__divsf3_pse+0x8e>
    5fca:	0e 2e       	mov	r0, r30
    5fcc:	3a f0       	brmi	.+14     	; 0x5fdc <__divsf3_pse+0x3a>
    5fce:	e0 e8       	ldi	r30, 0x80	; 128
    5fd0:	30 d0       	rcall	.+96     	; 0x6032 <__divsf3_pse+0x90>
    5fd2:	91 50       	subi	r25, 0x01	; 1
    5fd4:	50 40       	sbci	r21, 0x00	; 0
    5fd6:	e6 95       	lsr	r30
    5fd8:	00 1c       	adc	r0, r0
    5fda:	ca f7       	brpl	.-14     	; 0x5fce <__divsf3_pse+0x2c>
    5fdc:	29 d0       	rcall	.+82     	; 0x6030 <__divsf3_pse+0x8e>
    5fde:	fe 2f       	mov	r31, r30
    5fe0:	27 d0       	rcall	.+78     	; 0x6030 <__divsf3_pse+0x8e>
    5fe2:	66 0f       	add	r22, r22
    5fe4:	77 1f       	adc	r23, r23
    5fe6:	88 1f       	adc	r24, r24
    5fe8:	bb 1f       	adc	r27, r27
    5fea:	26 17       	cp	r18, r22
    5fec:	37 07       	cpc	r19, r23
    5fee:	48 07       	cpc	r20, r24
    5ff0:	ab 07       	cpc	r26, r27
    5ff2:	b0 e8       	ldi	r27, 0x80	; 128
    5ff4:	09 f0       	breq	.+2      	; 0x5ff8 <__divsf3_pse+0x56>
    5ff6:	bb 0b       	sbc	r27, r27
    5ff8:	80 2d       	mov	r24, r0
    5ffa:	bf 01       	movw	r22, r30
    5ffc:	ff 27       	eor	r31, r31
    5ffe:	93 58       	subi	r25, 0x83	; 131
    6000:	5f 4f       	sbci	r21, 0xFF	; 255
    6002:	2a f0       	brmi	.+10     	; 0x600e <__divsf3_pse+0x6c>
    6004:	9e 3f       	cpi	r25, 0xFE	; 254
    6006:	51 05       	cpc	r21, r1
    6008:	68 f0       	brcs	.+26     	; 0x6024 <__divsf3_pse+0x82>
    600a:	b6 c0       	rjmp	.+364    	; 0x6178 <__fp_inf>
    600c:	00 c1       	rjmp	.+512    	; 0x620e <__fp_szero>
    600e:	5f 3f       	cpi	r21, 0xFF	; 255
    6010:	ec f3       	brlt	.-6      	; 0x600c <__divsf3_pse+0x6a>
    6012:	98 3e       	cpi	r25, 0xE8	; 232
    6014:	dc f3       	brlt	.-10     	; 0x600c <__divsf3_pse+0x6a>
    6016:	86 95       	lsr	r24
    6018:	77 95       	ror	r23
    601a:	67 95       	ror	r22
    601c:	b7 95       	ror	r27
    601e:	f7 95       	ror	r31
    6020:	9f 5f       	subi	r25, 0xFF	; 255
    6022:	c9 f7       	brne	.-14     	; 0x6016 <__divsf3_pse+0x74>
    6024:	88 0f       	add	r24, r24
    6026:	91 1d       	adc	r25, r1
    6028:	96 95       	lsr	r25
    602a:	87 95       	ror	r24
    602c:	97 f9       	bld	r25, 7
    602e:	08 95       	ret
    6030:	e1 e0       	ldi	r30, 0x01	; 1
    6032:	66 0f       	add	r22, r22
    6034:	77 1f       	adc	r23, r23
    6036:	88 1f       	adc	r24, r24
    6038:	bb 1f       	adc	r27, r27
    603a:	62 17       	cp	r22, r18
    603c:	73 07       	cpc	r23, r19
    603e:	84 07       	cpc	r24, r20
    6040:	ba 07       	cpc	r27, r26
    6042:	20 f0       	brcs	.+8      	; 0x604c <__divsf3_pse+0xaa>
    6044:	62 1b       	sub	r22, r18
    6046:	73 0b       	sbc	r23, r19
    6048:	84 0b       	sbc	r24, r20
    604a:	ba 0b       	sbc	r27, r26
    604c:	ee 1f       	adc	r30, r30
    604e:	88 f7       	brcc	.-30     	; 0x6032 <__divsf3_pse+0x90>
    6050:	e0 95       	com	r30
    6052:	08 95       	ret

00006054 <__fixsfsi>:
    6054:	04 d0       	rcall	.+8      	; 0x605e <__fixunssfsi>
    6056:	68 94       	set
    6058:	b1 11       	cpse	r27, r1
    605a:	d9 c0       	rjmp	.+434    	; 0x620e <__fp_szero>
    605c:	08 95       	ret

0000605e <__fixunssfsi>:
    605e:	bc d0       	rcall	.+376    	; 0x61d8 <__fp_splitA>
    6060:	88 f0       	brcs	.+34     	; 0x6084 <__fixunssfsi+0x26>
    6062:	9f 57       	subi	r25, 0x7F	; 127
    6064:	90 f0       	brcs	.+36     	; 0x608a <__fixunssfsi+0x2c>
    6066:	b9 2f       	mov	r27, r25
    6068:	99 27       	eor	r25, r25
    606a:	b7 51       	subi	r27, 0x17	; 23
    606c:	a0 f0       	brcs	.+40     	; 0x6096 <__fixunssfsi+0x38>
    606e:	d1 f0       	breq	.+52     	; 0x60a4 <__fixunssfsi+0x46>
    6070:	66 0f       	add	r22, r22
    6072:	77 1f       	adc	r23, r23
    6074:	88 1f       	adc	r24, r24
    6076:	99 1f       	adc	r25, r25
    6078:	1a f0       	brmi	.+6      	; 0x6080 <__fixunssfsi+0x22>
    607a:	ba 95       	dec	r27
    607c:	c9 f7       	brne	.-14     	; 0x6070 <__fixunssfsi+0x12>
    607e:	12 c0       	rjmp	.+36     	; 0x60a4 <__fixunssfsi+0x46>
    6080:	b1 30       	cpi	r27, 0x01	; 1
    6082:	81 f0       	breq	.+32     	; 0x60a4 <__fixunssfsi+0x46>
    6084:	c3 d0       	rcall	.+390    	; 0x620c <__fp_zero>
    6086:	b1 e0       	ldi	r27, 0x01	; 1
    6088:	08 95       	ret
    608a:	c0 c0       	rjmp	.+384    	; 0x620c <__fp_zero>
    608c:	67 2f       	mov	r22, r23
    608e:	78 2f       	mov	r23, r24
    6090:	88 27       	eor	r24, r24
    6092:	b8 5f       	subi	r27, 0xF8	; 248
    6094:	39 f0       	breq	.+14     	; 0x60a4 <__fixunssfsi+0x46>
    6096:	b9 3f       	cpi	r27, 0xF9	; 249
    6098:	cc f3       	brlt	.-14     	; 0x608c <__fixunssfsi+0x2e>
    609a:	86 95       	lsr	r24
    609c:	77 95       	ror	r23
    609e:	67 95       	ror	r22
    60a0:	b3 95       	inc	r27
    60a2:	d9 f7       	brne	.-10     	; 0x609a <__fixunssfsi+0x3c>
    60a4:	3e f4       	brtc	.+14     	; 0x60b4 <__fixunssfsi+0x56>
    60a6:	90 95       	com	r25
    60a8:	80 95       	com	r24
    60aa:	70 95       	com	r23
    60ac:	61 95       	neg	r22
    60ae:	7f 4f       	sbci	r23, 0xFF	; 255
    60b0:	8f 4f       	sbci	r24, 0xFF	; 255
    60b2:	9f 4f       	sbci	r25, 0xFF	; 255
    60b4:	08 95       	ret

000060b6 <__floatunsisf>:
    60b6:	e8 94       	clt
    60b8:	09 c0       	rjmp	.+18     	; 0x60cc <__floatsisf+0x12>

000060ba <__floatsisf>:
    60ba:	97 fb       	bst	r25, 7
    60bc:	3e f4       	brtc	.+14     	; 0x60cc <__floatsisf+0x12>
    60be:	90 95       	com	r25
    60c0:	80 95       	com	r24
    60c2:	70 95       	com	r23
    60c4:	61 95       	neg	r22
    60c6:	7f 4f       	sbci	r23, 0xFF	; 255
    60c8:	8f 4f       	sbci	r24, 0xFF	; 255
    60ca:	9f 4f       	sbci	r25, 0xFF	; 255
    60cc:	99 23       	and	r25, r25
    60ce:	a9 f0       	breq	.+42     	; 0x60fa <__floatsisf+0x40>
    60d0:	f9 2f       	mov	r31, r25
    60d2:	96 e9       	ldi	r25, 0x96	; 150
    60d4:	bb 27       	eor	r27, r27
    60d6:	93 95       	inc	r25
    60d8:	f6 95       	lsr	r31
    60da:	87 95       	ror	r24
    60dc:	77 95       	ror	r23
    60de:	67 95       	ror	r22
    60e0:	b7 95       	ror	r27
    60e2:	f1 11       	cpse	r31, r1
    60e4:	f8 cf       	rjmp	.-16     	; 0x60d6 <__floatsisf+0x1c>
    60e6:	fa f4       	brpl	.+62     	; 0x6126 <__floatsisf+0x6c>
    60e8:	bb 0f       	add	r27, r27
    60ea:	11 f4       	brne	.+4      	; 0x60f0 <__floatsisf+0x36>
    60ec:	60 ff       	sbrs	r22, 0
    60ee:	1b c0       	rjmp	.+54     	; 0x6126 <__floatsisf+0x6c>
    60f0:	6f 5f       	subi	r22, 0xFF	; 255
    60f2:	7f 4f       	sbci	r23, 0xFF	; 255
    60f4:	8f 4f       	sbci	r24, 0xFF	; 255
    60f6:	9f 4f       	sbci	r25, 0xFF	; 255
    60f8:	16 c0       	rjmp	.+44     	; 0x6126 <__floatsisf+0x6c>
    60fa:	88 23       	and	r24, r24
    60fc:	11 f0       	breq	.+4      	; 0x6102 <__floatsisf+0x48>
    60fe:	96 e9       	ldi	r25, 0x96	; 150
    6100:	11 c0       	rjmp	.+34     	; 0x6124 <__floatsisf+0x6a>
    6102:	77 23       	and	r23, r23
    6104:	21 f0       	breq	.+8      	; 0x610e <__floatsisf+0x54>
    6106:	9e e8       	ldi	r25, 0x8E	; 142
    6108:	87 2f       	mov	r24, r23
    610a:	76 2f       	mov	r23, r22
    610c:	05 c0       	rjmp	.+10     	; 0x6118 <__floatsisf+0x5e>
    610e:	66 23       	and	r22, r22
    6110:	71 f0       	breq	.+28     	; 0x612e <__floatsisf+0x74>
    6112:	96 e8       	ldi	r25, 0x86	; 134
    6114:	86 2f       	mov	r24, r22
    6116:	70 e0       	ldi	r23, 0x00	; 0
    6118:	60 e0       	ldi	r22, 0x00	; 0
    611a:	2a f0       	brmi	.+10     	; 0x6126 <__floatsisf+0x6c>
    611c:	9a 95       	dec	r25
    611e:	66 0f       	add	r22, r22
    6120:	77 1f       	adc	r23, r23
    6122:	88 1f       	adc	r24, r24
    6124:	da f7       	brpl	.-10     	; 0x611c <__floatsisf+0x62>
    6126:	88 0f       	add	r24, r24
    6128:	96 95       	lsr	r25
    612a:	87 95       	ror	r24
    612c:	97 f9       	bld	r25, 7
    612e:	08 95       	ret

00006130 <__fp_cmp>:
    6130:	99 0f       	add	r25, r25
    6132:	00 08       	sbc	r0, r0
    6134:	55 0f       	add	r21, r21
    6136:	aa 0b       	sbc	r26, r26
    6138:	e0 e8       	ldi	r30, 0x80	; 128
    613a:	fe ef       	ldi	r31, 0xFE	; 254
    613c:	16 16       	cp	r1, r22
    613e:	17 06       	cpc	r1, r23
    6140:	e8 07       	cpc	r30, r24
    6142:	f9 07       	cpc	r31, r25
    6144:	c0 f0       	brcs	.+48     	; 0x6176 <__fp_cmp+0x46>
    6146:	12 16       	cp	r1, r18
    6148:	13 06       	cpc	r1, r19
    614a:	e4 07       	cpc	r30, r20
    614c:	f5 07       	cpc	r31, r21
    614e:	98 f0       	brcs	.+38     	; 0x6176 <__fp_cmp+0x46>
    6150:	62 1b       	sub	r22, r18
    6152:	73 0b       	sbc	r23, r19
    6154:	84 0b       	sbc	r24, r20
    6156:	95 0b       	sbc	r25, r21
    6158:	39 f4       	brne	.+14     	; 0x6168 <__fp_cmp+0x38>
    615a:	0a 26       	eor	r0, r26
    615c:	61 f0       	breq	.+24     	; 0x6176 <__fp_cmp+0x46>
    615e:	23 2b       	or	r18, r19
    6160:	24 2b       	or	r18, r20
    6162:	25 2b       	or	r18, r21
    6164:	21 f4       	brne	.+8      	; 0x616e <__fp_cmp+0x3e>
    6166:	08 95       	ret
    6168:	0a 26       	eor	r0, r26
    616a:	09 f4       	brne	.+2      	; 0x616e <__fp_cmp+0x3e>
    616c:	a1 40       	sbci	r26, 0x01	; 1
    616e:	a6 95       	lsr	r26
    6170:	8f ef       	ldi	r24, 0xFF	; 255
    6172:	81 1d       	adc	r24, r1
    6174:	81 1d       	adc	r24, r1
    6176:	08 95       	ret

00006178 <__fp_inf>:
    6178:	97 f9       	bld	r25, 7
    617a:	9f 67       	ori	r25, 0x7F	; 127
    617c:	80 e8       	ldi	r24, 0x80	; 128
    617e:	70 e0       	ldi	r23, 0x00	; 0
    6180:	60 e0       	ldi	r22, 0x00	; 0
    6182:	08 95       	ret

00006184 <__fp_nan>:
    6184:	9f ef       	ldi	r25, 0xFF	; 255
    6186:	80 ec       	ldi	r24, 0xC0	; 192
    6188:	08 95       	ret

0000618a <__fp_pscA>:
    618a:	00 24       	eor	r0, r0
    618c:	0a 94       	dec	r0
    618e:	16 16       	cp	r1, r22
    6190:	17 06       	cpc	r1, r23
    6192:	18 06       	cpc	r1, r24
    6194:	09 06       	cpc	r0, r25
    6196:	08 95       	ret

00006198 <__fp_pscB>:
    6198:	00 24       	eor	r0, r0
    619a:	0a 94       	dec	r0
    619c:	12 16       	cp	r1, r18
    619e:	13 06       	cpc	r1, r19
    61a0:	14 06       	cpc	r1, r20
    61a2:	05 06       	cpc	r0, r21
    61a4:	08 95       	ret

000061a6 <__fp_round>:
    61a6:	09 2e       	mov	r0, r25
    61a8:	03 94       	inc	r0
    61aa:	00 0c       	add	r0, r0
    61ac:	11 f4       	brne	.+4      	; 0x61b2 <__fp_round+0xc>
    61ae:	88 23       	and	r24, r24
    61b0:	52 f0       	brmi	.+20     	; 0x61c6 <__fp_round+0x20>
    61b2:	bb 0f       	add	r27, r27
    61b4:	40 f4       	brcc	.+16     	; 0x61c6 <__fp_round+0x20>
    61b6:	bf 2b       	or	r27, r31
    61b8:	11 f4       	brne	.+4      	; 0x61be <__fp_round+0x18>
    61ba:	60 ff       	sbrs	r22, 0
    61bc:	04 c0       	rjmp	.+8      	; 0x61c6 <__fp_round+0x20>
    61be:	6f 5f       	subi	r22, 0xFF	; 255
    61c0:	7f 4f       	sbci	r23, 0xFF	; 255
    61c2:	8f 4f       	sbci	r24, 0xFF	; 255
    61c4:	9f 4f       	sbci	r25, 0xFF	; 255
    61c6:	08 95       	ret

000061c8 <__fp_split3>:
    61c8:	57 fd       	sbrc	r21, 7
    61ca:	90 58       	subi	r25, 0x80	; 128
    61cc:	44 0f       	add	r20, r20
    61ce:	55 1f       	adc	r21, r21
    61d0:	59 f0       	breq	.+22     	; 0x61e8 <__fp_splitA+0x10>
    61d2:	5f 3f       	cpi	r21, 0xFF	; 255
    61d4:	71 f0       	breq	.+28     	; 0x61f2 <__fp_splitA+0x1a>
    61d6:	47 95       	ror	r20

000061d8 <__fp_splitA>:
    61d8:	88 0f       	add	r24, r24
    61da:	97 fb       	bst	r25, 7
    61dc:	99 1f       	adc	r25, r25
    61de:	61 f0       	breq	.+24     	; 0x61f8 <__fp_splitA+0x20>
    61e0:	9f 3f       	cpi	r25, 0xFF	; 255
    61e2:	79 f0       	breq	.+30     	; 0x6202 <__fp_splitA+0x2a>
    61e4:	87 95       	ror	r24
    61e6:	08 95       	ret
    61e8:	12 16       	cp	r1, r18
    61ea:	13 06       	cpc	r1, r19
    61ec:	14 06       	cpc	r1, r20
    61ee:	55 1f       	adc	r21, r21
    61f0:	f2 cf       	rjmp	.-28     	; 0x61d6 <__fp_split3+0xe>
    61f2:	46 95       	lsr	r20
    61f4:	f1 df       	rcall	.-30     	; 0x61d8 <__fp_splitA>
    61f6:	08 c0       	rjmp	.+16     	; 0x6208 <__fp_splitA+0x30>
    61f8:	16 16       	cp	r1, r22
    61fa:	17 06       	cpc	r1, r23
    61fc:	18 06       	cpc	r1, r24
    61fe:	99 1f       	adc	r25, r25
    6200:	f1 cf       	rjmp	.-30     	; 0x61e4 <__fp_splitA+0xc>
    6202:	86 95       	lsr	r24
    6204:	71 05       	cpc	r23, r1
    6206:	61 05       	cpc	r22, r1
    6208:	08 94       	sec
    620a:	08 95       	ret

0000620c <__fp_zero>:
    620c:	e8 94       	clt

0000620e <__fp_szero>:
    620e:	bb 27       	eor	r27, r27
    6210:	66 27       	eor	r22, r22
    6212:	77 27       	eor	r23, r23
    6214:	cb 01       	movw	r24, r22
    6216:	97 f9       	bld	r25, 7
    6218:	08 95       	ret

0000621a <__gesf2>:
    621a:	8a df       	rcall	.-236    	; 0x6130 <__fp_cmp>
    621c:	08 f4       	brcc	.+2      	; 0x6220 <__gesf2+0x6>
    621e:	8f ef       	ldi	r24, 0xFF	; 255
    6220:	08 95       	ret

00006222 <lrint>:
    6222:	da df       	rcall	.-76     	; 0x61d8 <__fp_splitA>
    6224:	a8 f1       	brcs	.+106    	; 0x6290 <lrint+0x6e>
    6226:	9e 57       	subi	r25, 0x7E	; 126
    6228:	a8 f1       	brcs	.+106    	; 0x6294 <lrint+0x72>
    622a:	98 51       	subi	r25, 0x18	; 24
    622c:	60 f0       	brcs	.+24     	; 0x6246 <lrint+0x24>
    622e:	39 f1       	breq	.+78     	; 0x627e <lrint+0x5c>
    6230:	98 30       	cpi	r25, 0x08	; 8
    6232:	70 f5       	brcc	.+92     	; 0x6290 <lrint+0x6e>
    6234:	09 2e       	mov	r0, r25
    6236:	99 27       	eor	r25, r25
    6238:	66 0f       	add	r22, r22
    623a:	77 1f       	adc	r23, r23
    623c:	88 1f       	adc	r24, r24
    623e:	99 1f       	adc	r25, r25
    6240:	0a 94       	dec	r0
    6242:	d1 f7       	brne	.-12     	; 0x6238 <lrint+0x16>
    6244:	1c c0       	rjmp	.+56     	; 0x627e <lrint+0x5c>
    6246:	bb 27       	eor	r27, r27
    6248:	99 3f       	cpi	r25, 0xF9	; 249
    624a:	4c f4       	brge	.+18     	; 0x625e <lrint+0x3c>
    624c:	b1 11       	cpse	r27, r1
    624e:	b1 e0       	ldi	r27, 0x01	; 1
    6250:	b6 2b       	or	r27, r22
    6252:	67 2f       	mov	r22, r23
    6254:	78 2f       	mov	r23, r24
    6256:	88 27       	eor	r24, r24
    6258:	98 5f       	subi	r25, 0xF8	; 248
    625a:	b1 f7       	brne	.-20     	; 0x6248 <lrint+0x26>
    625c:	08 c0       	rjmp	.+16     	; 0x626e <lrint+0x4c>
    625e:	86 95       	lsr	r24
    6260:	77 95       	ror	r23
    6262:	67 95       	ror	r22
    6264:	b7 95       	ror	r27
    6266:	08 f4       	brcc	.+2      	; 0x626a <lrint+0x48>
    6268:	b1 60       	ori	r27, 0x01	; 1
    626a:	93 95       	inc	r25
    626c:	c1 f7       	brne	.-16     	; 0x625e <lrint+0x3c>
    626e:	bb 0f       	add	r27, r27
    6270:	30 f4       	brcc	.+12     	; 0x627e <lrint+0x5c>
    6272:	11 f4       	brne	.+4      	; 0x6278 <lrint+0x56>
    6274:	60 ff       	sbrs	r22, 0
    6276:	03 c0       	rjmp	.+6      	; 0x627e <lrint+0x5c>
    6278:	6f 5f       	subi	r22, 0xFF	; 255
    627a:	7f 4f       	sbci	r23, 0xFF	; 255
    627c:	8f 4f       	sbci	r24, 0xFF	; 255
    627e:	3e f4       	brtc	.+14     	; 0x628e <lrint+0x6c>
    6280:	90 95       	com	r25
    6282:	80 95       	com	r24
    6284:	70 95       	com	r23
    6286:	61 95       	neg	r22
    6288:	7f 4f       	sbci	r23, 0xFF	; 255
    628a:	8f 4f       	sbci	r24, 0xFF	; 255
    628c:	9f 4f       	sbci	r25, 0xFF	; 255
    628e:	08 95       	ret
    6290:	68 94       	set
    6292:	bd cf       	rjmp	.-134    	; 0x620e <__fp_szero>
    6294:	bb cf       	rjmp	.-138    	; 0x620c <__fp_zero>

00006296 <__mulsf3>:
    6296:	0b d0       	rcall	.+22     	; 0x62ae <__mulsf3x>
    6298:	86 cf       	rjmp	.-244    	; 0x61a6 <__fp_round>
    629a:	77 df       	rcall	.-274    	; 0x618a <__fp_pscA>
    629c:	28 f0       	brcs	.+10     	; 0x62a8 <__mulsf3+0x12>
    629e:	7c df       	rcall	.-264    	; 0x6198 <__fp_pscB>
    62a0:	18 f0       	brcs	.+6      	; 0x62a8 <__mulsf3+0x12>
    62a2:	95 23       	and	r25, r21
    62a4:	09 f0       	breq	.+2      	; 0x62a8 <__mulsf3+0x12>
    62a6:	68 cf       	rjmp	.-304    	; 0x6178 <__fp_inf>
    62a8:	6d cf       	rjmp	.-294    	; 0x6184 <__fp_nan>
    62aa:	11 24       	eor	r1, r1
    62ac:	b0 cf       	rjmp	.-160    	; 0x620e <__fp_szero>

000062ae <__mulsf3x>:
    62ae:	8c df       	rcall	.-232    	; 0x61c8 <__fp_split3>
    62b0:	a0 f3       	brcs	.-24     	; 0x629a <__mulsf3+0x4>

000062b2 <__mulsf3_pse>:
    62b2:	95 9f       	mul	r25, r21
    62b4:	d1 f3       	breq	.-12     	; 0x62aa <__mulsf3+0x14>
    62b6:	95 0f       	add	r25, r21
    62b8:	50 e0       	ldi	r21, 0x00	; 0
    62ba:	55 1f       	adc	r21, r21
    62bc:	62 9f       	mul	r22, r18
    62be:	f0 01       	movw	r30, r0
    62c0:	72 9f       	mul	r23, r18
    62c2:	bb 27       	eor	r27, r27
    62c4:	f0 0d       	add	r31, r0
    62c6:	b1 1d       	adc	r27, r1
    62c8:	63 9f       	mul	r22, r19
    62ca:	aa 27       	eor	r26, r26
    62cc:	f0 0d       	add	r31, r0
    62ce:	b1 1d       	adc	r27, r1
    62d0:	aa 1f       	adc	r26, r26
    62d2:	64 9f       	mul	r22, r20
    62d4:	66 27       	eor	r22, r22
    62d6:	b0 0d       	add	r27, r0
    62d8:	a1 1d       	adc	r26, r1
    62da:	66 1f       	adc	r22, r22
    62dc:	82 9f       	mul	r24, r18
    62de:	22 27       	eor	r18, r18
    62e0:	b0 0d       	add	r27, r0
    62e2:	a1 1d       	adc	r26, r1
    62e4:	62 1f       	adc	r22, r18
    62e6:	73 9f       	mul	r23, r19
    62e8:	b0 0d       	add	r27, r0
    62ea:	a1 1d       	adc	r26, r1
    62ec:	62 1f       	adc	r22, r18
    62ee:	83 9f       	mul	r24, r19
    62f0:	a0 0d       	add	r26, r0
    62f2:	61 1d       	adc	r22, r1
    62f4:	22 1f       	adc	r18, r18
    62f6:	74 9f       	mul	r23, r20
    62f8:	33 27       	eor	r19, r19
    62fa:	a0 0d       	add	r26, r0
    62fc:	61 1d       	adc	r22, r1
    62fe:	23 1f       	adc	r18, r19
    6300:	84 9f       	mul	r24, r20
    6302:	60 0d       	add	r22, r0
    6304:	21 1d       	adc	r18, r1
    6306:	82 2f       	mov	r24, r18
    6308:	76 2f       	mov	r23, r22
    630a:	6a 2f       	mov	r22, r26
    630c:	11 24       	eor	r1, r1
    630e:	9f 57       	subi	r25, 0x7F	; 127
    6310:	50 40       	sbci	r21, 0x00	; 0
    6312:	8a f0       	brmi	.+34     	; 0x6336 <__mulsf3_pse+0x84>
    6314:	e1 f0       	breq	.+56     	; 0x634e <__mulsf3_pse+0x9c>
    6316:	88 23       	and	r24, r24
    6318:	4a f0       	brmi	.+18     	; 0x632c <__mulsf3_pse+0x7a>
    631a:	ee 0f       	add	r30, r30
    631c:	ff 1f       	adc	r31, r31
    631e:	bb 1f       	adc	r27, r27
    6320:	66 1f       	adc	r22, r22
    6322:	77 1f       	adc	r23, r23
    6324:	88 1f       	adc	r24, r24
    6326:	91 50       	subi	r25, 0x01	; 1
    6328:	50 40       	sbci	r21, 0x00	; 0
    632a:	a9 f7       	brne	.-22     	; 0x6316 <__mulsf3_pse+0x64>
    632c:	9e 3f       	cpi	r25, 0xFE	; 254
    632e:	51 05       	cpc	r21, r1
    6330:	70 f0       	brcs	.+28     	; 0x634e <__mulsf3_pse+0x9c>
    6332:	22 cf       	rjmp	.-444    	; 0x6178 <__fp_inf>
    6334:	6c cf       	rjmp	.-296    	; 0x620e <__fp_szero>
    6336:	5f 3f       	cpi	r21, 0xFF	; 255
    6338:	ec f3       	brlt	.-6      	; 0x6334 <__mulsf3_pse+0x82>
    633a:	98 3e       	cpi	r25, 0xE8	; 232
    633c:	dc f3       	brlt	.-10     	; 0x6334 <__mulsf3_pse+0x82>
    633e:	86 95       	lsr	r24
    6340:	77 95       	ror	r23
    6342:	67 95       	ror	r22
    6344:	b7 95       	ror	r27
    6346:	f7 95       	ror	r31
    6348:	e7 95       	ror	r30
    634a:	9f 5f       	subi	r25, 0xFF	; 255
    634c:	c1 f7       	brne	.-16     	; 0x633e <__mulsf3_pse+0x8c>
    634e:	fe 2b       	or	r31, r30
    6350:	88 0f       	add	r24, r24
    6352:	91 1d       	adc	r25, r1
    6354:	96 95       	lsr	r25
    6356:	87 95       	ror	r24
    6358:	97 f9       	bld	r25, 7
    635a:	08 95       	ret

0000635c <pow>:
    635c:	fa 01       	movw	r30, r20
    635e:	ee 0f       	add	r30, r30
    6360:	ff 1f       	adc	r31, r31
    6362:	30 96       	adiw	r30, 0x00	; 0
    6364:	21 05       	cpc	r18, r1
    6366:	31 05       	cpc	r19, r1
    6368:	99 f1       	breq	.+102    	; 0x63d0 <pow+0x74>
    636a:	61 15       	cp	r22, r1
    636c:	71 05       	cpc	r23, r1
    636e:	61 f4       	brne	.+24     	; 0x6388 <pow+0x2c>
    6370:	80 38       	cpi	r24, 0x80	; 128
    6372:	bf e3       	ldi	r27, 0x3F	; 63
    6374:	9b 07       	cpc	r25, r27
    6376:	49 f1       	breq	.+82     	; 0x63ca <pow+0x6e>
    6378:	68 94       	set
    637a:	90 38       	cpi	r25, 0x80	; 128
    637c:	81 05       	cpc	r24, r1
    637e:	61 f0       	breq	.+24     	; 0x6398 <pow+0x3c>
    6380:	80 38       	cpi	r24, 0x80	; 128
    6382:	bf ef       	ldi	r27, 0xFF	; 255
    6384:	9b 07       	cpc	r25, r27
    6386:	41 f0       	breq	.+16     	; 0x6398 <pow+0x3c>
    6388:	99 23       	and	r25, r25
    638a:	42 f5       	brpl	.+80     	; 0x63dc <pow+0x80>
    638c:	ff 3f       	cpi	r31, 0xFF	; 255
    638e:	e1 05       	cpc	r30, r1
    6390:	31 05       	cpc	r19, r1
    6392:	21 05       	cpc	r18, r1
    6394:	11 f1       	breq	.+68     	; 0x63da <pow+0x7e>
    6396:	e8 94       	clt
    6398:	08 94       	sec
    639a:	e7 95       	ror	r30
    639c:	d9 01       	movw	r26, r18
    639e:	aa 23       	and	r26, r26
    63a0:	29 f4       	brne	.+10     	; 0x63ac <pow+0x50>
    63a2:	ab 2f       	mov	r26, r27
    63a4:	be 2f       	mov	r27, r30
    63a6:	f8 5f       	subi	r31, 0xF8	; 248
    63a8:	d0 f3       	brcs	.-12     	; 0x639e <pow+0x42>
    63aa:	10 c0       	rjmp	.+32     	; 0x63cc <pow+0x70>
    63ac:	ff 5f       	subi	r31, 0xFF	; 255
    63ae:	70 f4       	brcc	.+28     	; 0x63cc <pow+0x70>
    63b0:	a6 95       	lsr	r26
    63b2:	e0 f7       	brcc	.-8      	; 0x63ac <pow+0x50>
    63b4:	f7 39       	cpi	r31, 0x97	; 151
    63b6:	50 f0       	brcs	.+20     	; 0x63cc <pow+0x70>
    63b8:	19 f0       	breq	.+6      	; 0x63c0 <pow+0x64>
    63ba:	ff 3a       	cpi	r31, 0xAF	; 175
    63bc:	38 f4       	brcc	.+14     	; 0x63cc <pow+0x70>
    63be:	9f 77       	andi	r25, 0x7F	; 127
    63c0:	9f 93       	push	r25
    63c2:	0c d0       	rcall	.+24     	; 0x63dc <pow+0x80>
    63c4:	0f 90       	pop	r0
    63c6:	07 fc       	sbrc	r0, 7
    63c8:	90 58       	subi	r25, 0x80	; 128
    63ca:	08 95       	ret
    63cc:	3e f0       	brts	.+14     	; 0x63dc <pow+0x80>
    63ce:	da ce       	rjmp	.-588    	; 0x6184 <__fp_nan>
    63d0:	60 e0       	ldi	r22, 0x00	; 0
    63d2:	70 e0       	ldi	r23, 0x00	; 0
    63d4:	80 e8       	ldi	r24, 0x80	; 128
    63d6:	9f e3       	ldi	r25, 0x3F	; 63
    63d8:	08 95       	ret
    63da:	4f e7       	ldi	r20, 0x7F	; 127
    63dc:	9f 77       	andi	r25, 0x7F	; 127
    63de:	5f 93       	push	r21
    63e0:	4f 93       	push	r20
    63e2:	3f 93       	push	r19
    63e4:	2f 93       	push	r18
    63e6:	9e d0       	rcall	.+316    	; 0x6524 <log>
    63e8:	2f 91       	pop	r18
    63ea:	3f 91       	pop	r19
    63ec:	4f 91       	pop	r20
    63ee:	5f 91       	pop	r21
    63f0:	52 df       	rcall	.-348    	; 0x6296 <__mulsf3>
    63f2:	05 c0       	rjmp	.+10     	; 0x63fe <exp>
    63f4:	19 f4       	brne	.+6      	; 0x63fc <pow+0xa0>
    63f6:	0e f0       	brts	.+2      	; 0x63fa <pow+0x9e>
    63f8:	bf ce       	rjmp	.-642    	; 0x6178 <__fp_inf>
    63fa:	08 cf       	rjmp	.-496    	; 0x620c <__fp_zero>
    63fc:	c3 ce       	rjmp	.-634    	; 0x6184 <__fp_nan>

000063fe <exp>:
    63fe:	ec de       	rcall	.-552    	; 0x61d8 <__fp_splitA>
    6400:	c8 f3       	brcs	.-14     	; 0x63f4 <pow+0x98>
    6402:	96 38       	cpi	r25, 0x86	; 134
    6404:	c0 f7       	brcc	.-16     	; 0x63f6 <pow+0x9a>
    6406:	07 f8       	bld	r0, 7
    6408:	0f 92       	push	r0
    640a:	e8 94       	clt
    640c:	2b e3       	ldi	r18, 0x3B	; 59
    640e:	3a ea       	ldi	r19, 0xAA	; 170
    6410:	48 eb       	ldi	r20, 0xB8	; 184
    6412:	5f e7       	ldi	r21, 0x7F	; 127
    6414:	4e df       	rcall	.-356    	; 0x62b2 <__mulsf3_pse>
    6416:	0f 92       	push	r0
    6418:	0f 92       	push	r0
    641a:	0f 92       	push	r0
    641c:	4d b7       	in	r20, 0x3d	; 61
    641e:	5e b7       	in	r21, 0x3e	; 62
    6420:	0f 92       	push	r0
    6422:	c0 d0       	rcall	.+384    	; 0x65a4 <modf>
    6424:	e8 ec       	ldi	r30, 0xC8	; 200
    6426:	f0 e0       	ldi	r31, 0x00	; 0
    6428:	16 d0       	rcall	.+44     	; 0x6456 <__fp_powser>
    642a:	4f 91       	pop	r20
    642c:	5f 91       	pop	r21
    642e:	ef 91       	pop	r30
    6430:	ff 91       	pop	r31
    6432:	e5 95       	asr	r30
    6434:	ee 1f       	adc	r30, r30
    6436:	ff 1f       	adc	r31, r31
    6438:	49 f0       	breq	.+18     	; 0x644c <exp+0x4e>
    643a:	fe 57       	subi	r31, 0x7E	; 126
    643c:	e0 68       	ori	r30, 0x80	; 128
    643e:	44 27       	eor	r20, r20
    6440:	ee 0f       	add	r30, r30
    6442:	44 1f       	adc	r20, r20
    6444:	fa 95       	dec	r31
    6446:	e1 f7       	brne	.-8      	; 0x6440 <exp+0x42>
    6448:	41 95       	neg	r20
    644a:	55 0b       	sbc	r21, r21
    644c:	32 d0       	rcall	.+100    	; 0x64b2 <ldexp>
    644e:	0f 90       	pop	r0
    6450:	07 fe       	sbrs	r0, 7
    6452:	26 c0       	rjmp	.+76     	; 0x64a0 <inverse>
    6454:	08 95       	ret

00006456 <__fp_powser>:
    6456:	df 93       	push	r29
    6458:	cf 93       	push	r28
    645a:	1f 93       	push	r17
    645c:	0f 93       	push	r16
    645e:	ff 92       	push	r15
    6460:	ef 92       	push	r14
    6462:	df 92       	push	r13
    6464:	7b 01       	movw	r14, r22
    6466:	8c 01       	movw	r16, r24
    6468:	68 94       	set
    646a:	05 c0       	rjmp	.+10     	; 0x6476 <__fp_powser+0x20>
    646c:	da 2e       	mov	r13, r26
    646e:	ef 01       	movw	r28, r30
    6470:	1e df       	rcall	.-452    	; 0x62ae <__mulsf3x>
    6472:	fe 01       	movw	r30, r28
    6474:	e8 94       	clt
    6476:	a5 91       	lpm	r26, Z+
    6478:	25 91       	lpm	r18, Z+
    647a:	35 91       	lpm	r19, Z+
    647c:	45 91       	lpm	r20, Z+
    647e:	55 91       	lpm	r21, Z+
    6480:	ae f3       	brts	.-22     	; 0x646c <__fp_powser+0x16>
    6482:	ef 01       	movw	r28, r30
    6484:	28 dd       	rcall	.-1456   	; 0x5ed6 <__addsf3x>
    6486:	fe 01       	movw	r30, r28
    6488:	97 01       	movw	r18, r14
    648a:	a8 01       	movw	r20, r16
    648c:	da 94       	dec	r13
    648e:	79 f7       	brne	.-34     	; 0x646e <__fp_powser+0x18>
    6490:	df 90       	pop	r13
    6492:	ef 90       	pop	r14
    6494:	ff 90       	pop	r15
    6496:	0f 91       	pop	r16
    6498:	1f 91       	pop	r17
    649a:	cf 91       	pop	r28
    649c:	df 91       	pop	r29
    649e:	08 95       	ret

000064a0 <inverse>:
    64a0:	9b 01       	movw	r18, r22
    64a2:	ac 01       	movw	r20, r24
    64a4:	60 e0       	ldi	r22, 0x00	; 0
    64a6:	70 e0       	ldi	r23, 0x00	; 0
    64a8:	80 e8       	ldi	r24, 0x80	; 128
    64aa:	9f e3       	ldi	r25, 0x3F	; 63
    64ac:	6b cd       	rjmp	.-1322   	; 0x5f84 <__divsf3>
    64ae:	64 ce       	rjmp	.-824    	; 0x6178 <__fp_inf>
    64b0:	ac c0       	rjmp	.+344    	; 0x660a <__fp_mpack>

000064b2 <ldexp>:
    64b2:	92 de       	rcall	.-732    	; 0x61d8 <__fp_splitA>
    64b4:	e8 f3       	brcs	.-6      	; 0x64b0 <inverse+0x10>
    64b6:	99 23       	and	r25, r25
    64b8:	d9 f3       	breq	.-10     	; 0x64b0 <inverse+0x10>
    64ba:	94 0f       	add	r25, r20
    64bc:	51 1d       	adc	r21, r1
    64be:	bb f3       	brvs	.-18     	; 0x64ae <inverse+0xe>
    64c0:	91 50       	subi	r25, 0x01	; 1
    64c2:	50 40       	sbci	r21, 0x00	; 0
    64c4:	94 f0       	brlt	.+36     	; 0x64ea <ldexp+0x38>
    64c6:	59 f0       	breq	.+22     	; 0x64de <ldexp+0x2c>
    64c8:	88 23       	and	r24, r24
    64ca:	32 f0       	brmi	.+12     	; 0x64d8 <ldexp+0x26>
    64cc:	66 0f       	add	r22, r22
    64ce:	77 1f       	adc	r23, r23
    64d0:	88 1f       	adc	r24, r24
    64d2:	91 50       	subi	r25, 0x01	; 1
    64d4:	50 40       	sbci	r21, 0x00	; 0
    64d6:	c1 f7       	brne	.-16     	; 0x64c8 <ldexp+0x16>
    64d8:	9e 3f       	cpi	r25, 0xFE	; 254
    64da:	51 05       	cpc	r21, r1
    64dc:	44 f7       	brge	.-48     	; 0x64ae <inverse+0xe>
    64de:	88 0f       	add	r24, r24
    64e0:	91 1d       	adc	r25, r1
    64e2:	96 95       	lsr	r25
    64e4:	87 95       	ror	r24
    64e6:	97 f9       	bld	r25, 7
    64e8:	08 95       	ret
    64ea:	5f 3f       	cpi	r21, 0xFF	; 255
    64ec:	ac f0       	brlt	.+42     	; 0x6518 <ldexp+0x66>
    64ee:	98 3e       	cpi	r25, 0xE8	; 232
    64f0:	9c f0       	brlt	.+38     	; 0x6518 <ldexp+0x66>
    64f2:	bb 27       	eor	r27, r27
    64f4:	86 95       	lsr	r24
    64f6:	77 95       	ror	r23
    64f8:	67 95       	ror	r22
    64fa:	b7 95       	ror	r27
    64fc:	08 f4       	brcc	.+2      	; 0x6500 <ldexp+0x4e>
    64fe:	b1 60       	ori	r27, 0x01	; 1
    6500:	93 95       	inc	r25
    6502:	c1 f7       	brne	.-16     	; 0x64f4 <ldexp+0x42>
    6504:	bb 0f       	add	r27, r27
    6506:	58 f7       	brcc	.-42     	; 0x64de <ldexp+0x2c>
    6508:	11 f4       	brne	.+4      	; 0x650e <ldexp+0x5c>
    650a:	60 ff       	sbrs	r22, 0
    650c:	e8 cf       	rjmp	.-48     	; 0x64de <ldexp+0x2c>
    650e:	6f 5f       	subi	r22, 0xFF	; 255
    6510:	7f 4f       	sbci	r23, 0xFF	; 255
    6512:	8f 4f       	sbci	r24, 0xFF	; 255
    6514:	9f 4f       	sbci	r25, 0xFF	; 255
    6516:	e3 cf       	rjmp	.-58     	; 0x64de <ldexp+0x2c>
    6518:	7a ce       	rjmp	.-780    	; 0x620e <__fp_szero>
    651a:	0e f0       	brts	.+2      	; 0x651e <ldexp+0x6c>
    651c:	76 c0       	rjmp	.+236    	; 0x660a <__fp_mpack>
    651e:	32 ce       	rjmp	.-924    	; 0x6184 <__fp_nan>
    6520:	68 94       	set
    6522:	2a ce       	rjmp	.-940    	; 0x6178 <__fp_inf>

00006524 <log>:
    6524:	59 de       	rcall	.-846    	; 0x61d8 <__fp_splitA>
    6526:	c8 f3       	brcs	.-14     	; 0x651a <ldexp+0x68>
    6528:	99 23       	and	r25, r25
    652a:	d1 f3       	breq	.-12     	; 0x6520 <ldexp+0x6e>
    652c:	c6 f3       	brts	.-16     	; 0x651e <ldexp+0x6c>
    652e:	df 93       	push	r29
    6530:	cf 93       	push	r28
    6532:	1f 93       	push	r17
    6534:	0f 93       	push	r16
    6536:	ff 92       	push	r15
    6538:	c9 2f       	mov	r28, r25
    653a:	dd 27       	eor	r29, r29
    653c:	88 23       	and	r24, r24
    653e:	2a f0       	brmi	.+10     	; 0x654a <log+0x26>
    6540:	21 97       	sbiw	r28, 0x01	; 1
    6542:	66 0f       	add	r22, r22
    6544:	77 1f       	adc	r23, r23
    6546:	88 1f       	adc	r24, r24
    6548:	da f7       	brpl	.-10     	; 0x6540 <log+0x1c>
    654a:	20 e0       	ldi	r18, 0x00	; 0
    654c:	30 e0       	ldi	r19, 0x00	; 0
    654e:	40 e8       	ldi	r20, 0x80	; 128
    6550:	5f eb       	ldi	r21, 0xBF	; 191
    6552:	9f e3       	ldi	r25, 0x3F	; 63
    6554:	88 39       	cpi	r24, 0x98	; 152
    6556:	20 f0       	brcs	.+8      	; 0x6560 <log+0x3c>
    6558:	80 3e       	cpi	r24, 0xE0	; 224
    655a:	30 f0       	brcs	.+12     	; 0x6568 <log+0x44>
    655c:	21 96       	adiw	r28, 0x01	; 1
    655e:	8f 77       	andi	r24, 0x7F	; 127
    6560:	a9 dc       	rcall	.-1710   	; 0x5eb4 <__addsf3>
    6562:	e0 ef       	ldi	r30, 0xF0	; 240
    6564:	f0 e0       	ldi	r31, 0x00	; 0
    6566:	03 c0       	rjmp	.+6      	; 0x656e <log+0x4a>
    6568:	a5 dc       	rcall	.-1718   	; 0x5eb4 <__addsf3>
    656a:	ed e1       	ldi	r30, 0x1D	; 29
    656c:	f1 e0       	ldi	r31, 0x01	; 1
    656e:	73 df       	rcall	.-282    	; 0x6456 <__fp_powser>
    6570:	8b 01       	movw	r16, r22
    6572:	be 01       	movw	r22, r28
    6574:	ec 01       	movw	r28, r24
    6576:	fb 2e       	mov	r15, r27
    6578:	6f 57       	subi	r22, 0x7F	; 127
    657a:	71 09       	sbc	r23, r1
    657c:	75 95       	asr	r23
    657e:	77 1f       	adc	r23, r23
    6580:	88 0b       	sbc	r24, r24
    6582:	99 0b       	sbc	r25, r25
    6584:	9a dd       	rcall	.-1228   	; 0x60ba <__floatsisf>
    6586:	28 e1       	ldi	r18, 0x18	; 24
    6588:	32 e7       	ldi	r19, 0x72	; 114
    658a:	41 e3       	ldi	r20, 0x31	; 49
    658c:	5f e3       	ldi	r21, 0x3F	; 63
    658e:	8f de       	rcall	.-738    	; 0x62ae <__mulsf3x>
    6590:	af 2d       	mov	r26, r15
    6592:	98 01       	movw	r18, r16
    6594:	ae 01       	movw	r20, r28
    6596:	ff 90       	pop	r15
    6598:	0f 91       	pop	r16
    659a:	1f 91       	pop	r17
    659c:	cf 91       	pop	r28
    659e:	df 91       	pop	r29
    65a0:	9a dc       	rcall	.-1740   	; 0x5ed6 <__addsf3x>
    65a2:	01 ce       	rjmp	.-1022   	; 0x61a6 <__fp_round>

000065a4 <modf>:
    65a4:	fa 01       	movw	r30, r20
    65a6:	dc 01       	movw	r26, r24
    65a8:	aa 0f       	add	r26, r26
    65aa:	bb 1f       	adc	r27, r27
    65ac:	9b 01       	movw	r18, r22
    65ae:	ac 01       	movw	r20, r24
    65b0:	bf 57       	subi	r27, 0x7F	; 127
    65b2:	28 f4       	brcc	.+10     	; 0x65be <modf+0x1a>
    65b4:	22 27       	eor	r18, r18
    65b6:	33 27       	eor	r19, r19
    65b8:	44 27       	eor	r20, r20
    65ba:	50 78       	andi	r21, 0x80	; 128
    65bc:	1f c0       	rjmp	.+62     	; 0x65fc <modf+0x58>
    65be:	b7 51       	subi	r27, 0x17	; 23
    65c0:	88 f4       	brcc	.+34     	; 0x65e4 <modf+0x40>
    65c2:	ab 2f       	mov	r26, r27
    65c4:	00 24       	eor	r0, r0
    65c6:	46 95       	lsr	r20
    65c8:	37 95       	ror	r19
    65ca:	27 95       	ror	r18
    65cc:	01 1c       	adc	r0, r1
    65ce:	a3 95       	inc	r26
    65d0:	d2 f3       	brmi	.-12     	; 0x65c6 <modf+0x22>
    65d2:	00 20       	and	r0, r0
    65d4:	69 f0       	breq	.+26     	; 0x65f0 <modf+0x4c>
    65d6:	22 0f       	add	r18, r18
    65d8:	33 1f       	adc	r19, r19
    65da:	44 1f       	adc	r20, r20
    65dc:	b3 95       	inc	r27
    65de:	da f3       	brmi	.-10     	; 0x65d6 <modf+0x32>
    65e0:	0d d0       	rcall	.+26     	; 0x65fc <modf+0x58>
    65e2:	67 cc       	rjmp	.-1842   	; 0x5eb2 <__subsf3>
    65e4:	61 30       	cpi	r22, 0x01	; 1
    65e6:	71 05       	cpc	r23, r1
    65e8:	a0 e8       	ldi	r26, 0x80	; 128
    65ea:	8a 07       	cpc	r24, r26
    65ec:	b9 46       	sbci	r27, 0x69	; 105
    65ee:	30 f4       	brcc	.+12     	; 0x65fc <modf+0x58>
    65f0:	9b 01       	movw	r18, r22
    65f2:	ac 01       	movw	r20, r24
    65f4:	66 27       	eor	r22, r22
    65f6:	77 27       	eor	r23, r23
    65f8:	88 27       	eor	r24, r24
    65fa:	90 78       	andi	r25, 0x80	; 128
    65fc:	30 96       	adiw	r30, 0x00	; 0
    65fe:	21 f0       	breq	.+8      	; 0x6608 <modf+0x64>
    6600:	20 83       	st	Z, r18
    6602:	31 83       	std	Z+1, r19	; 0x01
    6604:	42 83       	std	Z+2, r20	; 0x02
    6606:	53 83       	std	Z+3, r21	; 0x03
    6608:	08 95       	ret

0000660a <__fp_mpack>:
    660a:	9f 3f       	cpi	r25, 0xFF	; 255
    660c:	31 f0       	breq	.+12     	; 0x661a <__fp_mpack_finite+0xc>

0000660e <__fp_mpack_finite>:
    660e:	91 50       	subi	r25, 0x01	; 1
    6610:	20 f4       	brcc	.+8      	; 0x661a <__fp_mpack_finite+0xc>
    6612:	87 95       	ror	r24
    6614:	77 95       	ror	r23
    6616:	67 95       	ror	r22
    6618:	b7 95       	ror	r27
    661a:	88 0f       	add	r24, r24
    661c:	91 1d       	adc	r25, r1
    661e:	96 95       	lsr	r25
    6620:	87 95       	ror	r24
    6622:	97 f9       	bld	r25, 7
    6624:	08 95       	ret

00006626 <vfprintf>:
    6626:	a1 e1       	ldi	r26, 0x11	; 17
    6628:	b0 e0       	ldi	r27, 0x00	; 0
    662a:	e8 e1       	ldi	r30, 0x18	; 24
    662c:	f3 e3       	ldi	r31, 0x33	; 51
    662e:	b7 c3       	rjmp	.+1902   	; 0x6d9e <__prologue_saves__>
    6630:	3c 01       	movw	r6, r24
    6632:	7f 87       	std	Y+15, r23	; 0x0f
    6634:	6e 87       	std	Y+14, r22	; 0x0e
    6636:	6a 01       	movw	r12, r20
    6638:	fc 01       	movw	r30, r24
    663a:	17 82       	std	Z+7, r1	; 0x07
    663c:	16 82       	std	Z+6, r1	; 0x06
    663e:	83 81       	ldd	r24, Z+3	; 0x03
    6640:	81 fd       	sbrc	r24, 1
    6642:	03 c0       	rjmp	.+6      	; 0x664a <vfprintf+0x24>
    6644:	6f ef       	ldi	r22, 0xFF	; 255
    6646:	7f ef       	ldi	r23, 0xFF	; 255
    6648:	52 c3       	rjmp	.+1700   	; 0x6cee <vfprintf+0x6c8>
    664a:	9e 01       	movw	r18, r28
    664c:	2f 5f       	subi	r18, 0xFF	; 255
    664e:	3f 4f       	sbci	r19, 0xFF	; 255
    6650:	39 8b       	std	Y+17, r19	; 0x11
    6652:	28 8b       	std	Y+16, r18	; 0x10
    6654:	f3 01       	movw	r30, r6
    6656:	23 81       	ldd	r18, Z+3	; 0x03
    6658:	ee 85       	ldd	r30, Y+14	; 0x0e
    665a:	ff 85       	ldd	r31, Y+15	; 0x0f
    665c:	23 fd       	sbrc	r18, 3
    665e:	85 91       	lpm	r24, Z+
    6660:	23 ff       	sbrs	r18, 3
    6662:	81 91       	ld	r24, Z+
    6664:	ff 87       	std	Y+15, r31	; 0x0f
    6666:	ee 87       	std	Y+14, r30	; 0x0e
    6668:	88 23       	and	r24, r24
    666a:	09 f4       	brne	.+2      	; 0x666e <vfprintf+0x48>
    666c:	3d c3       	rjmp	.+1658   	; 0x6ce8 <vfprintf+0x6c2>
    666e:	85 32       	cpi	r24, 0x25	; 37
    6670:	51 f4       	brne	.+20     	; 0x6686 <vfprintf+0x60>
    6672:	ee 85       	ldd	r30, Y+14	; 0x0e
    6674:	ff 85       	ldd	r31, Y+15	; 0x0f
    6676:	23 fd       	sbrc	r18, 3
    6678:	85 91       	lpm	r24, Z+
    667a:	23 ff       	sbrs	r18, 3
    667c:	81 91       	ld	r24, Z+
    667e:	ff 87       	std	Y+15, r31	; 0x0f
    6680:	ee 87       	std	Y+14, r30	; 0x0e
    6682:	85 32       	cpi	r24, 0x25	; 37
    6684:	21 f4       	brne	.+8      	; 0x668e <vfprintf+0x68>
    6686:	90 e0       	ldi	r25, 0x00	; 0
    6688:	b3 01       	movw	r22, r6
    668a:	20 d6       	rcall	.+3136   	; 0x72cc <fputc>
    668c:	e3 cf       	rjmp	.-58     	; 0x6654 <vfprintf+0x2e>
    668e:	98 2f       	mov	r25, r24
    6690:	10 e0       	ldi	r17, 0x00	; 0
    6692:	88 24       	eor	r8, r8
    6694:	99 24       	eor	r9, r9
    6696:	10 32       	cpi	r17, 0x20	; 32
    6698:	b0 f4       	brcc	.+44     	; 0x66c6 <vfprintf+0xa0>
    669a:	9b 32       	cpi	r25, 0x2B	; 43
    669c:	69 f0       	breq	.+26     	; 0x66b8 <vfprintf+0x92>
    669e:	9c 32       	cpi	r25, 0x2C	; 44
    66a0:	28 f4       	brcc	.+10     	; 0x66ac <vfprintf+0x86>
    66a2:	90 32       	cpi	r25, 0x20	; 32
    66a4:	51 f0       	breq	.+20     	; 0x66ba <vfprintf+0x94>
    66a6:	93 32       	cpi	r25, 0x23	; 35
    66a8:	71 f4       	brne	.+28     	; 0x66c6 <vfprintf+0xa0>
    66aa:	0b c0       	rjmp	.+22     	; 0x66c2 <vfprintf+0x9c>
    66ac:	9d 32       	cpi	r25, 0x2D	; 45
    66ae:	39 f0       	breq	.+14     	; 0x66be <vfprintf+0x98>
    66b0:	90 33       	cpi	r25, 0x30	; 48
    66b2:	49 f4       	brne	.+18     	; 0x66c6 <vfprintf+0xa0>
    66b4:	11 60       	ori	r17, 0x01	; 1
    66b6:	28 c0       	rjmp	.+80     	; 0x6708 <vfprintf+0xe2>
    66b8:	12 60       	ori	r17, 0x02	; 2
    66ba:	14 60       	ori	r17, 0x04	; 4
    66bc:	25 c0       	rjmp	.+74     	; 0x6708 <vfprintf+0xe2>
    66be:	18 60       	ori	r17, 0x08	; 8
    66c0:	23 c0       	rjmp	.+70     	; 0x6708 <vfprintf+0xe2>
    66c2:	10 61       	ori	r17, 0x10	; 16
    66c4:	21 c0       	rjmp	.+66     	; 0x6708 <vfprintf+0xe2>
    66c6:	17 fd       	sbrc	r17, 7
    66c8:	2a c0       	rjmp	.+84     	; 0x671e <vfprintf+0xf8>
    66ca:	89 2f       	mov	r24, r25
    66cc:	80 53       	subi	r24, 0x30	; 48
    66ce:	8a 30       	cpi	r24, 0x0A	; 10
    66d0:	78 f4       	brcc	.+30     	; 0x66f0 <vfprintf+0xca>
    66d2:	16 ff       	sbrs	r17, 6
    66d4:	06 c0       	rjmp	.+12     	; 0x66e2 <vfprintf+0xbc>
    66d6:	fa e0       	ldi	r31, 0x0A	; 10
    66d8:	9f 9e       	mul	r9, r31
    66da:	90 2c       	mov	r9, r0
    66dc:	11 24       	eor	r1, r1
    66de:	98 0e       	add	r9, r24
    66e0:	13 c0       	rjmp	.+38     	; 0x6708 <vfprintf+0xe2>
    66e2:	3a e0       	ldi	r19, 0x0A	; 10
    66e4:	83 9e       	mul	r8, r19
    66e6:	80 2c       	mov	r8, r0
    66e8:	11 24       	eor	r1, r1
    66ea:	88 0e       	add	r8, r24
    66ec:	10 62       	ori	r17, 0x20	; 32
    66ee:	0c c0       	rjmp	.+24     	; 0x6708 <vfprintf+0xe2>
    66f0:	9e 32       	cpi	r25, 0x2E	; 46
    66f2:	21 f4       	brne	.+8      	; 0x66fc <vfprintf+0xd6>
    66f4:	16 fd       	sbrc	r17, 6
    66f6:	f8 c2       	rjmp	.+1520   	; 0x6ce8 <vfprintf+0x6c2>
    66f8:	10 64       	ori	r17, 0x40	; 64
    66fa:	06 c0       	rjmp	.+12     	; 0x6708 <vfprintf+0xe2>
    66fc:	9c 36       	cpi	r25, 0x6C	; 108
    66fe:	11 f4       	brne	.+4      	; 0x6704 <vfprintf+0xde>
    6700:	10 68       	ori	r17, 0x80	; 128
    6702:	02 c0       	rjmp	.+4      	; 0x6708 <vfprintf+0xe2>
    6704:	98 36       	cpi	r25, 0x68	; 104
    6706:	59 f4       	brne	.+22     	; 0x671e <vfprintf+0xf8>
    6708:	ee 85       	ldd	r30, Y+14	; 0x0e
    670a:	ff 85       	ldd	r31, Y+15	; 0x0f
    670c:	23 fd       	sbrc	r18, 3
    670e:	95 91       	lpm	r25, Z+
    6710:	23 ff       	sbrs	r18, 3
    6712:	91 91       	ld	r25, Z+
    6714:	ff 87       	std	Y+15, r31	; 0x0f
    6716:	ee 87       	std	Y+14, r30	; 0x0e
    6718:	99 23       	and	r25, r25
    671a:	09 f0       	breq	.+2      	; 0x671e <vfprintf+0xf8>
    671c:	bc cf       	rjmp	.-136    	; 0x6696 <vfprintf+0x70>
    671e:	89 2f       	mov	r24, r25
    6720:	85 54       	subi	r24, 0x45	; 69
    6722:	83 30       	cpi	r24, 0x03	; 3
    6724:	20 f4       	brcc	.+8      	; 0x672e <vfprintf+0x108>
    6726:	81 2f       	mov	r24, r17
    6728:	80 61       	ori	r24, 0x10	; 16
    672a:	90 5e       	subi	r25, 0xE0	; 224
    672c:	07 c0       	rjmp	.+14     	; 0x673c <vfprintf+0x116>
    672e:	89 2f       	mov	r24, r25
    6730:	85 56       	subi	r24, 0x65	; 101
    6732:	83 30       	cpi	r24, 0x03	; 3
    6734:	08 f0       	brcs	.+2      	; 0x6738 <vfprintf+0x112>
    6736:	8f c1       	rjmp	.+798    	; 0x6a56 <vfprintf+0x430>
    6738:	81 2f       	mov	r24, r17
    673a:	8f 7e       	andi	r24, 0xEF	; 239
    673c:	86 fd       	sbrc	r24, 6
    673e:	02 c0       	rjmp	.+4      	; 0x6744 <vfprintf+0x11e>
    6740:	76 e0       	ldi	r23, 0x06	; 6
    6742:	97 2e       	mov	r9, r23
    6744:	6f e3       	ldi	r22, 0x3F	; 63
    6746:	f6 2e       	mov	r15, r22
    6748:	f8 22       	and	r15, r24
    674a:	95 36       	cpi	r25, 0x65	; 101
    674c:	19 f4       	brne	.+6      	; 0x6754 <vfprintf+0x12e>
    674e:	f0 e4       	ldi	r31, 0x40	; 64
    6750:	ff 2a       	or	r15, r31
    6752:	07 c0       	rjmp	.+14     	; 0x6762 <vfprintf+0x13c>
    6754:	96 36       	cpi	r25, 0x66	; 102
    6756:	19 f4       	brne	.+6      	; 0x675e <vfprintf+0x138>
    6758:	20 e8       	ldi	r18, 0x80	; 128
    675a:	f2 2a       	or	r15, r18
    675c:	02 c0       	rjmp	.+4      	; 0x6762 <vfprintf+0x13c>
    675e:	91 10       	cpse	r9, r1
    6760:	9a 94       	dec	r9
    6762:	f7 fe       	sbrs	r15, 7
    6764:	0a c0       	rjmp	.+20     	; 0x677a <vfprintf+0x154>
    6766:	3b e3       	ldi	r19, 0x3B	; 59
    6768:	39 15       	cp	r19, r9
    676a:	18 f4       	brcc	.+6      	; 0x6772 <vfprintf+0x14c>
    676c:	5c e3       	ldi	r21, 0x3C	; 60
    676e:	b5 2e       	mov	r11, r21
    6770:	02 c0       	rjmp	.+4      	; 0x6776 <vfprintf+0x150>
    6772:	b9 2c       	mov	r11, r9
    6774:	b3 94       	inc	r11
    6776:	27 e0       	ldi	r18, 0x07	; 7
    6778:	09 c0       	rjmp	.+18     	; 0x678c <vfprintf+0x166>
    677a:	47 e0       	ldi	r20, 0x07	; 7
    677c:	49 15       	cp	r20, r9
    677e:	20 f4       	brcc	.+8      	; 0x6788 <vfprintf+0x162>
    6780:	bb 24       	eor	r11, r11
    6782:	47 e0       	ldi	r20, 0x07	; 7
    6784:	94 2e       	mov	r9, r20
    6786:	f7 cf       	rjmp	.-18     	; 0x6776 <vfprintf+0x150>
    6788:	29 2d       	mov	r18, r9
    678a:	bb 24       	eor	r11, r11
    678c:	c6 01       	movw	r24, r12
    678e:	04 96       	adiw	r24, 0x04	; 4
    6790:	9d 87       	std	Y+13, r25	; 0x0d
    6792:	8c 87       	std	Y+12, r24	; 0x0c
    6794:	f6 01       	movw	r30, r12
    6796:	60 81       	ld	r22, Z
    6798:	71 81       	ldd	r23, Z+1	; 0x01
    679a:	82 81       	ldd	r24, Z+2	; 0x02
    679c:	93 81       	ldd	r25, Z+3	; 0x03
    679e:	ae 01       	movw	r20, r28
    67a0:	4f 5f       	subi	r20, 0xFF	; 255
    67a2:	5f 4f       	sbci	r21, 0xFF	; 255
    67a4:	0b 2d       	mov	r16, r11
    67a6:	a4 d4       	rcall	.+2376   	; 0x70f0 <__ftoa_engine>
    67a8:	6c 01       	movw	r12, r24
    67aa:	09 81       	ldd	r16, Y+1	; 0x01
    67ac:	20 2e       	mov	r2, r16
    67ae:	33 24       	eor	r3, r3
    67b0:	00 ff       	sbrs	r16, 0
    67b2:	04 c0       	rjmp	.+8      	; 0x67bc <vfprintf+0x196>
    67b4:	03 fd       	sbrc	r16, 3
    67b6:	02 c0       	rjmp	.+4      	; 0x67bc <vfprintf+0x196>
    67b8:	1d e2       	ldi	r17, 0x2D	; 45
    67ba:	09 c0       	rjmp	.+18     	; 0x67ce <vfprintf+0x1a8>
    67bc:	f1 fe       	sbrs	r15, 1
    67be:	02 c0       	rjmp	.+4      	; 0x67c4 <vfprintf+0x19e>
    67c0:	1b e2       	ldi	r17, 0x2B	; 43
    67c2:	05 c0       	rjmp	.+10     	; 0x67ce <vfprintf+0x1a8>
    67c4:	f2 fc       	sbrc	r15, 2
    67c6:	02 c0       	rjmp	.+4      	; 0x67cc <vfprintf+0x1a6>
    67c8:	10 e0       	ldi	r17, 0x00	; 0
    67ca:	01 c0       	rjmp	.+2      	; 0x67ce <vfprintf+0x1a8>
    67cc:	10 e2       	ldi	r17, 0x20	; 32
    67ce:	c1 01       	movw	r24, r2
    67d0:	8c 70       	andi	r24, 0x0C	; 12
    67d2:	90 70       	andi	r25, 0x00	; 0
    67d4:	89 2b       	or	r24, r25
    67d6:	a1 f1       	breq	.+104    	; 0x6840 <vfprintf+0x21a>
    67d8:	11 23       	and	r17, r17
    67da:	11 f4       	brne	.+4      	; 0x67e0 <vfprintf+0x1ba>
    67dc:	83 e0       	ldi	r24, 0x03	; 3
    67de:	01 c0       	rjmp	.+2      	; 0x67e2 <vfprintf+0x1bc>
    67e0:	84 e0       	ldi	r24, 0x04	; 4
    67e2:	88 15       	cp	r24, r8
    67e4:	10 f0       	brcs	.+4      	; 0x67ea <vfprintf+0x1c4>
    67e6:	88 24       	eor	r8, r8
    67e8:	09 c0       	rjmp	.+18     	; 0x67fc <vfprintf+0x1d6>
    67ea:	88 1a       	sub	r8, r24
    67ec:	f3 fc       	sbrc	r15, 3
    67ee:	06 c0       	rjmp	.+12     	; 0x67fc <vfprintf+0x1d6>
    67f0:	80 e2       	ldi	r24, 0x20	; 32
    67f2:	90 e0       	ldi	r25, 0x00	; 0
    67f4:	b3 01       	movw	r22, r6
    67f6:	6a d5       	rcall	.+2772   	; 0x72cc <fputc>
    67f8:	8a 94       	dec	r8
    67fa:	d1 f7       	brne	.-12     	; 0x67f0 <vfprintf+0x1ca>
    67fc:	11 23       	and	r17, r17
    67fe:	21 f0       	breq	.+8      	; 0x6808 <vfprintf+0x1e2>
    6800:	81 2f       	mov	r24, r17
    6802:	90 e0       	ldi	r25, 0x00	; 0
    6804:	b3 01       	movw	r22, r6
    6806:	62 d5       	rcall	.+2756   	; 0x72cc <fputc>
    6808:	23 fe       	sbrs	r2, 3
    680a:	03 c0       	rjmp	.+6      	; 0x6812 <vfprintf+0x1ec>
    680c:	0f e5       	ldi	r16, 0x5F	; 95
    680e:	15 e0       	ldi	r17, 0x05	; 5
    6810:	0d c0       	rjmp	.+26     	; 0x682c <vfprintf+0x206>
    6812:	03 e6       	ldi	r16, 0x63	; 99
    6814:	15 e0       	ldi	r17, 0x05	; 5
    6816:	0a c0       	rjmp	.+20     	; 0x682c <vfprintf+0x206>
    6818:	e1 14       	cp	r14, r1
    681a:	f1 04       	cpc	r15, r1
    681c:	09 f0       	breq	.+2      	; 0x6820 <vfprintf+0x1fa>
    681e:	80 52       	subi	r24, 0x20	; 32
    6820:	90 e0       	ldi	r25, 0x00	; 0
    6822:	b3 01       	movw	r22, r6
    6824:	53 d5       	rcall	.+2726   	; 0x72cc <fputc>
    6826:	0f 5f       	subi	r16, 0xFF	; 255
    6828:	1f 4f       	sbci	r17, 0xFF	; 255
    682a:	05 c0       	rjmp	.+10     	; 0x6836 <vfprintf+0x210>
    682c:	ef 2c       	mov	r14, r15
    682e:	ff 24       	eor	r15, r15
    6830:	f0 e1       	ldi	r31, 0x10	; 16
    6832:	ef 22       	and	r14, r31
    6834:	ff 24       	eor	r15, r15
    6836:	f8 01       	movw	r30, r16
    6838:	84 91       	lpm	r24, Z+
    683a:	88 23       	and	r24, r24
    683c:	69 f7       	brne	.-38     	; 0x6818 <vfprintf+0x1f2>
    683e:	08 c1       	rjmp	.+528    	; 0x6a50 <vfprintf+0x42a>
    6840:	f7 fe       	sbrs	r15, 7
    6842:	12 c0       	rjmp	.+36     	; 0x6868 <vfprintf+0x242>
    6844:	bc 0c       	add	r11, r12
    6846:	24 fe       	sbrs	r2, 4
    6848:	04 c0       	rjmp	.+8      	; 0x6852 <vfprintf+0x22c>
    684a:	8a 81       	ldd	r24, Y+2	; 0x02
    684c:	81 33       	cpi	r24, 0x31	; 49
    684e:	09 f4       	brne	.+2      	; 0x6852 <vfprintf+0x22c>
    6850:	ba 94       	dec	r11
    6852:	1b 14       	cp	r1, r11
    6854:	1c f0       	brlt	.+6      	; 0x685c <vfprintf+0x236>
    6856:	bb 24       	eor	r11, r11
    6858:	b3 94       	inc	r11
    685a:	2d c0       	rjmp	.+90     	; 0x68b6 <vfprintf+0x290>
    685c:	f8 e0       	ldi	r31, 0x08	; 8
    685e:	fb 15       	cp	r31, r11
    6860:	50 f5       	brcc	.+84     	; 0x68b6 <vfprintf+0x290>
    6862:	38 e0       	ldi	r19, 0x08	; 8
    6864:	b3 2e       	mov	r11, r19
    6866:	27 c0       	rjmp	.+78     	; 0x68b6 <vfprintf+0x290>
    6868:	f6 fc       	sbrc	r15, 6
    686a:	25 c0       	rjmp	.+74     	; 0x68b6 <vfprintf+0x290>
    686c:	89 2d       	mov	r24, r9
    686e:	90 e0       	ldi	r25, 0x00	; 0
    6870:	8c 15       	cp	r24, r12
    6872:	9d 05       	cpc	r25, r13
    6874:	4c f0       	brlt	.+18     	; 0x6888 <vfprintf+0x262>
    6876:	2c ef       	ldi	r18, 0xFC	; 252
    6878:	c2 16       	cp	r12, r18
    687a:	2f ef       	ldi	r18, 0xFF	; 255
    687c:	d2 06       	cpc	r13, r18
    687e:	24 f0       	brlt	.+8      	; 0x6888 <vfprintf+0x262>
    6880:	30 e8       	ldi	r19, 0x80	; 128
    6882:	f3 2a       	or	r15, r19
    6884:	01 c0       	rjmp	.+2      	; 0x6888 <vfprintf+0x262>
    6886:	9a 94       	dec	r9
    6888:	99 20       	and	r9, r9
    688a:	49 f0       	breq	.+18     	; 0x689e <vfprintf+0x278>
    688c:	e2 e0       	ldi	r30, 0x02	; 2
    688e:	f0 e0       	ldi	r31, 0x00	; 0
    6890:	ec 0f       	add	r30, r28
    6892:	fd 1f       	adc	r31, r29
    6894:	e9 0d       	add	r30, r9
    6896:	f1 1d       	adc	r31, r1
    6898:	80 81       	ld	r24, Z
    689a:	80 33       	cpi	r24, 0x30	; 48
    689c:	a1 f3       	breq	.-24     	; 0x6886 <vfprintf+0x260>
    689e:	f7 fe       	sbrs	r15, 7
    68a0:	0a c0       	rjmp	.+20     	; 0x68b6 <vfprintf+0x290>
    68a2:	b9 2c       	mov	r11, r9
    68a4:	b3 94       	inc	r11
    68a6:	89 2d       	mov	r24, r9
    68a8:	90 e0       	ldi	r25, 0x00	; 0
    68aa:	c8 16       	cp	r12, r24
    68ac:	d9 06       	cpc	r13, r25
    68ae:	14 f0       	brlt	.+4      	; 0x68b4 <vfprintf+0x28e>
    68b0:	99 24       	eor	r9, r9
    68b2:	01 c0       	rjmp	.+2      	; 0x68b6 <vfprintf+0x290>
    68b4:	9c 18       	sub	r9, r12
    68b6:	f7 fc       	sbrc	r15, 7
    68b8:	03 c0       	rjmp	.+6      	; 0x68c0 <vfprintf+0x29a>
    68ba:	25 e0       	ldi	r18, 0x05	; 5
    68bc:	30 e0       	ldi	r19, 0x00	; 0
    68be:	09 c0       	rjmp	.+18     	; 0x68d2 <vfprintf+0x2ac>
    68c0:	1c 14       	cp	r1, r12
    68c2:	1d 04       	cpc	r1, r13
    68c4:	1c f0       	brlt	.+6      	; 0x68cc <vfprintf+0x2a6>
    68c6:	21 e0       	ldi	r18, 0x01	; 1
    68c8:	30 e0       	ldi	r19, 0x00	; 0
    68ca:	03 c0       	rjmp	.+6      	; 0x68d2 <vfprintf+0x2ac>
    68cc:	96 01       	movw	r18, r12
    68ce:	2f 5f       	subi	r18, 0xFF	; 255
    68d0:	3f 4f       	sbci	r19, 0xFF	; 255
    68d2:	11 23       	and	r17, r17
    68d4:	11 f0       	breq	.+4      	; 0x68da <vfprintf+0x2b4>
    68d6:	2f 5f       	subi	r18, 0xFF	; 255
    68d8:	3f 4f       	sbci	r19, 0xFF	; 255
    68da:	99 20       	and	r9, r9
    68dc:	29 f0       	breq	.+10     	; 0x68e8 <vfprintf+0x2c2>
    68de:	89 2d       	mov	r24, r9
    68e0:	90 e0       	ldi	r25, 0x00	; 0
    68e2:	01 96       	adiw	r24, 0x01	; 1
    68e4:	28 0f       	add	r18, r24
    68e6:	39 1f       	adc	r19, r25
    68e8:	88 2d       	mov	r24, r8
    68ea:	90 e0       	ldi	r25, 0x00	; 0
    68ec:	28 17       	cp	r18, r24
    68ee:	39 07       	cpc	r19, r25
    68f0:	14 f0       	brlt	.+4      	; 0x68f6 <vfprintf+0x2d0>
    68f2:	88 24       	eor	r8, r8
    68f4:	01 c0       	rjmp	.+2      	; 0x68f8 <vfprintf+0x2d2>
    68f6:	82 1a       	sub	r8, r18
    68f8:	4f 2c       	mov	r4, r15
    68fa:	55 24       	eor	r5, r5
    68fc:	c2 01       	movw	r24, r4
    68fe:	89 70       	andi	r24, 0x09	; 9
    6900:	90 70       	andi	r25, 0x00	; 0
    6902:	89 2b       	or	r24, r25
    6904:	31 f0       	breq	.+12     	; 0x6912 <vfprintf+0x2ec>
    6906:	07 c0       	rjmp	.+14     	; 0x6916 <vfprintf+0x2f0>
    6908:	80 e2       	ldi	r24, 0x20	; 32
    690a:	90 e0       	ldi	r25, 0x00	; 0
    690c:	b3 01       	movw	r22, r6
    690e:	de d4       	rcall	.+2492   	; 0x72cc <fputc>
    6910:	8a 94       	dec	r8
    6912:	88 20       	and	r8, r8
    6914:	c9 f7       	brne	.-14     	; 0x6908 <vfprintf+0x2e2>
    6916:	11 23       	and	r17, r17
    6918:	21 f0       	breq	.+8      	; 0x6922 <vfprintf+0x2fc>
    691a:	81 2f       	mov	r24, r17
    691c:	90 e0       	ldi	r25, 0x00	; 0
    691e:	b3 01       	movw	r22, r6
    6920:	d5 d4       	rcall	.+2474   	; 0x72cc <fputc>
    6922:	43 fe       	sbrs	r4, 3
    6924:	06 c0       	rjmp	.+12     	; 0x6932 <vfprintf+0x30c>
    6926:	07 c0       	rjmp	.+14     	; 0x6936 <vfprintf+0x310>
    6928:	80 e3       	ldi	r24, 0x30	; 48
    692a:	90 e0       	ldi	r25, 0x00	; 0
    692c:	b3 01       	movw	r22, r6
    692e:	ce d4       	rcall	.+2460   	; 0x72cc <fputc>
    6930:	8a 94       	dec	r8
    6932:	88 20       	and	r8, r8
    6934:	c9 f7       	brne	.-14     	; 0x6928 <vfprintf+0x302>
    6936:	f7 fe       	sbrs	r15, 7
    6938:	44 c0       	rjmp	.+136    	; 0x69c2 <vfprintf+0x39c>
    693a:	86 01       	movw	r16, r12
    693c:	d7 fe       	sbrs	r13, 7
    693e:	02 c0       	rjmp	.+4      	; 0x6944 <vfprintf+0x31e>
    6940:	00 e0       	ldi	r16, 0x00	; 0
    6942:	10 e0       	ldi	r17, 0x00	; 0
    6944:	76 01       	movw	r14, r12
    6946:	08 94       	sec
    6948:	e1 1c       	adc	r14, r1
    694a:	f1 1c       	adc	r15, r1
    694c:	e0 1a       	sub	r14, r16
    694e:	f1 0a       	sbc	r15, r17
    6950:	41 e0       	ldi	r20, 0x01	; 1
    6952:	50 e0       	ldi	r21, 0x00	; 0
    6954:	4c 0f       	add	r20, r28
    6956:	5d 1f       	adc	r21, r29
    6958:	e4 0e       	add	r14, r20
    695a:	f5 1e       	adc	r15, r21
    695c:	26 01       	movw	r4, r12
    695e:	4b 18       	sub	r4, r11
    6960:	51 08       	sbc	r5, r1
    6962:	89 2d       	mov	r24, r9
    6964:	90 e0       	ldi	r25, 0x00	; 0
    6966:	aa 24       	eor	r10, r10
    6968:	bb 24       	eor	r11, r11
    696a:	a8 1a       	sub	r10, r24
    696c:	b9 0a       	sbc	r11, r25
    696e:	5f ef       	ldi	r21, 0xFF	; 255
    6970:	0f 3f       	cpi	r16, 0xFF	; 255
    6972:	15 07       	cpc	r17, r21
    6974:	21 f4       	brne	.+8      	; 0x697e <vfprintf+0x358>
    6976:	8e e2       	ldi	r24, 0x2E	; 46
    6978:	90 e0       	ldi	r25, 0x00	; 0
    697a:	b3 01       	movw	r22, r6
    697c:	a7 d4       	rcall	.+2382   	; 0x72cc <fputc>
    697e:	c0 16       	cp	r12, r16
    6980:	d1 06       	cpc	r13, r17
    6982:	34 f0       	brlt	.+12     	; 0x6990 <vfprintf+0x36a>
    6984:	40 16       	cp	r4, r16
    6986:	51 06       	cpc	r5, r17
    6988:	1c f4       	brge	.+6      	; 0x6990 <vfprintf+0x36a>
    698a:	f7 01       	movw	r30, r14
    698c:	80 81       	ld	r24, Z
    698e:	01 c0       	rjmp	.+2      	; 0x6992 <vfprintf+0x36c>
    6990:	80 e3       	ldi	r24, 0x30	; 48
    6992:	01 50       	subi	r16, 0x01	; 1
    6994:	10 40       	sbci	r17, 0x00	; 0
    6996:	08 94       	sec
    6998:	e1 1c       	adc	r14, r1
    699a:	f1 1c       	adc	r15, r1
    699c:	0a 15       	cp	r16, r10
    699e:	1b 05       	cpc	r17, r11
    69a0:	24 f0       	brlt	.+8      	; 0x69aa <vfprintf+0x384>
    69a2:	90 e0       	ldi	r25, 0x00	; 0
    69a4:	b3 01       	movw	r22, r6
    69a6:	92 d4       	rcall	.+2340   	; 0x72cc <fputc>
    69a8:	e2 cf       	rjmp	.-60     	; 0x696e <vfprintf+0x348>
    69aa:	0c 15       	cp	r16, r12
    69ac:	1d 05       	cpc	r17, r13
    69ae:	39 f4       	brne	.+14     	; 0x69be <vfprintf+0x398>
    69b0:	9a 81       	ldd	r25, Y+2	; 0x02
    69b2:	96 33       	cpi	r25, 0x36	; 54
    69b4:	18 f4       	brcc	.+6      	; 0x69bc <vfprintf+0x396>
    69b6:	95 33       	cpi	r25, 0x35	; 53
    69b8:	11 f4       	brne	.+4      	; 0x69be <vfprintf+0x398>
    69ba:	24 fe       	sbrs	r2, 4
    69bc:	81 e3       	ldi	r24, 0x31	; 49
    69be:	90 e0       	ldi	r25, 0x00	; 0
    69c0:	45 c0       	rjmp	.+138    	; 0x6a4c <vfprintf+0x426>
    69c2:	8a 81       	ldd	r24, Y+2	; 0x02
    69c4:	81 33       	cpi	r24, 0x31	; 49
    69c6:	09 f0       	breq	.+2      	; 0x69ca <vfprintf+0x3a4>
    69c8:	0f 7e       	andi	r16, 0xEF	; 239
    69ca:	90 e0       	ldi	r25, 0x00	; 0
    69cc:	b3 01       	movw	r22, r6
    69ce:	7e d4       	rcall	.+2300   	; 0x72cc <fputc>
    69d0:	99 20       	and	r9, r9
    69d2:	91 f0       	breq	.+36     	; 0x69f8 <vfprintf+0x3d2>
    69d4:	8e e2       	ldi	r24, 0x2E	; 46
    69d6:	90 e0       	ldi	r25, 0x00	; 0
    69d8:	b3 01       	movw	r22, r6
    69da:	78 d4       	rcall	.+2288   	; 0x72cc <fputc>
    69dc:	12 e0       	ldi	r17, 0x02	; 2
    69de:	e1 e0       	ldi	r30, 0x01	; 1
    69e0:	f0 e0       	ldi	r31, 0x00	; 0
    69e2:	ec 0f       	add	r30, r28
    69e4:	fd 1f       	adc	r31, r29
    69e6:	e1 0f       	add	r30, r17
    69e8:	f1 1d       	adc	r31, r1
    69ea:	1f 5f       	subi	r17, 0xFF	; 255
    69ec:	80 81       	ld	r24, Z
    69ee:	90 e0       	ldi	r25, 0x00	; 0
    69f0:	b3 01       	movw	r22, r6
    69f2:	6c d4       	rcall	.+2264   	; 0x72cc <fputc>
    69f4:	9a 94       	dec	r9
    69f6:	99 f7       	brne	.-26     	; 0x69de <vfprintf+0x3b8>
    69f8:	44 fc       	sbrc	r4, 4
    69fa:	03 c0       	rjmp	.+6      	; 0x6a02 <vfprintf+0x3dc>
    69fc:	85 e6       	ldi	r24, 0x65	; 101
    69fe:	90 e0       	ldi	r25, 0x00	; 0
    6a00:	02 c0       	rjmp	.+4      	; 0x6a06 <vfprintf+0x3e0>
    6a02:	85 e4       	ldi	r24, 0x45	; 69
    6a04:	90 e0       	ldi	r25, 0x00	; 0
    6a06:	b3 01       	movw	r22, r6
    6a08:	61 d4       	rcall	.+2242   	; 0x72cc <fputc>
    6a0a:	d7 fc       	sbrc	r13, 7
    6a0c:	05 c0       	rjmp	.+10     	; 0x6a18 <vfprintf+0x3f2>
    6a0e:	c1 14       	cp	r12, r1
    6a10:	d1 04       	cpc	r13, r1
    6a12:	41 f4       	brne	.+16     	; 0x6a24 <vfprintf+0x3fe>
    6a14:	04 ff       	sbrs	r16, 4
    6a16:	06 c0       	rjmp	.+12     	; 0x6a24 <vfprintf+0x3fe>
    6a18:	d0 94       	com	r13
    6a1a:	c1 94       	neg	r12
    6a1c:	d1 08       	sbc	r13, r1
    6a1e:	d3 94       	inc	r13
    6a20:	8d e2       	ldi	r24, 0x2D	; 45
    6a22:	01 c0       	rjmp	.+2      	; 0x6a26 <vfprintf+0x400>
    6a24:	8b e2       	ldi	r24, 0x2B	; 43
    6a26:	90 e0       	ldi	r25, 0x00	; 0
    6a28:	b3 01       	movw	r22, r6
    6a2a:	50 d4       	rcall	.+2208   	; 0x72cc <fputc>
    6a2c:	80 e3       	ldi	r24, 0x30	; 48
    6a2e:	05 c0       	rjmp	.+10     	; 0x6a3a <vfprintf+0x414>
    6a30:	8f 5f       	subi	r24, 0xFF	; 255
    6a32:	26 ef       	ldi	r18, 0xF6	; 246
    6a34:	3f ef       	ldi	r19, 0xFF	; 255
    6a36:	c2 0e       	add	r12, r18
    6a38:	d3 1e       	adc	r13, r19
    6a3a:	3a e0       	ldi	r19, 0x0A	; 10
    6a3c:	c3 16       	cp	r12, r19
    6a3e:	d1 04       	cpc	r13, r1
    6a40:	bc f7       	brge	.-18     	; 0x6a30 <vfprintf+0x40a>
    6a42:	90 e0       	ldi	r25, 0x00	; 0
    6a44:	b3 01       	movw	r22, r6
    6a46:	42 d4       	rcall	.+2180   	; 0x72cc <fputc>
    6a48:	c6 01       	movw	r24, r12
    6a4a:	c0 96       	adiw	r24, 0x30	; 48
    6a4c:	b3 01       	movw	r22, r6
    6a4e:	3e d4       	rcall	.+2172   	; 0x72cc <fputc>
    6a50:	cc 84       	ldd	r12, Y+12	; 0x0c
    6a52:	dd 84       	ldd	r13, Y+13	; 0x0d
    6a54:	46 c1       	rjmp	.+652    	; 0x6ce2 <vfprintf+0x6bc>
    6a56:	93 36       	cpi	r25, 0x63	; 99
    6a58:	31 f0       	breq	.+12     	; 0x6a66 <vfprintf+0x440>
    6a5a:	93 37       	cpi	r25, 0x73	; 115
    6a5c:	99 f0       	breq	.+38     	; 0x6a84 <vfprintf+0x45e>
    6a5e:	93 35       	cpi	r25, 0x53	; 83
    6a60:	09 f0       	breq	.+2      	; 0x6a64 <vfprintf+0x43e>
    6a62:	55 c0       	rjmp	.+170    	; 0x6b0e <vfprintf+0x4e8>
    6a64:	22 c0       	rjmp	.+68     	; 0x6aaa <vfprintf+0x484>
    6a66:	f6 01       	movw	r30, r12
    6a68:	80 81       	ld	r24, Z
    6a6a:	89 83       	std	Y+1, r24	; 0x01
    6a6c:	5e 01       	movw	r10, r28
    6a6e:	08 94       	sec
    6a70:	a1 1c       	adc	r10, r1
    6a72:	b1 1c       	adc	r11, r1
    6a74:	22 e0       	ldi	r18, 0x02	; 2
    6a76:	30 e0       	ldi	r19, 0x00	; 0
    6a78:	c2 0e       	add	r12, r18
    6a7a:	d3 1e       	adc	r13, r19
    6a7c:	21 e0       	ldi	r18, 0x01	; 1
    6a7e:	e2 2e       	mov	r14, r18
    6a80:	f1 2c       	mov	r15, r1
    6a82:	11 c0       	rjmp	.+34     	; 0x6aa6 <vfprintf+0x480>
    6a84:	f6 01       	movw	r30, r12
    6a86:	a0 80       	ld	r10, Z
    6a88:	b1 80       	ldd	r11, Z+1	; 0x01
    6a8a:	16 fd       	sbrc	r17, 6
    6a8c:	03 c0       	rjmp	.+6      	; 0x6a94 <vfprintf+0x46e>
    6a8e:	6f ef       	ldi	r22, 0xFF	; 255
    6a90:	7f ef       	ldi	r23, 0xFF	; 255
    6a92:	02 c0       	rjmp	.+4      	; 0x6a98 <vfprintf+0x472>
    6a94:	69 2d       	mov	r22, r9
    6a96:	70 e0       	ldi	r23, 0x00	; 0
    6a98:	22 e0       	ldi	r18, 0x02	; 2
    6a9a:	30 e0       	ldi	r19, 0x00	; 0
    6a9c:	c2 0e       	add	r12, r18
    6a9e:	d3 1e       	adc	r13, r19
    6aa0:	c5 01       	movw	r24, r10
    6aa2:	09 d4       	rcall	.+2066   	; 0x72b6 <strnlen>
    6aa4:	7c 01       	movw	r14, r24
    6aa6:	1f 77       	andi	r17, 0x7F	; 127
    6aa8:	12 c0       	rjmp	.+36     	; 0x6ace <vfprintf+0x4a8>
    6aaa:	f6 01       	movw	r30, r12
    6aac:	a0 80       	ld	r10, Z
    6aae:	b1 80       	ldd	r11, Z+1	; 0x01
    6ab0:	16 fd       	sbrc	r17, 6
    6ab2:	03 c0       	rjmp	.+6      	; 0x6aba <vfprintf+0x494>
    6ab4:	6f ef       	ldi	r22, 0xFF	; 255
    6ab6:	7f ef       	ldi	r23, 0xFF	; 255
    6ab8:	02 c0       	rjmp	.+4      	; 0x6abe <vfprintf+0x498>
    6aba:	69 2d       	mov	r22, r9
    6abc:	70 e0       	ldi	r23, 0x00	; 0
    6abe:	22 e0       	ldi	r18, 0x02	; 2
    6ac0:	30 e0       	ldi	r19, 0x00	; 0
    6ac2:	c2 0e       	add	r12, r18
    6ac4:	d3 1e       	adc	r13, r19
    6ac6:	c5 01       	movw	r24, r10
    6ac8:	eb d3       	rcall	.+2006   	; 0x72a0 <strnlen_P>
    6aca:	7c 01       	movw	r14, r24
    6acc:	10 68       	ori	r17, 0x80	; 128
    6ace:	13 ff       	sbrs	r17, 3
    6ad0:	06 c0       	rjmp	.+12     	; 0x6ade <vfprintf+0x4b8>
    6ad2:	19 c0       	rjmp	.+50     	; 0x6b06 <vfprintf+0x4e0>
    6ad4:	80 e2       	ldi	r24, 0x20	; 32
    6ad6:	90 e0       	ldi	r25, 0x00	; 0
    6ad8:	b3 01       	movw	r22, r6
    6ada:	f8 d3       	rcall	.+2032   	; 0x72cc <fputc>
    6adc:	8a 94       	dec	r8
    6ade:	88 2d       	mov	r24, r8
    6ae0:	90 e0       	ldi	r25, 0x00	; 0
    6ae2:	e8 16       	cp	r14, r24
    6ae4:	f9 06       	cpc	r15, r25
    6ae6:	b0 f3       	brcs	.-20     	; 0x6ad4 <vfprintf+0x4ae>
    6ae8:	0e c0       	rjmp	.+28     	; 0x6b06 <vfprintf+0x4e0>
    6aea:	f5 01       	movw	r30, r10
    6aec:	17 fd       	sbrc	r17, 7
    6aee:	85 91       	lpm	r24, Z+
    6af0:	17 ff       	sbrs	r17, 7
    6af2:	81 91       	ld	r24, Z+
    6af4:	5f 01       	movw	r10, r30
    6af6:	90 e0       	ldi	r25, 0x00	; 0
    6af8:	b3 01       	movw	r22, r6
    6afa:	e8 d3       	rcall	.+2000   	; 0x72cc <fputc>
    6afc:	81 10       	cpse	r8, r1
    6afe:	8a 94       	dec	r8
    6b00:	08 94       	sec
    6b02:	e1 08       	sbc	r14, r1
    6b04:	f1 08       	sbc	r15, r1
    6b06:	e1 14       	cp	r14, r1
    6b08:	f1 04       	cpc	r15, r1
    6b0a:	79 f7       	brne	.-34     	; 0x6aea <vfprintf+0x4c4>
    6b0c:	ea c0       	rjmp	.+468    	; 0x6ce2 <vfprintf+0x6bc>
    6b0e:	94 36       	cpi	r25, 0x64	; 100
    6b10:	11 f0       	breq	.+4      	; 0x6b16 <vfprintf+0x4f0>
    6b12:	99 36       	cpi	r25, 0x69	; 105
    6b14:	81 f5       	brne	.+96     	; 0x6b76 <vfprintf+0x550>
    6b16:	17 ff       	sbrs	r17, 7
    6b18:	08 c0       	rjmp	.+16     	; 0x6b2a <vfprintf+0x504>
    6b1a:	f6 01       	movw	r30, r12
    6b1c:	20 81       	ld	r18, Z
    6b1e:	31 81       	ldd	r19, Z+1	; 0x01
    6b20:	42 81       	ldd	r20, Z+2	; 0x02
    6b22:	53 81       	ldd	r21, Z+3	; 0x03
    6b24:	84 e0       	ldi	r24, 0x04	; 4
    6b26:	90 e0       	ldi	r25, 0x00	; 0
    6b28:	0a c0       	rjmp	.+20     	; 0x6b3e <vfprintf+0x518>
    6b2a:	f6 01       	movw	r30, r12
    6b2c:	80 81       	ld	r24, Z
    6b2e:	91 81       	ldd	r25, Z+1	; 0x01
    6b30:	9c 01       	movw	r18, r24
    6b32:	44 27       	eor	r20, r20
    6b34:	37 fd       	sbrc	r19, 7
    6b36:	40 95       	com	r20
    6b38:	54 2f       	mov	r21, r20
    6b3a:	82 e0       	ldi	r24, 0x02	; 2
    6b3c:	90 e0       	ldi	r25, 0x00	; 0
    6b3e:	c8 0e       	add	r12, r24
    6b40:	d9 1e       	adc	r13, r25
    6b42:	9f e6       	ldi	r25, 0x6F	; 111
    6b44:	f9 2e       	mov	r15, r25
    6b46:	f1 22       	and	r15, r17
    6b48:	57 ff       	sbrs	r21, 7
    6b4a:	09 c0       	rjmp	.+18     	; 0x6b5e <vfprintf+0x538>
    6b4c:	50 95       	com	r21
    6b4e:	40 95       	com	r20
    6b50:	30 95       	com	r19
    6b52:	21 95       	neg	r18
    6b54:	3f 4f       	sbci	r19, 0xFF	; 255
    6b56:	4f 4f       	sbci	r20, 0xFF	; 255
    6b58:	5f 4f       	sbci	r21, 0xFF	; 255
    6b5a:	90 e8       	ldi	r25, 0x80	; 128
    6b5c:	f9 2a       	or	r15, r25
    6b5e:	ca 01       	movw	r24, r20
    6b60:	b9 01       	movw	r22, r18
    6b62:	ae 01       	movw	r20, r28
    6b64:	4f 5f       	subi	r20, 0xFF	; 255
    6b66:	5f 4f       	sbci	r21, 0xFF	; 255
    6b68:	2a e0       	ldi	r18, 0x0A	; 10
    6b6a:	30 e0       	ldi	r19, 0x00	; 0
    6b6c:	22 d4       	rcall	.+2116   	; 0x73b2 <__ultoa_invert>
    6b6e:	e8 2e       	mov	r14, r24
    6b70:	e8 89       	ldd	r30, Y+16	; 0x10
    6b72:	ee 1a       	sub	r14, r30
    6b74:	40 c0       	rjmp	.+128    	; 0x6bf6 <vfprintf+0x5d0>
    6b76:	95 37       	cpi	r25, 0x75	; 117
    6b78:	21 f4       	brne	.+8      	; 0x6b82 <vfprintf+0x55c>
    6b7a:	1f 7e       	andi	r17, 0xEF	; 239
    6b7c:	2a e0       	ldi	r18, 0x0A	; 10
    6b7e:	30 e0       	ldi	r19, 0x00	; 0
    6b80:	1c c0       	rjmp	.+56     	; 0x6bba <vfprintf+0x594>
    6b82:	19 7f       	andi	r17, 0xF9	; 249
    6b84:	9f 36       	cpi	r25, 0x6F	; 111
    6b86:	61 f0       	breq	.+24     	; 0x6ba0 <vfprintf+0x57a>
    6b88:	90 37       	cpi	r25, 0x70	; 112
    6b8a:	20 f4       	brcc	.+8      	; 0x6b94 <vfprintf+0x56e>
    6b8c:	98 35       	cpi	r25, 0x58	; 88
    6b8e:	09 f0       	breq	.+2      	; 0x6b92 <vfprintf+0x56c>
    6b90:	ab c0       	rjmp	.+342    	; 0x6ce8 <vfprintf+0x6c2>
    6b92:	0f c0       	rjmp	.+30     	; 0x6bb2 <vfprintf+0x58c>
    6b94:	90 37       	cpi	r25, 0x70	; 112
    6b96:	39 f0       	breq	.+14     	; 0x6ba6 <vfprintf+0x580>
    6b98:	98 37       	cpi	r25, 0x78	; 120
    6b9a:	09 f0       	breq	.+2      	; 0x6b9e <vfprintf+0x578>
    6b9c:	a5 c0       	rjmp	.+330    	; 0x6ce8 <vfprintf+0x6c2>
    6b9e:	04 c0       	rjmp	.+8      	; 0x6ba8 <vfprintf+0x582>
    6ba0:	28 e0       	ldi	r18, 0x08	; 8
    6ba2:	30 e0       	ldi	r19, 0x00	; 0
    6ba4:	0a c0       	rjmp	.+20     	; 0x6bba <vfprintf+0x594>
    6ba6:	10 61       	ori	r17, 0x10	; 16
    6ba8:	14 fd       	sbrc	r17, 4
    6baa:	14 60       	ori	r17, 0x04	; 4
    6bac:	20 e1       	ldi	r18, 0x10	; 16
    6bae:	30 e0       	ldi	r19, 0x00	; 0
    6bb0:	04 c0       	rjmp	.+8      	; 0x6bba <vfprintf+0x594>
    6bb2:	14 fd       	sbrc	r17, 4
    6bb4:	16 60       	ori	r17, 0x06	; 6
    6bb6:	20 e1       	ldi	r18, 0x10	; 16
    6bb8:	32 e0       	ldi	r19, 0x02	; 2
    6bba:	17 ff       	sbrs	r17, 7
    6bbc:	08 c0       	rjmp	.+16     	; 0x6bce <vfprintf+0x5a8>
    6bbe:	f6 01       	movw	r30, r12
    6bc0:	60 81       	ld	r22, Z
    6bc2:	71 81       	ldd	r23, Z+1	; 0x01
    6bc4:	82 81       	ldd	r24, Z+2	; 0x02
    6bc6:	93 81       	ldd	r25, Z+3	; 0x03
    6bc8:	44 e0       	ldi	r20, 0x04	; 4
    6bca:	50 e0       	ldi	r21, 0x00	; 0
    6bcc:	08 c0       	rjmp	.+16     	; 0x6bde <vfprintf+0x5b8>
    6bce:	f6 01       	movw	r30, r12
    6bd0:	80 81       	ld	r24, Z
    6bd2:	91 81       	ldd	r25, Z+1	; 0x01
    6bd4:	bc 01       	movw	r22, r24
    6bd6:	80 e0       	ldi	r24, 0x00	; 0
    6bd8:	90 e0       	ldi	r25, 0x00	; 0
    6bda:	42 e0       	ldi	r20, 0x02	; 2
    6bdc:	50 e0       	ldi	r21, 0x00	; 0
    6bde:	c4 0e       	add	r12, r20
    6be0:	d5 1e       	adc	r13, r21
    6be2:	ae 01       	movw	r20, r28
    6be4:	4f 5f       	subi	r20, 0xFF	; 255
    6be6:	5f 4f       	sbci	r21, 0xFF	; 255
    6be8:	e4 d3       	rcall	.+1992   	; 0x73b2 <__ultoa_invert>
    6bea:	e8 2e       	mov	r14, r24
    6bec:	58 89       	ldd	r21, Y+16	; 0x10
    6bee:	e5 1a       	sub	r14, r21
    6bf0:	8f e7       	ldi	r24, 0x7F	; 127
    6bf2:	f8 2e       	mov	r15, r24
    6bf4:	f1 22       	and	r15, r17
    6bf6:	f6 fe       	sbrs	r15, 6
    6bf8:	0b c0       	rjmp	.+22     	; 0x6c10 <vfprintf+0x5ea>
    6bfa:	8e ef       	ldi	r24, 0xFE	; 254
    6bfc:	f8 22       	and	r15, r24
    6bfe:	e9 14       	cp	r14, r9
    6c00:	38 f4       	brcc	.+14     	; 0x6c10 <vfprintf+0x5ea>
    6c02:	f4 fe       	sbrs	r15, 4
    6c04:	07 c0       	rjmp	.+14     	; 0x6c14 <vfprintf+0x5ee>
    6c06:	f2 fc       	sbrc	r15, 2
    6c08:	05 c0       	rjmp	.+10     	; 0x6c14 <vfprintf+0x5ee>
    6c0a:	9f ee       	ldi	r25, 0xEF	; 239
    6c0c:	f9 22       	and	r15, r25
    6c0e:	02 c0       	rjmp	.+4      	; 0x6c14 <vfprintf+0x5ee>
    6c10:	1e 2d       	mov	r17, r14
    6c12:	01 c0       	rjmp	.+2      	; 0x6c16 <vfprintf+0x5f0>
    6c14:	19 2d       	mov	r17, r9
    6c16:	f4 fe       	sbrs	r15, 4
    6c18:	0d c0       	rjmp	.+26     	; 0x6c34 <vfprintf+0x60e>
    6c1a:	fe 01       	movw	r30, r28
    6c1c:	ee 0d       	add	r30, r14
    6c1e:	f1 1d       	adc	r31, r1
    6c20:	80 81       	ld	r24, Z
    6c22:	80 33       	cpi	r24, 0x30	; 48
    6c24:	19 f4       	brne	.+6      	; 0x6c2c <vfprintf+0x606>
    6c26:	e9 ee       	ldi	r30, 0xE9	; 233
    6c28:	fe 22       	and	r15, r30
    6c2a:	08 c0       	rjmp	.+16     	; 0x6c3c <vfprintf+0x616>
    6c2c:	1f 5f       	subi	r17, 0xFF	; 255
    6c2e:	f2 fe       	sbrs	r15, 2
    6c30:	05 c0       	rjmp	.+10     	; 0x6c3c <vfprintf+0x616>
    6c32:	03 c0       	rjmp	.+6      	; 0x6c3a <vfprintf+0x614>
    6c34:	8f 2d       	mov	r24, r15
    6c36:	86 78       	andi	r24, 0x86	; 134
    6c38:	09 f0       	breq	.+2      	; 0x6c3c <vfprintf+0x616>
    6c3a:	1f 5f       	subi	r17, 0xFF	; 255
    6c3c:	0f 2d       	mov	r16, r15
    6c3e:	f3 fc       	sbrc	r15, 3
    6c40:	13 c0       	rjmp	.+38     	; 0x6c68 <vfprintf+0x642>
    6c42:	f0 fe       	sbrs	r15, 0
    6c44:	0e c0       	rjmp	.+28     	; 0x6c62 <vfprintf+0x63c>
    6c46:	18 15       	cp	r17, r8
    6c48:	10 f0       	brcs	.+4      	; 0x6c4e <vfprintf+0x628>
    6c4a:	9e 2c       	mov	r9, r14
    6c4c:	0a c0       	rjmp	.+20     	; 0x6c62 <vfprintf+0x63c>
    6c4e:	9e 2c       	mov	r9, r14
    6c50:	98 0c       	add	r9, r8
    6c52:	91 1a       	sub	r9, r17
    6c54:	18 2d       	mov	r17, r8
    6c56:	05 c0       	rjmp	.+10     	; 0x6c62 <vfprintf+0x63c>
    6c58:	80 e2       	ldi	r24, 0x20	; 32
    6c5a:	90 e0       	ldi	r25, 0x00	; 0
    6c5c:	b3 01       	movw	r22, r6
    6c5e:	36 d3       	rcall	.+1644   	; 0x72cc <fputc>
    6c60:	1f 5f       	subi	r17, 0xFF	; 255
    6c62:	18 15       	cp	r17, r8
    6c64:	c8 f3       	brcs	.-14     	; 0x6c58 <vfprintf+0x632>
    6c66:	04 c0       	rjmp	.+8      	; 0x6c70 <vfprintf+0x64a>
    6c68:	18 15       	cp	r17, r8
    6c6a:	10 f4       	brcc	.+4      	; 0x6c70 <vfprintf+0x64a>
    6c6c:	81 1a       	sub	r8, r17
    6c6e:	01 c0       	rjmp	.+2      	; 0x6c72 <vfprintf+0x64c>
    6c70:	88 24       	eor	r8, r8
    6c72:	04 ff       	sbrs	r16, 4
    6c74:	0e c0       	rjmp	.+28     	; 0x6c92 <vfprintf+0x66c>
    6c76:	80 e3       	ldi	r24, 0x30	; 48
    6c78:	90 e0       	ldi	r25, 0x00	; 0
    6c7a:	b3 01       	movw	r22, r6
    6c7c:	27 d3       	rcall	.+1614   	; 0x72cc <fputc>
    6c7e:	02 ff       	sbrs	r16, 2
    6c80:	1b c0       	rjmp	.+54     	; 0x6cb8 <vfprintf+0x692>
    6c82:	01 fd       	sbrc	r16, 1
    6c84:	03 c0       	rjmp	.+6      	; 0x6c8c <vfprintf+0x666>
    6c86:	88 e7       	ldi	r24, 0x78	; 120
    6c88:	90 e0       	ldi	r25, 0x00	; 0
    6c8a:	0e c0       	rjmp	.+28     	; 0x6ca8 <vfprintf+0x682>
    6c8c:	88 e5       	ldi	r24, 0x58	; 88
    6c8e:	90 e0       	ldi	r25, 0x00	; 0
    6c90:	0b c0       	rjmp	.+22     	; 0x6ca8 <vfprintf+0x682>
    6c92:	80 2f       	mov	r24, r16
    6c94:	86 78       	andi	r24, 0x86	; 134
    6c96:	81 f0       	breq	.+32     	; 0x6cb8 <vfprintf+0x692>
    6c98:	01 ff       	sbrs	r16, 1
    6c9a:	02 c0       	rjmp	.+4      	; 0x6ca0 <vfprintf+0x67a>
    6c9c:	8b e2       	ldi	r24, 0x2B	; 43
    6c9e:	01 c0       	rjmp	.+2      	; 0x6ca2 <vfprintf+0x67c>
    6ca0:	80 e2       	ldi	r24, 0x20	; 32
    6ca2:	f7 fc       	sbrc	r15, 7
    6ca4:	8d e2       	ldi	r24, 0x2D	; 45
    6ca6:	90 e0       	ldi	r25, 0x00	; 0
    6ca8:	b3 01       	movw	r22, r6
    6caa:	10 d3       	rcall	.+1568   	; 0x72cc <fputc>
    6cac:	05 c0       	rjmp	.+10     	; 0x6cb8 <vfprintf+0x692>
    6cae:	80 e3       	ldi	r24, 0x30	; 48
    6cb0:	90 e0       	ldi	r25, 0x00	; 0
    6cb2:	b3 01       	movw	r22, r6
    6cb4:	0b d3       	rcall	.+1558   	; 0x72cc <fputc>
    6cb6:	9a 94       	dec	r9
    6cb8:	e9 14       	cp	r14, r9
    6cba:	c8 f3       	brcs	.-14     	; 0x6cae <vfprintf+0x688>
    6cbc:	ea 94       	dec	r14
    6cbe:	e1 e0       	ldi	r30, 0x01	; 1
    6cc0:	f0 e0       	ldi	r31, 0x00	; 0
    6cc2:	ec 0f       	add	r30, r28
    6cc4:	fd 1f       	adc	r31, r29
    6cc6:	ee 0d       	add	r30, r14
    6cc8:	f1 1d       	adc	r31, r1
    6cca:	80 81       	ld	r24, Z
    6ccc:	90 e0       	ldi	r25, 0x00	; 0
    6cce:	b3 01       	movw	r22, r6
    6cd0:	fd d2       	rcall	.+1530   	; 0x72cc <fputc>
    6cd2:	ee 20       	and	r14, r14
    6cd4:	99 f7       	brne	.-26     	; 0x6cbc <vfprintf+0x696>
    6cd6:	05 c0       	rjmp	.+10     	; 0x6ce2 <vfprintf+0x6bc>
    6cd8:	80 e2       	ldi	r24, 0x20	; 32
    6cda:	90 e0       	ldi	r25, 0x00	; 0
    6cdc:	b3 01       	movw	r22, r6
    6cde:	f6 d2       	rcall	.+1516   	; 0x72cc <fputc>
    6ce0:	8a 94       	dec	r8
    6ce2:	88 20       	and	r8, r8
    6ce4:	c9 f7       	brne	.-14     	; 0x6cd8 <vfprintf+0x6b2>
    6ce6:	b6 cc       	rjmp	.-1684   	; 0x6654 <vfprintf+0x2e>
    6ce8:	f3 01       	movw	r30, r6
    6cea:	66 81       	ldd	r22, Z+6	; 0x06
    6cec:	77 81       	ldd	r23, Z+7	; 0x07
    6cee:	cb 01       	movw	r24, r22
    6cf0:	61 96       	adiw	r28, 0x11	; 17
    6cf2:	e2 e1       	ldi	r30, 0x12	; 18
    6cf4:	70 c0       	rjmp	.+224    	; 0x6dd6 <__epilogue_restores__>

00006cf6 <__mulsi3>:
    6cf6:	62 9f       	mul	r22, r18
    6cf8:	d0 01       	movw	r26, r0
    6cfa:	73 9f       	mul	r23, r19
    6cfc:	f0 01       	movw	r30, r0
    6cfe:	82 9f       	mul	r24, r18
    6d00:	e0 0d       	add	r30, r0
    6d02:	f1 1d       	adc	r31, r1
    6d04:	64 9f       	mul	r22, r20
    6d06:	e0 0d       	add	r30, r0
    6d08:	f1 1d       	adc	r31, r1
    6d0a:	92 9f       	mul	r25, r18
    6d0c:	f0 0d       	add	r31, r0
    6d0e:	83 9f       	mul	r24, r19
    6d10:	f0 0d       	add	r31, r0
    6d12:	74 9f       	mul	r23, r20
    6d14:	f0 0d       	add	r31, r0
    6d16:	65 9f       	mul	r22, r21
    6d18:	f0 0d       	add	r31, r0
    6d1a:	99 27       	eor	r25, r25
    6d1c:	72 9f       	mul	r23, r18
    6d1e:	b0 0d       	add	r27, r0
    6d20:	e1 1d       	adc	r30, r1
    6d22:	f9 1f       	adc	r31, r25
    6d24:	63 9f       	mul	r22, r19
    6d26:	b0 0d       	add	r27, r0
    6d28:	e1 1d       	adc	r30, r1
    6d2a:	f9 1f       	adc	r31, r25
    6d2c:	bd 01       	movw	r22, r26
    6d2e:	cf 01       	movw	r24, r30
    6d30:	11 24       	eor	r1, r1
    6d32:	08 95       	ret

00006d34 <__divmodhi4>:
    6d34:	97 fb       	bst	r25, 7
    6d36:	09 2e       	mov	r0, r25
    6d38:	07 26       	eor	r0, r23
    6d3a:	0a d0       	rcall	.+20     	; 0x6d50 <__divmodhi4_neg1>
    6d3c:	77 fd       	sbrc	r23, 7
    6d3e:	04 d0       	rcall	.+8      	; 0x6d48 <__divmodhi4_neg2>
    6d40:	65 d0       	rcall	.+202    	; 0x6e0c <__udivmodhi4>
    6d42:	06 d0       	rcall	.+12     	; 0x6d50 <__divmodhi4_neg1>
    6d44:	00 20       	and	r0, r0
    6d46:	1a f4       	brpl	.+6      	; 0x6d4e <__divmodhi4_exit>

00006d48 <__divmodhi4_neg2>:
    6d48:	70 95       	com	r23
    6d4a:	61 95       	neg	r22
    6d4c:	7f 4f       	sbci	r23, 0xFF	; 255

00006d4e <__divmodhi4_exit>:
    6d4e:	08 95       	ret

00006d50 <__divmodhi4_neg1>:
    6d50:	f6 f7       	brtc	.-4      	; 0x6d4e <__divmodhi4_exit>
    6d52:	90 95       	com	r25
    6d54:	81 95       	neg	r24
    6d56:	9f 4f       	sbci	r25, 0xFF	; 255
    6d58:	08 95       	ret

00006d5a <__udivmodsi4>:
    6d5a:	a1 e2       	ldi	r26, 0x21	; 33
    6d5c:	1a 2e       	mov	r1, r26
    6d5e:	aa 1b       	sub	r26, r26
    6d60:	bb 1b       	sub	r27, r27
    6d62:	fd 01       	movw	r30, r26
    6d64:	0d c0       	rjmp	.+26     	; 0x6d80 <__udivmodsi4_ep>

00006d66 <__udivmodsi4_loop>:
    6d66:	aa 1f       	adc	r26, r26
    6d68:	bb 1f       	adc	r27, r27
    6d6a:	ee 1f       	adc	r30, r30
    6d6c:	ff 1f       	adc	r31, r31
    6d6e:	a2 17       	cp	r26, r18
    6d70:	b3 07       	cpc	r27, r19
    6d72:	e4 07       	cpc	r30, r20
    6d74:	f5 07       	cpc	r31, r21
    6d76:	20 f0       	brcs	.+8      	; 0x6d80 <__udivmodsi4_ep>
    6d78:	a2 1b       	sub	r26, r18
    6d7a:	b3 0b       	sbc	r27, r19
    6d7c:	e4 0b       	sbc	r30, r20
    6d7e:	f5 0b       	sbc	r31, r21

00006d80 <__udivmodsi4_ep>:
    6d80:	66 1f       	adc	r22, r22
    6d82:	77 1f       	adc	r23, r23
    6d84:	88 1f       	adc	r24, r24
    6d86:	99 1f       	adc	r25, r25
    6d88:	1a 94       	dec	r1
    6d8a:	69 f7       	brne	.-38     	; 0x6d66 <__udivmodsi4_loop>
    6d8c:	60 95       	com	r22
    6d8e:	70 95       	com	r23
    6d90:	80 95       	com	r24
    6d92:	90 95       	com	r25
    6d94:	9b 01       	movw	r18, r22
    6d96:	ac 01       	movw	r20, r24
    6d98:	bd 01       	movw	r22, r26
    6d9a:	cf 01       	movw	r24, r30
    6d9c:	08 95       	ret

00006d9e <__prologue_saves__>:
    6d9e:	2f 92       	push	r2
    6da0:	3f 92       	push	r3
    6da2:	4f 92       	push	r4
    6da4:	5f 92       	push	r5
    6da6:	6f 92       	push	r6
    6da8:	7f 92       	push	r7
    6daa:	8f 92       	push	r8
    6dac:	9f 92       	push	r9
    6dae:	af 92       	push	r10
    6db0:	bf 92       	push	r11
    6db2:	cf 92       	push	r12
    6db4:	df 92       	push	r13
    6db6:	ef 92       	push	r14
    6db8:	ff 92       	push	r15
    6dba:	0f 93       	push	r16
    6dbc:	1f 93       	push	r17
    6dbe:	cf 93       	push	r28
    6dc0:	df 93       	push	r29
    6dc2:	cd b7       	in	r28, 0x3d	; 61
    6dc4:	de b7       	in	r29, 0x3e	; 62
    6dc6:	ca 1b       	sub	r28, r26
    6dc8:	db 0b       	sbc	r29, r27
    6dca:	0f b6       	in	r0, 0x3f	; 63
    6dcc:	f8 94       	cli
    6dce:	de bf       	out	0x3e, r29	; 62
    6dd0:	0f be       	out	0x3f, r0	; 63
    6dd2:	cd bf       	out	0x3d, r28	; 61
    6dd4:	09 94       	ijmp

00006dd6 <__epilogue_restores__>:
    6dd6:	2a 88       	ldd	r2, Y+18	; 0x12
    6dd8:	39 88       	ldd	r3, Y+17	; 0x11
    6dda:	48 88       	ldd	r4, Y+16	; 0x10
    6ddc:	5f 84       	ldd	r5, Y+15	; 0x0f
    6dde:	6e 84       	ldd	r6, Y+14	; 0x0e
    6de0:	7d 84       	ldd	r7, Y+13	; 0x0d
    6de2:	8c 84       	ldd	r8, Y+12	; 0x0c
    6de4:	9b 84       	ldd	r9, Y+11	; 0x0b
    6de6:	aa 84       	ldd	r10, Y+10	; 0x0a
    6de8:	b9 84       	ldd	r11, Y+9	; 0x09
    6dea:	c8 84       	ldd	r12, Y+8	; 0x08
    6dec:	df 80       	ldd	r13, Y+7	; 0x07
    6dee:	ee 80       	ldd	r14, Y+6	; 0x06
    6df0:	fd 80       	ldd	r15, Y+5	; 0x05
    6df2:	0c 81       	ldd	r16, Y+4	; 0x04
    6df4:	1b 81       	ldd	r17, Y+3	; 0x03
    6df6:	aa 81       	ldd	r26, Y+2	; 0x02
    6df8:	b9 81       	ldd	r27, Y+1	; 0x01
    6dfa:	ce 0f       	add	r28, r30
    6dfc:	d1 1d       	adc	r29, r1
    6dfe:	0f b6       	in	r0, 0x3f	; 63
    6e00:	f8 94       	cli
    6e02:	de bf       	out	0x3e, r29	; 62
    6e04:	0f be       	out	0x3f, r0	; 63
    6e06:	cd bf       	out	0x3d, r28	; 61
    6e08:	ed 01       	movw	r28, r26
    6e0a:	08 95       	ret

00006e0c <__udivmodhi4>:
    6e0c:	aa 1b       	sub	r26, r26
    6e0e:	bb 1b       	sub	r27, r27
    6e10:	51 e1       	ldi	r21, 0x11	; 17
    6e12:	07 c0       	rjmp	.+14     	; 0x6e22 <__udivmodhi4_ep>

00006e14 <__udivmodhi4_loop>:
    6e14:	aa 1f       	adc	r26, r26
    6e16:	bb 1f       	adc	r27, r27
    6e18:	a6 17       	cp	r26, r22
    6e1a:	b7 07       	cpc	r27, r23
    6e1c:	10 f0       	brcs	.+4      	; 0x6e22 <__udivmodhi4_ep>
    6e1e:	a6 1b       	sub	r26, r22
    6e20:	b7 0b       	sbc	r27, r23

00006e22 <__udivmodhi4_ep>:
    6e22:	88 1f       	adc	r24, r24
    6e24:	99 1f       	adc	r25, r25
    6e26:	5a 95       	dec	r21
    6e28:	a9 f7       	brne	.-22     	; 0x6e14 <__udivmodhi4_loop>
    6e2a:	80 95       	com	r24
    6e2c:	90 95       	com	r25
    6e2e:	bc 01       	movw	r22, r24
    6e30:	cd 01       	movw	r24, r26
    6e32:	08 95       	ret

00006e34 <malloc>:
    6e34:	cf 93       	push	r28
    6e36:	df 93       	push	r29
    6e38:	bc 01       	movw	r22, r24
    6e3a:	82 30       	cpi	r24, 0x02	; 2
    6e3c:	91 05       	cpc	r25, r1
    6e3e:	10 f4       	brcc	.+4      	; 0x6e44 <malloc+0x10>
    6e40:	62 e0       	ldi	r22, 0x02	; 2
    6e42:	70 e0       	ldi	r23, 0x00	; 0
    6e44:	a0 91 44 08 	lds	r26, 0x0844
    6e48:	b0 91 45 08 	lds	r27, 0x0845
    6e4c:	ed 01       	movw	r28, r26
    6e4e:	e0 e0       	ldi	r30, 0x00	; 0
    6e50:	f0 e0       	ldi	r31, 0x00	; 0
    6e52:	40 e0       	ldi	r20, 0x00	; 0
    6e54:	50 e0       	ldi	r21, 0x00	; 0
    6e56:	21 c0       	rjmp	.+66     	; 0x6e9a <malloc+0x66>
    6e58:	88 81       	ld	r24, Y
    6e5a:	99 81       	ldd	r25, Y+1	; 0x01
    6e5c:	86 17       	cp	r24, r22
    6e5e:	97 07       	cpc	r25, r23
    6e60:	69 f4       	brne	.+26     	; 0x6e7c <malloc+0x48>
    6e62:	8a 81       	ldd	r24, Y+2	; 0x02
    6e64:	9b 81       	ldd	r25, Y+3	; 0x03
    6e66:	30 97       	sbiw	r30, 0x00	; 0
    6e68:	19 f0       	breq	.+6      	; 0x6e70 <malloc+0x3c>
    6e6a:	93 83       	std	Z+3, r25	; 0x03
    6e6c:	82 83       	std	Z+2, r24	; 0x02
    6e6e:	04 c0       	rjmp	.+8      	; 0x6e78 <malloc+0x44>
    6e70:	90 93 45 08 	sts	0x0845, r25
    6e74:	80 93 44 08 	sts	0x0844, r24
    6e78:	fe 01       	movw	r30, r28
    6e7a:	34 c0       	rjmp	.+104    	; 0x6ee4 <malloc+0xb0>
    6e7c:	68 17       	cp	r22, r24
    6e7e:	79 07       	cpc	r23, r25
    6e80:	38 f4       	brcc	.+14     	; 0x6e90 <malloc+0x5c>
    6e82:	41 15       	cp	r20, r1
    6e84:	51 05       	cpc	r21, r1
    6e86:	19 f0       	breq	.+6      	; 0x6e8e <malloc+0x5a>
    6e88:	84 17       	cp	r24, r20
    6e8a:	95 07       	cpc	r25, r21
    6e8c:	08 f4       	brcc	.+2      	; 0x6e90 <malloc+0x5c>
    6e8e:	ac 01       	movw	r20, r24
    6e90:	fe 01       	movw	r30, r28
    6e92:	8a 81       	ldd	r24, Y+2	; 0x02
    6e94:	9b 81       	ldd	r25, Y+3	; 0x03
    6e96:	9c 01       	movw	r18, r24
    6e98:	e9 01       	movw	r28, r18
    6e9a:	20 97       	sbiw	r28, 0x00	; 0
    6e9c:	e9 f6       	brne	.-70     	; 0x6e58 <malloc+0x24>
    6e9e:	41 15       	cp	r20, r1
    6ea0:	51 05       	cpc	r21, r1
    6ea2:	a9 f1       	breq	.+106    	; 0x6f0e <malloc+0xda>
    6ea4:	ca 01       	movw	r24, r20
    6ea6:	86 1b       	sub	r24, r22
    6ea8:	97 0b       	sbc	r25, r23
    6eaa:	04 97       	sbiw	r24, 0x04	; 4
    6eac:	08 f4       	brcc	.+2      	; 0x6eb0 <malloc+0x7c>
    6eae:	ba 01       	movw	r22, r20
    6eb0:	e0 e0       	ldi	r30, 0x00	; 0
    6eb2:	f0 e0       	ldi	r31, 0x00	; 0
    6eb4:	2a c0       	rjmp	.+84     	; 0x6f0a <malloc+0xd6>
    6eb6:	8d 91       	ld	r24, X+
    6eb8:	9c 91       	ld	r25, X
    6eba:	11 97       	sbiw	r26, 0x01	; 1
    6ebc:	84 17       	cp	r24, r20
    6ebe:	95 07       	cpc	r25, r21
    6ec0:	f9 f4       	brne	.+62     	; 0x6f00 <malloc+0xcc>
    6ec2:	64 17       	cp	r22, r20
    6ec4:	75 07       	cpc	r23, r21
    6ec6:	81 f4       	brne	.+32     	; 0x6ee8 <malloc+0xb4>
    6ec8:	12 96       	adiw	r26, 0x02	; 2
    6eca:	8d 91       	ld	r24, X+
    6ecc:	9c 91       	ld	r25, X
    6ece:	13 97       	sbiw	r26, 0x03	; 3
    6ed0:	30 97       	sbiw	r30, 0x00	; 0
    6ed2:	19 f0       	breq	.+6      	; 0x6eda <malloc+0xa6>
    6ed4:	93 83       	std	Z+3, r25	; 0x03
    6ed6:	82 83       	std	Z+2, r24	; 0x02
    6ed8:	04 c0       	rjmp	.+8      	; 0x6ee2 <malloc+0xae>
    6eda:	90 93 45 08 	sts	0x0845, r25
    6ede:	80 93 44 08 	sts	0x0844, r24
    6ee2:	fd 01       	movw	r30, r26
    6ee4:	32 96       	adiw	r30, 0x02	; 2
    6ee6:	4f c0       	rjmp	.+158    	; 0x6f86 <malloc+0x152>
    6ee8:	ca 01       	movw	r24, r20
    6eea:	86 1b       	sub	r24, r22
    6eec:	97 0b       	sbc	r25, r23
    6eee:	fd 01       	movw	r30, r26
    6ef0:	e8 0f       	add	r30, r24
    6ef2:	f9 1f       	adc	r31, r25
    6ef4:	61 93       	st	Z+, r22
    6ef6:	71 93       	st	Z+, r23
    6ef8:	02 97       	sbiw	r24, 0x02	; 2
    6efa:	8d 93       	st	X+, r24
    6efc:	9c 93       	st	X, r25
    6efe:	43 c0       	rjmp	.+134    	; 0x6f86 <malloc+0x152>
    6f00:	fd 01       	movw	r30, r26
    6f02:	82 81       	ldd	r24, Z+2	; 0x02
    6f04:	93 81       	ldd	r25, Z+3	; 0x03
    6f06:	9c 01       	movw	r18, r24
    6f08:	d9 01       	movw	r26, r18
    6f0a:	10 97       	sbiw	r26, 0x00	; 0
    6f0c:	a1 f6       	brne	.-88     	; 0x6eb6 <malloc+0x82>
    6f0e:	80 91 42 08 	lds	r24, 0x0842
    6f12:	90 91 43 08 	lds	r25, 0x0843
    6f16:	89 2b       	or	r24, r25
    6f18:	41 f4       	brne	.+16     	; 0x6f2a <malloc+0xf6>
    6f1a:	80 91 90 04 	lds	r24, 0x0490
    6f1e:	90 91 91 04 	lds	r25, 0x0491
    6f22:	90 93 43 08 	sts	0x0843, r25
    6f26:	80 93 42 08 	sts	0x0842, r24
    6f2a:	40 91 92 04 	lds	r20, 0x0492
    6f2e:	50 91 93 04 	lds	r21, 0x0493
    6f32:	41 15       	cp	r20, r1
    6f34:	51 05       	cpc	r21, r1
    6f36:	41 f4       	brne	.+16     	; 0x6f48 <malloc+0x114>
    6f38:	4d b7       	in	r20, 0x3d	; 61
    6f3a:	5e b7       	in	r21, 0x3e	; 62
    6f3c:	80 91 8e 04 	lds	r24, 0x048E
    6f40:	90 91 8f 04 	lds	r25, 0x048F
    6f44:	48 1b       	sub	r20, r24
    6f46:	59 0b       	sbc	r21, r25
    6f48:	20 91 42 08 	lds	r18, 0x0842
    6f4c:	30 91 43 08 	lds	r19, 0x0843
    6f50:	24 17       	cp	r18, r20
    6f52:	35 07       	cpc	r19, r21
    6f54:	b0 f4       	brcc	.+44     	; 0x6f82 <malloc+0x14e>
    6f56:	ca 01       	movw	r24, r20
    6f58:	82 1b       	sub	r24, r18
    6f5a:	93 0b       	sbc	r25, r19
    6f5c:	86 17       	cp	r24, r22
    6f5e:	97 07       	cpc	r25, r23
    6f60:	80 f0       	brcs	.+32     	; 0x6f82 <malloc+0x14e>
    6f62:	ab 01       	movw	r20, r22
    6f64:	4e 5f       	subi	r20, 0xFE	; 254
    6f66:	5f 4f       	sbci	r21, 0xFF	; 255
    6f68:	84 17       	cp	r24, r20
    6f6a:	95 07       	cpc	r25, r21
    6f6c:	50 f0       	brcs	.+20     	; 0x6f82 <malloc+0x14e>
    6f6e:	42 0f       	add	r20, r18
    6f70:	53 1f       	adc	r21, r19
    6f72:	50 93 43 08 	sts	0x0843, r21
    6f76:	40 93 42 08 	sts	0x0842, r20
    6f7a:	f9 01       	movw	r30, r18
    6f7c:	61 93       	st	Z+, r22
    6f7e:	71 93       	st	Z+, r23
    6f80:	02 c0       	rjmp	.+4      	; 0x6f86 <malloc+0x152>
    6f82:	e0 e0       	ldi	r30, 0x00	; 0
    6f84:	f0 e0       	ldi	r31, 0x00	; 0
    6f86:	cf 01       	movw	r24, r30
    6f88:	df 91       	pop	r29
    6f8a:	cf 91       	pop	r28
    6f8c:	08 95       	ret

00006f8e <free>:
    6f8e:	cf 93       	push	r28
    6f90:	df 93       	push	r29
    6f92:	00 97       	sbiw	r24, 0x00	; 0
    6f94:	09 f4       	brne	.+2      	; 0x6f98 <free+0xa>
    6f96:	50 c0       	rjmp	.+160    	; 0x7038 <free+0xaa>
    6f98:	ec 01       	movw	r28, r24
    6f9a:	22 97       	sbiw	r28, 0x02	; 2
    6f9c:	1b 82       	std	Y+3, r1	; 0x03
    6f9e:	1a 82       	std	Y+2, r1	; 0x02
    6fa0:	a0 91 44 08 	lds	r26, 0x0844
    6fa4:	b0 91 45 08 	lds	r27, 0x0845
    6fa8:	10 97       	sbiw	r26, 0x00	; 0
    6faa:	09 f1       	breq	.+66     	; 0x6fee <free+0x60>
    6fac:	40 e0       	ldi	r20, 0x00	; 0
    6fae:	50 e0       	ldi	r21, 0x00	; 0
    6fb0:	ac 17       	cp	r26, r28
    6fb2:	bd 07       	cpc	r27, r29
    6fb4:	08 f1       	brcs	.+66     	; 0x6ff8 <free+0x6a>
    6fb6:	bb 83       	std	Y+3, r27	; 0x03
    6fb8:	aa 83       	std	Y+2, r26	; 0x02
    6fba:	fe 01       	movw	r30, r28
    6fbc:	21 91       	ld	r18, Z+
    6fbe:	31 91       	ld	r19, Z+
    6fc0:	e2 0f       	add	r30, r18
    6fc2:	f3 1f       	adc	r31, r19
    6fc4:	ae 17       	cp	r26, r30
    6fc6:	bf 07       	cpc	r27, r31
    6fc8:	79 f4       	brne	.+30     	; 0x6fe8 <free+0x5a>
    6fca:	8d 91       	ld	r24, X+
    6fcc:	9c 91       	ld	r25, X
    6fce:	11 97       	sbiw	r26, 0x01	; 1
    6fd0:	28 0f       	add	r18, r24
    6fd2:	39 1f       	adc	r19, r25
    6fd4:	2e 5f       	subi	r18, 0xFE	; 254
    6fd6:	3f 4f       	sbci	r19, 0xFF	; 255
    6fd8:	39 83       	std	Y+1, r19	; 0x01
    6fda:	28 83       	st	Y, r18
    6fdc:	12 96       	adiw	r26, 0x02	; 2
    6fde:	8d 91       	ld	r24, X+
    6fe0:	9c 91       	ld	r25, X
    6fe2:	13 97       	sbiw	r26, 0x03	; 3
    6fe4:	9b 83       	std	Y+3, r25	; 0x03
    6fe6:	8a 83       	std	Y+2, r24	; 0x02
    6fe8:	41 15       	cp	r20, r1
    6fea:	51 05       	cpc	r21, r1
    6fec:	71 f4       	brne	.+28     	; 0x700a <free+0x7c>
    6fee:	d0 93 45 08 	sts	0x0845, r29
    6ff2:	c0 93 44 08 	sts	0x0844, r28
    6ff6:	20 c0       	rjmp	.+64     	; 0x7038 <free+0xaa>
    6ff8:	12 96       	adiw	r26, 0x02	; 2
    6ffa:	8d 91       	ld	r24, X+
    6ffc:	9c 91       	ld	r25, X
    6ffe:	13 97       	sbiw	r26, 0x03	; 3
    7000:	ad 01       	movw	r20, r26
    7002:	00 97       	sbiw	r24, 0x00	; 0
    7004:	11 f0       	breq	.+4      	; 0x700a <free+0x7c>
    7006:	dc 01       	movw	r26, r24
    7008:	d3 cf       	rjmp	.-90     	; 0x6fb0 <free+0x22>
    700a:	fa 01       	movw	r30, r20
    700c:	d3 83       	std	Z+3, r29	; 0x03
    700e:	c2 83       	std	Z+2, r28	; 0x02
    7010:	21 91       	ld	r18, Z+
    7012:	31 91       	ld	r19, Z+
    7014:	e2 0f       	add	r30, r18
    7016:	f3 1f       	adc	r31, r19
    7018:	ce 17       	cp	r28, r30
    701a:	df 07       	cpc	r29, r31
    701c:	69 f4       	brne	.+26     	; 0x7038 <free+0xaa>
    701e:	88 81       	ld	r24, Y
    7020:	99 81       	ldd	r25, Y+1	; 0x01
    7022:	28 0f       	add	r18, r24
    7024:	39 1f       	adc	r19, r25
    7026:	2e 5f       	subi	r18, 0xFE	; 254
    7028:	3f 4f       	sbci	r19, 0xFF	; 255
    702a:	fa 01       	movw	r30, r20
    702c:	31 83       	std	Z+1, r19	; 0x01
    702e:	20 83       	st	Z, r18
    7030:	8a 81       	ldd	r24, Y+2	; 0x02
    7032:	9b 81       	ldd	r25, Y+3	; 0x03
    7034:	93 83       	std	Z+3, r25	; 0x03
    7036:	82 83       	std	Z+2, r24	; 0x02
    7038:	df 91       	pop	r29
    703a:	cf 91       	pop	r28
    703c:	08 95       	ret

0000703e <do_rand>:
    703e:	a0 e0       	ldi	r26, 0x00	; 0
    7040:	b0 e0       	ldi	r27, 0x00	; 0
    7042:	e4 e2       	ldi	r30, 0x24	; 36
    7044:	f8 e3       	ldi	r31, 0x38	; 56
    7046:	b3 ce       	rjmp	.-666    	; 0x6dae <__prologue_saves__+0x10>
    7048:	ec 01       	movw	r28, r24
    704a:	a8 80       	ld	r10, Y
    704c:	b9 80       	ldd	r11, Y+1	; 0x01
    704e:	ca 80       	ldd	r12, Y+2	; 0x02
    7050:	db 80       	ldd	r13, Y+3	; 0x03
    7052:	a1 14       	cp	r10, r1
    7054:	b1 04       	cpc	r11, r1
    7056:	c1 04       	cpc	r12, r1
    7058:	d1 04       	cpc	r13, r1
    705a:	41 f4       	brne	.+16     	; 0x706c <do_rand+0x2e>
    705c:	84 e2       	ldi	r24, 0x24	; 36
    705e:	a8 2e       	mov	r10, r24
    7060:	89 ed       	ldi	r24, 0xD9	; 217
    7062:	b8 2e       	mov	r11, r24
    7064:	8b e5       	ldi	r24, 0x5B	; 91
    7066:	c8 2e       	mov	r12, r24
    7068:	87 e0       	ldi	r24, 0x07	; 7
    706a:	d8 2e       	mov	r13, r24
    706c:	c6 01       	movw	r24, r12
    706e:	b5 01       	movw	r22, r10
    7070:	2d e1       	ldi	r18, 0x1D	; 29
    7072:	33 ef       	ldi	r19, 0xF3	; 243
    7074:	41 e0       	ldi	r20, 0x01	; 1
    7076:	50 e0       	ldi	r21, 0x00	; 0
    7078:	fa d1       	rcall	.+1012   	; 0x746e <__divmodsi4>
    707a:	27 ea       	ldi	r18, 0xA7	; 167
    707c:	31 e4       	ldi	r19, 0x41	; 65
    707e:	40 e0       	ldi	r20, 0x00	; 0
    7080:	50 e0       	ldi	r21, 0x00	; 0
    7082:	39 de       	rcall	.-910    	; 0x6cf6 <__mulsi3>
    7084:	7b 01       	movw	r14, r22
    7086:	8c 01       	movw	r16, r24
    7088:	c6 01       	movw	r24, r12
    708a:	b5 01       	movw	r22, r10
    708c:	2d e1       	ldi	r18, 0x1D	; 29
    708e:	33 ef       	ldi	r19, 0xF3	; 243
    7090:	41 e0       	ldi	r20, 0x01	; 1
    7092:	50 e0       	ldi	r21, 0x00	; 0
    7094:	ec d1       	rcall	.+984    	; 0x746e <__divmodsi4>
    7096:	ca 01       	movw	r24, r20
    7098:	b9 01       	movw	r22, r18
    709a:	2c ee       	ldi	r18, 0xEC	; 236
    709c:	34 ef       	ldi	r19, 0xF4	; 244
    709e:	4f ef       	ldi	r20, 0xFF	; 255
    70a0:	5f ef       	ldi	r21, 0xFF	; 255
    70a2:	29 de       	rcall	.-942    	; 0x6cf6 <__mulsi3>
    70a4:	6e 0d       	add	r22, r14
    70a6:	7f 1d       	adc	r23, r15
    70a8:	80 1f       	adc	r24, r16
    70aa:	91 1f       	adc	r25, r17
    70ac:	97 ff       	sbrs	r25, 7
    70ae:	04 c0       	rjmp	.+8      	; 0x70b8 <do_rand+0x7a>
    70b0:	61 50       	subi	r22, 0x01	; 1
    70b2:	70 40       	sbci	r23, 0x00	; 0
    70b4:	80 40       	sbci	r24, 0x00	; 0
    70b6:	90 48       	sbci	r25, 0x80	; 128
    70b8:	68 83       	st	Y, r22
    70ba:	79 83       	std	Y+1, r23	; 0x01
    70bc:	8a 83       	std	Y+2, r24	; 0x02
    70be:	9b 83       	std	Y+3, r25	; 0x03
    70c0:	9b 01       	movw	r18, r22
    70c2:	3f 77       	andi	r19, 0x7F	; 127
    70c4:	c9 01       	movw	r24, r18
    70c6:	cd b7       	in	r28, 0x3d	; 61
    70c8:	de b7       	in	r29, 0x3e	; 62
    70ca:	ea e0       	ldi	r30, 0x0A	; 10
    70cc:	8c ce       	rjmp	.-744    	; 0x6de6 <__epilogue_restores__+0x10>

000070ce <rand_r>:
    70ce:	b7 df       	rcall	.-146    	; 0x703e <do_rand>
    70d0:	08 95       	ret

000070d2 <rand>:
    70d2:	84 e9       	ldi	r24, 0x94	; 148
    70d4:	94 e0       	ldi	r25, 0x04	; 4
    70d6:	b3 df       	rcall	.-154    	; 0x703e <do_rand>
    70d8:	08 95       	ret

000070da <srand>:
    70da:	a0 e0       	ldi	r26, 0x00	; 0
    70dc:	b0 e0       	ldi	r27, 0x00	; 0
    70de:	80 93 94 04 	sts	0x0494, r24
    70e2:	90 93 95 04 	sts	0x0495, r25
    70e6:	a0 93 96 04 	sts	0x0496, r26
    70ea:	b0 93 97 04 	sts	0x0497, r27
    70ee:	08 95       	ret

000070f0 <__ftoa_engine>:
    70f0:	28 30       	cpi	r18, 0x08	; 8
    70f2:	08 f0       	brcs	.+2      	; 0x70f6 <__ftoa_engine+0x6>
    70f4:	27 e0       	ldi	r18, 0x07	; 7
    70f6:	33 27       	eor	r19, r19
    70f8:	da 01       	movw	r26, r20
    70fa:	99 0f       	add	r25, r25
    70fc:	31 1d       	adc	r19, r1
    70fe:	87 fd       	sbrc	r24, 7
    7100:	91 60       	ori	r25, 0x01	; 1
    7102:	00 96       	adiw	r24, 0x00	; 0
    7104:	61 05       	cpc	r22, r1
    7106:	71 05       	cpc	r23, r1
    7108:	39 f4       	brne	.+14     	; 0x7118 <__ftoa_engine+0x28>
    710a:	32 60       	ori	r19, 0x02	; 2
    710c:	2e 5f       	subi	r18, 0xFE	; 254
    710e:	3d 93       	st	X+, r19
    7110:	30 e3       	ldi	r19, 0x30	; 48
    7112:	2a 95       	dec	r18
    7114:	e1 f7       	brne	.-8      	; 0x710e <__ftoa_engine+0x1e>
    7116:	08 95       	ret
    7118:	9f 3f       	cpi	r25, 0xFF	; 255
    711a:	30 f0       	brcs	.+12     	; 0x7128 <__ftoa_engine+0x38>
    711c:	80 38       	cpi	r24, 0x80	; 128
    711e:	71 05       	cpc	r23, r1
    7120:	61 05       	cpc	r22, r1
    7122:	09 f0       	breq	.+2      	; 0x7126 <__ftoa_engine+0x36>
    7124:	3c 5f       	subi	r19, 0xFC	; 252
    7126:	3c 5f       	subi	r19, 0xFC	; 252
    7128:	3d 93       	st	X+, r19
    712a:	91 30       	cpi	r25, 0x01	; 1
    712c:	08 f0       	brcs	.+2      	; 0x7130 <__ftoa_engine+0x40>
    712e:	80 68       	ori	r24, 0x80	; 128
    7130:	91 1d       	adc	r25, r1
    7132:	df 93       	push	r29
    7134:	cf 93       	push	r28
    7136:	1f 93       	push	r17
    7138:	0f 93       	push	r16
    713a:	ff 92       	push	r15
    713c:	ef 92       	push	r14
    713e:	19 2f       	mov	r17, r25
    7140:	98 7f       	andi	r25, 0xF8	; 248
    7142:	96 95       	lsr	r25
    7144:	e9 2f       	mov	r30, r25
    7146:	96 95       	lsr	r25
    7148:	96 95       	lsr	r25
    714a:	e9 0f       	add	r30, r25
    714c:	ff 27       	eor	r31, r31
    714e:	ef 53       	subi	r30, 0x3F	; 63
    7150:	fa 4f       	sbci	r31, 0xFA	; 250
    7152:	99 27       	eor	r25, r25
    7154:	33 27       	eor	r19, r19
    7156:	ee 24       	eor	r14, r14
    7158:	ff 24       	eor	r15, r15
    715a:	a7 01       	movw	r20, r14
    715c:	e7 01       	movw	r28, r14
    715e:	05 90       	lpm	r0, Z+
    7160:	08 94       	sec
    7162:	07 94       	ror	r0
    7164:	28 f4       	brcc	.+10     	; 0x7170 <__ftoa_engine+0x80>
    7166:	36 0f       	add	r19, r22
    7168:	e7 1e       	adc	r14, r23
    716a:	f8 1e       	adc	r15, r24
    716c:	49 1f       	adc	r20, r25
    716e:	51 1d       	adc	r21, r1
    7170:	66 0f       	add	r22, r22
    7172:	77 1f       	adc	r23, r23
    7174:	88 1f       	adc	r24, r24
    7176:	99 1f       	adc	r25, r25
    7178:	06 94       	lsr	r0
    717a:	a1 f7       	brne	.-24     	; 0x7164 <__ftoa_engine+0x74>
    717c:	05 90       	lpm	r0, Z+
    717e:	07 94       	ror	r0
    7180:	28 f4       	brcc	.+10     	; 0x718c <__ftoa_engine+0x9c>
    7182:	e7 0e       	add	r14, r23
    7184:	f8 1e       	adc	r15, r24
    7186:	49 1f       	adc	r20, r25
    7188:	56 1f       	adc	r21, r22
    718a:	c1 1d       	adc	r28, r1
    718c:	77 0f       	add	r23, r23
    718e:	88 1f       	adc	r24, r24
    7190:	99 1f       	adc	r25, r25
    7192:	66 1f       	adc	r22, r22
    7194:	06 94       	lsr	r0
    7196:	a1 f7       	brne	.-24     	; 0x7180 <__ftoa_engine+0x90>
    7198:	05 90       	lpm	r0, Z+
    719a:	07 94       	ror	r0
    719c:	28 f4       	brcc	.+10     	; 0x71a8 <__ftoa_engine+0xb8>
    719e:	f8 0e       	add	r15, r24
    71a0:	49 1f       	adc	r20, r25
    71a2:	56 1f       	adc	r21, r22
    71a4:	c7 1f       	adc	r28, r23
    71a6:	d1 1d       	adc	r29, r1
    71a8:	88 0f       	add	r24, r24
    71aa:	99 1f       	adc	r25, r25
    71ac:	66 1f       	adc	r22, r22
    71ae:	77 1f       	adc	r23, r23
    71b0:	06 94       	lsr	r0
    71b2:	a1 f7       	brne	.-24     	; 0x719c <__ftoa_engine+0xac>
    71b4:	05 90       	lpm	r0, Z+
    71b6:	07 94       	ror	r0
    71b8:	20 f4       	brcc	.+8      	; 0x71c2 <__ftoa_engine+0xd2>
    71ba:	49 0f       	add	r20, r25
    71bc:	56 1f       	adc	r21, r22
    71be:	c7 1f       	adc	r28, r23
    71c0:	d8 1f       	adc	r29, r24
    71c2:	99 0f       	add	r25, r25
    71c4:	66 1f       	adc	r22, r22
    71c6:	77 1f       	adc	r23, r23
    71c8:	88 1f       	adc	r24, r24
    71ca:	06 94       	lsr	r0
    71cc:	a9 f7       	brne	.-22     	; 0x71b8 <__ftoa_engine+0xc8>
    71ce:	84 91       	lpm	r24, Z+
    71d0:	10 95       	com	r17
    71d2:	17 70       	andi	r17, 0x07	; 7
    71d4:	41 f0       	breq	.+16     	; 0x71e6 <__ftoa_engine+0xf6>
    71d6:	d6 95       	lsr	r29
    71d8:	c7 95       	ror	r28
    71da:	57 95       	ror	r21
    71dc:	47 95       	ror	r20
    71de:	f7 94       	ror	r15
    71e0:	e7 94       	ror	r14
    71e2:	1a 95       	dec	r17
    71e4:	c1 f7       	brne	.-16     	; 0x71d6 <__ftoa_engine+0xe6>
    71e6:	e7 e6       	ldi	r30, 0x67	; 103
    71e8:	f5 e0       	ldi	r31, 0x05	; 5
    71ea:	68 94       	set
    71ec:	15 90       	lpm	r1, Z+
    71ee:	15 91       	lpm	r17, Z+
    71f0:	35 91       	lpm	r19, Z+
    71f2:	65 91       	lpm	r22, Z+
    71f4:	95 91       	lpm	r25, Z+
    71f6:	05 90       	lpm	r0, Z+
    71f8:	7f e2       	ldi	r23, 0x2F	; 47
    71fa:	73 95       	inc	r23
    71fc:	e1 18       	sub	r14, r1
    71fe:	f1 0a       	sbc	r15, r17
    7200:	43 0b       	sbc	r20, r19
    7202:	56 0b       	sbc	r21, r22
    7204:	c9 0b       	sbc	r28, r25
    7206:	d0 09       	sbc	r29, r0
    7208:	c0 f7       	brcc	.-16     	; 0x71fa <__ftoa_engine+0x10a>
    720a:	e1 0c       	add	r14, r1
    720c:	f1 1e       	adc	r15, r17
    720e:	43 1f       	adc	r20, r19
    7210:	56 1f       	adc	r21, r22
    7212:	c9 1f       	adc	r28, r25
    7214:	d0 1d       	adc	r29, r0
    7216:	7e f4       	brtc	.+30     	; 0x7236 <__ftoa_engine+0x146>
    7218:	70 33       	cpi	r23, 0x30	; 48
    721a:	11 f4       	brne	.+4      	; 0x7220 <__ftoa_engine+0x130>
    721c:	8a 95       	dec	r24
    721e:	e6 cf       	rjmp	.-52     	; 0x71ec <__ftoa_engine+0xfc>
    7220:	e8 94       	clt
    7222:	01 50       	subi	r16, 0x01	; 1
    7224:	30 f0       	brcs	.+12     	; 0x7232 <__ftoa_engine+0x142>
    7226:	08 0f       	add	r16, r24
    7228:	0a f4       	brpl	.+2      	; 0x722c <__ftoa_engine+0x13c>
    722a:	00 27       	eor	r16, r16
    722c:	02 17       	cp	r16, r18
    722e:	08 f4       	brcc	.+2      	; 0x7232 <__ftoa_engine+0x142>
    7230:	20 2f       	mov	r18, r16
    7232:	23 95       	inc	r18
    7234:	02 2f       	mov	r16, r18
    7236:	7a 33       	cpi	r23, 0x3A	; 58
    7238:	28 f0       	brcs	.+10     	; 0x7244 <__ftoa_engine+0x154>
    723a:	79 e3       	ldi	r23, 0x39	; 57
    723c:	7d 93       	st	X+, r23
    723e:	2a 95       	dec	r18
    7240:	e9 f7       	brne	.-6      	; 0x723c <__ftoa_engine+0x14c>
    7242:	10 c0       	rjmp	.+32     	; 0x7264 <__ftoa_engine+0x174>
    7244:	7d 93       	st	X+, r23
    7246:	2a 95       	dec	r18
    7248:	89 f6       	brne	.-94     	; 0x71ec <__ftoa_engine+0xfc>
    724a:	06 94       	lsr	r0
    724c:	97 95       	ror	r25
    724e:	67 95       	ror	r22
    7250:	37 95       	ror	r19
    7252:	17 95       	ror	r17
    7254:	17 94       	ror	r1
    7256:	e1 18       	sub	r14, r1
    7258:	f1 0a       	sbc	r15, r17
    725a:	43 0b       	sbc	r20, r19
    725c:	56 0b       	sbc	r21, r22
    725e:	c9 0b       	sbc	r28, r25
    7260:	d0 09       	sbc	r29, r0
    7262:	98 f0       	brcs	.+38     	; 0x728a <__ftoa_engine+0x19a>
    7264:	23 95       	inc	r18
    7266:	7e 91       	ld	r23, -X
    7268:	73 95       	inc	r23
    726a:	7a 33       	cpi	r23, 0x3A	; 58
    726c:	08 f0       	brcs	.+2      	; 0x7270 <__ftoa_engine+0x180>
    726e:	70 e3       	ldi	r23, 0x30	; 48
    7270:	7c 93       	st	X, r23
    7272:	20 13       	cpse	r18, r16
    7274:	b8 f7       	brcc	.-18     	; 0x7264 <__ftoa_engine+0x174>
    7276:	7e 91       	ld	r23, -X
    7278:	70 61       	ori	r23, 0x10	; 16
    727a:	7d 93       	st	X+, r23
    727c:	30 f0       	brcs	.+12     	; 0x728a <__ftoa_engine+0x19a>
    727e:	83 95       	inc	r24
    7280:	71 e3       	ldi	r23, 0x31	; 49
    7282:	7d 93       	st	X+, r23
    7284:	70 e3       	ldi	r23, 0x30	; 48
    7286:	2a 95       	dec	r18
    7288:	e1 f7       	brne	.-8      	; 0x7282 <__ftoa_engine+0x192>
    728a:	11 24       	eor	r1, r1
    728c:	ef 90       	pop	r14
    728e:	ff 90       	pop	r15
    7290:	0f 91       	pop	r16
    7292:	1f 91       	pop	r17
    7294:	cf 91       	pop	r28
    7296:	df 91       	pop	r29
    7298:	99 27       	eor	r25, r25
    729a:	87 fd       	sbrc	r24, 7
    729c:	90 95       	com	r25
    729e:	08 95       	ret

000072a0 <strnlen_P>:
    72a0:	fc 01       	movw	r30, r24
    72a2:	05 90       	lpm	r0, Z+
    72a4:	61 50       	subi	r22, 0x01	; 1
    72a6:	70 40       	sbci	r23, 0x00	; 0
    72a8:	01 10       	cpse	r0, r1
    72aa:	d8 f7       	brcc	.-10     	; 0x72a2 <strnlen_P+0x2>
    72ac:	80 95       	com	r24
    72ae:	90 95       	com	r25
    72b0:	8e 0f       	add	r24, r30
    72b2:	9f 1f       	adc	r25, r31
    72b4:	08 95       	ret

000072b6 <strnlen>:
    72b6:	fc 01       	movw	r30, r24
    72b8:	61 50       	subi	r22, 0x01	; 1
    72ba:	70 40       	sbci	r23, 0x00	; 0
    72bc:	01 90       	ld	r0, Z+
    72be:	01 10       	cpse	r0, r1
    72c0:	d8 f7       	brcc	.-10     	; 0x72b8 <strnlen+0x2>
    72c2:	80 95       	com	r24
    72c4:	90 95       	com	r25
    72c6:	8e 0f       	add	r24, r30
    72c8:	9f 1f       	adc	r25, r31
    72ca:	08 95       	ret

000072cc <fputc>:
    72cc:	0f 93       	push	r16
    72ce:	1f 93       	push	r17
    72d0:	cf 93       	push	r28
    72d2:	df 93       	push	r29
    72d4:	8c 01       	movw	r16, r24
    72d6:	eb 01       	movw	r28, r22
    72d8:	8b 81       	ldd	r24, Y+3	; 0x03
    72da:	81 ff       	sbrs	r24, 1
    72dc:	1b c0       	rjmp	.+54     	; 0x7314 <fputc+0x48>
    72de:	82 ff       	sbrs	r24, 2
    72e0:	0d c0       	rjmp	.+26     	; 0x72fc <fputc+0x30>
    72e2:	2e 81       	ldd	r18, Y+6	; 0x06
    72e4:	3f 81       	ldd	r19, Y+7	; 0x07
    72e6:	8c 81       	ldd	r24, Y+4	; 0x04
    72e8:	9d 81       	ldd	r25, Y+5	; 0x05
    72ea:	28 17       	cp	r18, r24
    72ec:	39 07       	cpc	r19, r25
    72ee:	64 f4       	brge	.+24     	; 0x7308 <fputc+0x3c>
    72f0:	e8 81       	ld	r30, Y
    72f2:	f9 81       	ldd	r31, Y+1	; 0x01
    72f4:	01 93       	st	Z+, r16
    72f6:	f9 83       	std	Y+1, r31	; 0x01
    72f8:	e8 83       	st	Y, r30
    72fa:	06 c0       	rjmp	.+12     	; 0x7308 <fputc+0x3c>
    72fc:	e8 85       	ldd	r30, Y+8	; 0x08
    72fe:	f9 85       	ldd	r31, Y+9	; 0x09
    7300:	80 2f       	mov	r24, r16
    7302:	09 95       	icall
    7304:	89 2b       	or	r24, r25
    7306:	31 f4       	brne	.+12     	; 0x7314 <fputc+0x48>
    7308:	8e 81       	ldd	r24, Y+6	; 0x06
    730a:	9f 81       	ldd	r25, Y+7	; 0x07
    730c:	01 96       	adiw	r24, 0x01	; 1
    730e:	9f 83       	std	Y+7, r25	; 0x07
    7310:	8e 83       	std	Y+6, r24	; 0x06
    7312:	02 c0       	rjmp	.+4      	; 0x7318 <fputc+0x4c>
    7314:	0f ef       	ldi	r16, 0xFF	; 255
    7316:	1f ef       	ldi	r17, 0xFF	; 255
    7318:	c8 01       	movw	r24, r16
    731a:	df 91       	pop	r29
    731c:	cf 91       	pop	r28
    731e:	1f 91       	pop	r17
    7320:	0f 91       	pop	r16
    7322:	08 95       	ret

00007324 <printf>:
    7324:	a0 e0       	ldi	r26, 0x00	; 0
    7326:	b0 e0       	ldi	r27, 0x00	; 0
    7328:	e7 e9       	ldi	r30, 0x97	; 151
    732a:	f9 e3       	ldi	r31, 0x39	; 57
    732c:	48 cd       	rjmp	.-1392   	; 0x6dbe <__prologue_saves__+0x20>
    732e:	fe 01       	movw	r30, r28
    7330:	35 96       	adiw	r30, 0x05	; 5
    7332:	61 91       	ld	r22, Z+
    7334:	71 91       	ld	r23, Z+
    7336:	80 91 48 08 	lds	r24, 0x0848
    733a:	90 91 49 08 	lds	r25, 0x0849
    733e:	af 01       	movw	r20, r30
    7340:	72 d9       	rcall	.-3356   	; 0x6626 <vfprintf>
    7342:	20 96       	adiw	r28, 0x00	; 0
    7344:	e2 e0       	ldi	r30, 0x02	; 2
    7346:	57 cd       	rjmp	.-1362   	; 0x6df6 <__epilogue_restores__+0x20>

00007348 <puts>:
    7348:	0f 93       	push	r16
    734a:	1f 93       	push	r17
    734c:	cf 93       	push	r28
    734e:	df 93       	push	r29
    7350:	8c 01       	movw	r16, r24
    7352:	e0 91 48 08 	lds	r30, 0x0848
    7356:	f0 91 49 08 	lds	r31, 0x0849
    735a:	83 81       	ldd	r24, Z+3	; 0x03
    735c:	81 ff       	sbrs	r24, 1
    735e:	21 c0       	rjmp	.+66     	; 0x73a2 <puts+0x5a>
    7360:	c0 e0       	ldi	r28, 0x00	; 0
    7362:	d0 e0       	ldi	r29, 0x00	; 0
    7364:	0d c0       	rjmp	.+26     	; 0x7380 <puts+0x38>
    7366:	e0 91 48 08 	lds	r30, 0x0848
    736a:	f0 91 49 08 	lds	r31, 0x0849
    736e:	20 85       	ldd	r18, Z+8	; 0x08
    7370:	31 85       	ldd	r19, Z+9	; 0x09
    7372:	bf 01       	movw	r22, r30
    7374:	f9 01       	movw	r30, r18
    7376:	09 95       	icall
    7378:	89 2b       	or	r24, r25
    737a:	11 f0       	breq	.+4      	; 0x7380 <puts+0x38>
    737c:	cf ef       	ldi	r28, 0xFF	; 255
    737e:	df ef       	ldi	r29, 0xFF	; 255
    7380:	f8 01       	movw	r30, r16
    7382:	81 91       	ld	r24, Z+
    7384:	8f 01       	movw	r16, r30
    7386:	88 23       	and	r24, r24
    7388:	71 f7       	brne	.-36     	; 0x7366 <puts+0x1e>
    738a:	e0 91 48 08 	lds	r30, 0x0848
    738e:	f0 91 49 08 	lds	r31, 0x0849
    7392:	20 85       	ldd	r18, Z+8	; 0x08
    7394:	31 85       	ldd	r19, Z+9	; 0x09
    7396:	8a e0       	ldi	r24, 0x0A	; 10
    7398:	bf 01       	movw	r22, r30
    739a:	f9 01       	movw	r30, r18
    739c:	09 95       	icall
    739e:	89 2b       	or	r24, r25
    73a0:	11 f0       	breq	.+4      	; 0x73a6 <puts+0x5e>
    73a2:	cf ef       	ldi	r28, 0xFF	; 255
    73a4:	df ef       	ldi	r29, 0xFF	; 255
    73a6:	ce 01       	movw	r24, r28
    73a8:	df 91       	pop	r29
    73aa:	cf 91       	pop	r28
    73ac:	1f 91       	pop	r17
    73ae:	0f 91       	pop	r16
    73b0:	08 95       	ret

000073b2 <__ultoa_invert>:
    73b2:	fa 01       	movw	r30, r20
    73b4:	aa 27       	eor	r26, r26
    73b6:	28 30       	cpi	r18, 0x08	; 8
    73b8:	51 f1       	breq	.+84     	; 0x740e <__ultoa_invert+0x5c>
    73ba:	20 31       	cpi	r18, 0x10	; 16
    73bc:	81 f1       	breq	.+96     	; 0x741e <__ultoa_invert+0x6c>
    73be:	e8 94       	clt
    73c0:	6f 93       	push	r22
    73c2:	6e 7f       	andi	r22, 0xFE	; 254
    73c4:	6e 5f       	subi	r22, 0xFE	; 254
    73c6:	7f 4f       	sbci	r23, 0xFF	; 255
    73c8:	8f 4f       	sbci	r24, 0xFF	; 255
    73ca:	9f 4f       	sbci	r25, 0xFF	; 255
    73cc:	af 4f       	sbci	r26, 0xFF	; 255
    73ce:	b1 e0       	ldi	r27, 0x01	; 1
    73d0:	3e d0       	rcall	.+124    	; 0x744e <__ultoa_invert+0x9c>
    73d2:	b4 e0       	ldi	r27, 0x04	; 4
    73d4:	3c d0       	rcall	.+120    	; 0x744e <__ultoa_invert+0x9c>
    73d6:	67 0f       	add	r22, r23
    73d8:	78 1f       	adc	r23, r24
    73da:	89 1f       	adc	r24, r25
    73dc:	9a 1f       	adc	r25, r26
    73de:	a1 1d       	adc	r26, r1
    73e0:	68 0f       	add	r22, r24
    73e2:	79 1f       	adc	r23, r25
    73e4:	8a 1f       	adc	r24, r26
    73e6:	91 1d       	adc	r25, r1
    73e8:	a1 1d       	adc	r26, r1
    73ea:	6a 0f       	add	r22, r26
    73ec:	71 1d       	adc	r23, r1
    73ee:	81 1d       	adc	r24, r1
    73f0:	91 1d       	adc	r25, r1
    73f2:	a1 1d       	adc	r26, r1
    73f4:	20 d0       	rcall	.+64     	; 0x7436 <__ultoa_invert+0x84>
    73f6:	09 f4       	brne	.+2      	; 0x73fa <__ultoa_invert+0x48>
    73f8:	68 94       	set
    73fa:	3f 91       	pop	r19
    73fc:	2a e0       	ldi	r18, 0x0A	; 10
    73fe:	26 9f       	mul	r18, r22
    7400:	11 24       	eor	r1, r1
    7402:	30 19       	sub	r19, r0
    7404:	30 5d       	subi	r19, 0xD0	; 208
    7406:	31 93       	st	Z+, r19
    7408:	de f6       	brtc	.-74     	; 0x73c0 <__ultoa_invert+0xe>
    740a:	cf 01       	movw	r24, r30
    740c:	08 95       	ret
    740e:	46 2f       	mov	r20, r22
    7410:	47 70       	andi	r20, 0x07	; 7
    7412:	40 5d       	subi	r20, 0xD0	; 208
    7414:	41 93       	st	Z+, r20
    7416:	b3 e0       	ldi	r27, 0x03	; 3
    7418:	0f d0       	rcall	.+30     	; 0x7438 <__ultoa_invert+0x86>
    741a:	c9 f7       	brne	.-14     	; 0x740e <__ultoa_invert+0x5c>
    741c:	f6 cf       	rjmp	.-20     	; 0x740a <__ultoa_invert+0x58>
    741e:	46 2f       	mov	r20, r22
    7420:	4f 70       	andi	r20, 0x0F	; 15
    7422:	40 5d       	subi	r20, 0xD0	; 208
    7424:	4a 33       	cpi	r20, 0x3A	; 58
    7426:	18 f0       	brcs	.+6      	; 0x742e <__ultoa_invert+0x7c>
    7428:	49 5d       	subi	r20, 0xD9	; 217
    742a:	31 fd       	sbrc	r19, 1
    742c:	40 52       	subi	r20, 0x20	; 32
    742e:	41 93       	st	Z+, r20
    7430:	02 d0       	rcall	.+4      	; 0x7436 <__ultoa_invert+0x84>
    7432:	a9 f7       	brne	.-22     	; 0x741e <__ultoa_invert+0x6c>
    7434:	ea cf       	rjmp	.-44     	; 0x740a <__ultoa_invert+0x58>
    7436:	b4 e0       	ldi	r27, 0x04	; 4
    7438:	a6 95       	lsr	r26
    743a:	97 95       	ror	r25
    743c:	87 95       	ror	r24
    743e:	77 95       	ror	r23
    7440:	67 95       	ror	r22
    7442:	ba 95       	dec	r27
    7444:	c9 f7       	brne	.-14     	; 0x7438 <__ultoa_invert+0x86>
    7446:	00 97       	sbiw	r24, 0x00	; 0
    7448:	61 05       	cpc	r22, r1
    744a:	71 05       	cpc	r23, r1
    744c:	08 95       	ret
    744e:	9b 01       	movw	r18, r22
    7450:	ac 01       	movw	r20, r24
    7452:	0a 2e       	mov	r0, r26
    7454:	06 94       	lsr	r0
    7456:	57 95       	ror	r21
    7458:	47 95       	ror	r20
    745a:	37 95       	ror	r19
    745c:	27 95       	ror	r18
    745e:	ba 95       	dec	r27
    7460:	c9 f7       	brne	.-14     	; 0x7454 <__ultoa_invert+0xa2>
    7462:	62 0f       	add	r22, r18
    7464:	73 1f       	adc	r23, r19
    7466:	84 1f       	adc	r24, r20
    7468:	95 1f       	adc	r25, r21
    746a:	a0 1d       	adc	r26, r0
    746c:	08 95       	ret

0000746e <__divmodsi4>:
    746e:	97 fb       	bst	r25, 7
    7470:	09 2e       	mov	r0, r25
    7472:	05 26       	eor	r0, r21
    7474:	0e d0       	rcall	.+28     	; 0x7492 <__divmodsi4_neg1>
    7476:	57 fd       	sbrc	r21, 7
    7478:	04 d0       	rcall	.+8      	; 0x7482 <__divmodsi4_neg2>
    747a:	6f dc       	rcall	.-1826   	; 0x6d5a <__udivmodsi4>
    747c:	0a d0       	rcall	.+20     	; 0x7492 <__divmodsi4_neg1>
    747e:	00 1c       	adc	r0, r0
    7480:	38 f4       	brcc	.+14     	; 0x7490 <__divmodsi4_exit>

00007482 <__divmodsi4_neg2>:
    7482:	50 95       	com	r21
    7484:	40 95       	com	r20
    7486:	30 95       	com	r19
    7488:	21 95       	neg	r18
    748a:	3f 4f       	sbci	r19, 0xFF	; 255
    748c:	4f 4f       	sbci	r20, 0xFF	; 255
    748e:	5f 4f       	sbci	r21, 0xFF	; 255

00007490 <__divmodsi4_exit>:
    7490:	08 95       	ret

00007492 <__divmodsi4_neg1>:
    7492:	f6 f7       	brtc	.-4      	; 0x7490 <__divmodsi4_exit>
    7494:	90 95       	com	r25
    7496:	80 95       	com	r24
    7498:	70 95       	com	r23
    749a:	61 95       	neg	r22
    749c:	7f 4f       	sbci	r23, 0xFF	; 255
    749e:	8f 4f       	sbci	r24, 0xFF	; 255
    74a0:	9f 4f       	sbci	r25, 0xFF	; 255
    74a2:	08 95       	ret

000074a4 <_exit>:
    74a4:	f8 94       	cli

000074a6 <__stop_program>:
    74a6:	ff cf       	rjmp	.-2      	; 0x74a6 <__stop_program>
