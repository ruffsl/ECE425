
WallFollowing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002b2  00800100  0000725e  000072f2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000725e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000003d8  008003b2  008003b2  000075a4  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  000075a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000087b  00000000  00000000  00007604  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ed7  00000000  00000000  00007e7f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000048e  00000000  00000000  00009d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a74  00000000  00000000  0000a1e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000350  00000000  00000000  0000bc58  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000e4a  00000000  00000000  0000bfa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000014d8  00000000  00000000  0000cdf2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 31 03 	jmp	0x662	; 0x662 <__ctors_end>
       4:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       8:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
       c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      10:	0c 94 da 25 	jmp	0x4bb4	; 0x4bb4 <__vector_4>
      14:	0c 94 03 26 	jmp	0x4c06	; 0x4c06 <__vector_5>
      18:	0c 94 2c 26 	jmp	0x4c58	; 0x4c58 <__vector_6>
      1c:	0c 94 55 26 	jmp	0x4caa	; 0x4caa <__vector_7>
      20:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      24:	0c 94 bb 24 	jmp	0x4976	; 0x4976 <__vector_9>
      28:	0c 94 e4 24 	jmp	0x49c8	; 0x49c8 <__vector_10>
      2c:	0c 94 0d 25 	jmp	0x4a1a	; 0x4a1a <__vector_11>
      30:	0c 94 88 25 	jmp	0x4b10	; 0x4b10 <__vector_12>
      34:	0c 94 36 25 	jmp	0x4a6c	; 0x4a6c <__vector_13>
      38:	0c 94 5f 25 	jmp	0x4abe	; 0x4abe <__vector_14>
      3c:	0c 94 b1 25 	jmp	0x4b62	; 0x4b62 <__vector_15>
      40:	0c 94 40 24 	jmp	0x4880	; 0x4880 <__vector_16>
      44:	0c 94 69 24 	jmp	0x48d2	; 0x48d2 <__vector_17>
      48:	0c 94 92 24 	jmp	0x4924	; 0x4924 <__vector_18>
      4c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      50:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      54:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      58:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      5c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      60:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      64:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      68:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      6c:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      70:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      74:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      78:	0c 94 4e 03 	jmp	0x69c	; 0x69c <__bad_interrupt>
      7c:	a5 21       	and	r26, r5
      7e:	a8 21       	and	r26, r8
      80:	ab 21       	and	r26, r11
      82:	ae 21       	and	r26, r14
      84:	b7 21       	and	r27, r7
      86:	b1 21       	and	r27, r1
      88:	b4 21       	and	r27, r4
      8a:	ba 21       	and	r27, r10
      8c:	bd 21       	and	r27, r13
      8e:	c0 21       	and	r28, r0
      90:	c3 21       	and	r28, r3
      92:	c6 21       	and	r28, r6
      94:	c9 21       	and	r28, r9
      96:	cc 21       	and	r28, r12
      98:	cf 21       	and	r28, r15
      9a:	d2 21       	and	r29, r2
      9c:	d5 21       	and	r29, r5
      9e:	d8 21       	and	r29, r8
      a0:	db 21       	and	r29, r11
      a2:	ec 21       	and	r30, r12
      a4:	ef 21       	and	r30, r15
      a6:	f2 21       	and	r31, r2
      a8:	f5 21       	and	r31, r5
      aa:	fe 21       	and	r31, r14
      ac:	f8 21       	and	r31, r8
      ae:	fb 21       	and	r31, r11
      b0:	01 22       	and	r0, r17
      b2:	04 22       	and	r0, r20
      b4:	07 22       	and	r0, r23
      b6:	0a 22       	and	r0, r26
      b8:	0d 22       	and	r0, r29
      ba:	10 22       	and	r1, r16
      bc:	13 22       	and	r1, r19
      be:	16 22       	and	r1, r22
      c0:	19 22       	and	r1, r25
      c2:	1c 22       	and	r1, r28
      c4:	1f 22       	and	r1, r31
      c6:	22 22       	and	r2, r18
      c8:	07 63       	ori	r16, 0x37	; 55
      ca:	42 36       	cpi	r20, 0x62	; 98
      cc:	b7 9b       	sbis	0x16, 7	; 22
      ce:	d8 a7       	std	Y+40, r29	; 0x28
      d0:	1a 39       	cpi	r17, 0x9A	; 154
      d2:	68 56       	subi	r22, 0x68	; 104
      d4:	18 ae       	std	Y+56, r1	; 0x38
      d6:	ba ab       	std	Y+50, r27	; 0x32
      d8:	55 8c       	ldd	r5, Z+29	; 0x1d
      da:	1d 3c       	cpi	r17, 0xCD	; 205
      dc:	b7 cc       	rjmp	.-1682   	; 0xfffffa4c <__eeprom_end+0xff7efa4c>
      de:	57 63       	ori	r21, 0x37	; 55
      e0:	bd 6d       	ori	r27, 0xDD	; 221
      e2:	ed fd       	.word	0xfded	; ????
      e4:	75 3e       	cpi	r23, 0xE5	; 229
      e6:	f6 17       	cp	r31, r22
      e8:	72 31       	cpi	r23, 0x12	; 18
      ea:	bf 00       	.word	0x00bf	; ????
      ec:	00 00       	nop
      ee:	80 3f       	cpi	r24, 0xF0	; 240
      f0:	08 00       	.word	0x0008	; ????
      f2:	00 00       	nop
      f4:	be 92       	st	-X, r11
      f6:	24 49       	sbci	r18, 0x94	; 148
      f8:	12 3e       	cpi	r17, 0xE2	; 226
      fa:	ab aa       	std	Y+51, r10	; 0x33
      fc:	aa 2a       	or	r10, r26
      fe:	be cd       	rjmp	.-1156   	; 0xfffffc7c <__eeprom_end+0xff7efc7c>
     100:	cc cc       	rjmp	.-1640   	; 0xfffffa9a <__eeprom_end+0xff7efa9a>
     102:	4c 3e       	cpi	r20, 0xEC	; 236
     104:	00 00       	nop
     106:	00 80       	ld	r0, Z
     108:	be ab       	std	Y+54, r27	; 0x36
     10a:	aa aa       	std	Y+50, r10	; 0x32
     10c:	aa 3e       	cpi	r26, 0xEA	; 234
     10e:	00 00       	nop
     110:	00 00       	nop
     112:	bf 00       	.word	0x00bf	; ????
     114:	00 00       	nop
     116:	80 3f       	cpi	r24, 0xF0	; 240
     118:	00 00       	nop
     11a:	00 00       	nop
     11c:	00 08       	sbc	r0, r0
     11e:	41 78       	andi	r20, 0x81	; 129
     120:	d3 bb       	out	0x13, r29	; 19
     122:	43 87       	std	Z+11, r20	; 0x0b
     124:	d1 13       	cpse	r29, r17
     126:	3d 19       	sub	r19, r13
     128:	0e 3c       	cpi	r16, 0xCE	; 206
     12a:	c3 bd       	out	0x23, r28	; 35
     12c:	42 82       	std	Z+2, r4	; 0x02
     12e:	ad 2b       	or	r26, r29
     130:	3e 68       	ori	r19, 0x8E	; 142
     132:	ec 82       	std	Y+4, r14	; 0x04
     134:	76 be       	out	0x36, r7	; 54
     136:	d9 8f       	std	Y+25, r29	; 0x19
     138:	e1 a9       	ldd	r30, Z+49	; 0x31
     13a:	3e 4c       	sbci	r19, 0xCE	; 206
     13c:	80 ef       	ldi	r24, 0xF0	; 240
     13e:	ff be       	out	0x3f, r15	; 63
     140:	01 c4       	rjmp	.+2050   	; 0x944 <read_pixel_1+0x44>
     142:	ff 7f       	andi	r31, 0xFF	; 255
     144:	3f 00       	.word	0x003f	; ????
     146:	00 00       	nop
	...

0000014a <char_bitmap>:
     14a:	16 05 01 00 00 00 00 00 00 00 fa 00 00 00 e0 00     ................
     15a:	e0 00 28 fe 28 fe 28 24 54 fe 54 48 c4 c8 10 26     ..(.(.($T.TH...&
     16a:	46 6c 92 aa 44 a0 00 a0 c0 00 00 00 38 44 82 00     Fl..D.......8D..
     17a:	00 82 44 38 00 28 10 7c 10 28 10 10 7c 10 10 00     ..D8.(.|.(..|...
     18a:	0a 0c 00 00 10 10 10 10 10 00 06 06 00 00 04 08     ................
     19a:	10 20 40 7c 8a 92 a2 7c 00 42 fe 02 00 42 86 8a     . @|...|.B...B..
     1aa:	92 62 84 82 a2 d2 8c 18 28 48 fe 08 e4 a2 a2 a2     .b......(H......
     1ba:	9c 3c 52 92 92 0c 80 8e 90 a0 c0 6c 92 92 92 6c     .<R........l...l
     1ca:	60 92 92 94 78 00 6c 6c 00 00 00 6a 6c 00 00 10     `...x.ll...jl...
     1da:	28 44 82 00 28 28 28 28 28 00 82 44 28 10 40 80     (D..(((((..D(.@.
     1ea:	8a 90 60 4c 92 9e 82 7c 7e 88 88 88 7e fe 92 92     ..`L...|~...~...
     1fa:	92 6c 7c 82 82 82 44 fe 82 82 44 38 fe 92 92 92     .l|...D...D8....
     20a:	82 fe 90 90 90 80 7c 82 92 92 5e fe 10 10 10 fe     ......|...^.....
     21a:	00 82 fe 82 00 04 02 82 fc 80 fe 10 28 44 82 fe     ............(D..
     22a:	02 02 02 02 fe 40 30 40 fe fe 20 10 08 fe 7c 82     .....@0@.. ...|.
     23a:	82 82 7c fe 90 90 90 60 7c 82 8a 84 7a fe 90 98     ..|....`|...z...
     24a:	94 62 62 92 92 92 8c 80 80 fe 80 80 fc 02 02 02     .bb.............
     25a:	fc f8 04 02 04 f8 fc 02 1c 02 fc c6 28 10 28 c6     ............(.(.
     26a:	e0 10 0e 10 e0 86 8a 92 a2 c2 00 fe 82 82 00 40     ...............@
     27a:	20 10 08 04 00 82 82 fe 00 20 40 80 40 20 02 02      ........ @.@ ..
     28a:	02 02 02 00 80 40 20 00 04 2a 2a 2a 1e fe 12 22     .....@ ..***..."
     29a:	22 1c 1c 22 22 22 04 1c 22 22 12 fe 1c 2a 2a 2a     ".."""..""...***
     2aa:	18 10 7e 90 80 40 30 4a 4a 4a 7c fe 10 20 20 1e     ..~..@0JJJ|..  .
     2ba:	00 22 be 02 00 04 02 22 bc 00 fe 08 14 22 00 00     ."....."....."..
     2ca:	82 fe 02 00 3e 20 18 20 1e 3e 10 20 20 1e 1c 22     ....> . .>.  .."
     2da:	22 22 1c 3e 28 28 28 10 10 28 28 18 3e 3e 10 20     "".>(((..((.>>. 
     2ea:	20 10 12 2a 2a 2a 04 20 fc 22 02 04 3c 02 02 04      ..***. ."..<...
     2fa:	3e 38 04 02 04 38 3c 02 0c 02 3c 22 14 08 14 22     >8...8<...<"..."
     30a:	30 0a 0a 0a 3c 22 26 2a 32 22 00 10 6c 82 00 00     0...<"&*2"..l...
     31a:	00 fe 00 00 00 82 6c 10 00 08 10 10 08 10 00 00     ......l.........
     32a:	00 00 00 7f 81 81 81 7f 7f 83 83 83 7f 7f 87 87     ................
     33a:	87 7f 7f 8f 8f 8f 7f 7f 9f 9f 9f 7f 7f bf bf bf     ................
     34a:	7f 7f ff ff ff 7f 20 40 ff 40 20 62 15 17 15 65     ...... @.@ b...e
     35a:	00 fb fb 00 00                                      .....

0000035f <CEENBoT_Inc_logo_bitmap>:
     35f:	00 00 00 00 00 c0 ff 03 00 e0 ff 07 00 f0 ff 0f     ................
     36f:	00 f8 ff 1f 00 78 00 1e 00 78 00 1e 00 78 00 1e     .....x...x...x..
     37f:	00 78 00 1e 00 78 00 1e 00 78 00 1e 00 78 00 1e     .x...x...x...x..
     38f:	00 78 00 1e 00 78 00 1e 00 00 00 00 00 00 00 00     .x...x..........
     39f:	00 80 ff 03 00 e0 ff 07 00 f0 ff 0f 00 f8 ff 1f     ................
     3af:	00 f8 3c 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     ..<..x<..x<..x<.
     3bf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     3cf:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     3df:	00 00 00 00 00 e0 ff 03 00 f0 ff 07 00 f8 ff 0f     ................
     3ef:	00 f8 ff 1f 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .....x<..x<..x<.
     3ff:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x<..x<..x<..x<.
     40f:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 00 00 00     .x<..x<..x<.....
     41f:	00 00 00 00 00 f8 ff 03 00 f8 ff 0f 00 f8 ff 1f     ................
     42f:	00 f8 ff 1f 00 00 00 1e 00 00 00 1e 00 00 80 1f     ................
     43f:	00 00 f0 1f 00 00 ff 0f 00 e0 ff 07 00 f0 ff 00     ................
     44f:	00 f8 0f 00 00 f8 00 00 00 78 00 00 00 78 00 00     .........x...x..
     45f:	00 f8 ff 1f 00 f8 ff 1f 00 f0 ff 1f 00 e0 ff 1f     ................
	...
     477:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     487:	00 78 00 1e 00 78 3c 1e 00 78 3c 1e 00 78 3c 1e     .x...x<..x<..x<.
     497:	00 78 3c 1e 00 78 3c 1e 00 78 3c 1e 00 f8 7e 1f     .x<..x<..x<...~.
     4a7:	00 f8 ff 1f 00 f0 ff 0f 00 e0 e7 03 00 00 00 00     ................
     4b7:	00 00 00 38 00 ee ff 6c 00 2a 80 45 00 3a 00 47     ...8...l.*.E.:.G
     4c7:	fc 03 ff 6c fc 83 ff 39 00 de ff 0b 7c d0 81 0b     ...l...9....|...
     4d7:	fc d0 81 0b c0 d0 81 0b fc d0 81 0b 7c de ff 0b     ............|...
     4e7:	00 82 ff 39 70 02 ff 6c f8 3a 00 47 dc 2a 80 45     ...9p..l.:.G.*.E
     4f7:	cc ee ff 6c cc 00 00 38 00 00 00 00 0c 00 00 1e     ...l...8........
     507:	0c 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     517:	00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f 00 f8 ff 1f     ................
     527:	00 00 00 1e 00 00 00 1e 00 00 00 1e 00 00 00 1e     ................
     537:	00 00 00 5e 00 00 00 40 00 00 00 7c 00 00 00 40     ...^...@...|...@
     547:	00 00 00 40 00 00 00 7c 00 00 00 30 00 00 00 10     ...@...|...0....
     557:	00 00 00 30 00 00 00 7c                             ...0...|

0000055f <__c.1790>:
     55f:	6e 61 6e 00                                         nan.

00000563 <__c.1788>:
     563:	69 6e 66 00 00 40 7a 10 f3 5a 00 a0 72 4e 18 09     inf..@z..Z..rN..
     573:	00 10 a5 d4 e8 00 00 e8 76 48 17 00 00 e4 0b 54     ........vH.....T
     583:	02 00 00 ca 9a 3b 00 00 00 e1 f5 05 00 00 80 96     .....;..........
     593:	98 00 00 00 40 42 0f 00 00 00 a0 86 01 00 00 00     ....@B..........
     5a3:	10 27 00 00 00 00 e8 03 00 00 00 00 64 00 00 00     .'..........d...
     5b3:	00 00 0a 00 00 00 00 00 01 00 00 00 00 00 2c 76     ..............,v
     5c3:	d8 88 dc 67 4f 08 23 df c1 df ae 59 e1 b1 b7 96     ...gO.#....Y....
     5d3:	e5 e3 e4 53 c6 3a e6 51 99 76 96 e8 e6 c2 84 26     ...S.:.Q.v.....&
     5e3:	eb 89 8c 9b 62 ed 40 7c 6f fc ef bc 9c 9f 40 f2     ....b.@|o.....@.
     5f3:	ba a5 6f a5 f4 90 05 5a 2a f7 5c 93 6b 6c f9 67     ..o....Z*.\.kl.g
     603:	6d c1 1b fc e0 e4 0d 47 fe f5 20 e6 b5 00 d0 ed     m......G.. .....
     613:	90 2e 03 00 94 35 77 05 00 80 84 1e 08 00 00 20     .....5w........ 
     623:	4e 0a 00 00 00 c8 0c 33 33 33 33 0f 98 6e 12 83     N......3333..n..
     633:	11 41 ef 8d 21 14 89 3b e6 55 16 cf fe e6 db 18     .A..!..;.U......
     643:	d1 84 4b 38 1b f7 7c 1d 90 1d a4 bb e4 24 20 32     ..K8..|......$ 2
     653:	84 72 5e 22 81 00 c9 f1 24 ec a1 e5 3d 27 00        .r^"....$...='.

00000662 <__ctors_end>:
     662:	11 24       	eor	r1, r1
     664:	1f be       	out	0x3f, r1	; 63
     666:	cf ef       	ldi	r28, 0xFF	; 255
     668:	d8 e0       	ldi	r29, 0x08	; 8
     66a:	de bf       	out	0x3e, r29	; 62
     66c:	cd bf       	out	0x3d, r28	; 61

0000066e <__do_copy_data>:
     66e:	13 e0       	ldi	r17, 0x03	; 3
     670:	a0 e0       	ldi	r26, 0x00	; 0
     672:	b1 e0       	ldi	r27, 0x01	; 1
     674:	ee e5       	ldi	r30, 0x5E	; 94
     676:	f2 e7       	ldi	r31, 0x72	; 114
     678:	02 c0       	rjmp	.+4      	; 0x67e <.do_copy_data_start>

0000067a <.do_copy_data_loop>:
     67a:	05 90       	lpm	r0, Z+
     67c:	0d 92       	st	X+, r0

0000067e <.do_copy_data_start>:
     67e:	a2 3b       	cpi	r26, 0xB2	; 178
     680:	b1 07       	cpc	r27, r17
     682:	d9 f7       	brne	.-10     	; 0x67a <.do_copy_data_loop>

00000684 <__do_clear_bss>:
     684:	17 e0       	ldi	r17, 0x07	; 7
     686:	a2 eb       	ldi	r26, 0xB2	; 178
     688:	b3 e0       	ldi	r27, 0x03	; 3
     68a:	01 c0       	rjmp	.+2      	; 0x68e <.do_clear_bss_start>

0000068c <.do_clear_bss_loop>:
     68c:	1d 92       	st	X+, r1

0000068e <.do_clear_bss_start>:
     68e:	aa 38       	cpi	r26, 0x8A	; 138
     690:	b1 07       	cpc	r27, r17
     692:	e1 f7       	brne	.-8      	; 0x68c <.do_clear_bss_loop>
     694:	0e 94 0f 1c 	call	0x381e	; 0x381e <main>
     698:	0c 94 2d 39 	jmp	0x725a	; 0x725a <_exit>

0000069c <__bad_interrupt>:
     69c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006a0 <get_ambient_temp>:
* Output Return:	I2C_STATUS
* Overview:			Reads the ambient temperature
********************************************************************/

I2C_STATUS get_ambient_temp( unsigned char *ambient_temp )
{
     6a0:	1f 93       	push	r17
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6a8:	88 e6       	ldi	r24, 0x68	; 104
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     6b0:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     6b2:	88 23       	and	r24, r24
     6b4:	a1 f4       	brne	.+40     	; 0x6de <get_ambient_temp+0x3e>
	{

		// Send the register value (being 1).  This is
		// the register that contains the ambient temperature.
		i2c_stat = I2C_MSTR_send( __TPA81_AMBIENT );
     6b6:	81 e0       	ldi	r24, 0x01	; 1
     6b8:	0e 94 7e 23 	call	0x46fc	; 0x46fc <I2C_MSTR_send>
     6bc:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     6be:	88 23       	and	r24, r24
     6c0:	71 f4       	brne	.+28     	; 0x6de <get_ambient_temp+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     6c2:	88 e6       	ldi	r24, 0x68	; 104
     6c4:	61 e0       	ldi	r22, 0x01	; 1
     6c6:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     6ca:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     6cc:	88 23       	and	r24, r24
     6ce:	39 f4       	brne	.+14     	; 0x6de <get_ambient_temp+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( ambient_temp, FALSE );
     6d0:	ce 01       	movw	r24, r28
     6d2:	60 e0       	ldi	r22, 0x00	; 0
     6d4:	0e 94 52 23 	call	0x46a4	; 0x46a4 <I2C_MSTR_get>
     6d8:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     6da:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*ambient_temp = 0;
     6dc:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     6de:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_ambient_temp()
     6e2:	81 2f       	mov	r24, r17
     6e4:	df 91       	pop	r29
     6e6:	cf 91       	pop	r28
     6e8:	1f 91       	pop	r17
     6ea:	08 95       	ret

000006ec <read_pixel_8>:
	return i2c_stat;
}

// get pixel eight
I2C_STATUS read_pixel_8( unsigned char *pixel_8)
{
     6ec:	1f 93       	push	r17
     6ee:	cf 93       	push	r28
     6f0:	df 93       	push	r29
     6f2:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     6f4:	88 e6       	ldi	r24, 0x68	; 104
     6f6:	60 e0       	ldi	r22, 0x00	; 0
     6f8:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     6fc:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     6fe:	88 23       	and	r24, r24
     700:	a1 f4       	brne	.+40     	; 0x72a <read_pixel_8+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX8 );
     702:	89 e0       	ldi	r24, 0x09	; 9
     704:	0e 94 7e 23 	call	0x46fc	; 0x46fc <I2C_MSTR_send>
     708:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     70a:	88 23       	and	r24, r24
     70c:	71 f4       	brne	.+28     	; 0x72a <read_pixel_8+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     70e:	88 e6       	ldi	r24, 0x68	; 104
     710:	61 e0       	ldi	r22, 0x01	; 1
     712:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     716:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     718:	88 23       	and	r24, r24
     71a:	39 f4       	brne	.+14     	; 0x72a <read_pixel_8+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_8, FALSE );
     71c:	ce 01       	movw	r24, r28
     71e:	60 e0       	ldi	r22, 0x00	; 0
     720:	0e 94 52 23 	call	0x46a4	; 0x46a4 <I2C_MSTR_get>
     724:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     726:	81 11       	cpse	r24, r1
					*pixel_8 = 0;
     728:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     72a:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <I2C_MSTR_stop>
	return i2c_stat;
}
     72e:	81 2f       	mov	r24, r17
     730:	df 91       	pop	r29
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	08 95       	ret

00000738 <read_pixel_7>:
	return i2c_stat;
}

// get pixel seven
I2C_STATUS read_pixel_7( unsigned char *pixel_7)
{
     738:	1f 93       	push	r17
     73a:	cf 93       	push	r28
     73c:	df 93       	push	r29
     73e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     740:	88 e6       	ldi	r24, 0x68	; 104
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     748:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     74a:	88 23       	and	r24, r24
     74c:	a1 f4       	brne	.+40     	; 0x776 <read_pixel_7+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX7 );
     74e:	88 e0       	ldi	r24, 0x08	; 8
     750:	0e 94 7e 23 	call	0x46fc	; 0x46fc <I2C_MSTR_send>
     754:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     756:	88 23       	and	r24, r24
     758:	71 f4       	brne	.+28     	; 0x776 <read_pixel_7+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     75a:	88 e6       	ldi	r24, 0x68	; 104
     75c:	61 e0       	ldi	r22, 0x01	; 1
     75e:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     762:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     764:	88 23       	and	r24, r24
     766:	39 f4       	brne	.+14     	; 0x776 <read_pixel_7+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_7, FALSE );
     768:	ce 01       	movw	r24, r28
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	0e 94 52 23 	call	0x46a4	; 0x46a4 <I2C_MSTR_get>
     770:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     772:	81 11       	cpse	r24, r1
					*pixel_7 = 0;
     774:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     776:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <I2C_MSTR_stop>
	return i2c_stat;
}
     77a:	81 2f       	mov	r24, r17
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <read_pixel_6>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel six
I2C_STATUS read_pixel_6( unsigned char *pixel_6)
{
     784:	1f 93       	push	r17
     786:	cf 93       	push	r28
     788:	df 93       	push	r29
     78a:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     78c:	88 e6       	ldi	r24, 0x68	; 104
     78e:	60 e0       	ldi	r22, 0x00	; 0
     790:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     794:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     796:	88 23       	and	r24, r24
     798:	a1 f4       	brne	.+40     	; 0x7c2 <read_pixel_6+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX6 );
     79a:	87 e0       	ldi	r24, 0x07	; 7
     79c:	0e 94 7e 23 	call	0x46fc	; 0x46fc <I2C_MSTR_send>
     7a0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7a2:	88 23       	and	r24, r24
     7a4:	71 f4       	brne	.+28     	; 0x7c2 <read_pixel_6+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7a6:	88 e6       	ldi	r24, 0x68	; 104
     7a8:	61 e0       	ldi	r22, 0x01	; 1
     7aa:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     7ae:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7b0:	88 23       	and	r24, r24
     7b2:	39 f4       	brne	.+14     	; 0x7c2 <read_pixel_6+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_6, FALSE );
     7b4:	ce 01       	movw	r24, r28
     7b6:	60 e0       	ldi	r22, 0x00	; 0
     7b8:	0e 94 52 23 	call	0x46a4	; 0x46a4 <I2C_MSTR_get>
     7bc:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     7be:	81 11       	cpse	r24, r1
					*pixel_6 = 0;
     7c0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     7c2:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <I2C_MSTR_stop>
	return i2c_stat;
}
     7c6:	81 2f       	mov	r24, r17
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	08 95       	ret

000007d0 <read_pixel_5>:
	I2C_MSTR_stop();
	return i2c_stat;
}
// get pixel five
I2C_STATUS read_pixel_5( unsigned char *pixel_5)
{
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     7d8:	88 e6       	ldi	r24, 0x68	; 104
     7da:	60 e0       	ldi	r22, 0x00	; 0
     7dc:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     7e0:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     7e2:	88 23       	and	r24, r24
     7e4:	a1 f4       	brne	.+40     	; 0x80e <read_pixel_5+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX5 );
     7e6:	86 e0       	ldi	r24, 0x06	; 6
     7e8:	0e 94 7e 23 	call	0x46fc	; 0x46fc <I2C_MSTR_send>
     7ec:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     7ee:	88 23       	and	r24, r24
     7f0:	71 f4       	brne	.+28     	; 0x80e <read_pixel_5+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     7f2:	88 e6       	ldi	r24, 0x68	; 104
     7f4:	61 e0       	ldi	r22, 0x01	; 1
     7f6:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     7fa:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     7fc:	88 23       	and	r24, r24
     7fe:	39 f4       	brne	.+14     	; 0x80e <read_pixel_5+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_5, FALSE );
     800:	ce 01       	movw	r24, r28
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	0e 94 52 23 	call	0x46a4	; 0x46a4 <I2C_MSTR_get>
     808:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     80a:	81 11       	cpse	r24, r1
					*pixel_5 = 0;
     80c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     80e:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <I2C_MSTR_stop>
	return i2c_stat;
}
     812:	81 2f       	mov	r24, r17
     814:	df 91       	pop	r29
     816:	cf 91       	pop	r28
     818:	1f 91       	pop	r17
     81a:	08 95       	ret

0000081c <read_pixel_4>:
	return i2c_stat;
}

// get pixel four
I2C_STATUS read_pixel_4( unsigned char *pixel_4)
{
     81c:	1f 93       	push	r17
     81e:	cf 93       	push	r28
     820:	df 93       	push	r29
     822:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     824:	88 e6       	ldi	r24, 0x68	; 104
     826:	60 e0       	ldi	r22, 0x00	; 0
     828:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     82c:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     82e:	88 23       	and	r24, r24
     830:	a1 f4       	brne	.+40     	; 0x85a <read_pixel_4+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX4 );
     832:	85 e0       	ldi	r24, 0x05	; 5
     834:	0e 94 7e 23 	call	0x46fc	; 0x46fc <I2C_MSTR_send>
     838:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     83a:	88 23       	and	r24, r24
     83c:	71 f4       	brne	.+28     	; 0x85a <read_pixel_4+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     83e:	88 e6       	ldi	r24, 0x68	; 104
     840:	61 e0       	ldi	r22, 0x01	; 1
     842:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     846:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     848:	88 23       	and	r24, r24
     84a:	39 f4       	brne	.+14     	; 0x85a <read_pixel_4+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_4, FALSE );
     84c:	ce 01       	movw	r24, r28
     84e:	60 e0       	ldi	r22, 0x00	; 0
     850:	0e 94 52 23 	call	0x46a4	; 0x46a4 <I2C_MSTR_get>
     854:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     856:	81 11       	cpse	r24, r1
					*pixel_4 = 0;
     858:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     85a:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <I2C_MSTR_stop>
	return i2c_stat;
}
     85e:	81 2f       	mov	r24, r17
     860:	df 91       	pop	r29
     862:	cf 91       	pop	r28
     864:	1f 91       	pop	r17
     866:	08 95       	ret

00000868 <read_pixel_3>:
	return i2c_stat;
}

// get pixel three
I2C_STATUS read_pixel_3( unsigned char *pixel_3)
{
     868:	1f 93       	push	r17
     86a:	cf 93       	push	r28
     86c:	df 93       	push	r29
     86e:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     870:	88 e6       	ldi	r24, 0x68	; 104
     872:	60 e0       	ldi	r22, 0x00	; 0
     874:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     878:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     87a:	88 23       	and	r24, r24
     87c:	a1 f4       	brne	.+40     	; 0x8a6 <read_pixel_3+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX3 );
     87e:	84 e0       	ldi	r24, 0x04	; 4
     880:	0e 94 7e 23 	call	0x46fc	; 0x46fc <I2C_MSTR_send>
     884:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     886:	88 23       	and	r24, r24
     888:	71 f4       	brne	.+28     	; 0x8a6 <read_pixel_3+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     88a:	88 e6       	ldi	r24, 0x68	; 104
     88c:	61 e0       	ldi	r22, 0x01	; 1
     88e:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     892:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     894:	88 23       	and	r24, r24
     896:	39 f4       	brne	.+14     	; 0x8a6 <read_pixel_3+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_3, FALSE );
     898:	ce 01       	movw	r24, r28
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	0e 94 52 23 	call	0x46a4	; 0x46a4 <I2C_MSTR_get>
     8a0:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8a2:	81 11       	cpse	r24, r1
					*pixel_3 = 0;
     8a4:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8a6:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <I2C_MSTR_stop>
	return i2c_stat;
}
     8aa:	81 2f       	mov	r24, r17
     8ac:	df 91       	pop	r29
     8ae:	cf 91       	pop	r28
     8b0:	1f 91       	pop	r17
     8b2:	08 95       	ret

000008b4 <read_pixel_2>:
}


// get pixel two
I2C_STATUS read_pixel_2( unsigned char *pixel_2)
{
     8b4:	1f 93       	push	r17
     8b6:	cf 93       	push	r28
     8b8:	df 93       	push	r29
     8ba:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     8bc:	88 e6       	ldi	r24, 0x68	; 104
     8be:	60 e0       	ldi	r22, 0x00	; 0
     8c0:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     8c4:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     8c6:	88 23       	and	r24, r24
     8c8:	a1 f4       	brne	.+40     	; 0x8f2 <read_pixel_2+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX2 );
     8ca:	83 e0       	ldi	r24, 0x03	; 3
     8cc:	0e 94 7e 23 	call	0x46fc	; 0x46fc <I2C_MSTR_send>
     8d0:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     8d2:	88 23       	and	r24, r24
     8d4:	71 f4       	brne	.+28     	; 0x8f2 <read_pixel_2+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     8d6:	88 e6       	ldi	r24, 0x68	; 104
     8d8:	61 e0       	ldi	r22, 0x01	; 1
     8da:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     8de:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     8e0:	88 23       	and	r24, r24
     8e2:	39 f4       	brne	.+14     	; 0x8f2 <read_pixel_2+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_2, FALSE );
     8e4:	ce 01       	movw	r24, r28
     8e6:	60 e0       	ldi	r22, 0x00	; 0
     8e8:	0e 94 52 23 	call	0x46a4	; 0x46a4 <I2C_MSTR_get>
     8ec:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     8ee:	81 11       	cpse	r24, r1
					*pixel_2 = 0;
     8f0:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     8f2:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <I2C_MSTR_stop>
	return i2c_stat;
}
     8f6:	81 2f       	mov	r24, r17
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	08 95       	ret

00000900 <read_pixel_1>:
* Output Return:	I2C_STATUS
* Overview:			These are several pixel read values for each of the pixels
********************************************************************/
// get pixel one
I2C_STATUS read_pixel_1( unsigned char *pixel_1)
{
     900:	1f 93       	push	r17
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     908:	88 e6       	ldi	r24, 0x68	; 104
     90a:	60 e0       	ldi	r22, 0x00	; 0
     90c:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     910:	18 2f       	mov	r17, r24
	if( i2c_stat == I2C_STAT_OK )
     912:	88 23       	and	r24, r24
     914:	a1 f4       	brne	.+40     	; 0x93e <read_pixel_1+0x3e>
	{
		i2c_stat = I2C_MSTR_send(__TPA81_PIX1 );
     916:	82 e0       	ldi	r24, 0x02	; 2
     918:	0e 94 7e 23 	call	0x46fc	; 0x46fc <I2C_MSTR_send>
     91c:	18 2f       	mov	r17, r24
		if( i2c_stat == I2C_STAT_OK )
     91e:	88 23       	and	r24, r24
     920:	71 f4       	brne	.+28     	; 0x93e <read_pixel_1+0x3e>
		{
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     922:	88 e6       	ldi	r24, 0x68	; 104
     924:	61 e0       	ldi	r22, 0x01	; 1
     926:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     92a:	18 2f       	mov	r17, r24
			if( i2c_stat == I2C_STAT_OK )
     92c:	88 23       	and	r24, r24
     92e:	39 f4       	brne	.+14     	; 0x93e <read_pixel_1+0x3e>
			{
				i2c_stat = I2C_MSTR_get( pixel_1, FALSE );
     930:	ce 01       	movw	r24, r28
     932:	60 e0       	ldi	r22, 0x00	; 0
     934:	0e 94 52 23 	call	0x46a4	; 0x46a4 <I2C_MSTR_get>
     938:	18 2f       	mov	r17, r24
				if ( i2c_stat != I2C_STAT_OK )
     93a:	81 11       	cpse	r24, r1
					*pixel_1 = 0;
     93c:	18 82       	st	Y, r1
			}
		} 
	} 
	I2C_MSTR_stop();
     93e:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <I2C_MSTR_stop>
	return i2c_stat;
}
     942:	81 2f       	mov	r24, r17
     944:	df 91       	pop	r29
     946:	cf 91       	pop	r28
     948:	1f 91       	pop	r17
     94a:	08 95       	ret

0000094c <get_revision>:
* Input Variables:	unsigned char revision
* Output Return:	I2C_STATUS
* Overview:			
********************************************************************/
I2C_STATUS get_revision( unsigned char *revision )
{
     94c:	1f 93       	push	r17
     94e:	cf 93       	push	r28
     950:	df 93       	push	r29
     952:	ec 01       	movw	r28, r24
	I2C_STATUS i2c_stat;

	// Begin a transaction as master transmitter so that 
	// we can tell the sensor the register we want to read from
	// before we _actually_ read it.
	i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MT );
     954:	88 e6       	ldi	r24, 0x68	; 104
     956:	60 e0       	ldi	r22, 0x00	; 0
     958:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     95c:	18 2f       	mov	r17, r24

	// If successful...
	if( i2c_stat == I2C_STAT_OK )
     95e:	88 23       	and	r24, r24
     960:	a1 f4       	brne	.+40     	; 0x98a <get_revision+0x3e>
	{

		// Send the register value (being 0).  This is
		// the register that contains the software revision.
		i2c_stat = I2C_MSTR_send( __TPA81_REVISION );
     962:	80 e0       	ldi	r24, 0x00	; 0
     964:	0e 94 7e 23 	call	0x46fc	; 0x46fc <I2C_MSTR_send>
     968:	18 2f       	mov	r17, r24

		// If successful...
		if( i2c_stat == I2C_STAT_OK )
     96a:	88 23       	and	r24, r24
     96c:	71 f4       	brne	.+28     	; 0x98a <get_revision+0x3e>
		{

			// Now switch to master receiver so we can 
			// read the data in register 0 of the sensor.
			i2c_stat = I2C_MSTR_start( __TPA81_ADDR, I2C_MODE_MR );
     96e:	88 e6       	ldi	r24, 0x68	; 104
     970:	61 e0       	ldi	r22, 0x01	; 1
     972:	0e 94 a4 23 	call	0x4748	; 0x4748 <I2C_MSTR_start>
     976:	18 2f       	mov	r17, r24

			// If successful...
			if( i2c_stat == I2C_STAT_OK )
     978:	88 23       	and	r24, r24
     97a:	39 f4       	brne	.+14     	; 0x98a <get_revision+0x3e>
			{

				// Read the data...
				i2c_stat = I2C_MSTR_get( revision, FALSE );
     97c:	ce 01       	movw	r24, r28
     97e:	60 e0       	ldi	r22, 0x00	; 0
     980:	0e 94 52 23 	call	0x46a4	; 0x46a4 <I2C_MSTR_get>
     984:	18 2f       	mov	r17, r24

				// If NOT successful...
				if ( i2c_stat != I2C_STAT_OK )
     986:	81 11       	cpse	r24, r1

					// Overwrite it with 0.
					*revision = 0;
     988:	18 82       	st	Y, r1

	} // end if()

	// I'm going to assume the transaction was successful, 
	// so we need to stop it.
	I2C_MSTR_stop();
     98a:	0e 94 ea 23 	call	0x47d4	; 0x47d4 <I2C_MSTR_stop>

	// Also, return the status, regardless.
	return i2c_stat;

} // end get_revision()
     98e:	81 2f       	mov	r24, r17
     990:	df 91       	pop	r29
     992:	cf 91       	pop	r28
     994:	1f 91       	pop	r17
     996:	08 95       	ret

00000998 <getBackIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	0e 94 04 1c 	call	0x3808	; 0x3808 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with frount IR for orientation
	ADC_set_channel(IRBACK_CHAN);
     99e:	85 e0       	ldi	r24, 0x05	; 5
     9a0:	0e 94 cd 1b 	call	0x379a	; 0x379a <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9a4:	0e 94 b0 1b 	call	0x3760	; 0x3760 <ADC_sample>
     9a8:	a0 e0       	ldi	r26, 0x00	; 0
     9aa:	b0 e0       	ldi	r27, 0x00	; 0
     9ac:	bc 01       	movw	r22, r24
     9ae:	cd 01       	movw	r24, r26
     9b0:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__floatunsisf>
     9b4:	20 e0       	ldi	r18, 0x00	; 0
     9b6:	30 e0       	ldi	r19, 0x00	; 0
     9b8:	40 ea       	ldi	r20, 0xA0	; 160
     9ba:	50 e4       	ldi	r21, 0x40	; 64
     9bc:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
     9c0:	9b 01       	movw	r18, r22
     9c2:	ac 01       	movw	r20, r24
     9c4:	60 e0       	ldi	r22, 0x00	; 0
     9c6:	70 e2       	ldi	r23, 0x20	; 32
     9c8:	86 e3       	ldi	r24, 0x36	; 54
     9ca:	95 e4       	ldi	r25, 0x45	; 69
     9cc:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
     9d0:	20 e0       	ldi	r18, 0x00	; 0
     9d2:	30 e0       	ldi	r19, 0x00	; 0
     9d4:	40 e8       	ldi	r20, 0x80	; 128
     9d6:	5f e3       	ldi	r21, 0x3F	; 63
     9d8:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     9dc:	08 95       	ret

000009de <getFrontIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	0e 94 04 1c 	call	0x3808	; 0x3808 <ADC_set_VREF>
	// Set the channel we will sample from.
	// Note: Swaped with back IR for orientation
	ADC_set_channel(IRFRONT_CHAN);
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 cd 1b 	call	0x379a	; 0x379a <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     9ea:	0e 94 b0 1b 	call	0x3760	; 0x3760 <ADC_sample>
     9ee:	a0 e0       	ldi	r26, 0x00	; 0
     9f0:	b0 e0       	ldi	r27, 0x00	; 0
     9f2:	bc 01       	movw	r22, r24
     9f4:	cd 01       	movw	r24, r26
     9f6:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__floatunsisf>
     9fa:	20 e0       	ldi	r18, 0x00	; 0
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	40 ea       	ldi	r20, 0xA0	; 160
     a00:	50 e4       	ldi	r21, 0x40	; 64
     a02:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
     a06:	9b 01       	movw	r18, r22
     a08:	ac 01       	movw	r20, r24
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	70 e2       	ldi	r23, 0x20	; 32
     a0e:	86 e3       	ldi	r24, 0x36	; 54
     a10:	95 e4       	ldi	r25, 0x45	; 69
     a12:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
     a16:	20 e0       	ldi	r18, 0x00	; 0
     a18:	30 e0       	ldi	r19, 0x00	; 0
     a1a:	40 e8       	ldi	r20, 0x80	; 128
     a1c:	5f e3       	ldi	r21, 0x3F	; 63
     a1e:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a22:	08 95       	ret

00000a24 <getRightIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
	ADC_set_VREF( ADC_VREF_AVCC );
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	0e 94 04 1c 	call	0x3808	; 0x3808 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRRIGHT_CHAN );
     a2a:	83 e0       	ldi	r24, 0x03	; 3
     a2c:	0e 94 cd 1b 	call	0x379a	; 0x379a <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a30:	0e 94 b0 1b 	call	0x3760	; 0x3760 <ADC_sample>
     a34:	a0 e0       	ldi	r26, 0x00	; 0
     a36:	b0 e0       	ldi	r27, 0x00	; 0
     a38:	bc 01       	movw	r22, r24
     a3a:	cd 01       	movw	r24, r26
     a3c:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__floatunsisf>
     a40:	20 e0       	ldi	r18, 0x00	; 0
     a42:	30 e0       	ldi	r19, 0x00	; 0
     a44:	40 ea       	ldi	r20, 0xA0	; 160
     a46:	50 e4       	ldi	r21, 0x40	; 64
     a48:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
     a4c:	9b 01       	movw	r18, r22
     a4e:	ac 01       	movw	r20, r24
     a50:	60 e0       	ldi	r22, 0x00	; 0
     a52:	70 e2       	ldi	r23, 0x20	; 32
     a54:	86 e3       	ldi	r24, 0x36	; 54
     a56:	95 e4       	ldi	r25, 0x45	; 69
     a58:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
     a5c:	20 e0       	ldi	r18, 0x00	; 0
     a5e:	30 e0       	ldi	r19, 0x00	; 0
     a60:	40 e8       	ldi	r20, 0x80	; 128
     a62:	5f e3       	ldi	r21, 0x3F	; 63
     a64:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     a68:	08 95       	ret

00000a6a <getLeftIR>:
	float voltage;//IR range -0.4 to 5.3 V
	float distance;// (cm) 30 cm = 12 inches = 0.4 V	
	float dist;//distance in inches
	ADC_SAMPLE adcsample;
	// Set the Voltage Reference first so VREF=5V.
 	ADC_set_VREF( ADC_VREF_AVCC );
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	0e 94 04 1c 	call	0x3808	; 0x3808 <ADC_set_VREF>
	// Set the channel we will sample from.
	ADC_set_channel( IRLEFT_CHAN );
     a70:	84 e0       	ldi	r24, 0x04	; 4
     a72:	0e 94 cd 1b 	call	0x379a	; 0x379a <ADC_set_channel>
	// Now sample it!
	adcsample = ADC_sample();
     a76:	0e 94 b0 1b 	call	0x3760	; 0x3760 <ADC_sample>
     a7a:	a0 e0       	ldi	r26, 0x00	; 0
     a7c:	b0 e0       	ldi	r27, 0x00	; 0
     a7e:	bc 01       	movw	r22, r24
     a80:	cd 01       	movw	r24, r26
     a82:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__floatunsisf>
     a86:	20 e0       	ldi	r18, 0x00	; 0
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	40 ea       	ldi	r20, 0xA0	; 160
     a8c:	50 e4       	ldi	r21, 0x40	; 64
     a8e:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
     a92:	9b 01       	movw	r18, r22
     a94:	ac 01       	movw	r20, r24
     a96:	60 e0       	ldi	r22, 0x00	; 0
     a98:	70 e2       	ldi	r23, 0x20	; 32
     a9a:	86 e3       	ldi	r24, 0x36	; 54
     a9c:	95 e4       	ldi	r25, 0x45	; 69
     a9e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
     aa2:	20 e0       	ldi	r18, 0x00	; 0
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	40 e8       	ldi	r20, 0x80	; 128
     aa8:	5f e3       	ldi	r21, 0x3F	; 63
     aaa:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__subsf3>
	voltage = adcsample * ( 5.0 / 1024 );
	// Convert to distance in cm
	distance = (2914/(adcsample+5.0))-1.0;
	dist = distance*1;
	return dist;
}
     aae:	08 95       	ret

00000ab0 <getRightLight>:
********************************************************************/
float getRightLight( void )
{
	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	0e 94 04 1c 	call	0x3808	; 0x3808 <ADC_set_VREF>
	ADC_set_channel( RIGHT_LIGHT_CHAN );
     ab6:	85 e0       	ldi	r24, 0x05	; 5
     ab8:	0e 94 cd 1b 	call	0x379a	; 0x379a <ADC_set_channel>
	adcsample = ADC_sample();
     abc:	0e 94 b0 1b 	call	0x3760	; 0x3760 <ADC_sample>
     ac0:	a0 e0       	ldi	r26, 0x00	; 0
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	bc 01       	movw	r22, r24
     ac6:	cd 01       	movw	r24, r26
     ac8:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__floatunsisf>
     acc:	20 e0       	ldi	r18, 0x00	; 0
     ace:	30 e0       	ldi	r19, 0x00	; 0
     ad0:	40 ea       	ldi	r20, 0xA0	; 160
     ad2:	5b e3       	ldi	r21, 0x3B	; 59
     ad4:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
	// LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * ( 5.0 / 1024 );
	// LCD_printf( "right: %f\n",voltage);
	return voltage;
}
     ad8:	08 95       	ret

00000ada <getLeftLight>:
float getLeftLight( void )
{

	float voltage;
	ADC_SAMPLE adcsample;
	ADC_set_VREF( ADC_VREF_AVCC );
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 04 1c 	call	0x3808	; 0x3808 <ADC_set_VREF>
	ADC_set_channel( LEFT_LIGHT_CHAN );
     ae0:	86 e0       	ldi	r24, 0x06	; 6
     ae2:	0e 94 cd 1b 	call	0x379a	; 0x379a <ADC_set_channel>
	adcsample = ADC_sample();
     ae6:	0e 94 b0 1b 	call	0x3760	; 0x3760 <ADC_sample>
     aea:	a0 e0       	ldi	r26, 0x00	; 0
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	bc 01       	movw	r22, r24
     af0:	cd 01       	movw	r24, r26
     af2:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__floatunsisf>
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	40 ea       	ldi	r20, 0xA0	; 160
     afc:	5b e3       	ldi	r21, 0x3B	; 59
     afe:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
	//LCD_printf( "ADC: %i\n",adcsample);
	voltage = adcsample * (5.0/ 1024.0 );
	// LCD_printf( "voltage: %f\n",voltage);
	return voltage;
}
     b02:	08 95       	ret

00000b04 <EnterTopoCommand>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int EnterTopoCommand( void ) 
{
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	if((ATopstat.state=SUBSYS_OPEN))
     b08:	81 e0       	ldi	r24, 0x01	; 1
     b0a:	80 93 4e 04 	sts	0x044E, r24
	{
       	// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b0e:	80 e0       	ldi	r24, 0x00	; 0
     b10:	0e 94 56 22 	call	0x44ac	; 0x44ac <ATTINY_get_SW_state>
     b14:	08 2f       	mov	r16, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b16:	81 e0       	ldi	r24, 0x01	; 1
     b18:	0e 94 56 22 	call	0x44ac	; 0x44ac <ATTINY_get_SW_state>
     b1c:	18 2f       	mov	r17, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b1e:	82 e0       	ldi	r24, 0x02	; 2
     b20:	0e 94 56 22 	call	0x44ac	; 0x44ac <ATTINY_get_SW_state>
		if( btnState1 == TRUE )
		{
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     b24:	11 30       	cpi	r17, 0x01	; 1
     b26:	19 f4       	brne	.+6      	; 0xb2e <EnterTopoCommand+0x2a>
     b28:	22 e0       	ldi	r18, 0x02	; 2
     b2a:	30 e0       	ldi	r19, 0x00	; 0
     b2c:	06 c0       	rjmp	.+12     	; 0xb3a <EnterTopoCommand+0x36>
     b2e:	20 e0       	ldi	r18, 0x00	; 0
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	01 30       	cpi	r16, 0x01	; 1
     b34:	11 f4       	brne	.+4      	; 0xb3a <EnterTopoCommand+0x36>
     b36:	21 e0       	ldi	r18, 0x01	; 1
     b38:	30 e0       	ldi	r19, 0x00	; 0
		{
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	11 f4       	brne	.+4      	; 0xb42 <EnterTopoCommand+0x3e>
     b3e:	23 e0       	ldi	r18, 0x03	; 3
     b40:	30 e0       	ldi	r19, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     b42:	c9 01       	movw	r24, r18
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <WaitButton>:
* Input Variables:	none
* Output Return:	int
* Overview:			Use a comment block like this before functions
********************************************************************/
int WaitButton( void ) 
{
     b4a:	ff 92       	push	r15
     b4c:	0f 93       	push	r16
     b4e:	1f 93       	push	r17
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
    BOOL btnState1, btnState2, btnState3;//local variables - button states
	//int rtnValue=0;//return the button value
	int rtnValue=0;

	LCD_clear();
     b54:	0e 94 18 1c 	call	0x3830	; 0x3830 <LCD_clear>

	if((ATopstat.state=SUBSYS_OPEN))
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 93 4e 04 	sts	0x044E, r24
	{
       		// Get switch states.
		btnState1 = ATTINY_get_SW_state( ATTINY_SW3 );
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	0e 94 56 22 	call	0x44ac	; 0x44ac <ATTINY_get_SW_state>
     b64:	18 2f       	mov	r17, r24
		btnState2 = ATTINY_get_SW_state( ATTINY_SW4 );
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	0e 94 56 22 	call	0x44ac	; 0x44ac <ATTINY_get_SW_state>
     b6c:	08 2f       	mov	r16, r24
		btnState3 = ATTINY_get_SW_state( ATTINY_SW5 );
     b6e:	82 e0       	ldi	r24, 0x02	; 2
     b70:	0e 94 56 22 	call	0x44ac	; 0x44ac <ATTINY_get_SW_state>
     b74:	f8 2e       	mov	r15, r24
		//LCD_printf("btnStates: %d %d %d \n", btnState1, btnState2, btnState3);

		if( btnState1 == TRUE ) 
     b76:	11 30       	cpi	r17, 0x01	; 1
     b78:	19 f0       	breq	.+6      	; 0xb80 <WaitButton+0x36>
     b7a:	c0 e0       	ldi	r28, 0x00	; 0
     b7c:	d0 e0       	ldi	r29, 0x00	; 0
     b7e:	13 c0       	rjmp	.+38     	; 0xba6 <WaitButton+0x5c>
		{
			LCD_printf( "SW1: Pushed\n");
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	91 e0       	ldi	r25, 0x01	; 1
     b84:	0e 94 9a 38 	call	0x7134	; 0x7134 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b00100000 );//turn the red LED on
     b88:	80 e2       	ldi	r24, 0x20	; 32
     b8a:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     b8e:	84 ef       	ldi	r24, 0xF4	; 244
     b90:	91 e0       	ldi	r25, 0x01	; 1
     b92:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <TMRSRVC_delay>
               		LED_clr_pattern( 0b01000000 );//turn the green LED off
     b96:	80 e4       	ldi	r24, 0x40	; 64
     b98:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     b9c:	80 e2       	ldi	r24, 0x20	; 32
     b9e:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LED_clr_pattern>
     ba2:	c1 e0       	ldi	r28, 0x01	; 1
     ba4:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=1;
			}//end if button 1 state open

		if( btnState2 == TRUE ) 
     ba6:	01 30       	cpi	r16, 0x01	; 1
     ba8:	99 f4       	brne	.+38     	; 0xbd0 <WaitButton+0x86>
		{
			LCD_printf( "SW2: Pushed\n");
     baa:	8c e0       	ldi	r24, 0x0C	; 12
     bac:	91 e0       	ldi	r25, 0x01	; 1
     bae:	0e 94 9a 38 	call	0x7134	; 0x7134 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bb2:	80 e4       	ldi	r24, 0x40	; 64
     bb4:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bc0:	80 e4       	ldi	r24, 0x40	; 64
     bc2:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bc6:	80 e2       	ldi	r24, 0x20	; 32
     bc8:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LED_clr_pattern>
     bcc:	c2 e0       	ldi	r28, 0x02	; 2
     bce:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=2;
		}//end if btn 2 open

		if ( btnState3 == TRUE ) 
     bd0:	81 e0       	ldi	r24, 0x01	; 1
     bd2:	f8 16       	cp	r15, r24
     bd4:	b1 f4       	brne	.+44     	; 0xc02 <WaitButton+0xb8>
		{
			LCD_printf( "SW3: Pushed\n");
     bd6:	88 e1       	ldi	r24, 0x18	; 24
     bd8:	91 e0       	ldi	r25, 0x01	; 1
     bda:	0e 94 9a 38 	call	0x7134	; 0x7134 <puts>
			// TMRSRVC_delay(500);//wait 1 s

	                // Assume the LED subsystem opened successfully.
        	        LED_set_pattern( 0b01000000 );//turn the green LED on
     bde:	80 e4       	ldi	r24, 0x40	; 64
     be0:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <LED_set_pattern>
                	LED_set_pattern( 0b00100000 );//turn the red LED on
     be4:	80 e2       	ldi	r24, 0x20	; 32
     be6:	0e 94 27 1d 	call	0x3a4e	; 0x3a4e <LED_set_pattern>
                	TMRSRVC_delay(500);//wait 2 seconds
     bea:	84 ef       	ldi	r24, 0xF4	; 244
     bec:	91 e0       	ldi	r25, 0x01	; 1
     bee:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <TMRSRVC_delay>
                	LED_clr_pattern( 0b01000000 );//turn the green LED off
     bf2:	80 e4       	ldi	r24, 0x40	; 64
     bf4:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LED_clr_pattern>
                	LED_clr_pattern( 0b00100000 );//turn the red LED off
     bf8:	80 e2       	ldi	r24, 0x20	; 32
     bfa:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <LED_clr_pattern>
     bfe:	c3 e0       	ldi	r28, 0x03	; 3
     c00:	d0 e0       	ldi	r29, 0x00	; 0
			rtnValue=3;
		}//end if btn 3 open
            	LCD_clear();
     c02:	0e 94 18 1c 	call	0x3830	; 0x3830 <LCD_clear>
		return rtnValue;
	}//end AT while

}//end the WaitButton() function
     c06:	ce 01       	movw	r24, r28
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	1f 91       	pop	r17
     c0e:	0f 91       	pop	r16
     c10:	ff 90       	pop	r15
     c12:	08 95       	ret

00000c14 <prefilter>:
* Overview:			This appies a prefilter to the IR data by
*					storing the history of measurements within the
*					an arrayand calculating a running average
********************************************************************/
void prefilter(char reset)
{	
     c14:	2f 92       	push	r2
     c16:	3f 92       	push	r3
     c18:	4f 92       	push	r4
     c1a:	5f 92       	push	r5
     c1c:	6f 92       	push	r6
     c1e:	7f 92       	push	r7
     c20:	8f 92       	push	r8
     c22:	9f 92       	push	r9
     c24:	af 92       	push	r10
     c26:	bf 92       	push	r11
     c28:	cf 92       	push	r12
     c2a:	df 92       	push	r13
     c2c:	ef 92       	push	r14
     c2e:	ff 92       	push	r15
     c30:	0f 93       	push	r16
     c32:	1f 93       	push	r17
     c34:	df 93       	push	r29
     c36:	cf 93       	push	r28
     c38:	cd b7       	in	r28, 0x3d	; 61
     c3a:	de b7       	in	r29, 0x3e	; 62
     c3c:	64 97       	sbiw	r28, 0x14	; 20
     c3e:	0f b6       	in	r0, 0x3f	; 63
     c40:	f8 94       	cli
     c42:	de bf       	out	0x3e, r29	; 62
     c44:	0f be       	out	0x3f, r0	; 63
     c46:	cd bf       	out	0x3d, r28	; 61
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
     c48:	88 23       	and	r24, r24
     c4a:	39 f5       	brne	.+78     	; 0xc9a <prefilter+0x86>
     c4c:	83 ec       	ldi	r24, 0xC3	; 195
     c4e:	94 e0       	ldi	r25, 0x04	; 4
     c50:	9c 8b       	std	Y+20, r25	; 0x14
     c52:	8b 8b       	std	Y+19, r24	; 0x13
     c54:	a7 ee       	ldi	r26, 0xE7	; 231
     c56:	b6 e0       	ldi	r27, 0x06	; 6
     c58:	be 83       	std	Y+6, r27	; 0x06
     c5a:	ad 83       	std	Y+5, r26	; 0x05
     c5c:	ee ed       	ldi	r30, 0xDE	; 222
     c5e:	f5 e0       	ldi	r31, 0x05	; 5
     c60:	fc 83       	std	Y+4, r31	; 0x04
     c62:	eb 83       	std	Y+3, r30	; 0x03
     c64:	8b e4       	ldi	r24, 0x4B	; 75
     c66:	95 e0       	ldi	r25, 0x05	; 5
     c68:	9a 83       	std	Y+2, r25	; 0x02
     c6a:	89 83       	std	Y+1, r24	; 0x01
     c6c:	0f 2e       	mov	r0, r31
     c6e:	f0 e0       	ldi	r31, 0x00	; 0
     c70:	2f 2e       	mov	r2, r31
     c72:	f0 e0       	ldi	r31, 0x00	; 0
     c74:	3f 2e       	mov	r3, r31
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	4f 2e       	mov	r4, r31
     c7a:	f0 e0       	ldi	r31, 0x00	; 0
     c7c:	5f 2e       	mov	r5, r31
     c7e:	f0 2d       	mov	r31, r0
     c80:	2f 86       	std	Y+15, r2	; 0x0f
     c82:	38 8a       	std	Y+16, r3	; 0x10
     c84:	49 8a       	std	Y+17, r4	; 0x11
     c86:	5a 8a       	std	Y+18, r5	; 0x12
     c88:	2b 86       	std	Y+11, r2	; 0x0b
     c8a:	3c 86       	std	Y+12, r3	; 0x0c
     c8c:	4d 86       	std	Y+13, r4	; 0x0d
     c8e:	5e 86       	std	Y+14, r5	; 0x0e
     c90:	2f 82       	std	Y+7, r2	; 0x07
     c92:	38 86       	std	Y+8, r3	; 0x08
     c94:	49 86       	std	Y+9, r4	; 0x09
     c96:	5a 86       	std	Y+10, r5	; 0x0a
     c98:	43 c0       	rjmp	.+134    	; 0xd20 <prefilter+0x10c>
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     c9a:	a0 90 6e 06 	lds	r10, 0x066E
     c9e:	b0 90 6f 06 	lds	r11, 0x066F
     ca2:	c0 90 70 06 	lds	r12, 0x0670
     ca6:	d0 90 71 06 	lds	r13, 0x0671
			rtIR_old[i] = rtIR;
     caa:	e0 90 73 06 	lds	r14, 0x0673
     cae:	f0 90 74 06 	lds	r15, 0x0674
     cb2:	00 91 75 06 	lds	r16, 0x0675
     cb6:	10 91 76 06 	lds	r17, 0x0676
			ftIR_old[i] = ftIR;
     cba:	20 90 cb 04 	lds	r2, 0x04CB
     cbe:	30 90 cc 04 	lds	r3, 0x04CC
     cc2:	40 90 cd 04 	lds	r4, 0x04CD
     cc6:	50 90 ce 04 	lds	r5, 0x04CE
			bkIR_old[i] = bkIR;
     cca:	20 91 d5 04 	lds	r18, 0x04D5
     cce:	30 91 d6 04 	lds	r19, 0x04D6
     cd2:	40 91 d7 04 	lds	r20, 0x04D7
     cd6:	50 91 d8 04 	lds	r21, 0x04D8
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
		{
			ltIR_old[i] = ltIR;
     cde:	fc 01       	movw	r30, r24
     ce0:	ed 5a       	subi	r30, 0xAD	; 173
     ce2:	fb 4f       	sbci	r31, 0xFB	; 251
     ce4:	a0 82       	st	Z, r10
     ce6:	b1 82       	std	Z+1, r11	; 0x01
     ce8:	c2 82       	std	Z+2, r12	; 0x02
     cea:	d3 82       	std	Z+3, r13	; 0x03
			rtIR_old[i] = rtIR;
     cec:	fc 01       	movw	r30, r24
     cee:	e9 58       	subi	r30, 0x89	; 137
     cf0:	f9 4f       	sbci	r31, 0xF9	; 249
     cf2:	e0 82       	st	Z, r14
     cf4:	f1 82       	std	Z+1, r15	; 0x01
     cf6:	02 83       	std	Z+2, r16	; 0x02
     cf8:	13 83       	std	Z+3, r17	; 0x03
			ftIR_old[i] = ftIR;
     cfa:	fc 01       	movw	r30, r24
     cfc:	e2 59       	subi	r30, 0x92	; 146
     cfe:	fa 4f       	sbci	r31, 0xFA	; 250
     d00:	20 82       	st	Z, r2
     d02:	31 82       	std	Z+1, r3	; 0x01
     d04:	42 82       	std	Z+2, r4	; 0x02
     d06:	53 82       	std	Z+3, r5	; 0x03
			bkIR_old[i] = bkIR;
     d08:	fc 01       	movw	r30, r24
     d0a:	e5 52       	subi	r30, 0x25	; 37
     d0c:	fb 4f       	sbci	r31, 0xFB	; 251
     d0e:	20 83       	st	Z, r18
     d10:	31 83       	std	Z+1, r19	; 0x01
     d12:	42 83       	std	Z+2, r20	; 0x02
     d14:	53 83       	std	Z+3, r21	; 0x03
     d16:	04 96       	adiw	r24, 0x04	; 4
	int i;
	// if reset is true, 
	// set all the values within the array to the current measurement
	if(reset)
	{
		for (i = 0; i < PREFILTER_SIZE; i++)
     d18:	88 37       	cpi	r24, 0x78	; 120
     d1a:	91 05       	cpc	r25, r1
     d1c:	01 f7       	brne	.-64     	; 0xcde <prefilter+0xca>
     d1e:	96 cf       	rjmp	.-212    	; 0xc4c <prefilter+0x38>
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
	{
		j = i - 1;
		ltIR_old[i] = ltIR_old[j];
     d20:	ab 89       	ldd	r26, Y+19	; 0x13
     d22:	bc 89       	ldd	r27, Y+20	; 0x14
     d24:	2d 91       	ld	r18, X+
     d26:	3d 91       	ld	r19, X+
     d28:	4d 91       	ld	r20, X+
     d2a:	5c 91       	ld	r21, X
     d2c:	13 97       	sbiw	r26, 0x03	; 3
     d2e:	fd 01       	movw	r30, r26
     d30:	24 83       	std	Z+4, r18	; 0x04
     d32:	35 83       	std	Z+5, r19	; 0x05
     d34:	46 83       	std	Z+6, r20	; 0x06
     d36:	57 83       	std	Z+7, r21	; 0x07
		rtIR_old[i] = rtIR_old[j];
     d38:	ad 81       	ldd	r26, Y+5	; 0x05
     d3a:	be 81       	ldd	r27, Y+6	; 0x06
     d3c:	ed 90       	ld	r14, X+
     d3e:	fd 90       	ld	r15, X+
     d40:	0d 91       	ld	r16, X+
     d42:	1c 91       	ld	r17, X
     d44:	13 97       	sbiw	r26, 0x03	; 3
     d46:	fd 01       	movw	r30, r26
     d48:	e4 82       	std	Z+4, r14	; 0x04
     d4a:	f5 82       	std	Z+5, r15	; 0x05
     d4c:	06 83       	std	Z+6, r16	; 0x06
     d4e:	17 83       	std	Z+7, r17	; 0x07
		ftIR_old[i] = ftIR_old[j];
     d50:	ab 81       	ldd	r26, Y+3	; 0x03
     d52:	bc 81       	ldd	r27, Y+4	; 0x04
     d54:	ad 90       	ld	r10, X+
     d56:	bd 90       	ld	r11, X+
     d58:	cd 90       	ld	r12, X+
     d5a:	dc 90       	ld	r13, X
     d5c:	13 97       	sbiw	r26, 0x03	; 3
     d5e:	fd 01       	movw	r30, r26
     d60:	a4 82       	std	Z+4, r10	; 0x04
     d62:	b5 82       	std	Z+5, r11	; 0x05
     d64:	c6 82       	std	Z+6, r12	; 0x06
     d66:	d7 82       	std	Z+7, r13	; 0x07
		bkIR_old[i] = bkIR_old[j];
     d68:	a9 81       	ldd	r26, Y+1	; 0x01
     d6a:	ba 81       	ldd	r27, Y+2	; 0x02
     d6c:	6d 90       	ld	r6, X+
     d6e:	7d 90       	ld	r7, X+
     d70:	8d 90       	ld	r8, X+
     d72:	9c 90       	ld	r9, X
     d74:	13 97       	sbiw	r26, 0x03	; 3
     d76:	fd 01       	movw	r30, r26
     d78:	64 82       	std	Z+4, r6	; 0x04
     d7a:	75 82       	std	Z+5, r7	; 0x05
     d7c:	86 82       	std	Z+6, r8	; 0x06
     d7e:	97 82       	std	Z+7, r9	; 0x07
		ltIR_new += ltIR_old[i];
     d80:	c2 01       	movw	r24, r4
     d82:	b1 01       	movw	r22, r2
     d84:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
     d88:	1b 01       	movw	r2, r22
     d8a:	2c 01       	movw	r4, r24
		rtIR_new += rtIR_old[i];
     d8c:	6f 85       	ldd	r22, Y+15	; 0x0f
     d8e:	78 89       	ldd	r23, Y+16	; 0x10
     d90:	89 89       	ldd	r24, Y+17	; 0x11
     d92:	9a 89       	ldd	r25, Y+18	; 0x12
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
     d9c:	6f 87       	std	Y+15, r22	; 0x0f
     d9e:	78 8b       	std	Y+16, r23	; 0x10
     da0:	89 8b       	std	Y+17, r24	; 0x11
     da2:	9a 8b       	std	Y+18, r25	; 0x12
		ftIR_new += ftIR_old[i];
     da4:	6b 85       	ldd	r22, Y+11	; 0x0b
     da6:	7c 85       	ldd	r23, Y+12	; 0x0c
     da8:	8d 85       	ldd	r24, Y+13	; 0x0d
     daa:	9e 85       	ldd	r25, Y+14	; 0x0e
     dac:	a6 01       	movw	r20, r12
     dae:	95 01       	movw	r18, r10
     db0:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
     db4:	6b 87       	std	Y+11, r22	; 0x0b
     db6:	7c 87       	std	Y+12, r23	; 0x0c
     db8:	8d 87       	std	Y+13, r24	; 0x0d
     dba:	9e 87       	std	Y+14, r25	; 0x0e
		bkIR_new += bkIR_old[i];
     dbc:	6f 81       	ldd	r22, Y+7	; 0x07
     dbe:	78 85       	ldd	r23, Y+8	; 0x08
     dc0:	89 85       	ldd	r24, Y+9	; 0x09
     dc2:	9a 85       	ldd	r25, Y+10	; 0x0a
     dc4:	a4 01       	movw	r20, r8
     dc6:	93 01       	movw	r18, r6
     dc8:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
     dcc:	6f 83       	std	Y+7, r22	; 0x07
     dce:	78 87       	std	Y+8, r23	; 0x08
     dd0:	89 87       	std	Y+9, r24	; 0x09
     dd2:	9a 87       	std	Y+10, r25	; 0x0a
     dd4:	8b 89       	ldd	r24, Y+19	; 0x13
     dd6:	9c 89       	ldd	r25, Y+20	; 0x14
     dd8:	04 97       	sbiw	r24, 0x04	; 4
     dda:	9c 8b       	std	Y+20, r25	; 0x14
     ddc:	8b 8b       	std	Y+19, r24	; 0x13
     dde:	ad 81       	ldd	r26, Y+5	; 0x05
     de0:	be 81       	ldd	r27, Y+6	; 0x06
     de2:	14 97       	sbiw	r26, 0x04	; 4
     de4:	be 83       	std	Y+6, r27	; 0x06
     de6:	ad 83       	std	Y+5, r26	; 0x05
     de8:	eb 81       	ldd	r30, Y+3	; 0x03
     dea:	fc 81       	ldd	r31, Y+4	; 0x04
     dec:	34 97       	sbiw	r30, 0x04	; 4
     dee:	fc 83       	std	Y+4, r31	; 0x04
     df0:	eb 83       	std	Y+3, r30	; 0x03
     df2:	89 81       	ldd	r24, Y+1	; 0x01
     df4:	9a 81       	ldd	r25, Y+2	; 0x02
     df6:	04 97       	sbiw	r24, 0x04	; 4
     df8:	9a 83       	std	Y+2, r25	; 0x02
     dfa:	89 83       	std	Y+1, r24	; 0x01
	float ftIR_new = 0;
	float bkIR_new = 0;
	
	// Loop through the entire array and shift each element forward
	// and calculate a running sum simultaneously
	for (i = PREFILTER_SIZE-1; i >= 0 ; i--)
     dfc:	ab 89       	ldd	r26, Y+19	; 0x13
     dfe:	bc 89       	ldd	r27, Y+20	; 0x14
     e00:	ab 54       	subi	r26, 0x4B	; 75
     e02:	b4 40       	sbci	r27, 0x04	; 4
     e04:	09 f0       	breq	.+2      	; 0xe08 <prefilter+0x1f4>
     e06:	8c cf       	rjmp	.-232    	; 0xd20 <prefilter+0x10c>
		bkIR_new += bkIR_old[i];
	}
	
	// Set the current reading to the first element 
	// within the historical array
	ltIR_old[0] = ltIR;
     e08:	80 91 6e 06 	lds	r24, 0x066E
     e0c:	90 91 6f 06 	lds	r25, 0x066F
     e10:	a0 91 70 06 	lds	r26, 0x0670
     e14:	b0 91 71 06 	lds	r27, 0x0671
     e18:	eb 89       	ldd	r30, Y+19	; 0x13
     e1a:	fc 89       	ldd	r31, Y+20	; 0x14
     e1c:	80 87       	std	Z+8, r24	; 0x08
     e1e:	91 87       	std	Z+9, r25	; 0x09
     e20:	a2 87       	std	Z+10, r26	; 0x0a
     e22:	b3 87       	std	Z+11, r27	; 0x0b
	rtIR_old[0] = rtIR;
     e24:	80 91 73 06 	lds	r24, 0x0673
     e28:	90 91 74 06 	lds	r25, 0x0674
     e2c:	a0 91 75 06 	lds	r26, 0x0675
     e30:	b0 91 76 06 	lds	r27, 0x0676
     e34:	80 93 77 06 	sts	0x0677, r24
     e38:	90 93 78 06 	sts	0x0678, r25
     e3c:	a0 93 79 06 	sts	0x0679, r26
     e40:	b0 93 7a 06 	sts	0x067A, r27
	ftIR_old[0] = ftIR;
     e44:	80 91 cb 04 	lds	r24, 0x04CB
     e48:	90 91 cc 04 	lds	r25, 0x04CC
     e4c:	a0 91 cd 04 	lds	r26, 0x04CD
     e50:	b0 91 ce 04 	lds	r27, 0x04CE
     e54:	80 93 6e 05 	sts	0x056E, r24
     e58:	90 93 6f 05 	sts	0x056F, r25
     e5c:	a0 93 70 05 	sts	0x0570, r26
     e60:	b0 93 71 05 	sts	0x0571, r27
	bkIR_old[0] = bkIR;
     e64:	80 91 d5 04 	lds	r24, 0x04D5
     e68:	90 91 d6 04 	lds	r25, 0x04D6
     e6c:	a0 91 d7 04 	lds	r26, 0x04D7
     e70:	b0 91 d8 04 	lds	r27, 0x04D8
     e74:	80 93 db 04 	sts	0x04DB, r24
     e78:	90 93 dc 04 	sts	0x04DC, r25
     e7c:	a0 93 dd 04 	sts	0x04DD, r26
     e80:	b0 93 de 04 	sts	0x04DE, r27
	
	// Calculate the average value within the array
	// and said that as the new current measurement
	ltIR = ltIR_new/PREFILTER_SIZE;
     e84:	c2 01       	movw	r24, r4
     e86:	b1 01       	movw	r22, r2
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	40 ef       	ldi	r20, 0xF0	; 240
     e8e:	51 e4       	ldi	r21, 0x41	; 65
     e90:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
     e94:	60 93 6e 06 	sts	0x066E, r22
     e98:	70 93 6f 06 	sts	0x066F, r23
     e9c:	80 93 70 06 	sts	0x0670, r24
     ea0:	90 93 71 06 	sts	0x0671, r25
	rtIR = rtIR_new/PREFILTER_SIZE;
     ea4:	6f 85       	ldd	r22, Y+15	; 0x0f
     ea6:	78 89       	ldd	r23, Y+16	; 0x10
     ea8:	89 89       	ldd	r24, Y+17	; 0x11
     eaa:	9a 89       	ldd	r25, Y+18	; 0x12
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	40 ef       	ldi	r20, 0xF0	; 240
     eb2:	51 e4       	ldi	r21, 0x41	; 65
     eb4:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
     eb8:	60 93 73 06 	sts	0x0673, r22
     ebc:	70 93 74 06 	sts	0x0674, r23
     ec0:	80 93 75 06 	sts	0x0675, r24
     ec4:	90 93 76 06 	sts	0x0676, r25
	ftIR = ftIR_new/PREFILTER_SIZE;
     ec8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eca:	7c 85       	ldd	r23, Y+12	; 0x0c
     ecc:	8d 85       	ldd	r24, Y+13	; 0x0d
     ece:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed0:	20 e0       	ldi	r18, 0x00	; 0
     ed2:	30 e0       	ldi	r19, 0x00	; 0
     ed4:	40 ef       	ldi	r20, 0xF0	; 240
     ed6:	51 e4       	ldi	r21, 0x41	; 65
     ed8:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
     edc:	60 93 cb 04 	sts	0x04CB, r22
     ee0:	70 93 cc 04 	sts	0x04CC, r23
     ee4:	80 93 cd 04 	sts	0x04CD, r24
     ee8:	90 93 ce 04 	sts	0x04CE, r25
	bkIR = bkIR_new/PREFILTER_SIZE;
     eec:	6f 81       	ldd	r22, Y+7	; 0x07
     eee:	78 85       	ldd	r23, Y+8	; 0x08
     ef0:	89 85       	ldd	r24, Y+9	; 0x09
     ef2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef4:	20 e0       	ldi	r18, 0x00	; 0
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	40 ef       	ldi	r20, 0xF0	; 240
     efa:	51 e4       	ldi	r21, 0x41	; 65
     efc:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
     f00:	60 93 d5 04 	sts	0x04D5, r22
     f04:	70 93 d6 04 	sts	0x04D6, r23
     f08:	80 93 d7 04 	sts	0x04D7, r24
     f0c:	90 93 d8 04 	sts	0x04D8, r25
}
     f10:	64 96       	adiw	r28, 0x14	; 20
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	cf 91       	pop	r28
     f1e:	df 91       	pop	r29
     f20:	1f 91       	pop	r17
     f22:	0f 91       	pop	r16
     f24:	ff 90       	pop	r15
     f26:	ef 90       	pop	r14
     f28:	df 90       	pop	r13
     f2a:	cf 90       	pop	r12
     f2c:	bf 90       	pop	r11
     f2e:	af 90       	pop	r10
     f30:	9f 90       	pop	r9
     f32:	8f 90       	pop	r8
     f34:	7f 90       	pop	r7
     f36:	6f 90       	pop	r6
     f38:	5f 90       	pop	r5
     f3a:	4f 90       	pop	r4
     f3c:	3f 90       	pop	r3
     f3e:	2f 90       	pop	r2
     f40:	08 95       	ret

00000f42 <pidController>:
* Output Return:	float
* Overview:			This computes the control effort using a PID 
*					controller approach
********************************************************************/
float pidController(float error, char reset )
{	
     f42:	af 92       	push	r10
     f44:	bf 92       	push	r11
     f46:	cf 92       	push	r12
     f48:	df 92       	push	r13
     f4a:	ef 92       	push	r14
     f4c:	ff 92       	push	r15
     f4e:	0f 93       	push	r16
     f50:	1f 93       	push	r17
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	// Reset the integrator error if specified
	if(reset){
     f56:	44 23       	and	r20, r20
     f58:	61 f0       	breq	.+24     	; 0xf72 <pidController+0x30>
		Ierror = 0;
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	90 e0       	ldi	r25, 0x00	; 0
     f5e:	a0 e0       	ldi	r26, 0x00	; 0
     f60:	b0 e0       	ldi	r27, 0x00	; 0
     f62:	80 93 cf 04 	sts	0x04CF, r24
     f66:	90 93 d0 04 	sts	0x04D0, r25
     f6a:	a0 93 d1 04 	sts	0x04D1, r26
     f6e:	b0 93 d2 04 	sts	0x04D2, r27
	}
	// At the current error to the running sum
	Ierror += error;
     f72:	c8 01       	movw	r24, r16
     f74:	b7 01       	movw	r22, r14
     f76:	20 91 cf 04 	lds	r18, 0x04CF
     f7a:	30 91 d0 04 	lds	r19, 0x04D0
     f7e:	40 91 d1 04 	lds	r20, 0x04D1
     f82:	50 91 d2 04 	lds	r21, 0x04D2
     f86:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
     f8a:	5b 01       	movw	r10, r22
     f8c:	6c 01       	movw	r12, r24
     f8e:	60 93 cf 04 	sts	0x04CF, r22
     f92:	70 93 d0 04 	sts	0x04D0, r23
     f96:	80 93 d1 04 	sts	0x04D1, r24
     f9a:	90 93 d2 04 	sts	0x04D2, r25
     f9e:	c8 01       	movw	r24, r16
     fa0:	b7 01       	movw	r22, r14
     fa2:	20 91 6a 05 	lds	r18, 0x056A
     fa6:	30 91 6b 05 	lds	r19, 0x056B
     faa:	40 91 6c 05 	lds	r20, 0x056C
     fae:	50 91 6d 05 	lds	r21, 0x056D
     fb2:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__subsf3>
     fb6:	20 e0       	ldi	r18, 0x00	; 0
     fb8:	30 e0       	ldi	r19, 0x00	; 0
     fba:	40 e0       	ldi	r20, 0x00	; 0
     fbc:	50 e0       	ldi	r21, 0x00	; 0
     fbe:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
     fc2:	9b 01       	movw	r18, r22
     fc4:	ac 01       	movw	r20, r24
     fc6:	c8 01       	movw	r24, r16
     fc8:	b7 01       	movw	r22, r14
     fca:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
     fce:	7b 01       	movw	r14, r22
     fd0:	8c 01       	movw	r16, r24
     fd2:	c6 01       	movw	r24, r12
     fd4:	b5 01       	movw	r22, r10
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
     fe2:	9b 01       	movw	r18, r22
     fe4:	ac 01       	movw	r20, r24
     fe6:	c8 01       	movw	r24, r16
     fe8:	b7 01       	movw	r22, r14
     fea:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
	
	// Use the PID controller approach to calculate the effort
	float effort = (KP*error) + (KD*(error-error_old)) + (KI*Ierror);
	
	return effort;	
}
     fee:	1f 91       	pop	r17
     ff0:	0f 91       	pop	r16
     ff2:	ff 90       	pop	r15
     ff4:	ef 90       	pop	r14
     ff6:	df 90       	pop	r13
     ff8:	cf 90       	pop	r12
     ffa:	bf 90       	pop	r11
     ffc:	af 90       	pop	r10
     ffe:	08 95       	ret

00001000 <rotateCell>:
	unsigned char cell = worldCell;
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
    1000:	44 23       	and	r20, r20
    1002:	81 f0       	breq	.+32     	; 0x1024 <rotateCell+0x24>
    1004:	06 c0       	rjmp	.+12     	; 0x1012 <rotateCell+0x12>
		while (orient!=0){
			// use the shift array to left rotate
			cell = shiftedL[cell];
    1006:	e8 2f       	mov	r30, r24
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	ec 5d       	subi	r30, 0xDC	; 220
    100c:	fe 4f       	sbci	r31, 0xFE	; 254
    100e:	80 81       	ld	r24, Z
			orient--;
    1010:	61 50       	subi	r22, 0x01	; 1
	
	// Use the given orientation as a counter 
	// to know the number of rotations to correct the map
	// for the robots current orientation
	if(L){
		while (orient!=0){
    1012:	66 23       	and	r22, r22
    1014:	c1 f7       	brne	.-16     	; 0x1006 <rotateCell+0x6>
    1016:	08 95       	ret
		}
	}
	else{
		while (orient!=0){
			// use the shift array to right rotate
			cell = shiftedR[cell];
    1018:	e8 2f       	mov	r30, r24
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	ec 5c       	subi	r30, 0xCC	; 204
    101e:	fe 4f       	sbci	r31, 0xFE	; 254
    1020:	80 81       	ld	r24, Z
			orient--;
    1022:	61 50       	subi	r22, 0x01	; 1
			cell = shiftedL[cell];
			orient--;
		}
	}
	else{
		while (orient!=0){
    1024:	66 23       	and	r22, r22
    1026:	c1 f7       	brne	.-16     	; 0x1018 <rotateCell+0x18>
			cell = shiftedR[cell];
			orient--;
		}
	}
	return cell;
}
    1028:	08 95       	ret

0000102a <move_arc_stnb>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stnb(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    102a:	2f 92       	push	r2
    102c:	3f 92       	push	r3
    102e:	4f 92       	push	r4
    1030:	5f 92       	push	r5
    1032:	6f 92       	push	r6
    1034:	7f 92       	push	r7
    1036:	8f 92       	push	r8
    1038:	9f 92       	push	r9
    103a:	af 92       	push	r10
    103c:	bf 92       	push	r11
    103e:	cf 92       	push	r12
    1040:	df 92       	push	r13
    1042:	ef 92       	push	r14
    1044:	ff 92       	push	r15
    1046:	0f 93       	push	r16
    1048:	1f 93       	push	r17
    104a:	df 93       	push	r29
    104c:	cf 93       	push	r28
    104e:	cd b7       	in	r28, 0x3d	; 61
    1050:	de b7       	in	r29, 0x3e	; 62
    1052:	a0 97       	sbiw	r28, 0x20	; 32
    1054:	0f b6       	in	r0, 0x3f	; 63
    1056:	f8 94       	cli
    1058:	de bf       	out	0x3e, r29	; 62
    105a:	0f be       	out	0x3f, r0	; 63
    105c:	cd bf       	out	0x3d, r28	; 61
    105e:	2b 01       	movw	r4, r22
    1060:	3c 01       	movw	r6, r24
    1062:	2d 83       	std	Y+5, r18	; 0x05
    1064:	3e 83       	std	Y+6, r19	; 0x06
    1066:	4f 83       	std	Y+7, r20	; 0x07
    1068:	58 87       	std	Y+8, r21	; 0x08
    106a:	e9 86       	std	Y+9, r14	; 0x09
    106c:	fa 86       	std	Y+10, r15	; 0x0a
    106e:	0b 87       	std	Y+11, r16	; 0x0b
    1070:	1c 87       	std	Y+12, r17	; 0x0c
    1072:	ad 86       	std	Y+13, r10	; 0x0d
    1074:	be 86       	std	Y+14, r11	; 0x0e
    1076:	cf 86       	std	Y+15, r12	; 0x0f
    1078:	d8 8a       	std	Y+16, r13	; 0x10
    107a:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    107c:	33 24       	eor	r3, r3
    107e:	ca 01       	movw	r24, r20
    1080:	b9 01       	movw	r22, r18
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e0       	ldi	r20, 0x00	; 0
    1088:	50 e0       	ldi	r21, 0x00	; 0
    108a:	0e 94 83 30 	call	0x6106	; 0x6106 <__gesf2>
    108e:	18 16       	cp	r1, r24
    1090:	14 f4       	brge	.+4      	; 0x1096 <move_arc_stnb+0x6c>
    1092:	33 24       	eor	r3, r3
    1094:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    1096:	6d 81       	ldd	r22, Y+5	; 0x05
    1098:	7e 81       	ldd	r23, Y+6	; 0x06
    109a:	8f 81       	ldd	r24, Y+7	; 0x07
    109c:	98 85       	ldd	r25, Y+8	; 0x08
    109e:	2c ed       	ldi	r18, 0xDC	; 220
    10a0:	38 eb       	ldi	r19, 0xB8	; 184
    10a2:	48 e0       	ldi	r20, 0x08	; 8
    10a4:	5e e3       	ldi	r21, 0x3E	; 62
    10a6:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    10aa:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fixsfsi>
    10ae:	9b 01       	movw	r18, r22
    10b0:	77 ff       	sbrs	r23, 7
    10b2:	03 c0       	rjmp	.+6      	; 0x10ba <move_arc_stnb+0x90>
    10b4:	30 95       	com	r19
    10b6:	21 95       	neg	r18
    10b8:	3f 4f       	sbci	r19, 0xFF	; 255
    10ba:	b9 01       	movw	r22, r18
    10bc:	88 27       	eor	r24, r24
    10be:	77 fd       	sbrc	r23, 7
    10c0:	80 95       	com	r24
    10c2:	98 2f       	mov	r25, r24
    10c4:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__floatsisf>
    10c8:	69 83       	std	Y+1, r22	; 0x01
    10ca:	7a 83       	std	Y+2, r23	; 0x02
    10cc:	8b 83       	std	Y+3, r24	; 0x03
    10ce:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    10d0:	69 85       	ldd	r22, Y+9	; 0x09
    10d2:	7a 85       	ldd	r23, Y+10	; 0x0a
    10d4:	8b 85       	ldd	r24, Y+11	; 0x0b
    10d6:	9c 85       	ldd	r25, Y+12	; 0x0c
    10d8:	2c ed       	ldi	r18, 0xDC	; 220
    10da:	38 eb       	ldi	r19, 0xB8	; 184
    10dc:	48 e0       	ldi	r20, 0x08	; 8
    10de:	5e e3       	ldi	r21, 0x3E	; 62
    10e0:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    10e4:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fixsfsi>
    10e8:	9b 01       	movw	r18, r22
    10ea:	77 ff       	sbrs	r23, 7
    10ec:	03 c0       	rjmp	.+6      	; 0x10f4 <move_arc_stnb+0xca>
    10ee:	30 95       	com	r19
    10f0:	21 95       	neg	r18
    10f2:	3f 4f       	sbci	r19, 0xFF	; 255
    10f4:	b9 01       	movw	r22, r18
    10f6:	88 27       	eor	r24, r24
    10f8:	77 fd       	sbrc	r23, 7
    10fa:	80 95       	com	r24
    10fc:	98 2f       	mov	r25, r24
    10fe:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__floatsisf>
    1102:	4b 01       	movw	r8, r22
    1104:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1106:	6d 85       	ldd	r22, Y+13	; 0x0d
    1108:	7e 85       	ldd	r23, Y+14	; 0x0e
    110a:	8f 85       	ldd	r24, Y+15	; 0x0f
    110c:	98 89       	ldd	r25, Y+16	; 0x10
    110e:	2c ed       	ldi	r18, 0xDC	; 220
    1110:	38 eb       	ldi	r19, 0xB8	; 184
    1112:	48 e0       	ldi	r20, 0x08	; 8
    1114:	5e e3       	ldi	r21, 0x3E	; 62
    1116:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    111a:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fixsfsi>
    111e:	9b 01       	movw	r18, r22
    1120:	77 ff       	sbrs	r23, 7
    1122:	03 c0       	rjmp	.+6      	; 0x112a <move_arc_stnb+0x100>
    1124:	30 95       	com	r19
    1126:	21 95       	neg	r18
    1128:	3f 4f       	sbci	r19, 0xFF	; 255
    112a:	b9 01       	movw	r22, r18
    112c:	88 27       	eor	r24, r24
    112e:	77 fd       	sbrc	r23, 7
    1130:	80 95       	com	r24
    1132:	98 2f       	mov	r25, r24
    1134:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__floatsisf>
    1138:	6b 01       	movw	r12, r22
    113a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    113c:	c3 01       	movw	r24, r6
    113e:	b2 01       	movw	r22, r4
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e0       	ldi	r20, 0x00	; 0
    1146:	5f e4       	ldi	r21, 0x4F	; 79
    1148:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    114c:	88 23       	and	r24, r24
    114e:	a1 f5       	brne	.+104    	; 0x11b8 <move_arc_stnb+0x18e>
		STEPPER_move_stnb( STEPPER_BOTH, 
    1150:	69 81       	ldd	r22, Y+1	; 0x01
    1152:	7a 81       	ldd	r23, Y+2	; 0x02
    1154:	8b 81       	ldd	r24, Y+3	; 0x03
    1156:	9c 81       	ldd	r25, Y+4	; 0x04
    1158:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    115c:	2b 01       	movw	r4, r22
    115e:	3c 01       	movw	r6, r24
    1160:	c5 01       	movw	r24, r10
    1162:	b4 01       	movw	r22, r8
    1164:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1168:	4b 01       	movw	r8, r22
    116a:	5c 01       	movw	r10, r24
    116c:	c7 01       	movw	r24, r14
    116e:	b6 01       	movw	r22, r12
    1170:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1174:	6b 01       	movw	r12, r22
    1176:	7c 01       	movw	r14, r24
    1178:	2d b7       	in	r18, 0x3d	; 61
    117a:	3e b7       	in	r19, 0x3e	; 62
    117c:	29 50       	subi	r18, 0x09	; 9
    117e:	30 40       	sbci	r19, 0x00	; 0
    1180:	0f b6       	in	r0, 0x3f	; 63
    1182:	f8 94       	cli
    1184:	3e bf       	out	0x3e, r19	; 62
    1186:	0f be       	out	0x3f, r0	; 63
    1188:	2d bf       	out	0x3d, r18	; 61
    118a:	ed b7       	in	r30, 0x3d	; 61
    118c:	fe b7       	in	r31, 0x3e	; 62
    118e:	31 96       	adiw	r30, 0x01	; 1
    1190:	ad b7       	in	r26, 0x3d	; 61
    1192:	be b7       	in	r27, 0x3e	; 62
    1194:	12 96       	adiw	r26, 0x02	; 2
    1196:	5c 92       	st	X, r5
    1198:	4e 92       	st	-X, r4
    119a:	11 97       	sbiw	r26, 0x01	; 1
    119c:	93 82       	std	Z+3, r9	; 0x03
    119e:	82 82       	std	Z+2, r8	; 0x02
    11a0:	75 83       	std	Z+5, r23	; 0x05
    11a2:	64 83       	std	Z+4, r22	; 0x04
    11a4:	26 82       	std	Z+6, r2	; 0x06
    11a6:	10 86       	std	Z+8, r1	; 0x08
    11a8:	17 82       	std	Z+7, r1	; 0x07
    11aa:	81 e0       	ldi	r24, 0x01	; 1
    11ac:	62 e0       	ldi	r22, 0x02	; 2
    11ae:	43 2d       	mov	r20, r3
    11b0:	92 01       	movw	r18, r4
    11b2:	84 01       	movw	r16, r8
    11b4:	76 01       	movw	r14, r12
    11b6:	c1 c1       	rjmp	.+898    	; 0x153a <move_arc_stnb+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    11b8:	c3 01       	movw	r24, r6
    11ba:	b2 01       	movw	r22, r4
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e0       	ldi	r20, 0x00	; 0
    11c2:	50 e0       	ldi	r21, 0x00	; 0
    11c4:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	e9 f5       	brne	.+122    	; 0x1246 <move_arc_stnb+0x21c>
		STEPPER_move_stnb( STEPPER_BOTH, 
    11cc:	69 81       	ldd	r22, Y+1	; 0x01
    11ce:	7a 81       	ldd	r23, Y+2	; 0x02
    11d0:	8b 81       	ldd	r24, Y+3	; 0x03
    11d2:	9c 81       	ldd	r25, Y+4	; 0x04
    11d4:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    11d8:	3b 01       	movw	r6, r22
    11da:	c5 01       	movw	r24, r10
    11dc:	b4 01       	movw	r22, r8
    11de:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    11e2:	8b 01       	movw	r16, r22
    11e4:	c7 01       	movw	r24, r14
    11e6:	b6 01       	movw	r22, r12
    11e8:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    11ec:	7b 01       	movw	r14, r22
    11ee:	2d b7       	in	r18, 0x3d	; 61
    11f0:	3e b7       	in	r19, 0x3e	; 62
    11f2:	29 50       	subi	r18, 0x09	; 9
    11f4:	30 40       	sbci	r19, 0x00	; 0
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	3e bf       	out	0x3e, r19	; 62
    11fc:	0f be       	out	0x3f, r0	; 63
    11fe:	2d bf       	out	0x3d, r18	; 61
    1200:	ed b7       	in	r30, 0x3d	; 61
    1202:	fe b7       	in	r31, 0x3e	; 62
    1204:	31 96       	adiw	r30, 0x01	; 1
    1206:	40 e0       	ldi	r20, 0x00	; 0
    1208:	33 20       	and	r3, r3
    120a:	09 f4       	brne	.+2      	; 0x120e <move_arc_stnb+0x1e4>
    120c:	41 e0       	ldi	r20, 0x01	; 1
    120e:	71 82       	std	Z+1, r7	; 0x01
    1210:	60 82       	st	Z, r6
    1212:	13 83       	std	Z+3, r17	; 0x03
    1214:	02 83       	std	Z+2, r16	; 0x02
    1216:	f5 82       	std	Z+5, r15	; 0x05
    1218:	e4 82       	std	Z+4, r14	; 0x04
    121a:	26 82       	std	Z+6, r2	; 0x06
    121c:	10 86       	std	Z+8, r1	; 0x08
    121e:	17 82       	std	Z+7, r1	; 0x07
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	62 e0       	ldi	r22, 0x02	; 2
    1224:	93 01       	movw	r18, r6
    1226:	c2 2c       	mov	r12, r2
    1228:	aa 24       	eor	r10, r10
    122a:	bb 24       	eor	r11, r11
    122c:	83 2c       	mov	r8, r3
    122e:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <STEPPER_move>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	ad b7       	in	r26, 0x3d	; 61
    1236:	be b7       	in	r27, 0x3e	; 62
    1238:	19 96       	adiw	r26, 0x09	; 9
    123a:	0f b6       	in	r0, 0x3f	; 63
    123c:	f8 94       	cli
    123e:	be bf       	out	0x3e, r27	; 62
    1240:	0f be       	out	0x3f, r0	; 63
    1242:	ad bf       	out	0x3d, r26	; 61
    1244:	89 c1       	rjmp	.+786    	; 0x1558 <move_arc_stnb+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    1246:	c3 01       	movw	r24, r6
    1248:	b2 01       	movw	r22, r4
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e0       	ldi	r20, 0x00	; 0
    1250:	50 e0       	ldi	r21, 0x00	; 0
    1252:	0e 94 83 30 	call	0x6106	; 0x6106 <__gesf2>
    1256:	18 16       	cp	r1, r24
    1258:	0c f0       	brlt	.+2      	; 0x125c <move_arc_stnb+0x232>
    125a:	b1 c0       	rjmp	.+354    	; 0x13be <move_arc_stnb+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    125c:	66 e6       	ldi	r22, 0x66	; 102
    125e:	76 e6       	ldi	r23, 0x66	; 102
    1260:	8a ea       	ldi	r24, 0xAA	; 170
    1262:	91 ec       	ldi	r25, 0xC1	; 193
    1264:	a3 01       	movw	r20, r6
    1266:	92 01       	movw	r18, r4
    1268:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	40 e8       	ldi	r20, 0x80	; 128
    1272:	5f e3       	ldi	r21, 0x3F	; 63
    1274:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    1278:	7b 01       	movw	r14, r22
    127a:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    127c:	66 e6       	ldi	r22, 0x66	; 102
    127e:	76 e6       	ldi	r23, 0x66	; 102
    1280:	8a ea       	ldi	r24, 0xAA	; 170
    1282:	91 e4       	ldi	r25, 0x41	; 65
    1284:	a3 01       	movw	r20, r6
    1286:	92 01       	movw	r18, r4
    1288:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    128c:	20 e0       	ldi	r18, 0x00	; 0
    128e:	30 e0       	ldi	r19, 0x00	; 0
    1290:	40 e8       	ldi	r20, 0x80	; 128
    1292:	5f e3       	ldi	r21, 0x3F	; 63
    1294:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    1298:	5b 01       	movw	r10, r22
    129a:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    129c:	ed b7       	in	r30, 0x3d	; 61
    129e:	fe b7       	in	r31, 0x3e	; 62
    12a0:	39 97       	sbiw	r30, 0x09	; 9
    12a2:	0f b6       	in	r0, 0x3f	; 63
    12a4:	f8 94       	cli
    12a6:	fe bf       	out	0x3e, r31	; 62
    12a8:	0f be       	out	0x3f, r0	; 63
    12aa:	ed bf       	out	0x3d, r30	; 61
    12ac:	8d b6       	in	r8, 0x3d	; 61
    12ae:	9e b6       	in	r9, 0x3e	; 62
    12b0:	08 94       	sec
    12b2:	81 1c       	adc	r8, r1
    12b4:	91 1c       	adc	r9, r1
    12b6:	6d 81       	ldd	r22, Y+5	; 0x05
    12b8:	7e 81       	ldd	r23, Y+6	; 0x06
    12ba:	8f 81       	ldd	r24, Y+7	; 0x07
    12bc:	98 85       	ldd	r25, Y+8	; 0x08
    12be:	a8 01       	movw	r20, r16
    12c0:	97 01       	movw	r18, r14
    12c2:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    12c6:	2c ed       	ldi	r18, 0xDC	; 220
    12c8:	38 eb       	ldi	r19, 0xB8	; 184
    12ca:	48 e0       	ldi	r20, 0x08	; 8
    12cc:	5e e3       	ldi	r21, 0x3E	; 62
    12ce:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    12d2:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    12d6:	69 8b       	std	Y+17, r22	; 0x11
    12d8:	7a 8b       	std	Y+18, r23	; 0x12
    12da:	8b 8b       	std	Y+19, r24	; 0x13
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	69 85       	ldd	r22, Y+9	; 0x09
    12e0:	7a 85       	ldd	r23, Y+10	; 0x0a
    12e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    12e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    12e6:	a8 01       	movw	r20, r16
    12e8:	97 01       	movw	r18, r14
    12ea:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    12ee:	2c ed       	ldi	r18, 0xDC	; 220
    12f0:	38 eb       	ldi	r19, 0xB8	; 184
    12f2:	48 e0       	ldi	r20, 0x08	; 8
    12f4:	5e e3       	ldi	r21, 0x3E	; 62
    12f6:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    12fa:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    12fe:	6d 8b       	std	Y+21, r22	; 0x15
    1300:	7e 8b       	std	Y+22, r23	; 0x16
    1302:	8f 8b       	std	Y+23, r24	; 0x17
    1304:	98 8f       	std	Y+24, r25	; 0x18
    1306:	6d 85       	ldd	r22, Y+13	; 0x0d
    1308:	7e 85       	ldd	r23, Y+14	; 0x0e
    130a:	8f 85       	ldd	r24, Y+15	; 0x0f
    130c:	98 89       	ldd	r25, Y+16	; 0x10
    130e:	a8 01       	movw	r20, r16
    1310:	97 01       	movw	r18, r14
    1312:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1316:	2c ed       	ldi	r18, 0xDC	; 220
    1318:	38 eb       	ldi	r19, 0xB8	; 184
    131a:	48 e0       	ldi	r20, 0x08	; 8
    131c:	5e e3       	ldi	r21, 0x3E	; 62
    131e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1322:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1326:	2b 01       	movw	r4, r22
    1328:	3c 01       	movw	r6, r24
    132a:	6d 81       	ldd	r22, Y+5	; 0x05
    132c:	7e 81       	ldd	r23, Y+6	; 0x06
    132e:	8f 81       	ldd	r24, Y+7	; 0x07
    1330:	98 85       	ldd	r25, Y+8	; 0x08
    1332:	a6 01       	movw	r20, r12
    1334:	95 01       	movw	r18, r10
    1336:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    133a:	2c ed       	ldi	r18, 0xDC	; 220
    133c:	38 eb       	ldi	r19, 0xB8	; 184
    133e:	48 e0       	ldi	r20, 0x08	; 8
    1340:	5e e3       	ldi	r21, 0x3E	; 62
    1342:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1346:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    134a:	d4 01       	movw	r26, r8
    134c:	6d 93       	st	X+, r22
    134e:	7c 93       	st	X, r23
    1350:	69 85       	ldd	r22, Y+9	; 0x09
    1352:	7a 85       	ldd	r23, Y+10	; 0x0a
    1354:	8b 85       	ldd	r24, Y+11	; 0x0b
    1356:	9c 85       	ldd	r25, Y+12	; 0x0c
    1358:	a6 01       	movw	r20, r12
    135a:	95 01       	movw	r18, r10
    135c:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1360:	2c ed       	ldi	r18, 0xDC	; 220
    1362:	38 eb       	ldi	r19, 0xB8	; 184
    1364:	48 e0       	ldi	r20, 0x08	; 8
    1366:	5e e3       	ldi	r21, 0x3E	; 62
    1368:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    136c:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1370:	f4 01       	movw	r30, r8
    1372:	73 83       	std	Z+3, r23	; 0x03
    1374:	62 83       	std	Z+2, r22	; 0x02
    1376:	6d 85       	ldd	r22, Y+13	; 0x0d
    1378:	7e 85       	ldd	r23, Y+14	; 0x0e
    137a:	8f 85       	ldd	r24, Y+15	; 0x0f
    137c:	98 89       	ldd	r25, Y+16	; 0x10
    137e:	a6 01       	movw	r20, r12
    1380:	95 01       	movw	r18, r10
    1382:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1386:	2c ed       	ldi	r18, 0xDC	; 220
    1388:	38 eb       	ldi	r19, 0xB8	; 184
    138a:	48 e0       	ldi	r20, 0x08	; 8
    138c:	5e e3       	ldi	r21, 0x3E	; 62
    138e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1392:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1396:	d4 01       	movw	r26, r8
    1398:	15 96       	adiw	r26, 0x05	; 5
    139a:	7c 93       	st	X, r23
    139c:	6e 93       	st	-X, r22
    139e:	14 97       	sbiw	r26, 0x04	; 4
    13a0:	16 96       	adiw	r26, 0x06	; 6
    13a2:	2c 92       	st	X, r2
    13a4:	16 97       	sbiw	r26, 0x06	; 6
    13a6:	18 96       	adiw	r26, 0x08	; 8
    13a8:	1c 92       	st	X, r1
    13aa:	1e 92       	st	-X, r1
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	81 e0       	ldi	r24, 0x01	; 1
    13b0:	62 e0       	ldi	r22, 0x02	; 2
    13b2:	43 2d       	mov	r20, r3
    13b4:	29 89       	ldd	r18, Y+17	; 0x11
    13b6:	3a 89       	ldd	r19, Y+18	; 0x12
    13b8:	0d 89       	ldd	r16, Y+21	; 0x15
    13ba:	1e 89       	ldd	r17, Y+22	; 0x16
    13bc:	bd c0       	rjmp	.+378    	; 0x1538 <move_arc_stnb+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    13be:	c3 01       	movw	r24, r6
    13c0:	b2 01       	movw	r22, r4
    13c2:	20 e0       	ldi	r18, 0x00	; 0
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	50 e0       	ldi	r21, 0x00	; 0
    13ca:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    13ce:	87 fd       	sbrc	r24, 7
    13d0:	02 c0       	rjmp	.+4      	; 0x13d6 <move_arc_stnb+0x3ac>
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	c1 c0       	rjmp	.+386    	; 0x1558 <move_arc_stnb+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    13d6:	66 e6       	ldi	r22, 0x66	; 102
    13d8:	76 e6       	ldi	r23, 0x66	; 102
    13da:	8a ea       	ldi	r24, 0xAA	; 170
    13dc:	91 e4       	ldi	r25, 0x41	; 65
    13de:	a3 01       	movw	r20, r6
    13e0:	92 01       	movw	r18, r4
    13e2:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    13e6:	20 e0       	ldi	r18, 0x00	; 0
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	40 e8       	ldi	r20, 0x80	; 128
    13ec:	5f e3       	ldi	r21, 0x3F	; 63
    13ee:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    13f2:	7b 01       	movw	r14, r22
    13f4:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    13f6:	66 e6       	ldi	r22, 0x66	; 102
    13f8:	76 e6       	ldi	r23, 0x66	; 102
    13fa:	8a ea       	ldi	r24, 0xAA	; 170
    13fc:	91 ec       	ldi	r25, 0xC1	; 193
    13fe:	a3 01       	movw	r20, r6
    1400:	92 01       	movw	r18, r4
    1402:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1406:	20 e0       	ldi	r18, 0x00	; 0
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	40 e8       	ldi	r20, 0x80	; 128
    140c:	5f e3       	ldi	r21, 0x3F	; 63
    140e:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    1412:	5b 01       	movw	r10, r22
    1414:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stnb( STEPPER_BOTH, 
    1416:	2d b7       	in	r18, 0x3d	; 61
    1418:	3e b7       	in	r19, 0x3e	; 62
    141a:	29 50       	subi	r18, 0x09	; 9
    141c:	30 40       	sbci	r19, 0x00	; 0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	f8 94       	cli
    1422:	3e bf       	out	0x3e, r19	; 62
    1424:	0f be       	out	0x3f, r0	; 63
    1426:	2d bf       	out	0x3d, r18	; 61
    1428:	8d b6       	in	r8, 0x3d	; 61
    142a:	9e b6       	in	r9, 0x3e	; 62
    142c:	08 94       	sec
    142e:	81 1c       	adc	r8, r1
    1430:	91 1c       	adc	r9, r1
    1432:	6d 81       	ldd	r22, Y+5	; 0x05
    1434:	7e 81       	ldd	r23, Y+6	; 0x06
    1436:	8f 81       	ldd	r24, Y+7	; 0x07
    1438:	98 85       	ldd	r25, Y+8	; 0x08
    143a:	a8 01       	movw	r20, r16
    143c:	97 01       	movw	r18, r14
    143e:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1442:	2c ed       	ldi	r18, 0xDC	; 220
    1444:	38 eb       	ldi	r19, 0xB8	; 184
    1446:	48 e0       	ldi	r20, 0x08	; 8
    1448:	5e e3       	ldi	r21, 0x3E	; 62
    144a:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    144e:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1452:	69 8f       	std	Y+25, r22	; 0x19
    1454:	7a 8f       	std	Y+26, r23	; 0x1a
    1456:	8b 8f       	std	Y+27, r24	; 0x1b
    1458:	9c 8f       	std	Y+28, r25	; 0x1c
    145a:	69 85       	ldd	r22, Y+9	; 0x09
    145c:	7a 85       	ldd	r23, Y+10	; 0x0a
    145e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1460:	9c 85       	ldd	r25, Y+12	; 0x0c
    1462:	a8 01       	movw	r20, r16
    1464:	97 01       	movw	r18, r14
    1466:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    146a:	2c ed       	ldi	r18, 0xDC	; 220
    146c:	38 eb       	ldi	r19, 0xB8	; 184
    146e:	48 e0       	ldi	r20, 0x08	; 8
    1470:	5e e3       	ldi	r21, 0x3E	; 62
    1472:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1476:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    147a:	6d 8f       	std	Y+29, r22	; 0x1d
    147c:	7e 8f       	std	Y+30, r23	; 0x1e
    147e:	8f 8f       	std	Y+31, r24	; 0x1f
    1480:	98 a3       	std	Y+32, r25	; 0x20
    1482:	6d 85       	ldd	r22, Y+13	; 0x0d
    1484:	7e 85       	ldd	r23, Y+14	; 0x0e
    1486:	8f 85       	ldd	r24, Y+15	; 0x0f
    1488:	98 89       	ldd	r25, Y+16	; 0x10
    148a:	a8 01       	movw	r20, r16
    148c:	97 01       	movw	r18, r14
    148e:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1492:	2c ed       	ldi	r18, 0xDC	; 220
    1494:	38 eb       	ldi	r19, 0xB8	; 184
    1496:	48 e0       	ldi	r20, 0x08	; 8
    1498:	5e e3       	ldi	r21, 0x3E	; 62
    149a:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    149e:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    14a2:	2b 01       	movw	r4, r22
    14a4:	3c 01       	movw	r6, r24
    14a6:	6d 81       	ldd	r22, Y+5	; 0x05
    14a8:	7e 81       	ldd	r23, Y+6	; 0x06
    14aa:	8f 81       	ldd	r24, Y+7	; 0x07
    14ac:	98 85       	ldd	r25, Y+8	; 0x08
    14ae:	a6 01       	movw	r20, r12
    14b0:	95 01       	movw	r18, r10
    14b2:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    14b6:	2c ed       	ldi	r18, 0xDC	; 220
    14b8:	38 eb       	ldi	r19, 0xB8	; 184
    14ba:	48 e0       	ldi	r20, 0x08	; 8
    14bc:	5e e3       	ldi	r21, 0x3E	; 62
    14be:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    14c2:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    14c6:	d4 01       	movw	r26, r8
    14c8:	6d 93       	st	X+, r22
    14ca:	7c 93       	st	X, r23
    14cc:	69 85       	ldd	r22, Y+9	; 0x09
    14ce:	7a 85       	ldd	r23, Y+10	; 0x0a
    14d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    14d2:	9c 85       	ldd	r25, Y+12	; 0x0c
    14d4:	a6 01       	movw	r20, r12
    14d6:	95 01       	movw	r18, r10
    14d8:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    14dc:	2c ed       	ldi	r18, 0xDC	; 220
    14de:	38 eb       	ldi	r19, 0xB8	; 184
    14e0:	48 e0       	ldi	r20, 0x08	; 8
    14e2:	5e e3       	ldi	r21, 0x3E	; 62
    14e4:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    14e8:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    14ec:	f4 01       	movw	r30, r8
    14ee:	73 83       	std	Z+3, r23	; 0x03
    14f0:	62 83       	std	Z+2, r22	; 0x02
    14f2:	6d 85       	ldd	r22, Y+13	; 0x0d
    14f4:	7e 85       	ldd	r23, Y+14	; 0x0e
    14f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f8:	98 89       	ldd	r25, Y+16	; 0x10
    14fa:	a6 01       	movw	r20, r12
    14fc:	95 01       	movw	r18, r10
    14fe:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1502:	2c ed       	ldi	r18, 0xDC	; 220
    1504:	38 eb       	ldi	r19, 0xB8	; 184
    1506:	48 e0       	ldi	r20, 0x08	; 8
    1508:	5e e3       	ldi	r21, 0x3E	; 62
    150a:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    150e:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1512:	d4 01       	movw	r26, r8
    1514:	15 96       	adiw	r26, 0x05	; 5
    1516:	7c 93       	st	X, r23
    1518:	6e 93       	st	-X, r22
    151a:	14 97       	sbiw	r26, 0x04	; 4
    151c:	16 96       	adiw	r26, 0x06	; 6
    151e:	2c 92       	st	X, r2
    1520:	16 97       	sbiw	r26, 0x06	; 6
    1522:	18 96       	adiw	r26, 0x08	; 8
    1524:	1c 92       	st	X, r1
    1526:	1e 92       	st	-X, r1
    1528:	17 97       	sbiw	r26, 0x07	; 7
    152a:	81 e0       	ldi	r24, 0x01	; 1
    152c:	62 e0       	ldi	r22, 0x02	; 2
    152e:	43 2d       	mov	r20, r3
    1530:	29 8d       	ldd	r18, Y+25	; 0x19
    1532:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1534:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1536:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1538:	72 01       	movw	r14, r4
    153a:	c2 2c       	mov	r12, r2
    153c:	aa 24       	eor	r10, r10
    153e:	bb 24       	eor	r11, r11
    1540:	83 2c       	mov	r8, r3
    1542:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <STEPPER_move>
    1546:	81 e0       	ldi	r24, 0x01	; 1
    1548:	ed b7       	in	r30, 0x3d	; 61
    154a:	fe b7       	in	r31, 0x3e	; 62
    154c:	39 96       	adiw	r30, 0x09	; 9
    154e:	0f b6       	in	r0, 0x3f	; 63
    1550:	f8 94       	cli
    1552:	fe bf       	out	0x3e, r31	; 62
    1554:	0f be       	out	0x3f, r0	; 63
    1556:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
    1558:	a0 96       	adiw	r28, 0x20	; 32
    155a:	0f b6       	in	r0, 0x3f	; 63
    155c:	f8 94       	cli
    155e:	de bf       	out	0x3e, r29	; 62
    1560:	0f be       	out	0x3f, r0	; 63
    1562:	cd bf       	out	0x3d, r28	; 61
    1564:	cf 91       	pop	r28
    1566:	df 91       	pop	r29
    1568:	1f 91       	pop	r17
    156a:	0f 91       	pop	r16
    156c:	ff 90       	pop	r15
    156e:	ef 90       	pop	r14
    1570:	df 90       	pop	r13
    1572:	cf 90       	pop	r12
    1574:	bf 90       	pop	r11
    1576:	af 90       	pop	r10
    1578:	9f 90       	pop	r9
    157a:	8f 90       	pop	r8
    157c:	7f 90       	pop	r7
    157e:	6f 90       	pop	r6
    1580:	5f 90       	pop	r5
    1582:	4f 90       	pop	r4
    1584:	3f 90       	pop	r3
    1586:	2f 90       	pop	r2
    1588:	08 95       	ret

0000158a <move_arc_stwt>:
* Input Variables:	char
* Output Return:	float, float, float, float, BOOL
* Overview:			This moves the robot in any arc length
********************************************************************/
char move_arc_stwt(float arc_Radius, float arc_Length, float arc_Speed, float arc_Accel, BOOL arc_Brk)
{
    158a:	2f 92       	push	r2
    158c:	3f 92       	push	r3
    158e:	4f 92       	push	r4
    1590:	5f 92       	push	r5
    1592:	6f 92       	push	r6
    1594:	7f 92       	push	r7
    1596:	8f 92       	push	r8
    1598:	9f 92       	push	r9
    159a:	af 92       	push	r10
    159c:	bf 92       	push	r11
    159e:	cf 92       	push	r12
    15a0:	df 92       	push	r13
    15a2:	ef 92       	push	r14
    15a4:	ff 92       	push	r15
    15a6:	0f 93       	push	r16
    15a8:	1f 93       	push	r17
    15aa:	df 93       	push	r29
    15ac:	cf 93       	push	r28
    15ae:	cd b7       	in	r28, 0x3d	; 61
    15b0:	de b7       	in	r29, 0x3e	; 62
    15b2:	a0 97       	sbiw	r28, 0x20	; 32
    15b4:	0f b6       	in	r0, 0x3f	; 63
    15b6:	f8 94       	cli
    15b8:	de bf       	out	0x3e, r29	; 62
    15ba:	0f be       	out	0x3f, r0	; 63
    15bc:	cd bf       	out	0x3d, r28	; 61
    15be:	2b 01       	movw	r4, r22
    15c0:	3c 01       	movw	r6, r24
    15c2:	2d 83       	std	Y+5, r18	; 0x05
    15c4:	3e 83       	std	Y+6, r19	; 0x06
    15c6:	4f 83       	std	Y+7, r20	; 0x07
    15c8:	58 87       	std	Y+8, r21	; 0x08
    15ca:	e9 86       	std	Y+9, r14	; 0x09
    15cc:	fa 86       	std	Y+10, r15	; 0x0a
    15ce:	0b 87       	std	Y+11, r16	; 0x0b
    15d0:	1c 87       	std	Y+12, r17	; 0x0c
    15d2:	ad 86       	std	Y+13, r10	; 0x0d
    15d4:	be 86       	std	Y+14, r11	; 0x0e
    15d6:	cf 86       	std	Y+15, r12	; 0x0f
    15d8:	d8 8a       	std	Y+16, r13	; 0x10
    15da:	28 2c       	mov	r2, r8
	
	BOOL step_Fwd_L = (arc_Length>0);
    15dc:	33 24       	eor	r3, r3
    15de:	ca 01       	movw	r24, r20
    15e0:	b9 01       	movw	r22, r18
    15e2:	20 e0       	ldi	r18, 0x00	; 0
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	40 e0       	ldi	r20, 0x00	; 0
    15e8:	50 e0       	ldi	r21, 0x00	; 0
    15ea:	0e 94 83 30 	call	0x6106	; 0x6106 <__gesf2>
    15ee:	18 16       	cp	r1, r24
    15f0:	14 f4       	brge	.+4      	; 0x15f6 <move_arc_stwt+0x6c>
    15f2:	33 24       	eor	r3, r3
    15f4:	33 94       	inc	r3
	BOOL step_Fwd_R = (arc_Length>0);
	float step_Num = abs(arc_Length/D_STEP);
    15f6:	6d 81       	ldd	r22, Y+5	; 0x05
    15f8:	7e 81       	ldd	r23, Y+6	; 0x06
    15fa:	8f 81       	ldd	r24, Y+7	; 0x07
    15fc:	98 85       	ldd	r25, Y+8	; 0x08
    15fe:	2c ed       	ldi	r18, 0xDC	; 220
    1600:	38 eb       	ldi	r19, 0xB8	; 184
    1602:	48 e0       	ldi	r20, 0x08	; 8
    1604:	5e e3       	ldi	r21, 0x3E	; 62
    1606:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    160a:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fixsfsi>
    160e:	9b 01       	movw	r18, r22
    1610:	77 ff       	sbrs	r23, 7
    1612:	03 c0       	rjmp	.+6      	; 0x161a <move_arc_stwt+0x90>
    1614:	30 95       	com	r19
    1616:	21 95       	neg	r18
    1618:	3f 4f       	sbci	r19, 0xFF	; 255
    161a:	b9 01       	movw	r22, r18
    161c:	88 27       	eor	r24, r24
    161e:	77 fd       	sbrc	r23, 7
    1620:	80 95       	com	r24
    1622:	98 2f       	mov	r25, r24
    1624:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__floatsisf>
    1628:	69 83       	std	Y+1, r22	; 0x01
    162a:	7a 83       	std	Y+2, r23	; 0x02
    162c:	8b 83       	std	Y+3, r24	; 0x03
    162e:	9c 83       	std	Y+4, r25	; 0x04
	float step_Speed = abs(arc_Speed/D_STEP);
    1630:	69 85       	ldd	r22, Y+9	; 0x09
    1632:	7a 85       	ldd	r23, Y+10	; 0x0a
    1634:	8b 85       	ldd	r24, Y+11	; 0x0b
    1636:	9c 85       	ldd	r25, Y+12	; 0x0c
    1638:	2c ed       	ldi	r18, 0xDC	; 220
    163a:	38 eb       	ldi	r19, 0xB8	; 184
    163c:	48 e0       	ldi	r20, 0x08	; 8
    163e:	5e e3       	ldi	r21, 0x3E	; 62
    1640:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1644:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fixsfsi>
    1648:	9b 01       	movw	r18, r22
    164a:	77 ff       	sbrs	r23, 7
    164c:	03 c0       	rjmp	.+6      	; 0x1654 <move_arc_stwt+0xca>
    164e:	30 95       	com	r19
    1650:	21 95       	neg	r18
    1652:	3f 4f       	sbci	r19, 0xFF	; 255
    1654:	b9 01       	movw	r22, r18
    1656:	88 27       	eor	r24, r24
    1658:	77 fd       	sbrc	r23, 7
    165a:	80 95       	com	r24
    165c:	98 2f       	mov	r25, r24
    165e:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__floatsisf>
    1662:	4b 01       	movw	r8, r22
    1664:	5c 01       	movw	r10, r24
	float step_Accel = abs(arc_Accel/D_STEP);
    1666:	6d 85       	ldd	r22, Y+13	; 0x0d
    1668:	7e 85       	ldd	r23, Y+14	; 0x0e
    166a:	8f 85       	ldd	r24, Y+15	; 0x0f
    166c:	98 89       	ldd	r25, Y+16	; 0x10
    166e:	2c ed       	ldi	r18, 0xDC	; 220
    1670:	38 eb       	ldi	r19, 0xB8	; 184
    1672:	48 e0       	ldi	r20, 0x08	; 8
    1674:	5e e3       	ldi	r21, 0x3E	; 62
    1676:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    167a:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fixsfsi>
    167e:	9b 01       	movw	r18, r22
    1680:	77 ff       	sbrs	r23, 7
    1682:	03 c0       	rjmp	.+6      	; 0x168a <move_arc_stwt+0x100>
    1684:	30 95       	com	r19
    1686:	21 95       	neg	r18
    1688:	3f 4f       	sbci	r19, 0xFF	; 255
    168a:	b9 01       	movw	r22, r18
    168c:	88 27       	eor	r24, r24
    168e:	77 fd       	sbrc	r23, 7
    1690:	80 95       	com	r24
    1692:	98 2f       	mov	r25, r24
    1694:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__floatsisf>
    1698:	6b 01       	movw	r12, r22
    169a:	7c 01       	movw	r14, r24


	if(arc_Radius == NO_TURN){
    169c:	c3 01       	movw	r24, r6
    169e:	b2 01       	movw	r22, r4
    16a0:	20 e0       	ldi	r18, 0x00	; 0
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	40 e0       	ldi	r20, 0x00	; 0
    16a6:	5f e4       	ldi	r21, 0x4F	; 79
    16a8:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    16ac:	88 23       	and	r24, r24
    16ae:	a1 f5       	brne	.+104    	; 0x1718 <move_arc_stwt+0x18e>
		STEPPER_move_stwt( STEPPER_BOTH, 
    16b0:	69 81       	ldd	r22, Y+1	; 0x01
    16b2:	7a 81       	ldd	r23, Y+2	; 0x02
    16b4:	8b 81       	ldd	r24, Y+3	; 0x03
    16b6:	9c 81       	ldd	r25, Y+4	; 0x04
    16b8:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    16bc:	2b 01       	movw	r4, r22
    16be:	3c 01       	movw	r6, r24
    16c0:	c5 01       	movw	r24, r10
    16c2:	b4 01       	movw	r22, r8
    16c4:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    16c8:	4b 01       	movw	r8, r22
    16ca:	5c 01       	movw	r10, r24
    16cc:	c7 01       	movw	r24, r14
    16ce:	b6 01       	movw	r22, r12
    16d0:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    16d4:	6b 01       	movw	r12, r22
    16d6:	7c 01       	movw	r14, r24
    16d8:	2d b7       	in	r18, 0x3d	; 61
    16da:	3e b7       	in	r19, 0x3e	; 62
    16dc:	29 50       	subi	r18, 0x09	; 9
    16de:	30 40       	sbci	r19, 0x00	; 0
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	3e bf       	out	0x3e, r19	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	2d bf       	out	0x3d, r18	; 61
    16ea:	ed b7       	in	r30, 0x3d	; 61
    16ec:	fe b7       	in	r31, 0x3e	; 62
    16ee:	31 96       	adiw	r30, 0x01	; 1
    16f0:	ad b7       	in	r26, 0x3d	; 61
    16f2:	be b7       	in	r27, 0x3e	; 62
    16f4:	12 96       	adiw	r26, 0x02	; 2
    16f6:	5c 92       	st	X, r5
    16f8:	4e 92       	st	-X, r4
    16fa:	11 97       	sbiw	r26, 0x01	; 1
    16fc:	93 82       	std	Z+3, r9	; 0x03
    16fe:	82 82       	std	Z+2, r8	; 0x02
    1700:	75 83       	std	Z+5, r23	; 0x05
    1702:	64 83       	std	Z+4, r22	; 0x04
    1704:	26 82       	std	Z+6, r2	; 0x06
    1706:	10 86       	std	Z+8, r1	; 0x08
    1708:	17 82       	std	Z+7, r1	; 0x07
    170a:	80 e0       	ldi	r24, 0x00	; 0
    170c:	62 e0       	ldi	r22, 0x02	; 2
    170e:	43 2d       	mov	r20, r3
    1710:	92 01       	movw	r18, r4
    1712:	84 01       	movw	r16, r8
    1714:	76 01       	movw	r14, r12
    1716:	c1 c1       	rjmp	.+898    	; 0x1a9a <move_arc_stwt+0x510>
		step_Fwd_L, step_Num, step_Speed, step_Accel, arc_Brk, // Left
		step_Fwd_R, step_Num, step_Speed, step_Accel, arc_Brk); // Right
		return SUCCESS;
	}
	
	if(arc_Radius == POINT_TURN){				
    1718:	c3 01       	movw	r24, r6
    171a:	b2 01       	movw	r22, r4
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e0       	ldi	r20, 0x00	; 0
    1722:	50 e0       	ldi	r21, 0x00	; 0
    1724:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    1728:	88 23       	and	r24, r24
    172a:	e9 f5       	brne	.+122    	; 0x17a6 <move_arc_stwt+0x21c>
		STEPPER_move_stwt( STEPPER_BOTH, 
    172c:	69 81       	ldd	r22, Y+1	; 0x01
    172e:	7a 81       	ldd	r23, Y+2	; 0x02
    1730:	8b 81       	ldd	r24, Y+3	; 0x03
    1732:	9c 81       	ldd	r25, Y+4	; 0x04
    1734:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1738:	3b 01       	movw	r6, r22
    173a:	c5 01       	movw	r24, r10
    173c:	b4 01       	movw	r22, r8
    173e:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1742:	8b 01       	movw	r16, r22
    1744:	c7 01       	movw	r24, r14
    1746:	b6 01       	movw	r22, r12
    1748:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    174c:	7b 01       	movw	r14, r22
    174e:	2d b7       	in	r18, 0x3d	; 61
    1750:	3e b7       	in	r19, 0x3e	; 62
    1752:	29 50       	subi	r18, 0x09	; 9
    1754:	30 40       	sbci	r19, 0x00	; 0
    1756:	0f b6       	in	r0, 0x3f	; 63
    1758:	f8 94       	cli
    175a:	3e bf       	out	0x3e, r19	; 62
    175c:	0f be       	out	0x3f, r0	; 63
    175e:	2d bf       	out	0x3d, r18	; 61
    1760:	ed b7       	in	r30, 0x3d	; 61
    1762:	fe b7       	in	r31, 0x3e	; 62
    1764:	31 96       	adiw	r30, 0x01	; 1
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	33 20       	and	r3, r3
    176a:	09 f4       	brne	.+2      	; 0x176e <move_arc_stwt+0x1e4>
    176c:	41 e0       	ldi	r20, 0x01	; 1
    176e:	71 82       	std	Z+1, r7	; 0x01
    1770:	60 82       	st	Z, r6
    1772:	13 83       	std	Z+3, r17	; 0x03
    1774:	02 83       	std	Z+2, r16	; 0x02
    1776:	f5 82       	std	Z+5, r15	; 0x05
    1778:	e4 82       	std	Z+4, r14	; 0x04
    177a:	26 82       	std	Z+6, r2	; 0x06
    177c:	10 86       	std	Z+8, r1	; 0x08
    177e:	17 82       	std	Z+7, r1	; 0x07
    1780:	80 e0       	ldi	r24, 0x00	; 0
    1782:	62 e0       	ldi	r22, 0x02	; 2
    1784:	93 01       	movw	r18, r6
    1786:	c2 2c       	mov	r12, r2
    1788:	aa 24       	eor	r10, r10
    178a:	bb 24       	eor	r11, r11
    178c:	83 2c       	mov	r8, r3
    178e:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <STEPPER_move>
    1792:	81 e0       	ldi	r24, 0x01	; 1
    1794:	ad b7       	in	r26, 0x3d	; 61
    1796:	be b7       	in	r27, 0x3e	; 62
    1798:	19 96       	adiw	r26, 0x09	; 9
    179a:	0f b6       	in	r0, 0x3f	; 63
    179c:	f8 94       	cli
    179e:	be bf       	out	0x3e, r27	; 62
    17a0:	0f be       	out	0x3f, r0	; 63
    17a2:	ad bf       	out	0x3d, r26	; 61
    17a4:	89 c1       	rjmp	.+786    	; 0x1ab8 <move_arc_stwt+0x52e>
	float step_Speed_L;
	float step_Speed_R;	
	float step_Accel_L;
	float step_Accel_R;
	
	if(arc_Radius > 0){
    17a6:	c3 01       	movw	r24, r6
    17a8:	b2 01       	movw	r22, r4
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e0       	ldi	r20, 0x00	; 0
    17b0:	50 e0       	ldi	r21, 0x00	; 0
    17b2:	0e 94 83 30 	call	0x6106	; 0x6106 <__gesf2>
    17b6:	18 16       	cp	r1, r24
    17b8:	0c f0       	brlt	.+2      	; 0x17bc <move_arc_stwt+0x232>
    17ba:	b1 c0       	rjmp	.+354    	; 0x191e <move_arc_stwt+0x394>
		arc_Length_L = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    17bc:	66 e6       	ldi	r22, 0x66	; 102
    17be:	76 e6       	ldi	r23, 0x66	; 102
    17c0:	8a ea       	ldi	r24, 0xAA	; 170
    17c2:	91 ec       	ldi	r25, 0xC1	; 193
    17c4:	a3 01       	movw	r20, r6
    17c6:	92 01       	movw	r18, r4
    17c8:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e8       	ldi	r20, 0x80	; 128
    17d2:	5f e3       	ldi	r21, 0x3F	; 63
    17d4:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    17d8:	7b 01       	movw	r14, r22
    17da:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    17dc:	66 e6       	ldi	r22, 0x66	; 102
    17de:	76 e6       	ldi	r23, 0x66	; 102
    17e0:	8a ea       	ldi	r24, 0xAA	; 170
    17e2:	91 e4       	ldi	r25, 0x41	; 65
    17e4:	a3 01       	movw	r20, r6
    17e6:	92 01       	movw	r18, r4
    17e8:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	40 e8       	ldi	r20, 0x80	; 128
    17f2:	5f e3       	ldi	r21, 0x3F	; 63
    17f4:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    17f8:	5b 01       	movw	r10, r22
    17fa:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    17fc:	ed b7       	in	r30, 0x3d	; 61
    17fe:	fe b7       	in	r31, 0x3e	; 62
    1800:	39 97       	sbiw	r30, 0x09	; 9
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	fe bf       	out	0x3e, r31	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	ed bf       	out	0x3d, r30	; 61
    180c:	8d b6       	in	r8, 0x3d	; 61
    180e:	9e b6       	in	r9, 0x3e	; 62
    1810:	08 94       	sec
    1812:	81 1c       	adc	r8, r1
    1814:	91 1c       	adc	r9, r1
    1816:	6d 81       	ldd	r22, Y+5	; 0x05
    1818:	7e 81       	ldd	r23, Y+6	; 0x06
    181a:	8f 81       	ldd	r24, Y+7	; 0x07
    181c:	98 85       	ldd	r25, Y+8	; 0x08
    181e:	a8 01       	movw	r20, r16
    1820:	97 01       	movw	r18, r14
    1822:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1826:	2c ed       	ldi	r18, 0xDC	; 220
    1828:	38 eb       	ldi	r19, 0xB8	; 184
    182a:	48 e0       	ldi	r20, 0x08	; 8
    182c:	5e e3       	ldi	r21, 0x3E	; 62
    182e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1832:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1836:	69 8b       	std	Y+17, r22	; 0x11
    1838:	7a 8b       	std	Y+18, r23	; 0x12
    183a:	8b 8b       	std	Y+19, r24	; 0x13
    183c:	9c 8b       	std	Y+20, r25	; 0x14
    183e:	69 85       	ldd	r22, Y+9	; 0x09
    1840:	7a 85       	ldd	r23, Y+10	; 0x0a
    1842:	8b 85       	ldd	r24, Y+11	; 0x0b
    1844:	9c 85       	ldd	r25, Y+12	; 0x0c
    1846:	a8 01       	movw	r20, r16
    1848:	97 01       	movw	r18, r14
    184a:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    184e:	2c ed       	ldi	r18, 0xDC	; 220
    1850:	38 eb       	ldi	r19, 0xB8	; 184
    1852:	48 e0       	ldi	r20, 0x08	; 8
    1854:	5e e3       	ldi	r21, 0x3E	; 62
    1856:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    185a:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    185e:	6d 8b       	std	Y+21, r22	; 0x15
    1860:	7e 8b       	std	Y+22, r23	; 0x16
    1862:	8f 8b       	std	Y+23, r24	; 0x17
    1864:	98 8f       	std	Y+24, r25	; 0x18
    1866:	6d 85       	ldd	r22, Y+13	; 0x0d
    1868:	7e 85       	ldd	r23, Y+14	; 0x0e
    186a:	8f 85       	ldd	r24, Y+15	; 0x0f
    186c:	98 89       	ldd	r25, Y+16	; 0x10
    186e:	a8 01       	movw	r20, r16
    1870:	97 01       	movw	r18, r14
    1872:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1876:	2c ed       	ldi	r18, 0xDC	; 220
    1878:	38 eb       	ldi	r19, 0xB8	; 184
    187a:	48 e0       	ldi	r20, 0x08	; 8
    187c:	5e e3       	ldi	r21, 0x3E	; 62
    187e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1882:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1886:	2b 01       	movw	r4, r22
    1888:	3c 01       	movw	r6, r24
    188a:	6d 81       	ldd	r22, Y+5	; 0x05
    188c:	7e 81       	ldd	r23, Y+6	; 0x06
    188e:	8f 81       	ldd	r24, Y+7	; 0x07
    1890:	98 85       	ldd	r25, Y+8	; 0x08
    1892:	a6 01       	movw	r20, r12
    1894:	95 01       	movw	r18, r10
    1896:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    189a:	2c ed       	ldi	r18, 0xDC	; 220
    189c:	38 eb       	ldi	r19, 0xB8	; 184
    189e:	48 e0       	ldi	r20, 0x08	; 8
    18a0:	5e e3       	ldi	r21, 0x3E	; 62
    18a2:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    18a6:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    18aa:	d4 01       	movw	r26, r8
    18ac:	6d 93       	st	X+, r22
    18ae:	7c 93       	st	X, r23
    18b0:	69 85       	ldd	r22, Y+9	; 0x09
    18b2:	7a 85       	ldd	r23, Y+10	; 0x0a
    18b4:	8b 85       	ldd	r24, Y+11	; 0x0b
    18b6:	9c 85       	ldd	r25, Y+12	; 0x0c
    18b8:	a6 01       	movw	r20, r12
    18ba:	95 01       	movw	r18, r10
    18bc:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    18c0:	2c ed       	ldi	r18, 0xDC	; 220
    18c2:	38 eb       	ldi	r19, 0xB8	; 184
    18c4:	48 e0       	ldi	r20, 0x08	; 8
    18c6:	5e e3       	ldi	r21, 0x3E	; 62
    18c8:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    18cc:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    18d0:	f4 01       	movw	r30, r8
    18d2:	73 83       	std	Z+3, r23	; 0x03
    18d4:	62 83       	std	Z+2, r22	; 0x02
    18d6:	6d 85       	ldd	r22, Y+13	; 0x0d
    18d8:	7e 85       	ldd	r23, Y+14	; 0x0e
    18da:	8f 85       	ldd	r24, Y+15	; 0x0f
    18dc:	98 89       	ldd	r25, Y+16	; 0x10
    18de:	a6 01       	movw	r20, r12
    18e0:	95 01       	movw	r18, r10
    18e2:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    18e6:	2c ed       	ldi	r18, 0xDC	; 220
    18e8:	38 eb       	ldi	r19, 0xB8	; 184
    18ea:	48 e0       	ldi	r20, 0x08	; 8
    18ec:	5e e3       	ldi	r21, 0x3E	; 62
    18ee:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    18f2:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    18f6:	d4 01       	movw	r26, r8
    18f8:	15 96       	adiw	r26, 0x05	; 5
    18fa:	7c 93       	st	X, r23
    18fc:	6e 93       	st	-X, r22
    18fe:	14 97       	sbiw	r26, 0x04	; 4
    1900:	16 96       	adiw	r26, 0x06	; 6
    1902:	2c 92       	st	X, r2
    1904:	16 97       	sbiw	r26, 0x06	; 6
    1906:	18 96       	adiw	r26, 0x08	; 8
    1908:	1c 92       	st	X, r1
    190a:	1e 92       	st	-X, r1
    190c:	17 97       	sbiw	r26, 0x07	; 7
    190e:	80 e0       	ldi	r24, 0x00	; 0
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	43 2d       	mov	r20, r3
    1914:	29 89       	ldd	r18, Y+17	; 0x11
    1916:	3a 89       	ldd	r19, Y+18	; 0x12
    1918:	0d 89       	ldd	r16, Y+21	; 0x15
    191a:	1e 89       	ldd	r17, Y+22	; 0x16
    191c:	bd c0       	rjmp	.+378    	; 0x1a98 <move_arc_stwt+0x50e>
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	
	if(arc_Radius < 0){
    191e:	c3 01       	movw	r24, r6
    1920:	b2 01       	movw	r22, r4
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	40 e0       	ldi	r20, 0x00	; 0
    1928:	50 e0       	ldi	r21, 0x00	; 0
    192a:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    192e:	87 fd       	sbrc	r24, 7
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <move_arc_stwt+0x3ac>
    1932:	80 e0       	ldi	r24, 0x00	; 0
    1934:	c1 c0       	rjmp	.+386    	; 0x1ab8 <move_arc_stwt+0x52e>
		arc_Length_L = arc_Length * (1 + WHEEL_BASE/arc_Radius);
    1936:	66 e6       	ldi	r22, 0x66	; 102
    1938:	76 e6       	ldi	r23, 0x66	; 102
    193a:	8a ea       	ldi	r24, 0xAA	; 170
    193c:	91 e4       	ldi	r25, 0x41	; 65
    193e:	a3 01       	movw	r20, r6
    1940:	92 01       	movw	r18, r4
    1942:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1946:	20 e0       	ldi	r18, 0x00	; 0
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	40 e8       	ldi	r20, 0x80	; 128
    194c:	5f e3       	ldi	r21, 0x3F	; 63
    194e:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    1952:	7b 01       	movw	r14, r22
    1954:	8c 01       	movw	r16, r24
		arc_Length_R = arc_Length * (1 - WHEEL_BASE/arc_Radius);
    1956:	66 e6       	ldi	r22, 0x66	; 102
    1958:	76 e6       	ldi	r23, 0x66	; 102
    195a:	8a ea       	ldi	r24, 0xAA	; 170
    195c:	91 ec       	ldi	r25, 0xC1	; 193
    195e:	a3 01       	movw	r20, r6
    1960:	92 01       	movw	r18, r4
    1962:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1966:	20 e0       	ldi	r18, 0x00	; 0
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	40 e8       	ldi	r20, 0x80	; 128
    196c:	5f e3       	ldi	r21, 0x3F	; 63
    196e:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    1972:	5b 01       	movw	r10, r22
    1974:	6c 01       	movw	r12, r24
		arc_Accel_L = arc_Accel * (1 + WHEEL_BASE/arc_Radius);
		arc_Accel_R = arc_Accel * (1 - WHEEL_BASE/arc_Radius);
		step_Accel_L = arc_Accel_L/D_STEP;
		step_Accel_R = arc_Accel_R/D_STEP;
		
		STEPPER_move_stwt( STEPPER_BOTH, 
    1976:	2d b7       	in	r18, 0x3d	; 61
    1978:	3e b7       	in	r19, 0x3e	; 62
    197a:	29 50       	subi	r18, 0x09	; 9
    197c:	30 40       	sbci	r19, 0x00	; 0
    197e:	0f b6       	in	r0, 0x3f	; 63
    1980:	f8 94       	cli
    1982:	3e bf       	out	0x3e, r19	; 62
    1984:	0f be       	out	0x3f, r0	; 63
    1986:	2d bf       	out	0x3d, r18	; 61
    1988:	8d b6       	in	r8, 0x3d	; 61
    198a:	9e b6       	in	r9, 0x3e	; 62
    198c:	08 94       	sec
    198e:	81 1c       	adc	r8, r1
    1990:	91 1c       	adc	r9, r1
    1992:	6d 81       	ldd	r22, Y+5	; 0x05
    1994:	7e 81       	ldd	r23, Y+6	; 0x06
    1996:	8f 81       	ldd	r24, Y+7	; 0x07
    1998:	98 85       	ldd	r25, Y+8	; 0x08
    199a:	a8 01       	movw	r20, r16
    199c:	97 01       	movw	r18, r14
    199e:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    19a2:	2c ed       	ldi	r18, 0xDC	; 220
    19a4:	38 eb       	ldi	r19, 0xB8	; 184
    19a6:	48 e0       	ldi	r20, 0x08	; 8
    19a8:	5e e3       	ldi	r21, 0x3E	; 62
    19aa:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    19ae:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    19b2:	69 8f       	std	Y+25, r22	; 0x19
    19b4:	7a 8f       	std	Y+26, r23	; 0x1a
    19b6:	8b 8f       	std	Y+27, r24	; 0x1b
    19b8:	9c 8f       	std	Y+28, r25	; 0x1c
    19ba:	69 85       	ldd	r22, Y+9	; 0x09
    19bc:	7a 85       	ldd	r23, Y+10	; 0x0a
    19be:	8b 85       	ldd	r24, Y+11	; 0x0b
    19c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    19c2:	a8 01       	movw	r20, r16
    19c4:	97 01       	movw	r18, r14
    19c6:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    19ca:	2c ed       	ldi	r18, 0xDC	; 220
    19cc:	38 eb       	ldi	r19, 0xB8	; 184
    19ce:	48 e0       	ldi	r20, 0x08	; 8
    19d0:	5e e3       	ldi	r21, 0x3E	; 62
    19d2:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    19d6:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    19da:	6d 8f       	std	Y+29, r22	; 0x1d
    19dc:	7e 8f       	std	Y+30, r23	; 0x1e
    19de:	8f 8f       	std	Y+31, r24	; 0x1f
    19e0:	98 a3       	std	Y+32, r25	; 0x20
    19e2:	6d 85       	ldd	r22, Y+13	; 0x0d
    19e4:	7e 85       	ldd	r23, Y+14	; 0x0e
    19e6:	8f 85       	ldd	r24, Y+15	; 0x0f
    19e8:	98 89       	ldd	r25, Y+16	; 0x10
    19ea:	a8 01       	movw	r20, r16
    19ec:	97 01       	movw	r18, r14
    19ee:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    19f2:	2c ed       	ldi	r18, 0xDC	; 220
    19f4:	38 eb       	ldi	r19, 0xB8	; 184
    19f6:	48 e0       	ldi	r20, 0x08	; 8
    19f8:	5e e3       	ldi	r21, 0x3E	; 62
    19fa:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    19fe:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1a02:	2b 01       	movw	r4, r22
    1a04:	3c 01       	movw	r6, r24
    1a06:	6d 81       	ldd	r22, Y+5	; 0x05
    1a08:	7e 81       	ldd	r23, Y+6	; 0x06
    1a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    1a0c:	98 85       	ldd	r25, Y+8	; 0x08
    1a0e:	a6 01       	movw	r20, r12
    1a10:	95 01       	movw	r18, r10
    1a12:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1a16:	2c ed       	ldi	r18, 0xDC	; 220
    1a18:	38 eb       	ldi	r19, 0xB8	; 184
    1a1a:	48 e0       	ldi	r20, 0x08	; 8
    1a1c:	5e e3       	ldi	r21, 0x3E	; 62
    1a1e:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1a22:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1a26:	d4 01       	movw	r26, r8
    1a28:	6d 93       	st	X+, r22
    1a2a:	7c 93       	st	X, r23
    1a2c:	69 85       	ldd	r22, Y+9	; 0x09
    1a2e:	7a 85       	ldd	r23, Y+10	; 0x0a
    1a30:	8b 85       	ldd	r24, Y+11	; 0x0b
    1a32:	9c 85       	ldd	r25, Y+12	; 0x0c
    1a34:	a6 01       	movw	r20, r12
    1a36:	95 01       	movw	r18, r10
    1a38:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1a3c:	2c ed       	ldi	r18, 0xDC	; 220
    1a3e:	38 eb       	ldi	r19, 0xB8	; 184
    1a40:	48 e0       	ldi	r20, 0x08	; 8
    1a42:	5e e3       	ldi	r21, 0x3E	; 62
    1a44:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1a48:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1a4c:	f4 01       	movw	r30, r8
    1a4e:	73 83       	std	Z+3, r23	; 0x03
    1a50:	62 83       	std	Z+2, r22	; 0x02
    1a52:	6d 85       	ldd	r22, Y+13	; 0x0d
    1a54:	7e 85       	ldd	r23, Y+14	; 0x0e
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	a6 01       	movw	r20, r12
    1a5c:	95 01       	movw	r18, r10
    1a5e:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1a62:	2c ed       	ldi	r18, 0xDC	; 220
    1a64:	38 eb       	ldi	r19, 0xB8	; 184
    1a66:	48 e0       	ldi	r20, 0x08	; 8
    1a68:	5e e3       	ldi	r21, 0x3E	; 62
    1a6a:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    1a6e:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    1a72:	d4 01       	movw	r26, r8
    1a74:	15 96       	adiw	r26, 0x05	; 5
    1a76:	7c 93       	st	X, r23
    1a78:	6e 93       	st	-X, r22
    1a7a:	14 97       	sbiw	r26, 0x04	; 4
    1a7c:	16 96       	adiw	r26, 0x06	; 6
    1a7e:	2c 92       	st	X, r2
    1a80:	16 97       	sbiw	r26, 0x06	; 6
    1a82:	18 96       	adiw	r26, 0x08	; 8
    1a84:	1c 92       	st	X, r1
    1a86:	1e 92       	st	-X, r1
    1a88:	17 97       	sbiw	r26, 0x07	; 7
    1a8a:	80 e0       	ldi	r24, 0x00	; 0
    1a8c:	62 e0       	ldi	r22, 0x02	; 2
    1a8e:	43 2d       	mov	r20, r3
    1a90:	29 8d       	ldd	r18, Y+25	; 0x19
    1a92:	3a 8d       	ldd	r19, Y+26	; 0x1a
    1a94:	0d 8d       	ldd	r16, Y+29	; 0x1d
    1a96:	1e 8d       	ldd	r17, Y+30	; 0x1e
    1a98:	72 01       	movw	r14, r4
    1a9a:	c2 2c       	mov	r12, r2
    1a9c:	aa 24       	eor	r10, r10
    1a9e:	bb 24       	eor	r11, r11
    1aa0:	83 2c       	mov	r8, r3
    1aa2:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <STEPPER_move>
    1aa6:	81 e0       	ldi	r24, 0x01	; 1
    1aa8:	ed b7       	in	r30, 0x3d	; 61
    1aaa:	fe b7       	in	r31, 0x3e	; 62
    1aac:	39 96       	adiw	r30, 0x09	; 9
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	fe bf       	out	0x3e, r31	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	ed bf       	out	0x3d, r30	; 61
		step_Fwd_L, step_Num_L, step_Speed_L, step_Accel_L, arc_Brk, // Left
		step_Fwd_R, step_Num_R, step_Speed_R, step_Accel_R, arc_Brk); // Right
		return SUCCESS;
	}	
	return FAIL;
}
    1ab8:	a0 96       	adiw	r28, 0x20	; 32
    1aba:	0f b6       	in	r0, 0x3f	; 63
    1abc:	f8 94       	cli
    1abe:	de bf       	out	0x3e, r29	; 62
    1ac0:	0f be       	out	0x3f, r0	; 63
    1ac2:	cd bf       	out	0x3d, r28	; 61
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	1f 91       	pop	r17
    1aca:	0f 91       	pop	r16
    1acc:	ff 90       	pop	r15
    1ace:	ef 90       	pop	r14
    1ad0:	df 90       	pop	r13
    1ad2:	cf 90       	pop	r12
    1ad4:	bf 90       	pop	r11
    1ad6:	af 90       	pop	r10
    1ad8:	9f 90       	pop	r9
    1ada:	8f 90       	pop	r8
    1adc:	7f 90       	pop	r7
    1ade:	6f 90       	pop	r6
    1ae0:	5f 90       	pop	r5
    1ae2:	4f 90       	pop	r4
    1ae4:	3f 90       	pop	r3
    1ae6:	2f 90       	pop	r2
    1ae8:	08 95       	ret

00001aea <checkContactIR>:
* Output Return:	none
* Overview:			Acquires status of contact sensors
********************************************************************/
void checkContactIR(void)
{	
	unsigned char sensors = ATTINY_get_sensors();
    1aea:	0e 94 25 22 	call	0x444a	; 0x444a <ATTINY_get_sensors>
	rightContact = 0b00000001 & sensors;
    1aee:	28 2f       	mov	r18, r24
    1af0:	21 70       	andi	r18, 0x01	; 1
    1af2:	20 93 6c 06 	sts	0x066C, r18
	leftContact =  (0b00000010 & sensors)>>1;
    1af6:	90 e0       	ldi	r25, 0x00	; 0
    1af8:	82 70       	andi	r24, 0x02	; 2
    1afa:	90 70       	andi	r25, 0x00	; 0
    1afc:	95 95       	asr	r25
    1afe:	87 95       	ror	r24
    1b00:	80 93 6d 06 	sts	0x066D, r24
}
    1b04:	08 95       	ret

00001b06 <checkLightSensor>:
*					sensors values sequentially
********************************************************************/
void checkLightSensor( void )
{
	// Update both light sensor variables
	rightLightVolt = getRightLight();
    1b06:	0e 94 58 05 	call	0xab0	; 0xab0 <getRightLight>
    1b0a:	60 93 63 05 	sts	0x0563, r22
    1b0e:	70 93 64 05 	sts	0x0564, r23
    1b12:	80 93 65 05 	sts	0x0565, r24
    1b16:	90 93 66 05 	sts	0x0566, r25
	leftLightVolt = getLeftLight();
    1b1a:	0e 94 6d 05 	call	0xada	; 0xada <getLeftLight>
    1b1e:	60 93 fb 06 	sts	0x06FB, r22
    1b22:	70 93 fc 06 	sts	0x06FC, r23
    1b26:	80 93 fd 06 	sts	0x06FD, r24
    1b2a:	90 93 fe 06 	sts	0x06FE, r25
	// LCD_printf("R Voltage: %3.2f\nL Voltage: %3.2f\n\n\n", voltageR, voltageL);
	// TMRSRVC_delay(2000);//wait 2 seconds
	// LCD_clear();
}
    1b2e:	08 95       	ret

00001b30 <checkIR>:
*					finding sensor values sequentially
********************************************************************/
void checkIR( void )
{
	// Update all IR values
	ftIR = getFrontIR();
    1b30:	0e 94 ef 04 	call	0x9de	; 0x9de <getFrontIR>
    1b34:	60 93 cb 04 	sts	0x04CB, r22
    1b38:	70 93 cc 04 	sts	0x04CC, r23
    1b3c:	80 93 cd 04 	sts	0x04CD, r24
    1b40:	90 93 ce 04 	sts	0x04CE, r25
	bkIR = getBackIR();
    1b44:	0e 94 cc 04 	call	0x998	; 0x998 <getBackIR>
    1b48:	60 93 d5 04 	sts	0x04D5, r22
    1b4c:	70 93 d6 04 	sts	0x04D6, r23
    1b50:	80 93 d7 04 	sts	0x04D7, r24
    1b54:	90 93 d8 04 	sts	0x04D8, r25
	ltIR = getLeftIR();
    1b58:	0e 94 35 05 	call	0xa6a	; 0xa6a <getLeftIR>
    1b5c:	60 93 6e 06 	sts	0x066E, r22
    1b60:	70 93 6f 06 	sts	0x066F, r23
    1b64:	80 93 70 06 	sts	0x0670, r24
    1b68:	90 93 71 06 	sts	0x0671, r25
	rtIR = getRightIR();
    1b6c:	0e 94 12 05 	call	0xa24	; 0xa24 <getRightIR>
    1b70:	60 93 73 06 	sts	0x0673, r22
    1b74:	70 93 74 06 	sts	0x0674, r23
    1b78:	80 93 75 06 	sts	0x0675, r24
    1b7c:	90 93 76 06 	sts	0x0676, r25
}
    1b80:	08 95       	ret

00001b82 <LCD_set_pixel>:
 * 					@param col an unsigned char that specifies the lcd column
 * 					@param val a boolean that specifies the pixel value to be set
 *					LCD text print size (4 rows, 22 columns)
 *					LCD pixel print size (32 rows, 128 columns)
********************************************************************/
void LCD_set_pixel(unsigned char row, unsigned char col, BOOL val) {
    1b82:	cf 92       	push	r12
    1b84:	df 92       	push	r13
    1b86:	ef 92       	push	r14
    1b88:	ff 92       	push	r15
    1b8a:	0f 93       	push	r16
    1b8c:	1f 93       	push	r17
    1b8e:	cf 93       	push	r28
    1b90:	df 93       	push	r29
    1b92:	16 2f       	mov	r17, r22
    1b94:	e4 2e       	mov	r14, r20
	row &= 0x1F; // Limit row 0-31
    1b96:	5f e1       	ldi	r21, 0x1F	; 31
    1b98:	f5 2e       	mov	r15, r21
    1b9a:	f8 22       	and	r15, r24
	col &= 0x7F; // Limit column 0-127
    1b9c:	1f 77       	andi	r17, 0x7F	; 127

	// Divide row by 8 to restrict to 0-3
	unsigned char page = row >> 3;
    1b9e:	0f 2d       	mov	r16, r15
    1ba0:	06 95       	lsr	r16
    1ba2:	06 95       	lsr	r16
    1ba4:	06 95       	lsr	r16

	// Set page and column to write next
	LCD_set_PGC_addr( page, col );
    1ba6:	c0 2f       	mov	r28, r16
    1ba8:	d0 e0       	ldi	r29, 0x00	; 0
    1baa:	c1 2e       	mov	r12, r17
    1bac:	dd 24       	eor	r13, r13
    1bae:	ce 01       	movw	r24, r28
    1bb0:	b6 01       	movw	r22, r12
    1bb2:	0e 94 de 1c 	call	0x39bc	; 0x39bc <LCD_set_PGC_addr>
	LCD_set_next_PGC( page, col );
    1bb6:	80 2f       	mov	r24, r16
    1bb8:	61 2f       	mov	r22, r17
    1bba:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <LCD_set_next_PGC>
    1bbe:	fe 01       	movw	r30, r28
    1bc0:	45 e0       	ldi	r20, 0x05	; 5
    1bc2:	ee 0f       	add	r30, r30
    1bc4:	ff 1f       	adc	r31, r31
    1bc6:	4a 95       	dec	r20
    1bc8:	e1 f7       	brne	.-8      	; 0x1bc2 <LCD_set_pixel+0x40>
    1bca:	2f 2d       	mov	r18, r15
    1bcc:	30 e0       	ldi	r19, 0x00	; 0

	// Determine new pixel value by shifting 1 into place determined
	// by remainder of divding by 8. And/or determined if pixel is on
	// or off
	if(val) {
    1bce:	ee 20       	and	r14, r14
    1bd0:	89 f0       	breq	.+34     	; 0x1bf4 <LCD_set_pixel+0x72>
		pix_arr[page][col] |= (1 << (row & 7));
    1bd2:	ec 0d       	add	r30, r12
    1bd4:	fd 1d       	adc	r31, r13
    1bd6:	ea 51       	subi	r30, 0x1A	; 26
    1bd8:	fa 4f       	sbci	r31, 0xFA	; 250
    1bda:	27 70       	andi	r18, 0x07	; 7
    1bdc:	30 70       	andi	r19, 0x00	; 0
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	02 c0       	rjmp	.+4      	; 0x1be8 <LCD_set_pixel+0x66>
    1be4:	88 0f       	add	r24, r24
    1be6:	99 1f       	adc	r25, r25
    1be8:	2a 95       	dec	r18
    1bea:	e2 f7       	brpl	.-8      	; 0x1be4 <LCD_set_pixel+0x62>
    1bec:	20 81       	ld	r18, Z
    1bee:	28 2b       	or	r18, r24
    1bf0:	20 83       	st	Z, r18
    1bf2:	11 c0       	rjmp	.+34     	; 0x1c16 <LCD_set_pixel+0x94>
	} else {
		pix_arr[page][col] &= ~(1 << (row & 7));
    1bf4:	ec 0d       	add	r30, r12
    1bf6:	fd 1d       	adc	r31, r13
    1bf8:	ea 51       	subi	r30, 0x1A	; 26
    1bfa:	fa 4f       	sbci	r31, 0xFA	; 250
    1bfc:	27 70       	andi	r18, 0x07	; 7
    1bfe:	30 70       	andi	r19, 0x00	; 0
    1c00:	81 e0       	ldi	r24, 0x01	; 1
    1c02:	90 e0       	ldi	r25, 0x00	; 0
    1c04:	02 c0       	rjmp	.+4      	; 0x1c0a <LCD_set_pixel+0x88>
    1c06:	88 0f       	add	r24, r24
    1c08:	99 1f       	adc	r25, r25
    1c0a:	2a 95       	dec	r18
    1c0c:	e2 f7       	brpl	.-8      	; 0x1c06 <LCD_set_pixel+0x84>
    1c0e:	80 95       	com	r24
    1c10:	20 81       	ld	r18, Z
    1c12:	82 23       	and	r24, r18
    1c14:	80 83       	st	Z, r24
	}

	// Write the pixel data out to the lcd
	LCD_write_data( pix_arr[page][col] );
    1c16:	35 e0       	ldi	r19, 0x05	; 5
    1c18:	cc 0f       	add	r28, r28
    1c1a:	dd 1f       	adc	r29, r29
    1c1c:	3a 95       	dec	r19
    1c1e:	e1 f7       	brne	.-8      	; 0x1c18 <LCD_set_pixel+0x96>
    1c20:	cc 0d       	add	r28, r12
    1c22:	dd 1d       	adc	r29, r13
    1c24:	ca 51       	subi	r28, 0x1A	; 26
    1c26:	da 4f       	sbci	r29, 0xFA	; 250
    1c28:	88 81       	ld	r24, Y
    1c2a:	61 e0       	ldi	r22, 0x01	; 1
    1c2c:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
}
    1c30:	df 91       	pop	r29
    1c32:	cf 91       	pop	r28
    1c34:	1f 91       	pop	r17
    1c36:	0f 91       	pop	r16
    1c38:	ff 90       	pop	r15
    1c3a:	ef 90       	pop	r14
    1c3c:	df 90       	pop	r13
    1c3e:	cf 90       	pop	r12
    1c40:	08 95       	ret

00001c42 <printCell>:
* Function:			void printCell(unsigned char, unsigned char, unsigned char, BOOL isrobot, unsigned char orent)
* Input Variables:	void
* Output Return:	unsigned char, unsigned char, unsigned char, BOOL, unsigned char
* Overview:		    Prints the cell
********************************************************************/
void printCell(unsigned char cell, unsigned char r, unsigned char c, BOOL isrobot, unsigned char orent, BOOL reset){
    1c42:	7f 92       	push	r7
    1c44:	8f 92       	push	r8
    1c46:	9f 92       	push	r9
    1c48:	af 92       	push	r10
    1c4a:	bf 92       	push	r11
    1c4c:	cf 92       	push	r12
    1c4e:	df 92       	push	r13
    1c50:	ef 92       	push	r14
    1c52:	ff 92       	push	r15
    1c54:	0f 93       	push	r16
    1c56:	1f 93       	push	r17
    1c58:	98 2e       	mov	r9, r24
    1c5a:	b6 2e       	mov	r11, r22
    1c5c:	c4 2e       	mov	r12, r20
    1c5e:	a2 2e       	mov	r10, r18
    1c60:	80 2e       	mov	r8, r16
    1c62:	7e 2c       	mov	r7, r14

	r = r*LCD_CELL_OFFSET;
    1c64:	bb 0c       	add	r11, r11
    1c66:	bb 0c       	add	r11, r11
    1c68:	bb 0c       	add	r11, r11
	c = c*LCD_CELL_OFFSET;
    1c6a:	dd 24       	eor	r13, r13
    1c6c:	23 e0       	ldi	r18, 0x03	; 3
    1c6e:	cc 0c       	add	r12, r12
    1c70:	dd 1c       	adc	r13, r13
    1c72:	2a 95       	dec	r18
    1c74:	e1 f7       	brne	.-8      	; 0x1c6e <printCell+0x2c>
    1c76:	1c 2d       	mov	r17, r12
	
	LCD_set_pixel(LCD_OFFSET - r,   c,   1);
    1c78:	0f e1       	ldi	r16, 0x1F	; 31
    1c7a:	0b 19       	sub	r16, r11
    1c7c:	80 2f       	mov	r24, r16
    1c7e:	6c 2d       	mov	r22, r12
    1c80:	41 e0       	ldi	r20, 0x01	; 1
    1c82:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c,   1);
    1c86:	98 e1       	ldi	r25, 0x18	; 24
    1c88:	e9 2e       	mov	r14, r25
    1c8a:	eb 18       	sub	r14, r11
    1c8c:	8e 2d       	mov	r24, r14
    1c8e:	6c 2d       	mov	r22, r12
    1c90:	41 e0       	ldi	r20, 0x01	; 1
    1c92:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - r,   c+7, 1);
    1c96:	87 e0       	ldi	r24, 0x07	; 7
    1c98:	f8 2e       	mov	r15, r24
    1c9a:	fc 0c       	add	r15, r12
    1c9c:	80 2f       	mov	r24, r16
    1c9e:	6f 2d       	mov	r22, r15
    1ca0:	41 e0       	ldi	r20, 0x01	; 1
    1ca2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	LCD_set_pixel(LCD_OFFSET - (r+7), c+7, 1);
    1ca6:	8e 2d       	mov	r24, r14
    1ca8:	6f 2d       	mov	r22, r15
    1caa:	41 e0       	ldi	r20, 0x01	; 1
    1cac:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	
	if(cell&0b1000){
    1cb0:	c9 2c       	mov	r12, r9
    1cb2:	93 fe       	sbrs	r9, 3
    1cb4:	24 c0       	rjmp	.+72     	; 0x1cfe <printCell+0xbc>
		LCD_set_pixel(LCD_OFFSET - r, c+1, 1);
    1cb6:	61 2f       	mov	r22, r17
    1cb8:	6f 5f       	subi	r22, 0xFF	; 255
    1cba:	80 2f       	mov	r24, r16
    1cbc:	41 e0       	ldi	r20, 0x01	; 1
    1cbe:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+2, 1);
    1cc2:	61 2f       	mov	r22, r17
    1cc4:	6e 5f       	subi	r22, 0xFE	; 254
    1cc6:	80 2f       	mov	r24, r16
    1cc8:	41 e0       	ldi	r20, 0x01	; 1
    1cca:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+3, 1);
    1cce:	61 2f       	mov	r22, r17
    1cd0:	6d 5f       	subi	r22, 0xFD	; 253
    1cd2:	80 2f       	mov	r24, r16
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+4, 1);
    1cda:	61 2f       	mov	r22, r17
    1cdc:	6c 5f       	subi	r22, 0xFC	; 252
    1cde:	80 2f       	mov	r24, r16
    1ce0:	41 e0       	ldi	r20, 0x01	; 1
    1ce2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+5, 1);		
    1ce6:	61 2f       	mov	r22, r17
    1ce8:	6b 5f       	subi	r22, 0xFB	; 251
    1cea:	80 2f       	mov	r24, r16
    1cec:	41 e0       	ldi	r20, 0x01	; 1
    1cee:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - r, c+6, 1);		
    1cf2:	61 2f       	mov	r22, r17
    1cf4:	6a 5f       	subi	r22, 0xFA	; 250
    1cf6:	80 2f       	mov	r24, r16
    1cf8:	41 e0       	ldi	r20, 0x01	; 1
    1cfa:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0100){
    1cfe:	c2 fe       	sbrs	r12, 2
    1d00:	25 c0       	rjmp	.+74     	; 0x1d4c <printCell+0x10a>
		LCD_set_pixel(LCD_OFFSET - (r+1), c+7, 1);
    1d02:	8b 2d       	mov	r24, r11
    1d04:	80 95       	com	r24
    1d06:	81 5e       	subi	r24, 0xE1	; 225
    1d08:	6f 2d       	mov	r22, r15
    1d0a:	41 e0       	ldi	r20, 0x01	; 1
    1d0c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c+7, 1);
    1d10:	8d e1       	ldi	r24, 0x1D	; 29
    1d12:	8b 19       	sub	r24, r11
    1d14:	6f 2d       	mov	r22, r15
    1d16:	41 e0       	ldi	r20, 0x01	; 1
    1d18:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+7, 1);
    1d1c:	8c e1       	ldi	r24, 0x1C	; 28
    1d1e:	8b 19       	sub	r24, r11
    1d20:	6f 2d       	mov	r22, r15
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+7, 1);
    1d28:	8b e1       	ldi	r24, 0x1B	; 27
    1d2a:	8b 19       	sub	r24, r11
    1d2c:	6f 2d       	mov	r22, r15
    1d2e:	41 e0       	ldi	r20, 0x01	; 1
    1d30:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+7, 1);		
    1d34:	8a e1       	ldi	r24, 0x1A	; 26
    1d36:	8b 19       	sub	r24, r11
    1d38:	6f 2d       	mov	r22, r15
    1d3a:	41 e0       	ldi	r20, 0x01	; 1
    1d3c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c+7, 1);			
    1d40:	89 e1       	ldi	r24, 0x19	; 25
    1d42:	8b 19       	sub	r24, r11
    1d44:	6f 2d       	mov	r22, r15
    1d46:	41 e0       	ldi	r20, 0x01	; 1
    1d48:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0010){
    1d4c:	c1 fe       	sbrs	r12, 1
    1d4e:	24 c0       	rjmp	.+72     	; 0x1d98 <printCell+0x156>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+1, 1);
    1d50:	61 2f       	mov	r22, r17
    1d52:	6f 5f       	subi	r22, 0xFF	; 255
    1d54:	8e 2d       	mov	r24, r14
    1d56:	41 e0       	ldi	r20, 0x01	; 1
    1d58:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+2, 1);
    1d5c:	61 2f       	mov	r22, r17
    1d5e:	6e 5f       	subi	r22, 0xFE	; 254
    1d60:	8e 2d       	mov	r24, r14
    1d62:	41 e0       	ldi	r20, 0x01	; 1
    1d64:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+3, 1);
    1d68:	61 2f       	mov	r22, r17
    1d6a:	6d 5f       	subi	r22, 0xFD	; 253
    1d6c:	8e 2d       	mov	r24, r14
    1d6e:	41 e0       	ldi	r20, 0x01	; 1
    1d70:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+4, 1);
    1d74:	61 2f       	mov	r22, r17
    1d76:	6c 5f       	subi	r22, 0xFC	; 252
    1d78:	8e 2d       	mov	r24, r14
    1d7a:	41 e0       	ldi	r20, 0x01	; 1
    1d7c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+5, 1);		
    1d80:	61 2f       	mov	r22, r17
    1d82:	6b 5f       	subi	r22, 0xFB	; 251
    1d84:	8e 2d       	mov	r24, r14
    1d86:	41 e0       	ldi	r20, 0x01	; 1
    1d88:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+7), c+6, 1);		
    1d8c:	61 2f       	mov	r22, r17
    1d8e:	6a 5f       	subi	r22, 0xFA	; 250
    1d90:	8e 2d       	mov	r24, r14
    1d92:	41 e0       	ldi	r20, 0x01	; 1
    1d94:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}
	if(cell&0b0001){
    1d98:	c0 fe       	sbrs	r12, 0
    1d9a:	25 c0       	rjmp	.+74     	; 0x1de6 <printCell+0x1a4>
		LCD_set_pixel(LCD_OFFSET - (r+1), c, 1);
    1d9c:	8b 2d       	mov	r24, r11
    1d9e:	80 95       	com	r24
    1da0:	81 5e       	subi	r24, 0xE1	; 225
    1da2:	61 2f       	mov	r22, r17
    1da4:	41 e0       	ldi	r20, 0x01	; 1
    1da6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+2), c, 1);
    1daa:	8d e1       	ldi	r24, 0x1D	; 29
    1dac:	8b 19       	sub	r24, r11
    1dae:	61 2f       	mov	r22, r17
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c, 1);
    1db6:	8c e1       	ldi	r24, 0x1C	; 28
    1db8:	8b 19       	sub	r24, r11
    1dba:	61 2f       	mov	r22, r17
    1dbc:	41 e0       	ldi	r20, 0x01	; 1
    1dbe:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c, 1);
    1dc2:	8b e1       	ldi	r24, 0x1B	; 27
    1dc4:	8b 19       	sub	r24, r11
    1dc6:	61 2f       	mov	r22, r17
    1dc8:	41 e0       	ldi	r20, 0x01	; 1
    1dca:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c, 1);		
    1dce:	8a e1       	ldi	r24, 0x1A	; 26
    1dd0:	8b 19       	sub	r24, r11
    1dd2:	61 2f       	mov	r22, r17
    1dd4:	41 e0       	ldi	r20, 0x01	; 1
    1dd6:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+6), c, 1);		
    1dda:	89 e1       	ldi	r24, 0x19	; 25
    1ddc:	8b 19       	sub	r24, r11
    1dde:	61 2f       	mov	r22, r17
    1de0:	41 e0       	ldi	r20, 0x01	; 1
    1de2:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
	}	
	if(isrobot){
    1de6:	aa 20       	and	r10, r10
    1de8:	e1 f1       	breq	.+120    	; 0x1e62 <printCell+0x220>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1dea:	bc e1       	ldi	r27, 0x1C	; 28
    1dec:	eb 2e       	mov	r14, r27
    1dee:	eb 18       	sub	r14, r11
    1df0:	a3 e0       	ldi	r26, 0x03	; 3
    1df2:	ca 2e       	mov	r12, r26
    1df4:	c1 0e       	add	r12, r17
    1df6:	8e 2d       	mov	r24, r14
    1df8:	6c 2d       	mov	r22, r12
    1dfa:	4a 2d       	mov	r20, r10
    1dfc:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1e00:	fb e1       	ldi	r31, 0x1B	; 27
    1e02:	ff 2e       	mov	r15, r31
    1e04:	fb 18       	sub	r15, r11
    1e06:	8f 2d       	mov	r24, r15
    1e08:	6c 2d       	mov	r22, r12
    1e0a:	4a 2d       	mov	r20, r10
    1e0c:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1e10:	01 2f       	mov	r16, r17
    1e12:	0c 5f       	subi	r16, 0xFC	; 252
    1e14:	8e 2d       	mov	r24, r14
    1e16:	60 2f       	mov	r22, r16
    1e18:	4a 2d       	mov	r20, r10
    1e1a:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1e1e:	8f 2d       	mov	r24, r15
    1e20:	60 2f       	mov	r22, r16
    1e22:	4a 2d       	mov	r20, r10
    1e24:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		
		switch(orent){
    1e28:	81 e0       	ldi	r24, 0x01	; 1
    1e2a:	88 16       	cp	r8, r24
    1e2c:	71 f0       	breq	.+28     	; 0x1e4a <printCell+0x208>
    1e2e:	88 16       	cp	r8, r24
    1e30:	40 f0       	brcs	.+16     	; 0x1e42 <printCell+0x200>
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	88 16       	cp	r8, r24
    1e36:	61 f0       	breq	.+24     	; 0x1e50 <printCell+0x20e>
    1e38:	83 e0       	ldi	r24, 0x03	; 3
    1e3a:	88 16       	cp	r8, r24
    1e3c:	09 f0       	breq	.+2      	; 0x1e40 <printCell+0x1fe>
    1e3e:	4a c0       	rjmp	.+148    	; 0x1ed4 <printCell+0x292>
    1e40:	0b c0       	rjmp	.+22     	; 0x1e58 <printCell+0x216>
			case NORTH:
				LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1e42:	8d e1       	ldi	r24, 0x1D	; 29
    1e44:	8b 19       	sub	r24, r11
    1e46:	6c 2d       	mov	r22, r12
    1e48:	0a c0       	rjmp	.+20     	; 0x1e5e <printCell+0x21c>
				break;
			case EAST:
				LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1e4a:	1b 5f       	subi	r17, 0xFB	; 251
    1e4c:	8e 2d       	mov	r24, r14
    1e4e:	06 c0       	rjmp	.+12     	; 0x1e5c <printCell+0x21a>
				break;
			case SOUTH:
				LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);			
    1e50:	8a e1       	ldi	r24, 0x1A	; 26
    1e52:	8b 19       	sub	r24, r11
    1e54:	60 2f       	mov	r22, r16
    1e56:	03 c0       	rjmp	.+6      	; 0x1e5e <printCell+0x21c>
				break;
			case WEST:
				LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);			
    1e58:	1e 5f       	subi	r17, 0xFE	; 254
    1e5a:	8f 2d       	mov	r24, r15
    1e5c:	61 2f       	mov	r22, r17
    1e5e:	4a 2d       	mov	r20, r10
    1e60:	37 c0       	rjmp	.+110    	; 0x1ed0 <printCell+0x28e>
				break;
			default:
				break;
		}
	}
	else if(reset){
    1e62:	77 20       	and	r7, r7
    1e64:	b9 f1       	breq	.+110    	; 0x1ed4 <printCell+0x292>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+3, isrobot);
    1e66:	ec e1       	ldi	r30, 0x1C	; 28
    1e68:	ce 2e       	mov	r12, r30
    1e6a:	cb 18       	sub	r12, r11
    1e6c:	73 e0       	ldi	r23, 0x03	; 3
    1e6e:	e7 2e       	mov	r14, r23
    1e70:	e1 0e       	add	r14, r17
    1e72:	8c 2d       	mov	r24, r12
    1e74:	6e 2d       	mov	r22, r14
    1e76:	40 e0       	ldi	r20, 0x00	; 0
    1e78:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+3, isrobot);
    1e7c:	0b e1       	ldi	r16, 0x1B	; 27
    1e7e:	0b 19       	sub	r16, r11
    1e80:	80 2f       	mov	r24, r16
    1e82:	6e 2d       	mov	r22, r14
    1e84:	40 e0       	ldi	r20, 0x00	; 0
    1e86:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+4, isrobot);
    1e8a:	64 e0       	ldi	r22, 0x04	; 4
    1e8c:	f6 2e       	mov	r15, r22
    1e8e:	f1 0e       	add	r15, r17
    1e90:	8c 2d       	mov	r24, r12
    1e92:	6f 2d       	mov	r22, r15
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+4, isrobot);
    1e9a:	80 2f       	mov	r24, r16
    1e9c:	6f 2d       	mov	r22, r15
    1e9e:	40 e0       	ldi	r20, 0x00	; 0
    1ea0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		
		LCD_set_pixel(LCD_OFFSET - (r+2), c+3, isrobot);
    1ea4:	8d e1       	ldi	r24, 0x1D	; 29
    1ea6:	8b 19       	sub	r24, r11
    1ea8:	6e 2d       	mov	r22, r14
    1eaa:	40 e0       	ldi	r20, 0x00	; 0
    1eac:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+3), c+5, isrobot);
    1eb0:	1b 5f       	subi	r17, 0xFB	; 251
    1eb2:	8c 2d       	mov	r24, r12
    1eb4:	61 2f       	mov	r22, r17
    1eb6:	40 e0       	ldi	r20, 0x00	; 0
    1eb8:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+5), c+4, isrobot);
    1ebc:	8a e1       	ldi	r24, 0x1A	; 26
    1ebe:	8b 19       	sub	r24, r11
    1ec0:	6f 2d       	mov	r22, r15
    1ec2:	40 e0       	ldi	r20, 0x00	; 0
    1ec4:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		LCD_set_pixel(LCD_OFFSET - (r+4), c+2, isrobot);
    1ec8:	13 50       	subi	r17, 0x03	; 3
    1eca:	80 2f       	mov	r24, r16
    1ecc:	61 2f       	mov	r22, r17
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	0e 94 c1 0d 	call	0x1b82	; 0x1b82 <LCD_set_pixel>
		}
}
    1ed4:	1f 91       	pop	r17
    1ed6:	0f 91       	pop	r16
    1ed8:	ff 90       	pop	r15
    1eda:	ef 90       	pop	r14
    1edc:	df 90       	pop	r13
    1ede:	cf 90       	pop	r12
    1ee0:	bf 90       	pop	r11
    1ee2:	af 90       	pop	r10
    1ee4:	9f 90       	pop	r9
    1ee6:	8f 90       	pop	r8
    1ee8:	7f 90       	pop	r7
    1eea:	08 95       	ret

00001eec <printMap>:
* Input Variables:	char
* Output Return:	void
* Overview:		    Print the map
********************************************************************/
void printMap(char reset)
{
    1eec:	9f 92       	push	r9
    1eee:	af 92       	push	r10
    1ef0:	bf 92       	push	r11
    1ef2:	cf 92       	push	r12
    1ef4:	df 92       	push	r13
    1ef6:	ef 92       	push	r14
    1ef8:	ff 92       	push	r15
    1efa:	0f 93       	push	r16
    1efc:	1f 93       	push	r17
    1efe:	cf 93       	push	r28
    1f00:	df 93       	push	r29
    1f02:	98 2e       	mov	r9, r24
	unsigned char r;
	unsigned char c;
	unsigned char cell;
	
	unsigned char curRow = currentCellWorld >> 2;
    1f04:	80 91 6a 06 	lds	r24, 0x066A
    1f08:	a8 2e       	mov	r10, r24
    1f0a:	a6 94       	lsr	r10
    1f0c:	a6 94       	lsr	r10
	unsigned char curCol = currentCellWorld & 0b0011;
    1f0e:	43 e0       	ldi	r20, 0x03	; 3
    1f10:	b4 2e       	mov	r11, r20
    1f12:	b8 22       	and	r11, r24
    1f14:	cc 24       	eor	r12, r12
    1f16:	dd 24       	eor	r13, r13
    1f18:	1e c0       	rjmp	.+60     	; 0x1f56 <printMap+0x6a>
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
			cell = ROBOT_WORLD[r][c];
    1f1a:	88 81       	ld	r24, Y
			isrobot = (r == curRow)&&(c == curCol);
    1f1c:	fa 14       	cp	r15, r10
    1f1e:	19 f0       	breq	.+6      	; 0x1f26 <printMap+0x3a>
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	06 c0       	rjmp	.+12     	; 0x1f32 <printMap+0x46>
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	1b 15       	cp	r17, r11
    1f2c:	11 f4       	brne	.+4      	; 0x1f32 <printMap+0x46>
    1f2e:	21 e0       	ldi	r18, 0x01	; 1
    1f30:	30 e0       	ldi	r19, 0x00	; 0
			printCell(cell, r, c, isrobot, currentOrientation, reset);
    1f32:	6f 2d       	mov	r22, r15
    1f34:	41 2f       	mov	r20, r17
    1f36:	00 91 68 05 	lds	r16, 0x0568
    1f3a:	e9 2c       	mov	r14, r9
    1f3c:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <printCell>
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
		for(c = 0; c < WORLD_COLUMN_SIZE; c++){
    1f40:	1f 5f       	subi	r17, 0xFF	; 255
    1f42:	21 96       	adiw	r28, 0x01	; 1
    1f44:	14 30       	cpi	r17, 0x04	; 4
    1f46:	49 f7       	brne	.-46     	; 0x1f1a <printMap+0x2e>
    1f48:	08 94       	sec
    1f4a:	c1 1c       	adc	r12, r1
    1f4c:	d1 1c       	adc	r13, r1
	
	unsigned char curRow = currentCellWorld >> 2;
	unsigned char curCol = currentCellWorld & 0b0011;
	
	BOOL isrobot;
	for(r = 0; r < WORLD_ROW_SIZE; r++){
    1f4e:	84 e0       	ldi	r24, 0x04	; 4
    1f50:	c8 16       	cp	r12, r24
    1f52:	d1 04       	cpc	r13, r1
    1f54:	51 f0       	breq	.+20     	; 0x1f6a <printMap+0x7e>
    1f56:	fc 2c       	mov	r15, r12
    1f58:	e6 01       	movw	r28, r12
    1f5a:	cc 0f       	add	r28, r28
    1f5c:	dd 1f       	adc	r29, r29
    1f5e:	cc 0f       	add	r28, r28
    1f60:	dd 1f       	adc	r29, r29
    1f62:	ca 5c       	subi	r28, 0xCA	; 202
    1f64:	dc 4f       	sbci	r29, 0xFC	; 252
    1f66:	10 e0       	ldi	r17, 0x00	; 0
    1f68:	d8 cf       	rjmp	.-80     	; 0x1f1a <printMap+0x2e>
			cell = ROBOT_WORLD[r][c];
			isrobot = (r == curRow)&&(c == curCol);
			printCell(cell, r, c, isrobot, currentOrientation, reset);
		}	
	}
}
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	1f 91       	pop	r17
    1f70:	0f 91       	pop	r16
    1f72:	ff 90       	pop	r15
    1f74:	ef 90       	pop	r14
    1f76:	df 90       	pop	r13
    1f78:	cf 90       	pop	r12
    1f7a:	bf 90       	pop	r11
    1f7c:	af 90       	pop	r10
    1f7e:	9f 90       	pop	r9
    1f80:	08 95       	ret

00001f82 <checkOdometry>:
* Output Return:	unsigned char reset resets the odometry
* Overview:		    Checks the current odometry to the trigger and
*					sets the flag whe appropriate
********************************************************************/
void checkOdometry( unsigned char reset )
{	
    1f82:	1f 93       	push	r17
    1f84:	18 2f       	mov	r17, r24
	// check to see if we have traveresed the trigger distance
	// or that a reset has been called
	
	// AT START: odometry is REALLY SMALL & odometryTrigger is at approx 343
	// Suggest breaking apart the IF case?
	if((odometry > odometryTrigger))
    1f86:	60 91 ff 06 	lds	r22, 0x06FF
    1f8a:	70 91 00 07 	lds	r23, 0x0700
    1f8e:	80 91 01 07 	lds	r24, 0x0701
    1f92:	90 91 02 07 	lds	r25, 0x0702
    1f96:	20 91 4f 04 	lds	r18, 0x044F
    1f9a:	30 91 50 04 	lds	r19, 0x0450
    1f9e:	40 91 51 04 	lds	r20, 0x0451
    1fa2:	50 91 52 04 	lds	r21, 0x0452
    1fa6:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    1faa:	20 e0       	ldi	r18, 0x00	; 0
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	5f e3       	ldi	r21, 0x3F	; 63
    1fb2:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1fb6:	2c ed       	ldi	r18, 0xDC	; 220
    1fb8:	38 eb       	ldi	r19, 0xB8	; 184
    1fba:	48 e0       	ldi	r20, 0x08	; 8
    1fbc:	5e e3       	ldi	r21, 0x3E	; 62
    1fbe:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    1fc2:	20 91 53 05 	lds	r18, 0x0553
    1fc6:	30 91 54 05 	lds	r19, 0x0554
    1fca:	40 91 55 05 	lds	r20, 0x0555
    1fce:	50 91 56 05 	lds	r21, 0x0556
    1fd2:	0e 94 83 30 	call	0x6106	; 0x6106 <__gesf2>
    1fd6:	18 16       	cp	r1, r24
    1fd8:	bc f4       	brge	.+46     	; 0x2008 <checkOdometry+0x86>
	{
		odometryFlag = 1;
    1fda:	81 e0       	ldi	r24, 0x01	; 1
    1fdc:	80 93 72 06 	sts	0x0672, r24
		odometryStepL = 0;
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a0 e0       	ldi	r26, 0x00	; 0
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	80 93 ff 06 	sts	0x06FF, r24
    1fec:	90 93 00 07 	sts	0x0700, r25
    1ff0:	a0 93 01 07 	sts	0x0701, r26
    1ff4:	b0 93 02 07 	sts	0x0702, r27
		odometryStepR = 0;
    1ff8:	80 93 4f 04 	sts	0x044F, r24
    1ffc:	90 93 50 04 	sts	0x0450, r25
    2000:	a0 93 51 04 	sts	0x0451, r26
    2004:	b0 93 52 04 	sts	0x0452, r27
	}
	if (reset){
    2008:	11 23       	and	r17, r17
    200a:	d9 f0       	breq	.+54     	; 0x2042 <checkOdometry+0xc0>
		STEPPER_set_steps(STEPPER_BOTH,0);
    200c:	82 e0       	ldi	r24, 0x02	; 2
    200e:	60 e0       	ldi	r22, 0x00	; 0
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <STEPPER_set_steps>
		odometryFlag = 0;
    2016:	10 92 72 06 	sts	0x0672, r1
		odometryStepL = 0;
    201a:	80 e0       	ldi	r24, 0x00	; 0
    201c:	90 e0       	ldi	r25, 0x00	; 0
    201e:	a0 e0       	ldi	r26, 0x00	; 0
    2020:	b0 e0       	ldi	r27, 0x00	; 0
    2022:	80 93 ff 06 	sts	0x06FF, r24
    2026:	90 93 00 07 	sts	0x0700, r25
    202a:	a0 93 01 07 	sts	0x0701, r26
    202e:	b0 93 02 07 	sts	0x0702, r27
		odometryStepR = 0;
    2032:	80 93 4f 04 	sts	0x044F, r24
    2036:	90 93 50 04 	sts	0x0450, r25
    203a:	a0 93 51 04 	sts	0x0451, r26
    203e:	b0 93 52 04 	sts	0x0452, r27
	
	// // Else the flag RESETS to ZERO?!
	// else{
		// odometryFlag = 0;
	// }
}
    2042:	1f 91       	pop	r17
    2044:	08 95       	ret

00002046 <initializeRobot>:
* Output Return:	none
* Overview:			This initialize the robot by using other startups
********************************************************************/
void initializeRobot(void)
{
	ATopstat = ATTINY_open();//open the tiny microcontroller
    2046:	0e 94 a4 22 	call	0x4548	; 0x4548 <ATTINY_open>
    204a:	90 93 4e 04 	sts	0x044E, r25
    204e:	80 93 4d 04 	sts	0x044D, r24
	LEopstat = LED_open(); //open the LED module
    2052:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LED_open>
    2056:	90 93 4c 04 	sts	0x044C, r25
    205a:	80 93 4b 04 	sts	0x044B, r24
	LCopstat = LCD_open(); //open the LCD module
    205e:	0e 94 35 1c 	call	0x386a	; 0x386a <LCD_open>
    2062:	90 93 4a 04 	sts	0x044A, r25
    2066:	80 93 49 04 	sts	0x0449, r24
	STEPPER_open(); // Open STEPPER module for use
    206a:	0e 94 a0 1f 	call	0x3f40	; 0x3f40 <STEPPER_open>
	SPKR_open(SPKR_TONE_MODE);//open the speaker in tone mode
    206e:	82 e0       	ldi	r24, 0x02	; 2
    2070:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <SPKR_open>
	
	LED_open();
    2074:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <LED_open>
	I2C_open();
    2078:	0e 94 fe 23 	call	0x47fc	; 0x47fc <I2C_open>
	ADC_open();//open the ADC module
    207c:	0e 94 a2 1b 	call	0x3744	; 0x3744 <ADC_open>
 	ADC_set_VREF( ADC_VREF_AVCC );// Set the Voltage Reference first so VREF=5V.
    2080:	81 e0       	ldi	r24, 0x01	; 1
    2082:	0e 94 04 1c 	call	0x3808	; 0x3808 <ADC_set_VREF>
	
	// Initialize IR Values and Reset Prefilter
	checkIR();
    2086:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <checkIR>
	prefilter(1);
    208a:	81 e0       	ldi	r24, 0x01	; 1
    208c:	0e 94 0a 06 	call	0xc14	; 0xc14 <prefilter>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
    2090:	8f ee       	ldi	r24, 0xEF	; 239
    2092:	90 e0       	ldi	r25, 0x00	; 0
    2094:	a5 e8       	ldi	r26, 0x85	; 133
    2096:	b1 e4       	ldi	r27, 0x41	; 65
    2098:	80 93 53 05 	sts	0x0553, r24
    209c:	90 93 54 05 	sts	0x0554, r25
    20a0:	a0 93 55 05 	sts	0x0555, r26
    20a4:	b0 93 56 05 	sts	0x0556, r27
    20a8:	20 e0       	ldi	r18, 0x00	; 0
    20aa:	30 e0       	ldi	r19, 0x00	; 0
    20ac:	0a c0       	rjmp	.+20     	; 0x20c2 <initializeRobot+0x7c>
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
			pix_arr[i][j] = 0x00;
    20ae:	11 92       	st	Z+, r1
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
		for(int j = 0; j < 32; j++) {
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	80 32       	cpi	r24, 0x20	; 32
    20b4:	91 05       	cpc	r25, r1
    20b6:	d9 f7       	brne	.-10     	; 0x20ae <initializeRobot+0x68>
	
	// Mistake? odometryTrigger = WORLD_RESOLUTION_SIZE*D_STEP which is about 6
	odometryTrigger = WORLD_RESOLUTION_SIZE/2.75;
	
	// pixel array for the LCD screen
	for(int i = 0; i < 4; i++) {
    20b8:	2f 5f       	subi	r18, 0xFF	; 255
    20ba:	3f 4f       	sbci	r19, 0xFF	; 255
    20bc:	24 30       	cpi	r18, 0x04	; 4
    20be:	31 05       	cpc	r19, r1
    20c0:	59 f0       	breq	.+22     	; 0x20d8 <initializeRobot+0x92>
    20c2:	f9 01       	movw	r30, r18
    20c4:	55 e0       	ldi	r21, 0x05	; 5
    20c6:	ee 0f       	add	r30, r30
    20c8:	ff 1f       	adc	r31, r31
    20ca:	5a 95       	dec	r21
    20cc:	e1 f7       	brne	.-8      	; 0x20c6 <initializeRobot+0x80>
    20ce:	ea 51       	subi	r30, 0x1A	; 26
    20d0:	fa 4f       	sbci	r31, 0xFA	; 250
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	90 e0       	ldi	r25, 0x00	; 0
    20d6:	eb cf       	rjmp	.-42     	; 0x20ae <initializeRobot+0x68>
    20d8:	08 95       	ret

000020da <fourNeighborSearch>:
* Output Return:	unsigned char
* Overview:			searches the four-neighboring cells in the 
*					wavefront map
********************************************************************/
unsigned char fourNeighborSearch(unsigned char curCell)
{	
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	28 2f       	mov	r18, r24
	
	// Get the cell current row and column
	unsigned char curRow = (curCell>>2);
    20e0:	38 2f       	mov	r19, r24
    20e2:	36 95       	lsr	r19
    20e4:	36 95       	lsr	r19
	unsigned char curCol = (curCell&0b0011);
    20e6:	68 2f       	mov	r22, r24
    20e8:	63 70       	andi	r22, 0x03	; 3
	
	// If our current cell is 0
	// then we have reached our goal
	if( ROBOT_METRIC_WORLD[curRow][curCol] == 0){
    20ea:	c3 2f       	mov	r28, r19
    20ec:	d0 e0       	ldi	r29, 0x00	; 0
    20ee:	46 2f       	mov	r20, r22
    20f0:	50 e0       	ldi	r21, 0x00	; 0
    20f2:	de 01       	movw	r26, r28
    20f4:	aa 0f       	add	r26, r26
    20f6:	bb 1f       	adc	r27, r27
    20f8:	aa 0f       	add	r26, r26
    20fa:	bb 1f       	adc	r27, r27
    20fc:	fd 01       	movw	r30, r26
    20fe:	e4 0f       	add	r30, r20
    2100:	f5 1f       	adc	r31, r21
    2102:	ee 53       	subi	r30, 0x3E	; 62
    2104:	fc 4f       	sbci	r31, 0xFC	; 252
    2106:	80 81       	ld	r24, Z
    2108:	88 23       	and	r24, r24
    210a:	11 f4       	brne	.+4      	; 0x2110 <fourNeighborSearch+0x36>
    210c:	81 e0       	ldi	r24, 0x01	; 1
    210e:	3f c1       	rjmp	.+638    	; 0x238e <fourNeighborSearch+0x2b4>
	
	// Perform a 4-neighbor search and store the lowest value
	// Robot in four-corners (2-neighbors to worry about)
	
	// Top-left corner
	if(curCell==0b0000){
    2110:	22 23       	and	r18, r18
    2112:	a1 f4       	brne	.+40     	; 0x213c <fourNeighborSearch+0x62>
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
		if(rightVal<botVal){
    2114:	ae 53       	subi	r26, 0x3E	; 62
    2116:	bc 4f       	sbci	r27, 0xFC	; 252
    2118:	a4 0f       	add	r26, r20
    211a:	b5 1f       	adc	r27, r21
    211c:	fe 01       	movw	r30, r28
    211e:	31 96       	adiw	r30, 0x01	; 1
    2120:	ee 0f       	add	r30, r30
    2122:	ff 1f       	adc	r31, r31
    2124:	ee 0f       	add	r30, r30
    2126:	ff 1f       	adc	r31, r31
    2128:	e4 0f       	add	r30, r20
    212a:	f5 1f       	adc	r31, r21
    212c:	ee 53       	subi	r30, 0x3E	; 62
    212e:	fc 4f       	sbci	r31, 0xFC	; 252
    2130:	11 96       	adiw	r26, 0x01	; 1
    2132:	9c 91       	ld	r25, X
    2134:	80 81       	ld	r24, Z
    2136:	98 17       	cp	r25, r24
    2138:	c0 f4       	brcc	.+48     	; 0x216a <fourNeighborSearch+0x90>
    213a:	2e c0       	rjmp	.+92     	; 0x2198 <fourNeighborSearch+0xbe>
			nextOrientation = SOUTH;
		}
	}
	
	// Top-right corner
	if(curCell==0b0011){
    213c:	23 30       	cpi	r18, 0x03	; 3
    213e:	b9 f4       	brne	.+46     	; 0x216e <fourNeighborSearch+0x94>
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
		if(leftVal<botVal){
    2140:	a4 0f       	add	r26, r20
    2142:	b5 1f       	adc	r27, r21
    2144:	af 53       	subi	r26, 0x3F	; 63
    2146:	bc 4f       	sbci	r27, 0xFC	; 252
    2148:	fe 01       	movw	r30, r28
    214a:	31 96       	adiw	r30, 0x01	; 1
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	e4 0f       	add	r30, r20
    2156:	f5 1f       	adc	r31, r21
    2158:	ee 53       	subi	r30, 0x3E	; 62
    215a:	fc 4f       	sbci	r31, 0xFC	; 252
    215c:	9c 91       	ld	r25, X
    215e:	80 81       	ld	r24, Z
    2160:	98 17       	cp	r25, r24
    2162:	18 f4       	brcc	.+6      	; 0x216a <fourNeighborSearch+0x90>
			minVal=leftVal;
			nextOrientation = WEST;
    2164:	20 93 69 05 	sts	0x0569, r18
    2168:	34 c0       	rjmp	.+104    	; 0x21d2 <fourNeighborSearch+0xf8>
		}
		else{
			minVal=botVal;
			nextOrientation = SOUTH;
    216a:	82 e0       	ldi	r24, 0x02	; 2
    216c:	16 c0       	rjmp	.+44     	; 0x219a <fourNeighborSearch+0xc0>
		}
	}
	
	// Bottom-left corner
	if(curCell==0b1100){
    216e:	2c 30       	cpi	r18, 0x0C	; 12
    2170:	d1 f4       	brne	.+52     	; 0x21a6 <fourNeighborSearch+0xcc>
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
		if(rightVal<topVal){
    2172:	ae 53       	subi	r26, 0x3E	; 62
    2174:	bc 4f       	sbci	r27, 0xFC	; 252
    2176:	a4 0f       	add	r26, r20
    2178:	b5 1f       	adc	r27, r21
    217a:	fe 01       	movw	r30, r28
    217c:	31 97       	sbiw	r30, 0x01	; 1
    217e:	ee 0f       	add	r30, r30
    2180:	ff 1f       	adc	r31, r31
    2182:	ee 0f       	add	r30, r30
    2184:	ff 1f       	adc	r31, r31
    2186:	e4 0f       	add	r30, r20
    2188:	f5 1f       	adc	r31, r21
    218a:	ee 53       	subi	r30, 0x3E	; 62
    218c:	fc 4f       	sbci	r31, 0xFC	; 252
    218e:	11 96       	adiw	r26, 0x01	; 1
    2190:	9c 91       	ld	r25, X
    2192:	80 81       	ld	r24, Z
    2194:	98 17       	cp	r25, r24
    2196:	20 f4       	brcc	.+8      	; 0x21a0 <fourNeighborSearch+0xc6>
			minVal=rightVal;
			nextOrientation = EAST;
    2198:	81 e0       	ldi	r24, 0x01	; 1
    219a:	80 93 69 05 	sts	0x0569, r24
    219e:	19 c0       	rjmp	.+50     	; 0x21d2 <fourNeighborSearch+0xf8>
		}
		else{
			minVal=topVal;
			nextOrientation = NORTH;
    21a0:	10 92 69 05 	sts	0x0569, r1
    21a4:	16 c0       	rjmp	.+44     	; 0x21d2 <fourNeighborSearch+0xf8>
		}
	}
	
	// Bottom-right corner
	if(curCell==0b1111){
    21a6:	2f 30       	cpi	r18, 0x0F	; 15
    21a8:	a1 f4       	brne	.+40     	; 0x21d2 <fourNeighborSearch+0xf8>
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
		if(leftVal<topVal){
    21aa:	a4 0f       	add	r26, r20
    21ac:	b5 1f       	adc	r27, r21
    21ae:	af 53       	subi	r26, 0x3F	; 63
    21b0:	bc 4f       	sbci	r27, 0xFC	; 252
    21b2:	21 97       	sbiw	r28, 0x01	; 1
    21b4:	cc 0f       	add	r28, r28
    21b6:	dd 1f       	adc	r29, r29
    21b8:	cc 0f       	add	r28, r28
    21ba:	dd 1f       	adc	r29, r29
    21bc:	c4 0f       	add	r28, r20
    21be:	d5 1f       	adc	r29, r21
    21c0:	ce 53       	subi	r28, 0x3E	; 62
    21c2:	dc 4f       	sbci	r29, 0xFC	; 252
    21c4:	9c 91       	ld	r25, X
    21c6:	88 81       	ld	r24, Y
    21c8:	98 17       	cp	r25, r24
    21ca:	08 f0       	brcs	.+2      	; 0x21ce <fourNeighborSearch+0xf4>
    21cc:	b7 c0       	rjmp	.+366    	; 0x233c <fourNeighborSearch+0x262>
			minVal=leftVal;
			nextOrientation = WEST;
    21ce:	83 e0       	ldi	r24, 0x03	; 3
    21d0:	db c0       	rjmp	.+438    	; 0x2388 <fourNeighborSearch+0x2ae>
			nextOrientation = NORTH;
		}
	}
	
	// Robot on top boundary of world (row = 0)
	else if(curRow == 0){
    21d2:	33 23       	and	r19, r19
    21d4:	e9 f4       	brne	.+58     	; 0x2210 <fourNeighborSearch+0x136>
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
    21d6:	fe 01       	movw	r30, r28
    21d8:	ee 0f       	add	r30, r30
    21da:	ff 1f       	adc	r31, r31
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	ee 53       	subi	r30, 0x3E	; 62
    21e2:	fc 4f       	sbci	r31, 0xFC	; 252
    21e4:	e4 0f       	add	r30, r20
    21e6:	f5 1f       	adc	r31, r21
    21e8:	22 91       	ld	r18, -Z
    21ea:	31 96       	adiw	r30, 0x01	; 1
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
    21ec:	91 81       	ldd	r25, Z+1	; 0x01
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
    21ee:	21 96       	adiw	r28, 0x01	; 1
    21f0:	cc 0f       	add	r28, r28
    21f2:	dd 1f       	adc	r29, r29
    21f4:	cc 0f       	add	r28, r28
    21f6:	dd 1f       	adc	r29, r29
    21f8:	c4 0f       	add	r28, r20
    21fa:	d5 1f       	adc	r29, r21
    21fc:	ce 53       	subi	r28, 0x3E	; 62
    21fe:	dc 4f       	sbci	r29, 0xFC	; 252
    2200:	88 81       	ld	r24, Y
		if((leftVal<rightVal)&&(leftVal<botVal)){
			minVal = leftVal;
			nextOrientation = WEST;
		}
		if((rightVal<leftVal)&&(rightVal<botVal)){
    2202:	92 17       	cp	r25, r18
    2204:	08 f0       	brcs	.+2      	; 0x2208 <fourNeighborSearch+0x12e>
    2206:	bd c0       	rjmp	.+378    	; 0x2382 <fourNeighborSearch+0x2a8>
    2208:	98 17       	cp	r25, r24
    220a:	08 f0       	brcs	.+2      	; 0x220e <fourNeighborSearch+0x134>
    220c:	ba c0       	rjmp	.+372    	; 0x2382 <fourNeighborSearch+0x2a8>
    220e:	bb c0       	rjmp	.+374    	; 0x2386 <fourNeighborSearch+0x2ac>
		}
		
	}
	
	// Robot on left boundary of world (col = 0)
	else if(curCol == 0){
    2210:	66 23       	and	r22, r22
    2212:	31 f5       	brne	.+76     	; 0x2260 <fourNeighborSearch+0x186>
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
    2214:	fe 01       	movw	r30, r28
    2216:	ee 0f       	add	r30, r30
    2218:	ff 1f       	adc	r31, r31
    221a:	ee 0f       	add	r30, r30
    221c:	ff 1f       	adc	r31, r31
    221e:	ee 53       	subi	r30, 0x3E	; 62
    2220:	fc 4f       	sbci	r31, 0xFC	; 252
    2222:	e4 0f       	add	r30, r20
    2224:	f5 1f       	adc	r31, r21
    2226:	91 81       	ldd	r25, Z+1	; 0x01
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
    2228:	21 96       	adiw	r28, 0x01	; 1
    222a:	fe 01       	movw	r30, r28
    222c:	ee 0f       	add	r30, r30
    222e:	ff 1f       	adc	r31, r31
    2230:	ee 0f       	add	r30, r30
    2232:	ff 1f       	adc	r31, r31
    2234:	e4 0f       	add	r30, r20
    2236:	f5 1f       	adc	r31, r21
    2238:	ee 53       	subi	r30, 0x3E	; 62
    223a:	fc 4f       	sbci	r31, 0xFC	; 252
    223c:	e0 81       	ld	r30, Z
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
    223e:	22 97       	sbiw	r28, 0x02	; 2
    2240:	cc 0f       	add	r28, r28
    2242:	dd 1f       	adc	r29, r29
    2244:	cc 0f       	add	r28, r28
    2246:	dd 1f       	adc	r29, r29
    2248:	c4 0f       	add	r28, r20
    224a:	d5 1f       	adc	r29, r21
    224c:	ce 53       	subi	r28, 0x3E	; 62
    224e:	dc 4f       	sbci	r29, 0xFC	; 252
    2250:	88 81       	ld	r24, Y
		if((rightVal<botVal)&&(rightVal<topVal)){
			minVal = rightVal;
			nextOrientation = EAST;
		}
		if((botVal<rightVal)&&(botVal<topVal)){
    2252:	e9 17       	cp	r30, r25
    2254:	08 f0       	brcs	.+2      	; 0x2258 <fourNeighborSearch+0x17e>
    2256:	72 c0       	rjmp	.+228    	; 0x233c <fourNeighborSearch+0x262>
    2258:	e8 17       	cp	r30, r24
    225a:	08 f0       	brcs	.+2      	; 0x225e <fourNeighborSearch+0x184>
    225c:	6f c0       	rjmp	.+222    	; 0x233c <fourNeighborSearch+0x262>
    225e:	91 c0       	rjmp	.+290    	; 0x2382 <fourNeighborSearch+0x2a8>
			nextOrientation = NORTH;
		}
	}
	
	// Robot on bottom boundary of world (row = 3)
	else if(curRow == 3){
    2260:	33 30       	cpi	r19, 0x03	; 3
    2262:	09 f0       	breq	.+2      	; 0x2266 <fourNeighborSearch+0x18c>
    2264:	44 c0       	rjmp	.+136    	; 0x22ee <fourNeighborSearch+0x214>
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
    2266:	41 50       	subi	r20, 0x01	; 1
    2268:	50 40       	sbci	r21, 0x00	; 0
    226a:	de 01       	movw	r26, r28
    226c:	aa 0f       	add	r26, r26
    226e:	bb 1f       	adc	r27, r27
    2270:	aa 0f       	add	r26, r26
    2272:	bb 1f       	adc	r27, r27
    2274:	cd 01       	movw	r24, r26
    2276:	84 0f       	add	r24, r20
    2278:	95 1f       	adc	r25, r21
    227a:	4f 5f       	subi	r20, 0xFF	; 255
    227c:	5f 4f       	sbci	r21, 0xFF	; 255
    227e:	fc 01       	movw	r30, r24
    2280:	ee 53       	subi	r30, 0x3E	; 62
    2282:	fc 4f       	sbci	r31, 0xFC	; 252
    2284:	30 81       	ld	r19, Z
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
    2286:	ba 01       	movw	r22, r20
    2288:	6f 5f       	subi	r22, 0xFF	; 255
    228a:	7f 4f       	sbci	r23, 0xFF	; 255
    228c:	a6 0f       	add	r26, r22
    228e:	b7 1f       	adc	r27, r23
    2290:	ae 53       	subi	r26, 0x3E	; 62
    2292:	bc 4f       	sbci	r27, 0xFC	; 252
    2294:	2c 91       	ld	r18, X
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
    2296:	de 01       	movw	r26, r28
    2298:	11 97       	sbiw	r26, 0x01	; 1
    229a:	fd 01       	movw	r30, r26
    229c:	ee 0f       	add	r30, r30
    229e:	ff 1f       	adc	r31, r31
    22a0:	ee 0f       	add	r30, r30
    22a2:	ff 1f       	adc	r31, r31
    22a4:	e4 0f       	add	r30, r20
    22a6:	f5 1f       	adc	r31, r21
    22a8:	ee 53       	subi	r30, 0x3E	; 62
    22aa:	fc 4f       	sbci	r31, 0xFC	; 252
    22ac:	e0 81       	ld	r30, Z
		if((leftVal<rightVal)&&(leftVal<topVal)){
    22ae:	32 17       	cp	r19, r18
    22b0:	30 f4       	brcc	.+12     	; 0x22be <fourNeighborSearch+0x1e4>
    22b2:	3e 17       	cp	r19, r30
    22b4:	20 f4       	brcc	.+8      	; 0x22be <fourNeighborSearch+0x1e4>
			minVal = leftVal;
			return minInd=WORLD_CELL[curRow][curCol-1];
    22b6:	8a 5b       	subi	r24, 0xBA	; 186
    22b8:	9c 4f       	sbci	r25, 0xFC	; 252
    22ba:	ec 01       	movw	r28, r24
    22bc:	0c c0       	rjmp	.+24     	; 0x22d6 <fourNeighborSearch+0x1fc>
		}
		if((rightVal<leftVal)&&(rightVal<topVal)){
    22be:	23 17       	cp	r18, r19
    22c0:	60 f4       	brcc	.+24     	; 0x22da <fourNeighborSearch+0x200>
    22c2:	2e 17       	cp	r18, r30
    22c4:	50 f4       	brcc	.+20     	; 0x22da <fourNeighborSearch+0x200>
			minVal = rightVal;
			return minInd=WORLD_CELL[curRow][curCol+1];
    22c6:	cc 0f       	add	r28, r28
    22c8:	dd 1f       	adc	r29, r29
    22ca:	cc 0f       	add	r28, r28
    22cc:	dd 1f       	adc	r29, r29
    22ce:	c6 0f       	add	r28, r22
    22d0:	d7 1f       	adc	r29, r23
    22d2:	ca 5b       	subi	r28, 0xBA	; 186
    22d4:	dc 4f       	sbci	r29, 0xFC	; 252
    22d6:	88 81       	ld	r24, Y
    22d8:	5a c0       	rjmp	.+180    	; 0x238e <fourNeighborSearch+0x2b4>
		}
		else{
			minVal = topVal;
			return minInd=WORLD_CELL[curRow-1][curCol]; 
    22da:	aa 0f       	add	r26, r26
    22dc:	bb 1f       	adc	r27, r27
    22de:	aa 0f       	add	r26, r26
    22e0:	bb 1f       	adc	r27, r27
    22e2:	a4 0f       	add	r26, r20
    22e4:	b5 1f       	adc	r27, r21
    22e6:	aa 5b       	subi	r26, 0xBA	; 186
    22e8:	bc 4f       	sbci	r27, 0xFC	; 252
    22ea:	8c 91       	ld	r24, X
    22ec:	50 c0       	rjmp	.+160    	; 0x238e <fourNeighborSearch+0x2b4>
    22ee:	9e 01       	movw	r18, r28
    22f0:	22 0f       	add	r18, r18
    22f2:	33 1f       	adc	r19, r19
    22f4:	22 0f       	add	r18, r18
    22f6:	33 1f       	adc	r19, r19
    22f8:	de 01       	movw	r26, r28
    22fa:	11 96       	adiw	r26, 0x01	; 1
    22fc:	fe 01       	movw	r30, r28
    22fe:	31 97       	sbiw	r30, 0x01	; 1
		}
	}
	
	// Robot on right boundary of world (col = 3)
	else if(curCol == 3){
    2300:	63 30       	cpi	r22, 0x03	; 3
    2302:	f9 f4       	brne	.+62     	; 0x2342 <fourNeighborSearch+0x268>
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
    2304:	24 0f       	add	r18, r20
    2306:	35 1f       	adc	r19, r21
    2308:	2f 53       	subi	r18, 0x3F	; 63
    230a:	3c 4f       	sbci	r19, 0xFC	; 252
    230c:	e9 01       	movw	r28, r18
    230e:	88 81       	ld	r24, Y
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	ee 0f       	add	r30, r30
    2316:	ff 1f       	adc	r31, r31
    2318:	e4 0f       	add	r30, r20
    231a:	f5 1f       	adc	r31, r21
    231c:	ee 53       	subi	r30, 0x3E	; 62
    231e:	fc 4f       	sbci	r31, 0xFC	; 252
    2320:	e0 81       	ld	r30, Z
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
    2322:	aa 0f       	add	r26, r26
    2324:	bb 1f       	adc	r27, r27
    2326:	aa 0f       	add	r26, r26
    2328:	bb 1f       	adc	r27, r27
    232a:	a4 0f       	add	r26, r20
    232c:	b5 1f       	adc	r27, r21
    232e:	ae 53       	subi	r26, 0x3E	; 62
    2330:	bc 4f       	sbci	r27, 0xFC	; 252
    2332:	9c 91       	ld	r25, X
		if((leftVal<topVal)&&(leftVal<botVal)){
			minVal = leftVal;
			nextOrientation = WEST;
		}
		if((topVal<leftVal)&&(topVal<botVal)){
    2334:	e8 17       	cp	r30, r24
    2336:	28 f5       	brcc	.+74     	; 0x2382 <fourNeighborSearch+0x2a8>
    2338:	e9 17       	cp	r30, r25
    233a:	18 f5       	brcc	.+70     	; 0x2382 <fourNeighborSearch+0x2a8>
			minVal = topVal;
			nextOrientation = NORTH;
    233c:	10 92 69 05 	sts	0x0569, r1
    2340:	25 c0       	rjmp	.+74     	; 0x238c <fourNeighborSearch+0x2b2>
		}
	}
	
	// // Else the robot is inside the world with four-neighboring cells
	else{
		topVal = ROBOT_METRIC_WORLD[curRow-1][curCol];
    2342:	ee 0f       	add	r30, r30
    2344:	ff 1f       	adc	r31, r31
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	e4 0f       	add	r30, r20
    234c:	f5 1f       	adc	r31, r21
    234e:	ee 53       	subi	r30, 0x3E	; 62
    2350:	fc 4f       	sbci	r31, 0xFC	; 252
    2352:	60 81       	ld	r22, Z
		leftVal = ROBOT_METRIC_WORLD[curRow][curCol-1];
    2354:	f9 01       	movw	r30, r18
    2356:	ee 53       	subi	r30, 0x3E	; 62
    2358:	fc 4f       	sbci	r31, 0xFC	; 252
    235a:	e4 0f       	add	r30, r20
    235c:	f5 1f       	adc	r31, r21
    235e:	22 91       	ld	r18, -Z
    2360:	31 96       	adiw	r30, 0x01	; 1
		botVal = ROBOT_METRIC_WORLD[curRow+1][curCol];
    2362:	aa 0f       	add	r26, r26
    2364:	bb 1f       	adc	r27, r27
    2366:	aa 0f       	add	r26, r26
    2368:	bb 1f       	adc	r27, r27
    236a:	a4 0f       	add	r26, r20
    236c:	b5 1f       	adc	r27, r21
    236e:	ae 53       	subi	r26, 0x3E	; 62
    2370:	bc 4f       	sbci	r27, 0xFC	; 252
    2372:	9c 91       	ld	r25, X
		rightVal = ROBOT_METRIC_WORLD[curRow][curCol+1];
    2374:	81 81       	ldd	r24, Z+1	; 0x01
		}
		if((leftVal<topVal)&&(leftVal<botVal)&&(leftVal<rightVal)){
			minVal = leftVal;
			nextOrientation = WEST;
		}
		if((botVal<topVal)&&(botVal<leftVal)&&(botVal<rightVal)){
    2376:	96 17       	cp	r25, r22
    2378:	30 f4       	brcc	.+12     	; 0x2386 <fourNeighborSearch+0x2ac>
    237a:	92 17       	cp	r25, r18
    237c:	20 f4       	brcc	.+8      	; 0x2386 <fourNeighborSearch+0x2ac>
    237e:	98 17       	cp	r25, r24
    2380:	10 f4       	brcc	.+4      	; 0x2386 <fourNeighborSearch+0x2ac>
			minVal = botVal;
			nextOrientation = SOUTH;
    2382:	82 e0       	ldi	r24, 0x02	; 2
    2384:	01 c0       	rjmp	.+2      	; 0x2388 <fourNeighborSearch+0x2ae>
		}
		else{
			minVal = rightVal;
			nextOrientation = EAST;
    2386:	81 e0       	ldi	r24, 0x01	; 1
    2388:	80 93 69 05 	sts	0x0569, r24
    238c:	80 e0       	ldi	r24, 0x00	; 0
		}
	}
	
	return FAIL;
}
    238e:	df 91       	pop	r29
    2390:	cf 91       	pop	r28
    2392:	08 95       	ret

00002394 <wavefrontMake>:
* Output Return:	void
* Overview:			Makes the wavefront metric map to goal location
*					from current location 
********************************************************************/
void wavefrontMake(void)
{
    2394:	8f 92       	push	r8
    2396:	9f 92       	push	r9
    2398:	bf 92       	push	r11
    239a:	cf 92       	push	r12
    239c:	df 92       	push	r13
    239e:	ef 92       	push	r14
    23a0:	ff 92       	push	r15
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
	// User-defined goal location
	// unsigned char goalLocation = currentGoalWorld;
	// Extract x and y goal location
	int rowGoal = (currentGoalWorld>>2);
    23aa:	90 91 d9 04 	lds	r25, 0x04D9
    23ae:	89 2f       	mov	r24, r25
    23b0:	86 95       	lsr	r24
    23b2:	86 95       	lsr	r24
    23b4:	c8 2e       	mov	r12, r24
    23b6:	dd 24       	eor	r13, r13
	int colGoal = (currentGoalWorld&0b0011);
    23b8:	e9 2e       	mov	r14, r25
    23ba:	ff 24       	eor	r15, r15
    23bc:	83 e0       	ldi	r24, 0x03	; 3
    23be:	e8 22       	and	r14, r24
    23c0:	ff 24       	eor	r15, r15
    23c2:	c0 e0       	ldi	r28, 0x00	; 0
    23c4:	d0 e0       	ldi	r29, 0x00	; 0
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
				ROBOT_METRIC_WORLD[row][col] = 99;
    23c6:	43 e6       	ldi	r20, 0x63	; 99
    23c8:	b4 2e       	mov	r11, r20
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <wavefrontMake+0xb6>
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
		{
			// for cells with 4 walls, set metric map vaule to 99
			if(ROBOT_WORLD[row][col] == 0b1111){
    23cc:	d8 01       	movw	r26, r16
    23ce:	8c 91       	ld	r24, X
    23d0:	8f 30       	cpi	r24, 0x0F	; 15
    23d2:	11 f4       	brne	.+4      	; 0x23d8 <wavefrontMake+0x44>
				ROBOT_METRIC_WORLD[row][col] = 99;
    23d4:	b0 82       	st	Z, r11
    23d6:	2a c0       	rjmp	.+84     	; 0x242c <wavefrontMake+0x98>
			}
			// for all other cells compute the distance
			else{
				// compute the differences in rows and columns
				rowDelta = abs((WORLD_CELL[row][col]>>2) - rowGoal);
    23d8:	d4 01       	movw	r26, r8
    23da:	9c 91       	ld	r25, X
    23dc:	89 2f       	mov	r24, r25
    23de:	86 95       	lsr	r24
    23e0:	86 95       	lsr	r24
    23e2:	48 2f       	mov	r20, r24
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	4c 19       	sub	r20, r12
    23e8:	5d 09       	sbc	r21, r13
    23ea:	57 ff       	sbrs	r21, 7
    23ec:	03 c0       	rjmp	.+6      	; 0x23f4 <wavefrontMake+0x60>
    23ee:	50 95       	com	r21
    23f0:	41 95       	neg	r20
    23f2:	5f 4f       	sbci	r21, 0xFF	; 255
				colDelta = abs((WORLD_CELL[row][col]&0b0011) - colGoal);
    23f4:	29 2f       	mov	r18, r25
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	23 70       	andi	r18, 0x03	; 3
    23fa:	30 70       	andi	r19, 0x00	; 0
    23fc:	2e 19       	sub	r18, r14
    23fe:	3f 09       	sbc	r19, r15
    2400:	37 ff       	sbrs	r19, 7
    2402:	03 c0       	rjmp	.+6      	; 0x240a <wavefrontMake+0x76>
    2404:	30 95       	com	r19
    2406:	21 95       	neg	r18
    2408:	3f 4f       	sbci	r19, 0xFF	; 255
				// compute the distance without using sqrt
				distance = ((rowDelta*rowDelta)+(colDelta*colDelta));
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
    240a:	22 9f       	mul	r18, r18
    240c:	c0 01       	movw	r24, r0
    240e:	23 9f       	mul	r18, r19
    2410:	90 0d       	add	r25, r0
    2412:	32 9f       	mul	r19, r18
    2414:	90 0d       	add	r25, r0
    2416:	11 24       	eor	r1, r1
    2418:	44 9f       	mul	r20, r20
    241a:	90 01       	movw	r18, r0
    241c:	45 9f       	mul	r20, r21
    241e:	30 0d       	add	r19, r0
    2420:	54 9f       	mul	r21, r20
    2422:	30 0d       	add	r19, r0
    2424:	11 24       	eor	r1, r1
    2426:	82 0f       	add	r24, r18
    2428:	93 1f       	adc	r25, r19
    242a:	80 83       	st	Z, r24
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
	{
		for(col = 0; col < WORLD_COLUMN_SIZE; col++)
    242c:	6f 5f       	subi	r22, 0xFF	; 255
    242e:	7f 4f       	sbci	r23, 0xFF	; 255
    2430:	0f 5f       	subi	r16, 0xFF	; 255
    2432:	1f 4f       	sbci	r17, 0xFF	; 255
    2434:	31 96       	adiw	r30, 0x01	; 1
    2436:	08 94       	sec
    2438:	81 1c       	adc	r8, r1
    243a:	91 1c       	adc	r9, r1
    243c:	64 30       	cpi	r22, 0x04	; 4
    243e:	71 05       	cpc	r23, r1
    2440:	29 f6       	brne	.-118    	; 0x23cc <wavefrontMake+0x38>
	unsigned int rowDelta, colDelta;
	int row, col;
	int distance = 0;
	
	// For every cell in the world
	for(row = 0; row < WORLD_ROW_SIZE; row++)
    2442:	21 96       	adiw	r28, 0x01	; 1
    2444:	c4 30       	cpi	r28, 0x04	; 4
    2446:	d1 05       	cpc	r29, r1
    2448:	a1 f0       	breq	.+40     	; 0x2472 <wavefrontMake+0xde>
    244a:	ce 01       	movw	r24, r28
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	88 0f       	add	r24, r24
    2452:	99 1f       	adc	r25, r25
    2454:	8c 01       	movw	r16, r24
    2456:	0a 5c       	subi	r16, 0xCA	; 202
    2458:	1c 4f       	sbci	r17, 0xFC	; 252
    245a:	fc 01       	movw	r30, r24
    245c:	ee 53       	subi	r30, 0x3E	; 62
    245e:	fc 4f       	sbci	r31, 0xFC	; 252
    2460:	26 e4       	ldi	r18, 0x46	; 70
    2462:	82 2e       	mov	r8, r18
    2464:	23 e0       	ldi	r18, 0x03	; 3
    2466:	92 2e       	mov	r9, r18
    2468:	88 0e       	add	r8, r24
    246a:	99 1e       	adc	r9, r25
    246c:	60 e0       	ldi	r22, 0x00	; 0
    246e:	70 e0       	ldi	r23, 0x00	; 0
    2470:	ad cf       	rjmp	.-166    	; 0x23cc <wavefrontMake+0x38>
				// overwrite the cells in the metric map to the actual distance values
				ROBOT_METRIC_WORLD[row][col] = distance;
			}
		}
	}
}
    2472:	df 91       	pop	r29
    2474:	cf 91       	pop	r28
    2476:	1f 91       	pop	r17
    2478:	0f 91       	pop	r16
    247a:	ff 90       	pop	r15
    247c:	ef 90       	pop	r14
    247e:	df 90       	pop	r13
    2480:	cf 90       	pop	r12
    2482:	bf 90       	pop	r11
    2484:	9f 90       	pop	r9
    2486:	8f 90       	pop	r8
    2488:	08 95       	ret

0000248a <checkWorld>:
* Input Variables:	void
* Output Return:	void
* Overview:		    Checks the cell of the robot using IR sensors
********************************************************************/
void checkWorld( void )
{	
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
	currentGateway = 0;
	
	// Acquire current gateway description
	currentGateway += (ftIR<FT_GATEWAY)<<3;
    2492:	60 91 cb 04 	lds	r22, 0x04CB
    2496:	70 91 cc 04 	lds	r23, 0x04CC
    249a:	80 91 cd 04 	lds	r24, 0x04CD
    249e:	90 91 ce 04 	lds	r25, 0x04CE
    24a2:	20 e0       	ldi	r18, 0x00	; 0
    24a4:	30 e0       	ldi	r19, 0x00	; 0
    24a6:	40 e5       	ldi	r20, 0x50	; 80
    24a8:	51 e4       	ldi	r21, 0x41	; 65
    24aa:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    24ae:	f8 2e       	mov	r15, r24
    24b0:	ff 1c       	adc	r15, r15
    24b2:	ff 24       	eor	r15, r15
    24b4:	ff 1c       	adc	r15, r15
    24b6:	ff 0c       	add	r15, r15
    24b8:	ff 0c       	add	r15, r15
    24ba:	ff 0c       	add	r15, r15
	currentGateway += (ltIR<LT_GATEWAY)<<2;
    24bc:	60 91 6e 06 	lds	r22, 0x066E
    24c0:	70 91 6f 06 	lds	r23, 0x066F
    24c4:	80 91 70 06 	lds	r24, 0x0670
    24c8:	90 91 71 06 	lds	r25, 0x0671
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 ef       	ldi	r20, 0xF0	; 240
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    24d8:	08 2f       	mov	r16, r24
    24da:	00 1f       	adc	r16, r16
    24dc:	00 27       	eor	r16, r16
    24de:	00 1f       	adc	r16, r16
    24e0:	00 0f       	add	r16, r16
    24e2:	00 0f       	add	r16, r16
	currentGateway += (bkIR<BK_GATEWAY)<<1;
    24e4:	60 91 d5 04 	lds	r22, 0x04D5
    24e8:	70 91 d6 04 	lds	r23, 0x04D6
    24ec:	80 91 d7 04 	lds	r24, 0x04D7
    24f0:	90 91 d8 04 	lds	r25, 0x04D8
    24f4:	20 e0       	ldi	r18, 0x00	; 0
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	4c e0       	ldi	r20, 0x0C	; 12
    24fa:	52 e4       	ldi	r21, 0x42	; 66
    24fc:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    2500:	18 2f       	mov	r17, r24
    2502:	11 1f       	adc	r17, r17
    2504:	11 27       	eor	r17, r17
    2506:	11 1f       	adc	r17, r17
    2508:	11 0f       	add	r17, r17
	currentGateway += (rtIR<RT_GATEWAY)<<0;
    250a:	ee 24       	eor	r14, r14
    250c:	60 91 73 06 	lds	r22, 0x0673
    2510:	70 91 74 06 	lds	r23, 0x0674
    2514:	80 91 75 06 	lds	r24, 0x0675
    2518:	90 91 76 06 	lds	r25, 0x0676
    251c:	20 e0       	ldi	r18, 0x00	; 0
    251e:	30 e0       	ldi	r19, 0x00	; 0
    2520:	40 ef       	ldi	r20, 0xF0	; 240
    2522:	51 e4       	ldi	r21, 0x41	; 65
    2524:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    2528:	88 23       	and	r24, r24
    252a:	14 f4       	brge	.+4      	; 0x2530 <checkWorld+0xa6>
    252c:	ee 24       	eor	r14, r14
    252e:	e3 94       	inc	r14
    2530:	8f 2d       	mov	r24, r15
    2532:	8e 0d       	add	r24, r14
    2534:	80 0f       	add	r24, r16
    2536:	81 0f       	add	r24, r17
    2538:	80 93 d3 04 	sts	0x04D3, r24
	nextGateway = moveGateways[currentMoveWorld+1];
    253c:	20 91 d4 04 	lds	r18, 0x04D4
    2540:	e2 2f       	mov	r30, r18
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	e1 51       	subi	r30, 0x11	; 17
    2546:	f9 4f       	sbci	r31, 0xF9	; 249
    2548:	91 81       	ldd	r25, Z+1	; 0x01
    254a:	90 93 da 04 	sts	0x04DA, r25
	
	// Check to see if the robot has entered the next cell of the robot world
	if(currentGateway == nextGateway){
    254e:	89 17       	cp	r24, r25
    2550:	19 f4       	brne	.+6      	; 0x2558 <checkWorld+0xce>
		currentMoveWorld += 1;
    2552:	2f 5f       	subi	r18, 0xFF	; 255
    2554:	20 93 d4 04 	sts	0x04D4, r18
	}
}
    2558:	1f 91       	pop	r17
    255a:	0f 91       	pop	r16
    255c:	ff 90       	pop	r15
    255e:	ef 90       	pop	r14
    2560:	08 95       	ret

00002562 <moveWallOld>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWallOld( void )
{	
    2562:	2f 92       	push	r2
    2564:	3f 92       	push	r3
    2566:	4f 92       	push	r4
    2568:	5f 92       	push	r5
    256a:	6f 92       	push	r6
    256c:	7f 92       	push	r7
    256e:	8f 92       	push	r8
    2570:	9f 92       	push	r9
    2572:	af 92       	push	r10
    2574:	bf 92       	push	r11
    2576:	cf 92       	push	r12
    2578:	df 92       	push	r13
    257a:	ef 92       	push	r14
    257c:	ff 92       	push	r15
    257e:	0f 93       	push	r16
    2580:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    2582:	e0 90 cb 04 	lds	r14, 0x04CB
    2586:	f0 90 cc 04 	lds	r15, 0x04CC
    258a:	00 91 cd 04 	lds	r16, 0x04CD
    258e:	10 91 ce 04 	lds	r17, 0x04CE
    2592:	33 24       	eor	r3, r3
    2594:	c8 01       	movw	r24, r16
    2596:	b7 01       	movw	r22, r14
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    25a4:	88 23       	and	r24, r24
    25a6:	14 f4       	brge	.+4      	; 0x25ac <moveWallOld+0x4a>
    25a8:	33 24       	eor	r3, r3
    25aa:	33 94       	inc	r3
    25ac:	a0 90 73 06 	lds	r10, 0x0673
    25b0:	b0 90 74 06 	lds	r11, 0x0674
    25b4:	c0 90 75 06 	lds	r12, 0x0675
    25b8:	d0 90 76 06 	lds	r13, 0x0676
    25bc:	40 90 6e 06 	lds	r4, 0x066E
    25c0:	50 90 6f 06 	lds	r5, 0x066F
    25c4:	60 90 70 06 	lds	r6, 0x0670
    25c8:	70 90 71 06 	lds	r7, 0x0671
    25cc:	88 24       	eor	r8, r8
    25ce:	60 91 d5 04 	lds	r22, 0x04D5
    25d2:	70 91 d6 04 	lds	r23, 0x04D6
    25d6:	80 91 d7 04 	lds	r24, 0x04D7
    25da:	90 91 d8 04 	lds	r25, 0x04D8
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e7       	ldi	r20, 0x70	; 112
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    25ea:	88 23       	and	r24, r24
    25ec:	14 f4       	brge	.+4      	; 0x25f2 <moveWallOld+0x90>
    25ee:	88 24       	eor	r8, r8
    25f0:	83 94       	inc	r8
    25f2:	93 2c       	mov	r9, r3
    25f4:	98 28       	or	r9, r8
    25f6:	88 24       	eor	r8, r8
    25f8:	c6 01       	movw	r24, r12
    25fa:	b5 01       	movw	r22, r10
    25fc:	20 e0       	ldi	r18, 0x00	; 0
    25fe:	30 e0       	ldi	r19, 0x00	; 0
    2600:	40 e7       	ldi	r20, 0x70	; 112
    2602:	51 e4       	ldi	r21, 0x41	; 65
    2604:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    2608:	88 23       	and	r24, r24
    260a:	14 f4       	brge	.+4      	; 0x2610 <moveWallOld+0xae>
    260c:	88 24       	eor	r8, r8
    260e:	83 94       	inc	r8
    2610:	98 28       	or	r9, r8
    2612:	88 24       	eor	r8, r8
    2614:	c3 01       	movw	r24, r6
    2616:	b2 01       	movw	r22, r4
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e7       	ldi	r20, 0x70	; 112
    261e:	51 e4       	ldi	r21, 0x41	; 65
    2620:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    2624:	88 23       	and	r24, r24
    2626:	14 f4       	brge	.+4      	; 0x262c <moveWallOld+0xca>
    2628:	88 24       	eor	r8, r8
    262a:	83 94       	inc	r8
    262c:	29 2c       	mov	r2, r9
    262e:	28 28       	or	r2, r8
	if(!isWall){	
    2630:	81 f4       	brne	.+32     	; 0x2652 <moveWallOld+0xf0>
		move_arc_stnb(NO_TURN, 10, 10, 10, 0);
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	9f e4       	ldi	r25, 0x4F	; 79
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e2       	ldi	r20, 0x20	; 32
    2640:	51 e4       	ldi	r21, 0x41	; 65
    2642:	79 01       	movw	r14, r18
    2644:	8a 01       	movw	r16, r20
    2646:	59 01       	movw	r10, r18
    2648:	6a 01       	movw	r12, r20
    264a:	88 24       	eor	r8, r8
    264c:	0e 94 15 08 	call	0x102a	; 0x102a <move_arc_stnb>
    2650:	f7 c0       	rjmp	.+494    	; 0x2840 <moveWallOld+0x2de>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2652:	c6 01       	movw	r24, r12
    2654:	b5 01       	movw	r22, r10
    2656:	20 e0       	ldi	r18, 0x00	; 0
    2658:	30 e0       	ldi	r19, 0x00	; 0
    265a:	40 e7       	ldi	r20, 0x70	; 112
    265c:	51 e4       	ldi	r21, 0x41	; 65
    265e:	0e 94 83 30 	call	0x6106	; 0x6106 <__gesf2>
    2662:	18 16       	cp	r1, r24
    2664:	64 f4       	brge	.+24     	; 0x267e <moveWallOld+0x11c>
		rtIR = IR_WALL_R_THRESH-18;
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	a0 e4       	ldi	r26, 0x40	; 64
    266c:	b0 ec       	ldi	r27, 0xC0	; 192
    266e:	80 93 73 06 	sts	0x0673, r24
    2672:	90 93 74 06 	sts	0x0674, r25
    2676:	a0 93 75 06 	sts	0x0675, r26
    267a:	b0 93 76 06 	sts	0x0676, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    267e:	c3 01       	movw	r24, r6
    2680:	b2 01       	movw	r22, r4
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	40 e7       	ldi	r20, 0x70	; 112
    2688:	51 e4       	ldi	r21, 0x41	; 65
    268a:	0e 94 83 30 	call	0x6106	; 0x6106 <__gesf2>
    268e:	18 16       	cp	r1, r24
    2690:	14 f0       	brlt	.+4      	; 0x2696 <moveWallOld+0x134>
    2692:	80 e0       	ldi	r24, 0x00	; 0
    2694:	0d c0       	rjmp	.+26     	; 0x26b0 <moveWallOld+0x14e>
		ltIR = IR_WALL_L_THRESH-18;
    2696:	80 e0       	ldi	r24, 0x00	; 0
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	a0 e4       	ldi	r26, 0x40	; 64
    269c:	b0 ec       	ldi	r27, 0xC0	; 192
    269e:	80 93 6e 06 	sts	0x066E, r24
    26a2:	90 93 6f 06 	sts	0x066F, r25
    26a6:	a0 93 70 06 	sts	0x0670, r26
    26aa:	b0 93 71 06 	sts	0x0671, r27
    26ae:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    26b0:	33 20       	and	r3, r3
    26b2:	21 f1       	breq	.+72     	; 0x26fc <moveWallOld+0x19a>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    26b4:	88 23       	and	r24, r24
    26b6:	29 f0       	breq	.+10     	; 0x26c2 <moveWallOld+0x160>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    26b8:	60 e0       	ldi	r22, 0x00	; 0
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	8a e7       	ldi	r24, 0x7A	; 122
    26be:	94 e4       	ldi	r25, 0x44	; 68
    26c0:	04 c0       	rjmp	.+8      	; 0x26ca <moveWallOld+0x168>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    26c2:	60 e0       	ldi	r22, 0x00	; 0
    26c4:	70 e0       	ldi	r23, 0x00	; 0
    26c6:	8a e7       	ldi	r24, 0x7A	; 122
    26c8:	94 ec       	ldi	r25, 0xC4	; 196
    26ca:	a8 01       	movw	r20, r16
    26cc:	97 01       	movw	r18, r14
    26ce:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    26d2:	20 91 6e 06 	lds	r18, 0x066E
    26d6:	30 91 6f 06 	lds	r19, 0x066F
    26da:	40 91 70 06 	lds	r20, 0x0670
    26de:	50 91 71 06 	lds	r21, 0x0671
    26e2:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    26e6:	9b 01       	movw	r18, r22
    26e8:	ac 01       	movw	r20, r24
    26ea:	60 91 73 06 	lds	r22, 0x0673
    26ee:	70 91 74 06 	lds	r23, 0x0674
    26f2:	80 91 75 06 	lds	r24, 0x0675
    26f6:	90 91 76 06 	lds	r25, 0x0676
    26fa:	10 c0       	rjmp	.+32     	; 0x271c <moveWallOld+0x1ba>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    26fc:	60 91 73 06 	lds	r22, 0x0673
    2700:	70 91 74 06 	lds	r23, 0x0674
    2704:	80 91 75 06 	lds	r24, 0x0675
    2708:	90 91 76 06 	lds	r25, 0x0676
    270c:	20 91 6e 06 	lds	r18, 0x066E
    2710:	30 91 6f 06 	lds	r19, 0x066F
    2714:	40 91 70 06 	lds	r20, 0x0670
    2718:	50 91 71 06 	lds	r21, 0x0671
    271c:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2720:	90 58       	subi	r25, 0x80	; 128
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2728:	6b 01       	movw	r12, r22
    272a:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    272c:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fixsfsi>
    2730:	8b 01       	movw	r16, r22
    2732:	77 ff       	sbrs	r23, 7
    2734:	03 c0       	rjmp	.+6      	; 0x273c <moveWallOld+0x1da>
    2736:	10 95       	com	r17
    2738:	01 95       	neg	r16
    273a:	1f 4f       	sbci	r17, 0xFF	; 255
    273c:	05 36       	cpi	r16, 0x65	; 101
    273e:	11 05       	cpc	r17, r1
    2740:	fc f0       	brlt	.+62     	; 0x2780 <moveWallOld+0x21e>
    2742:	c7 01       	movw	r24, r14
    2744:	b6 01       	movw	r22, r12
    2746:	20 e0       	ldi	r18, 0x00	; 0
    2748:	30 e0       	ldi	r19, 0x00	; 0
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	50 e0       	ldi	r21, 0x00	; 0
    274e:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    2752:	88 23       	and	r24, r24
    2754:	a9 f0       	breq	.+42     	; 0x2780 <moveWallOld+0x21e>
		effort = MAX_EFFORT*(effort/abs(effort));
    2756:	b8 01       	movw	r22, r16
    2758:	88 27       	eor	r24, r24
    275a:	77 fd       	sbrc	r23, 7
    275c:	80 95       	com	r24
    275e:	98 2f       	mov	r25, r24
    2760:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__floatsisf>
    2764:	9b 01       	movw	r18, r22
    2766:	ac 01       	movw	r20, r24
    2768:	c7 01       	movw	r24, r14
    276a:	b6 01       	movw	r22, r12
    276c:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	48 ec       	ldi	r20, 0xC8	; 200
    2776:	52 e4       	ldi	r21, 0x42	; 66
    2778:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    277c:	6b 01       	movw	r12, r22
    277e:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2780:	c7 01       	movw	r24, r14
    2782:	b6 01       	movw	r22, r12
    2784:	20 e0       	ldi	r18, 0x00	; 0
    2786:	30 e0       	ldi	r19, 0x00	; 0
    2788:	48 ec       	ldi	r20, 0xC8	; 200
    278a:	52 e4       	ldi	r21, 0x42	; 66
    278c:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    2790:	6b 01       	movw	r12, r22
    2792:	7c 01       	movw	r14, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    2794:	8d b7       	in	r24, 0x3d	; 61
    2796:	9e b7       	in	r25, 0x3e	; 62
    2798:	09 97       	sbiw	r24, 0x09	; 9
    279a:	0f b6       	in	r0, 0x3f	; 63
    279c:	f8 94       	cli
    279e:	9e bf       	out	0x3e, r25	; 62
    27a0:	0f be       	out	0x3f, r0	; 63
    27a2:	8d bf       	out	0x3d, r24	; 61
    27a4:	0d b7       	in	r16, 0x3d	; 61
    27a6:	1e b7       	in	r17, 0x3e	; 62
    27a8:	0f 5f       	subi	r16, 0xFF	; 255
    27aa:	1f 4f       	sbci	r17, 0xFF	; 255
    27ac:	c7 01       	movw	r24, r14
    27ae:	b6 01       	movw	r22, r12
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	48 ec       	ldi	r20, 0xC8	; 200
    27b6:	52 e4       	ldi	r21, 0x42	; 66
    27b8:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	48 ec       	ldi	r20, 0xC8	; 200
    27c2:	52 e4       	ldi	r21, 0x42	; 66
    27c4:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    27c8:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    27cc:	4b 01       	movw	r8, r22
    27ce:	5c 01       	movw	r10, r24
    27d0:	82 e3       	ldi	r24, 0x32	; 50
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	f8 01       	movw	r30, r16
    27d6:	91 83       	std	Z+1, r25	; 0x01
    27d8:	80 83       	st	Z, r24
    27da:	c7 01       	movw	r24, r14
    27dc:	b6 01       	movw	r22, r12
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	30 e0       	ldi	r19, 0x00	; 0
    27e2:	48 ec       	ldi	r20, 0xC8	; 200
    27e4:	52 ec       	ldi	r21, 0xC2	; 194
    27e6:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    27ea:	20 e0       	ldi	r18, 0x00	; 0
    27ec:	30 e0       	ldi	r19, 0x00	; 0
    27ee:	48 ec       	ldi	r20, 0xC8	; 200
    27f0:	52 e4       	ldi	r21, 0x42	; 66
    27f2:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    27f6:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    27fa:	f8 01       	movw	r30, r16
    27fc:	73 83       	std	Z+3, r23	; 0x03
    27fe:	62 83       	std	Z+2, r22	; 0x02
    2800:	82 ec       	ldi	r24, 0xC2	; 194
    2802:	91 e0       	ldi	r25, 0x01	; 1
    2804:	95 83       	std	Z+5, r25	; 0x05
    2806:	84 83       	std	Z+4, r24	; 0x04
    2808:	16 82       	std	Z+6, r1	; 0x06
    280a:	10 86       	std	Z+8, r1	; 0x08
    280c:	17 82       	std	Z+7, r1	; 0x07
    280e:	81 e0       	ldi	r24, 0x01	; 1
    2810:	62 e0       	ldi	r22, 0x02	; 2
    2812:	41 e0       	ldi	r20, 0x01	; 1
    2814:	22 e3       	ldi	r18, 0x32	; 50
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	84 01       	movw	r16, r8
    281a:	52 ec       	ldi	r21, 0xC2	; 194
    281c:	e5 2e       	mov	r14, r21
    281e:	51 e0       	ldi	r21, 0x01	; 1
    2820:	f5 2e       	mov	r15, r21
    2822:	cc 24       	eor	r12, r12
    2824:	aa 24       	eor	r10, r10
    2826:	bb 24       	eor	r11, r11
    2828:	88 24       	eor	r8, r8
    282a:	83 94       	inc	r8
    282c:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <STEPPER_move>
    2830:	8d b7       	in	r24, 0x3d	; 61
    2832:	9e b7       	in	r25, 0x3e	; 62
    2834:	09 96       	adiw	r24, 0x09	; 9
    2836:	0f b6       	in	r0, 0x3f	; 63
    2838:	f8 94       	cli
    283a:	9e bf       	out	0x3e, r25	; 62
    283c:	0f be       	out	0x3f, r0	; 63
    283e:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    2840:	82 2d       	mov	r24, r2
    2842:	1f 91       	pop	r17
    2844:	0f 91       	pop	r16
    2846:	ff 90       	pop	r15
    2848:	ef 90       	pop	r14
    284a:	df 90       	pop	r13
    284c:	cf 90       	pop	r12
    284e:	bf 90       	pop	r11
    2850:	af 90       	pop	r10
    2852:	9f 90       	pop	r9
    2854:	8f 90       	pop	r8
    2856:	7f 90       	pop	r7
    2858:	6f 90       	pop	r6
    285a:	5f 90       	pop	r5
    285c:	4f 90       	pop	r4
    285e:	3f 90       	pop	r3
    2860:	2f 90       	pop	r2
    2862:	08 95       	ret

00002864 <moveWall>:
* Overview:			This function searches for walls and adjust the 
*					robots differential steering to attempts to
*					follow them
********************************************************************/
char moveWall( void )
{	
    2864:	2f 92       	push	r2
    2866:	3f 92       	push	r3
    2868:	4f 92       	push	r4
    286a:	5f 92       	push	r5
    286c:	6f 92       	push	r6
    286e:	7f 92       	push	r7
    2870:	8f 92       	push	r8
    2872:	9f 92       	push	r9
    2874:	af 92       	push	r10
    2876:	bf 92       	push	r11
    2878:	cf 92       	push	r12
    287a:	df 92       	push	r13
    287c:	ef 92       	push	r14
    287e:	ff 92       	push	r15
    2880:	0f 93       	push	r16
    2882:	1f 93       	push	r17
	// Check for walls
	BOOL isWall = (ftIR < IR_WALL_F_THRESH)|(bkIR < IR_WALL_B_THRESH)|(rtIR < IR_WALL_R_THRESH)|(ltIR < IR_WALL_L_THRESH);
    2884:	e0 90 cb 04 	lds	r14, 0x04CB
    2888:	f0 90 cc 04 	lds	r15, 0x04CC
    288c:	00 91 cd 04 	lds	r16, 0x04CD
    2890:	10 91 ce 04 	lds	r17, 0x04CE
    2894:	33 24       	eor	r3, r3
    2896:	c8 01       	movw	r24, r16
    2898:	b7 01       	movw	r22, r14
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	40 e0       	ldi	r20, 0x00	; 0
    28a0:	50 e0       	ldi	r21, 0x00	; 0
    28a2:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    28a6:	88 23       	and	r24, r24
    28a8:	14 f4       	brge	.+4      	; 0x28ae <moveWall+0x4a>
    28aa:	33 24       	eor	r3, r3
    28ac:	33 94       	inc	r3
    28ae:	a0 90 73 06 	lds	r10, 0x0673
    28b2:	b0 90 74 06 	lds	r11, 0x0674
    28b6:	c0 90 75 06 	lds	r12, 0x0675
    28ba:	d0 90 76 06 	lds	r13, 0x0676
    28be:	40 90 6e 06 	lds	r4, 0x066E
    28c2:	50 90 6f 06 	lds	r5, 0x066F
    28c6:	60 90 70 06 	lds	r6, 0x0670
    28ca:	70 90 71 06 	lds	r7, 0x0671
    28ce:	88 24       	eor	r8, r8
    28d0:	60 91 d5 04 	lds	r22, 0x04D5
    28d4:	70 91 d6 04 	lds	r23, 0x04D6
    28d8:	80 91 d7 04 	lds	r24, 0x04D7
    28dc:	90 91 d8 04 	lds	r25, 0x04D8
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e7       	ldi	r20, 0x70	; 112
    28e6:	51 e4       	ldi	r21, 0x41	; 65
    28e8:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    28ec:	88 23       	and	r24, r24
    28ee:	14 f4       	brge	.+4      	; 0x28f4 <moveWall+0x90>
    28f0:	88 24       	eor	r8, r8
    28f2:	83 94       	inc	r8
    28f4:	93 2c       	mov	r9, r3
    28f6:	98 28       	or	r9, r8
    28f8:	88 24       	eor	r8, r8
    28fa:	c6 01       	movw	r24, r12
    28fc:	b5 01       	movw	r22, r10
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	40 e7       	ldi	r20, 0x70	; 112
    2904:	51 e4       	ldi	r21, 0x41	; 65
    2906:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    290a:	88 23       	and	r24, r24
    290c:	14 f4       	brge	.+4      	; 0x2912 <moveWall+0xae>
    290e:	88 24       	eor	r8, r8
    2910:	83 94       	inc	r8
    2912:	98 28       	or	r9, r8
    2914:	88 24       	eor	r8, r8
    2916:	c3 01       	movw	r24, r6
    2918:	b2 01       	movw	r22, r4
    291a:	20 e0       	ldi	r18, 0x00	; 0
    291c:	30 e0       	ldi	r19, 0x00	; 0
    291e:	40 e7       	ldi	r20, 0x70	; 112
    2920:	51 e4       	ldi	r21, 0x41	; 65
    2922:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    2926:	88 23       	and	r24, r24
    2928:	14 f4       	brge	.+4      	; 0x292e <moveWall+0xca>
    292a:	88 24       	eor	r8, r8
    292c:	83 94       	inc	r8
    292e:	29 2c       	mov	r2, r9
    2930:	28 28       	or	r2, r8
	if(!isWall){
    2932:	09 f0       	breq	.+2      	; 0x2936 <moveWall+0xd2>
    2934:	8a c0       	rjmp	.+276    	; 0x2a4a <moveWall+0x1e6>
	
		// Update odometry
		curr_step = STEPPER_get_nSteps();
    2936:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <STEPPER_get_nSteps>
    293a:	60 93 66 06 	sts	0x0666, r22
    293e:	70 93 67 06 	sts	0x0667, r23
    2942:	80 93 68 06 	sts	0x0668, r24
    2946:	90 93 69 06 	sts	0x0669, r25
		
		if(curr_step.left != 0){
    294a:	cb 01       	movw	r24, r22
    294c:	61 15       	cp	r22, r1
    294e:	71 05       	cpc	r23, r1
    2950:	e1 f0       	breq	.+56     	; 0x298a <moveWall+0x126>
			odometryStepL += WALL_STEP - curr_step.left;
    2952:	64 e1       	ldi	r22, 0x14	; 20
    2954:	70 e0       	ldi	r23, 0x00	; 0
    2956:	68 1b       	sub	r22, r24
    2958:	79 0b       	sbc	r23, r25
    295a:	80 e0       	ldi	r24, 0x00	; 0
    295c:	90 e0       	ldi	r25, 0x00	; 0
    295e:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__floatunsisf>
    2962:	9b 01       	movw	r18, r22
    2964:	ac 01       	movw	r20, r24
    2966:	60 91 ff 06 	lds	r22, 0x06FF
    296a:	70 91 00 07 	lds	r23, 0x0700
    296e:	80 91 01 07 	lds	r24, 0x0701
    2972:	90 91 02 07 	lds	r25, 0x0702
    2976:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    297a:	60 93 ff 06 	sts	0x06FF, r22
    297e:	70 93 00 07 	sts	0x0700, r23
    2982:	80 93 01 07 	sts	0x0701, r24
    2986:	90 93 02 07 	sts	0x0702, r25
		}
		if(curr_step.right != 0){
    298a:	80 91 68 06 	lds	r24, 0x0668
    298e:	90 91 69 06 	lds	r25, 0x0669
    2992:	00 97       	sbiw	r24, 0x00	; 0
    2994:	e1 f0       	breq	.+56     	; 0x29ce <moveWall+0x16a>
			odometryStepR += WALL_STEP - curr_step.right;
    2996:	64 e1       	ldi	r22, 0x14	; 20
    2998:	70 e0       	ldi	r23, 0x00	; 0
    299a:	68 1b       	sub	r22, r24
    299c:	79 0b       	sbc	r23, r25
    299e:	80 e0       	ldi	r24, 0x00	; 0
    29a0:	90 e0       	ldi	r25, 0x00	; 0
    29a2:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__floatunsisf>
    29a6:	9b 01       	movw	r18, r22
    29a8:	ac 01       	movw	r20, r24
    29aa:	60 91 4f 04 	lds	r22, 0x044F
    29ae:	70 91 50 04 	lds	r23, 0x0450
    29b2:	80 91 51 04 	lds	r24, 0x0451
    29b6:	90 91 52 04 	lds	r25, 0x0452
    29ba:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    29be:	60 93 4f 04 	sts	0x044F, r22
    29c2:	70 93 50 04 	sts	0x0450, r23
    29c6:	80 93 51 04 	sts	0x0451, r24
    29ca:	90 93 52 04 	sts	0x0452, r25
		}
		
		STEPPER_set_steps(STEPPER_BOTH,0);
    29ce:	82 e0       	ldi	r24, 0x02	; 2
    29d0:	60 e0       	ldi	r22, 0x00	; 0
    29d2:	70 e0       	ldi	r23, 0x00	; 0
    29d4:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <STEPPER_set_steps>
	
		// Move with wall
		STEPPER_move_stnb( STEPPER_BOTH, 
    29d8:	8d b7       	in	r24, 0x3d	; 61
    29da:	9e b7       	in	r25, 0x3e	; 62
    29dc:	09 97       	sbiw	r24, 0x09	; 9
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	9e bf       	out	0x3e, r25	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	8d bf       	out	0x3d, r24	; 61
    29e8:	ed b7       	in	r30, 0x3d	; 61
    29ea:	fe b7       	in	r31, 0x3e	; 62
    29ec:	31 96       	adiw	r30, 0x01	; 1
    29ee:	84 e1       	ldi	r24, 0x14	; 20
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	ad b7       	in	r26, 0x3d	; 61
    29f4:	be b7       	in	r27, 0x3e	; 62
    29f6:	12 96       	adiw	r26, 0x02	; 2
    29f8:	9c 93       	st	X, r25
    29fa:	8e 93       	st	-X, r24
    29fc:	11 97       	sbiw	r26, 0x01	; 1
    29fe:	88 ec       	ldi	r24, 0xC8	; 200
    2a00:	90 e0       	ldi	r25, 0x00	; 0
    2a02:	93 83       	std	Z+3, r25	; 0x03
    2a04:	82 83       	std	Z+2, r24	; 0x02
    2a06:	82 ec       	ldi	r24, 0xC2	; 194
    2a08:	91 e0       	ldi	r25, 0x01	; 1
    2a0a:	95 83       	std	Z+5, r25	; 0x05
    2a0c:	84 83       	std	Z+4, r24	; 0x04
    2a0e:	16 82       	std	Z+6, r1	; 0x06
    2a10:	10 86       	std	Z+8, r1	; 0x08
    2a12:	17 82       	std	Z+7, r1	; 0x07
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	62 e0       	ldi	r22, 0x02	; 2
    2a18:	41 e0       	ldi	r20, 0x01	; 1
    2a1a:	24 e1       	ldi	r18, 0x14	; 20
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	08 ec       	ldi	r16, 0xC8	; 200
    2a20:	10 e0       	ldi	r17, 0x00	; 0
    2a22:	e2 ec       	ldi	r30, 0xC2	; 194
    2a24:	ee 2e       	mov	r14, r30
    2a26:	e1 e0       	ldi	r30, 0x01	; 1
    2a28:	fe 2e       	mov	r15, r30
    2a2a:	cc 24       	eor	r12, r12
    2a2c:	aa 24       	eor	r10, r10
    2a2e:	bb 24       	eor	r11, r11
    2a30:	88 24       	eor	r8, r8
    2a32:	83 94       	inc	r8
    2a34:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <STEPPER_move>
    2a38:	ed b7       	in	r30, 0x3d	; 61
    2a3a:	fe b7       	in	r31, 0x3e	; 62
    2a3c:	39 96       	adiw	r30, 0x09	; 9
    2a3e:	0f b6       	in	r0, 0x3f	; 63
    2a40:	f8 94       	cli
    2a42:	fe bf       	out	0x3e, r31	; 62
    2a44:	0f be       	out	0x3f, r0	; 63
    2a46:	ed bf       	out	0x3d, r30	; 61
    2a48:	48 c1       	rjmp	.+656    	; 0x2cda <moveWall+0x476>
	// A variable that contains the logic of which wall is imaginary
	BOOL isLEFT;
	
	// If there is no wall on our right side
	// place an imaginary wall just within the threshold
	if(rtIR>IR_WALL_R_THRESH){
    2a4a:	c6 01       	movw	r24, r12
    2a4c:	b5 01       	movw	r22, r10
    2a4e:	20 e0       	ldi	r18, 0x00	; 0
    2a50:	30 e0       	ldi	r19, 0x00	; 0
    2a52:	40 e7       	ldi	r20, 0x70	; 112
    2a54:	51 e4       	ldi	r21, 0x41	; 65
    2a56:	0e 94 83 30 	call	0x6106	; 0x6106 <__gesf2>
    2a5a:	18 16       	cp	r1, r24
    2a5c:	64 f4       	brge	.+24     	; 0x2a76 <moveWall+0x212>
		rtIR = IR_WALL_R_THRESH-18;
    2a5e:	80 e0       	ldi	r24, 0x00	; 0
    2a60:	90 e0       	ldi	r25, 0x00	; 0
    2a62:	a0 e4       	ldi	r26, 0x40	; 64
    2a64:	b0 ec       	ldi	r27, 0xC0	; 192
    2a66:	80 93 73 06 	sts	0x0673, r24
    2a6a:	90 93 74 06 	sts	0x0674, r25
    2a6e:	a0 93 75 06 	sts	0x0675, r26
    2a72:	b0 93 76 06 	sts	0x0676, r27
		isLEFT = 0;
	}
	// If there is no wall on our left side
	// place an imaginary wall just within the threshold
	if(ltIR>IR_WALL_L_THRESH){
    2a76:	c3 01       	movw	r24, r6
    2a78:	b2 01       	movw	r22, r4
    2a7a:	20 e0       	ldi	r18, 0x00	; 0
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	40 e7       	ldi	r20, 0x70	; 112
    2a80:	51 e4       	ldi	r21, 0x41	; 65
    2a82:	0e 94 83 30 	call	0x6106	; 0x6106 <__gesf2>
    2a86:	18 16       	cp	r1, r24
    2a88:	14 f0       	brlt	.+4      	; 0x2a8e <moveWall+0x22a>
    2a8a:	80 e0       	ldi	r24, 0x00	; 0
    2a8c:	0d c0       	rjmp	.+26     	; 0x2aa8 <moveWall+0x244>
		ltIR = IR_WALL_L_THRESH-18;
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	a0 e4       	ldi	r26, 0x40	; 64
    2a94:	b0 ec       	ldi	r27, 0xC0	; 192
    2a96:	80 93 6e 06 	sts	0x066E, r24
    2a9a:	90 93 6f 06 	sts	0x066F, r25
    2a9e:	a0 93 70 06 	sts	0x0670, r26
    2aa2:	b0 93 71 06 	sts	0x0671, r27
    2aa6:	81 e0       	ldi	r24, 0x01	; 1
	}
	
	float error;
	
	// Check to see if the wall exists in front of the robot
	if(ftIR < IR_WALL_F_THRESH)
    2aa8:	33 20       	and	r3, r3
    2aaa:	21 f1       	breq	.+72     	; 0x2af4 <moveWall+0x290>
	{
		// if the imaginary wall was on the left side
		// then biased the error so that when the robot encounters
		// an upcoming corner, the robot will turn away from both walls
		if (isLEFT)
    2aac:	88 23       	and	r24, r24
    2aae:	29 f0       	breq	.+10     	; 0x2aba <moveWall+0x256>
		{
			error = rtIR - (ltIR + (1000/ftIR));
    2ab0:	60 e0       	ldi	r22, 0x00	; 0
    2ab2:	70 e0       	ldi	r23, 0x00	; 0
    2ab4:	8a e7       	ldi	r24, 0x7A	; 122
    2ab6:	94 e4       	ldi	r25, 0x44	; 68
    2ab8:	04 c0       	rjmp	.+8      	; 0x2ac2 <moveWall+0x25e>
		}
		// biased the error appropriately for the inverse situation
		else 
		{
			error = rtIR - (ltIR - (1000/ftIR));
    2aba:	60 e0       	ldi	r22, 0x00	; 0
    2abc:	70 e0       	ldi	r23, 0x00	; 0
    2abe:	8a e7       	ldi	r24, 0x7A	; 122
    2ac0:	94 ec       	ldi	r25, 0xC4	; 196
    2ac2:	a8 01       	movw	r20, r16
    2ac4:	97 01       	movw	r18, r14
    2ac6:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    2aca:	20 91 6e 06 	lds	r18, 0x066E
    2ace:	30 91 6f 06 	lds	r19, 0x066F
    2ad2:	40 91 70 06 	lds	r20, 0x0670
    2ad6:	50 91 71 06 	lds	r21, 0x0671
    2ada:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    2ade:	9b 01       	movw	r18, r22
    2ae0:	ac 01       	movw	r20, r24
    2ae2:	60 91 73 06 	lds	r22, 0x0673
    2ae6:	70 91 74 06 	lds	r23, 0x0674
    2aea:	80 91 75 06 	lds	r24, 0x0675
    2aee:	90 91 76 06 	lds	r25, 0x0676
    2af2:	10 c0       	rjmp	.+32     	; 0x2b14 <moveWall+0x2b0>
	// the air is simply the right distance minus the left left distance
	// this ensures symmetry that the robot will follow in between the two walls
	// either one real and one imaginary, or both real
	else 
	{
		error = rtIR - ltIR;
    2af4:	60 91 73 06 	lds	r22, 0x0673
    2af8:	70 91 74 06 	lds	r23, 0x0674
    2afc:	80 91 75 06 	lds	r24, 0x0675
    2b00:	90 91 76 06 	lds	r25, 0x0676
    2b04:	20 91 6e 06 	lds	r18, 0x066E
    2b08:	30 91 6f 06 	lds	r19, 0x066F
    2b0c:	40 91 70 06 	lds	r20, 0x0670
    2b10:	50 91 71 06 	lds	r21, 0x0671
    2b14:	0e 94 cf 2e 	call	0x5d9e	; 0x5d9e <__subsf3>
	}

	// Use the PID controller function to calculate error
	float effort = pidController(-error, 0);
    2b18:	90 58       	subi	r25, 0x80	; 128
    2b1a:	40 e0       	ldi	r20, 0x00	; 0
    2b1c:	0e 94 a1 07 	call	0xf42	; 0xf42 <pidController>
    2b20:	6b 01       	movw	r12, r22
    2b22:	7c 01       	movw	r14, r24
	
	// Limit the control effort to the max allowable effort
	if((abs(effort) > MAX_EFFORT)&(effort!=0)){
    2b24:	0e 94 a0 2f 	call	0x5f40	; 0x5f40 <__fixsfsi>
    2b28:	8b 01       	movw	r16, r22
    2b2a:	77 ff       	sbrs	r23, 7
    2b2c:	03 c0       	rjmp	.+6      	; 0x2b34 <moveWall+0x2d0>
    2b2e:	10 95       	com	r17
    2b30:	01 95       	neg	r16
    2b32:	1f 4f       	sbci	r17, 0xFF	; 255
    2b34:	05 36       	cpi	r16, 0x65	; 101
    2b36:	11 05       	cpc	r17, r1
    2b38:	fc f0       	brlt	.+62     	; 0x2b78 <moveWall+0x314>
    2b3a:	c7 01       	movw	r24, r14
    2b3c:	b6 01       	movw	r22, r12
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e0       	ldi	r20, 0x00	; 0
    2b44:	50 e0       	ldi	r21, 0x00	; 0
    2b46:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <__cmpsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	a9 f0       	breq	.+42     	; 0x2b78 <moveWall+0x314>
		effort = MAX_EFFORT*(effort/abs(effort));
    2b4e:	b8 01       	movw	r22, r16
    2b50:	88 27       	eor	r24, r24
    2b52:	77 fd       	sbrc	r23, 7
    2b54:	80 95       	com	r24
    2b56:	98 2f       	mov	r25, r24
    2b58:	0e 94 d3 2f 	call	0x5fa6	; 0x5fa6 <__floatsisf>
    2b5c:	9b 01       	movw	r18, r22
    2b5e:	ac 01       	movw	r20, r24
    2b60:	c7 01       	movw	r24, r14
    2b62:	b6 01       	movw	r22, r12
    2b64:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    2b68:	20 e0       	ldi	r18, 0x00	; 0
    2b6a:	30 e0       	ldi	r19, 0x00	; 0
    2b6c:	48 ec       	ldi	r20, 0xC8	; 200
    2b6e:	52 e4       	ldi	r21, 0x42	; 66
    2b70:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    2b74:	6b 01       	movw	r12, r22
    2b76:	7c 01       	movw	r14, r24
	}
	
	// Calculate the stepper speeds for each wheel using a ratio
	float stepper_speed_L = MAX_SPEED/2 + (MAX_SPEED/2)*(effort/MAX_EFFORT);
    2b78:	c7 01       	movw	r24, r14
    2b7a:	b6 01       	movw	r22, r12
    2b7c:	20 e0       	ldi	r18, 0x00	; 0
    2b7e:	30 e0       	ldi	r19, 0x00	; 0
    2b80:	48 ec       	ldi	r20, 0xC8	; 200
    2b82:	52 e4       	ldi	r21, 0x42	; 66
    2b84:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    2b88:	4b 01       	movw	r8, r22
    2b8a:	5c 01       	movw	r10, r24
	float stepper_speed_R = MAX_SPEED/2 - (MAX_SPEED/2)*(effort/MAX_EFFORT);
	
	// Update odometry
	curr_step = STEPPER_get_nSteps();
    2b8c:	0e 94 31 1e 	call	0x3c62	; 0x3c62 <STEPPER_get_nSteps>
    2b90:	60 93 66 06 	sts	0x0666, r22
    2b94:	70 93 67 06 	sts	0x0667, r23
    2b98:	80 93 68 06 	sts	0x0668, r24
    2b9c:	90 93 69 06 	sts	0x0669, r25
	
	if(curr_step.left != 0){
    2ba0:	cb 01       	movw	r24, r22
    2ba2:	61 15       	cp	r22, r1
    2ba4:	71 05       	cpc	r23, r1
    2ba6:	e1 f0       	breq	.+56     	; 0x2be0 <moveWall+0x37c>
		odometryStepL += WALL_STEP - (curr_step.left);
    2ba8:	64 e1       	ldi	r22, 0x14	; 20
    2baa:	70 e0       	ldi	r23, 0x00	; 0
    2bac:	68 1b       	sub	r22, r24
    2bae:	79 0b       	sbc	r23, r25
    2bb0:	80 e0       	ldi	r24, 0x00	; 0
    2bb2:	90 e0       	ldi	r25, 0x00	; 0
    2bb4:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__floatunsisf>
    2bb8:	9b 01       	movw	r18, r22
    2bba:	ac 01       	movw	r20, r24
    2bbc:	60 91 ff 06 	lds	r22, 0x06FF
    2bc0:	70 91 00 07 	lds	r23, 0x0700
    2bc4:	80 91 01 07 	lds	r24, 0x0701
    2bc8:	90 91 02 07 	lds	r25, 0x0702
    2bcc:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    2bd0:	60 93 ff 06 	sts	0x06FF, r22
    2bd4:	70 93 00 07 	sts	0x0700, r23
    2bd8:	80 93 01 07 	sts	0x0701, r24
    2bdc:	90 93 02 07 	sts	0x0702, r25
	}
	if(curr_step.right != 0){
    2be0:	80 91 68 06 	lds	r24, 0x0668
    2be4:	90 91 69 06 	lds	r25, 0x0669
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	e1 f0       	breq	.+56     	; 0x2c24 <moveWall+0x3c0>
		odometryStepR += WALL_STEP - (curr_step.right);
    2bec:	64 e1       	ldi	r22, 0x14	; 20
    2bee:	70 e0       	ldi	r23, 0x00	; 0
    2bf0:	68 1b       	sub	r22, r24
    2bf2:	79 0b       	sbc	r23, r25
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__floatunsisf>
    2bfc:	9b 01       	movw	r18, r22
    2bfe:	ac 01       	movw	r20, r24
    2c00:	60 91 4f 04 	lds	r22, 0x044F
    2c04:	70 91 50 04 	lds	r23, 0x0450
    2c08:	80 91 51 04 	lds	r24, 0x0451
    2c0c:	90 91 52 04 	lds	r25, 0x0452
    2c10:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    2c14:	60 93 4f 04 	sts	0x044F, r22
    2c18:	70 93 50 04 	sts	0x0450, r23
    2c1c:	80 93 51 04 	sts	0x0451, r24
    2c20:	90 93 52 04 	sts	0x0452, r25
	}
	
	STEPPER_set_steps(STEPPER_BOTH,0);
    2c24:	82 e0       	ldi	r24, 0x02	; 2
    2c26:	60 e0       	ldi	r22, 0x00	; 0
    2c28:	70 e0       	ldi	r23, 0x00	; 0
    2c2a:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <STEPPER_set_steps>
	
	// Move with wall
	STEPPER_move_stnb( STEPPER_BOTH, 
    2c2e:	8d b7       	in	r24, 0x3d	; 61
    2c30:	9e b7       	in	r25, 0x3e	; 62
    2c32:	09 97       	sbiw	r24, 0x09	; 9
    2c34:	0f b6       	in	r0, 0x3f	; 63
    2c36:	f8 94       	cli
    2c38:	9e bf       	out	0x3e, r25	; 62
    2c3a:	0f be       	out	0x3f, r0	; 63
    2c3c:	8d bf       	out	0x3d, r24	; 61
    2c3e:	0d b7       	in	r16, 0x3d	; 61
    2c40:	1e b7       	in	r17, 0x3e	; 62
    2c42:	0f 5f       	subi	r16, 0xFF	; 255
    2c44:	1f 4f       	sbci	r17, 0xFF	; 255
    2c46:	c5 01       	movw	r24, r10
    2c48:	b4 01       	movw	r22, r8
    2c4a:	20 e0       	ldi	r18, 0x00	; 0
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	48 ec       	ldi	r20, 0xC8	; 200
    2c50:	52 e4       	ldi	r21, 0x42	; 66
    2c52:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    2c56:	20 e0       	ldi	r18, 0x00	; 0
    2c58:	30 e0       	ldi	r19, 0x00	; 0
    2c5a:	48 ec       	ldi	r20, 0xC8	; 200
    2c5c:	52 e4       	ldi	r21, 0x42	; 66
    2c5e:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    2c62:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    2c66:	6b 01       	movw	r12, r22
    2c68:	7c 01       	movw	r14, r24
    2c6a:	84 e1       	ldi	r24, 0x14	; 20
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	d8 01       	movw	r26, r16
    2c70:	8d 93       	st	X+, r24
    2c72:	9c 93       	st	X, r25
    2c74:	c5 01       	movw	r24, r10
    2c76:	b4 01       	movw	r22, r8
    2c78:	20 e0       	ldi	r18, 0x00	; 0
    2c7a:	30 e0       	ldi	r19, 0x00	; 0
    2c7c:	48 ec       	ldi	r20, 0xC8	; 200
    2c7e:	52 ec       	ldi	r21, 0xC2	; 194
    2c80:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    2c84:	20 e0       	ldi	r18, 0x00	; 0
    2c86:	30 e0       	ldi	r19, 0x00	; 0
    2c88:	48 ec       	ldi	r20, 0xC8	; 200
    2c8a:	52 e4       	ldi	r21, 0x42	; 66
    2c8c:	0e 94 d0 2e 	call	0x5da0	; 0x5da0 <__addsf3>
    2c90:	0e 94 a5 2f 	call	0x5f4a	; 0x5f4a <__fixunssfsi>
    2c94:	f8 01       	movw	r30, r16
    2c96:	73 83       	std	Z+3, r23	; 0x03
    2c98:	62 83       	std	Z+2, r22	; 0x02
    2c9a:	82 ec       	ldi	r24, 0xC2	; 194
    2c9c:	91 e0       	ldi	r25, 0x01	; 1
    2c9e:	95 83       	std	Z+5, r25	; 0x05
    2ca0:	84 83       	std	Z+4, r24	; 0x04
    2ca2:	16 82       	std	Z+6, r1	; 0x06
    2ca4:	10 86       	std	Z+8, r1	; 0x08
    2ca6:	17 82       	std	Z+7, r1	; 0x07
    2ca8:	81 e0       	ldi	r24, 0x01	; 1
    2caa:	62 e0       	ldi	r22, 0x02	; 2
    2cac:	41 e0       	ldi	r20, 0x01	; 1
    2cae:	24 e1       	ldi	r18, 0x14	; 20
    2cb0:	30 e0       	ldi	r19, 0x00	; 0
    2cb2:	86 01       	movw	r16, r12
    2cb4:	72 ec       	ldi	r23, 0xC2	; 194
    2cb6:	e7 2e       	mov	r14, r23
    2cb8:	71 e0       	ldi	r23, 0x01	; 1
    2cba:	f7 2e       	mov	r15, r23
    2cbc:	cc 24       	eor	r12, r12
    2cbe:	aa 24       	eor	r10, r10
    2cc0:	bb 24       	eor	r11, r11
    2cc2:	88 24       	eor	r8, r8
    2cc4:	83 94       	inc	r8
    2cc6:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <STEPPER_move>
    2cca:	8d b7       	in	r24, 0x3d	; 61
    2ccc:	9e b7       	in	r25, 0x3e	; 62
    2cce:	09 96       	adiw	r24, 0x09	; 9
    2cd0:	0f b6       	in	r0, 0x3f	; 63
    2cd2:	f8 94       	cli
    2cd4:	9e bf       	out	0x3e, r25	; 62
    2cd6:	0f be       	out	0x3f, r0	; 63
    2cd8:	8d bf       	out	0x3d, r24	; 61
	// debug LCP print statement
	// LCD_clear();
	// LCD_printf("bkIR: %3.2f\nmoveWall\nError: %3f\nEffort: %3f\n", bkIR, error, effort);
	return isWall;
	
}
    2cda:	82 2d       	mov	r24, r2
    2cdc:	1f 91       	pop	r17
    2cde:	0f 91       	pop	r16
    2ce0:	ff 90       	pop	r15
    2ce2:	ef 90       	pop	r14
    2ce4:	df 90       	pop	r13
    2ce6:	cf 90       	pop	r12
    2ce8:	bf 90       	pop	r11
    2cea:	af 90       	pop	r10
    2cec:	9f 90       	pop	r9
    2cee:	8f 90       	pop	r8
    2cf0:	7f 90       	pop	r7
    2cf2:	6f 90       	pop	r6
    2cf4:	5f 90       	pop	r5
    2cf6:	4f 90       	pop	r4
    2cf8:	3f 90       	pop	r3
    2cfa:	2f 90       	pop	r2
    2cfc:	08 95       	ret

00002cfe <shiftMap>:
* Input Variables:	unsigned char, unsigned char, unsigned char
* Output Return:	unsigned char
* Overview:		    shifts the map after robot moves
********************************************************************/
unsigned char shiftMap( unsigned char currentCell, unsigned char curMove, unsigned char curOrient)
{		
    2cfe:	ff 92       	push	r15
    2d00:	0f 93       	push	r16
    2d02:	1f 93       	push	r17
    2d04:	14 2f       	mov	r17, r20
	// Get the currrent location of the robot
	unsigned char curRow = currentCell >> 2;
    2d06:	08 2f       	mov	r16, r24
    2d08:	06 95       	lsr	r16
    2d0a:	06 95       	lsr	r16
	unsigned char curCol = currentCell & 0b0011;
    2d0c:	f3 e0       	ldi	r31, 0x03	; 3
    2d0e:	ff 2e       	mov	r15, r31
    2d10:	f8 22       	and	r15, r24
		
	// // Git the currrent orientation of the robot
	// unsigned char curOrient = currentOrientation;
			
		
	switch(curMove){
    2d12:	62 30       	cpi	r22, 0x02	; 2
    2d14:	31 f0       	breq	.+12     	; 0x2d22 <shiftMap+0x24>
    2d16:	63 30       	cpi	r22, 0x03	; 3
    2d18:	a9 f0       	breq	.+42     	; 0x2d44 <shiftMap+0x46>
    2d1a:	61 30       	cpi	r22, 0x01	; 1
    2d1c:	b1 f4       	brne	.+44     	; 0x2d4a <shiftMap+0x4c>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			curOrient--;
    2d1e:	11 50       	subi	r17, 0x01	; 1
    2d20:	12 c0       	rjmp	.+36     	; 0x2d46 <shiftMap+0x48>
			break;
		case MOVE_FORWARD:
			//If we move forward
			// then shift to the next cell
			// with repect to our curent oriention
			switch(curOrient){
    2d22:	41 30       	cpi	r20, 0x01	; 1
    2d24:	49 f0       	breq	.+18     	; 0x2d38 <shiftMap+0x3a>
    2d26:	41 30       	cpi	r20, 0x01	; 1
    2d28:	28 f0       	brcs	.+10     	; 0x2d34 <shiftMap+0x36>
    2d2a:	42 30       	cpi	r20, 0x02	; 2
    2d2c:	39 f0       	breq	.+14     	; 0x2d3c <shiftMap+0x3e>
    2d2e:	43 30       	cpi	r20, 0x03	; 3
    2d30:	b9 f4       	brne	.+46     	; 0x2d60 <shiftMap+0x62>
    2d32:	06 c0       	rjmp	.+12     	; 0x2d40 <shiftMap+0x42>
				case NORTH:
					curRow -= 1;
    2d34:	01 50       	subi	r16, 0x01	; 1
    2d36:	14 c0       	rjmp	.+40     	; 0x2d60 <shiftMap+0x62>
					break;
				case EAST:
					curCol += 1;
    2d38:	f3 94       	inc	r15
    2d3a:	12 c0       	rjmp	.+36     	; 0x2d60 <shiftMap+0x62>
					break;
				case SOUTH:
					curRow += 1;					
    2d3c:	0f 5f       	subi	r16, 0xFF	; 255
    2d3e:	10 c0       	rjmp	.+32     	; 0x2d60 <shiftMap+0x62>
					break;
				case WEST:
					curCol -= 1;					
    2d40:	fa 94       	dec	r15
    2d42:	0e c0       	rjmp	.+28     	; 0x2d60 <shiftMap+0x62>
			}
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			curOrient++;
    2d44:	1f 5f       	subi	r17, 0xFF	; 255
			curOrient = curOrient&0b11;
    2d46:	13 70       	andi	r17, 0x03	; 3
    2d48:	0b c0       	rjmp	.+22     	; 0x2d60 <shiftMap+0x62>
			break;
		default:
			LCD_printf("Whatz3?!");
    2d4a:	00 d0       	rcall	.+0      	; 0x2d4c <shiftMap+0x4e>
    2d4c:	84 e4       	ldi	r24, 0x44	; 68
    2d4e:	91 e0       	ldi	r25, 0x01	; 1
    2d50:	ed b7       	in	r30, 0x3d	; 61
    2d52:	fe b7       	in	r31, 0x3e	; 62
    2d54:	92 83       	std	Z+2, r25	; 0x02
    2d56:	81 83       	std	Z+1, r24	; 0x01
    2d58:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
    2d5c:	0f 90       	pop	r0
    2d5e:	0f 90       	pop	r0
	}
	
	// Set the new cell of the robot
	currentCell = (curRow << 2) + curCol;
	// Set the new orientation of the robot
	currentOrientation = curOrient;
    2d60:	10 93 68 05 	sts	0x0568, r17
    2d64:	00 0f       	add	r16, r16
    2d66:	00 0f       	add	r16, r16
	return currentCell;
}
    2d68:	80 2f       	mov	r24, r16
    2d6a:	8f 0d       	add	r24, r15
    2d6c:	1f 91       	pop	r17
    2d6e:	0f 91       	pop	r16
    2d70:	ff 90       	pop	r15
    2d72:	08 95       	ret

00002d74 <moveMap>:
* Input Variables:	void
* Output Return:	void
* Overview:		    moves the robot through the map
********************************************************************/
void moveMap( void )
{	
    2d74:	8f 92       	push	r8
    2d76:	af 92       	push	r10
    2d78:	bf 92       	push	r11
    2d7a:	cf 92       	push	r12
    2d7c:	df 92       	push	r13
    2d7e:	ef 92       	push	r14
    2d80:	ff 92       	push	r15
    2d82:	0f 93       	push	r16
    2d84:	1f 93       	push	r17
	switch(currentMove){
    2d86:	80 91 03 07 	lds	r24, 0x0703
    2d8a:	82 30       	cpi	r24, 0x02	; 2
    2d8c:	69 f0       	breq	.+26     	; 0x2da8 <moveMap+0x34>
    2d8e:	83 30       	cpi	r24, 0x03	; 3
    2d90:	a1 f0       	breq	.+40     	; 0x2dba <moveMap+0x46>
    2d92:	81 30       	cpi	r24, 0x01	; 1
    2d94:	51 f5       	brne	.+84     	; 0x2dea <moveMap+0x76>
		case MOVE_LEFT:
				move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    2d96:	60 e0       	ldi	r22, 0x00	; 0
    2d98:	70 e0       	ldi	r23, 0x00	; 0
    2d9a:	80 e0       	ldi	r24, 0x00	; 0
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	20 e0       	ldi	r18, 0x00	; 0
    2da0:	30 e0       	ldi	r19, 0x00	; 0
    2da2:	4c e8       	ldi	r20, 0x8C	; 140
    2da4:	51 ec       	ldi	r21, 0xC1	; 193
    2da6:	11 c0       	rjmp	.+34     	; 0x2dca <moveMap+0x56>
			// while(!odometryFlag){
				// moveWall();
				// checkOdometry(0);
			// }
			
			move_arc_stwt(NO_TURN, 45, 10, 10, 0);
    2da8:	60 e0       	ldi	r22, 0x00	; 0
    2daa:	70 e0       	ldi	r23, 0x00	; 0
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	9f e4       	ldi	r25, 0x4F	; 79
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	44 e3       	ldi	r20, 0x34	; 52
    2db6:	52 e4       	ldi	r21, 0x42	; 66
    2db8:	08 c0       	rjmp	.+16     	; 0x2dca <moveMap+0x56>
			break;
		case MOVE_RIGHT:
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    2dba:	60 e0       	ldi	r22, 0x00	; 0
    2dbc:	70 e0       	ldi	r23, 0x00	; 0
    2dbe:	80 e0       	ldi	r24, 0x00	; 0
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	20 e0       	ldi	r18, 0x00	; 0
    2dc4:	30 e0       	ldi	r19, 0x00	; 0
    2dc6:	4c e8       	ldi	r20, 0x8C	; 140
    2dc8:	51 e4       	ldi	r21, 0x41	; 65
    2dca:	0f 2e       	mov	r0, r31
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	ef 2e       	mov	r14, r31
    2dd0:	f0 e0       	ldi	r31, 0x00	; 0
    2dd2:	ff 2e       	mov	r15, r31
    2dd4:	f0 e2       	ldi	r31, 0x20	; 32
    2dd6:	0f 2f       	mov	r16, r31
    2dd8:	f1 e4       	ldi	r31, 0x41	; 65
    2dda:	1f 2f       	mov	r17, r31
    2ddc:	f0 2d       	mov	r31, r0
    2dde:	57 01       	movw	r10, r14
    2de0:	68 01       	movw	r12, r16
    2de2:	88 24       	eor	r8, r8
    2de4:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    2de8:	0b c0       	rjmp	.+22     	; 0x2e00 <moveMap+0x8c>
			break;
		default:
			LCD_printf("Whatz2?!");
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <moveMap+0x78>
    2dec:	8d e4       	ldi	r24, 0x4D	; 77
    2dee:	91 e0       	ldi	r25, 0x01	; 1
    2df0:	ed b7       	in	r30, 0x3d	; 61
    2df2:	fe b7       	in	r31, 0x3e	; 62
    2df4:	92 83       	std	Z+2, r25	; 0x02
    2df6:	81 83       	std	Z+1, r24	; 0x01
    2df8:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
    2dfc:	0f 90       	pop	r0
    2dfe:	0f 90       	pop	r0
			break;
	}
}
    2e00:	1f 91       	pop	r17
    2e02:	0f 91       	pop	r16
    2e04:	ff 90       	pop	r15
    2e06:	ef 90       	pop	r14
    2e08:	df 90       	pop	r13
    2e0a:	cf 90       	pop	r12
    2e0c:	bf 90       	pop	r11
    2e0e:	af 90       	pop	r10
    2e10:	8f 90       	pop	r8
    2e12:	08 95       	ret

00002e14 <planMap>:
* Overview:		    maps the world as it moves through it
********************************************************************/
void planMap( void )
{	
	//Plan
	if(!(currentGateway&0b0001)){	
    2e14:	80 91 d3 04 	lds	r24, 0x04D3
    2e18:	80 fd       	sbrc	r24, 0
    2e1a:	02 c0       	rjmp	.+4      	; 0x2e20 <planMap+0xc>
		// If we can make a left turn,
		// then spin left
		currentMove = MOVE_LEFT;
    2e1c:	81 e0       	ldi	r24, 0x01	; 1
    2e1e:	05 c0       	rjmp	.+10     	; 0x2e2a <planMap+0x16>
	}
	else if(!(currentGateway&0b1000)){
    2e20:	83 fd       	sbrc	r24, 3
    2e22:	02 c0       	rjmp	.+4      	; 0x2e28 <planMap+0x14>
		// If we can't make a left turn,
		// but we can go forward,
		// go forward
		currentMove = MOVE_FORWARD;
    2e24:	82 e0       	ldi	r24, 0x02	; 2
    2e26:	01 c0       	rjmp	.+2      	; 0x2e2a <planMap+0x16>
	}
	else {
		// If we can't turn left or go forward
		// then spin right
		currentMove = MOVE_RIGHT;
    2e28:	83 e0       	ldi	r24, 0x03	; 3
    2e2a:	80 93 03 07 	sts	0x0703, r24
	}
	
	switch(oldMove){
    2e2e:	80 91 04 07 	lds	r24, 0x0704
    2e32:	81 30       	cpi	r24, 0x01	; 1
    2e34:	29 f0       	breq	.+10     	; 0x2e40 <planMap+0x2c>
    2e36:	81 30       	cpi	r24, 0x01	; 1
    2e38:	38 f0       	brcs	.+14     	; 0x2e48 <planMap+0x34>
    2e3a:	84 30       	cpi	r24, 0x04	; 4
    2e3c:	28 f4       	brcc	.+10     	; 0x2e48 <planMap+0x34>
    2e3e:	0f c0       	rjmp	.+30     	; 0x2e5e <planMap+0x4a>
		case MOVE_LEFT:
			//If we turned left befor
			//then we still have yet to go forward
			currentMove = MOVE_FORWARD;
    2e40:	82 e0       	ldi	r24, 0x02	; 2
    2e42:	80 93 03 07 	sts	0x0703, r24
    2e46:	0b c0       	rjmp	.+22     	; 0x2e5e <planMap+0x4a>
		case MOVE_FORWARD:
			break;
		case MOVE_RIGHT:		
			break;
		default:
			LCD_printf("Whatz1?!");
    2e48:	00 d0       	rcall	.+0      	; 0x2e4a <planMap+0x36>
    2e4a:	86 e5       	ldi	r24, 0x56	; 86
    2e4c:	91 e0       	ldi	r25, 0x01	; 1
    2e4e:	ed b7       	in	r30, 0x3d	; 61
    2e50:	fe b7       	in	r31, 0x3e	; 62
    2e52:	92 83       	std	Z+2, r25	; 0x02
    2e54:	81 83       	std	Z+1, r24	; 0x01
    2e56:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
    2e5a:	0f 90       	pop	r0
    2e5c:	0f 90       	pop	r0
			break;
	}
	
	
	oldMove = currentMove;
    2e5e:	80 91 03 07 	lds	r24, 0x0703
    2e62:	80 93 04 07 	sts	0x0704, r24
}
    2e66:	08 95       	ret

00002e68 <planGateway>:
	// If we are still lost
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
    2e68:	80 91 c1 03 	lds	r24, 0x03C1
    2e6c:	85 30       	cpi	r24, 0x05	; 5
    2e6e:	80 f0       	brcs	.+32     	; 0x2e90 <planGateway+0x28>
    2e70:	e2 eb       	ldi	r30, 0xB2	; 178
    2e72:	f3 e0       	ldi	r31, 0x03	; 3
		for(i = 0; i<=(BRANCH_MAX-1); i++){
			localizeGateways[0][i] = localizeGateways[0][1+i];
    2e74:	81 81       	ldd	r24, Z+1	; 0x01
    2e76:	80 83       	st	Z, r24
			localizeGateways[1][i] = localizeGateways[1][1+i];
    2e78:	86 81       	ldd	r24, Z+6	; 0x06
    2e7a:	85 83       	std	Z+5, r24	; 0x05
			localizeGateways[2][i] = localizeGateways[2][1+i];
    2e7c:	83 85       	ldd	r24, Z+11	; 0x0b
    2e7e:	82 87       	std	Z+10, r24	; 0x0a
    2e80:	31 96       	adiw	r30, 0x01	; 1
	// when we reach our max branch
	// Pop of the seed and use the second oldest
	// as the new seed
	unsigned char i;
	if(currentBranch>=BRANCH_MAX){
		for(i = 0; i<=(BRANCH_MAX-1); i++){
    2e82:	83 e0       	ldi	r24, 0x03	; 3
    2e84:	e7 3b       	cpi	r30, 0xB7	; 183
    2e86:	f8 07       	cpc	r31, r24
    2e88:	a9 f7       	brne	.-22     	; 0x2e74 <planGateway+0xc>
			localizeGateways[0][i] = localizeGateways[0][1+i];
			localizeGateways[1][i] = localizeGateways[1][1+i];
			localizeGateways[2][i] = localizeGateways[2][1+i];
		}
		currentBranch = BRANCH_MAX-1;
    2e8a:	84 e0       	ldi	r24, 0x04	; 4
    2e8c:	80 93 c1 03 	sts	0x03C1, r24
	}
	
	// Decide what the current move should be
	planMap();
    2e90:	0e 94 0a 17 	call	0x2e14	; 0x2e14 <planMap>
	
	// Save the current gateway, move, and orientation
	localizeGateways[0][currentBranch] = currentGateway;
    2e94:	e0 91 c1 03 	lds	r30, 0x03C1
    2e98:	f0 e0       	ldi	r31, 0x00	; 0
    2e9a:	ee 54       	subi	r30, 0x4E	; 78
    2e9c:	fc 4f       	sbci	r31, 0xFC	; 252
    2e9e:	80 91 d3 04 	lds	r24, 0x04D3
    2ea2:	80 83       	st	Z, r24
	localizeGateways[1][currentBranch] = currentMove;
    2ea4:	90 91 03 07 	lds	r25, 0x0703
    2ea8:	95 83       	std	Z+5, r25	; 0x05
	localizeGateways[2][currentBranch] = currentOrientation;
    2eaa:	80 91 68 05 	lds	r24, 0x0568
    2eae:	82 87       	std	Z+10, r24	; 0x0a
	
	// Update the currentOrientation using currentMove
	switch(currentMove){
    2eb0:	91 30       	cpi	r25, 0x01	; 1
    2eb2:	19 f0       	breq	.+6      	; 0x2eba <planGateway+0x52>
    2eb4:	93 30       	cpi	r25, 0x03	; 3
    2eb6:	41 f4       	brne	.+16     	; 0x2ec8 <planGateway+0x60>
    2eb8:	02 c0       	rjmp	.+4      	; 0x2ebe <planGateway+0x56>
		case MOVE_LEFT:
			//If we move left
			// shift our oriention CCW
			currentOrientation--;
			currentOrientation = currentOrientation&0b11;
    2eba:	81 50       	subi	r24, 0x01	; 1
    2ebc:	01 c0       	rjmp	.+2      	; 0x2ec0 <planGateway+0x58>
			break;
		case MOVE_RIGHT:
			//If we move right
			// shift our oriention CW
			currentOrientation++;
			currentOrientation = currentOrientation&0b11;
    2ebe:	8f 5f       	subi	r24, 0xFF	; 255
    2ec0:	83 70       	andi	r24, 0x03	; 3
    2ec2:	80 93 68 05 	sts	0x0568, r24
    2ec6:	0b c0       	rjmp	.+22     	; 0x2ede <planGateway+0x76>
			break;
		default:
			LCD_printf("Whatz2?!");
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <planGateway+0x62>
    2eca:	8d e4       	ldi	r24, 0x4D	; 77
    2ecc:	91 e0       	ldi	r25, 0x01	; 1
    2ece:	ed b7       	in	r30, 0x3d	; 61
    2ed0:	fe b7       	in	r31, 0x3e	; 62
    2ed2:	92 83       	std	Z+2, r25	; 0x02
    2ed4:	81 83       	std	Z+1, r24	; 0x01
    2ed6:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
			break;
	}
	
	// If we have none or more than one seed
	// Increment current branch 
	currentBranch++;
    2ede:	80 91 c1 03 	lds	r24, 0x03C1
    2ee2:	8f 5f       	subi	r24, 0xFF	; 255
    2ee4:	80 93 c1 03 	sts	0x03C1, r24
}
    2ee8:	08 95       	ret

00002eea <planMetric>:
* Output Return:	none
* Overview:			Moves around the map using metric navigation
********************************************************************/
void planMetric (void)
{
	switch(currentOrientation){
    2eea:	90 91 68 05 	lds	r25, 0x0568
    2eee:	91 30       	cpi	r25, 0x01	; 1
    2ef0:	91 f0       	breq	.+36     	; 0x2f16 <planMetric+0x2c>
    2ef2:	91 30       	cpi	r25, 0x01	; 1
    2ef4:	28 f0       	brcs	.+10     	; 0x2f00 <planMetric+0x16>
    2ef6:	92 30       	cpi	r25, 0x02	; 2
    2ef8:	d9 f0       	breq	.+54     	; 0x2f30 <planMetric+0x46>
    2efa:	93 30       	cpi	r25, 0x03	; 3
    2efc:	c1 f5       	brne	.+112    	; 0x2f6e <planMetric+0x84>
    2efe:	23 c0       	rjmp	.+70     	; 0x2f46 <planMetric+0x5c>
		case NORTH:
			switch(nextOrientation){
    2f00:	80 91 69 05 	lds	r24, 0x0569
    2f04:	81 30       	cpi	r24, 0x01	; 1
    2f06:	91 f0       	breq	.+36     	; 0x2f2c <planMetric+0x42>
    2f08:	81 30       	cpi	r24, 0x01	; 1
    2f0a:	68 f1       	brcs	.+90     	; 0x2f66 <planMetric+0x7c>
    2f0c:	82 30       	cpi	r24, 0x02	; 2
    2f0e:	49 f1       	breq	.+82     	; 0x2f62 <planMetric+0x78>
    2f10:	83 30       	cpi	r24, 0x03	; 3
    2f12:	69 f5       	brne	.+90     	; 0x2f6e <planMetric+0x84>
    2f14:	26 c0       	rjmp	.+76     	; 0x2f62 <planMetric+0x78>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case EAST:
			switch(nextOrientation){
    2f16:	80 91 69 05 	lds	r24, 0x0569
    2f1a:	81 30       	cpi	r24, 0x01	; 1
    2f1c:	21 f1       	breq	.+72     	; 0x2f66 <planMetric+0x7c>
    2f1e:	81 30       	cpi	r24, 0x01	; 1
    2f20:	e8 f0       	brcs	.+58     	; 0x2f5c <planMetric+0x72>
    2f22:	82 30       	cpi	r24, 0x02	; 2
    2f24:	19 f0       	breq	.+6      	; 0x2f2c <planMetric+0x42>
    2f26:	83 30       	cpi	r24, 0x03	; 3
    2f28:	11 f5       	brne	.+68     	; 0x2f6e <planMetric+0x84>
    2f2a:	18 c0       	rjmp	.+48     	; 0x2f5c <planMetric+0x72>
				case NORTH:
					currentMove = MOVE_LEFT; break;
				case EAST:
					currentMove = MOVE_FORWARD; break;
				case SOUTH:
					currentMove = MOVE_RIGHT; break;
    2f2c:	83 e0       	ldi	r24, 0x03	; 3
    2f2e:	1c c0       	rjmp	.+56     	; 0x2f68 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case SOUTH:
			switch(nextOrientation){
    2f30:	80 91 69 05 	lds	r24, 0x0569
    2f34:	81 30       	cpi	r24, 0x01	; 1
    2f36:	c1 f0       	breq	.+48     	; 0x2f68 <planMetric+0x7e>
    2f38:	81 30       	cpi	r24, 0x01	; 1
    2f3a:	98 f0       	brcs	.+38     	; 0x2f62 <planMetric+0x78>
    2f3c:	82 30       	cpi	r24, 0x02	; 2
    2f3e:	a1 f0       	breq	.+40     	; 0x2f68 <planMetric+0x7e>
    2f40:	83 30       	cpi	r24, 0x03	; 3
    2f42:	a9 f4       	brne	.+42     	; 0x2f6e <planMetric+0x84>
    2f44:	11 c0       	rjmp	.+34     	; 0x2f68 <planMetric+0x7e>
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		case WEST:
			switch(nextOrientation){
    2f46:	80 91 69 05 	lds	r24, 0x0569
    2f4a:	81 30       	cpi	r24, 0x01	; 1
    2f4c:	69 f0       	breq	.+26     	; 0x2f68 <planMetric+0x7e>
    2f4e:	81 30       	cpi	r24, 0x01	; 1
    2f50:	28 f0       	brcs	.+10     	; 0x2f5c <planMetric+0x72>
    2f52:	82 30       	cpi	r24, 0x02	; 2
    2f54:	31 f0       	breq	.+12     	; 0x2f62 <planMetric+0x78>
    2f56:	83 30       	cpi	r24, 0x03	; 3
    2f58:	51 f4       	brne	.+20     	; 0x2f6e <planMetric+0x84>
    2f5a:	05 c0       	rjmp	.+10     	; 0x2f66 <planMetric+0x7c>
				case NORTH:
					currentMove = MOVE_RIGHT; break;
    2f5c:	90 93 03 07 	sts	0x0703, r25
    2f60:	08 95       	ret
				case EAST:
					currentMove = MOVE_LEFT; break;
				case SOUTH:
					currentMove = MOVE_LEFT; break;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	01 c0       	rjmp	.+2      	; 0x2f68 <planMetric+0x7e>
				case WEST:
					currentMove = MOVE_FORWARD; break;
    2f66:	82 e0       	ldi	r24, 0x02	; 2
    2f68:	80 93 03 07 	sts	0x0703, r24
    2f6c:	08 95       	ret
				default:
					LCD_printf("Whatz5?!"); break;
			}
			break;
		default:
			LCD_printf("Whatz5?!"); break;
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <planMetric+0x86>
    2f70:	8f e5       	ldi	r24, 0x5F	; 95
    2f72:	91 e0       	ldi	r25, 0x01	; 1
    2f74:	ed b7       	in	r30, 0x3d	; 61
    2f76:	fe b7       	in	r31, 0x3e	; 62
    2f78:	92 83       	std	Z+2, r25	; 0x02
    2f7a:	81 83       	std	Z+1, r24	; 0x01
    2f7c:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
    2f80:	0f 90       	pop	r0
    2f82:	0f 90       	pop	r0
    2f84:	08 95       	ret

00002f86 <moveWorld>:
* Input Variables:	void
* Output Return:	char
* Overview:		    Moves robot through the world
********************************************************************/
char moveWorld( void )
{	
    2f86:	8f 92       	push	r8
    2f88:	af 92       	push	r10
    2f8a:	bf 92       	push	r11
    2f8c:	cf 92       	push	r12
    2f8e:	df 92       	push	r13
    2f90:	ef 92       	push	r14
    2f92:	ff 92       	push	r15
    2f94:	0f 93       	push	r16
    2f96:	1f 93       	push	r17
	LCD_clear();
    2f98:	0e 94 18 1c 	call	0x3830	; 0x3830 <LCD_clear>
	// LCD_printf("Current Move:\n%i\n",currentMove);
	
	currentMove = moveCommands[currentMoveWorld];
    2f9c:	e0 91 d4 04 	lds	r30, 0x04D4
    2fa0:	f0 e0       	ldi	r31, 0x00	; 0
    2fa2:	e9 5a       	subi	r30, 0xA9	; 169
    2fa4:	fa 4f       	sbci	r31, 0xFA	; 250
    2fa6:	e0 81       	ld	r30, Z
    2fa8:	e0 93 03 07 	sts	0x0703, r30
	// if(currentMove != oldMove){
		// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
	// }
	// LCD_clear();
	
	if(((currentMove == MOVE_LEFT)|(currentMove == MOVE_RIGHT))&(oldMove == MOVE_FORWARD))
    2fac:	80 e0       	ldi	r24, 0x00	; 0
    2fae:	e1 30       	cpi	r30, 0x01	; 1
    2fb0:	09 f4       	brne	.+2      	; 0x2fb4 <moveWorld+0x2e>
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	90 e0       	ldi	r25, 0x00	; 0
    2fb6:	e3 30       	cpi	r30, 0x03	; 3
    2fb8:	09 f4       	brne	.+2      	; 0x2fbc <moveWorld+0x36>
    2fba:	91 e0       	ldi	r25, 0x01	; 1
    2fbc:	89 2b       	or	r24, r25
    2fbe:	28 2f       	mov	r18, r24
    2fc0:	30 e0       	ldi	r19, 0x00	; 0
    2fc2:	40 e0       	ldi	r20, 0x00	; 0
    2fc4:	50 e0       	ldi	r21, 0x00	; 0
    2fc6:	80 91 04 07 	lds	r24, 0x0704
    2fca:	82 30       	cpi	r24, 0x02	; 2
    2fcc:	11 f4       	brne	.+4      	; 0x2fd2 <moveWorld+0x4c>
    2fce:	41 e0       	ldi	r20, 0x01	; 1
    2fd0:	50 e0       	ldi	r21, 0x00	; 0
    2fd2:	24 23       	and	r18, r20
    2fd4:	35 23       	and	r19, r21
    2fd6:	23 2b       	or	r18, r19
    2fd8:	b9 f0       	breq	.+46     	; 0x3008 <moveWorld+0x82>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.5/5.0), 10, 10, 0);		
    2fda:	60 e0       	ldi	r22, 0x00	; 0
    2fdc:	70 e0       	ldi	r23, 0x00	; 0
    2fde:	80 e0       	ldi	r24, 0x00	; 0
    2fe0:	9f e4       	ldi	r25, 0x4F	; 79
    2fe2:	28 e4       	ldi	r18, 0x48	; 72
    2fe4:	31 ee       	ldi	r19, 0xE1	; 225
    2fe6:	46 eb       	ldi	r20, 0xB6	; 182
    2fe8:	51 e4       	ldi	r21, 0x41	; 65
    2fea:	0f 2e       	mov	r0, r31
    2fec:	f0 e0       	ldi	r31, 0x00	; 0
    2fee:	ef 2e       	mov	r14, r31
    2ff0:	f0 e0       	ldi	r31, 0x00	; 0
    2ff2:	ff 2e       	mov	r15, r31
    2ff4:	f0 e2       	ldi	r31, 0x20	; 32
    2ff6:	0f 2f       	mov	r16, r31
    2ff8:	f1 e4       	ldi	r31, 0x41	; 65
    2ffa:	1f 2f       	mov	r17, r31
    2ffc:	f0 2d       	mov	r31, r0
    2ffe:	57 01       	movw	r10, r14
    3000:	68 01       	movw	r12, r16
    3002:	88 24       	eor	r8, r8
    3004:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	if(((oldMove == MOVE_LEFT)|(oldMove == MOVE_RIGHT))&(currentMove == MOVE_FORWARD))
    3008:	20 91 04 07 	lds	r18, 0x0704
    300c:	80 e0       	ldi	r24, 0x00	; 0
    300e:	21 30       	cpi	r18, 0x01	; 1
    3010:	09 f4       	brne	.+2      	; 0x3014 <moveWorld+0x8e>
    3012:	81 e0       	ldi	r24, 0x01	; 1
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	23 30       	cpi	r18, 0x03	; 3
    3018:	09 f4       	brne	.+2      	; 0x301c <moveWorld+0x96>
    301a:	91 e0       	ldi	r25, 0x01	; 1
    301c:	89 2b       	or	r24, r25
    301e:	28 2f       	mov	r18, r24
    3020:	30 e0       	ldi	r19, 0x00	; 0
    3022:	40 e0       	ldi	r20, 0x00	; 0
    3024:	50 e0       	ldi	r21, 0x00	; 0
    3026:	80 91 03 07 	lds	r24, 0x0703
    302a:	82 30       	cpi	r24, 0x02	; 2
    302c:	11 f4       	brne	.+4      	; 0x3032 <moveWorld+0xac>
    302e:	41 e0       	ldi	r20, 0x01	; 1
    3030:	50 e0       	ldi	r21, 0x00	; 0
    3032:	24 23       	and	r18, r20
    3034:	35 23       	and	r19, r21
    3036:	23 2b       	or	r18, r19
    3038:	b9 f0       	breq	.+46     	; 0x3068 <moveWorld+0xe2>
	{
		move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE*(2.2/5.0), 10, 10, 0);		
    303a:	60 e0       	ldi	r22, 0x00	; 0
    303c:	70 e0       	ldi	r23, 0x00	; 0
    303e:	80 e0       	ldi	r24, 0x00	; 0
    3040:	9f e4       	ldi	r25, 0x4F	; 79
    3042:	25 e3       	ldi	r18, 0x35	; 53
    3044:	3f ee       	ldi	r19, 0xEF	; 239
    3046:	40 ea       	ldi	r20, 0xA0	; 160
    3048:	51 e4       	ldi	r21, 0x41	; 65
    304a:	0f 2e       	mov	r0, r31
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	ef 2e       	mov	r14, r31
    3050:	f0 e0       	ldi	r31, 0x00	; 0
    3052:	ff 2e       	mov	r15, r31
    3054:	f0 e2       	ldi	r31, 0x20	; 32
    3056:	0f 2f       	mov	r16, r31
    3058:	f1 e4       	ldi	r31, 0x41	; 65
    305a:	1f 2f       	mov	r17, r31
    305c:	f0 2d       	mov	r31, r0
    305e:	57 01       	movw	r10, r14
    3060:	68 01       	movw	r12, r16
    3062:	88 24       	eor	r8, r8
    3064:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
	}
	
	switch(currentMove){
    3068:	80 91 03 07 	lds	r24, 0x0703
    306c:	82 30       	cpi	r24, 0x02	; 2
    306e:	c1 f1       	breq	.+112    	; 0x30e0 <moveWorld+0x15a>
    3070:	83 30       	cpi	r24, 0x03	; 3
    3072:	09 f4       	brne	.+2      	; 0x3076 <moveWorld+0xf0>
    3074:	61 c0       	rjmp	.+194    	; 0x3138 <moveWorld+0x1b2>
    3076:	81 30       	cpi	r24, 0x01	; 1
    3078:	09 f0       	breq	.+2      	; 0x307c <moveWorld+0xf6>
    307a:	9f c0       	rjmp	.+318    	; 0x31ba <moveWorld+0x234>
		case MOVE_LEFT:
			LCD_printf("Left\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    307c:	8d b7       	in	r24, 0x3d	; 61
    307e:	9e b7       	in	r25, 0x3e	; 62
    3080:	08 97       	sbiw	r24, 0x08	; 8
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	9e bf       	out	0x3e, r25	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	8d bf       	out	0x3d, r24	; 61
    308c:	ed b7       	in	r30, 0x3d	; 61
    308e:	fe b7       	in	r31, 0x3e	; 62
    3090:	31 96       	adiw	r30, 0x01	; 1
    3092:	88 e6       	ldi	r24, 0x68	; 104
    3094:	91 e0       	ldi	r25, 0x01	; 1
    3096:	ad b7       	in	r26, 0x3d	; 61
    3098:	be b7       	in	r27, 0x3e	; 62
    309a:	12 96       	adiw	r26, 0x02	; 2
    309c:	9c 93       	st	X, r25
    309e:	8e 93       	st	-X, r24
    30a0:	11 97       	sbiw	r26, 0x01	; 1
    30a2:	80 91 d4 04 	lds	r24, 0x04D4
    30a6:	82 83       	std	Z+2, r24	; 0x02
    30a8:	13 82       	std	Z+3, r1	; 0x03
    30aa:	80 91 d3 04 	lds	r24, 0x04D3
    30ae:	84 83       	std	Z+4, r24	; 0x04
    30b0:	15 82       	std	Z+5, r1	; 0x05
    30b2:	80 91 da 04 	lds	r24, 0x04DA
    30b6:	86 83       	std	Z+6, r24	; 0x06
    30b8:	17 82       	std	Z+7, r1	; 0x07
    30ba:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, LEFT_TURN, 10, 10, 0);
    30be:	ed b7       	in	r30, 0x3d	; 61
    30c0:	fe b7       	in	r31, 0x3e	; 62
    30c2:	38 96       	adiw	r30, 0x08	; 8
    30c4:	0f b6       	in	r0, 0x3f	; 63
    30c6:	f8 94       	cli
    30c8:	fe bf       	out	0x3e, r31	; 62
    30ca:	0f be       	out	0x3f, r0	; 63
    30cc:	ed bf       	out	0x3d, r30	; 61
    30ce:	60 e0       	ldi	r22, 0x00	; 0
    30d0:	70 e0       	ldi	r23, 0x00	; 0
    30d2:	80 e0       	ldi	r24, 0x00	; 0
    30d4:	90 e0       	ldi	r25, 0x00	; 0
    30d6:	20 e0       	ldi	r18, 0x00	; 0
    30d8:	30 e0       	ldi	r19, 0x00	; 0
    30da:	4c e8       	ldi	r20, 0x8C	; 140
    30dc:	51 ec       	ldi	r21, 0xC1	; 193
    30de:	5d c0       	rjmp	.+186    	; 0x319a <moveWorld+0x214>
			break;
		case MOVE_FORWARD:
			LCD_printf("Forward\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    30e0:	8d b7       	in	r24, 0x3d	; 61
    30e2:	9e b7       	in	r25, 0x3e	; 62
    30e4:	08 97       	sbiw	r24, 0x08	; 8
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	9e bf       	out	0x3e, r25	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	8d bf       	out	0x3d, r24	; 61
    30f0:	ed b7       	in	r30, 0x3d	; 61
    30f2:	fe b7       	in	r31, 0x3e	; 62
    30f4:	31 96       	adiw	r30, 0x01	; 1
    30f6:	83 e9       	ldi	r24, 0x93	; 147
    30f8:	91 e0       	ldi	r25, 0x01	; 1
    30fa:	ad b7       	in	r26, 0x3d	; 61
    30fc:	be b7       	in	r27, 0x3e	; 62
    30fe:	12 96       	adiw	r26, 0x02	; 2
    3100:	9c 93       	st	X, r25
    3102:	8e 93       	st	-X, r24
    3104:	11 97       	sbiw	r26, 0x01	; 1
    3106:	80 91 d4 04 	lds	r24, 0x04D4
    310a:	82 83       	std	Z+2, r24	; 0x02
    310c:	13 82       	std	Z+3, r1	; 0x03
    310e:	80 91 d3 04 	lds	r24, 0x04D3
    3112:	84 83       	std	Z+4, r24	; 0x04
    3114:	15 82       	std	Z+5, r1	; 0x05
    3116:	80 91 da 04 	lds	r24, 0x04DA
    311a:	86 83       	std	Z+6, r24	; 0x06
    311c:	17 82       	std	Z+7, r1	; 0x07
    311e:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			moveWallOld();
    3122:	ed b7       	in	r30, 0x3d	; 61
    3124:	fe b7       	in	r31, 0x3e	; 62
    3126:	38 96       	adiw	r30, 0x08	; 8
    3128:	0f b6       	in	r0, 0x3f	; 63
    312a:	f8 94       	cli
    312c:	fe bf       	out	0x3e, r31	; 62
    312e:	0f be       	out	0x3f, r0	; 63
    3130:	ed bf       	out	0x3d, r30	; 61
    3132:	0e 94 b1 12 	call	0x2562	; 0x2562 <moveWallOld>
    3136:	53 c0       	rjmp	.+166    	; 0x31de <moveWorld+0x258>
			// move_arc_stwt(NO_TURN, WORLD_RESOLUTION_SIZE, 10, 10, 0);
			break;
		case MOVE_RIGHT:
			LCD_printf("Right\nCurMove:%i\nGateway:%i\nNextGateway:%i\n",currentMoveWorld,currentGateway,nextGateway);
    3138:	8d b7       	in	r24, 0x3d	; 61
    313a:	9e b7       	in	r25, 0x3e	; 62
    313c:	08 97       	sbiw	r24, 0x08	; 8
    313e:	0f b6       	in	r0, 0x3f	; 63
    3140:	f8 94       	cli
    3142:	9e bf       	out	0x3e, r25	; 62
    3144:	0f be       	out	0x3f, r0	; 63
    3146:	8d bf       	out	0x3d, r24	; 61
    3148:	ed b7       	in	r30, 0x3d	; 61
    314a:	fe b7       	in	r31, 0x3e	; 62
    314c:	31 96       	adiw	r30, 0x01	; 1
    314e:	81 ec       	ldi	r24, 0xC1	; 193
    3150:	91 e0       	ldi	r25, 0x01	; 1
    3152:	ad b7       	in	r26, 0x3d	; 61
    3154:	be b7       	in	r27, 0x3e	; 62
    3156:	12 96       	adiw	r26, 0x02	; 2
    3158:	9c 93       	st	X, r25
    315a:	8e 93       	st	-X, r24
    315c:	11 97       	sbiw	r26, 0x01	; 1
    315e:	80 91 d4 04 	lds	r24, 0x04D4
    3162:	82 83       	std	Z+2, r24	; 0x02
    3164:	13 82       	std	Z+3, r1	; 0x03
    3166:	80 91 d3 04 	lds	r24, 0x04D3
    316a:	84 83       	std	Z+4, r24	; 0x04
    316c:	15 82       	std	Z+5, r1	; 0x05
    316e:	80 91 da 04 	lds	r24, 0x04DA
    3172:	86 83       	std	Z+6, r24	; 0x06
    3174:	17 82       	std	Z+7, r1	; 0x07
    3176:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
			// TMRSRVC_delay(1000);//wait 1 seconds
			move_arc_stwt(POINT_TURN, RIGHT_TURN, 10, 10, 0);
    317a:	ed b7       	in	r30, 0x3d	; 61
    317c:	fe b7       	in	r31, 0x3e	; 62
    317e:	38 96       	adiw	r30, 0x08	; 8
    3180:	0f b6       	in	r0, 0x3f	; 63
    3182:	f8 94       	cli
    3184:	fe bf       	out	0x3e, r31	; 62
    3186:	0f be       	out	0x3f, r0	; 63
    3188:	ed bf       	out	0x3d, r30	; 61
    318a:	60 e0       	ldi	r22, 0x00	; 0
    318c:	70 e0       	ldi	r23, 0x00	; 0
    318e:	80 e0       	ldi	r24, 0x00	; 0
    3190:	90 e0       	ldi	r25, 0x00	; 0
    3192:	20 e0       	ldi	r18, 0x00	; 0
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	4c e8       	ldi	r20, 0x8C	; 140
    3198:	51 e4       	ldi	r21, 0x41	; 65
    319a:	0f 2e       	mov	r0, r31
    319c:	f0 e0       	ldi	r31, 0x00	; 0
    319e:	ef 2e       	mov	r14, r31
    31a0:	f0 e0       	ldi	r31, 0x00	; 0
    31a2:	ff 2e       	mov	r15, r31
    31a4:	f0 e2       	ldi	r31, 0x20	; 32
    31a6:	0f 2f       	mov	r16, r31
    31a8:	f1 e4       	ldi	r31, 0x41	; 65
    31aa:	1f 2f       	mov	r17, r31
    31ac:	f0 2d       	mov	r31, r0
    31ae:	57 01       	movw	r10, r14
    31b0:	68 01       	movw	r12, r16
    31b2:	88 24       	eor	r8, r8
    31b4:	0e 94 c5 0a 	call	0x158a	; 0x158a <move_arc_stwt>
    31b8:	12 c0       	rjmp	.+36     	; 0x31de <moveWorld+0x258>
			break;
		default:
			LCD_printf("Whatz4?!");
    31ba:	00 d0       	rcall	.+0      	; 0x31bc <moveWorld+0x236>
    31bc:	8d ee       	ldi	r24, 0xED	; 237
    31be:	91 e0       	ldi	r25, 0x01	; 1
    31c0:	ad b7       	in	r26, 0x3d	; 61
    31c2:	be b7       	in	r27, 0x3e	; 62
    31c4:	12 96       	adiw	r26, 0x02	; 2
    31c6:	9c 93       	st	X, r25
    31c8:	8e 93       	st	-X, r24
    31ca:	11 97       	sbiw	r26, 0x01	; 1
    31cc:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
			STEPPER_stop( STEPPER_BOTH, STEPPER_BRK_OFF);
    31d0:	0f 90       	pop	r0
    31d2:	0f 90       	pop	r0
    31d4:	82 e0       	ldi	r24, 0x02	; 2
    31d6:	60 e0       	ldi	r22, 0x00	; 0
    31d8:	0e 94 23 21 	call	0x4246	; 0x4246 <STEPPER_stop>
    31dc:	ff cf       	rjmp	.-2      	; 0x31dc <moveWorld+0x256>
			while(1);
			break;
	}
	// TMRSRVC_delay(1000);//wait 1 seconds
	oldMove = currentMove;
    31de:	80 91 03 07 	lds	r24, 0x0703
    31e2:	80 93 04 07 	sts	0x0704, r24
	return 1;
}
    31e6:	81 e0       	ldi	r24, 0x01	; 1
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	ff 90       	pop	r15
    31ee:	ef 90       	pop	r14
    31f0:	df 90       	pop	r13
    31f2:	cf 90       	pop	r12
    31f4:	bf 90       	pop	r11
    31f6:	af 90       	pop	r10
    31f8:	8f 90       	pop	r8
    31fa:	08 95       	ret

000031fc <movesInput>:
* Output Return:	void
* Overview:			Stores the button values pressed by user into an
*					array of max size 32.
********************************************************************/
void movesInput( void )
{
    31fc:	ff 92       	push	r15
    31fe:	0f 93       	push	r16
    3200:	1f 93       	push	r17
    3202:	cf 93       	push	r28
    3204:	df 93       	push	r29
    3206:	ff 24       	eor	r15, r15
    3208:	f3 94       	inc	r15
    320a:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    320c:	c6 ef       	ldi	r28, 0xF6	; 246
    320e:	d1 e0       	ldi	r29, 0x01	; 1
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
		btnHolder = EnterTopoCommand();
    3210:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>
    3214:	08 2f       	mov	r16, r24
	
		if (btnHolder == MOVE_LEFT){
    3216:	81 30       	cpi	r24, 0x01	; 1
    3218:	21 f0       	breq	.+8      	; 0x3222 <movesInput+0x26>
			moveCommands[i] = MOVE_LEFT;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    321a:	82 30       	cpi	r24, 0x02	; 2
    321c:	11 f0       	breq	.+4      	; 0x3222 <movesInput+0x26>
			moveCommands[i] = MOVE_FORWARD;
			i++;
		}
		else if (btnHolder == MOVE_RIGHT){
    321e:	83 30       	cpi	r24, 0x03	; 3
    3220:	39 f4       	brne	.+14     	; 0x3230 <movesInput+0x34>
			moveCommands[i] = MOVE_RIGHT;
    3222:	e1 2f       	mov	r30, r17
    3224:	f0 e0       	ldi	r31, 0x00	; 0
    3226:	e9 5a       	subi	r30, 0xA9	; 169
    3228:	fa 4f       	sbci	r31, 0xFA	; 250
    322a:	00 83       	st	Z, r16
			i++;
    322c:	1f 5f       	subi	r17, 0xFF	; 255
    322e:	02 c0       	rjmp	.+4      	; 0x3234 <movesInput+0x38>
		}

		if (btnHolder != 0){
    3230:	88 23       	and	r24, r24
    3232:	21 f1       	breq	.+72     	; 0x327c <movesInput+0x80>
			LCD_clear();
    3234:	0e 94 18 1c 	call	0x3830	; 0x3830 <LCD_clear>
			LCD_printf("Old Command: %i\nNew Command: %i\nCommand Num %i\n\n",btnHolderOld,btnHolder,i);
    3238:	8d b7       	in	r24, 0x3d	; 61
    323a:	9e b7       	in	r25, 0x3e	; 62
    323c:	08 97       	sbiw	r24, 0x08	; 8
    323e:	0f b6       	in	r0, 0x3f	; 63
    3240:	f8 94       	cli
    3242:	9e bf       	out	0x3e, r25	; 62
    3244:	0f be       	out	0x3f, r0	; 63
    3246:	8d bf       	out	0x3d, r24	; 61
    3248:	ed b7       	in	r30, 0x3d	; 61
    324a:	fe b7       	in	r31, 0x3e	; 62
    324c:	31 96       	adiw	r30, 0x01	; 1
    324e:	ad b7       	in	r26, 0x3d	; 61
    3250:	be b7       	in	r27, 0x3e	; 62
    3252:	12 96       	adiw	r26, 0x02	; 2
    3254:	dc 93       	st	X, r29
    3256:	ce 93       	st	-X, r28
    3258:	11 97       	sbiw	r26, 0x01	; 1
    325a:	f2 82       	std	Z+2, r15	; 0x02
    325c:	13 82       	std	Z+3, r1	; 0x03
    325e:	04 83       	std	Z+4, r16	; 0x04
    3260:	15 82       	std	Z+5, r1	; 0x05
    3262:	16 83       	std	Z+6, r17	; 0x06
    3264:	17 82       	std	Z+7, r1	; 0x07
    3266:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
    326a:	f0 2e       	mov	r15, r16
    326c:	8d b7       	in	r24, 0x3d	; 61
    326e:	9e b7       	in	r25, 0x3e	; 62
    3270:	08 96       	adiw	r24, 0x08	; 8
    3272:	0f b6       	in	r0, 0x3f	; 63
    3274:	f8 94       	cli
    3276:	9e bf       	out	0x3e, r25	; 62
    3278:	0f be       	out	0x3f, r0	; 63
    327a:	8d bf       	out	0x3d, r24	; 61
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    327c:	84 ef       	ldi	r24, 0xF4	; 244
    327e:	91 e0       	ldi	r25, 0x01	; 1
    3280:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < (MAX_MOVE_SIZE-1)){
    3284:	1b 30       	cpi	r17, 0x0B	; 11
    3286:	20 f2       	brcs	.-120    	; 0x3210 <movesInput+0x14>
			btnHolderOld = btnHolder;
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	i++;
	moveCommands[i] = MOVE_STOP;
    3288:	1f 5f       	subi	r17, 0xFF	; 255
    328a:	e1 2f       	mov	r30, r17
    328c:	f0 e0       	ldi	r31, 0x00	; 0
    328e:	e9 5a       	subi	r30, 0xA9	; 169
    3290:	fa 4f       	sbci	r31, 0xFA	; 250
    3292:	84 e0       	ldi	r24, 0x04	; 4
    3294:	80 83       	st	Z, r24
}
    3296:	df 91       	pop	r29
    3298:	cf 91       	pop	r28
    329a:	1f 91       	pop	r17
    329c:	0f 91       	pop	r16
    329e:	ff 90       	pop	r15
    32a0:	08 95       	ret

000032a2 <worldInput>:
* Output Return:	void
* Overview:			Allows the user to initialize the location of
*					the robot 
********************************************************************/
void worldInput( void )
{
    32a2:	1f 93       	push	r17
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		// if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    32aa:	c7 e2       	ldi	r28, 0x27	; 39
    32ac:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
		btnHolder = EnterTopoCommand();
    32ae:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    32b2:	81 30       	cpi	r24, 0x01	; 1
    32b4:	21 f4       	brne	.+8      	; 0x32be <worldInput+0x1c>
			currentCellWorld = currentCellWorld << 1;
    32b6:	80 91 6a 06 	lds	r24, 0x066A
    32ba:	88 0f       	add	r24, r24
    32bc:	06 c0       	rjmp	.+12     	; 0x32ca <worldInput+0x28>
			currentCellWorld += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    32be:	82 30       	cpi	r24, 0x02	; 2
    32c0:	39 f4       	brne	.+14     	; 0x32d0 <worldInput+0x2e>
			currentCellWorld = currentCellWorld << 1;
    32c2:	80 91 6a 06 	lds	r24, 0x066A
    32c6:	88 0f       	add	r24, r24
			currentCellWorld += 1;
    32c8:	8f 5f       	subi	r24, 0xFF	; 255
    32ca:	80 93 6a 06 	sts	0x066A, r24
			i++;
    32ce:	1f 5f       	subi	r17, 0xFF	; 255
		}

		// if (btnHolder != 0){
			LCD_clear();
    32d0:	0e 94 18 1c 	call	0x3830	; 0x3830 <LCD_clear>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <worldInput+0x34>
    32d6:	00 d0       	rcall	.+0      	; 0x32d8 <worldInput+0x36>
    32d8:	00 d0       	rcall	.+0      	; 0x32da <worldInput+0x38>
    32da:	ed b7       	in	r30, 0x3d	; 61
    32dc:	fe b7       	in	r31, 0x3e	; 62
    32de:	31 96       	adiw	r30, 0x01	; 1
    32e0:	ad b7       	in	r26, 0x3d	; 61
    32e2:	be b7       	in	r27, 0x3e	; 62
    32e4:	12 96       	adiw	r26, 0x02	; 2
    32e6:	dc 93       	st	X, r29
    32e8:	ce 93       	st	-X, r28
    32ea:	11 97       	sbiw	r26, 0x01	; 1
    32ec:	80 91 6a 06 	lds	r24, 0x066A
    32f0:	82 83       	std	Z+2, r24	; 0x02
    32f2:	13 82       	std	Z+3, r1	; 0x03
    32f4:	14 83       	std	Z+4, r17	; 0x04
    32f6:	15 82       	std	Z+5, r1	; 0x05
    32f8:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
    32fc:	8d b7       	in	r24, 0x3d	; 61
    32fe:	9e b7       	in	r25, 0x3e	; 62
    3300:	06 96       	adiw	r24, 0x06	; 6
    3302:	0f b6       	in	r0, 0x3f	; 63
    3304:	f8 94       	cli
    3306:	9e bf       	out	0x3e, r25	; 62
    3308:	0f be       	out	0x3f, r0	; 63
    330a:	8d bf       	out	0x3d, r24	; 61
    330c:	84 ef       	ldi	r24, 0xF4	; 244
    330e:	91 e0       	ldi	r25, 0x01	; 1
    3310:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < WORLD_ROW_SIZE){
    3314:	14 30       	cpi	r17, 0x04	; 4
    3316:	58 f2       	brcs	.-106    	; 0x32ae <worldInput+0xc>
			LCD_printf("Current World Cell:\n%i\nCommand Num: %i\n",currentCellWorld,i);
		// }
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	
	currentCellWorldStart = currentCellWorld;
    3318:	80 91 6a 06 	lds	r24, 0x066A
    331c:	80 93 6b 06 	sts	0x066B, r24
}
    3320:	df 91       	pop	r29
    3322:	cf 91       	pop	r28
    3324:	1f 91       	pop	r17
    3326:	08 95       	ret

00003328 <orientationInput>:
*						EAST = 0b01
*						SOUTH = 0b10
*						WEST = 0b11
********************************************************************/
void orientationInput(void)
{
    3328:	1f 93       	push	r17
    332a:	cf 93       	push	r28
    332c:	df 93       	push	r29
    332e:	10 e0       	ldi	r17, 0x00	; 0
			i++;
		}

		if (btnHolder != 0){
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    3330:	cf e4       	ldi	r28, 0x4F	; 79
    3332:	d2 e0       	ldi	r29, 0x02	; 2
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
		btnHolder = EnterTopoCommand();
    3334:	0e 94 82 05 	call	0xb04	; 0xb04 <EnterTopoCommand>

		if (btnHolder == MOVE_LEFT){
    3338:	81 30       	cpi	r24, 0x01	; 1
    333a:	21 f4       	brne	.+8      	; 0x3344 <orientationInput+0x1c>
			currentOrientation = currentOrientation << 1;
    333c:	80 91 68 05 	lds	r24, 0x0568
    3340:	88 0f       	add	r24, r24
    3342:	06 c0       	rjmp	.+12     	; 0x3350 <orientationInput+0x28>
			currentOrientation += 0;
			i++;
		}
		else if (btnHolder == MOVE_FORWARD){
    3344:	82 30       	cpi	r24, 0x02	; 2
    3346:	41 f4       	brne	.+16     	; 0x3358 <orientationInput+0x30>
			currentOrientation = currentOrientation << 1;
    3348:	80 91 68 05 	lds	r24, 0x0568
    334c:	88 0f       	add	r24, r24
			currentOrientation += 1;
    334e:	8f 5f       	subi	r24, 0xFF	; 255
    3350:	80 93 68 05 	sts	0x0568, r24
			i++;
    3354:	1f 5f       	subi	r17, 0xFF	; 255
    3356:	02 c0       	rjmp	.+4      	; 0x335c <orientationInput+0x34>
		}

		if (btnHolder != 0){
    3358:	88 23       	and	r24, r24
    335a:	f1 f0       	breq	.+60     	; 0x3398 <orientationInput+0x70>
			LCD_clear();
    335c:	0e 94 18 1c 	call	0x3830	; 0x3830 <LCD_clear>
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
    3360:	00 d0       	rcall	.+0      	; 0x3362 <orientationInput+0x3a>
    3362:	00 d0       	rcall	.+0      	; 0x3364 <orientationInput+0x3c>
    3364:	00 d0       	rcall	.+0      	; 0x3366 <orientationInput+0x3e>
    3366:	ed b7       	in	r30, 0x3d	; 61
    3368:	fe b7       	in	r31, 0x3e	; 62
    336a:	31 96       	adiw	r30, 0x01	; 1
    336c:	ad b7       	in	r26, 0x3d	; 61
    336e:	be b7       	in	r27, 0x3e	; 62
    3370:	12 96       	adiw	r26, 0x02	; 2
    3372:	dc 93       	st	X, r29
    3374:	ce 93       	st	-X, r28
    3376:	11 97       	sbiw	r26, 0x01	; 1
    3378:	80 91 68 05 	lds	r24, 0x0568
    337c:	82 83       	std	Z+2, r24	; 0x02
    337e:	13 82       	std	Z+3, r1	; 0x03
    3380:	14 83       	std	Z+4, r17	; 0x04
    3382:	15 82       	std	Z+5, r1	; 0x05
    3384:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
    3388:	8d b7       	in	r24, 0x3d	; 61
    338a:	9e b7       	in	r25, 0x3e	; 62
    338c:	06 96       	adiw	r24, 0x06	; 6
    338e:	0f b6       	in	r0, 0x3f	; 63
    3390:	f8 94       	cli
    3392:	9e bf       	out	0x3e, r25	; 62
    3394:	0f be       	out	0x3f, r0	; 63
    3396:	8d bf       	out	0x3d, r24	; 61
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
    3398:	84 ef       	ldi	r24, 0xF4	; 244
    339a:	91 e0       	ldi	r25, 0x01	; 1
    339c:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <TMRSRVC_delay>
	// Initialize a button holder
	unsigned char btnHolder = UNPRESSED;
	// unsigned char btnHolderOld = UNPRESSED;
	unsigned char i = 0;
	
	while (i < 2){
    33a0:	12 30       	cpi	r17, 0x02	; 2
    33a2:	40 f2       	brcs	.-112    	; 0x3334 <orientationInput+0xc>
			LCD_clear();
			LCD_printf("Current World Orientation:\n%i\nCommand Num: %i\n",currentOrientation,i);	
		}
		TMRSRVC_delay(500);	//wait 0.5 seconds
	}
	LCD_clear();
    33a4:	0e 94 18 1c 	call	0x3830	; 0x3830 <LCD_clear>
	switch(currentOrientation){
    33a8:	80 91 68 05 	lds	r24, 0x0568
    33ac:	81 30       	cpi	r24, 0x01	; 1
    33ae:	51 f0       	breq	.+20     	; 0x33c4 <orientationInput+0x9c>
    33b0:	81 30       	cpi	r24, 0x01	; 1
    33b2:	28 f0       	brcs	.+10     	; 0x33be <orientationInput+0x96>
    33b4:	82 30       	cpi	r24, 0x02	; 2
    33b6:	49 f0       	breq	.+18     	; 0x33ca <orientationInput+0xa2>
    33b8:	83 30       	cpi	r24, 0x03	; 3
    33ba:	71 f4       	brne	.+28     	; 0x33d8 <orientationInput+0xb0>
    33bc:	09 c0       	rjmp	.+18     	; 0x33d0 <orientationInput+0xa8>
		case NORTH:
			LCD_printf("Current World Orientation:\nNORTH\n\n");
    33be:	8e e7       	ldi	r24, 0x7E	; 126
    33c0:	92 e0       	ldi	r25, 0x02	; 2
    33c2:	08 c0       	rjmp	.+16     	; 0x33d4 <orientationInput+0xac>
			break;
		case EAST:
			LCD_printf("Current World Orientation:\nEAST\n\n");
    33c4:	80 ea       	ldi	r24, 0xA0	; 160
    33c6:	92 e0       	ldi	r25, 0x02	; 2
    33c8:	05 c0       	rjmp	.+10     	; 0x33d4 <orientationInput+0xac>
			break;
		case SOUTH:
			LCD_printf("Current World Orientation:\nSOUTH\n\n");
    33ca:	81 ec       	ldi	r24, 0xC1	; 193
    33cc:	92 e0       	ldi	r25, 0x02	; 2
    33ce:	02 c0       	rjmp	.+4      	; 0x33d4 <orientationInput+0xac>
			break;
		case WEST:
			LCD_printf("Current World Orientation:\nWEST\n\n");
    33d0:	83 ee       	ldi	r24, 0xE3	; 227
    33d2:	92 e0       	ldi	r25, 0x02	; 2
    33d4:	0e 94 9a 38 	call	0x7134	; 0x7134 <puts>
			break;
		default:
			break;
	}
	
	currentOrientationStart = currentOrientation;
    33d8:	80 91 68 05 	lds	r24, 0x0568
    33dc:	80 93 67 05 	sts	0x0567, r24
	
	TMRSRVC_delay(500);	//wait 0.5 seconds
    33e0:	84 ef       	ldi	r24, 0xF4	; 244
    33e2:	91 e0       	ldi	r25, 0x01	; 1
    33e4:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <TMRSRVC_delay>
}
    33e8:	df 91       	pop	r29
    33ea:	cf 91       	pop	r28
    33ec:	1f 91       	pop	r17
    33ee:	08 95       	ret

000033f0 <getGateways>:
* Output Return:	void
* Overview:		    Interpolates the list of gateways in the path by
					using the map and initial conditions 
********************************************************************/
void getGateways(void)
{
    33f0:	cf 92       	push	r12
    33f2:	df 92       	push	r13
    33f4:	ef 92       	push	r14
    33f6:	ff 92       	push	r15
    33f8:	0f 93       	push	r16
    33fa:	1f 93       	push	r17
    33fc:	df 93       	push	r29
    33fe:	cf 93       	push	r28
    3400:	0f 92       	push	r0
    3402:	cd b7       	in	r28, 0x3d	; 61
    3404:	de b7       	in	r29, 0x3e	; 62
	// Get the start location of the robot
	// unsigned char curRow = (currentCellWorld>>2) & 0b1100;
	// unsigned char curCol = currentCellWorld & 0b0011;
	
	unsigned char curRow = currentCellWorld >> 2;
    3406:	80 91 6a 06 	lds	r24, 0x066A
    340a:	f8 2e       	mov	r15, r24
    340c:	f6 94       	lsr	r15
    340e:	f6 94       	lsr	r15
	unsigned char curCol = currentCellWorld & 0b0011;
    3410:	98 2f       	mov	r25, r24
    3412:	93 70       	andi	r25, 0x03	; 3
	
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
    3414:	00 91 68 05 	lds	r16, 0x0568
    3418:	cc 24       	eor	r12, r12
    341a:	dd 24       	eor	r13, r13
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{	// Get the current move
		curMove = moveCommands[j];
    341c:	f6 01       	movw	r30, r12
    341e:	e9 5a       	subi	r30, 0xA9	; 169
    3420:	fa 4f       	sbci	r31, 0xFA	; 250
    3422:	10 81       	ld	r17, Z
		
		// Get the current cell
		curCell = ROBOT_WORLD[curRow][curCol];
    3424:	ef 2d       	mov	r30, r15
    3426:	f0 e0       	ldi	r31, 0x00	; 0
    3428:	ee 0f       	add	r30, r30
    342a:	ff 1f       	adc	r31, r31
    342c:	ee 0f       	add	r30, r30
    342e:	ff 1f       	adc	r31, r31
    3430:	e9 0f       	add	r30, r25
    3432:	f1 1d       	adc	r31, r1
    3434:	ea 5c       	subi	r30, 0xCA	; 202
    3436:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Rotate the cell with reference to the robot
		curCell = rotateCell(curCell,curOrient,1);
    3438:	80 81       	ld	r24, Z
    343a:	60 2f       	mov	r22, r16
    343c:	41 e0       	ldi	r20, 0x01	; 1
    343e:	99 83       	std	Y+1, r25	; 0x01
    3440:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		
		// Store the cell as a searchable gateway
		moveGateways[j] = curCell;
    3444:	f6 01       	movw	r30, r12
    3446:	e1 51       	subi	r30, 0x11	; 17
    3448:	f9 4f       	sbci	r31, 0xF9	; 249
    344a:	80 83       	st	Z, r24
				
		// If we are moving forward
		// move to the next cell with respect to our orientation
		if (curMove == MOVE_FORWARD){
    344c:	99 81       	ldd	r25, Y+1	; 0x01
    344e:	12 30       	cpi	r17, 0x02	; 2
    3450:	89 f4       	brne	.+34     	; 0x3474 <getGateways+0x84>
			switch(curOrient){
    3452:	01 30       	cpi	r16, 0x01	; 1
    3454:	49 f0       	breq	.+18     	; 0x3468 <getGateways+0x78>
    3456:	01 30       	cpi	r16, 0x01	; 1
    3458:	28 f0       	brcs	.+10     	; 0x3464 <getGateways+0x74>
    345a:	02 30       	cpi	r16, 0x02	; 2
    345c:	39 f0       	breq	.+14     	; 0x346c <getGateways+0x7c>
    345e:	03 30       	cpi	r16, 0x03	; 3
    3460:	89 f4       	brne	.+34     	; 0x3484 <getGateways+0x94>
    3462:	06 c0       	rjmp	.+12     	; 0x3470 <getGateways+0x80>
				case NORTH:
					curRow -= 1;
    3464:	fa 94       	dec	r15
    3466:	0e c0       	rjmp	.+28     	; 0x3484 <getGateways+0x94>
					break;
				case EAST:
					curCol += 1;
    3468:	9f 5f       	subi	r25, 0xFF	; 255
    346a:	0c c0       	rjmp	.+24     	; 0x3484 <getGateways+0x94>
					break;
				case SOUTH:
					curRow += 1;					
    346c:	f3 94       	inc	r15
    346e:	0a c0       	rjmp	.+20     	; 0x3484 <getGateways+0x94>
					break;
				case WEST:
					curCol -= 1;					
    3470:	91 50       	subi	r25, 0x01	; 1
    3472:	08 c0       	rjmp	.+16     	; 0x3484 <getGateways+0x94>
					break;
			}			
		}
		//	If we are turning right
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_RIGHT){
    3474:	13 30       	cpi	r17, 0x03	; 3
    3476:	11 f4       	brne	.+4      	; 0x347c <getGateways+0x8c>
			curOrient++;
    3478:	0f 5f       	subi	r16, 0xFF	; 255
    347a:	03 c0       	rjmp	.+6      	; 0x3482 <getGateways+0x92>
			// LCD_printf("Num:\n%i\curOrient:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curOrient));
			// TMRSRVC_delay(500);//wait 1/2 seconds
		}
		//	If we are turning left
		// then rotate our map orientation appropriately
		else if (curMove == MOVE_LEFT){
    347c:	11 30       	cpi	r17, 0x01	; 1
    347e:	11 f4       	brne	.+4      	; 0x3484 <getGateways+0x94>
			// if(curOrient == 0){
				// curOrient = 0b0011;
			// }
			curOrient--;
    3480:	01 50       	subi	r16, 0x01	; 1
			curOrient = curOrient&0b11;
    3482:	03 70       	andi	r16, 0x03	; 3
    3484:	08 94       	sec
    3486:	c1 1c       	adc	r12, r1
    3488:	d1 1c       	adc	r13, r1
	unsigned char curMove;
	
	// This is the index of the move we are looking at
	unsigned char j;
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    348a:	8d e0       	ldi	r24, 0x0D	; 13
    348c:	c8 16       	cp	r12, r24
    348e:	d1 04       	cpc	r13, r1
    3490:	29 f6       	brne	.-118    	; 0x341c <getGateways+0x2c>
    3492:	cc 24       	eor	r12, r12
    3494:	dd 24       	eor	r13, r13
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    3496:	74 e0       	ldi	r23, 0x04	; 4
    3498:	e7 2e       	mov	r14, r23
    349a:	73 e0       	ldi	r23, 0x03	; 3
    349c:	f7 2e       	mov	r15, r23
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
	{
		curCell = moveGateways[j];
    349e:	f6 01       	movw	r30, r12
    34a0:	e1 51       	subi	r30, 0x11	; 17
    34a2:	f9 4f       	sbci	r31, 0xF9	; 249
    34a4:	00 81       	ld	r16, Z
		LCD_clear();
    34a6:	0e 94 18 1c 	call	0x3830	; 0x3830 <LCD_clear>
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
    34aa:	20 2f       	mov	r18, r16
    34ac:	30 e0       	ldi	r19, 0x00	; 0
    34ae:	ad b7       	in	r26, 0x3d	; 61
    34b0:	be b7       	in	r27, 0x3e	; 62
    34b2:	54 97       	sbiw	r26, 0x14	; 20
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	be bf       	out	0x3e, r27	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	ad bf       	out	0x3d, r26	; 61
    34be:	ed b7       	in	r30, 0x3d	; 61
    34c0:	fe b7       	in	r31, 0x3e	; 62
    34c2:	31 96       	adiw	r30, 0x01	; 1
    34c4:	12 96       	adiw	r26, 0x02	; 2
    34c6:	fc 92       	st	X, r15
    34c8:	ee 92       	st	-X, r14
    34ca:	11 97       	sbiw	r26, 0x01	; 1
    34cc:	d3 82       	std	Z+3, r13	; 0x03
    34ce:	c2 82       	std	Z+2, r12	; 0x02
    34d0:	11 27       	eor	r17, r17
    34d2:	07 fd       	sbrc	r16, 7
    34d4:	10 95       	com	r17
    34d6:	00 27       	eor	r16, r16
    34d8:	11 0f       	add	r17, r17
    34da:	00 1f       	adc	r16, r16
    34dc:	11 27       	eor	r17, r17
    34de:	15 83       	std	Z+5, r17	; 0x05
    34e0:	04 83       	std	Z+4, r16	; 0x04
    34e2:	c9 01       	movw	r24, r18
    34e4:	56 e0       	ldi	r21, 0x06	; 6
    34e6:	96 95       	lsr	r25
    34e8:	87 95       	ror	r24
    34ea:	5a 95       	dec	r21
    34ec:	e1 f7       	brne	.-8      	; 0x34e6 <getGateways+0xf6>
    34ee:	81 70       	andi	r24, 0x01	; 1
    34f0:	90 70       	andi	r25, 0x00	; 0
    34f2:	97 83       	std	Z+7, r25	; 0x07
    34f4:	86 83       	std	Z+6, r24	; 0x06
    34f6:	c9 01       	movw	r24, r18
    34f8:	45 e0       	ldi	r20, 0x05	; 5
    34fa:	96 95       	lsr	r25
    34fc:	87 95       	ror	r24
    34fe:	4a 95       	dec	r20
    3500:	e1 f7       	brne	.-8      	; 0x34fa <getGateways+0x10a>
    3502:	81 70       	andi	r24, 0x01	; 1
    3504:	90 70       	andi	r25, 0x00	; 0
    3506:	91 87       	std	Z+9, r25	; 0x09
    3508:	80 87       	std	Z+8, r24	; 0x08
    350a:	c9 01       	movw	r24, r18
    350c:	04 e0       	ldi	r16, 0x04	; 4
    350e:	96 95       	lsr	r25
    3510:	87 95       	ror	r24
    3512:	0a 95       	dec	r16
    3514:	e1 f7       	brne	.-8      	; 0x350e <getGateways+0x11e>
    3516:	81 70       	andi	r24, 0x01	; 1
    3518:	90 70       	andi	r25, 0x00	; 0
    351a:	93 87       	std	Z+11, r25	; 0x0b
    351c:	82 87       	std	Z+10, r24	; 0x0a
    351e:	c9 01       	movw	r24, r18
    3520:	13 e0       	ldi	r17, 0x03	; 3
    3522:	96 95       	lsr	r25
    3524:	87 95       	ror	r24
    3526:	1a 95       	dec	r17
    3528:	e1 f7       	brne	.-8      	; 0x3522 <getGateways+0x132>
    352a:	81 70       	andi	r24, 0x01	; 1
    352c:	90 70       	andi	r25, 0x00	; 0
    352e:	95 87       	std	Z+13, r25	; 0x0d
    3530:	84 87       	std	Z+12, r24	; 0x0c
    3532:	c9 01       	movw	r24, r18
    3534:	96 95       	lsr	r25
    3536:	87 95       	ror	r24
    3538:	96 95       	lsr	r25
    353a:	87 95       	ror	r24
    353c:	81 70       	andi	r24, 0x01	; 1
    353e:	90 70       	andi	r25, 0x00	; 0
    3540:	97 87       	std	Z+15, r25	; 0x0f
    3542:	86 87       	std	Z+14, r24	; 0x0e
    3544:	c9 01       	movw	r24, r18
    3546:	96 95       	lsr	r25
    3548:	87 95       	ror	r24
    354a:	81 70       	andi	r24, 0x01	; 1
    354c:	90 70       	andi	r25, 0x00	; 0
    354e:	91 8b       	std	Z+17, r25	; 0x11
    3550:	80 8b       	std	Z+16, r24	; 0x10
    3552:	21 70       	andi	r18, 0x01	; 1
    3554:	30 70       	andi	r19, 0x00	; 0
    3556:	33 8b       	std	Z+19, r19	; 0x13
    3558:	22 8b       	std	Z+18, r18	; 0x12
    355a:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
		TMRSRVC_delay(1000);//wait 1 second
    355e:	ed b7       	in	r30, 0x3d	; 61
    3560:	fe b7       	in	r31, 0x3e	; 62
    3562:	74 96       	adiw	r30, 0x14	; 20
    3564:	0f b6       	in	r0, 0x3f	; 63
    3566:	f8 94       	cli
    3568:	fe bf       	out	0x3e, r31	; 62
    356a:	0f be       	out	0x3f, r0	; 63
    356c:	ed bf       	out	0x3d, r30	; 61
    356e:	88 ee       	ldi	r24, 0xE8	; 232
    3570:	93 e0       	ldi	r25, 0x03	; 3
    3572:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <TMRSRVC_delay>
    3576:	08 94       	sec
    3578:	c1 1c       	adc	r12, r1
    357a:	d1 1c       	adc	r13, r1
			curOrient--;
			curOrient = curOrient&0b11;
		}			
	}
	
	for (j = 0; j<=MAX_MOVE_SIZE; j++)
    357c:	fd e0       	ldi	r31, 0x0D	; 13
    357e:	cf 16       	cp	r12, r31
    3580:	d1 04       	cpc	r13, r1
    3582:	09 f0       	breq	.+2      	; 0x3586 <getGateways+0x196>
    3584:	8c cf       	rjmp	.-232    	; 0x349e <getGateways+0xae>
		curCell = moveGateways[j];
		LCD_clear();
		LCD_printf("Num:\n%i\nCurCell:\n"BYTETOBINARYPATTERN,j,BYTETOBINARY(curCell));
		TMRSRVC_delay(1000);//wait 1 second
	}
}
    3586:	0f 90       	pop	r0
    3588:	cf 91       	pop	r28
    358a:	df 91       	pop	r29
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
    3590:	ff 90       	pop	r15
    3592:	ef 90       	pop	r14
    3594:	df 90       	pop	r13
    3596:	cf 90       	pop	r12
    3598:	08 95       	ret

0000359a <setGateways>:
* Output Return:	void
* Overview:		    Interpolates the map using the current 
*					orientation and reading
********************************************************************/
void setGateways(void)
{
    359a:	1f 93       	push	r17
	// This will be the gatway the robot will look for
	unsigned char curCell = currentGateway;
		
	// Get the start location of the robot
	unsigned char curRow = currentCellWorld >> 2;
    359c:	10 91 6a 06 	lds	r17, 0x066A
		
	// Git the start orientation of the robot
	unsigned char curOrient = currentOrientation;
		
	// Rotate the cell with reference to the robot
	curCell = rotateCell(curCell,curOrient,0);
    35a0:	80 91 d3 04 	lds	r24, 0x04D3
    35a4:	60 91 68 05 	lds	r22, 0x0568
    35a8:	40 e0       	ldi	r20, 0x00	; 0
    35aa:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
	
	// Set the current cell
	ROBOT_WORLD[curRow][curCol] = curCell;
    35ae:	e1 2f       	mov	r30, r17
    35b0:	e6 95       	lsr	r30
    35b2:	e6 95       	lsr	r30
    35b4:	f0 e0       	ldi	r31, 0x00	; 0
    35b6:	ee 0f       	add	r30, r30
    35b8:	ff 1f       	adc	r31, r31
    35ba:	ee 0f       	add	r30, r30
    35bc:	ff 1f       	adc	r31, r31
    35be:	13 70       	andi	r17, 0x03	; 3
    35c0:	e1 0f       	add	r30, r17
    35c2:	f1 1d       	adc	r31, r1
    35c4:	ea 5c       	subi	r30, 0xCA	; 202
    35c6:	fc 4f       	sbci	r31, 0xFC	; 252
    35c8:	80 83       	st	Z, r24
}
    35ca:	1f 91       	pop	r17
    35cc:	08 95       	ret

000035ce <matchBranch>:
* Output Return:	unsigned char *, unsigned char, unsigned char
* Overview:		    Check to see if the branch is valid
*					given the map and starting seed
********************************************************************/
char matchBranch( unsigned char *ptROBOT_WORLD, unsigned char row, unsigned char col)
{	
    35ce:	df 92       	push	r13
    35d0:	ef 92       	push	r14
    35d2:	ff 92       	push	r15
    35d4:	0f 93       	push	r16
    35d6:	1f 93       	push	r17
    35d8:	06 2f       	mov	r16, r22
    35da:	14 2f       	mov	r17, r20
    35dc:	ff 24       	eor	r15, r15
    35de:	2e c0       	rjmp	.+92     	; 0x363c <matchBranch+0x6e>
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
	
		// Check to see if we are still inside the map
		// If we went outside, then return failure
		if((curRow>WORLD_ROW_SIZE)||(curCol>WORLD_COLUMN_SIZE)){
    35e0:	05 30       	cpi	r16, 0x05	; 5
    35e2:	90 f5       	brcc	.+100    	; 0x3648 <matchBranch+0x7a>
    35e4:	15 30       	cpi	r17, 0x05	; 5
    35e6:	80 f5       	brcc	.+96     	; 0x3648 <matchBranch+0x7a>
			return FAIL;
		}
	
		// Get current branch
		branch = localizeGateways[0][i];
    35e8:	ef 2d       	mov	r30, r15
    35ea:	f0 e0       	ldi	r31, 0x00	; 0
    35ec:	ee 54       	subi	r30, 0x4E	; 78
    35ee:	fc 4f       	sbci	r31, 0xFC	; 252
		
		// Get the current move 
		curMove = localizeGateways[1][i];
    35f0:	d5 80       	ldd	r13, Z+5	; 0x05
		
		// Get the current orientation 
		curOrnt = localizeGateways[2][i];
    35f2:	e2 84       	ldd	r14, Z+10	; 0x0a
		
		// Rotate the branch to reflect the map
		branch = rotateCell (branch, curOrnt, TO_MAP_ROTATE);
    35f4:	80 81       	ld	r24, Z
    35f6:	6e 2d       	mov	r22, r14
    35f8:	40 e0       	ldi	r20, 0x00	; 0
    35fa:	0e 94 00 08 	call	0x1000	; 0x1000 <rotateCell>
		// gateway = *(ptROBOT_WORLD+curRow*WORLD_ROW_SIZE+curCol);
		gateway = ROBOT_WORLD[curRow][curCol];
		
		// If the matching pattern is broken
		// stop matching and return failure
		if(branch != gateway){
    35fe:	e0 2f       	mov	r30, r16
    3600:	f0 e0       	ldi	r31, 0x00	; 0
    3602:	ee 0f       	add	r30, r30
    3604:	ff 1f       	adc	r31, r31
    3606:	ee 0f       	add	r30, r30
    3608:	ff 1f       	adc	r31, r31
    360a:	e1 0f       	add	r30, r17
    360c:	f1 1d       	adc	r31, r1
    360e:	ea 5c       	subi	r30, 0xCA	; 202
    3610:	fc 4f       	sbci	r31, 0xFC	; 252
    3612:	90 81       	ld	r25, Z
    3614:	89 17       	cp	r24, r25
    3616:	c1 f4       	brne	.+48     	; 0x3648 <matchBranch+0x7a>
			return FAIL;
		}
		
		// Set the new cell of the next branch
		currentCellWorld = (curRow << 2) + curCol;
    3618:	80 2f       	mov	r24, r16
    361a:	88 0f       	add	r24, r24
    361c:	88 0f       	add	r24, r24
    361e:	81 0f       	add	r24, r17
    3620:	80 93 6a 06 	sts	0x066A, r24
		// If this is the last branch
		// dont move the cell
		// so we are left with our locilized position 
		// if((i == (currentBranch-2))&&){
		// Prep for the gateway by moving with the next branch
		currentCellWorld = shiftMap(currentCellWorld, curMove, curOrnt);
    3624:	6d 2d       	mov	r22, r13
    3626:	4e 2d       	mov	r20, r14
    3628:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <shiftMap>
    362c:	80 93 6a 06 	sts	0x066A, r24
		// }
				
		// Get the currrent cell of the branch
		curRow = currentCellWorld >> 2;
    3630:	08 2f       	mov	r16, r24
    3632:	06 95       	lsr	r16
    3634:	06 95       	lsr	r16
		curCol = currentCellWorld & 0b0011;
    3636:	18 2f       	mov	r17, r24
    3638:	13 70       	andi	r17, 0x03	; 3
	unsigned char curRow = row;
	unsigned char curCol = col;
	
	
	// Then check for a matching brache
	for(i = 0; i < currentBranch; i++){
    363a:	f3 94       	inc	r15
    363c:	80 91 c1 03 	lds	r24, 0x03C1
    3640:	f8 16       	cp	r15, r24
    3642:	70 f2       	brcs	.-100    	; 0x35e0 <matchBranch+0x12>
    3644:	81 e0       	ldi	r24, 0x01	; 1
    3646:	01 c0       	rjmp	.+2      	; 0x364a <matchBranch+0x7c>
    3648:	80 e0       	ldi	r24, 0x00	; 0
		curCol = currentCellWorld & 0b0011;
	}
	// If we make it through all the branches
	// then return success
	return SUCCESS;
}
    364a:	1f 91       	pop	r17
    364c:	0f 91       	pop	r16
    364e:	ff 90       	pop	r15
    3650:	ef 90       	pop	r14
    3652:	df 90       	pop	r13
    3654:	08 95       	ret

00003656 <localizeGateway>:
* Input Variables:	char
* Output Return:	void
* Overview:		    use the localizeGateways tree to localize robot
********************************************************************/
char localizeGateway( void )
{	
    3656:	df 92       	push	r13
    3658:	ef 92       	push	r14
    365a:	ff 92       	push	r15
    365c:	0f 93       	push	r16
    365e:	1f 93       	push	r17
    3660:	cf 93       	push	r28
    3662:	df 93       	push	r29
	// Get the root seed from the tree
	unsigned char localizeSeed = localizeGateways[0][0];
    3664:	d0 90 b2 03 	lds	r13, 0x03B2
	// Local variables for nested for loops 
	unsigned char row, col;
	// Stores the number of matching seeds
	matchSeeds = 0;
    3668:	10 92 06 07 	sts	0x0706, r1
    366c:	00 e0       	ldi	r16, 0x00	; 0
    366e:	10 e0       	ldi	r17, 0x00	; 0
    3670:	1a c0       	rjmp	.+52     	; 0x36a6 <localizeGateway+0x50>
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
		
			// Check to see if we have a matching seed
			// if(0b1101 == ROBOT_WORLD[row][col]){
			if(localizeSeed == ROBOT_WORLD[row][col]){
    3672:	88 81       	ld	r24, Y
    3674:	d8 16       	cp	r13, r24
    3676:	69 f4       	brne	.+26     	; 0x3692 <localizeGateway+0x3c>
			
				//Check to see if we have a matching branch
				if(matchBranch(*ROBOT_WORLD,row,col)){
    3678:	86 e3       	ldi	r24, 0x36	; 54
    367a:	93 e0       	ldi	r25, 0x03	; 3
    367c:	6e 2d       	mov	r22, r14
    367e:	4f 2d       	mov	r20, r15
    3680:	0e 94 e7 1a 	call	0x35ce	; 0x35ce <matchBranch>
    3684:	88 23       	and	r24, r24
    3686:	29 f0       	breq	.+10     	; 0x3692 <localizeGateway+0x3c>
					// matchRow = row;
					// matchCol = col;
					matchSeeds++;
    3688:	80 91 06 07 	lds	r24, 0x0706
    368c:	8f 5f       	subi	r24, 0xFF	; 255
    368e:	80 93 06 07 	sts	0x0706, r24
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
	
		// And For ever column in the map
		for(col = 0; col < WORLD_COLUMN_SIZE; col++){
    3692:	f3 94       	inc	r15
    3694:	21 96       	adiw	r28, 0x01	; 1
    3696:	84 e0       	ldi	r24, 0x04	; 4
    3698:	f8 16       	cp	r15, r24
    369a:	59 f7       	brne	.-42     	; 0x3672 <localizeGateway+0x1c>
    369c:	0f 5f       	subi	r16, 0xFF	; 255
    369e:	1f 4f       	sbci	r17, 0xFF	; 255
	// // Stores the last matching seed index
	// unsigned char matchRow, matchCol;
	
	// Find seeds and check for matching braches
	// For ever row in the map
	for(row = 0; row < WORLD_ROW_SIZE; row++){
    36a0:	04 30       	cpi	r16, 0x04	; 4
    36a2:	11 05       	cpc	r17, r1
    36a4:	51 f0       	breq	.+20     	; 0x36ba <localizeGateway+0x64>
    36a6:	e0 2e       	mov	r14, r16
    36a8:	e8 01       	movw	r28, r16
    36aa:	cc 0f       	add	r28, r28
    36ac:	dd 1f       	adc	r29, r29
    36ae:	cc 0f       	add	r28, r28
    36b0:	dd 1f       	adc	r29, r29
    36b2:	ca 5c       	subi	r28, 0xCA	; 202
    36b4:	dc 4f       	sbci	r29, 0xFC	; 252
    36b6:	ff 24       	eor	r15, r15
    36b8:	dc cf       	rjmp	.-72     	; 0x3672 <localizeGateway+0x1c>
    36ba:	90 e0       	ldi	r25, 0x00	; 0
    36bc:	80 91 06 07 	lds	r24, 0x0706
    36c0:	81 30       	cpi	r24, 0x01	; 1
    36c2:	09 f0       	breq	.+2      	; 0x36c6 <localizeGateway+0x70>
    36c4:	91 e0       	ldi	r25, 0x01	; 1
		return 0;
	}
	
	// return failure
	return 1;
}
    36c6:	89 2f       	mov	r24, r25
    36c8:	df 91       	pop	r29
    36ca:	cf 91       	pop	r28
    36cc:	1f 91       	pop	r17
    36ce:	0f 91       	pop	r16
    36d0:	ff 90       	pop	r15
    36d2:	ef 90       	pop	r14
    36d4:	df 90       	pop	r13
    36d6:	08 95       	ret

000036d8 <CBOT_main>:
********************************************************************/

void CBOT_main( void )
{
	// initialize the robot
	initializeRobot();
    36d8:	0e 94 23 10 	call	0x2046	; 0x2046 <initializeRobot>
	// printMap(RESET);
	// TMRSRVC_delay(10000);//wait 10 seconds
	// LCD_clear();
	
	
	currentCellWorld = 0b0000;
    36dc:	10 92 6a 06 	sts	0x066A, r1
	currentGoalWorld = 0b1111;
    36e0:	8f e0       	ldi	r24, 0x0F	; 15
    36e2:	80 93 d9 04 	sts	0x04D9, r24
	
	// Make metric map
	wavefrontMake();
    36e6:	0e 94 ca 11 	call	0x2394	; 0x2394 <wavefrontMake>
    36ea:	16 c0       	rjmp	.+44     	; 0x3718 <CBOT_main+0x40>
	
	while(!isGoal){
	
		// Find the next orentation
		isGoal = fourNeighborSearch(currentCellWorld);
    36ec:	80 91 6a 06 	lds	r24, 0x066A
    36f0:	0e 94 6d 10 	call	0x20da	; 0x20da <fourNeighborSearch>
    36f4:	80 93 05 07 	sts	0x0705, r24
		if(isGoal){
    36f8:	88 23       	and	r24, r24
    36fa:	91 f4       	brne	.+36     	; 0x3720 <CBOT_main+0x48>
			break;
		}
		
		// Plan using metric map and next orientation
		planMetric();
    36fc:	0e 94 75 17 	call	0x2eea	; 0x2eea <planMetric>
		
		// Act on the move
		moveMap();
    3700:	0e 94 ba 16 	call	0x2d74	; 0x2d74 <moveMap>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
    3704:	80 91 6a 06 	lds	r24, 0x066A
    3708:	60 91 03 07 	lds	r22, 0x0703
    370c:	40 91 68 05 	lds	r20, 0x0568
    3710:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <shiftMap>
    3714:	80 93 6a 06 	sts	0x066A, r24
	currentGoalWorld = 0b1111;
	
	// Make metric map
	wavefrontMake();
	
	while(!isGoal){
    3718:	80 91 05 07 	lds	r24, 0x0705
    371c:	88 23       	and	r24, r24
    371e:	31 f3       	breq	.-52     	; 0x36ec <CBOT_main+0x14>
		
		// Shift the map
		currentCellWorld = shiftMap(currentCellWorld, currentMove, currentOrientation);
	}
	
	LCD_clear();
    3720:	0e 94 18 1c 	call	0x3830	; 0x3830 <LCD_clear>
	LCD_printf("LOLZ\nI'm here!");
    3724:	00 d0       	rcall	.+0      	; 0x3726 <CBOT_main+0x4e>
    3726:	86 e2       	ldi	r24, 0x26	; 38
    3728:	93 e0       	ldi	r25, 0x03	; 3
    372a:	ed b7       	in	r30, 0x3d	; 61
    372c:	fe b7       	in	r31, 0x3e	; 62
    372e:	92 83       	std	Z+2, r25	; 0x02
    3730:	81 83       	std	Z+1, r24	; 0x01
    3732:	0e 94 88 38 	call	0x7110	; 0x7110 <printf>
	TMRSRVC_delay(5000);//wait 3 seconds
    3736:	0f 90       	pop	r0
    3738:	0f 90       	pop	r0
    373a:	88 e8       	ldi	r24, 0x88	; 136
    373c:	93 e1       	ldi	r25, 0x13	; 19
    373e:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <TMRSRVC_delay>
		// LCD_clear();
		// LCD_printf("FrontIR = %3.2f\nBackIR = %3.2f\nLeftIR = %3.2f\nRightIR = %3.2f\n", ftIR,bkIR,ltIR,rtIR);
		// TMRSRVC_delay(1000);//wait 1 seconds
    }
	**/
}// end the CBOT_main()
    3742:	08 95       	ret

00003744 <ADC_open>:
    3744:	8f e0       	ldi	r24, 0x0F	; 15
    3746:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    374a:	88 23       	and	r24, r24
    374c:	31 f4       	brne	.+12     	; 0x375a <ADC_open+0x16>
    374e:	0e 94 25 24 	call	0x484a	; 0x484a <__ADC_init>
    3752:	8f e0       	ldi	r24, 0x0F	; 15
    3754:	61 e0       	ldi	r22, 0x01	; 1
    3756:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    375a:	8f e0       	ldi	r24, 0x0F	; 15
    375c:	91 e0       	ldi	r25, 0x01	; 1
    375e:	08 95       	ret

00003760 <ADC_sample>:
    3760:	8f e0       	ldi	r24, 0x0F	; 15
    3762:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    3766:	81 30       	cpi	r24, 0x01	; 1
    3768:	19 f0       	breq	.+6      	; 0x3770 <ADC_sample+0x10>
    376a:	20 e0       	ldi	r18, 0x00	; 0
    376c:	30 e0       	ldi	r19, 0x00	; 0
    376e:	13 c0       	rjmp	.+38     	; 0x3796 <ADC_sample+0x36>
    3770:	80 91 7a 00 	lds	r24, 0x007A
    3774:	80 64       	ori	r24, 0x40	; 64
    3776:	80 93 7a 00 	sts	0x007A, r24
    377a:	80 91 7a 00 	lds	r24, 0x007A
    377e:	86 fd       	sbrc	r24, 6
    3780:	fc cf       	rjmp	.-8      	; 0x377a <ADC_sample+0x1a>
    3782:	30 91 78 00 	lds	r19, 0x0078
    3786:	20 91 79 00 	lds	r18, 0x0079
    378a:	92 2f       	mov	r25, r18
    378c:	80 e0       	ldi	r24, 0x00	; 0
    378e:	23 2f       	mov	r18, r19
    3790:	30 e0       	ldi	r19, 0x00	; 0
    3792:	28 2b       	or	r18, r24
    3794:	39 2b       	or	r19, r25
    3796:	c9 01       	movw	r24, r18
    3798:	08 95       	ret

0000379a <ADC_set_channel>:
    379a:	58 2f       	mov	r21, r24
    379c:	80 91 56 03 	lds	r24, 0x0356
    37a0:	88 30       	cpi	r24, 0x08	; 8
    37a2:	d8 f4       	brcc	.+54     	; 0x37da <ADC_set_channel+0x40>
    37a4:	40 91 7e 00 	lds	r20, 0x007E
    37a8:	21 e0       	ldi	r18, 0x01	; 1
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	b9 01       	movw	r22, r18
    37ae:	02 c0       	rjmp	.+4      	; 0x37b4 <ADC_set_channel+0x1a>
    37b0:	66 0f       	add	r22, r22
    37b2:	77 1f       	adc	r23, r23
    37b4:	8a 95       	dec	r24
    37b6:	e2 f7       	brpl	.-8      	; 0x37b0 <ADC_set_channel+0x16>
    37b8:	cb 01       	movw	r24, r22
    37ba:	80 95       	com	r24
    37bc:	84 23       	and	r24, r20
    37be:	80 93 7e 00 	sts	0x007E, r24
    37c2:	80 91 7e 00 	lds	r24, 0x007E
    37c6:	05 2e       	mov	r0, r21
    37c8:	02 c0       	rjmp	.+4      	; 0x37ce <ADC_set_channel+0x34>
    37ca:	22 0f       	add	r18, r18
    37cc:	33 1f       	adc	r19, r19
    37ce:	0a 94       	dec	r0
    37d0:	e2 f7       	brpl	.-8      	; 0x37ca <ADC_set_channel+0x30>
    37d2:	82 2b       	or	r24, r18
    37d4:	80 93 7e 00 	sts	0x007E, r24
    37d8:	0d c0       	rjmp	.+26     	; 0x37f4 <ADC_set_channel+0x5a>
    37da:	20 91 7e 00 	lds	r18, 0x007E
    37de:	81 e0       	ldi	r24, 0x01	; 1
    37e0:	90 e0       	ldi	r25, 0x00	; 0
    37e2:	05 2e       	mov	r0, r21
    37e4:	02 c0       	rjmp	.+4      	; 0x37ea <ADC_set_channel+0x50>
    37e6:	88 0f       	add	r24, r24
    37e8:	99 1f       	adc	r25, r25
    37ea:	0a 94       	dec	r0
    37ec:	e2 f7       	brpl	.-8      	; 0x37e6 <ADC_set_channel+0x4c>
    37ee:	28 2b       	or	r18, r24
    37f0:	20 93 7e 00 	sts	0x007E, r18
    37f4:	50 93 56 03 	sts	0x0356, r21
    37f8:	80 91 7c 00 	lds	r24, 0x007C
    37fc:	5f 71       	andi	r21, 0x1F	; 31
    37fe:	80 7e       	andi	r24, 0xE0	; 224
    3800:	85 2b       	or	r24, r21
    3802:	80 93 7c 00 	sts	0x007C, r24
    3806:	08 95       	ret

00003808 <ADC_set_VREF>:
    3808:	ec e7       	ldi	r30, 0x7C	; 124
    380a:	f0 e0       	ldi	r31, 0x00	; 0
    380c:	90 81       	ld	r25, Z
    380e:	82 95       	swap	r24
    3810:	88 0f       	add	r24, r24
    3812:	88 0f       	add	r24, r24
    3814:	80 7c       	andi	r24, 0xC0	; 192
    3816:	9f 73       	andi	r25, 0x3F	; 63
    3818:	98 2b       	or	r25, r24
    381a:	90 83       	st	Z, r25
    381c:	08 95       	ret

0000381e <main>:
    381e:	0e 94 3e 24 	call	0x487c	; 0x487c <CBOT_ISR_init>
    3822:	0e 94 30 24 	call	0x4860	; 0x4860 <CBOT_init>
    3826:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <CBOT_main>
    382a:	80 e0       	ldi	r24, 0x00	; 0
    382c:	90 e0       	ldi	r25, 0x00	; 0
    382e:	08 95       	ret

00003830 <LCD_clear>:
    3830:	0f 93       	push	r16
    3832:	1f 93       	push	r17
    3834:	80 e4       	ldi	r24, 0x40	; 64
    3836:	60 e0       	ldi	r22, 0x00	; 0
    3838:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    383c:	00 e0       	ldi	r16, 0x00	; 0
    383e:	80 2f       	mov	r24, r16
    3840:	60 e0       	ldi	r22, 0x00	; 0
    3842:	0e 94 de 1c 	call	0x39bc	; 0x39bc <LCD_set_PGC_addr>
    3846:	10 e0       	ldi	r17, 0x00	; 0
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	61 e0       	ldi	r22, 0x01	; 1
    384c:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    3850:	1f 5f       	subi	r17, 0xFF	; 255
    3852:	10 38       	cpi	r17, 0x80	; 128
    3854:	c9 f7       	brne	.-14     	; 0x3848 <LCD_clear+0x18>
    3856:	0f 5f       	subi	r16, 0xFF	; 255
    3858:	04 30       	cpi	r16, 0x04	; 4
    385a:	89 f7       	brne	.-30     	; 0x383e <LCD_clear+0xe>
    385c:	83 e0       	ldi	r24, 0x03	; 3
    385e:	60 e0       	ldi	r22, 0x00	; 0
    3860:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <LCD_set_next_PGC>
    3864:	1f 91       	pop	r17
    3866:	0f 91       	pop	r16
    3868:	08 95       	ret

0000386a <LCD_open>:
    386a:	0f 93       	push	r16
    386c:	1f 93       	push	r17
    386e:	82 e0       	ldi	r24, 0x02	; 2
    3870:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    3874:	88 23       	and	r24, r24
    3876:	11 f4       	brne	.+4      	; 0x387c <LCD_open+0x12>
    3878:	82 e0       	ldi	r24, 0x02	; 2
    387a:	06 c0       	rjmp	.+12     	; 0x3888 <LCD_open+0x1e>
    387c:	81 e0       	ldi	r24, 0x01	; 1
    387e:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    3882:	88 23       	and	r24, r24
    3884:	19 f4       	brne	.+6      	; 0x388c <LCD_open+0x22>
    3886:	81 e0       	ldi	r24, 0x01	; 1
    3888:	90 e0       	ldi	r25, 0x00	; 0
    388a:	6d c0       	rjmp	.+218    	; 0x3966 <LCD_open+0xfc>
    388c:	0e 94 a6 26 	call	0x4d4c	; 0x4d4c <__LCD_init>
    3890:	85 e0       	ldi	r24, 0x05	; 5
    3892:	61 e0       	ldi	r22, 0x01	; 1
    3894:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    3898:	8e ea       	ldi	r24, 0xAE	; 174
    389a:	60 e0       	ldi	r22, 0x00	; 0
    389c:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    38a0:	82 ea       	ldi	r24, 0xA2	; 162
    38a2:	60 e0       	ldi	r22, 0x00	; 0
    38a4:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    38a8:	80 ea       	ldi	r24, 0xA0	; 160
    38aa:	60 e0       	ldi	r22, 0x00	; 0
    38ac:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    38b0:	00 e5       	ldi	r16, 0x50	; 80
    38b2:	13 ec       	ldi	r17, 0xC3	; 195
    38b4:	c8 01       	movw	r24, r16
    38b6:	01 97       	sbiw	r24, 0x01	; 1
    38b8:	f1 f7       	brne	.-4      	; 0x38b6 <LCD_open+0x4c>
    38ba:	80 ec       	ldi	r24, 0xC0	; 192
    38bc:	60 e0       	ldi	r22, 0x00	; 0
    38be:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    38c2:	8f e2       	ldi	r24, 0x2F	; 47
    38c4:	60 e0       	ldi	r22, 0x00	; 0
    38c6:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    38ca:	81 e8       	ldi	r24, 0x81	; 129
    38cc:	60 e0       	ldi	r22, 0x00	; 0
    38ce:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    38d2:	86 e1       	ldi	r24, 0x16	; 22
    38d4:	60 e0       	ldi	r22, 0x00	; 0
    38d6:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    38da:	82 e2       	ldi	r24, 0x22	; 34
    38dc:	60 e0       	ldi	r22, 0x00	; 0
    38de:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    38e2:	c8 01       	movw	r24, r16
    38e4:	01 97       	sbiw	r24, 0x01	; 1
    38e6:	f1 f7       	brne	.-4      	; 0x38e4 <LCD_open+0x7a>
    38e8:	8f ea       	ldi	r24, 0xAF	; 175
    38ea:	60 e0       	ldi	r22, 0x00	; 0
    38ec:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    38f0:	86 ea       	ldi	r24, 0xA6	; 166
    38f2:	60 e0       	ldi	r22, 0x00	; 0
    38f4:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    38f8:	85 ea       	ldi	r24, 0xA5	; 165
    38fa:	60 e0       	ldi	r22, 0x00	; 0
    38fc:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    3900:	80 e0       	ldi	r24, 0x00	; 0
    3902:	90 e0       	ldi	r25, 0x00	; 0
    3904:	28 e8       	ldi	r18, 0x88	; 136
    3906:	33 e1       	ldi	r19, 0x13	; 19
    3908:	f9 01       	movw	r30, r18
    390a:	31 97       	sbiw	r30, 0x01	; 1
    390c:	f1 f7       	brne	.-4      	; 0x390a <LCD_open+0xa0>
    390e:	01 96       	adiw	r24, 0x01	; 1
    3910:	43 e0       	ldi	r20, 0x03	; 3
    3912:	88 3e       	cpi	r24, 0xE8	; 232
    3914:	94 07       	cpc	r25, r20
    3916:	c1 f7       	brne	.-16     	; 0x3908 <LCD_open+0x9e>
    3918:	83 eb       	ldi	r24, 0xB3	; 179
    391a:	60 e0       	ldi	r22, 0x00	; 0
    391c:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    3920:	80 e4       	ldi	r24, 0x40	; 64
    3922:	60 e0       	ldi	r22, 0x00	; 0
    3924:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    3928:	83 e0       	ldi	r24, 0x03	; 3
    392a:	60 e0       	ldi	r22, 0x00	; 0
    392c:	0e 94 de 1c 	call	0x39bc	; 0x39bc <LCD_set_PGC_addr>
    3930:	83 e0       	ldi	r24, 0x03	; 3
    3932:	60 e0       	ldi	r22, 0x00	; 0
    3934:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <LCD_set_next_PGC>
    3938:	10 92 56 07 	sts	0x0756, r1
    393c:	10 92 58 07 	sts	0x0758, r1
    3940:	10 92 57 07 	sts	0x0757, r1
    3944:	85 e6       	ldi	r24, 0x65	; 101
    3946:	93 e0       	ldi	r25, 0x03	; 3
    3948:	90 93 87 07 	sts	0x0787, r25
    394c:	80 93 86 07 	sts	0x0786, r24
    3950:	88 e1       	ldi	r24, 0x18	; 24
    3952:	0e 94 b6 1c 	call	0x396c	; 0x396c <LCD_set_backlight>
    3956:	0e 94 18 1c 	call	0x3830	; 0x3830 <LCD_clear>
    395a:	84 ea       	ldi	r24, 0xA4	; 164
    395c:	60 e0       	ldi	r22, 0x00	; 0
    395e:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    3962:	85 e0       	ldi	r24, 0x05	; 5
    3964:	91 e0       	ldi	r25, 0x01	; 1
    3966:	1f 91       	pop	r17
    3968:	0f 91       	pop	r16
    396a:	08 95       	ret

0000396c <LCD_set_backlight>:
    396c:	1f 93       	push	r17
    396e:	18 2f       	mov	r17, r24
    3970:	85 e0       	ldi	r24, 0x05	; 5
    3972:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    3976:	81 30       	cpi	r24, 0x01	; 1
    3978:	c1 f4       	brne	.+48     	; 0x39aa <LCD_set_backlight+0x3e>
    397a:	87 e0       	ldi	r24, 0x07	; 7
    397c:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <SPI_set_slave_addr>
    3980:	82 e0       	ldi	r24, 0x02	; 2
    3982:	6a e0       	ldi	r22, 0x0A	; 10
    3984:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <SPI_transmit>
    3988:	82 e0       	ldi	r24, 0x02	; 2
    398a:	61 eb       	ldi	r22, 0xB1	; 177
    398c:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <SPI_transmit>
    3990:	61 2f       	mov	r22, r17
    3992:	11 32       	cpi	r17, 0x21	; 33
    3994:	08 f0       	brcs	.+2      	; 0x3998 <LCD_set_backlight+0x2c>
    3996:	60 e2       	ldi	r22, 0x20	; 32
    3998:	82 e0       	ldi	r24, 0x02	; 2
    399a:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <SPI_transmit>
    399e:	89 ee       	ldi	r24, 0xE9	; 233
    39a0:	8a 95       	dec	r24
    39a2:	f1 f7       	brne	.-4      	; 0x39a0 <LCD_set_backlight+0x34>
    39a4:	87 e0       	ldi	r24, 0x07	; 7
    39a6:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <SPI_set_slave_addr>
    39aa:	1f 91       	pop	r17
    39ac:	08 95       	ret

000039ae <LCD_set_next_PGC>:
    39ae:	83 70       	andi	r24, 0x03	; 3
    39b0:	6f 77       	andi	r22, 0x7F	; 127
    39b2:	60 93 54 07 	sts	0x0754, r22
    39b6:	80 93 55 07 	sts	0x0755, r24
    39ba:	08 95       	ret

000039bc <LCD_set_PGC_addr>:
    39bc:	0f 93       	push	r16
    39be:	1f 93       	push	r17
    39c0:	06 2f       	mov	r16, r22
    39c2:	16 2f       	mov	r17, r22
    39c4:	1f 77       	andi	r17, 0x7F	; 127
    39c6:	83 70       	andi	r24, 0x03	; 3
    39c8:	80 6b       	ori	r24, 0xB0	; 176
    39ca:	60 e0       	ldi	r22, 0x00	; 0
    39cc:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    39d0:	12 95       	swap	r17
    39d2:	1f 70       	andi	r17, 0x0F	; 15
    39d4:	81 2f       	mov	r24, r17
    39d6:	80 61       	ori	r24, 0x10	; 16
    39d8:	60 e0       	ldi	r22, 0x00	; 0
    39da:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    39de:	80 2f       	mov	r24, r16
    39e0:	8f 70       	andi	r24, 0x0F	; 15
    39e2:	60 e0       	ldi	r22, 0x00	; 0
    39e4:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    39e8:	1f 91       	pop	r17
    39ea:	0f 91       	pop	r16
    39ec:	08 95       	ret

000039ee <LCD_write>:
    39ee:	0f 93       	push	r16
    39f0:	1f 93       	push	r17
    39f2:	08 2f       	mov	r16, r24
    39f4:	16 2f       	mov	r17, r22
    39f6:	85 e0       	ldi	r24, 0x05	; 5
    39f8:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    39fc:	81 30       	cpi	r24, 0x01	; 1
    39fe:	79 f4       	brne	.+30     	; 0x3a1e <LCD_write+0x30>
    3a00:	11 23       	and	r17, r17
    3a02:	19 f0       	breq	.+6      	; 0x3a0a <LCD_write+0x1c>
    3a04:	11 30       	cpi	r17, 0x01	; 1
    3a06:	21 f4       	brne	.+8      	; 0x3a10 <LCD_write+0x22>
    3a08:	02 c0       	rjmp	.+4      	; 0x3a0e <LCD_write+0x20>
    3a0a:	2b 98       	cbi	0x05, 3	; 5
    3a0c:	01 c0       	rjmp	.+2      	; 0x3a10 <LCD_write+0x22>
    3a0e:	2b 9a       	sbi	0x05, 3	; 5
    3a10:	86 e0       	ldi	r24, 0x06	; 6
    3a12:	8a 95       	dec	r24
    3a14:	f1 f7       	brne	.-4      	; 0x3a12 <LCD_write+0x24>
    3a16:	80 e0       	ldi	r24, 0x00	; 0
    3a18:	60 2f       	mov	r22, r16
    3a1a:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <SPI_transmit>
    3a1e:	1f 91       	pop	r17
    3a20:	0f 91       	pop	r16
    3a22:	08 95       	ret

00003a24 <LED_clr_pattern>:
    3a24:	1f 93       	push	r17
    3a26:	18 2f       	mov	r17, r24
    3a28:	86 e0       	ldi	r24, 0x06	; 6
    3a2a:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    3a2e:	81 30       	cpi	r24, 0x01	; 1
    3a30:	19 f4       	brne	.+6      	; 0x3a38 <LED_clr_pattern+0x14>
    3a32:	81 2f       	mov	r24, r17
    3a34:	0e 94 55 27 	call	0x4eaa	; 0x4eaa <__LED_clr_pattern>
    3a38:	1f 91       	pop	r17
    3a3a:	08 95       	ret

00003a3c <LED_open>:
    3a3c:	0e 94 5a 27 	call	0x4eb4	; 0x4eb4 <__LED_init>
    3a40:	86 e0       	ldi	r24, 0x06	; 6
    3a42:	61 e0       	ldi	r22, 0x01	; 1
    3a44:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    3a48:	86 e0       	ldi	r24, 0x06	; 6
    3a4a:	91 e0       	ldi	r25, 0x01	; 1
    3a4c:	08 95       	ret

00003a4e <LED_set_pattern>:
    3a4e:	1f 93       	push	r17
    3a50:	18 2f       	mov	r17, r24
    3a52:	86 e0       	ldi	r24, 0x06	; 6
    3a54:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    3a58:	81 30       	cpi	r24, 0x01	; 1
    3a5a:	19 f4       	brne	.+6      	; 0x3a62 <LED_set_pattern+0x14>
    3a5c:	81 2f       	mov	r24, r17
    3a5e:	0e 94 5d 27 	call	0x4eba	; 0x4eba <__LED_set_pattern>
    3a62:	1f 91       	pop	r17
    3a64:	08 95       	ret

00003a66 <SPI_set_slave_addr>:
    3a66:	1f 93       	push	r17
    3a68:	18 2f       	mov	r17, r24
    3a6a:	82 e0       	ldi	r24, 0x02	; 2
    3a6c:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    3a70:	81 30       	cpi	r24, 0x01	; 1
    3a72:	09 f0       	breq	.+2      	; 0x3a76 <SPI_set_slave_addr+0x10>
    3a74:	47 c0       	rjmp	.+142    	; 0x3b04 <SPI_set_slave_addr+0x9e>
    3a76:	91 2f       	mov	r25, r17
    3a78:	97 70       	andi	r25, 0x07	; 7
    3a7a:	80 91 59 07 	lds	r24, 0x0759
    3a7e:	98 17       	cp	r25, r24
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <SPI_set_slave_addr+0x1e>
    3a82:	40 c0       	rjmp	.+128    	; 0x3b04 <SPI_set_slave_addr+0x9e>
    3a84:	90 93 59 07 	sts	0x0759, r25
    3a88:	85 b1       	in	r24, 0x05	; 5
    3a8a:	88 7f       	andi	r24, 0xF8	; 248
    3a8c:	89 2b       	or	r24, r25
    3a8e:	85 b9       	out	0x05, r24	; 5
    3a90:	93 30       	cpi	r25, 0x03	; 3
    3a92:	11 f1       	breq	.+68     	; 0x3ad8 <SPI_set_slave_addr+0x72>
    3a94:	94 30       	cpi	r25, 0x04	; 4
    3a96:	28 f4       	brcc	.+10     	; 0x3aa2 <SPI_set_slave_addr+0x3c>
    3a98:	91 30       	cpi	r25, 0x01	; 1
    3a9a:	51 f0       	breq	.+20     	; 0x3ab0 <SPI_set_slave_addr+0x4a>
    3a9c:	92 30       	cpi	r25, 0x02	; 2
    3a9e:	90 f4       	brcc	.+36     	; 0x3ac4 <SPI_set_slave_addr+0x5e>
    3aa0:	0c c0       	rjmp	.+24     	; 0x3aba <SPI_set_slave_addr+0x54>
    3aa2:	95 30       	cpi	r25, 0x05	; 5
    3aa4:	19 f1       	breq	.+70     	; 0x3aec <SPI_set_slave_addr+0x86>
    3aa6:	95 30       	cpi	r25, 0x05	; 5
    3aa8:	e0 f0       	brcs	.+56     	; 0x3ae2 <SPI_set_slave_addr+0x7c>
    3aaa:	96 30       	cpi	r25, 0x06	; 6
    3aac:	21 f5       	brne	.+72     	; 0x3af6 <SPI_set_slave_addr+0x90>
    3aae:	0f c0       	rjmp	.+30     	; 0x3ace <SPI_set_slave_addr+0x68>
    3ab0:	e0 91 24 04 	lds	r30, 0x0424
    3ab4:	f0 91 25 04 	lds	r31, 0x0425
    3ab8:	22 c0       	rjmp	.+68     	; 0x3afe <SPI_set_slave_addr+0x98>
    3aba:	e0 91 22 04 	lds	r30, 0x0422
    3abe:	f0 91 23 04 	lds	r31, 0x0423
    3ac2:	1d c0       	rjmp	.+58     	; 0x3afe <SPI_set_slave_addr+0x98>
    3ac4:	e0 91 26 04 	lds	r30, 0x0426
    3ac8:	f0 91 27 04 	lds	r31, 0x0427
    3acc:	18 c0       	rjmp	.+48     	; 0x3afe <SPI_set_slave_addr+0x98>
    3ace:	e0 91 2e 04 	lds	r30, 0x042E
    3ad2:	f0 91 2f 04 	lds	r31, 0x042F
    3ad6:	13 c0       	rjmp	.+38     	; 0x3afe <SPI_set_slave_addr+0x98>
    3ad8:	e0 91 28 04 	lds	r30, 0x0428
    3adc:	f0 91 29 04 	lds	r31, 0x0429
    3ae0:	0e c0       	rjmp	.+28     	; 0x3afe <SPI_set_slave_addr+0x98>
    3ae2:	e0 91 2a 04 	lds	r30, 0x042A
    3ae6:	f0 91 2b 04 	lds	r31, 0x042B
    3aea:	09 c0       	rjmp	.+18     	; 0x3afe <SPI_set_slave_addr+0x98>
    3aec:	e0 91 2c 04 	lds	r30, 0x042C
    3af0:	f0 91 2d 04 	lds	r31, 0x042D
    3af4:	04 c0       	rjmp	.+8      	; 0x3afe <SPI_set_slave_addr+0x98>
    3af6:	e0 91 30 04 	lds	r30, 0x0430
    3afa:	f0 91 31 04 	lds	r31, 0x0431
    3afe:	30 97       	sbiw	r30, 0x00	; 0
    3b00:	09 f0       	breq	.+2      	; 0x3b04 <SPI_set_slave_addr+0x9e>
    3b02:	09 95       	icall
    3b04:	1f 91       	pop	r17
    3b06:	08 95       	ret

00003b08 <SPI_transmit>:
    3b08:	1f 93       	push	r17
    3b0a:	16 2f       	mov	r17, r22
    3b0c:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <SPI_set_slave_addr>
    3b10:	82 e0       	ldi	r24, 0x02	; 2
    3b12:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    3b16:	81 30       	cpi	r24, 0x01	; 1
    3b18:	21 f4       	brne	.+8      	; 0x3b22 <SPI_transmit+0x1a>
    3b1a:	1e bd       	out	0x2e, r17	; 46
    3b1c:	0d b4       	in	r0, 0x2d	; 45
    3b1e:	07 fe       	sbrs	r0, 7
    3b20:	fd cf       	rjmp	.-6      	; 0x3b1c <SPI_transmit+0x14>
    3b22:	1f 91       	pop	r17
    3b24:	08 95       	ret

00003b26 <__SPKR_set_up_freq_LUT>:
    3b26:	0f 93       	push	r16
    3b28:	1f 93       	push	r17
    3b2a:	cf 93       	push	r28
    3b2c:	df 93       	push	r29
    3b2e:	80 e2       	ldi	r24, 0x20	; 32
    3b30:	91 e0       	ldi	r25, 0x01	; 1
    3b32:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <malloc>
    3b36:	9c 01       	movw	r18, r24
    3b38:	90 93 41 04 	sts	0x0441, r25
    3b3c:	80 93 40 04 	sts	0x0440, r24
    3b40:	89 2b       	or	r24, r25
    3b42:	11 f4       	brne	.+4      	; 0x3b48 <__SPKR_set_up_freq_LUT+0x22>
    3b44:	80 e0       	ldi	r24, 0x00	; 0
    3b46:	39 c0       	rjmp	.+114    	; 0x3bba <__SPKR_set_up_freq_LUT+0x94>
    3b48:	89 01       	movw	r16, r18
    3b4a:	c0 e0       	ldi	r28, 0x00	; 0
    3b4c:	d0 e0       	ldi	r29, 0x00	; 0
    3b4e:	be 01       	movw	r22, r28
    3b50:	80 e0       	ldi	r24, 0x00	; 0
    3b52:	90 e0       	ldi	r25, 0x00	; 0
    3b54:	0e 94 d1 2f 	call	0x5fa2	; 0x5fa2 <__floatunsisf>
    3b58:	20 e0       	ldi	r18, 0x00	; 0
    3b5a:	30 e0       	ldi	r19, 0x00	; 0
    3b5c:	40 ea       	ldi	r20, 0xA0	; 160
    3b5e:	51 e4       	ldi	r21, 0x41	; 65
    3b60:	0e 94 38 2f 	call	0x5e70	; 0x5e70 <__divsf3>
    3b64:	27 ef       	ldi	r18, 0xF7	; 247
    3b66:	35 e7       	ldi	r19, 0x75	; 117
    3b68:	40 e0       	ldi	r20, 0x00	; 0
    3b6a:	5f e3       	ldi	r21, 0x3F	; 63
    3b6c:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    3b70:	9b 01       	movw	r18, r22
    3b72:	ac 01       	movw	r20, r24
    3b74:	60 e0       	ldi	r22, 0x00	; 0
    3b76:	70 e0       	ldi	r23, 0x00	; 0
    3b78:	80 e2       	ldi	r24, 0x20	; 32
    3b7a:	91 e4       	ldi	r25, 0x41	; 65
    3b7c:	0e 94 24 31 	call	0x6248	; 0x6248 <pow>
    3b80:	9b 01       	movw	r18, r22
    3b82:	ac 01       	movw	r20, r24
    3b84:	ca 01       	movw	r24, r20
    3b86:	b9 01       	movw	r22, r18
    3b88:	2d ec       	ldi	r18, 0xCD	; 205
    3b8a:	3c ec       	ldi	r19, 0xCC	; 204
    3b8c:	42 e8       	ldi	r20, 0x82	; 130
    3b8e:	51 e4       	ldi	r21, 0x41	; 65
    3b90:	0e 94 c1 30 	call	0x6182	; 0x6182 <__mulsf3>
    3b94:	0e 94 87 30 	call	0x610e	; 0x610e <lrint>
    3b98:	2a e0       	ldi	r18, 0x0A	; 10
    3b9a:	30 e0       	ldi	r19, 0x00	; 0
    3b9c:	40 e0       	ldi	r20, 0x00	; 0
    3b9e:	50 e0       	ldi	r21, 0x00	; 0
    3ba0:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__mulsi3>
    3ba4:	f8 01       	movw	r30, r16
    3ba6:	61 93       	st	Z+, r22
    3ba8:	71 93       	st	Z+, r23
    3baa:	81 93       	st	Z+, r24
    3bac:	91 93       	st	Z+, r25
    3bae:	8f 01       	movw	r16, r30
    3bb0:	21 96       	adiw	r28, 0x01	; 1
    3bb2:	c8 34       	cpi	r28, 0x48	; 72
    3bb4:	d1 05       	cpc	r29, r1
    3bb6:	59 f6       	brne	.-106    	; 0x3b4e <__SPKR_set_up_freq_LUT+0x28>
    3bb8:	81 e0       	ldi	r24, 0x01	; 1
    3bba:	df 91       	pop	r29
    3bbc:	cf 91       	pop	r28
    3bbe:	1f 91       	pop	r17
    3bc0:	0f 91       	pop	r16
    3bc2:	08 95       	ret

00003bc4 <__SPKR_open_beep_mode>:
    3bc4:	8a e0       	ldi	r24, 0x0A	; 10
    3bc6:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    3bca:	88 23       	and	r24, r24
    3bcc:	71 f4       	brne	.+28     	; 0x3bea <__SPKR_open_beep_mode+0x26>
    3bce:	10 92 3d 04 	sts	0x043D, r1
    3bd2:	10 92 3c 04 	sts	0x043C, r1
    3bd6:	81 e0       	ldi	r24, 0x01	; 1
    3bd8:	0e 94 98 28 	call	0x5130	; 0x5130 <__SPKR_init>
    3bdc:	81 e0       	ldi	r24, 0x01	; 1
    3bde:	80 93 33 04 	sts	0x0433, r24
    3be2:	8a e0       	ldi	r24, 0x0A	; 10
    3be4:	61 e0       	ldi	r22, 0x01	; 1
    3be6:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    3bea:	8a e0       	ldi	r24, 0x0A	; 10
    3bec:	91 e0       	ldi	r25, 0x01	; 1
    3bee:	08 95       	ret

00003bf0 <__SPKR_open_tone_mode>:
    3bf0:	1f 93       	push	r17
    3bf2:	8b e0       	ldi	r24, 0x0B	; 11
    3bf4:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    3bf8:	88 23       	and	r24, r24
    3bfa:	11 f0       	breq	.+4      	; 0x3c00 <__SPKR_open_tone_mode+0x10>
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	21 c0       	rjmp	.+66     	; 0x3c42 <__SPKR_open_tone_mode+0x52>
    3c00:	89 e0       	ldi	r24, 0x09	; 9
    3c02:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    3c06:	88 23       	and	r24, r24
    3c08:	d9 f4       	brne	.+54     	; 0x3c40 <__SPKR_open_tone_mode+0x50>
    3c0a:	0e 94 93 1d 	call	0x3b26	; 0x3b26 <__SPKR_set_up_freq_LUT>
    3c0e:	18 2f       	mov	r17, r24
    3c10:	81 30       	cpi	r24, 0x01	; 1
    3c12:	b1 f4       	brne	.+44     	; 0x3c40 <__SPKR_open_tone_mode+0x50>
    3c14:	10 92 34 04 	sts	0x0434, r1
    3c18:	10 92 35 04 	sts	0x0435, r1
    3c1c:	10 92 36 04 	sts	0x0436, r1
    3c20:	10 92 37 04 	sts	0x0437, r1
    3c24:	8d e0       	ldi	r24, 0x0D	; 13
    3c26:	6b e1       	ldi	r22, 0x1B	; 27
    3c28:	78 e2       	ldi	r23, 0x28	; 40
    3c2a:	0e 94 7e 26 	call	0x4cfc	; 0x4cfc <ISR_attach>
    3c2e:	82 e0       	ldi	r24, 0x02	; 2
    3c30:	0e 94 98 28 	call	0x5130	; 0x5130 <__SPKR_init>
    3c34:	10 93 32 04 	sts	0x0432, r17
    3c38:	89 e0       	ldi	r24, 0x09	; 9
    3c3a:	61 e0       	ldi	r22, 0x01	; 1
    3c3c:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    3c40:	91 e0       	ldi	r25, 0x01	; 1
    3c42:	89 e0       	ldi	r24, 0x09	; 9
    3c44:	1f 91       	pop	r17
    3c46:	08 95       	ret

00003c48 <SPKR_open>:
    3c48:	81 30       	cpi	r24, 0x01	; 1
    3c4a:	29 f0       	breq	.+10     	; 0x3c56 <SPKR_open+0xe>
    3c4c:	82 30       	cpi	r24, 0x02	; 2
    3c4e:	31 f0       	breq	.+12     	; 0x3c5c <SPKR_open+0x14>
    3c50:	90 e0       	ldi	r25, 0x00	; 0
    3c52:	89 e0       	ldi	r24, 0x09	; 9
    3c54:	08 95       	ret
    3c56:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <__SPKR_open_beep_mode>
    3c5a:	08 95       	ret
    3c5c:	0e 94 f8 1d 	call	0x3bf0	; 0x3bf0 <__SPKR_open_tone_mode>
    3c60:	08 95       	ret

00003c62 <STEPPER_get_nSteps>:
    3c62:	80 91 1a 07 	lds	r24, 0x071A
    3c66:	90 91 1b 07 	lds	r25, 0x071B
    3c6a:	20 91 1c 07 	lds	r18, 0x071C
    3c6e:	30 91 1d 07 	lds	r19, 0x071D
    3c72:	bc 01       	movw	r22, r24
    3c74:	c9 01       	movw	r24, r18
    3c76:	08 95       	ret

00003c78 <STEPPER_stepmode>:
    3c78:	2f 92       	push	r2
    3c7a:	3f 92       	push	r3
    3c7c:	4f 92       	push	r4
    3c7e:	5f 92       	push	r5
    3c80:	6f 92       	push	r6
    3c82:	7f 92       	push	r7
    3c84:	8f 92       	push	r8
    3c86:	9f 92       	push	r9
    3c88:	af 92       	push	r10
    3c8a:	bf 92       	push	r11
    3c8c:	cf 92       	push	r12
    3c8e:	df 92       	push	r13
    3c90:	ef 92       	push	r14
    3c92:	ff 92       	push	r15
    3c94:	0f 93       	push	r16
    3c96:	1f 93       	push	r17
    3c98:	df 93       	push	r29
    3c9a:	cf 93       	push	r28
    3c9c:	cd b7       	in	r28, 0x3d	; 61
    3c9e:	de b7       	in	r29, 0x3e	; 62
    3ca0:	58 2e       	mov	r5, r24
    3ca2:	96 2e       	mov	r9, r22
    3ca4:	44 2e       	mov	r4, r20
    3ca6:	39 01       	movw	r6, r18
    3ca8:	3c 2c       	mov	r3, r12
    3caa:	c9 8c       	ldd	r12, Y+25	; 0x19
    3cac:	da 8c       	ldd	r13, Y+26	; 0x1a
    3cae:	2b 8c       	ldd	r2, Y+27	; 0x1b
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	68 17       	cp	r22, r24
    3cb4:	39 f1       	breq	.+78     	; 0x3d04 <STEPPER_stepmode+0x8c>
    3cb6:	68 17       	cp	r22, r24
    3cb8:	28 f0       	brcs	.+10     	; 0x3cc4 <STEPPER_stepmode+0x4c>
    3cba:	92 e0       	ldi	r25, 0x02	; 2
    3cbc:	69 17       	cp	r22, r25
    3cbe:	09 f0       	breq	.+2      	; 0x3cc2 <STEPPER_stepmode+0x4a>
    3cc0:	85 c0       	rjmp	.+266    	; 0x3dcc <STEPPER_stepmode+0x154>
    3cc2:	49 c0       	rjmp	.+146    	; 0x3d56 <STEPPER_stepmode+0xde>
    3cc4:	80 e0       	ldi	r24, 0x00	; 0
    3cc6:	61 e0       	ldi	r22, 0x01	; 1
    3cc8:	0e 94 45 20 	call	0x408a	; 0x408a <STEPPER_set_mode>
    3ccc:	80 e0       	ldi	r24, 0x00	; 0
    3cce:	b7 01       	movw	r22, r14
    3cd0:	0e 94 0e 20 	call	0x401c	; 0x401c <STEPPER_set_accel>
    3cd4:	80 e0       	ldi	r24, 0x00	; 0
    3cd6:	64 2d       	mov	r22, r4
    3cd8:	a3 01       	movw	r20, r6
    3cda:	98 01       	movw	r18, r16
    3cdc:	03 2d       	mov	r16, r3
    3cde:	ee 24       	eor	r14, r14
    3ce0:	e3 94       	inc	r14
    3ce2:	ef e3       	ldi	r30, 0x3F	; 63
    3ce4:	ce 2e       	mov	r12, r30
    3ce6:	e7 e0       	ldi	r30, 0x07	; 7
    3ce8:	de 2e       	mov	r13, r30
    3cea:	0e 94 97 20 	call	0x412e	; 0x412e <STEPPER_step>
    3cee:	55 20       	and	r5, r5
    3cf0:	09 f0       	breq	.+2      	; 0x3cf4 <STEPPER_stepmode+0x7c>
    3cf2:	6c c0       	rjmp	.+216    	; 0x3dcc <STEPPER_stepmode+0x154>
    3cf4:	00 d0       	rcall	.+0      	; 0x3cf6 <STEPPER_stepmode+0x7e>
    3cf6:	0f 92       	push	r0
    3cf8:	ed b7       	in	r30, 0x3d	; 61
    3cfa:	fe b7       	in	r31, 0x3e	; 62
    3cfc:	11 82       	std	Z+1, r1	; 0x01
    3cfe:	b3 82       	std	Z+3, r11	; 0x03
    3d00:	a2 82       	std	Z+2, r10	; 0x02
    3d02:	23 c0       	rjmp	.+70     	; 0x3d4a <STEPPER_stepmode+0xd2>
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	61 e0       	ldi	r22, 0x01	; 1
    3d08:	0e 94 45 20 	call	0x408a	; 0x408a <STEPPER_set_mode>
    3d0c:	81 e0       	ldi	r24, 0x01	; 1
    3d0e:	b6 01       	movw	r22, r12
    3d10:	0e 94 0e 20 	call	0x401c	; 0x401c <STEPPER_set_accel>
    3d14:	81 e0       	ldi	r24, 0x01	; 1
    3d16:	68 2d       	mov	r22, r8
    3d18:	4d 89       	ldd	r20, Y+21	; 0x15
    3d1a:	5e 89       	ldd	r21, Y+22	; 0x16
    3d1c:	2f 89       	ldd	r18, Y+23	; 0x17
    3d1e:	38 8d       	ldd	r19, Y+24	; 0x18
    3d20:	02 2d       	mov	r16, r2
    3d22:	ee 24       	eor	r14, r14
    3d24:	e3 94       	inc	r14
    3d26:	7f e3       	ldi	r23, 0x3F	; 63
    3d28:	c7 2e       	mov	r12, r23
    3d2a:	77 e0       	ldi	r23, 0x07	; 7
    3d2c:	d7 2e       	mov	r13, r23
    3d2e:	0e 94 97 20 	call	0x412e	; 0x412e <STEPPER_step>
    3d32:	55 20       	and	r5, r5
    3d34:	09 f0       	breq	.+2      	; 0x3d38 <STEPPER_stepmode+0xc0>
    3d36:	4a c0       	rjmp	.+148    	; 0x3dcc <STEPPER_stepmode+0x154>
    3d38:	00 d0       	rcall	.+0      	; 0x3d3a <STEPPER_stepmode+0xc2>
    3d3a:	0f 92       	push	r0
    3d3c:	ed b7       	in	r30, 0x3d	; 61
    3d3e:	fe b7       	in	r31, 0x3e	; 62
    3d40:	91 82       	std	Z+1, r9	; 0x01
    3d42:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3d44:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3d46:	93 83       	std	Z+3, r25	; 0x03
    3d48:	82 83       	std	Z+2, r24	; 0x02
    3d4a:	0e 94 48 21 	call	0x4290	; 0x4290 <STEPPER_wait_and_then>
    3d4e:	0f 90       	pop	r0
    3d50:	0f 90       	pop	r0
    3d52:	0f 90       	pop	r0
    3d54:	3b c0       	rjmp	.+118    	; 0x3dcc <STEPPER_stepmode+0x154>
    3d56:	82 e0       	ldi	r24, 0x02	; 2
    3d58:	61 e0       	ldi	r22, 0x01	; 1
    3d5a:	0e 94 45 20 	call	0x408a	; 0x408a <STEPPER_set_mode>
    3d5e:	80 e0       	ldi	r24, 0x00	; 0
    3d60:	b7 01       	movw	r22, r14
    3d62:	0e 94 0e 20 	call	0x401c	; 0x401c <STEPPER_set_accel>
    3d66:	81 e0       	ldi	r24, 0x01	; 1
    3d68:	b6 01       	movw	r22, r12
    3d6a:	0e 94 0e 20 	call	0x401c	; 0x401c <STEPPER_set_accel>
    3d6e:	80 e0       	ldi	r24, 0x00	; 0
    3d70:	64 2d       	mov	r22, r4
    3d72:	a3 01       	movw	r20, r6
    3d74:	98 01       	movw	r18, r16
    3d76:	03 2d       	mov	r16, r3
    3d78:	ee 24       	eor	r14, r14
    3d7a:	e3 94       	inc	r14
    3d7c:	9f e3       	ldi	r25, 0x3F	; 63
    3d7e:	c9 2e       	mov	r12, r25
    3d80:	97 e0       	ldi	r25, 0x07	; 7
    3d82:	d9 2e       	mov	r13, r25
    3d84:	0e 94 97 20 	call	0x412e	; 0x412e <STEPPER_step>
    3d88:	81 e0       	ldi	r24, 0x01	; 1
    3d8a:	68 2d       	mov	r22, r8
    3d8c:	4d 89       	ldd	r20, Y+21	; 0x15
    3d8e:	5e 89       	ldd	r21, Y+22	; 0x16
    3d90:	2f 89       	ldd	r18, Y+23	; 0x17
    3d92:	38 8d       	ldd	r19, Y+24	; 0x18
    3d94:	02 2d       	mov	r16, r2
    3d96:	0e 94 97 20 	call	0x412e	; 0x412e <STEPPER_step>
    3d9a:	55 20       	and	r5, r5
    3d9c:	b9 f4       	brne	.+46     	; 0x3dcc <STEPPER_stepmode+0x154>
    3d9e:	00 d0       	rcall	.+0      	; 0x3da0 <STEPPER_stepmode+0x128>
    3da0:	00 d0       	rcall	.+0      	; 0x3da2 <STEPPER_stepmode+0x12a>
    3da2:	0f 92       	push	r0
    3da4:	ad b7       	in	r26, 0x3d	; 61
    3da6:	be b7       	in	r27, 0x3e	; 62
    3da8:	11 96       	adiw	r26, 0x01	; 1
    3daa:	ed b7       	in	r30, 0x3d	; 61
    3dac:	fe b7       	in	r31, 0x3e	; 62
    3dae:	91 82       	std	Z+1, r9	; 0x01
    3db0:	fd 01       	movw	r30, r26
    3db2:	b2 82       	std	Z+2, r11	; 0x02
    3db4:	a1 82       	std	Z+1, r10	; 0x01
    3db6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3db8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3dba:	94 83       	std	Z+4, r25	; 0x04
    3dbc:	83 83       	std	Z+3, r24	; 0x03
    3dbe:	0e 94 48 21 	call	0x4290	; 0x4290 <STEPPER_wait_and_then>
    3dc2:	0f 90       	pop	r0
    3dc4:	0f 90       	pop	r0
    3dc6:	0f 90       	pop	r0
    3dc8:	0f 90       	pop	r0
    3dca:	0f 90       	pop	r0
    3dcc:	cf 91       	pop	r28
    3dce:	df 91       	pop	r29
    3dd0:	1f 91       	pop	r17
    3dd2:	0f 91       	pop	r16
    3dd4:	ff 90       	pop	r15
    3dd6:	ef 90       	pop	r14
    3dd8:	df 90       	pop	r13
    3dda:	cf 90       	pop	r12
    3ddc:	bf 90       	pop	r11
    3dde:	af 90       	pop	r10
    3de0:	9f 90       	pop	r9
    3de2:	8f 90       	pop	r8
    3de4:	7f 90       	pop	r7
    3de6:	6f 90       	pop	r6
    3de8:	5f 90       	pop	r5
    3dea:	4f 90       	pop	r4
    3dec:	3f 90       	pop	r3
    3dee:	2f 90       	pop	r2
    3df0:	08 95       	ret

00003df2 <STEPPER_move>:
    3df2:	6f 92       	push	r6
    3df4:	7f 92       	push	r7
    3df6:	8f 92       	push	r8
    3df8:	9f 92       	push	r9
    3dfa:	af 92       	push	r10
    3dfc:	bf 92       	push	r11
    3dfe:	cf 92       	push	r12
    3e00:	df 92       	push	r13
    3e02:	ef 92       	push	r14
    3e04:	ff 92       	push	r15
    3e06:	0f 93       	push	r16
    3e08:	1f 93       	push	r17
    3e0a:	df 93       	push	r29
    3e0c:	cf 93       	push	r28
    3e0e:	cd b7       	in	r28, 0x3d	; 61
    3e10:	de b7       	in	r29, 0x3e	; 62
    3e12:	94 2e       	mov	r9, r20
    3e14:	7c 2d       	mov	r23, r12
    3e16:	d5 01       	movw	r26, r10
    3e18:	49 89       	ldd	r20, Y+17	; 0x11
    3e1a:	5a 89       	ldd	r21, Y+18	; 0x12
    3e1c:	ab 88       	ldd	r10, Y+19	; 0x13
    3e1e:	bc 88       	ldd	r11, Y+20	; 0x14
    3e20:	cd 88       	ldd	r12, Y+21	; 0x15
    3e22:	de 88       	ldd	r13, Y+22	; 0x16
    3e24:	9f 89       	ldd	r25, Y+23	; 0x17
    3e26:	81 30       	cpi	r24, 0x01	; 1
    3e28:	09 f4       	brne	.+2      	; 0x3e2c <STEPPER_move+0x3a>
    3e2a:	57 c0       	rjmp	.+174    	; 0x3eda <STEPPER_move+0xe8>
    3e2c:	81 30       	cpi	r24, 0x01	; 1
    3e2e:	b8 f1       	brcs	.+110    	; 0x3e9e <STEPPER_move+0xac>
    3e30:	82 30       	cpi	r24, 0x02	; 2
    3e32:	09 f0       	breq	.+2      	; 0x3e36 <STEPPER_move+0x44>
    3e34:	76 c0       	rjmp	.+236    	; 0x3f22 <STEPPER_move+0x130>
    3e36:	61 30       	cpi	r22, 0x01	; 1
    3e38:	91 f0       	breq	.+36     	; 0x3e5e <STEPPER_move+0x6c>
    3e3a:	61 30       	cpi	r22, 0x01	; 1
    3e3c:	20 f0       	brcs	.+8      	; 0x3e46 <STEPPER_move+0x54>
    3e3e:	62 30       	cpi	r22, 0x02	; 2
    3e40:	09 f0       	breq	.+2      	; 0x3e44 <STEPPER_move+0x52>
    3e42:	6f c0       	rjmp	.+222    	; 0x3f22 <STEPPER_move+0x130>
    3e44:	15 c0       	rjmp	.+42     	; 0x3e70 <STEPPER_move+0x7e>
    3e46:	80 e0       	ldi	r24, 0x00	; 0
    3e48:	60 e0       	ldi	r22, 0x00	; 0
    3e4a:	0e 94 45 20 	call	0x408a	; 0x408a <STEPPER_set_mode>
    3e4e:	80 e0       	ldi	r24, 0x00	; 0
    3e50:	b7 01       	movw	r22, r14
    3e52:	0e 94 0e 20 	call	0x401c	; 0x401c <STEPPER_set_accel>
    3e56:	80 e0       	ldi	r24, 0x00	; 0
    3e58:	69 2d       	mov	r22, r9
    3e5a:	a8 01       	movw	r20, r16
    3e5c:	1d c0       	rjmp	.+58     	; 0x3e98 <STEPPER_move+0xa6>
    3e5e:	81 e0       	ldi	r24, 0x01	; 1
    3e60:	60 e0       	ldi	r22, 0x00	; 0
    3e62:	0e 94 45 20 	call	0x408a	; 0x408a <STEPPER_set_mode>
    3e66:	81 e0       	ldi	r24, 0x01	; 1
    3e68:	b6 01       	movw	r22, r12
    3e6a:	0e 94 0e 20 	call	0x401c	; 0x401c <STEPPER_set_accel>
    3e6e:	11 c0       	rjmp	.+34     	; 0x3e92 <STEPPER_move+0xa0>
    3e70:	82 e0       	ldi	r24, 0x02	; 2
    3e72:	60 e0       	ldi	r22, 0x00	; 0
    3e74:	0e 94 45 20 	call	0x408a	; 0x408a <STEPPER_set_mode>
    3e78:	80 e0       	ldi	r24, 0x00	; 0
    3e7a:	b7 01       	movw	r22, r14
    3e7c:	0e 94 0e 20 	call	0x401c	; 0x401c <STEPPER_set_accel>
    3e80:	81 e0       	ldi	r24, 0x01	; 1
    3e82:	b6 01       	movw	r22, r12
    3e84:	0e 94 0e 20 	call	0x401c	; 0x401c <STEPPER_set_accel>
    3e88:	80 e0       	ldi	r24, 0x00	; 0
    3e8a:	69 2d       	mov	r22, r9
    3e8c:	a8 01       	movw	r20, r16
    3e8e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <STEPPER_run>
    3e92:	81 e0       	ldi	r24, 0x01	; 1
    3e94:	68 2d       	mov	r22, r8
    3e96:	a5 01       	movw	r20, r10
    3e98:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <STEPPER_run>
    3e9c:	42 c0       	rjmp	.+132    	; 0x3f22 <STEPPER_move+0x130>
    3e9e:	ed b7       	in	r30, 0x3d	; 61
    3ea0:	fe b7       	in	r31, 0x3e	; 62
    3ea2:	39 97       	sbiw	r30, 0x09	; 9
    3ea4:	0f b6       	in	r0, 0x3f	; 63
    3ea6:	f8 94       	cli
    3ea8:	fe bf       	out	0x3e, r31	; 62
    3eaa:	0f be       	out	0x3f, r0	; 63
    3eac:	ed bf       	out	0x3d, r30	; 61
    3eae:	6d b6       	in	r6, 0x3d	; 61
    3eb0:	7e b6       	in	r7, 0x3e	; 62
    3eb2:	08 94       	sec
    3eb4:	61 1c       	adc	r6, r1
    3eb6:	71 1c       	adc	r7, r1
    3eb8:	52 83       	std	Z+2, r21	; 0x02
    3eba:	41 83       	std	Z+1, r20	; 0x01
    3ebc:	f3 01       	movw	r30, r6
    3ebe:	b3 82       	std	Z+3, r11	; 0x03
    3ec0:	a2 82       	std	Z+2, r10	; 0x02
    3ec2:	d5 82       	std	Z+5, r13	; 0x05
    3ec4:	c4 82       	std	Z+4, r12	; 0x04
    3ec6:	96 83       	std	Z+6, r25	; 0x06
    3ec8:	88 8d       	ldd	r24, Y+24	; 0x18
    3eca:	99 8d       	ldd	r25, Y+25	; 0x19
    3ecc:	90 87       	std	Z+8, r25	; 0x08
    3ece:	87 83       	std	Z+7, r24	; 0x07
    3ed0:	80 e0       	ldi	r24, 0x00	; 0
    3ed2:	49 2d       	mov	r20, r9
    3ed4:	c7 2e       	mov	r12, r23
    3ed6:	5d 01       	movw	r10, r26
    3ed8:	1a c0       	rjmp	.+52     	; 0x3f0e <STEPPER_move+0x11c>
    3eda:	ed b7       	in	r30, 0x3d	; 61
    3edc:	fe b7       	in	r31, 0x3e	; 62
    3ede:	39 97       	sbiw	r30, 0x09	; 9
    3ee0:	0f b6       	in	r0, 0x3f	; 63
    3ee2:	f8 94       	cli
    3ee4:	fe bf       	out	0x3e, r31	; 62
    3ee6:	0f be       	out	0x3f, r0	; 63
    3ee8:	ed bf       	out	0x3d, r30	; 61
    3eea:	ad b7       	in	r26, 0x3d	; 61
    3eec:	be b7       	in	r27, 0x3e	; 62
    3eee:	11 96       	adiw	r26, 0x01	; 1
    3ef0:	52 83       	std	Z+2, r21	; 0x02
    3ef2:	41 83       	std	Z+1, r20	; 0x01
    3ef4:	fd 01       	movw	r30, r26
    3ef6:	b3 82       	std	Z+3, r11	; 0x03
    3ef8:	a2 82       	std	Z+2, r10	; 0x02
    3efa:	d5 82       	std	Z+5, r13	; 0x05
    3efc:	c4 82       	std	Z+4, r12	; 0x04
    3efe:	96 83       	std	Z+6, r25	; 0x06
    3f00:	10 86       	std	Z+8, r1	; 0x08
    3f02:	17 82       	std	Z+7, r1	; 0x07
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	49 2d       	mov	r20, r9
    3f08:	c7 2e       	mov	r12, r23
    3f0a:	aa 24       	eor	r10, r10
    3f0c:	bb 24       	eor	r11, r11
    3f0e:	0e 94 3c 1e 	call	0x3c78	; 0x3c78 <STEPPER_stepmode>
    3f12:	8d b7       	in	r24, 0x3d	; 61
    3f14:	9e b7       	in	r25, 0x3e	; 62
    3f16:	09 96       	adiw	r24, 0x09	; 9
    3f18:	0f b6       	in	r0, 0x3f	; 63
    3f1a:	f8 94       	cli
    3f1c:	9e bf       	out	0x3e, r25	; 62
    3f1e:	0f be       	out	0x3f, r0	; 63
    3f20:	8d bf       	out	0x3d, r24	; 61
    3f22:	cf 91       	pop	r28
    3f24:	df 91       	pop	r29
    3f26:	1f 91       	pop	r17
    3f28:	0f 91       	pop	r16
    3f2a:	ff 90       	pop	r15
    3f2c:	ef 90       	pop	r14
    3f2e:	df 90       	pop	r13
    3f30:	cf 90       	pop	r12
    3f32:	bf 90       	pop	r11
    3f34:	af 90       	pop	r10
    3f36:	9f 90       	pop	r9
    3f38:	8f 90       	pop	r8
    3f3a:	7f 90       	pop	r7
    3f3c:	6f 90       	pop	r6
    3f3e:	08 95       	ret

00003f40 <STEPPER_open>:
    3f40:	0e 94 2a 29 	call	0x5254	; 0x5254 <__STEPPER_init>
    3f44:	81 e0       	ldi	r24, 0x01	; 1
    3f46:	80 93 3e 07 	sts	0x073E, r24
    3f4a:	e8 e0       	ldi	r30, 0x08	; 8
    3f4c:	f7 e0       	ldi	r31, 0x07	; 7
    3f4e:	11 92       	st	Z+, r1
    3f50:	11 92       	st	Z+, r1
    3f52:	11 82       	std	Z+1, r1	; 0x01
    3f54:	10 82       	st	Z, r1
    3f56:	32 96       	adiw	r30, 0x02	; 2
    3f58:	11 82       	std	Z+1, r1	; 0x01
    3f5a:	10 82       	st	Z, r1
    3f5c:	32 96       	adiw	r30, 0x02	; 2
    3f5e:	11 82       	std	Z+1, r1	; 0x01
    3f60:	10 82       	st	Z, r1
    3f62:	32 96       	adiw	r30, 0x02	; 2
    3f64:	11 82       	std	Z+1, r1	; 0x01
    3f66:	10 82       	st	Z, r1
    3f68:	32 96       	adiw	r30, 0x02	; 2
    3f6a:	11 82       	std	Z+1, r1	; 0x01
    3f6c:	10 82       	st	Z, r1
    3f6e:	32 96       	adiw	r30, 0x02	; 2
    3f70:	11 82       	std	Z+1, r1	; 0x01
    3f72:	10 82       	st	Z, r1
    3f74:	32 96       	adiw	r30, 0x02	; 2
    3f76:	11 82       	std	Z+1, r1	; 0x01
    3f78:	10 82       	st	Z, r1
    3f7a:	32 96       	adiw	r30, 0x02	; 2
    3f7c:	11 82       	std	Z+1, r1	; 0x01
    3f7e:	10 82       	st	Z, r1
    3f80:	32 96       	adiw	r30, 0x02	; 2
    3f82:	11 82       	std	Z+1, r1	; 0x01
    3f84:	10 82       	st	Z, r1
    3f86:	32 96       	adiw	r30, 0x02	; 2
    3f88:	11 82       	std	Z+1, r1	; 0x01
    3f8a:	10 82       	st	Z, r1
    3f8c:	32 96       	adiw	r30, 0x02	; 2
    3f8e:	11 82       	std	Z+1, r1	; 0x01
    3f90:	10 82       	st	Z, r1
    3f92:	32 96       	adiw	r30, 0x02	; 2
    3f94:	11 82       	std	Z+1, r1	; 0x01
    3f96:	10 82       	st	Z, r1
    3f98:	36 96       	adiw	r30, 0x06	; 6
    3f9a:	11 92       	st	Z+, r1
    3f9c:	11 92       	st	Z+, r1
    3f9e:	11 92       	st	Z+, r1
    3fa0:	10 82       	st	Z, r1
    3fa2:	32 96       	adiw	r30, 0x02	; 2
    3fa4:	11 92       	st	Z+, r1
    3fa6:	11 92       	st	Z+, r1
    3fa8:	11 92       	st	Z+, r1
    3faa:	11 92       	st	Z+, r1
    3fac:	11 92       	st	Z+, r1
    3fae:	11 92       	st	Z+, r1
    3fb0:	11 92       	st	Z+, r1
    3fb2:	11 82       	std	Z+1, r1	; 0x01
    3fb4:	10 82       	st	Z, r1
    3fb6:	32 96       	adiw	r30, 0x02	; 2
    3fb8:	11 82       	std	Z+1, r1	; 0x01
    3fba:	10 82       	st	Z, r1
    3fbc:	32 96       	adiw	r30, 0x02	; 2
    3fbe:	11 82       	std	Z+1, r1	; 0x01
    3fc0:	10 82       	st	Z, r1
    3fc2:	32 96       	adiw	r30, 0x02	; 2
    3fc4:	11 82       	std	Z+1, r1	; 0x01
    3fc6:	10 82       	st	Z, r1
    3fc8:	76 97       	sbiw	r30, 0x16	; 22
    3fca:	11 82       	std	Z+1, r1	; 0x01
    3fcc:	10 82       	st	Z, r1
    3fce:	32 96       	adiw	r30, 0x02	; 2
    3fd0:	11 82       	std	Z+1, r1	; 0x01
    3fd2:	10 82       	st	Z, r1
    3fd4:	10 92 3d 07 	sts	0x073D, r1
    3fd8:	10 92 3c 07 	sts	0x073C, r1
    3fdc:	10 92 3e 07 	sts	0x073E, r1
    3fe0:	87 e0       	ldi	r24, 0x07	; 7
    3fe2:	61 e0       	ldi	r22, 0x01	; 1
    3fe4:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    3fe8:	87 e0       	ldi	r24, 0x07	; 7
    3fea:	91 e0       	ldi	r25, 0x01	; 1
    3fec:	08 95       	ret

00003fee <STEPPER_run>:
    3fee:	ef 92       	push	r14
    3ff0:	ff 92       	push	r15
    3ff2:	0f 93       	push	r16
    3ff4:	1f 93       	push	r17
    3ff6:	18 2f       	mov	r17, r24
    3ff8:	06 2f       	mov	r16, r22
    3ffa:	7a 01       	movw	r14, r20
    3ffc:	60 e0       	ldi	r22, 0x00	; 0
    3ffe:	0e 94 45 20 	call	0x408a	; 0x408a <STEPPER_set_mode>
    4002:	81 2f       	mov	r24, r17
    4004:	60 2f       	mov	r22, r16
    4006:	0e 94 30 20 	call	0x4060	; 0x4060 <STEPPER_set_dir>
    400a:	81 2f       	mov	r24, r17
    400c:	b7 01       	movw	r22, r14
    400e:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <STEPPER_set_speed>
    4012:	1f 91       	pop	r17
    4014:	0f 91       	pop	r16
    4016:	ff 90       	pop	r15
    4018:	ef 90       	pop	r14
    401a:	08 95       	ret

0000401c <STEPPER_set_accel>:
    401c:	48 2f       	mov	r20, r24
    401e:	81 e0       	ldi	r24, 0x01	; 1
    4020:	80 93 3e 07 	sts	0x073E, r24
    4024:	cb 01       	movw	r24, r22
    4026:	23 e0       	ldi	r18, 0x03	; 3
    4028:	69 3e       	cpi	r22, 0xE9	; 233
    402a:	72 07       	cpc	r23, r18
    402c:	10 f0       	brcs	.+4      	; 0x4032 <STEPPER_set_accel+0x16>
    402e:	88 ee       	ldi	r24, 0xE8	; 232
    4030:	93 e0       	ldi	r25, 0x03	; 3
    4032:	41 30       	cpi	r20, 0x01	; 1
    4034:	71 f0       	breq	.+28     	; 0x4052 <STEPPER_set_accel+0x36>
    4036:	41 30       	cpi	r20, 0x01	; 1
    4038:	18 f0       	brcs	.+6      	; 0x4040 <STEPPER_set_accel+0x24>
    403a:	42 30       	cpi	r20, 0x02	; 2
    403c:	71 f4       	brne	.+28     	; 0x405a <STEPPER_set_accel+0x3e>
    403e:	05 c0       	rjmp	.+10     	; 0x404a <STEPPER_set_accel+0x2e>
    4040:	90 93 13 07 	sts	0x0713, r25
    4044:	80 93 12 07 	sts	0x0712, r24
    4048:	08 c0       	rjmp	.+16     	; 0x405a <STEPPER_set_accel+0x3e>
    404a:	90 93 13 07 	sts	0x0713, r25
    404e:	80 93 12 07 	sts	0x0712, r24
    4052:	90 93 15 07 	sts	0x0715, r25
    4056:	80 93 14 07 	sts	0x0714, r24
    405a:	10 92 3e 07 	sts	0x073E, r1
    405e:	08 95       	ret

00004060 <STEPPER_set_dir>:
    4060:	98 2f       	mov	r25, r24
    4062:	81 e0       	ldi	r24, 0x01	; 1
    4064:	80 93 3e 07 	sts	0x073E, r24
    4068:	91 30       	cpi	r25, 0x01	; 1
    406a:	51 f0       	breq	.+20     	; 0x4080 <STEPPER_set_dir+0x20>
    406c:	91 30       	cpi	r25, 0x01	; 1
    406e:	18 f0       	brcs	.+6      	; 0x4076 <STEPPER_set_dir+0x16>
    4070:	92 30       	cpi	r25, 0x02	; 2
    4072:	41 f4       	brne	.+16     	; 0x4084 <STEPPER_set_dir+0x24>
    4074:	03 c0       	rjmp	.+6      	; 0x407c <STEPPER_set_dir+0x1c>
    4076:	60 93 2b 07 	sts	0x072B, r22
    407a:	04 c0       	rjmp	.+8      	; 0x4084 <STEPPER_set_dir+0x24>
    407c:	60 93 2b 07 	sts	0x072B, r22
    4080:	60 93 2c 07 	sts	0x072C, r22
    4084:	10 92 3e 07 	sts	0x073E, r1
    4088:	08 95       	ret

0000408a <STEPPER_set_mode>:
    408a:	98 2f       	mov	r25, r24
    408c:	81 e0       	ldi	r24, 0x01	; 1
    408e:	80 93 3e 07 	sts	0x073E, r24
    4092:	91 30       	cpi	r25, 0x01	; 1
    4094:	51 f0       	breq	.+20     	; 0x40aa <STEPPER_set_mode+0x20>
    4096:	91 30       	cpi	r25, 0x01	; 1
    4098:	18 f0       	brcs	.+6      	; 0x40a0 <STEPPER_set_mode+0x16>
    409a:	92 30       	cpi	r25, 0x02	; 2
    409c:	41 f4       	brne	.+16     	; 0x40ae <STEPPER_set_mode+0x24>
    409e:	03 c0       	rjmp	.+6      	; 0x40a6 <STEPPER_set_mode+0x1c>
    40a0:	60 93 08 07 	sts	0x0708, r22
    40a4:	04 c0       	rjmp	.+8      	; 0x40ae <STEPPER_set_mode+0x24>
    40a6:	60 93 08 07 	sts	0x0708, r22
    40aa:	60 93 09 07 	sts	0x0709, r22
    40ae:	10 92 3e 07 	sts	0x073E, r1
    40b2:	08 95       	ret

000040b4 <STEPPER_set_speed>:
    40b4:	48 2f       	mov	r20, r24
    40b6:	81 e0       	ldi	r24, 0x01	; 1
    40b8:	80 93 3e 07 	sts	0x073E, r24
    40bc:	cb 01       	movw	r24, r22
    40be:	21 e0       	ldi	r18, 0x01	; 1
    40c0:	61 39       	cpi	r22, 0x91	; 145
    40c2:	72 07       	cpc	r23, r18
    40c4:	10 f0       	brcs	.+4      	; 0x40ca <STEPPER_set_speed+0x16>
    40c6:	80 e9       	ldi	r24, 0x90	; 144
    40c8:	91 e0       	ldi	r25, 0x01	; 1
    40ca:	41 30       	cpi	r20, 0x01	; 1
    40cc:	71 f0       	breq	.+28     	; 0x40ea <STEPPER_set_speed+0x36>
    40ce:	41 30       	cpi	r20, 0x01	; 1
    40d0:	18 f0       	brcs	.+6      	; 0x40d8 <STEPPER_set_speed+0x24>
    40d2:	42 30       	cpi	r20, 0x02	; 2
    40d4:	71 f4       	brne	.+28     	; 0x40f2 <STEPPER_set_speed+0x3e>
    40d6:	05 c0       	rjmp	.+10     	; 0x40e2 <STEPPER_set_speed+0x2e>
    40d8:	90 93 0b 07 	sts	0x070B, r25
    40dc:	80 93 0a 07 	sts	0x070A, r24
    40e0:	08 c0       	rjmp	.+16     	; 0x40f2 <STEPPER_set_speed+0x3e>
    40e2:	90 93 0b 07 	sts	0x070B, r25
    40e6:	80 93 0a 07 	sts	0x070A, r24
    40ea:	90 93 0d 07 	sts	0x070D, r25
    40ee:	80 93 0c 07 	sts	0x070C, r24
    40f2:	10 92 3e 07 	sts	0x073E, r1
    40f6:	08 95       	ret

000040f8 <STEPPER_set_steps>:
    40f8:	98 2f       	mov	r25, r24
    40fa:	81 e0       	ldi	r24, 0x01	; 1
    40fc:	80 93 3e 07 	sts	0x073E, r24
    4100:	91 30       	cpi	r25, 0x01	; 1
    4102:	71 f0       	breq	.+28     	; 0x4120 <STEPPER_set_steps+0x28>
    4104:	91 30       	cpi	r25, 0x01	; 1
    4106:	18 f0       	brcs	.+6      	; 0x410e <STEPPER_set_steps+0x16>
    4108:	92 30       	cpi	r25, 0x02	; 2
    410a:	71 f4       	brne	.+28     	; 0x4128 <STEPPER_set_steps+0x30>
    410c:	05 c0       	rjmp	.+10     	; 0x4118 <STEPPER_set_steps+0x20>
    410e:	70 93 1b 07 	sts	0x071B, r23
    4112:	60 93 1a 07 	sts	0x071A, r22
    4116:	08 c0       	rjmp	.+16     	; 0x4128 <STEPPER_set_steps+0x30>
    4118:	70 93 1b 07 	sts	0x071B, r23
    411c:	60 93 1a 07 	sts	0x071A, r22
    4120:	70 93 1d 07 	sts	0x071D, r23
    4124:	60 93 1c 07 	sts	0x071C, r22
    4128:	10 92 3e 07 	sts	0x073E, r1
    412c:	08 95       	ret

0000412e <STEPPER_step>:
    412e:	8f 92       	push	r8
    4130:	9f 92       	push	r9
    4132:	af 92       	push	r10
    4134:	bf 92       	push	r11
    4136:	cf 92       	push	r12
    4138:	df 92       	push	r13
    413a:	ef 92       	push	r14
    413c:	ff 92       	push	r15
    413e:	0f 93       	push	r16
    4140:	1f 93       	push	r17
    4142:	cf 93       	push	r28
    4144:	df 93       	push	r29
    4146:	18 2f       	mov	r17, r24
    4148:	f6 2e       	mov	r15, r22
    414a:	5a 01       	movw	r10, r20
    414c:	49 01       	movw	r8, r18
    414e:	e6 01       	movw	r28, r12
    4150:	61 e0       	ldi	r22, 0x01	; 1
    4152:	0e 94 45 20 	call	0x408a	; 0x408a <STEPPER_set_mode>
    4156:	81 2f       	mov	r24, r17
    4158:	b5 01       	movw	r22, r10
    415a:	a4 01       	movw	r20, r8
    415c:	0e 94 49 29 	call	0x5292	; 0x5292 <STEPPER_setup_decels>
    4160:	81 2f       	mov	r24, r17
    4162:	6f 2d       	mov	r22, r15
    4164:	0e 94 30 20 	call	0x4060	; 0x4060 <STEPPER_set_dir>
    4168:	81 2f       	mov	r24, r17
    416a:	60 2f       	mov	r22, r16
    416c:	0e 94 34 29 	call	0x5268	; 0x5268 <STEPPER_set_stop_mode>
    4170:	81 2f       	mov	r24, r17
    4172:	b5 01       	movw	r22, r10
    4174:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <STEPPER_set_steps>
    4178:	c1 14       	cp	r12, r1
    417a:	d1 04       	cpc	r13, r1
    417c:	99 f0       	breq	.+38     	; 0x41a4 <STEPPER_step+0x76>
    417e:	11 30       	cpi	r17, 0x01	; 1
    4180:	49 f0       	breq	.+18     	; 0x4194 <STEPPER_step+0x66>
    4182:	11 30       	cpi	r17, 0x01	; 1
    4184:	18 f0       	brcs	.+6      	; 0x418c <STEPPER_step+0x5e>
    4186:	12 30       	cpi	r17, 0x02	; 2
    4188:	69 f4       	brne	.+26     	; 0x41a4 <STEPPER_step+0x76>
    418a:	06 c0       	rjmp	.+12     	; 0x4198 <STEPPER_step+0x6a>
    418c:	18 82       	st	Y, r1
    418e:	10 92 3a 07 	sts	0x073A, r1
    4192:	08 c0       	rjmp	.+16     	; 0x41a4 <STEPPER_step+0x76>
    4194:	19 82       	std	Y+1, r1	; 0x01
    4196:	04 c0       	rjmp	.+8      	; 0x41a0 <STEPPER_step+0x72>
    4198:	18 82       	st	Y, r1
    419a:	19 82       	std	Y+1, r1	; 0x01
    419c:	10 92 3a 07 	sts	0x073A, r1
    41a0:	10 92 3b 07 	sts	0x073B, r1
    41a4:	d0 93 3d 07 	sts	0x073D, r29
    41a8:	c0 93 3c 07 	sts	0x073C, r28
    41ac:	ee 20       	and	r14, r14
    41ae:	b9 f5       	brne	.+110    	; 0x421e <STEPPER_step+0xf0>
    41b0:	82 ed       	ldi	r24, 0xD2	; 210
    41b2:	93 e0       	ldi	r25, 0x03	; 3
    41b4:	90 93 3d 07 	sts	0x073D, r25
    41b8:	80 93 3c 07 	sts	0x073C, r24
    41bc:	81 2f       	mov	r24, r17
    41be:	b4 01       	movw	r22, r8
    41c0:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <STEPPER_set_speed>
    41c4:	81 2f       	mov	r24, r17
    41c6:	0e 94 15 29 	call	0x522a	; 0x522a <STEPPER_go>
    41ca:	11 30       	cpi	r17, 0x01	; 1
    41cc:	71 f0       	breq	.+28     	; 0x41ea <STEPPER_step+0xbc>
    41ce:	11 30       	cpi	r17, 0x01	; 1
    41d0:	18 f0       	brcs	.+6      	; 0x41d8 <STEPPER_step+0xaa>
    41d2:	12 30       	cpi	r17, 0x02	; 2
    41d4:	59 f5       	brne	.+86     	; 0x422c <STEPPER_step+0xfe>
    41d6:	12 c0       	rjmp	.+36     	; 0x41fc <STEPPER_step+0xce>
    41d8:	10 92 d2 03 	sts	0x03D2, r1
    41dc:	10 92 3a 07 	sts	0x073A, r1
    41e0:	80 91 d2 03 	lds	r24, 0x03D2
    41e4:	88 23       	and	r24, r24
    41e6:	e1 f3       	breq	.-8      	; 0x41e0 <STEPPER_step+0xb2>
    41e8:	21 c0       	rjmp	.+66     	; 0x422c <STEPPER_step+0xfe>
    41ea:	10 92 d3 03 	sts	0x03D3, r1
    41ee:	10 92 3b 07 	sts	0x073B, r1
    41f2:	80 91 d3 03 	lds	r24, 0x03D3
    41f6:	88 23       	and	r24, r24
    41f8:	e1 f3       	breq	.-8      	; 0x41f2 <STEPPER_step+0xc4>
    41fa:	18 c0       	rjmp	.+48     	; 0x422c <STEPPER_step+0xfe>
    41fc:	10 92 d2 03 	sts	0x03D2, r1
    4200:	10 92 d3 03 	sts	0x03D3, r1
    4204:	10 92 3a 07 	sts	0x073A, r1
    4208:	10 92 3b 07 	sts	0x073B, r1
    420c:	80 91 d2 03 	lds	r24, 0x03D2
    4210:	88 23       	and	r24, r24
    4212:	e1 f3       	breq	.-8      	; 0x420c <STEPPER_step+0xde>
    4214:	80 91 d3 03 	lds	r24, 0x03D3
    4218:	88 23       	and	r24, r24
    421a:	c1 f3       	breq	.-16     	; 0x420c <STEPPER_step+0xde>
    421c:	07 c0       	rjmp	.+14     	; 0x422c <STEPPER_step+0xfe>
    421e:	81 2f       	mov	r24, r17
    4220:	b4 01       	movw	r22, r8
    4222:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <STEPPER_set_speed>
    4226:	81 2f       	mov	r24, r17
    4228:	0e 94 15 29 	call	0x522a	; 0x522a <STEPPER_go>
    422c:	df 91       	pop	r29
    422e:	cf 91       	pop	r28
    4230:	1f 91       	pop	r17
    4232:	0f 91       	pop	r16
    4234:	ff 90       	pop	r15
    4236:	ef 90       	pop	r14
    4238:	df 90       	pop	r13
    423a:	cf 90       	pop	r12
    423c:	bf 90       	pop	r11
    423e:	af 90       	pop	r10
    4240:	9f 90       	pop	r9
    4242:	8f 90       	pop	r8
    4244:	08 95       	ret

00004246 <STEPPER_stop>:
    4246:	0f 93       	push	r16
    4248:	1f 93       	push	r17
    424a:	18 2f       	mov	r17, r24
    424c:	06 2f       	mov	r16, r22
    424e:	66 23       	and	r22, r22
    4250:	49 f4       	brne	.+18     	; 0x4264 <STEPPER_stop+0x1e>
    4252:	60 e0       	ldi	r22, 0x00	; 0
    4254:	70 e0       	ldi	r23, 0x00	; 0
    4256:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <STEPPER_set_speed>
    425a:	81 2f       	mov	r24, r17
    425c:	60 e0       	ldi	r22, 0x00	; 0
    425e:	70 e0       	ldi	r23, 0x00	; 0
    4260:	0e 94 7c 20 	call	0x40f8	; 0x40f8 <STEPPER_set_steps>
    4264:	81 e0       	ldi	r24, 0x01	; 1
    4266:	80 93 3e 07 	sts	0x073E, r24
    426a:	11 30       	cpi	r17, 0x01	; 1
    426c:	51 f0       	breq	.+20     	; 0x4282 <STEPPER_stop+0x3c>
    426e:	11 30       	cpi	r17, 0x01	; 1
    4270:	18 f0       	brcs	.+6      	; 0x4278 <STEPPER_stop+0x32>
    4272:	12 30       	cpi	r17, 0x02	; 2
    4274:	41 f4       	brne	.+16     	; 0x4286 <STEPPER_stop+0x40>
    4276:	03 c0       	rjmp	.+6      	; 0x427e <STEPPER_stop+0x38>
    4278:	00 93 26 07 	sts	0x0726, r16
    427c:	04 c0       	rjmp	.+8      	; 0x4286 <STEPPER_stop+0x40>
    427e:	00 93 26 07 	sts	0x0726, r16
    4282:	00 93 27 07 	sts	0x0727, r16
    4286:	10 92 3e 07 	sts	0x073E, r1
    428a:	1f 91       	pop	r17
    428c:	0f 91       	pop	r16
    428e:	08 95       	ret

00004290 <STEPPER_wait_and_then>:
    4290:	cf 92       	push	r12
    4292:	df 92       	push	r13
    4294:	ef 92       	push	r14
    4296:	ff 92       	push	r15
    4298:	0f 93       	push	r16
    429a:	1f 93       	push	r17
    429c:	df 93       	push	r29
    429e:	cf 93       	push	r28
    42a0:	cd b7       	in	r28, 0x3d	; 61
    42a2:	de b7       	in	r29, 0x3e	; 62
    42a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    42a6:	81 30       	cpi	r24, 0x01	; 1
    42a8:	61 f0       	breq	.+24     	; 0x42c2 <STEPPER_wait_and_then+0x32>
    42aa:	81 30       	cpi	r24, 0x01	; 1
    42ac:	18 f0       	brcs	.+6      	; 0x42b4 <STEPPER_wait_and_then+0x24>
    42ae:	82 30       	cpi	r24, 0x02	; 2
    42b0:	a1 f5       	brne	.+104    	; 0x431a <STEPPER_wait_and_then+0x8a>
    42b2:	11 c0       	rjmp	.+34     	; 0x42d6 <STEPPER_wait_and_then+0x46>
    42b4:	ec 85       	ldd	r30, Y+12	; 0x0c
    42b6:	fd 85       	ldd	r31, Y+13	; 0x0d
    42b8:	80 91 3f 07 	lds	r24, 0x073F
    42bc:	88 23       	and	r24, r24
    42be:	e1 f3       	breq	.-8      	; 0x42b8 <STEPPER_wait_and_then+0x28>
    42c0:	06 c0       	rjmp	.+12     	; 0x42ce <STEPPER_wait_and_then+0x3e>
    42c2:	ec 85       	ldd	r30, Y+12	; 0x0c
    42c4:	fd 85       	ldd	r31, Y+13	; 0x0d
    42c6:	80 91 40 07 	lds	r24, 0x0740
    42ca:	88 23       	and	r24, r24
    42cc:	e1 f3       	breq	.-8      	; 0x42c6 <STEPPER_wait_and_then+0x36>
    42ce:	30 97       	sbiw	r30, 0x00	; 0
    42d0:	21 f1       	breq	.+72     	; 0x431a <STEPPER_wait_and_then+0x8a>
    42d2:	09 95       	icall
    42d4:	22 c0       	rjmp	.+68     	; 0x431a <STEPPER_wait_and_then+0x8a>
    42d6:	cc 84       	ldd	r12, Y+12	; 0x0c
    42d8:	dd 84       	ldd	r13, Y+13	; 0x0d
    42da:	ee 84       	ldd	r14, Y+14	; 0x0e
    42dc:	ff 84       	ldd	r15, Y+15	; 0x0f
    42de:	00 e0       	ldi	r16, 0x00	; 0
    42e0:	10 e0       	ldi	r17, 0x00	; 0
    42e2:	00 23       	and	r16, r16
    42e4:	51 f4       	brne	.+20     	; 0x42fa <STEPPER_wait_and_then+0x6a>
    42e6:	80 91 3f 07 	lds	r24, 0x073F
    42ea:	88 23       	and	r24, r24
    42ec:	31 f0       	breq	.+12     	; 0x42fa <STEPPER_wait_and_then+0x6a>
    42ee:	c1 14       	cp	r12, r1
    42f0:	d1 04       	cpc	r13, r1
    42f2:	11 f0       	breq	.+4      	; 0x42f8 <STEPPER_wait_and_then+0x68>
    42f4:	f6 01       	movw	r30, r12
    42f6:	09 95       	icall
    42f8:	01 e0       	ldi	r16, 0x01	; 1
    42fa:	11 23       	and	r17, r17
    42fc:	51 f4       	brne	.+20     	; 0x4312 <STEPPER_wait_and_then+0x82>
    42fe:	80 91 40 07 	lds	r24, 0x0740
    4302:	88 23       	and	r24, r24
    4304:	31 f0       	breq	.+12     	; 0x4312 <STEPPER_wait_and_then+0x82>
    4306:	e1 14       	cp	r14, r1
    4308:	f1 04       	cpc	r15, r1
    430a:	11 f0       	breq	.+4      	; 0x4310 <STEPPER_wait_and_then+0x80>
    430c:	f7 01       	movw	r30, r14
    430e:	09 95       	icall
    4310:	11 e0       	ldi	r17, 0x01	; 1
    4312:	00 23       	and	r16, r16
    4314:	31 f3       	breq	.-52     	; 0x42e2 <STEPPER_wait_and_then+0x52>
    4316:	11 23       	and	r17, r17
    4318:	21 f3       	breq	.-56     	; 0x42e2 <STEPPER_wait_and_then+0x52>
    431a:	cf 91       	pop	r28
    431c:	df 91       	pop	r29
    431e:	1f 91       	pop	r17
    4320:	0f 91       	pop	r16
    4322:	ff 90       	pop	r15
    4324:	ef 90       	pop	r14
    4326:	df 90       	pop	r13
    4328:	cf 90       	pop	r12
    432a:	08 95       	ret

0000432c <SYS_get_state>:
    432c:	e8 2f       	mov	r30, r24
    432e:	f0 e0       	ldi	r31, 0x00	; 0
    4330:	e3 31       	cpi	r30, 0x13	; 19
    4332:	f1 05       	cpc	r31, r1
    4334:	40 f4       	brcc	.+16     	; 0x4346 <SYS_get_state+0x1a>
    4336:	e2 5c       	subi	r30, 0xC2	; 194
    4338:	ff 4f       	sbci	r31, 0xFF	; 255
    433a:	ee 0f       	add	r30, r30
    433c:	ff 1f       	adc	r31, r31
    433e:	05 90       	lpm	r0, Z+
    4340:	f4 91       	lpm	r31, Z+
    4342:	e0 2d       	mov	r30, r0
    4344:	09 94       	ijmp
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	08 95       	ret
    434a:	80 91 41 07 	lds	r24, 0x0741
    434e:	08 95       	ret
    4350:	80 91 42 07 	lds	r24, 0x0742
    4354:	08 95       	ret
    4356:	80 91 43 07 	lds	r24, 0x0743
    435a:	08 95       	ret
    435c:	80 91 44 07 	lds	r24, 0x0744
    4360:	08 95       	ret
    4362:	80 91 45 07 	lds	r24, 0x0745
    4366:	08 95       	ret
    4368:	80 91 47 07 	lds	r24, 0x0747
    436c:	08 95       	ret
    436e:	80 91 46 07 	lds	r24, 0x0746
    4372:	08 95       	ret
    4374:	80 91 48 07 	lds	r24, 0x0748
    4378:	08 95       	ret
    437a:	80 91 49 07 	lds	r24, 0x0749
    437e:	08 95       	ret
    4380:	80 91 4a 07 	lds	r24, 0x074A
    4384:	08 95       	ret
    4386:	80 91 4b 07 	lds	r24, 0x074B
    438a:	08 95       	ret
    438c:	80 91 4c 07 	lds	r24, 0x074C
    4390:	08 95       	ret
    4392:	80 91 4d 07 	lds	r24, 0x074D
    4396:	08 95       	ret
    4398:	80 91 4e 07 	lds	r24, 0x074E
    439c:	08 95       	ret
    439e:	80 91 4f 07 	lds	r24, 0x074F
    43a2:	08 95       	ret
    43a4:	80 91 50 07 	lds	r24, 0x0750
    43a8:	08 95       	ret
    43aa:	80 91 51 07 	lds	r24, 0x0751
    43ae:	08 95       	ret
    43b0:	80 91 52 07 	lds	r24, 0x0752
    43b4:	08 95       	ret
    43b6:	80 91 53 07 	lds	r24, 0x0753
    43ba:	08 95       	ret

000043bc <SYS_set_state>:
    43bc:	e8 2f       	mov	r30, r24
    43be:	f0 e0       	ldi	r31, 0x00	; 0
    43c0:	e3 31       	cpi	r30, 0x13	; 19
    43c2:	f1 05       	cpc	r31, r1
    43c4:	08 f0       	brcs	.+2      	; 0x43c8 <SYS_set_state+0xc>
    43c6:	40 c0       	rjmp	.+128    	; 0x4448 <SYS_set_state+0x8c>
    43c8:	ef 5a       	subi	r30, 0xAF	; 175
    43ca:	ff 4f       	sbci	r31, 0xFF	; 255
    43cc:	ee 0f       	add	r30, r30
    43ce:	ff 1f       	adc	r31, r31
    43d0:	05 90       	lpm	r0, Z+
    43d2:	f4 91       	lpm	r31, Z+
    43d4:	e0 2d       	mov	r30, r0
    43d6:	09 94       	ijmp
    43d8:	60 93 41 07 	sts	0x0741, r22
    43dc:	08 95       	ret
    43de:	60 93 42 07 	sts	0x0742, r22
    43e2:	08 95       	ret
    43e4:	60 93 43 07 	sts	0x0743, r22
    43e8:	08 95       	ret
    43ea:	60 93 44 07 	sts	0x0744, r22
    43ee:	08 95       	ret
    43f0:	60 93 45 07 	sts	0x0745, r22
    43f4:	08 95       	ret
    43f6:	60 93 47 07 	sts	0x0747, r22
    43fa:	08 95       	ret
    43fc:	60 93 46 07 	sts	0x0746, r22
    4400:	08 95       	ret
    4402:	60 93 48 07 	sts	0x0748, r22
    4406:	08 95       	ret
    4408:	60 93 49 07 	sts	0x0749, r22
    440c:	08 95       	ret
    440e:	60 93 4a 07 	sts	0x074A, r22
    4412:	08 95       	ret
    4414:	60 93 4b 07 	sts	0x074B, r22
    4418:	08 95       	ret
    441a:	60 93 4c 07 	sts	0x074C, r22
    441e:	08 95       	ret
    4420:	60 93 4d 07 	sts	0x074D, r22
    4424:	08 95       	ret
    4426:	60 93 4e 07 	sts	0x074E, r22
    442a:	08 95       	ret
    442c:	60 93 4f 07 	sts	0x074F, r22
    4430:	08 95       	ret
    4432:	60 93 50 07 	sts	0x0750, r22
    4436:	08 95       	ret
    4438:	60 93 51 07 	sts	0x0751, r22
    443c:	08 95       	ret
    443e:	60 93 52 07 	sts	0x0752, r22
    4442:	08 95       	ret
    4444:	60 93 51 07 	sts	0x0751, r22
    4448:	08 95       	ret

0000444a <ATTINY_get_sensors>:
    444a:	0f 93       	push	r16
    444c:	1f 93       	push	r17
    444e:	81 e0       	ldi	r24, 0x01	; 1
    4450:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    4454:	81 30       	cpi	r24, 0x01	; 1
    4456:	11 f0       	breq	.+4      	; 0x445c <ATTINY_get_sensors+0x12>
    4458:	00 e0       	ldi	r16, 0x00	; 0
    445a:	24 c0       	rjmp	.+72     	; 0x44a4 <ATTINY_get_sensors+0x5a>
    445c:	87 e0       	ldi	r24, 0x07	; 7
    445e:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <SPI_set_slave_addr>
    4462:	82 e0       	ldi	r24, 0x02	; 2
    4464:	6a e0       	ldi	r22, 0x0A	; 10
    4466:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <SPI_transmit>
    446a:	82 e0       	ldi	r24, 0x02	; 2
    446c:	62 eb       	ldi	r22, 0xB2	; 178
    446e:	0e 94 84 1d 	call	0x3b08	; 0x3b08 <SPI_transmit>
    4472:	18 ec       	ldi	r17, 0xC8	; 200
    4474:	81 2f       	mov	r24, r17
    4476:	8a 95       	dec	r24
    4478:	f1 f7       	brne	.-4      	; 0x4476 <ATTINY_get_sensors+0x2c>
    447a:	82 e0       	ldi	r24, 0x02	; 2
    447c:	60 e0       	ldi	r22, 0x00	; 0
    447e:	0e 94 00 28 	call	0x5000	; 0x5000 <SPI_receive>
    4482:	08 2f       	mov	r16, r24
    4484:	81 2f       	mov	r24, r17
    4486:	8a 95       	dec	r24
    4488:	f1 f7       	brne	.-4      	; 0x4486 <ATTINY_get_sensors+0x3c>
    448a:	82 e0       	ldi	r24, 0x02	; 2
    448c:	60 e0       	ldi	r22, 0x00	; 0
    448e:	0e 94 00 28 	call	0x5000	; 0x5000 <SPI_receive>
    4492:	1a 95       	dec	r17
    4494:	f1 f7       	brne	.-4      	; 0x4492 <ATTINY_get_sensors+0x48>
    4496:	87 e0       	ldi	r24, 0x07	; 7
    4498:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <SPI_set_slave_addr>
    449c:	88 e8       	ldi	r24, 0x88	; 136
    449e:	93 e1       	ldi	r25, 0x13	; 19
    44a0:	01 97       	sbiw	r24, 0x01	; 1
    44a2:	f1 f7       	brne	.-4      	; 0x44a0 <ATTINY_get_sensors+0x56>
    44a4:	80 2f       	mov	r24, r16
    44a6:	1f 91       	pop	r17
    44a8:	0f 91       	pop	r16
    44aa:	08 95       	ret

000044ac <ATTINY_get_SW_state>:
    44ac:	1f 93       	push	r17
    44ae:	cf 93       	push	r28
    44b0:	df 93       	push	r29
    44b2:	18 2f       	mov	r17, r24
    44b4:	80 91 d5 03 	lds	r24, 0x03D5
    44b8:	88 23       	and	r24, r24
    44ba:	41 f0       	breq	.+16     	; 0x44cc <ATTINY_get_SW_state+0x20>
    44bc:	80 91 df 03 	lds	r24, 0x03DF
    44c0:	88 23       	and	r24, r24
    44c2:	99 f0       	breq	.+38     	; 0x44ea <ATTINY_get_SW_state+0x3e>
    44c4:	10 92 d5 03 	sts	0x03D5, r1
    44c8:	10 92 df 03 	sts	0x03DF, r1
    44cc:	0e 94 25 22 	call	0x444a	; 0x444a <ATTINY_get_sensors>
    44d0:	80 93 d4 03 	sts	0x03D4, r24
    44d4:	89 ed       	ldi	r24, 0xD9	; 217
    44d6:	93 e0       	ldi	r25, 0x03	; 3
    44d8:	61 e0       	ldi	r22, 0x01	; 1
    44da:	40 e0       	ldi	r20, 0x00	; 0
    44dc:	22 e3       	ldi	r18, 0x32	; 50
    44de:	30 e0       	ldi	r19, 0x00	; 0
    44e0:	0e 94 14 23 	call	0x4628	; 0x4628 <TMRSRVC_new>
    44e4:	81 e0       	ldi	r24, 0x01	; 1
    44e6:	80 93 d5 03 	sts	0x03D5, r24
    44ea:	90 91 d4 03 	lds	r25, 0x03D4
    44ee:	a1 2f       	mov	r26, r17
    44f0:	b0 e0       	ldi	r27, 0x00	; 0
    44f2:	ed 01       	movw	r28, r26
    44f4:	c1 5a       	subi	r28, 0xA1	; 161
    44f6:	dc 4f       	sbci	r29, 0xFC	; 252
    44f8:	88 81       	ld	r24, Y
    44fa:	88 23       	and	r24, r24
    44fc:	69 f0       	breq	.+26     	; 0x4518 <ATTINY_get_SW_state+0x6c>
    44fe:	fd 01       	movw	r30, r26
    4500:	ee 59       	subi	r30, 0x9E	; 158
    4502:	fc 4f       	sbci	r31, 0xFC	; 252
    4504:	80 81       	ld	r24, Z
    4506:	98 23       	and	r25, r24
    4508:	c1 f0       	breq	.+48     	; 0x453a <ATTINY_get_SW_state+0x8e>
    450a:	fd 01       	movw	r30, r26
    450c:	ea 52       	subi	r30, 0x2A	; 42
    450e:	fc 4f       	sbci	r31, 0xFC	; 252
    4510:	81 e0       	ldi	r24, 0x01	; 1
    4512:	80 83       	st	Z, r24
    4514:	18 82       	st	Y, r1
    4516:	11 c0       	rjmp	.+34     	; 0x453a <ATTINY_get_SW_state+0x8e>
    4518:	fd 01       	movw	r30, r26
    451a:	ea 52       	subi	r30, 0x2A	; 42
    451c:	fc 4f       	sbci	r31, 0xFC	; 252
    451e:	80 81       	ld	r24, Z
    4520:	81 11       	cpse	r24, r1
    4522:	10 82       	st	Z, r1
    4524:	fd 01       	movw	r30, r26
    4526:	ee 59       	subi	r30, 0x9E	; 158
    4528:	fc 4f       	sbci	r31, 0xFC	; 252
    452a:	80 81       	ld	r24, Z
    452c:	98 23       	and	r25, r24
    452e:	29 f4       	brne	.+10     	; 0x453a <ATTINY_get_SW_state+0x8e>
    4530:	fd 01       	movw	r30, r26
    4532:	e1 5a       	subi	r30, 0xA1	; 161
    4534:	fc 4f       	sbci	r31, 0xFC	; 252
    4536:	81 e0       	ldi	r24, 0x01	; 1
    4538:	80 83       	st	Z, r24
    453a:	aa 52       	subi	r26, 0x2A	; 42
    453c:	bc 4f       	sbci	r27, 0xFC	; 252
    453e:	8c 91       	ld	r24, X
    4540:	df 91       	pop	r29
    4542:	cf 91       	pop	r28
    4544:	1f 91       	pop	r17
    4546:	08 95       	ret

00004548 <ATTINY_open>:
    4548:	82 e0       	ldi	r24, 0x02	; 2
    454a:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    454e:	88 23       	and	r24, r24
    4550:	19 f4       	brne	.+6      	; 0x4558 <ATTINY_open+0x10>
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	82 e0       	ldi	r24, 0x02	; 2
    4556:	08 95       	ret
    4558:	10 92 6f 07 	sts	0x076F, r1
    455c:	10 92 6e 07 	sts	0x076E, r1
    4560:	10 92 71 07 	sts	0x0771, r1
    4564:	10 92 70 07 	sts	0x0770, r1
    4568:	10 92 73 07 	sts	0x0773, r1
    456c:	10 92 72 07 	sts	0x0772, r1
    4570:	10 92 75 07 	sts	0x0775, r1
    4574:	10 92 74 07 	sts	0x0774, r1
    4578:	10 92 77 07 	sts	0x0777, r1
    457c:	10 92 76 07 	sts	0x0776, r1
    4580:	80 e9       	ldi	r24, 0x90	; 144
    4582:	91 e0       	ldi	r25, 0x01	; 1
    4584:	90 93 5b 07 	sts	0x075B, r25
    4588:	80 93 5a 07 	sts	0x075A, r24
    458c:	90 93 5d 07 	sts	0x075D, r25
    4590:	80 93 5c 07 	sts	0x075C, r24
    4594:	90 93 5f 07 	sts	0x075F, r25
    4598:	80 93 5e 07 	sts	0x075E, r24
    459c:	90 93 61 07 	sts	0x0761, r25
    45a0:	80 93 60 07 	sts	0x0760, r24
    45a4:	90 93 63 07 	sts	0x0763, r25
    45a8:	80 93 62 07 	sts	0x0762, r24
    45ac:	84 e3       	ldi	r24, 0x34	; 52
    45ae:	98 e0       	ldi	r25, 0x08	; 8
    45b0:	90 93 65 07 	sts	0x0765, r25
    45b4:	80 93 64 07 	sts	0x0764, r24
    45b8:	90 93 67 07 	sts	0x0767, r25
    45bc:	80 93 66 07 	sts	0x0766, r24
    45c0:	90 93 69 07 	sts	0x0769, r25
    45c4:	80 93 68 07 	sts	0x0768, r24
    45c8:	90 93 6b 07 	sts	0x076B, r25
    45cc:	80 93 6a 07 	sts	0x076A, r24
    45d0:	90 93 6d 07 	sts	0x076D, r25
    45d4:	80 93 6c 07 	sts	0x076C, r24
    45d8:	81 e0       	ldi	r24, 0x01	; 1
    45da:	61 e0       	ldi	r22, 0x01	; 1
    45dc:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    45e0:	91 e0       	ldi	r25, 0x01	; 1
    45e2:	81 e0       	ldi	r24, 0x01	; 1
    45e4:	08 95       	ret

000045e6 <TMRSRVC_delay>:
    45e6:	df 93       	push	r29
    45e8:	cf 93       	push	r28
    45ea:	cd b7       	in	r28, 0x3d	; 61
    45ec:	de b7       	in	r29, 0x3e	; 62
    45ee:	29 97       	sbiw	r28, 0x09	; 9
    45f0:	0f b6       	in	r0, 0x3f	; 63
    45f2:	f8 94       	cli
    45f4:	de bf       	out	0x3e, r29	; 62
    45f6:	0f be       	out	0x3f, r0	; 63
    45f8:	cd bf       	out	0x3d, r28	; 61
    45fa:	9c 01       	movw	r18, r24
    45fc:	ce 01       	movw	r24, r28
    45fe:	01 96       	adiw	r24, 0x01	; 1
    4600:	61 e0       	ldi	r22, 0x01	; 1
    4602:	40 e0       	ldi	r20, 0x00	; 0
    4604:	0e 94 14 23 	call	0x4628	; 0x4628 <TMRSRVC_new>
    4608:	98 2f       	mov	r25, r24
    460a:	88 23       	and	r24, r24
    460c:	19 f4       	brne	.+6      	; 0x4614 <TMRSRVC_delay+0x2e>
    460e:	8f 81       	ldd	r24, Y+7	; 0x07
    4610:	88 23       	and	r24, r24
    4612:	e9 f3       	breq	.-6      	; 0x460e <TMRSRVC_delay+0x28>
    4614:	89 2f       	mov	r24, r25
    4616:	29 96       	adiw	r28, 0x09	; 9
    4618:	0f b6       	in	r0, 0x3f	; 63
    461a:	f8 94       	cli
    461c:	de bf       	out	0x3e, r29	; 62
    461e:	0f be       	out	0x3f, r0	; 63
    4620:	cd bf       	out	0x3d, r28	; 61
    4622:	cf 91       	pop	r28
    4624:	df 91       	pop	r29
    4626:	08 95       	ret

00004628 <TMRSRVC_new>:
    4628:	ef 92       	push	r14
    462a:	ff 92       	push	r15
    462c:	0f 93       	push	r16
    462e:	1f 93       	push	r17
    4630:	cf 93       	push	r28
    4632:	df 93       	push	r29
    4634:	ec 01       	movw	r28, r24
    4636:	f6 2e       	mov	r15, r22
    4638:	e4 2e       	mov	r14, r20
    463a:	89 01       	movw	r16, r18
    463c:	88 e0       	ldi	r24, 0x08	; 8
    463e:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    4642:	81 30       	cpi	r24, 0x01	; 1
    4644:	11 f0       	breq	.+4      	; 0x464a <TMRSRVC_new+0x22>
    4646:	81 e0       	ldi	r24, 0x01	; 1
    4648:	26 c0       	rjmp	.+76     	; 0x4696 <TMRSRVC_new+0x6e>
    464a:	84 e0       	ldi	r24, 0x04	; 4
    464c:	90 e0       	ldi	r25, 0x00	; 0
    464e:	0e 94 69 36 	call	0x6cd2	; 0x6cd2 <malloc>
    4652:	fc 01       	movw	r30, r24
    4654:	00 97       	sbiw	r24, 0x00	; 0
    4656:	11 f4       	brne	.+4      	; 0x465c <TMRSRVC_new+0x34>
    4658:	82 e0       	ldi	r24, 0x02	; 2
    465a:	1d c0       	rjmp	.+58     	; 0x4696 <TMRSRVC_new+0x6e>
    465c:	f9 82       	std	Y+1, r15	; 0x01
    465e:	f0 fc       	sbrc	r15, 0
    4660:	1e 82       	std	Y+6, r1	; 0x06
    4662:	81 e0       	ldi	r24, 0x01	; 1
    4664:	e8 16       	cp	r14, r24
    4666:	19 f4       	brne	.+6      	; 0x466e <TMRSRVC_new+0x46>
    4668:	89 81       	ldd	r24, Y+1	; 0x01
    466a:	84 60       	ori	r24, 0x04	; 4
    466c:	89 83       	std	Y+1, r24	; 0x01
    466e:	89 81       	ldd	r24, Y+1	; 0x01
    4670:	88 60       	ori	r24, 0x08	; 8
    4672:	89 83       	std	Y+1, r24	; 0x01
    4674:	1b 83       	std	Y+3, r17	; 0x03
    4676:	0a 83       	std	Y+2, r16	; 0x02
    4678:	1d 83       	std	Y+5, r17	; 0x05
    467a:	0c 83       	std	Y+4, r16	; 0x04
    467c:	d1 83       	std	Z+1, r29	; 0x01
    467e:	c0 83       	st	Z, r28
    4680:	13 82       	std	Z+3, r1	; 0x03
    4682:	12 82       	std	Z+2, r1	; 0x02
    4684:	81 e0       	ldi	r24, 0x01	; 1
    4686:	80 93 42 04 	sts	0x0442, r24
    468a:	cf 01       	movw	r24, r30
    468c:	0e 94 a9 29 	call	0x5352	; 0x5352 <TMRSRVC_insert>
    4690:	10 92 42 04 	sts	0x0442, r1
    4694:	80 e0       	ldi	r24, 0x00	; 0
    4696:	df 91       	pop	r29
    4698:	cf 91       	pop	r28
    469a:	1f 91       	pop	r17
    469c:	0f 91       	pop	r16
    469e:	ff 90       	pop	r15
    46a0:	ef 90       	pop	r14
    46a2:	08 95       	ret

000046a4 <I2C_MSTR_get>:
    46a4:	fc 01       	movw	r30, r24
    46a6:	80 91 7b 07 	lds	r24, 0x077B
    46aa:	81 30       	cpi	r24, 0x01	; 1
    46ac:	11 f0       	breq	.+4      	; 0x46b2 <I2C_MSTR_get+0xe>
    46ae:	85 e0       	ldi	r24, 0x05	; 5
    46b0:	08 95       	ret
    46b2:	80 91 7c 07 	lds	r24, 0x077C
    46b6:	81 30       	cpi	r24, 0x01	; 1
    46b8:	11 f0       	breq	.+4      	; 0x46be <I2C_MSTR_get+0x1a>
    46ba:	8a e0       	ldi	r24, 0x0A	; 10
    46bc:	08 95       	ret
    46be:	61 30       	cpi	r22, 0x01	; 1
    46c0:	11 f4       	brne	.+4      	; 0x46c6 <I2C_MSTR_get+0x22>
    46c2:	84 ec       	ldi	r24, 0xC4	; 196
    46c4:	01 c0       	rjmp	.+2      	; 0x46c8 <I2C_MSTR_get+0x24>
    46c6:	84 e8       	ldi	r24, 0x84	; 132
    46c8:	80 93 bc 00 	sts	0x00BC, r24
    46cc:	80 91 bc 00 	lds	r24, 0x00BC
    46d0:	87 ff       	sbrs	r24, 7
    46d2:	fc cf       	rjmp	.-8      	; 0x46cc <I2C_MSTR_get+0x28>
    46d4:	61 30       	cpi	r22, 0x01	; 1
    46d6:	31 f4       	brne	.+12     	; 0x46e4 <I2C_MSTR_get+0x40>
    46d8:	80 91 b9 00 	lds	r24, 0x00B9
    46dc:	88 7f       	andi	r24, 0xF8	; 248
    46de:	80 35       	cpi	r24, 0x50	; 80
    46e0:	59 f4       	brne	.+22     	; 0x46f8 <I2C_MSTR_get+0x54>
    46e2:	05 c0       	rjmp	.+10     	; 0x46ee <I2C_MSTR_get+0x4a>
    46e4:	80 91 b9 00 	lds	r24, 0x00B9
    46e8:	88 7f       	andi	r24, 0xF8	; 248
    46ea:	88 35       	cpi	r24, 0x58	; 88
    46ec:	29 f4       	brne	.+10     	; 0x46f8 <I2C_MSTR_get+0x54>
    46ee:	80 91 bb 00 	lds	r24, 0x00BB
    46f2:	80 83       	st	Z, r24
    46f4:	80 e0       	ldi	r24, 0x00	; 0
    46f6:	08 95       	ret
    46f8:	82 e0       	ldi	r24, 0x02	; 2
    46fa:	08 95       	ret

000046fc <I2C_MSTR_send>:
    46fc:	98 2f       	mov	r25, r24
    46fe:	80 91 7b 07 	lds	r24, 0x077B
    4702:	81 30       	cpi	r24, 0x01	; 1
    4704:	11 f0       	breq	.+4      	; 0x470a <I2C_MSTR_send+0xe>
    4706:	85 e0       	ldi	r24, 0x05	; 5
    4708:	08 95       	ret
    470a:	80 91 7c 07 	lds	r24, 0x077C
    470e:	81 30       	cpi	r24, 0x01	; 1
    4710:	11 f0       	breq	.+4      	; 0x4716 <I2C_MSTR_send+0x1a>
    4712:	8a e0       	ldi	r24, 0x0A	; 10
    4714:	08 95       	ret
    4716:	90 93 bb 00 	sts	0x00BB, r25
    471a:	84 e8       	ldi	r24, 0x84	; 132
    471c:	80 93 bc 00 	sts	0x00BC, r24
    4720:	80 91 bc 00 	lds	r24, 0x00BC
    4724:	87 ff       	sbrs	r24, 7
    4726:	fc cf       	rjmp	.-8      	; 0x4720 <I2C_MSTR_send+0x24>
    4728:	80 91 b9 00 	lds	r24, 0x00B9
    472c:	90 e0       	ldi	r25, 0x00	; 0
    472e:	88 7f       	andi	r24, 0xF8	; 248
    4730:	90 70       	andi	r25, 0x00	; 0
    4732:	88 32       	cpi	r24, 0x28	; 40
    4734:	91 05       	cpc	r25, r1
    4736:	21 f0       	breq	.+8      	; 0x4740 <I2C_MSTR_send+0x44>
    4738:	c0 97       	sbiw	r24, 0x30	; 48
    473a:	21 f4       	brne	.+8      	; 0x4744 <I2C_MSTR_send+0x48>
    473c:	83 e0       	ldi	r24, 0x03	; 3
    473e:	08 95       	ret
    4740:	80 e0       	ldi	r24, 0x00	; 0
    4742:	08 95       	ret
    4744:	8c e0       	ldi	r24, 0x0C	; 12
    4746:	08 95       	ret

00004748 <I2C_MSTR_start>:
    4748:	98 2f       	mov	r25, r24
    474a:	20 91 7b 07 	lds	r18, 0x077B
    474e:	21 30       	cpi	r18, 0x01	; 1
    4750:	11 f0       	breq	.+4      	; 0x4756 <I2C_MSTR_start+0xe>
    4752:	85 e0       	ldi	r24, 0x05	; 5
    4754:	08 95       	ret
    4756:	80 91 7d 07 	lds	r24, 0x077D
    475a:	81 30       	cpi	r24, 0x01	; 1
    475c:	11 f4       	brne	.+4      	; 0x4762 <I2C_MSTR_start+0x1a>
    475e:	89 e0       	ldi	r24, 0x09	; 9
    4760:	08 95       	ret
    4762:	20 93 7c 07 	sts	0x077C, r18
    4766:	84 ea       	ldi	r24, 0xA4	; 164
    4768:	80 93 bc 00 	sts	0x00BC, r24
    476c:	80 91 bc 00 	lds	r24, 0x00BC
    4770:	87 ff       	sbrs	r24, 7
    4772:	fc cf       	rjmp	.-8      	; 0x476c <I2C_MSTR_start+0x24>
    4774:	80 91 b9 00 	lds	r24, 0x00B9
    4778:	88 7f       	andi	r24, 0xF8	; 248
    477a:	88 30       	cpi	r24, 0x08	; 8
    477c:	39 f0       	breq	.+14     	; 0x478c <I2C_MSTR_start+0x44>
    477e:	80 91 b9 00 	lds	r24, 0x00B9
    4782:	88 7f       	andi	r24, 0xF8	; 248
    4784:	80 31       	cpi	r24, 0x10	; 16
    4786:	11 f0       	breq	.+4      	; 0x478c <I2C_MSTR_start+0x44>
    4788:	81 e0       	ldi	r24, 0x01	; 1
    478a:	08 95       	ret
    478c:	61 30       	cpi	r22, 0x01	; 1
    478e:	19 f4       	brne	.+6      	; 0x4796 <I2C_MSTR_start+0x4e>
    4790:	99 0f       	add	r25, r25
    4792:	91 60       	ori	r25, 0x01	; 1
    4794:	03 c0       	rjmp	.+6      	; 0x479c <I2C_MSTR_start+0x54>
    4796:	66 23       	and	r22, r22
    4798:	19 f4       	brne	.+6      	; 0x47a0 <I2C_MSTR_start+0x58>
    479a:	99 0f       	add	r25, r25
    479c:	90 93 bb 00 	sts	0x00BB, r25
    47a0:	84 e8       	ldi	r24, 0x84	; 132
    47a2:	80 93 bc 00 	sts	0x00BC, r24
    47a6:	80 91 bc 00 	lds	r24, 0x00BC
    47aa:	87 ff       	sbrs	r24, 7
    47ac:	fc cf       	rjmp	.-8      	; 0x47a6 <I2C_MSTR_start+0x5e>
    47ae:	61 30       	cpi	r22, 0x01	; 1
    47b0:	31 f4       	brne	.+12     	; 0x47be <I2C_MSTR_start+0x76>
    47b2:	80 91 b9 00 	lds	r24, 0x00B9
    47b6:	88 7f       	andi	r24, 0xF8	; 248
    47b8:	80 34       	cpi	r24, 0x40	; 64
    47ba:	41 f4       	brne	.+16     	; 0x47cc <I2C_MSTR_start+0x84>
    47bc:	09 c0       	rjmp	.+18     	; 0x47d0 <I2C_MSTR_start+0x88>
    47be:	66 23       	and	r22, r22
    47c0:	39 f4       	brne	.+14     	; 0x47d0 <I2C_MSTR_start+0x88>
    47c2:	80 91 b9 00 	lds	r24, 0x00B9
    47c6:	88 7f       	andi	r24, 0xF8	; 248
    47c8:	88 31       	cpi	r24, 0x18	; 24
    47ca:	11 f0       	breq	.+4      	; 0x47d0 <I2C_MSTR_start+0x88>
    47cc:	82 e0       	ldi	r24, 0x02	; 2
    47ce:	08 95       	ret
    47d0:	80 e0       	ldi	r24, 0x00	; 0
    47d2:	08 95       	ret

000047d4 <I2C_MSTR_stop>:
    47d4:	80 91 7c 07 	lds	r24, 0x077C
    47d8:	81 30       	cpi	r24, 0x01	; 1
    47da:	11 f0       	breq	.+4      	; 0x47e0 <I2C_MSTR_stop+0xc>
    47dc:	8a e0       	ldi	r24, 0x0A	; 10
    47de:	08 95       	ret
    47e0:	80 91 7e 07 	lds	r24, 0x077E
    47e4:	81 30       	cpi	r24, 0x01	; 1
    47e6:	29 f4       	brne	.+10     	; 0x47f2 <I2C_MSTR_stop+0x1e>
    47e8:	85 e9       	ldi	r24, 0x95	; 149
    47ea:	80 93 bc 00 	sts	0x00BC, r24
    47ee:	80 e0       	ldi	r24, 0x00	; 0
    47f0:	08 95       	ret
    47f2:	84 e9       	ldi	r24, 0x94	; 148
    47f4:	80 93 bc 00 	sts	0x00BC, r24
    47f8:	80 e0       	ldi	r24, 0x00	; 0
    47fa:	08 95       	ret

000047fc <I2C_open>:
    47fc:	82 e1       	ldi	r24, 0x12	; 18
    47fe:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    4802:	88 23       	and	r24, r24
    4804:	b1 f4       	brne	.+44     	; 0x4832 <I2C_open+0x36>
    4806:	10 92 7b 07 	sts	0x077B, r1
    480a:	10 92 7c 07 	sts	0x077C, r1
    480e:	10 92 7d 07 	sts	0x077D, r1
    4812:	10 92 7e 07 	sts	0x077E, r1
    4816:	10 92 7f 07 	sts	0x077F, r1
    481a:	0e 94 45 2a 	call	0x548a	; 0x548a <__I2C_init>
    481e:	87 e1       	ldi	r24, 0x17	; 23
    4820:	60 e0       	ldi	r22, 0x00	; 0
    4822:	0e 94 1c 24 	call	0x4838	; 0x4838 <I2C_set_BRG>
    4826:	0e 94 3b 2a 	call	0x5476	; 0x5476 <I2C_enable>
    482a:	82 e1       	ldi	r24, 0x12	; 18
    482c:	61 e0       	ldi	r22, 0x01	; 1
    482e:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    4832:	82 e1       	ldi	r24, 0x12	; 18
    4834:	90 e0       	ldi	r25, 0x00	; 0
    4836:	08 95       	ret

00004838 <I2C_set_BRG>:
    4838:	63 70       	andi	r22, 0x03	; 3
    483a:	60 93 b9 00 	sts	0x00B9, r22
    483e:	80 93 b8 00 	sts	0x00B8, r24
    4842:	81 e0       	ldi	r24, 0x01	; 1
    4844:	80 93 7b 07 	sts	0x077B, r24
    4848:	08 95       	ret

0000484a <__ADC_init>:
    484a:	8f e1       	ldi	r24, 0x1F	; 31
    484c:	80 93 7c 00 	sts	0x007C, r24
    4850:	ea e7       	ldi	r30, 0x7A	; 122
    4852:	f0 e0       	ldi	r31, 0x00	; 0
    4854:	87 e0       	ldi	r24, 0x07	; 7
    4856:	80 83       	st	Z, r24
    4858:	80 81       	ld	r24, Z
    485a:	80 68       	ori	r24, 0x80	; 128
    485c:	80 83       	st	Z, r24
    485e:	08 95       	ret

00004860 <CBOT_init>:
    4860:	0e 94 86 29 	call	0x530c	; 0x530c <SYS_init>
    4864:	0e 94 62 27 	call	0x4ec4	; 0x4ec4 <ATMEGA_open>
    4868:	0e 94 92 26 	call	0x4d24	; 0x4d24 <ISR_open>
    486c:	0e 94 12 2a 	call	0x5424	; 0x5424 <TMRSRVC_open>
    4870:	0e 94 c7 27 	call	0x4f8e	; 0x4f8e <SPI_open>
    4874:	0e 94 a4 22 	call	0x4548	; 0x4548 <ATTINY_open>
    4878:	78 94       	sei
    487a:	08 95       	ret

0000487c <CBOT_ISR_init>:
    487c:	00 00       	nop
    487e:	08 95       	ret

00004880 <__vector_16>:
    4880:	1f 92       	push	r1
    4882:	0f 92       	push	r0
    4884:	0f b6       	in	r0, 0x3f	; 63
    4886:	0f 92       	push	r0
    4888:	11 24       	eor	r1, r1
    488a:	2f 93       	push	r18
    488c:	3f 93       	push	r19
    488e:	4f 93       	push	r20
    4890:	5f 93       	push	r21
    4892:	6f 93       	push	r22
    4894:	7f 93       	push	r23
    4896:	8f 93       	push	r24
    4898:	9f 93       	push	r25
    489a:	af 93       	push	r26
    489c:	bf 93       	push	r27
    489e:	ef 93       	push	r30
    48a0:	ff 93       	push	r31
    48a2:	e0 91 02 04 	lds	r30, 0x0402
    48a6:	f0 91 03 04 	lds	r31, 0x0403
    48aa:	30 97       	sbiw	r30, 0x00	; 0
    48ac:	09 f0       	breq	.+2      	; 0x48b0 <__vector_16+0x30>
    48ae:	09 95       	icall
    48b0:	ff 91       	pop	r31
    48b2:	ef 91       	pop	r30
    48b4:	bf 91       	pop	r27
    48b6:	af 91       	pop	r26
    48b8:	9f 91       	pop	r25
    48ba:	8f 91       	pop	r24
    48bc:	7f 91       	pop	r23
    48be:	6f 91       	pop	r22
    48c0:	5f 91       	pop	r21
    48c2:	4f 91       	pop	r20
    48c4:	3f 91       	pop	r19
    48c6:	2f 91       	pop	r18
    48c8:	0f 90       	pop	r0
    48ca:	0f be       	out	0x3f, r0	; 63
    48cc:	0f 90       	pop	r0
    48ce:	1f 90       	pop	r1
    48d0:	18 95       	reti

000048d2 <__vector_17>:
    48d2:	1f 92       	push	r1
    48d4:	0f 92       	push	r0
    48d6:	0f b6       	in	r0, 0x3f	; 63
    48d8:	0f 92       	push	r0
    48da:	11 24       	eor	r1, r1
    48dc:	2f 93       	push	r18
    48de:	3f 93       	push	r19
    48e0:	4f 93       	push	r20
    48e2:	5f 93       	push	r21
    48e4:	6f 93       	push	r22
    48e6:	7f 93       	push	r23
    48e8:	8f 93       	push	r24
    48ea:	9f 93       	push	r25
    48ec:	af 93       	push	r26
    48ee:	bf 93       	push	r27
    48f0:	ef 93       	push	r30
    48f2:	ff 93       	push	r31
    48f4:	e0 91 04 04 	lds	r30, 0x0404
    48f8:	f0 91 05 04 	lds	r31, 0x0405
    48fc:	30 97       	sbiw	r30, 0x00	; 0
    48fe:	09 f0       	breq	.+2      	; 0x4902 <__vector_17+0x30>
    4900:	09 95       	icall
    4902:	ff 91       	pop	r31
    4904:	ef 91       	pop	r30
    4906:	bf 91       	pop	r27
    4908:	af 91       	pop	r26
    490a:	9f 91       	pop	r25
    490c:	8f 91       	pop	r24
    490e:	7f 91       	pop	r23
    4910:	6f 91       	pop	r22
    4912:	5f 91       	pop	r21
    4914:	4f 91       	pop	r20
    4916:	3f 91       	pop	r19
    4918:	2f 91       	pop	r18
    491a:	0f 90       	pop	r0
    491c:	0f be       	out	0x3f, r0	; 63
    491e:	0f 90       	pop	r0
    4920:	1f 90       	pop	r1
    4922:	18 95       	reti

00004924 <__vector_18>:
    4924:	1f 92       	push	r1
    4926:	0f 92       	push	r0
    4928:	0f b6       	in	r0, 0x3f	; 63
    492a:	0f 92       	push	r0
    492c:	11 24       	eor	r1, r1
    492e:	2f 93       	push	r18
    4930:	3f 93       	push	r19
    4932:	4f 93       	push	r20
    4934:	5f 93       	push	r21
    4936:	6f 93       	push	r22
    4938:	7f 93       	push	r23
    493a:	8f 93       	push	r24
    493c:	9f 93       	push	r25
    493e:	af 93       	push	r26
    4940:	bf 93       	push	r27
    4942:	ef 93       	push	r30
    4944:	ff 93       	push	r31
    4946:	e0 91 06 04 	lds	r30, 0x0406
    494a:	f0 91 07 04 	lds	r31, 0x0407
    494e:	30 97       	sbiw	r30, 0x00	; 0
    4950:	09 f0       	breq	.+2      	; 0x4954 <__vector_18+0x30>
    4952:	09 95       	icall
    4954:	ff 91       	pop	r31
    4956:	ef 91       	pop	r30
    4958:	bf 91       	pop	r27
    495a:	af 91       	pop	r26
    495c:	9f 91       	pop	r25
    495e:	8f 91       	pop	r24
    4960:	7f 91       	pop	r23
    4962:	6f 91       	pop	r22
    4964:	5f 91       	pop	r21
    4966:	4f 91       	pop	r20
    4968:	3f 91       	pop	r19
    496a:	2f 91       	pop	r18
    496c:	0f 90       	pop	r0
    496e:	0f be       	out	0x3f, r0	; 63
    4970:	0f 90       	pop	r0
    4972:	1f 90       	pop	r1
    4974:	18 95       	reti

00004976 <__vector_9>:
    4976:	1f 92       	push	r1
    4978:	0f 92       	push	r0
    497a:	0f b6       	in	r0, 0x3f	; 63
    497c:	0f 92       	push	r0
    497e:	11 24       	eor	r1, r1
    4980:	2f 93       	push	r18
    4982:	3f 93       	push	r19
    4984:	4f 93       	push	r20
    4986:	5f 93       	push	r21
    4988:	6f 93       	push	r22
    498a:	7f 93       	push	r23
    498c:	8f 93       	push	r24
    498e:	9f 93       	push	r25
    4990:	af 93       	push	r26
    4992:	bf 93       	push	r27
    4994:	ef 93       	push	r30
    4996:	ff 93       	push	r31
    4998:	e0 91 f4 03 	lds	r30, 0x03F4
    499c:	f0 91 f5 03 	lds	r31, 0x03F5
    49a0:	30 97       	sbiw	r30, 0x00	; 0
    49a2:	09 f0       	breq	.+2      	; 0x49a6 <__vector_9+0x30>
    49a4:	09 95       	icall
    49a6:	ff 91       	pop	r31
    49a8:	ef 91       	pop	r30
    49aa:	bf 91       	pop	r27
    49ac:	af 91       	pop	r26
    49ae:	9f 91       	pop	r25
    49b0:	8f 91       	pop	r24
    49b2:	7f 91       	pop	r23
    49b4:	6f 91       	pop	r22
    49b6:	5f 91       	pop	r21
    49b8:	4f 91       	pop	r20
    49ba:	3f 91       	pop	r19
    49bc:	2f 91       	pop	r18
    49be:	0f 90       	pop	r0
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	0f 90       	pop	r0
    49c4:	1f 90       	pop	r1
    49c6:	18 95       	reti

000049c8 <__vector_10>:
    49c8:	1f 92       	push	r1
    49ca:	0f 92       	push	r0
    49cc:	0f b6       	in	r0, 0x3f	; 63
    49ce:	0f 92       	push	r0
    49d0:	11 24       	eor	r1, r1
    49d2:	2f 93       	push	r18
    49d4:	3f 93       	push	r19
    49d6:	4f 93       	push	r20
    49d8:	5f 93       	push	r21
    49da:	6f 93       	push	r22
    49dc:	7f 93       	push	r23
    49de:	8f 93       	push	r24
    49e0:	9f 93       	push	r25
    49e2:	af 93       	push	r26
    49e4:	bf 93       	push	r27
    49e6:	ef 93       	push	r30
    49e8:	ff 93       	push	r31
    49ea:	e0 91 f6 03 	lds	r30, 0x03F6
    49ee:	f0 91 f7 03 	lds	r31, 0x03F7
    49f2:	30 97       	sbiw	r30, 0x00	; 0
    49f4:	09 f0       	breq	.+2      	; 0x49f8 <__vector_10+0x30>
    49f6:	09 95       	icall
    49f8:	ff 91       	pop	r31
    49fa:	ef 91       	pop	r30
    49fc:	bf 91       	pop	r27
    49fe:	af 91       	pop	r26
    4a00:	9f 91       	pop	r25
    4a02:	8f 91       	pop	r24
    4a04:	7f 91       	pop	r23
    4a06:	6f 91       	pop	r22
    4a08:	5f 91       	pop	r21
    4a0a:	4f 91       	pop	r20
    4a0c:	3f 91       	pop	r19
    4a0e:	2f 91       	pop	r18
    4a10:	0f 90       	pop	r0
    4a12:	0f be       	out	0x3f, r0	; 63
    4a14:	0f 90       	pop	r0
    4a16:	1f 90       	pop	r1
    4a18:	18 95       	reti

00004a1a <__vector_11>:
    4a1a:	1f 92       	push	r1
    4a1c:	0f 92       	push	r0
    4a1e:	0f b6       	in	r0, 0x3f	; 63
    4a20:	0f 92       	push	r0
    4a22:	11 24       	eor	r1, r1
    4a24:	2f 93       	push	r18
    4a26:	3f 93       	push	r19
    4a28:	4f 93       	push	r20
    4a2a:	5f 93       	push	r21
    4a2c:	6f 93       	push	r22
    4a2e:	7f 93       	push	r23
    4a30:	8f 93       	push	r24
    4a32:	9f 93       	push	r25
    4a34:	af 93       	push	r26
    4a36:	bf 93       	push	r27
    4a38:	ef 93       	push	r30
    4a3a:	ff 93       	push	r31
    4a3c:	e0 91 f8 03 	lds	r30, 0x03F8
    4a40:	f0 91 f9 03 	lds	r31, 0x03F9
    4a44:	30 97       	sbiw	r30, 0x00	; 0
    4a46:	09 f0       	breq	.+2      	; 0x4a4a <__vector_11+0x30>
    4a48:	09 95       	icall
    4a4a:	ff 91       	pop	r31
    4a4c:	ef 91       	pop	r30
    4a4e:	bf 91       	pop	r27
    4a50:	af 91       	pop	r26
    4a52:	9f 91       	pop	r25
    4a54:	8f 91       	pop	r24
    4a56:	7f 91       	pop	r23
    4a58:	6f 91       	pop	r22
    4a5a:	5f 91       	pop	r21
    4a5c:	4f 91       	pop	r20
    4a5e:	3f 91       	pop	r19
    4a60:	2f 91       	pop	r18
    4a62:	0f 90       	pop	r0
    4a64:	0f be       	out	0x3f, r0	; 63
    4a66:	0f 90       	pop	r0
    4a68:	1f 90       	pop	r1
    4a6a:	18 95       	reti

00004a6c <__vector_13>:
    4a6c:	1f 92       	push	r1
    4a6e:	0f 92       	push	r0
    4a70:	0f b6       	in	r0, 0x3f	; 63
    4a72:	0f 92       	push	r0
    4a74:	11 24       	eor	r1, r1
    4a76:	2f 93       	push	r18
    4a78:	3f 93       	push	r19
    4a7a:	4f 93       	push	r20
    4a7c:	5f 93       	push	r21
    4a7e:	6f 93       	push	r22
    4a80:	7f 93       	push	r23
    4a82:	8f 93       	push	r24
    4a84:	9f 93       	push	r25
    4a86:	af 93       	push	r26
    4a88:	bf 93       	push	r27
    4a8a:	ef 93       	push	r30
    4a8c:	ff 93       	push	r31
    4a8e:	e0 91 fc 03 	lds	r30, 0x03FC
    4a92:	f0 91 fd 03 	lds	r31, 0x03FD
    4a96:	30 97       	sbiw	r30, 0x00	; 0
    4a98:	09 f0       	breq	.+2      	; 0x4a9c <__vector_13+0x30>
    4a9a:	09 95       	icall
    4a9c:	ff 91       	pop	r31
    4a9e:	ef 91       	pop	r30
    4aa0:	bf 91       	pop	r27
    4aa2:	af 91       	pop	r26
    4aa4:	9f 91       	pop	r25
    4aa6:	8f 91       	pop	r24
    4aa8:	7f 91       	pop	r23
    4aaa:	6f 91       	pop	r22
    4aac:	5f 91       	pop	r21
    4aae:	4f 91       	pop	r20
    4ab0:	3f 91       	pop	r19
    4ab2:	2f 91       	pop	r18
    4ab4:	0f 90       	pop	r0
    4ab6:	0f be       	out	0x3f, r0	; 63
    4ab8:	0f 90       	pop	r0
    4aba:	1f 90       	pop	r1
    4abc:	18 95       	reti

00004abe <__vector_14>:
    4abe:	1f 92       	push	r1
    4ac0:	0f 92       	push	r0
    4ac2:	0f b6       	in	r0, 0x3f	; 63
    4ac4:	0f 92       	push	r0
    4ac6:	11 24       	eor	r1, r1
    4ac8:	2f 93       	push	r18
    4aca:	3f 93       	push	r19
    4acc:	4f 93       	push	r20
    4ace:	5f 93       	push	r21
    4ad0:	6f 93       	push	r22
    4ad2:	7f 93       	push	r23
    4ad4:	8f 93       	push	r24
    4ad6:	9f 93       	push	r25
    4ad8:	af 93       	push	r26
    4ada:	bf 93       	push	r27
    4adc:	ef 93       	push	r30
    4ade:	ff 93       	push	r31
    4ae0:	e0 91 fe 03 	lds	r30, 0x03FE
    4ae4:	f0 91 ff 03 	lds	r31, 0x03FF
    4ae8:	30 97       	sbiw	r30, 0x00	; 0
    4aea:	09 f0       	breq	.+2      	; 0x4aee <__vector_14+0x30>
    4aec:	09 95       	icall
    4aee:	ff 91       	pop	r31
    4af0:	ef 91       	pop	r30
    4af2:	bf 91       	pop	r27
    4af4:	af 91       	pop	r26
    4af6:	9f 91       	pop	r25
    4af8:	8f 91       	pop	r24
    4afa:	7f 91       	pop	r23
    4afc:	6f 91       	pop	r22
    4afe:	5f 91       	pop	r21
    4b00:	4f 91       	pop	r20
    4b02:	3f 91       	pop	r19
    4b04:	2f 91       	pop	r18
    4b06:	0f 90       	pop	r0
    4b08:	0f be       	out	0x3f, r0	; 63
    4b0a:	0f 90       	pop	r0
    4b0c:	1f 90       	pop	r1
    4b0e:	18 95       	reti

00004b10 <__vector_12>:
    4b10:	1f 92       	push	r1
    4b12:	0f 92       	push	r0
    4b14:	0f b6       	in	r0, 0x3f	; 63
    4b16:	0f 92       	push	r0
    4b18:	11 24       	eor	r1, r1
    4b1a:	2f 93       	push	r18
    4b1c:	3f 93       	push	r19
    4b1e:	4f 93       	push	r20
    4b20:	5f 93       	push	r21
    4b22:	6f 93       	push	r22
    4b24:	7f 93       	push	r23
    4b26:	8f 93       	push	r24
    4b28:	9f 93       	push	r25
    4b2a:	af 93       	push	r26
    4b2c:	bf 93       	push	r27
    4b2e:	ef 93       	push	r30
    4b30:	ff 93       	push	r31
    4b32:	e0 91 fa 03 	lds	r30, 0x03FA
    4b36:	f0 91 fb 03 	lds	r31, 0x03FB
    4b3a:	30 97       	sbiw	r30, 0x00	; 0
    4b3c:	09 f0       	breq	.+2      	; 0x4b40 <__vector_12+0x30>
    4b3e:	09 95       	icall
    4b40:	ff 91       	pop	r31
    4b42:	ef 91       	pop	r30
    4b44:	bf 91       	pop	r27
    4b46:	af 91       	pop	r26
    4b48:	9f 91       	pop	r25
    4b4a:	8f 91       	pop	r24
    4b4c:	7f 91       	pop	r23
    4b4e:	6f 91       	pop	r22
    4b50:	5f 91       	pop	r21
    4b52:	4f 91       	pop	r20
    4b54:	3f 91       	pop	r19
    4b56:	2f 91       	pop	r18
    4b58:	0f 90       	pop	r0
    4b5a:	0f be       	out	0x3f, r0	; 63
    4b5c:	0f 90       	pop	r0
    4b5e:	1f 90       	pop	r1
    4b60:	18 95       	reti

00004b62 <__vector_15>:
    4b62:	1f 92       	push	r1
    4b64:	0f 92       	push	r0
    4b66:	0f b6       	in	r0, 0x3f	; 63
    4b68:	0f 92       	push	r0
    4b6a:	11 24       	eor	r1, r1
    4b6c:	2f 93       	push	r18
    4b6e:	3f 93       	push	r19
    4b70:	4f 93       	push	r20
    4b72:	5f 93       	push	r21
    4b74:	6f 93       	push	r22
    4b76:	7f 93       	push	r23
    4b78:	8f 93       	push	r24
    4b7a:	9f 93       	push	r25
    4b7c:	af 93       	push	r26
    4b7e:	bf 93       	push	r27
    4b80:	ef 93       	push	r30
    4b82:	ff 93       	push	r31
    4b84:	e0 91 00 04 	lds	r30, 0x0400
    4b88:	f0 91 01 04 	lds	r31, 0x0401
    4b8c:	30 97       	sbiw	r30, 0x00	; 0
    4b8e:	09 f0       	breq	.+2      	; 0x4b92 <__vector_15+0x30>
    4b90:	09 95       	icall
    4b92:	ff 91       	pop	r31
    4b94:	ef 91       	pop	r30
    4b96:	bf 91       	pop	r27
    4b98:	af 91       	pop	r26
    4b9a:	9f 91       	pop	r25
    4b9c:	8f 91       	pop	r24
    4b9e:	7f 91       	pop	r23
    4ba0:	6f 91       	pop	r22
    4ba2:	5f 91       	pop	r21
    4ba4:	4f 91       	pop	r20
    4ba6:	3f 91       	pop	r19
    4ba8:	2f 91       	pop	r18
    4baa:	0f 90       	pop	r0
    4bac:	0f be       	out	0x3f, r0	; 63
    4bae:	0f 90       	pop	r0
    4bb0:	1f 90       	pop	r1
    4bb2:	18 95       	reti

00004bb4 <__vector_4>:
    4bb4:	1f 92       	push	r1
    4bb6:	0f 92       	push	r0
    4bb8:	0f b6       	in	r0, 0x3f	; 63
    4bba:	0f 92       	push	r0
    4bbc:	11 24       	eor	r1, r1
    4bbe:	2f 93       	push	r18
    4bc0:	3f 93       	push	r19
    4bc2:	4f 93       	push	r20
    4bc4:	5f 93       	push	r21
    4bc6:	6f 93       	push	r22
    4bc8:	7f 93       	push	r23
    4bca:	8f 93       	push	r24
    4bcc:	9f 93       	push	r25
    4bce:	af 93       	push	r26
    4bd0:	bf 93       	push	r27
    4bd2:	ef 93       	push	r30
    4bd4:	ff 93       	push	r31
    4bd6:	e0 91 ea 03 	lds	r30, 0x03EA
    4bda:	f0 91 eb 03 	lds	r31, 0x03EB
    4bde:	30 97       	sbiw	r30, 0x00	; 0
    4be0:	09 f0       	breq	.+2      	; 0x4be4 <__vector_4+0x30>
    4be2:	09 95       	icall
    4be4:	ff 91       	pop	r31
    4be6:	ef 91       	pop	r30
    4be8:	bf 91       	pop	r27
    4bea:	af 91       	pop	r26
    4bec:	9f 91       	pop	r25
    4bee:	8f 91       	pop	r24
    4bf0:	7f 91       	pop	r23
    4bf2:	6f 91       	pop	r22
    4bf4:	5f 91       	pop	r21
    4bf6:	4f 91       	pop	r20
    4bf8:	3f 91       	pop	r19
    4bfa:	2f 91       	pop	r18
    4bfc:	0f 90       	pop	r0
    4bfe:	0f be       	out	0x3f, r0	; 63
    4c00:	0f 90       	pop	r0
    4c02:	1f 90       	pop	r1
    4c04:	18 95       	reti

00004c06 <__vector_5>:
    4c06:	1f 92       	push	r1
    4c08:	0f 92       	push	r0
    4c0a:	0f b6       	in	r0, 0x3f	; 63
    4c0c:	0f 92       	push	r0
    4c0e:	11 24       	eor	r1, r1
    4c10:	2f 93       	push	r18
    4c12:	3f 93       	push	r19
    4c14:	4f 93       	push	r20
    4c16:	5f 93       	push	r21
    4c18:	6f 93       	push	r22
    4c1a:	7f 93       	push	r23
    4c1c:	8f 93       	push	r24
    4c1e:	9f 93       	push	r25
    4c20:	af 93       	push	r26
    4c22:	bf 93       	push	r27
    4c24:	ef 93       	push	r30
    4c26:	ff 93       	push	r31
    4c28:	e0 91 ec 03 	lds	r30, 0x03EC
    4c2c:	f0 91 ed 03 	lds	r31, 0x03ED
    4c30:	30 97       	sbiw	r30, 0x00	; 0
    4c32:	09 f0       	breq	.+2      	; 0x4c36 <__vector_5+0x30>
    4c34:	09 95       	icall
    4c36:	ff 91       	pop	r31
    4c38:	ef 91       	pop	r30
    4c3a:	bf 91       	pop	r27
    4c3c:	af 91       	pop	r26
    4c3e:	9f 91       	pop	r25
    4c40:	8f 91       	pop	r24
    4c42:	7f 91       	pop	r23
    4c44:	6f 91       	pop	r22
    4c46:	5f 91       	pop	r21
    4c48:	4f 91       	pop	r20
    4c4a:	3f 91       	pop	r19
    4c4c:	2f 91       	pop	r18
    4c4e:	0f 90       	pop	r0
    4c50:	0f be       	out	0x3f, r0	; 63
    4c52:	0f 90       	pop	r0
    4c54:	1f 90       	pop	r1
    4c56:	18 95       	reti

00004c58 <__vector_6>:
    4c58:	1f 92       	push	r1
    4c5a:	0f 92       	push	r0
    4c5c:	0f b6       	in	r0, 0x3f	; 63
    4c5e:	0f 92       	push	r0
    4c60:	11 24       	eor	r1, r1
    4c62:	2f 93       	push	r18
    4c64:	3f 93       	push	r19
    4c66:	4f 93       	push	r20
    4c68:	5f 93       	push	r21
    4c6a:	6f 93       	push	r22
    4c6c:	7f 93       	push	r23
    4c6e:	8f 93       	push	r24
    4c70:	9f 93       	push	r25
    4c72:	af 93       	push	r26
    4c74:	bf 93       	push	r27
    4c76:	ef 93       	push	r30
    4c78:	ff 93       	push	r31
    4c7a:	e0 91 ee 03 	lds	r30, 0x03EE
    4c7e:	f0 91 ef 03 	lds	r31, 0x03EF
    4c82:	30 97       	sbiw	r30, 0x00	; 0
    4c84:	09 f0       	breq	.+2      	; 0x4c88 <__vector_6+0x30>
    4c86:	09 95       	icall
    4c88:	ff 91       	pop	r31
    4c8a:	ef 91       	pop	r30
    4c8c:	bf 91       	pop	r27
    4c8e:	af 91       	pop	r26
    4c90:	9f 91       	pop	r25
    4c92:	8f 91       	pop	r24
    4c94:	7f 91       	pop	r23
    4c96:	6f 91       	pop	r22
    4c98:	5f 91       	pop	r21
    4c9a:	4f 91       	pop	r20
    4c9c:	3f 91       	pop	r19
    4c9e:	2f 91       	pop	r18
    4ca0:	0f 90       	pop	r0
    4ca2:	0f be       	out	0x3f, r0	; 63
    4ca4:	0f 90       	pop	r0
    4ca6:	1f 90       	pop	r1
    4ca8:	18 95       	reti

00004caa <__vector_7>:
    4caa:	1f 92       	push	r1
    4cac:	0f 92       	push	r0
    4cae:	0f b6       	in	r0, 0x3f	; 63
    4cb0:	0f 92       	push	r0
    4cb2:	11 24       	eor	r1, r1
    4cb4:	2f 93       	push	r18
    4cb6:	3f 93       	push	r19
    4cb8:	4f 93       	push	r20
    4cba:	5f 93       	push	r21
    4cbc:	6f 93       	push	r22
    4cbe:	7f 93       	push	r23
    4cc0:	8f 93       	push	r24
    4cc2:	9f 93       	push	r25
    4cc4:	af 93       	push	r26
    4cc6:	bf 93       	push	r27
    4cc8:	ef 93       	push	r30
    4cca:	ff 93       	push	r31
    4ccc:	e0 91 f0 03 	lds	r30, 0x03F0
    4cd0:	f0 91 f1 03 	lds	r31, 0x03F1
    4cd4:	30 97       	sbiw	r30, 0x00	; 0
    4cd6:	09 f0       	breq	.+2      	; 0x4cda <__vector_7+0x30>
    4cd8:	09 95       	icall
    4cda:	ff 91       	pop	r31
    4cdc:	ef 91       	pop	r30
    4cde:	bf 91       	pop	r27
    4ce0:	af 91       	pop	r26
    4ce2:	9f 91       	pop	r25
    4ce4:	8f 91       	pop	r24
    4ce6:	7f 91       	pop	r23
    4ce8:	6f 91       	pop	r22
    4cea:	5f 91       	pop	r21
    4cec:	4f 91       	pop	r20
    4cee:	3f 91       	pop	r19
    4cf0:	2f 91       	pop	r18
    4cf2:	0f 90       	pop	r0
    4cf4:	0f be       	out	0x3f, r0	; 63
    4cf6:	0f 90       	pop	r0
    4cf8:	1f 90       	pop	r1
    4cfa:	18 95       	reti

00004cfc <ISR_attach>:
    4cfc:	e8 2f       	mov	r30, r24
    4cfe:	80 32       	cpi	r24, 0x20	; 32
    4d00:	68 f4       	brcc	.+26     	; 0x4d1c <ISR_attach+0x20>
    4d02:	80 51       	subi	r24, 0x10	; 16
    4d04:	83 30       	cpi	r24, 0x03	; 3
    4d06:	50 f0       	brcs	.+20     	; 0x4d1c <ISR_attach+0x20>
    4d08:	f0 e0       	ldi	r31, 0x00	; 0
    4d0a:	ee 0f       	add	r30, r30
    4d0c:	ff 1f       	adc	r31, r31
    4d0e:	ee 51       	subi	r30, 0x1E	; 30
    4d10:	fc 4f       	sbci	r31, 0xFC	; 252
    4d12:	20 81       	ld	r18, Z
    4d14:	31 81       	ldd	r19, Z+1	; 0x01
    4d16:	71 83       	std	Z+1, r23	; 0x01
    4d18:	60 83       	st	Z, r22
    4d1a:	02 c0       	rjmp	.+4      	; 0x4d20 <ISR_attach+0x24>
    4d1c:	20 e0       	ldi	r18, 0x00	; 0
    4d1e:	30 e0       	ldi	r19, 0x00	; 0
    4d20:	c9 01       	movw	r24, r18
    4d22:	08 95       	ret

00004d24 <ISR_open>:
    4d24:	80 e1       	ldi	r24, 0x10	; 16
    4d26:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    4d2a:	88 23       	and	r24, r24
    4d2c:	61 f4       	brne	.+24     	; 0x4d46 <ISR_open+0x22>
    4d2e:	e2 ee       	ldi	r30, 0xE2	; 226
    4d30:	f3 e0       	ldi	r31, 0x03	; 3
    4d32:	11 92       	st	Z+, r1
    4d34:	11 92       	st	Z+, r1
    4d36:	84 e0       	ldi	r24, 0x04	; 4
    4d38:	e2 32       	cpi	r30, 0x22	; 34
    4d3a:	f8 07       	cpc	r31, r24
    4d3c:	d1 f7       	brne	.-12     	; 0x4d32 <ISR_open+0xe>
    4d3e:	80 e1       	ldi	r24, 0x10	; 16
    4d40:	61 e0       	ldi	r22, 0x01	; 1
    4d42:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    4d46:	80 e1       	ldi	r24, 0x10	; 16
    4d48:	91 e0       	ldi	r25, 0x01	; 1
    4d4a:	08 95       	ret

00004d4c <__LCD_init>:
    4d4c:	23 9a       	sbi	0x04, 3	; 4
    4d4e:	08 95       	ret

00004d50 <__LCD_putchar>:
    4d50:	ff 92       	push	r15
    4d52:	0f 93       	push	r16
    4d54:	1f 93       	push	r17
    4d56:	cf 93       	push	r28
    4d58:	df 93       	push	r29
    4d5a:	f8 2e       	mov	r15, r24
    4d5c:	8a e0       	ldi	r24, 0x0A	; 10
    4d5e:	f8 16       	cp	r15, r24
    4d60:	b1 f0       	breq	.+44     	; 0x4d8e <__LCD_putchar+0x3e>
    4d62:	8f 15       	cp	r24, r15
    4d64:	48 f0       	brcs	.+18     	; 0x4d78 <__LCD_putchar+0x28>
    4d66:	e8 e0       	ldi	r30, 0x08	; 8
    4d68:	fe 16       	cp	r15, r30
    4d6a:	b9 f1       	breq	.+110    	; 0x4dda <__LCD_putchar+0x8a>
    4d6c:	ef 15       	cp	r30, r15
    4d6e:	38 f1       	brcs	.+78     	; 0x4dbe <__LCD_putchar+0x6e>
    4d70:	f7 e0       	ldi	r31, 0x07	; 7
    4d72:	ff 16       	cp	r15, r31
    4d74:	51 f4       	brne	.+20     	; 0x4d8a <__LCD_putchar+0x3a>
    4d76:	3b c0       	rjmp	.+118    	; 0x4dee <__LCD_putchar+0x9e>
    4d78:	8d e0       	ldi	r24, 0x0D	; 13
    4d7a:	f8 16       	cp	r15, r24
    4d7c:	59 f0       	breq	.+22     	; 0x4d94 <__LCD_putchar+0x44>
    4d7e:	eb e1       	ldi	r30, 0x1B	; 27
    4d80:	fe 16       	cp	r15, r30
    4d82:	89 f0       	breq	.+34     	; 0x4da6 <__LCD_putchar+0x56>
    4d84:	fc e0       	ldi	r31, 0x0C	; 12
    4d86:	ff 16       	cp	r15, r31
    4d88:	41 f0       	breq	.+16     	; 0x4d9a <__LCD_putchar+0x4a>
    4d8a:	01 e0       	ldi	r16, 0x01	; 1
    4d8c:	41 c0       	rjmp	.+130    	; 0x4e10 <__LCD_putchar+0xc0>
    4d8e:	10 92 54 07 	sts	0x0754, r1
    4d92:	03 c0       	rjmp	.+6      	; 0x4d9a <__LCD_putchar+0x4a>
    4d94:	10 92 54 07 	sts	0x0754, r1
    4d98:	3a c0       	rjmp	.+116    	; 0x4e0e <__LCD_putchar+0xbe>
    4d9a:	80 91 55 07 	lds	r24, 0x0755
    4d9e:	81 50       	subi	r24, 0x01	; 1
    4da0:	80 93 55 07 	sts	0x0755, r24
    4da4:	34 c0       	rjmp	.+104    	; 0x4e0e <__LCD_putchar+0xbe>
    4da6:	0e 94 18 1c 	call	0x3830	; 0x3830 <LCD_clear>
    4daa:	14 c0       	rjmp	.+40     	; 0x4dd4 <__LCD_putchar+0x84>
    4dac:	80 e0       	ldi	r24, 0x00	; 0
    4dae:	61 e0       	ldi	r22, 0x01	; 1
    4db0:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    4db4:	80 91 54 07 	lds	r24, 0x0754
    4db8:	8f 5f       	subi	r24, 0xFF	; 255
    4dba:	80 93 54 07 	sts	0x0754, r24
    4dbe:	80 91 54 07 	lds	r24, 0x0754
    4dc2:	87 ff       	sbrs	r24, 7
    4dc4:	f3 cf       	rjmp	.-26     	; 0x4dac <__LCD_putchar+0x5c>
    4dc6:	10 92 54 07 	sts	0x0754, r1
    4dca:	80 91 55 07 	lds	r24, 0x0755
    4dce:	81 50       	subi	r24, 0x01	; 1
    4dd0:	80 93 55 07 	sts	0x0755, r24
    4dd4:	00 e0       	ldi	r16, 0x00	; 0
    4dd6:	11 e0       	ldi	r17, 0x01	; 1
    4dd8:	1c c0       	rjmp	.+56     	; 0x4e12 <__LCD_putchar+0xc2>
    4dda:	80 91 54 07 	lds	r24, 0x0754
    4dde:	88 23       	and	r24, r24
    4de0:	b1 f0       	breq	.+44     	; 0x4e0e <__LCD_putchar+0xbe>
    4de2:	80 91 54 07 	lds	r24, 0x0754
    4de6:	86 50       	subi	r24, 0x06	; 6
    4de8:	80 93 54 07 	sts	0x0754, r24
    4dec:	10 c0       	rjmp	.+32     	; 0x4e0e <__LCD_putchar+0xbe>
    4dee:	81 e0       	ldi	r24, 0x01	; 1
    4df0:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <SPKR_open>
    4df4:	64 ef       	ldi	r22, 0xF4	; 244
    4df6:	71 e0       	ldi	r23, 0x01	; 1
    4df8:	80 e0       	ldi	r24, 0x00	; 0
    4dfa:	90 e0       	ldi	r25, 0x00	; 0
    4dfc:	4d e7       	ldi	r20, 0x7D	; 125
    4dfe:	50 e0       	ldi	r21, 0x00	; 0
    4e00:	24 e6       	ldi	r18, 0x64	; 100
    4e02:	30 e0       	ldi	r19, 0x00	; 0
    4e04:	0e 94 c2 28 	call	0x5184	; 0x5184 <SPKR_play_beep>
    4e08:	81 e0       	ldi	r24, 0x01	; 1
    4e0a:	0e 94 8e 28 	call	0x511c	; 0x511c <SPKR_close>
    4e0e:	00 e0       	ldi	r16, 0x00	; 0
    4e10:	10 e0       	ldi	r17, 0x00	; 0
    4e12:	80 91 55 07 	lds	r24, 0x0755
    4e16:	60 91 54 07 	lds	r22, 0x0754
    4e1a:	0e 94 de 1c 	call	0x39bc	; 0x39bc <LCD_set_PGC_addr>
    4e1e:	00 23       	and	r16, r16
    4e20:	51 f1       	breq	.+84     	; 0x4e76 <__LCD_putchar+0x126>
    4e22:	85 e0       	ldi	r24, 0x05	; 5
    4e24:	f8 9e       	mul	r15, r24
    4e26:	c0 01       	movw	r24, r0
    4e28:	11 24       	eor	r1, r1
    4e2a:	ec 01       	movw	r28, r24
    4e2c:	c3 55       	subi	r28, 0x53	; 83
    4e2e:	df 4f       	sbci	r29, 0xFF	; 255
    4e30:	8c 01       	movw	r16, r24
    4e32:	0e 54       	subi	r16, 0x4E	; 78
    4e34:	1f 4f       	sbci	r17, 0xFF	; 255
    4e36:	fe 01       	movw	r30, r28
    4e38:	84 91       	lpm	r24, Z+
    4e3a:	61 e0       	ldi	r22, 0x01	; 1
    4e3c:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    4e40:	21 96       	adiw	r28, 0x01	; 1
    4e42:	c0 17       	cp	r28, r16
    4e44:	d1 07       	cpc	r29, r17
    4e46:	b9 f7       	brne	.-18     	; 0x4e36 <__LCD_putchar+0xe6>
    4e48:	80 e0       	ldi	r24, 0x00	; 0
    4e4a:	61 e0       	ldi	r22, 0x01	; 1
    4e4c:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <LCD_write>
    4e50:	80 91 54 07 	lds	r24, 0x0754
    4e54:	8a 5f       	subi	r24, 0xFA	; 250
    4e56:	80 93 54 07 	sts	0x0754, r24
    4e5a:	80 91 54 07 	lds	r24, 0x0754
    4e5e:	90 e0       	ldi	r25, 0x00	; 0
    4e60:	8c 37       	cpi	r24, 0x7C	; 124
    4e62:	91 05       	cpc	r25, r1
    4e64:	3c f0       	brlt	.+14     	; 0x4e74 <__LCD_putchar+0x124>
    4e66:	10 92 54 07 	sts	0x0754, r1
    4e6a:	80 91 55 07 	lds	r24, 0x0755
    4e6e:	81 50       	subi	r24, 0x01	; 1
    4e70:	80 93 55 07 	sts	0x0755, r24
    4e74:	11 e0       	ldi	r17, 0x01	; 1
    4e76:	80 91 55 07 	lds	r24, 0x0755
    4e7a:	83 70       	andi	r24, 0x03	; 3
    4e7c:	80 93 55 07 	sts	0x0755, r24
    4e80:	11 30       	cpi	r17, 0x01	; 1
    4e82:	59 f4       	brne	.+22     	; 0x4e9a <__LCD_putchar+0x14a>
    4e84:	80 91 56 07 	lds	r24, 0x0756
    4e88:	81 30       	cpi	r24, 0x01	; 1
    4e8a:	39 f4       	brne	.+14     	; 0x4e9a <__LCD_putchar+0x14a>
    4e8c:	e0 91 57 07 	lds	r30, 0x0757
    4e90:	f0 91 58 07 	lds	r31, 0x0758
    4e94:	30 97       	sbiw	r30, 0x00	; 0
    4e96:	09 f0       	breq	.+2      	; 0x4e9a <__LCD_putchar+0x14a>
    4e98:	09 95       	icall
    4e9a:	80 e0       	ldi	r24, 0x00	; 0
    4e9c:	90 e0       	ldi	r25, 0x00	; 0
    4e9e:	df 91       	pop	r29
    4ea0:	cf 91       	pop	r28
    4ea2:	1f 91       	pop	r17
    4ea4:	0f 91       	pop	r16
    4ea6:	ff 90       	pop	r15
    4ea8:	08 95       	ret

00004eaa <__LED_clr_pattern>:
    4eaa:	85 fd       	sbrc	r24, 5
    4eac:	5d 98       	cbi	0x0b, 5	; 11
    4eae:	86 fd       	sbrc	r24, 6
    4eb0:	5e 98       	cbi	0x0b, 6	; 11
    4eb2:	08 95       	ret

00004eb4 <__LED_init>:
    4eb4:	55 9a       	sbi	0x0a, 5	; 10
    4eb6:	56 9a       	sbi	0x0a, 6	; 10
    4eb8:	08 95       	ret

00004eba <__LED_set_pattern>:
    4eba:	85 fd       	sbrc	r24, 5
    4ebc:	5d 9a       	sbi	0x0b, 5	; 11
    4ebe:	86 fd       	sbrc	r24, 6
    4ec0:	5e 9a       	sbi	0x0b, 6	; 11
    4ec2:	08 95       	ret

00004ec4 <ATMEGA_open>:
    4ec4:	80 e0       	ldi	r24, 0x00	; 0
    4ec6:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    4eca:	88 23       	and	r24, r24
    4ecc:	51 f4       	brne	.+20     	; 0x4ee2 <ATMEGA_open+0x1e>
    4ece:	f8 94       	cli
    4ed0:	0e 94 59 2a 	call	0x54b2	; 0x54b2 <__ATMEGA_init>
    4ed4:	81 e0       	ldi	r24, 0x01	; 1
    4ed6:	0e 94 74 27 	call	0x4ee8	; 0x4ee8 <ATMEGA_set_clk_mode>
    4eda:	80 e0       	ldi	r24, 0x00	; 0
    4edc:	61 e0       	ldi	r22, 0x01	; 1
    4ede:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    4ee2:	80 e0       	ldi	r24, 0x00	; 0
    4ee4:	91 e0       	ldi	r25, 0x01	; 1
    4ee6:	08 95       	ret

00004ee8 <ATMEGA_set_clk_mode>:
    4ee8:	81 30       	cpi	r24, 0x01	; 1
    4eea:	49 f0       	breq	.+18     	; 0x4efe <ATMEGA_set_clk_mode+0x16>
    4eec:	f8 94       	cli
    4eee:	81 30       	cpi	r24, 0x01	; 1
    4ef0:	20 f1       	brcs	.+72     	; 0x4f3a <ATMEGA_set_clk_mode+0x52>
    4ef2:	82 30       	cpi	r24, 0x02	; 2
    4ef4:	b1 f0       	breq	.+44     	; 0x4f22 <ATMEGA_set_clk_mode+0x3a>
    4ef6:	83 30       	cpi	r24, 0x03	; 3
    4ef8:	09 f0       	breq	.+2      	; 0x4efc <ATMEGA_set_clk_mode+0x14>
    4efa:	45 c0       	rjmp	.+138    	; 0x4f86 <ATMEGA_set_clk_mode+0x9e>
    4efc:	17 c0       	rjmp	.+46     	; 0x4f2c <ATMEGA_set_clk_mode+0x44>
    4efe:	2c 9a       	sbi	0x05, 4	; 5
    4f00:	80 e8       	ldi	r24, 0x80	; 128
    4f02:	80 93 61 00 	sts	0x0061, r24
    4f06:	10 92 61 00 	sts	0x0061, r1
    4f0a:	80 e0       	ldi	r24, 0x00	; 0
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	00 00       	nop
    4f10:	01 96       	adiw	r24, 0x01	; 1
    4f12:	88 32       	cpi	r24, 0x28	; 40
    4f14:	91 05       	cpc	r25, r1
    4f16:	d9 f7       	brne	.-10     	; 0x4f0e <ATMEGA_set_clk_mode+0x26>
    4f18:	10 92 68 00 	sts	0x0068, r1
    4f1c:	10 92 6b 00 	sts	0x006B, r1
    4f20:	08 95       	ret
    4f22:	80 e8       	ldi	r24, 0x80	; 128
    4f24:	80 93 61 00 	sts	0x0061, r24
    4f28:	83 e0       	ldi	r24, 0x03	; 3
    4f2a:	04 c0       	rjmp	.+8      	; 0x4f34 <ATMEGA_set_clk_mode+0x4c>
    4f2c:	80 e8       	ldi	r24, 0x80	; 128
    4f2e:	80 93 61 00 	sts	0x0061, r24
    4f32:	88 e0       	ldi	r24, 0x08	; 8
    4f34:	80 93 61 00 	sts	0x0061, r24
    4f38:	28 c0       	rjmp	.+80     	; 0x4f8a <ATMEGA_set_clk_mode+0xa2>
    4f3a:	80 e0       	ldi	r24, 0x00	; 0
    4f3c:	90 e0       	ldi	r25, 0x00	; 0
    4f3e:	00 00       	nop
    4f40:	01 96       	adiw	r24, 0x01	; 1
    4f42:	2d e6       	ldi	r18, 0x6D	; 109
    4f44:	80 36       	cpi	r24, 0x60	; 96
    4f46:	92 07       	cpc	r25, r18
    4f48:	d1 f7       	brne	.-12     	; 0x4f3e <ATMEGA_set_clk_mode+0x56>
    4f4a:	2c 98       	cbi	0x05, 4	; 5
    4f4c:	80 e0       	ldi	r24, 0x00	; 0
    4f4e:	90 e0       	ldi	r25, 0x00	; 0
    4f50:	00 00       	nop
    4f52:	01 96       	adiw	r24, 0x01	; 1
    4f54:	2d e6       	ldi	r18, 0x6D	; 109
    4f56:	80 36       	cpi	r24, 0x60	; 96
    4f58:	92 07       	cpc	r25, r18
    4f5a:	d1 f7       	brne	.-12     	; 0x4f50 <ATMEGA_set_clk_mode+0x68>
    4f5c:	10 92 7a 00 	sts	0x007A, r1
    4f60:	8f ef       	ldi	r24, 0xFF	; 255
    4f62:	80 93 64 00 	sts	0x0064, r24
    4f66:	80 91 68 00 	lds	r24, 0x0068
    4f6a:	81 60       	ori	r24, 0x01	; 1
    4f6c:	80 93 68 00 	sts	0x0068, r24
    4f70:	80 91 6b 00 	lds	r24, 0x006B
    4f74:	84 60       	ori	r24, 0x04	; 4
    4f76:	80 93 6b 00 	sts	0x006B, r24
    4f7a:	78 94       	sei
    4f7c:	83 b7       	in	r24, 0x33	; 51
    4f7e:	81 60       	ori	r24, 0x01	; 1
    4f80:	83 bf       	out	0x33, r24	; 51
    4f82:	88 95       	sleep
    4f84:	08 95       	ret
    4f86:	82 30       	cpi	r24, 0x02	; 2
    4f88:	08 f0       	brcs	.+2      	; 0x4f8c <ATMEGA_set_clk_mode+0xa4>
    4f8a:	78 94       	sei
    4f8c:	08 95       	ret

00004f8e <SPI_open>:
    4f8e:	0f 93       	push	r16
    4f90:	1f 93       	push	r17
    4f92:	0e 94 85 2a 	call	0x550a	; 0x550a <__SPI_init>
    4f96:	80 e0       	ldi	r24, 0x00	; 0
    4f98:	64 e7       	ldi	r22, 0x74	; 116
    4f9a:	7a e2       	ldi	r23, 0x2A	; 42
    4f9c:	0e 94 12 28 	call	0x5024	; 0x5024 <SPI_set_config_func>
    4fa0:	81 e0       	ldi	r24, 0x01	; 1
    4fa2:	6c e6       	ldi	r22, 0x6C	; 108
    4fa4:	7a e2       	ldi	r23, 0x2A	; 42
    4fa6:	0e 94 12 28 	call	0x5024	; 0x5024 <SPI_set_config_func>
    4faa:	82 e0       	ldi	r24, 0x02	; 2
    4fac:	64 e6       	ldi	r22, 0x64	; 100
    4fae:	7a e2       	ldi	r23, 0x2A	; 42
    4fb0:	0e 94 12 28 	call	0x5024	; 0x5024 <SPI_set_config_func>
    4fb4:	86 e0       	ldi	r24, 0x06	; 6
    4fb6:	6c e7       	ldi	r22, 0x7C	; 124
    4fb8:	7a e2       	ldi	r23, 0x2A	; 42
    4fba:	0e 94 12 28 	call	0x5024	; 0x5024 <SPI_set_config_func>
    4fbe:	0c e5       	ldi	r16, 0x5C	; 92
    4fc0:	1a e2       	ldi	r17, 0x2A	; 42
    4fc2:	83 e0       	ldi	r24, 0x03	; 3
    4fc4:	b8 01       	movw	r22, r16
    4fc6:	0e 94 12 28 	call	0x5024	; 0x5024 <SPI_set_config_func>
    4fca:	84 e0       	ldi	r24, 0x04	; 4
    4fcc:	b8 01       	movw	r22, r16
    4fce:	0e 94 12 28 	call	0x5024	; 0x5024 <SPI_set_config_func>
    4fd2:	85 e0       	ldi	r24, 0x05	; 5
    4fd4:	b8 01       	movw	r22, r16
    4fd6:	0e 94 12 28 	call	0x5024	; 0x5024 <SPI_set_config_func>
    4fda:	87 e0       	ldi	r24, 0x07	; 7
    4fdc:	b8 01       	movw	r22, r16
    4fde:	0e 94 12 28 	call	0x5024	; 0x5024 <SPI_set_config_func>
    4fe2:	82 e0       	ldi	r24, 0x02	; 2
    4fe4:	61 e0       	ldi	r22, 0x01	; 1
    4fe6:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    4fea:	8f ef       	ldi	r24, 0xFF	; 255
    4fec:	80 93 59 07 	sts	0x0759, r24
    4ff0:	87 e0       	ldi	r24, 0x07	; 7
    4ff2:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <SPI_set_slave_addr>
    4ff6:	82 e0       	ldi	r24, 0x02	; 2
    4ff8:	91 e0       	ldi	r25, 0x01	; 1
    4ffa:	1f 91       	pop	r17
    4ffc:	0f 91       	pop	r16
    4ffe:	08 95       	ret

00005000 <SPI_receive>:
    5000:	1f 93       	push	r17
    5002:	16 2f       	mov	r17, r22
    5004:	0e 94 33 1d 	call	0x3a66	; 0x3a66 <SPI_set_slave_addr>
    5008:	82 e0       	ldi	r24, 0x02	; 2
    500a:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    500e:	81 30       	cpi	r24, 0x01	; 1
    5010:	11 f0       	breq	.+4      	; 0x5016 <SPI_receive+0x16>
    5012:	80 e0       	ldi	r24, 0x00	; 0
    5014:	05 c0       	rjmp	.+10     	; 0x5020 <SPI_receive+0x20>
    5016:	1e bd       	out	0x2e, r17	; 46
    5018:	0d b4       	in	r0, 0x2d	; 45
    501a:	07 fe       	sbrs	r0, 7
    501c:	fd cf       	rjmp	.-6      	; 0x5018 <SPI_receive+0x18>
    501e:	8e b5       	in	r24, 0x2e	; 46
    5020:	1f 91       	pop	r17
    5022:	08 95       	ret

00005024 <SPI_set_config_func>:
    5024:	e8 2f       	mov	r30, r24
    5026:	f0 e0       	ldi	r31, 0x00	; 0
    5028:	ee 0f       	add	r30, r30
    502a:	ff 1f       	adc	r31, r31
    502c:	ee 5d       	subi	r30, 0xDE	; 222
    502e:	fb 4f       	sbci	r31, 0xFB	; 251
    5030:	71 83       	std	Z+1, r23	; 0x01
    5032:	60 83       	st	Z, r22
    5034:	08 95       	ret

00005036 <__SPKR_TIMER1_COMPA_vect>:
    5036:	0e 94 1e 28 	call	0x503c	; 0x503c <SPKR_clk>
    503a:	08 95       	ret

0000503c <SPKR_clk>:
    503c:	80 91 34 04 	lds	r24, 0x0434
    5040:	90 91 35 04 	lds	r25, 0x0435
    5044:	a0 91 36 04 	lds	r26, 0x0436
    5048:	b0 91 37 04 	lds	r27, 0x0437
    504c:	20 91 38 04 	lds	r18, 0x0438
    5050:	30 91 39 04 	lds	r19, 0x0439
    5054:	40 91 3a 04 	lds	r20, 0x043A
    5058:	50 91 3b 04 	lds	r21, 0x043B
    505c:	28 0f       	add	r18, r24
    505e:	39 1f       	adc	r19, r25
    5060:	4a 1f       	adc	r20, r26
    5062:	5b 1f       	adc	r21, r27
    5064:	20 93 34 04 	sts	0x0434, r18
    5068:	30 93 35 04 	sts	0x0435, r19
    506c:	40 93 36 04 	sts	0x0436, r20
    5070:	50 93 37 04 	sts	0x0437, r21
    5074:	80 91 34 04 	lds	r24, 0x0434
    5078:	90 91 35 04 	lds	r25, 0x0435
    507c:	a0 91 36 04 	lds	r26, 0x0436
    5080:	b0 91 37 04 	lds	r27, 0x0437
    5084:	88 51       	subi	r24, 0x18	; 24
    5086:	96 4f       	sbci	r25, 0xF6	; 246
    5088:	a0 40       	sbci	r26, 0x00	; 0
    508a:	b0 40       	sbci	r27, 0x00	; 0
    508c:	bc f0       	brlt	.+46     	; 0x50bc <SPKR_clk+0x80>
    508e:	8b b1       	in	r24, 0x0b	; 11
    5090:	80 58       	subi	r24, 0x80	; 128
    5092:	8b b9       	out	0x0b, r24	; 11
    5094:	80 91 34 04 	lds	r24, 0x0434
    5098:	90 91 35 04 	lds	r25, 0x0435
    509c:	a0 91 36 04 	lds	r26, 0x0436
    50a0:	b0 91 37 04 	lds	r27, 0x0437
    50a4:	88 51       	subi	r24, 0x18	; 24
    50a6:	96 4f       	sbci	r25, 0xF6	; 246
    50a8:	a0 40       	sbci	r26, 0x00	; 0
    50aa:	b0 40       	sbci	r27, 0x00	; 0
    50ac:	80 93 34 04 	sts	0x0434, r24
    50b0:	90 93 35 04 	sts	0x0435, r25
    50b4:	a0 93 36 04 	sts	0x0436, r26
    50b8:	b0 93 37 04 	sts	0x0437, r27
    50bc:	08 95       	ret

000050be <__SPKR_close_beep_mode>:
    50be:	8a e0       	ldi	r24, 0x0A	; 10
    50c0:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    50c4:	81 30       	cpi	r24, 0x01	; 1
    50c6:	41 f4       	brne	.+16     	; 0x50d8 <__SPKR_close_beep_mode+0x1a>
    50c8:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__SPKR_close>
    50cc:	10 92 33 04 	sts	0x0433, r1
    50d0:	8a e0       	ldi	r24, 0x0A	; 10
    50d2:	60 e0       	ldi	r22, 0x00	; 0
    50d4:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    50d8:	08 95       	ret

000050da <__SPKR_close_tone_mode>:
    50da:	89 e0       	ldi	r24, 0x09	; 9
    50dc:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    50e0:	81 30       	cpi	r24, 0x01	; 1
    50e2:	d9 f4       	brne	.+54     	; 0x511a <__SPKR_close_tone_mode+0x40>
    50e4:	80 91 32 04 	lds	r24, 0x0432
    50e8:	88 23       	and	r24, r24
    50ea:	11 f0       	breq	.+4      	; 0x50f0 <__SPKR_close_tone_mode+0x16>
    50ec:	0e 94 0f 29 	call	0x521e	; 0x521e <__SPKR_stop>
    50f0:	82 e0       	ldi	r24, 0x02	; 2
    50f2:	0e 94 a3 2a 	call	0x5546	; 0x5546 <__SPKR_close>
    50f6:	80 91 40 04 	lds	r24, 0x0440
    50fa:	90 91 41 04 	lds	r25, 0x0441
    50fe:	00 97       	sbiw	r24, 0x00	; 0
    5100:	31 f0       	breq	.+12     	; 0x510e <__SPKR_close_tone_mode+0x34>
    5102:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <free>
    5106:	10 92 41 04 	sts	0x0441, r1
    510a:	10 92 40 04 	sts	0x0440, r1
    510e:	10 92 32 04 	sts	0x0432, r1
    5112:	89 e0       	ldi	r24, 0x09	; 9
    5114:	60 e0       	ldi	r22, 0x00	; 0
    5116:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    511a:	08 95       	ret

0000511c <SPKR_close>:
    511c:	81 30       	cpi	r24, 0x01	; 1
    511e:	29 f0       	breq	.+10     	; 0x512a <SPKR_close+0xe>
    5120:	82 30       	cpi	r24, 0x02	; 2
    5122:	29 f4       	brne	.+10     	; 0x512e <SPKR_close+0x12>
    5124:	0e 94 6d 28 	call	0x50da	; 0x50da <__SPKR_close_tone_mode>
    5128:	08 95       	ret
    512a:	0e 94 5f 28 	call	0x50be	; 0x50be <__SPKR_close_beep_mode>
    512e:	08 95       	ret

00005130 <__SPKR_init>:
    5130:	98 2f       	mov	r25, r24
    5132:	80 91 32 04 	lds	r24, 0x0432
    5136:	88 23       	and	r24, r24
    5138:	31 f4       	brne	.+12     	; 0x5146 <__SPKR_init+0x16>
    513a:	80 91 33 04 	lds	r24, 0x0433
    513e:	88 23       	and	r24, r24
    5140:	11 f4       	brne	.+4      	; 0x5146 <__SPKR_init+0x16>
    5142:	57 9a       	sbi	0x0a, 7	; 10
    5144:	5f 98       	cbi	0x0b, 7	; 11
    5146:	80 91 32 04 	lds	r24, 0x0432
    514a:	88 23       	and	r24, r24
    514c:	d1 f4       	brne	.+52     	; 0x5182 <__SPKR_init+0x52>
    514e:	92 30       	cpi	r25, 0x02	; 2
    5150:	c1 f4       	brne	.+48     	; 0x5182 <__SPKR_init+0x52>
    5152:	10 92 80 00 	sts	0x0080, r1
    5156:	10 92 81 00 	sts	0x0081, r1
    515a:	80 91 81 00 	lds	r24, 0x0081
    515e:	88 60       	ori	r24, 0x08	; 8
    5160:	80 93 81 00 	sts	0x0081, r24
    5164:	80 91 81 00 	lds	r24, 0x0081
    5168:	81 60       	ori	r24, 0x01	; 1
    516a:	80 93 81 00 	sts	0x0081, r24
    516e:	10 92 85 00 	sts	0x0085, r1
    5172:	10 92 84 00 	sts	0x0084, r1
    5176:	81 e0       	ldi	r24, 0x01	; 1
    5178:	80 93 89 00 	sts	0x0089, r24
    517c:	80 e9       	ldi	r24, 0x90	; 144
    517e:	80 93 88 00 	sts	0x0088, r24
    5182:	08 95       	ret

00005184 <SPKR_play_beep>:
    5184:	8f 92       	push	r8
    5186:	9f 92       	push	r9
    5188:	af 92       	push	r10
    518a:	bf 92       	push	r11
    518c:	cf 92       	push	r12
    518e:	df 92       	push	r13
    5190:	ef 92       	push	r14
    5192:	ff 92       	push	r15
    5194:	0f 93       	push	r16
    5196:	1f 93       	push	r17
    5198:	cf 93       	push	r28
    519a:	df 93       	push	r29
    519c:	4b 01       	movw	r8, r22
    519e:	5c 01       	movw	r10, r24
    51a0:	ea 01       	movw	r28, r20
    51a2:	b9 01       	movw	r22, r18
    51a4:	21 15       	cp	r18, r1
    51a6:	31 05       	cpc	r19, r1
    51a8:	39 f1       	breq	.+78     	; 0x51f8 <SPKR_play_beep+0x74>
    51aa:	9e 01       	movw	r18, r28
    51ac:	44 27       	eor	r20, r20
    51ae:	37 fd       	sbrc	r19, 7
    51b0:	40 95       	com	r20
    51b2:	54 2f       	mov	r21, r20
    51b4:	65 36       	cpi	r22, 0x65	; 101
    51b6:	71 05       	cpc	r23, r1
    51b8:	10 f0       	brcs	.+4      	; 0x51be <SPKR_play_beep+0x3a>
    51ba:	64 e6       	ldi	r22, 0x64	; 100
    51bc:	70 e0       	ldi	r23, 0x00	; 0
    51be:	80 e0       	ldi	r24, 0x00	; 0
    51c0:	90 e0       	ldi	r25, 0x00	; 0
    51c2:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__mulsi3>
    51c6:	24 e6       	ldi	r18, 0x64	; 100
    51c8:	30 e0       	ldi	r19, 0x00	; 0
    51ca:	40 e0       	ldi	r20, 0x00	; 0
    51cc:	50 e0       	ldi	r21, 0x00	; 0
    51ce:	0e 94 10 36 	call	0x6c20	; 0x6c20 <__udivmodsi4>
    51d2:	79 01       	movw	r14, r18
    51d4:	8a 01       	movw	r16, r20
    51d6:	c5 01       	movw	r24, r10
    51d8:	b4 01       	movw	r22, r8
    51da:	0e 94 8c 2a 	call	0x5518	; 0x5518 <SPKR_beep>
    51de:	c7 01       	movw	r24, r14
    51e0:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <TMRSRVC_delay>
    51e4:	60 e0       	ldi	r22, 0x00	; 0
    51e6:	70 e0       	ldi	r23, 0x00	; 0
    51e8:	80 e0       	ldi	r24, 0x00	; 0
    51ea:	90 e0       	ldi	r25, 0x00	; 0
    51ec:	0e 94 8c 2a 	call	0x5518	; 0x5518 <SPKR_beep>
    51f0:	ce 01       	movw	r24, r28
    51f2:	8e 19       	sub	r24, r14
    51f4:	9f 09       	sbc	r25, r15
    51f6:	04 c0       	rjmp	.+8      	; 0x5200 <SPKR_play_beep+0x7c>
    51f8:	41 15       	cp	r20, r1
    51fa:	51 05       	cpc	r21, r1
    51fc:	19 f0       	breq	.+6      	; 0x5204 <SPKR_play_beep+0x80>
    51fe:	ca 01       	movw	r24, r20
    5200:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <TMRSRVC_delay>
    5204:	df 91       	pop	r29
    5206:	cf 91       	pop	r28
    5208:	1f 91       	pop	r17
    520a:	0f 91       	pop	r16
    520c:	ff 90       	pop	r15
    520e:	ef 90       	pop	r14
    5210:	df 90       	pop	r13
    5212:	cf 90       	pop	r12
    5214:	bf 90       	pop	r11
    5216:	af 90       	pop	r10
    5218:	9f 90       	pop	r9
    521a:	8f 90       	pop	r8
    521c:	08 95       	ret

0000521e <__SPKR_stop>:
    521e:	ef e6       	ldi	r30, 0x6F	; 111
    5220:	f0 e0       	ldi	r31, 0x00	; 0
    5222:	80 81       	ld	r24, Z
    5224:	8d 7f       	andi	r24, 0xFD	; 253
    5226:	80 83       	st	Z, r24
    5228:	08 95       	ret

0000522a <STEPPER_go>:
    522a:	98 2f       	mov	r25, r24
    522c:	81 e0       	ldi	r24, 0x01	; 1
    522e:	80 93 3e 07 	sts	0x073E, r24
    5232:	91 30       	cpi	r25, 0x01	; 1
    5234:	51 f0       	breq	.+20     	; 0x524a <STEPPER_go+0x20>
    5236:	91 30       	cpi	r25, 0x01	; 1
    5238:	18 f0       	brcs	.+6      	; 0x5240 <STEPPER_go+0x16>
    523a:	92 30       	cpi	r25, 0x02	; 2
    523c:	41 f4       	brne	.+16     	; 0x524e <STEPPER_go+0x24>
    523e:	03 c0       	rjmp	.+6      	; 0x5246 <STEPPER_go+0x1c>
    5240:	10 92 26 07 	sts	0x0726, r1
    5244:	04 c0       	rjmp	.+8      	; 0x524e <STEPPER_go+0x24>
    5246:	10 92 26 07 	sts	0x0726, r1
    524a:	10 92 27 07 	sts	0x0727, r1
    524e:	10 92 3e 07 	sts	0x073E, r1
    5252:	08 95       	ret

00005254 <__STEPPER_init>:
    5254:	3a 9a       	sbi	0x07, 2	; 7
    5256:	3b 9a       	sbi	0x07, 3	; 7
    5258:	3c 9a       	sbi	0x07, 4	; 7
    525a:	3d 9a       	sbi	0x07, 5	; 7
    525c:	3e 9a       	sbi	0x07, 6	; 7
    525e:	3f 9a       	sbi	0x07, 7	; 7
    5260:	88 b1       	in	r24, 0x08	; 8
    5262:	83 70       	andi	r24, 0x03	; 3
    5264:	88 b9       	out	0x08, r24	; 8
    5266:	08 95       	ret

00005268 <STEPPER_set_stop_mode>:
    5268:	98 2f       	mov	r25, r24
    526a:	81 e0       	ldi	r24, 0x01	; 1
    526c:	80 93 3e 07 	sts	0x073E, r24
    5270:	91 30       	cpi	r25, 0x01	; 1
    5272:	51 f0       	breq	.+20     	; 0x5288 <STEPPER_set_stop_mode+0x20>
    5274:	91 30       	cpi	r25, 0x01	; 1
    5276:	18 f0       	brcs	.+6      	; 0x527e <STEPPER_set_stop_mode+0x16>
    5278:	92 30       	cpi	r25, 0x02	; 2
    527a:	41 f4       	brne	.+16     	; 0x528c <STEPPER_set_stop_mode+0x24>
    527c:	03 c0       	rjmp	.+6      	; 0x5284 <STEPPER_set_stop_mode+0x1c>
    527e:	60 93 28 07 	sts	0x0728, r22
    5282:	04 c0       	rjmp	.+8      	; 0x528c <STEPPER_set_stop_mode+0x24>
    5284:	60 93 28 07 	sts	0x0728, r22
    5288:	60 93 29 07 	sts	0x0729, r22
    528c:	10 92 3e 07 	sts	0x073E, r1
    5290:	08 95       	ret

00005292 <STEPPER_setup_decels>:
    5292:	0f 93       	push	r16
    5294:	1f 93       	push	r17
    5296:	cf 93       	push	r28
    5298:	df 93       	push	r29
    529a:	eb 01       	movw	r28, r22
    529c:	8a 01       	movw	r16, r20
    529e:	81 30       	cpi	r24, 0x01	; 1
    52a0:	01 f1       	breq	.+64     	; 0x52e2 <STEPPER_setup_decels+0x50>
    52a2:	81 30       	cpi	r24, 0x01	; 1
    52a4:	18 f0       	brcs	.+6      	; 0x52ac <STEPPER_setup_decels+0x1a>
    52a6:	82 30       	cpi	r24, 0x02	; 2
    52a8:	61 f5       	brne	.+88     	; 0x5302 <STEPPER_setup_decels+0x70>
    52aa:	0d c0       	rjmp	.+26     	; 0x52c6 <STEPPER_setup_decels+0x34>
    52ac:	80 91 12 07 	lds	r24, 0x0712
    52b0:	90 91 13 07 	lds	r25, 0x0713
    52b4:	89 2b       	or	r24, r25
    52b6:	11 f0       	breq	.+4      	; 0x52bc <STEPPER_setup_decels+0x2a>
    52b8:	80 e0       	ldi	r24, 0x00	; 0
    52ba:	1a c0       	rjmp	.+52     	; 0x52f0 <STEPPER_setup_decels+0x5e>
    52bc:	10 92 1f 07 	sts	0x071F, r1
    52c0:	10 92 1e 07 	sts	0x071E, r1
    52c4:	1e c0       	rjmp	.+60     	; 0x5302 <STEPPER_setup_decels+0x70>
    52c6:	80 91 12 07 	lds	r24, 0x0712
    52ca:	90 91 13 07 	lds	r25, 0x0713
    52ce:	89 2b       	or	r24, r25
    52d0:	21 f0       	breq	.+8      	; 0x52da <STEPPER_setup_decels+0x48>
    52d2:	80 e0       	ldi	r24, 0x00	; 0
    52d4:	0e 94 bf 2a 	call	0x557e	; 0x557e <STEPPER_set_decel_step_values>
    52d8:	04 c0       	rjmp	.+8      	; 0x52e2 <STEPPER_setup_decels+0x50>
    52da:	10 92 1f 07 	sts	0x071F, r1
    52de:	10 92 1e 07 	sts	0x071E, r1
    52e2:	80 91 14 07 	lds	r24, 0x0714
    52e6:	90 91 15 07 	lds	r25, 0x0715
    52ea:	89 2b       	or	r24, r25
    52ec:	31 f0       	breq	.+12     	; 0x52fa <STEPPER_setup_decels+0x68>
    52ee:	81 e0       	ldi	r24, 0x01	; 1
    52f0:	be 01       	movw	r22, r28
    52f2:	a8 01       	movw	r20, r16
    52f4:	0e 94 bf 2a 	call	0x557e	; 0x557e <STEPPER_set_decel_step_values>
    52f8:	04 c0       	rjmp	.+8      	; 0x5302 <STEPPER_setup_decels+0x70>
    52fa:	10 92 21 07 	sts	0x0721, r1
    52fe:	10 92 20 07 	sts	0x0720, r1
    5302:	df 91       	pop	r29
    5304:	cf 91       	pop	r28
    5306:	1f 91       	pop	r17
    5308:	0f 91       	pop	r16
    530a:	08 95       	ret

0000530c <SYS_init>:
    530c:	10 92 41 07 	sts	0x0741, r1
    5310:	10 92 42 07 	sts	0x0742, r1
    5314:	10 92 46 07 	sts	0x0746, r1
    5318:	10 92 43 07 	sts	0x0743, r1
    531c:	10 92 45 07 	sts	0x0745, r1
    5320:	10 92 47 07 	sts	0x0747, r1
    5324:	10 92 48 07 	sts	0x0748, r1
    5328:	10 92 49 07 	sts	0x0749, r1
    532c:	10 92 4a 07 	sts	0x074A, r1
    5330:	10 92 4b 07 	sts	0x074B, r1
    5334:	10 92 4c 07 	sts	0x074C, r1
    5338:	10 92 4d 07 	sts	0x074D, r1
    533c:	10 92 4e 07 	sts	0x074E, r1
    5340:	10 92 4f 07 	sts	0x074F, r1
    5344:	10 92 50 07 	sts	0x0750, r1
    5348:	10 92 51 07 	sts	0x0751, r1
    534c:	10 92 52 07 	sts	0x0752, r1
    5350:	08 95       	ret

00005352 <TMRSRVC_insert>:
    5352:	cf 92       	push	r12
    5354:	df 92       	push	r13
    5356:	ef 92       	push	r14
    5358:	ff 92       	push	r15
    535a:	0f 93       	push	r16
    535c:	1f 93       	push	r17
    535e:	cf 93       	push	r28
    5360:	df 93       	push	r29
    5362:	ec 01       	movw	r28, r24
    5364:	80 91 78 07 	lds	r24, 0x0778
    5368:	88 23       	and	r24, r24
    536a:	39 f4       	brne	.+14     	; 0x537a <TMRSRVC_insert+0x28>
    536c:	d0 93 7a 07 	sts	0x077A, r29
    5370:	c0 93 79 07 	sts	0x0779, r28
    5374:	0e 94 37 2a 	call	0x546e	; 0x546e <TMRSRVC_start>
    5378:	47 c0       	rjmp	.+142    	; 0x5408 <TMRSRVC_insert+0xb6>
    537a:	c0 90 79 07 	lds	r12, 0x0779
    537e:	d0 90 7a 07 	lds	r13, 0x077A
    5382:	00 e0       	ldi	r16, 0x00	; 0
    5384:	10 e0       	ldi	r17, 0x00	; 0
    5386:	ee 24       	eor	r14, r14
    5388:	ff 24       	eor	r15, r15
    538a:	37 c0       	rjmp	.+110    	; 0x53fa <TMRSRVC_insert+0xa8>
    538c:	a8 81       	ld	r26, Y
    538e:	b9 81       	ldd	r27, Y+1	; 0x01
    5390:	fd 01       	movw	r30, r26
    5392:	64 81       	ldd	r22, Z+4	; 0x04
    5394:	75 81       	ldd	r23, Z+5	; 0x05
    5396:	f6 01       	movw	r30, r12
    5398:	40 81       	ld	r20, Z
    539a:	51 81       	ldd	r21, Z+1	; 0x01
    539c:	fa 01       	movw	r30, r20
    539e:	84 81       	ldd	r24, Z+4	; 0x04
    53a0:	95 81       	ldd	r25, Z+5	; 0x05
    53a2:	9b 01       	movw	r18, r22
    53a4:	28 1b       	sub	r18, r24
    53a6:	39 0b       	sbc	r19, r25
    53a8:	37 ff       	sbrs	r19, 7
    53aa:	0f c0       	rjmp	.+30     	; 0x53ca <TMRSRVC_insert+0x78>
    53ac:	86 1b       	sub	r24, r22
    53ae:	97 0b       	sbc	r25, r23
    53b0:	95 83       	std	Z+5, r25	; 0x05
    53b2:	84 83       	std	Z+4, r24	; 0x04
    53b4:	db 82       	std	Y+3, r13	; 0x03
    53b6:	ca 82       	std	Y+2, r12	; 0x02
    53b8:	01 2b       	or	r16, r17
    53ba:	29 f4       	brne	.+10     	; 0x53c6 <TMRSRVC_insert+0x74>
    53bc:	d0 93 7a 07 	sts	0x077A, r29
    53c0:	c0 93 79 07 	sts	0x0779, r28
    53c4:	21 c0       	rjmp	.+66     	; 0x5408 <TMRSRVC_insert+0xb6>
    53c6:	f7 01       	movw	r30, r14
    53c8:	0c c0       	rjmp	.+24     	; 0x53e2 <TMRSRVC_insert+0x90>
    53ca:	f6 01       	movw	r30, r12
    53cc:	82 81       	ldd	r24, Z+2	; 0x02
    53ce:	93 81       	ldd	r25, Z+3	; 0x03
    53d0:	21 15       	cp	r18, r1
    53d2:	31 05       	cpc	r19, r1
    53d4:	49 f4       	brne	.+18     	; 0x53e8 <TMRSRVC_insert+0x96>
    53d6:	fd 01       	movw	r30, r26
    53d8:	15 82       	std	Z+5, r1	; 0x05
    53da:	14 82       	std	Z+4, r1	; 0x04
    53dc:	9b 83       	std	Y+3, r25	; 0x03
    53de:	8a 83       	std	Y+2, r24	; 0x02
    53e0:	f6 01       	movw	r30, r12
    53e2:	d3 83       	std	Z+3, r29	; 0x03
    53e4:	c2 83       	std	Z+2, r28	; 0x02
    53e6:	10 c0       	rjmp	.+32     	; 0x5408 <TMRSRVC_insert+0xb6>
    53e8:	fd 01       	movw	r30, r26
    53ea:	35 83       	std	Z+5, r19	; 0x05
    53ec:	24 83       	std	Z+4, r18	; 0x04
    53ee:	00 97       	sbiw	r24, 0x00	; 0
    53f0:	b9 f3       	breq	.-18     	; 0x53e0 <TMRSRVC_insert+0x8e>
    53f2:	0f 5f       	subi	r16, 0xFF	; 255
    53f4:	1f 4f       	sbci	r17, 0xFF	; 255
    53f6:	76 01       	movw	r14, r12
    53f8:	6c 01       	movw	r12, r24
    53fa:	80 91 78 07 	lds	r24, 0x0778
    53fe:	90 e0       	ldi	r25, 0x00	; 0
    5400:	08 17       	cp	r16, r24
    5402:	19 07       	cpc	r17, r25
    5404:	18 f2       	brcs	.-122    	; 0x538c <TMRSRVC_insert+0x3a>
    5406:	ec cf       	rjmp	.-40     	; 0x53e0 <TMRSRVC_insert+0x8e>
    5408:	80 91 78 07 	lds	r24, 0x0778
    540c:	8f 5f       	subi	r24, 0xFF	; 255
    540e:	80 93 78 07 	sts	0x0778, r24
    5412:	df 91       	pop	r29
    5414:	cf 91       	pop	r28
    5416:	1f 91       	pop	r17
    5418:	0f 91       	pop	r16
    541a:	ff 90       	pop	r15
    541c:	ef 90       	pop	r14
    541e:	df 90       	pop	r13
    5420:	cf 90       	pop	r12
    5422:	08 95       	ret

00005424 <TMRSRVC_open>:
    5424:	88 e0       	ldi	r24, 0x08	; 8
    5426:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    542a:	88 23       	and	r24, r24
    542c:	b9 f4       	brne	.+46     	; 0x545c <TMRSRVC_open+0x38>
    542e:	10 92 78 07 	sts	0x0778, r1
    5432:	10 92 7a 07 	sts	0x077A, r1
    5436:	10 92 79 07 	sts	0x0779, r1
    543a:	10 92 42 04 	sts	0x0442, r1
    543e:	10 92 43 04 	sts	0x0443, r1
    5442:	80 e1       	ldi	r24, 0x10	; 16
    5444:	6c e2       	ldi	r22, 0x2C	; 44
    5446:	7b e2       	ldi	r23, 0x2B	; 43
    5448:	0e 94 48 2a 	call	0x5490	; 0x5490 <__ISR_attach>
    544c:	0e 94 33 2b 	call	0x5666	; 0x5666 <__TMRSRVC_init>
    5450:	0e 94 31 2a 	call	0x5462	; 0x5462 <__TMRSRVC_start>
    5454:	88 e0       	ldi	r24, 0x08	; 8
    5456:	61 e0       	ldi	r22, 0x01	; 1
    5458:	0e 94 de 21 	call	0x43bc	; 0x43bc <SYS_set_state>
    545c:	88 e0       	ldi	r24, 0x08	; 8
    545e:	91 e0       	ldi	r25, 0x01	; 1
    5460:	08 95       	ret

00005462 <__TMRSRVC_start>:
    5462:	ee e6       	ldi	r30, 0x6E	; 110
    5464:	f0 e0       	ldi	r31, 0x00	; 0
    5466:	80 81       	ld	r24, Z
    5468:	82 60       	ori	r24, 0x02	; 2
    546a:	80 83       	st	Z, r24
    546c:	08 95       	ret

0000546e <TMRSRVC_start>:
    546e:	81 e0       	ldi	r24, 0x01	; 1
    5470:	80 93 43 04 	sts	0x0443, r24
    5474:	08 95       	ret

00005476 <I2C_enable>:
    5476:	80 91 7b 07 	lds	r24, 0x077B
    547a:	81 30       	cpi	r24, 0x01	; 1
    547c:	29 f4       	brne	.+10     	; 0x5488 <I2C_enable+0x12>
    547e:	80 91 bc 00 	lds	r24, 0x00BC
    5482:	84 60       	ori	r24, 0x04	; 4
    5484:	80 93 bc 00 	sts	0x00BC, r24
    5488:	08 95       	ret

0000548a <__I2C_init>:
    548a:	38 98       	cbi	0x07, 0	; 7
    548c:	39 98       	cbi	0x07, 1	; 7
    548e:	08 95       	ret

00005490 <__ISR_attach>:
    5490:	80 32       	cpi	r24, 0x20	; 32
    5492:	18 f0       	brcs	.+6      	; 0x549a <__ISR_attach+0xa>
    5494:	20 e0       	ldi	r18, 0x00	; 0
    5496:	30 e0       	ldi	r19, 0x00	; 0
    5498:	0a c0       	rjmp	.+20     	; 0x54ae <__ISR_attach+0x1e>
    549a:	e8 2f       	mov	r30, r24
    549c:	f0 e0       	ldi	r31, 0x00	; 0
    549e:	ee 0f       	add	r30, r30
    54a0:	ff 1f       	adc	r31, r31
    54a2:	ee 51       	subi	r30, 0x1E	; 30
    54a4:	fc 4f       	sbci	r31, 0xFC	; 252
    54a6:	20 81       	ld	r18, Z
    54a8:	31 81       	ldd	r19, Z+1	; 0x01
    54aa:	71 83       	std	Z+1, r23	; 0x01
    54ac:	60 83       	st	Z, r22
    54ae:	c9 01       	movw	r24, r18
    54b0:	08 95       	ret

000054b2 <__ATMEGA_init>:
    54b2:	24 9a       	sbi	0x04, 4	; 4
    54b4:	2c 9a       	sbi	0x05, 4	; 5
    54b6:	08 95       	ret

000054b8 <SPI_default_config>:
    54b8:	83 e5       	ldi	r24, 0x53	; 83
    54ba:	8c bd       	out	0x2c, r24	; 44
    54bc:	81 e0       	ldi	r24, 0x01	; 1
    54be:	8d bd       	out	0x2d, r24	; 45
    54c0:	8d e0       	ldi	r24, 0x0D	; 13
    54c2:	8a 95       	dec	r24
    54c4:	f1 f7       	brne	.-4      	; 0x54c2 <SPI_default_config+0xa>
    54c6:	08 95       	ret

000054c8 <SPI_ATtiny0_config>:
    54c8:	83 e5       	ldi	r24, 0x53	; 83
    54ca:	8c bd       	out	0x2c, r24	; 44
    54cc:	1d bc       	out	0x2d, r1	; 45
    54ce:	84 ef       	ldi	r24, 0xF4	; 244
    54d0:	91 e0       	ldi	r25, 0x01	; 1
    54d2:	01 97       	sbiw	r24, 0x01	; 1
    54d4:	f1 f7       	brne	.-4      	; 0x54d2 <SPI_ATtiny0_config+0xa>
    54d6:	08 95       	ret

000054d8 <SPI_PSXC_config>:
    54d8:	8f e7       	ldi	r24, 0x7F	; 127
    54da:	8c bd       	out	0x2c, r24	; 44
    54dc:	1d bc       	out	0x2d, r1	; 45
    54de:	84 ef       	ldi	r24, 0xF4	; 244
    54e0:	91 e0       	ldi	r25, 0x01	; 1
    54e2:	01 97       	sbiw	r24, 0x01	; 1
    54e4:	f1 f7       	brne	.-4      	; 0x54e2 <SPI_PSXC_config+0xa>
    54e6:	08 95       	ret

000054e8 <SPI_LCD_config>:
    54e8:	83 e5       	ldi	r24, 0x53	; 83
    54ea:	8c bd       	out	0x2c, r24	; 44
    54ec:	81 e0       	ldi	r24, 0x01	; 1
    54ee:	8d bd       	out	0x2d, r24	; 45
    54f0:	8d e0       	ldi	r24, 0x0D	; 13
    54f2:	8a 95       	dec	r24
    54f4:	f1 f7       	brne	.-4      	; 0x54f2 <SPI_LCD_config+0xa>
    54f6:	08 95       	ret

000054f8 <SPI_FLASH_config>:
    54f8:	83 e5       	ldi	r24, 0x53	; 83
    54fa:	8c bd       	out	0x2c, r24	; 44
    54fc:	81 e0       	ldi	r24, 0x01	; 1
    54fe:	8d bd       	out	0x2d, r24	; 45
    5500:	84 ef       	ldi	r24, 0xF4	; 244
    5502:	91 e0       	ldi	r25, 0x01	; 1
    5504:	01 97       	sbiw	r24, 0x01	; 1
    5506:	f1 f7       	brne	.-4      	; 0x5504 <SPI_FLASH_config+0xc>
    5508:	08 95       	ret

0000550a <__SPI_init>:
    550a:	25 9a       	sbi	0x04, 5	; 4
    550c:	26 98       	cbi	0x04, 6	; 4
    550e:	27 9a       	sbi	0x04, 7	; 4
    5510:	20 9a       	sbi	0x04, 0	; 4
    5512:	21 9a       	sbi	0x04, 1	; 4
    5514:	22 9a       	sbi	0x04, 2	; 4
    5516:	08 95       	ret

00005518 <SPKR_beep>:
    5518:	9b 01       	movw	r18, r22
    551a:	ac 01       	movw	r20, r24
    551c:	80 91 33 04 	lds	r24, 0x0433
    5520:	88 23       	and	r24, r24
    5522:	81 f0       	breq	.+32     	; 0x5544 <SPKR_beep+0x2c>
    5524:	da 01       	movw	r26, r20
    5526:	c9 01       	movw	r24, r18
    5528:	88 0f       	add	r24, r24
    552a:	99 1f       	adc	r25, r25
    552c:	aa 1f       	adc	r26, r26
    552e:	bb 1f       	adc	r27, r27
    5530:	90 93 3f 04 	sts	0x043F, r25
    5534:	80 93 3e 04 	sts	0x043E, r24
    5538:	21 15       	cp	r18, r1
    553a:	31 05       	cpc	r19, r1
    553c:	41 05       	cpc	r20, r1
    553e:	51 05       	cpc	r21, r1
    5540:	09 f4       	brne	.+2      	; 0x5544 <SPKR_beep+0x2c>
    5542:	5f 98       	cbi	0x0b, 7	; 11
    5544:	08 95       	ret

00005546 <__SPKR_close>:
    5546:	82 30       	cpi	r24, 0x02	; 2
    5548:	29 f4       	brne	.+10     	; 0x5554 <__SPKR_close+0xe>
    554a:	80 91 81 00 	lds	r24, 0x0081
    554e:	8e 7f       	andi	r24, 0xFE	; 254
    5550:	80 93 81 00 	sts	0x0081, r24
    5554:	80 91 32 04 	lds	r24, 0x0432
    5558:	81 30       	cpi	r24, 0x01	; 1
    555a:	31 f4       	brne	.+12     	; 0x5568 <__SPKR_close+0x22>
    555c:	80 91 33 04 	lds	r24, 0x0433
    5560:	81 30       	cpi	r24, 0x01	; 1
    5562:	11 f4       	brne	.+4      	; 0x5568 <__SPKR_close+0x22>
    5564:	00 00       	nop
    5566:	08 95       	ret
    5568:	80 91 32 04 	lds	r24, 0x0432
    556c:	81 30       	cpi	r24, 0x01	; 1
    556e:	21 f0       	breq	.+8      	; 0x5578 <__SPKR_close+0x32>
    5570:	80 91 33 04 	lds	r24, 0x0433
    5574:	81 30       	cpi	r24, 0x01	; 1
    5576:	11 f4       	brne	.+4      	; 0x557c <__SPKR_close+0x36>
    5578:	5f 98       	cbi	0x0b, 7	; 11
    557a:	57 98       	cbi	0x0a, 7	; 10
    557c:	08 95       	ret

0000557e <STEPPER_set_decel_step_values>:
    557e:	ef 92       	push	r14
    5580:	ff 92       	push	r15
    5582:	0f 93       	push	r16
    5584:	1f 93       	push	r17
    5586:	cf 93       	push	r28
    5588:	df 93       	push	r29
    558a:	eb 01       	movw	r28, r22
    558c:	88 23       	and	r24, r24
    558e:	21 f0       	breq	.+8      	; 0x5598 <STEPPER_set_decel_step_values+0x1a>
    5590:	81 30       	cpi	r24, 0x01	; 1
    5592:	09 f0       	breq	.+2      	; 0x5596 <STEPPER_set_decel_step_values+0x18>
    5594:	5a c0       	rjmp	.+180    	; 0x564a <STEPPER_set_decel_step_values+0xcc>
    5596:	2d c0       	rjmp	.+90     	; 0x55f2 <STEPPER_set_decel_step_values+0x74>
    5598:	9a 01       	movw	r18, r20
    559a:	40 e0       	ldi	r20, 0x00	; 0
    559c:	50 e0       	ldi	r21, 0x00	; 0
    559e:	ca 01       	movw	r24, r20
    55a0:	b9 01       	movw	r22, r18
    55a2:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__mulsi3>
    55a6:	20 91 12 07 	lds	r18, 0x0712
    55aa:	30 91 13 07 	lds	r19, 0x0713
    55ae:	22 0f       	add	r18, r18
    55b0:	33 1f       	adc	r19, r19
    55b2:	40 e0       	ldi	r20, 0x00	; 0
    55b4:	50 e0       	ldi	r21, 0x00	; 0
    55b6:	0e 94 10 36 	call	0x6c20	; 0x6c20 <__udivmodsi4>
    55ba:	79 01       	movw	r14, r18
    55bc:	8a 01       	movw	r16, r20
    55be:	a8 01       	movw	r20, r16
    55c0:	97 01       	movw	r18, r14
    55c2:	22 0f       	add	r18, r18
    55c4:	33 1f       	adc	r19, r19
    55c6:	44 1f       	adc	r20, r20
    55c8:	55 1f       	adc	r21, r21
    55ca:	ce 01       	movw	r24, r28
    55cc:	a0 e0       	ldi	r26, 0x00	; 0
    55ce:	b0 e0       	ldi	r27, 0x00	; 0
    55d0:	82 17       	cp	r24, r18
    55d2:	93 07       	cpc	r25, r19
    55d4:	a4 07       	cpc	r26, r20
    55d6:	b5 07       	cpc	r27, r21
    55d8:	28 f0       	brcs	.+10     	; 0x55e4 <STEPPER_set_decel_step_values+0x66>
    55da:	f0 92 1f 07 	sts	0x071F, r15
    55de:	e0 92 1e 07 	sts	0x071E, r14
    55e2:	33 c0       	rjmp	.+102    	; 0x564a <STEPPER_set_decel_step_values+0xcc>
    55e4:	d6 95       	lsr	r29
    55e6:	c7 95       	ror	r28
    55e8:	d0 93 1f 07 	sts	0x071F, r29
    55ec:	c0 93 1e 07 	sts	0x071E, r28
    55f0:	2c c0       	rjmp	.+88     	; 0x564a <STEPPER_set_decel_step_values+0xcc>
    55f2:	9a 01       	movw	r18, r20
    55f4:	40 e0       	ldi	r20, 0x00	; 0
    55f6:	50 e0       	ldi	r21, 0x00	; 0
    55f8:	ca 01       	movw	r24, r20
    55fa:	b9 01       	movw	r22, r18
    55fc:	0e 94 f1 35 	call	0x6be2	; 0x6be2 <__mulsi3>
    5600:	20 91 14 07 	lds	r18, 0x0714
    5604:	30 91 15 07 	lds	r19, 0x0715
    5608:	22 0f       	add	r18, r18
    560a:	33 1f       	adc	r19, r19
    560c:	40 e0       	ldi	r20, 0x00	; 0
    560e:	50 e0       	ldi	r21, 0x00	; 0
    5610:	0e 94 10 36 	call	0x6c20	; 0x6c20 <__udivmodsi4>
    5614:	79 01       	movw	r14, r18
    5616:	8a 01       	movw	r16, r20
    5618:	a8 01       	movw	r20, r16
    561a:	97 01       	movw	r18, r14
    561c:	22 0f       	add	r18, r18
    561e:	33 1f       	adc	r19, r19
    5620:	44 1f       	adc	r20, r20
    5622:	55 1f       	adc	r21, r21
    5624:	ce 01       	movw	r24, r28
    5626:	a0 e0       	ldi	r26, 0x00	; 0
    5628:	b0 e0       	ldi	r27, 0x00	; 0
    562a:	82 17       	cp	r24, r18
    562c:	93 07       	cpc	r25, r19
    562e:	a4 07       	cpc	r26, r20
    5630:	b5 07       	cpc	r27, r21
    5632:	28 f0       	brcs	.+10     	; 0x563e <STEPPER_set_decel_step_values+0xc0>
    5634:	f0 92 21 07 	sts	0x0721, r15
    5638:	e0 92 20 07 	sts	0x0720, r14
    563c:	06 c0       	rjmp	.+12     	; 0x564a <STEPPER_set_decel_step_values+0xcc>
    563e:	d6 95       	lsr	r29
    5640:	c7 95       	ror	r28
    5642:	d0 93 21 07 	sts	0x0721, r29
    5646:	c0 93 20 07 	sts	0x0720, r28
    564a:	df 91       	pop	r29
    564c:	cf 91       	pop	r28
    564e:	1f 91       	pop	r17
    5650:	0f 91       	pop	r16
    5652:	ff 90       	pop	r15
    5654:	ef 90       	pop	r14
    5656:	08 95       	ret

00005658 <__TIMER0_COMPA_vect>:
    5658:	0e 94 3c 2b 	call	0x5678	; 0x5678 <TMRSRVC_tick>
    565c:	0e 94 7c 2b 	call	0x56f8	; 0x56f8 <STEPPER_clk>
    5660:	0e 94 55 2b 	call	0x56aa	; 0x56aa <SPKR_beep_clk>
    5664:	08 95       	ret

00005666 <__TMRSRVC_init>:
    5666:	84 b5       	in	r24, 0x24	; 36
    5668:	82 60       	ori	r24, 0x02	; 2
    566a:	84 bd       	out	0x24, r24	; 36
    566c:	85 b5       	in	r24, 0x25	; 37
    566e:	84 60       	ori	r24, 0x04	; 4
    5670:	85 bd       	out	0x25, r24	; 37
    5672:	8e e4       	ldi	r24, 0x4E	; 78
    5674:	87 bd       	out	0x27, r24	; 39
    5676:	08 95       	ret

00005678 <TMRSRVC_tick>:
    5678:	88 e0       	ldi	r24, 0x08	; 8
    567a:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    567e:	88 23       	and	r24, r24
    5680:	11 f4       	brne	.+4      	; 0x5686 <TMRSRVC_tick+0xe>
    5682:	84 e0       	ldi	r24, 0x04	; 4
    5684:	08 95       	ret
    5686:	80 91 43 04 	lds	r24, 0x0443
    568a:	88 23       	and	r24, r24
    568c:	11 f4       	brne	.+4      	; 0x5692 <TMRSRVC_tick+0x1a>
    568e:	83 e0       	ldi	r24, 0x03	; 3
    5690:	08 95       	ret
    5692:	80 91 42 04 	lds	r24, 0x0442
    5696:	88 23       	and	r24, r24
    5698:	11 f0       	breq	.+4      	; 0x569e <TMRSRVC_tick+0x26>
    569a:	82 e0       	ldi	r24, 0x02	; 2
    569c:	08 95       	ret
    569e:	0e 94 c9 2d 	call	0x5b92	; 0x5b92 <TMRSRVC_process>
    56a2:	81 30       	cpi	r24, 0x01	; 1
    56a4:	e1 f3       	breq	.-8      	; 0x569e <TMRSRVC_tick+0x26>
    56a6:	80 e0       	ldi	r24, 0x00	; 0
    56a8:	08 95       	ret

000056aa <SPKR_beep_clk>:
    56aa:	80 91 33 04 	lds	r24, 0x0433
    56ae:	81 30       	cpi	r24, 0x01	; 1
    56b0:	11 f5       	brne	.+68     	; 0x56f6 <SPKR_beep_clk+0x4c>
    56b2:	80 91 3c 04 	lds	r24, 0x043C
    56b6:	90 91 3d 04 	lds	r25, 0x043D
    56ba:	20 91 3e 04 	lds	r18, 0x043E
    56be:	30 91 3f 04 	lds	r19, 0x043F
    56c2:	28 0f       	add	r18, r24
    56c4:	39 1f       	adc	r19, r25
    56c6:	30 93 3d 04 	sts	0x043D, r19
    56ca:	20 93 3c 04 	sts	0x043C, r18
    56ce:	80 91 3c 04 	lds	r24, 0x043C
    56d2:	90 91 3d 04 	lds	r25, 0x043D
    56d6:	88 5e       	subi	r24, 0xE8	; 232
    56d8:	93 40       	sbci	r25, 0x03	; 3
    56da:	6c f0       	brlt	.+26     	; 0x56f6 <SPKR_beep_clk+0x4c>
    56dc:	8b b1       	in	r24, 0x0b	; 11
    56de:	80 58       	subi	r24, 0x80	; 128
    56e0:	8b b9       	out	0x0b, r24	; 11
    56e2:	80 91 3c 04 	lds	r24, 0x043C
    56e6:	90 91 3d 04 	lds	r25, 0x043D
    56ea:	88 5e       	subi	r24, 0xE8	; 232
    56ec:	93 40       	sbci	r25, 0x03	; 3
    56ee:	90 93 3d 04 	sts	0x043D, r25
    56f2:	80 93 3c 04 	sts	0x043C, r24
    56f6:	08 95       	ret

000056f8 <STEPPER_clk>:
    56f8:	87 e0       	ldi	r24, 0x07	; 7
    56fa:	0e 94 96 21 	call	0x432c	; 0x432c <SYS_get_state>
    56fe:	81 30       	cpi	r24, 0x01	; 1
    5700:	09 f0       	breq	.+2      	; 0x5704 <STEPPER_clk+0xc>
    5702:	aa c0       	rjmp	.+340    	; 0x5858 <STEPPER_clk+0x160>
    5704:	80 91 12 07 	lds	r24, 0x0712
    5708:	90 91 13 07 	lds	r25, 0x0713
    570c:	89 2b       	or	r24, r25
    570e:	09 f1       	breq	.+66     	; 0x5752 <STEPPER_clk+0x5a>
    5710:	80 91 36 07 	lds	r24, 0x0736
    5714:	90 91 37 07 	lds	r25, 0x0737
    5718:	20 91 12 07 	lds	r18, 0x0712
    571c:	30 91 13 07 	lds	r19, 0x0713
    5720:	82 0f       	add	r24, r18
    5722:	93 1f       	adc	r25, r19
    5724:	90 93 37 07 	sts	0x0737, r25
    5728:	80 93 36 07 	sts	0x0736, r24
    572c:	80 91 36 07 	lds	r24, 0x0736
    5730:	90 91 37 07 	lds	r25, 0x0737
    5734:	88 5e       	subi	r24, 0xE8	; 232
    5736:	93 40       	sbci	r25, 0x03	; 3
    5738:	a4 f0       	brlt	.+40     	; 0x5762 <STEPPER_clk+0x6a>
    573a:	80 91 36 07 	lds	r24, 0x0736
    573e:	90 91 37 07 	lds	r25, 0x0737
    5742:	88 5e       	subi	r24, 0xE8	; 232
    5744:	93 40       	sbci	r25, 0x03	; 3
    5746:	90 93 37 07 	sts	0x0737, r25
    574a:	80 93 36 07 	sts	0x0736, r24
    574e:	41 e0       	ldi	r20, 0x01	; 1
    5750:	09 c0       	rjmp	.+18     	; 0x5764 <STEPPER_clk+0x6c>
    5752:	80 91 0a 07 	lds	r24, 0x070A
    5756:	90 91 0b 07 	lds	r25, 0x070B
    575a:	90 93 0f 07 	sts	0x070F, r25
    575e:	80 93 0e 07 	sts	0x070E, r24
    5762:	40 e0       	ldi	r20, 0x00	; 0
    5764:	80 91 14 07 	lds	r24, 0x0714
    5768:	90 91 15 07 	lds	r25, 0x0715
    576c:	89 2b       	or	r24, r25
    576e:	09 f1       	breq	.+66     	; 0x57b2 <STEPPER_clk+0xba>
    5770:	80 91 38 07 	lds	r24, 0x0738
    5774:	90 91 39 07 	lds	r25, 0x0739
    5778:	20 91 14 07 	lds	r18, 0x0714
    577c:	30 91 15 07 	lds	r19, 0x0715
    5780:	82 0f       	add	r24, r18
    5782:	93 1f       	adc	r25, r19
    5784:	90 93 39 07 	sts	0x0739, r25
    5788:	80 93 38 07 	sts	0x0738, r24
    578c:	80 91 38 07 	lds	r24, 0x0738
    5790:	90 91 39 07 	lds	r25, 0x0739
    5794:	88 5e       	subi	r24, 0xE8	; 232
    5796:	93 40       	sbci	r25, 0x03	; 3
    5798:	a4 f0       	brlt	.+40     	; 0x57c2 <STEPPER_clk+0xca>
    579a:	80 91 38 07 	lds	r24, 0x0738
    579e:	90 91 39 07 	lds	r25, 0x0739
    57a2:	88 5e       	subi	r24, 0xE8	; 232
    57a4:	93 40       	sbci	r25, 0x03	; 3
    57a6:	90 93 39 07 	sts	0x0739, r25
    57aa:	80 93 38 07 	sts	0x0738, r24
    57ae:	61 e0       	ldi	r22, 0x01	; 1
    57b0:	09 c0       	rjmp	.+18     	; 0x57c4 <STEPPER_clk+0xcc>
    57b2:	80 91 0c 07 	lds	r24, 0x070C
    57b6:	90 91 0d 07 	lds	r25, 0x070D
    57ba:	90 93 11 07 	sts	0x0711, r25
    57be:	80 93 10 07 	sts	0x0710, r24
    57c2:	60 e0       	ldi	r22, 0x00	; 0
    57c4:	84 2f       	mov	r24, r20
    57c6:	0e 94 2d 2c 	call	0x585a	; 0x585a <STEPPER_process_accel>
    57ca:	80 91 32 07 	lds	r24, 0x0732
    57ce:	90 91 33 07 	lds	r25, 0x0733
    57d2:	20 91 0e 07 	lds	r18, 0x070E
    57d6:	30 91 0f 07 	lds	r19, 0x070F
    57da:	28 0f       	add	r18, r24
    57dc:	39 1f       	adc	r19, r25
    57de:	30 93 33 07 	sts	0x0733, r19
    57e2:	20 93 32 07 	sts	0x0732, r18
    57e6:	80 91 32 07 	lds	r24, 0x0732
    57ea:	90 91 33 07 	lds	r25, 0x0733
    57ee:	88 5e       	subi	r24, 0xE8	; 232
    57f0:	93 40       	sbci	r25, 0x03	; 3
    57f2:	14 f4       	brge	.+4      	; 0x57f8 <STEPPER_clk+0x100>
    57f4:	40 e0       	ldi	r20, 0x00	; 0
    57f6:	0b c0       	rjmp	.+22     	; 0x580e <STEPPER_clk+0x116>
    57f8:	80 91 32 07 	lds	r24, 0x0732
    57fc:	90 91 33 07 	lds	r25, 0x0733
    5800:	88 5e       	subi	r24, 0xE8	; 232
    5802:	93 40       	sbci	r25, 0x03	; 3
    5804:	90 93 33 07 	sts	0x0733, r25
    5808:	80 93 32 07 	sts	0x0732, r24
    580c:	41 e0       	ldi	r20, 0x01	; 1
    580e:	80 91 34 07 	lds	r24, 0x0734
    5812:	90 91 35 07 	lds	r25, 0x0735
    5816:	20 91 10 07 	lds	r18, 0x0710
    581a:	30 91 11 07 	lds	r19, 0x0711
    581e:	28 0f       	add	r18, r24
    5820:	39 1f       	adc	r19, r25
    5822:	30 93 35 07 	sts	0x0735, r19
    5826:	20 93 34 07 	sts	0x0734, r18
    582a:	80 91 34 07 	lds	r24, 0x0734
    582e:	90 91 35 07 	lds	r25, 0x0735
    5832:	88 5e       	subi	r24, 0xE8	; 232
    5834:	93 40       	sbci	r25, 0x03	; 3
    5836:	14 f4       	brge	.+4      	; 0x583c <STEPPER_clk+0x144>
    5838:	60 e0       	ldi	r22, 0x00	; 0
    583a:	0b c0       	rjmp	.+22     	; 0x5852 <STEPPER_clk+0x15a>
    583c:	80 91 34 07 	lds	r24, 0x0734
    5840:	90 91 35 07 	lds	r25, 0x0735
    5844:	88 5e       	subi	r24, 0xE8	; 232
    5846:	93 40       	sbci	r25, 0x03	; 3
    5848:	90 93 35 07 	sts	0x0735, r25
    584c:	80 93 34 07 	sts	0x0734, r24
    5850:	61 e0       	ldi	r22, 0x01	; 1
    5852:	84 2f       	mov	r24, r20
    5854:	0e 94 72 2c 	call	0x58e4	; 0x58e4 <STEPPER_process_run_mode>
    5858:	08 95       	ret

0000585a <STEPPER_process_accel>:
    585a:	88 23       	and	r24, r24
    585c:	f1 f0       	breq	.+60     	; 0x589a <STEPPER_process_accel+0x40>
    585e:	20 91 0a 07 	lds	r18, 0x070A
    5862:	30 91 0b 07 	lds	r19, 0x070B
    5866:	80 91 0e 07 	lds	r24, 0x070E
    586a:	90 91 0f 07 	lds	r25, 0x070F
    586e:	28 1b       	sub	r18, r24
    5870:	39 0b       	sbc	r19, r25
    5872:	12 16       	cp	r1, r18
    5874:	13 06       	cpc	r1, r19
    5876:	34 f4       	brge	.+12     	; 0x5884 <STEPPER_process_accel+0x2a>
    5878:	80 91 0e 07 	lds	r24, 0x070E
    587c:	90 91 0f 07 	lds	r25, 0x070F
    5880:	01 96       	adiw	r24, 0x01	; 1
    5882:	07 c0       	rjmp	.+14     	; 0x5892 <STEPPER_process_accel+0x38>
    5884:	23 2b       	or	r18, r19
    5886:	49 f0       	breq	.+18     	; 0x589a <STEPPER_process_accel+0x40>
    5888:	80 91 0e 07 	lds	r24, 0x070E
    588c:	90 91 0f 07 	lds	r25, 0x070F
    5890:	01 97       	sbiw	r24, 0x01	; 1
    5892:	90 93 0f 07 	sts	0x070F, r25
    5896:	80 93 0e 07 	sts	0x070E, r24
    589a:	66 23       	and	r22, r22
    589c:	11 f1       	breq	.+68     	; 0x58e2 <STEPPER_process_accel+0x88>
    589e:	20 91 0c 07 	lds	r18, 0x070C
    58a2:	30 91 0d 07 	lds	r19, 0x070D
    58a6:	80 91 10 07 	lds	r24, 0x0710
    58aa:	90 91 11 07 	lds	r25, 0x0711
    58ae:	28 1b       	sub	r18, r24
    58b0:	39 0b       	sbc	r19, r25
    58b2:	12 16       	cp	r1, r18
    58b4:	13 06       	cpc	r1, r19
    58b6:	54 f4       	brge	.+20     	; 0x58cc <STEPPER_process_accel+0x72>
    58b8:	80 91 10 07 	lds	r24, 0x0710
    58bc:	90 91 11 07 	lds	r25, 0x0711
    58c0:	01 96       	adiw	r24, 0x01	; 1
    58c2:	90 93 11 07 	sts	0x0711, r25
    58c6:	80 93 10 07 	sts	0x0710, r24
    58ca:	08 95       	ret
    58cc:	23 2b       	or	r18, r19
    58ce:	49 f0       	breq	.+18     	; 0x58e2 <STEPPER_process_accel+0x88>
    58d0:	80 91 10 07 	lds	r24, 0x0710
    58d4:	90 91 11 07 	lds	r25, 0x0711
    58d8:	01 97       	sbiw	r24, 0x01	; 1
    58da:	90 93 11 07 	sts	0x0711, r25
    58de:	80 93 10 07 	sts	0x0710, r24
    58e2:	08 95       	ret

000058e4 <STEPPER_process_run_mode>:
    58e4:	0f 93       	push	r16
    58e6:	1f 93       	push	r17
    58e8:	18 2f       	mov	r17, r24
    58ea:	06 2f       	mov	r16, r22
    58ec:	80 91 3e 07 	lds	r24, 0x073E
    58f0:	88 23       	and	r24, r24
    58f2:	09 f0       	breq	.+2      	; 0x58f6 <STEPPER_process_run_mode+0x12>
    58f4:	e7 c0       	rjmp	.+462    	; 0x5ac4 <STEPPER_process_run_mode+0x1e0>
    58f6:	80 91 26 07 	lds	r24, 0x0726
    58fa:	88 23       	and	r24, r24
    58fc:	09 f0       	breq	.+2      	; 0x5900 <STEPPER_process_run_mode+0x1c>
    58fe:	5a c0       	rjmp	.+180    	; 0x59b4 <STEPPER_process_run_mode+0xd0>
    5900:	80 91 0e 07 	lds	r24, 0x070E
    5904:	90 91 0f 07 	lds	r25, 0x070F
    5908:	89 2b       	or	r24, r25
    590a:	e9 f4       	brne	.+58     	; 0x5946 <STEPPER_process_run_mode+0x62>
    590c:	80 91 44 04 	lds	r24, 0x0444
    5910:	83 7e       	andi	r24, 0xE3	; 227
    5912:	80 93 44 04 	sts	0x0444, r24
    5916:	10 92 2f 07 	sts	0x072F, r1
    591a:	80 91 3a 07 	lds	r24, 0x073A
    591e:	88 23       	and	r24, r24
    5920:	09 f4       	brne	.+2      	; 0x5924 <STEPPER_process_run_mode+0x40>
    5922:	5d c0       	rjmp	.+186    	; 0x59de <STEPPER_process_run_mode+0xfa>
    5924:	60 91 28 07 	lds	r22, 0x0728
    5928:	80 e0       	ldi	r24, 0x00	; 0
    592a:	0e 94 23 21 	call	0x4246	; 0x4246 <STEPPER_stop>
    592e:	e0 91 3c 07 	lds	r30, 0x073C
    5932:	f0 91 3d 07 	lds	r31, 0x073D
    5936:	30 97       	sbiw	r30, 0x00	; 0
    5938:	09 f4       	brne	.+2      	; 0x593c <STEPPER_process_run_mode+0x58>
    593a:	51 c0       	rjmp	.+162    	; 0x59de <STEPPER_process_run_mode+0xfa>
    593c:	81 e0       	ldi	r24, 0x01	; 1
    593e:	80 83       	st	Z, r24
    5940:	10 92 3a 07 	sts	0x073A, r1
    5944:	4c c0       	rjmp	.+152    	; 0x59de <STEPPER_process_run_mode+0xfa>
    5946:	80 91 08 07 	lds	r24, 0x0708
    594a:	81 30       	cpi	r24, 0x01	; 1
    594c:	41 f4       	brne	.+16     	; 0x595e <STEPPER_process_run_mode+0x7a>
    594e:	80 91 1a 07 	lds	r24, 0x071A
    5952:	90 91 1b 07 	lds	r25, 0x071B
    5956:	01 97       	sbiw	r24, 0x01	; 1
    5958:	11 f4       	brne	.+4      	; 0x595e <STEPPER_process_run_mode+0x7a>
    595a:	11 e0       	ldi	r17, 0x01	; 1
    595c:	02 c0       	rjmp	.+4      	; 0x5962 <STEPPER_process_run_mode+0x7e>
    595e:	11 23       	and	r17, r17
    5960:	f1 f1       	breq	.+124    	; 0x59de <STEPPER_process_run_mode+0xfa>
    5962:	e0 91 2d 07 	lds	r30, 0x072D
    5966:	f0 e0       	ldi	r31, 0x00	; 0
    5968:	e9 5a       	subi	r30, 0xA9	; 169
    596a:	fc 4f       	sbci	r31, 0xFC	; 252
    596c:	90 91 44 04 	lds	r25, 0x0444
    5970:	93 7e       	andi	r25, 0xE3	; 227
    5972:	80 81       	ld	r24, Z
    5974:	89 2b       	or	r24, r25
    5976:	80 93 44 04 	sts	0x0444, r24
    597a:	80 91 2b 07 	lds	r24, 0x072B
    597e:	88 23       	and	r24, r24
    5980:	21 f4       	brne	.+8      	; 0x598a <STEPPER_process_run_mode+0xa6>
    5982:	80 91 2d 07 	lds	r24, 0x072D
    5986:	8f 5f       	subi	r24, 0xFF	; 255
    5988:	03 c0       	rjmp	.+6      	; 0x5990 <STEPPER_process_run_mode+0xac>
    598a:	80 91 2d 07 	lds	r24, 0x072D
    598e:	81 50       	subi	r24, 0x01	; 1
    5990:	80 93 2d 07 	sts	0x072D, r24
    5994:	80 91 2d 07 	lds	r24, 0x072D
    5998:	83 70       	andi	r24, 0x03	; 3
    599a:	80 93 2d 07 	sts	0x072D, r24
    599e:	81 e0       	ldi	r24, 0x01	; 1
    59a0:	80 93 2f 07 	sts	0x072F, r24
    59a4:	80 91 08 07 	lds	r24, 0x0708
    59a8:	81 30       	cpi	r24, 0x01	; 1
    59aa:	c9 f4       	brne	.+50     	; 0x59de <STEPPER_process_run_mode+0xfa>
    59ac:	80 e0       	ldi	r24, 0x00	; 0
    59ae:	0e 94 75 2d 	call	0x5aea	; 0x5aea <STEPPER_process_step_mode>
    59b2:	15 c0       	rjmp	.+42     	; 0x59de <STEPPER_process_run_mode+0xfa>
    59b4:	90 91 44 04 	lds	r25, 0x0444
    59b8:	93 7e       	andi	r25, 0xE3	; 227
    59ba:	90 93 44 04 	sts	0x0444, r25
    59be:	e0 91 2d 07 	lds	r30, 0x072D
    59c2:	f0 e0       	ldi	r31, 0x00	; 0
    59c4:	e9 5a       	subi	r30, 0xA9	; 169
    59c6:	fc 4f       	sbci	r31, 0xFC	; 252
    59c8:	80 81       	ld	r24, Z
    59ca:	89 2b       	or	r24, r25
    59cc:	80 93 44 04 	sts	0x0444, r24
    59d0:	82 e0       	ldi	r24, 0x02	; 2
    59d2:	80 93 2f 07 	sts	0x072F, r24
    59d6:	10 92 0f 07 	sts	0x070F, r1
    59da:	10 92 0e 07 	sts	0x070E, r1
    59de:	80 91 27 07 	lds	r24, 0x0727
    59e2:	88 23       	and	r24, r24
    59e4:	09 f0       	breq	.+2      	; 0x59e8 <STEPPER_process_run_mode+0x104>
    59e6:	59 c0       	rjmp	.+178    	; 0x5a9a <STEPPER_process_run_mode+0x1b6>
    59e8:	80 91 10 07 	lds	r24, 0x0710
    59ec:	90 91 11 07 	lds	r25, 0x0711
    59f0:	89 2b       	or	r24, r25
    59f2:	e9 f4       	brne	.+58     	; 0x5a2e <STEPPER_process_run_mode+0x14a>
    59f4:	80 91 44 04 	lds	r24, 0x0444
    59f8:	8f 71       	andi	r24, 0x1F	; 31
    59fa:	80 93 44 04 	sts	0x0444, r24
    59fe:	10 92 30 07 	sts	0x0730, r1
    5a02:	80 91 3b 07 	lds	r24, 0x073B
    5a06:	88 23       	and	r24, r24
    5a08:	09 f4       	brne	.+2      	; 0x5a0c <STEPPER_process_run_mode+0x128>
    5a0a:	5c c0       	rjmp	.+184    	; 0x5ac4 <STEPPER_process_run_mode+0x1e0>
    5a0c:	60 91 29 07 	lds	r22, 0x0729
    5a10:	81 e0       	ldi	r24, 0x01	; 1
    5a12:	0e 94 23 21 	call	0x4246	; 0x4246 <STEPPER_stop>
    5a16:	e0 91 3c 07 	lds	r30, 0x073C
    5a1a:	f0 91 3d 07 	lds	r31, 0x073D
    5a1e:	30 97       	sbiw	r30, 0x00	; 0
    5a20:	09 f4       	brne	.+2      	; 0x5a24 <STEPPER_process_run_mode+0x140>
    5a22:	50 c0       	rjmp	.+160    	; 0x5ac4 <STEPPER_process_run_mode+0x1e0>
    5a24:	81 e0       	ldi	r24, 0x01	; 1
    5a26:	81 83       	std	Z+1, r24	; 0x01
    5a28:	10 92 3b 07 	sts	0x073B, r1
    5a2c:	4b c0       	rjmp	.+150    	; 0x5ac4 <STEPPER_process_run_mode+0x1e0>
    5a2e:	80 91 09 07 	lds	r24, 0x0709
    5a32:	81 30       	cpi	r24, 0x01	; 1
    5a34:	41 f4       	brne	.+16     	; 0x5a46 <STEPPER_process_run_mode+0x162>
    5a36:	80 91 1c 07 	lds	r24, 0x071C
    5a3a:	90 91 1d 07 	lds	r25, 0x071D
    5a3e:	01 97       	sbiw	r24, 0x01	; 1
    5a40:	11 f4       	brne	.+4      	; 0x5a46 <STEPPER_process_run_mode+0x162>
    5a42:	01 e0       	ldi	r16, 0x01	; 1
    5a44:	02 c0       	rjmp	.+4      	; 0x5a4a <STEPPER_process_run_mode+0x166>
    5a46:	00 23       	and	r16, r16
    5a48:	e9 f1       	breq	.+122    	; 0x5ac4 <STEPPER_process_run_mode+0x1e0>
    5a4a:	e0 91 2e 07 	lds	r30, 0x072E
    5a4e:	f0 e0       	ldi	r31, 0x00	; 0
    5a50:	e5 5a       	subi	r30, 0xA5	; 165
    5a52:	fc 4f       	sbci	r31, 0xFC	; 252
    5a54:	90 91 44 04 	lds	r25, 0x0444
    5a58:	9f 71       	andi	r25, 0x1F	; 31
    5a5a:	80 81       	ld	r24, Z
    5a5c:	89 2b       	or	r24, r25
    5a5e:	80 93 44 04 	sts	0x0444, r24
    5a62:	80 91 2c 07 	lds	r24, 0x072C
    5a66:	88 23       	and	r24, r24
    5a68:	21 f4       	brne	.+8      	; 0x5a72 <STEPPER_process_run_mode+0x18e>
    5a6a:	80 91 2e 07 	lds	r24, 0x072E
    5a6e:	8f 5f       	subi	r24, 0xFF	; 255
    5a70:	03 c0       	rjmp	.+6      	; 0x5a78 <STEPPER_process_run_mode+0x194>
    5a72:	80 91 2e 07 	lds	r24, 0x072E
    5a76:	81 50       	subi	r24, 0x01	; 1
    5a78:	80 93 2e 07 	sts	0x072E, r24
    5a7c:	80 91 2e 07 	lds	r24, 0x072E
    5a80:	83 70       	andi	r24, 0x03	; 3
    5a82:	80 93 2e 07 	sts	0x072E, r24
    5a86:	81 e0       	ldi	r24, 0x01	; 1
    5a88:	80 93 30 07 	sts	0x0730, r24
    5a8c:	80 91 09 07 	lds	r24, 0x0709
    5a90:	81 30       	cpi	r24, 0x01	; 1
    5a92:	c1 f4       	brne	.+48     	; 0x5ac4 <STEPPER_process_run_mode+0x1e0>
    5a94:	0e 94 75 2d 	call	0x5aea	; 0x5aea <STEPPER_process_step_mode>
    5a98:	15 c0       	rjmp	.+42     	; 0x5ac4 <STEPPER_process_run_mode+0x1e0>
    5a9a:	90 91 44 04 	lds	r25, 0x0444
    5a9e:	9f 71       	andi	r25, 0x1F	; 31
    5aa0:	90 93 44 04 	sts	0x0444, r25
    5aa4:	e0 91 2e 07 	lds	r30, 0x072E
    5aa8:	f0 e0       	ldi	r31, 0x00	; 0
    5aaa:	e5 5a       	subi	r30, 0xA5	; 165
    5aac:	fc 4f       	sbci	r31, 0xFC	; 252
    5aae:	80 81       	ld	r24, Z
    5ab0:	89 2b       	or	r24, r25
    5ab2:	80 93 44 04 	sts	0x0444, r24
    5ab6:	82 e0       	ldi	r24, 0x02	; 2
    5ab8:	80 93 30 07 	sts	0x0730, r24
    5abc:	10 92 11 07 	sts	0x0711, r1
    5ac0:	10 92 10 07 	sts	0x0710, r1
    5ac4:	80 91 31 07 	lds	r24, 0x0731
    5ac8:	88 23       	and	r24, r24
    5aca:	31 f4       	brne	.+12     	; 0x5ad8 <STEPPER_process_run_mode+0x1f4>
    5acc:	84 e4       	ldi	r24, 0x44	; 68
    5ace:	94 e0       	ldi	r25, 0x04	; 4
    5ad0:	61 2f       	mov	r22, r17
    5ad2:	40 2f       	mov	r20, r16
    5ad4:	0e 94 37 2e 	call	0x5c6e	; 0x5c6e <STEPPER_process_pwm>
    5ad8:	88 b1       	in	r24, 0x08	; 8
    5ada:	83 70       	andi	r24, 0x03	; 3
    5adc:	90 91 44 04 	lds	r25, 0x0444
    5ae0:	89 2b       	or	r24, r25
    5ae2:	88 b9       	out	0x08, r24	; 8
    5ae4:	1f 91       	pop	r17
    5ae6:	0f 91       	pop	r16
    5ae8:	08 95       	ret

00005aea <STEPPER_process_step_mode>:
    5aea:	88 23       	and	r24, r24
    5aec:	21 f0       	breq	.+8      	; 0x5af6 <STEPPER_process_step_mode+0xc>
    5aee:	81 30       	cpi	r24, 0x01	; 1
    5af0:	09 f0       	breq	.+2      	; 0x5af4 <STEPPER_process_step_mode+0xa>
    5af2:	4e c0       	rjmp	.+156    	; 0x5b90 <STEPPER_process_step_mode+0xa6>
    5af4:	27 c0       	rjmp	.+78     	; 0x5b44 <STEPPER_process_step_mode+0x5a>
    5af6:	80 91 1a 07 	lds	r24, 0x071A
    5afa:	90 91 1b 07 	lds	r25, 0x071B
    5afe:	89 2b       	or	r24, r25
    5b00:	49 f0       	breq	.+18     	; 0x5b14 <STEPPER_process_step_mode+0x2a>
    5b02:	80 91 1a 07 	lds	r24, 0x071A
    5b06:	90 91 1b 07 	lds	r25, 0x071B
    5b0a:	01 97       	sbiw	r24, 0x01	; 1
    5b0c:	90 93 1b 07 	sts	0x071B, r25
    5b10:	80 93 1a 07 	sts	0x071A, r24
    5b14:	80 91 3a 07 	lds	r24, 0x073A
    5b18:	88 23       	and	r24, r24
    5b1a:	d1 f5       	brne	.+116    	; 0x5b90 <STEPPER_process_step_mode+0xa6>
    5b1c:	20 91 1a 07 	lds	r18, 0x071A
    5b20:	30 91 1b 07 	lds	r19, 0x071B
    5b24:	80 91 1e 07 	lds	r24, 0x071E
    5b28:	90 91 1f 07 	lds	r25, 0x071F
    5b2c:	28 17       	cp	r18, r24
    5b2e:	39 07       	cpc	r19, r25
    5b30:	79 f5       	brne	.+94     	; 0x5b90 <STEPPER_process_step_mode+0xa6>
    5b32:	80 e0       	ldi	r24, 0x00	; 0
    5b34:	60 e0       	ldi	r22, 0x00	; 0
    5b36:	70 e0       	ldi	r23, 0x00	; 0
    5b38:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <STEPPER_set_speed>
    5b3c:	81 e0       	ldi	r24, 0x01	; 1
    5b3e:	80 93 3a 07 	sts	0x073A, r24
    5b42:	08 95       	ret
    5b44:	80 91 1c 07 	lds	r24, 0x071C
    5b48:	90 91 1d 07 	lds	r25, 0x071D
    5b4c:	89 2b       	or	r24, r25
    5b4e:	49 f0       	breq	.+18     	; 0x5b62 <STEPPER_process_step_mode+0x78>
    5b50:	80 91 1c 07 	lds	r24, 0x071C
    5b54:	90 91 1d 07 	lds	r25, 0x071D
    5b58:	01 97       	sbiw	r24, 0x01	; 1
    5b5a:	90 93 1d 07 	sts	0x071D, r25
    5b5e:	80 93 1c 07 	sts	0x071C, r24
    5b62:	80 91 3b 07 	lds	r24, 0x073B
    5b66:	88 23       	and	r24, r24
    5b68:	99 f4       	brne	.+38     	; 0x5b90 <STEPPER_process_step_mode+0xa6>
    5b6a:	20 91 1c 07 	lds	r18, 0x071C
    5b6e:	30 91 1d 07 	lds	r19, 0x071D
    5b72:	80 91 20 07 	lds	r24, 0x0720
    5b76:	90 91 21 07 	lds	r25, 0x0721
    5b7a:	28 17       	cp	r18, r24
    5b7c:	39 07       	cpc	r19, r25
    5b7e:	41 f4       	brne	.+16     	; 0x5b90 <STEPPER_process_step_mode+0xa6>
    5b80:	81 e0       	ldi	r24, 0x01	; 1
    5b82:	60 e0       	ldi	r22, 0x00	; 0
    5b84:	70 e0       	ldi	r23, 0x00	; 0
    5b86:	0e 94 5a 20 	call	0x40b4	; 0x40b4 <STEPPER_set_speed>
    5b8a:	81 e0       	ldi	r24, 0x01	; 1
    5b8c:	80 93 3b 07 	sts	0x073B, r24
    5b90:	08 95       	ret

00005b92 <TMRSRVC_process>:
    5b92:	ff 92       	push	r15
    5b94:	0f 93       	push	r16
    5b96:	1f 93       	push	r17
    5b98:	cf 93       	push	r28
    5b9a:	df 93       	push	r29
    5b9c:	80 91 78 07 	lds	r24, 0x0778
    5ba0:	88 23       	and	r24, r24
    5ba2:	09 f4       	brne	.+2      	; 0x5ba6 <TMRSRVC_process+0x14>
    5ba4:	59 c0       	rjmp	.+178    	; 0x5c58 <TMRSRVC_process+0xc6>
    5ba6:	00 91 79 07 	lds	r16, 0x0779
    5baa:	10 91 7a 07 	lds	r17, 0x077A
    5bae:	f8 01       	movw	r30, r16
    5bb0:	c0 81       	ld	r28, Z
    5bb2:	d1 81       	ldd	r29, Z+1	; 0x01
    5bb4:	8c 81       	ldd	r24, Y+4	; 0x04
    5bb6:	9d 81       	ldd	r25, Y+5	; 0x05
    5bb8:	01 97       	sbiw	r24, 0x01	; 1
    5bba:	9d 83       	std	Y+5, r25	; 0x05
    5bbc:	8c 83       	std	Y+4, r24	; 0x04
    5bbe:	18 16       	cp	r1, r24
    5bc0:	19 06       	cpc	r1, r25
    5bc2:	0c f4       	brge	.+2      	; 0x5bc6 <TMRSRVC_process+0x34>
    5bc4:	49 c0       	rjmp	.+146    	; 0x5c58 <TMRSRVC_process+0xc6>
    5bc6:	89 81       	ldd	r24, Y+1	; 0x01
    5bc8:	80 ff       	sbrs	r24, 0
    5bca:	05 c0       	rjmp	.+10     	; 0x5bd6 <TMRSRVC_process+0x44>
    5bcc:	8e 81       	ldd	r24, Y+6	; 0x06
    5bce:	88 23       	and	r24, r24
    5bd0:	11 f4       	brne	.+4      	; 0x5bd6 <TMRSRVC_process+0x44>
    5bd2:	81 e0       	ldi	r24, 0x01	; 1
    5bd4:	8e 83       	std	Y+6, r24	; 0x06
    5bd6:	89 81       	ldd	r24, Y+1	; 0x01
    5bd8:	81 ff       	sbrs	r24, 1
    5bda:	03 c0       	rjmp	.+6      	; 0x5be2 <TMRSRVC_process+0x50>
    5bdc:	ef 81       	ldd	r30, Y+7	; 0x07
    5bde:	f8 85       	ldd	r31, Y+8	; 0x08
    5be0:	09 95       	icall
    5be2:	80 91 78 07 	lds	r24, 0x0778
    5be6:	82 30       	cpi	r24, 0x02	; 2
    5be8:	a8 f0       	brcs	.+42     	; 0x5c14 <TMRSRVC_process+0x82>
    5bea:	f8 01       	movw	r30, r16
    5bec:	82 81       	ldd	r24, Z+2	; 0x02
    5bee:	93 81       	ldd	r25, Z+3	; 0x03
    5bf0:	90 93 7a 07 	sts	0x077A, r25
    5bf4:	80 93 79 07 	sts	0x0779, r24
    5bf8:	13 82       	std	Z+3, r1	; 0x03
    5bfa:	12 82       	std	Z+2, r1	; 0x02
    5bfc:	e0 91 00 00 	lds	r30, 0x0000
    5c00:	f0 91 01 00 	lds	r31, 0x0001
    5c04:	84 81       	ldd	r24, Z+4	; 0x04
    5c06:	95 81       	ldd	r25, Z+5	; 0x05
    5c08:	18 16       	cp	r1, r24
    5c0a:	19 06       	cpc	r1, r25
    5c0c:	3c f0       	brlt	.+14     	; 0x5c1c <TMRSRVC_process+0x8a>
    5c0e:	ff 24       	eor	r15, r15
    5c10:	f3 94       	inc	r15
    5c12:	05 c0       	rjmp	.+10     	; 0x5c1e <TMRSRVC_process+0x8c>
    5c14:	10 92 7a 07 	sts	0x077A, r1
    5c18:	10 92 79 07 	sts	0x0779, r1
    5c1c:	ff 24       	eor	r15, r15
    5c1e:	80 91 78 07 	lds	r24, 0x0778
    5c22:	81 50       	subi	r24, 0x01	; 1
    5c24:	80 93 78 07 	sts	0x0778, r24
    5c28:	80 91 78 07 	lds	r24, 0x0778
    5c2c:	88 23       	and	r24, r24
    5c2e:	11 f4       	brne	.+4      	; 0x5c34 <TMRSRVC_process+0xa2>
    5c30:	0e 94 34 2e 	call	0x5c68	; 0x5c68 <TMRSRVC_stop>
    5c34:	89 81       	ldd	r24, Y+1	; 0x01
    5c36:	82 ff       	sbrs	r24, 2
    5c38:	08 c0       	rjmp	.+16     	; 0x5c4a <TMRSRVC_process+0xb8>
    5c3a:	8a 81       	ldd	r24, Y+2	; 0x02
    5c3c:	9b 81       	ldd	r25, Y+3	; 0x03
    5c3e:	9d 83       	std	Y+5, r25	; 0x05
    5c40:	8c 83       	std	Y+4, r24	; 0x04
    5c42:	c8 01       	movw	r24, r16
    5c44:	0e 94 a9 29 	call	0x5352	; 0x5352 <TMRSRVC_insert>
    5c48:	08 c0       	rjmp	.+16     	; 0x5c5a <TMRSRVC_process+0xc8>
    5c4a:	c8 01       	movw	r24, r16
    5c4c:	0e 94 16 37 	call	0x6e2c	; 0x6e2c <free>
    5c50:	89 81       	ldd	r24, Y+1	; 0x01
    5c52:	8f 7e       	andi	r24, 0xEF	; 239
    5c54:	89 83       	std	Y+1, r24	; 0x01
    5c56:	01 c0       	rjmp	.+2      	; 0x5c5a <TMRSRVC_process+0xc8>
    5c58:	ff 24       	eor	r15, r15
    5c5a:	8f 2d       	mov	r24, r15
    5c5c:	df 91       	pop	r29
    5c5e:	cf 91       	pop	r28
    5c60:	1f 91       	pop	r17
    5c62:	0f 91       	pop	r16
    5c64:	ff 90       	pop	r15
    5c66:	08 95       	ret

00005c68 <TMRSRVC_stop>:
    5c68:	10 92 43 04 	sts	0x0443, r1
    5c6c:	08 95       	ret

00005c6e <STEPPER_process_pwm>:
    5c6e:	fc 01       	movw	r30, r24
    5c70:	80 91 2f 07 	lds	r24, 0x072F
    5c74:	82 30       	cpi	r24, 0x02	; 2
    5c76:	69 f4       	brne	.+26     	; 0x5c92 <STEPPER_process_pwm+0x24>
    5c78:	80 91 48 04 	lds	r24, 0x0448
    5c7c:	91 e0       	ldi	r25, 0x01	; 1
    5c7e:	89 27       	eor	r24, r25
    5c80:	80 93 48 04 	sts	0x0448, r24
    5c84:	88 23       	and	r24, r24
    5c86:	09 f0       	breq	.+2      	; 0x5c8a <STEPPER_process_pwm+0x1c>
    5c88:	3e c0       	rjmp	.+124    	; 0x5d06 <STEPPER_process_pwm+0x98>
    5c8a:	80 81       	ld	r24, Z
    5c8c:	83 7e       	andi	r24, 0xE3	; 227
    5c8e:	80 83       	st	Z, r24
    5c90:	3a c0       	rjmp	.+116    	; 0x5d06 <STEPPER_process_pwm+0x98>
    5c92:	80 91 0e 07 	lds	r24, 0x070E
    5c96:	90 91 0f 07 	lds	r25, 0x070F
    5c9a:	c3 97       	sbiw	r24, 0x33	; 51
    5c9c:	a4 f5       	brge	.+104    	; 0x5d06 <STEPPER_process_pwm+0x98>
    5c9e:	66 23       	and	r22, r22
    5ca0:	d1 f0       	breq	.+52     	; 0x5cd6 <STEPPER_process_pwm+0x68>
    5ca2:	20 91 0e 07 	lds	r18, 0x070E
    5ca6:	30 91 0f 07 	lds	r19, 0x070F
    5caa:	80 e6       	ldi	r24, 0x60	; 96
    5cac:	90 e0       	ldi	r25, 0x00	; 0
    5cae:	bc 01       	movw	r22, r24
    5cb0:	26 9f       	mul	r18, r22
    5cb2:	c0 01       	movw	r24, r0
    5cb4:	27 9f       	mul	r18, r23
    5cb6:	90 0d       	add	r25, r0
    5cb8:	36 9f       	mul	r19, r22
    5cba:	90 0d       	add	r25, r0
    5cbc:	11 24       	eor	r1, r1
    5cbe:	88 0f       	add	r24, r24
    5cc0:	89 2f       	mov	r24, r25
    5cc2:	88 1f       	adc	r24, r24
    5cc4:	99 0b       	sbc	r25, r25
    5cc6:	90 93 23 07 	sts	0x0723, r25
    5cca:	80 93 22 07 	sts	0x0722, r24
    5cce:	81 e0       	ldi	r24, 0x01	; 1
    5cd0:	80 93 46 04 	sts	0x0446, r24
    5cd4:	18 c0       	rjmp	.+48     	; 0x5d06 <STEPPER_process_pwm+0x98>
    5cd6:	80 91 46 04 	lds	r24, 0x0446
    5cda:	88 23       	and	r24, r24
    5cdc:	a1 f0       	breq	.+40     	; 0x5d06 <STEPPER_process_pwm+0x98>
    5cde:	80 91 22 07 	lds	r24, 0x0722
    5ce2:	90 91 23 07 	lds	r25, 0x0723
    5ce6:	01 97       	sbiw	r24, 0x01	; 1
    5ce8:	90 93 23 07 	sts	0x0723, r25
    5cec:	80 93 22 07 	sts	0x0722, r24
    5cf0:	80 91 22 07 	lds	r24, 0x0722
    5cf4:	90 91 23 07 	lds	r25, 0x0723
    5cf8:	89 2b       	or	r24, r25
    5cfa:	29 f4       	brne	.+10     	; 0x5d06 <STEPPER_process_pwm+0x98>
    5cfc:	80 81       	ld	r24, Z
    5cfe:	83 7e       	andi	r24, 0xE3	; 227
    5d00:	80 83       	st	Z, r24
    5d02:	10 92 46 04 	sts	0x0446, r1
    5d06:	80 91 30 07 	lds	r24, 0x0730
    5d0a:	82 30       	cpi	r24, 0x02	; 2
    5d0c:	69 f4       	brne	.+26     	; 0x5d28 <STEPPER_process_pwm+0xba>
    5d0e:	80 91 47 04 	lds	r24, 0x0447
    5d12:	91 e0       	ldi	r25, 0x01	; 1
    5d14:	89 27       	eor	r24, r25
    5d16:	80 93 47 04 	sts	0x0447, r24
    5d1a:	88 23       	and	r24, r24
    5d1c:	09 f0       	breq	.+2      	; 0x5d20 <STEPPER_process_pwm+0xb2>
    5d1e:	3e c0       	rjmp	.+124    	; 0x5d9c <STEPPER_process_pwm+0x12e>
    5d20:	80 81       	ld	r24, Z
    5d22:	8f 71       	andi	r24, 0x1F	; 31
    5d24:	80 83       	st	Z, r24
    5d26:	08 95       	ret
    5d28:	80 91 10 07 	lds	r24, 0x0710
    5d2c:	90 91 11 07 	lds	r25, 0x0711
    5d30:	c3 97       	sbiw	r24, 0x33	; 51
    5d32:	a4 f5       	brge	.+104    	; 0x5d9c <STEPPER_process_pwm+0x12e>
    5d34:	44 23       	and	r20, r20
    5d36:	d1 f0       	breq	.+52     	; 0x5d6c <STEPPER_process_pwm+0xfe>
    5d38:	20 91 10 07 	lds	r18, 0x0710
    5d3c:	30 91 11 07 	lds	r19, 0x0711
    5d40:	80 e6       	ldi	r24, 0x60	; 96
    5d42:	90 e0       	ldi	r25, 0x00	; 0
    5d44:	ac 01       	movw	r20, r24
    5d46:	24 9f       	mul	r18, r20
    5d48:	c0 01       	movw	r24, r0
    5d4a:	25 9f       	mul	r18, r21
    5d4c:	90 0d       	add	r25, r0
    5d4e:	34 9f       	mul	r19, r20
    5d50:	90 0d       	add	r25, r0
    5d52:	11 24       	eor	r1, r1
    5d54:	88 0f       	add	r24, r24
    5d56:	89 2f       	mov	r24, r25
    5d58:	88 1f       	adc	r24, r24
    5d5a:	99 0b       	sbc	r25, r25
    5d5c:	90 93 25 07 	sts	0x0725, r25
    5d60:	80 93 24 07 	sts	0x0724, r24
    5d64:	81 e0       	ldi	r24, 0x01	; 1
    5d66:	80 93 45 04 	sts	0x0445, r24
    5d6a:	08 95       	ret
    5d6c:	80 91 45 04 	lds	r24, 0x0445
    5d70:	88 23       	and	r24, r24
    5d72:	a1 f0       	breq	.+40     	; 0x5d9c <STEPPER_process_pwm+0x12e>
    5d74:	80 91 24 07 	lds	r24, 0x0724
    5d78:	90 91 25 07 	lds	r25, 0x0725
    5d7c:	01 97       	sbiw	r24, 0x01	; 1
    5d7e:	90 93 25 07 	sts	0x0725, r25
    5d82:	80 93 24 07 	sts	0x0724, r24
    5d86:	80 91 24 07 	lds	r24, 0x0724
    5d8a:	90 91 25 07 	lds	r25, 0x0725
    5d8e:	89 2b       	or	r24, r25
    5d90:	29 f4       	brne	.+10     	; 0x5d9c <STEPPER_process_pwm+0x12e>
    5d92:	80 81       	ld	r24, Z
    5d94:	8f 71       	andi	r24, 0x1F	; 31
    5d96:	80 83       	st	Z, r24
    5d98:	10 92 45 04 	sts	0x0445, r1
    5d9c:	08 95       	ret

00005d9e <__subsf3>:
    5d9e:	50 58       	subi	r21, 0x80	; 128

00005da0 <__addsf3>:
    5da0:	bb 27       	eor	r27, r27
    5da2:	aa 27       	eor	r26, r26
    5da4:	0e d0       	rcall	.+28     	; 0x5dc2 <__addsf3x>
    5da6:	75 c1       	rjmp	.+746    	; 0x6092 <__fp_round>
    5da8:	66 d1       	rcall	.+716    	; 0x6076 <__fp_pscA>
    5daa:	30 f0       	brcs	.+12     	; 0x5db8 <__addsf3+0x18>
    5dac:	6b d1       	rcall	.+726    	; 0x6084 <__fp_pscB>
    5dae:	20 f0       	brcs	.+8      	; 0x5db8 <__addsf3+0x18>
    5db0:	31 f4       	brne	.+12     	; 0x5dbe <__addsf3+0x1e>
    5db2:	9f 3f       	cpi	r25, 0xFF	; 255
    5db4:	11 f4       	brne	.+4      	; 0x5dba <__addsf3+0x1a>
    5db6:	1e f4       	brtc	.+6      	; 0x5dbe <__addsf3+0x1e>
    5db8:	5b c1       	rjmp	.+694    	; 0x6070 <__fp_nan>
    5dba:	0e f4       	brtc	.+2      	; 0x5dbe <__addsf3+0x1e>
    5dbc:	e0 95       	com	r30
    5dbe:	e7 fb       	bst	r30, 7
    5dc0:	51 c1       	rjmp	.+674    	; 0x6064 <__fp_inf>

00005dc2 <__addsf3x>:
    5dc2:	e9 2f       	mov	r30, r25
    5dc4:	77 d1       	rcall	.+750    	; 0x60b4 <__fp_split3>
    5dc6:	80 f3       	brcs	.-32     	; 0x5da8 <__addsf3+0x8>
    5dc8:	ba 17       	cp	r27, r26
    5dca:	62 07       	cpc	r22, r18
    5dcc:	73 07       	cpc	r23, r19
    5dce:	84 07       	cpc	r24, r20
    5dd0:	95 07       	cpc	r25, r21
    5dd2:	18 f0       	brcs	.+6      	; 0x5dda <__addsf3x+0x18>
    5dd4:	71 f4       	brne	.+28     	; 0x5df2 <__addsf3x+0x30>
    5dd6:	9e f5       	brtc	.+102    	; 0x5e3e <__addsf3x+0x7c>
    5dd8:	8f c1       	rjmp	.+798    	; 0x60f8 <__fp_zero>
    5dda:	0e f4       	brtc	.+2      	; 0x5dde <__addsf3x+0x1c>
    5ddc:	e0 95       	com	r30
    5dde:	0b 2e       	mov	r0, r27
    5de0:	ba 2f       	mov	r27, r26
    5de2:	a0 2d       	mov	r26, r0
    5de4:	0b 01       	movw	r0, r22
    5de6:	b9 01       	movw	r22, r18
    5de8:	90 01       	movw	r18, r0
    5dea:	0c 01       	movw	r0, r24
    5dec:	ca 01       	movw	r24, r20
    5dee:	a0 01       	movw	r20, r0
    5df0:	11 24       	eor	r1, r1
    5df2:	ff 27       	eor	r31, r31
    5df4:	59 1b       	sub	r21, r25
    5df6:	99 f0       	breq	.+38     	; 0x5e1e <__addsf3x+0x5c>
    5df8:	59 3f       	cpi	r21, 0xF9	; 249
    5dfa:	50 f4       	brcc	.+20     	; 0x5e10 <__addsf3x+0x4e>
    5dfc:	50 3e       	cpi	r21, 0xE0	; 224
    5dfe:	68 f1       	brcs	.+90     	; 0x5e5a <__addsf3x+0x98>
    5e00:	1a 16       	cp	r1, r26
    5e02:	f0 40       	sbci	r31, 0x00	; 0
    5e04:	a2 2f       	mov	r26, r18
    5e06:	23 2f       	mov	r18, r19
    5e08:	34 2f       	mov	r19, r20
    5e0a:	44 27       	eor	r20, r20
    5e0c:	58 5f       	subi	r21, 0xF8	; 248
    5e0e:	f3 cf       	rjmp	.-26     	; 0x5df6 <__addsf3x+0x34>
    5e10:	46 95       	lsr	r20
    5e12:	37 95       	ror	r19
    5e14:	27 95       	ror	r18
    5e16:	a7 95       	ror	r26
    5e18:	f0 40       	sbci	r31, 0x00	; 0
    5e1a:	53 95       	inc	r21
    5e1c:	c9 f7       	brne	.-14     	; 0x5e10 <__addsf3x+0x4e>
    5e1e:	7e f4       	brtc	.+30     	; 0x5e3e <__addsf3x+0x7c>
    5e20:	1f 16       	cp	r1, r31
    5e22:	ba 0b       	sbc	r27, r26
    5e24:	62 0b       	sbc	r22, r18
    5e26:	73 0b       	sbc	r23, r19
    5e28:	84 0b       	sbc	r24, r20
    5e2a:	ba f0       	brmi	.+46     	; 0x5e5a <__addsf3x+0x98>
    5e2c:	91 50       	subi	r25, 0x01	; 1
    5e2e:	a1 f0       	breq	.+40     	; 0x5e58 <__addsf3x+0x96>
    5e30:	ff 0f       	add	r31, r31
    5e32:	bb 1f       	adc	r27, r27
    5e34:	66 1f       	adc	r22, r22
    5e36:	77 1f       	adc	r23, r23
    5e38:	88 1f       	adc	r24, r24
    5e3a:	c2 f7       	brpl	.-16     	; 0x5e2c <__addsf3x+0x6a>
    5e3c:	0e c0       	rjmp	.+28     	; 0x5e5a <__addsf3x+0x98>
    5e3e:	ba 0f       	add	r27, r26
    5e40:	62 1f       	adc	r22, r18
    5e42:	73 1f       	adc	r23, r19
    5e44:	84 1f       	adc	r24, r20
    5e46:	48 f4       	brcc	.+18     	; 0x5e5a <__addsf3x+0x98>
    5e48:	87 95       	ror	r24
    5e4a:	77 95       	ror	r23
    5e4c:	67 95       	ror	r22
    5e4e:	b7 95       	ror	r27
    5e50:	f7 95       	ror	r31
    5e52:	9e 3f       	cpi	r25, 0xFE	; 254
    5e54:	08 f0       	brcs	.+2      	; 0x5e58 <__addsf3x+0x96>
    5e56:	b3 cf       	rjmp	.-154    	; 0x5dbe <__addsf3+0x1e>
    5e58:	93 95       	inc	r25
    5e5a:	88 0f       	add	r24, r24
    5e5c:	08 f0       	brcs	.+2      	; 0x5e60 <__addsf3x+0x9e>
    5e5e:	99 27       	eor	r25, r25
    5e60:	ee 0f       	add	r30, r30
    5e62:	97 95       	ror	r25
    5e64:	87 95       	ror	r24
    5e66:	08 95       	ret

00005e68 <__cmpsf2>:
    5e68:	d9 d0       	rcall	.+434    	; 0x601c <__fp_cmp>
    5e6a:	08 f4       	brcc	.+2      	; 0x5e6e <__cmpsf2+0x6>
    5e6c:	81 e0       	ldi	r24, 0x01	; 1
    5e6e:	08 95       	ret

00005e70 <__divsf3>:
    5e70:	0c d0       	rcall	.+24     	; 0x5e8a <__divsf3x>
    5e72:	0f c1       	rjmp	.+542    	; 0x6092 <__fp_round>
    5e74:	07 d1       	rcall	.+526    	; 0x6084 <__fp_pscB>
    5e76:	40 f0       	brcs	.+16     	; 0x5e88 <__divsf3+0x18>
    5e78:	fe d0       	rcall	.+508    	; 0x6076 <__fp_pscA>
    5e7a:	30 f0       	brcs	.+12     	; 0x5e88 <__divsf3+0x18>
    5e7c:	21 f4       	brne	.+8      	; 0x5e86 <__divsf3+0x16>
    5e7e:	5f 3f       	cpi	r21, 0xFF	; 255
    5e80:	19 f0       	breq	.+6      	; 0x5e88 <__divsf3+0x18>
    5e82:	f0 c0       	rjmp	.+480    	; 0x6064 <__fp_inf>
    5e84:	51 11       	cpse	r21, r1
    5e86:	39 c1       	rjmp	.+626    	; 0x60fa <__fp_szero>
    5e88:	f3 c0       	rjmp	.+486    	; 0x6070 <__fp_nan>

00005e8a <__divsf3x>:
    5e8a:	14 d1       	rcall	.+552    	; 0x60b4 <__fp_split3>
    5e8c:	98 f3       	brcs	.-26     	; 0x5e74 <__divsf3+0x4>

00005e8e <__divsf3_pse>:
    5e8e:	99 23       	and	r25, r25
    5e90:	c9 f3       	breq	.-14     	; 0x5e84 <__divsf3+0x14>
    5e92:	55 23       	and	r21, r21
    5e94:	b1 f3       	breq	.-20     	; 0x5e82 <__divsf3+0x12>
    5e96:	95 1b       	sub	r25, r21
    5e98:	55 0b       	sbc	r21, r21
    5e9a:	bb 27       	eor	r27, r27
    5e9c:	aa 27       	eor	r26, r26
    5e9e:	62 17       	cp	r22, r18
    5ea0:	73 07       	cpc	r23, r19
    5ea2:	84 07       	cpc	r24, r20
    5ea4:	38 f0       	brcs	.+14     	; 0x5eb4 <__divsf3_pse+0x26>
    5ea6:	9f 5f       	subi	r25, 0xFF	; 255
    5ea8:	5f 4f       	sbci	r21, 0xFF	; 255
    5eaa:	22 0f       	add	r18, r18
    5eac:	33 1f       	adc	r19, r19
    5eae:	44 1f       	adc	r20, r20
    5eb0:	aa 1f       	adc	r26, r26
    5eb2:	a9 f3       	breq	.-22     	; 0x5e9e <__divsf3_pse+0x10>
    5eb4:	33 d0       	rcall	.+102    	; 0x5f1c <__divsf3_pse+0x8e>
    5eb6:	0e 2e       	mov	r0, r30
    5eb8:	3a f0       	brmi	.+14     	; 0x5ec8 <__divsf3_pse+0x3a>
    5eba:	e0 e8       	ldi	r30, 0x80	; 128
    5ebc:	30 d0       	rcall	.+96     	; 0x5f1e <__divsf3_pse+0x90>
    5ebe:	91 50       	subi	r25, 0x01	; 1
    5ec0:	50 40       	sbci	r21, 0x00	; 0
    5ec2:	e6 95       	lsr	r30
    5ec4:	00 1c       	adc	r0, r0
    5ec6:	ca f7       	brpl	.-14     	; 0x5eba <__divsf3_pse+0x2c>
    5ec8:	29 d0       	rcall	.+82     	; 0x5f1c <__divsf3_pse+0x8e>
    5eca:	fe 2f       	mov	r31, r30
    5ecc:	27 d0       	rcall	.+78     	; 0x5f1c <__divsf3_pse+0x8e>
    5ece:	66 0f       	add	r22, r22
    5ed0:	77 1f       	adc	r23, r23
    5ed2:	88 1f       	adc	r24, r24
    5ed4:	bb 1f       	adc	r27, r27
    5ed6:	26 17       	cp	r18, r22
    5ed8:	37 07       	cpc	r19, r23
    5eda:	48 07       	cpc	r20, r24
    5edc:	ab 07       	cpc	r26, r27
    5ede:	b0 e8       	ldi	r27, 0x80	; 128
    5ee0:	09 f0       	breq	.+2      	; 0x5ee4 <__divsf3_pse+0x56>
    5ee2:	bb 0b       	sbc	r27, r27
    5ee4:	80 2d       	mov	r24, r0
    5ee6:	bf 01       	movw	r22, r30
    5ee8:	ff 27       	eor	r31, r31
    5eea:	93 58       	subi	r25, 0x83	; 131
    5eec:	5f 4f       	sbci	r21, 0xFF	; 255
    5eee:	2a f0       	brmi	.+10     	; 0x5efa <__divsf3_pse+0x6c>
    5ef0:	9e 3f       	cpi	r25, 0xFE	; 254
    5ef2:	51 05       	cpc	r21, r1
    5ef4:	68 f0       	brcs	.+26     	; 0x5f10 <__divsf3_pse+0x82>
    5ef6:	b6 c0       	rjmp	.+364    	; 0x6064 <__fp_inf>
    5ef8:	00 c1       	rjmp	.+512    	; 0x60fa <__fp_szero>
    5efa:	5f 3f       	cpi	r21, 0xFF	; 255
    5efc:	ec f3       	brlt	.-6      	; 0x5ef8 <__divsf3_pse+0x6a>
    5efe:	98 3e       	cpi	r25, 0xE8	; 232
    5f00:	dc f3       	brlt	.-10     	; 0x5ef8 <__divsf3_pse+0x6a>
    5f02:	86 95       	lsr	r24
    5f04:	77 95       	ror	r23
    5f06:	67 95       	ror	r22
    5f08:	b7 95       	ror	r27
    5f0a:	f7 95       	ror	r31
    5f0c:	9f 5f       	subi	r25, 0xFF	; 255
    5f0e:	c9 f7       	brne	.-14     	; 0x5f02 <__divsf3_pse+0x74>
    5f10:	88 0f       	add	r24, r24
    5f12:	91 1d       	adc	r25, r1
    5f14:	96 95       	lsr	r25
    5f16:	87 95       	ror	r24
    5f18:	97 f9       	bld	r25, 7
    5f1a:	08 95       	ret
    5f1c:	e1 e0       	ldi	r30, 0x01	; 1
    5f1e:	66 0f       	add	r22, r22
    5f20:	77 1f       	adc	r23, r23
    5f22:	88 1f       	adc	r24, r24
    5f24:	bb 1f       	adc	r27, r27
    5f26:	62 17       	cp	r22, r18
    5f28:	73 07       	cpc	r23, r19
    5f2a:	84 07       	cpc	r24, r20
    5f2c:	ba 07       	cpc	r27, r26
    5f2e:	20 f0       	brcs	.+8      	; 0x5f38 <__divsf3_pse+0xaa>
    5f30:	62 1b       	sub	r22, r18
    5f32:	73 0b       	sbc	r23, r19
    5f34:	84 0b       	sbc	r24, r20
    5f36:	ba 0b       	sbc	r27, r26
    5f38:	ee 1f       	adc	r30, r30
    5f3a:	88 f7       	brcc	.-30     	; 0x5f1e <__divsf3_pse+0x90>
    5f3c:	e0 95       	com	r30
    5f3e:	08 95       	ret

00005f40 <__fixsfsi>:
    5f40:	04 d0       	rcall	.+8      	; 0x5f4a <__fixunssfsi>
    5f42:	68 94       	set
    5f44:	b1 11       	cpse	r27, r1
    5f46:	d9 c0       	rjmp	.+434    	; 0x60fa <__fp_szero>
    5f48:	08 95       	ret

00005f4a <__fixunssfsi>:
    5f4a:	bc d0       	rcall	.+376    	; 0x60c4 <__fp_splitA>
    5f4c:	88 f0       	brcs	.+34     	; 0x5f70 <__fixunssfsi+0x26>
    5f4e:	9f 57       	subi	r25, 0x7F	; 127
    5f50:	90 f0       	brcs	.+36     	; 0x5f76 <__fixunssfsi+0x2c>
    5f52:	b9 2f       	mov	r27, r25
    5f54:	99 27       	eor	r25, r25
    5f56:	b7 51       	subi	r27, 0x17	; 23
    5f58:	a0 f0       	brcs	.+40     	; 0x5f82 <__fixunssfsi+0x38>
    5f5a:	d1 f0       	breq	.+52     	; 0x5f90 <__fixunssfsi+0x46>
    5f5c:	66 0f       	add	r22, r22
    5f5e:	77 1f       	adc	r23, r23
    5f60:	88 1f       	adc	r24, r24
    5f62:	99 1f       	adc	r25, r25
    5f64:	1a f0       	brmi	.+6      	; 0x5f6c <__fixunssfsi+0x22>
    5f66:	ba 95       	dec	r27
    5f68:	c9 f7       	brne	.-14     	; 0x5f5c <__fixunssfsi+0x12>
    5f6a:	12 c0       	rjmp	.+36     	; 0x5f90 <__fixunssfsi+0x46>
    5f6c:	b1 30       	cpi	r27, 0x01	; 1
    5f6e:	81 f0       	breq	.+32     	; 0x5f90 <__fixunssfsi+0x46>
    5f70:	c3 d0       	rcall	.+390    	; 0x60f8 <__fp_zero>
    5f72:	b1 e0       	ldi	r27, 0x01	; 1
    5f74:	08 95       	ret
    5f76:	c0 c0       	rjmp	.+384    	; 0x60f8 <__fp_zero>
    5f78:	67 2f       	mov	r22, r23
    5f7a:	78 2f       	mov	r23, r24
    5f7c:	88 27       	eor	r24, r24
    5f7e:	b8 5f       	subi	r27, 0xF8	; 248
    5f80:	39 f0       	breq	.+14     	; 0x5f90 <__fixunssfsi+0x46>
    5f82:	b9 3f       	cpi	r27, 0xF9	; 249
    5f84:	cc f3       	brlt	.-14     	; 0x5f78 <__fixunssfsi+0x2e>
    5f86:	86 95       	lsr	r24
    5f88:	77 95       	ror	r23
    5f8a:	67 95       	ror	r22
    5f8c:	b3 95       	inc	r27
    5f8e:	d9 f7       	brne	.-10     	; 0x5f86 <__fixunssfsi+0x3c>
    5f90:	3e f4       	brtc	.+14     	; 0x5fa0 <__fixunssfsi+0x56>
    5f92:	90 95       	com	r25
    5f94:	80 95       	com	r24
    5f96:	70 95       	com	r23
    5f98:	61 95       	neg	r22
    5f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    5f9c:	8f 4f       	sbci	r24, 0xFF	; 255
    5f9e:	9f 4f       	sbci	r25, 0xFF	; 255
    5fa0:	08 95       	ret

00005fa2 <__floatunsisf>:
    5fa2:	e8 94       	clt
    5fa4:	09 c0       	rjmp	.+18     	; 0x5fb8 <__floatsisf+0x12>

00005fa6 <__floatsisf>:
    5fa6:	97 fb       	bst	r25, 7
    5fa8:	3e f4       	brtc	.+14     	; 0x5fb8 <__floatsisf+0x12>
    5faa:	90 95       	com	r25
    5fac:	80 95       	com	r24
    5fae:	70 95       	com	r23
    5fb0:	61 95       	neg	r22
    5fb2:	7f 4f       	sbci	r23, 0xFF	; 255
    5fb4:	8f 4f       	sbci	r24, 0xFF	; 255
    5fb6:	9f 4f       	sbci	r25, 0xFF	; 255
    5fb8:	99 23       	and	r25, r25
    5fba:	a9 f0       	breq	.+42     	; 0x5fe6 <__floatsisf+0x40>
    5fbc:	f9 2f       	mov	r31, r25
    5fbe:	96 e9       	ldi	r25, 0x96	; 150
    5fc0:	bb 27       	eor	r27, r27
    5fc2:	93 95       	inc	r25
    5fc4:	f6 95       	lsr	r31
    5fc6:	87 95       	ror	r24
    5fc8:	77 95       	ror	r23
    5fca:	67 95       	ror	r22
    5fcc:	b7 95       	ror	r27
    5fce:	f1 11       	cpse	r31, r1
    5fd0:	f8 cf       	rjmp	.-16     	; 0x5fc2 <__floatsisf+0x1c>
    5fd2:	fa f4       	brpl	.+62     	; 0x6012 <__floatsisf+0x6c>
    5fd4:	bb 0f       	add	r27, r27
    5fd6:	11 f4       	brne	.+4      	; 0x5fdc <__floatsisf+0x36>
    5fd8:	60 ff       	sbrs	r22, 0
    5fda:	1b c0       	rjmp	.+54     	; 0x6012 <__floatsisf+0x6c>
    5fdc:	6f 5f       	subi	r22, 0xFF	; 255
    5fde:	7f 4f       	sbci	r23, 0xFF	; 255
    5fe0:	8f 4f       	sbci	r24, 0xFF	; 255
    5fe2:	9f 4f       	sbci	r25, 0xFF	; 255
    5fe4:	16 c0       	rjmp	.+44     	; 0x6012 <__floatsisf+0x6c>
    5fe6:	88 23       	and	r24, r24
    5fe8:	11 f0       	breq	.+4      	; 0x5fee <__floatsisf+0x48>
    5fea:	96 e9       	ldi	r25, 0x96	; 150
    5fec:	11 c0       	rjmp	.+34     	; 0x6010 <__floatsisf+0x6a>
    5fee:	77 23       	and	r23, r23
    5ff0:	21 f0       	breq	.+8      	; 0x5ffa <__floatsisf+0x54>
    5ff2:	9e e8       	ldi	r25, 0x8E	; 142
    5ff4:	87 2f       	mov	r24, r23
    5ff6:	76 2f       	mov	r23, r22
    5ff8:	05 c0       	rjmp	.+10     	; 0x6004 <__floatsisf+0x5e>
    5ffa:	66 23       	and	r22, r22
    5ffc:	71 f0       	breq	.+28     	; 0x601a <__floatsisf+0x74>
    5ffe:	96 e8       	ldi	r25, 0x86	; 134
    6000:	86 2f       	mov	r24, r22
    6002:	70 e0       	ldi	r23, 0x00	; 0
    6004:	60 e0       	ldi	r22, 0x00	; 0
    6006:	2a f0       	brmi	.+10     	; 0x6012 <__floatsisf+0x6c>
    6008:	9a 95       	dec	r25
    600a:	66 0f       	add	r22, r22
    600c:	77 1f       	adc	r23, r23
    600e:	88 1f       	adc	r24, r24
    6010:	da f7       	brpl	.-10     	; 0x6008 <__floatsisf+0x62>
    6012:	88 0f       	add	r24, r24
    6014:	96 95       	lsr	r25
    6016:	87 95       	ror	r24
    6018:	97 f9       	bld	r25, 7
    601a:	08 95       	ret

0000601c <__fp_cmp>:
    601c:	99 0f       	add	r25, r25
    601e:	00 08       	sbc	r0, r0
    6020:	55 0f       	add	r21, r21
    6022:	aa 0b       	sbc	r26, r26
    6024:	e0 e8       	ldi	r30, 0x80	; 128
    6026:	fe ef       	ldi	r31, 0xFE	; 254
    6028:	16 16       	cp	r1, r22
    602a:	17 06       	cpc	r1, r23
    602c:	e8 07       	cpc	r30, r24
    602e:	f9 07       	cpc	r31, r25
    6030:	c0 f0       	brcs	.+48     	; 0x6062 <__fp_cmp+0x46>
    6032:	12 16       	cp	r1, r18
    6034:	13 06       	cpc	r1, r19
    6036:	e4 07       	cpc	r30, r20
    6038:	f5 07       	cpc	r31, r21
    603a:	98 f0       	brcs	.+38     	; 0x6062 <__fp_cmp+0x46>
    603c:	62 1b       	sub	r22, r18
    603e:	73 0b       	sbc	r23, r19
    6040:	84 0b       	sbc	r24, r20
    6042:	95 0b       	sbc	r25, r21
    6044:	39 f4       	brne	.+14     	; 0x6054 <__fp_cmp+0x38>
    6046:	0a 26       	eor	r0, r26
    6048:	61 f0       	breq	.+24     	; 0x6062 <__fp_cmp+0x46>
    604a:	23 2b       	or	r18, r19
    604c:	24 2b       	or	r18, r20
    604e:	25 2b       	or	r18, r21
    6050:	21 f4       	brne	.+8      	; 0x605a <__fp_cmp+0x3e>
    6052:	08 95       	ret
    6054:	0a 26       	eor	r0, r26
    6056:	09 f4       	brne	.+2      	; 0x605a <__fp_cmp+0x3e>
    6058:	a1 40       	sbci	r26, 0x01	; 1
    605a:	a6 95       	lsr	r26
    605c:	8f ef       	ldi	r24, 0xFF	; 255
    605e:	81 1d       	adc	r24, r1
    6060:	81 1d       	adc	r24, r1
    6062:	08 95       	ret

00006064 <__fp_inf>:
    6064:	97 f9       	bld	r25, 7
    6066:	9f 67       	ori	r25, 0x7F	; 127
    6068:	80 e8       	ldi	r24, 0x80	; 128
    606a:	70 e0       	ldi	r23, 0x00	; 0
    606c:	60 e0       	ldi	r22, 0x00	; 0
    606e:	08 95       	ret

00006070 <__fp_nan>:
    6070:	9f ef       	ldi	r25, 0xFF	; 255
    6072:	80 ec       	ldi	r24, 0xC0	; 192
    6074:	08 95       	ret

00006076 <__fp_pscA>:
    6076:	00 24       	eor	r0, r0
    6078:	0a 94       	dec	r0
    607a:	16 16       	cp	r1, r22
    607c:	17 06       	cpc	r1, r23
    607e:	18 06       	cpc	r1, r24
    6080:	09 06       	cpc	r0, r25
    6082:	08 95       	ret

00006084 <__fp_pscB>:
    6084:	00 24       	eor	r0, r0
    6086:	0a 94       	dec	r0
    6088:	12 16       	cp	r1, r18
    608a:	13 06       	cpc	r1, r19
    608c:	14 06       	cpc	r1, r20
    608e:	05 06       	cpc	r0, r21
    6090:	08 95       	ret

00006092 <__fp_round>:
    6092:	09 2e       	mov	r0, r25
    6094:	03 94       	inc	r0
    6096:	00 0c       	add	r0, r0
    6098:	11 f4       	brne	.+4      	; 0x609e <__fp_round+0xc>
    609a:	88 23       	and	r24, r24
    609c:	52 f0       	brmi	.+20     	; 0x60b2 <__fp_round+0x20>
    609e:	bb 0f       	add	r27, r27
    60a0:	40 f4       	brcc	.+16     	; 0x60b2 <__fp_round+0x20>
    60a2:	bf 2b       	or	r27, r31
    60a4:	11 f4       	brne	.+4      	; 0x60aa <__fp_round+0x18>
    60a6:	60 ff       	sbrs	r22, 0
    60a8:	04 c0       	rjmp	.+8      	; 0x60b2 <__fp_round+0x20>
    60aa:	6f 5f       	subi	r22, 0xFF	; 255
    60ac:	7f 4f       	sbci	r23, 0xFF	; 255
    60ae:	8f 4f       	sbci	r24, 0xFF	; 255
    60b0:	9f 4f       	sbci	r25, 0xFF	; 255
    60b2:	08 95       	ret

000060b4 <__fp_split3>:
    60b4:	57 fd       	sbrc	r21, 7
    60b6:	90 58       	subi	r25, 0x80	; 128
    60b8:	44 0f       	add	r20, r20
    60ba:	55 1f       	adc	r21, r21
    60bc:	59 f0       	breq	.+22     	; 0x60d4 <__fp_splitA+0x10>
    60be:	5f 3f       	cpi	r21, 0xFF	; 255
    60c0:	71 f0       	breq	.+28     	; 0x60de <__fp_splitA+0x1a>
    60c2:	47 95       	ror	r20

000060c4 <__fp_splitA>:
    60c4:	88 0f       	add	r24, r24
    60c6:	97 fb       	bst	r25, 7
    60c8:	99 1f       	adc	r25, r25
    60ca:	61 f0       	breq	.+24     	; 0x60e4 <__fp_splitA+0x20>
    60cc:	9f 3f       	cpi	r25, 0xFF	; 255
    60ce:	79 f0       	breq	.+30     	; 0x60ee <__fp_splitA+0x2a>
    60d0:	87 95       	ror	r24
    60d2:	08 95       	ret
    60d4:	12 16       	cp	r1, r18
    60d6:	13 06       	cpc	r1, r19
    60d8:	14 06       	cpc	r1, r20
    60da:	55 1f       	adc	r21, r21
    60dc:	f2 cf       	rjmp	.-28     	; 0x60c2 <__fp_split3+0xe>
    60de:	46 95       	lsr	r20
    60e0:	f1 df       	rcall	.-30     	; 0x60c4 <__fp_splitA>
    60e2:	08 c0       	rjmp	.+16     	; 0x60f4 <__fp_splitA+0x30>
    60e4:	16 16       	cp	r1, r22
    60e6:	17 06       	cpc	r1, r23
    60e8:	18 06       	cpc	r1, r24
    60ea:	99 1f       	adc	r25, r25
    60ec:	f1 cf       	rjmp	.-30     	; 0x60d0 <__fp_splitA+0xc>
    60ee:	86 95       	lsr	r24
    60f0:	71 05       	cpc	r23, r1
    60f2:	61 05       	cpc	r22, r1
    60f4:	08 94       	sec
    60f6:	08 95       	ret

000060f8 <__fp_zero>:
    60f8:	e8 94       	clt

000060fa <__fp_szero>:
    60fa:	bb 27       	eor	r27, r27
    60fc:	66 27       	eor	r22, r22
    60fe:	77 27       	eor	r23, r23
    6100:	cb 01       	movw	r24, r22
    6102:	97 f9       	bld	r25, 7
    6104:	08 95       	ret

00006106 <__gesf2>:
    6106:	8a df       	rcall	.-236    	; 0x601c <__fp_cmp>
    6108:	08 f4       	brcc	.+2      	; 0x610c <__gesf2+0x6>
    610a:	8f ef       	ldi	r24, 0xFF	; 255
    610c:	08 95       	ret

0000610e <lrint>:
    610e:	da df       	rcall	.-76     	; 0x60c4 <__fp_splitA>
    6110:	a8 f1       	brcs	.+106    	; 0x617c <lrint+0x6e>
    6112:	9e 57       	subi	r25, 0x7E	; 126
    6114:	a8 f1       	brcs	.+106    	; 0x6180 <lrint+0x72>
    6116:	98 51       	subi	r25, 0x18	; 24
    6118:	60 f0       	brcs	.+24     	; 0x6132 <lrint+0x24>
    611a:	39 f1       	breq	.+78     	; 0x616a <lrint+0x5c>
    611c:	98 30       	cpi	r25, 0x08	; 8
    611e:	70 f5       	brcc	.+92     	; 0x617c <lrint+0x6e>
    6120:	09 2e       	mov	r0, r25
    6122:	99 27       	eor	r25, r25
    6124:	66 0f       	add	r22, r22
    6126:	77 1f       	adc	r23, r23
    6128:	88 1f       	adc	r24, r24
    612a:	99 1f       	adc	r25, r25
    612c:	0a 94       	dec	r0
    612e:	d1 f7       	brne	.-12     	; 0x6124 <lrint+0x16>
    6130:	1c c0       	rjmp	.+56     	; 0x616a <lrint+0x5c>
    6132:	bb 27       	eor	r27, r27
    6134:	99 3f       	cpi	r25, 0xF9	; 249
    6136:	4c f4       	brge	.+18     	; 0x614a <lrint+0x3c>
    6138:	b1 11       	cpse	r27, r1
    613a:	b1 e0       	ldi	r27, 0x01	; 1
    613c:	b6 2b       	or	r27, r22
    613e:	67 2f       	mov	r22, r23
    6140:	78 2f       	mov	r23, r24
    6142:	88 27       	eor	r24, r24
    6144:	98 5f       	subi	r25, 0xF8	; 248
    6146:	b1 f7       	brne	.-20     	; 0x6134 <lrint+0x26>
    6148:	08 c0       	rjmp	.+16     	; 0x615a <lrint+0x4c>
    614a:	86 95       	lsr	r24
    614c:	77 95       	ror	r23
    614e:	67 95       	ror	r22
    6150:	b7 95       	ror	r27
    6152:	08 f4       	brcc	.+2      	; 0x6156 <lrint+0x48>
    6154:	b1 60       	ori	r27, 0x01	; 1
    6156:	93 95       	inc	r25
    6158:	c1 f7       	brne	.-16     	; 0x614a <lrint+0x3c>
    615a:	bb 0f       	add	r27, r27
    615c:	30 f4       	brcc	.+12     	; 0x616a <lrint+0x5c>
    615e:	11 f4       	brne	.+4      	; 0x6164 <lrint+0x56>
    6160:	60 ff       	sbrs	r22, 0
    6162:	03 c0       	rjmp	.+6      	; 0x616a <lrint+0x5c>
    6164:	6f 5f       	subi	r22, 0xFF	; 255
    6166:	7f 4f       	sbci	r23, 0xFF	; 255
    6168:	8f 4f       	sbci	r24, 0xFF	; 255
    616a:	3e f4       	brtc	.+14     	; 0x617a <lrint+0x6c>
    616c:	90 95       	com	r25
    616e:	80 95       	com	r24
    6170:	70 95       	com	r23
    6172:	61 95       	neg	r22
    6174:	7f 4f       	sbci	r23, 0xFF	; 255
    6176:	8f 4f       	sbci	r24, 0xFF	; 255
    6178:	9f 4f       	sbci	r25, 0xFF	; 255
    617a:	08 95       	ret
    617c:	68 94       	set
    617e:	bd cf       	rjmp	.-134    	; 0x60fa <__fp_szero>
    6180:	bb cf       	rjmp	.-138    	; 0x60f8 <__fp_zero>

00006182 <__mulsf3>:
    6182:	0b d0       	rcall	.+22     	; 0x619a <__mulsf3x>
    6184:	86 cf       	rjmp	.-244    	; 0x6092 <__fp_round>
    6186:	77 df       	rcall	.-274    	; 0x6076 <__fp_pscA>
    6188:	28 f0       	brcs	.+10     	; 0x6194 <__mulsf3+0x12>
    618a:	7c df       	rcall	.-264    	; 0x6084 <__fp_pscB>
    618c:	18 f0       	brcs	.+6      	; 0x6194 <__mulsf3+0x12>
    618e:	95 23       	and	r25, r21
    6190:	09 f0       	breq	.+2      	; 0x6194 <__mulsf3+0x12>
    6192:	68 cf       	rjmp	.-304    	; 0x6064 <__fp_inf>
    6194:	6d cf       	rjmp	.-294    	; 0x6070 <__fp_nan>
    6196:	11 24       	eor	r1, r1
    6198:	b0 cf       	rjmp	.-160    	; 0x60fa <__fp_szero>

0000619a <__mulsf3x>:
    619a:	8c df       	rcall	.-232    	; 0x60b4 <__fp_split3>
    619c:	a0 f3       	brcs	.-24     	; 0x6186 <__mulsf3+0x4>

0000619e <__mulsf3_pse>:
    619e:	95 9f       	mul	r25, r21
    61a0:	d1 f3       	breq	.-12     	; 0x6196 <__mulsf3+0x14>
    61a2:	95 0f       	add	r25, r21
    61a4:	50 e0       	ldi	r21, 0x00	; 0
    61a6:	55 1f       	adc	r21, r21
    61a8:	62 9f       	mul	r22, r18
    61aa:	f0 01       	movw	r30, r0
    61ac:	72 9f       	mul	r23, r18
    61ae:	bb 27       	eor	r27, r27
    61b0:	f0 0d       	add	r31, r0
    61b2:	b1 1d       	adc	r27, r1
    61b4:	63 9f       	mul	r22, r19
    61b6:	aa 27       	eor	r26, r26
    61b8:	f0 0d       	add	r31, r0
    61ba:	b1 1d       	adc	r27, r1
    61bc:	aa 1f       	adc	r26, r26
    61be:	64 9f       	mul	r22, r20
    61c0:	66 27       	eor	r22, r22
    61c2:	b0 0d       	add	r27, r0
    61c4:	a1 1d       	adc	r26, r1
    61c6:	66 1f       	adc	r22, r22
    61c8:	82 9f       	mul	r24, r18
    61ca:	22 27       	eor	r18, r18
    61cc:	b0 0d       	add	r27, r0
    61ce:	a1 1d       	adc	r26, r1
    61d0:	62 1f       	adc	r22, r18
    61d2:	73 9f       	mul	r23, r19
    61d4:	b0 0d       	add	r27, r0
    61d6:	a1 1d       	adc	r26, r1
    61d8:	62 1f       	adc	r22, r18
    61da:	83 9f       	mul	r24, r19
    61dc:	a0 0d       	add	r26, r0
    61de:	61 1d       	adc	r22, r1
    61e0:	22 1f       	adc	r18, r18
    61e2:	74 9f       	mul	r23, r20
    61e4:	33 27       	eor	r19, r19
    61e6:	a0 0d       	add	r26, r0
    61e8:	61 1d       	adc	r22, r1
    61ea:	23 1f       	adc	r18, r19
    61ec:	84 9f       	mul	r24, r20
    61ee:	60 0d       	add	r22, r0
    61f0:	21 1d       	adc	r18, r1
    61f2:	82 2f       	mov	r24, r18
    61f4:	76 2f       	mov	r23, r22
    61f6:	6a 2f       	mov	r22, r26
    61f8:	11 24       	eor	r1, r1
    61fa:	9f 57       	subi	r25, 0x7F	; 127
    61fc:	50 40       	sbci	r21, 0x00	; 0
    61fe:	8a f0       	brmi	.+34     	; 0x6222 <__mulsf3_pse+0x84>
    6200:	e1 f0       	breq	.+56     	; 0x623a <__mulsf3_pse+0x9c>
    6202:	88 23       	and	r24, r24
    6204:	4a f0       	brmi	.+18     	; 0x6218 <__mulsf3_pse+0x7a>
    6206:	ee 0f       	add	r30, r30
    6208:	ff 1f       	adc	r31, r31
    620a:	bb 1f       	adc	r27, r27
    620c:	66 1f       	adc	r22, r22
    620e:	77 1f       	adc	r23, r23
    6210:	88 1f       	adc	r24, r24
    6212:	91 50       	subi	r25, 0x01	; 1
    6214:	50 40       	sbci	r21, 0x00	; 0
    6216:	a9 f7       	brne	.-22     	; 0x6202 <__mulsf3_pse+0x64>
    6218:	9e 3f       	cpi	r25, 0xFE	; 254
    621a:	51 05       	cpc	r21, r1
    621c:	70 f0       	brcs	.+28     	; 0x623a <__mulsf3_pse+0x9c>
    621e:	22 cf       	rjmp	.-444    	; 0x6064 <__fp_inf>
    6220:	6c cf       	rjmp	.-296    	; 0x60fa <__fp_szero>
    6222:	5f 3f       	cpi	r21, 0xFF	; 255
    6224:	ec f3       	brlt	.-6      	; 0x6220 <__mulsf3_pse+0x82>
    6226:	98 3e       	cpi	r25, 0xE8	; 232
    6228:	dc f3       	brlt	.-10     	; 0x6220 <__mulsf3_pse+0x82>
    622a:	86 95       	lsr	r24
    622c:	77 95       	ror	r23
    622e:	67 95       	ror	r22
    6230:	b7 95       	ror	r27
    6232:	f7 95       	ror	r31
    6234:	e7 95       	ror	r30
    6236:	9f 5f       	subi	r25, 0xFF	; 255
    6238:	c1 f7       	brne	.-16     	; 0x622a <__mulsf3_pse+0x8c>
    623a:	fe 2b       	or	r31, r30
    623c:	88 0f       	add	r24, r24
    623e:	91 1d       	adc	r25, r1
    6240:	96 95       	lsr	r25
    6242:	87 95       	ror	r24
    6244:	97 f9       	bld	r25, 7
    6246:	08 95       	ret

00006248 <pow>:
    6248:	fa 01       	movw	r30, r20
    624a:	ee 0f       	add	r30, r30
    624c:	ff 1f       	adc	r31, r31
    624e:	30 96       	adiw	r30, 0x00	; 0
    6250:	21 05       	cpc	r18, r1
    6252:	31 05       	cpc	r19, r1
    6254:	99 f1       	breq	.+102    	; 0x62bc <pow+0x74>
    6256:	61 15       	cp	r22, r1
    6258:	71 05       	cpc	r23, r1
    625a:	61 f4       	brne	.+24     	; 0x6274 <pow+0x2c>
    625c:	80 38       	cpi	r24, 0x80	; 128
    625e:	bf e3       	ldi	r27, 0x3F	; 63
    6260:	9b 07       	cpc	r25, r27
    6262:	49 f1       	breq	.+82     	; 0x62b6 <pow+0x6e>
    6264:	68 94       	set
    6266:	90 38       	cpi	r25, 0x80	; 128
    6268:	81 05       	cpc	r24, r1
    626a:	61 f0       	breq	.+24     	; 0x6284 <pow+0x3c>
    626c:	80 38       	cpi	r24, 0x80	; 128
    626e:	bf ef       	ldi	r27, 0xFF	; 255
    6270:	9b 07       	cpc	r25, r27
    6272:	41 f0       	breq	.+16     	; 0x6284 <pow+0x3c>
    6274:	99 23       	and	r25, r25
    6276:	42 f5       	brpl	.+80     	; 0x62c8 <pow+0x80>
    6278:	ff 3f       	cpi	r31, 0xFF	; 255
    627a:	e1 05       	cpc	r30, r1
    627c:	31 05       	cpc	r19, r1
    627e:	21 05       	cpc	r18, r1
    6280:	11 f1       	breq	.+68     	; 0x62c6 <pow+0x7e>
    6282:	e8 94       	clt
    6284:	08 94       	sec
    6286:	e7 95       	ror	r30
    6288:	d9 01       	movw	r26, r18
    628a:	aa 23       	and	r26, r26
    628c:	29 f4       	brne	.+10     	; 0x6298 <pow+0x50>
    628e:	ab 2f       	mov	r26, r27
    6290:	be 2f       	mov	r27, r30
    6292:	f8 5f       	subi	r31, 0xF8	; 248
    6294:	d0 f3       	brcs	.-12     	; 0x628a <pow+0x42>
    6296:	10 c0       	rjmp	.+32     	; 0x62b8 <pow+0x70>
    6298:	ff 5f       	subi	r31, 0xFF	; 255
    629a:	70 f4       	brcc	.+28     	; 0x62b8 <pow+0x70>
    629c:	a6 95       	lsr	r26
    629e:	e0 f7       	brcc	.-8      	; 0x6298 <pow+0x50>
    62a0:	f7 39       	cpi	r31, 0x97	; 151
    62a2:	50 f0       	brcs	.+20     	; 0x62b8 <pow+0x70>
    62a4:	19 f0       	breq	.+6      	; 0x62ac <pow+0x64>
    62a6:	ff 3a       	cpi	r31, 0xAF	; 175
    62a8:	38 f4       	brcc	.+14     	; 0x62b8 <pow+0x70>
    62aa:	9f 77       	andi	r25, 0x7F	; 127
    62ac:	9f 93       	push	r25
    62ae:	0c d0       	rcall	.+24     	; 0x62c8 <pow+0x80>
    62b0:	0f 90       	pop	r0
    62b2:	07 fc       	sbrc	r0, 7
    62b4:	90 58       	subi	r25, 0x80	; 128
    62b6:	08 95       	ret
    62b8:	3e f0       	brts	.+14     	; 0x62c8 <pow+0x80>
    62ba:	da ce       	rjmp	.-588    	; 0x6070 <__fp_nan>
    62bc:	60 e0       	ldi	r22, 0x00	; 0
    62be:	70 e0       	ldi	r23, 0x00	; 0
    62c0:	80 e8       	ldi	r24, 0x80	; 128
    62c2:	9f e3       	ldi	r25, 0x3F	; 63
    62c4:	08 95       	ret
    62c6:	4f e7       	ldi	r20, 0x7F	; 127
    62c8:	9f 77       	andi	r25, 0x7F	; 127
    62ca:	5f 93       	push	r21
    62cc:	4f 93       	push	r20
    62ce:	3f 93       	push	r19
    62d0:	2f 93       	push	r18
    62d2:	9e d0       	rcall	.+316    	; 0x6410 <log>
    62d4:	2f 91       	pop	r18
    62d6:	3f 91       	pop	r19
    62d8:	4f 91       	pop	r20
    62da:	5f 91       	pop	r21
    62dc:	52 df       	rcall	.-348    	; 0x6182 <__mulsf3>
    62de:	05 c0       	rjmp	.+10     	; 0x62ea <exp>
    62e0:	19 f4       	brne	.+6      	; 0x62e8 <pow+0xa0>
    62e2:	0e f0       	brts	.+2      	; 0x62e6 <pow+0x9e>
    62e4:	bf ce       	rjmp	.-642    	; 0x6064 <__fp_inf>
    62e6:	08 cf       	rjmp	.-496    	; 0x60f8 <__fp_zero>
    62e8:	c3 ce       	rjmp	.-634    	; 0x6070 <__fp_nan>

000062ea <exp>:
    62ea:	ec de       	rcall	.-552    	; 0x60c4 <__fp_splitA>
    62ec:	c8 f3       	brcs	.-14     	; 0x62e0 <pow+0x98>
    62ee:	96 38       	cpi	r25, 0x86	; 134
    62f0:	c0 f7       	brcc	.-16     	; 0x62e2 <pow+0x9a>
    62f2:	07 f8       	bld	r0, 7
    62f4:	0f 92       	push	r0
    62f6:	e8 94       	clt
    62f8:	2b e3       	ldi	r18, 0x3B	; 59
    62fa:	3a ea       	ldi	r19, 0xAA	; 170
    62fc:	48 eb       	ldi	r20, 0xB8	; 184
    62fe:	5f e7       	ldi	r21, 0x7F	; 127
    6300:	4e df       	rcall	.-356    	; 0x619e <__mulsf3_pse>
    6302:	0f 92       	push	r0
    6304:	0f 92       	push	r0
    6306:	0f 92       	push	r0
    6308:	4d b7       	in	r20, 0x3d	; 61
    630a:	5e b7       	in	r21, 0x3e	; 62
    630c:	0f 92       	push	r0
    630e:	c0 d0       	rcall	.+384    	; 0x6490 <modf>
    6310:	e8 ec       	ldi	r30, 0xC8	; 200
    6312:	f0 e0       	ldi	r31, 0x00	; 0
    6314:	16 d0       	rcall	.+44     	; 0x6342 <__fp_powser>
    6316:	4f 91       	pop	r20
    6318:	5f 91       	pop	r21
    631a:	ef 91       	pop	r30
    631c:	ff 91       	pop	r31
    631e:	e5 95       	asr	r30
    6320:	ee 1f       	adc	r30, r30
    6322:	ff 1f       	adc	r31, r31
    6324:	49 f0       	breq	.+18     	; 0x6338 <exp+0x4e>
    6326:	fe 57       	subi	r31, 0x7E	; 126
    6328:	e0 68       	ori	r30, 0x80	; 128
    632a:	44 27       	eor	r20, r20
    632c:	ee 0f       	add	r30, r30
    632e:	44 1f       	adc	r20, r20
    6330:	fa 95       	dec	r31
    6332:	e1 f7       	brne	.-8      	; 0x632c <exp+0x42>
    6334:	41 95       	neg	r20
    6336:	55 0b       	sbc	r21, r21
    6338:	32 d0       	rcall	.+100    	; 0x639e <ldexp>
    633a:	0f 90       	pop	r0
    633c:	07 fe       	sbrs	r0, 7
    633e:	26 c0       	rjmp	.+76     	; 0x638c <inverse>
    6340:	08 95       	ret

00006342 <__fp_powser>:
    6342:	df 93       	push	r29
    6344:	cf 93       	push	r28
    6346:	1f 93       	push	r17
    6348:	0f 93       	push	r16
    634a:	ff 92       	push	r15
    634c:	ef 92       	push	r14
    634e:	df 92       	push	r13
    6350:	7b 01       	movw	r14, r22
    6352:	8c 01       	movw	r16, r24
    6354:	68 94       	set
    6356:	05 c0       	rjmp	.+10     	; 0x6362 <__fp_powser+0x20>
    6358:	da 2e       	mov	r13, r26
    635a:	ef 01       	movw	r28, r30
    635c:	1e df       	rcall	.-452    	; 0x619a <__mulsf3x>
    635e:	fe 01       	movw	r30, r28
    6360:	e8 94       	clt
    6362:	a5 91       	lpm	r26, Z+
    6364:	25 91       	lpm	r18, Z+
    6366:	35 91       	lpm	r19, Z+
    6368:	45 91       	lpm	r20, Z+
    636a:	55 91       	lpm	r21, Z+
    636c:	ae f3       	brts	.-22     	; 0x6358 <__fp_powser+0x16>
    636e:	ef 01       	movw	r28, r30
    6370:	28 dd       	rcall	.-1456   	; 0x5dc2 <__addsf3x>
    6372:	fe 01       	movw	r30, r28
    6374:	97 01       	movw	r18, r14
    6376:	a8 01       	movw	r20, r16
    6378:	da 94       	dec	r13
    637a:	79 f7       	brne	.-34     	; 0x635a <__fp_powser+0x18>
    637c:	df 90       	pop	r13
    637e:	ef 90       	pop	r14
    6380:	ff 90       	pop	r15
    6382:	0f 91       	pop	r16
    6384:	1f 91       	pop	r17
    6386:	cf 91       	pop	r28
    6388:	df 91       	pop	r29
    638a:	08 95       	ret

0000638c <inverse>:
    638c:	9b 01       	movw	r18, r22
    638e:	ac 01       	movw	r20, r24
    6390:	60 e0       	ldi	r22, 0x00	; 0
    6392:	70 e0       	ldi	r23, 0x00	; 0
    6394:	80 e8       	ldi	r24, 0x80	; 128
    6396:	9f e3       	ldi	r25, 0x3F	; 63
    6398:	6b cd       	rjmp	.-1322   	; 0x5e70 <__divsf3>
    639a:	64 ce       	rjmp	.-824    	; 0x6064 <__fp_inf>
    639c:	ac c0       	rjmp	.+344    	; 0x64f6 <__fp_mpack>

0000639e <ldexp>:
    639e:	92 de       	rcall	.-732    	; 0x60c4 <__fp_splitA>
    63a0:	e8 f3       	brcs	.-6      	; 0x639c <inverse+0x10>
    63a2:	99 23       	and	r25, r25
    63a4:	d9 f3       	breq	.-10     	; 0x639c <inverse+0x10>
    63a6:	94 0f       	add	r25, r20
    63a8:	51 1d       	adc	r21, r1
    63aa:	bb f3       	brvs	.-18     	; 0x639a <inverse+0xe>
    63ac:	91 50       	subi	r25, 0x01	; 1
    63ae:	50 40       	sbci	r21, 0x00	; 0
    63b0:	94 f0       	brlt	.+36     	; 0x63d6 <ldexp+0x38>
    63b2:	59 f0       	breq	.+22     	; 0x63ca <ldexp+0x2c>
    63b4:	88 23       	and	r24, r24
    63b6:	32 f0       	brmi	.+12     	; 0x63c4 <ldexp+0x26>
    63b8:	66 0f       	add	r22, r22
    63ba:	77 1f       	adc	r23, r23
    63bc:	88 1f       	adc	r24, r24
    63be:	91 50       	subi	r25, 0x01	; 1
    63c0:	50 40       	sbci	r21, 0x00	; 0
    63c2:	c1 f7       	brne	.-16     	; 0x63b4 <ldexp+0x16>
    63c4:	9e 3f       	cpi	r25, 0xFE	; 254
    63c6:	51 05       	cpc	r21, r1
    63c8:	44 f7       	brge	.-48     	; 0x639a <inverse+0xe>
    63ca:	88 0f       	add	r24, r24
    63cc:	91 1d       	adc	r25, r1
    63ce:	96 95       	lsr	r25
    63d0:	87 95       	ror	r24
    63d2:	97 f9       	bld	r25, 7
    63d4:	08 95       	ret
    63d6:	5f 3f       	cpi	r21, 0xFF	; 255
    63d8:	ac f0       	brlt	.+42     	; 0x6404 <ldexp+0x66>
    63da:	98 3e       	cpi	r25, 0xE8	; 232
    63dc:	9c f0       	brlt	.+38     	; 0x6404 <ldexp+0x66>
    63de:	bb 27       	eor	r27, r27
    63e0:	86 95       	lsr	r24
    63e2:	77 95       	ror	r23
    63e4:	67 95       	ror	r22
    63e6:	b7 95       	ror	r27
    63e8:	08 f4       	brcc	.+2      	; 0x63ec <ldexp+0x4e>
    63ea:	b1 60       	ori	r27, 0x01	; 1
    63ec:	93 95       	inc	r25
    63ee:	c1 f7       	brne	.-16     	; 0x63e0 <ldexp+0x42>
    63f0:	bb 0f       	add	r27, r27
    63f2:	58 f7       	brcc	.-42     	; 0x63ca <ldexp+0x2c>
    63f4:	11 f4       	brne	.+4      	; 0x63fa <ldexp+0x5c>
    63f6:	60 ff       	sbrs	r22, 0
    63f8:	e8 cf       	rjmp	.-48     	; 0x63ca <ldexp+0x2c>
    63fa:	6f 5f       	subi	r22, 0xFF	; 255
    63fc:	7f 4f       	sbci	r23, 0xFF	; 255
    63fe:	8f 4f       	sbci	r24, 0xFF	; 255
    6400:	9f 4f       	sbci	r25, 0xFF	; 255
    6402:	e3 cf       	rjmp	.-58     	; 0x63ca <ldexp+0x2c>
    6404:	7a ce       	rjmp	.-780    	; 0x60fa <__fp_szero>
    6406:	0e f0       	brts	.+2      	; 0x640a <ldexp+0x6c>
    6408:	76 c0       	rjmp	.+236    	; 0x64f6 <__fp_mpack>
    640a:	32 ce       	rjmp	.-924    	; 0x6070 <__fp_nan>
    640c:	68 94       	set
    640e:	2a ce       	rjmp	.-940    	; 0x6064 <__fp_inf>

00006410 <log>:
    6410:	59 de       	rcall	.-846    	; 0x60c4 <__fp_splitA>
    6412:	c8 f3       	brcs	.-14     	; 0x6406 <ldexp+0x68>
    6414:	99 23       	and	r25, r25
    6416:	d1 f3       	breq	.-12     	; 0x640c <ldexp+0x6e>
    6418:	c6 f3       	brts	.-16     	; 0x640a <ldexp+0x6c>
    641a:	df 93       	push	r29
    641c:	cf 93       	push	r28
    641e:	1f 93       	push	r17
    6420:	0f 93       	push	r16
    6422:	ff 92       	push	r15
    6424:	c9 2f       	mov	r28, r25
    6426:	dd 27       	eor	r29, r29
    6428:	88 23       	and	r24, r24
    642a:	2a f0       	brmi	.+10     	; 0x6436 <log+0x26>
    642c:	21 97       	sbiw	r28, 0x01	; 1
    642e:	66 0f       	add	r22, r22
    6430:	77 1f       	adc	r23, r23
    6432:	88 1f       	adc	r24, r24
    6434:	da f7       	brpl	.-10     	; 0x642c <log+0x1c>
    6436:	20 e0       	ldi	r18, 0x00	; 0
    6438:	30 e0       	ldi	r19, 0x00	; 0
    643a:	40 e8       	ldi	r20, 0x80	; 128
    643c:	5f eb       	ldi	r21, 0xBF	; 191
    643e:	9f e3       	ldi	r25, 0x3F	; 63
    6440:	88 39       	cpi	r24, 0x98	; 152
    6442:	20 f0       	brcs	.+8      	; 0x644c <log+0x3c>
    6444:	80 3e       	cpi	r24, 0xE0	; 224
    6446:	30 f0       	brcs	.+12     	; 0x6454 <log+0x44>
    6448:	21 96       	adiw	r28, 0x01	; 1
    644a:	8f 77       	andi	r24, 0x7F	; 127
    644c:	a9 dc       	rcall	.-1710   	; 0x5da0 <__addsf3>
    644e:	e0 ef       	ldi	r30, 0xF0	; 240
    6450:	f0 e0       	ldi	r31, 0x00	; 0
    6452:	03 c0       	rjmp	.+6      	; 0x645a <log+0x4a>
    6454:	a5 dc       	rcall	.-1718   	; 0x5da0 <__addsf3>
    6456:	ed e1       	ldi	r30, 0x1D	; 29
    6458:	f1 e0       	ldi	r31, 0x01	; 1
    645a:	73 df       	rcall	.-282    	; 0x6342 <__fp_powser>
    645c:	8b 01       	movw	r16, r22
    645e:	be 01       	movw	r22, r28
    6460:	ec 01       	movw	r28, r24
    6462:	fb 2e       	mov	r15, r27
    6464:	6f 57       	subi	r22, 0x7F	; 127
    6466:	71 09       	sbc	r23, r1
    6468:	75 95       	asr	r23
    646a:	77 1f       	adc	r23, r23
    646c:	88 0b       	sbc	r24, r24
    646e:	99 0b       	sbc	r25, r25
    6470:	9a dd       	rcall	.-1228   	; 0x5fa6 <__floatsisf>
    6472:	28 e1       	ldi	r18, 0x18	; 24
    6474:	32 e7       	ldi	r19, 0x72	; 114
    6476:	41 e3       	ldi	r20, 0x31	; 49
    6478:	5f e3       	ldi	r21, 0x3F	; 63
    647a:	8f de       	rcall	.-738    	; 0x619a <__mulsf3x>
    647c:	af 2d       	mov	r26, r15
    647e:	98 01       	movw	r18, r16
    6480:	ae 01       	movw	r20, r28
    6482:	ff 90       	pop	r15
    6484:	0f 91       	pop	r16
    6486:	1f 91       	pop	r17
    6488:	cf 91       	pop	r28
    648a:	df 91       	pop	r29
    648c:	9a dc       	rcall	.-1740   	; 0x5dc2 <__addsf3x>
    648e:	01 ce       	rjmp	.-1022   	; 0x6092 <__fp_round>

00006490 <modf>:
    6490:	fa 01       	movw	r30, r20
    6492:	dc 01       	movw	r26, r24
    6494:	aa 0f       	add	r26, r26
    6496:	bb 1f       	adc	r27, r27
    6498:	9b 01       	movw	r18, r22
    649a:	ac 01       	movw	r20, r24
    649c:	bf 57       	subi	r27, 0x7F	; 127
    649e:	28 f4       	brcc	.+10     	; 0x64aa <modf+0x1a>
    64a0:	22 27       	eor	r18, r18
    64a2:	33 27       	eor	r19, r19
    64a4:	44 27       	eor	r20, r20
    64a6:	50 78       	andi	r21, 0x80	; 128
    64a8:	1f c0       	rjmp	.+62     	; 0x64e8 <modf+0x58>
    64aa:	b7 51       	subi	r27, 0x17	; 23
    64ac:	88 f4       	brcc	.+34     	; 0x64d0 <modf+0x40>
    64ae:	ab 2f       	mov	r26, r27
    64b0:	00 24       	eor	r0, r0
    64b2:	46 95       	lsr	r20
    64b4:	37 95       	ror	r19
    64b6:	27 95       	ror	r18
    64b8:	01 1c       	adc	r0, r1
    64ba:	a3 95       	inc	r26
    64bc:	d2 f3       	brmi	.-12     	; 0x64b2 <modf+0x22>
    64be:	00 20       	and	r0, r0
    64c0:	69 f0       	breq	.+26     	; 0x64dc <modf+0x4c>
    64c2:	22 0f       	add	r18, r18
    64c4:	33 1f       	adc	r19, r19
    64c6:	44 1f       	adc	r20, r20
    64c8:	b3 95       	inc	r27
    64ca:	da f3       	brmi	.-10     	; 0x64c2 <modf+0x32>
    64cc:	0d d0       	rcall	.+26     	; 0x64e8 <modf+0x58>
    64ce:	67 cc       	rjmp	.-1842   	; 0x5d9e <__subsf3>
    64d0:	61 30       	cpi	r22, 0x01	; 1
    64d2:	71 05       	cpc	r23, r1
    64d4:	a0 e8       	ldi	r26, 0x80	; 128
    64d6:	8a 07       	cpc	r24, r26
    64d8:	b9 46       	sbci	r27, 0x69	; 105
    64da:	30 f4       	brcc	.+12     	; 0x64e8 <modf+0x58>
    64dc:	9b 01       	movw	r18, r22
    64de:	ac 01       	movw	r20, r24
    64e0:	66 27       	eor	r22, r22
    64e2:	77 27       	eor	r23, r23
    64e4:	88 27       	eor	r24, r24
    64e6:	90 78       	andi	r25, 0x80	; 128
    64e8:	30 96       	adiw	r30, 0x00	; 0
    64ea:	21 f0       	breq	.+8      	; 0x64f4 <modf+0x64>
    64ec:	20 83       	st	Z, r18
    64ee:	31 83       	std	Z+1, r19	; 0x01
    64f0:	42 83       	std	Z+2, r20	; 0x02
    64f2:	53 83       	std	Z+3, r21	; 0x03
    64f4:	08 95       	ret

000064f6 <__fp_mpack>:
    64f6:	9f 3f       	cpi	r25, 0xFF	; 255
    64f8:	31 f0       	breq	.+12     	; 0x6506 <__fp_mpack_finite+0xc>

000064fa <__fp_mpack_finite>:
    64fa:	91 50       	subi	r25, 0x01	; 1
    64fc:	20 f4       	brcc	.+8      	; 0x6506 <__fp_mpack_finite+0xc>
    64fe:	87 95       	ror	r24
    6500:	77 95       	ror	r23
    6502:	67 95       	ror	r22
    6504:	b7 95       	ror	r27
    6506:	88 0f       	add	r24, r24
    6508:	91 1d       	adc	r25, r1
    650a:	96 95       	lsr	r25
    650c:	87 95       	ror	r24
    650e:	97 f9       	bld	r25, 7
    6510:	08 95       	ret

00006512 <vfprintf>:
    6512:	a1 e1       	ldi	r26, 0x11	; 17
    6514:	b0 e0       	ldi	r27, 0x00	; 0
    6516:	ee e8       	ldi	r30, 0x8E	; 142
    6518:	f2 e3       	ldi	r31, 0x32	; 50
    651a:	a4 c3       	rjmp	.+1864   	; 0x6c64 <__prologue_saves__>
    651c:	3c 01       	movw	r6, r24
    651e:	7f 87       	std	Y+15, r23	; 0x0f
    6520:	6e 87       	std	Y+14, r22	; 0x0e
    6522:	6a 01       	movw	r12, r20
    6524:	fc 01       	movw	r30, r24
    6526:	17 82       	std	Z+7, r1	; 0x07
    6528:	16 82       	std	Z+6, r1	; 0x06
    652a:	83 81       	ldd	r24, Z+3	; 0x03
    652c:	81 fd       	sbrc	r24, 1
    652e:	03 c0       	rjmp	.+6      	; 0x6536 <vfprintf+0x24>
    6530:	6f ef       	ldi	r22, 0xFF	; 255
    6532:	7f ef       	ldi	r23, 0xFF	; 255
    6534:	52 c3       	rjmp	.+1700   	; 0x6bda <vfprintf+0x6c8>
    6536:	9e 01       	movw	r18, r28
    6538:	2f 5f       	subi	r18, 0xFF	; 255
    653a:	3f 4f       	sbci	r19, 0xFF	; 255
    653c:	39 8b       	std	Y+17, r19	; 0x11
    653e:	28 8b       	std	Y+16, r18	; 0x10
    6540:	f3 01       	movw	r30, r6
    6542:	23 81       	ldd	r18, Z+3	; 0x03
    6544:	ee 85       	ldd	r30, Y+14	; 0x0e
    6546:	ff 85       	ldd	r31, Y+15	; 0x0f
    6548:	23 fd       	sbrc	r18, 3
    654a:	85 91       	lpm	r24, Z+
    654c:	23 ff       	sbrs	r18, 3
    654e:	81 91       	ld	r24, Z+
    6550:	ff 87       	std	Y+15, r31	; 0x0f
    6552:	ee 87       	std	Y+14, r30	; 0x0e
    6554:	88 23       	and	r24, r24
    6556:	09 f4       	brne	.+2      	; 0x655a <vfprintf+0x48>
    6558:	3d c3       	rjmp	.+1658   	; 0x6bd4 <vfprintf+0x6c2>
    655a:	85 32       	cpi	r24, 0x25	; 37
    655c:	51 f4       	brne	.+20     	; 0x6572 <vfprintf+0x60>
    655e:	ee 85       	ldd	r30, Y+14	; 0x0e
    6560:	ff 85       	ldd	r31, Y+15	; 0x0f
    6562:	23 fd       	sbrc	r18, 3
    6564:	85 91       	lpm	r24, Z+
    6566:	23 ff       	sbrs	r18, 3
    6568:	81 91       	ld	r24, Z+
    656a:	ff 87       	std	Y+15, r31	; 0x0f
    656c:	ee 87       	std	Y+14, r30	; 0x0e
    656e:	85 32       	cpi	r24, 0x25	; 37
    6570:	21 f4       	brne	.+8      	; 0x657a <vfprintf+0x68>
    6572:	90 e0       	ldi	r25, 0x00	; 0
    6574:	b3 01       	movw	r22, r6
    6576:	a0 d5       	rcall	.+2880   	; 0x70b8 <fputc>
    6578:	e3 cf       	rjmp	.-58     	; 0x6540 <vfprintf+0x2e>
    657a:	98 2f       	mov	r25, r24
    657c:	10 e0       	ldi	r17, 0x00	; 0
    657e:	88 24       	eor	r8, r8
    6580:	99 24       	eor	r9, r9
    6582:	10 32       	cpi	r17, 0x20	; 32
    6584:	b0 f4       	brcc	.+44     	; 0x65b2 <vfprintf+0xa0>
    6586:	9b 32       	cpi	r25, 0x2B	; 43
    6588:	69 f0       	breq	.+26     	; 0x65a4 <vfprintf+0x92>
    658a:	9c 32       	cpi	r25, 0x2C	; 44
    658c:	28 f4       	brcc	.+10     	; 0x6598 <vfprintf+0x86>
    658e:	90 32       	cpi	r25, 0x20	; 32
    6590:	51 f0       	breq	.+20     	; 0x65a6 <vfprintf+0x94>
    6592:	93 32       	cpi	r25, 0x23	; 35
    6594:	71 f4       	brne	.+28     	; 0x65b2 <vfprintf+0xa0>
    6596:	0b c0       	rjmp	.+22     	; 0x65ae <vfprintf+0x9c>
    6598:	9d 32       	cpi	r25, 0x2D	; 45
    659a:	39 f0       	breq	.+14     	; 0x65aa <vfprintf+0x98>
    659c:	90 33       	cpi	r25, 0x30	; 48
    659e:	49 f4       	brne	.+18     	; 0x65b2 <vfprintf+0xa0>
    65a0:	11 60       	ori	r17, 0x01	; 1
    65a2:	28 c0       	rjmp	.+80     	; 0x65f4 <vfprintf+0xe2>
    65a4:	12 60       	ori	r17, 0x02	; 2
    65a6:	14 60       	ori	r17, 0x04	; 4
    65a8:	25 c0       	rjmp	.+74     	; 0x65f4 <vfprintf+0xe2>
    65aa:	18 60       	ori	r17, 0x08	; 8
    65ac:	23 c0       	rjmp	.+70     	; 0x65f4 <vfprintf+0xe2>
    65ae:	10 61       	ori	r17, 0x10	; 16
    65b0:	21 c0       	rjmp	.+66     	; 0x65f4 <vfprintf+0xe2>
    65b2:	17 fd       	sbrc	r17, 7
    65b4:	2a c0       	rjmp	.+84     	; 0x660a <vfprintf+0xf8>
    65b6:	89 2f       	mov	r24, r25
    65b8:	80 53       	subi	r24, 0x30	; 48
    65ba:	8a 30       	cpi	r24, 0x0A	; 10
    65bc:	78 f4       	brcc	.+30     	; 0x65dc <vfprintf+0xca>
    65be:	16 ff       	sbrs	r17, 6
    65c0:	06 c0       	rjmp	.+12     	; 0x65ce <vfprintf+0xbc>
    65c2:	fa e0       	ldi	r31, 0x0A	; 10
    65c4:	9f 9e       	mul	r9, r31
    65c6:	90 2c       	mov	r9, r0
    65c8:	11 24       	eor	r1, r1
    65ca:	98 0e       	add	r9, r24
    65cc:	13 c0       	rjmp	.+38     	; 0x65f4 <vfprintf+0xe2>
    65ce:	3a e0       	ldi	r19, 0x0A	; 10
    65d0:	83 9e       	mul	r8, r19
    65d2:	80 2c       	mov	r8, r0
    65d4:	11 24       	eor	r1, r1
    65d6:	88 0e       	add	r8, r24
    65d8:	10 62       	ori	r17, 0x20	; 32
    65da:	0c c0       	rjmp	.+24     	; 0x65f4 <vfprintf+0xe2>
    65dc:	9e 32       	cpi	r25, 0x2E	; 46
    65de:	21 f4       	brne	.+8      	; 0x65e8 <vfprintf+0xd6>
    65e0:	16 fd       	sbrc	r17, 6
    65e2:	f8 c2       	rjmp	.+1520   	; 0x6bd4 <vfprintf+0x6c2>
    65e4:	10 64       	ori	r17, 0x40	; 64
    65e6:	06 c0       	rjmp	.+12     	; 0x65f4 <vfprintf+0xe2>
    65e8:	9c 36       	cpi	r25, 0x6C	; 108
    65ea:	11 f4       	brne	.+4      	; 0x65f0 <vfprintf+0xde>
    65ec:	10 68       	ori	r17, 0x80	; 128
    65ee:	02 c0       	rjmp	.+4      	; 0x65f4 <vfprintf+0xe2>
    65f0:	98 36       	cpi	r25, 0x68	; 104
    65f2:	59 f4       	brne	.+22     	; 0x660a <vfprintf+0xf8>
    65f4:	ee 85       	ldd	r30, Y+14	; 0x0e
    65f6:	ff 85       	ldd	r31, Y+15	; 0x0f
    65f8:	23 fd       	sbrc	r18, 3
    65fa:	95 91       	lpm	r25, Z+
    65fc:	23 ff       	sbrs	r18, 3
    65fe:	91 91       	ld	r25, Z+
    6600:	ff 87       	std	Y+15, r31	; 0x0f
    6602:	ee 87       	std	Y+14, r30	; 0x0e
    6604:	99 23       	and	r25, r25
    6606:	09 f0       	breq	.+2      	; 0x660a <vfprintf+0xf8>
    6608:	bc cf       	rjmp	.-136    	; 0x6582 <vfprintf+0x70>
    660a:	89 2f       	mov	r24, r25
    660c:	85 54       	subi	r24, 0x45	; 69
    660e:	83 30       	cpi	r24, 0x03	; 3
    6610:	20 f4       	brcc	.+8      	; 0x661a <vfprintf+0x108>
    6612:	81 2f       	mov	r24, r17
    6614:	80 61       	ori	r24, 0x10	; 16
    6616:	90 5e       	subi	r25, 0xE0	; 224
    6618:	07 c0       	rjmp	.+14     	; 0x6628 <vfprintf+0x116>
    661a:	89 2f       	mov	r24, r25
    661c:	85 56       	subi	r24, 0x65	; 101
    661e:	83 30       	cpi	r24, 0x03	; 3
    6620:	08 f0       	brcs	.+2      	; 0x6624 <vfprintf+0x112>
    6622:	8f c1       	rjmp	.+798    	; 0x6942 <vfprintf+0x430>
    6624:	81 2f       	mov	r24, r17
    6626:	8f 7e       	andi	r24, 0xEF	; 239
    6628:	86 fd       	sbrc	r24, 6
    662a:	02 c0       	rjmp	.+4      	; 0x6630 <vfprintf+0x11e>
    662c:	76 e0       	ldi	r23, 0x06	; 6
    662e:	97 2e       	mov	r9, r23
    6630:	6f e3       	ldi	r22, 0x3F	; 63
    6632:	f6 2e       	mov	r15, r22
    6634:	f8 22       	and	r15, r24
    6636:	95 36       	cpi	r25, 0x65	; 101
    6638:	19 f4       	brne	.+6      	; 0x6640 <vfprintf+0x12e>
    663a:	f0 e4       	ldi	r31, 0x40	; 64
    663c:	ff 2a       	or	r15, r31
    663e:	07 c0       	rjmp	.+14     	; 0x664e <vfprintf+0x13c>
    6640:	96 36       	cpi	r25, 0x66	; 102
    6642:	19 f4       	brne	.+6      	; 0x664a <vfprintf+0x138>
    6644:	20 e8       	ldi	r18, 0x80	; 128
    6646:	f2 2a       	or	r15, r18
    6648:	02 c0       	rjmp	.+4      	; 0x664e <vfprintf+0x13c>
    664a:	91 10       	cpse	r9, r1
    664c:	9a 94       	dec	r9
    664e:	f7 fe       	sbrs	r15, 7
    6650:	0a c0       	rjmp	.+20     	; 0x6666 <vfprintf+0x154>
    6652:	3b e3       	ldi	r19, 0x3B	; 59
    6654:	39 15       	cp	r19, r9
    6656:	18 f4       	brcc	.+6      	; 0x665e <vfprintf+0x14c>
    6658:	5c e3       	ldi	r21, 0x3C	; 60
    665a:	b5 2e       	mov	r11, r21
    665c:	02 c0       	rjmp	.+4      	; 0x6662 <vfprintf+0x150>
    665e:	b9 2c       	mov	r11, r9
    6660:	b3 94       	inc	r11
    6662:	27 e0       	ldi	r18, 0x07	; 7
    6664:	09 c0       	rjmp	.+18     	; 0x6678 <vfprintf+0x166>
    6666:	47 e0       	ldi	r20, 0x07	; 7
    6668:	49 15       	cp	r20, r9
    666a:	20 f4       	brcc	.+8      	; 0x6674 <vfprintf+0x162>
    666c:	bb 24       	eor	r11, r11
    666e:	47 e0       	ldi	r20, 0x07	; 7
    6670:	94 2e       	mov	r9, r20
    6672:	f7 cf       	rjmp	.-18     	; 0x6662 <vfprintf+0x150>
    6674:	29 2d       	mov	r18, r9
    6676:	bb 24       	eor	r11, r11
    6678:	c6 01       	movw	r24, r12
    667a:	04 96       	adiw	r24, 0x04	; 4
    667c:	9d 87       	std	Y+13, r25	; 0x0d
    667e:	8c 87       	std	Y+12, r24	; 0x0c
    6680:	f6 01       	movw	r30, r12
    6682:	60 81       	ld	r22, Z
    6684:	71 81       	ldd	r23, Z+1	; 0x01
    6686:	82 81       	ldd	r24, Z+2	; 0x02
    6688:	93 81       	ldd	r25, Z+3	; 0x03
    668a:	ae 01       	movw	r20, r28
    668c:	4f 5f       	subi	r20, 0xFF	; 255
    668e:	5f 4f       	sbci	r21, 0xFF	; 255
    6690:	0b 2d       	mov	r16, r11
    6692:	24 d4       	rcall	.+2120   	; 0x6edc <__ftoa_engine>
    6694:	6c 01       	movw	r12, r24
    6696:	09 81       	ldd	r16, Y+1	; 0x01
    6698:	20 2e       	mov	r2, r16
    669a:	33 24       	eor	r3, r3
    669c:	00 ff       	sbrs	r16, 0
    669e:	04 c0       	rjmp	.+8      	; 0x66a8 <vfprintf+0x196>
    66a0:	03 fd       	sbrc	r16, 3
    66a2:	02 c0       	rjmp	.+4      	; 0x66a8 <vfprintf+0x196>
    66a4:	1d e2       	ldi	r17, 0x2D	; 45
    66a6:	09 c0       	rjmp	.+18     	; 0x66ba <vfprintf+0x1a8>
    66a8:	f1 fe       	sbrs	r15, 1
    66aa:	02 c0       	rjmp	.+4      	; 0x66b0 <vfprintf+0x19e>
    66ac:	1b e2       	ldi	r17, 0x2B	; 43
    66ae:	05 c0       	rjmp	.+10     	; 0x66ba <vfprintf+0x1a8>
    66b0:	f2 fc       	sbrc	r15, 2
    66b2:	02 c0       	rjmp	.+4      	; 0x66b8 <vfprintf+0x1a6>
    66b4:	10 e0       	ldi	r17, 0x00	; 0
    66b6:	01 c0       	rjmp	.+2      	; 0x66ba <vfprintf+0x1a8>
    66b8:	10 e2       	ldi	r17, 0x20	; 32
    66ba:	c1 01       	movw	r24, r2
    66bc:	8c 70       	andi	r24, 0x0C	; 12
    66be:	90 70       	andi	r25, 0x00	; 0
    66c0:	89 2b       	or	r24, r25
    66c2:	a1 f1       	breq	.+104    	; 0x672c <vfprintf+0x21a>
    66c4:	11 23       	and	r17, r17
    66c6:	11 f4       	brne	.+4      	; 0x66cc <vfprintf+0x1ba>
    66c8:	83 e0       	ldi	r24, 0x03	; 3
    66ca:	01 c0       	rjmp	.+2      	; 0x66ce <vfprintf+0x1bc>
    66cc:	84 e0       	ldi	r24, 0x04	; 4
    66ce:	88 15       	cp	r24, r8
    66d0:	10 f0       	brcs	.+4      	; 0x66d6 <vfprintf+0x1c4>
    66d2:	88 24       	eor	r8, r8
    66d4:	09 c0       	rjmp	.+18     	; 0x66e8 <vfprintf+0x1d6>
    66d6:	88 1a       	sub	r8, r24
    66d8:	f3 fc       	sbrc	r15, 3
    66da:	06 c0       	rjmp	.+12     	; 0x66e8 <vfprintf+0x1d6>
    66dc:	80 e2       	ldi	r24, 0x20	; 32
    66de:	90 e0       	ldi	r25, 0x00	; 0
    66e0:	b3 01       	movw	r22, r6
    66e2:	ea d4       	rcall	.+2516   	; 0x70b8 <fputc>
    66e4:	8a 94       	dec	r8
    66e6:	d1 f7       	brne	.-12     	; 0x66dc <vfprintf+0x1ca>
    66e8:	11 23       	and	r17, r17
    66ea:	21 f0       	breq	.+8      	; 0x66f4 <vfprintf+0x1e2>
    66ec:	81 2f       	mov	r24, r17
    66ee:	90 e0       	ldi	r25, 0x00	; 0
    66f0:	b3 01       	movw	r22, r6
    66f2:	e2 d4       	rcall	.+2500   	; 0x70b8 <fputc>
    66f4:	23 fe       	sbrs	r2, 3
    66f6:	03 c0       	rjmp	.+6      	; 0x66fe <vfprintf+0x1ec>
    66f8:	0f e5       	ldi	r16, 0x5F	; 95
    66fa:	15 e0       	ldi	r17, 0x05	; 5
    66fc:	0d c0       	rjmp	.+26     	; 0x6718 <vfprintf+0x206>
    66fe:	03 e6       	ldi	r16, 0x63	; 99
    6700:	15 e0       	ldi	r17, 0x05	; 5
    6702:	0a c0       	rjmp	.+20     	; 0x6718 <vfprintf+0x206>
    6704:	e1 14       	cp	r14, r1
    6706:	f1 04       	cpc	r15, r1
    6708:	09 f0       	breq	.+2      	; 0x670c <vfprintf+0x1fa>
    670a:	80 52       	subi	r24, 0x20	; 32
    670c:	90 e0       	ldi	r25, 0x00	; 0
    670e:	b3 01       	movw	r22, r6
    6710:	d3 d4       	rcall	.+2470   	; 0x70b8 <fputc>
    6712:	0f 5f       	subi	r16, 0xFF	; 255
    6714:	1f 4f       	sbci	r17, 0xFF	; 255
    6716:	05 c0       	rjmp	.+10     	; 0x6722 <vfprintf+0x210>
    6718:	ef 2c       	mov	r14, r15
    671a:	ff 24       	eor	r15, r15
    671c:	f0 e1       	ldi	r31, 0x10	; 16
    671e:	ef 22       	and	r14, r31
    6720:	ff 24       	eor	r15, r15
    6722:	f8 01       	movw	r30, r16
    6724:	84 91       	lpm	r24, Z+
    6726:	88 23       	and	r24, r24
    6728:	69 f7       	brne	.-38     	; 0x6704 <vfprintf+0x1f2>
    672a:	08 c1       	rjmp	.+528    	; 0x693c <vfprintf+0x42a>
    672c:	f7 fe       	sbrs	r15, 7
    672e:	12 c0       	rjmp	.+36     	; 0x6754 <vfprintf+0x242>
    6730:	bc 0c       	add	r11, r12
    6732:	24 fe       	sbrs	r2, 4
    6734:	04 c0       	rjmp	.+8      	; 0x673e <vfprintf+0x22c>
    6736:	8a 81       	ldd	r24, Y+2	; 0x02
    6738:	81 33       	cpi	r24, 0x31	; 49
    673a:	09 f4       	brne	.+2      	; 0x673e <vfprintf+0x22c>
    673c:	ba 94       	dec	r11
    673e:	1b 14       	cp	r1, r11
    6740:	1c f0       	brlt	.+6      	; 0x6748 <vfprintf+0x236>
    6742:	bb 24       	eor	r11, r11
    6744:	b3 94       	inc	r11
    6746:	2d c0       	rjmp	.+90     	; 0x67a2 <vfprintf+0x290>
    6748:	f8 e0       	ldi	r31, 0x08	; 8
    674a:	fb 15       	cp	r31, r11
    674c:	50 f5       	brcc	.+84     	; 0x67a2 <vfprintf+0x290>
    674e:	38 e0       	ldi	r19, 0x08	; 8
    6750:	b3 2e       	mov	r11, r19
    6752:	27 c0       	rjmp	.+78     	; 0x67a2 <vfprintf+0x290>
    6754:	f6 fc       	sbrc	r15, 6
    6756:	25 c0       	rjmp	.+74     	; 0x67a2 <vfprintf+0x290>
    6758:	89 2d       	mov	r24, r9
    675a:	90 e0       	ldi	r25, 0x00	; 0
    675c:	8c 15       	cp	r24, r12
    675e:	9d 05       	cpc	r25, r13
    6760:	4c f0       	brlt	.+18     	; 0x6774 <vfprintf+0x262>
    6762:	2c ef       	ldi	r18, 0xFC	; 252
    6764:	c2 16       	cp	r12, r18
    6766:	2f ef       	ldi	r18, 0xFF	; 255
    6768:	d2 06       	cpc	r13, r18
    676a:	24 f0       	brlt	.+8      	; 0x6774 <vfprintf+0x262>
    676c:	30 e8       	ldi	r19, 0x80	; 128
    676e:	f3 2a       	or	r15, r19
    6770:	01 c0       	rjmp	.+2      	; 0x6774 <vfprintf+0x262>
    6772:	9a 94       	dec	r9
    6774:	99 20       	and	r9, r9
    6776:	49 f0       	breq	.+18     	; 0x678a <vfprintf+0x278>
    6778:	e2 e0       	ldi	r30, 0x02	; 2
    677a:	f0 e0       	ldi	r31, 0x00	; 0
    677c:	ec 0f       	add	r30, r28
    677e:	fd 1f       	adc	r31, r29
    6780:	e9 0d       	add	r30, r9
    6782:	f1 1d       	adc	r31, r1
    6784:	80 81       	ld	r24, Z
    6786:	80 33       	cpi	r24, 0x30	; 48
    6788:	a1 f3       	breq	.-24     	; 0x6772 <vfprintf+0x260>
    678a:	f7 fe       	sbrs	r15, 7
    678c:	0a c0       	rjmp	.+20     	; 0x67a2 <vfprintf+0x290>
    678e:	b9 2c       	mov	r11, r9
    6790:	b3 94       	inc	r11
    6792:	89 2d       	mov	r24, r9
    6794:	90 e0       	ldi	r25, 0x00	; 0
    6796:	c8 16       	cp	r12, r24
    6798:	d9 06       	cpc	r13, r25
    679a:	14 f0       	brlt	.+4      	; 0x67a0 <vfprintf+0x28e>
    679c:	99 24       	eor	r9, r9
    679e:	01 c0       	rjmp	.+2      	; 0x67a2 <vfprintf+0x290>
    67a0:	9c 18       	sub	r9, r12
    67a2:	f7 fc       	sbrc	r15, 7
    67a4:	03 c0       	rjmp	.+6      	; 0x67ac <vfprintf+0x29a>
    67a6:	25 e0       	ldi	r18, 0x05	; 5
    67a8:	30 e0       	ldi	r19, 0x00	; 0
    67aa:	09 c0       	rjmp	.+18     	; 0x67be <vfprintf+0x2ac>
    67ac:	1c 14       	cp	r1, r12
    67ae:	1d 04       	cpc	r1, r13
    67b0:	1c f0       	brlt	.+6      	; 0x67b8 <vfprintf+0x2a6>
    67b2:	21 e0       	ldi	r18, 0x01	; 1
    67b4:	30 e0       	ldi	r19, 0x00	; 0
    67b6:	03 c0       	rjmp	.+6      	; 0x67be <vfprintf+0x2ac>
    67b8:	96 01       	movw	r18, r12
    67ba:	2f 5f       	subi	r18, 0xFF	; 255
    67bc:	3f 4f       	sbci	r19, 0xFF	; 255
    67be:	11 23       	and	r17, r17
    67c0:	11 f0       	breq	.+4      	; 0x67c6 <vfprintf+0x2b4>
    67c2:	2f 5f       	subi	r18, 0xFF	; 255
    67c4:	3f 4f       	sbci	r19, 0xFF	; 255
    67c6:	99 20       	and	r9, r9
    67c8:	29 f0       	breq	.+10     	; 0x67d4 <vfprintf+0x2c2>
    67ca:	89 2d       	mov	r24, r9
    67cc:	90 e0       	ldi	r25, 0x00	; 0
    67ce:	01 96       	adiw	r24, 0x01	; 1
    67d0:	28 0f       	add	r18, r24
    67d2:	39 1f       	adc	r19, r25
    67d4:	88 2d       	mov	r24, r8
    67d6:	90 e0       	ldi	r25, 0x00	; 0
    67d8:	28 17       	cp	r18, r24
    67da:	39 07       	cpc	r19, r25
    67dc:	14 f0       	brlt	.+4      	; 0x67e2 <vfprintf+0x2d0>
    67de:	88 24       	eor	r8, r8
    67e0:	01 c0       	rjmp	.+2      	; 0x67e4 <vfprintf+0x2d2>
    67e2:	82 1a       	sub	r8, r18
    67e4:	4f 2c       	mov	r4, r15
    67e6:	55 24       	eor	r5, r5
    67e8:	c2 01       	movw	r24, r4
    67ea:	89 70       	andi	r24, 0x09	; 9
    67ec:	90 70       	andi	r25, 0x00	; 0
    67ee:	89 2b       	or	r24, r25
    67f0:	31 f0       	breq	.+12     	; 0x67fe <vfprintf+0x2ec>
    67f2:	07 c0       	rjmp	.+14     	; 0x6802 <vfprintf+0x2f0>
    67f4:	80 e2       	ldi	r24, 0x20	; 32
    67f6:	90 e0       	ldi	r25, 0x00	; 0
    67f8:	b3 01       	movw	r22, r6
    67fa:	5e d4       	rcall	.+2236   	; 0x70b8 <fputc>
    67fc:	8a 94       	dec	r8
    67fe:	88 20       	and	r8, r8
    6800:	c9 f7       	brne	.-14     	; 0x67f4 <vfprintf+0x2e2>
    6802:	11 23       	and	r17, r17
    6804:	21 f0       	breq	.+8      	; 0x680e <vfprintf+0x2fc>
    6806:	81 2f       	mov	r24, r17
    6808:	90 e0       	ldi	r25, 0x00	; 0
    680a:	b3 01       	movw	r22, r6
    680c:	55 d4       	rcall	.+2218   	; 0x70b8 <fputc>
    680e:	43 fe       	sbrs	r4, 3
    6810:	06 c0       	rjmp	.+12     	; 0x681e <vfprintf+0x30c>
    6812:	07 c0       	rjmp	.+14     	; 0x6822 <vfprintf+0x310>
    6814:	80 e3       	ldi	r24, 0x30	; 48
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	b3 01       	movw	r22, r6
    681a:	4e d4       	rcall	.+2204   	; 0x70b8 <fputc>
    681c:	8a 94       	dec	r8
    681e:	88 20       	and	r8, r8
    6820:	c9 f7       	brne	.-14     	; 0x6814 <vfprintf+0x302>
    6822:	f7 fe       	sbrs	r15, 7
    6824:	44 c0       	rjmp	.+136    	; 0x68ae <vfprintf+0x39c>
    6826:	86 01       	movw	r16, r12
    6828:	d7 fe       	sbrs	r13, 7
    682a:	02 c0       	rjmp	.+4      	; 0x6830 <vfprintf+0x31e>
    682c:	00 e0       	ldi	r16, 0x00	; 0
    682e:	10 e0       	ldi	r17, 0x00	; 0
    6830:	76 01       	movw	r14, r12
    6832:	08 94       	sec
    6834:	e1 1c       	adc	r14, r1
    6836:	f1 1c       	adc	r15, r1
    6838:	e0 1a       	sub	r14, r16
    683a:	f1 0a       	sbc	r15, r17
    683c:	41 e0       	ldi	r20, 0x01	; 1
    683e:	50 e0       	ldi	r21, 0x00	; 0
    6840:	4c 0f       	add	r20, r28
    6842:	5d 1f       	adc	r21, r29
    6844:	e4 0e       	add	r14, r20
    6846:	f5 1e       	adc	r15, r21
    6848:	26 01       	movw	r4, r12
    684a:	4b 18       	sub	r4, r11
    684c:	51 08       	sbc	r5, r1
    684e:	89 2d       	mov	r24, r9
    6850:	90 e0       	ldi	r25, 0x00	; 0
    6852:	aa 24       	eor	r10, r10
    6854:	bb 24       	eor	r11, r11
    6856:	a8 1a       	sub	r10, r24
    6858:	b9 0a       	sbc	r11, r25
    685a:	5f ef       	ldi	r21, 0xFF	; 255
    685c:	0f 3f       	cpi	r16, 0xFF	; 255
    685e:	15 07       	cpc	r17, r21
    6860:	21 f4       	brne	.+8      	; 0x686a <vfprintf+0x358>
    6862:	8e e2       	ldi	r24, 0x2E	; 46
    6864:	90 e0       	ldi	r25, 0x00	; 0
    6866:	b3 01       	movw	r22, r6
    6868:	27 d4       	rcall	.+2126   	; 0x70b8 <fputc>
    686a:	c0 16       	cp	r12, r16
    686c:	d1 06       	cpc	r13, r17
    686e:	34 f0       	brlt	.+12     	; 0x687c <vfprintf+0x36a>
    6870:	40 16       	cp	r4, r16
    6872:	51 06       	cpc	r5, r17
    6874:	1c f4       	brge	.+6      	; 0x687c <vfprintf+0x36a>
    6876:	f7 01       	movw	r30, r14
    6878:	80 81       	ld	r24, Z
    687a:	01 c0       	rjmp	.+2      	; 0x687e <vfprintf+0x36c>
    687c:	80 e3       	ldi	r24, 0x30	; 48
    687e:	01 50       	subi	r16, 0x01	; 1
    6880:	10 40       	sbci	r17, 0x00	; 0
    6882:	08 94       	sec
    6884:	e1 1c       	adc	r14, r1
    6886:	f1 1c       	adc	r15, r1
    6888:	0a 15       	cp	r16, r10
    688a:	1b 05       	cpc	r17, r11
    688c:	24 f0       	brlt	.+8      	; 0x6896 <vfprintf+0x384>
    688e:	90 e0       	ldi	r25, 0x00	; 0
    6890:	b3 01       	movw	r22, r6
    6892:	12 d4       	rcall	.+2084   	; 0x70b8 <fputc>
    6894:	e2 cf       	rjmp	.-60     	; 0x685a <vfprintf+0x348>
    6896:	0c 15       	cp	r16, r12
    6898:	1d 05       	cpc	r17, r13
    689a:	39 f4       	brne	.+14     	; 0x68aa <vfprintf+0x398>
    689c:	9a 81       	ldd	r25, Y+2	; 0x02
    689e:	96 33       	cpi	r25, 0x36	; 54
    68a0:	18 f4       	brcc	.+6      	; 0x68a8 <vfprintf+0x396>
    68a2:	95 33       	cpi	r25, 0x35	; 53
    68a4:	11 f4       	brne	.+4      	; 0x68aa <vfprintf+0x398>
    68a6:	24 fe       	sbrs	r2, 4
    68a8:	81 e3       	ldi	r24, 0x31	; 49
    68aa:	90 e0       	ldi	r25, 0x00	; 0
    68ac:	45 c0       	rjmp	.+138    	; 0x6938 <vfprintf+0x426>
    68ae:	8a 81       	ldd	r24, Y+2	; 0x02
    68b0:	81 33       	cpi	r24, 0x31	; 49
    68b2:	09 f0       	breq	.+2      	; 0x68b6 <vfprintf+0x3a4>
    68b4:	0f 7e       	andi	r16, 0xEF	; 239
    68b6:	90 e0       	ldi	r25, 0x00	; 0
    68b8:	b3 01       	movw	r22, r6
    68ba:	fe d3       	rcall	.+2044   	; 0x70b8 <fputc>
    68bc:	99 20       	and	r9, r9
    68be:	91 f0       	breq	.+36     	; 0x68e4 <vfprintf+0x3d2>
    68c0:	8e e2       	ldi	r24, 0x2E	; 46
    68c2:	90 e0       	ldi	r25, 0x00	; 0
    68c4:	b3 01       	movw	r22, r6
    68c6:	f8 d3       	rcall	.+2032   	; 0x70b8 <fputc>
    68c8:	12 e0       	ldi	r17, 0x02	; 2
    68ca:	e1 e0       	ldi	r30, 0x01	; 1
    68cc:	f0 e0       	ldi	r31, 0x00	; 0
    68ce:	ec 0f       	add	r30, r28
    68d0:	fd 1f       	adc	r31, r29
    68d2:	e1 0f       	add	r30, r17
    68d4:	f1 1d       	adc	r31, r1
    68d6:	1f 5f       	subi	r17, 0xFF	; 255
    68d8:	80 81       	ld	r24, Z
    68da:	90 e0       	ldi	r25, 0x00	; 0
    68dc:	b3 01       	movw	r22, r6
    68de:	ec d3       	rcall	.+2008   	; 0x70b8 <fputc>
    68e0:	9a 94       	dec	r9
    68e2:	99 f7       	brne	.-26     	; 0x68ca <vfprintf+0x3b8>
    68e4:	44 fc       	sbrc	r4, 4
    68e6:	03 c0       	rjmp	.+6      	; 0x68ee <vfprintf+0x3dc>
    68e8:	85 e6       	ldi	r24, 0x65	; 101
    68ea:	90 e0       	ldi	r25, 0x00	; 0
    68ec:	02 c0       	rjmp	.+4      	; 0x68f2 <vfprintf+0x3e0>
    68ee:	85 e4       	ldi	r24, 0x45	; 69
    68f0:	90 e0       	ldi	r25, 0x00	; 0
    68f2:	b3 01       	movw	r22, r6
    68f4:	e1 d3       	rcall	.+1986   	; 0x70b8 <fputc>
    68f6:	d7 fc       	sbrc	r13, 7
    68f8:	05 c0       	rjmp	.+10     	; 0x6904 <vfprintf+0x3f2>
    68fa:	c1 14       	cp	r12, r1
    68fc:	d1 04       	cpc	r13, r1
    68fe:	41 f4       	brne	.+16     	; 0x6910 <vfprintf+0x3fe>
    6900:	04 ff       	sbrs	r16, 4
    6902:	06 c0       	rjmp	.+12     	; 0x6910 <vfprintf+0x3fe>
    6904:	d0 94       	com	r13
    6906:	c1 94       	neg	r12
    6908:	d1 08       	sbc	r13, r1
    690a:	d3 94       	inc	r13
    690c:	8d e2       	ldi	r24, 0x2D	; 45
    690e:	01 c0       	rjmp	.+2      	; 0x6912 <vfprintf+0x400>
    6910:	8b e2       	ldi	r24, 0x2B	; 43
    6912:	90 e0       	ldi	r25, 0x00	; 0
    6914:	b3 01       	movw	r22, r6
    6916:	d0 d3       	rcall	.+1952   	; 0x70b8 <fputc>
    6918:	80 e3       	ldi	r24, 0x30	; 48
    691a:	05 c0       	rjmp	.+10     	; 0x6926 <vfprintf+0x414>
    691c:	8f 5f       	subi	r24, 0xFF	; 255
    691e:	26 ef       	ldi	r18, 0xF6	; 246
    6920:	3f ef       	ldi	r19, 0xFF	; 255
    6922:	c2 0e       	add	r12, r18
    6924:	d3 1e       	adc	r13, r19
    6926:	3a e0       	ldi	r19, 0x0A	; 10
    6928:	c3 16       	cp	r12, r19
    692a:	d1 04       	cpc	r13, r1
    692c:	bc f7       	brge	.-18     	; 0x691c <vfprintf+0x40a>
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	b3 01       	movw	r22, r6
    6932:	c2 d3       	rcall	.+1924   	; 0x70b8 <fputc>
    6934:	c6 01       	movw	r24, r12
    6936:	c0 96       	adiw	r24, 0x30	; 48
    6938:	b3 01       	movw	r22, r6
    693a:	be d3       	rcall	.+1916   	; 0x70b8 <fputc>
    693c:	cc 84       	ldd	r12, Y+12	; 0x0c
    693e:	dd 84       	ldd	r13, Y+13	; 0x0d
    6940:	46 c1       	rjmp	.+652    	; 0x6bce <vfprintf+0x6bc>
    6942:	93 36       	cpi	r25, 0x63	; 99
    6944:	31 f0       	breq	.+12     	; 0x6952 <vfprintf+0x440>
    6946:	93 37       	cpi	r25, 0x73	; 115
    6948:	99 f0       	breq	.+38     	; 0x6970 <vfprintf+0x45e>
    694a:	93 35       	cpi	r25, 0x53	; 83
    694c:	09 f0       	breq	.+2      	; 0x6950 <vfprintf+0x43e>
    694e:	55 c0       	rjmp	.+170    	; 0x69fa <vfprintf+0x4e8>
    6950:	22 c0       	rjmp	.+68     	; 0x6996 <vfprintf+0x484>
    6952:	f6 01       	movw	r30, r12
    6954:	80 81       	ld	r24, Z
    6956:	89 83       	std	Y+1, r24	; 0x01
    6958:	5e 01       	movw	r10, r28
    695a:	08 94       	sec
    695c:	a1 1c       	adc	r10, r1
    695e:	b1 1c       	adc	r11, r1
    6960:	22 e0       	ldi	r18, 0x02	; 2
    6962:	30 e0       	ldi	r19, 0x00	; 0
    6964:	c2 0e       	add	r12, r18
    6966:	d3 1e       	adc	r13, r19
    6968:	21 e0       	ldi	r18, 0x01	; 1
    696a:	e2 2e       	mov	r14, r18
    696c:	f1 2c       	mov	r15, r1
    696e:	11 c0       	rjmp	.+34     	; 0x6992 <vfprintf+0x480>
    6970:	f6 01       	movw	r30, r12
    6972:	a0 80       	ld	r10, Z
    6974:	b1 80       	ldd	r11, Z+1	; 0x01
    6976:	16 fd       	sbrc	r17, 6
    6978:	03 c0       	rjmp	.+6      	; 0x6980 <vfprintf+0x46e>
    697a:	6f ef       	ldi	r22, 0xFF	; 255
    697c:	7f ef       	ldi	r23, 0xFF	; 255
    697e:	02 c0       	rjmp	.+4      	; 0x6984 <vfprintf+0x472>
    6980:	69 2d       	mov	r22, r9
    6982:	70 e0       	ldi	r23, 0x00	; 0
    6984:	22 e0       	ldi	r18, 0x02	; 2
    6986:	30 e0       	ldi	r19, 0x00	; 0
    6988:	c2 0e       	add	r12, r18
    698a:	d3 1e       	adc	r13, r19
    698c:	c5 01       	movw	r24, r10
    698e:	89 d3       	rcall	.+1810   	; 0x70a2 <strnlen>
    6990:	7c 01       	movw	r14, r24
    6992:	1f 77       	andi	r17, 0x7F	; 127
    6994:	12 c0       	rjmp	.+36     	; 0x69ba <vfprintf+0x4a8>
    6996:	f6 01       	movw	r30, r12
    6998:	a0 80       	ld	r10, Z
    699a:	b1 80       	ldd	r11, Z+1	; 0x01
    699c:	16 fd       	sbrc	r17, 6
    699e:	03 c0       	rjmp	.+6      	; 0x69a6 <vfprintf+0x494>
    69a0:	6f ef       	ldi	r22, 0xFF	; 255
    69a2:	7f ef       	ldi	r23, 0xFF	; 255
    69a4:	02 c0       	rjmp	.+4      	; 0x69aa <vfprintf+0x498>
    69a6:	69 2d       	mov	r22, r9
    69a8:	70 e0       	ldi	r23, 0x00	; 0
    69aa:	22 e0       	ldi	r18, 0x02	; 2
    69ac:	30 e0       	ldi	r19, 0x00	; 0
    69ae:	c2 0e       	add	r12, r18
    69b0:	d3 1e       	adc	r13, r19
    69b2:	c5 01       	movw	r24, r10
    69b4:	6b d3       	rcall	.+1750   	; 0x708c <strnlen_P>
    69b6:	7c 01       	movw	r14, r24
    69b8:	10 68       	ori	r17, 0x80	; 128
    69ba:	13 ff       	sbrs	r17, 3
    69bc:	06 c0       	rjmp	.+12     	; 0x69ca <vfprintf+0x4b8>
    69be:	19 c0       	rjmp	.+50     	; 0x69f2 <vfprintf+0x4e0>
    69c0:	80 e2       	ldi	r24, 0x20	; 32
    69c2:	90 e0       	ldi	r25, 0x00	; 0
    69c4:	b3 01       	movw	r22, r6
    69c6:	78 d3       	rcall	.+1776   	; 0x70b8 <fputc>
    69c8:	8a 94       	dec	r8
    69ca:	88 2d       	mov	r24, r8
    69cc:	90 e0       	ldi	r25, 0x00	; 0
    69ce:	e8 16       	cp	r14, r24
    69d0:	f9 06       	cpc	r15, r25
    69d2:	b0 f3       	brcs	.-20     	; 0x69c0 <vfprintf+0x4ae>
    69d4:	0e c0       	rjmp	.+28     	; 0x69f2 <vfprintf+0x4e0>
    69d6:	f5 01       	movw	r30, r10
    69d8:	17 fd       	sbrc	r17, 7
    69da:	85 91       	lpm	r24, Z+
    69dc:	17 ff       	sbrs	r17, 7
    69de:	81 91       	ld	r24, Z+
    69e0:	5f 01       	movw	r10, r30
    69e2:	90 e0       	ldi	r25, 0x00	; 0
    69e4:	b3 01       	movw	r22, r6
    69e6:	68 d3       	rcall	.+1744   	; 0x70b8 <fputc>
    69e8:	81 10       	cpse	r8, r1
    69ea:	8a 94       	dec	r8
    69ec:	08 94       	sec
    69ee:	e1 08       	sbc	r14, r1
    69f0:	f1 08       	sbc	r15, r1
    69f2:	e1 14       	cp	r14, r1
    69f4:	f1 04       	cpc	r15, r1
    69f6:	79 f7       	brne	.-34     	; 0x69d6 <vfprintf+0x4c4>
    69f8:	ea c0       	rjmp	.+468    	; 0x6bce <vfprintf+0x6bc>
    69fa:	94 36       	cpi	r25, 0x64	; 100
    69fc:	11 f0       	breq	.+4      	; 0x6a02 <vfprintf+0x4f0>
    69fe:	99 36       	cpi	r25, 0x69	; 105
    6a00:	81 f5       	brne	.+96     	; 0x6a62 <vfprintf+0x550>
    6a02:	17 ff       	sbrs	r17, 7
    6a04:	08 c0       	rjmp	.+16     	; 0x6a16 <vfprintf+0x504>
    6a06:	f6 01       	movw	r30, r12
    6a08:	20 81       	ld	r18, Z
    6a0a:	31 81       	ldd	r19, Z+1	; 0x01
    6a0c:	42 81       	ldd	r20, Z+2	; 0x02
    6a0e:	53 81       	ldd	r21, Z+3	; 0x03
    6a10:	84 e0       	ldi	r24, 0x04	; 4
    6a12:	90 e0       	ldi	r25, 0x00	; 0
    6a14:	0a c0       	rjmp	.+20     	; 0x6a2a <vfprintf+0x518>
    6a16:	f6 01       	movw	r30, r12
    6a18:	80 81       	ld	r24, Z
    6a1a:	91 81       	ldd	r25, Z+1	; 0x01
    6a1c:	9c 01       	movw	r18, r24
    6a1e:	44 27       	eor	r20, r20
    6a20:	37 fd       	sbrc	r19, 7
    6a22:	40 95       	com	r20
    6a24:	54 2f       	mov	r21, r20
    6a26:	82 e0       	ldi	r24, 0x02	; 2
    6a28:	90 e0       	ldi	r25, 0x00	; 0
    6a2a:	c8 0e       	add	r12, r24
    6a2c:	d9 1e       	adc	r13, r25
    6a2e:	9f e6       	ldi	r25, 0x6F	; 111
    6a30:	f9 2e       	mov	r15, r25
    6a32:	f1 22       	and	r15, r17
    6a34:	57 ff       	sbrs	r21, 7
    6a36:	09 c0       	rjmp	.+18     	; 0x6a4a <vfprintf+0x538>
    6a38:	50 95       	com	r21
    6a3a:	40 95       	com	r20
    6a3c:	30 95       	com	r19
    6a3e:	21 95       	neg	r18
    6a40:	3f 4f       	sbci	r19, 0xFF	; 255
    6a42:	4f 4f       	sbci	r20, 0xFF	; 255
    6a44:	5f 4f       	sbci	r21, 0xFF	; 255
    6a46:	90 e8       	ldi	r25, 0x80	; 128
    6a48:	f9 2a       	or	r15, r25
    6a4a:	ca 01       	movw	r24, r20
    6a4c:	b9 01       	movw	r22, r18
    6a4e:	ae 01       	movw	r20, r28
    6a50:	4f 5f       	subi	r20, 0xFF	; 255
    6a52:	5f 4f       	sbci	r21, 0xFF	; 255
    6a54:	2a e0       	ldi	r18, 0x0A	; 10
    6a56:	30 e0       	ldi	r19, 0x00	; 0
    6a58:	a2 d3       	rcall	.+1860   	; 0x719e <__ultoa_invert>
    6a5a:	e8 2e       	mov	r14, r24
    6a5c:	e8 89       	ldd	r30, Y+16	; 0x10
    6a5e:	ee 1a       	sub	r14, r30
    6a60:	40 c0       	rjmp	.+128    	; 0x6ae2 <vfprintf+0x5d0>
    6a62:	95 37       	cpi	r25, 0x75	; 117
    6a64:	21 f4       	brne	.+8      	; 0x6a6e <vfprintf+0x55c>
    6a66:	1f 7e       	andi	r17, 0xEF	; 239
    6a68:	2a e0       	ldi	r18, 0x0A	; 10
    6a6a:	30 e0       	ldi	r19, 0x00	; 0
    6a6c:	1c c0       	rjmp	.+56     	; 0x6aa6 <vfprintf+0x594>
    6a6e:	19 7f       	andi	r17, 0xF9	; 249
    6a70:	9f 36       	cpi	r25, 0x6F	; 111
    6a72:	61 f0       	breq	.+24     	; 0x6a8c <vfprintf+0x57a>
    6a74:	90 37       	cpi	r25, 0x70	; 112
    6a76:	20 f4       	brcc	.+8      	; 0x6a80 <vfprintf+0x56e>
    6a78:	98 35       	cpi	r25, 0x58	; 88
    6a7a:	09 f0       	breq	.+2      	; 0x6a7e <vfprintf+0x56c>
    6a7c:	ab c0       	rjmp	.+342    	; 0x6bd4 <vfprintf+0x6c2>
    6a7e:	0f c0       	rjmp	.+30     	; 0x6a9e <vfprintf+0x58c>
    6a80:	90 37       	cpi	r25, 0x70	; 112
    6a82:	39 f0       	breq	.+14     	; 0x6a92 <vfprintf+0x580>
    6a84:	98 37       	cpi	r25, 0x78	; 120
    6a86:	09 f0       	breq	.+2      	; 0x6a8a <vfprintf+0x578>
    6a88:	a5 c0       	rjmp	.+330    	; 0x6bd4 <vfprintf+0x6c2>
    6a8a:	04 c0       	rjmp	.+8      	; 0x6a94 <vfprintf+0x582>
    6a8c:	28 e0       	ldi	r18, 0x08	; 8
    6a8e:	30 e0       	ldi	r19, 0x00	; 0
    6a90:	0a c0       	rjmp	.+20     	; 0x6aa6 <vfprintf+0x594>
    6a92:	10 61       	ori	r17, 0x10	; 16
    6a94:	14 fd       	sbrc	r17, 4
    6a96:	14 60       	ori	r17, 0x04	; 4
    6a98:	20 e1       	ldi	r18, 0x10	; 16
    6a9a:	30 e0       	ldi	r19, 0x00	; 0
    6a9c:	04 c0       	rjmp	.+8      	; 0x6aa6 <vfprintf+0x594>
    6a9e:	14 fd       	sbrc	r17, 4
    6aa0:	16 60       	ori	r17, 0x06	; 6
    6aa2:	20 e1       	ldi	r18, 0x10	; 16
    6aa4:	32 e0       	ldi	r19, 0x02	; 2
    6aa6:	17 ff       	sbrs	r17, 7
    6aa8:	08 c0       	rjmp	.+16     	; 0x6aba <vfprintf+0x5a8>
    6aaa:	f6 01       	movw	r30, r12
    6aac:	60 81       	ld	r22, Z
    6aae:	71 81       	ldd	r23, Z+1	; 0x01
    6ab0:	82 81       	ldd	r24, Z+2	; 0x02
    6ab2:	93 81       	ldd	r25, Z+3	; 0x03
    6ab4:	44 e0       	ldi	r20, 0x04	; 4
    6ab6:	50 e0       	ldi	r21, 0x00	; 0
    6ab8:	08 c0       	rjmp	.+16     	; 0x6aca <vfprintf+0x5b8>
    6aba:	f6 01       	movw	r30, r12
    6abc:	80 81       	ld	r24, Z
    6abe:	91 81       	ldd	r25, Z+1	; 0x01
    6ac0:	bc 01       	movw	r22, r24
    6ac2:	80 e0       	ldi	r24, 0x00	; 0
    6ac4:	90 e0       	ldi	r25, 0x00	; 0
    6ac6:	42 e0       	ldi	r20, 0x02	; 2
    6ac8:	50 e0       	ldi	r21, 0x00	; 0
    6aca:	c4 0e       	add	r12, r20
    6acc:	d5 1e       	adc	r13, r21
    6ace:	ae 01       	movw	r20, r28
    6ad0:	4f 5f       	subi	r20, 0xFF	; 255
    6ad2:	5f 4f       	sbci	r21, 0xFF	; 255
    6ad4:	64 d3       	rcall	.+1736   	; 0x719e <__ultoa_invert>
    6ad6:	e8 2e       	mov	r14, r24
    6ad8:	58 89       	ldd	r21, Y+16	; 0x10
    6ada:	e5 1a       	sub	r14, r21
    6adc:	8f e7       	ldi	r24, 0x7F	; 127
    6ade:	f8 2e       	mov	r15, r24
    6ae0:	f1 22       	and	r15, r17
    6ae2:	f6 fe       	sbrs	r15, 6
    6ae4:	0b c0       	rjmp	.+22     	; 0x6afc <vfprintf+0x5ea>
    6ae6:	8e ef       	ldi	r24, 0xFE	; 254
    6ae8:	f8 22       	and	r15, r24
    6aea:	e9 14       	cp	r14, r9
    6aec:	38 f4       	brcc	.+14     	; 0x6afc <vfprintf+0x5ea>
    6aee:	f4 fe       	sbrs	r15, 4
    6af0:	07 c0       	rjmp	.+14     	; 0x6b00 <vfprintf+0x5ee>
    6af2:	f2 fc       	sbrc	r15, 2
    6af4:	05 c0       	rjmp	.+10     	; 0x6b00 <vfprintf+0x5ee>
    6af6:	9f ee       	ldi	r25, 0xEF	; 239
    6af8:	f9 22       	and	r15, r25
    6afa:	02 c0       	rjmp	.+4      	; 0x6b00 <vfprintf+0x5ee>
    6afc:	1e 2d       	mov	r17, r14
    6afe:	01 c0       	rjmp	.+2      	; 0x6b02 <vfprintf+0x5f0>
    6b00:	19 2d       	mov	r17, r9
    6b02:	f4 fe       	sbrs	r15, 4
    6b04:	0d c0       	rjmp	.+26     	; 0x6b20 <vfprintf+0x60e>
    6b06:	fe 01       	movw	r30, r28
    6b08:	ee 0d       	add	r30, r14
    6b0a:	f1 1d       	adc	r31, r1
    6b0c:	80 81       	ld	r24, Z
    6b0e:	80 33       	cpi	r24, 0x30	; 48
    6b10:	19 f4       	brne	.+6      	; 0x6b18 <vfprintf+0x606>
    6b12:	e9 ee       	ldi	r30, 0xE9	; 233
    6b14:	fe 22       	and	r15, r30
    6b16:	08 c0       	rjmp	.+16     	; 0x6b28 <vfprintf+0x616>
    6b18:	1f 5f       	subi	r17, 0xFF	; 255
    6b1a:	f2 fe       	sbrs	r15, 2
    6b1c:	05 c0       	rjmp	.+10     	; 0x6b28 <vfprintf+0x616>
    6b1e:	03 c0       	rjmp	.+6      	; 0x6b26 <vfprintf+0x614>
    6b20:	8f 2d       	mov	r24, r15
    6b22:	86 78       	andi	r24, 0x86	; 134
    6b24:	09 f0       	breq	.+2      	; 0x6b28 <vfprintf+0x616>
    6b26:	1f 5f       	subi	r17, 0xFF	; 255
    6b28:	0f 2d       	mov	r16, r15
    6b2a:	f3 fc       	sbrc	r15, 3
    6b2c:	13 c0       	rjmp	.+38     	; 0x6b54 <vfprintf+0x642>
    6b2e:	f0 fe       	sbrs	r15, 0
    6b30:	0e c0       	rjmp	.+28     	; 0x6b4e <vfprintf+0x63c>
    6b32:	18 15       	cp	r17, r8
    6b34:	10 f0       	brcs	.+4      	; 0x6b3a <vfprintf+0x628>
    6b36:	9e 2c       	mov	r9, r14
    6b38:	0a c0       	rjmp	.+20     	; 0x6b4e <vfprintf+0x63c>
    6b3a:	9e 2c       	mov	r9, r14
    6b3c:	98 0c       	add	r9, r8
    6b3e:	91 1a       	sub	r9, r17
    6b40:	18 2d       	mov	r17, r8
    6b42:	05 c0       	rjmp	.+10     	; 0x6b4e <vfprintf+0x63c>
    6b44:	80 e2       	ldi	r24, 0x20	; 32
    6b46:	90 e0       	ldi	r25, 0x00	; 0
    6b48:	b3 01       	movw	r22, r6
    6b4a:	b6 d2       	rcall	.+1388   	; 0x70b8 <fputc>
    6b4c:	1f 5f       	subi	r17, 0xFF	; 255
    6b4e:	18 15       	cp	r17, r8
    6b50:	c8 f3       	brcs	.-14     	; 0x6b44 <vfprintf+0x632>
    6b52:	04 c0       	rjmp	.+8      	; 0x6b5c <vfprintf+0x64a>
    6b54:	18 15       	cp	r17, r8
    6b56:	10 f4       	brcc	.+4      	; 0x6b5c <vfprintf+0x64a>
    6b58:	81 1a       	sub	r8, r17
    6b5a:	01 c0       	rjmp	.+2      	; 0x6b5e <vfprintf+0x64c>
    6b5c:	88 24       	eor	r8, r8
    6b5e:	04 ff       	sbrs	r16, 4
    6b60:	0e c0       	rjmp	.+28     	; 0x6b7e <vfprintf+0x66c>
    6b62:	80 e3       	ldi	r24, 0x30	; 48
    6b64:	90 e0       	ldi	r25, 0x00	; 0
    6b66:	b3 01       	movw	r22, r6
    6b68:	a7 d2       	rcall	.+1358   	; 0x70b8 <fputc>
    6b6a:	02 ff       	sbrs	r16, 2
    6b6c:	1b c0       	rjmp	.+54     	; 0x6ba4 <vfprintf+0x692>
    6b6e:	01 fd       	sbrc	r16, 1
    6b70:	03 c0       	rjmp	.+6      	; 0x6b78 <vfprintf+0x666>
    6b72:	88 e7       	ldi	r24, 0x78	; 120
    6b74:	90 e0       	ldi	r25, 0x00	; 0
    6b76:	0e c0       	rjmp	.+28     	; 0x6b94 <vfprintf+0x682>
    6b78:	88 e5       	ldi	r24, 0x58	; 88
    6b7a:	90 e0       	ldi	r25, 0x00	; 0
    6b7c:	0b c0       	rjmp	.+22     	; 0x6b94 <vfprintf+0x682>
    6b7e:	80 2f       	mov	r24, r16
    6b80:	86 78       	andi	r24, 0x86	; 134
    6b82:	81 f0       	breq	.+32     	; 0x6ba4 <vfprintf+0x692>
    6b84:	01 ff       	sbrs	r16, 1
    6b86:	02 c0       	rjmp	.+4      	; 0x6b8c <vfprintf+0x67a>
    6b88:	8b e2       	ldi	r24, 0x2B	; 43
    6b8a:	01 c0       	rjmp	.+2      	; 0x6b8e <vfprintf+0x67c>
    6b8c:	80 e2       	ldi	r24, 0x20	; 32
    6b8e:	f7 fc       	sbrc	r15, 7
    6b90:	8d e2       	ldi	r24, 0x2D	; 45
    6b92:	90 e0       	ldi	r25, 0x00	; 0
    6b94:	b3 01       	movw	r22, r6
    6b96:	90 d2       	rcall	.+1312   	; 0x70b8 <fputc>
    6b98:	05 c0       	rjmp	.+10     	; 0x6ba4 <vfprintf+0x692>
    6b9a:	80 e3       	ldi	r24, 0x30	; 48
    6b9c:	90 e0       	ldi	r25, 0x00	; 0
    6b9e:	b3 01       	movw	r22, r6
    6ba0:	8b d2       	rcall	.+1302   	; 0x70b8 <fputc>
    6ba2:	9a 94       	dec	r9
    6ba4:	e9 14       	cp	r14, r9
    6ba6:	c8 f3       	brcs	.-14     	; 0x6b9a <vfprintf+0x688>
    6ba8:	ea 94       	dec	r14
    6baa:	e1 e0       	ldi	r30, 0x01	; 1
    6bac:	f0 e0       	ldi	r31, 0x00	; 0
    6bae:	ec 0f       	add	r30, r28
    6bb0:	fd 1f       	adc	r31, r29
    6bb2:	ee 0d       	add	r30, r14
    6bb4:	f1 1d       	adc	r31, r1
    6bb6:	80 81       	ld	r24, Z
    6bb8:	90 e0       	ldi	r25, 0x00	; 0
    6bba:	b3 01       	movw	r22, r6
    6bbc:	7d d2       	rcall	.+1274   	; 0x70b8 <fputc>
    6bbe:	ee 20       	and	r14, r14
    6bc0:	99 f7       	brne	.-26     	; 0x6ba8 <vfprintf+0x696>
    6bc2:	05 c0       	rjmp	.+10     	; 0x6bce <vfprintf+0x6bc>
    6bc4:	80 e2       	ldi	r24, 0x20	; 32
    6bc6:	90 e0       	ldi	r25, 0x00	; 0
    6bc8:	b3 01       	movw	r22, r6
    6bca:	76 d2       	rcall	.+1260   	; 0x70b8 <fputc>
    6bcc:	8a 94       	dec	r8
    6bce:	88 20       	and	r8, r8
    6bd0:	c9 f7       	brne	.-14     	; 0x6bc4 <vfprintf+0x6b2>
    6bd2:	b6 cc       	rjmp	.-1684   	; 0x6540 <vfprintf+0x2e>
    6bd4:	f3 01       	movw	r30, r6
    6bd6:	66 81       	ldd	r22, Z+6	; 0x06
    6bd8:	77 81       	ldd	r23, Z+7	; 0x07
    6bda:	cb 01       	movw	r24, r22
    6bdc:	61 96       	adiw	r28, 0x11	; 17
    6bde:	e2 e1       	ldi	r30, 0x12	; 18
    6be0:	5d c0       	rjmp	.+186    	; 0x6c9c <__epilogue_restores__>

00006be2 <__mulsi3>:
    6be2:	62 9f       	mul	r22, r18
    6be4:	d0 01       	movw	r26, r0
    6be6:	73 9f       	mul	r23, r19
    6be8:	f0 01       	movw	r30, r0
    6bea:	82 9f       	mul	r24, r18
    6bec:	e0 0d       	add	r30, r0
    6bee:	f1 1d       	adc	r31, r1
    6bf0:	64 9f       	mul	r22, r20
    6bf2:	e0 0d       	add	r30, r0
    6bf4:	f1 1d       	adc	r31, r1
    6bf6:	92 9f       	mul	r25, r18
    6bf8:	f0 0d       	add	r31, r0
    6bfa:	83 9f       	mul	r24, r19
    6bfc:	f0 0d       	add	r31, r0
    6bfe:	74 9f       	mul	r23, r20
    6c00:	f0 0d       	add	r31, r0
    6c02:	65 9f       	mul	r22, r21
    6c04:	f0 0d       	add	r31, r0
    6c06:	99 27       	eor	r25, r25
    6c08:	72 9f       	mul	r23, r18
    6c0a:	b0 0d       	add	r27, r0
    6c0c:	e1 1d       	adc	r30, r1
    6c0e:	f9 1f       	adc	r31, r25
    6c10:	63 9f       	mul	r22, r19
    6c12:	b0 0d       	add	r27, r0
    6c14:	e1 1d       	adc	r30, r1
    6c16:	f9 1f       	adc	r31, r25
    6c18:	bd 01       	movw	r22, r26
    6c1a:	cf 01       	movw	r24, r30
    6c1c:	11 24       	eor	r1, r1
    6c1e:	08 95       	ret

00006c20 <__udivmodsi4>:
    6c20:	a1 e2       	ldi	r26, 0x21	; 33
    6c22:	1a 2e       	mov	r1, r26
    6c24:	aa 1b       	sub	r26, r26
    6c26:	bb 1b       	sub	r27, r27
    6c28:	fd 01       	movw	r30, r26
    6c2a:	0d c0       	rjmp	.+26     	; 0x6c46 <__udivmodsi4_ep>

00006c2c <__udivmodsi4_loop>:
    6c2c:	aa 1f       	adc	r26, r26
    6c2e:	bb 1f       	adc	r27, r27
    6c30:	ee 1f       	adc	r30, r30
    6c32:	ff 1f       	adc	r31, r31
    6c34:	a2 17       	cp	r26, r18
    6c36:	b3 07       	cpc	r27, r19
    6c38:	e4 07       	cpc	r30, r20
    6c3a:	f5 07       	cpc	r31, r21
    6c3c:	20 f0       	brcs	.+8      	; 0x6c46 <__udivmodsi4_ep>
    6c3e:	a2 1b       	sub	r26, r18
    6c40:	b3 0b       	sbc	r27, r19
    6c42:	e4 0b       	sbc	r30, r20
    6c44:	f5 0b       	sbc	r31, r21

00006c46 <__udivmodsi4_ep>:
    6c46:	66 1f       	adc	r22, r22
    6c48:	77 1f       	adc	r23, r23
    6c4a:	88 1f       	adc	r24, r24
    6c4c:	99 1f       	adc	r25, r25
    6c4e:	1a 94       	dec	r1
    6c50:	69 f7       	brne	.-38     	; 0x6c2c <__udivmodsi4_loop>
    6c52:	60 95       	com	r22
    6c54:	70 95       	com	r23
    6c56:	80 95       	com	r24
    6c58:	90 95       	com	r25
    6c5a:	9b 01       	movw	r18, r22
    6c5c:	ac 01       	movw	r20, r24
    6c5e:	bd 01       	movw	r22, r26
    6c60:	cf 01       	movw	r24, r30
    6c62:	08 95       	ret

00006c64 <__prologue_saves__>:
    6c64:	2f 92       	push	r2
    6c66:	3f 92       	push	r3
    6c68:	4f 92       	push	r4
    6c6a:	5f 92       	push	r5
    6c6c:	6f 92       	push	r6
    6c6e:	7f 92       	push	r7
    6c70:	8f 92       	push	r8
    6c72:	9f 92       	push	r9
    6c74:	af 92       	push	r10
    6c76:	bf 92       	push	r11
    6c78:	cf 92       	push	r12
    6c7a:	df 92       	push	r13
    6c7c:	ef 92       	push	r14
    6c7e:	ff 92       	push	r15
    6c80:	0f 93       	push	r16
    6c82:	1f 93       	push	r17
    6c84:	cf 93       	push	r28
    6c86:	df 93       	push	r29
    6c88:	cd b7       	in	r28, 0x3d	; 61
    6c8a:	de b7       	in	r29, 0x3e	; 62
    6c8c:	ca 1b       	sub	r28, r26
    6c8e:	db 0b       	sbc	r29, r27
    6c90:	0f b6       	in	r0, 0x3f	; 63
    6c92:	f8 94       	cli
    6c94:	de bf       	out	0x3e, r29	; 62
    6c96:	0f be       	out	0x3f, r0	; 63
    6c98:	cd bf       	out	0x3d, r28	; 61
    6c9a:	09 94       	ijmp

00006c9c <__epilogue_restores__>:
    6c9c:	2a 88       	ldd	r2, Y+18	; 0x12
    6c9e:	39 88       	ldd	r3, Y+17	; 0x11
    6ca0:	48 88       	ldd	r4, Y+16	; 0x10
    6ca2:	5f 84       	ldd	r5, Y+15	; 0x0f
    6ca4:	6e 84       	ldd	r6, Y+14	; 0x0e
    6ca6:	7d 84       	ldd	r7, Y+13	; 0x0d
    6ca8:	8c 84       	ldd	r8, Y+12	; 0x0c
    6caa:	9b 84       	ldd	r9, Y+11	; 0x0b
    6cac:	aa 84       	ldd	r10, Y+10	; 0x0a
    6cae:	b9 84       	ldd	r11, Y+9	; 0x09
    6cb0:	c8 84       	ldd	r12, Y+8	; 0x08
    6cb2:	df 80       	ldd	r13, Y+7	; 0x07
    6cb4:	ee 80       	ldd	r14, Y+6	; 0x06
    6cb6:	fd 80       	ldd	r15, Y+5	; 0x05
    6cb8:	0c 81       	ldd	r16, Y+4	; 0x04
    6cba:	1b 81       	ldd	r17, Y+3	; 0x03
    6cbc:	aa 81       	ldd	r26, Y+2	; 0x02
    6cbe:	b9 81       	ldd	r27, Y+1	; 0x01
    6cc0:	ce 0f       	add	r28, r30
    6cc2:	d1 1d       	adc	r29, r1
    6cc4:	0f b6       	in	r0, 0x3f	; 63
    6cc6:	f8 94       	cli
    6cc8:	de bf       	out	0x3e, r29	; 62
    6cca:	0f be       	out	0x3f, r0	; 63
    6ccc:	cd bf       	out	0x3d, r28	; 61
    6cce:	ed 01       	movw	r28, r26
    6cd0:	08 95       	ret

00006cd2 <malloc>:
    6cd2:	cf 93       	push	r28
    6cd4:	df 93       	push	r29
    6cd6:	bc 01       	movw	r22, r24
    6cd8:	82 30       	cpi	r24, 0x02	; 2
    6cda:	91 05       	cpc	r25, r1
    6cdc:	10 f4       	brcc	.+4      	; 0x6ce2 <malloc+0x10>
    6cde:	62 e0       	ldi	r22, 0x02	; 2
    6ce0:	70 e0       	ldi	r23, 0x00	; 0
    6ce2:	a0 91 82 07 	lds	r26, 0x0782
    6ce6:	b0 91 83 07 	lds	r27, 0x0783
    6cea:	ed 01       	movw	r28, r26
    6cec:	e0 e0       	ldi	r30, 0x00	; 0
    6cee:	f0 e0       	ldi	r31, 0x00	; 0
    6cf0:	40 e0       	ldi	r20, 0x00	; 0
    6cf2:	50 e0       	ldi	r21, 0x00	; 0
    6cf4:	21 c0       	rjmp	.+66     	; 0x6d38 <malloc+0x66>
    6cf6:	88 81       	ld	r24, Y
    6cf8:	99 81       	ldd	r25, Y+1	; 0x01
    6cfa:	86 17       	cp	r24, r22
    6cfc:	97 07       	cpc	r25, r23
    6cfe:	69 f4       	brne	.+26     	; 0x6d1a <malloc+0x48>
    6d00:	8a 81       	ldd	r24, Y+2	; 0x02
    6d02:	9b 81       	ldd	r25, Y+3	; 0x03
    6d04:	30 97       	sbiw	r30, 0x00	; 0
    6d06:	19 f0       	breq	.+6      	; 0x6d0e <malloc+0x3c>
    6d08:	93 83       	std	Z+3, r25	; 0x03
    6d0a:	82 83       	std	Z+2, r24	; 0x02
    6d0c:	04 c0       	rjmp	.+8      	; 0x6d16 <malloc+0x44>
    6d0e:	90 93 83 07 	sts	0x0783, r25
    6d12:	80 93 82 07 	sts	0x0782, r24
    6d16:	fe 01       	movw	r30, r28
    6d18:	34 c0       	rjmp	.+104    	; 0x6d82 <malloc+0xb0>
    6d1a:	68 17       	cp	r22, r24
    6d1c:	79 07       	cpc	r23, r25
    6d1e:	38 f4       	brcc	.+14     	; 0x6d2e <malloc+0x5c>
    6d20:	41 15       	cp	r20, r1
    6d22:	51 05       	cpc	r21, r1
    6d24:	19 f0       	breq	.+6      	; 0x6d2c <malloc+0x5a>
    6d26:	84 17       	cp	r24, r20
    6d28:	95 07       	cpc	r25, r21
    6d2a:	08 f4       	brcc	.+2      	; 0x6d2e <malloc+0x5c>
    6d2c:	ac 01       	movw	r20, r24
    6d2e:	fe 01       	movw	r30, r28
    6d30:	8a 81       	ldd	r24, Y+2	; 0x02
    6d32:	9b 81       	ldd	r25, Y+3	; 0x03
    6d34:	9c 01       	movw	r18, r24
    6d36:	e9 01       	movw	r28, r18
    6d38:	20 97       	sbiw	r28, 0x00	; 0
    6d3a:	e9 f6       	brne	.-70     	; 0x6cf6 <malloc+0x24>
    6d3c:	41 15       	cp	r20, r1
    6d3e:	51 05       	cpc	r21, r1
    6d40:	a9 f1       	breq	.+106    	; 0x6dac <malloc+0xda>
    6d42:	ca 01       	movw	r24, r20
    6d44:	86 1b       	sub	r24, r22
    6d46:	97 0b       	sbc	r25, r23
    6d48:	04 97       	sbiw	r24, 0x04	; 4
    6d4a:	08 f4       	brcc	.+2      	; 0x6d4e <malloc+0x7c>
    6d4c:	ba 01       	movw	r22, r20
    6d4e:	e0 e0       	ldi	r30, 0x00	; 0
    6d50:	f0 e0       	ldi	r31, 0x00	; 0
    6d52:	2a c0       	rjmp	.+84     	; 0x6da8 <malloc+0xd6>
    6d54:	8d 91       	ld	r24, X+
    6d56:	9c 91       	ld	r25, X
    6d58:	11 97       	sbiw	r26, 0x01	; 1
    6d5a:	84 17       	cp	r24, r20
    6d5c:	95 07       	cpc	r25, r21
    6d5e:	f9 f4       	brne	.+62     	; 0x6d9e <malloc+0xcc>
    6d60:	64 17       	cp	r22, r20
    6d62:	75 07       	cpc	r23, r21
    6d64:	81 f4       	brne	.+32     	; 0x6d86 <malloc+0xb4>
    6d66:	12 96       	adiw	r26, 0x02	; 2
    6d68:	8d 91       	ld	r24, X+
    6d6a:	9c 91       	ld	r25, X
    6d6c:	13 97       	sbiw	r26, 0x03	; 3
    6d6e:	30 97       	sbiw	r30, 0x00	; 0
    6d70:	19 f0       	breq	.+6      	; 0x6d78 <malloc+0xa6>
    6d72:	93 83       	std	Z+3, r25	; 0x03
    6d74:	82 83       	std	Z+2, r24	; 0x02
    6d76:	04 c0       	rjmp	.+8      	; 0x6d80 <malloc+0xae>
    6d78:	90 93 83 07 	sts	0x0783, r25
    6d7c:	80 93 82 07 	sts	0x0782, r24
    6d80:	fd 01       	movw	r30, r26
    6d82:	32 96       	adiw	r30, 0x02	; 2
    6d84:	4f c0       	rjmp	.+158    	; 0x6e24 <malloc+0x152>
    6d86:	ca 01       	movw	r24, r20
    6d88:	86 1b       	sub	r24, r22
    6d8a:	97 0b       	sbc	r25, r23
    6d8c:	fd 01       	movw	r30, r26
    6d8e:	e8 0f       	add	r30, r24
    6d90:	f9 1f       	adc	r31, r25
    6d92:	61 93       	st	Z+, r22
    6d94:	71 93       	st	Z+, r23
    6d96:	02 97       	sbiw	r24, 0x02	; 2
    6d98:	8d 93       	st	X+, r24
    6d9a:	9c 93       	st	X, r25
    6d9c:	43 c0       	rjmp	.+134    	; 0x6e24 <malloc+0x152>
    6d9e:	fd 01       	movw	r30, r26
    6da0:	82 81       	ldd	r24, Z+2	; 0x02
    6da2:	93 81       	ldd	r25, Z+3	; 0x03
    6da4:	9c 01       	movw	r18, r24
    6da6:	d9 01       	movw	r26, r18
    6da8:	10 97       	sbiw	r26, 0x00	; 0
    6daa:	a1 f6       	brne	.-88     	; 0x6d54 <malloc+0x82>
    6dac:	80 91 80 07 	lds	r24, 0x0780
    6db0:	90 91 81 07 	lds	r25, 0x0781
    6db4:	89 2b       	or	r24, r25
    6db6:	41 f4       	brne	.+16     	; 0x6dc8 <malloc+0xf6>
    6db8:	80 91 ad 03 	lds	r24, 0x03AD
    6dbc:	90 91 ae 03 	lds	r25, 0x03AE
    6dc0:	90 93 81 07 	sts	0x0781, r25
    6dc4:	80 93 80 07 	sts	0x0780, r24
    6dc8:	40 91 af 03 	lds	r20, 0x03AF
    6dcc:	50 91 b0 03 	lds	r21, 0x03B0
    6dd0:	41 15       	cp	r20, r1
    6dd2:	51 05       	cpc	r21, r1
    6dd4:	41 f4       	brne	.+16     	; 0x6de6 <malloc+0x114>
    6dd6:	4d b7       	in	r20, 0x3d	; 61
    6dd8:	5e b7       	in	r21, 0x3e	; 62
    6dda:	80 91 ab 03 	lds	r24, 0x03AB
    6dde:	90 91 ac 03 	lds	r25, 0x03AC
    6de2:	48 1b       	sub	r20, r24
    6de4:	59 0b       	sbc	r21, r25
    6de6:	20 91 80 07 	lds	r18, 0x0780
    6dea:	30 91 81 07 	lds	r19, 0x0781
    6dee:	24 17       	cp	r18, r20
    6df0:	35 07       	cpc	r19, r21
    6df2:	b0 f4       	brcc	.+44     	; 0x6e20 <malloc+0x14e>
    6df4:	ca 01       	movw	r24, r20
    6df6:	82 1b       	sub	r24, r18
    6df8:	93 0b       	sbc	r25, r19
    6dfa:	86 17       	cp	r24, r22
    6dfc:	97 07       	cpc	r25, r23
    6dfe:	80 f0       	brcs	.+32     	; 0x6e20 <malloc+0x14e>
    6e00:	ab 01       	movw	r20, r22
    6e02:	4e 5f       	subi	r20, 0xFE	; 254
    6e04:	5f 4f       	sbci	r21, 0xFF	; 255
    6e06:	84 17       	cp	r24, r20
    6e08:	95 07       	cpc	r25, r21
    6e0a:	50 f0       	brcs	.+20     	; 0x6e20 <malloc+0x14e>
    6e0c:	42 0f       	add	r20, r18
    6e0e:	53 1f       	adc	r21, r19
    6e10:	50 93 81 07 	sts	0x0781, r21
    6e14:	40 93 80 07 	sts	0x0780, r20
    6e18:	f9 01       	movw	r30, r18
    6e1a:	61 93       	st	Z+, r22
    6e1c:	71 93       	st	Z+, r23
    6e1e:	02 c0       	rjmp	.+4      	; 0x6e24 <malloc+0x152>
    6e20:	e0 e0       	ldi	r30, 0x00	; 0
    6e22:	f0 e0       	ldi	r31, 0x00	; 0
    6e24:	cf 01       	movw	r24, r30
    6e26:	df 91       	pop	r29
    6e28:	cf 91       	pop	r28
    6e2a:	08 95       	ret

00006e2c <free>:
    6e2c:	cf 93       	push	r28
    6e2e:	df 93       	push	r29
    6e30:	00 97       	sbiw	r24, 0x00	; 0
    6e32:	09 f4       	brne	.+2      	; 0x6e36 <free+0xa>
    6e34:	50 c0       	rjmp	.+160    	; 0x6ed6 <free+0xaa>
    6e36:	ec 01       	movw	r28, r24
    6e38:	22 97       	sbiw	r28, 0x02	; 2
    6e3a:	1b 82       	std	Y+3, r1	; 0x03
    6e3c:	1a 82       	std	Y+2, r1	; 0x02
    6e3e:	a0 91 82 07 	lds	r26, 0x0782
    6e42:	b0 91 83 07 	lds	r27, 0x0783
    6e46:	10 97       	sbiw	r26, 0x00	; 0
    6e48:	09 f1       	breq	.+66     	; 0x6e8c <free+0x60>
    6e4a:	40 e0       	ldi	r20, 0x00	; 0
    6e4c:	50 e0       	ldi	r21, 0x00	; 0
    6e4e:	ac 17       	cp	r26, r28
    6e50:	bd 07       	cpc	r27, r29
    6e52:	08 f1       	brcs	.+66     	; 0x6e96 <free+0x6a>
    6e54:	bb 83       	std	Y+3, r27	; 0x03
    6e56:	aa 83       	std	Y+2, r26	; 0x02
    6e58:	fe 01       	movw	r30, r28
    6e5a:	21 91       	ld	r18, Z+
    6e5c:	31 91       	ld	r19, Z+
    6e5e:	e2 0f       	add	r30, r18
    6e60:	f3 1f       	adc	r31, r19
    6e62:	ae 17       	cp	r26, r30
    6e64:	bf 07       	cpc	r27, r31
    6e66:	79 f4       	brne	.+30     	; 0x6e86 <free+0x5a>
    6e68:	8d 91       	ld	r24, X+
    6e6a:	9c 91       	ld	r25, X
    6e6c:	11 97       	sbiw	r26, 0x01	; 1
    6e6e:	28 0f       	add	r18, r24
    6e70:	39 1f       	adc	r19, r25
    6e72:	2e 5f       	subi	r18, 0xFE	; 254
    6e74:	3f 4f       	sbci	r19, 0xFF	; 255
    6e76:	39 83       	std	Y+1, r19	; 0x01
    6e78:	28 83       	st	Y, r18
    6e7a:	12 96       	adiw	r26, 0x02	; 2
    6e7c:	8d 91       	ld	r24, X+
    6e7e:	9c 91       	ld	r25, X
    6e80:	13 97       	sbiw	r26, 0x03	; 3
    6e82:	9b 83       	std	Y+3, r25	; 0x03
    6e84:	8a 83       	std	Y+2, r24	; 0x02
    6e86:	41 15       	cp	r20, r1
    6e88:	51 05       	cpc	r21, r1
    6e8a:	71 f4       	brne	.+28     	; 0x6ea8 <free+0x7c>
    6e8c:	d0 93 83 07 	sts	0x0783, r29
    6e90:	c0 93 82 07 	sts	0x0782, r28
    6e94:	20 c0       	rjmp	.+64     	; 0x6ed6 <free+0xaa>
    6e96:	12 96       	adiw	r26, 0x02	; 2
    6e98:	8d 91       	ld	r24, X+
    6e9a:	9c 91       	ld	r25, X
    6e9c:	13 97       	sbiw	r26, 0x03	; 3
    6e9e:	ad 01       	movw	r20, r26
    6ea0:	00 97       	sbiw	r24, 0x00	; 0
    6ea2:	11 f0       	breq	.+4      	; 0x6ea8 <free+0x7c>
    6ea4:	dc 01       	movw	r26, r24
    6ea6:	d3 cf       	rjmp	.-90     	; 0x6e4e <free+0x22>
    6ea8:	fa 01       	movw	r30, r20
    6eaa:	d3 83       	std	Z+3, r29	; 0x03
    6eac:	c2 83       	std	Z+2, r28	; 0x02
    6eae:	21 91       	ld	r18, Z+
    6eb0:	31 91       	ld	r19, Z+
    6eb2:	e2 0f       	add	r30, r18
    6eb4:	f3 1f       	adc	r31, r19
    6eb6:	ce 17       	cp	r28, r30
    6eb8:	df 07       	cpc	r29, r31
    6eba:	69 f4       	brne	.+26     	; 0x6ed6 <free+0xaa>
    6ebc:	88 81       	ld	r24, Y
    6ebe:	99 81       	ldd	r25, Y+1	; 0x01
    6ec0:	28 0f       	add	r18, r24
    6ec2:	39 1f       	adc	r19, r25
    6ec4:	2e 5f       	subi	r18, 0xFE	; 254
    6ec6:	3f 4f       	sbci	r19, 0xFF	; 255
    6ec8:	fa 01       	movw	r30, r20
    6eca:	31 83       	std	Z+1, r19	; 0x01
    6ecc:	20 83       	st	Z, r18
    6ece:	8a 81       	ldd	r24, Y+2	; 0x02
    6ed0:	9b 81       	ldd	r25, Y+3	; 0x03
    6ed2:	93 83       	std	Z+3, r25	; 0x03
    6ed4:	82 83       	std	Z+2, r24	; 0x02
    6ed6:	df 91       	pop	r29
    6ed8:	cf 91       	pop	r28
    6eda:	08 95       	ret

00006edc <__ftoa_engine>:
    6edc:	28 30       	cpi	r18, 0x08	; 8
    6ede:	08 f0       	brcs	.+2      	; 0x6ee2 <__ftoa_engine+0x6>
    6ee0:	27 e0       	ldi	r18, 0x07	; 7
    6ee2:	33 27       	eor	r19, r19
    6ee4:	da 01       	movw	r26, r20
    6ee6:	99 0f       	add	r25, r25
    6ee8:	31 1d       	adc	r19, r1
    6eea:	87 fd       	sbrc	r24, 7
    6eec:	91 60       	ori	r25, 0x01	; 1
    6eee:	00 96       	adiw	r24, 0x00	; 0
    6ef0:	61 05       	cpc	r22, r1
    6ef2:	71 05       	cpc	r23, r1
    6ef4:	39 f4       	brne	.+14     	; 0x6f04 <__ftoa_engine+0x28>
    6ef6:	32 60       	ori	r19, 0x02	; 2
    6ef8:	2e 5f       	subi	r18, 0xFE	; 254
    6efa:	3d 93       	st	X+, r19
    6efc:	30 e3       	ldi	r19, 0x30	; 48
    6efe:	2a 95       	dec	r18
    6f00:	e1 f7       	brne	.-8      	; 0x6efa <__ftoa_engine+0x1e>
    6f02:	08 95       	ret
    6f04:	9f 3f       	cpi	r25, 0xFF	; 255
    6f06:	30 f0       	brcs	.+12     	; 0x6f14 <__ftoa_engine+0x38>
    6f08:	80 38       	cpi	r24, 0x80	; 128
    6f0a:	71 05       	cpc	r23, r1
    6f0c:	61 05       	cpc	r22, r1
    6f0e:	09 f0       	breq	.+2      	; 0x6f12 <__ftoa_engine+0x36>
    6f10:	3c 5f       	subi	r19, 0xFC	; 252
    6f12:	3c 5f       	subi	r19, 0xFC	; 252
    6f14:	3d 93       	st	X+, r19
    6f16:	91 30       	cpi	r25, 0x01	; 1
    6f18:	08 f0       	brcs	.+2      	; 0x6f1c <__ftoa_engine+0x40>
    6f1a:	80 68       	ori	r24, 0x80	; 128
    6f1c:	91 1d       	adc	r25, r1
    6f1e:	df 93       	push	r29
    6f20:	cf 93       	push	r28
    6f22:	1f 93       	push	r17
    6f24:	0f 93       	push	r16
    6f26:	ff 92       	push	r15
    6f28:	ef 92       	push	r14
    6f2a:	19 2f       	mov	r17, r25
    6f2c:	98 7f       	andi	r25, 0xF8	; 248
    6f2e:	96 95       	lsr	r25
    6f30:	e9 2f       	mov	r30, r25
    6f32:	96 95       	lsr	r25
    6f34:	96 95       	lsr	r25
    6f36:	e9 0f       	add	r30, r25
    6f38:	ff 27       	eor	r31, r31
    6f3a:	ef 53       	subi	r30, 0x3F	; 63
    6f3c:	fa 4f       	sbci	r31, 0xFA	; 250
    6f3e:	99 27       	eor	r25, r25
    6f40:	33 27       	eor	r19, r19
    6f42:	ee 24       	eor	r14, r14
    6f44:	ff 24       	eor	r15, r15
    6f46:	a7 01       	movw	r20, r14
    6f48:	e7 01       	movw	r28, r14
    6f4a:	05 90       	lpm	r0, Z+
    6f4c:	08 94       	sec
    6f4e:	07 94       	ror	r0
    6f50:	28 f4       	brcc	.+10     	; 0x6f5c <__ftoa_engine+0x80>
    6f52:	36 0f       	add	r19, r22
    6f54:	e7 1e       	adc	r14, r23
    6f56:	f8 1e       	adc	r15, r24
    6f58:	49 1f       	adc	r20, r25
    6f5a:	51 1d       	adc	r21, r1
    6f5c:	66 0f       	add	r22, r22
    6f5e:	77 1f       	adc	r23, r23
    6f60:	88 1f       	adc	r24, r24
    6f62:	99 1f       	adc	r25, r25
    6f64:	06 94       	lsr	r0
    6f66:	a1 f7       	brne	.-24     	; 0x6f50 <__ftoa_engine+0x74>
    6f68:	05 90       	lpm	r0, Z+
    6f6a:	07 94       	ror	r0
    6f6c:	28 f4       	brcc	.+10     	; 0x6f78 <__ftoa_engine+0x9c>
    6f6e:	e7 0e       	add	r14, r23
    6f70:	f8 1e       	adc	r15, r24
    6f72:	49 1f       	adc	r20, r25
    6f74:	56 1f       	adc	r21, r22
    6f76:	c1 1d       	adc	r28, r1
    6f78:	77 0f       	add	r23, r23
    6f7a:	88 1f       	adc	r24, r24
    6f7c:	99 1f       	adc	r25, r25
    6f7e:	66 1f       	adc	r22, r22
    6f80:	06 94       	lsr	r0
    6f82:	a1 f7       	brne	.-24     	; 0x6f6c <__ftoa_engine+0x90>
    6f84:	05 90       	lpm	r0, Z+
    6f86:	07 94       	ror	r0
    6f88:	28 f4       	brcc	.+10     	; 0x6f94 <__ftoa_engine+0xb8>
    6f8a:	f8 0e       	add	r15, r24
    6f8c:	49 1f       	adc	r20, r25
    6f8e:	56 1f       	adc	r21, r22
    6f90:	c7 1f       	adc	r28, r23
    6f92:	d1 1d       	adc	r29, r1
    6f94:	88 0f       	add	r24, r24
    6f96:	99 1f       	adc	r25, r25
    6f98:	66 1f       	adc	r22, r22
    6f9a:	77 1f       	adc	r23, r23
    6f9c:	06 94       	lsr	r0
    6f9e:	a1 f7       	brne	.-24     	; 0x6f88 <__ftoa_engine+0xac>
    6fa0:	05 90       	lpm	r0, Z+
    6fa2:	07 94       	ror	r0
    6fa4:	20 f4       	brcc	.+8      	; 0x6fae <__ftoa_engine+0xd2>
    6fa6:	49 0f       	add	r20, r25
    6fa8:	56 1f       	adc	r21, r22
    6faa:	c7 1f       	adc	r28, r23
    6fac:	d8 1f       	adc	r29, r24
    6fae:	99 0f       	add	r25, r25
    6fb0:	66 1f       	adc	r22, r22
    6fb2:	77 1f       	adc	r23, r23
    6fb4:	88 1f       	adc	r24, r24
    6fb6:	06 94       	lsr	r0
    6fb8:	a9 f7       	brne	.-22     	; 0x6fa4 <__ftoa_engine+0xc8>
    6fba:	84 91       	lpm	r24, Z+
    6fbc:	10 95       	com	r17
    6fbe:	17 70       	andi	r17, 0x07	; 7
    6fc0:	41 f0       	breq	.+16     	; 0x6fd2 <__ftoa_engine+0xf6>
    6fc2:	d6 95       	lsr	r29
    6fc4:	c7 95       	ror	r28
    6fc6:	57 95       	ror	r21
    6fc8:	47 95       	ror	r20
    6fca:	f7 94       	ror	r15
    6fcc:	e7 94       	ror	r14
    6fce:	1a 95       	dec	r17
    6fd0:	c1 f7       	brne	.-16     	; 0x6fc2 <__ftoa_engine+0xe6>
    6fd2:	e7 e6       	ldi	r30, 0x67	; 103
    6fd4:	f5 e0       	ldi	r31, 0x05	; 5
    6fd6:	68 94       	set
    6fd8:	15 90       	lpm	r1, Z+
    6fda:	15 91       	lpm	r17, Z+
    6fdc:	35 91       	lpm	r19, Z+
    6fde:	65 91       	lpm	r22, Z+
    6fe0:	95 91       	lpm	r25, Z+
    6fe2:	05 90       	lpm	r0, Z+
    6fe4:	7f e2       	ldi	r23, 0x2F	; 47
    6fe6:	73 95       	inc	r23
    6fe8:	e1 18       	sub	r14, r1
    6fea:	f1 0a       	sbc	r15, r17
    6fec:	43 0b       	sbc	r20, r19
    6fee:	56 0b       	sbc	r21, r22
    6ff0:	c9 0b       	sbc	r28, r25
    6ff2:	d0 09       	sbc	r29, r0
    6ff4:	c0 f7       	brcc	.-16     	; 0x6fe6 <__ftoa_engine+0x10a>
    6ff6:	e1 0c       	add	r14, r1
    6ff8:	f1 1e       	adc	r15, r17
    6ffa:	43 1f       	adc	r20, r19
    6ffc:	56 1f       	adc	r21, r22
    6ffe:	c9 1f       	adc	r28, r25
    7000:	d0 1d       	adc	r29, r0
    7002:	7e f4       	brtc	.+30     	; 0x7022 <__ftoa_engine+0x146>
    7004:	70 33       	cpi	r23, 0x30	; 48
    7006:	11 f4       	brne	.+4      	; 0x700c <__ftoa_engine+0x130>
    7008:	8a 95       	dec	r24
    700a:	e6 cf       	rjmp	.-52     	; 0x6fd8 <__ftoa_engine+0xfc>
    700c:	e8 94       	clt
    700e:	01 50       	subi	r16, 0x01	; 1
    7010:	30 f0       	brcs	.+12     	; 0x701e <__ftoa_engine+0x142>
    7012:	08 0f       	add	r16, r24
    7014:	0a f4       	brpl	.+2      	; 0x7018 <__ftoa_engine+0x13c>
    7016:	00 27       	eor	r16, r16
    7018:	02 17       	cp	r16, r18
    701a:	08 f4       	brcc	.+2      	; 0x701e <__ftoa_engine+0x142>
    701c:	20 2f       	mov	r18, r16
    701e:	23 95       	inc	r18
    7020:	02 2f       	mov	r16, r18
    7022:	7a 33       	cpi	r23, 0x3A	; 58
    7024:	28 f0       	brcs	.+10     	; 0x7030 <__ftoa_engine+0x154>
    7026:	79 e3       	ldi	r23, 0x39	; 57
    7028:	7d 93       	st	X+, r23
    702a:	2a 95       	dec	r18
    702c:	e9 f7       	brne	.-6      	; 0x7028 <__ftoa_engine+0x14c>
    702e:	10 c0       	rjmp	.+32     	; 0x7050 <__ftoa_engine+0x174>
    7030:	7d 93       	st	X+, r23
    7032:	2a 95       	dec	r18
    7034:	89 f6       	brne	.-94     	; 0x6fd8 <__ftoa_engine+0xfc>
    7036:	06 94       	lsr	r0
    7038:	97 95       	ror	r25
    703a:	67 95       	ror	r22
    703c:	37 95       	ror	r19
    703e:	17 95       	ror	r17
    7040:	17 94       	ror	r1
    7042:	e1 18       	sub	r14, r1
    7044:	f1 0a       	sbc	r15, r17
    7046:	43 0b       	sbc	r20, r19
    7048:	56 0b       	sbc	r21, r22
    704a:	c9 0b       	sbc	r28, r25
    704c:	d0 09       	sbc	r29, r0
    704e:	98 f0       	brcs	.+38     	; 0x7076 <__ftoa_engine+0x19a>
    7050:	23 95       	inc	r18
    7052:	7e 91       	ld	r23, -X
    7054:	73 95       	inc	r23
    7056:	7a 33       	cpi	r23, 0x3A	; 58
    7058:	08 f0       	brcs	.+2      	; 0x705c <__ftoa_engine+0x180>
    705a:	70 e3       	ldi	r23, 0x30	; 48
    705c:	7c 93       	st	X, r23
    705e:	20 13       	cpse	r18, r16
    7060:	b8 f7       	brcc	.-18     	; 0x7050 <__ftoa_engine+0x174>
    7062:	7e 91       	ld	r23, -X
    7064:	70 61       	ori	r23, 0x10	; 16
    7066:	7d 93       	st	X+, r23
    7068:	30 f0       	brcs	.+12     	; 0x7076 <__ftoa_engine+0x19a>
    706a:	83 95       	inc	r24
    706c:	71 e3       	ldi	r23, 0x31	; 49
    706e:	7d 93       	st	X+, r23
    7070:	70 e3       	ldi	r23, 0x30	; 48
    7072:	2a 95       	dec	r18
    7074:	e1 f7       	brne	.-8      	; 0x706e <__ftoa_engine+0x192>
    7076:	11 24       	eor	r1, r1
    7078:	ef 90       	pop	r14
    707a:	ff 90       	pop	r15
    707c:	0f 91       	pop	r16
    707e:	1f 91       	pop	r17
    7080:	cf 91       	pop	r28
    7082:	df 91       	pop	r29
    7084:	99 27       	eor	r25, r25
    7086:	87 fd       	sbrc	r24, 7
    7088:	90 95       	com	r25
    708a:	08 95       	ret

0000708c <strnlen_P>:
    708c:	fc 01       	movw	r30, r24
    708e:	05 90       	lpm	r0, Z+
    7090:	61 50       	subi	r22, 0x01	; 1
    7092:	70 40       	sbci	r23, 0x00	; 0
    7094:	01 10       	cpse	r0, r1
    7096:	d8 f7       	brcc	.-10     	; 0x708e <strnlen_P+0x2>
    7098:	80 95       	com	r24
    709a:	90 95       	com	r25
    709c:	8e 0f       	add	r24, r30
    709e:	9f 1f       	adc	r25, r31
    70a0:	08 95       	ret

000070a2 <strnlen>:
    70a2:	fc 01       	movw	r30, r24
    70a4:	61 50       	subi	r22, 0x01	; 1
    70a6:	70 40       	sbci	r23, 0x00	; 0
    70a8:	01 90       	ld	r0, Z+
    70aa:	01 10       	cpse	r0, r1
    70ac:	d8 f7       	brcc	.-10     	; 0x70a4 <strnlen+0x2>
    70ae:	80 95       	com	r24
    70b0:	90 95       	com	r25
    70b2:	8e 0f       	add	r24, r30
    70b4:	9f 1f       	adc	r25, r31
    70b6:	08 95       	ret

000070b8 <fputc>:
    70b8:	0f 93       	push	r16
    70ba:	1f 93       	push	r17
    70bc:	cf 93       	push	r28
    70be:	df 93       	push	r29
    70c0:	8c 01       	movw	r16, r24
    70c2:	eb 01       	movw	r28, r22
    70c4:	8b 81       	ldd	r24, Y+3	; 0x03
    70c6:	81 ff       	sbrs	r24, 1
    70c8:	1b c0       	rjmp	.+54     	; 0x7100 <fputc+0x48>
    70ca:	82 ff       	sbrs	r24, 2
    70cc:	0d c0       	rjmp	.+26     	; 0x70e8 <fputc+0x30>
    70ce:	2e 81       	ldd	r18, Y+6	; 0x06
    70d0:	3f 81       	ldd	r19, Y+7	; 0x07
    70d2:	8c 81       	ldd	r24, Y+4	; 0x04
    70d4:	9d 81       	ldd	r25, Y+5	; 0x05
    70d6:	28 17       	cp	r18, r24
    70d8:	39 07       	cpc	r19, r25
    70da:	64 f4       	brge	.+24     	; 0x70f4 <fputc+0x3c>
    70dc:	e8 81       	ld	r30, Y
    70de:	f9 81       	ldd	r31, Y+1	; 0x01
    70e0:	01 93       	st	Z+, r16
    70e2:	f9 83       	std	Y+1, r31	; 0x01
    70e4:	e8 83       	st	Y, r30
    70e6:	06 c0       	rjmp	.+12     	; 0x70f4 <fputc+0x3c>
    70e8:	e8 85       	ldd	r30, Y+8	; 0x08
    70ea:	f9 85       	ldd	r31, Y+9	; 0x09
    70ec:	80 2f       	mov	r24, r16
    70ee:	09 95       	icall
    70f0:	89 2b       	or	r24, r25
    70f2:	31 f4       	brne	.+12     	; 0x7100 <fputc+0x48>
    70f4:	8e 81       	ldd	r24, Y+6	; 0x06
    70f6:	9f 81       	ldd	r25, Y+7	; 0x07
    70f8:	01 96       	adiw	r24, 0x01	; 1
    70fa:	9f 83       	std	Y+7, r25	; 0x07
    70fc:	8e 83       	std	Y+6, r24	; 0x06
    70fe:	02 c0       	rjmp	.+4      	; 0x7104 <fputc+0x4c>
    7100:	0f ef       	ldi	r16, 0xFF	; 255
    7102:	1f ef       	ldi	r17, 0xFF	; 255
    7104:	c8 01       	movw	r24, r16
    7106:	df 91       	pop	r29
    7108:	cf 91       	pop	r28
    710a:	1f 91       	pop	r17
    710c:	0f 91       	pop	r16
    710e:	08 95       	ret

00007110 <printf>:
    7110:	a0 e0       	ldi	r26, 0x00	; 0
    7112:	b0 e0       	ldi	r27, 0x00	; 0
    7114:	ed e8       	ldi	r30, 0x8D	; 141
    7116:	f8 e3       	ldi	r31, 0x38	; 56
    7118:	b5 cd       	rjmp	.-1174   	; 0x6c84 <__prologue_saves__+0x20>
    711a:	fe 01       	movw	r30, r28
    711c:	35 96       	adiw	r30, 0x05	; 5
    711e:	61 91       	ld	r22, Z+
    7120:	71 91       	ld	r23, Z+
    7122:	80 91 86 07 	lds	r24, 0x0786
    7126:	90 91 87 07 	lds	r25, 0x0787
    712a:	af 01       	movw	r20, r30
    712c:	f2 d9       	rcall	.-3100   	; 0x6512 <vfprintf>
    712e:	20 96       	adiw	r28, 0x00	; 0
    7130:	e2 e0       	ldi	r30, 0x02	; 2
    7132:	c4 cd       	rjmp	.-1144   	; 0x6cbc <__epilogue_restores__+0x20>

00007134 <puts>:
    7134:	0f 93       	push	r16
    7136:	1f 93       	push	r17
    7138:	cf 93       	push	r28
    713a:	df 93       	push	r29
    713c:	8c 01       	movw	r16, r24
    713e:	e0 91 86 07 	lds	r30, 0x0786
    7142:	f0 91 87 07 	lds	r31, 0x0787
    7146:	83 81       	ldd	r24, Z+3	; 0x03
    7148:	81 ff       	sbrs	r24, 1
    714a:	21 c0       	rjmp	.+66     	; 0x718e <puts+0x5a>
    714c:	c0 e0       	ldi	r28, 0x00	; 0
    714e:	d0 e0       	ldi	r29, 0x00	; 0
    7150:	0d c0       	rjmp	.+26     	; 0x716c <puts+0x38>
    7152:	e0 91 86 07 	lds	r30, 0x0786
    7156:	f0 91 87 07 	lds	r31, 0x0787
    715a:	20 85       	ldd	r18, Z+8	; 0x08
    715c:	31 85       	ldd	r19, Z+9	; 0x09
    715e:	bf 01       	movw	r22, r30
    7160:	f9 01       	movw	r30, r18
    7162:	09 95       	icall
    7164:	89 2b       	or	r24, r25
    7166:	11 f0       	breq	.+4      	; 0x716c <puts+0x38>
    7168:	cf ef       	ldi	r28, 0xFF	; 255
    716a:	df ef       	ldi	r29, 0xFF	; 255
    716c:	f8 01       	movw	r30, r16
    716e:	81 91       	ld	r24, Z+
    7170:	8f 01       	movw	r16, r30
    7172:	88 23       	and	r24, r24
    7174:	71 f7       	brne	.-36     	; 0x7152 <puts+0x1e>
    7176:	e0 91 86 07 	lds	r30, 0x0786
    717a:	f0 91 87 07 	lds	r31, 0x0787
    717e:	20 85       	ldd	r18, Z+8	; 0x08
    7180:	31 85       	ldd	r19, Z+9	; 0x09
    7182:	8a e0       	ldi	r24, 0x0A	; 10
    7184:	bf 01       	movw	r22, r30
    7186:	f9 01       	movw	r30, r18
    7188:	09 95       	icall
    718a:	89 2b       	or	r24, r25
    718c:	11 f0       	breq	.+4      	; 0x7192 <puts+0x5e>
    718e:	cf ef       	ldi	r28, 0xFF	; 255
    7190:	df ef       	ldi	r29, 0xFF	; 255
    7192:	ce 01       	movw	r24, r28
    7194:	df 91       	pop	r29
    7196:	cf 91       	pop	r28
    7198:	1f 91       	pop	r17
    719a:	0f 91       	pop	r16
    719c:	08 95       	ret

0000719e <__ultoa_invert>:
    719e:	fa 01       	movw	r30, r20
    71a0:	aa 27       	eor	r26, r26
    71a2:	28 30       	cpi	r18, 0x08	; 8
    71a4:	51 f1       	breq	.+84     	; 0x71fa <__ultoa_invert+0x5c>
    71a6:	20 31       	cpi	r18, 0x10	; 16
    71a8:	81 f1       	breq	.+96     	; 0x720a <__ultoa_invert+0x6c>
    71aa:	e8 94       	clt
    71ac:	6f 93       	push	r22
    71ae:	6e 7f       	andi	r22, 0xFE	; 254
    71b0:	6e 5f       	subi	r22, 0xFE	; 254
    71b2:	7f 4f       	sbci	r23, 0xFF	; 255
    71b4:	8f 4f       	sbci	r24, 0xFF	; 255
    71b6:	9f 4f       	sbci	r25, 0xFF	; 255
    71b8:	af 4f       	sbci	r26, 0xFF	; 255
    71ba:	b1 e0       	ldi	r27, 0x01	; 1
    71bc:	3e d0       	rcall	.+124    	; 0x723a <__ultoa_invert+0x9c>
    71be:	b4 e0       	ldi	r27, 0x04	; 4
    71c0:	3c d0       	rcall	.+120    	; 0x723a <__ultoa_invert+0x9c>
    71c2:	67 0f       	add	r22, r23
    71c4:	78 1f       	adc	r23, r24
    71c6:	89 1f       	adc	r24, r25
    71c8:	9a 1f       	adc	r25, r26
    71ca:	a1 1d       	adc	r26, r1
    71cc:	68 0f       	add	r22, r24
    71ce:	79 1f       	adc	r23, r25
    71d0:	8a 1f       	adc	r24, r26
    71d2:	91 1d       	adc	r25, r1
    71d4:	a1 1d       	adc	r26, r1
    71d6:	6a 0f       	add	r22, r26
    71d8:	71 1d       	adc	r23, r1
    71da:	81 1d       	adc	r24, r1
    71dc:	91 1d       	adc	r25, r1
    71de:	a1 1d       	adc	r26, r1
    71e0:	20 d0       	rcall	.+64     	; 0x7222 <__ultoa_invert+0x84>
    71e2:	09 f4       	brne	.+2      	; 0x71e6 <__ultoa_invert+0x48>
    71e4:	68 94       	set
    71e6:	3f 91       	pop	r19
    71e8:	2a e0       	ldi	r18, 0x0A	; 10
    71ea:	26 9f       	mul	r18, r22
    71ec:	11 24       	eor	r1, r1
    71ee:	30 19       	sub	r19, r0
    71f0:	30 5d       	subi	r19, 0xD0	; 208
    71f2:	31 93       	st	Z+, r19
    71f4:	de f6       	brtc	.-74     	; 0x71ac <__ultoa_invert+0xe>
    71f6:	cf 01       	movw	r24, r30
    71f8:	08 95       	ret
    71fa:	46 2f       	mov	r20, r22
    71fc:	47 70       	andi	r20, 0x07	; 7
    71fe:	40 5d       	subi	r20, 0xD0	; 208
    7200:	41 93       	st	Z+, r20
    7202:	b3 e0       	ldi	r27, 0x03	; 3
    7204:	0f d0       	rcall	.+30     	; 0x7224 <__ultoa_invert+0x86>
    7206:	c9 f7       	brne	.-14     	; 0x71fa <__ultoa_invert+0x5c>
    7208:	f6 cf       	rjmp	.-20     	; 0x71f6 <__ultoa_invert+0x58>
    720a:	46 2f       	mov	r20, r22
    720c:	4f 70       	andi	r20, 0x0F	; 15
    720e:	40 5d       	subi	r20, 0xD0	; 208
    7210:	4a 33       	cpi	r20, 0x3A	; 58
    7212:	18 f0       	brcs	.+6      	; 0x721a <__ultoa_invert+0x7c>
    7214:	49 5d       	subi	r20, 0xD9	; 217
    7216:	31 fd       	sbrc	r19, 1
    7218:	40 52       	subi	r20, 0x20	; 32
    721a:	41 93       	st	Z+, r20
    721c:	02 d0       	rcall	.+4      	; 0x7222 <__ultoa_invert+0x84>
    721e:	a9 f7       	brne	.-22     	; 0x720a <__ultoa_invert+0x6c>
    7220:	ea cf       	rjmp	.-44     	; 0x71f6 <__ultoa_invert+0x58>
    7222:	b4 e0       	ldi	r27, 0x04	; 4
    7224:	a6 95       	lsr	r26
    7226:	97 95       	ror	r25
    7228:	87 95       	ror	r24
    722a:	77 95       	ror	r23
    722c:	67 95       	ror	r22
    722e:	ba 95       	dec	r27
    7230:	c9 f7       	brne	.-14     	; 0x7224 <__ultoa_invert+0x86>
    7232:	00 97       	sbiw	r24, 0x00	; 0
    7234:	61 05       	cpc	r22, r1
    7236:	71 05       	cpc	r23, r1
    7238:	08 95       	ret
    723a:	9b 01       	movw	r18, r22
    723c:	ac 01       	movw	r20, r24
    723e:	0a 2e       	mov	r0, r26
    7240:	06 94       	lsr	r0
    7242:	57 95       	ror	r21
    7244:	47 95       	ror	r20
    7246:	37 95       	ror	r19
    7248:	27 95       	ror	r18
    724a:	ba 95       	dec	r27
    724c:	c9 f7       	brne	.-14     	; 0x7240 <__ultoa_invert+0xa2>
    724e:	62 0f       	add	r22, r18
    7250:	73 1f       	adc	r23, r19
    7252:	84 1f       	adc	r24, r20
    7254:	95 1f       	adc	r25, r21
    7256:	a0 1d       	adc	r26, r0
    7258:	08 95       	ret

0000725a <_exit>:
    725a:	f8 94       	cli

0000725c <__stop_program>:
    725c:	ff cf       	rjmp	.-2      	; 0x725c <__stop_program>
